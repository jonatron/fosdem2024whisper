{"text": " I'm going to talk about using Go. What is important when you use Go is dependency management. You cannot write a program these days without depending on something. Dylan is a co-worker of mine. We work on Cillium together. He's going to talk about anything to do with dependency management. So run of applause. Hey everyone. Thanks for coming. So dependency injection. Before we start, a little introduction. Already got one technically. My name is Dylan Reimering. I work at Isovalent on the foundations and the loader team. So we're responsible for basically doing dependent or a lot of changes that I'm going to talk about within the Cillium project. You can find my get up there. In case you find anything interesting. I don't know. You never see. You never know. So before we dive into the dependency injection, why, how it works, what it is for those who don't know, a little journey about why I'm here, why I'm talking about this and how I got here. So what is Cillium? Cillium is a CNI. So it's long, long talk short. We use EBPF to do networking in EBPF. We secure it and we make sure that you can see what's going on. And that actually involves a lot of components. So this is our nice visual about a lot of the different features and we actually have way more that wouldn't even fit on the slide. You can imagine that with a lot of components that we get quite a large application. I checked and we are currently the third most active project on the CNCF. We have, I think, so again last time I checked this is like a month ago. We have 650,000 lines of code that are not the vendor directory. So we have a big code base, a lot of things that happen, which also means that we have a lot of dependencies. So to illustrate that, I picked one of the features that I personally worked a lot on, which is called the Alto announcer. And it's a little feature in Cillium that basically makes sure that certain IP addresses are reachable in the local network via ARP. So both gratuitous ARP and responding. So we have like the big Alto announcer block there, which contains most of the business logic, but all of the other things are dependencies. So all the way to top, we have, in the white still, are our external dependencies. So we have to create ports. We set up, we get environments, configuration, standard outputs, et cetera. Those are connected to our infrastructure layer. So our infrastructure layer does all of the things that are really common in the application, logging, metrics, configuration, da, da, da, da. And then we get to the orange layer, which is our control plane. And there are abstract business logic happens. So this business logic gets go objects, and it also writes go objects. It's all pure go world, and it doesn't have to care mostly about all the things. And then we go down to our data path, where the translations happens from this perfect abstract world into the real world, which in turn often means, for our case, that we talk to the kernel via net link, ebpf, maps, raw sockets, et cetera. So we have to, but for this one, for my big component to be able to work, I basically need all of this to exist, at least in production. So I went back to 111, which is before we started working on dependency injection in Cilium, and looked at what does initialization look like at that point. So we have our main program. We could call into Cobra. This is common, hopefully. We go into our run function. It starts up three components. It initializes the environment, where we already have 50 components. Then we call something called run daemon, which has 50 components spread both before and after the new daemon. And then in our new daemon constructor, we actually create at least 150 components. I started counting, or stopped counting, sorry. So we have a lot of components, but they all have to somehow wire into each other. And at some point, the development team decided is that we are going for sort of hub-nispoke model because we had so many components. We had this big daemon, which was our hub, and it had pointers to almost all components. And then it's easy. You only have to give the daemon to everything, and then via the daemon, you can find every other component. So it was, but that becomes a real mess because when is this pointer nil, when is it not, et cetera. So I started looking into this new daemon function, like what is this about. And then you'll see a pattern. You don't have to read everything. So we initialize this before we're creating this. We must close this before we open that. This must be done before we start identity allocation. IP cache must be done after the initialization below. This must be read. You said after this happened. So we discussed some for a while. So at some point, so at this slide, I'm at sort of the first snippets that 350 about. And then I basically, I stopped. So I just scrolled down at that point. My point was made. In the last reference I found something like before, do this before, do this after was at 718. But what is perhaps interesting to note is that this top snippet is basically a sort of defer. So it talks about cleanup instead of initialization, which is also a really big thing that we have. So to summarize the problem that we were facing at this point in development. So we have a lot of dependencies, but this is just inherent to the product that we're making. Just nothing to do about that. What we can do something about and what is a lot of the source of the pain are these implicit dependencies. So we have dependencies on global variables, these very big objects or system states, which require us to use comments to tell our other developers which how our dependencies work. So our dependencies are all implicit in this state, which makes things really hard to modify. Like when I started and I created a component, it broke CI, it broke everything. I couldn't figure out why. And it turned out that I had to move it up a few hundred lines in the initialization or down in some cases to make sure that everything that I needed or implicitly dependent on was there. So it's really hard and it really destroys confidence. It's hard to shut this application down at least correctly. You can kill the application, sure, but then open files are not saved. And if you are running end-to-end tests or anything like it, then you need to make sure that all your resources are cleaned up. So the next time you start, you are not blocking other things. So this was really hard and it made it really hard to test because if I wanted to test my L2 announcer, I had to recreate all of this additional infrastructure a lot of the time, even if I had interfaces because some dependencies were still problematic or whatever. So for us, we started looking into solutions and this led us to dependency injection for a few reasons. So before I go deeper, for the ones for people that don't know, dependency injection is basically a way to instead of explicitly initializing your project, so basically having a very big main file, you define your components and you explicitly define what their dependencies are. And then you can have some component, in this case I call it a graph builder but it's basically the name of your framework that you use to actually initialize that and you hand off the job of correctly initializing your application, you hand it off to some piece of software. We know software never has problems or bugs. But in all honesty, so this is actually quite popular pattern in other languages like Java, C sharp, PHP, but we don't see it that often in Go projects. So the only thing that is required for this to work is that you always, or at least work correctly, is that you specify your dependencies explicitly, so as arguments to a constructor function. So what I would like to introduce to you is the Uber FX library, so it's made and maintained by Uber. Originally developed by Glipp, who is now actually a colleague of mine, which is why how we got into this library. It's really well battle tested and I'm going to show you how it works and what this looks like. But what's important to know is that it is an, as is the Penesy injection library. The Penesy injection libraries might not all work for your use case, it didn't for us. So we actually, if you were to look at Cilium today, we actually use our own custom flavored framework, build on dig, which is basically the underlying library under FX. But FX is if you go ahead and first try something, then FX is your starting point. And this actually solved most of, like it was made to solve a lot of the problems we had, not only for this initialization issue, but also because we have a lot of binaries in a big mono repo, so it also allows for really good reuse, which is, as far as I understand it, where Uber first started. So to explain this, I first created a very, very small application. Normally you wouldn't use dependency injection on such a small application. So we just have a simple web server. And this is, I why, for example, might have, might write this without dependency injection. So if a main, we construct everything, link everything together, call server.serve, and we're done. So this is nice and short. So when we do dependency injection, we have to be a bit more formal. So I defined a new listener, a new logger, and a new server. My listener and logger at this moment don't have any dependencies. I could give them configuration or something else, but that wouldn't fit on the slides. And the server takes both of these and constructs itself. So we defined everything, what everything needs, and then on the top left in our main, we say we create a new effects application, and we provide the listener and the logger, and we invoke the server, because if you recall, the server was, the serve function was the thing that we were interested in, that we called. In practice, what this does is the invokes are basically your entry points. So and the library will look for all dependencies of that, of that entry point. So you could, for example, create a very big graph and have multiple entry points or remove entry points depending on, call different entry points depending on, for example, commands in your, in your binary. And then it will only construct and start your dependencies that you need. So it also does a little bit of that code elimination implicitly. And then you call the run, which actually wouldn't do anything in this example. So I'm sorry, because the serve is not called. So this would start and it would construct everything, but nothing extra would actually happen. For that, FX has something called life cycles, which are really useful. So we, the last slide talked about the construct time. So when we construct our graph and then when we run it, the life cycle gets invoked. So what we can do is we give this, we say, okay, the server is now dependent on a life cycle. And within the constructor, we, we tell the life cycle, okay, I can, I have some, something while, while I'm alive, I want to do something. So I have an on stop and an on, on, on start and on stop hook. And when I start, I want to start a go routine and serve out whatever I do. And when I stop, I want to shut down, which is something that my initial program didn't even do, do a proper shutdown of the, of the HTTP server. So when, when it's, it's a little bit hard to like show that in the original example. So I threw together a very small sample that still fit on the slide, which is important here. So I have ABC and they basically all depend on each other. So it's a very deep dependency chain. And then I have this print function, which you can decipher later, but it basically, I call it in every constructor. It's both prints at that time and it prints in the life cycle hooks. So you can see what happens. And when I would were to run this program, the output would be something like this. So it says, A is constructed, B is constructed, C is constructed, because that's the order in which the, so, so we have all the dependencies there when we are, but it's just some construction. Then the start hooks are called in the exact same order as we constructed them. So if you have dependencies, for example, A opened the file and we need that file to be open because B will start calling things in this life cycle. And we know that the, that the start hook of A is always called before any of its dependencies get time to run. And then when we stop the application, we control C or something else happens, we shut down. But the nice thing is, is we automatically shut down in the exact opposite order, just like you would add the first somewhere, but it's at the application level. And this allows you to do proper shutdown, write your files away, do everything else. And you also know that you, because you depend on everything else, that you get the first chance to shut down properly and no one will call into you after that, because, in their shutdown functions, because they don't have references to you. They are not your, you depend on everything else. There's also a nice feature called groups. There are actually quite a bit of features. I couldn't touch on everything because of time constraints, but this one is nice for, for a small section of problems. And it's called a group. What you can do is, so I actually use two features. I use the effects in and effects out feature. And it basically allows you to, to return multiple dependencies from a constructor or take multiple dependencies in a nice way. So I can, for example, have a parameter structure that takes in 20 different dependencies and don't have to spell them all out separately in my arguments. And I can also return multiple things. Crucially, in my case, I can specify group names to basically route outputs from one, from an output, from, from one place to another. And in this case, I created a mox. And this mox collects all of the mox handle, mox handle objects that are there. And I have a foo and a bar and they both admit their own thing. And they are collected by, they are collected by this, by this mox which we could, could give to, to a server. And the cool thing about this is that you, you have this once. And you can then add a lot of additional, you can add a lot of additional parts to the, to your whole application. And it all collects as an array into this group. There's some caveats. I'll come to that in a bit. So under the hood, how this works, very simplified, is we have our definitions. At least effects and dig use reflection to then look at the parameters and then based on the types, it creates a directional acyclic graph. And that graph can then be walked to get the, to get that correct ordering. So there is a small bit of magic there and it's called reflection, but it's not much. Like it's quite understandable if you actually go dive into, into how something like this works. And then again, the constructors to start and stop are called in that, in that determined order by the deck. It also means that you can't have cyclical dependencies. That's, that's a no, no. So it's a good reason to remove those from your code as well. So I would like to share with you in case you want to try this, try dependency injection. Some tips, tricks and lessons we learned because there are, there's a good way to do this and there's definitely also bad ways to do this. So inject, but in moderation. So not everything has to be a component. For example, math libraries are stateless. There's no reason why you would make that a component as like a dependency in this system because you can just, you can just use them and they are pure functions, etc. So my rule of thumb is if it has states, make it, make it a dependency because then you benefit from all of the state specific things. But if you have libraries that don't use state, please don't make it harder than it has to be. And also a note of inject, but in moderation is that we saw that doing dependency injection adds a lot of boilerplate, which is worth it in very, very big applications or even moderate applications, I would say. But it's likely not for your small CLI tool or whatever. So pick, this is really a technique for medium to larger projects. When you do this, pick logical boundaries. So we, for example, we started and then made 20 cells within the same package and then no one outside the package actually ended up using those cells, which is massive amounts of complexity and overhead is just not necessary. In my experience using packages as logical boundaries for these components is the best thing to do because you can also leverage what types I export, which type, because you can export, you can provide something and not export that type, for example, and then only export an interface that matches it or whatever. So that's a really powerful combination. So and the last thing to note is that one of the other features that I wasn't able to show you because of time constraints is FX options. So FX options is really cool because it allows you to basically take multiple of these components and bundle them under a single variable. So while global variables are big no-no's when doing this, you can still use them or you can use a variable, global variable on your package to export these constructors. And the nice thing there is you can make a sort of hierarchy. So if you have a package hierarchy that's three layers deep, you can basically reflect that. So in your main application you don't have to list 200 constructors all separately. So that also really helps with readability, seeing where what is provided and so on. Provide targeted interfaces. So go idioms still apply. The smaller your interface is, the more powerful it is, the better you can swap it out. So when I provide a very small interface or when I depend on the smallest interfaces I can, and it's really easy for me to mock out in my test, create a new FX app, only provide the direct dependencies which are interfaces which I can then mock out and it makes everything really nice. So this is general advice, not for dependency injection but like it goes hand in hand. If you have dependency injection and don't do this then it takes away a lot of the benefits you would otherwise get. So it also makes it easy to rely on external, for external components to not rely on internal implementation. So when I export something or when I provide a component I always try to provide it as an interface as well. And the last thing which is more of a trick is you can actually, if you for example have a struct, that struct can implement multiple, so instead of having one interface that implements three methods I can provide it as three separate interfaces that implement three separate methods. And that way you can, you have both on the receiving and the sending side of your dependency, you have the smallest possible interface again to help with mocking out but also so if you don't use certain methods that you don't have to like write fake methods that panic if you were to call them etc. I mentioned groups and they are really powerful but go easy on them. Groups are really only ever useful if you have multiple parties that are interested in the same list of objects. So for example we have metrics, so we have a Permetheus metrics registry which collects all of the metrics to actually use them. But we also have tooling that automatically generates documentation about these metrics and I can write a very small CLI tool that basically just with one component that depends on all hooks or all metrics that we have defined in our application and I collect all of them automatically and everyone who uses who registers a new metric it automatically appears in this metrics tool. So it's really great and the same goes for our configuration HTTP elements which will also have configuration for or sometimes CLI tools which live want to interact with the same things. The alternative to using groups is to just use like a registry pattern where you say I provide a registry, it just has a registry pattern and everyone else, so if I have 20 other components I can depend on that and I can register myself during construction time. And the upside of doing that is that you can, like if you use FreeScope for example or any decent editor is that you can follow those traces back. So you can always use references to see who actually uses what. With groups it's all magic. Something everything goes into this group and it comes out but it's not clear. You can't trace that back in the code itself without having difficulties. Stay with a static graph when possible. So you can, with this FX application you can in theory like depending on configuration provide or not provide components. We have opted in Cilium to never do this because it makes it completely impossible to verify that you never have missing dependencies or other problems like circular, the references and there are certain combinations. The graphs are verified at runtime so you have to have a good CI to run everything, make sure that it works. What you can do instead is use this life cycle and so you always have the objects but then you can always choose if they do or do not subscribe to the life cycle and that way you can enable or disable certain logic if you don't want to run it at that time but always provide it. And that was it. Thank you very much. Thank you. I have time for one question. I see a hand there. I'll quickly come over and hand to the microphone. If you are exiting already do it quietly please. What can you make choose, dig and FX instead of Google OIR which is more popular for example? So like I mentioned, colleague of mine, Glyb, authored it so it was very, we were very quick to jump on that one he suggested using the library. So it's purely advertisements. Thank you. Any questions?", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.52, "text": " I'm going to talk about using Go.", "tokens": [50364, 286, 478, 516, 281, 751, 466, 1228, 1037, 13, 50840], "temperature": 0.0, "avg_logprob": -0.433514394258198, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.500499427318573}, {"id": 1, "seek": 0, "start": 9.52, "end": 13.44, "text": " What is important when you use Go is dependency management.", "tokens": [50840, 708, 307, 1021, 562, 291, 764, 1037, 307, 33621, 4592, 13, 51036], "temperature": 0.0, "avg_logprob": -0.433514394258198, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.500499427318573}, {"id": 2, "seek": 0, "start": 13.44, "end": 17.88, "text": " You cannot write a program these days without depending on something.", "tokens": [51036, 509, 2644, 2464, 257, 1461, 613, 1708, 1553, 5413, 322, 746, 13, 51258], "temperature": 0.0, "avg_logprob": -0.433514394258198, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.500499427318573}, {"id": 3, "seek": 0, "start": 17.88, "end": 18.88, "text": " Dylan is a co-worker of mine.", "tokens": [51258, 28160, 307, 257, 598, 12, 49402, 295, 3892, 13, 51308], "temperature": 0.0, "avg_logprob": -0.433514394258198, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.500499427318573}, {"id": 4, "seek": 0, "start": 18.88, "end": 19.88, "text": " We work on Cillium together.", "tokens": [51308, 492, 589, 322, 383, 373, 2197, 1214, 13, 51358], "temperature": 0.0, "avg_logprob": -0.433514394258198, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.500499427318573}, {"id": 5, "seek": 0, "start": 19.88, "end": 23.12, "text": " He's going to talk about anything to do with dependency management.", "tokens": [51358, 634, 311, 516, 281, 751, 466, 1340, 281, 360, 365, 33621, 4592, 13, 51520], "temperature": 0.0, "avg_logprob": -0.433514394258198, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.500499427318573}, {"id": 6, "seek": 2312, "start": 23.12, "end": 28.12, "text": " So run of applause.", "tokens": [50364, 407, 1190, 295, 9969, 13, 50614], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 7, "seek": 2312, "start": 28.12, "end": 31.12, "text": " Hey everyone.", "tokens": [50614, 1911, 1518, 13, 50764], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 8, "seek": 2312, "start": 31.12, "end": 33.120000000000005, "text": " Thanks for coming.", "tokens": [50764, 2561, 337, 1348, 13, 50864], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 9, "seek": 2312, "start": 33.120000000000005, "end": 35.52, "text": " So dependency injection.", "tokens": [50864, 407, 33621, 22873, 13, 50984], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 10, "seek": 2312, "start": 35.52, "end": 38.28, "text": " Before we start, a little introduction.", "tokens": [50984, 4546, 321, 722, 11, 257, 707, 9339, 13, 51122], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 11, "seek": 2312, "start": 38.28, "end": 39.96, "text": " Already got one technically.", "tokens": [51122, 23741, 658, 472, 12120, 13, 51206], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 12, "seek": 2312, "start": 39.96, "end": 40.96, "text": " My name is Dylan Reimering.", "tokens": [51206, 1222, 1315, 307, 28160, 1300, 9713, 278, 13, 51256], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 13, "seek": 2312, "start": 40.96, "end": 44.8, "text": " I work at Isovalent on the foundations and the loader team.", "tokens": [51256, 286, 589, 412, 286, 539, 3337, 317, 322, 264, 22467, 293, 264, 3677, 260, 1469, 13, 51448], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 14, "seek": 2312, "start": 44.8, "end": 49.040000000000006, "text": " So we're responsible for basically doing dependent or a lot of changes that I'm going", "tokens": [51448, 407, 321, 434, 6250, 337, 1936, 884, 12334, 420, 257, 688, 295, 2962, 300, 286, 478, 516, 51660], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 15, "seek": 2312, "start": 49.040000000000006, "end": 52.84, "text": " to talk about within the Cillium project.", "tokens": [51660, 281, 751, 466, 1951, 264, 383, 373, 2197, 1716, 13, 51850], "temperature": 0.0, "avg_logprob": -0.35362864475624234, "compression_ratio": 1.5020746887966805, "no_speech_prob": 0.12836995720863342}, {"id": 16, "seek": 5284, "start": 52.84, "end": 53.84, "text": " You can find my get up there.", "tokens": [50364, 509, 393, 915, 452, 483, 493, 456, 13, 50414], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 17, "seek": 5284, "start": 53.84, "end": 56.56, "text": " In case you find anything interesting.", "tokens": [50414, 682, 1389, 291, 915, 1340, 1880, 13, 50550], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 18, "seek": 5284, "start": 56.56, "end": 57.56, "text": " I don't know.", "tokens": [50550, 286, 500, 380, 458, 13, 50600], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 19, "seek": 5284, "start": 57.56, "end": 58.56, "text": " You never see.", "tokens": [50600, 509, 1128, 536, 13, 50650], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 20, "seek": 5284, "start": 58.56, "end": 59.56, "text": " You never know.", "tokens": [50650, 509, 1128, 458, 13, 50700], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 21, "seek": 5284, "start": 59.56, "end": 65.2, "text": " So before we dive into the dependency injection, why, how it works, what it is for those who", "tokens": [50700, 407, 949, 321, 9192, 666, 264, 33621, 22873, 11, 983, 11, 577, 309, 1985, 11, 437, 309, 307, 337, 729, 567, 50982], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 22, "seek": 5284, "start": 65.2, "end": 72.80000000000001, "text": " don't know, a little journey about why I'm here, why I'm talking about this and how I", "tokens": [50982, 500, 380, 458, 11, 257, 707, 4671, 466, 983, 286, 478, 510, 11, 983, 286, 478, 1417, 466, 341, 293, 577, 286, 51362], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 23, "seek": 5284, "start": 72.80000000000001, "end": 74.08000000000001, "text": " got here.", "tokens": [51362, 658, 510, 13, 51426], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 24, "seek": 5284, "start": 74.08000000000001, "end": 77.80000000000001, "text": " So what is Cillium?", "tokens": [51426, 407, 437, 307, 383, 373, 2197, 30, 51612], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 25, "seek": 5284, "start": 77.80000000000001, "end": 80.12, "text": " Cillium is a CNI.", "tokens": [51612, 383, 373, 2197, 307, 257, 14589, 40, 13, 51728], "temperature": 0.0, "avg_logprob": -0.25206674111856, "compression_ratio": 1.6037735849056605, "no_speech_prob": 0.022411296144127846}, {"id": 26, "seek": 8012, "start": 80.12, "end": 83.72, "text": " So it's long, long talk short.", "tokens": [50364, 407, 309, 311, 938, 11, 938, 751, 2099, 13, 50544], "temperature": 0.0, "avg_logprob": -0.1841427878047643, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0700221136212349}, {"id": 27, "seek": 8012, "start": 83.72, "end": 86.48, "text": " We use EBPF to do networking in EBPF.", "tokens": [50544, 492, 764, 50148, 47, 37, 281, 360, 17985, 294, 50148, 47, 37, 13, 50682], "temperature": 0.0, "avg_logprob": -0.1841427878047643, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0700221136212349}, {"id": 28, "seek": 8012, "start": 86.48, "end": 91.2, "text": " We secure it and we make sure that you can see what's going on.", "tokens": [50682, 492, 7144, 309, 293, 321, 652, 988, 300, 291, 393, 536, 437, 311, 516, 322, 13, 50918], "temperature": 0.0, "avg_logprob": -0.1841427878047643, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0700221136212349}, {"id": 29, "seek": 8012, "start": 91.2, "end": 94.76, "text": " And that actually involves a lot of components.", "tokens": [50918, 400, 300, 767, 11626, 257, 688, 295, 6677, 13, 51096], "temperature": 0.0, "avg_logprob": -0.1841427878047643, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0700221136212349}, {"id": 30, "seek": 8012, "start": 94.76, "end": 100.92, "text": " So this is our nice visual about a lot of the different features and we actually have way", "tokens": [51096, 407, 341, 307, 527, 1481, 5056, 466, 257, 688, 295, 264, 819, 4122, 293, 321, 767, 362, 636, 51404], "temperature": 0.0, "avg_logprob": -0.1841427878047643, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0700221136212349}, {"id": 31, "seek": 8012, "start": 100.92, "end": 104.08000000000001, "text": " more that wouldn't even fit on the slide.", "tokens": [51404, 544, 300, 2759, 380, 754, 3318, 322, 264, 4137, 13, 51562], "temperature": 0.0, "avg_logprob": -0.1841427878047643, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.0700221136212349}, {"id": 32, "seek": 10408, "start": 104.08, "end": 111.03999999999999, "text": " You can imagine that with a lot of components that we get quite a large application.", "tokens": [50364, 509, 393, 3811, 300, 365, 257, 688, 295, 6677, 300, 321, 483, 1596, 257, 2416, 3861, 13, 50712], "temperature": 0.0, "avg_logprob": -0.175753742069393, "compression_ratio": 1.472636815920398, "no_speech_prob": 0.031087340787053108}, {"id": 33, "seek": 10408, "start": 111.03999999999999, "end": 117.03999999999999, "text": " I checked and we are currently the third most active project on the CNCF.", "tokens": [50712, 286, 10033, 293, 321, 366, 4362, 264, 2636, 881, 4967, 1716, 322, 264, 48714, 37, 13, 51012], "temperature": 0.0, "avg_logprob": -0.175753742069393, "compression_ratio": 1.472636815920398, "no_speech_prob": 0.031087340787053108}, {"id": 34, "seek": 10408, "start": 117.03999999999999, "end": 121.84, "text": " We have, I think, so again last time I checked this is like a month ago.", "tokens": [51012, 492, 362, 11, 286, 519, 11, 370, 797, 1036, 565, 286, 10033, 341, 307, 411, 257, 1618, 2057, 13, 51252], "temperature": 0.0, "avg_logprob": -0.175753742069393, "compression_ratio": 1.472636815920398, "no_speech_prob": 0.031087340787053108}, {"id": 35, "seek": 10408, "start": 121.84, "end": 129.32, "text": " We have 650,000 lines of code that are not the vendor directory.", "tokens": [51252, 492, 362, 38566, 11, 1360, 3876, 295, 3089, 300, 366, 406, 264, 24321, 21120, 13, 51626], "temperature": 0.0, "avg_logprob": -0.175753742069393, "compression_ratio": 1.472636815920398, "no_speech_prob": 0.031087340787053108}, {"id": 36, "seek": 12932, "start": 129.32, "end": 134.68, "text": " So we have a big code base, a lot of things that happen, which also means that we have", "tokens": [50364, 407, 321, 362, 257, 955, 3089, 3096, 11, 257, 688, 295, 721, 300, 1051, 11, 597, 611, 1355, 300, 321, 362, 50632], "temperature": 0.0, "avg_logprob": -0.1348636928357576, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.04654889553785324}, {"id": 37, "seek": 12932, "start": 134.68, "end": 138.07999999999998, "text": " a lot of dependencies.", "tokens": [50632, 257, 688, 295, 36606, 13, 50802], "temperature": 0.0, "avg_logprob": -0.1348636928357576, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.04654889553785324}, {"id": 38, "seek": 12932, "start": 138.07999999999998, "end": 144.12, "text": " So to illustrate that, I picked one of the features that I personally worked a lot on,", "tokens": [50802, 407, 281, 23221, 300, 11, 286, 6183, 472, 295, 264, 4122, 300, 286, 5665, 2732, 257, 688, 322, 11, 51104], "temperature": 0.0, "avg_logprob": -0.1348636928357576, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.04654889553785324}, {"id": 39, "seek": 12932, "start": 144.12, "end": 146.48, "text": " which is called the Alto announcer.", "tokens": [51104, 597, 307, 1219, 264, 50066, 49574, 13, 51222], "temperature": 0.0, "avg_logprob": -0.1348636928357576, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.04654889553785324}, {"id": 40, "seek": 12932, "start": 146.48, "end": 151.56, "text": " And it's a little feature in Cillium that basically makes sure that certain IP addresses", "tokens": [51222, 400, 309, 311, 257, 707, 4111, 294, 383, 373, 2197, 300, 1936, 1669, 988, 300, 1629, 8671, 16862, 51476], "temperature": 0.0, "avg_logprob": -0.1348636928357576, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.04654889553785324}, {"id": 41, "seek": 12932, "start": 151.56, "end": 156.0, "text": " are reachable in the local network via ARP.", "tokens": [51476, 366, 2524, 712, 294, 264, 2654, 3209, 5766, 8943, 47, 13, 51698], "temperature": 0.0, "avg_logprob": -0.1348636928357576, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.04654889553785324}, {"id": 42, "seek": 15600, "start": 156.0, "end": 160.12, "text": " So both gratuitous ARP and responding.", "tokens": [50364, 407, 1293, 38342, 563, 8943, 47, 293, 16670, 13, 50570], "temperature": 0.0, "avg_logprob": -0.24364673557566174, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.016746077686548233}, {"id": 43, "seek": 15600, "start": 160.12, "end": 167.84, "text": " So we have like the big Alto announcer block there, which contains most of the business", "tokens": [50570, 407, 321, 362, 411, 264, 955, 50066, 49574, 3461, 456, 11, 597, 8306, 881, 295, 264, 1606, 50956], "temperature": 0.0, "avg_logprob": -0.24364673557566174, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.016746077686548233}, {"id": 44, "seek": 15600, "start": 167.84, "end": 172.56, "text": " logic, but all of the other things are dependencies.", "tokens": [50956, 9952, 11, 457, 439, 295, 264, 661, 721, 366, 36606, 13, 51192], "temperature": 0.0, "avg_logprob": -0.24364673557566174, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.016746077686548233}, {"id": 45, "seek": 15600, "start": 172.56, "end": 179.4, "text": " So all the way to top, we have, in the white still, are our external dependencies.", "tokens": [51192, 407, 439, 264, 636, 281, 1192, 11, 321, 362, 11, 294, 264, 2418, 920, 11, 366, 527, 8320, 36606, 13, 51534], "temperature": 0.0, "avg_logprob": -0.24364673557566174, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.016746077686548233}, {"id": 46, "seek": 17940, "start": 179.4, "end": 184.0, "text": " So we have to create ports.", "tokens": [50364, 407, 321, 362, 281, 1884, 18160, 13, 50594], "temperature": 0.0, "avg_logprob": -0.20576467608461285, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.011467227712273598}, {"id": 47, "seek": 17940, "start": 184.0, "end": 190.04000000000002, "text": " We set up, we get environments, configuration, standard outputs, et cetera.", "tokens": [50594, 492, 992, 493, 11, 321, 483, 12388, 11, 11694, 11, 3832, 23930, 11, 1030, 11458, 13, 50896], "temperature": 0.0, "avg_logprob": -0.20576467608461285, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.011467227712273598}, {"id": 48, "seek": 17940, "start": 190.04000000000002, "end": 193.08, "text": " Those are connected to our infrastructure layer.", "tokens": [50896, 3950, 366, 4582, 281, 527, 6896, 4583, 13, 51048], "temperature": 0.0, "avg_logprob": -0.20576467608461285, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.011467227712273598}, {"id": 49, "seek": 17940, "start": 193.08, "end": 198.08, "text": " So our infrastructure layer does all of the things that are really common in the application,", "tokens": [51048, 407, 527, 6896, 4583, 775, 439, 295, 264, 721, 300, 366, 534, 2689, 294, 264, 3861, 11, 51298], "temperature": 0.0, "avg_logprob": -0.20576467608461285, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.011467227712273598}, {"id": 50, "seek": 17940, "start": 198.08, "end": 201.36, "text": " logging, metrics, configuration, da, da, da, da.", "tokens": [51298, 27991, 11, 16367, 11, 11694, 11, 1120, 11, 1120, 11, 1120, 11, 1120, 13, 51462], "temperature": 0.0, "avg_logprob": -0.20576467608461285, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.011467227712273598}, {"id": 51, "seek": 17940, "start": 201.36, "end": 205.52, "text": " And then we get to the orange layer, which is our control plane.", "tokens": [51462, 400, 550, 321, 483, 281, 264, 7671, 4583, 11, 597, 307, 527, 1969, 5720, 13, 51670], "temperature": 0.0, "avg_logprob": -0.20576467608461285, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.011467227712273598}, {"id": 52, "seek": 17940, "start": 205.52, "end": 207.96, "text": " And there are abstract business logic happens.", "tokens": [51670, 400, 456, 366, 12649, 1606, 9952, 2314, 13, 51792], "temperature": 0.0, "avg_logprob": -0.20576467608461285, "compression_ratio": 1.7467811158798283, "no_speech_prob": 0.011467227712273598}, {"id": 53, "seek": 20796, "start": 207.96, "end": 212.48000000000002, "text": " So this business logic gets go objects, and it also writes go objects.", "tokens": [50364, 407, 341, 1606, 9952, 2170, 352, 6565, 11, 293, 309, 611, 13657, 352, 6565, 13, 50590], "temperature": 0.0, "avg_logprob": -0.20914114438570464, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00955277867615223}, {"id": 54, "seek": 20796, "start": 212.48000000000002, "end": 217.12, "text": " It's all pure go world, and it doesn't have to care mostly about all the things.", "tokens": [50590, 467, 311, 439, 6075, 352, 1002, 11, 293, 309, 1177, 380, 362, 281, 1127, 5240, 466, 439, 264, 721, 13, 50822], "temperature": 0.0, "avg_logprob": -0.20914114438570464, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00955277867615223}, {"id": 55, "seek": 20796, "start": 217.12, "end": 221.96, "text": " And then we go down to our data path, where the translations happens from this perfect", "tokens": [50822, 400, 550, 321, 352, 760, 281, 527, 1412, 3100, 11, 689, 264, 37578, 2314, 490, 341, 2176, 51064], "temperature": 0.0, "avg_logprob": -0.20914114438570464, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00955277867615223}, {"id": 56, "seek": 20796, "start": 221.96, "end": 229.72, "text": " abstract world into the real world, which in turn often means, for our case, that we", "tokens": [51064, 12649, 1002, 666, 264, 957, 1002, 11, 597, 294, 1261, 2049, 1355, 11, 337, 527, 1389, 11, 300, 321, 51452], "temperature": 0.0, "avg_logprob": -0.20914114438570464, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00955277867615223}, {"id": 57, "seek": 20796, "start": 229.72, "end": 236.16, "text": " talk to the kernel via net link, ebpf, maps, raw sockets, et cetera.", "tokens": [51452, 751, 281, 264, 28256, 5766, 2533, 2113, 11, 308, 65, 25302, 11, 11317, 11, 8936, 370, 11984, 11, 1030, 11458, 13, 51774], "temperature": 0.0, "avg_logprob": -0.20914114438570464, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.00955277867615223}, {"id": 58, "seek": 23616, "start": 236.16, "end": 242.44, "text": " So we have to, but for this one, for my big component to be able to work, I basically", "tokens": [50364, 407, 321, 362, 281, 11, 457, 337, 341, 472, 11, 337, 452, 955, 6542, 281, 312, 1075, 281, 589, 11, 286, 1936, 50678], "temperature": 0.0, "avg_logprob": -0.19208833360180413, "compression_ratio": 1.5330396475770924, "no_speech_prob": 0.006292649544775486}, {"id": 59, "seek": 23616, "start": 242.44, "end": 248.16, "text": " need all of this to exist, at least in production.", "tokens": [50678, 643, 439, 295, 341, 281, 2514, 11, 412, 1935, 294, 4265, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19208833360180413, "compression_ratio": 1.5330396475770924, "no_speech_prob": 0.006292649544775486}, {"id": 60, "seek": 23616, "start": 248.16, "end": 255.07999999999998, "text": " So I went back to 111, which is before we started working on dependency injection in", "tokens": [50964, 407, 286, 1437, 646, 281, 2975, 16, 11, 597, 307, 949, 321, 1409, 1364, 322, 33621, 22873, 294, 51310], "temperature": 0.0, "avg_logprob": -0.19208833360180413, "compression_ratio": 1.5330396475770924, "no_speech_prob": 0.006292649544775486}, {"id": 61, "seek": 23616, "start": 255.07999999999998, "end": 262.2, "text": " Cilium, and looked at what does initialization look like at that point.", "tokens": [51310, 383, 388, 2197, 11, 293, 2956, 412, 437, 775, 5883, 2144, 574, 411, 412, 300, 935, 13, 51666], "temperature": 0.0, "avg_logprob": -0.19208833360180413, "compression_ratio": 1.5330396475770924, "no_speech_prob": 0.006292649544775486}, {"id": 62, "seek": 23616, "start": 262.2, "end": 263.8, "text": " So we have our main program.", "tokens": [51666, 407, 321, 362, 527, 2135, 1461, 13, 51746], "temperature": 0.0, "avg_logprob": -0.19208833360180413, "compression_ratio": 1.5330396475770924, "no_speech_prob": 0.006292649544775486}, {"id": 63, "seek": 23616, "start": 263.8, "end": 265.04, "text": " We could call into Cobra.", "tokens": [51746, 492, 727, 818, 666, 383, 24393, 13, 51808], "temperature": 0.0, "avg_logprob": -0.19208833360180413, "compression_ratio": 1.5330396475770924, "no_speech_prob": 0.006292649544775486}, {"id": 64, "seek": 26504, "start": 265.04, "end": 267.08000000000004, "text": " This is common, hopefully.", "tokens": [50364, 639, 307, 2689, 11, 4696, 13, 50466], "temperature": 0.0, "avg_logprob": -0.17099321365356446, "compression_ratio": 1.7008547008547008, "no_speech_prob": 0.03461706265807152}, {"id": 65, "seek": 26504, "start": 267.08000000000004, "end": 269.64000000000004, "text": " We go into our run function.", "tokens": [50466, 492, 352, 666, 527, 1190, 2445, 13, 50594], "temperature": 0.0, "avg_logprob": -0.17099321365356446, "compression_ratio": 1.7008547008547008, "no_speech_prob": 0.03461706265807152}, {"id": 66, "seek": 26504, "start": 269.64000000000004, "end": 272.84000000000003, "text": " It starts up three components.", "tokens": [50594, 467, 3719, 493, 1045, 6677, 13, 50754], "temperature": 0.0, "avg_logprob": -0.17099321365356446, "compression_ratio": 1.7008547008547008, "no_speech_prob": 0.03461706265807152}, {"id": 67, "seek": 26504, "start": 272.84000000000003, "end": 277.24, "text": " It initializes the environment, where we already have 50 components.", "tokens": [50754, 467, 5883, 5660, 264, 2823, 11, 689, 321, 1217, 362, 2625, 6677, 13, 50974], "temperature": 0.0, "avg_logprob": -0.17099321365356446, "compression_ratio": 1.7008547008547008, "no_speech_prob": 0.03461706265807152}, {"id": 68, "seek": 26504, "start": 277.24, "end": 282.12, "text": " Then we call something called run daemon, which has 50 components spread both before", "tokens": [50974, 1396, 321, 818, 746, 1219, 1190, 1120, 36228, 11, 597, 575, 2625, 6677, 3974, 1293, 949, 51218], "temperature": 0.0, "avg_logprob": -0.17099321365356446, "compression_ratio": 1.7008547008547008, "no_speech_prob": 0.03461706265807152}, {"id": 69, "seek": 26504, "start": 282.12, "end": 283.68, "text": " and after the new daemon.", "tokens": [51218, 293, 934, 264, 777, 1120, 36228, 13, 51296], "temperature": 0.0, "avg_logprob": -0.17099321365356446, "compression_ratio": 1.7008547008547008, "no_speech_prob": 0.03461706265807152}, {"id": 70, "seek": 26504, "start": 283.68, "end": 290.6, "text": " And then in our new daemon constructor, we actually create at least 150 components.", "tokens": [51296, 400, 550, 294, 527, 777, 1120, 36228, 47479, 11, 321, 767, 1884, 412, 1935, 8451, 6677, 13, 51642], "temperature": 0.0, "avg_logprob": -0.17099321365356446, "compression_ratio": 1.7008547008547008, "no_speech_prob": 0.03461706265807152}, {"id": 71, "seek": 26504, "start": 290.6, "end": 294.52000000000004, "text": " I started counting, or stopped counting, sorry.", "tokens": [51642, 286, 1409, 13251, 11, 420, 5936, 13251, 11, 2597, 13, 51838], "temperature": 0.0, "avg_logprob": -0.17099321365356446, "compression_ratio": 1.7008547008547008, "no_speech_prob": 0.03461706265807152}, {"id": 72, "seek": 29452, "start": 294.52, "end": 302.28, "text": " So we have a lot of components, but they all have to somehow wire into each other.", "tokens": [50364, 407, 321, 362, 257, 688, 295, 6677, 11, 457, 436, 439, 362, 281, 6063, 6234, 666, 1184, 661, 13, 50752], "temperature": 0.0, "avg_logprob": -0.1667107476128472, "compression_ratio": 1.736, "no_speech_prob": 0.024542147293686867}, {"id": 73, "seek": 29452, "start": 302.28, "end": 309.64, "text": " And at some point, the development team decided is that we are going for sort of hub-nispoke", "tokens": [50752, 400, 412, 512, 935, 11, 264, 3250, 1469, 3047, 307, 300, 321, 366, 516, 337, 1333, 295, 11838, 12, 77, 7631, 2949, 51120], "temperature": 0.0, "avg_logprob": -0.1667107476128472, "compression_ratio": 1.736, "no_speech_prob": 0.024542147293686867}, {"id": 74, "seek": 29452, "start": 309.64, "end": 312.12, "text": " model because we had so many components.", "tokens": [51120, 2316, 570, 321, 632, 370, 867, 6677, 13, 51244], "temperature": 0.0, "avg_logprob": -0.1667107476128472, "compression_ratio": 1.736, "no_speech_prob": 0.024542147293686867}, {"id": 75, "seek": 29452, "start": 312.12, "end": 318.12, "text": " We had this big daemon, which was our hub, and it had pointers to almost all components.", "tokens": [51244, 492, 632, 341, 955, 1120, 36228, 11, 597, 390, 527, 11838, 11, 293, 309, 632, 44548, 281, 1920, 439, 6677, 13, 51544], "temperature": 0.0, "avg_logprob": -0.1667107476128472, "compression_ratio": 1.736, "no_speech_prob": 0.024542147293686867}, {"id": 76, "seek": 29452, "start": 318.12, "end": 319.12, "text": " And then it's easy.", "tokens": [51544, 400, 550, 309, 311, 1858, 13, 51594], "temperature": 0.0, "avg_logprob": -0.1667107476128472, "compression_ratio": 1.736, "no_speech_prob": 0.024542147293686867}, {"id": 77, "seek": 29452, "start": 319.12, "end": 322.79999999999995, "text": " You only have to give the daemon to everything, and then via the daemon, you can find every", "tokens": [51594, 509, 787, 362, 281, 976, 264, 1120, 36228, 281, 1203, 11, 293, 550, 5766, 264, 1120, 36228, 11, 291, 393, 915, 633, 51778], "temperature": 0.0, "avg_logprob": -0.1667107476128472, "compression_ratio": 1.736, "no_speech_prob": 0.024542147293686867}, {"id": 78, "seek": 29452, "start": 322.79999999999995, "end": 324.2, "text": " other component.", "tokens": [51778, 661, 6542, 13, 51848], "temperature": 0.0, "avg_logprob": -0.1667107476128472, "compression_ratio": 1.736, "no_speech_prob": 0.024542147293686867}, {"id": 79, "seek": 32420, "start": 324.2, "end": 330.03999999999996, "text": " So it was, but that becomes a real mess because when is this pointer nil, when is it not,", "tokens": [50364, 407, 309, 390, 11, 457, 300, 3643, 257, 957, 2082, 570, 562, 307, 341, 23918, 297, 388, 11, 562, 307, 309, 406, 11, 50656], "temperature": 0.0, "avg_logprob": -0.22806632852999964, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.008159399032592773}, {"id": 80, "seek": 32420, "start": 330.03999999999996, "end": 331.36, "text": " et cetera.", "tokens": [50656, 1030, 11458, 13, 50722], "temperature": 0.0, "avg_logprob": -0.22806632852999964, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.008159399032592773}, {"id": 81, "seek": 32420, "start": 331.36, "end": 336.92, "text": " So I started looking into this new daemon function, like what is this about.", "tokens": [50722, 407, 286, 1409, 1237, 666, 341, 777, 1120, 36228, 2445, 11, 411, 437, 307, 341, 466, 13, 51000], "temperature": 0.0, "avg_logprob": -0.22806632852999964, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.008159399032592773}, {"id": 82, "seek": 32420, "start": 336.92, "end": 338.84, "text": " And then you'll see a pattern.", "tokens": [51000, 400, 550, 291, 603, 536, 257, 5102, 13, 51096], "temperature": 0.0, "avg_logprob": -0.22806632852999964, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.008159399032592773}, {"id": 83, "seek": 32420, "start": 338.84, "end": 340.44, "text": " You don't have to read everything.", "tokens": [51096, 509, 500, 380, 362, 281, 1401, 1203, 13, 51176], "temperature": 0.0, "avg_logprob": -0.22806632852999964, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.008159399032592773}, {"id": 84, "seek": 32420, "start": 340.44, "end": 343.52, "text": " So we initialize this before we're creating this.", "tokens": [51176, 407, 321, 5883, 1125, 341, 949, 321, 434, 4084, 341, 13, 51330], "temperature": 0.0, "avg_logprob": -0.22806632852999964, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.008159399032592773}, {"id": 85, "seek": 32420, "start": 343.52, "end": 346.96, "text": " We must close this before we open that.", "tokens": [51330, 492, 1633, 1998, 341, 949, 321, 1269, 300, 13, 51502], "temperature": 0.0, "avg_logprob": -0.22806632852999964, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.008159399032592773}, {"id": 86, "seek": 32420, "start": 346.96, "end": 349.96, "text": " This must be done before we start identity allocation.", "tokens": [51502, 639, 1633, 312, 1096, 949, 321, 722, 6575, 27599, 13, 51652], "temperature": 0.0, "avg_logprob": -0.22806632852999964, "compression_ratio": 1.6302521008403361, "no_speech_prob": 0.008159399032592773}, {"id": 87, "seek": 34996, "start": 349.96, "end": 354.59999999999997, "text": " IP cache must be done after the initialization below.", "tokens": [50364, 8671, 19459, 1633, 312, 1096, 934, 264, 5883, 2144, 2507, 13, 50596], "temperature": 0.0, "avg_logprob": -0.2675160144237762, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.05591442808508873}, {"id": 88, "seek": 34996, "start": 354.59999999999997, "end": 355.59999999999997, "text": " This must be read.", "tokens": [50596, 639, 1633, 312, 1401, 13, 50646], "temperature": 0.0, "avg_logprob": -0.2675160144237762, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.05591442808508873}, {"id": 89, "seek": 34996, "start": 355.59999999999997, "end": 356.59999999999997, "text": " You said after this happened.", "tokens": [50646, 509, 848, 934, 341, 2011, 13, 50696], "temperature": 0.0, "avg_logprob": -0.2675160144237762, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.05591442808508873}, {"id": 90, "seek": 34996, "start": 356.59999999999997, "end": 359.88, "text": " So we discussed some for a while.", "tokens": [50696, 407, 321, 7152, 512, 337, 257, 1339, 13, 50860], "temperature": 0.0, "avg_logprob": -0.2675160144237762, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.05591442808508873}, {"id": 91, "seek": 34996, "start": 359.88, "end": 368.76, "text": " So at some point, so at this slide, I'm at sort of the first snippets that 350 about.", "tokens": [50860, 407, 412, 512, 935, 11, 370, 412, 341, 4137, 11, 286, 478, 412, 1333, 295, 264, 700, 35623, 1385, 300, 18065, 466, 13, 51304], "temperature": 0.0, "avg_logprob": -0.2675160144237762, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.05591442808508873}, {"id": 92, "seek": 34996, "start": 368.76, "end": 370.47999999999996, "text": " And then I basically, I stopped.", "tokens": [51304, 400, 550, 286, 1936, 11, 286, 5936, 13, 51390], "temperature": 0.0, "avg_logprob": -0.2675160144237762, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.05591442808508873}, {"id": 93, "seek": 34996, "start": 370.47999999999996, "end": 373.12, "text": " So I just scrolled down at that point.", "tokens": [51390, 407, 286, 445, 11369, 292, 760, 412, 300, 935, 13, 51522], "temperature": 0.0, "avg_logprob": -0.2675160144237762, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.05591442808508873}, {"id": 94, "seek": 34996, "start": 373.12, "end": 375.4, "text": " My point was made.", "tokens": [51522, 1222, 935, 390, 1027, 13, 51636], "temperature": 0.0, "avg_logprob": -0.2675160144237762, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.05591442808508873}, {"id": 95, "seek": 37540, "start": 375.4, "end": 380.44, "text": " In the last reference I found something like before, do this before, do this after was", "tokens": [50364, 682, 264, 1036, 6408, 286, 1352, 746, 411, 949, 11, 360, 341, 949, 11, 360, 341, 934, 390, 50616], "temperature": 0.0, "avg_logprob": -0.17798981459244437, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.021886983886361122}, {"id": 96, "seek": 37540, "start": 380.44, "end": 382.94, "text": " at 718.", "tokens": [50616, 412, 1614, 6494, 13, 50741], "temperature": 0.0, "avg_logprob": -0.17798981459244437, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.021886983886361122}, {"id": 97, "seek": 37540, "start": 382.94, "end": 389.23999999999995, "text": " But what is perhaps interesting to note is that this top snippet is basically a sort", "tokens": [50741, 583, 437, 307, 4317, 1880, 281, 3637, 307, 300, 341, 1192, 35623, 302, 307, 1936, 257, 1333, 51056], "temperature": 0.0, "avg_logprob": -0.17798981459244437, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.021886983886361122}, {"id": 98, "seek": 37540, "start": 389.23999999999995, "end": 390.23999999999995, "text": " of defer.", "tokens": [51056, 295, 25704, 13, 51106], "temperature": 0.0, "avg_logprob": -0.17798981459244437, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.021886983886361122}, {"id": 99, "seek": 37540, "start": 390.23999999999995, "end": 396.32, "text": " So it talks about cleanup instead of initialization, which is also a really big thing that we have.", "tokens": [51106, 407, 309, 6686, 466, 40991, 2602, 295, 5883, 2144, 11, 597, 307, 611, 257, 534, 955, 551, 300, 321, 362, 13, 51410], "temperature": 0.0, "avg_logprob": -0.17798981459244437, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.021886983886361122}, {"id": 100, "seek": 37540, "start": 396.32, "end": 402.52, "text": " So to summarize the problem that we were facing at this point in development.", "tokens": [51410, 407, 281, 20858, 264, 1154, 300, 321, 645, 7170, 412, 341, 935, 294, 3250, 13, 51720], "temperature": 0.0, "avg_logprob": -0.17798981459244437, "compression_ratio": 1.6096491228070176, "no_speech_prob": 0.021886983886361122}, {"id": 101, "seek": 40252, "start": 402.52, "end": 407.79999999999995, "text": " So we have a lot of dependencies, but this is just inherent to the product that we're", "tokens": [50364, 407, 321, 362, 257, 688, 295, 36606, 11, 457, 341, 307, 445, 26387, 281, 264, 1674, 300, 321, 434, 50628], "temperature": 0.0, "avg_logprob": -0.17368363745418597, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.030067287385463715}, {"id": 102, "seek": 40252, "start": 407.79999999999995, "end": 409.0, "text": " making.", "tokens": [50628, 1455, 13, 50688], "temperature": 0.0, "avg_logprob": -0.17368363745418597, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.030067287385463715}, {"id": 103, "seek": 40252, "start": 409.0, "end": 410.91999999999996, "text": " Just nothing to do about that.", "tokens": [50688, 1449, 1825, 281, 360, 466, 300, 13, 50784], "temperature": 0.0, "avg_logprob": -0.17368363745418597, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.030067287385463715}, {"id": 104, "seek": 40252, "start": 410.91999999999996, "end": 417.64, "text": " What we can do something about and what is a lot of the source of the pain are these", "tokens": [50784, 708, 321, 393, 360, 746, 466, 293, 437, 307, 257, 688, 295, 264, 4009, 295, 264, 1822, 366, 613, 51120], "temperature": 0.0, "avg_logprob": -0.17368363745418597, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.030067287385463715}, {"id": 105, "seek": 40252, "start": 417.64, "end": 418.96, "text": " implicit dependencies.", "tokens": [51120, 26947, 36606, 13, 51186], "temperature": 0.0, "avg_logprob": -0.17368363745418597, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.030067287385463715}, {"id": 106, "seek": 40252, "start": 418.96, "end": 428.15999999999997, "text": " So we have dependencies on global variables, these very big objects or system states, which", "tokens": [51186, 407, 321, 362, 36606, 322, 4338, 9102, 11, 613, 588, 955, 6565, 420, 1185, 4368, 11, 597, 51646], "temperature": 0.0, "avg_logprob": -0.17368363745418597, "compression_ratio": 1.6701030927835052, "no_speech_prob": 0.030067287385463715}, {"id": 107, "seek": 42816, "start": 428.16, "end": 434.76000000000005, "text": " require us to use comments to tell our other developers which how our dependencies work.", "tokens": [50364, 3651, 505, 281, 764, 3053, 281, 980, 527, 661, 8849, 597, 577, 527, 36606, 589, 13, 50694], "temperature": 0.0, "avg_logprob": -0.15787038803100586, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.4213402271270752}, {"id": 108, "seek": 42816, "start": 434.76000000000005, "end": 441.16, "text": " So our dependencies are all implicit in this state, which makes things really hard to modify.", "tokens": [50694, 407, 527, 36606, 366, 439, 26947, 294, 341, 1785, 11, 597, 1669, 721, 534, 1152, 281, 16927, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15787038803100586, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.4213402271270752}, {"id": 109, "seek": 42816, "start": 441.16, "end": 448.04, "text": " Like when I started and I created a component, it broke CI, it broke everything.", "tokens": [51014, 1743, 562, 286, 1409, 293, 286, 2942, 257, 6542, 11, 309, 6902, 37777, 11, 309, 6902, 1203, 13, 51358], "temperature": 0.0, "avg_logprob": -0.15787038803100586, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.4213402271270752}, {"id": 110, "seek": 42816, "start": 448.04, "end": 449.56, "text": " I couldn't figure out why.", "tokens": [51358, 286, 2809, 380, 2573, 484, 983, 13, 51434], "temperature": 0.0, "avg_logprob": -0.15787038803100586, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.4213402271270752}, {"id": 111, "seek": 42816, "start": 449.56, "end": 454.56, "text": " And it turned out that I had to move it up a few hundred lines in the initialization", "tokens": [51434, 400, 309, 3574, 484, 300, 286, 632, 281, 1286, 309, 493, 257, 1326, 3262, 3876, 294, 264, 5883, 2144, 51684], "temperature": 0.0, "avg_logprob": -0.15787038803100586, "compression_ratio": 1.6163793103448276, "no_speech_prob": 0.4213402271270752}, {"id": 112, "seek": 45456, "start": 454.56, "end": 461.72, "text": " or down in some cases to make sure that everything that I needed or implicitly dependent on", "tokens": [50364, 420, 760, 294, 512, 3331, 281, 652, 988, 300, 1203, 300, 286, 2978, 420, 26947, 356, 12334, 322, 50722], "temperature": 0.0, "avg_logprob": -0.18690438540476673, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.09680162370204926}, {"id": 113, "seek": 45456, "start": 461.72, "end": 462.72, "text": " was there.", "tokens": [50722, 390, 456, 13, 50772], "temperature": 0.0, "avg_logprob": -0.18690438540476673, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.09680162370204926}, {"id": 114, "seek": 45456, "start": 462.72, "end": 467.4, "text": " So it's really hard and it really destroys confidence.", "tokens": [50772, 407, 309, 311, 534, 1152, 293, 309, 534, 36714, 6687, 13, 51006], "temperature": 0.0, "avg_logprob": -0.18690438540476673, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.09680162370204926}, {"id": 115, "seek": 45456, "start": 467.4, "end": 470.44, "text": " It's hard to shut this application down at least correctly.", "tokens": [51006, 467, 311, 1152, 281, 5309, 341, 3861, 760, 412, 1935, 8944, 13, 51158], "temperature": 0.0, "avg_logprob": -0.18690438540476673, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.09680162370204926}, {"id": 116, "seek": 45456, "start": 470.44, "end": 476.0, "text": " You can kill the application, sure, but then open files are not saved.", "tokens": [51158, 509, 393, 1961, 264, 3861, 11, 988, 11, 457, 550, 1269, 7098, 366, 406, 6624, 13, 51436], "temperature": 0.0, "avg_logprob": -0.18690438540476673, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.09680162370204926}, {"id": 117, "seek": 45456, "start": 476.0, "end": 480.52, "text": " And if you are running end-to-end tests or anything like it, then you need to make sure", "tokens": [51436, 400, 498, 291, 366, 2614, 917, 12, 1353, 12, 521, 6921, 420, 1340, 411, 309, 11, 550, 291, 643, 281, 652, 988, 51662], "temperature": 0.0, "avg_logprob": -0.18690438540476673, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.09680162370204926}, {"id": 118, "seek": 45456, "start": 480.52, "end": 482.0, "text": " that all your resources are cleaned up.", "tokens": [51662, 300, 439, 428, 3593, 366, 16146, 493, 13, 51736], "temperature": 0.0, "avg_logprob": -0.18690438540476673, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.09680162370204926}, {"id": 119, "seek": 48200, "start": 482.0, "end": 488.36, "text": " So the next time you start, you are not blocking other things.", "tokens": [50364, 407, 264, 958, 565, 291, 722, 11, 291, 366, 406, 17776, 661, 721, 13, 50682], "temperature": 0.0, "avg_logprob": -0.17712685968968775, "compression_ratio": 1.5845410628019323, "no_speech_prob": 0.00765558797866106}, {"id": 120, "seek": 48200, "start": 488.36, "end": 492.32, "text": " So this was really hard and it made it really hard to test because if I wanted to test my", "tokens": [50682, 407, 341, 390, 534, 1152, 293, 309, 1027, 309, 534, 1152, 281, 1500, 570, 498, 286, 1415, 281, 1500, 452, 50880], "temperature": 0.0, "avg_logprob": -0.17712685968968775, "compression_ratio": 1.5845410628019323, "no_speech_prob": 0.00765558797866106}, {"id": 121, "seek": 48200, "start": 492.32, "end": 501.64, "text": " L2 announcer, I had to recreate all of this additional infrastructure a lot of the time,", "tokens": [50880, 441, 17, 49574, 11, 286, 632, 281, 25833, 439, 295, 341, 4497, 6896, 257, 688, 295, 264, 565, 11, 51346], "temperature": 0.0, "avg_logprob": -0.17712685968968775, "compression_ratio": 1.5845410628019323, "no_speech_prob": 0.00765558797866106}, {"id": 122, "seek": 48200, "start": 501.64, "end": 509.76, "text": " even if I had interfaces because some dependencies were still problematic or whatever.", "tokens": [51346, 754, 498, 286, 632, 28416, 570, 512, 36606, 645, 920, 19011, 420, 2035, 13, 51752], "temperature": 0.0, "avg_logprob": -0.17712685968968775, "compression_ratio": 1.5845410628019323, "no_speech_prob": 0.00765558797866106}, {"id": 123, "seek": 50976, "start": 509.76, "end": 517.6, "text": " So for us, we started looking into solutions and this led us to dependency injection for", "tokens": [50364, 407, 337, 505, 11, 321, 1409, 1237, 666, 6547, 293, 341, 4684, 505, 281, 33621, 22873, 337, 50756], "temperature": 0.0, "avg_logprob": -0.1811981060925652, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.025367015972733498}, {"id": 124, "seek": 50976, "start": 517.6, "end": 519.28, "text": " a few reasons.", "tokens": [50756, 257, 1326, 4112, 13, 50840], "temperature": 0.0, "avg_logprob": -0.1811981060925652, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.025367015972733498}, {"id": 125, "seek": 50976, "start": 519.28, "end": 526.0, "text": " So before I go deeper, for the ones for people that don't know, dependency injection is basically", "tokens": [50840, 407, 949, 286, 352, 7731, 11, 337, 264, 2306, 337, 561, 300, 500, 380, 458, 11, 33621, 22873, 307, 1936, 51176], "temperature": 0.0, "avg_logprob": -0.1811981060925652, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.025367015972733498}, {"id": 126, "seek": 50976, "start": 526.0, "end": 531.96, "text": " a way to instead of explicitly initializing your project, so basically having a very big", "tokens": [51176, 257, 636, 281, 2602, 295, 20803, 5883, 3319, 428, 1716, 11, 370, 1936, 1419, 257, 588, 955, 51474], "temperature": 0.0, "avg_logprob": -0.1811981060925652, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.025367015972733498}, {"id": 127, "seek": 53196, "start": 531.96, "end": 539.52, "text": " main file, you define your components and you explicitly define what their dependencies", "tokens": [50364, 2135, 3991, 11, 291, 6964, 428, 6677, 293, 291, 20803, 6964, 437, 641, 36606, 50742], "temperature": 0.0, "avg_logprob": -0.2662286210334164, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.8323726058006287}, {"id": 128, "seek": 53196, "start": 539.52, "end": 540.52, "text": " are.", "tokens": [50742, 366, 13, 50792], "temperature": 0.0, "avg_logprob": -0.2662286210334164, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.8323726058006287}, {"id": 129, "seek": 53196, "start": 540.52, "end": 544.4000000000001, "text": " And then you can have some component, in this case I call it a graph builder but it's", "tokens": [50792, 400, 550, 291, 393, 362, 512, 6542, 11, 294, 341, 1389, 286, 818, 309, 257, 4295, 27377, 457, 309, 311, 50986], "temperature": 0.0, "avg_logprob": -0.2662286210334164, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.8323726058006287}, {"id": 130, "seek": 53196, "start": 544.4000000000001, "end": 552.2800000000001, "text": " basically the name of your framework that you use to actually initialize that and you", "tokens": [50986, 1936, 264, 1315, 295, 428, 8388, 300, 291, 764, 281, 767, 5883, 1125, 300, 293, 291, 51380], "temperature": 0.0, "avg_logprob": -0.2662286210334164, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.8323726058006287}, {"id": 131, "seek": 53196, "start": 552.2800000000001, "end": 557.44, "text": " hand off the job of correctly initializing your application, you hand it off to some", "tokens": [51380, 1011, 766, 264, 1691, 295, 8944, 5883, 3319, 428, 3861, 11, 291, 1011, 309, 766, 281, 512, 51638], "temperature": 0.0, "avg_logprob": -0.2662286210334164, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.8323726058006287}, {"id": 132, "seek": 53196, "start": 557.44, "end": 558.44, "text": " piece of software.", "tokens": [51638, 2522, 295, 4722, 13, 51688], "temperature": 0.0, "avg_logprob": -0.2662286210334164, "compression_ratio": 1.7037037037037037, "no_speech_prob": 0.8323726058006287}, {"id": 133, "seek": 55844, "start": 558.72, "end": 561.72, "text": " We know software never has problems or bugs.", "tokens": [50378, 492, 458, 4722, 1128, 575, 2740, 420, 15120, 13, 50528], "temperature": 0.0, "avg_logprob": -0.29888691773285736, "compression_ratio": 1.43, "no_speech_prob": 0.11633361876010895}, {"id": 134, "seek": 55844, "start": 561.72, "end": 568.44, "text": " But in all honesty, so this is actually quite popular pattern in other languages like Java,", "tokens": [50528, 583, 294, 439, 26839, 11, 370, 341, 307, 767, 1596, 3743, 5102, 294, 661, 8650, 411, 10745, 11, 50864], "temperature": 0.0, "avg_logprob": -0.29888691773285736, "compression_ratio": 1.43, "no_speech_prob": 0.11633361876010895}, {"id": 135, "seek": 55844, "start": 568.44, "end": 575.96, "text": " C sharp, PHP, but we don't see it that often in Go projects.", "tokens": [50864, 383, 8199, 11, 47298, 11, 457, 321, 500, 380, 536, 309, 300, 2049, 294, 1037, 4455, 13, 51240], "temperature": 0.0, "avg_logprob": -0.29888691773285736, "compression_ratio": 1.43, "no_speech_prob": 0.11633361876010895}, {"id": 136, "seek": 55844, "start": 575.96, "end": 583.4000000000001, "text": " So the only thing that is required for this to work is that you always, or at least work", "tokens": [51240, 407, 264, 787, 551, 300, 307, 4739, 337, 341, 281, 589, 307, 300, 291, 1009, 11, 420, 412, 1935, 589, 51612], "temperature": 0.0, "avg_logprob": -0.29888691773285736, "compression_ratio": 1.43, "no_speech_prob": 0.11633361876010895}, {"id": 137, "seek": 58340, "start": 583.4, "end": 590.48, "text": " correctly, is that you specify your dependencies explicitly, so as arguments to a constructor", "tokens": [50364, 8944, 11, 307, 300, 291, 16500, 428, 36606, 20803, 11, 370, 382, 12869, 281, 257, 47479, 50718], "temperature": 0.0, "avg_logprob": -0.2551531442781774, "compression_ratio": 1.509433962264151, "no_speech_prob": 0.02352670021355152}, {"id": 138, "seek": 58340, "start": 590.48, "end": 593.28, "text": " function.", "tokens": [50718, 2445, 13, 50858], "temperature": 0.0, "avg_logprob": -0.2551531442781774, "compression_ratio": 1.509433962264151, "no_speech_prob": 0.02352670021355152}, {"id": 139, "seek": 58340, "start": 593.28, "end": 599.84, "text": " So what I would like to introduce to you is the Uber FX library, so it's made and maintained", "tokens": [50858, 407, 437, 286, 576, 411, 281, 5366, 281, 291, 307, 264, 21839, 37849, 6405, 11, 370, 309, 311, 1027, 293, 17578, 51186], "temperature": 0.0, "avg_logprob": -0.2551531442781774, "compression_ratio": 1.509433962264151, "no_speech_prob": 0.02352670021355152}, {"id": 140, "seek": 58340, "start": 599.84, "end": 601.84, "text": " by Uber.", "tokens": [51186, 538, 21839, 13, 51286], "temperature": 0.0, "avg_logprob": -0.2551531442781774, "compression_ratio": 1.509433962264151, "no_speech_prob": 0.02352670021355152}, {"id": 141, "seek": 58340, "start": 601.84, "end": 607.68, "text": " Originally developed by Glipp, who is now actually a colleague of mine, which is why", "tokens": [51286, 28696, 4743, 538, 460, 2081, 427, 11, 567, 307, 586, 767, 257, 13532, 295, 3892, 11, 597, 307, 983, 51578], "temperature": 0.0, "avg_logprob": -0.2551531442781774, "compression_ratio": 1.509433962264151, "no_speech_prob": 0.02352670021355152}, {"id": 142, "seek": 58340, "start": 607.68, "end": 611.1999999999999, "text": " how we got into this library.", "tokens": [51578, 577, 321, 658, 666, 341, 6405, 13, 51754], "temperature": 0.0, "avg_logprob": -0.2551531442781774, "compression_ratio": 1.509433962264151, "no_speech_prob": 0.02352670021355152}, {"id": 143, "seek": 61120, "start": 611.2, "end": 617.1600000000001, "text": " It's really well battle tested and I'm going to show you how it works and what this looks", "tokens": [50364, 467, 311, 534, 731, 4635, 8246, 293, 286, 478, 516, 281, 855, 291, 577, 309, 1985, 293, 437, 341, 1542, 50662], "temperature": 0.0, "avg_logprob": -0.28863492303965044, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.028212321922183037}, {"id": 144, "seek": 61120, "start": 617.1600000000001, "end": 618.1600000000001, "text": " like.", "tokens": [50662, 411, 13, 50712], "temperature": 0.0, "avg_logprob": -0.28863492303965044, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.028212321922183037}, {"id": 145, "seek": 61120, "start": 618.1600000000001, "end": 623.5200000000001, "text": " But what's important to know is that it is an, as is the Penesy injection library.", "tokens": [50712, 583, 437, 311, 1021, 281, 458, 307, 300, 309, 307, 364, 11, 382, 307, 264, 10571, 279, 88, 22873, 6405, 13, 50980], "temperature": 0.0, "avg_logprob": -0.28863492303965044, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.028212321922183037}, {"id": 146, "seek": 61120, "start": 623.5200000000001, "end": 628.4000000000001, "text": " The Penesy injection libraries might not all work for your use case, it didn't for us.", "tokens": [50980, 440, 10571, 279, 88, 22873, 15148, 1062, 406, 439, 589, 337, 428, 764, 1389, 11, 309, 994, 380, 337, 505, 13, 51224], "temperature": 0.0, "avg_logprob": -0.28863492303965044, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.028212321922183037}, {"id": 147, "seek": 61120, "start": 628.4000000000001, "end": 635.36, "text": " So we actually, if you were to look at Cilium today, we actually use our own custom flavored", "tokens": [51224, 407, 321, 767, 11, 498, 291, 645, 281, 574, 412, 383, 388, 2197, 965, 11, 321, 767, 764, 527, 1065, 2375, 37261, 51572], "temperature": 0.0, "avg_logprob": -0.28863492303965044, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.028212321922183037}, {"id": 148, "seek": 63536, "start": 635.36, "end": 642.0, "text": " framework, build on dig, which is basically the underlying library under FX.", "tokens": [50364, 8388, 11, 1322, 322, 2528, 11, 597, 307, 1936, 264, 14217, 6405, 833, 37849, 13, 50696], "temperature": 0.0, "avg_logprob": -0.2089398878592032, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.12197399139404297}, {"id": 149, "seek": 63536, "start": 642.0, "end": 647.32, "text": " But FX is if you go ahead and first try something, then FX is your starting point.", "tokens": [50696, 583, 37849, 307, 498, 291, 352, 2286, 293, 700, 853, 746, 11, 550, 37849, 307, 428, 2891, 935, 13, 50962], "temperature": 0.0, "avg_logprob": -0.2089398878592032, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.12197399139404297}, {"id": 150, "seek": 63536, "start": 647.32, "end": 651.36, "text": " And this actually solved most of, like it was made to solve a lot of the problems we", "tokens": [50962, 400, 341, 767, 13041, 881, 295, 11, 411, 309, 390, 1027, 281, 5039, 257, 688, 295, 264, 2740, 321, 51164], "temperature": 0.0, "avg_logprob": -0.2089398878592032, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.12197399139404297}, {"id": 151, "seek": 63536, "start": 651.36, "end": 659.32, "text": " had, not only for this initialization issue, but also because we have a lot of binaries", "tokens": [51164, 632, 11, 406, 787, 337, 341, 5883, 2144, 2734, 11, 457, 611, 570, 321, 362, 257, 688, 295, 5171, 4889, 51562], "temperature": 0.0, "avg_logprob": -0.2089398878592032, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.12197399139404297}, {"id": 152, "seek": 63536, "start": 659.32, "end": 664.64, "text": " in a big mono repo, so it also allows for really good reuse, which is, as far as I understand", "tokens": [51562, 294, 257, 955, 35624, 49040, 11, 370, 309, 611, 4045, 337, 534, 665, 26225, 11, 597, 307, 11, 382, 1400, 382, 286, 1223, 51828], "temperature": 0.0, "avg_logprob": -0.2089398878592032, "compression_ratio": 1.6511627906976745, "no_speech_prob": 0.12197399139404297}, {"id": 153, "seek": 66464, "start": 664.64, "end": 669.52, "text": " it, where Uber first started.", "tokens": [50364, 309, 11, 689, 21839, 700, 1409, 13, 50608], "temperature": 0.0, "avg_logprob": -0.23177262356406764, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.09794466197490692}, {"id": 154, "seek": 66464, "start": 669.52, "end": 677.24, "text": " So to explain this, I first created a very, very small application.", "tokens": [50608, 407, 281, 2903, 341, 11, 286, 700, 2942, 257, 588, 11, 588, 1359, 3861, 13, 50994], "temperature": 0.0, "avg_logprob": -0.23177262356406764, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.09794466197490692}, {"id": 155, "seek": 66464, "start": 677.24, "end": 681.12, "text": " Normally you wouldn't use dependency injection on such a small application.", "tokens": [50994, 17424, 291, 2759, 380, 764, 33621, 22873, 322, 1270, 257, 1359, 3861, 13, 51188], "temperature": 0.0, "avg_logprob": -0.23177262356406764, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.09794466197490692}, {"id": 156, "seek": 66464, "start": 681.12, "end": 684.3199999999999, "text": " So we just have a simple web server.", "tokens": [51188, 407, 321, 445, 362, 257, 2199, 3670, 7154, 13, 51348], "temperature": 0.0, "avg_logprob": -0.23177262356406764, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.09794466197490692}, {"id": 157, "seek": 66464, "start": 684.3199999999999, "end": 690.24, "text": " And this is, I why, for example, might have, might write this without dependency injection.", "tokens": [51348, 400, 341, 307, 11, 286, 983, 11, 337, 1365, 11, 1062, 362, 11, 1062, 2464, 341, 1553, 33621, 22873, 13, 51644], "temperature": 0.0, "avg_logprob": -0.23177262356406764, "compression_ratio": 1.6063829787234043, "no_speech_prob": 0.09794466197490692}, {"id": 158, "seek": 69024, "start": 690.24, "end": 694.84, "text": " So if a main, we construct everything, link everything together, call server.serve, and", "tokens": [50364, 407, 498, 257, 2135, 11, 321, 7690, 1203, 11, 2113, 1203, 1214, 11, 818, 7154, 13, 82, 3768, 11, 293, 50594], "temperature": 0.0, "avg_logprob": -0.16220768860408238, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.046833720058202744}, {"id": 159, "seek": 69024, "start": 694.84, "end": 696.72, "text": " we're done.", "tokens": [50594, 321, 434, 1096, 13, 50688], "temperature": 0.0, "avg_logprob": -0.16220768860408238, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.046833720058202744}, {"id": 160, "seek": 69024, "start": 696.72, "end": 700.72, "text": " So this is nice and short.", "tokens": [50688, 407, 341, 307, 1481, 293, 2099, 13, 50888], "temperature": 0.0, "avg_logprob": -0.16220768860408238, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.046833720058202744}, {"id": 161, "seek": 69024, "start": 700.72, "end": 706.24, "text": " So when we do dependency injection, we have to be a bit more formal.", "tokens": [50888, 407, 562, 321, 360, 33621, 22873, 11, 321, 362, 281, 312, 257, 857, 544, 9860, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16220768860408238, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.046833720058202744}, {"id": 162, "seek": 69024, "start": 706.24, "end": 710.64, "text": " So I defined a new listener, a new logger, and a new server.", "tokens": [51164, 407, 286, 7642, 257, 777, 31569, 11, 257, 777, 3565, 1321, 11, 293, 257, 777, 7154, 13, 51384], "temperature": 0.0, "avg_logprob": -0.16220768860408238, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.046833720058202744}, {"id": 163, "seek": 69024, "start": 710.64, "end": 714.16, "text": " My listener and logger at this moment don't have any dependencies.", "tokens": [51384, 1222, 31569, 293, 3565, 1321, 412, 341, 1623, 500, 380, 362, 604, 36606, 13, 51560], "temperature": 0.0, "avg_logprob": -0.16220768860408238, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.046833720058202744}, {"id": 164, "seek": 69024, "start": 714.16, "end": 719.24, "text": " I could give them configuration or something else, but that wouldn't fit on the slides.", "tokens": [51560, 286, 727, 976, 552, 11694, 420, 746, 1646, 11, 457, 300, 2759, 380, 3318, 322, 264, 9788, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16220768860408238, "compression_ratio": 1.7196652719665273, "no_speech_prob": 0.046833720058202744}, {"id": 165, "seek": 71924, "start": 719.76, "end": 726.08, "text": " And the server takes both of these and constructs itself.", "tokens": [50390, 400, 264, 7154, 2516, 1293, 295, 613, 293, 7690, 82, 2564, 13, 50706], "temperature": 0.0, "avg_logprob": -0.1536826369582966, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.03832410275936127}, {"id": 166, "seek": 71924, "start": 726.08, "end": 731.44, "text": " So we defined everything, what everything needs, and then on the top left in our main,", "tokens": [50706, 407, 321, 7642, 1203, 11, 437, 1203, 2203, 11, 293, 550, 322, 264, 1192, 1411, 294, 527, 2135, 11, 50974], "temperature": 0.0, "avg_logprob": -0.1536826369582966, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.03832410275936127}, {"id": 167, "seek": 71924, "start": 731.44, "end": 737.0, "text": " we say we create a new effects application, and we provide the listener and the logger,", "tokens": [50974, 321, 584, 321, 1884, 257, 777, 5065, 3861, 11, 293, 321, 2893, 264, 31569, 293, 264, 3565, 1321, 11, 51252], "temperature": 0.0, "avg_logprob": -0.1536826369582966, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.03832410275936127}, {"id": 168, "seek": 71924, "start": 737.0, "end": 744.0, "text": " and we invoke the server, because if you recall, the server was, the serve function was the", "tokens": [51252, 293, 321, 41117, 264, 7154, 11, 570, 498, 291, 9901, 11, 264, 7154, 390, 11, 264, 4596, 2445, 390, 264, 51602], "temperature": 0.0, "avg_logprob": -0.1536826369582966, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.03832410275936127}, {"id": 169, "seek": 71924, "start": 744.0, "end": 747.52, "text": " thing that we were interested in, that we called.", "tokens": [51602, 551, 300, 321, 645, 3102, 294, 11, 300, 321, 1219, 13, 51778], "temperature": 0.0, "avg_logprob": -0.1536826369582966, "compression_ratio": 1.7395348837209301, "no_speech_prob": 0.03832410275936127}, {"id": 170, "seek": 74752, "start": 747.52, "end": 751.48, "text": " In practice, what this does is the invokes are basically your entry points.", "tokens": [50364, 682, 3124, 11, 437, 341, 775, 307, 264, 1048, 8606, 366, 1936, 428, 8729, 2793, 13, 50562], "temperature": 0.0, "avg_logprob": -0.20020125676127312, "compression_ratio": 1.8879310344827587, "no_speech_prob": 0.012680324725806713}, {"id": 171, "seek": 74752, "start": 751.48, "end": 759.04, "text": " So and the library will look for all dependencies of that, of that entry point.", "tokens": [50562, 407, 293, 264, 6405, 486, 574, 337, 439, 36606, 295, 300, 11, 295, 300, 8729, 935, 13, 50940], "temperature": 0.0, "avg_logprob": -0.20020125676127312, "compression_ratio": 1.8879310344827587, "no_speech_prob": 0.012680324725806713}, {"id": 172, "seek": 74752, "start": 759.04, "end": 764.8, "text": " So you could, for example, create a very big graph and have multiple entry points or remove", "tokens": [50940, 407, 291, 727, 11, 337, 1365, 11, 1884, 257, 588, 955, 4295, 293, 362, 3866, 8729, 2793, 420, 4159, 51228], "temperature": 0.0, "avg_logprob": -0.20020125676127312, "compression_ratio": 1.8879310344827587, "no_speech_prob": 0.012680324725806713}, {"id": 173, "seek": 74752, "start": 764.8, "end": 769.0, "text": " entry points depending on, call different entry points depending on, for example, commands", "tokens": [51228, 8729, 2793, 5413, 322, 11, 818, 819, 8729, 2793, 5413, 322, 11, 337, 1365, 11, 16901, 51438], "temperature": 0.0, "avg_logprob": -0.20020125676127312, "compression_ratio": 1.8879310344827587, "no_speech_prob": 0.012680324725806713}, {"id": 174, "seek": 74752, "start": 769.0, "end": 771.0799999999999, "text": " in your, in your binary.", "tokens": [51438, 294, 428, 11, 294, 428, 17434, 13, 51542], "temperature": 0.0, "avg_logprob": -0.20020125676127312, "compression_ratio": 1.8879310344827587, "no_speech_prob": 0.012680324725806713}, {"id": 175, "seek": 74752, "start": 771.0799999999999, "end": 774.92, "text": " And then it will only construct and start your dependencies that you need.", "tokens": [51542, 400, 550, 309, 486, 787, 7690, 293, 722, 428, 36606, 300, 291, 643, 13, 51734], "temperature": 0.0, "avg_logprob": -0.20020125676127312, "compression_ratio": 1.8879310344827587, "no_speech_prob": 0.012680324725806713}, {"id": 176, "seek": 77492, "start": 774.92, "end": 779.8399999999999, "text": " So it also does a little bit of that code elimination implicitly.", "tokens": [50364, 407, 309, 611, 775, 257, 707, 857, 295, 300, 3089, 29224, 26947, 356, 13, 50610], "temperature": 0.0, "avg_logprob": -0.19730979030572096, "compression_ratio": 1.653386454183267, "no_speech_prob": 0.0017481104005128145}, {"id": 177, "seek": 77492, "start": 779.8399999999999, "end": 785.12, "text": " And then you call the run, which actually wouldn't do anything in this example.", "tokens": [50610, 400, 550, 291, 818, 264, 1190, 11, 597, 767, 2759, 380, 360, 1340, 294, 341, 1365, 13, 50874], "temperature": 0.0, "avg_logprob": -0.19730979030572096, "compression_ratio": 1.653386454183267, "no_speech_prob": 0.0017481104005128145}, {"id": 178, "seek": 77492, "start": 785.12, "end": 788.56, "text": " So I'm sorry, because the serve is not called.", "tokens": [50874, 407, 286, 478, 2597, 11, 570, 264, 4596, 307, 406, 1219, 13, 51046], "temperature": 0.0, "avg_logprob": -0.19730979030572096, "compression_ratio": 1.653386454183267, "no_speech_prob": 0.0017481104005128145}, {"id": 179, "seek": 77492, "start": 788.56, "end": 792.56, "text": " So this would start and it would construct everything, but nothing extra would actually", "tokens": [51046, 407, 341, 576, 722, 293, 309, 576, 7690, 1203, 11, 457, 1825, 2857, 576, 767, 51246], "temperature": 0.0, "avg_logprob": -0.19730979030572096, "compression_ratio": 1.653386454183267, "no_speech_prob": 0.0017481104005128145}, {"id": 180, "seek": 77492, "start": 792.56, "end": 794.4799999999999, "text": " happen.", "tokens": [51246, 1051, 13, 51342], "temperature": 0.0, "avg_logprob": -0.19730979030572096, "compression_ratio": 1.653386454183267, "no_speech_prob": 0.0017481104005128145}, {"id": 181, "seek": 77492, "start": 794.4799999999999, "end": 799.16, "text": " For that, FX has something called life cycles, which are really useful.", "tokens": [51342, 1171, 300, 11, 37849, 575, 746, 1219, 993, 17796, 11, 597, 366, 534, 4420, 13, 51576], "temperature": 0.0, "avg_logprob": -0.19730979030572096, "compression_ratio": 1.653386454183267, "no_speech_prob": 0.0017481104005128145}, {"id": 182, "seek": 77492, "start": 799.16, "end": 802.8399999999999, "text": " So we, the last slide talked about the construct time.", "tokens": [51576, 407, 321, 11, 264, 1036, 4137, 2825, 466, 264, 7690, 565, 13, 51760], "temperature": 0.0, "avg_logprob": -0.19730979030572096, "compression_ratio": 1.653386454183267, "no_speech_prob": 0.0017481104005128145}, {"id": 183, "seek": 80284, "start": 802.84, "end": 808.6800000000001, "text": " So when we construct our graph and then when we run it, the life cycle gets invoked.", "tokens": [50364, 407, 562, 321, 7690, 527, 4295, 293, 550, 562, 321, 1190, 309, 11, 264, 993, 6586, 2170, 1048, 9511, 13, 50656], "temperature": 0.0, "avg_logprob": -0.19079459340948807, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.017127295956015587}, {"id": 184, "seek": 80284, "start": 808.6800000000001, "end": 813.0, "text": " So what we can do is we give this, we say, okay, the server is now dependent on a life", "tokens": [50656, 407, 437, 321, 393, 360, 307, 321, 976, 341, 11, 321, 584, 11, 1392, 11, 264, 7154, 307, 586, 12334, 322, 257, 993, 50872], "temperature": 0.0, "avg_logprob": -0.19079459340948807, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.017127295956015587}, {"id": 185, "seek": 80284, "start": 813.0, "end": 814.32, "text": " cycle.", "tokens": [50872, 6586, 13, 50938], "temperature": 0.0, "avg_logprob": -0.19079459340948807, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.017127295956015587}, {"id": 186, "seek": 80284, "start": 814.32, "end": 822.08, "text": " And within the constructor, we, we tell the life cycle, okay, I can, I have some, something", "tokens": [50938, 400, 1951, 264, 47479, 11, 321, 11, 321, 980, 264, 993, 6586, 11, 1392, 11, 286, 393, 11, 286, 362, 512, 11, 746, 51326], "temperature": 0.0, "avg_logprob": -0.19079459340948807, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.017127295956015587}, {"id": 187, "seek": 80284, "start": 822.08, "end": 825.5600000000001, "text": " while, while I'm alive, I want to do something.", "tokens": [51326, 1339, 11, 1339, 286, 478, 5465, 11, 286, 528, 281, 360, 746, 13, 51500], "temperature": 0.0, "avg_logprob": -0.19079459340948807, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.017127295956015587}, {"id": 188, "seek": 80284, "start": 825.5600000000001, "end": 829.6, "text": " So I have an on stop and an on, on, on start and on stop hook.", "tokens": [51500, 407, 286, 362, 364, 322, 1590, 293, 364, 322, 11, 322, 11, 322, 722, 293, 322, 1590, 6328, 13, 51702], "temperature": 0.0, "avg_logprob": -0.19079459340948807, "compression_ratio": 1.7971698113207548, "no_speech_prob": 0.017127295956015587}, {"id": 189, "seek": 82960, "start": 829.6, "end": 834.12, "text": " And when I start, I want to start a go routine and serve out whatever I do.", "tokens": [50364, 400, 562, 286, 722, 11, 286, 528, 281, 722, 257, 352, 9927, 293, 4596, 484, 2035, 286, 360, 13, 50590], "temperature": 0.0, "avg_logprob": -0.15280647277832032, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.005897896829992533}, {"id": 190, "seek": 82960, "start": 834.12, "end": 838.44, "text": " And when I stop, I want to shut down, which is something that my initial program didn't", "tokens": [50590, 400, 562, 286, 1590, 11, 286, 528, 281, 5309, 760, 11, 597, 307, 746, 300, 452, 5883, 1461, 994, 380, 50806], "temperature": 0.0, "avg_logprob": -0.15280647277832032, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.005897896829992533}, {"id": 191, "seek": 82960, "start": 838.44, "end": 843.44, "text": " even do, do a proper shutdown of the, of the HTTP server.", "tokens": [50806, 754, 360, 11, 360, 257, 2296, 34927, 295, 264, 11, 295, 264, 33283, 7154, 13, 51056], "temperature": 0.0, "avg_logprob": -0.15280647277832032, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.005897896829992533}, {"id": 192, "seek": 82960, "start": 843.44, "end": 852.48, "text": " So when, when it's, it's a little bit hard to like show that in the original example.", "tokens": [51056, 407, 562, 11, 562, 309, 311, 11, 309, 311, 257, 707, 857, 1152, 281, 411, 855, 300, 294, 264, 3380, 1365, 13, 51508], "temperature": 0.0, "avg_logprob": -0.15280647277832032, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.005897896829992533}, {"id": 193, "seek": 82960, "start": 852.48, "end": 858.2, "text": " So I threw together a very small sample that still fit on the slide, which is important", "tokens": [51508, 407, 286, 11918, 1214, 257, 588, 1359, 6889, 300, 920, 3318, 322, 264, 4137, 11, 597, 307, 1021, 51794], "temperature": 0.0, "avg_logprob": -0.15280647277832032, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.005897896829992533}, {"id": 194, "seek": 82960, "start": 858.2, "end": 859.2, "text": " here.", "tokens": [51794, 510, 13, 51844], "temperature": 0.0, "avg_logprob": -0.15280647277832032, "compression_ratio": 1.6778242677824269, "no_speech_prob": 0.005897896829992533}, {"id": 195, "seek": 85920, "start": 859.2, "end": 862.36, "text": " So I have ABC and they basically all depend on each other.", "tokens": [50364, 407, 286, 362, 22342, 293, 436, 1936, 439, 5672, 322, 1184, 661, 13, 50522], "temperature": 0.0, "avg_logprob": -0.17091648972879245, "compression_ratio": 1.8, "no_speech_prob": 0.014581435360014439}, {"id": 196, "seek": 85920, "start": 862.36, "end": 864.36, "text": " So it's a very deep dependency chain.", "tokens": [50522, 407, 309, 311, 257, 588, 2452, 33621, 5021, 13, 50622], "temperature": 0.0, "avg_logprob": -0.17091648972879245, "compression_ratio": 1.8, "no_speech_prob": 0.014581435360014439}, {"id": 197, "seek": 85920, "start": 864.36, "end": 868.5600000000001, "text": " And then I have this print function, which you can decipher later, but it basically,", "tokens": [50622, 400, 550, 286, 362, 341, 4482, 2445, 11, 597, 291, 393, 49859, 1780, 11, 457, 309, 1936, 11, 50832], "temperature": 0.0, "avg_logprob": -0.17091648972879245, "compression_ratio": 1.8, "no_speech_prob": 0.014581435360014439}, {"id": 198, "seek": 85920, "start": 868.5600000000001, "end": 870.2, "text": " I call it in every constructor.", "tokens": [50832, 286, 818, 309, 294, 633, 47479, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17091648972879245, "compression_ratio": 1.8, "no_speech_prob": 0.014581435360014439}, {"id": 199, "seek": 85920, "start": 870.2, "end": 874.44, "text": " It's both prints at that time and it prints in the life cycle hooks.", "tokens": [50914, 467, 311, 1293, 22305, 412, 300, 565, 293, 309, 22305, 294, 264, 993, 6586, 26485, 13, 51126], "temperature": 0.0, "avg_logprob": -0.17091648972879245, "compression_ratio": 1.8, "no_speech_prob": 0.014581435360014439}, {"id": 200, "seek": 85920, "start": 874.44, "end": 876.08, "text": " So you can see what happens.", "tokens": [51126, 407, 291, 393, 536, 437, 2314, 13, 51208], "temperature": 0.0, "avg_logprob": -0.17091648972879245, "compression_ratio": 1.8, "no_speech_prob": 0.014581435360014439}, {"id": 201, "seek": 85920, "start": 876.08, "end": 880.0400000000001, "text": " And when I would were to run this program, the output would be something like this.", "tokens": [51208, 400, 562, 286, 576, 645, 281, 1190, 341, 1461, 11, 264, 5598, 576, 312, 746, 411, 341, 13, 51406], "temperature": 0.0, "avg_logprob": -0.17091648972879245, "compression_ratio": 1.8, "no_speech_prob": 0.014581435360014439}, {"id": 202, "seek": 85920, "start": 880.0400000000001, "end": 885.4000000000001, "text": " So it says, A is constructed, B is constructed, C is constructed, because that's the order", "tokens": [51406, 407, 309, 1619, 11, 316, 307, 17083, 11, 363, 307, 17083, 11, 383, 307, 17083, 11, 570, 300, 311, 264, 1668, 51674], "temperature": 0.0, "avg_logprob": -0.17091648972879245, "compression_ratio": 1.8, "no_speech_prob": 0.014581435360014439}, {"id": 203, "seek": 88540, "start": 885.4, "end": 892.16, "text": " in which the, so, so we have all the dependencies there when we are, but it's just some construction.", "tokens": [50364, 294, 597, 264, 11, 370, 11, 370, 321, 362, 439, 264, 36606, 456, 562, 321, 366, 11, 457, 309, 311, 445, 512, 6435, 13, 50702], "temperature": 0.0, "avg_logprob": -0.18329903886124893, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.1840219795703888}, {"id": 204, "seek": 88540, "start": 892.16, "end": 896.84, "text": " Then the start hooks are called in the exact same order as we constructed them.", "tokens": [50702, 1396, 264, 722, 26485, 366, 1219, 294, 264, 1900, 912, 1668, 382, 321, 17083, 552, 13, 50936], "temperature": 0.0, "avg_logprob": -0.18329903886124893, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.1840219795703888}, {"id": 205, "seek": 88540, "start": 896.84, "end": 903.12, "text": " So if you have dependencies, for example, A opened the file and we need that file to", "tokens": [50936, 407, 498, 291, 362, 36606, 11, 337, 1365, 11, 316, 5625, 264, 3991, 293, 321, 643, 300, 3991, 281, 51250], "temperature": 0.0, "avg_logprob": -0.18329903886124893, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.1840219795703888}, {"id": 206, "seek": 88540, "start": 903.12, "end": 906.48, "text": " be open because B will start calling things in this life cycle.", "tokens": [51250, 312, 1269, 570, 363, 486, 722, 5141, 721, 294, 341, 993, 6586, 13, 51418], "temperature": 0.0, "avg_logprob": -0.18329903886124893, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.1840219795703888}, {"id": 207, "seek": 88540, "start": 906.48, "end": 912.36, "text": " And we know that the, that the start hook of A is always called before any of its dependencies", "tokens": [51418, 400, 321, 458, 300, 264, 11, 300, 264, 722, 6328, 295, 316, 307, 1009, 1219, 949, 604, 295, 1080, 36606, 51712], "temperature": 0.0, "avg_logprob": -0.18329903886124893, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.1840219795703888}, {"id": 208, "seek": 88540, "start": 912.36, "end": 914.6, "text": " get time to run.", "tokens": [51712, 483, 565, 281, 1190, 13, 51824], "temperature": 0.0, "avg_logprob": -0.18329903886124893, "compression_ratio": 1.7894736842105263, "no_speech_prob": 0.1840219795703888}, {"id": 209, "seek": 91460, "start": 914.6, "end": 920.08, "text": " And then when we stop the application, we control C or something else happens, we shut", "tokens": [50364, 400, 550, 562, 321, 1590, 264, 3861, 11, 321, 1969, 383, 420, 746, 1646, 2314, 11, 321, 5309, 50638], "temperature": 0.0, "avg_logprob": -0.1467006138392857, "compression_ratio": 1.7842323651452283, "no_speech_prob": 0.00646613584831357}, {"id": 210, "seek": 91460, "start": 920.08, "end": 921.08, "text": " down.", "tokens": [50638, 760, 13, 50688], "temperature": 0.0, "avg_logprob": -0.1467006138392857, "compression_ratio": 1.7842323651452283, "no_speech_prob": 0.00646613584831357}, {"id": 211, "seek": 91460, "start": 921.08, "end": 924.96, "text": " But the nice thing is, is we automatically shut down in the exact opposite order, just", "tokens": [50688, 583, 264, 1481, 551, 307, 11, 307, 321, 6772, 5309, 760, 294, 264, 1900, 6182, 1668, 11, 445, 50882], "temperature": 0.0, "avg_logprob": -0.1467006138392857, "compression_ratio": 1.7842323651452283, "no_speech_prob": 0.00646613584831357}, {"id": 212, "seek": 91460, "start": 924.96, "end": 930.24, "text": " like you would add the first somewhere, but it's at the application level.", "tokens": [50882, 411, 291, 576, 909, 264, 700, 4079, 11, 457, 309, 311, 412, 264, 3861, 1496, 13, 51146], "temperature": 0.0, "avg_logprob": -0.1467006138392857, "compression_ratio": 1.7842323651452283, "no_speech_prob": 0.00646613584831357}, {"id": 213, "seek": 91460, "start": 930.24, "end": 935.6800000000001, "text": " And this allows you to do proper shutdown, write your files away, do everything else.", "tokens": [51146, 400, 341, 4045, 291, 281, 360, 2296, 34927, 11, 2464, 428, 7098, 1314, 11, 360, 1203, 1646, 13, 51418], "temperature": 0.0, "avg_logprob": -0.1467006138392857, "compression_ratio": 1.7842323651452283, "no_speech_prob": 0.00646613584831357}, {"id": 214, "seek": 91460, "start": 935.6800000000001, "end": 941.88, "text": " And you also know that you, because you depend on everything else, that you get the first", "tokens": [51418, 400, 291, 611, 458, 300, 291, 11, 570, 291, 5672, 322, 1203, 1646, 11, 300, 291, 483, 264, 700, 51728], "temperature": 0.0, "avg_logprob": -0.1467006138392857, "compression_ratio": 1.7842323651452283, "no_speech_prob": 0.00646613584831357}, {"id": 215, "seek": 94188, "start": 941.88, "end": 948.2, "text": " chance to shut down properly and no one will call into you after that, because, in their", "tokens": [50364, 2931, 281, 5309, 760, 6108, 293, 572, 472, 486, 818, 666, 291, 934, 300, 11, 570, 11, 294, 641, 50680], "temperature": 0.0, "avg_logprob": -0.20324748646129262, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.003993850667029619}, {"id": 216, "seek": 94188, "start": 948.2, "end": 951.56, "text": " shutdown functions, because they don't have references to you.", "tokens": [50680, 34927, 6828, 11, 570, 436, 500, 380, 362, 15400, 281, 291, 13, 50848], "temperature": 0.0, "avg_logprob": -0.20324748646129262, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.003993850667029619}, {"id": 217, "seek": 94188, "start": 951.56, "end": 956.88, "text": " They are not your, you depend on everything else.", "tokens": [50848, 814, 366, 406, 428, 11, 291, 5672, 322, 1203, 1646, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20324748646129262, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.003993850667029619}, {"id": 218, "seek": 94188, "start": 956.88, "end": 958.6, "text": " There's also a nice feature called groups.", "tokens": [51114, 821, 311, 611, 257, 1481, 4111, 1219, 3935, 13, 51200], "temperature": 0.0, "avg_logprob": -0.20324748646129262, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.003993850667029619}, {"id": 219, "seek": 94188, "start": 958.6, "end": 960.2, "text": " There are actually quite a bit of features.", "tokens": [51200, 821, 366, 767, 1596, 257, 857, 295, 4122, 13, 51280], "temperature": 0.0, "avg_logprob": -0.20324748646129262, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.003993850667029619}, {"id": 220, "seek": 94188, "start": 960.2, "end": 964.76, "text": " I couldn't touch on everything because of time constraints, but this one is nice for,", "tokens": [51280, 286, 2809, 380, 2557, 322, 1203, 570, 295, 565, 18491, 11, 457, 341, 472, 307, 1481, 337, 11, 51508], "temperature": 0.0, "avg_logprob": -0.20324748646129262, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.003993850667029619}, {"id": 221, "seek": 94188, "start": 964.76, "end": 969.12, "text": " for a small section of problems.", "tokens": [51508, 337, 257, 1359, 3541, 295, 2740, 13, 51726], "temperature": 0.0, "avg_logprob": -0.20324748646129262, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.003993850667029619}, {"id": 222, "seek": 94188, "start": 969.12, "end": 970.12, "text": " And it's called a group.", "tokens": [51726, 400, 309, 311, 1219, 257, 1594, 13, 51776], "temperature": 0.0, "avg_logprob": -0.20324748646129262, "compression_ratio": 1.7211155378486056, "no_speech_prob": 0.003993850667029619}, {"id": 223, "seek": 97012, "start": 970.12, "end": 973.08, "text": " What you can do is, so I actually use two features.", "tokens": [50364, 708, 291, 393, 360, 307, 11, 370, 286, 767, 764, 732, 4122, 13, 50512], "temperature": 0.0, "avg_logprob": -0.19901964924123028, "compression_ratio": 1.7314049586776858, "no_speech_prob": 0.030280496925115585}, {"id": 224, "seek": 97012, "start": 973.08, "end": 976.24, "text": " I use the effects in and effects out feature.", "tokens": [50512, 286, 764, 264, 5065, 294, 293, 5065, 484, 4111, 13, 50670], "temperature": 0.0, "avg_logprob": -0.19901964924123028, "compression_ratio": 1.7314049586776858, "no_speech_prob": 0.030280496925115585}, {"id": 225, "seek": 97012, "start": 976.24, "end": 980.92, "text": " And it basically allows you to, to return multiple dependencies from a constructor or", "tokens": [50670, 400, 309, 1936, 4045, 291, 281, 11, 281, 2736, 3866, 36606, 490, 257, 47479, 420, 50904], "temperature": 0.0, "avg_logprob": -0.19901964924123028, "compression_ratio": 1.7314049586776858, "no_speech_prob": 0.030280496925115585}, {"id": 226, "seek": 97012, "start": 980.92, "end": 983.44, "text": " take multiple dependencies in a nice way.", "tokens": [50904, 747, 3866, 36606, 294, 257, 1481, 636, 13, 51030], "temperature": 0.0, "avg_logprob": -0.19901964924123028, "compression_ratio": 1.7314049586776858, "no_speech_prob": 0.030280496925115585}, {"id": 227, "seek": 97012, "start": 983.44, "end": 989.28, "text": " So I can, for example, have a parameter structure that takes in 20 different dependencies and", "tokens": [51030, 407, 286, 393, 11, 337, 1365, 11, 362, 257, 13075, 3877, 300, 2516, 294, 945, 819, 36606, 293, 51322], "temperature": 0.0, "avg_logprob": -0.19901964924123028, "compression_ratio": 1.7314049586776858, "no_speech_prob": 0.030280496925115585}, {"id": 228, "seek": 97012, "start": 989.28, "end": 992.84, "text": " don't have to spell them all out separately in my arguments.", "tokens": [51322, 500, 380, 362, 281, 9827, 552, 439, 484, 14759, 294, 452, 12869, 13, 51500], "temperature": 0.0, "avg_logprob": -0.19901964924123028, "compression_ratio": 1.7314049586776858, "no_speech_prob": 0.030280496925115585}, {"id": 229, "seek": 97012, "start": 992.84, "end": 995.0, "text": " And I can also return multiple things.", "tokens": [51500, 400, 286, 393, 611, 2736, 3866, 721, 13, 51608], "temperature": 0.0, "avg_logprob": -0.19901964924123028, "compression_ratio": 1.7314049586776858, "no_speech_prob": 0.030280496925115585}, {"id": 230, "seek": 99500, "start": 995.0, "end": 1002.16, "text": " Crucially, in my case, I can specify group names to basically route outputs from one,", "tokens": [50364, 13586, 1909, 11, 294, 452, 1389, 11, 286, 393, 16500, 1594, 5288, 281, 1936, 7955, 23930, 490, 472, 11, 50722], "temperature": 0.0, "avg_logprob": -0.1859502477960272, "compression_ratio": 1.6827956989247312, "no_speech_prob": 0.032270707190036774}, {"id": 231, "seek": 99500, "start": 1002.16, "end": 1006.16, "text": " from an output, from, from one place to another.", "tokens": [50722, 490, 364, 5598, 11, 490, 11, 490, 472, 1081, 281, 1071, 13, 50922], "temperature": 0.0, "avg_logprob": -0.1859502477960272, "compression_ratio": 1.6827956989247312, "no_speech_prob": 0.032270707190036774}, {"id": 232, "seek": 99500, "start": 1006.16, "end": 1008.24, "text": " And in this case, I created a mox.", "tokens": [50922, 400, 294, 341, 1389, 11, 286, 2942, 257, 705, 87, 13, 51026], "temperature": 0.0, "avg_logprob": -0.1859502477960272, "compression_ratio": 1.6827956989247312, "no_speech_prob": 0.032270707190036774}, {"id": 233, "seek": 99500, "start": 1008.24, "end": 1016.24, "text": " And this mox collects all of the mox handle, mox handle objects that are there.", "tokens": [51026, 400, 341, 705, 87, 39897, 439, 295, 264, 705, 87, 4813, 11, 705, 87, 4813, 6565, 300, 366, 456, 13, 51426], "temperature": 0.0, "avg_logprob": -0.1859502477960272, "compression_ratio": 1.6827956989247312, "no_speech_prob": 0.032270707190036774}, {"id": 234, "seek": 99500, "start": 1016.24, "end": 1019.84, "text": " And I have a foo and a bar and they both admit their own thing.", "tokens": [51426, 400, 286, 362, 257, 726, 78, 293, 257, 2159, 293, 436, 1293, 9796, 641, 1065, 551, 13, 51606], "temperature": 0.0, "avg_logprob": -0.1859502477960272, "compression_ratio": 1.6827956989247312, "no_speech_prob": 0.032270707190036774}, {"id": 235, "seek": 101984, "start": 1019.84, "end": 1025.4, "text": " And they are collected by, they are collected by this, by this mox which we could, could", "tokens": [50364, 400, 436, 366, 11087, 538, 11, 436, 366, 11087, 538, 341, 11, 538, 341, 705, 87, 597, 321, 727, 11, 727, 50642], "temperature": 0.0, "avg_logprob": -0.17237637950255807, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.08860152214765549}, {"id": 236, "seek": 101984, "start": 1025.4, "end": 1027.6000000000001, "text": " give to, to a server.", "tokens": [50642, 976, 281, 11, 281, 257, 7154, 13, 50752], "temperature": 0.0, "avg_logprob": -0.17237637950255807, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.08860152214765549}, {"id": 237, "seek": 101984, "start": 1027.6000000000001, "end": 1032.8400000000001, "text": " And the cool thing about this is that you, you have this once.", "tokens": [50752, 400, 264, 1627, 551, 466, 341, 307, 300, 291, 11, 291, 362, 341, 1564, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17237637950255807, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.08860152214765549}, {"id": 238, "seek": 101984, "start": 1032.8400000000001, "end": 1038.48, "text": " And you can then add a lot of additional, you can add a lot of additional parts to the,", "tokens": [51014, 400, 291, 393, 550, 909, 257, 688, 295, 4497, 11, 291, 393, 909, 257, 688, 295, 4497, 3166, 281, 264, 11, 51296], "temperature": 0.0, "avg_logprob": -0.17237637950255807, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.08860152214765549}, {"id": 239, "seek": 101984, "start": 1038.48, "end": 1040.08, "text": " to your whole application.", "tokens": [51296, 281, 428, 1379, 3861, 13, 51376], "temperature": 0.0, "avg_logprob": -0.17237637950255807, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.08860152214765549}, {"id": 240, "seek": 101984, "start": 1040.08, "end": 1043.88, "text": " And it all collects as an array into this group.", "tokens": [51376, 400, 309, 439, 39897, 382, 364, 10225, 666, 341, 1594, 13, 51566], "temperature": 0.0, "avg_logprob": -0.17237637950255807, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.08860152214765549}, {"id": 241, "seek": 101984, "start": 1043.88, "end": 1044.88, "text": " There's some caveats.", "tokens": [51566, 821, 311, 512, 11730, 1720, 13, 51616], "temperature": 0.0, "avg_logprob": -0.17237637950255807, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.08860152214765549}, {"id": 242, "seek": 101984, "start": 1044.88, "end": 1046.6000000000001, "text": " I'll come to that in a bit.", "tokens": [51616, 286, 603, 808, 281, 300, 294, 257, 857, 13, 51702], "temperature": 0.0, "avg_logprob": -0.17237637950255807, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.08860152214765549}, {"id": 243, "seek": 104660, "start": 1046.6, "end": 1053.6, "text": " So under the hood, how this works, very simplified, is we have our definitions.", "tokens": [50364, 407, 833, 264, 13376, 11, 577, 341, 1985, 11, 588, 26335, 11, 307, 321, 362, 527, 21988, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1693954273146026, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.007368769962340593}, {"id": 244, "seek": 104660, "start": 1053.6, "end": 1058.56, "text": " At least effects and dig use reflection to then look at the parameters and then based", "tokens": [50714, 1711, 1935, 5065, 293, 2528, 764, 12914, 281, 550, 574, 412, 264, 9834, 293, 550, 2361, 50962], "temperature": 0.0, "avg_logprob": -0.1693954273146026, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.007368769962340593}, {"id": 245, "seek": 104660, "start": 1058.56, "end": 1065.32, "text": " on the types, it creates a directional acyclic graph.", "tokens": [50962, 322, 264, 3467, 11, 309, 7829, 257, 42242, 696, 88, 66, 1050, 4295, 13, 51300], "temperature": 0.0, "avg_logprob": -0.1693954273146026, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.007368769962340593}, {"id": 246, "seek": 104660, "start": 1065.32, "end": 1070.36, "text": " And that graph can then be walked to get the, to get that correct ordering.", "tokens": [51300, 400, 300, 4295, 393, 550, 312, 7628, 281, 483, 264, 11, 281, 483, 300, 3006, 21739, 13, 51552], "temperature": 0.0, "avg_logprob": -0.1693954273146026, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.007368769962340593}, {"id": 247, "seek": 104660, "start": 1070.36, "end": 1075.52, "text": " So there is a small bit of magic there and it's called reflection, but it's not much.", "tokens": [51552, 407, 456, 307, 257, 1359, 857, 295, 5585, 456, 293, 309, 311, 1219, 12914, 11, 457, 309, 311, 406, 709, 13, 51810], "temperature": 0.0, "avg_logprob": -0.1693954273146026, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.007368769962340593}, {"id": 248, "seek": 107552, "start": 1075.52, "end": 1080.08, "text": " Like it's quite understandable if you actually go dive into, into how something like this", "tokens": [50364, 1743, 309, 311, 1596, 25648, 498, 291, 767, 352, 9192, 666, 11, 666, 577, 746, 411, 341, 50592], "temperature": 0.0, "avg_logprob": -0.17987147832320907, "compression_ratio": 1.625925925925926, "no_speech_prob": 0.04847792536020279}, {"id": 249, "seek": 107552, "start": 1080.08, "end": 1081.24, "text": " works.", "tokens": [50592, 1985, 13, 50650], "temperature": 0.0, "avg_logprob": -0.17987147832320907, "compression_ratio": 1.625925925925926, "no_speech_prob": 0.04847792536020279}, {"id": 250, "seek": 107552, "start": 1081.24, "end": 1085.4, "text": " And then again, the constructors to start and stop are called in that, in that determined", "tokens": [50650, 400, 550, 797, 11, 264, 7690, 830, 281, 722, 293, 1590, 366, 1219, 294, 300, 11, 294, 300, 9540, 50858], "temperature": 0.0, "avg_logprob": -0.17987147832320907, "compression_ratio": 1.625925925925926, "no_speech_prob": 0.04847792536020279}, {"id": 251, "seek": 107552, "start": 1085.4, "end": 1087.2, "text": " order by the deck.", "tokens": [50858, 1668, 538, 264, 9341, 13, 50948], "temperature": 0.0, "avg_logprob": -0.17987147832320907, "compression_ratio": 1.625925925925926, "no_speech_prob": 0.04847792536020279}, {"id": 252, "seek": 107552, "start": 1087.2, "end": 1090.6399999999999, "text": " It also means that you can't have cyclical dependencies.", "tokens": [50948, 467, 611, 1355, 300, 291, 393, 380, 362, 19474, 804, 36606, 13, 51120], "temperature": 0.0, "avg_logprob": -0.17987147832320907, "compression_ratio": 1.625925925925926, "no_speech_prob": 0.04847792536020279}, {"id": 253, "seek": 107552, "start": 1090.6399999999999, "end": 1092.4, "text": " That's, that's a no, no.", "tokens": [51120, 663, 311, 11, 300, 311, 257, 572, 11, 572, 13, 51208], "temperature": 0.0, "avg_logprob": -0.17987147832320907, "compression_ratio": 1.625925925925926, "no_speech_prob": 0.04847792536020279}, {"id": 254, "seek": 107552, "start": 1092.4, "end": 1098.32, "text": " So it's a good reason to remove those from your code as well.", "tokens": [51208, 407, 309, 311, 257, 665, 1778, 281, 4159, 729, 490, 428, 3089, 382, 731, 13, 51504], "temperature": 0.0, "avg_logprob": -0.17987147832320907, "compression_ratio": 1.625925925925926, "no_speech_prob": 0.04847792536020279}, {"id": 255, "seek": 107552, "start": 1098.32, "end": 1105.5, "text": " So I would like to share with you in case you want to try this, try dependency injection.", "tokens": [51504, 407, 286, 576, 411, 281, 2073, 365, 291, 294, 1389, 291, 528, 281, 853, 341, 11, 853, 33621, 22873, 13, 51863], "temperature": 0.0, "avg_logprob": -0.17987147832320907, "compression_ratio": 1.625925925925926, "no_speech_prob": 0.04847792536020279}, {"id": 256, "seek": 110550, "start": 1105.5, "end": 1111.18, "text": " Some tips, tricks and lessons we learned because there are, there's a good way to do this and", "tokens": [50364, 2188, 6082, 11, 11733, 293, 8820, 321, 3264, 570, 456, 366, 11, 456, 311, 257, 665, 636, 281, 360, 341, 293, 50648], "temperature": 0.0, "avg_logprob": -0.17348946224559436, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.02846439741551876}, {"id": 257, "seek": 110550, "start": 1111.18, "end": 1114.9, "text": " there's definitely also bad ways to do this.", "tokens": [50648, 456, 311, 2138, 611, 1578, 2098, 281, 360, 341, 13, 50834], "temperature": 0.0, "avg_logprob": -0.17348946224559436, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.02846439741551876}, {"id": 258, "seek": 110550, "start": 1114.9, "end": 1120.06, "text": " So inject, but in moderation.", "tokens": [50834, 407, 10711, 11, 457, 294, 49471, 13, 51092], "temperature": 0.0, "avg_logprob": -0.17348946224559436, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.02846439741551876}, {"id": 259, "seek": 110550, "start": 1120.06, "end": 1123.46, "text": " So not everything has to be a component.", "tokens": [51092, 407, 406, 1203, 575, 281, 312, 257, 6542, 13, 51262], "temperature": 0.0, "avg_logprob": -0.17348946224559436, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.02846439741551876}, {"id": 260, "seek": 110550, "start": 1123.46, "end": 1126.42, "text": " For example, math libraries are stateless.", "tokens": [51262, 1171, 1365, 11, 5221, 15148, 366, 2219, 4272, 13, 51410], "temperature": 0.0, "avg_logprob": -0.17348946224559436, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.02846439741551876}, {"id": 261, "seek": 110550, "start": 1126.42, "end": 1131.42, "text": " There's no reason why you would make that a component as like a dependency in this system", "tokens": [51410, 821, 311, 572, 1778, 983, 291, 576, 652, 300, 257, 6542, 382, 411, 257, 33621, 294, 341, 1185, 51660], "temperature": 0.0, "avg_logprob": -0.17348946224559436, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.02846439741551876}, {"id": 262, "seek": 113142, "start": 1131.42, "end": 1138.26, "text": " because you can just, you can just use them and they are pure functions, etc.", "tokens": [50364, 570, 291, 393, 445, 11, 291, 393, 445, 764, 552, 293, 436, 366, 6075, 6828, 11, 5183, 13, 50706], "temperature": 0.0, "avg_logprob": -0.16889406686805816, "compression_ratio": 1.6243386243386244, "no_speech_prob": 0.004051905125379562}, {"id": 263, "seek": 113142, "start": 1138.26, "end": 1145.46, "text": " So my rule of thumb is if it has states, make it, make it a dependency because then you", "tokens": [50706, 407, 452, 4978, 295, 9298, 307, 498, 309, 575, 4368, 11, 652, 309, 11, 652, 309, 257, 33621, 570, 550, 291, 51066], "temperature": 0.0, "avg_logprob": -0.16889406686805816, "compression_ratio": 1.6243386243386244, "no_speech_prob": 0.004051905125379562}, {"id": 264, "seek": 113142, "start": 1145.46, "end": 1148.52, "text": " benefit from all of the state specific things.", "tokens": [51066, 5121, 490, 439, 295, 264, 1785, 2685, 721, 13, 51219], "temperature": 0.0, "avg_logprob": -0.16889406686805816, "compression_ratio": 1.6243386243386244, "no_speech_prob": 0.004051905125379562}, {"id": 265, "seek": 113142, "start": 1148.52, "end": 1153.42, "text": " But if you have libraries that don't use state, please don't make it harder than it has to", "tokens": [51219, 583, 498, 291, 362, 15148, 300, 500, 380, 764, 1785, 11, 1767, 500, 380, 652, 309, 6081, 813, 309, 575, 281, 51464], "temperature": 0.0, "avg_logprob": -0.16889406686805816, "compression_ratio": 1.6243386243386244, "no_speech_prob": 0.004051905125379562}, {"id": 266, "seek": 113142, "start": 1153.42, "end": 1154.7, "text": " be.", "tokens": [51464, 312, 13, 51528], "temperature": 0.0, "avg_logprob": -0.16889406686805816, "compression_ratio": 1.6243386243386244, "no_speech_prob": 0.004051905125379562}, {"id": 267, "seek": 115470, "start": 1154.7, "end": 1162.06, "text": " And also a note of inject, but in moderation is that we saw that doing dependency injection", "tokens": [50364, 400, 611, 257, 3637, 295, 10711, 11, 457, 294, 49471, 307, 300, 321, 1866, 300, 884, 33621, 22873, 50732], "temperature": 0.0, "avg_logprob": -0.16594345429364374, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.040262192487716675}, {"id": 268, "seek": 115470, "start": 1162.06, "end": 1167.18, "text": " adds a lot of boilerplate, which is worth it in very, very big applications or even", "tokens": [50732, 10860, 257, 688, 295, 39228, 37008, 11, 597, 307, 3163, 309, 294, 588, 11, 588, 955, 5821, 420, 754, 50988], "temperature": 0.0, "avg_logprob": -0.16594345429364374, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.040262192487716675}, {"id": 269, "seek": 115470, "start": 1167.18, "end": 1169.42, "text": " moderate applications, I would say.", "tokens": [50988, 18174, 5821, 11, 286, 576, 584, 13, 51100], "temperature": 0.0, "avg_logprob": -0.16594345429364374, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.040262192487716675}, {"id": 270, "seek": 115470, "start": 1169.42, "end": 1176.5, "text": " But it's likely not for your small CLI tool or whatever.", "tokens": [51100, 583, 309, 311, 3700, 406, 337, 428, 1359, 12855, 40, 2290, 420, 2035, 13, 51454], "temperature": 0.0, "avg_logprob": -0.16594345429364374, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.040262192487716675}, {"id": 271, "seek": 117650, "start": 1176.5, "end": 1185.54, "text": " So pick, this is really a technique for medium to larger projects.", "tokens": [50364, 407, 1888, 11, 341, 307, 534, 257, 6532, 337, 6399, 281, 4833, 4455, 13, 50816], "temperature": 0.0, "avg_logprob": -0.15763929825794848, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.28418347239494324}, {"id": 272, "seek": 117650, "start": 1185.54, "end": 1187.74, "text": " When you do this, pick logical boundaries.", "tokens": [50816, 1133, 291, 360, 341, 11, 1888, 14978, 13180, 13, 50926], "temperature": 0.0, "avg_logprob": -0.15763929825794848, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.28418347239494324}, {"id": 273, "seek": 117650, "start": 1187.74, "end": 1194.1, "text": " So we, for example, we started and then made 20 cells within the same package and then", "tokens": [50926, 407, 321, 11, 337, 1365, 11, 321, 1409, 293, 550, 1027, 945, 5438, 1951, 264, 912, 7372, 293, 550, 51244], "temperature": 0.0, "avg_logprob": -0.15763929825794848, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.28418347239494324}, {"id": 274, "seek": 117650, "start": 1194.1, "end": 1199.62, "text": " no one outside the package actually ended up using those cells, which is massive amounts", "tokens": [51244, 572, 472, 2380, 264, 7372, 767, 4590, 493, 1228, 729, 5438, 11, 597, 307, 5994, 11663, 51520], "temperature": 0.0, "avg_logprob": -0.15763929825794848, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.28418347239494324}, {"id": 275, "seek": 117650, "start": 1199.62, "end": 1202.66, "text": " of complexity and overhead is just not necessary.", "tokens": [51520, 295, 14024, 293, 19922, 307, 445, 406, 4818, 13, 51672], "temperature": 0.0, "avg_logprob": -0.15763929825794848, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.28418347239494324}, {"id": 276, "seek": 120266, "start": 1202.66, "end": 1211.94, "text": " In my experience using packages as logical boundaries for these components is the best", "tokens": [50364, 682, 452, 1752, 1228, 17401, 382, 14978, 13180, 337, 613, 6677, 307, 264, 1151, 50828], "temperature": 0.0, "avg_logprob": -0.17921485900878906, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.06128264591097832}, {"id": 277, "seek": 120266, "start": 1211.94, "end": 1216.42, "text": " thing to do because you can also leverage what types I export, which type, because you", "tokens": [50828, 551, 281, 360, 570, 291, 393, 611, 13982, 437, 3467, 286, 10725, 11, 597, 2010, 11, 570, 291, 51052], "temperature": 0.0, "avg_logprob": -0.17921485900878906, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.06128264591097832}, {"id": 278, "seek": 120266, "start": 1216.42, "end": 1221.94, "text": " can export, you can provide something and not export that type, for example, and then only", "tokens": [51052, 393, 10725, 11, 291, 393, 2893, 746, 293, 406, 10725, 300, 2010, 11, 337, 1365, 11, 293, 550, 787, 51328], "temperature": 0.0, "avg_logprob": -0.17921485900878906, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.06128264591097832}, {"id": 279, "seek": 120266, "start": 1221.94, "end": 1225.5400000000002, "text": " export an interface that matches it or whatever.", "tokens": [51328, 10725, 364, 9226, 300, 10676, 309, 420, 2035, 13, 51508], "temperature": 0.0, "avg_logprob": -0.17921485900878906, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.06128264591097832}, {"id": 280, "seek": 120266, "start": 1225.5400000000002, "end": 1231.6200000000001, "text": " So that's a really powerful combination.", "tokens": [51508, 407, 300, 311, 257, 534, 4005, 6562, 13, 51812], "temperature": 0.0, "avg_logprob": -0.17921485900878906, "compression_ratio": 1.6619718309859155, "no_speech_prob": 0.06128264591097832}, {"id": 281, "seek": 123162, "start": 1231.62, "end": 1236.6599999999999, "text": " So and the last thing to note is that one of the other features that I wasn't able to", "tokens": [50364, 407, 293, 264, 1036, 551, 281, 3637, 307, 300, 472, 295, 264, 661, 4122, 300, 286, 2067, 380, 1075, 281, 50616], "temperature": 0.0, "avg_logprob": -0.1313188487085803, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.028802812099456787}, {"id": 282, "seek": 123162, "start": 1236.6599999999999, "end": 1240.6999999999998, "text": " show you because of time constraints is FX options.", "tokens": [50616, 855, 291, 570, 295, 565, 18491, 307, 37849, 3956, 13, 50818], "temperature": 0.0, "avg_logprob": -0.1313188487085803, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.028802812099456787}, {"id": 283, "seek": 123162, "start": 1240.6999999999998, "end": 1247.6999999999998, "text": " So FX options is really cool because it allows you to basically take multiple of these components", "tokens": [50818, 407, 37849, 3956, 307, 534, 1627, 570, 309, 4045, 291, 281, 1936, 747, 3866, 295, 613, 6677, 51168], "temperature": 0.0, "avg_logprob": -0.1313188487085803, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.028802812099456787}, {"id": 284, "seek": 123162, "start": 1247.6999999999998, "end": 1250.3799999999999, "text": " and bundle them under a single variable.", "tokens": [51168, 293, 24438, 552, 833, 257, 2167, 7006, 13, 51302], "temperature": 0.0, "avg_logprob": -0.1313188487085803, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.028802812099456787}, {"id": 285, "seek": 123162, "start": 1250.3799999999999, "end": 1261.54, "text": " So while global variables are big no-no's when doing this, you can still use them or", "tokens": [51302, 407, 1339, 4338, 9102, 366, 955, 572, 12, 1771, 311, 562, 884, 341, 11, 291, 393, 920, 764, 552, 420, 51860], "temperature": 0.0, "avg_logprob": -0.1313188487085803, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.028802812099456787}, {"id": 286, "seek": 126154, "start": 1262.02, "end": 1269.8999999999999, "text": " you can use a variable, global variable on your package to export these constructors.", "tokens": [50388, 291, 393, 764, 257, 7006, 11, 4338, 7006, 322, 428, 7372, 281, 10725, 613, 7690, 830, 13, 50782], "temperature": 0.0, "avg_logprob": -0.19231173968074297, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.021994641050696373}, {"id": 287, "seek": 126154, "start": 1269.8999999999999, "end": 1273.3799999999999, "text": " And the nice thing there is you can make a sort of hierarchy.", "tokens": [50782, 400, 264, 1481, 551, 456, 307, 291, 393, 652, 257, 1333, 295, 22333, 13, 50956], "temperature": 0.0, "avg_logprob": -0.19231173968074297, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.021994641050696373}, {"id": 288, "seek": 126154, "start": 1273.3799999999999, "end": 1277.82, "text": " So if you have a package hierarchy that's three layers deep, you can basically reflect", "tokens": [50956, 407, 498, 291, 362, 257, 7372, 22333, 300, 311, 1045, 7914, 2452, 11, 291, 393, 1936, 5031, 51178], "temperature": 0.0, "avg_logprob": -0.19231173968074297, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.021994641050696373}, {"id": 289, "seek": 126154, "start": 1277.82, "end": 1278.82, "text": " that.", "tokens": [51178, 300, 13, 51228], "temperature": 0.0, "avg_logprob": -0.19231173968074297, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.021994641050696373}, {"id": 290, "seek": 126154, "start": 1278.82, "end": 1284.02, "text": " So in your main application you don't have to list 200 constructors all separately.", "tokens": [51228, 407, 294, 428, 2135, 3861, 291, 500, 380, 362, 281, 1329, 2331, 7690, 830, 439, 14759, 13, 51488], "temperature": 0.0, "avg_logprob": -0.19231173968074297, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.021994641050696373}, {"id": 291, "seek": 126154, "start": 1284.02, "end": 1290.54, "text": " So that also really helps with readability, seeing where what is provided and so on.", "tokens": [51488, 407, 300, 611, 534, 3665, 365, 1401, 2310, 11, 2577, 689, 437, 307, 5649, 293, 370, 322, 13, 51814], "temperature": 0.0, "avg_logprob": -0.19231173968074297, "compression_ratio": 1.6900826446280992, "no_speech_prob": 0.021994641050696373}, {"id": 292, "seek": 129054, "start": 1290.74, "end": 1294.86, "text": " Provide targeted interfaces.", "tokens": [50374, 15685, 482, 15045, 28416, 13, 50580], "temperature": 0.0, "avg_logprob": -0.22246898923601424, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.005285634193569422}, {"id": 293, "seek": 129054, "start": 1294.86, "end": 1298.46, "text": " So go idioms still apply.", "tokens": [50580, 407, 352, 18014, 4785, 920, 3079, 13, 50760], "temperature": 0.0, "avg_logprob": -0.22246898923601424, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.005285634193569422}, {"id": 294, "seek": 129054, "start": 1298.46, "end": 1304.06, "text": " The smaller your interface is, the more powerful it is, the better you can swap it out.", "tokens": [50760, 440, 4356, 428, 9226, 307, 11, 264, 544, 4005, 309, 307, 11, 264, 1101, 291, 393, 18135, 309, 484, 13, 51040], "temperature": 0.0, "avg_logprob": -0.22246898923601424, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.005285634193569422}, {"id": 295, "seek": 129054, "start": 1304.06, "end": 1310.34, "text": " So when I provide a very small interface or when I depend on the smallest interfaces", "tokens": [51040, 407, 562, 286, 2893, 257, 588, 1359, 9226, 420, 562, 286, 5672, 322, 264, 16998, 28416, 51354], "temperature": 0.0, "avg_logprob": -0.22246898923601424, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.005285634193569422}, {"id": 296, "seek": 129054, "start": 1310.34, "end": 1316.22, "text": " I can, and it's really easy for me to mock out in my test, create a new FX app, only", "tokens": [51354, 286, 393, 11, 293, 309, 311, 534, 1858, 337, 385, 281, 17362, 484, 294, 452, 1500, 11, 1884, 257, 777, 37849, 724, 11, 787, 51648], "temperature": 0.0, "avg_logprob": -0.22246898923601424, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.005285634193569422}, {"id": 297, "seek": 131622, "start": 1316.22, "end": 1320.98, "text": " provide the direct dependencies which are interfaces which I can then mock out and", "tokens": [50364, 2893, 264, 2047, 36606, 597, 366, 28416, 597, 286, 393, 550, 17362, 484, 293, 50602], "temperature": 0.0, "avg_logprob": -0.2018226159585489, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.007643474265933037}, {"id": 298, "seek": 131622, "start": 1320.98, "end": 1323.3, "text": " it makes everything really nice.", "tokens": [50602, 309, 1669, 1203, 534, 1481, 13, 50718], "temperature": 0.0, "avg_logprob": -0.2018226159585489, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.007643474265933037}, {"id": 299, "seek": 131622, "start": 1323.3, "end": 1329.38, "text": " So this is general advice, not for dependency injection but like it goes hand in hand.", "tokens": [50718, 407, 341, 307, 2674, 5192, 11, 406, 337, 33621, 22873, 457, 411, 309, 1709, 1011, 294, 1011, 13, 51022], "temperature": 0.0, "avg_logprob": -0.2018226159585489, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.007643474265933037}, {"id": 300, "seek": 131622, "start": 1329.38, "end": 1334.54, "text": " If you have dependency injection and don't do this then it takes away a lot of the benefits", "tokens": [51022, 759, 291, 362, 33621, 22873, 293, 500, 380, 360, 341, 550, 309, 2516, 1314, 257, 688, 295, 264, 5311, 51280], "temperature": 0.0, "avg_logprob": -0.2018226159585489, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.007643474265933037}, {"id": 301, "seek": 131622, "start": 1334.54, "end": 1340.06, "text": " you would otherwise get.", "tokens": [51280, 291, 576, 5911, 483, 13, 51556], "temperature": 0.0, "avg_logprob": -0.2018226159585489, "compression_ratio": 1.619289340101523, "no_speech_prob": 0.007643474265933037}, {"id": 302, "seek": 134006, "start": 1340.06, "end": 1347.06, "text": " So it also makes it easy to rely on external, for external components to not rely on internal", "tokens": [50364, 407, 309, 611, 1669, 309, 1858, 281, 10687, 322, 8320, 11, 337, 8320, 6677, 281, 406, 10687, 322, 6920, 50714], "temperature": 0.0, "avg_logprob": -0.19729608297348022, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.3329453766345978}, {"id": 303, "seek": 134006, "start": 1347.06, "end": 1348.7, "text": " implementation.", "tokens": [50714, 11420, 13, 50796], "temperature": 0.0, "avg_logprob": -0.19729608297348022, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.3329453766345978}, {"id": 304, "seek": 134006, "start": 1348.7, "end": 1355.8999999999999, "text": " So when I export something or when I provide a component I always try to provide it as", "tokens": [50796, 407, 562, 286, 10725, 746, 420, 562, 286, 2893, 257, 6542, 286, 1009, 853, 281, 2893, 309, 382, 51156], "temperature": 0.0, "avg_logprob": -0.19729608297348022, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.3329453766345978}, {"id": 305, "seek": 134006, "start": 1355.8999999999999, "end": 1358.46, "text": " an interface as well.", "tokens": [51156, 364, 9226, 382, 731, 13, 51284], "temperature": 0.0, "avg_logprob": -0.19729608297348022, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.3329453766345978}, {"id": 306, "seek": 134006, "start": 1358.46, "end": 1361.62, "text": " And the last thing which is more of a trick is you can actually, if you for example have", "tokens": [51284, 400, 264, 1036, 551, 597, 307, 544, 295, 257, 4282, 307, 291, 393, 767, 11, 498, 291, 337, 1365, 362, 51442], "temperature": 0.0, "avg_logprob": -0.19729608297348022, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.3329453766345978}, {"id": 307, "seek": 134006, "start": 1361.62, "end": 1367.22, "text": " a struct, that struct can implement multiple, so instead of having one interface that implements", "tokens": [51442, 257, 6594, 11, 300, 6594, 393, 4445, 3866, 11, 370, 2602, 295, 1419, 472, 9226, 300, 704, 17988, 51722], "temperature": 0.0, "avg_logprob": -0.19729608297348022, "compression_ratio": 1.811659192825112, "no_speech_prob": 0.3329453766345978}, {"id": 308, "seek": 136722, "start": 1367.22, "end": 1377.78, "text": " three methods I can provide it as three separate interfaces that implement three separate methods.", "tokens": [50364, 1045, 7150, 286, 393, 2893, 309, 382, 1045, 4994, 28416, 300, 4445, 1045, 4994, 7150, 13, 50892], "temperature": 0.0, "avg_logprob": -0.19625476149261975, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.268604576587677}, {"id": 309, "seek": 136722, "start": 1377.78, "end": 1384.1000000000001, "text": " And that way you can, you have both on the receiving and the sending side of your dependency,", "tokens": [50892, 400, 300, 636, 291, 393, 11, 291, 362, 1293, 322, 264, 10040, 293, 264, 7750, 1252, 295, 428, 33621, 11, 51208], "temperature": 0.0, "avg_logprob": -0.19625476149261975, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.268604576587677}, {"id": 310, "seek": 136722, "start": 1384.1000000000001, "end": 1391.34, "text": " you have the smallest possible interface again to help with mocking out but also so if you", "tokens": [51208, 291, 362, 264, 16998, 1944, 9226, 797, 281, 854, 365, 49792, 484, 457, 611, 370, 498, 291, 51570], "temperature": 0.0, "avg_logprob": -0.19625476149261975, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.268604576587677}, {"id": 311, "seek": 139134, "start": 1391.34, "end": 1398.26, "text": " don't use certain methods that you don't have to like write fake methods that panic", "tokens": [50364, 500, 380, 764, 1629, 7150, 300, 291, 500, 380, 362, 281, 411, 2464, 7592, 7150, 300, 14783, 50710], "temperature": 0.0, "avg_logprob": -0.13805235248722442, "compression_ratio": 1.6298342541436464, "no_speech_prob": 0.12312562763690948}, {"id": 312, "seek": 139134, "start": 1398.26, "end": 1402.54, "text": " if you were to call them etc.", "tokens": [50710, 498, 291, 645, 281, 818, 552, 5183, 13, 50924], "temperature": 0.0, "avg_logprob": -0.13805235248722442, "compression_ratio": 1.6298342541436464, "no_speech_prob": 0.12312562763690948}, {"id": 313, "seek": 139134, "start": 1402.54, "end": 1407.62, "text": " I mentioned groups and they are really powerful but go easy on them.", "tokens": [50924, 286, 2835, 3935, 293, 436, 366, 534, 4005, 457, 352, 1858, 322, 552, 13, 51178], "temperature": 0.0, "avg_logprob": -0.13805235248722442, "compression_ratio": 1.6298342541436464, "no_speech_prob": 0.12312562763690948}, {"id": 314, "seek": 139134, "start": 1407.62, "end": 1413.54, "text": " Groups are really only ever useful if you have multiple parties that are interested in the", "tokens": [51178, 10500, 82, 366, 534, 787, 1562, 4420, 498, 291, 362, 3866, 8265, 300, 366, 3102, 294, 264, 51474], "temperature": 0.0, "avg_logprob": -0.13805235248722442, "compression_ratio": 1.6298342541436464, "no_speech_prob": 0.12312562763690948}, {"id": 315, "seek": 139134, "start": 1413.54, "end": 1417.26, "text": " same list of objects.", "tokens": [51474, 912, 1329, 295, 6565, 13, 51660], "temperature": 0.0, "avg_logprob": -0.13805235248722442, "compression_ratio": 1.6298342541436464, "no_speech_prob": 0.12312562763690948}, {"id": 316, "seek": 141726, "start": 1417.26, "end": 1423.54, "text": " So for example we have metrics, so we have a Permetheus metrics registry which collects", "tokens": [50364, 407, 337, 1365, 321, 362, 16367, 11, 370, 321, 362, 257, 3026, 5537, 42209, 16367, 36468, 597, 39897, 50678], "temperature": 0.0, "avg_logprob": -0.23407363891601562, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.02377009391784668}, {"id": 317, "seek": 141726, "start": 1423.54, "end": 1426.34, "text": " all of the metrics to actually use them.", "tokens": [50678, 439, 295, 264, 16367, 281, 767, 764, 552, 13, 50818], "temperature": 0.0, "avg_logprob": -0.23407363891601562, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.02377009391784668}, {"id": 318, "seek": 141726, "start": 1426.34, "end": 1432.02, "text": " But we also have tooling that automatically generates documentation about these metrics", "tokens": [50818, 583, 321, 611, 362, 46593, 300, 6772, 23815, 14333, 466, 613, 16367, 51102], "temperature": 0.0, "avg_logprob": -0.23407363891601562, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.02377009391784668}, {"id": 319, "seek": 141726, "start": 1432.02, "end": 1438.02, "text": " and I can write a very small CLI tool that basically just with one component that depends", "tokens": [51102, 293, 286, 393, 2464, 257, 588, 1359, 12855, 40, 2290, 300, 1936, 445, 365, 472, 6542, 300, 5946, 51402], "temperature": 0.0, "avg_logprob": -0.23407363891601562, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.02377009391784668}, {"id": 320, "seek": 141726, "start": 1438.02, "end": 1444.26, "text": " on all hooks or all metrics that we have defined in our application and I collect all of them", "tokens": [51402, 322, 439, 26485, 420, 439, 16367, 300, 321, 362, 7642, 294, 527, 3861, 293, 286, 2500, 439, 295, 552, 51714], "temperature": 0.0, "avg_logprob": -0.23407363891601562, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.02377009391784668}, {"id": 321, "seek": 144426, "start": 1444.26, "end": 1450.58, "text": " automatically and everyone who uses who registers a new metric it automatically appears in this", "tokens": [50364, 6772, 293, 1518, 567, 4960, 567, 38351, 257, 777, 20678, 309, 6772, 7038, 294, 341, 50680], "temperature": 0.0, "avg_logprob": -0.21137147926422487, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.04510875418782234}, {"id": 322, "seek": 144426, "start": 1450.58, "end": 1451.58, "text": " metrics tool.", "tokens": [50680, 16367, 2290, 13, 50730], "temperature": 0.0, "avg_logprob": -0.21137147926422487, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.04510875418782234}, {"id": 323, "seek": 144426, "start": 1451.58, "end": 1455.9, "text": " So it's really great and the same goes for our configuration HTTP elements which will", "tokens": [50730, 407, 309, 311, 534, 869, 293, 264, 912, 1709, 337, 527, 11694, 33283, 4959, 597, 486, 50946], "temperature": 0.0, "avg_logprob": -0.21137147926422487, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.04510875418782234}, {"id": 324, "seek": 144426, "start": 1455.9, "end": 1462.78, "text": " also have configuration for or sometimes CLI tools which live want to interact with the", "tokens": [50946, 611, 362, 11694, 337, 420, 2171, 12855, 40, 3873, 597, 1621, 528, 281, 4648, 365, 264, 51290], "temperature": 0.0, "avg_logprob": -0.21137147926422487, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.04510875418782234}, {"id": 325, "seek": 144426, "start": 1462.78, "end": 1466.14, "text": " same things.", "tokens": [51290, 912, 721, 13, 51458], "temperature": 0.0, "avg_logprob": -0.21137147926422487, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.04510875418782234}, {"id": 326, "seek": 144426, "start": 1466.14, "end": 1472.58, "text": " The alternative to using groups is to just use like a registry pattern where you say", "tokens": [51458, 440, 8535, 281, 1228, 3935, 307, 281, 445, 764, 411, 257, 36468, 5102, 689, 291, 584, 51780], "temperature": 0.0, "avg_logprob": -0.21137147926422487, "compression_ratio": 1.6493506493506493, "no_speech_prob": 0.04510875418782234}, {"id": 327, "seek": 147258, "start": 1473.02, "end": 1478.02, "text": " I provide a registry, it just has a registry pattern and everyone else, so if I have 20", "tokens": [50386, 286, 2893, 257, 36468, 11, 309, 445, 575, 257, 36468, 5102, 293, 1518, 1646, 11, 370, 498, 286, 362, 945, 50636], "temperature": 0.0, "avg_logprob": -0.3403259913126628, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.04383983835577965}, {"id": 328, "seek": 147258, "start": 1478.02, "end": 1482.4199999999998, "text": " other components I can depend on that and I can register myself during construction", "tokens": [50636, 661, 6677, 286, 393, 5672, 322, 300, 293, 286, 393, 7280, 2059, 1830, 6435, 50856], "temperature": 0.0, "avg_logprob": -0.3403259913126628, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.04383983835577965}, {"id": 329, "seek": 147258, "start": 1482.4199999999998, "end": 1484.54, "text": " time.", "tokens": [50856, 565, 13, 50962], "temperature": 0.0, "avg_logprob": -0.3403259913126628, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.04383983835577965}, {"id": 330, "seek": 147258, "start": 1484.54, "end": 1491.1799999999998, "text": " And the upside of doing that is that you can, like if you use FreeScope for example or any", "tokens": [50962, 400, 264, 14119, 295, 884, 300, 307, 300, 291, 393, 11, 411, 498, 291, 764, 11551, 50, 13960, 337, 1365, 420, 604, 51294], "temperature": 0.0, "avg_logprob": -0.3403259913126628, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.04383983835577965}, {"id": 331, "seek": 147258, "start": 1491.1799999999998, "end": 1494.62, "text": " decent editor is that you can follow those traces back.", "tokens": [51294, 8681, 9839, 307, 300, 291, 393, 1524, 729, 26076, 646, 13, 51466], "temperature": 0.0, "avg_logprob": -0.3403259913126628, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.04383983835577965}, {"id": 332, "seek": 147258, "start": 1494.62, "end": 1499.3, "text": " So you can always use references to see who actually uses what.", "tokens": [51466, 407, 291, 393, 1009, 764, 15400, 281, 536, 567, 767, 4960, 437, 13, 51700], "temperature": 0.0, "avg_logprob": -0.3403259913126628, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.04383983835577965}, {"id": 333, "seek": 149930, "start": 1499.4199999999998, "end": 1502.74, "text": " With groups it's all magic.", "tokens": [50370, 2022, 3935, 309, 311, 439, 5585, 13, 50536], "temperature": 0.0, "avg_logprob": -0.2844628463556737, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.010797897353768349}, {"id": 334, "seek": 149930, "start": 1502.74, "end": 1506.78, "text": " Something everything goes into this group and it comes out but it's not clear.", "tokens": [50536, 6595, 1203, 1709, 666, 341, 1594, 293, 309, 1487, 484, 457, 309, 311, 406, 1850, 13, 50738], "temperature": 0.0, "avg_logprob": -0.2844628463556737, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.010797897353768349}, {"id": 335, "seek": 149930, "start": 1506.78, "end": 1512.78, "text": " You can't trace that back in the code itself without having difficulties.", "tokens": [50738, 509, 393, 380, 13508, 300, 646, 294, 264, 3089, 2564, 1553, 1419, 14399, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2844628463556737, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.010797897353768349}, {"id": 336, "seek": 149930, "start": 1516.26, "end": 1518.82, "text": " Stay with a static graph when possible.", "tokens": [51212, 8691, 365, 257, 13437, 4295, 562, 1944, 13, 51340], "temperature": 0.0, "avg_logprob": -0.2844628463556737, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.010797897353768349}, {"id": 337, "seek": 149930, "start": 1518.82, "end": 1524.1399999999999, "text": " So you can, with this FX application you can in theory like depending on configuration", "tokens": [51340, 407, 291, 393, 11, 365, 341, 37849, 3861, 291, 393, 294, 5261, 411, 5413, 322, 11694, 51606], "temperature": 0.0, "avg_logprob": -0.2844628463556737, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.010797897353768349}, {"id": 338, "seek": 149930, "start": 1524.1399999999999, "end": 1528.94, "text": " provide or not provide components.", "tokens": [51606, 2893, 420, 406, 2893, 6677, 13, 51846], "temperature": 0.0, "avg_logprob": -0.2844628463556737, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.010797897353768349}, {"id": 339, "seek": 152894, "start": 1528.98, "end": 1535.98, "text": " We have opted in Cilium to never do this because it makes it completely impossible to verify", "tokens": [50366, 492, 362, 40768, 294, 383, 388, 2197, 281, 1128, 360, 341, 570, 309, 1669, 309, 2584, 6243, 281, 16888, 50716], "temperature": 0.0, "avg_logprob": -0.26564862569173175, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.006605918053537607}, {"id": 340, "seek": 152894, "start": 1537.18, "end": 1542.6200000000001, "text": " that you never have missing dependencies or other problems like circular, the references", "tokens": [50776, 300, 291, 1128, 362, 5361, 36606, 420, 661, 2740, 411, 16476, 11, 264, 15400, 51048], "temperature": 0.0, "avg_logprob": -0.26564862569173175, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.006605918053537607}, {"id": 341, "seek": 152894, "start": 1542.6200000000001, "end": 1546.7, "text": " and there are certain combinations.", "tokens": [51048, 293, 456, 366, 1629, 21267, 13, 51252], "temperature": 0.0, "avg_logprob": -0.26564862569173175, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.006605918053537607}, {"id": 342, "seek": 152894, "start": 1546.7, "end": 1553.02, "text": " The graphs are verified at runtime so you have to have a good CI to run everything, make", "tokens": [51252, 440, 24877, 366, 31197, 412, 34474, 370, 291, 362, 281, 362, 257, 665, 37777, 281, 1190, 1203, 11, 652, 51568], "temperature": 0.0, "avg_logprob": -0.26564862569173175, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.006605918053537607}, {"id": 343, "seek": 152894, "start": 1553.02, "end": 1556.5, "text": " sure that it works.", "tokens": [51568, 988, 300, 309, 1985, 13, 51742], "temperature": 0.0, "avg_logprob": -0.26564862569173175, "compression_ratio": 1.5377358490566038, "no_speech_prob": 0.006605918053537607}, {"id": 344, "seek": 155650, "start": 1556.54, "end": 1561.94, "text": " What you can do instead is use this life cycle and so you always have the objects but then", "tokens": [50366, 708, 291, 393, 360, 2602, 307, 764, 341, 993, 6586, 293, 370, 291, 1009, 362, 264, 6565, 457, 550, 50636], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 345, "seek": 155650, "start": 1561.94, "end": 1566.26, "text": " you can always choose if they do or do not subscribe to the life cycle and that way you", "tokens": [50636, 291, 393, 1009, 2826, 498, 436, 360, 420, 360, 406, 3022, 281, 264, 993, 6586, 293, 300, 636, 291, 50852], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 346, "seek": 155650, "start": 1566.26, "end": 1571.22, "text": " can enable or disable certain logic if you don't want to run it at that time but always", "tokens": [50852, 393, 9528, 420, 28362, 1629, 9952, 498, 291, 500, 380, 528, 281, 1190, 309, 412, 300, 565, 457, 1009, 51100], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 347, "seek": 155650, "start": 1571.22, "end": 1573.9, "text": " provide it.", "tokens": [51100, 2893, 309, 13, 51234], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 348, "seek": 155650, "start": 1573.9, "end": 1574.9, "text": " And that was it.", "tokens": [51234, 400, 300, 390, 309, 13, 51284], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 349, "seek": 155650, "start": 1574.9, "end": 1575.9, "text": " Thank you very much.", "tokens": [51284, 1044, 291, 588, 709, 13, 51334], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 350, "seek": 155650, "start": 1575.9, "end": 1576.9, "text": " Thank you.", "tokens": [51334, 1044, 291, 13, 51384], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 351, "seek": 155650, "start": 1576.9, "end": 1579.06, "text": " I have time for one question.", "tokens": [51384, 286, 362, 565, 337, 472, 1168, 13, 51492], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 352, "seek": 155650, "start": 1579.06, "end": 1583.7, "text": " I see a hand there.", "tokens": [51492, 286, 536, 257, 1011, 456, 13, 51724], "temperature": 0.0, "avg_logprob": -0.2322399211379717, "compression_ratio": 1.7699530516431925, "no_speech_prob": 0.04813706502318382}, {"id": 353, "seek": 158370, "start": 1583.9, "end": 1587.06, "text": " I'll quickly come over and hand to the microphone.", "tokens": [50374, 286, 603, 2661, 808, 670, 293, 1011, 281, 264, 10952, 13, 50532], "temperature": 0.0, "avg_logprob": -0.339674186706543, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.04191829264163971}, {"id": 354, "seek": 158370, "start": 1587.06, "end": 1592.78, "text": " If you are exiting already do it quietly please.", "tokens": [50532, 759, 291, 366, 48868, 1217, 360, 309, 19141, 1767, 13, 50818], "temperature": 0.0, "avg_logprob": -0.339674186706543, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.04191829264163971}, {"id": 355, "seek": 158370, "start": 1592.78, "end": 1598.98, "text": " What can you make choose, dig and FX instead of Google OIR which is more popular for example?", "tokens": [50818, 708, 393, 291, 652, 2826, 11, 2528, 293, 37849, 2602, 295, 3329, 422, 7740, 597, 307, 544, 3743, 337, 1365, 30, 51128], "temperature": 0.0, "avg_logprob": -0.339674186706543, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.04191829264163971}, {"id": 356, "seek": 158370, "start": 1598.98, "end": 1606.1000000000001, "text": " So like I mentioned, colleague of mine, Glyb, authored it so it was very, we were very quick", "tokens": [51128, 407, 411, 286, 2835, 11, 13532, 295, 3892, 11, 460, 356, 65, 11, 6979, 2769, 309, 370, 309, 390, 588, 11, 321, 645, 588, 1702, 51484], "temperature": 0.0, "avg_logprob": -0.339674186706543, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.04191829264163971}, {"id": 357, "seek": 158370, "start": 1606.1000000000001, "end": 1609.74, "text": " to jump on that one he suggested using the library.", "tokens": [51484, 281, 3012, 322, 300, 472, 415, 10945, 1228, 264, 6405, 13, 51666], "temperature": 0.0, "avg_logprob": -0.339674186706543, "compression_ratio": 1.4444444444444444, "no_speech_prob": 0.04191829264163971}, {"id": 358, "seek": 160974, "start": 1609.78, "end": 1616.7, "text": " So it's purely advertisements.", "tokens": [50366, 407, 309, 311, 17491, 42897, 13, 50712], "temperature": 0.0, "avg_logprob": -0.4812261179873818, "compression_ratio": 0.875, "no_speech_prob": 0.052117131650447845}, {"id": 359, "seek": 160974, "start": 1616.7, "end": 1617.7, "text": " Thank you.", "tokens": [50712, 1044, 291, 13, 50762], "temperature": 0.0, "avg_logprob": -0.4812261179873818, "compression_ratio": 0.875, "no_speech_prob": 0.052117131650447845}, {"id": 360, "seek": 160974, "start": 1617.7, "end": 1617.9, "text": " Any questions?", "tokens": [50762, 2639, 1651, 30, 50772], "temperature": 0.0, "avg_logprob": -0.4812261179873818, "compression_ratio": 0.875, "no_speech_prob": 0.052117131650447845}], "language": "en"}