{"text": " you . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . trusted firmware and then that in hand starts up your opti and finally it goes to the main new boot image which finally loads your Linux kernel. This is a very typical boot flow. This is what you see commonly but it's talking about one core right. When you think about it you're talking about one core but that's not the case with chips today. So what if you have multi core systems. So an example would be the Texas Instruments K3 architecture of devices and here you we have two cores running. So you have your 32 bit R5 core and your 64 bit A72 core. Now in this case we need two sets of SPLs right to get it going. So your as you can see I've inserted two SPLs in the boot flow and your R5 SPL will run first. Do the initial stuff and then it'll jump to ATF again to opti and then your Uboot SPL for your A72 core comes up and then finally you boot to Linux. So this is how it looks like. Now in this presentation in the interest of time I'll be talking about the A72 bootloader mainly not the R5. So yeah that's what I'll be talking about. So what do we need for the A72 bootloader? You'll need your ATF, you'll need your opti binary and you'll need DM firmware. DM is device management firmware. It's kind of like a TI version of ARM-SEP and then you'll have your SPL binary and then you'll find your device tree blob right. So let's say I want to make this position agnostic my final bootloader. So I can just append or prepend the fit header at the top so that the entire image is basically position agnostic. So that's what I've done over here and what about security? You obviously need security. So you have your X509 certificate appended to the top of each of your binary blobs. So basically it's signed all of the blobs inside are signed and this is what our final A72 bootloader binary looks like. So as you can see it's not very simple. I mean you can run it through a simple shell script and get your final output but it wouldn't be, it's not really the standard right. This is how we used to go about generating our final binary. So you can see I have U-boot. You basically give all the inputs. You give your opti or device manager firmware, your ATF and U-boot has custom scripts, a bunch of long shell scripts that used to you know tie up everything, sign everything, stitch it up into a final image. So this is what we used to go through. But in cases of higher security devices you'll need to have a core Secdev K3 which is an external TI maintained repository. And this is how we used to sign the images a few months back. Obviously there's a lot of issues with doing this. One is maintaining and scaling. It's a non-standard flow. It's for example let's say we already have more than four bootflows at present and extending it to all the bootflows you know where the binary will have to change. It gets difficult. Packaging gets difficult. And this is not the standard. It's not distro friendly. And there's no unit level testing. They're just shell scripts. You don't really, if it works it works. There's no test coverage there right. So these are the issues with the custom scripts. And this is a small snippet of the shell script that we used to use. So you can see unless I showed you the final image what it used to look like. I don't think you can gather much from this script. And you can see the highlighted ones are pointing to external scripts. So you have scripts within scripts and it's just a mess to get to know what your final image looks like. So yeah. Thank you. So just a little talk about Binman why I started writing this tool a while ago now. Packaging is actually much harder than we think. And you can see an example of that there. Some other things that go on. There are SOC specific tools that need to run. And as mentioned before there's different phases of the boot. And the image needs to contain code for all of those. It's also nice to be able to see what's actually in the image. And so this this bin man tool lets you look at an image and list it out. So the image is described as data. So rather than shell scripts or code or whatever you describe the structure of the image in a simple data format. This image has U boot and it has SPL. It has a size of one megabyte and it has some pad bytes. So that's basically how you start. Binman normally runs as part of the U boot build. So it's the final step after all the inputs have been created. You run it runs build man sorry bin man and produces a final image. But the nice thing is you can then use all those inputs and run it again separately maybe in a signing server or in some other step in production. So bin man also deals with missing blobs. It deals with tools that need to run and so on. And it can produce an image even you know even telling you that this image won't work but at least you're able to validate that you could get that far. Bin man consists of it works with a list of entries. Entries have a different type that you've seen the U boot ones and the SPL ones but there's loads of other ones as well. And they just packed one after the other. They normally can't overlap but it is possible in extreme cases if you want to do that. Bin man is written in Python. There's an entry based class. You then have an entry blob subclass of that if you like. You can see that in the middle of the screen and you can sort of extend it from there. So a blob is just basically an entry that has a blob of data in it. But you can make arbitrarily complex things that involve you know producing signatures and that sort of thing and it's fairly easy to do that. To add an entry type you basically put a new Python file in the right directory and give it a give it a class name and off you go. You can I mentioned you can run command line tools. It's actually possible to list out the tools that are available. If you don't have one you can do bin man tool minus F to fetch it and it will go and build it from source or find it in the binary or whatever it has to do to get the tools. So you don't have to go and hunt around for three days trying to find vendor tools. The code has a lot of comments. It has 100 test coverage. So it's very very strongly designed to to be reliable. That's it from me. Yeah so now you've seen how what bin man is and the rest of the presentation is going to show you how we switched rather migrated from what it used to be with shell scripts to using bin man. So this is what the final flow looked like. There's no external repository. There's no custom scripts. It's just a bin man device tree file that we've plumbed in along with the other inputs. So this is what it finally looked like. So as you can see just like the image on the right which is our target image. So you have a fit node within which each of the individual binary blobs that have to go in. So your a t f your opti or dm all of them are kind of packed in nicely. And you can see that ti secure is an entry type that we've created to mimic not mimic actually generate the x509 certificate that has to go on top. So it's being passed the contents. So the binary that it has to sign which is in this case the a t f binary and the key with which it has to sign the binary. So it's all nicely packed in and now you have a somewhat visual representation of what's going on and you can manipulate it easier easily. And yeah since I didn't get space. So this is the remaining of the two blobs that have to go in. So you can see there's a few things that you can notice from here. So one is yeah there's a custom entry type that we've defined and along with which there are standard entry types that we've used. For example opti and a t f their arm standards. So you can have the standard entry types defined as well. And it's already there in the bin man folder. And at the same time let's say you want to reuse the same device tree for building many different boards. And let's say each of the board is using a different address to load your a t f. And that's also easy to plumb into the bin man flow because it evaluates config options. So according to your build your config will change and yeah. So to kind of finish off we'll just quickly go through what the python class looks like for TI secure for the x509 certificate. So you have a special method of python in the beginning. So that's just there. And this would do the reading of the node. So you can use your FBT tools to go and grab the properties that you've mentioned in your device tree. And you can even add your own properties. That's also possible. So for example sha is the property that we are going and grabbing by default it's 512 if you haven't mentioned it. If you want to change the sha value you can give that property in the bin man node itself. And then this would be the method that you know is kind of important which is actually setting the contents of your entry. So in my case I've defined a get certificate function that actually goes and runs open SSL on the binary that you fetched and put that in the entry. So obtain contents is what is doing that. And in the case of for example you have a u boot SPL which contains the symbol to your u boot image that you want to jump to. So there's cases where you'll be writing symbols so your final image would change. So process contents runs after at the end of your build so that it'll go and update your binary essentially in your final image. And here's another last method that was used which open SSL is already a bin man tool. So it's already present there and like Simon mentioned all tools can be all CLI tools you can easily port to be run within bin man itself. So here you're just adding the open SSL tool since we'll be using it. Now we're kind of towards the end of the talk. Some of the developments that are ongoing is for example the bin man dt node is not part of the device tree specification as of now but Simon has been working on it and that's an ongoing work. Then the ability to pass custom firmware via the CLI argument. For example let's say I want to pass the dm firmware argument as an actual CLI argument instead of hard coding it in the bin man dtsi that's not supported as of now without making changes to the original u boot make file. So yeah that's also something that that is in the works and finally the x509 template that that is used to generate the final certificate that's in some ways kind of hard coded right now even though it's a very standard tool that should be generated on the fly. So that that is also something that's ongoing. Now there's a bunch of u boot boards that still use custom scripts today and they can all be ported towards using bin man which is the final aim of this presentation to get everyone to finally port and use bin man as the standard. So some of the references I've used mainly the u boot documentation Simon's talk at OSFC and my colleague Brian's bootloader presentation as well and you can also see the patch series that was used to port the entire k3 devices to using bin man. Yeah lastly I would like to credit the FOSTA organizers and Texas instruments and the u boot community that has actively been working on bin man. So yeah now we are open for questions. That's not really. So the question is how does bin man relate to make image the make image tool? The bin man calls the make image tool. Bin man can produce fit images as you probably saw you simply just write fit in there and you get one. So it's a lot more convenient. Make image has the SOC specific stuff. There's no plan to you know rip all that c code out and write in python and bin man. It's simply make images is sort of one of the tools if you like that bin man uses. It's actually already part of the r5 bootloader which is a little bit more complicated which is why we didn't cover that. The question was if you can kind of recursively sign the images so a signed image within a signed image and you can do that which is a part of the r5 bootloader. We'll be sharing the slides so you can have the r5 view as well so that it'll cover that. The images are actually hierarchical so if you want something you put it here if you want the data that comes that goes into that you put inside it and you can just keep going right. So that's one of the nice things I think it's the I can't remember what it's called Mesa or something that uses sign within signed and it's simply a case of putting it in the description. So I think you're talking about changing the key once the images. Yeah that is also possible. You want to take that? I don't know much more about that but yes you can. So the public key has to go in a prior stage but because you're producing a cohesive firmware image right where all the phases are essentially have to be there then yeah bin man can can stuff the key from one into you know that's used in the next phase into the prior stage firmware and that's obviously necessary. Yeah yeah. Yeah so if you look at the DM firmware right now that's an external blob. Oh the question is huh? So you have to mention the blobs that you so the question is whether we can include external binary blobs into the final image and whether we can use scripts to generate an image and then you know port that into the final bin man made image. So the first one is yeah you can reference external blobs like I've done here. So DM is a blob that's not in the flow so it'll go and pick that up as an external binary and in terms of scripts so UBOO does the first build and then basically you can mention the binaries that are dependent that that that have to be created before bin man can be run. So you can mention that so you can maybe run your script before that and get your binary ready and then bin man will just do the packing. So it'll only run once the input binaries are ready to go. So is this already upstream? Yeah this is already upstream. Yeah. Any other questions? Thank you very much. Thank you. you you you you you", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.06, "text": " you", "tokens": [50364, 291, 50467], "temperature": 0.0, "avg_logprob": -0.6917718648910522, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.943816602230072}, {"id": 1, "seek": 3000, "start": 30.0, "end": 50.0, "text": " .", "tokens": [50364, 2411, 51364], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 2, "seek": 3000, "start": 50.0, "end": 51.0, "text": " .", "tokens": [51364, 2411, 51414], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 3, "seek": 3000, "start": 51.0, "end": 52.0, "text": " .", "tokens": [51414, 2411, 51464], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 4, "seek": 3000, "start": 52.0, "end": 53.0, "text": " .", "tokens": [51464, 2411, 51514], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 5, "seek": 3000, "start": 53.0, "end": 54.0, "text": " .", "tokens": [51514, 2411, 51564], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 6, "seek": 3000, "start": 54.0, "end": 55.0, "text": " .", "tokens": [51564, 2411, 51614], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 7, "seek": 3000, "start": 55.0, "end": 56.0, "text": " .", "tokens": [51614, 2411, 51664], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 8, "seek": 3000, "start": 56.0, "end": 57.0, "text": " .", "tokens": [51664, 2411, 51714], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 9, "seek": 3000, "start": 57.0, "end": 58.0, "text": " .", "tokens": [51714, 2411, 51764], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 10, "seek": 3000, "start": 58.0, "end": 59.0, "text": " .", "tokens": [51764, 2411, 51814], "temperature": 0.0, "avg_logprob": -0.3210946321487427, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.3151043951511383}, {"id": 11, "seek": 5900, "start": 59.0, "end": 60.0, "text": " .", "tokens": [50364, 2411, 50414], "temperature": 0.0, "avg_logprob": -0.21935094892978668, "compression_ratio": 0.1111111111111111, "no_speech_prob": 0.4412701725959778}, {"id": 12, "seek": 8900, "start": 89.0, "end": 91.0, "text": " .", "tokens": [50414, 2411, 50464], "temperature": 0.0, "avg_logprob": -0.5214890241622925, "compression_ratio": 0.1111111111111111, "no_speech_prob": 0.7912863492965698}, {"id": 13, "seek": 11900, "start": 119.0, "end": 138.0, "text": " .", "tokens": [50364, 2411, 51314], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 14, "seek": 11900, "start": 138.0, "end": 139.0, "text": " .", "tokens": [51314, 2411, 51364], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 15, "seek": 11900, "start": 139.0, "end": 140.0, "text": " .", "tokens": [51364, 2411, 51414], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 16, "seek": 11900, "start": 140.0, "end": 141.0, "text": " .", "tokens": [51414, 2411, 51464], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 17, "seek": 11900, "start": 141.0, "end": 142.0, "text": " .", "tokens": [51464, 2411, 51514], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 18, "seek": 11900, "start": 142.0, "end": 143.0, "text": " .", "tokens": [51514, 2411, 51564], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 19, "seek": 11900, "start": 143.0, "end": 144.0, "text": " .", "tokens": [51564, 2411, 51614], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 20, "seek": 11900, "start": 144.0, "end": 145.0, "text": " .", "tokens": [51614, 2411, 51664], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 21, "seek": 11900, "start": 145.0, "end": 146.0, "text": " .", "tokens": [51664, 2411, 51714], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 22, "seek": 11900, "start": 146.0, "end": 147.0, "text": " .", "tokens": [51714, 2411, 51764], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 23, "seek": 11900, "start": 147.0, "end": 148.0, "text": " .", "tokens": [51764, 2411, 51814], "temperature": 0.0, "avg_logprob": -0.16070289611816407, "compression_ratio": 1.75, "no_speech_prob": 0.8603841662406921}, {"id": 24, "seek": 14800, "start": 148.0, "end": 149.0, "text": " .", "tokens": [50364, 2411, 50414], "temperature": 0.0, "avg_logprob": -0.44407767057418823, "compression_ratio": 0.1111111111111111, "no_speech_prob": 0.3980734348297119}, {"id": 25, "seek": 17800, "start": 178.0, "end": 185.0, "text": " .", "tokens": [50364, 2411, 50714], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 26, "seek": 17800, "start": 185.0, "end": 186.0, "text": " .", "tokens": [50714, 2411, 50764], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 27, "seek": 17800, "start": 186.0, "end": 187.0, "text": " .", "tokens": [50764, 2411, 50814], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 28, "seek": 17800, "start": 187.0, "end": 188.0, "text": " .", "tokens": [50814, 2411, 50864], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 29, "seek": 17800, "start": 188.0, "end": 189.0, "text": " .", "tokens": [50864, 2411, 50914], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 30, "seek": 17800, "start": 189.0, "end": 190.0, "text": " .", "tokens": [50914, 2411, 50964], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 31, "seek": 17800, "start": 190.0, "end": 191.0, "text": " .", "tokens": [50964, 2411, 51014], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 32, "seek": 17800, "start": 191.0, "end": 192.0, "text": " .", "tokens": [51014, 2411, 51064], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 33, "seek": 17800, "start": 192.0, "end": 193.0, "text": " .", "tokens": [51064, 2411, 51114], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 34, "seek": 17800, "start": 193.0, "end": 194.0, "text": " .", "tokens": [51114, 2411, 51164], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 35, "seek": 17800, "start": 194.0, "end": 195.0, "text": " .", "tokens": [51164, 2411, 51214], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 36, "seek": 17800, "start": 195.0, "end": 196.0, "text": " .", "tokens": [51214, 2411, 51264], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 37, "seek": 17800, "start": 196.0, "end": 197.0, "text": " .", "tokens": [51264, 2411, 51314], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 38, "seek": 17800, "start": 197.0, "end": 198.0, "text": " .", "tokens": [51314, 2411, 51364], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 39, "seek": 17800, "start": 198.0, "end": 199.0, "text": " .", "tokens": [51364, 2411, 51414], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 40, "seek": 17800, "start": 199.0, "end": 200.0, "text": " .", "tokens": [51414, 2411, 51464], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 41, "seek": 17800, "start": 200.0, "end": 201.0, "text": " .", "tokens": [51464, 2411, 51514], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 42, "seek": 17800, "start": 201.0, "end": 202.0, "text": " .", "tokens": [51514, 2411, 51564], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 43, "seek": 17800, "start": 202.0, "end": 203.0, "text": " .", "tokens": [51564, 2411, 51614], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 44, "seek": 17800, "start": 203.0, "end": 204.0, "text": " .", "tokens": [51614, 2411, 51664], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 45, "seek": 17800, "start": 204.0, "end": 205.0, "text": " .", "tokens": [51664, 2411, 51714], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 46, "seek": 17800, "start": 205.0, "end": 206.0, "text": " .", "tokens": [51714, 2411, 51764], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 47, "seek": 17800, "start": 206.0, "end": 207.0, "text": " .", "tokens": [51764, 2411, 51814], "temperature": 0.0, "avg_logprob": -0.07533640257069762, "compression_ratio": 3.4615384615384617, "no_speech_prob": 0.8337670564651489}, {"id": 48, "seek": 20700, "start": 207.0, "end": 208.0, "text": " .", "tokens": [50364, 2411, 50414], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 49, "seek": 20700, "start": 208.0, "end": 209.0, "text": " .", "tokens": [50414, 2411, 50464], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 50, "seek": 20700, "start": 209.0, "end": 210.0, "text": " .", "tokens": [50464, 2411, 50514], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 51, "seek": 20700, "start": 210.0, "end": 211.0, "text": " .", "tokens": [50514, 2411, 50564], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 52, "seek": 20700, "start": 211.0, "end": 212.0, "text": " .", "tokens": [50564, 2411, 50614], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 53, "seek": 20700, "start": 212.0, "end": 213.0, "text": " .", "tokens": [50614, 2411, 50664], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 54, "seek": 20700, "start": 213.0, "end": 214.0, "text": " .", "tokens": [50664, 2411, 50714], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 55, "seek": 20700, "start": 214.0, "end": 215.0, "text": " .", "tokens": [50714, 2411, 50764], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 56, "seek": 20700, "start": 215.0, "end": 216.0, "text": " .", "tokens": [50764, 2411, 50814], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 57, "seek": 20700, "start": 216.0, "end": 217.0, "text": " .", "tokens": [50814, 2411, 50864], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 58, "seek": 20700, "start": 217.0, "end": 218.0, "text": " .", "tokens": [50864, 2411, 50914], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 59, "seek": 20700, "start": 218.0, "end": 219.0, "text": " .", "tokens": [50914, 2411, 50964], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 60, "seek": 20700, "start": 219.0, "end": 220.0, "text": " .", "tokens": [50964, 2411, 51014], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 61, "seek": 20700, "start": 220.0, "end": 221.0, "text": " .", "tokens": [51014, 2411, 51064], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 62, "seek": 20700, "start": 221.0, "end": 223.0, "text": " .", "tokens": [51064, 2411, 51164], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 63, "seek": 20700, "start": 223.0, "end": 224.0, "text": " .", "tokens": [51164, 2411, 51214], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 64, "seek": 20700, "start": 224.0, "end": 226.0, "text": " .", "tokens": [51214, 2411, 51314], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 65, "seek": 20700, "start": 226.0, "end": 227.0, "text": " .", "tokens": [51314, 2411, 51364], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 66, "seek": 20700, "start": 227.0, "end": 228.0, "text": " .", "tokens": [51364, 2411, 51414], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 67, "seek": 20700, "start": 228.0, "end": 229.0, "text": " .", "tokens": [51414, 2411, 51464], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 68, "seek": 20700, "start": 229.0, "end": 230.0, "text": " .", "tokens": [51464, 2411, 51514], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 69, "seek": 20700, "start": 230.0, "end": 230.1, "text": " .", "tokens": [51514, 2411, 51519], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 70, "seek": 20700, "start": 230.1, "end": 231.0, "text": " .", "tokens": [51519, 2411, 51564], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 71, "seek": 20700, "start": 231.0, "end": 232.0, "text": " .", "tokens": [51564, 2411, 51614], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 72, "seek": 20700, "start": 232.0, "end": 233.0, "text": " .", "tokens": [51614, 2411, 51664], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 73, "seek": 20700, "start": 233.0, "end": 234.0, "text": " .", "tokens": [51664, 2411, 51714], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 74, "seek": 20700, "start": 234.0, "end": 235.0, "text": " .", "tokens": [51714, 2411, 51764], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 75, "seek": 20700, "start": 235.0, "end": 236.0, "text": " .", "tokens": [51764, 2411, 51814], "temperature": 1.0, "avg_logprob": -0.2782344374545785, "compression_ratio": 4.230769230769231, "no_speech_prob": 0.12812687456607819}, {"id": 76, "seek": 23600, "start": 236.0, "end": 244.0, "text": " trusted firmware and then that in hand starts up your opti and finally it goes to the main", "tokens": [50364, 16034, 30289, 293, 550, 300, 294, 1011, 3719, 493, 428, 2427, 72, 293, 2721, 309, 1709, 281, 264, 2135, 50764], "temperature": 0.0, "avg_logprob": -0.2390507884409236, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.09920612722635269}, {"id": 77, "seek": 23600, "start": 244.0, "end": 248.76, "text": " new boot image which finally loads your Linux kernel. This is a very typical boot flow.", "tokens": [50764, 777, 11450, 3256, 597, 2721, 12668, 428, 18734, 28256, 13, 639, 307, 257, 588, 7476, 11450, 3095, 13, 51002], "temperature": 0.0, "avg_logprob": -0.2390507884409236, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.09920612722635269}, {"id": 78, "seek": 23600, "start": 248.76, "end": 255.32, "text": " This is what you see commonly but it's talking about one core right. When you think about", "tokens": [51002, 639, 307, 437, 291, 536, 12719, 457, 309, 311, 1417, 466, 472, 4965, 558, 13, 1133, 291, 519, 466, 51330], "temperature": 0.0, "avg_logprob": -0.2390507884409236, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.09920612722635269}, {"id": 79, "seek": 23600, "start": 255.32, "end": 260.08, "text": " it you're talking about one core but that's not the case with chips today. So what if you", "tokens": [51330, 309, 291, 434, 1417, 466, 472, 4965, 457, 300, 311, 406, 264, 1389, 365, 11583, 965, 13, 407, 437, 498, 291, 51568], "temperature": 0.0, "avg_logprob": -0.2390507884409236, "compression_ratio": 1.6651162790697673, "no_speech_prob": 0.09920612722635269}, {"id": 80, "seek": 26008, "start": 260.08, "end": 268.15999999999997, "text": " have multi core systems. So an example would be the Texas Instruments K3 architecture of", "tokens": [50364, 362, 4825, 4965, 3652, 13, 407, 364, 1365, 576, 312, 264, 7885, 39785, 4697, 591, 18, 9482, 295, 50768], "temperature": 0.0, "avg_logprob": -0.2323187475335108, "compression_ratio": 1.4432432432432432, "no_speech_prob": 0.22245579957962036}, {"id": 81, "seek": 26008, "start": 268.15999999999997, "end": 277.76, "text": " devices and here you we have two cores running. So you have your 32 bit R5 core and your 64", "tokens": [50768, 5759, 293, 510, 291, 321, 362, 732, 24826, 2614, 13, 407, 291, 362, 428, 8858, 857, 497, 20, 4965, 293, 428, 12145, 51248], "temperature": 0.0, "avg_logprob": -0.2323187475335108, "compression_ratio": 1.4432432432432432, "no_speech_prob": 0.22245579957962036}, {"id": 82, "seek": 26008, "start": 277.76, "end": 286.12, "text": " bit A72 core. Now in this case we need two sets of SPLs right to get it going. So your", "tokens": [51248, 857, 316, 28890, 4965, 13, 823, 294, 341, 1389, 321, 643, 732, 6352, 295, 8420, 43, 82, 558, 281, 483, 309, 516, 13, 407, 428, 51666], "temperature": 0.0, "avg_logprob": -0.2323187475335108, "compression_ratio": 1.4432432432432432, "no_speech_prob": 0.22245579957962036}, {"id": 83, "seek": 28612, "start": 286.12, "end": 293.72, "text": " as you can see I've inserted two SPLs in the boot flow and your R5 SPL will run first. Do the", "tokens": [50364, 382, 291, 393, 536, 286, 600, 27992, 732, 8420, 43, 82, 294, 264, 11450, 3095, 293, 428, 497, 20, 8420, 43, 486, 1190, 700, 13, 1144, 264, 50744], "temperature": 0.0, "avg_logprob": -0.15623574690385297, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.022956501692533493}, {"id": 84, "seek": 28612, "start": 293.72, "end": 300.36, "text": " initial stuff and then it'll jump to ATF again to opti and then your Uboot SPL for your A72 core", "tokens": [50744, 5883, 1507, 293, 550, 309, 603, 3012, 281, 8872, 37, 797, 281, 2427, 72, 293, 550, 428, 624, 1763, 310, 8420, 43, 337, 428, 316, 28890, 4965, 51076], "temperature": 0.0, "avg_logprob": -0.15623574690385297, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.022956501692533493}, {"id": 85, "seek": 28612, "start": 300.36, "end": 307.24, "text": " comes up and then finally you boot to Linux. So this is how it looks like. Now in this presentation", "tokens": [51076, 1487, 493, 293, 550, 2721, 291, 11450, 281, 18734, 13, 407, 341, 307, 577, 309, 1542, 411, 13, 823, 294, 341, 5860, 51420], "temperature": 0.0, "avg_logprob": -0.15623574690385297, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.022956501692533493}, {"id": 86, "seek": 28612, "start": 307.24, "end": 314.32, "text": " in the interest of time I'll be talking about the A72 bootloader mainly not the R5. So yeah", "tokens": [51420, 294, 264, 1179, 295, 565, 286, 603, 312, 1417, 466, 264, 316, 28890, 11450, 2907, 260, 8704, 406, 264, 497, 20, 13, 407, 1338, 51774], "temperature": 0.0, "avg_logprob": -0.15623574690385297, "compression_ratio": 1.5720164609053497, "no_speech_prob": 0.022956501692533493}, {"id": 87, "seek": 31432, "start": 314.44, "end": 319.48, "text": " that's what I'll be talking about. So what do we need for the A72 bootloader? You'll need your", "tokens": [50370, 300, 311, 437, 286, 603, 312, 1417, 466, 13, 407, 437, 360, 321, 643, 337, 264, 316, 28890, 11450, 2907, 260, 30, 509, 603, 643, 428, 50622], "temperature": 0.0, "avg_logprob": -0.17795340220133463, "compression_ratio": 1.6160714285714286, "no_speech_prob": 0.002631299663335085}, {"id": 88, "seek": 31432, "start": 319.48, "end": 326.92, "text": " ATF, you'll need your opti binary and you'll need DM firmware. DM is device management", "tokens": [50622, 8872, 37, 11, 291, 603, 643, 428, 2427, 72, 17434, 293, 291, 603, 643, 15322, 30289, 13, 15322, 307, 4302, 4592, 50994], "temperature": 0.0, "avg_logprob": -0.17795340220133463, "compression_ratio": 1.6160714285714286, "no_speech_prob": 0.002631299663335085}, {"id": 89, "seek": 31432, "start": 326.92, "end": 334.0, "text": " firmware. It's kind of like a TI version of ARM-SEP and then you'll have your SPL binary", "tokens": [50994, 30289, 13, 467, 311, 733, 295, 411, 257, 28819, 3037, 295, 45209, 12, 50, 8929, 293, 550, 291, 603, 362, 428, 8420, 43, 17434, 51348], "temperature": 0.0, "avg_logprob": -0.17795340220133463, "compression_ratio": 1.6160714285714286, "no_speech_prob": 0.002631299663335085}, {"id": 90, "seek": 31432, "start": 334.0, "end": 342.56, "text": " and then you'll find your device tree blob right. So let's say I want to make this position", "tokens": [51348, 293, 550, 291, 603, 915, 428, 4302, 4230, 46115, 558, 13, 407, 718, 311, 584, 286, 528, 281, 652, 341, 2535, 51776], "temperature": 0.0, "avg_logprob": -0.17795340220133463, "compression_ratio": 1.6160714285714286, "no_speech_prob": 0.002631299663335085}, {"id": 91, "seek": 34256, "start": 342.6, "end": 349.56, "text": " agnostic my final bootloader. So I can just append or prepend the fit header at the top so that the", "tokens": [50366, 623, 77, 19634, 452, 2572, 11450, 2907, 260, 13, 407, 286, 393, 445, 34116, 420, 2666, 521, 264, 3318, 23117, 412, 264, 1192, 370, 300, 264, 50714], "temperature": 0.0, "avg_logprob": -0.16784717068813815, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.015658358111977577}, {"id": 92, "seek": 34256, "start": 349.56, "end": 356.88, "text": " entire image is basically position agnostic. So that's what I've done over here and what about", "tokens": [50714, 2302, 3256, 307, 1936, 2535, 623, 77, 19634, 13, 407, 300, 311, 437, 286, 600, 1096, 670, 510, 293, 437, 466, 51080], "temperature": 0.0, "avg_logprob": -0.16784717068813815, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.015658358111977577}, {"id": 93, "seek": 34256, "start": 356.88, "end": 364.8, "text": " security? You obviously need security. So you have your X509 certificate appended to the top of", "tokens": [51080, 3825, 30, 509, 2745, 643, 3825, 13, 407, 291, 362, 428, 1783, 2803, 24, 15953, 724, 3502, 281, 264, 1192, 295, 51476], "temperature": 0.0, "avg_logprob": -0.16784717068813815, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.015658358111977577}, {"id": 94, "seek": 34256, "start": 364.8, "end": 370.16, "text": " each of your binary blobs. So basically it's signed all of the blobs inside are signed and this is", "tokens": [51476, 1184, 295, 428, 17434, 1749, 929, 13, 407, 1936, 309, 311, 8175, 439, 295, 264, 1749, 929, 1854, 366, 8175, 293, 341, 307, 51744], "temperature": 0.0, "avg_logprob": -0.16784717068813815, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.015658358111977577}, {"id": 95, "seek": 37016, "start": 370.16, "end": 380.6, "text": " what our final A72 bootloader binary looks like. So as you can see it's not very simple. I mean you", "tokens": [50364, 437, 527, 2572, 316, 28890, 11450, 2907, 260, 17434, 1542, 411, 13, 407, 382, 291, 393, 536, 309, 311, 406, 588, 2199, 13, 286, 914, 291, 50886], "temperature": 0.0, "avg_logprob": -0.14538933394791245, "compression_ratio": 1.5392670157068062, "no_speech_prob": 0.0010986386332660913}, {"id": 96, "seek": 37016, "start": 380.6, "end": 387.24, "text": " can run it through a simple shell script and get your final output but it wouldn't be, it's not", "tokens": [50886, 393, 1190, 309, 807, 257, 2199, 8720, 5755, 293, 483, 428, 2572, 5598, 457, 309, 2759, 380, 312, 11, 309, 311, 406, 51218], "temperature": 0.0, "avg_logprob": -0.14538933394791245, "compression_ratio": 1.5392670157068062, "no_speech_prob": 0.0010986386332660913}, {"id": 97, "seek": 37016, "start": 387.24, "end": 395.40000000000003, "text": " really the standard right. This is how we used to go about generating our final binary. So you can", "tokens": [51218, 534, 264, 3832, 558, 13, 639, 307, 577, 321, 1143, 281, 352, 466, 17746, 527, 2572, 17434, 13, 407, 291, 393, 51626], "temperature": 0.0, "avg_logprob": -0.14538933394791245, "compression_ratio": 1.5392670157068062, "no_speech_prob": 0.0010986386332660913}, {"id": 98, "seek": 39540, "start": 395.44, "end": 401.76, "text": " see I have U-boot. You basically give all the inputs. You give your opti or device manager firmware,", "tokens": [50366, 536, 286, 362, 624, 12, 1763, 310, 13, 509, 1936, 976, 439, 264, 15743, 13, 509, 976, 428, 2427, 72, 420, 4302, 6598, 30289, 11, 50682], "temperature": 0.0, "avg_logprob": -0.18718855721609934, "compression_ratio": 1.5793650793650793, "no_speech_prob": 0.0100117027759552}, {"id": 99, "seek": 39540, "start": 401.76, "end": 409.59999999999997, "text": " your ATF and U-boot has custom scripts, a bunch of long shell scripts that used to you know tie up", "tokens": [50682, 428, 8872, 37, 293, 624, 12, 1763, 310, 575, 2375, 23294, 11, 257, 3840, 295, 938, 8720, 23294, 300, 1143, 281, 291, 458, 7582, 493, 51074], "temperature": 0.0, "avg_logprob": -0.18718855721609934, "compression_ratio": 1.5793650793650793, "no_speech_prob": 0.0100117027759552}, {"id": 100, "seek": 39540, "start": 409.59999999999997, "end": 415.15999999999997, "text": " everything, sign everything, stitch it up into a final image. So this is what we used to go through.", "tokens": [51074, 1203, 11, 1465, 1203, 11, 5635, 309, 493, 666, 257, 2572, 3256, 13, 407, 341, 307, 437, 321, 1143, 281, 352, 807, 13, 51352], "temperature": 0.0, "avg_logprob": -0.18718855721609934, "compression_ratio": 1.5793650793650793, "no_speech_prob": 0.0100117027759552}, {"id": 101, "seek": 39540, "start": 415.15999999999997, "end": 422.91999999999996, "text": " But in cases of higher security devices you'll need to have a core Secdev K3 which is an external", "tokens": [51352, 583, 294, 3331, 295, 2946, 3825, 5759, 291, 603, 643, 281, 362, 257, 4965, 3306, 40343, 591, 18, 597, 307, 364, 8320, 51740], "temperature": 0.0, "avg_logprob": -0.18718855721609934, "compression_ratio": 1.5793650793650793, "no_speech_prob": 0.0100117027759552}, {"id": 102, "seek": 42292, "start": 423.44, "end": 433.44, "text": " TI maintained repository. And this is how we used to sign the images a few months back. Obviously", "tokens": [50390, 28819, 17578, 25841, 13, 400, 341, 307, 577, 321, 1143, 281, 1465, 264, 5267, 257, 1326, 2493, 646, 13, 7580, 50890], "temperature": 0.0, "avg_logprob": -0.1810623606046041, "compression_ratio": 1.6008230452674896, "no_speech_prob": 0.003324059769511223}, {"id": 103, "seek": 42292, "start": 433.44, "end": 438.40000000000003, "text": " there's a lot of issues with doing this. One is maintaining and scaling. It's a non-standard", "tokens": [50890, 456, 311, 257, 688, 295, 2663, 365, 884, 341, 13, 1485, 307, 14916, 293, 21589, 13, 467, 311, 257, 2107, 12, 1115, 515, 51138], "temperature": 0.0, "avg_logprob": -0.1810623606046041, "compression_ratio": 1.6008230452674896, "no_speech_prob": 0.003324059769511223}, {"id": 104, "seek": 42292, "start": 438.40000000000003, "end": 447.44, "text": " flow. It's for example let's say we already have more than four bootflows at present and extending", "tokens": [51138, 3095, 13, 467, 311, 337, 1365, 718, 311, 584, 321, 1217, 362, 544, 813, 1451, 11450, 33229, 412, 1974, 293, 24360, 51590], "temperature": 0.0, "avg_logprob": -0.1810623606046041, "compression_ratio": 1.6008230452674896, "no_speech_prob": 0.003324059769511223}, {"id": 105, "seek": 42292, "start": 447.44, "end": 451.96000000000004, "text": " it to all the bootflows you know where the binary will have to change. It gets difficult. Packaging", "tokens": [51590, 309, 281, 439, 264, 11450, 33229, 291, 458, 689, 264, 17434, 486, 362, 281, 1319, 13, 467, 2170, 2252, 13, 18466, 3568, 51816], "temperature": 0.0, "avg_logprob": -0.1810623606046041, "compression_ratio": 1.6008230452674896, "no_speech_prob": 0.003324059769511223}, {"id": 106, "seek": 45196, "start": 452.0, "end": 458.52, "text": " gets difficult. And this is not the standard. It's not distro friendly. And there's no unit level", "tokens": [50366, 2170, 2252, 13, 400, 341, 307, 406, 264, 3832, 13, 467, 311, 406, 1483, 340, 9208, 13, 400, 456, 311, 572, 4985, 1496, 50692], "temperature": 0.0, "avg_logprob": -0.14542730890139186, "compression_ratio": 1.6929824561403508, "no_speech_prob": 0.003376235021278262}, {"id": 107, "seek": 45196, "start": 458.52, "end": 464.0, "text": " testing. They're just shell scripts. You don't really, if it works it works. There's no test", "tokens": [50692, 4997, 13, 814, 434, 445, 8720, 23294, 13, 509, 500, 380, 534, 11, 498, 309, 1985, 309, 1985, 13, 821, 311, 572, 1500, 50966], "temperature": 0.0, "avg_logprob": -0.14542730890139186, "compression_ratio": 1.6929824561403508, "no_speech_prob": 0.003376235021278262}, {"id": 108, "seek": 45196, "start": 464.0, "end": 470.71999999999997, "text": " coverage there right. So these are the issues with the custom scripts. And this is a small snippet", "tokens": [50966, 9645, 456, 558, 13, 407, 613, 366, 264, 2663, 365, 264, 2375, 23294, 13, 400, 341, 307, 257, 1359, 35623, 302, 51302], "temperature": 0.0, "avg_logprob": -0.14542730890139186, "compression_ratio": 1.6929824561403508, "no_speech_prob": 0.003376235021278262}, {"id": 109, "seek": 45196, "start": 470.71999999999997, "end": 478.4, "text": " of the shell script that we used to use. So you can see unless I showed you the final image what", "tokens": [51302, 295, 264, 8720, 5755, 300, 321, 1143, 281, 764, 13, 407, 291, 393, 536, 5969, 286, 4712, 291, 264, 2572, 3256, 437, 51686], "temperature": 0.0, "avg_logprob": -0.14542730890139186, "compression_ratio": 1.6929824561403508, "no_speech_prob": 0.003376235021278262}, {"id": 110, "seek": 47840, "start": 478.44, "end": 486.32, "text": " it used to look like. I don't think you can gather much from this script. And you can see the", "tokens": [50366, 309, 1143, 281, 574, 411, 13, 286, 500, 380, 519, 291, 393, 5448, 709, 490, 341, 5755, 13, 400, 291, 393, 536, 264, 50760], "temperature": 0.0, "avg_logprob": -0.17247462599244837, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.020938308909535408}, {"id": 111, "seek": 47840, "start": 486.32, "end": 491.32, "text": " highlighted ones are pointing to external scripts. So you have scripts within scripts and it's just", "tokens": [50760, 17173, 2306, 366, 12166, 281, 8320, 23294, 13, 407, 291, 362, 23294, 1951, 23294, 293, 309, 311, 445, 51010], "temperature": 0.0, "avg_logprob": -0.17247462599244837, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.020938308909535408}, {"id": 112, "seek": 47840, "start": 491.32, "end": 508.08, "text": " a mess to get to know what your final image looks like. So yeah. Thank you. So just a little talk", "tokens": [51010, 257, 2082, 281, 483, 281, 458, 437, 428, 2572, 3256, 1542, 411, 13, 407, 1338, 13, 1044, 291, 13, 407, 445, 257, 707, 751, 51848], "temperature": 0.0, "avg_logprob": -0.17247462599244837, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.020938308909535408}, {"id": 113, "seek": 50808, "start": 508.2, "end": 516.64, "text": " about Binman why I started writing this tool a while ago now. Packaging is actually much harder", "tokens": [50370, 466, 18983, 1601, 983, 286, 1409, 3579, 341, 2290, 257, 1339, 2057, 586, 13, 18466, 3568, 307, 767, 709, 6081, 50792], "temperature": 0.0, "avg_logprob": -0.15521991375795344, "compression_ratio": 1.5975103734439835, "no_speech_prob": 0.010544699616730213}, {"id": 114, "seek": 50808, "start": 516.64, "end": 522.16, "text": " than we think. And you can see an example of that there. Some other things that go on. There are", "tokens": [50792, 813, 321, 519, 13, 400, 291, 393, 536, 364, 1365, 295, 300, 456, 13, 2188, 661, 721, 300, 352, 322, 13, 821, 366, 51068], "temperature": 0.0, "avg_logprob": -0.15521991375795344, "compression_ratio": 1.5975103734439835, "no_speech_prob": 0.010544699616730213}, {"id": 115, "seek": 50808, "start": 522.16, "end": 530.12, "text": " SOC specific tools that need to run. And as mentioned before there's different phases of the", "tokens": [51068, 10621, 34, 2685, 3873, 300, 643, 281, 1190, 13, 400, 382, 2835, 949, 456, 311, 819, 18764, 295, 264, 51466], "temperature": 0.0, "avg_logprob": -0.15521991375795344, "compression_ratio": 1.5975103734439835, "no_speech_prob": 0.010544699616730213}, {"id": 116, "seek": 50808, "start": 530.12, "end": 536.4399999999999, "text": " boot. And the image needs to contain code for all of those. It's also nice to be able to see what's", "tokens": [51466, 11450, 13, 400, 264, 3256, 2203, 281, 5304, 3089, 337, 439, 295, 729, 13, 467, 311, 611, 1481, 281, 312, 1075, 281, 536, 437, 311, 51782], "temperature": 0.0, "avg_logprob": -0.15521991375795344, "compression_ratio": 1.5975103734439835, "no_speech_prob": 0.010544699616730213}, {"id": 117, "seek": 53644, "start": 536.48, "end": 542.24, "text": " actually in the image. And so this this bin man tool lets you look at an image and list it out.", "tokens": [50366, 767, 294, 264, 3256, 13, 400, 370, 341, 341, 5171, 587, 2290, 6653, 291, 574, 412, 364, 3256, 293, 1329, 309, 484, 13, 50654], "temperature": 0.0, "avg_logprob": -0.2020764668782552, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00835784338414669}, {"id": 118, "seek": 53644, "start": 546.24, "end": 551.96, "text": " So the image is described as data. So rather than shell scripts or code or whatever you describe", "tokens": [50854, 407, 264, 3256, 307, 7619, 382, 1412, 13, 407, 2831, 813, 8720, 23294, 420, 3089, 420, 2035, 291, 6786, 51140], "temperature": 0.0, "avg_logprob": -0.2020764668782552, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00835784338414669}, {"id": 119, "seek": 53644, "start": 551.96, "end": 559.4000000000001, "text": " the structure of the image in a simple data format. This image has U boot and it has SPL. It has a", "tokens": [51140, 264, 3877, 295, 264, 3256, 294, 257, 2199, 1412, 7877, 13, 639, 3256, 575, 624, 11450, 293, 309, 575, 8420, 43, 13, 467, 575, 257, 51512], "temperature": 0.0, "avg_logprob": -0.2020764668782552, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.00835784338414669}, {"id": 120, "seek": 55940, "start": 559.4, "end": 568.68, "text": " size of one megabyte and it has some pad bytes. So that's basically how you start. Binman normally", "tokens": [50364, 2744, 295, 472, 10816, 34529, 293, 309, 575, 512, 6887, 36088, 13, 407, 300, 311, 1936, 577, 291, 722, 13, 18983, 1601, 5646, 50828], "temperature": 0.0, "avg_logprob": -0.18984636507536234, "compression_ratio": 1.5502645502645502, "no_speech_prob": 0.015581480227410793}, {"id": 121, "seek": 55940, "start": 568.68, "end": 574.36, "text": " runs as part of the U boot build. So it's the final step after all the inputs have been created.", "tokens": [50828, 6676, 382, 644, 295, 264, 624, 11450, 1322, 13, 407, 309, 311, 264, 2572, 1823, 934, 439, 264, 15743, 362, 668, 2942, 13, 51112], "temperature": 0.0, "avg_logprob": -0.18984636507536234, "compression_ratio": 1.5502645502645502, "no_speech_prob": 0.015581480227410793}, {"id": 122, "seek": 55940, "start": 575.0, "end": 584.68, "text": " You run it runs build man sorry bin man and produces a final image. But the nice thing is you can", "tokens": [51144, 509, 1190, 309, 6676, 1322, 587, 2597, 5171, 587, 293, 14725, 257, 2572, 3256, 13, 583, 264, 1481, 551, 307, 291, 393, 51628], "temperature": 0.0, "avg_logprob": -0.18984636507536234, "compression_ratio": 1.5502645502645502, "no_speech_prob": 0.015581480227410793}, {"id": 123, "seek": 58468, "start": 584.68, "end": 590.5999999999999, "text": " then use all those inputs and run it again separately maybe in a signing server or in some other step", "tokens": [50364, 550, 764, 439, 729, 15743, 293, 1190, 309, 797, 14759, 1310, 294, 257, 13393, 7154, 420, 294, 512, 661, 1823, 50660], "temperature": 0.0, "avg_logprob": -0.13887005436177158, "compression_ratio": 1.6611570247933884, "no_speech_prob": 0.0037492758128792048}, {"id": 124, "seek": 58468, "start": 591.16, "end": 599.16, "text": " in production. So bin man also deals with missing blobs. It deals with tools that need to run and so", "tokens": [50688, 294, 4265, 13, 407, 5171, 587, 611, 11215, 365, 5361, 1749, 929, 13, 467, 11215, 365, 3873, 300, 643, 281, 1190, 293, 370, 51088], "temperature": 0.0, "avg_logprob": -0.13887005436177158, "compression_ratio": 1.6611570247933884, "no_speech_prob": 0.0037492758128792048}, {"id": 125, "seek": 58468, "start": 599.16, "end": 604.76, "text": " on. And it can produce an image even you know even telling you that this image won't work but at least", "tokens": [51088, 322, 13, 400, 309, 393, 5258, 364, 3256, 754, 291, 458, 754, 3585, 291, 300, 341, 3256, 1582, 380, 589, 457, 412, 1935, 51368], "temperature": 0.0, "avg_logprob": -0.13887005436177158, "compression_ratio": 1.6611570247933884, "no_speech_prob": 0.0037492758128792048}, {"id": 126, "seek": 58468, "start": 604.76, "end": 611.88, "text": " you're able to validate that you could get that far. Bin man consists of it works with a list of", "tokens": [51368, 291, 434, 1075, 281, 29562, 300, 291, 727, 483, 300, 1400, 13, 18983, 587, 14689, 295, 309, 1985, 365, 257, 1329, 295, 51724], "temperature": 0.0, "avg_logprob": -0.13887005436177158, "compression_ratio": 1.6611570247933884, "no_speech_prob": 0.0037492758128792048}, {"id": 127, "seek": 61188, "start": 611.96, "end": 617.64, "text": " entries. Entries have a different type that you've seen the U boot ones and the SPL ones but there's", "tokens": [50368, 23041, 13, 3951, 2244, 362, 257, 819, 2010, 300, 291, 600, 1612, 264, 624, 11450, 2306, 293, 264, 8420, 43, 2306, 457, 456, 311, 50652], "temperature": 0.0, "avg_logprob": -0.10111334772393255, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.004404021892696619}, {"id": 128, "seek": 61188, "start": 617.64, "end": 623.96, "text": " loads of other ones as well. And they just packed one after the other. They normally can't overlap", "tokens": [50652, 12668, 295, 661, 2306, 382, 731, 13, 400, 436, 445, 13265, 472, 934, 264, 661, 13, 814, 5646, 393, 380, 19959, 50968], "temperature": 0.0, "avg_logprob": -0.10111334772393255, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.004404021892696619}, {"id": 129, "seek": 61188, "start": 623.96, "end": 632.76, "text": " but it is possible in extreme cases if you want to do that. Bin man is written in Python. There's", "tokens": [50968, 457, 309, 307, 1944, 294, 8084, 3331, 498, 291, 528, 281, 360, 300, 13, 18983, 587, 307, 3720, 294, 15329, 13, 821, 311, 51408], "temperature": 0.0, "avg_logprob": -0.10111334772393255, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.004404021892696619}, {"id": 130, "seek": 61188, "start": 632.76, "end": 640.36, "text": " an entry based class. You then have an entry blob subclass of that if you like. You can see that", "tokens": [51408, 364, 8729, 2361, 1508, 13, 509, 550, 362, 364, 8729, 46115, 1422, 11665, 295, 300, 498, 291, 411, 13, 509, 393, 536, 300, 51788], "temperature": 0.0, "avg_logprob": -0.10111334772393255, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.004404021892696619}, {"id": 131, "seek": 64036, "start": 640.36, "end": 645.5600000000001, "text": " in the middle of the screen and you can sort of extend it from there. So a blob is just basically", "tokens": [50364, 294, 264, 2808, 295, 264, 2568, 293, 291, 393, 1333, 295, 10101, 309, 490, 456, 13, 407, 257, 46115, 307, 445, 1936, 50624], "temperature": 0.0, "avg_logprob": -0.053773940619775806, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.005227936897426844}, {"id": 132, "seek": 64036, "start": 645.5600000000001, "end": 651.5600000000001, "text": " an entry that has a blob of data in it. But you can make arbitrarily complex things that involve", "tokens": [50624, 364, 8729, 300, 575, 257, 46115, 295, 1412, 294, 309, 13, 583, 291, 393, 652, 19071, 3289, 3997, 721, 300, 9494, 50924], "temperature": 0.0, "avg_logprob": -0.053773940619775806, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.005227936897426844}, {"id": 133, "seek": 64036, "start": 651.5600000000001, "end": 656.84, "text": " you know producing signatures and that sort of thing and it's fairly easy to do that. To add", "tokens": [50924, 291, 458, 10501, 32322, 293, 300, 1333, 295, 551, 293, 309, 311, 6457, 1858, 281, 360, 300, 13, 1407, 909, 51188], "temperature": 0.0, "avg_logprob": -0.053773940619775806, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.005227936897426844}, {"id": 134, "seek": 64036, "start": 656.84, "end": 661.88, "text": " an entry type you basically put a new Python file in the right directory and give it a give it a", "tokens": [51188, 364, 8729, 2010, 291, 1936, 829, 257, 777, 15329, 3991, 294, 264, 558, 21120, 293, 976, 309, 257, 976, 309, 257, 51440], "temperature": 0.0, "avg_logprob": -0.053773940619775806, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.005227936897426844}, {"id": 135, "seek": 64036, "start": 661.88, "end": 668.6800000000001, "text": " class name and off you go. You can I mentioned you can run command line tools. It's actually possible", "tokens": [51440, 1508, 1315, 293, 766, 291, 352, 13, 509, 393, 286, 2835, 291, 393, 1190, 5622, 1622, 3873, 13, 467, 311, 767, 1944, 51780], "temperature": 0.0, "avg_logprob": -0.053773940619775806, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.005227936897426844}, {"id": 136, "seek": 66868, "start": 668.76, "end": 676.3599999999999, "text": " to list out the tools that are available. If you don't have one you can do bin man tool minus F to", "tokens": [50368, 281, 1329, 484, 264, 3873, 300, 366, 2435, 13, 759, 291, 500, 380, 362, 472, 291, 393, 360, 5171, 587, 2290, 3175, 479, 281, 50748], "temperature": 0.0, "avg_logprob": -0.10124791966806544, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.0020151662174612284}, {"id": 137, "seek": 66868, "start": 676.3599999999999, "end": 682.28, "text": " fetch it and it will go and build it from source or find it in the binary or whatever it has to do", "tokens": [50748, 23673, 309, 293, 309, 486, 352, 293, 1322, 309, 490, 4009, 420, 915, 309, 294, 264, 17434, 420, 2035, 309, 575, 281, 360, 51044], "temperature": 0.0, "avg_logprob": -0.10124791966806544, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.0020151662174612284}, {"id": 138, "seek": 66868, "start": 682.28, "end": 687.4, "text": " to get the tools. So you don't have to go and hunt around for three days trying to find vendor", "tokens": [51044, 281, 483, 264, 3873, 13, 407, 291, 500, 380, 362, 281, 352, 293, 12454, 926, 337, 1045, 1708, 1382, 281, 915, 24321, 51300], "temperature": 0.0, "avg_logprob": -0.10124791966806544, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.0020151662174612284}, {"id": 139, "seek": 66868, "start": 687.4, "end": 695.4, "text": " tools. The code has a lot of comments. It has 100 test coverage. So it's very very strongly", "tokens": [51300, 3873, 13, 440, 3089, 575, 257, 688, 295, 3053, 13, 467, 575, 2319, 1500, 9645, 13, 407, 309, 311, 588, 588, 10613, 51700], "temperature": 0.0, "avg_logprob": -0.10124791966806544, "compression_ratio": 1.6695652173913043, "no_speech_prob": 0.0020151662174612284}, {"id": 140, "seek": 69540, "start": 695.48, "end": 699.64, "text": " designed to to be reliable. That's it from me.", "tokens": [50368, 4761, 281, 281, 312, 12924, 13, 663, 311, 309, 490, 385, 13, 50576], "temperature": 0.0, "avg_logprob": -0.10553223187806177, "compression_ratio": 1.5290322580645161, "no_speech_prob": 0.008240887895226479}, {"id": 141, "seek": 69540, "start": 704.52, "end": 714.52, "text": " Yeah so now you've seen how what bin man is and the rest of the presentation is going to show you", "tokens": [50820, 865, 370, 586, 291, 600, 1612, 577, 437, 5171, 587, 307, 293, 264, 1472, 295, 264, 5860, 307, 516, 281, 855, 291, 51320], "temperature": 0.0, "avg_logprob": -0.10553223187806177, "compression_ratio": 1.5290322580645161, "no_speech_prob": 0.008240887895226479}, {"id": 142, "seek": 69540, "start": 714.52, "end": 721.8, "text": " how we switched rather migrated from what it used to be with shell scripts to using bin man.", "tokens": [51320, 577, 321, 16858, 2831, 48329, 490, 437, 309, 1143, 281, 312, 365, 8720, 23294, 281, 1228, 5171, 587, 13, 51684], "temperature": 0.0, "avg_logprob": -0.10553223187806177, "compression_ratio": 1.5290322580645161, "no_speech_prob": 0.008240887895226479}, {"id": 143, "seek": 72180, "start": 721.8, "end": 726.3599999999999, "text": " So this is what the final flow looked like. There's no external repository. There's no", "tokens": [50364, 407, 341, 307, 437, 264, 2572, 3095, 2956, 411, 13, 821, 311, 572, 8320, 25841, 13, 821, 311, 572, 50592], "temperature": 0.0, "avg_logprob": -0.042013789216677346, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0033757188357412815}, {"id": 144, "seek": 72180, "start": 726.3599999999999, "end": 732.76, "text": " custom scripts. It's just a bin man device tree file that we've plumbed in along with the other", "tokens": [50592, 2375, 23294, 13, 467, 311, 445, 257, 5171, 587, 4302, 4230, 3991, 300, 321, 600, 499, 2860, 292, 294, 2051, 365, 264, 661, 50912], "temperature": 0.0, "avg_logprob": -0.042013789216677346, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0033757188357412815}, {"id": 145, "seek": 72180, "start": 732.76, "end": 739.9599999999999, "text": " inputs. So this is what it finally looked like. So as you can see just like the image on the right", "tokens": [50912, 15743, 13, 407, 341, 307, 437, 309, 2721, 2956, 411, 13, 407, 382, 291, 393, 536, 445, 411, 264, 3256, 322, 264, 558, 51272], "temperature": 0.0, "avg_logprob": -0.042013789216677346, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0033757188357412815}, {"id": 146, "seek": 72180, "start": 739.9599999999999, "end": 747.16, "text": " which is our target image. So you have a fit node within which each of the individual binary blobs", "tokens": [51272, 597, 307, 527, 3779, 3256, 13, 407, 291, 362, 257, 3318, 9984, 1951, 597, 1184, 295, 264, 2609, 17434, 1749, 929, 51632], "temperature": 0.0, "avg_logprob": -0.042013789216677346, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0033757188357412815}, {"id": 147, "seek": 74716, "start": 747.16, "end": 752.8399999999999, "text": " that have to go in. So your a t f your opti or dm all of them are kind of packed in nicely.", "tokens": [50364, 300, 362, 281, 352, 294, 13, 407, 428, 257, 256, 283, 428, 2427, 72, 420, 274, 76, 439, 295, 552, 366, 733, 295, 13265, 294, 9594, 13, 50648], "temperature": 0.0, "avg_logprob": -0.13129427881524114, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.004069484304636717}, {"id": 148, "seek": 74716, "start": 752.8399999999999, "end": 761.0, "text": " And you can see that ti secure is an entry type that we've created to mimic not mimic actually", "tokens": [50648, 400, 291, 393, 536, 300, 8757, 7144, 307, 364, 8729, 2010, 300, 321, 600, 2942, 281, 31075, 406, 31075, 767, 51056], "temperature": 0.0, "avg_logprob": -0.13129427881524114, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.004069484304636717}, {"id": 149, "seek": 74716, "start": 761.0, "end": 768.4399999999999, "text": " generate the x509 certificate that has to go on top. So it's being passed the contents. So the", "tokens": [51056, 8460, 264, 2031, 2803, 24, 15953, 300, 575, 281, 352, 322, 1192, 13, 407, 309, 311, 885, 4678, 264, 15768, 13, 407, 264, 51428], "temperature": 0.0, "avg_logprob": -0.13129427881524114, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.004069484304636717}, {"id": 150, "seek": 74716, "start": 768.4399999999999, "end": 773.8, "text": " binary that it has to sign which is in this case the a t f binary and the key with which", "tokens": [51428, 17434, 300, 309, 575, 281, 1465, 597, 307, 294, 341, 1389, 264, 257, 256, 283, 17434, 293, 264, 2141, 365, 597, 51696], "temperature": 0.0, "avg_logprob": -0.13129427881524114, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.004069484304636717}, {"id": 151, "seek": 77380, "start": 774.68, "end": 780.76, "text": " it has to sign the binary. So it's all nicely packed in and now you have a somewhat visual", "tokens": [50408, 309, 575, 281, 1465, 264, 17434, 13, 407, 309, 311, 439, 9594, 13265, 294, 293, 586, 291, 362, 257, 8344, 5056, 50712], "temperature": 0.0, "avg_logprob": -0.10900470765970521, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.0007320826989598572}, {"id": 152, "seek": 77380, "start": 780.76, "end": 786.68, "text": " representation of what's going on and you can manipulate it easier easily. And yeah since I", "tokens": [50712, 10290, 295, 437, 311, 516, 322, 293, 291, 393, 20459, 309, 3571, 3612, 13, 400, 1338, 1670, 286, 51008], "temperature": 0.0, "avg_logprob": -0.10900470765970521, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.0007320826989598572}, {"id": 153, "seek": 77380, "start": 786.68, "end": 791.9599999999999, "text": " didn't get space. So this is the remaining of the two blobs that have to go in. So you can see", "tokens": [51008, 994, 380, 483, 1901, 13, 407, 341, 307, 264, 8877, 295, 264, 732, 1749, 929, 300, 362, 281, 352, 294, 13, 407, 291, 393, 536, 51272], "temperature": 0.0, "avg_logprob": -0.10900470765970521, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.0007320826989598572}, {"id": 154, "seek": 77380, "start": 791.9599999999999, "end": 796.5999999999999, "text": " there's a few things that you can notice from here. So one is yeah there's a custom entry type", "tokens": [51272, 456, 311, 257, 1326, 721, 300, 291, 393, 3449, 490, 510, 13, 407, 472, 307, 1338, 456, 311, 257, 2375, 8729, 2010, 51504], "temperature": 0.0, "avg_logprob": -0.10900470765970521, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.0007320826989598572}, {"id": 155, "seek": 77380, "start": 796.5999999999999, "end": 802.52, "text": " that we've defined and along with which there are standard entry types that we've used. For example", "tokens": [51504, 300, 321, 600, 7642, 293, 2051, 365, 597, 456, 366, 3832, 8729, 3467, 300, 321, 600, 1143, 13, 1171, 1365, 51800], "temperature": 0.0, "avg_logprob": -0.10900470765970521, "compression_ratio": 1.7352941176470589, "no_speech_prob": 0.0007320826989598572}, {"id": 156, "seek": 80252, "start": 802.6, "end": 809.0, "text": " opti and a t f their arm standards. So you can have the standard entry types defined as well.", "tokens": [50368, 2427, 72, 293, 257, 256, 283, 641, 3726, 7787, 13, 407, 291, 393, 362, 264, 3832, 8729, 3467, 7642, 382, 731, 13, 50688], "temperature": 0.0, "avg_logprob": -0.1099480137680516, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.0026719362940639257}, {"id": 157, "seek": 80252, "start": 809.0, "end": 815.64, "text": " And it's already there in the bin man folder. And at the same time let's say you want to reuse", "tokens": [50688, 400, 309, 311, 1217, 456, 294, 264, 5171, 587, 10820, 13, 400, 412, 264, 912, 565, 718, 311, 584, 291, 528, 281, 26225, 51020], "temperature": 0.0, "avg_logprob": -0.1099480137680516, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.0026719362940639257}, {"id": 158, "seek": 80252, "start": 815.64, "end": 821.72, "text": " the same device tree for building many different boards. And let's say each of the board is using", "tokens": [51020, 264, 912, 4302, 4230, 337, 2390, 867, 819, 13293, 13, 400, 718, 311, 584, 1184, 295, 264, 3150, 307, 1228, 51324], "temperature": 0.0, "avg_logprob": -0.1099480137680516, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.0026719362940639257}, {"id": 159, "seek": 80252, "start": 821.72, "end": 827.64, "text": " a different address to load your a t f. And that's also easy to plumb into the bin man flow because", "tokens": [51324, 257, 819, 2985, 281, 3677, 428, 257, 256, 283, 13, 400, 300, 311, 611, 1858, 281, 499, 2860, 666, 264, 5171, 587, 3095, 570, 51620], "temperature": 0.0, "avg_logprob": -0.1099480137680516, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.0026719362940639257}, {"id": 160, "seek": 82764, "start": 827.64, "end": 835.08, "text": " it evaluates config options. So according to your build your config will change and yeah.", "tokens": [50364, 309, 6133, 1024, 6662, 3956, 13, 407, 4650, 281, 428, 1322, 428, 6662, 486, 1319, 293, 1338, 13, 50736], "temperature": 0.0, "avg_logprob": -0.1591703393957117, "compression_ratio": 1.55793991416309, "no_speech_prob": 0.00912326667457819}, {"id": 161, "seek": 82764, "start": 836.52, "end": 842.6, "text": " So to kind of finish off we'll just quickly go through what the python class looks like for", "tokens": [50808, 407, 281, 733, 295, 2413, 766, 321, 603, 445, 2661, 352, 807, 437, 264, 38797, 1508, 1542, 411, 337, 51112], "temperature": 0.0, "avg_logprob": -0.1591703393957117, "compression_ratio": 1.55793991416309, "no_speech_prob": 0.00912326667457819}, {"id": 162, "seek": 82764, "start": 842.6, "end": 851.16, "text": " TI secure for the x509 certificate. So you have a special method of python in the beginning.", "tokens": [51112, 28819, 7144, 337, 264, 2031, 2803, 24, 15953, 13, 407, 291, 362, 257, 2121, 3170, 295, 38797, 294, 264, 2863, 13, 51540], "temperature": 0.0, "avg_logprob": -0.1591703393957117, "compression_ratio": 1.55793991416309, "no_speech_prob": 0.00912326667457819}, {"id": 163, "seek": 82764, "start": 851.16, "end": 857.48, "text": " So that's just there. And this would do the reading of the node. So you can use your FBT", "tokens": [51540, 407, 300, 311, 445, 456, 13, 400, 341, 576, 360, 264, 3760, 295, 264, 9984, 13, 407, 291, 393, 764, 428, 479, 33853, 51856], "temperature": 0.0, "avg_logprob": -0.1591703393957117, "compression_ratio": 1.55793991416309, "no_speech_prob": 0.00912326667457819}, {"id": 164, "seek": 85748, "start": 857.48, "end": 861.5600000000001, "text": " tools to go and grab the properties that you've mentioned in your device tree.", "tokens": [50364, 3873, 281, 352, 293, 4444, 264, 7221, 300, 291, 600, 2835, 294, 428, 4302, 4230, 13, 50568], "temperature": 0.0, "avg_logprob": -0.1266872260881507, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.004678936675190926}, {"id": 165, "seek": 85748, "start": 861.5600000000001, "end": 867.5600000000001, "text": " And you can even add your own properties. That's also possible. So for example sha is the property", "tokens": [50568, 400, 291, 393, 754, 909, 428, 1065, 7221, 13, 663, 311, 611, 1944, 13, 407, 337, 1365, 3230, 307, 264, 4707, 50868], "temperature": 0.0, "avg_logprob": -0.1266872260881507, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.004678936675190926}, {"id": 166, "seek": 85748, "start": 867.5600000000001, "end": 873.88, "text": " that we are going and grabbing by default it's 512 if you haven't mentioned it. If you want to change", "tokens": [50868, 300, 321, 366, 516, 293, 23771, 538, 7576, 309, 311, 1025, 4762, 498, 291, 2378, 380, 2835, 309, 13, 759, 291, 528, 281, 1319, 51184], "temperature": 0.0, "avg_logprob": -0.1266872260881507, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.004678936675190926}, {"id": 167, "seek": 85748, "start": 873.88, "end": 881.48, "text": " the sha value you can give that property in the bin man node itself. And then this would be the", "tokens": [51184, 264, 3230, 2158, 291, 393, 976, 300, 4707, 294, 264, 5171, 587, 9984, 2564, 13, 400, 550, 341, 576, 312, 264, 51564], "temperature": 0.0, "avg_logprob": -0.1266872260881507, "compression_ratio": 1.6891891891891893, "no_speech_prob": 0.004678936675190926}, {"id": 168, "seek": 88148, "start": 881.48, "end": 887.64, "text": " method that you know is kind of important which is actually setting the contents of your", "tokens": [50364, 3170, 300, 291, 458, 307, 733, 295, 1021, 597, 307, 767, 3287, 264, 15768, 295, 428, 50672], "temperature": 0.0, "avg_logprob": -0.10706368552313911, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.017981676384806633}, {"id": 169, "seek": 88148, "start": 888.6, "end": 894.12, "text": " entry. So in my case I've defined a get certificate function that actually goes and", "tokens": [50720, 8729, 13, 407, 294, 452, 1389, 286, 600, 7642, 257, 483, 15953, 2445, 300, 767, 1709, 293, 50996], "temperature": 0.0, "avg_logprob": -0.10706368552313911, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.017981676384806633}, {"id": 170, "seek": 88148, "start": 894.12, "end": 900.6, "text": " runs open SSL on the binary that you fetched and put that in the entry. So obtain contents is what", "tokens": [50996, 6676, 1269, 12238, 43, 322, 264, 17434, 300, 291, 23673, 292, 293, 829, 300, 294, 264, 8729, 13, 407, 12701, 15768, 307, 437, 51320], "temperature": 0.0, "avg_logprob": -0.10706368552313911, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.017981676384806633}, {"id": 171, "seek": 88148, "start": 900.6, "end": 908.6, "text": " is doing that. And in the case of for example you have a u boot SPL which contains the symbol to your", "tokens": [51320, 307, 884, 300, 13, 400, 294, 264, 1389, 295, 337, 1365, 291, 362, 257, 344, 11450, 8420, 43, 597, 8306, 264, 5986, 281, 428, 51720], "temperature": 0.0, "avg_logprob": -0.10706368552313911, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.017981676384806633}, {"id": 172, "seek": 90860, "start": 909.5600000000001, "end": 914.76, "text": " u boot image that you want to jump to. So there's cases where you'll be writing symbols so your", "tokens": [50412, 344, 11450, 3256, 300, 291, 528, 281, 3012, 281, 13, 407, 456, 311, 3331, 689, 291, 603, 312, 3579, 16944, 370, 428, 50672], "temperature": 0.0, "avg_logprob": -0.11157080891368153, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0016479062614962459}, {"id": 173, "seek": 90860, "start": 914.76, "end": 921.5600000000001, "text": " final image would change. So process contents runs after at the end of your build so that it'll go", "tokens": [50672, 2572, 3256, 576, 1319, 13, 407, 1399, 15768, 6676, 934, 412, 264, 917, 295, 428, 1322, 370, 300, 309, 603, 352, 51012], "temperature": 0.0, "avg_logprob": -0.11157080891368153, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0016479062614962459}, {"id": 174, "seek": 90860, "start": 921.5600000000001, "end": 929.72, "text": " and update your binary essentially in your final image. And here's another last method", "tokens": [51012, 293, 5623, 428, 17434, 4476, 294, 428, 2572, 3256, 13, 400, 510, 311, 1071, 1036, 3170, 51420], "temperature": 0.0, "avg_logprob": -0.11157080891368153, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0016479062614962459}, {"id": 175, "seek": 90860, "start": 929.72, "end": 936.76, "text": " that was used which open SSL is already a bin man tool. So it's already present there and like", "tokens": [51420, 300, 390, 1143, 597, 1269, 12238, 43, 307, 1217, 257, 5171, 587, 2290, 13, 407, 309, 311, 1217, 1974, 456, 293, 411, 51772], "temperature": 0.0, "avg_logprob": -0.11157080891368153, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.0016479062614962459}, {"id": 176, "seek": 93676, "start": 936.76, "end": 944.6, "text": " Simon mentioned all tools can be all CLI tools you can easily port to be run within bin man itself.", "tokens": [50364, 13193, 2835, 439, 3873, 393, 312, 439, 12855, 40, 3873, 291, 393, 3612, 2436, 281, 312, 1190, 1951, 5171, 587, 2564, 13, 50756], "temperature": 0.0, "avg_logprob": -0.11035699844360351, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0013243462890386581}, {"id": 177, "seek": 93676, "start": 944.6, "end": 949.4, "text": " So here you're just adding the open SSL tool since we'll be using it.", "tokens": [50756, 407, 510, 291, 434, 445, 5127, 264, 1269, 12238, 43, 2290, 1670, 321, 603, 312, 1228, 309, 13, 50996], "temperature": 0.0, "avg_logprob": -0.11035699844360351, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0013243462890386581}, {"id": 178, "seek": 93676, "start": 951.3199999999999, "end": 956.6, "text": " Now we're kind of towards the end of the talk. Some of the developments that are ongoing is for", "tokens": [51092, 823, 321, 434, 733, 295, 3030, 264, 917, 295, 264, 751, 13, 2188, 295, 264, 20862, 300, 366, 10452, 307, 337, 51356], "temperature": 0.0, "avg_logprob": -0.11035699844360351, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0013243462890386581}, {"id": 179, "seek": 93676, "start": 956.6, "end": 964.12, "text": " example the bin man dt node is not part of the device tree specification as of now but Simon", "tokens": [51356, 1365, 264, 5171, 587, 36423, 9984, 307, 406, 644, 295, 264, 4302, 4230, 31256, 382, 295, 586, 457, 13193, 51732], "temperature": 0.0, "avg_logprob": -0.11035699844360351, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.0013243462890386581}, {"id": 180, "seek": 96412, "start": 964.12, "end": 971.0, "text": " has been working on it and that's an ongoing work. Then the ability to pass custom firmware", "tokens": [50364, 575, 668, 1364, 322, 309, 293, 300, 311, 364, 10452, 589, 13, 1396, 264, 3485, 281, 1320, 2375, 30289, 50708], "temperature": 0.0, "avg_logprob": -0.12141754229863484, "compression_ratio": 1.6812227074235808, "no_speech_prob": 0.012425992637872696}, {"id": 181, "seek": 96412, "start": 971.0, "end": 979.24, "text": " via the CLI argument. For example let's say I want to pass the dm firmware argument as an actual CLI", "tokens": [50708, 5766, 264, 12855, 40, 6770, 13, 1171, 1365, 718, 311, 584, 286, 528, 281, 1320, 264, 274, 76, 30289, 6770, 382, 364, 3539, 12855, 40, 51120], "temperature": 0.0, "avg_logprob": -0.12141754229863484, "compression_ratio": 1.6812227074235808, "no_speech_prob": 0.012425992637872696}, {"id": 182, "seek": 96412, "start": 979.24, "end": 985.24, "text": " argument instead of hard coding it in the bin man dtsi that's not supported as of now without", "tokens": [51120, 6770, 2602, 295, 1152, 17720, 309, 294, 264, 5171, 587, 274, 1373, 72, 300, 311, 406, 8104, 382, 295, 586, 1553, 51420], "temperature": 0.0, "avg_logprob": -0.12141754229863484, "compression_ratio": 1.6812227074235808, "no_speech_prob": 0.012425992637872696}, {"id": 183, "seek": 96412, "start": 985.24, "end": 992.6, "text": " making changes to the original u boot make file. So yeah that's also something that that is in the", "tokens": [51420, 1455, 2962, 281, 264, 3380, 344, 11450, 652, 3991, 13, 407, 1338, 300, 311, 611, 746, 300, 300, 307, 294, 264, 51788], "temperature": 0.0, "avg_logprob": -0.12141754229863484, "compression_ratio": 1.6812227074235808, "no_speech_prob": 0.012425992637872696}, {"id": 184, "seek": 99260, "start": 992.6, "end": 999.88, "text": " works and finally the x509 template that that is used to generate the final certificate that's", "tokens": [50364, 1985, 293, 2721, 264, 2031, 2803, 24, 12379, 300, 300, 307, 1143, 281, 8460, 264, 2572, 15953, 300, 311, 50728], "temperature": 0.0, "avg_logprob": -0.09577915979468304, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00406923983246088}, {"id": 185, "seek": 99260, "start": 999.88, "end": 1005.48, "text": " in some ways kind of hard coded right now even though it's a very standard tool that should be", "tokens": [50728, 294, 512, 2098, 733, 295, 1152, 34874, 558, 586, 754, 1673, 309, 311, 257, 588, 3832, 2290, 300, 820, 312, 51008], "temperature": 0.0, "avg_logprob": -0.09577915979468304, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00406923983246088}, {"id": 186, "seek": 99260, "start": 1005.48, "end": 1013.4, "text": " generated on the fly. So that that is also something that's ongoing. Now there's a bunch of u boot", "tokens": [51008, 10833, 322, 264, 3603, 13, 407, 300, 300, 307, 611, 746, 300, 311, 10452, 13, 823, 456, 311, 257, 3840, 295, 344, 11450, 51404], "temperature": 0.0, "avg_logprob": -0.09577915979468304, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00406923983246088}, {"id": 187, "seek": 99260, "start": 1013.4, "end": 1019.96, "text": " boards that still use custom scripts today and they can all be ported towards using bin man which is", "tokens": [51404, 13293, 300, 920, 764, 2375, 23294, 965, 293, 436, 393, 439, 312, 2436, 292, 3030, 1228, 5171, 587, 597, 307, 51732], "temperature": 0.0, "avg_logprob": -0.09577915979468304, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00406923983246088}, {"id": 188, "seek": 101996, "start": 1019.96, "end": 1026.8400000000001, "text": " the final aim of this presentation to get everyone to finally port and use bin man as the standard.", "tokens": [50364, 264, 2572, 5939, 295, 341, 5860, 281, 483, 1518, 281, 2721, 2436, 293, 764, 5171, 587, 382, 264, 3832, 13, 50708], "temperature": 0.0, "avg_logprob": -0.13494874470269502, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.004607492592185736}, {"id": 189, "seek": 101996, "start": 1028.52, "end": 1035.32, "text": " So some of the references I've used mainly the u boot documentation Simon's talk at OSFC", "tokens": [50792, 407, 512, 295, 264, 15400, 286, 600, 1143, 8704, 264, 344, 11450, 14333, 13193, 311, 751, 412, 12731, 18671, 51132], "temperature": 0.0, "avg_logprob": -0.13494874470269502, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.004607492592185736}, {"id": 190, "seek": 101996, "start": 1035.96, "end": 1042.2, "text": " and my colleague Brian's bootloader presentation as well and you can also see the patch series that", "tokens": [51164, 293, 452, 13532, 10765, 311, 11450, 2907, 260, 5860, 382, 731, 293, 291, 393, 611, 536, 264, 9972, 2638, 300, 51476], "temperature": 0.0, "avg_logprob": -0.13494874470269502, "compression_ratio": 1.5238095238095237, "no_speech_prob": 0.004607492592185736}, {"id": 191, "seek": 104220, "start": 1042.2, "end": 1050.52, "text": " was used to port the entire k3 devices to using bin man. Yeah lastly I would like to credit the", "tokens": [50364, 390, 1143, 281, 2436, 264, 2302, 350, 18, 5759, 281, 1228, 5171, 587, 13, 865, 16386, 286, 576, 411, 281, 5397, 264, 50780], "temperature": 0.0, "avg_logprob": -0.21903451822571834, "compression_ratio": 1.393063583815029, "no_speech_prob": 0.012351795099675655}, {"id": 192, "seek": 104220, "start": 1050.52, "end": 1056.76, "text": " FOSTA organizers and Texas instruments and the u boot community that has actively been working on", "tokens": [50780, 479, 4367, 8241, 35071, 293, 7885, 12190, 293, 264, 344, 11450, 1768, 300, 575, 13022, 668, 1364, 322, 51092], "temperature": 0.0, "avg_logprob": -0.21903451822571834, "compression_ratio": 1.393063583815029, "no_speech_prob": 0.012351795099675655}, {"id": 193, "seek": 104220, "start": 1056.76, "end": 1060.92, "text": " bin man. So yeah now we are open for questions.", "tokens": [51092, 5171, 587, 13, 407, 1338, 586, 321, 366, 1269, 337, 1651, 13, 51300], "temperature": 0.0, "avg_logprob": -0.21903451822571834, "compression_ratio": 1.393063583815029, "no_speech_prob": 0.012351795099675655}, {"id": 194, "seek": 107220, "start": 1072.52, "end": 1072.92, "text": " That's not really.", "tokens": [50380, 663, 311, 406, 534, 13, 50400], "temperature": 0.0, "avg_logprob": -0.3840798464688388, "compression_ratio": 1.2688172043010753, "no_speech_prob": 0.03065965510904789}, {"id": 195, "seek": 107220, "start": 1095.32, "end": 1101.32, "text": " So the question is how does bin man relate to make image the make image tool? The bin man calls the", "tokens": [51520, 407, 264, 1168, 307, 577, 775, 5171, 587, 10961, 281, 652, 3256, 264, 652, 3256, 2290, 30, 440, 5171, 587, 5498, 264, 51820], "temperature": 0.0, "avg_logprob": -0.3840798464688388, "compression_ratio": 1.2688172043010753, "no_speech_prob": 0.03065965510904789}, {"id": 196, "seek": 110132, "start": 1101.32, "end": 1107.8, "text": " make image tool. Bin man can produce fit images as you probably saw you simply just write fit in", "tokens": [50364, 652, 3256, 2290, 13, 18983, 587, 393, 5258, 3318, 5267, 382, 291, 1391, 1866, 291, 2935, 445, 2464, 3318, 294, 50688], "temperature": 0.0, "avg_logprob": -0.14714497405213195, "compression_ratio": 1.544041450777202, "no_speech_prob": 0.007314464543014765}, {"id": 197, "seek": 110132, "start": 1107.8, "end": 1117.08, "text": " there and you get one. So it's a lot more convenient. Make image has the SOC specific stuff. There's no", "tokens": [50688, 456, 293, 291, 483, 472, 13, 407, 309, 311, 257, 688, 544, 10851, 13, 4387, 3256, 575, 264, 10621, 34, 2685, 1507, 13, 821, 311, 572, 51152], "temperature": 0.0, "avg_logprob": -0.14714497405213195, "compression_ratio": 1.544041450777202, "no_speech_prob": 0.007314464543014765}, {"id": 198, "seek": 110132, "start": 1117.08, "end": 1123.32, "text": " plan to you know rip all that c code out and write in python and bin man. It's simply make images", "tokens": [51152, 1393, 281, 291, 458, 12782, 439, 300, 269, 3089, 484, 293, 2464, 294, 38797, 293, 5171, 587, 13, 467, 311, 2935, 652, 5267, 51464], "temperature": 0.0, "avg_logprob": -0.14714497405213195, "compression_ratio": 1.544041450777202, "no_speech_prob": 0.007314464543014765}, {"id": 199, "seek": 112332, "start": 1123.6399999999999, "end": 1126.6799999999998, "text": " is sort of one of the tools if you like that bin man uses.", "tokens": [50380, 307, 1333, 295, 472, 295, 264, 3873, 498, 291, 411, 300, 5171, 587, 4960, 13, 50532], "temperature": 0.0, "avg_logprob": -0.16032670265020327, "compression_ratio": 1.3166666666666667, "no_speech_prob": 0.03232806175947189}, {"id": 200, "seek": 112332, "start": 1147.24, "end": 1153.08, "text": " It's actually already part of the r5 bootloader which is a little bit more complicated which is why", "tokens": [51560, 467, 311, 767, 1217, 644, 295, 264, 367, 20, 11450, 2907, 260, 597, 307, 257, 707, 857, 544, 6179, 597, 307, 983, 51852], "temperature": 0.0, "avg_logprob": -0.16032670265020327, "compression_ratio": 1.3166666666666667, "no_speech_prob": 0.03232806175947189}, {"id": 201, "seek": 115308, "start": 1153.08, "end": 1160.12, "text": " we didn't cover that. The question was if you can kind of recursively sign the images so a signed", "tokens": [50364, 321, 994, 380, 2060, 300, 13, 440, 1168, 390, 498, 291, 393, 733, 295, 20560, 3413, 1465, 264, 5267, 370, 257, 8175, 50716], "temperature": 0.0, "avg_logprob": -0.12542516808760792, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.008638931438326836}, {"id": 202, "seek": 115308, "start": 1160.12, "end": 1165.24, "text": " image within a signed image and you can do that which is a part of the r5 bootloader.", "tokens": [50716, 3256, 1951, 257, 8175, 3256, 293, 291, 393, 360, 300, 597, 307, 257, 644, 295, 264, 367, 20, 11450, 2907, 260, 13, 50972], "temperature": 0.0, "avg_logprob": -0.12542516808760792, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.008638931438326836}, {"id": 203, "seek": 115308, "start": 1166.36, "end": 1171.56, "text": " We'll be sharing the slides so you can have the r5 view as well so that it'll cover that.", "tokens": [51028, 492, 603, 312, 5414, 264, 9788, 370, 291, 393, 362, 264, 367, 20, 1910, 382, 731, 370, 300, 309, 603, 2060, 300, 13, 51288], "temperature": 0.0, "avg_logprob": -0.12542516808760792, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.008638931438326836}, {"id": 204, "seek": 115308, "start": 1175.32, "end": 1182.6, "text": " The images are actually hierarchical so if you want something you put it here if you want", "tokens": [51476, 440, 5267, 366, 767, 35250, 804, 370, 498, 291, 528, 746, 291, 829, 309, 510, 498, 291, 528, 51840], "temperature": 0.0, "avg_logprob": -0.12542516808760792, "compression_ratio": 1.7707317073170732, "no_speech_prob": 0.008638931438326836}, {"id": 205, "seek": 118260, "start": 1182.6, "end": 1188.6799999999998, "text": " the data that comes that goes into that you put inside it and you can just keep going right. So", "tokens": [50364, 264, 1412, 300, 1487, 300, 1709, 666, 300, 291, 829, 1854, 309, 293, 291, 393, 445, 1066, 516, 558, 13, 407, 50668], "temperature": 0.0, "avg_logprob": -0.23720975603376115, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.002342517487704754}, {"id": 206, "seek": 118260, "start": 1188.6799999999998, "end": 1194.28, "text": " that's one of the nice things I think it's the I can't remember what it's called Mesa or something", "tokens": [50668, 300, 311, 472, 295, 264, 1481, 721, 286, 519, 309, 311, 264, 286, 393, 380, 1604, 437, 309, 311, 1219, 376, 13708, 420, 746, 50948], "temperature": 0.0, "avg_logprob": -0.23720975603376115, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.002342517487704754}, {"id": 207, "seek": 118260, "start": 1195.08, "end": 1199.9599999999998, "text": " that uses sign within signed and it's simply a case of putting it in the description.", "tokens": [50988, 300, 4960, 1465, 1951, 8175, 293, 309, 311, 2935, 257, 1389, 295, 3372, 309, 294, 264, 3855, 13, 51232], "temperature": 0.0, "avg_logprob": -0.23720975603376115, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.002342517487704754}, {"id": 208, "seek": 121260, "start": 1212.6, "end": 1222.6, "text": " So", "tokens": [50364, 407, 50864], "temperature": 0.0, "avg_logprob": -0.40907562480253334, "compression_ratio": 1.183673469387755, "no_speech_prob": 0.023848431184887886}, {"id": 209, "seek": 121260, "start": 1222.76, "end": 1226.1999999999998, "text": " I think you're talking about changing the key once the images.", "tokens": [50872, 286, 519, 291, 434, 1417, 466, 4473, 264, 2141, 1564, 264, 5267, 13, 51044], "temperature": 0.0, "avg_logprob": -0.40907562480253334, "compression_ratio": 1.183673469387755, "no_speech_prob": 0.023848431184887886}, {"id": 210, "seek": 121260, "start": 1230.36, "end": 1233.56, "text": " Yeah that is also possible. You want to take that?", "tokens": [51252, 865, 300, 307, 611, 1944, 13, 509, 528, 281, 747, 300, 30, 51412], "temperature": 0.0, "avg_logprob": -0.40907562480253334, "compression_ratio": 1.183673469387755, "no_speech_prob": 0.023848431184887886}, {"id": 211, "seek": 123356, "start": 1233.56, "end": 1243.32, "text": " I don't know much more about that but yes you can. So the public key has to go in a prior stage but", "tokens": [50364, 286, 500, 380, 458, 709, 544, 466, 300, 457, 2086, 291, 393, 13, 407, 264, 1908, 2141, 575, 281, 352, 294, 257, 4059, 3233, 457, 50852], "temperature": 0.0, "avg_logprob": -0.15714431816423444, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.015040918253362179}, {"id": 212, "seek": 123356, "start": 1243.32, "end": 1251.24, "text": " because you're producing a cohesive firmware image right where all the phases are essentially", "tokens": [50852, 570, 291, 434, 10501, 257, 43025, 30289, 3256, 558, 689, 439, 264, 18764, 366, 4476, 51248], "temperature": 0.0, "avg_logprob": -0.15714431816423444, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.015040918253362179}, {"id": 213, "seek": 123356, "start": 1251.24, "end": 1258.2, "text": " have to be there then yeah bin man can can stuff the key from one into you know that's used in the", "tokens": [51248, 362, 281, 312, 456, 550, 1338, 5171, 587, 393, 393, 1507, 264, 2141, 490, 472, 666, 291, 458, 300, 311, 1143, 294, 264, 51596], "temperature": 0.0, "avg_logprob": -0.15714431816423444, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.015040918253362179}, {"id": 214, "seek": 125820, "start": 1258.2, "end": 1262.6000000000001, "text": " next phase into the prior stage firmware and that's obviously necessary.", "tokens": [50364, 958, 5574, 666, 264, 4059, 3233, 30289, 293, 300, 311, 2745, 4818, 13, 50584], "temperature": 0.0, "avg_logprob": -0.25346539237282495, "compression_ratio": 1.3643410852713178, "no_speech_prob": 0.012385697104036808}, {"id": 215, "seek": 125820, "start": 1273.72, "end": 1274.44, "text": " Yeah yeah.", "tokens": [51140, 865, 1338, 13, 51176], "temperature": 0.0, "avg_logprob": -0.25346539237282495, "compression_ratio": 1.3643410852713178, "no_speech_prob": 0.012385697104036808}, {"id": 216, "seek": 125820, "start": 1278.04, "end": 1286.8400000000001, "text": " Yeah so if you look at the DM firmware right now that's an external blob. Oh the question is", "tokens": [51356, 865, 370, 498, 291, 574, 412, 264, 15322, 30289, 558, 586, 300, 311, 364, 8320, 46115, 13, 876, 264, 1168, 307, 51796], "temperature": 0.0, "avg_logprob": -0.25346539237282495, "compression_ratio": 1.3643410852713178, "no_speech_prob": 0.012385697104036808}, {"id": 217, "seek": 128820, "start": 1288.2, "end": 1290.2, "text": " huh?", "tokens": [50364, 7020, 30, 50464], "temperature": 0.0, "avg_logprob": -0.20599937438964844, "compression_ratio": 1.5433070866141732, "no_speech_prob": 0.005537970922887325}, {"id": 218, "seek": 128820, "start": 1295.56, "end": 1301.88, "text": " So you have to mention the blobs that you so the question is whether we can include external", "tokens": [50732, 407, 291, 362, 281, 2152, 264, 1749, 929, 300, 291, 370, 264, 1168, 307, 1968, 321, 393, 4090, 8320, 51048], "temperature": 0.0, "avg_logprob": -0.20599937438964844, "compression_ratio": 1.5433070866141732, "no_speech_prob": 0.005537970922887325}, {"id": 219, "seek": 128820, "start": 1301.88, "end": 1309.64, "text": " binary blobs into the final image and whether we can use scripts to generate an image and then you", "tokens": [51048, 17434, 1749, 929, 666, 264, 2572, 3256, 293, 1968, 321, 393, 764, 23294, 281, 8460, 364, 3256, 293, 550, 291, 51436], "temperature": 0.0, "avg_logprob": -0.20599937438964844, "compression_ratio": 1.5433070866141732, "no_speech_prob": 0.005537970922887325}, {"id": 220, "seek": 130964, "start": 1309.64, "end": 1317.96, "text": " know port that into the final bin man made image. So the first one is yeah you can reference", "tokens": [50364, 458, 2436, 300, 666, 264, 2572, 5171, 587, 1027, 3256, 13, 407, 264, 700, 472, 307, 1338, 291, 393, 6408, 50780], "temperature": 0.0, "avg_logprob": -0.1468314999028256, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.018501579761505127}, {"id": 221, "seek": 130964, "start": 1317.96, "end": 1325.72, "text": " external blobs like I've done here. So DM is a blob that's not in the flow so it'll go and pick that", "tokens": [50780, 8320, 1749, 929, 411, 286, 600, 1096, 510, 13, 407, 15322, 307, 257, 46115, 300, 311, 406, 294, 264, 3095, 370, 309, 603, 352, 293, 1888, 300, 51168], "temperature": 0.0, "avg_logprob": -0.1468314999028256, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.018501579761505127}, {"id": 222, "seek": 130964, "start": 1325.72, "end": 1333.3200000000002, "text": " up as an external binary and in terms of scripts so UBOO does the first build and then basically", "tokens": [51168, 493, 382, 364, 8320, 17434, 293, 294, 2115, 295, 23294, 370, 624, 33, 3783, 775, 264, 700, 1322, 293, 550, 1936, 51548], "temperature": 0.0, "avg_logprob": -0.1468314999028256, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.018501579761505127}, {"id": 223, "seek": 133332, "start": 1333.3999999999999, "end": 1339.56, "text": " you can mention the binaries that are dependent that that that have to be created before bin man", "tokens": [50368, 291, 393, 2152, 264, 5171, 4889, 300, 366, 12334, 300, 300, 300, 362, 281, 312, 2942, 949, 5171, 587, 50676], "temperature": 0.0, "avg_logprob": -0.13982791691036014, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.03505644202232361}, {"id": 224, "seek": 133332, "start": 1339.56, "end": 1345.96, "text": " can be run. So you can mention that so you can maybe run your script before that and get your", "tokens": [50676, 393, 312, 1190, 13, 407, 291, 393, 2152, 300, 370, 291, 393, 1310, 1190, 428, 5755, 949, 300, 293, 483, 428, 50996], "temperature": 0.0, "avg_logprob": -0.13982791691036014, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.03505644202232361}, {"id": 225, "seek": 133332, "start": 1345.96, "end": 1353.08, "text": " binary ready and then bin man will just do the packing. So it'll only run once the input binaries", "tokens": [50996, 17434, 1919, 293, 550, 5171, 587, 486, 445, 360, 264, 20815, 13, 407, 309, 603, 787, 1190, 1564, 264, 4846, 5171, 4889, 51352], "temperature": 0.0, "avg_logprob": -0.13982791691036014, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.03505644202232361}, {"id": 226, "seek": 133332, "start": 1353.08, "end": 1359.32, "text": " are ready to go. So is this already upstream? Yeah this is already upstream. Yeah.", "tokens": [51352, 366, 1919, 281, 352, 13, 407, 307, 341, 1217, 33915, 30, 865, 341, 307, 1217, 33915, 13, 865, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13982791691036014, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.03505644202232361}, {"id": 227, "seek": 135932, "start": 1359.32, "end": 1363.32, "text": " Any other questions?", "tokens": [50364, 2639, 661, 1651, 30, 50564], "temperature": 0.0, "avg_logprob": -0.42930953642901254, "compression_ratio": 1.0, "no_speech_prob": 0.06660858541727066}, {"id": 228, "seek": 135932, "start": 1367.32, "end": 1369.32, "text": " Thank you very much. Thank you.", "tokens": [50764, 1044, 291, 588, 709, 13, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.42930953642901254, "compression_ratio": 1.0, "no_speech_prob": 0.06660858541727066}, {"id": 229, "seek": 138932, "start": 1389.32, "end": 1389.82, "text": " you", "tokens": [50364, 291, 50389], "temperature": 0.0, "avg_logprob": -0.9018111824989319, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.8800583481788635}, {"id": 230, "seek": 141932, "start": 1419.32, "end": 1419.82, "text": " you", "tokens": [50364, 291, 50389], "temperature": 0.0, "avg_logprob": -0.663884162902832, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.743049681186676}, {"id": 231, "seek": 144932, "start": 1449.32, "end": 1449.82, "text": " you", "tokens": [50364, 291, 50389], "temperature": 0.0, "avg_logprob": -0.5789710283279419, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.6245996952056885}, {"id": 232, "seek": 147932, "start": 1479.32, "end": 1479.82, "text": " you", "tokens": [50364, 291, 50389], "temperature": 0.0, "avg_logprob": -0.5535082221031189, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.5997716784477234}, {"id": 233, "seek": 150932, "start": 1509.32, "end": 1510.54, "text": " you", "tokens": [50400, 291, 50425], "temperature": 0.0, "avg_logprob": -0.7691019177436829, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.6041958928108215}], "language": "en"}