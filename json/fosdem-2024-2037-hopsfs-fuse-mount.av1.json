{"text": " Good morning everyone. Thank you all for joining the first session of today. You're at the software defined storage dev room. We'll have storage talks throughout the day until I think seven tonight. Fabio is here to start with his first talk. Enjoy. Thank you very much. Thank you. Yeah, welcome everybody. I'm Fabio. My colleague Salman was supposed to be as well. Unfortunately, he couldn't make it, which is really a pity because he's the guy who actually built most of this stuff. So yeah, but now you've got me. So yeah. Well, I'm going to talk about Observice a few months, what it is and what we built it and how we use it essentially. Before doing that, I just want to give you a little bit of a context on what is Observice in general and what it is used. I cannot have a feeling that not a lot of people know about it. So Observice is effectively a patchy HFS compliant distributed file system. So the code base was forked out of the patchy HFS and we made a couple of different changes over the course of the years. Some significant, some less significant, but ultimately there is mostly an architectural change and also some security differences between what is a patchy HFS and Observice. Ultimately, the APIs are the same. So the clients are compatible. So if you look at the actual implementation architecture of Observice, you can actually recognize some of the processes, some of the entities that you can also find in a patchy HFS. The difference is that the behave is slightly different. So in HFS and Observice you have the name notes. Those are responsible for interacting with the clients knowing the state of the file system, responding to the clients, giving access to the files and so on. The difference between what is a patchy HFS and Observice is that Observice, we took the metadata information, so the structural file system directories where the blocks are located, permissions and so on, and we moved it outside the memory of the of the name note process into the into what we call RONDB, which is essentially a distributed in-memory database that was forked out of MySQL and DB cluster. Specifically, MySQL and DB cluster, MySQL and DB cluster, if you're not familiar, is not a cluster of MySQL, but it's actually a different storage layer as well. So it's basically a distributed in-memory layer that basically stores the processed data, and you can do like really nice things. You can do like scaled up and down online. You can do upgrades and stuff like this, and it's in memory, so it's extremely fast. So moving this metadata information from the actual names on to the database allows us to basically have effectively stateless name-node dumps of S. So we can have as many as we want. We can take them down. We can stuff new ones, allows us to basically be way more flexible in terms of operations, in terms of management of the entire file system. On the bottom part, we have to say data management layer. Here we have process like the data nodes, right? It's the same concept in HFS. Data nodes are responsible for receiving streams of data from clients and storing them in local file system, and then give it back essentially, right? To deal with that kind of processes. Here we actually made some notifications, some architectural changes, in a sense that depending on where you deploy OpsFS, depending on whether you're deploying on-prem or in the cloud, you can actually decide to store the actual blocks on normal disks, like on the machines, but you can actually store them also on the cloud object stores. So you can store them on S3, you can store them on GCS, you can store them on Azure, Block Storage, and so on. So the data nodes themselves also become stateless essentially, right? And in this case, they act, they have two roles. They have a role of basically, yeah, not breaking the protocol essentially of the HFS protocol client, and also interacting as a cache, right? So every time you write something and then this is flushed down to the storage layer, so to the object stores, but it's also cached into the data node process themselves, so that if the clients keep writing and reading the same files, then obviously you don't have to go to the object stores, improving performance quite a lot. And while the last changes we made around security, and we're going to talk about a little bit later, but essentially that's OpsFL in a nutshell. Where it is used? Well, OpsFL is used as part of the broader platform which is called OpsWorx. OpsWorx is essentially a data platform for machine learning. It allows you to basically provide a bunch of different things which probably you're not interested in, to basically manage what we call features in machine learning. So essentially, you take a bunch of data for a bunch of different data sources, you extract signals to train a model on, and then you're basically storing those signals because the feature engineering process, the signal extraction process is quite compute intensive, so you want to store them and reuse them across multiple models and so on. And we have a dual system architecture, we have offline data for more like training new models and doing like batch inference, and then we have some online data for doing real-time operations. The OpsFL part is actually this, it's powering the offline feature store part, which is basically saying store all the data, historical data across many, many years across more models that is being used for training additional models and so on. Now, the problem that we're facing and the reason we started working on the on the on the on the fuels process then for OpsFS is the following. So the entire platform, the OpsFL feature store platform stands basically in between two different worlds, should we say, right? So on the other side we have like more traditional data engineering world where we have like application like Spark, Flink, maybe Beam and so on, which they have been built from day one essentially, supporting the OpsFS, like the HFS API, supporting the OpsFS API as well, right? So you can plug it in and they work essentially, right? On the other side, on the consumer side of the platform, well you have the entire data science world, right? And that's mostly basically built on top of Python libraries and you know, like they have been built relying on the fact that it is a log of our system and they don't necessarily interact with these different systems, whether it's Apache CFS, but also they don't maybe interact even with like object store or stuff like this, right? They only maybe read data from a local fast system, right? So we can actually have, if you take the libraries on the left, so if you take the libraries that are, let's say, data science library and generally the science processes, we can actually have, you know, two separate scenarios, right? We have a scenario where the libraries actually support what's called like Liby HFS. Liby HFS is essentially a wrapper for the, it's a JNI wrapper for the clients for the fast system and that allows us basically to actually interact with the fast system from a bunch of different libraries like PyArrow, Pandas and a bunch more actually do support reading from the, reading from HFS or OpsFS through the Liby HFS library. The problem is that even this scenario still requires access to a JVM, right? And in a world of their science where, you know, people do, like used to do like pip install a library and that then looks like a bunch of, like zip file and extracting on your local laptop, you know, configuring the JVM, bringing down the JVM, bringing down the OpsFS clients or HFS clients, it's quite, it's quite cumbersome, right? So that, that's kind of, it works but it's not the ideal case scenario, right? The other kind of libraries or tools that are essentially in the other campus, say, are tools that do not support Liby HFS at all. So one of the functionalities that you have in OpsFORX is basically, well, I want to clone a Git repository in OpsFORX so that we can actually run it and, you know, you can't just run Git on top of HFS or OpsFS, right? So there isn't really like a nice solution there. And so we started working on implementing a FuseFile system for OpsFS and we actually built it on top of some of the existing work that is open source and it's out there. All the work that we built on top is also open source. So the libraries and the entire application is written in Go. So that obviously removes the need for the JVM and it's built on basically three different projects. The first one is the FuseLibratesOff, so implemented interface for the FuseFile system. The second one is the OpsFS Go client, which is actually built on the HFS project from Collymark, which essentially implements the entire protocol for communicating with the HFS or OpsFS but using Go, right? So you can actually interact with the file system without the need of the JVM and then basically bring everything together in the OpsFS Go mount project, which is actually a forked from a project that Microsoft stopped working on, the HFS mount project. By the time we forked and started working on it, it was pretty much a POC. I think it was only allowing like read operation or something and then some on the team kind of expanded really nicely to be able to support much more. Now, the implementation of this solution actually has a bunch of different challenges and there are two essentially group of challenges, right? One is the API difference, what is the API that OpsFS and HFS actually provide and what the API that, you know, the POSIX API that are required by tools like Git and so on. And then the second one is the different, complete different security model, right? So we're going to look at how we bridge the gap between the two in the implementation essentially, right? So the first part is HFS is append only, right? So when you create a file, you cannot go in the middle of the file and add additional content, right? You can only append things to the file, right? And so this doesn't work if you open Veeam and you, you know, editing stuff around, then you can't actually just, you know, like write directly to HFS OpsFS. As I said, it doesn't support random writes, it does not support multiple writers. So when you open a file for write, you actually get the list on the file and you have the only one that can actually write there, right? And nobody else can actually write, which is not the behavior that you expect on, yeah, like from the POSIX API. The other aspect is the block size is quite huge. So that's like, you know, the blocks on OpsFS and HFS are configurable. You can make it as small as possible, but like the default behavior is to be quite big. It's like 6428 megabytes. Because the axis button and the write buttons make it that, it's much more performant to do that. And then we're going to talk about the security model in a second, right? So how does, how does the system work, right? So we have two scenarios, essentially. We have read scenario, read only mode, or like read and write scenario. For the read only mode, it's actually quite trivial. What basically happens actually, I can show you this diagram. I don't know if you can actually see from the back. But essentially what happens is that the process actually talks to the OpsFS fuse mount and asks, I want to read this file. Because the API from HFS and OpsFS allow you to basically, you know, do six and read and stuff like this. They are compatible. We can just forward the request to the remote storage essentially, right? So you open a file, you open a file, you read a set amount of bytes from a set amount of position. That is mapped to operations directly in OpsFS. So that's, yeah, pretty, pretty, pretty trivial to implement. The writing scenario is a little bit more complicated for the reasons I was mentioning earlier. So at the i level, what happens is that the remote file gets copied on the local file system. And we write it in a staging area. And so the processes like the Linux processes are actually going to write to these, to these like staging replica of the file. And then when either the file is flushed or the file is closed, then we actually upload the file back into the remote storage. So it looks like a little bit like this. You open the file and we open the file. You actually get back, you don't get, we don't download the file immediately, even if you ask for writing and open the file in writing. And the most, like, the reason is people are lazy essentially, right? In the sense of like when they open a file, like you say, you want to check out, you want to look at the file, you know, you might have opened Vim and open a file. And then at that point, you know, you don't want to write anything, but you have opened it, read and write. Because file and obfuscation are generally pretty large, we don't want to, you know, keep downloading random files for absolute, you know, reason, right? So what basically happens is that we delayed download the file until the first write comes in. When the first write comes in, the write is intercepted. And we basically, the first thing we do is basically download the file into the, into the, into the staging area. Well, from there, we can actually do the operations, right? Now, all the operations that happen, like all the read operation, all the writes operation, do not go to the, to the, to the remote storage anymore, but they actually act on the local version of the file. And, you know, this allows us to basically, you know, write random stuff at a random point in time, so random place in the, in the file, allows us to basically have multiple writers writing files, multiple readers and so on. So they all write as it was, like a local, a local file essentially, which, which it is, right? What happens is at some point, someone was going to call a sync or, you know, call a sync and then close the file. And what's going to happen is that when the sync happens, then the file is then back uploaded into the, into the remote storage, right? And that basically allows us to, yeah, add the file in, in OpsFS. When the last client, the last write client actually closes file, then we can actually remove the file from the staging directory, right? So if you have like five different clients working on it, and then, you know, one removes it, then we can let the last one closes it, then we can remove the, the, the file from the, from the, from the staging, from the staging directory. Now, the last part, the last difference in terms of like, compatibility between what the, what the, what the, you know, OpsFS and HFS API are, and the local file system are. Can I take a question a little bit later? Okay. That's fine. Okay, thanks. Yeah, so in, in that regard is, yeah, so the way this security works on, on OpsFS is slightly different than if you're familiar with HFS. You might be familiar with Kerberos. In Opsfs, we don't use Kerberos, we use certificates. So every user in the platform gets a certificate or actually gets more than the one, but it doesn't matter. Essentially, in the certificate itself, you know, we have the information about who the user is, and every time the user needs to do an operation with the, with the, with the file system and any other service in Opsfs, present a certificate, and the certificate is obviously verified based on the chain of trust that is established within Opsfs deployment. So this basically what happens at the high level, right? So every time the Opsfs fuse mount needs to talk to the, to the Opsfs remote storage, it has to present a certificate essentially. And this is something that we, we control in the way that we actually use the Opsfs fuse mount in, in Opsfs works. When we set up the mount point, we actually, you know, make sure that the mount point is set up with the certificates for that specific user so that, you know, if I, if I need access to a specific directory from a Python library, Opsfs set up the mount point and, and provide provision the certificate for, for, for my user so that someone else cannot, cannot necessarily use the same mount point and the same, and the same, and the same certificates. So this is controlled at the application level, not the, not necessarily the storage layer. All the operations that happen on this side, while the authenticated based on the certificate, the problem happens from, let's say, the Opsfs fuse mount to the, to the user side, to the, to the, let's say, Linux processes essentially, right? So what happens here is the following, so there is a, there is a mapping going on between the users in Opsfs and the user on the machine, right? The problem we, like the problem we had, the problem that, like this setup has is that you end up having a lot of users on Opsfs, right? My, our deployments might have, like, you know, 5,000 users all on the same deployment that, you know, results in way more groups than, than than 5,000. And so we cannot spend time and create them all the users, all the, all the, all the groups in, on the, on the machines. So the way we actually, the way we actually work in this situation is that when the Opsfs application needs access to, to, to, to, to, to mount point, a provision that mount point, it also makes sure it doesn't mount the entire file system, it mounts a specific sub-directory, and when it mounts a specific sub-directory before mounting it, it provisions the users that are within, that, that, their own files within that specific, the specific sub-directory. And the way it knows that is because in Opsfs, directories have a specific meaning, they are organized in a specific way, and so Opsfs application knows which users are, have access to specific sub-directory. So before actually, you know, mounting the, the file system, we actually provision all the user, provision all the groups, and then what basically Opsfs mount does is that, well, you know, a file here is owned by user Fabio, so there is a, there is a user on the machine, user Fabio with a specific UID, so the user ID of that file is going to be the, the same essentially. And again, the, the provision of the user is controlled by the, by the Opsfs application when they, when they, when it, when it's, it's necessary essentially. Now, there are a couple of, I would say, unsupported capabilities and things that we plan to address in the futures, more like limitations essentially. One thing I have supported at the moment are links, both out and soft links. Opsfs has supported for soft links in the background, but we never really used them in Opsfs, so we didn't have support here in Opsfs mount either. The challenge we have is around the users of these caches. Yeah, so essentially, you know, if you, if you're working with a, with a local file system, the kernel, you know, there's a pretty aggressive, you know, caching of the data and so on. The problem we have is that Opsfs is a multi-tent platform, so we have multiple users working on the potential of the same files, and so caching the files becomes a little bit problematic because if you have two users working on the same file, then like the different mount points are not going to be able to talk to each other, say, A, there is something that's changed here, and you need to reflect that in your cache. So at the moment, the caches are kind of disabled, but we're working on, on, on, on some solution to be able to get notifications and, and, and figure out that files have changed, right? And the reason, the reason they don't know is because there's different mount points, because each mount point is not certificate for that specific user, right? So the users are not sharing the same mount point, so changes, one user making changes is going to talk to a different mount point, and the user making, making changes essentially. The other thing that happens, if you, if you, if we go back to the right operation, when we upload the file, we upload the entire file. So there is no concept of, you know, uploading a specific block. The, the, the HFS API and the OPSF API does not allow you to basically say, you know, I know that, like a specific block has changed, I'm going to just replace that specific block, right? So the, this, this operation, if you're working with very, very hard files, then, then might become a problem. For the use cases that we use OPSFS mount within the OPSF platform, this is not a problem. Users are working with, like, small Python applications, or like generally speaking, smaller files, or when they are dealing with bigger files, they are dealing more, in more like a, in a, in a read process, not necessarily in a, in a writing, yeah, not going to end up writing a parquet file in beam, like several gigabytes of parquet files. So that's kind of it. That's kind of where we, where we stand. If you have any questions, that's, that's, you know, I can take them now. And thank you very much. Do you and practice have problems with applications ignoring the return value of close? The return value of close. No, so the question is, if we have problems with applications ignoring the return value of close, not at the moment, no. We had, with the way we use OPSFS mount is basically, we, we, we, we, we mount inside of containers, for instance, when you're doing, if you're running Jupyter notebooks, or if you're running great applications on, and we shut down the entire process, usually shut down the entire container, essentially. Right? So we, when, when, you know, the files gets closed and everything gets closed, um, shut down the entire mount point, essentially. That's because, not necessarily because it's necessary, but that's because usually, that's the use, like user experience and that people have in general. But you can't guarantee that the upload actually worked. You can't guarantee, come again, sorry. The last step. What happens if the upload file fails? If the upload file fails, try again, and then eventually, yeah, it's a simple, we give up, yeah. Yeah. So it seems that the retro machines that try to write open for writing and write through the same file independently, so obviously one of them wins and takes a lease and does download the file modification and upload. Yeah. What happens with other machines, or what does the process that tries to open the file for writing at the same time and write to each and so on? In this case, the last right wins. Like that's the problem that we have here, right? It's basically saying if we have, like multiple machines mounted in the same directory, they can't, like, and we're writing on the same file. I, the mount point doesn't, doesn't know that, like, you are changing the same, like my mount point doesn't know that you're changing the same file. So we upload the file, and then you upload the file as well, and your, your, your right space is essentially wins, essentially. And then, can we get? No, nobody's waiting for another one. But I'm like, you end up in like, in, you end up in a weird situation where I might not be able to see immediately your changes, and so I might be able to, I might re-resave my file and re-re-reprove my file, so then your changes get, get, get covered written again. So it becomes a little bit, a bit, a little bit like this. Yeah. Yeah. Yeah. Sorry. Uh, good question. Uh, in general, yes. Um, you might, like, you might not have, like, the security part of the, we didn't implement the CalBros part of the, the security part. So if, if you have a secure cluster, then you're probably not going to be able to, to use it. Or, yeah, you, you implement the CalBros part. Yeah. Yeah. It was a question in the back. No, there, there, there is, there are processes, yeah, so, yeah, thank you. Uh, the, the question is, uh, whether or not there are processes sharing the file. Uh, there are processes sharing the file, but you have, the problem is that you have multiple users writing on, on the same file, on different processes that do not know about each other. Yeah. It's also, you know, it's like the, the, the, the different mount points are, uh, that the, the question was about the directory metadata. It's also, it's like it's independent with the, it's independent with each other. They don't share mount points, no. Yeah. So if you create a file, um, then, yeah, but if you, if you do a less operation, then we go back to the, to the file system and that is, is, is reflected. But so, but they're not necessarily relying on the mount point, relying the obfuscates mount, going back to the, to the, to the, to the remote storage to get the new directory structure and so on. Yeah. Um, with this, uh, stage file writing, yeah. I mentioned that improves read performance for the client too, right? When it's actually a downloaded local file and it, do people use that? Like do they do a little write and then just get quick downloads? It, it, it does. Um, it does. That's, that's one of the, all that, like that's one of the other, that's one of the other reasons we kind of, the question, sorry, yeah, sorry. Uh, the, the question is around the, um, read performance when you're reading a file that you have, like, uh, like stored locally in the stage directory. Um, it does. Um, we don't have a specific number, um, but I have like some, like user experience with that. Um, when you have, um, when you have files that are on, on the remote storage, uh, even if they are, like, especially if you have smaller files, um, like maybe like a Jupyter notebook, this JSON file, like, you know, maybe a megabyte maximum or something, um, then it's the, the, the override of going and fetching it every time. It's, it's quite significant. If you have it locally, it's, it's, it's much more, uh, you can see it much more reactive. Yeah, there was a. I thought you said, uh, you, you delete the station file as soon as you close it. Yes. No, but if you, if you, if you, if you, if you have it open, uh, when you, when you keep writing it, then you, when you read it, you're not going to the, to the remote storage, you're reading from the, from the local, um, from the local, uh, yeah, from the local, from the local staging directory. Right. So if you, the only, the only, the only, the only time is, is if you're reading, if you're doing some read only operations, essentially, then at that point we don't download it, uh, mostly because, uh, in general, they'll be working with like pretty large files. And so the downloading process might, might not be necessary, right? Because if you open, let's say a parquet file, what happens is that you go at the end of the file, you just read the footer to figure out the schema, figure out where you, you need to go. And if maybe it's like a four gigabytes parquet file, you don't want to download four gigabytes to read that maybe a couple megabytes of metadata, essentially. Yeah. One more. Thank you very much. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.64, "text": " Good morning everyone. Thank you all for joining the first session of today. You're at the", "tokens": [50364, 2205, 2446, 1518, 13, 1044, 291, 439, 337, 5549, 264, 700, 5481, 295, 965, 13, 509, 434, 412, 264, 50896], "temperature": 0.0, "avg_logprob": -0.35064001816969653, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.47812891006469727}, {"id": 1, "seek": 0, "start": 10.64, "end": 15.280000000000001, "text": " software defined storage dev room. We'll have storage talks throughout the day until I think", "tokens": [50896, 4722, 7642, 6725, 1905, 1808, 13, 492, 603, 362, 6725, 6686, 3710, 264, 786, 1826, 286, 519, 51128], "temperature": 0.0, "avg_logprob": -0.35064001816969653, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.47812891006469727}, {"id": 2, "seek": 0, "start": 16.080000000000002, "end": 25.6, "text": " seven tonight. Fabio is here to start with his first talk. Enjoy. Thank you very much.", "tokens": [51168, 3407, 4440, 13, 17440, 1004, 307, 510, 281, 722, 365, 702, 700, 751, 13, 15411, 13, 1044, 291, 588, 709, 13, 51644], "temperature": 0.0, "avg_logprob": -0.35064001816969653, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.47812891006469727}, {"id": 3, "seek": 2560, "start": 26.560000000000002, "end": 28.080000000000002, "text": " Thank you.", "tokens": [50412, 1044, 291, 13, 50488], "temperature": 0.0, "avg_logprob": -0.3018523526478963, "compression_ratio": 1.4134615384615385, "no_speech_prob": 0.06512854248285294}, {"id": 4, "seek": 2560, "start": 30.560000000000002, "end": 36.480000000000004, "text": " Yeah, welcome everybody. I'm Fabio. My colleague Salman was supposed to be as well. Unfortunately,", "tokens": [50612, 865, 11, 2928, 2201, 13, 286, 478, 17440, 1004, 13, 1222, 13532, 5996, 1601, 390, 3442, 281, 312, 382, 731, 13, 8590, 11, 50908], "temperature": 0.0, "avg_logprob": -0.3018523526478963, "compression_ratio": 1.4134615384615385, "no_speech_prob": 0.06512854248285294}, {"id": 5, "seek": 2560, "start": 36.480000000000004, "end": 41.52, "text": " he couldn't make it, which is really a pity because he's the guy who actually built most of", "tokens": [50908, 415, 2809, 380, 652, 309, 11, 597, 307, 534, 257, 21103, 570, 415, 311, 264, 2146, 567, 767, 3094, 881, 295, 51160], "temperature": 0.0, "avg_logprob": -0.3018523526478963, "compression_ratio": 1.4134615384615385, "no_speech_prob": 0.06512854248285294}, {"id": 6, "seek": 2560, "start": 41.52, "end": 47.92, "text": " this stuff. So yeah, but now you've got me. So yeah. Well, I'm going to talk about Observice", "tokens": [51160, 341, 1507, 13, 407, 1338, 11, 457, 586, 291, 600, 658, 385, 13, 407, 1338, 13, 1042, 11, 286, 478, 516, 281, 751, 466, 20707, 25006, 51480], "temperature": 0.0, "avg_logprob": -0.3018523526478963, "compression_ratio": 1.4134615384615385, "no_speech_prob": 0.06512854248285294}, {"id": 7, "seek": 4792, "start": 48.0, "end": 53.68, "text": " a few months, what it is and what we built it and how we use it essentially.", "tokens": [50368, 257, 1326, 2493, 11, 437, 309, 307, 293, 437, 321, 3094, 309, 293, 577, 321, 764, 309, 4476, 13, 50652], "temperature": 0.0, "avg_logprob": -0.22345436260264406, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.06589342653751373}, {"id": 8, "seek": 4792, "start": 54.96, "end": 59.36, "text": " Before doing that, I just want to give you a little bit of a context on what is Observice in", "tokens": [50716, 4546, 884, 300, 11, 286, 445, 528, 281, 976, 291, 257, 707, 857, 295, 257, 4319, 322, 437, 307, 20707, 25006, 294, 50936], "temperature": 0.0, "avg_logprob": -0.22345436260264406, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.06589342653751373}, {"id": 9, "seek": 4792, "start": 59.36, "end": 63.92, "text": " general and what it is used. I cannot have a feeling that not a lot of people know about it.", "tokens": [50936, 2674, 293, 437, 309, 307, 1143, 13, 286, 2644, 362, 257, 2633, 300, 406, 257, 688, 295, 561, 458, 466, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.22345436260264406, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.06589342653751373}, {"id": 10, "seek": 4792, "start": 64.88, "end": 73.04, "text": " So Observice is effectively a patchy HFS compliant distributed file system. So the code base was", "tokens": [51212, 407, 20707, 25006, 307, 8659, 257, 9972, 88, 389, 29318, 36248, 12631, 3991, 1185, 13, 407, 264, 3089, 3096, 390, 51620], "temperature": 0.0, "avg_logprob": -0.22345436260264406, "compression_ratio": 1.5676855895196506, "no_speech_prob": 0.06589342653751373}, {"id": 11, "seek": 7304, "start": 73.04, "end": 78.08000000000001, "text": " forked out of the patchy HFS and we made a couple of different changes over the course of the years.", "tokens": [50364, 17716, 292, 484, 295, 264, 9972, 88, 389, 29318, 293, 321, 1027, 257, 1916, 295, 819, 2962, 670, 264, 1164, 295, 264, 924, 13, 50616], "temperature": 0.0, "avg_logprob": -0.14637971478839254, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.01900630258023739}, {"id": 12, "seek": 7304, "start": 79.44000000000001, "end": 84.72, "text": " Some significant, some less significant, but ultimately there is mostly an architectural", "tokens": [50684, 2188, 4776, 11, 512, 1570, 4776, 11, 457, 6284, 456, 307, 5240, 364, 26621, 50948], "temperature": 0.0, "avg_logprob": -0.14637971478839254, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.01900630258023739}, {"id": 13, "seek": 7304, "start": 84.72, "end": 90.80000000000001, "text": " change and also some security differences between what is a patchy HFS and Observice.", "tokens": [50948, 1319, 293, 611, 512, 3825, 7300, 1296, 437, 307, 257, 9972, 88, 389, 29318, 293, 20707, 25006, 13, 51252], "temperature": 0.0, "avg_logprob": -0.14637971478839254, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.01900630258023739}, {"id": 14, "seek": 7304, "start": 90.80000000000001, "end": 98.24000000000001, "text": " Ultimately, the APIs are the same. So the clients are compatible. So if you look at the", "tokens": [51252, 23921, 11, 264, 21445, 366, 264, 912, 13, 407, 264, 6982, 366, 18218, 13, 407, 498, 291, 574, 412, 264, 51624], "temperature": 0.0, "avg_logprob": -0.14637971478839254, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.01900630258023739}, {"id": 15, "seek": 9824, "start": 99.19999999999999, "end": 105.36, "text": " actual implementation architecture of Observice, you can actually recognize some of the", "tokens": [50412, 3539, 11420, 9482, 295, 20707, 25006, 11, 291, 393, 767, 5521, 512, 295, 264, 50720], "temperature": 0.0, "avg_logprob": -0.18834492055381216, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.00615299679338932}, {"id": 16, "seek": 9824, "start": 106.08, "end": 114.56, "text": " processes, some of the entities that you can also find in a patchy HFS. The difference is that", "tokens": [50756, 7555, 11, 512, 295, 264, 16667, 300, 291, 393, 611, 915, 294, 257, 9972, 88, 389, 29318, 13, 440, 2649, 307, 300, 51180], "temperature": 0.0, "avg_logprob": -0.18834492055381216, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.00615299679338932}, {"id": 17, "seek": 9824, "start": 114.56, "end": 118.8, "text": " the behave is slightly different. So in HFS and Observice you have the name notes. Those are", "tokens": [51180, 264, 15158, 307, 4748, 819, 13, 407, 294, 389, 29318, 293, 20707, 25006, 291, 362, 264, 1315, 5570, 13, 3950, 366, 51392], "temperature": 0.0, "avg_logprob": -0.18834492055381216, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.00615299679338932}, {"id": 18, "seek": 9824, "start": 118.8, "end": 124.39999999999999, "text": " responsible for interacting with the clients knowing the state of the file system, responding", "tokens": [51392, 6250, 337, 18017, 365, 264, 6982, 5276, 264, 1785, 295, 264, 3991, 1185, 11, 16670, 51672], "temperature": 0.0, "avg_logprob": -0.18834492055381216, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.00615299679338932}, {"id": 19, "seek": 12440, "start": 124.48, "end": 130.48000000000002, "text": " to the clients, giving access to the files and so on. The difference between what is a patchy HFS", "tokens": [50368, 281, 264, 6982, 11, 2902, 2105, 281, 264, 7098, 293, 370, 322, 13, 440, 2649, 1296, 437, 307, 257, 9972, 88, 389, 29318, 50668], "temperature": 0.0, "avg_logprob": -0.19265400845071542, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.009277275763452053}, {"id": 20, "seek": 12440, "start": 130.48000000000002, "end": 135.36, "text": " and Observice is that Observice, we took the metadata information, so the structural file", "tokens": [50668, 293, 20707, 25006, 307, 300, 20707, 25006, 11, 321, 1890, 264, 26603, 1589, 11, 370, 264, 15067, 3991, 50912], "temperature": 0.0, "avg_logprob": -0.19265400845071542, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.009277275763452053}, {"id": 21, "seek": 12440, "start": 135.36, "end": 140.4, "text": " system directories where the blocks are located, permissions and so on, and we moved it outside", "tokens": [50912, 1185, 5391, 530, 689, 264, 8474, 366, 6870, 11, 32723, 293, 370, 322, 11, 293, 321, 4259, 309, 2380, 51164], "temperature": 0.0, "avg_logprob": -0.19265400845071542, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.009277275763452053}, {"id": 22, "seek": 12440, "start": 140.4, "end": 145.84, "text": " the memory of the of the name note process into the into what we call RONDB, which is essentially", "tokens": [51164, 264, 4675, 295, 264, 295, 264, 1315, 3637, 1399, 666, 264, 666, 437, 321, 818, 497, 1928, 27735, 11, 597, 307, 4476, 51436], "temperature": 0.0, "avg_logprob": -0.19265400845071542, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.009277275763452053}, {"id": 23, "seek": 14584, "start": 146.32, "end": 153.6, "text": " a distributed in-memory database that was forked out of MySQL and DB cluster.", "tokens": [50388, 257, 12631, 294, 12, 17886, 827, 8149, 300, 390, 17716, 292, 484, 295, 1222, 39934, 293, 26754, 13630, 13, 50752], "temperature": 0.0, "avg_logprob": -0.18879153603001644, "compression_ratio": 1.8, "no_speech_prob": 0.02309514582157135}, {"id": 24, "seek": 14584, "start": 155.04, "end": 159.6, "text": " Specifically, MySQL and DB cluster, MySQL and DB cluster, if you're not familiar, is not a cluster", "tokens": [50824, 26058, 11, 1222, 39934, 293, 26754, 13630, 11, 1222, 39934, 293, 26754, 13630, 11, 498, 291, 434, 406, 4963, 11, 307, 406, 257, 13630, 51052], "temperature": 0.0, "avg_logprob": -0.18879153603001644, "compression_ratio": 1.8, "no_speech_prob": 0.02309514582157135}, {"id": 25, "seek": 14584, "start": 159.6, "end": 164.4, "text": " of MySQL, but it's actually a different storage layer as well. So it's basically a distributed", "tokens": [51052, 295, 1222, 39934, 11, 457, 309, 311, 767, 257, 819, 6725, 4583, 382, 731, 13, 407, 309, 311, 1936, 257, 12631, 51292], "temperature": 0.0, "avg_logprob": -0.18879153603001644, "compression_ratio": 1.8, "no_speech_prob": 0.02309514582157135}, {"id": 26, "seek": 14584, "start": 164.4, "end": 169.52, "text": " in-memory layer that basically stores the processed data, and you can do like really nice things.", "tokens": [51292, 294, 12, 17886, 827, 4583, 300, 1936, 9512, 264, 18846, 1412, 11, 293, 291, 393, 360, 411, 534, 1481, 721, 13, 51548], "temperature": 0.0, "avg_logprob": -0.18879153603001644, "compression_ratio": 1.8, "no_speech_prob": 0.02309514582157135}, {"id": 27, "seek": 16952, "start": 169.60000000000002, "end": 174.88000000000002, "text": " You can do like scaled up and down online. You can do upgrades and stuff like this,", "tokens": [50368, 509, 393, 360, 411, 36039, 493, 293, 760, 2950, 13, 509, 393, 360, 24868, 293, 1507, 411, 341, 11, 50632], "temperature": 0.0, "avg_logprob": -0.2500489267070642, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.007234141230583191}, {"id": 28, "seek": 16952, "start": 174.88000000000002, "end": 183.28, "text": " and it's in memory, so it's extremely fast. So moving this metadata information from the", "tokens": [50632, 293, 309, 311, 294, 4675, 11, 370, 309, 311, 4664, 2370, 13, 407, 2684, 341, 26603, 1589, 490, 264, 51052], "temperature": 0.0, "avg_logprob": -0.2500489267070642, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.007234141230583191}, {"id": 29, "seek": 16952, "start": 183.28, "end": 188.56, "text": " actual names on to the database allows us to basically have effectively stateless", "tokens": [51052, 3539, 5288, 322, 281, 264, 8149, 4045, 505, 281, 1936, 362, 8659, 2219, 4272, 51316], "temperature": 0.0, "avg_logprob": -0.2500489267070642, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.007234141230583191}, {"id": 30, "seek": 16952, "start": 189.76000000000002, "end": 193.36, "text": " name-node dumps of S. So we can have as many as we want. We can take them down. We can", "tokens": [51376, 1315, 12, 77, 1429, 11430, 82, 295, 318, 13, 407, 321, 393, 362, 382, 867, 382, 321, 528, 13, 492, 393, 747, 552, 760, 13, 492, 393, 51556], "temperature": 0.0, "avg_logprob": -0.2500489267070642, "compression_ratio": 1.6161137440758293, "no_speech_prob": 0.007234141230583191}, {"id": 31, "seek": 19336, "start": 194.0, "end": 199.84, "text": " stuff new ones, allows us to basically be way more flexible in terms of operations,", "tokens": [50396, 1507, 777, 2306, 11, 4045, 505, 281, 1936, 312, 636, 544, 11358, 294, 2115, 295, 7705, 11, 50688], "temperature": 0.0, "avg_logprob": -0.24601248332432338, "compression_ratio": 1.59375, "no_speech_prob": 0.0027886144816875458}, {"id": 32, "seek": 19336, "start": 199.84, "end": 206.56, "text": " in terms of management of the entire file system. On the bottom part, we have to say", "tokens": [50688, 294, 2115, 295, 4592, 295, 264, 2302, 3991, 1185, 13, 1282, 264, 2767, 644, 11, 321, 362, 281, 584, 51024], "temperature": 0.0, "avg_logprob": -0.24601248332432338, "compression_ratio": 1.59375, "no_speech_prob": 0.0027886144816875458}, {"id": 33, "seek": 19336, "start": 206.56, "end": 212.0, "text": " data management layer. Here we have process like the data nodes, right? It's the same concept in", "tokens": [51024, 1412, 4592, 4583, 13, 1692, 321, 362, 1399, 411, 264, 1412, 13891, 11, 558, 30, 467, 311, 264, 912, 3410, 294, 51296], "temperature": 0.0, "avg_logprob": -0.24601248332432338, "compression_ratio": 1.59375, "no_speech_prob": 0.0027886144816875458}, {"id": 34, "seek": 19336, "start": 213.04000000000002, "end": 218.08, "text": " HFS. Data nodes are responsible for receiving streams of data from clients and storing them", "tokens": [51348, 389, 29318, 13, 11888, 13891, 366, 6250, 337, 10040, 15842, 295, 1412, 490, 6982, 293, 26085, 552, 51600], "temperature": 0.0, "avg_logprob": -0.24601248332432338, "compression_ratio": 1.59375, "no_speech_prob": 0.0027886144816875458}, {"id": 35, "seek": 21808, "start": 218.08, "end": 223.28, "text": " in local file system, and then give it back essentially, right? To deal with that kind of", "tokens": [50364, 294, 2654, 3991, 1185, 11, 293, 550, 976, 309, 646, 4476, 11, 558, 30, 1407, 2028, 365, 300, 733, 295, 50624], "temperature": 0.0, "avg_logprob": -0.24789762496948242, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0023465666454285383}, {"id": 36, "seek": 21808, "start": 223.28, "end": 230.16000000000003, "text": " processes. Here we actually made some notifications, some architectural changes, in a sense that", "tokens": [50624, 7555, 13, 1692, 321, 767, 1027, 512, 13426, 11, 512, 26621, 2962, 11, 294, 257, 2020, 300, 50968], "temperature": 0.0, "avg_logprob": -0.24789762496948242, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0023465666454285383}, {"id": 37, "seek": 21808, "start": 230.72000000000003, "end": 235.76000000000002, "text": " depending on where you deploy OpsFS, depending on whether you're deploying on-prem or in the", "tokens": [50996, 5413, 322, 689, 291, 7274, 422, 1878, 29318, 11, 5413, 322, 1968, 291, 434, 34198, 322, 12, 29403, 420, 294, 264, 51248], "temperature": 0.0, "avg_logprob": -0.24789762496948242, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0023465666454285383}, {"id": 38, "seek": 21808, "start": 235.76000000000002, "end": 242.96, "text": " cloud, you can actually decide to store the actual blocks on normal disks, like on the machines,", "tokens": [51248, 4588, 11, 291, 393, 767, 4536, 281, 3531, 264, 3539, 8474, 322, 2710, 41617, 11, 411, 322, 264, 8379, 11, 51608], "temperature": 0.0, "avg_logprob": -0.24789762496948242, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.0023465666454285383}, {"id": 39, "seek": 24296, "start": 242.96, "end": 248.32000000000002, "text": " but you can actually store them also on the cloud object stores. So you can store them on", "tokens": [50364, 457, 291, 393, 767, 3531, 552, 611, 322, 264, 4588, 2657, 9512, 13, 407, 291, 393, 3531, 552, 322, 50632], "temperature": 0.0, "avg_logprob": -0.1788337351912159, "compression_ratio": 1.8365758754863812, "no_speech_prob": 0.0064792572520673275}, {"id": 40, "seek": 24296, "start": 248.88, "end": 255.44, "text": " S3, you can store them on GCS, you can store them on Azure, Block Storage, and so on. So the data", "tokens": [50660, 318, 18, 11, 291, 393, 3531, 552, 322, 460, 26283, 11, 291, 393, 3531, 552, 322, 11969, 11, 17500, 36308, 11, 293, 370, 322, 13, 407, 264, 1412, 50988], "temperature": 0.0, "avg_logprob": -0.1788337351912159, "compression_ratio": 1.8365758754863812, "no_speech_prob": 0.0064792572520673275}, {"id": 41, "seek": 24296, "start": 255.44, "end": 260.48, "text": " nodes themselves also become stateless essentially, right? And in this case, they act, they have two", "tokens": [50988, 13891, 2969, 611, 1813, 2219, 4272, 4476, 11, 558, 30, 400, 294, 341, 1389, 11, 436, 605, 11, 436, 362, 732, 51240], "temperature": 0.0, "avg_logprob": -0.1788337351912159, "compression_ratio": 1.8365758754863812, "no_speech_prob": 0.0064792572520673275}, {"id": 42, "seek": 24296, "start": 260.48, "end": 264.24, "text": " roles. They have a role of basically, yeah, not breaking the protocol essentially of the", "tokens": [51240, 9604, 13, 814, 362, 257, 3090, 295, 1936, 11, 1338, 11, 406, 7697, 264, 10336, 4476, 295, 264, 51428], "temperature": 0.0, "avg_logprob": -0.1788337351912159, "compression_ratio": 1.8365758754863812, "no_speech_prob": 0.0064792572520673275}, {"id": 43, "seek": 24296, "start": 264.8, "end": 271.2, "text": " HFS protocol client, and also interacting as a cache, right? So every time you write something", "tokens": [51456, 389, 29318, 10336, 6423, 11, 293, 611, 18017, 382, 257, 19459, 11, 558, 30, 407, 633, 565, 291, 2464, 746, 51776], "temperature": 0.0, "avg_logprob": -0.1788337351912159, "compression_ratio": 1.8365758754863812, "no_speech_prob": 0.0064792572520673275}, {"id": 44, "seek": 27120, "start": 271.2, "end": 276.71999999999997, "text": " and then this is flushed down to the storage layer, so to the object stores, but it's also", "tokens": [50364, 293, 550, 341, 307, 19568, 292, 760, 281, 264, 6725, 4583, 11, 370, 281, 264, 2657, 9512, 11, 457, 309, 311, 611, 50640], "temperature": 0.0, "avg_logprob": -0.16400212199748063, "compression_ratio": 1.6503496503496504, "no_speech_prob": 0.005127609707415104}, {"id": 45, "seek": 27120, "start": 276.71999999999997, "end": 281.2, "text": " cached into the data node process themselves, so that if the clients keep writing and reading", "tokens": [50640, 269, 15095, 666, 264, 1412, 9984, 1399, 2969, 11, 370, 300, 498, 264, 6982, 1066, 3579, 293, 3760, 50864], "temperature": 0.0, "avg_logprob": -0.16400212199748063, "compression_ratio": 1.6503496503496504, "no_speech_prob": 0.005127609707415104}, {"id": 46, "seek": 27120, "start": 281.2, "end": 286.08, "text": " the same files, then obviously you don't have to go to the object stores, improving performance quite", "tokens": [50864, 264, 912, 7098, 11, 550, 2745, 291, 500, 380, 362, 281, 352, 281, 264, 2657, 9512, 11, 11470, 3389, 1596, 51108], "temperature": 0.0, "avg_logprob": -0.16400212199748063, "compression_ratio": 1.6503496503496504, "no_speech_prob": 0.005127609707415104}, {"id": 47, "seek": 27120, "start": 286.08, "end": 293.44, "text": " a lot. And while the last changes we made around security, and we're going to talk about a little", "tokens": [51108, 257, 688, 13, 400, 1339, 264, 1036, 2962, 321, 1027, 926, 3825, 11, 293, 321, 434, 516, 281, 751, 466, 257, 707, 51476], "temperature": 0.0, "avg_logprob": -0.16400212199748063, "compression_ratio": 1.6503496503496504, "no_speech_prob": 0.005127609707415104}, {"id": 48, "seek": 27120, "start": 293.44, "end": 301.12, "text": " bit later, but essentially that's OpsFL in a nutshell. Where it is used? Well, OpsFL is", "tokens": [51476, 857, 1780, 11, 457, 4476, 300, 311, 422, 1878, 31455, 294, 257, 37711, 13, 2305, 309, 307, 1143, 30, 1042, 11, 422, 1878, 31455, 307, 51860], "temperature": 0.0, "avg_logprob": -0.16400212199748063, "compression_ratio": 1.6503496503496504, "no_speech_prob": 0.005127609707415104}, {"id": 49, "seek": 30112, "start": 301.36, "end": 307.12, "text": " used as part of the broader platform which is called OpsWorx. OpsWorx is essentially a data", "tokens": [50376, 1143, 382, 644, 295, 264, 13227, 3663, 597, 307, 1219, 422, 1878, 54, 284, 87, 13, 422, 1878, 54, 284, 87, 307, 4476, 257, 1412, 50664], "temperature": 0.0, "avg_logprob": -0.1442696134620738, "compression_ratio": 1.8714859437751004, "no_speech_prob": 0.002129271160811186}, {"id": 50, "seek": 30112, "start": 307.12, "end": 312.0, "text": " platform for machine learning. It allows you to basically provide a bunch of different things", "tokens": [50664, 3663, 337, 3479, 2539, 13, 467, 4045, 291, 281, 1936, 2893, 257, 3840, 295, 819, 721, 50908], "temperature": 0.0, "avg_logprob": -0.1442696134620738, "compression_ratio": 1.8714859437751004, "no_speech_prob": 0.002129271160811186}, {"id": 51, "seek": 30112, "start": 312.0, "end": 316.64, "text": " which probably you're not interested in, to basically manage what we call features in machine", "tokens": [50908, 597, 1391, 291, 434, 406, 3102, 294, 11, 281, 1936, 3067, 437, 321, 818, 4122, 294, 3479, 51140], "temperature": 0.0, "avg_logprob": -0.1442696134620738, "compression_ratio": 1.8714859437751004, "no_speech_prob": 0.002129271160811186}, {"id": 52, "seek": 30112, "start": 316.64, "end": 320.16, "text": " learning. So essentially, you take a bunch of data for a bunch of different data sources, you", "tokens": [51140, 2539, 13, 407, 4476, 11, 291, 747, 257, 3840, 295, 1412, 337, 257, 3840, 295, 819, 1412, 7139, 11, 291, 51316], "temperature": 0.0, "avg_logprob": -0.1442696134620738, "compression_ratio": 1.8714859437751004, "no_speech_prob": 0.002129271160811186}, {"id": 53, "seek": 30112, "start": 320.16, "end": 326.4, "text": " extract signals to train a model on, and then you're basically storing those signals because", "tokens": [51316, 8947, 12354, 281, 3847, 257, 2316, 322, 11, 293, 550, 291, 434, 1936, 26085, 729, 12354, 570, 51628], "temperature": 0.0, "avg_logprob": -0.1442696134620738, "compression_ratio": 1.8714859437751004, "no_speech_prob": 0.002129271160811186}, {"id": 54, "seek": 32640, "start": 326.4, "end": 331.44, "text": " the feature engineering process, the signal extraction process is quite compute intensive,", "tokens": [50364, 264, 4111, 7043, 1399, 11, 264, 6358, 30197, 1399, 307, 1596, 14722, 18957, 11, 50616], "temperature": 0.0, "avg_logprob": -0.16551104795585558, "compression_ratio": 1.7084870848708487, "no_speech_prob": 0.0026277571450918913}, {"id": 55, "seek": 32640, "start": 331.44, "end": 337.35999999999996, "text": " so you want to store them and reuse them across multiple models and so on. And we have a dual", "tokens": [50616, 370, 291, 528, 281, 3531, 552, 293, 26225, 552, 2108, 3866, 5245, 293, 370, 322, 13, 400, 321, 362, 257, 11848, 50912], "temperature": 0.0, "avg_logprob": -0.16551104795585558, "compression_ratio": 1.7084870848708487, "no_speech_prob": 0.0026277571450918913}, {"id": 56, "seek": 32640, "start": 337.35999999999996, "end": 342.32, "text": " system architecture, we have offline data for more like training new models and doing like", "tokens": [50912, 1185, 9482, 11, 321, 362, 21857, 1412, 337, 544, 411, 3097, 777, 5245, 293, 884, 411, 51160], "temperature": 0.0, "avg_logprob": -0.16551104795585558, "compression_ratio": 1.7084870848708487, "no_speech_prob": 0.0026277571450918913}, {"id": 57, "seek": 32640, "start": 342.32, "end": 347.59999999999997, "text": " batch inference, and then we have some online data for doing real-time operations. The OpsFL", "tokens": [51160, 15245, 38253, 11, 293, 550, 321, 362, 512, 2950, 1412, 337, 884, 957, 12, 3766, 7705, 13, 440, 422, 1878, 31455, 51424], "temperature": 0.0, "avg_logprob": -0.16551104795585558, "compression_ratio": 1.7084870848708487, "no_speech_prob": 0.0026277571450918913}, {"id": 58, "seek": 32640, "start": 347.59999999999997, "end": 353.44, "text": " part is actually this, it's powering the offline feature store part, which is basically saying", "tokens": [51424, 644, 307, 767, 341, 11, 309, 311, 1347, 278, 264, 21857, 4111, 3531, 644, 11, 597, 307, 1936, 1566, 51716], "temperature": 0.0, "avg_logprob": -0.16551104795585558, "compression_ratio": 1.7084870848708487, "no_speech_prob": 0.0026277571450918913}, {"id": 59, "seek": 35344, "start": 353.52, "end": 359.28, "text": " store all the data, historical data across many, many years across more models that is being used", "tokens": [50368, 3531, 439, 264, 1412, 11, 8584, 1412, 2108, 867, 11, 867, 924, 2108, 544, 5245, 300, 307, 885, 1143, 50656], "temperature": 0.0, "avg_logprob": -0.23809534853154962, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.000811994425021112}, {"id": 60, "seek": 35344, "start": 359.28, "end": 365.68, "text": " for training additional models and so on. Now, the problem that we're facing and the reason we", "tokens": [50656, 337, 3097, 4497, 5245, 293, 370, 322, 13, 823, 11, 264, 1154, 300, 321, 434, 7170, 293, 264, 1778, 321, 50976], "temperature": 0.0, "avg_logprob": -0.23809534853154962, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.000811994425021112}, {"id": 61, "seek": 35344, "start": 365.68, "end": 371.36, "text": " started working on the on the on the on the fuels process then for OpsFS is the following.", "tokens": [50976, 1409, 1364, 322, 264, 322, 264, 322, 264, 322, 264, 24616, 1399, 550, 337, 422, 1878, 29318, 307, 264, 3480, 13, 51260], "temperature": 0.0, "avg_logprob": -0.23809534853154962, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.000811994425021112}, {"id": 62, "seek": 35344, "start": 371.92, "end": 378.56, "text": " So the entire platform, the OpsFL feature store platform stands basically in between two different", "tokens": [51288, 407, 264, 2302, 3663, 11, 264, 422, 1878, 31455, 4111, 3531, 3663, 7382, 1936, 294, 1296, 732, 819, 51620], "temperature": 0.0, "avg_logprob": -0.23809534853154962, "compression_ratio": 1.7053571428571428, "no_speech_prob": 0.000811994425021112}, {"id": 63, "seek": 37856, "start": 378.56, "end": 383.12, "text": " worlds, should we say, right? So on the other side we have like more traditional data engineering", "tokens": [50364, 13401, 11, 820, 321, 584, 11, 558, 30, 407, 322, 264, 661, 1252, 321, 362, 411, 544, 5164, 1412, 7043, 50592], "temperature": 0.0, "avg_logprob": -0.1760535910109843, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.036045774817466736}, {"id": 64, "seek": 37856, "start": 383.12, "end": 388.32, "text": " world where we have like application like Spark, Flink, maybe Beam and so on, which they have been", "tokens": [50592, 1002, 689, 321, 362, 411, 3861, 411, 23424, 11, 3235, 475, 11, 1310, 40916, 293, 370, 322, 11, 597, 436, 362, 668, 50852], "temperature": 0.0, "avg_logprob": -0.1760535910109843, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.036045774817466736}, {"id": 65, "seek": 37856, "start": 388.32, "end": 396.96, "text": " built from day one essentially, supporting the OpsFS, like the HFS API, supporting the OpsFS", "tokens": [50852, 3094, 490, 786, 472, 4476, 11, 7231, 264, 422, 1878, 29318, 11, 411, 264, 389, 29318, 9362, 11, 7231, 264, 422, 1878, 29318, 51284], "temperature": 0.0, "avg_logprob": -0.1760535910109843, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.036045774817466736}, {"id": 66, "seek": 37856, "start": 396.96, "end": 402.72, "text": " API as well, right? So you can plug it in and they work essentially, right? On the other side,", "tokens": [51284, 9362, 382, 731, 11, 558, 30, 407, 291, 393, 5452, 309, 294, 293, 436, 589, 4476, 11, 558, 30, 1282, 264, 661, 1252, 11, 51572], "temperature": 0.0, "avg_logprob": -0.1760535910109843, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.036045774817466736}, {"id": 67, "seek": 37856, "start": 402.72, "end": 406.8, "text": " on the consumer side of the platform, well you have the entire data science world, right? And", "tokens": [51572, 322, 264, 9711, 1252, 295, 264, 3663, 11, 731, 291, 362, 264, 2302, 1412, 3497, 1002, 11, 558, 30, 400, 51776], "temperature": 0.0, "avg_logprob": -0.1760535910109843, "compression_ratio": 1.817490494296578, "no_speech_prob": 0.036045774817466736}, {"id": 68, "seek": 40680, "start": 406.8, "end": 413.12, "text": " that's mostly basically built on top of Python libraries and you know, like they have been built", "tokens": [50364, 300, 311, 5240, 1936, 3094, 322, 1192, 295, 15329, 15148, 293, 291, 458, 11, 411, 436, 362, 668, 3094, 50680], "temperature": 0.0, "avg_logprob": -0.1731451946756114, "compression_ratio": 1.7896678966789668, "no_speech_prob": 0.00429117027670145}, {"id": 69, "seek": 40680, "start": 413.92, "end": 417.92, "text": " relying on the fact that it is a log of our system and they don't necessarily interact with these", "tokens": [50720, 24140, 322, 264, 1186, 300, 309, 307, 257, 3565, 295, 527, 1185, 293, 436, 500, 380, 4725, 4648, 365, 613, 50920], "temperature": 0.0, "avg_logprob": -0.1731451946756114, "compression_ratio": 1.7896678966789668, "no_speech_prob": 0.00429117027670145}, {"id": 70, "seek": 40680, "start": 417.92, "end": 423.12, "text": " different systems, whether it's Apache CFS, but also they don't maybe interact even with like", "tokens": [50920, 819, 3652, 11, 1968, 309, 311, 46597, 21792, 50, 11, 457, 611, 436, 500, 380, 1310, 4648, 754, 365, 411, 51180], "temperature": 0.0, "avg_logprob": -0.1731451946756114, "compression_ratio": 1.7896678966789668, "no_speech_prob": 0.00429117027670145}, {"id": 71, "seek": 40680, "start": 423.12, "end": 427.52, "text": " object store or stuff like this, right? They only maybe read data from a local fast system, right?", "tokens": [51180, 2657, 3531, 420, 1507, 411, 341, 11, 558, 30, 814, 787, 1310, 1401, 1412, 490, 257, 2654, 2370, 1185, 11, 558, 30, 51400], "temperature": 0.0, "avg_logprob": -0.1731451946756114, "compression_ratio": 1.7896678966789668, "no_speech_prob": 0.00429117027670145}, {"id": 72, "seek": 40680, "start": 428.16, "end": 433.04, "text": " So we can actually have, if you take the libraries on the left, so if you take the libraries that", "tokens": [51432, 407, 321, 393, 767, 362, 11, 498, 291, 747, 264, 15148, 322, 264, 1411, 11, 370, 498, 291, 747, 264, 15148, 300, 51676], "temperature": 0.0, "avg_logprob": -0.1731451946756114, "compression_ratio": 1.7896678966789668, "no_speech_prob": 0.00429117027670145}, {"id": 73, "seek": 43304, "start": 433.04, "end": 437.92, "text": " are, let's say, data science library and generally the science processes, we can actually have, you", "tokens": [50364, 366, 11, 718, 311, 584, 11, 1412, 3497, 6405, 293, 5101, 264, 3497, 7555, 11, 321, 393, 767, 362, 11, 291, 50608], "temperature": 0.0, "avg_logprob": -0.1696086904054047, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.006189150270074606}, {"id": 74, "seek": 43304, "start": 437.92, "end": 444.56, "text": " know, two separate scenarios, right? We have a scenario where the libraries actually support", "tokens": [50608, 458, 11, 732, 4994, 15077, 11, 558, 30, 492, 362, 257, 9005, 689, 264, 15148, 767, 1406, 50940], "temperature": 0.0, "avg_logprob": -0.1696086904054047, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.006189150270074606}, {"id": 75, "seek": 43304, "start": 444.56, "end": 454.56, "text": " what's called like Liby HFS. Liby HFS is essentially a wrapper for the, it's a JNI wrapper for the", "tokens": [50940, 437, 311, 1219, 411, 15834, 88, 389, 29318, 13, 15834, 88, 389, 29318, 307, 4476, 257, 46906, 337, 264, 11, 309, 311, 257, 508, 42496, 46906, 337, 264, 51440], "temperature": 0.0, "avg_logprob": -0.1696086904054047, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.006189150270074606}, {"id": 76, "seek": 43304, "start": 455.36, "end": 461.12, "text": " clients for the fast system and that allows us basically to actually interact with the fast system", "tokens": [51480, 6982, 337, 264, 2370, 1185, 293, 300, 4045, 505, 1936, 281, 767, 4648, 365, 264, 2370, 1185, 51768], "temperature": 0.0, "avg_logprob": -0.1696086904054047, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.006189150270074606}, {"id": 77, "seek": 46112, "start": 461.12, "end": 466.0, "text": " from a bunch of different libraries like PyArrow, Pandas and a bunch more actually do support", "tokens": [50364, 490, 257, 3840, 295, 819, 15148, 411, 9953, 10683, 1892, 11, 16995, 296, 293, 257, 3840, 544, 767, 360, 1406, 50608], "temperature": 0.0, "avg_logprob": -0.20274456892863357, "compression_ratio": 1.5778688524590163, "no_speech_prob": 0.0055459048599004745}, {"id": 78, "seek": 46112, "start": 467.12, "end": 474.48, "text": " reading from the, reading from HFS or OpsFS through the Liby HFS library. The problem is", "tokens": [50664, 3760, 490, 264, 11, 3760, 490, 389, 29318, 420, 422, 1878, 29318, 807, 264, 15834, 88, 389, 29318, 6405, 13, 440, 1154, 307, 51032], "temperature": 0.0, "avg_logprob": -0.20274456892863357, "compression_ratio": 1.5778688524590163, "no_speech_prob": 0.0055459048599004745}, {"id": 79, "seek": 46112, "start": 475.68, "end": 482.24, "text": " that even this scenario still requires access to a JVM, right? And in a world of their science where,", "tokens": [51092, 300, 754, 341, 9005, 920, 7029, 2105, 281, 257, 508, 53, 44, 11, 558, 30, 400, 294, 257, 1002, 295, 641, 3497, 689, 11, 51420], "temperature": 0.0, "avg_logprob": -0.20274456892863357, "compression_ratio": 1.5778688524590163, "no_speech_prob": 0.0055459048599004745}, {"id": 80, "seek": 46112, "start": 482.24, "end": 487.36, "text": " you know, people do, like used to do like pip install a library and that then looks like a bunch of,", "tokens": [51420, 291, 458, 11, 561, 360, 11, 411, 1143, 281, 360, 411, 8489, 3625, 257, 6405, 293, 300, 550, 1542, 411, 257, 3840, 295, 11, 51676], "temperature": 0.0, "avg_logprob": -0.20274456892863357, "compression_ratio": 1.5778688524590163, "no_speech_prob": 0.0055459048599004745}, {"id": 81, "seek": 48736, "start": 487.36, "end": 492.56, "text": " like zip file and extracting on your local laptop, you know, configuring the JVM, bringing down the", "tokens": [50364, 411, 20730, 3991, 293, 49844, 322, 428, 2654, 10732, 11, 291, 458, 11, 6662, 1345, 264, 508, 53, 44, 11, 5062, 760, 264, 50624], "temperature": 0.0, "avg_logprob": -0.17054682131166812, "compression_ratio": 1.723021582733813, "no_speech_prob": 0.0038391731213778257}, {"id": 82, "seek": 48736, "start": 492.56, "end": 499.2, "text": " JVM, bringing down the OpsFS clients or HFS clients, it's quite, it's quite cumbersome, right?", "tokens": [50624, 508, 53, 44, 11, 5062, 760, 264, 422, 1878, 29318, 6982, 420, 389, 29318, 6982, 11, 309, 311, 1596, 11, 309, 311, 1596, 12713, 1616, 423, 11, 558, 30, 50956], "temperature": 0.0, "avg_logprob": -0.17054682131166812, "compression_ratio": 1.723021582733813, "no_speech_prob": 0.0038391731213778257}, {"id": 83, "seek": 48736, "start": 499.2, "end": 505.04, "text": " So that, that's kind of, it works but it's not the ideal case scenario, right? The other kind of", "tokens": [50956, 407, 300, 11, 300, 311, 733, 295, 11, 309, 1985, 457, 309, 311, 406, 264, 7157, 1389, 9005, 11, 558, 30, 440, 661, 733, 295, 51248], "temperature": 0.0, "avg_logprob": -0.17054682131166812, "compression_ratio": 1.723021582733813, "no_speech_prob": 0.0038391731213778257}, {"id": 84, "seek": 48736, "start": 505.04, "end": 511.52000000000004, "text": " libraries or tools that are essentially in the other campus, say, are tools that do not support", "tokens": [51248, 15148, 420, 3873, 300, 366, 4476, 294, 264, 661, 4828, 11, 584, 11, 366, 3873, 300, 360, 406, 1406, 51572], "temperature": 0.0, "avg_logprob": -0.17054682131166812, "compression_ratio": 1.723021582733813, "no_speech_prob": 0.0038391731213778257}, {"id": 85, "seek": 48736, "start": 511.52000000000004, "end": 516.24, "text": " Liby HFS at all. So one of the functionalities that you have in OpsFORX is basically, well,", "tokens": [51572, 15834, 88, 389, 29318, 412, 439, 13, 407, 472, 295, 264, 11745, 1088, 300, 291, 362, 294, 422, 1878, 37, 2483, 55, 307, 1936, 11, 731, 11, 51808], "temperature": 0.0, "avg_logprob": -0.17054682131166812, "compression_ratio": 1.723021582733813, "no_speech_prob": 0.0038391731213778257}, {"id": 86, "seek": 51624, "start": 516.24, "end": 521.84, "text": " I want to clone a Git repository in OpsFORX so that we can actually run it and, you know, you can't", "tokens": [50364, 286, 528, 281, 26506, 257, 16939, 25841, 294, 422, 1878, 37, 2483, 55, 370, 300, 321, 393, 767, 1190, 309, 293, 11, 291, 458, 11, 291, 393, 380, 50644], "temperature": 0.0, "avg_logprob": -0.14616619144474063, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0032454030588269234}, {"id": 87, "seek": 51624, "start": 521.84, "end": 527.44, "text": " just run Git on top of HFS or OpsFS, right? So there isn't really like a nice solution there.", "tokens": [50644, 445, 1190, 16939, 322, 1192, 295, 389, 29318, 420, 422, 1878, 29318, 11, 558, 30, 407, 456, 1943, 380, 534, 411, 257, 1481, 3827, 456, 13, 50924], "temperature": 0.0, "avg_logprob": -0.14616619144474063, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0032454030588269234}, {"id": 88, "seek": 51624, "start": 528.24, "end": 535.36, "text": " And so we started working on implementing a FuseFile system for OpsFS and we actually built it on top", "tokens": [50964, 400, 370, 321, 1409, 1364, 322, 18114, 257, 479, 438, 37, 794, 1185, 337, 422, 1878, 29318, 293, 321, 767, 3094, 309, 322, 1192, 51320], "temperature": 0.0, "avg_logprob": -0.14616619144474063, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0032454030588269234}, {"id": 89, "seek": 51624, "start": 535.36, "end": 540.32, "text": " of some of the existing work that is open source and it's out there. All the work that we built on", "tokens": [51320, 295, 512, 295, 264, 6741, 589, 300, 307, 1269, 4009, 293, 309, 311, 484, 456, 13, 1057, 264, 589, 300, 321, 3094, 322, 51568], "temperature": 0.0, "avg_logprob": -0.14616619144474063, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.0032454030588269234}, {"id": 90, "seek": 54032, "start": 540.32, "end": 546.48, "text": " top is also open source. So the libraries and the entire application is written in Go. So that obviously", "tokens": [50364, 1192, 307, 611, 1269, 4009, 13, 407, 264, 15148, 293, 264, 2302, 3861, 307, 3720, 294, 1037, 13, 407, 300, 2745, 50672], "temperature": 0.0, "avg_logprob": -0.16258715619944564, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.010926567018032074}, {"id": 91, "seek": 54032, "start": 546.48, "end": 551.7600000000001, "text": " removes the need for the JVM and it's built on basically three different projects. The first one", "tokens": [50672, 30445, 264, 643, 337, 264, 508, 53, 44, 293, 309, 311, 3094, 322, 1936, 1045, 819, 4455, 13, 440, 700, 472, 50936], "temperature": 0.0, "avg_logprob": -0.16258715619944564, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.010926567018032074}, {"id": 92, "seek": 54032, "start": 551.7600000000001, "end": 559.0400000000001, "text": " is the FuseLibratesOff, so implemented interface for the FuseFile system. The second one is the", "tokens": [50936, 307, 264, 479, 438, 43, 6414, 1024, 29745, 11, 370, 12270, 9226, 337, 264, 479, 438, 37, 794, 1185, 13, 440, 1150, 472, 307, 264, 51300], "temperature": 0.0, "avg_logprob": -0.16258715619944564, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.010926567018032074}, {"id": 93, "seek": 54032, "start": 559.0400000000001, "end": 566.72, "text": " OpsFS Go client, which is actually built on the HFS project from Collymark, which essentially", "tokens": [51300, 422, 1878, 29318, 1037, 6423, 11, 597, 307, 767, 3094, 322, 264, 389, 29318, 1716, 490, 4586, 4199, 809, 11, 597, 4476, 51684], "temperature": 0.0, "avg_logprob": -0.16258715619944564, "compression_ratio": 1.615702479338843, "no_speech_prob": 0.010926567018032074}, {"id": 94, "seek": 56672, "start": 566.72, "end": 573.6, "text": " implements the entire protocol for communicating with the HFS or OpsFS but using Go, right? So you", "tokens": [50364, 704, 17988, 264, 2302, 10336, 337, 17559, 365, 264, 389, 29318, 420, 422, 1878, 29318, 457, 1228, 1037, 11, 558, 30, 407, 291, 50708], "temperature": 0.0, "avg_logprob": -0.135344127813975, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.01261557824909687}, {"id": 95, "seek": 56672, "start": 573.6, "end": 579.12, "text": " can actually interact with the file system without the need of the JVM and then basically bring everything", "tokens": [50708, 393, 767, 4648, 365, 264, 3991, 1185, 1553, 264, 643, 295, 264, 508, 53, 44, 293, 550, 1936, 1565, 1203, 50984], "temperature": 0.0, "avg_logprob": -0.135344127813975, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.01261557824909687}, {"id": 96, "seek": 56672, "start": 579.12, "end": 586.4, "text": " together in the OpsFS Go mount project, which is actually a forked from a project that Microsoft", "tokens": [50984, 1214, 294, 264, 422, 1878, 29318, 1037, 3746, 1716, 11, 597, 307, 767, 257, 17716, 292, 490, 257, 1716, 300, 8116, 51348], "temperature": 0.0, "avg_logprob": -0.135344127813975, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.01261557824909687}, {"id": 97, "seek": 56672, "start": 586.4, "end": 591.84, "text": " stopped working on, the HFS mount project. By the time we forked and started working on it,", "tokens": [51348, 5936, 1364, 322, 11, 264, 389, 29318, 3746, 1716, 13, 3146, 264, 565, 321, 17716, 292, 293, 1409, 1364, 322, 309, 11, 51620], "temperature": 0.0, "avg_logprob": -0.135344127813975, "compression_ratio": 1.6694915254237288, "no_speech_prob": 0.01261557824909687}, {"id": 98, "seek": 59184, "start": 591.84, "end": 597.36, "text": " it was pretty much a POC. I think it was only allowing like read operation or something", "tokens": [50364, 309, 390, 1238, 709, 257, 22299, 34, 13, 286, 519, 309, 390, 787, 8293, 411, 1401, 6916, 420, 746, 50640], "temperature": 0.0, "avg_logprob": -0.12466436479149795, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.004606526345014572}, {"id": 99, "seek": 59184, "start": 597.36, "end": 602.4, "text": " and then some on the team kind of expanded really nicely to be able to support much more.", "tokens": [50640, 293, 550, 512, 322, 264, 1469, 733, 295, 14342, 534, 9594, 281, 312, 1075, 281, 1406, 709, 544, 13, 50892], "temperature": 0.0, "avg_logprob": -0.12466436479149795, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.004606526345014572}, {"id": 100, "seek": 59184, "start": 603.6800000000001, "end": 609.9200000000001, "text": " Now, the implementation of this solution actually has a bunch of different challenges", "tokens": [50956, 823, 11, 264, 11420, 295, 341, 3827, 767, 575, 257, 3840, 295, 819, 4759, 51268], "temperature": 0.0, "avg_logprob": -0.12466436479149795, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.004606526345014572}, {"id": 101, "seek": 59184, "start": 609.9200000000001, "end": 615.52, "text": " and there are two essentially group of challenges, right? One is the API difference, what is the", "tokens": [51268, 293, 456, 366, 732, 4476, 1594, 295, 4759, 11, 558, 30, 1485, 307, 264, 9362, 2649, 11, 437, 307, 264, 51548], "temperature": 0.0, "avg_logprob": -0.12466436479149795, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.004606526345014572}, {"id": 102, "seek": 61552, "start": 615.6, "end": 623.1999999999999, "text": " API that OpsFS and HFS actually provide and what the API that, you know, the POSIX API that", "tokens": [50368, 9362, 300, 422, 1878, 29318, 293, 389, 29318, 767, 2893, 293, 437, 264, 9362, 300, 11, 291, 458, 11, 264, 430, 4367, 21124, 9362, 300, 50748], "temperature": 0.0, "avg_logprob": -0.20404251334593468, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0040319389663636684}, {"id": 103, "seek": 61552, "start": 623.1999999999999, "end": 630.16, "text": " are required by tools like Git and so on. And then the second one is the different,", "tokens": [50748, 366, 4739, 538, 3873, 411, 16939, 293, 370, 322, 13, 400, 550, 264, 1150, 472, 307, 264, 819, 11, 51096], "temperature": 0.0, "avg_logprob": -0.20404251334593468, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0040319389663636684}, {"id": 104, "seek": 61552, "start": 630.16, "end": 633.84, "text": " complete different security model, right? So we're going to look at how we bridge the gap between the", "tokens": [51096, 3566, 819, 3825, 2316, 11, 558, 30, 407, 321, 434, 516, 281, 574, 412, 577, 321, 7283, 264, 7417, 1296, 264, 51280], "temperature": 0.0, "avg_logprob": -0.20404251334593468, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0040319389663636684}, {"id": 105, "seek": 61552, "start": 633.84, "end": 641.4399999999999, "text": " two in the implementation essentially, right? So the first part is HFS is append only, right? So", "tokens": [51280, 732, 294, 264, 11420, 4476, 11, 558, 30, 407, 264, 700, 644, 307, 389, 29318, 307, 34116, 787, 11, 558, 30, 407, 51660], "temperature": 0.0, "avg_logprob": -0.20404251334593468, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0040319389663636684}, {"id": 106, "seek": 64144, "start": 641.44, "end": 646.8800000000001, "text": " when you create a file, you cannot go in the middle of the file and add additional content,", "tokens": [50364, 562, 291, 1884, 257, 3991, 11, 291, 2644, 352, 294, 264, 2808, 295, 264, 3991, 293, 909, 4497, 2701, 11, 50636], "temperature": 0.0, "avg_logprob": -0.15491417707022975, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.002324372064322233}, {"id": 107, "seek": 64144, "start": 646.8800000000001, "end": 652.0, "text": " right? You can only append things to the file, right? And so this doesn't work if you open", "tokens": [50636, 558, 30, 509, 393, 787, 34116, 721, 281, 264, 3991, 11, 558, 30, 400, 370, 341, 1177, 380, 589, 498, 291, 1269, 50892], "temperature": 0.0, "avg_logprob": -0.15491417707022975, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.002324372064322233}, {"id": 108, "seek": 64144, "start": 652.0, "end": 656.1600000000001, "text": " Veeam and you, you know, editing stuff around, then you can't actually just, you know,", "tokens": [50892, 691, 1653, 335, 293, 291, 11, 291, 458, 11, 10000, 1507, 926, 11, 550, 291, 393, 380, 767, 445, 11, 291, 458, 11, 51100], "temperature": 0.0, "avg_logprob": -0.15491417707022975, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.002324372064322233}, {"id": 109, "seek": 64144, "start": 657.2800000000001, "end": 663.5200000000001, "text": " like write directly to HFS OpsFS. As I said, it doesn't support random writes,", "tokens": [51156, 411, 2464, 3838, 281, 389, 29318, 422, 1878, 29318, 13, 1018, 286, 848, 11, 309, 1177, 380, 1406, 4974, 13657, 11, 51468], "temperature": 0.0, "avg_logprob": -0.15491417707022975, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.002324372064322233}, {"id": 110, "seek": 64144, "start": 663.5200000000001, "end": 667.7600000000001, "text": " it does not support multiple writers. So when you open a file for write, you actually get the", "tokens": [51468, 309, 775, 406, 1406, 3866, 13491, 13, 407, 562, 291, 1269, 257, 3991, 337, 2464, 11, 291, 767, 483, 264, 51680], "temperature": 0.0, "avg_logprob": -0.15491417707022975, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.002324372064322233}, {"id": 111, "seek": 66776, "start": 667.84, "end": 672.88, "text": " list on the file and you have the only one that can actually write there, right? And nobody else", "tokens": [50368, 1329, 322, 264, 3991, 293, 291, 362, 264, 787, 472, 300, 393, 767, 2464, 456, 11, 558, 30, 400, 5079, 1646, 50620], "temperature": 0.0, "avg_logprob": -0.12784116744995117, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0044677066616714}, {"id": 112, "seek": 66776, "start": 672.88, "end": 679.4399999999999, "text": " can actually write, which is not the behavior that you expect on, yeah, like from the POSIX API.", "tokens": [50620, 393, 767, 2464, 11, 597, 307, 406, 264, 5223, 300, 291, 2066, 322, 11, 1338, 11, 411, 490, 264, 430, 4367, 21124, 9362, 13, 50948], "temperature": 0.0, "avg_logprob": -0.12784116744995117, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0044677066616714}, {"id": 113, "seek": 66776, "start": 680.16, "end": 686.16, "text": " The other aspect is the block size is quite huge. So that's like, you know, the blocks on", "tokens": [50984, 440, 661, 4171, 307, 264, 3461, 2744, 307, 1596, 2603, 13, 407, 300, 311, 411, 11, 291, 458, 11, 264, 8474, 322, 51284], "temperature": 0.0, "avg_logprob": -0.12784116744995117, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0044677066616714}, {"id": 114, "seek": 66776, "start": 686.16, "end": 692.0, "text": " OpsFS and HFS are configurable. You can make it as small as possible, but like the default", "tokens": [51284, 422, 1878, 29318, 293, 389, 29318, 366, 22192, 712, 13, 509, 393, 652, 309, 382, 1359, 382, 1944, 11, 457, 411, 264, 7576, 51576], "temperature": 0.0, "avg_logprob": -0.12784116744995117, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.0044677066616714}, {"id": 115, "seek": 69200, "start": 692.0, "end": 697.52, "text": " behavior is to be quite big. It's like 6428 megabytes. Because the axis button and the", "tokens": [50364, 5223, 307, 281, 312, 1596, 955, 13, 467, 311, 411, 12145, 11205, 10816, 24538, 13, 1436, 264, 10298, 2960, 293, 264, 50640], "temperature": 0.0, "avg_logprob": -0.1478124276185647, "compression_ratio": 1.7, "no_speech_prob": 0.013335231691598892}, {"id": 116, "seek": 69200, "start": 697.52, "end": 702.4, "text": " write buttons make it that, it's much more performant to do that. And then we're going to talk", "tokens": [50640, 2464, 9905, 652, 309, 300, 11, 309, 311, 709, 544, 2042, 394, 281, 360, 300, 13, 400, 550, 321, 434, 516, 281, 751, 50884], "temperature": 0.0, "avg_logprob": -0.1478124276185647, "compression_ratio": 1.7, "no_speech_prob": 0.013335231691598892}, {"id": 117, "seek": 69200, "start": 702.4, "end": 707.44, "text": " about the security model in a second, right? So how does, how does the system work, right?", "tokens": [50884, 466, 264, 3825, 2316, 294, 257, 1150, 11, 558, 30, 407, 577, 775, 11, 577, 775, 264, 1185, 589, 11, 558, 30, 51136], "temperature": 0.0, "avg_logprob": -0.1478124276185647, "compression_ratio": 1.7, "no_speech_prob": 0.013335231691598892}, {"id": 118, "seek": 69200, "start": 707.44, "end": 712.16, "text": " So we have two scenarios, essentially. We have read scenario, read only mode, or like read and", "tokens": [51136, 407, 321, 362, 732, 15077, 11, 4476, 13, 492, 362, 1401, 9005, 11, 1401, 787, 4391, 11, 420, 411, 1401, 293, 51372], "temperature": 0.0, "avg_logprob": -0.1478124276185647, "compression_ratio": 1.7, "no_speech_prob": 0.013335231691598892}, {"id": 119, "seek": 69200, "start": 712.16, "end": 718.56, "text": " write scenario. For the read only mode, it's actually quite trivial. What basically happens", "tokens": [51372, 2464, 9005, 13, 1171, 264, 1401, 787, 4391, 11, 309, 311, 767, 1596, 26703, 13, 708, 1936, 2314, 51692], "temperature": 0.0, "avg_logprob": -0.1478124276185647, "compression_ratio": 1.7, "no_speech_prob": 0.013335231691598892}, {"id": 120, "seek": 71856, "start": 718.56, "end": 721.68, "text": " actually, I can show you this diagram. I don't know if you can actually see from the back.", "tokens": [50364, 767, 11, 286, 393, 855, 291, 341, 10686, 13, 286, 500, 380, 458, 498, 291, 393, 767, 536, 490, 264, 646, 13, 50520], "temperature": 0.0, "avg_logprob": -0.11933825566218449, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.005164544563740492}, {"id": 121, "seek": 71856, "start": 722.2399999999999, "end": 727.92, "text": " But essentially what happens is that the process actually talks to the OpsFS", "tokens": [50548, 583, 4476, 437, 2314, 307, 300, 264, 1399, 767, 6686, 281, 264, 422, 1878, 29318, 50832], "temperature": 0.0, "avg_logprob": -0.11933825566218449, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.005164544563740492}, {"id": 122, "seek": 71856, "start": 728.88, "end": 735.3599999999999, "text": " fuse mount and asks, I want to read this file. Because the API from HFS and OpsFS allow you", "tokens": [50880, 31328, 3746, 293, 8962, 11, 286, 528, 281, 1401, 341, 3991, 13, 1436, 264, 9362, 490, 389, 29318, 293, 422, 1878, 29318, 2089, 291, 51204], "temperature": 0.0, "avg_logprob": -0.11933825566218449, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.005164544563740492}, {"id": 123, "seek": 71856, "start": 735.3599999999999, "end": 740.4, "text": " to basically, you know, do six and read and stuff like this. They are compatible. We can just forward", "tokens": [51204, 281, 1936, 11, 291, 458, 11, 360, 2309, 293, 1401, 293, 1507, 411, 341, 13, 814, 366, 18218, 13, 492, 393, 445, 2128, 51456], "temperature": 0.0, "avg_logprob": -0.11933825566218449, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.005164544563740492}, {"id": 124, "seek": 71856, "start": 740.4, "end": 747.1999999999999, "text": " the request to the remote storage essentially, right? So you open a file, you open a file,", "tokens": [51456, 264, 5308, 281, 264, 8607, 6725, 4476, 11, 558, 30, 407, 291, 1269, 257, 3991, 11, 291, 1269, 257, 3991, 11, 51796], "temperature": 0.0, "avg_logprob": -0.11933825566218449, "compression_ratio": 1.7121212121212122, "no_speech_prob": 0.005164544563740492}, {"id": 125, "seek": 74720, "start": 747.2800000000001, "end": 753.6, "text": " you read a set amount of bytes from a set amount of position. That is mapped to operations directly", "tokens": [50368, 291, 1401, 257, 992, 2372, 295, 36088, 490, 257, 992, 2372, 295, 2535, 13, 663, 307, 33318, 281, 7705, 3838, 50684], "temperature": 0.0, "avg_logprob": -0.15152264725078235, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0030378594528883696}, {"id": 126, "seek": 74720, "start": 753.6, "end": 759.84, "text": " in OpsFS. So that's, yeah, pretty, pretty, pretty trivial to implement.", "tokens": [50684, 294, 422, 1878, 29318, 13, 407, 300, 311, 11, 1338, 11, 1238, 11, 1238, 11, 1238, 26703, 281, 4445, 13, 50996], "temperature": 0.0, "avg_logprob": -0.15152264725078235, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0030378594528883696}, {"id": 127, "seek": 74720, "start": 762.08, "end": 768.32, "text": " The writing scenario is a little bit more complicated for the reasons I was mentioning earlier.", "tokens": [51108, 440, 3579, 9005, 307, 257, 707, 857, 544, 6179, 337, 264, 4112, 286, 390, 18315, 3071, 13, 51420], "temperature": 0.0, "avg_logprob": -0.15152264725078235, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0030378594528883696}, {"id": 128, "seek": 74720, "start": 768.96, "end": 775.0400000000001, "text": " So at the i level, what happens is that the remote file gets copied on the local file system.", "tokens": [51452, 407, 412, 264, 741, 1496, 11, 437, 2314, 307, 300, 264, 8607, 3991, 2170, 25365, 322, 264, 2654, 3991, 1185, 13, 51756], "temperature": 0.0, "avg_logprob": -0.15152264725078235, "compression_ratio": 1.6409090909090909, "no_speech_prob": 0.0030378594528883696}, {"id": 129, "seek": 77504, "start": 775.04, "end": 781.28, "text": " And we write it in a staging area. And so the processes like the Linux processes are actually", "tokens": [50364, 400, 321, 2464, 309, 294, 257, 41085, 1859, 13, 400, 370, 264, 7555, 411, 264, 18734, 7555, 366, 767, 50676], "temperature": 0.0, "avg_logprob": -0.10821880089057671, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.0006922203465364873}, {"id": 130, "seek": 77504, "start": 781.28, "end": 789.12, "text": " going to write to these, to these like staging replica of the file. And then when either the", "tokens": [50676, 516, 281, 2464, 281, 613, 11, 281, 613, 411, 41085, 35456, 295, 264, 3991, 13, 400, 550, 562, 2139, 264, 51068], "temperature": 0.0, "avg_logprob": -0.10821880089057671, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.0006922203465364873}, {"id": 131, "seek": 77504, "start": 789.12, "end": 793.52, "text": " file is flushed or the file is closed, then we actually upload the file back into the remote", "tokens": [51068, 3991, 307, 19568, 292, 420, 264, 3991, 307, 5395, 11, 550, 321, 767, 6580, 264, 3991, 646, 666, 264, 8607, 51288], "temperature": 0.0, "avg_logprob": -0.10821880089057671, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.0006922203465364873}, {"id": 132, "seek": 77504, "start": 793.52, "end": 799.92, "text": " storage. So it looks like a little bit like this. You open the file and we open the file.", "tokens": [51288, 6725, 13, 407, 309, 1542, 411, 257, 707, 857, 411, 341, 13, 509, 1269, 264, 3991, 293, 321, 1269, 264, 3991, 13, 51608], "temperature": 0.0, "avg_logprob": -0.10821880089057671, "compression_ratio": 1.8730964467005076, "no_speech_prob": 0.0006922203465364873}, {"id": 133, "seek": 79992, "start": 800.56, "end": 805.68, "text": " You actually get back, you don't get, we don't download the file immediately, even if you ask for", "tokens": [50396, 509, 767, 483, 646, 11, 291, 500, 380, 483, 11, 321, 500, 380, 5484, 264, 3991, 4258, 11, 754, 498, 291, 1029, 337, 50652], "temperature": 0.0, "avg_logprob": -0.16147144024188703, "compression_ratio": 1.8725868725868726, "no_speech_prob": 0.007166124880313873}, {"id": 134, "seek": 79992, "start": 805.68, "end": 813.1999999999999, "text": " writing and open the file in writing. And the most, like, the reason is people are lazy essentially,", "tokens": [50652, 3579, 293, 1269, 264, 3991, 294, 3579, 13, 400, 264, 881, 11, 411, 11, 264, 1778, 307, 561, 366, 14847, 4476, 11, 51028], "temperature": 0.0, "avg_logprob": -0.16147144024188703, "compression_ratio": 1.8725868725868726, "no_speech_prob": 0.007166124880313873}, {"id": 135, "seek": 79992, "start": 813.1999999999999, "end": 817.28, "text": " right? In the sense of like when they open a file, like you say, you want to check out,", "tokens": [51028, 558, 30, 682, 264, 2020, 295, 411, 562, 436, 1269, 257, 3991, 11, 411, 291, 584, 11, 291, 528, 281, 1520, 484, 11, 51232], "temperature": 0.0, "avg_logprob": -0.16147144024188703, "compression_ratio": 1.8725868725868726, "no_speech_prob": 0.007166124880313873}, {"id": 136, "seek": 79992, "start": 817.28, "end": 821.04, "text": " you want to look at the file, you know, you might have opened Vim and open a file. And then at that", "tokens": [51232, 291, 528, 281, 574, 412, 264, 3991, 11, 291, 458, 11, 291, 1062, 362, 5625, 691, 332, 293, 1269, 257, 3991, 13, 400, 550, 412, 300, 51420], "temperature": 0.0, "avg_logprob": -0.16147144024188703, "compression_ratio": 1.8725868725868726, "no_speech_prob": 0.007166124880313873}, {"id": 137, "seek": 79992, "start": 821.04, "end": 825.76, "text": " point, you know, you don't want to write anything, but you have opened it, read and write. Because", "tokens": [51420, 935, 11, 291, 458, 11, 291, 500, 380, 528, 281, 2464, 1340, 11, 457, 291, 362, 5625, 309, 11, 1401, 293, 2464, 13, 1436, 51656], "temperature": 0.0, "avg_logprob": -0.16147144024188703, "compression_ratio": 1.8725868725868726, "no_speech_prob": 0.007166124880313873}, {"id": 138, "seek": 82576, "start": 825.76, "end": 830.56, "text": " file and obfuscation are generally pretty large, we don't want to, you know, keep downloading", "tokens": [50364, 3991, 293, 1111, 69, 32601, 399, 366, 5101, 1238, 2416, 11, 321, 500, 380, 528, 281, 11, 291, 458, 11, 1066, 32529, 50604], "temperature": 0.0, "avg_logprob": -0.21257243191238737, "compression_ratio": 2.039855072463768, "no_speech_prob": 0.009020746685564518}, {"id": 139, "seek": 82576, "start": 830.56, "end": 835.6, "text": " random files for absolute, you know, reason, right? So what basically happens is that we delayed", "tokens": [50604, 4974, 7098, 337, 8236, 11, 291, 458, 11, 1778, 11, 558, 30, 407, 437, 1936, 2314, 307, 300, 321, 20268, 50856], "temperature": 0.0, "avg_logprob": -0.21257243191238737, "compression_ratio": 2.039855072463768, "no_speech_prob": 0.009020746685564518}, {"id": 140, "seek": 82576, "start": 835.6, "end": 841.76, "text": " download the file until the first write comes in. When the first write comes in, the write is", "tokens": [50856, 5484, 264, 3991, 1826, 264, 700, 2464, 1487, 294, 13, 1133, 264, 700, 2464, 1487, 294, 11, 264, 2464, 307, 51164], "temperature": 0.0, "avg_logprob": -0.21257243191238737, "compression_ratio": 2.039855072463768, "no_speech_prob": 0.009020746685564518}, {"id": 141, "seek": 82576, "start": 841.76, "end": 846.16, "text": " intercepted. And we basically, the first thing we do is basically download the file into the,", "tokens": [51164, 24700, 292, 13, 400, 321, 1936, 11, 264, 700, 551, 321, 360, 307, 1936, 5484, 264, 3991, 666, 264, 11, 51384], "temperature": 0.0, "avg_logprob": -0.21257243191238737, "compression_ratio": 2.039855072463768, "no_speech_prob": 0.009020746685564518}, {"id": 142, "seek": 82576, "start": 846.16, "end": 850.56, "text": " into the, into the staging area. Well, from there, we can actually do the operations, right?", "tokens": [51384, 666, 264, 11, 666, 264, 41085, 1859, 13, 1042, 11, 490, 456, 11, 321, 393, 767, 360, 264, 7705, 11, 558, 30, 51604], "temperature": 0.0, "avg_logprob": -0.21257243191238737, "compression_ratio": 2.039855072463768, "no_speech_prob": 0.009020746685564518}, {"id": 143, "seek": 82576, "start": 851.12, "end": 854.56, "text": " Now, all the operations that happen, like all the read operation, all the writes operation,", "tokens": [51632, 823, 11, 439, 264, 7705, 300, 1051, 11, 411, 439, 264, 1401, 6916, 11, 439, 264, 13657, 6916, 11, 51804], "temperature": 0.0, "avg_logprob": -0.21257243191238737, "compression_ratio": 2.039855072463768, "no_speech_prob": 0.009020746685564518}, {"id": 144, "seek": 85456, "start": 855.4399999999999, "end": 860.0, "text": " do not go to the, to the, to the remote storage anymore, but they actually act on the local", "tokens": [50408, 360, 406, 352, 281, 264, 11, 281, 264, 11, 281, 264, 8607, 6725, 3602, 11, 457, 436, 767, 605, 322, 264, 2654, 50636], "temperature": 0.0, "avg_logprob": -0.148726119369757, "compression_ratio": 1.888, "no_speech_prob": 0.006029078736901283}, {"id": 145, "seek": 85456, "start": 860.0, "end": 865.4399999999999, "text": " version of the file. And, you know, this allows us to basically, you know, write random stuff at", "tokens": [50636, 3037, 295, 264, 3991, 13, 400, 11, 291, 458, 11, 341, 4045, 505, 281, 1936, 11, 291, 458, 11, 2464, 4974, 1507, 412, 50908], "temperature": 0.0, "avg_logprob": -0.148726119369757, "compression_ratio": 1.888, "no_speech_prob": 0.006029078736901283}, {"id": 146, "seek": 85456, "start": 865.4399999999999, "end": 871.76, "text": " a random point in time, so random place in the, in the file, allows us to basically have multiple", "tokens": [50908, 257, 4974, 935, 294, 565, 11, 370, 4974, 1081, 294, 264, 11, 294, 264, 3991, 11, 4045, 505, 281, 1936, 362, 3866, 51224], "temperature": 0.0, "avg_logprob": -0.148726119369757, "compression_ratio": 1.888, "no_speech_prob": 0.006029078736901283}, {"id": 147, "seek": 85456, "start": 871.76, "end": 877.1999999999999, "text": " writers writing files, multiple readers and so on. So they all write as it was, like a local,", "tokens": [51224, 13491, 3579, 7098, 11, 3866, 17147, 293, 370, 322, 13, 407, 436, 439, 2464, 382, 309, 390, 11, 411, 257, 2654, 11, 51496], "temperature": 0.0, "avg_logprob": -0.148726119369757, "compression_ratio": 1.888, "no_speech_prob": 0.006029078736901283}, {"id": 148, "seek": 85456, "start": 877.1999999999999, "end": 881.28, "text": " a local file essentially, which, which it is, right? What happens is at some point, someone", "tokens": [51496, 257, 2654, 3991, 4476, 11, 597, 11, 597, 309, 307, 11, 558, 30, 708, 2314, 307, 412, 512, 935, 11, 1580, 51700], "temperature": 0.0, "avg_logprob": -0.148726119369757, "compression_ratio": 1.888, "no_speech_prob": 0.006029078736901283}, {"id": 149, "seek": 88128, "start": 881.28, "end": 885.6, "text": " was going to call a sync or, you know, call a sync and then close the file. And what's going to", "tokens": [50364, 390, 516, 281, 818, 257, 20271, 420, 11, 291, 458, 11, 818, 257, 20271, 293, 550, 1998, 264, 3991, 13, 400, 437, 311, 516, 281, 50580], "temperature": 0.0, "avg_logprob": -0.13221326688440835, "compression_ratio": 1.8435114503816794, "no_speech_prob": 0.00525173544883728}, {"id": 150, "seek": 88128, "start": 885.6, "end": 891.04, "text": " happen is that when the sync happens, then the file is then back uploaded into the, into the", "tokens": [50580, 1051, 307, 300, 562, 264, 20271, 2314, 11, 550, 264, 3991, 307, 550, 646, 17135, 666, 264, 11, 666, 264, 50852], "temperature": 0.0, "avg_logprob": -0.13221326688440835, "compression_ratio": 1.8435114503816794, "no_speech_prob": 0.00525173544883728}, {"id": 151, "seek": 88128, "start": 891.04, "end": 897.68, "text": " remote storage, right? And that basically allows us to, yeah, add the file in, in OpsFS. When the", "tokens": [50852, 8607, 6725, 11, 558, 30, 400, 300, 1936, 4045, 505, 281, 11, 1338, 11, 909, 264, 3991, 294, 11, 294, 422, 1878, 29318, 13, 1133, 264, 51184], "temperature": 0.0, "avg_logprob": -0.13221326688440835, "compression_ratio": 1.8435114503816794, "no_speech_prob": 0.00525173544883728}, {"id": 152, "seek": 88128, "start": 897.68, "end": 903.12, "text": " last client, the last write client actually closes file, then we can actually remove the file from", "tokens": [51184, 1036, 6423, 11, 264, 1036, 2464, 6423, 767, 24157, 3991, 11, 550, 321, 393, 767, 4159, 264, 3991, 490, 51456], "temperature": 0.0, "avg_logprob": -0.13221326688440835, "compression_ratio": 1.8435114503816794, "no_speech_prob": 0.00525173544883728}, {"id": 153, "seek": 88128, "start": 903.12, "end": 907.12, "text": " the staging directory, right? So if you have like five different clients working on it, and then,", "tokens": [51456, 264, 41085, 21120, 11, 558, 30, 407, 498, 291, 362, 411, 1732, 819, 6982, 1364, 322, 309, 11, 293, 550, 11, 51656], "temperature": 0.0, "avg_logprob": -0.13221326688440835, "compression_ratio": 1.8435114503816794, "no_speech_prob": 0.00525173544883728}, {"id": 154, "seek": 90712, "start": 907.12, "end": 911.2, "text": " you know, one removes it, then we can let the last one closes it, then we can remove the, the,", "tokens": [50364, 291, 458, 11, 472, 30445, 309, 11, 550, 321, 393, 718, 264, 1036, 472, 24157, 309, 11, 550, 321, 393, 4159, 264, 11, 264, 11, 50568], "temperature": 0.0, "avg_logprob": -0.18973824129266254, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.012616702355444431}, {"id": 155, "seek": 90712, "start": 911.2, "end": 915.92, "text": " the file from the, from the, from the staging, from the staging directory.", "tokens": [50568, 264, 3991, 490, 264, 11, 490, 264, 11, 490, 264, 41085, 11, 490, 264, 41085, 21120, 13, 50804], "temperature": 0.0, "avg_logprob": -0.18973824129266254, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.012616702355444431}, {"id": 156, "seek": 90712, "start": 917.76, "end": 921.44, "text": " Now, the last part, the last difference in terms of like,", "tokens": [50896, 823, 11, 264, 1036, 644, 11, 264, 1036, 2649, 294, 2115, 295, 411, 11, 51080], "temperature": 0.0, "avg_logprob": -0.18973824129266254, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.012616702355444431}, {"id": 157, "seek": 90712, "start": 922.08, "end": 928.16, "text": " compatibility between what the, what the, what the, you know, OpsFS and HFS API are, and the local", "tokens": [51112, 34237, 1296, 437, 264, 11, 437, 264, 11, 437, 264, 11, 291, 458, 11, 422, 1878, 29318, 293, 389, 29318, 9362, 366, 11, 293, 264, 2654, 51416], "temperature": 0.0, "avg_logprob": -0.18973824129266254, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.012616702355444431}, {"id": 158, "seek": 90712, "start": 928.16, "end": 935.6800000000001, "text": " file system are. Can I take a question a little bit later? Okay. That's fine. Okay, thanks.", "tokens": [51416, 3991, 1185, 366, 13, 1664, 286, 747, 257, 1168, 257, 707, 857, 1780, 30, 1033, 13, 663, 311, 2489, 13, 1033, 11, 3231, 13, 51792], "temperature": 0.0, "avg_logprob": -0.18973824129266254, "compression_ratio": 1.8095238095238095, "no_speech_prob": 0.012616702355444431}, {"id": 159, "seek": 93568, "start": 935.92, "end": 943.1999999999999, "text": " Yeah, so in, in that regard is, yeah, so the way this security works on, on OpsFS is slightly", "tokens": [50376, 865, 11, 370, 294, 11, 294, 300, 3843, 307, 11, 1338, 11, 370, 264, 636, 341, 3825, 1985, 322, 11, 322, 422, 1878, 29318, 307, 4748, 50740], "temperature": 0.0, "avg_logprob": -0.1530839364359698, "compression_ratio": 1.7338129496402879, "no_speech_prob": 0.010541193187236786}, {"id": 160, "seek": 93568, "start": 943.1999999999999, "end": 948.9599999999999, "text": " different than if you're familiar with HFS. You might be familiar with Kerberos. In Opsfs, we", "tokens": [50740, 819, 813, 498, 291, 434, 4963, 365, 389, 29318, 13, 509, 1062, 312, 4963, 365, 20706, 607, 329, 13, 682, 422, 1878, 16883, 11, 321, 51028], "temperature": 0.0, "avg_logprob": -0.1530839364359698, "compression_ratio": 1.7338129496402879, "no_speech_prob": 0.010541193187236786}, {"id": 161, "seek": 93568, "start": 948.9599999999999, "end": 955.1999999999999, "text": " don't use Kerberos, we use certificates. So every user in the platform gets a certificate or actually", "tokens": [51028, 500, 380, 764, 20706, 607, 329, 11, 321, 764, 32941, 13, 407, 633, 4195, 294, 264, 3663, 2170, 257, 15953, 420, 767, 51340], "temperature": 0.0, "avg_logprob": -0.1530839364359698, "compression_ratio": 1.7338129496402879, "no_speech_prob": 0.010541193187236786}, {"id": 162, "seek": 93568, "start": 955.1999999999999, "end": 960.9599999999999, "text": " gets more than the one, but it doesn't matter. Essentially, in the certificate itself, you know,", "tokens": [51340, 2170, 544, 813, 264, 472, 11, 457, 309, 1177, 380, 1871, 13, 23596, 11, 294, 264, 15953, 2564, 11, 291, 458, 11, 51628], "temperature": 0.0, "avg_logprob": -0.1530839364359698, "compression_ratio": 1.7338129496402879, "no_speech_prob": 0.010541193187236786}, {"id": 163, "seek": 93568, "start": 960.9599999999999, "end": 965.1999999999999, "text": " we have the information about who the user is, and every time the user needs to do an operation", "tokens": [51628, 321, 362, 264, 1589, 466, 567, 264, 4195, 307, 11, 293, 633, 565, 264, 4195, 2203, 281, 360, 364, 6916, 51840], "temperature": 0.0, "avg_logprob": -0.1530839364359698, "compression_ratio": 1.7338129496402879, "no_speech_prob": 0.010541193187236786}, {"id": 164, "seek": 96520, "start": 965.2, "end": 971.9200000000001, "text": " with the, with the, with the file system and any other service in Opsfs, present a certificate,", "tokens": [50364, 365, 264, 11, 365, 264, 11, 365, 264, 3991, 1185, 293, 604, 661, 2643, 294, 422, 1878, 16883, 11, 1974, 257, 15953, 11, 50700], "temperature": 0.0, "avg_logprob": -0.1384362170570775, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.0021780035458505154}, {"id": 165, "seek": 96520, "start": 971.9200000000001, "end": 977.6800000000001, "text": " and the certificate is obviously verified based on the chain of trust that is established within", "tokens": [50700, 293, 264, 15953, 307, 2745, 31197, 2361, 322, 264, 5021, 295, 3361, 300, 307, 7545, 1951, 50988], "temperature": 0.0, "avg_logprob": -0.1384362170570775, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.0021780035458505154}, {"id": 166, "seek": 96520, "start": 977.6800000000001, "end": 984.96, "text": " Opsfs deployment. So this basically what happens at the high level, right? So every time the Opsfs", "tokens": [50988, 422, 1878, 16883, 19317, 13, 407, 341, 1936, 437, 2314, 412, 264, 1090, 1496, 11, 558, 30, 407, 633, 565, 264, 422, 1878, 16883, 51352], "temperature": 0.0, "avg_logprob": -0.1384362170570775, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.0021780035458505154}, {"id": 167, "seek": 96520, "start": 984.96, "end": 992.1600000000001, "text": " fuse mount needs to talk to the, to the Opsfs remote storage, it has to present a certificate", "tokens": [51352, 31328, 3746, 2203, 281, 751, 281, 264, 11, 281, 264, 422, 1878, 16883, 8607, 6725, 11, 309, 575, 281, 1974, 257, 15953, 51712], "temperature": 0.0, "avg_logprob": -0.1384362170570775, "compression_ratio": 1.7579908675799087, "no_speech_prob": 0.0021780035458505154}, {"id": 168, "seek": 99216, "start": 992.16, "end": 998.24, "text": " essentially. And this is something that we, we control in the way that we actually use the", "tokens": [50364, 4476, 13, 400, 341, 307, 746, 300, 321, 11, 321, 1969, 294, 264, 636, 300, 321, 767, 764, 264, 50668], "temperature": 0.0, "avg_logprob": -0.10701746980020822, "compression_ratio": 1.9539748953974896, "no_speech_prob": 0.002255081431940198}, {"id": 169, "seek": 99216, "start": 998.24, "end": 1003.4399999999999, "text": " Opsfs fuse mount in, in Opsfs works. When we set up the mount point, we actually, you know,", "tokens": [50668, 422, 1878, 16883, 31328, 3746, 294, 11, 294, 422, 1878, 16883, 1985, 13, 1133, 321, 992, 493, 264, 3746, 935, 11, 321, 767, 11, 291, 458, 11, 50928], "temperature": 0.0, "avg_logprob": -0.10701746980020822, "compression_ratio": 1.9539748953974896, "no_speech_prob": 0.002255081431940198}, {"id": 170, "seek": 99216, "start": 1003.4399999999999, "end": 1008.56, "text": " make sure that the mount point is set up with the certificates for that specific user so that,", "tokens": [50928, 652, 988, 300, 264, 3746, 935, 307, 992, 493, 365, 264, 32941, 337, 300, 2685, 4195, 370, 300, 11, 51184], "temperature": 0.0, "avg_logprob": -0.10701746980020822, "compression_ratio": 1.9539748953974896, "no_speech_prob": 0.002255081431940198}, {"id": 171, "seek": 99216, "start": 1009.28, "end": 1013.92, "text": " you know, if I, if I need access to a specific directory from a Python library, Opsfs set up", "tokens": [51220, 291, 458, 11, 498, 286, 11, 498, 286, 643, 2105, 281, 257, 2685, 21120, 490, 257, 15329, 6405, 11, 422, 1878, 16883, 992, 493, 51452], "temperature": 0.0, "avg_logprob": -0.10701746980020822, "compression_ratio": 1.9539748953974896, "no_speech_prob": 0.002255081431940198}, {"id": 172, "seek": 99216, "start": 1013.92, "end": 1019.28, "text": " the mount point and, and provide provision the certificate for, for, for my user so that someone", "tokens": [51452, 264, 3746, 935, 293, 11, 293, 2893, 17225, 264, 15953, 337, 11, 337, 11, 337, 452, 4195, 370, 300, 1580, 51720], "temperature": 0.0, "avg_logprob": -0.10701746980020822, "compression_ratio": 1.9539748953974896, "no_speech_prob": 0.002255081431940198}, {"id": 173, "seek": 101928, "start": 1019.28, "end": 1025.68, "text": " else cannot, cannot necessarily use the same mount point and the same, and the same, and the same", "tokens": [50364, 1646, 2644, 11, 2644, 4725, 764, 264, 912, 3746, 935, 293, 264, 912, 11, 293, 264, 912, 11, 293, 264, 912, 50684], "temperature": 0.0, "avg_logprob": -0.1641112020460226, "compression_ratio": 1.9282868525896415, "no_speech_prob": 0.005342535208910704}, {"id": 174, "seek": 101928, "start": 1025.68, "end": 1030.24, "text": " certificates. So this is controlled at the application level, not the, not necessarily the storage layer.", "tokens": [50684, 32941, 13, 407, 341, 307, 10164, 412, 264, 3861, 1496, 11, 406, 264, 11, 406, 4725, 264, 6725, 4583, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1641112020460226, "compression_ratio": 1.9282868525896415, "no_speech_prob": 0.005342535208910704}, {"id": 175, "seek": 101928, "start": 1031.36, "end": 1035.12, "text": " All the operations that happen on this side, while the authenticated based on the certificate,", "tokens": [50968, 1057, 264, 7705, 300, 1051, 322, 341, 1252, 11, 1339, 264, 9214, 3587, 2361, 322, 264, 15953, 11, 51156], "temperature": 0.0, "avg_logprob": -0.1641112020460226, "compression_ratio": 1.9282868525896415, "no_speech_prob": 0.005342535208910704}, {"id": 176, "seek": 101928, "start": 1035.12, "end": 1040.96, "text": " the problem happens from, let's say, the Opsfs fuse mount to the, to the user side, to the,", "tokens": [51156, 264, 1154, 2314, 490, 11, 718, 311, 584, 11, 264, 422, 1878, 16883, 31328, 3746, 281, 264, 11, 281, 264, 4195, 1252, 11, 281, 264, 11, 51448], "temperature": 0.0, "avg_logprob": -0.1641112020460226, "compression_ratio": 1.9282868525896415, "no_speech_prob": 0.005342535208910704}, {"id": 177, "seek": 101928, "start": 1041.84, "end": 1047.76, "text": " to the, let's say, Linux processes essentially, right? So what happens here is the following,", "tokens": [51492, 281, 264, 11, 718, 311, 584, 11, 18734, 7555, 4476, 11, 558, 30, 407, 437, 2314, 510, 307, 264, 3480, 11, 51788], "temperature": 0.0, "avg_logprob": -0.1641112020460226, "compression_ratio": 1.9282868525896415, "no_speech_prob": 0.005342535208910704}, {"id": 178, "seek": 104776, "start": 1047.76, "end": 1054.48, "text": " so there is a, there is a mapping going on between the users in Opsfs and the user on the machine,", "tokens": [50364, 370, 456, 307, 257, 11, 456, 307, 257, 18350, 516, 322, 1296, 264, 5022, 294, 422, 1878, 16883, 293, 264, 4195, 322, 264, 3479, 11, 50700], "temperature": 0.0, "avg_logprob": -0.13854590977463765, "compression_ratio": 1.832535885167464, "no_speech_prob": 0.011360561475157738}, {"id": 179, "seek": 104776, "start": 1054.48, "end": 1059.52, "text": " right? The problem we, like the problem we had, the problem that, like this setup has is that you", "tokens": [50700, 558, 30, 440, 1154, 321, 11, 411, 264, 1154, 321, 632, 11, 264, 1154, 300, 11, 411, 341, 8657, 575, 307, 300, 291, 50952], "temperature": 0.0, "avg_logprob": -0.13854590977463765, "compression_ratio": 1.832535885167464, "no_speech_prob": 0.011360561475157738}, {"id": 180, "seek": 104776, "start": 1059.52, "end": 1064.08, "text": " end up having a lot of users on Opsfs, right? My, our deployments might have, like, you know,", "tokens": [50952, 917, 493, 1419, 257, 688, 295, 5022, 322, 422, 1878, 16883, 11, 558, 30, 1222, 11, 527, 7274, 1117, 1062, 362, 11, 411, 11, 291, 458, 11, 51180], "temperature": 0.0, "avg_logprob": -0.13854590977463765, "compression_ratio": 1.832535885167464, "no_speech_prob": 0.011360561475157738}, {"id": 181, "seek": 104776, "start": 1064.08, "end": 1071.44, "text": " 5,000 users all on the same deployment that, you know, results in way more groups than, than", "tokens": [51180, 1025, 11, 1360, 5022, 439, 322, 264, 912, 19317, 300, 11, 291, 458, 11, 3542, 294, 636, 544, 3935, 813, 11, 813, 51548], "temperature": 0.0, "avg_logprob": -0.13854590977463765, "compression_ratio": 1.832535885167464, "no_speech_prob": 0.011360561475157738}, {"id": 182, "seek": 107144, "start": 1071.52, "end": 1077.68, "text": " than 5,000. And so we cannot spend time and create them all the users, all the, all the, all the groups", "tokens": [50368, 813, 1025, 11, 1360, 13, 400, 370, 321, 2644, 3496, 565, 293, 1884, 552, 439, 264, 5022, 11, 439, 264, 11, 439, 264, 11, 439, 264, 3935, 50676], "temperature": 0.0, "avg_logprob": -0.15271344329371597, "compression_ratio": 1.9566929133858268, "no_speech_prob": 0.006805177312344313}, {"id": 183, "seek": 107144, "start": 1077.68, "end": 1084.3200000000002, "text": " in, on the, on the machines. So the way we actually, the way we actually work in this situation is that", "tokens": [50676, 294, 11, 322, 264, 11, 322, 264, 8379, 13, 407, 264, 636, 321, 767, 11, 264, 636, 321, 767, 589, 294, 341, 2590, 307, 300, 51008], "temperature": 0.0, "avg_logprob": -0.15271344329371597, "compression_ratio": 1.9566929133858268, "no_speech_prob": 0.006805177312344313}, {"id": 184, "seek": 107144, "start": 1084.96, "end": 1091.1200000000001, "text": " when the Opsfs application needs access to, to, to, to, to, to mount point, a provision that mount", "tokens": [51040, 562, 264, 422, 1878, 16883, 3861, 2203, 2105, 281, 11, 281, 11, 281, 11, 281, 11, 281, 11, 281, 3746, 935, 11, 257, 17225, 300, 3746, 51348], "temperature": 0.0, "avg_logprob": -0.15271344329371597, "compression_ratio": 1.9566929133858268, "no_speech_prob": 0.006805177312344313}, {"id": 185, "seek": 107144, "start": 1091.1200000000001, "end": 1096.4, "text": " point, it also makes sure it doesn't mount the entire file system, it mounts a specific sub-directory,", "tokens": [51348, 935, 11, 309, 611, 1669, 988, 309, 1177, 380, 3746, 264, 2302, 3991, 1185, 11, 309, 40982, 257, 2685, 1422, 12, 44868, 827, 11, 51612], "temperature": 0.0, "avg_logprob": -0.15271344329371597, "compression_ratio": 1.9566929133858268, "no_speech_prob": 0.006805177312344313}, {"id": 186, "seek": 107144, "start": 1096.4, "end": 1100.64, "text": " and when it mounts a specific sub-directory before mounting it, it provisions the users", "tokens": [51612, 293, 562, 309, 40982, 257, 2685, 1422, 12, 44868, 827, 949, 22986, 309, 11, 309, 25034, 264, 5022, 51824], "temperature": 0.0, "avg_logprob": -0.15271344329371597, "compression_ratio": 1.9566929133858268, "no_speech_prob": 0.006805177312344313}, {"id": 187, "seek": 110064, "start": 1100.72, "end": 1106.5600000000002, "text": " that are within, that, that, their own files within that specific, the specific sub-directory.", "tokens": [50368, 300, 366, 1951, 11, 300, 11, 300, 11, 641, 1065, 7098, 1951, 300, 2685, 11, 264, 2685, 1422, 12, 44868, 827, 13, 50660], "temperature": 0.0, "avg_logprob": -0.1623737130846296, "compression_ratio": 1.8987341772151898, "no_speech_prob": 0.00815450120717287}, {"id": 188, "seek": 110064, "start": 1106.5600000000002, "end": 1111.1200000000001, "text": " And the way it knows that is because in Opsfs, directories have a specific meaning,", "tokens": [50660, 400, 264, 636, 309, 3255, 300, 307, 570, 294, 422, 1878, 16883, 11, 5391, 530, 362, 257, 2685, 3620, 11, 50888], "temperature": 0.0, "avg_logprob": -0.1623737130846296, "compression_ratio": 1.8987341772151898, "no_speech_prob": 0.00815450120717287}, {"id": 189, "seek": 110064, "start": 1111.68, "end": 1115.6000000000001, "text": " they are organized in a specific way, and so Opsfs application knows which users are,", "tokens": [50916, 436, 366, 9983, 294, 257, 2685, 636, 11, 293, 370, 422, 1878, 16883, 3861, 3255, 597, 5022, 366, 11, 51112], "temperature": 0.0, "avg_logprob": -0.1623737130846296, "compression_ratio": 1.8987341772151898, "no_speech_prob": 0.00815450120717287}, {"id": 190, "seek": 110064, "start": 1116.4, "end": 1122.0800000000002, "text": " have access to specific sub-directory. So before actually, you know, mounting the, the file system,", "tokens": [51152, 362, 2105, 281, 2685, 1422, 12, 44868, 827, 13, 407, 949, 767, 11, 291, 458, 11, 22986, 264, 11, 264, 3991, 1185, 11, 51436], "temperature": 0.0, "avg_logprob": -0.1623737130846296, "compression_ratio": 1.8987341772151898, "no_speech_prob": 0.00815450120717287}, {"id": 191, "seek": 110064, "start": 1122.8000000000002, "end": 1126.96, "text": " we actually provision all the user, provision all the groups, and then what basically", "tokens": [51472, 321, 767, 17225, 439, 264, 4195, 11, 17225, 439, 264, 3935, 11, 293, 550, 437, 1936, 51680], "temperature": 0.0, "avg_logprob": -0.1623737130846296, "compression_ratio": 1.8987341772151898, "no_speech_prob": 0.00815450120717287}, {"id": 192, "seek": 112696, "start": 1126.96, "end": 1132.4, "text": " Opsfs mount does is that, well, you know, a file here is owned by user Fabio, so there is a,", "tokens": [50364, 422, 1878, 16883, 3746, 775, 307, 300, 11, 731, 11, 291, 458, 11, 257, 3991, 510, 307, 11684, 538, 4195, 17440, 1004, 11, 370, 456, 307, 257, 11, 50636], "temperature": 0.0, "avg_logprob": -0.13188751323803052, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.003173167584463954}, {"id": 193, "seek": 112696, "start": 1132.4, "end": 1138.4, "text": " there is a user on the machine, user Fabio with a specific UID, so the user ID of that file is going", "tokens": [50636, 456, 307, 257, 4195, 322, 264, 3479, 11, 4195, 17440, 1004, 365, 257, 2685, 624, 2777, 11, 370, 264, 4195, 7348, 295, 300, 3991, 307, 516, 50936], "temperature": 0.0, "avg_logprob": -0.13188751323803052, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.003173167584463954}, {"id": 194, "seek": 112696, "start": 1138.4, "end": 1144.72, "text": " to be the, the same essentially. And again, the, the provision of the user is controlled by the,", "tokens": [50936, 281, 312, 264, 11, 264, 912, 4476, 13, 400, 797, 11, 264, 11, 264, 17225, 295, 264, 4195, 307, 10164, 538, 264, 11, 51252], "temperature": 0.0, "avg_logprob": -0.13188751323803052, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.003173167584463954}, {"id": 195, "seek": 112696, "start": 1144.72, "end": 1150.0, "text": " by the Opsfs application when they, when they, when it, when it's, it's necessary essentially.", "tokens": [51252, 538, 264, 422, 1878, 16883, 3861, 562, 436, 11, 562, 436, 11, 562, 309, 11, 562, 309, 311, 11, 309, 311, 4818, 4476, 13, 51516], "temperature": 0.0, "avg_logprob": -0.13188751323803052, "compression_ratio": 1.7741935483870968, "no_speech_prob": 0.003173167584463954}, {"id": 196, "seek": 115000, "start": 1150.16, "end": 1158.64, "text": " Now, there are a couple of, I would say, unsupported capabilities and things that we plan to address", "tokens": [50372, 823, 11, 456, 366, 257, 1916, 295, 11, 286, 576, 584, 11, 2693, 10504, 14813, 10862, 293, 721, 300, 321, 1393, 281, 2985, 50796], "temperature": 0.0, "avg_logprob": -0.21773711840311685, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.00637059798464179}, {"id": 197, "seek": 115000, "start": 1158.64, "end": 1163.68, "text": " in the futures, more like limitations essentially. One thing I have supported at the moment are", "tokens": [50796, 294, 264, 26071, 11, 544, 411, 15705, 4476, 13, 1485, 551, 286, 362, 8104, 412, 264, 1623, 366, 51048], "temperature": 0.0, "avg_logprob": -0.21773711840311685, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.00637059798464179}, {"id": 198, "seek": 115000, "start": 1164.88, "end": 1170.32, "text": " links, both out and soft links. Opsfs has supported for soft links in the background,", "tokens": [51108, 6123, 11, 1293, 484, 293, 2787, 6123, 13, 422, 1878, 16883, 575, 8104, 337, 2787, 6123, 294, 264, 3678, 11, 51380], "temperature": 0.0, "avg_logprob": -0.21773711840311685, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.00637059798464179}, {"id": 199, "seek": 115000, "start": 1170.32, "end": 1174.72, "text": " but we never really used them in Opsfs, so we didn't have support here in Opsfs mount either.", "tokens": [51380, 457, 321, 1128, 534, 1143, 552, 294, 422, 1878, 16883, 11, 370, 321, 994, 380, 362, 1406, 510, 294, 422, 1878, 16883, 3746, 2139, 13, 51600], "temperature": 0.0, "avg_logprob": -0.21773711840311685, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.00637059798464179}, {"id": 200, "seek": 117472, "start": 1175.2, "end": 1184.16, "text": " The challenge we have is around the users of these caches. Yeah, so essentially, you know, if you,", "tokens": [50388, 440, 3430, 321, 362, 307, 926, 264, 5022, 295, 613, 269, 13272, 13, 865, 11, 370, 4476, 11, 291, 458, 11, 498, 291, 11, 50836], "temperature": 0.0, "avg_logprob": -0.18946280434866933, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.0051920912228524685}, {"id": 201, "seek": 117472, "start": 1184.16, "end": 1188.4, "text": " if you're working with a, with a local file system, the kernel, you know, there's a pretty aggressive,", "tokens": [50836, 498, 291, 434, 1364, 365, 257, 11, 365, 257, 2654, 3991, 1185, 11, 264, 28256, 11, 291, 458, 11, 456, 311, 257, 1238, 10762, 11, 51048], "temperature": 0.0, "avg_logprob": -0.18946280434866933, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.0051920912228524685}, {"id": 202, "seek": 117472, "start": 1188.4, "end": 1194.88, "text": " you know, caching of the data and so on. The problem we have is that Opsfs is a multi-tent", "tokens": [51048, 291, 458, 11, 269, 2834, 295, 264, 1412, 293, 370, 322, 13, 440, 1154, 321, 362, 307, 300, 422, 1878, 16883, 307, 257, 4825, 12, 83, 317, 51372], "temperature": 0.0, "avg_logprob": -0.18946280434866933, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.0051920912228524685}, {"id": 203, "seek": 117472, "start": 1194.88, "end": 1201.44, "text": " platform, so we have multiple users working on the potential of the same files, and so caching the", "tokens": [51372, 3663, 11, 370, 321, 362, 3866, 5022, 1364, 322, 264, 3995, 295, 264, 912, 7098, 11, 293, 370, 269, 2834, 264, 51700], "temperature": 0.0, "avg_logprob": -0.18946280434866933, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.0051920912228524685}, {"id": 204, "seek": 120144, "start": 1201.44, "end": 1206.0, "text": " files becomes a little bit problematic because if you have two users working on the same file,", "tokens": [50364, 7098, 3643, 257, 707, 857, 19011, 570, 498, 291, 362, 732, 5022, 1364, 322, 264, 912, 3991, 11, 50592], "temperature": 0.0, "avg_logprob": -0.1538767959132339, "compression_ratio": 1.6973684210526316, "no_speech_prob": 0.004166366998106241}, {"id": 205, "seek": 120144, "start": 1207.2, "end": 1211.6000000000001, "text": " then like the different mount points are not going to be able to talk to each other, say, A, there is", "tokens": [50652, 550, 411, 264, 819, 3746, 2793, 366, 406, 516, 281, 312, 1075, 281, 751, 281, 1184, 661, 11, 584, 11, 316, 11, 456, 307, 50872], "temperature": 0.0, "avg_logprob": -0.1538767959132339, "compression_ratio": 1.6973684210526316, "no_speech_prob": 0.004166366998106241}, {"id": 206, "seek": 120144, "start": 1213.28, "end": 1217.28, "text": " something that's changed here, and you need to reflect that in your cache. So at the moment,", "tokens": [50956, 746, 300, 311, 3105, 510, 11, 293, 291, 643, 281, 5031, 300, 294, 428, 19459, 13, 407, 412, 264, 1623, 11, 51156], "temperature": 0.0, "avg_logprob": -0.1538767959132339, "compression_ratio": 1.6973684210526316, "no_speech_prob": 0.004166366998106241}, {"id": 207, "seek": 120144, "start": 1217.28, "end": 1223.2, "text": " the caches are kind of disabled, but we're working on, on, on, on some solution to be able to get", "tokens": [51156, 264, 269, 13272, 366, 733, 295, 15191, 11, 457, 321, 434, 1364, 322, 11, 322, 11, 322, 11, 322, 512, 3827, 281, 312, 1075, 281, 483, 51452], "temperature": 0.0, "avg_logprob": -0.1538767959132339, "compression_ratio": 1.6973684210526316, "no_speech_prob": 0.004166366998106241}, {"id": 208, "seek": 122320, "start": 1223.28, "end": 1229.3600000000001, "text": " notifications and, and, and figure out that files have changed, right? And the reason,", "tokens": [50368, 13426, 293, 11, 293, 11, 293, 2573, 484, 300, 7098, 362, 3105, 11, 558, 30, 400, 264, 1778, 11, 50672], "temperature": 0.0, "avg_logprob": -0.18046385781806812, "compression_ratio": 1.9631147540983607, "no_speech_prob": 0.01832730695605278}, {"id": 209, "seek": 122320, "start": 1230.8, "end": 1234.16, "text": " the reason they don't know is because there's different mount points, because each mount point", "tokens": [50744, 264, 1778, 436, 500, 380, 458, 307, 570, 456, 311, 819, 3746, 2793, 11, 570, 1184, 3746, 935, 50912], "temperature": 0.0, "avg_logprob": -0.18046385781806812, "compression_ratio": 1.9631147540983607, "no_speech_prob": 0.01832730695605278}, {"id": 210, "seek": 122320, "start": 1234.16, "end": 1237.92, "text": " is not certificate for that specific user, right? So the users are not sharing the same mount point,", "tokens": [50912, 307, 406, 15953, 337, 300, 2685, 4195, 11, 558, 30, 407, 264, 5022, 366, 406, 5414, 264, 912, 3746, 935, 11, 51100], "temperature": 0.0, "avg_logprob": -0.18046385781806812, "compression_ratio": 1.9631147540983607, "no_speech_prob": 0.01832730695605278}, {"id": 211, "seek": 122320, "start": 1238.56, "end": 1243.52, "text": " so changes, one user making changes is going to talk to a different mount point, and the user making,", "tokens": [51132, 370, 2962, 11, 472, 4195, 1455, 2962, 307, 516, 281, 751, 281, 257, 819, 3746, 935, 11, 293, 264, 4195, 1455, 11, 51380], "temperature": 0.0, "avg_logprob": -0.18046385781806812, "compression_ratio": 1.9631147540983607, "no_speech_prob": 0.01832730695605278}, {"id": 212, "seek": 122320, "start": 1243.52, "end": 1250.48, "text": " making changes essentially. The other thing that happens, if you, if you, if we go back to the", "tokens": [51380, 1455, 2962, 4476, 13, 440, 661, 551, 300, 2314, 11, 498, 291, 11, 498, 291, 11, 498, 321, 352, 646, 281, 264, 51728], "temperature": 0.0, "avg_logprob": -0.18046385781806812, "compression_ratio": 1.9631147540983607, "no_speech_prob": 0.01832730695605278}, {"id": 213, "seek": 125048, "start": 1250.48, "end": 1258.56, "text": " right operation, when we upload the file, we upload the entire file. So there is no concept of,", "tokens": [50364, 558, 6916, 11, 562, 321, 6580, 264, 3991, 11, 321, 6580, 264, 2302, 3991, 13, 407, 456, 307, 572, 3410, 295, 11, 50768], "temperature": 0.0, "avg_logprob": -0.14583399662604699, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.020385947078466415}, {"id": 214, "seek": 125048, "start": 1259.68, "end": 1264.88, "text": " you know, uploading a specific block. The, the, the HFS API and the OPSF API does not allow you to", "tokens": [50824, 291, 458, 11, 27301, 257, 2685, 3461, 13, 440, 11, 264, 11, 264, 389, 29318, 9362, 293, 264, 422, 6273, 37, 9362, 775, 406, 2089, 291, 281, 51084], "temperature": 0.0, "avg_logprob": -0.14583399662604699, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.020385947078466415}, {"id": 215, "seek": 125048, "start": 1264.88, "end": 1269.76, "text": " basically say, you know, I know that, like a specific block has changed, I'm going to just replace", "tokens": [51084, 1936, 584, 11, 291, 458, 11, 286, 458, 300, 11, 411, 257, 2685, 3461, 575, 3105, 11, 286, 478, 516, 281, 445, 7406, 51328], "temperature": 0.0, "avg_logprob": -0.14583399662604699, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.020385947078466415}, {"id": 216, "seek": 125048, "start": 1269.76, "end": 1276.16, "text": " that specific block, right? So the, this, this operation, if you're working with very, very", "tokens": [51328, 300, 2685, 3461, 11, 558, 30, 407, 264, 11, 341, 11, 341, 6916, 11, 498, 291, 434, 1364, 365, 588, 11, 588, 51648], "temperature": 0.0, "avg_logprob": -0.14583399662604699, "compression_ratio": 1.7342342342342343, "no_speech_prob": 0.020385947078466415}, {"id": 217, "seek": 127616, "start": 1276.3200000000002, "end": 1283.92, "text": " hard files, then, then might become a problem. For the use cases that we use OPSFS mount within the", "tokens": [50372, 1152, 7098, 11, 550, 11, 550, 1062, 1813, 257, 1154, 13, 1171, 264, 764, 3331, 300, 321, 764, 422, 6273, 29318, 3746, 1951, 264, 50752], "temperature": 0.0, "avg_logprob": -0.20630213928222657, "compression_ratio": 1.83206106870229, "no_speech_prob": 0.017348363995552063}, {"id": 218, "seek": 127616, "start": 1283.92, "end": 1288.48, "text": " OPSF platform, this is not a problem. Users are working with, like, small Python applications,", "tokens": [50752, 422, 6273, 37, 3663, 11, 341, 307, 406, 257, 1154, 13, 47092, 366, 1364, 365, 11, 411, 11, 1359, 15329, 5821, 11, 50980], "temperature": 0.0, "avg_logprob": -0.20630213928222657, "compression_ratio": 1.83206106870229, "no_speech_prob": 0.017348363995552063}, {"id": 219, "seek": 127616, "start": 1288.48, "end": 1292.72, "text": " or like generally speaking, smaller files, or when they are dealing with bigger files, they are", "tokens": [50980, 420, 411, 5101, 4124, 11, 4356, 7098, 11, 420, 562, 436, 366, 6260, 365, 3801, 7098, 11, 436, 366, 51192], "temperature": 0.0, "avg_logprob": -0.20630213928222657, "compression_ratio": 1.83206106870229, "no_speech_prob": 0.017348363995552063}, {"id": 220, "seek": 127616, "start": 1292.72, "end": 1297.92, "text": " dealing more, in more like a, in a, in a read process, not necessarily in a, in a writing,", "tokens": [51192, 6260, 544, 11, 294, 544, 411, 257, 11, 294, 257, 11, 294, 257, 1401, 1399, 11, 406, 4725, 294, 257, 11, 294, 257, 3579, 11, 51452], "temperature": 0.0, "avg_logprob": -0.20630213928222657, "compression_ratio": 1.83206106870229, "no_speech_prob": 0.017348363995552063}, {"id": 221, "seek": 127616, "start": 1299.52, "end": 1304.0800000000002, "text": " yeah, not going to end up writing a parquet file in beam, like several gigabytes of parquet files.", "tokens": [51532, 1338, 11, 406, 516, 281, 917, 493, 3579, 257, 971, 19343, 3991, 294, 14269, 11, 411, 2940, 42741, 295, 971, 19343, 7098, 13, 51760], "temperature": 0.0, "avg_logprob": -0.20630213928222657, "compression_ratio": 1.83206106870229, "no_speech_prob": 0.017348363995552063}, {"id": 222, "seek": 130408, "start": 1304.8799999999999, "end": 1307.76, "text": " So that's kind of it. That's kind of where we, where we stand.", "tokens": [50404, 407, 300, 311, 733, 295, 309, 13, 663, 311, 733, 295, 689, 321, 11, 689, 321, 1463, 13, 50548], "temperature": 0.0, "avg_logprob": -0.1929015552296358, "compression_ratio": 1.4910179640718564, "no_speech_prob": 0.004243957810103893}, {"id": 223, "seek": 130408, "start": 1309.6799999999998, "end": 1316.1599999999999, "text": " If you have any questions, that's, that's, you know, I can take them now. And thank you very much.", "tokens": [50644, 759, 291, 362, 604, 1651, 11, 300, 311, 11, 300, 311, 11, 291, 458, 11, 286, 393, 747, 552, 586, 13, 400, 1309, 291, 588, 709, 13, 50968], "temperature": 0.0, "avg_logprob": -0.1929015552296358, "compression_ratio": 1.4910179640718564, "no_speech_prob": 0.004243957810103893}, {"id": 224, "seek": 130408, "start": 1324.56, "end": 1328.72, "text": " Do you and practice have problems with applications ignoring the return value of close?", "tokens": [51388, 1144, 291, 293, 3124, 362, 2740, 365, 5821, 26258, 264, 2736, 2158, 295, 1998, 30, 51596], "temperature": 0.0, "avg_logprob": -0.1929015552296358, "compression_ratio": 1.4910179640718564, "no_speech_prob": 0.004243957810103893}, {"id": 225, "seek": 132872, "start": 1329.1200000000001, "end": 1335.68, "text": " The return value of close. No, so the question is, if we have problems with", "tokens": [50384, 440, 2736, 2158, 295, 1998, 13, 883, 11, 370, 264, 1168, 307, 11, 498, 321, 362, 2740, 365, 50712], "temperature": 0.0, "avg_logprob": -0.2254589047052164, "compression_ratio": 1.8212765957446808, "no_speech_prob": 0.015053928829729557}, {"id": 226, "seek": 132872, "start": 1336.24, "end": 1341.3600000000001, "text": " applications ignoring the return value of close, not at the moment, no. We had,", "tokens": [50740, 5821, 26258, 264, 2736, 2158, 295, 1998, 11, 406, 412, 264, 1623, 11, 572, 13, 492, 632, 11, 50996], "temperature": 0.0, "avg_logprob": -0.2254589047052164, "compression_ratio": 1.8212765957446808, "no_speech_prob": 0.015053928829729557}, {"id": 227, "seek": 132872, "start": 1342.08, "end": 1347.6000000000001, "text": " with the way we use OPSFS mount is basically, we, we, we, we, we mount inside of containers,", "tokens": [51032, 365, 264, 636, 321, 764, 422, 6273, 29318, 3746, 307, 1936, 11, 321, 11, 321, 11, 321, 11, 321, 11, 321, 3746, 1854, 295, 17089, 11, 51308], "temperature": 0.0, "avg_logprob": -0.2254589047052164, "compression_ratio": 1.8212765957446808, "no_speech_prob": 0.015053928829729557}, {"id": 228, "seek": 132872, "start": 1347.6000000000001, "end": 1351.1200000000001, "text": " for instance, when you're doing, if you're running Jupyter notebooks, or if you're running", "tokens": [51308, 337, 5197, 11, 562, 291, 434, 884, 11, 498, 291, 434, 2614, 22125, 88, 391, 43782, 11, 420, 498, 291, 434, 2614, 51484], "temperature": 0.0, "avg_logprob": -0.2254589047052164, "compression_ratio": 1.8212765957446808, "no_speech_prob": 0.015053928829729557}, {"id": 229, "seek": 132872, "start": 1351.1200000000001, "end": 1355.52, "text": " great applications on, and we shut down the entire process, usually shut down the entire", "tokens": [51484, 869, 5821, 322, 11, 293, 321, 5309, 760, 264, 2302, 1399, 11, 2673, 5309, 760, 264, 2302, 51704], "temperature": 0.0, "avg_logprob": -0.2254589047052164, "compression_ratio": 1.8212765957446808, "no_speech_prob": 0.015053928829729557}, {"id": 230, "seek": 135552, "start": 1355.52, "end": 1359.6, "text": " container, essentially. Right? So we, when, when, you know, the files gets closed and everything", "tokens": [50364, 10129, 11, 4476, 13, 1779, 30, 407, 321, 11, 562, 11, 562, 11, 291, 458, 11, 264, 7098, 2170, 5395, 293, 1203, 50568], "temperature": 0.0, "avg_logprob": -0.23501681480087153, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.007378720678389072}, {"id": 231, "seek": 135552, "start": 1359.6, "end": 1364.56, "text": " gets closed, um, shut down the entire mount point, essentially. That's because, not necessarily because", "tokens": [50568, 2170, 5395, 11, 1105, 11, 5309, 760, 264, 2302, 3746, 935, 11, 4476, 13, 663, 311, 570, 11, 406, 4725, 570, 50816], "temperature": 0.0, "avg_logprob": -0.23501681480087153, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.007378720678389072}, {"id": 232, "seek": 135552, "start": 1364.56, "end": 1368.8799999999999, "text": " it's necessary, but that's because usually, that's the use, like user experience and that people", "tokens": [50816, 309, 311, 4818, 11, 457, 300, 311, 570, 2673, 11, 300, 311, 264, 764, 11, 411, 4195, 1752, 293, 300, 561, 51032], "temperature": 0.0, "avg_logprob": -0.23501681480087153, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.007378720678389072}, {"id": 233, "seek": 135552, "start": 1368.8799999999999, "end": 1374.8, "text": " have in general. But you can't guarantee that the upload actually worked. You can't guarantee,", "tokens": [51032, 362, 294, 2674, 13, 583, 291, 393, 380, 10815, 300, 264, 6580, 767, 2732, 13, 509, 393, 380, 10815, 11, 51328], "temperature": 0.0, "avg_logprob": -0.23501681480087153, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.007378720678389072}, {"id": 234, "seek": 135552, "start": 1374.8, "end": 1381.44, "text": " come again, sorry. The last step. What happens if the upload file fails? If the upload file fails,", "tokens": [51328, 808, 797, 11, 2597, 13, 440, 1036, 1823, 13, 708, 2314, 498, 264, 6580, 3991, 18199, 30, 759, 264, 6580, 3991, 18199, 11, 51660], "temperature": 0.0, "avg_logprob": -0.23501681480087153, "compression_ratio": 1.8185185185185184, "no_speech_prob": 0.007378720678389072}, {"id": 235, "seek": 138144, "start": 1382.3200000000002, "end": 1385.68, "text": " try again, and then eventually, yeah, it's a simple, we give up, yeah.", "tokens": [50408, 853, 797, 11, 293, 550, 4728, 11, 1338, 11, 309, 311, 257, 2199, 11, 321, 976, 493, 11, 1338, 13, 50576], "temperature": 0.0, "avg_logprob": -0.3340370525013317, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.005190262105315924}, {"id": 236, "seek": 138144, "start": 1387.52, "end": 1387.76, "text": " Yeah.", "tokens": [50668, 865, 13, 50680], "temperature": 0.0, "avg_logprob": -0.3340370525013317, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.005190262105315924}, {"id": 237, "seek": 138144, "start": 1387.76, "end": 1393.76, "text": " So it seems that the retro machines that try to write open for writing and write through the same", "tokens": [50680, 407, 309, 2544, 300, 264, 18820, 8379, 300, 853, 281, 2464, 1269, 337, 3579, 293, 2464, 807, 264, 912, 50980], "temperature": 0.0, "avg_logprob": -0.3340370525013317, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.005190262105315924}, {"id": 238, "seek": 138144, "start": 1393.76, "end": 1400.16, "text": " file independently, so obviously one of them wins and takes a lease and does download the file", "tokens": [50980, 3991, 21761, 11, 370, 2745, 472, 295, 552, 10641, 293, 2516, 257, 24961, 293, 775, 5484, 264, 3991, 51300], "temperature": 0.0, "avg_logprob": -0.3340370525013317, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.005190262105315924}, {"id": 239, "seek": 138144, "start": 1400.16, "end": 1404.64, "text": " modification and upload. Yeah. What happens with other machines, or what does the process that", "tokens": [51300, 26747, 293, 6580, 13, 865, 13, 708, 2314, 365, 661, 8379, 11, 420, 437, 775, 264, 1399, 300, 51524], "temperature": 0.0, "avg_logprob": -0.3340370525013317, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.005190262105315924}, {"id": 240, "seek": 138144, "start": 1404.64, "end": 1408.0, "text": " tries to open the file for writing at the same time and write to each and so on?", "tokens": [51524, 9898, 281, 1269, 264, 3991, 337, 3579, 412, 264, 912, 565, 293, 2464, 281, 1184, 293, 370, 322, 30, 51692], "temperature": 0.0, "avg_logprob": -0.3340370525013317, "compression_ratio": 1.816326530612245, "no_speech_prob": 0.005190262105315924}, {"id": 241, "seek": 140800, "start": 1408.96, "end": 1413.68, "text": " In this case, the last right wins. Like that's the problem that we have here, right? It's basically", "tokens": [50412, 682, 341, 1389, 11, 264, 1036, 558, 10641, 13, 1743, 300, 311, 264, 1154, 300, 321, 362, 510, 11, 558, 30, 467, 311, 1936, 50648], "temperature": 0.0, "avg_logprob": -0.20708955449166058, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.002304092748090625}, {"id": 242, "seek": 140800, "start": 1413.68, "end": 1418.56, "text": " saying if we have, like multiple machines mounted in the same directory, they can't, like, and we're", "tokens": [50648, 1566, 498, 321, 362, 11, 411, 3866, 8379, 19138, 294, 264, 912, 21120, 11, 436, 393, 380, 11, 411, 11, 293, 321, 434, 50892], "temperature": 0.0, "avg_logprob": -0.20708955449166058, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.002304092748090625}, {"id": 243, "seek": 140800, "start": 1418.56, "end": 1423.6, "text": " writing on the same file. I, the mount point doesn't, doesn't know that, like, you are changing the", "tokens": [50892, 3579, 322, 264, 912, 3991, 13, 286, 11, 264, 3746, 935, 1177, 380, 11, 1177, 380, 458, 300, 11, 411, 11, 291, 366, 4473, 264, 51144], "temperature": 0.0, "avg_logprob": -0.20708955449166058, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.002304092748090625}, {"id": 244, "seek": 140800, "start": 1423.6, "end": 1427.68, "text": " same, like my mount point doesn't know that you're changing the same file. So we upload the file,", "tokens": [51144, 912, 11, 411, 452, 3746, 935, 1177, 380, 458, 300, 291, 434, 4473, 264, 912, 3991, 13, 407, 321, 6580, 264, 3991, 11, 51348], "temperature": 0.0, "avg_logprob": -0.20708955449166058, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.002304092748090625}, {"id": 245, "seek": 140800, "start": 1427.68, "end": 1432.08, "text": " and then you upload the file as well, and your, your, your right space is essentially wins, essentially.", "tokens": [51348, 293, 550, 291, 6580, 264, 3991, 382, 731, 11, 293, 428, 11, 428, 11, 428, 558, 1901, 307, 4476, 10641, 11, 4476, 13, 51568], "temperature": 0.0, "avg_logprob": -0.20708955449166058, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.002304092748090625}, {"id": 246, "seek": 140800, "start": 1433.36, "end": 1434.8, "text": " And then, can we get?", "tokens": [51632, 400, 550, 11, 393, 321, 483, 30, 51704], "temperature": 0.0, "avg_logprob": -0.20708955449166058, "compression_ratio": 1.9811320754716981, "no_speech_prob": 0.002304092748090625}, {"id": 247, "seek": 143480, "start": 1435.76, "end": 1442.72, "text": " No, nobody's waiting for another one. But I'm like, you end up in like, in, you end up in a", "tokens": [50412, 883, 11, 5079, 311, 3806, 337, 1071, 472, 13, 583, 286, 478, 411, 11, 291, 917, 493, 294, 411, 11, 294, 11, 291, 917, 493, 294, 257, 50760], "temperature": 0.0, "avg_logprob": -0.28303987639290945, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.009661242365837097}, {"id": 248, "seek": 143480, "start": 1442.72, "end": 1446.56, "text": " weird situation where I might not be able to see immediately your changes, and so I might be able", "tokens": [50760, 3657, 2590, 689, 286, 1062, 406, 312, 1075, 281, 536, 4258, 428, 2962, 11, 293, 370, 286, 1062, 312, 1075, 50952], "temperature": 0.0, "avg_logprob": -0.28303987639290945, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.009661242365837097}, {"id": 249, "seek": 143480, "start": 1446.56, "end": 1451.44, "text": " to, I might re-resave my file and re-re-reprove my file, so then your changes get, get, get", "tokens": [50952, 281, 11, 286, 1062, 319, 12, 495, 946, 452, 3991, 293, 319, 12, 265, 12, 265, 4318, 303, 452, 3991, 11, 370, 550, 428, 2962, 483, 11, 483, 11, 483, 51196], "temperature": 0.0, "avg_logprob": -0.28303987639290945, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.009661242365837097}, {"id": 250, "seek": 143480, "start": 1451.44, "end": 1455.9199999999998, "text": " covered written again. So it becomes a little bit, a bit, a little bit like this. Yeah.", "tokens": [51196, 5343, 3720, 797, 13, 407, 309, 3643, 257, 707, 857, 11, 257, 857, 11, 257, 707, 857, 411, 341, 13, 865, 13, 51420], "temperature": 0.0, "avg_logprob": -0.28303987639290945, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.009661242365837097}, {"id": 251, "seek": 143480, "start": 1461.36, "end": 1461.84, "text": " Yeah.", "tokens": [51692, 865, 13, 51716], "temperature": 0.0, "avg_logprob": -0.28303987639290945, "compression_ratio": 1.7523364485981308, "no_speech_prob": 0.009661242365837097}, {"id": 252, "seek": 146480, "start": 1465.52, "end": 1466.0, "text": " Yeah.", "tokens": [50400, 865, 13, 50424], "temperature": 0.0, "avg_logprob": -0.30021388260359616, "compression_ratio": 1.6421052631578947, "no_speech_prob": 0.00699814036488533}, {"id": 253, "seek": 146480, "start": 1469.12, "end": 1469.52, "text": " Sorry.", "tokens": [50580, 4919, 13, 50600], "temperature": 0.0, "avg_logprob": -0.30021388260359616, "compression_ratio": 1.6421052631578947, "no_speech_prob": 0.00699814036488533}, {"id": 254, "seek": 146480, "start": 1472.56, "end": 1480.08, "text": " Uh, good question. Uh, in general, yes. Um, you might, like, you might not have, like, the security", "tokens": [50752, 4019, 11, 665, 1168, 13, 4019, 11, 294, 2674, 11, 2086, 13, 3301, 11, 291, 1062, 11, 411, 11, 291, 1062, 406, 362, 11, 411, 11, 264, 3825, 51128], "temperature": 0.0, "avg_logprob": -0.30021388260359616, "compression_ratio": 1.6421052631578947, "no_speech_prob": 0.00699814036488533}, {"id": 255, "seek": 146480, "start": 1480.08, "end": 1485.68, "text": " part of the, we didn't implement the CalBros part of the, the security part. So if, if you have a", "tokens": [51128, 644, 295, 264, 11, 321, 994, 380, 4445, 264, 3511, 33, 2635, 644, 295, 264, 11, 264, 3825, 644, 13, 407, 498, 11, 498, 291, 362, 257, 51408], "temperature": 0.0, "avg_logprob": -0.30021388260359616, "compression_ratio": 1.6421052631578947, "no_speech_prob": 0.00699814036488533}, {"id": 256, "seek": 146480, "start": 1485.68, "end": 1491.84, "text": " secure cluster, then you're probably not going to be able to, to use it. Or, yeah, you, you implement", "tokens": [51408, 7144, 13630, 11, 550, 291, 434, 1391, 406, 516, 281, 312, 1075, 281, 11, 281, 764, 309, 13, 1610, 11, 1338, 11, 291, 11, 291, 4445, 51716], "temperature": 0.0, "avg_logprob": -0.30021388260359616, "compression_ratio": 1.6421052631578947, "no_speech_prob": 0.00699814036488533}, {"id": 257, "seek": 149184, "start": 1491.84, "end": 1497.12, "text": " the CalBros part. Yeah. Yeah. It was a question in the back.", "tokens": [50364, 264, 3511, 33, 2635, 644, 13, 865, 13, 865, 13, 467, 390, 257, 1168, 294, 264, 646, 13, 50628], "temperature": 0.0, "avg_logprob": -0.24156029055816958, "compression_ratio": 1.9281767955801106, "no_speech_prob": 0.015982359647750854}, {"id": 258, "seek": 149184, "start": 1504.6399999999999, "end": 1510.08, "text": " No, there, there, there is, there are processes, yeah, so, yeah, thank you. Uh, the, the question is,", "tokens": [51004, 883, 11, 456, 11, 456, 11, 456, 307, 11, 456, 366, 7555, 11, 1338, 11, 370, 11, 1338, 11, 1309, 291, 13, 4019, 11, 264, 11, 264, 1168, 307, 11, 51276], "temperature": 0.0, "avg_logprob": -0.24156029055816958, "compression_ratio": 1.9281767955801106, "no_speech_prob": 0.015982359647750854}, {"id": 259, "seek": 149184, "start": 1510.08, "end": 1514.0, "text": " uh, whether or not there are processes sharing the file. Uh, there are processes sharing the file,", "tokens": [51276, 2232, 11, 1968, 420, 406, 456, 366, 7555, 5414, 264, 3991, 13, 4019, 11, 456, 366, 7555, 5414, 264, 3991, 11, 51472], "temperature": 0.0, "avg_logprob": -0.24156029055816958, "compression_ratio": 1.9281767955801106, "no_speech_prob": 0.015982359647750854}, {"id": 260, "seek": 149184, "start": 1514.8799999999999, "end": 1520.9599999999998, "text": " but you have, the problem is that you have multiple users writing on, on the same file,", "tokens": [51516, 457, 291, 362, 11, 264, 1154, 307, 300, 291, 362, 3866, 5022, 3579, 322, 11, 322, 264, 912, 3991, 11, 51820], "temperature": 0.0, "avg_logprob": -0.24156029055816958, "compression_ratio": 1.9281767955801106, "no_speech_prob": 0.015982359647750854}, {"id": 261, "seek": 152096, "start": 1521.6000000000001, "end": 1523.92, "text": " on different processes that do not know about each other.", "tokens": [50396, 322, 819, 7555, 300, 360, 406, 458, 466, 1184, 661, 13, 50512], "temperature": 0.0, "avg_logprob": -0.2917674825161318, "compression_ratio": 1.8089171974522293, "no_speech_prob": 0.012476794421672821}, {"id": 262, "seek": 152096, "start": 1529.92, "end": 1530.24, "text": " Yeah.", "tokens": [50812, 865, 13, 50828], "temperature": 0.0, "avg_logprob": -0.2917674825161318, "compression_ratio": 1.8089171974522293, "no_speech_prob": 0.012476794421672821}, {"id": 263, "seek": 152096, "start": 1533.04, "end": 1537.8400000000001, "text": " It's also, you know, it's like the, the, the, the different mount points are, uh, that the,", "tokens": [50968, 467, 311, 611, 11, 291, 458, 11, 309, 311, 411, 264, 11, 264, 11, 264, 11, 264, 819, 3746, 2793, 366, 11, 2232, 11, 300, 264, 11, 51208], "temperature": 0.0, "avg_logprob": -0.2917674825161318, "compression_ratio": 1.8089171974522293, "no_speech_prob": 0.012476794421672821}, {"id": 264, "seek": 152096, "start": 1537.8400000000001, "end": 1543.28, "text": " the question was about the directory metadata. It's also, it's like it's independent with the,", "tokens": [51208, 264, 1168, 390, 466, 264, 21120, 26603, 13, 467, 311, 611, 11, 309, 311, 411, 309, 311, 6695, 365, 264, 11, 51480], "temperature": 0.0, "avg_logprob": -0.2917674825161318, "compression_ratio": 1.8089171974522293, "no_speech_prob": 0.012476794421672821}, {"id": 265, "seek": 152096, "start": 1543.28, "end": 1544.24, "text": " it's independent with each other.", "tokens": [51480, 309, 311, 6695, 365, 1184, 661, 13, 51528], "temperature": 0.0, "avg_logprob": -0.2917674825161318, "compression_ratio": 1.8089171974522293, "no_speech_prob": 0.012476794421672821}, {"id": 266, "seek": 155096, "start": 1551.2, "end": 1558.16, "text": " They don't share mount points, no. Yeah. So if you create a file, um, then, yeah, but if you, if you", "tokens": [50376, 814, 500, 380, 2073, 3746, 2793, 11, 572, 13, 865, 13, 407, 498, 291, 1884, 257, 3991, 11, 1105, 11, 550, 11, 1338, 11, 457, 498, 291, 11, 498, 291, 50724], "temperature": 0.0, "avg_logprob": -0.25326638562338694, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.008290610276162624}, {"id": 267, "seek": 155096, "start": 1558.16, "end": 1562.88, "text": " do a less operation, then we go back to the, to the file system and that is, is, is reflected.", "tokens": [50724, 360, 257, 1570, 6916, 11, 550, 321, 352, 646, 281, 264, 11, 281, 264, 3991, 1185, 293, 300, 307, 11, 307, 11, 307, 15502, 13, 50960], "temperature": 0.0, "avg_logprob": -0.25326638562338694, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.008290610276162624}, {"id": 268, "seek": 155096, "start": 1563.6000000000001, "end": 1567.52, "text": " But so, but they're not necessarily relying on the mount point, relying the obfuscates mount,", "tokens": [50996, 583, 370, 11, 457, 436, 434, 406, 4725, 24140, 322, 264, 3746, 935, 11, 24140, 264, 1111, 69, 32601, 1024, 3746, 11, 51192], "temperature": 0.0, "avg_logprob": -0.25326638562338694, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.008290610276162624}, {"id": 269, "seek": 155096, "start": 1567.52, "end": 1574.0, "text": " going back to the, to the, to the, to the remote storage to get the new directory structure and so on.", "tokens": [51192, 516, 646, 281, 264, 11, 281, 264, 11, 281, 264, 11, 281, 264, 8607, 6725, 281, 483, 264, 777, 21120, 3877, 293, 370, 322, 13, 51516], "temperature": 0.0, "avg_logprob": -0.25326638562338694, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.008290610276162624}, {"id": 270, "seek": 157400, "start": 1574.88, "end": 1577.44, "text": " Yeah.", "tokens": [50408, 865, 13, 50536], "temperature": 0.0, "avg_logprob": -0.32688590715516286, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.016327256336808205}, {"id": 271, "seek": 157400, "start": 1577.44, "end": 1580.96, "text": " Um, with this, uh, stage file writing,", "tokens": [50536, 3301, 11, 365, 341, 11, 2232, 11, 3233, 3991, 3579, 11, 50712], "temperature": 0.0, "avg_logprob": -0.32688590715516286, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.016327256336808205}, {"id": 272, "seek": 157400, "start": 1581.52, "end": 1582.0, "text": " yeah.", "tokens": [50740, 1338, 13, 50764], "temperature": 0.0, "avg_logprob": -0.32688590715516286, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.016327256336808205}, {"id": 273, "seek": 157400, "start": 1582.0, "end": 1588.16, "text": " I mentioned that improves read performance for the client too, right? When it's actually a downloaded", "tokens": [50764, 286, 2835, 300, 24771, 1401, 3389, 337, 264, 6423, 886, 11, 558, 30, 1133, 309, 311, 767, 257, 21748, 51072], "temperature": 0.0, "avg_logprob": -0.32688590715516286, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.016327256336808205}, {"id": 274, "seek": 157400, "start": 1588.16, "end": 1594.16, "text": " local file and it, do people use that? Like do they do a little write and then just get quick", "tokens": [51072, 2654, 3991, 293, 309, 11, 360, 561, 764, 300, 30, 1743, 360, 436, 360, 257, 707, 2464, 293, 550, 445, 483, 1702, 51372], "temperature": 0.0, "avg_logprob": -0.32688590715516286, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.016327256336808205}, {"id": 275, "seek": 157400, "start": 1594.16, "end": 1595.2, "text": " downloads?", "tokens": [51372, 36553, 30, 51424], "temperature": 0.0, "avg_logprob": -0.32688590715516286, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.016327256336808205}, {"id": 276, "seek": 157400, "start": 1595.2, "end": 1600.24, "text": " It, it, it does. Um, it does. That's, that's one of the, all that, like that's one of the other,", "tokens": [51424, 467, 11, 309, 11, 309, 775, 13, 3301, 11, 309, 775, 13, 663, 311, 11, 300, 311, 472, 295, 264, 11, 439, 300, 11, 411, 300, 311, 472, 295, 264, 661, 11, 51676], "temperature": 0.0, "avg_logprob": -0.32688590715516286, "compression_ratio": 1.6090909090909091, "no_speech_prob": 0.016327256336808205}, {"id": 277, "seek": 160024, "start": 1600.32, "end": 1603.44, "text": " that's one of the other reasons we kind of, the question, sorry, yeah, sorry.", "tokens": [50368, 300, 311, 472, 295, 264, 661, 4112, 321, 733, 295, 11, 264, 1168, 11, 2597, 11, 1338, 11, 2597, 13, 50524], "temperature": 0.0, "avg_logprob": -0.2005290097968523, "compression_ratio": 1.8473895582329318, "no_speech_prob": 0.007241443265229464}, {"id": 278, "seek": 160024, "start": 1604.72, "end": 1610.16, "text": " Uh, the, the question is around the, um, read performance when you're reading a file that you", "tokens": [50588, 4019, 11, 264, 11, 264, 1168, 307, 926, 264, 11, 1105, 11, 1401, 3389, 562, 291, 434, 3760, 257, 3991, 300, 291, 50860], "temperature": 0.0, "avg_logprob": -0.2005290097968523, "compression_ratio": 1.8473895582329318, "no_speech_prob": 0.007241443265229464}, {"id": 279, "seek": 160024, "start": 1610.16, "end": 1616.64, "text": " have, like, uh, like stored locally in the stage directory. Um, it does. Um, we don't have a specific", "tokens": [50860, 362, 11, 411, 11, 2232, 11, 411, 12187, 16143, 294, 264, 3233, 21120, 13, 3301, 11, 309, 775, 13, 3301, 11, 321, 500, 380, 362, 257, 2685, 51184], "temperature": 0.0, "avg_logprob": -0.2005290097968523, "compression_ratio": 1.8473895582329318, "no_speech_prob": 0.007241443265229464}, {"id": 280, "seek": 160024, "start": 1616.64, "end": 1621.84, "text": " number, um, but I have like some, like user experience with that. Um, when you have, um,", "tokens": [51184, 1230, 11, 1105, 11, 457, 286, 362, 411, 512, 11, 411, 4195, 1752, 365, 300, 13, 3301, 11, 562, 291, 362, 11, 1105, 11, 51444], "temperature": 0.0, "avg_logprob": -0.2005290097968523, "compression_ratio": 1.8473895582329318, "no_speech_prob": 0.007241443265229464}, {"id": 281, "seek": 160024, "start": 1621.84, "end": 1626.08, "text": " when you have files that are on, on the remote storage, uh, even if they are, like, especially if", "tokens": [51444, 562, 291, 362, 7098, 300, 366, 322, 11, 322, 264, 8607, 6725, 11, 2232, 11, 754, 498, 436, 366, 11, 411, 11, 2318, 498, 51656], "temperature": 0.0, "avg_logprob": -0.2005290097968523, "compression_ratio": 1.8473895582329318, "no_speech_prob": 0.007241443265229464}, {"id": 282, "seek": 162608, "start": 1626.1599999999999, "end": 1630.32, "text": " you have smaller files, um, like maybe like a Jupyter notebook, this JSON file, like,", "tokens": [50368, 291, 362, 4356, 7098, 11, 1105, 11, 411, 1310, 411, 257, 22125, 88, 391, 21060, 11, 341, 31828, 3991, 11, 411, 11, 50576], "temperature": 0.0, "avg_logprob": -0.2259987996036845, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.005680312402546406}, {"id": 283, "seek": 162608, "start": 1630.32, "end": 1635.1999999999998, "text": " you know, maybe a megabyte maximum or something, um, then it's the, the, the override of going", "tokens": [50576, 291, 458, 11, 1310, 257, 10816, 34529, 6674, 420, 746, 11, 1105, 11, 550, 309, 311, 264, 11, 264, 11, 264, 42321, 295, 516, 50820], "temperature": 0.0, "avg_logprob": -0.2259987996036845, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.005680312402546406}, {"id": 284, "seek": 162608, "start": 1635.1999999999998, "end": 1639.12, "text": " and fetching it every time. It's, it's quite significant. If you have it locally, it's, it's,", "tokens": [50820, 293, 23673, 278, 309, 633, 565, 13, 467, 311, 11, 309, 311, 1596, 4776, 13, 759, 291, 362, 309, 16143, 11, 309, 311, 11, 309, 311, 11, 51016], "temperature": 0.0, "avg_logprob": -0.2259987996036845, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.005680312402546406}, {"id": 285, "seek": 162608, "start": 1639.12, "end": 1641.6799999999998, "text": " it's much more, uh, you can see it much more reactive.", "tokens": [51016, 309, 311, 709, 544, 11, 2232, 11, 291, 393, 536, 309, 709, 544, 28897, 13, 51144], "temperature": 0.0, "avg_logprob": -0.2259987996036845, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.005680312402546406}, {"id": 286, "seek": 162608, "start": 1646.96, "end": 1647.52, "text": " Yeah, there was a.", "tokens": [51408, 865, 11, 456, 390, 257, 13, 51436], "temperature": 0.0, "avg_logprob": -0.2259987996036845, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.005680312402546406}, {"id": 287, "seek": 162608, "start": 1647.52, "end": 1652.6399999999999, "text": " I thought you said, uh, you, you delete the station file as soon as you close it.", "tokens": [51436, 286, 1194, 291, 848, 11, 2232, 11, 291, 11, 291, 12097, 264, 5214, 3991, 382, 2321, 382, 291, 1998, 309, 13, 51692], "temperature": 0.0, "avg_logprob": -0.2259987996036845, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.005680312402546406}, {"id": 288, "seek": 162608, "start": 1652.6399999999999, "end": 1653.12, "text": " Yes.", "tokens": [51692, 1079, 13, 51716], "temperature": 0.0, "avg_logprob": -0.2259987996036845, "compression_ratio": 1.7193675889328064, "no_speech_prob": 0.005680312402546406}, {"id": 289, "seek": 165312, "start": 1654.08, "end": 1660.7199999999998, "text": " No, but if you, if you, if you, if you, if you have it open, uh, when you, when you keep writing it,", "tokens": [50412, 883, 11, 457, 498, 291, 11, 498, 291, 11, 498, 291, 11, 498, 291, 11, 498, 291, 362, 309, 1269, 11, 2232, 11, 562, 291, 11, 562, 291, 1066, 3579, 309, 11, 50744], "temperature": 0.0, "avg_logprob": -0.1675831345487232, "compression_ratio": 2.257142857142857, "no_speech_prob": 0.0024946057237684727}, {"id": 290, "seek": 165312, "start": 1660.7199999999998, "end": 1664.56, "text": " then you, when you read it, you're not going to the, to the remote storage, you're reading from the,", "tokens": [50744, 550, 291, 11, 562, 291, 1401, 309, 11, 291, 434, 406, 516, 281, 264, 11, 281, 264, 8607, 6725, 11, 291, 434, 3760, 490, 264, 11, 50936], "temperature": 0.0, "avg_logprob": -0.1675831345487232, "compression_ratio": 2.257142857142857, "no_speech_prob": 0.0024946057237684727}, {"id": 291, "seek": 165312, "start": 1664.56, "end": 1672.2399999999998, "text": " from the local, um, from the local, uh, yeah, from the local, from the local staging directory.", "tokens": [50936, 490, 264, 2654, 11, 1105, 11, 490, 264, 2654, 11, 2232, 11, 1338, 11, 490, 264, 2654, 11, 490, 264, 2654, 41085, 21120, 13, 51320], "temperature": 0.0, "avg_logprob": -0.1675831345487232, "compression_ratio": 2.257142857142857, "no_speech_prob": 0.0024946057237684727}, {"id": 292, "seek": 165312, "start": 1672.2399999999998, "end": 1678.1599999999999, "text": " Right. So if you, the only, the only, the only, the only time is, is if you're reading, if you're", "tokens": [51320, 1779, 13, 407, 498, 291, 11, 264, 787, 11, 264, 787, 11, 264, 787, 11, 264, 787, 565, 307, 11, 307, 498, 291, 434, 3760, 11, 498, 291, 434, 51616], "temperature": 0.0, "avg_logprob": -0.1675831345487232, "compression_ratio": 2.257142857142857, "no_speech_prob": 0.0024946057237684727}, {"id": 293, "seek": 167816, "start": 1678.16, "end": 1682.5600000000002, "text": " doing some read only operations, essentially, then at that point we don't download it, uh, mostly", "tokens": [50364, 884, 512, 1401, 787, 7705, 11, 4476, 11, 550, 412, 300, 935, 321, 500, 380, 5484, 309, 11, 2232, 11, 5240, 50584], "temperature": 0.0, "avg_logprob": -0.16227844693013374, "compression_ratio": 1.8679245283018868, "no_speech_prob": 0.01015390083193779}, {"id": 294, "seek": 167816, "start": 1682.5600000000002, "end": 1687.2, "text": " because, uh, in general, they'll be working with like pretty large files. And so the downloading", "tokens": [50584, 570, 11, 2232, 11, 294, 2674, 11, 436, 603, 312, 1364, 365, 411, 1238, 2416, 7098, 13, 400, 370, 264, 32529, 50816], "temperature": 0.0, "avg_logprob": -0.16227844693013374, "compression_ratio": 1.8679245283018868, "no_speech_prob": 0.01015390083193779}, {"id": 295, "seek": 167816, "start": 1687.2, "end": 1691.8400000000001, "text": " process might, might not be necessary, right? Because if you open, let's say a parquet file,", "tokens": [50816, 1399, 1062, 11, 1062, 406, 312, 4818, 11, 558, 30, 1436, 498, 291, 1269, 11, 718, 311, 584, 257, 971, 19343, 3991, 11, 51048], "temperature": 0.0, "avg_logprob": -0.16227844693013374, "compression_ratio": 1.8679245283018868, "no_speech_prob": 0.01015390083193779}, {"id": 296, "seek": 167816, "start": 1691.8400000000001, "end": 1695.44, "text": " what happens is that you go at the end of the file, you just read the footer to figure out the schema,", "tokens": [51048, 437, 2314, 307, 300, 291, 352, 412, 264, 917, 295, 264, 3991, 11, 291, 445, 1401, 264, 2671, 260, 281, 2573, 484, 264, 34078, 11, 51228], "temperature": 0.0, "avg_logprob": -0.16227844693013374, "compression_ratio": 1.8679245283018868, "no_speech_prob": 0.01015390083193779}, {"id": 297, "seek": 167816, "start": 1695.44, "end": 1699.52, "text": " figure out where you, you need to go. And if maybe it's like a four gigabytes parquet file,", "tokens": [51228, 2573, 484, 689, 291, 11, 291, 643, 281, 352, 13, 400, 498, 1310, 309, 311, 411, 257, 1451, 42741, 971, 19343, 3991, 11, 51432], "temperature": 0.0, "avg_logprob": -0.16227844693013374, "compression_ratio": 1.8679245283018868, "no_speech_prob": 0.01015390083193779}, {"id": 298, "seek": 167816, "start": 1699.52, "end": 1703.8400000000001, "text": " you don't want to download four gigabytes to read that maybe a couple megabytes of metadata, essentially.", "tokens": [51432, 291, 500, 380, 528, 281, 5484, 1451, 42741, 281, 1401, 300, 1310, 257, 1916, 10816, 24538, 295, 26603, 11, 4476, 13, 51648], "temperature": 0.0, "avg_logprob": -0.16227844693013374, "compression_ratio": 1.8679245283018868, "no_speech_prob": 0.01015390083193779}, {"id": 299, "seek": 167816, "start": 1705.3600000000001, "end": 1705.68, "text": " Yeah.", "tokens": [51724, 865, 13, 51740], "temperature": 0.0, "avg_logprob": -0.16227844693013374, "compression_ratio": 1.8679245283018868, "no_speech_prob": 0.01015390083193779}, {"id": 300, "seek": 170816, "start": 1708.72, "end": 1708.88, "text": " One more.", "tokens": [50392, 1485, 544, 13, 50400], "temperature": 0.0, "avg_logprob": -0.598616811964247, "compression_ratio": 1.025, "no_speech_prob": 0.007774370722472668}, {"id": 301, "seek": 170816, "start": 1717.6000000000001, "end": 1718.3200000000002, "text": " Thank you very much.", "tokens": [50836, 1044, 291, 588, 709, 13, 50872], "temperature": 0.0, "avg_logprob": -0.598616811964247, "compression_ratio": 1.025, "no_speech_prob": 0.007774370722472668}, {"id": 302, "seek": 170816, "start": 1718.3200000000002, "end": 1724.3200000000002, "text": " Thank you.", "tokens": [50872, 1044, 291, 13, 51172], "temperature": 0.0, "avg_logprob": -0.598616811964247, "compression_ratio": 1.025, "no_speech_prob": 0.007774370722472668}], "language": "en"}