{"text": " Hi, everyone. I'm Alex. You may know me from hits such as Flatpak and my work on GNOME, but recently I've been doing this work on this thing called ComposeFS. And this talk is going to be partly about what it is and how it works, but also how it slots into the container ecosystem. So the tagline I use is an operatively sharing verified image file system. It's a mouthful, but like image file system, you can imagine it's about mounting a file system. That's an image. Like the container image could be, but it could also be a system image for a full system thing or any kind of image you wish to share and then reuse. And sharing is about having multiple of these images and they share resources in some way. So there's a little more efficient of multiple of them than each individual. And very far is that we want to in some way guarantee that we're reading what we're expecting to read. So the easiest way to explain how it works is by example. Suppose we have this image. I mean, it's not much of an image, but it's basically it's files, right? And a structure, a metadata and all that. And you run the MK ComposeFS command and you give it the directory that you want to create from. You give it an example of CFS. That's a file name. And then you pass in a digest store, which is a directory name. And when you run this, you get this. You get the image file and you get the objects directory that has a bunch of weird looking things in it. Those things are just files. And if you go back to the original thing, we had a food attacks, the barl attacks. And those weird looking objects just have the content of those files in them. And the names are like check sums. And then you can, from this again, you can mount it. You're specifying the objects directory and the example file. And then you get back the same results. It doesn't sound all that exciting because you could as well use to use a loopback mount for whatever kind of files you want to. The interesting thing is this particular objects directory. As I said, it has the backing data for these files. And if we were to change one of them to not be what it was supposed to be, and then you mount again, you can and you will see the new change data. So basically, this directory contains all the backing files of the entire file system. So the interesting thing happens, if you have multiple of these images that share the same base directory, because these names are actually check sums. So any two files that happen to have the same content will have the same check sum, will use the same file. So that's what called content addressing. It's common in getting whatever was not. And that's what you would get what I call opportunistic sharing, as opposed to explicit sharing like docker layering, for example. You have to be very careful about managing your dependencies, such that you used exactly the right base image and whatnot, and then you get sharing. But here you get wherever, for whatever reason, if you happen to have two identical files, they will be shared. And they're not only shared on disk, because of the way composite has worked, when you mount this thing, if you mount two things, they use the same file, and something M-apps it or whatever, or just in the cache. They would only store once in the cache. And you can easily see how you could use this to update to a new version of an image and not have to download all the data. Like you can just download the image, list all the objects and see which one you don't have and download those. So it's like an automatic way to do delta downloads, basically. And then to get into these verifying part, we have to look at something called fsverity. fsverity is a feature of the Linux kernel. It's been around for some time now. It's actually both a feature of the VFS itself and the individual file system. So it has to be implemented in each file system, and most of them are. Or actually XFS is not yet supporting it, but it does work on that. But basically you enable this on a file, and that makes the file in mutable in the sense that the VFS will not allow you to do any operation on this that changes its content. You will get basically permission denied when you try to write to it or whatever. But also, if you modify the file directly on the block device or whatever, Cosmic Ray hits your drive and it flips a bit somewhere, when you read it back, there's a checksum, that's like a recursive Merkle 3 checksum across the entire thing. So whenever you read a block from a file that has been modified, you will get an error, an IO error basically. So that's pretty cool, but unfortunately it has some weaknesses. Yes, you cannot change the file, but you can change the metadata. You can rename the file, you can make it set UID or whatever. You can create a new file, you can delete it and replace it with a new one with the same name. Basically it doesn't validate what we want, which is the image. The thing we want to validate is the entire image, the file names, the structures, the metadata, everything. So that's where we go back to the buzz events. And if you actually look at the measure of the FHRT measure of this file, which is the digest basically, like the checksum of thing, it actually has the digest for name. Basically we're using FHRT already on all these objects. And not only that, we also record the expected digest inside the image itself. So whenever the file system opens a backing file, it can verify that it's actually the right thing. And then once you've opened it, each individual read from the file will be verified by the kernel. So if you mount it with Verity on, but you might not want this, you might want to use the sharing without Verity, if for example your file system doesn't support Verity. But if you do have it, what just enable it, and then when you read the file that we changed before, now we get some kind of error because it's not, it doesn't have the very digest we expected it to. So that helps a bit. But what we wanted was to protect the entire file system, right? And you could potentially write in the metadata's image file and change the name of the file by modifying the file. And to avoid that, we enabled the Verity on the entire image itself. And then we passed the digest that we got. I mean, ideally this digest isn't, you're not supposed to just read it from the file when you mount it, but at build time, you record the digest and then via some kind of secure mechanism, a channel, secure signatures, what have you. For some reason, you trust this digest. And if you pass it to the mount command, if the mount command succeed, then every successful IEU operation on this thing will be guaranteed to return the same data that was built. Basically, this is a root of trust. If you have a reason to trust it, you can guarantee the thing. There are some technical details about it. This talk is more about explaining the high level parts. Initially, it was completely a new kernel process. Actually, I did a presentation on the kernel dev room last year at FOSSTEM about this. But during the upstreaming process, it was changed. So now it's using some existing technologies, overlay FS in particular and E-RUFS that were already in the kernel, but they have been extended a bit, so they support this use case too. And overlay FS is normally a way to layer things, but it actually has already a way for a file in an upper level to have a different name in the lower level. Normally, you use that for renaming a file across layers. But we use it instead to redirect to the baseter. And then we introduce this thing called data only lower base structures or layers. So we basically hide the lowest level of use redirects to the files in there. And then we have a new FS, which is an ISO file or a squash FS. It's just a read-only file system that we use to record the entire directory structure of the loader and the overlay FS, including the final names and whatnot and the overlay FS ex-adders that do the redirects to the lower directories. And then we use bind mount, or loopback mount as thing and set up an overlay FS combined thing to use it. We had to add a couple of things, data only lower directories to hide the lower directory. The FS is very devalidational. We had an add a new ex-adder to overlay FS to validate the redirects. And then there's some nested stuff where you have overlays and overlay FS. That's kind of weird, but we had to add that too. But it's all in now. And we have a final version release that has a stable format that you can use and we're supposed to work forever. We also have integration with OS tree. I will not spend too much time on this, but OS tree is our like red hats image-based entire system, like atomic immutable operating system used by things like Fedora Cyliblu. And the current version of OS tree has experimental support for just creating these composifest images. So we create them at build time and sign them. And then if you validate it during boot, like it validates the signature in the in the FS. And if it's valid, you can mount the composifest image and everything is just guaranteed to be whatever is right. And if you're using something like secure boot to make sure you boot the right kernel and you're right in it, RAMFS, then you basically have an entire time approved boot signed by your buyers key, basically. But this talk a little about containers. And composifest has two major targets, as the OS tree use case and OCI images. And the actual work on podman and the back ends is done not by me, but by Giuseppe, who is one of the podman and C-RAM developers. It's based on his work on CS3 shunt, which I'm not going to go into too much details here, but it's basically a new compression format for OCI images that allows adding an index to the file. And the index has the check sum of the files. We can avoid downloading them if you already have them. But also the fact that we have these digest is the perfect way to introduce the the objects directory kind of thing that composifest uses. So if you look at container storage, which is the goal library for storing local images that podman uses, the latest version has basic composifest support. And we used have to wait until they vendor in the latest version into podman and then it should just work out of the box. And if you have this, we'll get some of the advantages of composifest, like higher density. If you have any images in your cluster happen to share files, those files will be stored only once on disk per whatever node you're using. And once in memory. And we can also use the validation to make sure we don't accidentally get modifications. But also in the future, this is not this is something that needs a bit more work. We could have a list of signatures or a list of keys and like limit the amount of limit the types of images run to only those that have a signed composifest digest by these public keys. So how do you use this? There are some options in the storage.conf. You have to enable all of these currently. Actually, the convert images is not strictly necessary. That's for converting images that are in this new CSDD shunt format. So it works with any. If you pull any image, it will convert it to the format and then use composifest for mounting it. So it will work for anything, basically. But if you want maximum performance and not have to do the conversion, it's good to use CSDD shunt in your image repositories. But that's something you want anyway in the future at least because you get to download less as well. If you ever looked inside the container storage, this is how it looks, a traditional one. Actually, I deleted some stuff. But the important thing is this per back end directory called overlay because we're using the overlay back end. And every directory in there is a layer. And every layer has a diff directory that has all the files that are introduced in that layer. And then you use overlay fs to combine all of these. Plus at the end, it adds your empty directory that is the writable directory for your container. But instead, if you look at a composed fs using back end storage, it looks different. It has the same overall layout, but the diff directory contains basically the baster and then there's this extra data, the blob. So what happens is that when you set up the container, we mount all these composed fs directors, each producing a layer, and then we merge them in overlay fs plus your writable storage. So it looks slightly different, but it's basically the same. And to demonstrate how this will affect resource usage, I created 20, like, so this is a synthetic example, but I think it proves the point. I created 20 copies of Fedora image, and I changed one file in each and squashed them. So there are like single layer images that basically have all the same files in them. And then I run sleep in each of them. And sleep is a very small thing, but it will map glibc and it will do like some basic stuff that any app would do. And then I run them all in parallel. And we could look at how this looks in the storage. Every file here is, or every directory, every layer is the Fedora base image. So it's 180 megs, sum up for 20 up to three and a half gig. But if you look at the composed fs version, it's just 200 megs because only the things that are different use more space. And this might look weird that just one of them is larger, but actually what happens is that each individual layer has all the files that they refer to, but they're hard link across the directory. So there's like a tracking of which files are locally available. And instead of you making a copy of them, they're all like hard link of each other. So that's pretty cool. I mean, I can imagine, it depends of course on your workload, but it's not implausible that different images share files because most images are based on rbms or devs, whatever. And if you have the same dev of a GeoOopZee package, then it will have the same file, even if you're using a completely different build of your image. So this is pretty cool. We're working on trying to finalize this, make it work by default in Podman. I think it's going to miss the 4.9 release, so it's probably going to be in the next release. Also, the Podman people themselves are trying to work on making CSV chunks be more of a default thing or at least more widely used because it has advantages not only for Composite Fest, but also for used faster pulling of images. And then we need to look into signing images. I mean, there are ways to sign manifests already. And you can imagine if you add Composite Fest digest into the manifest, and you sign the manifest, if you can validate that the manifest is signed, you can trust the digest, and you can mount the thing and know you have the right thing. But there are outstanding questions like, yeah, but what kind of keys are you using, where do you store them, how do you know which one you trust, you know, there has to be some kind of rule set to specify what you're allowed to, which keys are golden or whatever, or are we using the kernel hearing or the secure boot keys, like, throughout sending questions. But the technical side is not really that complex. If you can validate using some kind of mechanism that the digest or the manifest is okay, then we can just mount this thing and be able to trust it. And I guess... Hi, thank you for your talk. I am one of the... One of the things that the design of your choice in PuzzleFS is different than Composite Fest is that the files are split along file boundaries, instead of along sharing boundaries. It makes easier to get cool graphs with USS, but harder to then share if you change small important portions of a file. I'm curious if you have any... Like, is that part of your future work? I've thought about it. And I'm not... I don't know, do I work on that? Because it would be... It would require so much work on the kernel side that just, like, fundamentally change how page should track. That's not gonna happen. I mean, it's a choice you have to make if you want to focus on disk space use or in memory use. I think this is sort of like a Goldilocks zone, but yes, it depends on your use case. Yeah, also PuzzleFS was written in Russian, so it was his practical forever reason. I didn't get the question. Yeah, it doesn't really like... CSD Nishant is a way to extend the header of a layer torbol with information about what goes in it. And it's not strictly needed for Composite Fest. Like, you can untar the torbol and compute the checksum of every file if you want to. But if it's there, you can avoid that and it's just better performance. So it's not necessary. Another question about the compression... The compression of the CSD, I think, is the only choice. I think it belongs to the CSD compression of the torbol. But the G-Face is one issue more than the normal G-Face. So, and then, like, in next image format, like, the CSD Nishant. Yeah, well, G-Face is the standard, right? Yeah, there's this E-Star GC thing that you could use for that. Like, I haven't spent any time trying to make that work. I mean, it will work. It just introduces a conversion layer, a computation of these things. But I mean, I think it could be done. I think it could be done. And if you have that kind of format, but you still, you can't... you would still have to create an index for your GSD files as well. And, like, I don't know if E-Star GC is better supported than CSD Nishant. It's unfortunate, like, the apartment people did the CSD D thing a long time ago, but it took a long time until Docker merged it. But then the latest version, like, a year or so, they merged the pull request to add it. So, it is actually supported by Docker now. So, the hope is that eventually we will get wider acceptance. But it isn't perfect right now. Hello. So, why would you run 20 sleep commands? So, why would you run 20 sleep commands? Was that a question? Or... Yes. Yeah. I mean, obviously, you wouldn't. You would run, on your node, a hundred different containers. But any containers that happens to ship the Fedora 232-2 glibc-rpm would have the same binary for glibc. And then that would be passed to the same file. So, everything that maps glibc would use the same file. I mean, this demo is just a demo to expose the sharing. It would be less extreme in the real case, but it would still happen. Thank you. So, I think it might be a long use case, but this object storage, there is a way to continue after leaving the closest client? It's not currently, but we have some issues around about adding tooling around that, like an FSEKA for it and a garbage collect for it and things like that. That's things. All the code is there to read back from an image file and extract a list of objects in it. So, it should be... Currently, it's possible by doing some scripting to do it, but yeah, we would like to add some tooling that automates that. We have five more minutes, so there's a question. Yeah, I mean, it works fine. It's into the word now and you can install it. Whoa. No, I mean, it requires, for all of the features, it requires the latest kernel, but if you have six, five or later, then it just works on any system. It's just a user space tool. It doesn't need any special anything. Okay. It just works. Thank you. Thank you. All right.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.8, "text": " Hi, everyone. I'm Alex. You may know me from hits such as Flatpak and my work on GNOME,", "tokens": [50364, 2421, 11, 1518, 13, 286, 478, 5202, 13, 509, 815, 458, 385, 490, 8664, 1270, 382, 36172, 45944, 293, 452, 589, 322, 46411, 23344, 11, 50954], "temperature": 0.0, "avg_logprob": -0.32265520095825195, "compression_ratio": 1.4935622317596566, "no_speech_prob": 0.3505682051181793}, {"id": 1, "seek": 0, "start": 11.8, "end": 17.6, "text": " but recently I've been doing this work on this thing called ComposeFS. And this talk", "tokens": [50954, 457, 3938, 286, 600, 668, 884, 341, 589, 322, 341, 551, 1219, 6620, 541, 29318, 13, 400, 341, 751, 51244], "temperature": 0.0, "avg_logprob": -0.32265520095825195, "compression_ratio": 1.4935622317596566, "no_speech_prob": 0.3505682051181793}, {"id": 2, "seek": 0, "start": 17.6, "end": 22.16, "text": " is going to be partly about what it is and how it works, but also how it slots into the", "tokens": [51244, 307, 516, 281, 312, 17031, 466, 437, 309, 307, 293, 577, 309, 1985, 11, 457, 611, 577, 309, 24266, 666, 264, 51472], "temperature": 0.0, "avg_logprob": -0.32265520095825195, "compression_ratio": 1.4935622317596566, "no_speech_prob": 0.3505682051181793}, {"id": 3, "seek": 0, "start": 22.16, "end": 28.92, "text": " container ecosystem. So the tagline I use is an operatively sharing verified image file", "tokens": [51472, 10129, 11311, 13, 407, 264, 6162, 1889, 286, 764, 307, 364, 2208, 19020, 5414, 31197, 3256, 3991, 51810], "temperature": 0.0, "avg_logprob": -0.32265520095825195, "compression_ratio": 1.4935622317596566, "no_speech_prob": 0.3505682051181793}, {"id": 4, "seek": 2892, "start": 28.96, "end": 34.0, "text": " system. It's a mouthful, but like image file system, you can imagine it's about mounting", "tokens": [50366, 1185, 13, 467, 311, 257, 4525, 906, 11, 457, 411, 3256, 3991, 1185, 11, 291, 393, 3811, 309, 311, 466, 22986, 50618], "temperature": 0.0, "avg_logprob": -0.18899832638827238, "compression_ratio": 1.796812749003984, "no_speech_prob": 0.012011177837848663}, {"id": 5, "seek": 2892, "start": 34.0, "end": 38.96, "text": " a file system. That's an image. Like the container image could be, but it could also be a system", "tokens": [50618, 257, 3991, 1185, 13, 663, 311, 364, 3256, 13, 1743, 264, 10129, 3256, 727, 312, 11, 457, 309, 727, 611, 312, 257, 1185, 50866], "temperature": 0.0, "avg_logprob": -0.18899832638827238, "compression_ratio": 1.796812749003984, "no_speech_prob": 0.012011177837848663}, {"id": 6, "seek": 2892, "start": 38.96, "end": 45.24, "text": " image for a full system thing or any kind of image you wish to share and then reuse.", "tokens": [50866, 3256, 337, 257, 1577, 1185, 551, 420, 604, 733, 295, 3256, 291, 3172, 281, 2073, 293, 550, 26225, 13, 51180], "temperature": 0.0, "avg_logprob": -0.18899832638827238, "compression_ratio": 1.796812749003984, "no_speech_prob": 0.012011177837848663}, {"id": 7, "seek": 2892, "start": 45.24, "end": 52.36, "text": " And sharing is about having multiple of these images and they share resources in some way.", "tokens": [51180, 400, 5414, 307, 466, 1419, 3866, 295, 613, 5267, 293, 436, 2073, 3593, 294, 512, 636, 13, 51536], "temperature": 0.0, "avg_logprob": -0.18899832638827238, "compression_ratio": 1.796812749003984, "no_speech_prob": 0.012011177837848663}, {"id": 8, "seek": 2892, "start": 52.36, "end": 57.2, "text": " So there's a little more efficient of multiple of them than each individual. And very far", "tokens": [51536, 407, 456, 311, 257, 707, 544, 7148, 295, 3866, 295, 552, 813, 1184, 2609, 13, 400, 588, 1400, 51778], "temperature": 0.0, "avg_logprob": -0.18899832638827238, "compression_ratio": 1.796812749003984, "no_speech_prob": 0.012011177837848663}, {"id": 9, "seek": 5720, "start": 57.2, "end": 61.440000000000005, "text": " is that we want to in some way guarantee that we're reading what we're expecting to read.", "tokens": [50364, 307, 300, 321, 528, 281, 294, 512, 636, 10815, 300, 321, 434, 3760, 437, 321, 434, 9650, 281, 1401, 13, 50576], "temperature": 0.0, "avg_logprob": -0.20248226165771485, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.010155292227864265}, {"id": 10, "seek": 5720, "start": 61.440000000000005, "end": 69.88, "text": " So the easiest way to explain how it works is by example. Suppose we have this image. I mean,", "tokens": [50576, 407, 264, 12889, 636, 281, 2903, 577, 309, 1985, 307, 538, 1365, 13, 21360, 321, 362, 341, 3256, 13, 286, 914, 11, 50998], "temperature": 0.0, "avg_logprob": -0.20248226165771485, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.010155292227864265}, {"id": 11, "seek": 5720, "start": 69.88, "end": 75.92, "text": " it's not much of an image, but it's basically it's files, right? And a structure, a metadata and", "tokens": [50998, 309, 311, 406, 709, 295, 364, 3256, 11, 457, 309, 311, 1936, 309, 311, 7098, 11, 558, 30, 400, 257, 3877, 11, 257, 26603, 293, 51300], "temperature": 0.0, "avg_logprob": -0.20248226165771485, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.010155292227864265}, {"id": 12, "seek": 5720, "start": 75.92, "end": 82.56, "text": " all that. And you run the MK ComposeFS command and you give it the directory that you want to create", "tokens": [51300, 439, 300, 13, 400, 291, 1190, 264, 30770, 6620, 541, 29318, 5622, 293, 291, 976, 309, 264, 21120, 300, 291, 528, 281, 1884, 51632], "temperature": 0.0, "avg_logprob": -0.20248226165771485, "compression_ratio": 1.6212765957446809, "no_speech_prob": 0.010155292227864265}, {"id": 13, "seek": 8256, "start": 82.60000000000001, "end": 88.36, "text": " from. You give it an example of CFS. That's a file name. And then you pass in a digest store,", "tokens": [50366, 490, 13, 509, 976, 309, 364, 1365, 295, 21792, 50, 13, 663, 311, 257, 3991, 1315, 13, 400, 550, 291, 1320, 294, 257, 13884, 3531, 11, 50654], "temperature": 0.0, "avg_logprob": -0.23881449557767057, "compression_ratio": 1.7, "no_speech_prob": 0.010321039706468582}, {"id": 14, "seek": 8256, "start": 88.36, "end": 96.76, "text": " which is a directory name. And when you run this, you get this. You get the image file and you", "tokens": [50654, 597, 307, 257, 21120, 1315, 13, 400, 562, 291, 1190, 341, 11, 291, 483, 341, 13, 509, 483, 264, 3256, 3991, 293, 291, 51074], "temperature": 0.0, "avg_logprob": -0.23881449557767057, "compression_ratio": 1.7, "no_speech_prob": 0.010321039706468582}, {"id": 15, "seek": 8256, "start": 96.76, "end": 102.24000000000001, "text": " get the objects directory that has a bunch of weird looking things in it. Those things are", "tokens": [51074, 483, 264, 6565, 21120, 300, 575, 257, 3840, 295, 3657, 1237, 721, 294, 309, 13, 3950, 721, 366, 51348], "temperature": 0.0, "avg_logprob": -0.23881449557767057, "compression_ratio": 1.7, "no_speech_prob": 0.010321039706468582}, {"id": 16, "seek": 8256, "start": 102.24000000000001, "end": 108.04, "text": " just files. And if you go back to the original thing, we had a food attacks, the barl attacks.", "tokens": [51348, 445, 7098, 13, 400, 498, 291, 352, 646, 281, 264, 3380, 551, 11, 321, 632, 257, 1755, 8122, 11, 264, 2159, 75, 8122, 13, 51638], "temperature": 0.0, "avg_logprob": -0.23881449557767057, "compression_ratio": 1.7, "no_speech_prob": 0.010321039706468582}, {"id": 17, "seek": 10804, "start": 109.0, "end": 116.64, "text": " And those weird looking objects just have the content of those files in them. And the names are", "tokens": [50412, 400, 729, 3657, 1237, 6565, 445, 362, 264, 2701, 295, 729, 7098, 294, 552, 13, 400, 264, 5288, 366, 50794], "temperature": 0.0, "avg_logprob": -0.222134764476489, "compression_ratio": 1.668103448275862, "no_speech_prob": 0.003481309860944748}, {"id": 18, "seek": 10804, "start": 116.64, "end": 123.4, "text": " like check sums. And then you can, from this again, you can mount it. You're specifying the objects", "tokens": [50794, 411, 1520, 34499, 13, 400, 550, 291, 393, 11, 490, 341, 797, 11, 291, 393, 3746, 309, 13, 509, 434, 1608, 5489, 264, 6565, 51132], "temperature": 0.0, "avg_logprob": -0.222134764476489, "compression_ratio": 1.668103448275862, "no_speech_prob": 0.003481309860944748}, {"id": 19, "seek": 10804, "start": 123.4, "end": 129.92000000000002, "text": " directory and the example file. And then you get back the same results. It doesn't sound all that", "tokens": [51132, 21120, 293, 264, 1365, 3991, 13, 400, 550, 291, 483, 646, 264, 912, 3542, 13, 467, 1177, 380, 1626, 439, 300, 51458], "temperature": 0.0, "avg_logprob": -0.222134764476489, "compression_ratio": 1.668103448275862, "no_speech_prob": 0.003481309860944748}, {"id": 20, "seek": 10804, "start": 129.92000000000002, "end": 134.08, "text": " exciting because you could as well use to use a loopback mount for whatever kind of files you", "tokens": [51458, 4670, 570, 291, 727, 382, 731, 764, 281, 764, 257, 6367, 3207, 3746, 337, 2035, 733, 295, 7098, 291, 51666], "temperature": 0.0, "avg_logprob": -0.222134764476489, "compression_ratio": 1.668103448275862, "no_speech_prob": 0.003481309860944748}, {"id": 21, "seek": 13408, "start": 134.16000000000003, "end": 142.16000000000003, "text": " want to. The interesting thing is this particular objects directory. As I said, it has the backing", "tokens": [50368, 528, 281, 13, 440, 1880, 551, 307, 341, 1729, 6565, 21120, 13, 1018, 286, 848, 11, 309, 575, 264, 19373, 50768], "temperature": 0.0, "avg_logprob": -0.18018411335192228, "compression_ratio": 1.724890829694323, "no_speech_prob": 0.0022508944384753704}, {"id": 22, "seek": 13408, "start": 142.16000000000003, "end": 148.20000000000002, "text": " data for these files. And if we were to change one of them to not be what it was supposed to be,", "tokens": [50768, 1412, 337, 613, 7098, 13, 400, 498, 321, 645, 281, 1319, 472, 295, 552, 281, 406, 312, 437, 309, 390, 3442, 281, 312, 11, 51070], "temperature": 0.0, "avg_logprob": -0.18018411335192228, "compression_ratio": 1.724890829694323, "no_speech_prob": 0.0022508944384753704}, {"id": 23, "seek": 13408, "start": 148.20000000000002, "end": 154.48000000000002, "text": " and then you mount again, you can and you will see the new change data. So basically, this directory", "tokens": [51070, 293, 550, 291, 3746, 797, 11, 291, 393, 293, 291, 486, 536, 264, 777, 1319, 1412, 13, 407, 1936, 11, 341, 21120, 51384], "temperature": 0.0, "avg_logprob": -0.18018411335192228, "compression_ratio": 1.724890829694323, "no_speech_prob": 0.0022508944384753704}, {"id": 24, "seek": 13408, "start": 154.48000000000002, "end": 162.8, "text": " contains all the backing files of the entire file system. So the interesting thing happens, if you", "tokens": [51384, 8306, 439, 264, 19373, 7098, 295, 264, 2302, 3991, 1185, 13, 407, 264, 1880, 551, 2314, 11, 498, 291, 51800], "temperature": 0.0, "avg_logprob": -0.18018411335192228, "compression_ratio": 1.724890829694323, "no_speech_prob": 0.0022508944384753704}, {"id": 25, "seek": 16280, "start": 162.84, "end": 170.76000000000002, "text": " have multiple of these images that share the same base directory, because these names are actually", "tokens": [50366, 362, 3866, 295, 613, 5267, 300, 2073, 264, 912, 3096, 21120, 11, 570, 613, 5288, 366, 767, 50762], "temperature": 0.0, "avg_logprob": -0.21660256385803223, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.001263606478460133}, {"id": 26, "seek": 16280, "start": 170.76000000000002, "end": 175.56, "text": " check sums. So any two files that happen to have the same content will have the same check sum,", "tokens": [50762, 1520, 34499, 13, 407, 604, 732, 7098, 300, 1051, 281, 362, 264, 912, 2701, 486, 362, 264, 912, 1520, 2408, 11, 51002], "temperature": 0.0, "avg_logprob": -0.21660256385803223, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.001263606478460133}, {"id": 27, "seek": 16280, "start": 175.56, "end": 182.24, "text": " will use the same file. So that's what called content addressing. It's common in getting", "tokens": [51002, 486, 764, 264, 912, 3991, 13, 407, 300, 311, 437, 1219, 2701, 14329, 13, 467, 311, 2689, 294, 1242, 51336], "temperature": 0.0, "avg_logprob": -0.21660256385803223, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.001263606478460133}, {"id": 28, "seek": 16280, "start": 182.24, "end": 188.72000000000003, "text": " whatever was not. And that's what you would get what I call opportunistic sharing, as opposed to", "tokens": [51336, 2035, 390, 406, 13, 400, 300, 311, 437, 291, 576, 483, 437, 286, 818, 2070, 3142, 5414, 11, 382, 8851, 281, 51660], "temperature": 0.0, "avg_logprob": -0.21660256385803223, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.001263606478460133}, {"id": 29, "seek": 18872, "start": 188.76, "end": 195.04, "text": " explicit sharing like docker layering, for example. You have to be very careful about managing your", "tokens": [50366, 13691, 5414, 411, 360, 9178, 40754, 11, 337, 1365, 13, 509, 362, 281, 312, 588, 5026, 466, 11642, 428, 50680], "temperature": 0.0, "avg_logprob": -0.24537636552538192, "compression_ratio": 1.7328519855595668, "no_speech_prob": 0.011863932944834232}, {"id": 30, "seek": 18872, "start": 195.04, "end": 199.04, "text": " dependencies, such that you used exactly the right base image and whatnot, and then you get", "tokens": [50680, 36606, 11, 1270, 300, 291, 1143, 2293, 264, 558, 3096, 3256, 293, 25882, 11, 293, 550, 291, 483, 50880], "temperature": 0.0, "avg_logprob": -0.24537636552538192, "compression_ratio": 1.7328519855595668, "no_speech_prob": 0.011863932944834232}, {"id": 31, "seek": 18872, "start": 199.04, "end": 207.04, "text": " sharing. But here you get wherever, for whatever reason, if you happen to have two identical files,", "tokens": [50880, 5414, 13, 583, 510, 291, 483, 8660, 11, 337, 2035, 1778, 11, 498, 291, 1051, 281, 362, 732, 14800, 7098, 11, 51280], "temperature": 0.0, "avg_logprob": -0.24537636552538192, "compression_ratio": 1.7328519855595668, "no_speech_prob": 0.011863932944834232}, {"id": 32, "seek": 18872, "start": 207.04, "end": 213.8, "text": " they will be shared. And they're not only shared on disk, because of the way composite has worked,", "tokens": [51280, 436, 486, 312, 5507, 13, 400, 436, 434, 406, 787, 5507, 322, 12355, 11, 570, 295, 264, 636, 25557, 575, 2732, 11, 51618], "temperature": 0.0, "avg_logprob": -0.24537636552538192, "compression_ratio": 1.7328519855595668, "no_speech_prob": 0.011863932944834232}, {"id": 33, "seek": 18872, "start": 213.8, "end": 217.8, "text": " when you mount this thing, if you mount two things, they use the same file, and something", "tokens": [51618, 562, 291, 3746, 341, 551, 11, 498, 291, 3746, 732, 721, 11, 436, 764, 264, 912, 3991, 11, 293, 746, 51818], "temperature": 0.0, "avg_logprob": -0.24537636552538192, "compression_ratio": 1.7328519855595668, "no_speech_prob": 0.011863932944834232}, {"id": 34, "seek": 21780, "start": 217.88000000000002, "end": 225.76000000000002, "text": " M-apps it or whatever, or just in the cache. They would only store once in the cache. And you can", "tokens": [50368, 376, 12, 1746, 82, 309, 420, 2035, 11, 420, 445, 294, 264, 19459, 13, 814, 576, 787, 3531, 1564, 294, 264, 19459, 13, 400, 291, 393, 50762], "temperature": 0.0, "avg_logprob": -0.23200801774567248, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.0012061502784490585}, {"id": 35, "seek": 21780, "start": 225.76000000000002, "end": 232.60000000000002, "text": " easily see how you could use this to update to a new version of an image and not have to download", "tokens": [50762, 3612, 536, 577, 291, 727, 764, 341, 281, 5623, 281, 257, 777, 3037, 295, 364, 3256, 293, 406, 362, 281, 5484, 51104], "temperature": 0.0, "avg_logprob": -0.23200801774567248, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.0012061502784490585}, {"id": 36, "seek": 21780, "start": 232.60000000000002, "end": 237.24, "text": " all the data. Like you can just download the image, list all the objects and see which one you don't", "tokens": [51104, 439, 264, 1412, 13, 1743, 291, 393, 445, 5484, 264, 3256, 11, 1329, 439, 264, 6565, 293, 536, 597, 472, 291, 500, 380, 51336], "temperature": 0.0, "avg_logprob": -0.23200801774567248, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.0012061502784490585}, {"id": 37, "seek": 21780, "start": 237.24, "end": 246.16000000000003, "text": " have and download those. So it's like an automatic way to do delta downloads, basically. And then to", "tokens": [51336, 362, 293, 5484, 729, 13, 407, 309, 311, 411, 364, 12509, 636, 281, 360, 8289, 36553, 11, 1936, 13, 400, 550, 281, 51782], "temperature": 0.0, "avg_logprob": -0.23200801774567248, "compression_ratio": 1.7412280701754386, "no_speech_prob": 0.0012061502784490585}, {"id": 38, "seek": 24616, "start": 246.2, "end": 253.2, "text": " get into these verifying part, we have to look at something called fsverity. fsverity is a feature", "tokens": [50366, 483, 666, 613, 1306, 5489, 644, 11, 321, 362, 281, 574, 412, 746, 1219, 283, 82, 331, 507, 13, 283, 82, 331, 507, 307, 257, 4111, 50716], "temperature": 0.0, "avg_logprob": -0.21400867975675142, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.017159968614578247}, {"id": 39, "seek": 24616, "start": 253.2, "end": 260.0, "text": " of the Linux kernel. It's been around for some time now. It's actually both a feature of the VFS", "tokens": [50716, 295, 264, 18734, 28256, 13, 467, 311, 668, 926, 337, 512, 565, 586, 13, 467, 311, 767, 1293, 257, 4111, 295, 264, 691, 29318, 51056], "temperature": 0.0, "avg_logprob": -0.21400867975675142, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.017159968614578247}, {"id": 40, "seek": 24616, "start": 260.0, "end": 266.4, "text": " itself and the individual file system. So it has to be implemented in each file system, and most of", "tokens": [51056, 2564, 293, 264, 2609, 3991, 1185, 13, 407, 309, 575, 281, 312, 12270, 294, 1184, 3991, 1185, 11, 293, 881, 295, 51376], "temperature": 0.0, "avg_logprob": -0.21400867975675142, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.017159968614578247}, {"id": 41, "seek": 24616, "start": 266.4, "end": 273.8, "text": " them are. Or actually XFS is not yet supporting it, but it does work on that. But basically you", "tokens": [51376, 552, 366, 13, 1610, 767, 1783, 29318, 307, 406, 1939, 7231, 309, 11, 457, 309, 775, 589, 322, 300, 13, 583, 1936, 291, 51746], "temperature": 0.0, "avg_logprob": -0.21400867975675142, "compression_ratio": 1.6090534979423867, "no_speech_prob": 0.017159968614578247}, {"id": 42, "seek": 27380, "start": 273.84000000000003, "end": 279.92, "text": " enable this on a file, and that makes the file in mutable in the sense that the VFS will not allow", "tokens": [50366, 9528, 341, 322, 257, 3991, 11, 293, 300, 1669, 264, 3991, 294, 5839, 712, 294, 264, 2020, 300, 264, 691, 29318, 486, 406, 2089, 50670], "temperature": 0.0, "avg_logprob": -0.19986233446333143, "compression_ratio": 1.5502645502645502, "no_speech_prob": 0.0038230461068451405}, {"id": 43, "seek": 27380, "start": 279.92, "end": 287.72, "text": " you to do any operation on this that changes its content. You will get basically permission denied", "tokens": [50670, 291, 281, 360, 604, 6916, 322, 341, 300, 2962, 1080, 2701, 13, 509, 486, 483, 1936, 11226, 17774, 51060], "temperature": 0.0, "avg_logprob": -0.19986233446333143, "compression_ratio": 1.5502645502645502, "no_speech_prob": 0.0038230461068451405}, {"id": 44, "seek": 27380, "start": 287.72, "end": 296.88, "text": " when you try to write to it or whatever. But also, if you modify the file directly on the block", "tokens": [51060, 562, 291, 853, 281, 2464, 281, 309, 420, 2035, 13, 583, 611, 11, 498, 291, 16927, 264, 3991, 3838, 322, 264, 3461, 51518], "temperature": 0.0, "avg_logprob": -0.19986233446333143, "compression_ratio": 1.5502645502645502, "no_speech_prob": 0.0038230461068451405}, {"id": 45, "seek": 29688, "start": 296.92, "end": 303.84, "text": " device or whatever, Cosmic Ray hits your drive and it flips a bit somewhere, when you read it back,", "tokens": [50366, 4302, 420, 2035, 11, 15855, 13195, 10883, 8664, 428, 3332, 293, 309, 40249, 257, 857, 4079, 11, 562, 291, 1401, 309, 646, 11, 50712], "temperature": 0.0, "avg_logprob": -0.2522001619692202, "compression_ratio": 1.527363184079602, "no_speech_prob": 0.03900963440537453}, {"id": 46, "seek": 29688, "start": 303.84, "end": 310.6, "text": " there's a checksum, that's like a recursive Merkle 3 checksum across the entire thing. So whenever you", "tokens": [50712, 456, 311, 257, 13834, 449, 11, 300, 311, 411, 257, 20560, 488, 6124, 14677, 805, 13834, 449, 2108, 264, 2302, 551, 13, 407, 5699, 291, 51050], "temperature": 0.0, "avg_logprob": -0.2522001619692202, "compression_ratio": 1.527363184079602, "no_speech_prob": 0.03900963440537453}, {"id": 47, "seek": 29688, "start": 310.6, "end": 319.36, "text": " read a block from a file that has been modified, you will get an error, an IO error basically. So that's", "tokens": [51050, 1401, 257, 3461, 490, 257, 3991, 300, 575, 668, 15873, 11, 291, 486, 483, 364, 6713, 11, 364, 39839, 6713, 1936, 13, 407, 300, 311, 51488], "temperature": 0.0, "avg_logprob": -0.2522001619692202, "compression_ratio": 1.527363184079602, "no_speech_prob": 0.03900963440537453}, {"id": 48, "seek": 31936, "start": 319.40000000000003, "end": 327.8, "text": " pretty cool, but unfortunately it has some weaknesses. Yes, you cannot change the file, but you can", "tokens": [50366, 1238, 1627, 11, 457, 7015, 309, 575, 512, 24381, 13, 1079, 11, 291, 2644, 1319, 264, 3991, 11, 457, 291, 393, 50786], "temperature": 0.0, "avg_logprob": -0.16303714752197265, "compression_ratio": 1.8082191780821917, "no_speech_prob": 0.23062288761138916}, {"id": 49, "seek": 31936, "start": 327.8, "end": 333.88, "text": " change the metadata. You can rename the file, you can make it set UID or whatever. You can create a", "tokens": [50786, 1319, 264, 26603, 13, 509, 393, 36741, 264, 3991, 11, 291, 393, 652, 309, 992, 624, 2777, 420, 2035, 13, 509, 393, 1884, 257, 51090], "temperature": 0.0, "avg_logprob": -0.16303714752197265, "compression_ratio": 1.8082191780821917, "no_speech_prob": 0.23062288761138916}, {"id": 50, "seek": 31936, "start": 333.88, "end": 338.32, "text": " new file, you can delete it and replace it with a new one with the same name. Basically it doesn't", "tokens": [51090, 777, 3991, 11, 291, 393, 12097, 309, 293, 7406, 309, 365, 257, 777, 472, 365, 264, 912, 1315, 13, 8537, 309, 1177, 380, 51312], "temperature": 0.0, "avg_logprob": -0.16303714752197265, "compression_ratio": 1.8082191780821917, "no_speech_prob": 0.23062288761138916}, {"id": 51, "seek": 31936, "start": 338.32, "end": 345.28000000000003, "text": " validate what we want, which is the image. The thing we want to validate is the entire image, the", "tokens": [51312, 29562, 437, 321, 528, 11, 597, 307, 264, 3256, 13, 440, 551, 321, 528, 281, 29562, 307, 264, 2302, 3256, 11, 264, 51660], "temperature": 0.0, "avg_logprob": -0.16303714752197265, "compression_ratio": 1.8082191780821917, "no_speech_prob": 0.23062288761138916}, {"id": 52, "seek": 34528, "start": 345.32, "end": 353.15999999999997, "text": " file names, the structures, the metadata, everything. So that's where we go back to the buzz events. And if", "tokens": [50366, 3991, 5288, 11, 264, 9227, 11, 264, 26603, 11, 1203, 13, 407, 300, 311, 689, 321, 352, 646, 281, 264, 13036, 3931, 13, 400, 498, 50758], "temperature": 0.0, "avg_logprob": -0.292333716213113, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00668196938931942}, {"id": 53, "seek": 34528, "start": 353.15999999999997, "end": 360.15999999999997, "text": " you actually look at the measure of the FHRT measure of this file, which is the digest basically,", "tokens": [50758, 291, 767, 574, 412, 264, 3481, 295, 264, 479, 39, 49, 51, 3481, 295, 341, 3991, 11, 597, 307, 264, 13884, 1936, 11, 51108], "temperature": 0.0, "avg_logprob": -0.292333716213113, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00668196938931942}, {"id": 54, "seek": 34528, "start": 360.15999999999997, "end": 366.11999999999995, "text": " like the checksum of thing, it actually has the digest for name. Basically we're using FHRT already", "tokens": [51108, 411, 264, 13834, 449, 295, 551, 11, 309, 767, 575, 264, 13884, 337, 1315, 13, 8537, 321, 434, 1228, 479, 39, 49, 51, 1217, 51406], "temperature": 0.0, "avg_logprob": -0.292333716213113, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00668196938931942}, {"id": 55, "seek": 34528, "start": 366.11999999999995, "end": 374.23999999999995, "text": " on all these objects. And not only that, we also record the expected digest inside the image", "tokens": [51406, 322, 439, 613, 6565, 13, 400, 406, 787, 300, 11, 321, 611, 2136, 264, 5176, 13884, 1854, 264, 3256, 51812], "temperature": 0.0, "avg_logprob": -0.292333716213113, "compression_ratio": 1.6864406779661016, "no_speech_prob": 0.00668196938931942}, {"id": 56, "seek": 37424, "start": 374.28000000000003, "end": 381.12, "text": " itself. So whenever the file system opens a backing file, it can verify that it's actually the right", "tokens": [50366, 2564, 13, 407, 5699, 264, 3991, 1185, 9870, 257, 19373, 3991, 11, 309, 393, 16888, 300, 309, 311, 767, 264, 558, 50708], "temperature": 0.0, "avg_logprob": -0.19639727148679223, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.0049769077450037}, {"id": 57, "seek": 37424, "start": 381.12, "end": 387.36, "text": " thing. And then once you've opened it, each individual read from the file will be verified by the", "tokens": [50708, 551, 13, 400, 550, 1564, 291, 600, 5625, 309, 11, 1184, 2609, 1401, 490, 264, 3991, 486, 312, 31197, 538, 264, 51020], "temperature": 0.0, "avg_logprob": -0.19639727148679223, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.0049769077450037}, {"id": 58, "seek": 37424, "start": 387.36, "end": 394.76, "text": " kernel. So if you mount it with Verity on, but you might not want this, you might want to use the", "tokens": [51020, 28256, 13, 407, 498, 291, 3746, 309, 365, 4281, 507, 322, 11, 457, 291, 1062, 406, 528, 341, 11, 291, 1062, 528, 281, 764, 264, 51390], "temperature": 0.0, "avg_logprob": -0.19639727148679223, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.0049769077450037}, {"id": 59, "seek": 37424, "start": 394.76, "end": 400.6, "text": " sharing without Verity, if for example your file system doesn't support Verity. But if you do have it,", "tokens": [51390, 5414, 1553, 4281, 507, 11, 498, 337, 1365, 428, 3991, 1185, 1177, 380, 1406, 4281, 507, 13, 583, 498, 291, 360, 362, 309, 11, 51682], "temperature": 0.0, "avg_logprob": -0.19639727148679223, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.0049769077450037}, {"id": 60, "seek": 40060, "start": 400.72, "end": 406.16, "text": " what just enable it, and then when you read the file that we changed before, now we get some kind of", "tokens": [50370, 437, 445, 9528, 309, 11, 293, 550, 562, 291, 1401, 264, 3991, 300, 321, 3105, 949, 11, 586, 321, 483, 512, 733, 295, 50642], "temperature": 0.0, "avg_logprob": -0.2208755111694336, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.005815811455249786}, {"id": 61, "seek": 40060, "start": 406.16, "end": 417.68, "text": " error because it's not, it doesn't have the very digest we expected it to. So that helps a bit. But", "tokens": [50642, 6713, 570, 309, 311, 406, 11, 309, 1177, 380, 362, 264, 588, 13884, 321, 5176, 309, 281, 13, 407, 300, 3665, 257, 857, 13, 583, 51218], "temperature": 0.0, "avg_logprob": -0.2208755111694336, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.005815811455249786}, {"id": 62, "seek": 40060, "start": 417.68, "end": 422.24, "text": " what we wanted was to protect the entire file system, right? And you could potentially write in the", "tokens": [51218, 437, 321, 1415, 390, 281, 2371, 264, 2302, 3991, 1185, 11, 558, 30, 400, 291, 727, 7263, 2464, 294, 264, 51446], "temperature": 0.0, "avg_logprob": -0.2208755111694336, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.005815811455249786}, {"id": 63, "seek": 40060, "start": 422.24, "end": 427.12, "text": " metadata's image file and change the name of the file by modifying the file. And to avoid that, we", "tokens": [51446, 26603, 311, 3256, 3991, 293, 1319, 264, 1315, 295, 264, 3991, 538, 42626, 264, 3991, 13, 400, 281, 5042, 300, 11, 321, 51690], "temperature": 0.0, "avg_logprob": -0.2208755111694336, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.005815811455249786}, {"id": 64, "seek": 42712, "start": 427.16, "end": 434.72, "text": " enabled the Verity on the entire image itself. And then we passed the digest that we got. I mean,", "tokens": [50366, 15172, 264, 4281, 507, 322, 264, 2302, 3256, 2564, 13, 400, 550, 321, 4678, 264, 13884, 300, 321, 658, 13, 286, 914, 11, 50744], "temperature": 0.0, "avg_logprob": -0.19928970336914062, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.010480660013854504}, {"id": 65, "seek": 42712, "start": 434.72, "end": 440.12, "text": " ideally this digest isn't, you're not supposed to just read it from the file when you mount it, but at", "tokens": [50744, 22915, 341, 13884, 1943, 380, 11, 291, 434, 406, 3442, 281, 445, 1401, 309, 490, 264, 3991, 562, 291, 3746, 309, 11, 457, 412, 51014], "temperature": 0.0, "avg_logprob": -0.19928970336914062, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.010480660013854504}, {"id": 66, "seek": 42712, "start": 440.12, "end": 447.68, "text": " build time, you record the digest and then via some kind of secure mechanism, a channel, secure", "tokens": [51014, 1322, 565, 11, 291, 2136, 264, 13884, 293, 550, 5766, 512, 733, 295, 7144, 7513, 11, 257, 2269, 11, 7144, 51392], "temperature": 0.0, "avg_logprob": -0.19928970336914062, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.010480660013854504}, {"id": 67, "seek": 42712, "start": 447.68, "end": 454.24, "text": " signatures, what have you. For some reason, you trust this digest. And if you pass it to the mount", "tokens": [51392, 32322, 11, 437, 362, 291, 13, 1171, 512, 1778, 11, 291, 3361, 341, 13884, 13, 400, 498, 291, 1320, 309, 281, 264, 3746, 51720], "temperature": 0.0, "avg_logprob": -0.19928970336914062, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.010480660013854504}, {"id": 68, "seek": 45424, "start": 454.28000000000003, "end": 461.0, "text": " command, if the mount command succeed, then every successful IEU operation on this thing will be", "tokens": [50366, 5622, 11, 498, 264, 3746, 5622, 7754, 11, 550, 633, 4406, 286, 36, 52, 6916, 322, 341, 551, 486, 312, 50702], "temperature": 0.0, "avg_logprob": -0.1933738950272681, "compression_ratio": 1.5638297872340425, "no_speech_prob": 0.0012058457359671593}, {"id": 69, "seek": 45424, "start": 461.0, "end": 471.36, "text": " guaranteed to return the same data that was built. Basically, this is a root of trust. If you have a", "tokens": [50702, 18031, 281, 2736, 264, 912, 1412, 300, 390, 3094, 13, 8537, 11, 341, 307, 257, 5593, 295, 3361, 13, 759, 291, 362, 257, 51220], "temperature": 0.0, "avg_logprob": -0.1933738950272681, "compression_ratio": 1.5638297872340425, "no_speech_prob": 0.0012058457359671593}, {"id": 70, "seek": 45424, "start": 471.36, "end": 479.96000000000004, "text": " reason to trust it, you can guarantee the thing. There are some technical details about it. This", "tokens": [51220, 1778, 281, 3361, 309, 11, 291, 393, 10815, 264, 551, 13, 821, 366, 512, 6191, 4365, 466, 309, 13, 639, 51650], "temperature": 0.0, "avg_logprob": -0.1933738950272681, "compression_ratio": 1.5638297872340425, "no_speech_prob": 0.0012058457359671593}, {"id": 71, "seek": 47996, "start": 480.03999999999996, "end": 487.2, "text": " talk is more about explaining the high level parts. Initially, it was completely a new kernel", "tokens": [50368, 751, 307, 544, 466, 13468, 264, 1090, 1496, 3166, 13, 29446, 11, 309, 390, 2584, 257, 777, 28256, 50726], "temperature": 0.0, "avg_logprob": -0.3511649836664614, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.045189566910266876}, {"id": 72, "seek": 47996, "start": 487.2, "end": 493.76, "text": " process. Actually, I did a presentation on the kernel dev room last year at FOSSTEM about this. But", "tokens": [50726, 1399, 13, 5135, 11, 286, 630, 257, 5860, 322, 264, 28256, 1905, 1808, 1036, 1064, 412, 479, 4367, 6840, 6683, 466, 341, 13, 583, 51054], "temperature": 0.0, "avg_logprob": -0.3511649836664614, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.045189566910266876}, {"id": 73, "seek": 47996, "start": 493.76, "end": 499.32, "text": " during the upstreaming process, it was changed. So now it's using some existing technologies,", "tokens": [51054, 1830, 264, 33915, 278, 1399, 11, 309, 390, 3105, 13, 407, 586, 309, 311, 1228, 512, 6741, 7943, 11, 51332], "temperature": 0.0, "avg_logprob": -0.3511649836664614, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.045189566910266876}, {"id": 74, "seek": 47996, "start": 499.32, "end": 505.71999999999997, "text": " overlay FS in particular and E-RUFS that were already in the kernel, but they have been", "tokens": [51332, 31741, 41138, 294, 1729, 293, 462, 12, 49, 52, 29318, 300, 645, 1217, 294, 264, 28256, 11, 457, 436, 362, 668, 51652], "temperature": 0.0, "avg_logprob": -0.3511649836664614, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.045189566910266876}, {"id": 75, "seek": 50572, "start": 506.16, "end": 513.4, "text": " extended a bit, so they support this use case too. And overlay FS is normally a way to layer", "tokens": [50386, 10913, 257, 857, 11, 370, 436, 1406, 341, 764, 1389, 886, 13, 400, 31741, 41138, 307, 5646, 257, 636, 281, 4583, 50748], "temperature": 0.0, "avg_logprob": -0.23730894389905427, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.00288776564411819}, {"id": 76, "seek": 50572, "start": 513.4, "end": 520.52, "text": " things, but it actually has already a way for a file in an upper level to have a different name in", "tokens": [50748, 721, 11, 457, 309, 767, 575, 1217, 257, 636, 337, 257, 3991, 294, 364, 6597, 1496, 281, 362, 257, 819, 1315, 294, 51104], "temperature": 0.0, "avg_logprob": -0.23730894389905427, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.00288776564411819}, {"id": 77, "seek": 50572, "start": 520.52, "end": 526.6, "text": " the lower level. Normally, you use that for renaming a file across layers. But we use it instead to", "tokens": [51104, 264, 3126, 1496, 13, 17424, 11, 291, 764, 300, 337, 8124, 5184, 257, 3991, 2108, 7914, 13, 583, 321, 764, 309, 2602, 281, 51408], "temperature": 0.0, "avg_logprob": -0.23730894389905427, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.00288776564411819}, {"id": 78, "seek": 50572, "start": 526.6, "end": 533.8000000000001, "text": " redirect to the baseter. And then we introduce this thing called data only lower base structures or", "tokens": [51408, 29066, 281, 264, 987, 2398, 13, 400, 550, 321, 5366, 341, 551, 1219, 1412, 787, 3126, 3096, 9227, 420, 51768], "temperature": 0.0, "avg_logprob": -0.23730894389905427, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.00288776564411819}, {"id": 79, "seek": 53380, "start": 533.88, "end": 541.8, "text": " layers. So we basically hide the lowest level of use redirects to the files in there. And then we", "tokens": [50368, 7914, 13, 407, 321, 1936, 6479, 264, 12437, 1496, 295, 764, 29066, 82, 281, 264, 7098, 294, 456, 13, 400, 550, 321, 50764], "temperature": 0.0, "avg_logprob": -0.23484922409057618, "compression_ratio": 1.6986899563318778, "no_speech_prob": 0.0009539002785459161}, {"id": 80, "seek": 53380, "start": 541.8, "end": 548.52, "text": " have a new FS, which is an ISO file or a squash FS. It's just a read-only file system that we use", "tokens": [50764, 362, 257, 777, 41138, 11, 597, 307, 364, 25042, 3991, 420, 257, 30725, 41138, 13, 467, 311, 445, 257, 1401, 12, 25202, 3991, 1185, 300, 321, 764, 51100], "temperature": 0.0, "avg_logprob": -0.23484922409057618, "compression_ratio": 1.6986899563318778, "no_speech_prob": 0.0009539002785459161}, {"id": 81, "seek": 53380, "start": 548.52, "end": 555.24, "text": " to record the entire directory structure of the loader and the overlay FS, including the final", "tokens": [51100, 281, 2136, 264, 2302, 21120, 3877, 295, 264, 3677, 260, 293, 264, 31741, 41138, 11, 3009, 264, 2572, 51436], "temperature": 0.0, "avg_logprob": -0.23484922409057618, "compression_ratio": 1.6986899563318778, "no_speech_prob": 0.0009539002785459161}, {"id": 82, "seek": 53380, "start": 555.24, "end": 560.8399999999999, "text": " names and whatnot and the overlay FS ex-adders that do the redirects to the lower directories. And", "tokens": [51436, 5288, 293, 25882, 293, 264, 31741, 41138, 454, 12, 345, 15633, 300, 360, 264, 29066, 82, 281, 264, 3126, 5391, 530, 13, 400, 51716], "temperature": 0.0, "avg_logprob": -0.23484922409057618, "compression_ratio": 1.6986899563318778, "no_speech_prob": 0.0009539002785459161}, {"id": 83, "seek": 56084, "start": 560.9200000000001, "end": 567.08, "text": " then we use bind mount, or loopback mount as thing and set up an overlay FS combined thing to use it.", "tokens": [50368, 550, 321, 764, 14786, 3746, 11, 420, 6367, 3207, 3746, 382, 551, 293, 992, 493, 364, 31741, 41138, 9354, 551, 281, 764, 309, 13, 50676], "temperature": 0.0, "avg_logprob": -0.25887131463913693, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0003458110732026398}, {"id": 84, "seek": 56084, "start": 567.96, "end": 574.6800000000001, "text": " We had to add a couple of things, data only lower directories to hide the lower directory. The FS", "tokens": [50720, 492, 632, 281, 909, 257, 1916, 295, 721, 11, 1412, 787, 3126, 5391, 530, 281, 6479, 264, 3126, 21120, 13, 440, 41138, 51056], "temperature": 0.0, "avg_logprob": -0.25887131463913693, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0003458110732026398}, {"id": 85, "seek": 56084, "start": 574.6800000000001, "end": 580.2, "text": " is very devalidational. We had an add a new ex-adder to overlay FS to validate the redirects.", "tokens": [51056, 307, 588, 1905, 304, 327, 1478, 13, 492, 632, 364, 909, 257, 777, 454, 12, 345, 1068, 281, 31741, 41138, 281, 29562, 264, 29066, 82, 13, 51332], "temperature": 0.0, "avg_logprob": -0.25887131463913693, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0003458110732026398}, {"id": 86, "seek": 56084, "start": 581.08, "end": 586.0400000000001, "text": " And then there's some nested stuff where you have overlays and overlay FS. That's kind of weird,", "tokens": [51376, 400, 550, 456, 311, 512, 15646, 292, 1507, 689, 291, 362, 15986, 3772, 293, 31741, 41138, 13, 663, 311, 733, 295, 3657, 11, 51624], "temperature": 0.0, "avg_logprob": -0.25887131463913693, "compression_ratio": 1.6883116883116882, "no_speech_prob": 0.0003458110732026398}, {"id": 87, "seek": 58604, "start": 586.04, "end": 593.48, "text": " but we had to add that too. But it's all in now. And we have a final version release that has a", "tokens": [50364, 457, 321, 632, 281, 909, 300, 886, 13, 583, 309, 311, 439, 294, 586, 13, 400, 321, 362, 257, 2572, 3037, 4374, 300, 575, 257, 50736], "temperature": 0.0, "avg_logprob": -0.21676661043750997, "compression_ratio": 1.5732217573221758, "no_speech_prob": 0.0021797125227749348}, {"id": 88, "seek": 58604, "start": 593.48, "end": 599.7199999999999, "text": " stable format that you can use and we're supposed to work forever. We also have integration with", "tokens": [50736, 8351, 7877, 300, 291, 393, 764, 293, 321, 434, 3442, 281, 589, 5680, 13, 492, 611, 362, 10980, 365, 51048], "temperature": 0.0, "avg_logprob": -0.21676661043750997, "compression_ratio": 1.5732217573221758, "no_speech_prob": 0.0021797125227749348}, {"id": 89, "seek": 58604, "start": 599.7199999999999, "end": 609.16, "text": " OS tree. I will not spend too much time on this, but OS tree is our like red hats image-based", "tokens": [51048, 12731, 4230, 13, 286, 486, 406, 3496, 886, 709, 565, 322, 341, 11, 457, 12731, 4230, 307, 527, 411, 2182, 20549, 3256, 12, 6032, 51520], "temperature": 0.0, "avg_logprob": -0.21676661043750997, "compression_ratio": 1.5732217573221758, "no_speech_prob": 0.0021797125227749348}, {"id": 90, "seek": 58604, "start": 609.16, "end": 614.5999999999999, "text": " entire system, like atomic immutable operating system used by things like Fedora Cyliblu.", "tokens": [51520, 2302, 1185, 11, 411, 22275, 3397, 32148, 7447, 1185, 1143, 538, 721, 411, 7772, 3252, 383, 5088, 897, 2781, 13, 51792], "temperature": 0.0, "avg_logprob": -0.21676661043750997, "compression_ratio": 1.5732217573221758, "no_speech_prob": 0.0021797125227749348}, {"id": 91, "seek": 61460, "start": 615.4, "end": 620.44, "text": " And the current version of OS tree has experimental support for just creating these", "tokens": [50404, 400, 264, 2190, 3037, 295, 12731, 4230, 575, 17069, 1406, 337, 445, 4084, 613, 50656], "temperature": 0.0, "avg_logprob": -0.25751459729540477, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001015565823763609}, {"id": 92, "seek": 61460, "start": 620.44, "end": 629.72, "text": " composifest images. So we create them at build time and sign them. And then if you validate it during", "tokens": [50656, 10199, 351, 377, 5267, 13, 407, 321, 1884, 552, 412, 1322, 565, 293, 1465, 552, 13, 400, 550, 498, 291, 29562, 309, 1830, 51120], "temperature": 0.0, "avg_logprob": -0.25751459729540477, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001015565823763609}, {"id": 93, "seek": 61460, "start": 629.72, "end": 635.96, "text": " boot, like it validates the signature in the in the FS. And if it's valid, you can mount the", "tokens": [51120, 11450, 11, 411, 309, 7363, 1024, 264, 13397, 294, 264, 294, 264, 41138, 13, 400, 498, 309, 311, 7363, 11, 291, 393, 3746, 264, 51432], "temperature": 0.0, "avg_logprob": -0.25751459729540477, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001015565823763609}, {"id": 94, "seek": 61460, "start": 635.96, "end": 643.1600000000001, "text": " composifest image and everything is just guaranteed to be whatever is right. And if you're using", "tokens": [51432, 10199, 351, 377, 3256, 293, 1203, 307, 445, 18031, 281, 312, 2035, 307, 558, 13, 400, 498, 291, 434, 1228, 51792], "temperature": 0.0, "avg_logprob": -0.25751459729540477, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.001015565823763609}, {"id": 95, "seek": 64316, "start": 643.24, "end": 649.0799999999999, "text": " something like secure boot to make sure you boot the right kernel and you're right in it,", "tokens": [50368, 746, 411, 7144, 11450, 281, 652, 988, 291, 11450, 264, 558, 28256, 293, 291, 434, 558, 294, 309, 11, 50660], "temperature": 0.0, "avg_logprob": -0.36027420891655815, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.003647993318736553}, {"id": 96, "seek": 64316, "start": 649.0799999999999, "end": 656.36, "text": " RAMFS, then you basically have an entire time approved boot signed by your buyers key, basically.", "tokens": [50660, 14561, 29318, 11, 550, 291, 1936, 362, 364, 2302, 565, 10826, 11450, 8175, 538, 428, 23465, 2141, 11, 1936, 13, 51024], "temperature": 0.0, "avg_logprob": -0.36027420891655815, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.003647993318736553}, {"id": 97, "seek": 64316, "start": 657.56, "end": 663.3199999999999, "text": " But this talk a little about containers. And composifest has two major targets,", "tokens": [51084, 583, 341, 751, 257, 707, 466, 17089, 13, 400, 10199, 351, 377, 575, 732, 2563, 12911, 11, 51372], "temperature": 0.0, "avg_logprob": -0.36027420891655815, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.003647993318736553}, {"id": 98, "seek": 64316, "start": 664.12, "end": 671.88, "text": " as the OS tree use case and OCI images. And the actual work on podman and the back ends is done", "tokens": [51412, 382, 264, 12731, 4230, 764, 1389, 293, 422, 25240, 5267, 13, 400, 264, 3539, 589, 322, 2497, 1601, 293, 264, 646, 5314, 307, 1096, 51800], "temperature": 0.0, "avg_logprob": -0.36027420891655815, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.003647993318736553}, {"id": 99, "seek": 67188, "start": 671.88, "end": 678.04, "text": " not by me, but by Giuseppe, who is one of the podman and C-RAM developers.", "tokens": [50364, 406, 538, 385, 11, 457, 538, 15334, 438, 19833, 11, 567, 307, 472, 295, 264, 2497, 1601, 293, 383, 12, 49, 2865, 8849, 13, 50672], "temperature": 0.0, "avg_logprob": -0.18999935598934398, "compression_ratio": 1.5102880658436213, "no_speech_prob": 0.0025872476398944855}, {"id": 100, "seek": 67188, "start": 679.64, "end": 685.8, "text": " It's based on his work on CS3 shunt, which I'm not going to go into too much details here, but it's", "tokens": [50752, 467, 311, 2361, 322, 702, 589, 322, 9460, 18, 402, 2760, 11, 597, 286, 478, 406, 516, 281, 352, 666, 886, 709, 4365, 510, 11, 457, 309, 311, 51060], "temperature": 0.0, "avg_logprob": -0.18999935598934398, "compression_ratio": 1.5102880658436213, "no_speech_prob": 0.0025872476398944855}, {"id": 101, "seek": 67188, "start": 685.8, "end": 693.8, "text": " basically a new compression format for OCI images that allows adding an index to the file. And the", "tokens": [51060, 1936, 257, 777, 19355, 7877, 337, 422, 25240, 5267, 300, 4045, 5127, 364, 8186, 281, 264, 3991, 13, 400, 264, 51460], "temperature": 0.0, "avg_logprob": -0.18999935598934398, "compression_ratio": 1.5102880658436213, "no_speech_prob": 0.0025872476398944855}, {"id": 102, "seek": 67188, "start": 693.8, "end": 698.12, "text": " index has the check sum of the files. We can avoid downloading them if you already have them.", "tokens": [51460, 8186, 575, 264, 1520, 2408, 295, 264, 7098, 13, 492, 393, 5042, 32529, 552, 498, 291, 1217, 362, 552, 13, 51676], "temperature": 0.0, "avg_logprob": -0.18999935598934398, "compression_ratio": 1.5102880658436213, "no_speech_prob": 0.0025872476398944855}, {"id": 103, "seek": 69812, "start": 699.08, "end": 704.6, "text": " But also the fact that we have these digest is the perfect way to introduce the", "tokens": [50412, 583, 611, 264, 1186, 300, 321, 362, 613, 13884, 307, 264, 2176, 636, 281, 5366, 264, 50688], "temperature": 0.0, "avg_logprob": -0.1791151137579055, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.003270175773650408}, {"id": 104, "seek": 69812, "start": 704.6, "end": 712.36, "text": " the objects directory kind of thing that composifest uses. So if you look at container storage,", "tokens": [50688, 264, 6565, 21120, 733, 295, 551, 300, 10199, 351, 377, 4960, 13, 407, 498, 291, 574, 412, 10129, 6725, 11, 51076], "temperature": 0.0, "avg_logprob": -0.1791151137579055, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.003270175773650408}, {"id": 105, "seek": 69812, "start": 713.16, "end": 720.84, "text": " which is the goal library for storing local images that podman uses, the latest version has basic", "tokens": [51116, 597, 307, 264, 3387, 6405, 337, 26085, 2654, 5267, 300, 2497, 1601, 4960, 11, 264, 6792, 3037, 575, 3875, 51500], "temperature": 0.0, "avg_logprob": -0.1791151137579055, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.003270175773650408}, {"id": 106, "seek": 72084, "start": 720.9200000000001, "end": 726.52, "text": " composifest support. And we used have to wait until they vendor in the latest version", "tokens": [50368, 10199, 351, 377, 1406, 13, 400, 321, 1143, 362, 281, 1699, 1826, 436, 24321, 294, 264, 6792, 3037, 50648], "temperature": 0.0, "avg_logprob": -0.13662823297644175, "compression_ratio": 1.6042553191489362, "no_speech_prob": 0.025542769581079483}, {"id": 107, "seek": 72084, "start": 727.5600000000001, "end": 733.08, "text": " into podman and then it should just work out of the box. And if you have this, we'll get some of", "tokens": [50700, 666, 2497, 1601, 293, 550, 309, 820, 445, 589, 484, 295, 264, 2424, 13, 400, 498, 291, 362, 341, 11, 321, 603, 483, 512, 295, 50976], "temperature": 0.0, "avg_logprob": -0.13662823297644175, "compression_ratio": 1.6042553191489362, "no_speech_prob": 0.025542769581079483}, {"id": 108, "seek": 72084, "start": 733.08, "end": 740.84, "text": " the advantages of composifest, like higher density. If you have any images in your cluster happen to", "tokens": [50976, 264, 14906, 295, 10199, 351, 377, 11, 411, 2946, 10305, 13, 759, 291, 362, 604, 5267, 294, 428, 13630, 1051, 281, 51364], "temperature": 0.0, "avg_logprob": -0.13662823297644175, "compression_ratio": 1.6042553191489362, "no_speech_prob": 0.025542769581079483}, {"id": 109, "seek": 72084, "start": 740.84, "end": 750.44, "text": " share files, those files will be stored only once on disk per whatever node you're using. And", "tokens": [51364, 2073, 7098, 11, 729, 7098, 486, 312, 12187, 787, 1564, 322, 12355, 680, 2035, 9984, 291, 434, 1228, 13, 400, 51844], "temperature": 0.0, "avg_logprob": -0.13662823297644175, "compression_ratio": 1.6042553191489362, "no_speech_prob": 0.025542769581079483}, {"id": 110, "seek": 75084, "start": 751.0, "end": 758.2800000000001, "text": " once in memory. And we can also use the validation to make sure we don't accidentally get modifications.", "tokens": [50372, 1564, 294, 4675, 13, 400, 321, 393, 611, 764, 264, 24071, 281, 652, 988, 321, 500, 380, 15715, 483, 26881, 13, 50736], "temperature": 0.0, "avg_logprob": -0.12119813398881392, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.0029787723906338215}, {"id": 111, "seek": 75084, "start": 758.84, "end": 762.0400000000001, "text": " But also in the future, this is not this is something that needs a bit more work.", "tokens": [50764, 583, 611, 294, 264, 2027, 11, 341, 307, 406, 341, 307, 746, 300, 2203, 257, 857, 544, 589, 13, 50924], "temperature": 0.0, "avg_logprob": -0.12119813398881392, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.0029787723906338215}, {"id": 112, "seek": 75084, "start": 762.76, "end": 769.48, "text": " We could have a list of signatures or a list of keys and like limit the amount of", "tokens": [50960, 492, 727, 362, 257, 1329, 295, 32322, 420, 257, 1329, 295, 9317, 293, 411, 4948, 264, 2372, 295, 51296], "temperature": 0.0, "avg_logprob": -0.12119813398881392, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.0029787723906338215}, {"id": 113, "seek": 75084, "start": 771.1600000000001, "end": 777.8000000000001, "text": " limit the types of images run to only those that have a signed composifest digest by these public", "tokens": [51380, 4948, 264, 3467, 295, 5267, 1190, 281, 787, 729, 300, 362, 257, 8175, 10199, 351, 377, 13884, 538, 613, 1908, 51712], "temperature": 0.0, "avg_logprob": -0.12119813398881392, "compression_ratio": 1.641255605381166, "no_speech_prob": 0.0029787723906338215}, {"id": 114, "seek": 77780, "start": 777.8, "end": 788.1999999999999, "text": " keys. So how do you use this? There are some options in the storage.conf. You have to enable", "tokens": [50364, 9317, 13, 407, 577, 360, 291, 764, 341, 30, 821, 366, 512, 3956, 294, 264, 6725, 13, 24697, 13, 509, 362, 281, 9528, 50884], "temperature": 0.0, "avg_logprob": -0.1863687515258789, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.004816474858671427}, {"id": 115, "seek": 77780, "start": 788.1999999999999, "end": 793.56, "text": " all of these currently. Actually, the convert images is not strictly necessary. That's for", "tokens": [50884, 439, 295, 613, 4362, 13, 5135, 11, 264, 7620, 5267, 307, 406, 20792, 4818, 13, 663, 311, 337, 51152], "temperature": 0.0, "avg_logprob": -0.1863687515258789, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.004816474858671427}, {"id": 116, "seek": 77780, "start": 793.56, "end": 800.28, "text": " converting images that are in this new CSDD shunt format. So it works with any. If you", "tokens": [51152, 29942, 5267, 300, 366, 294, 341, 777, 9460, 20818, 402, 2760, 7877, 13, 407, 309, 1985, 365, 604, 13, 759, 291, 51488], "temperature": 0.0, "avg_logprob": -0.1863687515258789, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.004816474858671427}, {"id": 117, "seek": 80028, "start": 800.28, "end": 808.1999999999999, "text": " pull any image, it will convert it to the format and then use composifest for mounting it. So", "tokens": [50364, 2235, 604, 3256, 11, 309, 486, 7620, 309, 281, 264, 7877, 293, 550, 764, 10199, 351, 377, 337, 22986, 309, 13, 407, 50760], "temperature": 0.0, "avg_logprob": -0.126149230533176, "compression_ratio": 1.546448087431694, "no_speech_prob": 0.0010159212397411466}, {"id": 118, "seek": 80028, "start": 808.1999999999999, "end": 818.8399999999999, "text": " it will work for anything, basically. But if you want maximum performance and not have to do the", "tokens": [50760, 309, 486, 589, 337, 1340, 11, 1936, 13, 583, 498, 291, 528, 6674, 3389, 293, 406, 362, 281, 360, 264, 51292], "temperature": 0.0, "avg_logprob": -0.126149230533176, "compression_ratio": 1.546448087431694, "no_speech_prob": 0.0010159212397411466}, {"id": 119, "seek": 80028, "start": 818.8399999999999, "end": 827.0, "text": " conversion, it's good to use CSDD shunt in your image repositories. But that's something you", "tokens": [51292, 14298, 11, 309, 311, 665, 281, 764, 9460, 20818, 402, 2760, 294, 428, 3256, 22283, 2083, 13, 583, 300, 311, 746, 291, 51700], "temperature": 0.0, "avg_logprob": -0.126149230533176, "compression_ratio": 1.546448087431694, "no_speech_prob": 0.0010159212397411466}, {"id": 120, "seek": 82700, "start": 827.0, "end": 832.12, "text": " want anyway in the future at least because you get to download less as well.", "tokens": [50364, 528, 4033, 294, 264, 2027, 412, 1935, 570, 291, 483, 281, 5484, 1570, 382, 731, 13, 50620], "temperature": 0.0, "avg_logprob": -0.21021328902826075, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.007454028818756342}, {"id": 121, "seek": 82700, "start": 834.2, "end": 840.92, "text": " If you ever looked inside the container storage, this is how it looks, a traditional one.", "tokens": [50724, 759, 291, 1562, 2956, 1854, 264, 10129, 6725, 11, 341, 307, 577, 309, 1542, 11, 257, 5164, 472, 13, 51060], "temperature": 0.0, "avg_logprob": -0.21021328902826075, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.007454028818756342}, {"id": 122, "seek": 82700, "start": 842.04, "end": 847.72, "text": " Actually, I deleted some stuff. But the important thing is this per back end directory called", "tokens": [51116, 5135, 11, 286, 22981, 512, 1507, 13, 583, 264, 1021, 551, 307, 341, 680, 646, 917, 21120, 1219, 51400], "temperature": 0.0, "avg_logprob": -0.21021328902826075, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.007454028818756342}, {"id": 123, "seek": 82700, "start": 847.72, "end": 852.44, "text": " overlay because we're using the overlay back end. And every directory in there is a layer.", "tokens": [51400, 31741, 570, 321, 434, 1228, 264, 31741, 646, 917, 13, 400, 633, 21120, 294, 456, 307, 257, 4583, 13, 51636], "temperature": 0.0, "avg_logprob": -0.21021328902826075, "compression_ratio": 1.610091743119266, "no_speech_prob": 0.007454028818756342}, {"id": 124, "seek": 85244, "start": 853.4000000000001, "end": 858.12, "text": " And every layer has a diff directory that has all the files that are introduced in that layer.", "tokens": [50412, 400, 633, 4583, 575, 257, 7593, 21120, 300, 575, 439, 264, 7098, 300, 366, 7268, 294, 300, 4583, 13, 50648], "temperature": 0.0, "avg_logprob": -0.1646655114848962, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.004607475362718105}, {"id": 125, "seek": 85244, "start": 858.84, "end": 864.2800000000001, "text": " And then you use overlay fs to combine all of these. Plus at the end, it adds your empty", "tokens": [50684, 400, 550, 291, 764, 31741, 283, 82, 281, 10432, 439, 295, 613, 13, 7721, 412, 264, 917, 11, 309, 10860, 428, 6707, 50956], "temperature": 0.0, "avg_logprob": -0.1646655114848962, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.004607475362718105}, {"id": 126, "seek": 85244, "start": 864.2800000000001, "end": 870.5200000000001, "text": " directory that is the writable directory for your container. But instead, if you look at a", "tokens": [50956, 21120, 300, 307, 264, 10912, 712, 21120, 337, 428, 10129, 13, 583, 2602, 11, 498, 291, 574, 412, 257, 51268], "temperature": 0.0, "avg_logprob": -0.1646655114848962, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.004607475362718105}, {"id": 127, "seek": 85244, "start": 871.48, "end": 878.44, "text": " composed fs using back end storage, it looks different. It has the same overall layout,", "tokens": [51316, 18204, 283, 82, 1228, 646, 917, 6725, 11, 309, 1542, 819, 13, 467, 575, 264, 912, 4787, 13333, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1646655114848962, "compression_ratio": 1.699530516431925, "no_speech_prob": 0.004607475362718105}, {"id": 128, "seek": 87844, "start": 879.0, "end": 885.0, "text": " but the diff directory contains basically the baster and then there's this extra data, the blob.", "tokens": [50392, 457, 264, 7593, 21120, 8306, 1936, 264, 987, 391, 293, 550, 456, 311, 341, 2857, 1412, 11, 264, 46115, 13, 50692], "temperature": 0.0, "avg_logprob": -0.1454678015275435, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.001080857589840889}, {"id": 129, "seek": 87844, "start": 885.8000000000001, "end": 890.0400000000001, "text": " So what happens is that when you set up the container, we mount all these composed fs", "tokens": [50732, 407, 437, 2314, 307, 300, 562, 291, 992, 493, 264, 10129, 11, 321, 3746, 439, 613, 18204, 283, 82, 50944], "temperature": 0.0, "avg_logprob": -0.1454678015275435, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.001080857589840889}, {"id": 130, "seek": 87844, "start": 890.0400000000001, "end": 895.8800000000001, "text": " directors, each producing a layer, and then we merge them in overlay fs plus your writable storage.", "tokens": [50944, 17307, 11, 1184, 10501, 257, 4583, 11, 293, 550, 321, 22183, 552, 294, 31741, 283, 82, 1804, 428, 10912, 712, 6725, 13, 51236], "temperature": 0.0, "avg_logprob": -0.1454678015275435, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.001080857589840889}, {"id": 131, "seek": 87844, "start": 897.96, "end": 904.9200000000001, "text": " So it looks slightly different, but it's basically the same. And to demonstrate how", "tokens": [51340, 407, 309, 1542, 4748, 819, 11, 457, 309, 311, 1936, 264, 912, 13, 400, 281, 11698, 577, 51688], "temperature": 0.0, "avg_logprob": -0.1454678015275435, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.001080857589840889}, {"id": 132, "seek": 90492, "start": 905.56, "end": 913.3199999999999, "text": " this will affect resource usage, I created 20, like, so this is a synthetic example,", "tokens": [50396, 341, 486, 3345, 7684, 14924, 11, 286, 2942, 945, 11, 411, 11, 370, 341, 307, 257, 23420, 1365, 11, 50784], "temperature": 0.0, "avg_logprob": -0.17245424554703084, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.005125809460878372}, {"id": 133, "seek": 90492, "start": 913.3199999999999, "end": 919.24, "text": " but I think it proves the point. I created 20 copies of Fedora image, and I changed one", "tokens": [50784, 457, 286, 519, 309, 25019, 264, 935, 13, 286, 2942, 945, 14341, 295, 7772, 3252, 3256, 11, 293, 286, 3105, 472, 51080], "temperature": 0.0, "avg_logprob": -0.17245424554703084, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.005125809460878372}, {"id": 134, "seek": 90492, "start": 919.88, "end": 926.4399999999999, "text": " file in each and squashed them. So there are like single layer images that basically have all the", "tokens": [51112, 3991, 294, 1184, 293, 2339, 12219, 552, 13, 407, 456, 366, 411, 2167, 4583, 5267, 300, 1936, 362, 439, 264, 51440], "temperature": 0.0, "avg_logprob": -0.17245424554703084, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.005125809460878372}, {"id": 135, "seek": 90492, "start": 926.4399999999999, "end": 931.7199999999999, "text": " same files in them. And then I run sleep in each of them. And sleep is a very small thing, but", "tokens": [51440, 912, 7098, 294, 552, 13, 400, 550, 286, 1190, 2817, 294, 1184, 295, 552, 13, 400, 2817, 307, 257, 588, 1359, 551, 11, 457, 51704], "temperature": 0.0, "avg_logprob": -0.17245424554703084, "compression_ratio": 1.6294642857142858, "no_speech_prob": 0.005125809460878372}, {"id": 136, "seek": 93172, "start": 931.72, "end": 937.88, "text": " it will map glibc and it will do like some basic stuff that any app would do. And then I run them", "tokens": [50364, 309, 486, 4471, 1563, 897, 66, 293, 309, 486, 360, 411, 512, 3875, 1507, 300, 604, 724, 576, 360, 13, 400, 550, 286, 1190, 552, 50672], "temperature": 0.0, "avg_logprob": -0.17259980997908006, "compression_ratio": 1.5766129032258065, "no_speech_prob": 0.001476375968195498}, {"id": 137, "seek": 93172, "start": 937.88, "end": 946.36, "text": " all in parallel. And we could look at how this looks in the storage. Every file here is, or every", "tokens": [50672, 439, 294, 8952, 13, 400, 321, 727, 574, 412, 577, 341, 1542, 294, 264, 6725, 13, 2048, 3991, 510, 307, 11, 420, 633, 51096], "temperature": 0.0, "avg_logprob": -0.17259980997908006, "compression_ratio": 1.5766129032258065, "no_speech_prob": 0.001476375968195498}, {"id": 138, "seek": 93172, "start": 946.36, "end": 952.52, "text": " directory, every layer is the Fedora base image. So it's 180 megs, sum up for 20 up to three and a", "tokens": [51096, 21120, 11, 633, 4583, 307, 264, 7772, 3252, 3096, 3256, 13, 407, 309, 311, 11971, 10816, 82, 11, 2408, 493, 337, 945, 493, 281, 1045, 293, 257, 51404], "temperature": 0.0, "avg_logprob": -0.17259980997908006, "compression_ratio": 1.5766129032258065, "no_speech_prob": 0.001476375968195498}, {"id": 139, "seek": 93172, "start": 952.52, "end": 960.9200000000001, "text": " half gig. But if you look at the composed fs version, it's just 200 megs because only the things", "tokens": [51404, 1922, 8741, 13, 583, 498, 291, 574, 412, 264, 18204, 283, 82, 3037, 11, 309, 311, 445, 2331, 10816, 82, 570, 787, 264, 721, 51824], "temperature": 0.0, "avg_logprob": -0.17259980997908006, "compression_ratio": 1.5766129032258065, "no_speech_prob": 0.001476375968195498}, {"id": 140, "seek": 96092, "start": 960.92, "end": 967.9599999999999, "text": " that are different use more space. And this might look weird that just one of them is larger,", "tokens": [50364, 300, 366, 819, 764, 544, 1901, 13, 400, 341, 1062, 574, 3657, 300, 445, 472, 295, 552, 307, 4833, 11, 50716], "temperature": 0.0, "avg_logprob": -0.13207345659082587, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.0017258253647014499}, {"id": 141, "seek": 96092, "start": 968.5999999999999, "end": 975.24, "text": " but actually what happens is that each individual layer has all the files that they refer to,", "tokens": [50748, 457, 767, 437, 2314, 307, 300, 1184, 2609, 4583, 575, 439, 264, 7098, 300, 436, 2864, 281, 11, 51080], "temperature": 0.0, "avg_logprob": -0.13207345659082587, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.0017258253647014499}, {"id": 142, "seek": 96092, "start": 975.24, "end": 981.64, "text": " but they're hard link across the directory. So there's like a tracking of which files are", "tokens": [51080, 457, 436, 434, 1152, 2113, 2108, 264, 21120, 13, 407, 456, 311, 411, 257, 11603, 295, 597, 7098, 366, 51400], "temperature": 0.0, "avg_logprob": -0.13207345659082587, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.0017258253647014499}, {"id": 143, "seek": 96092, "start": 981.64, "end": 986.92, "text": " locally available. And instead of you making a copy of them, they're all like hard link of each", "tokens": [51400, 16143, 2435, 13, 400, 2602, 295, 291, 1455, 257, 5055, 295, 552, 11, 436, 434, 439, 411, 1152, 2113, 295, 1184, 51664], "temperature": 0.0, "avg_logprob": -0.13207345659082587, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.0017258253647014499}, {"id": 144, "seek": 98692, "start": 986.92, "end": 993.4, "text": " other. So that's pretty cool. I mean, I can imagine, it depends of course on your workload,", "tokens": [50364, 661, 13, 407, 300, 311, 1238, 1627, 13, 286, 914, 11, 286, 393, 3811, 11, 309, 5946, 295, 1164, 322, 428, 20139, 11, 50688], "temperature": 0.0, "avg_logprob": -0.2895972728729248, "compression_ratio": 1.4764397905759161, "no_speech_prob": 0.011847076006233692}, {"id": 145, "seek": 98692, "start": 993.4, "end": 1000.8399999999999, "text": " but it's not implausible that different images share files because most images are based on", "tokens": [50688, 457, 309, 311, 406, 8484, 8463, 964, 300, 819, 5267, 2073, 7098, 570, 881, 5267, 366, 2361, 322, 51060], "temperature": 0.0, "avg_logprob": -0.2895972728729248, "compression_ratio": 1.4764397905759161, "no_speech_prob": 0.011847076006233692}, {"id": 146, "seek": 98692, "start": 1000.8399999999999, "end": 1010.52, "text": " rbms or devs, whatever. And if you have the same dev of a GeoOopZee package, then it will have the", "tokens": [51060, 367, 65, 2592, 420, 1905, 82, 11, 2035, 13, 400, 498, 291, 362, 264, 912, 1905, 295, 257, 2876, 78, 46, 404, 57, 1653, 7372, 11, 550, 309, 486, 362, 264, 51544], "temperature": 0.0, "avg_logprob": -0.2895972728729248, "compression_ratio": 1.4764397905759161, "no_speech_prob": 0.011847076006233692}, {"id": 147, "seek": 101052, "start": 1010.6, "end": 1016.68, "text": " same file, even if you're using a completely different build of your image. So this is pretty cool.", "tokens": [50368, 912, 3991, 11, 754, 498, 291, 434, 1228, 257, 2584, 819, 1322, 295, 428, 3256, 13, 407, 341, 307, 1238, 1627, 13, 50672], "temperature": 0.0, "avg_logprob": -0.13739079236984253, "compression_ratio": 1.4923857868020305, "no_speech_prob": 0.020007481798529625}, {"id": 148, "seek": 101052, "start": 1018.52, "end": 1026.36, "text": " We're working on trying to finalize this, make it work by default in Podman. I think it's going to", "tokens": [50764, 492, 434, 1364, 322, 1382, 281, 2572, 1125, 341, 11, 652, 309, 589, 538, 7576, 294, 12646, 1601, 13, 286, 519, 309, 311, 516, 281, 51156], "temperature": 0.0, "avg_logprob": -0.13739079236984253, "compression_ratio": 1.4923857868020305, "no_speech_prob": 0.020007481798529625}, {"id": 149, "seek": 101052, "start": 1026.36, "end": 1033.4, "text": " miss the 4.9 release, so it's probably going to be in the next release. Also, the Podman people", "tokens": [51156, 1713, 264, 1017, 13, 24, 4374, 11, 370, 309, 311, 1391, 516, 281, 312, 294, 264, 958, 4374, 13, 2743, 11, 264, 12646, 1601, 561, 51508], "temperature": 0.0, "avg_logprob": -0.13739079236984253, "compression_ratio": 1.4923857868020305, "no_speech_prob": 0.020007481798529625}, {"id": 150, "seek": 103340, "start": 1033.4, "end": 1040.3600000000001, "text": " themselves are trying to work on making CSV chunks be more of a default thing or at least", "tokens": [50364, 2969, 366, 1382, 281, 589, 322, 1455, 48814, 24004, 312, 544, 295, 257, 7576, 551, 420, 412, 1935, 50712], "temperature": 0.0, "avg_logprob": -0.1861409002275609, "compression_ratio": 1.4734042553191489, "no_speech_prob": 0.028853820636868477}, {"id": 151, "seek": 103340, "start": 1041.0800000000002, "end": 1047.8000000000002, "text": " more widely used because it has advantages not only for Composite Fest, but also for used", "tokens": [50748, 544, 13371, 1143, 570, 309, 575, 14906, 406, 787, 337, 6620, 329, 642, 12993, 11, 457, 611, 337, 1143, 51084], "temperature": 0.0, "avg_logprob": -0.1861409002275609, "compression_ratio": 1.4734042553191489, "no_speech_prob": 0.028853820636868477}, {"id": 152, "seek": 103340, "start": 1048.76, "end": 1058.6000000000001, "text": " faster pulling of images. And then we need to look into signing images. I mean, there are ways to", "tokens": [51132, 4663, 8407, 295, 5267, 13, 400, 550, 321, 643, 281, 574, 666, 13393, 5267, 13, 286, 914, 11, 456, 366, 2098, 281, 51624], "temperature": 0.0, "avg_logprob": -0.1861409002275609, "compression_ratio": 1.4734042553191489, "no_speech_prob": 0.028853820636868477}, {"id": 153, "seek": 105860, "start": 1058.6, "end": 1066.84, "text": " sign manifests already. And you can imagine if you add Composite Fest digest into the manifest,", "tokens": [50364, 1465, 50252, 1217, 13, 400, 291, 393, 3811, 498, 291, 909, 6620, 329, 642, 12993, 13884, 666, 264, 10067, 11, 50776], "temperature": 0.0, "avg_logprob": -0.15798076670220557, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.012609085068106651}, {"id": 154, "seek": 105860, "start": 1066.84, "end": 1072.76, "text": " and you sign the manifest, if you can validate that the manifest is signed, you can trust the", "tokens": [50776, 293, 291, 1465, 264, 10067, 11, 498, 291, 393, 29562, 300, 264, 10067, 307, 8175, 11, 291, 393, 3361, 264, 51072], "temperature": 0.0, "avg_logprob": -0.15798076670220557, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.012609085068106651}, {"id": 155, "seek": 105860, "start": 1072.76, "end": 1076.76, "text": " digest, and you can mount the thing and know you have the right thing. But there are outstanding", "tokens": [51072, 13884, 11, 293, 291, 393, 3746, 264, 551, 293, 458, 291, 362, 264, 558, 551, 13, 583, 456, 366, 14485, 51272], "temperature": 0.0, "avg_logprob": -0.15798076670220557, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.012609085068106651}, {"id": 156, "seek": 105860, "start": 1076.76, "end": 1082.76, "text": " questions like, yeah, but what kind of keys are you using, where do you store them, how do you know", "tokens": [51272, 1651, 411, 11, 1338, 11, 457, 437, 733, 295, 9317, 366, 291, 1228, 11, 689, 360, 291, 3531, 552, 11, 577, 360, 291, 458, 51572], "temperature": 0.0, "avg_logprob": -0.15798076670220557, "compression_ratio": 1.838095238095238, "no_speech_prob": 0.012609085068106651}, {"id": 157, "seek": 108276, "start": 1082.84, "end": 1088.92, "text": " which one you trust, you know, there has to be some kind of rule set to specify what you're allowed to,", "tokens": [50368, 597, 472, 291, 3361, 11, 291, 458, 11, 456, 575, 281, 312, 512, 733, 295, 4978, 992, 281, 16500, 437, 291, 434, 4350, 281, 11, 50672], "temperature": 0.0, "avg_logprob": -0.16102927990174026, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.014719047583639622}, {"id": 158, "seek": 108276, "start": 1088.92, "end": 1095.8799999999999, "text": " which keys are golden or whatever, or are we using the kernel hearing or the secure boot keys,", "tokens": [50672, 597, 9317, 366, 9729, 420, 2035, 11, 420, 366, 321, 1228, 264, 28256, 4763, 420, 264, 7144, 11450, 9317, 11, 51020], "temperature": 0.0, "avg_logprob": -0.16102927990174026, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.014719047583639622}, {"id": 159, "seek": 108276, "start": 1095.8799999999999, "end": 1100.68, "text": " like, throughout sending questions. But the technical side is not really that complex.", "tokens": [51020, 411, 11, 3710, 7750, 1651, 13, 583, 264, 6191, 1252, 307, 406, 534, 300, 3997, 13, 51260], "temperature": 0.0, "avg_logprob": -0.16102927990174026, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.014719047583639622}, {"id": 160, "seek": 108276, "start": 1101.8799999999999, "end": 1107.96, "text": " If you can validate using some kind of mechanism that the digest or the manifest is okay,", "tokens": [51320, 759, 291, 393, 29562, 1228, 512, 733, 295, 7513, 300, 264, 13884, 420, 264, 10067, 307, 1392, 11, 51624], "temperature": 0.0, "avg_logprob": -0.16102927990174026, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.014719047583639622}, {"id": 161, "seek": 110796, "start": 1108.1200000000001, "end": 1117.16, "text": " then we can just mount this thing and be able to trust it. And I guess...", "tokens": [50372, 550, 321, 393, 445, 3746, 341, 551, 293, 312, 1075, 281, 3361, 309, 13, 400, 286, 2041, 485, 50824], "temperature": 0.0, "avg_logprob": -0.4994166022852847, "compression_ratio": 1.1862745098039216, "no_speech_prob": 0.013156863860785961}, {"id": 162, "seek": 110796, "start": 1127.16, "end": 1130.68, "text": " Hi, thank you for your talk. I am one of the...", "tokens": [51324, 2421, 11, 1309, 291, 337, 428, 751, 13, 286, 669, 472, 295, 264, 485, 51500], "temperature": 0.0, "avg_logprob": -0.4994166022852847, "compression_ratio": 1.1862745098039216, "no_speech_prob": 0.013156863860785961}, {"id": 163, "seek": 113068, "start": 1131.48, "end": 1140.8400000000001, "text": " One of the things that the design of your choice in PuzzleFS is different than Composite Fest is that", "tokens": [50404, 1485, 295, 264, 721, 300, 264, 1715, 295, 428, 3922, 294, 430, 16740, 306, 29318, 307, 819, 813, 6620, 329, 642, 12993, 307, 300, 50872], "temperature": 0.0, "avg_logprob": -0.28232723278003735, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.516716718673706}, {"id": 164, "seek": 113068, "start": 1140.8400000000001, "end": 1146.8400000000001, "text": " the files are split along file boundaries, instead of along sharing boundaries. It makes", "tokens": [50872, 264, 7098, 366, 7472, 2051, 3991, 13180, 11, 2602, 295, 2051, 5414, 13180, 13, 467, 1669, 51172], "temperature": 0.0, "avg_logprob": -0.28232723278003735, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.516716718673706}, {"id": 165, "seek": 113068, "start": 1146.8400000000001, "end": 1152.2, "text": " easier to get cool graphs with USS, but harder to then share if you change small", "tokens": [51172, 3571, 281, 483, 1627, 24877, 365, 30385, 11, 457, 6081, 281, 550, 2073, 498, 291, 1319, 1359, 51440], "temperature": 0.0, "avg_logprob": -0.28232723278003735, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.516716718673706}, {"id": 166, "seek": 113068, "start": 1152.2, "end": 1157.64, "text": " important portions of a file. I'm curious if you have any... Like, is that part of your future work?", "tokens": [51440, 1021, 25070, 295, 257, 3991, 13, 286, 478, 6369, 498, 291, 362, 604, 485, 1743, 11, 307, 300, 644, 295, 428, 2027, 589, 30, 51712], "temperature": 0.0, "avg_logprob": -0.28232723278003735, "compression_ratio": 1.576271186440678, "no_speech_prob": 0.516716718673706}, {"id": 167, "seek": 115764, "start": 1158.1200000000001, "end": 1167.16, "text": " I've thought about it. And I'm not... I don't know, do I work on that? Because it would be...", "tokens": [50388, 286, 600, 1194, 466, 309, 13, 400, 286, 478, 406, 485, 286, 500, 380, 458, 11, 360, 286, 589, 322, 300, 30, 1436, 309, 576, 312, 485, 50840], "temperature": 0.0, "avg_logprob": -0.24267814709590033, "compression_ratio": 1.5284552845528456, "no_speech_prob": 0.007685982622206211}, {"id": 168, "seek": 115764, "start": 1167.16, "end": 1172.2, "text": " It would require so much work on the kernel side that just, like, fundamentally change how", "tokens": [50840, 467, 576, 3651, 370, 709, 589, 322, 264, 28256, 1252, 300, 445, 11, 411, 11, 17879, 1319, 577, 51092], "temperature": 0.0, "avg_logprob": -0.24267814709590033, "compression_ratio": 1.5284552845528456, "no_speech_prob": 0.007685982622206211}, {"id": 169, "seek": 115764, "start": 1172.2, "end": 1178.6000000000001, "text": " page should track. That's not gonna happen. I mean, it's a choice you have to make if you want to", "tokens": [51092, 3028, 820, 2837, 13, 663, 311, 406, 799, 1051, 13, 286, 914, 11, 309, 311, 257, 3922, 291, 362, 281, 652, 498, 291, 528, 281, 51412], "temperature": 0.0, "avg_logprob": -0.24267814709590033, "compression_ratio": 1.5284552845528456, "no_speech_prob": 0.007685982622206211}, {"id": 170, "seek": 115764, "start": 1179.48, "end": 1185.96, "text": " focus on disk space use or in memory use. I think this is sort of like a Goldilocks zone, but", "tokens": [51456, 1879, 322, 12355, 1901, 764, 420, 294, 4675, 764, 13, 286, 519, 341, 307, 1333, 295, 411, 257, 6731, 388, 35507, 6668, 11, 457, 51780], "temperature": 0.0, "avg_logprob": -0.24267814709590033, "compression_ratio": 1.5284552845528456, "no_speech_prob": 0.007685982622206211}, {"id": 171, "seek": 118596, "start": 1186.28, "end": 1187.96, "text": " yes, it depends on your use case.", "tokens": [50380, 2086, 11, 309, 5946, 322, 428, 764, 1389, 13, 50464], "temperature": 0.0, "avg_logprob": -0.6172448839460101, "compression_ratio": 1.1359223300970873, "no_speech_prob": 0.030950458720326424}, {"id": 172, "seek": 118596, "start": 1187.96, "end": 1192.76, "text": " Yeah, also PuzzleFS was written in Russian, so it was his practical forever reason.", "tokens": [50464, 865, 11, 611, 430, 16740, 306, 29318, 390, 3720, 294, 7220, 11, 370, 309, 390, 702, 8496, 5680, 1778, 13, 50704], "temperature": 0.0, "avg_logprob": -0.6172448839460101, "compression_ratio": 1.1359223300970873, "no_speech_prob": 0.030950458720326424}, {"id": 173, "seek": 119276, "start": 1192.76, "end": 1215.56, "text": " I didn't get the question.", "tokens": [50364, 286, 994, 380, 483, 264, 1168, 13, 51504], "temperature": 0.0, "avg_logprob": -0.568461071361195, "compression_ratio": 0.7647058823529411, "no_speech_prob": 0.17882700264453888}, {"id": 174, "seek": 121556, "start": 1216.52, "end": 1229.8, "text": " Yeah, it doesn't really like... CSD Nishant is a way to extend the header of a layer", "tokens": [50412, 865, 11, 309, 1177, 380, 534, 411, 485, 9460, 35, 426, 742, 394, 307, 257, 636, 281, 10101, 264, 23117, 295, 257, 4583, 51076], "temperature": 0.0, "avg_logprob": -0.28515185038248697, "compression_ratio": 1.4, "no_speech_prob": 0.1611955761909485}, {"id": 175, "seek": 121556, "start": 1229.8, "end": 1235.8799999999999, "text": " torbol with information about what goes in it. And it's not strictly needed for Composite Fest.", "tokens": [51076, 3930, 17460, 365, 1589, 466, 437, 1709, 294, 309, 13, 400, 309, 311, 406, 20792, 2978, 337, 6620, 329, 642, 12993, 13, 51380], "temperature": 0.0, "avg_logprob": -0.28515185038248697, "compression_ratio": 1.4, "no_speech_prob": 0.1611955761909485}, {"id": 176, "seek": 121556, "start": 1236.6799999999998, "end": 1243.32, "text": " Like, you can untar the torbol and compute the checksum of every file if you want to.", "tokens": [51420, 1743, 11, 291, 393, 1701, 289, 264, 3930, 17460, 293, 14722, 264, 13834, 449, 295, 633, 3991, 498, 291, 528, 281, 13, 51752], "temperature": 0.0, "avg_logprob": -0.28515185038248697, "compression_ratio": 1.4, "no_speech_prob": 0.1611955761909485}, {"id": 177, "seek": 124332, "start": 1243.32, "end": 1251.08, "text": " But if it's there, you can avoid that and it's just better performance. So it's not necessary.", "tokens": [50364, 583, 498, 309, 311, 456, 11, 291, 393, 5042, 300, 293, 309, 311, 445, 1101, 3389, 13, 407, 309, 311, 406, 4818, 13, 50752], "temperature": 0.0, "avg_logprob": -0.39952869415283204, "compression_ratio": 1.2363636363636363, "no_speech_prob": 0.014904871582984924}, {"id": 178, "seek": 124332, "start": 1253.08, "end": 1256.04, "text": " Another question about the compression...", "tokens": [50852, 3996, 1168, 466, 264, 19355, 485, 51000], "temperature": 0.0, "avg_logprob": -0.39952869415283204, "compression_ratio": 1.2363636363636363, "no_speech_prob": 0.014904871582984924}, {"id": 179, "seek": 125604, "start": 1256.76, "end": 1262.76, "text": " The compression of the CSD, I think, is the only choice.", "tokens": [50400, 440, 19355, 295, 264, 9460, 35, 11, 286, 519, 11, 307, 264, 787, 3922, 13, 50700], "temperature": 0.0, "avg_logprob": -0.9408350235376602, "compression_ratio": 1.5562913907284768, "no_speech_prob": 0.46853774785995483}, {"id": 180, "seek": 125604, "start": 1262.76, "end": 1268.76, "text": " I think it belongs to the CSD compression of the torbol.", "tokens": [50700, 286, 519, 309, 12953, 281, 264, 9460, 35, 19355, 295, 264, 3930, 17460, 13, 51000], "temperature": 0.0, "avg_logprob": -0.9408350235376602, "compression_ratio": 1.5562913907284768, "no_speech_prob": 0.46853774785995483}, {"id": 181, "seek": 125604, "start": 1268.76, "end": 1272.76, "text": " But the G-Face is one issue more than the normal G-Face.", "tokens": [51000, 583, 264, 460, 12, 37, 617, 307, 472, 2734, 544, 813, 264, 2710, 460, 12, 37, 617, 13, 51200], "temperature": 0.0, "avg_logprob": -0.9408350235376602, "compression_ratio": 1.5562913907284768, "no_speech_prob": 0.46853774785995483}, {"id": 182, "seek": 125604, "start": 1272.76, "end": 1279.96, "text": " So, and then, like, in next image format, like, the CSD Nishant.", "tokens": [51200, 407, 11, 293, 550, 11, 411, 11, 294, 958, 3256, 7877, 11, 411, 11, 264, 9460, 35, 426, 742, 394, 13, 51560], "temperature": 0.0, "avg_logprob": -0.9408350235376602, "compression_ratio": 1.5562913907284768, "no_speech_prob": 0.46853774785995483}, {"id": 183, "seek": 127996, "start": 1280.68, "end": 1287.88, "text": " Yeah, well, G-Face is the standard, right?", "tokens": [50400, 865, 11, 731, 11, 460, 12, 37, 617, 307, 264, 3832, 11, 558, 30, 50760], "temperature": 0.0, "avg_logprob": -0.26655685106913246, "compression_ratio": 1.2937062937062938, "no_speech_prob": 0.04051590338349342}, {"id": 184, "seek": 127996, "start": 1294.76, "end": 1299.88, "text": " Yeah, there's this E-Star GC thing that you could use for that.", "tokens": [51104, 865, 11, 456, 311, 341, 462, 12, 24659, 29435, 551, 300, 291, 727, 764, 337, 300, 13, 51360], "temperature": 0.0, "avg_logprob": -0.26655685106913246, "compression_ratio": 1.2937062937062938, "no_speech_prob": 0.04051590338349342}, {"id": 185, "seek": 127996, "start": 1300.68, "end": 1305.64, "text": " Like, I haven't spent any time trying to make that work. I mean, it will work.", "tokens": [51400, 1743, 11, 286, 2378, 380, 4418, 604, 565, 1382, 281, 652, 300, 589, 13, 286, 914, 11, 309, 486, 589, 13, 51648], "temperature": 0.0, "avg_logprob": -0.26655685106913246, "compression_ratio": 1.2937062937062938, "no_speech_prob": 0.04051590338349342}, {"id": 186, "seek": 130564, "start": 1306.3600000000001, "end": 1310.44, "text": " It just introduces a conversion layer, a computation of these things.", "tokens": [50400, 467, 445, 31472, 257, 14298, 4583, 11, 257, 24903, 295, 613, 721, 13, 50604], "temperature": 0.0, "avg_logprob": -0.1632738353825417, "compression_ratio": 1.6332046332046333, "no_speech_prob": 0.01716460846364498}, {"id": 187, "seek": 130564, "start": 1310.44, "end": 1314.5200000000002, "text": " But I mean, I think it could be done. I think it could be done. And if you have that kind of", "tokens": [50604, 583, 286, 914, 11, 286, 519, 309, 727, 312, 1096, 13, 286, 519, 309, 727, 312, 1096, 13, 400, 498, 291, 362, 300, 733, 295, 50808], "temperature": 0.0, "avg_logprob": -0.1632738353825417, "compression_ratio": 1.6332046332046333, "no_speech_prob": 0.01716460846364498}, {"id": 188, "seek": 130564, "start": 1314.5200000000002, "end": 1321.5600000000002, "text": " format, but you still, you can't... you would still have to create an index for your GSD files", "tokens": [50808, 7877, 11, 457, 291, 920, 11, 291, 393, 380, 485, 291, 576, 920, 362, 281, 1884, 364, 8186, 337, 428, 460, 23969, 7098, 51160], "temperature": 0.0, "avg_logprob": -0.1632738353825417, "compression_ratio": 1.6332046332046333, "no_speech_prob": 0.01716460846364498}, {"id": 189, "seek": 130564, "start": 1321.5600000000002, "end": 1327.96, "text": " as well. And, like, I don't know if E-Star GC is better supported than CSD Nishant.", "tokens": [51160, 382, 731, 13, 400, 11, 411, 11, 286, 500, 380, 458, 498, 462, 12, 24659, 29435, 307, 1101, 8104, 813, 9460, 35, 426, 742, 394, 13, 51480], "temperature": 0.0, "avg_logprob": -0.1632738353825417, "compression_ratio": 1.6332046332046333, "no_speech_prob": 0.01716460846364498}, {"id": 190, "seek": 130564, "start": 1328.92, "end": 1334.44, "text": " It's unfortunate, like, the apartment people did the CSD D thing a long time ago,", "tokens": [51528, 467, 311, 17843, 11, 411, 11, 264, 9587, 561, 630, 264, 9460, 35, 413, 551, 257, 938, 565, 2057, 11, 51804], "temperature": 0.0, "avg_logprob": -0.1632738353825417, "compression_ratio": 1.6332046332046333, "no_speech_prob": 0.01716460846364498}, {"id": 191, "seek": 133444, "start": 1334.44, "end": 1339.4, "text": " but it took a long time until Docker merged it. But then the latest version, like,", "tokens": [50364, 457, 309, 1890, 257, 938, 565, 1826, 33772, 36427, 309, 13, 583, 550, 264, 6792, 3037, 11, 411, 11, 50612], "temperature": 0.0, "avg_logprob": -0.2502484385172526, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.009383254684507847}, {"id": 192, "seek": 133444, "start": 1339.4, "end": 1345.0, "text": " a year or so, they merged the pull request to add it. So, it is actually supported by Docker now.", "tokens": [50612, 257, 1064, 420, 370, 11, 436, 36427, 264, 2235, 5308, 281, 909, 309, 13, 407, 11, 309, 307, 767, 8104, 538, 33772, 586, 13, 50892], "temperature": 0.0, "avg_logprob": -0.2502484385172526, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.009383254684507847}, {"id": 193, "seek": 133444, "start": 1345.0, "end": 1352.44, "text": " So, the hope is that eventually we will get wider acceptance. But it isn't perfect right now.", "tokens": [50892, 407, 11, 264, 1454, 307, 300, 4728, 321, 486, 483, 11842, 20351, 13, 583, 309, 1943, 380, 2176, 558, 586, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2502484385172526, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.009383254684507847}, {"id": 194, "seek": 133444, "start": 1354.44, "end": 1355.0, "text": " Hello.", "tokens": [51364, 2425, 13, 51392], "temperature": 0.0, "avg_logprob": -0.2502484385172526, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.009383254684507847}, {"id": 195, "seek": 136444, "start": 1364.68, "end": 1367.0, "text": " So, why would you run 20 sleep commands?", "tokens": [50376, 407, 11, 983, 576, 291, 1190, 945, 2817, 16901, 30, 50492], "temperature": 0.0, "avg_logprob": -0.8646930967058454, "compression_ratio": 0.8333333333333334, "no_speech_prob": 0.6415154337882996}, {"id": 196, "seek": 136700, "start": 1367.0, "end": 1395.4, "text": " So, why would you run 20 sleep commands? Was that a question? Or...", "tokens": [50364, 407, 11, 983, 576, 291, 1190, 945, 2817, 16901, 30, 3027, 300, 257, 1168, 30, 1610, 485, 51784], "temperature": 0.0, "avg_logprob": -0.5277363459269205, "compression_ratio": 0.8933333333333333, "no_speech_prob": 0.1598469763994217}, {"id": 197, "seek": 139540, "start": 1395.64, "end": 1396.2, "text": " Yes.", "tokens": [50376, 1079, 13, 50404], "temperature": 0.0, "avg_logprob": -0.2712808236843202, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.09790422767400742}, {"id": 198, "seek": 139540, "start": 1396.68, "end": 1402.8400000000001, "text": " Yeah. I mean, obviously, you wouldn't. You would run, on your node, a hundred different containers.", "tokens": [50428, 865, 13, 286, 914, 11, 2745, 11, 291, 2759, 380, 13, 509, 576, 1190, 11, 322, 428, 9984, 11, 257, 3262, 819, 17089, 13, 50736], "temperature": 0.0, "avg_logprob": -0.2712808236843202, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.09790422767400742}, {"id": 199, "seek": 139540, "start": 1404.1200000000001, "end": 1413.72, "text": " But any containers that happens to ship the Fedora 232-2 glibc-rpm would have the same", "tokens": [50800, 583, 604, 17089, 300, 2314, 281, 5374, 264, 7772, 3252, 6673, 17, 12, 17, 1563, 897, 66, 12, 81, 14395, 576, 362, 264, 912, 51280], "temperature": 0.0, "avg_logprob": -0.2712808236843202, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.09790422767400742}, {"id": 200, "seek": 139540, "start": 1413.72, "end": 1420.2, "text": " binary for glibc. And then that would be passed to the same file. So, everything that maps", "tokens": [51280, 17434, 337, 1563, 897, 66, 13, 400, 550, 300, 576, 312, 4678, 281, 264, 912, 3991, 13, 407, 11, 1203, 300, 11317, 51604], "temperature": 0.0, "avg_logprob": -0.2712808236843202, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.09790422767400742}, {"id": 201, "seek": 142020, "start": 1420.28, "end": 1427.64, "text": " glibc would use the same file. I mean, this demo is just a demo to expose the sharing.", "tokens": [50368, 1563, 897, 66, 576, 764, 264, 912, 3991, 13, 286, 914, 11, 341, 10723, 307, 445, 257, 10723, 281, 19219, 264, 5414, 13, 50736], "temperature": 0.0, "avg_logprob": -0.2976033020019531, "compression_ratio": 1.3801652892561984, "no_speech_prob": 0.02350720576941967}, {"id": 202, "seek": 142020, "start": 1429.56, "end": 1434.68, "text": " It would be less extreme in the real case, but it would still happen.", "tokens": [50832, 467, 576, 312, 1570, 8084, 294, 264, 957, 1389, 11, 457, 309, 576, 920, 1051, 13, 51088], "temperature": 0.0, "avg_logprob": -0.2976033020019531, "compression_ratio": 1.3801652892561984, "no_speech_prob": 0.02350720576941967}, {"id": 203, "seek": 142020, "start": 1439.16, "end": 1439.56, "text": " Thank you.", "tokens": [51312, 1044, 291, 13, 51332], "temperature": 0.0, "avg_logprob": -0.2976033020019531, "compression_ratio": 1.3801652892561984, "no_speech_prob": 0.02350720576941967}, {"id": 204, "seek": 143956, "start": 1439.56, "end": 1446.6, "text": " So, I think it might be a long use case, but this object storage,", "tokens": [50364, 407, 11, 286, 519, 309, 1062, 312, 257, 938, 764, 1389, 11, 457, 341, 2657, 6725, 11, 50716], "temperature": 0.0, "avg_logprob": -0.5608726192165066, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.07378746569156647}, {"id": 205, "seek": 143956, "start": 1446.6, "end": 1452.84, "text": " there is a way to continue after leaving the closest client?", "tokens": [50716, 456, 307, 257, 636, 281, 2354, 934, 5012, 264, 13699, 6423, 30, 51028], "temperature": 0.0, "avg_logprob": -0.5608726192165066, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.07378746569156647}, {"id": 206, "seek": 143956, "start": 1455.0, "end": 1461.0, "text": " It's not currently, but we have some issues around about adding tooling around that,", "tokens": [51136, 467, 311, 406, 4362, 11, 457, 321, 362, 512, 2663, 926, 466, 5127, 46593, 926, 300, 11, 51436], "temperature": 0.0, "avg_logprob": -0.5608726192165066, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.07378746569156647}, {"id": 207, "seek": 143956, "start": 1461.0, "end": 1466.28, "text": " like an FSEKA for it and a garbage collect for it and things like that.", "tokens": [51436, 411, 364, 479, 5879, 16135, 337, 309, 293, 257, 14150, 2500, 337, 309, 293, 721, 411, 300, 13, 51700], "temperature": 0.0, "avg_logprob": -0.5608726192165066, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.07378746569156647}, {"id": 208, "seek": 146628, "start": 1467.24, "end": 1473.3999999999999, "text": " That's things. All the code is there to read back from an image file and extract a list of", "tokens": [50412, 663, 311, 721, 13, 1057, 264, 3089, 307, 456, 281, 1401, 646, 490, 364, 3256, 3991, 293, 8947, 257, 1329, 295, 50720], "temperature": 0.0, "avg_logprob": -0.2476882463620033, "compression_ratio": 1.4729064039408868, "no_speech_prob": 0.00482301926240325}, {"id": 209, "seek": 146628, "start": 1473.3999999999999, "end": 1479.32, "text": " objects in it. So, it should be... Currently, it's possible by doing some scripting to do it,", "tokens": [50720, 6565, 294, 309, 13, 407, 11, 309, 820, 312, 485, 19964, 11, 309, 311, 1944, 538, 884, 512, 5755, 278, 281, 360, 309, 11, 51016], "temperature": 0.0, "avg_logprob": -0.2476882463620033, "compression_ratio": 1.4729064039408868, "no_speech_prob": 0.00482301926240325}, {"id": 210, "seek": 146628, "start": 1479.32, "end": 1483.0, "text": " but yeah, we would like to add some tooling that automates that.", "tokens": [51016, 457, 1338, 11, 321, 576, 411, 281, 909, 512, 46593, 300, 3553, 1024, 300, 13, 51200], "temperature": 0.0, "avg_logprob": -0.2476882463620033, "compression_ratio": 1.4729064039408868, "no_speech_prob": 0.00482301926240325}, {"id": 211, "seek": 146628, "start": 1488.04, "end": 1490.76, "text": " We have five more minutes, so there's a question.", "tokens": [51452, 492, 362, 1732, 544, 2077, 11, 370, 456, 311, 257, 1168, 13, 51588], "temperature": 0.0, "avg_logprob": -0.2476882463620033, "compression_ratio": 1.4729064039408868, "no_speech_prob": 0.00482301926240325}, {"id": 212, "seek": 149628, "start": 1496.28, "end": 1518.12, "text": " Yeah, I mean, it works fine. It's into the word now and you can install it.", "tokens": [50364, 865, 11, 286, 914, 11, 309, 1985, 2489, 13, 467, 311, 666, 264, 1349, 586, 293, 291, 393, 3625, 309, 13, 51456], "temperature": 0.0, "avg_logprob": -0.475870361328125, "compression_ratio": 0.9868421052631579, "no_speech_prob": 0.02381237782537937}, {"id": 213, "seek": 151812, "start": 1518.12, "end": 1530.52, "text": " Whoa. No, I mean, it requires, for all of the features, it requires the latest kernel,", "tokens": [50364, 7521, 13, 883, 11, 286, 914, 11, 309, 7029, 11, 337, 439, 295, 264, 4122, 11, 309, 7029, 264, 6792, 28256, 11, 50984], "temperature": 0.0, "avg_logprob": -0.2374161148071289, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.009998101741075516}, {"id": 214, "seek": 151812, "start": 1531.9599999999998, "end": 1537.6399999999999, "text": " but if you have six, five or later, then it just works on any system. It's just a", "tokens": [51056, 457, 498, 291, 362, 2309, 11, 1732, 420, 1780, 11, 550, 309, 445, 1985, 322, 604, 1185, 13, 467, 311, 445, 257, 51340], "temperature": 0.0, "avg_logprob": -0.2374161148071289, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.009998101741075516}, {"id": 215, "seek": 153764, "start": 1537.64, "end": 1543.48, "text": " user space tool. It doesn't need any special anything.", "tokens": [50364, 4195, 1901, 2290, 13, 467, 1177, 380, 643, 604, 2121, 1340, 13, 50656], "temperature": 0.0, "avg_logprob": -0.3480411767959595, "compression_ratio": 0.9310344827586207, "no_speech_prob": 0.07174140214920044}, {"id": 216, "seek": 154348, "start": 1543.48, "end": 1561.32, "text": " Okay.", "tokens": [50364, 1033, 13, 51256], "temperature": 0.6, "avg_logprob": -0.8441015590320934, "compression_ratio": 0.7142857142857143, "no_speech_prob": 0.19320906698703766}, {"id": 217, "seek": 154348, "start": 1565.64, "end": 1573.32, "text": " It just works.", "tokens": [51472, 467, 445, 1985, 13, 51856], "temperature": 0.6, "avg_logprob": -0.8441015590320934, "compression_ratio": 0.7142857142857143, "no_speech_prob": 0.19320906698703766}, {"id": 218, "seek": 157348, "start": 1573.48, "end": 1575.48, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.6504693627357483, "compression_ratio": 1.032258064516129, "no_speech_prob": 0.06906116008758545}, {"id": 219, "seek": 157348, "start": 1575.48, "end": 1577.48, "text": " Thank you.", "tokens": [50464, 1044, 291, 13, 50564], "temperature": 0.0, "avg_logprob": -0.6504693627357483, "compression_ratio": 1.032258064516129, "no_speech_prob": 0.06906116008758545}, {"id": 220, "seek": 157348, "start": 1577.48, "end": 1579.48, "text": " All right.", "tokens": [50564, 1057, 558, 13, 50664], "temperature": 0.0, "avg_logprob": -0.6504693627357483, "compression_ratio": 1.032258064516129, "no_speech_prob": 0.06906116008758545}], "language": "en"}