{"text": " Hello, everyone. Welcome or welcome back to the Postgres Day Room. We have a great speaker again. Umar is going to talk about clustering in Postgres. Thank you. Hello and good afternoon, everyone. Thank you for being here and not going out for lunch instead. So we're going to be talking about clustering in Postgres, and we're going to be walking through an abstracted level concept as to why clustering is required, the various different architectures that are typically used in production to make your database reliable. And the challenges that are associated with the concept. A little bit of an introduction about myself. The name is Umar Shahid. I came all the way from Islamabad, Pakistan to talk to you about clustering. I've been working in the Postgres space for more than 20 years. And I am currently running a company, the name of Stormatics, which was founded about a year ago. So working on a startup focused on professional services. And yeah, my past has been associated with various other Postgres organizations, including EDB, Second Quadrant, OpenSTG and Percona. Two of these companies do not exist anymore. OpenSTG was acquired by Amazon and Second Quadrant was acquired by EDB. So Stormatics is focused on providing professional services for Postgres. We don't want to talk about that a whole lot. So, on to the topic. Now, in order to understand why clustering is required, it's important to understand what high availability is and why you need a highly available database. Now, you want your database to remain operational, even in the face of failure of hardware or network or your application. You want to minimize the downtime so that the users of your application do not experience any interruption in their experience. And it's absolutely essential for mission critical applications that need to be running 24 by 7. Now, if you go back about maybe 10 odd years, it was okay to, let's say, have your credit card declined or just not working on a machine because the network was not available or somehow the connection was broken or there was some problem with the communication. In this day and age, what you expect to be able to do is just to tap your phone and instantaneously get the transaction through. And you never expect it to be dropped or an error to pop up unless, of course, you run out of credit. That's a different story. But it just works. Everything just works. And the only reason everything just works is because the entire infrastructure is highly available. It's always available. And that availability is measured in 9s. And I'm going to explain in just a second what those 9s are. Now, we're going to start with a very basic and that's 90% availability. When I say 90%, it sounds like a lot, but that's one line of availability. And if you span that over the course of an entire year, that means that the potential of the database to be down while maintaining 90% of availability is 36.5 days. So in a given year, if your database is 90% available, it's going to be down for 36.5 days. Anybody find that acceptable? I really hope not. Now, you go to two 9s of availability. That's 99% and that's a better number. That's equal in order of magnitude higher in terms of availability. And the downtime goes down from 36 days to 3.6 days. Now, again, in a given year, if your database is 99% available, it is going to be down for almost 3.5 days. And again, for most mission critical applications, that is not acceptable. 99.9% is 3.9s of availability with an allowance of 8.7 hours of downtime. You go off to 4.9s, 99.99, that's 52.6 minutes per year. And 5.9s of availability translate into 5.26 minutes per year. So just to make sure that we understand what availability is and how it is calculated. Now, the database runs on the cloud, so you don't care, right? How many people agree with this? Oh, I'm so glad that nobody agrees with that. We've got a bunch of experts over here. Yeah, so just because your database is on the cloud does not mean that it is always available. And here's, I just copied and pasted the service level agreement that Amazon has up on their website for highly available RDF clutches that are in multi-availability zone configuration. So you have the highest form of availability that you can get with RDS, right? They talk about MySQL, MariaDB, and Oracle, and Postgres, and they specifically say that it's only, this SLA, is only for multi-availability zone configurations, and they're going to make commercially reasonable efforts to make this available, right? So if they're losing money, they're not going to do it. And what they promise is three and a half nines. Not four, not five, three and a half nines, 99.95%. And if they're unable to give you those three and a half nines, what they say is that affected customers will be eligible to receive a service credit, i.e. the service that had gone down on you, you get more of it. So three and a half nines translate into 4.38 hours of downtime per year. So if you're running an RDF cluster that is spread over multiple availability zones, you can expect your database to be down for almost four and a half hours every year. Now, what do you do if you want better availability? That's one of the reasons why you have clustering. And I'm going to run through now a few basic architectures of how clustering works with Postgres. This is probably true generally for databases as well, but we are in the Postgres Dev Room, so we are going to be talking about Postgres. Now, in this very simple basic cluster, you've got one primary database and two standby nodes. The way this cluster is structured is that the internals of the architecture are invisible to the application. The application simply talks to the cluster, which of the nodes it's talking to doesn't care. It reads and writes to the cluster, and the two standbys are essentially read replicas, so there's redundancy in data in each of these replicas. And in case the primary overhead goes down for whatever reason, there's a hardware error, there's a software error, there's a network communication error, whatever it is, one of the standbys can take over and the whole cluster will just continue working. And diagrammatically, just to explain how that works, just so that we're able to visualize the whole sequence, that's the sequence of events. If the primary goes down, step one, the standby one, or well, it could be the standby two as well, but just for illustration purposes, the standby one takes over as the primary. The previous primary is retired from the cluster. A new replication path is set up from standby one to standby two. The standby one is labeled as a primary. Standby two becomes the prime replica of this new primary, and a new node is spun up, or the old primary is recovered and included in part of the cluster. So this is, you know, at a very abstracted and high level, diagrammatically, how an auto-failover procedure works. Now, there are other forms or other variations of clusters that you can set up with Postgres, with various different intents. This illustration talks about a cluster that has load balancing, and what load balancing does is that it focuses the right processes to one node, which is the primary. Those rights, that data, is replicated over to the two standbys, and the application can actually read from one or both of the standbys. The idea over here is not to allow the primary node to get hogged by read operations. It can focus on the rights, and the read can be served from the two standbys. This is load balancing. And again, you know, the auto-failover, etc., goes on as previously discussed. Same cluster, now with a backup process in place for disaster recovery purposes. Now, notice that the backup is taken outside of the cluster. It's an off-site backup, and for good purpose, if the entire cluster goes down for some reason, if, you know, there's an earthquake, there's a fire, a whole, you know, data center goes down, you don't want your backups to also go down with it. So the backup is taken at a different location. These backups are taken with requirements in mind that are mostly fall under the two concepts of RTO and RPO. Both of these stand for recovery time objective and recovery point objective. Anybody over here who is hearing these two terms for the very first time? RTO and RPO? Okay, okay, so I'll, you know, just take a moment to explain this a little bit. So recovery time objective means that in case your cluster crashes or goes down for whatever reason, how much time is acceptable for you to be able to recover the entire database, right? Depending on the criticality of your application and the criticality of your cluster, that time could be very, very small, or you could allow, you know, a few hours, a few minutes, maybe a couple of days for the recovery time. Recovery point objective is how much data can you afford to lose in case the cluster crashes, right? From what point is it acceptable to be able to recover the cluster? Now, again, for critical clusters, the RPO might be very, very close to zero, i.e. you don't want to lose any data, but of course there are implications to it. There are efficiency in space and financial implications to trying to achieve both RPO and RPO that are close to zero. So you keep that in mind as you design your architecture and your disaster recovery strategy. Point in time recovery is something that is kind of aligned with that, you know, it's about what point you can recover your database from. You want to go back in time and recover your database to that point in time, that's the PITR concept. Also, it's a footnote over here, but just, you know, a piece of advice, it is extremely important to make sure that you're periodically testing your backups, because if the restore does not work, the backup is absolutely useless. And you will only discover that in the case of a disaster, and then, well, that's a double disaster. Another form of clusters that you can have is a multi-node cluster with an active-active configuration. In the previous configuration, we had a single active node with two stand-byes. In this configuration, you've got multiple actives where your application can both read and write on all of the nodes in the cluster. Now, this is a little tricky, and the topic also tends to be a little thorny when you're discussing this with enthusiasts. And the key point over here is that you have to have your conflict resolution at the application level. The database, at least Postgres, the way the open source Postgres works, does not have the capability to resolve the conflicts for you. So in case the application writes on active one and does an update of the same data on active two, there's a conflict as active one and active two try to replicate data to each other, that conflict where the database will not be able to resolve that conflict. It's the application that needs to be active-active aware. This is asynchronous replication between nodes, and this architecture is shared everything, which means that all of the data is written to all of the nodes. The data is replicated to all of the nodes. And then, you've got another cluster, which is multi-node with data sharding and horizontal scaling. This architecture is shared nothing, which means that no data is shared between the nodes across which the data is being sharded. So data is distributed and you can scale this cluster out horizontally, as much as you, well theoretically at least as much as you want to. There is a requirement of having a coordinator node up there, which decides which node to route the query to, which node to route the data to. And you could set up automatic sharding. You could also have the read and write operation automatically directed to the relevant nodes. And then, last of the architectures that I'm going to discuss in this conversation is globally distributed clusters. Now, theoretically speaking, the last two clusters that I described with active-active configurations and the sharding, you could have them globally distributed as well. But I have a separate slide for this, primarily because of one reason, and that is the specific requirement that different regulations can have about geofencing of your data. So many different jurisdictions of the world are increasingly enforcing that their resident's data does not get outside of the country that they reside in. And you want to make sure that you've got local data being stored locally and read locally. And with geographically distributed clusters and with the right configurations in place, you can implement that geofencing. That, of course, also has a side impact of better performance because you're reading and writing locally instead of somewhere that's 10,000 miles away. Now, talking about replication, primarily dividing it into two technologies, synchronous and asynchronous replication. I was just trying to explain over here a little bit about the differences between the two. Anyone over here who has not come across the concepts of synchronous and asynchronous replication have no idea what these two terms mean. Everybody already knows. I could have just skipped this slide. That's fine. So very quickly, walking through some of these points, in synchronous replication, data is transferred immediately. It is not committed till all nodes in the cluster acknowledge that they have the data and they can commit it. In case of asynchronous, the primary does not wait for that acknowledgement, that handshake. It will just commit the data locally and will assume that the replicas will commit that data in due time. What it does is with synchronous replication, there is a performance hit that you get because you need to wait for all of the nodes to agree that the data has been committed. And in asynchronous, you achieve much better efficiency. But also, there is that chance of inconsistency of data if you have an asynchronous replication set up in your cluster. It's faster, it's more scalable, but there is that little bit of data inconsistency problem. So in case it is absolutely critical for your application to have all of the data, all this consistent in all nodes of the cluster, synchronous replication is the way to go and you will need to take that performance hit. Any questions so far before we move on? Yes? In asynchronous replication, you are saying data may be inconsistent. It doesn't mean that some data may be lost in one of the replicas, so if you have to recover your data, some fun may be missing. And then how do you find that in the case of this? Okay, so the question is that in case of asynchronous replication, if I say over here that the data may be inconsistent, does that mean the data gets lost and if it does get lost, how do we recover it? That's the question, right? Okay, thank you, very good. So the idea over here is that as the data is being shipped from the primary to the replica, there is a certain time lag. It could be in microseconds, but there is a certain time lag where the data exists in the primary and does not exist in the replica. And in that fraction of a second, if there is a query that runs across both of those nodes, it will return different datasets. That is a risk that you take. Now, in case during that lag, during that time, the primary goes down, there are chances that the replica will never get that data and hence that data can be considered lost. Now, there are different ways to protect yourself against that kind of an eventuality. That includes being able to replay the right head logs. That includes just making sure that any data that is written is actually sent across. And so even if the primary node goes down or it crashes, the data is still in transit and the standby is going to eventually commit it. But yes, there is a slight risk there of data loss. In case if you don't have this kind of disaster happening in the meantime, is there still a possibility that like, because like you're saying, the commits are not waiting. So is there a possibility that there could be an incident that will fail or something goes wrong and like one commit just is missing? If nothing goes wrong, is there a guarantee that there is? So at the database level, because Postgres is compliant with Acid, it is going to be consistent. Within the cluster, however, there is a lag. We're going to discuss the application lag in just a little bit. It's one of the challenges in setting up clusters like this. But you're right. When we talked about the load balanced cluster in just a couple of slides ago, one of the things to keep in mind when you have a load balanced cluster and you're reading from the replica instead of the primary node is the fact that there is a lag between the primary and the replica. And when you are reading data from the replica, there's a possibility that some of the data has not yet been written. Does that help? Yes. What's the maximum network latency? I'm sorry, I can barely hear you. What's the maximum network latency to build up the cluster for synchronous and asynchronous? So the question is what's the maximum network latency that you can use to build up the replica? That's the question. I think that's a fairly open-ended question and I'm afraid I may not be able to give you a very precise answer. There's a lot of variables involved in designing that kind of an architecture. Network latency, and again, this is something that we're going to be discussing in a moment, depends on a lot of factors including, well, actually, it depends on a lot of factors and not all of those factors are directly related to your database. So it is related to your hardware, it is related to the network connectivity, it is related to the medium of connections that you've established between the two nodes, how far the two nodes are, you know, spread. So there's a lot of variables involved. And as you design the cluster, you need to be, you need to recognize those variables and you need to design the cluster based on what you have and allow for, and you should have allowances for some of those, some of that lag and some of those nuances of the network that you have. All right. Okay, let's move forward. Actually, this has absolutely nothing to do with my presentation. I just put it up there because, well, I don't want it to be too dry, right? Okay, so, yeah, now we come to the part of the challenges that you face in clustering, as you set up clusters of Postgres, and there are four, and this is in no way a comprehensive list of challenges. And as we go into each of these challenges, I will also not be able to cover all aspects of these four points, but this is just to give you an overview of the kind of variables and the kinds of, you know, points that a DBA would typically need to keep in mind as they go about designing a cluster and make sure that they are highly available. And the first point that we're going to discuss is split brain. Now, anybody over here who, again, and I'm going to ask that question in a different way, has never heard of split brain, does not know what that is. Okay, a few hands went up. Good. So the next few slides are not wasted. Okay, so what is a split brain? It's a situation where two or more nodes in a cluster start to think that they are the primary. For whatever reason, there are different reasons for that. There could be different reasons for that, but for whatever reason, two or more nodes, if they start to think that they are the primary, they will lead to a situation that can cause data inconsistency, inconsistency that can cause data loss. And the scenario that is called split brain. And it could be caused by connectivity problems. It could be caused by latency. It could be caused by a server locking up because of, I don't know, a long running query. There are many different things that could cause it, but whatever causes it, it's a difficult situation to be in and it's a difficult situation to resolve. Now, a few ways to prevent a split brain scenario. So the first one is to use a reliable cluster manager. Doing it manually, writing scripts, et cetera, you know, it will still leave a few holes that are, that can cause the problem to recur. There are cluster managers, there are tools out there that can help you. We'll talk about them a little later in this presentation as well. And what they do is that they implement algorithms and heart rate mechanisms to monitor and automate the whole process of cluster management. And because these tools are designed to make the decisions for auto failover, they will help you prevent a split brain situation. Another thing to keep in mind is do what's called quorum based decision making. And essentially what that means is that a majority of the nodes need to agree which node is the primary. This also means that there's a requirement that an odd number of nodes, a cluster should be made off an odd number of nodes instead of even. Because if you want to do, if you want to rely on some voting on some quorum based process, you need to have an odd number of nodes that could vote in. Let's say in a particular case, you've got a primary that is operating as per what it thinks is normal. And one of the stand-byes loses contact with that primary and begins to think that it needs to take over as the primary. Now you've got the original primary and one node both acting as primary. You need to have a tiebreaker in place that will say that, hey, stand by one, you're wrong. The primary is still working. You just lost connection with it. So you need to, you know, stand down. So that's what the, what quorum based decision making is. Now in case there's some, and this is something that we, you know, sometimes work with our customers at times that are requirements from the customer that says that, well, you know, we can only have two nodes. We cannot have more than that. Or we can only have an even number of nodes, not an odd number of nodes for whatever reason. In that case, we implement a witness node, which does not hold data, but can be a voter in the quorum process in order to act as a tiebreaker. So that's what the witness server does. And, you know, you want to make sure in order to prevent a split print scenario, you want to make sure that your network is reliable. And it's, you have redundancy in the network. So if one path goes down for whatever reason, you, the traffic can take a different path. And you want to minimize the risk of partitions in the network. And you want to make sure that you've got reliable connectivity between data centers if your nodes happen to be split across data centers. And then there are a few miscellaneous housekeeping items that make sure that you've got a good monitoring and alerting mechanism in place. So in case, you know, your cluster is approaching a situation where the resources are running out or the network is getting congested or the CPU is being maxed out or whatever. You know, you get alerted in time so that you can get, you can act and take preventive measures. Regularly test your cluster. You can simulate situations where, you know, connectivity is lost to test how your cluster behaves in case of that. And you need to have very precise and clear documentation because if, let's say, I'm the one who's implementing this cluster and I take a few decisions as to what thresholds to set and what configurations to, to, to program into my cluster. A person coming in, let's say two years later or three years later may not know what the decision making was and why it was done a certain way. We want to make sure that you have very clear and precise documentation that is coupled with training with new resources that are coming on and are helping maintain and manage your cluster. Now, in case a split frame does occur, what are, you know, the recommended best practices to recover from it? So you get into a situation where now two nodes are thinking that they are the primary and they're ready to take, you know, data in and they want to establish, establish themselves as the publishers of the data and expect standby nodes to become the subscribers. What do you do? So the first thing, of course, is to actually identify that that has, that has happened. You won't be able to do anything if you don't know that the split frame has occurred. So in order to identify that kind of a situation, again, monitoring and alerting are crucial elements to it. You need to have a good monitoring plan in place. Stop all traffic from your application and stop all replication between the nodes. You know, this, this, this will mean that your application goes down, but your application stopping is a lot better than your application feeding in or reading the wrong data. So just stop the application. Now, this is all manual. I am not aware of a tool that will do this in an entirely automated fashion, but this is something that a DBA and an expert will need to do. So determine which node is the most up to date. Two nodes are competing to be the primary. It's now you who decide which one is the actual primary. Or maybe, you know, you're unable to decide that because there are some transactions that got committed on one primary and some transactions got committed to the second primary. What do you do now? You want to make sure that you, that you replay the transactions that are missing and make one primary the de facto leader of the, of the cluster. You want to make sure that the nodes are isolated from each other till the, till you've rectified the situation. And then you reapply either through backups or through the right-ahead logs and, you know, just, just reapply the transactions that are missing on the, on the primary that you've decided and then reconfigure configuration. So let's say, you know, you might decide that the standby who decided to take over actually has more transactions. So you make it the primary, make it the new primary. And now you need to reconfigure applications such that the other nodes are actually taking data or replicating data from this new primary. You had a question? Yes. You did mention twice already, right-ahead log. I think it would be helpful if you could also decipher why is it called right-ahead log, what it is. Okay. Thank you for asking that question. I will run under the assumption that, you know, it's something that everybody would know. So thank you. So the question is, I refer to right-ahead logs and what are they? So the way Postgres works is that every transaction that is written to the database goes into what's called wall buffers, wall, WAL wall that stands for right-ahead logs. It goes into buffers and then those buffers write to the logs on disk. And, you know, it's those logs that are getting committed to the database and the incremental transactions as they come in, the right-ahead logs keep track of those incremental transactions. And it's those logs that are used for replication, those logs are actually transferred to the replica, to the standby, and they are replayed on the replica in order to get the replica into the same state as the primary. So these are files that are on disk that contain all of the transactional data that the database is handling. Does that help? Yeah. Thank you for pointing it out. Now, once you confirm the integrity of your cluster is that, you know, is when you can start re-enabling the traffic coming into the cluster. But before you allow traffic coming in, you know, it might be a good idea to just run that cluster in read-only mode for a bit so that you can cross-check and double-check and re-verify that everything is working. And then you're working to your expectation before you allow write operations. And then, you know, make sure that you run a retrospective because a split-brain scenario is scary. It's difficult to recover from. You don't want it happening every other day. Right? Yes. You do not just have the fancy mechanism that fills up a secondary, a second primary, and then have it failover. I'm not sure I understand what... So, you're referring to shoot the node in the head, right? I think... I'm not sure if I can shoot the node in the head. No, I think it's... Oh, offending node in the head. Yes, that's what it is. So, yeah, there is a mechanism. I haven't talked about it in these slides, but in case there's an offending node that, well, you can't really rectify you shoot it in the head. Right? You just kill it and then you rebuild a new standby. So, yeah, that's what you're referring to, right? Or, what is something else? Why would you need this complicated rectification if you could just immediately stop the brain and then pay for it? So, because before you do this, you don't know which of the primaries is actually farther along in the right-to-head logs, or if there are transactions that are in one and not in the other. Right? So, you want to establish that fact first and then, you know, recover from there. So, this is in order to just make sure that you don't lose transactions. Right? Okay. So, yeah, running a retrospective, extremely important. Make sure that it doesn't happen again. We're going to go through some of the other challenges. I think split-brain is the most important one, but the other ones, you know, they're kind of like a variation that can cause split-brain, but we're going to go through these. Network latency is one of the things that we, you know, a question that was asked a little while earlier. So, what network latency means is that it's the time delay between when data starts off from one location and reaches the destination. So, any delay that it encounters going from one place to the other is called latency. And the challenge it causes is that delayed replication could possibly cause data losses because, you know, as we discussed, in case of disaster, the primary is going to shut down and there's possible data loss in there. And also, more lag or more latency can lead one of the stand-byes to believe that the primary has gone down. Right? And, you know, they can try, that can trigger a false failover. Causes of latency. The network could be getting choked. Low-quality network hardware. The hardware, it's easy to get wrong, especially when it's costly hardware that we're dealing with. The distance between the two nodes, at best, data travels at the speed of light and it takes a finite amount of time to go from one place to the other. And the longer the distance is between the two nodes, the longer it takes for data to replicate from one to the other. If you have a virtualization setup, it can cause overheads. There can be bandwidth limitations. And security policies can force inspection of all of the data packets causing further delay. And transmission medium will also cause some latency. For example, fiber optics are going to be much faster than something that's based on copper. Right? That's plain physics. And there are ways that you can prevent false positive resulting from latency. You want to make sure that all of your monitoring and alerting and mechanism that you set up during the design of your cluster are fine-tuned such that you adjust the heartbeat, you adjust the time-out settings, and you make sure that your cluster does not read latency as a trigger for failover. Some of the best practices include making sure that you're testing your cluster periodically. There are different workloads that you would want to run on your cluster to simulate different environments. So you want to know what kind of time pressures your cluster is going to encounter with different kinds of workloads applied to it and want to configure and tune your time-out and heartbeat accordingly. And of course, documentation and training are ever important. The third challenge is about false alarms. So we talked about network latency as one of the causes of causing a false alarm. And a false alarm essentially means that an issue is reported when an issue does not actually exist. And again, when an issue is reported, it can trigger a failover when a failover is not really needed. And a failover is an expensive operation. You don't want to do it needlessly. It impacts performance. And false alarms, of course, network issues are there. The configuration and the way your cluster has been set up could cause false alarms if your thresholds are too low. You might want your failover to happen instantaneously the moment the cluster detects that the primary has gone down. But the primary might not have gone down. It might have been just running a long, running query and is unresponsive. So you want to make sure that your configurations are correct. Resource constraints, if the load is too high, the network traffic is too high, the CPU is maxed out. Somebody had planned a schedule maintenance and not told you. Something as simple as that could cause a false alarm where you think, well, okay, the network has gone down. We need to do something about it. You don't want to do that. And some of the long running queries can create exclusive logs from the database which can make the database appear to be nonresponsive. And the automated systems will not double and triple check going into the logs and going into the stack tables to figure out which of the queries are running and whether the database is locked or it's just simply unresponsive. And they can cause a false alarm. And prevention techniques include making sure that your thresholds are optimized, testing, and making sure that you run simulations is the way to go in order to optimize those thresholds. You also want to make sure that your software and all components that are part of the cluster are up to date. You want the latest versions of your software. You want them to be bug free. And yeah, monitoring and alerting, comprehensive strategies, best practices, documenting, training your stuff. The last of the challenges to be discussed is data inconsistency. And what this means is that you call it data inconsistency. It doesn't happen within the database because as we discussed that Postgres is asset compliant. So the database will not be inconsistent, but within a cluster there is a chance of inconsistency if the nodes are not in sync with each other. And the challenge is, well, if you run the same query across different nodes of the cluster, there's a possibility that you get different results. You don't want that. The causes, one of them is replication lag. We've been talking about this over and over. In case data is written into the primary and is yet to be written to the replica and is being delayed for whatever reason, you will get inconsistent data between the two nodes. Network latency and high workloads could be a cause. And this can cause loss of data in case during that time a failover is triggered. That's one of the risks with this. Split brain can cause the data inconsistency as well because, well, if two nodes think they are the primary, they are going to try and take writing of the data or they are going to establish themselves as the publishers of the data and they are going to have different pieces of data, you don't want that to happen either. And any configuration that is not optimized for the functioning of your cluster, incorrect configuration, can cause inconsistency of data. How do you prevent it? You manage your asynchronous replication very closely. And now notice that I did not say synchronous replication over here. I said that you just use synchronous replication primarily because it has a huge impact on performance. And to do the extent possible, our advice typically is to avoid synchronous replication. And not only does it have an impact on performance, one of the downsides is that in case the primary is working and the replica goes down for whatever reason, the primary is going to continue waiting for an eclotage from the replica and the replica has essentially taken the entire cluster down with it. So there are very few challenges involved with synchronous replication. Regularly check transaction IDs across the cluster, monitor replication conflicts, there are statistics and tables that are and views that are available within Postgres to allow you to monitor this replication. You can monitor them and then detect those conflicts and resolve them promptly. And make sure that you have regular maintenance done on your database. Vacuum, we had a talk just a little while back that talked about why table is bloated, why dead tuples are there and why vacuum is needed in order to remove those dead tuples. And we want to also make sure that analyzes run frequently on your tables so that it can optimize query planning and you want to prevent a transaction ID wraparound which is probably something that is a whole talk in itself. We won't go into that during this conversation. And yes, this all sounds really, really hard. It is next to impossible for a single human being to be able to think about all of these variables and actually correctly configure clusters and be mindful of everything involved over here, which is why we've got tooling around it that does not automate the entire thing, but it takes care of the critical aspects of your cluster. I mentioned three tools over here. There are other tools available as well. All three are open source with reasonable license for usage. Repmanager at the top is licensed as GPL. It provides automatic failover and it can manage and monitor the application for you. PG pool has a license that's very similar to BST and MIT, which means it's a very liberal license. And it acts as a middleware between Postgres and client applications and it provides functionality much beyond simply clustering, so it will give you connection pooling and load balancing and caching as well, along with automatic failover. Petroni is a name that just keeps coming up. It's wildly popular to set up clusters with Postgres. The license is MIT and it provides a template for highly available Postgres clusters with the smallest cluster being three node. And it can help you with cluster management, auto failover and configuration management. And that brings us to the end of our presentation. Two minutes to go. That's the QR code for my LinkedIn. Thank you. Thank you. We actually have a question. The gentleman earlier alluded to network fence and Kubernetes. You'll have to be louder. The gentleman earlier referred to network fence and should denote, which is only possible because of PVCs, right? Like persistent volumes, they're saying Kubernetes, right? But the kicker is most often than not, the volumes themselves, the PVCs, are the cause of those transient issues. What if we don't want to use persistent volumes? What if we want to use ephemeral NVMe? Is it currently possible with Postgres to manage a cluster without using persistent storage and defaulting to shoot a node? So the thing is that when you're working with... They might have gone off, but let me try and answer you loudly over here. So the thing is that when you're working with databases, you want persistent storage, right? A Kubernetes kind of cluster is designed for stateless applications, at least on the ground up, but for databases, you want persistent storage, right? In case that you're working with a scenario that is just completely... That does not use persistent storage, those are cases where I don't have expertise in. So I won't be able to definitively tell you how to go about handling it. So Matix, those are like EC2, please, I imagine.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Hello, everyone.", "tokens": [50364, 2425, 11, 1518, 13, 50714], "temperature": 0.0, "avg_logprob": -0.45269478691948783, "compression_ratio": 1.2735042735042734, "no_speech_prob": 0.6365289092063904}, {"id": 1, "seek": 0, "start": 7.0, "end": 12.0, "text": " Welcome or welcome back to the Postgres Day Room.", "tokens": [50714, 4027, 420, 2928, 646, 281, 264, 10223, 45189, 5226, 19190, 13, 50964], "temperature": 0.0, "avg_logprob": -0.45269478691948783, "compression_ratio": 1.2735042735042734, "no_speech_prob": 0.6365289092063904}, {"id": 2, "seek": 0, "start": 12.0, "end": 21.0, "text": " We have a great speaker again.", "tokens": [50964, 492, 362, 257, 869, 8145, 797, 13, 51414], "temperature": 0.0, "avg_logprob": -0.45269478691948783, "compression_ratio": 1.2735042735042734, "no_speech_prob": 0.6365289092063904}, {"id": 3, "seek": 0, "start": 21.0, "end": 24.0, "text": " Umar is going to talk about clustering in Postgres.", "tokens": [51414, 3301, 289, 307, 516, 281, 751, 466, 596, 48673, 294, 10223, 45189, 13, 51564], "temperature": 0.0, "avg_logprob": -0.45269478691948783, "compression_ratio": 1.2735042735042734, "no_speech_prob": 0.6365289092063904}, {"id": 4, "seek": 2400, "start": 24.0, "end": 31.0, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1514729300698081, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.1469850093126297}, {"id": 5, "seek": 2400, "start": 31.0, "end": 33.0, "text": " Hello and good afternoon, everyone.", "tokens": [50714, 2425, 293, 665, 6499, 11, 1518, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1514729300698081, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.1469850093126297}, {"id": 6, "seek": 2400, "start": 33.0, "end": 37.0, "text": " Thank you for being here and not going out for lunch instead.", "tokens": [50814, 1044, 291, 337, 885, 510, 293, 406, 516, 484, 337, 6349, 2602, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1514729300698081, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.1469850093126297}, {"id": 7, "seek": 2400, "start": 37.0, "end": 41.0, "text": " So we're going to be talking about clustering in Postgres,", "tokens": [51014, 407, 321, 434, 516, 281, 312, 1417, 466, 596, 48673, 294, 10223, 45189, 11, 51214], "temperature": 0.0, "avg_logprob": -0.1514729300698081, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.1469850093126297}, {"id": 8, "seek": 2400, "start": 41.0, "end": 45.0, "text": " and we're going to be walking through an abstracted level concept", "tokens": [51214, 293, 321, 434, 516, 281, 312, 4494, 807, 364, 12649, 292, 1496, 3410, 51414], "temperature": 0.0, "avg_logprob": -0.1514729300698081, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.1469850093126297}, {"id": 9, "seek": 2400, "start": 45.0, "end": 49.0, "text": " as to why clustering is required, the various different architectures", "tokens": [51414, 382, 281, 983, 596, 48673, 307, 4739, 11, 264, 3683, 819, 6331, 1303, 51614], "temperature": 0.0, "avg_logprob": -0.1514729300698081, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.1469850093126297}, {"id": 10, "seek": 2400, "start": 49.0, "end": 53.0, "text": " that are typically used in production to make your database reliable.", "tokens": [51614, 300, 366, 5850, 1143, 294, 4265, 281, 652, 428, 8149, 12924, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1514729300698081, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.1469850093126297}, {"id": 11, "seek": 5300, "start": 53.0, "end": 57.0, "text": " And the challenges that are associated with the concept.", "tokens": [50364, 400, 264, 4759, 300, 366, 6615, 365, 264, 3410, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09556280964552755, "compression_ratio": 1.493877551020408, "no_speech_prob": 0.049592193216085434}, {"id": 12, "seek": 5300, "start": 57.0, "end": 61.0, "text": " A little bit of an introduction about myself.", "tokens": [50564, 316, 707, 857, 295, 364, 9339, 466, 2059, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09556280964552755, "compression_ratio": 1.493877551020408, "no_speech_prob": 0.049592193216085434}, {"id": 13, "seek": 5300, "start": 61.0, "end": 63.0, "text": " The name is Umar Shahid.", "tokens": [50764, 440, 1315, 307, 3301, 289, 21159, 327, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09556280964552755, "compression_ratio": 1.493877551020408, "no_speech_prob": 0.049592193216085434}, {"id": 14, "seek": 5300, "start": 63.0, "end": 68.0, "text": " I came all the way from Islamabad, Pakistan to talk to you about clustering.", "tokens": [50864, 286, 1361, 439, 264, 636, 490, 8571, 32776, 11, 15985, 281, 751, 281, 291, 466, 596, 48673, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09556280964552755, "compression_ratio": 1.493877551020408, "no_speech_prob": 0.049592193216085434}, {"id": 15, "seek": 5300, "start": 68.0, "end": 72.0, "text": " I've been working in the Postgres space for more than 20 years.", "tokens": [51114, 286, 600, 668, 1364, 294, 264, 10223, 45189, 1901, 337, 544, 813, 945, 924, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09556280964552755, "compression_ratio": 1.493877551020408, "no_speech_prob": 0.049592193216085434}, {"id": 16, "seek": 5300, "start": 72.0, "end": 79.0, "text": " And I am currently running a company, the name of Stormatics,", "tokens": [51314, 400, 286, 669, 4362, 2614, 257, 2237, 11, 264, 1315, 295, 745, 687, 30292, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09556280964552755, "compression_ratio": 1.493877551020408, "no_speech_prob": 0.049592193216085434}, {"id": 17, "seek": 5300, "start": 79.0, "end": 81.0, "text": " which was founded about a year ago.", "tokens": [51664, 597, 390, 13234, 466, 257, 1064, 2057, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09556280964552755, "compression_ratio": 1.493877551020408, "no_speech_prob": 0.049592193216085434}, {"id": 18, "seek": 8100, "start": 81.0, "end": 84.0, "text": " So working on a startup focused on professional services.", "tokens": [50364, 407, 1364, 322, 257, 18578, 5178, 322, 4843, 3328, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10537619109547466, "compression_ratio": 1.6589147286821706, "no_speech_prob": 0.06953069567680359}, {"id": 19, "seek": 8100, "start": 84.0, "end": 91.0, "text": " And yeah, my past has been associated with various other Postgres organizations,", "tokens": [50514, 400, 1338, 11, 452, 1791, 575, 668, 6615, 365, 3683, 661, 10223, 45189, 6150, 11, 50864], "temperature": 0.0, "avg_logprob": -0.10537619109547466, "compression_ratio": 1.6589147286821706, "no_speech_prob": 0.06953069567680359}, {"id": 20, "seek": 8100, "start": 91.0, "end": 96.0, "text": " including EDB, Second Quadrant, OpenSTG and Percona.", "tokens": [50864, 3009, 18050, 33, 11, 5736, 29619, 7541, 11, 7238, 6840, 38, 293, 3026, 1671, 64, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10537619109547466, "compression_ratio": 1.6589147286821706, "no_speech_prob": 0.06953069567680359}, {"id": 21, "seek": 8100, "start": 96.0, "end": 98.0, "text": " Two of these companies do not exist anymore.", "tokens": [51114, 4453, 295, 613, 3431, 360, 406, 2514, 3602, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10537619109547466, "compression_ratio": 1.6589147286821706, "no_speech_prob": 0.06953069567680359}, {"id": 22, "seek": 8100, "start": 98.0, "end": 102.0, "text": " OpenSTG was acquired by Amazon and Second Quadrant was acquired by EDB.", "tokens": [51214, 7238, 6840, 38, 390, 17554, 538, 6795, 293, 5736, 29619, 7541, 390, 17554, 538, 18050, 33, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10537619109547466, "compression_ratio": 1.6589147286821706, "no_speech_prob": 0.06953069567680359}, {"id": 23, "seek": 8100, "start": 102.0, "end": 107.0, "text": " So Stormatics is focused on providing professional services for Postgres.", "tokens": [51414, 407, 745, 687, 30292, 307, 5178, 322, 6530, 4843, 3328, 337, 10223, 45189, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10537619109547466, "compression_ratio": 1.6589147286821706, "no_speech_prob": 0.06953069567680359}, {"id": 24, "seek": 8100, "start": 107.0, "end": 110.0, "text": " We don't want to talk about that a whole lot.", "tokens": [51664, 492, 500, 380, 528, 281, 751, 466, 300, 257, 1379, 688, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10537619109547466, "compression_ratio": 1.6589147286821706, "no_speech_prob": 0.06953069567680359}, {"id": 25, "seek": 11000, "start": 110.0, "end": 114.0, "text": " So, on to the topic.", "tokens": [50364, 407, 11, 322, 281, 264, 4829, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10730508168538412, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.009645724669098854}, {"id": 26, "seek": 11000, "start": 114.0, "end": 121.0, "text": " Now, in order to understand why clustering is required,", "tokens": [50564, 823, 11, 294, 1668, 281, 1223, 983, 596, 48673, 307, 4739, 11, 50914], "temperature": 0.0, "avg_logprob": -0.10730508168538412, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.009645724669098854}, {"id": 27, "seek": 11000, "start": 121.0, "end": 125.0, "text": " it's important to understand what high availability is", "tokens": [50914, 309, 311, 1021, 281, 1223, 437, 1090, 17945, 307, 51114], "temperature": 0.0, "avg_logprob": -0.10730508168538412, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.009645724669098854}, {"id": 28, "seek": 11000, "start": 125.0, "end": 130.0, "text": " and why you need a highly available database.", "tokens": [51114, 293, 983, 291, 643, 257, 5405, 2435, 8149, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10730508168538412, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.009645724669098854}, {"id": 29, "seek": 11000, "start": 130.0, "end": 133.0, "text": " Now, you want your database to remain operational,", "tokens": [51364, 823, 11, 291, 528, 428, 8149, 281, 6222, 16607, 11, 51514], "temperature": 0.0, "avg_logprob": -0.10730508168538412, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.009645724669098854}, {"id": 30, "seek": 11000, "start": 133.0, "end": 139.0, "text": " even in the face of failure of hardware or network or your application.", "tokens": [51514, 754, 294, 264, 1851, 295, 7763, 295, 8837, 420, 3209, 420, 428, 3861, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10730508168538412, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.009645724669098854}, {"id": 31, "seek": 13900, "start": 139.0, "end": 144.0, "text": " You want to minimize the downtime so that the users of your application", "tokens": [50364, 509, 528, 281, 17522, 264, 49648, 370, 300, 264, 5022, 295, 428, 3861, 50614], "temperature": 0.0, "avg_logprob": -0.10376534095177284, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.015848444774746895}, {"id": 32, "seek": 13900, "start": 144.0, "end": 149.0, "text": " do not experience any interruption in their experience.", "tokens": [50614, 360, 406, 1752, 604, 728, 11266, 294, 641, 1752, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10376534095177284, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.015848444774746895}, {"id": 33, "seek": 13900, "start": 149.0, "end": 154.0, "text": " And it's absolutely essential for mission critical applications", "tokens": [50864, 400, 309, 311, 3122, 7115, 337, 4447, 4924, 5821, 51114], "temperature": 0.0, "avg_logprob": -0.10376534095177284, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.015848444774746895}, {"id": 34, "seek": 13900, "start": 154.0, "end": 157.0, "text": " that need to be running 24 by 7.", "tokens": [51114, 300, 643, 281, 312, 2614, 4022, 538, 1614, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10376534095177284, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.015848444774746895}, {"id": 35, "seek": 13900, "start": 157.0, "end": 163.0, "text": " Now, if you go back about maybe 10 odd years,", "tokens": [51264, 823, 11, 498, 291, 352, 646, 466, 1310, 1266, 7401, 924, 11, 51564], "temperature": 0.0, "avg_logprob": -0.10376534095177284, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.015848444774746895}, {"id": 36, "seek": 16300, "start": 163.0, "end": 169.0, "text": " it was okay to, let's say, have your credit card declined", "tokens": [50364, 309, 390, 1392, 281, 11, 718, 311, 584, 11, 362, 428, 5397, 2920, 29213, 50664], "temperature": 0.0, "avg_logprob": -0.0666210854307134, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.027500785887241364}, {"id": 37, "seek": 16300, "start": 169.0, "end": 173.0, "text": " or just not working on a machine because the network was not available", "tokens": [50664, 420, 445, 406, 1364, 322, 257, 3479, 570, 264, 3209, 390, 406, 2435, 50864], "temperature": 0.0, "avg_logprob": -0.0666210854307134, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.027500785887241364}, {"id": 38, "seek": 16300, "start": 173.0, "end": 175.0, "text": " or somehow the connection was broken", "tokens": [50864, 420, 6063, 264, 4984, 390, 5463, 50964], "temperature": 0.0, "avg_logprob": -0.0666210854307134, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.027500785887241364}, {"id": 39, "seek": 16300, "start": 175.0, "end": 178.0, "text": " or there was some problem with the communication.", "tokens": [50964, 420, 456, 390, 512, 1154, 365, 264, 6101, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0666210854307134, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.027500785887241364}, {"id": 40, "seek": 16300, "start": 178.0, "end": 181.0, "text": " In this day and age, what you expect to be able to do", "tokens": [51114, 682, 341, 786, 293, 3205, 11, 437, 291, 2066, 281, 312, 1075, 281, 360, 51264], "temperature": 0.0, "avg_logprob": -0.0666210854307134, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.027500785887241364}, {"id": 41, "seek": 16300, "start": 181.0, "end": 186.0, "text": " is just to tap your phone and instantaneously get the transaction through.", "tokens": [51264, 307, 445, 281, 5119, 428, 2593, 293, 9836, 13131, 483, 264, 14425, 807, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0666210854307134, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.027500785887241364}, {"id": 42, "seek": 16300, "start": 186.0, "end": 190.0, "text": " And you never expect it to be dropped", "tokens": [51514, 400, 291, 1128, 2066, 309, 281, 312, 8119, 51714], "temperature": 0.0, "avg_logprob": -0.0666210854307134, "compression_ratio": 1.6324786324786325, "no_speech_prob": 0.027500785887241364}, {"id": 43, "seek": 19000, "start": 190.0, "end": 194.0, "text": " or an error to pop up unless, of course, you run out of credit.", "tokens": [50364, 420, 364, 6713, 281, 1665, 493, 5969, 11, 295, 1164, 11, 291, 1190, 484, 295, 5397, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07055201133092244, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.023935653269290924}, {"id": 44, "seek": 19000, "start": 194.0, "end": 196.0, "text": " That's a different story.", "tokens": [50564, 663, 311, 257, 819, 1657, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07055201133092244, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.023935653269290924}, {"id": 45, "seek": 19000, "start": 196.0, "end": 201.0, "text": " But it just works. Everything just works.", "tokens": [50664, 583, 309, 445, 1985, 13, 5471, 445, 1985, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07055201133092244, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.023935653269290924}, {"id": 46, "seek": 19000, "start": 201.0, "end": 204.0, "text": " And the only reason everything just works", "tokens": [50914, 400, 264, 787, 1778, 1203, 445, 1985, 51064], "temperature": 0.0, "avg_logprob": -0.07055201133092244, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.023935653269290924}, {"id": 47, "seek": 19000, "start": 204.0, "end": 209.0, "text": " is because the entire infrastructure is highly available.", "tokens": [51064, 307, 570, 264, 2302, 6896, 307, 5405, 2435, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07055201133092244, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.023935653269290924}, {"id": 48, "seek": 19000, "start": 209.0, "end": 211.0, "text": " It's always available.", "tokens": [51314, 467, 311, 1009, 2435, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07055201133092244, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.023935653269290924}, {"id": 49, "seek": 19000, "start": 211.0, "end": 214.0, "text": " And that availability is measured in 9s.", "tokens": [51414, 400, 300, 17945, 307, 12690, 294, 1722, 82, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07055201133092244, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.023935653269290924}, {"id": 50, "seek": 19000, "start": 214.0, "end": 218.0, "text": " And I'm going to explain in just a second what those 9s are.", "tokens": [51564, 400, 286, 478, 516, 281, 2903, 294, 445, 257, 1150, 437, 729, 1722, 82, 366, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07055201133092244, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.023935653269290924}, {"id": 51, "seek": 21800, "start": 218.0, "end": 222.0, "text": " Now, we're going to start with a very basic", "tokens": [50364, 823, 11, 321, 434, 516, 281, 722, 365, 257, 588, 3875, 50564], "temperature": 0.0, "avg_logprob": -0.0706002326238723, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00262948009185493}, {"id": 52, "seek": 21800, "start": 222.0, "end": 224.0, "text": " and that's 90% availability.", "tokens": [50564, 293, 300, 311, 4289, 4, 17945, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0706002326238723, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00262948009185493}, {"id": 53, "seek": 21800, "start": 224.0, "end": 227.0, "text": " When I say 90%, it sounds like a lot,", "tokens": [50664, 1133, 286, 584, 4289, 8923, 309, 3263, 411, 257, 688, 11, 50814], "temperature": 0.0, "avg_logprob": -0.0706002326238723, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00262948009185493}, {"id": 54, "seek": 21800, "start": 227.0, "end": 229.0, "text": " but that's one line of availability.", "tokens": [50814, 457, 300, 311, 472, 1622, 295, 17945, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0706002326238723, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00262948009185493}, {"id": 55, "seek": 21800, "start": 229.0, "end": 233.0, "text": " And if you span that over the course of an entire year,", "tokens": [50914, 400, 498, 291, 16174, 300, 670, 264, 1164, 295, 364, 2302, 1064, 11, 51114], "temperature": 0.0, "avg_logprob": -0.0706002326238723, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00262948009185493}, {"id": 56, "seek": 21800, "start": 233.0, "end": 236.0, "text": " that means that the potential of the database to be down", "tokens": [51114, 300, 1355, 300, 264, 3995, 295, 264, 8149, 281, 312, 760, 51264], "temperature": 0.0, "avg_logprob": -0.0706002326238723, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00262948009185493}, {"id": 57, "seek": 21800, "start": 236.0, "end": 242.0, "text": " while maintaining 90% of availability is 36.5 days.", "tokens": [51264, 1339, 14916, 4289, 4, 295, 17945, 307, 8652, 13, 20, 1708, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0706002326238723, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00262948009185493}, {"id": 58, "seek": 21800, "start": 242.0, "end": 247.0, "text": " So in a given year, if your database is 90% available,", "tokens": [51564, 407, 294, 257, 2212, 1064, 11, 498, 428, 8149, 307, 4289, 4, 2435, 11, 51814], "temperature": 0.0, "avg_logprob": -0.0706002326238723, "compression_ratio": 1.6383928571428572, "no_speech_prob": 0.00262948009185493}, {"id": 59, "seek": 24700, "start": 247.0, "end": 251.0, "text": " it's going to be down for 36.5 days.", "tokens": [50364, 309, 311, 516, 281, 312, 760, 337, 8652, 13, 20, 1708, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13097367341490998, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.0009996878216043115}, {"id": 60, "seek": 24700, "start": 251.0, "end": 254.0, "text": " Anybody find that acceptable?", "tokens": [50564, 19082, 915, 300, 15513, 30, 50714], "temperature": 0.0, "avg_logprob": -0.13097367341490998, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.0009996878216043115}, {"id": 61, "seek": 24700, "start": 254.0, "end": 257.0, "text": " I really hope not.", "tokens": [50714, 286, 534, 1454, 406, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13097367341490998, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.0009996878216043115}, {"id": 62, "seek": 24700, "start": 257.0, "end": 259.0, "text": " Now, you go to two 9s of availability.", "tokens": [50864, 823, 11, 291, 352, 281, 732, 1722, 82, 295, 17945, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13097367341490998, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.0009996878216043115}, {"id": 63, "seek": 24700, "start": 259.0, "end": 262.0, "text": " That's 99% and that's a better number.", "tokens": [50964, 663, 311, 11803, 4, 293, 300, 311, 257, 1101, 1230, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13097367341490998, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.0009996878216043115}, {"id": 64, "seek": 24700, "start": 262.0, "end": 268.0, "text": " That's equal in order of magnitude higher in terms of availability.", "tokens": [51114, 663, 311, 2681, 294, 1668, 295, 15668, 2946, 294, 2115, 295, 17945, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13097367341490998, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.0009996878216043115}, {"id": 65, "seek": 24700, "start": 268.0, "end": 274.0, "text": " And the downtime goes down from 36 days to 3.6 days.", "tokens": [51414, 400, 264, 49648, 1709, 760, 490, 8652, 1708, 281, 805, 13, 21, 1708, 13, 51714], "temperature": 0.0, "avg_logprob": -0.13097367341490998, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.0009996878216043115}, {"id": 66, "seek": 27400, "start": 274.0, "end": 279.0, "text": " Now, again, in a given year, if your database is 99% available,", "tokens": [50364, 823, 11, 797, 11, 294, 257, 2212, 1064, 11, 498, 428, 8149, 307, 11803, 4, 2435, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08465449626629169, "compression_ratio": 1.4694835680751173, "no_speech_prob": 0.001752276555635035}, {"id": 67, "seek": 27400, "start": 279.0, "end": 283.0, "text": " it is going to be down for almost 3.5 days.", "tokens": [50614, 309, 307, 516, 281, 312, 760, 337, 1920, 805, 13, 20, 1708, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08465449626629169, "compression_ratio": 1.4694835680751173, "no_speech_prob": 0.001752276555635035}, {"id": 68, "seek": 27400, "start": 283.0, "end": 286.0, "text": " And again, for most mission critical applications,", "tokens": [50814, 400, 797, 11, 337, 881, 4447, 4924, 5821, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08465449626629169, "compression_ratio": 1.4694835680751173, "no_speech_prob": 0.001752276555635035}, {"id": 69, "seek": 27400, "start": 286.0, "end": 289.0, "text": " that is not acceptable.", "tokens": [50964, 300, 307, 406, 15513, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08465449626629169, "compression_ratio": 1.4694835680751173, "no_speech_prob": 0.001752276555635035}, {"id": 70, "seek": 27400, "start": 289.0, "end": 292.0, "text": " 99.9% is 3.9s of availability", "tokens": [51114, 11803, 13, 24, 4, 307, 805, 13, 24, 82, 295, 17945, 51264], "temperature": 0.0, "avg_logprob": -0.08465449626629169, "compression_ratio": 1.4694835680751173, "no_speech_prob": 0.001752276555635035}, {"id": 71, "seek": 27400, "start": 292.0, "end": 296.0, "text": " with an allowance of 8.7 hours of downtime.", "tokens": [51264, 365, 364, 30647, 295, 1649, 13, 22, 2496, 295, 49648, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08465449626629169, "compression_ratio": 1.4694835680751173, "no_speech_prob": 0.001752276555635035}, {"id": 72, "seek": 27400, "start": 296.0, "end": 302.0, "text": " You go off to 4.9s, 99.99, that's 52.6 minutes per year.", "tokens": [51464, 509, 352, 766, 281, 1017, 13, 24, 82, 11, 11803, 13, 8494, 11, 300, 311, 18079, 13, 21, 2077, 680, 1064, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08465449626629169, "compression_ratio": 1.4694835680751173, "no_speech_prob": 0.001752276555635035}, {"id": 73, "seek": 30200, "start": 302.0, "end": 310.0, "text": " And 5.9s of availability translate into 5.26 minutes per year.", "tokens": [50364, 400, 1025, 13, 24, 82, 295, 17945, 13799, 666, 1025, 13, 10880, 2077, 680, 1064, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07029364765554234, "compression_ratio": 1.3687150837988826, "no_speech_prob": 0.0007303940365090966}, {"id": 74, "seek": 30200, "start": 310.0, "end": 316.0, "text": " So just to make sure that we understand what availability is", "tokens": [50764, 407, 445, 281, 652, 988, 300, 321, 1223, 437, 17945, 307, 51064], "temperature": 0.0, "avg_logprob": -0.07029364765554234, "compression_ratio": 1.3687150837988826, "no_speech_prob": 0.0007303940365090966}, {"id": 75, "seek": 30200, "start": 316.0, "end": 319.0, "text": " and how it is calculated.", "tokens": [51064, 293, 577, 309, 307, 15598, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07029364765554234, "compression_ratio": 1.3687150837988826, "no_speech_prob": 0.0007303940365090966}, {"id": 76, "seek": 30200, "start": 319.0, "end": 326.0, "text": " Now, the database runs on the cloud, so you don't care, right?", "tokens": [51214, 823, 11, 264, 8149, 6676, 322, 264, 4588, 11, 370, 291, 500, 380, 1127, 11, 558, 30, 51564], "temperature": 0.0, "avg_logprob": -0.07029364765554234, "compression_ratio": 1.3687150837988826, "no_speech_prob": 0.0007303940365090966}, {"id": 77, "seek": 30200, "start": 326.0, "end": 330.0, "text": " How many people agree with this?", "tokens": [51564, 1012, 867, 561, 3986, 365, 341, 30, 51764], "temperature": 0.0, "avg_logprob": -0.07029364765554234, "compression_ratio": 1.3687150837988826, "no_speech_prob": 0.0007303940365090966}, {"id": 78, "seek": 33000, "start": 330.0, "end": 333.0, "text": " Oh, I'm so glad that nobody agrees with that.", "tokens": [50364, 876, 11, 286, 478, 370, 5404, 300, 5079, 26383, 365, 300, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11501146100231052, "compression_ratio": 1.5186721991701244, "no_speech_prob": 0.0019251269986853004}, {"id": 79, "seek": 33000, "start": 333.0, "end": 335.0, "text": " We've got a bunch of experts over here.", "tokens": [50514, 492, 600, 658, 257, 3840, 295, 8572, 670, 510, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11501146100231052, "compression_ratio": 1.5186721991701244, "no_speech_prob": 0.0019251269986853004}, {"id": 80, "seek": 33000, "start": 335.0, "end": 338.0, "text": " Yeah, so just because your database is on the cloud", "tokens": [50614, 865, 11, 370, 445, 570, 428, 8149, 307, 322, 264, 4588, 50764], "temperature": 0.0, "avg_logprob": -0.11501146100231052, "compression_ratio": 1.5186721991701244, "no_speech_prob": 0.0019251269986853004}, {"id": 81, "seek": 33000, "start": 338.0, "end": 342.0, "text": " does not mean that it is always available.", "tokens": [50764, 775, 406, 914, 300, 309, 307, 1009, 2435, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11501146100231052, "compression_ratio": 1.5186721991701244, "no_speech_prob": 0.0019251269986853004}, {"id": 82, "seek": 33000, "start": 342.0, "end": 349.0, "text": " And here's, I just copied and pasted the service level agreement", "tokens": [50964, 400, 510, 311, 11, 286, 445, 25365, 293, 1791, 292, 264, 2643, 1496, 8106, 51314], "temperature": 0.0, "avg_logprob": -0.11501146100231052, "compression_ratio": 1.5186721991701244, "no_speech_prob": 0.0019251269986853004}, {"id": 83, "seek": 33000, "start": 349.0, "end": 355.0, "text": " that Amazon has up on their website for highly available RDF clutches", "tokens": [51314, 300, 6795, 575, 493, 322, 641, 3144, 337, 5405, 2435, 49488, 37, 596, 49307, 51614], "temperature": 0.0, "avg_logprob": -0.11501146100231052, "compression_ratio": 1.5186721991701244, "no_speech_prob": 0.0019251269986853004}, {"id": 84, "seek": 33000, "start": 355.0, "end": 359.0, "text": " that are in multi-availability zone configuration.", "tokens": [51614, 300, 366, 294, 4825, 12, 706, 864, 2310, 6668, 11694, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11501146100231052, "compression_ratio": 1.5186721991701244, "no_speech_prob": 0.0019251269986853004}, {"id": 85, "seek": 35900, "start": 359.0, "end": 364.0, "text": " So you have the highest form of availability that you can get with RDS, right?", "tokens": [50364, 407, 291, 362, 264, 6343, 1254, 295, 17945, 300, 291, 393, 483, 365, 497, 11844, 11, 558, 30, 50614], "temperature": 0.0, "avg_logprob": -0.1637816012484356, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.017949068918824196}, {"id": 86, "seek": 35900, "start": 364.0, "end": 368.0, "text": " They talk about MySQL, MariaDB, and Oracle, and Postgres,", "tokens": [50614, 814, 751, 466, 1222, 39934, 11, 12734, 27735, 11, 293, 25654, 11, 293, 10223, 45189, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1637816012484356, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.017949068918824196}, {"id": 87, "seek": 35900, "start": 368.0, "end": 372.0, "text": " and they specifically say that it's only, this SLA,", "tokens": [50814, 293, 436, 4682, 584, 300, 309, 311, 787, 11, 341, 318, 11435, 11, 51014], "temperature": 0.0, "avg_logprob": -0.1637816012484356, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.017949068918824196}, {"id": 88, "seek": 35900, "start": 372.0, "end": 376.0, "text": " is only for multi-availability zone configurations,", "tokens": [51014, 307, 787, 337, 4825, 12, 706, 864, 2310, 6668, 31493, 11, 51214], "temperature": 0.0, "avg_logprob": -0.1637816012484356, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.017949068918824196}, {"id": 89, "seek": 35900, "start": 376.0, "end": 383.0, "text": " and they're going to make commercially reasonable efforts to make this available, right?", "tokens": [51214, 293, 436, 434, 516, 281, 652, 41751, 10585, 6484, 281, 652, 341, 2435, 11, 558, 30, 51564], "temperature": 0.0, "avg_logprob": -0.1637816012484356, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.017949068918824196}, {"id": 90, "seek": 35900, "start": 383.0, "end": 386.0, "text": " So if they're losing money, they're not going to do it.", "tokens": [51564, 407, 498, 436, 434, 7027, 1460, 11, 436, 434, 406, 516, 281, 360, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1637816012484356, "compression_ratio": 1.6452991452991452, "no_speech_prob": 0.017949068918824196}, {"id": 91, "seek": 38600, "start": 386.0, "end": 391.0, "text": " And what they promise is three and a half nines.", "tokens": [50364, 400, 437, 436, 6228, 307, 1045, 293, 257, 1922, 297, 1652, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07968561027360999, "compression_ratio": 1.675531914893617, "no_speech_prob": 0.006380060687661171}, {"id": 92, "seek": 38600, "start": 391.0, "end": 397.0, "text": " Not four, not five, three and a half nines, 99.95%.", "tokens": [50614, 1726, 1451, 11, 406, 1732, 11, 1045, 293, 257, 1922, 297, 1652, 11, 11803, 13, 15718, 6856, 50914], "temperature": 0.0, "avg_logprob": -0.07968561027360999, "compression_ratio": 1.675531914893617, "no_speech_prob": 0.006380060687661171}, {"id": 93, "seek": 38600, "start": 397.0, "end": 402.0, "text": " And if they're unable to give you those three and a half nines,", "tokens": [50914, 400, 498, 436, 434, 11299, 281, 976, 291, 729, 1045, 293, 257, 1922, 297, 1652, 11, 51164], "temperature": 0.0, "avg_logprob": -0.07968561027360999, "compression_ratio": 1.675531914893617, "no_speech_prob": 0.006380060687661171}, {"id": 94, "seek": 38600, "start": 402.0, "end": 407.0, "text": " what they say is that affected customers will be eligible to receive a service credit,", "tokens": [51164, 437, 436, 584, 307, 300, 8028, 4581, 486, 312, 14728, 281, 4774, 257, 2643, 5397, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07968561027360999, "compression_ratio": 1.675531914893617, "no_speech_prob": 0.006380060687661171}, {"id": 95, "seek": 38600, "start": 407.0, "end": 412.0, "text": " i.e. the service that had gone down on you, you get more of it.", "tokens": [51414, 741, 13, 68, 13, 264, 2643, 300, 632, 2780, 760, 322, 291, 11, 291, 483, 544, 295, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07968561027360999, "compression_ratio": 1.675531914893617, "no_speech_prob": 0.006380060687661171}, {"id": 96, "seek": 41200, "start": 412.0, "end": 422.0, "text": " So three and a half nines translate into 4.38 hours of downtime per year.", "tokens": [50364, 407, 1045, 293, 257, 1922, 297, 1652, 13799, 666, 1017, 13, 12625, 2496, 295, 49648, 680, 1064, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09305509192044617, "compression_ratio": 1.4046242774566473, "no_speech_prob": 0.000625933229457587}, {"id": 97, "seek": 41200, "start": 422.0, "end": 428.0, "text": " So if you're running an RDF cluster that is spread over multiple availability zones,", "tokens": [50864, 407, 498, 291, 434, 2614, 364, 49488, 37, 13630, 300, 307, 3974, 670, 3866, 17945, 16025, 11, 51164], "temperature": 0.0, "avg_logprob": -0.09305509192044617, "compression_ratio": 1.4046242774566473, "no_speech_prob": 0.000625933229457587}, {"id": 98, "seek": 41200, "start": 428.0, "end": 434.0, "text": " you can expect your database to be down for almost four and a half hours every year.", "tokens": [51164, 291, 393, 2066, 428, 8149, 281, 312, 760, 337, 1920, 1451, 293, 257, 1922, 2496, 633, 1064, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09305509192044617, "compression_ratio": 1.4046242774566473, "no_speech_prob": 0.000625933229457587}, {"id": 99, "seek": 43400, "start": 435.0, "end": 441.0, "text": " Now, what do you do if you want better availability?", "tokens": [50414, 823, 11, 437, 360, 291, 360, 498, 291, 528, 1101, 17945, 30, 50714], "temperature": 0.0, "avg_logprob": -0.09418476255316484, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.0016464025247842073}, {"id": 100, "seek": 43400, "start": 441.0, "end": 446.0, "text": " That's one of the reasons why you have clustering.", "tokens": [50714, 663, 311, 472, 295, 264, 4112, 983, 291, 362, 596, 48673, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09418476255316484, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.0016464025247842073}, {"id": 101, "seek": 43400, "start": 446.0, "end": 455.0, "text": " And I'm going to run through now a few basic architectures of how clustering works with Postgres.", "tokens": [50964, 400, 286, 478, 516, 281, 1190, 807, 586, 257, 1326, 3875, 6331, 1303, 295, 577, 596, 48673, 1985, 365, 10223, 45189, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09418476255316484, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.0016464025247842073}, {"id": 102, "seek": 43400, "start": 455.0, "end": 460.0, "text": " This is probably true generally for databases as well, but we are in the Postgres Dev Room,", "tokens": [51414, 639, 307, 1391, 2074, 5101, 337, 22380, 382, 731, 11, 457, 321, 366, 294, 264, 10223, 45189, 9096, 19190, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09418476255316484, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.0016464025247842073}, {"id": 103, "seek": 46000, "start": 460.0, "end": 464.0, "text": " so we are going to be talking about Postgres.", "tokens": [50364, 370, 321, 366, 516, 281, 312, 1417, 466, 10223, 45189, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08873914789270472, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.00571788102388382}, {"id": 104, "seek": 46000, "start": 464.0, "end": 473.0, "text": " Now, in this very simple basic cluster, you've got one primary database and two standby nodes.", "tokens": [50564, 823, 11, 294, 341, 588, 2199, 3875, 13630, 11, 291, 600, 658, 472, 6194, 8149, 293, 732, 50170, 13891, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08873914789270472, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.00571788102388382}, {"id": 105, "seek": 46000, "start": 473.0, "end": 479.0, "text": " The way this cluster is structured is that the internals of the architecture are invisible to the application.", "tokens": [51014, 440, 636, 341, 13630, 307, 18519, 307, 300, 264, 2154, 1124, 295, 264, 9482, 366, 14603, 281, 264, 3861, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08873914789270472, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.00571788102388382}, {"id": 106, "seek": 46000, "start": 479.0, "end": 486.0, "text": " The application simply talks to the cluster, which of the nodes it's talking to doesn't care.", "tokens": [51314, 440, 3861, 2935, 6686, 281, 264, 13630, 11, 597, 295, 264, 13891, 309, 311, 1417, 281, 1177, 380, 1127, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08873914789270472, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.00571788102388382}, {"id": 107, "seek": 48600, "start": 486.0, "end": 494.0, "text": " It reads and writes to the cluster, and the two standbys are essentially read replicas,", "tokens": [50364, 467, 15700, 293, 13657, 281, 264, 13630, 11, 293, 264, 732, 1463, 65, 749, 366, 4476, 1401, 3248, 9150, 11, 50764], "temperature": 0.0, "avg_logprob": -0.08577841941756431, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.0053757862187922}, {"id": 108, "seek": 48600, "start": 494.0, "end": 498.0, "text": " so there's redundancy in data in each of these replicas.", "tokens": [50764, 370, 456, 311, 27830, 6717, 294, 1412, 294, 1184, 295, 613, 3248, 9150, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08577841941756431, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.0053757862187922}, {"id": 109, "seek": 48600, "start": 498.0, "end": 504.0, "text": " And in case the primary overhead goes down for whatever reason, there's a hardware error,", "tokens": [50964, 400, 294, 1389, 264, 6194, 19922, 1709, 760, 337, 2035, 1778, 11, 456, 311, 257, 8837, 6713, 11, 51264], "temperature": 0.0, "avg_logprob": -0.08577841941756431, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.0053757862187922}, {"id": 110, "seek": 48600, "start": 504.0, "end": 508.0, "text": " there's a software error, there's a network communication error, whatever it is,", "tokens": [51264, 456, 311, 257, 4722, 6713, 11, 456, 311, 257, 3209, 6101, 6713, 11, 2035, 309, 307, 11, 51464], "temperature": 0.0, "avg_logprob": -0.08577841941756431, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.0053757862187922}, {"id": 111, "seek": 48600, "start": 508.0, "end": 514.0, "text": " one of the standbys can take over and the whole cluster will just continue working.", "tokens": [51464, 472, 295, 264, 1463, 65, 749, 393, 747, 670, 293, 264, 1379, 13630, 486, 445, 2354, 1364, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08577841941756431, "compression_ratio": 1.821917808219178, "no_speech_prob": 0.0053757862187922}, {"id": 112, "seek": 51400, "start": 514.0, "end": 523.0, "text": " And diagrammatically, just to explain how that works, just so that we're able to visualize the whole sequence,", "tokens": [50364, 400, 10686, 76, 5030, 11, 445, 281, 2903, 577, 300, 1985, 11, 445, 370, 300, 321, 434, 1075, 281, 23273, 264, 1379, 8310, 11, 50814], "temperature": 0.0, "avg_logprob": -0.11634697084841521, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0017509340541437268}, {"id": 113, "seek": 51400, "start": 523.0, "end": 525.0, "text": " that's the sequence of events.", "tokens": [50814, 300, 311, 264, 8310, 295, 3931, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11634697084841521, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0017509340541437268}, {"id": 114, "seek": 51400, "start": 525.0, "end": 532.0, "text": " If the primary goes down, step one, the standby one, or well, it could be the standby two as well,", "tokens": [50914, 759, 264, 6194, 1709, 760, 11, 1823, 472, 11, 264, 50170, 472, 11, 420, 731, 11, 309, 727, 312, 264, 50170, 732, 382, 731, 11, 51264], "temperature": 0.0, "avg_logprob": -0.11634697084841521, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0017509340541437268}, {"id": 115, "seek": 51400, "start": 532.0, "end": 536.0, "text": " but just for illustration purposes, the standby one takes over as the primary.", "tokens": [51264, 457, 445, 337, 22645, 9932, 11, 264, 50170, 472, 2516, 670, 382, 264, 6194, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11634697084841521, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0017509340541437268}, {"id": 116, "seek": 51400, "start": 536.0, "end": 539.0, "text": " The previous primary is retired from the cluster.", "tokens": [51464, 440, 3894, 6194, 307, 16776, 490, 264, 13630, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11634697084841521, "compression_ratio": 1.7004608294930876, "no_speech_prob": 0.0017509340541437268}, {"id": 117, "seek": 53900, "start": 539.0, "end": 546.0, "text": " A new replication path is set up from standby one to standby two.", "tokens": [50364, 316, 777, 39911, 3100, 307, 992, 493, 490, 50170, 472, 281, 50170, 732, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09079810042879474, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.12311682105064392}, {"id": 118, "seek": 53900, "start": 546.0, "end": 548.0, "text": " The standby one is labeled as a primary.", "tokens": [50714, 440, 50170, 472, 307, 21335, 382, 257, 6194, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09079810042879474, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.12311682105064392}, {"id": 119, "seek": 53900, "start": 548.0, "end": 556.0, "text": " Standby two becomes the prime replica of this new primary, and a new node is spun up,", "tokens": [50814, 9133, 2322, 732, 3643, 264, 5835, 35456, 295, 341, 777, 6194, 11, 293, 257, 777, 9984, 307, 37038, 493, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09079810042879474, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.12311682105064392}, {"id": 120, "seek": 53900, "start": 556.0, "end": 563.0, "text": " or the old primary is recovered and included in part of the cluster.", "tokens": [51214, 420, 264, 1331, 6194, 307, 19542, 293, 5556, 294, 644, 295, 264, 13630, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09079810042879474, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.12311682105064392}, {"id": 121, "seek": 56300, "start": 563.0, "end": 568.0, "text": " So this is, you know, at a very abstracted and high level, diagrammatically,", "tokens": [50364, 407, 341, 307, 11, 291, 458, 11, 412, 257, 588, 12649, 292, 293, 1090, 1496, 11, 10686, 76, 5030, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10332233090943928, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.007920895703136921}, {"id": 122, "seek": 56300, "start": 568.0, "end": 573.0, "text": " how an auto-failover procedure works.", "tokens": [50614, 577, 364, 8399, 12, 69, 864, 3570, 10747, 1985, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10332233090943928, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.007920895703136921}, {"id": 123, "seek": 56300, "start": 573.0, "end": 581.0, "text": " Now, there are other forms or other variations of clusters that you can set up with Postgres,", "tokens": [50864, 823, 11, 456, 366, 661, 6422, 420, 661, 17840, 295, 23313, 300, 291, 393, 992, 493, 365, 10223, 45189, 11, 51264], "temperature": 0.0, "avg_logprob": -0.10332233090943928, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.007920895703136921}, {"id": 124, "seek": 56300, "start": 581.0, "end": 583.0, "text": " with various different intents.", "tokens": [51264, 365, 3683, 819, 560, 791, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10332233090943928, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.007920895703136921}, {"id": 125, "seek": 56300, "start": 583.0, "end": 588.0, "text": " This illustration talks about a cluster that has load balancing,", "tokens": [51364, 639, 22645, 6686, 466, 257, 13630, 300, 575, 3677, 22495, 11, 51614], "temperature": 0.0, "avg_logprob": -0.10332233090943928, "compression_ratio": 1.50990099009901, "no_speech_prob": 0.007920895703136921}, {"id": 126, "seek": 58800, "start": 588.0, "end": 596.0, "text": " and what load balancing does is that it focuses the right processes to one node, which is the primary.", "tokens": [50364, 293, 437, 3677, 22495, 775, 307, 300, 309, 16109, 264, 558, 7555, 281, 472, 9984, 11, 597, 307, 264, 6194, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07514823936834568, "compression_ratio": 1.7015706806282722, "no_speech_prob": 0.03723134845495224}, {"id": 127, "seek": 58800, "start": 596.0, "end": 600.0, "text": " Those rights, that data, is replicated over to the two standbys,", "tokens": [50764, 3950, 4601, 11, 300, 1412, 11, 307, 46365, 670, 281, 264, 732, 1463, 65, 749, 11, 50964], "temperature": 0.0, "avg_logprob": -0.07514823936834568, "compression_ratio": 1.7015706806282722, "no_speech_prob": 0.03723134845495224}, {"id": 128, "seek": 58800, "start": 600.0, "end": 606.0, "text": " and the application can actually read from one or both of the standbys.", "tokens": [50964, 293, 264, 3861, 393, 767, 1401, 490, 472, 420, 1293, 295, 264, 1463, 65, 749, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07514823936834568, "compression_ratio": 1.7015706806282722, "no_speech_prob": 0.03723134845495224}, {"id": 129, "seek": 58800, "start": 606.0, "end": 615.0, "text": " The idea over here is not to allow the primary node to get hogged by read operations.", "tokens": [51264, 440, 1558, 670, 510, 307, 406, 281, 2089, 264, 6194, 9984, 281, 483, 24855, 3004, 538, 1401, 7705, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07514823936834568, "compression_ratio": 1.7015706806282722, "no_speech_prob": 0.03723134845495224}, {"id": 130, "seek": 61500, "start": 615.0, "end": 621.0, "text": " It can focus on the rights, and the read can be served from the two standbys.", "tokens": [50364, 467, 393, 1879, 322, 264, 4601, 11, 293, 264, 1401, 393, 312, 7584, 490, 264, 732, 1463, 65, 749, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09714710880333269, "compression_ratio": 1.4262295081967213, "no_speech_prob": 0.0017221395391970873}, {"id": 131, "seek": 61500, "start": 621.0, "end": 623.0, "text": " This is load balancing.", "tokens": [50664, 639, 307, 3677, 22495, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09714710880333269, "compression_ratio": 1.4262295081967213, "no_speech_prob": 0.0017221395391970873}, {"id": 132, "seek": 61500, "start": 623.0, "end": 631.0, "text": " And again, you know, the auto-failover, etc., goes on as previously discussed.", "tokens": [50764, 400, 797, 11, 291, 458, 11, 264, 8399, 12, 69, 864, 3570, 11, 5183, 7933, 1709, 322, 382, 8046, 7152, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09714710880333269, "compression_ratio": 1.4262295081967213, "no_speech_prob": 0.0017221395391970873}, {"id": 133, "seek": 61500, "start": 631.0, "end": 638.0, "text": " Same cluster, now with a backup process in place for disaster recovery purposes.", "tokens": [51164, 10635, 13630, 11, 586, 365, 257, 14807, 1399, 294, 1081, 337, 11293, 8597, 9932, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09714710880333269, "compression_ratio": 1.4262295081967213, "no_speech_prob": 0.0017221395391970873}, {"id": 134, "seek": 63800, "start": 638.0, "end": 642.0, "text": " Now, notice that the backup is taken outside of the cluster.", "tokens": [50364, 823, 11, 3449, 300, 264, 14807, 307, 2726, 2380, 295, 264, 13630, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09629147323136478, "compression_ratio": 1.7339901477832513, "no_speech_prob": 0.012385579757392406}, {"id": 135, "seek": 63800, "start": 642.0, "end": 650.0, "text": " It's an off-site backup, and for good purpose, if the entire cluster goes down for some reason,", "tokens": [50564, 467, 311, 364, 766, 12, 30417, 14807, 11, 293, 337, 665, 4334, 11, 498, 264, 2302, 13630, 1709, 760, 337, 512, 1778, 11, 50964], "temperature": 0.0, "avg_logprob": -0.09629147323136478, "compression_ratio": 1.7339901477832513, "no_speech_prob": 0.012385579757392406}, {"id": 136, "seek": 63800, "start": 650.0, "end": 655.0, "text": " if, you know, there's an earthquake, there's a fire, a whole, you know, data center goes down,", "tokens": [50964, 498, 11, 291, 458, 11, 456, 311, 364, 18778, 11, 456, 311, 257, 2610, 11, 257, 1379, 11, 291, 458, 11, 1412, 3056, 1709, 760, 11, 51214], "temperature": 0.0, "avg_logprob": -0.09629147323136478, "compression_ratio": 1.7339901477832513, "no_speech_prob": 0.012385579757392406}, {"id": 137, "seek": 63800, "start": 655.0, "end": 659.0, "text": " you don't want your backups to also go down with it.", "tokens": [51214, 291, 500, 380, 528, 428, 50160, 281, 611, 352, 760, 365, 309, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09629147323136478, "compression_ratio": 1.7339901477832513, "no_speech_prob": 0.012385579757392406}, {"id": 138, "seek": 63800, "start": 659.0, "end": 662.0, "text": " So the backup is taken at a different location.", "tokens": [51414, 407, 264, 14807, 307, 2726, 412, 257, 819, 4914, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09629147323136478, "compression_ratio": 1.7339901477832513, "no_speech_prob": 0.012385579757392406}, {"id": 139, "seek": 66200, "start": 662.0, "end": 671.0, "text": " These backups are taken with requirements in mind that are mostly fall under the two concepts of RTO and RPO.", "tokens": [50364, 1981, 50160, 366, 2726, 365, 7728, 294, 1575, 300, 366, 5240, 2100, 833, 264, 732, 10392, 295, 497, 15427, 293, 14105, 46, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09268011740588267, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.010140836238861084}, {"id": 140, "seek": 66200, "start": 671.0, "end": 676.0, "text": " Both of these stand for recovery time objective and recovery point objective.", "tokens": [50814, 6767, 295, 613, 1463, 337, 8597, 565, 10024, 293, 8597, 935, 10024, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09268011740588267, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.010140836238861084}, {"id": 141, "seek": 66200, "start": 676.0, "end": 680.0, "text": " Anybody over here who is hearing these two terms for the very first time?", "tokens": [51064, 19082, 670, 510, 567, 307, 4763, 613, 732, 2115, 337, 264, 588, 700, 565, 30, 51264], "temperature": 0.0, "avg_logprob": -0.09268011740588267, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.010140836238861084}, {"id": 142, "seek": 66200, "start": 680.0, "end": 685.0, "text": " RTO and RPO? Okay, okay, so I'll, you know, just take a moment to explain this a little bit.", "tokens": [51264, 497, 15427, 293, 14105, 46, 30, 1033, 11, 1392, 11, 370, 286, 603, 11, 291, 458, 11, 445, 747, 257, 1623, 281, 2903, 341, 257, 707, 857, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09268011740588267, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.010140836238861084}, {"id": 143, "seek": 66200, "start": 685.0, "end": 691.0, "text": " So recovery time objective means that in case your cluster crashes or goes down for whatever reason,", "tokens": [51514, 407, 8597, 565, 10024, 1355, 300, 294, 1389, 428, 13630, 28642, 420, 1709, 760, 337, 2035, 1778, 11, 51814], "temperature": 0.0, "avg_logprob": -0.09268011740588267, "compression_ratio": 1.6605839416058394, "no_speech_prob": 0.010140836238861084}, {"id": 144, "seek": 69100, "start": 691.0, "end": 698.0, "text": " how much time is acceptable for you to be able to recover the entire database, right?", "tokens": [50364, 577, 709, 565, 307, 15513, 337, 291, 281, 312, 1075, 281, 8114, 264, 2302, 8149, 11, 558, 30, 50714], "temperature": 0.0, "avg_logprob": -0.06871581379371354, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0027544416952878237}, {"id": 145, "seek": 69100, "start": 698.0, "end": 703.0, "text": " Depending on the criticality of your application and the criticality of your cluster,", "tokens": [50714, 22539, 322, 264, 4924, 507, 295, 428, 3861, 293, 264, 4924, 507, 295, 428, 13630, 11, 50964], "temperature": 0.0, "avg_logprob": -0.06871581379371354, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0027544416952878237}, {"id": 146, "seek": 69100, "start": 703.0, "end": 709.0, "text": " that time could be very, very small, or you could allow, you know, a few hours, a few minutes,", "tokens": [50964, 300, 565, 727, 312, 588, 11, 588, 1359, 11, 420, 291, 727, 2089, 11, 291, 458, 11, 257, 1326, 2496, 11, 257, 1326, 2077, 11, 51264], "temperature": 0.0, "avg_logprob": -0.06871581379371354, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0027544416952878237}, {"id": 147, "seek": 69100, "start": 709.0, "end": 713.0, "text": " maybe a couple of days for the recovery time.", "tokens": [51264, 1310, 257, 1916, 295, 1708, 337, 264, 8597, 565, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06871581379371354, "compression_ratio": 1.6774193548387097, "no_speech_prob": 0.0027544416952878237}, {"id": 148, "seek": 71300, "start": 713.0, "end": 721.0, "text": " Recovery point objective is how much data can you afford to lose in case the cluster crashes, right?", "tokens": [50364, 35254, 935, 10024, 307, 577, 709, 1412, 393, 291, 6157, 281, 3624, 294, 1389, 264, 13630, 28642, 11, 558, 30, 50764], "temperature": 0.0, "avg_logprob": -0.08798040900119515, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.0009683100506663322}, {"id": 149, "seek": 71300, "start": 721.0, "end": 727.0, "text": " From what point is it acceptable to be able to recover the cluster?", "tokens": [50764, 3358, 437, 935, 307, 309, 15513, 281, 312, 1075, 281, 8114, 264, 13630, 30, 51064], "temperature": 0.0, "avg_logprob": -0.08798040900119515, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.0009683100506663322}, {"id": 150, "seek": 71300, "start": 727.0, "end": 734.0, "text": " Now, again, for critical clusters, the RPO might be very, very close to zero, i.e. you don't want to lose any data,", "tokens": [51064, 823, 11, 797, 11, 337, 4924, 23313, 11, 264, 14105, 46, 1062, 312, 588, 11, 588, 1998, 281, 4018, 11, 741, 13, 68, 13, 291, 500, 380, 528, 281, 3624, 604, 1412, 11, 51414], "temperature": 0.0, "avg_logprob": -0.08798040900119515, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.0009683100506663322}, {"id": 151, "seek": 71300, "start": 734.0, "end": 737.0, "text": " but of course there are implications to it.", "tokens": [51414, 457, 295, 1164, 456, 366, 16602, 281, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08798040900119515, "compression_ratio": 1.5545023696682465, "no_speech_prob": 0.0009683100506663322}, {"id": 152, "seek": 73700, "start": 737.0, "end": 746.0, "text": " There are efficiency in space and financial implications to trying to achieve both RPO and RPO that are close to zero.", "tokens": [50364, 821, 366, 10493, 294, 1901, 293, 4669, 16602, 281, 1382, 281, 4584, 1293, 14105, 46, 293, 14105, 46, 300, 366, 1998, 281, 4018, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08077609844696827, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.008832077495753765}, {"id": 153, "seek": 73700, "start": 746.0, "end": 755.0, "text": " So you keep that in mind as you design your architecture and your disaster recovery strategy.", "tokens": [50814, 407, 291, 1066, 300, 294, 1575, 382, 291, 1715, 428, 9482, 293, 428, 11293, 8597, 5206, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08077609844696827, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.008832077495753765}, {"id": 154, "seek": 73700, "start": 755.0, "end": 764.0, "text": " Point in time recovery is something that is kind of aligned with that, you know, it's about what point you can recover your database from.", "tokens": [51264, 12387, 294, 565, 8597, 307, 746, 300, 307, 733, 295, 17962, 365, 300, 11, 291, 458, 11, 309, 311, 466, 437, 935, 291, 393, 8114, 428, 8149, 490, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08077609844696827, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.008832077495753765}, {"id": 155, "seek": 76400, "start": 764.0, "end": 771.0, "text": " You want to go back in time and recover your database to that point in time, that's the PITR concept.", "tokens": [50364, 509, 528, 281, 352, 646, 294, 565, 293, 8114, 428, 8149, 281, 300, 935, 294, 565, 11, 300, 311, 264, 430, 3927, 49, 3410, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09353699815382652, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.0025828678626567125}, {"id": 156, "seek": 76400, "start": 771.0, "end": 779.0, "text": " Also, it's a footnote over here, but just, you know, a piece of advice, it is extremely important to make sure that you're periodically testing your backups,", "tokens": [50714, 2743, 11, 309, 311, 257, 2671, 22178, 670, 510, 11, 457, 445, 11, 291, 458, 11, 257, 2522, 295, 5192, 11, 309, 307, 4664, 1021, 281, 652, 988, 300, 291, 434, 38916, 4997, 428, 50160, 11, 51114], "temperature": 0.0, "avg_logprob": -0.09353699815382652, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.0025828678626567125}, {"id": 157, "seek": 76400, "start": 779.0, "end": 785.0, "text": " because if the restore does not work, the backup is absolutely useless.", "tokens": [51114, 570, 498, 264, 15227, 775, 406, 589, 11, 264, 14807, 307, 3122, 14115, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09353699815382652, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.0025828678626567125}, {"id": 158, "seek": 76400, "start": 785.0, "end": 793.0, "text": " And you will only discover that in the case of a disaster, and then, well, that's a double disaster.", "tokens": [51414, 400, 291, 486, 787, 4411, 300, 294, 264, 1389, 295, 257, 11293, 11, 293, 550, 11, 731, 11, 300, 311, 257, 3834, 11293, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09353699815382652, "compression_ratio": 1.6488549618320612, "no_speech_prob": 0.0025828678626567125}, {"id": 159, "seek": 79300, "start": 793.0, "end": 801.0, "text": " Another form of clusters that you can have is a multi-node cluster with an active-active configuration.", "tokens": [50364, 3996, 1254, 295, 23313, 300, 291, 393, 362, 307, 257, 4825, 12, 77, 1429, 13630, 365, 364, 4967, 12, 12596, 11694, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10728036244710286, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.010778678581118584}, {"id": 160, "seek": 79300, "start": 801.0, "end": 805.0, "text": " In the previous configuration, we had a single active node with two stand-byes.", "tokens": [50764, 682, 264, 3894, 11694, 11, 321, 632, 257, 2167, 4967, 9984, 365, 732, 1463, 12, 2322, 279, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10728036244710286, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.010778678581118584}, {"id": 161, "seek": 79300, "start": 805.0, "end": 813.0, "text": " In this configuration, you've got multiple actives where your application can both read and write on all of the nodes in the cluster.", "tokens": [50964, 682, 341, 11694, 11, 291, 600, 658, 3866, 605, 1539, 689, 428, 3861, 393, 1293, 1401, 293, 2464, 322, 439, 295, 264, 13891, 294, 264, 13630, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10728036244710286, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.010778678581118584}, {"id": 162, "seek": 81300, "start": 814.0, "end": 823.0, "text": " Now, this is a little tricky, and the topic also tends to be a little thorny when you're discussing this with enthusiasts.", "tokens": [50414, 823, 11, 341, 307, 257, 707, 12414, 11, 293, 264, 4829, 611, 12258, 281, 312, 257, 707, 11588, 1634, 562, 291, 434, 10850, 341, 365, 45873, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09125517095838274, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.27674126625061035}, {"id": 163, "seek": 81300, "start": 823.0, "end": 832.0, "text": " And the key point over here is that you have to have your conflict resolution at the application level.", "tokens": [50864, 400, 264, 2141, 935, 670, 510, 307, 300, 291, 362, 281, 362, 428, 6596, 8669, 412, 264, 3861, 1496, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09125517095838274, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.27674126625061035}, {"id": 164, "seek": 81300, "start": 832.0, "end": 839.0, "text": " The database, at least Postgres, the way the open source Postgres works, does not have the capability to resolve the conflicts for you.", "tokens": [51314, 440, 8149, 11, 412, 1935, 10223, 45189, 11, 264, 636, 264, 1269, 4009, 10223, 45189, 1985, 11, 775, 406, 362, 264, 13759, 281, 14151, 264, 19807, 337, 291, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09125517095838274, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.27674126625061035}, {"id": 165, "seek": 83900, "start": 839.0, "end": 847.0, "text": " So in case the application writes on active one and does an update of the same data on active two,", "tokens": [50364, 407, 294, 1389, 264, 3861, 13657, 322, 4967, 472, 293, 775, 364, 5623, 295, 264, 912, 1412, 322, 4967, 732, 11, 50764], "temperature": 0.0, "avg_logprob": -0.10002958256265392, "compression_ratio": 1.8468468468468469, "no_speech_prob": 0.010798483155667782}, {"id": 166, "seek": 83900, "start": 847.0, "end": 853.0, "text": " there's a conflict as active one and active two try to replicate data to each other,", "tokens": [50764, 456, 311, 257, 6596, 382, 4967, 472, 293, 4967, 732, 853, 281, 25356, 1412, 281, 1184, 661, 11, 51064], "temperature": 0.0, "avg_logprob": -0.10002958256265392, "compression_ratio": 1.8468468468468469, "no_speech_prob": 0.010798483155667782}, {"id": 167, "seek": 83900, "start": 853.0, "end": 857.0, "text": " that conflict where the database will not be able to resolve that conflict.", "tokens": [51064, 300, 6596, 689, 264, 8149, 486, 406, 312, 1075, 281, 14151, 300, 6596, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10002958256265392, "compression_ratio": 1.8468468468468469, "no_speech_prob": 0.010798483155667782}, {"id": 168, "seek": 83900, "start": 857.0, "end": 861.0, "text": " It's the application that needs to be active-active aware.", "tokens": [51264, 467, 311, 264, 3861, 300, 2203, 281, 312, 4967, 12, 12596, 3650, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10002958256265392, "compression_ratio": 1.8468468468468469, "no_speech_prob": 0.010798483155667782}, {"id": 169, "seek": 83900, "start": 861.0, "end": 867.0, "text": " This is asynchronous replication between nodes, and this architecture is shared everything,", "tokens": [51464, 639, 307, 49174, 39911, 1296, 13891, 11, 293, 341, 9482, 307, 5507, 1203, 11, 51764], "temperature": 0.0, "avg_logprob": -0.10002958256265392, "compression_ratio": 1.8468468468468469, "no_speech_prob": 0.010798483155667782}, {"id": 170, "seek": 86700, "start": 867.0, "end": 871.0, "text": " which means that all of the data is written to all of the nodes.", "tokens": [50364, 597, 1355, 300, 439, 295, 264, 1412, 307, 3720, 281, 439, 295, 264, 13891, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0907246782666161, "compression_ratio": 1.803191489361702, "no_speech_prob": 0.0012617016909644008}, {"id": 171, "seek": 86700, "start": 871.0, "end": 875.0, "text": " The data is replicated to all of the nodes.", "tokens": [50564, 440, 1412, 307, 46365, 281, 439, 295, 264, 13891, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0907246782666161, "compression_ratio": 1.803191489361702, "no_speech_prob": 0.0012617016909644008}, {"id": 172, "seek": 86700, "start": 875.0, "end": 884.0, "text": " And then, you've got another cluster, which is multi-node with data sharding and horizontal scaling.", "tokens": [50764, 400, 550, 11, 291, 600, 658, 1071, 13630, 11, 597, 307, 4825, 12, 77, 1429, 365, 1412, 402, 515, 278, 293, 12750, 21589, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0907246782666161, "compression_ratio": 1.803191489361702, "no_speech_prob": 0.0012617016909644008}, {"id": 173, "seek": 86700, "start": 884.0, "end": 894.0, "text": " This architecture is shared nothing, which means that no data is shared between the nodes across which the data is being sharded.", "tokens": [51214, 639, 9482, 307, 5507, 1825, 11, 597, 1355, 300, 572, 1412, 307, 5507, 1296, 264, 13891, 2108, 597, 264, 1412, 307, 885, 402, 22803, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0907246782666161, "compression_ratio": 1.803191489361702, "no_speech_prob": 0.0012617016909644008}, {"id": 174, "seek": 89400, "start": 894.0, "end": 903.0, "text": " So data is distributed and you can scale this cluster out horizontally, as much as you, well theoretically at least as much as you want to.", "tokens": [50364, 407, 1412, 307, 12631, 293, 291, 393, 4373, 341, 13630, 484, 33796, 11, 382, 709, 382, 291, 11, 731, 29400, 412, 1935, 382, 709, 382, 291, 528, 281, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1645636485173152, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.009254949167370796}, {"id": 175, "seek": 89400, "start": 903.0, "end": 915.0, "text": " There is a requirement of having a coordinator node up there, which decides which node to route the query to, which node to route the data to.", "tokens": [50814, 821, 307, 257, 11695, 295, 1419, 257, 27394, 9984, 493, 456, 11, 597, 14898, 597, 9984, 281, 7955, 264, 14581, 281, 11, 597, 9984, 281, 7955, 264, 1412, 281, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1645636485173152, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.009254949167370796}, {"id": 176, "seek": 91500, "start": 916.0, "end": 919.0, "text": " And you could set up automatic sharding.", "tokens": [50414, 400, 291, 727, 992, 493, 12509, 402, 515, 278, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10966243062700544, "compression_ratio": 1.5089820359281436, "no_speech_prob": 0.034528329968452454}, {"id": 177, "seek": 91500, "start": 919.0, "end": 927.0, "text": " You could also have the read and write operation automatically directed to the relevant nodes.", "tokens": [50564, 509, 727, 611, 362, 264, 1401, 293, 2464, 6916, 6772, 12898, 281, 264, 7340, 13891, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10966243062700544, "compression_ratio": 1.5089820359281436, "no_speech_prob": 0.034528329968452454}, {"id": 178, "seek": 91500, "start": 927.0, "end": 936.0, "text": " And then, last of the architectures that I'm going to discuss in this conversation is globally distributed clusters.", "tokens": [50964, 400, 550, 11, 1036, 295, 264, 6331, 1303, 300, 286, 478, 516, 281, 2248, 294, 341, 3761, 307, 18958, 12631, 23313, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10966243062700544, "compression_ratio": 1.5089820359281436, "no_speech_prob": 0.034528329968452454}, {"id": 179, "seek": 93600, "start": 937.0, "end": 948.0, "text": " Now, theoretically speaking, the last two clusters that I described with active-active configurations and the sharding, you could have them globally distributed as well.", "tokens": [50414, 823, 11, 29400, 4124, 11, 264, 1036, 732, 23313, 300, 286, 7619, 365, 4967, 12, 12596, 31493, 293, 264, 402, 515, 278, 11, 291, 727, 362, 552, 18958, 12631, 382, 731, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08980000019073486, "compression_ratio": 1.5852534562211982, "no_speech_prob": 0.013569202274084091}, {"id": 180, "seek": 93600, "start": 948.0, "end": 964.0, "text": " But I have a separate slide for this, primarily because of one reason, and that is the specific requirement that different regulations can have about geofencing of your data.", "tokens": [50964, 583, 286, 362, 257, 4994, 4137, 337, 341, 11, 10029, 570, 295, 472, 1778, 11, 293, 300, 307, 264, 2685, 11695, 300, 819, 12563, 393, 362, 466, 1519, 2670, 13644, 295, 428, 1412, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08980000019073486, "compression_ratio": 1.5852534562211982, "no_speech_prob": 0.013569202274084091}, {"id": 181, "seek": 96400, "start": 964.0, "end": 975.0, "text": " So many different jurisdictions of the world are increasingly enforcing that their resident's data does not get outside of the country that they reside in.", "tokens": [50364, 407, 867, 819, 37958, 295, 264, 1002, 366, 12980, 25495, 2175, 300, 641, 10832, 311, 1412, 775, 406, 483, 2380, 295, 264, 1941, 300, 436, 40134, 294, 13, 50914], "temperature": 0.0, "avg_logprob": -0.061310706200537746, "compression_ratio": 1.65625, "no_speech_prob": 0.011245084926486015}, {"id": 182, "seek": 96400, "start": 975.0, "end": 982.0, "text": " And you want to make sure that you've got local data being stored locally and read locally.", "tokens": [50914, 400, 291, 528, 281, 652, 988, 300, 291, 600, 658, 2654, 1412, 885, 12187, 16143, 293, 1401, 16143, 13, 51264], "temperature": 0.0, "avg_logprob": -0.061310706200537746, "compression_ratio": 1.65625, "no_speech_prob": 0.011245084926486015}, {"id": 183, "seek": 96400, "start": 982.0, "end": 991.0, "text": " And with geographically distributed clusters and with the right configurations in place, you can implement that geofencing.", "tokens": [51264, 400, 365, 25435, 984, 12631, 23313, 293, 365, 264, 558, 31493, 294, 1081, 11, 291, 393, 4445, 300, 1519, 2670, 13644, 13, 51714], "temperature": 0.0, "avg_logprob": -0.061310706200537746, "compression_ratio": 1.65625, "no_speech_prob": 0.011245084926486015}, {"id": 184, "seek": 99100, "start": 991.0, "end": 1000.0, "text": " That, of course, also has a side impact of better performance because you're reading and writing locally instead of somewhere that's 10,000 miles away.", "tokens": [50364, 663, 11, 295, 1164, 11, 611, 575, 257, 1252, 2712, 295, 1101, 3389, 570, 291, 434, 3760, 293, 3579, 16143, 2602, 295, 4079, 300, 311, 1266, 11, 1360, 6193, 1314, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1111660437150435, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.00893108919262886}, {"id": 185, "seek": 99100, "start": 1003.0, "end": 1015.0, "text": " Now, talking about replication, primarily dividing it into two technologies, synchronous and asynchronous replication.", "tokens": [50964, 823, 11, 1417, 466, 39911, 11, 10029, 26764, 309, 666, 732, 7943, 11, 44743, 293, 49174, 39911, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1111660437150435, "compression_ratio": 1.4754098360655739, "no_speech_prob": 0.00893108919262886}, {"id": 186, "seek": 101500, "start": 1015.0, "end": 1020.0, "text": " I was just trying to explain over here a little bit about the differences between the two.", "tokens": [50364, 286, 390, 445, 1382, 281, 2903, 670, 510, 257, 707, 857, 466, 264, 7300, 1296, 264, 732, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1541734972307759, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.046591319143772125}, {"id": 187, "seek": 101500, "start": 1020.0, "end": 1031.0, "text": " Anyone over here who has not come across the concepts of synchronous and asynchronous replication have no idea what these two terms mean.", "tokens": [50614, 14643, 670, 510, 567, 575, 406, 808, 2108, 264, 10392, 295, 44743, 293, 49174, 39911, 362, 572, 1558, 437, 613, 732, 2115, 914, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1541734972307759, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.046591319143772125}, {"id": 188, "seek": 101500, "start": 1031.0, "end": 1036.0, "text": " Everybody already knows. I could have just skipped this slide.", "tokens": [51164, 7646, 1217, 3255, 13, 286, 727, 362, 445, 30193, 341, 4137, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1541734972307759, "compression_ratio": 1.5396825396825398, "no_speech_prob": 0.046591319143772125}, {"id": 189, "seek": 103600, "start": 1037.0, "end": 1046.0, "text": " That's fine. So very quickly, walking through some of these points, in synchronous replication, data is transferred immediately.", "tokens": [50414, 663, 311, 2489, 13, 407, 588, 2661, 11, 4494, 807, 512, 295, 613, 2793, 11, 294, 44743, 39911, 11, 1412, 307, 15809, 4258, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09396146403418647, "compression_ratio": 1.5990338164251208, "no_speech_prob": 0.006994559429585934}, {"id": 190, "seek": 103600, "start": 1046.0, "end": 1054.0, "text": " It is not committed till all nodes in the cluster acknowledge that they have the data and they can commit it.", "tokens": [50864, 467, 307, 406, 7784, 4288, 439, 13891, 294, 264, 13630, 10692, 300, 436, 362, 264, 1412, 293, 436, 393, 5599, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09396146403418647, "compression_ratio": 1.5990338164251208, "no_speech_prob": 0.006994559429585934}, {"id": 191, "seek": 103600, "start": 1054.0, "end": 1061.0, "text": " In case of asynchronous, the primary does not wait for that acknowledgement, that handshake.", "tokens": [51264, 682, 1389, 295, 49174, 11, 264, 6194, 775, 406, 1699, 337, 300, 47227, 11, 300, 2377, 34593, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09396146403418647, "compression_ratio": 1.5990338164251208, "no_speech_prob": 0.006994559429585934}, {"id": 192, "seek": 106100, "start": 1061.0, "end": 1068.0, "text": " It will just commit the data locally and will assume that the replicas will commit that data in due time.", "tokens": [50364, 467, 486, 445, 5599, 264, 1412, 16143, 293, 486, 6552, 300, 264, 3248, 9150, 486, 5599, 300, 1412, 294, 3462, 565, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08174280166625976, "compression_ratio": 1.6766169154228856, "no_speech_prob": 0.023951850831508636}, {"id": 193, "seek": 106100, "start": 1068.0, "end": 1078.0, "text": " What it does is with synchronous replication, there is a performance hit that you get because you need to wait for all of the nodes to agree that the data has been committed.", "tokens": [50714, 708, 309, 775, 307, 365, 44743, 39911, 11, 456, 307, 257, 3389, 2045, 300, 291, 483, 570, 291, 643, 281, 1699, 337, 439, 295, 264, 13891, 281, 3986, 300, 264, 1412, 575, 668, 7784, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08174280166625976, "compression_ratio": 1.6766169154228856, "no_speech_prob": 0.023951850831508636}, {"id": 194, "seek": 106100, "start": 1078.0, "end": 1082.0, "text": " And in asynchronous, you achieve much better efficiency.", "tokens": [51214, 400, 294, 49174, 11, 291, 4584, 709, 1101, 10493, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08174280166625976, "compression_ratio": 1.6766169154228856, "no_speech_prob": 0.023951850831508636}, {"id": 195, "seek": 108200, "start": 1082.0, "end": 1092.0, "text": " But also, there is that chance of inconsistency of data if you have an asynchronous replication set up in your cluster.", "tokens": [50364, 583, 611, 11, 456, 307, 300, 2931, 295, 22039, 468, 3020, 295, 1412, 498, 291, 362, 364, 49174, 39911, 992, 493, 294, 428, 13630, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10191498733148342, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.21075570583343506}, {"id": 196, "seek": 108200, "start": 1092.0, "end": 1099.0, "text": " It's faster, it's more scalable, but there is that little bit of data inconsistency problem.", "tokens": [50864, 467, 311, 4663, 11, 309, 311, 544, 38481, 11, 457, 456, 307, 300, 707, 857, 295, 1412, 22039, 468, 3020, 1154, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10191498733148342, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.21075570583343506}, {"id": 197, "seek": 108200, "start": 1099.0, "end": 1107.0, "text": " So in case it is absolutely critical for your application to have all of the data, all this consistent in all nodes of the cluster,", "tokens": [51214, 407, 294, 1389, 309, 307, 3122, 4924, 337, 428, 3861, 281, 362, 439, 295, 264, 1412, 11, 439, 341, 8398, 294, 439, 13891, 295, 264, 13630, 11, 51614], "temperature": 0.0, "avg_logprob": -0.10191498733148342, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.21075570583343506}, {"id": 198, "seek": 110700, "start": 1107.0, "end": 1115.0, "text": " synchronous replication is the way to go and you will need to take that performance hit.", "tokens": [50364, 44743, 39911, 307, 264, 636, 281, 352, 293, 291, 486, 643, 281, 747, 300, 3389, 2045, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1828281217151218, "compression_ratio": 1.2201834862385321, "no_speech_prob": 0.03381260111927986}, {"id": 199, "seek": 110700, "start": 1115.0, "end": 1120.0, "text": " Any questions so far before we move on?", "tokens": [50764, 2639, 1651, 370, 1400, 949, 321, 1286, 322, 30, 51014], "temperature": 0.0, "avg_logprob": -0.1828281217151218, "compression_ratio": 1.2201834862385321, "no_speech_prob": 0.03381260111927986}, {"id": 200, "seek": 110700, "start": 1120.0, "end": 1122.0, "text": " Yes?", "tokens": [51014, 1079, 30, 51114], "temperature": 0.0, "avg_logprob": -0.1828281217151218, "compression_ratio": 1.2201834862385321, "no_speech_prob": 0.03381260111927986}, {"id": 201, "seek": 112200, "start": 1122.0, "end": 1128.0, "text": " In asynchronous replication, you are saying data may be inconsistent.", "tokens": [50364, 682, 49174, 39911, 11, 291, 366, 1566, 1412, 815, 312, 36891, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3018512138953576, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.03332262858748436}, {"id": 202, "seek": 112200, "start": 1128.0, "end": 1138.0, "text": " It doesn't mean that some data may be lost in one of the replicas, so if you have to recover your data, some fun may be missing.", "tokens": [50664, 467, 1177, 380, 914, 300, 512, 1412, 815, 312, 2731, 294, 472, 295, 264, 3248, 9150, 11, 370, 498, 291, 362, 281, 8114, 428, 1412, 11, 512, 1019, 815, 312, 5361, 13, 51164], "temperature": 0.0, "avg_logprob": -0.3018512138953576, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.03332262858748436}, {"id": 203, "seek": 112200, "start": 1138.0, "end": 1142.0, "text": " And then how do you find that in the case of this?", "tokens": [51164, 400, 550, 577, 360, 291, 915, 300, 294, 264, 1389, 295, 341, 30, 51364], "temperature": 0.0, "avg_logprob": -0.3018512138953576, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.03332262858748436}, {"id": 204, "seek": 114200, "start": 1142.0, "end": 1150.0, "text": " Okay, so the question is that in case of asynchronous replication, if I say over here that the data may be inconsistent,", "tokens": [50364, 1033, 11, 370, 264, 1168, 307, 300, 294, 1389, 295, 49174, 39911, 11, 498, 286, 584, 670, 510, 300, 264, 1412, 815, 312, 36891, 11, 50764], "temperature": 0.0, "avg_logprob": -0.10798277999415543, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.024655919522047043}, {"id": 205, "seek": 114200, "start": 1150.0, "end": 1154.0, "text": " does that mean the data gets lost and if it does get lost, how do we recover it?", "tokens": [50764, 775, 300, 914, 264, 1412, 2170, 2731, 293, 498, 309, 775, 483, 2731, 11, 577, 360, 321, 8114, 309, 30, 50964], "temperature": 0.0, "avg_logprob": -0.10798277999415543, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.024655919522047043}, {"id": 206, "seek": 114200, "start": 1154.0, "end": 1155.0, "text": " That's the question, right?", "tokens": [50964, 663, 311, 264, 1168, 11, 558, 30, 51014], "temperature": 0.0, "avg_logprob": -0.10798277999415543, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.024655919522047043}, {"id": 207, "seek": 114200, "start": 1155.0, "end": 1157.0, "text": " Okay, thank you, very good.", "tokens": [51014, 1033, 11, 1309, 291, 11, 588, 665, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10798277999415543, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.024655919522047043}, {"id": 208, "seek": 114200, "start": 1157.0, "end": 1168.0, "text": " So the idea over here is that as the data is being shipped from the primary to the replica, there is a certain time lag.", "tokens": [51114, 407, 264, 1558, 670, 510, 307, 300, 382, 264, 1412, 307, 885, 25312, 490, 264, 6194, 281, 264, 35456, 11, 456, 307, 257, 1629, 565, 8953, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10798277999415543, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.024655919522047043}, {"id": 209, "seek": 116800, "start": 1168.0, "end": 1177.0, "text": " It could be in microseconds, but there is a certain time lag where the data exists in the primary and does not exist in the replica.", "tokens": [50364, 467, 727, 312, 294, 3123, 37841, 28750, 11, 457, 456, 307, 257, 1629, 565, 8953, 689, 264, 1412, 8198, 294, 264, 6194, 293, 775, 406, 2514, 294, 264, 35456, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0728925259216972, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.03295363113284111}, {"id": 210, "seek": 116800, "start": 1177.0, "end": 1185.0, "text": " And in that fraction of a second, if there is a query that runs across both of those nodes, it will return different datasets.", "tokens": [50814, 400, 294, 300, 14135, 295, 257, 1150, 11, 498, 456, 307, 257, 14581, 300, 6676, 2108, 1293, 295, 729, 13891, 11, 309, 486, 2736, 819, 42856, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0728925259216972, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.03295363113284111}, {"id": 211, "seek": 116800, "start": 1185.0, "end": 1188.0, "text": " That is a risk that you take.", "tokens": [51214, 663, 307, 257, 3148, 300, 291, 747, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0728925259216972, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.03295363113284111}, {"id": 212, "seek": 116800, "start": 1188.0, "end": 1196.0, "text": " Now, in case during that lag, during that time, the primary goes down,", "tokens": [51364, 823, 11, 294, 1389, 1830, 300, 8953, 11, 1830, 300, 565, 11, 264, 6194, 1709, 760, 11, 51764], "temperature": 0.0, "avg_logprob": -0.0728925259216972, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.03295363113284111}, {"id": 213, "seek": 119600, "start": 1196.0, "end": 1204.0, "text": " there are chances that the replica will never get that data and hence that data can be considered lost.", "tokens": [50364, 456, 366, 10486, 300, 264, 35456, 486, 1128, 483, 300, 1412, 293, 16678, 300, 1412, 393, 312, 4888, 2731, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10776310998040277, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.023610347881913185}, {"id": 214, "seek": 119600, "start": 1204.0, "end": 1210.0, "text": " Now, there are different ways to protect yourself against that kind of an eventuality.", "tokens": [50764, 823, 11, 456, 366, 819, 2098, 281, 2371, 1803, 1970, 300, 733, 295, 364, 33160, 507, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10776310998040277, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.023610347881913185}, {"id": 215, "seek": 119600, "start": 1210.0, "end": 1214.0, "text": " That includes being able to replay the right head logs.", "tokens": [51064, 663, 5974, 885, 1075, 281, 23836, 264, 558, 1378, 20820, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10776310998040277, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.023610347881913185}, {"id": 216, "seek": 119600, "start": 1214.0, "end": 1219.0, "text": " That includes just making sure that any data that is written is actually sent across.", "tokens": [51264, 663, 5974, 445, 1455, 988, 300, 604, 1412, 300, 307, 3720, 307, 767, 2279, 2108, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10776310998040277, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.023610347881913185}, {"id": 217, "seek": 121900, "start": 1219.0, "end": 1228.0, "text": " And so even if the primary node goes down or it crashes, the data is still in transit and the standby is going to eventually commit it.", "tokens": [50364, 400, 370, 754, 498, 264, 6194, 9984, 1709, 760, 420, 309, 28642, 11, 264, 1412, 307, 920, 294, 17976, 293, 264, 50170, 307, 516, 281, 4728, 5599, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0906416376431783, "compression_ratio": 1.4384615384615385, "no_speech_prob": 0.08042142540216446}, {"id": 218, "seek": 121900, "start": 1228.0, "end": 1231.0, "text": " But yes, there is a slight risk there of data loss.", "tokens": [50814, 583, 2086, 11, 456, 307, 257, 4036, 3148, 456, 295, 1412, 4470, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0906416376431783, "compression_ratio": 1.4384615384615385, "no_speech_prob": 0.08042142540216446}, {"id": 219, "seek": 123100, "start": 1231.0, "end": 1241.0, "text": " In case if you don't have this kind of disaster happening in the meantime, is there still a possibility that like,", "tokens": [50364, 682, 1389, 498, 291, 500, 380, 362, 341, 733, 295, 11293, 2737, 294, 264, 14991, 11, 307, 456, 920, 257, 7959, 300, 411, 11, 50864], "temperature": 0.0, "avg_logprob": -0.2880192620413644, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.7856775522232056}, {"id": 220, "seek": 123100, "start": 1241.0, "end": 1246.0, "text": " because like you're saying, the commits are not waiting.", "tokens": [50864, 570, 411, 291, 434, 1566, 11, 264, 48311, 366, 406, 3806, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2880192620413644, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.7856775522232056}, {"id": 221, "seek": 123100, "start": 1246.0, "end": 1257.0, "text": " So is there a possibility that there could be an incident that will fail or something goes wrong and like one commit just is missing?", "tokens": [51114, 407, 307, 456, 257, 7959, 300, 456, 727, 312, 364, 9348, 300, 486, 3061, 420, 746, 1709, 2085, 293, 411, 472, 5599, 445, 307, 5361, 30, 51664], "temperature": 0.0, "avg_logprob": -0.2880192620413644, "compression_ratio": 1.5885416666666667, "no_speech_prob": 0.7856775522232056}, {"id": 222, "seek": 125700, "start": 1257.0, "end": 1262.0, "text": " If nothing goes wrong, is there a guarantee that there is?", "tokens": [50364, 759, 1825, 1709, 2085, 11, 307, 456, 257, 10815, 300, 456, 307, 30, 50614], "temperature": 0.0, "avg_logprob": -0.18813551734475528, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.015848316252231598}, {"id": 223, "seek": 125700, "start": 1262.0, "end": 1271.0, "text": " So at the database level, because Postgres is compliant with Acid, it is going to be consistent.", "tokens": [50614, 407, 412, 264, 8149, 1496, 11, 570, 10223, 45189, 307, 36248, 365, 5097, 327, 11, 309, 307, 516, 281, 312, 8398, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18813551734475528, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.015848316252231598}, {"id": 224, "seek": 125700, "start": 1271.0, "end": 1275.0, "text": " Within the cluster, however, there is a lag.", "tokens": [51064, 15996, 264, 13630, 11, 4461, 11, 456, 307, 257, 8953, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18813551734475528, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.015848316252231598}, {"id": 225, "seek": 125700, "start": 1275.0, "end": 1277.0, "text": " We're going to discuss the application lag in just a little bit.", "tokens": [51264, 492, 434, 516, 281, 2248, 264, 3861, 8953, 294, 445, 257, 707, 857, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18813551734475528, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.015848316252231598}, {"id": 226, "seek": 125700, "start": 1277.0, "end": 1281.0, "text": " It's one of the challenges in setting up clusters like this.", "tokens": [51364, 467, 311, 472, 295, 264, 4759, 294, 3287, 493, 23313, 411, 341, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18813551734475528, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.015848316252231598}, {"id": 227, "seek": 128100, "start": 1281.0, "end": 1283.0, "text": " But you're right.", "tokens": [50364, 583, 291, 434, 558, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08662671458964445, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.04461625963449478}, {"id": 228, "seek": 128100, "start": 1283.0, "end": 1289.0, "text": " When we talked about the load balanced cluster in just a couple of slides ago,", "tokens": [50464, 1133, 321, 2825, 466, 264, 3677, 13902, 13630, 294, 445, 257, 1916, 295, 9788, 2057, 11, 50764], "temperature": 0.0, "avg_logprob": -0.08662671458964445, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.04461625963449478}, {"id": 229, "seek": 128100, "start": 1289.0, "end": 1301.0, "text": " one of the things to keep in mind when you have a load balanced cluster and you're reading from the replica instead of the primary node is the fact that there is a lag between the primary and the replica.", "tokens": [50764, 472, 295, 264, 721, 281, 1066, 294, 1575, 562, 291, 362, 257, 3677, 13902, 13630, 293, 291, 434, 3760, 490, 264, 35456, 2602, 295, 264, 6194, 9984, 307, 264, 1186, 300, 456, 307, 257, 8953, 1296, 264, 6194, 293, 264, 35456, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08662671458964445, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.04461625963449478}, {"id": 230, "seek": 128100, "start": 1301.0, "end": 1309.0, "text": " And when you are reading data from the replica, there's a possibility that some of the data has not yet been written.", "tokens": [51364, 400, 562, 291, 366, 3760, 1412, 490, 264, 35456, 11, 456, 311, 257, 7959, 300, 512, 295, 264, 1412, 575, 406, 1939, 668, 3720, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08662671458964445, "compression_ratio": 1.8458149779735682, "no_speech_prob": 0.04461625963449478}, {"id": 231, "seek": 130900, "start": 1309.0, "end": 1311.0, "text": " Does that help?", "tokens": [50364, 4402, 300, 854, 30, 50464], "temperature": 0.0, "avg_logprob": -0.22993359565734864, "compression_ratio": 1.8633540372670807, "no_speech_prob": 0.036576807498931885}, {"id": 232, "seek": 130900, "start": 1311.0, "end": 1313.0, "text": " Yes.", "tokens": [50464, 1079, 13, 50564], "temperature": 0.0, "avg_logprob": -0.22993359565734864, "compression_ratio": 1.8633540372670807, "no_speech_prob": 0.036576807498931885}, {"id": 233, "seek": 130900, "start": 1313.0, "end": 1316.0, "text": " What's the maximum network latency?", "tokens": [50564, 708, 311, 264, 6674, 3209, 27043, 30, 50714], "temperature": 0.0, "avg_logprob": -0.22993359565734864, "compression_ratio": 1.8633540372670807, "no_speech_prob": 0.036576807498931885}, {"id": 234, "seek": 130900, "start": 1316.0, "end": 1318.0, "text": " I'm sorry, I can barely hear you.", "tokens": [50714, 286, 478, 2597, 11, 286, 393, 10268, 1568, 291, 13, 50814], "temperature": 0.0, "avg_logprob": -0.22993359565734864, "compression_ratio": 1.8633540372670807, "no_speech_prob": 0.036576807498931885}, {"id": 235, "seek": 130900, "start": 1318.0, "end": 1328.0, "text": " What's the maximum network latency to build up the cluster for synchronous and asynchronous?", "tokens": [50814, 708, 311, 264, 6674, 3209, 27043, 281, 1322, 493, 264, 13630, 337, 44743, 293, 49174, 30, 51314], "temperature": 0.0, "avg_logprob": -0.22993359565734864, "compression_ratio": 1.8633540372670807, "no_speech_prob": 0.036576807498931885}, {"id": 236, "seek": 130900, "start": 1328.0, "end": 1334.0, "text": " So the question is what's the maximum network latency that you can use to build up the replica?", "tokens": [51314, 407, 264, 1168, 307, 437, 311, 264, 6674, 3209, 27043, 300, 291, 393, 764, 281, 1322, 493, 264, 35456, 30, 51614], "temperature": 0.0, "avg_logprob": -0.22993359565734864, "compression_ratio": 1.8633540372670807, "no_speech_prob": 0.036576807498931885}, {"id": 237, "seek": 130900, "start": 1334.0, "end": 1335.0, "text": " That's the question.", "tokens": [51614, 663, 311, 264, 1168, 13, 51664], "temperature": 0.0, "avg_logprob": -0.22993359565734864, "compression_ratio": 1.8633540372670807, "no_speech_prob": 0.036576807498931885}, {"id": 238, "seek": 133500, "start": 1335.0, "end": 1343.0, "text": " I think that's a fairly open-ended question and I'm afraid I may not be able to give you a very precise answer.", "tokens": [50364, 286, 519, 300, 311, 257, 6457, 1269, 12, 3502, 1168, 293, 286, 478, 4638, 286, 815, 406, 312, 1075, 281, 976, 291, 257, 588, 13600, 1867, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09029296800202015, "compression_ratio": 1.66793893129771, "no_speech_prob": 0.016120439395308495}, {"id": 239, "seek": 133500, "start": 1343.0, "end": 1347.0, "text": " There's a lot of variables involved in designing that kind of an architecture.", "tokens": [50764, 821, 311, 257, 688, 295, 9102, 3288, 294, 14685, 300, 733, 295, 364, 9482, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09029296800202015, "compression_ratio": 1.66793893129771, "no_speech_prob": 0.016120439395308495}, {"id": 240, "seek": 133500, "start": 1347.0, "end": 1360.0, "text": " Network latency, and again, this is something that we're going to be discussing in a moment, depends on a lot of factors including, well, actually, it depends on a lot of factors and not all of those factors are directly related to your database.", "tokens": [50964, 12640, 27043, 11, 293, 797, 11, 341, 307, 746, 300, 321, 434, 516, 281, 312, 10850, 294, 257, 1623, 11, 5946, 322, 257, 688, 295, 6771, 3009, 11, 731, 11, 767, 11, 309, 5946, 322, 257, 688, 295, 6771, 293, 406, 439, 295, 729, 6771, 366, 3838, 4077, 281, 428, 8149, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09029296800202015, "compression_ratio": 1.66793893129771, "no_speech_prob": 0.016120439395308495}, {"id": 241, "seek": 136000, "start": 1360.0, "end": 1371.0, "text": " So it is related to your hardware, it is related to the network connectivity, it is related to the medium of connections that you've established between the two nodes, how far the two nodes are, you know, spread.", "tokens": [50364, 407, 309, 307, 4077, 281, 428, 8837, 11, 309, 307, 4077, 281, 264, 3209, 21095, 11, 309, 307, 4077, 281, 264, 6399, 295, 9271, 300, 291, 600, 7545, 1296, 264, 732, 13891, 11, 577, 1400, 264, 732, 13891, 366, 11, 291, 458, 11, 3974, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0975783367951711, "compression_ratio": 1.9248826291079812, "no_speech_prob": 0.10184679180383682}, {"id": 242, "seek": 136000, "start": 1371.0, "end": 1373.0, "text": " So there's a lot of variables involved.", "tokens": [50914, 407, 456, 311, 257, 688, 295, 9102, 3288, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0975783367951711, "compression_ratio": 1.9248826291079812, "no_speech_prob": 0.10184679180383682}, {"id": 243, "seek": 136000, "start": 1373.0, "end": 1386.0, "text": " And as you design the cluster, you need to be, you need to recognize those variables and you need to design the cluster based on what you have and allow for,", "tokens": [51014, 400, 382, 291, 1715, 264, 13630, 11, 291, 643, 281, 312, 11, 291, 643, 281, 5521, 729, 9102, 293, 291, 643, 281, 1715, 264, 13630, 2361, 322, 437, 291, 362, 293, 2089, 337, 11, 51664], "temperature": 0.0, "avg_logprob": -0.0975783367951711, "compression_ratio": 1.9248826291079812, "no_speech_prob": 0.10184679180383682}, {"id": 244, "seek": 138600, "start": 1387.0, "end": 1395.0, "text": " and you should have allowances for some of those, some of that lag and some of those nuances of the network that you have.", "tokens": [50414, 293, 291, 820, 362, 2089, 2676, 337, 512, 295, 729, 11, 512, 295, 300, 8953, 293, 512, 295, 729, 38775, 295, 264, 3209, 300, 291, 362, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14488409800701832, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.05726141110062599}, {"id": 245, "seek": 138600, "start": 1395.0, "end": 1397.0, "text": " All right.", "tokens": [50814, 1057, 558, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14488409800701832, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.05726141110062599}, {"id": 246, "seek": 138600, "start": 1399.0, "end": 1402.0, "text": " Okay, let's move forward.", "tokens": [51014, 1033, 11, 718, 311, 1286, 2128, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14488409800701832, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.05726141110062599}, {"id": 247, "seek": 138600, "start": 1405.0, "end": 1407.0, "text": " Actually, this has absolutely nothing to do with my presentation.", "tokens": [51314, 5135, 11, 341, 575, 3122, 1825, 281, 360, 365, 452, 5860, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14488409800701832, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.05726141110062599}, {"id": 248, "seek": 138600, "start": 1407.0, "end": 1412.0, "text": " I just put it up there because, well, I don't want it to be too dry, right?", "tokens": [51414, 286, 445, 829, 309, 493, 456, 570, 11, 731, 11, 286, 500, 380, 528, 309, 281, 312, 886, 4016, 11, 558, 30, 51664], "temperature": 0.0, "avg_logprob": -0.14488409800701832, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.05726141110062599}, {"id": 249, "seek": 141200, "start": 1412.0, "end": 1430.0, "text": " Okay, so, yeah, now we come to the part of the challenges that you face in clustering, as you set up clusters of Postgres, and there are four, and this is in no way a comprehensive list of challenges.", "tokens": [50364, 1033, 11, 370, 11, 1338, 11, 586, 321, 808, 281, 264, 644, 295, 264, 4759, 300, 291, 1851, 294, 596, 48673, 11, 382, 291, 992, 493, 23313, 295, 10223, 45189, 11, 293, 456, 366, 1451, 11, 293, 341, 307, 294, 572, 636, 257, 13914, 1329, 295, 4759, 13, 51264], "temperature": 0.0, "avg_logprob": -0.16897186866173378, "compression_ratio": 1.4814814814814814, "no_speech_prob": 0.003810855792835355}, {"id": 250, "seek": 143000, "start": 1430.0, "end": 1454.0, "text": " And as we go into each of these challenges, I will also not be able to cover all aspects of these four points, but this is just to give you an overview of the kind of variables and the kinds of, you know, points that a DBA would typically need to keep in mind as they go about designing a cluster and make sure that they are highly available.", "tokens": [50364, 400, 382, 321, 352, 666, 1184, 295, 613, 4759, 11, 286, 486, 611, 406, 312, 1075, 281, 2060, 439, 7270, 295, 613, 1451, 2793, 11, 457, 341, 307, 445, 281, 976, 291, 364, 12492, 295, 264, 733, 295, 9102, 293, 264, 3685, 295, 11, 291, 458, 11, 2793, 300, 257, 413, 9295, 576, 5850, 643, 281, 1066, 294, 1575, 382, 436, 352, 466, 14685, 257, 13630, 293, 652, 988, 300, 436, 366, 5405, 2435, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08114459243001818, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.30642572045326233}, {"id": 251, "seek": 145400, "start": 1455.0, "end": 1460.0, "text": " And the first point that we're going to discuss is split brain.", "tokens": [50414, 400, 264, 700, 935, 300, 321, 434, 516, 281, 2248, 307, 7472, 3567, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14997425946322354, "compression_ratio": 1.585, "no_speech_prob": 0.07775875180959702}, {"id": 252, "seek": 145400, "start": 1460.0, "end": 1469.0, "text": " Now, anybody over here who, again, and I'm going to ask that question in a different way, has never heard of split brain, does not know what that is.", "tokens": [50664, 823, 11, 4472, 670, 510, 567, 11, 797, 11, 293, 286, 478, 516, 281, 1029, 300, 1168, 294, 257, 819, 636, 11, 575, 1128, 2198, 295, 7472, 3567, 11, 775, 406, 458, 437, 300, 307, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14997425946322354, "compression_ratio": 1.585, "no_speech_prob": 0.07775875180959702}, {"id": 253, "seek": 145400, "start": 1469.0, "end": 1474.0, "text": " Okay, a few hands went up. Good. So the next few slides are not wasted.", "tokens": [51114, 1033, 11, 257, 1326, 2377, 1437, 493, 13, 2205, 13, 407, 264, 958, 1326, 9788, 366, 406, 19496, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14997425946322354, "compression_ratio": 1.585, "no_speech_prob": 0.07775875180959702}, {"id": 254, "seek": 145400, "start": 1475.0, "end": 1480.0, "text": " Okay, so what is a split brain?", "tokens": [51414, 1033, 11, 370, 437, 307, 257, 7472, 3567, 30, 51664], "temperature": 0.0, "avg_logprob": -0.14997425946322354, "compression_ratio": 1.585, "no_speech_prob": 0.07775875180959702}, {"id": 255, "seek": 148000, "start": 1481.0, "end": 1490.0, "text": " It's a situation where two or more nodes in a cluster start to think that they are the primary.", "tokens": [50414, 467, 311, 257, 2590, 689, 732, 420, 544, 13891, 294, 257, 13630, 722, 281, 519, 300, 436, 366, 264, 6194, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07894076241387261, "compression_ratio": 2.0842105263157893, "no_speech_prob": 0.025126073509454727}, {"id": 256, "seek": 148000, "start": 1490.0, "end": 1509.0, "text": " For whatever reason, there are different reasons for that. There could be different reasons for that, but for whatever reason, two or more nodes, if they start to think that they are the primary, they will lead to a situation that can cause data inconsistency, inconsistency that can cause data loss.", "tokens": [50864, 1171, 2035, 1778, 11, 456, 366, 819, 4112, 337, 300, 13, 821, 727, 312, 819, 4112, 337, 300, 11, 457, 337, 2035, 1778, 11, 732, 420, 544, 13891, 11, 498, 436, 722, 281, 519, 300, 436, 366, 264, 6194, 11, 436, 486, 1477, 281, 257, 2590, 300, 393, 3082, 1412, 22039, 468, 3020, 11, 22039, 468, 3020, 300, 393, 3082, 1412, 4470, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07894076241387261, "compression_ratio": 2.0842105263157893, "no_speech_prob": 0.025126073509454727}, {"id": 257, "seek": 150900, "start": 1509.0, "end": 1513.0, "text": " And the scenario that is called split brain.", "tokens": [50364, 400, 264, 9005, 300, 307, 1219, 7472, 3567, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09420414690701466, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.03200981020927429}, {"id": 258, "seek": 150900, "start": 1513.0, "end": 1529.0, "text": " And it could be caused by connectivity problems. It could be caused by latency. It could be caused by a server locking up because of, I don't know, a long running query.", "tokens": [50564, 400, 309, 727, 312, 7008, 538, 21095, 2740, 13, 467, 727, 312, 7008, 538, 27043, 13, 467, 727, 312, 7008, 538, 257, 7154, 23954, 493, 570, 295, 11, 286, 500, 380, 458, 11, 257, 938, 2614, 14581, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09420414690701466, "compression_ratio": 1.5970149253731343, "no_speech_prob": 0.03200981020927429}, {"id": 259, "seek": 152900, "start": 1529.0, "end": 1541.0, "text": " There are many different things that could cause it, but whatever causes it, it's a difficult situation to be in and it's a difficult situation to resolve.", "tokens": [50364, 821, 366, 867, 819, 721, 300, 727, 3082, 309, 11, 457, 2035, 7700, 309, 11, 309, 311, 257, 2252, 2590, 281, 312, 294, 293, 309, 311, 257, 2252, 2590, 281, 14151, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10816353797912598, "compression_ratio": 1.5147058823529411, "no_speech_prob": 0.030168725177645683}, {"id": 260, "seek": 152900, "start": 1541.0, "end": 1548.0, "text": " Now, a few ways to prevent a split brain scenario.", "tokens": [50964, 823, 11, 257, 1326, 2098, 281, 4871, 257, 7472, 3567, 9005, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10816353797912598, "compression_ratio": 1.5147058823529411, "no_speech_prob": 0.030168725177645683}, {"id": 261, "seek": 154800, "start": 1549.0, "end": 1554.0, "text": " So the first one is to use a reliable cluster manager.", "tokens": [50414, 407, 264, 700, 472, 307, 281, 764, 257, 12924, 13630, 6598, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11874182224273681, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.019991816952824593}, {"id": 262, "seek": 154800, "start": 1554.0, "end": 1566.0, "text": " Doing it manually, writing scripts, et cetera, you know, it will still leave a few holes that are, that can cause the problem to recur.", "tokens": [50664, 18496, 309, 16945, 11, 3579, 23294, 11, 1030, 11458, 11, 291, 458, 11, 309, 486, 920, 1856, 257, 1326, 8118, 300, 366, 11, 300, 393, 3082, 264, 1154, 281, 18680, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11874182224273681, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.019991816952824593}, {"id": 263, "seek": 154800, "start": 1566.0, "end": 1573.0, "text": " There are cluster managers, there are tools out there that can help you. We'll talk about them a little later in this presentation as well.", "tokens": [51264, 821, 366, 13630, 14084, 11, 456, 366, 3873, 484, 456, 300, 393, 854, 291, 13, 492, 603, 751, 466, 552, 257, 707, 1780, 294, 341, 5860, 382, 731, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11874182224273681, "compression_ratio": 1.625615763546798, "no_speech_prob": 0.019991816952824593}, {"id": 264, "seek": 157300, "start": 1573.0, "end": 1584.0, "text": " And what they do is that they implement algorithms and heart rate mechanisms to monitor and automate the whole process of cluster management.", "tokens": [50364, 400, 437, 436, 360, 307, 300, 436, 4445, 14642, 293, 1917, 3314, 15902, 281, 6002, 293, 31605, 264, 1379, 1399, 295, 13630, 4592, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11350832758723078, "compression_ratio": 1.5954545454545455, "no_speech_prob": 0.12202578783035278}, {"id": 265, "seek": 157300, "start": 1584.0, "end": 1593.0, "text": " And because these tools are designed to make the decisions for auto failover, they will help you prevent a split brain situation.", "tokens": [50914, 400, 570, 613, 3873, 366, 4761, 281, 652, 264, 5327, 337, 8399, 3061, 3570, 11, 436, 486, 854, 291, 4871, 257, 7472, 3567, 2590, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11350832758723078, "compression_ratio": 1.5954545454545455, "no_speech_prob": 0.12202578783035278}, {"id": 266, "seek": 157300, "start": 1593.0, "end": 1599.0, "text": " Another thing to keep in mind is do what's called quorum based decision making.", "tokens": [51364, 3996, 551, 281, 1066, 294, 1575, 307, 360, 437, 311, 1219, 421, 36543, 2361, 3537, 1455, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11350832758723078, "compression_ratio": 1.5954545454545455, "no_speech_prob": 0.12202578783035278}, {"id": 267, "seek": 159900, "start": 1599.0, "end": 1608.0, "text": " And essentially what that means is that a majority of the nodes need to agree which node is the primary.", "tokens": [50364, 400, 4476, 437, 300, 1355, 307, 300, 257, 6286, 295, 264, 13891, 643, 281, 3986, 597, 9984, 307, 264, 6194, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06400843670493678, "compression_ratio": 1.8045454545454545, "no_speech_prob": 0.07885070145130157}, {"id": 268, "seek": 159900, "start": 1608.0, "end": 1616.0, "text": " This also means that there's a requirement that an odd number of nodes, a cluster should be made off an odd number of nodes instead of even.", "tokens": [50814, 639, 611, 1355, 300, 456, 311, 257, 11695, 300, 364, 7401, 1230, 295, 13891, 11, 257, 13630, 820, 312, 1027, 766, 364, 7401, 1230, 295, 13891, 2602, 295, 754, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06400843670493678, "compression_ratio": 1.8045454545454545, "no_speech_prob": 0.07885070145130157}, {"id": 269, "seek": 159900, "start": 1616.0, "end": 1626.0, "text": " Because if you want to do, if you want to rely on some voting on some quorum based process, you need to have an odd number of nodes that could vote in.", "tokens": [51214, 1436, 498, 291, 528, 281, 360, 11, 498, 291, 528, 281, 10687, 322, 512, 10419, 322, 512, 421, 36543, 2361, 1399, 11, 291, 643, 281, 362, 364, 7401, 1230, 295, 13891, 300, 727, 4740, 294, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06400843670493678, "compression_ratio": 1.8045454545454545, "no_speech_prob": 0.07885070145130157}, {"id": 270, "seek": 162600, "start": 1626.0, "end": 1633.0, "text": " Let's say in a particular case, you've got a primary that is operating as per what it thinks is normal.", "tokens": [50364, 961, 311, 584, 294, 257, 1729, 1389, 11, 291, 600, 658, 257, 6194, 300, 307, 7447, 382, 680, 437, 309, 7309, 307, 2710, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08996984693739149, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.23825840651988983}, {"id": 271, "seek": 162600, "start": 1633.0, "end": 1639.0, "text": " And one of the stand-byes loses contact with that primary and begins to think that it needs to take over as the primary.", "tokens": [50714, 400, 472, 295, 264, 1463, 12, 2322, 279, 18293, 3385, 365, 300, 6194, 293, 7338, 281, 519, 300, 309, 2203, 281, 747, 670, 382, 264, 6194, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08996984693739149, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.23825840651988983}, {"id": 272, "seek": 162600, "start": 1639.0, "end": 1645.0, "text": " Now you've got the original primary and one node both acting as primary.", "tokens": [51014, 823, 291, 600, 658, 264, 3380, 6194, 293, 472, 9984, 1293, 6577, 382, 6194, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08996984693739149, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.23825840651988983}, {"id": 273, "seek": 162600, "start": 1645.0, "end": 1651.0, "text": " You need to have a tiebreaker in place that will say that, hey, stand by one, you're wrong. The primary is still working.", "tokens": [51314, 509, 643, 281, 362, 257, 7582, 43847, 294, 1081, 300, 486, 584, 300, 11, 4177, 11, 1463, 538, 472, 11, 291, 434, 2085, 13, 440, 6194, 307, 920, 1364, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08996984693739149, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.23825840651988983}, {"id": 274, "seek": 162600, "start": 1651.0, "end": 1655.0, "text": " You just lost connection with it. So you need to, you know, stand down.", "tokens": [51614, 509, 445, 2731, 4984, 365, 309, 13, 407, 291, 643, 281, 11, 291, 458, 11, 1463, 760, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08996984693739149, "compression_ratio": 1.8051470588235294, "no_speech_prob": 0.23825840651988983}, {"id": 275, "seek": 165500, "start": 1655.0, "end": 1658.0, "text": " So that's what the, what quorum based decision making is.", "tokens": [50364, 407, 300, 311, 437, 264, 11, 437, 421, 36543, 2361, 3537, 1455, 307, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13672525684038797, "compression_ratio": 1.7935779816513762, "no_speech_prob": 0.0058859228156507015}, {"id": 276, "seek": 165500, "start": 1658.0, "end": 1670.0, "text": " Now in case there's some, and this is something that we, you know, sometimes work with our customers at times that are requirements from the customer that says that, well, you know, we can only have two nodes.", "tokens": [50514, 823, 294, 1389, 456, 311, 512, 11, 293, 341, 307, 746, 300, 321, 11, 291, 458, 11, 2171, 589, 365, 527, 4581, 412, 1413, 300, 366, 7728, 490, 264, 5474, 300, 1619, 300, 11, 731, 11, 291, 458, 11, 321, 393, 787, 362, 732, 13891, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13672525684038797, "compression_ratio": 1.7935779816513762, "no_speech_prob": 0.0058859228156507015}, {"id": 277, "seek": 165500, "start": 1670.0, "end": 1676.0, "text": " We cannot have more than that. Or we can only have an even number of nodes, not an odd number of nodes for whatever reason.", "tokens": [51114, 492, 2644, 362, 544, 813, 300, 13, 1610, 321, 393, 787, 362, 364, 754, 1230, 295, 13891, 11, 406, 364, 7401, 1230, 295, 13891, 337, 2035, 1778, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13672525684038797, "compression_ratio": 1.7935779816513762, "no_speech_prob": 0.0058859228156507015}, {"id": 278, "seek": 167600, "start": 1676.0, "end": 1687.0, "text": " In that case, we implement a witness node, which does not hold data, but can be a voter in the quorum process in order to act as a tiebreaker.", "tokens": [50364, 682, 300, 1389, 11, 321, 4445, 257, 7286, 9984, 11, 597, 775, 406, 1797, 1412, 11, 457, 393, 312, 257, 21722, 294, 264, 421, 36543, 1399, 294, 1668, 281, 605, 382, 257, 7582, 43847, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08111936871598406, "compression_ratio": 1.6288659793814433, "no_speech_prob": 0.4364107847213745}, {"id": 279, "seek": 167600, "start": 1687.0, "end": 1690.0, "text": " So that's what the witness server does.", "tokens": [50914, 407, 300, 311, 437, 264, 7286, 7154, 775, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08111936871598406, "compression_ratio": 1.6288659793814433, "no_speech_prob": 0.4364107847213745}, {"id": 280, "seek": 167600, "start": 1690.0, "end": 1698.0, "text": " And, you know, you want to make sure in order to prevent a split print scenario, you want to make sure that your network is reliable.", "tokens": [51064, 400, 11, 291, 458, 11, 291, 528, 281, 652, 988, 294, 1668, 281, 4871, 257, 7472, 4482, 9005, 11, 291, 528, 281, 652, 988, 300, 428, 3209, 307, 12924, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08111936871598406, "compression_ratio": 1.6288659793814433, "no_speech_prob": 0.4364107847213745}, {"id": 281, "seek": 169800, "start": 1698.0, "end": 1706.0, "text": " And it's, you have redundancy in the network. So if one path goes down for whatever reason, you, the traffic can take a different path.", "tokens": [50364, 400, 309, 311, 11, 291, 362, 27830, 6717, 294, 264, 3209, 13, 407, 498, 472, 3100, 1709, 760, 337, 2035, 1778, 11, 291, 11, 264, 6419, 393, 747, 257, 819, 3100, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08239338994026184, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.18681006133556366}, {"id": 282, "seek": 169800, "start": 1706.0, "end": 1711.0, "text": " And you want to minimize the risk of partitions in the network.", "tokens": [50764, 400, 291, 528, 281, 17522, 264, 3148, 295, 644, 2451, 294, 264, 3209, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08239338994026184, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.18681006133556366}, {"id": 283, "seek": 169800, "start": 1711.0, "end": 1721.0, "text": " And you want to make sure that you've got reliable connectivity between data centers if your nodes happen to be split across data centers.", "tokens": [51014, 400, 291, 528, 281, 652, 988, 300, 291, 600, 658, 12924, 21095, 1296, 1412, 10898, 498, 428, 13891, 1051, 281, 312, 7472, 2108, 1412, 10898, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08239338994026184, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.18681006133556366}, {"id": 284, "seek": 172100, "start": 1721.0, "end": 1729.0, "text": " And then there are a few miscellaneous housekeeping items that make sure that you've got a good monitoring and alerting mechanism in place.", "tokens": [50364, 400, 550, 456, 366, 257, 1326, 3346, 4164, 15447, 48033, 4754, 300, 652, 988, 300, 291, 600, 658, 257, 665, 11028, 293, 419, 27187, 7513, 294, 1081, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07304090814492137, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.29865145683288574}, {"id": 285, "seek": 172100, "start": 1729.0, "end": 1743.0, "text": " So in case, you know, your cluster is approaching a situation where the resources are running out or the network is getting congested or the CPU is being maxed out or whatever.", "tokens": [50764, 407, 294, 1389, 11, 291, 458, 11, 428, 13630, 307, 14908, 257, 2590, 689, 264, 3593, 366, 2614, 484, 420, 264, 3209, 307, 1242, 31871, 292, 420, 264, 13199, 307, 885, 11469, 292, 484, 420, 2035, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07304090814492137, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.29865145683288574}, {"id": 286, "seek": 172100, "start": 1743.0, "end": 1749.0, "text": " You know, you get alerted in time so that you can get, you can act and take preventive measures.", "tokens": [51464, 509, 458, 11, 291, 483, 9615, 292, 294, 565, 370, 300, 291, 393, 483, 11, 291, 393, 605, 293, 747, 4871, 488, 8000, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07304090814492137, "compression_ratio": 1.6788617886178863, "no_speech_prob": 0.29865145683288574}, {"id": 287, "seek": 174900, "start": 1749.0, "end": 1761.0, "text": " Regularly test your cluster. You can simulate situations where, you know, connectivity is lost to test how your cluster behaves in case of that.", "tokens": [50364, 45659, 356, 1500, 428, 13630, 13, 509, 393, 27817, 6851, 689, 11, 291, 458, 11, 21095, 307, 2731, 281, 1500, 577, 428, 13630, 36896, 294, 1389, 295, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12060945883564565, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0262822974473238}, {"id": 288, "seek": 174900, "start": 1761.0, "end": 1777.0, "text": " And you need to have very precise and clear documentation because if, let's say, I'm the one who's implementing this cluster and I take a few decisions as to what thresholds to set and what configurations to, to, to program into my cluster.", "tokens": [50964, 400, 291, 643, 281, 362, 588, 13600, 293, 1850, 14333, 570, 498, 11, 718, 311, 584, 11, 286, 478, 264, 472, 567, 311, 18114, 341, 13630, 293, 286, 747, 257, 1326, 5327, 382, 281, 437, 14678, 82, 281, 992, 293, 437, 31493, 281, 11, 281, 11, 281, 1461, 666, 452, 13630, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12060945883564565, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0262822974473238}, {"id": 289, "seek": 177700, "start": 1777.0, "end": 1784.0, "text": " A person coming in, let's say two years later or three years later may not know what the decision making was and why it was done a certain way.", "tokens": [50364, 316, 954, 1348, 294, 11, 718, 311, 584, 732, 924, 1780, 420, 1045, 924, 1780, 815, 406, 458, 437, 264, 3537, 1455, 390, 293, 983, 309, 390, 1096, 257, 1629, 636, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0925918925892223, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.04194336384534836}, {"id": 290, "seek": 177700, "start": 1784.0, "end": 1795.0, "text": " We want to make sure that you have very clear and precise documentation that is coupled with training with new resources that are coming on and are helping maintain and manage your cluster.", "tokens": [50714, 492, 528, 281, 652, 988, 300, 291, 362, 588, 1850, 293, 13600, 14333, 300, 307, 29482, 365, 3097, 365, 777, 3593, 300, 366, 1348, 322, 293, 366, 4315, 6909, 293, 3067, 428, 13630, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0925918925892223, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.04194336384534836}, {"id": 291, "seek": 177700, "start": 1795.0, "end": 1804.0, "text": " Now, in case a split frame does occur, what are, you know, the recommended best practices to recover from it?", "tokens": [51264, 823, 11, 294, 1389, 257, 7472, 3920, 775, 5160, 11, 437, 366, 11, 291, 458, 11, 264, 9628, 1151, 7525, 281, 8114, 490, 309, 30, 51714], "temperature": 0.0, "avg_logprob": -0.0925918925892223, "compression_ratio": 1.6716981132075472, "no_speech_prob": 0.04194336384534836}, {"id": 292, "seek": 180400, "start": 1804.0, "end": 1820.0, "text": " So you get into a situation where now two nodes are thinking that they are the primary and they're ready to take, you know, data in and they want to establish, establish themselves as the publishers of the data and expect standby nodes to become the subscribers.", "tokens": [50364, 407, 291, 483, 666, 257, 2590, 689, 586, 732, 13891, 366, 1953, 300, 436, 366, 264, 6194, 293, 436, 434, 1919, 281, 747, 11, 291, 458, 11, 1412, 294, 293, 436, 528, 281, 8327, 11, 8327, 2969, 382, 264, 30421, 295, 264, 1412, 293, 2066, 50170, 13891, 281, 1813, 264, 11092, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09159747373710558, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.2560570240020752}, {"id": 293, "seek": 180400, "start": 1820.0, "end": 1832.0, "text": " What do you do? So the first thing, of course, is to actually identify that that has, that has happened. You won't be able to do anything if you don't know that the split frame has occurred.", "tokens": [51164, 708, 360, 291, 360, 30, 407, 264, 700, 551, 11, 295, 1164, 11, 307, 281, 767, 5876, 300, 300, 575, 11, 300, 575, 2011, 13, 509, 1582, 380, 312, 1075, 281, 360, 1340, 498, 291, 500, 380, 458, 300, 264, 7472, 3920, 575, 11068, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09159747373710558, "compression_ratio": 1.735632183908046, "no_speech_prob": 0.2560570240020752}, {"id": 294, "seek": 183200, "start": 1832.0, "end": 1842.0, "text": " So in order to identify that kind of a situation, again, monitoring and alerting are crucial elements to it. You need to have a good monitoring plan in place.", "tokens": [50364, 407, 294, 1668, 281, 5876, 300, 733, 295, 257, 2590, 11, 797, 11, 11028, 293, 419, 27187, 366, 11462, 4959, 281, 309, 13, 509, 643, 281, 362, 257, 665, 11028, 1393, 294, 1081, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06694844063748134, "compression_ratio": 1.8616071428571428, "no_speech_prob": 0.035593122243881226}, {"id": 295, "seek": 183200, "start": 1842.0, "end": 1861.0, "text": " Stop all traffic from your application and stop all replication between the nodes. You know, this, this, this will mean that your application goes down, but your application stopping is a lot better than your application feeding in or reading the wrong data.", "tokens": [50864, 5535, 439, 6419, 490, 428, 3861, 293, 1590, 439, 39911, 1296, 264, 13891, 13, 509, 458, 11, 341, 11, 341, 11, 341, 486, 914, 300, 428, 3861, 1709, 760, 11, 457, 428, 3861, 12767, 307, 257, 688, 1101, 813, 428, 3861, 12919, 294, 420, 3760, 264, 2085, 1412, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06694844063748134, "compression_ratio": 1.8616071428571428, "no_speech_prob": 0.035593122243881226}, {"id": 296, "seek": 186100, "start": 1861.0, "end": 1876.0, "text": " So just stop the application. Now, this is all manual. I am not aware of a tool that will do this in an entirely automated fashion, but this is something that a DBA and an expert will need to do.", "tokens": [50364, 407, 445, 1590, 264, 3861, 13, 823, 11, 341, 307, 439, 9688, 13, 286, 669, 406, 3650, 295, 257, 2290, 300, 486, 360, 341, 294, 364, 7696, 18473, 6700, 11, 457, 341, 307, 746, 300, 257, 413, 9295, 293, 364, 5844, 486, 643, 281, 360, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06840431549969841, "compression_ratio": 1.587962962962963, "no_speech_prob": 0.014254710637032986}, {"id": 297, "seek": 186100, "start": 1876.0, "end": 1887.0, "text": " So determine which node is the most up to date. Two nodes are competing to be the primary. It's now you who decide which one is the actual primary.", "tokens": [51114, 407, 6997, 597, 9984, 307, 264, 881, 493, 281, 4002, 13, 4453, 13891, 366, 15439, 281, 312, 264, 6194, 13, 467, 311, 586, 291, 567, 4536, 597, 472, 307, 264, 3539, 6194, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06840431549969841, "compression_ratio": 1.587962962962963, "no_speech_prob": 0.014254710637032986}, {"id": 298, "seek": 188700, "start": 1887.0, "end": 1897.0, "text": " Or maybe, you know, you're unable to decide that because there are some transactions that got committed on one primary and some transactions got committed to the second primary.", "tokens": [50364, 1610, 1310, 11, 291, 458, 11, 291, 434, 11299, 281, 4536, 300, 570, 456, 366, 512, 16856, 300, 658, 7784, 322, 472, 6194, 293, 512, 16856, 658, 7784, 281, 264, 1150, 6194, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06142757440868177, "compression_ratio": 1.801047120418848, "no_speech_prob": 0.07459931075572968}, {"id": 299, "seek": 188700, "start": 1897.0, "end": 1910.0, "text": " What do you do now? You want to make sure that you, that you replay the transactions that are missing and make one primary the de facto leader of the, of the cluster.", "tokens": [50864, 708, 360, 291, 360, 586, 30, 509, 528, 281, 652, 988, 300, 291, 11, 300, 291, 23836, 264, 16856, 300, 366, 5361, 293, 652, 472, 6194, 264, 368, 42225, 5263, 295, 264, 11, 295, 264, 13630, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06142757440868177, "compression_ratio": 1.801047120418848, "no_speech_prob": 0.07459931075572968}, {"id": 300, "seek": 191000, "start": 1911.0, "end": 1920.0, "text": " You want to make sure that the nodes are isolated from each other till the, till you've rectified the situation.", "tokens": [50414, 509, 528, 281, 652, 988, 300, 264, 13891, 366, 14621, 490, 1184, 661, 4288, 264, 11, 4288, 291, 600, 11048, 2587, 264, 2590, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13934170894133738, "compression_ratio": 1.675, "no_speech_prob": 0.10777448862791061}, {"id": 301, "seek": 191000, "start": 1920.0, "end": 1937.0, "text": " And then you reapply either through backups or through the right-ahead logs and, you know, just, just reapply the transactions that are missing on the, on the primary that you've decided and then reconfigure configuration.", "tokens": [50864, 400, 550, 291, 35638, 356, 2139, 807, 50160, 420, 807, 264, 558, 12, 545, 2056, 20820, 293, 11, 291, 458, 11, 445, 11, 445, 35638, 356, 264, 16856, 300, 366, 5361, 322, 264, 11, 322, 264, 6194, 300, 291, 600, 3047, 293, 550, 9993, 20646, 540, 11694, 13, 51714], "temperature": 0.0, "avg_logprob": -0.13934170894133738, "compression_ratio": 1.675, "no_speech_prob": 0.10777448862791061}, {"id": 302, "seek": 193700, "start": 1937.0, "end": 1943.0, "text": " So let's say, you know, you might decide that the standby who decided to take over actually has more transactions.", "tokens": [50364, 407, 718, 311, 584, 11, 291, 458, 11, 291, 1062, 4536, 300, 264, 50170, 567, 3047, 281, 747, 670, 767, 575, 544, 16856, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12593650009672522, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.07440736144781113}, {"id": 303, "seek": 193700, "start": 1943.0, "end": 1954.0, "text": " So you make it the primary, make it the new primary. And now you need to reconfigure applications such that the other nodes are actually taking data or replicating data from this new primary.", "tokens": [50664, 407, 291, 652, 309, 264, 6194, 11, 652, 309, 264, 777, 6194, 13, 400, 586, 291, 643, 281, 9993, 20646, 540, 5821, 1270, 300, 264, 661, 13891, 366, 767, 1940, 1412, 420, 3248, 30541, 1412, 490, 341, 777, 6194, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12593650009672522, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.07440736144781113}, {"id": 304, "seek": 193700, "start": 1954.0, "end": 1955.0, "text": " You had a question? Yes.", "tokens": [51214, 509, 632, 257, 1168, 30, 1079, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12593650009672522, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.07440736144781113}, {"id": 305, "seek": 193700, "start": 1955.0, "end": 1963.0, "text": " You did mention twice already, right-ahead log. I think it would be helpful if you could also decipher why is it called right-ahead log, what it is.", "tokens": [51264, 509, 630, 2152, 6091, 1217, 11, 558, 12, 545, 2056, 3565, 13, 286, 519, 309, 576, 312, 4961, 498, 291, 727, 611, 49859, 983, 307, 309, 1219, 558, 12, 545, 2056, 3565, 11, 437, 309, 307, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12593650009672522, "compression_ratio": 1.7843866171003717, "no_speech_prob": 0.07440736144781113}, {"id": 306, "seek": 196300, "start": 1964.0, "end": 1969.0, "text": " Okay. Thank you for asking that question. I will run under the assumption that, you know, it's something that everybody would know. So thank you.", "tokens": [50414, 1033, 13, 1044, 291, 337, 3365, 300, 1168, 13, 286, 486, 1190, 833, 264, 15302, 300, 11, 291, 458, 11, 309, 311, 746, 300, 2201, 576, 458, 13, 407, 1309, 291, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15997358695747926, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.010747209191322327}, {"id": 307, "seek": 196300, "start": 1969.0, "end": 1976.0, "text": " So the question is, I refer to right-ahead logs and what are they?", "tokens": [50664, 407, 264, 1168, 307, 11, 286, 2864, 281, 558, 12, 545, 2056, 20820, 293, 437, 366, 436, 30, 51014], "temperature": 0.0, "avg_logprob": -0.15997358695747926, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.010747209191322327}, {"id": 308, "seek": 196300, "start": 1976.0, "end": 1990.0, "text": " So the way Postgres works is that every transaction that is written to the database goes into what's called wall buffers, wall, WAL wall that stands for right-ahead logs.", "tokens": [51014, 407, 264, 636, 10223, 45189, 1985, 307, 300, 633, 14425, 300, 307, 3720, 281, 264, 8149, 1709, 666, 437, 311, 1219, 2929, 9204, 433, 11, 2929, 11, 343, 3427, 2929, 300, 7382, 337, 558, 12, 545, 2056, 20820, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15997358695747926, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.010747209191322327}, {"id": 309, "seek": 199000, "start": 1990.0, "end": 1996.0, "text": " It goes into buffers and then those buffers write to the logs on disk.", "tokens": [50364, 467, 1709, 666, 9204, 433, 293, 550, 729, 9204, 433, 2464, 281, 264, 20820, 322, 12355, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10143018159709993, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.0101559367030859}, {"id": 310, "seek": 199000, "start": 1996.0, "end": 2010.0, "text": " And, you know, it's those logs that are getting committed to the database and the incremental transactions as they come in, the right-ahead logs keep track of those incremental transactions.", "tokens": [50664, 400, 11, 291, 458, 11, 309, 311, 729, 20820, 300, 366, 1242, 7784, 281, 264, 8149, 293, 264, 35759, 16856, 382, 436, 808, 294, 11, 264, 558, 12, 545, 2056, 20820, 1066, 2837, 295, 729, 35759, 16856, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10143018159709993, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.0101559367030859}, {"id": 311, "seek": 201000, "start": 2011.0, "end": 2026.0, "text": " And it's those logs that are used for replication, those logs are actually transferred to the replica, to the standby, and they are replayed on the replica in order to get the replica into the same state as the primary.", "tokens": [50414, 400, 309, 311, 729, 20820, 300, 366, 1143, 337, 39911, 11, 729, 20820, 366, 767, 15809, 281, 264, 35456, 11, 281, 264, 50170, 11, 293, 436, 366, 23836, 292, 322, 264, 35456, 294, 1668, 281, 483, 264, 35456, 666, 264, 912, 1785, 382, 264, 6194, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08966382344563802, "compression_ratio": 1.7685185185185186, "no_speech_prob": 0.035083238035440445}, {"id": 312, "seek": 201000, "start": 2026.0, "end": 2038.0, "text": " So these are files that are on disk that contain all of the transactional data that the database is handling. Does that help? Yeah. Thank you for pointing it out.", "tokens": [51164, 407, 613, 366, 7098, 300, 366, 322, 12355, 300, 5304, 439, 295, 264, 46688, 1966, 1412, 300, 264, 8149, 307, 13175, 13, 4402, 300, 854, 30, 865, 13, 1044, 291, 337, 12166, 309, 484, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08966382344563802, "compression_ratio": 1.7685185185185186, "no_speech_prob": 0.035083238035440445}, {"id": 313, "seek": 203800, "start": 2039.0, "end": 2053.0, "text": " Now, once you confirm the integrity of your cluster is that, you know, is when you can start re-enabling the traffic coming into the cluster.", "tokens": [50414, 823, 11, 1564, 291, 9064, 264, 16000, 295, 428, 13630, 307, 300, 11, 291, 458, 11, 307, 562, 291, 393, 722, 319, 12, 268, 20112, 264, 6419, 1348, 666, 264, 13630, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10668290745128285, "compression_ratio": 1.7317073170731707, "no_speech_prob": 0.02543981745839119}, {"id": 314, "seek": 203800, "start": 2053.0, "end": 2067.0, "text": " But before you allow traffic coming in, you know, it might be a good idea to just run that cluster in read-only mode for a bit so that you can cross-check and double-check and re-verify that everything is working.", "tokens": [51114, 583, 949, 291, 2089, 6419, 1348, 294, 11, 291, 458, 11, 309, 1062, 312, 257, 665, 1558, 281, 445, 1190, 300, 13630, 294, 1401, 12, 25202, 4391, 337, 257, 857, 370, 300, 291, 393, 3278, 12, 15723, 293, 3834, 12, 15723, 293, 319, 12, 331, 2505, 300, 1203, 307, 1364, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10668290745128285, "compression_ratio": 1.7317073170731707, "no_speech_prob": 0.02543981745839119}, {"id": 315, "seek": 206800, "start": 2068.0, "end": 2072.0, "text": " And then you're working to your expectation before you allow write operations.", "tokens": [50364, 400, 550, 291, 434, 1364, 281, 428, 14334, 949, 291, 2089, 2464, 7705, 13, 50564], "temperature": 0.0, "avg_logprob": -0.26348854178812964, "compression_ratio": 1.4202127659574468, "no_speech_prob": 0.09623415768146515}, {"id": 316, "seek": 206800, "start": 2072.0, "end": 2083.0, "text": " And then, you know, make sure that you run a retrospective because a split-brain scenario is scary. It's difficult to recover from. You don't want it happening every other day.", "tokens": [50564, 400, 550, 11, 291, 458, 11, 652, 988, 300, 291, 1190, 257, 34997, 488, 570, 257, 7472, 12, 6198, 259, 9005, 307, 6958, 13, 467, 311, 2252, 281, 8114, 490, 13, 509, 500, 380, 528, 309, 2737, 633, 661, 786, 13, 51114], "temperature": 0.0, "avg_logprob": -0.26348854178812964, "compression_ratio": 1.4202127659574468, "no_speech_prob": 0.09623415768146515}, {"id": 317, "seek": 206800, "start": 2083.0, "end": 2085.0, "text": " Right? Yes.", "tokens": [51114, 1779, 30, 1079, 13, 51214], "temperature": 0.0, "avg_logprob": -0.26348854178812964, "compression_ratio": 1.4202127659574468, "no_speech_prob": 0.09623415768146515}, {"id": 318, "seek": 208500, "start": 2085.0, "end": 2095.0, "text": " You do not just have the fancy mechanism that fills up a secondary, a second primary, and then have it failover.", "tokens": [50364, 509, 360, 406, 445, 362, 264, 10247, 7513, 300, 22498, 493, 257, 11396, 11, 257, 1150, 6194, 11, 293, 550, 362, 309, 3061, 3570, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3855298849252554, "compression_ratio": 1.280701754385965, "no_speech_prob": 0.28922179341316223}, {"id": 319, "seek": 208500, "start": 2095.0, "end": 2098.0, "text": " I'm not sure I understand what...", "tokens": [50864, 286, 478, 406, 988, 286, 1223, 437, 485, 51014], "temperature": 0.0, "avg_logprob": -0.3855298849252554, "compression_ratio": 1.280701754385965, "no_speech_prob": 0.28922179341316223}, {"id": 320, "seek": 209800, "start": 2098.0, "end": 2127.0, "text": " So, you're referring to shoot the node in the head, right?", "tokens": [50364, 407, 11, 291, 434, 13761, 281, 3076, 264, 9984, 294, 264, 1378, 11, 558, 30, 51814], "temperature": 0.0, "avg_logprob": -0.3964525774905556, "compression_ratio": 0.9354838709677419, "no_speech_prob": 0.03400871157646179}, {"id": 321, "seek": 212700, "start": 2127.0, "end": 2146.0, "text": " I think... I'm not sure if I can shoot the node in the head. No, I think it's... Oh, offending node in the head. Yes, that's what it is.", "tokens": [50364, 286, 519, 485, 286, 478, 406, 988, 498, 286, 393, 3076, 264, 9984, 294, 264, 1378, 13, 883, 11, 286, 519, 309, 311, 485, 876, 11, 766, 2029, 9984, 294, 264, 1378, 13, 1079, 11, 300, 311, 437, 309, 307, 13, 51314], "temperature": 0.0, "avg_logprob": -0.21150006188286674, "compression_ratio": 1.36, "no_speech_prob": 0.1109326109290123}, {"id": 322, "seek": 214600, "start": 2146.0, "end": 2158.0, "text": " So, yeah, there is a mechanism. I haven't talked about it in these slides, but in case there's an offending node that, well, you can't really rectify you shoot it in the head.", "tokens": [50364, 407, 11, 1338, 11, 456, 307, 257, 7513, 13, 286, 2378, 380, 2825, 466, 309, 294, 613, 9788, 11, 457, 294, 1389, 456, 311, 364, 766, 2029, 9984, 300, 11, 731, 11, 291, 393, 380, 534, 11048, 2505, 291, 3076, 309, 294, 264, 1378, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1328663049742233, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.45892560482025146}, {"id": 323, "seek": 214600, "start": 2158.0, "end": 2167.0, "text": " Right? You just kill it and then you rebuild a new standby. So, yeah, that's what you're referring to, right? Or, what is something else?", "tokens": [50964, 1779, 30, 509, 445, 1961, 309, 293, 550, 291, 16877, 257, 777, 50170, 13, 407, 11, 1338, 11, 300, 311, 437, 291, 434, 13761, 281, 11, 558, 30, 1610, 11, 437, 307, 746, 1646, 30, 51414], "temperature": 0.0, "avg_logprob": -0.1328663049742233, "compression_ratio": 1.526829268292683, "no_speech_prob": 0.45892560482025146}, {"id": 324, "seek": 216700, "start": 2167.0, "end": 2175.0, "text": " Why would you need this complicated rectification if you could just immediately stop the brain and then pay for it?", "tokens": [50364, 1545, 576, 291, 643, 341, 6179, 11048, 3774, 498, 291, 727, 445, 4258, 1590, 264, 3567, 293, 550, 1689, 337, 309, 30, 50764], "temperature": 0.0, "avg_logprob": -0.17676438887914023, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.24447128176689148}, {"id": 325, "seek": 216700, "start": 2175.0, "end": 2188.0, "text": " So, because before you do this, you don't know which of the primaries is actually farther along in the right-to-head logs, or if there are transactions that are in one and not in the other.", "tokens": [50764, 407, 11, 570, 949, 291, 360, 341, 11, 291, 500, 380, 458, 597, 295, 264, 2886, 4889, 307, 767, 20344, 2051, 294, 264, 558, 12, 1353, 12, 1934, 20820, 11, 420, 498, 456, 366, 16856, 300, 366, 294, 472, 293, 406, 294, 264, 661, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17676438887914023, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.24447128176689148}, {"id": 326, "seek": 216700, "start": 2188.0, "end": 2194.0, "text": " Right? So, you want to establish that fact first and then, you know, recover from there.", "tokens": [51414, 1779, 30, 407, 11, 291, 528, 281, 8327, 300, 1186, 700, 293, 550, 11, 291, 458, 11, 8114, 490, 456, 13, 51714], "temperature": 0.0, "avg_logprob": -0.17676438887914023, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.24447128176689148}, {"id": 327, "seek": 219400, "start": 2194.0, "end": 2201.0, "text": " So, this is in order to just make sure that you don't lose transactions. Right?", "tokens": [50364, 407, 11, 341, 307, 294, 1668, 281, 445, 652, 988, 300, 291, 500, 380, 3624, 16856, 13, 1779, 30, 50714], "temperature": 0.0, "avg_logprob": -0.08520591381898861, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.027147211134433746}, {"id": 328, "seek": 219400, "start": 2201.0, "end": 2207.0, "text": " Okay. So, yeah, running a retrospective, extremely important. Make sure that it doesn't happen again.", "tokens": [50714, 1033, 13, 407, 11, 1338, 11, 2614, 257, 34997, 488, 11, 4664, 1021, 13, 4387, 988, 300, 309, 1177, 380, 1051, 797, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08520591381898861, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.027147211134433746}, {"id": 329, "seek": 219400, "start": 2207.0, "end": 2219.0, "text": " We're going to go through some of the other challenges. I think split-brain is the most important one, but the other ones, you know, they're kind of like a variation that can cause split-brain,", "tokens": [51014, 492, 434, 516, 281, 352, 807, 512, 295, 264, 661, 4759, 13, 286, 519, 7472, 12, 6198, 259, 307, 264, 881, 1021, 472, 11, 457, 264, 661, 2306, 11, 291, 458, 11, 436, 434, 733, 295, 411, 257, 12990, 300, 393, 3082, 7472, 12, 6198, 259, 11, 51614], "temperature": 0.0, "avg_logprob": -0.08520591381898861, "compression_ratio": 1.5822784810126582, "no_speech_prob": 0.027147211134433746}, {"id": 330, "seek": 221900, "start": 2219.0, "end": 2226.0, "text": " but we're going to go through these. Network latency is one of the things that we, you know, a question that was asked a little while earlier.", "tokens": [50364, 457, 321, 434, 516, 281, 352, 807, 613, 13, 12640, 27043, 307, 472, 295, 264, 721, 300, 321, 11, 291, 458, 11, 257, 1168, 300, 390, 2351, 257, 707, 1339, 3071, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05629660969688779, "compression_ratio": 1.6883720930232557, "no_speech_prob": 0.31971704959869385}, {"id": 331, "seek": 221900, "start": 2226.0, "end": 2238.0, "text": " So, what network latency means is that it's the time delay between when data starts off from one location and reaches the destination.", "tokens": [50714, 407, 11, 437, 3209, 27043, 1355, 307, 300, 309, 311, 264, 565, 8577, 1296, 562, 1412, 3719, 766, 490, 472, 4914, 293, 14235, 264, 12236, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05629660969688779, "compression_ratio": 1.6883720930232557, "no_speech_prob": 0.31971704959869385}, {"id": 332, "seek": 221900, "start": 2238.0, "end": 2245.0, "text": " So, any delay that it encounters going from one place to the other is called latency.", "tokens": [51314, 407, 11, 604, 8577, 300, 309, 26310, 516, 490, 472, 1081, 281, 264, 661, 307, 1219, 27043, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05629660969688779, "compression_ratio": 1.6883720930232557, "no_speech_prob": 0.31971704959869385}, {"id": 333, "seek": 224500, "start": 2245.0, "end": 2260.0, "text": " And the challenge it causes is that delayed replication could possibly cause data losses because, you know, as we discussed, in case of disaster, the primary is going to shut down and there's possible data loss in there.", "tokens": [50364, 400, 264, 3430, 309, 7700, 307, 300, 20268, 39911, 727, 6264, 3082, 1412, 15352, 570, 11, 291, 458, 11, 382, 321, 7152, 11, 294, 1389, 295, 11293, 11, 264, 6194, 307, 516, 281, 5309, 760, 293, 456, 311, 1944, 1412, 4470, 294, 456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10289961252457057, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.1007518544793129}, {"id": 334, "seek": 224500, "start": 2260.0, "end": 2269.0, "text": " And also, more lag or more latency can lead one of the stand-byes to believe that the primary has gone down. Right?", "tokens": [51114, 400, 611, 11, 544, 8953, 420, 544, 27043, 393, 1477, 472, 295, 264, 1463, 12, 2322, 279, 281, 1697, 300, 264, 6194, 575, 2780, 760, 13, 1779, 30, 51564], "temperature": 0.0, "avg_logprob": -0.10289961252457057, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.1007518544793129}, {"id": 335, "seek": 226900, "start": 2270.0, "end": 2276.0, "text": " And, you know, they can try, that can trigger a false failover.", "tokens": [50414, 400, 11, 291, 458, 11, 436, 393, 853, 11, 300, 393, 7875, 257, 7908, 3061, 3570, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1323385238647461, "compression_ratio": 1.464705882352941, "no_speech_prob": 0.050181034952402115}, {"id": 336, "seek": 226900, "start": 2276.0, "end": 2285.0, "text": " Causes of latency. The network could be getting choked. Low-quality network hardware.", "tokens": [50714, 7544, 8355, 295, 27043, 13, 440, 3209, 727, 312, 1242, 417, 9511, 13, 17078, 12, 11286, 3209, 8837, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1323385238647461, "compression_ratio": 1.464705882352941, "no_speech_prob": 0.050181034952402115}, {"id": 337, "seek": 226900, "start": 2285.0, "end": 2292.0, "text": " The hardware, it's easy to get wrong, especially when it's costly hardware that we're dealing with.", "tokens": [51164, 440, 8837, 11, 309, 311, 1858, 281, 483, 2085, 11, 2318, 562, 309, 311, 28328, 8837, 300, 321, 434, 6260, 365, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1323385238647461, "compression_ratio": 1.464705882352941, "no_speech_prob": 0.050181034952402115}, {"id": 338, "seek": 229200, "start": 2292.0, "end": 2303.0, "text": " The distance between the two nodes, at best, data travels at the speed of light and it takes a finite amount of time to go from one place to the other.", "tokens": [50364, 440, 4560, 1296, 264, 732, 13891, 11, 412, 1151, 11, 1412, 19863, 412, 264, 3073, 295, 1442, 293, 309, 2516, 257, 19362, 2372, 295, 565, 281, 352, 490, 472, 1081, 281, 264, 661, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08870607683028298, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.2775539755821228}, {"id": 339, "seek": 229200, "start": 2303.0, "end": 2309.0, "text": " And the longer the distance is between the two nodes, the longer it takes for data to replicate from one to the other.", "tokens": [50914, 400, 264, 2854, 264, 4560, 307, 1296, 264, 732, 13891, 11, 264, 2854, 309, 2516, 337, 1412, 281, 25356, 490, 472, 281, 264, 661, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08870607683028298, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.2775539755821228}, {"id": 340, "seek": 229200, "start": 2309.0, "end": 2316.0, "text": " If you have a virtualization setup, it can cause overheads. There can be bandwidth limitations.", "tokens": [51214, 759, 291, 362, 257, 6374, 2144, 8657, 11, 309, 393, 3082, 19922, 82, 13, 821, 393, 312, 23647, 15705, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08870607683028298, "compression_ratio": 1.7345971563981042, "no_speech_prob": 0.2775539755821228}, {"id": 341, "seek": 231600, "start": 2316.0, "end": 2322.0, "text": " And security policies can force inspection of all of the data packets causing further delay.", "tokens": [50364, 400, 3825, 7657, 393, 3464, 22085, 295, 439, 295, 264, 1412, 30364, 9853, 3052, 8577, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10817083994547526, "compression_ratio": 1.52863436123348, "no_speech_prob": 0.0038186400197446346}, {"id": 342, "seek": 231600, "start": 2322.0, "end": 2331.0, "text": " And transmission medium will also cause some latency. For example, fiber optics are going to be much faster than something that's based on copper.", "tokens": [50664, 400, 11574, 6399, 486, 611, 3082, 512, 27043, 13, 1171, 1365, 11, 12874, 42599, 366, 516, 281, 312, 709, 4663, 813, 746, 300, 311, 2361, 322, 15007, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10817083994547526, "compression_ratio": 1.52863436123348, "no_speech_prob": 0.0038186400197446346}, {"id": 343, "seek": 231600, "start": 2331.0, "end": 2334.0, "text": " Right? That's plain physics.", "tokens": [51114, 1779, 30, 663, 311, 11121, 10649, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10817083994547526, "compression_ratio": 1.52863436123348, "no_speech_prob": 0.0038186400197446346}, {"id": 344, "seek": 231600, "start": 2337.0, "end": 2343.0, "text": " And there are ways that you can prevent false positive resulting from latency.", "tokens": [51414, 400, 456, 366, 2098, 300, 291, 393, 4871, 7908, 3353, 16505, 490, 27043, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10817083994547526, "compression_ratio": 1.52863436123348, "no_speech_prob": 0.0038186400197446346}, {"id": 345, "seek": 234300, "start": 2343.0, "end": 2360.0, "text": " You want to make sure that all of your monitoring and alerting and mechanism that you set up during the design of your cluster are fine-tuned such that you adjust the heartbeat, you adjust the time-out settings,", "tokens": [50364, 509, 528, 281, 652, 988, 300, 439, 295, 428, 11028, 293, 419, 27187, 293, 7513, 300, 291, 992, 493, 1830, 264, 1715, 295, 428, 13630, 366, 2489, 12, 83, 43703, 1270, 300, 291, 4369, 264, 34851, 11, 291, 4369, 264, 565, 12, 346, 6257, 11, 51214], "temperature": 0.0, "avg_logprob": -0.12891693391661713, "compression_ratio": 1.7109826589595376, "no_speech_prob": 0.0058782659471035}, {"id": 346, "seek": 234300, "start": 2360.0, "end": 2369.0, "text": " and you make sure that your cluster does not read latency as a trigger for failover.", "tokens": [51214, 293, 291, 652, 988, 300, 428, 13630, 775, 406, 1401, 27043, 382, 257, 7875, 337, 3061, 3570, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12891693391661713, "compression_ratio": 1.7109826589595376, "no_speech_prob": 0.0058782659471035}, {"id": 347, "seek": 236900, "start": 2370.0, "end": 2378.0, "text": " Some of the best practices include making sure that you're testing your cluster periodically.", "tokens": [50414, 2188, 295, 264, 1151, 7525, 4090, 1455, 988, 300, 291, 434, 4997, 428, 13630, 38916, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08015969395637512, "compression_ratio": 1.8080357142857142, "no_speech_prob": 0.006457952782511711}, {"id": 348, "seek": 236900, "start": 2378.0, "end": 2384.0, "text": " There are different workloads that you would want to run on your cluster to simulate different environments.", "tokens": [50814, 821, 366, 819, 32452, 300, 291, 576, 528, 281, 1190, 322, 428, 13630, 281, 27817, 819, 12388, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08015969395637512, "compression_ratio": 1.8080357142857142, "no_speech_prob": 0.006457952782511711}, {"id": 349, "seek": 236900, "start": 2384.0, "end": 2398.0, "text": " So you want to know what kind of time pressures your cluster is going to encounter with different kinds of workloads applied to it and want to configure and tune your time-out and heartbeat accordingly.", "tokens": [51114, 407, 291, 528, 281, 458, 437, 733, 295, 565, 23573, 428, 13630, 307, 516, 281, 8593, 365, 819, 3685, 295, 32452, 6456, 281, 309, 293, 528, 281, 22162, 293, 10864, 428, 565, 12, 346, 293, 34851, 19717, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08015969395637512, "compression_ratio": 1.8080357142857142, "no_speech_prob": 0.006457952782511711}, {"id": 350, "seek": 239800, "start": 2399.0, "end": 2403.0, "text": " And of course, documentation and training are ever important.", "tokens": [50414, 400, 295, 1164, 11, 14333, 293, 3097, 366, 1562, 1021, 13, 50614], "temperature": 0.0, "avg_logprob": -0.102916930272029, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.01606120355427265}, {"id": 351, "seek": 239800, "start": 2405.0, "end": 2409.0, "text": " The third challenge is about false alarms.", "tokens": [50714, 440, 2636, 3430, 307, 466, 7908, 45039, 13, 50914], "temperature": 0.0, "avg_logprob": -0.102916930272029, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.01606120355427265}, {"id": 352, "seek": 239800, "start": 2409.0, "end": 2414.0, "text": " So we talked about network latency as one of the causes of causing a false alarm.", "tokens": [50914, 407, 321, 2825, 466, 3209, 27043, 382, 472, 295, 264, 7700, 295, 9853, 257, 7908, 14183, 13, 51164], "temperature": 0.0, "avg_logprob": -0.102916930272029, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.01606120355427265}, {"id": 353, "seek": 239800, "start": 2414.0, "end": 2425.0, "text": " And a false alarm essentially means that an issue is reported when an issue does not actually exist.", "tokens": [51164, 400, 257, 7908, 14183, 4476, 1355, 300, 364, 2734, 307, 7055, 562, 364, 2734, 775, 406, 767, 2514, 13, 51714], "temperature": 0.0, "avg_logprob": -0.102916930272029, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.01606120355427265}, {"id": 354, "seek": 242500, "start": 2425.0, "end": 2432.0, "text": " And again, when an issue is reported, it can trigger a failover when a failover is not really needed.", "tokens": [50364, 400, 797, 11, 562, 364, 2734, 307, 7055, 11, 309, 393, 7875, 257, 3061, 3570, 562, 257, 3061, 3570, 307, 406, 534, 2978, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06070982891580333, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0047418405301868916}, {"id": 355, "seek": 242500, "start": 2432.0, "end": 2437.0, "text": " And a failover is an expensive operation. You don't want to do it needlessly. It impacts performance.", "tokens": [50714, 400, 257, 3061, 3570, 307, 364, 5124, 6916, 13, 509, 500, 380, 528, 281, 360, 309, 643, 12048, 13, 467, 11606, 3389, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06070982891580333, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0047418405301868916}, {"id": 356, "seek": 242500, "start": 2437.0, "end": 2440.0, "text": " And false alarms, of course, network issues are there.", "tokens": [50964, 400, 7908, 45039, 11, 295, 1164, 11, 3209, 2663, 366, 456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06070982891580333, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0047418405301868916}, {"id": 357, "seek": 242500, "start": 2440.0, "end": 2447.0, "text": " The configuration and the way your cluster has been set up could cause false alarms if your thresholds are too low.", "tokens": [51114, 440, 11694, 293, 264, 636, 428, 13630, 575, 668, 992, 493, 727, 3082, 7908, 45039, 498, 428, 14678, 82, 366, 886, 2295, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06070982891580333, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.0047418405301868916}, {"id": 358, "seek": 244700, "start": 2448.0, "end": 2455.0, "text": " You might want your failover to happen instantaneously the moment the cluster detects that the primary has gone down.", "tokens": [50414, 509, 1062, 528, 428, 3061, 3570, 281, 1051, 9836, 13131, 264, 1623, 264, 13630, 5531, 82, 300, 264, 6194, 575, 2780, 760, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09439011623984889, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.15138497948646545}, {"id": 359, "seek": 244700, "start": 2455.0, "end": 2462.0, "text": " But the primary might not have gone down. It might have been just running a long, running query and is unresponsive.", "tokens": [50764, 583, 264, 6194, 1062, 406, 362, 2780, 760, 13, 467, 1062, 362, 668, 445, 2614, 257, 938, 11, 2614, 14581, 293, 307, 517, 28930, 488, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09439011623984889, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.15138497948646545}, {"id": 360, "seek": 244700, "start": 2462.0, "end": 2466.0, "text": " So you want to make sure that your configurations are correct.", "tokens": [51114, 407, 291, 528, 281, 652, 988, 300, 428, 31493, 366, 3006, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09439011623984889, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.15138497948646545}, {"id": 361, "seek": 244700, "start": 2466.0, "end": 2473.0, "text": " Resource constraints, if the load is too high, the network traffic is too high, the CPU is maxed out.", "tokens": [51314, 35200, 18491, 11, 498, 264, 3677, 307, 886, 1090, 11, 264, 3209, 6419, 307, 886, 1090, 11, 264, 13199, 307, 11469, 292, 484, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09439011623984889, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.15138497948646545}, {"id": 362, "seek": 247300, "start": 2474.0, "end": 2479.0, "text": " Somebody had planned a schedule maintenance and not told you.", "tokens": [50414, 13463, 632, 8589, 257, 7567, 11258, 293, 406, 1907, 291, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12200105601343615, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.009109019301831722}, {"id": 363, "seek": 247300, "start": 2479.0, "end": 2486.0, "text": " Something as simple as that could cause a false alarm where you think, well, okay, the network has gone down.", "tokens": [50664, 6595, 382, 2199, 382, 300, 727, 3082, 257, 7908, 14183, 689, 291, 519, 11, 731, 11, 1392, 11, 264, 3209, 575, 2780, 760, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12200105601343615, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.009109019301831722}, {"id": 364, "seek": 247300, "start": 2486.0, "end": 2488.0, "text": " We need to do something about it. You don't want to do that.", "tokens": [51014, 492, 643, 281, 360, 746, 466, 309, 13, 509, 500, 380, 528, 281, 360, 300, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12200105601343615, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.009109019301831722}, {"id": 365, "seek": 247300, "start": 2488.0, "end": 2499.0, "text": " And some of the long running queries can create exclusive logs from the database which can make the database appear to be nonresponsive.", "tokens": [51114, 400, 512, 295, 264, 938, 2614, 24109, 393, 1884, 13005, 20820, 490, 264, 8149, 597, 393, 652, 264, 8149, 4204, 281, 312, 2107, 28930, 488, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12200105601343615, "compression_ratio": 1.5836909871244635, "no_speech_prob": 0.009109019301831722}, {"id": 366, "seek": 249900, "start": 2499.0, "end": 2507.0, "text": " And the automated systems will not double and triple check going into the logs and going into the stack tables to figure out which of the queries are running", "tokens": [50364, 400, 264, 18473, 3652, 486, 406, 3834, 293, 15508, 1520, 516, 666, 264, 20820, 293, 516, 666, 264, 8630, 8020, 281, 2573, 484, 597, 295, 264, 24109, 366, 2614, 50764], "temperature": 0.0, "avg_logprob": -0.13154702504475912, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.004458314273506403}, {"id": 367, "seek": 249900, "start": 2507.0, "end": 2514.0, "text": " and whether the database is locked or it's just simply unresponsive. And they can cause a false alarm.", "tokens": [50764, 293, 1968, 264, 8149, 307, 9376, 420, 309, 311, 445, 2935, 517, 28930, 488, 13, 400, 436, 393, 3082, 257, 7908, 14183, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13154702504475912, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.004458314273506403}, {"id": 368, "seek": 249900, "start": 2516.0, "end": 2523.0, "text": " And prevention techniques include making sure that your thresholds are optimized, testing,", "tokens": [51214, 400, 14630, 7512, 4090, 1455, 988, 300, 428, 14678, 82, 366, 26941, 11, 4997, 11, 51564], "temperature": 0.0, "avg_logprob": -0.13154702504475912, "compression_ratio": 1.6027397260273972, "no_speech_prob": 0.004458314273506403}, {"id": 369, "seek": 252300, "start": 2524.0, "end": 2531.0, "text": " and making sure that you run simulations is the way to go in order to optimize those thresholds.", "tokens": [50414, 293, 1455, 988, 300, 291, 1190, 35138, 307, 264, 636, 281, 352, 294, 1668, 281, 19719, 729, 14678, 82, 13, 50764], "temperature": 0.0, "avg_logprob": -0.0944139045827529, "compression_ratio": 1.7048192771084338, "no_speech_prob": 0.04138364642858505}, {"id": 370, "seek": 252300, "start": 2531.0, "end": 2538.0, "text": " You also want to make sure that your software and all components that are part of the cluster are up to date.", "tokens": [50764, 509, 611, 528, 281, 652, 988, 300, 428, 4722, 293, 439, 6677, 300, 366, 644, 295, 264, 13630, 366, 493, 281, 4002, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0944139045827529, "compression_ratio": 1.7048192771084338, "no_speech_prob": 0.04138364642858505}, {"id": 371, "seek": 252300, "start": 2538.0, "end": 2542.0, "text": " You want the latest versions of your software. You want them to be bug free.", "tokens": [51114, 509, 528, 264, 6792, 9606, 295, 428, 4722, 13, 509, 528, 552, 281, 312, 7426, 1737, 13, 51314], "temperature": 0.0, "avg_logprob": -0.0944139045827529, "compression_ratio": 1.7048192771084338, "no_speech_prob": 0.04138364642858505}, {"id": 372, "seek": 254200, "start": 2543.0, "end": 2553.0, "text": " And yeah, monitoring and alerting, comprehensive strategies, best practices, documenting, training your stuff.", "tokens": [50414, 400, 1338, 11, 11028, 293, 419, 27187, 11, 13914, 9029, 11, 1151, 7525, 11, 42360, 11, 3097, 428, 1507, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1441622120993478, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.02972685731947422}, {"id": 373, "seek": 254200, "start": 2556.0, "end": 2560.0, "text": " The last of the challenges to be discussed is data inconsistency.", "tokens": [51064, 440, 1036, 295, 264, 4759, 281, 312, 7152, 307, 1412, 22039, 468, 3020, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1441622120993478, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.02972685731947422}, {"id": 374, "seek": 254200, "start": 2560.0, "end": 2567.0, "text": " And what this means is that you call it data inconsistency.", "tokens": [51264, 400, 437, 341, 1355, 307, 300, 291, 818, 309, 1412, 22039, 468, 3020, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1441622120993478, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.02972685731947422}, {"id": 375, "seek": 256700, "start": 2567.0, "end": 2572.0, "text": " It doesn't happen within the database because as we discussed that Postgres is asset compliant.", "tokens": [50364, 467, 1177, 380, 1051, 1951, 264, 8149, 570, 382, 321, 7152, 300, 10223, 45189, 307, 11999, 36248, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12859966880396792, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.008304295130074024}, {"id": 376, "seek": 256700, "start": 2572.0, "end": 2584.0, "text": " So the database will not be inconsistent, but within a cluster there is a chance of inconsistency if the nodes are not in sync with each other.", "tokens": [50614, 407, 264, 8149, 486, 406, 312, 36891, 11, 457, 1951, 257, 13630, 456, 307, 257, 2931, 295, 22039, 468, 3020, 498, 264, 13891, 366, 406, 294, 20271, 365, 1184, 661, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12859966880396792, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.008304295130074024}, {"id": 377, "seek": 256700, "start": 2584.0, "end": 2593.0, "text": " And the challenge is, well, if you run the same query across different nodes of the cluster, there's a possibility that you get different results.", "tokens": [51214, 400, 264, 3430, 307, 11, 731, 11, 498, 291, 1190, 264, 912, 14581, 2108, 819, 13891, 295, 264, 13630, 11, 456, 311, 257, 7959, 300, 291, 483, 819, 3542, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12859966880396792, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.008304295130074024}, {"id": 378, "seek": 256700, "start": 2593.0, "end": 2594.0, "text": " You don't want that.", "tokens": [51664, 509, 500, 380, 528, 300, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12859966880396792, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.008304295130074024}, {"id": 379, "seek": 259400, "start": 2595.0, "end": 2600.0, "text": " The causes, one of them is replication lag. We've been talking about this over and over.", "tokens": [50414, 440, 7700, 11, 472, 295, 552, 307, 39911, 8953, 13, 492, 600, 668, 1417, 466, 341, 670, 293, 670, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09753687540690104, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.0031656650826334953}, {"id": 380, "seek": 259400, "start": 2600.0, "end": 2608.0, "text": " In case data is written into the primary and is yet to be written to the replica and is being delayed for whatever reason,", "tokens": [50664, 682, 1389, 1412, 307, 3720, 666, 264, 6194, 293, 307, 1939, 281, 312, 3720, 281, 264, 35456, 293, 307, 885, 20268, 337, 2035, 1778, 11, 51064], "temperature": 0.0, "avg_logprob": -0.09753687540690104, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.0031656650826334953}, {"id": 381, "seek": 259400, "start": 2608.0, "end": 2614.0, "text": " you will get inconsistent data between the two nodes.", "tokens": [51064, 291, 486, 483, 36891, 1412, 1296, 264, 732, 13891, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09753687540690104, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.0031656650826334953}, {"id": 382, "seek": 259400, "start": 2614.0, "end": 2617.0, "text": " Network latency and high workloads could be a cause.", "tokens": [51364, 12640, 27043, 293, 1090, 32452, 727, 312, 257, 3082, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09753687540690104, "compression_ratio": 1.5665024630541873, "no_speech_prob": 0.0031656650826334953}, {"id": 383, "seek": 261700, "start": 2618.0, "end": 2625.0, "text": " And this can cause loss of data in case during that time a failover is triggered.", "tokens": [50414, 400, 341, 393, 3082, 4470, 295, 1412, 294, 1389, 1830, 300, 565, 257, 3061, 3570, 307, 21710, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10319217233096852, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.003532553091645241}, {"id": 384, "seek": 261700, "start": 2625.0, "end": 2627.0, "text": " That's one of the risks with this.", "tokens": [50764, 663, 311, 472, 295, 264, 10888, 365, 341, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10319217233096852, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.003532553091645241}, {"id": 385, "seek": 261700, "start": 2631.0, "end": 2639.0, "text": " Split brain can cause the data inconsistency as well because, well, if two nodes think they are the primary,", "tokens": [51064, 45111, 3567, 393, 3082, 264, 1412, 22039, 468, 3020, 382, 731, 570, 11, 731, 11, 498, 732, 13891, 519, 436, 366, 264, 6194, 11, 51464], "temperature": 0.0, "avg_logprob": -0.10319217233096852, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.003532553091645241}, {"id": 386, "seek": 261700, "start": 2639.0, "end": 2646.0, "text": " they are going to try and take writing of the data or they are going to establish themselves as the publishers of the data", "tokens": [51464, 436, 366, 516, 281, 853, 293, 747, 3579, 295, 264, 1412, 420, 436, 366, 516, 281, 8327, 2969, 382, 264, 30421, 295, 264, 1412, 51814], "temperature": 0.0, "avg_logprob": -0.10319217233096852, "compression_ratio": 1.7227722772277227, "no_speech_prob": 0.003532553091645241}, {"id": 387, "seek": 264600, "start": 2646.0, "end": 2651.0, "text": " and they are going to have different pieces of data, you don't want that to happen either.", "tokens": [50364, 293, 436, 366, 516, 281, 362, 819, 3755, 295, 1412, 11, 291, 500, 380, 528, 300, 281, 1051, 2139, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11981428501217864, "compression_ratio": 1.663716814159292, "no_speech_prob": 0.013408143073320389}, {"id": 388, "seek": 264600, "start": 2651.0, "end": 2655.0, "text": " And any configuration that is not optimized for the functioning of your cluster,", "tokens": [50614, 400, 604, 11694, 300, 307, 406, 26941, 337, 264, 18483, 295, 428, 13630, 11, 50814], "temperature": 0.0, "avg_logprob": -0.11981428501217864, "compression_ratio": 1.663716814159292, "no_speech_prob": 0.013408143073320389}, {"id": 389, "seek": 264600, "start": 2655.0, "end": 2661.0, "text": " incorrect configuration, can cause inconsistency of data.", "tokens": [50814, 18424, 11694, 11, 393, 3082, 22039, 468, 3020, 295, 1412, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11981428501217864, "compression_ratio": 1.663716814159292, "no_speech_prob": 0.013408143073320389}, {"id": 390, "seek": 264600, "start": 2661.0, "end": 2663.0, "text": " How do you prevent it?", "tokens": [51114, 1012, 360, 291, 4871, 309, 30, 51214], "temperature": 0.0, "avg_logprob": -0.11981428501217864, "compression_ratio": 1.663716814159292, "no_speech_prob": 0.013408143073320389}, {"id": 391, "seek": 264600, "start": 2663.0, "end": 2667.0, "text": " You manage your asynchronous replication very closely.", "tokens": [51214, 509, 3067, 428, 49174, 39911, 588, 8185, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11981428501217864, "compression_ratio": 1.663716814159292, "no_speech_prob": 0.013408143073320389}, {"id": 392, "seek": 264600, "start": 2667.0, "end": 2671.0, "text": " And now notice that I did not say synchronous replication over here.", "tokens": [51414, 400, 586, 3449, 300, 286, 630, 406, 584, 44743, 39911, 670, 510, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11981428501217864, "compression_ratio": 1.663716814159292, "no_speech_prob": 0.013408143073320389}, {"id": 393, "seek": 267100, "start": 2671.0, "end": 2678.0, "text": " I said that you just use synchronous replication primarily because it has a huge impact on performance.", "tokens": [50364, 286, 848, 300, 291, 445, 764, 44743, 39911, 10029, 570, 309, 575, 257, 2603, 2712, 322, 3389, 13, 50714], "temperature": 0.0, "avg_logprob": -0.27613697257093206, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.3438200354576111}, {"id": 394, "seek": 267100, "start": 2678.0, "end": 2686.0, "text": " And to do the extent possible, our advice typically is to avoid synchronous replication.", "tokens": [50714, 400, 281, 360, 264, 8396, 1944, 11, 527, 5192, 5850, 307, 281, 5042, 44743, 39911, 13, 51114], "temperature": 0.0, "avg_logprob": -0.27613697257093206, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.3438200354576111}, {"id": 395, "seek": 267100, "start": 2686.0, "end": 2692.0, "text": " And not only does it have an impact on performance, one of the downsides is that in case the primary is working", "tokens": [51114, 400, 406, 787, 775, 309, 362, 364, 2712, 322, 3389, 11, 472, 295, 264, 21554, 1875, 307, 300, 294, 1389, 264, 6194, 307, 1364, 51414], "temperature": 0.0, "avg_logprob": -0.27613697257093206, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.3438200354576111}, {"id": 396, "seek": 267100, "start": 2692.0, "end": 2699.0, "text": " and the replica goes down for whatever reason, the primary is going to continue waiting for an eclotage from the replica", "tokens": [51414, 293, 264, 35456, 1709, 760, 337, 2035, 1778, 11, 264, 6194, 307, 516, 281, 2354, 3806, 337, 364, 308, 3474, 310, 609, 490, 264, 35456, 51764], "temperature": 0.0, "avg_logprob": -0.27613697257093206, "compression_ratio": 1.831896551724138, "no_speech_prob": 0.3438200354576111}, {"id": 397, "seek": 269900, "start": 2699.0, "end": 2703.0, "text": " and the replica has essentially taken the entire cluster down with it.", "tokens": [50364, 293, 264, 35456, 575, 4476, 2726, 264, 2302, 13630, 760, 365, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12339656012398856, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.005626621190458536}, {"id": 398, "seek": 269900, "start": 2703.0, "end": 2708.0, "text": " So there are very few challenges involved with synchronous replication.", "tokens": [50564, 407, 456, 366, 588, 1326, 4759, 3288, 365, 44743, 39911, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12339656012398856, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.005626621190458536}, {"id": 399, "seek": 269900, "start": 2708.0, "end": 2715.0, "text": " Regularly check transaction IDs across the cluster, monitor replication conflicts,", "tokens": [50814, 45659, 356, 1520, 14425, 48212, 2108, 264, 13630, 11, 6002, 39911, 19807, 11, 51164], "temperature": 0.0, "avg_logprob": -0.12339656012398856, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.005626621190458536}, {"id": 400, "seek": 269900, "start": 2715.0, "end": 2724.0, "text": " there are statistics and tables that are and views that are available within Postgres to allow you to monitor this replication.", "tokens": [51164, 456, 366, 12523, 293, 8020, 300, 366, 293, 6809, 300, 366, 2435, 1951, 10223, 45189, 281, 2089, 291, 281, 6002, 341, 39911, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12339656012398856, "compression_ratio": 1.721951219512195, "no_speech_prob": 0.005626621190458536}, {"id": 401, "seek": 272400, "start": 2724.0, "end": 2729.0, "text": " You can monitor them and then detect those conflicts and resolve them promptly.", "tokens": [50364, 509, 393, 6002, 552, 293, 550, 5531, 729, 19807, 293, 14151, 552, 48594, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08398658801347782, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.06943736225366592}, {"id": 402, "seek": 272400, "start": 2729.0, "end": 2735.0, "text": " And make sure that you have regular maintenance done on your database.", "tokens": [50614, 400, 652, 988, 300, 291, 362, 3890, 11258, 1096, 322, 428, 8149, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08398658801347782, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.06943736225366592}, {"id": 403, "seek": 272400, "start": 2735.0, "end": 2744.0, "text": " Vacuum, we had a talk just a little while back that talked about why table is bloated, why dead tuples are there", "tokens": [50914, 44442, 12823, 11, 321, 632, 257, 751, 445, 257, 707, 1339, 646, 300, 2825, 466, 983, 3199, 307, 1749, 770, 11, 983, 3116, 2604, 2622, 366, 456, 51364], "temperature": 0.0, "avg_logprob": -0.08398658801347782, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.06943736225366592}, {"id": 404, "seek": 272400, "start": 2744.0, "end": 2748.0, "text": " and why vacuum is needed in order to remove those dead tuples.", "tokens": [51364, 293, 983, 14224, 307, 2978, 294, 1668, 281, 4159, 729, 3116, 2604, 2622, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08398658801347782, "compression_ratio": 1.5902439024390245, "no_speech_prob": 0.06943736225366592}, {"id": 405, "seek": 274800, "start": 2748.0, "end": 2755.0, "text": " And we want to also make sure that analyzes run frequently on your tables so that it can optimize query planning", "tokens": [50364, 400, 321, 528, 281, 611, 652, 988, 300, 6459, 12214, 1190, 10374, 322, 428, 8020, 370, 300, 309, 393, 19719, 14581, 5038, 50714], "temperature": 0.0, "avg_logprob": -0.12600526056791606, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.2861365079879761}, {"id": 406, "seek": 274800, "start": 2755.0, "end": 2761.0, "text": " and you want to prevent a transaction ID wraparound which is probably something that is a whole talk in itself.", "tokens": [50714, 293, 291, 528, 281, 4871, 257, 14425, 7348, 7843, 2181, 554, 597, 307, 1391, 746, 300, 307, 257, 1379, 751, 294, 2564, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12600526056791606, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.2861365079879761}, {"id": 407, "seek": 274800, "start": 2761.0, "end": 2766.0, "text": " We won't go into that during this conversation.", "tokens": [51014, 492, 1582, 380, 352, 666, 300, 1830, 341, 3761, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12600526056791606, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.2861365079879761}, {"id": 408, "seek": 274800, "start": 2766.0, "end": 2770.0, "text": " And yes, this all sounds really, really hard.", "tokens": [51264, 400, 2086, 11, 341, 439, 3263, 534, 11, 534, 1152, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12600526056791606, "compression_ratio": 1.5215311004784688, "no_speech_prob": 0.2861365079879761}, {"id": 409, "seek": 277000, "start": 2770.0, "end": 2777.0, "text": " It is next to impossible for a single human being to be able to think about all of these variables", "tokens": [50364, 467, 307, 958, 281, 6243, 337, 257, 2167, 1952, 885, 281, 312, 1075, 281, 519, 466, 439, 295, 613, 9102, 50714], "temperature": 0.0, "avg_logprob": -0.06495028007321241, "compression_ratio": 1.6367713004484306, "no_speech_prob": 0.4479345679283142}, {"id": 410, "seek": 277000, "start": 2777.0, "end": 2783.0, "text": " and actually correctly configure clusters and be mindful of everything involved over here,", "tokens": [50714, 293, 767, 8944, 22162, 23313, 293, 312, 14618, 295, 1203, 3288, 670, 510, 11, 51014], "temperature": 0.0, "avg_logprob": -0.06495028007321241, "compression_ratio": 1.6367713004484306, "no_speech_prob": 0.4479345679283142}, {"id": 411, "seek": 277000, "start": 2783.0, "end": 2790.0, "text": " which is why we've got tooling around it that does not automate the entire thing,", "tokens": [51014, 597, 307, 983, 321, 600, 658, 46593, 926, 309, 300, 775, 406, 31605, 264, 2302, 551, 11, 51364], "temperature": 0.0, "avg_logprob": -0.06495028007321241, "compression_ratio": 1.6367713004484306, "no_speech_prob": 0.4479345679283142}, {"id": 412, "seek": 277000, "start": 2790.0, "end": 2795.0, "text": " but it takes care of the critical aspects of your cluster.", "tokens": [51364, 457, 309, 2516, 1127, 295, 264, 4924, 7270, 295, 428, 13630, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06495028007321241, "compression_ratio": 1.6367713004484306, "no_speech_prob": 0.4479345679283142}, {"id": 413, "seek": 277000, "start": 2795.0, "end": 2797.0, "text": " I mentioned three tools over here.", "tokens": [51614, 286, 2835, 1045, 3873, 670, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06495028007321241, "compression_ratio": 1.6367713004484306, "no_speech_prob": 0.4479345679283142}, {"id": 414, "seek": 279700, "start": 2797.0, "end": 2799.0, "text": " There are other tools available as well.", "tokens": [50364, 821, 366, 661, 3873, 2435, 382, 731, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12342823768148617, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.1071772426366806}, {"id": 415, "seek": 279700, "start": 2799.0, "end": 2804.0, "text": " All three are open source with reasonable license for usage.", "tokens": [50464, 1057, 1045, 366, 1269, 4009, 365, 10585, 10476, 337, 14924, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12342823768148617, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.1071772426366806}, {"id": 416, "seek": 279700, "start": 2804.0, "end": 2808.0, "text": " Repmanager at the top is licensed as GPL.", "tokens": [50714, 3696, 1601, 3557, 412, 264, 1192, 307, 25225, 382, 460, 21593, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12342823768148617, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.1071772426366806}, {"id": 417, "seek": 279700, "start": 2808.0, "end": 2813.0, "text": " It provides automatic failover and it can manage and monitor the application for you.", "tokens": [50914, 467, 6417, 12509, 3061, 3570, 293, 309, 393, 3067, 293, 6002, 264, 3861, 337, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12342823768148617, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.1071772426366806}, {"id": 418, "seek": 279700, "start": 2813.0, "end": 2819.0, "text": " PG pool has a license that's very similar to BST and MIT, which means it's a very liberal license.", "tokens": [51164, 40975, 7005, 575, 257, 10476, 300, 311, 588, 2531, 281, 363, 6840, 293, 13100, 11, 597, 1355, 309, 311, 257, 588, 13767, 10476, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12342823768148617, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.1071772426366806}, {"id": 419, "seek": 279700, "start": 2819.0, "end": 2823.0, "text": " And it acts as a middleware between Postgres and client applications", "tokens": [51464, 400, 309, 10672, 382, 257, 2808, 3039, 1296, 10223, 45189, 293, 6423, 5821, 51664], "temperature": 0.0, "avg_logprob": -0.12342823768148617, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.1071772426366806}, {"id": 420, "seek": 282300, "start": 2823.0, "end": 2826.0, "text": " and it provides functionality much beyond simply clustering,", "tokens": [50364, 293, 309, 6417, 14980, 709, 4399, 2935, 596, 48673, 11, 50514], "temperature": 0.0, "avg_logprob": -0.09619645277659099, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.018082300201058388}, {"id": 421, "seek": 282300, "start": 2826.0, "end": 2830.0, "text": " so it will give you connection pooling and load balancing and caching as well,", "tokens": [50514, 370, 309, 486, 976, 291, 4984, 7005, 278, 293, 3677, 22495, 293, 269, 2834, 382, 731, 11, 50714], "temperature": 0.0, "avg_logprob": -0.09619645277659099, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.018082300201058388}, {"id": 422, "seek": 282300, "start": 2830.0, "end": 2832.0, "text": " along with automatic failover.", "tokens": [50714, 2051, 365, 12509, 3061, 3570, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09619645277659099, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.018082300201058388}, {"id": 423, "seek": 282300, "start": 2832.0, "end": 2836.0, "text": " Petroni is a name that just keeps coming up.", "tokens": [50814, 10472, 2044, 72, 307, 257, 1315, 300, 445, 5965, 1348, 493, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09619645277659099, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.018082300201058388}, {"id": 424, "seek": 282300, "start": 2836.0, "end": 2840.0, "text": " It's wildly popular to set up clusters with Postgres.", "tokens": [51014, 467, 311, 34731, 3743, 281, 992, 493, 23313, 365, 10223, 45189, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09619645277659099, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.018082300201058388}, {"id": 425, "seek": 282300, "start": 2840.0, "end": 2846.0, "text": " The license is MIT and it provides a template for highly available Postgres clusters", "tokens": [51214, 440, 10476, 307, 13100, 293, 309, 6417, 257, 12379, 337, 5405, 2435, 10223, 45189, 23313, 51514], "temperature": 0.0, "avg_logprob": -0.09619645277659099, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.018082300201058388}, {"id": 426, "seek": 282300, "start": 2846.0, "end": 2849.0, "text": " with the smallest cluster being three node.", "tokens": [51514, 365, 264, 16998, 13630, 885, 1045, 9984, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09619645277659099, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.018082300201058388}, {"id": 427, "seek": 284900, "start": 2849.0, "end": 2854.0, "text": " And it can help you with cluster management, auto failover and configuration management.", "tokens": [50364, 400, 309, 393, 854, 291, 365, 13630, 4592, 11, 8399, 3061, 3570, 293, 11694, 4592, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15863139387490094, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.02321850135922432}, {"id": 428, "seek": 284900, "start": 2854.0, "end": 2858.0, "text": " And that brings us to the end of our presentation.", "tokens": [50614, 400, 300, 5607, 505, 281, 264, 917, 295, 527, 5860, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15863139387490094, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.02321850135922432}, {"id": 429, "seek": 284900, "start": 2858.0, "end": 2860.0, "text": " Two minutes to go.", "tokens": [50814, 4453, 2077, 281, 352, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15863139387490094, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.02321850135922432}, {"id": 430, "seek": 284900, "start": 2860.0, "end": 2864.0, "text": " That's the QR code for my LinkedIn.", "tokens": [50914, 663, 311, 264, 32784, 3089, 337, 452, 20657, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15863139387490094, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.02321850135922432}, {"id": 431, "seek": 284900, "start": 2864.0, "end": 2866.0, "text": " Thank you.", "tokens": [51114, 1044, 291, 13, 51214], "temperature": 0.0, "avg_logprob": -0.15863139387490094, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.02321850135922432}, {"id": 432, "seek": 284900, "start": 2869.0, "end": 2871.0, "text": " Thank you.", "tokens": [51364, 1044, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15863139387490094, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.02321850135922432}, {"id": 433, "seek": 284900, "start": 2872.0, "end": 2874.0, "text": " We actually have a question.", "tokens": [51514, 492, 767, 362, 257, 1168, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15863139387490094, "compression_ratio": 1.467065868263473, "no_speech_prob": 0.02321850135922432}, {"id": 434, "seek": 287400, "start": 2874.0, "end": 2878.0, "text": " The gentleman earlier alluded to network fence and Kubernetes.", "tokens": [50364, 440, 15761, 3071, 33919, 281, 3209, 15422, 293, 23145, 13, 50564], "temperature": 0.0, "avg_logprob": -0.24689734500387442, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.09984707832336426}, {"id": 435, "seek": 287400, "start": 2878.0, "end": 2881.0, "text": " You'll have to be louder.", "tokens": [50564, 509, 603, 362, 281, 312, 22717, 13, 50714], "temperature": 0.0, "avg_logprob": -0.24689734500387442, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.09984707832336426}, {"id": 436, "seek": 287400, "start": 2884.0, "end": 2889.0, "text": " The gentleman earlier referred to network fence and should denote,", "tokens": [50864, 440, 15761, 3071, 10839, 281, 3209, 15422, 293, 820, 45708, 11, 51114], "temperature": 0.0, "avg_logprob": -0.24689734500387442, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.09984707832336426}, {"id": 437, "seek": 287400, "start": 2889.0, "end": 2892.0, "text": " which is only possible because of PVCs, right?", "tokens": [51114, 597, 307, 787, 1944, 570, 295, 46700, 82, 11, 558, 30, 51264], "temperature": 0.0, "avg_logprob": -0.24689734500387442, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.09984707832336426}, {"id": 438, "seek": 287400, "start": 2892.0, "end": 2895.0, "text": " Like persistent volumes, they're saying Kubernetes, right?", "tokens": [51264, 1743, 24315, 22219, 11, 436, 434, 1566, 23145, 11, 558, 30, 51414], "temperature": 0.0, "avg_logprob": -0.24689734500387442, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.09984707832336426}, {"id": 439, "seek": 287400, "start": 2895.0, "end": 2900.0, "text": " But the kicker is most often than not, the volumes themselves, the PVCs,", "tokens": [51414, 583, 264, 4437, 260, 307, 881, 2049, 813, 406, 11, 264, 22219, 2969, 11, 264, 46700, 82, 11, 51664], "temperature": 0.0, "avg_logprob": -0.24689734500387442, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.09984707832336426}, {"id": 440, "seek": 287400, "start": 2900.0, "end": 2903.0, "text": " are the cause of those transient issues.", "tokens": [51664, 366, 264, 3082, 295, 729, 41998, 2663, 13, 51814], "temperature": 0.0, "avg_logprob": -0.24689734500387442, "compression_ratio": 1.6741071428571428, "no_speech_prob": 0.09984707832336426}, {"id": 441, "seek": 290300, "start": 2903.0, "end": 2906.0, "text": " What if we don't want to use persistent volumes?", "tokens": [50364, 708, 498, 321, 500, 380, 528, 281, 764, 24315, 22219, 30, 50514], "temperature": 0.0, "avg_logprob": -0.15713088576858109, "compression_ratio": 1.7717842323651452, "no_speech_prob": 0.007912085391581059}, {"id": 442, "seek": 290300, "start": 2906.0, "end": 2908.0, "text": " What if we want to use ephemeral NVMe?", "tokens": [50514, 708, 498, 321, 528, 281, 764, 308, 41245, 2790, 46512, 12671, 30, 50614], "temperature": 0.0, "avg_logprob": -0.15713088576858109, "compression_ratio": 1.7717842323651452, "no_speech_prob": 0.007912085391581059}, {"id": 443, "seek": 290300, "start": 2908.0, "end": 2912.0, "text": " Is it currently possible with Postgres to manage a cluster", "tokens": [50614, 1119, 309, 4362, 1944, 365, 10223, 45189, 281, 3067, 257, 13630, 50814], "temperature": 0.0, "avg_logprob": -0.15713088576858109, "compression_ratio": 1.7717842323651452, "no_speech_prob": 0.007912085391581059}, {"id": 444, "seek": 290300, "start": 2912.0, "end": 2916.0, "text": " without using persistent storage and defaulting to shoot a node?", "tokens": [50814, 1553, 1228, 24315, 6725, 293, 7576, 278, 281, 3076, 257, 9984, 30, 51014], "temperature": 0.0, "avg_logprob": -0.15713088576858109, "compression_ratio": 1.7717842323651452, "no_speech_prob": 0.007912085391581059}, {"id": 445, "seek": 290300, "start": 2916.0, "end": 2920.0, "text": " So the thing is that when you're working with...", "tokens": [51014, 407, 264, 551, 307, 300, 562, 291, 434, 1364, 365, 485, 51214], "temperature": 0.0, "avg_logprob": -0.15713088576858109, "compression_ratio": 1.7717842323651452, "no_speech_prob": 0.007912085391581059}, {"id": 446, "seek": 290300, "start": 2920.0, "end": 2925.0, "text": " They might have gone off, but let me try and answer you loudly over here.", "tokens": [51214, 814, 1062, 362, 2780, 766, 11, 457, 718, 385, 853, 293, 1867, 291, 22958, 670, 510, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15713088576858109, "compression_ratio": 1.7717842323651452, "no_speech_prob": 0.007912085391581059}, {"id": 447, "seek": 290300, "start": 2925.0, "end": 2928.0, "text": " So the thing is that when you're working with databases,", "tokens": [51464, 407, 264, 551, 307, 300, 562, 291, 434, 1364, 365, 22380, 11, 51614], "temperature": 0.0, "avg_logprob": -0.15713088576858109, "compression_ratio": 1.7717842323651452, "no_speech_prob": 0.007912085391581059}, {"id": 448, "seek": 290300, "start": 2928.0, "end": 2932.0, "text": " you want persistent storage, right?", "tokens": [51614, 291, 528, 24315, 6725, 11, 558, 30, 51814], "temperature": 0.0, "avg_logprob": -0.15713088576858109, "compression_ratio": 1.7717842323651452, "no_speech_prob": 0.007912085391581059}, {"id": 449, "seek": 293200, "start": 2932.0, "end": 2937.0, "text": " A Kubernetes kind of cluster is designed for stateless applications,", "tokens": [50364, 316, 23145, 733, 295, 13630, 307, 4761, 337, 2219, 4272, 5821, 11, 50614], "temperature": 0.0, "avg_logprob": -0.12713729574325236, "compression_ratio": 1.5875, "no_speech_prob": 0.0038791755214333534}, {"id": 450, "seek": 293200, "start": 2937.0, "end": 2942.0, "text": " at least on the ground up, but for databases, you want persistent storage, right?", "tokens": [50614, 412, 1935, 322, 264, 2727, 493, 11, 457, 337, 22380, 11, 291, 528, 24315, 6725, 11, 558, 30, 50864], "temperature": 0.0, "avg_logprob": -0.12713729574325236, "compression_ratio": 1.5875, "no_speech_prob": 0.0038791755214333534}, {"id": 451, "seek": 293200, "start": 2942.0, "end": 2947.0, "text": " In case that you're working with a scenario that is just completely...", "tokens": [50864, 682, 1389, 300, 291, 434, 1364, 365, 257, 9005, 300, 307, 445, 2584, 485, 51114], "temperature": 0.0, "avg_logprob": -0.12713729574325236, "compression_ratio": 1.5875, "no_speech_prob": 0.0038791755214333534}, {"id": 452, "seek": 293200, "start": 2947.0, "end": 2951.0, "text": " That does not use persistent storage,", "tokens": [51114, 663, 775, 406, 764, 24315, 6725, 11, 51314], "temperature": 0.0, "avg_logprob": -0.12713729574325236, "compression_ratio": 1.5875, "no_speech_prob": 0.0038791755214333534}, {"id": 453, "seek": 293200, "start": 2951.0, "end": 2955.0, "text": " those are cases where I don't have expertise in.", "tokens": [51314, 729, 366, 3331, 689, 286, 500, 380, 362, 11769, 294, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12713729574325236, "compression_ratio": 1.5875, "no_speech_prob": 0.0038791755214333534}, {"id": 454, "seek": 293200, "start": 2955.0, "end": 2959.0, "text": " So I won't be able to definitively tell you how to go about handling it.", "tokens": [51514, 407, 286, 1582, 380, 312, 1075, 281, 28152, 356, 980, 291, 577, 281, 352, 466, 13175, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12713729574325236, "compression_ratio": 1.5875, "no_speech_prob": 0.0038791755214333534}, {"id": 455, "seek": 295900, "start": 2959.0, "end": 2962.0, "text": " So Matix, those are like EC2, please, I imagine.", "tokens": [50364, 407, 6789, 970, 11, 729, 366, 411, 19081, 17, 11, 1767, 11, 286, 3811, 13, 50514], "temperature": 0.0, "avg_logprob": -0.5612871911790636, "compression_ratio": 0.8571428571428571, "no_speech_prob": 0.9202916026115417}], "language": "en"}