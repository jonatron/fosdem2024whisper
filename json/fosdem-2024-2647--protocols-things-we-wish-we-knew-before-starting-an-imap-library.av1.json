{"text": " Hi, thank you for being here so early to hear about such an old protocol. So we're going to talk about IMAP. We've both started writing some IMAP libraries and we want to share experience in that. We've hit a few issues along the way, a few surprising things. Hopefully this can help you if you want to deal with IMAP as well. So, I'm Simon. I'm working on the Go libraries and he is Damien. Hi, I'm the main head of IWF-Code. Yeah. So the first thing you might wonder is what is IMAP useful for? So maybe some of you know that IMAP is used to fetch messages from a mail server. So if you have a mail client and a list of messages shows up, this is fetched via the IMAP protocol. IMAP lets you organize messages into mailboxes. So mailboxes is what regular people call folders. So inbox, archive, spam, drafts, all of these are mailboxes for IMAP. The main advantage on the upside of using IMAP compared to older protocols is that it's possible to synchronize from multiple clients and devices. So for instance, if I want to start writing a draft on my laptop and then continue later on my mobile phone and sending my mobile phone, that's possible with IMAP. What's the basic way you interact with IMAP? So it sounds pretty simple at first. You open a TCP connection, ideally with TLS and without start TLS. And then you write a command and then you get back some responses from the server. So it sounds simple. Here's a very simple example. Here's an example of a login command where you specify your username and your password. And then after that you get an OK response from the server if the password is correct and the login is correct. So something interesting to note before going to the next slide is that... I'm sorry. I'm going to do this, no problem. So something interesting to note is that there's a CMD1 right before the login command here. So this is what we call a tag and it's used... It's an arbitrary string, a sendizer client, and it's used to match up the server responses with the client's requests. So it's just a string echoed back by the server. So the client knows that the OK response is for the command, this particular login command it sent before. OK. Here's a more complicated example with a fetch command which is used to fetch messages from the server. So here the client sends a fetch command and asks for the message flags and message envelop. The envelope typically contains a subject and the recipients and stuff like this. And then the server sends back some replies here with responses with the first message as the flag is seen. So it's not unread. It has been marked as important. And then the envelope is very big, so it omitted it here. And the second message has no flags. And when the server is done sending all data, it ends with an OK response. Something worth noting is that here in the middle, you might notice that the command tag is not included here. There's a wild card instead. So this will have consequences later. If you ask for data, it's complicated to know if you get replies for which command it was and if it was for command at all. We'll see you more on this later. In the fetch command here at the start, you might notice the one column wild card. This is the way you specify which messages you want to fetch. And we'll see how we do this in the next slide. So how do we refer to a particular message? There are two ways. Both ways use a 42-bit inside integer. So the first way is with something called UIDs. UIDs are a unique ID which doesn't ever change except when it does. It increases when a new message is added to a mailbox. So if the last message in the inbox has UID 42 and you receive a new one, then it will get UID 43. So the second way is with message sequence numbers. It's an ordinal number. So if you use sequence number one, it means the first message in the mailbox, sequence number two, second email in the mailbox, and so on. And it goes the same way as ICOIDs, like the oldest message added to the mailbox is the first one. So something interesting is that the sequence number, they get reassigned by some operations. For instance, if a message is deleted from a mailbox, then the sequence number shifts a bit. So here's an example of a mailbox with three messages, one with UID 4, one with UID 6, one with UID 12. And if the UID 6 is removed from the mailbox, then the first message stays with UID 4. And the second message is none of the UID 6. It's now UID 12. So the meaning changes depending on the state. Another detail is that message data is immutable. So if you fetch message contents, it will never change. If you want to edit a message, you need to re-upload it and then delete the old one. So this was to refer to a single message and we can also refer to multiple messages with something called SET. The simplest set is just one message. So here's just sequence number one. Here's another example with a column. You can say messages 2 to 4 inclusive. You can specify multiple ranges like this, like 2 to 4 and then 6 to 10. And the last one is 1 to wildcard. It means 1 until the end, until the last message. That's it for the IMAP introduction. Now we can go into the meat of the presentation. Do you want the microphone? Is it on? Okay, so let's go through all these layers. The first layer is types. So what's there to tell about types? A few things. Probably your journey as an IMAP developer will start as either a client or a server developer. So it's kind of tempting to try to implement only half of the standard and to a certain amount. This is possible because as a client developer you can implement command serialization and response parsing only. And as a server developer you can implement command parsing and response serialization only. You can kind of pick only half of the routines that you would need. But the IMAP standard has quite a few of overlap between commands and responses. So there are many types that you need to define and many parsers that you need to define and serialize. So you won't end up anyway with implementing 50% of the standard but more like 70, so to say. So my suggestion would be to structure your code so that you can easily extend it to the other side afterwards. For example using a shared module. And if you are lucky and someone will provide the missing side to you and you have parsing and serialization handy, you can do kind of cool stuff because you can first generate a random message and then ensure that parsing and serialization is inverse to each other by doing randomized tests. So there's a pretty powerful kind of unit test for it. At least for me it helped a lot as you can see at the bottom. Complicated stuff. Complicated bugs. Yeah, perfect. Okay regarding syntax, oh my. I will quote Mark Crispin from the IMAP protocol mailing list because I think it's not that bad but you need to be in a certain state of mind when doing it. Alright, let me think now I'm a bit tired today. But first and foremost the formal syntax should be your holy book. If any part of the syntax distracts you from the formal syntax, you should ignore it in favor of the formal syntax. Your eyes will glaze over and your jaw will drop. You can start saying no, no, no. Just work through that stage. It's a steep hill to climb but once you make it to the top you will see everything with crystal clarity. And remember, no matter what you do, do not try to implement any command or response by looking at the examples. And he's what Mark said, so he's right. I would add that before reading the formal syntax you need to learn ABNF and I mean you need to learn it by heart because there are some subtle things you need to be aware of. And regarding lexas and parsas, I think we agreed when talking about this things. IMAP makes in some places the impression that there are things like tokens saying arguments invalid meaning that there could be some generic argument. I had a very hard time to figure out what should a token be. So there are no words on what constitutes a token and I think Simon in version one tried it and got away from this approach or used a different approach in version two. So I don't know, maybe someone has a better idea but for me you cannot lex the IMAP syntax. And another recommendation, even the syntax has layers. So first of all you have the ABNF corals that are described in the ABNF standard and referred in almost any rule. And then you have these IMAP strings which make everything kind of messy. As an example, you see this is the lock-in command, looks kind of simple. And then you have this innocent looking A string thingy in there which is for example here the username and the password. And an A string is in fact one of three types and one of two protocol flows. So you have A string means either an atom or a string, more or less or some IMAP quirks. And if it is a string it can be a quoted string or a literal. And literals do require special care when implemented. So as a simple example we will start with password. It uses only a very simple character set so you can just write exactly these eight bytes as an atom. If you have a white space in it you need to put quotes around and if you have a quote inside quotes you need to escape the quote. So it is similar to programming, most programming languages. And if you have a literal, obviously if you have a new line in there, this would be the obvious case, you need to use these prefix here in curled braces and then you just send exactly the bytes that made up your string after a new line. With a twist as we will see. What we will glaze over today are ambiguities and defects and I had a few discussions already about this one. So I would very much ask everyone if you find some defect in IMAP please report it to us. We really want to start a collection on all of these things. And one thing I finally wanted to say, I quoted Mark Crispin from this thread, but if you now will go to the internet you won't find it. So the IMAP protocol, at some point it's not available anymore due to reasons. So and for me the only lucky thing that happened was that someone I know, it's the maintainer of the Mealy email client, he had this super cool online interactive WebAssembly demo and he used the dump as test data. So that was the only reason I could read it. I guess the thing I want to say here is let's try to be aware that knowledge is disappearing and maybe try to resurrect the IMAP protocol mailing list because it's awesome, it's like a travel trove of information. Okay, then let's go back to framing. So... Oh, everything tanked up. Yeah, I'm back again. So we're going to continue to talk about some higher level layer. So flow and framing, but by flow and framing we mean how does one split the IMAP stream into separate commands and responses. So this is pretty simple. This seems pretty simple at first. Here's a simple example, similar to what we've seen. Log in command at first and then the server replies okay and then the client sends a select command and then the server replies some data and then replies okay. So one may think, yeah, it's pretty simple. You just need to split a new line and each line is a message basically. And then literals happened. So here's a slightly more complicated example where the client sends a login command, the username, and then the password is passed as a literal. So first there's a number of bytes and then the next line there's contents. So here what's interesting is that these two lines are a single logical message. The second line here sent by the client is still part of the login command. Another interesting thing is that in between here there's a plus sent by the server. This is because the server needs to acknowledge literals. So when the client sends the first line here, it says, hey, I want to send a literal with six bytes and then later the server has to reply, yeah, you can go on with this plus and then option and comment after that. The client needs to wait for the acknowledgement before sending the literal data. Okay, so that's interesting. Let's try to look at only one side of the connection. So here let's try to look at only the client side and see what happens. So we can still make sense of everything here, like login with the literal and the next line and no op. Is this valid by the way? This sounds a bit weird, right? The client sends the username and then announces the literal and then the next line here, it sends a completely different command. It's not the password or anything. Is this valid IMAP even? It turns out that yes, it's completely valid IMAP because if the server replies no to the first line the client sends, then it can send the literal. It says, I don't want your literal. So basically what I'm trying to say here is that it's not possible to pass IMAP just looking at one side because you can't make the difference between this case and this case here, whereas the server rejects the literal. So you need in your IMAP password to have some kind of feedback from the other side of a connection to know what happened. And so one may think that we don't really need to wait for the server to acknowledge the literal. We can just send the command and the literal in one go and forget about it. The server will probably reply, okay, we'll probably acknowledge the literal in any case. So here's an example of what could go wrong if you don't wait for the server acknowledgement. Maybe you have a web form on a page which lets the user save a draft in their mailbox. And maybe the literal contains like, may contain some text like this which are valid IMAP commands. So if the server happens to reject the literal, then these lines are interpreted just as regular IMAP commands by the server. And these lines delete everything from your mailbox. So that's not great. And this can be potentially inserted into HTML email hidden and HTML on a single line. And yeah, if you reply to the email, you just use everything. So yeah, it's pretty scary. So to recap everything, something I haven't mentioned is that literal can appear basically anywhere. We've seen in the login command, but it can happen in the search command. There can be many literals for a single command. It's limited to one. So literals interrupt completely the regular syntax. You have to pause the parser from the server side or the client side if you receive a literal. And then wait for the other side to reply, yeah, go on. And then you have to resume the parser. And the literal can be nested into a list or nested into something else. So it's kind of complicated to do, especially if you're using, for instance, a parser generator or something. So we can pass IMAP just by looking at the single side of the connection as we've seen. And it's important to wait for the server to accept literals before going on or security within. So another aspect of the flows we want to talk about is commands such as authenticate. So authenticate is a command that lets the client use Sassel authentication. Sassel is a binary protocol. And to authenticate in a modular way, you have several mechanisms. So here's an example of a plain mechanism, which is a simple one with username and password, but there are those as well. So basically the idea is that you get a binary message and code it to base64 and then send it over. And the interesting thing here is that, so the client says authenticate command, the server says go on, you can continue the authenticate command. And then the client sends just base64, like the, what? This is not a regular IMAP command. This is just base64. There's no tag. There's no command name. It's just like the base64 data as is. It just interrupts regular IMAP syntax with completely something else. And IDOL does something as well similar to this, where client sends IDOL, server says go on, and then client can just send the ASCII string down like the four bytes down. And it's not an IMAP command or anything. It's just like an ASCII string. Start CLS and compress are kind of similar in the way that when you start these commands, it interrupts a regular IMAP stream and wraps it up with CLS or compression mechanism. So these are fun to implement as well. So in summary, for the flow section, IMAP demands you to conflate your passing with business logic with higher level details. So you cannot have a pure password in its own little module isolated from everything else. You need to wire it up with the rest of the IMAP library. It's kind of special in this regard compared to other processes. Okay, now on to operations and semantics. So let's talk about fetching messages again. There are multiple things you can request from the server to fetch messages. So basic example, the envelope we've already seen. Body structure is if you request the MIME structure of a message with a tree of nested parts. If you have attachments for example. And then to fetch the message body, you can use body square brackets. If you just request body square brackets like this example, you get a full message body. So here's an example, very simple message with two header lines and then a simple text. So yeah, if you fetch the body square bracket, you get everything. If you want to fetch only the header, you can use body square brackets header. And then you get only the first two lines. And you can request only the text of the message. So the howdy part here with the text modifier. But you can do more complicated stuff as well. Oh my. Yeah, maybe I'll go very fast on this one. You can fetch particular header fields. You can fetch sections, bytes, substrings of the results. You can fetch, if you have a multi-part message, we have an example with two parts. So the main part, the first sub part, the second sub part with an attachment. Then you can fetch only the first part here. So the counter disposition in line one. Or you can, here this one is interesting because it returns nothing. A header actually doesn't work in nested parts. You have to use a special keyword called mine for some reason. And then if you have a message attached to a message, then you have a section of the RFC dedicated to this particular use case. Like something everybody does every day, I think. Messages into messages, like Russian dolls. The last thing I want to talk about is unilateral server data. That's another simple example of a fetch command where you want to fetch the body of message one. And then the server replies, yeah, here's the body of message one. So everything's fine. Let's say another client happens to mark the first message as important. So the way this works in IMAAP is that the next time you execute a command, then the server replies here in the middle. Hey, by the way, the flags of the message one have changed. Even if you didn't ask for it, just before completing the command, it sends this data. So what happens if another client changes the flags of message one and you happen to send a fetch command right after this happened? Then you get something like this where the server replies first the body of the first message. Like hello world, like before. And then you get something interesting where you get another fetch item for the same message, but something you didn't ask for at all. So... Yep. So it's not possible to think of IMAAP as you request some data and you get back some data. It doesn't really work like this. You can think of it as you request some data and then the server pushes some data into you whether you want it or not, and you have to deal with it. And as a client, if you ignore all but the last reply from the server for the fetch message you asked for, then you won't get the body here. So it's something to look out for. Okay, last topic, extensions. These are a bit interesting. In GoaMAV1, I tried to implement extensions as a very modular thing, which you can plug. But extensions turn out to be more like amendments. Like fundamentally alters IMAAP syntax, flows, operations, everything we've talked about. Idle and compress are examples that add completely new flows. So Idle switches to a completely different mode than you need to send a downed SQL string to switch back. And compress, yeah, just wraps the connection with something else. And then you have another kind of extension like extended list, which modifies an existing list command and adds some arguments in the middle to add more options for the clients. The search extension for extended search, it changes how the reply looks like. So you send a regular search command and then you get some completely different kind of reply. And then the literal plus extension completely changes how literals work. You get a new syntax that you need to pass. So yeah, this doesn't work at all if you try to implement it as a modular thing. IMAAP is completely mononit, if you want to implement extensions that implement everything in the same repository. It will help a lot. All right, that's about it. Unfortunately, we don't have time to talk about everything we wanted, but it should be a good start, I hope at least. Any questions? Thank you very much first. I see a first arm. Yeah, quite immune. It really helps you at the time. Hello. Thanks for the talk and thanks for the library too. I think we're using it quite a lot. Thanks for the talk and thanks for the library. Oh, okay. Yeah, yeah. My question is like, you said like, sometimes you get responses from the server. You're not even asked for, does the server also send without asking? Does the server also send data without asking? So it kind of. I mean, if you, it will only send data right before it, right after it, sorry, let's go from the start again. It will not send data on its own if you don't send any command. You have to send a command and then you reply to the command and then add its own unilateral responses to it, which can be a bit arbitrary. Like it can be anything, really. It's usually at the end of the, just before the okay response, you get some extra data and you have to somehow maybe distinguish it from the regular data. But yeah, it doesn't really work in practice. I was glad to have you. Yep. Oh, yeah, yeah, yeah. I just added that on a little bit. So the IMAP standard is quite specific regarding and it says you need to be able to receive any response at any time. So it's quite, it has in the standard, but us doing practical things. The thing we learned is that you should not trust anything that's in the standard and to the best of my knowledge, most servers don't. So you have, there are exceptions, for example, by, by respond, by untact, like when the server do a shutdown. Yeah, as answered, maybe if you can explain a bit more, but to the best of our knowledge, most people doesn't do it because at least when we tested some clients, many clients, and I mean, I mean, like the most of the clients, they crashed when we sent this. So I think there's a reason why it's not so common in the real world. Okay. Okay. Just wanted to say that if you consider the client server interaction more like that the client told the view about the server and then the server updates the view whenever you send a command, then it starts to make a bit more sense. Yep. But it can be hard to architecture a client with, yeah, against this IMAP concept. Like sometimes you don't want this kind of thing. But it's good. But yeah, it's a good mindset for sure. Yeah. All right. Any, any. Is the only, having regarding IMAP as a cash fill protocol where the client has a view and the server fills in the client's view is the only way to write an IMAP client that will preserve your sanity over years. If you try to, if you try to act as though this were a web server, you will have and this works over the years. Each new server will surprise you in some way. Painful. Don't ask me. Well, your code is. All right. Thank you very much. And thanks again to the two presenters and we come to the next talk.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.36, "text": " Hi, thank you for being here so early to hear about such an old protocol.", "tokens": [50364, 2421, 11, 1309, 291, 337, 885, 510, 370, 2440, 281, 1568, 466, 1270, 364, 1331, 10336, 13, 50982], "temperature": 0.0, "avg_logprob": -0.21148247037615095, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.13703058660030365}, {"id": 1, "seek": 0, "start": 12.36, "end": 15.24, "text": " So we're going to talk about IMAP.", "tokens": [50982, 407, 321, 434, 516, 281, 751, 466, 21463, 4715, 13, 51126], "temperature": 0.0, "avg_logprob": -0.21148247037615095, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.13703058660030365}, {"id": 2, "seek": 0, "start": 15.24, "end": 21.36, "text": " We've both started writing some IMAP libraries and we want to share experience in that.", "tokens": [51126, 492, 600, 1293, 1409, 3579, 512, 21463, 4715, 15148, 293, 321, 528, 281, 2073, 1752, 294, 300, 13, 51432], "temperature": 0.0, "avg_logprob": -0.21148247037615095, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.13703058660030365}, {"id": 3, "seek": 0, "start": 21.36, "end": 26.240000000000002, "text": " We've hit a few issues along the way, a few surprising things.", "tokens": [51432, 492, 600, 2045, 257, 1326, 2663, 2051, 264, 636, 11, 257, 1326, 8830, 721, 13, 51676], "temperature": 0.0, "avg_logprob": -0.21148247037615095, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.13703058660030365}, {"id": 4, "seek": 2624, "start": 26.24, "end": 31.24, "text": " Hopefully this can help you if you want to deal with IMAP as well.", "tokens": [50364, 10429, 341, 393, 854, 291, 498, 291, 528, 281, 2028, 365, 21463, 4715, 382, 731, 13, 50614], "temperature": 0.0, "avg_logprob": -0.45571838190526137, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.04156334325671196}, {"id": 5, "seek": 2624, "start": 31.24, "end": 36.239999999999995, "text": " So, I'm Simon.", "tokens": [50614, 407, 11, 286, 478, 13193, 13, 50864], "temperature": 0.0, "avg_logprob": -0.45571838190526137, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.04156334325671196}, {"id": 6, "seek": 2624, "start": 36.239999999999995, "end": 41.239999999999995, "text": " I'm working on the Go libraries and he is Damien.", "tokens": [50864, 286, 478, 1364, 322, 264, 1037, 15148, 293, 415, 307, 5885, 1053, 13, 51114], "temperature": 0.0, "avg_logprob": -0.45571838190526137, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.04156334325671196}, {"id": 7, "seek": 2624, "start": 41.239999999999995, "end": 44.239999999999995, "text": " Hi, I'm the main head of IWF-Code.", "tokens": [51114, 2421, 11, 286, 478, 264, 2135, 1378, 295, 286, 54, 37, 12, 34, 1429, 13, 51264], "temperature": 0.0, "avg_logprob": -0.45571838190526137, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.04156334325671196}, {"id": 8, "seek": 2624, "start": 44.239999999999995, "end": 48.239999999999995, "text": " Yeah.", "tokens": [51264, 865, 13, 51464], "temperature": 0.0, "avg_logprob": -0.45571838190526137, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.04156334325671196}, {"id": 9, "seek": 2624, "start": 48.239999999999995, "end": 54.239999999999995, "text": " So the first thing you might wonder is what is IMAP useful for?", "tokens": [51464, 407, 264, 700, 551, 291, 1062, 2441, 307, 437, 307, 21463, 4715, 4420, 337, 30, 51764], "temperature": 0.0, "avg_logprob": -0.45571838190526137, "compression_ratio": 1.3641618497109826, "no_speech_prob": 0.04156334325671196}, {"id": 10, "seek": 5424, "start": 54.24, "end": 58.24, "text": " So maybe some of you know that IMAP is used to fetch messages from a mail server.", "tokens": [50364, 407, 1310, 512, 295, 291, 458, 300, 21463, 4715, 307, 1143, 281, 23673, 7897, 490, 257, 10071, 7154, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11134996016820271, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.05686075612902641}, {"id": 11, "seek": 5424, "start": 58.24, "end": 65.24000000000001, "text": " So if you have a mail client and a list of messages shows up, this is fetched via the IMAP protocol.", "tokens": [50564, 407, 498, 291, 362, 257, 10071, 6423, 293, 257, 1329, 295, 7897, 3110, 493, 11, 341, 307, 23673, 292, 5766, 264, 21463, 4715, 10336, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11134996016820271, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.05686075612902641}, {"id": 12, "seek": 5424, "start": 65.24000000000001, "end": 69.24000000000001, "text": " IMAP lets you organize messages into mailboxes.", "tokens": [50914, 21463, 4715, 6653, 291, 13859, 7897, 666, 43602, 279, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11134996016820271, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.05686075612902641}, {"id": 13, "seek": 5424, "start": 69.24000000000001, "end": 75.24000000000001, "text": " So mailboxes is what regular people call folders.", "tokens": [51114, 407, 43602, 279, 307, 437, 3890, 561, 818, 31082, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11134996016820271, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.05686075612902641}, {"id": 14, "seek": 5424, "start": 75.24000000000001, "end": 81.24000000000001, "text": " So inbox, archive, spam, drafts, all of these are mailboxes for IMAP.", "tokens": [51414, 407, 35067, 11, 23507, 11, 24028, 11, 11206, 82, 11, 439, 295, 613, 366, 43602, 279, 337, 21463, 4715, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11134996016820271, "compression_ratio": 1.627906976744186, "no_speech_prob": 0.05686075612902641}, {"id": 15, "seek": 8124, "start": 81.24, "end": 92.24, "text": " The main advantage on the upside of using IMAP compared to older protocols is that it's possible to synchronize from multiple clients and devices.", "tokens": [50364, 440, 2135, 5002, 322, 264, 14119, 295, 1228, 21463, 4715, 5347, 281, 4906, 20618, 307, 300, 309, 311, 1944, 281, 19331, 1125, 490, 3866, 6982, 293, 5759, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17030454363141742, "compression_ratio": 1.5196078431372548, "no_speech_prob": 0.026736441999673843}, {"id": 16, "seek": 8124, "start": 92.24, "end": 106.24, "text": " So for instance, if I want to start writing a draft on my laptop and then continue later on my mobile phone and sending my mobile phone, that's possible with IMAP.", "tokens": [50914, 407, 337, 5197, 11, 498, 286, 528, 281, 722, 3579, 257, 11206, 322, 452, 10732, 293, 550, 2354, 1780, 322, 452, 6013, 2593, 293, 7750, 452, 6013, 2593, 11, 300, 311, 1944, 365, 21463, 4715, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17030454363141742, "compression_ratio": 1.5196078431372548, "no_speech_prob": 0.026736441999673843}, {"id": 17, "seek": 10624, "start": 106.24, "end": 110.24, "text": " What's the basic way you interact with IMAP?", "tokens": [50364, 708, 311, 264, 3875, 636, 291, 4648, 365, 21463, 4715, 30, 50564], "temperature": 0.0, "avg_logprob": -0.11596486003128524, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.04528721049427986}, {"id": 18, "seek": 10624, "start": 110.24, "end": 112.24, "text": " So it sounds pretty simple at first.", "tokens": [50564, 407, 309, 3263, 1238, 2199, 412, 700, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11596486003128524, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.04528721049427986}, {"id": 19, "seek": 10624, "start": 112.24, "end": 118.24, "text": " You open a TCP connection, ideally with TLS and without start TLS.", "tokens": [50664, 509, 1269, 257, 48965, 4984, 11, 22915, 365, 314, 19198, 293, 1553, 722, 314, 19198, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11596486003128524, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.04528721049427986}, {"id": 20, "seek": 10624, "start": 118.24, "end": 122.24, "text": " And then you write a command and then you get back some responses from the server.", "tokens": [50964, 400, 550, 291, 2464, 257, 5622, 293, 550, 291, 483, 646, 512, 13019, 490, 264, 7154, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11596486003128524, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.04528721049427986}, {"id": 21, "seek": 10624, "start": 122.24, "end": 124.24, "text": " So it sounds simple.", "tokens": [51164, 407, 309, 3263, 2199, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11596486003128524, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.04528721049427986}, {"id": 22, "seek": 10624, "start": 124.24, "end": 128.24, "text": " Here's a very simple example.", "tokens": [51264, 1692, 311, 257, 588, 2199, 1365, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11596486003128524, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.04528721049427986}, {"id": 23, "seek": 10624, "start": 128.24, "end": 135.24, "text": " Here's an example of a login command where you specify your username and your password.", "tokens": [51464, 1692, 311, 364, 1365, 295, 257, 24276, 5622, 689, 291, 16500, 428, 30351, 293, 428, 11524, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11596486003128524, "compression_ratio": 1.6228070175438596, "no_speech_prob": 0.04528721049427986}, {"id": 24, "seek": 13524, "start": 135.24, "end": 147.24, "text": " And then after that you get an OK response from the server if the password is correct and the login is correct.", "tokens": [50364, 400, 550, 934, 300, 291, 483, 364, 2264, 4134, 490, 264, 7154, 498, 264, 11524, 307, 3006, 293, 264, 24276, 307, 3006, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11399643679699266, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.021030282601714134}, {"id": 25, "seek": 13524, "start": 147.24, "end": 153.24, "text": " So something interesting to note before going to the next slide is that...", "tokens": [50964, 407, 746, 1880, 281, 3637, 949, 516, 281, 264, 958, 4137, 307, 300, 485, 51264], "temperature": 0.0, "avg_logprob": -0.11399643679699266, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.021030282601714134}, {"id": 26, "seek": 13524, "start": 153.24, "end": 154.24, "text": " I'm sorry.", "tokens": [51264, 286, 478, 2597, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11399643679699266, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.021030282601714134}, {"id": 27, "seek": 13524, "start": 154.24, "end": 156.24, "text": " I'm going to do this, no problem.", "tokens": [51314, 286, 478, 516, 281, 360, 341, 11, 572, 1154, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11399643679699266, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.021030282601714134}, {"id": 28, "seek": 13524, "start": 156.24, "end": 162.24, "text": " So something interesting to note is that there's a CMD1 right before the login command here.", "tokens": [51414, 407, 746, 1880, 281, 3637, 307, 300, 456, 311, 257, 20424, 35, 16, 558, 949, 264, 24276, 5622, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11399643679699266, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.021030282601714134}, {"id": 29, "seek": 16224, "start": 162.24, "end": 165.24, "text": " So this is what we call a tag and it's used...", "tokens": [50364, 407, 341, 307, 437, 321, 818, 257, 6162, 293, 309, 311, 1143, 485, 50514], "temperature": 0.0, "avg_logprob": -0.19026680426164108, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0031173359602689743}, {"id": 30, "seek": 16224, "start": 165.24, "end": 174.24, "text": " It's an arbitrary string, a sendizer client, and it's used to match up the server responses with the client's requests.", "tokens": [50514, 467, 311, 364, 23211, 6798, 11, 257, 2845, 6545, 6423, 11, 293, 309, 311, 1143, 281, 2995, 493, 264, 7154, 13019, 365, 264, 6423, 311, 12475, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19026680426164108, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0031173359602689743}, {"id": 31, "seek": 16224, "start": 174.24, "end": 177.24, "text": " So it's just a string echoed back by the server.", "tokens": [50964, 407, 309, 311, 445, 257, 6798, 14300, 292, 646, 538, 264, 7154, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19026680426164108, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0031173359602689743}, {"id": 32, "seek": 16224, "start": 177.24, "end": 185.24, "text": " So the client knows that the OK response is for the command, this particular login command it sent before.", "tokens": [51114, 407, 264, 6423, 3255, 300, 264, 2264, 4134, 307, 337, 264, 5622, 11, 341, 1729, 24276, 5622, 309, 2279, 949, 13, 51514], "temperature": 0.0, "avg_logprob": -0.19026680426164108, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0031173359602689743}, {"id": 33, "seek": 16224, "start": 185.24, "end": 186.24, "text": " OK.", "tokens": [51514, 2264, 13, 51564], "temperature": 0.0, "avg_logprob": -0.19026680426164108, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0031173359602689743}, {"id": 34, "seek": 18624, "start": 186.24, "end": 193.24, "text": " Here's a more complicated example with a fetch command which is used to fetch messages from the server.", "tokens": [50364, 1692, 311, 257, 544, 6179, 1365, 365, 257, 23673, 5622, 597, 307, 1143, 281, 23673, 7897, 490, 264, 7154, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1389051919960114, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.004080250393599272}, {"id": 35, "seek": 18624, "start": 193.24, "end": 199.24, "text": " So here the client sends a fetch command and asks for the message flags and message envelop.", "tokens": [50714, 407, 510, 264, 6423, 14790, 257, 23673, 5622, 293, 8962, 337, 264, 3636, 23265, 293, 3636, 33860, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1389051919960114, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.004080250393599272}, {"id": 36, "seek": 18624, "start": 199.24, "end": 205.24, "text": " The envelope typically contains a subject and the recipients and stuff like this.", "tokens": [51014, 440, 19989, 5850, 8306, 257, 3983, 293, 264, 32440, 293, 1507, 411, 341, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1389051919960114, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.004080250393599272}, {"id": 37, "seek": 18624, "start": 205.24, "end": 213.24, "text": " And then the server sends back some replies here with responses with the first message as the flag is seen.", "tokens": [51314, 400, 550, 264, 7154, 14790, 646, 512, 42289, 510, 365, 13019, 365, 264, 700, 3636, 382, 264, 7166, 307, 1612, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1389051919960114, "compression_ratio": 1.7625570776255708, "no_speech_prob": 0.004080250393599272}, {"id": 38, "seek": 21324, "start": 213.24, "end": 216.24, "text": " So it's not unread.", "tokens": [50364, 407, 309, 311, 406, 517, 2538, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14717951799050355, "compression_ratio": 1.5, "no_speech_prob": 0.004384662955999374}, {"id": 39, "seek": 21324, "start": 216.24, "end": 218.24, "text": " It has been marked as important.", "tokens": [50514, 467, 575, 668, 12658, 382, 1021, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14717951799050355, "compression_ratio": 1.5, "no_speech_prob": 0.004384662955999374}, {"id": 40, "seek": 21324, "start": 218.24, "end": 222.24, "text": " And then the envelope is very big, so it omitted it here.", "tokens": [50614, 400, 550, 264, 19989, 307, 588, 955, 11, 370, 309, 3406, 3944, 309, 510, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14717951799050355, "compression_ratio": 1.5, "no_speech_prob": 0.004384662955999374}, {"id": 41, "seek": 21324, "start": 222.24, "end": 225.24, "text": " And the second message has no flags.", "tokens": [50814, 400, 264, 1150, 3636, 575, 572, 23265, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14717951799050355, "compression_ratio": 1.5, "no_speech_prob": 0.004384662955999374}, {"id": 42, "seek": 21324, "start": 225.24, "end": 232.24, "text": " And when the server is done sending all data, it ends with an OK response.", "tokens": [50964, 400, 562, 264, 7154, 307, 1096, 7750, 439, 1412, 11, 309, 5314, 365, 364, 2264, 4134, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14717951799050355, "compression_ratio": 1.5, "no_speech_prob": 0.004384662955999374}, {"id": 43, "seek": 21324, "start": 232.24, "end": 239.24, "text": " Something worth noting is that here in the middle,", "tokens": [51314, 6595, 3163, 26801, 307, 300, 510, 294, 264, 2808, 11, 51664], "temperature": 0.0, "avg_logprob": -0.14717951799050355, "compression_ratio": 1.5, "no_speech_prob": 0.004384662955999374}, {"id": 44, "seek": 23924, "start": 239.24, "end": 243.24, "text": " you might notice that the command tag is not included here.", "tokens": [50364, 291, 1062, 3449, 300, 264, 5622, 6162, 307, 406, 5556, 510, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10615782988698859, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.007786659523844719}, {"id": 45, "seek": 23924, "start": 243.24, "end": 246.24, "text": " There's a wild card instead.", "tokens": [50564, 821, 311, 257, 4868, 2920, 2602, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10615782988698859, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.007786659523844719}, {"id": 46, "seek": 23924, "start": 246.24, "end": 249.24, "text": " So this will have consequences later.", "tokens": [50714, 407, 341, 486, 362, 10098, 1780, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10615782988698859, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.007786659523844719}, {"id": 47, "seek": 23924, "start": 249.24, "end": 260.24, "text": " If you ask for data, it's complicated to know if you get replies for which command it was and if it was for command at all.", "tokens": [50864, 759, 291, 1029, 337, 1412, 11, 309, 311, 6179, 281, 458, 498, 291, 483, 42289, 337, 597, 5622, 309, 390, 293, 498, 309, 390, 337, 5622, 412, 439, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10615782988698859, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.007786659523844719}, {"id": 48, "seek": 23924, "start": 260.24, "end": 264.24, "text": " We'll see you more on this later.", "tokens": [51414, 492, 603, 536, 291, 544, 322, 341, 1780, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10615782988698859, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.007786659523844719}, {"id": 49, "seek": 26424, "start": 264.24, "end": 270.24, "text": " In the fetch command here at the start, you might notice the one column wild card.", "tokens": [50364, 682, 264, 23673, 5622, 510, 412, 264, 722, 11, 291, 1062, 3449, 264, 472, 7738, 4868, 2920, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09374918396939937, "compression_ratio": 1.545045045045045, "no_speech_prob": 0.017522694543004036}, {"id": 50, "seek": 26424, "start": 270.24, "end": 274.24, "text": " This is the way you specify which messages you want to fetch.", "tokens": [50664, 639, 307, 264, 636, 291, 16500, 597, 7897, 291, 528, 281, 23673, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09374918396939937, "compression_ratio": 1.545045045045045, "no_speech_prob": 0.017522694543004036}, {"id": 51, "seek": 26424, "start": 274.24, "end": 279.24, "text": " And we'll see how we do this in the next slide.", "tokens": [50864, 400, 321, 603, 536, 577, 321, 360, 341, 294, 264, 958, 4137, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09374918396939937, "compression_ratio": 1.545045045045045, "no_speech_prob": 0.017522694543004036}, {"id": 52, "seek": 26424, "start": 279.24, "end": 281.24, "text": " So how do we refer to a particular message?", "tokens": [51114, 407, 577, 360, 321, 2864, 281, 257, 1729, 3636, 30, 51214], "temperature": 0.0, "avg_logprob": -0.09374918396939937, "compression_ratio": 1.545045045045045, "no_speech_prob": 0.017522694543004036}, {"id": 53, "seek": 26424, "start": 281.24, "end": 282.24, "text": " There are two ways.", "tokens": [51214, 821, 366, 732, 2098, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09374918396939937, "compression_ratio": 1.545045045045045, "no_speech_prob": 0.017522694543004036}, {"id": 54, "seek": 26424, "start": 282.24, "end": 285.24, "text": " Both ways use a 42-bit inside integer.", "tokens": [51264, 6767, 2098, 764, 257, 14034, 12, 5260, 1854, 24922, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09374918396939937, "compression_ratio": 1.545045045045045, "no_speech_prob": 0.017522694543004036}, {"id": 55, "seek": 26424, "start": 285.24, "end": 290.24, "text": " So the first way is with something called UIDs.", "tokens": [51414, 407, 264, 700, 636, 307, 365, 746, 1219, 624, 2777, 82, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09374918396939937, "compression_ratio": 1.545045045045045, "no_speech_prob": 0.017522694543004036}, {"id": 56, "seek": 29024, "start": 290.24, "end": 297.24, "text": " UIDs are a unique ID which doesn't ever change except when it does.", "tokens": [50364, 624, 2777, 82, 366, 257, 3845, 7348, 597, 1177, 380, 1562, 1319, 3993, 562, 309, 775, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08543003306669347, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.002242141170427203}, {"id": 57, "seek": 29024, "start": 297.24, "end": 300.24, "text": " It increases when a new message is added to a mailbox.", "tokens": [50714, 467, 8637, 562, 257, 777, 3636, 307, 3869, 281, 257, 43602, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08543003306669347, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.002242141170427203}, {"id": 58, "seek": 29024, "start": 300.24, "end": 310.24, "text": " So if the last message in the inbox has UID 42 and you receive a new one, then it will get UID 43.", "tokens": [50864, 407, 498, 264, 1036, 3636, 294, 264, 35067, 575, 624, 2777, 14034, 293, 291, 4774, 257, 777, 472, 11, 550, 309, 486, 483, 624, 2777, 17914, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08543003306669347, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.002242141170427203}, {"id": 59, "seek": 29024, "start": 310.24, "end": 314.24, "text": " So the second way is with message sequence numbers.", "tokens": [51364, 407, 264, 1150, 636, 307, 365, 3636, 8310, 3547, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08543003306669347, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.002242141170427203}, {"id": 60, "seek": 29024, "start": 314.24, "end": 316.24, "text": " It's an ordinal number.", "tokens": [51564, 467, 311, 364, 4792, 2071, 1230, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08543003306669347, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.002242141170427203}, {"id": 61, "seek": 31624, "start": 316.24, "end": 321.24, "text": " So if you use sequence number one, it means the first message in the mailbox,", "tokens": [50364, 407, 498, 291, 764, 8310, 1230, 472, 11, 309, 1355, 264, 700, 3636, 294, 264, 43602, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1595536427325513, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.004035325720906258}, {"id": 62, "seek": 31624, "start": 321.24, "end": 325.24, "text": " sequence number two, second email in the mailbox, and so on.", "tokens": [50614, 8310, 1230, 732, 11, 1150, 3796, 294, 264, 43602, 11, 293, 370, 322, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1595536427325513, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.004035325720906258}, {"id": 63, "seek": 31624, "start": 325.24, "end": 332.24, "text": " And it goes the same way as ICOIDs, like the oldest message added to the mailbox is the first one.", "tokens": [50814, 400, 309, 1709, 264, 912, 636, 382, 286, 12322, 2777, 82, 11, 411, 264, 14026, 3636, 3869, 281, 264, 43602, 307, 264, 700, 472, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1595536427325513, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.004035325720906258}, {"id": 64, "seek": 31624, "start": 332.24, "end": 342.24, "text": " So something interesting is that the sequence number, they get reassigned by some operations.", "tokens": [51164, 407, 746, 1880, 307, 300, 264, 8310, 1230, 11, 436, 483, 19486, 16690, 538, 512, 7705, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1595536427325513, "compression_ratio": 1.7606382978723405, "no_speech_prob": 0.004035325720906258}, {"id": 65, "seek": 34224, "start": 342.24, "end": 349.24, "text": " For instance, if a message is deleted from a mailbox, then the sequence number shifts a bit.", "tokens": [50364, 1171, 5197, 11, 498, 257, 3636, 307, 22981, 490, 257, 43602, 11, 550, 264, 8310, 1230, 19201, 257, 857, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10518510270826888, "compression_ratio": 1.8351063829787233, "no_speech_prob": 0.0240199975669384}, {"id": 66, "seek": 34224, "start": 349.24, "end": 358.24, "text": " So here's an example of a mailbox with three messages, one with UID 4, one with UID 6, one with UID 12.", "tokens": [50714, 407, 510, 311, 364, 1365, 295, 257, 43602, 365, 1045, 7897, 11, 472, 365, 624, 2777, 1017, 11, 472, 365, 624, 2777, 1386, 11, 472, 365, 624, 2777, 2272, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10518510270826888, "compression_ratio": 1.8351063829787233, "no_speech_prob": 0.0240199975669384}, {"id": 67, "seek": 34224, "start": 358.24, "end": 366.24, "text": " And if the UID 6 is removed from the mailbox, then the first message stays with UID 4.", "tokens": [51164, 400, 498, 264, 624, 2777, 1386, 307, 7261, 490, 264, 43602, 11, 550, 264, 700, 3636, 10834, 365, 624, 2777, 1017, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10518510270826888, "compression_ratio": 1.8351063829787233, "no_speech_prob": 0.0240199975669384}, {"id": 68, "seek": 34224, "start": 366.24, "end": 370.24, "text": " And the second message is none of the UID 6. It's now UID 12.", "tokens": [51564, 400, 264, 1150, 3636, 307, 6022, 295, 264, 624, 2777, 1386, 13, 467, 311, 586, 624, 2777, 2272, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10518510270826888, "compression_ratio": 1.8351063829787233, "no_speech_prob": 0.0240199975669384}, {"id": 69, "seek": 37024, "start": 370.24, "end": 375.24, "text": " So the meaning changes depending on the state.", "tokens": [50364, 407, 264, 3620, 2962, 5413, 322, 264, 1785, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12091826332939995, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.0061944653280079365}, {"id": 70, "seek": 37024, "start": 375.24, "end": 379.24, "text": " Another detail is that message data is immutable.", "tokens": [50614, 3996, 2607, 307, 300, 3636, 1412, 307, 3397, 32148, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12091826332939995, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.0061944653280079365}, {"id": 71, "seek": 37024, "start": 379.24, "end": 383.24, "text": " So if you fetch message contents, it will never change.", "tokens": [50814, 407, 498, 291, 23673, 3636, 15768, 11, 309, 486, 1128, 1319, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12091826332939995, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.0061944653280079365}, {"id": 72, "seek": 37024, "start": 383.24, "end": 389.24, "text": " If you want to edit a message, you need to re-upload it and then delete the old one.", "tokens": [51014, 759, 291, 528, 281, 8129, 257, 3636, 11, 291, 643, 281, 319, 12, 84, 21132, 345, 309, 293, 550, 12097, 264, 1331, 472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12091826332939995, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.0061944653280079365}, {"id": 73, "seek": 37024, "start": 389.24, "end": 399.24, "text": " So this was to refer to a single message and we can also refer to multiple messages with something called SET.", "tokens": [51314, 407, 341, 390, 281, 2864, 281, 257, 2167, 3636, 293, 321, 393, 611, 2864, 281, 3866, 7897, 365, 746, 1219, 318, 4850, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12091826332939995, "compression_ratio": 1.6650717703349283, "no_speech_prob": 0.0061944653280079365}, {"id": 74, "seek": 39924, "start": 399.24, "end": 406.24, "text": " The simplest set is just one message. So here's just sequence number one.", "tokens": [50364, 440, 22811, 992, 307, 445, 472, 3636, 13, 407, 510, 311, 445, 8310, 1230, 472, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12320194474185805, "compression_ratio": 1.5876288659793814, "no_speech_prob": 0.005699126049876213}, {"id": 75, "seek": 39924, "start": 406.24, "end": 413.24, "text": " Here's another example with a column. You can say messages 2 to 4 inclusive.", "tokens": [50714, 1692, 311, 1071, 1365, 365, 257, 7738, 13, 509, 393, 584, 7897, 568, 281, 1017, 13429, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12320194474185805, "compression_ratio": 1.5876288659793814, "no_speech_prob": 0.005699126049876213}, {"id": 76, "seek": 39924, "start": 413.24, "end": 418.24, "text": " You can specify multiple ranges like this, like 2 to 4 and then 6 to 10.", "tokens": [51064, 509, 393, 16500, 3866, 22526, 411, 341, 11, 411, 568, 281, 1017, 293, 550, 1386, 281, 1266, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12320194474185805, "compression_ratio": 1.5876288659793814, "no_speech_prob": 0.005699126049876213}, {"id": 77, "seek": 39924, "start": 418.24, "end": 427.24, "text": " And the last one is 1 to wildcard. It means 1 until the end, until the last message.", "tokens": [51314, 400, 264, 1036, 472, 307, 502, 281, 4868, 22259, 13, 467, 1355, 502, 1826, 264, 917, 11, 1826, 264, 1036, 3636, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12320194474185805, "compression_ratio": 1.5876288659793814, "no_speech_prob": 0.005699126049876213}, {"id": 78, "seek": 42724, "start": 427.24, "end": 433.24, "text": " That's it for the IMAP introduction. Now we can go into the meat of the presentation.", "tokens": [50364, 663, 311, 309, 337, 264, 21463, 4715, 9339, 13, 823, 321, 393, 352, 666, 264, 4615, 295, 264, 5860, 13, 50664], "temperature": 0.0, "avg_logprob": -0.19690629598256704, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.014303880743682384}, {"id": 79, "seek": 42724, "start": 433.24, "end": 437.24, "text": " Do you want the microphone?", "tokens": [50664, 1144, 291, 528, 264, 10952, 30, 50864], "temperature": 0.0, "avg_logprob": -0.19690629598256704, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.014303880743682384}, {"id": 80, "seek": 42724, "start": 437.24, "end": 441.24, "text": " Is it on?", "tokens": [50864, 1119, 309, 322, 30, 51064], "temperature": 0.0, "avg_logprob": -0.19690629598256704, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.014303880743682384}, {"id": 81, "seek": 42724, "start": 441.24, "end": 444.24, "text": " Okay, so let's go through all these layers.", "tokens": [51064, 1033, 11, 370, 718, 311, 352, 807, 439, 613, 7914, 13, 51214], "temperature": 0.0, "avg_logprob": -0.19690629598256704, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.014303880743682384}, {"id": 82, "seek": 42724, "start": 444.24, "end": 448.24, "text": " The first layer is types.", "tokens": [51214, 440, 700, 4583, 307, 3467, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19690629598256704, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.014303880743682384}, {"id": 83, "seek": 42724, "start": 448.24, "end": 452.24, "text": " So what's there to tell about types? A few things.", "tokens": [51414, 407, 437, 311, 456, 281, 980, 466, 3467, 30, 316, 1326, 721, 13, 51614], "temperature": 0.0, "avg_logprob": -0.19690629598256704, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.014303880743682384}, {"id": 84, "seek": 45224, "start": 452.24, "end": 457.24, "text": " Probably your journey as an IMAP developer will start as either a client or a server developer.", "tokens": [50364, 9210, 428, 4671, 382, 364, 21463, 4715, 10754, 486, 722, 382, 2139, 257, 6423, 420, 257, 7154, 10754, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12489021783587577, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.024833543226122856}, {"id": 85, "seek": 45224, "start": 457.24, "end": 464.24, "text": " So it's kind of tempting to try to implement only half of the standard and to a certain amount.", "tokens": [50614, 407, 309, 311, 733, 295, 37900, 281, 853, 281, 4445, 787, 1922, 295, 264, 3832, 293, 281, 257, 1629, 2372, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12489021783587577, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.024833543226122856}, {"id": 86, "seek": 45224, "start": 464.24, "end": 472.24, "text": " This is possible because as a client developer you can implement command serialization and response parsing only.", "tokens": [50964, 639, 307, 1944, 570, 382, 257, 6423, 10754, 291, 393, 4445, 5622, 17436, 2144, 293, 4134, 21156, 278, 787, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12489021783587577, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.024833543226122856}, {"id": 87, "seek": 45224, "start": 472.24, "end": 477.24, "text": " And as a server developer you can implement command parsing and response serialization only.", "tokens": [51364, 400, 382, 257, 7154, 10754, 291, 393, 4445, 5622, 21156, 278, 293, 4134, 17436, 2144, 787, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12489021783587577, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.024833543226122856}, {"id": 88, "seek": 47724, "start": 477.24, "end": 482.24, "text": " You can kind of pick only half of the routines that you would need.", "tokens": [50364, 509, 393, 733, 295, 1888, 787, 1922, 295, 264, 33827, 300, 291, 576, 643, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11938303366474722, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.03681417182087898}, {"id": 89, "seek": 47724, "start": 482.24, "end": 488.24, "text": " But the IMAP standard has quite a few of overlap between commands and responses.", "tokens": [50614, 583, 264, 21463, 4715, 3832, 575, 1596, 257, 1326, 295, 19959, 1296, 16901, 293, 13019, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11938303366474722, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.03681417182087898}, {"id": 90, "seek": 47724, "start": 488.24, "end": 493.24, "text": " So there are many types that you need to define and many parsers that you need to define and serialize.", "tokens": [50914, 407, 456, 366, 867, 3467, 300, 291, 643, 281, 6964, 293, 867, 21156, 433, 300, 291, 643, 281, 6964, 293, 17436, 1125, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11938303366474722, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.03681417182087898}, {"id": 91, "seek": 47724, "start": 493.24, "end": 501.24, "text": " So you won't end up anyway with implementing 50% of the standard but more like 70, so to say.", "tokens": [51164, 407, 291, 1582, 380, 917, 493, 4033, 365, 18114, 2625, 4, 295, 264, 3832, 457, 544, 411, 5285, 11, 370, 281, 584, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11938303366474722, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.03681417182087898}, {"id": 92, "seek": 50124, "start": 501.24, "end": 509.24, "text": " So my suggestion would be to structure your code so that you can easily extend it to the other side afterwards.", "tokens": [50364, 407, 452, 16541, 576, 312, 281, 3877, 428, 3089, 370, 300, 291, 393, 3612, 10101, 309, 281, 264, 661, 1252, 10543, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12392981847127278, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.007378178648650646}, {"id": 93, "seek": 50124, "start": 509.24, "end": 515.24, "text": " For example using a shared module.", "tokens": [50764, 1171, 1365, 1228, 257, 5507, 10088, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12392981847127278, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.007378178648650646}, {"id": 94, "seek": 50124, "start": 515.24, "end": 522.24, "text": " And if you are lucky and someone will provide the missing side to you and you have parsing and serialization handy,", "tokens": [51064, 400, 498, 291, 366, 6356, 293, 1580, 486, 2893, 264, 5361, 1252, 281, 291, 293, 291, 362, 21156, 278, 293, 17436, 2144, 13239, 11, 51414], "temperature": 0.0, "avg_logprob": -0.12392981847127278, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.007378178648650646}, {"id": 95, "seek": 50124, "start": 522.24, "end": 527.24, "text": " you can do kind of cool stuff because you can first generate a random message", "tokens": [51414, 291, 393, 360, 733, 295, 1627, 1507, 570, 291, 393, 700, 8460, 257, 4974, 3636, 51664], "temperature": 0.0, "avg_logprob": -0.12392981847127278, "compression_ratio": 1.566820276497696, "no_speech_prob": 0.007378178648650646}, {"id": 96, "seek": 52724, "start": 527.24, "end": 532.24, "text": " and then ensure that parsing and serialization is inverse to each other by doing randomized tests.", "tokens": [50364, 293, 550, 5586, 300, 21156, 278, 293, 17436, 2144, 307, 17340, 281, 1184, 661, 538, 884, 4974, 1602, 6921, 13, 50614], "temperature": 0.0, "avg_logprob": -0.23434019088745117, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.009280663914978504}, {"id": 97, "seek": 52724, "start": 532.24, "end": 535.24, "text": " So there's a pretty powerful kind of unit test for it.", "tokens": [50614, 407, 456, 311, 257, 1238, 4005, 733, 295, 4985, 1500, 337, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.23434019088745117, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.009280663914978504}, {"id": 98, "seek": 52724, "start": 535.24, "end": 540.24, "text": " At least for me it helped a lot as you can see at the bottom.", "tokens": [50764, 1711, 1935, 337, 385, 309, 4254, 257, 688, 382, 291, 393, 536, 412, 264, 2767, 13, 51014], "temperature": 0.0, "avg_logprob": -0.23434019088745117, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.009280663914978504}, {"id": 99, "seek": 52724, "start": 540.24, "end": 545.24, "text": " Complicated stuff. Complicated bugs.", "tokens": [51014, 33736, 3587, 1507, 13, 33736, 3587, 15120, 13, 51264], "temperature": 0.0, "avg_logprob": -0.23434019088745117, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.009280663914978504}, {"id": 100, "seek": 52724, "start": 545.24, "end": 548.24, "text": " Yeah, perfect.", "tokens": [51264, 865, 11, 2176, 13, 51414], "temperature": 0.0, "avg_logprob": -0.23434019088745117, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.009280663914978504}, {"id": 101, "seek": 52724, "start": 548.24, "end": 551.24, "text": " Okay regarding syntax, oh my.", "tokens": [51414, 1033, 8595, 28431, 11, 1954, 452, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23434019088745117, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.009280663914978504}, {"id": 102, "seek": 52724, "start": 551.24, "end": 556.24, "text": " I will quote Mark Crispin from the IMAP protocol mailing list because I think", "tokens": [51564, 286, 486, 6513, 3934, 49077, 259, 490, 264, 21463, 4715, 10336, 41612, 1329, 570, 286, 519, 51814], "temperature": 0.0, "avg_logprob": -0.23434019088745117, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.009280663914978504}, {"id": 103, "seek": 55624, "start": 556.24, "end": 561.24, "text": " it's not that bad but you need to be in a certain state of mind when doing it.", "tokens": [50364, 309, 311, 406, 300, 1578, 457, 291, 643, 281, 312, 294, 257, 1629, 1785, 295, 1575, 562, 884, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14054313619086084, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.01906735450029373}, {"id": 104, "seek": 55624, "start": 561.24, "end": 564.24, "text": " Alright, let me think now I'm a bit tired today.", "tokens": [50614, 2798, 11, 718, 385, 519, 586, 286, 478, 257, 857, 5868, 965, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14054313619086084, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.01906735450029373}, {"id": 105, "seek": 55624, "start": 564.24, "end": 571.24, "text": " But first and foremost the formal syntax should be your holy book.", "tokens": [50764, 583, 700, 293, 18864, 264, 9860, 28431, 820, 312, 428, 10622, 1446, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14054313619086084, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.01906735450029373}, {"id": 106, "seek": 55624, "start": 571.24, "end": 580.24, "text": " If any part of the syntax distracts you from the formal syntax, you should ignore it in favor of the formal syntax.", "tokens": [51114, 759, 604, 644, 295, 264, 28431, 9945, 82, 291, 490, 264, 9860, 28431, 11, 291, 820, 11200, 309, 294, 2294, 295, 264, 9860, 28431, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14054313619086084, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.01906735450029373}, {"id": 107, "seek": 55624, "start": 580.24, "end": 583.24, "text": " Your eyes will glaze over and your jaw will drop.", "tokens": [51564, 2260, 2575, 486, 39390, 670, 293, 428, 18162, 486, 3270, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14054313619086084, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.01906735450029373}, {"id": 108, "seek": 58324, "start": 583.24, "end": 586.24, "text": " You can start saying no, no, no.", "tokens": [50364, 509, 393, 722, 1566, 572, 11, 572, 11, 572, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14334753189963856, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.06231977045536041}, {"id": 109, "seek": 58324, "start": 586.24, "end": 588.24, "text": " Just work through that stage.", "tokens": [50514, 1449, 589, 807, 300, 3233, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14334753189963856, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.06231977045536041}, {"id": 110, "seek": 58324, "start": 588.24, "end": 595.24, "text": " It's a steep hill to climb but once you make it to the top you will see everything with crystal clarity.", "tokens": [50614, 467, 311, 257, 16841, 10997, 281, 10724, 457, 1564, 291, 652, 309, 281, 264, 1192, 291, 486, 536, 1203, 365, 13662, 16992, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14334753189963856, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.06231977045536041}, {"id": 111, "seek": 58324, "start": 595.24, "end": 605.24, "text": " And remember, no matter what you do, do not try to implement any command or response by looking at the examples.", "tokens": [50964, 400, 1604, 11, 572, 1871, 437, 291, 360, 11, 360, 406, 853, 281, 4445, 604, 5622, 420, 4134, 538, 1237, 412, 264, 5110, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14334753189963856, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.06231977045536041}, {"id": 112, "seek": 58324, "start": 605.24, "end": 608.24, "text": " And he's what Mark said, so he's right.", "tokens": [51464, 400, 415, 311, 437, 3934, 848, 11, 370, 415, 311, 558, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14334753189963856, "compression_ratio": 1.5165876777251184, "no_speech_prob": 0.06231977045536041}, {"id": 113, "seek": 60824, "start": 608.24, "end": 615.24, "text": " I would add that before reading the formal syntax you need to learn ABNF and I mean you need to learn it by heart", "tokens": [50364, 286, 576, 909, 300, 949, 3760, 264, 9860, 28431, 291, 643, 281, 1466, 13838, 45, 37, 293, 286, 914, 291, 643, 281, 1466, 309, 538, 1917, 50714], "temperature": 0.0, "avg_logprob": -0.10601368546485901, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.00729844206944108}, {"id": 114, "seek": 60824, "start": 615.24, "end": 619.24, "text": " because there are some subtle things you need to be aware of.", "tokens": [50714, 570, 456, 366, 512, 13743, 721, 291, 643, 281, 312, 3650, 295, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10601368546485901, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.00729844206944108}, {"id": 115, "seek": 60824, "start": 619.24, "end": 627.24, "text": " And regarding lexas and parsas, I think we agreed when talking about this things.", "tokens": [50914, 400, 8595, 476, 87, 296, 293, 21156, 296, 11, 286, 519, 321, 9166, 562, 1417, 466, 341, 721, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10601368546485901, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.00729844206944108}, {"id": 116, "seek": 60824, "start": 627.24, "end": 634.24, "text": " IMAP makes in some places the impression that there are things like tokens saying arguments invalid", "tokens": [51314, 21463, 4715, 1669, 294, 512, 3190, 264, 9995, 300, 456, 366, 721, 411, 22667, 1566, 12869, 34702, 51664], "temperature": 0.0, "avg_logprob": -0.10601368546485901, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.00729844206944108}, {"id": 117, "seek": 60824, "start": 634.24, "end": 637.24, "text": " meaning that there could be some generic argument.", "tokens": [51664, 3620, 300, 456, 727, 312, 512, 19577, 6770, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10601368546485901, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.00729844206944108}, {"id": 118, "seek": 63724, "start": 637.24, "end": 641.24, "text": " I had a very hard time to figure out what should a token be.", "tokens": [50364, 286, 632, 257, 588, 1152, 565, 281, 2573, 484, 437, 820, 257, 14862, 312, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12237187435752467, "compression_ratio": 1.5774058577405858, "no_speech_prob": 0.010060800239443779}, {"id": 119, "seek": 63724, "start": 641.24, "end": 650.24, "text": " So there are no words on what constitutes a token and I think Simon in version one tried it and got away from this approach", "tokens": [50564, 407, 456, 366, 572, 2283, 322, 437, 44204, 257, 14862, 293, 286, 519, 13193, 294, 3037, 472, 3031, 309, 293, 658, 1314, 490, 341, 3109, 51014], "temperature": 0.0, "avg_logprob": -0.12237187435752467, "compression_ratio": 1.5774058577405858, "no_speech_prob": 0.010060800239443779}, {"id": 120, "seek": 63724, "start": 650.24, "end": 653.24, "text": " or used a different approach in version two.", "tokens": [51014, 420, 1143, 257, 819, 3109, 294, 3037, 732, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12237187435752467, "compression_ratio": 1.5774058577405858, "no_speech_prob": 0.010060800239443779}, {"id": 121, "seek": 63724, "start": 653.24, "end": 660.24, "text": " So I don't know, maybe someone has a better idea but for me you cannot lex the IMAP syntax.", "tokens": [51164, 407, 286, 500, 380, 458, 11, 1310, 1580, 575, 257, 1101, 1558, 457, 337, 385, 291, 2644, 476, 87, 264, 21463, 4715, 28431, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12237187435752467, "compression_ratio": 1.5774058577405858, "no_speech_prob": 0.010060800239443779}, {"id": 122, "seek": 63724, "start": 660.24, "end": 664.24, "text": " And another recommendation, even the syntax has layers.", "tokens": [51514, 400, 1071, 11879, 11, 754, 264, 28431, 575, 7914, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12237187435752467, "compression_ratio": 1.5774058577405858, "no_speech_prob": 0.010060800239443779}, {"id": 123, "seek": 66424, "start": 664.24, "end": 670.24, "text": " So first of all you have the ABNF corals that are described in the ABNF standard and referred in almost any rule.", "tokens": [50364, 407, 700, 295, 439, 291, 362, 264, 13838, 45, 37, 1181, 1124, 300, 366, 7619, 294, 264, 13838, 45, 37, 3832, 293, 10839, 294, 1920, 604, 4978, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1298736621593607, "compression_ratio": 1.7624521072796935, "no_speech_prob": 0.015004769898951054}, {"id": 124, "seek": 66424, "start": 670.24, "end": 675.24, "text": " And then you have these IMAP strings which make everything kind of messy.", "tokens": [50664, 400, 550, 291, 362, 613, 21463, 4715, 13985, 597, 652, 1203, 733, 295, 16191, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1298736621593607, "compression_ratio": 1.7624521072796935, "no_speech_prob": 0.015004769898951054}, {"id": 125, "seek": 66424, "start": 675.24, "end": 680.24, "text": " As an example, you see this is the lock-in command, looks kind of simple.", "tokens": [50914, 1018, 364, 1365, 11, 291, 536, 341, 307, 264, 4017, 12, 259, 5622, 11, 1542, 733, 295, 2199, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1298736621593607, "compression_ratio": 1.7624521072796935, "no_speech_prob": 0.015004769898951054}, {"id": 126, "seek": 66424, "start": 680.24, "end": 687.24, "text": " And then you have this innocent looking A string thingy in there which is for example here the username and the password.", "tokens": [51164, 400, 550, 291, 362, 341, 13171, 1237, 316, 6798, 551, 88, 294, 456, 597, 307, 337, 1365, 510, 264, 30351, 293, 264, 11524, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1298736621593607, "compression_ratio": 1.7624521072796935, "no_speech_prob": 0.015004769898951054}, {"id": 127, "seek": 66424, "start": 687.24, "end": 693.24, "text": " And an A string is in fact one of three types and one of two protocol flows.", "tokens": [51514, 400, 364, 316, 6798, 307, 294, 1186, 472, 295, 1045, 3467, 293, 472, 295, 732, 10336, 12867, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1298736621593607, "compression_ratio": 1.7624521072796935, "no_speech_prob": 0.015004769898951054}, {"id": 128, "seek": 69324, "start": 693.24, "end": 699.24, "text": " So you have A string means either an atom or a string, more or less or some IMAP quirks.", "tokens": [50364, 407, 291, 362, 316, 6798, 1355, 2139, 364, 12018, 420, 257, 6798, 11, 544, 420, 1570, 420, 512, 21463, 4715, 35645, 1694, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12833889581823862, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.003012312576174736}, {"id": 129, "seek": 69324, "start": 699.24, "end": 703.24, "text": " And if it is a string it can be a quoted string or a literal.", "tokens": [50664, 400, 498, 309, 307, 257, 6798, 309, 393, 312, 257, 30047, 6798, 420, 257, 20411, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12833889581823862, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.003012312576174736}, {"id": 130, "seek": 69324, "start": 703.24, "end": 708.24, "text": " And literals do require special care when implemented.", "tokens": [50864, 400, 2733, 1124, 360, 3651, 2121, 1127, 562, 12270, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12833889581823862, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.003012312576174736}, {"id": 131, "seek": 69324, "start": 708.24, "end": 712.24, "text": " So as a simple example we will start with password.", "tokens": [51114, 407, 382, 257, 2199, 1365, 321, 486, 722, 365, 11524, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12833889581823862, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.003012312576174736}, {"id": 132, "seek": 69324, "start": 712.24, "end": 718.24, "text": " It uses only a very simple character set so you can just write exactly these eight bytes as an atom.", "tokens": [51314, 467, 4960, 787, 257, 588, 2199, 2517, 992, 370, 291, 393, 445, 2464, 2293, 613, 3180, 36088, 382, 364, 12018, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12833889581823862, "compression_ratio": 1.6126126126126126, "no_speech_prob": 0.003012312576174736}, {"id": 133, "seek": 71824, "start": 718.24, "end": 725.24, "text": " If you have a white space in it you need to put quotes around and if you have a quote inside quotes you need to escape the quote.", "tokens": [50364, 759, 291, 362, 257, 2418, 1901, 294, 309, 291, 643, 281, 829, 19963, 926, 293, 498, 291, 362, 257, 6513, 1854, 19963, 291, 643, 281, 7615, 264, 6513, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12936366764845048, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.00942760705947876}, {"id": 134, "seek": 71824, "start": 725.24, "end": 729.24, "text": " So it is similar to programming, most programming languages.", "tokens": [50714, 407, 309, 307, 2531, 281, 9410, 11, 881, 9410, 8650, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12936366764845048, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.00942760705947876}, {"id": 135, "seek": 71824, "start": 729.24, "end": 735.24, "text": " And if you have a literal, obviously if you have a new line in there, this would be the obvious case,", "tokens": [50914, 400, 498, 291, 362, 257, 20411, 11, 2745, 498, 291, 362, 257, 777, 1622, 294, 456, 11, 341, 576, 312, 264, 6322, 1389, 11, 51214], "temperature": 0.0, "avg_logprob": -0.12936366764845048, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.00942760705947876}, {"id": 136, "seek": 71824, "start": 735.24, "end": 742.24, "text": " you need to use these prefix here in curled braces and then you just send exactly the bytes that made up your string after a new line.", "tokens": [51214, 291, 643, 281, 764, 613, 46969, 510, 294, 1262, 1493, 41537, 293, 550, 291, 445, 2845, 2293, 264, 36088, 300, 1027, 493, 428, 6798, 934, 257, 777, 1622, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12936366764845048, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.00942760705947876}, {"id": 137, "seek": 71824, "start": 742.24, "end": 745.24, "text": " With a twist as we will see.", "tokens": [51564, 2022, 257, 8203, 382, 321, 486, 536, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12936366764845048, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.00942760705947876}, {"id": 138, "seek": 74524, "start": 746.24, "end": 752.24, "text": " What we will glaze over today are ambiguities and defects and I had a few discussions already about this one.", "tokens": [50414, 708, 321, 486, 39390, 670, 965, 366, 40390, 1088, 293, 32655, 293, 286, 632, 257, 1326, 11088, 1217, 466, 341, 472, 13, 50714], "temperature": 0.0, "avg_logprob": -0.154658836893516, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.018463894724845886}, {"id": 139, "seek": 74524, "start": 752.24, "end": 757.24, "text": " So I would very much ask everyone if you find some defect in IMAP please report it to us.", "tokens": [50714, 407, 286, 576, 588, 709, 1029, 1518, 498, 291, 915, 512, 16445, 294, 21463, 4715, 1767, 2275, 309, 281, 505, 13, 50964], "temperature": 0.0, "avg_logprob": -0.154658836893516, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.018463894724845886}, {"id": 140, "seek": 74524, "start": 757.24, "end": 761.24, "text": " We really want to start a collection on all of these things.", "tokens": [50964, 492, 534, 528, 281, 722, 257, 5765, 322, 439, 295, 613, 721, 13, 51164], "temperature": 0.0, "avg_logprob": -0.154658836893516, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.018463894724845886}, {"id": 141, "seek": 74524, "start": 763.24, "end": 769.24, "text": " And one thing I finally wanted to say, I quoted Mark Crispin from this thread,", "tokens": [51264, 400, 472, 551, 286, 2721, 1415, 281, 584, 11, 286, 30047, 3934, 49077, 259, 490, 341, 7207, 11, 51564], "temperature": 0.0, "avg_logprob": -0.154658836893516, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.018463894724845886}, {"id": 142, "seek": 74524, "start": 769.24, "end": 773.24, "text": " but if you now will go to the internet you won't find it.", "tokens": [51564, 457, 498, 291, 586, 486, 352, 281, 264, 4705, 291, 1582, 380, 915, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.154658836893516, "compression_ratio": 1.5816733067729083, "no_speech_prob": 0.018463894724845886}, {"id": 143, "seek": 77324, "start": 773.24, "end": 779.24, "text": " So the IMAP protocol, at some point it's not available anymore due to reasons.", "tokens": [50364, 407, 264, 21463, 4715, 10336, 11, 412, 512, 935, 309, 311, 406, 2435, 3602, 3462, 281, 4112, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1909313421139772, "compression_ratio": 1.5504587155963303, "no_speech_prob": 0.01323611568659544}, {"id": 144, "seek": 77324, "start": 779.24, "end": 787.24, "text": " So and for me the only lucky thing that happened was that someone I know, it's the maintainer of the Mealy email client,", "tokens": [50664, 407, 293, 337, 385, 264, 787, 6356, 551, 300, 2011, 390, 300, 1580, 286, 458, 11, 309, 311, 264, 6909, 260, 295, 264, 1923, 5222, 3796, 6423, 11, 51064], "temperature": 0.0, "avg_logprob": -0.1909313421139772, "compression_ratio": 1.5504587155963303, "no_speech_prob": 0.01323611568659544}, {"id": 145, "seek": 77324, "start": 787.24, "end": 793.24, "text": " he had this super cool online interactive WebAssembly demo and he used the dump as test data.", "tokens": [51064, 415, 632, 341, 1687, 1627, 2950, 15141, 9573, 10884, 19160, 10723, 293, 415, 1143, 264, 11430, 382, 1500, 1412, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1909313421139772, "compression_ratio": 1.5504587155963303, "no_speech_prob": 0.01323611568659544}, {"id": 146, "seek": 77324, "start": 793.24, "end": 796.24, "text": " So that was the only reason I could read it.", "tokens": [51364, 407, 300, 390, 264, 787, 1778, 286, 727, 1401, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1909313421139772, "compression_ratio": 1.5504587155963303, "no_speech_prob": 0.01323611568659544}, {"id": 147, "seek": 79624, "start": 796.24, "end": 801.24, "text": " I guess the thing I want to say here is let's try to be aware that knowledge is disappearing", "tokens": [50364, 286, 2041, 264, 551, 286, 528, 281, 584, 510, 307, 718, 311, 853, 281, 312, 3650, 300, 3601, 307, 34900, 50614], "temperature": 0.0, "avg_logprob": -0.1718641049934156, "compression_ratio": 1.4450867052023122, "no_speech_prob": 0.010528160259127617}, {"id": 148, "seek": 79624, "start": 801.24, "end": 806.24, "text": " and maybe try to resurrect the IMAP protocol mailing list because it's awesome,", "tokens": [50614, 293, 1310, 853, 281, 34338, 264, 21463, 4715, 10336, 41612, 1329, 570, 309, 311, 3476, 11, 50864], "temperature": 0.0, "avg_logprob": -0.1718641049934156, "compression_ratio": 1.4450867052023122, "no_speech_prob": 0.010528160259127617}, {"id": 149, "seek": 79624, "start": 806.24, "end": 809.24, "text": " it's like a travel trove of information.", "tokens": [50864, 309, 311, 411, 257, 3147, 4495, 303, 295, 1589, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1718641049934156, "compression_ratio": 1.4450867052023122, "no_speech_prob": 0.010528160259127617}, {"id": 150, "seek": 79624, "start": 809.24, "end": 813.24, "text": " Okay, then let's go back to framing.", "tokens": [51014, 1033, 11, 550, 718, 311, 352, 646, 281, 28971, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1718641049934156, "compression_ratio": 1.4450867052023122, "no_speech_prob": 0.010528160259127617}, {"id": 151, "seek": 81324, "start": 814.24, "end": 816.24, "text": " So...", "tokens": [50414, 407, 485, 50514], "temperature": 0.0, "avg_logprob": -0.21840554125168743, "compression_ratio": 1.4080459770114941, "no_speech_prob": 0.008907383307814598}, {"id": 152, "seek": 81324, "start": 818.24, "end": 821.24, "text": " Oh, everything tanked up.", "tokens": [50614, 876, 11, 1203, 5466, 292, 493, 13, 50764], "temperature": 0.0, "avg_logprob": -0.21840554125168743, "compression_ratio": 1.4080459770114941, "no_speech_prob": 0.008907383307814598}, {"id": 153, "seek": 81324, "start": 821.24, "end": 822.24, "text": " Yeah, I'm back again.", "tokens": [50764, 865, 11, 286, 478, 646, 797, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21840554125168743, "compression_ratio": 1.4080459770114941, "no_speech_prob": 0.008907383307814598}, {"id": 154, "seek": 81324, "start": 822.24, "end": 830.24, "text": " So we're going to continue to talk about some higher level layer.", "tokens": [50814, 407, 321, 434, 516, 281, 2354, 281, 751, 466, 512, 2946, 1496, 4583, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21840554125168743, "compression_ratio": 1.4080459770114941, "no_speech_prob": 0.008907383307814598}, {"id": 155, "seek": 81324, "start": 830.24, "end": 839.24, "text": " So flow and framing, but by flow and framing we mean how does one split the IMAP stream into separate commands and responses.", "tokens": [51214, 407, 3095, 293, 28971, 11, 457, 538, 3095, 293, 28971, 321, 914, 577, 775, 472, 7472, 264, 21463, 4715, 4309, 666, 4994, 16901, 293, 13019, 13, 51664], "temperature": 0.0, "avg_logprob": -0.21840554125168743, "compression_ratio": 1.4080459770114941, "no_speech_prob": 0.008907383307814598}, {"id": 156, "seek": 83924, "start": 839.24, "end": 843.24, "text": " So this is pretty simple. This seems pretty simple at first.", "tokens": [50364, 407, 341, 307, 1238, 2199, 13, 639, 2544, 1238, 2199, 412, 700, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1273337084837634, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.008621822111308575}, {"id": 157, "seek": 83924, "start": 843.24, "end": 846.24, "text": " Here's a simple example, similar to what we've seen.", "tokens": [50564, 1692, 311, 257, 2199, 1365, 11, 2531, 281, 437, 321, 600, 1612, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1273337084837634, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.008621822111308575}, {"id": 158, "seek": 83924, "start": 846.24, "end": 852.24, "text": " Log in command at first and then the server replies okay and then the client sends a select command", "tokens": [50714, 10824, 294, 5622, 412, 700, 293, 550, 264, 7154, 42289, 1392, 293, 550, 264, 6423, 14790, 257, 3048, 5622, 51014], "temperature": 0.0, "avg_logprob": -0.1273337084837634, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.008621822111308575}, {"id": 159, "seek": 83924, "start": 852.24, "end": 855.24, "text": " and then the server replies some data and then replies okay.", "tokens": [51014, 293, 550, 264, 7154, 42289, 512, 1412, 293, 550, 42289, 1392, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1273337084837634, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.008621822111308575}, {"id": 160, "seek": 83924, "start": 855.24, "end": 858.24, "text": " So one may think, yeah, it's pretty simple.", "tokens": [51164, 407, 472, 815, 519, 11, 1338, 11, 309, 311, 1238, 2199, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1273337084837634, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.008621822111308575}, {"id": 161, "seek": 83924, "start": 858.24, "end": 865.24, "text": " You just need to split a new line and each line is a message basically.", "tokens": [51314, 509, 445, 643, 281, 7472, 257, 777, 1622, 293, 1184, 1622, 307, 257, 3636, 1936, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1273337084837634, "compression_ratio": 1.8483412322274881, "no_speech_prob": 0.008621822111308575}, {"id": 162, "seek": 86524, "start": 865.24, "end": 868.24, "text": " And then literals happened.", "tokens": [50364, 400, 550, 2733, 1124, 2011, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13522188663482665, "compression_ratio": 1.6582914572864322, "no_speech_prob": 0.0014732478884980083}, {"id": 163, "seek": 86524, "start": 868.24, "end": 876.24, "text": " So here's a slightly more complicated example where the client sends a login command, the username,", "tokens": [50514, 407, 510, 311, 257, 4748, 544, 6179, 1365, 689, 264, 6423, 14790, 257, 24276, 5622, 11, 264, 30351, 11, 50914], "temperature": 0.0, "avg_logprob": -0.13522188663482665, "compression_ratio": 1.6582914572864322, "no_speech_prob": 0.0014732478884980083}, {"id": 164, "seek": 86524, "start": 876.24, "end": 880.24, "text": " and then the password is passed as a literal.", "tokens": [50914, 293, 550, 264, 11524, 307, 4678, 382, 257, 20411, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13522188663482665, "compression_ratio": 1.6582914572864322, "no_speech_prob": 0.0014732478884980083}, {"id": 165, "seek": 86524, "start": 880.24, "end": 886.24, "text": " So first there's a number of bytes and then the next line there's contents.", "tokens": [51114, 407, 700, 456, 311, 257, 1230, 295, 36088, 293, 550, 264, 958, 1622, 456, 311, 15768, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13522188663482665, "compression_ratio": 1.6582914572864322, "no_speech_prob": 0.0014732478884980083}, {"id": 166, "seek": 86524, "start": 886.24, "end": 893.24, "text": " So here what's interesting is that these two lines are a single logical message.", "tokens": [51414, 407, 510, 437, 311, 1880, 307, 300, 613, 732, 3876, 366, 257, 2167, 14978, 3636, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13522188663482665, "compression_ratio": 1.6582914572864322, "no_speech_prob": 0.0014732478884980083}, {"id": 167, "seek": 89324, "start": 893.24, "end": 902.24, "text": " The second line here sent by the client is still part of the login command.", "tokens": [50364, 440, 1150, 1622, 510, 2279, 538, 264, 6423, 307, 920, 644, 295, 264, 24276, 5622, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07944601010053585, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.0006372605566866696}, {"id": 168, "seek": 89324, "start": 902.24, "end": 907.24, "text": " Another interesting thing is that in between here there's a plus sent by the server.", "tokens": [50814, 3996, 1880, 551, 307, 300, 294, 1296, 510, 456, 311, 257, 1804, 2279, 538, 264, 7154, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07944601010053585, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.0006372605566866696}, {"id": 169, "seek": 89324, "start": 907.24, "end": 911.24, "text": " This is because the server needs to acknowledge literals.", "tokens": [51064, 639, 307, 570, 264, 7154, 2203, 281, 10692, 2733, 1124, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07944601010053585, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.0006372605566866696}, {"id": 170, "seek": 89324, "start": 911.24, "end": 918.24, "text": " So when the client sends the first line here, it says, hey, I want to send a literal with six bytes", "tokens": [51264, 407, 562, 264, 6423, 14790, 264, 700, 1622, 510, 11, 309, 1619, 11, 4177, 11, 286, 528, 281, 2845, 257, 20411, 365, 2309, 36088, 51614], "temperature": 0.0, "avg_logprob": -0.07944601010053585, "compression_ratio": 1.6307692307692307, "no_speech_prob": 0.0006372605566866696}, {"id": 171, "seek": 91824, "start": 918.24, "end": 925.24, "text": " and then later the server has to reply, yeah, you can go on with this plus and then option and comment after that.", "tokens": [50364, 293, 550, 1780, 264, 7154, 575, 281, 16972, 11, 1338, 11, 291, 393, 352, 322, 365, 341, 1804, 293, 550, 3614, 293, 2871, 934, 300, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12258848462785993, "compression_ratio": 1.532967032967033, "no_speech_prob": 0.0013004298089072108}, {"id": 172, "seek": 91824, "start": 925.24, "end": 938.24, "text": " The client needs to wait for the acknowledgement before sending the literal data.", "tokens": [50714, 440, 6423, 2203, 281, 1699, 337, 264, 47227, 949, 7750, 264, 20411, 1412, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12258848462785993, "compression_ratio": 1.532967032967033, "no_speech_prob": 0.0013004298089072108}, {"id": 173, "seek": 91824, "start": 938.24, "end": 940.24, "text": " Okay, so that's interesting.", "tokens": [51364, 1033, 11, 370, 300, 311, 1880, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12258848462785993, "compression_ratio": 1.532967032967033, "no_speech_prob": 0.0013004298089072108}, {"id": 174, "seek": 91824, "start": 940.24, "end": 944.24, "text": " Let's try to look at only one side of the connection.", "tokens": [51464, 961, 311, 853, 281, 574, 412, 787, 472, 1252, 295, 264, 4984, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12258848462785993, "compression_ratio": 1.532967032967033, "no_speech_prob": 0.0013004298089072108}, {"id": 175, "seek": 94424, "start": 944.24, "end": 949.24, "text": " So here let's try to look at only the client side and see what happens.", "tokens": [50364, 407, 510, 718, 311, 853, 281, 574, 412, 787, 264, 6423, 1252, 293, 536, 437, 2314, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16033858130959905, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.00802161730825901}, {"id": 176, "seek": 94424, "start": 949.24, "end": 958.24, "text": " So we can still make sense of everything here, like login with the literal and the next line and no op.", "tokens": [50614, 407, 321, 393, 920, 652, 2020, 295, 1203, 510, 11, 411, 24276, 365, 264, 20411, 293, 264, 958, 1622, 293, 572, 999, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16033858130959905, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.00802161730825901}, {"id": 177, "seek": 94424, "start": 958.24, "end": 961.24, "text": " Is this valid by the way?", "tokens": [51064, 1119, 341, 7363, 538, 264, 636, 30, 51214], "temperature": 0.0, "avg_logprob": -0.16033858130959905, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.00802161730825901}, {"id": 178, "seek": 94424, "start": 961.24, "end": 964.24, "text": " This sounds a bit weird, right?", "tokens": [51214, 639, 3263, 257, 857, 3657, 11, 558, 30, 51364], "temperature": 0.0, "avg_logprob": -0.16033858130959905, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.00802161730825901}, {"id": 179, "seek": 94424, "start": 964.24, "end": 971.24, "text": " The client sends the username and then announces the literal and then the next line here,", "tokens": [51364, 440, 6423, 14790, 264, 30351, 293, 550, 4262, 887, 264, 20411, 293, 550, 264, 958, 1622, 510, 11, 51714], "temperature": 0.0, "avg_logprob": -0.16033858130959905, "compression_ratio": 1.6649484536082475, "no_speech_prob": 0.00802161730825901}, {"id": 180, "seek": 97124, "start": 971.24, "end": 973.24, "text": " it sends a completely different command.", "tokens": [50364, 309, 14790, 257, 2584, 819, 5622, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12618180769908277, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007312016095966101}, {"id": 181, "seek": 97124, "start": 973.24, "end": 975.24, "text": " It's not the password or anything.", "tokens": [50464, 467, 311, 406, 264, 11524, 420, 1340, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12618180769908277, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007312016095966101}, {"id": 182, "seek": 97124, "start": 975.24, "end": 977.24, "text": " Is this valid IMAP even?", "tokens": [50564, 1119, 341, 7363, 21463, 4715, 754, 30, 50664], "temperature": 0.0, "avg_logprob": -0.12618180769908277, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007312016095966101}, {"id": 183, "seek": 97124, "start": 977.24, "end": 986.24, "text": " It turns out that yes, it's completely valid IMAP because if the server replies no to the first line the client sends,", "tokens": [50664, 467, 4523, 484, 300, 2086, 11, 309, 311, 2584, 7363, 21463, 4715, 570, 498, 264, 7154, 42289, 572, 281, 264, 700, 1622, 264, 6423, 14790, 11, 51114], "temperature": 0.0, "avg_logprob": -0.12618180769908277, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007312016095966101}, {"id": 184, "seek": 97124, "start": 986.24, "end": 989.24, "text": " then it can send the literal.", "tokens": [51114, 550, 309, 393, 2845, 264, 20411, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12618180769908277, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007312016095966101}, {"id": 185, "seek": 97124, "start": 989.24, "end": 991.24, "text": " It says, I don't want your literal.", "tokens": [51264, 467, 1619, 11, 286, 500, 380, 528, 428, 20411, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12618180769908277, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.007312016095966101}, {"id": 186, "seek": 99124, "start": 991.24, "end": 1001.24, "text": " So basically what I'm trying to say here is that it's not possible to pass IMAP just looking at one side", "tokens": [50364, 407, 1936, 437, 286, 478, 1382, 281, 584, 510, 307, 300, 309, 311, 406, 1944, 281, 1320, 21463, 4715, 445, 1237, 412, 472, 1252, 50864], "temperature": 0.0, "avg_logprob": -0.09423802222734616, "compression_ratio": 1.5381165919282511, "no_speech_prob": 0.03267977386713028}, {"id": 187, "seek": 99124, "start": 1001.24, "end": 1009.24, "text": " because you can't make the difference between this case and this case here, whereas the server rejects the literal.", "tokens": [50864, 570, 291, 393, 380, 652, 264, 2649, 1296, 341, 1389, 293, 341, 1389, 510, 11, 9735, 264, 7154, 8248, 82, 264, 20411, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09423802222734616, "compression_ratio": 1.5381165919282511, "no_speech_prob": 0.03267977386713028}, {"id": 188, "seek": 99124, "start": 1009.24, "end": 1019.24, "text": " So you need in your IMAP password to have some kind of feedback from the other side of a connection to know what happened.", "tokens": [51264, 407, 291, 643, 294, 428, 21463, 4715, 11524, 281, 362, 512, 733, 295, 5824, 490, 264, 661, 1252, 295, 257, 4984, 281, 458, 437, 2011, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09423802222734616, "compression_ratio": 1.5381165919282511, "no_speech_prob": 0.03267977386713028}, {"id": 189, "seek": 101924, "start": 1019.24, "end": 1027.24, "text": " And so one may think that we don't really need to wait for the server to acknowledge the literal.", "tokens": [50364, 400, 370, 472, 815, 519, 300, 321, 500, 380, 534, 643, 281, 1699, 337, 264, 7154, 281, 10692, 264, 20411, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10268094927765602, "compression_ratio": 1.75, "no_speech_prob": 0.006657477933913469}, {"id": 190, "seek": 101924, "start": 1027.24, "end": 1033.24, "text": " We can just send the command and the literal in one go and forget about it.", "tokens": [50764, 492, 393, 445, 2845, 264, 5622, 293, 264, 20411, 294, 472, 352, 293, 2870, 466, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10268094927765602, "compression_ratio": 1.75, "no_speech_prob": 0.006657477933913469}, {"id": 191, "seek": 101924, "start": 1033.24, "end": 1039.24, "text": " The server will probably reply, okay, we'll probably acknowledge the literal in any case.", "tokens": [51064, 440, 7154, 486, 1391, 16972, 11, 1392, 11, 321, 603, 1391, 10692, 264, 20411, 294, 604, 1389, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10268094927765602, "compression_ratio": 1.75, "no_speech_prob": 0.006657477933913469}, {"id": 192, "seek": 101924, "start": 1039.24, "end": 1046.24, "text": " So here's an example of what could go wrong if you don't wait for the server acknowledgement.", "tokens": [51364, 407, 510, 311, 364, 1365, 295, 437, 727, 352, 2085, 498, 291, 500, 380, 1699, 337, 264, 7154, 47227, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10268094927765602, "compression_ratio": 1.75, "no_speech_prob": 0.006657477933913469}, {"id": 193, "seek": 104624, "start": 1047.24, "end": 1057.24, "text": " Maybe you have a web form on a page which lets the user save a draft in their mailbox.", "tokens": [50414, 2704, 291, 362, 257, 3670, 1254, 322, 257, 3028, 597, 6653, 264, 4195, 3155, 257, 11206, 294, 641, 43602, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15821895860645868, "compression_ratio": 1.6335078534031413, "no_speech_prob": 0.0060716415755450726}, {"id": 194, "seek": 104624, "start": 1057.24, "end": 1066.24, "text": " And maybe the literal contains like, may contain some text like this which are valid IMAP commands.", "tokens": [50914, 400, 1310, 264, 20411, 8306, 411, 11, 815, 5304, 512, 2487, 411, 341, 597, 366, 7363, 21463, 4715, 16901, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15821895860645868, "compression_ratio": 1.6335078534031413, "no_speech_prob": 0.0060716415755450726}, {"id": 195, "seek": 104624, "start": 1066.24, "end": 1075.24, "text": " So if the server happens to reject the literal, then these lines are interpreted just as regular IMAP commands by the server.", "tokens": [51364, 407, 498, 264, 7154, 2314, 281, 8248, 264, 20411, 11, 550, 613, 3876, 366, 26749, 445, 382, 3890, 21463, 4715, 16901, 538, 264, 7154, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15821895860645868, "compression_ratio": 1.6335078534031413, "no_speech_prob": 0.0060716415755450726}, {"id": 196, "seek": 107524, "start": 1075.24, "end": 1079.24, "text": " And these lines delete everything from your mailbox.", "tokens": [50364, 400, 613, 3876, 12097, 1203, 490, 428, 43602, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14505207675626908, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.003815076546743512}, {"id": 197, "seek": 107524, "start": 1079.24, "end": 1080.24, "text": " So that's not great.", "tokens": [50564, 407, 300, 311, 406, 869, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14505207675626908, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.003815076546743512}, {"id": 198, "seek": 107524, "start": 1080.24, "end": 1087.24, "text": " And this can be potentially inserted into HTML email hidden and HTML on a single line.", "tokens": [50614, 400, 341, 393, 312, 7263, 27992, 666, 17995, 3796, 7633, 293, 17995, 322, 257, 2167, 1622, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14505207675626908, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.003815076546743512}, {"id": 199, "seek": 107524, "start": 1087.24, "end": 1091.24, "text": " And yeah, if you reply to the email, you just use everything.", "tokens": [50964, 400, 1338, 11, 498, 291, 16972, 281, 264, 3796, 11, 291, 445, 764, 1203, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14505207675626908, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.003815076546743512}, {"id": 200, "seek": 107524, "start": 1091.24, "end": 1093.24, "text": " So yeah, it's pretty scary.", "tokens": [51164, 407, 1338, 11, 309, 311, 1238, 6958, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14505207675626908, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.003815076546743512}, {"id": 201, "seek": 107524, "start": 1095.24, "end": 1101.24, "text": " So to recap everything, something I haven't mentioned is that literal can appear basically anywhere.", "tokens": [51364, 407, 281, 20928, 1203, 11, 746, 286, 2378, 380, 2835, 307, 300, 20411, 393, 4204, 1936, 4992, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14505207675626908, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.003815076546743512}, {"id": 202, "seek": 110124, "start": 1101.24, "end": 1105.24, "text": " We've seen in the login command, but it can happen in the search command.", "tokens": [50364, 492, 600, 1612, 294, 264, 24276, 5622, 11, 457, 309, 393, 1051, 294, 264, 3164, 5622, 13, 50564], "temperature": 0.0, "avg_logprob": -0.18665877721642934, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0023489375598728657}, {"id": 203, "seek": 110124, "start": 1105.24, "end": 1109.24, "text": " There can be many literals for a single command.", "tokens": [50564, 821, 393, 312, 867, 2733, 1124, 337, 257, 2167, 5622, 13, 50764], "temperature": 0.0, "avg_logprob": -0.18665877721642934, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0023489375598728657}, {"id": 204, "seek": 110124, "start": 1109.24, "end": 1111.24, "text": " It's limited to one.", "tokens": [50764, 467, 311, 5567, 281, 472, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18665877721642934, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0023489375598728657}, {"id": 205, "seek": 110124, "start": 1111.24, "end": 1115.24, "text": " So literals interrupt completely the regular syntax.", "tokens": [50864, 407, 2733, 1124, 12729, 2584, 264, 3890, 28431, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18665877721642934, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0023489375598728657}, {"id": 206, "seek": 110124, "start": 1115.24, "end": 1121.24, "text": " You have to pause the parser from the server side or the client side if you receive a literal.", "tokens": [51064, 509, 362, 281, 10465, 264, 21156, 260, 490, 264, 7154, 1252, 420, 264, 6423, 1252, 498, 291, 4774, 257, 20411, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18665877721642934, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0023489375598728657}, {"id": 207, "seek": 110124, "start": 1121.24, "end": 1126.24, "text": " And then wait for the other side to reply, yeah, go on.", "tokens": [51364, 400, 550, 1699, 337, 264, 661, 1252, 281, 16972, 11, 1338, 11, 352, 322, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18665877721642934, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0023489375598728657}, {"id": 208, "seek": 112624, "start": 1126.24, "end": 1129.24, "text": " And then you have to resume the parser.", "tokens": [50364, 400, 550, 291, 362, 281, 15358, 264, 21156, 260, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11461954570951915, "compression_ratio": 1.628, "no_speech_prob": 0.002748267026618123}, {"id": 209, "seek": 112624, "start": 1129.24, "end": 1133.24, "text": " And the literal can be nested into a list or nested into something else.", "tokens": [50514, 400, 264, 20411, 393, 312, 15646, 292, 666, 257, 1329, 420, 15646, 292, 666, 746, 1646, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11461954570951915, "compression_ratio": 1.628, "no_speech_prob": 0.002748267026618123}, {"id": 210, "seek": 112624, "start": 1133.24, "end": 1140.24, "text": " So it's kind of complicated to do, especially if you're using, for instance, a parser generator or something.", "tokens": [50714, 407, 309, 311, 733, 295, 6179, 281, 360, 11, 2318, 498, 291, 434, 1228, 11, 337, 5197, 11, 257, 21156, 260, 19265, 420, 746, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11461954570951915, "compression_ratio": 1.628, "no_speech_prob": 0.002748267026618123}, {"id": 211, "seek": 112624, "start": 1140.24, "end": 1145.24, "text": " So we can pass IMAP just by looking at the single side of the connection as we've seen.", "tokens": [51064, 407, 321, 393, 1320, 21463, 4715, 445, 538, 1237, 412, 264, 2167, 1252, 295, 264, 4984, 382, 321, 600, 1612, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11461954570951915, "compression_ratio": 1.628, "no_speech_prob": 0.002748267026618123}, {"id": 212, "seek": 112624, "start": 1145.24, "end": 1151.24, "text": " And it's important to wait for the server to accept literals before going on or security within.", "tokens": [51314, 400, 309, 311, 1021, 281, 1699, 337, 264, 7154, 281, 3241, 2733, 1124, 949, 516, 322, 420, 3825, 1951, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11461954570951915, "compression_ratio": 1.628, "no_speech_prob": 0.002748267026618123}, {"id": 213, "seek": 115124, "start": 1152.24, "end": 1160.24, "text": " So another aspect of the flows we want to talk about is commands such as authenticate.", "tokens": [50414, 407, 1071, 4171, 295, 264, 12867, 321, 528, 281, 751, 466, 307, 16901, 1270, 382, 9214, 8700, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1313533638462876, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.0016459871549159288}, {"id": 214, "seek": 115124, "start": 1160.24, "end": 1168.24, "text": " So authenticate is a command that lets the client use Sassel authentication.", "tokens": [50814, 407, 9214, 8700, 307, 257, 5622, 300, 6653, 264, 6423, 764, 318, 640, 338, 26643, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1313533638462876, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.0016459871549159288}, {"id": 215, "seek": 115124, "start": 1168.24, "end": 1171.24, "text": " Sassel is a binary protocol.", "tokens": [51214, 318, 640, 338, 307, 257, 17434, 10336, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1313533638462876, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.0016459871549159288}, {"id": 216, "seek": 115124, "start": 1171.24, "end": 1177.24, "text": " And to authenticate in a modular way, you have several mechanisms.", "tokens": [51364, 400, 281, 9214, 8700, 294, 257, 31111, 636, 11, 291, 362, 2940, 15902, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1313533638462876, "compression_ratio": 1.628930817610063, "no_speech_prob": 0.0016459871549159288}, {"id": 217, "seek": 117724, "start": 1177.24, "end": 1185.24, "text": " So here's an example of a plain mechanism, which is a simple one with username and password, but there are those as well.", "tokens": [50364, 407, 510, 311, 364, 1365, 295, 257, 11121, 7513, 11, 597, 307, 257, 2199, 472, 365, 30351, 293, 11524, 11, 457, 456, 366, 729, 382, 731, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16524140040079752, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.0024775699712336063}, {"id": 218, "seek": 117724, "start": 1185.24, "end": 1193.24, "text": " So basically the idea is that you get a binary message and code it to base64 and then send it over.", "tokens": [50764, 407, 1936, 264, 1558, 307, 300, 291, 483, 257, 17434, 3636, 293, 3089, 309, 281, 3096, 19395, 293, 550, 2845, 309, 670, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16524140040079752, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.0024775699712336063}, {"id": 219, "seek": 117724, "start": 1193.24, "end": 1200.24, "text": " And the interesting thing here is that, so the client says authenticate command, the server says go on,", "tokens": [51164, 400, 264, 1880, 551, 510, 307, 300, 11, 370, 264, 6423, 1619, 9214, 8700, 5622, 11, 264, 7154, 1619, 352, 322, 11, 51514], "temperature": 0.0, "avg_logprob": -0.16524140040079752, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.0024775699712336063}, {"id": 220, "seek": 117724, "start": 1200.24, "end": 1203.24, "text": " you can continue the authenticate command.", "tokens": [51514, 291, 393, 2354, 264, 9214, 8700, 5622, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16524140040079752, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.0024775699712336063}, {"id": 221, "seek": 120324, "start": 1203.24, "end": 1208.24, "text": " And then the client sends just base64, like the, what?", "tokens": [50364, 400, 550, 264, 6423, 14790, 445, 3096, 19395, 11, 411, 264, 11, 437, 30, 50614], "temperature": 0.0, "avg_logprob": -0.15327438024374154, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.015324631705880165}, {"id": 222, "seek": 120324, "start": 1208.24, "end": 1210.24, "text": " This is not a regular IMAP command.", "tokens": [50614, 639, 307, 406, 257, 3890, 21463, 4715, 5622, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15327438024374154, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.015324631705880165}, {"id": 223, "seek": 120324, "start": 1210.24, "end": 1211.24, "text": " This is just base64.", "tokens": [50714, 639, 307, 445, 3096, 19395, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15327438024374154, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.015324631705880165}, {"id": 224, "seek": 120324, "start": 1211.24, "end": 1212.24, "text": " There's no tag.", "tokens": [50764, 821, 311, 572, 6162, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15327438024374154, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.015324631705880165}, {"id": 225, "seek": 120324, "start": 1212.24, "end": 1213.24, "text": " There's no command name.", "tokens": [50814, 821, 311, 572, 5622, 1315, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15327438024374154, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.015324631705880165}, {"id": 226, "seek": 120324, "start": 1213.24, "end": 1216.24, "text": " It's just like the base64 data as is.", "tokens": [50864, 467, 311, 445, 411, 264, 3096, 19395, 1412, 382, 307, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15327438024374154, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.015324631705880165}, {"id": 227, "seek": 120324, "start": 1216.24, "end": 1220.24, "text": " It just interrupts regular IMAP syntax with completely something else.", "tokens": [51014, 467, 445, 12729, 82, 3890, 21463, 4715, 28431, 365, 2584, 746, 1646, 13, 51214], "temperature": 0.0, "avg_logprob": -0.15327438024374154, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.015324631705880165}, {"id": 228, "seek": 120324, "start": 1220.24, "end": 1228.24, "text": " And IDOL does something as well similar to this, where client sends IDOL, server says go on,", "tokens": [51214, 400, 7348, 5046, 775, 746, 382, 731, 2531, 281, 341, 11, 689, 6423, 14790, 7348, 5046, 11, 7154, 1619, 352, 322, 11, 51614], "temperature": 0.0, "avg_logprob": -0.15327438024374154, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.015324631705880165}, {"id": 229, "seek": 122824, "start": 1228.24, "end": 1234.24, "text": " and then client can just send the ASCII string down like the four bytes down.", "tokens": [50364, 293, 550, 6423, 393, 445, 2845, 264, 7469, 34, 9503, 6798, 760, 411, 264, 1451, 36088, 760, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15134955854976878, "compression_ratio": 1.4606060606060607, "no_speech_prob": 0.00960291177034378}, {"id": 230, "seek": 122824, "start": 1234.24, "end": 1236.24, "text": " And it's not an IMAP command or anything.", "tokens": [50664, 400, 309, 311, 406, 364, 21463, 4715, 5622, 420, 1340, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15134955854976878, "compression_ratio": 1.4606060606060607, "no_speech_prob": 0.00960291177034378}, {"id": 231, "seek": 122824, "start": 1236.24, "end": 1238.24, "text": " It's just like an ASCII string.", "tokens": [50764, 467, 311, 445, 411, 364, 7469, 34, 9503, 6798, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15134955854976878, "compression_ratio": 1.4606060606060607, "no_speech_prob": 0.00960291177034378}, {"id": 232, "seek": 122824, "start": 1246.24, "end": 1254.24, "text": " Start CLS and compress are kind of similar in the way that when you start these commands,", "tokens": [51264, 6481, 12855, 50, 293, 14778, 366, 733, 295, 2531, 294, 264, 636, 300, 562, 291, 722, 613, 16901, 11, 51664], "temperature": 0.0, "avg_logprob": -0.15134955854976878, "compression_ratio": 1.4606060606060607, "no_speech_prob": 0.00960291177034378}, {"id": 233, "seek": 125424, "start": 1254.24, "end": 1261.24, "text": " it interrupts a regular IMAP stream and wraps it up with CLS or compression mechanism.", "tokens": [50364, 309, 12729, 82, 257, 3890, 21463, 4715, 4309, 293, 25831, 309, 493, 365, 12855, 50, 420, 19355, 7513, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15450283418218774, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.005583897698670626}, {"id": 234, "seek": 125424, "start": 1261.24, "end": 1265.24, "text": " So these are fun to implement as well.", "tokens": [50714, 407, 613, 366, 1019, 281, 4445, 382, 731, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15450283418218774, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.005583897698670626}, {"id": 235, "seek": 125424, "start": 1265.24, "end": 1275.24, "text": " So in summary, for the flow section, IMAP demands you to conflate your passing with business logic", "tokens": [50914, 407, 294, 12691, 11, 337, 264, 3095, 3541, 11, 21463, 4715, 15107, 291, 281, 1497, 17593, 428, 8437, 365, 1606, 9952, 51414], "temperature": 0.0, "avg_logprob": -0.15450283418218774, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.005583897698670626}, {"id": 236, "seek": 125424, "start": 1275.24, "end": 1277.24, "text": " with higher level details.", "tokens": [51414, 365, 2946, 1496, 4365, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15450283418218774, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.005583897698670626}, {"id": 237, "seek": 125424, "start": 1277.24, "end": 1283.24, "text": " So you cannot have a pure password in its own little module isolated from everything else.", "tokens": [51514, 407, 291, 2644, 362, 257, 6075, 11524, 294, 1080, 1065, 707, 10088, 14621, 490, 1203, 1646, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15450283418218774, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.005583897698670626}, {"id": 238, "seek": 128324, "start": 1283.24, "end": 1288.24, "text": " You need to wire it up with the rest of the IMAP library.", "tokens": [50364, 509, 643, 281, 6234, 309, 493, 365, 264, 1472, 295, 264, 21463, 4715, 6405, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11972089715906091, "compression_ratio": 1.4371859296482412, "no_speech_prob": 0.002154049463570118}, {"id": 239, "seek": 128324, "start": 1288.24, "end": 1294.24, "text": " It's kind of special in this regard compared to other processes.", "tokens": [50614, 467, 311, 733, 295, 2121, 294, 341, 3843, 5347, 281, 661, 7555, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11972089715906091, "compression_ratio": 1.4371859296482412, "no_speech_prob": 0.002154049463570118}, {"id": 240, "seek": 128324, "start": 1294.24, "end": 1301.24, "text": " Okay, now on to operations and semantics.", "tokens": [50914, 1033, 11, 586, 322, 281, 7705, 293, 4361, 45298, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11972089715906091, "compression_ratio": 1.4371859296482412, "no_speech_prob": 0.002154049463570118}, {"id": 241, "seek": 128324, "start": 1301.24, "end": 1305.24, "text": " So let's talk about fetching messages again.", "tokens": [51264, 407, 718, 311, 751, 466, 23673, 278, 7897, 797, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11972089715906091, "compression_ratio": 1.4371859296482412, "no_speech_prob": 0.002154049463570118}, {"id": 242, "seek": 128324, "start": 1305.24, "end": 1309.24, "text": " There are multiple things you can request from the server to fetch messages.", "tokens": [51464, 821, 366, 3866, 721, 291, 393, 5308, 490, 264, 7154, 281, 23673, 7897, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11972089715906091, "compression_ratio": 1.4371859296482412, "no_speech_prob": 0.002154049463570118}, {"id": 243, "seek": 130924, "start": 1309.24, "end": 1314.24, "text": " So basic example, the envelope we've already seen.", "tokens": [50364, 407, 3875, 1365, 11, 264, 19989, 321, 600, 1217, 1612, 13, 50614], "temperature": 0.0, "avg_logprob": -0.162257822822122, "compression_ratio": 1.683168316831683, "no_speech_prob": 0.012643088586628437}, {"id": 244, "seek": 130924, "start": 1314.24, "end": 1323.24, "text": " Body structure is if you request the MIME structure of a message with a tree of nested parts.", "tokens": [50614, 21329, 3877, 307, 498, 291, 5308, 264, 376, 6324, 36, 3877, 295, 257, 3636, 365, 257, 4230, 295, 15646, 292, 3166, 13, 51064], "temperature": 0.0, "avg_logprob": -0.162257822822122, "compression_ratio": 1.683168316831683, "no_speech_prob": 0.012643088586628437}, {"id": 245, "seek": 130924, "start": 1323.24, "end": 1325.24, "text": " If you have attachments for example.", "tokens": [51064, 759, 291, 362, 37987, 337, 1365, 13, 51164], "temperature": 0.0, "avg_logprob": -0.162257822822122, "compression_ratio": 1.683168316831683, "no_speech_prob": 0.012643088586628437}, {"id": 246, "seek": 130924, "start": 1325.24, "end": 1330.24, "text": " And then to fetch the message body, you can use body square brackets.", "tokens": [51164, 400, 550, 281, 23673, 264, 3636, 1772, 11, 291, 393, 764, 1772, 3732, 26179, 13, 51414], "temperature": 0.0, "avg_logprob": -0.162257822822122, "compression_ratio": 1.683168316831683, "no_speech_prob": 0.012643088586628437}, {"id": 247, "seek": 130924, "start": 1330.24, "end": 1337.24, "text": " If you just request body square brackets like this example, you get a full message body.", "tokens": [51414, 759, 291, 445, 5308, 1772, 3732, 26179, 411, 341, 1365, 11, 291, 483, 257, 1577, 3636, 1772, 13, 51764], "temperature": 0.0, "avg_logprob": -0.162257822822122, "compression_ratio": 1.683168316831683, "no_speech_prob": 0.012643088586628437}, {"id": 248, "seek": 133724, "start": 1338.24, "end": 1345.24, "text": " So here's an example, very simple message with two header lines and then a simple text.", "tokens": [50414, 407, 510, 311, 364, 1365, 11, 588, 2199, 3636, 365, 732, 23117, 3876, 293, 550, 257, 2199, 2487, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10882094880224953, "compression_ratio": 1.6932515337423313, "no_speech_prob": 0.000952846254222095}, {"id": 249, "seek": 133724, "start": 1345.24, "end": 1350.24, "text": " So yeah, if you fetch the body square bracket, you get everything.", "tokens": [50764, 407, 1338, 11, 498, 291, 23673, 264, 1772, 3732, 16904, 11, 291, 483, 1203, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10882094880224953, "compression_ratio": 1.6932515337423313, "no_speech_prob": 0.000952846254222095}, {"id": 250, "seek": 133724, "start": 1350.24, "end": 1356.24, "text": " If you want to fetch only the header, you can use body square brackets header.", "tokens": [51014, 759, 291, 528, 281, 23673, 787, 264, 23117, 11, 291, 393, 764, 1772, 3732, 26179, 23117, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10882094880224953, "compression_ratio": 1.6932515337423313, "no_speech_prob": 0.000952846254222095}, {"id": 251, "seek": 133724, "start": 1356.24, "end": 1359.24, "text": " And then you get only the first two lines.", "tokens": [51314, 400, 550, 291, 483, 787, 264, 700, 732, 3876, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10882094880224953, "compression_ratio": 1.6932515337423313, "no_speech_prob": 0.000952846254222095}, {"id": 252, "seek": 135924, "start": 1359.24, "end": 1362.24, "text": " And you can request only the text of the message.", "tokens": [50364, 400, 291, 393, 5308, 787, 264, 2487, 295, 264, 3636, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1885958062597068, "compression_ratio": 1.5235602094240839, "no_speech_prob": 0.0035137187223881483}, {"id": 253, "seek": 135924, "start": 1362.24, "end": 1367.24, "text": " So the howdy part here with the text modifier.", "tokens": [50514, 407, 264, 577, 3173, 644, 510, 365, 264, 2487, 38011, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1885958062597068, "compression_ratio": 1.5235602094240839, "no_speech_prob": 0.0035137187223881483}, {"id": 254, "seek": 135924, "start": 1367.24, "end": 1371.24, "text": " But you can do more complicated stuff as well.", "tokens": [50764, 583, 291, 393, 360, 544, 6179, 1507, 382, 731, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1885958062597068, "compression_ratio": 1.5235602094240839, "no_speech_prob": 0.0035137187223881483}, {"id": 255, "seek": 135924, "start": 1371.24, "end": 1373.24, "text": " Oh my.", "tokens": [50964, 876, 452, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1885958062597068, "compression_ratio": 1.5235602094240839, "no_speech_prob": 0.0035137187223881483}, {"id": 256, "seek": 135924, "start": 1373.24, "end": 1377.24, "text": " Yeah, maybe I'll go very fast on this one.", "tokens": [51064, 865, 11, 1310, 286, 603, 352, 588, 2370, 322, 341, 472, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1885958062597068, "compression_ratio": 1.5235602094240839, "no_speech_prob": 0.0035137187223881483}, {"id": 257, "seek": 135924, "start": 1377.24, "end": 1379.24, "text": " You can fetch particular header fields.", "tokens": [51264, 509, 393, 23673, 1729, 23117, 7909, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1885958062597068, "compression_ratio": 1.5235602094240839, "no_speech_prob": 0.0035137187223881483}, {"id": 258, "seek": 135924, "start": 1379.24, "end": 1385.24, "text": " You can fetch sections, bytes, substrings of the results.", "tokens": [51364, 509, 393, 23673, 10863, 11, 36088, 11, 4594, 25782, 295, 264, 3542, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1885958062597068, "compression_ratio": 1.5235602094240839, "no_speech_prob": 0.0035137187223881483}, {"id": 259, "seek": 138524, "start": 1385.24, "end": 1390.24, "text": " You can fetch, if you have a multi-part message, we have an example with two parts.", "tokens": [50364, 509, 393, 23673, 11, 498, 291, 362, 257, 4825, 12, 6971, 3636, 11, 321, 362, 364, 1365, 365, 732, 3166, 13, 50614], "temperature": 0.0, "avg_logprob": -0.21066810687383017, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0021093974355608225}, {"id": 260, "seek": 138524, "start": 1390.24, "end": 1396.24, "text": " So the main part, the first sub part, the second sub part with an attachment.", "tokens": [50614, 407, 264, 2135, 644, 11, 264, 700, 1422, 644, 11, 264, 1150, 1422, 644, 365, 364, 19431, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21066810687383017, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0021093974355608225}, {"id": 261, "seek": 138524, "start": 1396.24, "end": 1402.24, "text": " Then you can fetch only the first part here.", "tokens": [50914, 1396, 291, 393, 23673, 787, 264, 700, 644, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21066810687383017, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0021093974355608225}, {"id": 262, "seek": 138524, "start": 1402.24, "end": 1405.24, "text": " So the counter disposition in line one.", "tokens": [51214, 407, 264, 5682, 40293, 294, 1622, 472, 13, 51364], "temperature": 0.0, "avg_logprob": -0.21066810687383017, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0021093974355608225}, {"id": 263, "seek": 138524, "start": 1405.24, "end": 1410.24, "text": " Or you can, here this one is interesting because it returns nothing.", "tokens": [51364, 1610, 291, 393, 11, 510, 341, 472, 307, 1880, 570, 309, 11247, 1825, 13, 51614], "temperature": 0.0, "avg_logprob": -0.21066810687383017, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0021093974355608225}, {"id": 264, "seek": 138524, "start": 1410.24, "end": 1413.24, "text": " A header actually doesn't work in nested parts.", "tokens": [51614, 316, 23117, 767, 1177, 380, 589, 294, 15646, 292, 3166, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21066810687383017, "compression_ratio": 1.665137614678899, "no_speech_prob": 0.0021093974355608225}, {"id": 265, "seek": 141324, "start": 1413.24, "end": 1418.24, "text": " You have to use a special keyword called mine for some reason.", "tokens": [50364, 509, 362, 281, 764, 257, 2121, 20428, 1219, 3892, 337, 512, 1778, 13, 50614], "temperature": 0.0, "avg_logprob": -0.17218700322237881, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.006558812223374844}, {"id": 266, "seek": 141324, "start": 1418.24, "end": 1423.24, "text": " And then if you have a message attached to a message, then you have a section of the RFC", "tokens": [50614, 400, 550, 498, 291, 362, 257, 3636, 8570, 281, 257, 3636, 11, 550, 291, 362, 257, 3541, 295, 264, 497, 18671, 50864], "temperature": 0.0, "avg_logprob": -0.17218700322237881, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.006558812223374844}, {"id": 267, "seek": 141324, "start": 1423.24, "end": 1426.24, "text": " dedicated to this particular use case.", "tokens": [50864, 8374, 281, 341, 1729, 764, 1389, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17218700322237881, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.006558812223374844}, {"id": 268, "seek": 141324, "start": 1426.24, "end": 1428.24, "text": " Like something everybody does every day, I think.", "tokens": [51014, 1743, 746, 2201, 775, 633, 786, 11, 286, 519, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17218700322237881, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.006558812223374844}, {"id": 269, "seek": 141324, "start": 1428.24, "end": 1432.24, "text": " Messages into messages, like Russian dolls.", "tokens": [51114, 9847, 1660, 666, 7897, 11, 411, 7220, 29134, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17218700322237881, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.006558812223374844}, {"id": 270, "seek": 141324, "start": 1432.24, "end": 1438.24, "text": " The last thing I want to talk about is unilateral server data.", "tokens": [51314, 440, 1036, 551, 286, 528, 281, 751, 466, 307, 517, 37751, 7154, 1412, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17218700322237881, "compression_ratio": 1.563063063063063, "no_speech_prob": 0.006558812223374844}, {"id": 271, "seek": 143824, "start": 1439.24, "end": 1445.24, "text": " That's another simple example of a fetch command where you want to fetch the body of message one.", "tokens": [50414, 663, 311, 1071, 2199, 1365, 295, 257, 23673, 5622, 689, 291, 528, 281, 23673, 264, 1772, 295, 3636, 472, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15217727838560594, "compression_ratio": 1.6262135922330097, "no_speech_prob": 0.0026692633982747793}, {"id": 272, "seek": 143824, "start": 1445.24, "end": 1449.24, "text": " And then the server replies, yeah, here's the body of message one.", "tokens": [50714, 400, 550, 264, 7154, 42289, 11, 1338, 11, 510, 311, 264, 1772, 295, 3636, 472, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15217727838560594, "compression_ratio": 1.6262135922330097, "no_speech_prob": 0.0026692633982747793}, {"id": 273, "seek": 143824, "start": 1449.24, "end": 1450.24, "text": " So everything's fine.", "tokens": [50914, 407, 1203, 311, 2489, 13, 50964], "temperature": 0.0, "avg_logprob": -0.15217727838560594, "compression_ratio": 1.6262135922330097, "no_speech_prob": 0.0026692633982747793}, {"id": 274, "seek": 143824, "start": 1450.24, "end": 1458.24, "text": " Let's say another client happens to mark the first message as important.", "tokens": [50964, 961, 311, 584, 1071, 6423, 2314, 281, 1491, 264, 700, 3636, 382, 1021, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15217727838560594, "compression_ratio": 1.6262135922330097, "no_speech_prob": 0.0026692633982747793}, {"id": 275, "seek": 143824, "start": 1458.24, "end": 1464.24, "text": " So the way this works in IMAAP is that the next time you execute a command,", "tokens": [51364, 407, 264, 636, 341, 1985, 294, 286, 9998, 4715, 307, 300, 264, 958, 565, 291, 14483, 257, 5622, 11, 51664], "temperature": 0.0, "avg_logprob": -0.15217727838560594, "compression_ratio": 1.6262135922330097, "no_speech_prob": 0.0026692633982747793}, {"id": 276, "seek": 146424, "start": 1464.24, "end": 1467.24, "text": " then the server replies here in the middle.", "tokens": [50364, 550, 264, 7154, 42289, 510, 294, 264, 2808, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07937646795202184, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.004474753513932228}, {"id": 277, "seek": 146424, "start": 1467.24, "end": 1472.24, "text": " Hey, by the way, the flags of the message one have changed.", "tokens": [50514, 1911, 11, 538, 264, 636, 11, 264, 23265, 295, 264, 3636, 472, 362, 3105, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07937646795202184, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.004474753513932228}, {"id": 278, "seek": 146424, "start": 1472.24, "end": 1478.24, "text": " Even if you didn't ask for it, just before completing the command, it sends this data.", "tokens": [50764, 2754, 498, 291, 994, 380, 1029, 337, 309, 11, 445, 949, 19472, 264, 5622, 11, 309, 14790, 341, 1412, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07937646795202184, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.004474753513932228}, {"id": 279, "seek": 146424, "start": 1478.24, "end": 1484.24, "text": " So what happens if another client changes the flags of message one", "tokens": [51064, 407, 437, 2314, 498, 1071, 6423, 2962, 264, 23265, 295, 3636, 472, 51364], "temperature": 0.0, "avg_logprob": -0.07937646795202184, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.004474753513932228}, {"id": 280, "seek": 146424, "start": 1484.24, "end": 1490.24, "text": " and you happen to send a fetch command right after this happened?", "tokens": [51364, 293, 291, 1051, 281, 2845, 257, 23673, 5622, 558, 934, 341, 2011, 30, 51664], "temperature": 0.0, "avg_logprob": -0.07937646795202184, "compression_ratio": 1.6231155778894473, "no_speech_prob": 0.004474753513932228}, {"id": 281, "seek": 149024, "start": 1490.24, "end": 1498.24, "text": " Then you get something like this where the server replies first the body of the first message.", "tokens": [50364, 1396, 291, 483, 746, 411, 341, 689, 264, 7154, 42289, 700, 264, 1772, 295, 264, 700, 3636, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1832618135394472, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.00463999854400754}, {"id": 282, "seek": 149024, "start": 1498.24, "end": 1500.24, "text": " Like hello world, like before.", "tokens": [50764, 1743, 7751, 1002, 11, 411, 949, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1832618135394472, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.00463999854400754}, {"id": 283, "seek": 149024, "start": 1500.24, "end": 1505.24, "text": " And then you get something interesting where you get another fetch item for the same message,", "tokens": [50864, 400, 550, 291, 483, 746, 1880, 689, 291, 483, 1071, 23673, 3174, 337, 264, 912, 3636, 11, 51114], "temperature": 0.0, "avg_logprob": -0.1832618135394472, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.00463999854400754}, {"id": 284, "seek": 149024, "start": 1505.24, "end": 1508.24, "text": " but something you didn't ask for at all.", "tokens": [51114, 457, 746, 291, 994, 380, 1029, 337, 412, 439, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1832618135394472, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.00463999854400754}, {"id": 285, "seek": 149024, "start": 1508.24, "end": 1509.24, "text": " So...", "tokens": [51264, 407, 485, 51314], "temperature": 0.0, "avg_logprob": -0.1832618135394472, "compression_ratio": 1.6419753086419753, "no_speech_prob": 0.00463999854400754}, {"id": 286, "seek": 150924, "start": 1509.24, "end": 1514.24, "text": " Yep.", "tokens": [50364, 7010, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09785420985161504, "compression_ratio": 1.6411764705882352, "no_speech_prob": 0.028220053762197495}, {"id": 287, "seek": 150924, "start": 1514.24, "end": 1521.24, "text": " So it's not possible to think of IMAAP as you request some data and you get back some data.", "tokens": [50614, 407, 309, 311, 406, 1944, 281, 519, 295, 286, 9998, 4715, 382, 291, 5308, 512, 1412, 293, 291, 483, 646, 512, 1412, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09785420985161504, "compression_ratio": 1.6411764705882352, "no_speech_prob": 0.028220053762197495}, {"id": 288, "seek": 150924, "start": 1521.24, "end": 1523.24, "text": " It doesn't really work like this.", "tokens": [50964, 467, 1177, 380, 534, 589, 411, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09785420985161504, "compression_ratio": 1.6411764705882352, "no_speech_prob": 0.028220053762197495}, {"id": 289, "seek": 150924, "start": 1523.24, "end": 1529.24, "text": " You can think of it as you request some data and then the server pushes some data into you", "tokens": [51064, 509, 393, 519, 295, 309, 382, 291, 5308, 512, 1412, 293, 550, 264, 7154, 21020, 512, 1412, 666, 291, 51364], "temperature": 0.0, "avg_logprob": -0.09785420985161504, "compression_ratio": 1.6411764705882352, "no_speech_prob": 0.028220053762197495}, {"id": 290, "seek": 150924, "start": 1529.24, "end": 1532.24, "text": " whether you want it or not, and you have to deal with it.", "tokens": [51364, 1968, 291, 528, 309, 420, 406, 11, 293, 291, 362, 281, 2028, 365, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09785420985161504, "compression_ratio": 1.6411764705882352, "no_speech_prob": 0.028220053762197495}, {"id": 291, "seek": 153224, "start": 1532.24, "end": 1537.24, "text": " And as a client, if you ignore all but the last reply from the server", "tokens": [50364, 400, 382, 257, 6423, 11, 498, 291, 11200, 439, 457, 264, 1036, 16972, 490, 264, 7154, 50614], "temperature": 0.0, "avg_logprob": -0.1399497363878333, "compression_ratio": 1.4748858447488584, "no_speech_prob": 0.015684952959418297}, {"id": 292, "seek": 153224, "start": 1537.24, "end": 1542.24, "text": " for the fetch message you asked for, then you won't get the body here.", "tokens": [50614, 337, 264, 23673, 3636, 291, 2351, 337, 11, 550, 291, 1582, 380, 483, 264, 1772, 510, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1399497363878333, "compression_ratio": 1.4748858447488584, "no_speech_prob": 0.015684952959418297}, {"id": 293, "seek": 153224, "start": 1542.24, "end": 1546.24, "text": " So it's something to look out for.", "tokens": [50864, 407, 309, 311, 746, 281, 574, 484, 337, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1399497363878333, "compression_ratio": 1.4748858447488584, "no_speech_prob": 0.015684952959418297}, {"id": 294, "seek": 153224, "start": 1546.24, "end": 1548.24, "text": " Okay, last topic, extensions.", "tokens": [51064, 1033, 11, 1036, 4829, 11, 25129, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1399497363878333, "compression_ratio": 1.4748858447488584, "no_speech_prob": 0.015684952959418297}, {"id": 295, "seek": 153224, "start": 1548.24, "end": 1550.24, "text": " These are a bit interesting.", "tokens": [51164, 1981, 366, 257, 857, 1880, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1399497363878333, "compression_ratio": 1.4748858447488584, "no_speech_prob": 0.015684952959418297}, {"id": 296, "seek": 153224, "start": 1550.24, "end": 1557.24, "text": " In GoaMAV1, I tried to implement extensions as a very modular thing, which you can plug.", "tokens": [51264, 682, 1037, 64, 9998, 53, 16, 11, 286, 3031, 281, 4445, 25129, 382, 257, 588, 31111, 551, 11, 597, 291, 393, 5452, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1399497363878333, "compression_ratio": 1.4748858447488584, "no_speech_prob": 0.015684952959418297}, {"id": 297, "seek": 155724, "start": 1557.24, "end": 1562.24, "text": " But extensions turn out to be more like amendments.", "tokens": [50364, 583, 25129, 1261, 484, 281, 312, 544, 411, 27009, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2297783326566889, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.00580420158803463}, {"id": 298, "seek": 155724, "start": 1562.24, "end": 1569.24, "text": " Like fundamentally alters IMAAP syntax, flows, operations, everything we've talked about.", "tokens": [50614, 1743, 17879, 419, 1559, 286, 9998, 4715, 28431, 11, 12867, 11, 7705, 11, 1203, 321, 600, 2825, 466, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2297783326566889, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.00580420158803463}, {"id": 299, "seek": 155724, "start": 1569.24, "end": 1573.24, "text": " Idle and compress are examples that add completely new flows.", "tokens": [50964, 286, 2285, 293, 14778, 366, 5110, 300, 909, 2584, 777, 12867, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2297783326566889, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.00580420158803463}, {"id": 300, "seek": 155724, "start": 1573.24, "end": 1580.24, "text": " So Idle switches to a completely different mode than you need to send a downed SQL string to switch back.", "tokens": [51164, 407, 286, 2285, 19458, 281, 257, 2584, 819, 4391, 813, 291, 643, 281, 2845, 257, 760, 292, 19200, 6798, 281, 3679, 646, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2297783326566889, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.00580420158803463}, {"id": 301, "seek": 155724, "start": 1580.24, "end": 1584.24, "text": " And compress, yeah, just wraps the connection with something else.", "tokens": [51514, 400, 14778, 11, 1338, 11, 445, 25831, 264, 4984, 365, 746, 1646, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2297783326566889, "compression_ratio": 1.5601659751037344, "no_speech_prob": 0.00580420158803463}, {"id": 302, "seek": 158424, "start": 1584.24, "end": 1588.24, "text": " And then you have another kind of extension like extended list,", "tokens": [50364, 400, 550, 291, 362, 1071, 733, 295, 10320, 411, 10913, 1329, 11, 50564], "temperature": 0.0, "avg_logprob": -0.12575372864928427, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0009499505395069718}, {"id": 303, "seek": 158424, "start": 1588.24, "end": 1593.24, "text": " which modifies an existing list command and adds some arguments in the middle", "tokens": [50564, 597, 1072, 11221, 364, 6741, 1329, 5622, 293, 10860, 512, 12869, 294, 264, 2808, 50814], "temperature": 0.0, "avg_logprob": -0.12575372864928427, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0009499505395069718}, {"id": 304, "seek": 158424, "start": 1593.24, "end": 1598.24, "text": " to add more options for the clients.", "tokens": [50814, 281, 909, 544, 3956, 337, 264, 6982, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12575372864928427, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0009499505395069718}, {"id": 305, "seek": 158424, "start": 1598.24, "end": 1606.24, "text": " The search extension for extended search, it changes how the reply looks like.", "tokens": [51064, 440, 3164, 10320, 337, 10913, 3164, 11, 309, 2962, 577, 264, 16972, 1542, 411, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12575372864928427, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0009499505395069718}, {"id": 306, "seek": 158424, "start": 1606.24, "end": 1611.24, "text": " So you send a regular search command and then you get some completely different kind of reply.", "tokens": [51464, 407, 291, 2845, 257, 3890, 3164, 5622, 293, 550, 291, 483, 512, 2584, 819, 733, 295, 16972, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12575372864928427, "compression_ratio": 1.7254901960784315, "no_speech_prob": 0.0009499505395069718}, {"id": 307, "seek": 161124, "start": 1611.24, "end": 1615.24, "text": " And then the literal plus extension completely changes how literals work.", "tokens": [50364, 400, 550, 264, 20411, 1804, 10320, 2584, 2962, 577, 2733, 1124, 589, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1421794666963465, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.0017719295574352145}, {"id": 308, "seek": 161124, "start": 1615.24, "end": 1619.24, "text": " You get a new syntax that you need to pass.", "tokens": [50564, 509, 483, 257, 777, 28431, 300, 291, 643, 281, 1320, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1421794666963465, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.0017719295574352145}, {"id": 309, "seek": 161124, "start": 1619.24, "end": 1625.24, "text": " So yeah, this doesn't work at all if you try to implement it as a modular thing.", "tokens": [50764, 407, 1338, 11, 341, 1177, 380, 589, 412, 439, 498, 291, 853, 281, 4445, 309, 382, 257, 31111, 551, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1421794666963465, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.0017719295574352145}, {"id": 310, "seek": 161124, "start": 1625.24, "end": 1633.24, "text": " IMAAP is completely mononit, if you want to implement extensions that implement everything in the same repository.", "tokens": [51064, 286, 9998, 4715, 307, 2584, 1108, 266, 270, 11, 498, 291, 528, 281, 4445, 25129, 300, 4445, 1203, 294, 264, 912, 25841, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1421794666963465, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.0017719295574352145}, {"id": 311, "seek": 161124, "start": 1633.24, "end": 1636.24, "text": " It will help a lot.", "tokens": [51464, 467, 486, 854, 257, 688, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1421794666963465, "compression_ratio": 1.616504854368932, "no_speech_prob": 0.0017719295574352145}, {"id": 312, "seek": 163624, "start": 1636.24, "end": 1641.24, "text": " All right, that's about it. Unfortunately, we don't have time to talk about everything we wanted,", "tokens": [50364, 1057, 558, 11, 300, 311, 466, 309, 13, 8590, 11, 321, 500, 380, 362, 565, 281, 751, 466, 1203, 321, 1415, 11, 50614], "temperature": 0.0, "avg_logprob": -0.2206928507486979, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.02295459248125553}, {"id": 313, "seek": 163624, "start": 1641.24, "end": 1646.24, "text": " but it should be a good start, I hope at least. Any questions?", "tokens": [50614, 457, 309, 820, 312, 257, 665, 722, 11, 286, 1454, 412, 1935, 13, 2639, 1651, 30, 50864], "temperature": 0.0, "avg_logprob": -0.2206928507486979, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.02295459248125553}, {"id": 314, "seek": 163624, "start": 1646.24, "end": 1648.24, "text": " Thank you very much first.", "tokens": [50864, 1044, 291, 588, 709, 700, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2206928507486979, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.02295459248125553}, {"id": 315, "seek": 163624, "start": 1653.24, "end": 1656.24, "text": " I see a first arm.", "tokens": [51214, 286, 536, 257, 700, 3726, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2206928507486979, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.02295459248125553}, {"id": 316, "seek": 163624, "start": 1656.24, "end": 1660.24, "text": " Yeah, quite immune. It really helps you at the time.", "tokens": [51364, 865, 11, 1596, 11992, 13, 467, 534, 3665, 291, 412, 264, 565, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2206928507486979, "compression_ratio": 1.4076086956521738, "no_speech_prob": 0.02295459248125553}, {"id": 317, "seek": 166024, "start": 1660.24, "end": 1664.24, "text": " Hello. Thanks for the talk and thanks for the library too.", "tokens": [50364, 2425, 13, 2561, 337, 264, 751, 293, 3231, 337, 264, 6405, 886, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1789025676493742, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.02029632218182087}, {"id": 318, "seek": 166024, "start": 1664.24, "end": 1668.24, "text": " I think we're using it quite a lot.", "tokens": [50564, 286, 519, 321, 434, 1228, 309, 1596, 257, 688, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1789025676493742, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.02029632218182087}, {"id": 319, "seek": 166024, "start": 1668.24, "end": 1670.24, "text": " Thanks for the talk and thanks for the library.", "tokens": [50764, 2561, 337, 264, 751, 293, 3231, 337, 264, 6405, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1789025676493742, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.02029632218182087}, {"id": 320, "seek": 166024, "start": 1670.24, "end": 1671.24, "text": " Oh, okay.", "tokens": [50864, 876, 11, 1392, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1789025676493742, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.02029632218182087}, {"id": 321, "seek": 166024, "start": 1671.24, "end": 1677.24, "text": " Yeah, yeah. My question is like, you said like, sometimes you get responses from the server.", "tokens": [50914, 865, 11, 1338, 13, 1222, 1168, 307, 411, 11, 291, 848, 411, 11, 2171, 291, 483, 13019, 490, 264, 7154, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1789025676493742, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.02029632218182087}, {"id": 322, "seek": 166024, "start": 1677.24, "end": 1683.24, "text": " You're not even asked for, does the server also send without asking?", "tokens": [51214, 509, 434, 406, 754, 2351, 337, 11, 775, 264, 7154, 611, 2845, 1553, 3365, 30, 51514], "temperature": 0.0, "avg_logprob": -0.1789025676493742, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.02029632218182087}, {"id": 323, "seek": 166024, "start": 1683.24, "end": 1688.24, "text": " Does the server also send data without asking?", "tokens": [51514, 4402, 264, 7154, 611, 2845, 1412, 1553, 3365, 30, 51764], "temperature": 0.0, "avg_logprob": -0.1789025676493742, "compression_ratio": 1.8608247422680413, "no_speech_prob": 0.02029632218182087}, {"id": 324, "seek": 168824, "start": 1688.24, "end": 1693.24, "text": " So it kind of.", "tokens": [50364, 407, 309, 733, 295, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2741937144049283, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.04214110225439072}, {"id": 325, "seek": 168824, "start": 1693.24, "end": 1704.24, "text": " I mean, if you, it will only send data right before it, right after it, sorry, let's go from the start again.", "tokens": [50614, 286, 914, 11, 498, 291, 11, 309, 486, 787, 2845, 1412, 558, 949, 309, 11, 558, 934, 309, 11, 2597, 11, 718, 311, 352, 490, 264, 722, 797, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2741937144049283, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.04214110225439072}, {"id": 326, "seek": 168824, "start": 1704.24, "end": 1710.24, "text": " It will not send data on its own if you don't send any command.", "tokens": [51164, 467, 486, 406, 2845, 1412, 322, 1080, 1065, 498, 291, 500, 380, 2845, 604, 5622, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2741937144049283, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.04214110225439072}, {"id": 327, "seek": 171024, "start": 1710.24, "end": 1718.24, "text": " You have to send a command and then you reply to the command and then add its own unilateral responses to it,", "tokens": [50364, 509, 362, 281, 2845, 257, 5622, 293, 550, 291, 16972, 281, 264, 5622, 293, 550, 909, 1080, 1065, 517, 37751, 13019, 281, 309, 11, 50764], "temperature": 0.0, "avg_logprob": -0.25211523093429267, "compression_ratio": 1.6541666666666666, "no_speech_prob": 0.11044306308031082}, {"id": 328, "seek": 171024, "start": 1718.24, "end": 1722.24, "text": " which can be a bit arbitrary. Like it can be anything, really.", "tokens": [50764, 597, 393, 312, 257, 857, 23211, 13, 1743, 309, 393, 312, 1340, 11, 534, 13, 50964], "temperature": 0.0, "avg_logprob": -0.25211523093429267, "compression_ratio": 1.6541666666666666, "no_speech_prob": 0.11044306308031082}, {"id": 329, "seek": 171024, "start": 1722.24, "end": 1731.24, "text": " It's usually at the end of the, just before the okay response, you get some extra data and you have to somehow maybe distinguish it from the regular data.", "tokens": [50964, 467, 311, 2673, 412, 264, 917, 295, 264, 11, 445, 949, 264, 1392, 4134, 11, 291, 483, 512, 2857, 1412, 293, 291, 362, 281, 6063, 1310, 20206, 309, 490, 264, 3890, 1412, 13, 51414], "temperature": 0.0, "avg_logprob": -0.25211523093429267, "compression_ratio": 1.6541666666666666, "no_speech_prob": 0.11044306308031082}, {"id": 330, "seek": 171024, "start": 1731.24, "end": 1735.24, "text": " But yeah, it doesn't really work in practice.", "tokens": [51414, 583, 1338, 11, 309, 1177, 380, 534, 589, 294, 3124, 13, 51614], "temperature": 0.0, "avg_logprob": -0.25211523093429267, "compression_ratio": 1.6541666666666666, "no_speech_prob": 0.11044306308031082}, {"id": 331, "seek": 171024, "start": 1735.24, "end": 1736.24, "text": " I was glad to have you.", "tokens": [51614, 286, 390, 5404, 281, 362, 291, 13, 51664], "temperature": 0.0, "avg_logprob": -0.25211523093429267, "compression_ratio": 1.6541666666666666, "no_speech_prob": 0.11044306308031082}, {"id": 332, "seek": 173624, "start": 1736.24, "end": 1739.24, "text": " Yep. Oh, yeah, yeah, yeah.", "tokens": [50364, 7010, 13, 876, 11, 1338, 11, 1338, 11, 1338, 13, 50514], "temperature": 0.0, "avg_logprob": -0.18525101156795726, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.03210310637950897}, {"id": 333, "seek": 173624, "start": 1739.24, "end": 1744.24, "text": " I just added that on a little bit.", "tokens": [50514, 286, 445, 3869, 300, 322, 257, 707, 857, 13, 50764], "temperature": 0.0, "avg_logprob": -0.18525101156795726, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.03210310637950897}, {"id": 334, "seek": 173624, "start": 1744.24, "end": 1751.24, "text": " So the IMAP standard is quite specific regarding and it says you need to be able to receive any response at any time.", "tokens": [50764, 407, 264, 21463, 4715, 3832, 307, 1596, 2685, 8595, 293, 309, 1619, 291, 643, 281, 312, 1075, 281, 4774, 604, 4134, 412, 604, 565, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18525101156795726, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.03210310637950897}, {"id": 335, "seek": 173624, "start": 1751.24, "end": 1758.24, "text": " So it's quite, it has in the standard, but us doing practical things.", "tokens": [51114, 407, 309, 311, 1596, 11, 309, 575, 294, 264, 3832, 11, 457, 505, 884, 8496, 721, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18525101156795726, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.03210310637950897}, {"id": 336, "seek": 173624, "start": 1758.24, "end": 1765.24, "text": " The thing we learned is that you should not trust anything that's in the standard and to the best of my knowledge, most servers don't.", "tokens": [51464, 440, 551, 321, 3264, 307, 300, 291, 820, 406, 3361, 1340, 300, 311, 294, 264, 3832, 293, 281, 264, 1151, 295, 452, 3601, 11, 881, 15909, 500, 380, 13, 51814], "temperature": 0.0, "avg_logprob": -0.18525101156795726, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.03210310637950897}, {"id": 337, "seek": 176524, "start": 1765.24, "end": 1773.24, "text": " So you have, there are exceptions, for example, by, by respond, by untact, like when the server do a shutdown.", "tokens": [50364, 407, 291, 362, 11, 456, 366, 22847, 11, 337, 1365, 11, 538, 11, 538, 4196, 11, 538, 1701, 578, 11, 411, 562, 264, 7154, 360, 257, 34927, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17659666599371496, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.05759666860103607}, {"id": 338, "seek": 176524, "start": 1773.24, "end": 1783.24, "text": " Yeah, as answered, maybe if you can explain a bit more, but to the best of our knowledge, most people doesn't do it because at least when we tested some clients, many clients,", "tokens": [50764, 865, 11, 382, 10103, 11, 1310, 498, 291, 393, 2903, 257, 857, 544, 11, 457, 281, 264, 1151, 295, 527, 3601, 11, 881, 561, 1177, 380, 360, 309, 570, 412, 1935, 562, 321, 8246, 512, 6982, 11, 867, 6982, 11, 51264], "temperature": 0.0, "avg_logprob": -0.17659666599371496, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.05759666860103607}, {"id": 339, "seek": 176524, "start": 1783.24, "end": 1787.24, "text": " and I mean, I mean, like the most of the clients, they crashed when we sent this.", "tokens": [51264, 293, 286, 914, 11, 286, 914, 11, 411, 264, 881, 295, 264, 6982, 11, 436, 24190, 562, 321, 2279, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17659666599371496, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.05759666860103607}, {"id": 340, "seek": 176524, "start": 1787.24, "end": 1791.24, "text": " So I think there's a reason why it's not so common in the real world.", "tokens": [51464, 407, 286, 519, 456, 311, 257, 1778, 983, 309, 311, 406, 370, 2689, 294, 264, 957, 1002, 13, 51664], "temperature": 0.0, "avg_logprob": -0.17659666599371496, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.05759666860103607}, {"id": 341, "seek": 179124, "start": 1791.24, "end": 1796.24, "text": " Okay.", "tokens": [50364, 1033, 13, 50614], "temperature": 0.0, "avg_logprob": -0.22342754315726365, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.037991590797901154}, {"id": 342, "seek": 179124, "start": 1796.24, "end": 1810.24, "text": " Okay. Just wanted to say that if you consider the client server interaction more like that the client told the view about the server and then the server updates the view whenever you send a command, then it starts to make a bit more sense.", "tokens": [50614, 1033, 13, 1449, 1415, 281, 584, 300, 498, 291, 1949, 264, 6423, 7154, 9285, 544, 411, 300, 264, 6423, 1907, 264, 1910, 466, 264, 7154, 293, 550, 264, 7154, 9205, 264, 1910, 5699, 291, 2845, 257, 5622, 11, 550, 309, 3719, 281, 652, 257, 857, 544, 2020, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22342754315726365, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.037991590797901154}, {"id": 343, "seek": 179124, "start": 1810.24, "end": 1817.24, "text": " Yep. But it can be hard to architecture a client with, yeah, against this IMAP concept.", "tokens": [51314, 7010, 13, 583, 309, 393, 312, 1152, 281, 9482, 257, 6423, 365, 11, 1338, 11, 1970, 341, 21463, 4715, 3410, 13, 51664], "temperature": 0.0, "avg_logprob": -0.22342754315726365, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.037991590797901154}, {"id": 344, "seek": 181724, "start": 1817.24, "end": 1820.24, "text": " Like sometimes you don't want this kind of thing.", "tokens": [50364, 1743, 2171, 291, 500, 380, 528, 341, 733, 295, 551, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2040215350211935, "compression_ratio": 1.587962962962963, "no_speech_prob": 0.13677173852920532}, {"id": 345, "seek": 181724, "start": 1820.24, "end": 1821.24, "text": " But it's good.", "tokens": [50514, 583, 309, 311, 665, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2040215350211935, "compression_ratio": 1.587962962962963, "no_speech_prob": 0.13677173852920532}, {"id": 346, "seek": 181724, "start": 1821.24, "end": 1824.24, "text": " But yeah, it's a good mindset for sure. Yeah.", "tokens": [50564, 583, 1338, 11, 309, 311, 257, 665, 12543, 337, 988, 13, 865, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2040215350211935, "compression_ratio": 1.587962962962963, "no_speech_prob": 0.13677173852920532}, {"id": 347, "seek": 181724, "start": 1824.24, "end": 1827.24, "text": " All right. Any, any.", "tokens": [50714, 1057, 558, 13, 2639, 11, 604, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2040215350211935, "compression_ratio": 1.587962962962963, "no_speech_prob": 0.13677173852920532}, {"id": 348, "seek": 181724, "start": 1827.24, "end": 1845.24, "text": " Is the only, having regarding IMAP as a cash fill protocol where the client has a view and the server fills in the client's view is the only way to write an IMAP client that will preserve your sanity over years.", "tokens": [50864, 1119, 264, 787, 11, 1419, 8595, 21463, 4715, 382, 257, 6388, 2836, 10336, 689, 264, 6423, 575, 257, 1910, 293, 264, 7154, 22498, 294, 264, 6423, 311, 1910, 307, 264, 787, 636, 281, 2464, 364, 21463, 4715, 6423, 300, 486, 15665, 428, 47892, 670, 924, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2040215350211935, "compression_ratio": 1.587962962962963, "no_speech_prob": 0.13677173852920532}, {"id": 349, "seek": 184524, "start": 1845.24, "end": 1855.24, "text": " If you try to, if you try to act as though this were a web server, you will have and this works over the years.", "tokens": [50364, 759, 291, 853, 281, 11, 498, 291, 853, 281, 605, 382, 1673, 341, 645, 257, 3670, 7154, 11, 291, 486, 362, 293, 341, 1985, 670, 264, 924, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20911629994710287, "compression_ratio": 1.4154929577464788, "no_speech_prob": 0.12149284780025482}, {"id": 350, "seek": 184524, "start": 1855.24, "end": 1862.24, "text": " Each new server will surprise you in some way. Painful. Don't ask me.", "tokens": [50864, 6947, 777, 7154, 486, 6365, 291, 294, 512, 636, 13, 24943, 906, 13, 1468, 380, 1029, 385, 13, 51214], "temperature": 0.0, "avg_logprob": -0.20911629994710287, "compression_ratio": 1.4154929577464788, "no_speech_prob": 0.12149284780025482}, {"id": 351, "seek": 184524, "start": 1862.24, "end": 1869.24, "text": " Well, your code is.", "tokens": [51214, 1042, 11, 428, 3089, 307, 13, 51564], "temperature": 0.0, "avg_logprob": -0.20911629994710287, "compression_ratio": 1.4154929577464788, "no_speech_prob": 0.12149284780025482}, {"id": 352, "seek": 186924, "start": 1869.24, "end": 1876.24, "text": " All right. Thank you very much. And thanks again to the two presenters and we come to the next talk.", "tokens": [50364, 1057, 558, 13, 1044, 291, 588, 709, 13, 400, 3231, 797, 281, 264, 732, 36987, 293, 321, 808, 281, 264, 958, 751, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21709689727196327, "compression_ratio": 1.1363636363636365, "no_speech_prob": 0.16473715007305145}], "language": "en"}