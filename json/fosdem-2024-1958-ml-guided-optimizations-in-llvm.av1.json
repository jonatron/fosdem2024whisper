{"text": " Can you hear me okay? Cool. Okay. So if sound doesn't work for the rest of the presentation, this is basically the key of it, right? So I'm a compiler engineer, I'm not an ML specialist, so I'm not a compiler engineer, so kind of like a heads up, if I say something wrong about ML, that's why. You can use ML in an industrial compiler, which is LLVM. Actually, show off hands, does anyone have you heard about LLVM, Clang? Cool. Okay. About half. I have a slide about that too. So out of the box, actually, as of Clang 17, it's not very well documented, because it's still work in progress, but you can actually connect to Clang and train models. So that's an interface just for training. It's a DMM kind of an interface. I think that means something to the ML community, if not, tell me. And this is not vaporware, it's just a virtual computer. In the sense that we actually use it for real, right? So I mean, you can read what's there, but we've been using it for about almost four years now, and we have some experience with it. And most of the talk is actually about trying to get to point three there, which is like what we've learned. The rest of it is set up. Okay. So LLVM, for those that did not raise their hand, is an open source project. It's a compiler. Actually, LLVM itself is a library. So it defines an intermediate representation. That's what IR stands for. It contains state of the art optimizations. It also knows how to lower to X86 or ARM or other targets. And then Clang is something like it compiles C or C++ down to LLVM IR. So basically Clang is built on top of LLVM. And so it's Swift. There's a Rust compiler. There's a Fortran compiler as well. And I mean, the LLVM project is bigger than this. There's a full tool chain there, like debugger, linker, all of that. Actually, shameless plug for the LLVM community that I'm part of. There's a dev room this afternoon here somewhere. To us, to Google, so I work at Google. To us, C and C++ is very important. Basically, anything that is performance critical, which is basically anything is written in C or C++. When we say C and C++, I really mean LLVM. And when I talk about LLVM, I mean LLVM at the tip of three in GitHub. So we don't have a special fork or anything like this. And we really chase the head by plus, like, well, minus usually two weeks. So we're very close to the head all the time. We have a release theme that keeps it basically in sync. And even small performance improvements matter, because a 1% saving across the fleet really means that much less hardware you have to buy, what you have to produce or consume, et cetera. And we keep doing this. All the performance improvements that we make are small, but they're constant. And it's like interest. It compounds. Our binary is no shocker. They serve RPC requests. No surprise there. The key thing is that to do that, to optimize these things, there's many things you can do. But as a compiler engineer, we're primarily occupied with how do we make the RPC request complete quickly. And the RPC request traverses a lot of code. Most of it is actually not the code that you want to execute. So there's things like networking stack, serialization, deserialization, security, blah, blah, blah, blah. And all of those things are reusable code. And they try to be genetic, which is the exact opposite of what I want for performance. Because for performance, I want it to be as specialized to what I'm actually doing. Like, I don't want it to be genetic, right? And for that reason, actually, the biggest levers that we have for performance are we collect profiles that tell us, like, well, actually, the program is spending time and then we reoptimize it. So we recompile it with them. And link them optimizations, which are basically like we can look at the whole program and try to, based on that understanding, try to make the right decisions. So things are big, like, you know, lots of data, lots of instructions to execute, nothing fits in any cache. I'm not being ambiguous there. I'm being actually precise. No cache fits the data that we're talking about, the instructions or the actual data being processed. So that's why, like, optimizations like inlining are, you know, very impactful because they contextualize, so they specialize things down to what you actually really have to execute. And then you end up with large functions, which means that optimizations are register allocation or have like a big problem to solve. What am I doing? Okay. Here we go. Okay. Which kind of gets us to why we want to do ML, right? So we want to do ML because we're looking at problems that are, sorry, sequential decision making. So inlining is about, hey, is this call site worth inlining? Sure. Okay. Fine. Well, the program just changed now, right? So what about this other call site? Is it still worth inlining? Maybe not, right? So as you go along, the state of the problem that you're trying to optimize changes, we don't have an Oracle that tells us what's the perfect optimization decision, especially at like the scale that we're talking about. I'm kind of like getting us to say reinforcement learning, probably no surprise to an ML community. Because I mean, otherwise what we do is like we have heuristics that can only operate on like local information. And because I mean, there's the one that actually we can make sense out of, right? So, and we have evidence that they're not good enough in the sense that we know that if we play a bit with them, we can, we can find headroom in optimization. So, but, you know, we cannot constantly twizzle with them, right? Like we want something a bit more systematic. So that's why we are interested in ML. We are also scared of ML because the compiler is about everything that ML is not. So the compiler must be correct. I don't think that it's a surprise to anyone, but it's a non-negotiable. The compiler must be deterministic again, because otherwise it's something that you cannot live with or, you know, to take forever to compile things because we cannot do incremental builds. So ML at least like naively to us felt like something more analog, right? Like it's more like, well, fuzzy, maybe something and that's not, not what we are about, right? So how did we go about it? Well, first we're not asking ML to deal with correctness. So already in the, in the code that I'm talking about, like in the compiler code that makes decisions like in lining and register location and things like this, we kind of already had a separation between what's correct. So, you know, there are certain things that are illegal to do so that we don't do them. We don't even wonder are they worth, like, you know, would they be valuable in doing it? We just don't do them. What we did here is we stressed that boundary even more. So we created like a very clear interface between ML questions and like what heuristic or policy questions and, you know, correctness issues. So the correctness stuff is, you know, written in normal imperative C C plus plus code that we can all look at and agree that it's actually correct, right? Module of bugs as always. But then out of choices that are equally correct, we go and ask ML, you know, which one should we make? To the end user, we don't want to tell them any of these not because it's like a shame or anything, but because it's the more different the compiler would look like the more difficult it would be to adopt it. So how about we make it look the same as it is today, which means no new dependencies, nothing extra, just additional flags, right? So that's something that is fine. So which really means that when we give the compiler to the user, we embed, we need to embed the models inside and not show any sort of like dependency on some sort of like an inference engine or anything like that. But for training, there's totally different. So for training, we're totally cool with like, depending on like TensorFlow and like whatever and, you know, like random generators in the weights and all of that is fine because that this training and actually we're fine with compiling a different compiler just for training, because that's not something that, you know, like, it's not for like everybody, right? So it's just for whoever does the training activity, which we also want to be rare because we don't want to like keep training it as you're trying to ship a product, right? So, you know, like, we give you the compiler and then like, hopefully the more the models are good enough, just like heuristics today, like, you know, like to, to resist changes that people make to their code, right? So basically, there's two types of interfaces that we ended up having. One is between compiler and policy. And there's like domain specific. What I mean is like, there's a different question that you ask is an inlining pass from the one that you ask is a register locator from the one that you ask is a instruction selector or something like that. But then the ML obstruction, like the way we interact with the mail is common because fundamentally ML to us looks like a function that we pass a bunch of tensors to and it comes back with an answer. And we, you know, like how it's implemented is, you know, it's not important, but it's irrelevant from the perspective of the interface and the implementations that we have are like either ahead of time, like I mentioned, or, you know, the interpreters who use TF light, like the people in embedded or for the DMM case, we're actually doing IPC over pipes. So the state in LLVM today, like if you, if you go to GitHub and you pull LLVM down, you basically have everything that you need to, to, you know, add the mail to a pass if you're a compiler engineer. It's TensorFlow centric, no surprise there, but it doesn't have to be. So the obstruction that I mentioned earlier can be, you know, like, I mean, you can, you can plug by the pytorch or anything like that. I mean, we, we made a pipe based protocol work over that obstruction. So it's clearly not TensorFlow specific. Any tools that are genetic, you know, like other utilities, like how you collect a corpus for training, right? So that's a problem. That's also in LLVM. We used to have them in, in, in a different repository, also open source, but they make more sense to go into LLVM. The training tools that we use, so for example, the, the fuchsia operating system that I had on an earlier slide trains using those tools, they are available there to as a, as a reference. But if you are a researcher, you probably want to use something like compiler Jim that is more research, research friendly. So there's kind of like different concerns in, in these tools. And then there's also like using the tooling that I mentioned, like there's, there's another body of work that produced a large corpus of IR that you can use for like whatever you want, like training for these purposes, or maybe doing LLVM training or anything like that. There's links there. In fact, like all the links in the, in the slide that are in the, you know, like when you go to falls them and you see the talk, they're there. Okay, what we learned, that's what I wanted to get to. And I'm doing well with time. Okay, so the, the, it works thing, right? So there's a difference between, I mean, there's been work doing ML with compilers in academia, but I mean, that there's a big difference between that and actually shipping a product and shipping a compiler for production teams. So the key thing is that, at least with a size problem, we have evidence from, from the Fuchsia team that it can work completely, meaning like they periodically, like about every month, pull LLVM, retrain a model on their code base, all on vanilla build bots. So they're like normal CPU based machines. They train for like about a day or so. And they produce a compiler at the end of that that optimizes for, for size, because that's what they care about. There's links, I think, down there, like an example of such a build bot. So it all, you know, this can be done completely openly. And the key thing also is that it works like turnkey, meaning like you don't need someone to go and pay attention to it. It just works repeatedly. And he's been working like this for like almost four years now, which is, which is good. Like we have a signal that we can have like an industrial process that produces an optimized compiler, you know, on a cadence, right? Okay, here's what it didn't work. So performance is hard. So, okay, so you are ML experts, you are not surprised at the statement that for reinforcement learning, the, the quality of the reward is very important. And we understood that through we, okay, it makes sense. However, for performance, the problem is a bit tricky. So it goes like this, you cannot just say, oh, let's run programs and see how well they run, because it takes time to build a program. And it takes time to run it. So you either do it very quickly, which, which means that you're doing it for small little benchmarks, which are completely relevant to what we're doing, right? So then basically you learn on something that has feature value distributions that have no match in what we're actually going to try to use it for. So we don't want to do that. Or you cannot do it. Like, it just takes too much time. So we were like, hold on a second, but we have profile information, like I talked earlier, like, we know, we collect this profile information that tells us where the program spends time and how many iterations loops take and all of that. So can't we do something based on that that kind of like guesstimates, at least a trend, right? Like, we don't care about absolute values, but at least something that can allow us to compare, you know, like to a baseline, the results of applying a new policy. And we thought we could any kind of worked like for register location. But we ended up having to select a winning model out of like a set of models that we trained, you know, like with this over synthetic reward. And we're not very happy with that. Like it's not how to put this like, we're missing that explanatory thing of like, well, why, you know, like, so if I do it for how long do I have to do it? And what do I have to look at when I look at the TensorFlow rewards and all of that? Like, what do I have to look at to know that I have to take it out and now train it or like, sorry, compare these models on on on running benchmarks? There's basically a bit of a waka mall. And that's not engineering. That's waka mall, right? So this is basically the main challenge for performance. And I basically like, you know, scaling this effort to more performance problems. And well, knowing that there's efforts on that, of course, like, come on, okay. ML model evaluation costs. So in the big scheme of things, when we did like in lining for size, or we did register location, I mean, we measured like the micro measurements on how much it takes to evaluate the model. But in the big scheme of things of like the entire compilation of a module, like of a C plus plus, basically, they kind of like goes in the noise, like it was more like a few percent variations. And it's fine. But there's not going to be that funny if the methodology, you know, like gains traction, right? There's not going to have lots of these things that take a lot of time. Also, the size of the model, which is really the weights, seems like it was kind of surprising to us. Initially, we had a small one and then working with some researchers in other teams at Google, they managed to produce a much, much larger model kind of accidentally, like, which kind of like took us by surprise, like it was suddenly 11 megs, like out of nowhere. And it's kind of funny when we're trying to optimize something for for reducing the size of either binary and LLVM itself blew up, right? I think that these are more like things that caught us by surprise. And we, to our understanding, in talking to ML experts, there's ways to mitigate this. But we kind of learned that we look a lot more like an embedded scenario than that we imagined, basically. So kind of like an interesting research topic, I think it's interesting at least to us as compiler engineers, but it's a research topic for the ML community, rather. How would we know without having to actually compare the result that a policy loses power, if you will, right? So, you know, like I was saying, people like Fuchsia, for example, train a policy and then they just decided, well, we'll just retrain one automatically whenever we we produce a new toolchain, right? But is that overly aggressive? Or was it like about time to do that anyway? Like, it'd be great to have a signal that tells you, hey, you know, hypothetically, maybe the feature value distribution changed, and it's out of the domain that actually the model was trained on. So hint hint nudge nudge, maybe it's time to train. But we don't know if that's actually what the indicator is. So that's what I say. I think it's an interesting topic that would be valuable to us, because it was give us an early indicator purely based on compiling, right? We can run the compiler and just see these values as you compile. You don't have to like do benchmarking for for for that. Oh, so in retrospect, I really so this is like honest truth. The first statement is true. We thought that right, like we are convinced that ML is magical. And we will get these policies that are awesome. And there will be at least not regressing and you know, like improving things and there will be no regressions and things will be great. And then we saw that all of them have the typical pattern that we have also in manually written heuristics, which is, you know, some things regress, some things improve. So that's all things are, I suppose. And maybe we can do something better than than that with additional policies that select the right one. But that was a bit of a surprise to us. Okay, performance. So like I was saying, I guess performance is some issues. But we went ahead and like, looked at like, where does the train model find opportunities for additional savings, right? And taking a step back. So what do I do as a compiler engineer in these sort of cases, like I look with Linux Perftool at, you know, runtime information. And I see where it's read. So where there's hotspots. And then I think really hard and look at the compiler and why it made those decisions. And I go and fix that. And then the red turns gray or green and sweet, right? And then I have to do it again and again until I make sure that there's no regressions in other parts of the code base. But that is basically what you do in that case. So when we looked at like functions that we had both indicators in the reward signal as poor as it was. But I mean, it was indicating that, you know, he's doing better. And we looked also empirically at them like, and yeah, they were doing better. And we're like, well, why? Right? So we look at the code and we couldn't tell why like we look at with Linux Perft and there was nothing shining, right? I mean, the code was different, right? Like we could tell that like, you know, pure line by line, you know, deep, it was different, but nothing was popping. And then we did a bit more investigation. And it turns out that the mail was finding or like, you know, the enforcement learning algorithm was finding opportunities in lukewarm parts of the code. So these are things that kind of like end up being like a peanut butter effect, right? Like I mean, nothing in particular is bad, or is improved categorically. But in aggregate, you can, you know, you get like a spread effect that is actually amounting to something. Great, but it's possible that that something is actually just noise, right? And I mean, today, we don't have a way of capturing that. Like we just say, Hey, here's the profile that we got by collecting it from from a running binary. And then I'm as is great. Okay, here I found an opportunity and actually that's just purely noise, right? So this is the part that I kind of had a bit of a trouble like how am I going to title it or anything. So what I ended up doing is just saying what I wanted to say. So as a compiler engineer, so as a developer in the open source, like as an LLVM compiler engineer, if this pans out more, like, you know, if you get more passes and the mail is, you know, like actually delivering more and more value to us, right? What's going to happen, right? So, well, on the plus side, I spent less time, you know, like tuning and twizzling with thresholds and other flags that I have today in the compiler, because I actually can can use a automatic feedback driven, self improving methodology, right? Like reinforcement learning. Okay, I think that's great, because I can actually focus on understanding what actually matters, right? Like for for driving that performance, like what features are important stuff like that. The barrier to entry though might change. So today you can use like, you know, like, you know, cheap, not this one, but a cheap machine, right? And compile the compiler and look at performance, you know, like optimization problems, and it's all fine. And ML, at least my view of it is that it has this risk of like quickly skidding into like, Oh, you need a farm of computers. And today, that's not the case, like I was saying, like, with what we've been doing, the models are small. So we didn't hit that problem. But that's a consideration, right? Like, I mean, is it going to be harder for, you know, the compiler engineer aspirant of the future to enter the field or what? The mental model is kind of different. You can have hinting at that before, right? Like, I mean, like, you don't think of the problem like you were before, you look at Linux perf and you find hotspots and stuff like that. But that's fine. Different, different just means different. It means like, you know, we can adapt, right? This is my pet peeve. Like the when you look as a compiler engineer, the ML frameworks, they are scary, because they're like very low level and they talk about things that I don't understand. And they're not talking about things that I want them to talk about. And we're not sure yet where that interface is. And I think that part of the the goal of the project is to kind of like figure out what that interface is. But today, it's like that. Like I was saying, there's links in the, all the links are actually in the, in the deck. And that's the end of my presentation. Yeah, questions. So the optimizations that you find using machine learning in code, can they also be put in LLVM itself without using machine learning? Or is it, can it only be learned using machine language because it is using the data, for instance, optimizations? So the optimizations, can they also be put in LLVM itself without using machine learning? Is it missing up? Is LLVM missing up? The optimizations that you find using machine learning? Right. So I'll say just to make sure that you're saying like the types of optimizations that we learned, could we just do them as normal imperative code back in LLVM? Some yes, some no. So especially the, when we looked at the type of optimizations that the size optimizer was doing, means some decisions are unexplainable, right? To do the wrong thing early on, but just because he kept learning the statistic by taking that path later is going to be all right. So that's kind of hard to translate into imperative code, I think. But some, some might be. What I'm saying is that the hope is that we, like so far in the evidence is that we kind of, it's hard to do that. We only have one time for one more question, one more question after this. Hi, thanks for your great talk. You've been talking about applying these techniques to clang and traditional compilers targeting, well, executables in the usual sense. What about machine learning compilers? So I'm thinking, yeah, applying ML to ML. I know there is some research in that. Do your techniques connect to that? Yes. So applying ML to ML compilers, right? I mean, MLIR, for example, is part of the LLVM project. And I think that there is work trying to do that too. And the infrastructure would be the same because I mean, it's all the same code, right? I'm not an ML for ML compilers compiler engineer. The word compiler appears way too many times, but we work with those people, like, so I don't see a reason they cannot apply this. I think that the domain though is, has its own idiosyncrasies that you cannot just take exactly what it is and apply it over, but the tooling would be the same. Does that make sense? Okay. One more question. All the way up there, really? Hi. I saw during the slide that one of the problems is that you are not really aware if by choosing a tree, a representational tree of the semantics that you are trying to compile, it's going to be better or worse compared to another tree that you are not for. And I was wondering, are we using the operative research theory? I mean, all the mixed integer linear programming theory that gives you a model of the reality and help you understanding how far you are from the optimal value of a certain representation. So, I'm not sure understood the question. Let me try to say back to your saying, are we applying? Okay, yeah. I'm seeing that machine learning basically relies on a loss on how far you are from a certain optimal value. And I'm seeing that there's a branch of mathematics called operational research that his work is trying to describe a word in an idealized matter. And you try to describe how it's costing respect to my objective value, making a certain decision instead of another one, and you get like a math formula. And there's the simplex algorithm that helps you to traverse those. Yeah, and I was wondering, are we trying to integrate those two fields of mathematics to reach? So, I think, let me give the answer because it's also time. So, and if the answer doesn't make sense, let's talk. I think the key problem is like understanding what that gap is, actually measuring that. And it goes back to the reward signaling thing. So, should we apply what you said? Probably, again, I'm not an expert in that. So, I mean, if you think it's worth doing like great. But the problem is that you'll hit very quickly is that the reward that we give or the signal that we give is bad. Right? So, then probably the rest of it falls, right? So, we need to fix that first before we can apply these things. But yeah, absolutely. Like, I mean, we should try all sorts of like methodologies. Like, there's a whole point. Did I make sense or did I miss it? Okay, let's talk more. All right, everyone give March another round of applause, please. All right, we're starting in about two more minutes. So, please, stick around. Don't forget, the desks are very loud. Please hold them down. Don't slam them. And we have the matrix room up and running again. Can you help me try to figure out how to make the both mics work? Can you do that? Can you hold it and can you talk to that? And unmute it in a second. This, this. Yeah, yeah. Can you start? How about now? Hello? Can someone give me a thumbs up? No. Someone got a thumbs up? Hey, thanks Marty. One second. Huh. At all. Nothing at all? Nothing? Okay, yeah, this is not working at all.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Can you hear me okay?", "tokens": [50364, 1664, 291, 1568, 385, 1392, 30, 50714], "temperature": 0.0, "avg_logprob": -0.4679669062296549, "compression_ratio": 1.3866666666666667, "no_speech_prob": 0.2591319978237152}, {"id": 1, "seek": 0, "start": 13.0, "end": 20.0, "text": " Cool. Okay. So if sound doesn't work for the rest of the presentation, this is basically", "tokens": [51014, 8561, 13, 1033, 13, 407, 498, 1626, 1177, 380, 589, 337, 264, 1472, 295, 264, 5860, 11, 341, 307, 1936, 51364], "temperature": 0.0, "avg_logprob": -0.4679669062296549, "compression_ratio": 1.3866666666666667, "no_speech_prob": 0.2591319978237152}, {"id": 2, "seek": 0, "start": 21.84, "end": 28.84, "text": " the key of it, right? So I'm a compiler engineer, I'm not an ML specialist, so I'm not a compiler", "tokens": [51456, 264, 2141, 295, 309, 11, 558, 30, 407, 286, 478, 257, 31958, 11403, 11, 286, 478, 406, 364, 21601, 17008, 11, 370, 286, 478, 406, 257, 31958, 51806], "temperature": 0.0, "avg_logprob": -0.4679669062296549, "compression_ratio": 1.3866666666666667, "no_speech_prob": 0.2591319978237152}, {"id": 3, "seek": 3000, "start": 30.0, "end": 37.0, "text": " engineer, so kind of like a heads up, if I say something wrong about ML, that's why.", "tokens": [50364, 11403, 11, 370, 733, 295, 411, 257, 8050, 493, 11, 498, 286, 584, 746, 2085, 466, 21601, 11, 300, 311, 983, 13, 50714], "temperature": 0.0, "avg_logprob": -0.26230096228328753, "compression_ratio": 1.3743589743589744, "no_speech_prob": 0.027856525033712387}, {"id": 4, "seek": 3000, "start": 37.72, "end": 44.72, "text": " You can use ML in an industrial compiler, which is LLVM. Actually, show off hands, does anyone", "tokens": [50750, 509, 393, 764, 21601, 294, 364, 9987, 31958, 11, 597, 307, 441, 43, 53, 44, 13, 5135, 11, 855, 766, 2377, 11, 775, 2878, 51100], "temperature": 0.0, "avg_logprob": -0.26230096228328753, "compression_ratio": 1.3743589743589744, "no_speech_prob": 0.027856525033712387}, {"id": 5, "seek": 3000, "start": 44.84, "end": 51.84, "text": " have you heard about LLVM, Clang? Cool. Okay. About half. I have a slide about that too.", "tokens": [51106, 362, 291, 2198, 466, 441, 43, 53, 44, 11, 2033, 656, 30, 8561, 13, 1033, 13, 7769, 1922, 13, 286, 362, 257, 4137, 466, 300, 886, 13, 51456], "temperature": 0.0, "avg_logprob": -0.26230096228328753, "compression_ratio": 1.3743589743589744, "no_speech_prob": 0.027856525033712387}, {"id": 6, "seek": 5184, "start": 51.92, "end": 58.92, "text": " So out of the box, actually, as of Clang 17, it's not very well documented, because it's", "tokens": [50368, 407, 484, 295, 264, 2424, 11, 767, 11, 382, 295, 2033, 656, 3282, 11, 309, 311, 406, 588, 731, 23007, 11, 570, 309, 311, 50718], "temperature": 0.0, "avg_logprob": -0.2999557219829756, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.028595013543963432}, {"id": 7, "seek": 5184, "start": 61.480000000000004, "end": 68.48, "text": " still work in progress, but you can actually connect to Clang and train models. So that's", "tokens": [50846, 920, 589, 294, 4205, 11, 457, 291, 393, 767, 1745, 281, 2033, 656, 293, 3847, 5245, 13, 407, 300, 311, 51196], "temperature": 0.0, "avg_logprob": -0.2999557219829756, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.028595013543963432}, {"id": 8, "seek": 5184, "start": 68.64, "end": 74.52000000000001, "text": " an interface just for training. It's a DMM kind of an interface. I think that means something", "tokens": [51204, 364, 9226, 445, 337, 3097, 13, 467, 311, 257, 15322, 44, 733, 295, 364, 9226, 13, 286, 519, 300, 1355, 746, 51498], "temperature": 0.0, "avg_logprob": -0.2999557219829756, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.028595013543963432}, {"id": 9, "seek": 5184, "start": 74.52000000000001, "end": 81.52000000000001, "text": " to the ML community, if not, tell me. And this is not vaporware, it's just a virtual", "tokens": [51498, 281, 264, 21601, 1768, 11, 498, 406, 11, 980, 385, 13, 400, 341, 307, 406, 20358, 3039, 11, 309, 311, 445, 257, 6374, 51848], "temperature": 0.0, "avg_logprob": -0.2999557219829756, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.028595013543963432}, {"id": 10, "seek": 8184, "start": 81.84, "end": 85.2, "text": " computer. In the sense that we actually use it for real, right? So I mean, you can read", "tokens": [50364, 3820, 13, 682, 264, 2020, 300, 321, 767, 764, 309, 337, 957, 11, 558, 30, 407, 286, 914, 11, 291, 393, 1401, 50532], "temperature": 0.2, "avg_logprob": -0.24862528328943734, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012983329594135284}, {"id": 11, "seek": 8184, "start": 85.2, "end": 89.52000000000001, "text": " what's there, but we've been using it for about almost four years now, and we have some", "tokens": [50532, 437, 311, 456, 11, 457, 321, 600, 668, 1228, 309, 337, 466, 1920, 1451, 924, 586, 11, 293, 321, 362, 512, 50748], "temperature": 0.2, "avg_logprob": -0.24862528328943734, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012983329594135284}, {"id": 12, "seek": 8184, "start": 89.52000000000001, "end": 95.64, "text": " experience with it. And most of the talk is actually about trying to get to point three", "tokens": [50748, 1752, 365, 309, 13, 400, 881, 295, 264, 751, 307, 767, 466, 1382, 281, 483, 281, 935, 1045, 51054], "temperature": 0.2, "avg_logprob": -0.24862528328943734, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012983329594135284}, {"id": 13, "seek": 8184, "start": 95.64, "end": 102.64, "text": " there, which is like what we've learned. The rest of it is set up. Okay. So LLVM, for those", "tokens": [51054, 456, 11, 597, 307, 411, 437, 321, 600, 3264, 13, 440, 1472, 295, 309, 307, 992, 493, 13, 1033, 13, 407, 441, 43, 53, 44, 11, 337, 729, 51404], "temperature": 0.2, "avg_logprob": -0.24862528328943734, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.012983329594135284}, {"id": 14, "seek": 10264, "start": 103.64, "end": 110.64, "text": " that did not raise their hand, is an open source project. It's a compiler. Actually, LLVM", "tokens": [50414, 300, 630, 406, 5300, 641, 1011, 11, 307, 364, 1269, 4009, 1716, 13, 467, 311, 257, 31958, 13, 5135, 11, 441, 43, 53, 44, 50764], "temperature": 0.0, "avg_logprob": -0.20058049096001518, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.00501113710924983}, {"id": 15, "seek": 10264, "start": 113.08, "end": 120.08, "text": " itself is a library. So it defines an intermediate representation. That's what IR stands for. It", "tokens": [50886, 2564, 307, 257, 6405, 13, 407, 309, 23122, 364, 19376, 10290, 13, 663, 311, 437, 16486, 7382, 337, 13, 467, 51236], "temperature": 0.0, "avg_logprob": -0.20058049096001518, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.00501113710924983}, {"id": 16, "seek": 10264, "start": 120.92, "end": 127.42, "text": " contains state of the art optimizations. It also knows how to lower to X86 or ARM or", "tokens": [51278, 8306, 1785, 295, 264, 1523, 5028, 14455, 13, 467, 611, 3255, 577, 281, 3126, 281, 1783, 22193, 420, 45209, 420, 51603], "temperature": 0.0, "avg_logprob": -0.20058049096001518, "compression_ratio": 1.4041450777202074, "no_speech_prob": 0.00501113710924983}, {"id": 17, "seek": 12742, "start": 127.5, "end": 134.5, "text": " other targets. And then Clang is something like it compiles C or C++ down to LLVM IR.", "tokens": [50368, 661, 12911, 13, 400, 550, 2033, 656, 307, 746, 411, 309, 715, 4680, 383, 420, 383, 25472, 760, 281, 441, 43, 53, 44, 16486, 13, 50718], "temperature": 0.0, "avg_logprob": -0.21347114774915907, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.03387356922030449}, {"id": 18, "seek": 12742, "start": 136.3, "end": 141.98, "text": " So basically Clang is built on top of LLVM. And so it's Swift. There's a Rust compiler.", "tokens": [50808, 407, 1936, 2033, 656, 307, 3094, 322, 1192, 295, 441, 43, 53, 44, 13, 400, 370, 309, 311, 25539, 13, 821, 311, 257, 34952, 31958, 13, 51092], "temperature": 0.0, "avg_logprob": -0.21347114774915907, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.03387356922030449}, {"id": 19, "seek": 12742, "start": 141.98, "end": 147.98, "text": " There's a Fortran compiler as well. And I mean, the LLVM project is bigger than this.", "tokens": [51092, 821, 311, 257, 11002, 4257, 31958, 382, 731, 13, 400, 286, 914, 11, 264, 441, 43, 53, 44, 1716, 307, 3801, 813, 341, 13, 51392], "temperature": 0.0, "avg_logprob": -0.21347114774915907, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.03387356922030449}, {"id": 20, "seek": 12742, "start": 147.98, "end": 154.98000000000002, "text": " There's a full tool chain there, like debugger, linker, all of that. Actually, shameless plug", "tokens": [51392, 821, 311, 257, 1577, 2290, 5021, 456, 11, 411, 24083, 1321, 11, 2113, 260, 11, 439, 295, 300, 13, 5135, 11, 40164, 5452, 51742], "temperature": 0.0, "avg_logprob": -0.21347114774915907, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.03387356922030449}, {"id": 21, "seek": 15498, "start": 155.66, "end": 162.66, "text": " for the LLVM community that I'm part of. There's a dev room this afternoon here somewhere.", "tokens": [50398, 337, 264, 441, 43, 53, 44, 1768, 300, 286, 478, 644, 295, 13, 821, 311, 257, 1905, 1808, 341, 6499, 510, 4079, 13, 50748], "temperature": 0.0, "avg_logprob": -0.164359608921436, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.017060907557606697}, {"id": 22, "seek": 15498, "start": 164.57999999999998, "end": 169.7, "text": " To us, to Google, so I work at Google. To us, C and C++ is very important. Basically,", "tokens": [50844, 1407, 505, 11, 281, 3329, 11, 370, 286, 589, 412, 3329, 13, 1407, 505, 11, 383, 293, 383, 25472, 307, 588, 1021, 13, 8537, 11, 51100], "temperature": 0.0, "avg_logprob": -0.164359608921436, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.017060907557606697}, {"id": 23, "seek": 15498, "start": 169.7, "end": 176.7, "text": " anything that is performance critical, which is basically anything is written in C or C++.", "tokens": [51100, 1340, 300, 307, 3389, 4924, 11, 597, 307, 1936, 1340, 307, 3720, 294, 383, 420, 383, 25472, 13, 51450], "temperature": 0.0, "avg_logprob": -0.164359608921436, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.017060907557606697}, {"id": 24, "seek": 15498, "start": 177.66, "end": 184.57999999999998, "text": " When we say C and C++, I really mean LLVM. And when I talk about LLVM, I mean LLVM at", "tokens": [51498, 1133, 321, 584, 383, 293, 383, 25472, 11, 286, 534, 914, 441, 43, 53, 44, 13, 400, 562, 286, 751, 466, 441, 43, 53, 44, 11, 286, 914, 441, 43, 53, 44, 412, 51844], "temperature": 0.0, "avg_logprob": -0.164359608921436, "compression_ratio": 1.5758928571428572, "no_speech_prob": 0.017060907557606697}, {"id": 25, "seek": 18458, "start": 184.66000000000003, "end": 190.3, "text": " the tip of three in GitHub. So we don't have a special fork or anything like this. And", "tokens": [50368, 264, 4125, 295, 1045, 294, 23331, 13, 407, 321, 500, 380, 362, 257, 2121, 17716, 420, 1340, 411, 341, 13, 400, 50650], "temperature": 0.0, "avg_logprob": -0.24172938953746448, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.037351105362176895}, {"id": 26, "seek": 18458, "start": 190.3, "end": 196.62, "text": " we really chase the head by plus, like, well, minus usually two weeks. So we're very close", "tokens": [50650, 321, 534, 15359, 264, 1378, 538, 1804, 11, 411, 11, 731, 11, 3175, 2673, 732, 3259, 13, 407, 321, 434, 588, 1998, 50966], "temperature": 0.0, "avg_logprob": -0.24172938953746448, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.037351105362176895}, {"id": 27, "seek": 18458, "start": 196.62, "end": 202.5, "text": " to the head all the time. We have a release theme that keeps it basically in sync.", "tokens": [50966, 281, 264, 1378, 439, 264, 565, 13, 492, 362, 257, 4374, 6314, 300, 5965, 309, 1936, 294, 20271, 13, 51260], "temperature": 0.0, "avg_logprob": -0.24172938953746448, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.037351105362176895}, {"id": 28, "seek": 18458, "start": 202.5, "end": 209.5, "text": " And even small performance improvements matter, because a 1% saving across the fleet really", "tokens": [51260, 400, 754, 1359, 3389, 13797, 1871, 11, 570, 257, 502, 4, 6816, 2108, 264, 19396, 534, 51610], "temperature": 0.0, "avg_logprob": -0.24172938953746448, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.037351105362176895}, {"id": 29, "seek": 20950, "start": 209.5, "end": 216.5, "text": " means that much less hardware you have to buy, what you have to produce or consume, et", "tokens": [50364, 1355, 300, 709, 1570, 8837, 291, 362, 281, 2256, 11, 437, 291, 362, 281, 5258, 420, 14732, 11, 1030, 50714], "temperature": 0.0, "avg_logprob": -0.3330279456244575, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.04922828450798988}, {"id": 30, "seek": 20950, "start": 216.98, "end": 221.86, "text": " cetera. And we keep doing this. All the performance improvements that we make are small, but they're", "tokens": [50738, 11458, 13, 400, 321, 1066, 884, 341, 13, 1057, 264, 3389, 13797, 300, 321, 652, 366, 1359, 11, 457, 436, 434, 50982], "temperature": 0.0, "avg_logprob": -0.3330279456244575, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.04922828450798988}, {"id": 31, "seek": 20950, "start": 221.86, "end": 228.86, "text": " constant. And it's like interest. It compounds. Our binary is no shocker. They serve RPC requests.", "tokens": [50982, 5754, 13, 400, 309, 311, 411, 1179, 13, 467, 21810, 13, 2621, 17434, 307, 572, 5588, 260, 13, 814, 4596, 497, 12986, 12475, 13, 51332], "temperature": 0.0, "avg_logprob": -0.3330279456244575, "compression_ratio": 1.4517766497461928, "no_speech_prob": 0.04922828450798988}, {"id": 32, "seek": 22886, "start": 229.86, "end": 236.86, "text": " No surprise there. The key thing is that to do that, to optimize these things, there's", "tokens": [50414, 883, 6365, 456, 13, 440, 2141, 551, 307, 300, 281, 360, 300, 11, 281, 19719, 613, 721, 11, 456, 311, 50764], "temperature": 0.0, "avg_logprob": -0.19463962978786892, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.06646941602230072}, {"id": 33, "seek": 22886, "start": 239.66000000000003, "end": 243.98000000000002, "text": " many things you can do. But as a compiler engineer, we're primarily occupied with how", "tokens": [50904, 867, 721, 291, 393, 360, 13, 583, 382, 257, 31958, 11403, 11, 321, 434, 10029, 19629, 365, 577, 51120], "temperature": 0.0, "avg_logprob": -0.19463962978786892, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.06646941602230072}, {"id": 34, "seek": 22886, "start": 243.98000000000002, "end": 250.22000000000003, "text": " do we make the RPC request complete quickly. And the RPC request traverses a lot of code.", "tokens": [51120, 360, 321, 652, 264, 497, 12986, 5308, 3566, 2661, 13, 400, 264, 497, 12986, 5308, 23149, 279, 257, 688, 295, 3089, 13, 51432], "temperature": 0.0, "avg_logprob": -0.19463962978786892, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.06646941602230072}, {"id": 35, "seek": 22886, "start": 250.22000000000003, "end": 254.66000000000003, "text": " Most of it is actually not the code that you want to execute. So there's things like networking", "tokens": [51432, 4534, 295, 309, 307, 767, 406, 264, 3089, 300, 291, 528, 281, 14483, 13, 407, 456, 311, 721, 411, 17985, 51654], "temperature": 0.0, "avg_logprob": -0.19463962978786892, "compression_ratio": 1.6053811659192825, "no_speech_prob": 0.06646941602230072}, {"id": 36, "seek": 25466, "start": 254.7, "end": 259.94, "text": " stack, serialization, deserialization, security, blah, blah, blah, blah. And all of those things", "tokens": [50366, 8630, 11, 17436, 2144, 11, 730, 260, 831, 2144, 11, 3825, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 13, 400, 439, 295, 729, 721, 50628], "temperature": 0.0, "avg_logprob": -0.18590623869312753, "compression_ratio": 1.8819444444444444, "no_speech_prob": 0.05290764570236206}, {"id": 37, "seek": 25466, "start": 259.94, "end": 264.58, "text": " are reusable code. And they try to be genetic, which is the exact opposite of what I want", "tokens": [50628, 366, 41807, 3089, 13, 400, 436, 853, 281, 312, 12462, 11, 597, 307, 264, 1900, 6182, 295, 437, 286, 528, 50860], "temperature": 0.0, "avg_logprob": -0.18590623869312753, "compression_ratio": 1.8819444444444444, "no_speech_prob": 0.05290764570236206}, {"id": 38, "seek": 25466, "start": 264.58, "end": 268.54, "text": " for performance. Because for performance, I want it to be as specialized to what I'm", "tokens": [50860, 337, 3389, 13, 1436, 337, 3389, 11, 286, 528, 309, 281, 312, 382, 19813, 281, 437, 286, 478, 51058], "temperature": 0.0, "avg_logprob": -0.18590623869312753, "compression_ratio": 1.8819444444444444, "no_speech_prob": 0.05290764570236206}, {"id": 39, "seek": 25466, "start": 268.54, "end": 273.54, "text": " actually doing. Like, I don't want it to be genetic, right? And for that reason, actually,", "tokens": [51058, 767, 884, 13, 1743, 11, 286, 500, 380, 528, 309, 281, 312, 12462, 11, 558, 30, 400, 337, 300, 1778, 11, 767, 11, 51308], "temperature": 0.0, "avg_logprob": -0.18590623869312753, "compression_ratio": 1.8819444444444444, "no_speech_prob": 0.05290764570236206}, {"id": 40, "seek": 25466, "start": 273.54, "end": 278.34, "text": " the biggest levers that we have for performance are we collect profiles that tell us, like,", "tokens": [51308, 264, 3880, 45571, 300, 321, 362, 337, 3389, 366, 321, 2500, 23693, 300, 980, 505, 11, 411, 11, 51548], "temperature": 0.0, "avg_logprob": -0.18590623869312753, "compression_ratio": 1.8819444444444444, "no_speech_prob": 0.05290764570236206}, {"id": 41, "seek": 25466, "start": 278.34, "end": 281.74, "text": " well, actually, the program is spending time and then we reoptimize it. So we recompile", "tokens": [51548, 731, 11, 767, 11, 264, 1461, 307, 6434, 565, 293, 550, 321, 319, 5747, 43890, 309, 13, 407, 321, 48000, 794, 51718], "temperature": 0.0, "avg_logprob": -0.18590623869312753, "compression_ratio": 1.8819444444444444, "no_speech_prob": 0.05290764570236206}, {"id": 42, "seek": 28174, "start": 281.82, "end": 286.3, "text": " it with them. And link them optimizations, which are basically like we can look at the", "tokens": [50368, 309, 365, 552, 13, 400, 2113, 552, 5028, 14455, 11, 597, 366, 1936, 411, 321, 393, 574, 412, 264, 50592], "temperature": 0.0, "avg_logprob": -0.1877432986422702, "compression_ratio": 1.739463601532567, "no_speech_prob": 0.025812776759266853}, {"id": 43, "seek": 28174, "start": 286.3, "end": 293.3, "text": " whole program and try to, based on that understanding, try to make the right decisions. So things", "tokens": [50592, 1379, 1461, 293, 853, 281, 11, 2361, 322, 300, 3701, 11, 853, 281, 652, 264, 558, 5327, 13, 407, 721, 50942], "temperature": 0.0, "avg_logprob": -0.1877432986422702, "compression_ratio": 1.739463601532567, "no_speech_prob": 0.025812776759266853}, {"id": 44, "seek": 28174, "start": 294.62, "end": 298.78000000000003, "text": " are big, like, you know, lots of data, lots of instructions to execute, nothing fits in", "tokens": [51008, 366, 955, 11, 411, 11, 291, 458, 11, 3195, 295, 1412, 11, 3195, 295, 9415, 281, 14483, 11, 1825, 9001, 294, 51216], "temperature": 0.0, "avg_logprob": -0.1877432986422702, "compression_ratio": 1.739463601532567, "no_speech_prob": 0.025812776759266853}, {"id": 45, "seek": 28174, "start": 298.78000000000003, "end": 302.98, "text": " any cache. I'm not being ambiguous there. I'm being actually precise. No cache fits", "tokens": [51216, 604, 19459, 13, 286, 478, 406, 885, 39465, 456, 13, 286, 478, 885, 767, 13600, 13, 883, 19459, 9001, 51426], "temperature": 0.0, "avg_logprob": -0.1877432986422702, "compression_ratio": 1.739463601532567, "no_speech_prob": 0.025812776759266853}, {"id": 46, "seek": 28174, "start": 302.98, "end": 308.58, "text": " the data that we're talking about, the instructions or the actual data being processed. So that's", "tokens": [51426, 264, 1412, 300, 321, 434, 1417, 466, 11, 264, 9415, 420, 264, 3539, 1412, 885, 18846, 13, 407, 300, 311, 51706], "temperature": 0.0, "avg_logprob": -0.1877432986422702, "compression_ratio": 1.739463601532567, "no_speech_prob": 0.025812776759266853}, {"id": 47, "seek": 30858, "start": 308.65999999999997, "end": 314.65999999999997, "text": " why, like, optimizations like inlining are, you know, very impactful because they contextualize,", "tokens": [50368, 983, 11, 411, 11, 5028, 14455, 411, 294, 31079, 366, 11, 291, 458, 11, 588, 30842, 570, 436, 35526, 1125, 11, 50668], "temperature": 0.0, "avg_logprob": -0.19546591269003377, "compression_ratio": 1.6407407407407408, "no_speech_prob": 0.01012482400983572}, {"id": 48, "seek": 30858, "start": 314.65999999999997, "end": 320.41999999999996, "text": " so they specialize things down to what you actually really have to execute. And then", "tokens": [50668, 370, 436, 37938, 721, 760, 281, 437, 291, 767, 534, 362, 281, 14483, 13, 400, 550, 50956], "temperature": 0.0, "avg_logprob": -0.19546591269003377, "compression_ratio": 1.6407407407407408, "no_speech_prob": 0.01012482400983572}, {"id": 49, "seek": 30858, "start": 320.41999999999996, "end": 323.86, "text": " you end up with large functions, which means that optimizations are register allocation", "tokens": [50956, 291, 917, 493, 365, 2416, 6828, 11, 597, 1355, 300, 5028, 14455, 366, 7280, 27599, 51128], "temperature": 0.0, "avg_logprob": -0.19546591269003377, "compression_ratio": 1.6407407407407408, "no_speech_prob": 0.01012482400983572}, {"id": 50, "seek": 30858, "start": 323.86, "end": 330.86, "text": " or have like a big problem to solve. What am I doing? Okay. Here we go. Okay. Which kind", "tokens": [51128, 420, 362, 411, 257, 955, 1154, 281, 5039, 13, 708, 669, 286, 884, 30, 1033, 13, 1692, 321, 352, 13, 1033, 13, 3013, 733, 51478], "temperature": 0.0, "avg_logprob": -0.19546591269003377, "compression_ratio": 1.6407407407407408, "no_speech_prob": 0.01012482400983572}, {"id": 51, "seek": 30858, "start": 332.09999999999997, "end": 336.58, "text": " of gets us to why we want to do ML, right? So we want to do ML because we're looking", "tokens": [51540, 295, 2170, 505, 281, 983, 321, 528, 281, 360, 21601, 11, 558, 30, 407, 321, 528, 281, 360, 21601, 570, 321, 434, 1237, 51764], "temperature": 0.0, "avg_logprob": -0.19546591269003377, "compression_ratio": 1.6407407407407408, "no_speech_prob": 0.01012482400983572}, {"id": 52, "seek": 33658, "start": 336.58, "end": 343.58, "text": " at problems that are, sorry, sequential decision making. So inlining is about, hey, is this", "tokens": [50364, 412, 2740, 300, 366, 11, 2597, 11, 42881, 3537, 1455, 13, 407, 294, 31079, 307, 466, 11, 4177, 11, 307, 341, 50714], "temperature": 0.0, "avg_logprob": -0.15842383730728016, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.017104528844356537}, {"id": 53, "seek": 33658, "start": 343.58, "end": 347.7, "text": " call site worth inlining? Sure. Okay. Fine. Well, the program just changed now, right?", "tokens": [50714, 818, 3621, 3163, 294, 31079, 30, 4894, 13, 1033, 13, 12024, 13, 1042, 11, 264, 1461, 445, 3105, 586, 11, 558, 30, 50920], "temperature": 0.0, "avg_logprob": -0.15842383730728016, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.017104528844356537}, {"id": 54, "seek": 33658, "start": 347.7, "end": 352.34, "text": " So what about this other call site? Is it still worth inlining? Maybe not, right? So as you", "tokens": [50920, 407, 437, 466, 341, 661, 818, 3621, 30, 1119, 309, 920, 3163, 294, 31079, 30, 2704, 406, 11, 558, 30, 407, 382, 291, 51152], "temperature": 0.0, "avg_logprob": -0.15842383730728016, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.017104528844356537}, {"id": 55, "seek": 33658, "start": 352.34, "end": 358.26, "text": " go along, the state of the problem that you're trying to optimize changes, we don't have", "tokens": [51152, 352, 2051, 11, 264, 1785, 295, 264, 1154, 300, 291, 434, 1382, 281, 19719, 2962, 11, 321, 500, 380, 362, 51448], "temperature": 0.0, "avg_logprob": -0.15842383730728016, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.017104528844356537}, {"id": 56, "seek": 33658, "start": 358.26, "end": 362.09999999999997, "text": " an Oracle that tells us what's the perfect optimization decision, especially at like", "tokens": [51448, 364, 25654, 300, 5112, 505, 437, 311, 264, 2176, 19618, 3537, 11, 2318, 412, 411, 51640], "temperature": 0.0, "avg_logprob": -0.15842383730728016, "compression_ratio": 1.6946564885496183, "no_speech_prob": 0.017104528844356537}, {"id": 57, "seek": 36210, "start": 362.14000000000004, "end": 368.82000000000005, "text": " the scale that we're talking about. I'm kind of like getting us to say reinforcement learning,", "tokens": [50366, 264, 4373, 300, 321, 434, 1417, 466, 13, 286, 478, 733, 295, 411, 1242, 505, 281, 584, 29280, 2539, 11, 50700], "temperature": 0.0, "avg_logprob": -0.16775630453358525, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.01510155014693737}, {"id": 58, "seek": 36210, "start": 368.82000000000005, "end": 374.42, "text": " probably no surprise to an ML community. Because I mean, otherwise what we do is like we have", "tokens": [50700, 1391, 572, 6365, 281, 364, 21601, 1768, 13, 1436, 286, 914, 11, 5911, 437, 321, 360, 307, 411, 321, 362, 50980], "temperature": 0.0, "avg_logprob": -0.16775630453358525, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.01510155014693737}, {"id": 59, "seek": 36210, "start": 374.42, "end": 378.1, "text": " heuristics that can only operate on like local information. And because I mean, there's", "tokens": [50980, 415, 374, 6006, 300, 393, 787, 9651, 322, 411, 2654, 1589, 13, 400, 570, 286, 914, 11, 456, 311, 51164], "temperature": 0.0, "avg_logprob": -0.16775630453358525, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.01510155014693737}, {"id": 60, "seek": 36210, "start": 378.1, "end": 382.94, "text": " the one that actually we can make sense out of, right? So, and we have evidence that they're", "tokens": [51164, 264, 472, 300, 767, 321, 393, 652, 2020, 484, 295, 11, 558, 30, 407, 11, 293, 321, 362, 4467, 300, 436, 434, 51406], "temperature": 0.0, "avg_logprob": -0.16775630453358525, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.01510155014693737}, {"id": 61, "seek": 36210, "start": 382.94, "end": 386.66, "text": " not good enough in the sense that we know that if we play a bit with them, we can, we", "tokens": [51406, 406, 665, 1547, 294, 264, 2020, 300, 321, 458, 300, 498, 321, 862, 257, 857, 365, 552, 11, 321, 393, 11, 321, 51592], "temperature": 0.0, "avg_logprob": -0.16775630453358525, "compression_ratio": 1.6727941176470589, "no_speech_prob": 0.01510155014693737}, {"id": 62, "seek": 38666, "start": 386.70000000000005, "end": 392.3, "text": " can find headroom in optimization. So, but, you know, we cannot constantly twizzle with", "tokens": [50366, 393, 915, 1378, 2861, 294, 19618, 13, 407, 11, 457, 11, 291, 458, 11, 321, 2644, 6460, 683, 8072, 306, 365, 50646], "temperature": 0.0, "avg_logprob": -0.17070245742797852, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.03643503785133362}, {"id": 63, "seek": 38666, "start": 392.3, "end": 395.74, "text": " them, right? Like we want something a bit more systematic. So that's why we are interested", "tokens": [50646, 552, 11, 558, 30, 1743, 321, 528, 746, 257, 857, 544, 27249, 13, 407, 300, 311, 983, 321, 366, 3102, 50818], "temperature": 0.0, "avg_logprob": -0.17070245742797852, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.03643503785133362}, {"id": 64, "seek": 38666, "start": 395.74, "end": 402.74, "text": " in ML. We are also scared of ML because the compiler is about everything that ML is not.", "tokens": [50818, 294, 21601, 13, 492, 366, 611, 5338, 295, 21601, 570, 264, 31958, 307, 466, 1203, 300, 21601, 307, 406, 13, 51168], "temperature": 0.0, "avg_logprob": -0.17070245742797852, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.03643503785133362}, {"id": 65, "seek": 38666, "start": 403.54, "end": 408.94000000000005, "text": " So the compiler must be correct. I don't think that it's a surprise to anyone, but it's a", "tokens": [51208, 407, 264, 31958, 1633, 312, 3006, 13, 286, 500, 380, 519, 300, 309, 311, 257, 6365, 281, 2878, 11, 457, 309, 311, 257, 51478], "temperature": 0.0, "avg_logprob": -0.17070245742797852, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.03643503785133362}, {"id": 66, "seek": 38666, "start": 408.94000000000005, "end": 415.22, "text": " non-negotiable. The compiler must be deterministic again, because otherwise it's something that", "tokens": [51478, 2107, 12, 28561, 8206, 712, 13, 440, 31958, 1633, 312, 15957, 3142, 797, 11, 570, 5911, 309, 311, 746, 300, 51792], "temperature": 0.0, "avg_logprob": -0.17070245742797852, "compression_ratio": 1.6777777777777778, "no_speech_prob": 0.03643503785133362}, {"id": 67, "seek": 41522, "start": 415.26000000000005, "end": 418.70000000000005, "text": " you cannot live with or, you know, to take forever to compile things because we cannot", "tokens": [50366, 291, 2644, 1621, 365, 420, 11, 291, 458, 11, 281, 747, 5680, 281, 31413, 721, 570, 321, 2644, 50538], "temperature": 0.0, "avg_logprob": -0.20056541827546448, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00708475336432457}, {"id": 68, "seek": 41522, "start": 418.70000000000005, "end": 425.70000000000005, "text": " do incremental builds. So ML at least like naively to us felt like something more analog,", "tokens": [50538, 360, 35759, 15182, 13, 407, 21601, 412, 1935, 411, 1667, 3413, 281, 505, 2762, 411, 746, 544, 16660, 11, 50888], "temperature": 0.0, "avg_logprob": -0.20056541827546448, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00708475336432457}, {"id": 69, "seek": 41522, "start": 426.06, "end": 429.66, "text": " right? Like it's more like, well, fuzzy, maybe something and that's not, not what we are", "tokens": [50906, 558, 30, 1743, 309, 311, 544, 411, 11, 731, 11, 34710, 11, 1310, 746, 293, 300, 311, 406, 11, 406, 437, 321, 366, 51086], "temperature": 0.0, "avg_logprob": -0.20056541827546448, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00708475336432457}, {"id": 70, "seek": 41522, "start": 429.66, "end": 436.66, "text": " about, right? So how did we go about it? Well, first we're not asking ML to deal with correctness.", "tokens": [51086, 466, 11, 558, 30, 407, 577, 630, 321, 352, 466, 309, 30, 1042, 11, 700, 321, 434, 406, 3365, 21601, 281, 2028, 365, 3006, 1287, 13, 51436], "temperature": 0.0, "avg_logprob": -0.20056541827546448, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00708475336432457}, {"id": 71, "seek": 41522, "start": 439.46000000000004, "end": 443.78000000000003, "text": " So already in the, in the code that I'm talking about, like in the compiler code that makes", "tokens": [51576, 407, 1217, 294, 264, 11, 294, 264, 3089, 300, 286, 478, 1417, 466, 11, 411, 294, 264, 31958, 3089, 300, 1669, 51792], "temperature": 0.0, "avg_logprob": -0.20056541827546448, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.00708475336432457}, {"id": 72, "seek": 44378, "start": 443.78, "end": 448.46, "text": " decisions like in lining and register location and things like this, we kind of already had", "tokens": [50364, 5327, 411, 294, 19628, 293, 7280, 4914, 293, 721, 411, 341, 11, 321, 733, 295, 1217, 632, 50598], "temperature": 0.0, "avg_logprob": -0.18360667569296701, "compression_ratio": 1.7376425855513309, "no_speech_prob": 0.03255201131105423}, {"id": 73, "seek": 44378, "start": 448.46, "end": 452.65999999999997, "text": " a separation between what's correct. So, you know, there are certain things that are illegal", "tokens": [50598, 257, 14634, 1296, 437, 311, 3006, 13, 407, 11, 291, 458, 11, 456, 366, 1629, 721, 300, 366, 11905, 50808], "temperature": 0.0, "avg_logprob": -0.18360667569296701, "compression_ratio": 1.7376425855513309, "no_speech_prob": 0.03255201131105423}, {"id": 74, "seek": 44378, "start": 452.65999999999997, "end": 456.82, "text": " to do so that we don't do them. We don't even wonder are they worth, like, you know, would", "tokens": [50808, 281, 360, 370, 300, 321, 500, 380, 360, 552, 13, 492, 500, 380, 754, 2441, 366, 436, 3163, 11, 411, 11, 291, 458, 11, 576, 51016], "temperature": 0.0, "avg_logprob": -0.18360667569296701, "compression_ratio": 1.7376425855513309, "no_speech_prob": 0.03255201131105423}, {"id": 75, "seek": 44378, "start": 456.82, "end": 462.11999999999995, "text": " they be valuable in doing it? We just don't do them. What we did here is we stressed that", "tokens": [51016, 436, 312, 8263, 294, 884, 309, 30, 492, 445, 500, 380, 360, 552, 13, 708, 321, 630, 510, 307, 321, 14471, 300, 51281], "temperature": 0.0, "avg_logprob": -0.18360667569296701, "compression_ratio": 1.7376425855513309, "no_speech_prob": 0.03255201131105423}, {"id": 76, "seek": 44378, "start": 462.11999999999995, "end": 469.11999999999995, "text": " boundary even more. So we created like a very clear interface between ML questions and like", "tokens": [51281, 12866, 754, 544, 13, 407, 321, 2942, 411, 257, 588, 1850, 9226, 1296, 21601, 1651, 293, 411, 51631], "temperature": 0.0, "avg_logprob": -0.18360667569296701, "compression_ratio": 1.7376425855513309, "no_speech_prob": 0.03255201131105423}, {"id": 77, "seek": 46912, "start": 469.12, "end": 473.68, "text": " what heuristic or policy questions and, you know, correctness issues. So the correctness", "tokens": [50364, 437, 415, 374, 3142, 420, 3897, 1651, 293, 11, 291, 458, 11, 3006, 1287, 2663, 13, 407, 264, 3006, 1287, 50592], "temperature": 0.0, "avg_logprob": -0.17636522753485318, "compression_ratio": 1.6806083650190113, "no_speech_prob": 0.01650875248014927}, {"id": 78, "seek": 46912, "start": 473.68, "end": 480.04, "text": " stuff is, you know, written in normal imperative C C plus plus code that we can all look at", "tokens": [50592, 1507, 307, 11, 291, 458, 11, 3720, 294, 2710, 32490, 383, 383, 1804, 1804, 3089, 300, 321, 393, 439, 574, 412, 50910], "temperature": 0.0, "avg_logprob": -0.17636522753485318, "compression_ratio": 1.6806083650190113, "no_speech_prob": 0.01650875248014927}, {"id": 79, "seek": 46912, "start": 480.04, "end": 485.8, "text": " and agree that it's actually correct, right? Module of bugs as always. But then out of", "tokens": [50910, 293, 3986, 300, 309, 311, 767, 3006, 11, 558, 30, 48251, 295, 15120, 382, 1009, 13, 583, 550, 484, 295, 51198], "temperature": 0.0, "avg_logprob": -0.17636522753485318, "compression_ratio": 1.6806083650190113, "no_speech_prob": 0.01650875248014927}, {"id": 80, "seek": 46912, "start": 485.8, "end": 492.52, "text": " choices that are equally correct, we go and ask ML, you know, which one should we make?", "tokens": [51198, 7994, 300, 366, 12309, 3006, 11, 321, 352, 293, 1029, 21601, 11, 291, 458, 11, 597, 472, 820, 321, 652, 30, 51534], "temperature": 0.0, "avg_logprob": -0.17636522753485318, "compression_ratio": 1.6806083650190113, "no_speech_prob": 0.01650875248014927}, {"id": 81, "seek": 46912, "start": 492.52, "end": 497.88, "text": " To the end user, we don't want to tell them any of these not because it's like a shame", "tokens": [51534, 1407, 264, 917, 4195, 11, 321, 500, 380, 528, 281, 980, 552, 604, 295, 613, 406, 570, 309, 311, 411, 257, 10069, 51802], "temperature": 0.0, "avg_logprob": -0.17636522753485318, "compression_ratio": 1.6806083650190113, "no_speech_prob": 0.01650875248014927}, {"id": 82, "seek": 49788, "start": 497.96, "end": 503.6, "text": " or anything, but because it's the more different the compiler would look like the more difficult", "tokens": [50368, 420, 1340, 11, 457, 570, 309, 311, 264, 544, 819, 264, 31958, 576, 574, 411, 264, 544, 2252, 50650], "temperature": 0.0, "avg_logprob": -0.16738419060234552, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.0426257960498333}, {"id": 83, "seek": 49788, "start": 503.6, "end": 508.56, "text": " it would be to adopt it. So how about we make it look the same as it is today, which means", "tokens": [50650, 309, 576, 312, 281, 6878, 309, 13, 407, 577, 466, 321, 652, 309, 574, 264, 912, 382, 309, 307, 965, 11, 597, 1355, 50898], "temperature": 0.0, "avg_logprob": -0.16738419060234552, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.0426257960498333}, {"id": 84, "seek": 49788, "start": 508.56, "end": 514.8, "text": " no new dependencies, nothing extra, just additional flags, right? So that's something that is", "tokens": [50898, 572, 777, 36606, 11, 1825, 2857, 11, 445, 4497, 23265, 11, 558, 30, 407, 300, 311, 746, 300, 307, 51210], "temperature": 0.0, "avg_logprob": -0.16738419060234552, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.0426257960498333}, {"id": 85, "seek": 49788, "start": 514.8, "end": 521.64, "text": " fine. So which really means that when we give the compiler to the user, we embed, we need", "tokens": [51210, 2489, 13, 407, 597, 534, 1355, 300, 562, 321, 976, 264, 31958, 281, 264, 4195, 11, 321, 12240, 11, 321, 643, 51552], "temperature": 0.0, "avg_logprob": -0.16738419060234552, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.0426257960498333}, {"id": 86, "seek": 49788, "start": 521.64, "end": 525.52, "text": " to embed the models inside and not show any sort of like dependency on some sort of like", "tokens": [51552, 281, 12240, 264, 5245, 1854, 293, 406, 855, 604, 1333, 295, 411, 33621, 322, 512, 1333, 295, 411, 51746], "temperature": 0.0, "avg_logprob": -0.16738419060234552, "compression_ratio": 1.7898832684824904, "no_speech_prob": 0.0426257960498333}, {"id": 87, "seek": 52552, "start": 525.6, "end": 529.12, "text": " an inference engine or anything like that. But for training, there's totally different. So", "tokens": [50368, 364, 38253, 2848, 420, 1340, 411, 300, 13, 583, 337, 3097, 11, 456, 311, 3879, 819, 13, 407, 50544], "temperature": 0.0, "avg_logprob": -0.16701236367225647, "compression_ratio": 1.9401408450704225, "no_speech_prob": 0.01627361960709095}, {"id": 88, "seek": 52552, "start": 529.12, "end": 533.8, "text": " for training, we're totally cool with like, depending on like TensorFlow and like whatever", "tokens": [50544, 337, 3097, 11, 321, 434, 3879, 1627, 365, 411, 11, 5413, 322, 411, 37624, 293, 411, 2035, 50778], "temperature": 0.0, "avg_logprob": -0.16701236367225647, "compression_ratio": 1.9401408450704225, "no_speech_prob": 0.01627361960709095}, {"id": 89, "seek": 52552, "start": 533.8, "end": 538.52, "text": " and, you know, like random generators in the weights and all of that is fine because that", "tokens": [50778, 293, 11, 291, 458, 11, 411, 4974, 38662, 294, 264, 17443, 293, 439, 295, 300, 307, 2489, 570, 300, 51014], "temperature": 0.0, "avg_logprob": -0.16701236367225647, "compression_ratio": 1.9401408450704225, "no_speech_prob": 0.01627361960709095}, {"id": 90, "seek": 52552, "start": 538.52, "end": 542.4399999999999, "text": " this training and actually we're fine with compiling a different compiler just for training,", "tokens": [51014, 341, 3097, 293, 767, 321, 434, 2489, 365, 715, 4883, 257, 819, 31958, 445, 337, 3097, 11, 51210], "temperature": 0.0, "avg_logprob": -0.16701236367225647, "compression_ratio": 1.9401408450704225, "no_speech_prob": 0.01627361960709095}, {"id": 91, "seek": 52552, "start": 542.8, "end": 547.12, "text": " because that's not something that, you know, like, it's not for like everybody, right? So", "tokens": [51228, 570, 300, 311, 406, 746, 300, 11, 291, 458, 11, 411, 11, 309, 311, 406, 337, 411, 2201, 11, 558, 30, 407, 51444], "temperature": 0.0, "avg_logprob": -0.16701236367225647, "compression_ratio": 1.9401408450704225, "no_speech_prob": 0.01627361960709095}, {"id": 92, "seek": 52552, "start": 547.12, "end": 551.68, "text": " it's just for whoever does the training activity, which we also want to be rare because we don't", "tokens": [51444, 309, 311, 445, 337, 11387, 775, 264, 3097, 5191, 11, 597, 321, 611, 528, 281, 312, 5892, 570, 321, 500, 380, 51672], "temperature": 0.0, "avg_logprob": -0.16701236367225647, "compression_ratio": 1.9401408450704225, "no_speech_prob": 0.01627361960709095}, {"id": 93, "seek": 55168, "start": 551.76, "end": 555.68, "text": " want to like keep training it as you're trying to ship a product, right? So, you know, like, we", "tokens": [50368, 528, 281, 411, 1066, 3097, 309, 382, 291, 434, 1382, 281, 5374, 257, 1674, 11, 558, 30, 407, 11, 291, 458, 11, 411, 11, 321, 50564], "temperature": 0.0, "avg_logprob": -0.15434628975491563, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.023703010752797127}, {"id": 94, "seek": 55168, "start": 555.68, "end": 559.68, "text": " give you the compiler and then like, hopefully the more the models are good enough, just like", "tokens": [50564, 976, 291, 264, 31958, 293, 550, 411, 11, 4696, 264, 544, 264, 5245, 366, 665, 1547, 11, 445, 411, 50764], "temperature": 0.0, "avg_logprob": -0.15434628975491563, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.023703010752797127}, {"id": 95, "seek": 55168, "start": 559.68, "end": 564.16, "text": " heuristics today, like, you know, like to, to resist changes that people make to their code,", "tokens": [50764, 415, 374, 6006, 965, 11, 411, 11, 291, 458, 11, 411, 281, 11, 281, 4597, 2962, 300, 561, 652, 281, 641, 3089, 11, 50988], "temperature": 0.0, "avg_logprob": -0.15434628975491563, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.023703010752797127}, {"id": 96, "seek": 55168, "start": 564.16, "end": 571.92, "text": " right? So basically, there's two types of interfaces that we ended up having. One is", "tokens": [50988, 558, 30, 407, 1936, 11, 456, 311, 732, 3467, 295, 28416, 300, 321, 4590, 493, 1419, 13, 1485, 307, 51376], "temperature": 0.0, "avg_logprob": -0.15434628975491563, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.023703010752797127}, {"id": 97, "seek": 55168, "start": 571.92, "end": 576.8399999999999, "text": " between compiler and policy. And there's like domain specific. What I mean is like, there's a", "tokens": [51376, 1296, 31958, 293, 3897, 13, 400, 456, 311, 411, 9274, 2685, 13, 708, 286, 914, 307, 411, 11, 456, 311, 257, 51622], "temperature": 0.0, "avg_logprob": -0.15434628975491563, "compression_ratio": 1.7074074074074075, "no_speech_prob": 0.023703010752797127}, {"id": 98, "seek": 57684, "start": 576.88, "end": 581.96, "text": " different question that you ask is an inlining pass from the one that you ask is a register", "tokens": [50366, 819, 1168, 300, 291, 1029, 307, 364, 294, 31079, 1320, 490, 264, 472, 300, 291, 1029, 307, 257, 7280, 50620], "temperature": 0.0, "avg_logprob": -0.1991556430685109, "compression_ratio": 1.84765625, "no_speech_prob": 0.028764788061380386}, {"id": 99, "seek": 57684, "start": 581.96, "end": 586.44, "text": " locator from the one that you ask is a instruction selector or something like that. But then the", "tokens": [50620, 1628, 1639, 490, 264, 472, 300, 291, 1029, 307, 257, 10951, 23264, 1672, 420, 746, 411, 300, 13, 583, 550, 264, 50844], "temperature": 0.0, "avg_logprob": -0.1991556430685109, "compression_ratio": 1.84765625, "no_speech_prob": 0.028764788061380386}, {"id": 100, "seek": 57684, "start": 586.44, "end": 592.0400000000001, "text": " ML obstruction, like the way we interact with the mail is common because fundamentally ML to us", "tokens": [50844, 21601, 49711, 11, 411, 264, 636, 321, 4648, 365, 264, 10071, 307, 2689, 570, 17879, 21601, 281, 505, 51124], "temperature": 0.0, "avg_logprob": -0.1991556430685109, "compression_ratio": 1.84765625, "no_speech_prob": 0.028764788061380386}, {"id": 101, "seek": 57684, "start": 592.0400000000001, "end": 597.52, "text": " looks like a function that we pass a bunch of tensors to and it comes back with an answer. And", "tokens": [51124, 1542, 411, 257, 2445, 300, 321, 1320, 257, 3840, 295, 10688, 830, 281, 293, 309, 1487, 646, 365, 364, 1867, 13, 400, 51398], "temperature": 0.0, "avg_logprob": -0.1991556430685109, "compression_ratio": 1.84765625, "no_speech_prob": 0.028764788061380386}, {"id": 102, "seek": 57684, "start": 597.52, "end": 604.32, "text": " we, you know, like how it's implemented is, you know, it's not important, but it's irrelevant", "tokens": [51398, 321, 11, 291, 458, 11, 411, 577, 309, 311, 12270, 307, 11, 291, 458, 11, 309, 311, 406, 1021, 11, 457, 309, 311, 28682, 51738], "temperature": 0.0, "avg_logprob": -0.1991556430685109, "compression_ratio": 1.84765625, "no_speech_prob": 0.028764788061380386}, {"id": 103, "seek": 60432, "start": 604.36, "end": 608.5600000000001, "text": " from the perspective of the interface and the implementations that we have are like either", "tokens": [50366, 490, 264, 4585, 295, 264, 9226, 293, 264, 4445, 763, 300, 321, 362, 366, 411, 2139, 50576], "temperature": 0.0, "avg_logprob": -0.2671847915649414, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.0246434323489666}, {"id": 104, "seek": 60432, "start": 608.5600000000001, "end": 614.7600000000001, "text": " ahead of time, like I mentioned, or, you know, the interpreters who use TF light, like the", "tokens": [50576, 2286, 295, 565, 11, 411, 286, 2835, 11, 420, 11, 291, 458, 11, 264, 17489, 1559, 567, 764, 40964, 1442, 11, 411, 264, 50886], "temperature": 0.0, "avg_logprob": -0.2671847915649414, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.0246434323489666}, {"id": 105, "seek": 60432, "start": 614.7600000000001, "end": 626.24, "text": " people in embedded or for the DMM case, we're actually doing IPC over pipes. So the state in", "tokens": [50886, 561, 294, 16741, 420, 337, 264, 15322, 44, 1389, 11, 321, 434, 767, 884, 8671, 34, 670, 21882, 13, 407, 264, 1785, 294, 51460], "temperature": 0.0, "avg_logprob": -0.2671847915649414, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.0246434323489666}, {"id": 106, "seek": 60432, "start": 626.24, "end": 631.6400000000001, "text": " LLVM today, like if you, if you go to GitHub and you pull LLVM down, you basically have everything", "tokens": [51460, 441, 43, 53, 44, 965, 11, 411, 498, 291, 11, 498, 291, 352, 281, 23331, 293, 291, 2235, 441, 43, 53, 44, 760, 11, 291, 1936, 362, 1203, 51730], "temperature": 0.0, "avg_logprob": -0.2671847915649414, "compression_ratio": 1.5738396624472575, "no_speech_prob": 0.0246434323489666}, {"id": 107, "seek": 63164, "start": 632.64, "end": 642.04, "text": " that you need to, to, you know, add the mail to a pass if you're a compiler engineer. It's TensorFlow", "tokens": [50414, 300, 291, 643, 281, 11, 281, 11, 291, 458, 11, 909, 264, 10071, 281, 257, 1320, 498, 291, 434, 257, 31958, 11403, 13, 467, 311, 37624, 50884], "temperature": 0.0, "avg_logprob": -0.21106523888133397, "compression_ratio": 1.6866952789699572, "no_speech_prob": 0.006025843787938356}, {"id": 108, "seek": 63164, "start": 642.04, "end": 647.64, "text": " centric, no surprise there, but it doesn't have to be. So the obstruction that I mentioned earlier", "tokens": [50884, 1489, 1341, 11, 572, 6365, 456, 11, 457, 309, 1177, 380, 362, 281, 312, 13, 407, 264, 49711, 300, 286, 2835, 3071, 51164], "temperature": 0.0, "avg_logprob": -0.21106523888133397, "compression_ratio": 1.6866952789699572, "no_speech_prob": 0.006025843787938356}, {"id": 109, "seek": 63164, "start": 647.64, "end": 652.84, "text": " can be, you know, like, I mean, you can, you can plug by the pytorch or anything like that. I mean,", "tokens": [51164, 393, 312, 11, 291, 458, 11, 411, 11, 286, 914, 11, 291, 393, 11, 291, 393, 5452, 538, 264, 25878, 284, 339, 420, 1340, 411, 300, 13, 286, 914, 11, 51424], "temperature": 0.0, "avg_logprob": -0.21106523888133397, "compression_ratio": 1.6866952789699572, "no_speech_prob": 0.006025843787938356}, {"id": 110, "seek": 63164, "start": 652.84, "end": 659.0, "text": " we, we made a pipe based protocol work over that obstruction. So it's clearly not TensorFlow", "tokens": [51424, 321, 11, 321, 1027, 257, 11240, 2361, 10336, 589, 670, 300, 49711, 13, 407, 309, 311, 4448, 406, 37624, 51732], "temperature": 0.0, "avg_logprob": -0.21106523888133397, "compression_ratio": 1.6866952789699572, "no_speech_prob": 0.006025843787938356}, {"id": 111, "seek": 65900, "start": 659.04, "end": 667.72, "text": " specific. Any tools that are genetic, you know, like other utilities, like how you collect a corpus", "tokens": [50366, 2685, 13, 2639, 3873, 300, 366, 12462, 11, 291, 458, 11, 411, 661, 30482, 11, 411, 577, 291, 2500, 257, 1181, 31624, 50800], "temperature": 0.0, "avg_logprob": -0.16621971130371094, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.011364773847162724}, {"id": 112, "seek": 65900, "start": 667.72, "end": 676.32, "text": " for training, right? So that's a problem. That's also in LLVM. We used to have them in, in, in a", "tokens": [50800, 337, 3097, 11, 558, 30, 407, 300, 311, 257, 1154, 13, 663, 311, 611, 294, 441, 43, 53, 44, 13, 492, 1143, 281, 362, 552, 294, 11, 294, 11, 294, 257, 51230], "temperature": 0.0, "avg_logprob": -0.16621971130371094, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.011364773847162724}, {"id": 113, "seek": 65900, "start": 676.36, "end": 684.32, "text": " different repository, also open source, but they make more sense to go into LLVM. The training", "tokens": [51232, 819, 25841, 11, 611, 1269, 4009, 11, 457, 436, 652, 544, 2020, 281, 352, 666, 441, 43, 53, 44, 13, 440, 3097, 51630], "temperature": 0.0, "avg_logprob": -0.16621971130371094, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.011364773847162724}, {"id": 114, "seek": 68432, "start": 684.32, "end": 689.0400000000001, "text": " tools that we use, so for example, the, the fuchsia operating system that I had on an earlier slide", "tokens": [50364, 3873, 300, 321, 764, 11, 370, 337, 1365, 11, 264, 11, 264, 283, 37503, 654, 7447, 1185, 300, 286, 632, 322, 364, 3071, 4137, 50600], "temperature": 0.0, "avg_logprob": -0.1899935567480886, "compression_ratio": 1.7859778597785978, "no_speech_prob": 0.04861622676253319}, {"id": 115, "seek": 68432, "start": 690.44, "end": 694.6800000000001, "text": " trains using those tools, they are available there to as a, as a reference. But if you are a", "tokens": [50670, 16329, 1228, 729, 3873, 11, 436, 366, 2435, 456, 281, 382, 257, 11, 382, 257, 6408, 13, 583, 498, 291, 366, 257, 50882], "temperature": 0.0, "avg_logprob": -0.1899935567480886, "compression_ratio": 1.7859778597785978, "no_speech_prob": 0.04861622676253319}, {"id": 116, "seek": 68432, "start": 694.6800000000001, "end": 698.88, "text": " researcher, you probably want to use something like compiler Jim that is more research, research", "tokens": [50882, 21751, 11, 291, 1391, 528, 281, 764, 746, 411, 31958, 6637, 300, 307, 544, 2132, 11, 2132, 51092], "temperature": 0.0, "avg_logprob": -0.1899935567480886, "compression_ratio": 1.7859778597785978, "no_speech_prob": 0.04861622676253319}, {"id": 117, "seek": 68432, "start": 698.88, "end": 703.7600000000001, "text": " friendly. So there's kind of like different concerns in, in these tools. And then there's also", "tokens": [51092, 9208, 13, 407, 456, 311, 733, 295, 411, 819, 7389, 294, 11, 294, 613, 3873, 13, 400, 550, 456, 311, 611, 51336], "temperature": 0.0, "avg_logprob": -0.1899935567480886, "compression_ratio": 1.7859778597785978, "no_speech_prob": 0.04861622676253319}, {"id": 118, "seek": 68432, "start": 703.7600000000001, "end": 709.96, "text": " like using the tooling that I mentioned, like there's, there's another body of work that produced a", "tokens": [51336, 411, 1228, 264, 46593, 300, 286, 2835, 11, 411, 456, 311, 11, 456, 311, 1071, 1772, 295, 589, 300, 7126, 257, 51646], "temperature": 0.0, "avg_logprob": -0.1899935567480886, "compression_ratio": 1.7859778597785978, "no_speech_prob": 0.04861622676253319}, {"id": 119, "seek": 70996, "start": 709.96, "end": 716.24, "text": " large corpus of IR that you can use for like whatever you want, like training for these purposes, or", "tokens": [50364, 2416, 1181, 31624, 295, 16486, 300, 291, 393, 764, 337, 411, 2035, 291, 528, 11, 411, 3097, 337, 613, 9932, 11, 420, 50678], "temperature": 0.0, "avg_logprob": -0.17169671399252756, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.0191853828728199}, {"id": 120, "seek": 70996, "start": 716.24, "end": 722.0, "text": " maybe doing LLVM training or anything like that. There's links there. In fact, like all the links in", "tokens": [50678, 1310, 884, 441, 43, 53, 44, 3097, 420, 1340, 411, 300, 13, 821, 311, 6123, 456, 13, 682, 1186, 11, 411, 439, 264, 6123, 294, 50966], "temperature": 0.0, "avg_logprob": -0.17169671399252756, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.0191853828728199}, {"id": 121, "seek": 70996, "start": 722.0, "end": 727.72, "text": " the, in the slide that are in the, you know, like when you go to falls them and you see the talk,", "tokens": [50966, 264, 11, 294, 264, 4137, 300, 366, 294, 264, 11, 291, 458, 11, 411, 562, 291, 352, 281, 8804, 552, 293, 291, 536, 264, 751, 11, 51252], "temperature": 0.0, "avg_logprob": -0.17169671399252756, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.0191853828728199}, {"id": 122, "seek": 70996, "start": 727.8000000000001, "end": 738.48, "text": " they're there. Okay, what we learned, that's what I wanted to get to. And I'm doing well with time. Okay,", "tokens": [51256, 436, 434, 456, 13, 1033, 11, 437, 321, 3264, 11, 300, 311, 437, 286, 1415, 281, 483, 281, 13, 400, 286, 478, 884, 731, 365, 565, 13, 1033, 11, 51790], "temperature": 0.0, "avg_logprob": -0.17169671399252756, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.0191853828728199}, {"id": 123, "seek": 73848, "start": 738.52, "end": 744.32, "text": " so the, the, it works thing, right? So there's a difference between, I mean, there's been work doing", "tokens": [50366, 370, 264, 11, 264, 11, 309, 1985, 551, 11, 558, 30, 407, 456, 311, 257, 2649, 1296, 11, 286, 914, 11, 456, 311, 668, 589, 884, 50656], "temperature": 0.0, "avg_logprob": -0.12372136116027832, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0186347346752882}, {"id": 124, "seek": 73848, "start": 744.32, "end": 748.44, "text": " ML with compilers in academia, but I mean, that there's a big difference between that and actually", "tokens": [50656, 21601, 365, 715, 388, 433, 294, 28937, 11, 457, 286, 914, 11, 300, 456, 311, 257, 955, 2649, 1296, 300, 293, 767, 50862], "temperature": 0.0, "avg_logprob": -0.12372136116027832, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0186347346752882}, {"id": 125, "seek": 73848, "start": 748.44, "end": 757.5600000000001, "text": " shipping a product and shipping a compiler for production teams. So the key thing is that, at", "tokens": [50862, 14122, 257, 1674, 293, 14122, 257, 31958, 337, 4265, 5491, 13, 407, 264, 2141, 551, 307, 300, 11, 412, 51318], "temperature": 0.0, "avg_logprob": -0.12372136116027832, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0186347346752882}, {"id": 126, "seek": 73848, "start": 757.5600000000001, "end": 763.4, "text": " least with a size problem, we have evidence from, from the Fuchsia team that it can work completely,", "tokens": [51318, 1935, 365, 257, 2744, 1154, 11, 321, 362, 4467, 490, 11, 490, 264, 479, 37503, 654, 1469, 300, 309, 393, 589, 2584, 11, 51610], "temperature": 0.0, "avg_logprob": -0.12372136116027832, "compression_ratio": 1.7668161434977578, "no_speech_prob": 0.0186347346752882}, {"id": 127, "seek": 76340, "start": 763.4, "end": 769.4, "text": " meaning like they periodically, like about every month, pull LLVM, retrain a model on their code", "tokens": [50364, 3620, 411, 436, 38916, 11, 411, 466, 633, 1618, 11, 2235, 441, 43, 53, 44, 11, 1533, 7146, 257, 2316, 322, 641, 3089, 50664], "temperature": 0.0, "avg_logprob": -0.12135786168715533, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.04685686156153679}, {"id": 128, "seek": 76340, "start": 769.4, "end": 777.92, "text": " base, all on vanilla build bots. So they're like normal CPU based machines. They train for like", "tokens": [50664, 3096, 11, 439, 322, 17528, 1322, 35410, 13, 407, 436, 434, 411, 2710, 13199, 2361, 8379, 13, 814, 3847, 337, 411, 51090], "temperature": 0.0, "avg_logprob": -0.12135786168715533, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.04685686156153679}, {"id": 129, "seek": 76340, "start": 777.92, "end": 783.52, "text": " about a day or so. And they produce a compiler at the end of that that optimizes for, for size,", "tokens": [51090, 466, 257, 786, 420, 370, 13, 400, 436, 5258, 257, 31958, 412, 264, 917, 295, 300, 300, 5028, 5660, 337, 11, 337, 2744, 11, 51370], "temperature": 0.0, "avg_logprob": -0.12135786168715533, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.04685686156153679}, {"id": 130, "seek": 76340, "start": 783.52, "end": 788.88, "text": " because that's what they care about. There's links, I think, down there, like an example of such a", "tokens": [51370, 570, 300, 311, 437, 436, 1127, 466, 13, 821, 311, 6123, 11, 286, 519, 11, 760, 456, 11, 411, 364, 1365, 295, 1270, 257, 51638], "temperature": 0.0, "avg_logprob": -0.12135786168715533, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.04685686156153679}, {"id": 131, "seek": 78888, "start": 788.88, "end": 796.08, "text": " build bot. So it all, you know, this can be done completely openly. And the key thing also is that", "tokens": [50364, 1322, 10592, 13, 407, 309, 439, 11, 291, 458, 11, 341, 393, 312, 1096, 2584, 23109, 13, 400, 264, 2141, 551, 611, 307, 300, 50724], "temperature": 0.0, "avg_logprob": -0.09298500722768355, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.03496258333325386}, {"id": 132, "seek": 78888, "start": 796.08, "end": 802.08, "text": " it works like turnkey, meaning like you don't need someone to go and pay attention to it. It just", "tokens": [50724, 309, 1985, 411, 1261, 4119, 11, 3620, 411, 291, 500, 380, 643, 1580, 281, 352, 293, 1689, 3202, 281, 309, 13, 467, 445, 51024], "temperature": 0.0, "avg_logprob": -0.09298500722768355, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.03496258333325386}, {"id": 133, "seek": 78888, "start": 802.08, "end": 806.28, "text": " works repeatedly. And he's been working like this for like almost four years now, which is, which is", "tokens": [51024, 1985, 18227, 13, 400, 415, 311, 668, 1364, 411, 341, 337, 411, 1920, 1451, 924, 586, 11, 597, 307, 11, 597, 307, 51234], "temperature": 0.0, "avg_logprob": -0.09298500722768355, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.03496258333325386}, {"id": 134, "seek": 78888, "start": 806.28, "end": 811.36, "text": " good. Like we have a signal that we can have like an industrial process that produces an optimized", "tokens": [51234, 665, 13, 1743, 321, 362, 257, 6358, 300, 321, 393, 362, 411, 364, 9987, 1399, 300, 14725, 364, 26941, 51488], "temperature": 0.0, "avg_logprob": -0.09298500722768355, "compression_ratio": 1.6431535269709543, "no_speech_prob": 0.03496258333325386}, {"id": 135, "seek": 81136, "start": 811.36, "end": 820.0, "text": " compiler, you know, on a cadence, right? Okay, here's what it didn't work. So performance is hard. So,", "tokens": [50364, 31958, 11, 291, 458, 11, 322, 257, 46109, 11, 558, 30, 1033, 11, 510, 311, 437, 309, 994, 380, 589, 13, 407, 3389, 307, 1152, 13, 407, 11, 50796], "temperature": 0.0, "avg_logprob": -0.2045612457471016, "compression_ratio": 1.507462686567164, "no_speech_prob": 0.04402567446231842}, {"id": 136, "seek": 81136, "start": 820.0, "end": 828.0, "text": " okay, so you are ML experts, you are not surprised at the statement that for reinforcement learning,", "tokens": [50796, 1392, 11, 370, 291, 366, 21601, 8572, 11, 291, 366, 406, 6100, 412, 264, 5629, 300, 337, 29280, 2539, 11, 51196], "temperature": 0.0, "avg_logprob": -0.2045612457471016, "compression_ratio": 1.507462686567164, "no_speech_prob": 0.04402567446231842}, {"id": 137, "seek": 81136, "start": 828.0, "end": 836.36, "text": " the, the quality of the reward is very important. And we understood that through we, okay, it makes", "tokens": [51196, 264, 11, 264, 3125, 295, 264, 7782, 307, 588, 1021, 13, 400, 321, 7320, 300, 807, 321, 11, 1392, 11, 309, 1669, 51614], "temperature": 0.0, "avg_logprob": -0.2045612457471016, "compression_ratio": 1.507462686567164, "no_speech_prob": 0.04402567446231842}, {"id": 138, "seek": 83636, "start": 836.36, "end": 844.12, "text": " sense. However, for performance, the problem is a bit tricky. So it goes like this, you cannot just say, oh,", "tokens": [50364, 2020, 13, 2908, 11, 337, 3389, 11, 264, 1154, 307, 257, 857, 12414, 13, 407, 309, 1709, 411, 341, 11, 291, 2644, 445, 584, 11, 1954, 11, 50752], "temperature": 0.0, "avg_logprob": -0.1417827454824296, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.26275834441185}, {"id": 139, "seek": 83636, "start": 844.12, "end": 849.4, "text": " let's run programs and see how well they run, because it takes time to build a program. And it takes", "tokens": [50752, 718, 311, 1190, 4268, 293, 536, 577, 731, 436, 1190, 11, 570, 309, 2516, 565, 281, 1322, 257, 1461, 13, 400, 309, 2516, 51016], "temperature": 0.0, "avg_logprob": -0.1417827454824296, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.26275834441185}, {"id": 140, "seek": 83636, "start": 849.4, "end": 854.6800000000001, "text": " time to run it. So you either do it very quickly, which, which means that you're doing it for small", "tokens": [51016, 565, 281, 1190, 309, 13, 407, 291, 2139, 360, 309, 588, 2661, 11, 597, 11, 597, 1355, 300, 291, 434, 884, 309, 337, 1359, 51280], "temperature": 0.0, "avg_logprob": -0.1417827454824296, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.26275834441185}, {"id": 141, "seek": 83636, "start": 854.6800000000001, "end": 860.0, "text": " little benchmarks, which are completely relevant to what we're doing, right? So then basically you learn", "tokens": [51280, 707, 43751, 11, 597, 366, 2584, 7340, 281, 437, 321, 434, 884, 11, 558, 30, 407, 550, 1936, 291, 1466, 51546], "temperature": 0.0, "avg_logprob": -0.1417827454824296, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.26275834441185}, {"id": 142, "seek": 83636, "start": 860.24, "end": 864.64, "text": " on something that has feature value distributions that have no match in what we're actually going to try to", "tokens": [51558, 322, 746, 300, 575, 4111, 2158, 37870, 300, 362, 572, 2995, 294, 437, 321, 434, 767, 516, 281, 853, 281, 51778], "temperature": 0.0, "avg_logprob": -0.1417827454824296, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.26275834441185}, {"id": 143, "seek": 86464, "start": 864.64, "end": 874.0, "text": " use it for. So we don't want to do that. Or you cannot do it. Like, it just takes too much time. So we were", "tokens": [50364, 764, 309, 337, 13, 407, 321, 500, 380, 528, 281, 360, 300, 13, 1610, 291, 2644, 360, 309, 13, 1743, 11, 309, 445, 2516, 886, 709, 565, 13, 407, 321, 645, 50832], "temperature": 0.0, "avg_logprob": -0.13805926929820667, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.028381066396832466}, {"id": 144, "seek": 86464, "start": 874.0, "end": 877.88, "text": " like, hold on a second, but we have profile information, like I talked earlier, like, we know, we collect", "tokens": [50832, 411, 11, 1797, 322, 257, 1150, 11, 457, 321, 362, 7964, 1589, 11, 411, 286, 2825, 3071, 11, 411, 11, 321, 458, 11, 321, 2500, 51026], "temperature": 0.0, "avg_logprob": -0.13805926929820667, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.028381066396832466}, {"id": 145, "seek": 86464, "start": 877.88, "end": 882.36, "text": " this profile information that tells us where the program spends time and how many iterations loops take and", "tokens": [51026, 341, 7964, 1589, 300, 5112, 505, 689, 264, 1461, 25620, 565, 293, 577, 867, 36540, 16121, 747, 293, 51250], "temperature": 0.0, "avg_logprob": -0.13805926929820667, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.028381066396832466}, {"id": 146, "seek": 86464, "start": 882.36, "end": 888.12, "text": " all of that. So can't we do something based on that that kind of like guesstimates, at least a trend, right?", "tokens": [51250, 439, 295, 300, 13, 407, 393, 380, 321, 360, 746, 2361, 322, 300, 300, 733, 295, 411, 695, 279, 372, 332, 1024, 11, 412, 1935, 257, 6028, 11, 558, 30, 51538], "temperature": 0.0, "avg_logprob": -0.13805926929820667, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.028381066396832466}, {"id": 147, "seek": 86464, "start": 888.12, "end": 893.4399999999999, "text": " Like, we don't care about absolute values, but at least something that can allow us to compare, you know, like to a", "tokens": [51538, 1743, 11, 321, 500, 380, 1127, 466, 8236, 4190, 11, 457, 412, 1935, 746, 300, 393, 2089, 505, 281, 6794, 11, 291, 458, 11, 411, 281, 257, 51804], "temperature": 0.0, "avg_logprob": -0.13805926929820667, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.028381066396832466}, {"id": 148, "seek": 89344, "start": 893.44, "end": 900.6, "text": " baseline, the results of applying a new policy. And we thought we could any kind of worked like for register", "tokens": [50364, 20518, 11, 264, 3542, 295, 9275, 257, 777, 3897, 13, 400, 321, 1194, 321, 727, 604, 733, 295, 2732, 411, 337, 7280, 50722], "temperature": 0.0, "avg_logprob": -0.12688426633851718, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.029860645532608032}, {"id": 149, "seek": 89344, "start": 900.6, "end": 908.1600000000001, "text": " location. But we ended up having to select a winning model out of like a set of models that we trained, you", "tokens": [50722, 4914, 13, 583, 321, 4590, 493, 1419, 281, 3048, 257, 8224, 2316, 484, 295, 411, 257, 992, 295, 5245, 300, 321, 8895, 11, 291, 51100], "temperature": 0.0, "avg_logprob": -0.12688426633851718, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.029860645532608032}, {"id": 150, "seek": 89344, "start": 908.1600000000001, "end": 913.84, "text": " know, like with this over synthetic reward. And we're not very happy with that. Like it's not how to put this", "tokens": [51100, 458, 11, 411, 365, 341, 670, 23420, 7782, 13, 400, 321, 434, 406, 588, 2055, 365, 300, 13, 1743, 309, 311, 406, 577, 281, 829, 341, 51384], "temperature": 0.0, "avg_logprob": -0.12688426633851718, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.029860645532608032}, {"id": 151, "seek": 89344, "start": 913.84, "end": 920.08, "text": " like, we're missing that explanatory thing of like, well, why, you know, like, so if I do it for how long do I", "tokens": [51384, 411, 11, 321, 434, 5361, 300, 9045, 4745, 551, 295, 411, 11, 731, 11, 983, 11, 291, 458, 11, 411, 11, 370, 498, 286, 360, 309, 337, 577, 938, 360, 286, 51696], "temperature": 0.0, "avg_logprob": -0.12688426633851718, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.029860645532608032}, {"id": 152, "seek": 92008, "start": 920.12, "end": 925.96, "text": " have to do it? And what do I have to look at when I look at the TensorFlow rewards and all of that? Like, what do I", "tokens": [50366, 362, 281, 360, 309, 30, 400, 437, 360, 286, 362, 281, 574, 412, 562, 286, 574, 412, 264, 37624, 17203, 293, 439, 295, 300, 30, 1743, 11, 437, 360, 286, 50658], "temperature": 0.0, "avg_logprob": -0.1690400708623293, "compression_ratio": 1.7859922178988328, "no_speech_prob": 0.02850927971303463}, {"id": 153, "seek": 92008, "start": 925.96, "end": 932.48, "text": " have to look at to know that I have to take it out and now train it or like, sorry, compare these models on on on", "tokens": [50658, 362, 281, 574, 412, 281, 458, 300, 286, 362, 281, 747, 309, 484, 293, 586, 3847, 309, 420, 411, 11, 2597, 11, 6794, 613, 5245, 322, 322, 322, 50984], "temperature": 0.0, "avg_logprob": -0.1690400708623293, "compression_ratio": 1.7859922178988328, "no_speech_prob": 0.02850927971303463}, {"id": 154, "seek": 92008, "start": 932.48, "end": 937.64, "text": " running benchmarks? There's basically a bit of a waka mall. And that's not engineering. That's waka mall, right?", "tokens": [50984, 2614, 43751, 30, 821, 311, 1936, 257, 857, 295, 257, 261, 7849, 16026, 13, 400, 300, 311, 406, 7043, 13, 663, 311, 261, 7849, 16026, 11, 558, 30, 51242], "temperature": 0.0, "avg_logprob": -0.1690400708623293, "compression_ratio": 1.7859922178988328, "no_speech_prob": 0.02850927971303463}, {"id": 155, "seek": 92008, "start": 938.08, "end": 943.64, "text": " So this is basically the main challenge for performance. And I basically like, you know, scaling this effort to more", "tokens": [51264, 407, 341, 307, 1936, 264, 2135, 3430, 337, 3389, 13, 400, 286, 1936, 411, 11, 291, 458, 11, 21589, 341, 4630, 281, 544, 51542], "temperature": 0.0, "avg_logprob": -0.1690400708623293, "compression_ratio": 1.7859922178988328, "no_speech_prob": 0.02850927971303463}, {"id": 156, "seek": 94364, "start": 943.64, "end": 954.56, "text": " performance problems. And well, knowing that there's efforts on that, of course, like, come on, okay. ML model", "tokens": [50364, 3389, 2740, 13, 400, 731, 11, 5276, 300, 456, 311, 6484, 322, 300, 11, 295, 1164, 11, 411, 11, 808, 322, 11, 1392, 13, 21601, 2316, 50910], "temperature": 0.0, "avg_logprob": -0.1984661745737834, "compression_ratio": 1.5781990521327014, "no_speech_prob": 0.012261973693966866}, {"id": 157, "seek": 94364, "start": 954.56, "end": 962.08, "text": " evaluation costs. So in the big scheme of things, when we did like in lining for size, or we did register", "tokens": [50910, 13344, 5497, 13, 407, 294, 264, 955, 12232, 295, 721, 11, 562, 321, 630, 411, 294, 19628, 337, 2744, 11, 420, 321, 630, 7280, 51286], "temperature": 0.0, "avg_logprob": -0.1984661745737834, "compression_ratio": 1.5781990521327014, "no_speech_prob": 0.012261973693966866}, {"id": 158, "seek": 94364, "start": 962.08, "end": 969.24, "text": " location, I mean, we measured like the micro measurements on how much it takes to evaluate the model. But in the big", "tokens": [51286, 4914, 11, 286, 914, 11, 321, 12690, 411, 264, 4532, 15383, 322, 577, 709, 309, 2516, 281, 13059, 264, 2316, 13, 583, 294, 264, 955, 51644], "temperature": 0.0, "avg_logprob": -0.1984661745737834, "compression_ratio": 1.5781990521327014, "no_speech_prob": 0.012261973693966866}, {"id": 159, "seek": 96924, "start": 969.28, "end": 975.12, "text": " scheme of things of like the entire compilation of a module, like of a C plus plus, basically, they kind of like goes", "tokens": [50366, 12232, 295, 721, 295, 411, 264, 2302, 40261, 295, 257, 10088, 11, 411, 295, 257, 383, 1804, 1804, 11, 1936, 11, 436, 733, 295, 411, 1709, 50658], "temperature": 0.0, "avg_logprob": -0.20888959080719752, "compression_ratio": 1.7610294117647058, "no_speech_prob": 0.01185477152466774}, {"id": 160, "seek": 96924, "start": 975.12, "end": 981.52, "text": " in the noise, like it was more like a few percent variations. And it's fine. But there's not going to be that funny if the", "tokens": [50658, 294, 264, 5658, 11, 411, 309, 390, 544, 411, 257, 1326, 3043, 17840, 13, 400, 309, 311, 2489, 13, 583, 456, 311, 406, 516, 281, 312, 300, 4074, 498, 264, 50978], "temperature": 0.0, "avg_logprob": -0.20888959080719752, "compression_ratio": 1.7610294117647058, "no_speech_prob": 0.01185477152466774}, {"id": 161, "seek": 96924, "start": 981.6, "end": 986.6, "text": " methodology, you know, like gains traction, right? There's not going to have lots of these things that take a lot of", "tokens": [50982, 24850, 11, 291, 458, 11, 411, 16823, 23558, 11, 558, 30, 821, 311, 406, 516, 281, 362, 3195, 295, 613, 721, 300, 747, 257, 688, 295, 51232], "temperature": 0.0, "avg_logprob": -0.20888959080719752, "compression_ratio": 1.7610294117647058, "no_speech_prob": 0.01185477152466774}, {"id": 162, "seek": 96924, "start": 986.6, "end": 995.16, "text": " time. Also, the size of the model, which is really the weights, seems like it was kind of surprising to us. Initially, we", "tokens": [51232, 565, 13, 2743, 11, 264, 2744, 295, 264, 2316, 11, 597, 307, 534, 264, 17443, 11, 2544, 411, 309, 390, 733, 295, 8830, 281, 505, 13, 29446, 11, 321, 51660], "temperature": 0.0, "avg_logprob": -0.20888959080719752, "compression_ratio": 1.7610294117647058, "no_speech_prob": 0.01185477152466774}, {"id": 163, "seek": 99516, "start": 995.1999999999999, "end": 1004.88, "text": " had a small one and then working with some researchers in other teams at Google, they managed to produce a much, much", "tokens": [50366, 632, 257, 1359, 472, 293, 550, 1364, 365, 512, 10309, 294, 661, 5491, 412, 3329, 11, 436, 6453, 281, 5258, 257, 709, 11, 709, 50850], "temperature": 0.0, "avg_logprob": -0.16939890952337355, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.0346725769340992}, {"id": 164, "seek": 99516, "start": 1004.88, "end": 1013.52, "text": " larger model kind of accidentally, like, which kind of like took us by surprise, like it was suddenly 11 megs, like out of", "tokens": [50850, 4833, 2316, 733, 295, 15715, 11, 411, 11, 597, 733, 295, 411, 1890, 505, 538, 6365, 11, 411, 309, 390, 5800, 2975, 10816, 82, 11, 411, 484, 295, 51282], "temperature": 0.0, "avg_logprob": -0.16939890952337355, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.0346725769340992}, {"id": 165, "seek": 99516, "start": 1013.52, "end": 1018.52, "text": " nowhere. And it's kind of funny when we're trying to optimize something for for reducing the size of either binary and", "tokens": [51282, 11159, 13, 400, 309, 311, 733, 295, 4074, 562, 321, 434, 1382, 281, 19719, 746, 337, 337, 12245, 264, 2744, 295, 2139, 17434, 293, 51532], "temperature": 0.0, "avg_logprob": -0.16939890952337355, "compression_ratio": 1.5745614035087718, "no_speech_prob": 0.0346725769340992}, {"id": 166, "seek": 101852, "start": 1018.6, "end": 1025.96, "text": " LLVM itself blew up, right? I think that these are more like things that caught us by surprise. And we, to our", "tokens": [50368, 441, 43, 53, 44, 2564, 19075, 493, 11, 558, 30, 286, 519, 300, 613, 366, 544, 411, 721, 300, 5415, 505, 538, 6365, 13, 400, 321, 11, 281, 527, 50736], "temperature": 0.0, "avg_logprob": -0.1545859598645977, "compression_ratio": 1.64, "no_speech_prob": 0.03740490972995758}, {"id": 167, "seek": 101852, "start": 1025.96, "end": 1033.36, "text": " understanding, in talking to ML experts, there's ways to mitigate this. But we kind of learned that we look a lot more", "tokens": [50736, 3701, 11, 294, 1417, 281, 21601, 8572, 11, 456, 311, 2098, 281, 27336, 341, 13, 583, 321, 733, 295, 3264, 300, 321, 574, 257, 688, 544, 51106], "temperature": 0.0, "avg_logprob": -0.1545859598645977, "compression_ratio": 1.64, "no_speech_prob": 0.03740490972995758}, {"id": 168, "seek": 101852, "start": 1033.36, "end": 1036.96, "text": " like an embedded scenario than that we imagined, basically.", "tokens": [51106, 411, 364, 16741, 9005, 813, 300, 321, 16590, 11, 1936, 13, 51286], "temperature": 0.0, "avg_logprob": -0.1545859598645977, "compression_ratio": 1.64, "no_speech_prob": 0.03740490972995758}, {"id": 169, "seek": 101852, "start": 1039.8799999999999, "end": 1046.68, "text": " So kind of like an interesting research topic, I think it's interesting at least to us as compiler engineers, but it's a", "tokens": [51432, 407, 733, 295, 411, 364, 1880, 2132, 4829, 11, 286, 519, 309, 311, 1880, 412, 1935, 281, 505, 382, 31958, 11955, 11, 457, 309, 311, 257, 51772], "temperature": 0.0, "avg_logprob": -0.1545859598645977, "compression_ratio": 1.64, "no_speech_prob": 0.03740490972995758}, {"id": 170, "seek": 104668, "start": 1046.68, "end": 1055.4, "text": " research topic for the ML community, rather. How would we know without having to actually compare the result that a", "tokens": [50364, 2132, 4829, 337, 264, 21601, 1768, 11, 2831, 13, 1012, 576, 321, 458, 1553, 1419, 281, 767, 6794, 264, 1874, 300, 257, 50800], "temperature": 0.0, "avg_logprob": -0.15784975539806279, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.0271991565823555}, {"id": 171, "seek": 104668, "start": 1055.4, "end": 1063.04, "text": " policy loses power, if you will, right? So, you know, like I was saying, people like Fuchsia, for example, train a", "tokens": [50800, 3897, 18293, 1347, 11, 498, 291, 486, 11, 558, 30, 407, 11, 291, 458, 11, 411, 286, 390, 1566, 11, 561, 411, 479, 37503, 654, 11, 337, 1365, 11, 3847, 257, 51182], "temperature": 0.0, "avg_logprob": -0.15784975539806279, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.0271991565823555}, {"id": 172, "seek": 104668, "start": 1063.04, "end": 1070.52, "text": " policy and then they just decided, well, we'll just retrain one automatically whenever we we produce a new toolchain,", "tokens": [51182, 3897, 293, 550, 436, 445, 3047, 11, 731, 11, 321, 603, 445, 1533, 7146, 472, 6772, 5699, 321, 321, 5258, 257, 777, 2290, 11509, 11, 51556], "temperature": 0.0, "avg_logprob": -0.15784975539806279, "compression_ratio": 1.519650655021834, "no_speech_prob": 0.0271991565823555}, {"id": 173, "seek": 107052, "start": 1070.52, "end": 1078.2, "text": " right? But is that overly aggressive? Or was it like about time to do that anyway? Like, it'd be great to have a signal", "tokens": [50364, 558, 30, 583, 307, 300, 24324, 10762, 30, 1610, 390, 309, 411, 466, 565, 281, 360, 300, 4033, 30, 1743, 11, 309, 1116, 312, 869, 281, 362, 257, 6358, 50748], "temperature": 0.0, "avg_logprob": -0.13521157541582662, "compression_ratio": 1.6958041958041958, "no_speech_prob": 0.03871598467230797}, {"id": 174, "seek": 107052, "start": 1078.2, "end": 1084.68, "text": " that tells you, hey, you know, hypothetically, maybe the feature value distribution changed, and it's out of the domain that", "tokens": [50748, 300, 5112, 291, 11, 4177, 11, 291, 458, 11, 24371, 22652, 11, 1310, 264, 4111, 2158, 7316, 3105, 11, 293, 309, 311, 484, 295, 264, 9274, 300, 51072], "temperature": 0.0, "avg_logprob": -0.13521157541582662, "compression_ratio": 1.6958041958041958, "no_speech_prob": 0.03871598467230797}, {"id": 175, "seek": 107052, "start": 1084.68, "end": 1090.0, "text": " actually the model was trained on. So hint hint nudge nudge, maybe it's time to train. But we don't know if that's", "tokens": [51072, 767, 264, 2316, 390, 8895, 322, 13, 407, 12075, 12075, 297, 16032, 297, 16032, 11, 1310, 309, 311, 565, 281, 3847, 13, 583, 321, 500, 380, 458, 498, 300, 311, 51338], "temperature": 0.0, "avg_logprob": -0.13521157541582662, "compression_ratio": 1.6958041958041958, "no_speech_prob": 0.03871598467230797}, {"id": 176, "seek": 107052, "start": 1090.0, "end": 1095.4, "text": " actually what the indicator is. So that's what I say. I think it's an interesting topic that would be valuable to us, because", "tokens": [51338, 767, 437, 264, 16961, 307, 13, 407, 300, 311, 437, 286, 584, 13, 286, 519, 309, 311, 364, 1880, 4829, 300, 576, 312, 8263, 281, 505, 11, 570, 51608], "temperature": 0.0, "avg_logprob": -0.13521157541582662, "compression_ratio": 1.6958041958041958, "no_speech_prob": 0.03871598467230797}, {"id": 177, "seek": 109540, "start": 1095.4, "end": 1101.68, "text": " it was give us an early indicator purely based on compiling, right? We can run the compiler and just see these values as you", "tokens": [50364, 309, 390, 976, 505, 364, 2440, 16961, 17491, 2361, 322, 715, 4883, 11, 558, 30, 492, 393, 1190, 264, 31958, 293, 445, 536, 613, 4190, 382, 291, 50678], "temperature": 0.0, "avg_logprob": -0.16231262418958875, "compression_ratio": 1.5168067226890756, "no_speech_prob": 0.06839554756879807}, {"id": 178, "seek": 109540, "start": 1101.68, "end": 1112.2, "text": " compile. You don't have to like do benchmarking for for for that. Oh, so in retrospect, I really so this is like honest", "tokens": [50678, 31413, 13, 509, 500, 380, 362, 281, 411, 360, 18927, 278, 337, 337, 337, 300, 13, 876, 11, 370, 294, 34997, 11, 286, 534, 370, 341, 307, 411, 3245, 51204], "temperature": 0.0, "avg_logprob": -0.16231262418958875, "compression_ratio": 1.5168067226890756, "no_speech_prob": 0.06839554756879807}, {"id": 179, "seek": 109540, "start": 1112.2, "end": 1119.48, "text": " truth. The first statement is true. We thought that right, like we are convinced that ML is magical. And we will get", "tokens": [51204, 3494, 13, 440, 700, 5629, 307, 2074, 13, 492, 1194, 300, 558, 11, 411, 321, 366, 12561, 300, 21601, 307, 12066, 13, 400, 321, 486, 483, 51568], "temperature": 0.0, "avg_logprob": -0.16231262418958875, "compression_ratio": 1.5168067226890756, "no_speech_prob": 0.06839554756879807}, {"id": 180, "seek": 111948, "start": 1119.48, "end": 1125.44, "text": " these policies that are awesome. And there will be at least not regressing and you know, like improving things and there will", "tokens": [50364, 613, 7657, 300, 366, 3476, 13, 400, 456, 486, 312, 412, 1935, 406, 1121, 18605, 293, 291, 458, 11, 411, 11470, 721, 293, 456, 486, 50662], "temperature": 0.0, "avg_logprob": -0.12413676579793294, "compression_ratio": 1.9018867924528302, "no_speech_prob": 0.12282933294773102}, {"id": 181, "seek": 111948, "start": 1125.44, "end": 1132.3600000000001, "text": " be no regressions and things will be great. And then we saw that all of them have the typical pattern that we have also in", "tokens": [50662, 312, 572, 1121, 735, 626, 293, 721, 486, 312, 869, 13, 400, 550, 321, 1866, 300, 439, 295, 552, 362, 264, 7476, 5102, 300, 321, 362, 611, 294, 51008], "temperature": 0.0, "avg_logprob": -0.12413676579793294, "compression_ratio": 1.9018867924528302, "no_speech_prob": 0.12282933294773102}, {"id": 182, "seek": 111948, "start": 1132.3600000000001, "end": 1140.84, "text": " manually written heuristics, which is, you know, some things regress, some things improve. So that's all things are, I suppose. And", "tokens": [51008, 16945, 3720, 415, 374, 6006, 11, 597, 307, 11, 291, 458, 11, 512, 721, 1121, 735, 11, 512, 721, 3470, 13, 407, 300, 311, 439, 721, 366, 11, 286, 7297, 13, 400, 51432], "temperature": 0.0, "avg_logprob": -0.12413676579793294, "compression_ratio": 1.9018867924528302, "no_speech_prob": 0.12282933294773102}, {"id": 183, "seek": 111948, "start": 1140.84, "end": 1145.96, "text": " maybe we can do something better than than that with additional policies that select the right one. But that was a bit of a", "tokens": [51432, 1310, 321, 393, 360, 746, 1101, 813, 813, 300, 365, 4497, 7657, 300, 3048, 264, 558, 472, 13, 583, 300, 390, 257, 857, 295, 257, 51688], "temperature": 0.0, "avg_logprob": -0.12413676579793294, "compression_ratio": 1.9018867924528302, "no_speech_prob": 0.12282933294773102}, {"id": 184, "seek": 114596, "start": 1145.96, "end": 1157.8, "text": " surprise to us. Okay, performance. So like I was saying, I guess performance is some issues. But we went ahead and like,", "tokens": [50364, 6365, 281, 505, 13, 1033, 11, 3389, 13, 407, 411, 286, 390, 1566, 11, 286, 2041, 3389, 307, 512, 2663, 13, 583, 321, 1437, 2286, 293, 411, 11, 50956], "temperature": 0.0, "avg_logprob": -0.2149524893811954, "compression_ratio": 1.5450819672131149, "no_speech_prob": 0.03865625709295273}, {"id": 185, "seek": 114596, "start": 1158.4, "end": 1168.64, "text": " looked at like, where does the train model find opportunities for additional savings, right? And taking a step back. So what do I do as a", "tokens": [50986, 2956, 412, 411, 11, 689, 775, 264, 3847, 2316, 915, 4786, 337, 4497, 13454, 11, 558, 30, 400, 1940, 257, 1823, 646, 13, 407, 437, 360, 286, 360, 382, 257, 51498], "temperature": 0.0, "avg_logprob": -0.2149524893811954, "compression_ratio": 1.5450819672131149, "no_speech_prob": 0.03865625709295273}, {"id": 186, "seek": 114596, "start": 1168.64, "end": 1175.94, "text": " compiler engineer in these sort of cases, like I look with Linux Perftool at, you know, runtime information. And I see", "tokens": [51498, 31958, 11403, 294, 613, 1333, 295, 3331, 11, 411, 286, 574, 365, 18734, 3026, 844, 1092, 412, 11, 291, 458, 11, 34474, 1589, 13, 400, 286, 536, 51863], "temperature": 0.0, "avg_logprob": -0.2149524893811954, "compression_ratio": 1.5450819672131149, "no_speech_prob": 0.03865625709295273}, {"id": 187, "seek": 117594, "start": 1175.94, "end": 1182.22, "text": " where it's read. So where there's hotspots. And then I think really hard and look at the compiler and why it made those decisions.", "tokens": [50364, 689, 309, 311, 1401, 13, 407, 689, 456, 311, 36121, 79, 1971, 13, 400, 550, 286, 519, 534, 1152, 293, 574, 412, 264, 31958, 293, 983, 309, 1027, 729, 5327, 13, 50678], "temperature": 0.0, "avg_logprob": -0.12127133419639186, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.04245120659470558}, {"id": 188, "seek": 117594, "start": 1182.66, "end": 1190.5, "text": " And I go and fix that. And then the red turns gray or green and sweet, right? And then I have to do it again and again until I make", "tokens": [50700, 400, 286, 352, 293, 3191, 300, 13, 400, 550, 264, 2182, 4523, 10855, 420, 3092, 293, 3844, 11, 558, 30, 400, 550, 286, 362, 281, 360, 309, 797, 293, 797, 1826, 286, 652, 51092], "temperature": 0.0, "avg_logprob": -0.12127133419639186, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.04245120659470558}, {"id": 189, "seek": 117594, "start": 1190.5, "end": 1196.9, "text": " sure that there's no regressions in other parts of the code base. But that is basically what you do in that case. So when we looked", "tokens": [51092, 988, 300, 456, 311, 572, 1121, 735, 626, 294, 661, 3166, 295, 264, 3089, 3096, 13, 583, 300, 307, 1936, 437, 291, 360, 294, 300, 1389, 13, 407, 562, 321, 2956, 51412], "temperature": 0.0, "avg_logprob": -0.12127133419639186, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.04245120659470558}, {"id": 190, "seek": 117594, "start": 1196.9, "end": 1204.98, "text": " at like functions that we had both indicators in the reward signal as poor as it was. But I mean, it was indicating that, you", "tokens": [51412, 412, 411, 6828, 300, 321, 632, 1293, 22176, 294, 264, 7782, 6358, 382, 4716, 382, 309, 390, 13, 583, 286, 914, 11, 309, 390, 25604, 300, 11, 291, 51816], "temperature": 0.0, "avg_logprob": -0.12127133419639186, "compression_ratio": 1.8181818181818181, "no_speech_prob": 0.04245120659470558}, {"id": 191, "seek": 120498, "start": 1204.98, "end": 1210.82, "text": " know, he's doing better. And we looked also empirically at them like, and yeah, they were doing better. And we're like, well, why? Right?", "tokens": [50364, 458, 11, 415, 311, 884, 1101, 13, 400, 321, 2956, 611, 25790, 984, 412, 552, 411, 11, 293, 1338, 11, 436, 645, 884, 1101, 13, 400, 321, 434, 411, 11, 731, 11, 983, 30, 1779, 30, 50656], "temperature": 0.0, "avg_logprob": -0.17256225858415877, "compression_ratio": 1.908450704225352, "no_speech_prob": 0.022678976878523827}, {"id": 192, "seek": 120498, "start": 1210.82, "end": 1217.58, "text": " So we look at the code and we couldn't tell why like we look at with Linux Perft and there was nothing shining, right? I mean, the code was", "tokens": [50656, 407, 321, 574, 412, 264, 3089, 293, 321, 2809, 380, 980, 983, 411, 321, 574, 412, 365, 18734, 3026, 844, 293, 456, 390, 1825, 18269, 11, 558, 30, 286, 914, 11, 264, 3089, 390, 50994], "temperature": 0.0, "avg_logprob": -0.17256225858415877, "compression_ratio": 1.908450704225352, "no_speech_prob": 0.022678976878523827}, {"id": 193, "seek": 120498, "start": 1217.58, "end": 1225.5, "text": " different, right? Like we could tell that like, you know, pure line by line, you know, deep, it was different, but nothing was", "tokens": [50994, 819, 11, 558, 30, 1743, 321, 727, 980, 300, 411, 11, 291, 458, 11, 6075, 1622, 538, 1622, 11, 291, 458, 11, 2452, 11, 309, 390, 819, 11, 457, 1825, 390, 51390], "temperature": 0.0, "avg_logprob": -0.17256225858415877, "compression_ratio": 1.908450704225352, "no_speech_prob": 0.022678976878523827}, {"id": 194, "seek": 120498, "start": 1225.5, "end": 1231.34, "text": " popping. And then we did a bit more investigation. And it turns out that the mail was finding or like, you know, the enforcement learning", "tokens": [51390, 18374, 13, 400, 550, 321, 630, 257, 857, 544, 9627, 13, 400, 309, 4523, 484, 300, 264, 10071, 390, 5006, 420, 411, 11, 291, 458, 11, 264, 11475, 2539, 51682], "temperature": 0.0, "avg_logprob": -0.17256225858415877, "compression_ratio": 1.908450704225352, "no_speech_prob": 0.022678976878523827}, {"id": 195, "seek": 123134, "start": 1231.34, "end": 1239.02, "text": " algorithm was finding opportunities in lukewarm parts of the code. So these are things that kind of like end up being like a peanut", "tokens": [50364, 9284, 390, 5006, 4786, 294, 10438, 330, 49240, 3166, 295, 264, 3089, 13, 407, 613, 366, 721, 300, 733, 295, 411, 917, 493, 885, 411, 257, 19209, 50748], "temperature": 0.0, "avg_logprob": -0.12960917450660883, "compression_ratio": 1.7180327868852459, "no_speech_prob": 0.08482638746500015}, {"id": 196, "seek": 123134, "start": 1239.02, "end": 1248.3799999999999, "text": " butter effect, right? Like I mean, nothing in particular is bad, or is improved categorically. But in aggregate, you can, you know, you", "tokens": [50748, 5517, 1802, 11, 558, 30, 1743, 286, 914, 11, 1825, 294, 1729, 307, 1578, 11, 420, 307, 9689, 19250, 984, 13, 583, 294, 26118, 11, 291, 393, 11, 291, 458, 11, 291, 51216], "temperature": 0.0, "avg_logprob": -0.12960917450660883, "compression_ratio": 1.7180327868852459, "no_speech_prob": 0.08482638746500015}, {"id": 197, "seek": 123134, "start": 1248.3799999999999, "end": 1255.58, "text": " get like a spread effect that is actually amounting to something. Great, but it's possible that that something is actually just noise,", "tokens": [51216, 483, 411, 257, 3974, 1802, 300, 307, 767, 2372, 278, 281, 746, 13, 3769, 11, 457, 309, 311, 1944, 300, 300, 746, 307, 767, 445, 5658, 11, 51576], "temperature": 0.0, "avg_logprob": -0.12960917450660883, "compression_ratio": 1.7180327868852459, "no_speech_prob": 0.08482638746500015}, {"id": 198, "seek": 123134, "start": 1255.58, "end": 1261.1399999999999, "text": " right? And I mean, today, we don't have a way of capturing that. Like we just say, Hey, here's the profile that we got by", "tokens": [51576, 558, 30, 400, 286, 914, 11, 965, 11, 321, 500, 380, 362, 257, 636, 295, 23384, 300, 13, 1743, 321, 445, 584, 11, 1911, 11, 510, 311, 264, 7964, 300, 321, 658, 538, 51854], "temperature": 0.0, "avg_logprob": -0.12960917450660883, "compression_ratio": 1.7180327868852459, "no_speech_prob": 0.08482638746500015}, {"id": 199, "seek": 126114, "start": 1261.14, "end": 1268.0600000000002, "text": " collecting it from from a running binary. And then I'm as is great. Okay, here I found an opportunity and actually that's just purely", "tokens": [50364, 12510, 309, 490, 490, 257, 2614, 17434, 13, 400, 550, 286, 478, 382, 307, 869, 13, 1033, 11, 510, 286, 1352, 364, 2650, 293, 767, 300, 311, 445, 17491, 50710], "temperature": 0.0, "avg_logprob": -0.17826975867861794, "compression_ratio": 1.5889328063241106, "no_speech_prob": 0.01019561942666769}, {"id": 200, "seek": 126114, "start": 1268.0600000000002, "end": 1276.9, "text": " noise, right? So this is the part that I kind of had a bit of a trouble like how am I going to title it or anything. So what I ended up", "tokens": [50710, 5658, 11, 558, 30, 407, 341, 307, 264, 644, 300, 286, 733, 295, 632, 257, 857, 295, 257, 5253, 411, 577, 669, 286, 516, 281, 4876, 309, 420, 1340, 13, 407, 437, 286, 4590, 493, 51152], "temperature": 0.0, "avg_logprob": -0.17826975867861794, "compression_ratio": 1.5889328063241106, "no_speech_prob": 0.01019561942666769}, {"id": 201, "seek": 126114, "start": 1276.9, "end": 1285.38, "text": " doing is just saying what I wanted to say. So as a compiler engineer, so as a developer in the open source, like as an LLVM compiler", "tokens": [51152, 884, 307, 445, 1566, 437, 286, 1415, 281, 584, 13, 407, 382, 257, 31958, 11403, 11, 370, 382, 257, 10754, 294, 264, 1269, 4009, 11, 411, 382, 364, 441, 43, 53, 44, 31958, 51576], "temperature": 0.0, "avg_logprob": -0.17826975867861794, "compression_ratio": 1.5889328063241106, "no_speech_prob": 0.01019561942666769}, {"id": 202, "seek": 128538, "start": 1285.42, "end": 1292.46, "text": " engineer, if this pans out more, like, you know, if you get more passes and the mail is, you know, like actually delivering more and", "tokens": [50366, 11403, 11, 498, 341, 32905, 484, 544, 11, 411, 11, 291, 458, 11, 498, 291, 483, 544, 11335, 293, 264, 10071, 307, 11, 291, 458, 11, 411, 767, 14666, 544, 293, 50718], "temperature": 0.0, "avg_logprob": -0.1718607322842467, "compression_ratio": 1.6793248945147679, "no_speech_prob": 0.027366606518626213}, {"id": 203, "seek": 128538, "start": 1292.46, "end": 1301.14, "text": " more value to us, right? What's going to happen, right? So, well, on the plus side, I spent less time, you know, like tuning and", "tokens": [50718, 544, 2158, 281, 505, 11, 558, 30, 708, 311, 516, 281, 1051, 11, 558, 30, 407, 11, 731, 11, 322, 264, 1804, 1252, 11, 286, 4418, 1570, 565, 11, 291, 458, 11, 411, 15164, 293, 51152], "temperature": 0.0, "avg_logprob": -0.1718607322842467, "compression_ratio": 1.6793248945147679, "no_speech_prob": 0.027366606518626213}, {"id": 204, "seek": 128538, "start": 1301.14, "end": 1309.3400000000001, "text": " twizzling with thresholds and other flags that I have today in the compiler, because I actually can can use a automatic feedback driven,", "tokens": [51152, 683, 8072, 1688, 365, 14678, 82, 293, 661, 23265, 300, 286, 362, 965, 294, 264, 31958, 11, 570, 286, 767, 393, 393, 764, 257, 12509, 5824, 9555, 11, 51562], "temperature": 0.0, "avg_logprob": -0.1718607322842467, "compression_ratio": 1.6793248945147679, "no_speech_prob": 0.027366606518626213}, {"id": 205, "seek": 130934, "start": 1309.62, "end": 1316.4599999999998, "text": " self improving methodology, right? Like reinforcement learning. Okay, I think that's great, because I can actually focus on understanding", "tokens": [50378, 2698, 11470, 24850, 11, 558, 30, 1743, 29280, 2539, 13, 1033, 11, 286, 519, 300, 311, 869, 11, 570, 286, 393, 767, 1879, 322, 3701, 50720], "temperature": 0.0, "avg_logprob": -0.182478379667475, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.016362452879548073}, {"id": 206, "seek": 130934, "start": 1316.4599999999998, "end": 1321.82, "text": " what actually matters, right? Like for for driving that performance, like what features are important stuff like that.", "tokens": [50720, 437, 767, 7001, 11, 558, 30, 1743, 337, 337, 4840, 300, 3389, 11, 411, 437, 4122, 366, 1021, 1507, 411, 300, 13, 50988], "temperature": 0.0, "avg_logprob": -0.182478379667475, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.016362452879548073}, {"id": 207, "seek": 130934, "start": 1323.74, "end": 1331.58, "text": " The barrier to entry though might change. So today you can use like, you know, like, you know, cheap, not this one, but a cheap machine,", "tokens": [51084, 440, 13357, 281, 8729, 1673, 1062, 1319, 13, 407, 965, 291, 393, 764, 411, 11, 291, 458, 11, 411, 11, 291, 458, 11, 7084, 11, 406, 341, 472, 11, 457, 257, 7084, 3479, 11, 51476], "temperature": 0.0, "avg_logprob": -0.182478379667475, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.016362452879548073}, {"id": 208, "seek": 133158, "start": 1331.58, "end": 1343.86, "text": " right? And compile the compiler and look at performance, you know, like optimization problems, and it's all fine. And ML, at least my view of it is", "tokens": [50364, 558, 30, 400, 31413, 264, 31958, 293, 574, 412, 3389, 11, 291, 458, 11, 411, 19618, 2740, 11, 293, 309, 311, 439, 2489, 13, 400, 21601, 11, 412, 1935, 452, 1910, 295, 309, 307, 50978], "temperature": 0.0, "avg_logprob": -0.14541334765298025, "compression_ratio": 1.6091954022988506, "no_speech_prob": 0.018877584487199783}, {"id": 209, "seek": 133158, "start": 1343.86, "end": 1349.74, "text": " that it has this risk of like quickly skidding into like, Oh, you need a farm of computers. And today, that's not the case, like I was", "tokens": [50978, 300, 309, 575, 341, 3148, 295, 411, 2661, 1110, 327, 3584, 666, 411, 11, 876, 11, 291, 643, 257, 5421, 295, 10807, 13, 400, 965, 11, 300, 311, 406, 264, 1389, 11, 411, 286, 390, 51272], "temperature": 0.0, "avg_logprob": -0.14541334765298025, "compression_ratio": 1.6091954022988506, "no_speech_prob": 0.018877584487199783}, {"id": 210, "seek": 133158, "start": 1349.74, "end": 1356.86, "text": " saying, like, with what we've been doing, the models are small. So we didn't hit that problem. But that's a consideration, right? Like, I", "tokens": [51272, 1566, 11, 411, 11, 365, 437, 321, 600, 668, 884, 11, 264, 5245, 366, 1359, 13, 407, 321, 994, 380, 2045, 300, 1154, 13, 583, 300, 311, 257, 12381, 11, 558, 30, 1743, 11, 286, 51628], "temperature": 0.0, "avg_logprob": -0.14541334765298025, "compression_ratio": 1.6091954022988506, "no_speech_prob": 0.018877584487199783}, {"id": 211, "seek": 135686, "start": 1356.86, "end": 1368.06, "text": " mean, is it going to be harder for, you know, the compiler engineer aspirant of the future to enter the field or what? The mental", "tokens": [50364, 914, 11, 307, 309, 516, 281, 312, 6081, 337, 11, 291, 458, 11, 264, 31958, 11403, 20003, 394, 295, 264, 2027, 281, 3242, 264, 2519, 420, 437, 30, 440, 4973, 50924], "temperature": 0.0, "avg_logprob": -0.16840063095092772, "compression_ratio": 1.6208333333333333, "no_speech_prob": 0.009945333935320377}, {"id": 212, "seek": 135686, "start": 1368.06, "end": 1372.74, "text": " model is kind of different. You can have hinting at that before, right? Like, I mean, like, you don't think of the problem like you", "tokens": [50924, 2316, 307, 733, 295, 819, 13, 509, 393, 362, 12075, 278, 412, 300, 949, 11, 558, 30, 1743, 11, 286, 914, 11, 411, 11, 291, 500, 380, 519, 295, 264, 1154, 411, 291, 51158], "temperature": 0.0, "avg_logprob": -0.16840063095092772, "compression_ratio": 1.6208333333333333, "no_speech_prob": 0.009945333935320377}, {"id": 213, "seek": 135686, "start": 1372.74, "end": 1379.6999999999998, "text": " were before, you look at Linux perf and you find hotspots and stuff like that. But that's fine. Different, different just means", "tokens": [51158, 645, 949, 11, 291, 574, 412, 18734, 13826, 293, 291, 915, 36121, 79, 1971, 293, 1507, 411, 300, 13, 583, 300, 311, 2489, 13, 20825, 11, 819, 445, 1355, 51506], "temperature": 0.0, "avg_logprob": -0.16840063095092772, "compression_ratio": 1.6208333333333333, "no_speech_prob": 0.009945333935320377}, {"id": 214, "seek": 137970, "start": 1379.94, "end": 1387.02, "text": " different. It means like, you know, we can adapt, right? This is my pet peeve. Like the when you look as a compiler engineer, the ML", "tokens": [50376, 819, 13, 467, 1355, 411, 11, 291, 458, 11, 321, 393, 6231, 11, 558, 30, 639, 307, 452, 3817, 21343, 303, 13, 1743, 264, 562, 291, 574, 382, 257, 31958, 11403, 11, 264, 21601, 50730], "temperature": 0.0, "avg_logprob": -0.1663541005070048, "compression_ratio": 1.7891156462585034, "no_speech_prob": 0.09389842301607132}, {"id": 215, "seek": 137970, "start": 1387.02, "end": 1392.06, "text": " frameworks, they are scary, because they're like very low level and they talk about things that I don't understand. And they're not", "tokens": [50730, 29834, 11, 436, 366, 6958, 11, 570, 436, 434, 411, 588, 2295, 1496, 293, 436, 751, 466, 721, 300, 286, 500, 380, 1223, 13, 400, 436, 434, 406, 50982], "temperature": 0.0, "avg_logprob": -0.1663541005070048, "compression_ratio": 1.7891156462585034, "no_speech_prob": 0.09389842301607132}, {"id": 216, "seek": 137970, "start": 1392.06, "end": 1397.66, "text": " talking about things that I want them to talk about. And we're not sure yet where that interface is. And I think that part of the", "tokens": [50982, 1417, 466, 721, 300, 286, 528, 552, 281, 751, 466, 13, 400, 321, 434, 406, 988, 1939, 689, 300, 9226, 307, 13, 400, 286, 519, 300, 644, 295, 264, 51262], "temperature": 0.0, "avg_logprob": -0.1663541005070048, "compression_ratio": 1.7891156462585034, "no_speech_prob": 0.09389842301607132}, {"id": 217, "seek": 137970, "start": 1397.7, "end": 1406.5800000000002, "text": " the goal of the project is to kind of like figure out what that interface is. But today, it's like that. Like I was saying, there's", "tokens": [51264, 264, 3387, 295, 264, 1716, 307, 281, 733, 295, 411, 2573, 484, 437, 300, 9226, 307, 13, 583, 965, 11, 309, 311, 411, 300, 13, 1743, 286, 390, 1566, 11, 456, 311, 51708], "temperature": 0.0, "avg_logprob": -0.1663541005070048, "compression_ratio": 1.7891156462585034, "no_speech_prob": 0.09389842301607132}, {"id": 218, "seek": 140658, "start": 1406.58, "end": 1412.58, "text": " links in the, all the links are actually in the, in the deck. And that's the end of my presentation. Yeah, questions.", "tokens": [50364, 6123, 294, 264, 11, 439, 264, 6123, 366, 767, 294, 264, 11, 294, 264, 9341, 13, 400, 300, 311, 264, 917, 295, 452, 5860, 13, 865, 11, 1651, 13, 50664], "temperature": 0.0, "avg_logprob": -0.20775673466344033, "compression_ratio": 1.4846625766871167, "no_speech_prob": 0.011617080308496952}, {"id": 219, "seek": 140658, "start": 1421.46, "end": 1430.82, "text": " So the optimizations that you find using machine learning in code, can they also be put in LLVM itself without using machine", "tokens": [51108, 407, 264, 5028, 14455, 300, 291, 915, 1228, 3479, 2539, 294, 3089, 11, 393, 436, 611, 312, 829, 294, 441, 43, 53, 44, 2564, 1553, 1228, 3479, 51576], "temperature": 0.0, "avg_logprob": -0.20775673466344033, "compression_ratio": 1.4846625766871167, "no_speech_prob": 0.011617080308496952}, {"id": 220, "seek": 143082, "start": 1430.82, "end": 1439.3799999999999, "text": " learning? Or is it, can it only be learned using machine language because it is using the data, for instance, optimizations?", "tokens": [50364, 2539, 30, 1610, 307, 309, 11, 393, 309, 787, 312, 3264, 1228, 3479, 2856, 570, 309, 307, 1228, 264, 1412, 11, 337, 5197, 11, 5028, 14455, 30, 50792], "temperature": 0.0, "avg_logprob": -0.23177017798790564, "compression_ratio": 1.5796178343949046, "no_speech_prob": 0.07986702024936676}, {"id": 221, "seek": 143082, "start": 1444.5, "end": 1453.9399999999998, "text": " So the optimizations, can they also be put in LLVM itself without using machine learning? Is it missing up? Is LLVM missing", "tokens": [51048, 407, 264, 5028, 14455, 11, 393, 436, 611, 312, 829, 294, 441, 43, 53, 44, 2564, 1553, 1228, 3479, 2539, 30, 1119, 309, 5361, 493, 30, 1119, 441, 43, 53, 44, 5361, 51520], "temperature": 0.0, "avg_logprob": -0.23177017798790564, "compression_ratio": 1.5796178343949046, "no_speech_prob": 0.07986702024936676}, {"id": 222, "seek": 145394, "start": 1453.94, "end": 1456.1000000000001, "text": " up? The optimizations that you find using machine learning?", "tokens": [50364, 493, 30, 440, 5028, 14455, 300, 291, 915, 1228, 3479, 2539, 30, 50472], "temperature": 0.0, "avg_logprob": -0.21073545728410994, "compression_ratio": 1.6996197718631179, "no_speech_prob": 0.088600292801857}, {"id": 223, "seek": 145394, "start": 1457.5800000000002, "end": 1464.3400000000001, "text": " Right. So I'll say just to make sure that you're saying like the types of optimizations that we learned, could we just do them as", "tokens": [50546, 1779, 13, 407, 286, 603, 584, 445, 281, 652, 988, 300, 291, 434, 1566, 411, 264, 3467, 295, 5028, 14455, 300, 321, 3264, 11, 727, 321, 445, 360, 552, 382, 50884], "temperature": 0.0, "avg_logprob": -0.21073545728410994, "compression_ratio": 1.6996197718631179, "no_speech_prob": 0.088600292801857}, {"id": 224, "seek": 145394, "start": 1464.3400000000001, "end": 1472.46, "text": " normal imperative code back in LLVM? Some yes, some no. So especially the, when we looked at the type of optimizations that the size", "tokens": [50884, 2710, 32490, 3089, 646, 294, 441, 43, 53, 44, 30, 2188, 2086, 11, 512, 572, 13, 407, 2318, 264, 11, 562, 321, 2956, 412, 264, 2010, 295, 5028, 14455, 300, 264, 2744, 51290], "temperature": 0.0, "avg_logprob": -0.21073545728410994, "compression_ratio": 1.6996197718631179, "no_speech_prob": 0.088600292801857}, {"id": 225, "seek": 145394, "start": 1472.8600000000001, "end": 1481.02, "text": " optimizer was doing, means some decisions are unexplainable, right? To do the wrong thing early on, but just because he kept", "tokens": [51310, 5028, 6545, 390, 884, 11, 1355, 512, 5327, 366, 11572, 34821, 712, 11, 558, 30, 1407, 360, 264, 2085, 551, 2440, 322, 11, 457, 445, 570, 415, 4305, 51718], "temperature": 0.0, "avg_logprob": -0.21073545728410994, "compression_ratio": 1.6996197718631179, "no_speech_prob": 0.088600292801857}, {"id": 226, "seek": 148102, "start": 1481.02, "end": 1486.74, "text": " learning the statistic by taking that path later is going to be all right. So that's kind of hard to translate into imperative", "tokens": [50364, 2539, 264, 29588, 538, 1940, 300, 3100, 1780, 307, 516, 281, 312, 439, 558, 13, 407, 300, 311, 733, 295, 1152, 281, 13799, 666, 32490, 50650], "temperature": 0.0, "avg_logprob": -0.19317342879924368, "compression_ratio": 1.6713615023474178, "no_speech_prob": 0.018210669979453087}, {"id": 227, "seek": 148102, "start": 1486.74, "end": 1494.54, "text": " code, I think. But some, some might be. What I'm saying is that the hope is that we, like so far in the evidence is that we kind of,", "tokens": [50650, 3089, 11, 286, 519, 13, 583, 512, 11, 512, 1062, 312, 13, 708, 286, 478, 1566, 307, 300, 264, 1454, 307, 300, 321, 11, 411, 370, 1400, 294, 264, 4467, 307, 300, 321, 733, 295, 11, 51040], "temperature": 0.0, "avg_logprob": -0.19317342879924368, "compression_ratio": 1.6713615023474178, "no_speech_prob": 0.018210669979453087}, {"id": 228, "seek": 148102, "start": 1495.06, "end": 1496.3, "text": " it's hard to do that.", "tokens": [51066, 309, 311, 1152, 281, 360, 300, 13, 51128], "temperature": 0.0, "avg_logprob": -0.19317342879924368, "compression_ratio": 1.6713615023474178, "no_speech_prob": 0.018210669979453087}, {"id": 229, "seek": 148102, "start": 1500.06, "end": 1502.94, "text": " We only have one time for one more question, one more question after this.", "tokens": [51316, 492, 787, 362, 472, 565, 337, 472, 544, 1168, 11, 472, 544, 1168, 934, 341, 13, 51460], "temperature": 0.0, "avg_logprob": -0.19317342879924368, "compression_ratio": 1.6713615023474178, "no_speech_prob": 0.018210669979453087}, {"id": 230, "seek": 150294, "start": 1503.94, "end": 1512.94, "text": " Hi, thanks for your great talk. You've been talking about applying these techniques to clang and traditional compilers targeting,", "tokens": [50414, 2421, 11, 3231, 337, 428, 869, 751, 13, 509, 600, 668, 1417, 466, 9275, 613, 7512, 281, 596, 656, 293, 5164, 715, 388, 433, 17918, 11, 50864], "temperature": 0.0, "avg_logprob": -0.31226979026311563, "compression_ratio": 1.5023255813953489, "no_speech_prob": 0.026947056874632835}, {"id": 231, "seek": 150294, "start": 1512.94, "end": 1523.94, "text": " well, executables in the usual sense. What about machine learning compilers? So I'm thinking, yeah, applying ML to ML. I know there is some research", "tokens": [50864, 731, 11, 7568, 2965, 294, 264, 7713, 2020, 13, 708, 466, 3479, 2539, 715, 388, 433, 30, 407, 286, 478, 1953, 11, 1338, 11, 9275, 21601, 281, 21601, 13, 286, 458, 456, 307, 512, 2132, 51414], "temperature": 0.0, "avg_logprob": -0.31226979026311563, "compression_ratio": 1.5023255813953489, "no_speech_prob": 0.026947056874632835}, {"id": 232, "seek": 150294, "start": 1523.94, "end": 1526.8200000000002, "text": " in that. Do your techniques connect to that?", "tokens": [51414, 294, 300, 13, 1144, 428, 7512, 1745, 281, 300, 30, 51558], "temperature": 0.0, "avg_logprob": -0.31226979026311563, "compression_ratio": 1.5023255813953489, "no_speech_prob": 0.026947056874632835}, {"id": 233, "seek": 152682, "start": 1527.82, "end": 1528.7, "text": " Yes.", "tokens": [50414, 1079, 13, 50458], "temperature": 0.0, "avg_logprob": -0.23449035220675998, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.011474533937871456}, {"id": 234, "seek": 152682, "start": 1531.82, "end": 1542.82, "text": " So applying ML to ML compilers, right? I mean, MLIR, for example, is part of the LLVM project. And I think that there is work trying to do that too.", "tokens": [50614, 407, 9275, 21601, 281, 21601, 715, 388, 433, 11, 558, 30, 286, 914, 11, 21601, 7740, 11, 337, 1365, 11, 307, 644, 295, 264, 441, 43, 53, 44, 1716, 13, 400, 286, 519, 300, 456, 307, 589, 1382, 281, 360, 300, 886, 13, 51164], "temperature": 0.0, "avg_logprob": -0.23449035220675998, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.011474533937871456}, {"id": 235, "seek": 152682, "start": 1542.82, "end": 1550.82, "text": " And the infrastructure would be the same because I mean, it's all the same code, right? I'm not an ML for ML compilers compiler engineer. The word compiler appears", "tokens": [51164, 400, 264, 6896, 576, 312, 264, 912, 570, 286, 914, 11, 309, 311, 439, 264, 912, 3089, 11, 558, 30, 286, 478, 406, 364, 21601, 337, 21601, 715, 388, 433, 31958, 11403, 13, 440, 1349, 31958, 7038, 51564], "temperature": 0.0, "avg_logprob": -0.23449035220675998, "compression_ratio": 1.5771144278606966, "no_speech_prob": 0.011474533937871456}, {"id": 236, "seek": 155082, "start": 1550.82, "end": 1558.82, "text": " way too many times, but we work with those people, like, so I don't see a reason they cannot apply this. I think that the domain though is,", "tokens": [50364, 636, 886, 867, 1413, 11, 457, 321, 589, 365, 729, 561, 11, 411, 11, 370, 286, 500, 380, 536, 257, 1778, 436, 2644, 3079, 341, 13, 286, 519, 300, 264, 9274, 1673, 307, 11, 50764], "temperature": 0.0, "avg_logprob": -0.13937259250217013, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.07616488635540009}, {"id": 237, "seek": 155082, "start": 1558.82, "end": 1569.82, "text": " has its own idiosyncrasies that you cannot just take exactly what it is and apply it over, but the tooling would be the same. Does that make sense? Okay.", "tokens": [50764, 575, 1080, 1065, 4496, 2717, 34015, 3906, 530, 300, 291, 2644, 445, 747, 2293, 437, 309, 307, 293, 3079, 309, 670, 11, 457, 264, 46593, 576, 312, 264, 912, 13, 4402, 300, 652, 2020, 30, 1033, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13937259250217013, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.07616488635540009}, {"id": 238, "seek": 155082, "start": 1571.82, "end": 1575.82, "text": " One more question. All the way up there, really?", "tokens": [51414, 1485, 544, 1168, 13, 1057, 264, 636, 493, 456, 11, 534, 30, 51614], "temperature": 0.0, "avg_logprob": -0.13937259250217013, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.07616488635540009}, {"id": 239, "seek": 158082, "start": 1580.82, "end": 1607.82, "text": " Hi. I saw during the slide that one of the problems is that you are not really aware if by choosing a tree, a representational tree of the semantics that you are trying to compile, it's going to be better or worse compared to another tree that you are not for.", "tokens": [50364, 2421, 13, 286, 1866, 1830, 264, 4137, 300, 472, 295, 264, 2740, 307, 300, 291, 366, 406, 534, 3650, 498, 538, 10875, 257, 4230, 11, 257, 2906, 1478, 4230, 295, 264, 4361, 45298, 300, 291, 366, 1382, 281, 31413, 11, 309, 311, 516, 281, 312, 1101, 420, 5324, 5347, 281, 1071, 4230, 300, 291, 366, 406, 337, 13, 51714], "temperature": 0.0, "avg_logprob": -0.20841741561889648, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.025481892749667168}, {"id": 240, "seek": 160782, "start": 1607.82, "end": 1622.82, "text": " And I was wondering, are we using the operative research theory? I mean, all the mixed integer linear programming theory that gives you a model of the reality and help you understanding how far you are from the", "tokens": [50364, 400, 286, 390, 6359, 11, 366, 321, 1228, 264, 2208, 1166, 2132, 5261, 30, 286, 914, 11, 439, 264, 7467, 24922, 8213, 9410, 5261, 300, 2709, 291, 257, 2316, 295, 264, 4103, 293, 854, 291, 3701, 577, 1400, 291, 366, 490, 264, 51114], "temperature": 0.0, "avg_logprob": -0.09063697897869608, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.031188130378723145}, {"id": 241, "seek": 162282, "start": 1622.82, "end": 1625.82, "text": " optimal value of a certain representation.", "tokens": [50364, 16252, 2158, 295, 257, 1629, 10290, 13, 50514], "temperature": 0.0, "avg_logprob": -0.39318084716796875, "compression_ratio": 1.2258064516129032, "no_speech_prob": 0.09785729646682739}, {"id": 242, "seek": 162282, "start": 1630.82, "end": 1638.82, "text": " So, I'm not sure understood the question. Let me try to say back to your saying, are we applying? Okay, yeah.", "tokens": [50764, 407, 11, 286, 478, 406, 988, 7320, 264, 1168, 13, 961, 385, 853, 281, 584, 646, 281, 428, 1566, 11, 366, 321, 9275, 30, 1033, 11, 1338, 13, 51164], "temperature": 0.0, "avg_logprob": -0.39318084716796875, "compression_ratio": 1.2258064516129032, "no_speech_prob": 0.09785729646682739}, {"id": 243, "seek": 163882, "start": 1639.82, "end": 1658.82, "text": " I'm seeing that machine learning basically relies on a loss on how far you are from a certain optimal value. And I'm seeing that there's a branch of mathematics called operational research that his work is trying to describe a word in an idealized", "tokens": [50414, 286, 478, 2577, 300, 3479, 2539, 1936, 30910, 322, 257, 4470, 322, 577, 1400, 291, 366, 490, 257, 1629, 16252, 2158, 13, 400, 286, 478, 2577, 300, 456, 311, 257, 9819, 295, 18666, 1219, 16607, 2132, 300, 702, 589, 307, 1382, 281, 6786, 257, 1349, 294, 364, 7157, 1602, 51364], "temperature": 0.0, "avg_logprob": -0.14823661660248377, "compression_ratio": 1.496969696969697, "no_speech_prob": 0.02526465617120266}, {"id": 244, "seek": 165882, "start": 1659.82, "end": 1680.82, "text": " matter. And you try to describe how it's costing respect to my objective value, making a certain decision instead of another one, and you get like a math formula. And there's the simplex algorithm that helps you to traverse those.", "tokens": [50414, 1871, 13, 400, 291, 853, 281, 6786, 577, 309, 311, 37917, 3104, 281, 452, 10024, 2158, 11, 1455, 257, 1629, 3537, 2602, 295, 1071, 472, 11, 293, 291, 483, 411, 257, 5221, 8513, 13, 400, 456, 311, 264, 2199, 87, 9284, 300, 3665, 291, 281, 45674, 729, 13, 51464], "temperature": 0.0, "avg_logprob": -0.23217646892254168, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.059290625154972076}, {"id": 245, "seek": 168082, "start": 1681.82, "end": 1688.82, "text": " Yeah, and I was wondering, are we trying to integrate those two fields of mathematics to reach?", "tokens": [50414, 865, 11, 293, 286, 390, 6359, 11, 366, 321, 1382, 281, 13365, 729, 732, 7909, 295, 18666, 281, 2524, 30, 50764], "temperature": 0.0, "avg_logprob": -0.16669440269470215, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.06778936088085175}, {"id": 246, "seek": 168082, "start": 1688.82, "end": 1701.82, "text": " So, I think, let me give the answer because it's also time. So, and if the answer doesn't make sense, let's talk. I think the key problem is like understanding what that gap is, actually measuring that. And it goes back to the reward signaling thing.", "tokens": [50764, 407, 11, 286, 519, 11, 718, 385, 976, 264, 1867, 570, 309, 311, 611, 565, 13, 407, 11, 293, 498, 264, 1867, 1177, 380, 652, 2020, 11, 718, 311, 751, 13, 286, 519, 264, 2141, 1154, 307, 411, 3701, 437, 300, 7417, 307, 11, 767, 13389, 300, 13, 400, 309, 1709, 646, 281, 264, 7782, 38639, 551, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16669440269470215, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.06778936088085175}, {"id": 247, "seek": 170182, "start": 1702.82, "end": 1717.82, "text": " So, should we apply what you said? Probably, again, I'm not an expert in that. So, I mean, if you think it's worth doing like great. But the problem is that you'll hit very quickly is that the reward that we give or the signal that we give is bad.", "tokens": [50414, 407, 11, 820, 321, 3079, 437, 291, 848, 30, 9210, 11, 797, 11, 286, 478, 406, 364, 5844, 294, 300, 13, 407, 11, 286, 914, 11, 498, 291, 519, 309, 311, 3163, 884, 411, 869, 13, 583, 264, 1154, 307, 300, 291, 603, 2045, 588, 2661, 307, 300, 264, 7782, 300, 321, 976, 420, 264, 6358, 300, 321, 976, 307, 1578, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14425311279296876, "compression_ratio": 1.6736842105263159, "no_speech_prob": 0.15973028540611267}, {"id": 248, "seek": 170182, "start": 1717.82, "end": 1728.82, "text": " Right? So, then probably the rest of it falls, right? So, we need to fix that first before we can apply these things. But yeah, absolutely. Like, I mean, we should try all sorts of like methodologies. Like, there's a whole point.", "tokens": [51164, 1779, 30, 407, 11, 550, 1391, 264, 1472, 295, 309, 8804, 11, 558, 30, 407, 11, 321, 643, 281, 3191, 300, 700, 949, 321, 393, 3079, 613, 721, 13, 583, 1338, 11, 3122, 13, 1743, 11, 286, 914, 11, 321, 820, 853, 439, 7527, 295, 411, 3170, 6204, 13, 1743, 11, 456, 311, 257, 1379, 935, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14425311279296876, "compression_ratio": 1.6736842105263159, "no_speech_prob": 0.15973028540611267}, {"id": 249, "seek": 172882, "start": 1728.82, "end": 1733.82, "text": " Did I make sense or did I miss it? Okay, let's talk more.", "tokens": [50364, 2589, 286, 652, 2020, 420, 630, 286, 1713, 309, 30, 1033, 11, 718, 311, 751, 544, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1920019541031275, "compression_ratio": 1.4867724867724867, "no_speech_prob": 0.1321822851896286}, {"id": 250, "seek": 172882, "start": 1733.82, "end": 1737.82, "text": " All right, everyone give March another round of applause, please.", "tokens": [50614, 1057, 558, 11, 1518, 976, 6129, 1071, 3098, 295, 9969, 11, 1767, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1920019541031275, "compression_ratio": 1.4867724867724867, "no_speech_prob": 0.1321822851896286}, {"id": 251, "seek": 172882, "start": 1742.82, "end": 1755.82, "text": " All right, we're starting in about two more minutes. So, please, stick around. Don't forget, the desks are very loud. Please hold them down. Don't slam them.", "tokens": [51064, 1057, 558, 11, 321, 434, 2891, 294, 466, 732, 544, 2077, 13, 407, 11, 1767, 11, 2897, 926, 13, 1468, 380, 2870, 11, 264, 730, 1694, 366, 588, 6588, 13, 2555, 1797, 552, 760, 13, 1468, 380, 25617, 552, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1920019541031275, "compression_ratio": 1.4867724867724867, "no_speech_prob": 0.1321822851896286}, {"id": 252, "seek": 175582, "start": 1755.82, "end": 1758.82, "text": " And we have the matrix room up and running again.", "tokens": [50364, 400, 321, 362, 264, 8141, 1808, 493, 293, 2614, 797, 13, 50514], "temperature": 0.0, "avg_logprob": -0.27693314247942985, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.09782153367996216}, {"id": 253, "seek": 175582, "start": 1758.82, "end": 1765.82, "text": " Can you help me try to figure out how to make the both mics work? Can you do that? Can you hold it and can you talk to that?", "tokens": [50514, 1664, 291, 854, 385, 853, 281, 2573, 484, 577, 281, 652, 264, 1293, 45481, 589, 30, 1664, 291, 360, 300, 30, 1664, 291, 1797, 309, 293, 393, 291, 751, 281, 300, 30, 50864], "temperature": 0.0, "avg_logprob": -0.27693314247942985, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.09782153367996216}, {"id": 254, "seek": 175582, "start": 1765.82, "end": 1767.82, "text": " And unmute it in a second.", "tokens": [50864, 400, 41445, 309, 294, 257, 1150, 13, 50964], "temperature": 0.0, "avg_logprob": -0.27693314247942985, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.09782153367996216}, {"id": 255, "seek": 175582, "start": 1773.82, "end": 1774.82, "text": " This, this.", "tokens": [51264, 639, 11, 341, 13, 51314], "temperature": 0.0, "avg_logprob": -0.27693314247942985, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.09782153367996216}, {"id": 256, "seek": 175582, "start": 1776.82, "end": 1778.82, "text": " Yeah, yeah. Can you start?", "tokens": [51414, 865, 11, 1338, 13, 1664, 291, 722, 30, 51514], "temperature": 0.0, "avg_logprob": -0.27693314247942985, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.09782153367996216}, {"id": 257, "seek": 175582, "start": 1778.82, "end": 1782.82, "text": " How about now? Hello? Can someone give me a thumbs up?", "tokens": [51514, 1012, 466, 586, 30, 2425, 30, 1664, 1580, 976, 385, 257, 8838, 493, 30, 51714], "temperature": 0.0, "avg_logprob": -0.27693314247942985, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.09782153367996216}, {"id": 258, "seek": 175582, "start": 1782.82, "end": 1783.82, "text": " No.", "tokens": [51714, 883, 13, 51764], "temperature": 0.0, "avg_logprob": -0.27693314247942985, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.09782153367996216}, {"id": 259, "seek": 178382, "start": 1783.82, "end": 1786.82, "text": " Someone got a thumbs up? Hey, thanks Marty.", "tokens": [50364, 8734, 658, 257, 8838, 493, 30, 1911, 11, 3231, 29192, 13, 50514], "temperature": 0.0, "avg_logprob": -0.35922720077189996, "compression_ratio": 1.1981981981981982, "no_speech_prob": 0.006481099408119917}, {"id": 260, "seek": 178382, "start": 1788.82, "end": 1789.82, "text": " One second.", "tokens": [50614, 1485, 1150, 13, 50664], "temperature": 0.0, "avg_logprob": -0.35922720077189996, "compression_ratio": 1.1981981981981982, "no_speech_prob": 0.006481099408119917}, {"id": 261, "seek": 178382, "start": 1796.82, "end": 1797.82, "text": " Huh.", "tokens": [51014, 8063, 13, 51064], "temperature": 0.0, "avg_logprob": -0.35922720077189996, "compression_ratio": 1.1981981981981982, "no_speech_prob": 0.006481099408119917}, {"id": 262, "seek": 178382, "start": 1797.82, "end": 1799.82, "text": " At all. Nothing at all?", "tokens": [51064, 1711, 439, 13, 6693, 412, 439, 30, 51164], "temperature": 0.0, "avg_logprob": -0.35922720077189996, "compression_ratio": 1.1981981981981982, "no_speech_prob": 0.006481099408119917}, {"id": 263, "seek": 178382, "start": 1799.82, "end": 1804.82, "text": " Nothing? Okay, yeah, this is not working at all.", "tokens": [51164, 6693, 30, 1033, 11, 1338, 11, 341, 307, 406, 1364, 412, 439, 13, 51414], "temperature": 0.0, "avg_logprob": -0.35922720077189996, "compression_ratio": 1.1981981981981982, "no_speech_prob": 0.006481099408119917}], "language": "en"}