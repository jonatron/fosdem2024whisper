{"text": " So, our next speaker is Joanna White and we talk about the system of television affair recording and archiving. BFI National Television Archive. Welcome, Herr. Thank you. Thank you. It's wonderful to be here today. Thank you for coming and thank you to FOS STEM for letting us speak here. I am Joanna White, developer at the BFI National Archive in the Data and Digital Preservation Department. Today I'll be talking briefly about STORA, System for Television Offair Recording and Archiving. It's a project that we've built in-house. So the BFI or the British Film Institute promote and preserve film and television across the UK and the BFI National Archives Department within the BFI and is also one of the largest archives in the world. So we have nearly one million digitized moving image assets in our digital preservation infrastructure or DPI as we call it. That means they've been ingested into our Spectralogic tape libraries for long-term preservation and they've also been catalogued in our collections information database, what we call SID. By far the largest collection of moving image materials in our off-air is our off-air television recordings with nearly 650,000 program files in DPI. You can see a selection of them here displayed. This is our staff DPI browser. It's internal. There's also a further 800,000 preserved. This is off-air recordings waiting to be processed and ingested and seeded in a future project. So the BFI is the body designated by OFCOM as the National Television Archive. Under the Provision and the Broadcasting Act of 1990, the designation allows us to record, observe and make accessible TV off-air under section 75 of the Copyright Designs and Patents Act of 1988 and later the Copyright and Rights and Performance Regulations 2014. Okay, that's the official bit. The BFI National Archive began recording off-air TV to one-inch real videotapes as you can see here in 1985 with the permission of select UK broadcasters. Programs were captured, curatorially chosen, captured by teams who would work there around the clock in shifts. In 2015, off-air TV recording became an automated process for us when we started collecting live TV programs 24-7. To do this, the BBC agreed to provide us with a fork of their Redux Off-air Capture Project, which you can see here. We worked with BBC developers to integrate it into our digital preservation infrastructure. The goal was to store MPEG TS files to our Spectrologic Tape Libraries for long-term storage. This is built on open-source technology. It's run from Linux, installed servers and uses open-source tools to record both television and radio programming for the BBC. At the BFI, we just use it for off-air television. So in May 2022, BBC Redux was shut down. In anticipation, the head of my department, head of data and digital preservation, Stephen McConnacky, launched our own R&D project the year before. Along with two BFI engineers, John Daniel and Brian Fattarini, we built the software recording solution to emulate many features of Redux with the name not to disrupt our existing DPI ingest workflows during that change over period. So like Redux, Stora records satellite-streamed UK broadcasts. The channels are a mix of high definition and standard definition streams, many broadcasting 24 hours a day. One full day of off-air recording captures around 500 programs to our storage. That's roughly 850 gigabytes of data, and that's roughly 300 terabytes every year. So we receive our signals from Astra Satellites, which broadcast mostly direct-to-home TV channels in Europe. It is nice to be considered still in Europe in this regard. They're received by our satellite dishes, passed through Quattro low-noise blocks before passing through TVS, TV, PCI receiver cards. The signals are routed through patch fields to a multi-switch, which selects band and polarization. We use three multi-switches for Stora so we can have 24 potential multiplexes. We've got a SESPA application, which demuques each channel's MPEG transport stream into a single program transport stream, creating a Unicast real-time transport protocol, or RTP stream, and a Unicast user datagram protocol, or UDP stream. We need both for our recording method. If you'd like to know more about the hardware setup, I can put you in touch with my colleague. It's not my area, I'm afraid. For those of you who are familiar with BBC Redux, you may recognise the folder naming convention and the contents of the folders. As I said, we have automated ingest workflows that needed this structure to be maintained. The folder path comprises recording date, channel name, and individual program broadcast time data in the name of the folder. We've got also the Unic event ID, which is for the program that's being shown, in this case 476. With the folder, you'll find three files, the Info CSV. This file contains program information, including channel, title, description, etc. Next, we have the Stream MPEG TS file. This is the recording captured from the broadcast. This is not encoded stream, but it's just dumped directly to storage, so it contains the packetised elementary streams, which wrap the main data stream, usually H264, video codec, AC3, or MPEG audio, subtitles, also in there, and information tables. You can view all this data really nicely when you look at it in VLC. Finally, we have the subtitles in there, which contains an extracted transcript of all the spoken word from the program. It's formatted as a Web Video Text Tracks format, or Web VTT. Making sure that we don't lose any of this information is really critical to our preservation goals. Storage code has been made possible by a wonderful collection of open source tools, which you can see here. We have Linux Ubuntu operating systems, and we use Linux command line tools throughout the code. Storage is written in Python, and a few external libraries such as Tenacity and Python VLC. Python VLC allows us to work easily in the code with the amazing software VLC from Video LAN. You'll probably see them, I'll foster them in the hats. VLC relies on the outstanding FFMPEG libraries to operate. FFMPEG is kind of worshipped at the BFI and in many archives globally. LibdVBT passes service information in the UDP streams, and it's key to how the scripts record the programs. Media Info provides detailed technical metadata for analysis of the MPEG TS files. CC Extractor extracts the subtitles from the MPEG TS file, saving them to a separate formatted file, and Nagios Core provides a monitoring service for real-time alerts when streams fail or recordings stop for us. So I'll quickly talk you through how storage uses these pieces of software. We'll look first at the recording script, which makes the file contain the MPEG transport stream. They used to have two recording methods for the storage code base, but they've been merged into one script now recently. I'll unpack that shortly. Both methods capture the MPEG transport stream using VLC, but they differ in how they start and stop the recording methods. So the first script I wrote utilizes electronic program-grade metadata, which you can see at the top. We get this from a commercial supplier, retrieved daily from their REST API. The EPG data is converted in Python into a JSON schedule for a single day's programs. One is created every day for every channel. Recordings are then prompted to start and stop from this JSON schedule. The script loops through every scheduled item before it then exits at the end of the last program, which usually just after midnight. And then we have shell restart scripts that run from Prontab, which immediately restart the script again, and it picks up the next day's schedule and carries on. Quick shout out here. I'm quite a new developer, and when I had this project placed on my plate, it was a little bit overwhelming, but I came across this script. It was on ActiveState code written in 2015, weirdly also written by somebody named J-White, J-White88. If anyone knows them, please thank them for me. Nobody knows them. I'm going to assume time travel is a thing by the time I'm 88, and I come back in time and give this to myself, which is a nice idea. So onto the second and better method for recording the off-air streams. It monitors the user data-gram protocol stream, UDP stream, and it gets the service information data, watches for changes in the event ID field for that broadcast stream. You can see that in the top. The event ID is that unique identifier for a program. The script stores the last five event IDs that have been broadcast, and if a new one turns up, then it knows that there's a new recording that needs to be triggered. So it should potentially loop indefinitely, monitoring a UDP stream in this way, creating and placing TV shows into their own unique folder paths, which you've seen. And these event IDs changes usually always fall right at the beginning of a new program as it starts to record. So it's a really very neat way to start and stop the recordings in the schedule. And another shout-out is needed here for the open-source project Libdvbt. I think it's a fork from a VLC library, I'm not sure, but it's by Michael Krufke. It's the stream parser and service information aggregator library for MPEG-2 transport streams. The recording script calls up dvbt from a Python sub-process spawn shell, captures the Libdvbt JSON-formatted response. The command has a time-out flag, which usually ensures the information is returned to you within two, three, four, five seconds. This response is reformatted and exported into a Python dictionary, and this provides the trigger for the VLC record start-stop process. So just to visualize how this method works, it does require us to have two streams, which is a little bit awkward, but doesn't really cause us any problems. So here you can see that the script monitors UDP stream waiting for an event ID number change in that stream, so from two, six, five, two, four, five, two, six, four, two, six, five. When the event ID changes, it's sensed the current VLC streaming recording is stopped on the RTP stream, and the new folder is created with the start time and duration of the next program. So in this folder, the RTP stream is placed, captured by VLC. And this is the code used to start and stop the VLC recording. The Python bind needs to create a VLC instance from the instance class in Python VLC and initiate a new media player object. Both are called into the main script to start and stop the recordings. We use the demuxt dump command, which uses a VLC unique codec from the demuxt library, a tool developed essentially for debugging, but it actually dumps the content directly to file without decoding it. I have the append flag also in there so that if a recording breaks midway through a program and then starts again, it will append it to the existing file and not overwrite it. If that happens, a restart warning text file is placed into the channel folder with the date and timestamps so that we can know that there's potentially a break in the stream. This is pretty rare though, it doesn't happen very often. So we also rely on media info software in the get stream info script. It uses the Python sub process again to spawn a media info call capturing the program start duration metadata. This is all then dumped into a CSV file. And then to extract the WebVTT files, we use the software CC extractor. We launch the software and the Python script again from sub process. Sub process is so important to these processes. This is a simple command that flags the WebVTT output format and then creates the file that you can see here. We then import this data into our SID database, which is viewable and searchable and provides a rich text metadata for the curatorial teams. Lastly, we have Nagios, which is an event monitoring system, which issues alerts when problems are detected. We have separate channel alerts for recording failures, which is identified by comparing a checksum between the current stream MPEG TS file and one four seconds earlier. And then we also have a stream check, which looks in the Cesbo software for an on air equals true for every channel. If either of those fail, then we get a display that says critical, but also we get an email that's sent to us with the context for what the failure is. Okay, so that's a rough guide to the store. In particular, how the code interacts with these open source projects. The open source repository contains all the store of scripts, descriptions for the code base, dependencies, environmental variables, and quantum launch details. It has an MIT license. I hope it may be of some interest here. But as a relatively new developer, I'm quite welcome. I welcome kind of feedback and advice. None of the team in the data and digital preservation department have computer science backgrounds. They're all archivists or TV people. I used to be a cameraman and an independent documentary maker. To be able to stand here and talk about this project like Stora, with just a few years coding experience is really mind blowing for me. And particularly at a time when accurately recording our televised social history is really just so critical. So this has really been made possible thanks to the open source tools we use and the developers we see in the room here. Thank you from the archiving world. And there's also quickly a growing interest in audio visual archives globally to try and work more with open source software and standards. Many of us meet annually at a conference called the No Time to Wait conference, which happens here in Europe. We welcome new attendees, who are developers, definitely. This conference has been connected with the development of the FFE1 codec, which was originally an FFMPEG project picked up and expanded by archivists working as developers. This codec is critical to the BFI's long term preservation of thousands of video and film assets. So the maintenance and upkeep of projects like FFMPEG is really very important to us. Traditionally archives have relied on expensive proprietary hardware, software and codecs that are not scalable. They keep their information behind paywalls and they're not likely to offer the kind of technical support we need long enough into the future for long term preservation. So having open workflows and standards developed within our own community is incredibly empowering for us. And yeah, this is the community where it's happening most, I would say, at the moment in the UK, in Europe. That's it. Thank you. Thank you. The next talk will be in five minutes.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.040000000000001, "text": " So, our next speaker is Joanna White and we talk about the system of television affair", "tokens": [50364, 407, 11, 527, 958, 8145, 307, 49314, 5552, 293, 321, 751, 466, 264, 1185, 295, 8815, 22987, 51116], "temperature": 0.0, "avg_logprob": -0.5669014056523641, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.3552933931350708}, {"id": 1, "seek": 0, "start": 15.040000000000001, "end": 17.2, "text": " recording and archiving.", "tokens": [51116, 6613, 293, 3912, 2123, 13, 51224], "temperature": 0.0, "avg_logprob": -0.5669014056523641, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.3552933931350708}, {"id": 2, "seek": 0, "start": 17.2, "end": 20.84, "text": " BFI National Television Archive.", "tokens": [51224, 363, 38568, 4862, 37329, 10984, 488, 13, 51406], "temperature": 0.0, "avg_logprob": -0.5669014056523641, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.3552933931350708}, {"id": 3, "seek": 0, "start": 20.84, "end": 23.400000000000002, "text": " Welcome, Herr.", "tokens": [51406, 4027, 11, 10367, 13, 51534], "temperature": 0.0, "avg_logprob": -0.5669014056523641, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.3552933931350708}, {"id": 4, "seek": 0, "start": 23.400000000000002, "end": 24.400000000000002, "text": " Thank you.", "tokens": [51534, 1044, 291, 13, 51584], "temperature": 0.0, "avg_logprob": -0.5669014056523641, "compression_ratio": 1.2592592592592593, "no_speech_prob": 0.3552933931350708}, {"id": 5, "seek": 2440, "start": 24.4, "end": 28.919999999999998, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50590], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 6, "seek": 2440, "start": 28.919999999999998, "end": 30.52, "text": " It's wonderful to be here today.", "tokens": [50590, 467, 311, 3715, 281, 312, 510, 965, 13, 50670], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 7, "seek": 2440, "start": 30.52, "end": 33.68, "text": " Thank you for coming and thank you to FOS STEM for letting us speak here.", "tokens": [50670, 1044, 291, 337, 1348, 293, 1309, 291, 281, 479, 4367, 25043, 337, 8295, 505, 1710, 510, 13, 50828], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 8, "seek": 2440, "start": 33.68, "end": 38.16, "text": " I am Joanna White, developer at the BFI National Archive in the Data and Digital Preservation", "tokens": [50828, 286, 669, 49314, 5552, 11, 10754, 412, 264, 363, 38568, 4862, 10984, 488, 294, 264, 11888, 293, 15522, 2718, 6864, 51052], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 9, "seek": 2440, "start": 38.16, "end": 39.16, "text": " Department.", "tokens": [51052, 5982, 13, 51102], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 10, "seek": 2440, "start": 39.16, "end": 43.480000000000004, "text": " Today I'll be talking briefly about STORA, System for Television Offair Recording and", "tokens": [51102, 2692, 286, 603, 312, 1417, 10515, 466, 4904, 36860, 11, 8910, 337, 37329, 6318, 1246, 9647, 3357, 293, 51318], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 11, "seek": 2440, "start": 43.480000000000004, "end": 44.480000000000004, "text": " Archiving.", "tokens": [51318, 10984, 2123, 13, 51368], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 12, "seek": 2440, "start": 44.480000000000004, "end": 46.4, "text": " It's a project that we've built in-house.", "tokens": [51368, 467, 311, 257, 1716, 300, 321, 600, 3094, 294, 12, 6410, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 13, "seek": 2440, "start": 46.4, "end": 50.96, "text": " So the BFI or the British Film Institute promote and preserve film and television across the", "tokens": [51464, 407, 264, 363, 38568, 420, 264, 6221, 13801, 9446, 9773, 293, 15665, 2007, 293, 8815, 2108, 264, 51692], "temperature": 0.0, "avg_logprob": -0.2563879648844401, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.03038901276886463}, {"id": 14, "seek": 5096, "start": 50.96, "end": 56.6, "text": " UK and the BFI National Archives Department within the BFI and is also one of the largest", "tokens": [50364, 7051, 293, 264, 363, 38568, 4862, 39258, 5982, 1951, 264, 363, 38568, 293, 307, 611, 472, 295, 264, 6443, 50646], "temperature": 0.0, "avg_logprob": -0.20628096417682926, "compression_ratio": 1.7728813559322034, "no_speech_prob": 0.07661827653646469}, {"id": 15, "seek": 5096, "start": 56.6, "end": 58.92, "text": " archives in the world.", "tokens": [50646, 25607, 294, 264, 1002, 13, 50762], "temperature": 0.0, "avg_logprob": -0.20628096417682926, "compression_ratio": 1.7728813559322034, "no_speech_prob": 0.07661827653646469}, {"id": 16, "seek": 5096, "start": 58.92, "end": 62.92, "text": " So we have nearly one million digitized moving image assets in our digital preservation", "tokens": [50762, 407, 321, 362, 6217, 472, 2459, 14293, 1602, 2684, 3256, 9769, 294, 527, 4562, 27257, 50962], "temperature": 0.0, "avg_logprob": -0.20628096417682926, "compression_ratio": 1.7728813559322034, "no_speech_prob": 0.07661827653646469}, {"id": 17, "seek": 5096, "start": 62.92, "end": 65.64, "text": " infrastructure or DPI as we call it.", "tokens": [50962, 6896, 420, 413, 31701, 382, 321, 818, 309, 13, 51098], "temperature": 0.0, "avg_logprob": -0.20628096417682926, "compression_ratio": 1.7728813559322034, "no_speech_prob": 0.07661827653646469}, {"id": 18, "seek": 5096, "start": 65.64, "end": 70.28, "text": " That means they've been ingested into our Spectralogic tape libraries for long-term preservation", "tokens": [51098, 663, 1355, 436, 600, 668, 3957, 21885, 666, 527, 27078, 2155, 664, 299, 7314, 15148, 337, 938, 12, 7039, 27257, 51330], "temperature": 0.0, "avg_logprob": -0.20628096417682926, "compression_ratio": 1.7728813559322034, "no_speech_prob": 0.07661827653646469}, {"id": 19, "seek": 5096, "start": 70.28, "end": 74.88, "text": " and they've also been catalogued in our collections information database, what we call SID.", "tokens": [51330, 293, 436, 600, 611, 668, 19746, 5827, 294, 527, 16641, 1589, 8149, 11, 437, 321, 818, 318, 2777, 13, 51560], "temperature": 0.0, "avg_logprob": -0.20628096417682926, "compression_ratio": 1.7728813559322034, "no_speech_prob": 0.07661827653646469}, {"id": 20, "seek": 5096, "start": 74.88, "end": 79.76, "text": " By far the largest collection of moving image materials in our off-air is our off-air television", "tokens": [51560, 3146, 1400, 264, 6443, 5765, 295, 2684, 3256, 5319, 294, 527, 766, 12, 1246, 307, 527, 766, 12, 1246, 8815, 51804], "temperature": 0.0, "avg_logprob": -0.20628096417682926, "compression_ratio": 1.7728813559322034, "no_speech_prob": 0.07661827653646469}, {"id": 21, "seek": 7976, "start": 79.76, "end": 84.76, "text": " recordings with nearly 650,000 program files in DPI.", "tokens": [50364, 25162, 365, 6217, 38566, 11, 1360, 1461, 7098, 294, 413, 31701, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18757697741190593, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.0344560369849205}, {"id": 22, "seek": 7976, "start": 84.76, "end": 86.80000000000001, "text": " You can see a selection of them here displayed.", "tokens": [50614, 509, 393, 536, 257, 9450, 295, 552, 510, 16372, 13, 50716], "temperature": 0.0, "avg_logprob": -0.18757697741190593, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.0344560369849205}, {"id": 23, "seek": 7976, "start": 86.80000000000001, "end": 88.80000000000001, "text": " This is our staff DPI browser.", "tokens": [50716, 639, 307, 527, 3525, 413, 31701, 11185, 13, 50816], "temperature": 0.0, "avg_logprob": -0.18757697741190593, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.0344560369849205}, {"id": 24, "seek": 7976, "start": 88.80000000000001, "end": 89.80000000000001, "text": " It's internal.", "tokens": [50816, 467, 311, 6920, 13, 50866], "temperature": 0.0, "avg_logprob": -0.18757697741190593, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.0344560369849205}, {"id": 25, "seek": 7976, "start": 89.80000000000001, "end": 94.0, "text": " There's also a further 800,000 preserved.", "tokens": [50866, 821, 311, 611, 257, 3052, 13083, 11, 1360, 22242, 13, 51076], "temperature": 0.0, "avg_logprob": -0.18757697741190593, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.0344560369849205}, {"id": 26, "seek": 7976, "start": 94.0, "end": 99.44, "text": " This is off-air recordings waiting to be processed and ingested and seeded in a future project.", "tokens": [51076, 639, 307, 766, 12, 1246, 25162, 3806, 281, 312, 18846, 293, 3957, 21885, 293, 8871, 292, 294, 257, 2027, 1716, 13, 51348], "temperature": 0.0, "avg_logprob": -0.18757697741190593, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.0344560369849205}, {"id": 27, "seek": 7976, "start": 99.44, "end": 104.2, "text": " So the BFI is the body designated by OFCOM as the National Television Archive.", "tokens": [51348, 407, 264, 363, 38568, 307, 264, 1772, 21688, 538, 11944, 34939, 382, 264, 4862, 37329, 10984, 488, 13, 51586], "temperature": 0.0, "avg_logprob": -0.18757697741190593, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.0344560369849205}, {"id": 28, "seek": 7976, "start": 104.2, "end": 108.96000000000001, "text": " Under the Provision and the Broadcasting Act of 1990, the designation allows us to record,", "tokens": [51586, 6974, 264, 1705, 6763, 293, 264, 14074, 48860, 3251, 295, 13384, 11, 264, 40838, 4045, 505, 281, 2136, 11, 51824], "temperature": 0.0, "avg_logprob": -0.18757697741190593, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.0344560369849205}, {"id": 29, "seek": 10896, "start": 109.03999999999999, "end": 114.8, "text": " observe and make accessible TV off-air under section 75 of the Copyright Designs and Patents", "tokens": [50368, 11441, 293, 652, 9515, 3558, 766, 12, 1246, 833, 3541, 9562, 295, 264, 25653, 1938, 12748, 82, 293, 4379, 791, 50656], "temperature": 0.0, "avg_logprob": -0.2193143367767334, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.02469906397163868}, {"id": 30, "seek": 10896, "start": 114.8, "end": 119.6, "text": " Act of 1988 and later the Copyright and Rights and Performance Regulations 2014.", "tokens": [50656, 3251, 295, 27816, 293, 1780, 264, 25653, 1938, 293, 16352, 293, 25047, 4791, 4136, 8227, 13, 50896], "temperature": 0.0, "avg_logprob": -0.2193143367767334, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.02469906397163868}, {"id": 31, "seek": 10896, "start": 119.6, "end": 122.44, "text": " Okay, that's the official bit.", "tokens": [50896, 1033, 11, 300, 311, 264, 4783, 857, 13, 51038], "temperature": 0.0, "avg_logprob": -0.2193143367767334, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.02469906397163868}, {"id": 32, "seek": 10896, "start": 122.44, "end": 127.56, "text": " The BFI National Archive began recording off-air TV to one-inch real videotapes as you can", "tokens": [51038, 440, 363, 38568, 4862, 10984, 488, 4283, 6613, 766, 12, 1246, 3558, 281, 472, 12, 12415, 957, 838, 310, 569, 279, 382, 291, 393, 51294], "temperature": 0.0, "avg_logprob": -0.2193143367767334, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.02469906397163868}, {"id": 33, "seek": 10896, "start": 127.56, "end": 132.72, "text": " see here in 1985 with the permission of select UK broadcasters.", "tokens": [51294, 536, 510, 294, 28962, 365, 264, 11226, 295, 3048, 7051, 4152, 16369, 1559, 13, 51552], "temperature": 0.0, "avg_logprob": -0.2193143367767334, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.02469906397163868}, {"id": 34, "seek": 10896, "start": 132.72, "end": 137.88, "text": " Programs were captured, curatorially chosen, captured by teams who would work there around", "tokens": [51552, 44762, 645, 11828, 11, 38519, 2270, 8614, 11, 11828, 538, 5491, 567, 576, 589, 456, 926, 51810], "temperature": 0.0, "avg_logprob": -0.2193143367767334, "compression_ratio": 1.5202702702702702, "no_speech_prob": 0.02469906397163868}, {"id": 35, "seek": 13788, "start": 137.92, "end": 139.76, "text": " the clock in shifts.", "tokens": [50366, 264, 7830, 294, 19201, 13, 50458], "temperature": 0.0, "avg_logprob": -0.14810873943826428, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.003051379229873419}, {"id": 36, "seek": 13788, "start": 139.76, "end": 145.96, "text": " In 2015, off-air TV recording became an automated process for us when we started collecting", "tokens": [50458, 682, 7546, 11, 766, 12, 1246, 3558, 6613, 3062, 364, 18473, 1399, 337, 505, 562, 321, 1409, 12510, 50768], "temperature": 0.0, "avg_logprob": -0.14810873943826428, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.003051379229873419}, {"id": 37, "seek": 13788, "start": 145.96, "end": 148.35999999999999, "text": " live TV programs 24-7.", "tokens": [50768, 1621, 3558, 4268, 4022, 12, 22, 13, 50888], "temperature": 0.0, "avg_logprob": -0.14810873943826428, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.003051379229873419}, {"id": 38, "seek": 13788, "start": 148.35999999999999, "end": 153.84, "text": " To do this, the BBC agreed to provide us with a fork of their Redux Off-air Capture Project,", "tokens": [50888, 1407, 360, 341, 11, 264, 22669, 9166, 281, 2893, 505, 365, 257, 17716, 295, 641, 4477, 2449, 6318, 12, 1246, 9480, 540, 9849, 11, 51162], "temperature": 0.0, "avg_logprob": -0.14810873943826428, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.003051379229873419}, {"id": 39, "seek": 13788, "start": 153.84, "end": 154.92, "text": " which you can see here.", "tokens": [51162, 597, 291, 393, 536, 510, 13, 51216], "temperature": 0.0, "avg_logprob": -0.14810873943826428, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.003051379229873419}, {"id": 40, "seek": 13788, "start": 154.92, "end": 159.44, "text": " We worked with BBC developers to integrate it into our digital preservation infrastructure.", "tokens": [51216, 492, 2732, 365, 22669, 8849, 281, 13365, 309, 666, 527, 4562, 27257, 6896, 13, 51442], "temperature": 0.0, "avg_logprob": -0.14810873943826428, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.003051379229873419}, {"id": 41, "seek": 13788, "start": 159.44, "end": 166.32, "text": " The goal was to store MPEG TS files to our Spectrologic Tape Libraries for long-term storage.", "tokens": [51442, 440, 3387, 390, 281, 3531, 376, 5208, 38, 37645, 7098, 281, 527, 27078, 20978, 299, 6551, 494, 12006, 4889, 337, 938, 12, 7039, 6725, 13, 51786], "temperature": 0.0, "avg_logprob": -0.14810873943826428, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.003051379229873419}, {"id": 42, "seek": 16632, "start": 166.32, "end": 168.28, "text": " This is built on open-source technology.", "tokens": [50364, 639, 307, 3094, 322, 1269, 12, 41676, 2899, 13, 50462], "temperature": 0.0, "avg_logprob": -0.217359756355855, "compression_ratio": 1.5572755417956656, "no_speech_prob": 0.047619882971048355}, {"id": 43, "seek": 16632, "start": 168.28, "end": 172.51999999999998, "text": " It's run from Linux, installed servers and uses open-source tools to record both television", "tokens": [50462, 467, 311, 1190, 490, 18734, 11, 8899, 15909, 293, 4960, 1269, 12, 41676, 3873, 281, 2136, 1293, 8815, 50674], "temperature": 0.0, "avg_logprob": -0.217359756355855, "compression_ratio": 1.5572755417956656, "no_speech_prob": 0.047619882971048355}, {"id": 44, "seek": 16632, "start": 172.51999999999998, "end": 174.84, "text": " and radio programming for the BBC.", "tokens": [50674, 293, 6477, 9410, 337, 264, 22669, 13, 50790], "temperature": 0.0, "avg_logprob": -0.217359756355855, "compression_ratio": 1.5572755417956656, "no_speech_prob": 0.047619882971048355}, {"id": 45, "seek": 16632, "start": 174.84, "end": 177.79999999999998, "text": " At the BFI, we just use it for off-air television.", "tokens": [50790, 1711, 264, 363, 38568, 11, 321, 445, 764, 309, 337, 766, 12, 1246, 8815, 13, 50938], "temperature": 0.0, "avg_logprob": -0.217359756355855, "compression_ratio": 1.5572755417956656, "no_speech_prob": 0.047619882971048355}, {"id": 46, "seek": 16632, "start": 177.79999999999998, "end": 182.56, "text": " So in May 2022, BBC Redux was shut down.", "tokens": [50938, 407, 294, 1891, 20229, 11, 22669, 4477, 2449, 390, 5309, 760, 13, 51176], "temperature": 0.0, "avg_logprob": -0.217359756355855, "compression_ratio": 1.5572755417956656, "no_speech_prob": 0.047619882971048355}, {"id": 47, "seek": 16632, "start": 182.56, "end": 187.24, "text": " In anticipation, the head of my department, head of data and digital preservation, Stephen", "tokens": [51176, 682, 35979, 11, 264, 1378, 295, 452, 5882, 11, 1378, 295, 1412, 293, 4562, 27257, 11, 13391, 51410], "temperature": 0.0, "avg_logprob": -0.217359756355855, "compression_ratio": 1.5572755417956656, "no_speech_prob": 0.047619882971048355}, {"id": 48, "seek": 16632, "start": 187.24, "end": 191.72, "text": " McConnacky, launched our own R&D project the year before.", "tokens": [51410, 4050, 9838, 77, 501, 88, 11, 8730, 527, 1065, 497, 5, 35, 1716, 264, 1064, 949, 13, 51634], "temperature": 0.0, "avg_logprob": -0.217359756355855, "compression_ratio": 1.5572755417956656, "no_speech_prob": 0.047619882971048355}, {"id": 49, "seek": 16632, "start": 191.72, "end": 196.12, "text": " Along with two BFI engineers, John Daniel and Brian Fattarini, we built the software recording", "tokens": [51634, 17457, 365, 732, 363, 38568, 11955, 11, 2619, 8033, 293, 10765, 479, 1591, 289, 3812, 11, 321, 3094, 264, 4722, 6613, 51854], "temperature": 0.0, "avg_logprob": -0.217359756355855, "compression_ratio": 1.5572755417956656, "no_speech_prob": 0.047619882971048355}, {"id": 50, "seek": 19612, "start": 196.12, "end": 202.3, "text": " solution to emulate many features of Redux with the name not to disrupt our existing", "tokens": [50364, 3827, 281, 45497, 867, 4122, 295, 4477, 2449, 365, 264, 1315, 406, 281, 14124, 527, 6741, 50673], "temperature": 0.0, "avg_logprob": -0.20093534326040616, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.012428837828338146}, {"id": 51, "seek": 19612, "start": 202.3, "end": 205.88, "text": " DPI ingest workflows during that change over period.", "tokens": [50673, 413, 31701, 3957, 377, 43461, 1830, 300, 1319, 670, 2896, 13, 50852], "temperature": 0.0, "avg_logprob": -0.20093534326040616, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.012428837828338146}, {"id": 52, "seek": 19612, "start": 205.88, "end": 210.28, "text": " So like Redux, Stora records satellite-streamed UK broadcasts.", "tokens": [50852, 407, 411, 4477, 2449, 11, 745, 3252, 7724, 16016, 12, 9291, 292, 7051, 9975, 82, 13, 51072], "temperature": 0.0, "avg_logprob": -0.20093534326040616, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.012428837828338146}, {"id": 53, "seek": 19612, "start": 210.28, "end": 214.44, "text": " The channels are a mix of high definition and standard definition streams, many broadcasting", "tokens": [51072, 440, 9235, 366, 257, 2890, 295, 1090, 7123, 293, 3832, 7123, 15842, 11, 867, 30024, 51280], "temperature": 0.0, "avg_logprob": -0.20093534326040616, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.012428837828338146}, {"id": 54, "seek": 19612, "start": 214.44, "end": 216.04000000000002, "text": " 24 hours a day.", "tokens": [51280, 4022, 2496, 257, 786, 13, 51360], "temperature": 0.0, "avg_logprob": -0.20093534326040616, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.012428837828338146}, {"id": 55, "seek": 19612, "start": 216.04000000000002, "end": 221.64000000000001, "text": " One full day of off-air recording captures around 500 programs to our storage.", "tokens": [51360, 1485, 1577, 786, 295, 766, 12, 1246, 6613, 27986, 926, 5923, 4268, 281, 527, 6725, 13, 51640], "temperature": 0.0, "avg_logprob": -0.20093534326040616, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.012428837828338146}, {"id": 56, "seek": 22164, "start": 221.64, "end": 228.39999999999998, "text": " That's roughly 850 gigabytes of data, and that's roughly 300 terabytes every year.", "tokens": [50364, 663, 311, 9810, 1649, 2803, 42741, 295, 1412, 11, 293, 300, 311, 9810, 6641, 1796, 24538, 633, 1064, 13, 50702], "temperature": 0.0, "avg_logprob": -0.1624587376912435, "compression_ratio": 1.625418060200669, "no_speech_prob": 0.4370932877063751}, {"id": 57, "seek": 22164, "start": 228.39999999999998, "end": 233.2, "text": " So we receive our signals from Astra Satellites, which broadcast mostly direct-to-home TV channels", "tokens": [50702, 407, 321, 4774, 527, 12354, 490, 45242, 318, 10810, 3324, 11, 597, 9975, 5240, 2047, 12, 1353, 12, 25336, 3558, 9235, 50942], "temperature": 0.0, "avg_logprob": -0.1624587376912435, "compression_ratio": 1.625418060200669, "no_speech_prob": 0.4370932877063751}, {"id": 58, "seek": 22164, "start": 233.2, "end": 234.2, "text": " in Europe.", "tokens": [50942, 294, 3315, 13, 50992], "temperature": 0.0, "avg_logprob": -0.1624587376912435, "compression_ratio": 1.625418060200669, "no_speech_prob": 0.4370932877063751}, {"id": 59, "seek": 22164, "start": 234.2, "end": 237.51999999999998, "text": " It is nice to be considered still in Europe in this regard.", "tokens": [50992, 467, 307, 1481, 281, 312, 4888, 920, 294, 3315, 294, 341, 3843, 13, 51158], "temperature": 0.0, "avg_logprob": -0.1624587376912435, "compression_ratio": 1.625418060200669, "no_speech_prob": 0.4370932877063751}, {"id": 60, "seek": 22164, "start": 237.51999999999998, "end": 242.2, "text": " They're received by our satellite dishes, passed through Quattro low-noise blocks before", "tokens": [51158, 814, 434, 4613, 538, 527, 16016, 10814, 11, 4678, 807, 2326, 1591, 340, 2295, 12, 42641, 8474, 949, 51392], "temperature": 0.0, "avg_logprob": -0.1624587376912435, "compression_ratio": 1.625418060200669, "no_speech_prob": 0.4370932877063751}, {"id": 61, "seek": 22164, "start": 242.2, "end": 246.07999999999998, "text": " passing through TVS, TV, PCI receiver cards.", "tokens": [51392, 8437, 807, 3558, 50, 11, 3558, 11, 6465, 40, 20086, 5632, 13, 51586], "temperature": 0.0, "avg_logprob": -0.1624587376912435, "compression_ratio": 1.625418060200669, "no_speech_prob": 0.4370932877063751}, {"id": 62, "seek": 22164, "start": 246.07999999999998, "end": 249.88, "text": " The signals are routed through patch fields to a multi-switch, which selects band and", "tokens": [51586, 440, 12354, 366, 4020, 292, 807, 9972, 7909, 281, 257, 4825, 12, 25884, 1549, 11, 597, 3048, 82, 4116, 293, 51776], "temperature": 0.0, "avg_logprob": -0.1624587376912435, "compression_ratio": 1.625418060200669, "no_speech_prob": 0.4370932877063751}, {"id": 63, "seek": 22164, "start": 249.88, "end": 251.27999999999997, "text": " polarization.", "tokens": [51776, 37736, 13, 51846], "temperature": 0.0, "avg_logprob": -0.1624587376912435, "compression_ratio": 1.625418060200669, "no_speech_prob": 0.4370932877063751}, {"id": 64, "seek": 25128, "start": 251.32, "end": 256.28, "text": " We use three multi-switches for Stora so we can have 24 potential multiplexes.", "tokens": [50366, 492, 764, 1045, 4825, 12, 25884, 1549, 279, 337, 745, 3252, 370, 321, 393, 362, 4022, 3995, 3311, 2021, 279, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18105000608107624, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.04694603756070137}, {"id": 65, "seek": 25128, "start": 256.28, "end": 260.72, "text": " We've got a SESPA application, which demuques each channel's MPEG transport stream into", "tokens": [50614, 492, 600, 658, 257, 318, 2358, 10297, 3861, 11, 597, 1371, 84, 7519, 1184, 2269, 311, 376, 5208, 38, 5495, 4309, 666, 50836], "temperature": 0.0, "avg_logprob": -0.18105000608107624, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.04694603756070137}, {"id": 66, "seek": 25128, "start": 260.72, "end": 267.32, "text": " a single program transport stream, creating a Unicast real-time transport protocol, or", "tokens": [50836, 257, 2167, 1461, 5495, 4309, 11, 4084, 257, 1156, 299, 525, 957, 12, 3766, 5495, 10336, 11, 420, 51166], "temperature": 0.0, "avg_logprob": -0.18105000608107624, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.04694603756070137}, {"id": 67, "seek": 25128, "start": 267.32, "end": 272.68, "text": " RTP stream, and a Unicast user datagram protocol, or UDP stream.", "tokens": [51166, 497, 16804, 4309, 11, 293, 257, 1156, 299, 525, 4195, 1137, 3914, 10336, 11, 420, 624, 11373, 4309, 13, 51434], "temperature": 0.0, "avg_logprob": -0.18105000608107624, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.04694603756070137}, {"id": 68, "seek": 25128, "start": 272.68, "end": 274.36, "text": " We need both for our recording method.", "tokens": [51434, 492, 643, 1293, 337, 527, 6613, 3170, 13, 51518], "temperature": 0.0, "avg_logprob": -0.18105000608107624, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.04694603756070137}, {"id": 69, "seek": 25128, "start": 274.36, "end": 278.16, "text": " If you'd like to know more about the hardware setup, I can put you in touch with my colleague.", "tokens": [51518, 759, 291, 1116, 411, 281, 458, 544, 466, 264, 8837, 8657, 11, 286, 393, 829, 291, 294, 2557, 365, 452, 13532, 13, 51708], "temperature": 0.0, "avg_logprob": -0.18105000608107624, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.04694603756070137}, {"id": 70, "seek": 25128, "start": 278.16, "end": 280.96, "text": " It's not my area, I'm afraid.", "tokens": [51708, 467, 311, 406, 452, 1859, 11, 286, 478, 4638, 13, 51848], "temperature": 0.0, "avg_logprob": -0.18105000608107624, "compression_ratio": 1.596026490066225, "no_speech_prob": 0.04694603756070137}, {"id": 71, "seek": 28096, "start": 280.96, "end": 285.0, "text": " For those of you who are familiar with BBC Redux, you may recognise the folder naming", "tokens": [50364, 1171, 729, 295, 291, 567, 366, 4963, 365, 22669, 4477, 2449, 11, 291, 815, 23991, 264, 10820, 25290, 50566], "temperature": 0.0, "avg_logprob": -0.14842179038307884, "compression_ratio": 1.5935251798561152, "no_speech_prob": 0.001979744527488947}, {"id": 72, "seek": 28096, "start": 285.0, "end": 288.15999999999997, "text": " convention and the contents of the folders.", "tokens": [50566, 10286, 293, 264, 15768, 295, 264, 31082, 13, 50724], "temperature": 0.0, "avg_logprob": -0.14842179038307884, "compression_ratio": 1.5935251798561152, "no_speech_prob": 0.001979744527488947}, {"id": 73, "seek": 28096, "start": 288.15999999999997, "end": 293.52, "text": " As I said, we have automated ingest workflows that needed this structure to be maintained.", "tokens": [50724, 1018, 286, 848, 11, 321, 362, 18473, 3957, 377, 43461, 300, 2978, 341, 3877, 281, 312, 17578, 13, 50992], "temperature": 0.0, "avg_logprob": -0.14842179038307884, "compression_ratio": 1.5935251798561152, "no_speech_prob": 0.001979744527488947}, {"id": 74, "seek": 28096, "start": 293.52, "end": 298.35999999999996, "text": " The folder path comprises recording date, channel name, and individual program broadcast", "tokens": [50992, 440, 10820, 3100, 16802, 3598, 6613, 4002, 11, 2269, 1315, 11, 293, 2609, 1461, 9975, 51234], "temperature": 0.0, "avg_logprob": -0.14842179038307884, "compression_ratio": 1.5935251798561152, "no_speech_prob": 0.001979744527488947}, {"id": 75, "seek": 28096, "start": 298.35999999999996, "end": 301.64, "text": " time data in the name of the folder.", "tokens": [51234, 565, 1412, 294, 264, 1315, 295, 264, 10820, 13, 51398], "temperature": 0.0, "avg_logprob": -0.14842179038307884, "compression_ratio": 1.5935251798561152, "no_speech_prob": 0.001979744527488947}, {"id": 76, "seek": 28096, "start": 301.64, "end": 305.71999999999997, "text": " We've got also the Unic event ID, which is for the program that's being shown, in this", "tokens": [51398, 492, 600, 658, 611, 264, 1156, 299, 2280, 7348, 11, 597, 307, 337, 264, 1461, 300, 311, 885, 4898, 11, 294, 341, 51602], "temperature": 0.0, "avg_logprob": -0.14842179038307884, "compression_ratio": 1.5935251798561152, "no_speech_prob": 0.001979744527488947}, {"id": 77, "seek": 28096, "start": 305.71999999999997, "end": 307.79999999999995, "text": " case 476.", "tokens": [51602, 1389, 16953, 21, 13, 51706], "temperature": 0.0, "avg_logprob": -0.14842179038307884, "compression_ratio": 1.5935251798561152, "no_speech_prob": 0.001979744527488947}, {"id": 78, "seek": 30780, "start": 307.8, "end": 311.68, "text": " With the folder, you'll find three files, the Info CSV.", "tokens": [50364, 2022, 264, 10820, 11, 291, 603, 915, 1045, 7098, 11, 264, 11537, 78, 48814, 13, 50558], "temperature": 0.0, "avg_logprob": -0.19703705796917664, "compression_ratio": 1.5521235521235521, "no_speech_prob": 0.03882962465286255}, {"id": 79, "seek": 30780, "start": 311.68, "end": 316.2, "text": " This file contains program information, including channel, title, description, etc.", "tokens": [50558, 639, 3991, 8306, 1461, 1589, 11, 3009, 2269, 11, 4876, 11, 3855, 11, 5183, 13, 50784], "temperature": 0.0, "avg_logprob": -0.19703705796917664, "compression_ratio": 1.5521235521235521, "no_speech_prob": 0.03882962465286255}, {"id": 80, "seek": 30780, "start": 316.2, "end": 319.36, "text": " Next, we have the Stream MPEG TS file.", "tokens": [50784, 3087, 11, 321, 362, 264, 24904, 376, 5208, 38, 37645, 3991, 13, 50942], "temperature": 0.0, "avg_logprob": -0.19703705796917664, "compression_ratio": 1.5521235521235521, "no_speech_prob": 0.03882962465286255}, {"id": 81, "seek": 30780, "start": 319.36, "end": 321.88, "text": " This is the recording captured from the broadcast.", "tokens": [50942, 639, 307, 264, 6613, 11828, 490, 264, 9975, 13, 51068], "temperature": 0.0, "avg_logprob": -0.19703705796917664, "compression_ratio": 1.5521235521235521, "no_speech_prob": 0.03882962465286255}, {"id": 82, "seek": 30780, "start": 321.88, "end": 326.32, "text": " This is not encoded stream, but it's just dumped directly to storage, so it contains", "tokens": [51068, 639, 307, 406, 2058, 12340, 4309, 11, 457, 309, 311, 445, 32131, 3838, 281, 6725, 11, 370, 309, 8306, 51290], "temperature": 0.0, "avg_logprob": -0.19703705796917664, "compression_ratio": 1.5521235521235521, "no_speech_prob": 0.03882962465286255}, {"id": 83, "seek": 30780, "start": 326.32, "end": 332.6, "text": " the packetised elementary streams, which wrap the main data stream, usually H264, video", "tokens": [51290, 264, 20300, 2640, 16429, 15842, 11, 597, 7019, 264, 2135, 1412, 4309, 11, 2673, 389, 10880, 19, 11, 960, 51604], "temperature": 0.0, "avg_logprob": -0.19703705796917664, "compression_ratio": 1.5521235521235521, "no_speech_prob": 0.03882962465286255}, {"id": 84, "seek": 33260, "start": 332.6, "end": 338.72, "text": " codec, AC3, or MPEG audio, subtitles, also in there, and information tables.", "tokens": [50364, 3089, 66, 11, 8157, 18, 11, 420, 376, 5208, 38, 6278, 11, 42045, 11, 611, 294, 456, 11, 293, 1589, 8020, 13, 50670], "temperature": 0.0, "avg_logprob": -0.24615030703337296, "compression_ratio": 1.5772058823529411, "no_speech_prob": 0.08210820704698563}, {"id": 85, "seek": 33260, "start": 338.72, "end": 343.0, "text": " You can view all this data really nicely when you look at it in VLC.", "tokens": [50670, 509, 393, 1910, 439, 341, 1412, 534, 9594, 562, 291, 574, 412, 309, 294, 691, 14766, 13, 50884], "temperature": 0.0, "avg_logprob": -0.24615030703337296, "compression_ratio": 1.5772058823529411, "no_speech_prob": 0.08210820704698563}, {"id": 86, "seek": 33260, "start": 343.0, "end": 348.12, "text": " Finally, we have the subtitles in there, which contains an extracted transcript of all the", "tokens": [50884, 6288, 11, 321, 362, 264, 42045, 294, 456, 11, 597, 8306, 364, 34086, 24444, 295, 439, 264, 51140], "temperature": 0.0, "avg_logprob": -0.24615030703337296, "compression_ratio": 1.5772058823529411, "no_speech_prob": 0.08210820704698563}, {"id": 87, "seek": 33260, "start": 348.12, "end": 349.68, "text": " spoken word from the program.", "tokens": [51140, 10759, 1349, 490, 264, 1461, 13, 51218], "temperature": 0.0, "avg_logprob": -0.24615030703337296, "compression_ratio": 1.5772058823529411, "no_speech_prob": 0.08210820704698563}, {"id": 88, "seek": 33260, "start": 349.68, "end": 354.68, "text": " It's formatted as a Web Video Text Tracks format, or Web VTT.", "tokens": [51218, 467, 311, 1254, 32509, 382, 257, 9573, 9777, 18643, 1765, 7424, 7877, 11, 420, 9573, 691, 28178, 13, 51468], "temperature": 0.0, "avg_logprob": -0.24615030703337296, "compression_ratio": 1.5772058823529411, "no_speech_prob": 0.08210820704698563}, {"id": 89, "seek": 33260, "start": 354.68, "end": 358.48, "text": " Making sure that we don't lose any of this information is really critical to our preservation", "tokens": [51468, 14595, 988, 300, 321, 500, 380, 3624, 604, 295, 341, 1589, 307, 534, 4924, 281, 527, 27257, 51658], "temperature": 0.0, "avg_logprob": -0.24615030703337296, "compression_ratio": 1.5772058823529411, "no_speech_prob": 0.08210820704698563}, {"id": 90, "seek": 33260, "start": 358.48, "end": 361.16, "text": " goals.", "tokens": [51658, 5493, 13, 51792], "temperature": 0.0, "avg_logprob": -0.24615030703337296, "compression_ratio": 1.5772058823529411, "no_speech_prob": 0.08210820704698563}, {"id": 91, "seek": 36116, "start": 361.16, "end": 365.04, "text": " Storage code has been made possible by a wonderful collection of open source tools, which you", "tokens": [50364, 36308, 3089, 575, 668, 1027, 1944, 538, 257, 3715, 5765, 295, 1269, 4009, 3873, 11, 597, 291, 50558], "temperature": 0.0, "avg_logprob": -0.27421002683386336, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.18954166769981384}, {"id": 92, "seek": 36116, "start": 365.04, "end": 366.04, "text": " can see here.", "tokens": [50558, 393, 536, 510, 13, 50608], "temperature": 0.0, "avg_logprob": -0.27421002683386336, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.18954166769981384}, {"id": 93, "seek": 36116, "start": 366.04, "end": 370.08000000000004, "text": " We have Linux Ubuntu operating systems, and we use Linux command line tools throughout", "tokens": [50608, 492, 362, 18734, 30230, 45605, 7447, 3652, 11, 293, 321, 764, 18734, 5622, 1622, 3873, 3710, 50810], "temperature": 0.0, "avg_logprob": -0.27421002683386336, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.18954166769981384}, {"id": 94, "seek": 36116, "start": 370.08000000000004, "end": 371.56, "text": " the code.", "tokens": [50810, 264, 3089, 13, 50884], "temperature": 0.0, "avg_logprob": -0.27421002683386336, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.18954166769981384}, {"id": 95, "seek": 36116, "start": 371.56, "end": 379.44000000000005, "text": " Storage is written in Python, and a few external libraries such as Tenacity and Python VLC.", "tokens": [50884, 36308, 307, 3720, 294, 15329, 11, 293, 257, 1326, 8320, 15148, 1270, 382, 9380, 19008, 293, 15329, 691, 14766, 13, 51278], "temperature": 0.0, "avg_logprob": -0.27421002683386336, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.18954166769981384}, {"id": 96, "seek": 36116, "start": 379.44000000000005, "end": 384.12, "text": " Python VLC allows us to work easily in the code with the amazing software VLC from Video", "tokens": [51278, 15329, 691, 14766, 4045, 505, 281, 589, 3612, 294, 264, 3089, 365, 264, 2243, 4722, 691, 14766, 490, 9777, 51512], "temperature": 0.0, "avg_logprob": -0.27421002683386336, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.18954166769981384}, {"id": 97, "seek": 36116, "start": 384.12, "end": 385.12, "text": " LAN.", "tokens": [51512, 37387, 13, 51562], "temperature": 0.0, "avg_logprob": -0.27421002683386336, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.18954166769981384}, {"id": 98, "seek": 36116, "start": 385.12, "end": 388.08000000000004, "text": " You'll probably see them, I'll foster them in the hats.", "tokens": [51562, 509, 603, 1391, 536, 552, 11, 286, 603, 17114, 552, 294, 264, 20549, 13, 51710], "temperature": 0.0, "avg_logprob": -0.27421002683386336, "compression_ratio": 1.5985663082437276, "no_speech_prob": 0.18954166769981384}, {"id": 99, "seek": 38808, "start": 388.44, "end": 392.03999999999996, "text": " VLC relies on the outstanding FFMPEG libraries to operate.", "tokens": [50382, 691, 14766, 30910, 322, 264, 14485, 479, 37, 44, 5208, 38, 15148, 281, 9651, 13, 50562], "temperature": 0.0, "avg_logprob": -0.22023634324994004, "compression_ratio": 1.554307116104869, "no_speech_prob": 0.0481591522693634}, {"id": 100, "seek": 38808, "start": 392.03999999999996, "end": 396.59999999999997, "text": " FFMPEG is kind of worshipped at the BFI and in many archives globally.", "tokens": [50562, 479, 37, 44, 5208, 38, 307, 733, 295, 35366, 5529, 412, 264, 363, 38568, 293, 294, 867, 25607, 18958, 13, 50790], "temperature": 0.0, "avg_logprob": -0.22023634324994004, "compression_ratio": 1.554307116104869, "no_speech_prob": 0.0481591522693634}, {"id": 101, "seek": 38808, "start": 396.59999999999997, "end": 402.32, "text": " LibdVBT passes service information in the UDP streams, and it's key to how the scripts", "tokens": [50790, 15834, 67, 53, 33853, 11335, 2643, 1589, 294, 264, 624, 11373, 15842, 11, 293, 309, 311, 2141, 281, 577, 264, 23294, 51076], "temperature": 0.0, "avg_logprob": -0.22023634324994004, "compression_ratio": 1.554307116104869, "no_speech_prob": 0.0481591522693634}, {"id": 102, "seek": 38808, "start": 402.32, "end": 404.2, "text": " record the programs.", "tokens": [51076, 2136, 264, 4268, 13, 51170], "temperature": 0.0, "avg_logprob": -0.22023634324994004, "compression_ratio": 1.554307116104869, "no_speech_prob": 0.0481591522693634}, {"id": 103, "seek": 38808, "start": 404.2, "end": 410.84, "text": " Media Info provides detailed technical metadata for analysis of the MPEG TS files.", "tokens": [51170, 14741, 11537, 78, 6417, 9942, 6191, 26603, 337, 5215, 295, 264, 376, 5208, 38, 37645, 7098, 13, 51502], "temperature": 0.0, "avg_logprob": -0.22023634324994004, "compression_ratio": 1.554307116104869, "no_speech_prob": 0.0481591522693634}, {"id": 104, "seek": 38808, "start": 410.84, "end": 416.08, "text": " CC Extractor extracts the subtitles from the MPEG TS file, saving them to a separate formatted", "tokens": [51502, 12630, 9881, 1897, 284, 8947, 82, 264, 42045, 490, 264, 376, 5208, 38, 37645, 3991, 11, 6816, 552, 281, 257, 4994, 1254, 32509, 51764], "temperature": 0.0, "avg_logprob": -0.22023634324994004, "compression_ratio": 1.554307116104869, "no_speech_prob": 0.0481591522693634}, {"id": 105, "seek": 41608, "start": 416.08, "end": 421.28, "text": " file, and Nagios Core provides a monitoring service for real-time alerts when streams", "tokens": [50364, 3991, 11, 293, 18913, 2717, 14798, 6417, 257, 11028, 2643, 337, 957, 12, 3766, 28061, 562, 15842, 50624], "temperature": 0.0, "avg_logprob": -0.22019312116834852, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.020984718576073647}, {"id": 106, "seek": 41608, "start": 421.28, "end": 423.84, "text": " fail or recordings stop for us.", "tokens": [50624, 3061, 420, 25162, 1590, 337, 505, 13, 50752], "temperature": 0.0, "avg_logprob": -0.22019312116834852, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.020984718576073647}, {"id": 107, "seek": 41608, "start": 423.84, "end": 427.76, "text": " So I'll quickly talk you through how storage uses these pieces of software.", "tokens": [50752, 407, 286, 603, 2661, 751, 291, 807, 577, 6725, 4960, 613, 3755, 295, 4722, 13, 50948], "temperature": 0.0, "avg_logprob": -0.22019312116834852, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.020984718576073647}, {"id": 108, "seek": 41608, "start": 427.76, "end": 435.36, "text": " We'll look first at the recording script, which makes the file contain the MPEG transport", "tokens": [50948, 492, 603, 574, 700, 412, 264, 6613, 5755, 11, 597, 1669, 264, 3991, 5304, 264, 376, 5208, 38, 5495, 51328], "temperature": 0.0, "avg_logprob": -0.22019312116834852, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.020984718576073647}, {"id": 109, "seek": 41608, "start": 435.36, "end": 436.36, "text": " stream.", "tokens": [51328, 4309, 13, 51378], "temperature": 0.0, "avg_logprob": -0.22019312116834852, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.020984718576073647}, {"id": 110, "seek": 41608, "start": 436.36, "end": 440.59999999999997, "text": " They used to have two recording methods for the storage code base, but they've been merged", "tokens": [51378, 814, 1143, 281, 362, 732, 6613, 7150, 337, 264, 6725, 3089, 3096, 11, 457, 436, 600, 668, 36427, 51590], "temperature": 0.0, "avg_logprob": -0.22019312116834852, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.020984718576073647}, {"id": 111, "seek": 41608, "start": 440.59999999999997, "end": 441.84, "text": " into one script now recently.", "tokens": [51590, 666, 472, 5755, 586, 3938, 13, 51652], "temperature": 0.0, "avg_logprob": -0.22019312116834852, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.020984718576073647}, {"id": 112, "seek": 41608, "start": 441.84, "end": 443.79999999999995, "text": " I'll unpack that shortly.", "tokens": [51652, 286, 603, 26699, 300, 13392, 13, 51750], "temperature": 0.0, "avg_logprob": -0.22019312116834852, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.020984718576073647}, {"id": 113, "seek": 44380, "start": 443.84000000000003, "end": 448.72, "text": " Both methods capture the MPEG transport stream using VLC, but they differ in how they start", "tokens": [50366, 6767, 7150, 7983, 264, 376, 5208, 38, 5495, 4309, 1228, 691, 14766, 11, 457, 436, 743, 294, 577, 436, 722, 50610], "temperature": 0.0, "avg_logprob": -0.1308746337890625, "compression_ratio": 1.6205787781350482, "no_speech_prob": 0.017934223636984825}, {"id": 114, "seek": 44380, "start": 448.72, "end": 451.0, "text": " and stop the recording methods.", "tokens": [50610, 293, 1590, 264, 6613, 7150, 13, 50724], "temperature": 0.0, "avg_logprob": -0.1308746337890625, "compression_ratio": 1.6205787781350482, "no_speech_prob": 0.017934223636984825}, {"id": 115, "seek": 44380, "start": 451.0, "end": 455.44, "text": " So the first script I wrote utilizes electronic program-grade metadata, which you can see", "tokens": [50724, 407, 264, 700, 5755, 286, 4114, 4976, 5660, 10092, 1461, 12, 8692, 26603, 11, 597, 291, 393, 536, 50946], "temperature": 0.0, "avg_logprob": -0.1308746337890625, "compression_ratio": 1.6205787781350482, "no_speech_prob": 0.017934223636984825}, {"id": 116, "seek": 44380, "start": 455.44, "end": 456.64, "text": " at the top.", "tokens": [50946, 412, 264, 1192, 13, 51006], "temperature": 0.0, "avg_logprob": -0.1308746337890625, "compression_ratio": 1.6205787781350482, "no_speech_prob": 0.017934223636984825}, {"id": 117, "seek": 44380, "start": 456.64, "end": 461.08000000000004, "text": " We get this from a commercial supplier, retrieved daily from their REST API.", "tokens": [51006, 492, 483, 341, 490, 257, 6841, 31909, 11, 19817, 937, 5212, 490, 641, 497, 14497, 9362, 13, 51228], "temperature": 0.0, "avg_logprob": -0.1308746337890625, "compression_ratio": 1.6205787781350482, "no_speech_prob": 0.017934223636984825}, {"id": 118, "seek": 44380, "start": 461.08000000000004, "end": 467.2, "text": " The EPG data is converted in Python into a JSON schedule for a single day's programs.", "tokens": [51228, 440, 25330, 38, 1412, 307, 16424, 294, 15329, 666, 257, 31828, 7567, 337, 257, 2167, 786, 311, 4268, 13, 51534], "temperature": 0.0, "avg_logprob": -0.1308746337890625, "compression_ratio": 1.6205787781350482, "no_speech_prob": 0.017934223636984825}, {"id": 119, "seek": 44380, "start": 467.2, "end": 470.16, "text": " One is created every day for every channel.", "tokens": [51534, 1485, 307, 2942, 633, 786, 337, 633, 2269, 13, 51682], "temperature": 0.0, "avg_logprob": -0.1308746337890625, "compression_ratio": 1.6205787781350482, "no_speech_prob": 0.017934223636984825}, {"id": 120, "seek": 44380, "start": 470.16, "end": 473.68, "text": " Recordings are then prompted to start and stop from this JSON schedule.", "tokens": [51682, 27401, 1109, 366, 550, 31042, 281, 722, 293, 1590, 490, 341, 31828, 7567, 13, 51858], "temperature": 0.0, "avg_logprob": -0.1308746337890625, "compression_ratio": 1.6205787781350482, "no_speech_prob": 0.017934223636984825}, {"id": 121, "seek": 47368, "start": 473.68, "end": 478.76, "text": " The script loops through every scheduled item before it then exits at the end of the last", "tokens": [50364, 440, 5755, 16121, 807, 633, 15678, 3174, 949, 309, 550, 44183, 412, 264, 917, 295, 264, 1036, 50618], "temperature": 0.0, "avg_logprob": -0.2013390404837472, "compression_ratio": 1.6205673758865249, "no_speech_prob": 0.0035077910870313644}, {"id": 122, "seek": 47368, "start": 478.76, "end": 481.52, "text": " program, which usually just after midnight.", "tokens": [50618, 1461, 11, 597, 2673, 445, 934, 19006, 13, 50756], "temperature": 0.0, "avg_logprob": -0.2013390404837472, "compression_ratio": 1.6205673758865249, "no_speech_prob": 0.0035077910870313644}, {"id": 123, "seek": 47368, "start": 481.52, "end": 485.28000000000003, "text": " And then we have shell restart scripts that run from Prontab, which immediately restart", "tokens": [50756, 400, 550, 321, 362, 8720, 21022, 23294, 300, 1190, 490, 2114, 896, 455, 11, 597, 4258, 21022, 50944], "temperature": 0.0, "avg_logprob": -0.2013390404837472, "compression_ratio": 1.6205673758865249, "no_speech_prob": 0.0035077910870313644}, {"id": 124, "seek": 47368, "start": 485.28000000000003, "end": 490.08, "text": " the script again, and it picks up the next day's schedule and carries on.", "tokens": [50944, 264, 5755, 797, 11, 293, 309, 16137, 493, 264, 958, 786, 311, 7567, 293, 16402, 322, 13, 51184], "temperature": 0.0, "avg_logprob": -0.2013390404837472, "compression_ratio": 1.6205673758865249, "no_speech_prob": 0.0035077910870313644}, {"id": 125, "seek": 47368, "start": 490.08, "end": 491.72, "text": " Quick shout out here.", "tokens": [51184, 12101, 8043, 484, 510, 13, 51266], "temperature": 0.0, "avg_logprob": -0.2013390404837472, "compression_ratio": 1.6205673758865249, "no_speech_prob": 0.0035077910870313644}, {"id": 126, "seek": 47368, "start": 491.72, "end": 496.84000000000003, "text": " I'm quite a new developer, and when I had this project placed on my plate, it was a little", "tokens": [51266, 286, 478, 1596, 257, 777, 10754, 11, 293, 562, 286, 632, 341, 1716, 7074, 322, 452, 5924, 11, 309, 390, 257, 707, 51522], "temperature": 0.0, "avg_logprob": -0.2013390404837472, "compression_ratio": 1.6205673758865249, "no_speech_prob": 0.0035077910870313644}, {"id": 127, "seek": 47368, "start": 496.84000000000003, "end": 499.56, "text": " bit overwhelming, but I came across this script.", "tokens": [51522, 857, 13373, 11, 457, 286, 1361, 2108, 341, 5755, 13, 51658], "temperature": 0.0, "avg_logprob": -0.2013390404837472, "compression_ratio": 1.6205673758865249, "no_speech_prob": 0.0035077910870313644}, {"id": 128, "seek": 49956, "start": 499.56, "end": 506.12, "text": " It was on ActiveState code written in 2015, weirdly also written by somebody named J-White,", "tokens": [50364, 467, 390, 322, 26635, 4520, 473, 3089, 3720, 294, 7546, 11, 48931, 611, 3720, 538, 2618, 4926, 508, 12, 47589, 11, 50692], "temperature": 0.0, "avg_logprob": -0.20569048741067103, "compression_ratio": 1.6130136986301369, "no_speech_prob": 0.01094798929989338}, {"id": 129, "seek": 49956, "start": 506.12, "end": 507.12, "text": " J-White88.", "tokens": [50692, 508, 12, 47589, 16919, 13, 50742], "temperature": 0.0, "avg_logprob": -0.20569048741067103, "compression_ratio": 1.6130136986301369, "no_speech_prob": 0.01094798929989338}, {"id": 130, "seek": 49956, "start": 507.12, "end": 510.04, "text": " If anyone knows them, please thank them for me.", "tokens": [50742, 759, 2878, 3255, 552, 11, 1767, 1309, 552, 337, 385, 13, 50888], "temperature": 0.0, "avg_logprob": -0.20569048741067103, "compression_ratio": 1.6130136986301369, "no_speech_prob": 0.01094798929989338}, {"id": 131, "seek": 49956, "start": 510.04, "end": 511.04, "text": " Nobody knows them.", "tokens": [50888, 9297, 3255, 552, 13, 50938], "temperature": 0.0, "avg_logprob": -0.20569048741067103, "compression_ratio": 1.6130136986301369, "no_speech_prob": 0.01094798929989338}, {"id": 132, "seek": 49956, "start": 511.04, "end": 514.56, "text": " I'm going to assume time travel is a thing by the time I'm 88, and I come back in time", "tokens": [50938, 286, 478, 516, 281, 6552, 565, 3147, 307, 257, 551, 538, 264, 565, 286, 478, 24587, 11, 293, 286, 808, 646, 294, 565, 51114], "temperature": 0.0, "avg_logprob": -0.20569048741067103, "compression_ratio": 1.6130136986301369, "no_speech_prob": 0.01094798929989338}, {"id": 133, "seek": 49956, "start": 514.56, "end": 518.64, "text": " and give this to myself, which is a nice idea.", "tokens": [51114, 293, 976, 341, 281, 2059, 11, 597, 307, 257, 1481, 1558, 13, 51318], "temperature": 0.0, "avg_logprob": -0.20569048741067103, "compression_ratio": 1.6130136986301369, "no_speech_prob": 0.01094798929989338}, {"id": 134, "seek": 49956, "start": 518.64, "end": 522.44, "text": " So onto the second and better method for recording the off-air streams.", "tokens": [51318, 407, 3911, 264, 1150, 293, 1101, 3170, 337, 6613, 264, 766, 12, 1246, 15842, 13, 51508], "temperature": 0.0, "avg_logprob": -0.20569048741067103, "compression_ratio": 1.6130136986301369, "no_speech_prob": 0.01094798929989338}, {"id": 135, "seek": 49956, "start": 522.44, "end": 527.64, "text": " It monitors the user data-gram protocol stream, UDP stream, and it gets the service information", "tokens": [51508, 467, 26518, 264, 4195, 1412, 12, 1342, 10336, 4309, 11, 624, 11373, 4309, 11, 293, 309, 2170, 264, 2643, 1589, 51768], "temperature": 0.0, "avg_logprob": -0.20569048741067103, "compression_ratio": 1.6130136986301369, "no_speech_prob": 0.01094798929989338}, {"id": 136, "seek": 52764, "start": 527.64, "end": 532.8, "text": " data, watches for changes in the event ID field for that broadcast stream.", "tokens": [50364, 1412, 11, 17062, 337, 2962, 294, 264, 2280, 7348, 2519, 337, 300, 9975, 4309, 13, 50622], "temperature": 0.0, "avg_logprob": -0.11397765477498373, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.10838907957077026}, {"id": 137, "seek": 52764, "start": 532.8, "end": 534.96, "text": " You can see that in the top.", "tokens": [50622, 509, 393, 536, 300, 294, 264, 1192, 13, 50730], "temperature": 0.0, "avg_logprob": -0.11397765477498373, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.10838907957077026}, {"id": 138, "seek": 52764, "start": 534.96, "end": 537.92, "text": " The event ID is that unique identifier for a program.", "tokens": [50730, 440, 2280, 7348, 307, 300, 3845, 45690, 337, 257, 1461, 13, 50878], "temperature": 0.0, "avg_logprob": -0.11397765477498373, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.10838907957077026}, {"id": 139, "seek": 52764, "start": 537.92, "end": 542.92, "text": " The script stores the last five event IDs that have been broadcast, and if a new one", "tokens": [50878, 440, 5755, 9512, 264, 1036, 1732, 2280, 48212, 300, 362, 668, 9975, 11, 293, 498, 257, 777, 472, 51128], "temperature": 0.0, "avg_logprob": -0.11397765477498373, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.10838907957077026}, {"id": 140, "seek": 52764, "start": 542.92, "end": 547.1999999999999, "text": " turns up, then it knows that there's a new recording that needs to be triggered.", "tokens": [51128, 4523, 493, 11, 550, 309, 3255, 300, 456, 311, 257, 777, 6613, 300, 2203, 281, 312, 21710, 13, 51342], "temperature": 0.0, "avg_logprob": -0.11397765477498373, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.10838907957077026}, {"id": 141, "seek": 52764, "start": 547.1999999999999, "end": 552.76, "text": " So it should potentially loop indefinitely, monitoring a UDP stream in this way, creating", "tokens": [51342, 407, 309, 820, 7263, 6367, 24162, 10925, 11, 11028, 257, 624, 11373, 4309, 294, 341, 636, 11, 4084, 51620], "temperature": 0.0, "avg_logprob": -0.11397765477498373, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.10838907957077026}, {"id": 142, "seek": 52764, "start": 552.76, "end": 556.92, "text": " and placing TV shows into their own unique folder paths, which you've seen.", "tokens": [51620, 293, 17221, 3558, 3110, 666, 641, 1065, 3845, 10820, 14518, 11, 597, 291, 600, 1612, 13, 51828], "temperature": 0.0, "avg_logprob": -0.11397765477498373, "compression_ratio": 1.6979166666666667, "no_speech_prob": 0.10838907957077026}, {"id": 143, "seek": 55692, "start": 556.92, "end": 562.16, "text": " And these event IDs changes usually always fall right at the beginning of a new program", "tokens": [50364, 400, 613, 2280, 48212, 2962, 2673, 1009, 2100, 558, 412, 264, 2863, 295, 257, 777, 1461, 50626], "temperature": 0.0, "avg_logprob": -0.16263995170593262, "compression_ratio": 1.5524475524475525, "no_speech_prob": 0.0033805184066295624}, {"id": 144, "seek": 55692, "start": 562.16, "end": 563.4, "text": " as it starts to record.", "tokens": [50626, 382, 309, 3719, 281, 2136, 13, 50688], "temperature": 0.0, "avg_logprob": -0.16263995170593262, "compression_ratio": 1.5524475524475525, "no_speech_prob": 0.0033805184066295624}, {"id": 145, "seek": 55692, "start": 563.4, "end": 568.88, "text": " So it's a really very neat way to start and stop the recordings in the schedule.", "tokens": [50688, 407, 309, 311, 257, 534, 588, 10654, 636, 281, 722, 293, 1590, 264, 25162, 294, 264, 7567, 13, 50962], "temperature": 0.0, "avg_logprob": -0.16263995170593262, "compression_ratio": 1.5524475524475525, "no_speech_prob": 0.0033805184066295624}, {"id": 146, "seek": 55692, "start": 568.88, "end": 573.16, "text": " And another shout-out is needed here for the open-source project Libdvbt.", "tokens": [50962, 400, 1071, 8043, 12, 346, 307, 2978, 510, 337, 264, 1269, 12, 41676, 1716, 15834, 67, 85, 4517, 13, 51176], "temperature": 0.0, "avg_logprob": -0.16263995170593262, "compression_ratio": 1.5524475524475525, "no_speech_prob": 0.0033805184066295624}, {"id": 147, "seek": 55692, "start": 573.16, "end": 578.68, "text": " I think it's a fork from a VLC library, I'm not sure, but it's by Michael Krufke.", "tokens": [51176, 286, 519, 309, 311, 257, 17716, 490, 257, 691, 14766, 6405, 11, 286, 478, 406, 988, 11, 457, 309, 311, 538, 5116, 6332, 2947, 330, 13, 51452], "temperature": 0.0, "avg_logprob": -0.16263995170593262, "compression_ratio": 1.5524475524475525, "no_speech_prob": 0.0033805184066295624}, {"id": 148, "seek": 55692, "start": 578.68, "end": 585.28, "text": " It's the stream parser and service information aggregator library for MPEG-2 transport streams.", "tokens": [51452, 467, 311, 264, 4309, 21156, 260, 293, 2643, 1589, 16743, 1639, 6405, 337, 376, 5208, 38, 12, 17, 5495, 15842, 13, 51782], "temperature": 0.0, "avg_logprob": -0.16263995170593262, "compression_ratio": 1.5524475524475525, "no_speech_prob": 0.0033805184066295624}, {"id": 149, "seek": 58528, "start": 585.28, "end": 589.8399999999999, "text": " The recording script calls up dvbt from a Python sub-process spawn shell, captures the", "tokens": [50364, 440, 6613, 5755, 5498, 493, 274, 85, 4517, 490, 257, 15329, 1422, 12, 41075, 17088, 8720, 11, 27986, 264, 50592], "temperature": 0.0, "avg_logprob": -0.15003874321945576, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.010136970318853855}, {"id": 150, "seek": 58528, "start": 589.8399999999999, "end": 593.1999999999999, "text": " Libdvbt JSON-formatted response.", "tokens": [50592, 15834, 67, 85, 4517, 31828, 12, 837, 32509, 4134, 13, 50760], "temperature": 0.0, "avg_logprob": -0.15003874321945576, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.010136970318853855}, {"id": 151, "seek": 58528, "start": 593.1999999999999, "end": 597.12, "text": " The command has a time-out flag, which usually ensures the information is returned to you", "tokens": [50760, 440, 5622, 575, 257, 565, 12, 346, 7166, 11, 597, 2673, 28111, 264, 1589, 307, 8752, 281, 291, 50956], "temperature": 0.0, "avg_logprob": -0.15003874321945576, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.010136970318853855}, {"id": 152, "seek": 58528, "start": 597.12, "end": 599.8399999999999, "text": " within two, three, four, five seconds.", "tokens": [50956, 1951, 732, 11, 1045, 11, 1451, 11, 1732, 3949, 13, 51092], "temperature": 0.0, "avg_logprob": -0.15003874321945576, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.010136970318853855}, {"id": 153, "seek": 58528, "start": 599.8399999999999, "end": 603.8, "text": " This response is reformatted and exported into a Python dictionary, and this provides", "tokens": [51092, 639, 4134, 307, 8290, 32509, 293, 42055, 666, 257, 15329, 25890, 11, 293, 341, 6417, 51290], "temperature": 0.0, "avg_logprob": -0.15003874321945576, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.010136970318853855}, {"id": 154, "seek": 58528, "start": 603.8, "end": 608.76, "text": " the trigger for the VLC record start-stop process.", "tokens": [51290, 264, 7875, 337, 264, 691, 14766, 2136, 722, 12, 13559, 1399, 13, 51538], "temperature": 0.0, "avg_logprob": -0.15003874321945576, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.010136970318853855}, {"id": 155, "seek": 58528, "start": 608.76, "end": 614.28, "text": " So just to visualize how this method works, it does require us to have two streams, which", "tokens": [51538, 407, 445, 281, 23273, 577, 341, 3170, 1985, 11, 309, 775, 3651, 505, 281, 362, 732, 15842, 11, 597, 51814], "temperature": 0.0, "avg_logprob": -0.15003874321945576, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.010136970318853855}, {"id": 156, "seek": 61428, "start": 614.28, "end": 617.16, "text": " is a little bit awkward, but doesn't really cause us any problems.", "tokens": [50364, 307, 257, 707, 857, 11411, 11, 457, 1177, 380, 534, 3082, 505, 604, 2740, 13, 50508], "temperature": 0.0, "avg_logprob": -0.1925712774607761, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.12020987272262573}, {"id": 157, "seek": 61428, "start": 617.16, "end": 621.28, "text": " So here you can see that the script monitors UDP stream waiting for an event ID number", "tokens": [50508, 407, 510, 291, 393, 536, 300, 264, 5755, 26518, 624, 11373, 4309, 3806, 337, 364, 2280, 7348, 1230, 50714], "temperature": 0.0, "avg_logprob": -0.1925712774607761, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.12020987272262573}, {"id": 158, "seek": 61428, "start": 621.28, "end": 625.64, "text": " change in that stream, so from two, six, five, two, four, five, two, six, four, two, six,", "tokens": [50714, 1319, 294, 300, 4309, 11, 370, 490, 732, 11, 2309, 11, 1732, 11, 732, 11, 1451, 11, 1732, 11, 732, 11, 2309, 11, 1451, 11, 732, 11, 2309, 11, 50932], "temperature": 0.0, "avg_logprob": -0.1925712774607761, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.12020987272262573}, {"id": 159, "seek": 61428, "start": 625.64, "end": 626.8, "text": " five.", "tokens": [50932, 1732, 13, 50990], "temperature": 0.0, "avg_logprob": -0.1925712774607761, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.12020987272262573}, {"id": 160, "seek": 61428, "start": 626.8, "end": 632.04, "text": " When the event ID changes, it's sensed the current VLC streaming recording is stopped", "tokens": [50990, 1133, 264, 2280, 7348, 2962, 11, 309, 311, 2923, 292, 264, 2190, 691, 14766, 11791, 6613, 307, 5936, 51252], "temperature": 0.0, "avg_logprob": -0.1925712774607761, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.12020987272262573}, {"id": 161, "seek": 61428, "start": 632.04, "end": 636.56, "text": " on the RTP stream, and the new folder is created with the start time and duration of the next", "tokens": [51252, 322, 264, 497, 16804, 4309, 11, 293, 264, 777, 10820, 307, 2942, 365, 264, 722, 565, 293, 16365, 295, 264, 958, 51478], "temperature": 0.0, "avg_logprob": -0.1925712774607761, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.12020987272262573}, {"id": 162, "seek": 61428, "start": 636.56, "end": 637.56, "text": " program.", "tokens": [51478, 1461, 13, 51528], "temperature": 0.0, "avg_logprob": -0.1925712774607761, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.12020987272262573}, {"id": 163, "seek": 63756, "start": 637.56, "end": 644.28, "text": " So in this folder, the RTP stream is placed, captured by VLC.", "tokens": [50364, 407, 294, 341, 10820, 11, 264, 497, 16804, 4309, 307, 7074, 11, 11828, 538, 691, 14766, 13, 50700], "temperature": 0.0, "avg_logprob": -0.1666379061612216, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.007096698507666588}, {"id": 164, "seek": 63756, "start": 644.28, "end": 647.4799999999999, "text": " And this is the code used to start and stop the VLC recording.", "tokens": [50700, 400, 341, 307, 264, 3089, 1143, 281, 722, 293, 1590, 264, 691, 14766, 6613, 13, 50860], "temperature": 0.0, "avg_logprob": -0.1666379061612216, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.007096698507666588}, {"id": 165, "seek": 63756, "start": 647.4799999999999, "end": 652.9599999999999, "text": " The Python bind needs to create a VLC instance from the instance class in Python VLC and", "tokens": [50860, 440, 15329, 14786, 2203, 281, 1884, 257, 691, 14766, 5197, 490, 264, 5197, 1508, 294, 15329, 691, 14766, 293, 51134], "temperature": 0.0, "avg_logprob": -0.1666379061612216, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.007096698507666588}, {"id": 166, "seek": 63756, "start": 652.9599999999999, "end": 655.2399999999999, "text": " initiate a new media player object.", "tokens": [51134, 31574, 257, 777, 3021, 4256, 2657, 13, 51248], "temperature": 0.0, "avg_logprob": -0.1666379061612216, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.007096698507666588}, {"id": 167, "seek": 63756, "start": 655.2399999999999, "end": 660.04, "text": " Both are called into the main script to start and stop the recordings.", "tokens": [51248, 6767, 366, 1219, 666, 264, 2135, 5755, 281, 722, 293, 1590, 264, 25162, 13, 51488], "temperature": 0.0, "avg_logprob": -0.1666379061612216, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.007096698507666588}, {"id": 168, "seek": 63756, "start": 660.04, "end": 665.4399999999999, "text": " We use the demuxt dump command, which uses a VLC unique codec from the demuxt library,", "tokens": [51488, 492, 764, 264, 1371, 84, 734, 11430, 5622, 11, 597, 4960, 257, 691, 14766, 3845, 3089, 66, 490, 264, 1371, 84, 734, 6405, 11, 51758], "temperature": 0.0, "avg_logprob": -0.1666379061612216, "compression_ratio": 1.6958333333333333, "no_speech_prob": 0.007096698507666588}, {"id": 169, "seek": 66544, "start": 665.44, "end": 671.8800000000001, "text": " a tool developed essentially for debugging, but it actually dumps the content directly", "tokens": [50364, 257, 2290, 4743, 4476, 337, 45592, 11, 457, 309, 767, 11430, 82, 264, 2701, 3838, 50686], "temperature": 0.0, "avg_logprob": -0.12019139203158292, "compression_ratio": 1.749063670411985, "no_speech_prob": 0.022908272221684456}, {"id": 170, "seek": 66544, "start": 671.8800000000001, "end": 674.6, "text": " to file without decoding it.", "tokens": [50686, 281, 3991, 1553, 979, 8616, 309, 13, 50822], "temperature": 0.0, "avg_logprob": -0.12019139203158292, "compression_ratio": 1.749063670411985, "no_speech_prob": 0.022908272221684456}, {"id": 171, "seek": 66544, "start": 674.6, "end": 679.5200000000001, "text": " I have the append flag also in there so that if a recording breaks midway through a program", "tokens": [50822, 286, 362, 264, 34116, 7166, 611, 294, 456, 370, 300, 498, 257, 6613, 9857, 2062, 676, 807, 257, 1461, 51068], "temperature": 0.0, "avg_logprob": -0.12019139203158292, "compression_ratio": 1.749063670411985, "no_speech_prob": 0.022908272221684456}, {"id": 172, "seek": 66544, "start": 679.5200000000001, "end": 685.08, "text": " and then starts again, it will append it to the existing file and not overwrite it.", "tokens": [51068, 293, 550, 3719, 797, 11, 309, 486, 34116, 309, 281, 264, 6741, 3991, 293, 406, 670, 21561, 309, 13, 51346], "temperature": 0.0, "avg_logprob": -0.12019139203158292, "compression_ratio": 1.749063670411985, "no_speech_prob": 0.022908272221684456}, {"id": 173, "seek": 66544, "start": 685.08, "end": 689.2, "text": " If that happens, a restart warning text file is placed into the channel folder with the", "tokens": [51346, 759, 300, 2314, 11, 257, 21022, 9164, 2487, 3991, 307, 7074, 666, 264, 2269, 10820, 365, 264, 51552], "temperature": 0.0, "avg_logprob": -0.12019139203158292, "compression_ratio": 1.749063670411985, "no_speech_prob": 0.022908272221684456}, {"id": 174, "seek": 66544, "start": 689.2, "end": 693.9200000000001, "text": " date and timestamps so that we can know that there's potentially a break in the stream.", "tokens": [51552, 4002, 293, 49108, 23150, 370, 300, 321, 393, 458, 300, 456, 311, 7263, 257, 1821, 294, 264, 4309, 13, 51788], "temperature": 0.0, "avg_logprob": -0.12019139203158292, "compression_ratio": 1.749063670411985, "no_speech_prob": 0.022908272221684456}, {"id": 175, "seek": 69392, "start": 693.92, "end": 696.76, "text": " This is pretty rare though, it doesn't happen very often.", "tokens": [50364, 639, 307, 1238, 5892, 1673, 11, 309, 1177, 380, 1051, 588, 2049, 13, 50506], "temperature": 0.0, "avg_logprob": -0.1900614047872609, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.09199521690607071}, {"id": 176, "seek": 69392, "start": 696.76, "end": 701.9599999999999, "text": " So we also rely on media info software in the get stream info script.", "tokens": [50506, 407, 321, 611, 10687, 322, 3021, 13614, 4722, 294, 264, 483, 4309, 13614, 5755, 13, 50766], "temperature": 0.0, "avg_logprob": -0.1900614047872609, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.09199521690607071}, {"id": 177, "seek": 69392, "start": 701.9599999999999, "end": 706.36, "text": " It uses the Python sub process again to spawn a media info call capturing the program start", "tokens": [50766, 467, 4960, 264, 15329, 1422, 1399, 797, 281, 17088, 257, 3021, 13614, 818, 23384, 264, 1461, 722, 50986], "temperature": 0.0, "avg_logprob": -0.1900614047872609, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.09199521690607071}, {"id": 178, "seek": 69392, "start": 706.36, "end": 708.04, "text": " duration metadata.", "tokens": [50986, 16365, 26603, 13, 51070], "temperature": 0.0, "avg_logprob": -0.1900614047872609, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.09199521690607071}, {"id": 179, "seek": 69392, "start": 708.04, "end": 711.76, "text": " This is all then dumped into a CSV file.", "tokens": [51070, 639, 307, 439, 550, 32131, 666, 257, 48814, 3991, 13, 51256], "temperature": 0.0, "avg_logprob": -0.1900614047872609, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.09199521690607071}, {"id": 180, "seek": 69392, "start": 711.76, "end": 715.4399999999999, "text": " And then to extract the WebVTT files, we use the software CC extractor.", "tokens": [51256, 400, 550, 281, 8947, 264, 9573, 53, 28178, 7098, 11, 321, 764, 264, 4722, 12630, 8947, 284, 13, 51440], "temperature": 0.0, "avg_logprob": -0.1900614047872609, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.09199521690607071}, {"id": 181, "seek": 69392, "start": 715.4399999999999, "end": 718.24, "text": " We launch the software and the Python script again from sub process.", "tokens": [51440, 492, 4025, 264, 4722, 293, 264, 15329, 5755, 797, 490, 1422, 1399, 13, 51580], "temperature": 0.0, "avg_logprob": -0.1900614047872609, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.09199521690607071}, {"id": 182, "seek": 69392, "start": 718.24, "end": 721.68, "text": " Sub process is so important to these processes.", "tokens": [51580, 8511, 1399, 307, 370, 1021, 281, 613, 7555, 13, 51752], "temperature": 0.0, "avg_logprob": -0.1900614047872609, "compression_ratio": 1.752808988764045, "no_speech_prob": 0.09199521690607071}, {"id": 183, "seek": 72168, "start": 721.68, "end": 726.52, "text": " This is a simple command that flags the WebVTT output format and then creates the file that", "tokens": [50364, 639, 307, 257, 2199, 5622, 300, 23265, 264, 9573, 53, 28178, 5598, 7877, 293, 550, 7829, 264, 3991, 300, 50606], "temperature": 0.0, "avg_logprob": -0.15659855896571898, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.005993709899485111}, {"id": 184, "seek": 72168, "start": 726.52, "end": 727.8, "text": " you can see here.", "tokens": [50606, 291, 393, 536, 510, 13, 50670], "temperature": 0.0, "avg_logprob": -0.15659855896571898, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.005993709899485111}, {"id": 185, "seek": 72168, "start": 727.8, "end": 733.4799999999999, "text": " We then import this data into our SID database, which is viewable and searchable and provides", "tokens": [50670, 492, 550, 974, 341, 1412, 666, 527, 318, 2777, 8149, 11, 597, 307, 1910, 712, 293, 3164, 712, 293, 6417, 50954], "temperature": 0.0, "avg_logprob": -0.15659855896571898, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.005993709899485111}, {"id": 186, "seek": 72168, "start": 733.4799999999999, "end": 738.4399999999999, "text": " a rich text metadata for the curatorial teams.", "tokens": [50954, 257, 4593, 2487, 26603, 337, 264, 38519, 831, 5491, 13, 51202], "temperature": 0.0, "avg_logprob": -0.15659855896571898, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.005993709899485111}, {"id": 187, "seek": 72168, "start": 738.4399999999999, "end": 743.9599999999999, "text": " Lastly, we have Nagios, which is an event monitoring system, which issues alerts when", "tokens": [51202, 18072, 11, 321, 362, 18913, 2717, 11, 597, 307, 364, 2280, 11028, 1185, 11, 597, 2663, 28061, 562, 51478], "temperature": 0.0, "avg_logprob": -0.15659855896571898, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.005993709899485111}, {"id": 188, "seek": 72168, "start": 743.9599999999999, "end": 745.04, "text": " problems are detected.", "tokens": [51478, 2740, 366, 21896, 13, 51532], "temperature": 0.0, "avg_logprob": -0.15659855896571898, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.005993709899485111}, {"id": 189, "seek": 72168, "start": 745.04, "end": 749.8, "text": " We have separate channel alerts for recording failures, which is identified by comparing", "tokens": [51532, 492, 362, 4994, 2269, 28061, 337, 6613, 20774, 11, 597, 307, 9234, 538, 15763, 51770], "temperature": 0.0, "avg_logprob": -0.15659855896571898, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.005993709899485111}, {"id": 190, "seek": 74980, "start": 749.8, "end": 756.0799999999999, "text": " a checksum between the current stream MPEG TS file and one four seconds earlier.", "tokens": [50364, 257, 13834, 449, 1296, 264, 2190, 4309, 376, 5208, 38, 37645, 3991, 293, 472, 1451, 3949, 3071, 13, 50678], "temperature": 0.0, "avg_logprob": -0.22964820861816407, "compression_ratio": 1.5846774193548387, "no_speech_prob": 0.06218758597970009}, {"id": 191, "seek": 74980, "start": 756.0799999999999, "end": 760.16, "text": " And then we also have a stream check, which looks in the Cesbo software for an on air", "tokens": [50678, 400, 550, 321, 611, 362, 257, 4309, 1520, 11, 597, 1542, 294, 264, 28414, 1763, 4722, 337, 364, 322, 1988, 50882], "temperature": 0.0, "avg_logprob": -0.22964820861816407, "compression_ratio": 1.5846774193548387, "no_speech_prob": 0.06218758597970009}, {"id": 192, "seek": 74980, "start": 760.16, "end": 761.56, "text": " equals true for every channel.", "tokens": [50882, 6915, 2074, 337, 633, 2269, 13, 50952], "temperature": 0.0, "avg_logprob": -0.22964820861816407, "compression_ratio": 1.5846774193548387, "no_speech_prob": 0.06218758597970009}, {"id": 193, "seek": 74980, "start": 761.56, "end": 768.3199999999999, "text": " If either of those fail, then we get a display that says critical, but also we get an email", "tokens": [50952, 759, 2139, 295, 729, 3061, 11, 550, 321, 483, 257, 4674, 300, 1619, 4924, 11, 457, 611, 321, 483, 364, 3796, 51290], "temperature": 0.0, "avg_logprob": -0.22964820861816407, "compression_ratio": 1.5846774193548387, "no_speech_prob": 0.06218758597970009}, {"id": 194, "seek": 74980, "start": 768.3199999999999, "end": 771.76, "text": " that's sent to us with the context for what the failure is.", "tokens": [51290, 300, 311, 2279, 281, 505, 365, 264, 4319, 337, 437, 264, 7763, 307, 13, 51462], "temperature": 0.0, "avg_logprob": -0.22964820861816407, "compression_ratio": 1.5846774193548387, "no_speech_prob": 0.06218758597970009}, {"id": 195, "seek": 74980, "start": 771.76, "end": 776.28, "text": " Okay, so that's a rough guide to the store.", "tokens": [51462, 1033, 11, 370, 300, 311, 257, 5903, 5934, 281, 264, 3531, 13, 51688], "temperature": 0.0, "avg_logprob": -0.22964820861816407, "compression_ratio": 1.5846774193548387, "no_speech_prob": 0.06218758597970009}, {"id": 196, "seek": 77628, "start": 776.28, "end": 780.36, "text": " In particular, how the code interacts with these open source projects.", "tokens": [50364, 682, 1729, 11, 577, 264, 3089, 43582, 365, 613, 1269, 4009, 4455, 13, 50568], "temperature": 0.0, "avg_logprob": -0.23834386305375532, "compression_ratio": 1.6508474576271186, "no_speech_prob": 0.3336080014705658}, {"id": 197, "seek": 77628, "start": 780.36, "end": 784.36, "text": " The open source repository contains all the store of scripts, descriptions for the code", "tokens": [50568, 440, 1269, 4009, 25841, 8306, 439, 264, 3531, 295, 23294, 11, 24406, 337, 264, 3089, 50768], "temperature": 0.0, "avg_logprob": -0.23834386305375532, "compression_ratio": 1.6508474576271186, "no_speech_prob": 0.3336080014705658}, {"id": 198, "seek": 77628, "start": 784.36, "end": 788.8, "text": " base, dependencies, environmental variables, and quantum launch details.", "tokens": [50768, 3096, 11, 36606, 11, 8303, 9102, 11, 293, 13018, 4025, 4365, 13, 50990], "temperature": 0.0, "avg_logprob": -0.23834386305375532, "compression_ratio": 1.6508474576271186, "no_speech_prob": 0.3336080014705658}, {"id": 199, "seek": 77628, "start": 788.8, "end": 789.8, "text": " It has an MIT license.", "tokens": [50990, 467, 575, 364, 13100, 10476, 13, 51040], "temperature": 0.0, "avg_logprob": -0.23834386305375532, "compression_ratio": 1.6508474576271186, "no_speech_prob": 0.3336080014705658}, {"id": 200, "seek": 77628, "start": 789.8, "end": 793.88, "text": " I hope it may be of some interest here.", "tokens": [51040, 286, 1454, 309, 815, 312, 295, 512, 1179, 510, 13, 51244], "temperature": 0.0, "avg_logprob": -0.23834386305375532, "compression_ratio": 1.6508474576271186, "no_speech_prob": 0.3336080014705658}, {"id": 201, "seek": 77628, "start": 793.88, "end": 796.68, "text": " But as a relatively new developer, I'm quite welcome.", "tokens": [51244, 583, 382, 257, 7226, 777, 10754, 11, 286, 478, 1596, 2928, 13, 51384], "temperature": 0.0, "avg_logprob": -0.23834386305375532, "compression_ratio": 1.6508474576271186, "no_speech_prob": 0.3336080014705658}, {"id": 202, "seek": 77628, "start": 796.68, "end": 799.16, "text": " I welcome kind of feedback and advice.", "tokens": [51384, 286, 2928, 733, 295, 5824, 293, 5192, 13, 51508], "temperature": 0.0, "avg_logprob": -0.23834386305375532, "compression_ratio": 1.6508474576271186, "no_speech_prob": 0.3336080014705658}, {"id": 203, "seek": 77628, "start": 799.16, "end": 803.6, "text": " None of the team in the data and digital preservation department have computer science backgrounds.", "tokens": [51508, 14492, 295, 264, 1469, 294, 264, 1412, 293, 4562, 27257, 5882, 362, 3820, 3497, 17336, 13, 51730], "temperature": 0.0, "avg_logprob": -0.23834386305375532, "compression_ratio": 1.6508474576271186, "no_speech_prob": 0.3336080014705658}, {"id": 204, "seek": 80360, "start": 803.6, "end": 806.0400000000001, "text": " They're all archivists or TV people.", "tokens": [50364, 814, 434, 439, 3912, 592, 1751, 420, 3558, 561, 13, 50486], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 205, "seek": 80360, "start": 806.0400000000001, "end": 809.84, "text": " I used to be a cameraman and an independent documentary maker.", "tokens": [50486, 286, 1143, 281, 312, 257, 46858, 293, 364, 6695, 15674, 17127, 13, 50676], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 206, "seek": 80360, "start": 809.84, "end": 813.2, "text": " To be able to stand here and talk about this project like Stora, with just a few years", "tokens": [50676, 1407, 312, 1075, 281, 1463, 510, 293, 751, 466, 341, 1716, 411, 745, 3252, 11, 365, 445, 257, 1326, 924, 50844], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 207, "seek": 80360, "start": 813.2, "end": 816.44, "text": " coding experience is really mind blowing for me.", "tokens": [50844, 17720, 1752, 307, 534, 1575, 15068, 337, 385, 13, 51006], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 208, "seek": 80360, "start": 816.44, "end": 820.9200000000001, "text": " And particularly at a time when accurately recording our televised social history is", "tokens": [51006, 400, 4098, 412, 257, 565, 562, 20095, 6613, 527, 4304, 24420, 2093, 2503, 307, 51230], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 209, "seek": 80360, "start": 820.9200000000001, "end": 823.2, "text": " really just so critical.", "tokens": [51230, 534, 445, 370, 4924, 13, 51344], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 210, "seek": 80360, "start": 823.2, "end": 827.44, "text": " So this has really been made possible thanks to the open source tools we use and the developers", "tokens": [51344, 407, 341, 575, 534, 668, 1027, 1944, 3231, 281, 264, 1269, 4009, 3873, 321, 764, 293, 264, 8849, 51556], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 211, "seek": 80360, "start": 827.44, "end": 828.6800000000001, "text": " we see in the room here.", "tokens": [51556, 321, 536, 294, 264, 1808, 510, 13, 51618], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 212, "seek": 80360, "start": 828.6800000000001, "end": 831.5600000000001, "text": " Thank you from the archiving world.", "tokens": [51618, 1044, 291, 490, 264, 3912, 2123, 1002, 13, 51762], "temperature": 0.0, "avg_logprob": -0.16718455058772388, "compression_ratio": 1.6459016393442623, "no_speech_prob": 0.18794383108615875}, {"id": 213, "seek": 83156, "start": 831.56, "end": 835.56, "text": " And there's also quickly a growing interest in audio visual archives globally to try and", "tokens": [50364, 400, 456, 311, 611, 2661, 257, 4194, 1179, 294, 6278, 5056, 25607, 18958, 281, 853, 293, 50564], "temperature": 0.0, "avg_logprob": -0.1624482233721511, "compression_ratio": 1.6647230320699709, "no_speech_prob": 0.09848234057426453}, {"id": 214, "seek": 83156, "start": 835.56, "end": 838.52, "text": " work more with open source software and standards.", "tokens": [50564, 589, 544, 365, 1269, 4009, 4722, 293, 7787, 13, 50712], "temperature": 0.0, "avg_logprob": -0.1624482233721511, "compression_ratio": 1.6647230320699709, "no_speech_prob": 0.09848234057426453}, {"id": 215, "seek": 83156, "start": 838.52, "end": 842.0, "text": " Many of us meet annually at a conference called the No Time to Wait conference, which happens", "tokens": [50712, 5126, 295, 505, 1677, 29974, 412, 257, 7586, 1219, 264, 883, 6161, 281, 3802, 7586, 11, 597, 2314, 50886], "temperature": 0.0, "avg_logprob": -0.1624482233721511, "compression_ratio": 1.6647230320699709, "no_speech_prob": 0.09848234057426453}, {"id": 216, "seek": 83156, "start": 842.0, "end": 843.1199999999999, "text": " here in Europe.", "tokens": [50886, 510, 294, 3315, 13, 50942], "temperature": 0.0, "avg_logprob": -0.1624482233721511, "compression_ratio": 1.6647230320699709, "no_speech_prob": 0.09848234057426453}, {"id": 217, "seek": 83156, "start": 843.1199999999999, "end": 845.76, "text": " We welcome new attendees, who are developers, definitely.", "tokens": [50942, 492, 2928, 777, 34826, 11, 567, 366, 8849, 11, 2138, 13, 51074], "temperature": 0.0, "avg_logprob": -0.1624482233721511, "compression_ratio": 1.6647230320699709, "no_speech_prob": 0.09848234057426453}, {"id": 218, "seek": 83156, "start": 845.76, "end": 850.2399999999999, "text": " This conference has been connected with the development of the FFE1 codec, which was originally", "tokens": [51074, 639, 7586, 575, 668, 4582, 365, 264, 3250, 295, 264, 479, 28182, 16, 3089, 66, 11, 597, 390, 7993, 51298], "temperature": 0.0, "avg_logprob": -0.1624482233721511, "compression_ratio": 1.6647230320699709, "no_speech_prob": 0.09848234057426453}, {"id": 219, "seek": 83156, "start": 850.2399999999999, "end": 855.9599999999999, "text": " an FFMPEG project picked up and expanded by archivists working as developers.", "tokens": [51298, 364, 479, 37, 44, 5208, 38, 1716, 6183, 493, 293, 14342, 538, 3912, 592, 1751, 1364, 382, 8849, 13, 51584], "temperature": 0.0, "avg_logprob": -0.1624482233721511, "compression_ratio": 1.6647230320699709, "no_speech_prob": 0.09848234057426453}, {"id": 220, "seek": 83156, "start": 855.9599999999999, "end": 860.76, "text": " This codec is critical to the BFI's long term preservation of thousands of video and film", "tokens": [51584, 639, 3089, 66, 307, 4924, 281, 264, 363, 38568, 311, 938, 1433, 27257, 295, 5383, 295, 960, 293, 2007, 51824], "temperature": 0.0, "avg_logprob": -0.1624482233721511, "compression_ratio": 1.6647230320699709, "no_speech_prob": 0.09848234057426453}, {"id": 221, "seek": 86076, "start": 860.8, "end": 861.8, "text": " assets.", "tokens": [50366, 9769, 13, 50416], "temperature": 0.0, "avg_logprob": -0.15479684532235521, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.05024750903248787}, {"id": 222, "seek": 86076, "start": 861.8, "end": 867.4399999999999, "text": " So the maintenance and upkeep of projects like FFMPEG is really very important to us.", "tokens": [50416, 407, 264, 11258, 293, 493, 16055, 295, 4455, 411, 479, 37, 44, 5208, 38, 307, 534, 588, 1021, 281, 505, 13, 50698], "temperature": 0.0, "avg_logprob": -0.15479684532235521, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.05024750903248787}, {"id": 223, "seek": 86076, "start": 867.4399999999999, "end": 872.08, "text": " Traditionally archives have relied on expensive proprietary hardware, software and codecs that", "tokens": [50698, 22017, 15899, 25607, 362, 35463, 322, 5124, 38992, 8837, 11, 4722, 293, 3089, 14368, 300, 50930], "temperature": 0.0, "avg_logprob": -0.15479684532235521, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.05024750903248787}, {"id": 224, "seek": 86076, "start": 872.08, "end": 873.68, "text": " are not scalable.", "tokens": [50930, 366, 406, 38481, 13, 51010], "temperature": 0.0, "avg_logprob": -0.15479684532235521, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.05024750903248787}, {"id": 225, "seek": 86076, "start": 873.68, "end": 877.36, "text": " They keep their information behind paywalls and they're not likely to offer the kind", "tokens": [51010, 814, 1066, 641, 1589, 2261, 1689, 16256, 82, 293, 436, 434, 406, 3700, 281, 2626, 264, 733, 51194], "temperature": 0.0, "avg_logprob": -0.15479684532235521, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.05024750903248787}, {"id": 226, "seek": 86076, "start": 877.36, "end": 881.68, "text": " of technical support we need long enough into the future for long term preservation.", "tokens": [51194, 295, 6191, 1406, 321, 643, 938, 1547, 666, 264, 2027, 337, 938, 1433, 27257, 13, 51410], "temperature": 0.0, "avg_logprob": -0.15479684532235521, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.05024750903248787}, {"id": 227, "seek": 86076, "start": 881.68, "end": 886.08, "text": " So having open workflows and standards developed within our own community is incredibly empowering", "tokens": [51410, 407, 1419, 1269, 43461, 293, 7787, 4743, 1951, 527, 1065, 1768, 307, 6252, 28261, 51630], "temperature": 0.0, "avg_logprob": -0.15479684532235521, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.05024750903248787}, {"id": 228, "seek": 86076, "start": 886.08, "end": 887.08, "text": " for us.", "tokens": [51630, 337, 505, 13, 51680], "temperature": 0.0, "avg_logprob": -0.15479684532235521, "compression_ratio": 1.5940594059405941, "no_speech_prob": 0.05024750903248787}, {"id": 229, "seek": 88708, "start": 887.08, "end": 891.2, "text": " And yeah, this is the community where it's happening most, I would say, at the moment", "tokens": [50364, 400, 1338, 11, 341, 307, 264, 1768, 689, 309, 311, 2737, 881, 11, 286, 576, 584, 11, 412, 264, 1623, 50570], "temperature": 0.0, "avg_logprob": -0.2918770353672868, "compression_ratio": 1.3458646616541354, "no_speech_prob": 0.013719265349209309}, {"id": 230, "seek": 88708, "start": 891.2, "end": 892.2, "text": " in the UK, in Europe.", "tokens": [50570, 294, 264, 7051, 11, 294, 3315, 13, 50620], "temperature": 0.0, "avg_logprob": -0.2918770353672868, "compression_ratio": 1.3458646616541354, "no_speech_prob": 0.013719265349209309}, {"id": 231, "seek": 88708, "start": 892.2, "end": 893.2, "text": " That's it.", "tokens": [50620, 663, 311, 309, 13, 50670], "temperature": 0.0, "avg_logprob": -0.2918770353672868, "compression_ratio": 1.3458646616541354, "no_speech_prob": 0.013719265349209309}, {"id": 232, "seek": 88708, "start": 893.2, "end": 894.2, "text": " Thank you.", "tokens": [50670, 1044, 291, 13, 50720], "temperature": 0.0, "avg_logprob": -0.2918770353672868, "compression_ratio": 1.3458646616541354, "no_speech_prob": 0.013719265349209309}, {"id": 233, "seek": 88708, "start": 894.2, "end": 895.2, "text": " Thank you.", "tokens": [50720, 1044, 291, 13, 50770], "temperature": 0.0, "avg_logprob": -0.2918770353672868, "compression_ratio": 1.3458646616541354, "no_speech_prob": 0.013719265349209309}, {"id": 234, "seek": 88708, "start": 895.2, "end": 905.2800000000001, "text": " The next talk will be in five minutes.", "tokens": [50770, 440, 958, 751, 486, 312, 294, 1732, 2077, 13, 51274], "temperature": 0.0, "avg_logprob": -0.2918770353672868, "compression_ratio": 1.3458646616541354, "no_speech_prob": 0.013719265349209309}], "language": "en"}