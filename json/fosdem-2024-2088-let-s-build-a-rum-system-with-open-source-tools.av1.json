{"text": " Hello, everyone. Today I'm going to be talking about building a real user monitoring system with open source tools. And before I dive in, a bit more info about me. My name is Tvetan Stojchev. I work on MPALS in Akamai. MPALS is a real user monitoring system. It's a commercial one and it serves, I think, thousands of customers, Akamai customers. And my hobby project is basic run, which will be the focal point of this presentation. And really before I dive in, I would like to share a bit more about some of my other personal activities. Every December, I make an attempt to publish at least one blog post on the web performance calendar. That's the best place for the web performance to see us in the year. And the other thing is, sometimes I do a street art. So that's my safety net plan. If chat GPT takes over the world, I still will have something creative to do. Yeah. So let's now move on to the important part of the presentation. And let's take a look how, in general, how a real user monitoring system would look like. So we will need to have something in the browser, ideally a JavaScript agent, that will read some data and it will send it to a server. We will store it somewhere in a storage and later we will analyze this data. And here we just see the most trivial piece of JavaScript. This is the bare minimum that will do the job in the browser. So this piece of JavaScript will read what is the current page URL. And it will create a one by one image, one by one pixel image. It will append it to the HTML and this actually will create, will force the browser to create a request to this endpoint. And here is a really very simple code snippet on the server side, how the code will look like when we need to intercept this data and to store it somewhere. So here is our route where the browser will hit this route. We will read the query parameters, headers, headers, and even we will put a timestamp in the structure and then we'll save it to JSON on the file system and we will return back to the browser a transparent GIF. And eventually we will, on the next stage, when we want to analyze the data, we will go through all the files and we can create a summary for the page visits. And for example here in this example we can see that category four was the most visited page with 427 page visits. So that's the theory. And in 2019 I started as a hobby basicram and that's the initial version and the components that I used to build basicram. So on the browser side I started using an open source library called boomerang.js which collects a bunch of interesting metrics from the browser and sends them to a server. On the server side I used nginx and some PHP application code. And for storage I used mysql and for analyzing the data I still used php and for reading the data and serving it to a frontend and on the frontend I used plot.ly.js for visualizations. And I ended up with something like this. It actually, it's really interesting after five years it's still running. So if you want to give it a try this is the first version of basicram. You can visit demo.basicram.com and you can play with this UI. Now about boomerang.js. Boomerang.js was started 2011 in Yahoo by Philip Tellis who happened actually to be now a colleague of mine. And currently the library is maintained by MPAL's engineering team in Akamai. And as I mentioned the library collects a bunch of interesting metrics like the interesting ones for core web vitals, lcp, cls, fid. It also can track some session data. It can also help users of the library to create a timeline of all the clicks over the page like cycle of a visitor. And also it has more modern ways to send the data to the server like more modern JavaScript APIs fetch, XHR and send beacon. And it can be found on GitHub in akamai slash boomerang. On the back end side that's again like very theoretical but what actually was happening I still was every request that I was getting to my server I was saving it in a file. And then periodically I was running a cron job which here I just marked as a that's kind of a too much overhead and you understand why later. But I was running a cron job that was reading all these collected files and I was creating one big batch and I was inserting this data in my SQL. I also ended up with a database model that's very biased. My previous background was I was building Magento online shops and if somebody ever worked with Magento we'll probably recognize some patterns about all these foreign key relationships and this main table that's in the center of everything. I had to put bunch of indexes here and again this created a bit too much overhead for I would say also on the code level like on the application level but also for me as a maintainer. So I had to take care about again every time when I wanted to introduce some new dimension I had to create a new table and to put a bit more code for inserting the data and it was just too much maintenance for me. Also I had to take care about not duplicating some of the data here and this is because of the nature of PHP. PHP is kind of a stateless so every request is independent from the other request so I couldn't keep some things in memory. If I could keep some references in memory I probably could optimize some things here. And actually question to the audience do you have an idea what this query actually would produce? What's the idea behind this query? Maybe. I can say that. Bucketing? Yeah it's a bucketing for a histogram and I also had to write a lot of kind of queries that are in the data scientists type of queries which also was for me introduced a bit of a learning curve but the system had really had coded in itself such type of queries and this here represents a histogram of the time to first byte. Like we can see that the median is around 1.8 seconds. It's a bit skewed. And with the help of plotly the JavaScript library for visualization I could create such panels for distributions for operating systems and mobile operating systems and I also could write such bar charts that were showing kind of the relationship between the first byte and start render time. And yeah reference to the plotly it's a really cool library really rich and you can create a bunch of panels with it. But I found myself like having difficulties and probably not focusing at the right place. So as I say when you build a real user monitoring system you need to change your mindset and your queries should be more like in data scientist style. And the PHP were out and the ORM that I was using I was using doctrine. It's not really meant for writing complex queries from this fashion. So I found myself writing my own query builder and using doctrine when convenient and using my query builder when convenient but this was again too much maintenance for just for a single maintainer of a project. I also wanted to introduce user management and permission system but again with my limited time and working from time to time on the project during the weekends this was just again too much it was not the right focus. I wanted just to show some meaningful data. And yeah I really love plotly but I just ended up with large blobs of JavaScript here and there and it was more like more and more plotlier. I wanted to see data not writing JavaScript. So I took a break I believe half a year and I focused on my main job but from time to time I was doing research and I was reading some other articles about time series databases and I started exploring some of the open source available open source systems for visualization. So I kind of rebuilt the complete backend. I still kept boomerang but I rewritten the server site so I completely removed nginx and PHP and I used golang. I replaced my SQL with click house and I replaced all the custom code all the PHP and plotlier with grafana. And again if you would like to play with the current version of basicram that's what I ended up with that's actually a let's say a bit of rebranded version of grafana with the specific basicram dashboards and settings. So if you would like to play with it just visit this address and write calendar calendar as a username and password. So where golang was really useful, golang it's just different paradigm it's a different idea compared to PHP. Golang you can compile a single binary that and in this single binary everything that I needed was packaged inside the binary so it's just a process that you run on the server and it has everything inside and this allow me to replace the actually to get rid of nginx because golang has a package for built in htp server and yes PHP also has a package for PHP for htp server but you need to do a lot of work arounds to make it working because just not native in this is not native in PHP. I also could leverage the existing click house package in golang for interacting with the click house database and I took advantage of asynchronous insert which saved me a lot of I could get rid of some code that I had in the PHP version of the basicram. Also in golang it was very easy to create a backup mechanism for all the data that was flowing through the system because in golang I could easily keep stuff in memory I didn't have to write each request to the system on a file and later to batch it and bundle it. I was just keeping these data points and requests in for example in memory for 10 minutes and I could just flush them on the hard drive and compress them and this was again really really easy few lines of code and just natively coming in golang and also for some cases where I needed encryption again in golang there is a let's encrypt package it's a third-party package but I could easily just spin a server and say okay I want to use let's encrypt and I was getting secure connection to this server with it it really reduced the operation the effort on the operation site. I also took advantage of a gip lookup library which is using the maxmind database and why I needed this because in a real user monitoring system you would like to see from which city a visitor visited the website or from which country visited the website this is really helpful when you want to create a report and when you want to figure out maybe in which country is your website is slow. I also took advantage of another library about user agent parsing so this library helped me to extract important information about the browser name the operating system and the user agent family and I also started using my new favorite database Clickhouse. So you remember where I say that I was doing a lot of work when I was like batching and bundling everything and inserting these big batches in MySQL. Clickhouse comes with a really cool feature called asynchronous inserts so Clickhouse allowed me every time when a request reaches my back end to immediately to create an insert to Clickhouse and Clickhouse was internally batching this and it was deciding where it needs to insert in the database so this was not this helped to like not reach some performance botonics. Another thing that I could do with Clickhouse so here you see I have seven tables in the old setup with MySQL but in Clickhouse I actually end up with two tables and I actually could I actually could have one table but I needed this table for showing the host names in the filters in Grafana and just Clickhouse or in general when you work when we work with time series the main idea is that here the the the data is normalized I try to really build to build a user monitoring system in the fashion of a webshop right which is really the wrong idea but when we use time series database the idea is that the data you can just throw your data into this database you you have one large fat table and you throw a lot of data and you don't really need to consider duplication of the data for example here we have this filter's device type and I don't have a foreign key here to another table where I keep references to all the device types I just can insert and insert the same string over and over again desktop desktop desktop and this database will be completely fine with it it will compress the data internally and I won't experience any performance bottlenecks when I filter by this field and here is my other favorite feature in Clickhouse it's called it's called low cardinality data type and this data type is really convenient for columns where the distinct values in this column some less less than 10 000 because this it's optimizing eternally and it's the the where conditions and the filters in this case are much much faster when we use low cardinality we if if we have more than 10 000 distinct values we probably need to go again to something like this and to start introducing additional dimension tables also so here in left is really uh I would say insane I even don't know how I created this I still I'm really surprised with myself and you we cannot zoom in here but this was a process where it included querying my my secure database and I had some application code and I had bunch of cron jobs and this was trying to guess and to find out all the sessions that bounced and what was the duration of the sessions it was just really complex and for example to to calculate the bounce rate with my new setup in Clickhouse I just could use such a query again I got a bit help with this query I don't completely understand it but it does it actually it works and it's much more simple and much much more it makes my it makes basic run much much easier to maintain and with with this query I could actually create easily this correlation between bounce rate and epic and metric and in our case this is time to first bite also I want to say that open source is not only about how great is the open source product that you work with but also the community is very important and that's why I also stick to Clickhouse they have really great slack community and every time when I ask a question I I can say that in the matter of a few hours I get really a good response for example here I'm asking hey I I wrote this query but I feel that it's not optimal I'm not a SQL expert and here another expert actually suggested a better way how to write this query it's it's shorter and it's much more performant and also probably this is the first and probably the last database channel YouTube channel that I will be subscribed but I'm actually subscribed to the Clickhouse YouTube channel and they have really really good videos like they have every month they have like a release party video where the the Clickhouse team is showing the new features and there are a lot of good tutorials so it's it's really welcoming for for beginners and they say you get support from the community and there is really good there are really good materials out there so now let's look at the user interface Grafana earlier I mentioned that I was about to start in my in the first version of basicram I was about to start implementing my own my own user management and login and authentication and Grafana this comes out of the box so it's much easier to add new user to give them different permissions and again this is just the code that I would never want to write again right and in this repository I bundle the basicram version of Grafana it has some customizations also another benefit of Grafana is it's very easy to model the data and what you want to see in the in the visualization panels so for example here we have we can define filters we can have a preview of our data we can also configure different things for example here I'm just showing how I can configure different colors for the different thresholds and also there is an SQL editor so when I write the SQL here this Grafana uses this SQL to fetch the data from Clickhouse and here are other panels that I took advantage of here is the world map so I could it was really literally plug-and-play I just configured few stuff and I say it from where to read the data about the countries Grafana also has a third-party plugin for plotly so I still there were scenarios where I wanted to build some more complex panels and with this panel I could actually build this one which is showing how the device the screen size is the width of the screen size is distributed yeah time series this is the kind of the most the default view in Grafana and also I could present the data in a table this is very good when you want to explore your own data also Grafana comes with different data sources and of course Grafana needs to know how to talk to Clickhouse in my in basic realm I'm using a data source developed by company called Altinity but there is also another one developed by actually official by Clickhouse right yeah and just to say that all these things that I'm showing all these dashboards that are built in in the basic version of Grafana everything there is actually under version control so it's not just that I created a dashboard in Grafana instance and exported it and save it somewhere this I have this repository where I have the configuration for each of the panels that I'm maintaining and then this makes makes it much easier when I need to change something or to add a new panel and I can go through the history and I can understand what actually change if something has to be reverted yeah for example here we are seeing how I keep this row as it's a templated SQL but this is how it's presented then when we look in Grafana and again out of all this source code configuration that I keep for the dashboards I'm building a docker image where we here we have a bit of branding work just removing some things from the default or rewriting some things from the default Grafana image here we are installing the plugins that we need for our setup and here we are importing all the configurations for the dashboards and the data sources and what I found over time when I spoke to different people who asked me about three user monitoring systems very often the conversation was just ending when when I was explaining yeah you need to run this component on this server and you need to run this component on this server and you don't need to run this component on this server and it looks like their use case the use case of the people that I spoke to was actually not requiring them to scale they had pretty small websites or web shops and I work on something a bit more monolithic it's called basicrum o in one and the idea is that probably again probably it sounds from engineering point of view a bad practice but it actually could be really practical thing the idea is to run everything on one big box and I believe for 20 euro a month this could be actually hosted somewhere and I tested it it can handle 1.5 million page views a month and the idea here is we introduced traffic which is a proxy it stays in front of this folder components and it's helping me for SSL termination and routing request because some of the request needs to go to the data collection part and other request needs to go to the grafana to the part where we analyze the data so this is really convenient it's really easy for people if you just want to give it a try and a few takeaways I just have to say that a real user monitoring system is fairly complex system and you need to learn to train yourself you want to develop one you need to you need to learn more about on the data collection site where how the data is collected from the browser how to visualize the data and it will be a bonus if you learn about how time series databases work again choosing the right database to solve the right problem is the key and it's great when when you can transfer a problem from the application on the database layer it just saves a lot of time and yeah grafana could save a lot of time and effort even I recommend it even if you still want to build your own front end maybe just start with grafana to play with the data and to display something it literally will save a lot of time and I got a signal that I run out of time but you can catch me up all right I can take one question so in this project we don't really keep any IP addresses so for example that I guess that's what we consider like user data or yeah so the backend doesn't store any personal data in this case so by default it's using the IP address only to identify the country and the the city but it's not storing the IP address after that and I know that on the data collection site from the boomerang library I'm not sure if it's on the boomerang library has also like part of the boomerang source code is private but I know that for PCI compliance reasons it has special parts that try to avoid collecting stuff around the user sometimes the user may put for example a credit card number and this could be actually collected by mistake so this library also tries to avoid collecting critical user information do you mean to consent the cons so the library comes with a special snippet that's a loader snippet so you can have your own callback so you can you can call this loader snippet only after a cookie consent so it's possible you", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.76, "text": " Hello, everyone. Today I'm going to be talking about building a real user monitoring system", "tokens": [50364, 2425, 11, 1518, 13, 2692, 286, 478, 516, 281, 312, 1417, 466, 2390, 257, 957, 4195, 11028, 1185, 51052], "temperature": 0.0, "avg_logprob": -0.26383856932322186, "compression_ratio": 1.3115942028985508, "no_speech_prob": 0.4813079237937927}, {"id": 1, "seek": 0, "start": 13.76, "end": 20.64, "text": " with open source tools. And before I dive in, a bit more info about me. My name is Tvetan", "tokens": [51052, 365, 1269, 4009, 3873, 13, 400, 949, 286, 9192, 294, 11, 257, 857, 544, 13614, 466, 385, 13, 1222, 1315, 307, 314, 9771, 282, 51396], "temperature": 0.0, "avg_logprob": -0.26383856932322186, "compression_ratio": 1.3115942028985508, "no_speech_prob": 0.4813079237937927}, {"id": 2, "seek": 2064, "start": 20.64, "end": 31.04, "text": " Stojchev. I work on MPALS in Akamai. MPALS is a real user monitoring system. It's a commercial one", "tokens": [50364, 745, 37224, 1876, 85, 13, 286, 589, 322, 14146, 3427, 50, 294, 9629, 335, 1301, 13, 14146, 3427, 50, 307, 257, 957, 4195, 11028, 1185, 13, 467, 311, 257, 6841, 472, 50884], "temperature": 0.0, "avg_logprob": -0.1962849974632263, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.17556849122047424}, {"id": 3, "seek": 2064, "start": 31.04, "end": 39.760000000000005, "text": " and it serves, I think, thousands of customers, Akamai customers. And my hobby project is basic", "tokens": [50884, 293, 309, 13451, 11, 286, 519, 11, 5383, 295, 4581, 11, 9629, 335, 1301, 4581, 13, 400, 452, 18240, 1716, 307, 3875, 51320], "temperature": 0.0, "avg_logprob": -0.1962849974632263, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.17556849122047424}, {"id": 4, "seek": 2064, "start": 39.760000000000005, "end": 46.56, "text": " run, which will be the focal point of this presentation. And really before I dive in,", "tokens": [51320, 1190, 11, 597, 486, 312, 264, 26592, 935, 295, 341, 5860, 13, 400, 534, 949, 286, 9192, 294, 11, 51660], "temperature": 0.0, "avg_logprob": -0.1962849974632263, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.17556849122047424}, {"id": 5, "seek": 4656, "start": 46.56, "end": 51.92, "text": " I would like to share a bit more about some of my other personal activities. Every December,", "tokens": [50364, 286, 576, 411, 281, 2073, 257, 857, 544, 466, 512, 295, 452, 661, 2973, 5354, 13, 2048, 7687, 11, 50632], "temperature": 0.0, "avg_logprob": -0.10201730935469917, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.025215361267328262}, {"id": 6, "seek": 4656, "start": 52.800000000000004, "end": 58.0, "text": " I make an attempt to publish at least one blog post on the web performance calendar.", "tokens": [50676, 286, 652, 364, 5217, 281, 11374, 412, 1935, 472, 6968, 2183, 322, 264, 3670, 3389, 12183, 13, 50936], "temperature": 0.0, "avg_logprob": -0.10201730935469917, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.025215361267328262}, {"id": 7, "seek": 4656, "start": 58.0, "end": 64.08, "text": " That's the best place for the web performance to see us in the year. And the other thing is,", "tokens": [50936, 663, 311, 264, 1151, 1081, 337, 264, 3670, 3389, 281, 536, 505, 294, 264, 1064, 13, 400, 264, 661, 551, 307, 11, 51240], "temperature": 0.0, "avg_logprob": -0.10201730935469917, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.025215361267328262}, {"id": 8, "seek": 4656, "start": 64.96000000000001, "end": 71.04, "text": " sometimes I do a street art. So that's my safety net plan. If chat GPT takes over the world,", "tokens": [51284, 2171, 286, 360, 257, 4838, 1523, 13, 407, 300, 311, 452, 4514, 2533, 1393, 13, 759, 5081, 26039, 51, 2516, 670, 264, 1002, 11, 51588], "temperature": 0.0, "avg_logprob": -0.10201730935469917, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.025215361267328262}, {"id": 9, "seek": 7104, "start": 71.04, "end": 78.16000000000001, "text": " I still will have something creative to do. Yeah. So let's now move on to the important part of", "tokens": [50364, 286, 920, 486, 362, 746, 5880, 281, 360, 13, 865, 13, 407, 718, 311, 586, 1286, 322, 281, 264, 1021, 644, 295, 50720], "temperature": 0.0, "avg_logprob": -0.0962554749022139, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0188194140791893}, {"id": 10, "seek": 7104, "start": 78.16000000000001, "end": 85.84, "text": " the presentation. And let's take a look how, in general, how a real user monitoring system", "tokens": [50720, 264, 5860, 13, 400, 718, 311, 747, 257, 574, 577, 11, 294, 2674, 11, 577, 257, 957, 4195, 11028, 1185, 51104], "temperature": 0.0, "avg_logprob": -0.0962554749022139, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0188194140791893}, {"id": 11, "seek": 7104, "start": 85.84, "end": 93.36000000000001, "text": " would look like. So we will need to have something in the browser, ideally a JavaScript agent,", "tokens": [51104, 576, 574, 411, 13, 407, 321, 486, 643, 281, 362, 746, 294, 264, 11185, 11, 22915, 257, 15778, 9461, 11, 51480], "temperature": 0.0, "avg_logprob": -0.0962554749022139, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0188194140791893}, {"id": 12, "seek": 7104, "start": 93.36000000000001, "end": 100.24000000000001, "text": " that will read some data and it will send it to a server. We will store it somewhere in a storage", "tokens": [51480, 300, 486, 1401, 512, 1412, 293, 309, 486, 2845, 309, 281, 257, 7154, 13, 492, 486, 3531, 309, 4079, 294, 257, 6725, 51824], "temperature": 0.0, "avg_logprob": -0.0962554749022139, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.0188194140791893}, {"id": 13, "seek": 10024, "start": 100.24, "end": 106.08, "text": " and later we will analyze this data. And here we just see the most trivial piece of JavaScript.", "tokens": [50364, 293, 1780, 321, 486, 12477, 341, 1412, 13, 400, 510, 321, 445, 536, 264, 881, 26703, 2522, 295, 15778, 13, 50656], "temperature": 0.0, "avg_logprob": -0.10298994093230276, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.010463510639965534}, {"id": 14, "seek": 10024, "start": 106.08, "end": 113.03999999999999, "text": " This is the bare minimum that will do the job in the browser. So this piece of JavaScript will", "tokens": [50656, 639, 307, 264, 6949, 7285, 300, 486, 360, 264, 1691, 294, 264, 11185, 13, 407, 341, 2522, 295, 15778, 486, 51004], "temperature": 0.0, "avg_logprob": -0.10298994093230276, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.010463510639965534}, {"id": 15, "seek": 10024, "start": 114.39999999999999, "end": 122.72, "text": " read what is the current page URL. And it will create a one by one image,", "tokens": [51072, 1401, 437, 307, 264, 2190, 3028, 12905, 13, 400, 309, 486, 1884, 257, 472, 538, 472, 3256, 11, 51488], "temperature": 0.0, "avg_logprob": -0.10298994093230276, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.010463510639965534}, {"id": 16, "seek": 12272, "start": 123.67999999999999, "end": 130.88, "text": " one by one pixel image. It will append it to the HTML and this actually will create,", "tokens": [50412, 472, 538, 472, 19261, 3256, 13, 467, 486, 34116, 309, 281, 264, 17995, 293, 341, 767, 486, 1884, 11, 50772], "temperature": 0.0, "avg_logprob": -0.20489246195012872, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.008946913294494152}, {"id": 17, "seek": 12272, "start": 131.6, "end": 139.76, "text": " will force the browser to create a request to this endpoint. And here is a really very simple", "tokens": [50808, 486, 3464, 264, 11185, 281, 1884, 257, 5308, 281, 341, 35795, 13, 400, 510, 307, 257, 534, 588, 2199, 51216], "temperature": 0.0, "avg_logprob": -0.20489246195012872, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.008946913294494152}, {"id": 18, "seek": 12272, "start": 141.04, "end": 147.92, "text": " code snippet on the server side, how the code will look like when we need to intercept this", "tokens": [51280, 3089, 35623, 302, 322, 264, 7154, 1252, 11, 577, 264, 3089, 486, 574, 411, 562, 321, 643, 281, 24700, 341, 51624], "temperature": 0.0, "avg_logprob": -0.20489246195012872, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.008946913294494152}, {"id": 19, "seek": 14792, "start": 147.92, "end": 155.51999999999998, "text": " data and to store it somewhere. So here is our route where the browser will hit this route.", "tokens": [50364, 1412, 293, 281, 3531, 309, 4079, 13, 407, 510, 307, 527, 7955, 689, 264, 11185, 486, 2045, 341, 7955, 13, 50744], "temperature": 0.0, "avg_logprob": -0.14417193563360917, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.006422136910259724}, {"id": 20, "seek": 14792, "start": 155.51999999999998, "end": 159.76, "text": " We will read the query parameters, headers, headers, and even we will put a timestamp in", "tokens": [50744, 492, 486, 1401, 264, 14581, 9834, 11, 45101, 11, 45101, 11, 293, 754, 321, 486, 829, 257, 49108, 1215, 294, 50956], "temperature": 0.0, "avg_logprob": -0.14417193563360917, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.006422136910259724}, {"id": 21, "seek": 14792, "start": 159.76, "end": 165.27999999999997, "text": " the structure and then we'll save it to JSON on the file system and we will return back to the", "tokens": [50956, 264, 3877, 293, 550, 321, 603, 3155, 309, 281, 31828, 322, 264, 3991, 1185, 293, 321, 486, 2736, 646, 281, 264, 51232], "temperature": 0.0, "avg_logprob": -0.14417193563360917, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.006422136910259724}, {"id": 22, "seek": 14792, "start": 165.27999999999997, "end": 174.95999999999998, "text": " browser a transparent GIF. And eventually we will, on the next stage, when we want to analyze the data,", "tokens": [51232, 11185, 257, 12737, 460, 12775, 13, 400, 4728, 321, 486, 11, 322, 264, 958, 3233, 11, 562, 321, 528, 281, 12477, 264, 1412, 11, 51716], "temperature": 0.0, "avg_logprob": -0.14417193563360917, "compression_ratio": 1.676991150442478, "no_speech_prob": 0.006422136910259724}, {"id": 23, "seek": 17496, "start": 175.6, "end": 182.56, "text": " we will go through all the files and we can create a summary for the page visits. And for", "tokens": [50396, 321, 486, 352, 807, 439, 264, 7098, 293, 321, 393, 1884, 257, 12691, 337, 264, 3028, 17753, 13, 400, 337, 50744], "temperature": 0.0, "avg_logprob": -0.1617157254900251, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.018140023574233055}, {"id": 24, "seek": 17496, "start": 182.56, "end": 188.8, "text": " example here in this example we can see that category four was the most visited page with 427", "tokens": [50744, 1365, 510, 294, 341, 1365, 321, 393, 536, 300, 7719, 1451, 390, 264, 881, 11220, 3028, 365, 1017, 10076, 51056], "temperature": 0.0, "avg_logprob": -0.1617157254900251, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.018140023574233055}, {"id": 25, "seek": 17496, "start": 190.48000000000002, "end": 200.08, "text": " page visits. So that's the theory. And in 2019 I started as a hobby basicram and that's the", "tokens": [51140, 3028, 17753, 13, 407, 300, 311, 264, 5261, 13, 400, 294, 6071, 286, 1409, 382, 257, 18240, 3875, 2356, 293, 300, 311, 264, 51620], "temperature": 0.0, "avg_logprob": -0.1617157254900251, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.018140023574233055}, {"id": 26, "seek": 20008, "start": 200.08, "end": 209.12, "text": " initial version and the components that I used to build basicram. So on the browser side I started", "tokens": [50364, 5883, 3037, 293, 264, 6677, 300, 286, 1143, 281, 1322, 3875, 2356, 13, 407, 322, 264, 11185, 1252, 286, 1409, 50816], "temperature": 0.0, "avg_logprob": -0.13737855238073013, "compression_ratio": 1.5380434782608696, "no_speech_prob": 0.015420399606227875}, {"id": 27, "seek": 20008, "start": 209.12, "end": 215.36, "text": " using an open source library called boomerang.js which collects a bunch of interesting metrics", "tokens": [50816, 1228, 364, 1269, 4009, 6405, 1219, 9351, 260, 656, 13, 25530, 597, 39897, 257, 3840, 295, 1880, 16367, 51128], "temperature": 0.0, "avg_logprob": -0.13737855238073013, "compression_ratio": 1.5380434782608696, "no_speech_prob": 0.015420399606227875}, {"id": 28, "seek": 20008, "start": 215.36, "end": 224.16000000000003, "text": " from the browser and sends them to a server. On the server side I used nginx and some PHP", "tokens": [51128, 490, 264, 11185, 293, 14790, 552, 281, 257, 7154, 13, 1282, 264, 7154, 1252, 286, 1143, 297, 1494, 87, 293, 512, 47298, 51568], "temperature": 0.0, "avg_logprob": -0.13737855238073013, "compression_ratio": 1.5380434782608696, "no_speech_prob": 0.015420399606227875}, {"id": 29, "seek": 22416, "start": 224.16, "end": 234.96, "text": " application code. And for storage I used mysql and for analyzing the data I still used php and", "tokens": [50364, 3861, 3089, 13, 400, 337, 6725, 286, 1143, 452, 82, 80, 75, 293, 337, 23663, 264, 1412, 286, 920, 1143, 903, 79, 293, 50904], "temperature": 0.0, "avg_logprob": -0.19130015071434311, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.013438967987895012}, {"id": 30, "seek": 22416, "start": 234.96, "end": 242.32, "text": " for reading the data and serving it to a frontend and on the frontend I used plot.ly.js for visualizations.", "tokens": [50904, 337, 3760, 264, 1412, 293, 8148, 309, 281, 257, 1868, 521, 293, 322, 264, 1868, 521, 286, 1143, 7542, 13, 356, 13, 25530, 337, 5056, 14455, 13, 51272], "temperature": 0.0, "avg_logprob": -0.19130015071434311, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.013438967987895012}, {"id": 31, "seek": 22416, "start": 244.07999999999998, "end": 250.32, "text": " And I ended up with something like this. It actually, it's really interesting after five years it's", "tokens": [51360, 400, 286, 4590, 493, 365, 746, 411, 341, 13, 467, 767, 11, 309, 311, 534, 1880, 934, 1732, 924, 309, 311, 51672], "temperature": 0.0, "avg_logprob": -0.19130015071434311, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.013438967987895012}, {"id": 32, "seek": 25032, "start": 250.32, "end": 255.35999999999999, "text": " still running. So if you want to give it a try this is the first version of basicram. You can", "tokens": [50364, 920, 2614, 13, 407, 498, 291, 528, 281, 976, 309, 257, 853, 341, 307, 264, 700, 3037, 295, 3875, 2356, 13, 509, 393, 50616], "temperature": 0.0, "avg_logprob": -0.1502610206604004, "compression_ratio": 1.4191919191919191, "no_speech_prob": 0.012400312349200249}, {"id": 33, "seek": 25032, "start": 255.35999999999999, "end": 267.12, "text": " visit demo.basicram.com and you can play with this UI. Now about boomerang.js. Boomerang.js was", "tokens": [50616, 3441, 10723, 13, 16342, 299, 2356, 13, 1112, 293, 291, 393, 862, 365, 341, 15682, 13, 823, 466, 9351, 260, 656, 13, 25530, 13, 15523, 260, 656, 13, 25530, 390, 51204], "temperature": 0.0, "avg_logprob": -0.1502610206604004, "compression_ratio": 1.4191919191919191, "no_speech_prob": 0.012400312349200249}, {"id": 34, "seek": 25032, "start": 267.12, "end": 273.6, "text": " started 2011 in Yahoo by Philip Tellis who happened actually to be now a colleague of mine.", "tokens": [51204, 1409, 10154, 294, 41757, 538, 21144, 5115, 271, 567, 2011, 767, 281, 312, 586, 257, 13532, 295, 3892, 13, 51528], "temperature": 0.0, "avg_logprob": -0.1502610206604004, "compression_ratio": 1.4191919191919191, "no_speech_prob": 0.012400312349200249}, {"id": 35, "seek": 27360, "start": 274.48, "end": 281.36, "text": " And currently the library is maintained by MPAL's engineering team in Akamai.", "tokens": [50408, 400, 4362, 264, 6405, 307, 17578, 538, 14146, 3427, 311, 7043, 1469, 294, 9629, 335, 1301, 13, 50752], "temperature": 0.0, "avg_logprob": -0.14511700514908676, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.029818164184689522}, {"id": 36, "seek": 27360, "start": 282.16, "end": 286.24, "text": " And as I mentioned the library collects a bunch of interesting metrics like the", "tokens": [50792, 400, 382, 286, 2835, 264, 6405, 39897, 257, 3840, 295, 1880, 16367, 411, 264, 50996], "temperature": 0.0, "avg_logprob": -0.14511700514908676, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.029818164184689522}, {"id": 37, "seek": 27360, "start": 286.24, "end": 294.40000000000003, "text": " interesting ones for core web vitals, lcp, cls, fid. It also can track some session data. It can also", "tokens": [50996, 1880, 2306, 337, 4965, 3670, 9467, 1124, 11, 287, 66, 79, 11, 596, 82, 11, 283, 327, 13, 467, 611, 393, 2837, 512, 5481, 1412, 13, 467, 393, 611, 51404], "temperature": 0.0, "avg_logprob": -0.14511700514908676, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.029818164184689522}, {"id": 38, "seek": 27360, "start": 294.40000000000003, "end": 303.04, "text": " help users of the library to create a timeline of all the clicks over the page like cycle of a visitor.", "tokens": [51404, 854, 5022, 295, 264, 6405, 281, 1884, 257, 12933, 295, 439, 264, 18521, 670, 264, 3028, 411, 6586, 295, 257, 28222, 13, 51836], "temperature": 0.0, "avg_logprob": -0.14511700514908676, "compression_ratio": 1.635135135135135, "no_speech_prob": 0.029818164184689522}, {"id": 39, "seek": 30360, "start": 303.92, "end": 310.24, "text": " And also it has more modern ways to send the data to the server like more modern", "tokens": [50380, 400, 611, 309, 575, 544, 4363, 2098, 281, 2845, 264, 1412, 281, 264, 7154, 411, 544, 4363, 50696], "temperature": 0.0, "avg_logprob": -0.16707828079444775, "compression_ratio": 1.4263157894736842, "no_speech_prob": 0.004144112579524517}, {"id": 40, "seek": 30360, "start": 310.24, "end": 319.36, "text": " JavaScript APIs fetch, XHR and send beacon. And it can be found on GitHub in akamai slash boomerang.", "tokens": [50696, 15778, 21445, 23673, 11, 1783, 39, 49, 293, 2845, 41669, 13, 400, 309, 393, 312, 1352, 322, 23331, 294, 9308, 335, 1301, 17330, 9351, 260, 656, 13, 51152], "temperature": 0.0, "avg_logprob": -0.16707828079444775, "compression_ratio": 1.4263157894736842, "no_speech_prob": 0.004144112579524517}, {"id": 41, "seek": 30360, "start": 321.36, "end": 327.6, "text": " On the back end side that's again like very theoretical but what actually was happening I", "tokens": [51252, 1282, 264, 646, 917, 1252, 300, 311, 797, 411, 588, 20864, 457, 437, 767, 390, 2737, 286, 51564], "temperature": 0.0, "avg_logprob": -0.16707828079444775, "compression_ratio": 1.4263157894736842, "no_speech_prob": 0.004144112579524517}, {"id": 42, "seek": 32760, "start": 327.6, "end": 332.96000000000004, "text": " still was every request that I was getting to my server I was saving it in a file.", "tokens": [50364, 920, 390, 633, 5308, 300, 286, 390, 1242, 281, 452, 7154, 286, 390, 6816, 309, 294, 257, 3991, 13, 50632], "temperature": 0.0, "avg_logprob": -0.12960786404817, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01460869237780571}, {"id": 43, "seek": 32760, "start": 334.0, "end": 340.08000000000004, "text": " And then periodically I was running a cron job which here I just marked as a that's kind of a", "tokens": [50684, 400, 550, 38916, 286, 390, 2614, 257, 941, 266, 1691, 597, 510, 286, 445, 12658, 382, 257, 300, 311, 733, 295, 257, 50988], "temperature": 0.0, "avg_logprob": -0.12960786404817, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01460869237780571}, {"id": 44, "seek": 32760, "start": 340.08000000000004, "end": 345.6, "text": " too much overhead and you understand why later. But I was running a cron job that was reading all", "tokens": [50988, 886, 709, 19922, 293, 291, 1223, 983, 1780, 13, 583, 286, 390, 2614, 257, 941, 266, 1691, 300, 390, 3760, 439, 51264], "temperature": 0.0, "avg_logprob": -0.12960786404817, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01460869237780571}, {"id": 45, "seek": 32760, "start": 345.6, "end": 352.48, "text": " these collected files and I was creating one big batch and I was inserting this data in my SQL.", "tokens": [51264, 613, 11087, 7098, 293, 286, 390, 4084, 472, 955, 15245, 293, 286, 390, 46567, 341, 1412, 294, 452, 19200, 13, 51608], "temperature": 0.0, "avg_logprob": -0.12960786404817, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.01460869237780571}, {"id": 46, "seek": 35248, "start": 352.88, "end": 364.16, "text": " I also ended up with a database model that's very biased. My previous background was I was building", "tokens": [50384, 286, 611, 4590, 493, 365, 257, 8149, 2316, 300, 311, 588, 28035, 13, 1222, 3894, 3678, 390, 286, 390, 2390, 50948], "temperature": 0.0, "avg_logprob": -0.18956460058689117, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.007648006081581116}, {"id": 47, "seek": 35248, "start": 364.16, "end": 370.88, "text": " Magento online shops and if somebody ever worked with Magento we'll probably recognize some patterns", "tokens": [50948, 6395, 15467, 2950, 14457, 293, 498, 2618, 1562, 2732, 365, 6395, 15467, 321, 603, 1391, 5521, 512, 8294, 51284], "temperature": 0.0, "avg_logprob": -0.18956460058689117, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.007648006081581116}, {"id": 48, "seek": 35248, "start": 370.88, "end": 376.88, "text": " about all these foreign key relationships and this main table that's in the center of everything.", "tokens": [51284, 466, 439, 613, 5329, 2141, 6159, 293, 341, 2135, 3199, 300, 311, 294, 264, 3056, 295, 1203, 13, 51584], "temperature": 0.0, "avg_logprob": -0.18956460058689117, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.007648006081581116}, {"id": 49, "seek": 37688, "start": 377.84, "end": 386.8, "text": " I had to put bunch of indexes here and again this created a bit too much overhead for I would say", "tokens": [50412, 286, 632, 281, 829, 3840, 295, 8186, 279, 510, 293, 797, 341, 2942, 257, 857, 886, 709, 19922, 337, 286, 576, 584, 50860], "temperature": 0.0, "avg_logprob": -0.12274923029634141, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.017251884564757347}, {"id": 50, "seek": 37688, "start": 386.8, "end": 391.6, "text": " also on the code level like on the application level but also for me as a maintainer. So I had to", "tokens": [50860, 611, 322, 264, 3089, 1496, 411, 322, 264, 3861, 1496, 457, 611, 337, 385, 382, 257, 6909, 260, 13, 407, 286, 632, 281, 51100], "temperature": 0.0, "avg_logprob": -0.12274923029634141, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.017251884564757347}, {"id": 51, "seek": 37688, "start": 391.6, "end": 398.96, "text": " take care about again every time when I wanted to introduce some new dimension I had to create a new", "tokens": [51100, 747, 1127, 466, 797, 633, 565, 562, 286, 1415, 281, 5366, 512, 777, 10139, 286, 632, 281, 1884, 257, 777, 51468], "temperature": 0.0, "avg_logprob": -0.12274923029634141, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.017251884564757347}, {"id": 52, "seek": 37688, "start": 398.96, "end": 404.71999999999997, "text": " table and to put a bit more code for inserting the data and it was just too much maintenance for me.", "tokens": [51468, 3199, 293, 281, 829, 257, 857, 544, 3089, 337, 46567, 264, 1412, 293, 309, 390, 445, 886, 709, 11258, 337, 385, 13, 51756], "temperature": 0.0, "avg_logprob": -0.12274923029634141, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.017251884564757347}, {"id": 53, "seek": 40472, "start": 405.36, "end": 412.72, "text": " Also I had to take care about not duplicating some of the data here and this is because of the nature", "tokens": [50396, 2743, 286, 632, 281, 747, 1127, 466, 406, 17154, 990, 512, 295, 264, 1412, 510, 293, 341, 307, 570, 295, 264, 3687, 50764], "temperature": 0.0, "avg_logprob": -0.19423157235850458, "compression_ratio": 1.5977653631284916, "no_speech_prob": 0.004656540229916573}, {"id": 54, "seek": 40472, "start": 412.72, "end": 421.28000000000003, "text": " of PHP. PHP is kind of a stateless so every request is independent from the other request", "tokens": [50764, 295, 47298, 13, 47298, 307, 733, 295, 257, 2219, 4272, 370, 633, 5308, 307, 6695, 490, 264, 661, 5308, 51192], "temperature": 0.0, "avg_logprob": -0.19423157235850458, "compression_ratio": 1.5977653631284916, "no_speech_prob": 0.004656540229916573}, {"id": 55, "seek": 40472, "start": 421.28000000000003, "end": 425.68, "text": " so I couldn't keep some things in memory. If I could keep some references in memory I probably", "tokens": [51192, 370, 286, 2809, 380, 1066, 512, 721, 294, 4675, 13, 759, 286, 727, 1066, 512, 15400, 294, 4675, 286, 1391, 51412], "temperature": 0.0, "avg_logprob": -0.19423157235850458, "compression_ratio": 1.5977653631284916, "no_speech_prob": 0.004656540229916573}, {"id": 56, "seek": 42568, "start": 426.0, "end": 435.12, "text": " could optimize some things here. And actually question to the audience do you have an idea what", "tokens": [50380, 727, 19719, 512, 721, 510, 13, 400, 767, 1168, 281, 264, 4034, 360, 291, 362, 364, 1558, 437, 50836], "temperature": 0.0, "avg_logprob": -0.31222023963928225, "compression_ratio": 1.3650793650793651, "no_speech_prob": 0.009084549732506275}, {"id": 57, "seek": 42568, "start": 435.12, "end": 443.28000000000003, "text": " this query actually would produce? What's the idea behind this query? Maybe.", "tokens": [50836, 341, 14581, 767, 576, 5258, 30, 708, 311, 264, 1558, 2261, 341, 14581, 30, 2704, 13, 51244], "temperature": 0.0, "avg_logprob": -0.31222023963928225, "compression_ratio": 1.3650793650793651, "no_speech_prob": 0.009084549732506275}, {"id": 58, "seek": 44328, "start": 443.44, "end": 444.64, "text": " I can say that.", "tokens": [50372, 286, 393, 584, 300, 13, 50432], "temperature": 0.0, "avg_logprob": -0.28430326461791994, "compression_ratio": 1.3740458015267176, "no_speech_prob": 0.004801814444363117}, {"id": 59, "seek": 44328, "start": 450.79999999999995, "end": 456.64, "text": " Bucketing? Yeah it's a bucketing for a histogram and I also had to write", "tokens": [50740, 22006, 9880, 30, 865, 309, 311, 257, 13058, 278, 337, 257, 49816, 293, 286, 611, 632, 281, 2464, 51032], "temperature": 0.0, "avg_logprob": -0.28430326461791994, "compression_ratio": 1.3740458015267176, "no_speech_prob": 0.004801814444363117}, {"id": 60, "seek": 44328, "start": 458.23999999999995, "end": 467.44, "text": " a lot of kind of queries that are in the data scientists type of queries which also was for", "tokens": [51112, 257, 688, 295, 733, 295, 24109, 300, 366, 294, 264, 1412, 7708, 2010, 295, 24109, 597, 611, 390, 337, 51572], "temperature": 0.0, "avg_logprob": -0.28430326461791994, "compression_ratio": 1.3740458015267176, "no_speech_prob": 0.004801814444363117}, {"id": 61, "seek": 46744, "start": 467.44, "end": 476.08, "text": " me introduced a bit of a learning curve but the system had really had coded in itself such type of", "tokens": [50364, 385, 7268, 257, 857, 295, 257, 2539, 7605, 457, 264, 1185, 632, 534, 632, 34874, 294, 2564, 1270, 2010, 295, 50796], "temperature": 0.0, "avg_logprob": -0.13623228465041068, "compression_ratio": 1.4676616915422886, "no_speech_prob": 0.017488854005932808}, {"id": 62, "seek": 46744, "start": 476.08, "end": 482.32, "text": " queries and this here represents a histogram of the time to first byte. Like we can see that the", "tokens": [50796, 24109, 293, 341, 510, 8855, 257, 49816, 295, 264, 565, 281, 700, 40846, 13, 1743, 321, 393, 536, 300, 264, 51108], "temperature": 0.0, "avg_logprob": -0.13623228465041068, "compression_ratio": 1.4676616915422886, "no_speech_prob": 0.017488854005932808}, {"id": 63, "seek": 46744, "start": 482.32, "end": 492.8, "text": " median is around 1.8 seconds. It's a bit skewed. And with the help of plotly the JavaScript library", "tokens": [51108, 26779, 307, 926, 502, 13, 23, 3949, 13, 467, 311, 257, 857, 8756, 26896, 13, 400, 365, 264, 854, 295, 7542, 356, 264, 15778, 6405, 51632], "temperature": 0.0, "avg_logprob": -0.13623228465041068, "compression_ratio": 1.4676616915422886, "no_speech_prob": 0.017488854005932808}, {"id": 64, "seek": 49280, "start": 492.8, "end": 503.2, "text": " for visualization I could create such panels for distributions for operating systems and", "tokens": [50364, 337, 25801, 286, 727, 1884, 1270, 13419, 337, 37870, 337, 7447, 3652, 293, 50884], "temperature": 0.0, "avg_logprob": -0.11386790709062056, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.006018505897372961}, {"id": 65, "seek": 49280, "start": 503.2, "end": 508.72, "text": " mobile operating systems and I also could write such bar charts that were showing kind of the", "tokens": [50884, 6013, 7447, 3652, 293, 286, 611, 727, 2464, 1270, 2159, 17767, 300, 645, 4099, 733, 295, 264, 51160], "temperature": 0.0, "avg_logprob": -0.11386790709062056, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.006018505897372961}, {"id": 66, "seek": 49280, "start": 508.72, "end": 516.16, "text": " relationship between the first byte and start render time. And yeah reference to the plotly", "tokens": [51160, 2480, 1296, 264, 700, 40846, 293, 722, 15529, 565, 13, 400, 1338, 6408, 281, 264, 7542, 356, 51532], "temperature": 0.0, "avg_logprob": -0.11386790709062056, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.006018505897372961}, {"id": 67, "seek": 51616, "start": 516.16, "end": 522.4, "text": " it's a really cool library really rich and you can create a bunch of panels with it.", "tokens": [50364, 309, 311, 257, 534, 1627, 6405, 534, 4593, 293, 291, 393, 1884, 257, 3840, 295, 13419, 365, 309, 13, 50676], "temperature": 0.0, "avg_logprob": -0.15265389094277035, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.020743943750858307}, {"id": 68, "seek": 51616, "start": 523.4399999999999, "end": 533.92, "text": " But I found myself like having difficulties and probably not focusing at the right place. So", "tokens": [50728, 583, 286, 1352, 2059, 411, 1419, 14399, 293, 1391, 406, 8416, 412, 264, 558, 1081, 13, 407, 51252], "temperature": 0.0, "avg_logprob": -0.15265389094277035, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.020743943750858307}, {"id": 69, "seek": 51616, "start": 535.04, "end": 541.92, "text": " as I say when you build a real user monitoring system you need to change your mindset and your", "tokens": [51308, 382, 286, 584, 562, 291, 1322, 257, 957, 4195, 11028, 1185, 291, 643, 281, 1319, 428, 12543, 293, 428, 51652], "temperature": 0.0, "avg_logprob": -0.15265389094277035, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.020743943750858307}, {"id": 70, "seek": 54192, "start": 542.0, "end": 549.36, "text": " queries should be more like in data scientist style. And the PHP were out and the ORM that I was", "tokens": [50368, 24109, 820, 312, 544, 411, 294, 1412, 12662, 3758, 13, 400, 264, 47298, 645, 484, 293, 264, 19654, 44, 300, 286, 390, 50736], "temperature": 0.0, "avg_logprob": -0.13038973581223262, "compression_ratio": 1.7117117117117118, "no_speech_prob": 0.005982499103993177}, {"id": 71, "seek": 54192, "start": 549.36, "end": 556.56, "text": " using I was using doctrine. It's not really meant for writing complex queries from this fashion. So", "tokens": [50736, 1228, 286, 390, 1228, 23290, 13, 467, 311, 406, 534, 4140, 337, 3579, 3997, 24109, 490, 341, 6700, 13, 407, 51096], "temperature": 0.0, "avg_logprob": -0.13038973581223262, "compression_ratio": 1.7117117117117118, "no_speech_prob": 0.005982499103993177}, {"id": 72, "seek": 54192, "start": 556.56, "end": 564.0, "text": " I found myself writing my own query builder and using doctrine when convenient and using my", "tokens": [51096, 286, 1352, 2059, 3579, 452, 1065, 14581, 27377, 293, 1228, 23290, 562, 10851, 293, 1228, 452, 51468], "temperature": 0.0, "avg_logprob": -0.13038973581223262, "compression_ratio": 1.7117117117117118, "no_speech_prob": 0.005982499103993177}, {"id": 73, "seek": 54192, "start": 564.0, "end": 569.12, "text": " query builder when convenient but this was again too much maintenance for just for a single", "tokens": [51468, 14581, 27377, 562, 10851, 457, 341, 390, 797, 886, 709, 11258, 337, 445, 337, 257, 2167, 51724], "temperature": 0.0, "avg_logprob": -0.13038973581223262, "compression_ratio": 1.7117117117117118, "no_speech_prob": 0.005982499103993177}, {"id": 74, "seek": 56912, "start": 569.2, "end": 576.48, "text": " maintainer of a project. I also wanted to introduce user management and permission system", "tokens": [50368, 6909, 260, 295, 257, 1716, 13, 286, 611, 1415, 281, 5366, 4195, 4592, 293, 11226, 1185, 50732], "temperature": 0.0, "avg_logprob": -0.09035450836707806, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.012645350769162178}, {"id": 75, "seek": 56912, "start": 577.2, "end": 581.76, "text": " but again with my limited time and working from time to time on the project during the weekends", "tokens": [50768, 457, 797, 365, 452, 5567, 565, 293, 1364, 490, 565, 281, 565, 322, 264, 1716, 1830, 264, 23595, 50996], "temperature": 0.0, "avg_logprob": -0.09035450836707806, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.012645350769162178}, {"id": 76, "seek": 56912, "start": 581.76, "end": 586.5600000000001, "text": " this was just again too much it was not the right focus. I wanted just to show some meaningful data.", "tokens": [50996, 341, 390, 445, 797, 886, 709, 309, 390, 406, 264, 558, 1879, 13, 286, 1415, 445, 281, 855, 512, 10995, 1412, 13, 51236], "temperature": 0.0, "avg_logprob": -0.09035450836707806, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.012645350769162178}, {"id": 77, "seek": 56912, "start": 587.68, "end": 595.84, "text": " And yeah I really love plotly but I just ended up with large blobs of JavaScript here and there", "tokens": [51292, 400, 1338, 286, 534, 959, 7542, 356, 457, 286, 445, 4590, 493, 365, 2416, 1749, 929, 295, 15778, 510, 293, 456, 51700], "temperature": 0.0, "avg_logprob": -0.09035450836707806, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.012645350769162178}, {"id": 78, "seek": 59584, "start": 595.84, "end": 600.88, "text": " and it was more like more and more plotlier. I wanted to see data not writing JavaScript.", "tokens": [50364, 293, 309, 390, 544, 411, 544, 293, 544, 7542, 2753, 13, 286, 1415, 281, 536, 1412, 406, 3579, 15778, 13, 50616], "temperature": 0.0, "avg_logprob": -0.10967197838951559, "compression_ratio": 1.5611111111111111, "no_speech_prob": 0.005760953761637211}, {"id": 79, "seek": 59584, "start": 603.44, "end": 614.48, "text": " So I took a break I believe half a year and I focused on my main job but from time to time I was", "tokens": [50744, 407, 286, 1890, 257, 1821, 286, 1697, 1922, 257, 1064, 293, 286, 5178, 322, 452, 2135, 1691, 457, 490, 565, 281, 565, 286, 390, 51296], "temperature": 0.0, "avg_logprob": -0.10967197838951559, "compression_ratio": 1.5611111111111111, "no_speech_prob": 0.005760953761637211}, {"id": 80, "seek": 59584, "start": 614.48, "end": 621.84, "text": " doing research and I was reading some other articles about time series databases and I started", "tokens": [51296, 884, 2132, 293, 286, 390, 3760, 512, 661, 11290, 466, 565, 2638, 22380, 293, 286, 1409, 51664], "temperature": 0.0, "avg_logprob": -0.10967197838951559, "compression_ratio": 1.5611111111111111, "no_speech_prob": 0.005760953761637211}, {"id": 81, "seek": 62184, "start": 621.84, "end": 629.12, "text": " exploring some of the open source available open source systems for visualization. So I", "tokens": [50364, 12736, 512, 295, 264, 1269, 4009, 2435, 1269, 4009, 3652, 337, 25801, 13, 407, 286, 50728], "temperature": 0.0, "avg_logprob": -0.19362860459547776, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.008625779300928116}, {"id": 82, "seek": 62184, "start": 630.4, "end": 639.0400000000001, "text": " kind of rebuilt the complete backend. I still kept boomerang but I rewritten the server site so I", "tokens": [50792, 733, 295, 38532, 264, 3566, 38087, 13, 286, 920, 4305, 9351, 260, 656, 457, 286, 319, 26859, 264, 7154, 3621, 370, 286, 51224], "temperature": 0.0, "avg_logprob": -0.19362860459547776, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.008625779300928116}, {"id": 83, "seek": 62184, "start": 639.0400000000001, "end": 647.0400000000001, "text": " completely removed nginx and PHP and I used golang. I replaced my SQL with click house", "tokens": [51224, 2584, 7261, 297, 1494, 87, 293, 47298, 293, 286, 1143, 9988, 656, 13, 286, 10772, 452, 19200, 365, 2052, 1782, 51624], "temperature": 0.0, "avg_logprob": -0.19362860459547776, "compression_ratio": 1.4545454545454546, "no_speech_prob": 0.008625779300928116}, {"id": 84, "seek": 64704, "start": 647.68, "end": 652.24, "text": " and I replaced all the custom code all the PHP and plotlier with grafana.", "tokens": [50396, 293, 286, 10772, 439, 264, 2375, 3089, 439, 264, 47298, 293, 7542, 2753, 365, 1295, 69, 2095, 13, 50624], "temperature": 0.0, "avg_logprob": -0.11164222225066155, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.008239991031587124}, {"id": 85, "seek": 64704, "start": 653.92, "end": 659.36, "text": " And again if you would like to play with the current version of basicram that's what I ended up with", "tokens": [50708, 400, 797, 498, 291, 576, 411, 281, 862, 365, 264, 2190, 3037, 295, 3875, 2356, 300, 311, 437, 286, 4590, 493, 365, 50980], "temperature": 0.0, "avg_logprob": -0.11164222225066155, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.008239991031587124}, {"id": 86, "seek": 64704, "start": 659.36, "end": 667.28, "text": " that's actually a let's say a bit of rebranded version of grafana with the specific basicram", "tokens": [50980, 300, 311, 767, 257, 718, 311, 584, 257, 857, 295, 12970, 3699, 292, 3037, 295, 1295, 69, 2095, 365, 264, 2685, 3875, 2356, 51376], "temperature": 0.0, "avg_logprob": -0.11164222225066155, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.008239991031587124}, {"id": 87, "seek": 64704, "start": 667.28, "end": 673.92, "text": " dashboards and settings. So if you would like to play with it just visit this address and write", "tokens": [51376, 8240, 17228, 293, 6257, 13, 407, 498, 291, 576, 411, 281, 862, 365, 309, 445, 3441, 341, 2985, 293, 2464, 51708], "temperature": 0.0, "avg_logprob": -0.11164222225066155, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.008239991031587124}, {"id": 88, "seek": 67392, "start": 673.92, "end": 684.88, "text": " calendar calendar as a username and password. So where golang was really useful, golang it's", "tokens": [50364, 12183, 12183, 382, 257, 30351, 293, 11524, 13, 407, 689, 9988, 656, 390, 534, 4420, 11, 9988, 656, 309, 311, 50912], "temperature": 0.0, "avg_logprob": -0.15354818585275234, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.010961811989545822}, {"id": 89, "seek": 67392, "start": 684.88, "end": 691.52, "text": " just different paradigm it's a different idea compared to PHP. Golang you can compile a single", "tokens": [50912, 445, 819, 24709, 309, 311, 257, 819, 1558, 5347, 281, 47298, 13, 36319, 656, 291, 393, 31413, 257, 2167, 51244], "temperature": 0.0, "avg_logprob": -0.15354818585275234, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.010961811989545822}, {"id": 90, "seek": 67392, "start": 691.52, "end": 697.28, "text": " binary that and in this single binary everything that I needed was packaged inside the binary so", "tokens": [51244, 17434, 300, 293, 294, 341, 2167, 17434, 1203, 300, 286, 2978, 390, 38162, 1854, 264, 17434, 370, 51532], "temperature": 0.0, "avg_logprob": -0.15354818585275234, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.010961811989545822}, {"id": 91, "seek": 67392, "start": 697.28, "end": 702.9599999999999, "text": " it's just a process that you run on the server and it has everything inside and this allow me to", "tokens": [51532, 309, 311, 445, 257, 1399, 300, 291, 1190, 322, 264, 7154, 293, 309, 575, 1203, 1854, 293, 341, 2089, 385, 281, 51816], "temperature": 0.0, "avg_logprob": -0.15354818585275234, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.010961811989545822}, {"id": 92, "seek": 70296, "start": 703.6, "end": 709.2800000000001, "text": " replace the actually to get rid of nginx because golang has a package for built in", "tokens": [50396, 7406, 264, 767, 281, 483, 3973, 295, 297, 1494, 87, 570, 9988, 656, 575, 257, 7372, 337, 3094, 294, 50680], "temperature": 0.0, "avg_logprob": -0.16917617585923936, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.009463230147957802}, {"id": 93, "seek": 70296, "start": 709.2800000000001, "end": 718.1600000000001, "text": " htp server and yes PHP also has a package for PHP for htp server but you need to do a lot of", "tokens": [50680, 276, 83, 79, 7154, 293, 2086, 47298, 611, 575, 257, 7372, 337, 47298, 337, 276, 83, 79, 7154, 457, 291, 643, 281, 360, 257, 688, 295, 51124], "temperature": 0.0, "avg_logprob": -0.16917617585923936, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.009463230147957802}, {"id": 94, "seek": 70296, "start": 718.1600000000001, "end": 722.88, "text": " work arounds to make it working because just not native in this is not native in PHP.", "tokens": [51124, 589, 926, 82, 281, 652, 309, 1364, 570, 445, 406, 8470, 294, 341, 307, 406, 8470, 294, 47298, 13, 51360], "temperature": 0.0, "avg_logprob": -0.16917617585923936, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.009463230147957802}, {"id": 95, "seek": 70296, "start": 724.72, "end": 732.88, "text": " I also could leverage the existing click house package in golang for interacting with the", "tokens": [51452, 286, 611, 727, 13982, 264, 6741, 2052, 1782, 7372, 294, 9988, 656, 337, 18017, 365, 264, 51860], "temperature": 0.0, "avg_logprob": -0.16917617585923936, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.009463230147957802}, {"id": 96, "seek": 73288, "start": 733.84, "end": 738.96, "text": " click house database and I took advantage of asynchronous insert which saved me a lot of", "tokens": [50412, 2052, 1782, 8149, 293, 286, 1890, 5002, 295, 49174, 8969, 597, 6624, 385, 257, 688, 295, 50668], "temperature": 0.0, "avg_logprob": -0.07261913943003459, "compression_ratio": 1.5585585585585586, "no_speech_prob": 0.0054501998238265514}, {"id": 97, "seek": 73288, "start": 740.88, "end": 746.88, "text": " I could get rid of some code that I had in the PHP version of the basicram.", "tokens": [50764, 286, 727, 483, 3973, 295, 512, 3089, 300, 286, 632, 294, 264, 47298, 3037, 295, 264, 3875, 2356, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07261913943003459, "compression_ratio": 1.5585585585585586, "no_speech_prob": 0.0054501998238265514}, {"id": 98, "seek": 73288, "start": 748.8, "end": 753.68, "text": " Also in golang it was very easy to create a backup mechanism for all the data that was", "tokens": [51160, 2743, 294, 9988, 656, 309, 390, 588, 1858, 281, 1884, 257, 14807, 7513, 337, 439, 264, 1412, 300, 390, 51404], "temperature": 0.0, "avg_logprob": -0.07261913943003459, "compression_ratio": 1.5585585585585586, "no_speech_prob": 0.0054501998238265514}, {"id": 99, "seek": 73288, "start": 753.68, "end": 758.88, "text": " flowing through the system because in golang I could easily keep stuff in memory I didn't have", "tokens": [51404, 13974, 807, 264, 1185, 570, 294, 9988, 656, 286, 727, 3612, 1066, 1507, 294, 4675, 286, 994, 380, 362, 51664], "temperature": 0.0, "avg_logprob": -0.07261913943003459, "compression_ratio": 1.5585585585585586, "no_speech_prob": 0.0054501998238265514}, {"id": 100, "seek": 75888, "start": 758.88, "end": 764.4, "text": " to write each request to the system on a file and later to batch it and bundle it. I was just", "tokens": [50364, 281, 2464, 1184, 5308, 281, 264, 1185, 322, 257, 3991, 293, 1780, 281, 15245, 309, 293, 24438, 309, 13, 286, 390, 445, 50640], "temperature": 0.0, "avg_logprob": -0.09294550446258194, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.014336414635181427}, {"id": 101, "seek": 75888, "start": 764.4, "end": 772.16, "text": " keeping these data points and requests in for example in memory for 10 minutes and I could", "tokens": [50640, 5145, 613, 1412, 2793, 293, 12475, 294, 337, 1365, 294, 4675, 337, 1266, 2077, 293, 286, 727, 51028], "temperature": 0.0, "avg_logprob": -0.09294550446258194, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.014336414635181427}, {"id": 102, "seek": 75888, "start": 772.16, "end": 776.8, "text": " just flush them on the hard drive and compress them and this was again really really easy few", "tokens": [51028, 445, 19568, 552, 322, 264, 1152, 3332, 293, 14778, 552, 293, 341, 390, 797, 534, 534, 1858, 1326, 51260], "temperature": 0.0, "avg_logprob": -0.09294550446258194, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.014336414635181427}, {"id": 103, "seek": 75888, "start": 776.8, "end": 784.16, "text": " lines of code and just natively coming in golang and also for some cases where I needed encryption", "tokens": [51260, 3876, 295, 3089, 293, 445, 8470, 356, 1348, 294, 9988, 656, 293, 611, 337, 512, 3331, 689, 286, 2978, 29575, 51628], "temperature": 0.0, "avg_logprob": -0.09294550446258194, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.014336414635181427}, {"id": 104, "seek": 78416, "start": 784.24, "end": 790.64, "text": " again in golang there is a let's encrypt package it's a third-party package but I could easily just", "tokens": [50368, 797, 294, 9988, 656, 456, 307, 257, 718, 311, 17972, 662, 7372, 309, 311, 257, 2636, 12, 23409, 7372, 457, 286, 727, 3612, 445, 50688], "temperature": 0.0, "avg_logprob": -0.189647947038923, "compression_ratio": 1.654708520179372, "no_speech_prob": 0.005510508548468351}, {"id": 105, "seek": 78416, "start": 790.64, "end": 795.12, "text": " spin a server and say okay I want to use let's encrypt and I was getting secure connection to", "tokens": [50688, 6060, 257, 7154, 293, 584, 1392, 286, 528, 281, 764, 718, 311, 17972, 662, 293, 286, 390, 1242, 7144, 4984, 281, 50912], "temperature": 0.0, "avg_logprob": -0.189647947038923, "compression_ratio": 1.654708520179372, "no_speech_prob": 0.005510508548468351}, {"id": 106, "seek": 78416, "start": 795.12, "end": 800.4, "text": " this server with it it really reduced the operation the effort on the operation site.", "tokens": [50912, 341, 7154, 365, 309, 309, 534, 9212, 264, 6916, 264, 4630, 322, 264, 6916, 3621, 13, 51176], "temperature": 0.0, "avg_logprob": -0.189647947038923, "compression_ratio": 1.654708520179372, "no_speech_prob": 0.005510508548468351}, {"id": 107, "seek": 78416, "start": 802.56, "end": 811.04, "text": " I also took advantage of a gip lookup library which is using the maxmind database and why", "tokens": [51284, 286, 611, 1890, 5002, 295, 257, 290, 647, 574, 1010, 6405, 597, 307, 1228, 264, 11469, 13733, 8149, 293, 983, 51708], "temperature": 0.0, "avg_logprob": -0.189647947038923, "compression_ratio": 1.654708520179372, "no_speech_prob": 0.005510508548468351}, {"id": 108, "seek": 81104, "start": 811.04, "end": 816.0, "text": " I needed this because in a real user monitoring system you would like to see from which city a", "tokens": [50364, 286, 2978, 341, 570, 294, 257, 957, 4195, 11028, 1185, 291, 576, 411, 281, 536, 490, 597, 2307, 257, 50612], "temperature": 0.0, "avg_logprob": -0.09819828896295457, "compression_ratio": 1.8349056603773586, "no_speech_prob": 0.014958572573959827}, {"id": 109, "seek": 81104, "start": 816.0, "end": 821.36, "text": " visitor visited the website or from which country visited the website this is really helpful when", "tokens": [50612, 28222, 11220, 264, 3144, 420, 490, 597, 1941, 11220, 264, 3144, 341, 307, 534, 4961, 562, 50880], "temperature": 0.0, "avg_logprob": -0.09819828896295457, "compression_ratio": 1.8349056603773586, "no_speech_prob": 0.014958572573959827}, {"id": 110, "seek": 81104, "start": 821.36, "end": 827.12, "text": " you want to create a report and when you want to figure out maybe in which country is your website", "tokens": [50880, 291, 528, 281, 1884, 257, 2275, 293, 562, 291, 528, 281, 2573, 484, 1310, 294, 597, 1941, 307, 428, 3144, 51168], "temperature": 0.0, "avg_logprob": -0.09819828896295457, "compression_ratio": 1.8349056603773586, "no_speech_prob": 0.014958572573959827}, {"id": 111, "seek": 81104, "start": 827.12, "end": 835.5999999999999, "text": " is slow. I also took advantage of another library about user agent parsing so this library helped", "tokens": [51168, 307, 2964, 13, 286, 611, 1890, 5002, 295, 1071, 6405, 466, 4195, 9461, 21156, 278, 370, 341, 6405, 4254, 51592], "temperature": 0.0, "avg_logprob": -0.09819828896295457, "compression_ratio": 1.8349056603773586, "no_speech_prob": 0.014958572573959827}, {"id": 112, "seek": 83560, "start": 835.6, "end": 842.72, "text": " me to extract important information about the browser name the operating system and the user", "tokens": [50364, 385, 281, 8947, 1021, 1589, 466, 264, 11185, 1315, 264, 7447, 1185, 293, 264, 4195, 50720], "temperature": 0.0, "avg_logprob": -0.08950728754843434, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.009543076157569885}, {"id": 113, "seek": 83560, "start": 842.72, "end": 855.0400000000001, "text": " agent family and I also started using my new favorite database Clickhouse. So you remember", "tokens": [50720, 9461, 1605, 293, 286, 611, 1409, 1228, 452, 777, 2954, 8149, 8230, 6410, 13, 407, 291, 1604, 51336], "temperature": 0.0, "avg_logprob": -0.08950728754843434, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.009543076157569885}, {"id": 114, "seek": 83560, "start": 855.0400000000001, "end": 860.64, "text": " where I say that I was doing a lot of work when I was like batching and bundling everything and", "tokens": [51336, 689, 286, 584, 300, 286, 390, 884, 257, 688, 295, 589, 562, 286, 390, 411, 15245, 278, 293, 13882, 1688, 1203, 293, 51616], "temperature": 0.0, "avg_logprob": -0.08950728754843434, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.009543076157569885}, {"id": 115, "seek": 86064, "start": 860.72, "end": 868.0, "text": " inserting these big batches in MySQL. Clickhouse comes with a really cool feature called asynchronous", "tokens": [50368, 46567, 613, 955, 15245, 279, 294, 1222, 39934, 13, 8230, 6410, 1487, 365, 257, 534, 1627, 4111, 1219, 49174, 50732], "temperature": 0.0, "avg_logprob": -0.13943654228659236, "compression_ratio": 1.7566371681415929, "no_speech_prob": 0.01655721850693226}, {"id": 116, "seek": 86064, "start": 868.0, "end": 875.12, "text": " inserts so Clickhouse allowed me every time when a request reaches my back end to immediately to", "tokens": [50732, 49163, 370, 8230, 6410, 4350, 385, 633, 565, 562, 257, 5308, 14235, 452, 646, 917, 281, 4258, 281, 51088], "temperature": 0.0, "avg_logprob": -0.13943654228659236, "compression_ratio": 1.7566371681415929, "no_speech_prob": 0.01655721850693226}, {"id": 117, "seek": 86064, "start": 875.12, "end": 881.76, "text": " create an insert to Clickhouse and Clickhouse was internally batching this and it was deciding", "tokens": [51088, 1884, 364, 8969, 281, 8230, 6410, 293, 8230, 6410, 390, 19501, 15245, 278, 341, 293, 309, 390, 17990, 51420], "temperature": 0.0, "avg_logprob": -0.13943654228659236, "compression_ratio": 1.7566371681415929, "no_speech_prob": 0.01655721850693226}, {"id": 118, "seek": 86064, "start": 881.76, "end": 888.48, "text": " where it needs to insert in the database so this was not this helped to like not reach some performance", "tokens": [51420, 689, 309, 2203, 281, 8969, 294, 264, 8149, 370, 341, 390, 406, 341, 4254, 281, 411, 406, 2524, 512, 3389, 51756], "temperature": 0.0, "avg_logprob": -0.13943654228659236, "compression_ratio": 1.7566371681415929, "no_speech_prob": 0.01655721850693226}, {"id": 119, "seek": 88848, "start": 888.48, "end": 897.6, "text": " botonics. Another thing that I could do with Clickhouse so here you see I have seven tables", "tokens": [50364, 10592, 266, 1167, 13, 3996, 551, 300, 286, 727, 360, 365, 8230, 6410, 370, 510, 291, 536, 286, 362, 3407, 8020, 50820], "temperature": 0.0, "avg_logprob": -0.11643449238368443, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03241977468132973}, {"id": 120, "seek": 88848, "start": 897.6, "end": 904.24, "text": " in the old setup with MySQL but in Clickhouse I actually end up with two tables and I actually", "tokens": [50820, 294, 264, 1331, 8657, 365, 1222, 39934, 457, 294, 8230, 6410, 286, 767, 917, 493, 365, 732, 8020, 293, 286, 767, 51152], "temperature": 0.0, "avg_logprob": -0.11643449238368443, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03241977468132973}, {"id": 121, "seek": 88848, "start": 904.24, "end": 910.08, "text": " could I actually could have one table but I needed this table for showing the host names in the filters", "tokens": [51152, 727, 286, 767, 727, 362, 472, 3199, 457, 286, 2978, 341, 3199, 337, 4099, 264, 3975, 5288, 294, 264, 15995, 51444], "temperature": 0.0, "avg_logprob": -0.11643449238368443, "compression_ratio": 1.686046511627907, "no_speech_prob": 0.03241977468132973}, {"id": 122, "seek": 91008, "start": 910.08, "end": 916.64, "text": " in Grafana and just Clickhouse or in general when you work when we work with time series", "tokens": [50364, 294, 8985, 69, 2095, 293, 445, 8230, 6410, 420, 294, 2674, 562, 291, 589, 562, 321, 589, 365, 565, 2638, 50692], "temperature": 0.0, "avg_logprob": -0.14985411194549209, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.03527515009045601}, {"id": 123, "seek": 91008, "start": 917.9200000000001, "end": 924.0, "text": " the main idea is that here the the the data is normalized I try to really build", "tokens": [50756, 264, 2135, 1558, 307, 300, 510, 264, 264, 264, 1412, 307, 48704, 286, 853, 281, 534, 1322, 51060], "temperature": 0.0, "avg_logprob": -0.14985411194549209, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.03527515009045601}, {"id": 124, "seek": 91008, "start": 925.76, "end": 931.6800000000001, "text": " to build a user monitoring system in the fashion of a webshop right which is really the wrong idea", "tokens": [51148, 281, 1322, 257, 4195, 11028, 1185, 294, 264, 6700, 295, 257, 2859, 9050, 558, 597, 307, 534, 264, 2085, 1558, 51444], "temperature": 0.0, "avg_logprob": -0.14985411194549209, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.03527515009045601}, {"id": 125, "seek": 91008, "start": 933.36, "end": 938.48, "text": " but when we use time series database the idea is that the data you can just throw your data into", "tokens": [51528, 457, 562, 321, 764, 565, 2638, 8149, 264, 1558, 307, 300, 264, 1412, 291, 393, 445, 3507, 428, 1412, 666, 51784], "temperature": 0.0, "avg_logprob": -0.14985411194549209, "compression_ratio": 1.766990291262136, "no_speech_prob": 0.03527515009045601}, {"id": 126, "seek": 93848, "start": 938.48, "end": 944.8000000000001, "text": " this database you you have one large fat table and you throw a lot of data and you don't really", "tokens": [50364, 341, 8149, 291, 291, 362, 472, 2416, 4046, 3199, 293, 291, 3507, 257, 688, 295, 1412, 293, 291, 500, 380, 534, 50680], "temperature": 0.0, "avg_logprob": -0.0815820423039523, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.013362809084355831}, {"id": 127, "seek": 93848, "start": 944.8000000000001, "end": 951.84, "text": " need to consider duplication of the data for example here we have this filter's device type", "tokens": [50680, 643, 281, 1949, 17154, 399, 295, 264, 1412, 337, 1365, 510, 321, 362, 341, 6608, 311, 4302, 2010, 51032], "temperature": 0.0, "avg_logprob": -0.0815820423039523, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.013362809084355831}, {"id": 128, "seek": 93848, "start": 952.5600000000001, "end": 957.76, "text": " and I don't have a foreign key here to another table where I keep references to all the device types", "tokens": [51068, 293, 286, 500, 380, 362, 257, 5329, 2141, 510, 281, 1071, 3199, 689, 286, 1066, 15400, 281, 439, 264, 4302, 3467, 51328], "temperature": 0.0, "avg_logprob": -0.0815820423039523, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.013362809084355831}, {"id": 129, "seek": 93848, "start": 957.76, "end": 964.0, "text": " I just can insert and insert the same string over and over again desktop desktop desktop and this", "tokens": [51328, 286, 445, 393, 8969, 293, 8969, 264, 912, 6798, 670, 293, 670, 797, 14502, 14502, 14502, 293, 341, 51640], "temperature": 0.0, "avg_logprob": -0.0815820423039523, "compression_ratio": 1.812206572769953, "no_speech_prob": 0.013362809084355831}, {"id": 130, "seek": 96400, "start": 964.0, "end": 969.84, "text": " database will be completely fine with it it will compress the data internally and I won't experience", "tokens": [50364, 8149, 486, 312, 2584, 2489, 365, 309, 309, 486, 14778, 264, 1412, 19501, 293, 286, 1582, 380, 1752, 50656], "temperature": 0.0, "avg_logprob": -0.07557581410263524, "compression_ratio": 1.6149732620320856, "no_speech_prob": 0.017253605648875237}, {"id": 131, "seek": 96400, "start": 969.84, "end": 978.64, "text": " any performance bottlenecks when I filter by this field and here is my other favorite feature in", "tokens": [50656, 604, 3389, 44641, 2761, 562, 286, 6608, 538, 341, 2519, 293, 510, 307, 452, 661, 2954, 4111, 294, 51096], "temperature": 0.0, "avg_logprob": -0.07557581410263524, "compression_ratio": 1.6149732620320856, "no_speech_prob": 0.017253605648875237}, {"id": 132, "seek": 96400, "start": 978.64, "end": 986.0, "text": " Clickhouse it's called it's called low cardinality data type and this data type is really convenient for", "tokens": [51096, 8230, 6410, 309, 311, 1219, 309, 311, 1219, 2295, 2920, 259, 1860, 1412, 2010, 293, 341, 1412, 2010, 307, 534, 10851, 337, 51464], "temperature": 0.0, "avg_logprob": -0.07557581410263524, "compression_ratio": 1.6149732620320856, "no_speech_prob": 0.017253605648875237}, {"id": 133, "seek": 98600, "start": 986.88, "end": 997.6, "text": " columns where the distinct values in this column some less less than 10 000 because this it's", "tokens": [50408, 13766, 689, 264, 10644, 4190, 294, 341, 7738, 512, 1570, 1570, 813, 1266, 13711, 570, 341, 309, 311, 50944], "temperature": 0.0, "avg_logprob": -0.15810431856097598, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.020725440233945847}, {"id": 134, "seek": 98600, "start": 997.6, "end": 1003.84, "text": " optimizing eternally and it's the the where conditions and the filters in this case are much", "tokens": [50944, 40425, 10533, 379, 293, 309, 311, 264, 264, 689, 4487, 293, 264, 15995, 294, 341, 1389, 366, 709, 51256], "temperature": 0.0, "avg_logprob": -0.15810431856097598, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.020725440233945847}, {"id": 135, "seek": 98600, "start": 1003.84, "end": 1011.92, "text": " much faster when we use low cardinality we if if we have more than 10 000 distinct values we probably", "tokens": [51256, 709, 4663, 562, 321, 764, 2295, 2920, 259, 1860, 321, 498, 498, 321, 362, 544, 813, 1266, 13711, 10644, 4190, 321, 1391, 51660], "temperature": 0.0, "avg_logprob": -0.15810431856097598, "compression_ratio": 1.6941176470588235, "no_speech_prob": 0.020725440233945847}, {"id": 136, "seek": 101192, "start": 1011.92, "end": 1017.68, "text": " need to go again to something like this and to start introducing additional dimension tables", "tokens": [50364, 643, 281, 352, 797, 281, 746, 411, 341, 293, 281, 722, 15424, 4497, 10139, 8020, 50652], "temperature": 0.0, "avg_logprob": -0.07985742275531475, "compression_ratio": 1.546448087431694, "no_speech_prob": 0.01263834722340107}, {"id": 137, "seek": 101192, "start": 1021.04, "end": 1028.6399999999999, "text": " also so here in left is really uh I would say insane I even don't know how I created this I still", "tokens": [50820, 611, 370, 510, 294, 1411, 307, 534, 2232, 286, 576, 584, 10838, 286, 754, 500, 380, 458, 577, 286, 2942, 341, 286, 920, 51200], "temperature": 0.0, "avg_logprob": -0.07985742275531475, "compression_ratio": 1.546448087431694, "no_speech_prob": 0.01263834722340107}, {"id": 138, "seek": 101192, "start": 1029.44, "end": 1036.1599999999999, "text": " I'm really surprised with myself and you we cannot zoom in here but this was a process where", "tokens": [51240, 286, 478, 534, 6100, 365, 2059, 293, 291, 321, 2644, 8863, 294, 510, 457, 341, 390, 257, 1399, 689, 51576], "temperature": 0.0, "avg_logprob": -0.07985742275531475, "compression_ratio": 1.546448087431694, "no_speech_prob": 0.01263834722340107}, {"id": 139, "seek": 103616, "start": 1036.5600000000002, "end": 1042.16, "text": " it included querying my my secure database and I had some application code and I had bunch of", "tokens": [50384, 309, 5556, 7083, 1840, 452, 452, 7144, 8149, 293, 286, 632, 512, 3861, 3089, 293, 286, 632, 3840, 295, 50664], "temperature": 0.0, "avg_logprob": -0.18197979769863926, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.010001907125115395}, {"id": 140, "seek": 103616, "start": 1042.16, "end": 1048.16, "text": " cron jobs and this was trying to guess and to find out all the sessions that bounced and what was", "tokens": [50664, 941, 266, 4782, 293, 341, 390, 1382, 281, 2041, 293, 281, 915, 484, 439, 264, 11081, 300, 46482, 293, 437, 390, 50964], "temperature": 0.0, "avg_logprob": -0.18197979769863926, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.010001907125115395}, {"id": 141, "seek": 103616, "start": 1048.16, "end": 1054.88, "text": " the duration of the sessions it was just really complex and for example to to calculate the bounce", "tokens": [50964, 264, 16365, 295, 264, 11081, 309, 390, 445, 534, 3997, 293, 337, 1365, 281, 281, 8873, 264, 15894, 51300], "temperature": 0.0, "avg_logprob": -0.18197979769863926, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.010001907125115395}, {"id": 142, "seek": 103616, "start": 1054.88, "end": 1063.28, "text": " rate with my new setup in Clickhouse I just could use such a query again I got a bit help with this", "tokens": [51300, 3314, 365, 452, 777, 8657, 294, 8230, 6410, 286, 445, 727, 764, 1270, 257, 14581, 797, 286, 658, 257, 857, 854, 365, 341, 51720], "temperature": 0.0, "avg_logprob": -0.18197979769863926, "compression_ratio": 1.7256637168141593, "no_speech_prob": 0.010001907125115395}, {"id": 143, "seek": 106328, "start": 1063.92, "end": 1070.8799999999999, "text": " query I don't completely understand it but it does it actually it works and it's much more", "tokens": [50396, 14581, 286, 500, 380, 2584, 1223, 309, 457, 309, 775, 309, 767, 309, 1985, 293, 309, 311, 709, 544, 50744], "temperature": 0.0, "avg_logprob": -0.13772235932897348, "compression_ratio": 1.7267080745341614, "no_speech_prob": 0.009320336394011974}, {"id": 144, "seek": 106328, "start": 1070.8799999999999, "end": 1080.72, "text": " simple and much much more it makes my it makes basic run much much easier to maintain and with", "tokens": [50744, 2199, 293, 709, 709, 544, 309, 1669, 452, 309, 1669, 3875, 1190, 709, 709, 3571, 281, 6909, 293, 365, 51236], "temperature": 0.0, "avg_logprob": -0.13772235932897348, "compression_ratio": 1.7267080745341614, "no_speech_prob": 0.009320336394011974}, {"id": 145, "seek": 106328, "start": 1081.44, "end": 1087.92, "text": " with this query I could actually create easily this correlation between bounce rate and epic", "tokens": [51272, 365, 341, 14581, 286, 727, 767, 1884, 3612, 341, 20009, 1296, 15894, 3314, 293, 13581, 51596], "temperature": 0.0, "avg_logprob": -0.13772235932897348, "compression_ratio": 1.7267080745341614, "no_speech_prob": 0.009320336394011974}, {"id": 146, "seek": 108792, "start": 1088.24, "end": 1091.68, "text": " and metric and in our case this is time to first bite", "tokens": [50380, 293, 20678, 293, 294, 527, 1389, 341, 307, 565, 281, 700, 7988, 50552], "temperature": 0.0, "avg_logprob": -0.10458896183731532, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.009528622031211853}, {"id": 147, "seek": 108792, "start": 1093.8400000000001, "end": 1099.6000000000001, "text": " also I want to say that open source is not only about how great is the open source", "tokens": [50660, 611, 286, 528, 281, 584, 300, 1269, 4009, 307, 406, 787, 466, 577, 869, 307, 264, 1269, 4009, 50948], "temperature": 0.0, "avg_logprob": -0.10458896183731532, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.009528622031211853}, {"id": 148, "seek": 108792, "start": 1100.16, "end": 1104.16, "text": " product that you work with but also the community is very important and that's why", "tokens": [50976, 1674, 300, 291, 589, 365, 457, 611, 264, 1768, 307, 588, 1021, 293, 300, 311, 983, 51176], "temperature": 0.0, "avg_logprob": -0.10458896183731532, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.009528622031211853}, {"id": 149, "seek": 108792, "start": 1104.16, "end": 1111.04, "text": " I also stick to Clickhouse they have really great slack community and every time when I ask a question", "tokens": [51176, 286, 611, 2897, 281, 8230, 6410, 436, 362, 534, 869, 29767, 1768, 293, 633, 565, 562, 286, 1029, 257, 1168, 51520], "temperature": 0.0, "avg_logprob": -0.10458896183731532, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.009528622031211853}, {"id": 150, "seek": 108792, "start": 1111.04, "end": 1117.04, "text": " I I can say that in the matter of a few hours I get really a good response for example here I'm", "tokens": [51520, 286, 286, 393, 584, 300, 294, 264, 1871, 295, 257, 1326, 2496, 286, 483, 534, 257, 665, 4134, 337, 1365, 510, 286, 478, 51820], "temperature": 0.0, "avg_logprob": -0.10458896183731532, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.009528622031211853}, {"id": 151, "seek": 111704, "start": 1117.04, "end": 1122.8, "text": " asking hey I I wrote this query but I feel that it's not optimal I'm not a SQL expert and here", "tokens": [50364, 3365, 4177, 286, 286, 4114, 341, 14581, 457, 286, 841, 300, 309, 311, 406, 16252, 286, 478, 406, 257, 19200, 5844, 293, 510, 50652], "temperature": 0.0, "avg_logprob": -0.12069849036205774, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.005572556518018246}, {"id": 152, "seek": 111704, "start": 1122.8, "end": 1128.6399999999999, "text": " another expert actually suggested a better way how to write this query it's it's shorter and it's much", "tokens": [50652, 1071, 5844, 767, 10945, 257, 1101, 636, 577, 281, 2464, 341, 14581, 309, 311, 309, 311, 11639, 293, 309, 311, 709, 50944], "temperature": 0.0, "avg_logprob": -0.12069849036205774, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.005572556518018246}, {"id": 153, "seek": 111704, "start": 1128.6399999999999, "end": 1137.68, "text": " more performant and also probably this is the first and probably the last database channel", "tokens": [50944, 544, 2042, 394, 293, 611, 1391, 341, 307, 264, 700, 293, 1391, 264, 1036, 8149, 2269, 51396], "temperature": 0.0, "avg_logprob": -0.12069849036205774, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.005572556518018246}, {"id": 154, "seek": 111704, "start": 1138.48, "end": 1142.96, "text": " YouTube channel that I will be subscribed but I'm actually subscribed to the Clickhouse YouTube", "tokens": [51436, 3088, 2269, 300, 286, 486, 312, 16665, 457, 286, 478, 767, 16665, 281, 264, 8230, 6410, 3088, 51660], "temperature": 0.0, "avg_logprob": -0.12069849036205774, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.005572556518018246}, {"id": 155, "seek": 114296, "start": 1142.96, "end": 1148.56, "text": " channel and they have really really good videos like they have every month they have like a release", "tokens": [50364, 2269, 293, 436, 362, 534, 534, 665, 2145, 411, 436, 362, 633, 1618, 436, 362, 411, 257, 4374, 50644], "temperature": 0.0, "avg_logprob": -0.08024491265762684, "compression_ratio": 1.9073170731707316, "no_speech_prob": 0.04048309102654457}, {"id": 156, "seek": 114296, "start": 1148.56, "end": 1155.6000000000001, "text": " party video where the the Clickhouse team is showing the new features and there are a lot of", "tokens": [50644, 3595, 960, 689, 264, 264, 8230, 6410, 1469, 307, 4099, 264, 777, 4122, 293, 456, 366, 257, 688, 295, 50996], "temperature": 0.0, "avg_logprob": -0.08024491265762684, "compression_ratio": 1.9073170731707316, "no_speech_prob": 0.04048309102654457}, {"id": 157, "seek": 114296, "start": 1155.6000000000001, "end": 1163.28, "text": " good tutorials so it's it's really welcoming for for beginners and they say you get support from", "tokens": [50996, 665, 17616, 370, 309, 311, 309, 311, 534, 17378, 337, 337, 26992, 293, 436, 584, 291, 483, 1406, 490, 51380], "temperature": 0.0, "avg_logprob": -0.08024491265762684, "compression_ratio": 1.9073170731707316, "no_speech_prob": 0.04048309102654457}, {"id": 158, "seek": 114296, "start": 1163.28, "end": 1171.04, "text": " the community and there is really good there are really good materials out there so now let's look at", "tokens": [51380, 264, 1768, 293, 456, 307, 534, 665, 456, 366, 534, 665, 5319, 484, 456, 370, 586, 718, 311, 574, 412, 51768], "temperature": 0.0, "avg_logprob": -0.08024491265762684, "compression_ratio": 1.9073170731707316, "no_speech_prob": 0.04048309102654457}, {"id": 159, "seek": 117104, "start": 1171.04, "end": 1177.84, "text": " the user interface Grafana earlier I mentioned that I was about to start in my in the first", "tokens": [50364, 264, 4195, 9226, 8985, 69, 2095, 3071, 286, 2835, 300, 286, 390, 466, 281, 722, 294, 452, 294, 264, 700, 50704], "temperature": 0.0, "avg_logprob": -0.10718831051601453, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.008946155197918415}, {"id": 160, "seek": 117104, "start": 1177.84, "end": 1184.6399999999999, "text": " version of basicram I was about to start implementing my own my own user management and login and", "tokens": [50704, 3037, 295, 3875, 2356, 286, 390, 466, 281, 722, 18114, 452, 1065, 452, 1065, 4195, 4592, 293, 24276, 293, 51044], "temperature": 0.0, "avg_logprob": -0.10718831051601453, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.008946155197918415}, {"id": 161, "seek": 117104, "start": 1184.6399999999999, "end": 1190.32, "text": " authentication and Grafana this comes out of the box so it's much easier to add new user to give them", "tokens": [51044, 26643, 293, 8985, 69, 2095, 341, 1487, 484, 295, 264, 2424, 370, 309, 311, 709, 3571, 281, 909, 777, 4195, 281, 976, 552, 51328], "temperature": 0.0, "avg_logprob": -0.10718831051601453, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.008946155197918415}, {"id": 162, "seek": 117104, "start": 1190.32, "end": 1197.12, "text": " different permissions and again this is just the code that I would never want to write again", "tokens": [51328, 819, 32723, 293, 797, 341, 307, 445, 264, 3089, 300, 286, 576, 1128, 528, 281, 2464, 797, 51668], "temperature": 0.0, "avg_logprob": -0.10718831051601453, "compression_ratio": 1.7534246575342465, "no_speech_prob": 0.008946155197918415}, {"id": 163, "seek": 119712, "start": 1197.6, "end": 1207.6, "text": " right and in this repository I bundle the basicram version of Grafana it has some customizations", "tokens": [50388, 558, 293, 294, 341, 25841, 286, 24438, 264, 3875, 2356, 3037, 295, 8985, 69, 2095, 309, 575, 512, 2375, 14455, 50888], "temperature": 0.0, "avg_logprob": -0.10041049032500296, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.008297818712890148}, {"id": 164, "seek": 119712, "start": 1209.6, "end": 1216.9599999999998, "text": " also another benefit of Grafana is it's very easy to model the data and what you want to see", "tokens": [50988, 611, 1071, 5121, 295, 8985, 69, 2095, 307, 309, 311, 588, 1858, 281, 2316, 264, 1412, 293, 437, 291, 528, 281, 536, 51356], "temperature": 0.0, "avg_logprob": -0.10041049032500296, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.008297818712890148}, {"id": 165, "seek": 119712, "start": 1216.9599999999998, "end": 1223.52, "text": " in the in the visualization panels so for example here we have we can define filters", "tokens": [51356, 294, 264, 294, 264, 25801, 13419, 370, 337, 1365, 510, 321, 362, 321, 393, 6964, 15995, 51684], "temperature": 0.0, "avg_logprob": -0.10041049032500296, "compression_ratio": 1.5657142857142856, "no_speech_prob": 0.008297818712890148}, {"id": 166, "seek": 122352, "start": 1224.48, "end": 1231.6, "text": " we can have a preview of our data we can also configure different things for example here I'm", "tokens": [50412, 321, 393, 362, 257, 14281, 295, 527, 1412, 321, 393, 611, 22162, 819, 721, 337, 1365, 510, 286, 478, 50768], "temperature": 0.0, "avg_logprob": -0.10229945884031408, "compression_ratio": 1.651685393258427, "no_speech_prob": 0.011176049709320068}, {"id": 167, "seek": 122352, "start": 1231.6, "end": 1236.8, "text": " just showing how I can configure different colors for the different thresholds and also there is an", "tokens": [50768, 445, 4099, 577, 286, 393, 22162, 819, 4577, 337, 264, 819, 14678, 82, 293, 611, 456, 307, 364, 51028], "temperature": 0.0, "avg_logprob": -0.10229945884031408, "compression_ratio": 1.651685393258427, "no_speech_prob": 0.011176049709320068}, {"id": 168, "seek": 122352, "start": 1236.8, "end": 1245.36, "text": " SQL editor so when I write the SQL here this Grafana uses this SQL to fetch the data from Clickhouse", "tokens": [51028, 19200, 9839, 370, 562, 286, 2464, 264, 19200, 510, 341, 8985, 69, 2095, 4960, 341, 19200, 281, 23673, 264, 1412, 490, 8230, 6410, 51456], "temperature": 0.0, "avg_logprob": -0.10229945884031408, "compression_ratio": 1.651685393258427, "no_speech_prob": 0.011176049709320068}, {"id": 169, "seek": 124536, "start": 1245.6, "end": 1254.3999999999999, "text": " and here are other panels that I took advantage of here is the world map so I could it was really", "tokens": [50376, 293, 510, 366, 661, 13419, 300, 286, 1890, 5002, 295, 510, 307, 264, 1002, 4471, 370, 286, 727, 309, 390, 534, 50816], "temperature": 0.0, "avg_logprob": -0.13478822178310818, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.01933288760483265}, {"id": 170, "seek": 124536, "start": 1254.3999999999999, "end": 1259.6, "text": " literally plug-and-play I just configured few stuff and I say it from where to read the data about", "tokens": [50816, 3736, 5452, 12, 474, 12, 2858, 286, 445, 30538, 1326, 1507, 293, 286, 584, 309, 490, 689, 281, 1401, 264, 1412, 466, 51076], "temperature": 0.0, "avg_logprob": -0.13478822178310818, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.01933288760483265}, {"id": 171, "seek": 124536, "start": 1259.6, "end": 1269.12, "text": " the countries Grafana also has a third-party plugin for plotly so I still there were scenarios", "tokens": [51076, 264, 3517, 8985, 69, 2095, 611, 575, 257, 2636, 12, 23409, 23407, 337, 7542, 356, 370, 286, 920, 456, 645, 15077, 51552], "temperature": 0.0, "avg_logprob": -0.13478822178310818, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.01933288760483265}, {"id": 172, "seek": 126912, "start": 1269.12, "end": 1276.1599999999999, "text": " where I wanted to build some more complex panels and with this panel I could actually build this", "tokens": [50364, 689, 286, 1415, 281, 1322, 512, 544, 3997, 13419, 293, 365, 341, 4831, 286, 727, 767, 1322, 341, 50716], "temperature": 0.0, "avg_logprob": -0.08343330649442451, "compression_ratio": 1.7582938388625593, "no_speech_prob": 0.011048847809433937}, {"id": 173, "seek": 126912, "start": 1276.1599999999999, "end": 1283.04, "text": " one which is showing how the device the screen size is the width of the screen size is distributed", "tokens": [50716, 472, 597, 307, 4099, 577, 264, 4302, 264, 2568, 2744, 307, 264, 11402, 295, 264, 2568, 2744, 307, 12631, 51060], "temperature": 0.0, "avg_logprob": -0.08343330649442451, "compression_ratio": 1.7582938388625593, "no_speech_prob": 0.011048847809433937}, {"id": 174, "seek": 126912, "start": 1285.28, "end": 1291.4399999999998, "text": " yeah time series this is the kind of the most the default view in Grafana and also I could present", "tokens": [51172, 1338, 565, 2638, 341, 307, 264, 733, 295, 264, 881, 264, 7576, 1910, 294, 8985, 69, 2095, 293, 611, 286, 727, 1974, 51480], "temperature": 0.0, "avg_logprob": -0.08343330649442451, "compression_ratio": 1.7582938388625593, "no_speech_prob": 0.011048847809433937}, {"id": 175, "seek": 126912, "start": 1292.2399999999998, "end": 1295.76, "text": " the data in a table this is very good when you want to explore your own data", "tokens": [51520, 264, 1412, 294, 257, 3199, 341, 307, 588, 665, 562, 291, 528, 281, 6839, 428, 1065, 1412, 51696], "temperature": 0.0, "avg_logprob": -0.08343330649442451, "compression_ratio": 1.7582938388625593, "no_speech_prob": 0.011048847809433937}, {"id": 176, "seek": 129576, "start": 1295.92, "end": 1304.48, "text": " also Grafana comes with different data sources and of course Grafana needs to know how to talk to", "tokens": [50372, 611, 8985, 69, 2095, 1487, 365, 819, 1412, 7139, 293, 295, 1164, 8985, 69, 2095, 2203, 281, 458, 577, 281, 751, 281, 50800], "temperature": 0.0, "avg_logprob": -0.2389931360880534, "compression_ratio": 1.381679389312977, "no_speech_prob": 0.007255203556269407}, {"id": 177, "seek": 129576, "start": 1306.24, "end": 1312.8799999999999, "text": " Clickhouse in my in basic realm I'm using a data source developed by company called", "tokens": [50888, 8230, 6410, 294, 452, 294, 3875, 15355, 286, 478, 1228, 257, 1412, 4009, 4743, 538, 2237, 1219, 51220], "temperature": 0.0, "avg_logprob": -0.2389931360880534, "compression_ratio": 1.381679389312977, "no_speech_prob": 0.007255203556269407}, {"id": 178, "seek": 131288, "start": 1312.88, "end": 1319.8400000000001, "text": " Altinity but there is also another one developed by actually official by Clickhouse right", "tokens": [50364, 15992, 11540, 457, 456, 307, 611, 1071, 472, 4743, 538, 767, 4783, 538, 8230, 6410, 558, 50712], "temperature": 0.0, "avg_logprob": -0.1402355949833708, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.016200240701436996}, {"id": 179, "seek": 131288, "start": 1324.88, "end": 1332.16, "text": " yeah and just to say that all these things that I'm showing all these dashboards that", "tokens": [50964, 1338, 293, 445, 281, 584, 300, 439, 613, 721, 300, 286, 478, 4099, 439, 613, 8240, 17228, 300, 51328], "temperature": 0.0, "avg_logprob": -0.1402355949833708, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.016200240701436996}, {"id": 180, "seek": 131288, "start": 1332.96, "end": 1335.5200000000002, "text": " are built in in the basic version of Grafana", "tokens": [51368, 366, 3094, 294, 294, 264, 3875, 3037, 295, 8985, 69, 2095, 51496], "temperature": 0.0, "avg_logprob": -0.1402355949833708, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.016200240701436996}, {"id": 181, "seek": 133552, "start": 1336.24, "end": 1345.04, "text": " everything there is actually under version control so it's not just that I created a dashboard in", "tokens": [50400, 1203, 456, 307, 767, 833, 3037, 1969, 370, 309, 311, 406, 445, 300, 286, 2942, 257, 18342, 294, 50840], "temperature": 0.0, "avg_logprob": -0.13147494436680585, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004424340091645718}, {"id": 182, "seek": 133552, "start": 1345.6, "end": 1350.6399999999999, "text": " Grafana instance and exported it and save it somewhere this I have this repository where I have", "tokens": [50868, 8985, 69, 2095, 5197, 293, 42055, 309, 293, 3155, 309, 4079, 341, 286, 362, 341, 25841, 689, 286, 362, 51120], "temperature": 0.0, "avg_logprob": -0.13147494436680585, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004424340091645718}, {"id": 183, "seek": 133552, "start": 1351.2, "end": 1356.72, "text": " the configuration for each of the panels that I'm maintaining and then this makes makes it much", "tokens": [51148, 264, 11694, 337, 1184, 295, 264, 13419, 300, 286, 478, 14916, 293, 550, 341, 1669, 1669, 309, 709, 51424], "temperature": 0.0, "avg_logprob": -0.13147494436680585, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004424340091645718}, {"id": 184, "seek": 133552, "start": 1356.72, "end": 1362.4, "text": " easier when I need to change something or to add a new panel and I can go through the history and I", "tokens": [51424, 3571, 562, 286, 643, 281, 1319, 746, 420, 281, 909, 257, 777, 4831, 293, 286, 393, 352, 807, 264, 2503, 293, 286, 51708], "temperature": 0.0, "avg_logprob": -0.13147494436680585, "compression_ratio": 1.706140350877193, "no_speech_prob": 0.004424340091645718}, {"id": 185, "seek": 136240, "start": 1362.4, "end": 1368.96, "text": " can understand what actually change if something has to be reverted yeah for example here we are", "tokens": [50364, 393, 1223, 437, 767, 1319, 498, 746, 575, 281, 312, 319, 18537, 1338, 337, 1365, 510, 321, 366, 50692], "temperature": 0.0, "avg_logprob": -0.08526684216090612, "compression_ratio": 1.5183246073298429, "no_speech_prob": 0.008414331823587418}, {"id": 186, "seek": 136240, "start": 1368.96, "end": 1376.3200000000002, "text": " seeing how I keep this row as it's a templated SQL but this is how it's presented then when we look", "tokens": [50692, 2577, 577, 286, 1066, 341, 5386, 382, 309, 311, 257, 9100, 770, 19200, 457, 341, 307, 577, 309, 311, 8212, 550, 562, 321, 574, 51060], "temperature": 0.0, "avg_logprob": -0.08526684216090612, "compression_ratio": 1.5183246073298429, "no_speech_prob": 0.008414331823587418}, {"id": 187, "seek": 136240, "start": 1376.3200000000002, "end": 1387.3600000000001, "text": " in Grafana and again out of all this source code configuration that I keep for the dashboards", "tokens": [51060, 294, 8985, 69, 2095, 293, 797, 484, 295, 439, 341, 4009, 3089, 11694, 300, 286, 1066, 337, 264, 8240, 17228, 51612], "temperature": 0.0, "avg_logprob": -0.08526684216090612, "compression_ratio": 1.5183246073298429, "no_speech_prob": 0.008414331823587418}, {"id": 188, "seek": 138736, "start": 1387.4399999999998, "end": 1394.32, "text": " I'm building a docker image where we here we have a bit of branding work just removing", "tokens": [50368, 286, 478, 2390, 257, 360, 9178, 3256, 689, 321, 510, 321, 362, 257, 857, 295, 27279, 589, 445, 12720, 50712], "temperature": 0.0, "avg_logprob": -0.11085240785465685, "compression_ratio": 1.8104265402843602, "no_speech_prob": 0.005060954950749874}, {"id": 189, "seek": 138736, "start": 1394.32, "end": 1401.04, "text": " some things from the default or rewriting some things from the default Grafana image here we are", "tokens": [50712, 512, 721, 490, 264, 7576, 420, 319, 19868, 512, 721, 490, 264, 7576, 8985, 69, 2095, 3256, 510, 321, 366, 51048], "temperature": 0.0, "avg_logprob": -0.11085240785465685, "compression_ratio": 1.8104265402843602, "no_speech_prob": 0.005060954950749874}, {"id": 190, "seek": 138736, "start": 1401.04, "end": 1406.08, "text": " installing the plugins that we need for our setup and here we are importing all the configurations", "tokens": [51048, 20762, 264, 33759, 300, 321, 643, 337, 527, 8657, 293, 510, 321, 366, 43866, 439, 264, 31493, 51300], "temperature": 0.0, "avg_logprob": -0.11085240785465685, "compression_ratio": 1.8104265402843602, "no_speech_prob": 0.005060954950749874}, {"id": 191, "seek": 138736, "start": 1406.08, "end": 1414.3999999999999, "text": " for the dashboards and the data sources and what I found over time when I spoke to different people", "tokens": [51300, 337, 264, 8240, 17228, 293, 264, 1412, 7139, 293, 437, 286, 1352, 670, 565, 562, 286, 7179, 281, 819, 561, 51716], "temperature": 0.0, "avg_logprob": -0.11085240785465685, "compression_ratio": 1.8104265402843602, "no_speech_prob": 0.005060954950749874}, {"id": 192, "seek": 141440, "start": 1414.4, "end": 1421.2, "text": " who asked me about three user monitoring systems very often the conversation was just ending when", "tokens": [50364, 567, 2351, 385, 466, 1045, 4195, 11028, 3652, 588, 2049, 264, 3761, 390, 445, 8121, 562, 50704], "temperature": 0.0, "avg_logprob": -0.10156722295851935, "compression_ratio": 2.0466101694915255, "no_speech_prob": 0.019169148057699203}, {"id": 193, "seek": 141440, "start": 1421.2, "end": 1425.44, "text": " when I was explaining yeah you need to run this component on this server and you need to run this", "tokens": [50704, 562, 286, 390, 13468, 1338, 291, 643, 281, 1190, 341, 6542, 322, 341, 7154, 293, 291, 643, 281, 1190, 341, 50916], "temperature": 0.0, "avg_logprob": -0.10156722295851935, "compression_ratio": 2.0466101694915255, "no_speech_prob": 0.019169148057699203}, {"id": 194, "seek": 141440, "start": 1425.44, "end": 1430.64, "text": " component on this server and you don't need to run this component on this server and it looks like", "tokens": [50916, 6542, 322, 341, 7154, 293, 291, 500, 380, 643, 281, 1190, 341, 6542, 322, 341, 7154, 293, 309, 1542, 411, 51176], "temperature": 0.0, "avg_logprob": -0.10156722295851935, "compression_ratio": 2.0466101694915255, "no_speech_prob": 0.019169148057699203}, {"id": 195, "seek": 141440, "start": 1430.64, "end": 1436.64, "text": " their use case the use case of the people that I spoke to was actually not requiring them to scale", "tokens": [51176, 641, 764, 1389, 264, 764, 1389, 295, 264, 561, 300, 286, 7179, 281, 390, 767, 406, 24165, 552, 281, 4373, 51476], "temperature": 0.0, "avg_logprob": -0.10156722295851935, "compression_ratio": 2.0466101694915255, "no_speech_prob": 0.019169148057699203}, {"id": 196, "seek": 141440, "start": 1436.64, "end": 1443.92, "text": " they had pretty small websites or web shops and I work on something a bit more monolithic", "tokens": [51476, 436, 632, 1238, 1359, 12891, 420, 3670, 14457, 293, 286, 589, 322, 746, 257, 857, 544, 1108, 42878, 51840], "temperature": 0.0, "avg_logprob": -0.10156722295851935, "compression_ratio": 2.0466101694915255, "no_speech_prob": 0.019169148057699203}, {"id": 197, "seek": 144440, "start": 1444.5600000000002, "end": 1450.96, "text": " it's called basicrum o in one and the idea is that probably again probably it sounds from", "tokens": [50372, 309, 311, 1219, 3875, 6247, 277, 294, 472, 293, 264, 1558, 307, 300, 1391, 797, 1391, 309, 3263, 490, 50692], "temperature": 0.0, "avg_logprob": -0.14231821623715488, "compression_ratio": 1.738532110091743, "no_speech_prob": 0.015056829899549484}, {"id": 198, "seek": 144440, "start": 1450.96, "end": 1454.64, "text": " engineering point of view a bad practice but it actually could be really practical thing", "tokens": [50692, 7043, 935, 295, 1910, 257, 1578, 3124, 457, 309, 767, 727, 312, 534, 8496, 551, 50876], "temperature": 0.0, "avg_logprob": -0.14231821623715488, "compression_ratio": 1.738532110091743, "no_speech_prob": 0.015056829899549484}, {"id": 199, "seek": 144440, "start": 1456.96, "end": 1463.52, "text": " the idea is to run everything on one big box and I believe for 20 euro a month this could be actually", "tokens": [50992, 264, 1558, 307, 281, 1190, 1203, 322, 472, 955, 2424, 293, 286, 1697, 337, 945, 14206, 257, 1618, 341, 727, 312, 767, 51320], "temperature": 0.0, "avg_logprob": -0.14231821623715488, "compression_ratio": 1.738532110091743, "no_speech_prob": 0.015056829899549484}, {"id": 200, "seek": 144440, "start": 1463.52, "end": 1472.8000000000002, "text": " hosted somewhere and I tested it it can handle 1.5 million page views a month and the idea here is", "tokens": [51320, 19204, 4079, 293, 286, 8246, 309, 309, 393, 4813, 502, 13, 20, 2459, 3028, 6809, 257, 1618, 293, 264, 1558, 510, 307, 51784], "temperature": 0.0, "avg_logprob": -0.14231821623715488, "compression_ratio": 1.738532110091743, "no_speech_prob": 0.015056829899549484}, {"id": 201, "seek": 147280, "start": 1473.44, "end": 1482.48, "text": " we introduced traffic which is a proxy it stays in front of this folder components and it's helping", "tokens": [50396, 321, 7268, 6419, 597, 307, 257, 29690, 309, 10834, 294, 1868, 295, 341, 10820, 6677, 293, 309, 311, 4315, 50848], "temperature": 0.0, "avg_logprob": -0.11186676882625965, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.010002190247178078}, {"id": 202, "seek": 147280, "start": 1482.48, "end": 1488.96, "text": " me for SSL termination and routing request because some of the request needs to go to the data", "tokens": [50848, 385, 337, 12238, 43, 1433, 2486, 293, 32722, 5308, 570, 512, 295, 264, 5308, 2203, 281, 352, 281, 264, 1412, 51172], "temperature": 0.0, "avg_logprob": -0.11186676882625965, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.010002190247178078}, {"id": 203, "seek": 147280, "start": 1488.96, "end": 1496.32, "text": " collection part and other request needs to go to the grafana to the part where we analyze the data", "tokens": [51172, 5765, 644, 293, 661, 5308, 2203, 281, 352, 281, 264, 1295, 69, 2095, 281, 264, 644, 689, 321, 12477, 264, 1412, 51540], "temperature": 0.0, "avg_logprob": -0.11186676882625965, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.010002190247178078}, {"id": 204, "seek": 147280, "start": 1497.36, "end": 1501.9199999999998, "text": " so this is really convenient it's really easy for people if you just want to give it a try", "tokens": [51592, 370, 341, 307, 534, 10851, 309, 311, 534, 1858, 337, 561, 498, 291, 445, 528, 281, 976, 309, 257, 853, 51820], "temperature": 0.0, "avg_logprob": -0.11186676882625965, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.010002190247178078}, {"id": 205, "seek": 150280, "start": 1503.76, "end": 1510.72, "text": " and a few takeaways I just have to say that a real user monitoring system is fairly complex system", "tokens": [50412, 293, 257, 1326, 45584, 286, 445, 362, 281, 584, 300, 257, 957, 4195, 11028, 1185, 307, 6457, 3997, 1185, 50760], "temperature": 0.0, "avg_logprob": -0.1455510195563821, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0044181011617183685}, {"id": 206, "seek": 150280, "start": 1510.72, "end": 1517.04, "text": " and you need to learn to train yourself you want to develop one you need to you need to", "tokens": [50760, 293, 291, 643, 281, 1466, 281, 3847, 1803, 291, 528, 281, 1499, 472, 291, 643, 281, 291, 643, 281, 51076], "temperature": 0.0, "avg_logprob": -0.1455510195563821, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0044181011617183685}, {"id": 207, "seek": 150280, "start": 1518.32, "end": 1523.04, "text": " learn more about on the data collection site where how the data is collected from the browser", "tokens": [51140, 1466, 544, 466, 322, 264, 1412, 5765, 3621, 689, 577, 264, 1412, 307, 11087, 490, 264, 11185, 51376], "temperature": 0.0, "avg_logprob": -0.1455510195563821, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0044181011617183685}, {"id": 208, "seek": 150280, "start": 1523.9199999999998, "end": 1530.0, "text": " how to visualize the data and it will be a bonus if you learn about how time series databases work", "tokens": [51420, 577, 281, 23273, 264, 1412, 293, 309, 486, 312, 257, 10882, 498, 291, 1466, 466, 577, 565, 2638, 22380, 589, 51724], "temperature": 0.0, "avg_logprob": -0.1455510195563821, "compression_ratio": 1.7962085308056872, "no_speech_prob": 0.0044181011617183685}, {"id": 209, "seek": 153000, "start": 1530.24, "end": 1536.08, "text": " again choosing the right database to solve the right problem is the key", "tokens": [50376, 797, 10875, 264, 558, 8149, 281, 5039, 264, 558, 1154, 307, 264, 2141, 50668], "temperature": 0.0, "avg_logprob": -0.10700577781313941, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.0029088077135384083}, {"id": 210, "seek": 153000, "start": 1537.52, "end": 1542.24, "text": " and it's great when when you can transfer a problem from the application on the database", "tokens": [50740, 293, 309, 311, 869, 562, 562, 291, 393, 5003, 257, 1154, 490, 264, 3861, 322, 264, 8149, 50976], "temperature": 0.0, "avg_logprob": -0.10700577781313941, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.0029088077135384083}, {"id": 211, "seek": 153000, "start": 1542.96, "end": 1550.0, "text": " layer it just saves a lot of time and yeah grafana could save a lot of time and effort even I", "tokens": [51012, 4583, 309, 445, 19155, 257, 688, 295, 565, 293, 1338, 1295, 69, 2095, 727, 3155, 257, 688, 295, 565, 293, 4630, 754, 286, 51364], "temperature": 0.0, "avg_logprob": -0.10700577781313941, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.0029088077135384083}, {"id": 212, "seek": 153000, "start": 1550.0, "end": 1556.48, "text": " recommend it even if you still want to build your own front end maybe just start with grafana to", "tokens": [51364, 2748, 309, 754, 498, 291, 920, 528, 281, 1322, 428, 1065, 1868, 917, 1310, 445, 722, 365, 1295, 69, 2095, 281, 51688], "temperature": 0.0, "avg_logprob": -0.10700577781313941, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.0029088077135384083}, {"id": 213, "seek": 155648, "start": 1556.48, "end": 1563.76, "text": " play with the data and to display something it literally will save a lot of time and I got a", "tokens": [50364, 862, 365, 264, 1412, 293, 281, 4674, 746, 309, 3736, 486, 3155, 257, 688, 295, 565, 293, 286, 658, 257, 50728], "temperature": 0.0, "avg_logprob": -0.1470431857638889, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.009850984439253807}, {"id": 214, "seek": 155648, "start": 1563.76, "end": 1569.84, "text": " signal that I run out of time but you can catch me up all right I can take one question", "tokens": [50728, 6358, 300, 286, 1190, 484, 295, 565, 457, 291, 393, 3745, 385, 493, 439, 558, 286, 393, 747, 472, 1168, 51032], "temperature": 0.0, "avg_logprob": -0.1470431857638889, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.009850984439253807}, {"id": 215, "seek": 158648, "start": 1586.96, "end": 1595.28, "text": " so in this project we don't really keep any IP addresses so for example that I guess that's", "tokens": [50388, 370, 294, 341, 1716, 321, 500, 380, 534, 1066, 604, 8671, 16862, 370, 337, 1365, 300, 286, 2041, 300, 311, 50804], "temperature": 0.0, "avg_logprob": -0.16134589910507202, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.00946691446006298}, {"id": 216, "seek": 158648, "start": 1595.28, "end": 1605.3600000000001, "text": " what we consider like user data or yeah so the backend doesn't store any personal data", "tokens": [50804, 437, 321, 1949, 411, 4195, 1412, 420, 1338, 370, 264, 38087, 1177, 380, 3531, 604, 2973, 1412, 51308], "temperature": 0.0, "avg_logprob": -0.16134589910507202, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.00946691446006298}, {"id": 217, "seek": 158648, "start": 1606.16, "end": 1611.1200000000001, "text": " in this case so by default it's using the IP address only to identify the country and the", "tokens": [51348, 294, 341, 1389, 370, 538, 7576, 309, 311, 1228, 264, 8671, 2985, 787, 281, 5876, 264, 1941, 293, 264, 51596], "temperature": 0.0, "avg_logprob": -0.16134589910507202, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.00946691446006298}, {"id": 218, "seek": 161112, "start": 1612.08, "end": 1620.8799999999999, "text": " the city but it's not storing the IP address after that and I know that on the data collection site", "tokens": [50412, 264, 2307, 457, 309, 311, 406, 26085, 264, 8671, 2985, 934, 300, 293, 286, 458, 300, 322, 264, 1412, 5765, 3621, 50852], "temperature": 0.0, "avg_logprob": -0.12245110670725505, "compression_ratio": 1.6627218934911243, "no_speech_prob": 0.012710710987448692}, {"id": 219, "seek": 161112, "start": 1620.8799999999999, "end": 1627.36, "text": " from the boomerang library I'm not sure if it's on the boomerang library has also like", "tokens": [50852, 490, 264, 9351, 260, 656, 6405, 286, 478, 406, 988, 498, 309, 311, 322, 264, 9351, 260, 656, 6405, 575, 611, 411, 51176], "temperature": 0.0, "avg_logprob": -0.12245110670725505, "compression_ratio": 1.6627218934911243, "no_speech_prob": 0.012710710987448692}, {"id": 220, "seek": 161112, "start": 1627.36, "end": 1634.1599999999999, "text": " part of the boomerang source code is private but I know that for PCI compliance reasons it has", "tokens": [51176, 644, 295, 264, 9351, 260, 656, 4009, 3089, 307, 4551, 457, 286, 458, 300, 337, 6465, 40, 15882, 4112, 309, 575, 51516], "temperature": 0.0, "avg_logprob": -0.12245110670725505, "compression_ratio": 1.6627218934911243, "no_speech_prob": 0.012710710987448692}, {"id": 221, "seek": 163416, "start": 1634.16, "end": 1641.2, "text": " special parts that try to avoid collecting stuff around the user sometimes the user may", "tokens": [50364, 2121, 3166, 300, 853, 281, 5042, 12510, 1507, 926, 264, 4195, 2171, 264, 4195, 815, 50716], "temperature": 0.0, "avg_logprob": -0.11428629027472602, "compression_ratio": 1.6441717791411044, "no_speech_prob": 0.038923393934965134}, {"id": 222, "seek": 163416, "start": 1641.2, "end": 1646.0800000000002, "text": " put for example a credit card number and this could be actually collected by mistake so this", "tokens": [50716, 829, 337, 1365, 257, 5397, 2920, 1230, 293, 341, 727, 312, 767, 11087, 538, 6146, 370, 341, 50960], "temperature": 0.0, "avg_logprob": -0.11428629027472602, "compression_ratio": 1.6441717791411044, "no_speech_prob": 0.038923393934965134}, {"id": 223, "seek": 163416, "start": 1646.0800000000002, "end": 1660.88, "text": " library also tries to avoid collecting critical user information do you mean to consent", "tokens": [50960, 6405, 611, 9898, 281, 5042, 12510, 4924, 4195, 1589, 360, 291, 914, 281, 14546, 51700], "temperature": 0.0, "avg_logprob": -0.11428629027472602, "compression_ratio": 1.6441717791411044, "no_speech_prob": 0.038923393934965134}, {"id": 224, "seek": 166088, "start": 1661.7600000000002, "end": 1662.0800000000002, "text": " the cons", "tokens": [50408, 264, 1014, 50424], "temperature": 0.0, "avg_logprob": -0.20594895560786408, "compression_ratio": 1.6178861788617886, "no_speech_prob": 0.019391890615224838}, {"id": 225, "seek": 166088, "start": 1668.0, "end": 1673.92, "text": " so the library comes with a special snippet that's a loader snippet so you can have your own", "tokens": [50720, 370, 264, 6405, 1487, 365, 257, 2121, 35623, 302, 300, 311, 257, 3677, 260, 35623, 302, 370, 291, 393, 362, 428, 1065, 51016], "temperature": 0.0, "avg_logprob": -0.20594895560786408, "compression_ratio": 1.6178861788617886, "no_speech_prob": 0.019391890615224838}, {"id": 226, "seek": 166088, "start": 1675.1200000000001, "end": 1681.6000000000001, "text": " callback so you can you can call this loader snippet only after a cookie consent so it's possible", "tokens": [51076, 818, 3207, 370, 291, 393, 291, 393, 818, 341, 3677, 260, 35623, 302, 787, 934, 257, 14417, 14546, 370, 309, 311, 1944, 51400], "temperature": 0.0, "avg_logprob": -0.20594895560786408, "compression_ratio": 1.6178861788617886, "no_speech_prob": 0.019391890615224838}, {"id": 227, "seek": 169088, "start": 1690.88, "end": 1692.1000000000001, "text": " you", "tokens": [50400, 291, 50425], "temperature": 0.0, "avg_logprob": -0.7559775710105896, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.413788765668869}], "language": "en"}