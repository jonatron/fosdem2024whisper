{"text": " All right. So next up we're going to have Aiden who is going to be talking to us about multi-image and container. All right. Ready? Okay. All right. Hi, everyone. I'm Aiden McClelland. I work for a company called Start 9. So this project here is a little bit of a work in progress, but it is something we are trying out because we have a little bit of a less common use case for our containers, and we decided to try something a little different. So first some background. We develop an operating system called Start OS. The purpose of this operating system is to allow end users without technical expertise to run their own home servers. So the idea being like trying to bring the desktop experience to home server administration, and that way we can bring a lot of these self-hosted applications to a wider variety of people on their own hardware without them having to learn everything you need to learn about Docker and the hosting tools that we're all familiar with. So as part of this, we do have a little bit of a different use case than is generally intended for things like Kubernetes or Ansible or a lot of these tools that are designed for deploying corporate infrastructure at scale. We're really looking at like a single host machine that the user wants very low touch with. They don't want to spend a lot of time configuring their applications at a granular level. So we decided, you know, like a lot of these applications, they come with these Docker-composed setups, right? You have a main image that has your application code and then you have things like databases and reverse proxies, etc. And commonly we deploy this as a Docker-compose file, and what this does is it creates a bunch of containers that now have to be managed by the OS and by proxy by the user, right? So what we've always tried to do with Start OS is we've maintained this idea of one container, one service. And what this allows us to do is it reduces a lot of the complexity of the management of a bunch of different containers and also provides a single IP address and virtual interface on which the application is running. So when you're doing all of your network mapping, all of that can be mapped to a single virtual IP address that can then be viewed either from within the subnet within the device or is then exported through the host. This also means that you can define resource limits on a single container basis as opposed to having to do a group of containers and managing that as a group, a C group with subgroups, right? Another final reason that we did this is that our package maintainer scripts, we prefer to run inside the contained environment and these package maintainer scripts are run in JavaScript. So we run a service manager in the container that reads the package maintainer scripts and then is able to set up all of our subcontainers, our sub file systems from there, and execute our actual binaries. Okay, so the question is why do people want multiple containers at all, right? Like oftentimes you can take a single Docker image, a single application image and install all of the software you might need, but in practice this is not as easy for the service developer, right? A lot of times we have people coming to us asking for, hey, I want to be able to use an off-the-shelf Postgres image, I want to use an off-the-shelf Nginx image, I don't want to have to use like the package manager for the distribution of my container, to install that and manage it. So that's like the number one use case that we have for that. It also allows you to run applications, like say you have one in Debian, one in Alpine, run all of them together. Then, you know, the other reason that you might want multiple containers is you can isolate the subcomponents of an application away from each other and also do resource limits on individual application subcomponents. If anybody has additional reasons why you might want to do separate containers as opposed to a single container for an application, I would love to hear them, but these are the reasons we came up with. So our solution, we cover this first use case using trutes. Number two, as far as we can tell, works for the most part, but that is remaining to be teased out. This does not allow us to isolate the subcomponents of our application from each other or create resource limits on individual applications. Subcomponents as easily, those will have to be managed by manual tuning of resource limits within the prokates of the container. So, yeah, we've ultimately decided that those last two components aren't really necessary for our use case. Ultimately, a single application is where we define our sandbox. So sandboxing separate parts of an application from each other, like has some security benefit, we've decided isn't worth the complexity. So we decided to do this with LXC. Why do we do LXC as opposed to something like Docker or Podman? LXC is a lot more composable. It allows us to pop the hood on a lot of the very subcomponents of container technology and manage it more manually. So we can, for example, easily manipulate the container root FS at runtime. So even with an unprivileged container, that unprivileged container can communicate with the host and modify its root file system very easily. We use our shared mount propagation for our root FS, which allows the host operating system to easily manipulate that file system. And then it's also unlike some other container tools, you can perform commands like shrewt and mount from inside an unprivileged container, which is not allowed on a lot of other technologies. So to put together a service, an application, we have effectively a single root FS image that all of our applications share. This root FS image is just a base image that we use for all of our containers that has a, like, we use Alpine right now, but it loads a Node.js application that runs the package maintainer scripts and then launches the various actual demons inside their trues. It communicates with the host using a JSON RPC API over a Unix domain socket. So there's bi-directional communication between the host and the service manager in the container, and then, yeah, it can perform the actual application code inside the shrewts. So the host API, what it does for the container is it can perform some manipulation of the root file system of the container, and this allows creating overlaid images in the same way you might be creating a container. All we do is we create a root FS image with an overlay file system and attach it to the container in a way that they can trude into it. And then we also have a bunch of other APIs that these packages can interact with, mostly for integration with the end user experience, and integration with other services and applications on the host in a way that the user might have to intermediate. And then we also have a set of APIs designed for hassle-free networking. If you have, you know, some application bound to a port, you can now attach that port to a Tor address, to a clearnet address, or to just a LAN address so that you can be accessed by your local area network. And the host OS manages all of the certificate management, either through Let's Encrypt, or through a host root CA for the LAN communication, because obviously you can't get a Let's Encrypt certificate for a .local. Okay, so then the service itself, it runs a very basic API that receives commands from the hosts. So when the application is running, it can receive like an initialization command, it can start or stop the service, and then shut down the service entirely in order to kill the container. And then it also invokes all of the various package maintainer scripts, such as editing user configuration, installing the service, or updating the service. All of those perform various package maintainer scripts that get called from the host. Okay, so when we actually launch a binary, the package developer defines in some JavaScript, we have some well-typed TypeScript APIs for this to describe this structure, but it defines what binaries to launch, what images to launch each binary in, where to mount its persistence volume. So we have a series of persistence volumes that are mounted to the container, and can be attached to any path within these sub-file systems, and then it defines any environment variables or arguments in any standard way that you would launch a program. And then for each command that you have, when you just similar to how you would define a system deservice file, you can define all of these arguments and then any dependencies or health checks associated with your service. And then for each of these commands, the in-container service manager will mount an overlaid image for the requested image ID to the container. It will then take our special directories, proxys, dev, and run, and bind them inside the container. So all of the containers share the same proxys, dev, and run. And then it will run the command in the true. Okay, so here is an example I have of a package maintainer script. I don't know if that's actually visible to everyone. Is that, are you guys able to see that? Okay. Well, I suppose I can just talk about it. But effectively, you have a fairly simple JSON configuration where you define your image ID, your command, your arguments, and then some health checks defining when is this thing ready, as well as some dependencies. So like if you don't want to launch a various demon until another service is ready, you can just specify that and then it won't launch until its health check passes. So all of this is available on the GitHub if you want to check it out. This particular example is in GitHub's start9labs slash hello world startOS. There should be a link on the talk. So time to do a little demo of what I have working so far. Let's see if I can get my shells over here. All right. So here I have an instance running, hold on. There we go. Here I have an instance running startOS. I've already installed a package. This package in this case is NextCloud. This NextCloud package contains two images. It's got the NextCloud base image, which also contains the Nginx server because it's running the PHP for NextCloud. And then we have Postgres, which is our database persistence layer for NextCloud. So what we're going to do, so we've attached into this container, and then I'm going to go ahead and just inject, basically run a REPL inside the JavaScript engine here. And I'm going to go ahead and do my imports here as well. And what this has done is it has connected us to our JSON RPC APIs, both the hosting of the container and the container into the host. And then we're going to create a couple of overlay images. So first we're going to do our Postgres image. And so what this is going to do is it's going to tell the host, hey, I want to mount this Postgres image to the container. It says, okay, here you go. Here's the path at which I have attached it. I'm going to do the same thing for the main image. And there we are. I'm going to go ahead and define a couple environment variables. Okay. So I have a set of temporary hacks that I've put in that will later be managed by the actual container service manager. But it's mainly around permissions of the container. I still need to get Shift FS working properly. Because LXC, what it does is it maps the UIDs within the unprivileged container to UIDs on the host. And so when we mount stuff to the container, we also need to perform that same mapping. So we're not doing that yet, but I have a set of ownership changes that will manage that. And then all we have to do is go ahead and launch our application. So I'll go ahead and launch Postgres first. And here we go. We have Postgres running inside a tru, inside the container. And it looks like it's ready. And then now I can also launch. Next slide. So here we have, now both of these applications are running within the same process namespace, the same C group, the same container. But they're running from completely separate images. And that's all I have to show you guys. I think we can open up for Q&A. Thank you. So we have considered the idea. Right now we actually haven't found it necessary yet. Like the tru seems to be sufficient for the sandboxing we need to do. As far as we can tell, the technology is at a point where it wouldn't be too difficult to do containers and containers, but realistically we haven't found it necessary. That's all. So I think you're asking as a package developer how we distribute your application. So if you have a service that you want to distribute to our users, to people who are running on StartOS, we have our own, like the company Start9 runs a marketplace. But we just have a very standardized package format. In this package format, you could host on any website. If you want to charge for it, you can charge for it. But ultimately the APIs are generic enough that you can run your own marketplace to offer whatever services you want using whatever protocols you'd like to to gate access to those S9PKs. So as a service developer, in general, if you're publishing to our official registry, that means that you have a free and open source project that you're looking to distribute for free. But that does not stop you from running your own paid marketplace. One more question. I'm sorry, I couldn't hear that. Other resources for our application? Yeah, so the resources are managed on the scale of the entire application using the configuration of the outer LXC container that everything runs inside of. So you can just modify that LXC config. Well, we modify that LXC config automatically based off of the host APIs. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " All right.", "tokens": [50364, 1057, 558, 13, 50714], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 1, "seek": 0, "start": 7.0, "end": 14.0, "text": " So next up we're going to have Aiden who is going to be talking to us about multi-image", "tokens": [50714, 407, 958, 493, 321, 434, 516, 281, 362, 316, 4380, 567, 307, 516, 281, 312, 1417, 281, 505, 466, 4825, 12, 26624, 51064], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 2, "seek": 0, "start": 14.0, "end": 16.0, "text": " and container.", "tokens": [51064, 293, 10129, 13, 51164], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 3, "seek": 0, "start": 16.0, "end": 18.0, "text": " All right.", "tokens": [51164, 1057, 558, 13, 51264], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 4, "seek": 0, "start": 18.0, "end": 20.0, "text": " Ready?", "tokens": [51264, 9944, 30, 51364], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 5, "seek": 0, "start": 20.0, "end": 21.0, "text": " Okay.", "tokens": [51364, 1033, 13, 51414], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 6, "seek": 0, "start": 21.0, "end": 22.0, "text": " All right.", "tokens": [51414, 1057, 558, 13, 51464], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 7, "seek": 0, "start": 22.0, "end": 23.0, "text": " Hi, everyone.", "tokens": [51464, 2421, 11, 1518, 13, 51514], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 8, "seek": 0, "start": 23.0, "end": 25.0, "text": " I'm Aiden McClelland.", "tokens": [51514, 286, 478, 316, 4380, 12061, 306, 285, 474, 13, 51614], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 9, "seek": 0, "start": 25.0, "end": 29.0, "text": " I work for a company called Start 9.", "tokens": [51614, 286, 589, 337, 257, 2237, 1219, 6481, 1722, 13, 51814], "temperature": 0.0, "avg_logprob": -0.44922805413967226, "compression_ratio": 1.4076433121019107, "no_speech_prob": 0.2105340212583542}, {"id": 10, "seek": 2900, "start": 29.0, "end": 34.0, "text": " So this project here is a little bit of a work in progress,", "tokens": [50364, 407, 341, 1716, 510, 307, 257, 707, 857, 295, 257, 589, 294, 4205, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10543471442328559, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.013205359689891338}, {"id": 11, "seek": 2900, "start": 34.0, "end": 41.0, "text": " but it is something we are trying out because we have a little bit of a less common use case", "tokens": [50614, 457, 309, 307, 746, 321, 366, 1382, 484, 570, 321, 362, 257, 707, 857, 295, 257, 1570, 2689, 764, 1389, 50964], "temperature": 0.0, "avg_logprob": -0.10543471442328559, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.013205359689891338}, {"id": 12, "seek": 2900, "start": 41.0, "end": 45.0, "text": " for our containers, and we decided to try something a little different.", "tokens": [50964, 337, 527, 17089, 11, 293, 321, 3047, 281, 853, 746, 257, 707, 819, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10543471442328559, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.013205359689891338}, {"id": 13, "seek": 2900, "start": 45.0, "end": 47.0, "text": " So first some background.", "tokens": [51164, 407, 700, 512, 3678, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10543471442328559, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.013205359689891338}, {"id": 14, "seek": 2900, "start": 47.0, "end": 51.0, "text": " We develop an operating system called Start OS.", "tokens": [51264, 492, 1499, 364, 7447, 1185, 1219, 6481, 12731, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10543471442328559, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.013205359689891338}, {"id": 15, "seek": 2900, "start": 51.0, "end": 57.0, "text": " The purpose of this operating system is to allow end users without technical expertise", "tokens": [51464, 440, 4334, 295, 341, 7447, 1185, 307, 281, 2089, 917, 5022, 1553, 6191, 11769, 51764], "temperature": 0.0, "avg_logprob": -0.10543471442328559, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.013205359689891338}, {"id": 16, "seek": 5700, "start": 57.0, "end": 63.0, "text": " to run their own home servers.", "tokens": [50364, 281, 1190, 641, 1065, 1280, 15909, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08260624749319893, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.050974637269973755}, {"id": 17, "seek": 5700, "start": 63.0, "end": 69.0, "text": " So the idea being like trying to bring the desktop experience to home server administration,", "tokens": [50664, 407, 264, 1558, 885, 411, 1382, 281, 1565, 264, 14502, 1752, 281, 1280, 7154, 7236, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08260624749319893, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.050974637269973755}, {"id": 18, "seek": 5700, "start": 69.0, "end": 78.0, "text": " and that way we can bring a lot of these self-hosted applications to a wider variety of people", "tokens": [50964, 293, 300, 636, 321, 393, 1565, 257, 688, 295, 613, 2698, 12, 6037, 292, 5821, 281, 257, 11842, 5673, 295, 561, 51414], "temperature": 0.0, "avg_logprob": -0.08260624749319893, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.050974637269973755}, {"id": 19, "seek": 5700, "start": 78.0, "end": 85.0, "text": " on their own hardware without them having to learn everything you need to learn about Docker", "tokens": [51414, 322, 641, 1065, 8837, 1553, 552, 1419, 281, 1466, 1203, 291, 643, 281, 1466, 466, 33772, 51764], "temperature": 0.0, "avg_logprob": -0.08260624749319893, "compression_ratio": 1.6368421052631579, "no_speech_prob": 0.050974637269973755}, {"id": 20, "seek": 8500, "start": 85.0, "end": 93.0, "text": " and the hosting tools that we're all familiar with.", "tokens": [50364, 293, 264, 16058, 3873, 300, 321, 434, 439, 4963, 365, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06711136744572566, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.018243353813886642}, {"id": 21, "seek": 8500, "start": 93.0, "end": 100.0, "text": " So as part of this, we do have a little bit of a different use case than is generally intended", "tokens": [50764, 407, 382, 644, 295, 341, 11, 321, 360, 362, 257, 707, 857, 295, 257, 819, 764, 1389, 813, 307, 5101, 10226, 51114], "temperature": 0.0, "avg_logprob": -0.06711136744572566, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.018243353813886642}, {"id": 22, "seek": 8500, "start": 100.0, "end": 106.0, "text": " for things like Kubernetes or Ansible or a lot of these tools that are designed", "tokens": [51114, 337, 721, 411, 23145, 420, 14590, 964, 420, 257, 688, 295, 613, 3873, 300, 366, 4761, 51414], "temperature": 0.0, "avg_logprob": -0.06711136744572566, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.018243353813886642}, {"id": 23, "seek": 8500, "start": 106.0, "end": 109.0, "text": " for deploying corporate infrastructure at scale.", "tokens": [51414, 337, 34198, 10896, 6896, 412, 4373, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06711136744572566, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.018243353813886642}, {"id": 24, "seek": 10900, "start": 109.0, "end": 117.0, "text": " We're really looking at like a single host machine that the user wants very low touch with.", "tokens": [50364, 492, 434, 534, 1237, 412, 411, 257, 2167, 3975, 3479, 300, 264, 4195, 2738, 588, 2295, 2557, 365, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12573197152879503, "compression_ratio": 1.5103092783505154, "no_speech_prob": 0.03673391416668892}, {"id": 25, "seek": 10900, "start": 117.0, "end": 125.0, "text": " They don't want to spend a lot of time configuring their applications at a granular level.", "tokens": [50764, 814, 500, 380, 528, 281, 3496, 257, 688, 295, 565, 6662, 1345, 641, 5821, 412, 257, 39962, 1496, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12573197152879503, "compression_ratio": 1.5103092783505154, "no_speech_prob": 0.03673391416668892}, {"id": 26, "seek": 10900, "start": 125.0, "end": 135.0, "text": " So we decided, you know, like a lot of these applications, they come with these Docker-composed setups, right?", "tokens": [51164, 407, 321, 3047, 11, 291, 458, 11, 411, 257, 688, 295, 613, 5821, 11, 436, 808, 365, 613, 33772, 12, 21541, 1744, 46832, 11, 558, 30, 51664], "temperature": 0.0, "avg_logprob": -0.12573197152879503, "compression_ratio": 1.5103092783505154, "no_speech_prob": 0.03673391416668892}, {"id": 27, "seek": 13500, "start": 135.0, "end": 141.0, "text": " You have a main image that has your application code and then you have things like databases", "tokens": [50364, 509, 362, 257, 2135, 3256, 300, 575, 428, 3861, 3089, 293, 550, 291, 362, 721, 411, 22380, 50664], "temperature": 0.0, "avg_logprob": -0.11944722510003425, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.07469339668750763}, {"id": 28, "seek": 13500, "start": 141.0, "end": 144.0, "text": " and reverse proxies, etc.", "tokens": [50664, 293, 9943, 447, 87, 530, 11, 5183, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11944722510003425, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.07469339668750763}, {"id": 29, "seek": 13500, "start": 144.0, "end": 152.0, "text": " And commonly we deploy this as a Docker-compose file, and what this does is it creates a bunch of containers", "tokens": [50814, 400, 12719, 321, 7274, 341, 382, 257, 33772, 12, 21541, 541, 3991, 11, 293, 437, 341, 775, 307, 309, 7829, 257, 3840, 295, 17089, 51214], "temperature": 0.0, "avg_logprob": -0.11944722510003425, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.07469339668750763}, {"id": 30, "seek": 13500, "start": 152.0, "end": 158.0, "text": " that now have to be managed by the OS and by proxy by the user, right?", "tokens": [51214, 300, 586, 362, 281, 312, 6453, 538, 264, 12731, 293, 538, 29690, 538, 264, 4195, 11, 558, 30, 51514], "temperature": 0.0, "avg_logprob": -0.11944722510003425, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.07469339668750763}, {"id": 31, "seek": 15800, "start": 158.0, "end": 168.0, "text": " So what we've always tried to do with Start OS is we've maintained this idea of one container, one service.", "tokens": [50364, 407, 437, 321, 600, 1009, 3031, 281, 360, 365, 6481, 12731, 307, 321, 600, 17578, 341, 1558, 295, 472, 10129, 11, 472, 2643, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07048145059036882, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.016391998156905174}, {"id": 32, "seek": 15800, "start": 168.0, "end": 177.0, "text": " And what this allows us to do is it reduces a lot of the complexity of the management of a bunch of different containers", "tokens": [50864, 400, 437, 341, 4045, 505, 281, 360, 307, 309, 18081, 257, 688, 295, 264, 14024, 295, 264, 4592, 295, 257, 3840, 295, 819, 17089, 51314], "temperature": 0.0, "avg_logprob": -0.07048145059036882, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.016391998156905174}, {"id": 33, "seek": 15800, "start": 177.0, "end": 184.0, "text": " and also provides a single IP address and virtual interface on which the application is running.", "tokens": [51314, 293, 611, 6417, 257, 2167, 8671, 2985, 293, 6374, 9226, 322, 597, 264, 3861, 307, 2614, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07048145059036882, "compression_ratio": 1.570048309178744, "no_speech_prob": 0.016391998156905174}, {"id": 34, "seek": 18400, "start": 184.0, "end": 191.0, "text": " So when you're doing all of your network mapping, all of that can be mapped to a single virtual IP address", "tokens": [50364, 407, 562, 291, 434, 884, 439, 295, 428, 3209, 18350, 11, 439, 295, 300, 393, 312, 33318, 281, 257, 2167, 6374, 8671, 2985, 50714], "temperature": 0.0, "avg_logprob": -0.06765865969967533, "compression_ratio": 1.674757281553398, "no_speech_prob": 0.03619037941098213}, {"id": 35, "seek": 18400, "start": 191.0, "end": 202.0, "text": " that can then be viewed either from within the subnet within the device or is then exported through the host.", "tokens": [50714, 300, 393, 550, 312, 19174, 2139, 490, 1951, 264, 1422, 7129, 1951, 264, 4302, 420, 307, 550, 42055, 807, 264, 3975, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06765865969967533, "compression_ratio": 1.674757281553398, "no_speech_prob": 0.03619037941098213}, {"id": 36, "seek": 18400, "start": 202.0, "end": 211.0, "text": " This also means that you can define resource limits on a single container basis as opposed to having to do a group of containers", "tokens": [51264, 639, 611, 1355, 300, 291, 393, 6964, 7684, 10406, 322, 257, 2167, 10129, 5143, 382, 8851, 281, 1419, 281, 360, 257, 1594, 295, 17089, 51714], "temperature": 0.0, "avg_logprob": -0.06765865969967533, "compression_ratio": 1.674757281553398, "no_speech_prob": 0.03619037941098213}, {"id": 37, "seek": 21100, "start": 211.0, "end": 218.0, "text": " and managing that as a group, a C group with subgroups, right?", "tokens": [50364, 293, 11642, 300, 382, 257, 1594, 11, 257, 383, 1594, 365, 1422, 17377, 82, 11, 558, 30, 50714], "temperature": 0.0, "avg_logprob": -0.11287189742266121, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.015407707542181015}, {"id": 38, "seek": 21100, "start": 218.0, "end": 229.0, "text": " Another final reason that we did this is that our package maintainer scripts, we prefer to run inside the contained environment", "tokens": [50714, 3996, 2572, 1778, 300, 321, 630, 341, 307, 300, 527, 7372, 6909, 260, 23294, 11, 321, 4382, 281, 1190, 1854, 264, 16212, 2823, 51264], "temperature": 0.0, "avg_logprob": -0.11287189742266121, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.015407707542181015}, {"id": 39, "seek": 21100, "start": 229.0, "end": 233.0, "text": " and these package maintainer scripts are run in JavaScript.", "tokens": [51264, 293, 613, 7372, 6909, 260, 23294, 366, 1190, 294, 15778, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11287189742266121, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.015407707542181015}, {"id": 40, "seek": 23300, "start": 234.0, "end": 243.0, "text": " So we run a service manager in the container that reads the package maintainer scripts", "tokens": [50414, 407, 321, 1190, 257, 2643, 6598, 294, 264, 10129, 300, 15700, 264, 7372, 6909, 260, 23294, 50864], "temperature": 0.0, "avg_logprob": -0.14485782895769392, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.06366153806447983}, {"id": 41, "seek": 23300, "start": 243.0, "end": 252.0, "text": " and then is able to set up all of our subcontainers, our sub file systems from there, and execute our actual binaries.", "tokens": [50864, 293, 550, 307, 1075, 281, 992, 493, 439, 295, 527, 1422, 9000, 491, 433, 11, 527, 1422, 3991, 3652, 490, 456, 11, 293, 14483, 527, 3539, 5171, 4889, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14485782895769392, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.06366153806447983}, {"id": 42, "seek": 23300, "start": 252.0, "end": 261.0, "text": " Okay, so the question is why do people want multiple containers at all, right?", "tokens": [51314, 1033, 11, 370, 264, 1168, 307, 983, 360, 561, 528, 3866, 17089, 412, 439, 11, 558, 30, 51764], "temperature": 0.0, "avg_logprob": -0.14485782895769392, "compression_ratio": 1.5519125683060109, "no_speech_prob": 0.06366153806447983}, {"id": 43, "seek": 26100, "start": 261.0, "end": 266.0, "text": " Like oftentimes you can take a single Docker image, a single application image", "tokens": [50364, 1743, 18349, 291, 393, 747, 257, 2167, 33772, 3256, 11, 257, 2167, 3861, 3256, 50614], "temperature": 0.0, "avg_logprob": -0.11099358434262482, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.016136139631271362}, {"id": 44, "seek": 26100, "start": 266.0, "end": 275.0, "text": " and install all of the software you might need, but in practice this is not as easy for the service developer, right?", "tokens": [50614, 293, 3625, 439, 295, 264, 4722, 291, 1062, 643, 11, 457, 294, 3124, 341, 307, 406, 382, 1858, 337, 264, 2643, 10754, 11, 558, 30, 51064], "temperature": 0.0, "avg_logprob": -0.11099358434262482, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.016136139631271362}, {"id": 45, "seek": 26100, "start": 275.0, "end": 283.0, "text": " A lot of times we have people coming to us asking for, hey, I want to be able to use an off-the-shelf Postgres image,", "tokens": [51064, 316, 688, 295, 1413, 321, 362, 561, 1348, 281, 505, 3365, 337, 11, 4177, 11, 286, 528, 281, 312, 1075, 281, 764, 364, 766, 12, 3322, 12, 46626, 10223, 45189, 3256, 11, 51464], "temperature": 0.0, "avg_logprob": -0.11099358434262482, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.016136139631271362}, {"id": 46, "seek": 26100, "start": 283.0, "end": 290.0, "text": " I want to use an off-the-shelf Nginx image, I don't want to have to use like the package manager for the distribution of my container,", "tokens": [51464, 286, 528, 281, 764, 364, 766, 12, 3322, 12, 46626, 426, 1494, 87, 3256, 11, 286, 500, 380, 528, 281, 362, 281, 764, 411, 264, 7372, 6598, 337, 264, 7316, 295, 452, 10129, 11, 51814], "temperature": 0.0, "avg_logprob": -0.11099358434262482, "compression_ratio": 1.713740458015267, "no_speech_prob": 0.016136139631271362}, {"id": 47, "seek": 29000, "start": 290.0, "end": 294.0, "text": " to install that and manage it.", "tokens": [50364, 281, 3625, 300, 293, 3067, 309, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09594570117050343, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.01663731411099434}, {"id": 48, "seek": 29000, "start": 294.0, "end": 298.0, "text": " So that's like the number one use case that we have for that.", "tokens": [50564, 407, 300, 311, 411, 264, 1230, 472, 764, 1389, 300, 321, 362, 337, 300, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09594570117050343, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.01663731411099434}, {"id": 49, "seek": 29000, "start": 298.0, "end": 307.0, "text": " It also allows you to run applications, like say you have one in Debian, one in Alpine, run all of them together.", "tokens": [50764, 467, 611, 4045, 291, 281, 1190, 5821, 11, 411, 584, 291, 362, 472, 294, 1346, 20196, 11, 472, 294, 967, 40412, 11, 1190, 439, 295, 552, 1214, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09594570117050343, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.01663731411099434}, {"id": 50, "seek": 29000, "start": 309.0, "end": 316.0, "text": " Then, you know, the other reason that you might want multiple containers is you can isolate the subcomponents of an application away from each other", "tokens": [51314, 1396, 11, 291, 458, 11, 264, 661, 1778, 300, 291, 1062, 528, 3866, 17089, 307, 291, 393, 25660, 264, 1422, 21541, 40496, 295, 364, 3861, 1314, 490, 1184, 661, 51664], "temperature": 0.0, "avg_logprob": -0.09594570117050343, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.01663731411099434}, {"id": 51, "seek": 31600, "start": 316.0, "end": 321.0, "text": " and also do resource limits on individual application subcomponents.", "tokens": [50364, 293, 611, 360, 7684, 10406, 322, 2609, 3861, 1422, 21541, 40496, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07111310331444991, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.01589388959109783}, {"id": 52, "seek": 31600, "start": 321.0, "end": 329.0, "text": " If anybody has additional reasons why you might want to do separate containers as opposed to a single container for an application,", "tokens": [50614, 759, 4472, 575, 4497, 4112, 983, 291, 1062, 528, 281, 360, 4994, 17089, 382, 8851, 281, 257, 2167, 10129, 337, 364, 3861, 11, 51014], "temperature": 0.0, "avg_logprob": -0.07111310331444991, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.01589388959109783}, {"id": 53, "seek": 31600, "start": 329.0, "end": 333.0, "text": " I would love to hear them, but these are the reasons we came up with.", "tokens": [51014, 286, 576, 959, 281, 1568, 552, 11, 457, 613, 366, 264, 4112, 321, 1361, 493, 365, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07111310331444991, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.01589388959109783}, {"id": 54, "seek": 31600, "start": 336.0, "end": 342.0, "text": " So our solution, we cover this first use case using trutes.", "tokens": [51364, 407, 527, 3827, 11, 321, 2060, 341, 700, 764, 1389, 1228, 504, 1819, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07111310331444991, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.01589388959109783}, {"id": 55, "seek": 34200, "start": 342.0, "end": 351.0, "text": " Number two, as far as we can tell, works for the most part, but that is remaining to be teased out.", "tokens": [50364, 5118, 732, 11, 382, 1400, 382, 321, 393, 980, 11, 1985, 337, 264, 881, 644, 11, 457, 300, 307, 8877, 281, 312, 535, 1937, 484, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13685286322305368, "compression_ratio": 1.6473214285714286, "no_speech_prob": 0.0016739143757149577}, {"id": 56, "seek": 34200, "start": 351.0, "end": 357.0, "text": " This does not allow us to isolate the subcomponents of our application from each other or create resource limits on individual applications.", "tokens": [50814, 639, 775, 406, 2089, 505, 281, 25660, 264, 1422, 21541, 40496, 295, 527, 3861, 490, 1184, 661, 420, 1884, 7684, 10406, 322, 2609, 5821, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13685286322305368, "compression_ratio": 1.6473214285714286, "no_speech_prob": 0.0016739143757149577}, {"id": 57, "seek": 34200, "start": 357.0, "end": 367.0, "text": " Subcomponents as easily, those will have to be managed by manual tuning of resource limits within the prokates of the container.", "tokens": [51114, 8511, 21541, 40496, 382, 3612, 11, 729, 486, 362, 281, 312, 6453, 538, 9688, 15164, 295, 7684, 10406, 1951, 264, 447, 74, 1024, 295, 264, 10129, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13685286322305368, "compression_ratio": 1.6473214285714286, "no_speech_prob": 0.0016739143757149577}, {"id": 58, "seek": 36700, "start": 367.0, "end": 380.0, "text": " So, yeah, we've ultimately decided that those last two components aren't really necessary for our use case.", "tokens": [50364, 407, 11, 1338, 11, 321, 600, 6284, 3047, 300, 729, 1036, 732, 6677, 3212, 380, 534, 4818, 337, 527, 764, 1389, 13, 51014], "temperature": 0.0, "avg_logprob": -0.140300718943278, "compression_ratio": 1.5141242937853108, "no_speech_prob": 0.003706264076754451}, {"id": 59, "seek": 36700, "start": 380.0, "end": 385.0, "text": " Ultimately, a single application is where we define our sandbox.", "tokens": [51014, 23921, 11, 257, 2167, 3861, 307, 689, 321, 6964, 527, 42115, 13, 51264], "temperature": 0.0, "avg_logprob": -0.140300718943278, "compression_ratio": 1.5141242937853108, "no_speech_prob": 0.003706264076754451}, {"id": 60, "seek": 36700, "start": 385.0, "end": 393.0, "text": " So sandboxing separate parts of an application from each other, like has some security benefit,", "tokens": [51264, 407, 42115, 278, 4994, 3166, 295, 364, 3861, 490, 1184, 661, 11, 411, 575, 512, 3825, 5121, 11, 51664], "temperature": 0.0, "avg_logprob": -0.140300718943278, "compression_ratio": 1.5141242937853108, "no_speech_prob": 0.003706264076754451}, {"id": 61, "seek": 39300, "start": 393.0, "end": 398.0, "text": " we've decided isn't worth the complexity.", "tokens": [50364, 321, 600, 3047, 1943, 380, 3163, 264, 14024, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12461636179969424, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.011856034398078918}, {"id": 62, "seek": 39300, "start": 398.0, "end": 401.0, "text": " So we decided to do this with LXC.", "tokens": [50614, 407, 321, 3047, 281, 360, 341, 365, 441, 55, 34, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12461636179969424, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.011856034398078918}, {"id": 63, "seek": 39300, "start": 401.0, "end": 405.0, "text": " Why do we do LXC as opposed to something like Docker or Podman?", "tokens": [50764, 1545, 360, 321, 360, 441, 55, 34, 382, 8851, 281, 746, 411, 33772, 420, 12646, 1601, 30, 50964], "temperature": 0.0, "avg_logprob": -0.12461636179969424, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.011856034398078918}, {"id": 64, "seek": 39300, "start": 405.0, "end": 409.0, "text": " LXC is a lot more composable.", "tokens": [50964, 441, 55, 34, 307, 257, 688, 544, 10199, 712, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12461636179969424, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.011856034398078918}, {"id": 65, "seek": 39300, "start": 409.0, "end": 419.0, "text": " It allows us to pop the hood on a lot of the very subcomponents of container technology and manage it more manually.", "tokens": [51164, 467, 4045, 505, 281, 1665, 264, 13376, 322, 257, 688, 295, 264, 588, 1422, 21541, 40496, 295, 10129, 2899, 293, 3067, 309, 544, 16945, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12461636179969424, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.011856034398078918}, {"id": 66, "seek": 41900, "start": 420.0, "end": 425.0, "text": " So we can, for example, easily manipulate the container root FS at runtime.", "tokens": [50414, 407, 321, 393, 11, 337, 1365, 11, 3612, 20459, 264, 10129, 5593, 41138, 412, 34474, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07793606855930427, "compression_ratio": 1.7715736040609138, "no_speech_prob": 0.0951729565858841}, {"id": 67, "seek": 41900, "start": 425.0, "end": 435.0, "text": " So even with an unprivileged container, that unprivileged container can communicate with the host and modify its root file system very easily.", "tokens": [50664, 407, 754, 365, 364, 20994, 29994, 794, 3004, 10129, 11, 300, 20994, 29994, 794, 3004, 10129, 393, 7890, 365, 264, 3975, 293, 16927, 1080, 5593, 3991, 1185, 588, 3612, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07793606855930427, "compression_ratio": 1.7715736040609138, "no_speech_prob": 0.0951729565858841}, {"id": 68, "seek": 41900, "start": 435.0, "end": 444.0, "text": " We use our shared mount propagation for our root FS, which allows the host operating system to easily manipulate that file system.", "tokens": [51164, 492, 764, 527, 5507, 3746, 38377, 337, 527, 5593, 41138, 11, 597, 4045, 264, 3975, 7447, 1185, 281, 3612, 20459, 300, 3991, 1185, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07793606855930427, "compression_ratio": 1.7715736040609138, "no_speech_prob": 0.0951729565858841}, {"id": 69, "seek": 44400, "start": 444.0, "end": 457.0, "text": " And then it's also unlike some other container tools, you can perform commands like shrewt and mount from inside an unprivileged container,", "tokens": [50364, 400, 550, 309, 311, 611, 8343, 512, 661, 10129, 3873, 11, 291, 393, 2042, 16901, 411, 402, 2236, 83, 293, 3746, 490, 1854, 364, 20994, 29994, 794, 3004, 10129, 11, 51014], "temperature": 0.0, "avg_logprob": -0.19267630172988115, "compression_ratio": 1.460122699386503, "no_speech_prob": 0.018249642103910446}, {"id": 70, "seek": 44400, "start": 457.0, "end": 462.0, "text": " which is not allowed on a lot of other technologies.", "tokens": [51014, 597, 307, 406, 4350, 322, 257, 688, 295, 661, 7943, 13, 51264], "temperature": 0.0, "avg_logprob": -0.19267630172988115, "compression_ratio": 1.460122699386503, "no_speech_prob": 0.018249642103910446}, {"id": 71, "seek": 44400, "start": 465.0, "end": 470.0, "text": " So to put together a service, an application,", "tokens": [51414, 407, 281, 829, 1214, 257, 2643, 11, 364, 3861, 11, 51664], "temperature": 0.0, "avg_logprob": -0.19267630172988115, "compression_ratio": 1.460122699386503, "no_speech_prob": 0.018249642103910446}, {"id": 72, "seek": 47000, "start": 471.0, "end": 478.0, "text": " we have effectively a single root FS image that all of our applications share.", "tokens": [50414, 321, 362, 8659, 257, 2167, 5593, 41138, 3256, 300, 439, 295, 527, 5821, 2073, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10535682416429706, "compression_ratio": 1.5190839694656488, "no_speech_prob": 0.012986168265342712}, {"id": 73, "seek": 47000, "start": 478.0, "end": 490.0, "text": " This root FS image is just a base image that we use for all of our containers that has a, like, we use Alpine right now,", "tokens": [50764, 639, 5593, 41138, 3256, 307, 445, 257, 3096, 3256, 300, 321, 764, 337, 439, 295, 527, 17089, 300, 575, 257, 11, 411, 11, 321, 764, 967, 40412, 558, 586, 11, 51364], "temperature": 0.0, "avg_logprob": -0.10535682416429706, "compression_ratio": 1.5190839694656488, "no_speech_prob": 0.012986168265342712}, {"id": 74, "seek": 49000, "start": 491.0, "end": 504.0, "text": " but it loads a Node.js application that runs the package maintainer scripts and then launches the various actual demons inside their trues.", "tokens": [50414, 457, 309, 12668, 257, 38640, 13, 25530, 3861, 300, 6676, 264, 7372, 6909, 260, 23294, 293, 550, 31841, 264, 3683, 3539, 19733, 1854, 641, 504, 1247, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1564337840447059, "compression_ratio": 1.3395061728395061, "no_speech_prob": 0.1558985412120819}, {"id": 75, "seek": 49000, "start": 506.0, "end": 511.0, "text": " It communicates with the host using a JSON RPC API over a Unix domain socket.", "tokens": [51164, 467, 3363, 1024, 365, 264, 3975, 1228, 257, 31828, 497, 12986, 9362, 670, 257, 1156, 970, 9274, 19741, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1564337840447059, "compression_ratio": 1.3395061728395061, "no_speech_prob": 0.1558985412120819}, {"id": 76, "seek": 51100, "start": 512.0, "end": 519.0, "text": " So there's bi-directional communication between the host and the service manager in the container,", "tokens": [50414, 407, 456, 311, 3228, 12, 18267, 41048, 6101, 1296, 264, 3975, 293, 264, 2643, 6598, 294, 264, 10129, 11, 50764], "temperature": 0.0, "avg_logprob": -0.11110616737688092, "compression_ratio": 1.702247191011236, "no_speech_prob": 0.027570011094212532}, {"id": 77, "seek": 51100, "start": 519.0, "end": 525.0, "text": " and then, yeah, it can perform the actual application code inside the shrewts.", "tokens": [50764, 293, 550, 11, 1338, 11, 309, 393, 2042, 264, 3539, 3861, 3089, 1854, 264, 402, 2236, 1373, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11110616737688092, "compression_ratio": 1.702247191011236, "no_speech_prob": 0.027570011094212532}, {"id": 78, "seek": 51100, "start": 526.0, "end": 538.0, "text": " So the host API, what it does for the container is it can perform some manipulation of the root file system of the container,", "tokens": [51114, 407, 264, 3975, 9362, 11, 437, 309, 775, 337, 264, 10129, 307, 309, 393, 2042, 512, 26475, 295, 264, 5593, 3991, 1185, 295, 264, 10129, 11, 51714], "temperature": 0.0, "avg_logprob": -0.11110616737688092, "compression_ratio": 1.702247191011236, "no_speech_prob": 0.027570011094212532}, {"id": 79, "seek": 53800, "start": 538.0, "end": 544.0, "text": " and this allows creating overlaid images in the same way you might be creating a container.", "tokens": [50364, 293, 341, 4045, 4084, 670, 875, 327, 5267, 294, 264, 912, 636, 291, 1062, 312, 4084, 257, 10129, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10327070608906362, "compression_ratio": 1.65, "no_speech_prob": 0.003822274273261428}, {"id": 80, "seek": 53800, "start": 544.0, "end": 553.0, "text": " All we do is we create a root FS image with an overlay file system and attach it to the container in a way that they can trude into it.", "tokens": [50664, 1057, 321, 360, 307, 321, 1884, 257, 5593, 41138, 3256, 365, 364, 31741, 3991, 1185, 293, 5085, 309, 281, 264, 10129, 294, 257, 636, 300, 436, 393, 504, 2303, 666, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10327070608906362, "compression_ratio": 1.65, "no_speech_prob": 0.003822274273261428}, {"id": 81, "seek": 53800, "start": 554.0, "end": 561.0, "text": " And then we also have a bunch of other APIs that these packages can interact with,", "tokens": [51164, 400, 550, 321, 611, 362, 257, 3840, 295, 661, 21445, 300, 613, 17401, 393, 4648, 365, 11, 51514], "temperature": 0.0, "avg_logprob": -0.10327070608906362, "compression_ratio": 1.65, "no_speech_prob": 0.003822274273261428}, {"id": 82, "seek": 53800, "start": 561.0, "end": 566.0, "text": " mostly for integration with the end user experience,", "tokens": [51514, 5240, 337, 10980, 365, 264, 917, 4195, 1752, 11, 51764], "temperature": 0.0, "avg_logprob": -0.10327070608906362, "compression_ratio": 1.65, "no_speech_prob": 0.003822274273261428}, {"id": 83, "seek": 56600, "start": 566.0, "end": 573.0, "text": " and integration with other services and applications on the host in a way that the user might have to intermediate.", "tokens": [50364, 293, 10980, 365, 661, 3328, 293, 5821, 322, 264, 3975, 294, 257, 636, 300, 264, 4195, 1062, 362, 281, 19376, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0901512486594064, "compression_ratio": 1.5698924731182795, "no_speech_prob": 0.0015240138163790107}, {"id": 84, "seek": 56600, "start": 574.0, "end": 579.0, "text": " And then we also have a set of APIs designed for hassle-free networking.", "tokens": [50764, 400, 550, 321, 611, 362, 257, 992, 295, 21445, 4761, 337, 39526, 12, 10792, 17985, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0901512486594064, "compression_ratio": 1.5698924731182795, "no_speech_prob": 0.0015240138163790107}, {"id": 85, "seek": 56600, "start": 579.0, "end": 586.0, "text": " If you have, you know, some application bound to a port, you can now attach that port to a Tor address,", "tokens": [51014, 759, 291, 362, 11, 291, 458, 11, 512, 3861, 5472, 281, 257, 2436, 11, 291, 393, 586, 5085, 300, 2436, 281, 257, 7160, 2985, 11, 51364], "temperature": 0.0, "avg_logprob": -0.0901512486594064, "compression_ratio": 1.5698924731182795, "no_speech_prob": 0.0015240138163790107}, {"id": 86, "seek": 58600, "start": 586.0, "end": 596.0, "text": " to a clearnet address, or to just a LAN address so that you can be accessed by your local area network.", "tokens": [50364, 281, 257, 1850, 7129, 2985, 11, 420, 281, 445, 257, 37387, 2985, 370, 300, 291, 393, 312, 34211, 538, 428, 2654, 1859, 3209, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15399465216211525, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.24485620856285095}, {"id": 87, "seek": 58600, "start": 596.0, "end": 601.0, "text": " And the host OS manages all of the certificate management, either through Let's Encrypt,", "tokens": [50864, 400, 264, 3975, 12731, 22489, 439, 295, 264, 15953, 4592, 11, 2139, 807, 961, 311, 29584, 627, 662, 11, 51114], "temperature": 0.0, "avg_logprob": -0.15399465216211525, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.24485620856285095}, {"id": 88, "seek": 58600, "start": 601.0, "end": 607.0, "text": " or through a host root CA for the LAN communication,", "tokens": [51114, 420, 807, 257, 3975, 5593, 22852, 337, 264, 37387, 6101, 11, 51414], "temperature": 0.0, "avg_logprob": -0.15399465216211525, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.24485620856285095}, {"id": 89, "seek": 58600, "start": 607.0, "end": 611.0, "text": " because obviously you can't get a Let's Encrypt certificate for a .local.", "tokens": [51414, 570, 2745, 291, 393, 380, 483, 257, 961, 311, 29584, 627, 662, 15953, 337, 257, 2411, 5842, 304, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15399465216211525, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.24485620856285095}, {"id": 90, "seek": 61100, "start": 612.0, "end": 623.0, "text": " Okay, so then the service itself, it runs a very basic API that receives commands from the hosts.", "tokens": [50414, 1033, 11, 370, 550, 264, 2643, 2564, 11, 309, 6676, 257, 588, 3875, 9362, 300, 20717, 16901, 490, 264, 21573, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11722316314925009, "compression_ratio": 1.5977653631284916, "no_speech_prob": 0.0036481027491390705}, {"id": 91, "seek": 61100, "start": 623.0, "end": 629.0, "text": " So when the application is running, it can receive like an initialization command,", "tokens": [50964, 407, 562, 264, 3861, 307, 2614, 11, 309, 393, 4774, 411, 364, 5883, 2144, 5622, 11, 51264], "temperature": 0.0, "avg_logprob": -0.11722316314925009, "compression_ratio": 1.5977653631284916, "no_speech_prob": 0.0036481027491390705}, {"id": 92, "seek": 61100, "start": 629.0, "end": 634.0, "text": " it can start or stop the service, and then shut down the service entirely in order to kill the container.", "tokens": [51264, 309, 393, 722, 420, 1590, 264, 2643, 11, 293, 550, 5309, 760, 264, 2643, 7696, 294, 1668, 281, 1961, 264, 10129, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11722316314925009, "compression_ratio": 1.5977653631284916, "no_speech_prob": 0.0036481027491390705}, {"id": 93, "seek": 63400, "start": 635.0, "end": 644.0, "text": " And then it also invokes all of the various package maintainer scripts, such as editing user configuration,", "tokens": [50414, 400, 550, 309, 611, 1048, 8606, 439, 295, 264, 3683, 7372, 6909, 260, 23294, 11, 1270, 382, 10000, 4195, 11694, 11, 50864], "temperature": 0.0, "avg_logprob": -0.12625787876270436, "compression_ratio": 1.6875, "no_speech_prob": 0.030659720301628113}, {"id": 94, "seek": 63400, "start": 646.0, "end": 648.0, "text": " installing the service, or updating the service.", "tokens": [50964, 20762, 264, 2643, 11, 420, 25113, 264, 2643, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12625787876270436, "compression_ratio": 1.6875, "no_speech_prob": 0.030659720301628113}, {"id": 95, "seek": 63400, "start": 648.0, "end": 655.0, "text": " All of those perform various package maintainer scripts that get called from the host.", "tokens": [51064, 1057, 295, 729, 2042, 3683, 7372, 6909, 260, 23294, 300, 483, 1219, 490, 264, 3975, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12625787876270436, "compression_ratio": 1.6875, "no_speech_prob": 0.030659720301628113}, {"id": 96, "seek": 65500, "start": 656.0, "end": 659.0, "text": " Okay, so when we actually launch a binary,", "tokens": [50414, 1033, 11, 370, 562, 321, 767, 4025, 257, 17434, 11, 50564], "temperature": 0.0, "avg_logprob": -0.16893661816914876, "compression_ratio": 1.5060975609756098, "no_speech_prob": 0.004263558425009251}, {"id": 97, "seek": 65500, "start": 661.0, "end": 673.0, "text": " the package developer defines in some JavaScript, we have some well-typed TypeScript APIs for this to describe this structure,", "tokens": [50664, 264, 7372, 10754, 23122, 294, 512, 15778, 11, 321, 362, 512, 731, 12, 874, 3452, 15576, 14237, 21445, 337, 341, 281, 6786, 341, 3877, 11, 51264], "temperature": 0.0, "avg_logprob": -0.16893661816914876, "compression_ratio": 1.5060975609756098, "no_speech_prob": 0.004263558425009251}, {"id": 98, "seek": 65500, "start": 673.0, "end": 681.0, "text": " but it defines what binaries to launch, what images to launch each binary in,", "tokens": [51264, 457, 309, 23122, 437, 5171, 4889, 281, 4025, 11, 437, 5267, 281, 4025, 1184, 17434, 294, 11, 51664], "temperature": 0.0, "avg_logprob": -0.16893661816914876, "compression_ratio": 1.5060975609756098, "no_speech_prob": 0.004263558425009251}, {"id": 99, "seek": 68100, "start": 682.0, "end": 684.0, "text": " where to mount its persistence volume.", "tokens": [50414, 689, 281, 3746, 1080, 37617, 5523, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11202670366336138, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00955224595963955}, {"id": 100, "seek": 68100, "start": 684.0, "end": 688.0, "text": " So we have a series of persistence volumes that are mounted to the container,", "tokens": [50514, 407, 321, 362, 257, 2638, 295, 37617, 22219, 300, 366, 19138, 281, 264, 10129, 11, 50714], "temperature": 0.0, "avg_logprob": -0.11202670366336138, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00955224595963955}, {"id": 101, "seek": 68100, "start": 688.0, "end": 693.0, "text": " and can be attached to any path within these sub-file systems,", "tokens": [50714, 293, 393, 312, 8570, 281, 604, 3100, 1951, 613, 1422, 12, 69, 794, 3652, 11, 50964], "temperature": 0.0, "avg_logprob": -0.11202670366336138, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00955224595963955}, {"id": 102, "seek": 68100, "start": 693.0, "end": 698.0, "text": " and then it defines any environment variables or arguments in any standard way that you would launch a program.", "tokens": [50964, 293, 550, 309, 23122, 604, 2823, 9102, 420, 12869, 294, 604, 3832, 636, 300, 291, 576, 4025, 257, 1461, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11202670366336138, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00955224595963955}, {"id": 103, "seek": 68100, "start": 700.0, "end": 704.0, "text": " And then for each command that you have,", "tokens": [51314, 400, 550, 337, 1184, 5622, 300, 291, 362, 11, 51514], "temperature": 0.0, "avg_logprob": -0.11202670366336138, "compression_ratio": 1.6274509803921569, "no_speech_prob": 0.00955224595963955}, {"id": 104, "seek": 70400, "start": 704.0, "end": 707.0, "text": " when you just similar to how you would define a system deservice file,", "tokens": [50364, 562, 291, 445, 2531, 281, 577, 291, 576, 6964, 257, 1185, 730, 25006, 3991, 11, 50514], "temperature": 0.0, "avg_logprob": -0.17148863302694783, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.02633565664291382}, {"id": 105, "seek": 70400, "start": 707.0, "end": 716.0, "text": " you can define all of these arguments and then any dependencies or health checks associated with your service.", "tokens": [50514, 291, 393, 6964, 439, 295, 613, 12869, 293, 550, 604, 36606, 420, 1585, 13834, 6615, 365, 428, 2643, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17148863302694783, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.02633565664291382}, {"id": 106, "seek": 70400, "start": 716.0, "end": 732.0, "text": " And then for each of these commands, the in-container service manager will mount an overlaid image for the requested image ID to the container.", "tokens": [50964, 400, 550, 337, 1184, 295, 613, 16901, 11, 264, 294, 12, 9000, 491, 260, 2643, 6598, 486, 3746, 364, 670, 875, 327, 3256, 337, 264, 16436, 3256, 7348, 281, 264, 10129, 13, 51764], "temperature": 0.0, "avg_logprob": -0.17148863302694783, "compression_ratio": 1.6414141414141414, "no_speech_prob": 0.02633565664291382}, {"id": 107, "seek": 73200, "start": 733.0, "end": 741.0, "text": " It will then take our special directories, proxys, dev, and run, and bind them inside the container.", "tokens": [50414, 467, 486, 550, 747, 527, 2121, 5391, 530, 11, 447, 87, 749, 11, 1905, 11, 293, 1190, 11, 293, 14786, 552, 1854, 264, 10129, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14565269856513302, "compression_ratio": 1.6272189349112427, "no_speech_prob": 0.003221485996618867}, {"id": 108, "seek": 73200, "start": 741.0, "end": 745.0, "text": " So all of the containers share the same proxys, dev, and run.", "tokens": [50814, 407, 439, 295, 264, 17089, 2073, 264, 912, 447, 87, 749, 11, 1905, 11, 293, 1190, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14565269856513302, "compression_ratio": 1.6272189349112427, "no_speech_prob": 0.003221485996618867}, {"id": 109, "seek": 73200, "start": 747.0, "end": 750.0, "text": " And then it will run the command in the true.", "tokens": [51114, 400, 550, 309, 486, 1190, 264, 5622, 294, 264, 2074, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14565269856513302, "compression_ratio": 1.6272189349112427, "no_speech_prob": 0.003221485996618867}, {"id": 110, "seek": 73200, "start": 751.0, "end": 756.0, "text": " Okay, so here is an example I have of a package maintainer script.", "tokens": [51314, 1033, 11, 370, 510, 307, 364, 1365, 286, 362, 295, 257, 7372, 6909, 260, 5755, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14565269856513302, "compression_ratio": 1.6272189349112427, "no_speech_prob": 0.003221485996618867}, {"id": 111, "seek": 75600, "start": 756.0, "end": 761.0, "text": " I don't know if that's actually visible to everyone.", "tokens": [50364, 286, 500, 380, 458, 498, 300, 311, 767, 8974, 281, 1518, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1642741619701117, "compression_ratio": 1.4064171122994653, "no_speech_prob": 0.10809134691953659}, {"id": 112, "seek": 75600, "start": 761.0, "end": 764.0, "text": " Is that, are you guys able to see that?", "tokens": [50614, 1119, 300, 11, 366, 291, 1074, 1075, 281, 536, 300, 30, 50764], "temperature": 0.0, "avg_logprob": -0.1642741619701117, "compression_ratio": 1.4064171122994653, "no_speech_prob": 0.10809134691953659}, {"id": 113, "seek": 75600, "start": 764.0, "end": 765.0, "text": " Okay.", "tokens": [50764, 1033, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1642741619701117, "compression_ratio": 1.4064171122994653, "no_speech_prob": 0.10809134691953659}, {"id": 114, "seek": 75600, "start": 766.0, "end": 771.0, "text": " Well, I suppose I can just talk about it.", "tokens": [50864, 1042, 11, 286, 7297, 286, 393, 445, 751, 466, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1642741619701117, "compression_ratio": 1.4064171122994653, "no_speech_prob": 0.10809134691953659}, {"id": 115, "seek": 75600, "start": 771.0, "end": 780.0, "text": " But effectively, you have a fairly simple JSON configuration where you define your image ID, your command, your arguments,", "tokens": [51114, 583, 8659, 11, 291, 362, 257, 6457, 2199, 31828, 11694, 689, 291, 6964, 428, 3256, 7348, 11, 428, 5622, 11, 428, 12869, 11, 51564], "temperature": 0.0, "avg_logprob": -0.1642741619701117, "compression_ratio": 1.4064171122994653, "no_speech_prob": 0.10809134691953659}, {"id": 116, "seek": 78000, "start": 780.0, "end": 787.0, "text": " and then some health checks defining when is this thing ready, as well as some dependencies.", "tokens": [50364, 293, 550, 512, 1585, 13834, 17827, 562, 307, 341, 551, 1919, 11, 382, 731, 382, 512, 36606, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10746935606002808, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.06178721413016319}, {"id": 117, "seek": 78000, "start": 787.0, "end": 792.0, "text": " So like if you don't want to launch a various demon until another service is ready,", "tokens": [50714, 407, 411, 498, 291, 500, 380, 528, 281, 4025, 257, 3683, 14283, 1826, 1071, 2643, 307, 1919, 11, 50964], "temperature": 0.0, "avg_logprob": -0.10746935606002808, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.06178721413016319}, {"id": 118, "seek": 78000, "start": 792.0, "end": 796.0, "text": " you can just specify that and then it won't launch until its health check passes.", "tokens": [50964, 291, 393, 445, 16500, 300, 293, 550, 309, 1582, 380, 4025, 1826, 1080, 1585, 1520, 11335, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10746935606002808, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.06178721413016319}, {"id": 119, "seek": 78000, "start": 798.0, "end": 802.0, "text": " So all of this is available on the GitHub if you want to check it out.", "tokens": [51264, 407, 439, 295, 341, 307, 2435, 322, 264, 23331, 498, 291, 528, 281, 1520, 309, 484, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10746935606002808, "compression_ratio": 1.6532663316582914, "no_speech_prob": 0.06178721413016319}, {"id": 120, "seek": 80200, "start": 803.0, "end": 814.0, "text": " This particular example is in GitHub's start9labs slash hello world startOS.", "tokens": [50414, 639, 1729, 1365, 307, 294, 23331, 311, 722, 24, 75, 17243, 17330, 7751, 1002, 722, 4367, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18649579632666805, "compression_ratio": 1.34375, "no_speech_prob": 0.09662453085184097}, {"id": 121, "seek": 80200, "start": 814.0, "end": 818.0, "text": " There should be a link on the talk.", "tokens": [50964, 821, 820, 312, 257, 2113, 322, 264, 751, 13, 51164], "temperature": 0.0, "avg_logprob": -0.18649579632666805, "compression_ratio": 1.34375, "no_speech_prob": 0.09662453085184097}, {"id": 122, "seek": 80200, "start": 818.0, "end": 824.0, "text": " So time to do a little demo of what I have working so far.", "tokens": [51164, 407, 565, 281, 360, 257, 707, 10723, 295, 437, 286, 362, 1364, 370, 1400, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18649579632666805, "compression_ratio": 1.34375, "no_speech_prob": 0.09662453085184097}, {"id": 123, "seek": 80200, "start": 827.0, "end": 831.0, "text": " Let's see if I can get my shells over here.", "tokens": [51614, 961, 311, 536, 498, 286, 393, 483, 452, 22523, 670, 510, 13, 51814], "temperature": 0.0, "avg_logprob": -0.18649579632666805, "compression_ratio": 1.34375, "no_speech_prob": 0.09662453085184097}, {"id": 124, "seek": 83200, "start": 833.0, "end": 835.0, "text": " All right.", "tokens": [50414, 1057, 558, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1789911469416832, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0011334196897223592}, {"id": 125, "seek": 83200, "start": 838.0, "end": 843.0, "text": " So here I have an instance running, hold on.", "tokens": [50664, 407, 510, 286, 362, 364, 5197, 2614, 11, 1797, 322, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1789911469416832, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0011334196897223592}, {"id": 126, "seek": 83200, "start": 845.0, "end": 846.0, "text": " There we go.", "tokens": [51014, 821, 321, 352, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1789911469416832, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0011334196897223592}, {"id": 127, "seek": 83200, "start": 848.0, "end": 852.0, "text": " Here I have an instance running startOS.", "tokens": [51164, 1692, 286, 362, 364, 5197, 2614, 722, 4367, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1789911469416832, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0011334196897223592}, {"id": 128, "seek": 83200, "start": 852.0, "end": 855.0, "text": " I've already installed a package.", "tokens": [51364, 286, 600, 1217, 8899, 257, 7372, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1789911469416832, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0011334196897223592}, {"id": 129, "seek": 83200, "start": 855.0, "end": 858.0, "text": " This package in this case is NextCloud.", "tokens": [51514, 639, 7372, 294, 341, 1389, 307, 3087, 32787, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1789911469416832, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0011334196897223592}, {"id": 130, "seek": 83200, "start": 858.0, "end": 861.0, "text": " This NextCloud package contains two images.", "tokens": [51664, 639, 3087, 32787, 7372, 8306, 732, 5267, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1789911469416832, "compression_ratio": 1.6099290780141844, "no_speech_prob": 0.0011334196897223592}, {"id": 131, "seek": 86100, "start": 861.0, "end": 866.0, "text": " It's got the NextCloud base image, which also contains the Nginx server", "tokens": [50364, 467, 311, 658, 264, 3087, 32787, 3096, 3256, 11, 597, 611, 8306, 264, 426, 1494, 87, 7154, 50614], "temperature": 0.0, "avg_logprob": -0.11170462880815779, "compression_ratio": 1.4943181818181819, "no_speech_prob": 0.000829291355330497}, {"id": 132, "seek": 86100, "start": 866.0, "end": 870.0, "text": " because it's running the PHP for NextCloud.", "tokens": [50614, 570, 309, 311, 2614, 264, 47298, 337, 3087, 32787, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11170462880815779, "compression_ratio": 1.4943181818181819, "no_speech_prob": 0.000829291355330497}, {"id": 133, "seek": 86100, "start": 870.0, "end": 882.0, "text": " And then we have Postgres, which is our database persistence layer for NextCloud.", "tokens": [50814, 400, 550, 321, 362, 10223, 45189, 11, 597, 307, 527, 8149, 37617, 4583, 337, 3087, 32787, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11170462880815779, "compression_ratio": 1.4943181818181819, "no_speech_prob": 0.000829291355330497}, {"id": 134, "seek": 86100, "start": 882.0, "end": 887.0, "text": " So what we're going to do, so we've attached into this container,", "tokens": [51414, 407, 437, 321, 434, 516, 281, 360, 11, 370, 321, 600, 8570, 666, 341, 10129, 11, 51664], "temperature": 0.0, "avg_logprob": -0.11170462880815779, "compression_ratio": 1.4943181818181819, "no_speech_prob": 0.000829291355330497}, {"id": 135, "seek": 88700, "start": 887.0, "end": 891.0, "text": " and then I'm going to go ahead and just inject,", "tokens": [50364, 293, 550, 286, 478, 516, 281, 352, 2286, 293, 445, 10711, 11, 50564], "temperature": 0.0, "avg_logprob": -0.165554940700531, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.007003919221460819}, {"id": 136, "seek": 88700, "start": 891.0, "end": 899.0, "text": " basically run a REPL inside the JavaScript engine here.", "tokens": [50564, 1936, 1190, 257, 31511, 43, 1854, 264, 15778, 2848, 510, 13, 50964], "temperature": 0.0, "avg_logprob": -0.165554940700531, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.007003919221460819}, {"id": 137, "seek": 88700, "start": 899.0, "end": 905.0, "text": " And I'm going to go ahead and do my imports here as well.", "tokens": [50964, 400, 286, 478, 516, 281, 352, 2286, 293, 360, 452, 41596, 510, 382, 731, 13, 51264], "temperature": 0.0, "avg_logprob": -0.165554940700531, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.007003919221460819}, {"id": 138, "seek": 88700, "start": 907.0, "end": 913.0, "text": " And what this has done is it has connected us to our JSON RPC APIs,", "tokens": [51364, 400, 437, 341, 575, 1096, 307, 309, 575, 4582, 505, 281, 527, 31828, 497, 12986, 21445, 11, 51664], "temperature": 0.0, "avg_logprob": -0.165554940700531, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.007003919221460819}, {"id": 139, "seek": 88700, "start": 913.0, "end": 916.0, "text": " both the hosting of the container and the container into the host.", "tokens": [51664, 1293, 264, 16058, 295, 264, 10129, 293, 264, 10129, 666, 264, 3975, 13, 51814], "temperature": 0.0, "avg_logprob": -0.165554940700531, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.007003919221460819}, {"id": 140, "seek": 91600, "start": 917.0, "end": 922.0, "text": " And then we're going to create a couple of overlay images.", "tokens": [50414, 400, 550, 321, 434, 516, 281, 1884, 257, 1916, 295, 31741, 5267, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07124739426832932, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.000519129098393023}, {"id": 141, "seek": 91600, "start": 922.0, "end": 926.0, "text": " So first we're going to do our Postgres image.", "tokens": [50664, 407, 700, 321, 434, 516, 281, 360, 527, 10223, 45189, 3256, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07124739426832932, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.000519129098393023}, {"id": 142, "seek": 91600, "start": 928.0, "end": 933.0, "text": " And so what this is going to do is it's going to tell the host,", "tokens": [50964, 400, 370, 437, 341, 307, 516, 281, 360, 307, 309, 311, 516, 281, 980, 264, 3975, 11, 51214], "temperature": 0.0, "avg_logprob": -0.07124739426832932, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.000519129098393023}, {"id": 143, "seek": 91600, "start": 933.0, "end": 936.0, "text": " hey, I want to mount this Postgres image to the container.", "tokens": [51214, 4177, 11, 286, 528, 281, 3746, 341, 10223, 45189, 3256, 281, 264, 10129, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07124739426832932, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.000519129098393023}, {"id": 144, "seek": 91600, "start": 936.0, "end": 938.0, "text": " It says, okay, here you go.", "tokens": [51364, 467, 1619, 11, 1392, 11, 510, 291, 352, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07124739426832932, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.000519129098393023}, {"id": 145, "seek": 91600, "start": 938.0, "end": 940.0, "text": " Here's the path at which I have attached it.", "tokens": [51464, 1692, 311, 264, 3100, 412, 597, 286, 362, 8570, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07124739426832932, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.000519129098393023}, {"id": 146, "seek": 91600, "start": 940.0, "end": 944.0, "text": " I'm going to do the same thing for the main image.", "tokens": [51564, 286, 478, 516, 281, 360, 264, 912, 551, 337, 264, 2135, 3256, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07124739426832932, "compression_ratio": 1.7170731707317073, "no_speech_prob": 0.000519129098393023}, {"id": 147, "seek": 94600, "start": 947.0, "end": 952.0, "text": " And there we are.", "tokens": [50414, 400, 456, 321, 366, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12950357146885083, "compression_ratio": 1.0512820512820513, "no_speech_prob": 0.0016224972205236554}, {"id": 148, "seek": 94600, "start": 952.0, "end": 957.0, "text": " I'm going to go ahead and define a couple environment variables.", "tokens": [50664, 286, 478, 516, 281, 352, 2286, 293, 6964, 257, 1916, 2823, 9102, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12950357146885083, "compression_ratio": 1.0512820512820513, "no_speech_prob": 0.0016224972205236554}, {"id": 149, "seek": 97600, "start": 977.0, "end": 980.0, "text": " Okay.", "tokens": [50414, 1033, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1444410227112851, "compression_ratio": 1.40625, "no_speech_prob": 0.0018095645355060697}, {"id": 150, "seek": 97600, "start": 980.0, "end": 984.0, "text": " So I have a set of temporary hacks that I've put in", "tokens": [50564, 407, 286, 362, 257, 992, 295, 13413, 33617, 300, 286, 600, 829, 294, 50764], "temperature": 0.0, "avg_logprob": -0.1444410227112851, "compression_ratio": 1.40625, "no_speech_prob": 0.0018095645355060697}, {"id": 151, "seek": 97600, "start": 984.0, "end": 993.0, "text": " that will later be managed by the actual container service manager.", "tokens": [50764, 300, 486, 1780, 312, 6453, 538, 264, 3539, 10129, 2643, 6598, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1444410227112851, "compression_ratio": 1.40625, "no_speech_prob": 0.0018095645355060697}, {"id": 152, "seek": 97600, "start": 993.0, "end": 998.0, "text": " But it's mainly around permissions of the container.", "tokens": [51214, 583, 309, 311, 8704, 926, 32723, 295, 264, 10129, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1444410227112851, "compression_ratio": 1.40625, "no_speech_prob": 0.0018095645355060697}, {"id": 153, "seek": 97600, "start": 998.0, "end": 1001.0, "text": " I still need to get Shift FS working properly.", "tokens": [51464, 286, 920, 643, 281, 483, 28304, 41138, 1364, 6108, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1444410227112851, "compression_ratio": 1.40625, "no_speech_prob": 0.0018095645355060697}, {"id": 154, "seek": 100100, "start": 1001.0, "end": 1005.0, "text": " Because LXC, what it does is it maps the UIDs", "tokens": [50364, 1436, 441, 55, 34, 11, 437, 309, 775, 307, 309, 11317, 264, 624, 2777, 82, 50564], "temperature": 0.0, "avg_logprob": -0.06562707447769618, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.007811933755874634}, {"id": 155, "seek": 100100, "start": 1005.0, "end": 1008.0, "text": " within the unprivileged container to UIDs on the host.", "tokens": [50564, 1951, 264, 20994, 29994, 794, 3004, 10129, 281, 624, 2777, 82, 322, 264, 3975, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06562707447769618, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.007811933755874634}, {"id": 156, "seek": 100100, "start": 1008.0, "end": 1011.0, "text": " And so when we mount stuff to the container,", "tokens": [50714, 400, 370, 562, 321, 3746, 1507, 281, 264, 10129, 11, 50864], "temperature": 0.0, "avg_logprob": -0.06562707447769618, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.007811933755874634}, {"id": 157, "seek": 100100, "start": 1011.0, "end": 1014.0, "text": " we also need to perform that same mapping.", "tokens": [50864, 321, 611, 643, 281, 2042, 300, 912, 18350, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06562707447769618, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.007811933755874634}, {"id": 158, "seek": 100100, "start": 1014.0, "end": 1016.0, "text": " So we're not doing that yet,", "tokens": [51014, 407, 321, 434, 406, 884, 300, 1939, 11, 51114], "temperature": 0.0, "avg_logprob": -0.06562707447769618, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.007811933755874634}, {"id": 159, "seek": 100100, "start": 1016.0, "end": 1024.0, "text": " but I have a set of ownership changes that will manage that.", "tokens": [51114, 457, 286, 362, 257, 992, 295, 15279, 2962, 300, 486, 3067, 300, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06562707447769618, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.007811933755874634}, {"id": 160, "seek": 100100, "start": 1024.0, "end": 1028.0, "text": " And then all we have to do is go ahead and launch our application.", "tokens": [51514, 400, 550, 439, 321, 362, 281, 360, 307, 352, 2286, 293, 4025, 527, 3861, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06562707447769618, "compression_ratio": 1.5610859728506787, "no_speech_prob": 0.007811933755874634}, {"id": 161, "seek": 102800, "start": 1028.0, "end": 1032.0, "text": " So I'll go ahead and launch Postgres first.", "tokens": [50364, 407, 286, 603, 352, 2286, 293, 4025, 10223, 45189, 700, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1793477919793898, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005638686940073967}, {"id": 162, "seek": 102800, "start": 1032.0, "end": 1033.0, "text": " And here we go.", "tokens": [50564, 400, 510, 321, 352, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1793477919793898, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005638686940073967}, {"id": 163, "seek": 102800, "start": 1033.0, "end": 1040.0, "text": " We have Postgres running inside a tru, inside the container.", "tokens": [50614, 492, 362, 10223, 45189, 2614, 1854, 257, 504, 84, 11, 1854, 264, 10129, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1793477919793898, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005638686940073967}, {"id": 164, "seek": 102800, "start": 1040.0, "end": 1042.0, "text": " And it looks like it's ready.", "tokens": [50964, 400, 309, 1542, 411, 309, 311, 1919, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1793477919793898, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005638686940073967}, {"id": 165, "seek": 102800, "start": 1042.0, "end": 1045.0, "text": " And then now I can also launch.", "tokens": [51064, 400, 550, 586, 286, 393, 611, 4025, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1793477919793898, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005638686940073967}, {"id": 166, "seek": 102800, "start": 1045.0, "end": 1047.0, "text": " Next slide.", "tokens": [51214, 3087, 4137, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1793477919793898, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005638686940073967}, {"id": 167, "seek": 105800, "start": 1059.0, "end": 1065.0, "text": " So here we have, now both of these applications are running", "tokens": [50414, 407, 510, 321, 362, 11, 586, 1293, 295, 613, 5821, 366, 2614, 50714], "temperature": 0.0, "avg_logprob": -0.15001108986990794, "compression_ratio": 1.4519774011299436, "no_speech_prob": 0.0015243594534695148}, {"id": 168, "seek": 105800, "start": 1065.0, "end": 1069.0, "text": " within the same process namespace, the same C group, the same container.", "tokens": [50714, 1951, 264, 912, 1399, 5288, 17940, 11, 264, 912, 383, 1594, 11, 264, 912, 10129, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15001108986990794, "compression_ratio": 1.4519774011299436, "no_speech_prob": 0.0015243594534695148}, {"id": 169, "seek": 105800, "start": 1069.0, "end": 1072.0, "text": " But they're running from completely separate images.", "tokens": [50914, 583, 436, 434, 2614, 490, 2584, 4994, 5267, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15001108986990794, "compression_ratio": 1.4519774011299436, "no_speech_prob": 0.0015243594534695148}, {"id": 170, "seek": 105800, "start": 1072.0, "end": 1076.0, "text": " And that's all I have to show you guys.", "tokens": [51064, 400, 300, 311, 439, 286, 362, 281, 855, 291, 1074, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15001108986990794, "compression_ratio": 1.4519774011299436, "no_speech_prob": 0.0015243594534695148}, {"id": 171, "seek": 105800, "start": 1076.0, "end": 1080.0, "text": " I think we can open up for Q&A.", "tokens": [51264, 286, 519, 321, 393, 1269, 493, 337, 1249, 5, 32, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15001108986990794, "compression_ratio": 1.4519774011299436, "no_speech_prob": 0.0015243594534695148}, {"id": 172, "seek": 108800, "start": 1089.0, "end": 1091.0, "text": " Thank you.", "tokens": [50414, 1044, 291, 13, 50514], "temperature": 0.0, "avg_logprob": -0.20242037375768027, "compression_ratio": 1.3174603174603174, "no_speech_prob": 0.008569609373807907}, {"id": 173, "seek": 108800, "start": 1104.0, "end": 1107.0, "text": " So we have considered the idea.", "tokens": [51164, 407, 321, 362, 4888, 264, 1558, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20242037375768027, "compression_ratio": 1.3174603174603174, "no_speech_prob": 0.008569609373807907}, {"id": 174, "seek": 108800, "start": 1107.0, "end": 1112.0, "text": " Right now we actually haven't found it necessary yet.", "tokens": [51314, 1779, 586, 321, 767, 2378, 380, 1352, 309, 4818, 1939, 13, 51564], "temperature": 0.0, "avg_logprob": -0.20242037375768027, "compression_ratio": 1.3174603174603174, "no_speech_prob": 0.008569609373807907}, {"id": 175, "seek": 108800, "start": 1112.0, "end": 1117.0, "text": " Like the tru seems to be sufficient for the sandboxing we need to do.", "tokens": [51564, 1743, 264, 504, 84, 2544, 281, 312, 11563, 337, 264, 42115, 278, 321, 643, 281, 360, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20242037375768027, "compression_ratio": 1.3174603174603174, "no_speech_prob": 0.008569609373807907}, {"id": 176, "seek": 111700, "start": 1118.0, "end": 1123.0, "text": " As far as we can tell, the technology is at a point where it wouldn't be too difficult", "tokens": [50414, 1018, 1400, 382, 321, 393, 980, 11, 264, 2899, 307, 412, 257, 935, 689, 309, 2759, 380, 312, 886, 2252, 50664], "temperature": 0.0, "avg_logprob": -0.19750481066496475, "compression_ratio": 1.3533834586466165, "no_speech_prob": 0.0012837828835472465}, {"id": 177, "seek": 111700, "start": 1123.0, "end": 1130.0, "text": " to do containers and containers, but realistically we haven't found it necessary.", "tokens": [50664, 281, 360, 17089, 293, 17089, 11, 457, 40734, 321, 2378, 380, 1352, 309, 4818, 13, 51014], "temperature": 0.0, "avg_logprob": -0.19750481066496475, "compression_ratio": 1.3533834586466165, "no_speech_prob": 0.0012837828835472465}, {"id": 178, "seek": 111700, "start": 1130.0, "end": 1132.0, "text": " That's all.", "tokens": [51014, 663, 311, 439, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19750481066496475, "compression_ratio": 1.3533834586466165, "no_speech_prob": 0.0012837828835472465}, {"id": 179, "seek": 114700, "start": 1147.0, "end": 1160.0, "text": " So I think you're asking as a package developer how we distribute your application.", "tokens": [50364, 407, 286, 519, 291, 434, 3365, 382, 257, 7372, 10754, 577, 321, 20594, 428, 3861, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21506763273669827, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.1514037698507309}, {"id": 180, "seek": 114700, "start": 1160.0, "end": 1165.0, "text": " So if you have a service that you want to distribute to our users,", "tokens": [51014, 407, 498, 291, 362, 257, 2643, 300, 291, 528, 281, 20594, 281, 527, 5022, 11, 51264], "temperature": 0.0, "avg_logprob": -0.21506763273669827, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.1514037698507309}, {"id": 181, "seek": 114700, "start": 1165.0, "end": 1173.0, "text": " to people who are running on StartOS, we have our own, like the company Start9 runs a marketplace.", "tokens": [51264, 281, 561, 567, 366, 2614, 322, 6481, 4367, 11, 321, 362, 527, 1065, 11, 411, 264, 2237, 6481, 24, 6676, 257, 19455, 13, 51664], "temperature": 0.0, "avg_logprob": -0.21506763273669827, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.1514037698507309}, {"id": 182, "seek": 117300, "start": 1173.0, "end": 1177.0, "text": " But we just have a very standardized package format.", "tokens": [50364, 583, 321, 445, 362, 257, 588, 31677, 7372, 7877, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11155278523763021, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.004980238154530525}, {"id": 183, "seek": 117300, "start": 1177.0, "end": 1182.0, "text": " In this package format, you could host on any website.", "tokens": [50564, 682, 341, 7372, 7877, 11, 291, 727, 3975, 322, 604, 3144, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11155278523763021, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.004980238154530525}, {"id": 184, "seek": 117300, "start": 1182.0, "end": 1187.0, "text": " If you want to charge for it, you can charge for it.", "tokens": [50814, 759, 291, 528, 281, 4602, 337, 309, 11, 291, 393, 4602, 337, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11155278523763021, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.004980238154530525}, {"id": 185, "seek": 117300, "start": 1187.0, "end": 1195.0, "text": " But ultimately the APIs are generic enough that you can run your own marketplace", "tokens": [51064, 583, 6284, 264, 21445, 366, 19577, 1547, 300, 291, 393, 1190, 428, 1065, 19455, 51464], "temperature": 0.0, "avg_logprob": -0.11155278523763021, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.004980238154530525}, {"id": 186, "seek": 117300, "start": 1195.0, "end": 1202.0, "text": " to offer whatever services you want using whatever protocols you'd like to", "tokens": [51464, 281, 2626, 2035, 3328, 291, 528, 1228, 2035, 20618, 291, 1116, 411, 281, 51814], "temperature": 0.0, "avg_logprob": -0.11155278523763021, "compression_ratio": 1.6205128205128205, "no_speech_prob": 0.004980238154530525}, {"id": 187, "seek": 120200, "start": 1202.0, "end": 1205.0, "text": " to gate access to those S9PKs.", "tokens": [50364, 281, 8539, 2105, 281, 729, 318, 24, 47, 42, 82, 13, 50514], "temperature": 0.0, "avg_logprob": -0.17134396459015322, "compression_ratio": 1.4739583333333333, "no_speech_prob": 0.028380464762449265}, {"id": 188, "seek": 120200, "start": 1205.0, "end": 1212.0, "text": " So as a service developer, in general, if you're publishing to our official registry,", "tokens": [50514, 407, 382, 257, 2643, 10754, 11, 294, 2674, 11, 498, 291, 434, 17832, 281, 527, 4783, 36468, 11, 50864], "temperature": 0.0, "avg_logprob": -0.17134396459015322, "compression_ratio": 1.4739583333333333, "no_speech_prob": 0.028380464762449265}, {"id": 189, "seek": 120200, "start": 1212.0, "end": 1218.0, "text": " that means that you have a free and open source project that you're looking to distribute for free.", "tokens": [50864, 300, 1355, 300, 291, 362, 257, 1737, 293, 1269, 4009, 1716, 300, 291, 434, 1237, 281, 20594, 337, 1737, 13, 51164], "temperature": 0.0, "avg_logprob": -0.17134396459015322, "compression_ratio": 1.4739583333333333, "no_speech_prob": 0.028380464762449265}, {"id": 190, "seek": 120200, "start": 1218.0, "end": 1224.0, "text": " But that does not stop you from running your own paid marketplace.", "tokens": [51164, 583, 300, 775, 406, 1590, 291, 490, 2614, 428, 1065, 4835, 19455, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17134396459015322, "compression_ratio": 1.4739583333333333, "no_speech_prob": 0.028380464762449265}, {"id": 191, "seek": 123200, "start": 1232.0, "end": 1234.0, "text": " One more question.", "tokens": [50364, 1485, 544, 1168, 13, 50464], "temperature": 0.0, "avg_logprob": -0.35553481578826907, "compression_ratio": 0.864406779661017, "no_speech_prob": 0.4363059997558594}, {"id": 192, "seek": 123200, "start": 1252.0, "end": 1254.0, "text": " I'm sorry, I couldn't hear that.", "tokens": [51364, 286, 478, 2597, 11, 286, 2809, 380, 1568, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.35553481578826907, "compression_ratio": 0.864406779661017, "no_speech_prob": 0.4363059997558594}, {"id": 193, "seek": 125400, "start": 1255.0, "end": 1261.0, "text": " Other resources for our application?", "tokens": [50414, 5358, 3593, 337, 527, 3861, 30, 50714], "temperature": 0.0, "avg_logprob": -0.2031297033483332, "compression_ratio": 1.4511278195488722, "no_speech_prob": 0.03017319366335869}, {"id": 194, "seek": 125400, "start": 1261.0, "end": 1268.0, "text": " Yeah, so the resources are managed on the scale of the entire application", "tokens": [50714, 865, 11, 370, 264, 3593, 366, 6453, 322, 264, 4373, 295, 264, 2302, 3861, 51064], "temperature": 0.0, "avg_logprob": -0.2031297033483332, "compression_ratio": 1.4511278195488722, "no_speech_prob": 0.03017319366335869}, {"id": 195, "seek": 125400, "start": 1268.0, "end": 1278.0, "text": " using the configuration of the outer LXC container that everything runs inside of.", "tokens": [51064, 1228, 264, 11694, 295, 264, 10847, 441, 55, 34, 10129, 300, 1203, 6676, 1854, 295, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2031297033483332, "compression_ratio": 1.4511278195488722, "no_speech_prob": 0.03017319366335869}, {"id": 196, "seek": 127800, "start": 1278.0, "end": 1281.0, "text": " So you can just modify that LXC config.", "tokens": [50364, 407, 291, 393, 445, 16927, 300, 441, 55, 34, 6662, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10040475382949367, "compression_ratio": 1.1894736842105262, "no_speech_prob": 0.018810011446475983}, {"id": 197, "seek": 127800, "start": 1281.0, "end": 1289.0, "text": " Well, we modify that LXC config automatically based off of the host APIs.", "tokens": [50514, 1042, 11, 321, 16927, 300, 441, 55, 34, 6662, 6772, 2361, 766, 295, 264, 3975, 21445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10040475382949367, "compression_ratio": 1.1894736842105262, "no_speech_prob": 0.018810011446475983}, {"id": 198, "seek": 130800, "start": 1308.0, "end": 1310.0, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.42459996541341144, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9791200160980225}], "language": "en"}