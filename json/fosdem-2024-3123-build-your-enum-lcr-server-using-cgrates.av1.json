{"text": " I hope you can hear me. First of all, thank you for having me this year in Fosdum. My name is Saber Katelari. I'm a core developer at IDCS.com. And today I'll be showing you how you can build your own enum as your server using CG Rates. Firstly, something about our company. It's located in Bavaria, Germany with backhouses in Romania and Albania. We have over 17 years of experience in architecture and server-side solutions in voice-over IP environments. We have platform implementations covering both wholesale and retail businesses categories. And by now we are responsible to understand real-time processing and constraints and serious life system outages. Something about CG Rates. It's a real-time enterprise building suite, more like a framework since it can do many things. It's pluggable into any existing infrastructure. It's non-intrusive into existing setups. So it means it does not force you to make decisions. It's all dependent on your system admin if you want to take into consideration what CG Rates gives you or if you just want to ignore it. We are an open-source software since born in 2010. First sources published in 2012. Full sources are available in GitHub, 100% in Go. We always mention Go because when CG Rates first started, Go was also in its first weekly releases. And this means that we were one of the first implementers of Go. And it also means that everyone that we also paved the way for other people coming after us. We have no add-ons in private repositories and we take into consideration community contributions also. About Engine. Engine is performance-oriented. It has this built-in advanced caching system with transactional list record use and time TTL expiring records. It's asynchronous, processing with micro threads. If you know about Go, you probably know more about this. Also including API load balancer. We have three branches, V010, master and 1.0. V010 is our most conservative branch. Master is where we have our most recent developments. And also 1.0, we call it like the pinnacle that CG Rates can do, but it's still in early developments. We have a test-driven development environment with over 10,000 tests as part of our testing suite. Here we can mention unit tests, integration tests, and also call tests for switches. It has a building modular architecture which is cloud-ready. It has microservices with a rich set of RPC APIs because everything in CG Rates is API-related. And it's easy to enhance by rewriting specific components. So for example, if you want to rewrite the engine in some other code, you can easily do so. Some features for about CG Rates. You can do online offline charging system. You can have multi-tenancy from day one. This is more for wide labeling platforms. You can have multiple databases supported. We have multiple databases supported to mention some MySQL, Microsoft SQL, SQL Lite, Mongo Rates, Postgres, and also our internal database, which is compatible with everything we do. This is also a pretty challenging job to do for a relatively small team that we are. You can have real-time configuration reloads. So you can reload your configurations without having to shut down the engine and open it again. You can have rating engine with derived charging and in-number rating. You can have account balances and management with bundles and Dynaprepate. With Dynaprepate, you can create accounts on the fly and have it give some restricted permissions or limited permissions to your system. You can have sessions or event charging with balance reservation and refunds. This is prepaid logic. Stereo-shaken authentication, which is more for North America. CDR logging with support for interim records and rating cues. This is when you have your CDR sitting in a black box and have it communicate with your switch and have your CDR straight at the end of a matter of milliseconds without using any databases from the CDR side. You can have high-number of interfaces for event readers and exporters to mention some MQP, SQS, SQL, CSVs, XMLs and a couple more. You can have fraud detection with automatic mitigation, LCR with quality-based bundles, quality-based stats and bundles, call statistics with pattern monitoring. So you can find your ASR and your ACD live from your CDR rates. And also in combination with your proxy, you can find your average call cost and your total call cost. You can have dynamic pricing imports with templates. This is since all suppliers have different formats and CDR scan is compatible with most of them. You can use it with diameter, with radius if you need some authentication, Wi-Fi authorization. With DNS if you need enamel CR routing, which is also the topic for today. And you can also have a basic SIP server where it can do redirecting with your CDRs. You can have it redirect traffic from your switch to your CDRs with some routing and IP addresses. Well, else we have resource allocation and controller. This is some virtual channeling for your customers. You can have your API server with Gop Json, HDB Json support, built-in high availability with dynamic partitioning support, API capturing analysis service. This is something like an internal grant for CDR rates. Clustering through remote, replication for internal cache and database. Data versioning with automatic migration. This is when you need to move between releases in the same branch. You can do so with data migration. You can have and we also do, we also are agile in developing new features. So if you have some feature or some idea that you want to bring us, you are more than welcome to do so. This is an internal schema or diagram that we have for CDRs. It basically shows how CDRs has its components and interfaces and how they communicate with each other. On your left side you can see all our interfaces. You might notice that we don't have open SIPs over there because open SIPs has its own native module which is faster and better than anything we can do since it's native to open SIPs. And if we take one example, for example DNS agent which is on your left, you can see that it communicates with sessions which is our main subsystem and through there it can communicate with every component or all components at all or one component. It's all dependent on what you want to do with CDRs. For some use cases, again online offline charging, you can have a highly configurable rating bundle with voice, data, SMS, MS, monetary or anything else. In 1.0 you can really charge anything else. You can have there concurrent sessions with concurrent sessions handling and also a centralized CDR server. And this all together is what others call online offline charging system. Another use case which you can do is a dynamic routing system where you can use the dedicated subsystem for various routing strategies. There we can mention load balancing, the difference in our load balancers is that we cannot use setups but only real calls since we get that information out of CDRs. Also you can have LRN support via attributes, bundle support routing systems, quality based stats monitoring with thresholds and also load balancer which I mentioned. Now to get to the INOM LCR server that the topic is for. Firstly we need to know about DNS, probably most of you know but DNS is something like an internet address book where you query for something and you get information back specific to that what you question for. Depending on your answer the answer is categorized in some record types. There's a couple but we only work with these three, A-Type, SRV type and NEP type records. We work only with this because that's what most people need and nobody has really asked for anything more than this. To shortly describe them A-Type records convert domain addresses into IPv4 addresses, SRV records for network servicing. You can find priority, weight, port, targets from your SIP addresses and most importantly in NEPTR records which convert INOM addresses, INOMs into IP addresses. But what is INOM? INOM is basically a standard to translate telephone numbers into your eyes. Here's an example how you can do that. Firstly you need an E164 number. You can convert your number into an E164 number by firstly removing any leading zero before it and also adding your country code after it and with a plus at the end. Then to convert this INOM 164 number into an INOM number you have to remove the leading plus, reverse all the digits, add a dot between each digit and then add a suffix. This suffix, the one you have in this example is from RFC standards but in C-Drates we don't really care what you put in your suffix. In my example even I even replaced this ARPA later with the account string that I will use. For DNS agent I also mentioned earlier it's an interface, it's like a middleware where your DNS client communicates with DNS agent and then sends that information, that request to the DNS server and then from there maybe you can see from the schema. From there you can go into sessions and any component it can take any component and then give that information back to the DNS client. In terms of capability you can have as many listeners as you want. Also to mention in DNS agent we also implemented our DNS server and DNS service and listeners and for listeners you can have as many listeners as you want and they can all be opened at the same time. You can have UDP, TCP and TLS protocols and this means it is highly configurable and concurrent. Again for query types we support ASRV and NAPTR. For configuration this is in your configuration files. You need to open a new field, name it DNS agent, also this is JSON, everything is JSON in configuration. Name a new field DNS agent, enable it, by enabling it you allow it to receive and to send API calls. Then you name listeners where again you can see that it's a list so you can have as many listeners as you want. You name your address by giving it an IP and a port. In my case I use an empty IP since if it's sent by default in CJA we put what's in defaults and in this case in default is just localhost. For port I put 2053. If left empty again this will be filled by the default which is 53. And for that address I need to attach it a network. On this case I use the UDP protocol and again if left empty again it will be on UDP by default. After that I want to also be open to TCP listeners. That's why I create the same address but this time I changed the protocol. This doesn't mean that either one or the other will work. It means that both of them will work at the same time. There's something messed up over there. They should be on the same line for the last one. The address for TLS since I cannot have TLS and TCP on the same address I can put it in a different port for this example. And after you finish with listeners you go to connect your DNS agent with sessions and you do that by using session cons. You can have either localhost, internal or some configurable other connection which is done by you. I use in this case localhost since I want to track the network, the packets going through sessions and DNS agent. You can switch it with internal if you want to have a faster connection or if you do not need this debugging, this packet tracing. Just on that same DNS agent field you put request processors. To short explain request processors do the logic of what's going to happen after a query is done to your server. In this case you can have many request processors. In this case I'm only showing one. And this is what happens with it. First we define an ID for it which has to be different from other request processors. It doesn't matter what you put inside, it just has to be different. So in this case I'm describing what I do in this process which is NAPTR list cost route. After that you define filters. Because I want to find the list cost route to find a Cp address for my query. I first need to be sure that the query type is in NAPTR and that the leading country code starts with 32. This is just an example. You can have any filter that you want. The first filter asks the query type from the request if it's a full NAPTR string. And if that's true it goes to the second filter which finds if there's a prefix starting in that query name that starts with 32. And before it does that it converts that in number into E164. And that's done with filters. If those are true it goes to the next one which are the flags. In my case I want to create an event each time this query is being made. So I put there meta event which calls an API for sessions process event. Each time this query is true. And I also put routes authorized because I want to get the max usage when the query is done. And I also put routes because I want to do list cost routing with it. Next I put log there because I want to get some logs out of the query when the query is done. So I want to get the request and the reply from the query. And after that I put request fields. The request fields are what you want to populate when the query is being done. In this case I want to populate account, destination, set up time, type of record and usage. I want to populate this because I want to put them in my event later and the event needs to use them. How I populate them? I populate account with the query name by stripping away the first E164 and what's before it. So it leaves me behind with only the 1001 account which I will show later. This way I populate account with 1001. In destination I put the query name fully converted into E164. In set up time I put now for the current time of the query, type of record voice and usage of one minute. For the reply fields I want to put what I want to reply to the DNS with. So I want to reply with order of 100, reference 10, flags U and service E2U plus CIP. In the most important part the regular expression which I find through route parameters. I didn't show here but I created a routing profile before and I put there two information in two routes and that information are the CIP addresses which are different. One of them is of highly cost and the other one is least cost, is lesser cost. And since I have that meta routes flag over there, those routes will be sorted using least cost. And since I have reply I want to find that reply the routing parameters for that first index of the route. And the first index is always depending on the sorting route and make it least cost, the first index is going to be the least cost route. And under the reply you can see the reply. I find in the structure routing profile I go to run ID meta row, meta is in this case asterisk of iteration 0 of that ID. I go to routes of iteration 0 again and then I find the value of routing parameters which is the CIP address that it finds. And then I populate it to that regular expression. After that I just also put the replacement dot at the end. For the client, for the client I'm using dig, in this case I'm couring localhost on port 2053, the type of regular this NAPTR. And you can see the N number that I put there. You can see the 1001 account at the end. For the reply I captured this using ngrep. You can see the API that gets called sessions process event. In the flags they are the exact same that I put in my request processes. The tenant gets automatically taken by default configs which is cj.org, the ID is some random number. Time is the current time of the query. And in the event you can see they are exactly what I asked for in my request processes again, if you can see. And that's just the request for the reply site. I can see the reply from that API where I find the max usage of 60 seconds. If you remember I put one minute of the request. You can see that it's also 60 billion nanoseconds. This cj also works in nanoseconds. Also I have the reply on the routes profile site. You can see that it found the routes account for 1001. You can see the sorting that it used. It's LC for list cost. And also it shows all the routes that it found sorted by it. And you can see routes with ID route 2. You can see the Cp address ending with 12 and the cost that it would take of 60 units. And the second ID which is more costly with the Cp address of 11. And here we get the reply back from DNS agent after it's done. You can see that it found a regular expression with 12 at the end which was 60 cost units if you saw from earlier. And also as another use case you can have a fail fallback. So for example you can have multiple answers over here. In my case I would just have to make another request process. And in this case I put just one instead of zero over there and it gets the second list cost that it finds from routes. By that you can just get the second answer also. And that's about it. Any questions? I'm guessing not. If you have any questions you can also ask them at our Google groups. Oh sorry. Yeah. Going back to the request and the response. I saw you had a, in the request you were getting an account ID. How are you figuring out the account of the person asking according to DNS? Well it depends on what you want to do. In my case I just put that in my request on the DNS client over there. You can see at the end it's in that 1001. So I give it myself that account ID. Okay so you're giving each customer a phone top level domain name. Whatever you want. Any other questions? Okay. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.4, "text": " I hope you can hear me.", "tokens": [50364, 286, 1454, 291, 393, 1568, 385, 13, 51034], "temperature": 0.0, "avg_logprob": -0.4975626875714558, "compression_ratio": 1.3964497041420119, "no_speech_prob": 0.06065240502357483}, {"id": 1, "seek": 0, "start": 13.4, "end": 16.4, "text": " First of all, thank you for having me this year in Fosdum.", "tokens": [51034, 2386, 295, 439, 11, 1309, 291, 337, 1419, 385, 341, 1064, 294, 479, 329, 67, 449, 13, 51184], "temperature": 0.0, "avg_logprob": -0.4975626875714558, "compression_ratio": 1.3964497041420119, "no_speech_prob": 0.06065240502357483}, {"id": 2, "seek": 0, "start": 16.4, "end": 18.400000000000002, "text": " My name is Saber Katelari.", "tokens": [51184, 1222, 1315, 307, 13915, 260, 8365, 338, 3504, 13, 51284], "temperature": 0.0, "avg_logprob": -0.4975626875714558, "compression_ratio": 1.3964497041420119, "no_speech_prob": 0.06065240502357483}, {"id": 3, "seek": 0, "start": 18.400000000000002, "end": 21.76, "text": " I'm a core developer at IDCS.com.", "tokens": [51284, 286, 478, 257, 4965, 10754, 412, 7348, 26283, 13, 1112, 13, 51452], "temperature": 0.0, "avg_logprob": -0.4975626875714558, "compression_ratio": 1.3964497041420119, "no_speech_prob": 0.06065240502357483}, {"id": 4, "seek": 0, "start": 21.76, "end": 26.8, "text": " And today I'll be showing you how you can build your own enum as your server using CG", "tokens": [51452, 400, 965, 286, 603, 312, 4099, 291, 577, 291, 393, 1322, 428, 1065, 465, 449, 382, 428, 7154, 1228, 383, 38, 51704], "temperature": 0.0, "avg_logprob": -0.4975626875714558, "compression_ratio": 1.3964497041420119, "no_speech_prob": 0.06065240502357483}, {"id": 5, "seek": 0, "start": 26.8, "end": 27.8, "text": " Rates.", "tokens": [51704, 497, 1024, 13, 51754], "temperature": 0.0, "avg_logprob": -0.4975626875714558, "compression_ratio": 1.3964497041420119, "no_speech_prob": 0.06065240502357483}, {"id": 6, "seek": 2780, "start": 28.2, "end": 30.6, "text": " Firstly, something about our company.", "tokens": [50384, 20042, 11, 746, 466, 527, 2237, 13, 50504], "temperature": 0.0, "avg_logprob": -0.2665599019903886, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.031165016815066338}, {"id": 7, "seek": 2780, "start": 30.6, "end": 35.32, "text": " It's located in Bavaria, Germany with backhouses in Romania and Albania.", "tokens": [50504, 467, 311, 6870, 294, 363, 706, 9831, 11, 7244, 365, 646, 71, 18562, 294, 36678, 293, 41547, 654, 13, 50740], "temperature": 0.0, "avg_logprob": -0.2665599019903886, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.031165016815066338}, {"id": 8, "seek": 2780, "start": 35.32, "end": 42.84, "text": " We have over 17 years of experience in architecture and server-side solutions in voice-over IP environments.", "tokens": [50740, 492, 362, 670, 3282, 924, 295, 1752, 294, 9482, 293, 7154, 12, 1812, 6547, 294, 3177, 12, 3570, 8671, 12388, 13, 51116], "temperature": 0.0, "avg_logprob": -0.2665599019903886, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.031165016815066338}, {"id": 9, "seek": 2780, "start": 42.84, "end": 49.6, "text": " We have platform implementations covering both wholesale and retail businesses categories.", "tokens": [51116, 492, 362, 3663, 4445, 763, 10322, 1293, 43982, 293, 10800, 6011, 10479, 13, 51454], "temperature": 0.0, "avg_logprob": -0.2665599019903886, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.031165016815066338}, {"id": 10, "seek": 2780, "start": 49.6, "end": 54.36, "text": " And by now we are responsible to understand real-time processing and constraints and serious", "tokens": [51454, 400, 538, 586, 321, 366, 6250, 281, 1223, 957, 12, 3766, 9007, 293, 18491, 293, 3156, 51692], "temperature": 0.0, "avg_logprob": -0.2665599019903886, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.031165016815066338}, {"id": 11, "seek": 2780, "start": 54.36, "end": 57.72, "text": " life system outages.", "tokens": [51692, 993, 1185, 484, 1660, 13, 51860], "temperature": 0.0, "avg_logprob": -0.2665599019903886, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.031165016815066338}, {"id": 12, "seek": 5772, "start": 57.72, "end": 59.72, "text": " Something about CG Rates.", "tokens": [50364, 6595, 466, 383, 38, 497, 1024, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1811725443059748, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.05334465205669403}, {"id": 13, "seek": 5772, "start": 59.72, "end": 64.16, "text": " It's a real-time enterprise building suite, more like a framework since it can do many", "tokens": [50464, 467, 311, 257, 957, 12, 3766, 14132, 2390, 14205, 11, 544, 411, 257, 8388, 1670, 309, 393, 360, 867, 50686], "temperature": 0.0, "avg_logprob": -0.1811725443059748, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.05334465205669403}, {"id": 14, "seek": 5772, "start": 64.16, "end": 65.44, "text": " things.", "tokens": [50686, 721, 13, 50750], "temperature": 0.0, "avg_logprob": -0.1811725443059748, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.05334465205669403}, {"id": 15, "seek": 5772, "start": 65.44, "end": 68.44, "text": " It's pluggable into any existing infrastructure.", "tokens": [50750, 467, 311, 499, 3562, 712, 666, 604, 6741, 6896, 13, 50900], "temperature": 0.0, "avg_logprob": -0.1811725443059748, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.05334465205669403}, {"id": 16, "seek": 5772, "start": 68.44, "end": 71.28, "text": " It's non-intrusive into existing setups.", "tokens": [50900, 467, 311, 2107, 12, 686, 13783, 488, 666, 6741, 46832, 13, 51042], "temperature": 0.0, "avg_logprob": -0.1811725443059748, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.05334465205669403}, {"id": 17, "seek": 5772, "start": 71.28, "end": 75.6, "text": " So it means it does not force you to make decisions.", "tokens": [51042, 407, 309, 1355, 309, 775, 406, 3464, 291, 281, 652, 5327, 13, 51258], "temperature": 0.0, "avg_logprob": -0.1811725443059748, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.05334465205669403}, {"id": 18, "seek": 5772, "start": 75.6, "end": 80.96000000000001, "text": " It's all dependent on your system admin if you want to take into consideration what CG", "tokens": [51258, 467, 311, 439, 12334, 322, 428, 1185, 24236, 498, 291, 528, 281, 747, 666, 12381, 437, 383, 38, 51526], "temperature": 0.0, "avg_logprob": -0.1811725443059748, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.05334465205669403}, {"id": 19, "seek": 5772, "start": 80.96000000000001, "end": 85.56, "text": " Rates gives you or if you just want to ignore it.", "tokens": [51526, 497, 1024, 2709, 291, 420, 498, 291, 445, 528, 281, 11200, 309, 13, 51756], "temperature": 0.0, "avg_logprob": -0.1811725443059748, "compression_ratio": 1.6736401673640167, "no_speech_prob": 0.05334465205669403}, {"id": 20, "seek": 8556, "start": 85.56, "end": 91.76, "text": " We are an open-source software since born in 2010.", "tokens": [50364, 492, 366, 364, 1269, 12, 41676, 4722, 1670, 4232, 294, 9657, 13, 50674], "temperature": 0.0, "avg_logprob": -0.1967877635249385, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.06210840493440628}, {"id": 21, "seek": 8556, "start": 91.76, "end": 95.48, "text": " First sources published in 2012.", "tokens": [50674, 2386, 7139, 6572, 294, 9125, 13, 50860], "temperature": 0.0, "avg_logprob": -0.1967877635249385, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.06210840493440628}, {"id": 22, "seek": 8556, "start": 95.48, "end": 99.92, "text": " Full sources are available in GitHub, 100% in Go.", "tokens": [50860, 13841, 7139, 366, 2435, 294, 23331, 11, 2319, 4, 294, 1037, 13, 51082], "temperature": 0.0, "avg_logprob": -0.1967877635249385, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.06210840493440628}, {"id": 23, "seek": 8556, "start": 99.92, "end": 107.0, "text": " We always mention Go because when CG Rates first started, Go was also in its first weekly", "tokens": [51082, 492, 1009, 2152, 1037, 570, 562, 383, 38, 497, 1024, 700, 1409, 11, 1037, 390, 611, 294, 1080, 700, 12460, 51436], "temperature": 0.0, "avg_logprob": -0.1967877635249385, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.06210840493440628}, {"id": 24, "seek": 8556, "start": 107.0, "end": 108.92, "text": " releases.", "tokens": [51436, 16952, 13, 51532], "temperature": 0.0, "avg_logprob": -0.1967877635249385, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.06210840493440628}, {"id": 25, "seek": 8556, "start": 108.92, "end": 115.04, "text": " And this means that we were one of the first implementers of Go.", "tokens": [51532, 400, 341, 1355, 300, 321, 645, 472, 295, 264, 700, 4445, 433, 295, 1037, 13, 51838], "temperature": 0.0, "avg_logprob": -0.1967877635249385, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.06210840493440628}, {"id": 26, "seek": 11504, "start": 115.04, "end": 121.64, "text": " And it also means that everyone that we also paved the way for other people coming after", "tokens": [50364, 400, 309, 611, 1355, 300, 1518, 300, 321, 611, 42989, 264, 636, 337, 661, 561, 1348, 934, 50694], "temperature": 0.0, "avg_logprob": -0.2509265856796436, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.04099912568926811}, {"id": 27, "seek": 11504, "start": 121.64, "end": 123.64, "text": " us.", "tokens": [50694, 505, 13, 50794], "temperature": 0.0, "avg_logprob": -0.2509265856796436, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.04099912568926811}, {"id": 28, "seek": 11504, "start": 123.64, "end": 129.20000000000002, "text": " We have no add-ons in private repositories and we take into consideration community contributions", "tokens": [50794, 492, 362, 572, 909, 12, 892, 294, 4551, 22283, 2083, 293, 321, 747, 666, 12381, 1768, 15725, 51072], "temperature": 0.0, "avg_logprob": -0.2509265856796436, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.04099912568926811}, {"id": 29, "seek": 11504, "start": 129.20000000000002, "end": 131.4, "text": " also.", "tokens": [51072, 611, 13, 51182], "temperature": 0.0, "avg_logprob": -0.2509265856796436, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.04099912568926811}, {"id": 30, "seek": 11504, "start": 131.4, "end": 132.4, "text": " About Engine.", "tokens": [51182, 7769, 7659, 13, 51232], "temperature": 0.0, "avg_logprob": -0.2509265856796436, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.04099912568926811}, {"id": 31, "seek": 11504, "start": 132.4, "end": 134.20000000000002, "text": " Engine is performance-oriented.", "tokens": [51232, 7659, 307, 3389, 12, 27414, 13, 51322], "temperature": 0.0, "avg_logprob": -0.2509265856796436, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.04099912568926811}, {"id": 32, "seek": 11504, "start": 134.20000000000002, "end": 140.96, "text": " It has this built-in advanced caching system with transactional list record use and time", "tokens": [51322, 467, 575, 341, 3094, 12, 259, 7339, 269, 2834, 1185, 365, 46688, 1966, 1329, 2136, 764, 293, 565, 51660], "temperature": 0.0, "avg_logprob": -0.2509265856796436, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.04099912568926811}, {"id": 33, "seek": 11504, "start": 140.96, "end": 144.44, "text": " TTL expiring records.", "tokens": [51660, 32576, 43, 1278, 5057, 7724, 13, 51834], "temperature": 0.0, "avg_logprob": -0.2509265856796436, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.04099912568926811}, {"id": 34, "seek": 14444, "start": 144.56, "end": 148.07999999999998, "text": " It's asynchronous, processing with micro threads.", "tokens": [50370, 467, 311, 49174, 11, 9007, 365, 4532, 19314, 13, 50546], "temperature": 0.0, "avg_logprob": -0.21537421630309508, "compression_ratio": 1.54251012145749, "no_speech_prob": 0.038455162197351456}, {"id": 35, "seek": 14444, "start": 148.07999999999998, "end": 152.2, "text": " If you know about Go, you probably know more about this.", "tokens": [50546, 759, 291, 458, 466, 1037, 11, 291, 1391, 458, 544, 466, 341, 13, 50752], "temperature": 0.0, "avg_logprob": -0.21537421630309508, "compression_ratio": 1.54251012145749, "no_speech_prob": 0.038455162197351456}, {"id": 36, "seek": 14444, "start": 152.2, "end": 155.52, "text": " Also including API load balancer.", "tokens": [50752, 2743, 3009, 9362, 3677, 3119, 28347, 13, 50918], "temperature": 0.0, "avg_logprob": -0.21537421630309508, "compression_ratio": 1.54251012145749, "no_speech_prob": 0.038455162197351456}, {"id": 37, "seek": 14444, "start": 155.52, "end": 158.8, "text": " We have three branches, V010, master and 1.0.", "tokens": [50918, 492, 362, 1045, 14770, 11, 691, 15, 3279, 11, 4505, 293, 502, 13, 15, 13, 51082], "temperature": 0.0, "avg_logprob": -0.21537421630309508, "compression_ratio": 1.54251012145749, "no_speech_prob": 0.038455162197351456}, {"id": 38, "seek": 14444, "start": 158.8, "end": 162.4, "text": " V010 is our most conservative branch.", "tokens": [51082, 691, 15, 3279, 307, 527, 881, 13780, 9819, 13, 51262], "temperature": 0.0, "avg_logprob": -0.21537421630309508, "compression_ratio": 1.54251012145749, "no_speech_prob": 0.038455162197351456}, {"id": 39, "seek": 14444, "start": 162.4, "end": 166.36, "text": " Master is where we have our most recent developments.", "tokens": [51262, 6140, 307, 689, 321, 362, 527, 881, 5162, 20862, 13, 51460], "temperature": 0.0, "avg_logprob": -0.21537421630309508, "compression_ratio": 1.54251012145749, "no_speech_prob": 0.038455162197351456}, {"id": 40, "seek": 14444, "start": 166.36, "end": 171.64, "text": " And also 1.0, we call it like the pinnacle that CG Rates can do, but it's still in early", "tokens": [51460, 400, 611, 502, 13, 15, 11, 321, 818, 309, 411, 264, 5447, 77, 7041, 300, 383, 38, 497, 1024, 393, 360, 11, 457, 309, 311, 920, 294, 2440, 51724], "temperature": 0.0, "avg_logprob": -0.21537421630309508, "compression_ratio": 1.54251012145749, "no_speech_prob": 0.038455162197351456}, {"id": 41, "seek": 14444, "start": 171.64, "end": 173.84, "text": " developments.", "tokens": [51724, 20862, 13, 51834], "temperature": 0.0, "avg_logprob": -0.21537421630309508, "compression_ratio": 1.54251012145749, "no_speech_prob": 0.038455162197351456}, {"id": 42, "seek": 17384, "start": 173.84, "end": 179.04, "text": " We have a test-driven development environment with over 10,000 tests as part of our testing", "tokens": [50364, 492, 362, 257, 1500, 12, 25456, 3250, 2823, 365, 670, 1266, 11, 1360, 6921, 382, 644, 295, 527, 4997, 50624], "temperature": 0.0, "avg_logprob": -0.19258201599121094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.012189663015305996}, {"id": 43, "seek": 17384, "start": 179.04, "end": 180.04, "text": " suite.", "tokens": [50624, 14205, 13, 50674], "temperature": 0.0, "avg_logprob": -0.19258201599121094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.012189663015305996}, {"id": 44, "seek": 17384, "start": 180.04, "end": 186.88, "text": " Here we can mention unit tests, integration tests, and also call tests for switches.", "tokens": [50674, 1692, 321, 393, 2152, 4985, 6921, 11, 10980, 6921, 11, 293, 611, 818, 6921, 337, 19458, 13, 51016], "temperature": 0.0, "avg_logprob": -0.19258201599121094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.012189663015305996}, {"id": 45, "seek": 17384, "start": 186.88, "end": 190.32, "text": " It has a building modular architecture which is cloud-ready.", "tokens": [51016, 467, 575, 257, 2390, 31111, 9482, 597, 307, 4588, 12, 1201, 13, 51188], "temperature": 0.0, "avg_logprob": -0.19258201599121094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.012189663015305996}, {"id": 46, "seek": 17384, "start": 190.32, "end": 199.8, "text": " It has microservices with a rich set of RPC APIs because everything in CG Rates is API-related.", "tokens": [51188, 467, 575, 15547, 47480, 365, 257, 4593, 992, 295, 497, 12986, 21445, 570, 1203, 294, 383, 38, 497, 1024, 307, 9362, 12, 12004, 13, 51662], "temperature": 0.0, "avg_logprob": -0.19258201599121094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.012189663015305996}, {"id": 47, "seek": 17384, "start": 199.8, "end": 203.12, "text": " And it's easy to enhance by rewriting specific components.", "tokens": [51662, 400, 309, 311, 1858, 281, 11985, 538, 319, 19868, 2685, 6677, 13, 51828], "temperature": 0.0, "avg_logprob": -0.19258201599121094, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.012189663015305996}, {"id": 48, "seek": 20312, "start": 203.12, "end": 209.16, "text": " So for example, if you want to rewrite the engine in some other code, you can easily do", "tokens": [50364, 407, 337, 1365, 11, 498, 291, 528, 281, 28132, 264, 2848, 294, 512, 661, 3089, 11, 291, 393, 3612, 360, 50666], "temperature": 0.0, "avg_logprob": -0.21645204147489944, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.013649183325469494}, {"id": 49, "seek": 20312, "start": 209.16, "end": 210.96, "text": " so.", "tokens": [50666, 370, 13, 50756], "temperature": 0.0, "avg_logprob": -0.21645204147489944, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.013649183325469494}, {"id": 50, "seek": 20312, "start": 210.96, "end": 213.88, "text": " Some features for about CG Rates.", "tokens": [50756, 2188, 4122, 337, 466, 383, 38, 497, 1024, 13, 50902], "temperature": 0.0, "avg_logprob": -0.21645204147489944, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.013649183325469494}, {"id": 51, "seek": 20312, "start": 213.88, "end": 216.04, "text": " You can do online offline charging system.", "tokens": [50902, 509, 393, 360, 2950, 21857, 11379, 1185, 13, 51010], "temperature": 0.0, "avg_logprob": -0.21645204147489944, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.013649183325469494}, {"id": 52, "seek": 20312, "start": 216.04, "end": 219.0, "text": " You can have multi-tenancy from day one.", "tokens": [51010, 509, 393, 362, 4825, 12, 1147, 6717, 490, 786, 472, 13, 51158], "temperature": 0.0, "avg_logprob": -0.21645204147489944, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.013649183325469494}, {"id": 53, "seek": 20312, "start": 219.0, "end": 223.0, "text": " This is more for wide labeling platforms.", "tokens": [51158, 639, 307, 544, 337, 4874, 40244, 9473, 13, 51358], "temperature": 0.0, "avg_logprob": -0.21645204147489944, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.013649183325469494}, {"id": 54, "seek": 20312, "start": 223.0, "end": 225.96, "text": " You can have multiple databases supported.", "tokens": [51358, 509, 393, 362, 3866, 22380, 8104, 13, 51506], "temperature": 0.0, "avg_logprob": -0.21645204147489944, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.013649183325469494}, {"id": 55, "seek": 20312, "start": 225.96, "end": 232.76, "text": " We have multiple databases supported to mention some MySQL, Microsoft SQL, SQL Lite, Mongo", "tokens": [51506, 492, 362, 3866, 22380, 8104, 281, 2152, 512, 1222, 39934, 11, 8116, 19200, 11, 19200, 32986, 11, 48380, 51846], "temperature": 0.0, "avg_logprob": -0.21645204147489944, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.013649183325469494}, {"id": 56, "seek": 23276, "start": 232.79999999999998, "end": 240.0, "text": " Rates, Postgres, and also our internal database, which is compatible with everything we do.", "tokens": [50366, 497, 1024, 11, 10223, 45189, 11, 293, 611, 527, 6920, 8149, 11, 597, 307, 18218, 365, 1203, 321, 360, 13, 50726], "temperature": 0.0, "avg_logprob": -0.21754486002820603, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.01425431203097105}, {"id": 57, "seek": 23276, "start": 240.0, "end": 246.95999999999998, "text": " This is also a pretty challenging job to do for a relatively small team that we are.", "tokens": [50726, 639, 307, 611, 257, 1238, 7595, 1691, 281, 360, 337, 257, 7226, 1359, 1469, 300, 321, 366, 13, 51074], "temperature": 0.0, "avg_logprob": -0.21754486002820603, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.01425431203097105}, {"id": 58, "seek": 23276, "start": 246.95999999999998, "end": 249.16, "text": " You can have real-time configuration reloads.", "tokens": [51074, 509, 393, 362, 957, 12, 3766, 11694, 25628, 82, 13, 51184], "temperature": 0.0, "avg_logprob": -0.21754486002820603, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.01425431203097105}, {"id": 59, "seek": 23276, "start": 249.16, "end": 253.64, "text": " So you can reload your configurations without having to shut down the engine and open it", "tokens": [51184, 407, 291, 393, 25628, 428, 31493, 1553, 1419, 281, 5309, 760, 264, 2848, 293, 1269, 309, 51408], "temperature": 0.0, "avg_logprob": -0.21754486002820603, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.01425431203097105}, {"id": 60, "seek": 23276, "start": 253.64, "end": 255.32, "text": " again.", "tokens": [51408, 797, 13, 51492], "temperature": 0.0, "avg_logprob": -0.21754486002820603, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.01425431203097105}, {"id": 61, "seek": 23276, "start": 255.32, "end": 260.36, "text": " You can have rating engine with derived charging and in-number rating.", "tokens": [51492, 509, 393, 362, 10990, 2848, 365, 18949, 11379, 293, 294, 12, 41261, 10990, 13, 51744], "temperature": 0.0, "avg_logprob": -0.21754486002820603, "compression_ratio": 1.6767241379310345, "no_speech_prob": 0.01425431203097105}, {"id": 62, "seek": 26036, "start": 260.36, "end": 266.12, "text": " You can have account balances and management with bundles and Dynaprepate.", "tokens": [50364, 509, 393, 362, 2696, 33993, 293, 4592, 365, 13882, 904, 293, 413, 2534, 569, 19919, 473, 13, 50652], "temperature": 0.0, "avg_logprob": -0.2086502643341714, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03033071756362915}, {"id": 63, "seek": 26036, "start": 266.12, "end": 272.76, "text": " With Dynaprepate, you can create accounts on the fly and have it give some restricted", "tokens": [50652, 2022, 413, 2534, 569, 19919, 473, 11, 291, 393, 1884, 9402, 322, 264, 3603, 293, 362, 309, 976, 512, 20608, 50984], "temperature": 0.0, "avg_logprob": -0.2086502643341714, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03033071756362915}, {"id": 64, "seek": 26036, "start": 272.76, "end": 276.48, "text": " permissions or limited permissions to your system.", "tokens": [50984, 32723, 420, 5567, 32723, 281, 428, 1185, 13, 51170], "temperature": 0.0, "avg_logprob": -0.2086502643341714, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03033071756362915}, {"id": 65, "seek": 26036, "start": 276.48, "end": 280.56, "text": " You can have sessions or event charging with balance reservation and refunds.", "tokens": [51170, 509, 393, 362, 11081, 420, 2280, 11379, 365, 4772, 28922, 293, 29384, 82, 13, 51374], "temperature": 0.0, "avg_logprob": -0.2086502643341714, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03033071756362915}, {"id": 66, "seek": 26036, "start": 280.56, "end": 283.88, "text": " This is prepaid logic.", "tokens": [51374, 639, 307, 2666, 17810, 9952, 13, 51540], "temperature": 0.0, "avg_logprob": -0.2086502643341714, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03033071756362915}, {"id": 67, "seek": 26036, "start": 283.88, "end": 286.84000000000003, "text": " Stereo-shaken authentication, which is more for North America.", "tokens": [51540, 745, 323, 78, 12, 2716, 9846, 26643, 11, 597, 307, 544, 337, 4067, 3374, 13, 51688], "temperature": 0.0, "avg_logprob": -0.2086502643341714, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03033071756362915}, {"id": 68, "seek": 28684, "start": 287.28, "end": 292.15999999999997, "text": " CDR logging with support for interim records and rating cues.", "tokens": [50386, 6743, 49, 27991, 365, 1406, 337, 33500, 7724, 293, 10990, 32192, 13, 50630], "temperature": 0.0, "avg_logprob": -0.2512745352352367, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.02060386911034584}, {"id": 69, "seek": 28684, "start": 292.15999999999997, "end": 297.4, "text": " This is when you have your CDR sitting in a black box and have it communicate with your", "tokens": [50630, 639, 307, 562, 291, 362, 428, 6743, 49, 3798, 294, 257, 2211, 2424, 293, 362, 309, 7890, 365, 428, 50892], "temperature": 0.0, "avg_logprob": -0.2512745352352367, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.02060386911034584}, {"id": 70, "seek": 28684, "start": 297.4, "end": 303.91999999999996, "text": " switch and have your CDR straight at the end of a matter of milliseconds without using", "tokens": [50892, 3679, 293, 362, 428, 6743, 49, 2997, 412, 264, 917, 295, 257, 1871, 295, 34184, 1553, 1228, 51218], "temperature": 0.0, "avg_logprob": -0.2512745352352367, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.02060386911034584}, {"id": 71, "seek": 28684, "start": 303.91999999999996, "end": 307.91999999999996, "text": " any databases from the CDR side.", "tokens": [51218, 604, 22380, 490, 264, 6743, 49, 1252, 13, 51418], "temperature": 0.0, "avg_logprob": -0.2512745352352367, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.02060386911034584}, {"id": 72, "seek": 28684, "start": 307.91999999999996, "end": 312.64, "text": " You can have high-number of interfaces for event readers and exporters to mention some", "tokens": [51418, 509, 393, 362, 1090, 12, 41261, 295, 28416, 337, 2280, 17147, 293, 1278, 12168, 281, 2152, 512, 51654], "temperature": 0.0, "avg_logprob": -0.2512745352352367, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.02060386911034584}, {"id": 73, "seek": 31264, "start": 313.36, "end": 319.76, "text": " MQP, SQS, SQL, CSVs, XMLs and a couple more.", "tokens": [50400, 376, 48, 47, 11, 318, 48, 50, 11, 19200, 11, 48814, 82, 11, 43484, 82, 293, 257, 1916, 544, 13, 50720], "temperature": 0.0, "avg_logprob": -0.22296948432922364, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.02813367359340191}, {"id": 74, "seek": 31264, "start": 319.76, "end": 326.91999999999996, "text": " You can have fraud detection with automatic mitigation, LCR with quality-based bundles,", "tokens": [50720, 509, 393, 362, 14560, 17784, 365, 12509, 32649, 11, 441, 18547, 365, 3125, 12, 6032, 13882, 904, 11, 51078], "temperature": 0.0, "avg_logprob": -0.22296948432922364, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.02813367359340191}, {"id": 75, "seek": 31264, "start": 326.91999999999996, "end": 332.0, "text": " quality-based stats and bundles, call statistics with pattern monitoring.", "tokens": [51078, 3125, 12, 6032, 18152, 293, 13882, 904, 11, 818, 12523, 365, 5102, 11028, 13, 51332], "temperature": 0.0, "avg_logprob": -0.22296948432922364, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.02813367359340191}, {"id": 76, "seek": 31264, "start": 332.0, "end": 337.2, "text": " So you can find your ASR and your ACD live from your CDR rates.", "tokens": [51332, 407, 291, 393, 915, 428, 7469, 49, 293, 428, 8157, 35, 1621, 490, 428, 6743, 49, 6846, 13, 51592], "temperature": 0.0, "avg_logprob": -0.22296948432922364, "compression_ratio": 1.4673913043478262, "no_speech_prob": 0.02813367359340191}, {"id": 77, "seek": 33720, "start": 337.24, "end": 343.44, "text": " And also in combination with your proxy, you can find your average call cost and your total", "tokens": [50366, 400, 611, 294, 6562, 365, 428, 29690, 11, 291, 393, 915, 428, 4274, 818, 2063, 293, 428, 3217, 50676], "temperature": 0.0, "avg_logprob": -0.22730156632720447, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.04783584922552109}, {"id": 78, "seek": 33720, "start": 343.44, "end": 345.84, "text": " call cost.", "tokens": [50676, 818, 2063, 13, 50796], "temperature": 0.0, "avg_logprob": -0.22730156632720447, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.04783584922552109}, {"id": 79, "seek": 33720, "start": 345.84, "end": 349.15999999999997, "text": " You can have dynamic pricing imports with templates.", "tokens": [50796, 509, 393, 362, 8546, 17621, 41596, 365, 21165, 13, 50962], "temperature": 0.0, "avg_logprob": -0.22730156632720447, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.04783584922552109}, {"id": 80, "seek": 33720, "start": 349.15999999999997, "end": 359.48, "text": " This is since all suppliers have different formats and CDR scan is compatible with most", "tokens": [50962, 639, 307, 1670, 439, 29467, 362, 819, 25879, 293, 6743, 49, 11049, 307, 18218, 365, 881, 51478], "temperature": 0.0, "avg_logprob": -0.22730156632720447, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.04783584922552109}, {"id": 81, "seek": 33720, "start": 359.48, "end": 362.08, "text": " of them.", "tokens": [51478, 295, 552, 13, 51608], "temperature": 0.0, "avg_logprob": -0.22730156632720447, "compression_ratio": 1.4823529411764707, "no_speech_prob": 0.04783584922552109}, {"id": 82, "seek": 36208, "start": 362.08, "end": 369.08, "text": " You can use it with diameter, with radius if you need some authentication, Wi-Fi authorization.", "tokens": [50364, 509, 393, 764, 309, 365, 14196, 11, 365, 15845, 498, 291, 643, 512, 26643, 11, 14035, 12, 13229, 33697, 13, 50714], "temperature": 0.0, "avg_logprob": -0.30308184904210705, "compression_ratio": 1.4488636363636365, "no_speech_prob": 0.08393100649118423}, {"id": 83, "seek": 36208, "start": 369.08, "end": 377.88, "text": " With DNS if you need enamel CR routing, which is also the topic for today.", "tokens": [50714, 2022, 35153, 498, 291, 643, 465, 16103, 14123, 32722, 11, 597, 307, 611, 264, 4829, 337, 965, 13, 51154], "temperature": 0.0, "avg_logprob": -0.30308184904210705, "compression_ratio": 1.4488636363636365, "no_speech_prob": 0.08393100649118423}, {"id": 84, "seek": 36208, "start": 377.88, "end": 386.88, "text": " And you can also have a basic SIP server where it can do redirecting with your CDRs.", "tokens": [51154, 400, 291, 393, 611, 362, 257, 3875, 318, 9139, 7154, 689, 309, 393, 360, 29066, 278, 365, 428, 6743, 49, 82, 13, 51604], "temperature": 0.0, "avg_logprob": -0.30308184904210705, "compression_ratio": 1.4488636363636365, "no_speech_prob": 0.08393100649118423}, {"id": 85, "seek": 38688, "start": 386.88, "end": 393.2, "text": " You can have it redirect traffic from your switch to your CDRs with some routing and", "tokens": [50364, 509, 393, 362, 309, 29066, 6419, 490, 428, 3679, 281, 428, 6743, 49, 82, 365, 512, 32722, 293, 50680], "temperature": 0.0, "avg_logprob": -0.28709623786840544, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.025423526763916016}, {"id": 86, "seek": 38688, "start": 393.2, "end": 395.76, "text": " IP addresses.", "tokens": [50680, 8671, 16862, 13, 50808], "temperature": 0.0, "avg_logprob": -0.28709623786840544, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.025423526763916016}, {"id": 87, "seek": 38688, "start": 395.76, "end": 402.04, "text": " Well, else we have resource allocation and controller.", "tokens": [50808, 1042, 11, 1646, 321, 362, 7684, 27599, 293, 10561, 13, 51122], "temperature": 0.0, "avg_logprob": -0.28709623786840544, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.025423526763916016}, {"id": 88, "seek": 38688, "start": 402.04, "end": 405.68, "text": " This is some virtual channeling for your customers.", "tokens": [51122, 639, 307, 512, 6374, 2269, 278, 337, 428, 4581, 13, 51304], "temperature": 0.0, "avg_logprob": -0.28709623786840544, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.025423526763916016}, {"id": 89, "seek": 38688, "start": 405.68, "end": 411.64, "text": " You can have your API server with Gop Json, HDB Json support, built-in high availability", "tokens": [51304, 509, 393, 362, 428, 9362, 7154, 365, 460, 404, 508, 3015, 11, 12149, 33, 508, 3015, 1406, 11, 3094, 12, 259, 1090, 17945, 51602], "temperature": 0.0, "avg_logprob": -0.28709623786840544, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.025423526763916016}, {"id": 90, "seek": 38688, "start": 411.64, "end": 416.56, "text": " with dynamic partitioning support, API capturing analysis service.", "tokens": [51602, 365, 8546, 24808, 278, 1406, 11, 9362, 23384, 5215, 2643, 13, 51848], "temperature": 0.0, "avg_logprob": -0.28709623786840544, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.025423526763916016}, {"id": 91, "seek": 41656, "start": 417.24, "end": 420.84, "text": " This is something like an internal grant for CDR rates.", "tokens": [50398, 639, 307, 746, 411, 364, 6920, 6386, 337, 6743, 49, 6846, 13, 50578], "temperature": 0.0, "avg_logprob": -0.2433875431524259, "compression_ratio": 1.6988416988416988, "no_speech_prob": 0.04728090390563011}, {"id": 92, "seek": 41656, "start": 420.84, "end": 425.04, "text": " Clustering through remote, replication for internal cache and database.", "tokens": [50578, 2033, 48673, 807, 8607, 11, 39911, 337, 6920, 19459, 293, 8149, 13, 50788], "temperature": 0.0, "avg_logprob": -0.2433875431524259, "compression_ratio": 1.6988416988416988, "no_speech_prob": 0.04728090390563011}, {"id": 93, "seek": 41656, "start": 425.04, "end": 428.88, "text": " Data versioning with automatic migration.", "tokens": [50788, 11888, 3037, 278, 365, 12509, 17011, 13, 50980], "temperature": 0.0, "avg_logprob": -0.2433875431524259, "compression_ratio": 1.6988416988416988, "no_speech_prob": 0.04728090390563011}, {"id": 94, "seek": 41656, "start": 428.88, "end": 433.28, "text": " This is when you need to move between releases in the same branch.", "tokens": [50980, 639, 307, 562, 291, 643, 281, 1286, 1296, 16952, 294, 264, 912, 9819, 13, 51200], "temperature": 0.0, "avg_logprob": -0.2433875431524259, "compression_ratio": 1.6988416988416988, "no_speech_prob": 0.04728090390563011}, {"id": 95, "seek": 41656, "start": 433.28, "end": 435.68, "text": " You can do so with data migration.", "tokens": [51200, 509, 393, 360, 370, 365, 1412, 17011, 13, 51320], "temperature": 0.0, "avg_logprob": -0.2433875431524259, "compression_ratio": 1.6988416988416988, "no_speech_prob": 0.04728090390563011}, {"id": 96, "seek": 41656, "start": 435.68, "end": 440.44, "text": " You can have and we also do, we also are agile in developing new features.", "tokens": [51320, 509, 393, 362, 293, 321, 611, 360, 11, 321, 611, 366, 30072, 294, 6416, 777, 4122, 13, 51558], "temperature": 0.0, "avg_logprob": -0.2433875431524259, "compression_ratio": 1.6988416988416988, "no_speech_prob": 0.04728090390563011}, {"id": 97, "seek": 41656, "start": 440.44, "end": 445.44, "text": " So if you have some feature or some idea that you want to bring us, you are more than welcome", "tokens": [51558, 407, 498, 291, 362, 512, 4111, 420, 512, 1558, 300, 291, 528, 281, 1565, 505, 11, 291, 366, 544, 813, 2928, 51808], "temperature": 0.0, "avg_logprob": -0.2433875431524259, "compression_ratio": 1.6988416988416988, "no_speech_prob": 0.04728090390563011}, {"id": 98, "seek": 44544, "start": 445.44, "end": 447.92, "text": " to do so.", "tokens": [50364, 281, 360, 370, 13, 50488], "temperature": 0.0, "avg_logprob": -0.1503622666844782, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.01918935216963291}, {"id": 99, "seek": 44544, "start": 447.92, "end": 454.36, "text": " This is an internal schema or diagram that we have for CDRs.", "tokens": [50488, 639, 307, 364, 6920, 34078, 420, 10686, 300, 321, 362, 337, 6743, 49, 82, 13, 50810], "temperature": 0.0, "avg_logprob": -0.1503622666844782, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.01918935216963291}, {"id": 100, "seek": 44544, "start": 454.36, "end": 459.56, "text": " It basically shows how CDRs has its components and interfaces and how they communicate with", "tokens": [50810, 467, 1936, 3110, 577, 6743, 49, 82, 575, 1080, 6677, 293, 28416, 293, 577, 436, 7890, 365, 51070], "temperature": 0.0, "avg_logprob": -0.1503622666844782, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.01918935216963291}, {"id": 101, "seek": 44544, "start": 459.56, "end": 461.0, "text": " each other.", "tokens": [51070, 1184, 661, 13, 51142], "temperature": 0.0, "avg_logprob": -0.1503622666844782, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.01918935216963291}, {"id": 102, "seek": 44544, "start": 461.0, "end": 465.04, "text": " On your left side you can see all our interfaces.", "tokens": [51142, 1282, 428, 1411, 1252, 291, 393, 536, 439, 527, 28416, 13, 51344], "temperature": 0.0, "avg_logprob": -0.1503622666844782, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.01918935216963291}, {"id": 103, "seek": 44544, "start": 465.04, "end": 470.12, "text": " You might notice that we don't have open SIPs over there because open SIPs has its own", "tokens": [51344, 509, 1062, 3449, 300, 321, 500, 380, 362, 1269, 318, 9139, 82, 670, 456, 570, 1269, 318, 9139, 82, 575, 1080, 1065, 51598], "temperature": 0.0, "avg_logprob": -0.1503622666844782, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.01918935216963291}, {"id": 104, "seek": 44544, "start": 470.12, "end": 475.0, "text": " native module which is faster and better than anything we can do since it's native to open", "tokens": [51598, 8470, 10088, 597, 307, 4663, 293, 1101, 813, 1340, 321, 393, 360, 1670, 309, 311, 8470, 281, 1269, 51842], "temperature": 0.0, "avg_logprob": -0.1503622666844782, "compression_ratio": 1.6475409836065573, "no_speech_prob": 0.01918935216963291}, {"id": 105, "seek": 47500, "start": 475.04, "end": 477.24, "text": " SIPs.", "tokens": [50366, 318, 9139, 82, 13, 50476], "temperature": 0.0, "avg_logprob": -0.17335578238609994, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.011774305254220963}, {"id": 106, "seek": 47500, "start": 477.24, "end": 482.36, "text": " And if we take one example, for example DNS agent which is on your left, you can see", "tokens": [50476, 400, 498, 321, 747, 472, 1365, 11, 337, 1365, 35153, 9461, 597, 307, 322, 428, 1411, 11, 291, 393, 536, 50732], "temperature": 0.0, "avg_logprob": -0.17335578238609994, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.011774305254220963}, {"id": 107, "seek": 47500, "start": 482.36, "end": 486.4, "text": " that it communicates with sessions which is our main subsystem and through there it can", "tokens": [50732, 300, 309, 3363, 1024, 365, 11081, 597, 307, 527, 2135, 2090, 9321, 293, 807, 456, 309, 393, 50934], "temperature": 0.0, "avg_logprob": -0.17335578238609994, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.011774305254220963}, {"id": 108, "seek": 47500, "start": 486.4, "end": 491.48, "text": " communicate with every component or all components at all or one component.", "tokens": [50934, 7890, 365, 633, 6542, 420, 439, 6677, 412, 439, 420, 472, 6542, 13, 51188], "temperature": 0.0, "avg_logprob": -0.17335578238609994, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.011774305254220963}, {"id": 109, "seek": 47500, "start": 491.48, "end": 496.84, "text": " It's all dependent on what you want to do with CDRs.", "tokens": [51188, 467, 311, 439, 12334, 322, 437, 291, 528, 281, 360, 365, 6743, 49, 82, 13, 51456], "temperature": 0.0, "avg_logprob": -0.17335578238609994, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.011774305254220963}, {"id": 110, "seek": 47500, "start": 496.84, "end": 504.84, "text": " For some use cases, again online offline charging, you can have a highly configurable rating", "tokens": [51456, 1171, 512, 764, 3331, 11, 797, 2950, 21857, 11379, 11, 291, 393, 362, 257, 5405, 22192, 712, 10990, 51856], "temperature": 0.0, "avg_logprob": -0.17335578238609994, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.011774305254220963}, {"id": 111, "seek": 50484, "start": 505.0, "end": 511.0, "text": " bundle with voice, data, SMS, MS, monetary or anything else.", "tokens": [50372, 24438, 365, 3177, 11, 1412, 11, 38107, 11, 7395, 11, 26388, 420, 1340, 1646, 13, 50672], "temperature": 0.0, "avg_logprob": -0.22517157136724236, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.00894942693412304}, {"id": 112, "seek": 50484, "start": 511.0, "end": 514.68, "text": " In 1.0 you can really charge anything else.", "tokens": [50672, 682, 502, 13, 15, 291, 393, 534, 4602, 1340, 1646, 13, 50856], "temperature": 0.0, "avg_logprob": -0.22517157136724236, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.00894942693412304}, {"id": 113, "seek": 50484, "start": 514.68, "end": 520.0799999999999, "text": " You can have there concurrent sessions with concurrent sessions handling and also a centralized", "tokens": [50856, 509, 393, 362, 456, 37702, 11081, 365, 37702, 11081, 13175, 293, 611, 257, 32395, 51126], "temperature": 0.0, "avg_logprob": -0.22517157136724236, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.00894942693412304}, {"id": 114, "seek": 50484, "start": 520.0799999999999, "end": 521.88, "text": " CDR server.", "tokens": [51126, 6743, 49, 7154, 13, 51216], "temperature": 0.0, "avg_logprob": -0.22517157136724236, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.00894942693412304}, {"id": 115, "seek": 50484, "start": 521.88, "end": 528.24, "text": " And this all together is what others call online offline charging system.", "tokens": [51216, 400, 341, 439, 1214, 307, 437, 2357, 818, 2950, 21857, 11379, 1185, 13, 51534], "temperature": 0.0, "avg_logprob": -0.22517157136724236, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.00894942693412304}, {"id": 116, "seek": 50484, "start": 528.24, "end": 533.4399999999999, "text": " Another use case which you can do is a dynamic routing system where you can use the dedicated", "tokens": [51534, 3996, 764, 1389, 597, 291, 393, 360, 307, 257, 8546, 32722, 1185, 689, 291, 393, 764, 264, 8374, 51794], "temperature": 0.0, "avg_logprob": -0.22517157136724236, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.00894942693412304}, {"id": 117, "seek": 53344, "start": 533.48, "end": 538.8800000000001, "text": " subsystem for various routing strategies.", "tokens": [50366, 2090, 9321, 337, 3683, 32722, 9029, 13, 50636], "temperature": 0.0, "avg_logprob": -0.22151393621740206, "compression_ratio": 1.541237113402062, "no_speech_prob": 0.019342120736837387}, {"id": 118, "seek": 53344, "start": 538.8800000000001, "end": 545.8800000000001, "text": " There we can mention load balancing, the difference in our load balancers is that we cannot use", "tokens": [50636, 821, 321, 393, 2152, 3677, 22495, 11, 264, 2649, 294, 527, 3677, 3119, 4463, 433, 307, 300, 321, 2644, 764, 50986], "temperature": 0.0, "avg_logprob": -0.22151393621740206, "compression_ratio": 1.541237113402062, "no_speech_prob": 0.019342120736837387}, {"id": 119, "seek": 53344, "start": 545.8800000000001, "end": 551.96, "text": " setups but only real calls since we get that information out of CDRs.", "tokens": [50986, 46832, 457, 787, 957, 5498, 1670, 321, 483, 300, 1589, 484, 295, 6743, 49, 82, 13, 51290], "temperature": 0.0, "avg_logprob": -0.22151393621740206, "compression_ratio": 1.541237113402062, "no_speech_prob": 0.019342120736837387}, {"id": 120, "seek": 53344, "start": 551.96, "end": 558.96, "text": " Also you can have LRN support via attributes, bundle support routing systems, quality based", "tokens": [51290, 2743, 291, 393, 362, 441, 49, 45, 1406, 5766, 17212, 11, 24438, 1406, 32722, 3652, 11, 3125, 2361, 51640], "temperature": 0.0, "avg_logprob": -0.22151393621740206, "compression_ratio": 1.541237113402062, "no_speech_prob": 0.019342120736837387}, {"id": 121, "seek": 55896, "start": 559.96, "end": 566.5600000000001, "text": " stats monitoring with thresholds and also load balancer which I mentioned.", "tokens": [50414, 18152, 11028, 365, 14678, 82, 293, 611, 3677, 3119, 28347, 597, 286, 2835, 13, 50744], "temperature": 0.0, "avg_logprob": -0.23530943800763385, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.011782556772232056}, {"id": 122, "seek": 55896, "start": 566.5600000000001, "end": 571.9200000000001, "text": " Now to get to the INOM LCR server that the topic is for.", "tokens": [50744, 823, 281, 483, 281, 264, 6892, 5251, 441, 18547, 7154, 300, 264, 4829, 307, 337, 13, 51012], "temperature": 0.0, "avg_logprob": -0.23530943800763385, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.011782556772232056}, {"id": 123, "seek": 55896, "start": 571.9200000000001, "end": 577.5600000000001, "text": " Firstly we need to know about DNS, probably most of you know but DNS is something like", "tokens": [51012, 20042, 321, 643, 281, 458, 466, 35153, 11, 1391, 881, 295, 291, 458, 457, 35153, 307, 746, 411, 51294], "temperature": 0.0, "avg_logprob": -0.23530943800763385, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.011782556772232056}, {"id": 124, "seek": 55896, "start": 577.5600000000001, "end": 584.1600000000001, "text": " an internet address book where you query for something and you get information back specific", "tokens": [51294, 364, 4705, 2985, 1446, 689, 291, 14581, 337, 746, 293, 291, 483, 1589, 646, 2685, 51624], "temperature": 0.0, "avg_logprob": -0.23530943800763385, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.011782556772232056}, {"id": 125, "seek": 55896, "start": 584.1600000000001, "end": 586.96, "text": " to that what you question for.", "tokens": [51624, 281, 300, 437, 291, 1168, 337, 13, 51764], "temperature": 0.0, "avg_logprob": -0.23530943800763385, "compression_ratio": 1.5336322869955157, "no_speech_prob": 0.011782556772232056}, {"id": 126, "seek": 58696, "start": 586.96, "end": 592.12, "text": " Depending on your answer the answer is categorized in some record types.", "tokens": [50364, 22539, 322, 428, 1867, 264, 1867, 307, 19250, 1602, 294, 512, 2136, 3467, 13, 50622], "temperature": 0.0, "avg_logprob": -0.21802129243549548, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.14192211627960205}, {"id": 127, "seek": 58696, "start": 592.12, "end": 598.48, "text": " There's a couple but we only work with these three, A-Type, SRV type and NEP type records.", "tokens": [50622, 821, 311, 257, 1916, 457, 321, 787, 589, 365, 613, 1045, 11, 316, 12, 22464, 494, 11, 20840, 53, 2010, 293, 426, 8929, 2010, 7724, 13, 50940], "temperature": 0.0, "avg_logprob": -0.21802129243549548, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.14192211627960205}, {"id": 128, "seek": 58696, "start": 598.48, "end": 604.36, "text": " We work only with this because that's what most people need and nobody has really asked", "tokens": [50940, 492, 589, 787, 365, 341, 570, 300, 311, 437, 881, 561, 643, 293, 5079, 575, 534, 2351, 51234], "temperature": 0.0, "avg_logprob": -0.21802129243549548, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.14192211627960205}, {"id": 129, "seek": 58696, "start": 604.36, "end": 606.88, "text": " for anything more than this.", "tokens": [51234, 337, 1340, 544, 813, 341, 13, 51360], "temperature": 0.0, "avg_logprob": -0.21802129243549548, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.14192211627960205}, {"id": 130, "seek": 58696, "start": 606.88, "end": 613.88, "text": " To shortly describe them A-Type records convert domain addresses into IPv4 addresses, SRV", "tokens": [51360, 1407, 13392, 6786, 552, 316, 12, 22464, 494, 7724, 7620, 9274, 16862, 666, 8671, 85, 19, 16862, 11, 20840, 53, 51710], "temperature": 0.0, "avg_logprob": -0.21802129243549548, "compression_ratio": 1.5677966101694916, "no_speech_prob": 0.14192211627960205}, {"id": 131, "seek": 61388, "start": 614.72, "end": 617.76, "text": " records for network servicing.", "tokens": [50406, 7724, 337, 3209, 1658, 5776, 13, 50558], "temperature": 0.0, "avg_logprob": -0.2895526228279903, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.01779852621257305}, {"id": 132, "seek": 61388, "start": 617.76, "end": 624.76, "text": " You can find priority, weight, port, targets from your SIP addresses and most importantly", "tokens": [50558, 509, 393, 915, 9365, 11, 3364, 11, 2436, 11, 12911, 490, 428, 318, 9139, 16862, 293, 881, 8906, 50908], "temperature": 0.0, "avg_logprob": -0.2895526228279903, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.01779852621257305}, {"id": 133, "seek": 61388, "start": 625.0, "end": 632.0, "text": " in NEPTR records which convert INOM addresses, INOMs into IP addresses.", "tokens": [50920, 294, 426, 8929, 25936, 7724, 597, 7620, 6892, 5251, 16862, 11, 6892, 5251, 82, 666, 8671, 16862, 13, 51270], "temperature": 0.0, "avg_logprob": -0.2895526228279903, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.01779852621257305}, {"id": 134, "seek": 61388, "start": 637.52, "end": 638.82, "text": " But what is INOM?", "tokens": [51546, 583, 437, 307, 6892, 5251, 30, 51611], "temperature": 0.0, "avg_logprob": -0.2895526228279903, "compression_ratio": 1.3548387096774193, "no_speech_prob": 0.01779852621257305}, {"id": 135, "seek": 63882, "start": 638.9000000000001, "end": 643.4200000000001, "text": " INOM is basically a standard to translate telephone numbers into your eyes.", "tokens": [50368, 6892, 5251, 307, 1936, 257, 3832, 281, 13799, 19800, 3547, 666, 428, 2575, 13, 50594], "temperature": 0.0, "avg_logprob": -0.20709798850265204, "compression_ratio": 1.6919831223628692, "no_speech_prob": 0.06786540150642395}, {"id": 136, "seek": 63882, "start": 643.4200000000001, "end": 645.62, "text": " Here's an example how you can do that.", "tokens": [50594, 1692, 311, 364, 1365, 577, 291, 393, 360, 300, 13, 50704], "temperature": 0.0, "avg_logprob": -0.20709798850265204, "compression_ratio": 1.6919831223628692, "no_speech_prob": 0.06786540150642395}, {"id": 137, "seek": 63882, "start": 645.62, "end": 648.86, "text": " Firstly you need an E164 number.", "tokens": [50704, 20042, 291, 643, 364, 462, 6866, 19, 1230, 13, 50866], "temperature": 0.0, "avg_logprob": -0.20709798850265204, "compression_ratio": 1.6919831223628692, "no_speech_prob": 0.06786540150642395}, {"id": 138, "seek": 63882, "start": 648.86, "end": 655.86, "text": " You can convert your number into an E164 number by firstly removing any leading zero before", "tokens": [50866, 509, 393, 7620, 428, 1230, 666, 364, 462, 6866, 19, 1230, 538, 27376, 12720, 604, 5775, 4018, 949, 51216], "temperature": 0.0, "avg_logprob": -0.20709798850265204, "compression_ratio": 1.6919831223628692, "no_speech_prob": 0.06786540150642395}, {"id": 139, "seek": 63882, "start": 657.22, "end": 662.82, "text": " it and also adding your country code after it and with a plus at the end.", "tokens": [51284, 309, 293, 611, 5127, 428, 1941, 3089, 934, 309, 293, 365, 257, 1804, 412, 264, 917, 13, 51564], "temperature": 0.0, "avg_logprob": -0.20709798850265204, "compression_ratio": 1.6919831223628692, "no_speech_prob": 0.06786540150642395}, {"id": 140, "seek": 63882, "start": 662.82, "end": 668.62, "text": " Then to convert this INOM 164 number into an INOM number you have to remove the leading", "tokens": [51564, 1396, 281, 7620, 341, 6892, 5251, 3165, 19, 1230, 666, 364, 6892, 5251, 1230, 291, 362, 281, 4159, 264, 5775, 51854], "temperature": 0.0, "avg_logprob": -0.20709798850265204, "compression_ratio": 1.6919831223628692, "no_speech_prob": 0.06786540150642395}, {"id": 141, "seek": 66862, "start": 668.62, "end": 675.58, "text": " plus, reverse all the digits, add a dot between each digit and then add a suffix.", "tokens": [50364, 1804, 11, 9943, 439, 264, 27011, 11, 909, 257, 5893, 1296, 1184, 14293, 293, 550, 909, 257, 3889, 970, 13, 50712], "temperature": 0.0, "avg_logprob": -0.26082067380006285, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0151554886251688}, {"id": 142, "seek": 66862, "start": 675.58, "end": 682.58, "text": " This suffix, the one you have in this example is from RFC standards but in C-Drates we don't", "tokens": [50712, 639, 3889, 970, 11, 264, 472, 291, 362, 294, 341, 1365, 307, 490, 497, 18671, 7787, 457, 294, 383, 12, 35, 12507, 321, 500, 380, 51062], "temperature": 0.0, "avg_logprob": -0.26082067380006285, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0151554886251688}, {"id": 143, "seek": 66862, "start": 683.38, "end": 687.66, "text": " really care what you put in your suffix.", "tokens": [51102, 534, 1127, 437, 291, 829, 294, 428, 3889, 970, 13, 51316], "temperature": 0.0, "avg_logprob": -0.26082067380006285, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0151554886251688}, {"id": 144, "seek": 66862, "start": 687.66, "end": 693.74, "text": " In my example even I even replaced this ARPA later with the account string that I will", "tokens": [51316, 682, 452, 1365, 754, 286, 754, 10772, 341, 8943, 10297, 1780, 365, 264, 2696, 6798, 300, 286, 486, 51620], "temperature": 0.0, "avg_logprob": -0.26082067380006285, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0151554886251688}, {"id": 145, "seek": 66862, "start": 693.74, "end": 697.1800000000001, "text": " use.", "tokens": [51620, 764, 13, 51792], "temperature": 0.0, "avg_logprob": -0.26082067380006285, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.0151554886251688}, {"id": 146, "seek": 69718, "start": 697.18, "end": 704.18, "text": " For DNS agent I also mentioned earlier it's an interface, it's like a middleware where", "tokens": [50364, 1171, 35153, 9461, 286, 611, 2835, 3071, 309, 311, 364, 9226, 11, 309, 311, 411, 257, 2808, 3039, 689, 50714], "temperature": 0.0, "avg_logprob": -0.25499898959428835, "compression_ratio": 1.69, "no_speech_prob": 0.06876355409622192}, {"id": 147, "seek": 69718, "start": 704.9799999999999, "end": 711.9799999999999, "text": " your DNS client communicates with DNS agent and then sends that information, that request", "tokens": [50754, 428, 35153, 6423, 3363, 1024, 365, 35153, 9461, 293, 550, 14790, 300, 1589, 11, 300, 5308, 51104], "temperature": 0.0, "avg_logprob": -0.25499898959428835, "compression_ratio": 1.69, "no_speech_prob": 0.06876355409622192}, {"id": 148, "seek": 69718, "start": 713.06, "end": 720.06, "text": " to the DNS server and then from there maybe you can see from the schema.", "tokens": [51158, 281, 264, 35153, 7154, 293, 550, 490, 456, 1310, 291, 393, 536, 490, 264, 34078, 13, 51508], "temperature": 0.0, "avg_logprob": -0.25499898959428835, "compression_ratio": 1.69, "no_speech_prob": 0.06876355409622192}, {"id": 149, "seek": 69718, "start": 720.26, "end": 726.38, "text": " From there you can go into sessions and any component it can take any component and then", "tokens": [51518, 3358, 456, 291, 393, 352, 666, 11081, 293, 604, 6542, 309, 393, 747, 604, 6542, 293, 550, 51824], "temperature": 0.0, "avg_logprob": -0.25499898959428835, "compression_ratio": 1.69, "no_speech_prob": 0.06876355409622192}, {"id": 150, "seek": 72638, "start": 726.38, "end": 732.7, "text": " give that information back to the DNS client.", "tokens": [50364, 976, 300, 1589, 646, 281, 264, 35153, 6423, 13, 50680], "temperature": 0.0, "avg_logprob": -0.1443114349807518, "compression_ratio": 1.778443113772455, "no_speech_prob": 0.026272514835000038}, {"id": 151, "seek": 72638, "start": 732.7, "end": 737.5, "text": " In terms of capability you can have as many listeners as you want.", "tokens": [50680, 682, 2115, 295, 13759, 291, 393, 362, 382, 867, 23274, 382, 291, 528, 13, 50920], "temperature": 0.0, "avg_logprob": -0.1443114349807518, "compression_ratio": 1.778443113772455, "no_speech_prob": 0.026272514835000038}, {"id": 152, "seek": 72638, "start": 737.5, "end": 744.5, "text": " Also to mention in DNS agent we also implemented our DNS server and DNS service and listeners", "tokens": [50920, 2743, 281, 2152, 294, 35153, 9461, 321, 611, 12270, 527, 35153, 7154, 293, 35153, 2643, 293, 23274, 51270], "temperature": 0.0, "avg_logprob": -0.1443114349807518, "compression_ratio": 1.778443113772455, "no_speech_prob": 0.026272514835000038}, {"id": 153, "seek": 72638, "start": 745.78, "end": 751.9, "text": " and for listeners you can have as many listeners as you want and they can all be opened at", "tokens": [51334, 293, 337, 23274, 291, 393, 362, 382, 867, 23274, 382, 291, 528, 293, 436, 393, 439, 312, 5625, 412, 51640], "temperature": 0.0, "avg_logprob": -0.1443114349807518, "compression_ratio": 1.778443113772455, "no_speech_prob": 0.026272514835000038}, {"id": 154, "seek": 75190, "start": 751.9, "end": 758.9, "text": " the same time. You can have UDP, TCP and TLS protocols and this means it is highly configurable", "tokens": [50364, 264, 912, 565, 13, 509, 393, 362, 624, 11373, 11, 48965, 293, 314, 19198, 20618, 293, 341, 1355, 309, 307, 5405, 22192, 712, 50714], "temperature": 0.0, "avg_logprob": -0.19424869032467112, "compression_ratio": 1.4124293785310735, "no_speech_prob": 0.013123895041644573}, {"id": 155, "seek": 75190, "start": 759.78, "end": 762.4599999999999, "text": " and concurrent.", "tokens": [50758, 293, 37702, 13, 50892], "temperature": 0.0, "avg_logprob": -0.19424869032467112, "compression_ratio": 1.4124293785310735, "no_speech_prob": 0.013123895041644573}, {"id": 156, "seek": 75190, "start": 762.4599999999999, "end": 768.42, "text": " Again for query types we support ASRV and NAPTR.", "tokens": [50892, 3764, 337, 14581, 3467, 321, 1406, 7469, 49, 53, 293, 426, 4715, 25936, 13, 51190], "temperature": 0.0, "avg_logprob": -0.19424869032467112, "compression_ratio": 1.4124293785310735, "no_speech_prob": 0.013123895041644573}, {"id": 157, "seek": 75190, "start": 768.42, "end": 775.42, "text": " For configuration this is in your configuration files. You need to open a new field, name", "tokens": [51190, 1171, 11694, 341, 307, 294, 428, 11694, 7098, 13, 509, 643, 281, 1269, 257, 777, 2519, 11, 1315, 51540], "temperature": 0.0, "avg_logprob": -0.19424869032467112, "compression_ratio": 1.4124293785310735, "no_speech_prob": 0.013123895041644573}, {"id": 158, "seek": 77542, "start": 776.42, "end": 783.42, "text": " it DNS agent, also this is JSON, everything is JSON in configuration.", "tokens": [50414, 309, 35153, 9461, 11, 611, 341, 307, 31828, 11, 1203, 307, 31828, 294, 11694, 13, 50764], "temperature": 0.0, "avg_logprob": -0.28636705702629645, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.034410104155540466}, {"id": 159, "seek": 77542, "start": 783.42, "end": 790.42, "text": " Name a new field DNS agent, enable it, by enabling it you allow it to receive and to", "tokens": [50764, 13866, 257, 777, 2519, 35153, 9461, 11, 9528, 309, 11, 538, 23148, 309, 291, 2089, 309, 281, 4774, 293, 281, 51114], "temperature": 0.0, "avg_logprob": -0.28636705702629645, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.034410104155540466}, {"id": 160, "seek": 77542, "start": 792.4599999999999, "end": 795.66, "text": " send API calls.", "tokens": [51216, 2845, 9362, 5498, 13, 51376], "temperature": 0.0, "avg_logprob": -0.28636705702629645, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.034410104155540466}, {"id": 161, "seek": 77542, "start": 795.66, "end": 800.66, "text": " Then you name listeners where again you can see that it's a list so you can have as many", "tokens": [51376, 1396, 291, 1315, 23274, 689, 797, 291, 393, 536, 300, 309, 311, 257, 1329, 370, 291, 393, 362, 382, 867, 51626], "temperature": 0.0, "avg_logprob": -0.28636705702629645, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.034410104155540466}, {"id": 162, "seek": 80066, "start": 800.6999999999999, "end": 802.74, "text": " listeners as you want.", "tokens": [50366, 23274, 382, 291, 528, 13, 50468], "temperature": 0.0, "avg_logprob": -0.24142765469021268, "compression_ratio": 1.5226130653266332, "no_speech_prob": 0.07283703237771988}, {"id": 163, "seek": 80066, "start": 802.74, "end": 806.3, "text": " You name your address by giving it an IP and a port.", "tokens": [50468, 509, 1315, 428, 2985, 538, 2902, 309, 364, 8671, 293, 257, 2436, 13, 50646], "temperature": 0.0, "avg_logprob": -0.24142765469021268, "compression_ratio": 1.5226130653266332, "no_speech_prob": 0.07283703237771988}, {"id": 164, "seek": 80066, "start": 806.3, "end": 813.3, "text": " In my case I use an empty IP since if it's sent by default in CJA we put what's in defaults", "tokens": [50646, 682, 452, 1389, 286, 764, 364, 6707, 8671, 1670, 498, 309, 311, 2279, 538, 7576, 294, 383, 27818, 321, 829, 437, 311, 294, 7576, 82, 50996], "temperature": 0.0, "avg_logprob": -0.24142765469021268, "compression_ratio": 1.5226130653266332, "no_speech_prob": 0.07283703237771988}, {"id": 165, "seek": 80066, "start": 815.14, "end": 818.74, "text": " and in this case in default is just localhost.", "tokens": [51088, 293, 294, 341, 1389, 294, 7576, 307, 445, 2654, 6037, 13, 51268], "temperature": 0.0, "avg_logprob": -0.24142765469021268, "compression_ratio": 1.5226130653266332, "no_speech_prob": 0.07283703237771988}, {"id": 166, "seek": 80066, "start": 818.74, "end": 821.54, "text": " For port I put 2053.", "tokens": [51268, 1171, 2436, 286, 829, 945, 19584, 13, 51408], "temperature": 0.0, "avg_logprob": -0.24142765469021268, "compression_ratio": 1.5226130653266332, "no_speech_prob": 0.07283703237771988}, {"id": 167, "seek": 80066, "start": 821.54, "end": 826.54, "text": " If left empty again this will be filled by the default which is 53.", "tokens": [51408, 759, 1411, 6707, 797, 341, 486, 312, 6412, 538, 264, 7576, 597, 307, 21860, 13, 51658], "temperature": 0.0, "avg_logprob": -0.24142765469021268, "compression_ratio": 1.5226130653266332, "no_speech_prob": 0.07283703237771988}, {"id": 168, "seek": 82654, "start": 826.54, "end": 830.42, "text": " And for that address I need to attach it a network.", "tokens": [50364, 400, 337, 300, 2985, 286, 643, 281, 5085, 309, 257, 3209, 13, 50558], "temperature": 0.0, "avg_logprob": -0.17524649587909827, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.006740945857018232}, {"id": 169, "seek": 82654, "start": 830.42, "end": 837.42, "text": " On this case I use the UDP protocol and again if left empty again it will be on UDP by default.", "tokens": [50558, 1282, 341, 1389, 286, 764, 264, 624, 11373, 10336, 293, 797, 498, 1411, 6707, 797, 309, 486, 312, 322, 624, 11373, 538, 7576, 13, 50908], "temperature": 0.0, "avg_logprob": -0.17524649587909827, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.006740945857018232}, {"id": 170, "seek": 82654, "start": 838.9, "end": 843.9, "text": " After that I want to also be open to TCP listeners.", "tokens": [50982, 2381, 300, 286, 528, 281, 611, 312, 1269, 281, 48965, 23274, 13, 51232], "temperature": 0.0, "avg_logprob": -0.17524649587909827, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.006740945857018232}, {"id": 171, "seek": 82654, "start": 843.9, "end": 849.98, "text": " That's why I create the same address but this time I changed the protocol.", "tokens": [51232, 663, 311, 983, 286, 1884, 264, 912, 2985, 457, 341, 565, 286, 3105, 264, 10336, 13, 51536], "temperature": 0.0, "avg_logprob": -0.17524649587909827, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.006740945857018232}, {"id": 172, "seek": 82654, "start": 849.98, "end": 853.4599999999999, "text": " This doesn't mean that either one or the other will work.", "tokens": [51536, 639, 1177, 380, 914, 300, 2139, 472, 420, 264, 661, 486, 589, 13, 51710], "temperature": 0.0, "avg_logprob": -0.17524649587909827, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.006740945857018232}, {"id": 173, "seek": 85346, "start": 853.5400000000001, "end": 857.5400000000001, "text": " It means that both of them will work at the same time.", "tokens": [50368, 467, 1355, 300, 1293, 295, 552, 486, 589, 412, 264, 912, 565, 13, 50568], "temperature": 0.0, "avg_logprob": -0.2004684934429094, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.015851233154535294}, {"id": 174, "seek": 85346, "start": 857.5400000000001, "end": 861.1, "text": " There's something messed up over there.", "tokens": [50568, 821, 311, 746, 16507, 493, 670, 456, 13, 50746], "temperature": 0.0, "avg_logprob": -0.2004684934429094, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.015851233154535294}, {"id": 175, "seek": 85346, "start": 861.1, "end": 863.62, "text": " They should be on the same line for the last one.", "tokens": [50746, 814, 820, 312, 322, 264, 912, 1622, 337, 264, 1036, 472, 13, 50872], "temperature": 0.0, "avg_logprob": -0.2004684934429094, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.015851233154535294}, {"id": 176, "seek": 85346, "start": 863.62, "end": 869.1800000000001, "text": " The address for TLS since I cannot have TLS and TCP on the same address I can put it", "tokens": [50872, 440, 2985, 337, 314, 19198, 1670, 286, 2644, 362, 314, 19198, 293, 48965, 322, 264, 912, 2985, 286, 393, 829, 309, 51150], "temperature": 0.0, "avg_logprob": -0.2004684934429094, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.015851233154535294}, {"id": 177, "seek": 85346, "start": 869.1800000000001, "end": 872.1800000000001, "text": " in a different port for this example.", "tokens": [51150, 294, 257, 819, 2436, 337, 341, 1365, 13, 51300], "temperature": 0.0, "avg_logprob": -0.2004684934429094, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.015851233154535294}, {"id": 178, "seek": 85346, "start": 872.1800000000001, "end": 878.38, "text": " And after you finish with listeners you go to connect your DNS agent with sessions and", "tokens": [51300, 400, 934, 291, 2413, 365, 23274, 291, 352, 281, 1745, 428, 35153, 9461, 365, 11081, 293, 51610], "temperature": 0.0, "avg_logprob": -0.2004684934429094, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.015851233154535294}, {"id": 179, "seek": 85346, "start": 878.38, "end": 881.14, "text": " you do that by using session cons.", "tokens": [51610, 291, 360, 300, 538, 1228, 5481, 1014, 13, 51748], "temperature": 0.0, "avg_logprob": -0.2004684934429094, "compression_ratio": 1.634453781512605, "no_speech_prob": 0.015851233154535294}, {"id": 180, "seek": 88114, "start": 881.14, "end": 887.42, "text": " You can have either localhost, internal or some configurable other connection which is", "tokens": [50364, 509, 393, 362, 2139, 2654, 6037, 11, 6920, 420, 512, 22192, 712, 661, 4984, 597, 307, 50678], "temperature": 0.0, "avg_logprob": -0.15130973142736098, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.019843481481075287}, {"id": 181, "seek": 88114, "start": 887.42, "end": 889.14, "text": " done by you.", "tokens": [50678, 1096, 538, 291, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15130973142736098, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.019843481481075287}, {"id": 182, "seek": 88114, "start": 889.14, "end": 894.74, "text": " I use in this case localhost since I want to track the network, the packets going through", "tokens": [50764, 286, 764, 294, 341, 1389, 2654, 6037, 1670, 286, 528, 281, 2837, 264, 3209, 11, 264, 30364, 516, 807, 51044], "temperature": 0.0, "avg_logprob": -0.15130973142736098, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.019843481481075287}, {"id": 183, "seek": 88114, "start": 894.74, "end": 897.38, "text": " sessions and DNS agent.", "tokens": [51044, 11081, 293, 35153, 9461, 13, 51176], "temperature": 0.0, "avg_logprob": -0.15130973142736098, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.019843481481075287}, {"id": 184, "seek": 88114, "start": 897.38, "end": 903.62, "text": " You can switch it with internal if you want to have a faster connection or if you do not", "tokens": [51176, 509, 393, 3679, 309, 365, 6920, 498, 291, 528, 281, 362, 257, 4663, 4984, 420, 498, 291, 360, 406, 51488], "temperature": 0.0, "avg_logprob": -0.15130973142736098, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.019843481481075287}, {"id": 185, "seek": 88114, "start": 903.62, "end": 909.54, "text": " need this debugging, this packet tracing.", "tokens": [51488, 643, 341, 45592, 11, 341, 20300, 25262, 13, 51784], "temperature": 0.0, "avg_logprob": -0.15130973142736098, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.019843481481075287}, {"id": 186, "seek": 90954, "start": 909.54, "end": 914.06, "text": " Just on that same DNS agent field you put request processors.", "tokens": [50364, 1449, 322, 300, 912, 35153, 9461, 2519, 291, 829, 5308, 27751, 13, 50590], "temperature": 0.0, "avg_logprob": -0.23446617628398694, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0291515551507473}, {"id": 187, "seek": 90954, "start": 914.06, "end": 921.18, "text": " To short explain request processors do the logic of what's going to happen after a query", "tokens": [50590, 1407, 2099, 2903, 5308, 27751, 360, 264, 9952, 295, 437, 311, 516, 281, 1051, 934, 257, 14581, 50946], "temperature": 0.0, "avg_logprob": -0.23446617628398694, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0291515551507473}, {"id": 188, "seek": 90954, "start": 921.18, "end": 923.62, "text": " is done to your server.", "tokens": [50946, 307, 1096, 281, 428, 7154, 13, 51068], "temperature": 0.0, "avg_logprob": -0.23446617628398694, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0291515551507473}, {"id": 189, "seek": 90954, "start": 923.62, "end": 926.2199999999999, "text": " In this case you can have many request processors.", "tokens": [51068, 682, 341, 1389, 291, 393, 362, 867, 5308, 27751, 13, 51198], "temperature": 0.0, "avg_logprob": -0.23446617628398694, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0291515551507473}, {"id": 190, "seek": 90954, "start": 926.2199999999999, "end": 929.86, "text": " In this case I'm only showing one.", "tokens": [51198, 682, 341, 1389, 286, 478, 787, 4099, 472, 13, 51380], "temperature": 0.0, "avg_logprob": -0.23446617628398694, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0291515551507473}, {"id": 191, "seek": 90954, "start": 929.86, "end": 932.6999999999999, "text": " And this is what happens with it.", "tokens": [51380, 400, 341, 307, 437, 2314, 365, 309, 13, 51522], "temperature": 0.0, "avg_logprob": -0.23446617628398694, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0291515551507473}, {"id": 192, "seek": 93270, "start": 932.7, "end": 939.82, "text": " First we define an ID for it which has to be different from other request processors.", "tokens": [50364, 2386, 321, 6964, 364, 7348, 337, 309, 597, 575, 281, 312, 819, 490, 661, 5308, 27751, 13, 50720], "temperature": 0.0, "avg_logprob": -0.18909212569115866, "compression_ratio": 1.5166666666666666, "no_speech_prob": 0.09474136680364609}, {"id": 193, "seek": 93270, "start": 939.82, "end": 942.3000000000001, "text": " It doesn't matter what you put inside, it just has to be different.", "tokens": [50720, 467, 1177, 380, 1871, 437, 291, 829, 1854, 11, 309, 445, 575, 281, 312, 819, 13, 50844], "temperature": 0.0, "avg_logprob": -0.18909212569115866, "compression_ratio": 1.5166666666666666, "no_speech_prob": 0.09474136680364609}, {"id": 194, "seek": 93270, "start": 942.3000000000001, "end": 949.94, "text": " So in this case I'm describing what I do in this process which is NAPTR list cost route.", "tokens": [50844, 407, 294, 341, 1389, 286, 478, 16141, 437, 286, 360, 294, 341, 1399, 597, 307, 426, 4715, 25936, 1329, 2063, 7955, 13, 51226], "temperature": 0.0, "avg_logprob": -0.18909212569115866, "compression_ratio": 1.5166666666666666, "no_speech_prob": 0.09474136680364609}, {"id": 195, "seek": 93270, "start": 949.94, "end": 953.7, "text": " After that you define filters.", "tokens": [51226, 2381, 300, 291, 6964, 15995, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18909212569115866, "compression_ratio": 1.5166666666666666, "no_speech_prob": 0.09474136680364609}, {"id": 196, "seek": 95370, "start": 953.7, "end": 963.7, "text": " Because I want to find the list cost route to find a Cp address for my query.", "tokens": [50364, 1436, 286, 528, 281, 915, 264, 1329, 2063, 7955, 281, 915, 257, 383, 79, 2985, 337, 452, 14581, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2445652384153554, "compression_ratio": 1.4114285714285715, "no_speech_prob": 0.10695774108171463}, {"id": 197, "seek": 95370, "start": 963.7, "end": 973.5400000000001, "text": " I first need to be sure that the query type is in NAPTR and that the leading country code", "tokens": [50864, 286, 700, 643, 281, 312, 988, 300, 264, 14581, 2010, 307, 294, 426, 4715, 25936, 293, 300, 264, 5775, 1941, 3089, 51356], "temperature": 0.0, "avg_logprob": -0.2445652384153554, "compression_ratio": 1.4114285714285715, "no_speech_prob": 0.10695774108171463}, {"id": 198, "seek": 95370, "start": 973.5400000000001, "end": 974.5400000000001, "text": " starts with 32.", "tokens": [51356, 3719, 365, 8858, 13, 51406], "temperature": 0.0, "avg_logprob": -0.2445652384153554, "compression_ratio": 1.4114285714285715, "no_speech_prob": 0.10695774108171463}, {"id": 199, "seek": 95370, "start": 974.5400000000001, "end": 976.22, "text": " This is just an example.", "tokens": [51406, 639, 307, 445, 364, 1365, 13, 51490], "temperature": 0.0, "avg_logprob": -0.2445652384153554, "compression_ratio": 1.4114285714285715, "no_speech_prob": 0.10695774108171463}, {"id": 200, "seek": 95370, "start": 976.22, "end": 979.4200000000001, "text": " You can have any filter that you want.", "tokens": [51490, 509, 393, 362, 604, 6608, 300, 291, 528, 13, 51650], "temperature": 0.0, "avg_logprob": -0.2445652384153554, "compression_ratio": 1.4114285714285715, "no_speech_prob": 0.10695774108171463}, {"id": 201, "seek": 97942, "start": 979.42, "end": 986.0999999999999, "text": " The first filter asks the query type from the request if it's a full NAPTR string.", "tokens": [50364, 440, 700, 6608, 8962, 264, 14581, 2010, 490, 264, 5308, 498, 309, 311, 257, 1577, 426, 4715, 25936, 6798, 13, 50698], "temperature": 0.0, "avg_logprob": -0.12254487862021236, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.04551863297820091}, {"id": 202, "seek": 97942, "start": 986.0999999999999, "end": 990.6999999999999, "text": " And if that's true it goes to the second filter which finds if there's a prefix starting", "tokens": [50698, 400, 498, 300, 311, 2074, 309, 1709, 281, 264, 1150, 6608, 597, 10704, 498, 456, 311, 257, 46969, 2891, 50928], "temperature": 0.0, "avg_logprob": -0.12254487862021236, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.04551863297820091}, {"id": 203, "seek": 97942, "start": 990.6999999999999, "end": 994.86, "text": " in that query name that starts with 32.", "tokens": [50928, 294, 300, 14581, 1315, 300, 3719, 365, 8858, 13, 51136], "temperature": 0.0, "avg_logprob": -0.12254487862021236, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.04551863297820091}, {"id": 204, "seek": 97942, "start": 994.86, "end": 1000.26, "text": " And before it does that it converts that in number into E164.", "tokens": [51136, 400, 949, 309, 775, 300, 309, 38874, 300, 294, 1230, 666, 462, 6866, 19, 13, 51406], "temperature": 0.0, "avg_logprob": -0.12254487862021236, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.04551863297820091}, {"id": 205, "seek": 97942, "start": 1000.26, "end": 1001.38, "text": " And that's done with filters.", "tokens": [51406, 400, 300, 311, 1096, 365, 15995, 13, 51462], "temperature": 0.0, "avg_logprob": -0.12254487862021236, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.04551863297820091}, {"id": 206, "seek": 97942, "start": 1001.38, "end": 1005.0999999999999, "text": " If those are true it goes to the next one which are the flags.", "tokens": [51462, 759, 729, 366, 2074, 309, 1709, 281, 264, 958, 472, 597, 366, 264, 23265, 13, 51648], "temperature": 0.0, "avg_logprob": -0.12254487862021236, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.04551863297820091}, {"id": 207, "seek": 97942, "start": 1005.0999999999999, "end": 1008.66, "text": " In my case I want to create an event each time this query is being made.", "tokens": [51648, 682, 452, 1389, 286, 528, 281, 1884, 364, 2280, 1184, 565, 341, 14581, 307, 885, 1027, 13, 51826], "temperature": 0.0, "avg_logprob": -0.12254487862021236, "compression_ratio": 1.7283464566929134, "no_speech_prob": 0.04551863297820091}, {"id": 208, "seek": 100866, "start": 1008.66, "end": 1015.86, "text": " So I put there meta event which calls an API for sessions process event.", "tokens": [50364, 407, 286, 829, 456, 19616, 2280, 597, 5498, 364, 9362, 337, 11081, 1399, 2280, 13, 50724], "temperature": 0.0, "avg_logprob": -0.19638850348336356, "compression_ratio": 1.6257668711656441, "no_speech_prob": 0.09076051414012909}, {"id": 209, "seek": 100866, "start": 1015.86, "end": 1018.3399999999999, "text": " Each time this query is true.", "tokens": [50724, 6947, 565, 341, 14581, 307, 2074, 13, 50848], "temperature": 0.0, "avg_logprob": -0.19638850348336356, "compression_ratio": 1.6257668711656441, "no_speech_prob": 0.09076051414012909}, {"id": 210, "seek": 100866, "start": 1018.3399999999999, "end": 1024.54, "text": " And I also put routes authorized because I want to get the max usage when the query is", "tokens": [50848, 400, 286, 611, 829, 18242, 28312, 570, 286, 528, 281, 483, 264, 11469, 14924, 562, 264, 14581, 307, 51158], "temperature": 0.0, "avg_logprob": -0.19638850348336356, "compression_ratio": 1.6257668711656441, "no_speech_prob": 0.09076051414012909}, {"id": 211, "seek": 100866, "start": 1024.54, "end": 1025.54, "text": " done.", "tokens": [51158, 1096, 13, 51208], "temperature": 0.0, "avg_logprob": -0.19638850348336356, "compression_ratio": 1.6257668711656441, "no_speech_prob": 0.09076051414012909}, {"id": 212, "seek": 100866, "start": 1025.54, "end": 1034.82, "text": " And I also put routes because I want to do list cost routing with it.", "tokens": [51208, 400, 286, 611, 829, 18242, 570, 286, 528, 281, 360, 1329, 2063, 32722, 365, 309, 13, 51672], "temperature": 0.0, "avg_logprob": -0.19638850348336356, "compression_ratio": 1.6257668711656441, "no_speech_prob": 0.09076051414012909}, {"id": 213, "seek": 103482, "start": 1034.82, "end": 1041.34, "text": " Next I put log there because I want to get some logs out of the query when the query", "tokens": [50364, 3087, 286, 829, 3565, 456, 570, 286, 528, 281, 483, 512, 20820, 484, 295, 264, 14581, 562, 264, 14581, 50690], "temperature": 0.0, "avg_logprob": -0.2077171679624577, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.2749735713005066}, {"id": 214, "seek": 103482, "start": 1041.34, "end": 1042.34, "text": " is done.", "tokens": [50690, 307, 1096, 13, 50740], "temperature": 0.0, "avg_logprob": -0.2077171679624577, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.2749735713005066}, {"id": 215, "seek": 103482, "start": 1042.34, "end": 1047.02, "text": " So I want to get the request and the reply from the query.", "tokens": [50740, 407, 286, 528, 281, 483, 264, 5308, 293, 264, 16972, 490, 264, 14581, 13, 50974], "temperature": 0.0, "avg_logprob": -0.2077171679624577, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.2749735713005066}, {"id": 216, "seek": 103482, "start": 1047.02, "end": 1050.46, "text": " And after that I put request fields.", "tokens": [50974, 400, 934, 300, 286, 829, 5308, 7909, 13, 51146], "temperature": 0.0, "avg_logprob": -0.2077171679624577, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.2749735713005066}, {"id": 217, "seek": 103482, "start": 1050.46, "end": 1055.58, "text": " The request fields are what you want to populate when the query is being done.", "tokens": [51146, 440, 5308, 7909, 366, 437, 291, 528, 281, 1665, 5256, 562, 264, 14581, 307, 885, 1096, 13, 51402], "temperature": 0.0, "avg_logprob": -0.2077171679624577, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.2749735713005066}, {"id": 218, "seek": 103482, "start": 1055.58, "end": 1061.5, "text": " In this case I want to populate account, destination, set up time, type of record and usage.", "tokens": [51402, 682, 341, 1389, 286, 528, 281, 1665, 5256, 2696, 11, 12236, 11, 992, 493, 565, 11, 2010, 295, 2136, 293, 14924, 13, 51698], "temperature": 0.0, "avg_logprob": -0.2077171679624577, "compression_ratio": 1.83248730964467, "no_speech_prob": 0.2749735713005066}, {"id": 219, "seek": 106150, "start": 1061.5, "end": 1065.78, "text": " I want to populate this because I want to put them in my event later and the event needs", "tokens": [50364, 286, 528, 281, 1665, 5256, 341, 570, 286, 528, 281, 829, 552, 294, 452, 2280, 1780, 293, 264, 2280, 2203, 50578], "temperature": 0.0, "avg_logprob": -0.12776902318000793, "compression_ratio": 1.71875, "no_speech_prob": 0.0126193230971694}, {"id": 220, "seek": 106150, "start": 1065.78, "end": 1068.38, "text": " to use them.", "tokens": [50578, 281, 764, 552, 13, 50708], "temperature": 0.0, "avg_logprob": -0.12776902318000793, "compression_ratio": 1.71875, "no_speech_prob": 0.0126193230971694}, {"id": 221, "seek": 106150, "start": 1068.38, "end": 1069.38, "text": " How I populate them?", "tokens": [50708, 1012, 286, 1665, 5256, 552, 30, 50758], "temperature": 0.0, "avg_logprob": -0.12776902318000793, "compression_ratio": 1.71875, "no_speech_prob": 0.0126193230971694}, {"id": 222, "seek": 106150, "start": 1069.38, "end": 1076.58, "text": " I populate account with the query name by stripping away the first E164 and what's before", "tokens": [50758, 286, 1665, 5256, 2696, 365, 264, 14581, 1315, 538, 3575, 3759, 1314, 264, 700, 462, 6866, 19, 293, 437, 311, 949, 51118], "temperature": 0.0, "avg_logprob": -0.12776902318000793, "compression_ratio": 1.71875, "no_speech_prob": 0.0126193230971694}, {"id": 223, "seek": 106150, "start": 1076.58, "end": 1077.58, "text": " it.", "tokens": [51118, 309, 13, 51168], "temperature": 0.0, "avg_logprob": -0.12776902318000793, "compression_ratio": 1.71875, "no_speech_prob": 0.0126193230971694}, {"id": 224, "seek": 106150, "start": 1077.58, "end": 1083.02, "text": " So it leaves me behind with only the 1001 account which I will show later.", "tokens": [51168, 407, 309, 5510, 385, 2261, 365, 787, 264, 2319, 16, 2696, 597, 286, 486, 855, 1780, 13, 51440], "temperature": 0.0, "avg_logprob": -0.12776902318000793, "compression_ratio": 1.71875, "no_speech_prob": 0.0126193230971694}, {"id": 225, "seek": 106150, "start": 1083.02, "end": 1086.06, "text": " This way I populate account with 1001.", "tokens": [51440, 639, 636, 286, 1665, 5256, 2696, 365, 2319, 16, 13, 51592], "temperature": 0.0, "avg_logprob": -0.12776902318000793, "compression_ratio": 1.71875, "no_speech_prob": 0.0126193230971694}, {"id": 226, "seek": 108606, "start": 1086.06, "end": 1091.5, "text": " In destination I put the query name fully converted into E164.", "tokens": [50364, 682, 12236, 286, 829, 264, 14581, 1315, 4498, 16424, 666, 462, 6866, 19, 13, 50636], "temperature": 0.0, "avg_logprob": -0.13744308102515437, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.05171149596571922}, {"id": 227, "seek": 108606, "start": 1091.5, "end": 1097.02, "text": " In set up time I put now for the current time of the query, type of record voice and usage", "tokens": [50636, 682, 992, 493, 565, 286, 829, 586, 337, 264, 2190, 565, 295, 264, 14581, 11, 2010, 295, 2136, 3177, 293, 14924, 50912], "temperature": 0.0, "avg_logprob": -0.13744308102515437, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.05171149596571922}, {"id": 228, "seek": 108606, "start": 1097.02, "end": 1099.22, "text": " of one minute.", "tokens": [50912, 295, 472, 3456, 13, 51022], "temperature": 0.0, "avg_logprob": -0.13744308102515437, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.05171149596571922}, {"id": 229, "seek": 108606, "start": 1099.22, "end": 1103.22, "text": " For the reply fields I want to put what I want to reply to the DNS with.", "tokens": [51022, 1171, 264, 16972, 7909, 286, 528, 281, 829, 437, 286, 528, 281, 16972, 281, 264, 35153, 365, 13, 51222], "temperature": 0.0, "avg_logprob": -0.13744308102515437, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.05171149596571922}, {"id": 230, "seek": 108606, "start": 1103.22, "end": 1110.86, "text": " So I want to reply with order of 100, reference 10, flags U and service E2U plus CIP.", "tokens": [51222, 407, 286, 528, 281, 16972, 365, 1668, 295, 2319, 11, 6408, 1266, 11, 23265, 624, 293, 2643, 462, 17, 52, 1804, 383, 9139, 13, 51604], "temperature": 0.0, "avg_logprob": -0.13744308102515437, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.05171149596571922}, {"id": 231, "seek": 111086, "start": 1110.86, "end": 1118.3799999999999, "text": " In the most important part the regular expression which I find through route parameters.", "tokens": [50364, 682, 264, 881, 1021, 644, 264, 3890, 6114, 597, 286, 915, 807, 7955, 9834, 13, 50740], "temperature": 0.0, "avg_logprob": -0.23975700991494314, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.36262592673301697}, {"id": 232, "seek": 111086, "start": 1118.3799999999999, "end": 1127.1799999999998, "text": " I didn't show here but I created a routing profile before and I put there two information", "tokens": [50740, 286, 994, 380, 855, 510, 457, 286, 2942, 257, 32722, 7964, 949, 293, 286, 829, 456, 732, 1589, 51180], "temperature": 0.0, "avg_logprob": -0.23975700991494314, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.36262592673301697}, {"id": 233, "seek": 111086, "start": 1127.1799999999998, "end": 1135.2199999999998, "text": " in two routes and that information are the CIP addresses which are different.", "tokens": [51180, 294, 732, 18242, 293, 300, 1589, 366, 264, 383, 9139, 16862, 597, 366, 819, 13, 51582], "temperature": 0.0, "avg_logprob": -0.23975700991494314, "compression_ratio": 1.5421686746987953, "no_speech_prob": 0.36262592673301697}, {"id": 234, "seek": 113522, "start": 1135.22, "end": 1142.34, "text": " One of them is of highly cost and the other one is least cost, is lesser cost.", "tokens": [50364, 1485, 295, 552, 307, 295, 5405, 2063, 293, 264, 661, 472, 307, 1935, 2063, 11, 307, 22043, 2063, 13, 50720], "temperature": 0.0, "avg_logprob": -0.24390058648096372, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.10903524607419968}, {"id": 235, "seek": 113522, "start": 1142.34, "end": 1150.54, "text": " And since I have that meta routes flag over there, those routes will be sorted using least", "tokens": [50720, 400, 1670, 286, 362, 300, 19616, 18242, 7166, 670, 456, 11, 729, 18242, 486, 312, 25462, 1228, 1935, 51130], "temperature": 0.0, "avg_logprob": -0.24390058648096372, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.10903524607419968}, {"id": 236, "seek": 113522, "start": 1150.54, "end": 1152.42, "text": " cost.", "tokens": [51130, 2063, 13, 51224], "temperature": 0.0, "avg_logprob": -0.24390058648096372, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.10903524607419968}, {"id": 237, "seek": 113522, "start": 1152.42, "end": 1159.14, "text": " And since I have reply I want to find that reply the routing parameters for that first", "tokens": [51224, 400, 1670, 286, 362, 16972, 286, 528, 281, 915, 300, 16972, 264, 32722, 9834, 337, 300, 700, 51560], "temperature": 0.0, "avg_logprob": -0.24390058648096372, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.10903524607419968}, {"id": 238, "seek": 113522, "start": 1159.14, "end": 1160.34, "text": " index of the route.", "tokens": [51560, 8186, 295, 264, 7955, 13, 51620], "temperature": 0.0, "avg_logprob": -0.24390058648096372, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.10903524607419968}, {"id": 239, "seek": 116034, "start": 1160.34, "end": 1165.02, "text": " And the first index is always depending on the sorting route and make it least cost,", "tokens": [50364, 400, 264, 700, 8186, 307, 1009, 5413, 322, 264, 32411, 7955, 293, 652, 309, 1935, 2063, 11, 50598], "temperature": 0.0, "avg_logprob": -0.2508437545211227, "compression_ratio": 1.6685082872928176, "no_speech_prob": 0.024559278041124344}, {"id": 240, "seek": 116034, "start": 1165.02, "end": 1169.9399999999998, "text": " the first index is going to be the least cost route.", "tokens": [50598, 264, 700, 8186, 307, 516, 281, 312, 264, 1935, 2063, 7955, 13, 50844], "temperature": 0.0, "avg_logprob": -0.2508437545211227, "compression_ratio": 1.6685082872928176, "no_speech_prob": 0.024559278041124344}, {"id": 241, "seek": 116034, "start": 1169.9399999999998, "end": 1173.86, "text": " And under the reply you can see the reply.", "tokens": [50844, 400, 833, 264, 16972, 291, 393, 536, 264, 16972, 13, 51040], "temperature": 0.0, "avg_logprob": -0.2508437545211227, "compression_ratio": 1.6685082872928176, "no_speech_prob": 0.024559278041124344}, {"id": 242, "seek": 116034, "start": 1173.86, "end": 1180.62, "text": " I find in the structure routing profile I go to run ID meta row, meta is in this case", "tokens": [51040, 286, 915, 294, 264, 3877, 32722, 7964, 286, 352, 281, 1190, 7348, 19616, 5386, 11, 19616, 307, 294, 341, 1389, 51378], "temperature": 0.0, "avg_logprob": -0.2508437545211227, "compression_ratio": 1.6685082872928176, "no_speech_prob": 0.024559278041124344}, {"id": 243, "seek": 116034, "start": 1180.62, "end": 1185.78, "text": " asterisk of iteration 0 of that ID.", "tokens": [51378, 257, 3120, 7797, 295, 24784, 1958, 295, 300, 7348, 13, 51636], "temperature": 0.0, "avg_logprob": -0.2508437545211227, "compression_ratio": 1.6685082872928176, "no_speech_prob": 0.024559278041124344}, {"id": 244, "seek": 118578, "start": 1185.78, "end": 1191.26, "text": " I go to routes of iteration 0 again and then I find the value of routing parameters which", "tokens": [50364, 286, 352, 281, 18242, 295, 24784, 1958, 797, 293, 550, 286, 915, 264, 2158, 295, 32722, 9834, 597, 50638], "temperature": 0.0, "avg_logprob": -0.17715842224830805, "compression_ratio": 1.6019900497512438, "no_speech_prob": 0.012859699316322803}, {"id": 245, "seek": 118578, "start": 1191.26, "end": 1194.86, "text": " is the CIP address that it finds.", "tokens": [50638, 307, 264, 383, 9139, 2985, 300, 309, 10704, 13, 50818], "temperature": 0.0, "avg_logprob": -0.17715842224830805, "compression_ratio": 1.6019900497512438, "no_speech_prob": 0.012859699316322803}, {"id": 246, "seek": 118578, "start": 1194.86, "end": 1198.1, "text": " And then I populate it to that regular expression.", "tokens": [50818, 400, 550, 286, 1665, 5256, 309, 281, 300, 3890, 6114, 13, 50980], "temperature": 0.0, "avg_logprob": -0.17715842224830805, "compression_ratio": 1.6019900497512438, "no_speech_prob": 0.012859699316322803}, {"id": 247, "seek": 118578, "start": 1198.1, "end": 1204.34, "text": " After that I just also put the replacement dot at the end.", "tokens": [50980, 2381, 300, 286, 445, 611, 829, 264, 14419, 5893, 412, 264, 917, 13, 51292], "temperature": 0.0, "avg_logprob": -0.17715842224830805, "compression_ratio": 1.6019900497512438, "no_speech_prob": 0.012859699316322803}, {"id": 248, "seek": 118578, "start": 1204.34, "end": 1210.82, "text": " For the client, for the client I'm using dig, in this case I'm couring localhost on port", "tokens": [51292, 1171, 264, 6423, 11, 337, 264, 6423, 286, 478, 1228, 2528, 11, 294, 341, 1389, 286, 478, 1005, 278, 2654, 6037, 322, 2436, 51616], "temperature": 0.0, "avg_logprob": -0.17715842224830805, "compression_ratio": 1.6019900497512438, "no_speech_prob": 0.012859699316322803}, {"id": 249, "seek": 121082, "start": 1210.82, "end": 1214.7, "text": " 2053, the type of regular this NAPTR.", "tokens": [50364, 945, 19584, 11, 264, 2010, 295, 3890, 341, 426, 4715, 25936, 13, 50558], "temperature": 0.0, "avg_logprob": -0.24643009019934614, "compression_ratio": 1.6095617529880477, "no_speech_prob": 0.031814444810152054}, {"id": 250, "seek": 121082, "start": 1214.7, "end": 1216.74, "text": " And you can see the N number that I put there.", "tokens": [50558, 400, 291, 393, 536, 264, 426, 1230, 300, 286, 829, 456, 13, 50660], "temperature": 0.0, "avg_logprob": -0.24643009019934614, "compression_ratio": 1.6095617529880477, "no_speech_prob": 0.031814444810152054}, {"id": 251, "seek": 121082, "start": 1216.74, "end": 1220.58, "text": " You can see the 1001 account at the end.", "tokens": [50660, 509, 393, 536, 264, 2319, 16, 2696, 412, 264, 917, 13, 50852], "temperature": 0.0, "avg_logprob": -0.24643009019934614, "compression_ratio": 1.6095617529880477, "no_speech_prob": 0.031814444810152054}, {"id": 252, "seek": 121082, "start": 1220.58, "end": 1223.78, "text": " For the reply I captured this using ngrep.", "tokens": [50852, 1171, 264, 16972, 286, 11828, 341, 1228, 297, 70, 19919, 13, 51012], "temperature": 0.0, "avg_logprob": -0.24643009019934614, "compression_ratio": 1.6095617529880477, "no_speech_prob": 0.031814444810152054}, {"id": 253, "seek": 121082, "start": 1223.78, "end": 1227.7, "text": " You can see the API that gets called sessions process event.", "tokens": [51012, 509, 393, 536, 264, 9362, 300, 2170, 1219, 11081, 1399, 2280, 13, 51208], "temperature": 0.0, "avg_logprob": -0.24643009019934614, "compression_ratio": 1.6095617529880477, "no_speech_prob": 0.031814444810152054}, {"id": 254, "seek": 121082, "start": 1227.7, "end": 1232.1799999999998, "text": " In the flags they are the exact same that I put in my request processes.", "tokens": [51208, 682, 264, 23265, 436, 366, 264, 1900, 912, 300, 286, 829, 294, 452, 5308, 7555, 13, 51432], "temperature": 0.0, "avg_logprob": -0.24643009019934614, "compression_ratio": 1.6095617529880477, "no_speech_prob": 0.031814444810152054}, {"id": 255, "seek": 121082, "start": 1232.1799999999998, "end": 1237.98, "text": " The tenant gets automatically taken by default configs which is cj.org, the ID is some random", "tokens": [51432, 440, 31000, 2170, 6772, 2726, 538, 7576, 6662, 82, 597, 307, 269, 73, 13, 4646, 11, 264, 7348, 307, 512, 4974, 51722], "temperature": 0.0, "avg_logprob": -0.24643009019934614, "compression_ratio": 1.6095617529880477, "no_speech_prob": 0.031814444810152054}, {"id": 256, "seek": 121082, "start": 1237.98, "end": 1239.3, "text": " number.", "tokens": [51722, 1230, 13, 51788], "temperature": 0.0, "avg_logprob": -0.24643009019934614, "compression_ratio": 1.6095617529880477, "no_speech_prob": 0.031814444810152054}, {"id": 257, "seek": 123930, "start": 1239.3, "end": 1242.3799999999999, "text": " Time is the current time of the query.", "tokens": [50364, 6161, 307, 264, 2190, 565, 295, 264, 14581, 13, 50518], "temperature": 0.0, "avg_logprob": -0.1474942698062045, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.025674009695649147}, {"id": 258, "seek": 123930, "start": 1242.3799999999999, "end": 1247.94, "text": " And in the event you can see they are exactly what I asked for in my request processes again,", "tokens": [50518, 400, 294, 264, 2280, 291, 393, 536, 436, 366, 2293, 437, 286, 2351, 337, 294, 452, 5308, 7555, 797, 11, 50796], "temperature": 0.0, "avg_logprob": -0.1474942698062045, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.025674009695649147}, {"id": 259, "seek": 123930, "start": 1247.94, "end": 1250.18, "text": " if you can see.", "tokens": [50796, 498, 291, 393, 536, 13, 50908], "temperature": 0.0, "avg_logprob": -0.1474942698062045, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.025674009695649147}, {"id": 260, "seek": 123930, "start": 1250.18, "end": 1254.54, "text": " And that's just the request for the reply site.", "tokens": [50908, 400, 300, 311, 445, 264, 5308, 337, 264, 16972, 3621, 13, 51126], "temperature": 0.0, "avg_logprob": -0.1474942698062045, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.025674009695649147}, {"id": 261, "seek": 123930, "start": 1254.54, "end": 1260.86, "text": " I can see the reply from that API where I find the max usage of 60 seconds.", "tokens": [51126, 286, 393, 536, 264, 16972, 490, 300, 9362, 689, 286, 915, 264, 11469, 14924, 295, 4060, 3949, 13, 51442], "temperature": 0.0, "avg_logprob": -0.1474942698062045, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.025674009695649147}, {"id": 262, "seek": 123930, "start": 1260.86, "end": 1265.7, "text": " If you remember I put one minute of the request.", "tokens": [51442, 759, 291, 1604, 286, 829, 472, 3456, 295, 264, 5308, 13, 51684], "temperature": 0.0, "avg_logprob": -0.1474942698062045, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.025674009695649147}, {"id": 263, "seek": 123930, "start": 1265.7, "end": 1268.58, "text": " You can see that it's also 60 billion nanoseconds.", "tokens": [51684, 509, 393, 536, 300, 309, 311, 611, 4060, 5218, 14067, 541, 28750, 13, 51828], "temperature": 0.0, "avg_logprob": -0.1474942698062045, "compression_ratio": 1.6986301369863013, "no_speech_prob": 0.025674009695649147}, {"id": 264, "seek": 126858, "start": 1268.58, "end": 1272.1399999999999, "text": " This cj also works in nanoseconds.", "tokens": [50364, 639, 269, 73, 611, 1985, 294, 14067, 541, 28750, 13, 50542], "temperature": 0.0, "avg_logprob": -0.22269189622667102, "compression_ratio": 1.7005649717514124, "no_speech_prob": 0.02626843936741352}, {"id": 265, "seek": 126858, "start": 1272.1399999999999, "end": 1275.3, "text": " Also I have the reply on the routes profile site.", "tokens": [50542, 2743, 286, 362, 264, 16972, 322, 264, 18242, 7964, 3621, 13, 50700], "temperature": 0.0, "avg_logprob": -0.22269189622667102, "compression_ratio": 1.7005649717514124, "no_speech_prob": 0.02626843936741352}, {"id": 266, "seek": 126858, "start": 1275.3, "end": 1280.1399999999999, "text": " You can see that it found the routes account for 1001.", "tokens": [50700, 509, 393, 536, 300, 309, 1352, 264, 18242, 2696, 337, 2319, 16, 13, 50942], "temperature": 0.0, "avg_logprob": -0.22269189622667102, "compression_ratio": 1.7005649717514124, "no_speech_prob": 0.02626843936741352}, {"id": 267, "seek": 126858, "start": 1280.1399999999999, "end": 1282.6999999999998, "text": " You can see the sorting that it used.", "tokens": [50942, 509, 393, 536, 264, 32411, 300, 309, 1143, 13, 51070], "temperature": 0.0, "avg_logprob": -0.22269189622667102, "compression_ratio": 1.7005649717514124, "no_speech_prob": 0.02626843936741352}, {"id": 268, "seek": 126858, "start": 1282.6999999999998, "end": 1285.06, "text": " It's LC for list cost.", "tokens": [51070, 467, 311, 42198, 337, 1329, 2063, 13, 51188], "temperature": 0.0, "avg_logprob": -0.22269189622667102, "compression_ratio": 1.7005649717514124, "no_speech_prob": 0.02626843936741352}, {"id": 269, "seek": 126858, "start": 1285.06, "end": 1290.5, "text": " And also it shows all the routes that it found sorted by it.", "tokens": [51188, 400, 611, 309, 3110, 439, 264, 18242, 300, 309, 1352, 25462, 538, 309, 13, 51460], "temperature": 0.0, "avg_logprob": -0.22269189622667102, "compression_ratio": 1.7005649717514124, "no_speech_prob": 0.02626843936741352}, {"id": 270, "seek": 126858, "start": 1290.5, "end": 1293.4199999999998, "text": " And you can see routes with ID route 2.", "tokens": [51460, 400, 291, 393, 536, 18242, 365, 7348, 7955, 568, 13, 51606], "temperature": 0.0, "avg_logprob": -0.22269189622667102, "compression_ratio": 1.7005649717514124, "no_speech_prob": 0.02626843936741352}, {"id": 271, "seek": 129342, "start": 1293.42, "end": 1299.66, "text": " You can see the Cp address ending with 12 and the cost that it would take of 60 units.", "tokens": [50364, 509, 393, 536, 264, 383, 79, 2985, 8121, 365, 2272, 293, 264, 2063, 300, 309, 576, 747, 295, 4060, 6815, 13, 50676], "temperature": 0.0, "avg_logprob": -0.15337383613157807, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.017468854784965515}, {"id": 272, "seek": 129342, "start": 1299.66, "end": 1306.22, "text": " And the second ID which is more costly with the Cp address of 11.", "tokens": [50676, 400, 264, 1150, 7348, 597, 307, 544, 28328, 365, 264, 383, 79, 2985, 295, 2975, 13, 51004], "temperature": 0.0, "avg_logprob": -0.15337383613157807, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.017468854784965515}, {"id": 273, "seek": 129342, "start": 1306.22, "end": 1310.8200000000002, "text": " And here we get the reply back from DNS agent after it's done.", "tokens": [51004, 400, 510, 321, 483, 264, 16972, 646, 490, 35153, 9461, 934, 309, 311, 1096, 13, 51234], "temperature": 0.0, "avg_logprob": -0.15337383613157807, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.017468854784965515}, {"id": 274, "seek": 129342, "start": 1310.8200000000002, "end": 1317.9, "text": " You can see that it found a regular expression with 12 at the end which was 60 cost units", "tokens": [51234, 509, 393, 536, 300, 309, 1352, 257, 3890, 6114, 365, 2272, 412, 264, 917, 597, 390, 4060, 2063, 6815, 51588], "temperature": 0.0, "avg_logprob": -0.15337383613157807, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.017468854784965515}, {"id": 275, "seek": 129342, "start": 1317.9, "end": 1320.3400000000001, "text": " if you saw from earlier.", "tokens": [51588, 498, 291, 1866, 490, 3071, 13, 51710], "temperature": 0.0, "avg_logprob": -0.15337383613157807, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.017468854784965515}, {"id": 276, "seek": 132034, "start": 1320.34, "end": 1328.5, "text": " And also as another use case you can have a fail fallback.", "tokens": [50364, 400, 611, 382, 1071, 764, 1389, 291, 393, 362, 257, 3061, 2100, 3207, 13, 50772], "temperature": 0.0, "avg_logprob": -0.1480991714879086, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.013729983009397984}, {"id": 277, "seek": 132034, "start": 1328.5, "end": 1332.6599999999999, "text": " So for example you can have multiple answers over here.", "tokens": [50772, 407, 337, 1365, 291, 393, 362, 3866, 6338, 670, 510, 13, 50980], "temperature": 0.0, "avg_logprob": -0.1480991714879086, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.013729983009397984}, {"id": 278, "seek": 132034, "start": 1332.6599999999999, "end": 1338.26, "text": " In my case I would just have to make another request process.", "tokens": [50980, 682, 452, 1389, 286, 576, 445, 362, 281, 652, 1071, 5308, 1399, 13, 51260], "temperature": 0.0, "avg_logprob": -0.1480991714879086, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.013729983009397984}, {"id": 279, "seek": 132034, "start": 1338.26, "end": 1343.78, "text": " And in this case I put just one instead of zero over there and it gets the second list", "tokens": [51260, 400, 294, 341, 1389, 286, 829, 445, 472, 2602, 295, 4018, 670, 456, 293, 309, 2170, 264, 1150, 1329, 51536], "temperature": 0.0, "avg_logprob": -0.1480991714879086, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.013729983009397984}, {"id": 280, "seek": 132034, "start": 1343.78, "end": 1347.74, "text": " cost that it finds from routes.", "tokens": [51536, 2063, 300, 309, 10704, 490, 18242, 13, 51734], "temperature": 0.0, "avg_logprob": -0.1480991714879086, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.013729983009397984}, {"id": 281, "seek": 134774, "start": 1347.74, "end": 1352.22, "text": " By that you can just get the second answer also.", "tokens": [50364, 3146, 300, 291, 393, 445, 483, 264, 1150, 1867, 611, 13, 50588], "temperature": 0.0, "avg_logprob": -0.2925405345979284, "compression_ratio": 1.3623188405797102, "no_speech_prob": 0.13998501002788544}, {"id": 282, "seek": 134774, "start": 1352.22, "end": 1353.54, "text": " And that's about it.", "tokens": [50588, 400, 300, 311, 466, 309, 13, 50654], "temperature": 0.0, "avg_logprob": -0.2925405345979284, "compression_ratio": 1.3623188405797102, "no_speech_prob": 0.13998501002788544}, {"id": 283, "seek": 134774, "start": 1353.54, "end": 1356.38, "text": " Any questions?", "tokens": [50654, 2639, 1651, 30, 50796], "temperature": 0.0, "avg_logprob": -0.2925405345979284, "compression_ratio": 1.3623188405797102, "no_speech_prob": 0.13998501002788544}, {"id": 284, "seek": 134774, "start": 1356.38, "end": 1362.38, "text": " I'm guessing not.", "tokens": [50796, 286, 478, 17939, 406, 13, 51096], "temperature": 0.0, "avg_logprob": -0.2925405345979284, "compression_ratio": 1.3623188405797102, "no_speech_prob": 0.13998501002788544}, {"id": 285, "seek": 134774, "start": 1362.38, "end": 1366.9, "text": " If you have any questions you can also ask them at our Google groups.", "tokens": [51096, 759, 291, 362, 604, 1651, 291, 393, 611, 1029, 552, 412, 527, 3329, 3935, 13, 51322], "temperature": 0.0, "avg_logprob": -0.2925405345979284, "compression_ratio": 1.3623188405797102, "no_speech_prob": 0.13998501002788544}, {"id": 286, "seek": 134774, "start": 1366.9, "end": 1367.9, "text": " Oh sorry.", "tokens": [51322, 876, 2597, 13, 51372], "temperature": 0.0, "avg_logprob": -0.2925405345979284, "compression_ratio": 1.3623188405797102, "no_speech_prob": 0.13998501002788544}, {"id": 287, "seek": 134774, "start": 1367.9, "end": 1368.9, "text": " Yeah.", "tokens": [51372, 865, 13, 51422], "temperature": 0.0, "avg_logprob": -0.2925405345979284, "compression_ratio": 1.3623188405797102, "no_speech_prob": 0.13998501002788544}, {"id": 288, "seek": 136890, "start": 1368.9, "end": 1372.6200000000001, "text": " Going back to the request and the response.", "tokens": [50364, 10963, 646, 281, 264, 5308, 293, 264, 4134, 13, 50550], "temperature": 0.0, "avg_logprob": -0.2829239073253813, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0875030979514122}, {"id": 289, "seek": 136890, "start": 1372.6200000000001, "end": 1377.3400000000001, "text": " I saw you had a, in the request you were getting an account ID.", "tokens": [50550, 286, 1866, 291, 632, 257, 11, 294, 264, 5308, 291, 645, 1242, 364, 2696, 7348, 13, 50786], "temperature": 0.0, "avg_logprob": -0.2829239073253813, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0875030979514122}, {"id": 290, "seek": 136890, "start": 1377.3400000000001, "end": 1383.94, "text": " How are you figuring out the account of the person asking according to DNS?", "tokens": [50786, 1012, 366, 291, 15213, 484, 264, 2696, 295, 264, 954, 3365, 4650, 281, 35153, 30, 51116], "temperature": 0.0, "avg_logprob": -0.2829239073253813, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0875030979514122}, {"id": 291, "seek": 136890, "start": 1383.94, "end": 1386.5800000000002, "text": " Well it depends on what you want to do.", "tokens": [51116, 1042, 309, 5946, 322, 437, 291, 528, 281, 360, 13, 51248], "temperature": 0.0, "avg_logprob": -0.2829239073253813, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0875030979514122}, {"id": 292, "seek": 136890, "start": 1386.5800000000002, "end": 1391.8200000000002, "text": " In my case I just put that in my request on the DNS client over there.", "tokens": [51248, 682, 452, 1389, 286, 445, 829, 300, 294, 452, 5308, 322, 264, 35153, 6423, 670, 456, 13, 51510], "temperature": 0.0, "avg_logprob": -0.2829239073253813, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0875030979514122}, {"id": 293, "seek": 136890, "start": 1391.8200000000002, "end": 1394.5400000000002, "text": " You can see at the end it's in that 1001.", "tokens": [51510, 509, 393, 536, 412, 264, 917, 309, 311, 294, 300, 2319, 16, 13, 51646], "temperature": 0.0, "avg_logprob": -0.2829239073253813, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0875030979514122}, {"id": 294, "seek": 136890, "start": 1394.5400000000002, "end": 1396.26, "text": " So I give it myself that account ID.", "tokens": [51646, 407, 286, 976, 309, 2059, 300, 2696, 7348, 13, 51732], "temperature": 0.0, "avg_logprob": -0.2829239073253813, "compression_ratio": 1.6147186147186148, "no_speech_prob": 0.0875030979514122}, {"id": 295, "seek": 139626, "start": 1396.26, "end": 1402.54, "text": " Okay so you're giving each customer a phone top level domain name.", "tokens": [50364, 1033, 370, 291, 434, 2902, 1184, 5474, 257, 2593, 1192, 1496, 9274, 1315, 13, 50678], "temperature": 0.0, "avg_logprob": -0.641470005637721, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.026523251086473465}, {"id": 296, "seek": 139626, "start": 1402.54, "end": 1403.54, "text": " Whatever you want.", "tokens": [50678, 8541, 291, 528, 13, 50728], "temperature": 0.0, "avg_logprob": -0.641470005637721, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.026523251086473465}, {"id": 297, "seek": 139626, "start": 1403.54, "end": 1407.54, "text": " Any other questions?", "tokens": [50728, 2639, 661, 1651, 30, 50928], "temperature": 0.0, "avg_logprob": -0.641470005637721, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.026523251086473465}, {"id": 298, "seek": 139626, "start": 1407.54, "end": 1408.98, "text": " Okay.", "tokens": [50928, 1033, 13, 51000], "temperature": 0.0, "avg_logprob": -0.641470005637721, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.026523251086473465}, {"id": 299, "seek": 139626, "start": 1408.98, "end": 1413.06, "text": " Thank you.", "tokens": [51000, 1044, 291, 13, 51204], "temperature": 0.0, "avg_logprob": -0.641470005637721, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.026523251086473465}], "language": "en"}