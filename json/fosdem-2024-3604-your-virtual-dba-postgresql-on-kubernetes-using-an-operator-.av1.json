{"text": " So, time to start. Please welcome to the stage, speaking about running Postgres on Kubernetes, Karen Jax. Hi, thanks, Jimmy. Yep, so I'm Karen Jax. I'm a senior solutions architect at Crunchy Data and I'm going to talk to you about running databases on Kubernetes or how to create a virtual DBA. I've always worked with databases, so I've just included a little picture of my career to date just to prove that I'm vaguely qualified to talk to you about DBA type stuff. This is the first ever job title I've had that doesn't have the word database in it, but I still only work with databases. Okay, so in the abstract I said a lot of people who have looking after databases as part of their job responsibilities aren't actually these days database administrators. I see sysadmins, I see infrastructure teams, I see application developers, I see DevOps teams, all sorts of different people who don't necessarily have a training or experience in database administration, database administration who are expected to look after their organization's databases. And I see that in particular in organizations where everything's running on Kubernetes and the databases are just seen as another part of that landscape. So if you're in that situation what do you do? Do you go out and quickly learn to be a database administrator? Do you phone a friend? Do you panic? I mean a better option would probably be to go out and think about using one of the Kubernetes operators that's been created by database experts. So we'll have a look at what a Kubernetes operator does and how it can help you to create a virtual DBA and what you want to look for when you're choosing an operator. So we'll quickly have a look back at how database architecture has evolved over time. Make sure everyone's kind of on the same page so that you know what kind of things Kubernetes does and what it's useful for. Look at some of the special features that makes Kubernetes suitable for running a database environment. Try and figure out what a DBA actually does because that's going to then give us an idea of what we need the operator to do. Understand what an operator for Kubernetes is. Look at the features that you might expect from it and then finally have a little look at how you might go about implementing an operator and trying that out for yourself. So first of all the history, I promise it will be extremely brief. Once upon a time databases were deployed on physical servers or bare metal. You could run multiple databases on a single server if you wanted to but you had to accept that those databases are sharing the resources of that physical server and competing for them. If you wanted isolation you had to deploy a single database instance per physical server and that's going to bring with it very high overheads in terms of maintenance, operating costs, hardware costs etc. But you do get that isolation, you can manage them independently. Then we got virtualization in the form of VMs. So now you can carve up a single physical server into multiple VMs and you can deploy a database instance to each of those VMs. So now you've got isolation, you can manage those independently. You've still got fairly high overheads. So you've got the, as well as your underlying operating system, you've got the hypervisor and then your guest OS. But you have got that isolation. And fast forward to 2024, many databases are now running in containers. So just to recap, a container is a lightweight self-contained software package that you can deploy pretty much anywhere. Containers use features of the underlying OS. So it's using C groups and namespaces. So they're sharing that underlying operating system. But they remain isolated from each other. So now if we deploy things like this, those database instances can be managed completely independently. They're not competing for resources. But because those containers are sharing the underlying OS, they're much more lightweight. You're looking at typically maybe tens of megabytes versus gigabytes for a VM. So not so many years ago, most people thought the idea of running databases in containers was a completely crazy idea. This year, all of my customers are running some or all of their production databases in a containerized environment. Some of them are running multi-terabyte mission critical databases. And some of them are running hundreds or even thousands of databases. So some things obviously changed. There's been a shift to make people see this now as a viable architecture for databases. So let's talk about some of those features that have made people move to a containerized environment for their databases. So as I mentioned briefly, containers are isolated, they're lightweight, and they're portable. You can create them and destroy them quickly and easily, which means that a containerized environment can be extremely flexible. It's very easy to scale. But containers are also stateless and ephemeral. A container's data and its state only last as long as that container exists. As soon as your container's destroyed, you lose that. Which as you can imagine strikes fear into the heart of your average database administrator. You need to take special care obviously when you're using a containerized environment for a database or at least ones where you have any kind of attach any kind of importance to your data. So putting aside the stateless and ephemeral issues just for now, your organization probably isn't managing just a couple of databases. Excuse me whilst I get my display back the way it's supposed to be. A lot of organizations are running hundreds or thousands of databases. And once you get to that stage, it's probably going to feel a lot like herding cats. You don't want to be doing all of those maintenance tasks associated with those containers and the databases in them. You don't want to be doing that manually. You need some kind of tooling to do that for you. Which is where container orchestration comes in. So container orchestration platform such as Kubernetes will let you manage many containers. It will automate the entire life cycle of those containers and it will integrate also with DevOps tools. So it allows you to do things in a flexible, automated, repeatable way. So a container orchestration tool will take care of a long list of tasks, things like provisioning, deployment, configuring your containers, scheduling, scaling up and down, repairing things, replacing containers that have failed services that have failed, creating services, allocating storage, different resources, load balancing, network and security. Kubernetes is an open source container orchestration tool and it's the industry standard for container orchestration. Just to reassure you that it's not a newfangled thing. It's actually been around a reasonable amount of time now and it's been a graduated CNCF, Cloud Native Computing Foundation projects, 2018. Kubernetes can be run pretty much anywhere. You can use a managed cloud platform or you can run it yourself either on premises or in the cloud. You can either run vanilla Kubernetes or there are a whole host of different flavors of Kubernetes. So you might hear people talk about OpenShift or Rancher or Tanzu or EKS, AKS, GKE. There are all sorts of different versions of Kubernetes that you can use. So to the why would you want to run Postgres on Kubernetes? It's no longer considered a leading edge technology. It's very much mainstream now and it's trusted in production by many, many users for database workloads. One of my favorite quotes is actually from Joe Conway's blog post where he says resistance to containers is futile and he points out that actually on modern Linux systems, because everything's running using C groups and namespaces, you're effectively already running your database in a container. So the customers I work with have many, many different reasons, use cases for running databases and Postgres on Kubernetes. Automating the deployment and administration of their databases is obviously a huge one. That's one of the main reasons that people cite for wanting to be able to do things. The features of a container orchestration platform that we saw on the previous slide are already, they go a long way towards doing the things that you would need automated to look after your database environment. There are other features as well that help with that and we'll look at those in a few slides. But otherwise, we see customers that want to be able to deploy and manage their database environments at scale. As I mentioned before, maybe hundreds or thousands of databases. They want to run multi-tenant environments. They want their database environment to complement an existing microservices environment. A lot of the time there's already Kubernetes in use in the organization. The applications might already be running in Kubernetes and they want to bring the databases into that environment. A lot of them do it because they want to be able to create a database as a service type offering, whether that's for internal or external customers. We'll have a quick look now at some of the other Kubernetes features that can help to build our virtual database administrator. First of all, a little bit of terminology. Even though Kubernetes is a container orchestration tool, you don't deploy an individual container in Kubernetes. You deploy a pod. In its simplest form, a pod you can think of as just a wrapper around your container, but it can contain multiple containers. Then we have a deployment. A deployment consists of one or more copies or replicas of a pod. The pods within a deployment are ephemeral and interchangeable. If one of those pods is destroyed for any reason, Kubernetes will just stand us up a new identical pod. We talked about the benefits of containers, the features of Kubernetes, but also the fact that a container's data only lasts as long as that container exists, which obviously would be a bit of a problem for a container that holds your database. You probably don't want your database to disappear if you lose a container, so you need some kind of persistent storage. Kubernetes provides that in the form of persistent volumes or PVs. By creating a persistent volume claim, a PVC, you can attach permanent storage to your container. What about standby databases? We've talked about pods in a deployment being interchangeable. If you lose a container, Kubernetes will just say, okay, that's fine, I'll just create you a new one. If that's your primary database container, you can't do that. A primary and a standby database aren't the same. They're not interchangeable. You can't just replace one with the other. You need something in there to tell Kubernetes that there is a difference between these. It's very rare that you'll be running just a standalone database. You will almost definitely want high availability, but also you might want replica databases for read scalability. Scalability is one of the big use cases for Kubernetes. We need Kubernetes to know that our primary and our standby database aren't interchangeable, that you can't just replace one with the other. We also need it to know that they can't just be started up and shut down in a random order. It needs to be carefully considered. For that kind of situation, we've got stateful sets. A stateful set is similar to a deployment, but each of our pods will have a persistent identifier, so it keeps that through any rescheduling. If pod one gets destroyed, it will be replaced by another pod one, and it will still be attached to that same PVC one. It will still be attached to that same storage, so it can keep that state. The Kubernetes documentation says that stateful sets are useful for applications that need stable persistent storage, ordered graceful deployment and scaling, and ordered automated rolling updates, which sounds very much like what you would want from a high availability database environment. Another useful feature is sidecars. We saw that a pod can contain one or more containers, so a sidecar is a kind of helper container, so it's tightly coupled with the main pod in your container. You might have, for example, alongside your database container, you might have one that exports metrics, one that exports statistics from your database, you might have one that performs your backup and recovery. We've seen what kind of things Kubernetes can do. What does a DBA actually do? This is a slide from the DBA evolution talk that I gave here last year, and for that I looked at various definitions of a DBA to try and find out what the general consensus is for the DBA roles. It turns out that apparently DBA is responsible for managing and securing computer systems that store data using specialist software, which tells us absolutely nothing about what a DBA does day to day. I compared that at the list of responsibilities that went with those definitions, and I looked at a whole load of different job adverts for DBAs to try and get some kind of consolidated list. Of the things that DBAs are actually expected to do, and it's a pretty long list. The general consensus is that a DBA will do some or all of, ensuring the availability of the database, usually involving putting in place some kind of high availability infrastructure. Design, implement, and maintain the necessary backup and recovery procedures. Design, implement, enforce, potentially various different security security requirements, create database users, manage database access, ensure data protection. Implement monitoring processes, perform ongoing monitoring of the databases, looking at things like performance, the security space, etc. Database design and development, including data modeling, for example. Support and troubleshooting, including 24-7 support, uncle support often. And it goes on. Installing and upgrading database software, providing database expertise to other teams, to other people, so for example to the business, to other technical staff. Performance tuning, capacity planning, putting in place the necessary procedures for creating databases and maintaining databases. Of course, there are different types of DBA. Some organizations will split the roles out differently. Some DBAs will be expected to do different things, but all of these things will need to be done by somebody. Okay. So we know that Kubernetes provides a lot of the features that you need to manage a database, but how are you going to go about setting up a containerized Postgres environment? Kubernetes doesn't natively speak Postgres. So you need to put in place some kind of mechanism that's going to tell Kubernetes how to manage your database cluster. You need it to know about replication, about backup and recovery, about monitoring, about upgrades, and all sorts of other things. To do that, you need expert knowledge in two domains. You need expert knowledge of Kubernetes and you need expert knowledge of Postgres. Most organizations find it difficult enough to find somebody that's got expert knowledge in one of these domains, let alone both of them. Fortunately, Kubernetes has another secret weapon, the operator. So this lets you extend Kubernetes functionality using custom resources, and we'll look at a custom resource later, and something called the control loop, where it keeps checking the current state of your cluster to see if it fits with what you've defined, and if not, it will make necessary changes to keep it in that required state. Even more fortunately, there are various Postgres operators that have been created by Postgres experts. I can speak in detail about the Crunchy Data Postgres operator, Pego, because that's the one I use day to day, but there are others out there. Each of them works in a slightly different way and might use different tools, but each of them combines that detailed Postgres and Kubernetes knowledge, so it extends the functionality of Kubernetes and lets it speak Postgres. It allows you to define in a manifest what your cluster should look like, and then work to deploy your cluster and keep it in that state. So what do you want from your Postgres operator for Kubernetes? The idea of Kubernetes operator is that it will perform all of the tasks that a human operator would otherwise do. So what we want it to do is automate as many as possible of those responsibilities, those tasks that we saw on the previous slides. For example, database availability. Most production environments, as we've said, need some kind of high availability. You'll probably be using Postgres' streaming replication so that you've got a primary database and one or more replica or standby databases. You'll then have some tool, a framework such as Petroni and XED. There are other frameworks available. This is one that we choose to use, and it's well respected and it has a rich set of features, so it's used by a lot of people. So you'll put that framework in place to manage your cluster. You might add in a tool such as HA proxy to maintain a virtual IP address so that you've always got your application connections pointing to your current primary database. There are quite a few moving parts here. There are various different tools to install and configure, and it can be quite fiddly to get that set up in the way you want. So you definitely want your operator to be doing that for you. If something goes wrong with your primary database, you want to be sure that you're going to get an automatic failover, that it's going to promote one of those replica databases to be your new primary, that it's then going to reconfigure any existing replicas to stream from that new primary, and that it's going to move your application connections to point to your new primary. You don't want to be doing any of that manually. You want that to happen automatically for you. And then for a combination of the self-healing magic of Kubernetes, Petroni, and your operator, you want to make sure that you have a new replica created to replace that primary database that you lost. You definitely want as much as possible of your backup and recovery to be automated. You want your operator to install your backup tool and configure it, so for example, PGBackrest. You want it to let you define one or more backup repositories that could be a local repository, that could be a cloud or network-based repository using S3, for example. You want it to take care of your wall archiving. You want it to take care of taking backups for you. You want to be able to schedule those backups. You want it to take care of removing obsolete backups once you no longer need them. You want it to retry backups if they fail. And then to minimize stress, data loss, and downtime, you definitely want as much of your recovery to be automated as possible. You'll still want a human operator in a lot of cases to say, yes or no, we are going to restore. Can we accept this data loss? Can we accept this downtime? There will be decisions like that to make by a human operator, but once those decisions are made, you want that process to be just a click of a button. In addition to your primary database cluster, you might want to be able to define a disaster recovery cluster or a standby cluster. A lot of people have a separate Kubernetes cluster in a different data center, in a different region, for example. And you want your operator to make sure that's kept up to date, either via wall streaming from a cloud backup repository that it sent the wall files to, or via streaming replication, or belt embraces. You might want it to do both. You might want to use a similar setup as this to create a clone of your database for test or development purposes. And you want your operator to allow you to do that very, very simply. In terms of security and data protection, there's obviously going to be manual effort here. You want to be in charge of defining your security policies. But the operator should provide you with the means to implement those. So you want it to do things like managing database access, so creating database users, making sure they've got the right permissions as defined by you. Maintaining pghba.conf entries, encrypting passwords and storing them in secrets, managing SSL or TLS, generating and managing the certificates for you. Monitoring is a hugely important part of database administration. You really need to know what's going on in your database. You want to be aware of potential issues before they come emergencies. Rather than reinvent the wheel and create your own monitoring system, trying to figure out the queries that you need, the scripts that you might want to run to keep track of what's going on in your database and then maybe setting up your own dashboards, you can let the operator configure monitoring for you. So the pigo monitoring architecture, for example, looks a bit like this. You want the operator to configure the logging parameters for you. You want to make sure that you're actually storing all of the information that you want in your PostQuest logs. You want it to export metrics from your database. So we have a sidecar there for metrics from your database. You then want it to either integrate with your existing monitoring stack or you want it to stand up a monitoring stack for you. So Prometheus with pre-configured metrics, alert manager with some pre-configured alerts, Grafana with dashboards that are already set up for you. You'll probably be pleased to know that it's not going to take over your database design and data modeling because you obviously want to keep some of the fun bits of database administration. And although the operator isn't going to completely relieve you of support duties, it should mean that you're called on less frequently in an emergency in the middle of the night, for example, because you've got that high availability already put in place and automated. You've got the self-healing capabilities of Kubernetes. You've got the monitoring in place so that you've already been keeping an eye on things and trying to react before things become a problem. You've got alerting in place, so hopefully when thresholds are exceeded, you already know about those things and you can fix them before they become emergencies. So hopefully you're only going to get involved if there's something particularly complicated going on that needs detailed analysis. What about database software install and upgrade? Well, the install bit's easy. You don't actually need to do any installing of Postgres or of those associated tools such as PG Backgres, the Prometheus Grafana, your Petrona. You don't need to install any of those because they come pre-installed in the container images that are available with your operator. As for upgrades, a few slides back we talked about stateful sets being useful for applications that need ordered automated rolling updates. The operator can use exactly that technique for performing a Postgres minor version upgrade. Next week, when you want to upgrade either from 15.5 to 15.6 or 16.1 to 16.2, you can simply change the version in the manifest, so in the definition of your cluster. Reapply it and then you can watch as the replicas are upgraded. One of the replicas will be promoted to be the new primary. And then finally, the original primary is updated. Major version upgrades obviously require a lot more planning and testing. So the operator isn't going to take away all of those tasks for you. It's not going to take care of reading all of the release notes. It's not going to take care of testing your application with the new version. It's not going to take care of checking your application code to make sure that you're not using any deprecated features, for example. But you do want it to perform automated upgrades from one major version to another. So in the case of Pego, that uses PG upgrade. Other operators might either use PG upgrade or logical replication or PG dump and PG restore. Does the operator mean then that we don't need any database expertise? Well, as we saw, there is a lot of database expertise that's built into the operator. But it's not going to do everything. We still need a human export for things, experts for things like strategic considerations, looking at the need, the actual needs of the database application, considering business requirements, for example. Okay, performance tuning. Again, it's not going to do everything for you, but it can do certain things. You'll still need to do the initial setup, making sure that you've got your application configured the way you wanted, et cetera. But you do expect the operator to do some of it for you. So it could set initial parameters to a sensible value. It could make sure that you've got connection pooling available, make sure that you've got the PG stat statements, extension available and enabled, make sure that slow queries are being logged, for example. And as we saw before, make sure that you've got monitoring and alerting in place. Capacity planning. So the monitoring and alerting that you've put in place should mean that you can see what's going on in your database. You can see the resources it's using. You can see how much space it's using. You should be able to know approximately what kind of trends you're seeing. In your definition, in your manifest, your definition of your cluster, you'll have said how much storage you want. If you're using a storage class that supports dynamic resizing, you can just change that in your manifest, reapply it, and your volume will be resized. If not, you can create a new instance with a bigger volume and use the same technique that we saw for the Postgres minor version upgrade to do a rolling increase of your volume. If you're using that rolling technique, you can also use that if you want to reduce your volume in size. Other resources such as CPU and memory, for example, can also easily be scaled. And you can use things like the request and the limits to make sure that you allow it to claim more resources up to a certain threshold. Database creation and database maintenance. So users and databases, I don't know the details of how this works in other operators, but in Pego, for example, you can state a number of users that you want to have created automatically in your database and the databases that they should be able to access. If those databases don't already exist, it will create them for you. Database maintenance is a really wide ranging and very unspecific task. So this is a list of some of the things that might fall into that category of database maintenance. And we've already looked at a lot of them. So we know that we can expect our operator to help us with a lot of those. And other maintenance tasks such as index rebuilds, for example, gathering statistics, that kind of thing could be scheduled via the operator. You can define everything in the same place so that you don't have to then manually change things and implement things later. Okay, so you're now obviously really excited to give this a try and see all this magic for yourself. How can you do that? I'll show you how to get started with Pego, but as I've said, other operators are available. First of all, beg, borrow or build yourself Kubernetes cluster. As I've said, that can be either one that you build yourself, that can be in the cloud, that can be managed for you, or it can be vanilla Kubernetes. It can be one of the many different things. It could be OpenShift, Tanzu, Rancher, all sorts of different Kubernetes platforms available. Next, fork the Postgres operator example's repository, which gives you a sample manifest. It will give you Helm charts, customized manifests that help you install and configure and deploy your first Postgres cluster using the operator. Okay, so I'm just going to go through this step by step. So clone the repo and navigate into it. Create a Postgres operator namespace, and if you're lazy like me and don't like to keep typing minus n and the name of your namespace, set it as your default namespace. Install the operator using the customized file that you'll find in the install default folder. Then you'll see that it will create a load of resources for you that are needed for managing and managing that database cluster. So the one that we're most interested in is this Postgres cluster custom resource definition. That's what's going to let us define our cluster. Now, to define our cluster, we're going to just use the example Postgres.yaml that's provided for us, why reinvent the wheel. So I've created a copy of that in a Fostum folder, and then I can make whatever edits I want to my Postgres.yaml. So the first couple of lines here is just saying that I'm creating a Postgres cluster resource, that I'm going to give it a name Fostum just so I know which cluster it is, that I want to use Postgres version 16, that I want three replicas. So replicas here is in the Kubernetes sense of the word replica. So that means three database pods. So I'll have a primary database pod and two standby or replica database pods. And then I'm just using the default storage class, leaving all of the defaults there. So I'm just going to have a local volume here, but you can specify whichever storage works in your environment. You might want cloud storage, network storage, local, you know, whatever you're using. And I've just said that I want to have a one gig volume. That might not be hugely visible right down at the bottom there. Okay, last few lines of the manifest. So the last few lines set up the backup and recovery. So at the moment, we've got backups, pgbackrest, it is, it's just pgbackrest. I'm just going to configure a single repository called it repo one. And again, I'm just choosing all of the default parameters. So I've just got a local backup repository. You probably don't want to do that in production. You will probably want some kind of sensible place to store your backups, but this is just my little test cluster. So a local volume is absolutely fine. You can specify multiple repositories if you want to. So you can have a local repository and a cloud repository or a Google cloud repository and AWS one or whatever combination of repositories you want. Okay, so once I've created my manifest, that's my definition of my cluster. I apply that and the operator will set me up a three node high availability post-press cluster. So it's now got the Petroni managing that high availability. I've got a service that points me to my primary database. I've got all the things that we talked about before. So if we have a look at the pods that that's created for us, we can see that was my operator itself from when I did the operator install. These are my three, oh, sorry, no, those are my three post-press instances. I can use a different command if I want to see which is primary and which is stand by. It's created my repository and it's taken an initial backup for me. I've also, I've not talked about that, but there's also a PG admin pod there as well. So you can use PG admin to log in and look at your database and run queries, et cetera. So that was, I think it was a 26 line manifest. That's, that was enough to get you up and running with high availability, backup and recovery. You can then make all sorts of changes. If you tweak that manifest, you can set up backup schedules. You can create that standby cluster that we talked about. You can install the monitoring stack. You can implement connection pooling with PG bouncer. You can set your different post-press parameters, your patroni parameters. You can tell it to run certain SQL queries when it initializes your database, et cetera. I forgot other things. You can tell it where to schedule your pods if you want to. I've just left everything at the default and let it schedule them wherever they want. I've got a three node Kubernetes cluster and I'm just leaving it to do its thing. So that was just a really quick kind of, how can I get started? But I really do, even if you're not planning on using it in production, it's really good fun. So give it a try, kill your pods, delete services and watch it kind of repair itself. It's fun. So conclusions. So a post-press operator for Kubernetes really does act like a virtual database administrator. We've seen that it knows how to do most database administration tasks. It can automate everything from deployment of a high availability cluster to backup and recovery, monitoring, upgrades, et cetera. It lets you implement a, I think this is from my marketing team slides, it lets you implement a robust, secure, scalable architecture. It combines the strength of post-press and Kubernetes so that it keeps your database cluster running smoothly. And more importantly to me is it leaves you free to do the strategic, interesting and fun bits of database administration. So that is all that I've got to say on the topic of post-press on Kubernetes. And before I move to my thank you slide, I just want to do a plug in case today hasn't been enough post-press for you. The next community post-press conference in Europe is PG Day Paris on the 14th of March. And we obviously really hope that as many of you as possible can join us. And just for Fostum, we have created a 10% discount code with limited availability. So I think that's available just until tomorrow. So very much hope to see you there. And that's me. I've put a link to the slides there in case anybody wants to see those. And I think, do we have time for questions? We do. So thank you. That was a very comprehensive talk with a lot of useful insights. Anyone who, I see a hand there. If you can make sure the next question is right at the bottom so that Jimmy has to run back and forth, that'd be great. And can ask you a favor. Can you repeat the question please so that it makes it into the video as well? Say you want to install an extension that's not by default in post-press, like post-GIS. How would that be handled by the post-press operator? Will it be detected when upgrading in such? So this operator does have that, sorry, the question was, if you want to install an extension that's not by default, something that's not by default in post-press, how would you handle that? So for this particular operator, post-GIS is one of the extensions that's available in the images. For others, I don't know, but I suspect that that would be available because it's an extremely popular extension. So we tried to include the most popular extensions. Otherwise, you can create a layer on top of the container images that are provided for you. You can install the extra extensions into that. Some of them will let you create your own custom sidecars. So we saw the extra helper pods, so you might be able to install certain things into a sidecar as well. You said that if a primary instance goes down, then the job of the operator is to assign, for example, replica one is now the new primary. So why to rephrase it, why is it, we don't want the operator and the primary instance to run on the same worker in the Kubernetes because if that worker is shut down of the electricity, there isn't anyone to assign a new primary. Okay, so the question is to do with the operator assigning a new primary database and saying that we don't want our two database pods to be on the same worker node, is that correct? So actually embedded in the operator code in this case are some anti-affinity rules. You've spoken a lot about the advantages. Do you also know some downsides, like for example the lower performance on the same hardware or something like that? So the question, I've obviously spoken a lot about the advantages but are the disadvantages, for example, performance for the same hardware. I haven't done extensive, well I say extensive, I haven't done benchmarking, but just anecdotally from what our customers see, they're not reporting any significant performance degradation. That's not to say that there isn't any, I haven't like I say, I haven't done those tests, but we certainly haven't seen customers saying we moved to Kubernetes and it's running more slowly. So you said that progress instances, progress pods are being managed as a stateful state, but what about pullers? So how many pullers do we need? For example, if I want to expose read writes and read-only service to my applications. So do you use a single puller for those read writes and read-only requests or you use a separate set of pullers? So the question if I've understood correctly is how do we use a single puller or multiple? You can configure, it's up to you depending on your actual use case, depending on where your connections are coming from, how many connections you've got, how they're being used, etc. You can define how many you want. There was a very, on Friday for the extra PG day, there was a very interesting presentation at by Joe about a problem with G-Lib C and correlations and one of the workarounds was you created your own binary. That's going to be a lot more complicated in Kubernetes or is that something which your operator supports? I'm just curious how to manage that sort of rare but important edge case? I guess that's the kind of situation where, oh sorry, repeat the question. So there was a talk on Friday by Joe Conway where he talked about an interesting edge case where there was an issue with G-Lib C and the workaround was to recompile the binaries. So is that more complicated with the operator? I mean it's for the average user that's going to be complicated whether you're running in Kubernetes or not potentially. That's the kind of thing where we would probably recreate a container image with that workaround and make that available. So certainly if it was for a paying customer, I imagine that's the kind of thing that would be done with the images available to the community. I guess at some point that would be made available or as I said before you can create your own images so you can base your own images on the ones that we provide so you could potentially do it in there. So potentially a bit more complicated but it's still the same process. And we have time for last question over here. Sorry. I was wondering how backups can be restored after a cluster-wide issue for instance. So the question is how can a backup be restored after a cluster-wide issue? So in the manifest there's a section where you can say what the source of your cluster should be so you can say that it should come from a backup and you can obviously put in your point in time recovery requirements etc. in there. Thank you very much.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.0, "text": " So, time to start. Please welcome to the stage, speaking about running Postgres on Kubernetes,", "tokens": [50364, 407, 11, 565, 281, 722, 13, 2555, 2928, 281, 264, 3233, 11, 4124, 466, 2614, 10223, 45189, 322, 23145, 11, 51064], "temperature": 0.0, "avg_logprob": -0.37060839789254324, "compression_ratio": 1.3263888888888888, "no_speech_prob": 0.3062363862991333}, {"id": 1, "seek": 0, "start": 14.0, "end": 16.0, "text": " Karen Jax.", "tokens": [51064, 14834, 508, 2797, 13, 51164], "temperature": 0.0, "avg_logprob": -0.37060839789254324, "compression_ratio": 1.3263888888888888, "no_speech_prob": 0.3062363862991333}, {"id": 2, "seek": 0, "start": 16.0, "end": 27.8, "text": " Hi, thanks, Jimmy. Yep, so I'm Karen Jax. I'm a senior solutions architect at Crunchy", "tokens": [51164, 2421, 11, 3231, 11, 15709, 13, 7010, 11, 370, 286, 478, 14834, 508, 2797, 13, 286, 478, 257, 7965, 6547, 6331, 412, 44233, 88, 51754], "temperature": 0.0, "avg_logprob": -0.37060839789254324, "compression_ratio": 1.3263888888888888, "no_speech_prob": 0.3062363862991333}, {"id": 3, "seek": 2780, "start": 27.8, "end": 33.4, "text": " Data and I'm going to talk to you about running databases on Kubernetes or how to create a", "tokens": [50364, 11888, 293, 286, 478, 516, 281, 751, 281, 291, 466, 2614, 22380, 322, 23145, 420, 577, 281, 1884, 257, 50644], "temperature": 0.0, "avg_logprob": -0.14689178052155868, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.09197809547185898}, {"id": 4, "seek": 2780, "start": 33.4, "end": 42.84, "text": " virtual DBA. I've always worked with databases, so I've just included a little picture of my", "tokens": [50644, 6374, 413, 9295, 13, 286, 600, 1009, 2732, 365, 22380, 11, 370, 286, 600, 445, 5556, 257, 707, 3036, 295, 452, 51116], "temperature": 0.0, "avg_logprob": -0.14689178052155868, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.09197809547185898}, {"id": 5, "seek": 2780, "start": 42.84, "end": 48.96, "text": " career to date just to prove that I'm vaguely qualified to talk to you about DBA type stuff.", "tokens": [51116, 3988, 281, 4002, 445, 281, 7081, 300, 286, 478, 13501, 48863, 15904, 281, 751, 281, 291, 466, 413, 9295, 2010, 1507, 13, 51422], "temperature": 0.0, "avg_logprob": -0.14689178052155868, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.09197809547185898}, {"id": 6, "seek": 2780, "start": 48.96, "end": 53.3, "text": " This is the first ever job title I've had that doesn't have the word database in it,", "tokens": [51422, 639, 307, 264, 700, 1562, 1691, 4876, 286, 600, 632, 300, 1177, 380, 362, 264, 1349, 8149, 294, 309, 11, 51639], "temperature": 0.0, "avg_logprob": -0.14689178052155868, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.09197809547185898}, {"id": 7, "seek": 5330, "start": 53.3, "end": 59.3, "text": " but I still only work with databases.", "tokens": [50364, 457, 286, 920, 787, 589, 365, 22380, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24976165927186303, "compression_ratio": 1.4557823129251701, "no_speech_prob": 0.008996560238301754}, {"id": 8, "seek": 5330, "start": 59.3, "end": 67.86, "text": " Okay, so in the abstract I said a lot of people who have looking after databases as part of", "tokens": [50664, 1033, 11, 370, 294, 264, 12649, 286, 848, 257, 688, 295, 561, 567, 362, 1237, 934, 22380, 382, 644, 295, 51092], "temperature": 0.0, "avg_logprob": -0.24976165927186303, "compression_ratio": 1.4557823129251701, "no_speech_prob": 0.008996560238301754}, {"id": 9, "seek": 5330, "start": 67.86, "end": 76.82, "text": " their job responsibilities aren't actually these days database administrators. I see", "tokens": [51092, 641, 1691, 16190, 3212, 380, 767, 613, 1708, 8149, 27754, 13, 286, 536, 51540], "temperature": 0.0, "avg_logprob": -0.24976165927186303, "compression_ratio": 1.4557823129251701, "no_speech_prob": 0.008996560238301754}, {"id": 10, "seek": 7682, "start": 76.82, "end": 83.82, "text": " sysadmins, I see infrastructure teams, I see application developers, I see DevOps teams,", "tokens": [50364, 262, 749, 345, 76, 1292, 11, 286, 536, 6896, 5491, 11, 286, 536, 3861, 8849, 11, 286, 536, 43051, 5491, 11, 50714], "temperature": 0.0, "avg_logprob": -0.2580954233805339, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.05286458507180214}, {"id": 11, "seek": 7682, "start": 83.82, "end": 89.33999999999999, "text": " all sorts of different people who don't necessarily have a training or experience in database", "tokens": [50714, 439, 7527, 295, 819, 561, 567, 500, 380, 4725, 362, 257, 3097, 420, 1752, 294, 8149, 50990], "temperature": 0.0, "avg_logprob": -0.2580954233805339, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.05286458507180214}, {"id": 12, "seek": 7682, "start": 89.33999999999999, "end": 94.97999999999999, "text": " administration, database administration who are expected to look after their organization's", "tokens": [50990, 7236, 11, 8149, 7236, 567, 366, 5176, 281, 574, 934, 641, 4475, 311, 51272], "temperature": 0.0, "avg_logprob": -0.2580954233805339, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.05286458507180214}, {"id": 13, "seek": 7682, "start": 94.97999999999999, "end": 100.85999999999999, "text": " databases. And I see that in particular in organizations where everything's running on", "tokens": [51272, 22380, 13, 400, 286, 536, 300, 294, 1729, 294, 6150, 689, 1203, 311, 2614, 322, 51566], "temperature": 0.0, "avg_logprob": -0.2580954233805339, "compression_ratio": 1.7028301886792452, "no_speech_prob": 0.05286458507180214}, {"id": 14, "seek": 10086, "start": 100.9, "end": 107.98, "text": " Kubernetes and the databases are just seen as another part of that landscape. So if you're", "tokens": [50366, 23145, 293, 264, 22380, 366, 445, 1612, 382, 1071, 644, 295, 300, 9661, 13, 407, 498, 291, 434, 50720], "temperature": 0.0, "avg_logprob": -0.17032889662117795, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.21488161385059357}, {"id": 15, "seek": 10086, "start": 107.98, "end": 113.46, "text": " in that situation what do you do? Do you go out and quickly learn to be a database administrator?", "tokens": [50720, 294, 300, 2590, 437, 360, 291, 360, 30, 1144, 291, 352, 484, 293, 2661, 1466, 281, 312, 257, 8149, 25529, 30, 50994], "temperature": 0.0, "avg_logprob": -0.17032889662117795, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.21488161385059357}, {"id": 16, "seek": 10086, "start": 113.46, "end": 122.7, "text": " Do you phone a friend? Do you panic? I mean a better option would probably be to go out and", "tokens": [50994, 1144, 291, 2593, 257, 1277, 30, 1144, 291, 14783, 30, 286, 914, 257, 1101, 3614, 576, 1391, 312, 281, 352, 484, 293, 51456], "temperature": 0.0, "avg_logprob": -0.17032889662117795, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.21488161385059357}, {"id": 17, "seek": 10086, "start": 122.7, "end": 129.54, "text": " think about using one of the Kubernetes operators that's been created by database experts.", "tokens": [51456, 519, 466, 1228, 472, 295, 264, 23145, 19077, 300, 311, 668, 2942, 538, 8149, 8572, 13, 51798], "temperature": 0.0, "avg_logprob": -0.17032889662117795, "compression_ratio": 1.6787330316742082, "no_speech_prob": 0.21488161385059357}, {"id": 18, "seek": 12954, "start": 129.54, "end": 141.5, "text": " So we'll have a look at what a Kubernetes operator does and how it can help you to create a virtual", "tokens": [50364, 407, 321, 603, 362, 257, 574, 412, 437, 257, 23145, 12973, 775, 293, 577, 309, 393, 854, 291, 281, 1884, 257, 6374, 50962], "temperature": 0.0, "avg_logprob": -0.1765403344597615, "compression_ratio": 1.513089005235602, "no_speech_prob": 0.0010443166829645634}, {"id": 19, "seek": 12954, "start": 141.5, "end": 152.45999999999998, "text": " DBA and what you want to look for when you're choosing an operator. So we'll quickly have a", "tokens": [50962, 413, 9295, 293, 437, 291, 528, 281, 574, 337, 562, 291, 434, 10875, 364, 12973, 13, 407, 321, 603, 2661, 362, 257, 51510], "temperature": 0.0, "avg_logprob": -0.1765403344597615, "compression_ratio": 1.513089005235602, "no_speech_prob": 0.0010443166829645634}, {"id": 20, "seek": 12954, "start": 152.45999999999998, "end": 158.94, "text": " look back at how database architecture has evolved over time. Make sure everyone's kind of on the", "tokens": [51510, 574, 646, 412, 577, 8149, 9482, 575, 14178, 670, 565, 13, 4387, 988, 1518, 311, 733, 295, 322, 264, 51834], "temperature": 0.0, "avg_logprob": -0.1765403344597615, "compression_ratio": 1.513089005235602, "no_speech_prob": 0.0010443166829645634}, {"id": 21, "seek": 15894, "start": 158.98, "end": 168.62, "text": " same page so that you know what kind of things Kubernetes does and what it's useful for. Look at", "tokens": [50366, 912, 3028, 370, 300, 291, 458, 437, 733, 295, 721, 23145, 775, 293, 437, 309, 311, 4420, 337, 13, 2053, 412, 50848], "temperature": 0.0, "avg_logprob": -0.14659735289486972, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.003931498154997826}, {"id": 22, "seek": 15894, "start": 168.62, "end": 173.18, "text": " some of the special features that makes Kubernetes suitable for running a database environment.", "tokens": [50848, 512, 295, 264, 2121, 4122, 300, 1669, 23145, 12873, 337, 2614, 257, 8149, 2823, 13, 51076], "temperature": 0.0, "avg_logprob": -0.14659735289486972, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.003931498154997826}, {"id": 23, "seek": 15894, "start": 173.18, "end": 179.26, "text": " Try and figure out what a DBA actually does because that's going to then give us an idea of what we", "tokens": [51076, 6526, 293, 2573, 484, 437, 257, 413, 9295, 767, 775, 570, 300, 311, 516, 281, 550, 976, 505, 364, 1558, 295, 437, 321, 51380], "temperature": 0.0, "avg_logprob": -0.14659735289486972, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.003931498154997826}, {"id": 24, "seek": 15894, "start": 179.26, "end": 188.74, "text": " need the operator to do. Understand what an operator for Kubernetes is. Look at the features that", "tokens": [51380, 643, 264, 12973, 281, 360, 13, 26093, 437, 364, 12973, 337, 23145, 307, 13, 2053, 412, 264, 4122, 300, 51854], "temperature": 0.0, "avg_logprob": -0.14659735289486972, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.003931498154997826}, {"id": 25, "seek": 18874, "start": 188.78, "end": 194.5, "text": " you might expect from it and then finally have a little look at how you might go about implementing", "tokens": [50366, 291, 1062, 2066, 490, 309, 293, 550, 2721, 362, 257, 707, 574, 412, 577, 291, 1062, 352, 466, 18114, 50652], "temperature": 0.0, "avg_logprob": -0.13424115957215774, "compression_ratio": 1.6, "no_speech_prob": 0.0011684681521728635}, {"id": 26, "seek": 18874, "start": 194.5, "end": 201.82000000000002, "text": " an operator and trying that out for yourself. So first of all the history, I promise it will", "tokens": [50652, 364, 12973, 293, 1382, 300, 484, 337, 1803, 13, 407, 700, 295, 439, 264, 2503, 11, 286, 6228, 309, 486, 51018], "temperature": 0.0, "avg_logprob": -0.13424115957215774, "compression_ratio": 1.6, "no_speech_prob": 0.0011684681521728635}, {"id": 27, "seek": 18874, "start": 201.82000000000002, "end": 209.38, "text": " be extremely brief. Once upon a time databases were deployed on physical servers or bare metal.", "tokens": [51018, 312, 4664, 5353, 13, 3443, 3564, 257, 565, 22380, 645, 17826, 322, 4001, 15909, 420, 6949, 5760, 13, 51396], "temperature": 0.0, "avg_logprob": -0.13424115957215774, "compression_ratio": 1.6, "no_speech_prob": 0.0011684681521728635}, {"id": 28, "seek": 18874, "start": 209.38, "end": 216.02, "text": " You could run multiple databases on a single server if you wanted to but you had to accept that", "tokens": [51396, 509, 727, 1190, 3866, 22380, 322, 257, 2167, 7154, 498, 291, 1415, 281, 457, 291, 632, 281, 3241, 300, 51728], "temperature": 0.0, "avg_logprob": -0.13424115957215774, "compression_ratio": 1.6, "no_speech_prob": 0.0011684681521728635}, {"id": 29, "seek": 21602, "start": 216.06, "end": 222.62, "text": " those databases are sharing the resources of that physical server and competing for them. If you", "tokens": [50366, 729, 22380, 366, 5414, 264, 3593, 295, 300, 4001, 7154, 293, 15439, 337, 552, 13, 759, 291, 50694], "temperature": 0.0, "avg_logprob": -0.16138709675181995, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.0013163082767277956}, {"id": 30, "seek": 21602, "start": 222.62, "end": 229.62, "text": " wanted isolation you had to deploy a single database instance per physical server and that's", "tokens": [50694, 1415, 16001, 291, 632, 281, 7274, 257, 2167, 8149, 5197, 680, 4001, 7154, 293, 300, 311, 51044], "temperature": 0.0, "avg_logprob": -0.16138709675181995, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.0013163082767277956}, {"id": 31, "seek": 21602, "start": 229.62, "end": 236.78, "text": " going to bring with it very high overheads in terms of maintenance, operating costs,", "tokens": [51044, 516, 281, 1565, 365, 309, 588, 1090, 19922, 82, 294, 2115, 295, 11258, 11, 7447, 5497, 11, 51402], "temperature": 0.0, "avg_logprob": -0.16138709675181995, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.0013163082767277956}, {"id": 32, "seek": 21602, "start": 236.78, "end": 242.74, "text": " hardware costs etc. But you do get that isolation, you can manage them independently.", "tokens": [51402, 8837, 5497, 5183, 13, 583, 291, 360, 483, 300, 16001, 11, 291, 393, 3067, 552, 21761, 13, 51700], "temperature": 0.0, "avg_logprob": -0.16138709675181995, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.0013163082767277956}, {"id": 33, "seek": 24274, "start": 243.18, "end": 250.3, "text": " Then we got virtualization in the form of VMs. So now you can carve up a single physical", "tokens": [50386, 1396, 321, 658, 6374, 2144, 294, 264, 1254, 295, 18038, 82, 13, 407, 586, 291, 393, 33832, 493, 257, 2167, 4001, 50742], "temperature": 0.0, "avg_logprob": -0.17842248280843098, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012839111732318997}, {"id": 34, "seek": 24274, "start": 250.3, "end": 258.46000000000004, "text": " server into multiple VMs and you can deploy a database instance to each of those VMs.", "tokens": [50742, 7154, 666, 3866, 18038, 82, 293, 291, 393, 7274, 257, 8149, 5197, 281, 1184, 295, 729, 18038, 82, 13, 51150], "temperature": 0.0, "avg_logprob": -0.17842248280843098, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012839111732318997}, {"id": 35, "seek": 24274, "start": 258.46000000000004, "end": 266.26, "text": " So now you've got isolation, you can manage those independently. You've still got fairly high", "tokens": [51150, 407, 586, 291, 600, 658, 16001, 11, 291, 393, 3067, 729, 21761, 13, 509, 600, 920, 658, 6457, 1090, 51540], "temperature": 0.0, "avg_logprob": -0.17842248280843098, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012839111732318997}, {"id": 36, "seek": 24274, "start": 266.26, "end": 270.90000000000003, "text": " overheads. So you've got the, as well as your underlying operating system, you've got the", "tokens": [51540, 19922, 82, 13, 407, 291, 600, 658, 264, 11, 382, 731, 382, 428, 14217, 7447, 1185, 11, 291, 600, 658, 264, 51772], "temperature": 0.0, "avg_logprob": -0.17842248280843098, "compression_ratio": 1.6728971962616823, "no_speech_prob": 0.0012839111732318997}, {"id": 37, "seek": 27090, "start": 270.9, "end": 280.9, "text": " hypervisor and then your guest OS. But you have got that isolation. And fast forward to 2024,", "tokens": [50364, 9848, 16457, 293, 550, 428, 8341, 12731, 13, 583, 291, 362, 658, 300, 16001, 13, 400, 2370, 2128, 281, 45237, 11, 50864], "temperature": 0.0, "avg_logprob": -0.1850130558013916, "compression_ratio": 1.4473684210526316, "no_speech_prob": 0.0029236909467726946}, {"id": 38, "seek": 27090, "start": 280.9, "end": 287.14, "text": " many databases are now running in containers. So just to recap, a container is a lightweight", "tokens": [50864, 867, 22380, 366, 586, 2614, 294, 17089, 13, 407, 445, 281, 20928, 11, 257, 10129, 307, 257, 22052, 51176], "temperature": 0.0, "avg_logprob": -0.1850130558013916, "compression_ratio": 1.4473684210526316, "no_speech_prob": 0.0029236909467726946}, {"id": 39, "seek": 27090, "start": 287.14, "end": 294.94, "text": " self-contained software package that you can deploy pretty much anywhere. Containers use", "tokens": [51176, 2698, 12, 9000, 3563, 4722, 7372, 300, 291, 393, 7274, 1238, 709, 4992, 13, 43732, 433, 764, 51566], "temperature": 0.0, "avg_logprob": -0.1850130558013916, "compression_ratio": 1.4473684210526316, "no_speech_prob": 0.0029236909467726946}, {"id": 40, "seek": 29494, "start": 294.98, "end": 301.58, "text": " features of the underlying OS. So it's using C groups and namespaces. So they're sharing", "tokens": [50366, 4122, 295, 264, 14217, 12731, 13, 407, 309, 311, 1228, 383, 3935, 293, 5288, 79, 2116, 13, 407, 436, 434, 5414, 50696], "temperature": 0.0, "avg_logprob": -0.15821004682971584, "compression_ratio": 1.6796875, "no_speech_prob": 0.005474462173879147}, {"id": 41, "seek": 29494, "start": 301.58, "end": 306.3, "text": " that underlying operating system. But they remain isolated from each other.", "tokens": [50696, 300, 14217, 7447, 1185, 13, 583, 436, 6222, 14621, 490, 1184, 661, 13, 50932], "temperature": 0.0, "avg_logprob": -0.15821004682971584, "compression_ratio": 1.6796875, "no_speech_prob": 0.005474462173879147}, {"id": 42, "seek": 29494, "start": 306.3, "end": 315.02, "text": " So now if we deploy things like this, those database instances can be managed completely", "tokens": [50932, 407, 586, 498, 321, 7274, 721, 411, 341, 11, 729, 8149, 14519, 393, 312, 6453, 2584, 51368], "temperature": 0.0, "avg_logprob": -0.15821004682971584, "compression_ratio": 1.6796875, "no_speech_prob": 0.005474462173879147}, {"id": 43, "seek": 29494, "start": 315.02, "end": 320.22, "text": " independently. They're not competing for resources. But because those containers are", "tokens": [51368, 21761, 13, 814, 434, 406, 15439, 337, 3593, 13, 583, 570, 729, 17089, 366, 51628], "temperature": 0.0, "avg_logprob": -0.15821004682971584, "compression_ratio": 1.6796875, "no_speech_prob": 0.005474462173879147}, {"id": 44, "seek": 29494, "start": 320.22, "end": 324.22, "text": " sharing the underlying OS, they're much more lightweight. You're looking at typically maybe", "tokens": [51628, 5414, 264, 14217, 12731, 11, 436, 434, 709, 544, 22052, 13, 509, 434, 1237, 412, 5850, 1310, 51828], "temperature": 0.0, "avg_logprob": -0.15821004682971584, "compression_ratio": 1.6796875, "no_speech_prob": 0.005474462173879147}, {"id": 45, "seek": 32422, "start": 324.3, "end": 333.18, "text": " tens of megabytes versus gigabytes for a VM. So not so many years ago, most people thought the", "tokens": [50368, 10688, 295, 10816, 24538, 5717, 42741, 337, 257, 18038, 13, 407, 406, 370, 867, 924, 2057, 11, 881, 561, 1194, 264, 50812], "temperature": 0.0, "avg_logprob": -0.15627669152759371, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.0015624332008883357}, {"id": 46, "seek": 32422, "start": 333.18, "end": 339.94000000000005, "text": " idea of running databases in containers was a completely crazy idea. This year, all of my", "tokens": [50812, 1558, 295, 2614, 22380, 294, 17089, 390, 257, 2584, 3219, 1558, 13, 639, 1064, 11, 439, 295, 452, 51150], "temperature": 0.0, "avg_logprob": -0.15627669152759371, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.0015624332008883357}, {"id": 47, "seek": 32422, "start": 339.94000000000005, "end": 345.26000000000005, "text": " customers are running some or all of their production databases in a containerized environment.", "tokens": [51150, 4581, 366, 2614, 512, 420, 439, 295, 641, 4265, 22380, 294, 257, 10129, 1602, 2823, 13, 51416], "temperature": 0.0, "avg_logprob": -0.15627669152759371, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.0015624332008883357}, {"id": 48, "seek": 32422, "start": 345.26000000000005, "end": 351.74, "text": " Some of them are running multi-terabyte mission critical databases. And some of them are running", "tokens": [51416, 2188, 295, 552, 366, 2614, 4825, 12, 391, 34529, 4447, 4924, 22380, 13, 400, 512, 295, 552, 366, 2614, 51740], "temperature": 0.0, "avg_logprob": -0.15627669152759371, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.0015624332008883357}, {"id": 49, "seek": 35174, "start": 351.82, "end": 357.1, "text": " hundreds or even thousands of databases. So some things obviously changed. There's been a shift to", "tokens": [50368, 6779, 420, 754, 5383, 295, 22380, 13, 407, 512, 721, 2745, 3105, 13, 821, 311, 668, 257, 5513, 281, 50632], "temperature": 0.0, "avg_logprob": -0.13362725958766708, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.002983102109283209}, {"id": 50, "seek": 35174, "start": 357.1, "end": 366.06, "text": " make people see this now as a viable architecture for databases. So let's talk about some of those", "tokens": [50632, 652, 561, 536, 341, 586, 382, 257, 22024, 9482, 337, 22380, 13, 407, 718, 311, 751, 466, 512, 295, 729, 51080], "temperature": 0.0, "avg_logprob": -0.13362725958766708, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.002983102109283209}, {"id": 51, "seek": 35174, "start": 366.06, "end": 370.86, "text": " features that have made people move to a containerized environment for their databases.", "tokens": [51080, 4122, 300, 362, 1027, 561, 1286, 281, 257, 10129, 1602, 2823, 337, 641, 22380, 13, 51320], "temperature": 0.0, "avg_logprob": -0.13362725958766708, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.002983102109283209}, {"id": 52, "seek": 35174, "start": 373.42, "end": 378.7, "text": " So as I mentioned briefly, containers are isolated, they're lightweight, and they're portable.", "tokens": [51448, 407, 382, 286, 2835, 10515, 11, 17089, 366, 14621, 11, 436, 434, 22052, 11, 293, 436, 434, 21800, 13, 51712], "temperature": 0.0, "avg_logprob": -0.13362725958766708, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.002983102109283209}, {"id": 53, "seek": 37870, "start": 378.7, "end": 383.74, "text": " You can create them and destroy them quickly and easily, which means that a containerized", "tokens": [50364, 509, 393, 1884, 552, 293, 5293, 552, 2661, 293, 3612, 11, 597, 1355, 300, 257, 10129, 1602, 50616], "temperature": 0.0, "avg_logprob": -0.08789979327808727, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.006021217908710241}, {"id": 54, "seek": 37870, "start": 383.74, "end": 391.5, "text": " environment can be extremely flexible. It's very easy to scale. But containers are also stateless", "tokens": [50616, 2823, 393, 312, 4664, 11358, 13, 467, 311, 588, 1858, 281, 4373, 13, 583, 17089, 366, 611, 2219, 4272, 51004], "temperature": 0.0, "avg_logprob": -0.08789979327808727, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.006021217908710241}, {"id": 55, "seek": 37870, "start": 391.5, "end": 398.14, "text": " and ephemeral. A container's data and its state only last as long as that container exists. As", "tokens": [51004, 293, 308, 41245, 2790, 13, 316, 10129, 311, 1412, 293, 1080, 1785, 787, 1036, 382, 938, 382, 300, 10129, 8198, 13, 1018, 51336], "temperature": 0.0, "avg_logprob": -0.08789979327808727, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.006021217908710241}, {"id": 56, "seek": 37870, "start": 398.14, "end": 403.9, "text": " soon as your container's destroyed, you lose that. Which as you can imagine strikes fear into the", "tokens": [51336, 2321, 382, 428, 10129, 311, 8937, 11, 291, 3624, 300, 13, 3013, 382, 291, 393, 3811, 16750, 4240, 666, 264, 51624], "temperature": 0.0, "avg_logprob": -0.08789979327808727, "compression_ratio": 1.6740088105726871, "no_speech_prob": 0.006021217908710241}, {"id": 57, "seek": 40390, "start": 403.97999999999996, "end": 409.9, "text": " heart of your average database administrator. You need to take special care obviously when you're", "tokens": [50368, 1917, 295, 428, 4274, 8149, 25529, 13, 509, 643, 281, 747, 2121, 1127, 2745, 562, 291, 434, 50664], "temperature": 0.0, "avg_logprob": -0.10077917719461832, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.008934758603572845}, {"id": 58, "seek": 40390, "start": 409.9, "end": 417.58, "text": " using a containerized environment for a database or at least ones where you have any kind of", "tokens": [50664, 1228, 257, 10129, 1602, 2823, 337, 257, 8149, 420, 412, 1935, 2306, 689, 291, 362, 604, 733, 295, 51048], "temperature": 0.0, "avg_logprob": -0.10077917719461832, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.008934758603572845}, {"id": 59, "seek": 40390, "start": 417.58, "end": 425.17999999999995, "text": " attach any kind of importance to your data. So putting aside the stateless and ephemeral issues", "tokens": [51048, 5085, 604, 733, 295, 7379, 281, 428, 1412, 13, 407, 3372, 7359, 264, 2219, 4272, 293, 308, 41245, 2790, 2663, 51428], "temperature": 0.0, "avg_logprob": -0.10077917719461832, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.008934758603572845}, {"id": 60, "seek": 40390, "start": 425.17999999999995, "end": 431.58, "text": " just for now, your organization probably isn't managing just a couple of databases. Excuse me", "tokens": [51428, 445, 337, 586, 11, 428, 4475, 1391, 1943, 380, 11642, 445, 257, 1916, 295, 22380, 13, 11359, 385, 51748], "temperature": 0.0, "avg_logprob": -0.10077917719461832, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.008934758603572845}, {"id": 61, "seek": 43158, "start": 431.58, "end": 446.46, "text": " whilst I get my display back the way it's supposed to be. A lot of organizations are running hundreds", "tokens": [50364, 18534, 286, 483, 452, 4674, 646, 264, 636, 309, 311, 3442, 281, 312, 13, 316, 688, 295, 6150, 366, 2614, 6779, 51108], "temperature": 0.0, "avg_logprob": -0.06900634047805622, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.007120517082512379}, {"id": 62, "seek": 43158, "start": 446.46, "end": 451.41999999999996, "text": " or thousands of databases. And once you get to that stage, it's probably going to feel a lot", "tokens": [51108, 420, 5383, 295, 22380, 13, 400, 1564, 291, 483, 281, 300, 3233, 11, 309, 311, 1391, 516, 281, 841, 257, 688, 51356], "temperature": 0.0, "avg_logprob": -0.06900634047805622, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.007120517082512379}, {"id": 63, "seek": 43158, "start": 451.41999999999996, "end": 456.29999999999995, "text": " like herding cats. You don't want to be doing all of those maintenance tasks associated with those", "tokens": [51356, 411, 720, 3584, 11111, 13, 509, 500, 380, 528, 281, 312, 884, 439, 295, 729, 11258, 9608, 6615, 365, 729, 51600], "temperature": 0.0, "avg_logprob": -0.06900634047805622, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.007120517082512379}, {"id": 64, "seek": 43158, "start": 456.29999999999995, "end": 460.78, "text": " containers and the databases in them. You don't want to be doing that manually. You need some kind", "tokens": [51600, 17089, 293, 264, 22380, 294, 552, 13, 509, 500, 380, 528, 281, 312, 884, 300, 16945, 13, 509, 643, 512, 733, 51824], "temperature": 0.0, "avg_logprob": -0.06900634047805622, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.007120517082512379}, {"id": 65, "seek": 46078, "start": 460.78, "end": 469.65999999999997, "text": " of tooling to do that for you. Which is where container orchestration comes in. So container", "tokens": [50364, 295, 46593, 281, 360, 300, 337, 291, 13, 3013, 307, 689, 10129, 14161, 2405, 1487, 294, 13, 407, 10129, 50808], "temperature": 0.0, "avg_logprob": -0.10906923794355548, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.004207305144518614}, {"id": 66, "seek": 46078, "start": 469.65999999999997, "end": 476.85999999999996, "text": " orchestration platform such as Kubernetes will let you manage many containers. It will automate", "tokens": [50808, 14161, 2405, 3663, 1270, 382, 23145, 486, 718, 291, 3067, 867, 17089, 13, 467, 486, 31605, 51168], "temperature": 0.0, "avg_logprob": -0.10906923794355548, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.004207305144518614}, {"id": 67, "seek": 46078, "start": 476.85999999999996, "end": 484.7, "text": " the entire life cycle of those containers and it will integrate also with DevOps tools. So it", "tokens": [51168, 264, 2302, 993, 6586, 295, 729, 17089, 293, 309, 486, 13365, 611, 365, 43051, 3873, 13, 407, 309, 51560], "temperature": 0.0, "avg_logprob": -0.10906923794355548, "compression_ratio": 1.6206896551724137, "no_speech_prob": 0.004207305144518614}, {"id": 68, "seek": 48470, "start": 484.7, "end": 492.94, "text": " allows you to do things in a flexible, automated, repeatable way. So a container orchestration", "tokens": [50364, 4045, 291, 281, 360, 721, 294, 257, 11358, 11, 18473, 11, 7149, 712, 636, 13, 407, 257, 10129, 14161, 2405, 50776], "temperature": 0.0, "avg_logprob": -0.0893187742966872, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.004165655001997948}, {"id": 69, "seek": 48470, "start": 492.94, "end": 498.86, "text": " tool will take care of a long list of tasks, things like provisioning, deployment, configuring", "tokens": [50776, 2290, 486, 747, 1127, 295, 257, 938, 1329, 295, 9608, 11, 721, 411, 17225, 278, 11, 19317, 11, 6662, 1345, 51072], "temperature": 0.0, "avg_logprob": -0.0893187742966872, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.004165655001997948}, {"id": 70, "seek": 48470, "start": 498.86, "end": 507.98, "text": " your containers, scheduling, scaling up and down, repairing things, replacing containers that have", "tokens": [51072, 428, 17089, 11, 29055, 11, 21589, 493, 293, 760, 11, 46158, 721, 11, 19139, 17089, 300, 362, 51528], "temperature": 0.0, "avg_logprob": -0.0893187742966872, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.004165655001997948}, {"id": 71, "seek": 50798, "start": 508.06, "end": 516.38, "text": " failed services that have failed, creating services, allocating storage, different resources,", "tokens": [50368, 7612, 3328, 300, 362, 7612, 11, 4084, 3328, 11, 12660, 990, 6725, 11, 819, 3593, 11, 50784], "temperature": 0.0, "avg_logprob": -0.08391670453346382, "compression_ratio": 1.6374269005847952, "no_speech_prob": 0.023560142144560814}, {"id": 72, "seek": 50798, "start": 517.1, "end": 526.14, "text": " load balancing, network and security. Kubernetes is an open source container orchestration tool", "tokens": [50820, 3677, 22495, 11, 3209, 293, 3825, 13, 23145, 307, 364, 1269, 4009, 10129, 14161, 2405, 2290, 51272], "temperature": 0.0, "avg_logprob": -0.08391670453346382, "compression_ratio": 1.6374269005847952, "no_speech_prob": 0.023560142144560814}, {"id": 73, "seek": 50798, "start": 526.14, "end": 534.78, "text": " and it's the industry standard for container orchestration. Just to reassure you that it's", "tokens": [51272, 293, 309, 311, 264, 3518, 3832, 337, 10129, 14161, 2405, 13, 1449, 281, 19486, 540, 291, 300, 309, 311, 51704], "temperature": 0.0, "avg_logprob": -0.08391670453346382, "compression_ratio": 1.6374269005847952, "no_speech_prob": 0.023560142144560814}, {"id": 74, "seek": 53478, "start": 534.78, "end": 540.38, "text": " not a newfangled thing. It's actually been around a reasonable amount of time now and it's been a", "tokens": [50364, 406, 257, 777, 19134, 1493, 551, 13, 467, 311, 767, 668, 926, 257, 10585, 2372, 295, 565, 586, 293, 309, 311, 668, 257, 50644], "temperature": 0.0, "avg_logprob": -0.13176240704276346, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.004396460484713316}, {"id": 75, "seek": 53478, "start": 540.38, "end": 550.38, "text": " graduated CNCF, Cloud Native Computing Foundation projects, 2018. Kubernetes can be run pretty", "tokens": [50644, 13693, 14589, 34, 37, 11, 8061, 15093, 37804, 278, 10335, 4455, 11, 6096, 13, 23145, 393, 312, 1190, 1238, 51144], "temperature": 0.0, "avg_logprob": -0.13176240704276346, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.004396460484713316}, {"id": 76, "seek": 53478, "start": 550.38, "end": 555.5, "text": " much anywhere. You can use a managed cloud platform or you can run it yourself either on", "tokens": [51144, 709, 4992, 13, 509, 393, 764, 257, 6453, 4588, 3663, 420, 291, 393, 1190, 309, 1803, 2139, 322, 51400], "temperature": 0.0, "avg_logprob": -0.13176240704276346, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.004396460484713316}, {"id": 77, "seek": 53478, "start": 555.5, "end": 560.62, "text": " premises or in the cloud. You can either run vanilla Kubernetes or there are a whole host", "tokens": [51400, 34266, 420, 294, 264, 4588, 13, 509, 393, 2139, 1190, 17528, 23145, 420, 456, 366, 257, 1379, 3975, 51656], "temperature": 0.0, "avg_logprob": -0.13176240704276346, "compression_ratio": 1.5588235294117647, "no_speech_prob": 0.004396460484713316}, {"id": 78, "seek": 56062, "start": 560.62, "end": 565.74, "text": " of different flavors of Kubernetes. So you might hear people talk about OpenShift or Rancher or", "tokens": [50364, 295, 819, 16303, 295, 23145, 13, 407, 291, 1062, 1568, 561, 751, 466, 7238, 7774, 2008, 420, 37740, 260, 420, 50620], "temperature": 0.0, "avg_logprob": -0.14242042993244372, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0066693928092718124}, {"id": 79, "seek": 56062, "start": 565.74, "end": 573.34, "text": " Tanzu or EKS, AKS, GKE. There are all sorts of different versions of Kubernetes that you can use.", "tokens": [50620, 42420, 84, 420, 462, 31558, 11, 24789, 50, 11, 460, 8522, 13, 821, 366, 439, 7527, 295, 819, 9606, 295, 23145, 300, 291, 393, 764, 13, 51000], "temperature": 0.0, "avg_logprob": -0.14242042993244372, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0066693928092718124}, {"id": 80, "seek": 56062, "start": 578.22, "end": 586.14, "text": " So to the why would you want to run Postgres on Kubernetes? It's no longer considered a leading edge", "tokens": [51244, 407, 281, 264, 983, 576, 291, 528, 281, 1190, 10223, 45189, 322, 23145, 30, 467, 311, 572, 2854, 4888, 257, 5775, 4691, 51640], "temperature": 0.0, "avg_logprob": -0.14242042993244372, "compression_ratio": 1.4848484848484849, "no_speech_prob": 0.0066693928092718124}, {"id": 81, "seek": 58614, "start": 586.9399999999999, "end": 594.22, "text": " technology. It's very much mainstream now and it's trusted in production by many, many users", "tokens": [50404, 2899, 13, 467, 311, 588, 709, 15960, 586, 293, 309, 311, 16034, 294, 4265, 538, 867, 11, 867, 5022, 50768], "temperature": 0.0, "avg_logprob": -0.10647485369727724, "compression_ratio": 1.5258964143426295, "no_speech_prob": 0.057005733251571655}, {"id": 82, "seek": 58614, "start": 595.02, "end": 601.5, "text": " for database workloads. One of my favorite quotes is actually from Joe Conway's blog post where he", "tokens": [50808, 337, 8149, 32452, 13, 1485, 295, 452, 2954, 19963, 307, 767, 490, 6807, 2656, 676, 311, 6968, 2183, 689, 415, 51132], "temperature": 0.0, "avg_logprob": -0.10647485369727724, "compression_ratio": 1.5258964143426295, "no_speech_prob": 0.057005733251571655}, {"id": 83, "seek": 58614, "start": 601.5, "end": 607.26, "text": " says resistance to containers is futile and he points out that actually on modern Linux systems,", "tokens": [51132, 1619, 7335, 281, 17089, 307, 1877, 794, 293, 415, 2793, 484, 300, 767, 322, 4363, 18734, 3652, 11, 51420], "temperature": 0.0, "avg_logprob": -0.10647485369727724, "compression_ratio": 1.5258964143426295, "no_speech_prob": 0.057005733251571655}, {"id": 84, "seek": 58614, "start": 607.26, "end": 612.22, "text": " because everything's running using C groups and namespaces, you're effectively already running", "tokens": [51420, 570, 1203, 311, 2614, 1228, 383, 3935, 293, 5288, 79, 2116, 11, 291, 434, 8659, 1217, 2614, 51668], "temperature": 0.0, "avg_logprob": -0.10647485369727724, "compression_ratio": 1.5258964143426295, "no_speech_prob": 0.057005733251571655}, {"id": 85, "seek": 61222, "start": 612.22, "end": 623.02, "text": " your database in a container. So the customers I work with have many, many different reasons,", "tokens": [50364, 428, 8149, 294, 257, 10129, 13, 407, 264, 4581, 286, 589, 365, 362, 867, 11, 867, 819, 4112, 11, 50904], "temperature": 0.0, "avg_logprob": -0.04420119817139673, "compression_ratio": 1.4787234042553192, "no_speech_prob": 0.0030870414339005947}, {"id": 86, "seek": 61222, "start": 623.02, "end": 630.94, "text": " use cases for running databases and Postgres on Kubernetes. Automating the deployment and", "tokens": [50904, 764, 3331, 337, 2614, 22380, 293, 10223, 45189, 322, 23145, 13, 24619, 990, 264, 19317, 293, 51300], "temperature": 0.0, "avg_logprob": -0.04420119817139673, "compression_ratio": 1.4787234042553192, "no_speech_prob": 0.0030870414339005947}, {"id": 87, "seek": 61222, "start": 630.94, "end": 636.3000000000001, "text": " administration of their databases is obviously a huge one. That's one of the main reasons that", "tokens": [51300, 7236, 295, 641, 22380, 307, 2745, 257, 2603, 472, 13, 663, 311, 472, 295, 264, 2135, 4112, 300, 51568], "temperature": 0.0, "avg_logprob": -0.04420119817139673, "compression_ratio": 1.4787234042553192, "no_speech_prob": 0.0030870414339005947}, {"id": 88, "seek": 63630, "start": 636.3, "end": 643.3399999999999, "text": " people cite for wanting to be able to do things. The features of a container orchestration platform", "tokens": [50364, 561, 37771, 337, 7935, 281, 312, 1075, 281, 360, 721, 13, 440, 4122, 295, 257, 10129, 14161, 2405, 3663, 50716], "temperature": 0.0, "avg_logprob": -0.07861905206333507, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.022016800940036774}, {"id": 89, "seek": 63630, "start": 643.3399999999999, "end": 649.18, "text": " that we saw on the previous slide are already, they go a long way towards doing the things that you", "tokens": [50716, 300, 321, 1866, 322, 264, 3894, 4137, 366, 1217, 11, 436, 352, 257, 938, 636, 3030, 884, 264, 721, 300, 291, 51008], "temperature": 0.0, "avg_logprob": -0.07861905206333507, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.022016800940036774}, {"id": 90, "seek": 63630, "start": 649.18, "end": 656.2199999999999, "text": " would need automated to look after your database environment. There are other features as well", "tokens": [51008, 576, 643, 18473, 281, 574, 934, 428, 8149, 2823, 13, 821, 366, 661, 4122, 382, 731, 51360], "temperature": 0.0, "avg_logprob": -0.07861905206333507, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.022016800940036774}, {"id": 91, "seek": 63630, "start": 656.2199999999999, "end": 663.5799999999999, "text": " that help with that and we'll look at those in a few slides. But otherwise, we see customers that", "tokens": [51360, 300, 854, 365, 300, 293, 321, 603, 574, 412, 729, 294, 257, 1326, 9788, 13, 583, 5911, 11, 321, 536, 4581, 300, 51728], "temperature": 0.0, "avg_logprob": -0.07861905206333507, "compression_ratio": 1.6540084388185654, "no_speech_prob": 0.022016800940036774}, {"id": 92, "seek": 66358, "start": 663.58, "end": 667.9000000000001, "text": " want to be able to deploy and manage their database environments at scale. As I mentioned before,", "tokens": [50364, 528, 281, 312, 1075, 281, 7274, 293, 3067, 641, 8149, 12388, 412, 4373, 13, 1018, 286, 2835, 949, 11, 50580], "temperature": 0.0, "avg_logprob": -0.0799499623318936, "compression_ratio": 1.8704453441295548, "no_speech_prob": 0.0034353609662503004}, {"id": 93, "seek": 66358, "start": 667.9000000000001, "end": 676.86, "text": " maybe hundreds or thousands of databases. They want to run multi-tenant environments. They want", "tokens": [50580, 1310, 6779, 420, 5383, 295, 22380, 13, 814, 528, 281, 1190, 4825, 12, 1147, 394, 12388, 13, 814, 528, 51028], "temperature": 0.0, "avg_logprob": -0.0799499623318936, "compression_ratio": 1.8704453441295548, "no_speech_prob": 0.0034353609662503004}, {"id": 94, "seek": 66358, "start": 676.86, "end": 683.1800000000001, "text": " their database environment to complement an existing microservices environment. A lot of the", "tokens": [51028, 641, 8149, 2823, 281, 17103, 364, 6741, 15547, 47480, 2823, 13, 316, 688, 295, 264, 51344], "temperature": 0.0, "avg_logprob": -0.0799499623318936, "compression_ratio": 1.8704453441295548, "no_speech_prob": 0.0034353609662503004}, {"id": 95, "seek": 66358, "start": 683.1800000000001, "end": 688.1400000000001, "text": " time there's already Kubernetes in use in the organization. The applications might already", "tokens": [51344, 565, 456, 311, 1217, 23145, 294, 764, 294, 264, 4475, 13, 440, 5821, 1062, 1217, 51592], "temperature": 0.0, "avg_logprob": -0.0799499623318936, "compression_ratio": 1.8704453441295548, "no_speech_prob": 0.0034353609662503004}, {"id": 96, "seek": 66358, "start": 688.1400000000001, "end": 691.98, "text": " be running in Kubernetes and they want to bring the databases into that environment.", "tokens": [51592, 312, 2614, 294, 23145, 293, 436, 528, 281, 1565, 264, 22380, 666, 300, 2823, 13, 51784], "temperature": 0.0, "avg_logprob": -0.0799499623318936, "compression_ratio": 1.8704453441295548, "no_speech_prob": 0.0034353609662503004}, {"id": 97, "seek": 69358, "start": 694.14, "end": 699.1, "text": " A lot of them do it because they want to be able to create a database as a service type offering,", "tokens": [50392, 316, 688, 295, 552, 360, 309, 570, 436, 528, 281, 312, 1075, 281, 1884, 257, 8149, 382, 257, 2643, 2010, 8745, 11, 50640], "temperature": 0.0, "avg_logprob": -0.10141996848277557, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0012659496860578656}, {"id": 98, "seek": 69358, "start": 699.1, "end": 701.5, "text": " whether that's for internal or external customers.", "tokens": [50640, 1968, 300, 311, 337, 6920, 420, 8320, 4581, 13, 50760], "temperature": 0.0, "avg_logprob": -0.10141996848277557, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0012659496860578656}, {"id": 99, "seek": 69358, "start": 706.7800000000001, "end": 712.14, "text": " We'll have a quick look now at some of the other Kubernetes features that can help to build our", "tokens": [51024, 492, 603, 362, 257, 1702, 574, 586, 412, 512, 295, 264, 661, 23145, 4122, 300, 393, 854, 281, 1322, 527, 51292], "temperature": 0.0, "avg_logprob": -0.10141996848277557, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0012659496860578656}, {"id": 100, "seek": 69358, "start": 712.14, "end": 719.1, "text": " virtual database administrator. First of all, a little bit of terminology. Even though Kubernetes", "tokens": [51292, 6374, 8149, 25529, 13, 2386, 295, 439, 11, 257, 707, 857, 295, 27575, 13, 2754, 1673, 23145, 51640], "temperature": 0.0, "avg_logprob": -0.10141996848277557, "compression_ratio": 1.5475113122171946, "no_speech_prob": 0.0012659496860578656}, {"id": 101, "seek": 71910, "start": 719.1, "end": 724.14, "text": " is a container orchestration tool, you don't deploy an individual container in Kubernetes. You", "tokens": [50364, 307, 257, 10129, 14161, 2405, 2290, 11, 291, 500, 380, 7274, 364, 2609, 10129, 294, 23145, 13, 509, 50616], "temperature": 0.0, "avg_logprob": -0.08565262772820213, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0544535331428051}, {"id": 102, "seek": 71910, "start": 724.14, "end": 730.0600000000001, "text": " deploy a pod. In its simplest form, a pod you can think of as just a wrapper around your container,", "tokens": [50616, 7274, 257, 2497, 13, 682, 1080, 22811, 1254, 11, 257, 2497, 291, 393, 519, 295, 382, 445, 257, 46906, 926, 428, 10129, 11, 50912], "temperature": 0.0, "avg_logprob": -0.08565262772820213, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0544535331428051}, {"id": 103, "seek": 71910, "start": 731.26, "end": 738.46, "text": " but it can contain multiple containers. Then we have a deployment. A deployment", "tokens": [50972, 457, 309, 393, 5304, 3866, 17089, 13, 1396, 321, 362, 257, 19317, 13, 316, 19317, 51332], "temperature": 0.0, "avg_logprob": -0.08565262772820213, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0544535331428051}, {"id": 104, "seek": 71910, "start": 739.66, "end": 746.38, "text": " consists of one or more copies or replicas of a pod. The pods within a deployment are ephemeral", "tokens": [51392, 14689, 295, 472, 420, 544, 14341, 420, 3248, 9150, 295, 257, 2497, 13, 440, 31925, 1951, 257, 19317, 366, 308, 41245, 2790, 51728], "temperature": 0.0, "avg_logprob": -0.08565262772820213, "compression_ratio": 1.705069124423963, "no_speech_prob": 0.0544535331428051}, {"id": 105, "seek": 74638, "start": 746.38, "end": 752.06, "text": " and interchangeable. If one of those pods is destroyed for any reason, Kubernetes will just", "tokens": [50364, 293, 30358, 712, 13, 759, 472, 295, 729, 31925, 307, 8937, 337, 604, 1778, 11, 23145, 486, 445, 50648], "temperature": 0.0, "avg_logprob": -0.09820868021034333, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.002546844072639942}, {"id": 106, "seek": 74638, "start": 752.06, "end": 763.58, "text": " stand us up a new identical pod. We talked about the benefits of containers, the features of", "tokens": [50648, 1463, 505, 493, 257, 777, 14800, 2497, 13, 492, 2825, 466, 264, 5311, 295, 17089, 11, 264, 4122, 295, 51224], "temperature": 0.0, "avg_logprob": -0.09820868021034333, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.002546844072639942}, {"id": 107, "seek": 74638, "start": 763.58, "end": 770.86, "text": " Kubernetes, but also the fact that a container's data only lasts as long as that container exists,", "tokens": [51224, 23145, 11, 457, 611, 264, 1186, 300, 257, 10129, 311, 1412, 787, 20669, 382, 938, 382, 300, 10129, 8198, 11, 51588], "temperature": 0.0, "avg_logprob": -0.09820868021034333, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.002546844072639942}, {"id": 108, "seek": 74638, "start": 771.98, "end": 775.9, "text": " which obviously would be a bit of a problem for a container that holds your database.", "tokens": [51644, 597, 2745, 576, 312, 257, 857, 295, 257, 1154, 337, 257, 10129, 300, 9190, 428, 8149, 13, 51840], "temperature": 0.0, "avg_logprob": -0.09820868021034333, "compression_ratio": 1.6327433628318584, "no_speech_prob": 0.002546844072639942}, {"id": 109, "seek": 77638, "start": 777.18, "end": 782.38, "text": " You probably don't want your database to disappear if you lose a container, so you need some kind", "tokens": [50404, 509, 1391, 500, 380, 528, 428, 8149, 281, 11596, 498, 291, 3624, 257, 10129, 11, 370, 291, 643, 512, 733, 50664], "temperature": 0.0, "avg_logprob": -0.11994706839323044, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0008218159782700241}, {"id": 110, "seek": 77638, "start": 782.38, "end": 791.26, "text": " of persistent storage. Kubernetes provides that in the form of persistent volumes or PVs. By creating", "tokens": [50664, 295, 24315, 6725, 13, 23145, 6417, 300, 294, 264, 1254, 295, 24315, 22219, 420, 23035, 82, 13, 3146, 4084, 51108], "temperature": 0.0, "avg_logprob": -0.11994706839323044, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0008218159782700241}, {"id": 111, "seek": 77638, "start": 791.26, "end": 796.7, "text": " a persistent volume claim, a PVC, you can attach permanent storage to your container.", "tokens": [51108, 257, 24315, 5523, 3932, 11, 257, 46700, 11, 291, 393, 5085, 10996, 6725, 281, 428, 10129, 13, 51380], "temperature": 0.0, "avg_logprob": -0.11994706839323044, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.0008218159782700241}, {"id": 112, "seek": 79670, "start": 797.0200000000001, "end": 807.82, "text": " What about standby databases? We've talked about pods in a deployment being interchangeable.", "tokens": [50380, 708, 466, 50170, 22380, 30, 492, 600, 2825, 466, 31925, 294, 257, 19317, 885, 30358, 712, 13, 50920], "temperature": 0.0, "avg_logprob": -0.14457952472525584, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.004095206502825022}, {"id": 113, "seek": 79670, "start": 809.6600000000001, "end": 817.1800000000001, "text": " If you lose a container, Kubernetes will just say, okay, that's fine, I'll just create you a new one.", "tokens": [51012, 759, 291, 3624, 257, 10129, 11, 23145, 486, 445, 584, 11, 1392, 11, 300, 311, 2489, 11, 286, 603, 445, 1884, 291, 257, 777, 472, 13, 51388], "temperature": 0.0, "avg_logprob": -0.14457952472525584, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.004095206502825022}, {"id": 114, "seek": 79670, "start": 817.1800000000001, "end": 824.22, "text": " If that's your primary database container, you can't do that. A primary and a standby database", "tokens": [51388, 759, 300, 311, 428, 6194, 8149, 10129, 11, 291, 393, 380, 360, 300, 13, 316, 6194, 293, 257, 50170, 8149, 51740], "temperature": 0.0, "avg_logprob": -0.14457952472525584, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.004095206502825022}, {"id": 115, "seek": 82422, "start": 824.22, "end": 828.46, "text": " aren't the same. They're not interchangeable. You can't just replace one with the other. You need", "tokens": [50364, 3212, 380, 264, 912, 13, 814, 434, 406, 30358, 712, 13, 509, 393, 380, 445, 7406, 472, 365, 264, 661, 13, 509, 643, 50576], "temperature": 0.0, "avg_logprob": -0.07902242456163679, "compression_ratio": 1.6157205240174672, "no_speech_prob": 0.004588487092405558}, {"id": 116, "seek": 82422, "start": 828.46, "end": 832.86, "text": " something in there to tell Kubernetes that there is a difference between these.", "tokens": [50576, 746, 294, 456, 281, 980, 23145, 300, 456, 307, 257, 2649, 1296, 613, 13, 50796], "temperature": 0.0, "avg_logprob": -0.07902242456163679, "compression_ratio": 1.6157205240174672, "no_speech_prob": 0.004588487092405558}, {"id": 117, "seek": 82422, "start": 835.98, "end": 842.78, "text": " It's very rare that you'll be running just a standalone database. You will almost definitely", "tokens": [50952, 467, 311, 588, 5892, 300, 291, 603, 312, 2614, 445, 257, 37454, 8149, 13, 509, 486, 1920, 2138, 51292], "temperature": 0.0, "avg_logprob": -0.07902242456163679, "compression_ratio": 1.6157205240174672, "no_speech_prob": 0.004588487092405558}, {"id": 118, "seek": 82422, "start": 842.78, "end": 848.3000000000001, "text": " want high availability, but also you might want replica databases for read scalability. Scalability", "tokens": [51292, 528, 1090, 17945, 11, 457, 611, 291, 1062, 528, 35456, 22380, 337, 1401, 15664, 2310, 13, 2747, 304, 2310, 51568], "temperature": 0.0, "avg_logprob": -0.07902242456163679, "compression_ratio": 1.6157205240174672, "no_speech_prob": 0.004588487092405558}, {"id": 119, "seek": 84830, "start": 848.3, "end": 858.4599999999999, "text": " is one of the big use cases for Kubernetes. We need Kubernetes to know that our primary and", "tokens": [50364, 307, 472, 295, 264, 955, 764, 3331, 337, 23145, 13, 492, 643, 23145, 281, 458, 300, 527, 6194, 293, 50872], "temperature": 0.0, "avg_logprob": -0.09764437729053282, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0030552579555660486}, {"id": 120, "seek": 84830, "start": 858.4599999999999, "end": 864.06, "text": " our standby database aren't interchangeable, that you can't just replace one with the other.", "tokens": [50872, 527, 50170, 8149, 3212, 380, 30358, 712, 11, 300, 291, 393, 380, 445, 7406, 472, 365, 264, 661, 13, 51152], "temperature": 0.0, "avg_logprob": -0.09764437729053282, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0030552579555660486}, {"id": 121, "seek": 84830, "start": 864.62, "end": 869.74, "text": " We also need it to know that they can't just be started up and shut down in a random order.", "tokens": [51180, 492, 611, 643, 309, 281, 458, 300, 436, 393, 380, 445, 312, 1409, 493, 293, 5309, 760, 294, 257, 4974, 1668, 13, 51436], "temperature": 0.0, "avg_logprob": -0.09764437729053282, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0030552579555660486}, {"id": 122, "seek": 84830, "start": 869.74, "end": 877.42, "text": " It needs to be carefully considered. For that kind of situation, we've got stateful sets.", "tokens": [51436, 467, 2203, 281, 312, 7500, 4888, 13, 1171, 300, 733, 295, 2590, 11, 321, 600, 658, 1785, 906, 6352, 13, 51820], "temperature": 0.0, "avg_logprob": -0.09764437729053282, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.0030552579555660486}, {"id": 123, "seek": 87830, "start": 878.3, "end": 884.4599999999999, "text": " A stateful set is similar to a deployment, but each of our pods will have a persistent identifier,", "tokens": [50364, 316, 1785, 906, 992, 307, 2531, 281, 257, 19317, 11, 457, 1184, 295, 527, 31925, 486, 362, 257, 24315, 45690, 11, 50672], "temperature": 0.0, "avg_logprob": -0.10812320311864217, "compression_ratio": 1.75, "no_speech_prob": 0.0009351596818305552}, {"id": 124, "seek": 87830, "start": 884.4599999999999, "end": 890.3, "text": " so it keeps that through any rescheduling. If pod one gets destroyed, it will be replaced by another", "tokens": [50672, 370, 309, 5965, 300, 807, 604, 725, 19318, 425, 278, 13, 759, 2497, 472, 2170, 8937, 11, 309, 486, 312, 10772, 538, 1071, 50964], "temperature": 0.0, "avg_logprob": -0.10812320311864217, "compression_ratio": 1.75, "no_speech_prob": 0.0009351596818305552}, {"id": 125, "seek": 87830, "start": 890.3, "end": 896.9399999999999, "text": " pod one, and it will still be attached to that same PVC one. It will still be attached to that same", "tokens": [50964, 2497, 472, 11, 293, 309, 486, 920, 312, 8570, 281, 300, 912, 46700, 472, 13, 467, 486, 920, 312, 8570, 281, 300, 912, 51296], "temperature": 0.0, "avg_logprob": -0.10812320311864217, "compression_ratio": 1.75, "no_speech_prob": 0.0009351596818305552}, {"id": 126, "seek": 87830, "start": 896.9399999999999, "end": 906.38, "text": " storage, so it can keep that state. The Kubernetes documentation says that stateful sets are useful", "tokens": [51296, 6725, 11, 370, 309, 393, 1066, 300, 1785, 13, 440, 23145, 14333, 1619, 300, 1785, 906, 6352, 366, 4420, 51768], "temperature": 0.0, "avg_logprob": -0.10812320311864217, "compression_ratio": 1.75, "no_speech_prob": 0.0009351596818305552}, {"id": 127, "seek": 90638, "start": 906.38, "end": 912.62, "text": " for applications that need stable persistent storage, ordered graceful deployment and scaling,", "tokens": [50364, 337, 5821, 300, 643, 8351, 24315, 6725, 11, 8866, 10042, 906, 19317, 293, 21589, 11, 50676], "temperature": 0.0, "avg_logprob": -0.07995062860949285, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.0011308658868074417}, {"id": 128, "seek": 90638, "start": 913.82, "end": 919.18, "text": " and ordered automated rolling updates, which sounds very much like what you would want from a", "tokens": [50736, 293, 8866, 18473, 9439, 9205, 11, 597, 3263, 588, 709, 411, 437, 291, 576, 528, 490, 257, 51004], "temperature": 0.0, "avg_logprob": -0.07995062860949285, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.0011308658868074417}, {"id": 129, "seek": 90638, "start": 919.18, "end": 929.82, "text": " high availability database environment. Another useful feature is sidecars. We saw that a pod", "tokens": [51004, 1090, 17945, 8149, 2823, 13, 3996, 4420, 4111, 307, 1252, 66, 685, 13, 492, 1866, 300, 257, 2497, 51536], "temperature": 0.0, "avg_logprob": -0.07995062860949285, "compression_ratio": 1.492063492063492, "no_speech_prob": 0.0011308658868074417}, {"id": 130, "seek": 92982, "start": 929.82, "end": 936.5400000000001, "text": " can contain one or more containers, so a sidecar is a kind of helper container, so it's tightly", "tokens": [50364, 393, 5304, 472, 420, 544, 17089, 11, 370, 257, 1252, 6166, 307, 257, 733, 295, 36133, 10129, 11, 370, 309, 311, 21952, 50700], "temperature": 0.0, "avg_logprob": -0.10311161279678345, "compression_ratio": 1.89247311827957, "no_speech_prob": 0.04048363119363785}, {"id": 131, "seek": 92982, "start": 936.5400000000001, "end": 941.6600000000001, "text": " coupled with the main pod in your container. You might have, for example, alongside your database", "tokens": [50700, 29482, 365, 264, 2135, 2497, 294, 428, 10129, 13, 509, 1062, 362, 11, 337, 1365, 11, 12385, 428, 8149, 50956], "temperature": 0.0, "avg_logprob": -0.10311161279678345, "compression_ratio": 1.89247311827957, "no_speech_prob": 0.04048363119363785}, {"id": 132, "seek": 92982, "start": 941.6600000000001, "end": 949.1, "text": " container, you might have one that exports metrics, one that exports statistics from your database,", "tokens": [50956, 10129, 11, 291, 1062, 362, 472, 300, 31428, 16367, 11, 472, 300, 31428, 12523, 490, 428, 8149, 11, 51328], "temperature": 0.0, "avg_logprob": -0.10311161279678345, "compression_ratio": 1.89247311827957, "no_speech_prob": 0.04048363119363785}, {"id": 133, "seek": 92982, "start": 949.1, "end": 951.2600000000001, "text": " you might have one that performs your backup and recovery.", "tokens": [51328, 291, 1062, 362, 472, 300, 26213, 428, 14807, 293, 8597, 13, 51436], "temperature": 0.0, "avg_logprob": -0.10311161279678345, "compression_ratio": 1.89247311827957, "no_speech_prob": 0.04048363119363785}, {"id": 134, "seek": 95126, "start": 951.74, "end": 962.46, "text": " We've seen what kind of things Kubernetes can do. What does a DBA actually do?", "tokens": [50388, 492, 600, 1612, 437, 733, 295, 721, 23145, 393, 360, 13, 708, 775, 257, 413, 9295, 767, 360, 30, 50924], "temperature": 0.0, "avg_logprob": -0.13269337130264497, "compression_ratio": 1.4756756756756757, "no_speech_prob": 0.002976122312247753}, {"id": 135, "seek": 95126, "start": 965.42, "end": 972.9399999999999, "text": " This is a slide from the DBA evolution talk that I gave here last year, and for that I looked at", "tokens": [51072, 639, 307, 257, 4137, 490, 264, 413, 9295, 9303, 751, 300, 286, 2729, 510, 1036, 1064, 11, 293, 337, 300, 286, 2956, 412, 51448], "temperature": 0.0, "avg_logprob": -0.13269337130264497, "compression_ratio": 1.4756756756756757, "no_speech_prob": 0.002976122312247753}, {"id": 136, "seek": 95126, "start": 972.9399999999999, "end": 980.54, "text": " various definitions of a DBA to try and find out what the general consensus is for the DBA roles.", "tokens": [51448, 3683, 21988, 295, 257, 413, 9295, 281, 853, 293, 915, 484, 437, 264, 2674, 19115, 307, 337, 264, 413, 9295, 9604, 13, 51828], "temperature": 0.0, "avg_logprob": -0.13269337130264497, "compression_ratio": 1.4756756756756757, "no_speech_prob": 0.002976122312247753}, {"id": 137, "seek": 98126, "start": 981.58, "end": 987.66, "text": " It turns out that apparently DBA is responsible for managing and securing computer systems that", "tokens": [50380, 467, 4523, 484, 300, 7970, 413, 9295, 307, 6250, 337, 11642, 293, 33640, 3820, 3652, 300, 50684], "temperature": 0.0, "avg_logprob": -0.10410000557123228, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.0007981063681654632}, {"id": 138, "seek": 98126, "start": 987.66, "end": 995.18, "text": " store data using specialist software, which tells us absolutely nothing about what a DBA does day to", "tokens": [50684, 3531, 1412, 1228, 17008, 4722, 11, 597, 5112, 505, 3122, 1825, 466, 437, 257, 413, 9295, 775, 786, 281, 51060], "temperature": 0.0, "avg_logprob": -0.10410000557123228, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.0007981063681654632}, {"id": 139, "seek": 98126, "start": 995.18, "end": 1003.5, "text": " day. I compared that at the list of responsibilities that went with those definitions, and I looked at", "tokens": [51060, 786, 13, 286, 5347, 300, 412, 264, 1329, 295, 16190, 300, 1437, 365, 729, 21988, 11, 293, 286, 2956, 412, 51476], "temperature": 0.0, "avg_logprob": -0.10410000557123228, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.0007981063681654632}, {"id": 140, "seek": 98126, "start": 1003.5, "end": 1010.62, "text": " a whole load of different job adverts for DBAs to try and get some kind of consolidated list.", "tokens": [51476, 257, 1379, 3677, 295, 819, 1691, 614, 36999, 337, 413, 9295, 82, 281, 853, 293, 483, 512, 733, 295, 49008, 1329, 13, 51832], "temperature": 0.0, "avg_logprob": -0.10410000557123228, "compression_ratio": 1.6307053941908713, "no_speech_prob": 0.0007981063681654632}, {"id": 141, "seek": 101126, "start": 1011.34, "end": 1015.18, "text": " Of the things that DBAs are actually expected to do, and it's a pretty long list.", "tokens": [50368, 2720, 264, 721, 300, 413, 9295, 82, 366, 767, 5176, 281, 360, 11, 293, 309, 311, 257, 1238, 938, 1329, 13, 50560], "temperature": 0.0, "avg_logprob": -0.12615272873326352, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.000558211060706526}, {"id": 142, "seek": 101126, "start": 1015.9, "end": 1019.8199999999999, "text": " The general consensus is that a DBA will do some or all of,", "tokens": [50596, 440, 2674, 19115, 307, 300, 257, 413, 9295, 486, 360, 512, 420, 439, 295, 11, 50792], "temperature": 0.0, "avg_logprob": -0.12615272873326352, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.000558211060706526}, {"id": 143, "seek": 101126, "start": 1022.38, "end": 1027.5, "text": " ensuring the availability of the database, usually involving putting in place some kind of", "tokens": [50920, 16882, 264, 17945, 295, 264, 8149, 11, 2673, 17030, 3372, 294, 1081, 512, 733, 295, 51176], "temperature": 0.0, "avg_logprob": -0.12615272873326352, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.000558211060706526}, {"id": 144, "seek": 101126, "start": 1027.5, "end": 1036.62, "text": " high availability infrastructure. Design, implement, and maintain the necessary backup and recovery", "tokens": [51176, 1090, 17945, 6896, 13, 12748, 11, 4445, 11, 293, 6909, 264, 4818, 14807, 293, 8597, 51632], "temperature": 0.0, "avg_logprob": -0.12615272873326352, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.000558211060706526}, {"id": 145, "seek": 103662, "start": 1036.62, "end": 1046.3799999999999, "text": " procedures. Design, implement, enforce, potentially various different security", "tokens": [50364, 13846, 13, 12748, 11, 4445, 11, 24825, 11, 7263, 3683, 819, 3825, 50852], "temperature": 0.0, "avg_logprob": -0.17187267303466797, "compression_ratio": 1.6280487804878048, "no_speech_prob": 0.003261861391365528}, {"id": 146, "seek": 103662, "start": 1048.3799999999999, "end": 1055.26, "text": " security requirements, create database users, manage database access, ensure data protection.", "tokens": [50952, 3825, 7728, 11, 1884, 8149, 5022, 11, 3067, 8149, 2105, 11, 5586, 1412, 6334, 13, 51296], "temperature": 0.0, "avg_logprob": -0.17187267303466797, "compression_ratio": 1.6280487804878048, "no_speech_prob": 0.003261861391365528}, {"id": 147, "seek": 103662, "start": 1057.58, "end": 1063.7399999999998, "text": " Implement monitoring processes, perform ongoing monitoring of the databases, looking at things", "tokens": [51412, 4331, 43704, 11028, 7555, 11, 2042, 10452, 11028, 295, 264, 22380, 11, 1237, 412, 721, 51720], "temperature": 0.0, "avg_logprob": -0.17187267303466797, "compression_ratio": 1.6280487804878048, "no_speech_prob": 0.003261861391365528}, {"id": 148, "seek": 106374, "start": 1063.74, "end": 1072.3, "text": " like performance, the security space, etc. Database design and development, including data", "tokens": [50364, 411, 3389, 11, 264, 3825, 1901, 11, 5183, 13, 40461, 651, 1715, 293, 3250, 11, 3009, 1412, 50792], "temperature": 0.0, "avg_logprob": -0.17667768030990788, "compression_ratio": 1.6681818181818182, "no_speech_prob": 0.0018714626785367727}, {"id": 149, "seek": 106374, "start": 1072.3, "end": 1079.34, "text": " modeling, for example. Support and troubleshooting, including 24-7 support, uncle support often.", "tokens": [50792, 15983, 11, 337, 1365, 13, 18073, 293, 15379, 47011, 11, 3009, 4022, 12, 22, 1406, 11, 9153, 1406, 2049, 13, 51144], "temperature": 0.0, "avg_logprob": -0.17667768030990788, "compression_ratio": 1.6681818181818182, "no_speech_prob": 0.0018714626785367727}, {"id": 150, "seek": 106374, "start": 1081.42, "end": 1087.58, "text": " And it goes on. Installing and upgrading database software, providing database expertise to other", "tokens": [51248, 400, 309, 1709, 322, 13, 2730, 24021, 293, 36249, 8149, 4722, 11, 6530, 8149, 11769, 281, 661, 51556], "temperature": 0.0, "avg_logprob": -0.17667768030990788, "compression_ratio": 1.6681818181818182, "no_speech_prob": 0.0018714626785367727}, {"id": 151, "seek": 106374, "start": 1087.58, "end": 1091.26, "text": " teams, to other people, so for example to the business, to other technical staff.", "tokens": [51556, 5491, 11, 281, 661, 561, 11, 370, 337, 1365, 281, 264, 1606, 11, 281, 661, 6191, 3525, 13, 51740], "temperature": 0.0, "avg_logprob": -0.17667768030990788, "compression_ratio": 1.6681818181818182, "no_speech_prob": 0.0018714626785367727}, {"id": 152, "seek": 109374, "start": 1094.22, "end": 1100.7, "text": " Performance tuning, capacity planning, putting in place the necessary procedures for creating", "tokens": [50388, 25047, 15164, 11, 6042, 5038, 11, 3372, 294, 1081, 264, 4818, 13846, 337, 4084, 50712], "temperature": 0.0, "avg_logprob": -0.08789019971280485, "compression_ratio": 1.6473429951690821, "no_speech_prob": 0.0011574222007766366}, {"id": 153, "seek": 109374, "start": 1100.7, "end": 1106.38, "text": " databases and maintaining databases. Of course, there are different types of DBA.", "tokens": [50712, 22380, 293, 14916, 22380, 13, 2720, 1164, 11, 456, 366, 819, 3467, 295, 413, 9295, 13, 50996], "temperature": 0.0, "avg_logprob": -0.08789019971280485, "compression_ratio": 1.6473429951690821, "no_speech_prob": 0.0011574222007766366}, {"id": 154, "seek": 109374, "start": 1107.18, "end": 1115.74, "text": " Some organizations will split the roles out differently. Some DBAs will be expected to do", "tokens": [51036, 2188, 6150, 486, 7472, 264, 9604, 484, 7614, 13, 2188, 413, 9295, 82, 486, 312, 5176, 281, 360, 51464], "temperature": 0.0, "avg_logprob": -0.08789019971280485, "compression_ratio": 1.6473429951690821, "no_speech_prob": 0.0011574222007766366}, {"id": 155, "seek": 109374, "start": 1115.74, "end": 1119.66, "text": " different things, but all of these things will need to be done by somebody.", "tokens": [51464, 819, 721, 11, 457, 439, 295, 613, 721, 486, 643, 281, 312, 1096, 538, 2618, 13, 51660], "temperature": 0.0, "avg_logprob": -0.08789019971280485, "compression_ratio": 1.6473429951690821, "no_speech_prob": 0.0011574222007766366}, {"id": 156, "seek": 111966, "start": 1120.6200000000001, "end": 1130.5400000000002, "text": " Okay. So we know that Kubernetes provides a lot of the features that you need to manage a database,", "tokens": [50412, 1033, 13, 407, 321, 458, 300, 23145, 6417, 257, 688, 295, 264, 4122, 300, 291, 643, 281, 3067, 257, 8149, 11, 50908], "temperature": 0.0, "avg_logprob": -0.15955254525849313, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.0005623000324703753}, {"id": 157, "seek": 111966, "start": 1131.66, "end": 1135.66, "text": " but how are you going to go about setting up a containerized Postgres environment?", "tokens": [50964, 457, 577, 366, 291, 516, 281, 352, 466, 3287, 493, 257, 10129, 1602, 10223, 45189, 2823, 30, 51164], "temperature": 0.0, "avg_logprob": -0.15955254525849313, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.0005623000324703753}, {"id": 158, "seek": 111966, "start": 1136.8600000000001, "end": 1143.66, "text": " Kubernetes doesn't natively speak Postgres. So you need to put in place some kind of mechanism", "tokens": [51224, 23145, 1177, 380, 8470, 356, 1710, 10223, 45189, 13, 407, 291, 643, 281, 829, 294, 1081, 512, 733, 295, 7513, 51564], "temperature": 0.0, "avg_logprob": -0.15955254525849313, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.0005623000324703753}, {"id": 159, "seek": 114366, "start": 1144.6200000000001, "end": 1147.9, "text": " that's going to tell Kubernetes how to manage your database cluster.", "tokens": [50412, 300, 311, 516, 281, 980, 23145, 577, 281, 3067, 428, 8149, 13630, 13, 50576], "temperature": 0.0, "avg_logprob": -0.06648554340485603, "compression_ratio": 1.8059071729957805, "no_speech_prob": 0.015615458600223064}, {"id": 160, "seek": 114366, "start": 1148.94, "end": 1153.02, "text": " You need it to know about replication, about backup and recovery, about monitoring,", "tokens": [50628, 509, 643, 309, 281, 458, 466, 39911, 11, 466, 14807, 293, 8597, 11, 466, 11028, 11, 50832], "temperature": 0.0, "avg_logprob": -0.06648554340485603, "compression_ratio": 1.8059071729957805, "no_speech_prob": 0.015615458600223064}, {"id": 161, "seek": 114366, "start": 1154.22, "end": 1159.8200000000002, "text": " about upgrades, and all sorts of other things. To do that, you need expert knowledge in two", "tokens": [50892, 466, 24868, 11, 293, 439, 7527, 295, 661, 721, 13, 1407, 360, 300, 11, 291, 643, 5844, 3601, 294, 732, 51172], "temperature": 0.0, "avg_logprob": -0.06648554340485603, "compression_ratio": 1.8059071729957805, "no_speech_prob": 0.015615458600223064}, {"id": 162, "seek": 114366, "start": 1159.8200000000002, "end": 1164.14, "text": " domains. You need expert knowledge of Kubernetes and you need expert knowledge of Postgres.", "tokens": [51172, 25514, 13, 509, 643, 5844, 3601, 295, 23145, 293, 291, 643, 5844, 3601, 295, 10223, 45189, 13, 51388], "temperature": 0.0, "avg_logprob": -0.06648554340485603, "compression_ratio": 1.8059071729957805, "no_speech_prob": 0.015615458600223064}, {"id": 163, "seek": 114366, "start": 1164.78, "end": 1169.98, "text": " Most organizations find it difficult enough to find somebody that's got expert knowledge in", "tokens": [51420, 4534, 6150, 915, 309, 2252, 1547, 281, 915, 2618, 300, 311, 658, 5844, 3601, 294, 51680], "temperature": 0.0, "avg_logprob": -0.06648554340485603, "compression_ratio": 1.8059071729957805, "no_speech_prob": 0.015615458600223064}, {"id": 164, "seek": 116998, "start": 1169.98, "end": 1177.66, "text": " one of these domains, let alone both of them. Fortunately, Kubernetes has another secret", "tokens": [50364, 472, 295, 613, 25514, 11, 718, 3312, 1293, 295, 552, 13, 20652, 11, 23145, 575, 1071, 4054, 50748], "temperature": 0.0, "avg_logprob": -0.08753055684706744, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.006107045337557793}, {"id": 165, "seek": 116998, "start": 1177.66, "end": 1184.06, "text": " weapon, the operator. So this lets you extend Kubernetes functionality using custom resources,", "tokens": [50748, 7463, 11, 264, 12973, 13, 407, 341, 6653, 291, 10101, 23145, 14980, 1228, 2375, 3593, 11, 51068], "temperature": 0.0, "avg_logprob": -0.08753055684706744, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.006107045337557793}, {"id": 166, "seek": 116998, "start": 1184.06, "end": 1189.74, "text": " and we'll look at a custom resource later, and something called the control loop, where it keeps", "tokens": [51068, 293, 321, 603, 574, 412, 257, 2375, 7684, 1780, 11, 293, 746, 1219, 264, 1969, 6367, 11, 689, 309, 5965, 51352], "temperature": 0.0, "avg_logprob": -0.08753055684706744, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.006107045337557793}, {"id": 167, "seek": 116998, "start": 1189.74, "end": 1195.5, "text": " checking the current state of your cluster to see if it fits with what you've defined, and if not,", "tokens": [51352, 8568, 264, 2190, 1785, 295, 428, 13630, 281, 536, 498, 309, 9001, 365, 437, 291, 600, 7642, 11, 293, 498, 406, 11, 51640], "temperature": 0.0, "avg_logprob": -0.08753055684706744, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.006107045337557793}, {"id": 168, "seek": 119550, "start": 1195.5, "end": 1198.94, "text": " it will make necessary changes to keep it in that required state.", "tokens": [50364, 309, 486, 652, 4818, 2962, 281, 1066, 309, 294, 300, 4739, 1785, 13, 50536], "temperature": 0.0, "avg_logprob": -0.11077668807085822, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.004044836852699518}, {"id": 169, "seek": 119550, "start": 1202.54, "end": 1208.06, "text": " Even more fortunately, there are various Postgres operators that have been created by Postgres", "tokens": [50716, 2754, 544, 25511, 11, 456, 366, 3683, 10223, 45189, 19077, 300, 362, 668, 2942, 538, 10223, 45189, 50992], "temperature": 0.0, "avg_logprob": -0.11077668807085822, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.004044836852699518}, {"id": 170, "seek": 119550, "start": 1208.62, "end": 1214.78, "text": " experts. I can speak in detail about the Crunchy Data Postgres operator, Pego, because that's the", "tokens": [51020, 8572, 13, 286, 393, 1710, 294, 2607, 466, 264, 44233, 88, 11888, 10223, 45189, 12973, 11, 430, 6308, 11, 570, 300, 311, 264, 51328], "temperature": 0.0, "avg_logprob": -0.11077668807085822, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.004044836852699518}, {"id": 171, "seek": 119550, "start": 1214.78, "end": 1222.54, "text": " one I use day to day, but there are others out there. Each of them works in a slightly different", "tokens": [51328, 472, 286, 764, 786, 281, 786, 11, 457, 456, 366, 2357, 484, 456, 13, 6947, 295, 552, 1985, 294, 257, 4748, 819, 51716], "temperature": 0.0, "avg_logprob": -0.11077668807085822, "compression_ratio": 1.5990990990990992, "no_speech_prob": 0.004044836852699518}, {"id": 172, "seek": 122254, "start": 1222.54, "end": 1229.02, "text": " way and might use different tools, but each of them combines that detailed Postgres and", "tokens": [50364, 636, 293, 1062, 764, 819, 3873, 11, 457, 1184, 295, 552, 29520, 300, 9942, 10223, 45189, 293, 50688], "temperature": 0.0, "avg_logprob": -0.13270210450695408, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.0043672011233866215}, {"id": 173, "seek": 122254, "start": 1229.02, "end": 1234.78, "text": " Kubernetes knowledge, so it extends the functionality of Kubernetes and lets it speak Postgres.", "tokens": [50688, 23145, 3601, 11, 370, 309, 26448, 264, 14980, 295, 23145, 293, 6653, 309, 1710, 10223, 45189, 13, 50976], "temperature": 0.0, "avg_logprob": -0.13270210450695408, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.0043672011233866215}, {"id": 174, "seek": 122254, "start": 1237.42, "end": 1244.1399999999999, "text": " It allows you to define in a manifest what your cluster should look like, and then work to deploy", "tokens": [51108, 467, 4045, 291, 281, 6964, 294, 257, 10067, 437, 428, 13630, 820, 574, 411, 11, 293, 550, 589, 281, 7274, 51444], "temperature": 0.0, "avg_logprob": -0.13270210450695408, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.0043672011233866215}, {"id": 175, "seek": 124414, "start": 1244.14, "end": 1254.7800000000002, "text": " your cluster and keep it in that state. So what do you want from your Postgres operator for Kubernetes?", "tokens": [50364, 428, 13630, 293, 1066, 309, 294, 300, 1785, 13, 407, 437, 360, 291, 528, 490, 428, 10223, 45189, 12973, 337, 23145, 30, 50896], "temperature": 0.0, "avg_logprob": -0.08515575657720151, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.004294249694794416}, {"id": 176, "seek": 124414, "start": 1256.94, "end": 1264.0600000000002, "text": " The idea of Kubernetes operator is that it will perform all of the tasks that a human operator", "tokens": [51004, 440, 1558, 295, 23145, 12973, 307, 300, 309, 486, 2042, 439, 295, 264, 9608, 300, 257, 1952, 12973, 51360], "temperature": 0.0, "avg_logprob": -0.08515575657720151, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.004294249694794416}, {"id": 177, "seek": 124414, "start": 1264.0600000000002, "end": 1270.8600000000001, "text": " would otherwise do. So what we want it to do is automate as many as possible of those responsibilities,", "tokens": [51360, 576, 5911, 360, 13, 407, 437, 321, 528, 309, 281, 360, 307, 31605, 382, 867, 382, 1944, 295, 729, 16190, 11, 51700], "temperature": 0.0, "avg_logprob": -0.08515575657720151, "compression_ratio": 1.641304347826087, "no_speech_prob": 0.004294249694794416}, {"id": 178, "seek": 127086, "start": 1270.86, "end": 1277.82, "text": " those tasks that we saw on the previous slides. For example, database availability.", "tokens": [50364, 729, 9608, 300, 321, 1866, 322, 264, 3894, 9788, 13, 1171, 1365, 11, 8149, 17945, 13, 50712], "temperature": 0.0, "avg_logprob": -0.10697430372238159, "compression_ratio": 1.6018099547511313, "no_speech_prob": 0.0012881975853815675}, {"id": 179, "seek": 127086, "start": 1281.02, "end": 1284.6999999999998, "text": " Most production environments, as we've said, need some kind of high availability.", "tokens": [50872, 4534, 4265, 12388, 11, 382, 321, 600, 848, 11, 643, 512, 733, 295, 1090, 17945, 13, 51056], "temperature": 0.0, "avg_logprob": -0.10697430372238159, "compression_ratio": 1.6018099547511313, "no_speech_prob": 0.0012881975853815675}, {"id": 180, "seek": 127086, "start": 1285.74, "end": 1290.4599999999998, "text": " You'll probably be using Postgres' streaming replication so that you've got a primary database", "tokens": [51108, 509, 603, 1391, 312, 1228, 10223, 45189, 6, 11791, 39911, 370, 300, 291, 600, 658, 257, 6194, 8149, 51344], "temperature": 0.0, "avg_logprob": -0.10697430372238159, "compression_ratio": 1.6018099547511313, "no_speech_prob": 0.0012881975853815675}, {"id": 181, "seek": 127086, "start": 1290.4599999999998, "end": 1297.8999999999999, "text": " and one or more replica or standby databases. You'll then have some tool, a framework such as", "tokens": [51344, 293, 472, 420, 544, 35456, 420, 50170, 22380, 13, 509, 603, 550, 362, 512, 2290, 11, 257, 8388, 1270, 382, 51716], "temperature": 0.0, "avg_logprob": -0.10697430372238159, "compression_ratio": 1.6018099547511313, "no_speech_prob": 0.0012881975853815675}, {"id": 182, "seek": 129790, "start": 1297.9, "end": 1303.1000000000001, "text": " Petroni and XED. There are other frameworks available. This is one that we choose to use,", "tokens": [50364, 10472, 2044, 72, 293, 1783, 4731, 13, 821, 366, 661, 29834, 2435, 13, 639, 307, 472, 300, 321, 2826, 281, 764, 11, 50624], "temperature": 0.0, "avg_logprob": -0.10049555131367274, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.007519980892539024}, {"id": 183, "seek": 129790, "start": 1303.1000000000001, "end": 1308.7800000000002, "text": " and it's well respected and it has a rich set of features, so it's used by a lot of people.", "tokens": [50624, 293, 309, 311, 731, 20020, 293, 309, 575, 257, 4593, 992, 295, 4122, 11, 370, 309, 311, 1143, 538, 257, 688, 295, 561, 13, 50908], "temperature": 0.0, "avg_logprob": -0.10049555131367274, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.007519980892539024}, {"id": 184, "seek": 129790, "start": 1309.42, "end": 1315.9, "text": " So you'll put that framework in place to manage your cluster. You might add in a tool such as", "tokens": [50940, 407, 291, 603, 829, 300, 8388, 294, 1081, 281, 3067, 428, 13630, 13, 509, 1062, 909, 294, 257, 2290, 1270, 382, 51264], "temperature": 0.0, "avg_logprob": -0.10049555131367274, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.007519980892539024}, {"id": 185, "seek": 129790, "start": 1315.9, "end": 1320.38, "text": " HA proxy to maintain a virtual IP address so that you've always got your application", "tokens": [51264, 11979, 29690, 281, 6909, 257, 6374, 8671, 2985, 370, 300, 291, 600, 1009, 658, 428, 3861, 51488], "temperature": 0.0, "avg_logprob": -0.10049555131367274, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.007519980892539024}, {"id": 186, "seek": 129790, "start": 1320.38, "end": 1327.02, "text": " connections pointing to your current primary database. There are quite a few moving parts here.", "tokens": [51488, 9271, 12166, 281, 428, 2190, 6194, 8149, 13, 821, 366, 1596, 257, 1326, 2684, 3166, 510, 13, 51820], "temperature": 0.0, "avg_logprob": -0.10049555131367274, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.007519980892539024}, {"id": 187, "seek": 132702, "start": 1327.02, "end": 1331.5, "text": " There are various different tools to install and configure, and it can be quite fiddly to get", "tokens": [50364, 821, 366, 3683, 819, 3873, 281, 3625, 293, 22162, 11, 293, 309, 393, 312, 1596, 283, 14273, 356, 281, 483, 50588], "temperature": 0.0, "avg_logprob": -0.05600195917589911, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.00025751374778337777}, {"id": 188, "seek": 132702, "start": 1331.5, "end": 1337.9, "text": " that set up in the way you want. So you definitely want your operator to be doing that for you.", "tokens": [50588, 300, 992, 493, 294, 264, 636, 291, 528, 13, 407, 291, 2138, 528, 428, 12973, 281, 312, 884, 300, 337, 291, 13, 50908], "temperature": 0.0, "avg_logprob": -0.05600195917589911, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.00025751374778337777}, {"id": 189, "seek": 132702, "start": 1339.5, "end": 1344.94, "text": " If something goes wrong with your primary database, you want to be sure that you're going to get an", "tokens": [50988, 759, 746, 1709, 2085, 365, 428, 6194, 8149, 11, 291, 528, 281, 312, 988, 300, 291, 434, 516, 281, 483, 364, 51260], "temperature": 0.0, "avg_logprob": -0.05600195917589911, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.00025751374778337777}, {"id": 190, "seek": 132702, "start": 1344.94, "end": 1349.5, "text": " automatic failover, that it's going to promote one of those replica databases to be your new", "tokens": [51260, 12509, 3061, 3570, 11, 300, 309, 311, 516, 281, 9773, 472, 295, 729, 35456, 22380, 281, 312, 428, 777, 51488], "temperature": 0.0, "avg_logprob": -0.05600195917589911, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.00025751374778337777}, {"id": 191, "seek": 132702, "start": 1349.5, "end": 1355.26, "text": " primary, that it's then going to reconfigure any existing replicas to stream from that new primary,", "tokens": [51488, 6194, 11, 300, 309, 311, 550, 516, 281, 9993, 20646, 540, 604, 6741, 3248, 9150, 281, 4309, 490, 300, 777, 6194, 11, 51776], "temperature": 0.0, "avg_logprob": -0.05600195917589911, "compression_ratio": 1.861003861003861, "no_speech_prob": 0.00025751374778337777}, {"id": 192, "seek": 135526, "start": 1356.14, "end": 1361.5, "text": " and that it's going to move your application connections to point to your new primary. You", "tokens": [50408, 293, 300, 309, 311, 516, 281, 1286, 428, 3861, 9271, 281, 935, 281, 428, 777, 6194, 13, 509, 50676], "temperature": 0.0, "avg_logprob": -0.07032829920450846, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.00040077866287902}, {"id": 193, "seek": 135526, "start": 1361.5, "end": 1365.02, "text": " don't want to be doing any of that manually. You want that to happen automatically for you.", "tokens": [50676, 500, 380, 528, 281, 312, 884, 604, 295, 300, 16945, 13, 509, 528, 300, 281, 1051, 6772, 337, 291, 13, 50852], "temperature": 0.0, "avg_logprob": -0.07032829920450846, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.00040077866287902}, {"id": 194, "seek": 135526, "start": 1367.42, "end": 1373.74, "text": " And then for a combination of the self-healing magic of Kubernetes, Petroni, and your operator,", "tokens": [50972, 400, 550, 337, 257, 6562, 295, 264, 2698, 12, 675, 4270, 5585, 295, 23145, 11, 10472, 2044, 72, 11, 293, 428, 12973, 11, 51288], "temperature": 0.0, "avg_logprob": -0.07032829920450846, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.00040077866287902}, {"id": 195, "seek": 135526, "start": 1375.18, "end": 1383.66, "text": " you want to make sure that you have a new replica created to replace that primary database that you", "tokens": [51360, 291, 528, 281, 652, 988, 300, 291, 362, 257, 777, 35456, 2942, 281, 7406, 300, 6194, 8149, 300, 291, 51784], "temperature": 0.0, "avg_logprob": -0.07032829920450846, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.00040077866287902}, {"id": 196, "seek": 138366, "start": 1383.66, "end": 1392.7, "text": " lost. You definitely want as much as possible of your backup and recovery to be automated.", "tokens": [50364, 2731, 13, 509, 2138, 528, 382, 709, 382, 1944, 295, 428, 14807, 293, 8597, 281, 312, 18473, 13, 50816], "temperature": 0.0, "avg_logprob": -0.11647122046526741, "compression_ratio": 1.5810055865921788, "no_speech_prob": 0.000908434041775763}, {"id": 197, "seek": 138366, "start": 1395.18, "end": 1401.3400000000001, "text": " You want your operator to install your backup tool and configure it, so for example, PGBackrest.", "tokens": [50940, 509, 528, 428, 12973, 281, 3625, 428, 14807, 2290, 293, 22162, 309, 11, 370, 337, 1365, 11, 430, 8769, 501, 4149, 13, 51248], "temperature": 0.0, "avg_logprob": -0.11647122046526741, "compression_ratio": 1.5810055865921788, "no_speech_prob": 0.000908434041775763}, {"id": 198, "seek": 138366, "start": 1402.78, "end": 1409.1000000000001, "text": " You want it to let you define one or more backup repositories that could be a local repository,", "tokens": [51320, 509, 528, 309, 281, 718, 291, 6964, 472, 420, 544, 14807, 22283, 2083, 300, 727, 312, 257, 2654, 25841, 11, 51636], "temperature": 0.0, "avg_logprob": -0.11647122046526741, "compression_ratio": 1.5810055865921788, "no_speech_prob": 0.000908434041775763}, {"id": 199, "seek": 140910, "start": 1409.1, "end": 1416.2199999999998, "text": " that could be a cloud or network-based repository using S3, for example.", "tokens": [50364, 300, 727, 312, 257, 4588, 420, 3209, 12, 6032, 25841, 1228, 318, 18, 11, 337, 1365, 13, 50720], "temperature": 0.0, "avg_logprob": -0.06862380224115708, "compression_ratio": 1.7615894039735098, "no_speech_prob": 0.001208981266245246}, {"id": 200, "seek": 140910, "start": 1418.6999999999998, "end": 1424.9399999999998, "text": " You want it to take care of your wall archiving. You want it to take care of taking backups for you.", "tokens": [50844, 509, 528, 309, 281, 747, 1127, 295, 428, 2929, 3912, 2123, 13, 509, 528, 309, 281, 747, 1127, 295, 1940, 50160, 337, 291, 13, 51156], "temperature": 0.0, "avg_logprob": -0.06862380224115708, "compression_ratio": 1.7615894039735098, "no_speech_prob": 0.001208981266245246}, {"id": 201, "seek": 140910, "start": 1426.06, "end": 1432.78, "text": " You want to be able to schedule those backups. You want it to take care of removing obsolete", "tokens": [51212, 509, 528, 281, 312, 1075, 281, 7567, 729, 50160, 13, 509, 528, 309, 281, 747, 1127, 295, 12720, 46333, 51548], "temperature": 0.0, "avg_logprob": -0.06862380224115708, "compression_ratio": 1.7615894039735098, "no_speech_prob": 0.001208981266245246}, {"id": 202, "seek": 143278, "start": 1432.78, "end": 1438.78, "text": " backups once you no longer need them. You want it to retry backups if they fail.", "tokens": [50364, 50160, 1564, 291, 572, 2854, 643, 552, 13, 509, 528, 309, 281, 1533, 627, 50160, 498, 436, 3061, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08959780348108169, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.016242435202002525}, {"id": 203, "seek": 143278, "start": 1440.46, "end": 1446.46, "text": " And then to minimize stress, data loss, and downtime, you definitely want as much of your", "tokens": [50748, 400, 550, 281, 17522, 4244, 11, 1412, 4470, 11, 293, 49648, 11, 291, 2138, 528, 382, 709, 295, 428, 51048], "temperature": 0.0, "avg_logprob": -0.08959780348108169, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.016242435202002525}, {"id": 204, "seek": 143278, "start": 1446.46, "end": 1453.98, "text": " recovery to be automated as possible. You'll still want a human operator in a lot of cases to say,", "tokens": [51048, 8597, 281, 312, 18473, 382, 1944, 13, 509, 603, 920, 528, 257, 1952, 12973, 294, 257, 688, 295, 3331, 281, 584, 11, 51424], "temperature": 0.0, "avg_logprob": -0.08959780348108169, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.016242435202002525}, {"id": 205, "seek": 143278, "start": 1453.98, "end": 1459.98, "text": " yes or no, we are going to restore. Can we accept this data loss? Can we accept this downtime? There", "tokens": [51424, 2086, 420, 572, 11, 321, 366, 516, 281, 15227, 13, 1664, 321, 3241, 341, 1412, 4470, 30, 1664, 321, 3241, 341, 49648, 30, 821, 51724], "temperature": 0.0, "avg_logprob": -0.08959780348108169, "compression_ratio": 1.6299559471365639, "no_speech_prob": 0.016242435202002525}, {"id": 206, "seek": 145998, "start": 1459.98, "end": 1465.82, "text": " will be decisions like that to make by a human operator, but once those decisions are made,", "tokens": [50364, 486, 312, 5327, 411, 300, 281, 652, 538, 257, 1952, 12973, 11, 457, 1564, 729, 5327, 366, 1027, 11, 50656], "temperature": 0.0, "avg_logprob": -0.07087999735123073, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.0010032778372988105}, {"id": 207, "seek": 145998, "start": 1465.82, "end": 1469.5, "text": " you want that process to be just a click of a button.", "tokens": [50656, 291, 528, 300, 1399, 281, 312, 445, 257, 2052, 295, 257, 2960, 13, 50840], "temperature": 0.0, "avg_logprob": -0.07087999735123073, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.0010032778372988105}, {"id": 208, "seek": 145998, "start": 1474.3, "end": 1478.7, "text": " In addition to your primary database cluster, you might want to be able to define a disaster", "tokens": [51080, 682, 4500, 281, 428, 6194, 8149, 13630, 11, 291, 1062, 528, 281, 312, 1075, 281, 6964, 257, 11293, 51300], "temperature": 0.0, "avg_logprob": -0.07087999735123073, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.0010032778372988105}, {"id": 209, "seek": 145998, "start": 1478.7, "end": 1484.3, "text": " recovery cluster or a standby cluster. A lot of people have a separate Kubernetes cluster in a", "tokens": [51300, 8597, 13630, 420, 257, 50170, 13630, 13, 316, 688, 295, 561, 362, 257, 4994, 23145, 13630, 294, 257, 51580], "temperature": 0.0, "avg_logprob": -0.07087999735123073, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.0010032778372988105}, {"id": 210, "seek": 148430, "start": 1484.3, "end": 1490.46, "text": " different data center, in a different region, for example. And you want your operator to make", "tokens": [50364, 819, 1412, 3056, 11, 294, 257, 819, 4458, 11, 337, 1365, 13, 400, 291, 528, 428, 12973, 281, 652, 50672], "temperature": 0.0, "avg_logprob": -0.1074337535434299, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.0034637630451470613}, {"id": 211, "seek": 148430, "start": 1490.46, "end": 1497.4199999999998, "text": " sure that's kept up to date, either via wall streaming from a cloud backup repository that", "tokens": [50672, 988, 300, 311, 4305, 493, 281, 4002, 11, 2139, 5766, 2929, 11791, 490, 257, 4588, 14807, 25841, 300, 51020], "temperature": 0.0, "avg_logprob": -0.1074337535434299, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.0034637630451470613}, {"id": 212, "seek": 148430, "start": 1497.4199999999998, "end": 1503.02, "text": " it sent the wall files to, or via streaming replication, or belt embraces. You might want it", "tokens": [51020, 309, 2279, 264, 2929, 7098, 281, 11, 420, 5766, 11791, 39911, 11, 420, 10750, 9392, 2116, 13, 509, 1062, 528, 309, 51300], "temperature": 0.0, "avg_logprob": -0.1074337535434299, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.0034637630451470613}, {"id": 213, "seek": 148430, "start": 1503.02, "end": 1511.5, "text": " to do both. You might want to use a similar setup as this to create a clone of your database for", "tokens": [51300, 281, 360, 1293, 13, 509, 1062, 528, 281, 764, 257, 2531, 8657, 382, 341, 281, 1884, 257, 26506, 295, 428, 8149, 337, 51724], "temperature": 0.0, "avg_logprob": -0.1074337535434299, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.0034637630451470613}, {"id": 214, "seek": 151150, "start": 1511.5, "end": 1517.42, "text": " test or development purposes. And you want your operator to allow you to do that very, very simply.", "tokens": [50364, 1500, 420, 3250, 9932, 13, 400, 291, 528, 428, 12973, 281, 2089, 291, 281, 360, 300, 588, 11, 588, 2935, 13, 50660], "temperature": 0.0, "avg_logprob": -0.09037994694065403, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.0012036176631227136}, {"id": 215, "seek": 151150, "start": 1522.38, "end": 1526.86, "text": " In terms of security and data protection, there's obviously going to be", "tokens": [50908, 682, 2115, 295, 3825, 293, 1412, 6334, 11, 456, 311, 2745, 516, 281, 312, 51132], "temperature": 0.0, "avg_logprob": -0.09037994694065403, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.0012036176631227136}, {"id": 216, "seek": 151150, "start": 1526.86, "end": 1531.58, "text": " manual effort here. You want to be in charge of defining your security policies.", "tokens": [51132, 9688, 4630, 510, 13, 509, 528, 281, 312, 294, 4602, 295, 17827, 428, 3825, 7657, 13, 51368], "temperature": 0.0, "avg_logprob": -0.09037994694065403, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.0012036176631227136}, {"id": 217, "seek": 151150, "start": 1533.42, "end": 1536.62, "text": " But the operator should provide you with the means to implement those.", "tokens": [51460, 583, 264, 12973, 820, 2893, 291, 365, 264, 1355, 281, 4445, 729, 13, 51620], "temperature": 0.0, "avg_logprob": -0.09037994694065403, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.0012036176631227136}, {"id": 218, "seek": 153662, "start": 1537.02, "end": 1541.8999999999999, "text": " So you want it to do things like managing database access, so creating database users,", "tokens": [50384, 407, 291, 528, 309, 281, 360, 721, 411, 11642, 8149, 2105, 11, 370, 4084, 8149, 5022, 11, 50628], "temperature": 0.0, "avg_logprob": -0.267200927734375, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.002738812705501914}, {"id": 219, "seek": 153662, "start": 1541.8999999999999, "end": 1550.2199999999998, "text": " making sure they've got the right permissions as defined by you. Maintaining pghba.conf entries,", "tokens": [50628, 1455, 988, 436, 600, 658, 264, 558, 32723, 382, 7642, 538, 291, 13, 376, 5114, 3686, 280, 9030, 4231, 13, 24697, 23041, 11, 51044], "temperature": 0.0, "avg_logprob": -0.267200927734375, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.002738812705501914}, {"id": 220, "seek": 153662, "start": 1551.1, "end": 1555.4199999999998, "text": " encrypting passwords and storing them in secrets, managing SSL or TLS,", "tokens": [51088, 17972, 662, 278, 33149, 293, 26085, 552, 294, 14093, 11, 11642, 12238, 43, 420, 314, 19198, 11, 51304], "temperature": 0.0, "avg_logprob": -0.267200927734375, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.002738812705501914}, {"id": 221, "seek": 153662, "start": 1556.62, "end": 1559.02, "text": " generating and managing the certificates for you.", "tokens": [51364, 17746, 293, 11642, 264, 32941, 337, 291, 13, 51484], "temperature": 0.0, "avg_logprob": -0.267200927734375, "compression_ratio": 1.5431472081218274, "no_speech_prob": 0.002738812705501914}, {"id": 222, "seek": 155902, "start": 1559.1, "end": 1567.82, "text": " Monitoring is a hugely important part of database administration. You really need to know what's", "tokens": [50368, 33799, 278, 307, 257, 27417, 1021, 644, 295, 8149, 7236, 13, 509, 534, 643, 281, 458, 437, 311, 50804], "temperature": 0.0, "avg_logprob": -0.14215172168820403, "compression_ratio": 1.6973684210526316, "no_speech_prob": 0.0090910280123353}, {"id": 223, "seek": 155902, "start": 1567.82, "end": 1574.54, "text": " going on in your database. You want to be aware of potential issues before they come emergencies.", "tokens": [50804, 516, 322, 294, 428, 8149, 13, 509, 528, 281, 312, 3650, 295, 3995, 2663, 949, 436, 808, 43483, 13, 51140], "temperature": 0.0, "avg_logprob": -0.14215172168820403, "compression_ratio": 1.6973684210526316, "no_speech_prob": 0.0090910280123353}, {"id": 224, "seek": 155902, "start": 1577.1, "end": 1581.82, "text": " Rather than reinvent the wheel and create your own monitoring system, trying to figure out the", "tokens": [51268, 16571, 813, 33477, 264, 5589, 293, 1884, 428, 1065, 11028, 1185, 11, 1382, 281, 2573, 484, 264, 51504], "temperature": 0.0, "avg_logprob": -0.14215172168820403, "compression_ratio": 1.6973684210526316, "no_speech_prob": 0.0090910280123353}, {"id": 225, "seek": 155902, "start": 1581.82, "end": 1586.06, "text": " queries that you need, the scripts that you might want to run to keep track of what's going on in", "tokens": [51504, 24109, 300, 291, 643, 11, 264, 23294, 300, 291, 1062, 528, 281, 1190, 281, 1066, 2837, 295, 437, 311, 516, 322, 294, 51716], "temperature": 0.0, "avg_logprob": -0.14215172168820403, "compression_ratio": 1.6973684210526316, "no_speech_prob": 0.0090910280123353}, {"id": 226, "seek": 158606, "start": 1586.1399999999999, "end": 1590.78, "text": " your database and then maybe setting up your own dashboards, you can let the operator configure", "tokens": [50368, 428, 8149, 293, 550, 1310, 3287, 493, 428, 1065, 8240, 17228, 11, 291, 393, 718, 264, 12973, 22162, 50600], "temperature": 0.0, "avg_logprob": -0.25198700231149657, "compression_ratio": 1.904, "no_speech_prob": 0.005621911957859993}, {"id": 227, "seek": 158606, "start": 1590.78, "end": 1596.62, "text": " monitoring for you. So the pigo monitoring architecture, for example, looks a bit like this.", "tokens": [50600, 11028, 337, 291, 13, 407, 264, 280, 7483, 11028, 9482, 11, 337, 1365, 11, 1542, 257, 857, 411, 341, 13, 50892], "temperature": 0.0, "avg_logprob": -0.25198700231149657, "compression_ratio": 1.904, "no_speech_prob": 0.005621911957859993}, {"id": 228, "seek": 158606, "start": 1597.34, "end": 1602.86, "text": " You want the operator to configure the logging parameters for you. You want to make sure that", "tokens": [50928, 509, 528, 264, 12973, 281, 22162, 264, 27991, 9834, 337, 291, 13, 509, 528, 281, 652, 988, 300, 51204], "temperature": 0.0, "avg_logprob": -0.25198700231149657, "compression_ratio": 1.904, "no_speech_prob": 0.005621911957859993}, {"id": 229, "seek": 158606, "start": 1602.86, "end": 1609.1, "text": " you're actually storing all of the information that you want in your PostQuest logs. You want it to", "tokens": [51204, 291, 434, 767, 26085, 439, 295, 264, 1589, 300, 291, 528, 294, 428, 10223, 8547, 377, 20820, 13, 509, 528, 309, 281, 51516], "temperature": 0.0, "avg_logprob": -0.25198700231149657, "compression_ratio": 1.904, "no_speech_prob": 0.005621911957859993}, {"id": 230, "seek": 158606, "start": 1609.74, "end": 1614.94, "text": " export metrics from your database. So we have a sidecar there for metrics from your database.", "tokens": [51548, 10725, 16367, 490, 428, 8149, 13, 407, 321, 362, 257, 1252, 6166, 456, 337, 16367, 490, 428, 8149, 13, 51808], "temperature": 0.0, "avg_logprob": -0.25198700231149657, "compression_ratio": 1.904, "no_speech_prob": 0.005621911957859993}, {"id": 231, "seek": 161494, "start": 1615.5, "end": 1622.6200000000001, "text": " You then want it to either integrate with your existing monitoring stack or you want it to", "tokens": [50392, 509, 550, 528, 309, 281, 2139, 13365, 365, 428, 6741, 11028, 8630, 420, 291, 528, 309, 281, 50748], "temperature": 0.0, "avg_logprob": -0.13976576040079305, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.0025071275886148214}, {"id": 232, "seek": 161494, "start": 1622.6200000000001, "end": 1627.98, "text": " stand up a monitoring stack for you. So Prometheus with pre-configured metrics,", "tokens": [50748, 1463, 493, 257, 11028, 8630, 337, 291, 13, 407, 2114, 649, 42209, 365, 659, 12, 1671, 20646, 3831, 16367, 11, 51016], "temperature": 0.0, "avg_logprob": -0.13976576040079305, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.0025071275886148214}, {"id": 233, "seek": 161494, "start": 1627.98, "end": 1634.22, "text": " alert manager with some pre-configured alerts, Grafana with dashboards that are already set up for you.", "tokens": [51016, 9615, 6598, 365, 512, 659, 12, 1671, 20646, 3831, 28061, 11, 8985, 69, 2095, 365, 8240, 17228, 300, 366, 1217, 992, 493, 337, 291, 13, 51328], "temperature": 0.0, "avg_logprob": -0.13976576040079305, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.0025071275886148214}, {"id": 234, "seek": 161494, "start": 1639.3400000000001, "end": 1644.46, "text": " You'll probably be pleased to know that it's not going to take over your database design and", "tokens": [51584, 509, 603, 1391, 312, 10587, 281, 458, 300, 309, 311, 406, 516, 281, 747, 670, 428, 8149, 1715, 293, 51840], "temperature": 0.0, "avg_logprob": -0.13976576040079305, "compression_ratio": 1.6990740740740742, "no_speech_prob": 0.0025071275886148214}, {"id": 235, "seek": 164446, "start": 1644.46, "end": 1648.6200000000001, "text": " data modeling because you obviously want to keep some of the fun bits of database administration.", "tokens": [50364, 1412, 15983, 570, 291, 2745, 528, 281, 1066, 512, 295, 264, 1019, 9239, 295, 8149, 7236, 13, 50572], "temperature": 0.0, "avg_logprob": -0.07836151726638214, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.0002835390332620591}, {"id": 236, "seek": 164446, "start": 1651.9, "end": 1657.1000000000001, "text": " And although the operator isn't going to completely relieve you of support duties,", "tokens": [50736, 400, 4878, 264, 12973, 1943, 380, 516, 281, 2584, 30450, 291, 295, 1406, 20910, 11, 50996], "temperature": 0.0, "avg_logprob": -0.07836151726638214, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.0002835390332620591}, {"id": 237, "seek": 164446, "start": 1657.1000000000001, "end": 1663.5, "text": " it should mean that you're called on less frequently in an emergency in the middle of the night,", "tokens": [50996, 309, 820, 914, 300, 291, 434, 1219, 322, 1570, 10374, 294, 364, 7473, 294, 264, 2808, 295, 264, 1818, 11, 51316], "temperature": 0.0, "avg_logprob": -0.07836151726638214, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.0002835390332620591}, {"id": 238, "seek": 164446, "start": 1663.5, "end": 1670.14, "text": " for example, because you've got that high availability already put in place and automated.", "tokens": [51316, 337, 1365, 11, 570, 291, 600, 658, 300, 1090, 17945, 1217, 829, 294, 1081, 293, 18473, 13, 51648], "temperature": 0.0, "avg_logprob": -0.07836151726638214, "compression_ratio": 1.5793991416309012, "no_speech_prob": 0.0002835390332620591}, {"id": 239, "seek": 167014, "start": 1670.14, "end": 1676.5400000000002, "text": " You've got the self-healing capabilities of Kubernetes. You've got the monitoring in place so", "tokens": [50364, 509, 600, 658, 264, 2698, 12, 675, 4270, 10862, 295, 23145, 13, 509, 600, 658, 264, 11028, 294, 1081, 370, 50684], "temperature": 0.0, "avg_logprob": -0.06708315043773466, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.0018936092965304852}, {"id": 240, "seek": 167014, "start": 1676.5400000000002, "end": 1681.5800000000002, "text": " that you've already been keeping an eye on things and trying to react before things become a problem.", "tokens": [50684, 300, 291, 600, 1217, 668, 5145, 364, 3313, 322, 721, 293, 1382, 281, 4515, 949, 721, 1813, 257, 1154, 13, 50936], "temperature": 0.0, "avg_logprob": -0.06708315043773466, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.0018936092965304852}, {"id": 241, "seek": 167014, "start": 1682.6200000000001, "end": 1687.0200000000002, "text": " You've got alerting in place, so hopefully when thresholds are exceeded, you already know about", "tokens": [50988, 509, 600, 658, 419, 27187, 294, 1081, 11, 370, 4696, 562, 14678, 82, 366, 38026, 11, 291, 1217, 458, 466, 51208], "temperature": 0.0, "avg_logprob": -0.06708315043773466, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.0018936092965304852}, {"id": 242, "seek": 167014, "start": 1687.0200000000002, "end": 1692.7, "text": " those things and you can fix them before they become emergencies. So hopefully you're only", "tokens": [51208, 729, 721, 293, 291, 393, 3191, 552, 949, 436, 1813, 43483, 13, 407, 4696, 291, 434, 787, 51492], "temperature": 0.0, "avg_logprob": -0.06708315043773466, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.0018936092965304852}, {"id": 243, "seek": 167014, "start": 1692.7, "end": 1697.5800000000002, "text": " going to get involved if there's something particularly complicated going on that needs", "tokens": [51492, 516, 281, 483, 3288, 498, 456, 311, 746, 4098, 6179, 516, 322, 300, 2203, 51736], "temperature": 0.0, "avg_logprob": -0.06708315043773466, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.0018936092965304852}, {"id": 244, "seek": 169758, "start": 1697.58, "end": 1709.1799999999998, "text": " detailed analysis. What about database software install and upgrade? Well, the install bit's easy.", "tokens": [50364, 9942, 5215, 13, 708, 466, 8149, 4722, 3625, 293, 11484, 30, 1042, 11, 264, 3625, 857, 311, 1858, 13, 50944], "temperature": 0.0, "avg_logprob": -0.1511671641101576, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0018610553815960884}, {"id": 245, "seek": 169758, "start": 1709.1799999999998, "end": 1714.78, "text": " You don't actually need to do any installing of Postgres or of those associated tools such as PG", "tokens": [50944, 509, 500, 380, 767, 643, 281, 360, 604, 20762, 295, 10223, 45189, 420, 295, 729, 6615, 3873, 1270, 382, 40975, 51224], "temperature": 0.0, "avg_logprob": -0.1511671641101576, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0018610553815960884}, {"id": 246, "seek": 169758, "start": 1714.78, "end": 1724.22, "text": " Backgres, the Prometheus Grafana, your Petrona. You don't need to install any of those because", "tokens": [51224, 5833, 45189, 11, 264, 2114, 649, 42209, 8985, 69, 2095, 11, 428, 10472, 2044, 64, 13, 509, 500, 380, 643, 281, 3625, 604, 295, 729, 570, 51696], "temperature": 0.0, "avg_logprob": -0.1511671641101576, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0018610553815960884}, {"id": 247, "seek": 172422, "start": 1724.3, "end": 1729.58, "text": " they come pre-installed in the container images that are available with your operator.", "tokens": [50368, 436, 808, 659, 12, 13911, 8907, 294, 264, 10129, 5267, 300, 366, 2435, 365, 428, 12973, 13, 50632], "temperature": 0.0, "avg_logprob": -0.12034458991808769, "compression_ratio": 1.5683760683760684, "no_speech_prob": 0.0017711976543068886}, {"id": 248, "seek": 172422, "start": 1732.94, "end": 1740.22, "text": " As for upgrades, a few slides back we talked about stateful sets being useful for applications that", "tokens": [50800, 1018, 337, 24868, 11, 257, 1326, 9788, 646, 321, 2825, 466, 1785, 906, 6352, 885, 4420, 337, 5821, 300, 51164], "temperature": 0.0, "avg_logprob": -0.12034458991808769, "compression_ratio": 1.5683760683760684, "no_speech_prob": 0.0017711976543068886}, {"id": 249, "seek": 172422, "start": 1740.22, "end": 1747.74, "text": " need ordered automated rolling updates. The operator can use exactly that technique for", "tokens": [51164, 643, 8866, 18473, 9439, 9205, 13, 440, 12973, 393, 764, 2293, 300, 6532, 337, 51540], "temperature": 0.0, "avg_logprob": -0.12034458991808769, "compression_ratio": 1.5683760683760684, "no_speech_prob": 0.0017711976543068886}, {"id": 250, "seek": 172422, "start": 1747.74, "end": 1752.94, "text": " performing a Postgres minor version upgrade. Next week, when you want to upgrade either from", "tokens": [51540, 10205, 257, 10223, 45189, 6696, 3037, 11484, 13, 3087, 1243, 11, 562, 291, 528, 281, 11484, 2139, 490, 51800], "temperature": 0.0, "avg_logprob": -0.12034458991808769, "compression_ratio": 1.5683760683760684, "no_speech_prob": 0.0017711976543068886}, {"id": 251, "seek": 175294, "start": 1753.66, "end": 1763.02, "text": " 15.5 to 15.6 or 16.1 to 16.2, you can simply change the version in the manifest, so in the", "tokens": [50400, 2119, 13, 20, 281, 2119, 13, 21, 420, 3165, 13, 16, 281, 3165, 13, 17, 11, 291, 393, 2935, 1319, 264, 3037, 294, 264, 10067, 11, 370, 294, 264, 50868], "temperature": 0.0, "avg_logprob": -0.11870645040489104, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.002795628271996975}, {"id": 252, "seek": 175294, "start": 1763.02, "end": 1769.8200000000002, "text": " definition of your cluster. Reapply it and then you can watch as the replicas are upgraded.", "tokens": [50868, 7123, 295, 428, 13630, 13, 1300, 1746, 356, 309, 293, 550, 291, 393, 1159, 382, 264, 3248, 9150, 366, 24133, 13, 51208], "temperature": 0.0, "avg_logprob": -0.11870645040489104, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.002795628271996975}, {"id": 253, "seek": 175294, "start": 1771.42, "end": 1774.78, "text": " One of the replicas will be promoted to be the new primary.", "tokens": [51288, 1485, 295, 264, 3248, 9150, 486, 312, 21162, 281, 312, 264, 777, 6194, 13, 51456], "temperature": 0.0, "avg_logprob": -0.11870645040489104, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.002795628271996975}, {"id": 254, "seek": 175294, "start": 1776.7, "end": 1779.02, "text": " And then finally, the original primary is updated.", "tokens": [51552, 400, 550, 2721, 11, 264, 3380, 6194, 307, 10588, 13, 51668], "temperature": 0.0, "avg_logprob": -0.11870645040489104, "compression_ratio": 1.5668449197860963, "no_speech_prob": 0.002795628271996975}, {"id": 255, "seek": 178294, "start": 1783.1000000000001, "end": 1787.02, "text": " Major version upgrades obviously require a lot more planning and testing.", "tokens": [50372, 15581, 3037, 24868, 2745, 3651, 257, 688, 544, 5038, 293, 4997, 13, 50568], "temperature": 0.0, "avg_logprob": -0.04651486873626709, "compression_ratio": 1.9327731092436975, "no_speech_prob": 0.011774659156799316}, {"id": 256, "seek": 178294, "start": 1787.02, "end": 1791.74, "text": " So the operator isn't going to take away all of those tasks for you. It's not going to take care", "tokens": [50568, 407, 264, 12973, 1943, 380, 516, 281, 747, 1314, 439, 295, 729, 9608, 337, 291, 13, 467, 311, 406, 516, 281, 747, 1127, 50804], "temperature": 0.0, "avg_logprob": -0.04651486873626709, "compression_ratio": 1.9327731092436975, "no_speech_prob": 0.011774659156799316}, {"id": 257, "seek": 178294, "start": 1791.74, "end": 1796.94, "text": " of reading all of the release notes. It's not going to take care of testing your application", "tokens": [50804, 295, 3760, 439, 295, 264, 4374, 5570, 13, 467, 311, 406, 516, 281, 747, 1127, 295, 4997, 428, 3861, 51064], "temperature": 0.0, "avg_logprob": -0.04651486873626709, "compression_ratio": 1.9327731092436975, "no_speech_prob": 0.011774659156799316}, {"id": 258, "seek": 178294, "start": 1796.94, "end": 1801.8200000000002, "text": " with the new version. It's not going to take care of checking your application code to make sure", "tokens": [51064, 365, 264, 777, 3037, 13, 467, 311, 406, 516, 281, 747, 1127, 295, 8568, 428, 3861, 3089, 281, 652, 988, 51308], "temperature": 0.0, "avg_logprob": -0.04651486873626709, "compression_ratio": 1.9327731092436975, "no_speech_prob": 0.011774659156799316}, {"id": 259, "seek": 178294, "start": 1801.8200000000002, "end": 1808.06, "text": " that you're not using any deprecated features, for example. But you do want it to perform automated", "tokens": [51308, 300, 291, 434, 406, 1228, 604, 1367, 13867, 770, 4122, 11, 337, 1365, 13, 583, 291, 360, 528, 309, 281, 2042, 18473, 51620], "temperature": 0.0, "avg_logprob": -0.04651486873626709, "compression_ratio": 1.9327731092436975, "no_speech_prob": 0.011774659156799316}, {"id": 260, "seek": 180806, "start": 1808.06, "end": 1815.4199999999998, "text": " upgrades from one major version to another. So in the case of Pego, that uses PG upgrade.", "tokens": [50364, 24868, 490, 472, 2563, 3037, 281, 1071, 13, 407, 294, 264, 1389, 295, 430, 6308, 11, 300, 4960, 40975, 11484, 13, 50732], "temperature": 0.0, "avg_logprob": -0.14614998852765118, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.007195890881121159}, {"id": 261, "seek": 180806, "start": 1815.4199999999998, "end": 1821.02, "text": " Other operators might either use PG upgrade or logical replication or PG dump and PG restore.", "tokens": [50732, 5358, 19077, 1062, 2139, 764, 40975, 11484, 420, 14978, 39911, 420, 40975, 11430, 293, 40975, 15227, 13, 51012], "temperature": 0.0, "avg_logprob": -0.14614998852765118, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.007195890881121159}, {"id": 262, "seek": 180806, "start": 1827.34, "end": 1830.78, "text": " Does the operator mean then that we don't need any database expertise?", "tokens": [51328, 4402, 264, 12973, 914, 550, 300, 321, 500, 380, 643, 604, 8149, 11769, 30, 51500], "temperature": 0.0, "avg_logprob": -0.14614998852765118, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.007195890881121159}, {"id": 263, "seek": 180806, "start": 1832.7, "end": 1837.1799999999998, "text": " Well, as we saw, there is a lot of database expertise that's built into the operator.", "tokens": [51596, 1042, 11, 382, 321, 1866, 11, 456, 307, 257, 688, 295, 8149, 11769, 300, 311, 3094, 666, 264, 12973, 13, 51820], "temperature": 0.0, "avg_logprob": -0.14614998852765118, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.007195890881121159}, {"id": 264, "seek": 183806, "start": 1838.06, "end": 1841.82, "text": " But it's not going to do everything. We still need a human export for things,", "tokens": [50364, 583, 309, 311, 406, 516, 281, 360, 1203, 13, 492, 920, 643, 257, 1952, 10725, 337, 721, 11, 50552], "temperature": 0.0, "avg_logprob": -0.17062017515108183, "compression_ratio": 1.681592039800995, "no_speech_prob": 0.0007034039590507746}, {"id": 265, "seek": 183806, "start": 1841.82, "end": 1848.1399999999999, "text": " experts for things like strategic considerations, looking at the need, the actual needs of the", "tokens": [50552, 8572, 337, 721, 411, 10924, 24070, 11, 1237, 412, 264, 643, 11, 264, 3539, 2203, 295, 264, 50868], "temperature": 0.0, "avg_logprob": -0.17062017515108183, "compression_ratio": 1.681592039800995, "no_speech_prob": 0.0007034039590507746}, {"id": 266, "seek": 183806, "start": 1848.1399999999999, "end": 1852.46, "text": " database application, considering business requirements, for example.", "tokens": [50868, 8149, 3861, 11, 8079, 1606, 7728, 11, 337, 1365, 13, 51084], "temperature": 0.0, "avg_logprob": -0.17062017515108183, "compression_ratio": 1.681592039800995, "no_speech_prob": 0.0007034039590507746}, {"id": 267, "seek": 183806, "start": 1857.58, "end": 1863.1799999999998, "text": " Okay, performance tuning. Again, it's not going to do everything for you, but it can do certain", "tokens": [51340, 1033, 11, 3389, 15164, 13, 3764, 11, 309, 311, 406, 516, 281, 360, 1203, 337, 291, 11, 457, 309, 393, 360, 1629, 51620], "temperature": 0.0, "avg_logprob": -0.17062017515108183, "compression_ratio": 1.681592039800995, "no_speech_prob": 0.0007034039590507746}, {"id": 268, "seek": 186318, "start": 1863.18, "end": 1874.46, "text": " things. You'll still need to do the initial setup, making sure that you've got your application", "tokens": [50364, 721, 13, 509, 603, 920, 643, 281, 360, 264, 5883, 8657, 11, 1455, 988, 300, 291, 600, 658, 428, 3861, 50928], "temperature": 0.0, "avg_logprob": -0.08875473452285981, "compression_ratio": 1.6174863387978142, "no_speech_prob": 0.0030291471630334854}, {"id": 269, "seek": 186318, "start": 1874.46, "end": 1880.78, "text": " configured the way you wanted, et cetera. But you do expect the operator to do some of it for you.", "tokens": [50928, 30538, 264, 636, 291, 1415, 11, 1030, 11458, 13, 583, 291, 360, 2066, 264, 12973, 281, 360, 512, 295, 309, 337, 291, 13, 51244], "temperature": 0.0, "avg_logprob": -0.08875473452285981, "compression_ratio": 1.6174863387978142, "no_speech_prob": 0.0030291471630334854}, {"id": 270, "seek": 186318, "start": 1881.98, "end": 1887.74, "text": " So it could set initial parameters to a sensible value. It could make sure that you've got connection", "tokens": [51304, 407, 309, 727, 992, 5883, 9834, 281, 257, 25380, 2158, 13, 467, 727, 652, 988, 300, 291, 600, 658, 4984, 51592], "temperature": 0.0, "avg_logprob": -0.08875473452285981, "compression_ratio": 1.6174863387978142, "no_speech_prob": 0.0030291471630334854}, {"id": 271, "seek": 188774, "start": 1887.74, "end": 1893.1, "text": " pooling available, make sure that you've got the PG stat statements, extension available and enabled,", "tokens": [50364, 7005, 278, 2435, 11, 652, 988, 300, 291, 600, 658, 264, 40975, 2219, 12363, 11, 10320, 2435, 293, 15172, 11, 50632], "temperature": 0.0, "avg_logprob": -0.11028089641053, "compression_ratio": 1.827027027027027, "no_speech_prob": 0.005585683975368738}, {"id": 272, "seek": 188774, "start": 1894.22, "end": 1898.78, "text": " make sure that slow queries are being logged, for example. And as we saw before,", "tokens": [50688, 652, 988, 300, 2964, 24109, 366, 885, 27231, 11, 337, 1365, 13, 400, 382, 321, 1866, 949, 11, 50916], "temperature": 0.0, "avg_logprob": -0.11028089641053, "compression_ratio": 1.827027027027027, "no_speech_prob": 0.005585683975368738}, {"id": 273, "seek": 188774, "start": 1898.78, "end": 1901.02, "text": " make sure that you've got monitoring and alerting in place.", "tokens": [50916, 652, 988, 300, 291, 600, 658, 11028, 293, 419, 27187, 294, 1081, 13, 51028], "temperature": 0.0, "avg_logprob": -0.11028089641053, "compression_ratio": 1.827027027027027, "no_speech_prob": 0.005585683975368738}, {"id": 274, "seek": 188774, "start": 1908.78, "end": 1915.1, "text": " Capacity planning. So the monitoring and alerting that you've put in place should mean that you", "tokens": [51416, 8363, 19008, 5038, 13, 407, 264, 11028, 293, 419, 27187, 300, 291, 600, 829, 294, 1081, 820, 914, 300, 291, 51732], "temperature": 0.0, "avg_logprob": -0.11028089641053, "compression_ratio": 1.827027027027027, "no_speech_prob": 0.005585683975368738}, {"id": 275, "seek": 191510, "start": 1915.1, "end": 1920.2199999999998, "text": " can see what's going on in your database. You can see the resources it's using. You can see how", "tokens": [50364, 393, 536, 437, 311, 516, 322, 294, 428, 8149, 13, 509, 393, 536, 264, 3593, 309, 311, 1228, 13, 509, 393, 536, 577, 50620], "temperature": 0.0, "avg_logprob": -0.06686833771792325, "compression_ratio": 1.7794117647058822, "no_speech_prob": 0.001709686010144651}, {"id": 276, "seek": 191510, "start": 1920.2199999999998, "end": 1926.9399999999998, "text": " much space it's using. You should be able to know approximately what kind of trends you're seeing.", "tokens": [50620, 709, 1901, 309, 311, 1228, 13, 509, 820, 312, 1075, 281, 458, 10447, 437, 733, 295, 13892, 291, 434, 2577, 13, 50956], "temperature": 0.0, "avg_logprob": -0.06686833771792325, "compression_ratio": 1.7794117647058822, "no_speech_prob": 0.001709686010144651}, {"id": 277, "seek": 191510, "start": 1929.5, "end": 1933.74, "text": " In your definition, in your manifest, your definition of your cluster,", "tokens": [51084, 682, 428, 7123, 11, 294, 428, 10067, 11, 428, 7123, 295, 428, 13630, 11, 51296], "temperature": 0.0, "avg_logprob": -0.06686833771792325, "compression_ratio": 1.7794117647058822, "no_speech_prob": 0.001709686010144651}, {"id": 278, "seek": 191510, "start": 1934.86, "end": 1940.1399999999999, "text": " you'll have said how much storage you want. If you're using a storage class that supports dynamic", "tokens": [51352, 291, 603, 362, 848, 577, 709, 6725, 291, 528, 13, 759, 291, 434, 1228, 257, 6725, 1508, 300, 9346, 8546, 51616], "temperature": 0.0, "avg_logprob": -0.06686833771792325, "compression_ratio": 1.7794117647058822, "no_speech_prob": 0.001709686010144651}, {"id": 279, "seek": 194014, "start": 1940.14, "end": 1946.0600000000002, "text": " resizing, you can just change that in your manifest, reapply it, and your volume will be", "tokens": [50364, 725, 3319, 11, 291, 393, 445, 1319, 300, 294, 428, 10067, 11, 35638, 356, 309, 11, 293, 428, 5523, 486, 312, 50660], "temperature": 0.0, "avg_logprob": -0.06704504946444897, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0025120375212281942}, {"id": 280, "seek": 194014, "start": 1946.0600000000002, "end": 1952.0600000000002, "text": " resized. If not, you can create a new instance with a bigger volume and use the same technique that", "tokens": [50660, 725, 1602, 13, 759, 406, 11, 291, 393, 1884, 257, 777, 5197, 365, 257, 3801, 5523, 293, 764, 264, 912, 6532, 300, 50960], "temperature": 0.0, "avg_logprob": -0.06704504946444897, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0025120375212281942}, {"id": 281, "seek": 194014, "start": 1952.0600000000002, "end": 1959.1000000000001, "text": " we saw for the Postgres minor version upgrade to do a rolling increase of your volume. If you're", "tokens": [50960, 321, 1866, 337, 264, 10223, 45189, 6696, 3037, 11484, 281, 360, 257, 9439, 3488, 295, 428, 5523, 13, 759, 291, 434, 51312], "temperature": 0.0, "avg_logprob": -0.06704504946444897, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0025120375212281942}, {"id": 282, "seek": 194014, "start": 1959.1000000000001, "end": 1963.9, "text": " using that rolling technique, you can also use that if you want to reduce your volume in size.", "tokens": [51312, 1228, 300, 9439, 6532, 11, 291, 393, 611, 764, 300, 498, 291, 528, 281, 5407, 428, 5523, 294, 2744, 13, 51552], "temperature": 0.0, "avg_logprob": -0.06704504946444897, "compression_ratio": 1.7592592592592593, "no_speech_prob": 0.0025120375212281942}, {"id": 283, "seek": 196390, "start": 1964.14, "end": 1974.3000000000002, "text": " Other resources such as CPU and memory, for example, can also easily be scaled. And you can use things", "tokens": [50376, 5358, 3593, 1270, 382, 13199, 293, 4675, 11, 337, 1365, 11, 393, 611, 3612, 312, 36039, 13, 400, 291, 393, 764, 721, 50884], "temperature": 0.0, "avg_logprob": -0.1971241579217426, "compression_ratio": 1.4772727272727273, "no_speech_prob": 0.0008031610632315278}, {"id": 284, "seek": 196390, "start": 1974.3000000000002, "end": 1982.94, "text": " like the request and the limits to make sure that you allow it to claim more resources up to a certain threshold.", "tokens": [50884, 411, 264, 5308, 293, 264, 10406, 281, 652, 988, 300, 291, 2089, 309, 281, 3932, 544, 3593, 493, 281, 257, 1629, 14678, 13, 51316], "temperature": 0.0, "avg_logprob": -0.1971241579217426, "compression_ratio": 1.4772727272727273, "no_speech_prob": 0.0008031610632315278}, {"id": 285, "seek": 196390, "start": 1988.6200000000001, "end": 1991.8200000000002, "text": " Database creation and database maintenance.", "tokens": [51600, 40461, 651, 8016, 293, 8149, 11258, 13, 51760], "temperature": 0.0, "avg_logprob": -0.1971241579217426, "compression_ratio": 1.4772727272727273, "no_speech_prob": 0.0008031610632315278}, {"id": 286, "seek": 199390, "start": 1994.14, "end": 2001.02, "text": " So users and databases, I don't know the details of how this works in other operators, but in", "tokens": [50376, 407, 5022, 293, 22380, 11, 286, 500, 380, 458, 264, 4365, 295, 577, 341, 1985, 294, 661, 19077, 11, 457, 294, 50720], "temperature": 0.0, "avg_logprob": -0.12886592474850742, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007966787670738995}, {"id": 287, "seek": 199390, "start": 2001.02, "end": 2007.74, "text": " Pego, for example, you can state a number of users that you want to have created automatically in", "tokens": [50720, 430, 6308, 11, 337, 1365, 11, 291, 393, 1785, 257, 1230, 295, 5022, 300, 291, 528, 281, 362, 2942, 6772, 294, 51056], "temperature": 0.0, "avg_logprob": -0.12886592474850742, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007966787670738995}, {"id": 288, "seek": 199390, "start": 2007.74, "end": 2012.8600000000001, "text": " your database and the databases that they should be able to access. If those databases don't already", "tokens": [51056, 428, 8149, 293, 264, 22380, 300, 436, 820, 312, 1075, 281, 2105, 13, 759, 729, 22380, 500, 380, 1217, 51312], "temperature": 0.0, "avg_logprob": -0.12886592474850742, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007966787670738995}, {"id": 289, "seek": 199390, "start": 2012.8600000000001, "end": 2023.42, "text": " exist, it will create them for you. Database maintenance is a really wide ranging", "tokens": [51312, 2514, 11, 309, 486, 1884, 552, 337, 291, 13, 40461, 651, 11258, 307, 257, 534, 4874, 25532, 51840], "temperature": 0.0, "avg_logprob": -0.12886592474850742, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007966787670738995}, {"id": 290, "seek": 202342, "start": 2023.74, "end": 2029.18, "text": " and very unspecific task. So this is a list of some of the things that might fall into that category", "tokens": [50380, 293, 588, 2693, 494, 22856, 5633, 13, 407, 341, 307, 257, 1329, 295, 512, 295, 264, 721, 300, 1062, 2100, 666, 300, 7719, 50652], "temperature": 0.0, "avg_logprob": -0.0894347961912764, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.0012396813835948706}, {"id": 291, "seek": 202342, "start": 2029.18, "end": 2034.8600000000001, "text": " of database maintenance. And we've already looked at a lot of them. So we know that we can expect", "tokens": [50652, 295, 8149, 11258, 13, 400, 321, 600, 1217, 2956, 412, 257, 688, 295, 552, 13, 407, 321, 458, 300, 321, 393, 2066, 50936], "temperature": 0.0, "avg_logprob": -0.0894347961912764, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.0012396813835948706}, {"id": 292, "seek": 202342, "start": 2034.8600000000001, "end": 2041.1000000000001, "text": " our operator to help us with a lot of those. And other maintenance tasks such as index rebuilds,", "tokens": [50936, 527, 12973, 281, 854, 505, 365, 257, 688, 295, 729, 13, 400, 661, 11258, 9608, 1270, 382, 8186, 16877, 82, 11, 51248], "temperature": 0.0, "avg_logprob": -0.0894347961912764, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.0012396813835948706}, {"id": 293, "seek": 202342, "start": 2041.1000000000001, "end": 2045.9, "text": " for example, gathering statistics, that kind of thing could be scheduled via the operator. You", "tokens": [51248, 337, 1365, 11, 13519, 12523, 11, 300, 733, 295, 551, 727, 312, 15678, 5766, 264, 12973, 13, 509, 51488], "temperature": 0.0, "avg_logprob": -0.0894347961912764, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.0012396813835948706}, {"id": 294, "seek": 204590, "start": 2045.9, "end": 2054.46, "text": " can define everything in the same place so that you don't have to then manually change things and", "tokens": [50364, 393, 6964, 1203, 294, 264, 912, 1081, 370, 300, 291, 500, 380, 362, 281, 550, 16945, 1319, 721, 293, 50792], "temperature": 0.0, "avg_logprob": -0.06507465872966067, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.005103467032313347}, {"id": 295, "seek": 204590, "start": 2054.46, "end": 2064.86, "text": " implement things later. Okay, so you're now obviously really excited to give this a try and", "tokens": [50792, 4445, 721, 1780, 13, 1033, 11, 370, 291, 434, 586, 2745, 534, 2919, 281, 976, 341, 257, 853, 293, 51312], "temperature": 0.0, "avg_logprob": -0.06507465872966067, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.005103467032313347}, {"id": 296, "seek": 204590, "start": 2065.6600000000003, "end": 2073.1, "text": " see all this magic for yourself. How can you do that? I'll show you how to get started with Pego,", "tokens": [51352, 536, 439, 341, 5585, 337, 1803, 13, 1012, 393, 291, 360, 300, 30, 286, 603, 855, 291, 577, 281, 483, 1409, 365, 430, 6308, 11, 51724], "temperature": 0.0, "avg_logprob": -0.06507465872966067, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.005103467032313347}, {"id": 297, "seek": 207310, "start": 2073.18, "end": 2080.7799999999997, "text": " but as I've said, other operators are available. First of all, beg, borrow or build yourself", "tokens": [50368, 457, 382, 286, 600, 848, 11, 661, 19077, 366, 2435, 13, 2386, 295, 439, 11, 4612, 11, 11172, 420, 1322, 1803, 50748], "temperature": 0.0, "avg_logprob": -0.11741506810090979, "compression_ratio": 1.7546296296296295, "no_speech_prob": 0.006335602141916752}, {"id": 298, "seek": 207310, "start": 2080.7799999999997, "end": 2087.74, "text": " Kubernetes cluster. As I've said, that can be either one that you build yourself, that can be", "tokens": [50748, 23145, 13630, 13, 1018, 286, 600, 848, 11, 300, 393, 312, 2139, 472, 300, 291, 1322, 1803, 11, 300, 393, 312, 51096], "temperature": 0.0, "avg_logprob": -0.11741506810090979, "compression_ratio": 1.7546296296296295, "no_speech_prob": 0.006335602141916752}, {"id": 299, "seek": 207310, "start": 2088.38, "end": 2096.46, "text": " in the cloud, that can be managed for you, or it can be vanilla Kubernetes. It can be one of the", "tokens": [51128, 294, 264, 4588, 11, 300, 393, 312, 6453, 337, 291, 11, 420, 309, 393, 312, 17528, 23145, 13, 467, 393, 312, 472, 295, 264, 51532], "temperature": 0.0, "avg_logprob": -0.11741506810090979, "compression_ratio": 1.7546296296296295, "no_speech_prob": 0.006335602141916752}, {"id": 300, "seek": 207310, "start": 2096.46, "end": 2101.66, "text": " many different things. It could be OpenShift, Tanzu, Rancher, all sorts of different Kubernetes", "tokens": [51532, 867, 819, 721, 13, 467, 727, 312, 7238, 7774, 2008, 11, 42420, 84, 11, 37740, 260, 11, 439, 7527, 295, 819, 23145, 51792], "temperature": 0.0, "avg_logprob": -0.11741506810090979, "compression_ratio": 1.7546296296296295, "no_speech_prob": 0.006335602141916752}, {"id": 301, "seek": 210166, "start": 2101.74, "end": 2110.3799999999997, "text": " platforms available. Next, fork the Postgres operator example's repository, which gives you a", "tokens": [50368, 9473, 2435, 13, 3087, 11, 17716, 264, 10223, 45189, 12973, 1365, 311, 25841, 11, 597, 2709, 291, 257, 50800], "temperature": 0.0, "avg_logprob": -0.14491647573617789, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.0020033002365380526}, {"id": 302, "seek": 210166, "start": 2110.3799999999997, "end": 2116.54, "text": " sample manifest. It will give you Helm charts, customized manifests that help you install and", "tokens": [50800, 6889, 10067, 13, 467, 486, 976, 291, 6128, 76, 17767, 11, 30581, 50252, 300, 854, 291, 3625, 293, 51108], "temperature": 0.0, "avg_logprob": -0.14491647573617789, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.0020033002365380526}, {"id": 303, "seek": 210166, "start": 2117.1, "end": 2123.98, "text": " configure and deploy your first Postgres cluster using the operator. Okay, so I'm just going to go", "tokens": [51136, 22162, 293, 7274, 428, 700, 10223, 45189, 13630, 1228, 264, 12973, 13, 1033, 11, 370, 286, 478, 445, 516, 281, 352, 51480], "temperature": 0.0, "avg_logprob": -0.14491647573617789, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.0020033002365380526}, {"id": 304, "seek": 212398, "start": 2124.06, "end": 2129.42, "text": " through this step by step. So clone the repo and navigate into it.", "tokens": [50368, 807, 341, 1823, 538, 1823, 13, 407, 26506, 264, 49040, 293, 12350, 666, 309, 13, 50636], "temperature": 0.0, "avg_logprob": -0.10813285083305545, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.023084675893187523}, {"id": 305, "seek": 212398, "start": 2132.14, "end": 2137.18, "text": " Create a Postgres operator namespace, and if you're lazy like me and don't like to keep typing", "tokens": [50772, 20248, 257, 10223, 45189, 12973, 5288, 17940, 11, 293, 498, 291, 434, 14847, 411, 385, 293, 500, 380, 411, 281, 1066, 18444, 51024], "temperature": 0.0, "avg_logprob": -0.10813285083305545, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.023084675893187523}, {"id": 306, "seek": 212398, "start": 2137.18, "end": 2144.94, "text": " minus n and the name of your namespace, set it as your default namespace. Install the operator using", "tokens": [51024, 3175, 297, 293, 264, 1315, 295, 428, 5288, 17940, 11, 992, 309, 382, 428, 7576, 5288, 17940, 13, 31982, 264, 12973, 1228, 51412], "temperature": 0.0, "avg_logprob": -0.10813285083305545, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.023084675893187523}, {"id": 307, "seek": 212398, "start": 2144.94, "end": 2149.42, "text": " the customized file that you'll find in the install default folder.", "tokens": [51412, 264, 30581, 3991, 300, 291, 603, 915, 294, 264, 3625, 7576, 10820, 13, 51636], "temperature": 0.0, "avg_logprob": -0.10813285083305545, "compression_ratio": 1.6417910447761195, "no_speech_prob": 0.023084675893187523}, {"id": 308, "seek": 214942, "start": 2149.58, "end": 2156.86, "text": " Then you'll see that it will create a load of resources for you that are needed for", "tokens": [50372, 1396, 291, 603, 536, 300, 309, 486, 1884, 257, 3677, 295, 3593, 337, 291, 300, 366, 2978, 337, 50736], "temperature": 0.0, "avg_logprob": -0.1543445133027576, "compression_ratio": 1.6484848484848484, "no_speech_prob": 0.0014014316257089376}, {"id": 309, "seek": 214942, "start": 2156.86, "end": 2163.34, "text": " managing and managing that database cluster. So the one that we're most interested in is this", "tokens": [50736, 11642, 293, 11642, 300, 8149, 13630, 13, 407, 264, 472, 300, 321, 434, 881, 3102, 294, 307, 341, 51060], "temperature": 0.0, "avg_logprob": -0.1543445133027576, "compression_ratio": 1.6484848484848484, "no_speech_prob": 0.0014014316257089376}, {"id": 310, "seek": 214942, "start": 2164.86, "end": 2169.98, "text": " Postgres cluster custom resource definition. That's what's going to let us define our cluster.", "tokens": [51136, 10223, 45189, 13630, 2375, 7684, 7123, 13, 663, 311, 437, 311, 516, 281, 718, 505, 6964, 527, 13630, 13, 51392], "temperature": 0.0, "avg_logprob": -0.1543445133027576, "compression_ratio": 1.6484848484848484, "no_speech_prob": 0.0014014316257089376}, {"id": 311, "seek": 216998, "start": 2170.7, "end": 2183.02, "text": " Now, to define our cluster, we're going to just use the example Postgres.yaml that's provided for", "tokens": [50400, 823, 11, 281, 6964, 527, 13630, 11, 321, 434, 516, 281, 445, 764, 264, 1365, 10223, 45189, 13, 88, 335, 75, 300, 311, 5649, 337, 51016], "temperature": 0.0, "avg_logprob": -0.1570437749226888, "compression_ratio": 1.4948979591836735, "no_speech_prob": 0.0054712495766580105}, {"id": 312, "seek": 216998, "start": 2183.02, "end": 2191.5, "text": " us, why reinvent the wheel. So I've created a copy of that in a Fostum folder, and then I can make", "tokens": [51016, 505, 11, 983, 33477, 264, 5589, 13, 407, 286, 600, 2942, 257, 5055, 295, 300, 294, 257, 479, 555, 449, 10820, 11, 293, 550, 286, 393, 652, 51440], "temperature": 0.0, "avg_logprob": -0.1570437749226888, "compression_ratio": 1.4948979591836735, "no_speech_prob": 0.0054712495766580105}, {"id": 313, "seek": 216998, "start": 2191.5, "end": 2197.9, "text": " whatever edits I want to my Postgres.yaml. So the first couple of lines here is just saying that", "tokens": [51440, 2035, 41752, 286, 528, 281, 452, 10223, 45189, 13, 88, 335, 75, 13, 407, 264, 700, 1916, 295, 3876, 510, 307, 445, 1566, 300, 51760], "temperature": 0.0, "avg_logprob": -0.1570437749226888, "compression_ratio": 1.4948979591836735, "no_speech_prob": 0.0054712495766580105}, {"id": 314, "seek": 219790, "start": 2197.9, "end": 2205.26, "text": " I'm creating a Postgres cluster resource, that I'm going to give it a name Fostum just so I", "tokens": [50364, 286, 478, 4084, 257, 10223, 45189, 13630, 7684, 11, 300, 286, 478, 516, 281, 976, 309, 257, 1315, 479, 555, 449, 445, 370, 286, 50732], "temperature": 0.0, "avg_logprob": -0.07789557538133987, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.0020297751761972904}, {"id": 315, "seek": 219790, "start": 2205.26, "end": 2214.94, "text": " know which cluster it is, that I want to use Postgres version 16, that I want three replicas. So", "tokens": [50732, 458, 597, 13630, 309, 307, 11, 300, 286, 528, 281, 764, 10223, 45189, 3037, 3165, 11, 300, 286, 528, 1045, 3248, 9150, 13, 407, 51216], "temperature": 0.0, "avg_logprob": -0.07789557538133987, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.0020297751761972904}, {"id": 316, "seek": 219790, "start": 2214.94, "end": 2219.82, "text": " replicas here is in the Kubernetes sense of the word replica. So that means three database pods.", "tokens": [51216, 3248, 9150, 510, 307, 294, 264, 23145, 2020, 295, 264, 1349, 35456, 13, 407, 300, 1355, 1045, 8149, 31925, 13, 51460], "temperature": 0.0, "avg_logprob": -0.07789557538133987, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.0020297751761972904}, {"id": 317, "seek": 219790, "start": 2219.82, "end": 2224.78, "text": " So I'll have a primary database pod and two standby or replica database pods.", "tokens": [51460, 407, 286, 603, 362, 257, 6194, 8149, 2497, 293, 732, 50170, 420, 35456, 8149, 31925, 13, 51708], "temperature": 0.0, "avg_logprob": -0.07789557538133987, "compression_ratio": 1.736842105263158, "no_speech_prob": 0.0020297751761972904}, {"id": 318, "seek": 222478, "start": 2225.02, "end": 2231.9, "text": " And then I'm just using the default storage class, leaving all of the defaults there. So I'm just", "tokens": [50376, 400, 550, 286, 478, 445, 1228, 264, 7576, 6725, 1508, 11, 5012, 439, 295, 264, 7576, 82, 456, 13, 407, 286, 478, 445, 50720], "temperature": 0.0, "avg_logprob": -0.1086399162208641, "compression_ratio": 1.6866359447004609, "no_speech_prob": 0.0016331536462530494}, {"id": 319, "seek": 222478, "start": 2231.9, "end": 2237.02, "text": " going to have a local volume here, but you can specify whichever storage works in your environment.", "tokens": [50720, 516, 281, 362, 257, 2654, 5523, 510, 11, 457, 291, 393, 16500, 24123, 6725, 1985, 294, 428, 2823, 13, 50976], "temperature": 0.0, "avg_logprob": -0.1086399162208641, "compression_ratio": 1.6866359447004609, "no_speech_prob": 0.0016331536462530494}, {"id": 320, "seek": 222478, "start": 2237.02, "end": 2241.1800000000003, "text": " You might want cloud storage, network storage, local, you know, whatever you're using.", "tokens": [50976, 509, 1062, 528, 4588, 6725, 11, 3209, 6725, 11, 2654, 11, 291, 458, 11, 2035, 291, 434, 1228, 13, 51184], "temperature": 0.0, "avg_logprob": -0.1086399162208641, "compression_ratio": 1.6866359447004609, "no_speech_prob": 0.0016331536462530494}, {"id": 321, "seek": 222478, "start": 2242.6200000000003, "end": 2247.34, "text": " And I've just said that I want to have a one gig volume. That might not be hugely", "tokens": [51256, 400, 286, 600, 445, 848, 300, 286, 528, 281, 362, 257, 472, 8741, 5523, 13, 663, 1062, 406, 312, 27417, 51492], "temperature": 0.0, "avg_logprob": -0.1086399162208641, "compression_ratio": 1.6866359447004609, "no_speech_prob": 0.0016331536462530494}, {"id": 322, "seek": 224734, "start": 2247.34, "end": 2253.58, "text": " visible right down at the bottom there. Okay, last few lines of the manifest.", "tokens": [50364, 8974, 558, 760, 412, 264, 2767, 456, 13, 1033, 11, 1036, 1326, 3876, 295, 264, 10067, 13, 50676], "temperature": 0.0, "avg_logprob": -0.1883669744564008, "compression_ratio": 1.5738636363636365, "no_speech_prob": 0.010507061146199703}, {"id": 323, "seek": 224734, "start": 2255.02, "end": 2257.9, "text": " So the last few lines set up the backup and recovery. So at the moment,", "tokens": [50748, 407, 264, 1036, 1326, 3876, 992, 493, 264, 14807, 293, 8597, 13, 407, 412, 264, 1623, 11, 50892], "temperature": 0.0, "avg_logprob": -0.1883669744564008, "compression_ratio": 1.5738636363636365, "no_speech_prob": 0.010507061146199703}, {"id": 324, "seek": 224734, "start": 2259.02, "end": 2262.7000000000003, "text": " we've got backups, pgbackrest, it is, it's just pgbackrest.", "tokens": [50948, 321, 600, 658, 50160, 11, 280, 70, 3207, 4149, 11, 309, 307, 11, 309, 311, 445, 280, 70, 3207, 4149, 13, 51132], "temperature": 0.0, "avg_logprob": -0.1883669744564008, "compression_ratio": 1.5738636363636365, "no_speech_prob": 0.010507061146199703}, {"id": 325, "seek": 224734, "start": 2266.38, "end": 2269.1800000000003, "text": " I'm just going to configure a single repository called it repo one.", "tokens": [51316, 286, 478, 445, 516, 281, 22162, 257, 2167, 25841, 1219, 309, 49040, 472, 13, 51456], "temperature": 0.0, "avg_logprob": -0.1883669744564008, "compression_ratio": 1.5738636363636365, "no_speech_prob": 0.010507061146199703}, {"id": 326, "seek": 226918, "start": 2269.4199999999996, "end": 2276.54, "text": " And again, I'm just choosing all of the default parameters. So I've just got a local", "tokens": [50376, 400, 797, 11, 286, 478, 445, 10875, 439, 295, 264, 7576, 9834, 13, 407, 286, 600, 445, 658, 257, 2654, 50732], "temperature": 0.0, "avg_logprob": -0.08561114377753679, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.002454785630106926}, {"id": 327, "seek": 226918, "start": 2277.8199999999997, "end": 2281.8199999999997, "text": " backup repository. You probably don't want to do that in production. You will probably want some", "tokens": [50796, 14807, 25841, 13, 509, 1391, 500, 380, 528, 281, 360, 300, 294, 4265, 13, 509, 486, 1391, 528, 512, 50996], "temperature": 0.0, "avg_logprob": -0.08561114377753679, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.002454785630106926}, {"id": 328, "seek": 226918, "start": 2281.8199999999997, "end": 2286.7799999999997, "text": " kind of sensible place to store your backups, but this is just my little test cluster. So", "tokens": [50996, 733, 295, 25380, 1081, 281, 3531, 428, 50160, 11, 457, 341, 307, 445, 452, 707, 1500, 13630, 13, 407, 51244], "temperature": 0.0, "avg_logprob": -0.08561114377753679, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.002454785630106926}, {"id": 329, "seek": 226918, "start": 2287.4199999999996, "end": 2295.66, "text": " a local volume is absolutely fine. You can specify multiple repositories if you want to.", "tokens": [51276, 257, 2654, 5523, 307, 3122, 2489, 13, 509, 393, 16500, 3866, 22283, 2083, 498, 291, 528, 281, 13, 51688], "temperature": 0.0, "avg_logprob": -0.08561114377753679, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.002454785630106926}, {"id": 330, "seek": 229566, "start": 2295.66, "end": 2302.3799999999997, "text": " So you can have a local repository and a cloud repository or a Google cloud repository and", "tokens": [50364, 407, 291, 393, 362, 257, 2654, 25841, 293, 257, 4588, 25841, 420, 257, 3329, 4588, 25841, 293, 50700], "temperature": 0.0, "avg_logprob": -0.15727848755685905, "compression_ratio": 1.5841584158415842, "no_speech_prob": 0.0023176930844783783}, {"id": 331, "seek": 229566, "start": 2303.3399999999997, "end": 2306.94, "text": " AWS one or whatever combination of repositories you want.", "tokens": [50748, 17650, 472, 420, 2035, 6562, 295, 22283, 2083, 291, 528, 13, 50928], "temperature": 0.0, "avg_logprob": -0.15727848755685905, "compression_ratio": 1.5841584158415842, "no_speech_prob": 0.0023176930844783783}, {"id": 332, "seek": 229566, "start": 2309.1, "end": 2313.02, "text": " Okay, so once I've created my manifest, that's my definition of my cluster.", "tokens": [51036, 1033, 11, 370, 1564, 286, 600, 2942, 452, 10067, 11, 300, 311, 452, 7123, 295, 452, 13630, 13, 51232], "temperature": 0.0, "avg_logprob": -0.15727848755685905, "compression_ratio": 1.5841584158415842, "no_speech_prob": 0.0023176930844783783}, {"id": 333, "seek": 229566, "start": 2314.62, "end": 2321.18, "text": " I apply that and the operator will set me up a three node high availability post-press cluster.", "tokens": [51312, 286, 3079, 300, 293, 264, 12973, 486, 992, 385, 493, 257, 1045, 9984, 1090, 17945, 2183, 12, 11637, 13630, 13, 51640], "temperature": 0.0, "avg_logprob": -0.15727848755685905, "compression_ratio": 1.5841584158415842, "no_speech_prob": 0.0023176930844783783}, {"id": 334, "seek": 232118, "start": 2321.18, "end": 2326.3799999999997, "text": " So it's now got the Petroni managing that high availability. I've got a service that points", "tokens": [50364, 407, 309, 311, 586, 658, 264, 10472, 2044, 72, 11642, 300, 1090, 17945, 13, 286, 600, 658, 257, 2643, 300, 2793, 50624], "temperature": 0.0, "avg_logprob": -0.1274264530070777, "compression_ratio": 1.6523605150214593, "no_speech_prob": 0.0041706678457558155}, {"id": 335, "seek": 232118, "start": 2326.3799999999997, "end": 2331.02, "text": " me to my primary database. I've got all the things that we talked about before.", "tokens": [50624, 385, 281, 452, 6194, 8149, 13, 286, 600, 658, 439, 264, 721, 300, 321, 2825, 466, 949, 13, 50856], "temperature": 0.0, "avg_logprob": -0.1274264530070777, "compression_ratio": 1.6523605150214593, "no_speech_prob": 0.0041706678457558155}, {"id": 336, "seek": 232118, "start": 2332.54, "end": 2336.06, "text": " So if we have a look at the pods that that's created for us, we can see", "tokens": [50932, 407, 498, 321, 362, 257, 574, 412, 264, 31925, 300, 300, 311, 2942, 337, 505, 11, 321, 393, 536, 51108], "temperature": 0.0, "avg_logprob": -0.1274264530070777, "compression_ratio": 1.6523605150214593, "no_speech_prob": 0.0041706678457558155}, {"id": 337, "seek": 232118, "start": 2337.02, "end": 2341.2599999999998, "text": " that was my operator itself from when I did the operator install.", "tokens": [51156, 300, 390, 452, 12973, 2564, 490, 562, 286, 630, 264, 12973, 3625, 13, 51368], "temperature": 0.0, "avg_logprob": -0.1274264530070777, "compression_ratio": 1.6523605150214593, "no_speech_prob": 0.0041706678457558155}, {"id": 338, "seek": 232118, "start": 2343.66, "end": 2348.46, "text": " These are my three, oh, sorry, no, those are my three post-press instances.", "tokens": [51488, 1981, 366, 452, 1045, 11, 1954, 11, 2597, 11, 572, 11, 729, 366, 452, 1045, 2183, 12, 11637, 14519, 13, 51728], "temperature": 0.0, "avg_logprob": -0.1274264530070777, "compression_ratio": 1.6523605150214593, "no_speech_prob": 0.0041706678457558155}, {"id": 339, "seek": 234846, "start": 2348.7, "end": 2353.98, "text": " I can use a different command if I want to see which is primary and which is stand by.", "tokens": [50376, 286, 393, 764, 257, 819, 5622, 498, 286, 528, 281, 536, 597, 307, 6194, 293, 597, 307, 1463, 538, 13, 50640], "temperature": 0.0, "avg_logprob": -0.1608945546525248, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0036657180171459913}, {"id": 340, "seek": 234846, "start": 2354.94, "end": 2360.86, "text": " It's created my repository and it's taken an initial backup for me. I've also,", "tokens": [50688, 467, 311, 2942, 452, 25841, 293, 309, 311, 2726, 364, 5883, 14807, 337, 385, 13, 286, 600, 611, 11, 50984], "temperature": 0.0, "avg_logprob": -0.1608945546525248, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0036657180171459913}, {"id": 341, "seek": 234846, "start": 2360.86, "end": 2366.78, "text": " I've not talked about that, but there's also a PG admin pod there as well. So you can use", "tokens": [50984, 286, 600, 406, 2825, 466, 300, 11, 457, 456, 311, 611, 257, 40975, 24236, 2497, 456, 382, 731, 13, 407, 291, 393, 764, 51280], "temperature": 0.0, "avg_logprob": -0.1608945546525248, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0036657180171459913}, {"id": 342, "seek": 234846, "start": 2366.78, "end": 2371.34, "text": " PG admin to log in and look at your database and run queries, et cetera.", "tokens": [51280, 40975, 24236, 281, 3565, 294, 293, 574, 412, 428, 8149, 293, 1190, 24109, 11, 1030, 11458, 13, 51508], "temperature": 0.0, "avg_logprob": -0.1608945546525248, "compression_ratio": 1.5769230769230769, "no_speech_prob": 0.0036657180171459913}, {"id": 343, "seek": 237134, "start": 2372.2200000000003, "end": 2380.2200000000003, "text": " So that was, I think it was a 26 line manifest. That's, that was enough to get you up and running", "tokens": [50408, 407, 300, 390, 11, 286, 519, 309, 390, 257, 7551, 1622, 10067, 13, 663, 311, 11, 300, 390, 1547, 281, 483, 291, 493, 293, 2614, 50808], "temperature": 0.0, "avg_logprob": -0.09393210794733858, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0030953974928706884}, {"id": 344, "seek": 237134, "start": 2380.2200000000003, "end": 2385.58, "text": " with high availability, backup and recovery. You can then make all sorts of changes.", "tokens": [50808, 365, 1090, 17945, 11, 14807, 293, 8597, 13, 509, 393, 550, 652, 439, 7527, 295, 2962, 13, 51076], "temperature": 0.0, "avg_logprob": -0.09393210794733858, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0030953974928706884}, {"id": 345, "seek": 237134, "start": 2386.86, "end": 2392.2200000000003, "text": " If you tweak that manifest, you can set up backup schedules. You can create that standby", "tokens": [51140, 759, 291, 29879, 300, 10067, 11, 291, 393, 992, 493, 14807, 28078, 13, 509, 393, 1884, 300, 50170, 51408], "temperature": 0.0, "avg_logprob": -0.09393210794733858, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0030953974928706884}, {"id": 346, "seek": 237134, "start": 2392.2200000000003, "end": 2398.1400000000003, "text": " cluster that we talked about. You can install the monitoring stack. You can implement connection", "tokens": [51408, 13630, 300, 321, 2825, 466, 13, 509, 393, 3625, 264, 11028, 8630, 13, 509, 393, 4445, 4984, 51704], "temperature": 0.0, "avg_logprob": -0.09393210794733858, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0030953974928706884}, {"id": 347, "seek": 239814, "start": 2398.14, "end": 2405.3399999999997, "text": " pooling with PG bouncer. You can set your different post-press parameters, your patroni parameters.", "tokens": [50364, 7005, 278, 365, 40975, 272, 14296, 13, 509, 393, 992, 428, 819, 2183, 12, 11637, 9834, 11, 428, 21843, 72, 9834, 13, 50724], "temperature": 0.0, "avg_logprob": -0.1292215572890415, "compression_ratio": 1.669603524229075, "no_speech_prob": 0.0027619684115052223}, {"id": 348, "seek": 239814, "start": 2405.3399999999997, "end": 2413.02, "text": " You can tell it to run certain SQL queries when it initializes your database, et cetera.", "tokens": [50724, 509, 393, 980, 309, 281, 1190, 1629, 19200, 24109, 562, 309, 5883, 5660, 428, 8149, 11, 1030, 11458, 13, 51108], "temperature": 0.0, "avg_logprob": -0.1292215572890415, "compression_ratio": 1.669603524229075, "no_speech_prob": 0.0027619684115052223}, {"id": 349, "seek": 239814, "start": 2415.5, "end": 2421.1, "text": " I forgot other things. You can tell it where to schedule your pods if you want to. I've just", "tokens": [51232, 286, 5298, 661, 721, 13, 509, 393, 980, 309, 689, 281, 7567, 428, 31925, 498, 291, 528, 281, 13, 286, 600, 445, 51512], "temperature": 0.0, "avg_logprob": -0.1292215572890415, "compression_ratio": 1.669603524229075, "no_speech_prob": 0.0027619684115052223}, {"id": 350, "seek": 239814, "start": 2421.1, "end": 2425.58, "text": " left everything at the default and let it schedule them wherever they want. I've got a three node", "tokens": [51512, 1411, 1203, 412, 264, 7576, 293, 718, 309, 7567, 552, 8660, 436, 528, 13, 286, 600, 658, 257, 1045, 9984, 51736], "temperature": 0.0, "avg_logprob": -0.1292215572890415, "compression_ratio": 1.669603524229075, "no_speech_prob": 0.0027619684115052223}, {"id": 351, "seek": 242558, "start": 2425.58, "end": 2428.86, "text": " Kubernetes cluster and I'm just leaving it to do its thing.", "tokens": [50364, 23145, 13630, 293, 286, 478, 445, 5012, 309, 281, 360, 1080, 551, 13, 50528], "temperature": 0.0, "avg_logprob": -0.13515852772912315, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.0007810089737176895}, {"id": 352, "seek": 242558, "start": 2431.98, "end": 2436.2999999999997, "text": " So that was just a really quick kind of, how can I get started? But I really do,", "tokens": [50684, 407, 300, 390, 445, 257, 534, 1702, 733, 295, 11, 577, 393, 286, 483, 1409, 30, 583, 286, 534, 360, 11, 50900], "temperature": 0.0, "avg_logprob": -0.13515852772912315, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.0007810089737176895}, {"id": 353, "seek": 242558, "start": 2438.46, "end": 2443.34, "text": " even if you're not planning on using it in production, it's really good fun. So give it a try,", "tokens": [51008, 754, 498, 291, 434, 406, 5038, 322, 1228, 309, 294, 4265, 11, 309, 311, 534, 665, 1019, 13, 407, 976, 309, 257, 853, 11, 51252], "temperature": 0.0, "avg_logprob": -0.13515852772912315, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.0007810089737176895}, {"id": 354, "seek": 242558, "start": 2443.34, "end": 2451.5, "text": " kill your pods, delete services and watch it kind of repair itself. It's fun.", "tokens": [51252, 1961, 428, 31925, 11, 12097, 3328, 293, 1159, 309, 733, 295, 10535, 2564, 13, 467, 311, 1019, 13, 51660], "temperature": 0.0, "avg_logprob": -0.13515852772912315, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.0007810089737176895}, {"id": 355, "seek": 245150, "start": 2451.66, "end": 2462.38, "text": " So conclusions. So a post-press operator for Kubernetes really does act like a virtual database", "tokens": [50372, 407, 22865, 13, 407, 257, 2183, 12, 11637, 12973, 337, 23145, 534, 775, 605, 411, 257, 6374, 8149, 50908], "temperature": 0.0, "avg_logprob": -0.16101067860921223, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.0007387719233520329}, {"id": 356, "seek": 245150, "start": 2462.38, "end": 2471.74, "text": " administrator. We've seen that it knows how to do most database administration tasks. It can automate", "tokens": [50908, 25529, 13, 492, 600, 1612, 300, 309, 3255, 577, 281, 360, 881, 8149, 7236, 9608, 13, 467, 393, 31605, 51376], "temperature": 0.0, "avg_logprob": -0.16101067860921223, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.0007387719233520329}, {"id": 357, "seek": 245150, "start": 2471.74, "end": 2478.06, "text": " everything from deployment of a high availability cluster to backup and recovery, monitoring,", "tokens": [51376, 1203, 490, 19317, 295, 257, 1090, 17945, 13630, 281, 14807, 293, 8597, 11, 11028, 11, 51692], "temperature": 0.0, "avg_logprob": -0.16101067860921223, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.0007387719233520329}, {"id": 358, "seek": 247806, "start": 2478.7799999999997, "end": 2487.66, "text": " upgrades, et cetera. It lets you implement a, I think this is from my marketing team slides,", "tokens": [50400, 24868, 11, 1030, 11458, 13, 467, 6653, 291, 4445, 257, 11, 286, 519, 341, 307, 490, 452, 6370, 1469, 9788, 11, 50844], "temperature": 0.0, "avg_logprob": -0.10224983805701846, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.0012067751958966255}, {"id": 359, "seek": 247806, "start": 2487.66, "end": 2493.18, "text": " it lets you implement a robust, secure, scalable architecture. It combines the strength of post", "tokens": [50844, 309, 6653, 291, 4445, 257, 13956, 11, 7144, 11, 38481, 9482, 13, 467, 29520, 264, 3800, 295, 2183, 51120], "temperature": 0.0, "avg_logprob": -0.10224983805701846, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.0012067751958966255}, {"id": 360, "seek": 247806, "start": 2493.18, "end": 2501.1, "text": "-press and Kubernetes so that it keeps your database cluster running smoothly. And more", "tokens": [51120, 12, 11637, 293, 23145, 370, 300, 309, 5965, 428, 8149, 13630, 2614, 19565, 13, 400, 544, 51516], "temperature": 0.0, "avg_logprob": -0.10224983805701846, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.0012067751958966255}, {"id": 361, "seek": 247806, "start": 2501.1, "end": 2507.58, "text": " importantly to me is it leaves you free to do the strategic, interesting and fun bits of database", "tokens": [51516, 8906, 281, 385, 307, 309, 5510, 291, 1737, 281, 360, 264, 10924, 11, 1880, 293, 1019, 9239, 295, 8149, 51840], "temperature": 0.0, "avg_logprob": -0.10224983805701846, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.0012067751958966255}, {"id": 362, "seek": 250758, "start": 2507.58, "end": 2516.22, "text": " administration. So that is all that I've got to say on the topic of post-press on Kubernetes.", "tokens": [50364, 7236, 13, 407, 300, 307, 439, 300, 286, 600, 658, 281, 584, 322, 264, 4829, 295, 2183, 12, 11637, 322, 23145, 13, 50796], "temperature": 0.0, "avg_logprob": -0.05981636524200439, "compression_ratio": 1.536, "no_speech_prob": 0.0018403393914923072}, {"id": 363, "seek": 250758, "start": 2516.22, "end": 2521.9, "text": " And before I move to my thank you slide, I just want to do a plug in case today hasn't been enough", "tokens": [50796, 400, 949, 286, 1286, 281, 452, 1309, 291, 4137, 11, 286, 445, 528, 281, 360, 257, 5452, 294, 1389, 965, 6132, 380, 668, 1547, 51080], "temperature": 0.0, "avg_logprob": -0.05981636524200439, "compression_ratio": 1.536, "no_speech_prob": 0.0018403393914923072}, {"id": 364, "seek": 250758, "start": 2521.9, "end": 2529.2599999999998, "text": " post-press for you. The next community post-press conference in Europe is PG Day Paris on the", "tokens": [51080, 2183, 12, 11637, 337, 291, 13, 440, 958, 1768, 2183, 12, 11637, 7586, 294, 3315, 307, 40975, 5226, 8380, 322, 264, 51448], "temperature": 0.0, "avg_logprob": -0.05981636524200439, "compression_ratio": 1.536, "no_speech_prob": 0.0018403393914923072}, {"id": 365, "seek": 250758, "start": 2529.2599999999998, "end": 2535.1, "text": " 14th of March. And we obviously really hope that as many of you as possible can join us. And just", "tokens": [51448, 3499, 392, 295, 6129, 13, 400, 321, 2745, 534, 1454, 300, 382, 867, 295, 291, 382, 1944, 393, 3917, 505, 13, 400, 445, 51740], "temperature": 0.0, "avg_logprob": -0.05981636524200439, "compression_ratio": 1.536, "no_speech_prob": 0.0018403393914923072}, {"id": 366, "seek": 253510, "start": 2535.58, "end": 2541.5, "text": " for Fostum, we have created a 10% discount code with limited availability. So I think that's", "tokens": [50388, 337, 479, 555, 449, 11, 321, 362, 2942, 257, 1266, 4, 11635, 3089, 365, 5567, 17945, 13, 407, 286, 519, 300, 311, 50684], "temperature": 0.0, "avg_logprob": -0.1636913572038923, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.006368550471961498}, {"id": 367, "seek": 253510, "start": 2541.5, "end": 2548.7799999999997, "text": " available just until tomorrow. So very much hope to see you there. And that's me.", "tokens": [50684, 2435, 445, 1826, 4153, 13, 407, 588, 709, 1454, 281, 536, 291, 456, 13, 400, 300, 311, 385, 13, 51048], "temperature": 0.0, "avg_logprob": -0.1636913572038923, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.006368550471961498}, {"id": 368, "seek": 253510, "start": 2558.54, "end": 2564.22, "text": " I've put a link to the slides there in case anybody wants to see those. And I think,", "tokens": [51536, 286, 600, 829, 257, 2113, 281, 264, 9788, 456, 294, 1389, 4472, 2738, 281, 536, 729, 13, 400, 286, 519, 11, 51820], "temperature": 0.0, "avg_logprob": -0.1636913572038923, "compression_ratio": 1.4715909090909092, "no_speech_prob": 0.006368550471961498}, {"id": 369, "seek": 256422, "start": 2564.22, "end": 2570.06, "text": " do we have time for questions? We do. So thank you. That was a very comprehensive talk with a lot", "tokens": [50364, 360, 321, 362, 565, 337, 1651, 30, 492, 360, 13, 407, 1309, 291, 13, 663, 390, 257, 588, 13914, 751, 365, 257, 688, 50656], "temperature": 0.0, "avg_logprob": -0.17969316539197866, "compression_ratio": 1.5884773662551441, "no_speech_prob": 0.07772062718868256}, {"id": 370, "seek": 256422, "start": 2570.06, "end": 2578.4599999999996, "text": " of useful insights. Anyone who, I see a hand there. If you can make sure the next question is", "tokens": [50656, 295, 4420, 14310, 13, 14643, 567, 11, 286, 536, 257, 1011, 456, 13, 759, 291, 393, 652, 988, 264, 958, 1168, 307, 51076], "temperature": 0.0, "avg_logprob": -0.17969316539197866, "compression_ratio": 1.5884773662551441, "no_speech_prob": 0.07772062718868256}, {"id": 371, "seek": 256422, "start": 2578.4599999999996, "end": 2584.4599999999996, "text": " right at the bottom so that Jimmy has to run back and forth, that'd be great. And can ask you a", "tokens": [51076, 558, 412, 264, 2767, 370, 300, 15709, 575, 281, 1190, 646, 293, 5220, 11, 300, 1116, 312, 869, 13, 400, 393, 1029, 291, 257, 51376], "temperature": 0.0, "avg_logprob": -0.17969316539197866, "compression_ratio": 1.5884773662551441, "no_speech_prob": 0.07772062718868256}, {"id": 372, "seek": 256422, "start": 2584.4599999999996, "end": 2591.2599999999998, "text": " favor. Can you repeat the question please so that it makes it into the video as well? Say you want", "tokens": [51376, 2294, 13, 1664, 291, 7149, 264, 1168, 1767, 370, 300, 309, 1669, 309, 666, 264, 960, 382, 731, 30, 6463, 291, 528, 51716], "temperature": 0.0, "avg_logprob": -0.17969316539197866, "compression_ratio": 1.5884773662551441, "no_speech_prob": 0.07772062718868256}, {"id": 373, "seek": 259126, "start": 2591.34, "end": 2598.5400000000004, "text": " to install an extension that's not by default in post-press, like post-GIS. How would that be handled", "tokens": [50368, 281, 3625, 364, 10320, 300, 311, 406, 538, 7576, 294, 2183, 12, 11637, 11, 411, 2183, 12, 38, 2343, 13, 1012, 576, 300, 312, 18033, 50728], "temperature": 0.0, "avg_logprob": -0.16563339622653261, "compression_ratio": 1.8970588235294117, "no_speech_prob": 0.07770722359418869}, {"id": 374, "seek": 259126, "start": 2598.5400000000004, "end": 2603.98, "text": " by the post-press operator? Will it be detected when upgrading in such? So this operator does have", "tokens": [50728, 538, 264, 2183, 12, 11637, 12973, 30, 3099, 309, 312, 21896, 562, 36249, 294, 1270, 30, 407, 341, 12973, 775, 362, 51000], "temperature": 0.0, "avg_logprob": -0.16563339622653261, "compression_ratio": 1.8970588235294117, "no_speech_prob": 0.07770722359418869}, {"id": 375, "seek": 259126, "start": 2603.98, "end": 2611.82, "text": " that, sorry, the question was, if you want to install an extension that's not by default,", "tokens": [51000, 300, 11, 2597, 11, 264, 1168, 390, 11, 498, 291, 528, 281, 3625, 364, 10320, 300, 311, 406, 538, 7576, 11, 51392], "temperature": 0.0, "avg_logprob": -0.16563339622653261, "compression_ratio": 1.8970588235294117, "no_speech_prob": 0.07770722359418869}, {"id": 376, "seek": 259126, "start": 2612.46, "end": 2618.3, "text": " something that's not by default in post-press, how would you handle that? So for this particular", "tokens": [51424, 746, 300, 311, 406, 538, 7576, 294, 2183, 12, 11637, 11, 577, 576, 291, 4813, 300, 30, 407, 337, 341, 1729, 51716], "temperature": 0.0, "avg_logprob": -0.16563339622653261, "compression_ratio": 1.8970588235294117, "no_speech_prob": 0.07770722359418869}, {"id": 377, "seek": 261830, "start": 2618.3, "end": 2628.3, "text": " operator, post-GIS is one of the extensions that's available in the images. For others, I don't know,", "tokens": [50364, 12973, 11, 2183, 12, 38, 2343, 307, 472, 295, 264, 25129, 300, 311, 2435, 294, 264, 5267, 13, 1171, 2357, 11, 286, 500, 380, 458, 11, 50864], "temperature": 0.0, "avg_logprob": -0.08157537338581491, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.008681317791342735}, {"id": 378, "seek": 261830, "start": 2628.3, "end": 2632.94, "text": " but I suspect that that would be available because it's an extremely popular extension. So we tried", "tokens": [50864, 457, 286, 9091, 300, 300, 576, 312, 2435, 570, 309, 311, 364, 4664, 3743, 10320, 13, 407, 321, 3031, 51096], "temperature": 0.0, "avg_logprob": -0.08157537338581491, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.008681317791342735}, {"id": 379, "seek": 261830, "start": 2632.94, "end": 2639.42, "text": " to include the most popular extensions. Otherwise, you can create a layer on top of the container", "tokens": [51096, 281, 4090, 264, 881, 3743, 25129, 13, 10328, 11, 291, 393, 1884, 257, 4583, 322, 1192, 295, 264, 10129, 51420], "temperature": 0.0, "avg_logprob": -0.08157537338581491, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.008681317791342735}, {"id": 380, "seek": 261830, "start": 2639.42, "end": 2647.42, "text": " images that are provided for you. You can install the extra extensions into that. Some of them will", "tokens": [51420, 5267, 300, 366, 5649, 337, 291, 13, 509, 393, 3625, 264, 2857, 25129, 666, 300, 13, 2188, 295, 552, 486, 51820], "temperature": 0.0, "avg_logprob": -0.08157537338581491, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.008681317791342735}, {"id": 381, "seek": 264742, "start": 2647.42, "end": 2653.5, "text": " let you create your own custom sidecars. So we saw the extra helper pods, so you might be able to", "tokens": [50364, 718, 291, 1884, 428, 1065, 2375, 1252, 66, 685, 13, 407, 321, 1866, 264, 2857, 36133, 31925, 11, 370, 291, 1062, 312, 1075, 281, 50668], "temperature": 0.0, "avg_logprob": -0.14014500935872395, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.01526997983455658}, {"id": 382, "seek": 264742, "start": 2653.5, "end": 2663.98, "text": " install certain things into a sidecar as well. You said that if a primary instance goes down,", "tokens": [50668, 3625, 1629, 721, 666, 257, 1252, 6166, 382, 731, 13, 509, 848, 300, 498, 257, 6194, 5197, 1709, 760, 11, 51192], "temperature": 0.0, "avg_logprob": -0.14014500935872395, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.01526997983455658}, {"id": 383, "seek": 264742, "start": 2663.98, "end": 2673.1800000000003, "text": " then the job of the operator is to assign, for example, replica one is now the new primary. So why", "tokens": [51192, 550, 264, 1691, 295, 264, 12973, 307, 281, 6269, 11, 337, 1365, 11, 35456, 472, 307, 586, 264, 777, 6194, 13, 407, 983, 51652], "temperature": 0.0, "avg_logprob": -0.14014500935872395, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.01526997983455658}, {"id": 384, "seek": 267318, "start": 2674.14, "end": 2686.14, "text": " to rephrase it, why is it, we don't want the operator and the primary instance to run on the", "tokens": [50412, 281, 319, 44598, 651, 309, 11, 983, 307, 309, 11, 321, 500, 380, 528, 264, 12973, 293, 264, 6194, 5197, 281, 1190, 322, 264, 51012], "temperature": 0.0, "avg_logprob": -0.19491930007934571, "compression_ratio": 1.5965909090909092, "no_speech_prob": 0.008856745436787605}, {"id": 385, "seek": 267318, "start": 2686.14, "end": 2693.58, "text": " same worker in the Kubernetes because if that worker is shut down of the electricity,", "tokens": [51012, 912, 11346, 294, 264, 23145, 570, 498, 300, 11346, 307, 5309, 760, 295, 264, 10356, 11, 51384], "temperature": 0.0, "avg_logprob": -0.19491930007934571, "compression_ratio": 1.5965909090909092, "no_speech_prob": 0.008856745436787605}, {"id": 386, "seek": 267318, "start": 2693.58, "end": 2701.18, "text": " there isn't anyone to assign a new primary. Okay, so the question is to do with the operator assigning", "tokens": [51384, 456, 1943, 380, 2878, 281, 6269, 257, 777, 6194, 13, 1033, 11, 370, 264, 1168, 307, 281, 360, 365, 264, 12973, 49602, 51764], "temperature": 0.0, "avg_logprob": -0.19491930007934571, "compression_ratio": 1.5965909090909092, "no_speech_prob": 0.008856745436787605}, {"id": 387, "seek": 270118, "start": 2701.8999999999996, "end": 2710.22, "text": " a new primary database and saying that we don't want our two database pods to be on the same", "tokens": [50400, 257, 777, 6194, 8149, 293, 1566, 300, 321, 500, 380, 528, 527, 732, 8149, 31925, 281, 312, 322, 264, 912, 50816], "temperature": 0.0, "avg_logprob": -0.15031086908627864, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.00548535818234086}, {"id": 388, "seek": 270118, "start": 2710.22, "end": 2717.8199999999997, "text": " worker node, is that correct? So actually embedded in the operator code in this case are some anti-affinity", "tokens": [50816, 11346, 9984, 11, 307, 300, 3006, 30, 407, 767, 16741, 294, 264, 12973, 3089, 294, 341, 1389, 366, 512, 6061, 12, 2518, 11540, 51196], "temperature": 0.0, "avg_logprob": -0.15031086908627864, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.00548535818234086}, {"id": 389, "seek": 270118, "start": 2718.46, "end": 2727.8999999999996, "text": " rules. You've spoken a lot about the advantages. Do you also know some downsides, like for example", "tokens": [51228, 4474, 13, 509, 600, 10759, 257, 688, 466, 264, 14906, 13, 1144, 291, 611, 458, 512, 21554, 1875, 11, 411, 337, 1365, 51700], "temperature": 0.0, "avg_logprob": -0.15031086908627864, "compression_ratio": 1.5101010101010102, "no_speech_prob": 0.00548535818234086}, {"id": 390, "seek": 272790, "start": 2728.14, "end": 2732.06, "text": " the lower performance on the same hardware or something like that?", "tokens": [50376, 264, 3126, 3389, 322, 264, 912, 8837, 420, 746, 411, 300, 30, 50572], "temperature": 0.0, "avg_logprob": -0.14415172430185172, "compression_ratio": 1.6534653465346534, "no_speech_prob": 0.0015169867547228932}, {"id": 391, "seek": 272790, "start": 2733.82, "end": 2740.86, "text": " So the question, I've obviously spoken a lot about the advantages but are the disadvantages,", "tokens": [50660, 407, 264, 1168, 11, 286, 600, 2745, 10759, 257, 688, 466, 264, 14906, 457, 366, 264, 37431, 11, 51012], "temperature": 0.0, "avg_logprob": -0.14415172430185172, "compression_ratio": 1.6534653465346534, "no_speech_prob": 0.0015169867547228932}, {"id": 392, "seek": 272790, "start": 2740.86, "end": 2748.06, "text": " for example, performance for the same hardware. I haven't done extensive, well I say extensive,", "tokens": [51012, 337, 1365, 11, 3389, 337, 264, 912, 8837, 13, 286, 2378, 380, 1096, 13246, 11, 731, 286, 584, 13246, 11, 51372], "temperature": 0.0, "avg_logprob": -0.14415172430185172, "compression_ratio": 1.6534653465346534, "no_speech_prob": 0.0015169867547228932}, {"id": 393, "seek": 272790, "start": 2748.06, "end": 2752.78, "text": " I haven't done benchmarking, but just anecdotally from what our customers see,", "tokens": [51372, 286, 2378, 380, 1096, 18927, 278, 11, 457, 445, 26652, 310, 379, 490, 437, 527, 4581, 536, 11, 51608], "temperature": 0.0, "avg_logprob": -0.14415172430185172, "compression_ratio": 1.6534653465346534, "no_speech_prob": 0.0015169867547228932}, {"id": 394, "seek": 275278, "start": 2753.02, "end": 2762.1400000000003, "text": " they're not reporting any significant performance degradation. That's not to say that there isn't", "tokens": [50376, 436, 434, 406, 10031, 604, 4776, 3389, 40519, 13, 663, 311, 406, 281, 584, 300, 456, 1943, 380, 50832], "temperature": 0.0, "avg_logprob": -0.21267210407021606, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.008642861619591713}, {"id": 395, "seek": 275278, "start": 2762.1400000000003, "end": 2768.5400000000004, "text": " any, I haven't like I say, I haven't done those tests, but we certainly haven't seen customers saying", "tokens": [50832, 604, 11, 286, 2378, 380, 411, 286, 584, 11, 286, 2378, 380, 1096, 729, 6921, 11, 457, 321, 3297, 2378, 380, 1612, 4581, 1566, 51152], "temperature": 0.0, "avg_logprob": -0.21267210407021606, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.008642861619591713}, {"id": 396, "seek": 275278, "start": 2768.5400000000004, "end": 2770.86, "text": " we moved to Kubernetes and it's running more slowly.", "tokens": [51152, 321, 4259, 281, 23145, 293, 309, 311, 2614, 544, 5692, 13, 51268], "temperature": 0.0, "avg_logprob": -0.21267210407021606, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.008642861619591713}, {"id": 397, "seek": 275278, "start": 2774.0600000000004, "end": 2780.38, "text": " So you said that progress instances, progress pods are being managed as a stateful state,", "tokens": [51428, 407, 291, 848, 300, 4205, 14519, 11, 4205, 31925, 366, 885, 6453, 382, 257, 1785, 906, 1785, 11, 51744], "temperature": 0.0, "avg_logprob": -0.21267210407021606, "compression_ratio": 1.5981308411214954, "no_speech_prob": 0.008642861619591713}, {"id": 398, "seek": 278038, "start": 2780.38, "end": 2785.34, "text": " but what about pullers? So how many pullers do we need? For example, if I want to expose", "tokens": [50364, 457, 437, 466, 2235, 433, 30, 407, 577, 867, 2235, 433, 360, 321, 643, 30, 1171, 1365, 11, 498, 286, 528, 281, 19219, 50612], "temperature": 0.0, "avg_logprob": -0.17854860326746008, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.002088200068101287}, {"id": 399, "seek": 278038, "start": 2785.34, "end": 2791.6600000000003, "text": " read writes and read-only service to my applications. So do you use a single puller", "tokens": [50612, 1401, 13657, 293, 1401, 12, 25202, 2643, 281, 452, 5821, 13, 407, 360, 291, 764, 257, 2167, 2235, 260, 50928], "temperature": 0.0, "avg_logprob": -0.17854860326746008, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.002088200068101287}, {"id": 400, "seek": 278038, "start": 2791.6600000000003, "end": 2795.6600000000003, "text": " for those read writes and read-only requests or you use a separate set of pullers?", "tokens": [50928, 337, 729, 1401, 13657, 293, 1401, 12, 25202, 12475, 420, 291, 764, 257, 4994, 992, 295, 2235, 433, 30, 51128], "temperature": 0.0, "avg_logprob": -0.17854860326746008, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.002088200068101287}, {"id": 401, "seek": 278038, "start": 2797.7400000000002, "end": 2805.26, "text": " So the question if I've understood correctly is how do we use a single puller or multiple?", "tokens": [51232, 407, 264, 1168, 498, 286, 600, 7320, 8944, 307, 577, 360, 321, 764, 257, 2167, 2235, 260, 420, 3866, 30, 51608], "temperature": 0.0, "avg_logprob": -0.17854860326746008, "compression_ratio": 1.7563451776649746, "no_speech_prob": 0.002088200068101287}, {"id": 402, "seek": 280526, "start": 2805.26, "end": 2811.7400000000002, "text": " You can configure, it's up to you depending on your actual use case, depending on where your", "tokens": [50364, 509, 393, 22162, 11, 309, 311, 493, 281, 291, 5413, 322, 428, 3539, 764, 1389, 11, 5413, 322, 689, 428, 50688], "temperature": 0.0, "avg_logprob": -0.11344602278300694, "compression_ratio": 1.5724637681159421, "no_speech_prob": 0.022825947031378746}, {"id": 403, "seek": 280526, "start": 2811.7400000000002, "end": 2815.5800000000004, "text": " connections are coming from, how many connections you've got, how they're being used, etc.", "tokens": [50688, 9271, 366, 1348, 490, 11, 577, 867, 9271, 291, 600, 658, 11, 577, 436, 434, 885, 1143, 11, 5183, 13, 50880], "temperature": 0.0, "avg_logprob": -0.11344602278300694, "compression_ratio": 1.5724637681159421, "no_speech_prob": 0.022825947031378746}, {"id": 404, "seek": 280526, "start": 2816.46, "end": 2818.1400000000003, "text": " You can define how many you want.", "tokens": [50924, 509, 393, 6964, 577, 867, 291, 528, 13, 51008], "temperature": 0.0, "avg_logprob": -0.11344602278300694, "compression_ratio": 1.5724637681159421, "no_speech_prob": 0.022825947031378746}, {"id": 405, "seek": 281814, "start": 2818.46, "end": 2835.98, "text": " There was a very, on Friday for the extra PG day, there was a very interesting presentation at", "tokens": [50380, 821, 390, 257, 588, 11, 322, 6984, 337, 264, 2857, 40975, 786, 11, 456, 390, 257, 588, 1880, 5860, 412, 51256], "temperature": 0.0, "avg_logprob": -0.24153185863884127, "compression_ratio": 1.3582089552238805, "no_speech_prob": 0.013842800632119179}, {"id": 406, "seek": 281814, "start": 2835.98, "end": 2842.54, "text": " by Joe about a problem with G-Lib C and correlations and one of the workarounds was you", "tokens": [51256, 538, 6807, 466, 257, 1154, 365, 460, 12, 43, 897, 383, 293, 13983, 763, 293, 472, 295, 264, 589, 289, 4432, 390, 291, 51584], "temperature": 0.0, "avg_logprob": -0.24153185863884127, "compression_ratio": 1.3582089552238805, "no_speech_prob": 0.013842800632119179}, {"id": 407, "seek": 284254, "start": 2842.54, "end": 2848.38, "text": " created your own binary. That's going to be a lot more complicated in Kubernetes or is that", "tokens": [50364, 2942, 428, 1065, 17434, 13, 663, 311, 516, 281, 312, 257, 688, 544, 6179, 294, 23145, 420, 307, 300, 50656], "temperature": 0.0, "avg_logprob": -0.12568224983653803, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.020052393898367882}, {"id": 408, "seek": 284254, "start": 2848.38, "end": 2855.02, "text": " something which your operator supports? I'm just curious how to manage that sort of rare but", "tokens": [50656, 746, 597, 428, 12973, 9346, 30, 286, 478, 445, 6369, 577, 281, 3067, 300, 1333, 295, 5892, 457, 50988], "temperature": 0.0, "avg_logprob": -0.12568224983653803, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.020052393898367882}, {"id": 409, "seek": 284254, "start": 2855.02, "end": 2860.54, "text": " important edge case? I guess that's the kind of situation where, oh sorry, repeat the question.", "tokens": [50988, 1021, 4691, 1389, 30, 286, 2041, 300, 311, 264, 733, 295, 2590, 689, 11, 1954, 2597, 11, 7149, 264, 1168, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12568224983653803, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.020052393898367882}, {"id": 410, "seek": 284254, "start": 2862.22, "end": 2868.86, "text": " So there was a talk on Friday by Joe Conway where he talked about an interesting edge case", "tokens": [51348, 407, 456, 390, 257, 751, 322, 6984, 538, 6807, 2656, 676, 689, 415, 2825, 466, 364, 1880, 4691, 1389, 51680], "temperature": 0.0, "avg_logprob": -0.12568224983653803, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.020052393898367882}, {"id": 411, "seek": 286886, "start": 2868.86, "end": 2875.1, "text": " where there was an issue with G-Lib C and the workaround was to recompile the binaries.", "tokens": [50364, 689, 456, 390, 364, 2734, 365, 460, 12, 43, 897, 383, 293, 264, 589, 25762, 390, 281, 48000, 794, 264, 5171, 4889, 13, 50676], "temperature": 0.0, "avg_logprob": -0.10168617825175441, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.00625252490863204}, {"id": 412, "seek": 286886, "start": 2877.02, "end": 2883.1800000000003, "text": " So is that more complicated with the operator? I mean it's for the average user that's going", "tokens": [50772, 407, 307, 300, 544, 6179, 365, 264, 12973, 30, 286, 914, 309, 311, 337, 264, 4274, 4195, 300, 311, 516, 51080], "temperature": 0.0, "avg_logprob": -0.10168617825175441, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.00625252490863204}, {"id": 413, "seek": 286886, "start": 2883.1800000000003, "end": 2888.6200000000003, "text": " to be complicated whether you're running in Kubernetes or not potentially. That's the kind", "tokens": [51080, 281, 312, 6179, 1968, 291, 434, 2614, 294, 23145, 420, 406, 7263, 13, 663, 311, 264, 733, 51352], "temperature": 0.0, "avg_logprob": -0.10168617825175441, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.00625252490863204}, {"id": 414, "seek": 286886, "start": 2888.6200000000003, "end": 2896.38, "text": " of thing where we would probably recreate a container image with that workaround and make", "tokens": [51352, 295, 551, 689, 321, 576, 1391, 25833, 257, 10129, 3256, 365, 300, 589, 25762, 293, 652, 51740], "temperature": 0.0, "avg_logprob": -0.10168617825175441, "compression_ratio": 1.6116071428571428, "no_speech_prob": 0.00625252490863204}, {"id": 415, "seek": 289638, "start": 2896.38, "end": 2900.54, "text": " that available. So certainly if it was for a paying customer, I imagine that's the kind of thing", "tokens": [50364, 300, 2435, 13, 407, 3297, 498, 309, 390, 337, 257, 6229, 5474, 11, 286, 3811, 300, 311, 264, 733, 295, 551, 50572], "temperature": 0.0, "avg_logprob": -0.081921171058308, "compression_ratio": 1.8125, "no_speech_prob": 0.013173525221645832}, {"id": 416, "seek": 289638, "start": 2900.54, "end": 2907.5, "text": " that would be done with the images available to the community. I guess at some point that would", "tokens": [50572, 300, 576, 312, 1096, 365, 264, 5267, 2435, 281, 264, 1768, 13, 286, 2041, 412, 512, 935, 300, 576, 50920], "temperature": 0.0, "avg_logprob": -0.081921171058308, "compression_ratio": 1.8125, "no_speech_prob": 0.013173525221645832}, {"id": 417, "seek": 289638, "start": 2907.5, "end": 2914.38, "text": " be made available or as I said before you can create your own images so you can base your own", "tokens": [50920, 312, 1027, 2435, 420, 382, 286, 848, 949, 291, 393, 1884, 428, 1065, 5267, 370, 291, 393, 3096, 428, 1065, 51264], "temperature": 0.0, "avg_logprob": -0.081921171058308, "compression_ratio": 1.8125, "no_speech_prob": 0.013173525221645832}, {"id": 418, "seek": 289638, "start": 2914.38, "end": 2923.1800000000003, "text": " images on the ones that we provide so you could potentially do it in there. So potentially", "tokens": [51264, 5267, 322, 264, 2306, 300, 321, 2893, 370, 291, 727, 7263, 360, 309, 294, 456, 13, 407, 7263, 51704], "temperature": 0.0, "avg_logprob": -0.081921171058308, "compression_ratio": 1.8125, "no_speech_prob": 0.013173525221645832}, {"id": 419, "seek": 292318, "start": 2923.18, "end": 2930.7, "text": " a bit more complicated but it's still the same process. And we have time for last question over", "tokens": [50364, 257, 857, 544, 6179, 457, 309, 311, 920, 264, 912, 1399, 13, 400, 321, 362, 565, 337, 1036, 1168, 670, 50740], "temperature": 0.0, "avg_logprob": -0.11776917321341378, "compression_ratio": 1.6551724137931034, "no_speech_prob": 0.002759740687906742}, {"id": 420, "seek": 292318, "start": 2930.7, "end": 2941.58, "text": " here. Sorry. I was wondering how backups can be restored after a cluster-wide issue for instance.", "tokens": [50740, 510, 13, 4919, 13, 286, 390, 6359, 577, 50160, 393, 312, 23143, 934, 257, 13630, 12, 7990, 2734, 337, 5197, 13, 51284], "temperature": 0.0, "avg_logprob": -0.11776917321341378, "compression_ratio": 1.6551724137931034, "no_speech_prob": 0.002759740687906742}, {"id": 421, "seek": 292318, "start": 2942.7799999999997, "end": 2949.66, "text": " So the question is how can a backup be restored after a cluster-wide issue? So in the manifest", "tokens": [51344, 407, 264, 1168, 307, 577, 393, 257, 14807, 312, 23143, 934, 257, 13630, 12, 7990, 2734, 30, 407, 294, 264, 10067, 51688], "temperature": 0.0, "avg_logprob": -0.11776917321341378, "compression_ratio": 1.6551724137931034, "no_speech_prob": 0.002759740687906742}, {"id": 422, "seek": 294966, "start": 2949.66, "end": 2956.22, "text": " there's a section where you can say what the source of your cluster should be so you can say that it", "tokens": [50364, 456, 311, 257, 3541, 689, 291, 393, 584, 437, 264, 4009, 295, 428, 13630, 820, 312, 370, 291, 393, 584, 300, 309, 50692], "temperature": 0.0, "avg_logprob": -0.1928891454424177, "compression_ratio": 1.5570469798657718, "no_speech_prob": 0.0038931851740926504}, {"id": 423, "seek": 294966, "start": 2956.22, "end": 2962.22, "text": " should come from a backup and you can obviously put in your point in time recovery requirements etc.", "tokens": [50692, 820, 808, 490, 257, 14807, 293, 291, 393, 2745, 829, 294, 428, 935, 294, 565, 8597, 7728, 5183, 13, 50992], "temperature": 0.0, "avg_logprob": -0.1928891454424177, "compression_ratio": 1.5570469798657718, "no_speech_prob": 0.0038931851740926504}, {"id": 424, "seek": 294966, "start": 2962.22, "end": 2977.8199999999997, "text": " in there. Thank you very much.", "tokens": [50992, 294, 456, 13, 1044, 291, 588, 709, 13, 51772], "temperature": 0.0, "avg_logprob": -0.1928891454424177, "compression_ratio": 1.5570469798657718, "no_speech_prob": 0.0038931851740926504}], "language": "en"}