{"text": " Good afternoon. We have now Mach-Andre Leimburg. He's the CEO and founder of E-Gennex. He's not only that, but he's a Python C-Python core developer. He's also one of the organizers of the EuroPython. He's a EuroPython Society Fellow, and he's been making many contributions to Python. So, yes, we have this pop star here. Now, he's going to talk about Match of Things Python, parsing structured content on Python's new match statement. Thank you very much, Mar. Thank you. And thank you all for coming. The reason why I'm doing a talk about the match statement is that I'm getting a feeling that it doesn't receive enough traction. So, I wanted to know from you how many of you know the match statement? How many of you have actually used the match statement? A lot less. Yeah, that's what I thought. So, maybe a short introduction. Tatiana already mentioned a couple of things. I did a lot of stuff in Python. I've been working with Python since 1994, so a very long time. I did lots of things in the core development, Unicode, Db, API, the platform module. I'm based in Germany. If you have a need for, I don't know, a senior software architect, then please contact me. But that's not the point of this talk. The point of this talk is to show you this. So, this is the match statement that you have in Python. And it's actually a very, very useful thing, especially if you want to parse structured data. Now, the match statement itself is actually quite complex if you look at all the details. And I'm going through all the details in this talk. There are so many details that I have to rush a bit, unfortunately. And I'm not going to be able to show you live demos or anything because I simply don't have the time for that. So, let's just head right in. So, what's the motivation behind the match statement? People wanted to have something like a switch statement, as you probably know from maybe C, your other languages, for a very, very long time. I just, I wrote a pep a very long time ago, which basically suggested adding something like that to Python. It was rejected at the time, so it took another 20-something years to actually something like this to make it into Python. What we now have with the match statement is a lot more powerful than the switch statement. So, you can do not only matching on literals, for example, but you can also do matching on types. You can do matching all kinds of things, including conditions that you apply to these things. You can combine all of these things. You can also do parsing and matching at the same time, which is quite useful, so you don't have to have two passes. First, to figure out whether something is actually valid, and then in the second pass to then figure out how to actually use the data that you have there. It all started in Python 3.10. That's more than two years ago. But, like I said, it hasn't received that much traction yet. So, what you see here, or maybe you cannot see it, it's a graph from py-code.org, which is a very nice site. If you don't know that one, you should go there and have a look. It basically scans all the PyPI code and then does analysis on that. The maintainer did an analysis in July last year and looked at various features of the language, whether they were being used in the packages on PyPI or not. As you can see, in July, there were only 2,600-something packages on PyPI using the match statement. That's two years after the release, and it's only 0.55% of all the packages, so it's next to nothing. So, I guess one of the reasons for that is that the documentation for this match statement is not all that great. I'm talking about the official Python documentation. There are many blog posts about it, and many other resources that you can tap into and overviews. But the Python documentation for the match statement is not ideal. What you have is these three PEPs, and this is basically the best that you have in the official documentation for Python. If you want to get into these things, then I would suggest to go with the PEP 636, which is a very nice introduction, a tutorial kind of introduction to the match statement, and then you can go to the other PEPs to have more detail. So, how does it all work? We're going to have a look at this example, and I'm going to go through the various different parts of it. So, the first part is the match object itself. This is what you want to match, this is what you want to analyze. The next thing is what you have behind the case statements in there. Those are called match patterns, and there are quite a few of those. I'm going to go through a list of many other patterns that exist. Then, of course, you have the match code. This gets executed in case, one of those case statements, the case patterns actually do match. And then you have something called capturing variables. I'm not going to explain what that is now, because I have a few slides on those. This is a way basically to store the data that's being matched in a variable. Plus, you have something that's a bit strange, which is just the underscore. These are non-capturing wild cards. So, it's basically like an ELTS in an if-else statement. So, if the matching goes down, and you have a, as the last case, you have one of these wild card things, then this will always match. So, this is a way to do the ELTS in the match statement. Matching itself is always tried from top to bottom, and the first match wins. So, the order in which you list these match statements, the case statements, is actually very important. There's no fall through, like in C. How many of you know C? Well, quite a lot. That's good. So, you don't have that, because in C you can often make a mistake. If you forget a break, for example, in one of these, the code that comes behind the case, then it just falls through, and then you execute code that you probably don't want to execute it. So, let's have a look at these pattern types that we have. Like I said, there are quite a few. I'm going to go through them rather quickly. So, the first one is the literal. So, you can just write a little bit of string, a little bit of number, an integer, a float. It can also handle a couple of special singletons, like true, false, or none. Not many more. If you have something else that you want to actually match, and you don't want to write this down as a literal, you can use a variable kind of notation for that. So, if you have some other value, you put that into a variable that's accessible to the match statement. And what's very important is that you have a dot in that reference. The reason for that is a bit strange, because the match statement also works on types. And in order to differentiate between type names and variable names, the match statement and the parser, they need to have some kind of hint for this, so that they know what they're dealing with. And the dot is that hint. Now, the next two types are sequences and mappings. They look very natural to a Python programmer for sequences. You just use like the square brackets or the round brackets, and then you match a sequence. What's not necessarily intuitive about this is that this actually matches sequences, not just lists or tuples. So, if you write something like, for example, in the tuple notation, and then you pass in a list as an object that gets matched, the tuple case will still match in your match statement. So, that's a bit like a gutcher. You have to watch out for that. And it's similar for mappings. For mappings, you write them like the, like a dict kind of notation. It actually matches all kinds of mappings, not just dictionaries. There are ways to, you know, just match dictionaries. I'm going to show them. You can also match, like I said, different types. The very, you know, very simple ones are like all the built-in types that you have there. You can have support for user-defined classes. You have to pay some attention in user-defined classes about the order of the arguments that you have in there. I'm going to talk about that in a bit. What's very important are these parentheses. If you don't have parentheses behind this, then the match statement is going to basically treat this, the name that you have there as a variable, and very often as a capturing variable. So that's going to, that's another gutcher you need to be careful with. Of course, you can nest all these things. You can combine all these things that I just mentioned in various ways. There's an OR combination with a pipe character. And to make things even more complex, you can add guards to these match patterns that you have. So you can say, OK, for example, down here, if you can see that it's a sequence AB, and then this should only match if the value A in that sequence is above 10. So you can write very complex things in those match statements. And then finally, you have these white-card patterns. I mentioned those already. There are two types of these white-card patterns. One is the anonymous one, a non-binding one, which is the underscore. And the second one is one where you basically put something at the bottom of your match statement, and you just assign a variable to that. I often use unknown for this because it just makes sense. If you read that, it's very, you can easily comprehend that. If you read the code, you can easily understand that this is actually something that matches anything a bit unlike the underscore. I'm not too much of a fan of this underscore thing. Right, so now let's have a look at the capturing variables. Like I mentioned in the beginning, the nice thing about the match statement is that you can actually combine the matching and the parsing. So whenever something matches, Python will put the matched value into a variable that you define, which is very much like, for example, the ass notation that you have with context managers. There are two forms for this. One is an explicit form. So I put an example here. So what happens is it matches a list. And then if the list type matches, it will put the value into the variable sublist. And then you can use that variable in your other matching code that you have or in the actual code that you want executed for that particular case. Very easy to understand. It's a bit more verbose, but it always works, which is nice. And then there's an implicit form. This can cause some problems because it introduces some of these gotchas. The way that this works is that instead of putting literals in these, for example, sequence notations or mapping notations, you put variables in there. And what happens there is that implicitly, for example, in the first example up there, the first entry in that sequence will go into A, and the second entry will go into B. And then you can immediately use A and B, for example, in guards that you have on the code that comes afterwards. And these things are actually bound variables in your code. This works very well if you have well-defined variable names. If you don't, you can get into lots of trouble. So using short names is probably not a good idea. They should be very explicit. This does also work with some of the built-in types, not all of them. So there is a, I think this is actually a full list of all of the ones that support this. It does work with classes that you define, but you need to have a look at this pep for the details. There are some special attributes that you have to define in order for the parser to know in which kind of order these variables should be assigned. Unfortunately, it doesn't work with ABCs, but there are workarounds for that. So if you work with ABCs, for example, if you want to test whether something is a float or an int, and you want to put that kind of logic into an ABC, then there are ways to still make that happen. There are some things that don't work with the match statement. Some are a bit unfortunate, because, for example, if you use a scripting shell language, like bash, for example, a very, very common use case for matching is regular expressions. So basically, you have a case, and then you put a regular expression there to match a particular regular expression, kind of like how the string should look like. This is not supported directly. There are ways to work around this. I'm going to show you a reference later on, where you can basically find how to do this. Something else that doesn't work well is a set member matching. There are ways, again, to work around this. You can use a guard to kind of do this set matching. So the guard works by having the wild card, so it always matches. And then it uses the guard to do the actual check whether something is in a value set, or you can use the OR pattern. But the OR pattern is sequential, so it's not really efficient. Optimizations haven't been done yet, which is a very common theme that you always have in Python. First, something gets implemented to have something to work with. And then, in the next couple of releases, people then worry about performance and add better performance. So that has happened a lot in Python in the history. It's probably going to happen for this as well. So I talked a bit about the guard trust. I just want to reiterate some of them. This I already mentioned. If you use the tuple notation or the list notation, and you think that, OK, this is just going to match a tuple or just a list, you can easily get this wrong. So if you want to do this explicitly, then you actually have to use the type notation for this. So you have to write list or tuple, and then the sequence that you want to match. The same issue you have with the mapping types. So you have to pay attention to that as well. Another gotcha is the wildcard pattern. So you can only use the wildcard pattern at the very end of the list if you put something up at the top of the list. For example, if you start with case and then wrong values, because wrong values is a capturing variable, it's regarded as a wildcard case. And so it will match anything. And the parser will actually complain about this. So this is not valid Python. However, if you put a guard with it, then you can use it. Which is probably in order to make certain workarounds possible. I don't really know what the reason is why this works. It's a bit strange. And then the parentheses. If you look at this code, if I wouldn't have put an error there, you probably wouldn't have seen this. What I did there is I put a dict there, meaning that I want properties to have a dict, like a dictionary value. And they want to match that. But I forgot the parentheses. So what's going to happen is the parser is going to regard this as a binding, sorry, capturing variable. So it's going to put the value into a dict. And then it's not only going to not parse correctly, because it will just put any kind of value that you have there into this dict capturing variable. But it will also bind dict to this value that you have in there, possibly breaking code that comes afterwards, because you can no longer access the built-in dict. So this is something to watch out for. And finally, this is the talk that I wanted to mention. Raymond Hettinger. Who knows, Raymond Hettinger? Not that many people. That's strange. You should definitely look him up. I mean, he has done so many good talks. It's just incredible. I mean, if you want to learn something deep about how Python works, he has all the talks in his stack. So definitely have a look at that. He did a great talk at PyCon Italia 2022, also on the pattern matching. And he shows a lot of tricks on how to work some of the deficiencies that you currently have in the match statement. So I was actually faster than I thought. So I'm done. So yeah, this is always my last slide. Never stop to learn. Always learn new things. Never always try out new stuff that comes out in Python. And I hope this talk will kind of make you have a look at the match statement and maybe use it more, because it's actually quite useful. Thank you. Thank you, Mark. Thank you, Mark. So now it's time for questions. So I can say a few people with the hands raised. I will start here, and we will go up. So we have four people, at least. One of your first examples, you first had to check whether this is a list, like with the list in the parentheses. And then two cases later, you are trying to catch against the sequence. That means that this will only match if it's a sequence, but it's not a list, I guess. Like on your first slide, literally. The first one, like this one? Yes, this one. So on the third case, it will match if the thing is a sequence with three elements, but that sequence is not a list, because otherwise it would have gotten into the first case. Is that correct? Given this one, yeah? Yes. Since you have a case list, oh, yeah. Yeah, so you're right. What happens here is that this will always match for lists. So if you put in a real, like a true Python list, then you will always go in here. If you have defined your own kind of sequence, that's not a Python list. Only then it will get in the top. Then it will drop down here, and we'll parse here. And as Heckelman and Laska mentioned for me, what happens if you put a generator in there? Can you match against generators? Because then you will kind of mutate the element while casing the case. Would that work? This is a good question. I think if you put a generator in there, it will actually match the generator type and nothing much else. It won't actually call the generator to give back any values. But it's a good question. I'm not really sure. It probably works like that. Hi. Thanks for the great talk. I had a question regarding the caveat you gave at the end regarding the dict. Is there a proper way to do it, like putting parenthesis, or is it not possible to match a type inside of a hash map like that? Let me just find the slide. This one, right? Yeah, that one. So what was the question? So here you put the dict, and you said that, of course, if it will overwrite, let's say, the Python dict, would it be possible in that case to put parenthesis to match the type here? Yes, of course. And that was the code is actually written in a way that this would have been intended, right? So the intention was that properties, well, it's matching a mapping, right? So if you put in a mapping that has, as one of the keys has properties, and as a value has a dictionary, then this will match, right? Without the parenthesis, it won't match any mapping that has a key that has properties, but not actually look at the value, and simply just put the literal value into the variable dict. That's what happens. OK, I think I see you up there, right? Yes, hello. I was wondering, with this capturing variable, it can sometimes lead into ambiguity. So I was working how well this would work with the existing typing system, where you would, for example, have an object that, like, dict that represents the type. So that is something that I did not really cover in here, but perhaps you noticed the syntax that's being used here is actually somewhat different from the type annotations that you have in Python, right? So those are two distinct kind of, basically, systems working here. These types that you have here are actual Python type objects that you work with, whereas the type annotations are being used by, for example, MyPy or other tools, other static code analysis tools to figure out whether something is correct or not. So this actually happens at runtime. I don't know if that answers your question, so. Well, sort of, I guess. So you can't really put the typing types in here, let's say, because there is generics in there, of course, that would be highly convenient for matching. Right, right. I think that, I mean, in typing, you do have some actual Python type objects. Those you can use in here, right? But you cannot use the type annotation kind of syntax, for example, for matching an integer or something, yeah? No, it doesn't make sense, of course. That doesn't work. Thank you. Do we have any more questions? We have time for one last one. Yes, we do. Oh, my God, we have two. I'm going to the right side, because we haven't had many questions from there. I'm coming. Let's go. Thank you. So, yeah, maybe this is wishful thinking, but how difficult would be to implement or to provide, like, a match that will match not in order, but it will give me the best match? Would be that possible? Because, for example, I'm working in code generators for wrapping CAP from wrapping C into Python, and sometimes you can't do that. And from C++ goes over, function overload. So I can think, OK, I can have function overload to Python and translate that to a single function with match for different signatures. However, I will have to, I don't know, I need to know which is the best match for each case in order to order the match statement. Will it be possible to have that kind of logic embedded in Python, or that's too wishful thinking? You can try to do this by ordering the cases from, you know, the longest match to the shortest match. But apart from that, I think it's, this is actually a hard problem that you're describing there. Because if you want to, if you want to figure out what's the best match that you have, then you actually have to go through all the different cases that you have in here, and that's going to have different semantics than what you have now in the match statement. Usually the problem is like to know which is the most concrete type. Usually the problem that I have the most is like to know which is the most concrete type to the base type, so to that it matches the most concrete one instead of the base one, because it's like it can match us both. But in C or C++, it will always match the most concrete one. And if, and it's not there, it will get to the base. So, and for example, for now, it's like right now in Python I have no idea how I will solve that when I'm wrapping APIs. You can do that by ordering, like I said, you can order the case statement that you have here from the most, let's say, abstract one to the most concrete one, and sorry, the other way around, from the most concrete one to the most abstract one, and then like in the example I just gave where you have a list, yeah, when, if you pass in the Python list object, then it will match the first one. If you pass in, in this other example that I had here, if you pass in, let's say, a user defined sequence, then it will drop down and then match that one. So that's more abstract, right? Thank you very much, Mark. Another round of applause, Mark. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 17.6, "text": " Good afternoon.", "tokens": [50364, 2205, 6499, 13, 51244], "temperature": 0.0, "avg_logprob": -0.6042010716029576, "compression_ratio": 1.011764705882353, "no_speech_prob": 0.3117917776107788}, {"id": 1, "seek": 0, "start": 17.6, "end": 21.96, "text": " We have now Mach-Andre Leimburg.", "tokens": [51244, 492, 362, 586, 12089, 12, 5289, 265, 1456, 17306, 5476, 13, 51462], "temperature": 0.0, "avg_logprob": -0.6042010716029576, "compression_ratio": 1.011764705882353, "no_speech_prob": 0.3117917776107788}, {"id": 2, "seek": 0, "start": 21.96, "end": 29.8, "text": " He's the CEO and founder of E-Gennex.", "tokens": [51462, 634, 311, 264, 9282, 293, 14917, 295, 462, 12, 26647, 716, 87, 13, 51854], "temperature": 0.0, "avg_logprob": -0.6042010716029576, "compression_ratio": 1.011764705882353, "no_speech_prob": 0.3117917776107788}, {"id": 3, "seek": 2980, "start": 29.8, "end": 34.56, "text": " He's not only that, but he's a Python C-Python core developer.", "tokens": [50364, 634, 311, 406, 787, 300, 11, 457, 415, 311, 257, 15329, 383, 12, 47, 88, 11943, 4965, 10754, 13, 50602], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 4, "seek": 2980, "start": 34.56, "end": 38.96, "text": " He's also one of the organizers of the EuroPython.", "tokens": [50602, 634, 311, 611, 472, 295, 264, 35071, 295, 264, 3010, 47, 88, 11943, 13, 50822], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 5, "seek": 2980, "start": 38.96, "end": 41.56, "text": " He's a EuroPython Society Fellow,", "tokens": [50822, 634, 311, 257, 3010, 47, 88, 11943, 13742, 44794, 11, 50952], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 6, "seek": 2980, "start": 41.56, "end": 44.16, "text": " and he's been making many contributions to Python.", "tokens": [50952, 293, 415, 311, 668, 1455, 867, 15725, 281, 15329, 13, 51082], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 7, "seek": 2980, "start": 44.16, "end": 46.88, "text": " So, yes, we have this pop star here.", "tokens": [51082, 407, 11, 2086, 11, 321, 362, 341, 1665, 3543, 510, 13, 51218], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 8, "seek": 2980, "start": 46.88, "end": 51.040000000000006, "text": " Now, he's going to talk about Match of Things Python,", "tokens": [51218, 823, 11, 415, 311, 516, 281, 751, 466, 26178, 295, 9514, 15329, 11, 51426], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 9, "seek": 2980, "start": 51.040000000000006, "end": 54.24, "text": " parsing structured content on Python's new match statement.", "tokens": [51426, 21156, 278, 18519, 2701, 322, 15329, 311, 777, 2995, 5629, 13, 51586], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 10, "seek": 2980, "start": 54.24, "end": 55.68, "text": " Thank you very much, Mar.", "tokens": [51586, 1044, 291, 588, 709, 11, 2039, 13, 51658], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 11, "seek": 2980, "start": 55.68, "end": 56.56, "text": " Thank you.", "tokens": [51658, 1044, 291, 13, 51702], "temperature": 0.0, "avg_logprob": -0.3279867980439784, "compression_ratio": 1.628691983122363, "no_speech_prob": 0.4449053704738617}, {"id": 12, "seek": 5656, "start": 56.56, "end": 63.28, "text": " And thank you all for coming.", "tokens": [50364, 400, 1309, 291, 439, 337, 1348, 13, 50700], "temperature": 0.0, "avg_logprob": -0.18230849372016059, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.007942446507513523}, {"id": 13, "seek": 5656, "start": 63.28, "end": 66.32000000000001, "text": " The reason why I'm doing a talk about the match statement", "tokens": [50700, 440, 1778, 983, 286, 478, 884, 257, 751, 466, 264, 2995, 5629, 50852], "temperature": 0.0, "avg_logprob": -0.18230849372016059, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.007942446507513523}, {"id": 14, "seek": 5656, "start": 66.32000000000001, "end": 69.96000000000001, "text": " is that I'm getting a feeling that it doesn't receive enough traction.", "tokens": [50852, 307, 300, 286, 478, 1242, 257, 2633, 300, 309, 1177, 380, 4774, 1547, 23558, 13, 51034], "temperature": 0.0, "avg_logprob": -0.18230849372016059, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.007942446507513523}, {"id": 15, "seek": 5656, "start": 69.96000000000001, "end": 78.12, "text": " So, I wanted to know from you how many of you know the match statement?", "tokens": [51034, 407, 11, 286, 1415, 281, 458, 490, 291, 577, 867, 295, 291, 458, 264, 2995, 5629, 30, 51442], "temperature": 0.0, "avg_logprob": -0.18230849372016059, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.007942446507513523}, {"id": 16, "seek": 5656, "start": 78.12, "end": 82.24000000000001, "text": " How many of you have actually used the match statement?", "tokens": [51442, 1012, 867, 295, 291, 362, 767, 1143, 264, 2995, 5629, 30, 51648], "temperature": 0.0, "avg_logprob": -0.18230849372016059, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.007942446507513523}, {"id": 17, "seek": 5656, "start": 82.24000000000001, "end": 83.2, "text": " A lot less.", "tokens": [51648, 316, 688, 1570, 13, 51696], "temperature": 0.0, "avg_logprob": -0.18230849372016059, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.007942446507513523}, {"id": 18, "seek": 5656, "start": 83.2, "end": 85.08, "text": " Yeah, that's what I thought.", "tokens": [51696, 865, 11, 300, 311, 437, 286, 1194, 13, 51790], "temperature": 0.0, "avg_logprob": -0.18230849372016059, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.007942446507513523}, {"id": 19, "seek": 8508, "start": 85.08, "end": 88.44, "text": " So, maybe a short introduction.", "tokens": [50364, 407, 11, 1310, 257, 2099, 9339, 13, 50532], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 20, "seek": 8508, "start": 88.44, "end": 92.12, "text": " Tatiana already mentioned a couple of things.", "tokens": [50532, 19645, 8497, 1217, 2835, 257, 1916, 295, 721, 13, 50716], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 21, "seek": 8508, "start": 92.12, "end": 94.16, "text": " I did a lot of stuff in Python.", "tokens": [50716, 286, 630, 257, 688, 295, 1507, 294, 15329, 13, 50818], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 22, "seek": 8508, "start": 94.16, "end": 98.52, "text": " I've been working with Python since 1994, so a very long time.", "tokens": [50818, 286, 600, 668, 1364, 365, 15329, 1670, 22736, 11, 370, 257, 588, 938, 565, 13, 51036], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 23, "seek": 8508, "start": 98.52, "end": 100.52, "text": " I did lots of things in the core development,", "tokens": [51036, 286, 630, 3195, 295, 721, 294, 264, 4965, 3250, 11, 51136], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 24, "seek": 8508, "start": 100.52, "end": 104.84, "text": " Unicode, Db, API, the platform module.", "tokens": [51136, 1156, 299, 1429, 11, 413, 65, 11, 9362, 11, 264, 3663, 10088, 13, 51352], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 25, "seek": 8508, "start": 104.84, "end": 106.32, "text": " I'm based in Germany.", "tokens": [51352, 286, 478, 2361, 294, 7244, 13, 51426], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 26, "seek": 8508, "start": 106.32, "end": 108.03999999999999, "text": " If you have a need for, I don't know,", "tokens": [51426, 759, 291, 362, 257, 643, 337, 11, 286, 500, 380, 458, 11, 51512], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 27, "seek": 8508, "start": 108.03999999999999, "end": 112.4, "text": " a senior software architect, then please contact me.", "tokens": [51512, 257, 7965, 4722, 6331, 11, 550, 1767, 3385, 385, 13, 51730], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 28, "seek": 8508, "start": 112.4, "end": 114.44, "text": " But that's not the point of this talk.", "tokens": [51730, 583, 300, 311, 406, 264, 935, 295, 341, 751, 13, 51832], "temperature": 0.0, "avg_logprob": -0.2310986867765101, "compression_ratio": 1.5261194029850746, "no_speech_prob": 0.002277195220813155}, {"id": 29, "seek": 11444, "start": 114.44, "end": 117.36, "text": " The point of this talk is to show you this.", "tokens": [50364, 440, 935, 295, 341, 751, 307, 281, 855, 291, 341, 13, 50510], "temperature": 0.0, "avg_logprob": -0.15986417609954548, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.0028332797810435295}, {"id": 30, "seek": 11444, "start": 117.36, "end": 122.48, "text": " So, this is the match statement that you have in Python.", "tokens": [50510, 407, 11, 341, 307, 264, 2995, 5629, 300, 291, 362, 294, 15329, 13, 50766], "temperature": 0.0, "avg_logprob": -0.15986417609954548, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.0028332797810435295}, {"id": 31, "seek": 11444, "start": 122.48, "end": 124.88, "text": " And it's actually a very, very useful thing,", "tokens": [50766, 400, 309, 311, 767, 257, 588, 11, 588, 4420, 551, 11, 50886], "temperature": 0.0, "avg_logprob": -0.15986417609954548, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.0028332797810435295}, {"id": 32, "seek": 11444, "start": 124.88, "end": 128.44, "text": " especially if you want to parse structured data.", "tokens": [50886, 2318, 498, 291, 528, 281, 48377, 18519, 1412, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15986417609954548, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.0028332797810435295}, {"id": 33, "seek": 11444, "start": 128.44, "end": 132.64, "text": " Now, the match statement itself is actually quite complex", "tokens": [51064, 823, 11, 264, 2995, 5629, 2564, 307, 767, 1596, 3997, 51274], "temperature": 0.0, "avg_logprob": -0.15986417609954548, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.0028332797810435295}, {"id": 34, "seek": 11444, "start": 132.64, "end": 134.0, "text": " if you look at all the details.", "tokens": [51274, 498, 291, 574, 412, 439, 264, 4365, 13, 51342], "temperature": 0.0, "avg_logprob": -0.15986417609954548, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.0028332797810435295}, {"id": 35, "seek": 11444, "start": 134.0, "end": 137.8, "text": " And I'm going through all the details in this talk.", "tokens": [51342, 400, 286, 478, 516, 807, 439, 264, 4365, 294, 341, 751, 13, 51532], "temperature": 0.0, "avg_logprob": -0.15986417609954548, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.0028332797810435295}, {"id": 36, "seek": 11444, "start": 137.8, "end": 141.4, "text": " There are so many details that I have to rush a bit, unfortunately.", "tokens": [51532, 821, 366, 370, 867, 4365, 300, 286, 362, 281, 9300, 257, 857, 11, 7015, 13, 51712], "temperature": 0.0, "avg_logprob": -0.15986417609954548, "compression_ratio": 1.6974789915966386, "no_speech_prob": 0.0028332797810435295}, {"id": 37, "seek": 14140, "start": 141.44, "end": 144.76000000000002, "text": " And I'm not going to be able to show you live demos or anything", "tokens": [50366, 400, 286, 478, 406, 516, 281, 312, 1075, 281, 855, 291, 1621, 33788, 420, 1340, 50532], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 38, "seek": 14140, "start": 144.76000000000002, "end": 146.52, "text": " because I simply don't have the time for that.", "tokens": [50532, 570, 286, 2935, 500, 380, 362, 264, 565, 337, 300, 13, 50620], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 39, "seek": 14140, "start": 146.52, "end": 148.84, "text": " So, let's just head right in.", "tokens": [50620, 407, 11, 718, 311, 445, 1378, 558, 294, 13, 50736], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 40, "seek": 14140, "start": 148.84, "end": 152.52, "text": " So, what's the motivation behind the match statement?", "tokens": [50736, 407, 11, 437, 311, 264, 12335, 2261, 264, 2995, 5629, 30, 50920], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 41, "seek": 14140, "start": 152.52, "end": 155.64000000000001, "text": " People wanted to have something like a switch statement,", "tokens": [50920, 3432, 1415, 281, 362, 746, 411, 257, 3679, 5629, 11, 51076], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 42, "seek": 14140, "start": 155.64000000000001, "end": 157.44, "text": " as you probably know from maybe C,", "tokens": [51076, 382, 291, 1391, 458, 490, 1310, 383, 11, 51166], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 43, "seek": 14140, "start": 157.44, "end": 160.76, "text": " your other languages, for a very, very long time.", "tokens": [51166, 428, 661, 8650, 11, 337, 257, 588, 11, 588, 938, 565, 13, 51332], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 44, "seek": 14140, "start": 160.76, "end": 164.76, "text": " I just, I wrote a pep a very long time ago,", "tokens": [51332, 286, 445, 11, 286, 4114, 257, 520, 79, 257, 588, 938, 565, 2057, 11, 51532], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 45, "seek": 14140, "start": 164.76, "end": 167.72, "text": " which basically suggested adding something like that to Python.", "tokens": [51532, 597, 1936, 10945, 5127, 746, 411, 300, 281, 15329, 13, 51680], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 46, "seek": 14140, "start": 167.72, "end": 169.04000000000002, "text": " It was rejected at the time,", "tokens": [51680, 467, 390, 15749, 412, 264, 565, 11, 51746], "temperature": 0.0, "avg_logprob": -0.18744776230449825, "compression_ratio": 1.6713780918727916, "no_speech_prob": 0.0009991840925067663}, {"id": 47, "seek": 16904, "start": 169.07999999999998, "end": 172.48, "text": " so it took another 20-something years", "tokens": [50366, 370, 309, 1890, 1071, 945, 12, 31681, 924, 50536], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 48, "seek": 16904, "start": 172.48, "end": 177.92, "text": " to actually something like this to make it into Python.", "tokens": [50536, 281, 767, 746, 411, 341, 281, 652, 309, 666, 15329, 13, 50808], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 49, "seek": 16904, "start": 177.92, "end": 179.51999999999998, "text": " What we now have with the match statement", "tokens": [50808, 708, 321, 586, 362, 365, 264, 2995, 5629, 50888], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 50, "seek": 16904, "start": 179.51999999999998, "end": 181.56, "text": " is a lot more powerful than the switch statement.", "tokens": [50888, 307, 257, 688, 544, 4005, 813, 264, 3679, 5629, 13, 50990], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 51, "seek": 16904, "start": 181.56, "end": 185.23999999999998, "text": " So, you can do not only matching on literals, for example,", "tokens": [50990, 407, 11, 291, 393, 360, 406, 787, 14324, 322, 2733, 1124, 11, 337, 1365, 11, 51174], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 52, "seek": 16904, "start": 185.23999999999998, "end": 186.95999999999998, "text": " but you can also do matching on types.", "tokens": [51174, 457, 291, 393, 611, 360, 14324, 322, 3467, 13, 51260], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 53, "seek": 16904, "start": 186.95999999999998, "end": 189.6, "text": " You can do matching all kinds of things,", "tokens": [51260, 509, 393, 360, 14324, 439, 3685, 295, 721, 11, 51392], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 54, "seek": 16904, "start": 189.6, "end": 192.79999999999998, "text": " including conditions that you apply to these things.", "tokens": [51392, 3009, 4487, 300, 291, 3079, 281, 613, 721, 13, 51552], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 55, "seek": 16904, "start": 192.79999999999998, "end": 194.32, "text": " You can combine all of these things.", "tokens": [51552, 509, 393, 10432, 439, 295, 613, 721, 13, 51628], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 56, "seek": 16904, "start": 194.32, "end": 198.44, "text": " You can also do parsing and matching at the same time,", "tokens": [51628, 509, 393, 611, 360, 21156, 278, 293, 14324, 412, 264, 912, 565, 11, 51834], "temperature": 0.0, "avg_logprob": -0.14548992719806608, "compression_ratio": 1.8537549407114624, "no_speech_prob": 0.00034008282818831503}, {"id": 57, "seek": 19844, "start": 198.48, "end": 201.12, "text": " which is quite useful, so you don't have to have two passes.", "tokens": [50366, 597, 307, 1596, 4420, 11, 370, 291, 500, 380, 362, 281, 362, 732, 11335, 13, 50498], "temperature": 0.0, "avg_logprob": -0.16879342912553666, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.000828981923405081}, {"id": 58, "seek": 19844, "start": 201.12, "end": 204.12, "text": " First, to figure out whether something is actually valid,", "tokens": [50498, 2386, 11, 281, 2573, 484, 1968, 746, 307, 767, 7363, 11, 50648], "temperature": 0.0, "avg_logprob": -0.16879342912553666, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.000828981923405081}, {"id": 59, "seek": 19844, "start": 204.12, "end": 207.12, "text": " and then in the second pass to then figure out", "tokens": [50648, 293, 550, 294, 264, 1150, 1320, 281, 550, 2573, 484, 50798], "temperature": 0.0, "avg_logprob": -0.16879342912553666, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.000828981923405081}, {"id": 60, "seek": 19844, "start": 207.12, "end": 210.52, "text": " how to actually use the data that you have there.", "tokens": [50798, 577, 281, 767, 764, 264, 1412, 300, 291, 362, 456, 13, 50968], "temperature": 0.0, "avg_logprob": -0.16879342912553666, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.000828981923405081}, {"id": 61, "seek": 19844, "start": 210.52, "end": 213.76, "text": " It all started in Python 3.10.", "tokens": [50968, 467, 439, 1409, 294, 15329, 805, 13, 3279, 13, 51130], "temperature": 0.0, "avg_logprob": -0.16879342912553666, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.000828981923405081}, {"id": 62, "seek": 19844, "start": 213.76, "end": 217.52, "text": " That's more than two years ago.", "tokens": [51130, 663, 311, 544, 813, 732, 924, 2057, 13, 51318], "temperature": 0.0, "avg_logprob": -0.16879342912553666, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.000828981923405081}, {"id": 63, "seek": 19844, "start": 217.52, "end": 221.4, "text": " But, like I said, it hasn't received that much traction yet.", "tokens": [51318, 583, 11, 411, 286, 848, 11, 309, 6132, 380, 4613, 300, 709, 23558, 1939, 13, 51512], "temperature": 0.0, "avg_logprob": -0.16879342912553666, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.000828981923405081}, {"id": 64, "seek": 19844, "start": 221.4, "end": 224.76, "text": " So, what you see here, or maybe you cannot see it,", "tokens": [51512, 407, 11, 437, 291, 536, 510, 11, 420, 1310, 291, 2644, 536, 309, 11, 51680], "temperature": 0.0, "avg_logprob": -0.16879342912553666, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.000828981923405081}, {"id": 65, "seek": 22476, "start": 224.79999999999998, "end": 229.2, "text": " it's a graph from py-code.org,", "tokens": [50366, 309, 311, 257, 4295, 490, 10664, 12, 22332, 13, 4646, 11, 50586], "temperature": 0.0, "avg_logprob": -0.16923492733794865, "compression_ratio": 1.5580357142857142, "no_speech_prob": 0.0010468672262504697}, {"id": 66, "seek": 22476, "start": 229.2, "end": 230.28, "text": " which is a very nice site.", "tokens": [50586, 597, 307, 257, 588, 1481, 3621, 13, 50640], "temperature": 0.0, "avg_logprob": -0.16923492733794865, "compression_ratio": 1.5580357142857142, "no_speech_prob": 0.0010468672262504697}, {"id": 67, "seek": 22476, "start": 230.28, "end": 232.51999999999998, "text": " If you don't know that one, you should go there and have a look.", "tokens": [50640, 759, 291, 500, 380, 458, 300, 472, 11, 291, 820, 352, 456, 293, 362, 257, 574, 13, 50752], "temperature": 0.0, "avg_logprob": -0.16923492733794865, "compression_ratio": 1.5580357142857142, "no_speech_prob": 0.0010468672262504697}, {"id": 68, "seek": 22476, "start": 232.51999999999998, "end": 236.35999999999999, "text": " It basically scans all the PyPI code", "tokens": [50752, 467, 1936, 35116, 439, 264, 9953, 31701, 3089, 50944], "temperature": 0.0, "avg_logprob": -0.16923492733794865, "compression_ratio": 1.5580357142857142, "no_speech_prob": 0.0010468672262504697}, {"id": 69, "seek": 22476, "start": 236.35999999999999, "end": 239.51999999999998, "text": " and then does analysis on that.", "tokens": [50944, 293, 550, 775, 5215, 322, 300, 13, 51102], "temperature": 0.0, "avg_logprob": -0.16923492733794865, "compression_ratio": 1.5580357142857142, "no_speech_prob": 0.0010468672262504697}, {"id": 70, "seek": 22476, "start": 239.51999999999998, "end": 242.92, "text": " The maintainer did an analysis in July last year", "tokens": [51102, 440, 6909, 260, 630, 364, 5215, 294, 7370, 1036, 1064, 51272], "temperature": 0.0, "avg_logprob": -0.16923492733794865, "compression_ratio": 1.5580357142857142, "no_speech_prob": 0.0010468672262504697}, {"id": 71, "seek": 22476, "start": 242.92, "end": 247.56, "text": " and looked at various features of the language,", "tokens": [51272, 293, 2956, 412, 3683, 4122, 295, 264, 2856, 11, 51504], "temperature": 0.0, "avg_logprob": -0.16923492733794865, "compression_ratio": 1.5580357142857142, "no_speech_prob": 0.0010468672262504697}, {"id": 72, "seek": 22476, "start": 247.56, "end": 252.12, "text": " whether they were being used in the packages on PyPI or not.", "tokens": [51504, 1968, 436, 645, 885, 1143, 294, 264, 17401, 322, 9953, 31701, 420, 406, 13, 51732], "temperature": 0.0, "avg_logprob": -0.16923492733794865, "compression_ratio": 1.5580357142857142, "no_speech_prob": 0.0010468672262504697}, {"id": 73, "seek": 25212, "start": 252.12, "end": 258.28000000000003, "text": " As you can see, in July, there were only 2,600-something packages", "tokens": [50364, 1018, 291, 393, 536, 11, 294, 7370, 11, 456, 645, 787, 568, 11, 15707, 12, 31681, 17401, 50672], "temperature": 0.0, "avg_logprob": -0.2180165526687458, "compression_ratio": 1.5490196078431373, "no_speech_prob": 0.0002562970039434731}, {"id": 74, "seek": 25212, "start": 258.28000000000003, "end": 262.16, "text": " on PyPI using the match statement.", "tokens": [50672, 322, 9953, 31701, 1228, 264, 2995, 5629, 13, 50866], "temperature": 0.0, "avg_logprob": -0.2180165526687458, "compression_ratio": 1.5490196078431373, "no_speech_prob": 0.0002562970039434731}, {"id": 75, "seek": 25212, "start": 262.16, "end": 265.48, "text": " That's two years after the release,", "tokens": [50866, 663, 311, 732, 924, 934, 264, 4374, 11, 51032], "temperature": 0.0, "avg_logprob": -0.2180165526687458, "compression_ratio": 1.5490196078431373, "no_speech_prob": 0.0002562970039434731}, {"id": 76, "seek": 25212, "start": 265.48, "end": 271.76, "text": " and it's only 0.55% of all the packages, so it's next to nothing.", "tokens": [51032, 293, 309, 311, 787, 1958, 13, 13622, 4, 295, 439, 264, 17401, 11, 370, 309, 311, 958, 281, 1825, 13, 51346], "temperature": 0.0, "avg_logprob": -0.2180165526687458, "compression_ratio": 1.5490196078431373, "no_speech_prob": 0.0002562970039434731}, {"id": 77, "seek": 25212, "start": 271.76, "end": 276.08, "text": " So, I guess one of the reasons for that", "tokens": [51346, 407, 11, 286, 2041, 472, 295, 264, 4112, 337, 300, 51562], "temperature": 0.0, "avg_logprob": -0.2180165526687458, "compression_ratio": 1.5490196078431373, "no_speech_prob": 0.0002562970039434731}, {"id": 78, "seek": 25212, "start": 276.08, "end": 278.48, "text": " is that the documentation for this match statement", "tokens": [51562, 307, 300, 264, 14333, 337, 341, 2995, 5629, 51682], "temperature": 0.0, "avg_logprob": -0.2180165526687458, "compression_ratio": 1.5490196078431373, "no_speech_prob": 0.0002562970039434731}, {"id": 79, "seek": 25212, "start": 278.48, "end": 281.24, "text": " is not all that great.", "tokens": [51682, 307, 406, 439, 300, 869, 13, 51820], "temperature": 0.0, "avg_logprob": -0.2180165526687458, "compression_ratio": 1.5490196078431373, "no_speech_prob": 0.0002562970039434731}, {"id": 80, "seek": 28124, "start": 281.24, "end": 284.2, "text": " I'm talking about the official Python documentation.", "tokens": [50364, 286, 478, 1417, 466, 264, 4783, 15329, 14333, 13, 50512], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 81, "seek": 28124, "start": 284.2, "end": 286.2, "text": " There are many blog posts about it,", "tokens": [50512, 821, 366, 867, 6968, 12300, 466, 309, 11, 50612], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 82, "seek": 28124, "start": 286.2, "end": 290.84000000000003, "text": " and many other resources that you can tap into and overviews.", "tokens": [50612, 293, 867, 661, 3593, 300, 291, 393, 5119, 666, 293, 12492, 82, 13, 50844], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 83, "seek": 28124, "start": 290.84000000000003, "end": 294.92, "text": " But the Python documentation for the match statement is not ideal.", "tokens": [50844, 583, 264, 15329, 14333, 337, 264, 2995, 5629, 307, 406, 7157, 13, 51048], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 84, "seek": 28124, "start": 294.92, "end": 298.24, "text": " What you have is these three PEPs,", "tokens": [51048, 708, 291, 362, 307, 613, 1045, 430, 8929, 82, 11, 51214], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 85, "seek": 28124, "start": 298.24, "end": 300.32, "text": " and this is basically the best that you have", "tokens": [51214, 293, 341, 307, 1936, 264, 1151, 300, 291, 362, 51318], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 86, "seek": 28124, "start": 300.32, "end": 302.92, "text": " in the official documentation for Python.", "tokens": [51318, 294, 264, 4783, 14333, 337, 15329, 13, 51448], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 87, "seek": 28124, "start": 302.92, "end": 304.48, "text": " If you want to get into these things,", "tokens": [51448, 759, 291, 528, 281, 483, 666, 613, 721, 11, 51526], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 88, "seek": 28124, "start": 304.48, "end": 308.6, "text": " then I would suggest to go with the PEP 636,", "tokens": [51526, 550, 286, 576, 3402, 281, 352, 365, 264, 430, 8929, 1386, 11309, 11, 51732], "temperature": 0.0, "avg_logprob": -0.22021045684814453, "compression_ratio": 1.743801652892562, "no_speech_prob": 0.001222203834913671}, {"id": 89, "seek": 30860, "start": 308.64000000000004, "end": 311.44, "text": " which is a very nice introduction,", "tokens": [50366, 597, 307, 257, 588, 1481, 9339, 11, 50506], "temperature": 0.0, "avg_logprob": -0.17124504226822038, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0004232456558384001}, {"id": 90, "seek": 30860, "start": 311.44, "end": 313.72, "text": " a tutorial kind of introduction to the match statement,", "tokens": [50506, 257, 7073, 733, 295, 9339, 281, 264, 2995, 5629, 11, 50620], "temperature": 0.0, "avg_logprob": -0.17124504226822038, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0004232456558384001}, {"id": 91, "seek": 30860, "start": 313.72, "end": 319.40000000000003, "text": " and then you can go to the other PEPs to have more detail.", "tokens": [50620, 293, 550, 291, 393, 352, 281, 264, 661, 430, 8929, 82, 281, 362, 544, 2607, 13, 50904], "temperature": 0.0, "avg_logprob": -0.17124504226822038, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0004232456558384001}, {"id": 92, "seek": 30860, "start": 319.40000000000003, "end": 321.6, "text": " So, how does it all work?", "tokens": [50904, 407, 11, 577, 775, 309, 439, 589, 30, 51014], "temperature": 0.0, "avg_logprob": -0.17124504226822038, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0004232456558384001}, {"id": 93, "seek": 30860, "start": 321.6, "end": 323.08000000000004, "text": " We're going to have a look at this example,", "tokens": [51014, 492, 434, 516, 281, 362, 257, 574, 412, 341, 1365, 11, 51088], "temperature": 0.0, "avg_logprob": -0.17124504226822038, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0004232456558384001}, {"id": 94, "seek": 30860, "start": 323.08000000000004, "end": 326.72, "text": " and I'm going to go through the various different parts of it.", "tokens": [51088, 293, 286, 478, 516, 281, 352, 807, 264, 3683, 819, 3166, 295, 309, 13, 51270], "temperature": 0.0, "avg_logprob": -0.17124504226822038, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0004232456558384001}, {"id": 95, "seek": 30860, "start": 326.72, "end": 330.28000000000003, "text": " So, the first part is the match object itself.", "tokens": [51270, 407, 11, 264, 700, 644, 307, 264, 2995, 2657, 2564, 13, 51448], "temperature": 0.0, "avg_logprob": -0.17124504226822038, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0004232456558384001}, {"id": 96, "seek": 30860, "start": 330.28000000000003, "end": 335.0, "text": " This is what you want to match, this is what you want to analyze.", "tokens": [51448, 639, 307, 437, 291, 528, 281, 2995, 11, 341, 307, 437, 291, 528, 281, 12477, 13, 51684], "temperature": 0.0, "avg_logprob": -0.17124504226822038, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0004232456558384001}, {"id": 97, "seek": 33500, "start": 335.0, "end": 340.0, "text": " The next thing is what you have behind the case statements in there.", "tokens": [50364, 440, 958, 551, 307, 437, 291, 362, 2261, 264, 1389, 12363, 294, 456, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16211024352482387, "compression_ratio": 1.8140495867768596, "no_speech_prob": 0.0001037983238347806}, {"id": 98, "seek": 33500, "start": 340.0, "end": 343.08, "text": " Those are called match patterns, and there are quite a few of those.", "tokens": [50614, 3950, 366, 1219, 2995, 8294, 11, 293, 456, 366, 1596, 257, 1326, 295, 729, 13, 50768], "temperature": 0.0, "avg_logprob": -0.16211024352482387, "compression_ratio": 1.8140495867768596, "no_speech_prob": 0.0001037983238347806}, {"id": 99, "seek": 33500, "start": 343.08, "end": 348.76, "text": " I'm going to go through a list of many other patterns that exist.", "tokens": [50768, 286, 478, 516, 281, 352, 807, 257, 1329, 295, 867, 661, 8294, 300, 2514, 13, 51052], "temperature": 0.0, "avg_logprob": -0.16211024352482387, "compression_ratio": 1.8140495867768596, "no_speech_prob": 0.0001037983238347806}, {"id": 100, "seek": 33500, "start": 348.76, "end": 350.48, "text": " Then, of course, you have the match code.", "tokens": [51052, 1396, 11, 295, 1164, 11, 291, 362, 264, 2995, 3089, 13, 51138], "temperature": 0.0, "avg_logprob": -0.16211024352482387, "compression_ratio": 1.8140495867768596, "no_speech_prob": 0.0001037983238347806}, {"id": 101, "seek": 33500, "start": 350.48, "end": 353.68, "text": " This gets executed in case, one of those case statements,", "tokens": [51138, 639, 2170, 17577, 294, 1389, 11, 472, 295, 729, 1389, 12363, 11, 51298], "temperature": 0.0, "avg_logprob": -0.16211024352482387, "compression_ratio": 1.8140495867768596, "no_speech_prob": 0.0001037983238347806}, {"id": 102, "seek": 33500, "start": 353.68, "end": 359.2, "text": " the case patterns actually do match.", "tokens": [51298, 264, 1389, 8294, 767, 360, 2995, 13, 51574], "temperature": 0.0, "avg_logprob": -0.16211024352482387, "compression_ratio": 1.8140495867768596, "no_speech_prob": 0.0001037983238347806}, {"id": 103, "seek": 33500, "start": 359.2, "end": 362.16, "text": " And then you have something called capturing variables.", "tokens": [51574, 400, 550, 291, 362, 746, 1219, 23384, 9102, 13, 51722], "temperature": 0.0, "avg_logprob": -0.16211024352482387, "compression_ratio": 1.8140495867768596, "no_speech_prob": 0.0001037983238347806}, {"id": 104, "seek": 33500, "start": 362.16, "end": 364.44, "text": " I'm not going to explain what that is now,", "tokens": [51722, 286, 478, 406, 516, 281, 2903, 437, 300, 307, 586, 11, 51836], "temperature": 0.0, "avg_logprob": -0.16211024352482387, "compression_ratio": 1.8140495867768596, "no_speech_prob": 0.0001037983238347806}, {"id": 105, "seek": 36444, "start": 364.48, "end": 366.88, "text": " because I have a few slides on those.", "tokens": [50366, 570, 286, 362, 257, 1326, 9788, 322, 729, 13, 50486], "temperature": 0.0, "avg_logprob": -0.23992285397973392, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.00017391609435435385}, {"id": 106, "seek": 36444, "start": 366.88, "end": 375.92, "text": " This is a way basically to store the data that's being matched in a variable.", "tokens": [50486, 639, 307, 257, 636, 1936, 281, 3531, 264, 1412, 300, 311, 885, 21447, 294, 257, 7006, 13, 50938], "temperature": 0.0, "avg_logprob": -0.23992285397973392, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.00017391609435435385}, {"id": 107, "seek": 36444, "start": 375.92, "end": 379.88, "text": " Plus, you have something that's a bit strange, which is just the underscore.", "tokens": [50938, 7721, 11, 291, 362, 746, 300, 311, 257, 857, 5861, 11, 597, 307, 445, 264, 37556, 13, 51136], "temperature": 0.0, "avg_logprob": -0.23992285397973392, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.00017391609435435385}, {"id": 108, "seek": 36444, "start": 379.88, "end": 382.2, "text": " These are non-capturing wild cards.", "tokens": [51136, 1981, 366, 2107, 12, 496, 662, 1345, 4868, 5632, 13, 51252], "temperature": 0.0, "avg_logprob": -0.23992285397973392, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.00017391609435435385}, {"id": 109, "seek": 36444, "start": 382.2, "end": 386.88, "text": " So, it's basically like an ELTS in an if-else statement.", "tokens": [51252, 407, 11, 309, 311, 1936, 411, 364, 14426, 7327, 294, 364, 498, 12, 44408, 5629, 13, 51486], "temperature": 0.0, "avg_logprob": -0.23992285397973392, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.00017391609435435385}, {"id": 110, "seek": 36444, "start": 386.88, "end": 393.44, "text": " So, if the matching goes down, and you have a, as the last case,", "tokens": [51486, 407, 11, 498, 264, 14324, 1709, 760, 11, 293, 291, 362, 257, 11, 382, 264, 1036, 1389, 11, 51814], "temperature": 0.0, "avg_logprob": -0.23992285397973392, "compression_ratio": 1.5486725663716814, "no_speech_prob": 0.00017391609435435385}, {"id": 111, "seek": 39344, "start": 393.44, "end": 396.64, "text": " you have one of these wild card things, then this will always match.", "tokens": [50364, 291, 362, 472, 295, 613, 4868, 2920, 721, 11, 550, 341, 486, 1009, 2995, 13, 50524], "temperature": 0.0, "avg_logprob": -0.16600513458251953, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0006457717390730977}, {"id": 112, "seek": 39344, "start": 396.64, "end": 400.8, "text": " So, this is a way to do the ELTS in the match statement.", "tokens": [50524, 407, 11, 341, 307, 257, 636, 281, 360, 264, 14426, 7327, 294, 264, 2995, 5629, 13, 50732], "temperature": 0.0, "avg_logprob": -0.16600513458251953, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0006457717390730977}, {"id": 113, "seek": 39344, "start": 400.8, "end": 405.6, "text": " Matching itself is always tried from top to bottom, and the first match wins.", "tokens": [50732, 26178, 278, 2564, 307, 1009, 3031, 490, 1192, 281, 2767, 11, 293, 264, 700, 2995, 10641, 13, 50972], "temperature": 0.0, "avg_logprob": -0.16600513458251953, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0006457717390730977}, {"id": 114, "seek": 39344, "start": 405.6, "end": 409.76, "text": " So, the order in which you list these match statements,", "tokens": [50972, 407, 11, 264, 1668, 294, 597, 291, 1329, 613, 2995, 12363, 11, 51180], "temperature": 0.0, "avg_logprob": -0.16600513458251953, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0006457717390730977}, {"id": 115, "seek": 39344, "start": 409.76, "end": 413.84, "text": " the case statements, is actually very important.", "tokens": [51180, 264, 1389, 12363, 11, 307, 767, 588, 1021, 13, 51384], "temperature": 0.0, "avg_logprob": -0.16600513458251953, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0006457717390730977}, {"id": 116, "seek": 39344, "start": 413.84, "end": 419.76, "text": " There's no fall through, like in C. How many of you know C?", "tokens": [51384, 821, 311, 572, 2100, 807, 11, 411, 294, 383, 13, 1012, 867, 295, 291, 458, 383, 30, 51680], "temperature": 0.0, "avg_logprob": -0.16600513458251953, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0006457717390730977}, {"id": 117, "seek": 41976, "start": 419.76, "end": 423.68, "text": " Well, quite a lot. That's good.", "tokens": [50364, 1042, 11, 1596, 257, 688, 13, 663, 311, 665, 13, 50560], "temperature": 0.0, "avg_logprob": -0.16673612594604492, "compression_ratio": 1.6745098039215687, "no_speech_prob": 0.00031488656532019377}, {"id": 118, "seek": 41976, "start": 423.68, "end": 426.4, "text": " So, you don't have that, because in C you can often make a mistake.", "tokens": [50560, 407, 11, 291, 500, 380, 362, 300, 11, 570, 294, 383, 291, 393, 2049, 652, 257, 6146, 13, 50696], "temperature": 0.0, "avg_logprob": -0.16673612594604492, "compression_ratio": 1.6745098039215687, "no_speech_prob": 0.00031488656532019377}, {"id": 119, "seek": 41976, "start": 426.4, "end": 430.03999999999996, "text": " If you forget a break, for example, in one of these,", "tokens": [50696, 759, 291, 2870, 257, 1821, 11, 337, 1365, 11, 294, 472, 295, 613, 11, 50878], "temperature": 0.0, "avg_logprob": -0.16673612594604492, "compression_ratio": 1.6745098039215687, "no_speech_prob": 0.00031488656532019377}, {"id": 120, "seek": 41976, "start": 430.03999999999996, "end": 433.59999999999997, "text": " the code that comes behind the case, then it just falls through,", "tokens": [50878, 264, 3089, 300, 1487, 2261, 264, 1389, 11, 550, 309, 445, 8804, 807, 11, 51056], "temperature": 0.0, "avg_logprob": -0.16673612594604492, "compression_ratio": 1.6745098039215687, "no_speech_prob": 0.00031488656532019377}, {"id": 121, "seek": 41976, "start": 433.59999999999997, "end": 440.08, "text": " and then you execute code that you probably don't want to execute it.", "tokens": [51056, 293, 550, 291, 14483, 3089, 300, 291, 1391, 500, 380, 528, 281, 14483, 309, 13, 51380], "temperature": 0.0, "avg_logprob": -0.16673612594604492, "compression_ratio": 1.6745098039215687, "no_speech_prob": 0.00031488656532019377}, {"id": 122, "seek": 41976, "start": 440.08, "end": 443.88, "text": " So, let's have a look at these pattern types that we have.", "tokens": [51380, 407, 11, 718, 311, 362, 257, 574, 412, 613, 5102, 3467, 300, 321, 362, 13, 51570], "temperature": 0.0, "avg_logprob": -0.16673612594604492, "compression_ratio": 1.6745098039215687, "no_speech_prob": 0.00031488656532019377}, {"id": 123, "seek": 41976, "start": 443.88, "end": 445.12, "text": " Like I said, there are quite a few.", "tokens": [51570, 1743, 286, 848, 11, 456, 366, 1596, 257, 1326, 13, 51632], "temperature": 0.0, "avg_logprob": -0.16673612594604492, "compression_ratio": 1.6745098039215687, "no_speech_prob": 0.00031488656532019377}, {"id": 124, "seek": 41976, "start": 445.12, "end": 447.64, "text": " I'm going to go through them rather quickly.", "tokens": [51632, 286, 478, 516, 281, 352, 807, 552, 2831, 2661, 13, 51758], "temperature": 0.0, "avg_logprob": -0.16673612594604492, "compression_ratio": 1.6745098039215687, "no_speech_prob": 0.00031488656532019377}, {"id": 125, "seek": 44764, "start": 447.64, "end": 450.28, "text": " So, the first one is the literal.", "tokens": [50364, 407, 11, 264, 700, 472, 307, 264, 20411, 13, 50496], "temperature": 0.0, "avg_logprob": -0.17435826481999578, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.0005791095900349319}, {"id": 126, "seek": 44764, "start": 450.28, "end": 453.36, "text": " So, you can just write a little bit of string, a little bit of number,", "tokens": [50496, 407, 11, 291, 393, 445, 2464, 257, 707, 857, 295, 6798, 11, 257, 707, 857, 295, 1230, 11, 50650], "temperature": 0.0, "avg_logprob": -0.17435826481999578, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.0005791095900349319}, {"id": 127, "seek": 44764, "start": 453.36, "end": 456.15999999999997, "text": " an integer, a float.", "tokens": [50650, 364, 24922, 11, 257, 15706, 13, 50790], "temperature": 0.0, "avg_logprob": -0.17435826481999578, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.0005791095900349319}, {"id": 128, "seek": 44764, "start": 456.15999999999997, "end": 461.44, "text": " It can also handle a couple of special singletons, like true, false, or none.", "tokens": [50790, 467, 393, 611, 4813, 257, 1916, 295, 2121, 1522, 2631, 892, 11, 411, 2074, 11, 7908, 11, 420, 6022, 13, 51054], "temperature": 0.0, "avg_logprob": -0.17435826481999578, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.0005791095900349319}, {"id": 129, "seek": 44764, "start": 461.44, "end": 463.32, "text": " Not many more.", "tokens": [51054, 1726, 867, 544, 13, 51148], "temperature": 0.0, "avg_logprob": -0.17435826481999578, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.0005791095900349319}, {"id": 130, "seek": 44764, "start": 463.32, "end": 467.32, "text": " If you have something else that you want to actually match,", "tokens": [51148, 759, 291, 362, 746, 1646, 300, 291, 528, 281, 767, 2995, 11, 51348], "temperature": 0.0, "avg_logprob": -0.17435826481999578, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.0005791095900349319}, {"id": 131, "seek": 44764, "start": 467.32, "end": 469.64, "text": " and you don't want to write this down as a literal,", "tokens": [51348, 293, 291, 500, 380, 528, 281, 2464, 341, 760, 382, 257, 20411, 11, 51464], "temperature": 0.0, "avg_logprob": -0.17435826481999578, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.0005791095900349319}, {"id": 132, "seek": 44764, "start": 469.64, "end": 473.8, "text": " you can use a variable kind of notation for that.", "tokens": [51464, 291, 393, 764, 257, 7006, 733, 295, 24657, 337, 300, 13, 51672], "temperature": 0.0, "avg_logprob": -0.17435826481999578, "compression_ratio": 1.6593886462882097, "no_speech_prob": 0.0005791095900349319}, {"id": 133, "seek": 47380, "start": 473.8, "end": 477.88, "text": " So, if you have some other value, you put that into a variable", "tokens": [50364, 407, 11, 498, 291, 362, 512, 661, 2158, 11, 291, 829, 300, 666, 257, 7006, 50568], "temperature": 0.0, "avg_logprob": -0.13109625658942659, "compression_ratio": 1.8385650224215246, "no_speech_prob": 0.0013449370162561536}, {"id": 134, "seek": 47380, "start": 477.88, "end": 480.68, "text": " that's accessible to the match statement.", "tokens": [50568, 300, 311, 9515, 281, 264, 2995, 5629, 13, 50708], "temperature": 0.0, "avg_logprob": -0.13109625658942659, "compression_ratio": 1.8385650224215246, "no_speech_prob": 0.0013449370162561536}, {"id": 135, "seek": 47380, "start": 480.68, "end": 486.92, "text": " And what's very important is that you have a dot in that reference.", "tokens": [50708, 400, 437, 311, 588, 1021, 307, 300, 291, 362, 257, 5893, 294, 300, 6408, 13, 51020], "temperature": 0.0, "avg_logprob": -0.13109625658942659, "compression_ratio": 1.8385650224215246, "no_speech_prob": 0.0013449370162561536}, {"id": 136, "seek": 47380, "start": 486.92, "end": 490.72, "text": " The reason for that is a bit strange,", "tokens": [51020, 440, 1778, 337, 300, 307, 257, 857, 5861, 11, 51210], "temperature": 0.0, "avg_logprob": -0.13109625658942659, "compression_ratio": 1.8385650224215246, "no_speech_prob": 0.0013449370162561536}, {"id": 137, "seek": 47380, "start": 490.72, "end": 494.32, "text": " because the match statement also works on types.", "tokens": [51210, 570, 264, 2995, 5629, 611, 1985, 322, 3467, 13, 51390], "temperature": 0.0, "avg_logprob": -0.13109625658942659, "compression_ratio": 1.8385650224215246, "no_speech_prob": 0.0013449370162561536}, {"id": 138, "seek": 47380, "start": 494.32, "end": 498.72, "text": " And in order to differentiate between type names and variable names,", "tokens": [51390, 400, 294, 1668, 281, 23203, 1296, 2010, 5288, 293, 7006, 5288, 11, 51610], "temperature": 0.0, "avg_logprob": -0.13109625658942659, "compression_ratio": 1.8385650224215246, "no_speech_prob": 0.0013449370162561536}, {"id": 139, "seek": 47380, "start": 498.72, "end": 502.40000000000003, "text": " the match statement and the parser, they need to have some kind of hint for this,", "tokens": [51610, 264, 2995, 5629, 293, 264, 21156, 260, 11, 436, 643, 281, 362, 512, 733, 295, 12075, 337, 341, 11, 51794], "temperature": 0.0, "avg_logprob": -0.13109625658942659, "compression_ratio": 1.8385650224215246, "no_speech_prob": 0.0013449370162561536}, {"id": 140, "seek": 50240, "start": 502.4, "end": 503.96, "text": " so that they know what they're dealing with.", "tokens": [50364, 370, 300, 436, 458, 437, 436, 434, 6260, 365, 13, 50442], "temperature": 0.0, "avg_logprob": -0.19506288710094632, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.00016857105947565287}, {"id": 141, "seek": 50240, "start": 503.96, "end": 508.84, "text": " And the dot is that hint.", "tokens": [50442, 400, 264, 5893, 307, 300, 12075, 13, 50686], "temperature": 0.0, "avg_logprob": -0.19506288710094632, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.00016857105947565287}, {"id": 142, "seek": 50240, "start": 508.84, "end": 512.8, "text": " Now, the next two types are sequences and mappings.", "tokens": [50686, 823, 11, 264, 958, 732, 3467, 366, 22978, 293, 463, 28968, 13, 50884], "temperature": 0.0, "avg_logprob": -0.19506288710094632, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.00016857105947565287}, {"id": 143, "seek": 50240, "start": 512.8, "end": 515.56, "text": " They look very natural to a Python programmer for sequences.", "tokens": [50884, 814, 574, 588, 3303, 281, 257, 15329, 32116, 337, 22978, 13, 51022], "temperature": 0.0, "avg_logprob": -0.19506288710094632, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.00016857105947565287}, {"id": 144, "seek": 50240, "start": 515.56, "end": 523.4399999999999, "text": " You just use like the square brackets or the round brackets,", "tokens": [51022, 509, 445, 764, 411, 264, 3732, 26179, 420, 264, 3098, 26179, 11, 51416], "temperature": 0.0, "avg_logprob": -0.19506288710094632, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.00016857105947565287}, {"id": 145, "seek": 50240, "start": 523.4399999999999, "end": 526.1999999999999, "text": " and then you match a sequence.", "tokens": [51416, 293, 550, 291, 2995, 257, 8310, 13, 51554], "temperature": 0.0, "avg_logprob": -0.19506288710094632, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.00016857105947565287}, {"id": 146, "seek": 50240, "start": 526.1999999999999, "end": 530.64, "text": " What's not necessarily intuitive about this is that", "tokens": [51554, 708, 311, 406, 4725, 21769, 466, 341, 307, 300, 51776], "temperature": 0.0, "avg_logprob": -0.19506288710094632, "compression_ratio": 1.52803738317757, "no_speech_prob": 0.00016857105947565287}, {"id": 147, "seek": 53064, "start": 530.68, "end": 535.48, "text": " this actually matches sequences, not just lists or tuples.", "tokens": [50366, 341, 767, 10676, 22978, 11, 406, 445, 14511, 420, 2604, 2622, 13, 50606], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 148, "seek": 53064, "start": 535.48, "end": 540.04, "text": " So, if you write something like, for example, in the tuple notation,", "tokens": [50606, 407, 11, 498, 291, 2464, 746, 411, 11, 337, 1365, 11, 294, 264, 2604, 781, 24657, 11, 50834], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 149, "seek": 53064, "start": 540.04, "end": 544.3199999999999, "text": " and then you pass in a list as an object that gets matched,", "tokens": [50834, 293, 550, 291, 1320, 294, 257, 1329, 382, 364, 2657, 300, 2170, 21447, 11, 51048], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 150, "seek": 53064, "start": 544.3199999999999, "end": 548.16, "text": " the tuple case will still match in your match statement.", "tokens": [51048, 264, 2604, 781, 1389, 486, 920, 2995, 294, 428, 2995, 5629, 13, 51240], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 151, "seek": 53064, "start": 548.16, "end": 549.76, "text": " So, that's a bit like a gutcher.", "tokens": [51240, 407, 11, 300, 311, 257, 857, 411, 257, 5228, 6759, 13, 51320], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 152, "seek": 53064, "start": 549.76, "end": 551.64, "text": " You have to watch out for that.", "tokens": [51320, 509, 362, 281, 1159, 484, 337, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 153, "seek": 53064, "start": 551.64, "end": 552.84, "text": " And it's similar for mappings.", "tokens": [51414, 400, 309, 311, 2531, 337, 463, 28968, 13, 51474], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 154, "seek": 53064, "start": 552.84, "end": 557.64, "text": " For mappings, you write them like the, like a dict kind of notation.", "tokens": [51474, 1171, 463, 28968, 11, 291, 2464, 552, 411, 264, 11, 411, 257, 12569, 733, 295, 24657, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 155, "seek": 53064, "start": 557.64, "end": 560.28, "text": " It actually matches all kinds of mappings,", "tokens": [51714, 467, 767, 10676, 439, 3685, 295, 463, 28968, 11, 51846], "temperature": 0.0, "avg_logprob": -0.1713872253894806, "compression_ratio": 1.7865612648221343, "no_speech_prob": 0.0012238876661285758}, {"id": 156, "seek": 56028, "start": 560.28, "end": 562.28, "text": " not just dictionaries.", "tokens": [50364, 406, 445, 22352, 4889, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 157, "seek": 56028, "start": 562.28, "end": 564.64, "text": " There are ways to, you know, just match dictionaries.", "tokens": [50464, 821, 366, 2098, 281, 11, 291, 458, 11, 445, 2995, 22352, 4889, 13, 50582], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 158, "seek": 56028, "start": 564.64, "end": 566.3199999999999, "text": " I'm going to show them.", "tokens": [50582, 286, 478, 516, 281, 855, 552, 13, 50666], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 159, "seek": 56028, "start": 566.3199999999999, "end": 570.48, "text": " You can also match, like I said, different types.", "tokens": [50666, 509, 393, 611, 2995, 11, 411, 286, 848, 11, 819, 3467, 13, 50874], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 160, "seek": 56028, "start": 570.48, "end": 574.24, "text": " The very, you know, very simple ones are like all the built-in types", "tokens": [50874, 440, 588, 11, 291, 458, 11, 588, 2199, 2306, 366, 411, 439, 264, 3094, 12, 259, 3467, 51062], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 161, "seek": 56028, "start": 574.24, "end": 575.9599999999999, "text": " that you have there.", "tokens": [51062, 300, 291, 362, 456, 13, 51148], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 162, "seek": 56028, "start": 575.9599999999999, "end": 578.72, "text": " You can have support for user-defined classes.", "tokens": [51148, 509, 393, 362, 1406, 337, 4195, 12, 37716, 5359, 13, 51286], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 163, "seek": 56028, "start": 578.72, "end": 581.6, "text": " You have to pay some attention in user-defined classes", "tokens": [51286, 509, 362, 281, 1689, 512, 3202, 294, 4195, 12, 37716, 5359, 51430], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 164, "seek": 56028, "start": 581.6, "end": 585.72, "text": " about the order of the arguments that you have in there.", "tokens": [51430, 466, 264, 1668, 295, 264, 12869, 300, 291, 362, 294, 456, 13, 51636], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 165, "seek": 56028, "start": 585.72, "end": 588.24, "text": " I'm going to talk about that in a bit.", "tokens": [51636, 286, 478, 516, 281, 751, 466, 300, 294, 257, 857, 13, 51762], "temperature": 0.0, "avg_logprob": -0.1232675552368164, "compression_ratio": 1.8559322033898304, "no_speech_prob": 0.00048011995386332273}, {"id": 166, "seek": 58824, "start": 588.24, "end": 590.48, "text": " What's very important are these parentheses.", "tokens": [50364, 708, 311, 588, 1021, 366, 613, 34153, 13, 50476], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 167, "seek": 58824, "start": 590.48, "end": 592.92, "text": " If you don't have parentheses behind this,", "tokens": [50476, 759, 291, 500, 380, 362, 34153, 2261, 341, 11, 50598], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 168, "seek": 58824, "start": 592.92, "end": 596.0, "text": " then the match statement is going to basically treat this,", "tokens": [50598, 550, 264, 2995, 5629, 307, 516, 281, 1936, 2387, 341, 11, 50752], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 169, "seek": 58824, "start": 596.0, "end": 598.52, "text": " the name that you have there as a variable,", "tokens": [50752, 264, 1315, 300, 291, 362, 456, 382, 257, 7006, 11, 50878], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 170, "seek": 58824, "start": 598.52, "end": 600.28, "text": " and very often as a capturing variable.", "tokens": [50878, 293, 588, 2049, 382, 257, 23384, 7006, 13, 50966], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 171, "seek": 58824, "start": 600.28, "end": 602.16, "text": " So that's going to, that's another gutcher", "tokens": [50966, 407, 300, 311, 516, 281, 11, 300, 311, 1071, 5228, 6759, 51060], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 172, "seek": 58824, "start": 602.16, "end": 606.0, "text": " you need to be careful with.", "tokens": [51060, 291, 643, 281, 312, 5026, 365, 13, 51252], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 173, "seek": 58824, "start": 606.0, "end": 608.4, "text": " Of course, you can nest all these things.", "tokens": [51252, 2720, 1164, 11, 291, 393, 15646, 439, 613, 721, 13, 51372], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 174, "seek": 58824, "start": 608.4, "end": 612.36, "text": " You can combine all these things that I just mentioned in various ways.", "tokens": [51372, 509, 393, 10432, 439, 613, 721, 300, 286, 445, 2835, 294, 3683, 2098, 13, 51570], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 175, "seek": 58824, "start": 612.36, "end": 616.4, "text": " There's an OR combination with a pipe character.", "tokens": [51570, 821, 311, 364, 19654, 6562, 365, 257, 11240, 2517, 13, 51772], "temperature": 0.0, "avg_logprob": -0.18989229202270508, "compression_ratio": 1.7547169811320755, "no_speech_prob": 0.00021987334184814245}, {"id": 176, "seek": 61640, "start": 616.4, "end": 618.4399999999999, "text": " And to make things even more complex,", "tokens": [50364, 400, 281, 652, 721, 754, 544, 3997, 11, 50466], "temperature": 0.0, "avg_logprob": -0.14275414735368155, "compression_ratio": 1.7, "no_speech_prob": 0.00043703700066544116}, {"id": 177, "seek": 61640, "start": 618.4399999999999, "end": 623.36, "text": " you can add guards to these match patterns that you have.", "tokens": [50466, 291, 393, 909, 17652, 281, 613, 2995, 8294, 300, 291, 362, 13, 50712], "temperature": 0.0, "avg_logprob": -0.14275414735368155, "compression_ratio": 1.7, "no_speech_prob": 0.00043703700066544116}, {"id": 178, "seek": 61640, "start": 623.36, "end": 625.3199999999999, "text": " So you can say, OK, for example, down here,", "tokens": [50712, 407, 291, 393, 584, 11, 2264, 11, 337, 1365, 11, 760, 510, 11, 50810], "temperature": 0.0, "avg_logprob": -0.14275414735368155, "compression_ratio": 1.7, "no_speech_prob": 0.00043703700066544116}, {"id": 179, "seek": 61640, "start": 625.3199999999999, "end": 628.6, "text": " if you can see that it's a sequence AB,", "tokens": [50810, 498, 291, 393, 536, 300, 309, 311, 257, 8310, 13838, 11, 50974], "temperature": 0.0, "avg_logprob": -0.14275414735368155, "compression_ratio": 1.7, "no_speech_prob": 0.00043703700066544116}, {"id": 180, "seek": 61640, "start": 628.6, "end": 633.3199999999999, "text": " and then this should only match if the value A in that sequence", "tokens": [50974, 293, 550, 341, 820, 787, 2995, 498, 264, 2158, 316, 294, 300, 8310, 51210], "temperature": 0.0, "avg_logprob": -0.14275414735368155, "compression_ratio": 1.7, "no_speech_prob": 0.00043703700066544116}, {"id": 181, "seek": 61640, "start": 633.3199999999999, "end": 636.4, "text": " is above 10.", "tokens": [51210, 307, 3673, 1266, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14275414735368155, "compression_ratio": 1.7, "no_speech_prob": 0.00043703700066544116}, {"id": 182, "seek": 61640, "start": 636.4, "end": 640.56, "text": " So you can write very complex things in those match statements.", "tokens": [51364, 407, 291, 393, 2464, 588, 3997, 721, 294, 729, 2995, 12363, 13, 51572], "temperature": 0.0, "avg_logprob": -0.14275414735368155, "compression_ratio": 1.7, "no_speech_prob": 0.00043703700066544116}, {"id": 183, "seek": 61640, "start": 640.56, "end": 645.68, "text": " And then finally, you have these white-card patterns.", "tokens": [51572, 400, 550, 2721, 11, 291, 362, 613, 2418, 12, 22259, 8294, 13, 51828], "temperature": 0.0, "avg_logprob": -0.14275414735368155, "compression_ratio": 1.7, "no_speech_prob": 0.00043703700066544116}, {"id": 184, "seek": 64568, "start": 645.68, "end": 646.88, "text": " I mentioned those already.", "tokens": [50364, 286, 2835, 729, 1217, 13, 50424], "temperature": 0.0, "avg_logprob": -0.14461933563802845, "compression_ratio": 1.5968379446640317, "no_speech_prob": 0.0001233271905221045}, {"id": 185, "seek": 64568, "start": 646.88, "end": 650.4, "text": " There are two types of these white-card patterns.", "tokens": [50424, 821, 366, 732, 3467, 295, 613, 2418, 12, 22259, 8294, 13, 50600], "temperature": 0.0, "avg_logprob": -0.14461933563802845, "compression_ratio": 1.5968379446640317, "no_speech_prob": 0.0001233271905221045}, {"id": 186, "seek": 64568, "start": 650.4, "end": 656.0799999999999, "text": " One is the anonymous one, a non-binding one, which is the underscore.", "tokens": [50600, 1485, 307, 264, 24932, 472, 11, 257, 2107, 12, 65, 9245, 472, 11, 597, 307, 264, 37556, 13, 50884], "temperature": 0.0, "avg_logprob": -0.14461933563802845, "compression_ratio": 1.5968379446640317, "no_speech_prob": 0.0001233271905221045}, {"id": 187, "seek": 64568, "start": 656.0799999999999, "end": 659.4799999999999, "text": " And the second one is one where you basically put something", "tokens": [50884, 400, 264, 1150, 472, 307, 472, 689, 291, 1936, 829, 746, 51054], "temperature": 0.0, "avg_logprob": -0.14461933563802845, "compression_ratio": 1.5968379446640317, "no_speech_prob": 0.0001233271905221045}, {"id": 188, "seek": 64568, "start": 659.4799999999999, "end": 662.4399999999999, "text": " at the bottom of your match statement,", "tokens": [51054, 412, 264, 2767, 295, 428, 2995, 5629, 11, 51202], "temperature": 0.0, "avg_logprob": -0.14461933563802845, "compression_ratio": 1.5968379446640317, "no_speech_prob": 0.0001233271905221045}, {"id": 189, "seek": 64568, "start": 662.4399999999999, "end": 666.12, "text": " and you just assign a variable to that.", "tokens": [51202, 293, 291, 445, 6269, 257, 7006, 281, 300, 13, 51386], "temperature": 0.0, "avg_logprob": -0.14461933563802845, "compression_ratio": 1.5968379446640317, "no_speech_prob": 0.0001233271905221045}, {"id": 190, "seek": 64568, "start": 666.12, "end": 669.8399999999999, "text": " I often use unknown for this because it just makes sense.", "tokens": [51386, 286, 2049, 764, 9841, 337, 341, 570, 309, 445, 1669, 2020, 13, 51572], "temperature": 0.0, "avg_logprob": -0.14461933563802845, "compression_ratio": 1.5968379446640317, "no_speech_prob": 0.0001233271905221045}, {"id": 191, "seek": 64568, "start": 669.8399999999999, "end": 674.04, "text": " If you read that, it's very, you can easily comprehend that.", "tokens": [51572, 759, 291, 1401, 300, 11, 309, 311, 588, 11, 291, 393, 3612, 38183, 300, 13, 51782], "temperature": 0.0, "avg_logprob": -0.14461933563802845, "compression_ratio": 1.5968379446640317, "no_speech_prob": 0.0001233271905221045}, {"id": 192, "seek": 67404, "start": 674.04, "end": 676.8399999999999, "text": " If you read the code, you can easily understand", "tokens": [50364, 759, 291, 1401, 264, 3089, 11, 291, 393, 3612, 1223, 50504], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 193, "seek": 67404, "start": 676.8399999999999, "end": 680.52, "text": " that this is actually something that matches anything", "tokens": [50504, 300, 341, 307, 767, 746, 300, 10676, 1340, 50688], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 194, "seek": 67404, "start": 680.52, "end": 682.7199999999999, "text": " a bit unlike the underscore.", "tokens": [50688, 257, 857, 8343, 264, 37556, 13, 50798], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 195, "seek": 67404, "start": 682.7199999999999, "end": 686.56, "text": " I'm not too much of a fan of this underscore thing.", "tokens": [50798, 286, 478, 406, 886, 709, 295, 257, 3429, 295, 341, 37556, 551, 13, 50990], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 196, "seek": 67404, "start": 686.56, "end": 691.36, "text": " Right, so now let's have a look at the capturing variables.", "tokens": [50990, 1779, 11, 370, 586, 718, 311, 362, 257, 574, 412, 264, 23384, 9102, 13, 51230], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 197, "seek": 67404, "start": 691.36, "end": 692.76, "text": " Like I mentioned in the beginning,", "tokens": [51230, 1743, 286, 2835, 294, 264, 2863, 11, 51300], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 198, "seek": 67404, "start": 692.76, "end": 694.28, "text": " the nice thing about the match statement", "tokens": [51300, 264, 1481, 551, 466, 264, 2995, 5629, 51376], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 199, "seek": 67404, "start": 694.28, "end": 698.12, "text": " is that you can actually combine the matching and the parsing.", "tokens": [51376, 307, 300, 291, 393, 767, 10432, 264, 14324, 293, 264, 21156, 278, 13, 51568], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 200, "seek": 67404, "start": 698.12, "end": 701.52, "text": " So whenever something matches, Python", "tokens": [51568, 407, 5699, 746, 10676, 11, 15329, 51738], "temperature": 0.0, "avg_logprob": -0.16004740274869478, "compression_ratio": 1.7385892116182573, "no_speech_prob": 0.00024917081464082}, {"id": 201, "seek": 70152, "start": 701.52, "end": 705.56, "text": " will put the matched value into a variable that you define,", "tokens": [50364, 486, 829, 264, 21447, 2158, 666, 257, 7006, 300, 291, 6964, 11, 50566], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 202, "seek": 70152, "start": 705.56, "end": 708.72, "text": " which is very much like, for example, the ass notation", "tokens": [50566, 597, 307, 588, 709, 411, 11, 337, 1365, 11, 264, 1256, 24657, 50724], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 203, "seek": 70152, "start": 708.72, "end": 711.4, "text": " that you have with context managers.", "tokens": [50724, 300, 291, 362, 365, 4319, 14084, 13, 50858], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 204, "seek": 70152, "start": 711.4, "end": 712.68, "text": " There are two forms for this.", "tokens": [50858, 821, 366, 732, 6422, 337, 341, 13, 50922], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 205, "seek": 70152, "start": 712.68, "end": 713.96, "text": " One is an explicit form.", "tokens": [50922, 1485, 307, 364, 13691, 1254, 13, 50986], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 206, "seek": 70152, "start": 713.96, "end": 716.84, "text": " So I put an example here.", "tokens": [50986, 407, 286, 829, 364, 1365, 510, 13, 51130], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 207, "seek": 70152, "start": 716.84, "end": 720.04, "text": " So what happens is it matches a list.", "tokens": [51130, 407, 437, 2314, 307, 309, 10676, 257, 1329, 13, 51290], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 208, "seek": 70152, "start": 720.04, "end": 722.68, "text": " And then if the list type matches,", "tokens": [51290, 400, 550, 498, 264, 1329, 2010, 10676, 11, 51422], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 209, "seek": 70152, "start": 722.68, "end": 726.36, "text": " it will put the value into the variable sublist.", "tokens": [51422, 309, 486, 829, 264, 2158, 666, 264, 7006, 1422, 8264, 13, 51606], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 210, "seek": 70152, "start": 726.36, "end": 730.4, "text": " And then you can use that variable in your other matching code", "tokens": [51606, 400, 550, 291, 393, 764, 300, 7006, 294, 428, 661, 14324, 3089, 51808], "temperature": 0.0, "avg_logprob": -0.12857832106868777, "compression_ratio": 1.774468085106383, "no_speech_prob": 0.0016480758786201477}, {"id": 211, "seek": 73040, "start": 730.4, "end": 733.28, "text": " that you have or in the actual code", "tokens": [50364, 300, 291, 362, 420, 294, 264, 3539, 3089, 50508], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 212, "seek": 73040, "start": 733.28, "end": 736.76, "text": " that you want executed for that particular case.", "tokens": [50508, 300, 291, 528, 17577, 337, 300, 1729, 1389, 13, 50682], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 213, "seek": 73040, "start": 736.76, "end": 738.16, "text": " Very easy to understand.", "tokens": [50682, 4372, 1858, 281, 1223, 13, 50752], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 214, "seek": 73040, "start": 738.16, "end": 742.6, "text": " It's a bit more verbose, but it always works, which is nice.", "tokens": [50752, 467, 311, 257, 857, 544, 9595, 541, 11, 457, 309, 1009, 1985, 11, 597, 307, 1481, 13, 50974], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 215, "seek": 73040, "start": 742.6, "end": 745.52, "text": " And then there's an implicit form.", "tokens": [50974, 400, 550, 456, 311, 364, 26947, 1254, 13, 51120], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 216, "seek": 73040, "start": 745.52, "end": 749.0, "text": " This can cause some problems because it introduces", "tokens": [51120, 639, 393, 3082, 512, 2740, 570, 309, 31472, 51294], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 217, "seek": 73040, "start": 749.0, "end": 751.24, "text": " some of these gotchas.", "tokens": [51294, 512, 295, 613, 658, 41299, 13, 51406], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 218, "seek": 73040, "start": 751.24, "end": 753.4399999999999, "text": " The way that this works is that instead of putting", "tokens": [51406, 440, 636, 300, 341, 1985, 307, 300, 2602, 295, 3372, 51516], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 219, "seek": 73040, "start": 753.4399999999999, "end": 757.28, "text": " literals in these, for example, sequence notations", "tokens": [51516, 2733, 1124, 294, 613, 11, 337, 1365, 11, 8310, 406, 763, 51708], "temperature": 0.0, "avg_logprob": -0.12507940741146312, "compression_ratio": 1.594142259414226, "no_speech_prob": 0.00037395855179056525}, {"id": 220, "seek": 75728, "start": 757.3199999999999, "end": 760.8399999999999, "text": " or mapping notations, you put variables in there.", "tokens": [50366, 420, 18350, 406, 763, 11, 291, 829, 9102, 294, 456, 13, 50542], "temperature": 0.0, "avg_logprob": -0.1569511523613563, "compression_ratio": 1.841860465116279, "no_speech_prob": 0.00018520301091484725}, {"id": 221, "seek": 75728, "start": 760.8399999999999, "end": 764.52, "text": " And what happens there is that implicitly, for example,", "tokens": [50542, 400, 437, 2314, 456, 307, 300, 26947, 356, 11, 337, 1365, 11, 50726], "temperature": 0.0, "avg_logprob": -0.1569511523613563, "compression_ratio": 1.841860465116279, "no_speech_prob": 0.00018520301091484725}, {"id": 222, "seek": 75728, "start": 764.52, "end": 768.9599999999999, "text": " in the first example up there, the first entry", "tokens": [50726, 294, 264, 700, 1365, 493, 456, 11, 264, 700, 8729, 50948], "temperature": 0.0, "avg_logprob": -0.1569511523613563, "compression_ratio": 1.841860465116279, "no_speech_prob": 0.00018520301091484725}, {"id": 223, "seek": 75728, "start": 768.9599999999999, "end": 772.3199999999999, "text": " in that sequence will go into A, and the second entry", "tokens": [50948, 294, 300, 8310, 486, 352, 666, 316, 11, 293, 264, 1150, 8729, 51116], "temperature": 0.0, "avg_logprob": -0.1569511523613563, "compression_ratio": 1.841860465116279, "no_speech_prob": 0.00018520301091484725}, {"id": 224, "seek": 75728, "start": 772.3199999999999, "end": 775.52, "text": " will go into B. And then you can immediately use A and B,", "tokens": [51116, 486, 352, 666, 363, 13, 400, 550, 291, 393, 4258, 764, 316, 293, 363, 11, 51276], "temperature": 0.0, "avg_logprob": -0.1569511523613563, "compression_ratio": 1.841860465116279, "no_speech_prob": 0.00018520301091484725}, {"id": 225, "seek": 75728, "start": 775.52, "end": 778.1999999999999, "text": " for example, in guards that you have on the code that", "tokens": [51276, 337, 1365, 11, 294, 17652, 300, 291, 362, 322, 264, 3089, 300, 51410], "temperature": 0.0, "avg_logprob": -0.1569511523613563, "compression_ratio": 1.841860465116279, "no_speech_prob": 0.00018520301091484725}, {"id": 226, "seek": 75728, "start": 778.1999999999999, "end": 780.0, "text": " comes afterwards.", "tokens": [51410, 1487, 10543, 13, 51500], "temperature": 0.0, "avg_logprob": -0.1569511523613563, "compression_ratio": 1.841860465116279, "no_speech_prob": 0.00018520301091484725}, {"id": 227, "seek": 75728, "start": 780.0, "end": 785.6, "text": " And these things are actually bound variables in your code.", "tokens": [51500, 400, 613, 721, 366, 767, 5472, 9102, 294, 428, 3089, 13, 51780], "temperature": 0.0, "avg_logprob": -0.1569511523613563, "compression_ratio": 1.841860465116279, "no_speech_prob": 0.00018520301091484725}, {"id": 228, "seek": 78560, "start": 785.6, "end": 789.48, "text": " This works very well if you have well-defined variable names.", "tokens": [50364, 639, 1985, 588, 731, 498, 291, 362, 731, 12, 37716, 7006, 5288, 13, 50558], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 229, "seek": 78560, "start": 789.48, "end": 792.28, "text": " If you don't, you can get into lots of trouble.", "tokens": [50558, 759, 291, 500, 380, 11, 291, 393, 483, 666, 3195, 295, 5253, 13, 50698], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 230, "seek": 78560, "start": 792.28, "end": 795.88, "text": " So using short names is probably not a good idea.", "tokens": [50698, 407, 1228, 2099, 5288, 307, 1391, 406, 257, 665, 1558, 13, 50878], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 231, "seek": 78560, "start": 795.88, "end": 799.6, "text": " They should be very explicit.", "tokens": [50878, 814, 820, 312, 588, 13691, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 232, "seek": 78560, "start": 799.6, "end": 801.84, "text": " This does also work with some of the built-in types,", "tokens": [51064, 639, 775, 611, 589, 365, 512, 295, 264, 3094, 12, 259, 3467, 11, 51176], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 233, "seek": 78560, "start": 801.84, "end": 802.84, "text": " not all of them.", "tokens": [51176, 406, 439, 295, 552, 13, 51226], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 234, "seek": 78560, "start": 802.84, "end": 805.0400000000001, "text": " So there is a, I think this is actually", "tokens": [51226, 407, 456, 307, 257, 11, 286, 519, 341, 307, 767, 51336], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 235, "seek": 78560, "start": 805.0400000000001, "end": 809.24, "text": " a full list of all of the ones that support this.", "tokens": [51336, 257, 1577, 1329, 295, 439, 295, 264, 2306, 300, 1406, 341, 13, 51546], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 236, "seek": 78560, "start": 809.24, "end": 812.52, "text": " It does work with classes that you define,", "tokens": [51546, 467, 775, 589, 365, 5359, 300, 291, 6964, 11, 51710], "temperature": 0.0, "avg_logprob": -0.10602314983095441, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.00017671106616035104}, {"id": 237, "seek": 81252, "start": 812.52, "end": 815.92, "text": " but you need to have a look at this pep for the details.", "tokens": [50364, 457, 291, 643, 281, 362, 257, 574, 412, 341, 520, 79, 337, 264, 4365, 13, 50534], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 238, "seek": 81252, "start": 815.92, "end": 818.1999999999999, "text": " There are some special attributes", "tokens": [50534, 821, 366, 512, 2121, 17212, 50648], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 239, "seek": 81252, "start": 818.1999999999999, "end": 820.16, "text": " that you have to define in order for the parser", "tokens": [50648, 300, 291, 362, 281, 6964, 294, 1668, 337, 264, 21156, 260, 50746], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 240, "seek": 81252, "start": 820.16, "end": 824.4399999999999, "text": " to know in which kind of order these variables should", "tokens": [50746, 281, 458, 294, 597, 733, 295, 1668, 613, 9102, 820, 50960], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 241, "seek": 81252, "start": 824.4399999999999, "end": 826.52, "text": " be assigned.", "tokens": [50960, 312, 13279, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 242, "seek": 81252, "start": 826.52, "end": 829.56, "text": " Unfortunately, it doesn't work with ABCs,", "tokens": [51064, 8590, 11, 309, 1177, 380, 589, 365, 22342, 82, 11, 51216], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 243, "seek": 81252, "start": 829.56, "end": 831.4, "text": " but there are workarounds for that.", "tokens": [51216, 457, 456, 366, 589, 289, 4432, 337, 300, 13, 51308], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 244, "seek": 81252, "start": 831.4, "end": 833.48, "text": " So if you work with ABCs, for example,", "tokens": [51308, 407, 498, 291, 589, 365, 22342, 82, 11, 337, 1365, 11, 51412], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 245, "seek": 81252, "start": 833.48, "end": 837.36, "text": " if you want to test whether something is a float or an int,", "tokens": [51412, 498, 291, 528, 281, 1500, 1968, 746, 307, 257, 15706, 420, 364, 560, 11, 51606], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 246, "seek": 81252, "start": 837.36, "end": 839.68, "text": " and you want to put that kind of logic into an ABC,", "tokens": [51606, 293, 291, 528, 281, 829, 300, 733, 295, 9952, 666, 364, 22342, 11, 51722], "temperature": 0.0, "avg_logprob": -0.11988479335133623, "compression_ratio": 1.6953125, "no_speech_prob": 0.0001880262716440484}, {"id": 247, "seek": 83968, "start": 839.68, "end": 843.9599999999999, "text": " then there are ways to still make that happen.", "tokens": [50364, 550, 456, 366, 2098, 281, 920, 652, 300, 1051, 13, 50578], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 248, "seek": 83968, "start": 843.9599999999999, "end": 847.0, "text": " There are some things that don't work with the match statement.", "tokens": [50578, 821, 366, 512, 721, 300, 500, 380, 589, 365, 264, 2995, 5629, 13, 50730], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 249, "seek": 83968, "start": 847.0, "end": 850.04, "text": " Some are a bit unfortunate, because, for example,", "tokens": [50730, 2188, 366, 257, 857, 17843, 11, 570, 11, 337, 1365, 11, 50882], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 250, "seek": 83968, "start": 850.04, "end": 854.5999999999999, "text": " if you use a scripting shell language, like bash,", "tokens": [50882, 498, 291, 764, 257, 5755, 278, 8720, 2856, 11, 411, 46183, 11, 51110], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 251, "seek": 83968, "start": 854.5999999999999, "end": 858.3199999999999, "text": " for example, a very, very common use case for matching", "tokens": [51110, 337, 1365, 11, 257, 588, 11, 588, 2689, 764, 1389, 337, 14324, 51296], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 252, "seek": 83968, "start": 858.3199999999999, "end": 859.4799999999999, "text": " is regular expressions.", "tokens": [51296, 307, 3890, 15277, 13, 51354], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 253, "seek": 83968, "start": 859.4799999999999, "end": 862.04, "text": " So basically, you have a case, and then you", "tokens": [51354, 407, 1936, 11, 291, 362, 257, 1389, 11, 293, 550, 291, 51482], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 254, "seek": 83968, "start": 862.04, "end": 864.16, "text": " put a regular expression there to match", "tokens": [51482, 829, 257, 3890, 6114, 456, 281, 2995, 51588], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 255, "seek": 83968, "start": 864.16, "end": 866.92, "text": " a particular regular expression, kind of like how", "tokens": [51588, 257, 1729, 3890, 6114, 11, 733, 295, 411, 577, 51726], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 256, "seek": 83968, "start": 866.92, "end": 869.04, "text": " the string should look like.", "tokens": [51726, 264, 6798, 820, 574, 411, 13, 51832], "temperature": 0.0, "avg_logprob": -0.17624815916403747, "compression_ratio": 1.8152610441767068, "no_speech_prob": 0.0002912436902988702}, {"id": 257, "seek": 86904, "start": 869.04, "end": 871.52, "text": " This is not supported directly.", "tokens": [50364, 639, 307, 406, 8104, 3838, 13, 50488], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 258, "seek": 86904, "start": 871.52, "end": 873.28, "text": " There are ways to work around this.", "tokens": [50488, 821, 366, 2098, 281, 589, 926, 341, 13, 50576], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 259, "seek": 86904, "start": 873.28, "end": 874.9599999999999, "text": " I'm going to show you a reference later on,", "tokens": [50576, 286, 478, 516, 281, 855, 291, 257, 6408, 1780, 322, 11, 50660], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 260, "seek": 86904, "start": 874.9599999999999, "end": 879.8, "text": " where you can basically find how to do this.", "tokens": [50660, 689, 291, 393, 1936, 915, 577, 281, 360, 341, 13, 50902], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 261, "seek": 86904, "start": 879.8, "end": 883.5999999999999, "text": " Something else that doesn't work well is a set member matching.", "tokens": [50902, 6595, 1646, 300, 1177, 380, 589, 731, 307, 257, 992, 4006, 14324, 13, 51092], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 262, "seek": 86904, "start": 883.5999999999999, "end": 886.16, "text": " There are ways, again, to work around this.", "tokens": [51092, 821, 366, 2098, 11, 797, 11, 281, 589, 926, 341, 13, 51220], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 263, "seek": 86904, "start": 886.16, "end": 891.64, "text": " You can use a guard to kind of do this set matching.", "tokens": [51220, 509, 393, 764, 257, 6290, 281, 733, 295, 360, 341, 992, 14324, 13, 51494], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 264, "seek": 86904, "start": 891.64, "end": 894.7199999999999, "text": " So the guard works by having the wild card,", "tokens": [51494, 407, 264, 6290, 1985, 538, 1419, 264, 4868, 2920, 11, 51648], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 265, "seek": 86904, "start": 894.7199999999999, "end": 895.8, "text": " so it always matches.", "tokens": [51648, 370, 309, 1009, 10676, 13, 51702], "temperature": 0.0, "avg_logprob": -0.20180482953508325, "compression_ratio": 1.7174887892376682, "no_speech_prob": 0.00019103878003079444}, {"id": 266, "seek": 89580, "start": 895.8, "end": 900.3599999999999, "text": " And then it uses the guard to do the actual check", "tokens": [50364, 400, 550, 309, 4960, 264, 6290, 281, 360, 264, 3539, 1520, 50592], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 267, "seek": 89580, "start": 900.3599999999999, "end": 902.0799999999999, "text": " whether something is in a value set,", "tokens": [50592, 1968, 746, 307, 294, 257, 2158, 992, 11, 50678], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 268, "seek": 89580, "start": 902.0799999999999, "end": 903.7199999999999, "text": " or you can use the OR pattern.", "tokens": [50678, 420, 291, 393, 764, 264, 19654, 5102, 13, 50760], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 269, "seek": 89580, "start": 903.7199999999999, "end": 905.16, "text": " But the OR pattern is sequential,", "tokens": [50760, 583, 264, 19654, 5102, 307, 42881, 11, 50832], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 270, "seek": 89580, "start": 905.16, "end": 908.12, "text": " so it's not really efficient.", "tokens": [50832, 370, 309, 311, 406, 534, 7148, 13, 50980], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 271, "seek": 89580, "start": 908.12, "end": 910.1999999999999, "text": " Optimizations haven't been done yet,", "tokens": [50980, 35013, 14455, 2378, 380, 668, 1096, 1939, 11, 51084], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 272, "seek": 89580, "start": 910.1999999999999, "end": 912.9599999999999, "text": " which is a very common theme that you always have in Python.", "tokens": [51084, 597, 307, 257, 588, 2689, 6314, 300, 291, 1009, 362, 294, 15329, 13, 51222], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 273, "seek": 89580, "start": 912.9599999999999, "end": 915.0799999999999, "text": " First, something gets implemented", "tokens": [51222, 2386, 11, 746, 2170, 12270, 51328], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 274, "seek": 89580, "start": 915.0799999999999, "end": 917.04, "text": " to have something to work with.", "tokens": [51328, 281, 362, 746, 281, 589, 365, 13, 51426], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 275, "seek": 89580, "start": 917.04, "end": 920.3599999999999, "text": " And then, in the next couple of releases,", "tokens": [51426, 400, 550, 11, 294, 264, 958, 1916, 295, 16952, 11, 51592], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 276, "seek": 89580, "start": 920.3599999999999, "end": 923.4, "text": " people then worry about performance and add better", "tokens": [51592, 561, 550, 3292, 466, 3389, 293, 909, 1101, 51744], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 277, "seek": 89580, "start": 923.4, "end": 924.0799999999999, "text": " performance.", "tokens": [51744, 3389, 13, 51778], "temperature": 0.0, "avg_logprob": -0.14897894859313965, "compression_ratio": 1.6580882352941178, "no_speech_prob": 0.000635871256235987}, {"id": 278, "seek": 92408, "start": 924.08, "end": 927.76, "text": " So that has happened a lot in Python in the history.", "tokens": [50364, 407, 300, 575, 2011, 257, 688, 294, 15329, 294, 264, 2503, 13, 50548], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 279, "seek": 92408, "start": 927.76, "end": 931.88, "text": " It's probably going to happen for this as well.", "tokens": [50548, 467, 311, 1391, 516, 281, 1051, 337, 341, 382, 731, 13, 50754], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 280, "seek": 92408, "start": 931.88, "end": 933.6800000000001, "text": " So I talked a bit about the guard trust.", "tokens": [50754, 407, 286, 2825, 257, 857, 466, 264, 6290, 3361, 13, 50844], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 281, "seek": 92408, "start": 933.6800000000001, "end": 936.6800000000001, "text": " I just want to reiterate some of them.", "tokens": [50844, 286, 445, 528, 281, 33528, 512, 295, 552, 13, 50994], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 282, "seek": 92408, "start": 936.6800000000001, "end": 939.44, "text": " This I already mentioned.", "tokens": [50994, 639, 286, 1217, 2835, 13, 51132], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 283, "seek": 92408, "start": 939.44, "end": 943.36, "text": " If you use the tuple notation or the list notation,", "tokens": [51132, 759, 291, 764, 264, 2604, 781, 24657, 420, 264, 1329, 24657, 11, 51328], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 284, "seek": 92408, "start": 943.36, "end": 946.5200000000001, "text": " and you think that, OK, this is just", "tokens": [51328, 293, 291, 519, 300, 11, 2264, 11, 341, 307, 445, 51486], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 285, "seek": 92408, "start": 946.5200000000001, "end": 949.4000000000001, "text": " going to match a tuple or just a list,", "tokens": [51486, 516, 281, 2995, 257, 2604, 781, 420, 445, 257, 1329, 11, 51630], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 286, "seek": 92408, "start": 949.4000000000001, "end": 950.84, "text": " you can easily get this wrong.", "tokens": [51630, 291, 393, 3612, 483, 341, 2085, 13, 51702], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 287, "seek": 92408, "start": 950.84, "end": 953.12, "text": " So if you want to do this explicitly,", "tokens": [51702, 407, 498, 291, 528, 281, 360, 341, 20803, 11, 51816], "temperature": 0.0, "avg_logprob": -0.16915340746863414, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.00045089106424711645}, {"id": 288, "seek": 95312, "start": 953.12, "end": 956.8, "text": " then you actually have to use the type notation for this.", "tokens": [50364, 550, 291, 767, 362, 281, 764, 264, 2010, 24657, 337, 341, 13, 50548], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 289, "seek": 95312, "start": 956.8, "end": 959.16, "text": " So you have to write list or tuple,", "tokens": [50548, 407, 291, 362, 281, 2464, 1329, 420, 2604, 781, 11, 50666], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 290, "seek": 95312, "start": 959.16, "end": 963.0, "text": " and then the sequence that you want to match.", "tokens": [50666, 293, 550, 264, 8310, 300, 291, 528, 281, 2995, 13, 50858], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 291, "seek": 95312, "start": 963.0, "end": 965.68, "text": " The same issue you have with the mapping types.", "tokens": [50858, 440, 912, 2734, 291, 362, 365, 264, 18350, 3467, 13, 50992], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 292, "seek": 95312, "start": 965.68, "end": 970.12, "text": " So you have to pay attention to that as well.", "tokens": [50992, 407, 291, 362, 281, 1689, 3202, 281, 300, 382, 731, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 293, "seek": 95312, "start": 970.12, "end": 972.08, "text": " Another gotcha is the wildcard pattern.", "tokens": [51214, 3996, 658, 4413, 307, 264, 4868, 22259, 5102, 13, 51312], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 294, "seek": 95312, "start": 972.08, "end": 975.8, "text": " So you can only use the wildcard pattern", "tokens": [51312, 407, 291, 393, 787, 764, 264, 4868, 22259, 5102, 51498], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 295, "seek": 95312, "start": 975.8, "end": 979.32, "text": " at the very end of the list if you put something up", "tokens": [51498, 412, 264, 588, 917, 295, 264, 1329, 498, 291, 829, 746, 493, 51674], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 296, "seek": 95312, "start": 979.32, "end": 980.32, "text": " at the top of the list.", "tokens": [51674, 412, 264, 1192, 295, 264, 1329, 13, 51724], "temperature": 0.0, "avg_logprob": -0.14305332357233222, "compression_ratio": 1.8309859154929577, "no_speech_prob": 3.372816354385577e-05}, {"id": 297, "seek": 98032, "start": 980.32, "end": 983.9200000000001, "text": " For example, if you start with case and then wrong values,", "tokens": [50364, 1171, 1365, 11, 498, 291, 722, 365, 1389, 293, 550, 2085, 4190, 11, 50544], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 298, "seek": 98032, "start": 983.9200000000001, "end": 986.7600000000001, "text": " because wrong values is a capturing variable,", "tokens": [50544, 570, 2085, 4190, 307, 257, 23384, 7006, 11, 50686], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 299, "seek": 98032, "start": 986.7600000000001, "end": 989.6, "text": " it's regarded as a wildcard case.", "tokens": [50686, 309, 311, 26047, 382, 257, 4868, 22259, 1389, 13, 50828], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 300, "seek": 98032, "start": 989.6, "end": 991.48, "text": " And so it will match anything.", "tokens": [50828, 400, 370, 309, 486, 2995, 1340, 13, 50922], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 301, "seek": 98032, "start": 991.48, "end": 994.0400000000001, "text": " And the parser will actually complain about this.", "tokens": [50922, 400, 264, 21156, 260, 486, 767, 11024, 466, 341, 13, 51050], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 302, "seek": 98032, "start": 994.0400000000001, "end": 996.5200000000001, "text": " So this is not valid Python.", "tokens": [51050, 407, 341, 307, 406, 7363, 15329, 13, 51174], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 303, "seek": 98032, "start": 996.5200000000001, "end": 1003.2, "text": " However, if you put a guard with it, then you can use it.", "tokens": [51174, 2908, 11, 498, 291, 829, 257, 6290, 365, 309, 11, 550, 291, 393, 764, 309, 13, 51508], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 304, "seek": 98032, "start": 1003.2, "end": 1007.44, "text": " Which is probably in order to make certain workarounds", "tokens": [51508, 3013, 307, 1391, 294, 1668, 281, 652, 1629, 589, 289, 4432, 51720], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 305, "seek": 98032, "start": 1007.44, "end": 1008.0, "text": " possible.", "tokens": [51720, 1944, 13, 51748], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 306, "seek": 98032, "start": 1008.0, "end": 1009.96, "text": " I don't really know what the reason is", "tokens": [51748, 286, 500, 380, 534, 458, 437, 264, 1778, 307, 51846], "temperature": 0.0, "avg_logprob": -0.16025148358261376, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.0006458151037804782}, {"id": 307, "seek": 100996, "start": 1009.96, "end": 1011.12, "text": " why this works.", "tokens": [50364, 983, 341, 1985, 13, 50422], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 308, "seek": 100996, "start": 1011.12, "end": 1013.76, "text": " It's a bit strange.", "tokens": [50422, 467, 311, 257, 857, 5861, 13, 50554], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 309, "seek": 100996, "start": 1013.76, "end": 1016.2800000000001, "text": " And then the parentheses.", "tokens": [50554, 400, 550, 264, 34153, 13, 50680], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 310, "seek": 100996, "start": 1016.2800000000001, "end": 1022.08, "text": " If you look at this code, if I wouldn't have put an error there,", "tokens": [50680, 759, 291, 574, 412, 341, 3089, 11, 498, 286, 2759, 380, 362, 829, 364, 6713, 456, 11, 50970], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 311, "seek": 100996, "start": 1022.08, "end": 1025.32, "text": " you probably wouldn't have seen this.", "tokens": [50970, 291, 1391, 2759, 380, 362, 1612, 341, 13, 51132], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 312, "seek": 100996, "start": 1025.32, "end": 1027.52, "text": " What I did there is I put a dict there,", "tokens": [51132, 708, 286, 630, 456, 307, 286, 829, 257, 12569, 456, 11, 51242], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 313, "seek": 100996, "start": 1027.52, "end": 1032.16, "text": " meaning that I want properties to have a dict,", "tokens": [51242, 3620, 300, 286, 528, 7221, 281, 362, 257, 12569, 11, 51474], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 314, "seek": 100996, "start": 1032.16, "end": 1034.24, "text": " like a dictionary value.", "tokens": [51474, 411, 257, 25890, 2158, 13, 51578], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 315, "seek": 100996, "start": 1034.24, "end": 1036.4, "text": " And they want to match that.", "tokens": [51578, 400, 436, 528, 281, 2995, 300, 13, 51686], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 316, "seek": 100996, "start": 1036.4, "end": 1037.64, "text": " But I forgot the parentheses.", "tokens": [51686, 583, 286, 5298, 264, 34153, 13, 51748], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 317, "seek": 100996, "start": 1037.64, "end": 1039.48, "text": " So what's going to happen is the parser", "tokens": [51748, 407, 437, 311, 516, 281, 1051, 307, 264, 21156, 260, 51840], "temperature": 0.0, "avg_logprob": -0.18916145257190264, "compression_ratio": 1.7201834862385321, "no_speech_prob": 0.0007667276076972485}, {"id": 318, "seek": 103948, "start": 1039.48, "end": 1042.64, "text": " is going to regard this as a binding, sorry, capturing", "tokens": [50364, 307, 516, 281, 3843, 341, 382, 257, 17359, 11, 2597, 11, 23384, 50522], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 319, "seek": 103948, "start": 1042.64, "end": 1043.72, "text": " variable.", "tokens": [50522, 7006, 13, 50576], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 320, "seek": 103948, "start": 1043.72, "end": 1046.3600000000001, "text": " So it's going to put the value into a dict.", "tokens": [50576, 407, 309, 311, 516, 281, 829, 264, 2158, 666, 257, 12569, 13, 50708], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 321, "seek": 103948, "start": 1046.3600000000001, "end": 1050.28, "text": " And then it's not only going to not parse correctly,", "tokens": [50708, 400, 550, 309, 311, 406, 787, 516, 281, 406, 48377, 8944, 11, 50904], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 322, "seek": 103948, "start": 1050.28, "end": 1052.6, "text": " because it will just put any kind of value", "tokens": [50904, 570, 309, 486, 445, 829, 604, 733, 295, 2158, 51020], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 323, "seek": 103948, "start": 1052.6, "end": 1055.92, "text": " that you have there into this dict capturing variable.", "tokens": [51020, 300, 291, 362, 456, 666, 341, 12569, 23384, 7006, 13, 51186], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 324, "seek": 103948, "start": 1055.92, "end": 1058.1200000000001, "text": " But it will also bind dict to this value", "tokens": [51186, 583, 309, 486, 611, 14786, 12569, 281, 341, 2158, 51296], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 325, "seek": 103948, "start": 1058.1200000000001, "end": 1060.76, "text": " that you have in there, possibly breaking code that", "tokens": [51296, 300, 291, 362, 294, 456, 11, 6264, 7697, 3089, 300, 51428], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 326, "seek": 103948, "start": 1060.76, "end": 1063.8, "text": " comes afterwards, because you can no longer access", "tokens": [51428, 1487, 10543, 11, 570, 291, 393, 572, 2854, 2105, 51580], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 327, "seek": 103948, "start": 1063.8, "end": 1065.44, "text": " the built-in dict.", "tokens": [51580, 264, 3094, 12, 259, 12569, 13, 51662], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 328, "seek": 103948, "start": 1065.44, "end": 1068.72, "text": " So this is something to watch out for.", "tokens": [51662, 407, 341, 307, 746, 281, 1159, 484, 337, 13, 51826], "temperature": 0.0, "avg_logprob": -0.15702698307652627, "compression_ratio": 1.8514056224899598, "no_speech_prob": 0.00026938930386677384}, {"id": 329, "seek": 106872, "start": 1068.72, "end": 1072.4, "text": " And finally, this is the talk that I wanted to mention.", "tokens": [50364, 400, 2721, 11, 341, 307, 264, 751, 300, 286, 1415, 281, 2152, 13, 50548], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 330, "seek": 106872, "start": 1072.4, "end": 1073.72, "text": " Raymond Hettinger.", "tokens": [50548, 42813, 389, 3093, 6911, 13, 50614], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 331, "seek": 106872, "start": 1073.72, "end": 1076.72, "text": " Who knows, Raymond Hettinger?", "tokens": [50614, 2102, 3255, 11, 42813, 389, 3093, 6911, 30, 50764], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 332, "seek": 106872, "start": 1076.72, "end": 1077.72, "text": " Not that many people.", "tokens": [50764, 1726, 300, 867, 561, 13, 50814], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 333, "seek": 106872, "start": 1077.72, "end": 1079.32, "text": " That's strange.", "tokens": [50814, 663, 311, 5861, 13, 50894], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 334, "seek": 106872, "start": 1079.32, "end": 1080.6000000000001, "text": " You should definitely look him up.", "tokens": [50894, 509, 820, 2138, 574, 796, 493, 13, 50958], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 335, "seek": 106872, "start": 1080.6000000000001, "end": 1083.4, "text": " I mean, he has done so many good talks.", "tokens": [50958, 286, 914, 11, 415, 575, 1096, 370, 867, 665, 6686, 13, 51098], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 336, "seek": 106872, "start": 1083.4, "end": 1085.92, "text": " It's just incredible.", "tokens": [51098, 467, 311, 445, 4651, 13, 51224], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 337, "seek": 106872, "start": 1085.92, "end": 1088.8, "text": " I mean, if you want to learn something deep about how", "tokens": [51224, 286, 914, 11, 498, 291, 528, 281, 1466, 746, 2452, 466, 577, 51368], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 338, "seek": 106872, "start": 1088.8, "end": 1092.88, "text": " Python works, he has all the talks in his stack.", "tokens": [51368, 15329, 1985, 11, 415, 575, 439, 264, 6686, 294, 702, 8630, 13, 51572], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 339, "seek": 106872, "start": 1092.88, "end": 1094.8, "text": " So definitely have a look at that.", "tokens": [51572, 407, 2138, 362, 257, 574, 412, 300, 13, 51668], "temperature": 0.0, "avg_logprob": -0.17282887508994654, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.00043017682037316263}, {"id": 340, "seek": 109480, "start": 1094.8, "end": 1098.84, "text": " He did a great talk at PyCon Italia 2022,", "tokens": [50364, 634, 630, 257, 869, 751, 412, 9953, 9838, 41355, 20229, 11, 50566], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 341, "seek": 109480, "start": 1098.84, "end": 1101.32, "text": " also on the pattern matching.", "tokens": [50566, 611, 322, 264, 5102, 14324, 13, 50690], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 342, "seek": 109480, "start": 1101.32, "end": 1103.8, "text": " And he shows a lot of tricks on how", "tokens": [50690, 400, 415, 3110, 257, 688, 295, 11733, 322, 577, 50814], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 343, "seek": 109480, "start": 1103.8, "end": 1105.76, "text": " to work some of the deficiencies that you currently", "tokens": [50814, 281, 589, 512, 295, 264, 19248, 31294, 300, 291, 4362, 50912], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 344, "seek": 109480, "start": 1105.76, "end": 1107.9199999999998, "text": " have in the match statement.", "tokens": [50912, 362, 294, 264, 2995, 5629, 13, 51020], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 345, "seek": 109480, "start": 1107.9199999999998, "end": 1111.3999999999999, "text": " So I was actually faster than I thought.", "tokens": [51020, 407, 286, 390, 767, 4663, 813, 286, 1194, 13, 51194], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 346, "seek": 109480, "start": 1111.3999999999999, "end": 1114.28, "text": " So I'm done.", "tokens": [51194, 407, 286, 478, 1096, 13, 51338], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 347, "seek": 109480, "start": 1114.28, "end": 1116.48, "text": " So yeah, this is always my last slide.", "tokens": [51338, 407, 1338, 11, 341, 307, 1009, 452, 1036, 4137, 13, 51448], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 348, "seek": 109480, "start": 1116.48, "end": 1117.52, "text": " Never stop to learn.", "tokens": [51448, 7344, 1590, 281, 1466, 13, 51500], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 349, "seek": 109480, "start": 1117.52, "end": 1118.56, "text": " Always learn new things.", "tokens": [51500, 11270, 1466, 777, 721, 13, 51552], "temperature": 0.0, "avg_logprob": -0.2060950921506298, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.00013121755910106003}, {"id": 350, "seek": 111856, "start": 1119.56, "end": 1125.36, "text": " Never always try out new stuff that comes out in Python.", "tokens": [50414, 7344, 1009, 853, 484, 777, 1507, 300, 1487, 484, 294, 15329, 13, 50704], "temperature": 0.0, "avg_logprob": -0.28456345200538635, "compression_ratio": 1.389937106918239, "no_speech_prob": 0.0013146077981218696}, {"id": 351, "seek": 111856, "start": 1125.36, "end": 1129.12, "text": " And I hope this talk will kind of make you have a look", "tokens": [50704, 400, 286, 1454, 341, 751, 486, 733, 295, 652, 291, 362, 257, 574, 50892], "temperature": 0.0, "avg_logprob": -0.28456345200538635, "compression_ratio": 1.389937106918239, "no_speech_prob": 0.0013146077981218696}, {"id": 352, "seek": 111856, "start": 1129.12, "end": 1132.04, "text": " at the match statement and maybe use it more,", "tokens": [50892, 412, 264, 2995, 5629, 293, 1310, 764, 309, 544, 11, 51038], "temperature": 0.0, "avg_logprob": -0.28456345200538635, "compression_ratio": 1.389937106918239, "no_speech_prob": 0.0013146077981218696}, {"id": 353, "seek": 111856, "start": 1132.04, "end": 1135.08, "text": " because it's actually quite useful.", "tokens": [51038, 570, 309, 311, 767, 1596, 4420, 13, 51190], "temperature": 0.0, "avg_logprob": -0.28456345200538635, "compression_ratio": 1.389937106918239, "no_speech_prob": 0.0013146077981218696}, {"id": 354, "seek": 111856, "start": 1135.08, "end": 1136.08, "text": " Thank you.", "tokens": [51190, 1044, 291, 13, 51240], "temperature": 0.0, "avg_logprob": -0.28456345200538635, "compression_ratio": 1.389937106918239, "no_speech_prob": 0.0013146077981218696}, {"id": 355, "seek": 111856, "start": 1136.08, "end": 1147.08, "text": " Thank you, Mark.", "tokens": [51240, 1044, 291, 11, 3934, 13, 51790], "temperature": 0.0, "avg_logprob": -0.28456345200538635, "compression_ratio": 1.389937106918239, "no_speech_prob": 0.0013146077981218696}, {"id": 356, "seek": 114708, "start": 1147.08, "end": 1149.08, "text": " Thank you, Mark.", "tokens": [50364, 1044, 291, 11, 3934, 13, 50464], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 357, "seek": 114708, "start": 1149.08, "end": 1151.6399999999999, "text": " So now it's time for questions.", "tokens": [50464, 407, 586, 309, 311, 565, 337, 1651, 13, 50592], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 358, "seek": 114708, "start": 1151.6399999999999, "end": 1153.96, "text": " So I can say a few people with the hands raised.", "tokens": [50592, 407, 286, 393, 584, 257, 1326, 561, 365, 264, 2377, 6005, 13, 50708], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 359, "seek": 114708, "start": 1153.96, "end": 1155.8, "text": " I will start here, and we will go up.", "tokens": [50708, 286, 486, 722, 510, 11, 293, 321, 486, 352, 493, 13, 50800], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 360, "seek": 114708, "start": 1155.8, "end": 1157.8799999999999, "text": " So we have four people, at least.", "tokens": [50800, 407, 321, 362, 1451, 561, 11, 412, 1935, 13, 50904], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 361, "seek": 114708, "start": 1163.96, "end": 1166.6399999999999, "text": " One of your first examples, you first", "tokens": [51208, 1485, 295, 428, 700, 5110, 11, 291, 700, 51342], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 362, "seek": 114708, "start": 1166.6399999999999, "end": 1171.76, "text": " had to check whether this is a list, like with the list", "tokens": [51342, 632, 281, 1520, 1968, 341, 307, 257, 1329, 11, 411, 365, 264, 1329, 51598], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 363, "seek": 114708, "start": 1171.76, "end": 1173.1599999999999, "text": " in the parentheses.", "tokens": [51598, 294, 264, 34153, 13, 51668], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 364, "seek": 114708, "start": 1173.1599999999999, "end": 1175.8, "text": " And then two cases later, you are", "tokens": [51668, 400, 550, 732, 3331, 1780, 11, 291, 366, 51800], "temperature": 0.0, "avg_logprob": -0.22102644005600286, "compression_ratio": 1.553921568627451, "no_speech_prob": 0.046563442796468735}, {"id": 365, "seek": 117580, "start": 1175.8, "end": 1178.44, "text": " trying to catch against the sequence.", "tokens": [50364, 1382, 281, 3745, 1970, 264, 8310, 13, 50496], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 366, "seek": 117580, "start": 1178.44, "end": 1181.8, "text": " That means that this will only match if it's a sequence,", "tokens": [50496, 663, 1355, 300, 341, 486, 787, 2995, 498, 309, 311, 257, 8310, 11, 50664], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 367, "seek": 117580, "start": 1181.8, "end": 1184.8, "text": " but it's not a list, I guess.", "tokens": [50664, 457, 309, 311, 406, 257, 1329, 11, 286, 2041, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 368, "seek": 117580, "start": 1184.8, "end": 1187.0, "text": " Like on your first slide, literally.", "tokens": [50814, 1743, 322, 428, 700, 4137, 11, 3736, 13, 50924], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 369, "seek": 117580, "start": 1187.0, "end": 1189.6, "text": " The first one, like this one?", "tokens": [50924, 440, 700, 472, 11, 411, 341, 472, 30, 51054], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 370, "seek": 117580, "start": 1189.6, "end": 1190.52, "text": " Yes, this one.", "tokens": [51054, 1079, 11, 341, 472, 13, 51100], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 371, "seek": 117580, "start": 1190.52, "end": 1193.6399999999999, "text": " So on the third case, it will match", "tokens": [51100, 407, 322, 264, 2636, 1389, 11, 309, 486, 2995, 51256], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 372, "seek": 117580, "start": 1193.6399999999999, "end": 1197.12, "text": " if the thing is a sequence with three elements,", "tokens": [51256, 498, 264, 551, 307, 257, 8310, 365, 1045, 4959, 11, 51430], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 373, "seek": 117580, "start": 1197.12, "end": 1199.84, "text": " but that sequence is not a list, because otherwise it", "tokens": [51430, 457, 300, 8310, 307, 406, 257, 1329, 11, 570, 5911, 309, 51566], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 374, "seek": 117580, "start": 1199.84, "end": 1201.72, "text": " would have gotten into the first case.", "tokens": [51566, 576, 362, 5768, 666, 264, 700, 1389, 13, 51660], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 375, "seek": 117580, "start": 1201.72, "end": 1202.9199999999998, "text": " Is that correct?", "tokens": [51660, 1119, 300, 3006, 30, 51720], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 376, "seek": 117580, "start": 1202.9199999999998, "end": 1203.96, "text": " Given this one, yeah?", "tokens": [51720, 18600, 341, 472, 11, 1338, 30, 51772], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 377, "seek": 117580, "start": 1203.96, "end": 1204.68, "text": " Yes.", "tokens": [51772, 1079, 13, 51808], "temperature": 0.0, "avg_logprob": -0.16688777125158974, "compression_ratio": 1.7791666666666666, "no_speech_prob": 0.030988659709692}, {"id": 378, "seek": 120468, "start": 1205.68, "end": 1208.96, "text": " Since you have a case list, oh, yeah.", "tokens": [50414, 4162, 291, 362, 257, 1389, 1329, 11, 1954, 11, 1338, 13, 50578], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 379, "seek": 120468, "start": 1208.96, "end": 1212.8400000000001, "text": " Yeah, so you're right.", "tokens": [50578, 865, 11, 370, 291, 434, 558, 13, 50772], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 380, "seek": 120468, "start": 1212.8400000000001, "end": 1216.68, "text": " What happens here is that this will always match for lists.", "tokens": [50772, 708, 2314, 510, 307, 300, 341, 486, 1009, 2995, 337, 14511, 13, 50964], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 381, "seek": 120468, "start": 1216.68, "end": 1221.76, "text": " So if you put in a real, like a true Python list,", "tokens": [50964, 407, 498, 291, 829, 294, 257, 957, 11, 411, 257, 2074, 15329, 1329, 11, 51218], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 382, "seek": 120468, "start": 1221.76, "end": 1223.96, "text": " then you will always go in here.", "tokens": [51218, 550, 291, 486, 1009, 352, 294, 510, 13, 51328], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 383, "seek": 120468, "start": 1223.96, "end": 1227.44, "text": " If you have defined your own kind of sequence,", "tokens": [51328, 759, 291, 362, 7642, 428, 1065, 733, 295, 8310, 11, 51502], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 384, "seek": 120468, "start": 1227.44, "end": 1229.16, "text": " that's not a Python list.", "tokens": [51502, 300, 311, 406, 257, 15329, 1329, 13, 51588], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 385, "seek": 120468, "start": 1229.16, "end": 1230.3600000000001, "text": " Only then it will get in the top.", "tokens": [51588, 5686, 550, 309, 486, 483, 294, 264, 1192, 13, 51648], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 386, "seek": 120468, "start": 1230.3600000000001, "end": 1233.4, "text": " Then it will drop down here, and we'll parse here.", "tokens": [51648, 1396, 309, 486, 3270, 760, 510, 11, 293, 321, 603, 48377, 510, 13, 51800], "temperature": 0.0, "avg_logprob": -0.24350546072195242, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.005163934547454119}, {"id": 387, "seek": 123340, "start": 1234.2, "end": 1237.68, "text": " And as Heckelman and Laska mentioned for me,", "tokens": [50404, 400, 382, 634, 66, 7124, 1601, 293, 10663, 2330, 2835, 337, 385, 11, 50578], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 388, "seek": 123340, "start": 1237.68, "end": 1242.96, "text": " what happens if you put a generator in there?", "tokens": [50578, 437, 2314, 498, 291, 829, 257, 19265, 294, 456, 30, 50842], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 389, "seek": 123340, "start": 1242.96, "end": 1244.3200000000002, "text": " Can you match against generators?", "tokens": [50842, 1664, 291, 2995, 1970, 38662, 30, 50910], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 390, "seek": 123340, "start": 1244.3200000000002, "end": 1247.3200000000002, "text": " Because then you will kind of mutate the element", "tokens": [50910, 1436, 550, 291, 486, 733, 295, 5839, 473, 264, 4478, 51060], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 391, "seek": 123340, "start": 1247.3200000000002, "end": 1249.0400000000002, "text": " while casing the case.", "tokens": [51060, 1339, 45109, 264, 1389, 13, 51146], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 392, "seek": 123340, "start": 1249.0400000000002, "end": 1250.16, "text": " Would that work?", "tokens": [51146, 6068, 300, 589, 30, 51202], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 393, "seek": 123340, "start": 1250.16, "end": 1251.68, "text": " This is a good question.", "tokens": [51202, 639, 307, 257, 665, 1168, 13, 51278], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 394, "seek": 123340, "start": 1251.68, "end": 1253.44, "text": " I think if you put a generator in there,", "tokens": [51278, 286, 519, 498, 291, 829, 257, 19265, 294, 456, 11, 51366], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 395, "seek": 123340, "start": 1253.44, "end": 1256.0, "text": " it will actually match the generator type and nothing", "tokens": [51366, 309, 486, 767, 2995, 264, 19265, 2010, 293, 1825, 51494], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 396, "seek": 123340, "start": 1256.0, "end": 1256.64, "text": " much else.", "tokens": [51494, 709, 1646, 13, 51526], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 397, "seek": 123340, "start": 1256.64, "end": 1259.3600000000001, "text": " It won't actually call the generator", "tokens": [51526, 467, 1582, 380, 767, 818, 264, 19265, 51662], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 398, "seek": 123340, "start": 1259.3600000000001, "end": 1263.3200000000002, "text": " to give back any values.", "tokens": [51662, 281, 976, 646, 604, 4190, 13, 51860], "temperature": 0.0, "avg_logprob": -0.30838493678880774, "compression_ratio": 1.7276595744680852, "no_speech_prob": 0.009244636632502079}, {"id": 399, "seek": 126332, "start": 1263.32, "end": 1265.52, "text": " But it's a good question.", "tokens": [50364, 583, 309, 311, 257, 665, 1168, 13, 50474], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 400, "seek": 126332, "start": 1265.52, "end": 1266.28, "text": " I'm not really sure.", "tokens": [50474, 286, 478, 406, 534, 988, 13, 50512], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 401, "seek": 126332, "start": 1266.28, "end": 1267.76, "text": " It probably works like that.", "tokens": [50512, 467, 1391, 1985, 411, 300, 13, 50586], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 402, "seek": 126332, "start": 1270.3999999999999, "end": 1271.8799999999999, "text": " Hi.", "tokens": [50718, 2421, 13, 50792], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 403, "seek": 126332, "start": 1271.8799999999999, "end": 1273.36, "text": " Thanks for the great talk.", "tokens": [50792, 2561, 337, 264, 869, 751, 13, 50866], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 404, "seek": 126332, "start": 1273.36, "end": 1278.76, "text": " I had a question regarding the caveat you gave at the end", "tokens": [50866, 286, 632, 257, 1168, 8595, 264, 43012, 291, 2729, 412, 264, 917, 51136], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 405, "seek": 126332, "start": 1278.76, "end": 1281.04, "text": " regarding the dict.", "tokens": [51136, 8595, 264, 12569, 13, 51250], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 406, "seek": 126332, "start": 1281.04, "end": 1284.08, "text": " Is there a proper way to do it, like putting parenthesis,", "tokens": [51250, 1119, 456, 257, 2296, 636, 281, 360, 309, 11, 411, 3372, 23350, 9374, 11, 51402], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 407, "seek": 126332, "start": 1284.08, "end": 1289.4399999999998, "text": " or is it not possible to match a type inside of a hash map", "tokens": [51402, 420, 307, 309, 406, 1944, 281, 2995, 257, 2010, 1854, 295, 257, 22019, 4471, 51670], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 408, "seek": 126332, "start": 1289.4399999999998, "end": 1291.56, "text": " like that?", "tokens": [51670, 411, 300, 30, 51776], "temperature": 0.0, "avg_logprob": -0.29110856850941974, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0015807858435437083}, {"id": 409, "seek": 129156, "start": 1291.6, "end": 1293.8, "text": " Let me just find the slide.", "tokens": [50366, 961, 385, 445, 915, 264, 4137, 13, 50476], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 410, "seek": 129156, "start": 1296.6, "end": 1297.6, "text": " This one, right?", "tokens": [50616, 639, 472, 11, 558, 30, 50666], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 411, "seek": 129156, "start": 1297.6, "end": 1298.6799999999998, "text": " Yeah, that one.", "tokens": [50666, 865, 11, 300, 472, 13, 50720], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 412, "seek": 129156, "start": 1298.6799999999998, "end": 1300.0, "text": " So what was the question?", "tokens": [50720, 407, 437, 390, 264, 1168, 30, 50786], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 413, "seek": 129156, "start": 1300.0, "end": 1302.1599999999999, "text": " So here you put the dict, and you", "tokens": [50786, 407, 510, 291, 829, 264, 12569, 11, 293, 291, 50894], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 414, "seek": 129156, "start": 1302.1599999999999, "end": 1305.72, "text": " said that, of course, if it will overwrite,", "tokens": [50894, 848, 300, 11, 295, 1164, 11, 498, 309, 486, 670, 21561, 11, 51072], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 415, "seek": 129156, "start": 1305.72, "end": 1310.96, "text": " let's say, the Python dict, would it", "tokens": [51072, 718, 311, 584, 11, 264, 15329, 12569, 11, 576, 309, 51334], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 416, "seek": 129156, "start": 1310.96, "end": 1313.8799999999999, "text": " be possible in that case to put parenthesis to match the type", "tokens": [51334, 312, 1944, 294, 300, 1389, 281, 829, 23350, 9374, 281, 2995, 264, 2010, 51480], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 417, "seek": 129156, "start": 1313.8799999999999, "end": 1314.3999999999999, "text": " here?", "tokens": [51480, 510, 30, 51506], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 418, "seek": 129156, "start": 1314.3999999999999, "end": 1315.52, "text": " Yes, of course.", "tokens": [51506, 1079, 11, 295, 1164, 13, 51562], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 419, "seek": 129156, "start": 1315.52, "end": 1317.9199999999998, "text": " And that was the code is actually", "tokens": [51562, 400, 300, 390, 264, 3089, 307, 767, 51682], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 420, "seek": 129156, "start": 1317.9199999999998, "end": 1321.1599999999999, "text": " written in a way that this would have been intended, right?", "tokens": [51682, 3720, 294, 257, 636, 300, 341, 576, 362, 668, 10226, 11, 558, 30, 51844], "temperature": 0.0, "avg_logprob": -0.2435232639312744, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.002803746610879898}, {"id": 421, "seek": 132116, "start": 1321.2, "end": 1324.5600000000002, "text": " So the intention was that properties,", "tokens": [50366, 407, 264, 7789, 390, 300, 7221, 11, 50534], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 422, "seek": 132116, "start": 1324.5600000000002, "end": 1326.64, "text": " well, it's matching a mapping, right?", "tokens": [50534, 731, 11, 309, 311, 14324, 257, 18350, 11, 558, 30, 50638], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 423, "seek": 132116, "start": 1326.64, "end": 1329.48, "text": " So if you put in a mapping that has,", "tokens": [50638, 407, 498, 291, 829, 294, 257, 18350, 300, 575, 11, 50780], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 424, "seek": 132116, "start": 1329.48, "end": 1331.28, "text": " as one of the keys has properties,", "tokens": [50780, 382, 472, 295, 264, 9317, 575, 7221, 11, 50870], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 425, "seek": 132116, "start": 1331.28, "end": 1336.64, "text": " and as a value has a dictionary, then this will match, right?", "tokens": [50870, 293, 382, 257, 2158, 575, 257, 25890, 11, 550, 341, 486, 2995, 11, 558, 30, 51138], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 426, "seek": 132116, "start": 1336.64, "end": 1338.88, "text": " Without the parenthesis, it won't match", "tokens": [51138, 9129, 264, 23350, 9374, 11, 309, 1582, 380, 2995, 51250], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 427, "seek": 132116, "start": 1338.88, "end": 1343.16, "text": " any mapping that has a key that has properties,", "tokens": [51250, 604, 18350, 300, 575, 257, 2141, 300, 575, 7221, 11, 51464], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 428, "seek": 132116, "start": 1343.16, "end": 1345.1200000000001, "text": " but not actually look at the value,", "tokens": [51464, 457, 406, 767, 574, 412, 264, 2158, 11, 51562], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 429, "seek": 132116, "start": 1345.1200000000001, "end": 1348.88, "text": " and simply just put the literal value", "tokens": [51562, 293, 2935, 445, 829, 264, 20411, 2158, 51750], "temperature": 0.0, "avg_logprob": -0.1859272076533391, "compression_ratio": 1.7836538461538463, "no_speech_prob": 0.0002651432005222887}, {"id": 430, "seek": 134888, "start": 1348.92, "end": 1351.16, "text": " into the variable dict.", "tokens": [50366, 666, 264, 7006, 12569, 13, 50478], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 431, "seek": 134888, "start": 1351.16, "end": 1353.96, "text": " That's what happens.", "tokens": [50478, 663, 311, 437, 2314, 13, 50618], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 432, "seek": 134888, "start": 1353.96, "end": 1356.3600000000001, "text": " OK, I think I see you up there, right?", "tokens": [50618, 2264, 11, 286, 519, 286, 536, 291, 493, 456, 11, 558, 30, 50738], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 433, "seek": 134888, "start": 1356.3600000000001, "end": 1357.3200000000002, "text": " Yes, hello.", "tokens": [50738, 1079, 11, 7751, 13, 50786], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 434, "seek": 134888, "start": 1357.3200000000002, "end": 1360.5200000000002, "text": " I was wondering, with this capturing variable,", "tokens": [50786, 286, 390, 6359, 11, 365, 341, 23384, 7006, 11, 50946], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 435, "seek": 134888, "start": 1360.5200000000002, "end": 1363.1200000000001, "text": " it can sometimes lead into ambiguity.", "tokens": [50946, 309, 393, 2171, 1477, 666, 46519, 13, 51076], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 436, "seek": 134888, "start": 1363.1200000000001, "end": 1365.16, "text": " So I was working how well this would", "tokens": [51076, 407, 286, 390, 1364, 577, 731, 341, 576, 51178], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 437, "seek": 134888, "start": 1365.16, "end": 1368.2, "text": " work with the existing typing system, where you would,", "tokens": [51178, 589, 365, 264, 6741, 18444, 1185, 11, 689, 291, 576, 11, 51330], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 438, "seek": 134888, "start": 1368.2, "end": 1372.5200000000002, "text": " for example, have an object that, like,", "tokens": [51330, 337, 1365, 11, 362, 364, 2657, 300, 11, 411, 11, 51546], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 439, "seek": 134888, "start": 1372.5200000000002, "end": 1375.48, "text": " dict that represents the type.", "tokens": [51546, 12569, 300, 8855, 264, 2010, 13, 51694], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 440, "seek": 134888, "start": 1375.48, "end": 1378.2800000000002, "text": " So that is something that I did not really cover in here,", "tokens": [51694, 407, 300, 307, 746, 300, 286, 630, 406, 534, 2060, 294, 510, 11, 51834], "temperature": 0.0, "avg_logprob": -0.21872396636427494, "compression_ratio": 1.6234817813765183, "no_speech_prob": 0.0026960698887705803}, {"id": 441, "seek": 137828, "start": 1378.28, "end": 1383.3999999999999, "text": " but perhaps you noticed the syntax that's being used here", "tokens": [50364, 457, 4317, 291, 5694, 264, 28431, 300, 311, 885, 1143, 510, 50620], "temperature": 0.0, "avg_logprob": -0.16194957494735718, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.00045819379738532007}, {"id": 442, "seek": 137828, "start": 1383.3999999999999, "end": 1386.6, "text": " is actually somewhat different from the type annotations", "tokens": [50620, 307, 767, 8344, 819, 490, 264, 2010, 25339, 763, 50780], "temperature": 0.0, "avg_logprob": -0.16194957494735718, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.00045819379738532007}, {"id": 443, "seek": 137828, "start": 1386.6, "end": 1388.56, "text": " that you have in Python, right?", "tokens": [50780, 300, 291, 362, 294, 15329, 11, 558, 30, 50878], "temperature": 0.0, "avg_logprob": -0.16194957494735718, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.00045819379738532007}, {"id": 444, "seek": 137828, "start": 1388.56, "end": 1393.2, "text": " So those are two distinct kind of, basically, systems", "tokens": [50878, 407, 729, 366, 732, 10644, 733, 295, 11, 1936, 11, 3652, 51110], "temperature": 0.0, "avg_logprob": -0.16194957494735718, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.00045819379738532007}, {"id": 445, "seek": 137828, "start": 1393.2, "end": 1394.76, "text": " working here.", "tokens": [51110, 1364, 510, 13, 51188], "temperature": 0.0, "avg_logprob": -0.16194957494735718, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.00045819379738532007}, {"id": 446, "seek": 137828, "start": 1394.76, "end": 1399.2, "text": " These types that you have here are actual Python type objects", "tokens": [51188, 1981, 3467, 300, 291, 362, 510, 366, 3539, 15329, 2010, 6565, 51410], "temperature": 0.0, "avg_logprob": -0.16194957494735718, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.00045819379738532007}, {"id": 447, "seek": 137828, "start": 1399.2, "end": 1403.48, "text": " that you work with, whereas the type annotations are being used", "tokens": [51410, 300, 291, 589, 365, 11, 9735, 264, 2010, 25339, 763, 366, 885, 1143, 51624], "temperature": 0.0, "avg_logprob": -0.16194957494735718, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.00045819379738532007}, {"id": 448, "seek": 137828, "start": 1403.48, "end": 1406.52, "text": " by, for example, MyPy or other tools,", "tokens": [51624, 538, 11, 337, 1365, 11, 1222, 47, 88, 420, 661, 3873, 11, 51776], "temperature": 0.0, "avg_logprob": -0.16194957494735718, "compression_ratio": 1.695067264573991, "no_speech_prob": 0.00045819379738532007}, {"id": 449, "seek": 140652, "start": 1406.56, "end": 1410.68, "text": " other static code analysis tools to figure out", "tokens": [50366, 661, 13437, 3089, 5215, 3873, 281, 2573, 484, 50572], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 450, "seek": 140652, "start": 1410.68, "end": 1412.04, "text": " whether something is correct or not.", "tokens": [50572, 1968, 746, 307, 3006, 420, 406, 13, 50640], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 451, "seek": 140652, "start": 1412.04, "end": 1415.8799999999999, "text": " So this actually happens at runtime.", "tokens": [50640, 407, 341, 767, 2314, 412, 34474, 13, 50832], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 452, "seek": 140652, "start": 1415.8799999999999, "end": 1417.8799999999999, "text": " I don't know if that answers your question, so.", "tokens": [50832, 286, 500, 380, 458, 498, 300, 6338, 428, 1168, 11, 370, 13, 50932], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 453, "seek": 140652, "start": 1417.8799999999999, "end": 1421.52, "text": " Well, sort of, I guess.", "tokens": [50932, 1042, 11, 1333, 295, 11, 286, 2041, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 454, "seek": 140652, "start": 1421.52, "end": 1426.08, "text": " So you can't really put the typing types in here, let's say,", "tokens": [51114, 407, 291, 393, 380, 534, 829, 264, 18444, 3467, 294, 510, 11, 718, 311, 584, 11, 51342], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 455, "seek": 140652, "start": 1426.08, "end": 1428.0, "text": " because there is generics in there, of course,", "tokens": [51342, 570, 456, 307, 1337, 1167, 294, 456, 11, 295, 1164, 11, 51438], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 456, "seek": 140652, "start": 1428.0, "end": 1430.8799999999999, "text": " that would be highly convenient for matching.", "tokens": [51438, 300, 576, 312, 5405, 10851, 337, 14324, 13, 51582], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 457, "seek": 140652, "start": 1430.8799999999999, "end": 1431.8, "text": " Right, right.", "tokens": [51582, 1779, 11, 558, 13, 51628], "temperature": 0.0, "avg_logprob": -0.20420019697434832, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.001908644218929112}, {"id": 458, "seek": 143180, "start": 1432.76, "end": 1438.76, "text": " I think that, I mean, in typing, you do have some actual", "tokens": [50412, 286, 519, 300, 11, 286, 914, 11, 294, 18444, 11, 291, 360, 362, 512, 3539, 50712], "temperature": 0.0, "avg_logprob": -0.33301678570834076, "compression_ratio": 1.5, "no_speech_prob": 0.0007651900523342192}, {"id": 459, "seek": 143180, "start": 1438.76, "end": 1440.72, "text": " Python type objects.", "tokens": [50712, 15329, 2010, 6565, 13, 50810], "temperature": 0.0, "avg_logprob": -0.33301678570834076, "compression_ratio": 1.5, "no_speech_prob": 0.0007651900523342192}, {"id": 460, "seek": 143180, "start": 1440.72, "end": 1442.72, "text": " Those you can use in here, right?", "tokens": [50810, 3950, 291, 393, 764, 294, 510, 11, 558, 30, 50910], "temperature": 0.0, "avg_logprob": -0.33301678570834076, "compression_ratio": 1.5, "no_speech_prob": 0.0007651900523342192}, {"id": 461, "seek": 143180, "start": 1442.72, "end": 1450.48, "text": " But you cannot use the type annotation kind of syntax,", "tokens": [50910, 583, 291, 2644, 764, 264, 2010, 48654, 733, 295, 28431, 11, 51298], "temperature": 0.0, "avg_logprob": -0.33301678570834076, "compression_ratio": 1.5, "no_speech_prob": 0.0007651900523342192}, {"id": 462, "seek": 143180, "start": 1450.48, "end": 1453.76, "text": " for example, for matching an integer or something, yeah?", "tokens": [51298, 337, 1365, 11, 337, 14324, 364, 24922, 420, 746, 11, 1338, 30, 51462], "temperature": 0.0, "avg_logprob": -0.33301678570834076, "compression_ratio": 1.5, "no_speech_prob": 0.0007651900523342192}, {"id": 463, "seek": 143180, "start": 1453.76, "end": 1454.76, "text": " No, it doesn't make sense, of course.", "tokens": [51462, 883, 11, 309, 1177, 380, 652, 2020, 11, 295, 1164, 13, 51512], "temperature": 0.0, "avg_logprob": -0.33301678570834076, "compression_ratio": 1.5, "no_speech_prob": 0.0007651900523342192}, {"id": 464, "seek": 143180, "start": 1454.76, "end": 1456.08, "text": " That doesn't work.", "tokens": [51512, 663, 1177, 380, 589, 13, 51578], "temperature": 0.0, "avg_logprob": -0.33301678570834076, "compression_ratio": 1.5, "no_speech_prob": 0.0007651900523342192}, {"id": 465, "seek": 143180, "start": 1456.08, "end": 1457.08, "text": " Thank you.", "tokens": [51578, 1044, 291, 13, 51628], "temperature": 0.0, "avg_logprob": -0.33301678570834076, "compression_ratio": 1.5, "no_speech_prob": 0.0007651900523342192}, {"id": 466, "seek": 145708, "start": 1458.08, "end": 1463.08, "text": " Do we have any more questions?", "tokens": [50414, 1144, 321, 362, 604, 544, 1651, 30, 50664], "temperature": 0.0, "avg_logprob": -0.2439930798256234, "compression_ratio": 1.3916083916083917, "no_speech_prob": 0.010167662054300308}, {"id": 467, "seek": 145708, "start": 1463.08, "end": 1465.08, "text": " We have time for one last one.", "tokens": [50664, 492, 362, 565, 337, 472, 1036, 472, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2439930798256234, "compression_ratio": 1.3916083916083917, "no_speech_prob": 0.010167662054300308}, {"id": 468, "seek": 145708, "start": 1465.08, "end": 1466.08, "text": " Yes, we do.", "tokens": [50764, 1079, 11, 321, 360, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2439930798256234, "compression_ratio": 1.3916083916083917, "no_speech_prob": 0.010167662054300308}, {"id": 469, "seek": 145708, "start": 1466.08, "end": 1467.08, "text": " Oh, my God, we have two.", "tokens": [50814, 876, 11, 452, 1265, 11, 321, 362, 732, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2439930798256234, "compression_ratio": 1.3916083916083917, "no_speech_prob": 0.010167662054300308}, {"id": 470, "seek": 145708, "start": 1467.08, "end": 1470.08, "text": " I'm going to the right side, because we haven't had", "tokens": [50864, 286, 478, 516, 281, 264, 558, 1252, 11, 570, 321, 2378, 380, 632, 51014], "temperature": 0.0, "avg_logprob": -0.2439930798256234, "compression_ratio": 1.3916083916083917, "no_speech_prob": 0.010167662054300308}, {"id": 471, "seek": 145708, "start": 1470.08, "end": 1472.08, "text": " many questions from there.", "tokens": [51014, 867, 1651, 490, 456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2439930798256234, "compression_ratio": 1.3916083916083917, "no_speech_prob": 0.010167662054300308}, {"id": 472, "seek": 145708, "start": 1472.08, "end": 1473.08, "text": " I'm coming.", "tokens": [51114, 286, 478, 1348, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2439930798256234, "compression_ratio": 1.3916083916083917, "no_speech_prob": 0.010167662054300308}, {"id": 473, "seek": 145708, "start": 1477.08, "end": 1478.08, "text": " Let's go.", "tokens": [51364, 961, 311, 352, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2439930798256234, "compression_ratio": 1.3916083916083917, "no_speech_prob": 0.010167662054300308}, {"id": 474, "seek": 147808, "start": 1478.08, "end": 1479.08, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.2260294710652212, "compression_ratio": 1.5115207373271888, "no_speech_prob": 0.01187075488269329}, {"id": 475, "seek": 147808, "start": 1484.08, "end": 1488.08, "text": " So, yeah, maybe this is wishful thinking, but how difficult", "tokens": [50664, 407, 11, 1338, 11, 1310, 341, 307, 3172, 906, 1953, 11, 457, 577, 2252, 50864], "temperature": 0.0, "avg_logprob": -0.2260294710652212, "compression_ratio": 1.5115207373271888, "no_speech_prob": 0.01187075488269329}, {"id": 476, "seek": 147808, "start": 1488.08, "end": 1492.08, "text": " would be to implement or to provide, like, a match that", "tokens": [50864, 576, 312, 281, 4445, 420, 281, 2893, 11, 411, 11, 257, 2995, 300, 51064], "temperature": 0.0, "avg_logprob": -0.2260294710652212, "compression_ratio": 1.5115207373271888, "no_speech_prob": 0.01187075488269329}, {"id": 477, "seek": 147808, "start": 1492.08, "end": 1497.08, "text": " will match not in order, but it will give me the best match?", "tokens": [51064, 486, 2995, 406, 294, 1668, 11, 457, 309, 486, 976, 385, 264, 1151, 2995, 30, 51314], "temperature": 0.0, "avg_logprob": -0.2260294710652212, "compression_ratio": 1.5115207373271888, "no_speech_prob": 0.01187075488269329}, {"id": 478, "seek": 147808, "start": 1497.08, "end": 1499.08, "text": " Would be that possible?", "tokens": [51314, 6068, 312, 300, 1944, 30, 51414], "temperature": 0.0, "avg_logprob": -0.2260294710652212, "compression_ratio": 1.5115207373271888, "no_speech_prob": 0.01187075488269329}, {"id": 479, "seek": 147808, "start": 1499.08, "end": 1503.08, "text": " Because, for example, I'm working in code generators for", "tokens": [51414, 1436, 11, 337, 1365, 11, 286, 478, 1364, 294, 3089, 38662, 337, 51614], "temperature": 0.0, "avg_logprob": -0.2260294710652212, "compression_ratio": 1.5115207373271888, "no_speech_prob": 0.01187075488269329}, {"id": 480, "seek": 147808, "start": 1503.08, "end": 1507.08, "text": " wrapping CAP from wrapping C into Python, and sometimes you", "tokens": [51614, 21993, 33636, 490, 21993, 383, 666, 15329, 11, 293, 2171, 291, 51814], "temperature": 0.0, "avg_logprob": -0.2260294710652212, "compression_ratio": 1.5115207373271888, "no_speech_prob": 0.01187075488269329}, {"id": 481, "seek": 150708, "start": 1507.08, "end": 1508.08, "text": " can't do that.", "tokens": [50364, 393, 380, 360, 300, 13, 50414], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 482, "seek": 150708, "start": 1508.08, "end": 1511.08, "text": " And from C++ goes over, function overload.", "tokens": [50414, 400, 490, 383, 25472, 1709, 670, 11, 2445, 28777, 13, 50564], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 483, "seek": 150708, "start": 1511.08, "end": 1514.08, "text": " So I can think, OK, I can have function overload to Python", "tokens": [50564, 407, 286, 393, 519, 11, 2264, 11, 286, 393, 362, 2445, 28777, 281, 15329, 50714], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 484, "seek": 150708, "start": 1514.08, "end": 1517.08, "text": " and translate that to a single function with match for", "tokens": [50714, 293, 13799, 300, 281, 257, 2167, 2445, 365, 2995, 337, 50864], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 485, "seek": 150708, "start": 1517.08, "end": 1518.08, "text": " different signatures.", "tokens": [50864, 819, 32322, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 486, "seek": 150708, "start": 1518.08, "end": 1522.08, "text": " However, I will have to, I don't know, I need to know which", "tokens": [50914, 2908, 11, 286, 486, 362, 281, 11, 286, 500, 380, 458, 11, 286, 643, 281, 458, 597, 51114], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 487, "seek": 150708, "start": 1522.08, "end": 1527.08, "text": " is the best match for each case in order to order the match", "tokens": [51114, 307, 264, 1151, 2995, 337, 1184, 1389, 294, 1668, 281, 1668, 264, 2995, 51364], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 488, "seek": 150708, "start": 1527.08, "end": 1528.08, "text": " statement.", "tokens": [51364, 5629, 13, 51414], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 489, "seek": 150708, "start": 1528.08, "end": 1531.08, "text": " Will it be possible to have that kind of logic embedded in", "tokens": [51414, 3099, 309, 312, 1944, 281, 362, 300, 733, 295, 9952, 16741, 294, 51564], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 490, "seek": 150708, "start": 1531.08, "end": 1534.08, "text": " Python, or that's too wishful thinking?", "tokens": [51564, 15329, 11, 420, 300, 311, 886, 3172, 906, 1953, 30, 51714], "temperature": 0.0, "avg_logprob": -0.21190069489559885, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.02270861528813839}, {"id": 491, "seek": 153408, "start": 1534.08, "end": 1538.08, "text": " You can try to do this by ordering the cases from, you", "tokens": [50364, 509, 393, 853, 281, 360, 341, 538, 21739, 264, 3331, 490, 11, 291, 50564], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 492, "seek": 153408, "start": 1538.08, "end": 1542.08, "text": " know, the longest match to the shortest match.", "tokens": [50564, 458, 11, 264, 15438, 2995, 281, 264, 31875, 2995, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 493, "seek": 153408, "start": 1542.08, "end": 1545.08, "text": " But apart from that, I think it's, this is actually a hard", "tokens": [50764, 583, 4936, 490, 300, 11, 286, 519, 309, 311, 11, 341, 307, 767, 257, 1152, 50914], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 494, "seek": 153408, "start": 1545.08, "end": 1548.08, "text": " problem that you're describing there.", "tokens": [50914, 1154, 300, 291, 434, 16141, 456, 13, 51064], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 495, "seek": 153408, "start": 1548.08, "end": 1551.08, "text": " Because if you want to, if you want to figure out what's the", "tokens": [51064, 1436, 498, 291, 528, 281, 11, 498, 291, 528, 281, 2573, 484, 437, 311, 264, 51214], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 496, "seek": 153408, "start": 1551.08, "end": 1553.08, "text": " best match that you have, then you actually have to go", "tokens": [51214, 1151, 2995, 300, 291, 362, 11, 550, 291, 767, 362, 281, 352, 51314], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 497, "seek": 153408, "start": 1553.08, "end": 1555.08, "text": " through all the different cases that you have in here, and", "tokens": [51314, 807, 439, 264, 819, 3331, 300, 291, 362, 294, 510, 11, 293, 51414], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 498, "seek": 153408, "start": 1555.08, "end": 1558.08, "text": " that's going to have different semantics than what you have", "tokens": [51414, 300, 311, 516, 281, 362, 819, 4361, 45298, 813, 437, 291, 362, 51564], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 499, "seek": 153408, "start": 1558.08, "end": 1560.08, "text": " now in the match statement.", "tokens": [51564, 586, 294, 264, 2995, 5629, 13, 51664], "temperature": 0.0, "avg_logprob": -0.08695603198692446, "compression_ratio": 1.8588709677419355, "no_speech_prob": 0.04642362520098686}, {"id": 500, "seek": 156008, "start": 1560.08, "end": 1563.08, "text": " Usually the problem is like to know which is the most", "tokens": [50364, 11419, 264, 1154, 307, 411, 281, 458, 597, 307, 264, 881, 50514], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 501, "seek": 156008, "start": 1563.08, "end": 1564.08, "text": " concrete type.", "tokens": [50514, 9859, 2010, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 502, "seek": 156008, "start": 1564.08, "end": 1566.08, "text": " Usually the problem that I have the most is like to know", "tokens": [50564, 11419, 264, 1154, 300, 286, 362, 264, 881, 307, 411, 281, 458, 50664], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 503, "seek": 156008, "start": 1566.08, "end": 1569.08, "text": " which is the most concrete type to the base type, so to", "tokens": [50664, 597, 307, 264, 881, 9859, 2010, 281, 264, 3096, 2010, 11, 370, 281, 50814], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 504, "seek": 156008, "start": 1569.08, "end": 1572.08, "text": " that it matches the most concrete one instead of the base", "tokens": [50814, 300, 309, 10676, 264, 881, 9859, 472, 2602, 295, 264, 3096, 50964], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 505, "seek": 156008, "start": 1572.08, "end": 1574.08, "text": " one, because it's like it can match us both.", "tokens": [50964, 472, 11, 570, 309, 311, 411, 309, 393, 2995, 505, 1293, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 506, "seek": 156008, "start": 1574.08, "end": 1578.08, "text": " But in C or C++, it will always match the most concrete", "tokens": [51064, 583, 294, 383, 420, 383, 25472, 11, 309, 486, 1009, 2995, 264, 881, 9859, 51264], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 507, "seek": 156008, "start": 1578.08, "end": 1579.08, "text": " one.", "tokens": [51264, 472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 508, "seek": 156008, "start": 1579.08, "end": 1582.08, "text": " And if, and it's not there, it will get to the base.", "tokens": [51314, 400, 498, 11, 293, 309, 311, 406, 456, 11, 309, 486, 483, 281, 264, 3096, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 509, "seek": 156008, "start": 1582.08, "end": 1585.08, "text": " So, and for example, for now, it's like right now in Python", "tokens": [51464, 407, 11, 293, 337, 1365, 11, 337, 586, 11, 309, 311, 411, 558, 586, 294, 15329, 51614], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 510, "seek": 156008, "start": 1585.08, "end": 1588.08, "text": " I have no idea how I will solve that when I'm wrapping", "tokens": [51614, 286, 362, 572, 1558, 577, 286, 486, 5039, 300, 562, 286, 478, 21993, 51764], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 511, "seek": 156008, "start": 1588.08, "end": 1589.08, "text": " APIs.", "tokens": [51764, 21445, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16044542173676143, "compression_ratio": 2.019455252918288, "no_speech_prob": 0.006077429745346308}, {"id": 512, "seek": 158908, "start": 1589.08, "end": 1593.08, "text": " You can do that by ordering, like I said, you can order the", "tokens": [50364, 509, 393, 360, 300, 538, 21739, 11, 411, 286, 848, 11, 291, 393, 1668, 264, 50564], "temperature": 0.0, "avg_logprob": -0.17798924824548146, "compression_ratio": 1.9279661016949152, "no_speech_prob": 0.00024138060689438134}, {"id": 513, "seek": 158908, "start": 1593.08, "end": 1596.08, "text": " case statement that you have here from the most, let's say,", "tokens": [50564, 1389, 5629, 300, 291, 362, 510, 490, 264, 881, 11, 718, 311, 584, 11, 50714], "temperature": 0.0, "avg_logprob": -0.17798924824548146, "compression_ratio": 1.9279661016949152, "no_speech_prob": 0.00024138060689438134}, {"id": 514, "seek": 158908, "start": 1596.08, "end": 1599.08, "text": " abstract one to the most concrete one, and sorry, the", "tokens": [50714, 12649, 472, 281, 264, 881, 9859, 472, 11, 293, 2597, 11, 264, 50864], "temperature": 0.0, "avg_logprob": -0.17798924824548146, "compression_ratio": 1.9279661016949152, "no_speech_prob": 0.00024138060689438134}, {"id": 515, "seek": 158908, "start": 1599.08, "end": 1602.08, "text": " other way around, from the most concrete one to the most", "tokens": [50864, 661, 636, 926, 11, 490, 264, 881, 9859, 472, 281, 264, 881, 51014], "temperature": 0.0, "avg_logprob": -0.17798924824548146, "compression_ratio": 1.9279661016949152, "no_speech_prob": 0.00024138060689438134}, {"id": 516, "seek": 158908, "start": 1602.08, "end": 1606.08, "text": " abstract one, and then like in the example I just gave where", "tokens": [51014, 12649, 472, 11, 293, 550, 411, 294, 264, 1365, 286, 445, 2729, 689, 51214], "temperature": 0.0, "avg_logprob": -0.17798924824548146, "compression_ratio": 1.9279661016949152, "no_speech_prob": 0.00024138060689438134}, {"id": 517, "seek": 158908, "start": 1606.08, "end": 1610.08, "text": " you have a list, yeah, when, if you pass in the Python list", "tokens": [51214, 291, 362, 257, 1329, 11, 1338, 11, 562, 11, 498, 291, 1320, 294, 264, 15329, 1329, 51414], "temperature": 0.0, "avg_logprob": -0.17798924824548146, "compression_ratio": 1.9279661016949152, "no_speech_prob": 0.00024138060689438134}, {"id": 518, "seek": 158908, "start": 1610.08, "end": 1613.08, "text": " object, then it will match the first one.", "tokens": [51414, 2657, 11, 550, 309, 486, 2995, 264, 700, 472, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17798924824548146, "compression_ratio": 1.9279661016949152, "no_speech_prob": 0.00024138060689438134}, {"id": 519, "seek": 158908, "start": 1613.08, "end": 1618.08, "text": " If you pass in, in this other example that I had here, if you", "tokens": [51564, 759, 291, 1320, 294, 11, 294, 341, 661, 1365, 300, 286, 632, 510, 11, 498, 291, 51814], "temperature": 0.0, "avg_logprob": -0.17798924824548146, "compression_ratio": 1.9279661016949152, "no_speech_prob": 0.00024138060689438134}, {"id": 520, "seek": 161808, "start": 1618.08, "end": 1625.08, "text": " pass in, let's say, a user defined sequence, then it will", "tokens": [50364, 1320, 294, 11, 718, 311, 584, 11, 257, 4195, 7642, 8310, 11, 550, 309, 486, 50714], "temperature": 0.0, "avg_logprob": -0.1480532559481534, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.0019376672571524978}, {"id": 521, "seek": 161808, "start": 1625.08, "end": 1627.08, "text": " drop down and then match that one.", "tokens": [50714, 3270, 760, 293, 550, 2995, 300, 472, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1480532559481534, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.0019376672571524978}, {"id": 522, "seek": 161808, "start": 1627.08, "end": 1632.08, "text": " So that's more abstract, right?", "tokens": [50814, 407, 300, 311, 544, 12649, 11, 558, 30, 51064], "temperature": 0.0, "avg_logprob": -0.1480532559481534, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.0019376672571524978}, {"id": 523, "seek": 161808, "start": 1632.08, "end": 1634.08, "text": " Thank you very much, Mark.", "tokens": [51064, 1044, 291, 588, 709, 11, 3934, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1480532559481534, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.0019376672571524978}, {"id": 524, "seek": 161808, "start": 1634.08, "end": 1636.08, "text": " Another round of applause, Mark.", "tokens": [51164, 3996, 3098, 295, 9969, 11, 3934, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1480532559481534, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.0019376672571524978}, {"id": 525, "seek": 161808, "start": 1636.08, "end": 1637.08, "text": " Thank you.", "tokens": [51264, 1044, 291, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1480532559481534, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.0019376672571524978}, {"id": 526, "seek": 161808, "start": 1637.08, "end": 1638.08, "text": " Thank you.", "tokens": [51314, 1044, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1480532559481534, "compression_ratio": 1.401360544217687, "no_speech_prob": 0.0019376672571524978}], "language": "en"}