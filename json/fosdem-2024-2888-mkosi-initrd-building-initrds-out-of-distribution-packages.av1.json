{"text": " Hello everyone. Let's talk about building in and out of distribution packages. So a little bit about us. I'm Dan. I work for the Linux user space at Tima and Mana. I'm a system dmaco assignment trainer. I'm Zbyshek. I work in Red Hat. I work on Fedora. I'm in Fesco. I work on system d mostly. So let's start by talking about in and out of these and why we need them. The general boot flow when you boot a kernel is you start with a boot loader. The boot loader goes to the kernel. The kernel is then responsible for finding the root file system. And in the early days of Linux this was pretty easy and the kernel could do it itself. But these days finding the root file system is a lot more complicated. So the kernel really said we're not going to solve that problem. We'll just leave it to user space. How do they do that? Well, you give a file system to the kernel, which is called the inner MFS. You do that via CPIO. The kernel will unpack that and then start user space in that temporary file system, which is unpacked in memory. And then once you go into that, the inner MFS is responsible for finding the actual root file system and then doing a switch root operation into it. And then you end up in the final file system. And the inner MFS can do what it wants really, but generally these days it's done in one of two ways. So the first one is that some bespoke bash script gets invoked, which is generated by your inner MFS generator. So these are tools like Drakeit, like inner MFS tools on Debian, or make it in, make in its CPIO on Arch Linux and derivatives. The other way you can do it these days is by using systemd. So systemd has for a very long time already supported running in the inner MFS. And it has all the tools and services you need to find the root file system and switch root into it. And some of the inner MFS generation tools actually don't like, are configurable, so you can either use the bash script or you can choose to use systemd in the inner MFS. So I'll add to this that the amount of stuff that needs to happen for the root file system to be available is growing more complex all the time. So we have encryption, we have RAID, device mapper, possibly the invariity. And in the theme of previous, previous talk, we for example might at some point ask the user for a password, but the user might not be using a keyboard, they might be using a braille device or they might need a screen reader to know that the password prompt is up. And all of this stuff will sooner or later need to be available very early in the boot before the system is reader. Yeah, well I'll add to that that your root file system might not even be there on the system yet, it might have to come from the network. So you would need all the tools to set up a network connection and everything in your inner MFS. So it can get pretty complicated. So what's the status quo? Like I said, we have the inner MFS generation tools like Drakeit, Makein' the CPIO, inner MFS tools. And the way these tools work is they basically go look at your host file system, what's on there and they start picking out specific files and use that to make the inner MFS. Which files to pick is, becomes specific logic for each inner MFS generator. So the thing you need to know is that if you say like include this binary on the inner MFS, that's not going to work because that binary has library dependencies. So you also need to go get all the libraries and of course those libraries can depend on more libraries and so forth and so forth and so forth. So you need logic to make sure all those things get picked up correctly. Now luckily for ELF binaries you can actually in a pretty hacky way do that by just going to look at the ELF binary where all the library dependencies are recorded and trying to figure out stuff that way. But then you get into stuff like DL Open where the library might not actually be listed in the ELF binary. Or you get into stuff like configuration files or other kinds of plugins or anything you can think of. There's no direct dependencies listed in the file system that you can use to figure out all these things that need to be included. So you can get into quite a few issues. So this leads to having regular packaging when a new piece of software is released that is used in the inner MFS where the package build or the WNDEP or the RPMs pack gets updated. And then you get into inner MFS specific packages that you can use to do the packaging. So for example Drakeit. A very good example of this is when we introduced systemd executor in systemd which is now required to launch services. So this was a new binary. So when we released a new version all the specs were updated. And then we also had to update every inner MFS generation tool to make sure to include that binary in the inner MFS. And this leads to quite a few bugs. It also means that when it becomes very unclear where the bug should be reported. It could either be bug in the upstream project or it could be the inner MFS generation tool that's not correctly picking up all the dependencies required to run the tool. So it becomes very hard to assign bugs and requires a lot of triaging to get the bugs to the right project. It's also hard to customize. If you want to include something it's up to you to figure out all the dependencies and specify them in the inner MFS generation tool to be included. And of course it's also quite slow because every time the inner MFS is updated it has to be done locally. And all the dependencies have to be figured out. And anyone that's ever used Drakeit and not used host only mode probably knows what I'm talking about because it takes forever. So what do we want to do instead? We want to reuse all the work that the distributions are already doing with their packaging. So the Arch package builds, the RPM specs, everything. We want to reuse all the work that goes into those and use those to build the inner MFS. So instead of going to look at the host file system we just install RPMs, install dApps, install packages, Arch Linux packages into the inner MFS and we get it out that way. And this has a few advantages. For example, package managers, it turns out that package managers are very good at installing packages. So it just works. They're also good at managing dependencies. So all these systems have, depending on the package manager, very extensive or at least very sane dependency resolution. So all the dependencies get listed and the package manager takes care of figuring out all the extra stuff that is needed and make sure that gets installed as well. You don't need to go parsing ELF binaries anymore to figure out the dependencies of a specific package. You don't need to learn another system. So you don't need to learn the inner MFS generation tool. You don't need to manually start listing the dependencies of the tool you want to include. You just install the RPM, the package, the dApp, whatever you want and the package manager takes care of all the rest. The ownership of bugs becomes clearer because the inner MFS generation tool is just installing packages. It's pretty simple. So there's a, the surface area for bugs is a lot smaller and generally when bugs appear, they're going to be able to be assigned to the upstream project instead of to the inner MFS generation tool. If any improvements are made to the packaging, of course, they automatically end up in the inner MFS as well. And finally, by doing this approach, the inner MFS is not tied anymore to the root file system or the host file system. So you can also start building the inner ID off-host on a distribution builder and distribute it as a package. So you can just download an inner ID instead of generating one locally. Assuming that the inner ID includes all the necessary pieces, this allows you to just have an inner ID that works for 99% of use cases without every user having to spend CPU power to build at inner ID themselves. So there is some, some requirements are needed to build the inner MFS out of packages. Specifically, this means that the packaging has to be done a little carefully to make sure that the inner MFS does not become too big. For example, GCClips, so GCC ships a bunch of libraries which are generally dependent on by software, at least the C library. But it also ships, like GCC supports the Go programming language, it supports Fortran, it supports D, and it includes standard libraries for all of those. If those are all put in the same package, especially the Go standard library, it's absolutely huge. So yeah, and with an inner MFS, that's pretty huge. So ideally, GCClips is a separate, sub-packages for each standard library so that you can only install the necessary one in the inner MFS. For example, Arch Linux doesn't do this. So we have to, you have to start removing stuff manually, but we don't want to do this, right? We want to rely on the packages. So ideally, the distributions take a little care that the core packages are split sufficiently so that you only install the necessary stuff in the inner MFS. Another good one is that the kernel modules generally depend on the kernel itself. So if you install the kernel modules in the inner MFS, the kernel gets pulled in as well, but you don't need a kernel in the inner MFS. So that's another thing where there should be a little care taken to make this possible. And finally, locales. Fedora has, and then Santos and derivatives, have a G-Lip C minimal rank pack package that only includes the official UTF-8 locale instead of all of them. And that again, stuff like that helps to reduce the size. So how do we propose to build this inner MFS out of packages? Well, we suggest to use MAKOSI, which is SystemDIS Image Building Tool. So our idea is that the inner MFS really isn't any different from a regular Linux image. It's just packaged differently. Instead of putting it in a disk image with a GPT partition table, you just package it with CPIO and you get your inner MFS. And inner MFS isn't really any different from a regular Linux system, except it just includes less software and it has two extra sim lings, and that's all you need. So you can build it using the regular image building tools. You don't need anything different. So MAKOSI is a tool that builds these images. It does a whole bunch of things. It installs packages, and it can also build you something else than an inner ID. So it can install bootloaders. It can build an inner MFS for a regular disk image. It can do unified kernel images. And it can run a whole bunch of tools that SystemD provides to configure system images. And it also allows you to test the thing by booting it in QMU or assisting the N-Spawn container. So how do you get started with MAKOSI? Well, this is an example to build Arch, install SystemD and the kernel. We enable autologon and then start it in QMU. This gets you something like the following. MAKOSI supports all the popular distributions, I guess. CentOS, Debian, Ubuntu, OpenSuzi, Arch, Fedora, and some derivatives of those. Raul? Raul. Raul BI. One interesting thing is that you do not need root privileges as your user to run MAKOSI. We use these new UID map and new GID map tools to be able to do everything without needing to enter your password. We also use SystemD Repart from SystemD to be able to build disk images without needing root privileges or loop devices. So you can just run all this as your regular user to build an image. We have configurations, so instead of having to specify everything on the command line, you can also use the regular SystemD unifile, which everyone knows from Unifiles. So what is MAKOSI in-it RD? Well, it is a MAKOSI configuration to build in-it-RAMFS images. It used to be a standalone project, but we recently merged it into MAKOSI itself. So it is already used to build the default in-it-RAMFS for all images that MAKOSI builds. So if you use MAKOSI to build a disk image and you do not specify your own in-it-RAMFS, it will use MAKOSI in-it RD to build an in-it-RAMFS and use that. So every time you boot a MAKOSI disk image, you are generally already using this. And we make sure this is tested on all the supported distributions. So it initially started out as a Fedora only thing, but when we merged it into MAKOSI, we implemented support for all the distributions. So you can build an in-it-RAMFS out of Arch packages, Shibuunter packages, Debian packages, OpenSUSE packages, CentOS packages, or Fedora packages. We also ship a kernel install plugin. So kernel install is a system that is tooling for taking a kernel from your slash user directory, where it is installed by the package manager usually, and moving it to the ESP and doing a bunch of extra required work, like for example building an in-it-RAMFS. So usually like on Fedora at least, the Drakeit ships its own kernel install plugin, but MAKOSI does as well. So you can basically configure kernel install to use MAKOSI in-it-RAMFS instead of Drakeit to build the in-it-RAMFS. And Drakeit will automatically disable itself if another in-it-RAMFS generator is enabled. This view reuses all the package manager caches from the host file system. So you're not downloading unnecessary packages. It just reuses the same RPMs or depths that were already used, or that you already installed on your host file system. And finally, it can be completely customized. So MAKOSI, the configuration supports drop-ins. So you can add a few of those in user-lit MAKOSI in-it-RD or ETC MAKOSI in-it-RD to add more packages to the in-it-RD or to remove some extra stuff, or anything you can think of really that is supported by MAKOSI, you can make sure that it gets applied to the in-it-RAMFS produced by the kernel install plugin. It can also be used as a standalone thing, so you don't need to use the kernel install plugin. This is how you would use it to build your own in-it-RAMFS, which will then appear in the working directory that you invoke it in. One interesting thing here is because the kernel modules packages aren't really set up completely correctly yet and pull in too many dependencies, we do the practical thing and we copy the kernel modules from the host. By using the kernel module exclude settings and the include settings, we can do the same thing that RakeIt does or the other tools do, where we only include the kernel modules that are loaded on the host file system, because if we would include all of them and all of their firmware dependencies in the in-it-RAMFS, it would grow to tremendous proportions. So make sure to only include what's needed. So we cover a lot of this with integration tests. Specifically, we make sure that booting from LUX works, so with an encrypted root file system, we make sure that LVM works, we make sure that the combination of the two works. This can boot up for the AOSFS. We support the system-dgpt auto-generator stuff, just specifying doing everything with FSTAP, whatever you can think of really. We try to make sure it works. There are some more niche technologies like RAID, NFS, and iSCSI that we haven't had the time to write integration tests for, so we can't say for sure that this will work, but we're working on making more stuff work that is already possible. So we're working on making more stuff work with the existing tools. That was everything I had to say. So this is a link to the configuration files from iSCSI in-it-RD. So there you can go and take a look at how the in-it-RDs are structured, which packages are included, what files are removed. Specifically, there's a lot of files that we have to remove depending on the distribution. So any distribution packages, go look at that, see what we have to remove manually, and improve your packaging so that we don't have to do that. Thank you for listening. So before the questions, I want to make one comment clarification. Since we're developing this, we get into this mindset of thinking about the low-level details, but I think that this might be a bit confusing, that on the one hand, we talk about building the in-it-RD in a predictable way, somewhere in central infrastructure, and signing it. And on the other hand, we talk about including local modules. And so a lot of this stuff is for development and for now. And in the long term, we want to have the centralized thing where we're building the in-it-RD, glue it together with the kernel, and sign the pair together, building a unified kernel image, which Leonard Pottering was talking about earlier today. So yeah, just to clear this up. Awesome, thank you. What questions do we have? One over here, one over there. Okay, so you mentioned that currently you use local modules. So it doesn't mean that all the complexity from record for selecting kernel modules still remains here as well, right? Yes, but it turns out the complexity for selecting kernel modules, because the kernel modules list their dependencies properly, is not all that much. But yes, we do support it. But we hope, like Shabish said, that eventually in the future, we don't have to use that part anymore. So we can have a proper set of default modules, and these are all properly sub-packaged in distributions, so that we can install distribution packages to get the kernel modules instead of having to do the extra complexity for selecting them locally. You spoke about integration testing on multiple distributions. Did you try to test in all, let's say, usual kind of lattice distribution, but did you try a bit older, and do you have something that you plan to maintain like testing with a new distribution that are coming? So at the moment, our integration tests are run for the default versions of all the supported distributions. So this is generally the latest. It's Debian testing, it's not Debian stable. But I mean, we could definitely add more. It's just running in GitHub Action, so it's just a matter of defining the necessary configuration and then we can run tests for everything. What was those questions? Zero questions. Alright, thanks you too. This was great.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Hello everyone. Let's talk about building in and out of distribution packages. So a", "tokens": [50364, 2425, 1518, 13, 961, 311, 751, 466, 2390, 294, 293, 484, 295, 7316, 17401, 13, 407, 257, 50714], "temperature": 0.0, "avg_logprob": -0.5199153900146485, "compression_ratio": 1.4550561797752808, "no_speech_prob": 0.496961385011673}, {"id": 1, "seek": 0, "start": 12.76, "end": 18.26, "text": " little bit about us. I'm Dan. I work for the Linux user space at Tima and Mana. I'm", "tokens": [51002, 707, 857, 466, 505, 13, 286, 478, 3394, 13, 286, 589, 337, 264, 18734, 4195, 1901, 412, 314, 4775, 293, 33711, 13, 286, 478, 51277], "temperature": 0.0, "avg_logprob": -0.5199153900146485, "compression_ratio": 1.4550561797752808, "no_speech_prob": 0.496961385011673}, {"id": 2, "seek": 0, "start": 18.26, "end": 24.26, "text": " a system dmaco assignment trainer. I'm Zbyshek. I work in Red Hat. I work on Fedora. I'm in", "tokens": [51277, 257, 1185, 274, 76, 11428, 15187, 21110, 13, 286, 478, 1176, 65, 749, 675, 74, 13, 286, 589, 294, 4477, 15867, 13, 286, 589, 322, 7772, 3252, 13, 286, 478, 294, 51577], "temperature": 0.0, "avg_logprob": -0.5199153900146485, "compression_ratio": 1.4550561797752808, "no_speech_prob": 0.496961385011673}, {"id": 3, "seek": 2426, "start": 24.26, "end": 31.26, "text": " Fesco. I work on system d mostly. So let's start by talking about in and out of these", "tokens": [50364, 479, 279, 1291, 13, 286, 589, 322, 1185, 274, 5240, 13, 407, 718, 311, 722, 538, 1417, 466, 294, 293, 484, 295, 613, 50714], "temperature": 0.0, "avg_logprob": -0.2049900311142651, "compression_ratio": 1.7993197278911566, "no_speech_prob": 0.09706809371709824}, {"id": 4, "seek": 2426, "start": 31.46, "end": 35.660000000000004, "text": " and why we need them. The general boot flow when you boot a kernel is you start with a", "tokens": [50724, 293, 983, 321, 643, 552, 13, 440, 2674, 11450, 3095, 562, 291, 11450, 257, 28256, 307, 291, 722, 365, 257, 50934], "temperature": 0.0, "avg_logprob": -0.2049900311142651, "compression_ratio": 1.7993197278911566, "no_speech_prob": 0.09706809371709824}, {"id": 5, "seek": 2426, "start": 35.660000000000004, "end": 40.400000000000006, "text": " boot loader. The boot loader goes to the kernel. The kernel is then responsible for finding", "tokens": [50934, 11450, 3677, 260, 13, 440, 11450, 3677, 260, 1709, 281, 264, 28256, 13, 440, 28256, 307, 550, 6250, 337, 5006, 51171], "temperature": 0.0, "avg_logprob": -0.2049900311142651, "compression_ratio": 1.7993197278911566, "no_speech_prob": 0.09706809371709824}, {"id": 6, "seek": 2426, "start": 40.400000000000006, "end": 44.2, "text": " the root file system. And in the early days of Linux this was pretty easy and the kernel", "tokens": [51171, 264, 5593, 3991, 1185, 13, 400, 294, 264, 2440, 1708, 295, 18734, 341, 390, 1238, 1858, 293, 264, 28256, 51361], "temperature": 0.0, "avg_logprob": -0.2049900311142651, "compression_ratio": 1.7993197278911566, "no_speech_prob": 0.09706809371709824}, {"id": 7, "seek": 2426, "start": 44.2, "end": 49.480000000000004, "text": " could do it itself. But these days finding the root file system is a lot more complicated.", "tokens": [51361, 727, 360, 309, 2564, 13, 583, 613, 1708, 5006, 264, 5593, 3991, 1185, 307, 257, 688, 544, 6179, 13, 51625], "temperature": 0.0, "avg_logprob": -0.2049900311142651, "compression_ratio": 1.7993197278911566, "no_speech_prob": 0.09706809371709824}, {"id": 8, "seek": 2426, "start": 49.480000000000004, "end": 52.34, "text": " So the kernel really said we're not going to solve that problem. We'll just leave it", "tokens": [51625, 407, 264, 28256, 534, 848, 321, 434, 406, 516, 281, 5039, 300, 1154, 13, 492, 603, 445, 1856, 309, 51768], "temperature": 0.0, "avg_logprob": -0.2049900311142651, "compression_ratio": 1.7993197278911566, "no_speech_prob": 0.09706809371709824}, {"id": 9, "seek": 5234, "start": 52.42, "end": 58.92, "text": " to user space. How do they do that? Well, you give a file system to the kernel, which", "tokens": [50368, 281, 4195, 1901, 13, 1012, 360, 436, 360, 300, 30, 1042, 11, 291, 976, 257, 3991, 1185, 281, 264, 28256, 11, 597, 50693], "temperature": 0.0, "avg_logprob": -0.1987188896246716, "compression_ratio": 1.8451882845188285, "no_speech_prob": 0.024109719321131706}, {"id": 10, "seek": 5234, "start": 58.92, "end": 64.98, "text": " is called the inner MFS. You do that via CPIO. The kernel will unpack that and then start", "tokens": [50693, 307, 1219, 264, 7284, 376, 29318, 13, 509, 360, 300, 5766, 22431, 15167, 13, 440, 28256, 486, 26699, 300, 293, 550, 722, 50996], "temperature": 0.0, "avg_logprob": -0.1987188896246716, "compression_ratio": 1.8451882845188285, "no_speech_prob": 0.024109719321131706}, {"id": 11, "seek": 5234, "start": 64.98, "end": 70.9, "text": " user space in that temporary file system, which is unpacked in memory. And then once", "tokens": [50996, 4195, 1901, 294, 300, 13413, 3991, 1185, 11, 597, 307, 26699, 292, 294, 4675, 13, 400, 550, 1564, 51292], "temperature": 0.0, "avg_logprob": -0.1987188896246716, "compression_ratio": 1.8451882845188285, "no_speech_prob": 0.024109719321131706}, {"id": 12, "seek": 5234, "start": 70.9, "end": 76.54, "text": " you go into that, the inner MFS is responsible for finding the actual root file system and", "tokens": [51292, 291, 352, 666, 300, 11, 264, 7284, 376, 29318, 307, 6250, 337, 5006, 264, 3539, 5593, 3991, 1185, 293, 51574], "temperature": 0.0, "avg_logprob": -0.1987188896246716, "compression_ratio": 1.8451882845188285, "no_speech_prob": 0.024109719321131706}, {"id": 13, "seek": 5234, "start": 76.54, "end": 82.02000000000001, "text": " then doing a switch root operation into it. And then you end up in the final file system.", "tokens": [51574, 550, 884, 257, 3679, 5593, 6916, 666, 309, 13, 400, 550, 291, 917, 493, 294, 264, 2572, 3991, 1185, 13, 51848], "temperature": 0.0, "avg_logprob": -0.1987188896246716, "compression_ratio": 1.8451882845188285, "no_speech_prob": 0.024109719321131706}, {"id": 14, "seek": 8202, "start": 82.46, "end": 88.14, "text": " And the inner MFS can do what it wants really, but generally these days it's done in one", "tokens": [50386, 400, 264, 7284, 376, 29318, 393, 360, 437, 309, 2738, 534, 11, 457, 5101, 613, 1708, 309, 311, 1096, 294, 472, 50670], "temperature": 0.0, "avg_logprob": -0.23255676782431722, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.0038512779865413904}, {"id": 15, "seek": 8202, "start": 88.14, "end": 95.14, "text": " of two ways. So the first one is that some bespoke bash script gets invoked, which is", "tokens": [50670, 295, 732, 2098, 13, 407, 264, 700, 472, 307, 300, 512, 4097, 48776, 46183, 5755, 2170, 1048, 9511, 11, 597, 307, 51020], "temperature": 0.0, "avg_logprob": -0.23255676782431722, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.0038512779865413904}, {"id": 16, "seek": 8202, "start": 95.14, "end": 100.69999999999999, "text": " generated by your inner MFS generator. So these are tools like Drakeit, like inner MFS", "tokens": [51020, 10833, 538, 428, 7284, 376, 29318, 19265, 13, 407, 613, 366, 3873, 411, 27465, 270, 11, 411, 7284, 376, 29318, 51298], "temperature": 0.0, "avg_logprob": -0.23255676782431722, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.0038512779865413904}, {"id": 17, "seek": 8202, "start": 100.69999999999999, "end": 107.14, "text": " tools on Debian, or make it in, make in its CPIO on Arch Linux and derivatives. The other", "tokens": [51298, 3873, 322, 1346, 20196, 11, 420, 652, 309, 294, 11, 652, 294, 1080, 22431, 15167, 322, 10984, 18734, 293, 33733, 13, 440, 661, 51620], "temperature": 0.0, "avg_logprob": -0.23255676782431722, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.0038512779865413904}, {"id": 18, "seek": 8202, "start": 107.14, "end": 111.86, "text": " way you can do it these days is by using systemd. So systemd has for a very long time", "tokens": [51620, 636, 291, 393, 360, 309, 613, 1708, 307, 538, 1228, 1185, 67, 13, 407, 1185, 67, 575, 337, 257, 588, 938, 565, 51856], "temperature": 0.0, "avg_logprob": -0.23255676782431722, "compression_ratio": 1.6807692307692308, "no_speech_prob": 0.0038512779865413904}, {"id": 19, "seek": 11186, "start": 111.9, "end": 117.3, "text": " already supported running in the inner MFS. And it has all the tools and services you need", "tokens": [50366, 1217, 8104, 2614, 294, 264, 7284, 376, 29318, 13, 400, 309, 575, 439, 264, 3873, 293, 3328, 291, 643, 50636], "temperature": 0.0, "avg_logprob": -0.16169296140256134, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011365101672708988}, {"id": 20, "seek": 11186, "start": 117.3, "end": 123.82, "text": " to find the root file system and switch root into it. And some of the inner MFS generation", "tokens": [50636, 281, 915, 264, 5593, 3991, 1185, 293, 3679, 5593, 666, 309, 13, 400, 512, 295, 264, 7284, 376, 29318, 5125, 50962], "temperature": 0.0, "avg_logprob": -0.16169296140256134, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011365101672708988}, {"id": 21, "seek": 11186, "start": 123.82, "end": 130.22, "text": " tools actually don't like, are configurable, so you can either use the bash script or you", "tokens": [50962, 3873, 767, 500, 380, 411, 11, 366, 22192, 712, 11, 370, 291, 393, 2139, 764, 264, 46183, 5755, 420, 291, 51282], "temperature": 0.0, "avg_logprob": -0.16169296140256134, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011365101672708988}, {"id": 22, "seek": 11186, "start": 130.22, "end": 137.22, "text": " can choose to use systemd in the inner MFS. So I'll add to this that the amount of stuff", "tokens": [51282, 393, 2826, 281, 764, 1185, 67, 294, 264, 7284, 376, 29318, 13, 407, 286, 603, 909, 281, 341, 300, 264, 2372, 295, 1507, 51632], "temperature": 0.0, "avg_logprob": -0.16169296140256134, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011365101672708988}, {"id": 23, "seek": 13722, "start": 138.22, "end": 145.22, "text": " that needs to happen for the root file system to be available is growing more complex all", "tokens": [50414, 300, 2203, 281, 1051, 337, 264, 5593, 3991, 1185, 281, 312, 2435, 307, 4194, 544, 3997, 439, 50764], "temperature": 0.0, "avg_logprob": -0.2863098543081711, "compression_ratio": 1.46448087431694, "no_speech_prob": 0.021481158211827278}, {"id": 24, "seek": 13722, "start": 145.82, "end": 152.82, "text": " the time. So we have encryption, we have RAID, device mapper, possibly the invariity. And", "tokens": [50794, 264, 565, 13, 407, 321, 362, 29575, 11, 321, 362, 14626, 2777, 11, 4302, 463, 3717, 11, 6264, 264, 33270, 507, 13, 400, 51144], "temperature": 0.0, "avg_logprob": -0.2863098543081711, "compression_ratio": 1.46448087431694, "no_speech_prob": 0.021481158211827278}, {"id": 25, "seek": 13722, "start": 157.42, "end": 162.62, "text": " in the theme of previous, previous talk, we for example might at some point ask the user", "tokens": [51374, 294, 264, 6314, 295, 3894, 11, 3894, 751, 11, 321, 337, 1365, 1062, 412, 512, 935, 1029, 264, 4195, 51634], "temperature": 0.0, "avg_logprob": -0.2863098543081711, "compression_ratio": 1.46448087431694, "no_speech_prob": 0.021481158211827278}, {"id": 26, "seek": 16262, "start": 162.62, "end": 167.82, "text": " for a password, but the user might not be using a keyboard, they might be using a braille", "tokens": [50364, 337, 257, 11524, 11, 457, 264, 4195, 1062, 406, 312, 1228, 257, 10186, 11, 436, 1062, 312, 1228, 257, 1548, 3409, 50624], "temperature": 0.0, "avg_logprob": -0.20415494633817124, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.04633558914065361}, {"id": 27, "seek": 16262, "start": 167.82, "end": 174.82, "text": " device or they might need a screen reader to know that the password prompt is up. And", "tokens": [50624, 4302, 420, 436, 1062, 643, 257, 2568, 15149, 281, 458, 300, 264, 11524, 12391, 307, 493, 13, 400, 50974], "temperature": 0.0, "avg_logprob": -0.20415494633817124, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.04633558914065361}, {"id": 28, "seek": 16262, "start": 178.34, "end": 183.74, "text": " all of this stuff will sooner or later need to be available very early in the boot before", "tokens": [51150, 439, 295, 341, 1507, 486, 15324, 420, 1780, 643, 281, 312, 2435, 588, 2440, 294, 264, 11450, 949, 51420], "temperature": 0.0, "avg_logprob": -0.20415494633817124, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.04633558914065361}, {"id": 29, "seek": 16262, "start": 183.74, "end": 189.06, "text": " the system is reader. Yeah, well I'll add to that that your root file system might not", "tokens": [51420, 264, 1185, 307, 15149, 13, 865, 11, 731, 286, 603, 909, 281, 300, 300, 428, 5593, 3991, 1185, 1062, 406, 51686], "temperature": 0.0, "avg_logprob": -0.20415494633817124, "compression_ratio": 1.6761904761904762, "no_speech_prob": 0.04633558914065361}, {"id": 30, "seek": 18906, "start": 189.18, "end": 192.42000000000002, "text": " even be there on the system yet, it might have to come from the network. So you would", "tokens": [50370, 754, 312, 456, 322, 264, 1185, 1939, 11, 309, 1062, 362, 281, 808, 490, 264, 3209, 13, 407, 291, 576, 50532], "temperature": 0.0, "avg_logprob": -0.25082428172483284, "compression_ratio": 1.6814814814814816, "no_speech_prob": 0.16178716719150543}, {"id": 31, "seek": 18906, "start": 192.42000000000002, "end": 196.66, "text": " need all the tools to set up a network connection and everything in your inner MFS. So it can", "tokens": [50532, 643, 439, 264, 3873, 281, 992, 493, 257, 3209, 4984, 293, 1203, 294, 428, 7284, 376, 29318, 13, 407, 309, 393, 50744], "temperature": 0.0, "avg_logprob": -0.25082428172483284, "compression_ratio": 1.6814814814814816, "no_speech_prob": 0.16178716719150543}, {"id": 32, "seek": 18906, "start": 196.66, "end": 203.66, "text": " get pretty complicated. So what's the status quo? Like I said, we have the inner MFS generation", "tokens": [50744, 483, 1238, 6179, 13, 407, 437, 311, 264, 6558, 28425, 30, 1743, 286, 848, 11, 321, 362, 264, 7284, 376, 29318, 5125, 51094], "temperature": 0.0, "avg_logprob": -0.25082428172483284, "compression_ratio": 1.6814814814814816, "no_speech_prob": 0.16178716719150543}, {"id": 33, "seek": 18906, "start": 203.66, "end": 208.38, "text": " tools like Drakeit, Makein' the CPIO, inner MFS tools. And the way these tools work is", "tokens": [51094, 3873, 411, 27465, 270, 11, 4387, 259, 6, 264, 22431, 15167, 11, 7284, 376, 29318, 3873, 13, 400, 264, 636, 613, 3873, 589, 307, 51330], "temperature": 0.0, "avg_logprob": -0.25082428172483284, "compression_ratio": 1.6814814814814816, "no_speech_prob": 0.16178716719150543}, {"id": 34, "seek": 18906, "start": 208.38, "end": 213.38, "text": " they basically go look at your host file system, what's on there and they start picking out", "tokens": [51330, 436, 1936, 352, 574, 412, 428, 3975, 3991, 1185, 11, 437, 311, 322, 456, 293, 436, 722, 8867, 484, 51580], "temperature": 0.0, "avg_logprob": -0.25082428172483284, "compression_ratio": 1.6814814814814816, "no_speech_prob": 0.16178716719150543}, {"id": 35, "seek": 21338, "start": 213.42, "end": 220.42, "text": " specific files and use that to make the inner MFS. Which files to pick is, becomes specific", "tokens": [50366, 2685, 7098, 293, 764, 300, 281, 652, 264, 7284, 376, 29318, 13, 3013, 7098, 281, 1888, 307, 11, 3643, 2685, 50716], "temperature": 0.0, "avg_logprob": -0.18842269099035927, "compression_ratio": 1.7024390243902439, "no_speech_prob": 0.01788991130888462}, {"id": 36, "seek": 21338, "start": 223.5, "end": 230.5, "text": " logic for each inner MFS generator. So the thing you need to know is that if you say", "tokens": [50870, 9952, 337, 1184, 7284, 376, 29318, 19265, 13, 407, 264, 551, 291, 643, 281, 458, 307, 300, 498, 291, 584, 51220], "temperature": 0.0, "avg_logprob": -0.18842269099035927, "compression_ratio": 1.7024390243902439, "no_speech_prob": 0.01788991130888462}, {"id": 37, "seek": 21338, "start": 230.5, "end": 235.74, "text": " like include this binary on the inner MFS, that's not going to work because that binary", "tokens": [51220, 411, 4090, 341, 17434, 322, 264, 7284, 376, 29318, 11, 300, 311, 406, 516, 281, 589, 570, 300, 17434, 51482], "temperature": 0.0, "avg_logprob": -0.18842269099035927, "compression_ratio": 1.7024390243902439, "no_speech_prob": 0.01788991130888462}, {"id": 38, "seek": 21338, "start": 235.74, "end": 241.14, "text": " has library dependencies. So you also need to go get all the libraries and of course", "tokens": [51482, 575, 6405, 36606, 13, 407, 291, 611, 643, 281, 352, 483, 439, 264, 15148, 293, 295, 1164, 51752], "temperature": 0.0, "avg_logprob": -0.18842269099035927, "compression_ratio": 1.7024390243902439, "no_speech_prob": 0.01788991130888462}, {"id": 39, "seek": 24114, "start": 241.17999999999998, "end": 245.5, "text": " those libraries can depend on more libraries and so forth and so forth and so forth. So", "tokens": [50366, 729, 15148, 393, 5672, 322, 544, 15148, 293, 370, 5220, 293, 370, 5220, 293, 370, 5220, 13, 407, 50582], "temperature": 0.0, "avg_logprob": -0.16812673950195312, "compression_ratio": 1.903225806451613, "no_speech_prob": 0.001890566200017929}, {"id": 40, "seek": 24114, "start": 245.5, "end": 249.98, "text": " you need logic to make sure all those things get picked up correctly. Now luckily for ELF", "tokens": [50582, 291, 643, 9952, 281, 652, 988, 439, 729, 721, 483, 6183, 493, 8944, 13, 823, 22880, 337, 14426, 37, 50806], "temperature": 0.0, "avg_logprob": -0.16812673950195312, "compression_ratio": 1.903225806451613, "no_speech_prob": 0.001890566200017929}, {"id": 41, "seek": 24114, "start": 249.98, "end": 255.66, "text": " binaries you can actually in a pretty hacky way do that by just going to look at the ELF", "tokens": [50806, 5171, 4889, 291, 393, 767, 294, 257, 1238, 10339, 88, 636, 360, 300, 538, 445, 516, 281, 574, 412, 264, 14426, 37, 51090], "temperature": 0.0, "avg_logprob": -0.16812673950195312, "compression_ratio": 1.903225806451613, "no_speech_prob": 0.001890566200017929}, {"id": 42, "seek": 24114, "start": 255.66, "end": 259.3, "text": " binary where all the library dependencies are recorded and trying to figure out stuff", "tokens": [51090, 17434, 689, 439, 264, 6405, 36606, 366, 8287, 293, 1382, 281, 2573, 484, 1507, 51272], "temperature": 0.0, "avg_logprob": -0.16812673950195312, "compression_ratio": 1.903225806451613, "no_speech_prob": 0.001890566200017929}, {"id": 43, "seek": 24114, "start": 259.3, "end": 264.7, "text": " that way. But then you get into stuff like DL Open where the library might not actually", "tokens": [51272, 300, 636, 13, 583, 550, 291, 483, 666, 1507, 411, 413, 43, 7238, 689, 264, 6405, 1062, 406, 767, 51542], "temperature": 0.0, "avg_logprob": -0.16812673950195312, "compression_ratio": 1.903225806451613, "no_speech_prob": 0.001890566200017929}, {"id": 44, "seek": 24114, "start": 264.7, "end": 270.86, "text": " be listed in the ELF binary. Or you get into stuff like configuration files or other kinds", "tokens": [51542, 312, 10052, 294, 264, 14426, 37, 17434, 13, 1610, 291, 483, 666, 1507, 411, 11694, 7098, 420, 661, 3685, 51850], "temperature": 0.0, "avg_logprob": -0.16812673950195312, "compression_ratio": 1.903225806451613, "no_speech_prob": 0.001890566200017929}, {"id": 45, "seek": 27086, "start": 270.90000000000003, "end": 276.34000000000003, "text": " of plugins or anything you can think of. There's no direct dependencies listed in the file", "tokens": [50366, 295, 33759, 420, 1340, 291, 393, 519, 295, 13, 821, 311, 572, 2047, 36606, 10052, 294, 264, 3991, 50638], "temperature": 0.0, "avg_logprob": -0.193669541973934, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.004491431172937155}, {"id": 46, "seek": 27086, "start": 276.34000000000003, "end": 282.3, "text": " system that you can use to figure out all these things that need to be included. So", "tokens": [50638, 1185, 300, 291, 393, 764, 281, 2573, 484, 439, 613, 721, 300, 643, 281, 312, 5556, 13, 407, 50936], "temperature": 0.0, "avg_logprob": -0.193669541973934, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.004491431172937155}, {"id": 47, "seek": 27086, "start": 282.3, "end": 289.3, "text": " you can get into quite a few issues. So this leads to having regular packaging when a new", "tokens": [50936, 291, 393, 483, 666, 1596, 257, 1326, 2663, 13, 407, 341, 6689, 281, 1419, 3890, 16836, 562, 257, 777, 51286], "temperature": 0.0, "avg_logprob": -0.193669541973934, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.004491431172937155}, {"id": 48, "seek": 27086, "start": 289.3, "end": 293.3, "text": " piece of software is released that is used in the inner MFS where the package build or", "tokens": [51286, 2522, 295, 4722, 307, 4736, 300, 307, 1143, 294, 264, 7284, 376, 29318, 689, 264, 7372, 1322, 420, 51486], "temperature": 0.0, "avg_logprob": -0.193669541973934, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.004491431172937155}, {"id": 49, "seek": 27086, "start": 293.3, "end": 300.3, "text": " the WNDEP or the RPMs pack gets updated. And then you get into inner MFS specific packages", "tokens": [51486, 264, 343, 45, 35, 8929, 420, 264, 14105, 26386, 2844, 2170, 10588, 13, 400, 550, 291, 483, 666, 7284, 376, 29318, 2685, 17401, 51836], "temperature": 0.0, "avg_logprob": -0.193669541973934, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.004491431172937155}, {"id": 50, "seek": 30086, "start": 300.90000000000003, "end": 304.86, "text": " that you can use to do the packaging. So for example Drakeit. A very good example of this", "tokens": [50366, 300, 291, 393, 764, 281, 360, 264, 16836, 13, 407, 337, 1365, 27465, 270, 13, 316, 588, 665, 1365, 295, 341, 50564], "temperature": 0.0, "avg_logprob": -0.31412976128714426, "compression_ratio": 1.7088122605363985, "no_speech_prob": 0.01073503214865923}, {"id": 51, "seek": 30086, "start": 304.86, "end": 310.86, "text": " is when we introduced systemd executor in systemd which is now required to launch services.", "tokens": [50564, 307, 562, 321, 7268, 1185, 67, 7568, 284, 294, 1185, 67, 597, 307, 586, 4739, 281, 4025, 3328, 13, 50864], "temperature": 0.0, "avg_logprob": -0.31412976128714426, "compression_ratio": 1.7088122605363985, "no_speech_prob": 0.01073503214865923}, {"id": 52, "seek": 30086, "start": 310.86, "end": 316.86, "text": " So this was a new binary. So when we released a new version all the specs were updated. And", "tokens": [50864, 407, 341, 390, 257, 777, 17434, 13, 407, 562, 321, 4736, 257, 777, 3037, 439, 264, 27911, 645, 10588, 13, 400, 51164], "temperature": 0.0, "avg_logprob": -0.31412976128714426, "compression_ratio": 1.7088122605363985, "no_speech_prob": 0.01073503214865923}, {"id": 53, "seek": 30086, "start": 316.86, "end": 320.86, "text": " then we also had to update every inner MFS generation tool to make sure to include that", "tokens": [51164, 550, 321, 611, 632, 281, 5623, 633, 7284, 376, 29318, 5125, 2290, 281, 652, 988, 281, 4090, 300, 51364], "temperature": 0.0, "avg_logprob": -0.31412976128714426, "compression_ratio": 1.7088122605363985, "no_speech_prob": 0.01073503214865923}, {"id": 54, "seek": 30086, "start": 320.86, "end": 325.86, "text": " binary in the inner MFS. And this leads to quite a few bugs. It also means that when", "tokens": [51364, 17434, 294, 264, 7284, 376, 29318, 13, 400, 341, 6689, 281, 1596, 257, 1326, 15120, 13, 467, 611, 1355, 300, 562, 51614], "temperature": 0.0, "avg_logprob": -0.31412976128714426, "compression_ratio": 1.7088122605363985, "no_speech_prob": 0.01073503214865923}, {"id": 55, "seek": 32586, "start": 325.86, "end": 331.86, "text": " it becomes very unclear where the bug should be reported. It could either be bug in the upstream project", "tokens": [50364, 309, 3643, 588, 25636, 689, 264, 7426, 820, 312, 7055, 13, 467, 727, 2139, 312, 7426, 294, 264, 33915, 1716, 50664], "temperature": 0.0, "avg_logprob": -0.1360958318794723, "compression_ratio": 1.8120300751879699, "no_speech_prob": 0.020373165607452393}, {"id": 56, "seek": 32586, "start": 331.86, "end": 337.86, "text": " or it could be the inner MFS generation tool that's not correctly picking up all the dependencies", "tokens": [50664, 420, 309, 727, 312, 264, 7284, 376, 29318, 5125, 2290, 300, 311, 406, 8944, 8867, 493, 439, 264, 36606, 50964], "temperature": 0.0, "avg_logprob": -0.1360958318794723, "compression_ratio": 1.8120300751879699, "no_speech_prob": 0.020373165607452393}, {"id": 57, "seek": 32586, "start": 337.86, "end": 342.86, "text": " required to run the tool. So it becomes very hard to assign bugs and requires a lot of", "tokens": [50964, 4739, 281, 1190, 264, 2290, 13, 407, 309, 3643, 588, 1152, 281, 6269, 15120, 293, 7029, 257, 688, 295, 51214], "temperature": 0.0, "avg_logprob": -0.1360958318794723, "compression_ratio": 1.8120300751879699, "no_speech_prob": 0.020373165607452393}, {"id": 58, "seek": 32586, "start": 342.86, "end": 349.86, "text": " triaging to get the bugs to the right project. It's also hard to customize. If you want to", "tokens": [51214, 1376, 3568, 281, 483, 264, 15120, 281, 264, 558, 1716, 13, 467, 311, 611, 1152, 281, 19734, 13, 759, 291, 528, 281, 51564], "temperature": 0.0, "avg_logprob": -0.1360958318794723, "compression_ratio": 1.8120300751879699, "no_speech_prob": 0.020373165607452393}, {"id": 59, "seek": 32586, "start": 349.86, "end": 354.86, "text": " include something it's up to you to figure out all the dependencies and specify them in the inner MFS", "tokens": [51564, 4090, 746, 309, 311, 493, 281, 291, 281, 2573, 484, 439, 264, 36606, 293, 16500, 552, 294, 264, 7284, 376, 29318, 51814], "temperature": 0.0, "avg_logprob": -0.1360958318794723, "compression_ratio": 1.8120300751879699, "no_speech_prob": 0.020373165607452393}, {"id": 60, "seek": 35486, "start": 354.86, "end": 360.86, "text": " generation tool to be included. And of course it's also quite slow because every time the inner MFS is", "tokens": [50364, 5125, 2290, 281, 312, 5556, 13, 400, 295, 1164, 309, 311, 611, 1596, 2964, 570, 633, 565, 264, 7284, 376, 29318, 307, 50664], "temperature": 0.0, "avg_logprob": -0.12703995852126287, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.00666487542912364}, {"id": 61, "seek": 35486, "start": 360.86, "end": 365.86, "text": " updated it has to be done locally. And all the dependencies have to be figured out. And anyone that's", "tokens": [50664, 10588, 309, 575, 281, 312, 1096, 16143, 13, 400, 439, 264, 36606, 362, 281, 312, 8932, 484, 13, 400, 2878, 300, 311, 50914], "temperature": 0.0, "avg_logprob": -0.12703995852126287, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.00666487542912364}, {"id": 62, "seek": 35486, "start": 365.86, "end": 372.86, "text": " ever used Drakeit and not used host only mode probably knows what I'm talking about because it takes forever.", "tokens": [50914, 1562, 1143, 27465, 270, 293, 406, 1143, 3975, 787, 4391, 1391, 3255, 437, 286, 478, 1417, 466, 570, 309, 2516, 5680, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12703995852126287, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.00666487542912364}, {"id": 63, "seek": 35486, "start": 372.86, "end": 380.86, "text": " So what do we want to do instead? We want to reuse all the work that the distributions are already", "tokens": [51264, 407, 437, 360, 321, 528, 281, 360, 2602, 30, 492, 528, 281, 26225, 439, 264, 589, 300, 264, 37870, 366, 1217, 51664], "temperature": 0.0, "avg_logprob": -0.12703995852126287, "compression_ratio": 1.619607843137255, "no_speech_prob": 0.00666487542912364}, {"id": 64, "seek": 38086, "start": 380.86, "end": 387.86, "text": " doing with their packaging. So the Arch package builds, the RPM specs, everything. We want to reuse all the", "tokens": [50364, 884, 365, 641, 16836, 13, 407, 264, 10984, 7372, 15182, 11, 264, 37389, 27911, 11, 1203, 13, 492, 528, 281, 26225, 439, 264, 50714], "temperature": 0.0, "avg_logprob": -0.14725694923757393, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.07965117692947388}, {"id": 65, "seek": 38086, "start": 387.86, "end": 393.86, "text": " work that goes into those and use those to build the inner MFS. So instead of going to look at the host file", "tokens": [50714, 589, 300, 1709, 666, 729, 293, 764, 729, 281, 1322, 264, 7284, 376, 29318, 13, 407, 2602, 295, 516, 281, 574, 412, 264, 3975, 3991, 51014], "temperature": 0.0, "avg_logprob": -0.14725694923757393, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.07965117692947388}, {"id": 66, "seek": 38086, "start": 393.86, "end": 400.86, "text": " system we just install RPMs, install dApps, install packages, Arch Linux packages into the inner MFS and we", "tokens": [51014, 1185, 321, 445, 3625, 14105, 26386, 11, 3625, 274, 9132, 82, 11, 3625, 17401, 11, 10984, 18734, 17401, 666, 264, 7284, 376, 29318, 293, 321, 51364], "temperature": 0.0, "avg_logprob": -0.14725694923757393, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.07965117692947388}, {"id": 67, "seek": 38086, "start": 400.86, "end": 409.86, "text": " get it out that way. And this has a few advantages. For example, package managers, it turns out that package", "tokens": [51364, 483, 309, 484, 300, 636, 13, 400, 341, 575, 257, 1326, 14906, 13, 1171, 1365, 11, 7372, 14084, 11, 309, 4523, 484, 300, 7372, 51814], "temperature": 0.0, "avg_logprob": -0.14725694923757393, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.07965117692947388}, {"id": 68, "seek": 40986, "start": 409.86, "end": 417.86, "text": " managers are very good at installing packages. So it just works. They're also good at managing dependencies. So all", "tokens": [50364, 14084, 366, 588, 665, 412, 20762, 17401, 13, 407, 309, 445, 1985, 13, 814, 434, 611, 665, 412, 11642, 36606, 13, 407, 439, 50764], "temperature": 0.0, "avg_logprob": -0.12143907685210739, "compression_ratio": 1.7880434782608696, "no_speech_prob": 0.026841729879379272}, {"id": 69, "seek": 40986, "start": 417.86, "end": 425.86, "text": " these systems have, depending on the package manager, very extensive or at least very sane dependency", "tokens": [50764, 613, 3652, 362, 11, 5413, 322, 264, 7372, 6598, 11, 588, 13246, 420, 412, 1935, 588, 45610, 33621, 51164], "temperature": 0.0, "avg_logprob": -0.12143907685210739, "compression_ratio": 1.7880434782608696, "no_speech_prob": 0.026841729879379272}, {"id": 70, "seek": 40986, "start": 425.86, "end": 432.86, "text": " resolution. So all the dependencies get listed and the package manager takes care of figuring out all the extra", "tokens": [51164, 8669, 13, 407, 439, 264, 36606, 483, 10052, 293, 264, 7372, 6598, 2516, 1127, 295, 15213, 484, 439, 264, 2857, 51514], "temperature": 0.0, "avg_logprob": -0.12143907685210739, "compression_ratio": 1.7880434782608696, "no_speech_prob": 0.026841729879379272}, {"id": 71, "seek": 43286, "start": 432.86, "end": 439.86, "text": " stuff that is needed and make sure that gets installed as well. You don't need to go parsing ELF binaries anymore to figure", "tokens": [50364, 1507, 300, 307, 2978, 293, 652, 988, 300, 2170, 8899, 382, 731, 13, 509, 500, 380, 643, 281, 352, 21156, 278, 14426, 37, 5171, 4889, 3602, 281, 2573, 50714], "temperature": 0.0, "avg_logprob": -0.07617827824183873, "compression_ratio": 1.8611111111111112, "no_speech_prob": 0.07889777421951294}, {"id": 72, "seek": 43286, "start": 439.86, "end": 447.86, "text": " out the dependencies of a specific package. You don't need to learn another system. So you don't need to learn the", "tokens": [50714, 484, 264, 36606, 295, 257, 2685, 7372, 13, 509, 500, 380, 643, 281, 1466, 1071, 1185, 13, 407, 291, 500, 380, 643, 281, 1466, 264, 51114], "temperature": 0.0, "avg_logprob": -0.07617827824183873, "compression_ratio": 1.8611111111111112, "no_speech_prob": 0.07889777421951294}, {"id": 73, "seek": 43286, "start": 447.86, "end": 452.86, "text": " inner MFS generation tool. You don't need to manually start listing the dependencies of the tool you want to include.", "tokens": [51114, 7284, 376, 29318, 5125, 2290, 13, 509, 500, 380, 643, 281, 16945, 722, 22161, 264, 36606, 295, 264, 2290, 291, 528, 281, 4090, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07617827824183873, "compression_ratio": 1.8611111111111112, "no_speech_prob": 0.07889777421951294}, {"id": 74, "seek": 43286, "start": 452.86, "end": 458.86, "text": " You just install the RPM, the package, the dApp, whatever you want and the package manager takes care of all the", "tokens": [51364, 509, 445, 3625, 264, 37389, 11, 264, 7372, 11, 264, 274, 9132, 11, 2035, 291, 528, 293, 264, 7372, 6598, 2516, 1127, 295, 439, 264, 51664], "temperature": 0.0, "avg_logprob": -0.07617827824183873, "compression_ratio": 1.8611111111111112, "no_speech_prob": 0.07889777421951294}, {"id": 75, "seek": 45886, "start": 458.86, "end": 466.86, "text": " rest. The ownership of bugs becomes clearer because the inner MFS generation tool is just installing packages. It's", "tokens": [50364, 1472, 13, 440, 15279, 295, 15120, 3643, 26131, 570, 264, 7284, 376, 29318, 5125, 2290, 307, 445, 20762, 17401, 13, 467, 311, 50764], "temperature": 0.0, "avg_logprob": -0.1176573939439727, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.16765518486499786}, {"id": 76, "seek": 45886, "start": 466.86, "end": 475.86, "text": " pretty simple. So there's a, the surface area for bugs is a lot smaller and generally when bugs appear, they're going to be", "tokens": [50764, 1238, 2199, 13, 407, 456, 311, 257, 11, 264, 3753, 1859, 337, 15120, 307, 257, 688, 4356, 293, 5101, 562, 15120, 4204, 11, 436, 434, 516, 281, 312, 51214], "temperature": 0.0, "avg_logprob": -0.1176573939439727, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.16765518486499786}, {"id": 77, "seek": 45886, "start": 475.86, "end": 483.86, "text": " able to be assigned to the upstream project instead of to the inner MFS generation tool. If any improvements are made to", "tokens": [51214, 1075, 281, 312, 13279, 281, 264, 33915, 1716, 2602, 295, 281, 264, 7284, 376, 29318, 5125, 2290, 13, 759, 604, 13797, 366, 1027, 281, 51614], "temperature": 0.0, "avg_logprob": -0.1176573939439727, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.16765518486499786}, {"id": 78, "seek": 48386, "start": 483.86, "end": 491.86, "text": " the packaging, of course, they automatically end up in the inner MFS as well. And finally, by doing this approach, the inner MFS is", "tokens": [50364, 264, 16836, 11, 295, 1164, 11, 436, 6772, 917, 493, 294, 264, 7284, 376, 29318, 382, 731, 13, 400, 2721, 11, 538, 884, 341, 3109, 11, 264, 7284, 376, 29318, 307, 50764], "temperature": 0.0, "avg_logprob": -0.11260464986165365, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.17435385286808014}, {"id": 79, "seek": 48386, "start": 491.86, "end": 500.86, "text": " not tied anymore to the root file system or the host file system. So you can also start building the inner ID off-host on a", "tokens": [50764, 406, 9601, 3602, 281, 264, 5593, 3991, 1185, 420, 264, 3975, 3991, 1185, 13, 407, 291, 393, 611, 722, 2390, 264, 7284, 7348, 766, 12, 6037, 322, 257, 51214], "temperature": 0.0, "avg_logprob": -0.11260464986165365, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.17435385286808014}, {"id": 80, "seek": 48386, "start": 500.86, "end": 509.86, "text": " distribution builder and distribute it as a package. So you can just download an inner ID instead of generating one locally.", "tokens": [51214, 7316, 27377, 293, 20594, 309, 382, 257, 7372, 13, 407, 291, 393, 445, 5484, 364, 7284, 7348, 2602, 295, 17746, 472, 16143, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11260464986165365, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.17435385286808014}, {"id": 81, "seek": 50986, "start": 509.86, "end": 516.86, "text": " Assuming that the inner ID includes all the necessary pieces, this allows you to just have an inner ID that works for 99% of use cases", "tokens": [50364, 6281, 24919, 300, 264, 7284, 7348, 5974, 439, 264, 4818, 3755, 11, 341, 4045, 291, 281, 445, 362, 364, 7284, 7348, 300, 1985, 337, 11803, 4, 295, 764, 3331, 50714], "temperature": 0.0, "avg_logprob": -0.08695903884039985, "compression_ratio": 1.6487603305785123, "no_speech_prob": 0.04187105596065521}, {"id": 82, "seek": 50986, "start": 516.86, "end": 528.86, "text": " without every user having to spend CPU power to build at inner ID themselves. So there is some, some requirements are needed to build", "tokens": [50714, 1553, 633, 4195, 1419, 281, 3496, 13199, 1347, 281, 1322, 412, 7284, 7348, 2969, 13, 407, 456, 307, 512, 11, 512, 7728, 366, 2978, 281, 1322, 51314], "temperature": 0.0, "avg_logprob": -0.08695903884039985, "compression_ratio": 1.6487603305785123, "no_speech_prob": 0.04187105596065521}, {"id": 83, "seek": 50986, "start": 528.86, "end": 536.86, "text": " the inner MFS out of packages. Specifically, this means that the packaging has to be done a little carefully to make sure that the", "tokens": [51314, 264, 7284, 376, 29318, 484, 295, 17401, 13, 26058, 11, 341, 1355, 300, 264, 16836, 575, 281, 312, 1096, 257, 707, 7500, 281, 652, 988, 300, 264, 51714], "temperature": 0.0, "avg_logprob": -0.08695903884039985, "compression_ratio": 1.6487603305785123, "no_speech_prob": 0.04187105596065521}, {"id": 84, "seek": 53686, "start": 536.86, "end": 547.86, "text": " inner MFS does not become too big. For example, GCClips, so GCC ships a bunch of libraries which are generally dependent on by", "tokens": [50364, 7284, 376, 29318, 775, 406, 1813, 886, 955, 13, 1171, 1365, 11, 460, 11717, 75, 2600, 11, 370, 460, 11717, 11434, 257, 3840, 295, 15148, 597, 366, 5101, 12334, 322, 538, 50914], "temperature": 0.0, "avg_logprob": -0.13858099186674078, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.11323907971382141}, {"id": 85, "seek": 53686, "start": 547.86, "end": 555.86, "text": " software, at least the C library. But it also ships, like GCC supports the Go programming language, it supports Fortran, it", "tokens": [50914, 4722, 11, 412, 1935, 264, 383, 6405, 13, 583, 309, 611, 11434, 11, 411, 460, 11717, 9346, 264, 1037, 9410, 2856, 11, 309, 9346, 11002, 4257, 11, 309, 51314], "temperature": 0.0, "avg_logprob": -0.13858099186674078, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.11323907971382141}, {"id": 86, "seek": 53686, "start": 555.86, "end": 562.86, "text": " supports D, and it includes standard libraries for all of those. If those are all put in the same package, especially the Go standard", "tokens": [51314, 9346, 413, 11, 293, 309, 5974, 3832, 15148, 337, 439, 295, 729, 13, 759, 729, 366, 439, 829, 294, 264, 912, 7372, 11, 2318, 264, 1037, 3832, 51664], "temperature": 0.0, "avg_logprob": -0.13858099186674078, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.11323907971382141}, {"id": 87, "seek": 56286, "start": 562.86, "end": 571.86, "text": " library, it's absolutely huge. So yeah, and with an inner MFS, that's pretty huge. So ideally, GCClips is a separate,", "tokens": [50364, 6405, 11, 309, 311, 3122, 2603, 13, 407, 1338, 11, 293, 365, 364, 7284, 376, 29318, 11, 300, 311, 1238, 2603, 13, 407, 22915, 11, 460, 11717, 75, 2600, 307, 257, 4994, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1473948910551251, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.027504028752446175}, {"id": 88, "seek": 56286, "start": 571.86, "end": 580.86, "text": " sub-packages for each standard library so that you can only install the necessary one in the inner MFS. For example, Arch Linux doesn't do this.", "tokens": [50814, 1422, 12, 9539, 1660, 337, 1184, 3832, 6405, 370, 300, 291, 393, 787, 3625, 264, 4818, 472, 294, 264, 7284, 376, 29318, 13, 1171, 1365, 11, 10984, 18734, 1177, 380, 360, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1473948910551251, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.027504028752446175}, {"id": 89, "seek": 56286, "start": 580.86, "end": 588.86, "text": " So we have to, you have to start removing stuff manually, but we don't want to do this, right? We want to rely on the packages.", "tokens": [51264, 407, 321, 362, 281, 11, 291, 362, 281, 722, 12720, 1507, 16945, 11, 457, 321, 500, 380, 528, 281, 360, 341, 11, 558, 30, 492, 528, 281, 10687, 322, 264, 17401, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1473948910551251, "compression_ratio": 1.5853658536585367, "no_speech_prob": 0.027504028752446175}, {"id": 90, "seek": 58886, "start": 588.86, "end": 596.86, "text": " So ideally, the distributions take a little care that the core packages are split sufficiently so that you only install the necessary stuff in the", "tokens": [50364, 407, 22915, 11, 264, 37870, 747, 257, 707, 1127, 300, 264, 4965, 17401, 366, 7472, 31868, 370, 300, 291, 787, 3625, 264, 4818, 1507, 294, 264, 50764], "temperature": 0.0, "avg_logprob": -0.07532535631632067, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.03594733029603958}, {"id": 91, "seek": 58886, "start": 596.86, "end": 603.86, "text": " inner MFS. Another good one is that the kernel modules generally depend on the kernel itself. So if you install the kernel modules in the", "tokens": [50764, 7284, 376, 29318, 13, 3996, 665, 472, 307, 300, 264, 28256, 16679, 5101, 5672, 322, 264, 28256, 2564, 13, 407, 498, 291, 3625, 264, 28256, 16679, 294, 264, 51114], "temperature": 0.0, "avg_logprob": -0.07532535631632067, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.03594733029603958}, {"id": 92, "seek": 58886, "start": 603.86, "end": 610.86, "text": " inner MFS, the kernel gets pulled in as well, but you don't need a kernel in the inner MFS. So that's another thing where there should be a", "tokens": [51114, 7284, 376, 29318, 11, 264, 28256, 2170, 7373, 294, 382, 731, 11, 457, 291, 500, 380, 643, 257, 28256, 294, 264, 7284, 376, 29318, 13, 407, 300, 311, 1071, 551, 689, 456, 820, 312, 257, 51464], "temperature": 0.0, "avg_logprob": -0.07532535631632067, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.03594733029603958}, {"id": 93, "seek": 61086, "start": 610.86, "end": 619.86, "text": " little care taken to make this possible. And finally, locales. Fedora has, and then Santos and derivatives, have a G-Lip C minimal", "tokens": [50364, 707, 1127, 2726, 281, 652, 341, 1944, 13, 400, 2721, 11, 2654, 279, 13, 7772, 3252, 575, 11, 293, 550, 36962, 293, 33733, 11, 362, 257, 460, 12, 43, 647, 383, 13206, 50814], "temperature": 0.0, "avg_logprob": -0.327018442288251, "compression_ratio": 1.4322916666666667, "no_speech_prob": 0.1766730695962906}, {"id": 94, "seek": 61086, "start": 619.86, "end": 629.86, "text": " rank pack package that only includes the official UTF-8 locale instead of all of them. And that again, stuff like that helps to reduce the size.", "tokens": [50814, 6181, 2844, 7372, 300, 787, 5974, 264, 4783, 624, 20527, 12, 23, 1628, 1220, 2602, 295, 439, 295, 552, 13, 400, 300, 797, 11, 1507, 411, 300, 3665, 281, 5407, 264, 2744, 13, 51314], "temperature": 0.0, "avg_logprob": -0.327018442288251, "compression_ratio": 1.4322916666666667, "no_speech_prob": 0.1766730695962906}, {"id": 95, "seek": 62986, "start": 630.86, "end": 643.86, "text": " So how do we propose to build this inner MFS out of packages? Well, we suggest to use MAKOSI, which is SystemDIS Image Building Tool.", "tokens": [50414, 407, 577, 360, 321, 17421, 281, 1322, 341, 7284, 376, 29318, 484, 295, 17401, 30, 1042, 11, 321, 3402, 281, 764, 376, 5340, 4367, 40, 11, 597, 307, 8910, 35, 2343, 29903, 18974, 15934, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21074793497721353, "compression_ratio": 1.438423645320197, "no_speech_prob": 0.25812163949012756}, {"id": 96, "seek": 62986, "start": 643.86, "end": 652.86, "text": " So our idea is that the inner MFS really isn't any different from a regular Linux image. It's just packaged differently. Instead of putting it in a disk image", "tokens": [51064, 407, 527, 1558, 307, 300, 264, 7284, 376, 29318, 534, 1943, 380, 604, 819, 490, 257, 3890, 18734, 3256, 13, 467, 311, 445, 38162, 7614, 13, 7156, 295, 3372, 309, 294, 257, 12355, 3256, 51514], "temperature": 0.0, "avg_logprob": -0.21074793497721353, "compression_ratio": 1.438423645320197, "no_speech_prob": 0.25812163949012756}, {"id": 97, "seek": 65286, "start": 652.86, "end": 661.86, "text": " with a GPT partition table, you just package it with CPIO and you get your inner MFS. And inner MFS isn't really any different from a regular", "tokens": [50364, 365, 257, 26039, 51, 24808, 3199, 11, 291, 445, 7372, 309, 365, 22431, 15167, 293, 291, 483, 428, 7284, 376, 29318, 13, 400, 7284, 376, 29318, 1943, 380, 534, 604, 819, 490, 257, 3890, 50814], "temperature": 0.0, "avg_logprob": -0.11962568759918213, "compression_ratio": 1.657992565055762, "no_speech_prob": 0.1702551692724228}, {"id": 98, "seek": 65286, "start": 661.86, "end": 669.86, "text": " Linux system, except it just includes less software and it has two extra sim lings, and that's all you need. So you can build it using the regular image", "tokens": [50814, 18734, 1185, 11, 3993, 309, 445, 5974, 1570, 4722, 293, 309, 575, 732, 2857, 1034, 287, 1109, 11, 293, 300, 311, 439, 291, 643, 13, 407, 291, 393, 1322, 309, 1228, 264, 3890, 3256, 51214], "temperature": 0.0, "avg_logprob": -0.11962568759918213, "compression_ratio": 1.657992565055762, "no_speech_prob": 0.1702551692724228}, {"id": 99, "seek": 65286, "start": 669.86, "end": 677.86, "text": " building tools. You don't need anything different. So MAKOSI is a tool that builds these images. It does a whole bunch of things. It installs packages,", "tokens": [51214, 2390, 3873, 13, 509, 500, 380, 643, 1340, 819, 13, 407, 376, 5340, 4367, 40, 307, 257, 2290, 300, 15182, 613, 5267, 13, 467, 775, 257, 1379, 3840, 295, 721, 13, 467, 3625, 82, 17401, 11, 51614], "temperature": 0.0, "avg_logprob": -0.11962568759918213, "compression_ratio": 1.657992565055762, "no_speech_prob": 0.1702551692724228}, {"id": 100, "seek": 67786, "start": 677.86, "end": 686.86, "text": " and it can also build you something else than an inner ID. So it can install bootloaders. It can build an inner MFS for a regular disk image.", "tokens": [50364, 293, 309, 393, 611, 1322, 291, 746, 1646, 813, 364, 7284, 7348, 13, 407, 309, 393, 3625, 11450, 2907, 433, 13, 467, 393, 1322, 364, 7284, 376, 29318, 337, 257, 3890, 12355, 3256, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16658068991996147, "compression_ratio": 1.6031746031746033, "no_speech_prob": 0.04061729833483696}, {"id": 101, "seek": 67786, "start": 686.86, "end": 697.86, "text": " It can do unified kernel images. And it can run a whole bunch of tools that SystemD provides to configure system images. And it also allows you to test the thing", "tokens": [50814, 467, 393, 360, 26787, 28256, 5267, 13, 400, 309, 393, 1190, 257, 1379, 3840, 295, 3873, 300, 8910, 35, 6417, 281, 22162, 1185, 5267, 13, 400, 309, 611, 4045, 291, 281, 1500, 264, 551, 51364], "temperature": 0.0, "avg_logprob": -0.16658068991996147, "compression_ratio": 1.6031746031746033, "no_speech_prob": 0.04061729833483696}, {"id": 102, "seek": 69786, "start": 697.86, "end": 707.86, "text": " by booting it in QMU or assisting the N-Spawn container. So how do you get started with MAKOSI? Well, this is an example to build Arch,", "tokens": [50364, 538, 11450, 278, 309, 294, 1249, 44, 52, 420, 40368, 264, 426, 12, 50, 4306, 895, 10129, 13, 407, 577, 360, 291, 483, 1409, 365, 376, 5340, 4367, 40, 30, 1042, 11, 341, 307, 364, 1365, 281, 1322, 10984, 11, 50864], "temperature": 0.0, "avg_logprob": -0.14938088734944663, "compression_ratio": 1.3891891891891892, "no_speech_prob": 0.38960379362106323}, {"id": 103, "seek": 69786, "start": 707.86, "end": 717.86, "text": " install SystemD and the kernel. We enable autologon and then start it in QMU. This gets you something like the following.", "tokens": [50864, 3625, 8910, 35, 293, 264, 28256, 13, 492, 9528, 1476, 1132, 266, 293, 550, 722, 309, 294, 1249, 44, 52, 13, 639, 2170, 291, 746, 411, 264, 3480, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14938088734944663, "compression_ratio": 1.3891891891891892, "no_speech_prob": 0.38960379362106323}, {"id": 104, "seek": 71786, "start": 717.86, "end": 728.86, "text": " MAKOSI supports all the popular distributions, I guess. CentOS, Debian, Ubuntu, OpenSuzi, Arch, Fedora, and some derivatives of those.", "tokens": [50364, 376, 5340, 4367, 40, 9346, 439, 264, 3743, 37870, 11, 286, 2041, 13, 3408, 4367, 11, 1346, 20196, 11, 30230, 45605, 11, 7238, 50, 3334, 72, 11, 10984, 11, 7772, 3252, 11, 293, 512, 33733, 295, 729, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2777922039940244, "compression_ratio": 1.1166666666666667, "no_speech_prob": 0.3846414387226105}, {"id": 105, "seek": 72886, "start": 728.86, "end": 744.86, "text": " Raul? Raul. Raul BI. One interesting thing is that you do not need root privileges as your user to run MAKOSI. We use these new UID map and new GID map tools to be able to do everything", "tokens": [50364, 7591, 425, 30, 7591, 425, 13, 7591, 425, 23524, 13, 1485, 1880, 551, 307, 300, 291, 360, 406, 643, 5593, 32588, 382, 428, 4195, 281, 1190, 376, 5340, 4367, 40, 13, 492, 764, 613, 777, 624, 2777, 4471, 293, 777, 460, 2777, 4471, 3873, 281, 312, 1075, 281, 360, 1203, 51164], "temperature": 0.0, "avg_logprob": -0.27343400319417316, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.24179516732692719}, {"id": 106, "seek": 74486, "start": 744.86, "end": 755.86, "text": " without needing to enter your password. We also use SystemD Repart from SystemD to be able to build disk images without needing root privileges or loop devices.", "tokens": [50364, 1553, 18006, 281, 3242, 428, 11524, 13, 492, 611, 764, 8910, 35, 3696, 446, 490, 8910, 35, 281, 312, 1075, 281, 1322, 12355, 5267, 1553, 18006, 5593, 32588, 420, 6367, 5759, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08115863118852888, "compression_ratio": 1.5693069306930694, "no_speech_prob": 0.3867592513561249}, {"id": 107, "seek": 74486, "start": 755.86, "end": 765.86, "text": " So you can just run all this as your regular user to build an image. We have configurations, so instead of having to specify everything on the command line,", "tokens": [50914, 407, 291, 393, 445, 1190, 439, 341, 382, 428, 3890, 4195, 281, 1322, 364, 3256, 13, 492, 362, 31493, 11, 370, 2602, 295, 1419, 281, 16500, 1203, 322, 264, 5622, 1622, 11, 51414], "temperature": 0.0, "avg_logprob": -0.08115863118852888, "compression_ratio": 1.5693069306930694, "no_speech_prob": 0.3867592513561249}, {"id": 108, "seek": 76586, "start": 765.86, "end": 772.86, "text": " you can also use the regular SystemD unifile, which everyone knows from Unifiles.", "tokens": [50364, 291, 393, 611, 764, 264, 3890, 8910, 35, 517, 351, 794, 11, 597, 1518, 3255, 490, 1156, 351, 4680, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1662280529360228, "compression_ratio": 1.3783783783783783, "no_speech_prob": 0.2738856077194214}, {"id": 109, "seek": 76586, "start": 772.86, "end": 784.86, "text": " So what is MAKOSI in-it RD? Well, it is a MAKOSI configuration to build in-it-RAMFS images. It used to be a standalone project, but we recently merged it into MAKOSI itself.", "tokens": [50714, 407, 437, 307, 376, 5340, 4367, 40, 294, 12, 270, 49488, 30, 1042, 11, 309, 307, 257, 376, 5340, 4367, 40, 11694, 281, 1322, 294, 12, 270, 12, 49, 2865, 29318, 5267, 13, 467, 1143, 281, 312, 257, 37454, 1716, 11, 457, 321, 3938, 36427, 309, 666, 376, 5340, 4367, 40, 2564, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1662280529360228, "compression_ratio": 1.3783783783783783, "no_speech_prob": 0.2738856077194214}, {"id": 110, "seek": 78486, "start": 784.86, "end": 795.86, "text": " So it is already used to build the default in-it-RAMFS for all images that MAKOSI builds. So if you use MAKOSI to build a disk image and you do not specify your own in-it-RAMFS,", "tokens": [50364, 407, 309, 307, 1217, 1143, 281, 1322, 264, 7576, 294, 12, 270, 12, 49, 2865, 29318, 337, 439, 5267, 300, 376, 5340, 4367, 40, 15182, 13, 407, 498, 291, 764, 376, 5340, 4367, 40, 281, 1322, 257, 12355, 3256, 293, 291, 360, 406, 16500, 428, 1065, 294, 12, 270, 12, 49, 2865, 29318, 11, 50914], "temperature": 0.0, "avg_logprob": -0.08584841773623512, "compression_ratio": 1.7473118279569892, "no_speech_prob": 0.5262609720230103}, {"id": 111, "seek": 78486, "start": 795.86, "end": 805.86, "text": " it will use MAKOSI in-it RD to build an in-it-RAMFS and use that. So every time you boot a MAKOSI disk image, you are generally already using this.", "tokens": [50914, 309, 486, 764, 376, 5340, 4367, 40, 294, 12, 270, 49488, 281, 1322, 364, 294, 12, 270, 12, 49, 2865, 29318, 293, 764, 300, 13, 407, 633, 565, 291, 11450, 257, 376, 5340, 4367, 40, 12355, 3256, 11, 291, 366, 5101, 1217, 1228, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08584841773623512, "compression_ratio": 1.7473118279569892, "no_speech_prob": 0.5262609720230103}, {"id": 112, "seek": 80586, "start": 805.86, "end": 815.86, "text": " And we make sure this is tested on all the supported distributions. So it initially started out as a Fedora only thing, but when we merged it into MAKOSI,", "tokens": [50364, 400, 321, 652, 988, 341, 307, 8246, 322, 439, 264, 8104, 37870, 13, 407, 309, 9105, 1409, 484, 382, 257, 7772, 3252, 787, 551, 11, 457, 562, 321, 36427, 309, 666, 376, 5340, 4367, 40, 11, 50864], "temperature": 0.0, "avg_logprob": -0.21102067900866997, "compression_ratio": 1.5829145728643217, "no_speech_prob": 0.3225767910480499}, {"id": 113, "seek": 80586, "start": 815.86, "end": 823.86, "text": " we implemented support for all the distributions. So you can build an in-it-RAMFS out of Arch packages, Shibuunter packages, Debian packages, OpenSUSE packages,", "tokens": [50864, 321, 12270, 1406, 337, 439, 264, 37870, 13, 407, 291, 393, 1322, 364, 294, 12, 270, 12, 49, 2865, 29318, 484, 295, 10984, 17401, 11, 1160, 897, 84, 21777, 17401, 11, 1346, 20196, 17401, 11, 7238, 50, 44626, 17401, 11, 51264], "temperature": 0.0, "avg_logprob": -0.21102067900866997, "compression_ratio": 1.5829145728643217, "no_speech_prob": 0.3225767910480499}, {"id": 114, "seek": 82386, "start": 823.86, "end": 835.86, "text": " CentOS packages, or Fedora packages. We also ship a kernel install plugin. So kernel install is a system that is tooling for taking a kernel from your", "tokens": [50364, 3408, 4367, 17401, 11, 420, 7772, 3252, 17401, 13, 492, 611, 5374, 257, 28256, 3625, 23407, 13, 407, 28256, 3625, 307, 257, 1185, 300, 307, 46593, 337, 1940, 257, 28256, 490, 428, 50964], "temperature": 0.0, "avg_logprob": -0.2129994841182933, "compression_ratio": 1.5585106382978724, "no_speech_prob": 0.4373982548713684}, {"id": 115, "seek": 82386, "start": 835.86, "end": 845.86, "text": " slash user directory, where it is installed by the package manager usually, and moving it to the ESP and doing a bunch of extra required work,", "tokens": [50964, 17330, 4195, 21120, 11, 689, 309, 307, 8899, 538, 264, 7372, 6598, 2673, 11, 293, 2684, 309, 281, 264, 12564, 47, 293, 884, 257, 3840, 295, 2857, 4739, 589, 11, 51464], "temperature": 0.0, "avg_logprob": -0.2129994841182933, "compression_ratio": 1.5585106382978724, "no_speech_prob": 0.4373982548713684}, {"id": 116, "seek": 84586, "start": 845.86, "end": 858.86, "text": " like for example building an in-it-RAMFS. So usually like on Fedora at least, the Drakeit ships its own kernel install plugin, but MAKOSI does as well.", "tokens": [50364, 411, 337, 1365, 2390, 364, 294, 12, 270, 12, 49, 2865, 29318, 13, 407, 2673, 411, 322, 7772, 3252, 412, 1935, 11, 264, 27465, 270, 11434, 1080, 1065, 28256, 3625, 23407, 11, 457, 376, 5340, 4367, 40, 775, 382, 731, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12807672164019415, "compression_ratio": 1.662037037037037, "no_speech_prob": 0.4235233664512634}, {"id": 117, "seek": 84586, "start": 858.86, "end": 870.86, "text": " So you can basically configure kernel install to use MAKOSI in-it-RAMFS instead of Drakeit to build the in-it-RAMFS. And Drakeit will automatically disable itself if another in-it-RAMFS generator is enabled.", "tokens": [51014, 407, 291, 393, 1936, 22162, 28256, 3625, 281, 764, 376, 5340, 4367, 40, 294, 12, 270, 12, 49, 2865, 29318, 2602, 295, 27465, 270, 281, 1322, 264, 294, 12, 270, 12, 49, 2865, 29318, 13, 400, 27465, 270, 486, 6772, 28362, 2564, 498, 1071, 294, 12, 270, 12, 49, 2865, 29318, 19265, 307, 15172, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12807672164019415, "compression_ratio": 1.662037037037037, "no_speech_prob": 0.4235233664512634}, {"id": 118, "seek": 87086, "start": 871.86, "end": 885.86, "text": " This view reuses all the package manager caches from the host file system. So you're not downloading unnecessary packages. It just reuses the same RPMs or depths that were already used, or that you already installed on your host file system.", "tokens": [50414, 639, 1910, 319, 8355, 439, 264, 7372, 6598, 269, 13272, 490, 264, 3975, 3991, 1185, 13, 407, 291, 434, 406, 32529, 19350, 17401, 13, 467, 445, 319, 8355, 264, 912, 14105, 26386, 420, 28439, 300, 645, 1217, 1143, 11, 420, 300, 291, 1217, 8899, 322, 428, 3975, 3991, 1185, 13, 51114], "temperature": 0.0, "avg_logprob": -0.181679955235234, "compression_ratio": 1.50625, "no_speech_prob": 0.16796278953552246}, {"id": 119, "seek": 88586, "start": 885.86, "end": 912.86, "text": " And finally, it can be completely customized. So MAKOSI, the configuration supports drop-ins. So you can add a few of those in user-lit MAKOSI in-it-RD or ETC MAKOSI in-it-RD to add more packages to the in-it-RD or to remove some extra stuff, or anything you can think of really that is supported by MAKOSI, you can make sure that it gets applied to the in-it-RAMFS produced by the kernel install plugin.", "tokens": [50364, 400, 2721, 11, 309, 393, 312, 2584, 30581, 13, 407, 376, 5340, 4367, 40, 11, 264, 11694, 9346, 3270, 12, 1292, 13, 407, 291, 393, 909, 257, 1326, 295, 729, 294, 4195, 12, 23062, 376, 5340, 4367, 40, 294, 12, 270, 12, 49, 35, 420, 462, 18238, 376, 5340, 4367, 40, 294, 12, 270, 12, 49, 35, 281, 909, 544, 17401, 281, 264, 294, 12, 270, 12, 49, 35, 420, 281, 4159, 512, 2857, 1507, 11, 420, 1340, 291, 393, 519, 295, 534, 300, 307, 8104, 538, 376, 5340, 4367, 40, 11, 291, 393, 652, 988, 300, 309, 2170, 6456, 281, 264, 294, 12, 270, 12, 49, 2865, 29318, 7126, 538, 264, 28256, 3625, 23407, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1631833553314209, "compression_ratio": 1.6489795918367347, "no_speech_prob": 0.08973933756351471}, {"id": 120, "seek": 91286, "start": 913.86, "end": 928.86, "text": " It can also be used as a standalone thing, so you don't need to use the kernel install plugin. This is how you would use it to build your own in-it-RAMFS, which will then appear in the working directory that you invoke it in.", "tokens": [50414, 467, 393, 611, 312, 1143, 382, 257, 37454, 551, 11, 370, 291, 500, 380, 643, 281, 764, 264, 28256, 3625, 23407, 13, 639, 307, 577, 291, 576, 764, 309, 281, 1322, 428, 1065, 294, 12, 270, 12, 49, 2865, 29318, 11, 597, 486, 550, 4204, 294, 264, 1364, 21120, 300, 291, 41117, 309, 294, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06624975851026632, "compression_ratio": 1.3803680981595092, "no_speech_prob": 0.021785827353596687}, {"id": 121, "seek": 92886, "start": 929.86, "end": 942.86, "text": " One interesting thing here is because the kernel modules packages aren't really set up completely correctly yet and pull in too many dependencies, we do the practical thing and we copy the kernel modules from the host.", "tokens": [50414, 1485, 1880, 551, 510, 307, 570, 264, 28256, 16679, 17401, 3212, 380, 534, 992, 493, 2584, 8944, 1939, 293, 2235, 294, 886, 867, 36606, 11, 321, 360, 264, 8496, 551, 293, 321, 5055, 264, 28256, 16679, 490, 264, 3975, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13598010756752707, "compression_ratio": 1.5034482758620689, "no_speech_prob": 0.5412571430206299}, {"id": 122, "seek": 94286, "start": 943.86, "end": 963.86, "text": " By using the kernel module exclude settings and the include settings, we can do the same thing that RakeIt does or the other tools do, where we only include the kernel modules that are loaded on the host file system, because if we would include all of them and all of their firmware dependencies in the in-it-RAMFS, it would grow to tremendous proportions.", "tokens": [50414, 3146, 1228, 264, 28256, 10088, 33536, 6257, 293, 264, 4090, 6257, 11, 321, 393, 360, 264, 912, 551, 300, 497, 619, 3522, 775, 420, 264, 661, 3873, 360, 11, 689, 321, 787, 4090, 264, 28256, 16679, 300, 366, 13210, 322, 264, 3975, 3991, 1185, 11, 570, 498, 321, 576, 4090, 439, 295, 552, 293, 439, 295, 641, 30289, 36606, 294, 264, 294, 12, 270, 12, 49, 2865, 29318, 11, 309, 576, 1852, 281, 10048, 32482, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1581078923266867, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.4614255428314209}, {"id": 123, "seek": 94286, "start": 963.86, "end": 965.86, "text": " So make sure to only include what's needed.", "tokens": [51414, 407, 652, 988, 281, 787, 4090, 437, 311, 2978, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1581078923266867, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.4614255428314209}, {"id": 124, "seek": 96586, "start": 966.86, "end": 982.86, "text": " So we cover a lot of this with integration tests. Specifically, we make sure that booting from LUX works, so with an encrypted root file system, we make sure that LVM works, we make sure that the combination of the two works.", "tokens": [50414, 407, 321, 2060, 257, 688, 295, 341, 365, 10980, 6921, 13, 26058, 11, 321, 652, 988, 300, 11450, 278, 490, 31851, 55, 1985, 11, 370, 365, 364, 36663, 5593, 3991, 1185, 11, 321, 652, 988, 300, 441, 53, 44, 1985, 11, 321, 652, 988, 300, 264, 6562, 295, 264, 732, 1985, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14567794118608748, "compression_ratio": 1.5734265734265733, "no_speech_prob": 0.08917152136564255}, {"id": 125, "seek": 98286, "start": 982.86, "end": 992.86, "text": " This can boot up for the AOSFS. We support the system-dgpt auto-generator stuff, just specifying doing everything with FSTAP, whatever you can think of really.", "tokens": [50364, 639, 393, 11450, 493, 337, 264, 316, 4367, 29318, 13, 492, 1406, 264, 1185, 12, 67, 70, 662, 8399, 12, 21848, 1639, 1507, 11, 445, 1608, 5489, 884, 1203, 365, 479, 6840, 4715, 11, 2035, 291, 393, 519, 295, 534, 13, 50864], "temperature": 0.0, "avg_logprob": -0.245037841796875, "compression_ratio": 1.5392857142857144, "no_speech_prob": 0.27310290932655334}, {"id": 126, "seek": 98286, "start": 995.86, "end": 1011.86, "text": " We try to make sure it works. There are some more niche technologies like RAID, NFS, and iSCSI that we haven't had the time to write integration tests for, so we can't say for sure that this will work, but we're working on making more stuff work that is already possible.", "tokens": [51014, 492, 853, 281, 652, 988, 309, 1985, 13, 821, 366, 512, 544, 19956, 7943, 411, 14626, 2777, 11, 13576, 50, 11, 293, 741, 20839, 20262, 300, 321, 2378, 380, 632, 264, 565, 281, 2464, 10980, 6921, 337, 11, 370, 321, 393, 380, 584, 337, 988, 300, 341, 486, 589, 11, 457, 321, 434, 1364, 322, 1455, 544, 1507, 589, 300, 307, 1217, 1944, 13, 51814], "temperature": 0.0, "avg_logprob": -0.245037841796875, "compression_ratio": 1.5392857142857144, "no_speech_prob": 0.27310290932655334}, {"id": 127, "seek": 101286, "start": 1012.86, "end": 1015.86, "text": " So we're working on making more stuff work with the existing tools.", "tokens": [50364, 407, 321, 434, 1364, 322, 1455, 544, 1507, 589, 365, 264, 6741, 3873, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2052858325018399, "compression_ratio": 1.8283828382838283, "no_speech_prob": 0.03640004247426987}, {"id": 128, "seek": 101286, "start": 1015.86, "end": 1028.8600000000001, "text": " That was everything I had to say. So this is a link to the configuration files from iSCSI in-it-RD. So there you can go and take a look at how the in-it-RDs are structured, which packages are included, what files are removed.", "tokens": [50514, 663, 390, 1203, 286, 632, 281, 584, 13, 407, 341, 307, 257, 2113, 281, 264, 11694, 7098, 490, 741, 20839, 20262, 294, 12, 270, 12, 49, 35, 13, 407, 456, 291, 393, 352, 293, 747, 257, 574, 412, 577, 264, 294, 12, 270, 12, 49, 35, 82, 366, 18519, 11, 597, 17401, 366, 5556, 11, 437, 7098, 366, 7261, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2052858325018399, "compression_ratio": 1.8283828382838283, "no_speech_prob": 0.03640004247426987}, {"id": 129, "seek": 101286, "start": 1028.8600000000001, "end": 1039.8600000000001, "text": " Specifically, there's a lot of files that we have to remove depending on the distribution. So any distribution packages, go look at that, see what we have to remove manually, and improve your packaging so that we don't have to do that.", "tokens": [51164, 26058, 11, 456, 311, 257, 688, 295, 7098, 300, 321, 362, 281, 4159, 5413, 322, 264, 7316, 13, 407, 604, 7316, 17401, 11, 352, 574, 412, 300, 11, 536, 437, 321, 362, 281, 4159, 16945, 11, 293, 3470, 428, 16836, 370, 300, 321, 500, 380, 362, 281, 360, 300, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2052858325018399, "compression_ratio": 1.8283828382838283, "no_speech_prob": 0.03640004247426987}, {"id": 130, "seek": 101286, "start": 1039.8600000000001, "end": 1041.8600000000001, "text": " Thank you for listening.", "tokens": [51714, 1044, 291, 337, 4764, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2052858325018399, "compression_ratio": 1.8283828382838283, "no_speech_prob": 0.03640004247426987}, {"id": 131, "seek": 104286, "start": 1042.86, "end": 1070.86, "text": " So before the questions, I want to make one comment clarification. Since we're developing this, we get into this mindset of thinking about the low-level details, but I think that this might be a bit confusing, that on the one hand, we talk about building the in-it-RD in a", "tokens": [50364, 407, 949, 264, 1651, 11, 286, 528, 281, 652, 472, 2871, 34449, 13, 4162, 321, 434, 6416, 341, 11, 321, 483, 666, 341, 12543, 295, 1953, 466, 264, 2295, 12, 12418, 4365, 11, 457, 286, 519, 300, 341, 1062, 312, 257, 857, 13181, 11, 300, 322, 264, 472, 1011, 11, 321, 751, 466, 2390, 264, 294, 12, 270, 12, 49, 35, 294, 257, 51764], "temperature": 0.0, "avg_logprob": -0.1763745919981999, "compression_ratio": 1.536723163841808, "no_speech_prob": 0.023361684754490852}, {"id": 132, "seek": 107086, "start": 1070.86, "end": 1084.86, "text": " predictable way, somewhere in central infrastructure, and signing it. And on the other hand, we talk about including local modules. And so a lot of this stuff is for development and for now.", "tokens": [50364, 27737, 636, 11, 4079, 294, 5777, 6896, 11, 293, 13393, 309, 13, 400, 322, 264, 661, 1011, 11, 321, 751, 466, 3009, 2654, 16679, 13, 400, 370, 257, 688, 295, 341, 1507, 307, 337, 3250, 293, 337, 586, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15686789224314135, "compression_ratio": 1.3669064748201438, "no_speech_prob": 0.2372148036956787}, {"id": 133, "seek": 108486, "start": 1084.86, "end": 1101.86, "text": " And in the long term, we want to have the centralized thing where we're building the in-it-RD, glue it together with the kernel, and sign the pair together, building a unified kernel image, which Leonard Pottering was talking about earlier today.", "tokens": [50364, 400, 294, 264, 938, 1433, 11, 321, 528, 281, 362, 264, 32395, 551, 689, 321, 434, 2390, 264, 294, 12, 270, 12, 49, 35, 11, 8998, 309, 1214, 365, 264, 28256, 11, 293, 1465, 264, 6119, 1214, 11, 2390, 257, 26787, 28256, 3256, 11, 597, 35172, 18115, 278, 390, 1417, 466, 3071, 965, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21159404257069464, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.5953525304794312}, {"id": 134, "seek": 108486, "start": 1101.86, "end": 1106.86, "text": " So yeah, just to clear this up.", "tokens": [51214, 407, 1338, 11, 445, 281, 1850, 341, 493, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21159404257069464, "compression_ratio": 1.4866310160427807, "no_speech_prob": 0.5953525304794312}, {"id": 135, "seek": 110686, "start": 1106.86, "end": 1114.86, "text": " Awesome, thank you. What questions do we have? One over here, one over there.", "tokens": [50364, 10391, 11, 1309, 291, 13, 708, 1651, 360, 321, 362, 30, 1485, 670, 510, 11, 472, 670, 456, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1422414261361827, "compression_ratio": 1.0266666666666666, "no_speech_prob": 0.33155515789985657}, {"id": 136, "seek": 111486, "start": 1114.86, "end": 1131.86, "text": " Okay, so you mentioned that currently you use local modules. So it doesn't mean that all the complexity from record for selecting kernel modules still remains here as well, right?", "tokens": [50364, 1033, 11, 370, 291, 2835, 300, 4362, 291, 764, 2654, 16679, 13, 407, 309, 1177, 380, 914, 300, 439, 264, 14024, 490, 2136, 337, 18182, 28256, 16679, 920, 7023, 510, 382, 731, 11, 558, 30, 51214], "temperature": 0.0, "avg_logprob": -0.17623098079974836, "compression_ratio": 1.335820895522388, "no_speech_prob": 0.5907942652702332}, {"id": 137, "seek": 113186, "start": 1131.86, "end": 1150.86, "text": " Yes, but it turns out the complexity for selecting kernel modules, because the kernel modules list their dependencies properly, is not all that much. But yes, we do support it. But we hope, like Shabish said, that eventually in the future, we don't have to use that part anymore.", "tokens": [50364, 1079, 11, 457, 309, 4523, 484, 264, 14024, 337, 18182, 28256, 16679, 11, 570, 264, 28256, 16679, 1329, 641, 36606, 6108, 11, 307, 406, 439, 300, 709, 13, 583, 2086, 11, 321, 360, 1406, 309, 13, 583, 321, 1454, 11, 411, 1160, 455, 742, 848, 11, 300, 4728, 294, 264, 2027, 11, 321, 500, 380, 362, 281, 764, 300, 644, 3602, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16943303021517667, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.5741687417030334}, {"id": 138, "seek": 115086, "start": 1150.86, "end": 1166.86, "text": " So we can have a proper set of default modules, and these are all properly sub-packaged in distributions, so that we can install distribution packages to get the kernel modules instead of having to do the extra complexity for selecting them locally.", "tokens": [50364, 407, 321, 393, 362, 257, 2296, 992, 295, 7576, 16679, 11, 293, 613, 366, 439, 6108, 1422, 12, 9539, 2980, 294, 37870, 11, 370, 300, 321, 393, 3625, 7316, 17401, 281, 483, 264, 28256, 16679, 2602, 295, 1419, 281, 360, 264, 2857, 14024, 337, 18182, 552, 16143, 13, 51164], "temperature": 0.0, "avg_logprob": -0.05491021963266226, "compression_ratio": 1.5759493670886076, "no_speech_prob": 0.16373032331466675}, {"id": 139, "seek": 116686, "start": 1166.86, "end": 1184.86, "text": " You spoke about integration testing on multiple distributions. Did you try to test in all, let's say, usual kind of lattice distribution, but did you try a bit older, and do you have something that you plan to maintain like testing with a new distribution that are coming?", "tokens": [50364, 509, 7179, 466, 10980, 4997, 322, 3866, 37870, 13, 2589, 291, 853, 281, 1500, 294, 439, 11, 718, 311, 584, 11, 7713, 733, 295, 34011, 7316, 11, 457, 630, 291, 853, 257, 857, 4906, 11, 293, 360, 291, 362, 746, 300, 291, 1393, 281, 6909, 411, 4997, 365, 257, 777, 7316, 300, 366, 1348, 30, 51264], "temperature": 0.0, "avg_logprob": -0.1688965781260345, "compression_ratio": 1.5722543352601157, "no_speech_prob": 0.6617878675460815}, {"id": 140, "seek": 118486, "start": 1184.86, "end": 1210.86, "text": " So at the moment, our integration tests are run for the default versions of all the supported distributions. So this is generally the latest. It's Debian testing, it's not Debian stable. But I mean, we could definitely add more. It's just running in GitHub Action, so it's just a matter of defining the necessary configuration and then we can run tests for everything.", "tokens": [50364, 407, 412, 264, 1623, 11, 527, 10980, 6921, 366, 1190, 337, 264, 7576, 9606, 295, 439, 264, 8104, 37870, 13, 407, 341, 307, 5101, 264, 6792, 13, 467, 311, 1346, 20196, 4997, 11, 309, 311, 406, 1346, 20196, 8351, 13, 583, 286, 914, 11, 321, 727, 2138, 909, 544, 13, 467, 311, 445, 2614, 294, 23331, 16261, 11, 370, 309, 311, 445, 257, 1871, 295, 17827, 264, 4818, 11694, 293, 550, 321, 393, 1190, 6921, 337, 1203, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14323590441447934, "compression_ratio": 1.6069868995633187, "no_speech_prob": 0.245459645986557}, {"id": 141, "seek": 121086, "start": 1210.86, "end": 1220.86, "text": " What was those questions? Zero questions. Alright, thanks you too. This was great.", "tokens": [50414, 708, 390, 729, 1651, 30, 17182, 1651, 13, 2798, 11, 3231, 291, 886, 13, 639, 390, 869, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2979152316138858, "compression_ratio": 1.0512820512820513, "no_speech_prob": 0.489226758480072}], "language": "en"}