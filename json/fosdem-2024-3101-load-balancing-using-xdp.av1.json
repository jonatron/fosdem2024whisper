{"text": " It's possible with XVP to do bare metal package processing at the lowest point in the software stack before the kernel, kernel network stack and this is make it ideal for speed. At the end of execution of the XDP program it should return a code. There is three possible choices. XDP pass, let's say the packet pass to the normal flow in the network kernel stack or XDP drop or abort to drop all the packet and so this is invisible to the normal stack or XDP TX or redirect to send the packet away to another destination. Let's see the most basic possible program XDP program that is this one that all it does is just return XDP pass so the normal flow of the packet is preserved. To compile XDP program we use a clang with the target BPF option so this is for example to compile the previous program and after we can load the program to a network interface using the XDP loader that is a command provided by XDP tools. If we replace on the previous program that one the XDP pass with XDP drops all the coming packages will be dropped. As I said this all will happen before the normal kernel network stack so this program this packet will completely invisible to the normal stack for example from TCP dump. Fortunately for debugging it's we can use XDP dump that permits you view what the XDP programs are doing with the packet and check what is the protocol if it is IPv4 than 8 we check if it is ECMP line 12 and after we access the previous map and add one to the value. The next step obviously is reading this data from the user space so we can access the map with a syscall and read all the map. Here we need a loop because for performance each core on the HCPU on the system have a different map, a different copy of the map so we need to loop and some of them but it's quite easy to access and communicate from user space to a BPF kernel space program. Obviously we need to redirect packet if we want to do some nonbalancing so to redirect packet we use XDP ticks or XDP redirect return code. Before redirect we need to change value of the packet for example in TCP samples is very easy we just swap the source MAC address and the destination source address so when we return the XDP code the packets will be redirected to the other machine we selected. Another important optimization to do on the load balancing is using direct server return so all the servers send their response directly to the user without going another time to the load balancer. To do this load balancer and server must share the same from the group of the canned server if the server was the first one the new direct the new request go to the second one and so in this case unfortunately we break connection for example if a server goes online but if we remove on the case that the server wasn't on the first choice all the packets continue to go to the same score so if we remove not the first one but the other ones there is no problem for render washing instead in many cases the ashing completely changes if we change the set of server and all the connection blocks and only one or all of the servers. This is all interesting but it will be really nice if we can load balancing do load balancing without load balancer. For doing this we can exploit we can leverage the ACMP routing feature that the routers have. Equal cost multi-path routing is designed for split traffic designated as single EP across multiple links of equal cost but we can use it to split the traffic between server if all the server announce the same EP and in this case the router blissfully redirects the packet to all the server without knowing that is not one but end server that receive packages. So we can go from a normal this normal architecture with a load balancer between a server and router to a complete distributed load balancer where the package are distributed using ACMP. So the ACMP is really useful for high performance load balancer and using optimization like direct server return we can also increase the throughput. To redirect all the package to the same backend server we need to use a consistent ashing algorithm and it's possible to leverage the ACMP routing available in routers to distribute packets between server and deploy the load balancer directly to the backend server without the dedicated machine. All the code that I developed is available open to the public city and there is also a link to my thesis all in Italian fortunately where I examine all the available load balancers in the market and all I explain all with more or less briefly let's say like 70 pages. Thank you for your attention. Thanks for the talk. Thanks for the talk and I have one question. Is it possible in XDP to inspect the source the data in the packets so you can just. Yeah you can impact the packet quite really easy. Here we have only the protocol and the protocol and which type of packet it is but it's possible to go more inside the packet to examine all the packets. Okay and the second part of this question is it wise to do it like from the. Good but yeah. Sorry guys if you leave the room please leave from the door over there. Wait until he's over. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 19.88, "text": " It's possible with XVP to do bare metal package processing at the lowest point in the software", "tokens": [50364, 467, 311, 1944, 365, 1783, 53, 47, 281, 360, 6949, 5760, 7372, 9007, 412, 264, 12437, 935, 294, 264, 4722, 51358], "temperature": 0.0, "avg_logprob": -0.38289606848428415, "compression_ratio": 1.3511450381679388, "no_speech_prob": 0.05146454647183418}, {"id": 1, "seek": 0, "start": 19.88, "end": 29.240000000000002, "text": " stack before the kernel, kernel network stack and this is make it ideal for speed.", "tokens": [51358, 8630, 949, 264, 28256, 11, 28256, 3209, 8630, 293, 341, 307, 652, 309, 7157, 337, 3073, 13, 51826], "temperature": 0.0, "avg_logprob": -0.38289606848428415, "compression_ratio": 1.3511450381679388, "no_speech_prob": 0.05146454647183418}, {"id": 2, "seek": 2924, "start": 29.24, "end": 35.12, "text": " At the end of execution of the XDP program it should return a code.", "tokens": [50364, 1711, 264, 917, 295, 15058, 295, 264, 1783, 11373, 1461, 309, 820, 2736, 257, 3089, 13, 50658], "temperature": 0.0, "avg_logprob": -0.3852108431534028, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.020445894449949265}, {"id": 3, "seek": 2924, "start": 35.12, "end": 37.64, "text": " There is three possible choices.", "tokens": [50658, 821, 307, 1045, 1944, 7994, 13, 50784], "temperature": 0.0, "avg_logprob": -0.3852108431534028, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.020445894449949265}, {"id": 4, "seek": 2924, "start": 37.64, "end": 48.08, "text": " XDP pass, let's say the packet pass to the normal flow in the network kernel stack or", "tokens": [50784, 1783, 11373, 1320, 11, 718, 311, 584, 264, 20300, 1320, 281, 264, 2710, 3095, 294, 264, 3209, 28256, 8630, 420, 51306], "temperature": 0.0, "avg_logprob": -0.3852108431534028, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.020445894449949265}, {"id": 5, "seek": 2924, "start": 48.08, "end": 54.480000000000004, "text": " XDP drop or abort to drop all the packet and so this is invisible to the normal stack", "tokens": [51306, 1783, 11373, 3270, 420, 38117, 281, 3270, 439, 264, 20300, 293, 370, 341, 307, 14603, 281, 264, 2710, 8630, 51626], "temperature": 0.0, "avg_logprob": -0.3852108431534028, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.020445894449949265}, {"id": 6, "seek": 5448, "start": 54.48, "end": 65.2, "text": " or XDP TX or redirect to send the packet away to another destination.", "tokens": [50364, 420, 1783, 11373, 314, 55, 420, 29066, 281, 2845, 264, 20300, 1314, 281, 1071, 12236, 13, 50900], "temperature": 0.0, "avg_logprob": -0.2377177577907756, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.00271266745403409}, {"id": 7, "seek": 5448, "start": 65.2, "end": 71.16, "text": " Let's see the most basic possible program XDP program that is this one that all it does", "tokens": [50900, 961, 311, 536, 264, 881, 3875, 1944, 1461, 1783, 11373, 1461, 300, 307, 341, 472, 300, 439, 309, 775, 51198], "temperature": 0.0, "avg_logprob": -0.2377177577907756, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.00271266745403409}, {"id": 8, "seek": 5448, "start": 71.16, "end": 80.6, "text": " is just return XDP pass so the normal flow of the packet is preserved.", "tokens": [51198, 307, 445, 2736, 1783, 11373, 1320, 370, 264, 2710, 3095, 295, 264, 20300, 307, 22242, 13, 51670], "temperature": 0.0, "avg_logprob": -0.2377177577907756, "compression_ratio": 1.4709677419354839, "no_speech_prob": 0.00271266745403409}, {"id": 9, "seek": 8060, "start": 80.6, "end": 88.52, "text": " To compile XDP program we use a clang with the target BPF option so this is for example", "tokens": [50364, 1407, 31413, 1783, 11373, 1461, 321, 764, 257, 596, 656, 365, 264, 3779, 363, 47, 37, 3614, 370, 341, 307, 337, 1365, 50760], "temperature": 0.0, "avg_logprob": -0.2563555581229074, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.017009010538458824}, {"id": 10, "seek": 8060, "start": 88.52, "end": 94.56, "text": " to compile the previous program and after we can load the program to a network interface", "tokens": [50760, 281, 31413, 264, 3894, 1461, 293, 934, 321, 393, 3677, 264, 1461, 281, 257, 3209, 9226, 51062], "temperature": 0.0, "avg_logprob": -0.2563555581229074, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.017009010538458824}, {"id": 11, "seek": 8060, "start": 94.56, "end": 102.08, "text": " using the XDP loader that is a command provided by XDP tools.", "tokens": [51062, 1228, 264, 1783, 11373, 3677, 260, 300, 307, 257, 5622, 5649, 538, 1783, 11373, 3873, 13, 51438], "temperature": 0.0, "avg_logprob": -0.2563555581229074, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.017009010538458824}, {"id": 12, "seek": 8060, "start": 102.08, "end": 109.8, "text": " If we replace on the previous program that one the XDP pass with XDP drops all the coming", "tokens": [51438, 759, 321, 7406, 322, 264, 3894, 1461, 300, 472, 264, 1783, 11373, 1320, 365, 1783, 11373, 11438, 439, 264, 1348, 51824], "temperature": 0.0, "avg_logprob": -0.2563555581229074, "compression_ratio": 1.6649746192893402, "no_speech_prob": 0.017009010538458824}, {"id": 13, "seek": 10980, "start": 109.8, "end": 112.92, "text": " packages will be dropped.", "tokens": [50364, 17401, 486, 312, 8119, 13, 50520], "temperature": 0.0, "avg_logprob": -0.3214694976806641, "compression_ratio": 1.5, "no_speech_prob": 0.044953636825084686}, {"id": 14, "seek": 10980, "start": 112.92, "end": 119.39999999999999, "text": " As I said this all will happen before the normal kernel network stack so this program", "tokens": [50520, 1018, 286, 848, 341, 439, 486, 1051, 949, 264, 2710, 28256, 3209, 8630, 370, 341, 1461, 50844], "temperature": 0.0, "avg_logprob": -0.3214694976806641, "compression_ratio": 1.5, "no_speech_prob": 0.044953636825084686}, {"id": 15, "seek": 10980, "start": 119.39999999999999, "end": 127.52, "text": " this packet will completely invisible to the normal stack for example from TCP dump.", "tokens": [50844, 341, 20300, 486, 2584, 14603, 281, 264, 2710, 8630, 337, 1365, 490, 48965, 11430, 13, 51250], "temperature": 0.0, "avg_logprob": -0.3214694976806641, "compression_ratio": 1.5, "no_speech_prob": 0.044953636825084686}, {"id": 16, "seek": 10980, "start": 127.52, "end": 139.04, "text": " Fortunately for debugging it's we can use XDP dump that permits you view what the XDP", "tokens": [51250, 20652, 337, 45592, 309, 311, 321, 393, 764, 1783, 11373, 11430, 300, 30990, 291, 1910, 437, 264, 1783, 11373, 51826], "temperature": 0.0, "avg_logprob": -0.3214694976806641, "compression_ratio": 1.5, "no_speech_prob": 0.044953636825084686}, {"id": 17, "seek": 13904, "start": 139.04, "end": 147.95999999999998, "text": " programs are doing with the packet and check what is the protocol if it is IPv4 than 8", "tokens": [50364, 4268, 366, 884, 365, 264, 20300, 293, 1520, 437, 307, 264, 10336, 498, 309, 307, 8671, 85, 19, 813, 1649, 50810], "temperature": 0.0, "avg_logprob": -0.31686649322509763, "compression_ratio": 1.528735632183908, "no_speech_prob": 0.029524771496653557}, {"id": 18, "seek": 13904, "start": 147.95999999999998, "end": 158.48, "text": " we check if it is ECMP line 12 and after we access the previous map and add one to the", "tokens": [50810, 321, 1520, 498, 309, 307, 19081, 12224, 1622, 2272, 293, 934, 321, 2105, 264, 3894, 4471, 293, 909, 472, 281, 264, 51336], "temperature": 0.0, "avg_logprob": -0.31686649322509763, "compression_ratio": 1.528735632183908, "no_speech_prob": 0.029524771496653557}, {"id": 19, "seek": 13904, "start": 158.48, "end": 160.76, "text": " value.", "tokens": [51336, 2158, 13, 51450], "temperature": 0.0, "avg_logprob": -0.31686649322509763, "compression_ratio": 1.528735632183908, "no_speech_prob": 0.029524771496653557}, {"id": 20, "seek": 13904, "start": 160.76, "end": 169.0, "text": " The next step obviously is reading this data from the user space so we can access the", "tokens": [51450, 440, 958, 1823, 2745, 307, 3760, 341, 1412, 490, 264, 4195, 1901, 370, 321, 393, 2105, 264, 51862], "temperature": 0.0, "avg_logprob": -0.31686649322509763, "compression_ratio": 1.528735632183908, "no_speech_prob": 0.029524771496653557}, {"id": 21, "seek": 16900, "start": 169.96, "end": 173.96, "text": " map with a syscall and read all the map.", "tokens": [50412, 4471, 365, 257, 262, 749, 45459, 293, 1401, 439, 264, 4471, 13, 50612], "temperature": 0.0, "avg_logprob": -0.33477814471135375, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.027625974267721176}, {"id": 22, "seek": 16900, "start": 173.96, "end": 186.08, "text": " Here we need a loop because for performance each core on the HCPU on the system have a", "tokens": [50612, 1692, 321, 643, 257, 6367, 570, 337, 3389, 1184, 4965, 322, 264, 389, 34, 8115, 322, 264, 1185, 362, 257, 51218], "temperature": 0.0, "avg_logprob": -0.33477814471135375, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.027625974267721176}, {"id": 23, "seek": 16900, "start": 186.08, "end": 194.32, "text": " different map, a different copy of the map so we need to loop and some of them but it's", "tokens": [51218, 819, 4471, 11, 257, 819, 5055, 295, 264, 4471, 370, 321, 643, 281, 6367, 293, 512, 295, 552, 457, 309, 311, 51630], "temperature": 0.0, "avg_logprob": -0.33477814471135375, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.027625974267721176}, {"id": 24, "seek": 19432, "start": 194.35999999999999, "end": 203.4, "text": " quite easy to access and communicate from user space to a BPF kernel space program.", "tokens": [50366, 1596, 1858, 281, 2105, 293, 7890, 490, 4195, 1901, 281, 257, 40533, 37, 28256, 1901, 1461, 13, 50818], "temperature": 0.0, "avg_logprob": -0.35685440063476564, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.0014752534916624427}, {"id": 25, "seek": 19432, "start": 203.4, "end": 211.16, "text": " Obviously we need to redirect packet if we want to do some nonbalancing so to redirect", "tokens": [50818, 7580, 321, 643, 281, 29066, 20300, 498, 321, 528, 281, 360, 512, 2107, 2645, 8779, 370, 281, 29066, 51206], "temperature": 0.0, "avg_logprob": -0.35685440063476564, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.0014752534916624427}, {"id": 26, "seek": 19432, "start": 211.16, "end": 219.07999999999998, "text": " packet we use XDP ticks or XDP redirect return code.", "tokens": [51206, 20300, 321, 764, 1783, 11373, 42475, 420, 1783, 11373, 29066, 2736, 3089, 13, 51602], "temperature": 0.0, "avg_logprob": -0.35685440063476564, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.0014752534916624427}, {"id": 27, "seek": 19432, "start": 219.07999999999998, "end": 223.56, "text": " Before redirect we need to change value of the packet for example in TCP samples is very", "tokens": [51602, 4546, 29066, 321, 643, 281, 1319, 2158, 295, 264, 20300, 337, 1365, 294, 48965, 10938, 307, 588, 51826], "temperature": 0.0, "avg_logprob": -0.35685440063476564, "compression_ratio": 1.616580310880829, "no_speech_prob": 0.0014752534916624427}, {"id": 28, "seek": 22356, "start": 223.6, "end": 230.52, "text": " easy we just swap the source MAC address and the destination source address so when we", "tokens": [50366, 1858, 321, 445, 18135, 264, 4009, 27716, 2985, 293, 264, 12236, 4009, 2985, 370, 562, 321, 50712], "temperature": 0.0, "avg_logprob": -0.24366826670510427, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.003270245622843504}, {"id": 29, "seek": 22356, "start": 230.52, "end": 240.04, "text": " return the XDP code the packets will be redirected to the other machine we selected.", "tokens": [50712, 2736, 264, 1783, 11373, 3089, 264, 30364, 486, 312, 29066, 292, 281, 264, 661, 3479, 321, 8209, 13, 51188], "temperature": 0.0, "avg_logprob": -0.24366826670510427, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.003270245622843504}, {"id": 30, "seek": 22356, "start": 240.04, "end": 248.8, "text": " Another important optimization to do on the load balancing is using direct server return", "tokens": [51188, 3996, 1021, 19618, 281, 360, 322, 264, 3677, 22495, 307, 1228, 2047, 7154, 2736, 51626], "temperature": 0.0, "avg_logprob": -0.24366826670510427, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.003270245622843504}, {"id": 31, "seek": 24880, "start": 248.8, "end": 260.24, "text": " so all the servers send their response directly to the user without going another time to", "tokens": [50364, 370, 439, 264, 15909, 2845, 641, 4134, 3838, 281, 264, 4195, 1553, 516, 1071, 565, 281, 50936], "temperature": 0.0, "avg_logprob": -0.25377036503383094, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.015671223402023315}, {"id": 32, "seek": 24880, "start": 260.24, "end": 262.12, "text": " the load balancer.", "tokens": [50936, 264, 3677, 3119, 28347, 13, 51030], "temperature": 0.0, "avg_logprob": -0.25377036503383094, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.015671223402023315}, {"id": 33, "seek": 24880, "start": 262.12, "end": 269.44, "text": " To do this load balancer and server must share the same from the group of the canned server", "tokens": [51030, 1407, 360, 341, 3677, 3119, 28347, 293, 7154, 1633, 2073, 264, 912, 490, 264, 1594, 295, 264, 36462, 7154, 51396], "temperature": 0.0, "avg_logprob": -0.25377036503383094, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.015671223402023315}, {"id": 34, "seek": 24880, "start": 269.44, "end": 276.04, "text": " if the server was the first one the new direct the new request go to the second one and so", "tokens": [51396, 498, 264, 7154, 390, 264, 700, 472, 264, 777, 2047, 264, 777, 5308, 352, 281, 264, 1150, 472, 293, 370, 51726], "temperature": 0.0, "avg_logprob": -0.25377036503383094, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.015671223402023315}, {"id": 35, "seek": 27604, "start": 276.08000000000004, "end": 282.48, "text": " in this case unfortunately we break connection for example if a server goes online but if", "tokens": [50366, 294, 341, 1389, 7015, 321, 1821, 4984, 337, 1365, 498, 257, 7154, 1709, 2950, 457, 498, 50686], "temperature": 0.0, "avg_logprob": -0.22591077127764303, "compression_ratio": 1.7320261437908497, "no_speech_prob": 0.010237335227429867}, {"id": 36, "seek": 27604, "start": 282.48, "end": 295.24, "text": " we remove on the case that the server wasn't on the first choice all the packets continue", "tokens": [50686, 321, 4159, 322, 264, 1389, 300, 264, 7154, 2067, 380, 322, 264, 700, 3922, 439, 264, 30364, 2354, 51324], "temperature": 0.0, "avg_logprob": -0.22591077127764303, "compression_ratio": 1.7320261437908497, "no_speech_prob": 0.010237335227429867}, {"id": 37, "seek": 27604, "start": 295.24, "end": 302.36, "text": " to go to the same score so if we remove not the first one but the other ones there is", "tokens": [51324, 281, 352, 281, 264, 912, 6175, 370, 498, 321, 4159, 406, 264, 700, 472, 457, 264, 661, 2306, 456, 307, 51680], "temperature": 0.0, "avg_logprob": -0.22591077127764303, "compression_ratio": 1.7320261437908497, "no_speech_prob": 0.010237335227429867}, {"id": 38, "seek": 30236, "start": 302.36, "end": 311.88, "text": " no problem for render washing instead in many cases the ashing completely changes if we", "tokens": [50364, 572, 1154, 337, 15529, 13836, 2602, 294, 867, 3331, 264, 382, 571, 2584, 2962, 498, 321, 50840], "temperature": 0.0, "avg_logprob": -0.38102018637735335, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.0022735462989658117}, {"id": 39, "seek": 30236, "start": 311.88, "end": 320.48, "text": " change the set of server and all the connection blocks and only one or all of the servers.", "tokens": [50840, 1319, 264, 992, 295, 7154, 293, 439, 264, 4984, 8474, 293, 787, 472, 420, 439, 295, 264, 15909, 13, 51270], "temperature": 0.0, "avg_logprob": -0.38102018637735335, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.0022735462989658117}, {"id": 40, "seek": 30236, "start": 320.48, "end": 332.04, "text": " This is all interesting but it will be really nice if we can load balancing do load balancing", "tokens": [51270, 639, 307, 439, 1880, 457, 309, 486, 312, 534, 1481, 498, 321, 393, 3677, 22495, 360, 3677, 22495, 51848], "temperature": 0.0, "avg_logprob": -0.38102018637735335, "compression_ratio": 1.6385542168674698, "no_speech_prob": 0.0022735462989658117}, {"id": 41, "seek": 33204, "start": 332.04, "end": 334.56, "text": " without load balancer.", "tokens": [50364, 1553, 3677, 3119, 28347, 13, 50490], "temperature": 0.0, "avg_logprob": -0.3185963966477085, "compression_ratio": 1.5923913043478262, "no_speech_prob": 0.0049498542211949825}, {"id": 42, "seek": 33204, "start": 334.56, "end": 342.84000000000003, "text": " For doing this we can exploit we can leverage the ACMP routing feature that the routers", "tokens": [50490, 1171, 884, 341, 321, 393, 25924, 321, 393, 13982, 264, 8157, 12224, 32722, 4111, 300, 264, 4020, 433, 50904], "temperature": 0.0, "avg_logprob": -0.3185963966477085, "compression_ratio": 1.5923913043478262, "no_speech_prob": 0.0049498542211949825}, {"id": 43, "seek": 33204, "start": 342.84000000000003, "end": 345.68, "text": " have.", "tokens": [50904, 362, 13, 51046], "temperature": 0.0, "avg_logprob": -0.3185963966477085, "compression_ratio": 1.5923913043478262, "no_speech_prob": 0.0049498542211949825}, {"id": 44, "seek": 33204, "start": 345.68, "end": 352.88, "text": " Equal cost multi-path routing is designed for split traffic designated as single EP across", "tokens": [51046, 15624, 304, 2063, 4825, 12, 31852, 32722, 307, 4761, 337, 7472, 6419, 21688, 382, 2167, 25330, 2108, 51406], "temperature": 0.0, "avg_logprob": -0.3185963966477085, "compression_ratio": 1.5923913043478262, "no_speech_prob": 0.0049498542211949825}, {"id": 45, "seek": 33204, "start": 352.88, "end": 359.56, "text": " multiple links of equal cost but we can use it to split the traffic between server if", "tokens": [51406, 3866, 6123, 295, 2681, 2063, 457, 321, 393, 764, 309, 281, 7472, 264, 6419, 1296, 7154, 498, 51740], "temperature": 0.0, "avg_logprob": -0.3185963966477085, "compression_ratio": 1.5923913043478262, "no_speech_prob": 0.0049498542211949825}, {"id": 46, "seek": 35956, "start": 359.6, "end": 368.12, "text": " all the server announce the same EP and in this case the router blissfully redirects the", "tokens": [50366, 439, 264, 7154, 7478, 264, 912, 25330, 293, 294, 341, 1389, 264, 22492, 31522, 2277, 29066, 82, 264, 50792], "temperature": 0.0, "avg_logprob": -0.36737054491799975, "compression_ratio": 1.6198830409356726, "no_speech_prob": 0.005971651058644056}, {"id": 47, "seek": 35956, "start": 368.12, "end": 374.96, "text": " packet to all the server without knowing that is not one but end server that receive packages.", "tokens": [50792, 20300, 281, 439, 264, 7154, 1553, 5276, 300, 307, 406, 472, 457, 917, 7154, 300, 4774, 17401, 13, 51134], "temperature": 0.0, "avg_logprob": -0.36737054491799975, "compression_ratio": 1.6198830409356726, "no_speech_prob": 0.005971651058644056}, {"id": 48, "seek": 35956, "start": 374.96, "end": 383.96, "text": " So we can go from a normal this normal architecture with a load balancer between a server and", "tokens": [51134, 407, 321, 393, 352, 490, 257, 2710, 341, 2710, 9482, 365, 257, 3677, 3119, 28347, 1296, 257, 7154, 293, 51584], "temperature": 0.0, "avg_logprob": -0.36737054491799975, "compression_ratio": 1.6198830409356726, "no_speech_prob": 0.005971651058644056}, {"id": 49, "seek": 38396, "start": 383.96, "end": 392.96, "text": " router to a complete distributed load balancer where the package are distributed using ACMP.", "tokens": [50364, 22492, 281, 257, 3566, 12631, 3677, 3119, 28347, 689, 264, 7372, 366, 12631, 1228, 8157, 12224, 13, 50814], "temperature": 0.0, "avg_logprob": -0.3336953750023475, "compression_ratio": 1.5125, "no_speech_prob": 0.015313918702304363}, {"id": 50, "seek": 38396, "start": 392.96, "end": 403.47999999999996, "text": " So the ACMP is really useful for high performance load balancer and using optimization like", "tokens": [50814, 407, 264, 8157, 12224, 307, 534, 4420, 337, 1090, 3389, 3677, 3119, 28347, 293, 1228, 19618, 411, 51340], "temperature": 0.0, "avg_logprob": -0.3336953750023475, "compression_ratio": 1.5125, "no_speech_prob": 0.015313918702304363}, {"id": 51, "seek": 38396, "start": 403.47999999999996, "end": 409.12, "text": " direct server return we can also increase the throughput.", "tokens": [51340, 2047, 7154, 2736, 321, 393, 611, 3488, 264, 44629, 13, 51622], "temperature": 0.0, "avg_logprob": -0.3336953750023475, "compression_ratio": 1.5125, "no_speech_prob": 0.015313918702304363}, {"id": 52, "seek": 40912, "start": 409.12, "end": 416.2, "text": " To redirect all the package to the same backend server we need to use a consistent ashing", "tokens": [50364, 1407, 29066, 439, 264, 7372, 281, 264, 912, 38087, 7154, 321, 643, 281, 764, 257, 8398, 382, 571, 50718], "temperature": 0.0, "avg_logprob": -0.24957741796970367, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.05730786174535751}, {"id": 53, "seek": 40912, "start": 416.2, "end": 424.2, "text": " algorithm and it's possible to leverage the ACMP routing available in routers to distribute", "tokens": [50718, 9284, 293, 309, 311, 1944, 281, 13982, 264, 8157, 12224, 32722, 2435, 294, 4020, 433, 281, 20594, 51118], "temperature": 0.0, "avg_logprob": -0.24957741796970367, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.05730786174535751}, {"id": 54, "seek": 40912, "start": 424.2, "end": 433.24, "text": " packets between server and deploy the load balancer directly to the backend server without", "tokens": [51118, 30364, 1296, 7154, 293, 7274, 264, 3677, 3119, 28347, 3838, 281, 264, 38087, 7154, 1553, 51570], "temperature": 0.0, "avg_logprob": -0.24957741796970367, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.05730786174535751}, {"id": 55, "seek": 40912, "start": 433.24, "end": 436.12, "text": " the dedicated machine.", "tokens": [51570, 264, 8374, 3479, 13, 51714], "temperature": 0.0, "avg_logprob": -0.24957741796970367, "compression_ratio": 1.6032608695652173, "no_speech_prob": 0.05730786174535751}, {"id": 56, "seek": 43612, "start": 436.12, "end": 442.12, "text": " All the code that I developed is available open to the public city and there is also", "tokens": [50364, 1057, 264, 3089, 300, 286, 4743, 307, 2435, 1269, 281, 264, 1908, 2307, 293, 456, 307, 611, 50664], "temperature": 0.0, "avg_logprob": -0.4339672327041626, "compression_ratio": 1.5433526011560694, "no_speech_prob": 0.034501612186431885}, {"id": 57, "seek": 43612, "start": 442.12, "end": 450.64, "text": " a link to my thesis all in Italian fortunately where I examine all the available load balancers", "tokens": [50664, 257, 2113, 281, 452, 22288, 439, 294, 10003, 25511, 689, 286, 17496, 439, 264, 2435, 3677, 3119, 4463, 433, 51090], "temperature": 0.0, "avg_logprob": -0.4339672327041626, "compression_ratio": 1.5433526011560694, "no_speech_prob": 0.034501612186431885}, {"id": 58, "seek": 43612, "start": 450.64, "end": 462.8, "text": " in the market and all I explain all with more or less briefly let's say like 70 pages.", "tokens": [51090, 294, 264, 2142, 293, 439, 286, 2903, 439, 365, 544, 420, 1570, 10515, 718, 311, 584, 411, 5285, 7183, 13, 51698], "temperature": 0.0, "avg_logprob": -0.4339672327041626, "compression_ratio": 1.5433526011560694, "no_speech_prob": 0.034501612186431885}, {"id": 59, "seek": 46280, "start": 462.8, "end": 474.96000000000004, "text": " Thank you for your attention.", "tokens": [50364, 1044, 291, 337, 428, 3202, 13, 50972], "temperature": 0.0, "avg_logprob": -0.3521600611069623, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.5299078226089478}, {"id": 60, "seek": 46280, "start": 474.96000000000004, "end": 480.8, "text": " Thanks for the talk.", "tokens": [50972, 2561, 337, 264, 751, 13, 51264], "temperature": 0.0, "avg_logprob": -0.3521600611069623, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.5299078226089478}, {"id": 61, "seek": 46280, "start": 480.8, "end": 484.96000000000004, "text": " Thanks for the talk and I have one question.", "tokens": [51264, 2561, 337, 264, 751, 293, 286, 362, 472, 1168, 13, 51472], "temperature": 0.0, "avg_logprob": -0.3521600611069623, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.5299078226089478}, {"id": 62, "seek": 46280, "start": 484.96000000000004, "end": 491.8, "text": " Is it possible in XDP to inspect the source the data in the packets so you can just.", "tokens": [51472, 1119, 309, 1944, 294, 1783, 11373, 281, 15018, 264, 4009, 264, 1412, 294, 264, 30364, 370, 291, 393, 445, 13, 51814], "temperature": 0.0, "avg_logprob": -0.3521600611069623, "compression_ratio": 1.4634146341463414, "no_speech_prob": 0.5299078226089478}, {"id": 63, "seek": 49180, "start": 491.8, "end": 498.76, "text": " Yeah you can impact the packet quite really easy.", "tokens": [50364, 865, 291, 393, 2712, 264, 20300, 1596, 534, 1858, 13, 50712], "temperature": 0.0, "avg_logprob": -0.34622998918805803, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.1680566370487213}, {"id": 64, "seek": 49180, "start": 498.76, "end": 507.40000000000003, "text": " Here we have only the protocol and the protocol and which type of packet it is but it's possible", "tokens": [50712, 1692, 321, 362, 787, 264, 10336, 293, 264, 10336, 293, 597, 2010, 295, 20300, 309, 307, 457, 309, 311, 1944, 51144], "temperature": 0.0, "avg_logprob": -0.34622998918805803, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.1680566370487213}, {"id": 65, "seek": 49180, "start": 507.40000000000003, "end": 511.36, "text": " to go more inside the packet to examine all the packets.", "tokens": [51144, 281, 352, 544, 1854, 264, 20300, 281, 17496, 439, 264, 30364, 13, 51342], "temperature": 0.0, "avg_logprob": -0.34622998918805803, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.1680566370487213}, {"id": 66, "seek": 49180, "start": 511.36, "end": 520.8, "text": " Okay and the second part of this question is it wise to do it like from the.", "tokens": [51342, 1033, 293, 264, 1150, 644, 295, 341, 1168, 307, 309, 10829, 281, 360, 309, 411, 490, 264, 13, 51814], "temperature": 0.0, "avg_logprob": -0.34622998918805803, "compression_ratio": 1.6184971098265897, "no_speech_prob": 0.1680566370487213}, {"id": 67, "seek": 52080, "start": 521.8, "end": 523.8, "text": " Good but yeah.", "tokens": [50414, 2205, 457, 1338, 13, 50514], "temperature": 0.0, "avg_logprob": -0.6115336547026763, "compression_ratio": 1.2268041237113403, "no_speech_prob": 0.39256805181503296}, {"id": 68, "seek": 52080, "start": 523.8, "end": 529.8, "text": " Sorry guys if you leave the room please leave from the door over there.", "tokens": [50514, 4919, 1074, 498, 291, 1856, 264, 1808, 1767, 1856, 490, 264, 2853, 670, 456, 13, 50814], "temperature": 0.0, "avg_logprob": -0.6115336547026763, "compression_ratio": 1.2268041237113403, "no_speech_prob": 0.39256805181503296}, {"id": 69, "seek": 52080, "start": 529.8, "end": 531.8, "text": " Wait until he's over.", "tokens": [50814, 3802, 1826, 415, 311, 670, 13, 50914], "temperature": 0.0, "avg_logprob": -0.6115336547026763, "compression_ratio": 1.2268041237113403, "no_speech_prob": 0.39256805181503296}, {"id": 70, "seek": 52080, "start": 545.8, "end": 546.8, "text": " Thank you.", "tokens": [51614, 1044, 291, 13, 51664], "temperature": 0.0, "avg_logprob": -0.6115336547026763, "compression_ratio": 1.2268041237113403, "no_speech_prob": 0.39256805181503296}, {"id": 71, "seek": 55080, "start": 550.8, "end": 551.8, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.451141357421875, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9867270588874817}], "language": "en"}