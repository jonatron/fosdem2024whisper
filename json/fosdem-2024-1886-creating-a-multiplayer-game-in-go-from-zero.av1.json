{"text": " Thank you everyone. If I can have your attention again please. Because now the fun starts. We have games, we have drones, we have music. It's finally time to party and the first party person will talk about gaming in Go. Run for plaza Francesc. Thank you very much for being here. Before we start, if you want to check the game, it's available on MazeWorlds.com. If you decide to check it out while you talk, it's fine. It's still in Earth development so it may have some bugs, it may crash, but don't worry, just play with it if you want to and have fun. That's why I did it. So a bit of myself. I'm a Go developer. I've been working in Go in back end mostly for the past nine years. Before that I was doing JavaScript, Pearl and Ruby. So nothing about gaming. So I have no knowledge when I started doing this game. Why did I do it? Why did I decide to build the game for myself? So basically a few years back I was thinking like, oh, I would like to play a game that I used to play when I was in high school. So when I was in high school, every Friday with my friends we went to a cyber coffee and we used to play games like Warcraft or anything like that. And not only Warcraft but mods about Warcraft, which nowadays some of them have become popular like League of Legends. Maybe you knew about him. So League of Legends, it came from a mod of Warcraft which is called Dota and also Dota 2 is a mod that came from Warcraft for the same one. So one of the mods that I used to play on Warcraft was called Line Toward Wars. And I really loved it, but I've never been able to find anyone who ported it from the actual implementation to something which is not reliant to anything of Warcraft because this mod is available in Warcraft 3 which is from 2007. So remember, it's on Starcraft, it's on Warcraft 3 Reforged which is the new version that they released. But you always have to have Warcraft as a platform to play any of these mods. So I said, okay, how hard can it be to do something like that? Based on that, this mod is not that difficult. So first of all, I started checking out, okay, I want to build a game and I remember hearing a friend of mine saying, okay, I built a game for my kid in Lua. So I said, oh, let's check out Lua and see what it has. And with Lua, I found Lof. This is the name of the library. This library basically is a two-day game engine and I started doing the tutorial. The first tutorial which is building a small game which I'm going to show later on. But when I was building the game, I was thinking, okay, I know what I want to build and I know that we'll need a backend. I know that the backend, I'm going to build it in Go, I'm not going to do it in Lua. And I most likely need to share things between the frontend, the client, and the backend. And I don't fancy rewriting stuff so I said, let's search if there's anything in Go which does the same. And searching in Go, I found Evitan. Or Evitan, I don't know which is the representation. So an Evitan in the description is basically a two-day game engine, the same one as Lof. So I said, oh, that's fine. Let's check the documentation and let's check how it looks like. This is the simplest, simplest Hello World in a game engine. Hello World is printing Hello World on the top right of your screen, basically. And as you can see, basically, it has, in the main, you set the size of the windows that you're going to print out. You set the title that it will have. Hello World in this case. It's just the title of the windows, not what it will be inside of it. And then you use Evitan to run the game and then you pass a stroke. The stroke has to fulfill these four, I guess, three functions. One is for interface. One is update, draw, and layout. Layout is a simple one. It's basically the size of the screen outside of where you are. So you can print a small screen on a bigger screen. Then you have update and draw, which were really interesting for me because were the same names that the library that I did the first tutorial had. So basically, those two name functions did the same thing as the ones on love. So I didn't lose my time doing something in Lua because it was the same. So basically, update where it does is every game tick, which is 60 times per second, it will call this function. And in this function, you're supposed to hear for events from the user, like clicking or with a mouse scrolling with the wheel, clicking, typing anything on the keyboard, you're supposed to hear, to listen for those events there and do something. And then on the draw function, which is called every render time of your screen, you're supposed to draw what it was that the user did if you want to do anything on that. And that's it. That's all the functionality that it gives you. Aside from all the helpers of listening for stuff, that doesn't matter as it gives you. So if you want to do anything, you are basically building on top of that. So my first games, I did at the beginning four games just for me to learn libraries and to be comfortable to then start doing my own game. So the first one was shoot the enemy. This is the one that I copied from the Lua library. And just because the a bit in library didn't have any useful at least at the time. And all the tutorials were examples. So you want to do this? There's an example. You want to do that? There's an example. It has a lot of examples, but not a tutorial that kind of drives through all the stuff that you are able to do. So the first one was this one that I copied from the Lua implementation, which is the only one we're going to play. It's this one. So you are able to move. The snake is the enemy. It has a life on top left, which is the number of life, which is 10. And me and the panda. I move the panda with A and D. And if I play space, I shoot. If it hits, that was lucky. If it hits, it moves faster, so it's harder for me to finish the game. It's not because I can spam it and just finish the game easily, but the idea is it's harder for you to finish the game with that. So that was my first game. This allowed me to know how to print something on the screen, the image, get the events from my keyboard of moving left and right to move the panda. And then let me drink a bit and I'm just going to drink. And then having something that moves automatically, the snake is moving by itself, and then shooting something when they press something, and that also is moving by itself, which is the bullet, and then detecting the collision from the bullet to the actual snake and then producing the life. So with that simple tutorial, you get all that, which is really useful. So then I decided, okay, let's make something else. I was moving out of the tutorials because that's the basics. As you saw, the interface is really simple. You have all the updates or whatever you want to do. So then I decided to make the snake. I'm not going to play this one just because the image you see is one pixel by one pixel and hitting the actual box is really awkward. So I'm just going to make a full of my software in that game. But it works. And you have the score that you have on the top left, so how many of the boxes did you get, and it gets longer, and then you can go to the edge of the screen and it will appear on the other end. So the only thing that kills you is eating yourself. So one of the normal snakes. The next one, the radio, is space and bothers. We all know how it was, so it's basically you can move the spaceship to the left to the right, you click space, and then you kill the invaders. Same thing. So nothing much more difficult than the first one, for example, this one. But then when I finished this, I said, okay, now I know a bit of the basics, but there are a few things I didn't touch yet on regards of what I want to do, which is the game that I will tell you later on what it's about. And the thing that I was missing is basically how units move. So not just moving, but the assets of the unit moving up, moving left, moving right, and so on. So you print those on the screen, so when you actually do the movements, you see something moving smoothly, not just the other movements, which are just moving an image up and down. And not just that, but seeing it move on someone else's screen. And then you have to have server side, which the client is sending information to the server, and the server is replicating this state to the other clients and yourself. So this is a small example of the first implementation that I did. That's an hour on the right side if I move to the left side. So you can see that the two clients see the same thing, and there's a server also. But it's the first implementation in which it's simple to see the things are moving around and doing this stuff. And also the map. This map that you see in the background is something that I built. It's not complex, but it's something that then allows me to build what that's the real game that I built, which I called Maze Wars in this case. So now it looks a bit better. It's a screen show I took maybe a month ago, so now it looks a bit better, but that's the basics. So what is this game about? Basically when you start the game, not when you start the app, you have to give it a name, and then you have to start the game, and then other people join, and it could be up to six people or minimum of two. In this case, it's two people. So when we are two, you are assigned one of these lines, up to six. So for example, in this case, I say I'm the one on the left. The end goal of the game is to steal all the other people's life. Everyone has at least 20 lives. When they start, everyone has 20 lives, and the way I steal those lives is by sending units. Sending units in the bottom right, you see that there's a screen which some faces, those are the units. When you click those, the units spawn on the top, gray area, and they have to pass down until they reach another gray area, which they move to the next line if there's any, or die. And also when they reach the end, they steal a life from the other player and they give it to you. That's as simple as that. How to prevent that? You have to place towers. When you place the towers, the idea is to build the maze for the units to go through the maze while the towers are attacking the units. And that's all. That's where I did it, because it's really simple. If you nail it down and reduce it to the basics, it's something which is really simple. If it were a shooter game or something like that, I would not even start it because that's another stuff. But this is really easy. So I said, okay, let's build it. And also this is basically if you ever played any kind of tower defense, which also came from Warcraft mods, this is basically a tower defense, but that you can build a path instead of having a predefined path that you have to place towers on. So my list of things, at least at that time, that I said, okay, I need this in order to do the game. I needed some assets because I need towers, I need the terrain, I need the units and so on. I need to do the map. So how is the map of the game? That's the thing that you saw before. Also, I need to be able, well, the code architecture, so how I'm going to architecture the code in order to not have a mess later on. So how are things going to be organized and how everything is going to communicate between each other? That's one of the interesting parts for me. Summoning units, so clicking the unit and summoning on the other side and then passing down, placing towers, described this, and gold income and lives, that's also easy, and multiplayer servers and the EXUI. So those are the list and we are going to go through that and potentially the struggles that I had while that. So the assets. For the assets, I was searching for something free at the time that was giving me the minimum kind of interesting assets that I needed. In this case, you need units. You can see that there are here some of the units that I saw before. On the top right, there's a cycle that is called which one I, so it had units, at least 10, it has, so it's fine. The hard part is to find towers because normally on these free assets packs, towers are not something that you were going to find because it's really specific to this game. So what I used is what you can see on the bottom right, which is like a sculpture of a monk. So that's what I use as one of the towers and there's another sculpture as a warrior, which is the other tower that I use. The asset pack is much bigger than this. It's really, really big. It's just an example that they give you as a few things that we have here. I'm going to drink a bit more of water. So yeah, then the map. How did I build the map? The map I use software which is called Tile, which is basically used for that, to build maps and to be something for your game. Basically what you do is you import your assets on your bottom right. You see that those are some of the, some of the map assets of the assets that I showed before and then you are basically using paints. Let's say this way. You click one of the assets and you can place it on one of the grid. You see that that's a grid. You can place it. You can, and basically once you have one line, in my case, I can just copy paste it down because those are all the same. So once I did one, basically it was to build the map for more play-ups, just copying them. But that's the library that I use. Once I found it, I was like, okay, that's quite easy and it works really well. Then for the code architecture, when I was building the game, when I started with Lua, the thing about hearing for actions, sending actions to somewhere and that somewhere is storing those actions and then the draw is drawing what happened before. It was really, really ringing my bells on some things I did before. On the bus, when I was working with JavaScript, I was maybe good at that, but I was in the train type of React when it came out and React and Redux and all that. When that came out, I was doing JavaScript, so I was really on tune with that. React before it was using Redux, and I don't know what it's using now, it used to use Flux, which is the library that Google and more Facebook are implemented. How it works is basically this is an HTML point of view. The view is the normal HTML that you have. When the user clicks the view, an action is triggered. This action is passed to a dispatcher, which is basically serializing all the actions in a specific order in the order they arrive. Then it's dispatching these actions to the stores. The stores are basically data maps which listen for those actions. It's a big switch case for the actions that you want to do actions on with the data that you supposedly have. Once you change your data with the action that happened, then you trigger an even like I changed. Then the view is hearing for those I change. Then if it Redux, for example, I react, you change the specific part of the view that it belongs to a data.change. That's how this works. If you change the view and you add the client that I'm doing, it's the same stuff. The only difference is that the store is not triggering I change, though the library does. It's not triggering I change because the draw is already being called every time that the screen is being refreshed. There's no need for any view to hear from any changes from the store. Basically, I look for the Flux library in Go. There were some implementations not fully implemented or not working as expected. I just ported the full implementation of Flux that is on Google, I don't Facebook for it, and I ported it on Go. If any of you want to do something like this, there's a library now that works for that. What that gave me also is a state update, which means that when something changed, I also need to notify the server that something happened if it's needed for the server to know the data. For example, if I place a tower, then I can send this action to the server. The server has the same architecture, has a dispatcher, has the stores, and then the server can apply this information. In my case, that's why I decide every four times per second, the server is getting these stores, the state that it has, it serializes the state in JSON, and then it sends this state to all the clients. The clients can see that someone plays a tower because the state is changed. How this is sent with an action, I'm using WebSocket. It sends an action via WebSocket to get the action on the client and just creates an action and push it to the dispatcher, and then everything works as expected. Yeah, that's architecture that I did. Also, one thing that is really cool that I'm not doing now, but that could be potentially useful is replayability. If you play a game, some games you can, you have the ability that after you play the game, you can see, okay, what did I do wrong, and you can just replay the game. I don't know how this is done, but the only way that I have in mind of working is something like this, because if I have the actions, I can just replay the actions in the order that happened, and I have replayability, and that's it. So as long as I'm replaying on the same moment that happened, I can replay anything at any point of time. So, yeah, if at some point I want to implement that, I just have it kind of for free. I just have to store the actions on, that's it. Now, the other interesting part, summoning units. So the first implementation was the easiest one, so just Y++, just go down, straight down, ignore everything until you reach the bottom, which is when you die, and then you steal the life, and you give it to the player. That's fine. I did this implementation just to see that everything was working. You click, you summon, and it goes on. Fine. Now, the next implementation was when I was already placing towers. So when I had tower placing, if I summon a unit, it just went straight through the towers, because it didn't know that those should be avoided. So then I implemented Drieska, just because for me, like, I have to find the shortest path between point A and point B. I'm going to do that. Well, I didn't know at the time, but Drieska is not the fastest. If it's a big graph, it takes three seconds to calculate the path of all the graphs using Drieska. So if we go to the beginning, you can see the cursor moving. Now I click, now it appears. So it's really slow. And it's something that basically you cannot play with it. It would be impossible, because also it's blocking the main thread, because it's doing that. So I was chatting with a friend of mine and said, okay, this is happening. Do you know something? And he said, yeah, you can try Aster. I don't know if you test it, but Aster is basically a passing algorithm that is an improvement over Drieska and based for passing for games. Like, well, that looks like something that is for what I want to do. So maybe you can notice the difference, but yeah, it's a bit faster than Drieska. I'm spamming, right? I'm just clicking, clicking, clicking. And you can see it's not going slow. It's not blocking anything. And it's quite good. Ignore the fact that they are going below the towers. Just follow the lines. Just ignore the assets at this time. So yeah, I did Drieska. The only thing that it's noticeable, and I think that now that I changed a few things, it was a mistake that I did. But basically, the ones that go on this side, you see it basically are doing edge shapes, which is not good for this game because the towers have a range for attack. So they're basically going attack me, attack me, attack me, attack me, attack me, and they die. The good thing would be just doing a diagonal. Let me bring my water. Right. So for that, I just tweak a bit A star. Because A star, how it works is basically you have a Drieska, the same one. But the only difference is that you have, how is it called? A priority queue. It's time that you want to calculate the distance between, if you want to, it's time you want to jump to a different node to calculate the graph on that, the path on that node. What you do is you say, okay, from this node to the end, which is the distance. And from that node to the end, which is the distance. And then you got all the distance. You push this element to a queue with the node. And then you get an element from the queue, which is the one that eats more, more closer to the destination. So basically, if it's just a straight line, it will just calculate go straight because it's always the fastest route to go straight. And that's how A star works. What I change about A star, and that's basically my potential, and now it works better in this way. But what I change is that this algorithm to calculate how close it is, I use Pythagoras because it's just to have xy and xy just make Pythagoras and go straight line the difference. But the ideal one that it has to use is Manhattan. Manhattan algorithm is basically how many jumps left and right, left and right, or pixel, pixel, pixel, pixel, pixel, no diagonals is the distance between those. And with that, it works much better. But what I did to change it is basically when I'm pushing elements to this sort of queue, this periodic queue, what I'm changing is that if the node that I'm pushing isn't the same direction that I was, I just increase a little bit. So I just decrease the priority. So it's most unlikely that he will go straightforward or the same direction. And it's more likely that he will switch directions, basically fiber thing to going on diagonals. And just doing that small change, everything when like perfectly on the diagonals or whatever. And yeah, that's what I should be for. Placing towers. Placing towers has not much logic itself, just the fact that when it clicks and how to place it on the line. The only thing that's noticeable is that the tower is not, you cannot place it anywhere on the line. You can't place it anywhere on the line. But it has like, you could see that it's basically jumping around. That is not straight. Why is that? Because when you're building the maze, it's much better to have something straight because for you, it's easier to finish like the build that you're doing than if something is one pixel below and someone is one pixel above, because then most likely you will find that you are blocking the units, which is something that you cannot do. You cannot block the unit. You cannot just build perpendicular lines and say, that's it. I finished. That's not possible. You cannot block the path of the units. So that's another topic. How to detect that the path is blocked. And how to get the path is blocked. Basically what I do is when you try to place a tower and you do the action of placing towers, I just try to create a new unit that will go through as theoretical line with that tower in it. If I don't get any path, then it's wrong. You cannot place a tower. And if I do get a path, then yes, you can place a tower. And that's for placing towers. Then I have gold and income, which is easy. You get gold by killing units. You get income by submitting units. And then every 15 seconds, all the income that you get from submitting units, from all the game, you get it as gold. And the life is basically subtracting life. The multiplayer server is something that I spoke with the architecture. But basically, if you are interested in game servers, this post here is really, really, really interesting. Because it explains you how different games that you may want to build, for example, shooter games or things like that, how do they supposed to work in a small scale? For example, shooter games, the thing that was not useful for me, it's like you are shooting on the past, you are just shooting on the present, because as everything is happening in life, the idea on the servers that you are on the past, for example, the implementation is alternative. Basically, the server is the one ruling everything through the client, sending information. The client has to override with what the server is sending. But it's also the server have, the client have a bit of predictions. The unit movement is not sent with the state. It is, but the one that is doing the movement is the client. So the server is just sending that this was the path and it didn't change and the client is just continuing with the path that it was before. And also using Flux and using WebSockets for all of that. UX UI, first, that was the implementation that I have before, which is really awful. And then I discover a written UI, which is basically bootstrap. I don't know if you heard of bootstrap for HTML. Well, it's that. You can create, you can say this container, which it has rows or it has a grid, and then all the content inside of it will be placed in different things. And you can do input and you can do buttons and so on. So it's really, really simple for these types of things. Then cross compilation, which was something that has been discussed with Go Release before. And this was fun because I never compiled with Cgo enable and this requires Cgo enable. So I managed to cross compile with Cgo enable for Linux, OS X and Windows. And using Go Release, just changing a few things on the actual code base and I have to open up a PR to go release to propose those changes because it's just two lines of changing. And you can cross compile using Xgo. It's not go, it's Xgo, which is a cross compilation tool. And also you can play on the browser with Wasm and at some point I will try to do it on Android, which is also possible. And for the future, the only thing that I, well, from the other things I have to do, the main one is improving the A star because right now it's the bottleneck. It takes 100 milliseconds to create a path. And if George is spamming it, it's awful for everyone to work with because everything goes as low. And then add more types of units, add more types of towers and much, much, much more. That's it. I hope it was interesting for everyone. Thank you. If you have questions, please ask in the hallway because we want to change speakers quickly and not wasting any more time. Thank you again and amazing work.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.78, "text": " Thank you everyone. If I can have your attention again please. Because now the fun starts.", "tokens": [50364, 1044, 291, 1518, 13, 759, 286, 393, 362, 428, 3202, 797, 1767, 13, 1436, 586, 264, 1019, 3719, 13, 50903], "temperature": 0.0, "avg_logprob": -0.3939988911151886, "compression_ratio": 1.4269005847953216, "no_speech_prob": 0.7045294046401978}, {"id": 1, "seek": 0, "start": 10.78, "end": 17.36, "text": " We have games, we have drones, we have music. It's finally time to party and the first party", "tokens": [50903, 492, 362, 2813, 11, 321, 362, 23823, 11, 321, 362, 1318, 13, 467, 311, 2721, 565, 281, 3595, 293, 264, 700, 3595, 51232], "temperature": 0.0, "avg_logprob": -0.3939988911151886, "compression_ratio": 1.4269005847953216, "no_speech_prob": 0.7045294046401978}, {"id": 2, "seek": 0, "start": 17.36, "end": 29.0, "text": " person will talk about gaming in Go. Run for plaza Francesc.", "tokens": [51232, 954, 486, 751, 466, 9703, 294, 1037, 13, 8950, 337, 499, 12257, 31441, 66, 13, 51814], "temperature": 0.0, "avg_logprob": -0.3939988911151886, "compression_ratio": 1.4269005847953216, "no_speech_prob": 0.7045294046401978}, {"id": 3, "seek": 2900, "start": 29.0, "end": 35.12, "text": " Thank you very much for being here. Before we start, if you want to check the game, it's", "tokens": [50364, 1044, 291, 588, 709, 337, 885, 510, 13, 4546, 321, 722, 11, 498, 291, 528, 281, 1520, 264, 1216, 11, 309, 311, 50670], "temperature": 0.0, "avg_logprob": -0.3178092456254803, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.3782213032245636}, {"id": 4, "seek": 2900, "start": 35.12, "end": 40.64, "text": " available on MazeWorlds.com. If you decide to check it out while you talk, it's fine.", "tokens": [50670, 2435, 322, 376, 13660, 37881, 82, 13, 1112, 13, 759, 291, 4536, 281, 1520, 309, 484, 1339, 291, 751, 11, 309, 311, 2489, 13, 50946], "temperature": 0.0, "avg_logprob": -0.3178092456254803, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.3782213032245636}, {"id": 5, "seek": 2900, "start": 40.64, "end": 46.6, "text": " It's still in Earth development so it may have some bugs, it may crash, but don't worry,", "tokens": [50946, 467, 311, 920, 294, 4755, 3250, 370, 309, 815, 362, 512, 15120, 11, 309, 815, 8252, 11, 457, 500, 380, 3292, 11, 51244], "temperature": 0.0, "avg_logprob": -0.3178092456254803, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.3782213032245636}, {"id": 6, "seek": 2900, "start": 46.6, "end": 51.0, "text": " just play with it if you want to and have fun. That's why I did it.", "tokens": [51244, 445, 862, 365, 309, 498, 291, 528, 281, 293, 362, 1019, 13, 663, 311, 983, 286, 630, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.3178092456254803, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.3782213032245636}, {"id": 7, "seek": 2900, "start": 51.0, "end": 56.84, "text": " So a bit of myself. I'm a Go developer. I've been working in Go in back end mostly for", "tokens": [51464, 407, 257, 857, 295, 2059, 13, 286, 478, 257, 1037, 10754, 13, 286, 600, 668, 1364, 294, 1037, 294, 646, 917, 5240, 337, 51756], "temperature": 0.0, "avg_logprob": -0.3178092456254803, "compression_ratio": 1.5655430711610487, "no_speech_prob": 0.3782213032245636}, {"id": 8, "seek": 5684, "start": 56.84, "end": 65.12, "text": " the past nine years. Before that I was doing JavaScript, Pearl and Ruby. So nothing about", "tokens": [50364, 264, 1791, 4949, 924, 13, 4546, 300, 286, 390, 884, 15778, 11, 24639, 293, 19907, 13, 407, 1825, 466, 50778], "temperature": 0.0, "avg_logprob": -0.2851723816435216, "compression_ratio": 1.7279693486590038, "no_speech_prob": 0.390514075756073}, {"id": 9, "seek": 5684, "start": 65.12, "end": 71.32000000000001, "text": " gaming. So I have no knowledge when I started doing this game. Why did I do it? Why did I", "tokens": [50778, 9703, 13, 407, 286, 362, 572, 3601, 562, 286, 1409, 884, 341, 1216, 13, 1545, 630, 286, 360, 309, 30, 1545, 630, 286, 51088], "temperature": 0.0, "avg_logprob": -0.2851723816435216, "compression_ratio": 1.7279693486590038, "no_speech_prob": 0.390514075756073}, {"id": 10, "seek": 5684, "start": 71.32000000000001, "end": 77.60000000000001, "text": " decide to build the game for myself? So basically a few years back I was thinking like, oh, I", "tokens": [51088, 4536, 281, 1322, 264, 1216, 337, 2059, 30, 407, 1936, 257, 1326, 924, 646, 286, 390, 1953, 411, 11, 1954, 11, 286, 51402], "temperature": 0.0, "avg_logprob": -0.2851723816435216, "compression_ratio": 1.7279693486590038, "no_speech_prob": 0.390514075756073}, {"id": 11, "seek": 5684, "start": 77.60000000000001, "end": 81.84, "text": " would like to play a game that I used to play when I was in high school. So when I was in", "tokens": [51402, 576, 411, 281, 862, 257, 1216, 300, 286, 1143, 281, 862, 562, 286, 390, 294, 1090, 1395, 13, 407, 562, 286, 390, 294, 51614], "temperature": 0.0, "avg_logprob": -0.2851723816435216, "compression_ratio": 1.7279693486590038, "no_speech_prob": 0.390514075756073}, {"id": 12, "seek": 5684, "start": 81.84, "end": 86.08000000000001, "text": " high school, every Friday with my friends we went to a cyber coffee and we used to play", "tokens": [51614, 1090, 1395, 11, 633, 6984, 365, 452, 1855, 321, 1437, 281, 257, 13411, 4982, 293, 321, 1143, 281, 862, 51826], "temperature": 0.0, "avg_logprob": -0.2851723816435216, "compression_ratio": 1.7279693486590038, "no_speech_prob": 0.390514075756073}, {"id": 13, "seek": 8608, "start": 86.2, "end": 92.08, "text": " games like Warcraft or anything like that. And not only Warcraft but mods about Warcraft,", "tokens": [50370, 2813, 411, 3630, 5611, 420, 1340, 411, 300, 13, 400, 406, 787, 3630, 5611, 457, 30899, 466, 3630, 5611, 11, 50664], "temperature": 0.0, "avg_logprob": -0.23858626275999933, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.061820562928915024}, {"id": 14, "seek": 8608, "start": 92.08, "end": 97.36, "text": " which nowadays some of them have become popular like League of Legends. Maybe you knew about", "tokens": [50664, 597, 13434, 512, 295, 552, 362, 1813, 3743, 411, 11199, 295, 28103, 13, 2704, 291, 2586, 466, 50928], "temperature": 0.0, "avg_logprob": -0.23858626275999933, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.061820562928915024}, {"id": 15, "seek": 8608, "start": 97.36, "end": 104.12, "text": " him. So League of Legends, it came from a mod of Warcraft which is called Dota and also", "tokens": [50928, 796, 13, 407, 11199, 295, 28103, 11, 309, 1361, 490, 257, 1072, 295, 3630, 5611, 597, 307, 1219, 413, 5377, 293, 611, 51266], "temperature": 0.0, "avg_logprob": -0.23858626275999933, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.061820562928915024}, {"id": 16, "seek": 8608, "start": 104.12, "end": 109.0, "text": " Dota 2 is a mod that came from Warcraft for the same one. So one of the mods that I used", "tokens": [51266, 413, 5377, 568, 307, 257, 1072, 300, 1361, 490, 3630, 5611, 337, 264, 912, 472, 13, 407, 472, 295, 264, 30899, 300, 286, 1143, 51510], "temperature": 0.0, "avg_logprob": -0.23858626275999933, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.061820562928915024}, {"id": 17, "seek": 8608, "start": 109.0, "end": 114.24, "text": " to play on Warcraft was called Line Toward Wars. And I really loved it, but I've never", "tokens": [51510, 281, 862, 322, 3630, 5611, 390, 1219, 14670, 33814, 515, 9818, 13, 400, 286, 534, 4333, 309, 11, 457, 286, 600, 1128, 51772], "temperature": 0.0, "avg_logprob": -0.23858626275999933, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.061820562928915024}, {"id": 18, "seek": 11424, "start": 114.28, "end": 120.19999999999999, "text": " been able to find anyone who ported it from the actual implementation to something which", "tokens": [50366, 668, 1075, 281, 915, 2878, 567, 2436, 292, 309, 490, 264, 3539, 11420, 281, 746, 597, 50662], "temperature": 0.0, "avg_logprob": -0.2170269614771793, "compression_ratio": 1.6973180076628354, "no_speech_prob": 0.009130919352173805}, {"id": 19, "seek": 11424, "start": 120.19999999999999, "end": 124.88, "text": " is not reliant to anything of Warcraft because this mod is available in Warcraft 3 which", "tokens": [50662, 307, 406, 1039, 5798, 281, 1340, 295, 3630, 5611, 570, 341, 1072, 307, 2435, 294, 3630, 5611, 805, 597, 50896], "temperature": 0.0, "avg_logprob": -0.2170269614771793, "compression_ratio": 1.6973180076628354, "no_speech_prob": 0.009130919352173805}, {"id": 20, "seek": 11424, "start": 124.88, "end": 131.72, "text": " is from 2007. So remember, it's on Starcraft, it's on Warcraft 3 Reforged which is the new", "tokens": [50896, 307, 490, 12656, 13, 407, 1604, 11, 309, 311, 322, 5705, 5611, 11, 309, 311, 322, 3630, 5611, 805, 1300, 2994, 3004, 597, 307, 264, 777, 51238], "temperature": 0.0, "avg_logprob": -0.2170269614771793, "compression_ratio": 1.6973180076628354, "no_speech_prob": 0.009130919352173805}, {"id": 21, "seek": 11424, "start": 131.72, "end": 137.56, "text": " version that they released. But you always have to have Warcraft as a platform to play", "tokens": [51238, 3037, 300, 436, 4736, 13, 583, 291, 1009, 362, 281, 362, 3630, 5611, 382, 257, 3663, 281, 862, 51530], "temperature": 0.0, "avg_logprob": -0.2170269614771793, "compression_ratio": 1.6973180076628354, "no_speech_prob": 0.009130919352173805}, {"id": 22, "seek": 11424, "start": 137.56, "end": 142.28, "text": " any of these mods. So I said, okay, how hard can it be to do something like that? Based", "tokens": [51530, 604, 295, 613, 30899, 13, 407, 286, 848, 11, 1392, 11, 577, 1152, 393, 309, 312, 281, 360, 746, 411, 300, 30, 18785, 51766], "temperature": 0.0, "avg_logprob": -0.2170269614771793, "compression_ratio": 1.6973180076628354, "no_speech_prob": 0.009130919352173805}, {"id": 23, "seek": 14228, "start": 142.32, "end": 148.84, "text": " on that, this mod is not that difficult. So first of all, I started checking out, okay,", "tokens": [50366, 322, 300, 11, 341, 1072, 307, 406, 300, 2252, 13, 407, 700, 295, 439, 11, 286, 1409, 8568, 484, 11, 1392, 11, 50692], "temperature": 0.0, "avg_logprob": -0.1868557854304238, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.011313613504171371}, {"id": 24, "seek": 14228, "start": 148.84, "end": 152.56, "text": " I want to build a game and I remember hearing a friend of mine saying, okay, I built a game", "tokens": [50692, 286, 528, 281, 1322, 257, 1216, 293, 286, 1604, 4763, 257, 1277, 295, 3892, 1566, 11, 1392, 11, 286, 3094, 257, 1216, 50878], "temperature": 0.0, "avg_logprob": -0.1868557854304238, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.011313613504171371}, {"id": 25, "seek": 14228, "start": 152.56, "end": 157.88, "text": " for my kid in Lua. So I said, oh, let's check out Lua and see what it has. And with Lua,", "tokens": [50878, 337, 452, 1636, 294, 441, 4398, 13, 407, 286, 848, 11, 1954, 11, 718, 311, 1520, 484, 441, 4398, 293, 536, 437, 309, 575, 13, 400, 365, 441, 4398, 11, 51144], "temperature": 0.0, "avg_logprob": -0.1868557854304238, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.011313613504171371}, {"id": 26, "seek": 14228, "start": 157.88, "end": 164.28, "text": " I found Lof. This is the name of the library. This library basically is a two-day game engine", "tokens": [51144, 286, 1352, 441, 2670, 13, 639, 307, 264, 1315, 295, 264, 6405, 13, 639, 6405, 1936, 307, 257, 732, 12, 810, 1216, 2848, 51464], "temperature": 0.0, "avg_logprob": -0.1868557854304238, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.011313613504171371}, {"id": 27, "seek": 14228, "start": 164.28, "end": 168.4, "text": " and I started doing the tutorial. The first tutorial which is building a small game which", "tokens": [51464, 293, 286, 1409, 884, 264, 7073, 13, 440, 700, 7073, 597, 307, 2390, 257, 1359, 1216, 597, 51670], "temperature": 0.0, "avg_logprob": -0.1868557854304238, "compression_ratio": 1.7251908396946565, "no_speech_prob": 0.011313613504171371}, {"id": 28, "seek": 16840, "start": 168.44, "end": 172.8, "text": " I'm going to show later on. But when I was building the game, I was thinking, okay, I", "tokens": [50366, 286, 478, 516, 281, 855, 1780, 322, 13, 583, 562, 286, 390, 2390, 264, 1216, 11, 286, 390, 1953, 11, 1392, 11, 286, 50584], "temperature": 0.0, "avg_logprob": -0.22872465535214073, "compression_ratio": 1.8798586572438163, "no_speech_prob": 0.09265056997537613}, {"id": 29, "seek": 16840, "start": 172.8, "end": 176.56, "text": " know what I want to build and I know that we'll need a backend. I know that the backend,", "tokens": [50584, 458, 437, 286, 528, 281, 1322, 293, 286, 458, 300, 321, 603, 643, 257, 38087, 13, 286, 458, 300, 264, 38087, 11, 50772], "temperature": 0.0, "avg_logprob": -0.22872465535214073, "compression_ratio": 1.8798586572438163, "no_speech_prob": 0.09265056997537613}, {"id": 30, "seek": 16840, "start": 176.56, "end": 180.32, "text": " I'm going to build it in Go, I'm not going to do it in Lua. And I most likely need to", "tokens": [50772, 286, 478, 516, 281, 1322, 309, 294, 1037, 11, 286, 478, 406, 516, 281, 360, 309, 294, 441, 4398, 13, 400, 286, 881, 3700, 643, 281, 50960], "temperature": 0.0, "avg_logprob": -0.22872465535214073, "compression_ratio": 1.8798586572438163, "no_speech_prob": 0.09265056997537613}, {"id": 31, "seek": 16840, "start": 180.32, "end": 186.64000000000001, "text": " share things between the frontend, the client, and the backend. And I don't fancy rewriting", "tokens": [50960, 2073, 721, 1296, 264, 1868, 521, 11, 264, 6423, 11, 293, 264, 38087, 13, 400, 286, 500, 380, 10247, 319, 19868, 51276], "temperature": 0.0, "avg_logprob": -0.22872465535214073, "compression_ratio": 1.8798586572438163, "no_speech_prob": 0.09265056997537613}, {"id": 32, "seek": 16840, "start": 186.64000000000001, "end": 191.76, "text": " stuff so I said, let's search if there's anything in Go which does the same. And searching", "tokens": [51276, 1507, 370, 286, 848, 11, 718, 311, 3164, 498, 456, 311, 1340, 294, 1037, 597, 775, 264, 912, 13, 400, 10808, 51532], "temperature": 0.0, "avg_logprob": -0.22872465535214073, "compression_ratio": 1.8798586572438163, "no_speech_prob": 0.09265056997537613}, {"id": 33, "seek": 16840, "start": 191.76, "end": 197.68, "text": " in Go, I found Evitan. Or Evitan, I don't know which is the representation. So an Evitan", "tokens": [51532, 294, 1037, 11, 286, 1352, 5689, 9670, 13, 1610, 5689, 9670, 11, 286, 500, 380, 458, 597, 307, 264, 10290, 13, 407, 364, 5689, 9670, 51828], "temperature": 0.0, "avg_logprob": -0.22872465535214073, "compression_ratio": 1.8798586572438163, "no_speech_prob": 0.09265056997537613}, {"id": 34, "seek": 19768, "start": 197.76000000000002, "end": 203.64000000000001, "text": " in the description is basically a two-day game engine, the same one as Lof. So I said,", "tokens": [50368, 294, 264, 3855, 307, 1936, 257, 732, 12, 810, 1216, 2848, 11, 264, 912, 472, 382, 441, 2670, 13, 407, 286, 848, 11, 50662], "temperature": 0.0, "avg_logprob": -0.2256249155317034, "compression_ratio": 1.891696750902527, "no_speech_prob": 0.005100777372717857}, {"id": 35, "seek": 19768, "start": 203.64000000000001, "end": 207.96, "text": " oh, that's fine. Let's check the documentation and let's check how it looks like. This is", "tokens": [50662, 1954, 11, 300, 311, 2489, 13, 961, 311, 1520, 264, 14333, 293, 718, 311, 1520, 577, 309, 1542, 411, 13, 639, 307, 50878], "temperature": 0.0, "avg_logprob": -0.2256249155317034, "compression_ratio": 1.891696750902527, "no_speech_prob": 0.005100777372717857}, {"id": 36, "seek": 19768, "start": 207.96, "end": 212.76000000000002, "text": " the simplest, simplest Hello World in a game engine. Hello World is printing Hello World", "tokens": [50878, 264, 22811, 11, 22811, 2425, 3937, 294, 257, 1216, 2848, 13, 2425, 3937, 307, 14699, 2425, 3937, 51118], "temperature": 0.0, "avg_logprob": -0.2256249155317034, "compression_ratio": 1.891696750902527, "no_speech_prob": 0.005100777372717857}, {"id": 37, "seek": 19768, "start": 212.76000000000002, "end": 218.68, "text": " on the top right of your screen, basically. And as you can see, basically, it has, in", "tokens": [51118, 322, 264, 1192, 558, 295, 428, 2568, 11, 1936, 13, 400, 382, 291, 393, 536, 11, 1936, 11, 309, 575, 11, 294, 51414], "temperature": 0.0, "avg_logprob": -0.2256249155317034, "compression_ratio": 1.891696750902527, "no_speech_prob": 0.005100777372717857}, {"id": 38, "seek": 19768, "start": 218.68, "end": 223.28, "text": " the main, you set the size of the windows that you're going to print out. You set the", "tokens": [51414, 264, 2135, 11, 291, 992, 264, 2744, 295, 264, 9309, 300, 291, 434, 516, 281, 4482, 484, 13, 509, 992, 264, 51644], "temperature": 0.0, "avg_logprob": -0.2256249155317034, "compression_ratio": 1.891696750902527, "no_speech_prob": 0.005100777372717857}, {"id": 39, "seek": 19768, "start": 223.28, "end": 226.76000000000002, "text": " title that it will have. Hello World in this case. It's just the title of the windows,", "tokens": [51644, 4876, 300, 309, 486, 362, 13, 2425, 3937, 294, 341, 1389, 13, 467, 311, 445, 264, 4876, 295, 264, 9309, 11, 51818], "temperature": 0.0, "avg_logprob": -0.2256249155317034, "compression_ratio": 1.891696750902527, "no_speech_prob": 0.005100777372717857}, {"id": 40, "seek": 22676, "start": 226.79999999999998, "end": 231.64, "text": " not what it will be inside of it. And then you use Evitan to run the game and then you", "tokens": [50366, 406, 437, 309, 486, 312, 1854, 295, 309, 13, 400, 550, 291, 764, 5689, 9670, 281, 1190, 264, 1216, 293, 550, 291, 50608], "temperature": 0.0, "avg_logprob": -0.23071307466741195, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.006065894849598408}, {"id": 41, "seek": 22676, "start": 231.64, "end": 238.2, "text": " pass a stroke. The stroke has to fulfill these four, I guess, three functions. One is for", "tokens": [50608, 1320, 257, 12403, 13, 440, 12403, 575, 281, 13875, 613, 1451, 11, 286, 2041, 11, 1045, 6828, 13, 1485, 307, 337, 50936], "temperature": 0.0, "avg_logprob": -0.23071307466741195, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.006065894849598408}, {"id": 42, "seek": 22676, "start": 238.2, "end": 244.28, "text": " interface. One is update, draw, and layout. Layout is a simple one. It's basically the", "tokens": [50936, 9226, 13, 1485, 307, 5623, 11, 2642, 11, 293, 13333, 13, 20084, 346, 307, 257, 2199, 472, 13, 467, 311, 1936, 264, 51240], "temperature": 0.0, "avg_logprob": -0.23071307466741195, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.006065894849598408}, {"id": 43, "seek": 22676, "start": 244.28, "end": 248.44, "text": " size of the screen outside of where you are. So you can print a small screen on a bigger", "tokens": [51240, 2744, 295, 264, 2568, 2380, 295, 689, 291, 366, 13, 407, 291, 393, 4482, 257, 1359, 2568, 322, 257, 3801, 51448], "temperature": 0.0, "avg_logprob": -0.23071307466741195, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.006065894849598408}, {"id": 44, "seek": 22676, "start": 248.44, "end": 254.28, "text": " screen. Then you have update and draw, which were really interesting for me because were", "tokens": [51448, 2568, 13, 1396, 291, 362, 5623, 293, 2642, 11, 597, 645, 534, 1880, 337, 385, 570, 645, 51740], "temperature": 0.0, "avg_logprob": -0.23071307466741195, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.006065894849598408}, {"id": 45, "seek": 25428, "start": 254.32, "end": 259.52, "text": " the same names that the library that I did the first tutorial had. So basically, those", "tokens": [50366, 264, 912, 5288, 300, 264, 6405, 300, 286, 630, 264, 700, 7073, 632, 13, 407, 1936, 11, 729, 50626], "temperature": 0.0, "avg_logprob": -0.22313417954878373, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.012004519812762737}, {"id": 46, "seek": 25428, "start": 259.52, "end": 264.24, "text": " two name functions did the same thing as the ones on love. So I didn't lose my time doing", "tokens": [50626, 732, 1315, 6828, 630, 264, 912, 551, 382, 264, 2306, 322, 959, 13, 407, 286, 994, 380, 3624, 452, 565, 884, 50862], "temperature": 0.0, "avg_logprob": -0.22313417954878373, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.012004519812762737}, {"id": 47, "seek": 25428, "start": 264.24, "end": 270.32, "text": " something in Lua because it was the same. So basically, update where it does is every game", "tokens": [50862, 746, 294, 441, 4398, 570, 309, 390, 264, 912, 13, 407, 1936, 11, 5623, 689, 309, 775, 307, 633, 1216, 51166], "temperature": 0.0, "avg_logprob": -0.22313417954878373, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.012004519812762737}, {"id": 48, "seek": 25428, "start": 270.32, "end": 275.08, "text": " tick, which is 60 times per second, it will call this function. And in this function, you're", "tokens": [51166, 5204, 11, 597, 307, 4060, 1413, 680, 1150, 11, 309, 486, 818, 341, 2445, 13, 400, 294, 341, 2445, 11, 291, 434, 51404], "temperature": 0.0, "avg_logprob": -0.22313417954878373, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.012004519812762737}, {"id": 49, "seek": 25428, "start": 275.08, "end": 279.72, "text": " supposed to hear for events from the user, like clicking or with a mouse scrolling with", "tokens": [51404, 3442, 281, 1568, 337, 3931, 490, 264, 4195, 11, 411, 9697, 420, 365, 257, 9719, 29053, 365, 51636], "temperature": 0.0, "avg_logprob": -0.22313417954878373, "compression_ratio": 1.7297297297297298, "no_speech_prob": 0.012004519812762737}, {"id": 50, "seek": 27972, "start": 279.76000000000005, "end": 284.24, "text": " the wheel, clicking, typing anything on the keyboard, you're supposed to hear, to listen", "tokens": [50366, 264, 5589, 11, 9697, 11, 18444, 1340, 322, 264, 10186, 11, 291, 434, 3442, 281, 1568, 11, 281, 2140, 50590], "temperature": 0.0, "avg_logprob": -0.2097612180207905, "compression_ratio": 1.8134920634920635, "no_speech_prob": 0.011386124417185783}, {"id": 51, "seek": 27972, "start": 284.24, "end": 288.44000000000005, "text": " for those events there and do something. And then on the draw function, which is called", "tokens": [50590, 337, 729, 3931, 456, 293, 360, 746, 13, 400, 550, 322, 264, 2642, 2445, 11, 597, 307, 1219, 50800], "temperature": 0.0, "avg_logprob": -0.2097612180207905, "compression_ratio": 1.8134920634920635, "no_speech_prob": 0.011386124417185783}, {"id": 52, "seek": 27972, "start": 288.44000000000005, "end": 293.6, "text": " every render time of your screen, you're supposed to draw what it was that the user did if you", "tokens": [50800, 633, 15529, 565, 295, 428, 2568, 11, 291, 434, 3442, 281, 2642, 437, 309, 390, 300, 264, 4195, 630, 498, 291, 51058], "temperature": 0.0, "avg_logprob": -0.2097612180207905, "compression_ratio": 1.8134920634920635, "no_speech_prob": 0.011386124417185783}, {"id": 53, "seek": 27972, "start": 293.6, "end": 298.84000000000003, "text": " want to do anything on that. And that's it. That's all the functionality that it gives you.", "tokens": [51058, 528, 281, 360, 1340, 322, 300, 13, 400, 300, 311, 309, 13, 663, 311, 439, 264, 14980, 300, 309, 2709, 291, 13, 51320], "temperature": 0.0, "avg_logprob": -0.2097612180207905, "compression_ratio": 1.8134920634920635, "no_speech_prob": 0.011386124417185783}, {"id": 54, "seek": 27972, "start": 298.84000000000003, "end": 304.16, "text": " Aside from all the helpers of listening for stuff, that doesn't matter as it gives you. So if", "tokens": [51320, 33726, 490, 439, 264, 854, 433, 295, 4764, 337, 1507, 11, 300, 1177, 380, 1871, 382, 309, 2709, 291, 13, 407, 498, 51586], "temperature": 0.0, "avg_logprob": -0.2097612180207905, "compression_ratio": 1.8134920634920635, "no_speech_prob": 0.011386124417185783}, {"id": 55, "seek": 30416, "start": 304.20000000000005, "end": 311.20000000000005, "text": " you want to do anything, you are basically building on top of that. So my first games, I did at", "tokens": [50366, 291, 528, 281, 360, 1340, 11, 291, 366, 1936, 2390, 322, 1192, 295, 300, 13, 407, 452, 700, 2813, 11, 286, 630, 412, 50716], "temperature": 0.0, "avg_logprob": -0.2919153130572775, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005012494511902332}, {"id": 56, "seek": 30416, "start": 312.24, "end": 317.8, "text": " the beginning four games just for me to learn libraries and to be comfortable to then start", "tokens": [50768, 264, 2863, 1451, 2813, 445, 337, 385, 281, 1466, 15148, 293, 281, 312, 4619, 281, 550, 722, 51046], "temperature": 0.0, "avg_logprob": -0.2919153130572775, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005012494511902332}, {"id": 57, "seek": 30416, "start": 317.8, "end": 323.24, "text": " doing my own game. So the first one was shoot the enemy. This is the one that I copied from", "tokens": [51046, 884, 452, 1065, 1216, 13, 407, 264, 700, 472, 390, 3076, 264, 5945, 13, 639, 307, 264, 472, 300, 286, 25365, 490, 51318], "temperature": 0.0, "avg_logprob": -0.2919153130572775, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005012494511902332}, {"id": 58, "seek": 30416, "start": 323.24, "end": 330.24, "text": " the Lua library. And just because the a bit in library didn't have any useful at least", "tokens": [51318, 264, 441, 4398, 6405, 13, 400, 445, 570, 264, 257, 857, 294, 6405, 994, 380, 362, 604, 4420, 412, 1935, 51668], "temperature": 0.0, "avg_logprob": -0.2919153130572775, "compression_ratio": 1.5982532751091703, "no_speech_prob": 0.005012494511902332}, {"id": 59, "seek": 33024, "start": 330.32, "end": 335.92, "text": " at the time. And all the tutorials were examples. So you want to do this? There's an example.", "tokens": [50368, 412, 264, 565, 13, 400, 439, 264, 17616, 645, 5110, 13, 407, 291, 528, 281, 360, 341, 30, 821, 311, 364, 1365, 13, 50648], "temperature": 0.0, "avg_logprob": -0.2850063979023635, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.014140306040644646}, {"id": 60, "seek": 33024, "start": 335.92, "end": 340.96000000000004, "text": " You want to do that? There's an example. It has a lot of examples, but not a tutorial that", "tokens": [50648, 509, 528, 281, 360, 300, 30, 821, 311, 364, 1365, 13, 467, 575, 257, 688, 295, 5110, 11, 457, 406, 257, 7073, 300, 50900], "temperature": 0.0, "avg_logprob": -0.2850063979023635, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.014140306040644646}, {"id": 61, "seek": 33024, "start": 340.96000000000004, "end": 346.56, "text": " kind of drives through all the stuff that you are able to do. So the first one was this one", "tokens": [50900, 733, 295, 11754, 807, 439, 264, 1507, 300, 291, 366, 1075, 281, 360, 13, 407, 264, 700, 472, 390, 341, 472, 51180], "temperature": 0.0, "avg_logprob": -0.2850063979023635, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.014140306040644646}, {"id": 62, "seek": 33024, "start": 346.56, "end": 352.56, "text": " that I copied from the Lua implementation, which is the only one we're going to play. It's", "tokens": [51180, 300, 286, 25365, 490, 264, 441, 4398, 11420, 11, 597, 307, 264, 787, 472, 321, 434, 516, 281, 862, 13, 467, 311, 51480], "temperature": 0.0, "avg_logprob": -0.2850063979023635, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.014140306040644646}, {"id": 63, "seek": 35256, "start": 353.12, "end": 360.12, "text": " this one. So you are able to move. The snake is the enemy. It has a life on top left, which", "tokens": [50392, 341, 472, 13, 407, 291, 366, 1075, 281, 1286, 13, 440, 12650, 307, 264, 5945, 13, 467, 575, 257, 993, 322, 1192, 1411, 11, 597, 50742], "temperature": 0.0, "avg_logprob": -0.2619626767167421, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.07282763719558716}, {"id": 64, "seek": 35256, "start": 361.24, "end": 367.24, "text": " is the number of life, which is 10. And me and the panda. I move the panda with A and", "tokens": [50798, 307, 264, 1230, 295, 993, 11, 597, 307, 1266, 13, 400, 385, 293, 264, 46685, 13, 286, 1286, 264, 46685, 365, 316, 293, 51098], "temperature": 0.0, "avg_logprob": -0.2619626767167421, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.07282763719558716}, {"id": 65, "seek": 35256, "start": 367.24, "end": 374.24, "text": " D. And if I play space, I shoot. If it hits, that was lucky. If it hits, it moves faster,", "tokens": [51098, 413, 13, 400, 498, 286, 862, 1901, 11, 286, 3076, 13, 759, 309, 8664, 11, 300, 390, 6356, 13, 759, 309, 8664, 11, 309, 6067, 4663, 11, 51448], "temperature": 0.0, "avg_logprob": -0.2619626767167421, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.07282763719558716}, {"id": 66, "seek": 35256, "start": 374.24, "end": 378.24, "text": " so it's harder for me to finish the game. It's not because I can spam it and just finish", "tokens": [51448, 370, 309, 311, 6081, 337, 385, 281, 2413, 264, 1216, 13, 467, 311, 406, 570, 286, 393, 24028, 309, 293, 445, 2413, 51648], "temperature": 0.0, "avg_logprob": -0.2619626767167421, "compression_ratio": 1.6255707762557077, "no_speech_prob": 0.07282763719558716}, {"id": 67, "seek": 37824, "start": 378.24, "end": 384.12, "text": " the game easily, but the idea is it's harder for you to finish the game with that. So that", "tokens": [50364, 264, 1216, 3612, 11, 457, 264, 1558, 307, 309, 311, 6081, 337, 291, 281, 2413, 264, 1216, 365, 300, 13, 407, 300, 50658], "temperature": 0.0, "avg_logprob": -0.2766488393147786, "compression_ratio": 1.644859813084112, "no_speech_prob": 0.012571677565574646}, {"id": 68, "seek": 37824, "start": 384.12, "end": 390.12, "text": " was my first game. This allowed me to know how to print something on the screen, the", "tokens": [50658, 390, 452, 700, 1216, 13, 639, 4350, 385, 281, 458, 577, 281, 4482, 746, 322, 264, 2568, 11, 264, 50958], "temperature": 0.0, "avg_logprob": -0.2766488393147786, "compression_ratio": 1.644859813084112, "no_speech_prob": 0.012571677565574646}, {"id": 69, "seek": 37824, "start": 390.12, "end": 397.12, "text": " image, get the events from my keyboard of moving left and right to move the panda. And", "tokens": [50958, 3256, 11, 483, 264, 3931, 490, 452, 10186, 295, 2684, 1411, 293, 558, 281, 1286, 264, 46685, 13, 400, 51308], "temperature": 0.0, "avg_logprob": -0.2766488393147786, "compression_ratio": 1.644859813084112, "no_speech_prob": 0.012571677565574646}, {"id": 70, "seek": 37824, "start": 397.44, "end": 404.44, "text": " then let me drink a bit and I'm just going to drink. And then having something that moves", "tokens": [51324, 550, 718, 385, 2822, 257, 857, 293, 286, 478, 445, 516, 281, 2822, 13, 400, 550, 1419, 746, 300, 6067, 51674], "temperature": 0.0, "avg_logprob": -0.2766488393147786, "compression_ratio": 1.644859813084112, "no_speech_prob": 0.012571677565574646}, {"id": 71, "seek": 40444, "start": 405.4, "end": 412.4, "text": " automatically, the snake is moving by itself, and then shooting something when they press", "tokens": [50412, 6772, 11, 264, 12650, 307, 2684, 538, 2564, 11, 293, 550, 5942, 746, 562, 436, 1886, 50762], "temperature": 0.0, "avg_logprob": -0.2023438771565755, "compression_ratio": 1.8818565400843883, "no_speech_prob": 0.005759552586823702}, {"id": 72, "seek": 40444, "start": 412.4, "end": 417.24, "text": " something, and that also is moving by itself, which is the bullet, and then detecting the", "tokens": [50762, 746, 11, 293, 300, 611, 307, 2684, 538, 2564, 11, 597, 307, 264, 11632, 11, 293, 550, 40237, 264, 51004], "temperature": 0.0, "avg_logprob": -0.2023438771565755, "compression_ratio": 1.8818565400843883, "no_speech_prob": 0.005759552586823702}, {"id": 73, "seek": 40444, "start": 417.24, "end": 423.15999999999997, "text": " collision from the bullet to the actual snake and then producing the life. So with that", "tokens": [51004, 24644, 490, 264, 11632, 281, 264, 3539, 12650, 293, 550, 10501, 264, 993, 13, 407, 365, 300, 51300], "temperature": 0.0, "avg_logprob": -0.2023438771565755, "compression_ratio": 1.8818565400843883, "no_speech_prob": 0.005759552586823702}, {"id": 74, "seek": 40444, "start": 423.15999999999997, "end": 428.48, "text": " simple tutorial, you get all that, which is really useful. So then I decided, okay, let's", "tokens": [51300, 2199, 7073, 11, 291, 483, 439, 300, 11, 597, 307, 534, 4420, 13, 407, 550, 286, 3047, 11, 1392, 11, 718, 311, 51566], "temperature": 0.0, "avg_logprob": -0.2023438771565755, "compression_ratio": 1.8818565400843883, "no_speech_prob": 0.005759552586823702}, {"id": 75, "seek": 40444, "start": 428.48, "end": 433.48, "text": " make something else. I was moving out of the tutorials because that's the basics. As you", "tokens": [51566, 652, 746, 1646, 13, 286, 390, 2684, 484, 295, 264, 17616, 570, 300, 311, 264, 14688, 13, 1018, 291, 51816], "temperature": 0.0, "avg_logprob": -0.2023438771565755, "compression_ratio": 1.8818565400843883, "no_speech_prob": 0.005759552586823702}, {"id": 76, "seek": 43348, "start": 433.52000000000004, "end": 438.24, "text": " saw, the interface is really simple. You have all the updates or whatever you want to do.", "tokens": [50366, 1866, 11, 264, 9226, 307, 534, 2199, 13, 509, 362, 439, 264, 9205, 420, 2035, 291, 528, 281, 360, 13, 50602], "temperature": 0.0, "avg_logprob": -0.2568527812689123, "compression_ratio": 1.787375415282392, "no_speech_prob": 0.007736063562333584}, {"id": 77, "seek": 43348, "start": 438.24, "end": 443.04, "text": " So then I decided to make the snake. I'm not going to play this one just because the image", "tokens": [50602, 407, 550, 286, 3047, 281, 652, 264, 12650, 13, 286, 478, 406, 516, 281, 862, 341, 472, 445, 570, 264, 3256, 50842], "temperature": 0.0, "avg_logprob": -0.2568527812689123, "compression_ratio": 1.787375415282392, "no_speech_prob": 0.007736063562333584}, {"id": 78, "seek": 43348, "start": 443.04, "end": 449.0, "text": " you see is one pixel by one pixel and hitting the actual box is really awkward. So I'm just", "tokens": [50842, 291, 536, 307, 472, 19261, 538, 472, 19261, 293, 8850, 264, 3539, 2424, 307, 534, 11411, 13, 407, 286, 478, 445, 51140], "temperature": 0.0, "avg_logprob": -0.2568527812689123, "compression_ratio": 1.787375415282392, "no_speech_prob": 0.007736063562333584}, {"id": 79, "seek": 43348, "start": 449.0, "end": 452.6, "text": " going to make a full of my software in that game. But it works. And you have the score", "tokens": [51140, 516, 281, 652, 257, 1577, 295, 452, 4722, 294, 300, 1216, 13, 583, 309, 1985, 13, 400, 291, 362, 264, 6175, 51320], "temperature": 0.0, "avg_logprob": -0.2568527812689123, "compression_ratio": 1.787375415282392, "no_speech_prob": 0.007736063562333584}, {"id": 80, "seek": 43348, "start": 452.6, "end": 457.04, "text": " that you have on the top left, so how many of the boxes did you get, and it gets longer,", "tokens": [51320, 300, 291, 362, 322, 264, 1192, 1411, 11, 370, 577, 867, 295, 264, 9002, 630, 291, 483, 11, 293, 309, 2170, 2854, 11, 51542], "temperature": 0.0, "avg_logprob": -0.2568527812689123, "compression_ratio": 1.787375415282392, "no_speech_prob": 0.007736063562333584}, {"id": 81, "seek": 43348, "start": 457.04, "end": 460.76, "text": " and then you can go to the edge of the screen and it will appear on the other end. So the", "tokens": [51542, 293, 550, 291, 393, 352, 281, 264, 4691, 295, 264, 2568, 293, 309, 486, 4204, 322, 264, 661, 917, 13, 407, 264, 51728], "temperature": 0.0, "avg_logprob": -0.2568527812689123, "compression_ratio": 1.787375415282392, "no_speech_prob": 0.007736063562333584}, {"id": 82, "seek": 46076, "start": 460.8, "end": 466.44, "text": " only thing that kills you is eating yourself. So one of the normal snakes. The next one,", "tokens": [50366, 787, 551, 300, 14563, 291, 307, 3936, 1803, 13, 407, 472, 295, 264, 2710, 21817, 13, 440, 958, 472, 11, 50648], "temperature": 0.0, "avg_logprob": -0.22895056569678152, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003807678120210767}, {"id": 83, "seek": 46076, "start": 466.44, "end": 471.15999999999997, "text": " the radio, is space and bothers. We all know how it was, so it's basically you can move", "tokens": [50648, 264, 6477, 11, 307, 1901, 293, 33980, 13, 492, 439, 458, 577, 309, 390, 11, 370, 309, 311, 1936, 291, 393, 1286, 50884], "temperature": 0.0, "avg_logprob": -0.22895056569678152, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003807678120210767}, {"id": 84, "seek": 46076, "start": 471.15999999999997, "end": 477.15999999999997, "text": " the spaceship to the left to the right, you click space, and then you kill the invaders.", "tokens": [50884, 264, 39185, 281, 264, 1411, 281, 264, 558, 11, 291, 2052, 1901, 11, 293, 550, 291, 1961, 264, 1048, 15221, 13, 51184], "temperature": 0.0, "avg_logprob": -0.22895056569678152, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003807678120210767}, {"id": 85, "seek": 46076, "start": 477.15999999999997, "end": 483.03999999999996, "text": " Same thing. So nothing much more difficult than the first one, for example, this one.", "tokens": [51184, 10635, 551, 13, 407, 1825, 709, 544, 2252, 813, 264, 700, 472, 11, 337, 1365, 11, 341, 472, 13, 51478], "temperature": 0.0, "avg_logprob": -0.22895056569678152, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003807678120210767}, {"id": 86, "seek": 46076, "start": 483.03999999999996, "end": 488.44, "text": " But then when I finished this, I said, okay, now I know a bit of the basics, but there", "tokens": [51478, 583, 550, 562, 286, 4335, 341, 11, 286, 848, 11, 1392, 11, 586, 286, 458, 257, 857, 295, 264, 14688, 11, 457, 456, 51748], "temperature": 0.0, "avg_logprob": -0.22895056569678152, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.003807678120210767}, {"id": 87, "seek": 48844, "start": 488.48, "end": 493.0, "text": " are a few things I didn't touch yet on regards of what I want to do, which is the game that", "tokens": [50366, 366, 257, 1326, 721, 286, 994, 380, 2557, 1939, 322, 14258, 295, 437, 286, 528, 281, 360, 11, 597, 307, 264, 1216, 300, 50592], "temperature": 0.0, "avg_logprob": -0.17654358713250412, "compression_ratio": 1.776, "no_speech_prob": 0.00409268494695425}, {"id": 88, "seek": 48844, "start": 493.0, "end": 497.88, "text": " I will tell you later on what it's about. And the thing that I was missing is basically", "tokens": [50592, 286, 486, 980, 291, 1780, 322, 437, 309, 311, 466, 13, 400, 264, 551, 300, 286, 390, 5361, 307, 1936, 50836], "temperature": 0.0, "avg_logprob": -0.17654358713250412, "compression_ratio": 1.776, "no_speech_prob": 0.00409268494695425}, {"id": 89, "seek": 48844, "start": 497.88, "end": 503.48, "text": " how units move. So not just moving, but the assets of the unit moving up, moving left,", "tokens": [50836, 577, 6815, 1286, 13, 407, 406, 445, 2684, 11, 457, 264, 9769, 295, 264, 4985, 2684, 493, 11, 2684, 1411, 11, 51116], "temperature": 0.0, "avg_logprob": -0.17654358713250412, "compression_ratio": 1.776, "no_speech_prob": 0.00409268494695425}, {"id": 90, "seek": 48844, "start": 503.48, "end": 507.2, "text": " moving right, and so on. So you print those on the screen, so when you actually do the", "tokens": [51116, 2684, 558, 11, 293, 370, 322, 13, 407, 291, 4482, 729, 322, 264, 2568, 11, 370, 562, 291, 767, 360, 264, 51302], "temperature": 0.0, "avg_logprob": -0.17654358713250412, "compression_ratio": 1.776, "no_speech_prob": 0.00409268494695425}, {"id": 91, "seek": 48844, "start": 507.2, "end": 513.12, "text": " movements, you see something moving smoothly, not just the other movements, which are just", "tokens": [51302, 9981, 11, 291, 536, 746, 2684, 19565, 11, 406, 445, 264, 661, 9981, 11, 597, 366, 445, 51598], "temperature": 0.0, "avg_logprob": -0.17654358713250412, "compression_ratio": 1.776, "no_speech_prob": 0.00409268494695425}, {"id": 92, "seek": 51312, "start": 513.16, "end": 518.4, "text": " moving an image up and down. And not just that, but seeing it move on someone else's", "tokens": [50366, 2684, 364, 3256, 493, 293, 760, 13, 400, 406, 445, 300, 11, 457, 2577, 309, 1286, 322, 1580, 1646, 311, 50628], "temperature": 0.0, "avg_logprob": -0.15721127502900317, "compression_ratio": 1.8838028169014085, "no_speech_prob": 0.011222926899790764}, {"id": 93, "seek": 51312, "start": 518.4, "end": 522.64, "text": " screen. And then you have to have server side, which the client is sending information", "tokens": [50628, 2568, 13, 400, 550, 291, 362, 281, 362, 7154, 1252, 11, 597, 264, 6423, 307, 7750, 1589, 50840], "temperature": 0.0, "avg_logprob": -0.15721127502900317, "compression_ratio": 1.8838028169014085, "no_speech_prob": 0.011222926899790764}, {"id": 94, "seek": 51312, "start": 522.64, "end": 527.96, "text": " to the server, and the server is replicating this state to the other clients and yourself.", "tokens": [50840, 281, 264, 7154, 11, 293, 264, 7154, 307, 3248, 30541, 341, 1785, 281, 264, 661, 6982, 293, 1803, 13, 51106], "temperature": 0.0, "avg_logprob": -0.15721127502900317, "compression_ratio": 1.8838028169014085, "no_speech_prob": 0.011222926899790764}, {"id": 95, "seek": 51312, "start": 527.96, "end": 533.04, "text": " So this is a small example of the first implementation that I did. That's an hour on the right side", "tokens": [51106, 407, 341, 307, 257, 1359, 1365, 295, 264, 700, 11420, 300, 286, 630, 13, 663, 311, 364, 1773, 322, 264, 558, 1252, 51360], "temperature": 0.0, "avg_logprob": -0.15721127502900317, "compression_ratio": 1.8838028169014085, "no_speech_prob": 0.011222926899790764}, {"id": 96, "seek": 51312, "start": 533.04, "end": 537.76, "text": " if I move to the left side. So you can see that the two clients see the same thing, and", "tokens": [51360, 498, 286, 1286, 281, 264, 1411, 1252, 13, 407, 291, 393, 536, 300, 264, 732, 6982, 536, 264, 912, 551, 11, 293, 51596], "temperature": 0.0, "avg_logprob": -0.15721127502900317, "compression_ratio": 1.8838028169014085, "no_speech_prob": 0.011222926899790764}, {"id": 97, "seek": 51312, "start": 537.76, "end": 542.12, "text": " there's a server also. But it's the first implementation in which it's simple to see", "tokens": [51596, 456, 311, 257, 7154, 611, 13, 583, 309, 311, 264, 700, 11420, 294, 597, 309, 311, 2199, 281, 536, 51814], "temperature": 0.0, "avg_logprob": -0.15721127502900317, "compression_ratio": 1.8838028169014085, "no_speech_prob": 0.011222926899790764}, {"id": 98, "seek": 54212, "start": 542.12, "end": 546.52, "text": " the things are moving around and doing this stuff. And also the map. This map that you", "tokens": [50364, 264, 721, 366, 2684, 926, 293, 884, 341, 1507, 13, 400, 611, 264, 4471, 13, 639, 4471, 300, 291, 50584], "temperature": 0.0, "avg_logprob": -0.17576652462199582, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.01781339757144451}, {"id": 99, "seek": 54212, "start": 546.52, "end": 550.64, "text": " see in the background is something that I built. It's not complex, but it's something", "tokens": [50584, 536, 294, 264, 3678, 307, 746, 300, 286, 3094, 13, 467, 311, 406, 3997, 11, 457, 309, 311, 746, 50790], "temperature": 0.0, "avg_logprob": -0.17576652462199582, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.01781339757144451}, {"id": 100, "seek": 54212, "start": 550.64, "end": 556.0, "text": " that then allows me to build what that's the real game that I built, which I called Maze", "tokens": [50790, 300, 550, 4045, 385, 281, 1322, 437, 300, 311, 264, 957, 1216, 300, 286, 3094, 11, 597, 286, 1219, 376, 13660, 51058], "temperature": 0.0, "avg_logprob": -0.17576652462199582, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.01781339757144451}, {"id": 101, "seek": 54212, "start": 556.0, "end": 563.0, "text": " Wars in this case. So now it looks a bit better. It's a screen show I took maybe a month ago,", "tokens": [51058, 9818, 294, 341, 1389, 13, 407, 586, 309, 1542, 257, 857, 1101, 13, 467, 311, 257, 2568, 855, 286, 1890, 1310, 257, 1618, 2057, 11, 51408], "temperature": 0.0, "avg_logprob": -0.17576652462199582, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.01781339757144451}, {"id": 102, "seek": 54212, "start": 563.52, "end": 569.88, "text": " so now it looks a bit better, but that's the basics. So what is this game about? Basically", "tokens": [51434, 370, 586, 309, 1542, 257, 857, 1101, 11, 457, 300, 311, 264, 14688, 13, 407, 437, 307, 341, 1216, 466, 30, 8537, 51752], "temperature": 0.0, "avg_logprob": -0.17576652462199582, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.01781339757144451}, {"id": 103, "seek": 56988, "start": 569.92, "end": 575.56, "text": " when you start the game, not when you start the app, you have to give it a name, and then", "tokens": [50366, 562, 291, 722, 264, 1216, 11, 406, 562, 291, 722, 264, 724, 11, 291, 362, 281, 976, 309, 257, 1315, 11, 293, 550, 50648], "temperature": 0.0, "avg_logprob": -0.19320902748713417, "compression_ratio": 1.8936170212765957, "no_speech_prob": 0.01459304615855217}, {"id": 104, "seek": 56988, "start": 575.56, "end": 581.16, "text": " you have to start the game, and then other people join, and it could be up to six people", "tokens": [50648, 291, 362, 281, 722, 264, 1216, 11, 293, 550, 661, 561, 3917, 11, 293, 309, 727, 312, 493, 281, 2309, 561, 50928], "temperature": 0.0, "avg_logprob": -0.19320902748713417, "compression_ratio": 1.8936170212765957, "no_speech_prob": 0.01459304615855217}, {"id": 105, "seek": 56988, "start": 581.16, "end": 585.4, "text": " or minimum of two. In this case, it's two people. So when we are two, you are assigned", "tokens": [50928, 420, 7285, 295, 732, 13, 682, 341, 1389, 11, 309, 311, 732, 561, 13, 407, 562, 321, 366, 732, 11, 291, 366, 13279, 51140], "temperature": 0.0, "avg_logprob": -0.19320902748713417, "compression_ratio": 1.8936170212765957, "no_speech_prob": 0.01459304615855217}, {"id": 106, "seek": 56988, "start": 585.4, "end": 592.4399999999999, "text": " one of these lines, up to six. So for example, in this case, I say I'm the one on the left.", "tokens": [51140, 472, 295, 613, 3876, 11, 493, 281, 2309, 13, 407, 337, 1365, 11, 294, 341, 1389, 11, 286, 584, 286, 478, 264, 472, 322, 264, 1411, 13, 51492], "temperature": 0.0, "avg_logprob": -0.19320902748713417, "compression_ratio": 1.8936170212765957, "no_speech_prob": 0.01459304615855217}, {"id": 107, "seek": 56988, "start": 592.4399999999999, "end": 596.64, "text": " The end goal of the game is to steal all the other people's life. Everyone has at least", "tokens": [51492, 440, 917, 3387, 295, 264, 1216, 307, 281, 11009, 439, 264, 661, 561, 311, 993, 13, 5198, 575, 412, 1935, 51702], "temperature": 0.0, "avg_logprob": -0.19320902748713417, "compression_ratio": 1.8936170212765957, "no_speech_prob": 0.01459304615855217}, {"id": 108, "seek": 59664, "start": 596.68, "end": 601.68, "text": " 20 lives. When they start, everyone has 20 lives, and the way I steal those lives is", "tokens": [50366, 945, 2909, 13, 1133, 436, 722, 11, 1518, 575, 945, 2909, 11, 293, 264, 636, 286, 11009, 729, 2909, 307, 50616], "temperature": 0.0, "avg_logprob": -0.17977385590041894, "compression_ratio": 1.8298611111111112, "no_speech_prob": 0.03724701702594757}, {"id": 109, "seek": 59664, "start": 601.68, "end": 606.24, "text": " by sending units. Sending units in the bottom right, you see that there's a screen which", "tokens": [50616, 538, 7750, 6815, 13, 318, 2029, 6815, 294, 264, 2767, 558, 11, 291, 536, 300, 456, 311, 257, 2568, 597, 50844], "temperature": 0.0, "avg_logprob": -0.17977385590041894, "compression_ratio": 1.8298611111111112, "no_speech_prob": 0.03724701702594757}, {"id": 110, "seek": 59664, "start": 606.24, "end": 611.28, "text": " some faces, those are the units. When you click those, the units spawn on the top, gray area,", "tokens": [50844, 512, 8475, 11, 729, 366, 264, 6815, 13, 1133, 291, 2052, 729, 11, 264, 6815, 17088, 322, 264, 1192, 11, 10855, 1859, 11, 51096], "temperature": 0.0, "avg_logprob": -0.17977385590041894, "compression_ratio": 1.8298611111111112, "no_speech_prob": 0.03724701702594757}, {"id": 111, "seek": 59664, "start": 611.28, "end": 616.36, "text": " and they have to pass down until they reach another gray area, which they move to the", "tokens": [51096, 293, 436, 362, 281, 1320, 760, 1826, 436, 2524, 1071, 10855, 1859, 11, 597, 436, 1286, 281, 264, 51350], "temperature": 0.0, "avg_logprob": -0.17977385590041894, "compression_ratio": 1.8298611111111112, "no_speech_prob": 0.03724701702594757}, {"id": 112, "seek": 59664, "start": 616.36, "end": 621.92, "text": " next line if there's any, or die. And also when they reach the end, they steal a life", "tokens": [51350, 958, 1622, 498, 456, 311, 604, 11, 420, 978, 13, 400, 611, 562, 436, 2524, 264, 917, 11, 436, 11009, 257, 993, 51628], "temperature": 0.0, "avg_logprob": -0.17977385590041894, "compression_ratio": 1.8298611111111112, "no_speech_prob": 0.03724701702594757}, {"id": 113, "seek": 59664, "start": 621.92, "end": 625.76, "text": " from the other player and they give it to you. That's as simple as that. How to prevent", "tokens": [51628, 490, 264, 661, 4256, 293, 436, 976, 309, 281, 291, 13, 663, 311, 382, 2199, 382, 300, 13, 1012, 281, 4871, 51820], "temperature": 0.0, "avg_logprob": -0.17977385590041894, "compression_ratio": 1.8298611111111112, "no_speech_prob": 0.03724701702594757}, {"id": 114, "seek": 62576, "start": 625.8, "end": 631.6, "text": " that? You have to place towers. When you place the towers, the idea is to build the maze for", "tokens": [50366, 300, 30, 509, 362, 281, 1081, 25045, 13, 1133, 291, 1081, 264, 25045, 11, 264, 1558, 307, 281, 1322, 264, 33032, 337, 50656], "temperature": 0.0, "avg_logprob": -0.1849908499882139, "compression_ratio": 1.776470588235294, "no_speech_prob": 0.12939296662807465}, {"id": 115, "seek": 62576, "start": 631.6, "end": 636.6, "text": " the units to go through the maze while the towers are attacking the units. And that's", "tokens": [50656, 264, 6815, 281, 352, 807, 264, 33032, 1339, 264, 25045, 366, 15010, 264, 6815, 13, 400, 300, 311, 50906], "temperature": 0.0, "avg_logprob": -0.1849908499882139, "compression_ratio": 1.776470588235294, "no_speech_prob": 0.12939296662807465}, {"id": 116, "seek": 62576, "start": 636.6, "end": 641.72, "text": " all. That's where I did it, because it's really simple. If you nail it down and reduce it", "tokens": [50906, 439, 13, 663, 311, 689, 286, 630, 309, 11, 570, 309, 311, 534, 2199, 13, 759, 291, 10173, 309, 760, 293, 5407, 309, 51162], "temperature": 0.0, "avg_logprob": -0.1849908499882139, "compression_ratio": 1.776470588235294, "no_speech_prob": 0.12939296662807465}, {"id": 117, "seek": 62576, "start": 641.72, "end": 646.76, "text": " to the basics, it's something which is really simple. If it were a shooter game or something", "tokens": [51162, 281, 264, 14688, 11, 309, 311, 746, 597, 307, 534, 2199, 13, 759, 309, 645, 257, 24680, 1216, 420, 746, 51414], "temperature": 0.0, "avg_logprob": -0.1849908499882139, "compression_ratio": 1.776470588235294, "no_speech_prob": 0.12939296662807465}, {"id": 118, "seek": 62576, "start": 646.76, "end": 652.16, "text": " like that, I would not even start it because that's another stuff. But this is really easy.", "tokens": [51414, 411, 300, 11, 286, 576, 406, 754, 722, 309, 570, 300, 311, 1071, 1507, 13, 583, 341, 307, 534, 1858, 13, 51684], "temperature": 0.0, "avg_logprob": -0.1849908499882139, "compression_ratio": 1.776470588235294, "no_speech_prob": 0.12939296662807465}, {"id": 119, "seek": 65216, "start": 652.24, "end": 657.7199999999999, "text": " So I said, okay, let's build it. And also this is basically if you ever played any kind of tower", "tokens": [50368, 407, 286, 848, 11, 1392, 11, 718, 311, 1322, 309, 13, 400, 611, 341, 307, 1936, 498, 291, 1562, 3737, 604, 733, 295, 10567, 50642], "temperature": 0.0, "avg_logprob": -0.2297178657309523, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.01516900397837162}, {"id": 120, "seek": 65216, "start": 657.7199999999999, "end": 663.0, "text": " defense, which also came from Warcraft mods, this is basically a tower defense, but that you can", "tokens": [50642, 7654, 11, 597, 611, 1361, 490, 3630, 5611, 30899, 11, 341, 307, 1936, 257, 10567, 7654, 11, 457, 300, 291, 393, 50906], "temperature": 0.0, "avg_logprob": -0.2297178657309523, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.01516900397837162}, {"id": 121, "seek": 65216, "start": 663.0, "end": 669.3199999999999, "text": " build a path instead of having a predefined path that you have to place towers on. So my list of", "tokens": [50906, 1322, 257, 3100, 2602, 295, 1419, 257, 659, 37716, 3100, 300, 291, 362, 281, 1081, 25045, 322, 13, 407, 452, 1329, 295, 51222], "temperature": 0.0, "avg_logprob": -0.2297178657309523, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.01516900397837162}, {"id": 122, "seek": 65216, "start": 669.3199999999999, "end": 675.52, "text": " things, at least at that time, that I said, okay, I need this in order to do the game. I needed", "tokens": [51222, 721, 11, 412, 1935, 412, 300, 565, 11, 300, 286, 848, 11, 1392, 11, 286, 643, 341, 294, 1668, 281, 360, 264, 1216, 13, 286, 2978, 51532], "temperature": 0.0, "avg_logprob": -0.2297178657309523, "compression_ratio": 1.746606334841629, "no_speech_prob": 0.01516900397837162}, {"id": 123, "seek": 67552, "start": 675.64, "end": 683.52, "text": " some assets because I need towers, I need the terrain, I need the units and so on. I need to do the", "tokens": [50370, 512, 9769, 570, 286, 643, 25045, 11, 286, 643, 264, 17674, 11, 286, 643, 264, 6815, 293, 370, 322, 13, 286, 643, 281, 360, 264, 50764], "temperature": 0.0, "avg_logprob": -0.1984882725095286, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.026503469794988632}, {"id": 124, "seek": 67552, "start": 683.52, "end": 689.92, "text": " map. So how is the map of the game? That's the thing that you saw before. Also, I need to be able,", "tokens": [50764, 4471, 13, 407, 577, 307, 264, 4471, 295, 264, 1216, 30, 663, 311, 264, 551, 300, 291, 1866, 949, 13, 2743, 11, 286, 643, 281, 312, 1075, 11, 51084], "temperature": 0.0, "avg_logprob": -0.1984882725095286, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.026503469794988632}, {"id": 125, "seek": 67552, "start": 689.92, "end": 694.8, "text": " well, the code architecture, so how I'm going to architecture the code in order to not have a", "tokens": [51084, 731, 11, 264, 3089, 9482, 11, 370, 577, 286, 478, 516, 281, 9482, 264, 3089, 294, 1668, 281, 406, 362, 257, 51328], "temperature": 0.0, "avg_logprob": -0.1984882725095286, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.026503469794988632}, {"id": 126, "seek": 67552, "start": 694.8, "end": 699.6, "text": " mess later on. So how are things going to be organized and how everything is going to communicate", "tokens": [51328, 2082, 1780, 322, 13, 407, 577, 366, 721, 516, 281, 312, 9983, 293, 577, 1203, 307, 516, 281, 7890, 51568], "temperature": 0.0, "avg_logprob": -0.1984882725095286, "compression_ratio": 1.7972350230414746, "no_speech_prob": 0.026503469794988632}, {"id": 127, "seek": 69960, "start": 699.6800000000001, "end": 705.84, "text": " between each other? That's one of the interesting parts for me. Summoning units, so clicking the unit", "tokens": [50368, 1296, 1184, 661, 30, 663, 311, 472, 295, 264, 1880, 3166, 337, 385, 13, 8626, 3317, 278, 6815, 11, 370, 9697, 264, 4985, 50676], "temperature": 0.0, "avg_logprob": -0.2530061584158042, "compression_ratio": 1.6893617021276597, "no_speech_prob": 0.03270994871854782}, {"id": 128, "seek": 69960, "start": 705.84, "end": 713.0, "text": " and summoning on the other side and then passing down, placing towers, described this, and gold", "tokens": [50676, 293, 18714, 278, 322, 264, 661, 1252, 293, 550, 8437, 760, 11, 17221, 25045, 11, 7619, 341, 11, 293, 3821, 51034], "temperature": 0.0, "avg_logprob": -0.2530061584158042, "compression_ratio": 1.6893617021276597, "no_speech_prob": 0.03270994871854782}, {"id": 129, "seek": 69960, "start": 713.0, "end": 718.88, "text": " income and lives, that's also easy, and multiplayer servers and the EXUI. So those are the list and", "tokens": [51034, 5742, 293, 2909, 11, 300, 311, 611, 1858, 11, 293, 27325, 15909, 293, 264, 16385, 46324, 13, 407, 729, 366, 264, 1329, 293, 51328], "temperature": 0.0, "avg_logprob": -0.2530061584158042, "compression_ratio": 1.6893617021276597, "no_speech_prob": 0.03270994871854782}, {"id": 130, "seek": 69960, "start": 718.88, "end": 724.2, "text": " we are going to go through that and potentially the struggles that I had while that. So the assets.", "tokens": [51328, 321, 366, 516, 281, 352, 807, 300, 293, 7263, 264, 17592, 300, 286, 632, 1339, 300, 13, 407, 264, 9769, 13, 51594], "temperature": 0.0, "avg_logprob": -0.2530061584158042, "compression_ratio": 1.6893617021276597, "no_speech_prob": 0.03270994871854782}, {"id": 131, "seek": 72420, "start": 724.9200000000001, "end": 731.5600000000001, "text": " For the assets, I was searching for something free at the time that was giving me the minimum", "tokens": [50400, 1171, 264, 9769, 11, 286, 390, 10808, 337, 746, 1737, 412, 264, 565, 300, 390, 2902, 385, 264, 7285, 50732], "temperature": 0.0, "avg_logprob": -0.23028583213931225, "compression_ratio": 1.7802197802197801, "no_speech_prob": 0.009031818248331547}, {"id": 132, "seek": 72420, "start": 732.36, "end": 737.8000000000001, "text": " kind of interesting assets that I needed. In this case, you need units. You can see that there are", "tokens": [50772, 733, 295, 1880, 9769, 300, 286, 2978, 13, 682, 341, 1389, 11, 291, 643, 6815, 13, 509, 393, 536, 300, 456, 366, 51044], "temperature": 0.0, "avg_logprob": -0.23028583213931225, "compression_ratio": 1.7802197802197801, "no_speech_prob": 0.009031818248331547}, {"id": 133, "seek": 72420, "start": 737.8000000000001, "end": 741.48, "text": " here some of the units that I saw before. On the top right, there's a cycle that is called which", "tokens": [51044, 510, 512, 295, 264, 6815, 300, 286, 1866, 949, 13, 1282, 264, 1192, 558, 11, 456, 311, 257, 6586, 300, 307, 1219, 597, 51228], "temperature": 0.0, "avg_logprob": -0.23028583213931225, "compression_ratio": 1.7802197802197801, "no_speech_prob": 0.009031818248331547}, {"id": 134, "seek": 72420, "start": 741.48, "end": 748.6800000000001, "text": " one I, so it had units, at least 10, it has, so it's fine. The hard part is to find towers because", "tokens": [51228, 472, 286, 11, 370, 309, 632, 6815, 11, 412, 1935, 1266, 11, 309, 575, 11, 370, 309, 311, 2489, 13, 440, 1152, 644, 307, 281, 915, 25045, 570, 51588], "temperature": 0.0, "avg_logprob": -0.23028583213931225, "compression_ratio": 1.7802197802197801, "no_speech_prob": 0.009031818248331547}, {"id": 135, "seek": 72420, "start": 748.6800000000001, "end": 752.6800000000001, "text": " normally on these free assets packs, towers are not something that you were going to find because", "tokens": [51588, 5646, 322, 613, 1737, 9769, 19403, 11, 25045, 366, 406, 746, 300, 291, 645, 516, 281, 915, 570, 51788], "temperature": 0.0, "avg_logprob": -0.23028583213931225, "compression_ratio": 1.7802197802197801, "no_speech_prob": 0.009031818248331547}, {"id": 136, "seek": 75268, "start": 752.68, "end": 759.0799999999999, "text": " it's really specific to this game. So what I used is what you can see on the bottom right, which is", "tokens": [50364, 309, 311, 534, 2685, 281, 341, 1216, 13, 407, 437, 286, 1143, 307, 437, 291, 393, 536, 322, 264, 2767, 558, 11, 597, 307, 50684], "temperature": 0.0, "avg_logprob": -0.1352992913661859, "compression_ratio": 1.78099173553719, "no_speech_prob": 0.004862383008003235}, {"id": 137, "seek": 75268, "start": 759.0799999999999, "end": 764.28, "text": " like a sculpture of a monk. So that's what I use as one of the towers and there's another sculpture", "tokens": [50684, 411, 257, 22972, 295, 257, 27698, 13, 407, 300, 311, 437, 286, 764, 382, 472, 295, 264, 25045, 293, 456, 311, 1071, 22972, 50944], "temperature": 0.0, "avg_logprob": -0.1352992913661859, "compression_ratio": 1.78099173553719, "no_speech_prob": 0.004862383008003235}, {"id": 138, "seek": 75268, "start": 764.28, "end": 769.16, "text": " as a warrior, which is the other tower that I use. The asset pack is much bigger than this. It's", "tokens": [50944, 382, 257, 20173, 11, 597, 307, 264, 661, 10567, 300, 286, 764, 13, 440, 11999, 2844, 307, 709, 3801, 813, 341, 13, 467, 311, 51188], "temperature": 0.0, "avg_logprob": -0.1352992913661859, "compression_ratio": 1.78099173553719, "no_speech_prob": 0.004862383008003235}, {"id": 139, "seek": 75268, "start": 769.16, "end": 773.2399999999999, "text": " really, really big. It's just an example that they give you as a few things that we have here.", "tokens": [51188, 534, 11, 534, 955, 13, 467, 311, 445, 364, 1365, 300, 436, 976, 291, 382, 257, 1326, 721, 300, 321, 362, 510, 13, 51392], "temperature": 0.0, "avg_logprob": -0.1352992913661859, "compression_ratio": 1.78099173553719, "no_speech_prob": 0.004862383008003235}, {"id": 140, "seek": 75268, "start": 774.12, "end": 775.56, "text": " I'm going to drink a bit more of water.", "tokens": [51436, 286, 478, 516, 281, 2822, 257, 857, 544, 295, 1281, 13, 51508], "temperature": 0.0, "avg_logprob": -0.1352992913661859, "compression_ratio": 1.78099173553719, "no_speech_prob": 0.004862383008003235}, {"id": 141, "seek": 77556, "start": 776.3599999999999, "end": 786.04, "text": " So yeah, then the map. How did I build the map? The map I use", "tokens": [50404, 407, 1338, 11, 550, 264, 4471, 13, 1012, 630, 286, 1322, 264, 4471, 30, 440, 4471, 286, 764, 50888], "temperature": 0.0, "avg_logprob": -0.19002093439516815, "compression_ratio": 1.7281553398058251, "no_speech_prob": 0.0033492445945739746}, {"id": 142, "seek": 77556, "start": 786.92, "end": 793.2399999999999, "text": " software which is called Tile, which is basically used for that, to build maps and to be something", "tokens": [50932, 4722, 597, 307, 1219, 314, 794, 11, 597, 307, 1936, 1143, 337, 300, 11, 281, 1322, 11317, 293, 281, 312, 746, 51248], "temperature": 0.0, "avg_logprob": -0.19002093439516815, "compression_ratio": 1.7281553398058251, "no_speech_prob": 0.0033492445945739746}, {"id": 143, "seek": 77556, "start": 793.2399999999999, "end": 797.3199999999999, "text": " for your game. Basically what you do is you import your assets on your bottom right. You see that", "tokens": [51248, 337, 428, 1216, 13, 8537, 437, 291, 360, 307, 291, 974, 428, 9769, 322, 428, 2767, 558, 13, 509, 536, 300, 51452], "temperature": 0.0, "avg_logprob": -0.19002093439516815, "compression_ratio": 1.7281553398058251, "no_speech_prob": 0.0033492445945739746}, {"id": 144, "seek": 77556, "start": 797.3199999999999, "end": 802.8399999999999, "text": " those are some of the, some of the map assets of the assets that I showed before and then you are", "tokens": [51452, 729, 366, 512, 295, 264, 11, 512, 295, 264, 4471, 9769, 295, 264, 9769, 300, 286, 4712, 949, 293, 550, 291, 366, 51728], "temperature": 0.0, "avg_logprob": -0.19002093439516815, "compression_ratio": 1.7281553398058251, "no_speech_prob": 0.0033492445945739746}, {"id": 145, "seek": 80284, "start": 802.84, "end": 808.44, "text": " basically using paints. Let's say this way. You click one of the assets and you can place it on one", "tokens": [50364, 1936, 1228, 28076, 13, 961, 311, 584, 341, 636, 13, 509, 2052, 472, 295, 264, 9769, 293, 291, 393, 1081, 309, 322, 472, 50644], "temperature": 0.0, "avg_logprob": -0.14944435732208028, "compression_ratio": 1.775, "no_speech_prob": 0.00299160648137331}, {"id": 146, "seek": 80284, "start": 808.44, "end": 814.0400000000001, "text": " of the grid. You see that that's a grid. You can place it. You can, and basically once you have one", "tokens": [50644, 295, 264, 10748, 13, 509, 536, 300, 300, 311, 257, 10748, 13, 509, 393, 1081, 309, 13, 509, 393, 11, 293, 1936, 1564, 291, 362, 472, 50924], "temperature": 0.0, "avg_logprob": -0.14944435732208028, "compression_ratio": 1.775, "no_speech_prob": 0.00299160648137331}, {"id": 147, "seek": 80284, "start": 814.0400000000001, "end": 819.0, "text": " line, in my case, I can just copy paste it down because those are all the same. So once I did one,", "tokens": [50924, 1622, 11, 294, 452, 1389, 11, 286, 393, 445, 5055, 9163, 309, 760, 570, 729, 366, 439, 264, 912, 13, 407, 1564, 286, 630, 472, 11, 51172], "temperature": 0.0, "avg_logprob": -0.14944435732208028, "compression_ratio": 1.775, "no_speech_prob": 0.00299160648137331}, {"id": 148, "seek": 80284, "start": 819.0, "end": 823.8000000000001, "text": " basically it was to build the map for more play-ups, just copying them. But that's the library that I", "tokens": [51172, 1936, 309, 390, 281, 1322, 264, 4471, 337, 544, 862, 12, 7528, 11, 445, 27976, 552, 13, 583, 300, 311, 264, 6405, 300, 286, 51412], "temperature": 0.0, "avg_logprob": -0.14944435732208028, "compression_ratio": 1.775, "no_speech_prob": 0.00299160648137331}, {"id": 149, "seek": 80284, "start": 823.8000000000001, "end": 829.0, "text": " use. Once I found it, I was like, okay, that's quite easy and it works really well. Then for the", "tokens": [51412, 764, 13, 3443, 286, 1352, 309, 11, 286, 390, 411, 11, 1392, 11, 300, 311, 1596, 1858, 293, 309, 1985, 534, 731, 13, 1396, 337, 264, 51672], "temperature": 0.0, "avg_logprob": -0.14944435732208028, "compression_ratio": 1.775, "no_speech_prob": 0.00299160648137331}, {"id": 150, "seek": 82900, "start": 829.08, "end": 836.84, "text": " code architecture, when I was building the game, when I started with Lua, the thing about hearing", "tokens": [50368, 3089, 9482, 11, 562, 286, 390, 2390, 264, 1216, 11, 562, 286, 1409, 365, 441, 4398, 11, 264, 551, 466, 4763, 50756], "temperature": 0.0, "avg_logprob": -0.20577910706237124, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.005576906260102987}, {"id": 151, "seek": 82900, "start": 836.84, "end": 841.8, "text": " for actions, sending actions to somewhere and that somewhere is storing those actions and then", "tokens": [50756, 337, 5909, 11, 7750, 5909, 281, 4079, 293, 300, 4079, 307, 26085, 729, 5909, 293, 550, 51004], "temperature": 0.0, "avg_logprob": -0.20577910706237124, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.005576906260102987}, {"id": 152, "seek": 82900, "start": 842.68, "end": 848.12, "text": " the draw is drawing what happened before. It was really, really ringing my bells on some things I", "tokens": [51048, 264, 2642, 307, 6316, 437, 2011, 949, 13, 467, 390, 534, 11, 534, 18423, 452, 25474, 322, 512, 721, 286, 51320], "temperature": 0.0, "avg_logprob": -0.20577910706237124, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.005576906260102987}, {"id": 153, "seek": 82900, "start": 848.12, "end": 856.44, "text": " did before. On the bus, when I was working with JavaScript, I was maybe good at that, but I was", "tokens": [51320, 630, 949, 13, 1282, 264, 1255, 11, 562, 286, 390, 1364, 365, 15778, 11, 286, 390, 1310, 665, 412, 300, 11, 457, 286, 390, 51736], "temperature": 0.0, "avg_logprob": -0.20577910706237124, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.005576906260102987}, {"id": 154, "seek": 85644, "start": 856.44, "end": 863.08, "text": " in the train type of React when it came out and React and Redux and all that. When that came out,", "tokens": [50364, 294, 264, 3847, 2010, 295, 30644, 562, 309, 1361, 484, 293, 30644, 293, 4477, 2449, 293, 439, 300, 13, 1133, 300, 1361, 484, 11, 50696], "temperature": 0.0, "avg_logprob": -0.2015878923477665, "compression_ratio": 1.7184115523465704, "no_speech_prob": 0.0026795289013534784}, {"id": 155, "seek": 85644, "start": 863.08, "end": 869.24, "text": " I was doing JavaScript, so I was really on tune with that. React before it was using Redux, and I", "tokens": [50696, 286, 390, 884, 15778, 11, 370, 286, 390, 534, 322, 10864, 365, 300, 13, 30644, 949, 309, 390, 1228, 4477, 2449, 11, 293, 286, 51004], "temperature": 0.0, "avg_logprob": -0.2015878923477665, "compression_ratio": 1.7184115523465704, "no_speech_prob": 0.0026795289013534784}, {"id": 156, "seek": 85644, "start": 869.24, "end": 874.36, "text": " don't know what it's using now, it used to use Flux, which is the library that Google and", "tokens": [51004, 500, 380, 458, 437, 309, 311, 1228, 586, 11, 309, 1143, 281, 764, 3235, 2449, 11, 597, 307, 264, 6405, 300, 3329, 293, 51260], "temperature": 0.0, "avg_logprob": -0.2015878923477665, "compression_ratio": 1.7184115523465704, "no_speech_prob": 0.0026795289013534784}, {"id": 157, "seek": 85644, "start": 874.36, "end": 880.6800000000001, "text": " more Facebook are implemented. How it works is basically this is an HTML point of view. The view", "tokens": [51260, 544, 4384, 366, 12270, 13, 1012, 309, 1985, 307, 1936, 341, 307, 364, 17995, 935, 295, 1910, 13, 440, 1910, 51576], "temperature": 0.0, "avg_logprob": -0.2015878923477665, "compression_ratio": 1.7184115523465704, "no_speech_prob": 0.0026795289013534784}, {"id": 158, "seek": 85644, "start": 880.6800000000001, "end": 885.8800000000001, "text": " is the normal HTML that you have. When the user clicks the view, an action is triggered. This", "tokens": [51576, 307, 264, 2710, 17995, 300, 291, 362, 13, 1133, 264, 4195, 18521, 264, 1910, 11, 364, 3069, 307, 21710, 13, 639, 51836], "temperature": 0.0, "avg_logprob": -0.2015878923477665, "compression_ratio": 1.7184115523465704, "no_speech_prob": 0.0026795289013534784}, {"id": 159, "seek": 88588, "start": 885.88, "end": 891.08, "text": " action is passed to a dispatcher, which is basically serializing all the actions in a specific order", "tokens": [50364, 3069, 307, 4678, 281, 257, 36729, 260, 11, 597, 307, 1936, 17436, 3319, 439, 264, 5909, 294, 257, 2685, 1668, 50624], "temperature": 0.0, "avg_logprob": -0.16449740658635678, "compression_ratio": 1.8564814814814814, "no_speech_prob": 0.002640076447278261}, {"id": 160, "seek": 88588, "start": 891.08, "end": 897.72, "text": " in the order they arrive. Then it's dispatching these actions to the stores. The stores are basically", "tokens": [50624, 294, 264, 1668, 436, 8881, 13, 1396, 309, 311, 4920, 29569, 613, 5909, 281, 264, 9512, 13, 440, 9512, 366, 1936, 50956], "temperature": 0.0, "avg_logprob": -0.16449740658635678, "compression_ratio": 1.8564814814814814, "no_speech_prob": 0.002640076447278261}, {"id": 161, "seek": 88588, "start": 899.72, "end": 904.84, "text": " data maps which listen for those actions. It's a big switch case for the actions that you want to", "tokens": [51056, 1412, 11317, 597, 2140, 337, 729, 5909, 13, 467, 311, 257, 955, 3679, 1389, 337, 264, 5909, 300, 291, 528, 281, 51312], "temperature": 0.0, "avg_logprob": -0.16449740658635678, "compression_ratio": 1.8564814814814814, "no_speech_prob": 0.002640076447278261}, {"id": 162, "seek": 88588, "start": 904.84, "end": 910.68, "text": " do actions on with the data that you supposedly have. Once you change your data with the action that", "tokens": [51312, 360, 5909, 322, 365, 264, 1412, 300, 291, 20581, 362, 13, 3443, 291, 1319, 428, 1412, 365, 264, 3069, 300, 51604], "temperature": 0.0, "avg_logprob": -0.16449740658635678, "compression_ratio": 1.8564814814814814, "no_speech_prob": 0.002640076447278261}, {"id": 163, "seek": 91068, "start": 910.68, "end": 917.2399999999999, "text": " happened, then you trigger an even like I changed. Then the view is hearing for those I change. Then", "tokens": [50364, 2011, 11, 550, 291, 7875, 364, 754, 411, 286, 3105, 13, 1396, 264, 1910, 307, 4763, 337, 729, 286, 1319, 13, 1396, 50692], "temperature": 0.0, "avg_logprob": -0.18797174453735352, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.005079351831227541}, {"id": 164, "seek": 91068, "start": 917.2399999999999, "end": 922.8399999999999, "text": " if it Redux, for example, I react, you change the specific part of the view that it belongs to", "tokens": [50692, 498, 309, 4477, 2449, 11, 337, 1365, 11, 286, 4515, 11, 291, 1319, 264, 2685, 644, 295, 264, 1910, 300, 309, 12953, 281, 50972], "temperature": 0.0, "avg_logprob": -0.18797174453735352, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.005079351831227541}, {"id": 165, "seek": 91068, "start": 922.8399999999999, "end": 929.4, "text": " a data.change. That's how this works. If you change the view and you add the client that I'm doing,", "tokens": [50972, 257, 1412, 13, 15431, 13, 663, 311, 577, 341, 1985, 13, 759, 291, 1319, 264, 1910, 293, 291, 909, 264, 6423, 300, 286, 478, 884, 11, 51300], "temperature": 0.0, "avg_logprob": -0.18797174453735352, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.005079351831227541}, {"id": 166, "seek": 91068, "start": 929.4, "end": 935.9599999999999, "text": " it's the same stuff. The only difference is that the store is not triggering I change,", "tokens": [51300, 309, 311, 264, 912, 1507, 13, 440, 787, 2649, 307, 300, 264, 3531, 307, 406, 40406, 286, 1319, 11, 51628], "temperature": 0.0, "avg_logprob": -0.18797174453735352, "compression_ratio": 1.7363636363636363, "no_speech_prob": 0.005079351831227541}, {"id": 167, "seek": 93596, "start": 935.96, "end": 941.24, "text": " though the library does. It's not triggering I change because the draw is already being called", "tokens": [50364, 1673, 264, 6405, 775, 13, 467, 311, 406, 40406, 286, 1319, 570, 264, 2642, 307, 1217, 885, 1219, 50628], "temperature": 0.0, "avg_logprob": -0.18721494113697726, "compression_ratio": 1.6380090497737556, "no_speech_prob": 0.007898448966443539}, {"id": 168, "seek": 93596, "start": 941.24, "end": 946.2800000000001, "text": " every time that the screen is being refreshed. There's no need for any view to hear from any", "tokens": [50628, 633, 565, 300, 264, 2568, 307, 885, 46330, 13, 821, 311, 572, 643, 337, 604, 1910, 281, 1568, 490, 604, 50880], "temperature": 0.0, "avg_logprob": -0.18721494113697726, "compression_ratio": 1.6380090497737556, "no_speech_prob": 0.007898448966443539}, {"id": 169, "seek": 93596, "start": 946.2800000000001, "end": 952.76, "text": " changes from the store. Basically, I look for the Flux library in Go. There were some", "tokens": [50880, 2962, 490, 264, 3531, 13, 8537, 11, 286, 574, 337, 264, 3235, 2449, 6405, 294, 1037, 13, 821, 645, 512, 51204], "temperature": 0.0, "avg_logprob": -0.18721494113697726, "compression_ratio": 1.6380090497737556, "no_speech_prob": 0.007898448966443539}, {"id": 170, "seek": 93596, "start": 952.76, "end": 960.36, "text": " implementations not fully implemented or not working as expected. I just ported the full", "tokens": [51204, 4445, 763, 406, 4498, 12270, 420, 406, 1364, 382, 5176, 13, 286, 445, 2436, 292, 264, 1577, 51584], "temperature": 0.0, "avg_logprob": -0.18721494113697726, "compression_ratio": 1.6380090497737556, "no_speech_prob": 0.007898448966443539}, {"id": 171, "seek": 96036, "start": 960.44, "end": 966.2, "text": " implementation of Flux that is on Google, I don't Facebook for it, and I ported it on Go. If any of", "tokens": [50368, 11420, 295, 3235, 2449, 300, 307, 322, 3329, 11, 286, 500, 380, 4384, 337, 309, 11, 293, 286, 2436, 292, 309, 322, 1037, 13, 759, 604, 295, 50656], "temperature": 0.0, "avg_logprob": -0.14701826341690555, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.022058414295315742}, {"id": 172, "seek": 96036, "start": 966.2, "end": 972.2, "text": " you want to do something like this, there's a library now that works for that. What that gave", "tokens": [50656, 291, 528, 281, 360, 746, 411, 341, 11, 456, 311, 257, 6405, 586, 300, 1985, 337, 300, 13, 708, 300, 2729, 50956], "temperature": 0.0, "avg_logprob": -0.14701826341690555, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.022058414295315742}, {"id": 173, "seek": 96036, "start": 972.2, "end": 977.88, "text": " me also is a state update, which means that when something changed, I also need to notify the server", "tokens": [50956, 385, 611, 307, 257, 1785, 5623, 11, 597, 1355, 300, 562, 746, 3105, 11, 286, 611, 643, 281, 36560, 264, 7154, 51240], "temperature": 0.0, "avg_logprob": -0.14701826341690555, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.022058414295315742}, {"id": 174, "seek": 96036, "start": 977.88, "end": 982.04, "text": " that something happened if it's needed for the server to know the data. For example, if I place a", "tokens": [51240, 300, 746, 2011, 498, 309, 311, 2978, 337, 264, 7154, 281, 458, 264, 1412, 13, 1171, 1365, 11, 498, 286, 1081, 257, 51448], "temperature": 0.0, "avg_logprob": -0.14701826341690555, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.022058414295315742}, {"id": 175, "seek": 96036, "start": 982.04, "end": 986.12, "text": " tower, then I can send this action to the server. The server has the same architecture, has a", "tokens": [51448, 10567, 11, 550, 286, 393, 2845, 341, 3069, 281, 264, 7154, 13, 440, 7154, 575, 264, 912, 9482, 11, 575, 257, 51652], "temperature": 0.0, "avg_logprob": -0.14701826341690555, "compression_ratio": 1.7482014388489209, "no_speech_prob": 0.022058414295315742}, {"id": 176, "seek": 98612, "start": 986.2, "end": 992.04, "text": " dispatcher, has the stores, and then the server can apply this information. In my case, that's why", "tokens": [50368, 36729, 260, 11, 575, 264, 9512, 11, 293, 550, 264, 7154, 393, 3079, 341, 1589, 13, 682, 452, 1389, 11, 300, 311, 983, 50660], "temperature": 0.0, "avg_logprob": -0.1652401939767306, "compression_ratio": 1.8467432950191571, "no_speech_prob": 0.012745856307446957}, {"id": 177, "seek": 98612, "start": 992.04, "end": 997.96, "text": " I decide every four times per second, the server is getting these stores, the state that it has,", "tokens": [50660, 286, 4536, 633, 1451, 1413, 680, 1150, 11, 264, 7154, 307, 1242, 613, 9512, 11, 264, 1785, 300, 309, 575, 11, 50956], "temperature": 0.0, "avg_logprob": -0.1652401939767306, "compression_ratio": 1.8467432950191571, "no_speech_prob": 0.012745856307446957}, {"id": 178, "seek": 98612, "start": 997.96, "end": 1002.44, "text": " it serializes the state in JSON, and then it sends this state to all the clients. The clients can", "tokens": [50956, 309, 17436, 5660, 264, 1785, 294, 31828, 11, 293, 550, 309, 14790, 341, 1785, 281, 439, 264, 6982, 13, 440, 6982, 393, 51180], "temperature": 0.0, "avg_logprob": -0.1652401939767306, "compression_ratio": 1.8467432950191571, "no_speech_prob": 0.012745856307446957}, {"id": 179, "seek": 98612, "start": 1002.44, "end": 1008.36, "text": " see that someone plays a tower because the state is changed. How this is sent with an action,", "tokens": [51180, 536, 300, 1580, 5749, 257, 10567, 570, 264, 1785, 307, 3105, 13, 1012, 341, 307, 2279, 365, 364, 3069, 11, 51476], "temperature": 0.0, "avg_logprob": -0.1652401939767306, "compression_ratio": 1.8467432950191571, "no_speech_prob": 0.012745856307446957}, {"id": 180, "seek": 98612, "start": 1008.36, "end": 1015.32, "text": " I'm using WebSocket. It sends an action via WebSocket to get the action on the client and just", "tokens": [51476, 286, 478, 1228, 9573, 50, 31380, 13, 467, 14790, 364, 3069, 5766, 9573, 50, 31380, 281, 483, 264, 3069, 322, 264, 6423, 293, 445, 51824], "temperature": 0.0, "avg_logprob": -0.1652401939767306, "compression_ratio": 1.8467432950191571, "no_speech_prob": 0.012745856307446957}, {"id": 181, "seek": 101532, "start": 1015.32, "end": 1019.1600000000001, "text": " creates an action and push it to the dispatcher, and then everything works as expected.", "tokens": [50364, 7829, 364, 3069, 293, 2944, 309, 281, 264, 36729, 260, 11, 293, 550, 1203, 1985, 382, 5176, 13, 50556], "temperature": 0.0, "avg_logprob": -0.1316124210512735, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.006161256227642298}, {"id": 182, "seek": 101532, "start": 1021.32, "end": 1025.8, "text": " Yeah, that's architecture that I did. Also, one thing that is really cool that I'm not doing now,", "tokens": [50664, 865, 11, 300, 311, 9482, 300, 286, 630, 13, 2743, 11, 472, 551, 300, 307, 534, 1627, 300, 286, 478, 406, 884, 586, 11, 50888], "temperature": 0.0, "avg_logprob": -0.1316124210512735, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.006161256227642298}, {"id": 183, "seek": 101532, "start": 1025.8, "end": 1031.3200000000002, "text": " but that could be potentially useful is replayability. If you play a game, some games you", "tokens": [50888, 457, 300, 727, 312, 7263, 4420, 307, 23836, 2310, 13, 759, 291, 862, 257, 1216, 11, 512, 2813, 291, 51164], "temperature": 0.0, "avg_logprob": -0.1316124210512735, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.006161256227642298}, {"id": 184, "seek": 101532, "start": 1031.3200000000002, "end": 1036.28, "text": " can, you have the ability that after you play the game, you can see, okay, what did I do wrong,", "tokens": [51164, 393, 11, 291, 362, 264, 3485, 300, 934, 291, 862, 264, 1216, 11, 291, 393, 536, 11, 1392, 11, 437, 630, 286, 360, 2085, 11, 51412], "temperature": 0.0, "avg_logprob": -0.1316124210512735, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.006161256227642298}, {"id": 185, "seek": 101532, "start": 1036.28, "end": 1041.16, "text": " and you can just replay the game. I don't know how this is done, but the only way that I have in", "tokens": [51412, 293, 291, 393, 445, 23836, 264, 1216, 13, 286, 500, 380, 458, 577, 341, 307, 1096, 11, 457, 264, 787, 636, 300, 286, 362, 294, 51656], "temperature": 0.0, "avg_logprob": -0.1316124210512735, "compression_ratio": 1.779467680608365, "no_speech_prob": 0.006161256227642298}, {"id": 186, "seek": 104116, "start": 1041.16, "end": 1046.52, "text": " mind of working is something like this, because if I have the actions, I can just replay the actions", "tokens": [50364, 1575, 295, 1364, 307, 746, 411, 341, 11, 570, 498, 286, 362, 264, 5909, 11, 286, 393, 445, 23836, 264, 5909, 50632], "temperature": 0.0, "avg_logprob": -0.14106973266601563, "compression_ratio": 1.8804780876494025, "no_speech_prob": 0.008089769631624222}, {"id": 187, "seek": 104116, "start": 1046.52, "end": 1051.64, "text": " in the order that happened, and I have replayability, and that's it. So as long as I'm", "tokens": [50632, 294, 264, 1668, 300, 2011, 11, 293, 286, 362, 23836, 2310, 11, 293, 300, 311, 309, 13, 407, 382, 938, 382, 286, 478, 50888], "temperature": 0.0, "avg_logprob": -0.14106973266601563, "compression_ratio": 1.8804780876494025, "no_speech_prob": 0.008089769631624222}, {"id": 188, "seek": 104116, "start": 1051.64, "end": 1057.0800000000002, "text": " replaying on the same moment that happened, I can replay anything at any point of time. So, yeah,", "tokens": [50888, 23836, 278, 322, 264, 912, 1623, 300, 2011, 11, 286, 393, 23836, 1340, 412, 604, 935, 295, 565, 13, 407, 11, 1338, 11, 51160], "temperature": 0.0, "avg_logprob": -0.14106973266601563, "compression_ratio": 1.8804780876494025, "no_speech_prob": 0.008089769631624222}, {"id": 189, "seek": 104116, "start": 1057.0800000000002, "end": 1061.48, "text": " if at some point I want to implement that, I just have it kind of for free. I just have to store", "tokens": [51160, 498, 412, 512, 935, 286, 528, 281, 4445, 300, 11, 286, 445, 362, 309, 733, 295, 337, 1737, 13, 286, 445, 362, 281, 3531, 51380], "temperature": 0.0, "avg_logprob": -0.14106973266601563, "compression_ratio": 1.8804780876494025, "no_speech_prob": 0.008089769631624222}, {"id": 190, "seek": 104116, "start": 1061.48, "end": 1070.3600000000001, "text": " the actions on, that's it. Now, the other interesting part, summoning units. So the first", "tokens": [51380, 264, 5909, 322, 11, 300, 311, 309, 13, 823, 11, 264, 661, 1880, 644, 11, 18714, 278, 6815, 13, 407, 264, 700, 51824], "temperature": 0.0, "avg_logprob": -0.14106973266601563, "compression_ratio": 1.8804780876494025, "no_speech_prob": 0.008089769631624222}, {"id": 191, "seek": 107036, "start": 1070.36, "end": 1076.6799999999998, "text": " implementation was the easiest one, so just Y++, just go down, straight down, ignore everything", "tokens": [50364, 11420, 390, 264, 12889, 472, 11, 370, 445, 398, 25472, 11, 445, 352, 760, 11, 2997, 760, 11, 11200, 1203, 50680], "temperature": 0.0, "avg_logprob": -0.12882014571643266, "compression_ratio": 1.8081180811808117, "no_speech_prob": 0.010136074386537075}, {"id": 192, "seek": 107036, "start": 1076.6799999999998, "end": 1080.6, "text": " until you reach the bottom, which is when you die, and then you steal the life, and you give it to", "tokens": [50680, 1826, 291, 2524, 264, 2767, 11, 597, 307, 562, 291, 978, 11, 293, 550, 291, 11009, 264, 993, 11, 293, 291, 976, 309, 281, 50876], "temperature": 0.0, "avg_logprob": -0.12882014571643266, "compression_ratio": 1.8081180811808117, "no_speech_prob": 0.010136074386537075}, {"id": 193, "seek": 107036, "start": 1080.6, "end": 1086.1999999999998, "text": " the player. That's fine. I did this implementation just to see that everything was working. You click,", "tokens": [50876, 264, 4256, 13, 663, 311, 2489, 13, 286, 630, 341, 11420, 445, 281, 536, 300, 1203, 390, 1364, 13, 509, 2052, 11, 51156], "temperature": 0.0, "avg_logprob": -0.12882014571643266, "compression_ratio": 1.8081180811808117, "no_speech_prob": 0.010136074386537075}, {"id": 194, "seek": 107036, "start": 1086.1999999999998, "end": 1091.6399999999999, "text": " you summon, and it goes on. Fine. Now, the next implementation was when I was already placing", "tokens": [51156, 291, 18714, 11, 293, 309, 1709, 322, 13, 12024, 13, 823, 11, 264, 958, 11420, 390, 562, 286, 390, 1217, 17221, 51428], "temperature": 0.0, "avg_logprob": -0.12882014571643266, "compression_ratio": 1.8081180811808117, "no_speech_prob": 0.010136074386537075}, {"id": 195, "seek": 107036, "start": 1091.6399999999999, "end": 1097.08, "text": " towers. So when I had tower placing, if I summon a unit, it just went straight through the towers,", "tokens": [51428, 25045, 13, 407, 562, 286, 632, 10567, 17221, 11, 498, 286, 18714, 257, 4985, 11, 309, 445, 1437, 2997, 807, 264, 25045, 11, 51700], "temperature": 0.0, "avg_logprob": -0.12882014571643266, "compression_ratio": 1.8081180811808117, "no_speech_prob": 0.010136074386537075}, {"id": 196, "seek": 109708, "start": 1097.08, "end": 1102.84, "text": " because it didn't know that those should be avoided. So then I implemented Drieska, just because for", "tokens": [50364, 570, 309, 994, 380, 458, 300, 729, 820, 312, 24890, 13, 407, 550, 286, 12270, 413, 2244, 2330, 11, 445, 570, 337, 50652], "temperature": 0.0, "avg_logprob": -0.1615772816672254, "compression_ratio": 1.6539792387543253, "no_speech_prob": 0.007106285076588392}, {"id": 197, "seek": 109708, "start": 1102.84, "end": 1107.48, "text": " me, like, I have to find the shortest path between point A and point B. I'm going to do that. Well,", "tokens": [50652, 385, 11, 411, 11, 286, 362, 281, 915, 264, 31875, 3100, 1296, 935, 316, 293, 935, 363, 13, 286, 478, 516, 281, 360, 300, 13, 1042, 11, 50884], "temperature": 0.0, "avg_logprob": -0.1615772816672254, "compression_ratio": 1.6539792387543253, "no_speech_prob": 0.007106285076588392}, {"id": 198, "seek": 109708, "start": 1108.28, "end": 1114.6, "text": " I didn't know at the time, but Drieska is not the fastest. If it's a big graph, it takes three", "tokens": [50924, 286, 994, 380, 458, 412, 264, 565, 11, 457, 413, 2244, 2330, 307, 406, 264, 14573, 13, 759, 309, 311, 257, 955, 4295, 11, 309, 2516, 1045, 51240], "temperature": 0.0, "avg_logprob": -0.1615772816672254, "compression_ratio": 1.6539792387543253, "no_speech_prob": 0.007106285076588392}, {"id": 199, "seek": 109708, "start": 1114.6, "end": 1119.6399999999999, "text": " seconds to calculate the path of all the graphs using Drieska. So if we go to the beginning,", "tokens": [51240, 3949, 281, 8873, 264, 3100, 295, 439, 264, 24877, 1228, 413, 2244, 2330, 13, 407, 498, 321, 352, 281, 264, 2863, 11, 51492], "temperature": 0.0, "avg_logprob": -0.1615772816672254, "compression_ratio": 1.6539792387543253, "no_speech_prob": 0.007106285076588392}, {"id": 200, "seek": 109708, "start": 1120.28, "end": 1126.84, "text": " you can see the cursor moving. Now I click, now it appears. So it's really slow. And it's", "tokens": [51524, 291, 393, 536, 264, 28169, 2684, 13, 823, 286, 2052, 11, 586, 309, 7038, 13, 407, 309, 311, 534, 2964, 13, 400, 309, 311, 51852], "temperature": 0.0, "avg_logprob": -0.1615772816672254, "compression_ratio": 1.6539792387543253, "no_speech_prob": 0.007106285076588392}, {"id": 201, "seek": 112684, "start": 1126.9199999999998, "end": 1130.84, "text": " something that basically you cannot play with it. It would be impossible, because also it's blocking", "tokens": [50368, 746, 300, 1936, 291, 2644, 862, 365, 309, 13, 467, 576, 312, 6243, 11, 570, 611, 309, 311, 17776, 50564], "temperature": 0.0, "avg_logprob": -0.13670373932132876, "compression_ratio": 1.7347670250896057, "no_speech_prob": 0.005070457700639963}, {"id": 202, "seek": 112684, "start": 1130.84, "end": 1136.52, "text": " the main thread, because it's doing that. So I was chatting with a friend of mine and said,", "tokens": [50564, 264, 2135, 7207, 11, 570, 309, 311, 884, 300, 13, 407, 286, 390, 24654, 365, 257, 1277, 295, 3892, 293, 848, 11, 50848], "temperature": 0.0, "avg_logprob": -0.13670373932132876, "compression_ratio": 1.7347670250896057, "no_speech_prob": 0.005070457700639963}, {"id": 203, "seek": 112684, "start": 1136.52, "end": 1141.1599999999999, "text": " okay, this is happening. Do you know something? And he said, yeah, you can try Aster. I don't know", "tokens": [50848, 1392, 11, 341, 307, 2737, 13, 1144, 291, 458, 746, 30, 400, 415, 848, 11, 1338, 11, 291, 393, 853, 316, 3120, 13, 286, 500, 380, 458, 51080], "temperature": 0.0, "avg_logprob": -0.13670373932132876, "compression_ratio": 1.7347670250896057, "no_speech_prob": 0.005070457700639963}, {"id": 204, "seek": 112684, "start": 1141.1599999999999, "end": 1146.1999999999998, "text": " if you test it, but Aster is basically a passing algorithm that is an improvement over Drieska", "tokens": [51080, 498, 291, 1500, 309, 11, 457, 316, 3120, 307, 1936, 257, 8437, 9284, 300, 307, 364, 10444, 670, 413, 2244, 2330, 51332], "temperature": 0.0, "avg_logprob": -0.13670373932132876, "compression_ratio": 1.7347670250896057, "no_speech_prob": 0.005070457700639963}, {"id": 205, "seek": 112684, "start": 1146.1999999999998, "end": 1151.8, "text": " and based for passing for games. Like, well, that looks like something that is for what I want to", "tokens": [51332, 293, 2361, 337, 8437, 337, 2813, 13, 1743, 11, 731, 11, 300, 1542, 411, 746, 300, 307, 337, 437, 286, 528, 281, 51612], "temperature": 0.0, "avg_logprob": -0.13670373932132876, "compression_ratio": 1.7347670250896057, "no_speech_prob": 0.005070457700639963}, {"id": 206, "seek": 115180, "start": 1152.76, "end": 1158.76, "text": " do. So maybe you can notice the difference, but yeah, it's a bit faster than Drieska. I'm", "tokens": [50412, 360, 13, 407, 1310, 291, 393, 3449, 264, 2649, 11, 457, 1338, 11, 309, 311, 257, 857, 4663, 813, 413, 2244, 2330, 13, 286, 478, 50712], "temperature": 0.0, "avg_logprob": -0.14370752481313853, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.011791612021625042}, {"id": 207, "seek": 115180, "start": 1158.76, "end": 1162.68, "text": " spamming, right? I'm just clicking, clicking, clicking. And you can see it's not going slow. It's", "tokens": [50712, 24028, 2810, 11, 558, 30, 286, 478, 445, 9697, 11, 9697, 11, 9697, 13, 400, 291, 393, 536, 309, 311, 406, 516, 2964, 13, 467, 311, 50908], "temperature": 0.0, "avg_logprob": -0.14370752481313853, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.011791612021625042}, {"id": 208, "seek": 115180, "start": 1162.68, "end": 1167.3999999999999, "text": " not blocking anything. And it's quite good. Ignore the fact that they are going below the", "tokens": [50908, 406, 17776, 1340, 13, 400, 309, 311, 1596, 665, 13, 24754, 418, 264, 1186, 300, 436, 366, 516, 2507, 264, 51144], "temperature": 0.0, "avg_logprob": -0.14370752481313853, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.011791612021625042}, {"id": 209, "seek": 115180, "start": 1167.3999999999999, "end": 1175.32, "text": " towers. Just follow the lines. Just ignore the assets at this time. So yeah, I did Drieska.", "tokens": [51144, 25045, 13, 1449, 1524, 264, 3876, 13, 1449, 11200, 264, 9769, 412, 341, 565, 13, 407, 1338, 11, 286, 630, 413, 2244, 2330, 13, 51540], "temperature": 0.0, "avg_logprob": -0.14370752481313853, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.011791612021625042}, {"id": 210, "seek": 115180, "start": 1175.32, "end": 1181.08, "text": " The only thing that it's noticeable, and I think that now that I changed a few things, it was a", "tokens": [51540, 440, 787, 551, 300, 309, 311, 26041, 11, 293, 286, 519, 300, 586, 300, 286, 3105, 257, 1326, 721, 11, 309, 390, 257, 51828], "temperature": 0.0, "avg_logprob": -0.14370752481313853, "compression_ratio": 1.7748091603053435, "no_speech_prob": 0.011791612021625042}, {"id": 211, "seek": 118108, "start": 1181.08, "end": 1187.8, "text": " mistake that I did. But basically, the ones that go on this side, you see it basically are doing", "tokens": [50364, 6146, 300, 286, 630, 13, 583, 1936, 11, 264, 2306, 300, 352, 322, 341, 1252, 11, 291, 536, 309, 1936, 366, 884, 50700], "temperature": 0.0, "avg_logprob": -0.16669381319821536, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.0045292070135474205}, {"id": 212, "seek": 118108, "start": 1187.8, "end": 1192.6799999999998, "text": " edge shapes, which is not good for this game because the towers have a range for attack. So", "tokens": [50700, 4691, 10854, 11, 597, 307, 406, 665, 337, 341, 1216, 570, 264, 25045, 362, 257, 3613, 337, 2690, 13, 407, 50944], "temperature": 0.0, "avg_logprob": -0.16669381319821536, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.0045292070135474205}, {"id": 213, "seek": 118108, "start": 1192.6799999999998, "end": 1195.96, "text": " they're basically going attack me, attack me, attack me, attack me, attack me, and they die.", "tokens": [50944, 436, 434, 1936, 516, 2690, 385, 11, 2690, 385, 11, 2690, 385, 11, 2690, 385, 11, 2690, 385, 11, 293, 436, 978, 13, 51108], "temperature": 0.0, "avg_logprob": -0.16669381319821536, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.0045292070135474205}, {"id": 214, "seek": 118108, "start": 1195.96, "end": 1200.12, "text": " The good thing would be just doing a diagonal. Let me bring my water.", "tokens": [51108, 440, 665, 551, 576, 312, 445, 884, 257, 21539, 13, 961, 385, 1565, 452, 1281, 13, 51316], "temperature": 0.0, "avg_logprob": -0.16669381319821536, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.0045292070135474205}, {"id": 215, "seek": 120012, "start": 1201.08, "end": 1205.08, "text": " Right.", "tokens": [50412, 1779, 13, 50612], "temperature": 0.0, "avg_logprob": -0.26937502692727483, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.011350834742188454}, {"id": 216, "seek": 120012, "start": 1206.04, "end": 1213.56, "text": " So for that, I just tweak a bit A star. Because A star, how it works is basically you have a", "tokens": [50660, 407, 337, 300, 11, 286, 445, 29879, 257, 857, 316, 3543, 13, 1436, 316, 3543, 11, 577, 309, 1985, 307, 1936, 291, 362, 257, 51036], "temperature": 0.0, "avg_logprob": -0.26937502692727483, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.011350834742188454}, {"id": 217, "seek": 120012, "start": 1213.56, "end": 1220.6799999999998, "text": " Drieska, the same one. But the only difference is that you have, how is it called? A priority queue.", "tokens": [51036, 413, 2244, 2330, 11, 264, 912, 472, 13, 583, 264, 787, 2649, 307, 300, 291, 362, 11, 577, 307, 309, 1219, 30, 316, 9365, 18639, 13, 51392], "temperature": 0.0, "avg_logprob": -0.26937502692727483, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.011350834742188454}, {"id": 218, "seek": 120012, "start": 1221.6399999999999, "end": 1226.28, "text": " It's time that you want to calculate the distance between, if you want to, it's time you want to", "tokens": [51440, 467, 311, 565, 300, 291, 528, 281, 8873, 264, 4560, 1296, 11, 498, 291, 528, 281, 11, 309, 311, 565, 291, 528, 281, 51672], "temperature": 0.0, "avg_logprob": -0.26937502692727483, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.011350834742188454}, {"id": 219, "seek": 122628, "start": 1226.36, "end": 1234.68, "text": " jump to a different node to calculate the graph on that, the path on that node. What you do is you", "tokens": [50368, 3012, 281, 257, 819, 9984, 281, 8873, 264, 4295, 322, 300, 11, 264, 3100, 322, 300, 9984, 13, 708, 291, 360, 307, 291, 50784], "temperature": 0.0, "avg_logprob": -0.15309806697624773, "compression_ratio": 1.9913793103448276, "no_speech_prob": 0.015059391967952251}, {"id": 220, "seek": 122628, "start": 1234.68, "end": 1239.0, "text": " say, okay, from this node to the end, which is the distance. And from that node to the end,", "tokens": [50784, 584, 11, 1392, 11, 490, 341, 9984, 281, 264, 917, 11, 597, 307, 264, 4560, 13, 400, 490, 300, 9984, 281, 264, 917, 11, 51000], "temperature": 0.0, "avg_logprob": -0.15309806697624773, "compression_ratio": 1.9913793103448276, "no_speech_prob": 0.015059391967952251}, {"id": 221, "seek": 122628, "start": 1239.0, "end": 1243.16, "text": " which is the distance. And then you got all the distance. You push this element to a queue", "tokens": [51000, 597, 307, 264, 4560, 13, 400, 550, 291, 658, 439, 264, 4560, 13, 509, 2944, 341, 4478, 281, 257, 18639, 51208], "temperature": 0.0, "avg_logprob": -0.15309806697624773, "compression_ratio": 1.9913793103448276, "no_speech_prob": 0.015059391967952251}, {"id": 222, "seek": 122628, "start": 1243.16, "end": 1247.32, "text": " with the node. And then you get an element from the queue, which is the one that eats more,", "tokens": [51208, 365, 264, 9984, 13, 400, 550, 291, 483, 364, 4478, 490, 264, 18639, 11, 597, 307, 264, 472, 300, 18109, 544, 11, 51416], "temperature": 0.0, "avg_logprob": -0.15309806697624773, "compression_ratio": 1.9913793103448276, "no_speech_prob": 0.015059391967952251}, {"id": 223, "seek": 122628, "start": 1248.44, "end": 1252.68, "text": " more closer to the destination. So basically, if it's just a straight line, it will just", "tokens": [51472, 544, 4966, 281, 264, 12236, 13, 407, 1936, 11, 498, 309, 311, 445, 257, 2997, 1622, 11, 309, 486, 445, 51684], "temperature": 0.0, "avg_logprob": -0.15309806697624773, "compression_ratio": 1.9913793103448276, "no_speech_prob": 0.015059391967952251}, {"id": 224, "seek": 125268, "start": 1252.68, "end": 1258.3600000000001, "text": " calculate go straight because it's always the fastest route to go straight. And that's how A", "tokens": [50364, 8873, 352, 2997, 570, 309, 311, 1009, 264, 14573, 7955, 281, 352, 2997, 13, 400, 300, 311, 577, 316, 50648], "temperature": 0.0, "avg_logprob": -0.18015218185166182, "compression_ratio": 1.88, "no_speech_prob": 0.008845644071698189}, {"id": 225, "seek": 125268, "start": 1258.3600000000001, "end": 1264.28, "text": " star works. What I change about A star, and that's basically my potential, and now it works better", "tokens": [50648, 3543, 1985, 13, 708, 286, 1319, 466, 316, 3543, 11, 293, 300, 311, 1936, 452, 3995, 11, 293, 586, 309, 1985, 1101, 50944], "temperature": 0.0, "avg_logprob": -0.18015218185166182, "compression_ratio": 1.88, "no_speech_prob": 0.008845644071698189}, {"id": 226, "seek": 125268, "start": 1264.28, "end": 1269.0, "text": " in this way. But what I change is that this algorithm to calculate how close it is, I use", "tokens": [50944, 294, 341, 636, 13, 583, 437, 286, 1319, 307, 300, 341, 9284, 281, 8873, 577, 1998, 309, 307, 11, 286, 764, 51180], "temperature": 0.0, "avg_logprob": -0.18015218185166182, "compression_ratio": 1.88, "no_speech_prob": 0.008845644071698189}, {"id": 227, "seek": 125268, "start": 1269.0, "end": 1274.92, "text": " Pythagoras because it's just to have xy and xy just make Pythagoras and go straight line the", "tokens": [51180, 9953, 392, 559, 40928, 570, 309, 311, 445, 281, 362, 2031, 88, 293, 2031, 88, 445, 652, 9953, 392, 559, 40928, 293, 352, 2997, 1622, 264, 51476], "temperature": 0.0, "avg_logprob": -0.18015218185166182, "compression_ratio": 1.88, "no_speech_prob": 0.008845644071698189}, {"id": 228, "seek": 125268, "start": 1274.92, "end": 1279.88, "text": " difference. But the ideal one that it has to use is Manhattan. Manhattan algorithm is basically", "tokens": [51476, 2649, 13, 583, 264, 7157, 472, 300, 309, 575, 281, 764, 307, 23633, 13, 23633, 9284, 307, 1936, 51724], "temperature": 0.0, "avg_logprob": -0.18015218185166182, "compression_ratio": 1.88, "no_speech_prob": 0.008845644071698189}, {"id": 229, "seek": 127988, "start": 1279.88, "end": 1283.24, "text": " how many jumps left and right, left and right, or pixel, pixel, pixel, pixel, pixel,", "tokens": [50364, 577, 867, 16704, 1411, 293, 558, 11, 1411, 293, 558, 11, 420, 19261, 11, 19261, 11, 19261, 11, 19261, 11, 19261, 11, 50532], "temperature": 0.0, "avg_logprob": -0.1451472274395598, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.005961236078292131}, {"id": 230, "seek": 127988, "start": 1283.24, "end": 1287.88, "text": " no diagonals is the distance between those. And with that, it works much better. But what I did", "tokens": [50532, 572, 17405, 1124, 307, 264, 4560, 1296, 729, 13, 400, 365, 300, 11, 309, 1985, 709, 1101, 13, 583, 437, 286, 630, 50764], "temperature": 0.0, "avg_logprob": -0.1451472274395598, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.005961236078292131}, {"id": 231, "seek": 127988, "start": 1287.88, "end": 1293.5600000000002, "text": " to change it is basically when I'm pushing elements to this sort of queue, this periodic queue,", "tokens": [50764, 281, 1319, 309, 307, 1936, 562, 286, 478, 7380, 4959, 281, 341, 1333, 295, 18639, 11, 341, 27790, 18639, 11, 51048], "temperature": 0.0, "avg_logprob": -0.1451472274395598, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.005961236078292131}, {"id": 232, "seek": 127988, "start": 1294.2800000000002, "end": 1300.6000000000001, "text": " what I'm changing is that if the node that I'm pushing isn't the same direction that I was,", "tokens": [51084, 437, 286, 478, 4473, 307, 300, 498, 264, 9984, 300, 286, 478, 7380, 1943, 380, 264, 912, 3513, 300, 286, 390, 11, 51400], "temperature": 0.0, "avg_logprob": -0.1451472274395598, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.005961236078292131}, {"id": 233, "seek": 127988, "start": 1300.6000000000001, "end": 1305.72, "text": " I just increase a little bit. So I just decrease the priority. So it's most unlikely that he", "tokens": [51400, 286, 445, 3488, 257, 707, 857, 13, 407, 286, 445, 11514, 264, 9365, 13, 407, 309, 311, 881, 17518, 300, 415, 51656], "temperature": 0.0, "avg_logprob": -0.1451472274395598, "compression_ratio": 1.7868217054263567, "no_speech_prob": 0.005961236078292131}, {"id": 234, "seek": 130572, "start": 1305.88, "end": 1311.24, "text": " will go straightforward or the same direction. And it's more likely that he will switch directions,", "tokens": [50372, 486, 352, 15325, 420, 264, 912, 3513, 13, 400, 309, 311, 544, 3700, 300, 415, 486, 3679, 11095, 11, 50640], "temperature": 0.0, "avg_logprob": -0.26971417088662425, "compression_ratio": 1.6866952789699572, "no_speech_prob": 0.001358266337774694}, {"id": 235, "seek": 130572, "start": 1311.24, "end": 1316.2, "text": " basically fiber thing to going on diagonals. And just doing that small change, everything when", "tokens": [50640, 1936, 12874, 551, 281, 516, 322, 17405, 1124, 13, 400, 445, 884, 300, 1359, 1319, 11, 1203, 562, 50888], "temperature": 0.0, "avg_logprob": -0.26971417088662425, "compression_ratio": 1.6866952789699572, "no_speech_prob": 0.001358266337774694}, {"id": 236, "seek": 130572, "start": 1316.2, "end": 1324.28, "text": " like perfectly on the diagonals or whatever. And yeah, that's what I should be for. Placing towers.", "tokens": [50888, 411, 6239, 322, 264, 17405, 1124, 420, 2035, 13, 400, 1338, 11, 300, 311, 437, 286, 820, 312, 337, 13, 2149, 5615, 25045, 13, 51292], "temperature": 0.0, "avg_logprob": -0.26971417088662425, "compression_ratio": 1.6866952789699572, "no_speech_prob": 0.001358266337774694}, {"id": 237, "seek": 130572, "start": 1324.28, "end": 1329.96, "text": " Placing towers has not much logic itself, just the fact that when it clicks and how to place it on", "tokens": [51292, 2149, 5615, 25045, 575, 406, 709, 9952, 2564, 11, 445, 264, 1186, 300, 562, 309, 18521, 293, 577, 281, 1081, 309, 322, 51576], "temperature": 0.0, "avg_logprob": -0.26971417088662425, "compression_ratio": 1.6866952789699572, "no_speech_prob": 0.001358266337774694}, {"id": 238, "seek": 132996, "start": 1330.04, "end": 1335.64, "text": " the line. The only thing that's noticeable is that the tower is not, you cannot place it", "tokens": [50368, 264, 1622, 13, 440, 787, 551, 300, 311, 26041, 307, 300, 264, 10567, 307, 406, 11, 291, 2644, 1081, 309, 50648], "temperature": 0.0, "avg_logprob": -0.18060348380325186, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.03757607191801071}, {"id": 239, "seek": 132996, "start": 1335.64, "end": 1341.08, "text": " anywhere on the line. You can't place it anywhere on the line. But it has like, you could see that", "tokens": [50648, 4992, 322, 264, 1622, 13, 509, 393, 380, 1081, 309, 4992, 322, 264, 1622, 13, 583, 309, 575, 411, 11, 291, 727, 536, 300, 50920], "temperature": 0.0, "avg_logprob": -0.18060348380325186, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.03757607191801071}, {"id": 240, "seek": 132996, "start": 1341.08, "end": 1348.92, "text": " it's basically jumping around. That is not straight. Why is that? Because when you're building the maze,", "tokens": [50920, 309, 311, 1936, 11233, 926, 13, 663, 307, 406, 2997, 13, 1545, 307, 300, 30, 1436, 562, 291, 434, 2390, 264, 33032, 11, 51312], "temperature": 0.0, "avg_logprob": -0.18060348380325186, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.03757607191801071}, {"id": 241, "seek": 132996, "start": 1348.92, "end": 1354.1200000000001, "text": " it's much better to have something straight because for you, it's easier to finish like the", "tokens": [51312, 309, 311, 709, 1101, 281, 362, 746, 2997, 570, 337, 291, 11, 309, 311, 3571, 281, 2413, 411, 264, 51572], "temperature": 0.0, "avg_logprob": -0.18060348380325186, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.03757607191801071}, {"id": 242, "seek": 132996, "start": 1354.1200000000001, "end": 1358.68, "text": " build that you're doing than if something is one pixel below and someone is one pixel above,", "tokens": [51572, 1322, 300, 291, 434, 884, 813, 498, 746, 307, 472, 19261, 2507, 293, 1580, 307, 472, 19261, 3673, 11, 51800], "temperature": 0.0, "avg_logprob": -0.18060348380325186, "compression_ratio": 1.8705882352941177, "no_speech_prob": 0.03757607191801071}, {"id": 243, "seek": 135868, "start": 1358.68, "end": 1362.68, "text": " because then most likely you will find that you are blocking the units, which is something that", "tokens": [50364, 570, 550, 881, 3700, 291, 486, 915, 300, 291, 366, 17776, 264, 6815, 11, 597, 307, 746, 300, 50564], "temperature": 0.0, "avg_logprob": -0.1799184799194336, "compression_ratio": 1.9018181818181819, "no_speech_prob": 0.002219584072008729}, {"id": 244, "seek": 135868, "start": 1362.68, "end": 1366.3600000000001, "text": " you cannot do. You cannot block the unit. You cannot just build perpendicular lines and say,", "tokens": [50564, 291, 2644, 360, 13, 509, 2644, 3461, 264, 4985, 13, 509, 2644, 445, 1322, 26734, 3876, 293, 584, 11, 50748], "temperature": 0.0, "avg_logprob": -0.1799184799194336, "compression_ratio": 1.9018181818181819, "no_speech_prob": 0.002219584072008729}, {"id": 245, "seek": 135868, "start": 1366.3600000000001, "end": 1369.8, "text": " that's it. I finished. That's not possible. You cannot block the path of the units.", "tokens": [50748, 300, 311, 309, 13, 286, 4335, 13, 663, 311, 406, 1944, 13, 509, 2644, 3461, 264, 3100, 295, 264, 6815, 13, 50920], "temperature": 0.0, "avg_logprob": -0.1799184799194336, "compression_ratio": 1.9018181818181819, "no_speech_prob": 0.002219584072008729}, {"id": 246, "seek": 135868, "start": 1370.3600000000001, "end": 1374.1200000000001, "text": " So that's another topic. How to detect that the path is blocked.", "tokens": [50948, 407, 300, 311, 1071, 4829, 13, 1012, 281, 5531, 300, 264, 3100, 307, 15470, 13, 51136], "temperature": 0.0, "avg_logprob": -0.1799184799194336, "compression_ratio": 1.9018181818181819, "no_speech_prob": 0.002219584072008729}, {"id": 247, "seek": 135868, "start": 1377.16, "end": 1381.96, "text": " And how to get the path is blocked. Basically what I do is when you try to place a tower and you", "tokens": [51288, 400, 577, 281, 483, 264, 3100, 307, 15470, 13, 8537, 437, 286, 360, 307, 562, 291, 853, 281, 1081, 257, 10567, 293, 291, 51528], "temperature": 0.0, "avg_logprob": -0.1799184799194336, "compression_ratio": 1.9018181818181819, "no_speech_prob": 0.002219584072008729}, {"id": 248, "seek": 135868, "start": 1381.96, "end": 1387.64, "text": " do the action of placing towers, I just try to create a new unit that will go through as", "tokens": [51528, 360, 264, 3069, 295, 17221, 25045, 11, 286, 445, 853, 281, 1884, 257, 777, 4985, 300, 486, 352, 807, 382, 51812], "temperature": 0.0, "avg_logprob": -0.1799184799194336, "compression_ratio": 1.9018181818181819, "no_speech_prob": 0.002219584072008729}, {"id": 249, "seek": 138764, "start": 1388.3600000000001, "end": 1393.72, "text": " theoretical line with that tower in it. If I don't get any path, then it's wrong. You cannot place", "tokens": [50400, 20864, 1622, 365, 300, 10567, 294, 309, 13, 759, 286, 500, 380, 483, 604, 3100, 11, 550, 309, 311, 2085, 13, 509, 2644, 1081, 50668], "temperature": 0.0, "avg_logprob": -0.09463209490622243, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0022565496619790792}, {"id": 250, "seek": 138764, "start": 1393.72, "end": 1400.0400000000002, "text": " a tower. And if I do get a path, then yes, you can place a tower. And that's for placing towers.", "tokens": [50668, 257, 10567, 13, 400, 498, 286, 360, 483, 257, 3100, 11, 550, 2086, 11, 291, 393, 1081, 257, 10567, 13, 400, 300, 311, 337, 17221, 25045, 13, 50984], "temperature": 0.0, "avg_logprob": -0.09463209490622243, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0022565496619790792}, {"id": 251, "seek": 138764, "start": 1400.0400000000002, "end": 1405.4, "text": " Then I have gold and income, which is easy. You get gold by killing units. You get income by", "tokens": [50984, 1396, 286, 362, 3821, 293, 5742, 11, 597, 307, 1858, 13, 509, 483, 3821, 538, 8011, 6815, 13, 509, 483, 5742, 538, 51252], "temperature": 0.0, "avg_logprob": -0.09463209490622243, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0022565496619790792}, {"id": 252, "seek": 138764, "start": 1405.4, "end": 1409.72, "text": " submitting units. And then every 15 seconds, all the income that you get from submitting units,", "tokens": [51252, 31836, 6815, 13, 400, 550, 633, 2119, 3949, 11, 439, 264, 5742, 300, 291, 483, 490, 31836, 6815, 11, 51468], "temperature": 0.0, "avg_logprob": -0.09463209490622243, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0022565496619790792}, {"id": 253, "seek": 138764, "start": 1409.72, "end": 1413.8000000000002, "text": " from all the game, you get it as gold. And the life is basically subtracting life.", "tokens": [51468, 490, 439, 264, 1216, 11, 291, 483, 309, 382, 3821, 13, 400, 264, 993, 307, 1936, 16390, 278, 993, 13, 51672], "temperature": 0.0, "avg_logprob": -0.09463209490622243, "compression_ratio": 1.8906882591093117, "no_speech_prob": 0.0022565496619790792}, {"id": 254, "seek": 141380, "start": 1414.6, "end": 1418.36, "text": " The multiplayer server is something that I spoke with the architecture. But basically,", "tokens": [50404, 440, 27325, 7154, 307, 746, 300, 286, 7179, 365, 264, 9482, 13, 583, 1936, 11, 50592], "temperature": 0.0, "avg_logprob": -0.17008289214103453, "compression_ratio": 1.867132867132867, "no_speech_prob": 0.008233051747083664}, {"id": 255, "seek": 141380, "start": 1418.36, "end": 1423.32, "text": " if you are interested in game servers, this post here is really, really, really interesting.", "tokens": [50592, 498, 291, 366, 3102, 294, 1216, 15909, 11, 341, 2183, 510, 307, 534, 11, 534, 11, 534, 1880, 13, 50840], "temperature": 0.0, "avg_logprob": -0.17008289214103453, "compression_ratio": 1.867132867132867, "no_speech_prob": 0.008233051747083664}, {"id": 256, "seek": 141380, "start": 1423.32, "end": 1428.04, "text": " Because it explains you how different games that you may want to build, for example,", "tokens": [50840, 1436, 309, 13948, 291, 577, 819, 2813, 300, 291, 815, 528, 281, 1322, 11, 337, 1365, 11, 51076], "temperature": 0.0, "avg_logprob": -0.17008289214103453, "compression_ratio": 1.867132867132867, "no_speech_prob": 0.008233051747083664}, {"id": 257, "seek": 141380, "start": 1428.04, "end": 1433.24, "text": " shooter games or things like that, how do they supposed to work in a small scale? For example,", "tokens": [51076, 24680, 2813, 420, 721, 411, 300, 11, 577, 360, 436, 3442, 281, 589, 294, 257, 1359, 4373, 30, 1171, 1365, 11, 51336], "temperature": 0.0, "avg_logprob": -0.17008289214103453, "compression_ratio": 1.867132867132867, "no_speech_prob": 0.008233051747083664}, {"id": 258, "seek": 141380, "start": 1433.24, "end": 1436.76, "text": " shooter games, the thing that was not useful for me, it's like you are shooting on the past,", "tokens": [51336, 24680, 2813, 11, 264, 551, 300, 390, 406, 4420, 337, 385, 11, 309, 311, 411, 291, 366, 5942, 322, 264, 1791, 11, 51512], "temperature": 0.0, "avg_logprob": -0.17008289214103453, "compression_ratio": 1.867132867132867, "no_speech_prob": 0.008233051747083664}, {"id": 259, "seek": 141380, "start": 1436.76, "end": 1439.72, "text": " you are just shooting on the present, because as everything is happening in life,", "tokens": [51512, 291, 366, 445, 5942, 322, 264, 1974, 11, 570, 382, 1203, 307, 2737, 294, 993, 11, 51660], "temperature": 0.0, "avg_logprob": -0.17008289214103453, "compression_ratio": 1.867132867132867, "no_speech_prob": 0.008233051747083664}, {"id": 260, "seek": 143972, "start": 1439.72, "end": 1445.64, "text": " the idea on the servers that you are on the past, for example, the implementation is", "tokens": [50364, 264, 1558, 322, 264, 15909, 300, 291, 366, 322, 264, 1791, 11, 337, 1365, 11, 264, 11420, 307, 50660], "temperature": 0.0, "avg_logprob": -0.16899294119614822, "compression_ratio": 1.9086956521739131, "no_speech_prob": 0.011840670369565487}, {"id": 261, "seek": 143972, "start": 1445.64, "end": 1449.64, "text": " alternative. Basically, the server is the one ruling everything through the client,", "tokens": [50660, 8535, 13, 8537, 11, 264, 7154, 307, 264, 472, 21437, 1203, 807, 264, 6423, 11, 50860], "temperature": 0.0, "avg_logprob": -0.16899294119614822, "compression_ratio": 1.9086956521739131, "no_speech_prob": 0.011840670369565487}, {"id": 262, "seek": 143972, "start": 1449.64, "end": 1453.64, "text": " sending information. The client has to override with what the server is sending.", "tokens": [50860, 7750, 1589, 13, 440, 6423, 575, 281, 42321, 365, 437, 264, 7154, 307, 7750, 13, 51060], "temperature": 0.0, "avg_logprob": -0.16899294119614822, "compression_ratio": 1.9086956521739131, "no_speech_prob": 0.011840670369565487}, {"id": 263, "seek": 143972, "start": 1453.64, "end": 1459.64, "text": " But it's also the server have, the client have a bit of predictions. The unit movement is not", "tokens": [51060, 583, 309, 311, 611, 264, 7154, 362, 11, 264, 6423, 362, 257, 857, 295, 21264, 13, 440, 4985, 3963, 307, 406, 51360], "temperature": 0.0, "avg_logprob": -0.16899294119614822, "compression_ratio": 1.9086956521739131, "no_speech_prob": 0.011840670369565487}, {"id": 264, "seek": 143972, "start": 1459.64, "end": 1466.04, "text": " sent with the state. It is, but the one that is doing the movement is the client. So the server", "tokens": [51360, 2279, 365, 264, 1785, 13, 467, 307, 11, 457, 264, 472, 300, 307, 884, 264, 3963, 307, 264, 6423, 13, 407, 264, 7154, 51680], "temperature": 0.0, "avg_logprob": -0.16899294119614822, "compression_ratio": 1.9086956521739131, "no_speech_prob": 0.011840670369565487}, {"id": 265, "seek": 146604, "start": 1466.12, "end": 1470.28, "text": " is just sending that this was the path and it didn't change and the client is just", "tokens": [50368, 307, 445, 7750, 300, 341, 390, 264, 3100, 293, 309, 994, 380, 1319, 293, 264, 6423, 307, 445, 50576], "temperature": 0.0, "avg_logprob": -0.2141264042955764, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.007815136574208736}, {"id": 266, "seek": 146604, "start": 1470.28, "end": 1476.44, "text": " continuing with the path that it was before. And also using Flux and using WebSockets for all of that.", "tokens": [50576, 9289, 365, 264, 3100, 300, 309, 390, 949, 13, 400, 611, 1228, 3235, 2449, 293, 1228, 9573, 50, 1560, 1385, 337, 439, 295, 300, 13, 50884], "temperature": 0.0, "avg_logprob": -0.2141264042955764, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.007815136574208736}, {"id": 267, "seek": 146604, "start": 1478.12, "end": 1482.28, "text": " UX UI, first, that was the implementation that I have before, which is really awful.", "tokens": [50968, 40176, 15682, 11, 700, 11, 300, 390, 264, 11420, 300, 286, 362, 949, 11, 597, 307, 534, 11232, 13, 51176], "temperature": 0.0, "avg_logprob": -0.2141264042955764, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.007815136574208736}, {"id": 268, "seek": 146604, "start": 1482.84, "end": 1488.52, "text": " And then I discover a written UI, which is basically bootstrap. I don't know if you heard", "tokens": [51204, 400, 550, 286, 4411, 257, 3720, 15682, 11, 597, 307, 1936, 11450, 372, 4007, 13, 286, 500, 380, 458, 498, 291, 2198, 51488], "temperature": 0.0, "avg_logprob": -0.2141264042955764, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.007815136574208736}, {"id": 269, "seek": 148852, "start": 1488.6, "end": 1495.8, "text": " of bootstrap for HTML. Well, it's that. You can create, you can say this container, which", "tokens": [50368, 295, 11450, 372, 4007, 337, 17995, 13, 1042, 11, 309, 311, 300, 13, 509, 393, 1884, 11, 291, 393, 584, 341, 10129, 11, 597, 50728], "temperature": 0.0, "avg_logprob": -0.17101108904966375, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.035624679177999496}, {"id": 270, "seek": 148852, "start": 1495.8, "end": 1502.04, "text": " it has rows or it has a grid, and then all the content inside of it will be placed in different", "tokens": [50728, 309, 575, 13241, 420, 309, 575, 257, 10748, 11, 293, 550, 439, 264, 2701, 1854, 295, 309, 486, 312, 7074, 294, 819, 51040], "temperature": 0.0, "avg_logprob": -0.17101108904966375, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.035624679177999496}, {"id": 271, "seek": 148852, "start": 1502.04, "end": 1508.36, "text": " things. And you can do input and you can do buttons and so on. So it's really, really simple for", "tokens": [51040, 721, 13, 400, 291, 393, 360, 4846, 293, 291, 393, 360, 9905, 293, 370, 322, 13, 407, 309, 311, 534, 11, 534, 2199, 337, 51356], "temperature": 0.0, "avg_logprob": -0.17101108904966375, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.035624679177999496}, {"id": 272, "seek": 148852, "start": 1508.36, "end": 1513.08, "text": " these types of things. Then cross compilation, which was something that has been discussed with", "tokens": [51356, 613, 3467, 295, 721, 13, 1396, 3278, 40261, 11, 597, 390, 746, 300, 575, 668, 7152, 365, 51592], "temperature": 0.0, "avg_logprob": -0.17101108904966375, "compression_ratio": 1.6293103448275863, "no_speech_prob": 0.035624679177999496}, {"id": 273, "seek": 151308, "start": 1513.08, "end": 1519.48, "text": " Go Release before. And this was fun because I never compiled with Cgo enable and this requires", "tokens": [50364, 1037, 34278, 949, 13, 400, 341, 390, 1019, 570, 286, 1128, 36548, 365, 383, 1571, 9528, 293, 341, 7029, 50684], "temperature": 0.0, "avg_logprob": -0.24834148858183175, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.007540971040725708}, {"id": 274, "seek": 151308, "start": 1519.48, "end": 1527.6399999999999, "text": " Cgo enable. So I managed to cross compile with Cgo enable for Linux, OS X and Windows.", "tokens": [50684, 383, 1571, 9528, 13, 407, 286, 6453, 281, 3278, 31413, 365, 383, 1571, 9528, 337, 18734, 11, 12731, 1783, 293, 8591, 13, 51092], "temperature": 0.0, "avg_logprob": -0.24834148858183175, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.007540971040725708}, {"id": 275, "seek": 151308, "start": 1528.4399999999998, "end": 1533.56, "text": " And using Go Release, just changing a few things on the actual code base and I have to open up", "tokens": [51132, 400, 1228, 1037, 34278, 11, 445, 4473, 257, 1326, 721, 322, 264, 3539, 3089, 3096, 293, 286, 362, 281, 1269, 493, 51388], "temperature": 0.0, "avg_logprob": -0.24834148858183175, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.007540971040725708}, {"id": 276, "seek": 151308, "start": 1533.56, "end": 1538.84, "text": " a PR to go release to propose those changes because it's just two lines of changing. And you can", "tokens": [51388, 257, 11568, 281, 352, 4374, 281, 17421, 729, 2962, 570, 309, 311, 445, 732, 3876, 295, 4473, 13, 400, 291, 393, 51652], "temperature": 0.0, "avg_logprob": -0.24834148858183175, "compression_ratio": 1.6288209606986899, "no_speech_prob": 0.007540971040725708}, {"id": 277, "seek": 153884, "start": 1538.84, "end": 1544.6, "text": " cross compile using Xgo. It's not go, it's Xgo, which is a cross compilation tool. And also you", "tokens": [50364, 3278, 31413, 1228, 1783, 1571, 13, 467, 311, 406, 352, 11, 309, 311, 1783, 1571, 11, 597, 307, 257, 3278, 40261, 2290, 13, 400, 611, 291, 50652], "temperature": 0.0, "avg_logprob": -0.17202679812908173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010103495791554451}, {"id": 278, "seek": 153884, "start": 1544.6, "end": 1549.08, "text": " can play on the browser with Wasm and at some point I will try to do it on Android, which is also", "tokens": [50652, 393, 862, 322, 264, 11185, 365, 3027, 76, 293, 412, 512, 935, 286, 486, 853, 281, 360, 309, 322, 8853, 11, 597, 307, 611, 50876], "temperature": 0.0, "avg_logprob": -0.17202679812908173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010103495791554451}, {"id": 279, "seek": 153884, "start": 1549.08, "end": 1555.9599999999998, "text": " possible. And for the future, the only thing that I, well, from the other things I have to do,", "tokens": [50876, 1944, 13, 400, 337, 264, 2027, 11, 264, 787, 551, 300, 286, 11, 731, 11, 490, 264, 661, 721, 286, 362, 281, 360, 11, 51220], "temperature": 0.0, "avg_logprob": -0.17202679812908173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010103495791554451}, {"id": 280, "seek": 153884, "start": 1555.9599999999998, "end": 1560.76, "text": " the main one is improving the A star because right now it's the bottleneck. It takes 100", "tokens": [51220, 264, 2135, 472, 307, 11470, 264, 316, 3543, 570, 558, 586, 309, 311, 264, 44641, 547, 13, 467, 2516, 2319, 51460], "temperature": 0.0, "avg_logprob": -0.17202679812908173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010103495791554451}, {"id": 281, "seek": 153884, "start": 1560.76, "end": 1566.9199999999998, "text": " milliseconds to create a path. And if George is spamming it, it's awful for everyone to work with", "tokens": [51460, 34184, 281, 1884, 257, 3100, 13, 400, 498, 7136, 307, 24028, 2810, 309, 11, 309, 311, 11232, 337, 1518, 281, 589, 365, 51768], "temperature": 0.0, "avg_logprob": -0.17202679812908173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.010103495791554451}, {"id": 282, "seek": 156692, "start": 1566.92, "end": 1573.24, "text": " because everything goes as low. And then add more types of units, add more types of towers and much,", "tokens": [50364, 570, 1203, 1709, 382, 2295, 13, 400, 550, 909, 544, 3467, 295, 6815, 11, 909, 544, 3467, 295, 25045, 293, 709, 11, 50680], "temperature": 0.0, "avg_logprob": -0.2278705510226163, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.003398983273655176}, {"id": 283, "seek": 156692, "start": 1573.24, "end": 1579.0, "text": " much, much more. That's it. I hope it was interesting for everyone.", "tokens": [50680, 709, 11, 709, 544, 13, 663, 311, 309, 13, 286, 1454, 309, 390, 1880, 337, 1518, 13, 50968], "temperature": 0.0, "avg_logprob": -0.2278705510226163, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.003398983273655176}, {"id": 284, "seek": 156692, "start": 1579.0, "end": 1590.8400000000001, "text": " Thank you. If you have questions, please ask in the hallway because we want to change speakers", "tokens": [50968, 1044, 291, 13, 759, 291, 362, 1651, 11, 1767, 1029, 294, 264, 23903, 570, 321, 528, 281, 1319, 9518, 51560], "temperature": 0.0, "avg_logprob": -0.2278705510226163, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.003398983273655176}, {"id": 285, "seek": 159084, "start": 1590.84, "end": 1595.48, "text": " quickly and not wasting any more time. Thank you again and amazing work.", "tokens": [50368, 2661, 293, 406, 20457, 604, 544, 565, 13, 1044, 291, 797, 293, 2243, 589, 13, 50596], "temperature": 0.0, "avg_logprob": -0.2314361466301812, "compression_ratio": 1.0, "no_speech_prob": 0.7090166807174683}], "language": "en"}