{"text": " Awesome. Thank you. So my name is Mark and I'm here to show off the IQ Engine open source project. I'll talk about where it's headed in the future as well. Also here we have Roman who's involved in IQ Engine as well as SIGMF. And this talk is aimed primarily at two groups. One is folks who are newish to SDR and RF signal processing, students, hobbyists, anyone who wants to learn more about all this software that you're seeing. And then second is folks who run or maintain an open source project that involves RF signal processing in some way. And hopefully even if you're not in those groups you'll still find some interest here. So IQ Engine currently it's a web app that is all about RF recordings. It lets you preview recordings, manage them, analyze them, some light processing, and then most importantly is sharing and all in your browser. So entirely web based. And I'll show a quick little demo of what the current tool looks like. So IQ Engine is, it's available at IQEngine.org. The project runs a public instance of the tool. But in this case I've got one running locally because I wasn't sure about Wi-Fi. So the main screen here is essentially a list of these RF recordings. They're all stored in the SIGMF format if you're familiar with SIGMF. We have some good ones from Jean-Michel and Aang23. A lot of folks who are here today. You can also open a recording that's local to your machine and then all the processing is done client side. So like I can open a local directory full of recordings. Here, recordings and it'll list out them all, generate the thumbnails. So actually it's the same directory that I had served from the server. You can also open just one local file pair. So sort of, anyway, so back to the list here. If you click on one of them, you're brought to a spectrogram style interface where it loads the samples that you're looking at at any given time. So that way you can have enormous files. And then the mini map on the right represents the entire recording. So you can jump to any part of it and the little gray area is the part you're looking at. We have time, frequency and IQ like you'd expect. That's FM. And then some other features here are, so there's time and frequency cursors if you want to measure stuff, adjustable dynamic range for the color, windowing, FFT size, you can add an FIR filter taps and all of that is run client side. The FFTs are done client side, the FIR filter is. But the one part that's not client side is our plug-in system. So if you select a portion of the recording that you want to send to the plug-in server, you can select it there and then, let me zoom in here, choose a plug-in. So this was an FM recording. So I'm going to run an FM receiver that's implemented in Guinea Radio. And it sends the samples to the server that runs Guinea Radio. And then in this case, it's actually returning a WAV file with the audio of that signal. But there's other types of outputs like you could run a block or a plug-in that gives you IQ as the output. So if I do a low pass filter, it's just going to output IQ. Let me give it a proper cutoff frequency there. And then currently we're just displaying the IQ in a pop-up. But in the future, we're trying to figure out the best way to replace kind of the signal that's already on the screen with this new one so that you can chain plug-ins together. So that's sort of the gist of the tool. Now back to the slides here. So everything's, IQ engine's built on top of SIGMF in many ways. If you're not familiar, SIGMF is an open standard for saving your RF recordings to a file. It's as simple as it gets. You have a binary IQ file which is sort of the native way to store a recording and then a JSON file. And the SIGMF specifications mainly tell you how to write that JSON file. So there's stuff like how you specify sample rate, center frequency, data type. And then I'll show you annotations in a second here. And by using SIGMF, you have software interoperability. And then you can also avoid data bit rot where like in five years you forget what sample rate stuff was taken at. If you want to learn more about SIGMF, there's a link at the top of IQengine.org and it also links out to the SIGMF GitHub page. So SIGMF, the standard is managed by GNU Radio. It's kind of a sub-project sort of. Now as far as the IQ engine code itself, it's web-based, front-end uses React, Tailwind, some big dependencies that we get a lot of use out of our code mirror for all of the code editing. PyOdide lets us run Python in the browser. I didn't demo that but there's some videos online about how that gets used. And then Plotly for those time frequency and IQ plots. WebAssembly for FFTs. And then for our documentation, we use the MDX system which lets us write it in markdown and then have it rendered as part of this page here. So this was written in markdown and then it lets us render it as React components. Kind of nice. Now, so that was kind of the introduction but I wanted to start off where I left at GNU Radio conference last year. So what have we done since then? Well now it's possible to run a local instance of IQengine like if you want to run it within an organization or whatever to share things privately. You can run an instance and you can put the recordings on the same server. So easy enough. Or something that's mounted to the file system as long as Python open can see it and then it can serve the recording. And the other option is to use Cloud Storage which is what we do for IQengine.org. And as far as how to do that, so the general idea is you pick a directory on your server and then you can run IQengine with the Docker images. So if you go to the install with Docker page, you really, all you have to do is change the directory that's mounted into the container. So pretty much this part here of the command. And then the rest of this command will pull the latest IQengine Docker image and it will run it. And you should be able to see your recordings. They'll look like this because they'll be local to the back end. Versus IQengine.org which has a few different data sources that pop up here. So and that's, yeah, fairly new. If you end up using this and notice some quality of life issues, definitely reach out on Discord or GitHub. So next up, I'm going to dive into the plug-in system that you saw me run with the FM receiver. So the idea is any RF signal processing that you want to run on a back end server but triggered from the browser. So what we have within our project is this rest-based API and it allows for someone to write the plug-in server in any language they want. We have an example in Python and then Loic wrote one for Rust. The Python one can run Gini radio flow graphs. It just pretty much runs the Python flow graph and then uses ZMQ to get samples in and out of it. But in the future, there'll be more languages and by using this rest API, it doesn't matter. It could be, really you can deploy it and implement it however you want to as long as it supports this interface. I'm going to show a little demo later running SatDump which is kind of an example of a whole separate project, not a Gini radio flow graph or anything, but a piece of open-source software that you can trigger from IQ Engine. And then Aang will be presenting more about SatDump in like an hour or so. So as far as how the plug-ins look, the Python based ones, we tried to make it as easy as possible to create a new one. This isn't the actual rest API, this is just how you would make a new Python plug-in and then you would use an existing server code that we already have. So you can see you have to specify your custom parameters and then there's a run function where you're given the samples and you have to return several different data types. As far as Gini radio, you specify the flow graph, but the only catch is you have to substitute your file source and GUIs with the ZMQ source and ZMQ sync. That's how we get samples in and out. Not the most performant thing, but it gets the job done. So you can see these first couple blocks are the ZMQ ones and then the rest represents the flow graph. So we have a Python flow graph that implements an FM receiver in this case and that was the plug-in that I ran earlier. So the kind of the motivation here is if you are an author of an out of tree module for Gini radio, you probably already shared the code somewhere like GitHub and created some examples, some example flow graphs, but the next step would be making it more accessible and easy for folks to find and play with and I think this could be an option there by exposing it as a plug-in. Now, let me go back to the plug-ins. So I'll go ahead and run the SAT dump one. So I've got a recording of NOAA APT right here contributed by Aang. So I can click that, I can browse around the signal. I'll notice so it's actually offset, but I believe this is the APT signal. You could jump to different parts of the file there and then as far as running it through SAT dump, I want to run the entire file because it needs a decent amount of samples. So I'm going to select the whole file and then under plug-ins, we've got the fresh new SAT dump plug-in already preloaded with the pipeline for APT, but you can put whatever pipeline you want. So right now it ran SAT dump under the hood. So here's one of the images that comes out. I think IQ Engine still has some work to do as far as if you have a bunch of different outputs, how do you present them all to the user? There's a lot of web design that can go on there. So either it pops open something or it saves a file and it supports all the different MIME types. If you're familiar with web, it sort of just uses MIME type and then we added some custom MIME types for IQ, like the different data types for SIGMF. As far as other plug-ins, I think, yeah, pretty much, we have a detector as well. So let me go to a recording that I give my students when we study signal detection and classification. This is kind of like a toy example meant for testing a detector where you have a few different signals here. IQ Engine's not about implementing RFML, it's about sharing it and making it more accessible. So we made a very simple detector just to have an example. It's written in Python, you're welcome to check it out in the source. It's called Simple Detector. We also have Marco's detector, he was someone else who was working on it. Simple Detector was pretty quick for that number of samples and it did a decent job. There's one extra little detected emission there. Now the results are in the form of SIGMF annotations which are bounding boxes in time and frequency and that's how the results are shared from the plug-in. So if you wanted to download the raw metadata file, the SIGMF file, you can go to the bottom here and here are the annotations that the plug-in created. So we sort of copied the SIGMF format for the return data type. And if you wanted to perform classification you would simply fill out the label and they would show up. Within IQ Engine you can also edit the annotations and edit the labels. So if you wanted to manually tweak stuff like you were making an RFML data set, sort of like a golden meta file, you could do that here. What I find most useful is simply to have a quick glance at how well something worked. If you had tons of files to run through you wouldn't want to do all this clicking, you would just make a script and you could certainly run the plug-ins from a Python script. It would just need to call the REST API. Back to the slides. Alright, so I want to take just a really quick tangent to mention, remind people about what Gini Radio provides and then how it relates to this plan that the project has. So Gini Radio, it's a way to implement your RF, DSP and C++ or Python. It gives us a standard framework for doing that implementation and it's easy to get annoyed at the boilerplate and how to install everything. But in the end if you use that framework it means that other people who are familiar with Gini Radio can then install your Aditree module. They sort of know the standard usage of your blocks, where to look for the example flow graphs, how to connect your application with their SDR sitting on their desk. And that's an enormous value, that's in my opinion one of the main values of Gini Radio. And then the GUIs are nice as well, it's not always easy to program GUIs. So if you're curious about learning about different Aditree modules, C-Gran.org is where we point people. And I mention this because C-Gran represents a centralized location for Gini Radio applications and libraries, what we call out of tree modules. But kind of zooming out one more layer going beyond just Gini Radio is what I'm going to talk about here in a sec. So let's say that you're a developer of open source software that involves RF processing in some way, like you wrote SAT dump and you're doing satellite signal processing. You build something, you want to share it, you want to keep it easy to demonstrate and show off to people, easy to use. Those are sort of the main steps you might take. Now on the other side of things, you have users out there, whoever they are, individual students, organizations, who first they need to discover that this software exists. That's like the very first step. And then how do you install it, how do you run it properly, how can I evaluate how well it's working and use it with my SDR or my recordings. So kind of a duality here. On the developer side, you might post your code to GitHub, you might share it as part of a Faw STEM talk. That's kind of like the current method that we use. On the user side of things, you might Google the topic you're interested in, like specific satellite, Wi-Fi, whatever. You'll probably come across what's out there. But it's not the best way to do it, right? Just by Googling. So installation can be an enormous barrier. When I teach CS students, it depends who you are, but some students and some folks are better at getting this software installed than others. Obviously having a lot of Linux experience helps folks who are new to Linux but want to dive into signal processing, they can struggle here and there. So it can definitely be a barrier. Now how do you actually run it? If it's a new radio flow graph, you probably know how, but not everything's easy to use. There's RF libraries out there that are not clear how exactly do you use it, but you know it's powerful. And then lastly, evaluating the software. Maybe you're going to use it as a dependency or use it as part of a project. So this idea to sort of evolve IQ engines, so instead of just being a way to share and evaluate RF recordings, it can also be used for just RF open source software in general. Sort of like a central hub, community driven for devs to share stuff for users to find and discover software. And then by exposing the software as a plugin, they can try it out on recordings that are already on the site or their own. And then one side benefit is university isn't anyone else who wants to show off their expertise and creates open source software. They can use this central hub as a way to do that. Now this is all in the browser primarily for accessibility sake. It's not the most performant way to do something like this, but it's extremely convenient. Really, it removes a lot of barriers. So users would be able to play around with a certain function using a variety of recordings. And it's more than just using recordings. They can try in the future, maybe there's a way to lower the SNR, like add noise and see if it still works or what not. Add a frequency shift, see if the RF function still works. And then on the author side of things, all you really would need to do is add this REST based interface or at least make it easy to call with CLI and then retrieve the results. So like Sat dump, I'm not using a REST interface. I'm just running the CLI in a way that's easy. Anyway, now one design decision that was made was to allow multiple plugin servers to connect to a single IQ Engine instance like at IQEngine.org. That way, like a university could run their own plugin server, have total control over it, but they could share their expertise, everything they want to show off. And this is really just a concept. So right now I showed you how IQ Engine lets you preview RF recordings and RF data sets. Well, I think in the future with these building blocks that I showed through the plugin system and this REST interface that we're designing, you could have a tool that would be used for previewing what I'm calling Functions App Software, really anything that involves RF signal processing. Now there are limitations, so a lot of RF apps can't simply be run on a recording. So SRS ran excellent LTE and 5G radio stack. Because of LTE and 5G's strict latency requirements, you can't easily just play it back. It's not straightforward, simply running it on a recording. You sort of want to simulate that closed loop system. So not all RF functions and apps are going to be shareable this way, but I think a vast majority of them are definitely GNU radio apps and those kind of processing applications. The other thing that you wouldn't show off is like an SDR interface, like a GUI, that wouldn't make any sense. Now if you're interested in contributing, it's a community led project, so we can always use more web devs. It turns out that the kind of folks in these RF circles tend to know C++, Python, but less so on the website. And I know I've had to learn a lot of web development to get this project moving more. So even if you're not a web developer, there's plenty of other ways to contribute. We're always looking for more interesting RF recordings to share. If you have an entire data set, we can add like a whole category here on the left. So we have Daniel Estevez's awesome satellite recordings as an example, where we can link off to your website. And so if you want to get involved in any way, there's a Discord link at the top of IQengine.org. We have a little community that's slowly building. And with that, I will take questions. Yep? So yeah, the question was related to geolocation data, like running it as a plugin, I assume. Yeah, yeah, while I explain that, so there actually is already a maps-based interface for, anyway, when we designed the API mentioned, we made sure to allow multiple channels of RF. So those channels could be time synchronized recordings from different sensors. That way at least you could run it from a, the backend perspective. And then, yeah, I guess we would need to have a maps interface to the spectrogram page to make that fully happen. So yeah, I would need to make that fully happen. But good, good, great suggestion. Yep? Well, so Guinea Radio has some Azure credit that they got, and that's what we've been using for a lot of these recordings. So, and we can use that for other folks' recordings if they want to share it publicly. Yeah, you can reach out and we can transfer it over. Yeah, I think it would fall. No, no, no, like I could like upload it for you. So the Guinea Radio has a blob storage account, so I could, I could give you a SAS token for you to upload it yourself or I could upload it for you. Yep, I think there was one more. Yes, there is something that's a work in progress, but I guess I'll share it. So there's an upload page. Oh yeah, yeah, so, so IQengine.org slash upload should allow you to upload a recording. The Wi-Fi's not great, but yeah, that would be the first place to go. I think we're out of time. Any last question? Yep? So how well does it actually handle everybody's thoughts? So, I mean, it was designed to deal with terabyte files from the start, which is why we have that minimap, and when you open the spectrogram page, it's only loading what you're looking at at any given time. So it's sending the IQ samples to your client, to the browser. The browser's doing the FFTs. So it's sending maybe a few million samples to get a spectrogram like this, but if it's a mini terabyte recording, you'll just have a smaller, like, gray window here, because it'll represent a smaller part of the whole recording. Yeah, I mean, you have to store the recording, but it's not all, we have no part of the code that sends the entire recording to either the client or the backend, because we know it's not going to fly for huge stuff. All right. Yep? Yeah. Yeah. Actually, SIGMF has a lot of, there's even an extension for more details about the hardware involved. Definitely check out SIGMF, the specs. So if you want a five minute introduction to SIGMF, that's what we have here on IQ Engine, but I would, yeah, go ahead and go to the specs and dive in, and you'll know a lot of the parameters that you mentioned. All right, thank you very much. Wow. Thank you very much. Thank you very much. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.72, "text": " Awesome. Thank you. So my name is Mark and I'm here to show off the IQ Engine open source", "tokens": [50364, 10391, 13, 1044, 291, 13, 407, 452, 1315, 307, 3934, 293, 286, 478, 510, 281, 855, 766, 264, 28921, 7659, 1269, 4009, 51050], "temperature": 0.0, "avg_logprob": -0.21973932902018228, "compression_ratio": 1.421875, "no_speech_prob": 0.27537229657173157}, {"id": 1, "seek": 0, "start": 13.72, "end": 19.92, "text": " project. I'll talk about where it's headed in the future as well. Also here we have Roman", "tokens": [51050, 1716, 13, 286, 603, 751, 466, 689, 309, 311, 12798, 294, 264, 2027, 382, 731, 13, 2743, 510, 321, 362, 8566, 51360], "temperature": 0.0, "avg_logprob": -0.21973932902018228, "compression_ratio": 1.421875, "no_speech_prob": 0.27537229657173157}, {"id": 2, "seek": 0, "start": 19.92, "end": 27.12, "text": " who's involved in IQ Engine as well as SIGMF. And this talk is aimed primarily at two groups.", "tokens": [51360, 567, 311, 3288, 294, 28921, 7659, 382, 731, 382, 318, 10489, 44, 37, 13, 400, 341, 751, 307, 20540, 10029, 412, 732, 3935, 13, 51720], "temperature": 0.0, "avg_logprob": -0.21973932902018228, "compression_ratio": 1.421875, "no_speech_prob": 0.27537229657173157}, {"id": 3, "seek": 2712, "start": 27.12, "end": 34.64, "text": " One is folks who are newish to SDR and RF signal processing, students, hobbyists, anyone", "tokens": [50364, 1485, 307, 4024, 567, 366, 777, 742, 281, 318, 9301, 293, 26204, 6358, 9007, 11, 1731, 11, 18240, 1751, 11, 2878, 50740], "temperature": 0.0, "avg_logprob": -0.14333012524773092, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.02225678786635399}, {"id": 4, "seek": 2712, "start": 34.64, "end": 40.04, "text": " who wants to learn more about all this software that you're seeing. And then second is folks", "tokens": [50740, 567, 2738, 281, 1466, 544, 466, 439, 341, 4722, 300, 291, 434, 2577, 13, 400, 550, 1150, 307, 4024, 51010], "temperature": 0.0, "avg_logprob": -0.14333012524773092, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.02225678786635399}, {"id": 5, "seek": 2712, "start": 40.04, "end": 46.120000000000005, "text": " who run or maintain an open source project that involves RF signal processing in some", "tokens": [51010, 567, 1190, 420, 6909, 364, 1269, 4009, 1716, 300, 11626, 26204, 6358, 9007, 294, 512, 51314], "temperature": 0.0, "avg_logprob": -0.14333012524773092, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.02225678786635399}, {"id": 6, "seek": 2712, "start": 46.120000000000005, "end": 52.760000000000005, "text": " way. And hopefully even if you're not in those groups you'll still find some interest here.", "tokens": [51314, 636, 13, 400, 4696, 754, 498, 291, 434, 406, 294, 729, 3935, 291, 603, 920, 915, 512, 1179, 510, 13, 51646], "temperature": 0.0, "avg_logprob": -0.14333012524773092, "compression_ratio": 1.609865470852018, "no_speech_prob": 0.02225678786635399}, {"id": 7, "seek": 5276, "start": 52.76, "end": 60.199999999999996, "text": " So IQ Engine currently it's a web app that is all about RF recordings. It lets you preview", "tokens": [50364, 407, 28921, 7659, 4362, 309, 311, 257, 3670, 724, 300, 307, 439, 466, 26204, 25162, 13, 467, 6653, 291, 14281, 50736], "temperature": 0.0, "avg_logprob": -0.15897293090820314, "compression_ratio": 1.5521739130434782, "no_speech_prob": 0.01690596714615822}, {"id": 8, "seek": 5276, "start": 60.199999999999996, "end": 66.2, "text": " recordings, manage them, analyze them, some light processing, and then most importantly", "tokens": [50736, 25162, 11, 3067, 552, 11, 12477, 552, 11, 512, 1442, 9007, 11, 293, 550, 881, 8906, 51036], "temperature": 0.0, "avg_logprob": -0.15897293090820314, "compression_ratio": 1.5521739130434782, "no_speech_prob": 0.01690596714615822}, {"id": 9, "seek": 5276, "start": 66.2, "end": 72.84, "text": " is sharing and all in your browser. So entirely web based. And I'll show a quick little demo", "tokens": [51036, 307, 5414, 293, 439, 294, 428, 11185, 13, 407, 7696, 3670, 2361, 13, 400, 286, 603, 855, 257, 1702, 707, 10723, 51368], "temperature": 0.0, "avg_logprob": -0.15897293090820314, "compression_ratio": 1.5521739130434782, "no_speech_prob": 0.01690596714615822}, {"id": 10, "seek": 5276, "start": 72.84, "end": 81.6, "text": " of what the current tool looks like. So IQ Engine is, it's available at IQEngine.org.", "tokens": [51368, 295, 437, 264, 2190, 2290, 1542, 411, 13, 407, 28921, 7659, 307, 11, 309, 311, 2435, 412, 28921, 31254, 533, 13, 4646, 13, 51806], "temperature": 0.0, "avg_logprob": -0.15897293090820314, "compression_ratio": 1.5521739130434782, "no_speech_prob": 0.01690596714615822}, {"id": 11, "seek": 8160, "start": 81.6, "end": 86.36, "text": " The project runs a public instance of the tool. But in this case I've got one running", "tokens": [50364, 440, 1716, 6676, 257, 1908, 5197, 295, 264, 2290, 13, 583, 294, 341, 1389, 286, 600, 658, 472, 2614, 50602], "temperature": 0.0, "avg_logprob": -0.1267099284162425, "compression_ratio": 1.4669421487603307, "no_speech_prob": 0.25592273473739624}, {"id": 12, "seek": 8160, "start": 86.36, "end": 92.39999999999999, "text": " locally because I wasn't sure about Wi-Fi. So the main screen here is essentially a list", "tokens": [50602, 16143, 570, 286, 2067, 380, 988, 466, 14035, 12, 13229, 13, 407, 264, 2135, 2568, 510, 307, 4476, 257, 1329, 50904], "temperature": 0.0, "avg_logprob": -0.1267099284162425, "compression_ratio": 1.4669421487603307, "no_speech_prob": 0.25592273473739624}, {"id": 13, "seek": 8160, "start": 92.39999999999999, "end": 97.36, "text": " of these RF recordings. They're all stored in the SIGMF format if you're familiar with", "tokens": [50904, 295, 613, 26204, 25162, 13, 814, 434, 439, 12187, 294, 264, 318, 10489, 44, 37, 7877, 498, 291, 434, 4963, 365, 51152], "temperature": 0.0, "avg_logprob": -0.1267099284162425, "compression_ratio": 1.4669421487603307, "no_speech_prob": 0.25592273473739624}, {"id": 14, "seek": 8160, "start": 97.36, "end": 105.96, "text": " SIGMF. We have some good ones from Jean-Michel and Aang23. A lot of folks who are here today.", "tokens": [51152, 318, 10489, 44, 37, 13, 492, 362, 512, 665, 2306, 490, 13854, 12, 18462, 338, 293, 316, 656, 9356, 13, 316, 688, 295, 4024, 567, 366, 510, 965, 13, 51582], "temperature": 0.0, "avg_logprob": -0.1267099284162425, "compression_ratio": 1.4669421487603307, "no_speech_prob": 0.25592273473739624}, {"id": 15, "seek": 10596, "start": 105.96, "end": 111.8, "text": " You can also open a recording that's local to your machine and then all the processing", "tokens": [50364, 509, 393, 611, 1269, 257, 6613, 300, 311, 2654, 281, 428, 3479, 293, 550, 439, 264, 9007, 50656], "temperature": 0.0, "avg_logprob": -0.18112025150032932, "compression_ratio": 1.7047619047619047, "no_speech_prob": 0.9036441445350647}, {"id": 16, "seek": 10596, "start": 111.8, "end": 121.16, "text": " is done client side. So like I can open a local directory full of recordings. Here, recordings", "tokens": [50656, 307, 1096, 6423, 1252, 13, 407, 411, 286, 393, 1269, 257, 2654, 21120, 1577, 295, 25162, 13, 1692, 11, 25162, 51124], "temperature": 0.0, "avg_logprob": -0.18112025150032932, "compression_ratio": 1.7047619047619047, "no_speech_prob": 0.9036441445350647}, {"id": 17, "seek": 10596, "start": 121.16, "end": 129.04, "text": " and it'll list out them all, generate the thumbnails. So actually it's the same directory", "tokens": [51124, 293, 309, 603, 1329, 484, 552, 439, 11, 8460, 264, 46987, 13, 407, 767, 309, 311, 264, 912, 21120, 51518], "temperature": 0.0, "avg_logprob": -0.18112025150032932, "compression_ratio": 1.7047619047619047, "no_speech_prob": 0.9036441445350647}, {"id": 18, "seek": 10596, "start": 129.04, "end": 135.88, "text": " that I had served from the server. You can also open just one local file pair. So sort", "tokens": [51518, 300, 286, 632, 7584, 490, 264, 7154, 13, 509, 393, 611, 1269, 445, 472, 2654, 3991, 6119, 13, 407, 1333, 51860], "temperature": 0.0, "avg_logprob": -0.18112025150032932, "compression_ratio": 1.7047619047619047, "no_speech_prob": 0.9036441445350647}, {"id": 19, "seek": 13588, "start": 136.79999999999998, "end": 141.04, "text": " of, anyway, so back to the list here. If you click on one of them, you're brought to a", "tokens": [50410, 295, 11, 4033, 11, 370, 646, 281, 264, 1329, 510, 13, 759, 291, 2052, 322, 472, 295, 552, 11, 291, 434, 3038, 281, 257, 50622], "temperature": 0.0, "avg_logprob": -0.1573627165385655, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.023667411878705025}, {"id": 20, "seek": 13588, "start": 141.04, "end": 146.79999999999998, "text": " spectrogram style interface where it loads the samples that you're looking at at any", "tokens": [50622, 6177, 340, 1342, 3758, 9226, 689, 309, 12668, 264, 10938, 300, 291, 434, 1237, 412, 412, 604, 50910], "temperature": 0.0, "avg_logprob": -0.1573627165385655, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.023667411878705025}, {"id": 21, "seek": 13588, "start": 146.79999999999998, "end": 152.0, "text": " given time. So that way you can have enormous files. And then the mini map on the right", "tokens": [50910, 2212, 565, 13, 407, 300, 636, 291, 393, 362, 11322, 7098, 13, 400, 550, 264, 8382, 4471, 322, 264, 558, 51170], "temperature": 0.0, "avg_logprob": -0.1573627165385655, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.023667411878705025}, {"id": 22, "seek": 13588, "start": 152.0, "end": 156.35999999999999, "text": " represents the entire recording. So you can jump to any part of it and the little gray", "tokens": [51170, 8855, 264, 2302, 6613, 13, 407, 291, 393, 3012, 281, 604, 644, 295, 309, 293, 264, 707, 10855, 51388], "temperature": 0.0, "avg_logprob": -0.1573627165385655, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.023667411878705025}, {"id": 23, "seek": 13588, "start": 156.35999999999999, "end": 163.44, "text": " area is the part you're looking at. We have time, frequency and IQ like you'd expect.", "tokens": [51388, 1859, 307, 264, 644, 291, 434, 1237, 412, 13, 492, 362, 565, 11, 7893, 293, 28921, 411, 291, 1116, 2066, 13, 51742], "temperature": 0.0, "avg_logprob": -0.1573627165385655, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.023667411878705025}, {"id": 24, "seek": 16344, "start": 163.52, "end": 173.52, "text": " That's FM. And then some other features here are, so there's time and frequency cursors", "tokens": [50368, 663, 311, 29614, 13, 400, 550, 512, 661, 4122, 510, 366, 11, 370, 456, 311, 565, 293, 7893, 13946, 830, 50868], "temperature": 0.0, "avg_logprob": -0.21679434525339228, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0032707424834370613}, {"id": 25, "seek": 16344, "start": 173.52, "end": 181.68, "text": " if you want to measure stuff, adjustable dynamic range for the color, windowing, FFT size,", "tokens": [50868, 498, 291, 528, 281, 3481, 1507, 11, 27804, 8546, 3613, 337, 264, 2017, 11, 4910, 278, 11, 479, 25469, 2744, 11, 51276], "temperature": 0.0, "avg_logprob": -0.21679434525339228, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0032707424834370613}, {"id": 26, "seek": 16344, "start": 181.68, "end": 186.2, "text": " you can add an FIR filter taps and all of that is run client side. The FFTs are done", "tokens": [51276, 291, 393, 909, 364, 41538, 6608, 42536, 293, 439, 295, 300, 307, 1190, 6423, 1252, 13, 440, 479, 25469, 82, 366, 1096, 51502], "temperature": 0.0, "avg_logprob": -0.21679434525339228, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0032707424834370613}, {"id": 27, "seek": 16344, "start": 186.2, "end": 191.52, "text": " client side, the FIR filter is. But the one part that's not client side is our plug-in", "tokens": [51502, 6423, 1252, 11, 264, 41538, 6608, 307, 13, 583, 264, 472, 644, 300, 311, 406, 6423, 1252, 307, 527, 5452, 12, 259, 51768], "temperature": 0.0, "avg_logprob": -0.21679434525339228, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0032707424834370613}, {"id": 28, "seek": 19152, "start": 191.56, "end": 196.56, "text": " system. So if you select a portion of the recording that you want to send to the plug-in", "tokens": [50366, 1185, 13, 407, 498, 291, 3048, 257, 8044, 295, 264, 6613, 300, 291, 528, 281, 2845, 281, 264, 5452, 12, 259, 50616], "temperature": 0.0, "avg_logprob": -0.20155569377698396, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.008176607079803944}, {"id": 29, "seek": 19152, "start": 196.56, "end": 205.06, "text": " server, you can select it there and then, let me zoom in here, choose a plug-in. So this", "tokens": [50616, 7154, 11, 291, 393, 3048, 309, 456, 293, 550, 11, 718, 385, 8863, 294, 510, 11, 2826, 257, 5452, 12, 259, 13, 407, 341, 51041], "temperature": 0.0, "avg_logprob": -0.20155569377698396, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.008176607079803944}, {"id": 30, "seek": 19152, "start": 205.06, "end": 210.16000000000003, "text": " was an FM recording. So I'm going to run an FM receiver that's implemented in Guinea", "tokens": [51041, 390, 364, 29614, 6613, 13, 407, 286, 478, 516, 281, 1190, 364, 29614, 20086, 300, 311, 12270, 294, 46793, 51296], "temperature": 0.0, "avg_logprob": -0.20155569377698396, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.008176607079803944}, {"id": 31, "seek": 19152, "start": 210.16000000000003, "end": 219.16000000000003, "text": " Radio. And it sends the samples to the server that runs Guinea Radio. And then in this case,", "tokens": [51296, 17296, 13, 400, 309, 14790, 264, 10938, 281, 264, 7154, 300, 6676, 46793, 17296, 13, 400, 550, 294, 341, 1389, 11, 51746], "temperature": 0.0, "avg_logprob": -0.20155569377698396, "compression_ratio": 1.6985645933014355, "no_speech_prob": 0.008176607079803944}, {"id": 32, "seek": 21916, "start": 219.35999999999999, "end": 225.2, "text": " it's actually returning a WAV file with the audio of that signal. But there's other types", "tokens": [50374, 309, 311, 767, 12678, 257, 26915, 53, 3991, 365, 264, 6278, 295, 300, 6358, 13, 583, 456, 311, 661, 3467, 50666], "temperature": 0.0, "avg_logprob": -0.1275474661487644, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.009546495042741299}, {"id": 33, "seek": 21916, "start": 225.2, "end": 231.6, "text": " of outputs like you could run a block or a plug-in that gives you IQ as the output. So", "tokens": [50666, 295, 23930, 411, 291, 727, 1190, 257, 3461, 420, 257, 5452, 12, 259, 300, 2709, 291, 28921, 382, 264, 5598, 13, 407, 50986], "temperature": 0.0, "avg_logprob": -0.1275474661487644, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.009546495042741299}, {"id": 34, "seek": 21916, "start": 231.6, "end": 238.12, "text": " if I do a low pass filter, it's just going to output IQ. Let me give it a proper cutoff", "tokens": [50986, 498, 286, 360, 257, 2295, 1320, 6608, 11, 309, 311, 445, 516, 281, 5598, 28921, 13, 961, 385, 976, 309, 257, 2296, 1723, 4506, 51312], "temperature": 0.0, "avg_logprob": -0.1275474661487644, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.009546495042741299}, {"id": 35, "seek": 21916, "start": 238.12, "end": 243.4, "text": " frequency there. And then currently we're just displaying the IQ in a pop-up. But in", "tokens": [51312, 7893, 456, 13, 400, 550, 4362, 321, 434, 445, 36834, 264, 28921, 294, 257, 1665, 12, 1010, 13, 583, 294, 51576], "temperature": 0.0, "avg_logprob": -0.1275474661487644, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.009546495042741299}, {"id": 36, "seek": 21916, "start": 243.4, "end": 247.44, "text": " the future, we're trying to figure out the best way to replace kind of the signal that's", "tokens": [51576, 264, 2027, 11, 321, 434, 1382, 281, 2573, 484, 264, 1151, 636, 281, 7406, 733, 295, 264, 6358, 300, 311, 51778], "temperature": 0.0, "avg_logprob": -0.1275474661487644, "compression_ratio": 1.6282527881040891, "no_speech_prob": 0.009546495042741299}, {"id": 37, "seek": 24744, "start": 247.44, "end": 251.92, "text": " already on the screen with this new one so that you can chain plug-ins together. So that's", "tokens": [50364, 1217, 322, 264, 2568, 365, 341, 777, 472, 370, 300, 291, 393, 5021, 5452, 12, 1292, 1214, 13, 407, 300, 311, 50588], "temperature": 0.0, "avg_logprob": -0.16289303349513634, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.00969888549298048}, {"id": 38, "seek": 24744, "start": 251.92, "end": 258.92, "text": " sort of the gist of the tool. Now back to the slides here. So everything's, IQ engine's", "tokens": [50588, 1333, 295, 264, 290, 468, 295, 264, 2290, 13, 823, 646, 281, 264, 9788, 510, 13, 407, 1203, 311, 11, 28921, 2848, 311, 50938], "temperature": 0.0, "avg_logprob": -0.16289303349513634, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.00969888549298048}, {"id": 39, "seek": 24744, "start": 262.56, "end": 268.2, "text": " built on top of SIGMF in many ways. If you're not familiar, SIGMF is an open standard for", "tokens": [51120, 3094, 322, 1192, 295, 318, 10489, 44, 37, 294, 867, 2098, 13, 759, 291, 434, 406, 4963, 11, 318, 10489, 44, 37, 307, 364, 1269, 3832, 337, 51402], "temperature": 0.0, "avg_logprob": -0.16289303349513634, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.00969888549298048}, {"id": 40, "seek": 24744, "start": 268.2, "end": 273.96, "text": " saving your RF recordings to a file. It's as simple as it gets. You have a binary IQ", "tokens": [51402, 6816, 428, 26204, 25162, 281, 257, 3991, 13, 467, 311, 382, 2199, 382, 309, 2170, 13, 509, 362, 257, 17434, 28921, 51690], "temperature": 0.0, "avg_logprob": -0.16289303349513634, "compression_ratio": 1.5281385281385282, "no_speech_prob": 0.00969888549298048}, {"id": 41, "seek": 27396, "start": 274.03999999999996, "end": 280.03999999999996, "text": " file which is sort of the native way to store a recording and then a JSON file. And the", "tokens": [50368, 3991, 597, 307, 1333, 295, 264, 8470, 636, 281, 3531, 257, 6613, 293, 550, 257, 31828, 3991, 13, 400, 264, 50668], "temperature": 0.0, "avg_logprob": -0.1364143084635777, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.04268888756632805}, {"id": 42, "seek": 27396, "start": 280.03999999999996, "end": 285.32, "text": " SIGMF specifications mainly tell you how to write that JSON file. So there's stuff like", "tokens": [50668, 318, 10489, 44, 37, 29448, 8704, 980, 291, 577, 281, 2464, 300, 31828, 3991, 13, 407, 456, 311, 1507, 411, 50932], "temperature": 0.0, "avg_logprob": -0.1364143084635777, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.04268888756632805}, {"id": 43, "seek": 27396, "start": 285.32, "end": 290.28, "text": " how you specify sample rate, center frequency, data type. And then I'll show you annotations", "tokens": [50932, 577, 291, 16500, 6889, 3314, 11, 3056, 7893, 11, 1412, 2010, 13, 400, 550, 286, 603, 855, 291, 25339, 763, 51180], "temperature": 0.0, "avg_logprob": -0.1364143084635777, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.04268888756632805}, {"id": 44, "seek": 27396, "start": 290.28, "end": 296.91999999999996, "text": " in a second here. And by using SIGMF, you have software interoperability. And then you", "tokens": [51180, 294, 257, 1150, 510, 13, 400, 538, 1228, 318, 10489, 44, 37, 11, 291, 362, 4722, 728, 7192, 2310, 13, 400, 550, 291, 51512], "temperature": 0.0, "avg_logprob": -0.1364143084635777, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.04268888756632805}, {"id": 45, "seek": 27396, "start": 296.91999999999996, "end": 302.4, "text": " can also avoid data bit rot where like in five years you forget what sample rate stuff was", "tokens": [51512, 393, 611, 5042, 1412, 857, 4297, 689, 411, 294, 1732, 924, 291, 2870, 437, 6889, 3314, 1507, 390, 51786], "temperature": 0.0, "avg_logprob": -0.1364143084635777, "compression_ratio": 1.702290076335878, "no_speech_prob": 0.04268888756632805}, {"id": 46, "seek": 30240, "start": 302.47999999999996, "end": 309.47999999999996, "text": " taken at. If you want to learn more about SIGMF, there's a link at the top of IQengine.org", "tokens": [50368, 2726, 412, 13, 759, 291, 528, 281, 1466, 544, 466, 318, 10489, 44, 37, 11, 456, 311, 257, 2113, 412, 264, 1192, 295, 28921, 25609, 13, 4646, 50718], "temperature": 0.0, "avg_logprob": -0.17636707850864955, "compression_ratio": 1.4873949579831933, "no_speech_prob": 0.005465498194098473}, {"id": 47, "seek": 30240, "start": 310.56, "end": 317.56, "text": " and it also links out to the SIGMF GitHub page. So SIGMF, the standard is managed by", "tokens": [50772, 293, 309, 611, 6123, 484, 281, 264, 318, 10489, 44, 37, 23331, 3028, 13, 407, 318, 10489, 44, 37, 11, 264, 3832, 307, 6453, 538, 51122], "temperature": 0.0, "avg_logprob": -0.17636707850864955, "compression_ratio": 1.4873949579831933, "no_speech_prob": 0.005465498194098473}, {"id": 48, "seek": 30240, "start": 317.67999999999995, "end": 324.67999999999995, "text": " GNU Radio. It's kind of a sub-project sort of. Now as far as the IQ engine code itself,", "tokens": [51128, 46411, 52, 17296, 13, 467, 311, 733, 295, 257, 1422, 12, 4318, 1020, 1333, 295, 13, 823, 382, 1400, 382, 264, 28921, 2848, 3089, 2564, 11, 51478], "temperature": 0.0, "avg_logprob": -0.17636707850864955, "compression_ratio": 1.4873949579831933, "no_speech_prob": 0.005465498194098473}, {"id": 49, "seek": 30240, "start": 325.67999999999995, "end": 332.03999999999996, "text": " it's web-based, front-end uses React, Tailwind, some big dependencies that we get a lot of", "tokens": [51528, 309, 311, 3670, 12, 6032, 11, 1868, 12, 521, 4960, 30644, 11, 46074, 12199, 11, 512, 955, 36606, 300, 321, 483, 257, 688, 295, 51846], "temperature": 0.0, "avg_logprob": -0.17636707850864955, "compression_ratio": 1.4873949579831933, "no_speech_prob": 0.005465498194098473}, {"id": 50, "seek": 33204, "start": 332.08000000000004, "end": 337.36, "text": " use out of our code mirror for all of the code editing. PyOdide lets us run Python in", "tokens": [50366, 764, 484, 295, 527, 3089, 8013, 337, 439, 295, 264, 3089, 10000, 13, 9953, 46, 67, 482, 6653, 505, 1190, 15329, 294, 50630], "temperature": 0.0, "avg_logprob": -0.1752515435218811, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.001837672432884574}, {"id": 51, "seek": 33204, "start": 337.36, "end": 343.88, "text": " the browser. I didn't demo that but there's some videos online about how that gets used.", "tokens": [50630, 264, 11185, 13, 286, 994, 380, 10723, 300, 457, 456, 311, 512, 2145, 2950, 466, 577, 300, 2170, 1143, 13, 50956], "temperature": 0.0, "avg_logprob": -0.1752515435218811, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.001837672432884574}, {"id": 52, "seek": 33204, "start": 343.88, "end": 350.88, "text": " And then Plotly for those time frequency and IQ plots. WebAssembly for FFTs. And then for", "tokens": [50956, 400, 550, 2149, 310, 356, 337, 729, 565, 7893, 293, 28921, 28609, 13, 9573, 10884, 19160, 337, 479, 25469, 82, 13, 400, 550, 337, 51306], "temperature": 0.0, "avg_logprob": -0.1752515435218811, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.001837672432884574}, {"id": 53, "seek": 33204, "start": 351.40000000000003, "end": 355.88, "text": " our documentation, we use the MDX system which lets us write it in markdown and then have", "tokens": [51332, 527, 14333, 11, 321, 764, 264, 22521, 55, 1185, 597, 6653, 505, 2464, 309, 294, 1491, 5093, 293, 550, 362, 51556], "temperature": 0.0, "avg_logprob": -0.1752515435218811, "compression_ratio": 1.5324675324675325, "no_speech_prob": 0.001837672432884574}, {"id": 54, "seek": 35588, "start": 355.96, "end": 362.96, "text": " it rendered as part of this page here. So this was written in markdown and then it lets us", "tokens": [50368, 309, 28748, 382, 644, 295, 341, 3028, 510, 13, 407, 341, 390, 3720, 294, 1491, 5093, 293, 550, 309, 6653, 505, 50718], "temperature": 0.0, "avg_logprob": -0.1439274787902832, "compression_ratio": 1.5327510917030567, "no_speech_prob": 0.007005924824625254}, {"id": 55, "seek": 35588, "start": 363.48, "end": 370.48, "text": " render it as React components. Kind of nice. Now, so that was kind of the introduction", "tokens": [50744, 15529, 309, 382, 30644, 6677, 13, 9242, 295, 1481, 13, 823, 11, 370, 300, 390, 733, 295, 264, 9339, 51094], "temperature": 0.0, "avg_logprob": -0.1439274787902832, "compression_ratio": 1.5327510917030567, "no_speech_prob": 0.007005924824625254}, {"id": 56, "seek": 35588, "start": 371.0, "end": 376.24, "text": " but I wanted to start off where I left at GNU Radio conference last year. So what have", "tokens": [51120, 457, 286, 1415, 281, 722, 766, 689, 286, 1411, 412, 46411, 52, 17296, 7586, 1036, 1064, 13, 407, 437, 362, 51382], "temperature": 0.0, "avg_logprob": -0.1439274787902832, "compression_ratio": 1.5327510917030567, "no_speech_prob": 0.007005924824625254}, {"id": 57, "seek": 35588, "start": 376.24, "end": 383.0, "text": " we done since then? Well now it's possible to run a local instance of IQengine like if", "tokens": [51382, 321, 1096, 1670, 550, 30, 1042, 586, 309, 311, 1944, 281, 1190, 257, 2654, 5197, 295, 28921, 25609, 411, 498, 51720], "temperature": 0.0, "avg_logprob": -0.1439274787902832, "compression_ratio": 1.5327510917030567, "no_speech_prob": 0.007005924824625254}, {"id": 58, "seek": 38300, "start": 383.04, "end": 389.4, "text": " you want to run it within an organization or whatever to share things privately. You", "tokens": [50366, 291, 528, 281, 1190, 309, 1951, 364, 4475, 420, 2035, 281, 2073, 721, 31919, 13, 509, 50684], "temperature": 0.0, "avg_logprob": -0.15543732362634996, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.002216420602053404}, {"id": 59, "seek": 38300, "start": 389.4, "end": 396.4, "text": " can run an instance and you can put the recordings on the same server. So easy enough. Or something", "tokens": [50684, 393, 1190, 364, 5197, 293, 291, 393, 829, 264, 25162, 322, 264, 912, 7154, 13, 407, 1858, 1547, 13, 1610, 746, 51034], "temperature": 0.0, "avg_logprob": -0.15543732362634996, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.002216420602053404}, {"id": 60, "seek": 38300, "start": 397.96, "end": 402.64, "text": " that's mounted to the file system as long as Python open can see it and then it can serve", "tokens": [51112, 300, 311, 19138, 281, 264, 3991, 1185, 382, 938, 382, 15329, 1269, 393, 536, 309, 293, 550, 309, 393, 4596, 51346], "temperature": 0.0, "avg_logprob": -0.15543732362634996, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.002216420602053404}, {"id": 61, "seek": 38300, "start": 402.64, "end": 408.76, "text": " the recording. And the other option is to use Cloud Storage which is what we do for", "tokens": [51346, 264, 6613, 13, 400, 264, 661, 3614, 307, 281, 764, 8061, 36308, 597, 307, 437, 321, 360, 337, 51652], "temperature": 0.0, "avg_logprob": -0.15543732362634996, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.002216420602053404}, {"id": 62, "seek": 40876, "start": 408.76, "end": 415.76, "text": " IQengine.org. And as far as how to do that, so the general idea is you pick a directory", "tokens": [50364, 28921, 25609, 13, 4646, 13, 400, 382, 1400, 382, 577, 281, 360, 300, 11, 370, 264, 2674, 1558, 307, 291, 1888, 257, 21120, 50714], "temperature": 0.0, "avg_logprob": -0.15290578905042712, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01588546298444271}, {"id": 63, "seek": 40876, "start": 417.76, "end": 424.76, "text": " on your server and then you can run IQengine with the Docker images. So if you go to the", "tokens": [50814, 322, 428, 7154, 293, 550, 291, 393, 1190, 28921, 25609, 365, 264, 33772, 5267, 13, 407, 498, 291, 352, 281, 264, 51164], "temperature": 0.0, "avg_logprob": -0.15290578905042712, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01588546298444271}, {"id": 64, "seek": 40876, "start": 424.92, "end": 430.2, "text": " install with Docker page, you really, all you have to do is change the directory that's", "tokens": [51172, 3625, 365, 33772, 3028, 11, 291, 534, 11, 439, 291, 362, 281, 360, 307, 1319, 264, 21120, 300, 311, 51436], "temperature": 0.0, "avg_logprob": -0.15290578905042712, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01588546298444271}, {"id": 65, "seek": 40876, "start": 430.2, "end": 437.2, "text": " mounted into the container. So pretty much this part here of the command. And then the", "tokens": [51436, 19138, 666, 264, 10129, 13, 407, 1238, 709, 341, 644, 510, 295, 264, 5622, 13, 400, 550, 264, 51786], "temperature": 0.0, "avg_logprob": -0.15290578905042712, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.01588546298444271}, {"id": 66, "seek": 43720, "start": 437.32, "end": 443.44, "text": " rest of this command will pull the latest IQengine Docker image and it will run it. And you should", "tokens": [50370, 1472, 295, 341, 5622, 486, 2235, 264, 6792, 28921, 25609, 33772, 3256, 293, 309, 486, 1190, 309, 13, 400, 291, 820, 50676], "temperature": 0.0, "avg_logprob": -0.16832891074560022, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.00047266067122109234}, {"id": 67, "seek": 43720, "start": 443.44, "end": 447.03999999999996, "text": " be able to see your recordings. They'll look like this because they'll be local to the", "tokens": [50676, 312, 1075, 281, 536, 428, 25162, 13, 814, 603, 574, 411, 341, 570, 436, 603, 312, 2654, 281, 264, 50856], "temperature": 0.0, "avg_logprob": -0.16832891074560022, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.00047266067122109234}, {"id": 68, "seek": 43720, "start": 447.03999999999996, "end": 454.03999999999996, "text": " back end. Versus IQengine.org which has a few different data sources that pop up here.", "tokens": [50856, 646, 917, 13, 12226, 301, 28921, 25609, 13, 4646, 597, 575, 257, 1326, 819, 1412, 7139, 300, 1665, 493, 510, 13, 51206], "temperature": 0.0, "avg_logprob": -0.16832891074560022, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.00047266067122109234}, {"id": 69, "seek": 43720, "start": 457.0, "end": 464.0, "text": " So and that's, yeah, fairly new. If you end up using this and notice some quality of life", "tokens": [51354, 407, 293, 300, 311, 11, 1338, 11, 6457, 777, 13, 759, 291, 917, 493, 1228, 341, 293, 3449, 512, 3125, 295, 993, 51704], "temperature": 0.0, "avg_logprob": -0.16832891074560022, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.00047266067122109234}, {"id": 70, "seek": 46400, "start": 465.0, "end": 472.0, "text": " issues, definitely reach out on Discord or GitHub. So next up, I'm going to dive into the plug-in", "tokens": [50414, 2663, 11, 2138, 2524, 484, 322, 32623, 420, 23331, 13, 407, 958, 493, 11, 286, 478, 516, 281, 9192, 666, 264, 5452, 12, 259, 50764], "temperature": 0.0, "avg_logprob": -0.16561214129130045, "compression_ratio": 1.5406504065040652, "no_speech_prob": 0.0022499491460621357}, {"id": 71, "seek": 46400, "start": 472.0, "end": 479.0, "text": " system that you saw me run with the FM receiver. So the idea is any RF signal processing that you", "tokens": [50764, 1185, 300, 291, 1866, 385, 1190, 365, 264, 29614, 20086, 13, 407, 264, 1558, 307, 604, 26204, 6358, 9007, 300, 291, 51114], "temperature": 0.0, "avg_logprob": -0.16561214129130045, "compression_ratio": 1.5406504065040652, "no_speech_prob": 0.0022499491460621357}, {"id": 72, "seek": 46400, "start": 479.0, "end": 485.0, "text": " want to run on a back end server but triggered from the browser. So what we have within our", "tokens": [51114, 528, 281, 1190, 322, 257, 646, 917, 7154, 457, 21710, 490, 264, 11185, 13, 407, 437, 321, 362, 1951, 527, 51414], "temperature": 0.0, "avg_logprob": -0.16561214129130045, "compression_ratio": 1.5406504065040652, "no_speech_prob": 0.0022499491460621357}, {"id": 73, "seek": 46400, "start": 485.0, "end": 492.0, "text": " project is this rest-based API and it allows for someone to write the plug-in server in any", "tokens": [51414, 1716, 307, 341, 1472, 12, 6032, 9362, 293, 309, 4045, 337, 1580, 281, 2464, 264, 5452, 12, 259, 7154, 294, 604, 51764], "temperature": 0.0, "avg_logprob": -0.16561214129130045, "compression_ratio": 1.5406504065040652, "no_speech_prob": 0.0022499491460621357}, {"id": 74, "seek": 49200, "start": 492.36, "end": 499.36, "text": " language they want. We have an example in Python and then Loic wrote one for Rust. The Python", "tokens": [50382, 2856, 436, 528, 13, 492, 362, 364, 1365, 294, 15329, 293, 550, 6130, 299, 4114, 472, 337, 34952, 13, 440, 15329, 50732], "temperature": 0.0, "avg_logprob": -0.19371013051455782, "compression_ratio": 1.5630252100840336, "no_speech_prob": 0.007339934818446636}, {"id": 75, "seek": 49200, "start": 500.88, "end": 505.96, "text": " one can run Gini radio flow graphs. It just pretty much runs the Python flow graph and", "tokens": [50808, 472, 393, 1190, 460, 3812, 6477, 3095, 24877, 13, 467, 445, 1238, 709, 6676, 264, 15329, 3095, 4295, 293, 51062], "temperature": 0.0, "avg_logprob": -0.19371013051455782, "compression_ratio": 1.5630252100840336, "no_speech_prob": 0.007339934818446636}, {"id": 76, "seek": 49200, "start": 505.96, "end": 512.12, "text": " then uses ZMQ to get samples in and out of it. But in the future, there'll be more languages", "tokens": [51062, 550, 4960, 1176, 44, 48, 281, 483, 10938, 294, 293, 484, 295, 309, 13, 583, 294, 264, 2027, 11, 456, 603, 312, 544, 8650, 51370], "temperature": 0.0, "avg_logprob": -0.19371013051455782, "compression_ratio": 1.5630252100840336, "no_speech_prob": 0.007339934818446636}, {"id": 77, "seek": 49200, "start": 512.12, "end": 519.12, "text": " and by using this rest API, it doesn't matter. It could be, really you can deploy it and implement", "tokens": [51370, 293, 538, 1228, 341, 1472, 9362, 11, 309, 1177, 380, 1871, 13, 467, 727, 312, 11, 534, 291, 393, 7274, 309, 293, 4445, 51720], "temperature": 0.0, "avg_logprob": -0.19371013051455782, "compression_ratio": 1.5630252100840336, "no_speech_prob": 0.007339934818446636}, {"id": 78, "seek": 51912, "start": 519.24, "end": 524.44, "text": " it however you want to as long as it supports this interface. I'm going to show a little", "tokens": [50370, 309, 4461, 291, 528, 281, 382, 938, 382, 309, 9346, 341, 9226, 13, 286, 478, 516, 281, 855, 257, 707, 50630], "temperature": 0.0, "avg_logprob": -0.14857068269149118, "compression_ratio": 1.549645390070922, "no_speech_prob": 0.008179765194654465}, {"id": 79, "seek": 51912, "start": 524.44, "end": 530.2, "text": " demo later running SatDump which is kind of an example of a whole separate project, not", "tokens": [50630, 10723, 1780, 2614, 5344, 35, 1420, 597, 307, 733, 295, 364, 1365, 295, 257, 1379, 4994, 1716, 11, 406, 50918], "temperature": 0.0, "avg_logprob": -0.14857068269149118, "compression_ratio": 1.549645390070922, "no_speech_prob": 0.008179765194654465}, {"id": 80, "seek": 51912, "start": 530.2, "end": 536.52, "text": " a Gini radio flow graph or anything, but a piece of open-source software that you can", "tokens": [50918, 257, 460, 3812, 6477, 3095, 4295, 420, 1340, 11, 457, 257, 2522, 295, 1269, 12, 41676, 4722, 300, 291, 393, 51234], "temperature": 0.0, "avg_logprob": -0.14857068269149118, "compression_ratio": 1.549645390070922, "no_speech_prob": 0.008179765194654465}, {"id": 81, "seek": 51912, "start": 536.52, "end": 541.5600000000001, "text": " trigger from IQ Engine. And then Aang will be presenting more about SatDump in like an", "tokens": [51234, 7875, 490, 28921, 7659, 13, 400, 550, 316, 656, 486, 312, 15578, 544, 466, 5344, 35, 1420, 294, 411, 364, 51486], "temperature": 0.0, "avg_logprob": -0.14857068269149118, "compression_ratio": 1.549645390070922, "no_speech_prob": 0.008179765194654465}, {"id": 82, "seek": 51912, "start": 541.5600000000001, "end": 548.5600000000001, "text": " hour or so. So as far as how the plug-ins look, the Python based ones, we tried to make", "tokens": [51486, 1773, 420, 370, 13, 407, 382, 1400, 382, 577, 264, 5452, 12, 1292, 574, 11, 264, 15329, 2361, 2306, 11, 321, 3031, 281, 652, 51836], "temperature": 0.0, "avg_logprob": -0.14857068269149118, "compression_ratio": 1.549645390070922, "no_speech_prob": 0.008179765194654465}, {"id": 83, "seek": 54856, "start": 548.64, "end": 553.7199999999999, "text": " it as easy as possible to create a new one. This isn't the actual rest API, this is just", "tokens": [50368, 309, 382, 1858, 382, 1944, 281, 1884, 257, 777, 472, 13, 639, 1943, 380, 264, 3539, 1472, 9362, 11, 341, 307, 445, 50622], "temperature": 0.0, "avg_logprob": -0.11628960250714503, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.0007318309508264065}, {"id": 84, "seek": 54856, "start": 553.7199999999999, "end": 558.3599999999999, "text": " how you would make a new Python plug-in and then you would use an existing server code", "tokens": [50622, 577, 291, 576, 652, 257, 777, 15329, 5452, 12, 259, 293, 550, 291, 576, 764, 364, 6741, 7154, 3089, 50854], "temperature": 0.0, "avg_logprob": -0.11628960250714503, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.0007318309508264065}, {"id": 85, "seek": 54856, "start": 558.3599999999999, "end": 563.8, "text": " that we already have. So you can see you have to specify your custom parameters and then", "tokens": [50854, 300, 321, 1217, 362, 13, 407, 291, 393, 536, 291, 362, 281, 16500, 428, 2375, 9834, 293, 550, 51126], "temperature": 0.0, "avg_logprob": -0.11628960250714503, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.0007318309508264065}, {"id": 86, "seek": 54856, "start": 563.8, "end": 569.92, "text": " there's a run function where you're given the samples and you have to return several", "tokens": [51126, 456, 311, 257, 1190, 2445, 689, 291, 434, 2212, 264, 10938, 293, 291, 362, 281, 2736, 2940, 51432], "temperature": 0.0, "avg_logprob": -0.11628960250714503, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.0007318309508264065}, {"id": 87, "seek": 54856, "start": 569.92, "end": 576.92, "text": " different data types. As far as Gini radio, you specify the flow graph, but the only catch", "tokens": [51432, 819, 1412, 3467, 13, 1018, 1400, 382, 460, 3812, 6477, 11, 291, 16500, 264, 3095, 4295, 11, 457, 264, 787, 3745, 51782], "temperature": 0.0, "avg_logprob": -0.11628960250714503, "compression_ratio": 1.647940074906367, "no_speech_prob": 0.0007318309508264065}, {"id": 88, "seek": 57692, "start": 577.16, "end": 583.16, "text": " is you have to substitute your file source and GUIs with the ZMQ source and ZMQ sync.", "tokens": [50376, 307, 291, 362, 281, 15802, 428, 3991, 4009, 293, 17917, 6802, 365, 264, 1176, 44, 48, 4009, 293, 1176, 44, 48, 20271, 13, 50676], "temperature": 0.0, "avg_logprob": -0.12052425844915982, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.008307230658829212}, {"id": 89, "seek": 57692, "start": 583.16, "end": 588.16, "text": " That's how we get samples in and out. Not the most performant thing, but it gets the", "tokens": [50676, 663, 311, 577, 321, 483, 10938, 294, 293, 484, 13, 1726, 264, 881, 2042, 394, 551, 11, 457, 309, 2170, 264, 50926], "temperature": 0.0, "avg_logprob": -0.12052425844915982, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.008307230658829212}, {"id": 90, "seek": 57692, "start": 588.16, "end": 592.64, "text": " job done. So you can see these first couple blocks are the ZMQ ones and then the rest", "tokens": [50926, 1691, 1096, 13, 407, 291, 393, 536, 613, 700, 1916, 8474, 366, 264, 1176, 44, 48, 2306, 293, 550, 264, 1472, 51150], "temperature": 0.0, "avg_logprob": -0.12052425844915982, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.008307230658829212}, {"id": 91, "seek": 57692, "start": 592.64, "end": 598.1999999999999, "text": " represents the flow graph. So we have a Python flow graph that implements an FM receiver", "tokens": [51150, 8855, 264, 3095, 4295, 13, 407, 321, 362, 257, 15329, 3095, 4295, 300, 704, 17988, 364, 29614, 20086, 51428], "temperature": 0.0, "avg_logprob": -0.12052425844915982, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.008307230658829212}, {"id": 92, "seek": 57692, "start": 598.1999999999999, "end": 605.1999999999999, "text": " in this case and that was the plug-in that I ran earlier. So the kind of the motivation", "tokens": [51428, 294, 341, 1389, 293, 300, 390, 264, 5452, 12, 259, 300, 286, 5872, 3071, 13, 407, 264, 733, 295, 264, 12335, 51778], "temperature": 0.0, "avg_logprob": -0.12052425844915982, "compression_ratio": 1.6718146718146718, "no_speech_prob": 0.008307230658829212}, {"id": 93, "seek": 60520, "start": 605.5600000000001, "end": 612.5600000000001, "text": " here is if you are an author of an out of tree module for Gini radio, you probably already", "tokens": [50382, 510, 307, 498, 291, 366, 364, 3793, 295, 364, 484, 295, 4230, 10088, 337, 460, 3812, 6477, 11, 291, 1391, 1217, 50732], "temperature": 0.0, "avg_logprob": -0.2012310905018072, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.013622837141156197}, {"id": 94, "seek": 60520, "start": 612.6, "end": 618.96, "text": " shared the code somewhere like GitHub and created some examples, some example flow graphs,", "tokens": [50734, 5507, 264, 3089, 4079, 411, 23331, 293, 2942, 512, 5110, 11, 512, 1365, 3095, 24877, 11, 51052], "temperature": 0.0, "avg_logprob": -0.2012310905018072, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.013622837141156197}, {"id": 95, "seek": 60520, "start": 618.96, "end": 625.46, "text": " but the next step would be making it more accessible and easy for folks to find and play", "tokens": [51052, 457, 264, 958, 1823, 576, 312, 1455, 309, 544, 9515, 293, 1858, 337, 4024, 281, 915, 293, 862, 51377], "temperature": 0.0, "avg_logprob": -0.2012310905018072, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.013622837141156197}, {"id": 96, "seek": 60520, "start": 625.46, "end": 632.46, "text": " with and I think this could be an option there by exposing it as a plug-in. Now, let", "tokens": [51377, 365, 293, 286, 519, 341, 727, 312, 364, 3614, 456, 538, 33178, 309, 382, 257, 5452, 12, 259, 13, 823, 11, 718, 51727], "temperature": 0.0, "avg_logprob": -0.2012310905018072, "compression_ratio": 1.5919282511210762, "no_speech_prob": 0.013622837141156197}, {"id": 97, "seek": 63246, "start": 633.46, "end": 640.46, "text": " me go back to the plug-ins. So I'll go ahead and run the SAT dump one. So I've got a recording", "tokens": [50414, 385, 352, 646, 281, 264, 5452, 12, 1292, 13, 407, 286, 603, 352, 2286, 293, 1190, 264, 31536, 11430, 472, 13, 407, 286, 600, 658, 257, 6613, 50764], "temperature": 0.0, "avg_logprob": -0.21150128841400145, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.001986789982765913}, {"id": 98, "seek": 63246, "start": 642.4200000000001, "end": 649.4200000000001, "text": " of NOAA APT right here contributed by Aang. So I can click that, I can browse around", "tokens": [50862, 295, 9146, 5265, 5372, 51, 558, 510, 18434, 538, 316, 656, 13, 407, 286, 393, 2052, 300, 11, 286, 393, 31442, 926, 51212], "temperature": 0.0, "avg_logprob": -0.21150128841400145, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.001986789982765913}, {"id": 99, "seek": 63246, "start": 650.46, "end": 657.46, "text": " the signal. I'll notice so it's actually offset, but I believe this is the APT signal. You", "tokens": [51264, 264, 6358, 13, 286, 603, 3449, 370, 309, 311, 767, 18687, 11, 457, 286, 1697, 341, 307, 264, 5372, 51, 6358, 13, 509, 51614], "temperature": 0.0, "avg_logprob": -0.21150128841400145, "compression_ratio": 1.4516129032258065, "no_speech_prob": 0.001986789982765913}, {"id": 100, "seek": 65746, "start": 657.82, "end": 662.34, "text": " could jump to different parts of the file there and then as far as running it through", "tokens": [50382, 727, 3012, 281, 819, 3166, 295, 264, 3991, 456, 293, 550, 382, 1400, 382, 2614, 309, 807, 50608], "temperature": 0.0, "avg_logprob": -0.13784069485134548, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.004827540367841721}, {"id": 101, "seek": 65746, "start": 662.34, "end": 669.34, "text": " SAT dump, I want to run the entire file because it needs a decent amount of samples. So I'm", "tokens": [50608, 31536, 11430, 11, 286, 528, 281, 1190, 264, 2302, 3991, 570, 309, 2203, 257, 8681, 2372, 295, 10938, 13, 407, 286, 478, 50958], "temperature": 0.0, "avg_logprob": -0.13784069485134548, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.004827540367841721}, {"id": 102, "seek": 65746, "start": 671.02, "end": 678.02, "text": " going to select the whole file and then under plug-ins, we've got the fresh new SAT dump", "tokens": [51042, 516, 281, 3048, 264, 1379, 3991, 293, 550, 833, 5452, 12, 1292, 11, 321, 600, 658, 264, 4451, 777, 31536, 11430, 51392], "temperature": 0.0, "avg_logprob": -0.13784069485134548, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.004827540367841721}, {"id": 103, "seek": 65746, "start": 678.02, "end": 684.1, "text": " plug-in already preloaded with the pipeline for APT, but you can put whatever pipeline", "tokens": [51392, 5452, 12, 259, 1217, 659, 2907, 292, 365, 264, 15517, 337, 5372, 51, 11, 457, 291, 393, 829, 2035, 15517, 51696], "temperature": 0.0, "avg_logprob": -0.13784069485134548, "compression_ratio": 1.5972850678733033, "no_speech_prob": 0.004827540367841721}, {"id": 104, "seek": 68410, "start": 684.14, "end": 691.14, "text": " you want. So right now it ran SAT dump under the hood. So here's one of the images that", "tokens": [50366, 291, 528, 13, 407, 558, 586, 309, 5872, 31536, 11430, 833, 264, 13376, 13, 407, 510, 311, 472, 295, 264, 5267, 300, 50716], "temperature": 0.0, "avg_logprob": -0.12240342890962641, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.008840598165988922}, {"id": 105, "seek": 68410, "start": 693.94, "end": 699.26, "text": " comes out. I think IQ Engine still has some work to do as far as if you have a bunch of", "tokens": [50856, 1487, 484, 13, 286, 519, 28921, 7659, 920, 575, 512, 589, 281, 360, 382, 1400, 382, 498, 291, 362, 257, 3840, 295, 51122], "temperature": 0.0, "avg_logprob": -0.12240342890962641, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.008840598165988922}, {"id": 106, "seek": 68410, "start": 699.26, "end": 703.5400000000001, "text": " different outputs, how do you present them all to the user? There's a lot of web design", "tokens": [51122, 819, 23930, 11, 577, 360, 291, 1974, 552, 439, 281, 264, 4195, 30, 821, 311, 257, 688, 295, 3670, 1715, 51336], "temperature": 0.0, "avg_logprob": -0.12240342890962641, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.008840598165988922}, {"id": 107, "seek": 68410, "start": 703.5400000000001, "end": 710.5400000000001, "text": " that can go on there. So either it pops open something or it saves a file and it supports", "tokens": [51336, 300, 393, 352, 322, 456, 13, 407, 2139, 309, 16795, 1269, 746, 420, 309, 19155, 257, 3991, 293, 309, 9346, 51686], "temperature": 0.0, "avg_logprob": -0.12240342890962641, "compression_ratio": 1.5550660792951543, "no_speech_prob": 0.008840598165988922}, {"id": 108, "seek": 71054, "start": 711.18, "end": 718.18, "text": " all the different MIME types. If you're familiar with web, it sort of just uses MIME type and", "tokens": [50396, 439, 264, 819, 376, 6324, 36, 3467, 13, 759, 291, 434, 4963, 365, 3670, 11, 309, 1333, 295, 445, 4960, 376, 6324, 36, 2010, 293, 50746], "temperature": 0.0, "avg_logprob": -0.2548399324770327, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.0011331323767080903}, {"id": 109, "seek": 71054, "start": 718.5, "end": 724.5, "text": " then we added some custom MIME types for IQ, like the different data types for SIGMF.", "tokens": [50762, 550, 321, 3869, 512, 2375, 376, 6324, 36, 3467, 337, 28921, 11, 411, 264, 819, 1412, 3467, 337, 318, 10489, 44, 37, 13, 51062], "temperature": 0.0, "avg_logprob": -0.2548399324770327, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.0011331323767080903}, {"id": 110, "seek": 71054, "start": 724.5, "end": 731.5, "text": " As far as other plug-ins, I think, yeah, pretty much, we have a detector as well. So let", "tokens": [51062, 1018, 1400, 382, 661, 5452, 12, 1292, 11, 286, 519, 11, 1338, 11, 1238, 709, 11, 321, 362, 257, 25712, 382, 731, 13, 407, 718, 51412], "temperature": 0.0, "avg_logprob": -0.2548399324770327, "compression_ratio": 1.4972067039106145, "no_speech_prob": 0.0011331323767080903}, {"id": 111, "seek": 73150, "start": 731.82, "end": 738.82, "text": " me go to a recording that I give my students when we study signal detection and classification.", "tokens": [50380, 385, 352, 281, 257, 6613, 300, 286, 976, 452, 1731, 562, 321, 2979, 6358, 17784, 293, 21538, 13, 50730], "temperature": 0.0, "avg_logprob": -0.20722437638502855, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.02295704372227192}, {"id": 112, "seek": 73150, "start": 741.46, "end": 746.06, "text": " This is kind of like a toy example meant for testing a detector where you have a few different", "tokens": [50862, 639, 307, 733, 295, 411, 257, 12058, 1365, 4140, 337, 4997, 257, 25712, 689, 291, 362, 257, 1326, 819, 51092], "temperature": 0.0, "avg_logprob": -0.20722437638502855, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.02295704372227192}, {"id": 113, "seek": 73150, "start": 746.06, "end": 753.06, "text": " signals here. IQ Engine's not about implementing RFML, it's about sharing it and making it", "tokens": [51092, 12354, 510, 13, 28921, 7659, 311, 406, 466, 18114, 26204, 12683, 11, 309, 311, 466, 5414, 309, 293, 1455, 309, 51442], "temperature": 0.0, "avg_logprob": -0.20722437638502855, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.02295704372227192}, {"id": 114, "seek": 75306, "start": 753.18, "end": 760.18, "text": " more accessible. So we made a very simple detector just to have an example. It's written", "tokens": [50370, 544, 9515, 13, 407, 321, 1027, 257, 588, 2199, 25712, 445, 281, 362, 364, 1365, 13, 467, 311, 3720, 50720], "temperature": 0.0, "avg_logprob": -0.224046833374921, "compression_ratio": 1.5085714285714287, "no_speech_prob": 0.04332687705755234}, {"id": 115, "seek": 75306, "start": 762.7399999999999, "end": 769.7399999999999, "text": " in Python, you're welcome to check it out in the source. It's called Simple Detector.", "tokens": [50848, 294, 15329, 11, 291, 434, 2928, 281, 1520, 309, 484, 294, 264, 4009, 13, 467, 311, 1219, 21532, 4237, 20814, 13, 51198], "temperature": 0.0, "avg_logprob": -0.224046833374921, "compression_ratio": 1.5085714285714287, "no_speech_prob": 0.04332687705755234}, {"id": 116, "seek": 75306, "start": 771.3399999999999, "end": 778.3399999999999, "text": " We also have Marco's detector, he was someone else who was working on it. Simple Detector", "tokens": [51278, 492, 611, 362, 26535, 311, 25712, 11, 415, 390, 1580, 1646, 567, 390, 1364, 322, 309, 13, 21532, 4237, 20814, 51628], "temperature": 0.0, "avg_logprob": -0.224046833374921, "compression_ratio": 1.5085714285714287, "no_speech_prob": 0.04332687705755234}, {"id": 117, "seek": 77834, "start": 778.34, "end": 783.14, "text": " was pretty quick for that number of samples and it did a decent job. There's one extra", "tokens": [50364, 390, 1238, 1702, 337, 300, 1230, 295, 10938, 293, 309, 630, 257, 8681, 1691, 13, 821, 311, 472, 2857, 50604], "temperature": 0.0, "avg_logprob": -0.1550318120600103, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.02260277420282364}, {"id": 118, "seek": 77834, "start": 783.14, "end": 790.14, "text": " little detected emission there. Now the results are in the form of SIGMF annotations which", "tokens": [50604, 707, 21896, 29513, 456, 13, 823, 264, 3542, 366, 294, 264, 1254, 295, 318, 10489, 44, 37, 25339, 763, 597, 50954], "temperature": 0.0, "avg_logprob": -0.1550318120600103, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.02260277420282364}, {"id": 119, "seek": 77834, "start": 790.3000000000001, "end": 796.82, "text": " are bounding boxes in time and frequency and that's how the results are shared from the", "tokens": [50962, 366, 5472, 278, 9002, 294, 565, 293, 7893, 293, 300, 311, 577, 264, 3542, 366, 5507, 490, 264, 51288], "temperature": 0.0, "avg_logprob": -0.1550318120600103, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.02260277420282364}, {"id": 120, "seek": 77834, "start": 796.82, "end": 801.9, "text": " plug-in. So if you wanted to download the raw metadata file, the SIGMF file, you can", "tokens": [51288, 5452, 12, 259, 13, 407, 498, 291, 1415, 281, 5484, 264, 8936, 26603, 3991, 11, 264, 318, 10489, 44, 37, 3991, 11, 291, 393, 51542], "temperature": 0.0, "avg_logprob": -0.1550318120600103, "compression_ratio": 1.5765765765765767, "no_speech_prob": 0.02260277420282364}, {"id": 121, "seek": 80190, "start": 801.9, "end": 808.9, "text": " go to the bottom here and here are the annotations that the plug-in created. So we sort of copied", "tokens": [50364, 352, 281, 264, 2767, 510, 293, 510, 366, 264, 25339, 763, 300, 264, 5452, 12, 259, 2942, 13, 407, 321, 1333, 295, 25365, 50714], "temperature": 0.0, "avg_logprob": -0.12291531080610296, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.09934091567993164}, {"id": 122, "seek": 80190, "start": 809.18, "end": 816.18, "text": " the SIGMF format for the return data type. And if you wanted to perform classification", "tokens": [50728, 264, 318, 10489, 44, 37, 7877, 337, 264, 2736, 1412, 2010, 13, 400, 498, 291, 1415, 281, 2042, 21538, 51078], "temperature": 0.0, "avg_logprob": -0.12291531080610296, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.09934091567993164}, {"id": 123, "seek": 80190, "start": 816.9, "end": 823.9, "text": " you would simply fill out the label and they would show up. Within IQ Engine you can also", "tokens": [51114, 291, 576, 2935, 2836, 484, 264, 7645, 293, 436, 576, 855, 493, 13, 15996, 28921, 7659, 291, 393, 611, 51464], "temperature": 0.0, "avg_logprob": -0.12291531080610296, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.09934091567993164}, {"id": 124, "seek": 80190, "start": 823.9, "end": 829.06, "text": " edit the annotations and edit the labels. So if you wanted to manually tweak stuff like", "tokens": [51464, 8129, 264, 25339, 763, 293, 8129, 264, 16949, 13, 407, 498, 291, 1415, 281, 16945, 29879, 1507, 411, 51722], "temperature": 0.0, "avg_logprob": -0.12291531080610296, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.09934091567993164}, {"id": 125, "seek": 82906, "start": 829.06, "end": 835.0999999999999, "text": " you were making an RFML data set, sort of like a golden meta file, you could do that", "tokens": [50364, 291, 645, 1455, 364, 26204, 12683, 1412, 992, 11, 1333, 295, 411, 257, 9729, 19616, 3991, 11, 291, 727, 360, 300, 50666], "temperature": 0.0, "avg_logprob": -0.1826545927259657, "compression_ratio": 1.5304347826086957, "no_speech_prob": 0.00970050785690546}, {"id": 126, "seek": 82906, "start": 835.0999999999999, "end": 842.0999999999999, "text": " here. What I find most useful is simply to have a quick glance at how well something", "tokens": [50666, 510, 13, 708, 286, 915, 881, 4420, 307, 2935, 281, 362, 257, 1702, 21094, 412, 577, 731, 746, 51016], "temperature": 0.0, "avg_logprob": -0.1826545927259657, "compression_ratio": 1.5304347826086957, "no_speech_prob": 0.00970050785690546}, {"id": 127, "seek": 82906, "start": 842.2199999999999, "end": 849.2199999999999, "text": " worked. If you had tons of files to run through you wouldn't want to do all this clicking,", "tokens": [51022, 2732, 13, 759, 291, 632, 9131, 295, 7098, 281, 1190, 807, 291, 2759, 380, 528, 281, 360, 439, 341, 9697, 11, 51372], "temperature": 0.0, "avg_logprob": -0.1826545927259657, "compression_ratio": 1.5304347826086957, "no_speech_prob": 0.00970050785690546}, {"id": 128, "seek": 82906, "start": 849.5799999999999, "end": 854.3, "text": " you would just make a script and you could certainly run the plug-ins from a Python script.", "tokens": [51390, 291, 576, 445, 652, 257, 5755, 293, 291, 727, 3297, 1190, 264, 5452, 12, 1292, 490, 257, 15329, 5755, 13, 51626], "temperature": 0.0, "avg_logprob": -0.1826545927259657, "compression_ratio": 1.5304347826086957, "no_speech_prob": 0.00970050785690546}, {"id": 129, "seek": 85430, "start": 854.3399999999999, "end": 861.3399999999999, "text": " It would just need to call the REST API. Back to the slides. Alright, so I want to take", "tokens": [50366, 467, 576, 445, 643, 281, 818, 264, 497, 14497, 9362, 13, 5833, 281, 264, 9788, 13, 2798, 11, 370, 286, 528, 281, 747, 50716], "temperature": 0.0, "avg_logprob": -0.17993279720874542, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.004606191534548998}, {"id": 130, "seek": 85430, "start": 861.9, "end": 868.9, "text": " just a really quick tangent to mention, remind people about what Gini Radio provides and then", "tokens": [50744, 445, 257, 534, 1702, 27747, 281, 2152, 11, 4160, 561, 466, 437, 460, 3812, 17296, 6417, 293, 550, 51094], "temperature": 0.0, "avg_logprob": -0.17993279720874542, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.004606191534548998}, {"id": 131, "seek": 85430, "start": 870.02, "end": 877.02, "text": " how it relates to this plan that the project has. So Gini Radio, it's a way to implement", "tokens": [51150, 577, 309, 16155, 281, 341, 1393, 300, 264, 1716, 575, 13, 407, 460, 3812, 17296, 11, 309, 311, 257, 636, 281, 4445, 51500], "temperature": 0.0, "avg_logprob": -0.17993279720874542, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.004606191534548998}, {"id": 132, "seek": 85430, "start": 877.78, "end": 884.28, "text": " your RF, DSP and C++ or Python. It gives us a standard framework for doing that implementation", "tokens": [51538, 428, 26204, 11, 15816, 47, 293, 383, 25472, 420, 15329, 13, 467, 2709, 505, 257, 3832, 8388, 337, 884, 300, 11420, 51863], "temperature": 0.0, "avg_logprob": -0.17993279720874542, "compression_ratio": 1.5271966527196652, "no_speech_prob": 0.004606191534548998}, {"id": 133, "seek": 88428, "start": 884.64, "end": 890.72, "text": " and it's easy to get annoyed at the boilerplate and how to install everything. But in the", "tokens": [50382, 293, 309, 311, 1858, 281, 483, 25921, 412, 264, 39228, 37008, 293, 577, 281, 3625, 1203, 13, 583, 294, 264, 50686], "temperature": 0.0, "avg_logprob": -0.23545138041178384, "compression_ratio": 1.5682819383259912, "no_speech_prob": 0.0018366405274719}, {"id": 134, "seek": 88428, "start": 890.72, "end": 896.16, "text": " end if you use that framework it means that other people who are familiar with Gini Radio", "tokens": [50686, 917, 498, 291, 764, 300, 8388, 309, 1355, 300, 661, 561, 567, 366, 4963, 365, 460, 3812, 17296, 50958], "temperature": 0.0, "avg_logprob": -0.23545138041178384, "compression_ratio": 1.5682819383259912, "no_speech_prob": 0.0018366405274719}, {"id": 135, "seek": 88428, "start": 896.16, "end": 902.3199999999999, "text": " can then install your Aditree module. They sort of know the standard usage of your blocks,", "tokens": [50958, 393, 550, 3625, 428, 1999, 270, 701, 10088, 13, 814, 1333, 295, 458, 264, 3832, 14924, 295, 428, 8474, 11, 51266], "temperature": 0.0, "avg_logprob": -0.23545138041178384, "compression_ratio": 1.5682819383259912, "no_speech_prob": 0.0018366405274719}, {"id": 136, "seek": 88428, "start": 902.3199999999999, "end": 907.16, "text": " where to look for the example flow graphs, how to connect your application with their", "tokens": [51266, 689, 281, 574, 337, 264, 1365, 3095, 24877, 11, 577, 281, 1745, 428, 3861, 365, 641, 51508], "temperature": 0.0, "avg_logprob": -0.23545138041178384, "compression_ratio": 1.5682819383259912, "no_speech_prob": 0.0018366405274719}, {"id": 137, "seek": 90716, "start": 907.52, "end": 914.52, "text": " SDR sitting on their desk. And that's an enormous value, that's in my opinion one of the main", "tokens": [50382, 318, 9301, 3798, 322, 641, 10026, 13, 400, 300, 311, 364, 11322, 2158, 11, 300, 311, 294, 452, 4800, 472, 295, 264, 2135, 50732], "temperature": 0.0, "avg_logprob": -0.25472537838682835, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.2332792729139328}, {"id": 138, "seek": 90716, "start": 914.52, "end": 921.62, "text": " values of Gini Radio. And then the GUIs are nice as well, it's not always easy to program", "tokens": [50732, 4190, 295, 460, 3812, 17296, 13, 400, 550, 264, 17917, 6802, 366, 1481, 382, 731, 11, 309, 311, 406, 1009, 1858, 281, 1461, 51087], "temperature": 0.0, "avg_logprob": -0.25472537838682835, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.2332792729139328}, {"id": 139, "seek": 90716, "start": 921.62, "end": 928.24, "text": " GUIs. So if you're curious about learning about different Aditree modules, C-Gran.org", "tokens": [51087, 17917, 6802, 13, 407, 498, 291, 434, 6369, 466, 2539, 466, 819, 1999, 270, 701, 16679, 11, 383, 12, 38, 4257, 13, 4646, 51418], "temperature": 0.0, "avg_logprob": -0.25472537838682835, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.2332792729139328}, {"id": 140, "seek": 90716, "start": 928.24, "end": 934.6, "text": " is where we point people. And I mention this because C-Gran represents a centralized location", "tokens": [51418, 307, 689, 321, 935, 561, 13, 400, 286, 2152, 341, 570, 383, 12, 38, 4257, 8855, 257, 32395, 4914, 51736], "temperature": 0.0, "avg_logprob": -0.25472537838682835, "compression_ratio": 1.5381355932203389, "no_speech_prob": 0.2332792729139328}, {"id": 141, "seek": 93460, "start": 934.64, "end": 941.64, "text": " for Gini Radio applications and libraries, what we call out of tree modules. But kind", "tokens": [50366, 337, 460, 3812, 17296, 5821, 293, 15148, 11, 437, 321, 818, 484, 295, 4230, 16679, 13, 583, 733, 50716], "temperature": 0.0, "avg_logprob": -0.18325301422469917, "compression_ratio": 1.5646551724137931, "no_speech_prob": 0.004260173998773098}, {"id": 142, "seek": 93460, "start": 943.2, "end": 948.44, "text": " of zooming out one more layer going beyond just Gini Radio is what I'm going to talk", "tokens": [50794, 295, 48226, 484, 472, 544, 4583, 516, 4399, 445, 460, 3812, 17296, 307, 437, 286, 478, 516, 281, 751, 51056], "temperature": 0.0, "avg_logprob": -0.18325301422469917, "compression_ratio": 1.5646551724137931, "no_speech_prob": 0.004260173998773098}, {"id": 143, "seek": 93460, "start": 948.44, "end": 955.44, "text": " about here in a sec. So let's say that you're a developer of open source software that involves", "tokens": [51056, 466, 510, 294, 257, 907, 13, 407, 718, 311, 584, 300, 291, 434, 257, 10754, 295, 1269, 4009, 4722, 300, 11626, 51406], "temperature": 0.0, "avg_logprob": -0.18325301422469917, "compression_ratio": 1.5646551724137931, "no_speech_prob": 0.004260173998773098}, {"id": 144, "seek": 93460, "start": 956.24, "end": 963.24, "text": " RF processing in some way, like you wrote SAT dump and you're doing satellite signal processing.", "tokens": [51446, 26204, 9007, 294, 512, 636, 11, 411, 291, 4114, 31536, 11430, 293, 291, 434, 884, 16016, 6358, 9007, 13, 51796], "temperature": 0.0, "avg_logprob": -0.18325301422469917, "compression_ratio": 1.5646551724137931, "no_speech_prob": 0.004260173998773098}, {"id": 145, "seek": 96324, "start": 963.52, "end": 967.84, "text": " You build something, you want to share it, you want to keep it easy to demonstrate and", "tokens": [50378, 509, 1322, 746, 11, 291, 528, 281, 2073, 309, 11, 291, 528, 281, 1066, 309, 1858, 281, 11698, 293, 50594], "temperature": 0.0, "avg_logprob": -0.17135657920493735, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.001365792122669518}, {"id": 146, "seek": 96324, "start": 967.84, "end": 973.6, "text": " show off to people, easy to use. Those are sort of the main steps you might take. Now", "tokens": [50594, 855, 766, 281, 561, 11, 1858, 281, 764, 13, 3950, 366, 1333, 295, 264, 2135, 4439, 291, 1062, 747, 13, 823, 50882], "temperature": 0.0, "avg_logprob": -0.17135657920493735, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.001365792122669518}, {"id": 147, "seek": 96324, "start": 973.6, "end": 980.6, "text": " on the other side of things, you have users out there, whoever they are, individual students,", "tokens": [50882, 322, 264, 661, 1252, 295, 721, 11, 291, 362, 5022, 484, 456, 11, 11387, 436, 366, 11, 2609, 1731, 11, 51232], "temperature": 0.0, "avg_logprob": -0.17135657920493735, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.001365792122669518}, {"id": 148, "seek": 96324, "start": 980.88, "end": 985.52, "text": " organizations, who first they need to discover that this software exists. That's like the", "tokens": [51246, 6150, 11, 567, 700, 436, 643, 281, 4411, 300, 341, 4722, 8198, 13, 663, 311, 411, 264, 51478], "temperature": 0.0, "avg_logprob": -0.17135657920493735, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.001365792122669518}, {"id": 149, "seek": 96324, "start": 985.52, "end": 991.12, "text": " very first step. And then how do you install it, how do you run it properly, how can I", "tokens": [51478, 588, 700, 1823, 13, 400, 550, 577, 360, 291, 3625, 309, 11, 577, 360, 291, 1190, 309, 6108, 11, 577, 393, 286, 51758], "temperature": 0.0, "avg_logprob": -0.17135657920493735, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.001365792122669518}, {"id": 150, "seek": 99112, "start": 991.2, "end": 998.2, "text": " evaluate how well it's working and use it with my SDR or my recordings. So kind of a", "tokens": [50368, 13059, 577, 731, 309, 311, 1364, 293, 764, 309, 365, 452, 318, 9301, 420, 452, 25162, 13, 407, 733, 295, 257, 50718], "temperature": 0.0, "avg_logprob": -0.19272314983865488, "compression_ratio": 1.5844748858447488, "no_speech_prob": 0.0029335871804505587}, {"id": 151, "seek": 99112, "start": 998.5600000000001, "end": 1004.24, "text": " duality here. On the developer side, you might post your code to GitHub, you might share", "tokens": [50736, 11848, 507, 510, 13, 1282, 264, 10754, 1252, 11, 291, 1062, 2183, 428, 3089, 281, 23331, 11, 291, 1062, 2073, 51020], "temperature": 0.0, "avg_logprob": -0.19272314983865488, "compression_ratio": 1.5844748858447488, "no_speech_prob": 0.0029335871804505587}, {"id": 152, "seek": 99112, "start": 1004.24, "end": 1011.24, "text": " it as part of a Faw STEM talk. That's kind of like the current method that we use. On", "tokens": [51020, 309, 382, 644, 295, 257, 479, 1607, 25043, 751, 13, 663, 311, 733, 295, 411, 264, 2190, 3170, 300, 321, 764, 13, 1282, 51370], "temperature": 0.0, "avg_logprob": -0.19272314983865488, "compression_ratio": 1.5844748858447488, "no_speech_prob": 0.0029335871804505587}, {"id": 153, "seek": 99112, "start": 1012.2, "end": 1016.64, "text": " the user side of things, you might Google the topic you're interested in, like specific", "tokens": [51418, 264, 4195, 1252, 295, 721, 11, 291, 1062, 3329, 264, 4829, 291, 434, 3102, 294, 11, 411, 2685, 51640], "temperature": 0.0, "avg_logprob": -0.19272314983865488, "compression_ratio": 1.5844748858447488, "no_speech_prob": 0.0029335871804505587}, {"id": 154, "seek": 101664, "start": 1016.68, "end": 1022.68, "text": " satellite, Wi-Fi, whatever. You'll probably come across what's out there. But it's not", "tokens": [50366, 16016, 11, 14035, 12, 13229, 11, 2035, 13, 509, 603, 1391, 808, 2108, 437, 311, 484, 456, 13, 583, 309, 311, 406, 50666], "temperature": 0.0, "avg_logprob": -0.21241563016718085, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.003481790656223893}, {"id": 155, "seek": 101664, "start": 1022.68, "end": 1029.68, "text": " the best way to do it, right? Just by Googling. So installation can be an enormous barrier.", "tokens": [50666, 264, 1151, 636, 281, 360, 309, 11, 558, 30, 1449, 538, 45005, 1688, 13, 407, 13260, 393, 312, 364, 11322, 13357, 13, 51016], "temperature": 0.0, "avg_logprob": -0.21241563016718085, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.003481790656223893}, {"id": 156, "seek": 101664, "start": 1030.76, "end": 1037.76, "text": " When I teach CS students, it depends who you are, but some students and some folks are", "tokens": [51070, 1133, 286, 2924, 9460, 1731, 11, 309, 5946, 567, 291, 366, 11, 457, 512, 1731, 293, 512, 4024, 366, 51420], "temperature": 0.0, "avg_logprob": -0.21241563016718085, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.003481790656223893}, {"id": 157, "seek": 101664, "start": 1038.4, "end": 1042.76, "text": " better at getting this software installed than others. Obviously having a lot of Linux", "tokens": [51452, 1101, 412, 1242, 341, 4722, 8899, 813, 2357, 13, 7580, 1419, 257, 688, 295, 18734, 51670], "temperature": 0.0, "avg_logprob": -0.21241563016718085, "compression_ratio": 1.4666666666666666, "no_speech_prob": 0.003481790656223893}, {"id": 158, "seek": 104276, "start": 1042.8, "end": 1048.64, "text": " experience helps folks who are new to Linux but want to dive into signal processing, they", "tokens": [50366, 1752, 3665, 4024, 567, 366, 777, 281, 18734, 457, 528, 281, 9192, 666, 6358, 9007, 11, 436, 50658], "temperature": 0.0, "avg_logprob": -0.19249754685621995, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008307975716888905}, {"id": 159, "seek": 104276, "start": 1048.64, "end": 1055.64, "text": " can struggle here and there. So it can definitely be a barrier. Now how do you actually run", "tokens": [50658, 393, 7799, 510, 293, 456, 13, 407, 309, 393, 2138, 312, 257, 13357, 13, 823, 577, 360, 291, 767, 1190, 51008], "temperature": 0.0, "avg_logprob": -0.19249754685621995, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008307975716888905}, {"id": 160, "seek": 104276, "start": 1055.64, "end": 1061.56, "text": " it? If it's a new radio flow graph, you probably know how, but not everything's easy to use.", "tokens": [51008, 309, 30, 759, 309, 311, 257, 777, 6477, 3095, 4295, 11, 291, 1391, 458, 577, 11, 457, 406, 1203, 311, 1858, 281, 764, 13, 51304], "temperature": 0.0, "avg_logprob": -0.19249754685621995, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008307975716888905}, {"id": 161, "seek": 104276, "start": 1061.56, "end": 1067.32, "text": " There's RF libraries out there that are not clear how exactly do you use it, but you know", "tokens": [51304, 821, 311, 26204, 15148, 484, 456, 300, 366, 406, 1850, 577, 2293, 360, 291, 764, 309, 11, 457, 291, 458, 51592], "temperature": 0.0, "avg_logprob": -0.19249754685621995, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.008307975716888905}, {"id": 162, "seek": 106732, "start": 1067.32, "end": 1072.96, "text": " it's powerful. And then lastly, evaluating the software. Maybe you're going to use it", "tokens": [50364, 309, 311, 4005, 13, 400, 550, 16386, 11, 27479, 264, 4722, 13, 2704, 291, 434, 516, 281, 764, 309, 50646], "temperature": 0.0, "avg_logprob": -0.1409668814052235, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.020313017070293427}, {"id": 163, "seek": 106732, "start": 1072.96, "end": 1079.96, "text": " as a dependency or use it as part of a project. So this idea to sort of evolve IQ engines,", "tokens": [50646, 382, 257, 33621, 420, 764, 309, 382, 644, 295, 257, 1716, 13, 407, 341, 1558, 281, 1333, 295, 16693, 28921, 12982, 11, 50996], "temperature": 0.0, "avg_logprob": -0.1409668814052235, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.020313017070293427}, {"id": 164, "seek": 106732, "start": 1082.1599999999999, "end": 1088.04, "text": " so instead of just being a way to share and evaluate RF recordings, it can also be used", "tokens": [51106, 370, 2602, 295, 445, 885, 257, 636, 281, 2073, 293, 13059, 26204, 25162, 11, 309, 393, 611, 312, 1143, 51400], "temperature": 0.0, "avg_logprob": -0.1409668814052235, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.020313017070293427}, {"id": 165, "seek": 106732, "start": 1088.04, "end": 1095.04, "text": " for just RF open source software in general. Sort of like a central hub, community driven", "tokens": [51400, 337, 445, 26204, 1269, 4009, 4722, 294, 2674, 13, 26149, 295, 411, 257, 5777, 11838, 11, 1768, 9555, 51750], "temperature": 0.0, "avg_logprob": -0.1409668814052235, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.020313017070293427}, {"id": 166, "seek": 109504, "start": 1095.56, "end": 1102.12, "text": " for devs to share stuff for users to find and discover software. And then by exposing", "tokens": [50390, 337, 1905, 82, 281, 2073, 1507, 337, 5022, 281, 915, 293, 4411, 4722, 13, 400, 550, 538, 33178, 50718], "temperature": 0.0, "avg_logprob": -0.13880940675735473, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.002509908052161336}, {"id": 167, "seek": 109504, "start": 1102.12, "end": 1108.08, "text": " the software as a plugin, they can try it out on recordings that are already on the", "tokens": [50718, 264, 4722, 382, 257, 23407, 11, 436, 393, 853, 309, 484, 322, 25162, 300, 366, 1217, 322, 264, 51016], "temperature": 0.0, "avg_logprob": -0.13880940675735473, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.002509908052161336}, {"id": 168, "seek": 109504, "start": 1108.08, "end": 1113.72, "text": " site or their own. And then one side benefit is university isn't anyone else who wants", "tokens": [51016, 3621, 420, 641, 1065, 13, 400, 550, 472, 1252, 5121, 307, 5454, 1943, 380, 2878, 1646, 567, 2738, 51298], "temperature": 0.0, "avg_logprob": -0.13880940675735473, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.002509908052161336}, {"id": 169, "seek": 109504, "start": 1113.72, "end": 1120.32, "text": " to show off their expertise and creates open source software. They can use this central", "tokens": [51298, 281, 855, 766, 641, 11769, 293, 7829, 1269, 4009, 4722, 13, 814, 393, 764, 341, 5777, 51628], "temperature": 0.0, "avg_logprob": -0.13880940675735473, "compression_ratio": 1.6618357487922706, "no_speech_prob": 0.002509908052161336}, {"id": 170, "seek": 112032, "start": 1120.32, "end": 1127.32, "text": " hub as a way to do that. Now this is all in the browser primarily for accessibility", "tokens": [50364, 11838, 382, 257, 636, 281, 360, 300, 13, 823, 341, 307, 439, 294, 264, 11185, 10029, 337, 15002, 50714], "temperature": 0.0, "avg_logprob": -0.15885710161785746, "compression_ratio": 1.5482456140350878, "no_speech_prob": 0.0028881041798740625}, {"id": 171, "seek": 112032, "start": 1127.76, "end": 1131.72, "text": " sake. It's not the most performant way to do something like this, but it's extremely", "tokens": [50736, 9717, 13, 467, 311, 406, 264, 881, 2042, 394, 636, 281, 360, 746, 411, 341, 11, 457, 309, 311, 4664, 50934], "temperature": 0.0, "avg_logprob": -0.15885710161785746, "compression_ratio": 1.5482456140350878, "no_speech_prob": 0.0028881041798740625}, {"id": 172, "seek": 112032, "start": 1131.72, "end": 1138.72, "text": " convenient. Really, it removes a lot of barriers. So users would be able to play around with", "tokens": [50934, 10851, 13, 4083, 11, 309, 30445, 257, 688, 295, 13565, 13, 407, 5022, 576, 312, 1075, 281, 862, 926, 365, 51284], "temperature": 0.0, "avg_logprob": -0.15885710161785746, "compression_ratio": 1.5482456140350878, "no_speech_prob": 0.0028881041798740625}, {"id": 173, "seek": 112032, "start": 1139.84, "end": 1145.4399999999998, "text": " a certain function using a variety of recordings. And it's more than just using recordings.", "tokens": [51340, 257, 1629, 2445, 1228, 257, 5673, 295, 25162, 13, 400, 309, 311, 544, 813, 445, 1228, 25162, 13, 51620], "temperature": 0.0, "avg_logprob": -0.15885710161785746, "compression_ratio": 1.5482456140350878, "no_speech_prob": 0.0028881041798740625}, {"id": 174, "seek": 114544, "start": 1145.44, "end": 1150.8400000000001, "text": " They can try in the future, maybe there's a way to lower the SNR, like add noise and", "tokens": [50364, 814, 393, 853, 294, 264, 2027, 11, 1310, 456, 311, 257, 636, 281, 3126, 264, 13955, 49, 11, 411, 909, 5658, 293, 50634], "temperature": 0.0, "avg_logprob": -0.16851496105351724, "compression_ratio": 1.6159420289855073, "no_speech_prob": 0.31704404950141907}, {"id": 175, "seek": 114544, "start": 1150.8400000000001, "end": 1157.16, "text": " see if it still works or what not. Add a frequency shift, see if the RF function still works.", "tokens": [50634, 536, 498, 309, 920, 1985, 420, 437, 406, 13, 5349, 257, 7893, 5513, 11, 536, 498, 264, 26204, 2445, 920, 1985, 13, 50950], "temperature": 0.0, "avg_logprob": -0.16851496105351724, "compression_ratio": 1.6159420289855073, "no_speech_prob": 0.31704404950141907}, {"id": 176, "seek": 114544, "start": 1157.16, "end": 1161.2, "text": " And then on the author side of things, all you really would need to do is add this REST", "tokens": [50950, 400, 550, 322, 264, 3793, 1252, 295, 721, 11, 439, 291, 534, 576, 643, 281, 360, 307, 909, 341, 497, 14497, 51152], "temperature": 0.0, "avg_logprob": -0.16851496105351724, "compression_ratio": 1.6159420289855073, "no_speech_prob": 0.31704404950141907}, {"id": 177, "seek": 114544, "start": 1161.2, "end": 1168.2, "text": " based interface or at least make it easy to call with CLI and then retrieve the results.", "tokens": [51152, 2361, 9226, 420, 412, 1935, 652, 309, 1858, 281, 818, 365, 12855, 40, 293, 550, 30254, 264, 3542, 13, 51502], "temperature": 0.0, "avg_logprob": -0.16851496105351724, "compression_ratio": 1.6159420289855073, "no_speech_prob": 0.31704404950141907}, {"id": 178, "seek": 114544, "start": 1168.3600000000001, "end": 1175.3600000000001, "text": " So like Sat dump, I'm not using a REST interface. I'm just running the CLI in a way that's", "tokens": [51510, 407, 411, 5344, 11430, 11, 286, 478, 406, 1228, 257, 497, 14497, 9226, 13, 286, 478, 445, 2614, 264, 12855, 40, 294, 257, 636, 300, 311, 51860], "temperature": 0.0, "avg_logprob": -0.16851496105351724, "compression_ratio": 1.6159420289855073, "no_speech_prob": 0.31704404950141907}, {"id": 179, "seek": 117544, "start": 1175.44, "end": 1182.44, "text": " easy. Anyway, now one design decision that was made was to allow multiple plugin servers", "tokens": [50364, 1858, 13, 5684, 11, 586, 472, 1715, 3537, 300, 390, 1027, 390, 281, 2089, 3866, 23407, 15909, 50714], "temperature": 0.0, "avg_logprob": -0.23664729539738144, "compression_ratio": 1.5814977973568283, "no_speech_prob": 0.0009541878825984895}, {"id": 180, "seek": 117544, "start": 1182.72, "end": 1188.56, "text": " to connect to a single IQ Engine instance like at IQEngine.org. That way, like a university", "tokens": [50728, 281, 1745, 281, 257, 2167, 28921, 7659, 5197, 411, 412, 28921, 31254, 533, 13, 4646, 13, 663, 636, 11, 411, 257, 5454, 51020], "temperature": 0.0, "avg_logprob": -0.23664729539738144, "compression_ratio": 1.5814977973568283, "no_speech_prob": 0.0009541878825984895}, {"id": 181, "seek": 117544, "start": 1188.56, "end": 1194.68, "text": " could run their own plugin server, have total control over it, but they could share their", "tokens": [51020, 727, 1190, 641, 1065, 23407, 7154, 11, 362, 3217, 1969, 670, 309, 11, 457, 436, 727, 2073, 641, 51326], "temperature": 0.0, "avg_logprob": -0.23664729539738144, "compression_ratio": 1.5814977973568283, "no_speech_prob": 0.0009541878825984895}, {"id": 182, "seek": 117544, "start": 1194.68, "end": 1200.3600000000001, "text": " expertise, everything they want to show off. And this is really just a concept. So right", "tokens": [51326, 11769, 11, 1203, 436, 528, 281, 855, 766, 13, 400, 341, 307, 534, 445, 257, 3410, 13, 407, 558, 51610], "temperature": 0.0, "avg_logprob": -0.23664729539738144, "compression_ratio": 1.5814977973568283, "no_speech_prob": 0.0009541878825984895}, {"id": 183, "seek": 120036, "start": 1200.36, "end": 1207.6, "text": " now I showed you how IQ Engine lets you preview RF recordings and RF data sets. Well, I think", "tokens": [50364, 586, 286, 4712, 291, 577, 28921, 7659, 6653, 291, 14281, 26204, 25162, 293, 26204, 1412, 6352, 13, 1042, 11, 286, 519, 50726], "temperature": 0.0, "avg_logprob": -0.17606636456080846, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.056617096066474915}, {"id": 184, "seek": 120036, "start": 1207.6, "end": 1212.0, "text": " in the future with these building blocks that I showed through the plugin system and this", "tokens": [50726, 294, 264, 2027, 365, 613, 2390, 8474, 300, 286, 4712, 807, 264, 23407, 1185, 293, 341, 50946], "temperature": 0.0, "avg_logprob": -0.17606636456080846, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.056617096066474915}, {"id": 185, "seek": 120036, "start": 1212.0, "end": 1218.3999999999999, "text": " REST interface that we're designing, you could have a tool that would be used for previewing", "tokens": [50946, 497, 14497, 9226, 300, 321, 434, 14685, 11, 291, 727, 362, 257, 2290, 300, 576, 312, 1143, 337, 14281, 278, 51266], "temperature": 0.0, "avg_logprob": -0.17606636456080846, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.056617096066474915}, {"id": 186, "seek": 120036, "start": 1218.3999999999999, "end": 1225.3999999999999, "text": " what I'm calling Functions App Software, really anything that involves RF signal processing.", "tokens": [51266, 437, 286, 478, 5141, 11166, 3916, 3132, 27428, 11, 534, 1340, 300, 11626, 26204, 6358, 9007, 13, 51616], "temperature": 0.0, "avg_logprob": -0.17606636456080846, "compression_ratio": 1.550420168067227, "no_speech_prob": 0.056617096066474915}, {"id": 187, "seek": 122540, "start": 1225.4, "end": 1231.6000000000001, "text": " Now there are limitations, so a lot of RF apps can't simply be run on a recording. So", "tokens": [50364, 823, 456, 366, 15705, 11, 370, 257, 688, 295, 26204, 7733, 393, 380, 2935, 312, 1190, 322, 257, 6613, 13, 407, 50674], "temperature": 0.0, "avg_logprob": -0.19151356413557724, "compression_ratio": 1.4375, "no_speech_prob": 0.00781266763806343}, {"id": 188, "seek": 122540, "start": 1231.6000000000001, "end": 1238.6000000000001, "text": " SRS ran excellent LTE and 5G radio stack. Because of LTE and 5G's strict latency requirements,", "tokens": [50674, 20840, 50, 5872, 7103, 441, 13639, 293, 1025, 38, 6477, 8630, 13, 1436, 295, 441, 13639, 293, 1025, 38, 311, 10910, 27043, 7728, 11, 51024], "temperature": 0.0, "avg_logprob": -0.19151356413557724, "compression_ratio": 1.4375, "no_speech_prob": 0.00781266763806343}, {"id": 189, "seek": 122540, "start": 1241.64, "end": 1248.64, "text": " you can't easily just play it back. It's not straightforward, simply running it on a recording.", "tokens": [51176, 291, 393, 380, 3612, 445, 862, 309, 646, 13, 467, 311, 406, 15325, 11, 2935, 2614, 309, 322, 257, 6613, 13, 51526], "temperature": 0.0, "avg_logprob": -0.19151356413557724, "compression_ratio": 1.4375, "no_speech_prob": 0.00781266763806343}, {"id": 190, "seek": 124864, "start": 1248.8400000000001, "end": 1255.8400000000001, "text": " You sort of want to simulate that closed loop system. So not all RF functions and apps are", "tokens": [50374, 509, 1333, 295, 528, 281, 27817, 300, 5395, 6367, 1185, 13, 407, 406, 439, 26204, 6828, 293, 7733, 366, 50724], "temperature": 0.0, "avg_logprob": -0.247697507418119, "compression_ratio": 1.4270833333333333, "no_speech_prob": 0.031118208542466164}, {"id": 191, "seek": 124864, "start": 1257.5600000000002, "end": 1264.5600000000002, "text": " going to be shareable this way, but I think a vast majority of them are definitely GNU", "tokens": [50810, 516, 281, 312, 2073, 712, 341, 636, 11, 457, 286, 519, 257, 8369, 6286, 295, 552, 366, 2138, 46411, 52, 51160], "temperature": 0.0, "avg_logprob": -0.247697507418119, "compression_ratio": 1.4270833333333333, "no_speech_prob": 0.031118208542466164}, {"id": 192, "seek": 124864, "start": 1264.5600000000002, "end": 1271.5600000000002, "text": " radio apps and those kind of processing applications. The other thing that you wouldn't show off", "tokens": [51160, 6477, 7733, 293, 729, 733, 295, 9007, 5821, 13, 440, 661, 551, 300, 291, 2759, 380, 855, 766, 51510], "temperature": 0.0, "avg_logprob": -0.247697507418119, "compression_ratio": 1.4270833333333333, "no_speech_prob": 0.031118208542466164}, {"id": 193, "seek": 127156, "start": 1272.04, "end": 1279.04, "text": " is like an SDR interface, like a GUI, that wouldn't make any sense. Now if you're interested", "tokens": [50388, 307, 411, 364, 318, 9301, 9226, 11, 411, 257, 17917, 40, 11, 300, 2759, 380, 652, 604, 2020, 13, 823, 498, 291, 434, 3102, 50738], "temperature": 0.0, "avg_logprob": -0.1402267205594766, "compression_ratio": 1.5061728395061729, "no_speech_prob": 0.02062651887536049}, {"id": 194, "seek": 127156, "start": 1280.32, "end": 1286.0, "text": " in contributing, it's a community led project, so we can always use more web devs. It turns", "tokens": [50802, 294, 19270, 11, 309, 311, 257, 1768, 4684, 1716, 11, 370, 321, 393, 1009, 764, 544, 3670, 1905, 82, 13, 467, 4523, 51086], "temperature": 0.0, "avg_logprob": -0.1402267205594766, "compression_ratio": 1.5061728395061729, "no_speech_prob": 0.02062651887536049}, {"id": 195, "seek": 127156, "start": 1286.0, "end": 1293.0, "text": " out that the kind of folks in these RF circles tend to know C++, Python, but less so on the", "tokens": [51086, 484, 300, 264, 733, 295, 4024, 294, 613, 26204, 13040, 3928, 281, 458, 383, 25472, 11, 15329, 11, 457, 1570, 370, 322, 264, 51436], "temperature": 0.0, "avg_logprob": -0.1402267205594766, "compression_ratio": 1.5061728395061729, "no_speech_prob": 0.02062651887536049}, {"id": 196, "seek": 127156, "start": 1293.6, "end": 1300.6, "text": " website. And I know I've had to learn a lot of web development to get this project moving", "tokens": [51466, 3144, 13, 400, 286, 458, 286, 600, 632, 281, 1466, 257, 688, 295, 3670, 3250, 281, 483, 341, 1716, 2684, 51816], "temperature": 0.0, "avg_logprob": -0.1402267205594766, "compression_ratio": 1.5061728395061729, "no_speech_prob": 0.02062651887536049}, {"id": 197, "seek": 130060, "start": 1300.6, "end": 1306.6799999999998, "text": " more. So even if you're not a web developer, there's plenty of other ways to contribute.", "tokens": [50364, 544, 13, 407, 754, 498, 291, 434, 406, 257, 3670, 10754, 11, 456, 311, 7140, 295, 661, 2098, 281, 10586, 13, 50668], "temperature": 0.0, "avg_logprob": -0.20070836735867906, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.003705090843141079}, {"id": 198, "seek": 130060, "start": 1306.6799999999998, "end": 1310.52, "text": " We're always looking for more interesting RF recordings to share. If you have an entire", "tokens": [50668, 492, 434, 1009, 1237, 337, 544, 1880, 26204, 25162, 281, 2073, 13, 759, 291, 362, 364, 2302, 50860], "temperature": 0.0, "avg_logprob": -0.20070836735867906, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.003705090843141079}, {"id": 199, "seek": 130060, "start": 1310.52, "end": 1317.52, "text": " data set, we can add like a whole category here on the left. So we have Daniel Estevez's", "tokens": [50860, 1412, 992, 11, 321, 393, 909, 411, 257, 1379, 7719, 510, 322, 264, 1411, 13, 407, 321, 362, 8033, 16105, 10941, 311, 51210], "temperature": 0.0, "avg_logprob": -0.20070836735867906, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.003705090843141079}, {"id": 200, "seek": 130060, "start": 1317.52, "end": 1324.52, "text": " awesome satellite recordings as an example, where we can link off to your website. And", "tokens": [51210, 3476, 16016, 25162, 382, 364, 1365, 11, 689, 321, 393, 2113, 766, 281, 428, 3144, 13, 400, 51560], "temperature": 0.0, "avg_logprob": -0.20070836735867906, "compression_ratio": 1.5575221238938053, "no_speech_prob": 0.003705090843141079}, {"id": 201, "seek": 132452, "start": 1324.52, "end": 1331.04, "text": " so if you want to get involved in any way, there's a Discord link at the top of IQengine.org.", "tokens": [50364, 370, 498, 291, 528, 281, 483, 3288, 294, 604, 636, 11, 456, 311, 257, 32623, 2113, 412, 264, 1192, 295, 28921, 25609, 13, 4646, 13, 50690], "temperature": 0.0, "avg_logprob": -0.3440887309886791, "compression_ratio": 1.2808219178082192, "no_speech_prob": 0.015121756121516228}, {"id": 202, "seek": 132452, "start": 1331.04, "end": 1338.04, "text": " We have a little community that's slowly building. And with that, I will take questions.", "tokens": [50690, 492, 362, 257, 707, 1768, 300, 311, 5692, 2390, 13, 400, 365, 300, 11, 286, 486, 747, 1651, 13, 51040], "temperature": 0.0, "avg_logprob": -0.3440887309886791, "compression_ratio": 1.2808219178082192, "no_speech_prob": 0.015121756121516228}, {"id": 203, "seek": 132452, "start": 1341.96, "end": 1344.96, "text": " Yep?", "tokens": [51236, 7010, 30, 51386], "temperature": 0.0, "avg_logprob": -0.3440887309886791, "compression_ratio": 1.2808219178082192, "no_speech_prob": 0.015121756121516228}, {"id": 204, "seek": 134496, "start": 1344.96, "end": 1351.96, "text": " So yeah, the question was related to geolocation data, like running it as a plugin, I assume.", "tokens": [50364, 407, 1338, 11, 264, 1168, 390, 4077, 281, 1519, 401, 27943, 1412, 11, 411, 2614, 309, 382, 257, 23407, 11, 286, 6552, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3781930208206177, "compression_ratio": 1.325925925925926, "no_speech_prob": 0.003210943192243576}, {"id": 205, "seek": 134496, "start": 1362.4, "end": 1369.4, "text": " Yeah, yeah, while I explain that, so there actually is already a maps-based interface", "tokens": [51236, 865, 11, 1338, 11, 1339, 286, 2903, 300, 11, 370, 456, 767, 307, 1217, 257, 11317, 12, 6032, 9226, 51586], "temperature": 0.0, "avg_logprob": -0.3781930208206177, "compression_ratio": 1.325925925925926, "no_speech_prob": 0.003210943192243576}, {"id": 206, "seek": 136940, "start": 1370.0400000000002, "end": 1377.0400000000002, "text": " for, anyway, when we designed the API mentioned, we made sure to allow multiple channels of", "tokens": [50396, 337, 11, 4033, 11, 562, 321, 4761, 264, 9362, 2835, 11, 321, 1027, 988, 281, 2089, 3866, 9235, 295, 50746], "temperature": 0.0, "avg_logprob": -0.32599239349365233, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.030630631372332573}, {"id": 207, "seek": 136940, "start": 1379.0400000000002, "end": 1386.0400000000002, "text": " RF. So those channels could be time synchronized recordings from different sensors. That way", "tokens": [50846, 26204, 13, 407, 729, 9235, 727, 312, 565, 19331, 1602, 25162, 490, 819, 14840, 13, 663, 636, 51196], "temperature": 0.0, "avg_logprob": -0.32599239349365233, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.030630631372332573}, {"id": 208, "seek": 136940, "start": 1386.0400000000002, "end": 1391.5400000000002, "text": " at least you could run it from a, the backend perspective. And then, yeah, I guess we would", "tokens": [51196, 412, 1935, 291, 727, 1190, 309, 490, 257, 11, 264, 38087, 4585, 13, 400, 550, 11, 1338, 11, 286, 2041, 321, 576, 51471], "temperature": 0.0, "avg_logprob": -0.32599239349365233, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.030630631372332573}, {"id": 209, "seek": 136940, "start": 1391.5400000000002, "end": 1397.5400000000002, "text": " need to have a maps interface to the spectrogram page to make that fully happen. So yeah, I", "tokens": [51471, 643, 281, 362, 257, 11317, 9226, 281, 264, 6177, 340, 1342, 3028, 281, 652, 300, 4498, 1051, 13, 407, 1338, 11, 286, 51771], "temperature": 0.0, "avg_logprob": -0.32599239349365233, "compression_ratio": 1.5397489539748954, "no_speech_prob": 0.030630631372332573}, {"id": 210, "seek": 139754, "start": 1397.58, "end": 1404.58, "text": " would need to make that fully happen. But good, good, great suggestion. Yep?", "tokens": [50366, 576, 643, 281, 652, 300, 4498, 1051, 13, 583, 665, 11, 665, 11, 869, 16541, 13, 7010, 30, 50716], "temperature": 0.0, "avg_logprob": -0.2956666839256715, "compression_ratio": 1.555045871559633, "no_speech_prob": 0.008308869786560535}, {"id": 211, "seek": 139754, "start": 1404.58, "end": 1413.58, "text": " Well, so Guinea Radio has some Azure credit that they got, and that's what we've been", "tokens": [50716, 1042, 11, 370, 46793, 17296, 575, 512, 11969, 5397, 300, 436, 658, 11, 293, 300, 311, 437, 321, 600, 668, 51166], "temperature": 0.0, "avg_logprob": -0.2956666839256715, "compression_ratio": 1.555045871559633, "no_speech_prob": 0.008308869786560535}, {"id": 212, "seek": 139754, "start": 1413.62, "end": 1418.58, "text": " using for a lot of these recordings. So, and we can use that for other folks' recordings", "tokens": [51168, 1228, 337, 257, 688, 295, 613, 25162, 13, 407, 11, 293, 321, 393, 764, 300, 337, 661, 4024, 6, 25162, 51416], "temperature": 0.0, "avg_logprob": -0.2956666839256715, "compression_ratio": 1.555045871559633, "no_speech_prob": 0.008308869786560535}, {"id": 213, "seek": 139754, "start": 1418.58, "end": 1423.78, "text": " if they want to share it publicly. Yeah, you can reach out and we can transfer it over.", "tokens": [51416, 498, 436, 528, 281, 2073, 309, 14843, 13, 865, 11, 291, 393, 2524, 484, 293, 321, 393, 5003, 309, 670, 13, 51676], "temperature": 0.0, "avg_logprob": -0.2956666839256715, "compression_ratio": 1.555045871559633, "no_speech_prob": 0.008308869786560535}, {"id": 214, "seek": 142378, "start": 1423.78, "end": 1430.78, "text": " Yeah, I think it would fall. No, no, no, like I could like upload it for you. So the Guinea", "tokens": [50364, 865, 11, 286, 519, 309, 576, 2100, 13, 883, 11, 572, 11, 572, 11, 411, 286, 727, 411, 6580, 309, 337, 291, 13, 407, 264, 46793, 50714], "temperature": 0.0, "avg_logprob": -0.3267006751818535, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.2444278597831726}, {"id": 215, "seek": 142378, "start": 1430.78, "end": 1435.46, "text": " Radio has a blob storage account, so I could, I could give you a SAS token for you to upload", "tokens": [50714, 17296, 575, 257, 46115, 6725, 2696, 11, 370, 286, 727, 11, 286, 727, 976, 291, 257, 33441, 14862, 337, 291, 281, 6580, 50948], "temperature": 0.0, "avg_logprob": -0.3267006751818535, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.2444278597831726}, {"id": 216, "seek": 142378, "start": 1435.46, "end": 1442.46, "text": " it yourself or I could upload it for you. Yep, I think there was one more. Yes, there", "tokens": [50948, 309, 1803, 420, 286, 727, 6580, 309, 337, 291, 13, 7010, 11, 286, 519, 456, 390, 472, 544, 13, 1079, 11, 456, 51298], "temperature": 0.0, "avg_logprob": -0.3267006751818535, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.2444278597831726}, {"id": 217, "seek": 144246, "start": 1442.46, "end": 1449.46, "text": " is something that's a work in progress, but I guess I'll share it. So there's an upload", "tokens": [50364, 307, 746, 300, 311, 257, 589, 294, 4205, 11, 457, 286, 2041, 286, 603, 2073, 309, 13, 407, 456, 311, 364, 6580, 50714], "temperature": 0.0, "avg_logprob": -0.327495454232904, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0945054218173027}, {"id": 218, "seek": 144246, "start": 1454.7, "end": 1461.7, "text": " page. Oh yeah, yeah, so, so IQengine.org slash upload should allow you to upload a recording.", "tokens": [50976, 3028, 13, 876, 1338, 11, 1338, 11, 370, 11, 370, 28921, 25609, 13, 4646, 17330, 6580, 820, 2089, 291, 281, 6580, 257, 6613, 13, 51326], "temperature": 0.0, "avg_logprob": -0.327495454232904, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0945054218173027}, {"id": 219, "seek": 144246, "start": 1465.3, "end": 1471.3, "text": " The Wi-Fi's not great, but yeah, that would be the first place to go. I think we're out", "tokens": [51506, 440, 14035, 12, 13229, 311, 406, 869, 11, 457, 1338, 11, 300, 576, 312, 264, 700, 1081, 281, 352, 13, 286, 519, 321, 434, 484, 51806], "temperature": 0.0, "avg_logprob": -0.327495454232904, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0945054218173027}, {"id": 220, "seek": 147130, "start": 1471.5, "end": 1478.5, "text": " of time. Any last question? Yep? So how well does it actually handle everybody's", "tokens": [50374, 295, 565, 13, 2639, 1036, 1168, 30, 7010, 30, 407, 577, 731, 775, 309, 767, 4813, 2201, 311, 50724], "temperature": 0.0, "avg_logprob": -0.19706785267797008, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.005214529111981392}, {"id": 221, "seek": 147130, "start": 1478.94, "end": 1485.18, "text": " thoughts? So, I mean, it was designed to deal with terabyte files from the start, which", "tokens": [50746, 4598, 30, 407, 11, 286, 914, 11, 309, 390, 4761, 281, 2028, 365, 1796, 34529, 7098, 490, 264, 722, 11, 597, 51058], "temperature": 0.0, "avg_logprob": -0.19706785267797008, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.005214529111981392}, {"id": 222, "seek": 147130, "start": 1485.18, "end": 1490.22, "text": " is why we have that minimap, and when you open the spectrogram page, it's only loading", "tokens": [51058, 307, 983, 321, 362, 300, 4464, 569, 11, 293, 562, 291, 1269, 264, 6177, 340, 1342, 3028, 11, 309, 311, 787, 15114, 51310], "temperature": 0.0, "avg_logprob": -0.19706785267797008, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.005214529111981392}, {"id": 223, "seek": 147130, "start": 1490.22, "end": 1495.5, "text": " what you're looking at at any given time. So it's sending the IQ samples to your client,", "tokens": [51310, 437, 291, 434, 1237, 412, 412, 604, 2212, 565, 13, 407, 309, 311, 7750, 264, 28921, 10938, 281, 428, 6423, 11, 51574], "temperature": 0.0, "avg_logprob": -0.19706785267797008, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.005214529111981392}, {"id": 224, "seek": 147130, "start": 1495.5, "end": 1500.74, "text": " to the browser. The browser's doing the FFTs. So it's sending maybe a few million samples", "tokens": [51574, 281, 264, 11185, 13, 440, 11185, 311, 884, 264, 479, 25469, 82, 13, 407, 309, 311, 7750, 1310, 257, 1326, 2459, 10938, 51836], "temperature": 0.0, "avg_logprob": -0.19706785267797008, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.005214529111981392}, {"id": 225, "seek": 150074, "start": 1500.82, "end": 1506.3, "text": " to get a spectrogram like this, but if it's a mini terabyte recording, you'll just have", "tokens": [50368, 281, 483, 257, 6177, 340, 1342, 411, 341, 11, 457, 498, 309, 311, 257, 8382, 1796, 34529, 6613, 11, 291, 603, 445, 362, 50642], "temperature": 0.0, "avg_logprob": -0.19342734295388928, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.005634844768792391}, {"id": 226, "seek": 150074, "start": 1506.3, "end": 1510.22, "text": " a smaller, like, gray window here, because it'll represent a smaller part of the whole", "tokens": [50642, 257, 4356, 11, 411, 11, 10855, 4910, 510, 11, 570, 309, 603, 2906, 257, 4356, 644, 295, 264, 1379, 50838], "temperature": 0.0, "avg_logprob": -0.19342734295388928, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.005634844768792391}, {"id": 227, "seek": 150074, "start": 1510.22, "end": 1515.82, "text": " recording. Yeah, I mean, you have to store the recording, but it's not all, we have", "tokens": [50838, 6613, 13, 865, 11, 286, 914, 11, 291, 362, 281, 3531, 264, 6613, 11, 457, 309, 311, 406, 439, 11, 321, 362, 51118], "temperature": 0.0, "avg_logprob": -0.19342734295388928, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.005634844768792391}, {"id": 228, "seek": 150074, "start": 1515.82, "end": 1520.86, "text": " no part of the code that sends the entire recording to either the client or the backend,", "tokens": [51118, 572, 644, 295, 264, 3089, 300, 14790, 264, 2302, 6613, 281, 2139, 264, 6423, 420, 264, 38087, 11, 51370], "temperature": 0.0, "avg_logprob": -0.19342734295388928, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.005634844768792391}, {"id": 229, "seek": 150074, "start": 1520.86, "end": 1527.86, "text": " because we know it's not going to fly for huge stuff. All right. Yep? Yeah. Yeah.", "tokens": [51370, 570, 321, 458, 309, 311, 406, 516, 281, 3603, 337, 2603, 1507, 13, 1057, 558, 13, 7010, 30, 865, 13, 865, 13, 51720], "temperature": 0.0, "avg_logprob": -0.19342734295388928, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.005634844768792391}, {"id": 230, "seek": 153074, "start": 1531.74, "end": 1538.74, "text": " Actually, SIGMF has a lot of, there's even an extension for more details about the hardware", "tokens": [50414, 5135, 11, 318, 10489, 44, 37, 575, 257, 688, 295, 11, 456, 311, 754, 364, 10320, 337, 544, 4365, 466, 264, 8837, 50764], "temperature": 0.0, "avg_logprob": -0.21611441024626143, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.004253878258168697}, {"id": 231, "seek": 153074, "start": 1541.98, "end": 1548.34, "text": " involved. Definitely check out SIGMF, the specs. So if you want a five minute introduction", "tokens": [50926, 3288, 13, 12151, 1520, 484, 318, 10489, 44, 37, 11, 264, 27911, 13, 407, 498, 291, 528, 257, 1732, 3456, 9339, 51244], "temperature": 0.0, "avg_logprob": -0.21611441024626143, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.004253878258168697}, {"id": 232, "seek": 153074, "start": 1548.34, "end": 1553.66, "text": " to SIGMF, that's what we have here on IQ Engine, but I would, yeah, go ahead and go", "tokens": [51244, 281, 318, 10489, 44, 37, 11, 300, 311, 437, 321, 362, 510, 322, 28921, 7659, 11, 457, 286, 576, 11, 1338, 11, 352, 2286, 293, 352, 51510], "temperature": 0.0, "avg_logprob": -0.21611441024626143, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.004253878258168697}, {"id": 233, "seek": 153074, "start": 1553.66, "end": 1558.66, "text": " to the specs and dive in, and you'll know a lot of the parameters that you mentioned.", "tokens": [51510, 281, 264, 27911, 293, 9192, 294, 11, 293, 291, 603, 458, 257, 688, 295, 264, 9834, 300, 291, 2835, 13, 51760], "temperature": 0.0, "avg_logprob": -0.21611441024626143, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.004253878258168697}, {"id": 234, "seek": 155866, "start": 1558.74, "end": 1561.74, "text": " All right, thank you very much.", "tokens": [50368, 1057, 558, 11, 1309, 291, 588, 709, 13, 50518], "temperature": 0.6, "avg_logprob": -0.7310588955879211, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.004054010845720768}, {"id": 235, "seek": 155866, "start": 1561.74, "end": 1562.74, "text": " Wow. Thank you very much.", "tokens": [50518, 3153, 13, 1044, 291, 588, 709, 13, 50568], "temperature": 0.6, "avg_logprob": -0.7310588955879211, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.004054010845720768}, {"id": 236, "seek": 155866, "start": 1562.74, "end": 1563.74, "text": " Thank you very much.", "tokens": [50568, 1044, 291, 588, 709, 13, 50618], "temperature": 0.6, "avg_logprob": -0.7310588955879211, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.004054010845720768}, {"id": 237, "seek": 155866, "start": 1563.74, "end": 1563.78, "text": " Thank you.", "tokens": [50618, 1044, 291, 13, 50620], "temperature": 0.6, "avg_logprob": -0.7310588955879211, "compression_ratio": 1.7450980392156863, "no_speech_prob": 0.004054010845720768}], "language": "en"}