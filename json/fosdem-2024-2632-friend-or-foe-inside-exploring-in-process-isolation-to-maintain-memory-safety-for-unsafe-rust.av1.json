{"text": " All right, let's settle down. We have Merve Goulmez. She's going to talk about friend or foe, exploring in process isolation to maintain memory safety for unsafe rust. Thank you very much. Take it away. Hello, everyone. I am happy to be here. Let's get started. I hope that one is working now. As you see, previous presentation I talked about is uptake of rust and EtoB project, for example, rust for Linux or Mozilla or currently is happening is rust in Windows OS. For example, Mozilla is now 11% is rust and the other different languages, for example, C and C++. Of course, that one is all virtual developments, requires mixed language application. Also today we saw previous talk. They talk about unsafe rust. Rust has actually highest two languages. One of them is safe and the other one is unsafe rust. And unsafe rust doesn't enforce memory safety guarantees and why we need it. Sometimes we want to do some low level control or implementation details or sometimes we need it for optimization. In Cherry Talk, they did really demo here and unsafe rust can violate completely rust application memory safety. They can do different route pointers or they can allow us to call unsafe functions via foreign function interface. Academic work shows that more than 72% of rust created is dependent on at least one unsafe FFI. Now we have two things, safe rust and unsafe rust. Unsafe rust says trust me, I know what I am doing. Should we do trust or should we do something and put on shield? And the gap is here actually. I always mention this mixed language application undermines memory safety guarantee of safe rust. And as a result, isolation is really needed. And I am a PhD student. I am a researcher. A lot of academic work to address this issue, we have a lot of academic work for example airing, trust, sun crust or so on. But what is the difference between these different academic publications? They either say that okay, we should use process-based isolation or we should use in process isolation. When you have process-based isolation, firstly you have integrity. It means that each processor, I mean it is on virtual memory space and also the other nicest things you have resilience. It means that each processor, it is on failure boundary. And if one process is crash, the other one is not affected. And a good example for that one, multiprocess software architecture. And the other side, we have in process isolation. It means that you have one other space and inside this one other space, how we can isolate one part of it. For example, you want to protect just a key or you want to protect one part of applications. Of course, if you have in process isolation, it can significantly reduce the runtime cost because context-severing compared to the traditional process isolation is lower. And I put here early approaches. This small box and inside the small box means that in process isolation and the other we have just sandbox provide the process-based isolation. And I would like to highlight something. Just one of them is offering crash resistance, but this is process-based isolation. We have STRAT here, but STRAT doesn't support for us, just it supports C applications. And I did some measurement and according to this measurement, if you have process-based isolation, actually it is 10 times higher than compared in process isolations. But the gap is here actually can be provided best of the board wars. It means that can we have integrity and failure boundaries similar to process-based isolations and we want to also have overheads similar to in process isolation. And my goal is firstly maintain the rest application safety and also we want to increase the software resilience of rest applications and also how we can provide ease of use in the development. In my early work, we provide some approach for C applications. This is secure rewind and discard and this is an approach for recovering vulnerable application after an attack is detected. And how we achieve that stuff? First we compartment the application in the distinct domains and we want to make sure that a memory defect with a domain must only affect that domain memory. This approach is relying on hardware assisted software fault-based isolation. This is a protection key for user space. And also how I detect it? I use different pre-existing detection mechanism, for example, stack canneries and domain violations. And as a result of this work, we publish some C library, SDRet library. If you want to check out, you can scan the QR code. Now I would like to explain the high-level idea. We have function F and we have unsafe. And if you write just some box on top of that, we want to have some memory safety guarantees and we want to have some isolation. And let's get started. We have parent domain and we want to run this function F in another domain. Another domain means stacks that can heap isolations. It means that I want to run this function F in another domain. And to run my function in the nested domain D, firstly I need to push the argument. I need to enter domain D and pull argument from the parent domain. And invoke F. I am executing applications, execute the function F. And the question is that is there something bad or not? But we have a guarantee that now if nested domain has some memory vulnerability, it will not affect the parent domain memory. It means that parent domain is still secure. And I am offering saying that you don't need to create your application, actually. You can just continue the execution. How I am offering, probably all of you know that this RAS says there's some API for panic. And we run the function F in the nested domain and after that we are checking the result. If results say that yes, you have something bad things happens and for example I can detect stack memory overflow or domain-domain violations, it will return error. If everything is okay, we don't need to do anything, it will just return okay. But the idea is that actually we are using this API, panic, but we are actually adding a new feature. Panic has also memory safety guarantees. It means that when panic happens, you can still continue your execution. And after that I explain this rewind and discard. And if nothing happens, if we didn't detect any memory safety violations, we will just push mutable arguments and return value and we will return parent domain. For this whole process in high-level idea, this STRAAT API, CAPI is already offering this pink box, but the point for this blue box is how we can track the rest of the types of the arguments and how we can push another domain and how we can pull it again. And probably all of you know that we have a lot of serialization creator. And what is serialization? It means serialization, we should encode the data in a format, like I just put it in a jar, and after that we should deserialize. When we jump to the nested domain, we should deserialize. And as a case study, I work on two RAS crates, BINCOT and ABONOMATIONS. BINCOT is a transformed data in a common binary representation that allows passing data between different platforms. And only the mention that SANDCRAS is process-based isolation mechanisms and that uses BINCOT. But actually, we realize that BINCOT, for our cases, is redundant because SANDCRAS and also STDF-FI, we are ingested in single platform. And I explore ABONOMATIONS, it's based on Rust Object MemoLayout presentations, but it is just for specific single platform. And it doesn't store any metadata or any type systems. It can deserialize the place without need for another cooperation. And we realize that ABONOMATIONS is efficient and suitable for our purpose. And we did some benchmarking. SNAPE is a fast comparison C-library from Google, and it designed for high-speed compression and the compression of data. And also presented as an FFI example in the Rust books. And what we compare, compress and uncompress random-generated data of different sizes. And we measure execution time of each operation for different serialization creators, like BINCOT and ABONOMATION. I show as a demo here, when I did all stuff, I just used a sandbox macro. And sandbox macro is ensure that this compressed function is completely run in the different domain, and it will not affect the parent domain. And uncompress is also here. Here we tested with different number of bytes, and this is the execution time. What is our lesson learned stuff? Of course, if you have number of bytes, if it is smaller, in process isolation approach clearly outperforms compared to process-based isolations. Because if you have in process isolation, you will not so much overhead. But the interesting start with later, we realize that even for modest-sized arguments, the context, which is not important anymore, is dominated by data serialization method. What you use. And our lesson learned tree, the data serialization method can significantly impact performance, and it is critical to optimize it for different cases. If you are working on this serialization creator or developing, we can talk about it, how we can improve or how we can fit our use cases. In summary, we introduced secure rewind and discard with isolated domains for REST-FFI. We have two goals. Firstly, we want to protect integrity of REST application from memory safety violation in unsafe program. The main point is that actually I would like to highlight, we are increasing the REST application availability, because we have a still option for if unsafe portion of our applications is the some memory safety, we can return back. We have option there. And I provided REST-FFI creators, it is open source, if you would like to try. And what is our takeaway? Improved isolation approach clearly outperforms compared to process-based isolations. But other important things is that data serialization method can significantly impact the performance. Thank you if you have a question. Can you quickly explain how these domains actually work? How do you enter a domain and how do you define what part of memory is part of the domain and what is outside the domain? Of course, it is actually handled by my C-Labri before that. I wrote it. But for RASPEX, if you just use sandbox macro, it will automatically handle it. But if you go into details, for each domain I will create a new stack and new heap memory area. Early, when there is some talk about this allocator, you can specify for allocators for specific domain. Entering a new stack, what does it mean? Just change the stack pointer and continue execution there. So you do a stack switch and share it to an entry point. But the important point is to do this rewind and discard. You should first save your execution context in a secure way. This is the point how we can recover. That is kind of like set-jump and long-jump style. Yes, set-jump, long-jump, but in a secure way. Now we have a guarantee that... Then you use some hardware mechanism to make sure that certain domains, certain memory is only accessible. Yes, exactly. That is true. That is completely true. This is the install feature. We are using that one. It is lightweight. That is why. Because you don't need system calls? Yes, exactly. You don't need to use a RAM trip? Yes, exactly. You have got everything now. First, thanks for the great talk. When deciding which piece of memory you put in the new domain, the global state is shared between different domains or you copy all the global states? Current version is just supporting HIP and memory. HIP and memory, but for the global shared, you should copy and pass it. It is not going to be your application. You should change it. But as a future work, I would like to support this. How we can actually sync between different domains to global shared states? That could be very costly. Sharing and copying the global state could be very costly. Yes, exactly. For example, here also, even though I have improved the isolations, changing arguments between domains create a lot of overheads. Yes, this is the bottleneck now. How we can improve actually this part? How we can pass the function argument one domain to another domain? This is the actual cost, actually. Second question. You copy back all the mutable arguments. Do you use that even if they are not changed or do you do that all the time? I am just pushing this. If they are mutable, I am pushing the argument. But you don't check if they have been changed by the function. If they are mutable, then you copy them back. Yes, exactly. So it is a static check and not a runtime check. Thanks. Thanks for your nice question. Awesome. Sorry, unfortunately that was all we had time for. Can we give another? Thank you to Mervin. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 21.56, "text": " All right, let's settle down.", "tokens": [50364, 1057, 558, 11, 718, 311, 11852, 760, 13, 51442], "temperature": 0.0, "avg_logprob": -0.4056202958269817, "compression_ratio": 1.182608695652174, "no_speech_prob": 0.5198531746864319}, {"id": 1, "seek": 0, "start": 21.56, "end": 23.72, "text": " We have Merve Goulmez.", "tokens": [51442, 492, 362, 376, 3768, 460, 3298, 19917, 13, 51550], "temperature": 0.0, "avg_logprob": -0.4056202958269817, "compression_ratio": 1.182608695652174, "no_speech_prob": 0.5198531746864319}, {"id": 2, "seek": 0, "start": 23.72, "end": 29.28, "text": " She's going to talk about friend or foe, exploring in process isolation to maintain", "tokens": [51550, 1240, 311, 516, 281, 751, 466, 1277, 420, 726, 68, 11, 12736, 294, 1399, 16001, 281, 6909, 51828], "temperature": 0.0, "avg_logprob": -0.4056202958269817, "compression_ratio": 1.182608695652174, "no_speech_prob": 0.5198531746864319}, {"id": 3, "seek": 2928, "start": 29.28, "end": 32.76, "text": " memory safety for unsafe rust.", "tokens": [50364, 4675, 4514, 337, 35948, 15259, 13, 50538], "temperature": 0.0, "avg_logprob": -0.5622518712824042, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.09674198925495148}, {"id": 4, "seek": 2928, "start": 32.76, "end": 34.160000000000004, "text": " Thank you very much.", "tokens": [50538, 1044, 291, 588, 709, 13, 50608], "temperature": 0.0, "avg_logprob": -0.5622518712824042, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.09674198925495148}, {"id": 5, "seek": 2928, "start": 34.160000000000004, "end": 35.64, "text": " Take it away.", "tokens": [50608, 3664, 309, 1314, 13, 50682], "temperature": 0.0, "avg_logprob": -0.5622518712824042, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.09674198925495148}, {"id": 6, "seek": 2928, "start": 35.64, "end": 40.24, "text": " Hello, everyone.", "tokens": [50682, 2425, 11, 1518, 13, 50912], "temperature": 0.0, "avg_logprob": -0.5622518712824042, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.09674198925495148}, {"id": 7, "seek": 2928, "start": 40.24, "end": 45.04, "text": " I am happy to be here.", "tokens": [50912, 286, 669, 2055, 281, 312, 510, 13, 51152], "temperature": 0.0, "avg_logprob": -0.5622518712824042, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.09674198925495148}, {"id": 8, "seek": 2928, "start": 45.04, "end": 46.32, "text": " Let's get started.", "tokens": [51152, 961, 311, 483, 1409, 13, 51216], "temperature": 0.0, "avg_logprob": -0.5622518712824042, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.09674198925495148}, {"id": 9, "seek": 2928, "start": 46.32, "end": 54.120000000000005, "text": " I hope that one is working now.", "tokens": [51216, 286, 1454, 300, 472, 307, 1364, 586, 13, 51606], "temperature": 0.0, "avg_logprob": -0.5622518712824042, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.09674198925495148}, {"id": 10, "seek": 5412, "start": 54.12, "end": 62.8, "text": " As you see, previous presentation I talked about is uptake of rust and EtoB project,", "tokens": [50364, 1018, 291, 536, 11, 3894, 5860, 286, 2825, 466, 307, 493, 27612, 295, 15259, 293, 462, 1353, 33, 1716, 11, 50798], "temperature": 0.0, "avg_logprob": -0.3604676272418048, "compression_ratio": 1.456989247311828, "no_speech_prob": 0.2866953909397125}, {"id": 11, "seek": 5412, "start": 62.8, "end": 71.12, "text": " for example, rust for Linux or Mozilla or currently is happening is rust in Windows OS.", "tokens": [50798, 337, 1365, 11, 15259, 337, 18734, 420, 3335, 26403, 420, 4362, 307, 2737, 307, 15259, 294, 8591, 12731, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3604676272418048, "compression_ratio": 1.456989247311828, "no_speech_prob": 0.2866953909397125}, {"id": 12, "seek": 5412, "start": 71.12, "end": 79.36, "text": " For example, Mozilla is now 11% is rust and the other different languages, for example,", "tokens": [51214, 1171, 1365, 11, 3335, 26403, 307, 586, 2975, 4, 307, 15259, 293, 264, 661, 819, 8650, 11, 337, 1365, 11, 51626], "temperature": 0.0, "avg_logprob": -0.3604676272418048, "compression_ratio": 1.456989247311828, "no_speech_prob": 0.2866953909397125}, {"id": 13, "seek": 5412, "start": 79.36, "end": 82.0, "text": " C and C++.", "tokens": [51626, 383, 293, 383, 25472, 13, 51758], "temperature": 0.0, "avg_logprob": -0.3604676272418048, "compression_ratio": 1.456989247311828, "no_speech_prob": 0.2866953909397125}, {"id": 14, "seek": 8200, "start": 82.0, "end": 92.64, "text": " Of course, that one is all virtual developments, requires mixed language application.", "tokens": [50364, 2720, 1164, 11, 300, 472, 307, 439, 6374, 20862, 11, 7029, 7467, 2856, 3861, 13, 50896], "temperature": 0.0, "avg_logprob": -0.2860872590696657, "compression_ratio": 1.541062801932367, "no_speech_prob": 0.007678764406591654}, {"id": 15, "seek": 8200, "start": 92.64, "end": 96.52, "text": " Also today we saw previous talk.", "tokens": [50896, 2743, 965, 321, 1866, 3894, 751, 13, 51090], "temperature": 0.0, "avg_logprob": -0.2860872590696657, "compression_ratio": 1.541062801932367, "no_speech_prob": 0.007678764406591654}, {"id": 16, "seek": 8200, "start": 96.52, "end": 98.84, "text": " They talk about unsafe rust.", "tokens": [51090, 814, 751, 466, 35948, 15259, 13, 51206], "temperature": 0.0, "avg_logprob": -0.2860872590696657, "compression_ratio": 1.541062801932367, "no_speech_prob": 0.007678764406591654}, {"id": 17, "seek": 8200, "start": 98.84, "end": 101.24000000000001, "text": " Rust has actually highest two languages.", "tokens": [51206, 34952, 575, 767, 6343, 732, 8650, 13, 51326], "temperature": 0.0, "avg_logprob": -0.2860872590696657, "compression_ratio": 1.541062801932367, "no_speech_prob": 0.007678764406591654}, {"id": 18, "seek": 8200, "start": 101.24000000000001, "end": 106.16, "text": " One of them is safe and the other one is unsafe rust.", "tokens": [51326, 1485, 295, 552, 307, 3273, 293, 264, 661, 472, 307, 35948, 15259, 13, 51572], "temperature": 0.0, "avg_logprob": -0.2860872590696657, "compression_ratio": 1.541062801932367, "no_speech_prob": 0.007678764406591654}, {"id": 19, "seek": 8200, "start": 106.16, "end": 111.24000000000001, "text": " And unsafe rust doesn't enforce memory safety guarantees and why we need it.", "tokens": [51572, 400, 35948, 15259, 1177, 380, 24825, 4675, 4514, 32567, 293, 983, 321, 643, 309, 13, 51826], "temperature": 0.0, "avg_logprob": -0.2860872590696657, "compression_ratio": 1.541062801932367, "no_speech_prob": 0.007678764406591654}, {"id": 20, "seek": 11124, "start": 111.24, "end": 115.44, "text": " Sometimes we want to do some low level control or implementation details or sometimes we", "tokens": [50364, 4803, 321, 528, 281, 360, 512, 2295, 1496, 1969, 420, 11420, 4365, 420, 2171, 321, 50574], "temperature": 0.0, "avg_logprob": -0.35704654805800495, "compression_ratio": 1.57, "no_speech_prob": 0.030077731236815453}, {"id": 21, "seek": 11124, "start": 115.44, "end": 118.96, "text": " need it for optimization.", "tokens": [50574, 643, 309, 337, 19618, 13, 50750], "temperature": 0.0, "avg_logprob": -0.35704654805800495, "compression_ratio": 1.57, "no_speech_prob": 0.030077731236815453}, {"id": 22, "seek": 11124, "start": 118.96, "end": 127.44, "text": " In Cherry Talk, they did really demo here and unsafe rust can violate completely rust", "tokens": [50750, 682, 34831, 8780, 11, 436, 630, 534, 10723, 510, 293, 35948, 15259, 393, 37478, 2584, 15259, 51174], "temperature": 0.0, "avg_logprob": -0.35704654805800495, "compression_ratio": 1.57, "no_speech_prob": 0.030077731236815453}, {"id": 23, "seek": 11124, "start": 127.44, "end": 129.4, "text": " application memory safety.", "tokens": [51174, 3861, 4675, 4514, 13, 51272], "temperature": 0.0, "avg_logprob": -0.35704654805800495, "compression_ratio": 1.57, "no_speech_prob": 0.030077731236815453}, {"id": 24, "seek": 11124, "start": 129.4, "end": 136.56, "text": " They can do different route pointers or they can allow us to call unsafe functions via", "tokens": [51272, 814, 393, 360, 819, 7955, 44548, 420, 436, 393, 2089, 505, 281, 818, 35948, 6828, 5766, 51630], "temperature": 0.0, "avg_logprob": -0.35704654805800495, "compression_ratio": 1.57, "no_speech_prob": 0.030077731236815453}, {"id": 25, "seek": 13656, "start": 136.56, "end": 141.72, "text": " foreign function interface.", "tokens": [50364, 5329, 2445, 9226, 13, 50622], "temperature": 0.0, "avg_logprob": -0.3755488097667694, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0945863351225853}, {"id": 26, "seek": 13656, "start": 141.72, "end": 149.4, "text": " Academic work shows that more than 72% of rust created is dependent on at least one unsafe", "tokens": [50622, 36139, 589, 3110, 300, 544, 813, 18731, 4, 295, 15259, 2942, 307, 12334, 322, 412, 1935, 472, 35948, 51006], "temperature": 0.0, "avg_logprob": -0.3755488097667694, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0945863351225853}, {"id": 27, "seek": 13656, "start": 149.4, "end": 154.08, "text": " FFI.", "tokens": [51006, 479, 38568, 13, 51240], "temperature": 0.0, "avg_logprob": -0.3755488097667694, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0945863351225853}, {"id": 28, "seek": 13656, "start": 154.08, "end": 158.24, "text": " Now we have two things, safe rust and unsafe rust.", "tokens": [51240, 823, 321, 362, 732, 721, 11, 3273, 15259, 293, 35948, 15259, 13, 51448], "temperature": 0.0, "avg_logprob": -0.3755488097667694, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0945863351225853}, {"id": 29, "seek": 13656, "start": 158.24, "end": 161.96, "text": " Unsafe rust says trust me, I know what I am doing.", "tokens": [51448, 1156, 5790, 2106, 15259, 1619, 3361, 385, 11, 286, 458, 437, 286, 669, 884, 13, 51634], "temperature": 0.0, "avg_logprob": -0.3755488097667694, "compression_ratio": 1.4150943396226414, "no_speech_prob": 0.0945863351225853}, {"id": 30, "seek": 16196, "start": 161.96, "end": 168.32000000000002, "text": " Should we do trust or should we do something and put on shield?", "tokens": [50364, 6454, 321, 360, 3361, 420, 820, 321, 360, 746, 293, 829, 322, 10257, 30, 50682], "temperature": 0.0, "avg_logprob": -0.40746917724609377, "compression_ratio": 1.5, "no_speech_prob": 0.055722977966070175}, {"id": 31, "seek": 16196, "start": 168.32000000000002, "end": 169.72, "text": " And the gap is here actually.", "tokens": [50682, 400, 264, 7417, 307, 510, 767, 13, 50752], "temperature": 0.0, "avg_logprob": -0.40746917724609377, "compression_ratio": 1.5, "no_speech_prob": 0.055722977966070175}, {"id": 32, "seek": 16196, "start": 169.72, "end": 174.84, "text": " I always mention this mixed language application undermines memory safety guarantee of safe", "tokens": [50752, 286, 1009, 2152, 341, 7467, 2856, 3861, 24188, 1652, 4675, 4514, 10815, 295, 3273, 51008], "temperature": 0.0, "avg_logprob": -0.40746917724609377, "compression_ratio": 1.5, "no_speech_prob": 0.055722977966070175}, {"id": 33, "seek": 16196, "start": 174.84, "end": 178.08, "text": " rust.", "tokens": [51008, 15259, 13, 51170], "temperature": 0.0, "avg_logprob": -0.40746917724609377, "compression_ratio": 1.5, "no_speech_prob": 0.055722977966070175}, {"id": 34, "seek": 16196, "start": 178.08, "end": 181.16, "text": " And as a result, isolation is really needed.", "tokens": [51170, 400, 382, 257, 1874, 11, 16001, 307, 534, 2978, 13, 51324], "temperature": 0.0, "avg_logprob": -0.40746917724609377, "compression_ratio": 1.5, "no_speech_prob": 0.055722977966070175}, {"id": 35, "seek": 16196, "start": 181.16, "end": 182.28, "text": " And I am a PhD student.", "tokens": [51324, 400, 286, 669, 257, 14476, 3107, 13, 51380], "temperature": 0.0, "avg_logprob": -0.40746917724609377, "compression_ratio": 1.5, "no_speech_prob": 0.055722977966070175}, {"id": 36, "seek": 16196, "start": 182.28, "end": 184.28, "text": " I am a researcher.", "tokens": [51380, 286, 669, 257, 21751, 13, 51480], "temperature": 0.0, "avg_logprob": -0.40746917724609377, "compression_ratio": 1.5, "no_speech_prob": 0.055722977966070175}, {"id": 37, "seek": 18428, "start": 184.28, "end": 193.4, "text": " A lot of academic work to address this issue, we have a lot of academic work for example", "tokens": [50364, 316, 688, 295, 7778, 589, 281, 2985, 341, 2734, 11, 321, 362, 257, 688, 295, 7778, 589, 337, 1365, 50820], "temperature": 0.0, "avg_logprob": -0.3191387388441298, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.2371722161769867}, {"id": 38, "seek": 18428, "start": 193.4, "end": 198.24, "text": " airing, trust, sun crust or so on.", "tokens": [50820, 1988, 278, 11, 3361, 11, 3295, 18156, 420, 370, 322, 13, 51062], "temperature": 0.0, "avg_logprob": -0.3191387388441298, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.2371722161769867}, {"id": 39, "seek": 18428, "start": 198.24, "end": 206.4, "text": " But what is the difference between these different academic publications?", "tokens": [51062, 583, 437, 307, 264, 2649, 1296, 613, 819, 7778, 25618, 30, 51470], "temperature": 0.0, "avg_logprob": -0.3191387388441298, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.2371722161769867}, {"id": 40, "seek": 18428, "start": 206.4, "end": 212.52, "text": " They either say that okay, we should use process-based isolation or we should use in process isolation.", "tokens": [51470, 814, 2139, 584, 300, 1392, 11, 321, 820, 764, 1399, 12, 6032, 16001, 420, 321, 820, 764, 294, 1399, 16001, 13, 51776], "temperature": 0.0, "avg_logprob": -0.3191387388441298, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.2371722161769867}, {"id": 41, "seek": 21252, "start": 212.64000000000001, "end": 216.0, "text": " When you have process-based isolation, firstly you have integrity.", "tokens": [50370, 1133, 291, 362, 1399, 12, 6032, 16001, 11, 27376, 291, 362, 16000, 13, 50538], "temperature": 0.0, "avg_logprob": -0.28198275248209637, "compression_ratio": 1.737142857142857, "no_speech_prob": 0.07523378729820251}, {"id": 42, "seek": 21252, "start": 216.0, "end": 223.32000000000002, "text": " It means that each processor, I mean it is on virtual memory space and also the other", "tokens": [50538, 467, 1355, 300, 1184, 15321, 11, 286, 914, 309, 307, 322, 6374, 4675, 1901, 293, 611, 264, 661, 50904], "temperature": 0.0, "avg_logprob": -0.28198275248209637, "compression_ratio": 1.737142857142857, "no_speech_prob": 0.07523378729820251}, {"id": 43, "seek": 21252, "start": 223.32000000000002, "end": 225.60000000000002, "text": " nicest things you have resilience.", "tokens": [50904, 45516, 721, 291, 362, 19980, 13, 51018], "temperature": 0.0, "avg_logprob": -0.28198275248209637, "compression_ratio": 1.737142857142857, "no_speech_prob": 0.07523378729820251}, {"id": 44, "seek": 21252, "start": 225.60000000000002, "end": 230.16000000000003, "text": " It means that each processor, it is on failure boundary.", "tokens": [51018, 467, 1355, 300, 1184, 15321, 11, 309, 307, 322, 7763, 12866, 13, 51246], "temperature": 0.0, "avg_logprob": -0.28198275248209637, "compression_ratio": 1.737142857142857, "no_speech_prob": 0.07523378729820251}, {"id": 45, "seek": 21252, "start": 230.16000000000003, "end": 237.28, "text": " And if one process is crash, the other one is not affected.", "tokens": [51246, 400, 498, 472, 1399, 307, 8252, 11, 264, 661, 472, 307, 406, 8028, 13, 51602], "temperature": 0.0, "avg_logprob": -0.28198275248209637, "compression_ratio": 1.737142857142857, "no_speech_prob": 0.07523378729820251}, {"id": 46, "seek": 23728, "start": 237.28, "end": 244.76, "text": " And a good example for that one, multiprocess software architecture.", "tokens": [50364, 400, 257, 665, 1365, 337, 300, 472, 11, 3311, 340, 780, 4722, 9482, 13, 50738], "temperature": 0.0, "avg_logprob": -0.22372095084484714, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.01604462042450905}, {"id": 47, "seek": 23728, "start": 244.76, "end": 247.4, "text": " And the other side, we have in process isolation.", "tokens": [50738, 400, 264, 661, 1252, 11, 321, 362, 294, 1399, 16001, 13, 50870], "temperature": 0.0, "avg_logprob": -0.22372095084484714, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.01604462042450905}, {"id": 48, "seek": 23728, "start": 247.4, "end": 253.24, "text": " It means that you have one other space and inside this one other space, how we can isolate", "tokens": [50870, 467, 1355, 300, 291, 362, 472, 661, 1901, 293, 1854, 341, 472, 661, 1901, 11, 577, 321, 393, 25660, 51162], "temperature": 0.0, "avg_logprob": -0.22372095084484714, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.01604462042450905}, {"id": 49, "seek": 23728, "start": 253.24, "end": 255.0, "text": " one part of it.", "tokens": [51162, 472, 644, 295, 309, 13, 51250], "temperature": 0.0, "avg_logprob": -0.22372095084484714, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.01604462042450905}, {"id": 50, "seek": 23728, "start": 255.0, "end": 263.52, "text": " For example, you want to protect just a key or you want to protect one part of applications.", "tokens": [51250, 1171, 1365, 11, 291, 528, 281, 2371, 445, 257, 2141, 420, 291, 528, 281, 2371, 472, 644, 295, 5821, 13, 51676], "temperature": 0.0, "avg_logprob": -0.22372095084484714, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.01604462042450905}, {"id": 51, "seek": 26352, "start": 263.52, "end": 268.76, "text": " Of course, if you have in process isolation, it can significantly reduce the runtime cost", "tokens": [50364, 2720, 1164, 11, 498, 291, 362, 294, 1399, 16001, 11, 309, 393, 10591, 5407, 264, 34474, 2063, 50626], "temperature": 0.0, "avg_logprob": -0.3523493391094786, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.008756895549595356}, {"id": 52, "seek": 26352, "start": 268.76, "end": 280.32, "text": " because context-severing compared to the traditional process isolation is lower.", "tokens": [50626, 570, 4319, 12, 405, 331, 278, 5347, 281, 264, 5164, 1399, 16001, 307, 3126, 13, 51204], "temperature": 0.0, "avg_logprob": -0.3523493391094786, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.008756895549595356}, {"id": 53, "seek": 26352, "start": 280.32, "end": 286.71999999999997, "text": " And I put here early approaches.", "tokens": [51204, 400, 286, 829, 510, 2440, 11587, 13, 51524], "temperature": 0.0, "avg_logprob": -0.3523493391094786, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.008756895549595356}, {"id": 54, "seek": 26352, "start": 286.71999999999997, "end": 292.71999999999997, "text": " This small box and inside the small box means that in process isolation and the other we", "tokens": [51524, 639, 1359, 2424, 293, 1854, 264, 1359, 2424, 1355, 300, 294, 1399, 16001, 293, 264, 661, 321, 51824], "temperature": 0.0, "avg_logprob": -0.3523493391094786, "compression_ratio": 1.6132596685082874, "no_speech_prob": 0.008756895549595356}, {"id": 55, "seek": 29272, "start": 292.72, "end": 296.88000000000005, "text": " have just sandbox provide the process-based isolation.", "tokens": [50364, 362, 445, 42115, 2893, 264, 1399, 12, 6032, 16001, 13, 50572], "temperature": 0.0, "avg_logprob": -0.35885583653169517, "compression_ratio": 1.52, "no_speech_prob": 0.01615731418132782}, {"id": 56, "seek": 29272, "start": 296.88000000000005, "end": 300.04, "text": " And I would like to highlight something.", "tokens": [50572, 400, 286, 576, 411, 281, 5078, 746, 13, 50730], "temperature": 0.0, "avg_logprob": -0.35885583653169517, "compression_ratio": 1.52, "no_speech_prob": 0.01615731418132782}, {"id": 57, "seek": 29272, "start": 300.04, "end": 309.32000000000005, "text": " Just one of them is offering crash resistance, but this is process-based isolation.", "tokens": [50730, 1449, 472, 295, 552, 307, 8745, 8252, 7335, 11, 457, 341, 307, 1399, 12, 6032, 16001, 13, 51194], "temperature": 0.0, "avg_logprob": -0.35885583653169517, "compression_ratio": 1.52, "no_speech_prob": 0.01615731418132782}, {"id": 58, "seek": 29272, "start": 309.32000000000005, "end": 319.04, "text": " We have STRAT here, but STRAT doesn't support for us, just it supports C applications.", "tokens": [51194, 492, 362, 4904, 49, 2218, 510, 11, 457, 4904, 49, 2218, 1177, 380, 1406, 337, 505, 11, 445, 309, 9346, 383, 5821, 13, 51680], "temperature": 0.0, "avg_logprob": -0.35885583653169517, "compression_ratio": 1.52, "no_speech_prob": 0.01615731418132782}, {"id": 59, "seek": 31904, "start": 319.04, "end": 325.0, "text": " And I did some measurement and according to this measurement, if you have process-based", "tokens": [50364, 400, 286, 630, 512, 13160, 293, 4650, 281, 341, 13160, 11, 498, 291, 362, 1399, 12, 6032, 50662], "temperature": 0.0, "avg_logprob": -0.30259402881969105, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.019316524267196655}, {"id": 60, "seek": 31904, "start": 325.0, "end": 333.92, "text": " isolation, actually it is 10 times higher than compared in process isolations.", "tokens": [50662, 16001, 11, 767, 309, 307, 1266, 1413, 2946, 813, 5347, 294, 1399, 7381, 763, 13, 51108], "temperature": 0.0, "avg_logprob": -0.30259402881969105, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.019316524267196655}, {"id": 61, "seek": 31904, "start": 333.92, "end": 344.52000000000004, "text": " But the gap is here actually can be provided best of the board wars.", "tokens": [51108, 583, 264, 7417, 307, 510, 767, 393, 312, 5649, 1151, 295, 264, 3150, 13718, 13, 51638], "temperature": 0.0, "avg_logprob": -0.30259402881969105, "compression_ratio": 1.5161290322580645, "no_speech_prob": 0.019316524267196655}, {"id": 62, "seek": 34452, "start": 344.52, "end": 350.56, "text": " It means that can we have integrity and failure boundaries similar to process-based isolations", "tokens": [50364, 467, 1355, 300, 393, 321, 362, 16000, 293, 7763, 13180, 2531, 281, 1399, 12, 6032, 7381, 763, 50666], "temperature": 0.0, "avg_logprob": -0.26237347920735676, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.4332330524921417}, {"id": 63, "seek": 34452, "start": 350.56, "end": 355.88, "text": " and we want to also have overheads similar to in process isolation.", "tokens": [50666, 293, 321, 528, 281, 611, 362, 19922, 82, 2531, 281, 294, 1399, 16001, 13, 50932], "temperature": 0.0, "avg_logprob": -0.26237347920735676, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.4332330524921417}, {"id": 64, "seek": 34452, "start": 355.88, "end": 363.28, "text": " And my goal is firstly maintain the rest application safety and also we want to increase the software", "tokens": [50932, 400, 452, 3387, 307, 27376, 6909, 264, 1472, 3861, 4514, 293, 611, 321, 528, 281, 3488, 264, 4722, 51302], "temperature": 0.0, "avg_logprob": -0.26237347920735676, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.4332330524921417}, {"id": 65, "seek": 34452, "start": 363.28, "end": 371.52, "text": " resilience of rest applications and also how we can provide ease of use in the development.", "tokens": [51302, 19980, 295, 1472, 5821, 293, 611, 577, 321, 393, 2893, 12708, 295, 764, 294, 264, 3250, 13, 51714], "temperature": 0.0, "avg_logprob": -0.26237347920735676, "compression_ratio": 1.7536945812807883, "no_speech_prob": 0.4332330524921417}, {"id": 66, "seek": 37452, "start": 375.52, "end": 380.15999999999997, "text": " In my early work, we provide some approach for C applications.", "tokens": [50414, 682, 452, 2440, 589, 11, 321, 2893, 512, 3109, 337, 383, 5821, 13, 50646], "temperature": 0.0, "avg_logprob": -0.2925600324358259, "compression_ratio": 1.6860986547085202, "no_speech_prob": 0.014064991846680641}, {"id": 67, "seek": 37452, "start": 380.15999999999997, "end": 386.32, "text": " This is secure rewind and discard and this is an approach for recovering vulnerable application", "tokens": [50646, 639, 307, 7144, 41458, 293, 31597, 293, 341, 307, 364, 3109, 337, 29180, 10955, 3861, 50954], "temperature": 0.0, "avg_logprob": -0.2925600324358259, "compression_ratio": 1.6860986547085202, "no_speech_prob": 0.014064991846680641}, {"id": 68, "seek": 37452, "start": 386.32, "end": 390.32, "text": " after an attack is detected.", "tokens": [50954, 934, 364, 2690, 307, 21896, 13, 51154], "temperature": 0.0, "avg_logprob": -0.2925600324358259, "compression_ratio": 1.6860986547085202, "no_speech_prob": 0.014064991846680641}, {"id": 69, "seek": 37452, "start": 390.32, "end": 392.12, "text": " And how we achieve that stuff?", "tokens": [51154, 400, 577, 321, 4584, 300, 1507, 30, 51244], "temperature": 0.0, "avg_logprob": -0.2925600324358259, "compression_ratio": 1.6860986547085202, "no_speech_prob": 0.014064991846680641}, {"id": 70, "seek": 37452, "start": 392.12, "end": 396.96, "text": " First we compartment the application in the distinct domains and we want to make sure that", "tokens": [51244, 2386, 321, 26505, 264, 3861, 294, 264, 10644, 25514, 293, 321, 528, 281, 652, 988, 300, 51486], "temperature": 0.0, "avg_logprob": -0.2925600324358259, "compression_ratio": 1.6860986547085202, "no_speech_prob": 0.014064991846680641}, {"id": 71, "seek": 37452, "start": 396.96, "end": 402.91999999999996, "text": " a memory defect with a domain must only affect that domain memory.", "tokens": [51486, 257, 4675, 16445, 365, 257, 9274, 1633, 787, 3345, 300, 9274, 4675, 13, 51784], "temperature": 0.0, "avg_logprob": -0.2925600324358259, "compression_ratio": 1.6860986547085202, "no_speech_prob": 0.014064991846680641}, {"id": 72, "seek": 40292, "start": 403.32, "end": 407.72, "text": " This approach is relying on hardware assisted software fault-based isolation.", "tokens": [50384, 639, 3109, 307, 24140, 322, 8837, 30291, 4722, 7441, 12, 6032, 16001, 13, 50604], "temperature": 0.0, "avg_logprob": -0.4053151082184355, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.007263920735567808}, {"id": 73, "seek": 40292, "start": 407.72, "end": 411.52000000000004, "text": " This is a protection key for user space.", "tokens": [50604, 639, 307, 257, 6334, 2141, 337, 4195, 1901, 13, 50794], "temperature": 0.0, "avg_logprob": -0.4053151082184355, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.007263920735567808}, {"id": 74, "seek": 40292, "start": 414.12, "end": 416.32, "text": " And also how I detect it?", "tokens": [50924, 400, 611, 577, 286, 5531, 309, 30, 51034], "temperature": 0.0, "avg_logprob": -0.4053151082184355, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.007263920735567808}, {"id": 75, "seek": 40292, "start": 416.32, "end": 424.52000000000004, "text": " I use different pre-existing detection mechanism, for example, stack canneries and domain violations.", "tokens": [51034, 286, 764, 819, 659, 12, 36447, 17784, 7513, 11, 337, 1365, 11, 8630, 393, 1193, 530, 293, 9274, 30405, 13, 51444], "temperature": 0.0, "avg_logprob": -0.4053151082184355, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.007263920735567808}, {"id": 76, "seek": 42452, "start": 425.52, "end": 433.12, "text": " And as a result of this work, we publish some C library, SDRet library.", "tokens": [50414, 400, 382, 257, 1874, 295, 341, 589, 11, 321, 11374, 512, 383, 6405, 11, 318, 9301, 302, 6405, 13, 50794], "temperature": 0.0, "avg_logprob": -0.24446256458759308, "compression_ratio": 1.31875, "no_speech_prob": 0.021188057959079742}, {"id": 77, "seek": 42452, "start": 433.12, "end": 437.12, "text": " If you want to check out, you can scan the QR code.", "tokens": [50794, 759, 291, 528, 281, 1520, 484, 11, 291, 393, 11049, 264, 32784, 3089, 13, 50994], "temperature": 0.0, "avg_logprob": -0.24446256458759308, "compression_ratio": 1.31875, "no_speech_prob": 0.021188057959079742}, {"id": 78, "seek": 42452, "start": 439.12, "end": 442.91999999999996, "text": " Now I would like to explain the high-level idea.", "tokens": [51094, 823, 286, 576, 411, 281, 2903, 264, 1090, 12, 12418, 1558, 13, 51284], "temperature": 0.0, "avg_logprob": -0.24446256458759308, "compression_ratio": 1.31875, "no_speech_prob": 0.021188057959079742}, {"id": 79, "seek": 42452, "start": 442.91999999999996, "end": 446.12, "text": " We have function F and we have unsafe.", "tokens": [51284, 492, 362, 2445, 479, 293, 321, 362, 35948, 13, 51444], "temperature": 0.0, "avg_logprob": -0.24446256458759308, "compression_ratio": 1.31875, "no_speech_prob": 0.021188057959079742}, {"id": 80, "seek": 44612, "start": 446.72, "end": 456.72, "text": " And if you write just some box on top of that, we want to have some memory safety guarantees", "tokens": [50394, 400, 498, 291, 2464, 445, 512, 2424, 322, 1192, 295, 300, 11, 321, 528, 281, 362, 512, 4675, 4514, 32567, 50894], "temperature": 0.0, "avg_logprob": -0.23057344224717882, "compression_ratio": 1.6826347305389222, "no_speech_prob": 0.011841673403978348}, {"id": 81, "seek": 44612, "start": 456.72, "end": 458.72, "text": " and we want to have some isolation.", "tokens": [50894, 293, 321, 528, 281, 362, 512, 16001, 13, 50994], "temperature": 0.0, "avg_logprob": -0.23057344224717882, "compression_ratio": 1.6826347305389222, "no_speech_prob": 0.011841673403978348}, {"id": 82, "seek": 44612, "start": 458.72, "end": 461.72, "text": " And let's get started.", "tokens": [50994, 400, 718, 311, 483, 1409, 13, 51144], "temperature": 0.0, "avg_logprob": -0.23057344224717882, "compression_ratio": 1.6826347305389222, "no_speech_prob": 0.011841673403978348}, {"id": 83, "seek": 44612, "start": 461.72, "end": 468.72, "text": " We have parent domain and we want to run this function F in another domain.", "tokens": [51144, 492, 362, 2596, 9274, 293, 321, 528, 281, 1190, 341, 2445, 479, 294, 1071, 9274, 13, 51494], "temperature": 0.0, "avg_logprob": -0.23057344224717882, "compression_ratio": 1.6826347305389222, "no_speech_prob": 0.011841673403978348}, {"id": 84, "seek": 44612, "start": 468.72, "end": 472.72, "text": " Another domain means stacks that can heap isolations.", "tokens": [51494, 3996, 9274, 1355, 30792, 300, 393, 33591, 7381, 763, 13, 51694], "temperature": 0.0, "avg_logprob": -0.23057344224717882, "compression_ratio": 1.6826347305389222, "no_speech_prob": 0.011841673403978348}, {"id": 85, "seek": 47272, "start": 473.72, "end": 478.72, "text": " It means that I want to run this function F in another domain.", "tokens": [50414, 467, 1355, 300, 286, 528, 281, 1190, 341, 2445, 479, 294, 1071, 9274, 13, 50664], "temperature": 0.0, "avg_logprob": -0.21296883918143608, "compression_ratio": 1.7177914110429449, "no_speech_prob": 0.011423297226428986}, {"id": 86, "seek": 47272, "start": 480.72, "end": 486.72, "text": " And to run my function in the nested domain D, firstly I need to push the argument.", "tokens": [50764, 400, 281, 1190, 452, 2445, 294, 264, 15646, 292, 9274, 413, 11, 27376, 286, 643, 281, 2944, 264, 6770, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21296883918143608, "compression_ratio": 1.7177914110429449, "no_speech_prob": 0.011423297226428986}, {"id": 87, "seek": 47272, "start": 486.72, "end": 492.72, "text": " I need to enter domain D and pull argument from the parent domain.", "tokens": [51064, 286, 643, 281, 3242, 9274, 413, 293, 2235, 6770, 490, 264, 2596, 9274, 13, 51364], "temperature": 0.0, "avg_logprob": -0.21296883918143608, "compression_ratio": 1.7177914110429449, "no_speech_prob": 0.011423297226428986}, {"id": 88, "seek": 47272, "start": 492.72, "end": 494.72, "text": " And invoke F.", "tokens": [51364, 400, 41117, 479, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21296883918143608, "compression_ratio": 1.7177914110429449, "no_speech_prob": 0.011423297226428986}, {"id": 89, "seek": 47272, "start": 495.72, "end": 500.72, "text": " I am executing applications, execute the function F.", "tokens": [51514, 286, 669, 32368, 5821, 11, 14483, 264, 2445, 479, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21296883918143608, "compression_ratio": 1.7177914110429449, "no_speech_prob": 0.011423297226428986}, {"id": 90, "seek": 50072, "start": 500.72, "end": 504.72, "text": " And the question is that is there something bad or not?", "tokens": [50364, 400, 264, 1168, 307, 300, 307, 456, 746, 1578, 420, 406, 30, 50564], "temperature": 0.0, "avg_logprob": -0.20310889094708914, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.017081892117857933}, {"id": 91, "seek": 50072, "start": 504.72, "end": 510.72, "text": " But we have a guarantee that now if nested domain has some memory vulnerability,", "tokens": [50564, 583, 321, 362, 257, 10815, 300, 586, 498, 15646, 292, 9274, 575, 512, 4675, 24210, 11, 50864], "temperature": 0.0, "avg_logprob": -0.20310889094708914, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.017081892117857933}, {"id": 92, "seek": 50072, "start": 510.72, "end": 513.72, "text": " it will not affect the parent domain memory.", "tokens": [50864, 309, 486, 406, 3345, 264, 2596, 9274, 4675, 13, 51014], "temperature": 0.0, "avg_logprob": -0.20310889094708914, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.017081892117857933}, {"id": 93, "seek": 50072, "start": 513.72, "end": 516.72, "text": " It means that parent domain is still secure.", "tokens": [51014, 467, 1355, 300, 2596, 9274, 307, 920, 7144, 13, 51164], "temperature": 0.0, "avg_logprob": -0.20310889094708914, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.017081892117857933}, {"id": 94, "seek": 50072, "start": 516.72, "end": 521.72, "text": " And I am offering saying that you don't need to create your application, actually.", "tokens": [51164, 400, 286, 669, 8745, 1566, 300, 291, 500, 380, 643, 281, 1884, 428, 3861, 11, 767, 13, 51414], "temperature": 0.0, "avg_logprob": -0.20310889094708914, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.017081892117857933}, {"id": 95, "seek": 50072, "start": 521.72, "end": 527.72, "text": " You can just continue the execution.", "tokens": [51414, 509, 393, 445, 2354, 264, 15058, 13, 51714], "temperature": 0.0, "avg_logprob": -0.20310889094708914, "compression_ratio": 1.5799086757990868, "no_speech_prob": 0.017081892117857933}, {"id": 96, "seek": 53072, "start": 530.72, "end": 537.72, "text": " How I am offering, probably all of you know that this RAS says there's some API for panic.", "tokens": [50364, 1012, 286, 669, 8745, 11, 1391, 439, 295, 291, 458, 300, 341, 497, 3160, 1619, 456, 311, 512, 9362, 337, 14783, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2559163339676396, "compression_ratio": 1.4378698224852071, "no_speech_prob": 0.011374705471098423}, {"id": 97, "seek": 53072, "start": 539.72, "end": 548.72, "text": " And we run the function F in the nested domain and after that we are checking the result.", "tokens": [50814, 400, 321, 1190, 264, 2445, 479, 294, 264, 15646, 292, 9274, 293, 934, 300, 321, 366, 8568, 264, 1874, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2559163339676396, "compression_ratio": 1.4378698224852071, "no_speech_prob": 0.011374705471098423}, {"id": 98, "seek": 53072, "start": 548.72, "end": 557.72, "text": " If results say that yes, you have something bad things happens", "tokens": [51264, 759, 3542, 584, 300, 2086, 11, 291, 362, 746, 1578, 721, 2314, 51714], "temperature": 0.0, "avg_logprob": -0.2559163339676396, "compression_ratio": 1.4378698224852071, "no_speech_prob": 0.011374705471098423}, {"id": 99, "seek": 55772, "start": 557.72, "end": 562.72, "text": " and for example I can detect stack memory overflow or domain-domain violations,", "tokens": [50364, 293, 337, 1365, 286, 393, 5531, 8630, 4675, 37772, 420, 9274, 12, 4121, 491, 30405, 11, 50614], "temperature": 0.0, "avg_logprob": -0.16826036116656135, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00933728739619255}, {"id": 100, "seek": 55772, "start": 562.72, "end": 564.72, "text": " it will return error.", "tokens": [50614, 309, 486, 2736, 6713, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16826036116656135, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00933728739619255}, {"id": 101, "seek": 55772, "start": 565.72, "end": 570.72, "text": " If everything is okay, we don't need to do anything, it will just return okay.", "tokens": [50764, 759, 1203, 307, 1392, 11, 321, 500, 380, 643, 281, 360, 1340, 11, 309, 486, 445, 2736, 1392, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16826036116656135, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00933728739619255}, {"id": 102, "seek": 55772, "start": 570.72, "end": 577.72, "text": " But the idea is that actually we are using this API, panic,", "tokens": [51014, 583, 264, 1558, 307, 300, 767, 321, 366, 1228, 341, 9362, 11, 14783, 11, 51364], "temperature": 0.0, "avg_logprob": -0.16826036116656135, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00933728739619255}, {"id": 103, "seek": 55772, "start": 577.72, "end": 581.72, "text": " but we are actually adding a new feature.", "tokens": [51364, 457, 321, 366, 767, 5127, 257, 777, 4111, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16826036116656135, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00933728739619255}, {"id": 104, "seek": 55772, "start": 581.72, "end": 583.72, "text": " Panic has also memory safety guarantees.", "tokens": [51564, 7557, 299, 575, 611, 4675, 4514, 32567, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16826036116656135, "compression_ratio": 1.5603864734299517, "no_speech_prob": 0.00933728739619255}, {"id": 105, "seek": 58372, "start": 583.72, "end": 592.72, "text": " It means that when panic happens, you can still continue your execution.", "tokens": [50364, 467, 1355, 300, 562, 14783, 2314, 11, 291, 393, 920, 2354, 428, 15058, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16984338963285406, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.007157189305871725}, {"id": 106, "seek": 58372, "start": 595.72, "end": 599.72, "text": " And after that I explain this rewind and discard.", "tokens": [50964, 400, 934, 300, 286, 2903, 341, 41458, 293, 31597, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16984338963285406, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.007157189305871725}, {"id": 107, "seek": 58372, "start": 599.72, "end": 605.72, "text": " And if nothing happens, if we didn't detect any memory safety violations,", "tokens": [51164, 400, 498, 1825, 2314, 11, 498, 321, 994, 380, 5531, 604, 4675, 4514, 30405, 11, 51464], "temperature": 0.0, "avg_logprob": -0.16984338963285406, "compression_ratio": 1.3900709219858156, "no_speech_prob": 0.007157189305871725}, {"id": 108, "seek": 60572, "start": 606.72, "end": 613.72, "text": " we will just push mutable arguments and return value and we will return parent domain.", "tokens": [50414, 321, 486, 445, 2944, 5839, 712, 12869, 293, 2736, 2158, 293, 321, 486, 2736, 2596, 9274, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3551824233111213, "compression_ratio": 1.3006993006993006, "no_speech_prob": 0.03513266146183014}, {"id": 109, "seek": 60572, "start": 614.72, "end": 622.72, "text": " For this whole process in high-level idea, this STRAAT API,", "tokens": [50814, 1171, 341, 1379, 1399, 294, 1090, 12, 12418, 1558, 11, 341, 4904, 3750, 2218, 9362, 11, 51214], "temperature": 0.0, "avg_logprob": -0.3551824233111213, "compression_ratio": 1.3006993006993006, "no_speech_prob": 0.03513266146183014}, {"id": 110, "seek": 60572, "start": 622.72, "end": 626.72, "text": " CAPI is already offering this pink box,", "tokens": [51214, 383, 4715, 40, 307, 1217, 8745, 341, 7022, 2424, 11, 51414], "temperature": 0.0, "avg_logprob": -0.3551824233111213, "compression_ratio": 1.3006993006993006, "no_speech_prob": 0.03513266146183014}, {"id": 111, "seek": 62672, "start": 626.72, "end": 636.72, "text": " but the point for this blue box is how we can track the rest of the types of the arguments", "tokens": [50364, 457, 264, 935, 337, 341, 3344, 2424, 307, 577, 321, 393, 2837, 264, 1472, 295, 264, 3467, 295, 264, 12869, 50864], "temperature": 0.0, "avg_logprob": -0.1888008279315496, "compression_ratio": 1.5684931506849316, "no_speech_prob": 0.10066669434309006}, {"id": 112, "seek": 62672, "start": 636.72, "end": 642.72, "text": " and how we can push another domain and how we can pull it again.", "tokens": [50864, 293, 577, 321, 393, 2944, 1071, 9274, 293, 577, 321, 393, 2235, 309, 797, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1888008279315496, "compression_ratio": 1.5684931506849316, "no_speech_prob": 0.10066669434309006}, {"id": 113, "seek": 62672, "start": 645.72, "end": 654.72, "text": " And probably all of you know that we have a lot of serialization creator.", "tokens": [51314, 400, 1391, 439, 295, 291, 458, 300, 321, 362, 257, 688, 295, 17436, 2144, 14181, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1888008279315496, "compression_ratio": 1.5684931506849316, "no_speech_prob": 0.10066669434309006}, {"id": 114, "seek": 65472, "start": 654.72, "end": 656.72, "text": " And what is serialization?", "tokens": [50364, 400, 437, 307, 17436, 2144, 30, 50464], "temperature": 0.0, "avg_logprob": -0.2514034839386636, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.007019795011729002}, {"id": 115, "seek": 65472, "start": 656.72, "end": 661.72, "text": " It means serialization, we should encode the data in a format,", "tokens": [50464, 467, 1355, 17436, 2144, 11, 321, 820, 2058, 1429, 264, 1412, 294, 257, 7877, 11, 50714], "temperature": 0.0, "avg_logprob": -0.2514034839386636, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.007019795011729002}, {"id": 116, "seek": 65472, "start": 661.72, "end": 667.72, "text": " like I just put it in a jar, and after that we should deserialize.", "tokens": [50714, 411, 286, 445, 829, 309, 294, 257, 15181, 11, 293, 934, 300, 321, 820, 730, 260, 831, 1125, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2514034839386636, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.007019795011729002}, {"id": 117, "seek": 65472, "start": 667.72, "end": 672.72, "text": " When we jump to the nested domain, we should deserialize.", "tokens": [51014, 1133, 321, 3012, 281, 264, 15646, 292, 9274, 11, 321, 820, 730, 260, 831, 1125, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2514034839386636, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.007019795011729002}, {"id": 118, "seek": 65472, "start": 675.72, "end": 680.72, "text": " And as a case study, I work on two RAS crates, BINCOT and ABONOMATIONS.", "tokens": [51414, 400, 382, 257, 1389, 2979, 11, 286, 589, 322, 732, 497, 3160, 941, 1024, 11, 363, 1464, 34, 5068, 293, 13838, 1928, 5251, 22528, 50, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2514034839386636, "compression_ratio": 1.5543478260869565, "no_speech_prob": 0.007019795011729002}, {"id": 119, "seek": 68072, "start": 681.72, "end": 687.72, "text": " BINCOT is a transformed data in a common binary representation", "tokens": [50414, 363, 1464, 34, 5068, 307, 257, 16894, 1412, 294, 257, 2689, 17434, 10290, 50714], "temperature": 0.0, "avg_logprob": -0.2509069834669975, "compression_ratio": 1.4352331606217616, "no_speech_prob": 0.020354880020022392}, {"id": 120, "seek": 68072, "start": 687.72, "end": 691.72, "text": " that allows passing data between different platforms.", "tokens": [50714, 300, 4045, 8437, 1412, 1296, 819, 9473, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2509069834669975, "compression_ratio": 1.4352331606217616, "no_speech_prob": 0.020354880020022392}, {"id": 121, "seek": 68072, "start": 691.72, "end": 696.72, "text": " And only the mention that SANDCRAS is process-based isolation mechanisms", "tokens": [50914, 400, 787, 264, 2152, 300, 318, 8070, 18547, 3160, 307, 1399, 12, 6032, 16001, 15902, 51164], "temperature": 0.0, "avg_logprob": -0.2509069834669975, "compression_ratio": 1.4352331606217616, "no_speech_prob": 0.020354880020022392}, {"id": 122, "seek": 68072, "start": 696.72, "end": 698.72, "text": " and that uses BINCOT.", "tokens": [51164, 293, 300, 4960, 363, 1464, 34, 5068, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2509069834669975, "compression_ratio": 1.4352331606217616, "no_speech_prob": 0.020354880020022392}, {"id": 123, "seek": 68072, "start": 698.72, "end": 704.72, "text": " But actually, we realize that BINCOT, for our cases, is redundant", "tokens": [51264, 583, 767, 11, 321, 4325, 300, 363, 1464, 34, 5068, 11, 337, 527, 3331, 11, 307, 40997, 51564], "temperature": 0.0, "avg_logprob": -0.2509069834669975, "compression_ratio": 1.4352331606217616, "no_speech_prob": 0.020354880020022392}, {"id": 124, "seek": 70472, "start": 704.72, "end": 711.72, "text": " because SANDCRAS and also STDF-FI, we are ingested in single platform.", "tokens": [50364, 570, 318, 8070, 18547, 3160, 293, 611, 4904, 35, 37, 12, 38568, 11, 321, 366, 3957, 21885, 294, 2167, 3663, 13, 50714], "temperature": 0.0, "avg_logprob": -0.303968901044867, "compression_ratio": 1.447488584474886, "no_speech_prob": 0.002505271462723613}, {"id": 125, "seek": 70472, "start": 713.72, "end": 720.72, "text": " And I explore ABONOMATIONS, it's based on Rust Object MemoLayout presentations,", "tokens": [50814, 400, 286, 6839, 13838, 1928, 5251, 22528, 50, 11, 309, 311, 2361, 322, 34952, 24753, 8731, 78, 43, 320, 346, 18964, 11, 51164], "temperature": 0.0, "avg_logprob": -0.303968901044867, "compression_ratio": 1.447488584474886, "no_speech_prob": 0.002505271462723613}, {"id": 126, "seek": 70472, "start": 720.72, "end": 723.72, "text": " but it is just for specific single platform.", "tokens": [51164, 457, 309, 307, 445, 337, 2685, 2167, 3663, 13, 51314], "temperature": 0.0, "avg_logprob": -0.303968901044867, "compression_ratio": 1.447488584474886, "no_speech_prob": 0.002505271462723613}, {"id": 127, "seek": 70472, "start": 723.72, "end": 727.72, "text": " And it doesn't store any metadata or any type systems.", "tokens": [51314, 400, 309, 1177, 380, 3531, 604, 26603, 420, 604, 2010, 3652, 13, 51514], "temperature": 0.0, "avg_logprob": -0.303968901044867, "compression_ratio": 1.447488584474886, "no_speech_prob": 0.002505271462723613}, {"id": 128, "seek": 70472, "start": 728.72, "end": 733.72, "text": " It can deserialize the place without need for another cooperation.", "tokens": [51564, 467, 393, 730, 260, 831, 1125, 264, 1081, 1553, 643, 337, 1071, 14968, 13, 51814], "temperature": 0.0, "avg_logprob": -0.303968901044867, "compression_ratio": 1.447488584474886, "no_speech_prob": 0.002505271462723613}, {"id": 129, "seek": 73472, "start": 735.72, "end": 740.72, "text": " And we realize that ABONOMATIONS is efficient and suitable for our purpose.", "tokens": [50414, 400, 321, 4325, 300, 13838, 1928, 5251, 22528, 50, 307, 7148, 293, 12873, 337, 527, 4334, 13, 50664], "temperature": 0.0, "avg_logprob": -0.23215491955096906, "compression_ratio": 1.3940886699507389, "no_speech_prob": 0.0022599443327635527}, {"id": 130, "seek": 73472, "start": 742.72, "end": 744.72, "text": " And we did some benchmarking.", "tokens": [50764, 400, 321, 630, 512, 18927, 278, 13, 50864], "temperature": 0.0, "avg_logprob": -0.23215491955096906, "compression_ratio": 1.3940886699507389, "no_speech_prob": 0.0022599443327635527}, {"id": 131, "seek": 73472, "start": 744.72, "end": 748.72, "text": " SNAPE is a fast comparison C-library from Google,", "tokens": [50864, 318, 5321, 5208, 307, 257, 2370, 9660, 383, 12, 75, 6414, 822, 490, 3329, 11, 51064], "temperature": 0.0, "avg_logprob": -0.23215491955096906, "compression_ratio": 1.3940886699507389, "no_speech_prob": 0.0022599443327635527}, {"id": 132, "seek": 73472, "start": 748.72, "end": 752.72, "text": " and it designed for high-speed compression and the compression of data.", "tokens": [51064, 293, 309, 4761, 337, 1090, 12, 22746, 19355, 293, 264, 19355, 295, 1412, 13, 51264], "temperature": 0.0, "avg_logprob": -0.23215491955096906, "compression_ratio": 1.3940886699507389, "no_speech_prob": 0.0022599443327635527}, {"id": 133, "seek": 73472, "start": 753.72, "end": 758.72, "text": " And also presented as an FFI example in the Rust books.", "tokens": [51314, 400, 611, 8212, 382, 364, 479, 38568, 1365, 294, 264, 34952, 3642, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23215491955096906, "compression_ratio": 1.3940886699507389, "no_speech_prob": 0.0022599443327635527}, {"id": 134, "seek": 75872, "start": 759.72, "end": 767.72, "text": " And what we compare, compress and uncompress random-generated data of different sizes.", "tokens": [50414, 400, 437, 321, 6794, 11, 14778, 293, 8585, 11637, 4974, 12, 21848, 770, 1412, 295, 819, 11602, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21192791037363548, "compression_ratio": 1.4322916666666667, "no_speech_prob": 0.0035338166635483503}, {"id": 135, "seek": 75872, "start": 767.72, "end": 771.72, "text": " And we measure execution time of each operation for different serialization creators,", "tokens": [50814, 400, 321, 3481, 15058, 565, 295, 1184, 6916, 337, 819, 17436, 2144, 16039, 11, 51014], "temperature": 0.0, "avg_logprob": -0.21192791037363548, "compression_ratio": 1.4322916666666667, "no_speech_prob": 0.0035338166635483503}, {"id": 136, "seek": 75872, "start": 771.72, "end": 773.72, "text": " like BINCOT and ABONOMATION.", "tokens": [51014, 411, 363, 1464, 34, 5068, 293, 13838, 1928, 5251, 22528, 13, 51114], "temperature": 0.0, "avg_logprob": -0.21192791037363548, "compression_ratio": 1.4322916666666667, "no_speech_prob": 0.0035338166635483503}, {"id": 137, "seek": 75872, "start": 776.72, "end": 781.72, "text": " I show as a demo here, when I did all stuff, I just used a sandbox macro.", "tokens": [51264, 286, 855, 382, 257, 10723, 510, 11, 562, 286, 630, 439, 1507, 11, 286, 445, 1143, 257, 42115, 18887, 13, 51514], "temperature": 0.0, "avg_logprob": -0.21192791037363548, "compression_ratio": 1.4322916666666667, "no_speech_prob": 0.0035338166635483503}, {"id": 138, "seek": 78172, "start": 782.72, "end": 791.72, "text": " And sandbox macro is ensure that this compressed function is completely run in the different domain,", "tokens": [50414, 400, 42115, 18887, 307, 5586, 300, 341, 30353, 2445, 307, 2584, 1190, 294, 264, 819, 9274, 11, 50864], "temperature": 0.0, "avg_logprob": -0.24487970836126982, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.03183482587337494}, {"id": 139, "seek": 78172, "start": 791.72, "end": 793.72, "text": " and it will not affect the parent domain.", "tokens": [50864, 293, 309, 486, 406, 3345, 264, 2596, 9274, 13, 50964], "temperature": 0.0, "avg_logprob": -0.24487970836126982, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.03183482587337494}, {"id": 140, "seek": 78172, "start": 793.72, "end": 796.72, "text": " And uncompress is also here.", "tokens": [50964, 400, 8585, 11637, 307, 611, 510, 13, 51114], "temperature": 0.0, "avg_logprob": -0.24487970836126982, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.03183482587337494}, {"id": 141, "seek": 78172, "start": 798.72, "end": 804.72, "text": " Here we tested with different number of bytes, and this is the execution time.", "tokens": [51214, 1692, 321, 8246, 365, 819, 1230, 295, 36088, 11, 293, 341, 307, 264, 15058, 565, 13, 51514], "temperature": 0.0, "avg_logprob": -0.24487970836126982, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.03183482587337494}, {"id": 142, "seek": 78172, "start": 806.72, "end": 810.72, "text": " What is our lesson learned stuff?", "tokens": [51614, 708, 307, 527, 6898, 3264, 1507, 30, 51814], "temperature": 0.0, "avg_logprob": -0.24487970836126982, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.03183482587337494}, {"id": 143, "seek": 81172, "start": 811.72, "end": 815.72, "text": " Of course, if you have number of bytes, if it is smaller,", "tokens": [50364, 2720, 1164, 11, 498, 291, 362, 1230, 295, 36088, 11, 498, 309, 307, 4356, 11, 50564], "temperature": 0.0, "avg_logprob": -0.22308441162109374, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.005941505543887615}, {"id": 144, "seek": 81172, "start": 815.72, "end": 820.72, "text": " in process isolation approach clearly outperforms compared to process-based isolations.", "tokens": [50564, 294, 1399, 16001, 3109, 4448, 484, 26765, 82, 5347, 281, 1399, 12, 6032, 7381, 763, 13, 50814], "temperature": 0.0, "avg_logprob": -0.22308441162109374, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.005941505543887615}, {"id": 145, "seek": 81172, "start": 822.72, "end": 827.72, "text": " Because if you have in process isolation, you will not so much overhead.", "tokens": [50914, 1436, 498, 291, 362, 294, 1399, 16001, 11, 291, 486, 406, 370, 709, 19922, 13, 51164], "temperature": 0.0, "avg_logprob": -0.22308441162109374, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.005941505543887615}, {"id": 146, "seek": 81172, "start": 827.72, "end": 832.72, "text": " But the interesting start with later,", "tokens": [51164, 583, 264, 1880, 722, 365, 1780, 11, 51414], "temperature": 0.0, "avg_logprob": -0.22308441162109374, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.005941505543887615}, {"id": 147, "seek": 81172, "start": 835.72, "end": 839.72, "text": " we realize that even for modest-sized arguments,", "tokens": [51564, 321, 4325, 300, 754, 337, 25403, 12, 20614, 12869, 11, 51764], "temperature": 0.0, "avg_logprob": -0.22308441162109374, "compression_ratio": 1.6137566137566137, "no_speech_prob": 0.005941505543887615}, {"id": 148, "seek": 83972, "start": 839.72, "end": 843.72, "text": " the context, which is not important anymore,", "tokens": [50364, 264, 4319, 11, 597, 307, 406, 1021, 3602, 11, 50564], "temperature": 0.0, "avg_logprob": -0.24053262074788412, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0025009342934936285}, {"id": 149, "seek": 83972, "start": 843.72, "end": 847.72, "text": " is dominated by data serialization method.", "tokens": [50564, 307, 23755, 538, 1412, 17436, 2144, 3170, 13, 50764], "temperature": 0.0, "avg_logprob": -0.24053262074788412, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0025009342934936285}, {"id": 150, "seek": 83972, "start": 847.72, "end": 849.72, "text": " What you use.", "tokens": [50764, 708, 291, 764, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24053262074788412, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0025009342934936285}, {"id": 151, "seek": 83972, "start": 854.72, "end": 862.72, "text": " And our lesson learned tree, the data serialization method can significantly impact performance,", "tokens": [51114, 400, 527, 6898, 3264, 4230, 11, 264, 1412, 17436, 2144, 3170, 393, 10591, 2712, 3389, 11, 51514], "temperature": 0.0, "avg_logprob": -0.24053262074788412, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0025009342934936285}, {"id": 152, "seek": 83972, "start": 862.72, "end": 866.72, "text": " and it is critical to optimize it for different cases.", "tokens": [51514, 293, 309, 307, 4924, 281, 19719, 309, 337, 819, 3331, 13, 51714], "temperature": 0.0, "avg_logprob": -0.24053262074788412, "compression_ratio": 1.5240963855421688, "no_speech_prob": 0.0025009342934936285}, {"id": 153, "seek": 86672, "start": 867.72, "end": 872.72, "text": " If you are working on this serialization creator or developing,", "tokens": [50414, 759, 291, 366, 1364, 322, 341, 17436, 2144, 14181, 420, 6416, 11, 50664], "temperature": 0.0, "avg_logprob": -0.18541319616909685, "compression_ratio": 1.3719512195121952, "no_speech_prob": 0.005611109547317028}, {"id": 154, "seek": 86672, "start": 872.72, "end": 878.72, "text": " we can talk about it, how we can improve or how we can fit our use cases.", "tokens": [50664, 321, 393, 751, 466, 309, 11, 577, 321, 393, 3470, 420, 577, 321, 393, 3318, 527, 764, 3331, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18541319616909685, "compression_ratio": 1.3719512195121952, "no_speech_prob": 0.005611109547317028}, {"id": 155, "seek": 86672, "start": 882.72, "end": 889.72, "text": " In summary, we introduced secure rewind and discard with isolated domains for REST-FFI.", "tokens": [51164, 682, 12691, 11, 321, 7268, 7144, 41458, 293, 31597, 365, 14621, 25514, 337, 497, 14497, 12, 6345, 40, 13, 51514], "temperature": 0.0, "avg_logprob": -0.18541319616909685, "compression_ratio": 1.3719512195121952, "no_speech_prob": 0.005611109547317028}, {"id": 156, "seek": 88972, "start": 890.72, "end": 893.72, "text": " We have two goals.", "tokens": [50414, 492, 362, 732, 5493, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2806917491712068, "compression_ratio": 1.6390243902439023, "no_speech_prob": 0.03367307037115097}, {"id": 157, "seek": 88972, "start": 893.72, "end": 900.72, "text": " Firstly, we want to protect integrity of REST application from memory safety violation in unsafe program.", "tokens": [50564, 20042, 11, 321, 528, 281, 2371, 16000, 295, 497, 14497, 3861, 490, 4675, 4514, 22840, 294, 35948, 1461, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2806917491712068, "compression_ratio": 1.6390243902439023, "no_speech_prob": 0.03367307037115097}, {"id": 158, "seek": 88972, "start": 902.72, "end": 906.72, "text": " The main point is that actually I would like to highlight,", "tokens": [51014, 440, 2135, 935, 307, 300, 767, 286, 576, 411, 281, 5078, 11, 51214], "temperature": 0.0, "avg_logprob": -0.2806917491712068, "compression_ratio": 1.6390243902439023, "no_speech_prob": 0.03367307037115097}, {"id": 159, "seek": 88972, "start": 906.72, "end": 909.72, "text": " we are increasing the REST application availability,", "tokens": [51214, 321, 366, 5662, 264, 497, 14497, 3861, 17945, 11, 51364], "temperature": 0.0, "avg_logprob": -0.2806917491712068, "compression_ratio": 1.6390243902439023, "no_speech_prob": 0.03367307037115097}, {"id": 160, "seek": 88972, "start": 909.72, "end": 918.72, "text": " because we have a still option for if unsafe portion of our applications is the some memory safety,", "tokens": [51364, 570, 321, 362, 257, 920, 3614, 337, 498, 35948, 8044, 295, 527, 5821, 307, 264, 512, 4675, 4514, 11, 51814], "temperature": 0.0, "avg_logprob": -0.2806917491712068, "compression_ratio": 1.6390243902439023, "no_speech_prob": 0.03367307037115097}, {"id": 161, "seek": 91872, "start": 918.72, "end": 920.72, "text": " we can return back.", "tokens": [50364, 321, 393, 2736, 646, 13, 50464], "temperature": 0.0, "avg_logprob": -0.2840813622958418, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.004061040934175253}, {"id": 162, "seek": 91872, "start": 920.72, "end": 922.72, "text": " We have option there.", "tokens": [50464, 492, 362, 3614, 456, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2840813622958418, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.004061040934175253}, {"id": 163, "seek": 91872, "start": 923.72, "end": 930.72, "text": " And I provided REST-FFI creators, it is open source,", "tokens": [50614, 400, 286, 5649, 497, 14497, 12, 6345, 40, 16039, 11, 309, 307, 1269, 4009, 11, 50964], "temperature": 0.0, "avg_logprob": -0.2840813622958418, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.004061040934175253}, {"id": 164, "seek": 91872, "start": 930.72, "end": 933.72, "text": " if you would like to try.", "tokens": [50964, 498, 291, 576, 411, 281, 853, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2840813622958418, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.004061040934175253}, {"id": 165, "seek": 91872, "start": 935.72, "end": 937.72, "text": " And what is our takeaway?", "tokens": [51214, 400, 437, 307, 527, 30681, 30, 51314], "temperature": 0.0, "avg_logprob": -0.2840813622958418, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.004061040934175253}, {"id": 166, "seek": 91872, "start": 937.72, "end": 942.72, "text": " Improved isolation approach clearly outperforms compared to process-based isolations.", "tokens": [51314, 8270, 340, 937, 16001, 3109, 4448, 484, 26765, 82, 5347, 281, 1399, 12, 6032, 7381, 763, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2840813622958418, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.004061040934175253}, {"id": 167, "seek": 94272, "start": 943.72, "end": 950.72, "text": " But other important things is that data serialization method can significantly impact the performance.", "tokens": [50414, 583, 661, 1021, 721, 307, 300, 1412, 17436, 2144, 3170, 393, 10591, 2712, 264, 3389, 13, 50764], "temperature": 0.0, "avg_logprob": -0.27865317662556965, "compression_ratio": 1.2477064220183487, "no_speech_prob": 0.06319013237953186}, {"id": 168, "seek": 94272, "start": 951.72, "end": 953.72, "text": " Thank you if you have a question.", "tokens": [50814, 1044, 291, 498, 291, 362, 257, 1168, 13, 50914], "temperature": 0.0, "avg_logprob": -0.27865317662556965, "compression_ratio": 1.2477064220183487, "no_speech_prob": 0.06319013237953186}, {"id": 169, "seek": 95372, "start": 953.72, "end": 972.72, "text": " Can you quickly explain how these domains actually work?", "tokens": [50364, 1664, 291, 2661, 2903, 577, 613, 25514, 767, 589, 30, 51314], "temperature": 0.0, "avg_logprob": -0.23227170456287471, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.23731772601604462}, {"id": 170, "seek": 95372, "start": 972.72, "end": 979.72, "text": " How do you enter a domain and how do you define what part of memory is part of the domain and what is outside the domain?", "tokens": [51314, 1012, 360, 291, 3242, 257, 9274, 293, 577, 360, 291, 6964, 437, 644, 295, 4675, 307, 644, 295, 264, 9274, 293, 437, 307, 2380, 264, 9274, 30, 51664], "temperature": 0.0, "avg_logprob": -0.23227170456287471, "compression_ratio": 1.5344827586206897, "no_speech_prob": 0.23731772601604462}, {"id": 171, "seek": 97972, "start": 980.72, "end": 986.72, "text": " Of course, it is actually handled by my C-Labri before that.", "tokens": [50414, 2720, 1164, 11, 309, 307, 767, 18033, 538, 452, 383, 12, 43, 455, 470, 949, 300, 13, 50714], "temperature": 0.0, "avg_logprob": -0.27615680433299444, "compression_ratio": 1.417142857142857, "no_speech_prob": 0.27415046095848083}, {"id": 172, "seek": 97972, "start": 986.72, "end": 988.72, "text": " I wrote it.", "tokens": [50714, 286, 4114, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.27615680433299444, "compression_ratio": 1.417142857142857, "no_speech_prob": 0.27415046095848083}, {"id": 173, "seek": 97972, "start": 988.72, "end": 996.72, "text": " But for RASPEX, if you just use sandbox macro, it will automatically handle it.", "tokens": [50814, 583, 337, 497, 3160, 5208, 55, 11, 498, 291, 445, 764, 42115, 18887, 11, 309, 486, 6772, 4813, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.27615680433299444, "compression_ratio": 1.417142857142857, "no_speech_prob": 0.27415046095848083}, {"id": 174, "seek": 97972, "start": 996.72, "end": 1007.72, "text": " But if you go into details, for each domain I will create a new stack and new heap memory area.", "tokens": [51214, 583, 498, 291, 352, 666, 4365, 11, 337, 1184, 9274, 286, 486, 1884, 257, 777, 8630, 293, 777, 33591, 4675, 1859, 13, 51764], "temperature": 0.0, "avg_logprob": -0.27615680433299444, "compression_ratio": 1.417142857142857, "no_speech_prob": 0.27415046095848083}, {"id": 175, "seek": 100772, "start": 1007.72, "end": 1019.72, "text": " Early, when there is some talk about this allocator, you can specify for allocators for specific domain.", "tokens": [50364, 18344, 11, 562, 456, 307, 512, 751, 466, 341, 12660, 1639, 11, 291, 393, 16500, 337, 12660, 3391, 337, 2685, 9274, 13, 50964], "temperature": 0.0, "avg_logprob": -0.26327261284216125, "compression_ratio": 1.5502958579881656, "no_speech_prob": 0.11354731023311615}, {"id": 176, "seek": 100772, "start": 1019.72, "end": 1022.72, "text": " Entering a new stack, what does it mean?", "tokens": [50964, 10399, 278, 257, 777, 8630, 11, 437, 775, 309, 914, 30, 51114], "temperature": 0.0, "avg_logprob": -0.26327261284216125, "compression_ratio": 1.5502958579881656, "no_speech_prob": 0.11354731023311615}, {"id": 177, "seek": 100772, "start": 1022.72, "end": 1029.72, "text": " Just change the stack pointer and continue execution there.", "tokens": [51114, 1449, 1319, 264, 8630, 23918, 293, 2354, 15058, 456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.26327261284216125, "compression_ratio": 1.5502958579881656, "no_speech_prob": 0.11354731023311615}, {"id": 178, "seek": 100772, "start": 1029.72, "end": 1034.72, "text": " So you do a stack switch and share it to an entry point.", "tokens": [51464, 407, 291, 360, 257, 8630, 3679, 293, 2073, 309, 281, 364, 8729, 935, 13, 51714], "temperature": 0.0, "avg_logprob": -0.26327261284216125, "compression_ratio": 1.5502958579881656, "no_speech_prob": 0.11354731023311615}, {"id": 179, "seek": 103472, "start": 1034.72, "end": 1037.72, "text": " But the important point is to do this rewind and discard.", "tokens": [50364, 583, 264, 1021, 935, 307, 281, 360, 341, 41458, 293, 31597, 13, 50514], "temperature": 0.0, "avg_logprob": -0.24529390597562178, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.04852179437875748}, {"id": 180, "seek": 103472, "start": 1037.72, "end": 1042.72, "text": " You should first save your execution context in a secure way.", "tokens": [50514, 509, 820, 700, 3155, 428, 15058, 4319, 294, 257, 7144, 636, 13, 50764], "temperature": 0.0, "avg_logprob": -0.24529390597562178, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.04852179437875748}, {"id": 181, "seek": 103472, "start": 1042.72, "end": 1047.72, "text": " This is the point how we can recover.", "tokens": [50764, 639, 307, 264, 935, 577, 321, 393, 8114, 13, 51014], "temperature": 0.0, "avg_logprob": -0.24529390597562178, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.04852179437875748}, {"id": 182, "seek": 103472, "start": 1047.72, "end": 1050.72, "text": " That is kind of like set-jump and long-jump style.", "tokens": [51014, 663, 307, 733, 295, 411, 992, 12, 73, 1420, 293, 938, 12, 73, 1420, 3758, 13, 51164], "temperature": 0.0, "avg_logprob": -0.24529390597562178, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.04852179437875748}, {"id": 183, "seek": 103472, "start": 1050.72, "end": 1053.72, "text": " Yes, set-jump, long-jump, but in a secure way.", "tokens": [51164, 1079, 11, 992, 12, 73, 1420, 11, 938, 12, 73, 1420, 11, 457, 294, 257, 7144, 636, 13, 51314], "temperature": 0.0, "avg_logprob": -0.24529390597562178, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.04852179437875748}, {"id": 184, "seek": 103472, "start": 1053.72, "end": 1055.72, "text": " Now we have a guarantee that...", "tokens": [51314, 823, 321, 362, 257, 10815, 300, 485, 51414], "temperature": 0.0, "avg_logprob": -0.24529390597562178, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.04852179437875748}, {"id": 185, "seek": 103472, "start": 1055.72, "end": 1061.72, "text": " Then you use some hardware mechanism to make sure that certain domains, certain memory is only accessible.", "tokens": [51414, 1396, 291, 764, 512, 8837, 7513, 281, 652, 988, 300, 1629, 25514, 11, 1629, 4675, 307, 787, 9515, 13, 51714], "temperature": 0.0, "avg_logprob": -0.24529390597562178, "compression_ratio": 1.6485355648535565, "no_speech_prob": 0.04852179437875748}, {"id": 186, "seek": 106172, "start": 1061.72, "end": 1065.72, "text": " Yes, exactly. That is true. That is completely true.", "tokens": [50364, 1079, 11, 2293, 13, 663, 307, 2074, 13, 663, 307, 2584, 2074, 13, 50564], "temperature": 0.0, "avg_logprob": -0.4050605725019406, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.13129852712154388}, {"id": 187, "seek": 106172, "start": 1065.72, "end": 1072.72, "text": " This is the install feature. We are using that one. It is lightweight. That is why.", "tokens": [50564, 639, 307, 264, 3625, 4111, 13, 492, 366, 1228, 300, 472, 13, 467, 307, 22052, 13, 663, 307, 983, 13, 50914], "temperature": 0.0, "avg_logprob": -0.4050605725019406, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.13129852712154388}, {"id": 188, "seek": 106172, "start": 1072.72, "end": 1074.72, "text": " Because you don't need system calls?", "tokens": [50914, 1436, 291, 500, 380, 643, 1185, 5498, 30, 51014], "temperature": 0.0, "avg_logprob": -0.4050605725019406, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.13129852712154388}, {"id": 189, "seek": 106172, "start": 1074.72, "end": 1075.72, "text": " Yes, exactly.", "tokens": [51014, 1079, 11, 2293, 13, 51064], "temperature": 0.0, "avg_logprob": -0.4050605725019406, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.13129852712154388}, {"id": 190, "seek": 106172, "start": 1075.72, "end": 1077.72, "text": " You don't need to use a RAM trip?", "tokens": [51064, 509, 500, 380, 643, 281, 764, 257, 14561, 4931, 30, 51164], "temperature": 0.0, "avg_logprob": -0.4050605725019406, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.13129852712154388}, {"id": 191, "seek": 106172, "start": 1077.72, "end": 1080.72, "text": " Yes, exactly. You have got everything now.", "tokens": [51164, 1079, 11, 2293, 13, 509, 362, 658, 1203, 586, 13, 51314], "temperature": 0.0, "avg_logprob": -0.4050605725019406, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.13129852712154388}, {"id": 192, "seek": 109172, "start": 1091.72, "end": 1094.72, "text": " First, thanks for the great talk.", "tokens": [50364, 2386, 11, 3231, 337, 264, 869, 751, 13, 50514], "temperature": 0.0, "avg_logprob": -0.19794478973785004, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.4716843366622925}, {"id": 193, "seek": 109172, "start": 1094.72, "end": 1099.72, "text": " When deciding which piece of memory you put in the new domain,", "tokens": [50514, 1133, 17990, 597, 2522, 295, 4675, 291, 829, 294, 264, 777, 9274, 11, 50764], "temperature": 0.0, "avg_logprob": -0.19794478973785004, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.4716843366622925}, {"id": 194, "seek": 109172, "start": 1099.72, "end": 1107.72, "text": " the global state is shared between different domains or you copy all the global states?", "tokens": [50764, 264, 4338, 1785, 307, 5507, 1296, 819, 25514, 420, 291, 5055, 439, 264, 4338, 4368, 30, 51164], "temperature": 0.0, "avg_logprob": -0.19794478973785004, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.4716843366622925}, {"id": 195, "seek": 109172, "start": 1107.72, "end": 1113.72, "text": " Current version is just supporting HIP and memory.", "tokens": [51164, 15629, 3037, 307, 445, 7231, 389, 9139, 293, 4675, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19794478973785004, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.4716843366622925}, {"id": 196, "seek": 109172, "start": 1113.72, "end": 1119.72, "text": " HIP and memory, but for the global shared, you should copy and pass it.", "tokens": [51464, 389, 9139, 293, 4675, 11, 457, 337, 264, 4338, 5507, 11, 291, 820, 5055, 293, 1320, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19794478973785004, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.4716843366622925}, {"id": 197, "seek": 111972, "start": 1119.72, "end": 1122.72, "text": " It is not going to be your application. You should change it.", "tokens": [50364, 467, 307, 406, 516, 281, 312, 428, 3861, 13, 509, 820, 1319, 309, 13, 50514], "temperature": 0.0, "avg_logprob": -0.350294926961263, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.11721575260162354}, {"id": 198, "seek": 111972, "start": 1122.72, "end": 1126.72, "text": " But as a future work, I would like to support this.", "tokens": [50514, 583, 382, 257, 2027, 589, 11, 286, 576, 411, 281, 1406, 341, 13, 50714], "temperature": 0.0, "avg_logprob": -0.350294926961263, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.11721575260162354}, {"id": 199, "seek": 111972, "start": 1126.72, "end": 1133.72, "text": " How we can actually sync between different domains to global shared states?", "tokens": [50714, 1012, 321, 393, 767, 20271, 1296, 819, 25514, 281, 4338, 5507, 4368, 30, 51064], "temperature": 0.0, "avg_logprob": -0.350294926961263, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.11721575260162354}, {"id": 200, "seek": 111972, "start": 1133.72, "end": 1136.72, "text": " That could be very costly.", "tokens": [51064, 663, 727, 312, 588, 28328, 13, 51214], "temperature": 0.0, "avg_logprob": -0.350294926961263, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.11721575260162354}, {"id": 201, "seek": 111972, "start": 1136.72, "end": 1140.72, "text": " Sharing and copying the global state could be very costly.", "tokens": [51214, 49060, 293, 27976, 264, 4338, 1785, 727, 312, 588, 28328, 13, 51414], "temperature": 0.0, "avg_logprob": -0.350294926961263, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.11721575260162354}, {"id": 202, "seek": 111972, "start": 1140.72, "end": 1141.72, "text": " Yes, exactly.", "tokens": [51414, 1079, 11, 2293, 13, 51464], "temperature": 0.0, "avg_logprob": -0.350294926961263, "compression_ratio": 1.4974093264248705, "no_speech_prob": 0.11721575260162354}, {"id": 203, "seek": 114172, "start": 1141.72, "end": 1146.72, "text": " For example, here also, even though I have improved the isolations,", "tokens": [50364, 1171, 1365, 11, 510, 611, 11, 754, 1673, 286, 362, 704, 340, 937, 264, 7381, 763, 11, 50614], "temperature": 0.0, "avg_logprob": -0.2543453803429237, "compression_ratio": 1.6084656084656084, "no_speech_prob": 0.17187808454036713}, {"id": 204, "seek": 114172, "start": 1146.72, "end": 1152.72, "text": " changing arguments between domains create a lot of overheads.", "tokens": [50614, 4473, 12869, 1296, 25514, 1884, 257, 688, 295, 19922, 82, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2543453803429237, "compression_ratio": 1.6084656084656084, "no_speech_prob": 0.17187808454036713}, {"id": 205, "seek": 114172, "start": 1152.72, "end": 1156.72, "text": " Yes, this is the bottleneck now. How we can improve actually this part?", "tokens": [50914, 1079, 11, 341, 307, 264, 44641, 547, 586, 13, 1012, 321, 393, 3470, 767, 341, 644, 30, 51114], "temperature": 0.0, "avg_logprob": -0.2543453803429237, "compression_ratio": 1.6084656084656084, "no_speech_prob": 0.17187808454036713}, {"id": 206, "seek": 114172, "start": 1156.72, "end": 1163.72, "text": " How we can pass the function argument one domain to another domain?", "tokens": [51114, 1012, 321, 393, 1320, 264, 2445, 6770, 472, 9274, 281, 1071, 9274, 30, 51464], "temperature": 0.0, "avg_logprob": -0.2543453803429237, "compression_ratio": 1.6084656084656084, "no_speech_prob": 0.17187808454036713}, {"id": 207, "seek": 114172, "start": 1163.72, "end": 1165.72, "text": " This is the actual cost, actually.", "tokens": [51464, 639, 307, 264, 3539, 2063, 11, 767, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2543453803429237, "compression_ratio": 1.6084656084656084, "no_speech_prob": 0.17187808454036713}, {"id": 208, "seek": 116572, "start": 1165.72, "end": 1171.72, "text": " Second question. You copy back all the mutable arguments.", "tokens": [50364, 5736, 1168, 13, 509, 5055, 646, 439, 264, 5839, 712, 12869, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14791252792522472, "compression_ratio": 1.7046632124352332, "no_speech_prob": 0.3848944306373596}, {"id": 209, "seek": 116572, "start": 1171.72, "end": 1177.72, "text": " Do you use that even if they are not changed or do you do that all the time?", "tokens": [50664, 1144, 291, 764, 300, 754, 498, 436, 366, 406, 3105, 420, 360, 291, 360, 300, 439, 264, 565, 30, 50964], "temperature": 0.0, "avg_logprob": -0.14791252792522472, "compression_ratio": 1.7046632124352332, "no_speech_prob": 0.3848944306373596}, {"id": 210, "seek": 116572, "start": 1177.72, "end": 1184.72, "text": " I am just pushing this. If they are mutable, I am pushing the argument.", "tokens": [50964, 286, 669, 445, 7380, 341, 13, 759, 436, 366, 5839, 712, 11, 286, 669, 7380, 264, 6770, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14791252792522472, "compression_ratio": 1.7046632124352332, "no_speech_prob": 0.3848944306373596}, {"id": 211, "seek": 116572, "start": 1184.72, "end": 1188.72, "text": " But you don't check if they have been changed by the function.", "tokens": [51314, 583, 291, 500, 380, 1520, 498, 436, 362, 668, 3105, 538, 264, 2445, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14791252792522472, "compression_ratio": 1.7046632124352332, "no_speech_prob": 0.3848944306373596}, {"id": 212, "seek": 116572, "start": 1188.72, "end": 1190.72, "text": " If they are mutable, then you copy them back.", "tokens": [51514, 759, 436, 366, 5839, 712, 11, 550, 291, 5055, 552, 646, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14791252792522472, "compression_ratio": 1.7046632124352332, "no_speech_prob": 0.3848944306373596}, {"id": 213, "seek": 116572, "start": 1190.72, "end": 1191.72, "text": " Yes, exactly.", "tokens": [51614, 1079, 11, 2293, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14791252792522472, "compression_ratio": 1.7046632124352332, "no_speech_prob": 0.3848944306373596}, {"id": 214, "seek": 119172, "start": 1191.72, "end": 1194.72, "text": " So it is a static check and not a runtime check.", "tokens": [50364, 407, 309, 307, 257, 13437, 1520, 293, 406, 257, 34474, 1520, 13, 50514], "temperature": 0.0, "avg_logprob": -0.30750532883864184, "compression_ratio": 1.408450704225352, "no_speech_prob": 0.2658579349517822}, {"id": 215, "seek": 119172, "start": 1194.72, "end": 1195.72, "text": " Thanks.", "tokens": [50514, 2561, 13, 50564], "temperature": 0.0, "avg_logprob": -0.30750532883864184, "compression_ratio": 1.408450704225352, "no_speech_prob": 0.2658579349517822}, {"id": 216, "seek": 119172, "start": 1195.72, "end": 1197.72, "text": " Thanks for your nice question.", "tokens": [50564, 2561, 337, 428, 1481, 1168, 13, 50664], "temperature": 0.0, "avg_logprob": -0.30750532883864184, "compression_ratio": 1.408450704225352, "no_speech_prob": 0.2658579349517822}, {"id": 217, "seek": 119172, "start": 1197.72, "end": 1198.72, "text": " Awesome.", "tokens": [50664, 10391, 13, 50714], "temperature": 0.0, "avg_logprob": -0.30750532883864184, "compression_ratio": 1.408450704225352, "no_speech_prob": 0.2658579349517822}, {"id": 218, "seek": 119172, "start": 1198.72, "end": 1202.72, "text": " Sorry, unfortunately that was all we had time for.", "tokens": [50714, 4919, 11, 7015, 300, 390, 439, 321, 632, 565, 337, 13, 50914], "temperature": 0.0, "avg_logprob": -0.30750532883864184, "compression_ratio": 1.408450704225352, "no_speech_prob": 0.2658579349517822}, {"id": 219, "seek": 119172, "start": 1202.72, "end": 1204.72, "text": " Can we give another?", "tokens": [50914, 1664, 321, 976, 1071, 30, 51014], "temperature": 0.0, "avg_logprob": -0.30750532883864184, "compression_ratio": 1.408450704225352, "no_speech_prob": 0.2658579349517822}, {"id": 220, "seek": 119172, "start": 1204.72, "end": 1206.72, "text": " Thank you to Mervin.", "tokens": [51014, 1044, 291, 281, 376, 1978, 259, 13, 51114], "temperature": 0.0, "avg_logprob": -0.30750532883864184, "compression_ratio": 1.408450704225352, "no_speech_prob": 0.2658579349517822}, {"id": 221, "seek": 119172, "start": 1206.72, "end": 1207.72, "text": " Thank you.", "tokens": [51114, 1044, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.30750532883864184, "compression_ratio": 1.408450704225352, "no_speech_prob": 0.2658579349517822}, {"id": 222, "seek": 122172, "start": 1221.72, "end": 1222.72, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.6109421650568644, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9957179427146912}], "language": "en"}