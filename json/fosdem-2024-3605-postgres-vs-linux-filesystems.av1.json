{"text": " Hello, thanks for the introduction. So my name is Tomas Wunderer, I work for ABB, I'm a Postgres contributor, cometer, developer, and so on. And I'm here to talk about Postgres versus file systems, right? If you want, you already can find the slides on my personal website. There's nothing much else, just talks. I gave at different conferences, this talk is already there. So if you want to look at the slides in more detail, you have the chance already. So a very short overview of what I'm planning to talk about during this talk. And by the way, if you have any questions during the talk, please shout. I prefer to answer the questions as we go, because we will go through different stuff. And it's easier to answer the question about the topic that I'm currently talking about, right? So in the first section, I will briefly explain how Postgres uses file systems and how. And I will a little bit talk about the overall design and maybe some advantages and disadvantages of that, try to explain why it works the way it works. And then I will get to the main goal of this talk and this like give an overview of how Postgres performs on different file systems. I'm going to restrict myself to file systems that are on Linux, like the usual file systems that you probably can use for production workloads or might consider. I'm not going to talk about like experimental file systems or file systems that are not used regularly. I'm not saying those file systems are not interesting, but I need to restrict myself to something that is actually benchmarkable and so on. And I'm also going to talk about file systems on storage that is attached directly to the machine, right? Because once you introduce like network attached storage, which usually introduces like latency and so on, that changes the behavior significantly, right? So I'm going to talk about if you are concerned about performance, you probably use directly attached storage anyway. And I'm also not going to talk about like managed instances because if someone chooses the file systems for you, then this is kind of like useless, right? So let's assume that you do have access to storage that is attached directly to the machine. And that you have a choice to like which file systems to use. And I'm doing these benchmarks and these talks because I wanted to learn myself something. I'm not here like, I'm not an expert on file systems, right? I'm a database developer, database engineer, and I wanted to know like how does it work now? Because like we do have benchmarks from like 20 years ago, but the hardware changes over time evolved and like was the current situation, right? And in the end, maybe we will talk a little bit about future file systems of like storage in Postgres, but there is a really nice talk by Andres Freund who talks about like how we might evolve one of the things about storage in Postgres, which is direct IO, asynchronous IO and so on. And there are actually developers that might give better opinions on this, right? So there is like a talk from the PGConFU, which is like two months ago. It's on YouTube available. You can find it. So I restricted myself to measuring data on like the usual Linux file systems, which is XT4, XFS, those are the traditional ones, then the new which is BTRFS and ZFS. ZFS is like not like native Linux file systems, of course, but it's commonly used. Then I've been like thinking usually don't have a single device, right? You have like multiple devices, so should you use like LVM to build like a volume on those devices? Or should you use something that has multi-device support built in, right? Which is like BTRFS and ZFS, they don't require you to build like a rate, a rate and that. Then there's like the question of snapshots, right? If you need just the bare file system and POSGRACE is fine with that, then the XT4, XFS are perfectly viable solutions. But maybe you want something smarter, right? Maybe you want to be able to do backups using snapshots, or maybe you want to use the, you know, the sent and receive which is built into ZFS to replicate data or stuff like that, right? So the question is like what happens when you actually want snapshots up more? I did some experiments with stuff like compression and so on in the file systems, but in my benchmarks, in the stuff that I benchmark, it didn't make much difference. I'm not saying that that's like universal truth. But I'm not going to show any results with and without compression because simply there was no difference for the OLTP workloads that I tested. So a very brief executive summary, just like to explain what I found or what I think is my conclusion is that in general, you should prefer a major supportive file system, right? You do run databases because you want to maintain the data, right? I mean like if you have a file system which is like super fast, experimental, and you know once in a while loses your data, it's like okay, maybe you don't really need like F-Sync at all, right? So my recommendation is in general to use supportive file system which is supported by whoever supports your operating system or like the environment. And that usually means like one of those four fast systems that I mentioned. The other thing is that you should use sufficiently recent kernel. And there are two main reasons for that. First is well, we do improve the database, but the kernel improves other parts too, right? So if you are using like old kernel and that might mean a couple years ago, a couple years old, you are losing a lot of optimizations and improvements that are typically focused on like a new hardware. So if you are using new hardware, you are usually losing a lot of performance. The other important reason of course is the bugs, right? And I'm not just talking about the regular security issues and so on. I'm talking about like data corruption issues that are in the kernel. I think I do have a slide where I mentioned the F-Sync gate, which I think I spoke at FOSDEM about in 2019. But the other part of the executive summary is that EXT4 and XFS are roughly the same performance. I mean like I don't think you need to talk very much about like should I use EXT4 or XFS? Like will it be faster or slower? Through this, I mean like in my experience, the differences are fairly small. And by fairly small, I mean like 10% difference in throughput for example. It's something that I believe I could probably tune the file system, actually eliminate by tuning the file system or maybe buying a slightly faster disks or like something like that. Is it a throughput? I also put 10% for the overall communication piece. Yeah, so the question is like how do I measure, you know, the performance? What do I mean by throughput? I mean OLTP performance in the database, which means like small, random IO, random reads, random writes and so on. So that's what I mean by difference in performance. If the database does like 100,000 transactions per second, and the other on a different file system, it does like 110,000 transactions per second. That's the throughput that I care about. Does it answer the question? Yes. Yeah, cool. Obviously throughput is not like, I'm going to talk about like other ways, other things that need to be considered when comparing file systems. But this is like the gist, right? Like if I had to choose from the EXT4 and XFS, I would probably pick what's default into distribution that I'm using because that's simply easier. And then of course, if you need something like more advanced, if you need snapshots, for example, and if you use them heavily, then I would definitely go with either ZFS or BTRFS. And I'm probably way more in the ZFS camp, like because of the reasons that I will talk about later, about the results. Obviously, if you only need snapshots like once in a while, you could use LVM and snapshots at that level that works. But the native snapshots in copy on write file systems are usually much faster. They have like much slower impact on throughput of the database or on performance. Right. So the first thing I'm going to talk about is why Postgres actually relies on operating system so much because there are databases that just kind of like ignore the file system or and either like implement like completely custom file systems on raw devices or do something else, right? Like do much more like direct IO and so on. And the answer is like, I do recognize the complexity of the file systems, right? Database engineers sometimes have the tendency to say like, oh, it's file system. It's simple, right? It's like you overvalue the complexity of the layer you are working on, on the database and kind of like diminish the say like, oh, no, all the layers are simple. The stuff that I'm doing is like very, very complex, right? And I want to say that I don't think that at all. I do recognize that all the layers, both below the database and above the database, have significant complexity, right? And I'm not here to talk shit about file systems. I'm here to learn something essentially, right? So Postgres is a database, right? We are storing and accessing data and that's the whole point why we actually do what we do. But we do leave the low level stuff to the operating system and the operating system implements the on-disk format, it implements the caching to kernel, it implements the device drivers that communicate with the hardware and so on. And we just use the Postgres interface on top of the operating system, on top of the kernel. And all the low level stuff is responsibility of the operating system. That might change a little bit with the patches that improve or start using the asynchronous IO and direct IO, but so far that wasn't the case. The question is like, is it even a good idea? I mean, shouldn't the database just do everything directly and just ignore the operating system? Well, sure. If you have the developer capacity to do that, if you have an infinite amount of money to actually spend on development, then sure, you can do everything, right? But the project doesn't have this advantage, right? We do have a limited amount of time and so on. So we decided or like, I haven't been contributing to Postgres back then, but the choice was to just leave as much as possible to the operating system and it worked quite well so far, right? And I'm not sure it would even be possible to do the custom stuff because there was so much, for example, Postgres supports many platforms and the support for direct IO and so on varies a lot between the different Unix systems, right? Even though they all support, you know, implement Postgres, right? So there's like a lot of difference, a lot of nuance and we would need to deal with all of that. So that would be terrible, I think, and it would not allow us to actually improve the database as much as we did. And of course, by relying on the operating system, we automatically get all the benefits, all the improvements those guys do, right? So if they improve the file systems, we do get the benefits, which is great. So how Postgres actually works in general, like a very simplified idea is that we have like the Postgres as an application, essentially running on top of the kernel, which has some, you know, shared buffers, which is memory managed by the database. And then we have some processes which are either doing some, you know, maintenance operations or whatever, or as the backend processes are handling user connections, right? So you connect to the database, it will fork a process and the process will access the shared buffers, which is where the data is going to be for the backend, right? And when the data is not actually in memory yet, the Postgres will read the data through Pagecase, which is managed by the kernel, and the kernel will do some magic and will, you know, read the data from the disk to the hardware interfaces file systems and will include some IOH scheduler to govern all the process, right? So that's roughly how it works, how Postgres is designed. With the Direct IOH, we will kind of like ignore the Pagecase and we will, you know, do still talk through to the operating system facilities, but without the Pagecase, right, of course. And in that case, the shared buffers will be much larger, right, or it should be much larger, of course. Right, so this is like the Direct IOH kind of. Anyway, we are still essentially in this, and this whole talk is about this architecture. So I spoke about a couple of reasons why you should use like new kernels and what are the problems with like relying on all the kernels, and that's like, well, there's a lot of things that can go wrong, and there's error handling, but what happened in like 2018, we discovered that we are actually not either receiving the errors at all from the kernel, because for example, you open a file to one file descriptor, you do some writes on the file, and then you close the file, or the file gets closed for some reason, and no one actually knows about the error at all. Even though you might have like another file descriptor for the same file, you will not read, learn about it. And there's like different ways to lose information about errors during fSync, for example, which is pretty fatal for Postgres, because we do rely on the fSync, for example, during checkpoints, right? So luckily, it's not a very common issue. I mean, I don't remember when I actually got like the last fSync error in, you know, when working with the database, but when it happens, it can, it should definitely not be like a silent corruption, right? So this was fixed, I believe, but again, it's something that needs to be, that is fixed only in sufficiently recent kernels, right? So you need to run a recent kernel to be immune to this. The other problem, of course, is that, and that's not like a bug, that's a problem with the design in general, and it is because the most of the IO activity is actually managed by the kernel, by the operating system, but it does not actually have any insight into what the database needs, right? It has no concept of, well, this write is more important than this write, right? Because this write affects user activity, and this is some sort of like a background task which could wait, right? Like the operating system has no idea how to, has no way to actually, you know, differentiate between the writes, so that's one reason. The other reason is, for example, prefection, right? The current storage systems rely heavily on actually having full queues. If you only request from SSD one block at a time in a synchronous way, it's going to be really slow. If you submit like many, many IO requests ahead, then you are able to saturate actually the storage device, like the, the tooth, right? You get like much better performance in general. And again, that's something that the database needs to do explicitly. It's not something the operating system can, can do on its own, and we do actually rely on the operating system to do prefetching for sequential scans, for example, but the, we need to do explicit prefetching for other types of scans. So for example, during index scans or bitmap heap scans, we need to do explicit prefetching. So it's like, this is a design problem. So rule number one, use recent kernel. All the kernels have all kinds of issues. Okay. It's not always like perfect. There are regressions in kernels too. Once in a while, you can get like a dropping performance because something went wrong. But overall, I think it's like something you should do. Right. So this was like a very basic explanation of, of, of why POSGRESS IO, why POSGRESS uses file systems the way it does. And now I'm going to talk about some benchmarks and stress test because this is like very, like high level. Right. I like to, to do some measurements and look at the numbers and say, like, okay, so this performs well, this sucks. Right. So what I did, I did a lot of stress tests, which essentially means running PG bench, which is OLTP database benchmark tool. Simply, it does a lot of like random IO to POSGRESS. And I measured like the truth. The first important thing here is that this only really matters if you are IO bound. Right. If you are hitting the, the storage, then that's the only way, that's the only case where the difference in file system performance can actually affect the throughput. Right. If you are CPU bound, for example, because you are working with very small amounts of memory and it's all in cache, then the file system doesn't really matter. The other reason, of course, is that typical production systems are not using IO for 100% time. Like once you hit, for example, saturation of like 75%, right, you are already like being affected by, by latency increase system so on. At that point, you probably already are thinking about upgrading the storage system or like migrating to do something else. So that's one reason. So keep this in mind when interpreting the results that I'm going to show you. It's probably like the worst case scenario. The other thing, of course, is that I only have some particular hardware available. And some of the file systems, especially like ZFS and so on, they do support a lot of different features. So you can like move the intent look or stuff like that to a different device. I didn't do anything like that. Right. What I recommend you do, if you are actually evaluating like different file systems for your use case, to actually try that with, with the hardware that you are considering. Right. To actually do your own measurements. Right. I would love to have like a perfect benchmarks for all possible hardware configurations, but it's not possible. Right. So I'm going to show you a bunch of results, a bunch of charts. And I'm going to, I think what is more important is like not the exact numbers, but it's more about the visual, like, like understanding like what's happening. Right. So for example, this is from two machines. This is like a smaller, older Intel machine. This is larger Xeon. And this is the time that it takes to do a bulk load into the database. Right. Of scale 2000 means like, I don't know, 30 gigabytes of data. And this loads the data, builds indexes and so on. And the first bunch of results here, which is in seconds. So the shorter, the better. These are just like regular file systems on LVM without any snapshots, just like right. And then there are a couple that are two that are actually multi-device without the LVM using the BTRFS or ZFS file systems, like multi-device support. Right. And you can see that it's like almost the same, except for ZFS for some reason, it's like much slower. Right. But that might be a hardware issue or like specific to this hardware configuration, because on a different machine, which only has a single device though, it's like NVMe, the difference is like much smaller. Right. And there is no LVM because there are no multiple devices. Right. So that's one thing. That's what I mean, what I said that the difference between EXT4 and XFS is like usually very small. And then we have a couple results for snapshots when you start creating actually snapshots on LVM. And you can see that it like improves, oh sorry, improves like, degrades like significantly. Right. So it suddenly takes like twice as much time in some cases, except for the native file systems, like the copy and write file system, BTRFS and ZFS that didn't actually like got much worse. Right. So this is similar thing you can see here for the other machine. So what I conclude from this is that if you actually do need the snapshots, use the ZFS or BTRFS. Yes. So for BTRFS, I just did like a regular, I didn't want the specific like explicitly else. Right. So I just created the BTRFS like. Because the easy optimization would be to turn on copy and write for the files affected by the database. And then when you do the snapshot, it still does copy and write only and in those points. Right. So I consider like disabling copy and write because there's like an option for, I'm not sure if it's a mount option, like no data copy and write and so on. The problem with that is, as far as I remember, is that it actually disables like checksums or affects like these capabilities. Right. Which, and that's what I don't want. Right. I do want the checksumming and so on for these file systems. Right. So that's it. Right. Well, these are the results with the LVM snapshots and these are the built-in snapshots. Right. So my conclusion, if you want snapshots, if you need snapshots for like, because it makes, for example, backup simpler for you, use these file systems, then I do have some results for OLVP-PG bench, which is like a read-only mode. It simply means like select by primary key. Right. It does a lot of random IO. This is like the large, large scales, which means that it actually is hitting the disks a lot. It's not like in memory. And you can also see that on the smaller machine, which is like just four cores, the differences are fairly small. The ZFS is a bit slower. I assume that it's because it's not using the page cache. It's using the ARC cache and there's like, like different size. It's like smaller than the page cache in this configuration. So that's fine. On the larger machine, which you can see that this is like five times or four times higher throughput because it's using NVME, then the beta RFS is getting slower. ZFS is slightly slower also. Right. Which again, in absolute numbers, this is not great. If ZFS is giving you or like beta RFS is giving you some additional features, I think this is perfectly fine. For the read write, and I'm actually showing for the read write like different scales. Scale, this is like a small scale, which means everything fits into shed buffers. So we are actually doing a lot, very few random writes. A thousand here means it fits into RAM, but not into shed buffers. And this is like much larger than memory in general. And you can see that, again, the EXT4 XFS kind of like perform the best. And unfortunately, the copyright systems, once you exceed the available RAM, get much slower. The OLTP PG bench is not exactly, it's very uniform access. Right. So, yes. Do you use large blocks on ZFS? So, for ZFS, I use the 8 kilobyte blocks. Right. So I reduce the size of the block to match the postgres data block. What I was going to say, well, I wanted to say that PG bench may not be a perfect thing to model your database, your application, because it randomly and uniformly accesses all the different parts of the database. But usually what you have is you have a very active subset of the database, which probably fits into memory. And then you have the rest of the database, which is like historical data or users that are not very active or something. So, this, which means that you probably are not very affected by this. This is like the worst case possible. Right. And you are probably somewhere in this region. Right. In which case, the ZFS is slower, but not by much. So that's one thing you need to consider when interpreting the benchmark results and applying them to your application. Right. But one thing I'd like to mention is that throughput is not the whole story. Right. I mean, if you only get information about like how many transactions you can get per second, that doesn't actually, you know, fully explain or fully describe the database or like the performance of any system. The other thing that you need to look at is latency. Right. Because if you get like very different latencies, like one, one request gets handled in one millisecond, the other request gets handled in five, five minutes. It's like in, on average, it's probably not very good performance. Right. So what I did is I actually show behavior over time, not just for the whole two hour run, but I show how actually the performance changes over time. And this is like the throughput. And you can see that EXT4, one thing I want to say, don't look at the numbers. Right. The numbers, you may not even be able to read them from the back. That doesn't matter. You can look at the slide later. What matters is that you can compare the charts visually. Yeah. You can, you can look at the first row and that's the small data set, which is the data set that fits into shared buffers. The other row is the medium, which is like fits into memory, but doesn't fit into shared buffers. This doesn't, the third one, large one, doesn't fit into memory at all. But that's the read write. And this is read only. Right. All these, this is small read write, medium read write, large read write, large read only. Sorry, there is a mistake here. And this shows like how that actually behaves over two hours. And you can visually compare each row. Right. So you can, for example, see here that EXT4, XFS are really, really stable. Right. You get really, very similar throughput over time. BTRFS is a bit slower. ZFS also very stable. And then once you get larger and larger data sets, the behavior changes. Not for EXT4, XFS, of course, you get like slower, lower performance. But for example, for BTRFS, you get like much more, much more jitter in, in the throughput for per second. Right. So, so that's not great. Also, you get like progressively slower throughput. She's not great for ZFS. It's similar. Right. I mean like, you get like more variants in, in the throughput. And ultimately, even for ZFS, you get like much lower throughput for read only. But I started talking about latency. This shows me still just throughput over time. It shows me like how, how it changes over like two hour period. It doesn't show me latency. Right. So, this is the result of percentiles of, of the same test. And ideally, you would see something like this. Right. I mean, this is, I think, 25%. 50%. 75, 95, 99. And ideally, you would see like perfectly straight lines, which gives you very consistent performance over time. Right. So, this is really, really nice. I mean, like the throughput was fairly low. But this is really nice because it's very predictable for operation. Similar thing here. Right. You get some blips here, some, you know, spice latency and so on. But it's very short, very predictable, really nice. And you probably will not even see this in like a monitoring. For ZFS, it's not that great. It simply needs to do, I don't know, compression, whatever, do copy on write of the data. For BTRFS, it's unfortunately much worse. Right. This means that the, the latency spikes are pretty significant. I mean, if you look at the throughput, you can see that there are like a lot of fluctuations here. So, that's not great. I would definitely, as a DBA, I would like to see something like this. Right. Because it gives me nice smooth behavior. This is okay. This is not great. Okay. For the smaller machine, it's like a very similar, similar story, except that the differences are not as pronounced because simply the storage is not as powerful. Right. I mean, like you get similar performance for the smaller dataset, then as we are increasing the amount of random writes in random IO, it gets worse. And of course, similar, similar outcome for, for the latencies. Right. So, I use this as a visual way to compare the results. Not the exact numbers, but like how the chart looks like. Right. And I think I do have to say like a super large machine, which is, I don't know, 100 cores, AMV epic with four NVMEs. And you can again see very similar pattern with like EXE4 XFS. There are some fluctuations here. I'm not sure what exactly that is. I need to look into that. But the, and I would say the ZFS behaves like better here. It's like nicer. You can see those are most likely checkpoints, these spikes. So there's probably a way to improve this. Similar for latency, right. Like these are really nice. Well, you can always improve that, but this looks really nice. ZFS is slower or worse. BTRFS has some latency spikes that would cause a lot of trouble in production. Right. So, there was just like looking at the file systems and with some basic tuning at the file system level. But there are also things that you could think about at the Postgres level. And the first level is, well, you need to be careful about, about filling the page cache. Right. Because what can happen in Linux and with the default configuration can happen quite easily is that you accumulate a lot of dirty data in the page cache because Postgres will just write stuff into the operating system and then eventually call fsync. Right. And if you accumulate like 10% of the RAM in the, in the page cache and then say, okay, write all these five gigabytes of data to disk at once that will inevitably affect the, the user activity. Right. So, you need to be careful about, for example, decreasing the background bytes. And I think I do have this here. This is EXT4 with the default, default here, which I think is one gigabyte for, for this machine. And this is the throughput for, if I decrease the, the dirty background bytes for 32 bytes, 32 megabytes. And you can see that it's much, much more consistent. Right. Because here the, the gray, gray chart is essentially like per second throughput. And the red one is like average over 15 seconds. Right. So it's like a smoothed out. And you can see that it's like almost the same throughput, but this is like much more variable. And for the latencies with 32 megabytes, sorry, 32 megabytes, one gigabyte, it's the same, same thing. The decreasing the, decreasing the dirty background bytes makes it much more consistent. Obviously, if it had just like benefits that would be the default. Right. Unfortunately, if you decrease this, you kind of like reduce the throughput of the machine, of, of, of the system. Right. How much, I don't know, you need to test it. Right. Or I do plan to do the test. I don't have the numbers yet. But in this case, obviously, the, the impact is like minimal. So that was one thing I want to talk about. Yeah. The other thing I wanted to talk about is full page rights, which unfortunately something Postgres has to do. It means that after each checkpoint, the first change to the page will write the whole eight kilobyte into, into the transaction lock. The problem with that is that it inflates the amount of, you know, data we write into transaction lock. And it can easily happen that you, you just, by doing the full page rights, you hit the next checkpoint. Right. Because you write so much wall that you are required to do the next checkpoint. And it's like infinite loop. Right. So you will do like a lot of full page rights. I do believe that ZFS actually allows you to disable this. Right. So in ZFS, you can actually optimize the Postgres to benefit from the feature of ZFS, which can be very beneficial. The problem with ZFS that I run into is that it's really difficult to configure prefetch like for, for sequential scans, for example. I mean like PGDOM, for example, if you do that on, on the database for me, it took like twice as long as on the other file systems. Right. I'm, if there is a good way to enable prefetch on, on ZFS, I'd like to know about that. But I found like, you know, 10 different options at different places in ZFS that should be configured. That's like very difficult for me. Right. So what about snapshots? I mentioned that with snapshots, you would probably expect lower performance. Right. Because the, the file system needs to do something else. Right. With ZFS and BTRFS, that's not really the case, because they do copy and write by default. So that's okay. But what is the impact of doing a snapshots on the EXT4 XFS in case you are using LVM? Well, these are, these are the results for EXT4 LVM snapshots, BTRFS with LVM, BTRFS when you do that natively in BTRFS, and ZFS with native snapshots. Right. And you can immediately see that if you are doing snapshots, the, the ZFS and BTRFS can easily compete with the EXT4, which can only do that through LVM. So that's like, if you need snapshots, if you want to benefit from snapshots, if you are willing to pay for snapshots, then ZTRFS or BTRFS can actually do a pretty good job. Like at least as good as the traditional file systems. Of course, there's still the problem with latency. In this case, once you start doing snapshots, snapshots on EXT4 and LVM, the latency gets much worse. And I would even say that the latency of ZFS is better. It's more predictable. BTRFS is still a bit slower. Or like, obviously the latency is much worse. In all those charts, the scales are always the same for all, you know, charts in the same row. So it's like easy to compare this. So you can see that the 95 percentile, which is the, you know, the violet here, is much higher than here. So this is from a different machine from the large AMD. And you can see that, of course, with, when you have like EXT4 with no snapshots, it's, it's really fast. Once you start doing snapshots on LVM, and by doing snapshots, I mean like having three snapshots at the same time. Right? So during the benchmarks, I just created like a snapshot every five minutes, and then deleted the snapshot after 15 minutes. Right? So there are always like three snapshots at the same time. You can see that this is like a massive impact on EXT4. And I'm not sure if you are willing to pay for that. And then, of course, like, BTRFS is better. ZFS, sorry, this is BTRFS with no snapshots with snapshots. And there is like no difference here, right, between those charts. So which is great. That's exactly what we expect from, from those file systems. And just to compare BTRFS and ZFS, again, ZFS no snapshots, ZFS snapshots. You can see there's like almost no difference when you enable and start doing snapshots, which is great. Exactly what we expect from copy and write file system. But the comparison between BTRFS and ZFS is pretty clear, especially for this scale, for example. So this is one of the reasons why I'm more like a favor, a fan of ZFS. So that's all I wanted to say today. If you want, you can find all the results, all the charts on GitHub. If you want the source data, or if you want the, the scripts that I used, I am very open to just providing them. I have no problem with that. It's multiple gigabytes of data. So that's why I didn't put it on, on GitHub. But I'm still going to do more benchmarks. I will publish it there. If you want to look at a very interesting paper, which I think explains a lot about like the challenges, how actually we need to saturate NVME storage. There is a very nice paper from VLDB. I highly recommend it. And yeah, I think that's all.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.040000000000001, "text": " Hello, thanks for the introduction.", "tokens": [50364, 2425, 11, 3231, 337, 264, 9339, 13, 50766], "temperature": 0.0, "avg_logprob": -0.3316899589870287, "compression_ratio": 1.4511627906976745, "no_speech_prob": 0.36005955934524536}, {"id": 1, "seek": 0, "start": 8.040000000000001, "end": 12.14, "text": " So my name is Tomas Wunderer, I work for ABB, I'm a Postgres contributor,", "tokens": [50766, 407, 452, 1315, 307, 5041, 296, 343, 6617, 260, 11, 286, 589, 337, 13838, 33, 11, 286, 478, 257, 10223, 45189, 42859, 11, 50971], "temperature": 0.0, "avg_logprob": -0.3316899589870287, "compression_ratio": 1.4511627906976745, "no_speech_prob": 0.36005955934524536}, {"id": 2, "seek": 0, "start": 12.14, "end": 15.3, "text": " cometer, developer, and so on.", "tokens": [50971, 395, 2398, 11, 10754, 11, 293, 370, 322, 13, 51129], "temperature": 0.0, "avg_logprob": -0.3316899589870287, "compression_ratio": 1.4511627906976745, "no_speech_prob": 0.36005955934524536}, {"id": 3, "seek": 0, "start": 15.3, "end": 19.48, "text": " And I'm here to talk about Postgres versus file systems, right?", "tokens": [51129, 400, 286, 478, 510, 281, 751, 466, 10223, 45189, 5717, 3991, 3652, 11, 558, 30, 51338], "temperature": 0.0, "avg_logprob": -0.3316899589870287, "compression_ratio": 1.4511627906976745, "no_speech_prob": 0.36005955934524536}, {"id": 4, "seek": 0, "start": 19.48, "end": 25.88, "text": " If you want, you already can find the slides on my personal website.", "tokens": [51338, 759, 291, 528, 11, 291, 1217, 393, 915, 264, 9788, 322, 452, 2973, 3144, 13, 51658], "temperature": 0.0, "avg_logprob": -0.3316899589870287, "compression_ratio": 1.4511627906976745, "no_speech_prob": 0.36005955934524536}, {"id": 5, "seek": 0, "start": 25.88, "end": 28.52, "text": " There's nothing much else, just talks.", "tokens": [51658, 821, 311, 1825, 709, 1646, 11, 445, 6686, 13, 51790], "temperature": 0.0, "avg_logprob": -0.3316899589870287, "compression_ratio": 1.4511627906976745, "no_speech_prob": 0.36005955934524536}, {"id": 6, "seek": 2852, "start": 28.52, "end": 32.72, "text": " I gave at different conferences, this talk is already there.", "tokens": [50364, 286, 2729, 412, 819, 22032, 11, 341, 751, 307, 1217, 456, 13, 50574], "temperature": 0.0, "avg_logprob": -0.20799516376696134, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.006892004515975714}, {"id": 7, "seek": 2852, "start": 32.72, "end": 39.96, "text": " So if you want to look at the slides in more detail, you have the chance already.", "tokens": [50574, 407, 498, 291, 528, 281, 574, 412, 264, 9788, 294, 544, 2607, 11, 291, 362, 264, 2931, 1217, 13, 50936], "temperature": 0.0, "avg_logprob": -0.20799516376696134, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.006892004515975714}, {"id": 8, "seek": 2852, "start": 39.96, "end": 46.6, "text": " So a very short overview of what I'm planning to talk about during this talk.", "tokens": [50936, 407, 257, 588, 2099, 12492, 295, 437, 286, 478, 5038, 281, 751, 466, 1830, 341, 751, 13, 51268], "temperature": 0.0, "avg_logprob": -0.20799516376696134, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.006892004515975714}, {"id": 9, "seek": 2852, "start": 46.6, "end": 51.0, "text": " And by the way, if you have any questions during the talk, please shout.", "tokens": [51268, 400, 538, 264, 636, 11, 498, 291, 362, 604, 1651, 1830, 264, 751, 11, 1767, 8043, 13, 51488], "temperature": 0.0, "avg_logprob": -0.20799516376696134, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.006892004515975714}, {"id": 10, "seek": 2852, "start": 51.0, "end": 58.4, "text": " I prefer to answer the questions as we go, because we will go through different stuff.", "tokens": [51488, 286, 4382, 281, 1867, 264, 1651, 382, 321, 352, 11, 570, 321, 486, 352, 807, 819, 1507, 13, 51858], "temperature": 0.0, "avg_logprob": -0.20799516376696134, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.006892004515975714}, {"id": 11, "seek": 5840, "start": 58.4, "end": 63.12, "text": " And it's easier to answer the question about the topic that I'm currently talking about, right?", "tokens": [50364, 400, 309, 311, 3571, 281, 1867, 264, 1168, 466, 264, 4829, 300, 286, 478, 4362, 1417, 466, 11, 558, 30, 50600], "temperature": 0.0, "avg_logprob": -0.19816763401031495, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.014644273556768894}, {"id": 12, "seek": 5840, "start": 63.12, "end": 72.64, "text": " So in the first section, I will briefly explain how Postgres uses file systems and how.", "tokens": [50600, 407, 294, 264, 700, 3541, 11, 286, 486, 10515, 2903, 577, 10223, 45189, 4960, 3991, 3652, 293, 577, 13, 51076], "temperature": 0.0, "avg_logprob": -0.19816763401031495, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.014644273556768894}, {"id": 13, "seek": 5840, "start": 72.64, "end": 79.6, "text": " And I will a little bit talk about the overall design and maybe some advantages and", "tokens": [51076, 400, 286, 486, 257, 707, 857, 751, 466, 264, 4787, 1715, 293, 1310, 512, 14906, 293, 51424], "temperature": 0.0, "avg_logprob": -0.19816763401031495, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.014644273556768894}, {"id": 14, "seek": 5840, "start": 79.6, "end": 86.96000000000001, "text": " disadvantages of that, try to explain why it works the way it works.", "tokens": [51424, 37431, 295, 300, 11, 853, 281, 2903, 983, 309, 1985, 264, 636, 309, 1985, 13, 51792], "temperature": 0.0, "avg_logprob": -0.19816763401031495, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.014644273556768894}, {"id": 15, "seek": 8696, "start": 86.96, "end": 92.63999999999999, "text": " And then I will get to the main goal of this talk and", "tokens": [50364, 400, 550, 286, 486, 483, 281, 264, 2135, 3387, 295, 341, 751, 293, 50648], "temperature": 0.0, "avg_logprob": -0.23355256505759367, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.016801027581095695}, {"id": 16, "seek": 8696, "start": 92.63999999999999, "end": 98.47999999999999, "text": " this like give an overview of how Postgres performs on different file systems.", "tokens": [50648, 341, 411, 976, 364, 12492, 295, 577, 10223, 45189, 26213, 322, 819, 3991, 3652, 13, 50940], "temperature": 0.0, "avg_logprob": -0.23355256505759367, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.016801027581095695}, {"id": 17, "seek": 8696, "start": 98.47999999999999, "end": 103.35999999999999, "text": " I'm going to restrict myself to file systems that are on Linux,", "tokens": [50940, 286, 478, 516, 281, 7694, 2059, 281, 3991, 3652, 300, 366, 322, 18734, 11, 51184], "temperature": 0.0, "avg_logprob": -0.23355256505759367, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.016801027581095695}, {"id": 18, "seek": 8696, "start": 103.35999999999999, "end": 110.96, "text": " like the usual file systems that you probably can use for production workloads or might consider.", "tokens": [51184, 411, 264, 7713, 3991, 3652, 300, 291, 1391, 393, 764, 337, 4265, 32452, 420, 1062, 1949, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23355256505759367, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.016801027581095695}, {"id": 19, "seek": 8696, "start": 110.96, "end": 114.32, "text": " I'm not going to talk about like experimental file systems or", "tokens": [51564, 286, 478, 406, 516, 281, 751, 466, 411, 17069, 3991, 3652, 420, 51732], "temperature": 0.0, "avg_logprob": -0.23355256505759367, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.016801027581095695}, {"id": 20, "seek": 11432, "start": 114.32, "end": 118.24, "text": " file systems that are not used regularly.", "tokens": [50364, 3991, 3652, 300, 366, 406, 1143, 11672, 13, 50560], "temperature": 0.0, "avg_logprob": -0.20318321620716767, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.009997943416237831}, {"id": 21, "seek": 11432, "start": 118.24, "end": 122.55999999999999, "text": " I'm not saying those file systems are not interesting, but", "tokens": [50560, 286, 478, 406, 1566, 729, 3991, 3652, 366, 406, 1880, 11, 457, 50776], "temperature": 0.0, "avg_logprob": -0.20318321620716767, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.009997943416237831}, {"id": 22, "seek": 11432, "start": 122.55999999999999, "end": 129.2, "text": " I need to restrict myself to something that is actually benchmarkable and so on.", "tokens": [50776, 286, 643, 281, 7694, 2059, 281, 746, 300, 307, 767, 18927, 712, 293, 370, 322, 13, 51108], "temperature": 0.0, "avg_logprob": -0.20318321620716767, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.009997943416237831}, {"id": 23, "seek": 11432, "start": 129.2, "end": 138.64, "text": " And I'm also going to talk about file systems on storage that is attached directly to the machine, right?", "tokens": [51108, 400, 286, 478, 611, 516, 281, 751, 466, 3991, 3652, 322, 6725, 300, 307, 8570, 3838, 281, 264, 3479, 11, 558, 30, 51580], "temperature": 0.0, "avg_logprob": -0.20318321620716767, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.009997943416237831}, {"id": 24, "seek": 13864, "start": 138.64, "end": 143.27999999999997, "text": " Because once you introduce like network attached storage,", "tokens": [50364, 1436, 1564, 291, 5366, 411, 3209, 8570, 6725, 11, 50596], "temperature": 0.0, "avg_logprob": -0.2407132185898818, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.01635727286338806}, {"id": 25, "seek": 13864, "start": 143.27999999999997, "end": 147.67999999999998, "text": " which usually introduces like latency and so on,", "tokens": [50596, 597, 2673, 31472, 411, 27043, 293, 370, 322, 11, 50816], "temperature": 0.0, "avg_logprob": -0.2407132185898818, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.01635727286338806}, {"id": 26, "seek": 13864, "start": 147.67999999999998, "end": 153.35999999999999, "text": " that changes the behavior significantly, right?", "tokens": [50816, 300, 2962, 264, 5223, 10591, 11, 558, 30, 51100], "temperature": 0.0, "avg_logprob": -0.2407132185898818, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.01635727286338806}, {"id": 27, "seek": 13864, "start": 153.35999999999999, "end": 157.76, "text": " So I'm going to talk about if you are concerned about performance,", "tokens": [51100, 407, 286, 478, 516, 281, 751, 466, 498, 291, 366, 5922, 466, 3389, 11, 51320], "temperature": 0.0, "avg_logprob": -0.2407132185898818, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.01635727286338806}, {"id": 28, "seek": 13864, "start": 157.76, "end": 161.76, "text": " you probably use directly attached storage anyway.", "tokens": [51320, 291, 1391, 764, 3838, 8570, 6725, 4033, 13, 51520], "temperature": 0.0, "avg_logprob": -0.2407132185898818, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.01635727286338806}, {"id": 29, "seek": 13864, "start": 161.76, "end": 167.35999999999999, "text": " And I'm also not going to talk about like managed instances because if someone", "tokens": [51520, 400, 286, 478, 611, 406, 516, 281, 751, 466, 411, 6453, 14519, 570, 498, 1580, 51800], "temperature": 0.0, "avg_logprob": -0.2407132185898818, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.01635727286338806}, {"id": 30, "seek": 16736, "start": 167.36, "end": 172.08, "text": " chooses the file systems for you, then this is kind of like useless, right?", "tokens": [50364, 25963, 264, 3991, 3652, 337, 291, 11, 550, 341, 307, 733, 295, 411, 14115, 11, 558, 30, 50600], "temperature": 0.0, "avg_logprob": -0.20339188973108926, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.009189660660922527}, {"id": 31, "seek": 16736, "start": 172.08, "end": 181.36, "text": " So let's assume that you do have access to storage that is attached directly to the machine.", "tokens": [50600, 407, 718, 311, 6552, 300, 291, 360, 362, 2105, 281, 6725, 300, 307, 8570, 3838, 281, 264, 3479, 13, 51064], "temperature": 0.0, "avg_logprob": -0.20339188973108926, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.009189660660922527}, {"id": 32, "seek": 16736, "start": 181.36, "end": 185.92000000000002, "text": " And that you have a choice to like which file systems to use.", "tokens": [51064, 400, 300, 291, 362, 257, 3922, 281, 411, 597, 3991, 3652, 281, 764, 13, 51292], "temperature": 0.0, "avg_logprob": -0.20339188973108926, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.009189660660922527}, {"id": 33, "seek": 16736, "start": 185.92000000000002, "end": 192.32000000000002, "text": " And I'm doing these benchmarks and these talks because I wanted to learn myself something.", "tokens": [51292, 400, 286, 478, 884, 613, 43751, 293, 613, 6686, 570, 286, 1415, 281, 1466, 2059, 746, 13, 51612], "temperature": 0.0, "avg_logprob": -0.20339188973108926, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.009189660660922527}, {"id": 34, "seek": 16736, "start": 192.32000000000002, "end": 196.64000000000001, "text": " I'm not here like, I'm not an expert on file systems, right?", "tokens": [51612, 286, 478, 406, 510, 411, 11, 286, 478, 406, 364, 5844, 322, 3991, 3652, 11, 558, 30, 51828], "temperature": 0.0, "avg_logprob": -0.20339188973108926, "compression_ratio": 1.6754385964912282, "no_speech_prob": 0.009189660660922527}, {"id": 35, "seek": 19664, "start": 196.64, "end": 202.72, "text": " I'm a database developer, database engineer, and I wanted to know like how does it work now?", "tokens": [50364, 286, 478, 257, 8149, 10754, 11, 8149, 11403, 11, 293, 286, 1415, 281, 458, 411, 577, 775, 309, 589, 586, 30, 50668], "temperature": 0.0, "avg_logprob": -0.21238485196741616, "compression_ratio": 1.497797356828194, "no_speech_prob": 0.006624771747738123}, {"id": 36, "seek": 19664, "start": 202.72, "end": 206.48, "text": " Because like we do have benchmarks from like 20 years ago,", "tokens": [50668, 1436, 411, 321, 360, 362, 43751, 490, 411, 945, 924, 2057, 11, 50856], "temperature": 0.0, "avg_logprob": -0.21238485196741616, "compression_ratio": 1.497797356828194, "no_speech_prob": 0.006624771747738123}, {"id": 37, "seek": 19664, "start": 206.48, "end": 215.76, "text": " but the hardware changes over time evolved and like was the current situation, right?", "tokens": [50856, 457, 264, 8837, 2962, 670, 565, 14178, 293, 411, 390, 264, 2190, 2590, 11, 558, 30, 51320], "temperature": 0.0, "avg_logprob": -0.21238485196741616, "compression_ratio": 1.497797356828194, "no_speech_prob": 0.006624771747738123}, {"id": 38, "seek": 19664, "start": 215.76, "end": 224.79999999999998, "text": " And in the end, maybe we will talk a little bit about future file systems of like storage in Postgres,", "tokens": [51320, 400, 294, 264, 917, 11, 1310, 321, 486, 751, 257, 707, 857, 466, 2027, 3991, 3652, 295, 411, 6725, 294, 10223, 45189, 11, 51772], "temperature": 0.0, "avg_logprob": -0.21238485196741616, "compression_ratio": 1.497797356828194, "no_speech_prob": 0.006624771747738123}, {"id": 39, "seek": 22480, "start": 224.8, "end": 231.44, "text": " but there is a really nice talk by Andres Freund who talks about like how we might evolve", "tokens": [50364, 457, 456, 307, 257, 534, 1481, 751, 538, 400, 495, 29685, 567, 6686, 466, 411, 577, 321, 1062, 16693, 50696], "temperature": 0.0, "avg_logprob": -0.23620894936954273, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.010682562366127968}, {"id": 40, "seek": 22480, "start": 231.44, "end": 239.28, "text": " one of the things about storage in Postgres, which is direct IO, asynchronous IO and so on.", "tokens": [50696, 472, 295, 264, 721, 466, 6725, 294, 10223, 45189, 11, 597, 307, 2047, 39839, 11, 49174, 39839, 293, 370, 322, 13, 51088], "temperature": 0.0, "avg_logprob": -0.23620894936954273, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.010682562366127968}, {"id": 41, "seek": 22480, "start": 239.28, "end": 246.64000000000001, "text": " And there are actually developers that might give better opinions on this, right?", "tokens": [51088, 400, 456, 366, 767, 8849, 300, 1062, 976, 1101, 11819, 322, 341, 11, 558, 30, 51456], "temperature": 0.0, "avg_logprob": -0.23620894936954273, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.010682562366127968}, {"id": 42, "seek": 22480, "start": 246.64000000000001, "end": 253.76000000000002, "text": " So there is like a talk from the PGConFU, which is like two months ago.", "tokens": [51456, 407, 456, 307, 411, 257, 751, 490, 264, 40975, 9838, 37, 52, 11, 597, 307, 411, 732, 2493, 2057, 13, 51812], "temperature": 0.0, "avg_logprob": -0.23620894936954273, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.010682562366127968}, {"id": 43, "seek": 25376, "start": 253.84, "end": 258.48, "text": " It's on YouTube available. You can find it.", "tokens": [50368, 467, 311, 322, 3088, 2435, 13, 509, 393, 915, 309, 13, 50600], "temperature": 0.0, "avg_logprob": -0.23991311017204733, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.028204619884490967}, {"id": 44, "seek": 25376, "start": 258.48, "end": 265.44, "text": " So I restricted myself to measuring data on like the usual Linux file systems,", "tokens": [50600, 407, 286, 20608, 2059, 281, 13389, 1412, 322, 411, 264, 7713, 18734, 3991, 3652, 11, 50948], "temperature": 0.0, "avg_logprob": -0.23991311017204733, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.028204619884490967}, {"id": 45, "seek": 25376, "start": 265.44, "end": 269.2, "text": " which is XT4, XFS, those are the traditional ones,", "tokens": [50948, 597, 307, 1783, 51, 19, 11, 1783, 29318, 11, 729, 366, 264, 5164, 2306, 11, 51136], "temperature": 0.0, "avg_logprob": -0.23991311017204733, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.028204619884490967}, {"id": 46, "seek": 25376, "start": 269.2, "end": 273.12, "text": " then the new which is BTRFS and ZFS.", "tokens": [51136, 550, 264, 777, 597, 307, 363, 25936, 29318, 293, 1176, 29318, 13, 51332], "temperature": 0.0, "avg_logprob": -0.23991311017204733, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.028204619884490967}, {"id": 47, "seek": 25376, "start": 273.12, "end": 281.59999999999997, "text": " ZFS is like not like native Linux file systems, of course, but it's commonly used.", "tokens": [51332, 1176, 29318, 307, 411, 406, 411, 8470, 18734, 3991, 3652, 11, 295, 1164, 11, 457, 309, 311, 12719, 1143, 13, 51756], "temperature": 0.0, "avg_logprob": -0.23991311017204733, "compression_ratio": 1.4577114427860696, "no_speech_prob": 0.028204619884490967}, {"id": 48, "seek": 28160, "start": 281.6, "end": 286.88, "text": " Then I've been like thinking usually don't have a single device, right?", "tokens": [50364, 1396, 286, 600, 668, 411, 1953, 2673, 500, 380, 362, 257, 2167, 4302, 11, 558, 30, 50628], "temperature": 0.0, "avg_logprob": -0.20983739521192468, "compression_ratio": 1.6439024390243901, "no_speech_prob": 0.0029965650755912066}, {"id": 49, "seek": 28160, "start": 286.88, "end": 294.96000000000004, "text": " You have like multiple devices, so should you use like LVM to build like a volume on those devices?", "tokens": [50628, 509, 362, 411, 3866, 5759, 11, 370, 820, 291, 764, 411, 441, 53, 44, 281, 1322, 411, 257, 5523, 322, 729, 5759, 30, 51032], "temperature": 0.0, "avg_logprob": -0.20983739521192468, "compression_ratio": 1.6439024390243901, "no_speech_prob": 0.0029965650755912066}, {"id": 50, "seek": 28160, "start": 294.96000000000004, "end": 300.8, "text": " Or should you use something that has multi-device support built in, right?", "tokens": [51032, 1610, 820, 291, 764, 746, 300, 575, 4825, 12, 40343, 573, 1406, 3094, 294, 11, 558, 30, 51324], "temperature": 0.0, "avg_logprob": -0.20983739521192468, "compression_ratio": 1.6439024390243901, "no_speech_prob": 0.0029965650755912066}, {"id": 51, "seek": 28160, "start": 300.8, "end": 308.96000000000004, "text": " Which is like BTRFS and ZFS, they don't require you to build like a rate, a rate and that.", "tokens": [51324, 3013, 307, 411, 363, 25936, 29318, 293, 1176, 29318, 11, 436, 500, 380, 3651, 291, 281, 1322, 411, 257, 3314, 11, 257, 3314, 293, 300, 13, 51732], "temperature": 0.0, "avg_logprob": -0.20983739521192468, "compression_ratio": 1.6439024390243901, "no_speech_prob": 0.0029965650755912066}, {"id": 52, "seek": 30896, "start": 309.03999999999996, "end": 311.84, "text": " Then there's like the question of snapshots, right?", "tokens": [50368, 1396, 456, 311, 411, 264, 1168, 295, 19206, 27495, 11, 558, 30, 50508], "temperature": 0.0, "avg_logprob": -0.19048167691372409, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.00487393606454134}, {"id": 53, "seek": 30896, "start": 311.84, "end": 316.0, "text": " If you need just the bare file system and POSGRACE is fine with that,", "tokens": [50508, 759, 291, 643, 445, 264, 6949, 3991, 1185, 293, 430, 4367, 38, 3750, 4969, 307, 2489, 365, 300, 11, 50716], "temperature": 0.0, "avg_logprob": -0.19048167691372409, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.00487393606454134}, {"id": 54, "seek": 30896, "start": 317.91999999999996, "end": 322.0, "text": " then the XT4, XFS are perfectly viable solutions.", "tokens": [50812, 550, 264, 1783, 51, 19, 11, 1783, 29318, 366, 6239, 22024, 6547, 13, 51016], "temperature": 0.0, "avg_logprob": -0.19048167691372409, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.00487393606454134}, {"id": 55, "seek": 30896, "start": 322.0, "end": 324.08, "text": " But maybe you want something smarter, right?", "tokens": [51016, 583, 1310, 291, 528, 746, 20294, 11, 558, 30, 51120], "temperature": 0.0, "avg_logprob": -0.19048167691372409, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.00487393606454134}, {"id": 56, "seek": 30896, "start": 324.08, "end": 327.44, "text": " Maybe you want to be able to do backups using snapshots,", "tokens": [51120, 2704, 291, 528, 281, 312, 1075, 281, 360, 50160, 1228, 19206, 27495, 11, 51288], "temperature": 0.0, "avg_logprob": -0.19048167691372409, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.00487393606454134}, {"id": 57, "seek": 30896, "start": 327.44, "end": 334.0, "text": " or maybe you want to use the, you know, the sent and receive which is built into ZFS", "tokens": [51288, 420, 1310, 291, 528, 281, 764, 264, 11, 291, 458, 11, 264, 2279, 293, 4774, 597, 307, 3094, 666, 1176, 29318, 51616], "temperature": 0.0, "avg_logprob": -0.19048167691372409, "compression_ratio": 1.5633187772925765, "no_speech_prob": 0.00487393606454134}, {"id": 58, "seek": 33400, "start": 334.96, "end": 338.4, "text": " to replicate data or stuff like that, right?", "tokens": [50412, 281, 25356, 1412, 420, 1507, 411, 300, 11, 558, 30, 50584], "temperature": 0.0, "avg_logprob": -0.21729841577001366, "compression_ratio": 1.5841121495327102, "no_speech_prob": 0.014009456150233746}, {"id": 59, "seek": 33400, "start": 338.4, "end": 343.6, "text": " So the question is like what happens when you actually want snapshots up more?", "tokens": [50584, 407, 264, 1168, 307, 411, 437, 2314, 562, 291, 767, 528, 19206, 27495, 493, 544, 30, 50844], "temperature": 0.0, "avg_logprob": -0.21729841577001366, "compression_ratio": 1.5841121495327102, "no_speech_prob": 0.014009456150233746}, {"id": 60, "seek": 33400, "start": 346.32, "end": 352.56, "text": " I did some experiments with stuff like compression and so on in the file systems,", "tokens": [50980, 286, 630, 512, 12050, 365, 1507, 411, 19355, 293, 370, 322, 294, 264, 3991, 3652, 11, 51292], "temperature": 0.0, "avg_logprob": -0.21729841577001366, "compression_ratio": 1.5841121495327102, "no_speech_prob": 0.014009456150233746}, {"id": 61, "seek": 33400, "start": 352.56, "end": 358.72, "text": " but in my benchmarks, in the stuff that I benchmark, it didn't make much difference.", "tokens": [51292, 457, 294, 452, 43751, 11, 294, 264, 1507, 300, 286, 18927, 11, 309, 994, 380, 652, 709, 2649, 13, 51600], "temperature": 0.0, "avg_logprob": -0.21729841577001366, "compression_ratio": 1.5841121495327102, "no_speech_prob": 0.014009456150233746}, {"id": 62, "seek": 33400, "start": 358.72, "end": 362.0, "text": " I'm not saying that that's like universal truth.", "tokens": [51600, 286, 478, 406, 1566, 300, 300, 311, 411, 11455, 3494, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21729841577001366, "compression_ratio": 1.5841121495327102, "no_speech_prob": 0.014009456150233746}, {"id": 63, "seek": 36400, "start": 364.96, "end": 370.96, "text": " But I'm not going to show any results with and without compression", "tokens": [50412, 583, 286, 478, 406, 516, 281, 855, 604, 3542, 365, 293, 1553, 19355, 50712], "temperature": 0.0, "avg_logprob": -0.15782519022623698, "compression_ratio": 1.4439461883408071, "no_speech_prob": 0.00142668595071882}, {"id": 64, "seek": 36400, "start": 370.96, "end": 375.52, "text": " because simply there was no difference for the OLTP workloads that I tested.", "tokens": [50712, 570, 2935, 456, 390, 572, 2649, 337, 264, 39191, 16804, 32452, 300, 286, 8246, 13, 50940], "temperature": 0.0, "avg_logprob": -0.15782519022623698, "compression_ratio": 1.4439461883408071, "no_speech_prob": 0.00142668595071882}, {"id": 65, "seek": 36400, "start": 377.6, "end": 384.48, "text": " So a very brief executive summary, just like to explain what I found or what I think is my", "tokens": [51044, 407, 257, 588, 5353, 10140, 12691, 11, 445, 411, 281, 2903, 437, 286, 1352, 420, 437, 286, 519, 307, 452, 51388], "temperature": 0.0, "avg_logprob": -0.15782519022623698, "compression_ratio": 1.4439461883408071, "no_speech_prob": 0.00142668595071882}, {"id": 66, "seek": 36400, "start": 384.48, "end": 389.6, "text": " conclusion is that in general, you should prefer a major supportive file system, right?", "tokens": [51388, 10063, 307, 300, 294, 2674, 11, 291, 820, 4382, 257, 2563, 14435, 3991, 1185, 11, 558, 30, 51644], "temperature": 0.0, "avg_logprob": -0.15782519022623698, "compression_ratio": 1.4439461883408071, "no_speech_prob": 0.00142668595071882}, {"id": 67, "seek": 38960, "start": 389.68, "end": 395.04, "text": " You do run databases because you want to maintain the data, right?", "tokens": [50368, 509, 360, 1190, 22380, 570, 291, 528, 281, 6909, 264, 1412, 11, 558, 30, 50636], "temperature": 0.0, "avg_logprob": -0.14623129102918836, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0046572694554924965}, {"id": 68, "seek": 38960, "start": 395.04, "end": 398.8, "text": " I mean like if you have a file system which is like super fast, experimental,", "tokens": [50636, 286, 914, 411, 498, 291, 362, 257, 3991, 1185, 597, 307, 411, 1687, 2370, 11, 17069, 11, 50824], "temperature": 0.0, "avg_logprob": -0.14623129102918836, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0046572694554924965}, {"id": 69, "seek": 38960, "start": 399.76000000000005, "end": 406.16, "text": " and you know once in a while loses your data, it's like okay, maybe you don't really need", "tokens": [50872, 293, 291, 458, 1564, 294, 257, 1339, 18293, 428, 1412, 11, 309, 311, 411, 1392, 11, 1310, 291, 500, 380, 534, 643, 51192], "temperature": 0.0, "avg_logprob": -0.14623129102918836, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0046572694554924965}, {"id": 70, "seek": 38960, "start": 406.16, "end": 408.08000000000004, "text": " like F-Sync at all, right?", "tokens": [51192, 411, 479, 12, 50, 34015, 412, 439, 11, 558, 30, 51288], "temperature": 0.0, "avg_logprob": -0.14623129102918836, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0046572694554924965}, {"id": 71, "seek": 38960, "start": 408.08000000000004, "end": 415.52000000000004, "text": " So my recommendation is in general to use supportive file system which is supported by", "tokens": [51288, 407, 452, 11879, 307, 294, 2674, 281, 764, 14435, 3991, 1185, 597, 307, 8104, 538, 51660], "temperature": 0.0, "avg_logprob": -0.14623129102918836, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.0046572694554924965}, {"id": 72, "seek": 41552, "start": 415.52, "end": 420.24, "text": " whoever supports your operating system or like the environment.", "tokens": [50364, 11387, 9346, 428, 7447, 1185, 420, 411, 264, 2823, 13, 50600], "temperature": 0.0, "avg_logprob": -0.16988068122368355, "compression_ratio": 1.591549295774648, "no_speech_prob": 0.0031054895371198654}, {"id": 73, "seek": 41552, "start": 421.28, "end": 428.24, "text": " And that usually means like one of those four fast systems that I mentioned.", "tokens": [50652, 400, 300, 2673, 1355, 411, 472, 295, 729, 1451, 2370, 3652, 300, 286, 2835, 13, 51000], "temperature": 0.0, "avg_logprob": -0.16988068122368355, "compression_ratio": 1.591549295774648, "no_speech_prob": 0.0031054895371198654}, {"id": 74, "seek": 41552, "start": 429.52, "end": 434.64, "text": " The other thing is that you should use sufficiently recent kernel.", "tokens": [51064, 440, 661, 551, 307, 300, 291, 820, 764, 31868, 5162, 28256, 13, 51320], "temperature": 0.0, "avg_logprob": -0.16988068122368355, "compression_ratio": 1.591549295774648, "no_speech_prob": 0.0031054895371198654}, {"id": 75, "seek": 41552, "start": 435.84, "end": 438.15999999999997, "text": " And there are two main reasons for that.", "tokens": [51380, 400, 456, 366, 732, 2135, 4112, 337, 300, 13, 51496], "temperature": 0.0, "avg_logprob": -0.16988068122368355, "compression_ratio": 1.591549295774648, "no_speech_prob": 0.0031054895371198654}, {"id": 76, "seek": 41552, "start": 438.15999999999997, "end": 445.44, "text": " First is well, we do improve the database, but the kernel improves other parts too, right?", "tokens": [51496, 2386, 307, 731, 11, 321, 360, 3470, 264, 8149, 11, 457, 264, 28256, 24771, 661, 3166, 886, 11, 558, 30, 51860], "temperature": 0.0, "avg_logprob": -0.16988068122368355, "compression_ratio": 1.591549295774648, "no_speech_prob": 0.0031054895371198654}, {"id": 77, "seek": 44552, "start": 445.76, "end": 452.56, "text": " So if you are using like old kernel and that might mean a couple years ago, a couple years old,", "tokens": [50376, 407, 498, 291, 366, 1228, 411, 1331, 28256, 293, 300, 1062, 914, 257, 1916, 924, 2057, 11, 257, 1916, 924, 1331, 11, 50716], "temperature": 0.0, "avg_logprob": -0.09934046182287745, "compression_ratio": 1.7282051282051283, "no_speech_prob": 0.003799396799877286}, {"id": 78, "seek": 44552, "start": 453.28, "end": 459.28, "text": " you are losing a lot of optimizations and improvements that are typically focused on", "tokens": [50752, 291, 366, 7027, 257, 688, 295, 5028, 14455, 293, 13797, 300, 366, 5850, 5178, 322, 51052], "temperature": 0.0, "avg_logprob": -0.09934046182287745, "compression_ratio": 1.7282051282051283, "no_speech_prob": 0.003799396799877286}, {"id": 79, "seek": 44552, "start": 459.28, "end": 460.47999999999996, "text": " like a new hardware.", "tokens": [51052, 411, 257, 777, 8837, 13, 51112], "temperature": 0.0, "avg_logprob": -0.09934046182287745, "compression_ratio": 1.7282051282051283, "no_speech_prob": 0.003799396799877286}, {"id": 80, "seek": 44552, "start": 461.59999999999997, "end": 465.52, "text": " So if you are using new hardware, you are usually losing a lot of performance.", "tokens": [51168, 407, 498, 291, 366, 1228, 777, 8837, 11, 291, 366, 2673, 7027, 257, 688, 295, 3389, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09934046182287745, "compression_ratio": 1.7282051282051283, "no_speech_prob": 0.003799396799877286}, {"id": 81, "seek": 44552, "start": 467.2, "end": 472.24, "text": " The other important reason of course is the bugs, right?", "tokens": [51448, 440, 661, 1021, 1778, 295, 1164, 307, 264, 15120, 11, 558, 30, 51700], "temperature": 0.0, "avg_logprob": -0.09934046182287745, "compression_ratio": 1.7282051282051283, "no_speech_prob": 0.003799396799877286}, {"id": 82, "seek": 47224, "start": 472.32, "end": 477.04, "text": " And I'm not just talking about the regular security issues and so on.", "tokens": [50368, 400, 286, 478, 406, 445, 1417, 466, 264, 3890, 3825, 2663, 293, 370, 322, 13, 50604], "temperature": 0.0, "avg_logprob": -0.171473571232387, "compression_ratio": 1.4195402298850575, "no_speech_prob": 0.0020031798630952835}, {"id": 83, "seek": 47224, "start": 477.04, "end": 485.44, "text": " I'm talking about like data corruption issues that are in the kernel.", "tokens": [50604, 286, 478, 1417, 466, 411, 1412, 17959, 2663, 300, 366, 294, 264, 28256, 13, 51024], "temperature": 0.0, "avg_logprob": -0.171473571232387, "compression_ratio": 1.4195402298850575, "no_speech_prob": 0.0020031798630952835}, {"id": 84, "seek": 47224, "start": 489.92, "end": 493.52, "text": " I think I do have a slide where I mentioned the F-Sync gate,", "tokens": [51248, 286, 519, 286, 360, 362, 257, 4137, 689, 286, 2835, 264, 479, 12, 50, 34015, 8539, 11, 51428], "temperature": 0.0, "avg_logprob": -0.171473571232387, "compression_ratio": 1.4195402298850575, "no_speech_prob": 0.0020031798630952835}, {"id": 85, "seek": 47224, "start": 494.8, "end": 499.28000000000003, "text": " which I think I spoke at FOSDEM about in 2019.", "tokens": [51492, 597, 286, 519, 286, 7179, 412, 479, 4367, 35, 6683, 466, 294, 6071, 13, 51716], "temperature": 0.0, "avg_logprob": -0.171473571232387, "compression_ratio": 1.4195402298850575, "no_speech_prob": 0.0020031798630952835}, {"id": 86, "seek": 49928, "start": 499.28, "end": 508.71999999999997, "text": " But the other part of the executive summary is that EXT4 and XFS are roughly the same performance.", "tokens": [50364, 583, 264, 661, 644, 295, 264, 10140, 12691, 307, 300, 16385, 51, 19, 293, 1783, 29318, 366, 9810, 264, 912, 3389, 13, 50836], "temperature": 0.0, "avg_logprob": -0.17330025653449857, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0037269028834998608}, {"id": 87, "seek": 49928, "start": 508.71999999999997, "end": 516.4, "text": " I mean like I don't think you need to talk very much about like should I use EXT4 or XFS?", "tokens": [50836, 286, 914, 411, 286, 500, 380, 519, 291, 643, 281, 751, 588, 709, 466, 411, 820, 286, 764, 16385, 51, 19, 420, 1783, 29318, 30, 51220], "temperature": 0.0, "avg_logprob": -0.17330025653449857, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0037269028834998608}, {"id": 88, "seek": 49928, "start": 516.4, "end": 518.24, "text": " Like will it be faster or slower?", "tokens": [51220, 1743, 486, 309, 312, 4663, 420, 14009, 30, 51312], "temperature": 0.0, "avg_logprob": -0.17330025653449857, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0037269028834998608}, {"id": 89, "seek": 49928, "start": 520.4, "end": 524.56, "text": " Through this, I mean like in my experience, the differences are fairly small.", "tokens": [51420, 8927, 341, 11, 286, 914, 411, 294, 452, 1752, 11, 264, 7300, 366, 6457, 1359, 13, 51628], "temperature": 0.0, "avg_logprob": -0.17330025653449857, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0037269028834998608}, {"id": 90, "seek": 49928, "start": 524.56, "end": 528.88, "text": " And by fairly small, I mean like 10% difference in throughput for example.", "tokens": [51628, 400, 538, 6457, 1359, 11, 286, 914, 411, 1266, 4, 2649, 294, 44629, 337, 1365, 13, 51844], "temperature": 0.0, "avg_logprob": -0.17330025653449857, "compression_ratio": 1.5756302521008403, "no_speech_prob": 0.0037269028834998608}, {"id": 91, "seek": 52928, "start": 530.0, "end": 535.68, "text": " It's something that I believe I could probably tune the file system,", "tokens": [50400, 467, 311, 746, 300, 286, 1697, 286, 727, 1391, 10864, 264, 3991, 1185, 11, 50684], "temperature": 0.0, "avg_logprob": -0.26723668575286863, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0038863206282258034}, {"id": 92, "seek": 52928, "start": 535.68, "end": 543.4399999999999, "text": " actually eliminate by tuning the file system or maybe buying a slightly faster disks or like", "tokens": [50684, 767, 13819, 538, 15164, 264, 3991, 1185, 420, 1310, 6382, 257, 4748, 4663, 41617, 420, 411, 51072], "temperature": 0.0, "avg_logprob": -0.26723668575286863, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0038863206282258034}, {"id": 93, "seek": 52928, "start": 543.4399999999999, "end": 544.3199999999999, "text": " something like that.", "tokens": [51072, 746, 411, 300, 13, 51116], "temperature": 0.0, "avg_logprob": -0.26723668575286863, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0038863206282258034}, {"id": 94, "seek": 52928, "start": 544.3199999999999, "end": 550.64, "text": " Is it a throughput? I also put 10% for the overall communication piece.", "tokens": [51116, 1119, 309, 257, 44629, 30, 286, 611, 829, 1266, 4, 337, 264, 4787, 6101, 2522, 13, 51432], "temperature": 0.0, "avg_logprob": -0.26723668575286863, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0038863206282258034}, {"id": 95, "seek": 52928, "start": 550.64, "end": 556.56, "text": " Yeah, so the question is like how do I measure, you know, the performance?", "tokens": [51432, 865, 11, 370, 264, 1168, 307, 411, 577, 360, 286, 3481, 11, 291, 458, 11, 264, 3389, 30, 51728], "temperature": 0.0, "avg_logprob": -0.26723668575286863, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.0038863206282258034}, {"id": 96, "seek": 55656, "start": 556.88, "end": 558.16, "text": " What do I mean by throughput?", "tokens": [50380, 708, 360, 286, 914, 538, 44629, 30, 50444], "temperature": 0.0, "avg_logprob": -0.19210188547770182, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.002611628035083413}, {"id": 97, "seek": 55656, "start": 560.4799999999999, "end": 568.3199999999999, "text": " I mean OLTP performance in the database, which means like small, random IO, random reads,", "tokens": [50560, 286, 914, 39191, 16804, 3389, 294, 264, 8149, 11, 597, 1355, 411, 1359, 11, 4974, 39839, 11, 4974, 15700, 11, 50952], "temperature": 0.0, "avg_logprob": -0.19210188547770182, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.002611628035083413}, {"id": 98, "seek": 55656, "start": 568.3199999999999, "end": 570.0, "text": " random writes and so on.", "tokens": [50952, 4974, 13657, 293, 370, 322, 13, 51036], "temperature": 0.0, "avg_logprob": -0.19210188547770182, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.002611628035083413}, {"id": 99, "seek": 55656, "start": 570.8, "end": 575.68, "text": " So that's what I mean by difference in performance.", "tokens": [51076, 407, 300, 311, 437, 286, 914, 538, 2649, 294, 3389, 13, 51320], "temperature": 0.0, "avg_logprob": -0.19210188547770182, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.002611628035083413}, {"id": 100, "seek": 55656, "start": 576.3199999999999, "end": 582.56, "text": " If the database does like 100,000 transactions per second, and the other on a different file", "tokens": [51352, 759, 264, 8149, 775, 411, 2319, 11, 1360, 16856, 680, 1150, 11, 293, 264, 661, 322, 257, 819, 3991, 51664], "temperature": 0.0, "avg_logprob": -0.19210188547770182, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.002611628035083413}, {"id": 101, "seek": 58256, "start": 582.56, "end": 586.56, "text": " system, it does like 110,000 transactions per second.", "tokens": [50364, 1185, 11, 309, 775, 411, 20154, 11, 1360, 16856, 680, 1150, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17587581377350883, "compression_ratio": 1.4790697674418605, "no_speech_prob": 0.008047203533351421}, {"id": 102, "seek": 58256, "start": 586.56, "end": 588.56, "text": " That's the throughput that I care about.", "tokens": [50564, 663, 311, 264, 44629, 300, 286, 1127, 466, 13, 50664], "temperature": 0.0, "avg_logprob": -0.17587581377350883, "compression_ratio": 1.4790697674418605, "no_speech_prob": 0.008047203533351421}, {"id": 103, "seek": 58256, "start": 589.4399999999999, "end": 590.4799999999999, "text": " Does it answer the question?", "tokens": [50708, 4402, 309, 1867, 264, 1168, 30, 50760], "temperature": 0.0, "avg_logprob": -0.17587581377350883, "compression_ratio": 1.4790697674418605, "no_speech_prob": 0.008047203533351421}, {"id": 104, "seek": 58256, "start": 591.28, "end": 592.0, "text": " Yes.", "tokens": [50800, 1079, 13, 50836], "temperature": 0.0, "avg_logprob": -0.17587581377350883, "compression_ratio": 1.4790697674418605, "no_speech_prob": 0.008047203533351421}, {"id": 105, "seek": 58256, "start": 592.0, "end": 592.64, "text": " Yeah, cool.", "tokens": [50836, 865, 11, 1627, 13, 50868], "temperature": 0.0, "avg_logprob": -0.17587581377350883, "compression_ratio": 1.4790697674418605, "no_speech_prob": 0.008047203533351421}, {"id": 106, "seek": 58256, "start": 594.64, "end": 600.2399999999999, "text": " Obviously throughput is not like, I'm going to talk about like other ways, other things that need", "tokens": [50968, 7580, 44629, 307, 406, 411, 11, 286, 478, 516, 281, 751, 466, 411, 661, 2098, 11, 661, 721, 300, 643, 51248], "temperature": 0.0, "avg_logprob": -0.17587581377350883, "compression_ratio": 1.4790697674418605, "no_speech_prob": 0.008047203533351421}, {"id": 107, "seek": 58256, "start": 600.2399999999999, "end": 602.7199999999999, "text": " to be considered when comparing file systems.", "tokens": [51248, 281, 312, 4888, 562, 15763, 3991, 3652, 13, 51372], "temperature": 0.0, "avg_logprob": -0.17587581377350883, "compression_ratio": 1.4790697674418605, "no_speech_prob": 0.008047203533351421}, {"id": 108, "seek": 58256, "start": 603.8399999999999, "end": 605.8399999999999, "text": " But this is like the gist, right?", "tokens": [51428, 583, 341, 307, 411, 264, 290, 468, 11, 558, 30, 51528], "temperature": 0.0, "avg_logprob": -0.17587581377350883, "compression_ratio": 1.4790697674418605, "no_speech_prob": 0.008047203533351421}, {"id": 109, "seek": 60584, "start": 605.9200000000001, "end": 614.1600000000001, "text": " Like if I had to choose from the EXT4 and XFS, I would probably pick what's default", "tokens": [50368, 1743, 498, 286, 632, 281, 2826, 490, 264, 16385, 51, 19, 293, 1783, 29318, 11, 286, 576, 1391, 1888, 437, 311, 7576, 50780], "temperature": 0.0, "avg_logprob": -0.1660904171823085, "compression_ratio": 1.4553571428571428, "no_speech_prob": 0.006673639640212059}, {"id": 110, "seek": 60584, "start": 614.1600000000001, "end": 617.76, "text": " into distribution that I'm using because that's simply easier.", "tokens": [50780, 666, 7316, 300, 286, 478, 1228, 570, 300, 311, 2935, 3571, 13, 50960], "temperature": 0.0, "avg_logprob": -0.1660904171823085, "compression_ratio": 1.4553571428571428, "no_speech_prob": 0.006673639640212059}, {"id": 111, "seek": 60584, "start": 621.12, "end": 627.2, "text": " And then of course, if you need something like more advanced, if you need snapshots,", "tokens": [51128, 400, 550, 295, 1164, 11, 498, 291, 643, 746, 411, 544, 7339, 11, 498, 291, 643, 19206, 27495, 11, 51432], "temperature": 0.0, "avg_logprob": -0.1660904171823085, "compression_ratio": 1.4553571428571428, "no_speech_prob": 0.006673639640212059}, {"id": 112, "seek": 60584, "start": 627.2, "end": 634.1600000000001, "text": " for example, and if you use them heavily, then I would definitely go with either ZFS or BTRFS.", "tokens": [51432, 337, 1365, 11, 293, 498, 291, 764, 552, 10950, 11, 550, 286, 576, 2138, 352, 365, 2139, 1176, 29318, 420, 363, 25936, 29318, 13, 51780], "temperature": 0.0, "avg_logprob": -0.1660904171823085, "compression_ratio": 1.4553571428571428, "no_speech_prob": 0.006673639640212059}, {"id": 113, "seek": 63416, "start": 634.88, "end": 643.52, "text": " And I'm probably way more in the ZFS camp, like because of the reasons that I will talk", "tokens": [50400, 400, 286, 478, 1391, 636, 544, 294, 264, 1176, 29318, 2255, 11, 411, 570, 295, 264, 4112, 300, 286, 486, 751, 50832], "temperature": 0.0, "avg_logprob": -0.11558704945578505, "compression_ratio": 1.4191616766467066, "no_speech_prob": 0.00399938365444541}, {"id": 114, "seek": 63416, "start": 643.52, "end": 644.88, "text": " about later, about the results.", "tokens": [50832, 466, 1780, 11, 466, 264, 3542, 13, 50900], "temperature": 0.0, "avg_logprob": -0.11558704945578505, "compression_ratio": 1.4191616766467066, "no_speech_prob": 0.00399938365444541}, {"id": 115, "seek": 63416, "start": 647.28, "end": 651.12, "text": " Obviously, if you only need snapshots like once in a while, you could use LVM", "tokens": [51020, 7580, 11, 498, 291, 787, 643, 19206, 27495, 411, 1564, 294, 257, 1339, 11, 291, 727, 764, 441, 53, 44, 51212], "temperature": 0.0, "avg_logprob": -0.11558704945578505, "compression_ratio": 1.4191616766467066, "no_speech_prob": 0.00399938365444541}, {"id": 116, "seek": 63416, "start": 652.0799999999999, "end": 655.04, "text": " and snapshots at that level that works.", "tokens": [51260, 293, 19206, 27495, 412, 300, 1496, 300, 1985, 13, 51408], "temperature": 0.0, "avg_logprob": -0.11558704945578505, "compression_ratio": 1.4191616766467066, "no_speech_prob": 0.00399938365444541}, {"id": 117, "seek": 65504, "start": 656.0, "end": 664.48, "text": " But the native snapshots in copy on write file systems are usually much faster.", "tokens": [50412, 583, 264, 8470, 19206, 27495, 294, 5055, 322, 2464, 3991, 3652, 366, 2673, 709, 4663, 13, 50836], "temperature": 0.0, "avg_logprob": -0.29704300049812565, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.006256699562072754}, {"id": 118, "seek": 65504, "start": 664.48, "end": 671.12, "text": " They have like much slower impact on throughput of the database or on performance.", "tokens": [50836, 814, 362, 411, 709, 14009, 2712, 322, 44629, 295, 264, 8149, 420, 322, 3389, 13, 51168], "temperature": 0.0, "avg_logprob": -0.29704300049812565, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.006256699562072754}, {"id": 119, "seek": 65504, "start": 674.4, "end": 674.88, "text": " Right.", "tokens": [51332, 1779, 13, 51356], "temperature": 0.0, "avg_logprob": -0.29704300049812565, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.006256699562072754}, {"id": 120, "seek": 65504, "start": 674.88, "end": 680.9599999999999, "text": " So the first thing I'm going to talk about is why Postgres actually relies on operating system", "tokens": [51356, 407, 264, 700, 551, 286, 478, 516, 281, 751, 466, 307, 983, 10223, 45189, 767, 30910, 322, 7447, 1185, 51660], "temperature": 0.0, "avg_logprob": -0.29704300049812565, "compression_ratio": 1.4426229508196722, "no_speech_prob": 0.006256699562072754}, {"id": 121, "seek": 68096, "start": 681.6, "end": 686.0, "text": " so much because there are databases that just kind of like ignore the file system", "tokens": [50396, 370, 709, 570, 456, 366, 22380, 300, 445, 733, 295, 411, 11200, 264, 3991, 1185, 50616], "temperature": 0.0, "avg_logprob": -0.22067730050337941, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.01109770406037569}, {"id": 122, "seek": 68096, "start": 687.0400000000001, "end": 693.9200000000001, "text": " or and either like implement like completely custom file systems on raw devices or", "tokens": [50668, 420, 293, 2139, 411, 4445, 411, 2584, 2375, 3991, 3652, 322, 8936, 5759, 420, 51012], "temperature": 0.0, "avg_logprob": -0.22067730050337941, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.01109770406037569}, {"id": 123, "seek": 68096, "start": 695.9200000000001, "end": 697.12, "text": " do something else, right?", "tokens": [51112, 360, 746, 1646, 11, 558, 30, 51172], "temperature": 0.0, "avg_logprob": -0.22067730050337941, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.01109770406037569}, {"id": 124, "seek": 68096, "start": 697.12, "end": 702.48, "text": " Like do much more like direct IO and so on.", "tokens": [51172, 1743, 360, 709, 544, 411, 2047, 286, 46, 293, 370, 322, 13, 51440], "temperature": 0.0, "avg_logprob": -0.22067730050337941, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.01109770406037569}, {"id": 125, "seek": 68096, "start": 703.0400000000001, "end": 709.2800000000001, "text": " And the answer is like, I do recognize the complexity of the file systems, right?", "tokens": [51468, 400, 264, 1867, 307, 411, 11, 286, 360, 5521, 264, 14024, 295, 264, 3991, 3652, 11, 558, 30, 51780], "temperature": 0.0, "avg_logprob": -0.22067730050337941, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.01109770406037569}, {"id": 126, "seek": 71096, "start": 711.2, "end": 715.6800000000001, "text": " Database engineers sometimes have the tendency to say like, oh, it's file system.", "tokens": [50376, 40461, 651, 11955, 2171, 362, 264, 18187, 281, 584, 411, 11, 1954, 11, 309, 311, 3991, 1185, 13, 50600], "temperature": 0.0, "avg_logprob": -0.11946472044914, "compression_ratio": 1.8393574297188755, "no_speech_prob": 0.0025820613373070955}, {"id": 127, "seek": 71096, "start": 715.6800000000001, "end": 716.5600000000001, "text": " It's simple, right?", "tokens": [50600, 467, 311, 2199, 11, 558, 30, 50644], "temperature": 0.0, "avg_logprob": -0.11946472044914, "compression_ratio": 1.8393574297188755, "no_speech_prob": 0.0025820613373070955}, {"id": 128, "seek": 71096, "start": 716.5600000000001, "end": 723.52, "text": " It's like you overvalue the complexity of the layer you are working on, on the database", "tokens": [50644, 467, 311, 411, 291, 670, 29155, 264, 14024, 295, 264, 4583, 291, 366, 1364, 322, 11, 322, 264, 8149, 50992], "temperature": 0.0, "avg_logprob": -0.11946472044914, "compression_ratio": 1.8393574297188755, "no_speech_prob": 0.0025820613373070955}, {"id": 129, "seek": 71096, "start": 723.52, "end": 728.08, "text": " and kind of like diminish the say like, oh, no, all the layers are simple.", "tokens": [50992, 293, 733, 295, 411, 48696, 264, 584, 411, 11, 1954, 11, 572, 11, 439, 264, 7914, 366, 2199, 13, 51220], "temperature": 0.0, "avg_logprob": -0.11946472044914, "compression_ratio": 1.8393574297188755, "no_speech_prob": 0.0025820613373070955}, {"id": 130, "seek": 71096, "start": 728.08, "end": 731.2800000000001, "text": " The stuff that I'm doing is like very, very complex, right?", "tokens": [51220, 440, 1507, 300, 286, 478, 884, 307, 411, 588, 11, 588, 3997, 11, 558, 30, 51380], "temperature": 0.0, "avg_logprob": -0.11946472044914, "compression_ratio": 1.8393574297188755, "no_speech_prob": 0.0025820613373070955}, {"id": 131, "seek": 71096, "start": 731.2800000000001, "end": 733.84, "text": " And I want to say that I don't think that at all.", "tokens": [51380, 400, 286, 528, 281, 584, 300, 286, 500, 380, 519, 300, 412, 439, 13, 51508], "temperature": 0.0, "avg_logprob": -0.11946472044914, "compression_ratio": 1.8393574297188755, "no_speech_prob": 0.0025820613373070955}, {"id": 132, "seek": 71096, "start": 734.64, "end": 740.48, "text": " I do recognize that all the layers, both below the database and above the database,", "tokens": [51548, 286, 360, 5521, 300, 439, 264, 7914, 11, 1293, 2507, 264, 8149, 293, 3673, 264, 8149, 11, 51840], "temperature": 0.0, "avg_logprob": -0.11946472044914, "compression_ratio": 1.8393574297188755, "no_speech_prob": 0.0025820613373070955}, {"id": 133, "seek": 74048, "start": 740.48, "end": 742.48, "text": " have significant complexity, right?", "tokens": [50364, 362, 4776, 14024, 11, 558, 30, 50464], "temperature": 0.0, "avg_logprob": -0.09879990281729863, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.001143472152762115}, {"id": 134, "seek": 74048, "start": 743.44, "end": 745.84, "text": " And I'm not here to talk shit about file systems.", "tokens": [50512, 400, 286, 478, 406, 510, 281, 751, 4611, 466, 3991, 3652, 13, 50632], "temperature": 0.0, "avg_logprob": -0.09879990281729863, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.001143472152762115}, {"id": 135, "seek": 74048, "start": 747.28, "end": 750.88, "text": " I'm here to learn something essentially, right?", "tokens": [50704, 286, 478, 510, 281, 1466, 746, 4476, 11, 558, 30, 50884], "temperature": 0.0, "avg_logprob": -0.09879990281729863, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.001143472152762115}, {"id": 136, "seek": 74048, "start": 750.88, "end": 754.08, "text": " So Postgres is a database, right?", "tokens": [50884, 407, 10223, 45189, 307, 257, 8149, 11, 558, 30, 51044], "temperature": 0.0, "avg_logprob": -0.09879990281729863, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.001143472152762115}, {"id": 137, "seek": 74048, "start": 754.96, "end": 760.32, "text": " We are storing and accessing data and that's the whole point why we actually do what we do.", "tokens": [51088, 492, 366, 26085, 293, 26440, 1412, 293, 300, 311, 264, 1379, 935, 983, 321, 767, 360, 437, 321, 360, 13, 51356], "temperature": 0.0, "avg_logprob": -0.09879990281729863, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.001143472152762115}, {"id": 138, "seek": 74048, "start": 762.5600000000001, "end": 767.36, "text": " But we do leave the low level stuff to the operating system and the operating system", "tokens": [51468, 583, 321, 360, 1856, 264, 2295, 1496, 1507, 281, 264, 7447, 1185, 293, 264, 7447, 1185, 51708], "temperature": 0.0, "avg_logprob": -0.09879990281729863, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.001143472152762115}, {"id": 139, "seek": 76736, "start": 767.36, "end": 777.12, "text": " implements the on-disk format, it implements the caching to kernel,", "tokens": [50364, 704, 17988, 264, 322, 12, 67, 7797, 7877, 11, 309, 704, 17988, 264, 269, 2834, 281, 28256, 11, 50852], "temperature": 0.0, "avg_logprob": -0.1548889705113002, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.016925161704421043}, {"id": 140, "seek": 76736, "start": 777.12, "end": 782.32, "text": " it implements the device drivers that communicate with the hardware and so on.", "tokens": [50852, 309, 704, 17988, 264, 4302, 11590, 300, 7890, 365, 264, 8837, 293, 370, 322, 13, 51112], "temperature": 0.0, "avg_logprob": -0.1548889705113002, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.016925161704421043}, {"id": 141, "seek": 76736, "start": 784.24, "end": 791.36, "text": " And we just use the Postgres interface on top of the operating system, on top of the kernel.", "tokens": [51208, 400, 321, 445, 764, 264, 10223, 45189, 9226, 322, 1192, 295, 264, 7447, 1185, 11, 322, 1192, 295, 264, 28256, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1548889705113002, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.016925161704421043}, {"id": 142, "seek": 76736, "start": 793.04, "end": 796.88, "text": " And all the low level stuff is responsibility of the operating system.", "tokens": [51648, 400, 439, 264, 2295, 1496, 1507, 307, 6357, 295, 264, 7447, 1185, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1548889705113002, "compression_ratio": 1.7613636363636365, "no_speech_prob": 0.016925161704421043}, {"id": 143, "seek": 79688, "start": 796.88, "end": 806.08, "text": " That might change a little bit with the patches that improve or start using the asynchronous", "tokens": [50364, 663, 1062, 1319, 257, 707, 857, 365, 264, 26531, 300, 3470, 420, 722, 1228, 264, 49174, 50824], "temperature": 0.0, "avg_logprob": -0.1706192960444185, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.0008782253717072308}, {"id": 144, "seek": 79688, "start": 806.08, "end": 810.96, "text": " IO and direct IO, but so far that wasn't the case.", "tokens": [50824, 39839, 293, 2047, 39839, 11, 457, 370, 1400, 300, 2067, 380, 264, 1389, 13, 51068], "temperature": 0.0, "avg_logprob": -0.1706192960444185, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.0008782253717072308}, {"id": 145, "seek": 79688, "start": 812.32, "end": 814.32, "text": " The question is like, is it even a good idea?", "tokens": [51136, 440, 1168, 307, 411, 11, 307, 309, 754, 257, 665, 1558, 30, 51236], "temperature": 0.0, "avg_logprob": -0.1706192960444185, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.0008782253717072308}, {"id": 146, "seek": 79688, "start": 814.32, "end": 819.36, "text": " I mean, shouldn't the database just do everything directly and just ignore the operating system?", "tokens": [51236, 286, 914, 11, 4659, 380, 264, 8149, 445, 360, 1203, 3838, 293, 445, 11200, 264, 7447, 1185, 30, 51488], "temperature": 0.0, "avg_logprob": -0.1706192960444185, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.0008782253717072308}, {"id": 147, "seek": 79688, "start": 819.36, "end": 821.12, "text": " Well, sure.", "tokens": [51488, 1042, 11, 988, 13, 51576], "temperature": 0.0, "avg_logprob": -0.1706192960444185, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.0008782253717072308}, {"id": 148, "seek": 79688, "start": 821.92, "end": 826.72, "text": " If you have the developer capacity to do that, if you have an infinite amount of money to", "tokens": [51616, 759, 291, 362, 264, 10754, 6042, 281, 360, 300, 11, 498, 291, 362, 364, 13785, 2372, 295, 1460, 281, 51856], "temperature": 0.0, "avg_logprob": -0.1706192960444185, "compression_ratio": 1.583673469387755, "no_speech_prob": 0.0008782253717072308}, {"id": 149, "seek": 82672, "start": 826.72, "end": 831.6, "text": " actually spend on development, then sure, you can do everything, right?", "tokens": [50364, 767, 3496, 322, 3250, 11, 550, 988, 11, 291, 393, 360, 1203, 11, 558, 30, 50608], "temperature": 0.0, "avg_logprob": -0.13671861795278695, "compression_ratio": 1.4104046242774566, "no_speech_prob": 0.003601791337132454}, {"id": 150, "seek": 82672, "start": 833.44, "end": 839.28, "text": " But the project doesn't have this advantage, right?", "tokens": [50700, 583, 264, 1716, 1177, 380, 362, 341, 5002, 11, 558, 30, 50992], "temperature": 0.0, "avg_logprob": -0.13671861795278695, "compression_ratio": 1.4104046242774566, "no_speech_prob": 0.003601791337132454}, {"id": 151, "seek": 82672, "start": 839.28, "end": 841.84, "text": " We do have a limited amount of time and so on.", "tokens": [50992, 492, 360, 362, 257, 5567, 2372, 295, 565, 293, 370, 322, 13, 51120], "temperature": 0.0, "avg_logprob": -0.13671861795278695, "compression_ratio": 1.4104046242774566, "no_speech_prob": 0.003601791337132454}, {"id": 152, "seek": 82672, "start": 842.48, "end": 851.12, "text": " So we decided or like, I haven't been contributing to Postgres back then,", "tokens": [51152, 407, 321, 3047, 420, 411, 11, 286, 2378, 380, 668, 19270, 281, 10223, 45189, 646, 550, 11, 51584], "temperature": 0.0, "avg_logprob": -0.13671861795278695, "compression_ratio": 1.4104046242774566, "no_speech_prob": 0.003601791337132454}, {"id": 153, "seek": 85112, "start": 851.12, "end": 857.6, "text": " but the choice was to just leave as much as possible to the operating system and it worked", "tokens": [50364, 457, 264, 3922, 390, 281, 445, 1856, 382, 709, 382, 1944, 281, 264, 7447, 1185, 293, 309, 2732, 50688], "temperature": 0.0, "avg_logprob": -0.1163755573638498, "compression_ratio": 1.528497409326425, "no_speech_prob": 0.007868122309446335}, {"id": 154, "seek": 85112, "start": 857.6, "end": 860.4, "text": " quite well so far, right?", "tokens": [50688, 1596, 731, 370, 1400, 11, 558, 30, 50828], "temperature": 0.0, "avg_logprob": -0.1163755573638498, "compression_ratio": 1.528497409326425, "no_speech_prob": 0.007868122309446335}, {"id": 155, "seek": 85112, "start": 860.4, "end": 867.52, "text": " And I'm not sure it would even be possible to do the custom stuff because there was so much,", "tokens": [50828, 400, 286, 478, 406, 988, 309, 576, 754, 312, 1944, 281, 360, 264, 2375, 1507, 570, 456, 390, 370, 709, 11, 51184], "temperature": 0.0, "avg_logprob": -0.1163755573638498, "compression_ratio": 1.528497409326425, "no_speech_prob": 0.007868122309446335}, {"id": 156, "seek": 85112, "start": 868.24, "end": 873.6, "text": " for example, Postgres supports many platforms and the support for direct IO and so on", "tokens": [51220, 337, 1365, 11, 10223, 45189, 9346, 867, 9473, 293, 264, 1406, 337, 2047, 39839, 293, 370, 322, 51488], "temperature": 0.0, "avg_logprob": -0.1163755573638498, "compression_ratio": 1.528497409326425, "no_speech_prob": 0.007868122309446335}, {"id": 157, "seek": 87360, "start": 873.9200000000001, "end": 879.2, "text": " varies a lot between the different Unix systems, right?", "tokens": [50380, 21716, 257, 688, 1296, 264, 819, 1156, 970, 3652, 11, 558, 30, 50644], "temperature": 0.0, "avg_logprob": -0.21323733383350157, "compression_ratio": 1.5633802816901408, "no_speech_prob": 0.01536455936729908}, {"id": 158, "seek": 87360, "start": 879.2, "end": 884.0, "text": " Even though they all support, you know, implement Postgres, right?", "tokens": [50644, 2754, 1673, 436, 439, 1406, 11, 291, 458, 11, 4445, 10223, 45189, 11, 558, 30, 50884], "temperature": 0.0, "avg_logprob": -0.21323733383350157, "compression_ratio": 1.5633802816901408, "no_speech_prob": 0.01536455936729908}, {"id": 159, "seek": 87360, "start": 884.0, "end": 890.96, "text": " So there's like a lot of difference, a lot of nuance and we would need to deal with all of that.", "tokens": [50884, 407, 456, 311, 411, 257, 688, 295, 2649, 11, 257, 688, 295, 42625, 293, 321, 576, 643, 281, 2028, 365, 439, 295, 300, 13, 51232], "temperature": 0.0, "avg_logprob": -0.21323733383350157, "compression_ratio": 1.5633802816901408, "no_speech_prob": 0.01536455936729908}, {"id": 160, "seek": 87360, "start": 890.96, "end": 898.96, "text": " So that would be terrible, I think, and it would not allow us to actually improve the database", "tokens": [51232, 407, 300, 576, 312, 6237, 11, 286, 519, 11, 293, 309, 576, 406, 2089, 505, 281, 767, 3470, 264, 8149, 51632], "temperature": 0.0, "avg_logprob": -0.21323733383350157, "compression_ratio": 1.5633802816901408, "no_speech_prob": 0.01536455936729908}, {"id": 161, "seek": 87360, "start": 898.96, "end": 901.0400000000001, "text": " as much as we did.", "tokens": [51632, 382, 709, 382, 321, 630, 13, 51736], "temperature": 0.0, "avg_logprob": -0.21323733383350157, "compression_ratio": 1.5633802816901408, "no_speech_prob": 0.01536455936729908}, {"id": 162, "seek": 90104, "start": 901.04, "end": 906.8, "text": " And of course, by relying on the operating system, we automatically get all the benefits,", "tokens": [50364, 400, 295, 1164, 11, 538, 24140, 322, 264, 7447, 1185, 11, 321, 6772, 483, 439, 264, 5311, 11, 50652], "temperature": 0.0, "avg_logprob": -0.08366191256177294, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.002120592398568988}, {"id": 163, "seek": 90104, "start": 906.8, "end": 910.16, "text": " all the improvements those guys do, right?", "tokens": [50652, 439, 264, 13797, 729, 1074, 360, 11, 558, 30, 50820], "temperature": 0.0, "avg_logprob": -0.08366191256177294, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.002120592398568988}, {"id": 164, "seek": 90104, "start": 910.16, "end": 916.16, "text": " So if they improve the file systems, we do get the benefits, which is great.", "tokens": [50820, 407, 498, 436, 3470, 264, 3991, 3652, 11, 321, 360, 483, 264, 5311, 11, 597, 307, 869, 13, 51120], "temperature": 0.0, "avg_logprob": -0.08366191256177294, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.002120592398568988}, {"id": 165, "seek": 90104, "start": 918.0799999999999, "end": 923.68, "text": " So how Postgres actually works in general, like a very simplified idea is that we have", "tokens": [51216, 407, 577, 10223, 45189, 767, 1985, 294, 2674, 11, 411, 257, 588, 26335, 1558, 307, 300, 321, 362, 51496], "temperature": 0.0, "avg_logprob": -0.08366191256177294, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.002120592398568988}, {"id": 166, "seek": 90104, "start": 923.68, "end": 928.48, "text": " like the Postgres as an application, essentially running on top of the kernel,", "tokens": [51496, 411, 264, 10223, 45189, 382, 364, 3861, 11, 4476, 2614, 322, 1192, 295, 264, 28256, 11, 51736], "temperature": 0.0, "avg_logprob": -0.08366191256177294, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.002120592398568988}, {"id": 167, "seek": 92848, "start": 928.48, "end": 934.48, "text": " which has some, you know, shared buffers, which is memory managed by the database.", "tokens": [50364, 597, 575, 512, 11, 291, 458, 11, 5507, 9204, 433, 11, 597, 307, 4675, 6453, 538, 264, 8149, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0923553466796875, "compression_ratio": 1.9223744292237444, "no_speech_prob": 0.0027030939236283302}, {"id": 168, "seek": 92848, "start": 934.48, "end": 940.08, "text": " And then we have some processes which are either doing some, you know, maintenance operations", "tokens": [50664, 400, 550, 321, 362, 512, 7555, 597, 366, 2139, 884, 512, 11, 291, 458, 11, 11258, 7705, 50944], "temperature": 0.0, "avg_logprob": -0.0923553466796875, "compression_ratio": 1.9223744292237444, "no_speech_prob": 0.0027030939236283302}, {"id": 169, "seek": 92848, "start": 940.08, "end": 945.36, "text": " or whatever, or as the backend processes are handling user connections, right?", "tokens": [50944, 420, 2035, 11, 420, 382, 264, 38087, 7555, 366, 13175, 4195, 9271, 11, 558, 30, 51208], "temperature": 0.0, "avg_logprob": -0.0923553466796875, "compression_ratio": 1.9223744292237444, "no_speech_prob": 0.0027030939236283302}, {"id": 170, "seek": 92848, "start": 945.36, "end": 950.5600000000001, "text": " So you connect to the database, it will fork a process and the process will access", "tokens": [51208, 407, 291, 1745, 281, 264, 8149, 11, 309, 486, 17716, 257, 1399, 293, 264, 1399, 486, 2105, 51468], "temperature": 0.0, "avg_logprob": -0.0923553466796875, "compression_ratio": 1.9223744292237444, "no_speech_prob": 0.0027030939236283302}, {"id": 171, "seek": 92848, "start": 951.76, "end": 958.24, "text": " the shared buffers, which is where the data is going to be for the backend, right?", "tokens": [51528, 264, 5507, 9204, 433, 11, 597, 307, 689, 264, 1412, 307, 516, 281, 312, 337, 264, 38087, 11, 558, 30, 51852], "temperature": 0.0, "avg_logprob": -0.0923553466796875, "compression_ratio": 1.9223744292237444, "no_speech_prob": 0.0027030939236283302}, {"id": 172, "seek": 95824, "start": 958.24, "end": 964.88, "text": " And when the data is not actually in memory yet, the Postgres will read the data through", "tokens": [50364, 400, 562, 264, 1412, 307, 406, 767, 294, 4675, 1939, 11, 264, 10223, 45189, 486, 1401, 264, 1412, 807, 50696], "temperature": 0.0, "avg_logprob": -0.17069247961044312, "compression_ratio": 1.61, "no_speech_prob": 0.0013151710154488683}, {"id": 173, "seek": 95824, "start": 964.88, "end": 970.32, "text": " Pagecase, which is managed by the kernel, and the kernel will do some magic and will,", "tokens": [50696, 21217, 9765, 11, 597, 307, 6453, 538, 264, 28256, 11, 293, 264, 28256, 486, 360, 512, 5585, 293, 486, 11, 50968], "temperature": 0.0, "avg_logprob": -0.17069247961044312, "compression_ratio": 1.61, "no_speech_prob": 0.0013151710154488683}, {"id": 174, "seek": 95824, "start": 970.32, "end": 975.36, "text": " you know, read the data from the disk to the hardware interfaces file systems", "tokens": [50968, 291, 458, 11, 1401, 264, 1412, 490, 264, 12355, 281, 264, 8837, 28416, 3991, 3652, 51220], "temperature": 0.0, "avg_logprob": -0.17069247961044312, "compression_ratio": 1.61, "no_speech_prob": 0.0013151710154488683}, {"id": 175, "seek": 95824, "start": 975.36, "end": 983.6, "text": " and will include some IOH scheduler to govern all the process, right?", "tokens": [51220, 293, 486, 4090, 512, 286, 31187, 12000, 260, 281, 1980, 439, 264, 1399, 11, 558, 30, 51632], "temperature": 0.0, "avg_logprob": -0.17069247961044312, "compression_ratio": 1.61, "no_speech_prob": 0.0013151710154488683}, {"id": 176, "seek": 98360, "start": 983.6, "end": 988.16, "text": " So that's roughly how it works, how Postgres is designed.", "tokens": [50364, 407, 300, 311, 9810, 577, 309, 1985, 11, 577, 10223, 45189, 307, 4761, 13, 50592], "temperature": 0.0, "avg_logprob": -0.15162926628476098, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.003406898118555546}, {"id": 177, "seek": 98360, "start": 988.8000000000001, "end": 993.84, "text": " With the Direct IOH, we will kind of like ignore the Pagecase and we will, you know, do", "tokens": [50624, 2022, 264, 18308, 286, 31187, 11, 321, 486, 733, 295, 411, 11200, 264, 21217, 9765, 293, 321, 486, 11, 291, 458, 11, 360, 50876], "temperature": 0.0, "avg_logprob": -0.15162926628476098, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.003406898118555546}, {"id": 178, "seek": 98360, "start": 994.88, "end": 1002.4, "text": " still talk through to the operating system facilities, but without the Pagecase, right,", "tokens": [50928, 920, 751, 807, 281, 264, 7447, 1185, 9406, 11, 457, 1553, 264, 21217, 9765, 11, 558, 11, 51304], "temperature": 0.0, "avg_logprob": -0.15162926628476098, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.003406898118555546}, {"id": 179, "seek": 98360, "start": 1002.4, "end": 1006.72, "text": " of course. And in that case, the shared buffers will be much larger, right, or", "tokens": [51304, 295, 1164, 13, 400, 294, 300, 1389, 11, 264, 5507, 9204, 433, 486, 312, 709, 4833, 11, 558, 11, 420, 51520], "temperature": 0.0, "avg_logprob": -0.15162926628476098, "compression_ratio": 1.5145631067961165, "no_speech_prob": 0.003406898118555546}, {"id": 180, "seek": 100672, "start": 1007.36, "end": 1014.48, "text": " it should be much larger, of course. Right, so this is like the Direct IOH kind of.", "tokens": [50396, 309, 820, 312, 709, 4833, 11, 295, 1164, 13, 1779, 11, 370, 341, 307, 411, 264, 18308, 286, 31187, 733, 295, 13, 50752], "temperature": 0.0, "avg_logprob": -0.2256738578571993, "compression_ratio": 1.445054945054945, "no_speech_prob": 0.0062816026620566845}, {"id": 181, "seek": 100672, "start": 1015.76, "end": 1022.5600000000001, "text": " Anyway, we are still essentially in this, and this whole talk is about this architecture.", "tokens": [50816, 5684, 11, 321, 366, 920, 4476, 294, 341, 11, 293, 341, 1379, 751, 307, 466, 341, 9482, 13, 51156], "temperature": 0.0, "avg_logprob": -0.2256738578571993, "compression_ratio": 1.445054945054945, "no_speech_prob": 0.0062816026620566845}, {"id": 182, "seek": 100672, "start": 1023.6800000000001, "end": 1034.24, "text": " So I spoke about a couple of reasons why you should use like new kernels and what are the", "tokens": [51212, 407, 286, 7179, 466, 257, 1916, 295, 4112, 983, 291, 820, 764, 411, 777, 23434, 1625, 293, 437, 366, 264, 51740], "temperature": 0.0, "avg_logprob": -0.2256738578571993, "compression_ratio": 1.445054945054945, "no_speech_prob": 0.0062816026620566845}, {"id": 183, "seek": 103424, "start": 1034.24, "end": 1042.24, "text": " problems with like relying on all the kernels, and that's like, well, there's a lot of things that", "tokens": [50364, 2740, 365, 411, 24140, 322, 439, 264, 23434, 1625, 11, 293, 300, 311, 411, 11, 731, 11, 456, 311, 257, 688, 295, 721, 300, 50764], "temperature": 0.0, "avg_logprob": -0.14186064729985504, "compression_ratio": 1.6885964912280702, "no_speech_prob": 0.012206614948809147}, {"id": 184, "seek": 103424, "start": 1042.24, "end": 1048.56, "text": " can go wrong, and there's error handling, but what happened in like 2018, we discovered that we", "tokens": [50764, 393, 352, 2085, 11, 293, 456, 311, 6713, 13175, 11, 457, 437, 2011, 294, 411, 6096, 11, 321, 6941, 300, 321, 51080], "temperature": 0.0, "avg_logprob": -0.14186064729985504, "compression_ratio": 1.6885964912280702, "no_speech_prob": 0.012206614948809147}, {"id": 185, "seek": 103424, "start": 1048.56, "end": 1054.48, "text": " are actually not either receiving the errors at all from the kernel, because for example, you open", "tokens": [51080, 366, 767, 406, 2139, 10040, 264, 13603, 412, 439, 490, 264, 28256, 11, 570, 337, 1365, 11, 291, 1269, 51376], "temperature": 0.0, "avg_logprob": -0.14186064729985504, "compression_ratio": 1.6885964912280702, "no_speech_prob": 0.012206614948809147}, {"id": 186, "seek": 103424, "start": 1055.36, "end": 1061.76, "text": " a file to one file descriptor, you do some writes on the file, and then you close the file,", "tokens": [51420, 257, 3991, 281, 472, 3991, 31280, 284, 11, 291, 360, 512, 13657, 322, 264, 3991, 11, 293, 550, 291, 1998, 264, 3991, 11, 51740], "temperature": 0.0, "avg_logprob": -0.14186064729985504, "compression_ratio": 1.6885964912280702, "no_speech_prob": 0.012206614948809147}, {"id": 187, "seek": 106176, "start": 1062.72, "end": 1069.36, "text": " or the file gets closed for some reason, and no one actually knows about the error at all. Even", "tokens": [50412, 420, 264, 3991, 2170, 5395, 337, 512, 1778, 11, 293, 572, 472, 767, 3255, 466, 264, 6713, 412, 439, 13, 2754, 50744], "temperature": 0.0, "avg_logprob": -0.14074107578822545, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.0049719312228262424}, {"id": 188, "seek": 106176, "start": 1069.36, "end": 1076.72, "text": " though you might have like another file descriptor for the same file, you will not read, learn about", "tokens": [50744, 1673, 291, 1062, 362, 411, 1071, 3991, 31280, 284, 337, 264, 912, 3991, 11, 291, 486, 406, 1401, 11, 1466, 466, 51112], "temperature": 0.0, "avg_logprob": -0.14074107578822545, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.0049719312228262424}, {"id": 189, "seek": 106176, "start": 1076.72, "end": 1083.68, "text": " it. And there's like different ways to lose information about errors during fSync, for example,", "tokens": [51112, 309, 13, 400, 456, 311, 411, 819, 2098, 281, 3624, 1589, 466, 13603, 1830, 283, 50, 34015, 11, 337, 1365, 11, 51460], "temperature": 0.0, "avg_logprob": -0.14074107578822545, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.0049719312228262424}, {"id": 190, "seek": 106176, "start": 1083.68, "end": 1090.56, "text": " which is pretty fatal for Postgres, because we do rely on the fSync, for example, during checkpoints,", "tokens": [51460, 597, 307, 1238, 24069, 337, 10223, 45189, 11, 570, 321, 360, 10687, 322, 264, 283, 50, 34015, 11, 337, 1365, 11, 1830, 1520, 20552, 11, 51804], "temperature": 0.0, "avg_logprob": -0.14074107578822545, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.0049719312228262424}, {"id": 191, "seek": 109056, "start": 1090.6399999999999, "end": 1100.48, "text": " right? So luckily, it's not a very common issue. I mean, I don't remember when I actually got like", "tokens": [50368, 558, 30, 407, 22880, 11, 309, 311, 406, 257, 588, 2689, 2734, 13, 286, 914, 11, 286, 500, 380, 1604, 562, 286, 767, 658, 411, 50860], "temperature": 0.0, "avg_logprob": -0.11912221174973708, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0017501108814030886}, {"id": 192, "seek": 109056, "start": 1100.48, "end": 1107.76, "text": " the last fSync error in, you know, when working with the database, but when it happens, it can,", "tokens": [50860, 264, 1036, 283, 50, 34015, 6713, 294, 11, 291, 458, 11, 562, 1364, 365, 264, 8149, 11, 457, 562, 309, 2314, 11, 309, 393, 11, 51224], "temperature": 0.0, "avg_logprob": -0.11912221174973708, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0017501108814030886}, {"id": 193, "seek": 109056, "start": 1107.76, "end": 1114.72, "text": " it should definitely not be like a silent corruption, right? So this was fixed, I believe,", "tokens": [51224, 309, 820, 2138, 406, 312, 411, 257, 12784, 17959, 11, 558, 30, 407, 341, 390, 6806, 11, 286, 1697, 11, 51572], "temperature": 0.0, "avg_logprob": -0.11912221174973708, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0017501108814030886}, {"id": 194, "seek": 111472, "start": 1115.44, "end": 1121.2, "text": " but again, it's something that needs to be, that is fixed only in sufficiently recent kernels,", "tokens": [50400, 457, 797, 11, 309, 311, 746, 300, 2203, 281, 312, 11, 300, 307, 6806, 787, 294, 31868, 5162, 23434, 1625, 11, 50688], "temperature": 0.0, "avg_logprob": -0.09390755703574732, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.009112237952649593}, {"id": 195, "seek": 111472, "start": 1121.2, "end": 1131.92, "text": " right? So you need to run a recent kernel to be immune to this. The other problem, of course,", "tokens": [50688, 558, 30, 407, 291, 643, 281, 1190, 257, 5162, 28256, 281, 312, 11992, 281, 341, 13, 440, 661, 1154, 11, 295, 1164, 11, 51224], "temperature": 0.0, "avg_logprob": -0.09390755703574732, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.009112237952649593}, {"id": 196, "seek": 111472, "start": 1131.92, "end": 1138.48, "text": " is that, and that's not like a bug, that's a problem with the design in general, and it is", "tokens": [51224, 307, 300, 11, 293, 300, 311, 406, 411, 257, 7426, 11, 300, 311, 257, 1154, 365, 264, 1715, 294, 2674, 11, 293, 309, 307, 51552], "temperature": 0.0, "avg_logprob": -0.09390755703574732, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.009112237952649593}, {"id": 197, "seek": 113848, "start": 1139.44, "end": 1148.48, "text": " because the most of the IO activity is actually managed by the kernel, by the operating system,", "tokens": [50412, 570, 264, 881, 295, 264, 39839, 5191, 307, 767, 6453, 538, 264, 28256, 11, 538, 264, 7447, 1185, 11, 50864], "temperature": 0.0, "avg_logprob": -0.18004608154296875, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.012782614678144455}, {"id": 198, "seek": 113848, "start": 1149.68, "end": 1157.84, "text": " but it does not actually have any insight into what the database needs, right? It has no concept of,", "tokens": [50924, 457, 309, 775, 406, 767, 362, 604, 11269, 666, 437, 264, 8149, 2203, 11, 558, 30, 467, 575, 572, 3410, 295, 11, 51332], "temperature": 0.0, "avg_logprob": -0.18004608154296875, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.012782614678144455}, {"id": 199, "seek": 113848, "start": 1158.48, "end": 1165.52, "text": " well, this write is more important than this write, right? Because this write affects user activity,", "tokens": [51364, 731, 11, 341, 2464, 307, 544, 1021, 813, 341, 2464, 11, 558, 30, 1436, 341, 2464, 11807, 4195, 5191, 11, 51716], "temperature": 0.0, "avg_logprob": -0.18004608154296875, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.012782614678144455}, {"id": 200, "seek": 116552, "start": 1165.68, "end": 1170.96, "text": " and this is some sort of like a background task which could wait, right? Like the operating system", "tokens": [50372, 293, 341, 307, 512, 1333, 295, 411, 257, 3678, 5633, 597, 727, 1699, 11, 558, 30, 1743, 264, 7447, 1185, 50636], "temperature": 0.0, "avg_logprob": -0.1061681693708393, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.0066599491983652115}, {"id": 201, "seek": 116552, "start": 1170.96, "end": 1177.84, "text": " has no idea how to, has no way to actually, you know, differentiate between the writes,", "tokens": [50636, 575, 572, 1558, 577, 281, 11, 575, 572, 636, 281, 767, 11, 291, 458, 11, 23203, 1296, 264, 13657, 11, 50980], "temperature": 0.0, "avg_logprob": -0.1061681693708393, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.0066599491983652115}, {"id": 202, "seek": 116552, "start": 1179.6, "end": 1190.0, "text": " so that's one reason. The other reason is, for example, prefection, right? The current storage", "tokens": [51068, 370, 300, 311, 472, 1778, 13, 440, 661, 1778, 307, 11, 337, 1365, 11, 659, 1836, 313, 11, 558, 30, 440, 2190, 6725, 51588], "temperature": 0.0, "avg_logprob": -0.1061681693708393, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.0066599491983652115}, {"id": 203, "seek": 119000, "start": 1190.08, "end": 1200.56, "text": " systems rely heavily on actually having full queues. If you only request from SSD one block at a time", "tokens": [50368, 3652, 10687, 10950, 322, 767, 1419, 1577, 631, 1247, 13, 759, 291, 787, 5308, 490, 30262, 472, 3461, 412, 257, 565, 50892], "temperature": 0.0, "avg_logprob": -0.18115692389638802, "compression_ratio": 1.5252525252525253, "no_speech_prob": 0.03547901287674904}, {"id": 204, "seek": 119000, "start": 1200.56, "end": 1209.76, "text": " in a synchronous way, it's going to be really slow. If you submit like many, many IO requests ahead,", "tokens": [50892, 294, 257, 44743, 636, 11, 309, 311, 516, 281, 312, 534, 2964, 13, 759, 291, 10315, 411, 867, 11, 867, 39839, 12475, 2286, 11, 51352], "temperature": 0.0, "avg_logprob": -0.18115692389638802, "compression_ratio": 1.5252525252525253, "no_speech_prob": 0.03547901287674904}, {"id": 205, "seek": 119000, "start": 1211.04, "end": 1217.92, "text": " then you are able to saturate actually the storage device, like the, the tooth, right? You get like", "tokens": [51416, 550, 291, 366, 1075, 281, 21160, 473, 767, 264, 6725, 4302, 11, 411, 264, 11, 264, 11680, 11, 558, 30, 509, 483, 411, 51760], "temperature": 0.0, "avg_logprob": -0.18115692389638802, "compression_ratio": 1.5252525252525253, "no_speech_prob": 0.03547901287674904}, {"id": 206, "seek": 121792, "start": 1217.92, "end": 1226.8000000000002, "text": " much better performance in general. And again, that's something that the database needs to do", "tokens": [50364, 709, 1101, 3389, 294, 2674, 13, 400, 797, 11, 300, 311, 746, 300, 264, 8149, 2203, 281, 360, 50808], "temperature": 0.0, "avg_logprob": -0.10710195285170826, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.017330240458250046}, {"id": 207, "seek": 121792, "start": 1227.52, "end": 1234.72, "text": " explicitly. It's not something the operating system can, can do on its own, and we do actually", "tokens": [50844, 20803, 13, 467, 311, 406, 746, 264, 7447, 1185, 393, 11, 393, 360, 322, 1080, 1065, 11, 293, 321, 360, 767, 51204], "temperature": 0.0, "avg_logprob": -0.10710195285170826, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.017330240458250046}, {"id": 208, "seek": 121792, "start": 1234.72, "end": 1240.96, "text": " rely on the operating system to do prefetching for sequential scans, for example, but the,", "tokens": [51204, 10687, 322, 264, 7447, 1185, 281, 360, 18417, 7858, 278, 337, 42881, 35116, 11, 337, 1365, 11, 457, 264, 11, 51516], "temperature": 0.0, "avg_logprob": -0.10710195285170826, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.017330240458250046}, {"id": 209, "seek": 124096, "start": 1241.68, "end": 1249.6000000000001, "text": " we need to do explicit prefetching for other types of scans. So for example, during index scans or", "tokens": [50400, 321, 643, 281, 360, 13691, 18417, 7858, 278, 337, 661, 3467, 295, 35116, 13, 407, 337, 1365, 11, 1830, 8186, 35116, 420, 50796], "temperature": 0.0, "avg_logprob": -0.11193683272913883, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.010431705042719841}, {"id": 210, "seek": 124096, "start": 1249.6000000000001, "end": 1259.44, "text": " bitmap heap scans, we need to do explicit prefetching. So it's like, this is a design problem.", "tokens": [50796, 857, 24223, 33591, 35116, 11, 321, 643, 281, 360, 13691, 18417, 7858, 278, 13, 407, 309, 311, 411, 11, 341, 307, 257, 1715, 1154, 13, 51288], "temperature": 0.0, "avg_logprob": -0.11193683272913883, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.010431705042719841}, {"id": 211, "seek": 124096, "start": 1261.04, "end": 1269.44, "text": " So rule number one, use recent kernel. All the kernels have all kinds of issues. Okay.", "tokens": [51368, 407, 4978, 1230, 472, 11, 764, 5162, 28256, 13, 1057, 264, 23434, 1625, 362, 439, 3685, 295, 2663, 13, 1033, 13, 51788], "temperature": 0.0, "avg_logprob": -0.11193683272913883, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.010431705042719841}, {"id": 212, "seek": 126944, "start": 1269.52, "end": 1278.56, "text": " It's not always like perfect. There are regressions in kernels too. Once in a while, you can get like", "tokens": [50368, 467, 311, 406, 1009, 411, 2176, 13, 821, 366, 1121, 735, 626, 294, 23434, 1625, 886, 13, 3443, 294, 257, 1339, 11, 291, 393, 483, 411, 50820], "temperature": 0.0, "avg_logprob": -0.24119277116728993, "compression_ratio": 1.4851485148514851, "no_speech_prob": 0.002046189969405532}, {"id": 213, "seek": 126944, "start": 1278.56, "end": 1286.24, "text": " a dropping performance because something went wrong. But overall, I think it's like something you", "tokens": [50820, 257, 13601, 3389, 570, 746, 1437, 2085, 13, 583, 4787, 11, 286, 519, 309, 311, 411, 746, 291, 51204], "temperature": 0.0, "avg_logprob": -0.24119277116728993, "compression_ratio": 1.4851485148514851, "no_speech_prob": 0.002046189969405532}, {"id": 214, "seek": 126944, "start": 1286.24, "end": 1297.44, "text": " should do. Right. So this was like a very basic explanation of, of, of why POSGRESS IO, why POSGRESS", "tokens": [51204, 820, 360, 13, 1779, 13, 407, 341, 390, 411, 257, 588, 3875, 10835, 295, 11, 295, 11, 295, 983, 430, 4367, 23971, 12268, 39839, 11, 983, 430, 4367, 23971, 12268, 51764], "temperature": 0.0, "avg_logprob": -0.24119277116728993, "compression_ratio": 1.4851485148514851, "no_speech_prob": 0.002046189969405532}, {"id": 215, "seek": 129744, "start": 1297.44, "end": 1302.48, "text": " uses file systems the way it does. And now I'm going to talk about some benchmarks and stress", "tokens": [50364, 4960, 3991, 3652, 264, 636, 309, 775, 13, 400, 586, 286, 478, 516, 281, 751, 466, 512, 43751, 293, 4244, 50616], "temperature": 0.0, "avg_logprob": -0.12325668334960938, "compression_ratio": 1.606060606060606, "no_speech_prob": 0.006679025012999773}, {"id": 216, "seek": 129744, "start": 1302.48, "end": 1312.24, "text": " test because this is like very, like high level. Right. I like to, to do some measurements and", "tokens": [50616, 1500, 570, 341, 307, 411, 588, 11, 411, 1090, 1496, 13, 1779, 13, 286, 411, 281, 11, 281, 360, 512, 15383, 293, 51104], "temperature": 0.0, "avg_logprob": -0.12325668334960938, "compression_ratio": 1.606060606060606, "no_speech_prob": 0.006679025012999773}, {"id": 217, "seek": 129744, "start": 1312.24, "end": 1317.8400000000001, "text": " look at the numbers and say, like, okay, so this performs well, this sucks. Right. So what I did,", "tokens": [51104, 574, 412, 264, 3547, 293, 584, 11, 411, 11, 1392, 11, 370, 341, 26213, 731, 11, 341, 15846, 13, 1779, 13, 407, 437, 286, 630, 11, 51384], "temperature": 0.0, "avg_logprob": -0.12325668334960938, "compression_ratio": 1.606060606060606, "no_speech_prob": 0.006679025012999773}, {"id": 218, "seek": 129744, "start": 1320.16, "end": 1326.4, "text": " I did a lot of stress tests, which essentially means running PG bench, which is OLTP", "tokens": [51500, 286, 630, 257, 688, 295, 4244, 6921, 11, 597, 4476, 1355, 2614, 40975, 10638, 11, 597, 307, 39191, 16804, 51812], "temperature": 0.0, "avg_logprob": -0.12325668334960938, "compression_ratio": 1.606060606060606, "no_speech_prob": 0.006679025012999773}, {"id": 219, "seek": 132744, "start": 1327.68, "end": 1337.44, "text": " database benchmark tool. Simply, it does a lot of like random IO to POSGRESS. And I measured", "tokens": [50376, 8149, 18927, 2290, 13, 19596, 11, 309, 775, 257, 688, 295, 411, 4974, 39839, 281, 430, 4367, 23971, 12268, 13, 400, 286, 12690, 50864], "temperature": 0.0, "avg_logprob": -0.15091478197198166, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.0035324031487107277}, {"id": 220, "seek": 132744, "start": 1337.44, "end": 1344.3200000000002, "text": " like the truth. The first important thing here is that this only really matters if you are IO bound.", "tokens": [50864, 411, 264, 3494, 13, 440, 700, 1021, 551, 510, 307, 300, 341, 787, 534, 7001, 498, 291, 366, 39839, 5472, 13, 51208], "temperature": 0.0, "avg_logprob": -0.15091478197198166, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.0035324031487107277}, {"id": 221, "seek": 132744, "start": 1345.1200000000001, "end": 1352.64, "text": " Right. If you are hitting the, the storage, then that's the only way, that's the only case where", "tokens": [51248, 1779, 13, 759, 291, 366, 8850, 264, 11, 264, 6725, 11, 550, 300, 311, 264, 787, 636, 11, 300, 311, 264, 787, 1389, 689, 51624], "temperature": 0.0, "avg_logprob": -0.15091478197198166, "compression_ratio": 1.4948453608247423, "no_speech_prob": 0.0035324031487107277}, {"id": 222, "seek": 135264, "start": 1353.6000000000001, "end": 1359.44, "text": " the difference in file system performance can actually affect the throughput. Right. If you are CPU", "tokens": [50412, 264, 2649, 294, 3991, 1185, 3389, 393, 767, 3345, 264, 44629, 13, 1779, 13, 759, 291, 366, 13199, 50704], "temperature": 0.0, "avg_logprob": -0.20512907432787347, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.005130533594638109}, {"id": 223, "seek": 135264, "start": 1359.44, "end": 1365.8400000000001, "text": " bound, for example, because you are working with very small amounts of memory and it's all in cache,", "tokens": [50704, 5472, 11, 337, 1365, 11, 570, 291, 366, 1364, 365, 588, 1359, 11663, 295, 4675, 293, 309, 311, 439, 294, 19459, 11, 51024], "temperature": 0.0, "avg_logprob": -0.20512907432787347, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.005130533594638109}, {"id": 224, "seek": 135264, "start": 1366.64, "end": 1373.2, "text": " then the file system doesn't really matter. The other reason, of course, is that", "tokens": [51064, 550, 264, 3991, 1185, 1177, 380, 534, 1871, 13, 440, 661, 1778, 11, 295, 1164, 11, 307, 300, 51392], "temperature": 0.0, "avg_logprob": -0.20512907432787347, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.005130533594638109}, {"id": 225, "seek": 137320, "start": 1373.6000000000001, "end": 1385.44, "text": " typical production systems are not using IO for 100% time. Like once you hit, for example,", "tokens": [50384, 7476, 4265, 3652, 366, 406, 1228, 39839, 337, 2319, 4, 565, 13, 1743, 1564, 291, 2045, 11, 337, 1365, 11, 50976], "temperature": 0.0, "avg_logprob": -0.14243187010288239, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.004064257722347975}, {"id": 226, "seek": 137320, "start": 1385.44, "end": 1394.8, "text": " saturation of like 75%, right, you are already like being affected by, by latency increase", "tokens": [50976, 27090, 295, 411, 9562, 8923, 558, 11, 291, 366, 1217, 411, 885, 8028, 538, 11, 538, 27043, 3488, 51444], "temperature": 0.0, "avg_logprob": -0.14243187010288239, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.004064257722347975}, {"id": 227, "seek": 137320, "start": 1394.8, "end": 1400.88, "text": " system so on. At that point, you probably already are thinking about upgrading the storage system", "tokens": [51444, 1185, 370, 322, 13, 1711, 300, 935, 11, 291, 1391, 1217, 366, 1953, 466, 36249, 264, 6725, 1185, 51748], "temperature": 0.0, "avg_logprob": -0.14243187010288239, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.004064257722347975}, {"id": 228, "seek": 140088, "start": 1400.88, "end": 1409.6000000000001, "text": " or like migrating to do something else. So that's one reason. So keep this in mind when", "tokens": [50364, 420, 411, 6186, 8754, 281, 360, 746, 1646, 13, 407, 300, 311, 472, 1778, 13, 407, 1066, 341, 294, 1575, 562, 50800], "temperature": 0.0, "avg_logprob": -0.10659969214237097, "compression_ratio": 1.511111111111111, "no_speech_prob": 0.0043786498717963696}, {"id": 229, "seek": 140088, "start": 1411.1200000000001, "end": 1418.4, "text": " interpreting the results that I'm going to show you. It's probably like the worst case scenario.", "tokens": [50876, 37395, 264, 3542, 300, 286, 478, 516, 281, 855, 291, 13, 467, 311, 1391, 411, 264, 5855, 1389, 9005, 13, 51240], "temperature": 0.0, "avg_logprob": -0.10659969214237097, "compression_ratio": 1.511111111111111, "no_speech_prob": 0.0043786498717963696}, {"id": 230, "seek": 140088, "start": 1420.64, "end": 1428.72, "text": " The other thing, of course, is that I only have some particular hardware available. And", "tokens": [51352, 440, 661, 551, 11, 295, 1164, 11, 307, 300, 286, 787, 362, 512, 1729, 8837, 2435, 13, 400, 51756], "temperature": 0.0, "avg_logprob": -0.10659969214237097, "compression_ratio": 1.511111111111111, "no_speech_prob": 0.0043786498717963696}, {"id": 231, "seek": 143088, "start": 1430.88, "end": 1436.5600000000002, "text": " some of the file systems, especially like ZFS and so on, they do support a lot of different", "tokens": [50364, 512, 295, 264, 3991, 3652, 11, 2318, 411, 1176, 29318, 293, 370, 322, 11, 436, 360, 1406, 257, 688, 295, 819, 50648], "temperature": 0.0, "avg_logprob": -0.10421758002423226, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.002840409753844142}, {"id": 232, "seek": 143088, "start": 1436.5600000000002, "end": 1444.16, "text": " features. So you can like move the intent look or stuff like that to a different device. I didn't", "tokens": [50648, 4122, 13, 407, 291, 393, 411, 1286, 264, 8446, 574, 420, 1507, 411, 300, 281, 257, 819, 4302, 13, 286, 994, 380, 51028], "temperature": 0.0, "avg_logprob": -0.10421758002423226, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.002840409753844142}, {"id": 233, "seek": 143088, "start": 1444.16, "end": 1452.0, "text": " do anything like that. Right. What I recommend you do, if you are actually evaluating like different", "tokens": [51028, 360, 1340, 411, 300, 13, 1779, 13, 708, 286, 2748, 291, 360, 11, 498, 291, 366, 767, 27479, 411, 819, 51420], "temperature": 0.0, "avg_logprob": -0.10421758002423226, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.002840409753844142}, {"id": 234, "seek": 143088, "start": 1452.0, "end": 1459.1200000000001, "text": " file systems for your use case, to actually try that with, with the hardware that you are considering.", "tokens": [51420, 3991, 3652, 337, 428, 764, 1389, 11, 281, 767, 853, 300, 365, 11, 365, 264, 8837, 300, 291, 366, 8079, 13, 51776], "temperature": 0.0, "avg_logprob": -0.10421758002423226, "compression_ratio": 1.6939655172413792, "no_speech_prob": 0.002840409753844142}, {"id": 235, "seek": 145912, "start": 1459.9199999999998, "end": 1465.84, "text": " Right. To actually do your own measurements. Right. I would love to have like a perfect", "tokens": [50404, 1779, 13, 1407, 767, 360, 428, 1065, 15383, 13, 1779, 13, 286, 576, 959, 281, 362, 411, 257, 2176, 50700], "temperature": 0.0, "avg_logprob": -0.13210500370372424, "compression_ratio": 1.5944700460829493, "no_speech_prob": 0.004803658928722143}, {"id": 236, "seek": 145912, "start": 1465.84, "end": 1470.4799999999998, "text": " benchmarks for all possible hardware configurations, but it's not possible. Right.", "tokens": [50700, 43751, 337, 439, 1944, 8837, 31493, 11, 457, 309, 311, 406, 1944, 13, 1779, 13, 50932], "temperature": 0.0, "avg_logprob": -0.13210500370372424, "compression_ratio": 1.5944700460829493, "no_speech_prob": 0.004803658928722143}, {"id": 237, "seek": 145912, "start": 1471.6799999999998, "end": 1479.36, "text": " So I'm going to show you a bunch of results, a bunch of charts. And I'm going to,", "tokens": [50992, 407, 286, 478, 516, 281, 855, 291, 257, 3840, 295, 3542, 11, 257, 3840, 295, 17767, 13, 400, 286, 478, 516, 281, 11, 51376], "temperature": 0.0, "avg_logprob": -0.13210500370372424, "compression_ratio": 1.5944700460829493, "no_speech_prob": 0.004803658928722143}, {"id": 238, "seek": 145912, "start": 1480.8, "end": 1486.6399999999999, "text": " I think what is more important is like not the exact numbers, but it's more about the visual,", "tokens": [51448, 286, 519, 437, 307, 544, 1021, 307, 411, 406, 264, 1900, 3547, 11, 457, 309, 311, 544, 466, 264, 5056, 11, 51740], "temperature": 0.0, "avg_logprob": -0.13210500370372424, "compression_ratio": 1.5944700460829493, "no_speech_prob": 0.004803658928722143}, {"id": 239, "seek": 148664, "start": 1486.64, "end": 1493.68, "text": " like, like understanding like what's happening. Right. So for example, this is from two machines.", "tokens": [50364, 411, 11, 411, 3701, 411, 437, 311, 2737, 13, 1779, 13, 407, 337, 1365, 11, 341, 307, 490, 732, 8379, 13, 50716], "temperature": 0.0, "avg_logprob": -0.16042803479479506, "compression_ratio": 1.4898989898989898, "no_speech_prob": 0.0023882079403847456}, {"id": 240, "seek": 148664, "start": 1495.5200000000002, "end": 1504.24, "text": " This is like a smaller, older Intel machine. This is larger Xeon. And this is the time that it takes", "tokens": [50808, 639, 307, 411, 257, 4356, 11, 4906, 19762, 3479, 13, 639, 307, 4833, 1783, 27015, 13, 400, 341, 307, 264, 565, 300, 309, 2516, 51244], "temperature": 0.0, "avg_logprob": -0.16042803479479506, "compression_ratio": 1.4898989898989898, "no_speech_prob": 0.0023882079403847456}, {"id": 241, "seek": 148664, "start": 1504.24, "end": 1513.1200000000001, "text": " to do a bulk load into the database. Right. Of scale 2000 means like, I don't know, 30 gigabytes", "tokens": [51244, 281, 360, 257, 16139, 3677, 666, 264, 8149, 13, 1779, 13, 2720, 4373, 8132, 1355, 411, 11, 286, 500, 380, 458, 11, 2217, 42741, 51688], "temperature": 0.0, "avg_logprob": -0.16042803479479506, "compression_ratio": 1.4898989898989898, "no_speech_prob": 0.0023882079403847456}, {"id": 242, "seek": 151312, "start": 1513.12, "end": 1523.04, "text": " of data. And this loads the data, builds indexes and so on. And the first bunch of results here,", "tokens": [50364, 295, 1412, 13, 400, 341, 12668, 264, 1412, 11, 15182, 8186, 279, 293, 370, 322, 13, 400, 264, 700, 3840, 295, 3542, 510, 11, 50860], "temperature": 0.0, "avg_logprob": -0.16332365337171054, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.005694189574569464}, {"id": 243, "seek": 151312, "start": 1523.04, "end": 1531.4399999999998, "text": " which is in seconds. So the shorter, the better. These are just like regular file systems on LVM", "tokens": [50860, 597, 307, 294, 3949, 13, 407, 264, 11639, 11, 264, 1101, 13, 1981, 366, 445, 411, 3890, 3991, 3652, 322, 441, 53, 44, 51280], "temperature": 0.0, "avg_logprob": -0.16332365337171054, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.005694189574569464}, {"id": 244, "seek": 151312, "start": 1532.56, "end": 1540.6399999999999, "text": " without any snapshots, just like right. And then there are a couple that are two that are actually", "tokens": [51336, 1553, 604, 19206, 27495, 11, 445, 411, 558, 13, 400, 550, 456, 366, 257, 1916, 300, 366, 732, 300, 366, 767, 51740], "temperature": 0.0, "avg_logprob": -0.16332365337171054, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.005694189574569464}, {"id": 245, "seek": 154064, "start": 1540.64, "end": 1550.8000000000002, "text": " multi-device without the LVM using the BTRFS or ZFS file systems, like multi-device support.", "tokens": [50364, 4825, 12, 40343, 573, 1553, 264, 441, 53, 44, 1228, 264, 363, 25936, 29318, 420, 1176, 29318, 3991, 3652, 11, 411, 4825, 12, 40343, 573, 1406, 13, 50872], "temperature": 0.0, "avg_logprob": -0.15004942417144776, "compression_ratio": 1.5340314136125655, "no_speech_prob": 0.002832910045981407}, {"id": 246, "seek": 154064, "start": 1550.8000000000002, "end": 1558.48, "text": " Right. And you can see that it's like almost the same, except for ZFS for some reason, it's like much", "tokens": [50872, 1779, 13, 400, 291, 393, 536, 300, 309, 311, 411, 1920, 264, 912, 11, 3993, 337, 1176, 29318, 337, 512, 1778, 11, 309, 311, 411, 709, 51256], "temperature": 0.0, "avg_logprob": -0.15004942417144776, "compression_ratio": 1.5340314136125655, "no_speech_prob": 0.002832910045981407}, {"id": 247, "seek": 154064, "start": 1558.48, "end": 1566.4, "text": " slower. Right. But that might be a hardware issue or like specific to this hardware configuration,", "tokens": [51256, 14009, 13, 1779, 13, 583, 300, 1062, 312, 257, 8837, 2734, 420, 411, 2685, 281, 341, 8837, 11694, 11, 51652], "temperature": 0.0, "avg_logprob": -0.15004942417144776, "compression_ratio": 1.5340314136125655, "no_speech_prob": 0.002832910045981407}, {"id": 248, "seek": 156640, "start": 1566.4, "end": 1570.64, "text": " because on a different machine, which only has a single device though, it's like NVMe,", "tokens": [50364, 570, 322, 257, 819, 3479, 11, 597, 787, 575, 257, 2167, 4302, 1673, 11, 309, 311, 411, 46512, 12671, 11, 50576], "temperature": 0.0, "avg_logprob": -0.1322936216990153, "compression_ratio": 1.582857142857143, "no_speech_prob": 0.002355637727305293}, {"id": 249, "seek": 156640, "start": 1572.64, "end": 1577.76, "text": " the difference is like much smaller. Right. And there is no LVM because there are no multiple", "tokens": [50676, 264, 2649, 307, 411, 709, 4356, 13, 1779, 13, 400, 456, 307, 572, 441, 53, 44, 570, 456, 366, 572, 3866, 50932], "temperature": 0.0, "avg_logprob": -0.1322936216990153, "compression_ratio": 1.582857142857143, "no_speech_prob": 0.002355637727305293}, {"id": 250, "seek": 156640, "start": 1577.76, "end": 1586.64, "text": " devices. Right. So that's one thing. That's what I mean, what I said that the difference between", "tokens": [50932, 5759, 13, 1779, 13, 407, 300, 311, 472, 551, 13, 663, 311, 437, 286, 914, 11, 437, 286, 848, 300, 264, 2649, 1296, 51376], "temperature": 0.0, "avg_logprob": -0.1322936216990153, "compression_ratio": 1.582857142857143, "no_speech_prob": 0.002355637727305293}, {"id": 251, "seek": 158664, "start": 1586.64, "end": 1595.3600000000001, "text": " EXT4 and XFS is like usually very small. And then we have a couple results for", "tokens": [50364, 16385, 51, 19, 293, 1783, 29318, 307, 411, 2673, 588, 1359, 13, 400, 550, 321, 362, 257, 1916, 3542, 337, 50800], "temperature": 0.0, "avg_logprob": -0.17668455176883274, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.021492235362529755}, {"id": 252, "seek": 158664, "start": 1597.44, "end": 1603.8400000000001, "text": " snapshots when you start creating actually snapshots on LVM. And you can see that it like improves,", "tokens": [50904, 19206, 27495, 562, 291, 722, 4084, 767, 19206, 27495, 322, 441, 53, 44, 13, 400, 291, 393, 536, 300, 309, 411, 24771, 11, 51224], "temperature": 0.0, "avg_logprob": -0.17668455176883274, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.021492235362529755}, {"id": 253, "seek": 158664, "start": 1603.8400000000001, "end": 1609.44, "text": " oh sorry, improves like, degrades like significantly. Right. So it suddenly takes like twice as much", "tokens": [51224, 1954, 2597, 11, 24771, 411, 11, 368, 22626, 411, 10591, 13, 1779, 13, 407, 309, 5800, 2516, 411, 6091, 382, 709, 51504], "temperature": 0.0, "avg_logprob": -0.17668455176883274, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.021492235362529755}, {"id": 254, "seek": 160944, "start": 1609.44, "end": 1617.28, "text": " time in some cases, except for the native file systems, like the copy and write file system,", "tokens": [50364, 565, 294, 512, 3331, 11, 3993, 337, 264, 8470, 3991, 3652, 11, 411, 264, 5055, 293, 2464, 3991, 1185, 11, 50756], "temperature": 0.0, "avg_logprob": -0.13665877303032026, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.00870030838996172}, {"id": 255, "seek": 160944, "start": 1617.28, "end": 1627.1200000000001, "text": " BTRFS and ZFS that didn't actually like got much worse. Right. So this is similar thing you can", "tokens": [50756, 363, 25936, 29318, 293, 1176, 29318, 300, 994, 380, 767, 411, 658, 709, 5324, 13, 1779, 13, 407, 341, 307, 2531, 551, 291, 393, 51248], "temperature": 0.0, "avg_logprob": -0.13665877303032026, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.00870030838996172}, {"id": 256, "seek": 160944, "start": 1627.1200000000001, "end": 1637.04, "text": " see here for the other machine. So what I conclude from this is that if you actually do need the", "tokens": [51248, 536, 510, 337, 264, 661, 3479, 13, 407, 437, 286, 16886, 490, 341, 307, 300, 498, 291, 767, 360, 643, 264, 51744], "temperature": 0.0, "avg_logprob": -0.13665877303032026, "compression_ratio": 1.5573770491803278, "no_speech_prob": 0.00870030838996172}, {"id": 257, "seek": 163704, "start": 1637.04, "end": 1644.56, "text": " snapshots, use the ZFS or BTRFS. Yes.", "tokens": [50364, 19206, 27495, 11, 764, 264, 1176, 29318, 420, 363, 25936, 29318, 13, 1079, 13, 50740], "temperature": 0.0, "avg_logprob": -0.2661978615654839, "compression_ratio": 1.1652173913043478, "no_speech_prob": 0.006569072138518095}, {"id": 258, "seek": 163704, "start": 1656.96, "end": 1666.1599999999999, "text": " So for BTRFS, I just did like a regular, I didn't want the specific like explicitly else. Right.", "tokens": [51360, 407, 337, 363, 25936, 29318, 11, 286, 445, 630, 411, 257, 3890, 11, 286, 994, 380, 528, 264, 2685, 411, 20803, 1646, 13, 1779, 13, 51820], "temperature": 0.0, "avg_logprob": -0.2661978615654839, "compression_ratio": 1.1652173913043478, "no_speech_prob": 0.006569072138518095}, {"id": 259, "seek": 166616, "start": 1666.24, "end": 1668.0, "text": " So I just created the BTRFS like.", "tokens": [50368, 407, 286, 445, 2942, 264, 363, 25936, 29318, 411, 13, 50456], "temperature": 0.0, "avg_logprob": -0.21625499372129087, "compression_ratio": 1.688259109311741, "no_speech_prob": 0.006567640230059624}, {"id": 260, "seek": 166616, "start": 1669.92, "end": 1675.1200000000001, "text": " Because the easy optimization would be to turn on copy and write for the files affected by the", "tokens": [50552, 1436, 264, 1858, 19618, 576, 312, 281, 1261, 322, 5055, 293, 2464, 337, 264, 7098, 8028, 538, 264, 50812], "temperature": 0.0, "avg_logprob": -0.21625499372129087, "compression_ratio": 1.688259109311741, "no_speech_prob": 0.006567640230059624}, {"id": 261, "seek": 166616, "start": 1675.1200000000001, "end": 1681.0400000000002, "text": " database. And then when you do the snapshot, it still does copy and write only and in those points.", "tokens": [50812, 8149, 13, 400, 550, 562, 291, 360, 264, 30163, 11, 309, 920, 775, 5055, 293, 2464, 787, 293, 294, 729, 2793, 13, 51108], "temperature": 0.0, "avg_logprob": -0.21625499372129087, "compression_ratio": 1.688259109311741, "no_speech_prob": 0.006567640230059624}, {"id": 262, "seek": 166616, "start": 1681.76, "end": 1687.6000000000001, "text": " Right. So I consider like disabling copy and write because there's like an option for, I'm not", "tokens": [51144, 1779, 13, 407, 286, 1949, 411, 717, 20112, 5055, 293, 2464, 570, 456, 311, 411, 364, 3614, 337, 11, 286, 478, 406, 51436], "temperature": 0.0, "avg_logprob": -0.21625499372129087, "compression_ratio": 1.688259109311741, "no_speech_prob": 0.006567640230059624}, {"id": 263, "seek": 166616, "start": 1687.6000000000001, "end": 1693.28, "text": " sure if it's a mount option, like no data copy and write and so on. The problem with that is,", "tokens": [51436, 988, 498, 309, 311, 257, 3746, 3614, 11, 411, 572, 1412, 5055, 293, 2464, 293, 370, 322, 13, 440, 1154, 365, 300, 307, 11, 51720], "temperature": 0.0, "avg_logprob": -0.21625499372129087, "compression_ratio": 1.688259109311741, "no_speech_prob": 0.006567640230059624}, {"id": 264, "seek": 169328, "start": 1693.92, "end": 1698.6399999999999, "text": " as far as I remember, is that it actually disables like checksums or affects like these", "tokens": [50396, 382, 1400, 382, 286, 1604, 11, 307, 300, 309, 767, 717, 2965, 411, 13834, 8099, 420, 11807, 411, 613, 50632], "temperature": 0.0, "avg_logprob": -0.13199733285342946, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.003167236689478159}, {"id": 265, "seek": 169328, "start": 1698.6399999999999, "end": 1703.84, "text": " capabilities. Right. Which, and that's what I don't want. Right. I do want the checksumming", "tokens": [50632, 10862, 13, 1779, 13, 3013, 11, 293, 300, 311, 437, 286, 500, 380, 528, 13, 1779, 13, 286, 360, 528, 264, 13834, 449, 2810, 50892], "temperature": 0.0, "avg_logprob": -0.13199733285342946, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.003167236689478159}, {"id": 266, "seek": 169328, "start": 1704.56, "end": 1713.04, "text": " and so on for these file systems. Right. So that's it. Right. Well, these are the results", "tokens": [50928, 293, 370, 322, 337, 613, 3991, 3652, 13, 1779, 13, 407, 300, 311, 309, 13, 1779, 13, 1042, 11, 613, 366, 264, 3542, 51352], "temperature": 0.0, "avg_logprob": -0.13199733285342946, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.003167236689478159}, {"id": 267, "seek": 169328, "start": 1713.04, "end": 1718.3999999999999, "text": " with the LVM snapshots and these are the built-in snapshots. Right. So my conclusion, if you want", "tokens": [51352, 365, 264, 441, 53, 44, 19206, 27495, 293, 613, 366, 264, 3094, 12, 259, 19206, 27495, 13, 1779, 13, 407, 452, 10063, 11, 498, 291, 528, 51620], "temperature": 0.0, "avg_logprob": -0.13199733285342946, "compression_ratio": 1.7393364928909953, "no_speech_prob": 0.003167236689478159}, {"id": 268, "seek": 171840, "start": 1718.4, "end": 1723.44, "text": " snapshots, if you need snapshots for like, because it makes, for example, backup simpler for you,", "tokens": [50364, 19206, 27495, 11, 498, 291, 643, 19206, 27495, 337, 411, 11, 570, 309, 1669, 11, 337, 1365, 11, 14807, 18587, 337, 291, 11, 50616], "temperature": 0.0, "avg_logprob": -0.17503256737431394, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.008048024028539658}, {"id": 269, "seek": 171840, "start": 1724.5600000000002, "end": 1732.64, "text": " use these file systems, then I do have some results for OLVP-PG bench, which is like a read-only", "tokens": [50672, 764, 613, 3991, 3652, 11, 550, 286, 360, 362, 512, 3542, 337, 39191, 53, 47, 12, 47, 38, 10638, 11, 597, 307, 411, 257, 1401, 12, 25202, 51076], "temperature": 0.0, "avg_logprob": -0.17503256737431394, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.008048024028539658}, {"id": 270, "seek": 171840, "start": 1733.92, "end": 1740.96, "text": " mode. It simply means like select by primary key. Right. It does a lot of random IO.", "tokens": [51140, 4391, 13, 467, 2935, 1355, 411, 3048, 538, 6194, 2141, 13, 1779, 13, 467, 775, 257, 688, 295, 4974, 39839, 13, 51492], "temperature": 0.0, "avg_logprob": -0.17503256737431394, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.008048024028539658}, {"id": 271, "seek": 174096, "start": 1741.92, "end": 1748.48, "text": " This is like the large, large scales, which means that it actually is hitting the", "tokens": [50412, 639, 307, 411, 264, 2416, 11, 2416, 17408, 11, 597, 1355, 300, 309, 767, 307, 8850, 264, 50740], "temperature": 0.0, "avg_logprob": -0.21991057009310336, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.029186997562646866}, {"id": 272, "seek": 174096, "start": 1750.88, "end": 1758.64, "text": " disks a lot. It's not like in memory. And you can also see that on the smaller machine, which is like", "tokens": [50860, 41617, 257, 688, 13, 467, 311, 406, 411, 294, 4675, 13, 400, 291, 393, 611, 536, 300, 322, 264, 4356, 3479, 11, 597, 307, 411, 51248], "temperature": 0.0, "avg_logprob": -0.21991057009310336, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.029186997562646866}, {"id": 273, "seek": 174096, "start": 1760.16, "end": 1767.28, "text": " just four cores, the differences are fairly small. The ZFS is a bit slower. I assume that it's because", "tokens": [51324, 445, 1451, 24826, 11, 264, 7300, 366, 6457, 1359, 13, 440, 1176, 29318, 307, 257, 857, 14009, 13, 286, 6552, 300, 309, 311, 570, 51680], "temperature": 0.0, "avg_logprob": -0.21991057009310336, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.029186997562646866}, {"id": 274, "seek": 176728, "start": 1767.36, "end": 1770.96, "text": " it's not using the page cache. It's using the ARC cache and there's like,", "tokens": [50368, 309, 311, 406, 1228, 264, 3028, 19459, 13, 467, 311, 1228, 264, 8943, 34, 19459, 293, 456, 311, 411, 11, 50548], "temperature": 0.0, "avg_logprob": -0.12739181518554688, "compression_ratio": 1.5964912280701755, "no_speech_prob": 0.009542189538478851}, {"id": 275, "seek": 176728, "start": 1772.0, "end": 1778.56, "text": " like different size. It's like smaller than the page cache in this configuration. So that's fine.", "tokens": [50600, 411, 819, 2744, 13, 467, 311, 411, 4356, 813, 264, 3028, 19459, 294, 341, 11694, 13, 407, 300, 311, 2489, 13, 50928], "temperature": 0.0, "avg_logprob": -0.12739181518554688, "compression_ratio": 1.5964912280701755, "no_speech_prob": 0.009542189538478851}, {"id": 276, "seek": 176728, "start": 1779.68, "end": 1788.3999999999999, "text": " On the larger machine, which you can see that this is like five times or four times higher throughput", "tokens": [50984, 1282, 264, 4833, 3479, 11, 597, 291, 393, 536, 300, 341, 307, 411, 1732, 1413, 420, 1451, 1413, 2946, 44629, 51420], "temperature": 0.0, "avg_logprob": -0.12739181518554688, "compression_ratio": 1.5964912280701755, "no_speech_prob": 0.009542189538478851}, {"id": 277, "seek": 178840, "start": 1788.88, "end": 1797.8400000000001, "text": " because it's using NVME, then the beta RFS is getting slower. ZFS is slightly slower also.", "tokens": [50388, 570, 309, 311, 1228, 46512, 15454, 11, 550, 264, 9861, 26204, 50, 307, 1242, 14009, 13, 1176, 29318, 307, 4748, 14009, 611, 13, 50836], "temperature": 0.0, "avg_logprob": -0.2344580786568778, "compression_ratio": 1.5028901734104045, "no_speech_prob": 0.005815284792333841}, {"id": 278, "seek": 178840, "start": 1797.8400000000001, "end": 1807.76, "text": " Right. Which again, in absolute numbers, this is not great. If ZFS is giving you or like beta", "tokens": [50836, 1779, 13, 3013, 797, 11, 294, 8236, 3547, 11, 341, 307, 406, 869, 13, 759, 1176, 29318, 307, 2902, 291, 420, 411, 9861, 51332], "temperature": 0.0, "avg_logprob": -0.2344580786568778, "compression_ratio": 1.5028901734104045, "no_speech_prob": 0.005815284792333841}, {"id": 279, "seek": 178840, "start": 1807.76, "end": 1811.8400000000001, "text": " RFS is giving you some additional features, I think this is perfectly fine.", "tokens": [51332, 26204, 50, 307, 2902, 291, 512, 4497, 4122, 11, 286, 519, 341, 307, 6239, 2489, 13, 51536], "temperature": 0.0, "avg_logprob": -0.2344580786568778, "compression_ratio": 1.5028901734104045, "no_speech_prob": 0.005815284792333841}, {"id": 280, "seek": 181184, "start": 1812.3999999999999, "end": 1821.28, "text": " For the read write, and I'm actually showing for the read write like different scales.", "tokens": [50392, 1171, 264, 1401, 2464, 11, 293, 286, 478, 767, 4099, 337, 264, 1401, 2464, 411, 819, 17408, 13, 50836], "temperature": 0.0, "avg_logprob": -0.21500121845918543, "compression_ratio": 1.5722543352601157, "no_speech_prob": 0.006578665692359209}, {"id": 281, "seek": 181184, "start": 1822.24, "end": 1827.1999999999998, "text": " Scale, this is like a small scale, which means everything fits into shed buffers. So we are", "tokens": [50884, 42999, 11, 341, 307, 411, 257, 1359, 4373, 11, 597, 1355, 1203, 9001, 666, 14951, 9204, 433, 13, 407, 321, 366, 51132], "temperature": 0.0, "avg_logprob": -0.21500121845918543, "compression_ratio": 1.5722543352601157, "no_speech_prob": 0.006578665692359209}, {"id": 282, "seek": 181184, "start": 1827.1999999999998, "end": 1836.3999999999999, "text": " actually doing a lot, very few random writes. A thousand here means it fits into RAM, but not", "tokens": [51132, 767, 884, 257, 688, 11, 588, 1326, 4974, 13657, 13, 316, 4714, 510, 1355, 309, 9001, 666, 14561, 11, 457, 406, 51592], "temperature": 0.0, "avg_logprob": -0.21500121845918543, "compression_ratio": 1.5722543352601157, "no_speech_prob": 0.006578665692359209}, {"id": 283, "seek": 183640, "start": 1836.4, "end": 1845.0400000000002, "text": " into shed buffers. And this is like much larger than memory in general. And you can see that,", "tokens": [50364, 666, 14951, 9204, 433, 13, 400, 341, 307, 411, 709, 4833, 813, 4675, 294, 2674, 13, 400, 291, 393, 536, 300, 11, 50796], "temperature": 0.0, "avg_logprob": -0.19098161697387694, "compression_ratio": 1.3285714285714285, "no_speech_prob": 0.016334867104887962}, {"id": 284, "seek": 183640, "start": 1845.0400000000002, "end": 1854.8000000000002, "text": " again, the EXT4 XFS kind of like perform the best. And unfortunately, the copyright systems,", "tokens": [50796, 797, 11, 264, 16385, 51, 19, 1783, 29318, 733, 295, 411, 2042, 264, 1151, 13, 400, 7015, 11, 264, 17996, 3652, 11, 51284], "temperature": 0.0, "avg_logprob": -0.19098161697387694, "compression_ratio": 1.3285714285714285, "no_speech_prob": 0.016334867104887962}, {"id": 285, "seek": 185480, "start": 1854.8, "end": 1867.9199999999998, "text": " once you exceed the available RAM, get much slower. The OLTP PG bench is not exactly,", "tokens": [50364, 1564, 291, 14048, 264, 2435, 14561, 11, 483, 709, 14009, 13, 440, 39191, 16804, 40975, 10638, 307, 406, 2293, 11, 51020], "temperature": 0.0, "avg_logprob": -0.3019602926153886, "compression_ratio": 1.1043478260869566, "no_speech_prob": 0.006643414497375488}, {"id": 286, "seek": 185480, "start": 1870.08, "end": 1873.28, "text": " it's very uniform access. Right. So, yes.", "tokens": [51128, 309, 311, 588, 9452, 2105, 13, 1779, 13, 407, 11, 2086, 13, 51288], "temperature": 0.0, "avg_logprob": -0.3019602926153886, "compression_ratio": 1.1043478260869566, "no_speech_prob": 0.006643414497375488}, {"id": 287, "seek": 187328, "start": 1873.84, "end": 1877.92, "text": " Do you use large blocks on ZFS?", "tokens": [50392, 1144, 291, 764, 2416, 8474, 322, 1176, 29318, 30, 50596], "temperature": 0.0, "avg_logprob": -0.27034394782886173, "compression_ratio": 1.3106060606060606, "no_speech_prob": 0.04492904618382454}, {"id": 288, "seek": 187328, "start": 1878.72, "end": 1885.28, "text": " So, for ZFS, I use the 8 kilobyte blocks. Right. So I reduce the size of the block", "tokens": [50636, 407, 11, 337, 1176, 29318, 11, 286, 764, 264, 1649, 5128, 13944, 975, 8474, 13, 1779, 13, 407, 286, 5407, 264, 2744, 295, 264, 3461, 50964], "temperature": 0.0, "avg_logprob": -0.27034394782886173, "compression_ratio": 1.3106060606060606, "no_speech_prob": 0.04492904618382454}, {"id": 289, "seek": 187328, "start": 1886.16, "end": 1895.12, "text": " to match the postgres data block. What I was going to say,", "tokens": [51008, 281, 2995, 264, 2183, 45189, 1412, 3461, 13, 708, 286, 390, 516, 281, 584, 11, 51456], "temperature": 0.0, "avg_logprob": -0.27034394782886173, "compression_ratio": 1.3106060606060606, "no_speech_prob": 0.04492904618382454}, {"id": 290, "seek": 189512, "start": 1895.1999999999998, "end": 1904.08, "text": " well, I wanted to say that PG bench may not be a perfect thing to model your database,", "tokens": [50368, 731, 11, 286, 1415, 281, 584, 300, 40975, 10638, 815, 406, 312, 257, 2176, 551, 281, 2316, 428, 8149, 11, 50812], "temperature": 0.0, "avg_logprob": -0.14295397996902465, "compression_ratio": 1.6634146341463414, "no_speech_prob": 0.009096820838749409}, {"id": 291, "seek": 189512, "start": 1904.08, "end": 1910.8799999999999, "text": " your application, because it randomly and uniformly accesses all the different parts of the database.", "tokens": [50812, 428, 3861, 11, 570, 309, 16979, 293, 48806, 2105, 279, 439, 264, 819, 3166, 295, 264, 8149, 13, 51152], "temperature": 0.0, "avg_logprob": -0.14295397996902465, "compression_ratio": 1.6634146341463414, "no_speech_prob": 0.009096820838749409}, {"id": 292, "seek": 189512, "start": 1911.4399999999998, "end": 1916.2399999999998, "text": " But usually what you have is you have a very active subset of the database,", "tokens": [51180, 583, 2673, 437, 291, 362, 307, 291, 362, 257, 588, 4967, 25993, 295, 264, 8149, 11, 51420], "temperature": 0.0, "avg_logprob": -0.14295397996902465, "compression_ratio": 1.6634146341463414, "no_speech_prob": 0.009096820838749409}, {"id": 293, "seek": 189512, "start": 1917.52, "end": 1924.08, "text": " which probably fits into memory. And then you have the rest of the database,", "tokens": [51484, 597, 1391, 9001, 666, 4675, 13, 400, 550, 291, 362, 264, 1472, 295, 264, 8149, 11, 51812], "temperature": 0.0, "avg_logprob": -0.14295397996902465, "compression_ratio": 1.6634146341463414, "no_speech_prob": 0.009096820838749409}, {"id": 294, "seek": 192408, "start": 1924.1599999999999, "end": 1928.8, "text": " which is like historical data or users that are not very active or something.", "tokens": [50368, 597, 307, 411, 8584, 1412, 420, 5022, 300, 366, 406, 588, 4967, 420, 746, 13, 50600], "temperature": 0.0, "avg_logprob": -0.16590847366157618, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.009931926615536213}, {"id": 295, "seek": 192408, "start": 1930.0, "end": 1937.36, "text": " So, this, which means that you probably are not very affected by this. This is like the worst", "tokens": [50660, 407, 11, 341, 11, 597, 1355, 300, 291, 1391, 366, 406, 588, 8028, 538, 341, 13, 639, 307, 411, 264, 5855, 51028], "temperature": 0.0, "avg_logprob": -0.16590847366157618, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.009931926615536213}, {"id": 296, "seek": 192408, "start": 1937.36, "end": 1945.1999999999998, "text": " case possible. Right. And you are probably somewhere in this region. Right. In which case, the ZFS", "tokens": [51028, 1389, 1944, 13, 1779, 13, 400, 291, 366, 1391, 4079, 294, 341, 4458, 13, 1779, 13, 682, 597, 1389, 11, 264, 1176, 29318, 51420], "temperature": 0.0, "avg_logprob": -0.16590847366157618, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.009931926615536213}, {"id": 297, "seek": 192408, "start": 1946.24, "end": 1953.4399999999998, "text": " is slower, but not by much. So that's one thing you need to consider when", "tokens": [51472, 307, 14009, 11, 457, 406, 538, 709, 13, 407, 300, 311, 472, 551, 291, 643, 281, 1949, 562, 51832], "temperature": 0.0, "avg_logprob": -0.16590847366157618, "compression_ratio": 1.6226415094339623, "no_speech_prob": 0.009931926615536213}, {"id": 298, "seek": 195344, "start": 1953.44, "end": 1958.56, "text": " interpreting the benchmark results and applying them to your application. Right.", "tokens": [50364, 37395, 264, 18927, 3542, 293, 9275, 552, 281, 428, 3861, 13, 1779, 13, 50620], "temperature": 0.0, "avg_logprob": -0.10738066685052565, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.003635526169091463}, {"id": 299, "seek": 195344, "start": 1959.8400000000001, "end": 1967.52, "text": " But one thing I'd like to mention is that throughput is not the whole story. Right. I mean,", "tokens": [50684, 583, 472, 551, 286, 1116, 411, 281, 2152, 307, 300, 44629, 307, 406, 264, 1379, 1657, 13, 1779, 13, 286, 914, 11, 51068], "temperature": 0.0, "avg_logprob": -0.10738066685052565, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.003635526169091463}, {"id": 300, "seek": 195344, "start": 1968.3200000000002, "end": 1972.64, "text": " if you only get information about like how many transactions you can get per second, that doesn't", "tokens": [51108, 498, 291, 787, 483, 1589, 466, 411, 577, 867, 16856, 291, 393, 483, 680, 1150, 11, 300, 1177, 380, 51324], "temperature": 0.0, "avg_logprob": -0.10738066685052565, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.003635526169091463}, {"id": 301, "seek": 195344, "start": 1972.64, "end": 1979.76, "text": " actually, you know, fully explain or fully describe the database or like the performance of", "tokens": [51324, 767, 11, 291, 458, 11, 4498, 2903, 420, 4498, 6786, 264, 8149, 420, 411, 264, 3389, 295, 51680], "temperature": 0.0, "avg_logprob": -0.10738066685052565, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.003635526169091463}, {"id": 302, "seek": 197976, "start": 1979.76, "end": 1987.92, "text": " any system. The other thing that you need to look at is latency. Right. Because if you get like", "tokens": [50364, 604, 1185, 13, 440, 661, 551, 300, 291, 643, 281, 574, 412, 307, 27043, 13, 1779, 13, 1436, 498, 291, 483, 411, 50772], "temperature": 0.0, "avg_logprob": -0.12291423694507496, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.004324654582887888}, {"id": 303, "seek": 197976, "start": 1987.92, "end": 1995.6, "text": " very different latencies, like one, one request gets handled in one millisecond, the other request", "tokens": [50772, 588, 819, 4465, 6464, 11, 411, 472, 11, 472, 5308, 2170, 18033, 294, 472, 27940, 18882, 11, 264, 661, 5308, 51156], "temperature": 0.0, "avg_logprob": -0.12291423694507496, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.004324654582887888}, {"id": 304, "seek": 197976, "start": 1995.6, "end": 2004.56, "text": " gets handled in five, five minutes. It's like in, on average, it's probably not very good performance.", "tokens": [51156, 2170, 18033, 294, 1732, 11, 1732, 2077, 13, 467, 311, 411, 294, 11, 322, 4274, 11, 309, 311, 1391, 406, 588, 665, 3389, 13, 51604], "temperature": 0.0, "avg_logprob": -0.12291423694507496, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.004324654582887888}, {"id": 305, "seek": 200456, "start": 2004.6399999999999, "end": 2012.8799999999999, "text": " Right. So what I did is I actually show behavior over time, not just for the whole", "tokens": [50368, 1779, 13, 407, 437, 286, 630, 307, 286, 767, 855, 5223, 670, 565, 11, 406, 445, 337, 264, 1379, 50780], "temperature": 0.0, "avg_logprob": -0.12182093158210676, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.012582622468471527}, {"id": 306, "seek": 200456, "start": 2012.8799999999999, "end": 2020.48, "text": " two hour run, but I show how actually the performance changes over time. And this is", "tokens": [50780, 732, 1773, 1190, 11, 457, 286, 855, 577, 767, 264, 3389, 2962, 670, 565, 13, 400, 341, 307, 51160], "temperature": 0.0, "avg_logprob": -0.12182093158210676, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.012582622468471527}, {"id": 307, "seek": 200456, "start": 2020.48, "end": 2028.0, "text": " like the throughput. And you can see that EXT4, one thing I want to say, don't look at the numbers.", "tokens": [51160, 411, 264, 44629, 13, 400, 291, 393, 536, 300, 16385, 51, 19, 11, 472, 551, 286, 528, 281, 584, 11, 500, 380, 574, 412, 264, 3547, 13, 51536], "temperature": 0.0, "avg_logprob": -0.12182093158210676, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.012582622468471527}, {"id": 308, "seek": 200456, "start": 2028.0, "end": 2033.76, "text": " Right. The numbers, you may not even be able to read them from the back. That doesn't matter.", "tokens": [51536, 1779, 13, 440, 3547, 11, 291, 815, 406, 754, 312, 1075, 281, 1401, 552, 490, 264, 646, 13, 663, 1177, 380, 1871, 13, 51824], "temperature": 0.0, "avg_logprob": -0.12182093158210676, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.012582622468471527}, {"id": 309, "seek": 203376, "start": 2033.76, "end": 2040.48, "text": " You can look at the slide later. What matters is that you can compare the charts visually.", "tokens": [50364, 509, 393, 574, 412, 264, 4137, 1780, 13, 708, 7001, 307, 300, 291, 393, 6794, 264, 17767, 19622, 13, 50700], "temperature": 0.0, "avg_logprob": -0.11065725846724077, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.0066831535659730434}, {"id": 310, "seek": 203376, "start": 2041.44, "end": 2048.48, "text": " Yeah. You can, you can look at the first row and that's the small data set, which is the data set", "tokens": [50748, 865, 13, 509, 393, 11, 291, 393, 574, 412, 264, 700, 5386, 293, 300, 311, 264, 1359, 1412, 992, 11, 597, 307, 264, 1412, 992, 51100], "temperature": 0.0, "avg_logprob": -0.11065725846724077, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.0066831535659730434}, {"id": 311, "seek": 203376, "start": 2048.48, "end": 2054.64, "text": " that fits into shared buffers. The other row is the medium, which is like fits into memory,", "tokens": [51100, 300, 9001, 666, 5507, 9204, 433, 13, 440, 661, 5386, 307, 264, 6399, 11, 597, 307, 411, 9001, 666, 4675, 11, 51408], "temperature": 0.0, "avg_logprob": -0.11065725846724077, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.0066831535659730434}, {"id": 312, "seek": 203376, "start": 2054.64, "end": 2062.08, "text": " but doesn't fit into shared buffers. This doesn't, the third one, large one, doesn't fit into", "tokens": [51408, 457, 1177, 380, 3318, 666, 5507, 9204, 433, 13, 639, 1177, 380, 11, 264, 2636, 472, 11, 2416, 472, 11, 1177, 380, 3318, 666, 51780], "temperature": 0.0, "avg_logprob": -0.11065725846724077, "compression_ratio": 1.8888888888888888, "no_speech_prob": 0.0066831535659730434}, {"id": 313, "seek": 206208, "start": 2063.04, "end": 2071.44, "text": " memory at all. But that's the read write. And this is read only. Right. All these, this is small", "tokens": [50412, 4675, 412, 439, 13, 583, 300, 311, 264, 1401, 2464, 13, 400, 341, 307, 1401, 787, 13, 1779, 13, 1057, 613, 11, 341, 307, 1359, 50832], "temperature": 0.0, "avg_logprob": -0.12619842895089764, "compression_ratio": 1.7065868263473054, "no_speech_prob": 0.00432366831228137}, {"id": 314, "seek": 206208, "start": 2071.44, "end": 2078.7999999999997, "text": " read write, medium read write, large read write, large read only. Sorry, there is a mistake here.", "tokens": [50832, 1401, 2464, 11, 6399, 1401, 2464, 11, 2416, 1401, 2464, 11, 2416, 1401, 787, 13, 4919, 11, 456, 307, 257, 6146, 510, 13, 51200], "temperature": 0.0, "avg_logprob": -0.12619842895089764, "compression_ratio": 1.7065868263473054, "no_speech_prob": 0.00432366831228137}, {"id": 315, "seek": 206208, "start": 2080.16, "end": 2087.44, "text": " And this shows like how that actually behaves over two hours. And you can visually compare", "tokens": [51268, 400, 341, 3110, 411, 577, 300, 767, 36896, 670, 732, 2496, 13, 400, 291, 393, 19622, 6794, 51632], "temperature": 0.0, "avg_logprob": -0.12619842895089764, "compression_ratio": 1.7065868263473054, "no_speech_prob": 0.00432366831228137}, {"id": 316, "seek": 208744, "start": 2087.52, "end": 2096.08, "text": " each row. Right. So you can, for example, see here that EXT4, XFS are really, really stable.", "tokens": [50368, 1184, 5386, 13, 1779, 13, 407, 291, 393, 11, 337, 1365, 11, 536, 510, 300, 16385, 51, 19, 11, 1783, 29318, 366, 534, 11, 534, 8351, 13, 50796], "temperature": 0.0, "avg_logprob": -0.1830761371514736, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.011477900668978691}, {"id": 317, "seek": 208744, "start": 2096.08, "end": 2107.04, "text": " Right. You get really, very similar throughput over time. BTRFS is a bit slower. ZFS also", "tokens": [50796, 1779, 13, 509, 483, 534, 11, 588, 2531, 44629, 670, 565, 13, 31144, 49, 29318, 307, 257, 857, 14009, 13, 1176, 29318, 611, 51344], "temperature": 0.0, "avg_logprob": -0.1830761371514736, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.011477900668978691}, {"id": 318, "seek": 208744, "start": 2107.04, "end": 2116.48, "text": " very stable. And then once you get larger and larger data sets, the behavior changes. Not for", "tokens": [51344, 588, 8351, 13, 400, 550, 1564, 291, 483, 4833, 293, 4833, 1412, 6352, 11, 264, 5223, 2962, 13, 1726, 337, 51816], "temperature": 0.0, "avg_logprob": -0.1830761371514736, "compression_ratio": 1.4680851063829787, "no_speech_prob": 0.011477900668978691}, {"id": 319, "seek": 211648, "start": 2116.48, "end": 2123.92, "text": " EXT4, XFS, of course, you get like slower, lower performance. But for example, for BTRFS, you get", "tokens": [50364, 16385, 51, 19, 11, 1783, 29318, 11, 295, 1164, 11, 291, 483, 411, 14009, 11, 3126, 3389, 13, 583, 337, 1365, 11, 337, 31144, 49, 29318, 11, 291, 483, 50736], "temperature": 0.0, "avg_logprob": -0.15977747300091913, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.0041924151591956615}, {"id": 320, "seek": 211648, "start": 2123.92, "end": 2134.16, "text": " like much more, much more jitter in, in the throughput for per second. Right. So, so that's", "tokens": [50736, 411, 709, 544, 11, 709, 544, 361, 3904, 294, 11, 294, 264, 44629, 337, 680, 1150, 13, 1779, 13, 407, 11, 370, 300, 311, 51248], "temperature": 0.0, "avg_logprob": -0.15977747300091913, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.0041924151591956615}, {"id": 321, "seek": 211648, "start": 2134.16, "end": 2145.04, "text": " not great. Also, you get like progressively slower throughput. She's not great for ZFS. It's similar.", "tokens": [51248, 406, 869, 13, 2743, 11, 291, 483, 411, 46667, 14009, 44629, 13, 1240, 311, 406, 869, 337, 1176, 29318, 13, 467, 311, 2531, 13, 51792], "temperature": 0.0, "avg_logprob": -0.15977747300091913, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.0041924151591956615}, {"id": 322, "seek": 214504, "start": 2145.04, "end": 2151.2799999999997, "text": " Right. I mean like, you get like more variants in, in the throughput. And ultimately, even for ZFS,", "tokens": [50364, 1779, 13, 286, 914, 411, 11, 291, 483, 411, 544, 21669, 294, 11, 294, 264, 44629, 13, 400, 6284, 11, 754, 337, 1176, 29318, 11, 50676], "temperature": 0.0, "avg_logprob": -0.12582990285512563, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.0014529323671013117}, {"id": 323, "seek": 214504, "start": 2151.2799999999997, "end": 2158.32, "text": " you get like much lower throughput for read only. But I started talking about latency. This shows me", "tokens": [50676, 291, 483, 411, 709, 3126, 44629, 337, 1401, 787, 13, 583, 286, 1409, 1417, 466, 27043, 13, 639, 3110, 385, 51028], "temperature": 0.0, "avg_logprob": -0.12582990285512563, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.0014529323671013117}, {"id": 324, "seek": 214504, "start": 2158.32, "end": 2165.68, "text": " still just throughput over time. It shows me like how, how it changes over like two hour period.", "tokens": [51028, 920, 445, 44629, 670, 565, 13, 467, 3110, 385, 411, 577, 11, 577, 309, 2962, 670, 411, 732, 1773, 2896, 13, 51396], "temperature": 0.0, "avg_logprob": -0.12582990285512563, "compression_ratio": 1.563157894736842, "no_speech_prob": 0.0014529323671013117}, {"id": 325, "seek": 216568, "start": 2165.7599999999998, "end": 2175.8399999999997, "text": " It doesn't show me latency. Right. So, this is the result of percentiles of, of the same test. And", "tokens": [50368, 467, 1177, 380, 855, 385, 27043, 13, 1779, 13, 407, 11, 341, 307, 264, 1874, 295, 3043, 4680, 295, 11, 295, 264, 912, 1500, 13, 400, 50872], "temperature": 0.0, "avg_logprob": -0.18276434306856953, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.09117002040147781}, {"id": 326, "seek": 216568, "start": 2177.12, "end": 2182.64, "text": " ideally, you would see something like this. Right. I mean, this is, I think, 25%.", "tokens": [50936, 22915, 11, 291, 576, 536, 746, 411, 341, 13, 1779, 13, 286, 914, 11, 341, 307, 11, 286, 519, 11, 3552, 6856, 51212], "temperature": 0.0, "avg_logprob": -0.18276434306856953, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.09117002040147781}, {"id": 327, "seek": 216568, "start": 2185.44, "end": 2194.48, "text": " 50%. 75, 95, 99. And ideally, you would see like perfectly straight lines, which gives you very", "tokens": [51352, 2625, 6856, 9562, 11, 13420, 11, 11803, 13, 400, 22915, 11, 291, 576, 536, 411, 6239, 2997, 3876, 11, 597, 2709, 291, 588, 51804], "temperature": 0.0, "avg_logprob": -0.18276434306856953, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.09117002040147781}, {"id": 328, "seek": 219448, "start": 2194.48, "end": 2199.92, "text": " consistent performance over time. Right. So, this is really, really nice. I mean, like the", "tokens": [50364, 8398, 3389, 670, 565, 13, 1779, 13, 407, 11, 341, 307, 534, 11, 534, 1481, 13, 286, 914, 11, 411, 264, 50636], "temperature": 0.0, "avg_logprob": -0.11600985578311387, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.004883317276835442}, {"id": 329, "seek": 219448, "start": 2199.92, "end": 2206.32, "text": " throughput was fairly low. But this is really nice because it's very predictable for operation.", "tokens": [50636, 44629, 390, 6457, 2295, 13, 583, 341, 307, 534, 1481, 570, 309, 311, 588, 27737, 337, 6916, 13, 50956], "temperature": 0.0, "avg_logprob": -0.11600985578311387, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.004883317276835442}, {"id": 330, "seek": 219448, "start": 2207.92, "end": 2214.72, "text": " Similar thing here. Right. You get some blips here, some, you know, spice latency and so on.", "tokens": [51036, 10905, 551, 510, 13, 1779, 13, 509, 483, 512, 888, 2600, 510, 11, 512, 11, 291, 458, 11, 19436, 27043, 293, 370, 322, 13, 51376], "temperature": 0.0, "avg_logprob": -0.11600985578311387, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.004883317276835442}, {"id": 331, "seek": 219448, "start": 2214.72, "end": 2220.32, "text": " But it's very short, very predictable, really nice. And you probably will not even see this", "tokens": [51376, 583, 309, 311, 588, 2099, 11, 588, 27737, 11, 534, 1481, 13, 400, 291, 1391, 486, 406, 754, 536, 341, 51656], "temperature": 0.0, "avg_logprob": -0.11600985578311387, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.004883317276835442}, {"id": 332, "seek": 222032, "start": 2220.32, "end": 2228.0800000000004, "text": " in like a monitoring. For ZFS, it's not that great. It simply needs to do, I don't know, compression,", "tokens": [50364, 294, 411, 257, 11028, 13, 1171, 1176, 29318, 11, 309, 311, 406, 300, 869, 13, 467, 2935, 2203, 281, 360, 11, 286, 500, 380, 458, 11, 19355, 11, 50752], "temperature": 0.0, "avg_logprob": -0.13457967058012757, "compression_ratio": 1.441025641025641, "no_speech_prob": 0.004046886693686247}, {"id": 333, "seek": 222032, "start": 2228.0800000000004, "end": 2236.88, "text": " whatever, do copy on write of the data. For BTRFS, it's unfortunately much worse. Right. This means", "tokens": [50752, 2035, 11, 360, 5055, 322, 2464, 295, 264, 1412, 13, 1171, 363, 25936, 29318, 11, 309, 311, 7015, 709, 5324, 13, 1779, 13, 639, 1355, 51192], "temperature": 0.0, "avg_logprob": -0.13457967058012757, "compression_ratio": 1.441025641025641, "no_speech_prob": 0.004046886693686247}, {"id": 334, "seek": 222032, "start": 2236.88, "end": 2243.76, "text": " that the, the latency spikes are pretty significant. I mean, if you look at the", "tokens": [51192, 300, 264, 11, 264, 27043, 28997, 366, 1238, 4776, 13, 286, 914, 11, 498, 291, 574, 412, 264, 51536], "temperature": 0.0, "avg_logprob": -0.13457967058012757, "compression_ratio": 1.441025641025641, "no_speech_prob": 0.004046886693686247}, {"id": 335, "seek": 224376, "start": 2244.7200000000003, "end": 2253.5200000000004, "text": " throughput, you can see that there are like a lot of fluctuations here. So, that's not great.", "tokens": [50412, 44629, 11, 291, 393, 536, 300, 456, 366, 411, 257, 688, 295, 45276, 510, 13, 407, 11, 300, 311, 406, 869, 13, 50852], "temperature": 0.0, "avg_logprob": -0.1436006631424178, "compression_ratio": 1.473053892215569, "no_speech_prob": 0.003750460222363472}, {"id": 336, "seek": 224376, "start": 2254.7200000000003, "end": 2260.32, "text": " I would definitely, as a DBA, I would like to see something like this. Right. Because it gives me", "tokens": [50912, 286, 576, 2138, 11, 382, 257, 413, 9295, 11, 286, 576, 411, 281, 536, 746, 411, 341, 13, 1779, 13, 1436, 309, 2709, 385, 51192], "temperature": 0.0, "avg_logprob": -0.1436006631424178, "compression_ratio": 1.473053892215569, "no_speech_prob": 0.003750460222363472}, {"id": 337, "seek": 224376, "start": 2261.0400000000004, "end": 2266.0, "text": " nice smooth behavior. This is okay. This is not great.", "tokens": [51228, 1481, 5508, 5223, 13, 639, 307, 1392, 13, 639, 307, 406, 869, 13, 51476], "temperature": 0.0, "avg_logprob": -0.1436006631424178, "compression_ratio": 1.473053892215569, "no_speech_prob": 0.003750460222363472}, {"id": 338, "seek": 226600, "start": 2266.88, "end": 2275.2, "text": " Okay. For the smaller machine, it's like a very similar, similar story, except that the", "tokens": [50408, 1033, 13, 1171, 264, 4356, 3479, 11, 309, 311, 411, 257, 588, 2531, 11, 2531, 1657, 11, 3993, 300, 264, 50824], "temperature": 0.0, "avg_logprob": -0.17794834077358246, "compression_ratio": 1.5359116022099448, "no_speech_prob": 0.005203971639275551}, {"id": 339, "seek": 226600, "start": 2275.2, "end": 2280.8, "text": " differences are not as pronounced because simply the storage is not as powerful. Right. I mean,", "tokens": [50824, 7300, 366, 406, 382, 23155, 570, 2935, 264, 6725, 307, 406, 382, 4005, 13, 1779, 13, 286, 914, 11, 51104], "temperature": 0.0, "avg_logprob": -0.17794834077358246, "compression_ratio": 1.5359116022099448, "no_speech_prob": 0.005203971639275551}, {"id": 340, "seek": 226600, "start": 2280.8, "end": 2287.76, "text": " like you get similar performance for the smaller dataset, then as we are increasing the amount", "tokens": [51104, 411, 291, 483, 2531, 3389, 337, 264, 4356, 28872, 11, 550, 382, 321, 366, 5662, 264, 2372, 51452], "temperature": 0.0, "avg_logprob": -0.17794834077358246, "compression_ratio": 1.5359116022099448, "no_speech_prob": 0.005203971639275551}, {"id": 341, "seek": 228776, "start": 2287.84, "end": 2296.4, "text": " of random writes in random IO, it gets worse. And of course, similar, similar outcome for,", "tokens": [50368, 295, 4974, 13657, 294, 4974, 286, 46, 11, 309, 2170, 5324, 13, 400, 295, 1164, 11, 2531, 11, 2531, 9700, 337, 11, 50796], "temperature": 0.0, "avg_logprob": -0.1552552541097005, "compression_ratio": 1.5240384615384615, "no_speech_prob": 0.012790722772479057}, {"id": 342, "seek": 228776, "start": 2296.4, "end": 2302.2400000000002, "text": " for the latencies. Right. So, I use this as a visual way to compare the results.", "tokens": [50796, 337, 264, 4465, 6464, 13, 1779, 13, 407, 11, 286, 764, 341, 382, 257, 5056, 636, 281, 6794, 264, 3542, 13, 51088], "temperature": 0.0, "avg_logprob": -0.1552552541097005, "compression_ratio": 1.5240384615384615, "no_speech_prob": 0.012790722772479057}, {"id": 343, "seek": 228776, "start": 2303.76, "end": 2307.5200000000004, "text": " Not the exact numbers, but like how the chart looks like. Right.", "tokens": [51164, 1726, 264, 1900, 3547, 11, 457, 411, 577, 264, 6927, 1542, 411, 13, 1779, 13, 51352], "temperature": 0.0, "avg_logprob": -0.1552552541097005, "compression_ratio": 1.5240384615384615, "no_speech_prob": 0.012790722772479057}, {"id": 344, "seek": 228776, "start": 2309.6800000000003, "end": 2314.4, "text": " And I think I do have to say like a super large machine, which is, I don't know,", "tokens": [51460, 400, 286, 519, 286, 360, 362, 281, 584, 411, 257, 1687, 2416, 3479, 11, 597, 307, 11, 286, 500, 380, 458, 11, 51696], "temperature": 0.0, "avg_logprob": -0.1552552541097005, "compression_ratio": 1.5240384615384615, "no_speech_prob": 0.012790722772479057}, {"id": 345, "seek": 231440, "start": 2315.36, "end": 2321.76, "text": " 100 cores, AMV epic with four NVMEs. And you can again see very similar", "tokens": [50412, 2319, 24826, 11, 6475, 53, 13581, 365, 1451, 46512, 15454, 82, 13, 400, 291, 393, 797, 536, 588, 2531, 50732], "temperature": 0.0, "avg_logprob": -0.2596579773785317, "compression_ratio": 1.3177083333333333, "no_speech_prob": 0.0043835872784256935}, {"id": 346, "seek": 231440, "start": 2323.6800000000003, "end": 2332.32, "text": " pattern with like EXE4 XFS. There are some fluctuations here. I'm not sure what exactly", "tokens": [50828, 5102, 365, 411, 16385, 36, 19, 1783, 29318, 13, 821, 366, 512, 45276, 510, 13, 286, 478, 406, 988, 437, 2293, 51260], "temperature": 0.0, "avg_logprob": -0.2596579773785317, "compression_ratio": 1.3177083333333333, "no_speech_prob": 0.0043835872784256935}, {"id": 347, "seek": 231440, "start": 2332.32, "end": 2340.0, "text": " that is. I need to look into that. But the, and I would say the ZFS behaves like better here.", "tokens": [51260, 300, 307, 13, 286, 643, 281, 574, 666, 300, 13, 583, 264, 11, 293, 286, 576, 584, 264, 1176, 29318, 36896, 411, 1101, 510, 13, 51644], "temperature": 0.0, "avg_logprob": -0.2596579773785317, "compression_ratio": 1.3177083333333333, "no_speech_prob": 0.0043835872784256935}, {"id": 348, "seek": 234000, "start": 2340.88, "end": 2346.64, "text": " It's like nicer. You can see those are most likely checkpoints, these spikes.", "tokens": [50408, 467, 311, 411, 22842, 13, 509, 393, 536, 729, 366, 881, 3700, 1520, 20552, 11, 613, 28997, 13, 50696], "temperature": 0.0, "avg_logprob": -0.13783188107647473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.008163517341017723}, {"id": 349, "seek": 234000, "start": 2347.92, "end": 2351.36, "text": " So there's probably a way to improve this.", "tokens": [50760, 407, 456, 311, 1391, 257, 636, 281, 3470, 341, 13, 50932], "temperature": 0.0, "avg_logprob": -0.13783188107647473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.008163517341017723}, {"id": 350, "seek": 234000, "start": 2354.56, "end": 2360.32, "text": " Similar for latency, right. Like these are really nice. Well, you can always improve that,", "tokens": [51092, 10905, 337, 27043, 11, 558, 13, 1743, 613, 366, 534, 1481, 13, 1042, 11, 291, 393, 1009, 3470, 300, 11, 51380], "temperature": 0.0, "avg_logprob": -0.13783188107647473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.008163517341017723}, {"id": 351, "seek": 234000, "start": 2360.32, "end": 2368.96, "text": " but this looks really nice. ZFS is slower or worse. BTRFS has some latency spikes that", "tokens": [51380, 457, 341, 1542, 534, 1481, 13, 1176, 29318, 307, 14009, 420, 5324, 13, 363, 25936, 29318, 575, 512, 27043, 28997, 300, 51812], "temperature": 0.0, "avg_logprob": -0.13783188107647473, "compression_ratio": 1.5520833333333333, "no_speech_prob": 0.008163517341017723}, {"id": 352, "seek": 236896, "start": 2369.04, "end": 2377.12, "text": " would cause a lot of trouble in production. Right. So, there was just like looking at the file", "tokens": [50368, 576, 3082, 257, 688, 295, 5253, 294, 4265, 13, 1779, 13, 407, 11, 456, 390, 445, 411, 1237, 412, 264, 3991, 50772], "temperature": 0.0, "avg_logprob": -0.11457784148468368, "compression_ratio": 1.658878504672897, "no_speech_prob": 0.003193034091964364}, {"id": 353, "seek": 236896, "start": 2377.12, "end": 2382.8, "text": " systems and with some basic tuning at the file system level. But there are also things that", "tokens": [50772, 3652, 293, 365, 512, 3875, 15164, 412, 264, 3991, 1185, 1496, 13, 583, 456, 366, 611, 721, 300, 51056], "temperature": 0.0, "avg_logprob": -0.11457784148468368, "compression_ratio": 1.658878504672897, "no_speech_prob": 0.003193034091964364}, {"id": 354, "seek": 236896, "start": 2383.6, "end": 2389.36, "text": " you could think about at the Postgres level. And the first level is, well,", "tokens": [51096, 291, 727, 519, 466, 412, 264, 10223, 45189, 1496, 13, 400, 264, 700, 1496, 307, 11, 731, 11, 51384], "temperature": 0.0, "avg_logprob": -0.11457784148468368, "compression_ratio": 1.658878504672897, "no_speech_prob": 0.003193034091964364}, {"id": 355, "seek": 236896, "start": 2391.92, "end": 2398.56, "text": " you need to be careful about, about filling the page cache. Right. Because what can happen in", "tokens": [51512, 291, 643, 281, 312, 5026, 466, 11, 466, 10623, 264, 3028, 19459, 13, 1779, 13, 1436, 437, 393, 1051, 294, 51844], "temperature": 0.0, "avg_logprob": -0.11457784148468368, "compression_ratio": 1.658878504672897, "no_speech_prob": 0.003193034091964364}, {"id": 356, "seek": 239856, "start": 2398.56, "end": 2404.4, "text": " Linux and with the default configuration can happen quite easily is that you accumulate a lot of", "tokens": [50364, 18734, 293, 365, 264, 7576, 11694, 393, 1051, 1596, 3612, 307, 300, 291, 33384, 257, 688, 295, 50656], "temperature": 0.0, "avg_logprob": -0.1193955421447754, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.006168158259242773}, {"id": 357, "seek": 239856, "start": 2405.36, "end": 2410.32, "text": " dirty data in the page cache because Postgres will just write stuff into the operating system and", "tokens": [50704, 9360, 1412, 294, 264, 3028, 19459, 570, 10223, 45189, 486, 445, 2464, 1507, 666, 264, 7447, 1185, 293, 50952], "temperature": 0.0, "avg_logprob": -0.1193955421447754, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.006168158259242773}, {"id": 358, "seek": 239856, "start": 2410.32, "end": 2417.44, "text": " then eventually call fsync. Right. And if you accumulate like 10% of the RAM in the, in the", "tokens": [50952, 550, 4728, 818, 283, 82, 34015, 13, 1779, 13, 400, 498, 291, 33384, 411, 1266, 4, 295, 264, 14561, 294, 264, 11, 294, 264, 51308], "temperature": 0.0, "avg_logprob": -0.1193955421447754, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.006168158259242773}, {"id": 359, "seek": 239856, "start": 2417.44, "end": 2424.7999999999997, "text": " page cache and then say, okay, write all these five gigabytes of data to disk at once that will", "tokens": [51308, 3028, 19459, 293, 550, 584, 11, 1392, 11, 2464, 439, 613, 1732, 42741, 295, 1412, 281, 12355, 412, 1564, 300, 486, 51676], "temperature": 0.0, "avg_logprob": -0.1193955421447754, "compression_ratio": 1.6118143459915613, "no_speech_prob": 0.006168158259242773}, {"id": 360, "seek": 242480, "start": 2424.8, "end": 2434.48, "text": " inevitably affect the, the user activity. Right. So, you need to be careful about, for example,", "tokens": [50364, 28171, 3345, 264, 11, 264, 4195, 5191, 13, 1779, 13, 407, 11, 291, 643, 281, 312, 5026, 466, 11, 337, 1365, 11, 50848], "temperature": 0.0, "avg_logprob": -0.12822914123535156, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.0025070123374462128}, {"id": 361, "seek": 242480, "start": 2435.1200000000003, "end": 2440.0800000000004, "text": " decreasing the background bytes. And I think I do have this here. This is", "tokens": [50880, 23223, 264, 3678, 36088, 13, 400, 286, 519, 286, 360, 362, 341, 510, 13, 639, 307, 51128], "temperature": 0.0, "avg_logprob": -0.12822914123535156, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.0025070123374462128}, {"id": 362, "seek": 242480, "start": 2441.36, "end": 2450.4, "text": " EXT4 with the default, default here, which I think is one gigabyte for, for this machine.", "tokens": [51192, 16385, 51, 19, 365, 264, 7576, 11, 7576, 510, 11, 597, 286, 519, 307, 472, 8741, 34529, 337, 11, 337, 341, 3479, 13, 51644], "temperature": 0.0, "avg_logprob": -0.12822914123535156, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.0025070123374462128}, {"id": 363, "seek": 245040, "start": 2451.36, "end": 2459.2000000000003, "text": " And this is the throughput for, if I decrease the, the dirty background bytes for 32 bytes,", "tokens": [50412, 400, 341, 307, 264, 44629, 337, 11, 498, 286, 11514, 264, 11, 264, 9360, 3678, 36088, 337, 8858, 36088, 11, 50804], "temperature": 0.0, "avg_logprob": -0.16708550582060944, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.011427785269916058}, {"id": 364, "seek": 245040, "start": 2459.76, "end": 2467.6800000000003, "text": " 32 megabytes. And you can see that it's much, much more consistent. Right. Because here the, the gray,", "tokens": [50832, 8858, 10816, 24538, 13, 400, 291, 393, 536, 300, 309, 311, 709, 11, 709, 544, 8398, 13, 1779, 13, 1436, 510, 264, 11, 264, 10855, 11, 51228], "temperature": 0.0, "avg_logprob": -0.16708550582060944, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.011427785269916058}, {"id": 365, "seek": 245040, "start": 2469.2000000000003, "end": 2477.12, "text": " gray chart is essentially like per second throughput. And the red one is like average over 15 seconds.", "tokens": [51304, 10855, 6927, 307, 4476, 411, 680, 1150, 44629, 13, 400, 264, 2182, 472, 307, 411, 4274, 670, 2119, 3949, 13, 51700], "temperature": 0.0, "avg_logprob": -0.16708550582060944, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.011427785269916058}, {"id": 366, "seek": 247712, "start": 2477.12, "end": 2482.16, "text": " Right. So it's like a smoothed out. And you can see that it's like almost the same throughput,", "tokens": [50364, 1779, 13, 407, 309, 311, 411, 257, 5508, 292, 484, 13, 400, 291, 393, 536, 300, 309, 311, 411, 1920, 264, 912, 44629, 11, 50616], "temperature": 0.0, "avg_logprob": -0.1356851598049732, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.0053351991809904575}, {"id": 367, "seek": 247712, "start": 2482.16, "end": 2488.24, "text": " but this is like much more variable. And for the latencies with 32 megabytes, sorry,", "tokens": [50616, 457, 341, 307, 411, 709, 544, 7006, 13, 400, 337, 264, 4465, 6464, 365, 8858, 10816, 24538, 11, 2597, 11, 50920], "temperature": 0.0, "avg_logprob": -0.1356851598049732, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.0053351991809904575}, {"id": 368, "seek": 247712, "start": 2488.24, "end": 2499.2799999999997, "text": " 32 megabytes, one gigabyte, it's the same, same thing. The decreasing the, decreasing the dirty", "tokens": [50920, 8858, 10816, 24538, 11, 472, 8741, 34529, 11, 309, 311, 264, 912, 11, 912, 551, 13, 440, 23223, 264, 11, 23223, 264, 9360, 51472], "temperature": 0.0, "avg_logprob": -0.1356851598049732, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.0053351991809904575}, {"id": 369, "seek": 247712, "start": 2499.2799999999997, "end": 2506.7999999999997, "text": " background bytes makes it much more consistent. Obviously, if it had just like benefits that", "tokens": [51472, 3678, 36088, 1669, 309, 709, 544, 8398, 13, 7580, 11, 498, 309, 632, 445, 411, 5311, 300, 51848], "temperature": 0.0, "avg_logprob": -0.1356851598049732, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.0053351991809904575}, {"id": 370, "seek": 250680, "start": 2506.88, "end": 2513.1200000000003, "text": " would be the default. Right. Unfortunately, if you decrease this, you kind of like reduce the", "tokens": [50368, 576, 312, 264, 7576, 13, 1779, 13, 8590, 11, 498, 291, 11514, 341, 11, 291, 733, 295, 411, 5407, 264, 50680], "temperature": 0.0, "avg_logprob": -0.1302764612600344, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.002913663163781166}, {"id": 371, "seek": 250680, "start": 2513.1200000000003, "end": 2520.1600000000003, "text": " throughput of the machine, of, of, of the system. Right. How much, I don't know, you need to test it.", "tokens": [50680, 44629, 295, 264, 3479, 11, 295, 11, 295, 11, 295, 264, 1185, 13, 1779, 13, 1012, 709, 11, 286, 500, 380, 458, 11, 291, 643, 281, 1500, 309, 13, 51032], "temperature": 0.0, "avg_logprob": -0.1302764612600344, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.002913663163781166}, {"id": 372, "seek": 250680, "start": 2520.8, "end": 2528.0, "text": " Right. Or I do plan to do the test. I don't have the numbers yet. But in this case, obviously,", "tokens": [51064, 1779, 13, 1610, 286, 360, 1393, 281, 360, 264, 1500, 13, 286, 500, 380, 362, 264, 3547, 1939, 13, 583, 294, 341, 1389, 11, 2745, 11, 51424], "temperature": 0.0, "avg_logprob": -0.1302764612600344, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.002913663163781166}, {"id": 373, "seek": 250680, "start": 2528.0, "end": 2535.6800000000003, "text": " the, the impact is like minimal. So that was one thing I want to talk about. Yeah. The other thing", "tokens": [51424, 264, 11, 264, 2712, 307, 411, 13206, 13, 407, 300, 390, 472, 551, 286, 528, 281, 751, 466, 13, 865, 13, 440, 661, 551, 51808], "temperature": 0.0, "avg_logprob": -0.1302764612600344, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.002913663163781166}, {"id": 374, "seek": 253568, "start": 2535.68, "end": 2540.3999999999996, "text": " I wanted to talk about is full page rights, which unfortunately something Postgres has to do.", "tokens": [50364, 286, 1415, 281, 751, 466, 307, 1577, 3028, 4601, 11, 597, 7015, 746, 10223, 45189, 575, 281, 360, 13, 50600], "temperature": 0.0, "avg_logprob": -0.159173560353507, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.01527388021349907}, {"id": 375, "seek": 253568, "start": 2540.3999999999996, "end": 2545.2799999999997, "text": " It means that after each checkpoint, the first change to the page will write the whole eight", "tokens": [50600, 467, 1355, 300, 934, 1184, 42269, 11, 264, 700, 1319, 281, 264, 3028, 486, 2464, 264, 1379, 3180, 50844], "temperature": 0.0, "avg_logprob": -0.159173560353507, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.01527388021349907}, {"id": 376, "seek": 253568, "start": 2545.2799999999997, "end": 2554.72, "text": " kilobyte into, into the transaction lock. The problem with that is that it inflates the amount of,", "tokens": [50844, 5128, 13944, 975, 666, 11, 666, 264, 14425, 4017, 13, 440, 1154, 365, 300, 307, 300, 309, 9922, 1024, 264, 2372, 295, 11, 51316], "temperature": 0.0, "avg_logprob": -0.159173560353507, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.01527388021349907}, {"id": 377, "seek": 253568, "start": 2554.72, "end": 2559.8399999999997, "text": " you know, data we write into transaction lock. And it can easily happen that you, you just,", "tokens": [51316, 291, 458, 11, 1412, 321, 2464, 666, 14425, 4017, 13, 400, 309, 393, 3612, 1051, 300, 291, 11, 291, 445, 11, 51572], "temperature": 0.0, "avg_logprob": -0.159173560353507, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.01527388021349907}, {"id": 378, "seek": 253568, "start": 2559.8399999999997, "end": 2565.2799999999997, "text": " by doing the full page rights, you hit the next checkpoint. Right. Because you write so much wall", "tokens": [51572, 538, 884, 264, 1577, 3028, 4601, 11, 291, 2045, 264, 958, 42269, 13, 1779, 13, 1436, 291, 2464, 370, 709, 2929, 51844], "temperature": 0.0, "avg_logprob": -0.159173560353507, "compression_ratio": 1.7210144927536233, "no_speech_prob": 0.01527388021349907}, {"id": 379, "seek": 256568, "start": 2565.7599999999998, "end": 2570.7999999999997, "text": " that you are required to do the next checkpoint. And it's like infinite loop. Right. So you will do", "tokens": [50368, 300, 291, 366, 4739, 281, 360, 264, 958, 42269, 13, 400, 309, 311, 411, 13785, 6367, 13, 1779, 13, 407, 291, 486, 360, 50620], "temperature": 0.0, "avg_logprob": -0.0961030133565267, "compression_ratio": 1.4816753926701571, "no_speech_prob": 0.004354365635663271}, {"id": 380, "seek": 256568, "start": 2570.7999999999997, "end": 2577.9199999999996, "text": " like a lot of full page rights. I do believe that ZFS actually allows you to disable this.", "tokens": [50620, 411, 257, 688, 295, 1577, 3028, 4601, 13, 286, 360, 1697, 300, 1176, 29318, 767, 4045, 291, 281, 28362, 341, 13, 50976], "temperature": 0.0, "avg_logprob": -0.0961030133565267, "compression_ratio": 1.4816753926701571, "no_speech_prob": 0.004354365635663271}, {"id": 381, "seek": 256568, "start": 2578.8799999999997, "end": 2589.04, "text": " Right. So in ZFS, you can actually optimize the Postgres to benefit from the feature of ZFS,", "tokens": [51024, 1779, 13, 407, 294, 1176, 29318, 11, 291, 393, 767, 19719, 264, 10223, 45189, 281, 5121, 490, 264, 4111, 295, 1176, 29318, 11, 51532], "temperature": 0.0, "avg_logprob": -0.0961030133565267, "compression_ratio": 1.4816753926701571, "no_speech_prob": 0.004354365635663271}, {"id": 382, "seek": 258904, "start": 2589.7599999999998, "end": 2599.6, "text": " which can be very beneficial. The problem with ZFS that I run into is that it's really difficult", "tokens": [50400, 597, 393, 312, 588, 14072, 13, 440, 1154, 365, 1176, 29318, 300, 286, 1190, 666, 307, 300, 309, 311, 534, 2252, 50892], "temperature": 0.0, "avg_logprob": -0.1897435677357209, "compression_ratio": 1.4824120603015076, "no_speech_prob": 0.013341962359845638}, {"id": 383, "seek": 258904, "start": 2599.6, "end": 2609.84, "text": " to configure prefetch like for, for sequential scans, for example. I mean like PGDOM, for example,", "tokens": [50892, 281, 22162, 18417, 7858, 411, 337, 11, 337, 42881, 35116, 11, 337, 1365, 13, 286, 914, 411, 40975, 35, 5251, 11, 337, 1365, 11, 51404], "temperature": 0.0, "avg_logprob": -0.1897435677357209, "compression_ratio": 1.4824120603015076, "no_speech_prob": 0.013341962359845638}, {"id": 384, "seek": 258904, "start": 2609.84, "end": 2616.4, "text": " if you do that on, on the database for me, it took like twice as long as on the other file systems.", "tokens": [51404, 498, 291, 360, 300, 322, 11, 322, 264, 8149, 337, 385, 11, 309, 1890, 411, 6091, 382, 938, 382, 322, 264, 661, 3991, 3652, 13, 51732], "temperature": 0.0, "avg_logprob": -0.1897435677357209, "compression_ratio": 1.4824120603015076, "no_speech_prob": 0.013341962359845638}, {"id": 385, "seek": 261640, "start": 2616.7200000000003, "end": 2625.6800000000003, "text": " Right. I'm, if there is a good way to enable prefetch on, on ZFS, I'd like to know about that.", "tokens": [50380, 1779, 13, 286, 478, 11, 498, 456, 307, 257, 665, 636, 281, 9528, 18417, 7858, 322, 11, 322, 1176, 29318, 11, 286, 1116, 411, 281, 458, 466, 300, 13, 50828], "temperature": 0.0, "avg_logprob": -0.1788241704305013, "compression_ratio": 1.411764705882353, "no_speech_prob": 0.0023104383144527674}, {"id": 386, "seek": 261640, "start": 2626.48, "end": 2634.88, "text": " But I found like, you know, 10 different options at different places in ZFS that should be configured.", "tokens": [50868, 583, 286, 1352, 411, 11, 291, 458, 11, 1266, 819, 3956, 412, 819, 3190, 294, 1176, 29318, 300, 820, 312, 30538, 13, 51288], "temperature": 0.0, "avg_logprob": -0.1788241704305013, "compression_ratio": 1.411764705882353, "no_speech_prob": 0.0023104383144527674}, {"id": 387, "seek": 261640, "start": 2634.88, "end": 2641.04, "text": " That's like very difficult for me. Right. So what about snapshots?", "tokens": [51288, 663, 311, 411, 588, 2252, 337, 385, 13, 1779, 13, 407, 437, 466, 19206, 27495, 30, 51596], "temperature": 0.0, "avg_logprob": -0.1788241704305013, "compression_ratio": 1.411764705882353, "no_speech_prob": 0.0023104383144527674}, {"id": 388, "seek": 264104, "start": 2641.52, "end": 2651.2799999999997, "text": " I mentioned that with snapshots, you would probably expect lower performance. Right. Because the,", "tokens": [50388, 286, 2835, 300, 365, 19206, 27495, 11, 291, 576, 1391, 2066, 3126, 3389, 13, 1779, 13, 1436, 264, 11, 50876], "temperature": 0.0, "avg_logprob": -0.16848946889241537, "compression_ratio": 1.4522613065326633, "no_speech_prob": 0.006278533488512039}, {"id": 389, "seek": 264104, "start": 2651.2799999999997, "end": 2657.04, "text": " the file system needs to do something else. Right. With ZFS and BTRFS, that's not really the case,", "tokens": [50876, 264, 3991, 1185, 2203, 281, 360, 746, 1646, 13, 1779, 13, 2022, 1176, 29318, 293, 363, 25936, 29318, 11, 300, 311, 406, 534, 264, 1389, 11, 51164], "temperature": 0.0, "avg_logprob": -0.16848946889241537, "compression_ratio": 1.4522613065326633, "no_speech_prob": 0.006278533488512039}, {"id": 390, "seek": 264104, "start": 2657.04, "end": 2663.7599999999998, "text": " because they do copy and write by default. So that's okay. But what is the impact of doing a", "tokens": [51164, 570, 436, 360, 5055, 293, 2464, 538, 7576, 13, 407, 300, 311, 1392, 13, 583, 437, 307, 264, 2712, 295, 884, 257, 51500], "temperature": 0.0, "avg_logprob": -0.16848946889241537, "compression_ratio": 1.4522613065326633, "no_speech_prob": 0.006278533488512039}, {"id": 391, "seek": 266376, "start": 2663.76, "end": 2678.0800000000004, "text": " snapshots on the EXT4 XFS in case you are using LVM? Well, these are, these are the results for", "tokens": [50364, 19206, 27495, 322, 264, 16385, 51, 19, 1783, 29318, 294, 1389, 291, 366, 1228, 441, 53, 44, 30, 1042, 11, 613, 366, 11, 613, 366, 264, 3542, 337, 51080], "temperature": 0.0, "avg_logprob": -0.1291973871343276, "compression_ratio": 1.3507462686567164, "no_speech_prob": 0.02111966907978058}, {"id": 392, "seek": 266376, "start": 2679.1200000000003, "end": 2688.7200000000003, "text": " EXT4 LVM snapshots, BTRFS with LVM, BTRFS when you do that natively in BTRFS, and ZFS", "tokens": [51132, 16385, 51, 19, 441, 53, 44, 19206, 27495, 11, 363, 25936, 29318, 365, 441, 53, 44, 11, 363, 25936, 29318, 562, 291, 360, 300, 8470, 356, 294, 363, 25936, 29318, 11, 293, 1176, 29318, 51612], "temperature": 0.0, "avg_logprob": -0.1291973871343276, "compression_ratio": 1.3507462686567164, "no_speech_prob": 0.02111966907978058}, {"id": 393, "seek": 268872, "start": 2689.52, "end": 2694.48, "text": " with native snapshots. Right. And you can immediately see that if you are doing snapshots,", "tokens": [50404, 365, 8470, 19206, 27495, 13, 1779, 13, 400, 291, 393, 4258, 536, 300, 498, 291, 366, 884, 19206, 27495, 11, 50652], "temperature": 0.0, "avg_logprob": -0.10023071147777417, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.009522935375571251}, {"id": 394, "seek": 268872, "start": 2695.9199999999996, "end": 2708.8799999999997, "text": " the, the ZFS and BTRFS can easily compete with the EXT4, which can only do that through LVM.", "tokens": [50724, 264, 11, 264, 1176, 29318, 293, 363, 25936, 29318, 393, 3612, 11831, 365, 264, 16385, 51, 19, 11, 597, 393, 787, 360, 300, 807, 441, 53, 44, 13, 51372], "temperature": 0.0, "avg_logprob": -0.10023071147777417, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.009522935375571251}, {"id": 395, "seek": 268872, "start": 2709.8399999999997, "end": 2715.3599999999997, "text": " So that's like, if you need snapshots, if you want to benefit from snapshots, if you are willing to", "tokens": [51420, 407, 300, 311, 411, 11, 498, 291, 643, 19206, 27495, 11, 498, 291, 528, 281, 5121, 490, 19206, 27495, 11, 498, 291, 366, 4950, 281, 51696], "temperature": 0.0, "avg_logprob": -0.10023071147777417, "compression_ratio": 1.5133689839572193, "no_speech_prob": 0.009522935375571251}, {"id": 396, "seek": 271536, "start": 2715.36, "end": 2722.96, "text": " pay for snapshots, then ZTRFS or BTRFS can actually do a pretty good job. Like at least as good as", "tokens": [50364, 1689, 337, 19206, 27495, 11, 550, 1176, 25936, 29318, 420, 363, 25936, 29318, 393, 767, 360, 257, 1238, 665, 1691, 13, 1743, 412, 1935, 382, 665, 382, 50744], "temperature": 0.0, "avg_logprob": -0.08069090726898938, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.011517954058945179}, {"id": 397, "seek": 271536, "start": 2724.2400000000002, "end": 2732.1600000000003, "text": " the traditional file systems. Of course, there's still the problem with latency. In this case,", "tokens": [50808, 264, 5164, 3991, 3652, 13, 2720, 1164, 11, 456, 311, 920, 264, 1154, 365, 27043, 13, 682, 341, 1389, 11, 51204], "temperature": 0.0, "avg_logprob": -0.08069090726898938, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.011517954058945179}, {"id": 398, "seek": 271536, "start": 2732.1600000000003, "end": 2741.44, "text": " once you start doing snapshots, snapshots on EXT4 and LVM, the latency gets much worse. And I would", "tokens": [51204, 1564, 291, 722, 884, 19206, 27495, 11, 19206, 27495, 322, 16385, 51, 19, 293, 441, 53, 44, 11, 264, 27043, 2170, 709, 5324, 13, 400, 286, 576, 51668], "temperature": 0.0, "avg_logprob": -0.08069090726898938, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.011517954058945179}, {"id": 399, "seek": 274144, "start": 2741.44, "end": 2751.12, "text": " even say that the latency of ZFS is better. It's more predictable. BTRFS is still a bit slower.", "tokens": [50364, 754, 584, 300, 264, 27043, 295, 1176, 29318, 307, 1101, 13, 467, 311, 544, 27737, 13, 363, 25936, 29318, 307, 920, 257, 857, 14009, 13, 50848], "temperature": 0.0, "avg_logprob": -0.10886673927307129, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.013264250010251999}, {"id": 400, "seek": 274144, "start": 2751.12, "end": 2759.04, "text": " Or like, obviously the latency is much worse. In all those charts, the scales are always the same", "tokens": [50848, 1610, 411, 11, 2745, 264, 27043, 307, 709, 5324, 13, 682, 439, 729, 17767, 11, 264, 17408, 366, 1009, 264, 912, 51244], "temperature": 0.0, "avg_logprob": -0.10886673927307129, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.013264250010251999}, {"id": 401, "seek": 274144, "start": 2759.04, "end": 2766.08, "text": " for all, you know, charts in the same row. So it's like easy to compare this. So you can see that", "tokens": [51244, 337, 439, 11, 291, 458, 11, 17767, 294, 264, 912, 5386, 13, 407, 309, 311, 411, 1858, 281, 6794, 341, 13, 407, 291, 393, 536, 300, 51596], "temperature": 0.0, "avg_logprob": -0.10886673927307129, "compression_ratio": 1.4923076923076923, "no_speech_prob": 0.013264250010251999}, {"id": 402, "seek": 276608, "start": 2766.16, "end": 2771.6, "text": " the 95 percentile, which is the, you know, the violet here, is much higher than here.", "tokens": [50368, 264, 13420, 3043, 794, 11, 597, 307, 264, 11, 291, 458, 11, 264, 46480, 510, 11, 307, 709, 2946, 813, 510, 13, 50640], "temperature": 0.0, "avg_logprob": -0.13686632181142833, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.0024977950379252434}, {"id": 403, "seek": 276608, "start": 2775.04, "end": 2783.52, "text": " So this is from a different machine from the large AMD. And you can see that, of course,", "tokens": [50812, 407, 341, 307, 490, 257, 819, 3479, 490, 264, 2416, 34808, 13, 400, 291, 393, 536, 300, 11, 295, 1164, 11, 51236], "temperature": 0.0, "avg_logprob": -0.13686632181142833, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.0024977950379252434}, {"id": 404, "seek": 276608, "start": 2784.96, "end": 2790.48, "text": " with, when you have like EXT4 with no snapshots, it's, it's really fast. Once you start doing", "tokens": [51308, 365, 11, 562, 291, 362, 411, 16385, 51, 19, 365, 572, 19206, 27495, 11, 309, 311, 11, 309, 311, 534, 2370, 13, 3443, 291, 722, 884, 51584], "temperature": 0.0, "avg_logprob": -0.13686632181142833, "compression_ratio": 1.425531914893617, "no_speech_prob": 0.0024977950379252434}, {"id": 405, "seek": 279048, "start": 2790.48, "end": 2797.28, "text": " snapshots on LVM, and by doing snapshots, I mean like having three snapshots at the same time.", "tokens": [50364, 19206, 27495, 322, 441, 53, 44, 11, 293, 538, 884, 19206, 27495, 11, 286, 914, 411, 1419, 1045, 19206, 27495, 412, 264, 912, 565, 13, 50704], "temperature": 0.0, "avg_logprob": -0.1006410772150213, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.013123895972967148}, {"id": 406, "seek": 279048, "start": 2797.28, "end": 2803.52, "text": " Right? So during the benchmarks, I just created like a snapshot every five minutes, and then", "tokens": [50704, 1779, 30, 407, 1830, 264, 43751, 11, 286, 445, 2942, 411, 257, 30163, 633, 1732, 2077, 11, 293, 550, 51016], "temperature": 0.0, "avg_logprob": -0.1006410772150213, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.013123895972967148}, {"id": 407, "seek": 279048, "start": 2803.52, "end": 2808.08, "text": " deleted the snapshot after 15 minutes. Right? So there are always like three snapshots at the", "tokens": [51016, 22981, 264, 30163, 934, 2119, 2077, 13, 1779, 30, 407, 456, 366, 1009, 411, 1045, 19206, 27495, 412, 264, 51244], "temperature": 0.0, "avg_logprob": -0.1006410772150213, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.013123895972967148}, {"id": 408, "seek": 279048, "start": 2808.08, "end": 2815.2, "text": " same time. You can see that this is like a massive impact on EXT4. And I'm not sure if you are", "tokens": [51244, 912, 565, 13, 509, 393, 536, 300, 341, 307, 411, 257, 5994, 2712, 322, 16385, 51, 19, 13, 400, 286, 478, 406, 988, 498, 291, 366, 51600], "temperature": 0.0, "avg_logprob": -0.1006410772150213, "compression_ratio": 1.7168949771689497, "no_speech_prob": 0.013123895972967148}, {"id": 409, "seek": 281520, "start": 2815.2, "end": 2824.8799999999997, "text": " willing to pay for that. And then, of course, like, BTRFS is better. ZFS, sorry, this is BTRFS", "tokens": [50364, 4950, 281, 1689, 337, 300, 13, 400, 550, 11, 295, 1164, 11, 411, 11, 363, 25936, 29318, 307, 1101, 13, 1176, 29318, 11, 2597, 11, 341, 307, 363, 25936, 29318, 50848], "temperature": 0.0, "avg_logprob": -0.1685727165966499, "compression_ratio": 1.5051020408163265, "no_speech_prob": 0.015496693551540375}, {"id": 410, "seek": 281520, "start": 2824.8799999999997, "end": 2829.68, "text": " with no snapshots with snapshots. And there is like no difference here, right, between those charts.", "tokens": [50848, 365, 572, 19206, 27495, 365, 19206, 27495, 13, 400, 456, 307, 411, 572, 2649, 510, 11, 558, 11, 1296, 729, 17767, 13, 51088], "temperature": 0.0, "avg_logprob": -0.1685727165966499, "compression_ratio": 1.5051020408163265, "no_speech_prob": 0.015496693551540375}, {"id": 411, "seek": 281520, "start": 2830.3999999999996, "end": 2838.64, "text": " So which is great. That's exactly what we expect from, from those file systems. And just to compare", "tokens": [51124, 407, 597, 307, 869, 13, 663, 311, 2293, 437, 321, 2066, 490, 11, 490, 729, 3991, 3652, 13, 400, 445, 281, 6794, 51536], "temperature": 0.0, "avg_logprob": -0.1685727165966499, "compression_ratio": 1.5051020408163265, "no_speech_prob": 0.015496693551540375}, {"id": 412, "seek": 283864, "start": 2838.64, "end": 2846.08, "text": " BTRFS and ZFS, again, ZFS no snapshots, ZFS snapshots. You can see there's like almost no", "tokens": [50364, 363, 25936, 29318, 293, 1176, 29318, 11, 797, 11, 1176, 29318, 572, 19206, 27495, 11, 1176, 29318, 19206, 27495, 13, 509, 393, 536, 456, 311, 411, 1920, 572, 50736], "temperature": 0.0, "avg_logprob": -0.13559261121247945, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.012513439171016216}, {"id": 413, "seek": 283864, "start": 2846.08, "end": 2853.04, "text": " difference when you enable and start doing snapshots, which is great. Exactly what we expect from", "tokens": [50736, 2649, 562, 291, 9528, 293, 722, 884, 19206, 27495, 11, 597, 307, 869, 13, 7587, 437, 321, 2066, 490, 51084], "temperature": 0.0, "avg_logprob": -0.13559261121247945, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.012513439171016216}, {"id": 414, "seek": 283864, "start": 2853.68, "end": 2862.0, "text": " copy and write file system. But the comparison between BTRFS and ZFS is pretty clear, especially", "tokens": [51116, 5055, 293, 2464, 3991, 1185, 13, 583, 264, 9660, 1296, 363, 25936, 29318, 293, 1176, 29318, 307, 1238, 1850, 11, 2318, 51532], "temperature": 0.0, "avg_logprob": -0.13559261121247945, "compression_ratio": 1.4791666666666667, "no_speech_prob": 0.012513439171016216}, {"id": 415, "seek": 286200, "start": 2862.0, "end": 2874.96, "text": " for this scale, for example. So this is one of the reasons why I'm more like a favor, a fan of ZFS.", "tokens": [50364, 337, 341, 4373, 11, 337, 1365, 13, 407, 341, 307, 472, 295, 264, 4112, 983, 286, 478, 544, 411, 257, 2294, 11, 257, 3429, 295, 1176, 29318, 13, 51012], "temperature": 0.0, "avg_logprob": -0.14420371220029635, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.011670109815895557}, {"id": 416, "seek": 286200, "start": 2876.16, "end": 2884.32, "text": " So that's all I wanted to say today. If you want, you can find all the results, all the charts on", "tokens": [51072, 407, 300, 311, 439, 286, 1415, 281, 584, 965, 13, 759, 291, 528, 11, 291, 393, 915, 439, 264, 3542, 11, 439, 264, 17767, 322, 51480], "temperature": 0.0, "avg_logprob": -0.14420371220029635, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.011670109815895557}, {"id": 417, "seek": 286200, "start": 2884.32, "end": 2891.92, "text": " GitHub. If you want the source data, or if you want the, the scripts that I used, I am very open to", "tokens": [51480, 23331, 13, 759, 291, 528, 264, 4009, 1412, 11, 420, 498, 291, 528, 264, 11, 264, 23294, 300, 286, 1143, 11, 286, 669, 588, 1269, 281, 51860], "temperature": 0.0, "avg_logprob": -0.14420371220029635, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.011670109815895557}, {"id": 418, "seek": 289192, "start": 2891.92, "end": 2899.12, "text": " just providing them. I have no problem with that. It's multiple gigabytes of data. So that's why I", "tokens": [50364, 445, 6530, 552, 13, 286, 362, 572, 1154, 365, 300, 13, 467, 311, 3866, 42741, 295, 1412, 13, 407, 300, 311, 983, 286, 50724], "temperature": 0.0, "avg_logprob": -0.07654221434342234, "compression_ratio": 1.44, "no_speech_prob": 0.006772966124117374}, {"id": 419, "seek": 289192, "start": 2899.12, "end": 2904.8, "text": " didn't put it on, on GitHub. But I'm still going to do more benchmarks. I will publish it there.", "tokens": [50724, 994, 380, 829, 309, 322, 11, 322, 23331, 13, 583, 286, 478, 920, 516, 281, 360, 544, 43751, 13, 286, 486, 11374, 309, 456, 13, 51008], "temperature": 0.0, "avg_logprob": -0.07654221434342234, "compression_ratio": 1.44, "no_speech_prob": 0.006772966124117374}, {"id": 420, "seek": 289192, "start": 2905.76, "end": 2914.0, "text": " If you want to look at a very interesting paper, which I think explains a lot about like the", "tokens": [51056, 759, 291, 528, 281, 574, 412, 257, 588, 1880, 3035, 11, 597, 286, 519, 13948, 257, 688, 466, 411, 264, 51468], "temperature": 0.0, "avg_logprob": -0.07654221434342234, "compression_ratio": 1.44, "no_speech_prob": 0.006772966124117374}, {"id": 421, "seek": 291400, "start": 2914.0, "end": 2920.64, "text": " challenges, how actually we need to saturate NVME storage. There is a very nice paper", "tokens": [50364, 4759, 11, 577, 767, 321, 643, 281, 21160, 473, 46512, 15454, 6725, 13, 821, 307, 257, 588, 1481, 3035, 50696], "temperature": 0.0, "avg_logprob": -0.16614659996919853, "compression_ratio": 1.1732283464566928, "no_speech_prob": 0.058685775846242905}, {"id": 422, "seek": 291400, "start": 2921.92, "end": 2928.8, "text": " from VLDB. I highly recommend it. And yeah, I think that's all.", "tokens": [50760, 490, 691, 23704, 33, 13, 286, 5405, 2748, 309, 13, 400, 1338, 11, 286, 519, 300, 311, 439, 13, 51104], "temperature": 0.0, "avg_logprob": -0.16614659996919853, "compression_ratio": 1.1732283464566928, "no_speech_prob": 0.058685775846242905}], "language": "en"}