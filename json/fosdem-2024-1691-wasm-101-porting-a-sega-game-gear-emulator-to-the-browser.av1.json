{"text": " So we have Anis Astier is going to tell us about the Wazem 101 which is very nice to put in. Thank you very much. Thank you. Thank you. A quick presentation. My name is Anis. This is not my first talk. This is my first time here in the Rust Dev Room. You can find my social media here. Follow me if you want. I've been learning Rust for five years on and off. I wanted a bigger project to learn a bit more about Rust. I said why not write an emulator. I started this project. This is a Game Gear emulator. The Game Gear is this small device. I don't know if you've ever heard of the Game Gear. So yeah, it's a Sega handheld from the 1990s. So this is the name of my emulator. Gears you can see. It's written in Rust. It depends only on the standard library. It has a native UI. This is how it looks like. It works. After I developed this native UI, I thought maybe I should port it to the web. To do that, I would need to use WebAssembly. So quick show of hands. Who here has never heard of WebAssembly? It's interesting. Who here has heard of WebAssembly but never used it? Who here has heard of WebAssembly but never used it and developed things with it? Oh, many people. Okay, quite interesting. So WebAssembly is a kind of a new platform. You can think of it as a new platform, a new to port code. It defines the text by code format. It's a take on the Java Compile 1, so whatever your system. It works in the browser where it's as secure as JavaScript, it's sandbox. It also has many other use cases. You can work on servers. You can use it in fast. It has many use cases. So I want to port my emulator. So there's this first level which is how do I build my code? How do I compile it? So let's go through this journey. How do you compile WebAssembly? I assume you know about Rust, but if you don't, usually you install Rust with this tool called RustUp. You need to add a new target with RustUp. Then you also need this tool called WasmbineGen which will bridge your WebAssembly code with the JavaScript world and generate some things. Use RustUp. You use WasmbineGen to build your code with the new target and then you use WasmbineGen to generate a directory with JavaScript. You serve that with an HTTP browser and that's how it works. You don't have to use WasmbineGen directly. You can use tools that integrate WasmbineGen and call it. There are many such tools that have selected a few. Wasm Server Runner. It comes from the baby community. You have Cargo Run Rasm. You have Trunk which is even higher level and Wasm Pack which is from the Rust Wasm project. I won't go into the details. You can find the comments on how to run them here. I did a quick comparison of those tools from let's say the lowest level tools to the highest levels. WasmineGen, everyone uses it. It's like the reference tool. Then you have a bit higher level tools and then more open-united tools like Wasm Pack and Trunk. Wasm Pack will generally be used to generate libraries that you can use from the JavaScript world whether with NPM for example. Trunk will integrate even more things like compress your HTML assets and things like that. You know how to build. How do you run the code? You usually write a binary. You have a main function and the entry point of your main is how it works. Or you can build a library and usually you annotate your entry point with WasmineGen macro start and you say, okay, this function is my entry point. You start executing from here. We know how to compile. Let's continue porting our application and go to the second level of porting the emulator. This emulator I've written called Gears for the desktop UI. I only selected dependencies that work with WebAssembly. So the whole wasmineGen wasmineGen was capable. They work with the web platform. Have pixels, WinIt, simple, Giller-S which is for gamepads. We'll go deeper into that. They all support WebAssembly. How hard can it be? It should be very simple. Well, it depends. For pixels and WinIt, pixels is a library to make a front buffer, basically a front buffer library that's GPU accelerated. So you can write pixels to coordinate and then it will run that with WGPU. Pixels use WGPU. It's another great to do the rendering. In order to work on the web, you need to enable the WebCR feature of WGPU. In the future, it will also use WebGPU, but that's another subject. The initialization of pixels is also different because it uses WinIt and WinIt needs to be initialized differently if you want to render your UI in canvas in the browser. Last but not least, the initialization of WGPU is Async. So in my emulator, I never used Rust Async. I needed to add that. So I used WebAssembly. Gen features to bridge the Async world from Rust to JavaScript promises. To part the audio part, I'm going to use the WGPU. I'm going to use the CIPL create, which also works on the web. This is a reference create to play audio. It needs to create feature as well. There were also some challenges because maybe nature started directly and if you use a browser, you can't start playing audio directly. That's actually a good thing because it means you can't play audio on anyone's browser without interaction. So you need to have interaction. The user wanted to do this action. Another issue I had with the standard library is I used NPSC channels and they don't work on the web platform. So I wrote a quick channel myself because it was in the core. There are other channels that work on the web platform. But I prefer to implement something with no other dependencies. For time, usually for synchronization in an emulator, you need to know about the current time. Just like for the channels, in the standard libraries, the time API are not available on the web platform. So there are crates that do the bridge. I used the instant crates. You can also use web time, which also works. This is the code, the use code if it's for the was 32 target using instant, if not, use the standard import. For Gil arrest, which was very nice, there was no action needed in order to support working the browser. Everything worked out of the box except the gamepad API, I would say, on browser is not as much much mature as on native. So there is some rebinding to do. There are good reasons for that. For example, browser don't want you to be able to fingerprint someone with the gamepad API, but then it means the bindings are not mature enough. Not the bindings, but the key bindings, which is something else. And then during porting, I also had bugs that were entirely my fault. I used a bit to turn it into a huge bit, but I didn't use it too much. I used to make it too much new size, mostly because I like to index slices. That's what you need to do in the slices. Wasp 32, as it says in the name, is a 32 bit platform. So I had overflows when I had multiplication, additions, it grew bigger than 32 bits. All these were codes because in my project, in my cargo project, I had a lot of defaults in Rust. And yeah, it worked well. I just replaced new size with 64 when it did. And that's it. So let's take a quick break and let's go through a demo of what it looks like. So just for first then, brought to you again, which is this one, I will lend it to you for a few minutes. It's for them exclusive. I recommend you play this demo on, not necessarily on mobile, it will work, but you won't be able to control it. So maybe more on desktop browser or anything that has a keyboard or gamepad controller. So I'll let you a bit more time to load it. It might not work for you if you don't have WebGL enabled on your browser, but otherwise it should. If you have Firefox or Chrome, here's how it looks like. So I've loaded the page, it's play, and basically the emulator starts. If you have audio, it will play audio. And yeah, this is what you should see. Okay, yeah, it works. I can play it. Who here successfully runs the demo? Just a quick show of hands who managed to run it. Okay, thanks. Okay, let's continue. So we have this porting. Okay, mostly worked. I showed you. It worked. There were a few tricks, I picked along the way. There's not mandatory, but let's see what we have here. First thing, if you're used to debugging like me with println, you print code on terminal, it probably won't work as is on the browser, so you want to use the Web console. There's this console log crate which does the binding of the console. If you use the log crate, it's really well integrated with the log levels and things like that. I also recommend that you use the console error panic hook crate. This one helps show when your program crashes, for example, I showed you the overflow checks it can panic. It will show you basically the panic in the console. That's how you register a console panic hook. Another trick I picked along the way is the cargo config. For this demo, I showed you, there's a bit of a problem with some interactions. Some API I use, which I use directly from Rust, and I use the Web Cyscrate, which allows accessing those APIs for this demo. In order to be able to access those APIs, which they are considered unstable, and you need to add an environment variable when you build, which is a bit annoying to add every time. You can add this Rust flags directly in your cargo config.tamo. This way you can build with cargo builds. It will work. Another trick if you use to having VS code or integrated development environments, you probably are using Rust analyzer. If you have code that works on multiple platforms like me for the native, there's WebAssembly, you probably want to tell Rust analyzer to build as a tool. You can do two different architecture. This way you have completion on the WebAssembly part. This is done as well in the cargo config.tamo by specifying multiple build targets. When you build it, you will have multiple build targets. There are some drawbacks for that. It won't work with the workspace member. It must be at the root of your workspace. It also means that when you use cargo run, since you have multiple targets, cargo run will say, oh, no, you have to pick one target in order to run, which makes sense. It can be a bit annoying. So let's go with what did I think of this experience of putting this emulation. What's my feedback? I would say in general it's very easy to port standalone code to WebAssembly if you're using Rust. I did not change anything in my app's architecture. The total port took a few hours over a few days. As I told you, I did custom code for initialization, which is I think, and for DOM interaction, which is the demo you've seen. To go a bit further, what I won't talk about in this talk is how to build a web UI, for example. You probably want to use U or Laptos because I don't recommend accessing DOM APIs directly. This is very ugly, not really ergonomic. I did it so you don't have to try. Those library developers do a great job to do that. I didn't try building a complete UI. As you saw, nothing is configurable, etc. I'm thinking of building a UI with slints or a GUI, but I'm not really satisfied with the current status of font rendering. I know it's something that's being worked on. Just like as well, minification in web size is not web-specific. There are many Rust tutorials you can find on minification, and I didn't do any performance measurement. I can tell you that it works. It also works on native. But I don't have any special feedback for that. That's it for my presentation. Thank you. We have a question. Yes, I have a question. When you build websites today, they have to be responsive. You use media queries in CSS style sheets to adopt to different kinds of resolution so that on the mobile tablet or desktop, it still looks nice. Can you also do this in web assembly that you would say if I run the game in portrait or landscape mode, or if I do it on a bigger screen, that it takes care of the resolution? Will it also scale the graphics accordingly? There are multiple aspects to that. If you're building a web UI, you probably do that with CSS. If you use leptos or you, you will be able to generate HTML whether on the server or on the client. Then it's basically the same thing as web development. You have CSS, you scan this HTML directly. For this demo, this is an emulator. It's a bit specific, especially because it's a full-screen application. So basically it takes the whole width of your screen, and that's it. That's how it works on mobile and tablets and desktops. But it's not that you can combine those and that you can also do something in JavaScript or CSS. You can do that. You can find tutorials on the Rust-Waston book. You can look at the Rust-Waston guide and on the Rust-Waston project, which is this URL. You can find information on how to bridge the two worlds. If you decide to use a crate, as I recommend, like you or leptos, they also have a lot of documentation on how to do that. I understand. Maybe a general question. Why did you choose Rust? Did you also consider programming in C++? Or are there any advantages of using Rust compared to C++? That's a great question. It was actually covered in other talks, but usually I like using Rust because it's a very nice language. It has nice ergonomics. It's fast and native. It has more safety guarantees than C++. A great ecosystem. Thank you. You're welcome. Any other questions? I'm curious what your main loop looks like. Do you spend all the time polling for events? Do you get called back from the browser? Does the browser hang if you never sleep? That's a good question. I did not modify my main loop, but mostly because I used Winit. I used a Winit event loop. This is specific to the Winit crate. Nothing was modified in the main loop. It spins. I don't remember how many times, but basically the length of a frame every time, and then it gets refreshed. Yeah, that's it. And that's all the time we have. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " So we have Anis Astier is going to tell us about the Wazem 101 which is very nice to", "tokens": [50364, 407, 321, 362, 1107, 271, 12884, 811, 307, 516, 281, 980, 505, 466, 264, 343, 921, 443, 21055, 597, 307, 588, 1481, 281, 50714], "temperature": 0.0, "avg_logprob": -0.47730999608193675, "compression_ratio": 1.3862068965517242, "no_speech_prob": 0.5398342609405518}, {"id": 1, "seek": 0, "start": 12.52, "end": 17.52, "text": " put in. Thank you very much.", "tokens": [50990, 829, 294, 13, 1044, 291, 588, 709, 13, 51240], "temperature": 0.0, "avg_logprob": -0.47730999608193675, "compression_ratio": 1.3862068965517242, "no_speech_prob": 0.5398342609405518}, {"id": 2, "seek": 0, "start": 17.52, "end": 24.52, "text": " Thank you. Thank you. A quick presentation. My name is Anis. This is not my first talk.", "tokens": [51240, 1044, 291, 13, 1044, 291, 13, 316, 1702, 5860, 13, 1222, 1315, 307, 1107, 271, 13, 639, 307, 406, 452, 700, 751, 13, 51590], "temperature": 0.0, "avg_logprob": -0.47730999608193675, "compression_ratio": 1.3862068965517242, "no_speech_prob": 0.5398342609405518}, {"id": 3, "seek": 2452, "start": 25.52, "end": 32.519999999999996, "text": " This is my first time here in the Rust Dev Room. You can find my social media here.", "tokens": [50414, 639, 307, 452, 700, 565, 510, 294, 264, 34952, 9096, 19190, 13, 509, 393, 915, 452, 2093, 3021, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.28947691236223494, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.5652491450309753}, {"id": 4, "seek": 2452, "start": 33.12, "end": 40.12, "text": " Follow me if you want. I've been learning Rust for five years on and off. I wanted a", "tokens": [50794, 9876, 385, 498, 291, 528, 13, 286, 600, 668, 2539, 34952, 337, 1732, 924, 322, 293, 766, 13, 286, 1415, 257, 51144], "temperature": 0.0, "avg_logprob": -0.28947691236223494, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.5652491450309753}, {"id": 5, "seek": 2452, "start": 42.72, "end": 49.239999999999995, "text": " bigger project to learn a bit more about Rust. I said why not write an emulator. I started", "tokens": [51274, 3801, 1716, 281, 1466, 257, 857, 544, 466, 34952, 13, 286, 848, 983, 406, 2464, 364, 846, 16381, 13, 286, 1409, 51600], "temperature": 0.0, "avg_logprob": -0.28947691236223494, "compression_ratio": 1.463276836158192, "no_speech_prob": 0.5652491450309753}, {"id": 6, "seek": 4924, "start": 49.24, "end": 56.24, "text": " this project. This is a Game Gear emulator. The Game Gear is this small device. I don't", "tokens": [50364, 341, 1716, 13, 639, 307, 257, 7522, 26810, 846, 16381, 13, 440, 7522, 26810, 307, 341, 1359, 4302, 13, 286, 500, 380, 50714], "temperature": 0.0, "avg_logprob": -0.2502619669987605, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.15844431519508362}, {"id": 7, "seek": 4924, "start": 56.440000000000005, "end": 63.440000000000005, "text": " know if you've ever heard of the Game Gear. So yeah, it's a Sega handheld from the 1990s.", "tokens": [50724, 458, 498, 291, 600, 1562, 2198, 295, 264, 7522, 26810, 13, 407, 1338, 11, 309, 311, 257, 32114, 37634, 490, 264, 13384, 82, 13, 51074], "temperature": 0.0, "avg_logprob": -0.2502619669987605, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.15844431519508362}, {"id": 8, "seek": 4924, "start": 64.76, "end": 71.76, "text": " So this is the name of my emulator. Gears you can see. It's written in Rust. It depends", "tokens": [51140, 407, 341, 307, 264, 1315, 295, 452, 846, 16381, 13, 2876, 685, 291, 393, 536, 13, 467, 311, 3720, 294, 34952, 13, 467, 5946, 51490], "temperature": 0.0, "avg_logprob": -0.2502619669987605, "compression_ratio": 1.5317919075144508, "no_speech_prob": 0.15844431519508362}, {"id": 9, "seek": 7176, "start": 72.72, "end": 79.72, "text": " only on the standard library. It has a native UI. This is how it looks like. It works. After", "tokens": [50412, 787, 322, 264, 3832, 6405, 13, 467, 575, 257, 8470, 15682, 13, 639, 307, 577, 309, 1542, 411, 13, 467, 1985, 13, 2381, 50762], "temperature": 0.0, "avg_logprob": -0.28465048059240566, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.03149620071053505}, {"id": 10, "seek": 7176, "start": 86.04, "end": 92.24000000000001, "text": " I developed this native UI, I thought maybe I should port it to the web. To do that, I", "tokens": [51078, 286, 4743, 341, 8470, 15682, 11, 286, 1194, 1310, 286, 820, 2436, 309, 281, 264, 3670, 13, 1407, 360, 300, 11, 286, 51388], "temperature": 0.0, "avg_logprob": -0.28465048059240566, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.03149620071053505}, {"id": 11, "seek": 7176, "start": 92.24000000000001, "end": 99.24000000000001, "text": " would need to use WebAssembly. So quick show of hands. Who here has never heard of WebAssembly?", "tokens": [51388, 576, 643, 281, 764, 9573, 10884, 19160, 13, 407, 1702, 855, 295, 2377, 13, 2102, 510, 575, 1128, 2198, 295, 9573, 10884, 19160, 30, 51738], "temperature": 0.0, "avg_logprob": -0.28465048059240566, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.03149620071053505}, {"id": 12, "seek": 9924, "start": 100.24, "end": 107.24, "text": " It's interesting. Who here has heard of WebAssembly but never used it? Who here has heard of WebAssembly", "tokens": [50414, 467, 311, 1880, 13, 2102, 510, 575, 2198, 295, 9573, 10884, 19160, 457, 1128, 1143, 309, 30, 2102, 510, 575, 2198, 295, 9573, 10884, 19160, 50764], "temperature": 0.0, "avg_logprob": -0.26737213134765625, "compression_ratio": 1.7911392405063291, "no_speech_prob": 0.0025674516800791025}, {"id": 13, "seek": 9924, "start": 109.36, "end": 116.36, "text": " but never used it and developed things with it? Oh, many people. Okay, quite interesting.", "tokens": [50870, 457, 1128, 1143, 309, 293, 4743, 721, 365, 309, 30, 876, 11, 867, 561, 13, 1033, 11, 1596, 1880, 13, 51220], "temperature": 0.0, "avg_logprob": -0.26737213134765625, "compression_ratio": 1.7911392405063291, "no_speech_prob": 0.0025674516800791025}, {"id": 14, "seek": 9924, "start": 117.16, "end": 124.16, "text": " So WebAssembly is a kind of a new platform. You can think of it as a new platform, a new", "tokens": [51260, 407, 9573, 10884, 19160, 307, 257, 733, 295, 257, 777, 3663, 13, 509, 393, 519, 295, 309, 382, 257, 777, 3663, 11, 257, 777, 51610], "temperature": 0.0, "avg_logprob": -0.26737213134765625, "compression_ratio": 1.7911392405063291, "no_speech_prob": 0.0025674516800791025}, {"id": 15, "seek": 12416, "start": 124.44, "end": 131.44, "text": " to port code. It defines the text by code format. It's a take on the Java Compile 1, so", "tokens": [50378, 281, 2436, 3089, 13, 467, 23122, 264, 2487, 538, 3089, 7877, 13, 467, 311, 257, 747, 322, 264, 10745, 6620, 794, 502, 11, 370, 50728], "temperature": 0.0, "avg_logprob": -0.4432593790690104, "compression_ratio": 1.5197740112994351, "no_speech_prob": 0.02080559730529785}, {"id": 16, "seek": 12416, "start": 131.44, "end": 138.44, "text": " whatever your system. It works in the browser where it's as secure as JavaScript, it's sandbox.", "tokens": [50728, 2035, 428, 1185, 13, 467, 1985, 294, 264, 11185, 689, 309, 311, 382, 7144, 382, 15778, 11, 309, 311, 42115, 13, 51078], "temperature": 0.0, "avg_logprob": -0.4432593790690104, "compression_ratio": 1.5197740112994351, "no_speech_prob": 0.02080559730529785}, {"id": 17, "seek": 12416, "start": 141.28, "end": 148.28, "text": " It also has many other use cases. You can work on servers. You can use it in fast. It", "tokens": [51220, 467, 611, 575, 867, 661, 764, 3331, 13, 509, 393, 589, 322, 15909, 13, 509, 393, 764, 309, 294, 2370, 13, 467, 51570], "temperature": 0.0, "avg_logprob": -0.4432593790690104, "compression_ratio": 1.5197740112994351, "no_speech_prob": 0.02080559730529785}, {"id": 18, "seek": 14828, "start": 149.28, "end": 156.28, "text": " has many use cases. So I want to port my emulator. So there's this first level which is how do", "tokens": [50414, 575, 867, 764, 3331, 13, 407, 286, 528, 281, 2436, 452, 846, 16381, 13, 407, 456, 311, 341, 700, 1496, 597, 307, 577, 360, 50764], "temperature": 0.0, "avg_logprob": -0.18641706466674804, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.004820454865694046}, {"id": 19, "seek": 14828, "start": 156.68, "end": 163.68, "text": " I build my code? How do I compile it? So let's go through this journey. How do you compile", "tokens": [50784, 286, 1322, 452, 3089, 30, 1012, 360, 286, 31413, 309, 30, 407, 718, 311, 352, 807, 341, 4671, 13, 1012, 360, 291, 31413, 51134], "temperature": 0.0, "avg_logprob": -0.18641706466674804, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.004820454865694046}, {"id": 20, "seek": 14828, "start": 164.64, "end": 170.52, "text": " WebAssembly? I assume you know about Rust, but if you don't, usually you install Rust with", "tokens": [51182, 9573, 10884, 19160, 30, 286, 6552, 291, 458, 466, 34952, 11, 457, 498, 291, 500, 380, 11, 2673, 291, 3625, 34952, 365, 51476], "temperature": 0.0, "avg_logprob": -0.18641706466674804, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.004820454865694046}, {"id": 21, "seek": 14828, "start": 170.52, "end": 177.52, "text": " this tool called RustUp. You need to add a new target with RustUp. Then you also need", "tokens": [51476, 341, 2290, 1219, 34952, 22164, 13, 509, 643, 281, 909, 257, 777, 3779, 365, 34952, 22164, 13, 1396, 291, 611, 643, 51826], "temperature": 0.0, "avg_logprob": -0.18641706466674804, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.004820454865694046}, {"id": 22, "seek": 17752, "start": 177.64000000000001, "end": 184.16000000000003, "text": " this tool called WasmbineGen which will bridge your WebAssembly code with the JavaScript world", "tokens": [50370, 341, 2290, 1219, 3027, 2504, 533, 26647, 597, 486, 7283, 428, 9573, 10884, 19160, 3089, 365, 264, 15778, 1002, 50696], "temperature": 0.0, "avg_logprob": -0.21153357788756655, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.004504102282226086}, {"id": 23, "seek": 17752, "start": 184.16000000000003, "end": 191.16000000000003, "text": " and generate some things. Use RustUp. You use WasmbineGen to build your code with the", "tokens": [50696, 293, 8460, 512, 721, 13, 8278, 34952, 22164, 13, 509, 764, 3027, 2504, 533, 26647, 281, 1322, 428, 3089, 365, 264, 51046], "temperature": 0.0, "avg_logprob": -0.21153357788756655, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.004504102282226086}, {"id": 24, "seek": 17752, "start": 191.68, "end": 197.08, "text": " new target and then you use WasmbineGen to generate a directory with JavaScript. You", "tokens": [51072, 777, 3779, 293, 550, 291, 764, 3027, 2504, 533, 26647, 281, 8460, 257, 21120, 365, 15778, 13, 509, 51342], "temperature": 0.0, "avg_logprob": -0.21153357788756655, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.004504102282226086}, {"id": 25, "seek": 17752, "start": 197.08, "end": 204.08, "text": " serve that with an HTTP browser and that's how it works. You don't have to use WasmbineGen", "tokens": [51342, 4596, 300, 365, 364, 33283, 11185, 293, 300, 311, 577, 309, 1985, 13, 509, 500, 380, 362, 281, 764, 3027, 2504, 533, 26647, 51692], "temperature": 0.0, "avg_logprob": -0.21153357788756655, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.004504102282226086}, {"id": 26, "seek": 20408, "start": 204.08, "end": 211.08, "text": " directly. You can use tools that integrate WasmbineGen and call it. There are many such", "tokens": [50364, 3838, 13, 509, 393, 764, 3873, 300, 13365, 3027, 2504, 533, 26647, 293, 818, 309, 13, 821, 366, 867, 1270, 50714], "temperature": 0.0, "avg_logprob": -0.2580423252556914, "compression_ratio": 1.608294930875576, "no_speech_prob": 0.019425243139266968}, {"id": 27, "seek": 20408, "start": 212.08, "end": 217.64000000000001, "text": " tools that have selected a few. Wasm Server Runner. It comes from the baby community. You", "tokens": [50764, 3873, 300, 362, 8209, 257, 1326, 13, 3027, 76, 25684, 50105, 13, 467, 1487, 490, 264, 3186, 1768, 13, 509, 51042], "temperature": 0.0, "avg_logprob": -0.2580423252556914, "compression_ratio": 1.608294930875576, "no_speech_prob": 0.019425243139266968}, {"id": 28, "seek": 20408, "start": 217.64000000000001, "end": 223.56, "text": " have Cargo Run Rasm. You have Trunk which is even higher level and Wasm Pack which is", "tokens": [51042, 362, 2741, 1571, 8950, 497, 14774, 13, 509, 362, 1765, 3197, 597, 307, 754, 2946, 1496, 293, 3027, 76, 18466, 597, 307, 51338], "temperature": 0.0, "avg_logprob": -0.2580423252556914, "compression_ratio": 1.608294930875576, "no_speech_prob": 0.019425243139266968}, {"id": 29, "seek": 20408, "start": 223.56, "end": 227.76000000000002, "text": " from the Rust Wasm project. I won't go into the details. You can find the comments on", "tokens": [51338, 490, 264, 34952, 3027, 76, 1716, 13, 286, 1582, 380, 352, 666, 264, 4365, 13, 509, 393, 915, 264, 3053, 322, 51548], "temperature": 0.0, "avg_logprob": -0.2580423252556914, "compression_ratio": 1.608294930875576, "no_speech_prob": 0.019425243139266968}, {"id": 30, "seek": 22776, "start": 227.84, "end": 234.84, "text": " how to run them here. I did a quick comparison of those tools from let's say the lowest level", "tokens": [50368, 577, 281, 1190, 552, 510, 13, 286, 630, 257, 1702, 9660, 295, 729, 3873, 490, 718, 311, 584, 264, 12437, 1496, 50718], "temperature": 0.0, "avg_logprob": -0.23362959755791557, "compression_ratio": 1.5280898876404494, "no_speech_prob": 0.096059150993824}, {"id": 31, "seek": 22776, "start": 235.51999999999998, "end": 242.51999999999998, "text": " tools to the highest levels. WasmineGen, everyone uses it. It's like the reference tool. Then", "tokens": [50752, 3873, 281, 264, 6343, 4358, 13, 3027, 76, 533, 26647, 11, 1518, 4960, 309, 13, 467, 311, 411, 264, 6408, 2290, 13, 1396, 51102], "temperature": 0.0, "avg_logprob": -0.23362959755791557, "compression_ratio": 1.5280898876404494, "no_speech_prob": 0.096059150993824}, {"id": 32, "seek": 22776, "start": 245.76, "end": 251.64, "text": " you have a bit higher level tools and then more open-united tools like Wasm Pack and", "tokens": [51264, 291, 362, 257, 857, 2946, 1496, 3873, 293, 550, 544, 1269, 12, 409, 1226, 3873, 411, 3027, 76, 18466, 293, 51558], "temperature": 0.0, "avg_logprob": -0.23362959755791557, "compression_ratio": 1.5280898876404494, "no_speech_prob": 0.096059150993824}, {"id": 33, "seek": 25164, "start": 251.72, "end": 258.24, "text": " Trunk. Wasm Pack will generally be used to generate libraries that you can use from the", "tokens": [50368, 1765, 3197, 13, 3027, 76, 18466, 486, 5101, 312, 1143, 281, 8460, 15148, 300, 291, 393, 764, 490, 264, 50694], "temperature": 0.0, "avg_logprob": -0.17914913361331067, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.014639400877058506}, {"id": 34, "seek": 25164, "start": 258.24, "end": 265.24, "text": " JavaScript world whether with NPM for example. Trunk will integrate even more things like", "tokens": [50694, 15778, 1002, 1968, 365, 426, 18819, 337, 1365, 13, 1765, 3197, 486, 13365, 754, 544, 721, 411, 51044], "temperature": 0.0, "avg_logprob": -0.17914913361331067, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.014639400877058506}, {"id": 35, "seek": 25164, "start": 266.36, "end": 273.36, "text": " compress your HTML assets and things like that. You know how to build. How do you run", "tokens": [51100, 14778, 428, 17995, 9769, 293, 721, 411, 300, 13, 509, 458, 577, 281, 1322, 13, 1012, 360, 291, 1190, 51450], "temperature": 0.0, "avg_logprob": -0.17914913361331067, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.014639400877058506}, {"id": 36, "seek": 25164, "start": 274.2, "end": 281.2, "text": " the code? You usually write a binary. You have a main function and the entry point of", "tokens": [51492, 264, 3089, 30, 509, 2673, 2464, 257, 17434, 13, 509, 362, 257, 2135, 2445, 293, 264, 8729, 935, 295, 51842], "temperature": 0.0, "avg_logprob": -0.17914913361331067, "compression_ratio": 1.517391304347826, "no_speech_prob": 0.014639400877058506}, {"id": 37, "seek": 28164, "start": 281.71999999999997, "end": 288.71999999999997, "text": " your main is how it works. Or you can build a library and usually you annotate your entry", "tokens": [50368, 428, 2135, 307, 577, 309, 1985, 13, 1610, 291, 393, 1322, 257, 6405, 293, 2673, 291, 25339, 473, 428, 8729, 50718], "temperature": 0.0, "avg_logprob": -0.2460198682897231, "compression_ratio": 1.4944444444444445, "no_speech_prob": 0.0033482289873063564}, {"id": 38, "seek": 28164, "start": 289.96, "end": 296.64, "text": " point with WasmineGen macro start and you say, okay, this function is my entry point.", "tokens": [50780, 935, 365, 3027, 76, 533, 26647, 18887, 722, 293, 291, 584, 11, 1392, 11, 341, 2445, 307, 452, 8729, 935, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2460198682897231, "compression_ratio": 1.4944444444444445, "no_speech_prob": 0.0033482289873063564}, {"id": 39, "seek": 28164, "start": 296.64, "end": 303.64, "text": " You start executing from here. We know how to compile. Let's continue porting our application", "tokens": [51114, 509, 722, 32368, 490, 510, 13, 492, 458, 577, 281, 31413, 13, 961, 311, 2354, 2436, 278, 527, 3861, 51464], "temperature": 0.0, "avg_logprob": -0.2460198682897231, "compression_ratio": 1.4944444444444445, "no_speech_prob": 0.0033482289873063564}, {"id": 40, "seek": 30364, "start": 304.64, "end": 311.64, "text": " and go to the second level of porting the emulator. This emulator I've written called Gears", "tokens": [50414, 293, 352, 281, 264, 1150, 1496, 295, 2436, 278, 264, 846, 16381, 13, 639, 846, 16381, 286, 600, 3720, 1219, 2876, 685, 50764], "temperature": 0.0, "avg_logprob": -0.46301931493422566, "compression_ratio": 1.3061224489795917, "no_speech_prob": 0.013058813288807869}, {"id": 41, "seek": 30364, "start": 319.64, "end": 326.64, "text": " for the desktop UI. I only selected dependencies that work with WebAssembly. So the whole wasmineGen", "tokens": [51164, 337, 264, 14502, 15682, 13, 286, 787, 8209, 36606, 300, 589, 365, 9573, 10884, 19160, 13, 407, 264, 1379, 390, 76, 533, 26647, 51514], "temperature": 0.0, "avg_logprob": -0.46301931493422566, "compression_ratio": 1.3061224489795917, "no_speech_prob": 0.013058813288807869}, {"id": 42, "seek": 32664, "start": 326.64, "end": 332.64, "text": " wasmineGen was capable. They work with the web platform. Have pixels, WinIt, simple,", "tokens": [50364, 390, 76, 533, 26647, 390, 8189, 13, 814, 589, 365, 264, 3670, 3663, 13, 3560, 18668, 11, 10427, 3522, 11, 2199, 11, 50664], "temperature": 0.0, "avg_logprob": -0.4952002269465749, "compression_ratio": 1.4381443298969072, "no_speech_prob": 0.024699414148926735}, {"id": 43, "seek": 32664, "start": 333.64, "end": 339.64, "text": " Giller-S which is for gamepads. We'll go deeper into that. They all support WebAssembly. How", "tokens": [50714, 460, 10497, 12, 50, 597, 307, 337, 1216, 79, 5834, 13, 492, 603, 352, 7731, 666, 300, 13, 814, 439, 1406, 9573, 10884, 19160, 13, 1012, 51014], "temperature": 0.0, "avg_logprob": -0.4952002269465749, "compression_ratio": 1.4381443298969072, "no_speech_prob": 0.024699414148926735}, {"id": 44, "seek": 32664, "start": 339.64, "end": 346.64, "text": " hard can it be? It should be very simple. Well, it depends. For pixels and WinIt, pixels is a library", "tokens": [51014, 1152, 393, 309, 312, 30, 467, 820, 312, 588, 2199, 13, 1042, 11, 309, 5946, 13, 1171, 18668, 293, 10427, 3522, 11, 18668, 307, 257, 6405, 51364], "temperature": 0.0, "avg_logprob": -0.4952002269465749, "compression_ratio": 1.4381443298969072, "no_speech_prob": 0.024699414148926735}, {"id": 45, "seek": 34664, "start": 347.64, "end": 354.64, "text": " to make a front buffer, basically a front buffer library that's GPU accelerated. So you can write pixels", "tokens": [50414, 281, 652, 257, 1868, 21762, 11, 1936, 257, 1868, 21762, 6405, 300, 311, 18407, 29763, 13, 407, 291, 393, 2464, 18668, 50764], "temperature": 0.0, "avg_logprob": -0.33101957184927805, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.008663303218781948}, {"id": 46, "seek": 34664, "start": 360.64, "end": 366.64, "text": " to coordinate and then it will run that with WGPU. Pixels use WGPU. It's another great to do the rendering.", "tokens": [51064, 281, 15670, 293, 550, 309, 486, 1190, 300, 365, 343, 38, 8115, 13, 18652, 1625, 764, 343, 38, 8115, 13, 467, 311, 1071, 869, 281, 360, 264, 22407, 13, 51364], "temperature": 0.0, "avg_logprob": -0.33101957184927805, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.008663303218781948}, {"id": 47, "seek": 36664, "start": 367.64, "end": 373.64, "text": " In order to work on the web, you need to enable the WebCR feature of WGPU. In the future, it will also", "tokens": [50414, 682, 1668, 281, 589, 322, 264, 3670, 11, 291, 643, 281, 9528, 264, 9573, 18547, 4111, 295, 343, 38, 8115, 13, 682, 264, 2027, 11, 309, 486, 611, 50714], "temperature": 0.0, "avg_logprob": -0.18502043455074996, "compression_ratio": 1.5, "no_speech_prob": 0.009293102659285069}, {"id": 48, "seek": 36664, "start": 377.64, "end": 383.64, "text": " use WebGPU, but that's another subject. The initialization of pixels is also different because it", "tokens": [50914, 764, 9573, 38, 8115, 11, 457, 300, 311, 1071, 3983, 13, 440, 5883, 2144, 295, 18668, 307, 611, 819, 570, 309, 51214], "temperature": 0.0, "avg_logprob": -0.18502043455074996, "compression_ratio": 1.5, "no_speech_prob": 0.009293102659285069}, {"id": 49, "seek": 36664, "start": 384.64, "end": 389.64, "text": " uses WinIt and WinIt needs to be initialized differently if you want to render your UI in canvas", "tokens": [51264, 4960, 10427, 3522, 293, 10427, 3522, 2203, 281, 312, 5883, 1602, 7614, 498, 291, 528, 281, 15529, 428, 15682, 294, 16267, 51514], "temperature": 0.0, "avg_logprob": -0.18502043455074996, "compression_ratio": 1.5, "no_speech_prob": 0.009293102659285069}, {"id": 50, "seek": 38964, "start": 390.64, "end": 396.64, "text": " in the browser. Last but not least, the initialization of WGPU is Async. So in my emulator, I never used", "tokens": [50414, 294, 264, 11185, 13, 5264, 457, 406, 1935, 11, 264, 5883, 2144, 295, 343, 38, 8115, 307, 1018, 34015, 13, 407, 294, 452, 846, 16381, 11, 286, 1128, 1143, 50714], "temperature": 0.0, "avg_logprob": -0.4787153046706627, "compression_ratio": 1.49, "no_speech_prob": 0.028682230040431023}, {"id": 51, "seek": 38964, "start": 399.64, "end": 405.64, "text": " Rust Async. I needed to add that. So I used WebAssembly. Gen features to bridge the Async world from", "tokens": [50864, 34952, 1018, 34015, 13, 286, 2978, 281, 909, 300, 13, 407, 286, 1143, 9573, 10884, 19160, 13, 3632, 4122, 281, 7283, 264, 1018, 34015, 1002, 490, 51164], "temperature": 0.0, "avg_logprob": -0.4787153046706627, "compression_ratio": 1.49, "no_speech_prob": 0.028682230040431023}, {"id": 52, "seek": 38964, "start": 408.64, "end": 415.64, "text": " Rust to JavaScript promises. To part the audio part, I'm going to use the WGPU. I'm going to", "tokens": [51314, 34952, 281, 15778, 16403, 13, 1407, 644, 264, 6278, 644, 11, 286, 478, 516, 281, 764, 264, 343, 38, 8115, 13, 286, 478, 516, 281, 51664], "temperature": 0.0, "avg_logprob": -0.4787153046706627, "compression_ratio": 1.49, "no_speech_prob": 0.028682230040431023}, {"id": 53, "seek": 41964, "start": 420.64, "end": 426.64, "text": " use the CIPL create, which also works on the web. This is a reference create to play audio. It needs to create", "tokens": [50414, 764, 264, 383, 9139, 43, 1884, 11, 597, 611, 1985, 322, 264, 3670, 13, 639, 307, 257, 6408, 1884, 281, 862, 6278, 13, 467, 2203, 281, 1884, 50714], "temperature": 0.0, "avg_logprob": -0.287542000795022, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.00300149735994637}, {"id": 54, "seek": 41964, "start": 430.64, "end": 436.64, "text": " feature as well. There were also some challenges because maybe nature started directly and if you use a browser,", "tokens": [50914, 4111, 382, 731, 13, 821, 645, 611, 512, 4759, 570, 1310, 3687, 1409, 3838, 293, 498, 291, 764, 257, 11185, 11, 51214], "temperature": 0.0, "avg_logprob": -0.287542000795022, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.00300149735994637}, {"id": 55, "seek": 41964, "start": 437.64, "end": 443.64, "text": " you can't start playing audio directly. That's actually a good thing because it means you can't play audio", "tokens": [51264, 291, 393, 380, 722, 2433, 6278, 3838, 13, 663, 311, 767, 257, 665, 551, 570, 309, 1355, 291, 393, 380, 862, 6278, 51564], "temperature": 0.0, "avg_logprob": -0.287542000795022, "compression_ratio": 1.6097560975609757, "no_speech_prob": 0.00300149735994637}, {"id": 56, "seek": 44364, "start": 444.64, "end": 450.64, "text": " on anyone's browser without interaction. So you need to have interaction. The user wanted to do this action.", "tokens": [50414, 322, 2878, 311, 11185, 1553, 9285, 13, 407, 291, 643, 281, 362, 9285, 13, 440, 4195, 1415, 281, 360, 341, 3069, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2553736288336259, "compression_ratio": 1.693467336683417, "no_speech_prob": 0.010422829538583755}, {"id": 57, "seek": 44364, "start": 453.64, "end": 458.64, "text": " Another issue I had with the standard library is I used NPSC channels and they don't work on the web platform.", "tokens": [50864, 3996, 2734, 286, 632, 365, 264, 3832, 6405, 307, 286, 1143, 426, 6273, 34, 9235, 293, 436, 500, 380, 589, 322, 264, 3670, 3663, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2553736288336259, "compression_ratio": 1.693467336683417, "no_speech_prob": 0.010422829538583755}, {"id": 58, "seek": 44364, "start": 462.64, "end": 467.64, "text": " So I wrote a quick channel myself because it was in the core. There are other channels that work on the web platform.", "tokens": [51314, 407, 286, 4114, 257, 1702, 2269, 2059, 570, 309, 390, 294, 264, 4965, 13, 821, 366, 661, 9235, 300, 589, 322, 264, 3670, 3663, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2553736288336259, "compression_ratio": 1.693467336683417, "no_speech_prob": 0.010422829538583755}, {"id": 59, "seek": 47364, "start": 473.64, "end": 480.64, "text": " But I prefer to implement something with no other dependencies. For time, usually for synchronization in an emulator,", "tokens": [50364, 583, 286, 4382, 281, 4445, 746, 365, 572, 661, 36606, 13, 1171, 565, 11, 2673, 337, 19331, 2144, 294, 364, 846, 16381, 11, 50714], "temperature": 0.0, "avg_logprob": -0.25569930076599123, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.011820298619568348}, {"id": 60, "seek": 47364, "start": 484.64, "end": 490.64, "text": " you need to know about the current time. Just like for the channels, in the standard libraries, the time API are not", "tokens": [50914, 291, 643, 281, 458, 466, 264, 2190, 565, 13, 1449, 411, 337, 264, 9235, 11, 294, 264, 3832, 15148, 11, 264, 565, 9362, 366, 406, 51214], "temperature": 0.0, "avg_logprob": -0.25569930076599123, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.011820298619568348}, {"id": 61, "seek": 47364, "start": 494.64, "end": 501.64, "text": " available on the web platform. So there are crates that do the bridge. I used the instant crates. You can", "tokens": [51414, 2435, 322, 264, 3670, 3663, 13, 407, 456, 366, 941, 1024, 300, 360, 264, 7283, 13, 286, 1143, 264, 9836, 941, 1024, 13, 509, 393, 51764], "temperature": 0.0, "avg_logprob": -0.25569930076599123, "compression_ratio": 1.5178571428571428, "no_speech_prob": 0.011820298619568348}, {"id": 62, "seek": 50364, "start": 503.64, "end": 510.64, "text": " also use web time, which also works. This is the code, the use code if it's for the was 32 target using", "tokens": [50364, 611, 764, 3670, 565, 11, 597, 611, 1985, 13, 639, 307, 264, 3089, 11, 264, 764, 3089, 498, 309, 311, 337, 264, 390, 8858, 3779, 1228, 50714], "temperature": 0.0, "avg_logprob": -0.37756573070179333, "compression_ratio": 1.56, "no_speech_prob": 0.026010939851403236}, {"id": 63, "seek": 50364, "start": 515.64, "end": 521.64, "text": " instant, if not, use the standard import. For Gil arrest, which was very nice, there was no action needed in order to support", "tokens": [50964, 9836, 11, 498, 406, 11, 764, 264, 3832, 974, 13, 1171, 17654, 7823, 11, 597, 390, 588, 1481, 11, 456, 390, 572, 3069, 2978, 294, 1668, 281, 1406, 51264], "temperature": 0.0, "avg_logprob": -0.37756573070179333, "compression_ratio": 1.56, "no_speech_prob": 0.026010939851403236}, {"id": 64, "seek": 50364, "start": 525.64, "end": 531.64, "text": " working the browser. Everything worked out of the box except the gamepad API, I would say, on browser is not as much much", "tokens": [51464, 1364, 264, 11185, 13, 5471, 2732, 484, 295, 264, 2424, 3993, 264, 1216, 13647, 9362, 11, 286, 576, 584, 11, 322, 11185, 307, 406, 382, 709, 709, 51764], "temperature": 0.0, "avg_logprob": -0.37756573070179333, "compression_ratio": 1.56, "no_speech_prob": 0.026010939851403236}, {"id": 65, "seek": 53364, "start": 533.64, "end": 540.64, "text": " mature as on native. So there is some rebinding to do. There are good reasons for that. For example, browser don't want you to be able to", "tokens": [50364, 14442, 382, 322, 8470, 13, 407, 456, 307, 512, 12970, 9245, 281, 360, 13, 821, 366, 665, 4112, 337, 300, 13, 1171, 1365, 11, 11185, 500, 380, 528, 291, 281, 312, 1075, 281, 50714], "temperature": 0.0, "avg_logprob": -0.28347944505143874, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.011905936524271965}, {"id": 66, "seek": 53364, "start": 543.64, "end": 549.64, "text": " fingerprint someone with the gamepad API, but then it means the bindings are not mature enough. Not the bindings, but the key bindings,", "tokens": [50864, 30715, 1580, 365, 264, 1216, 13647, 9362, 11, 457, 550, 309, 1355, 264, 14786, 1109, 366, 406, 14442, 1547, 13, 1726, 264, 14786, 1109, 11, 457, 264, 2141, 14786, 1109, 11, 51164], "temperature": 0.0, "avg_logprob": -0.28347944505143874, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.011905936524271965}, {"id": 67, "seek": 53364, "start": 553.64, "end": 560.64, "text": " which is something else. And then during porting, I also had bugs that were entirely my fault. I used a bit to turn it into a", "tokens": [51364, 597, 307, 746, 1646, 13, 400, 550, 1830, 2436, 278, 11, 286, 611, 632, 15120, 300, 645, 7696, 452, 7441, 13, 286, 1143, 257, 857, 281, 1261, 309, 666, 257, 51714], "temperature": 0.0, "avg_logprob": -0.28347944505143874, "compression_ratio": 1.6352459016393444, "no_speech_prob": 0.011905936524271965}, {"id": 68, "seek": 56364, "start": 563.64, "end": 571.64, "text": " huge bit, but I didn't use it too much. I used to make it too much new size, mostly because I like to index slices.", "tokens": [50364, 2603, 857, 11, 457, 286, 994, 380, 764, 309, 886, 709, 13, 286, 1143, 281, 652, 309, 886, 709, 777, 2744, 11, 5240, 570, 286, 411, 281, 8186, 19793, 13, 50764], "temperature": 0.4, "avg_logprob": -0.6550010442733765, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.03047577477991581}, {"id": 69, "seek": 56364, "start": 571.64, "end": 580.64, "text": " That's what you need to do in the slices. Wasp 32, as it says in the name, is a 32 bit platform. So I had overflows when I had", "tokens": [50764, 663, 311, 437, 291, 643, 281, 360, 294, 264, 19793, 13, 3027, 79, 8858, 11, 382, 309, 1619, 294, 264, 1315, 11, 307, 257, 8858, 857, 3663, 13, 407, 286, 632, 670, 33229, 562, 286, 632, 51214], "temperature": 0.4, "avg_logprob": -0.6550010442733765, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.03047577477991581}, {"id": 70, "seek": 56364, "start": 584.64, "end": 592.64, "text": " multiplication, additions, it grew bigger than 32 bits. All these were codes because in my project, in my cargo", "tokens": [51414, 27290, 11, 35113, 11, 309, 6109, 3801, 813, 8858, 9239, 13, 1057, 613, 645, 14211, 570, 294, 452, 1716, 11, 294, 452, 19449, 51814], "temperature": 0.4, "avg_logprob": -0.6550010442733765, "compression_ratio": 1.5663716814159292, "no_speech_prob": 0.03047577477991581}, {"id": 71, "seek": 59364, "start": 593.64, "end": 604.64, "text": " project, I had a lot of defaults in Rust. And yeah, it worked well. I just replaced new size with 64 when it did. And that's it.", "tokens": [50364, 1716, 11, 286, 632, 257, 688, 295, 7576, 82, 294, 34952, 13, 400, 1338, 11, 309, 2732, 731, 13, 286, 445, 10772, 777, 2744, 365, 12145, 562, 309, 630, 13, 400, 300, 311, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.3714113500383165, "compression_ratio": 1.4293785310734464, "no_speech_prob": 0.009577220305800438}, {"id": 72, "seek": 59364, "start": 608.64, "end": 618.64, "text": " So let's take a quick break and let's go through a demo of what it looks like. So just for first then, brought to you again,", "tokens": [51114, 407, 718, 311, 747, 257, 1702, 1821, 293, 718, 311, 352, 807, 257, 10723, 295, 437, 309, 1542, 411, 13, 407, 445, 337, 700, 550, 11, 3038, 281, 291, 797, 11, 51614], "temperature": 0.0, "avg_logprob": -0.3714113500383165, "compression_ratio": 1.4293785310734464, "no_speech_prob": 0.009577220305800438}, {"id": 73, "seek": 61864, "start": 618.64, "end": 629.64, "text": " which is this one, I will lend it to you for a few minutes. It's for them exclusive. I recommend you play this demo on, not", "tokens": [50364, 597, 307, 341, 472, 11, 286, 486, 21774, 309, 281, 291, 337, 257, 1326, 2077, 13, 467, 311, 337, 552, 13005, 13, 286, 2748, 291, 862, 341, 10723, 322, 11, 406, 50914], "temperature": 0.0, "avg_logprob": -0.14189425468444825, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.043278779834508896}, {"id": 74, "seek": 61864, "start": 629.64, "end": 635.64, "text": " necessarily on mobile, it will work, but you won't be able to control it. So maybe more on desktop browser or anything that has a", "tokens": [50914, 4725, 322, 6013, 11, 309, 486, 589, 11, 457, 291, 1582, 380, 312, 1075, 281, 1969, 309, 13, 407, 1310, 544, 322, 14502, 11185, 420, 1340, 300, 575, 257, 51214], "temperature": 0.0, "avg_logprob": -0.14189425468444825, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.043278779834508896}, {"id": 75, "seek": 61864, "start": 635.64, "end": 647.64, "text": " keyboard or gamepad controller. So I'll let you a bit more time to load it. It might not work for you if you don't have WebGL", "tokens": [51214, 10186, 420, 1216, 13647, 10561, 13, 407, 286, 603, 718, 291, 257, 857, 544, 565, 281, 3677, 309, 13, 467, 1062, 406, 589, 337, 291, 498, 291, 500, 380, 362, 9573, 19440, 51814], "temperature": 0.0, "avg_logprob": -0.14189425468444825, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.043278779834508896}, {"id": 76, "seek": 64764, "start": 647.64, "end": 662.64, "text": " enabled on your browser, but otherwise it should. If you have Firefox or Chrome, here's how it looks like.", "tokens": [50364, 15172, 322, 428, 11185, 11, 457, 5911, 309, 820, 13, 759, 291, 362, 46613, 420, 15327, 11, 510, 311, 577, 309, 1542, 411, 13, 51114], "temperature": 0.0, "avg_logprob": -0.26100359644208637, "compression_ratio": 1.127659574468085, "no_speech_prob": 0.015182883478701115}, {"id": 77, "seek": 66264, "start": 662.64, "end": 675.64, "text": " So I've loaded the page, it's play, and basically the emulator starts. If you have audio, it will play audio. And yeah, this is what you should see.", "tokens": [50364, 407, 286, 600, 13210, 264, 3028, 11, 309, 311, 862, 11, 293, 1936, 264, 846, 16381, 3719, 13, 759, 291, 362, 6278, 11, 309, 486, 862, 6278, 13, 400, 1338, 11, 341, 307, 437, 291, 820, 536, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3621457644871303, "compression_ratio": 1.264957264957265, "no_speech_prob": 0.29354748129844666}, {"id": 78, "seek": 67564, "start": 676.64, "end": 689.64, "text": " Okay, yeah, it works. I can play it. Who here successfully runs the demo? Just a quick show of hands who managed to run it. Okay, thanks.", "tokens": [50414, 1033, 11, 1338, 11, 309, 1985, 13, 286, 393, 862, 309, 13, 2102, 510, 10727, 6676, 264, 10723, 30, 1449, 257, 1702, 855, 295, 2377, 567, 6453, 281, 1190, 309, 13, 1033, 11, 3231, 13, 51064], "temperature": 0.0, "avg_logprob": -0.20912322019919372, "compression_ratio": 1.2017543859649122, "no_speech_prob": 0.05439898371696472}, {"id": 79, "seek": 68964, "start": 690.64, "end": 703.64, "text": " Okay, let's continue. So we have this porting. Okay, mostly worked. I showed you. It worked. There were a few tricks, I picked along the way.", "tokens": [50414, 1033, 11, 718, 311, 2354, 13, 407, 321, 362, 341, 2436, 278, 13, 1033, 11, 5240, 2732, 13, 286, 4712, 291, 13, 467, 2732, 13, 821, 645, 257, 1326, 11733, 11, 286, 6183, 2051, 264, 636, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2604583641151329, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.10790432244539261}, {"id": 80, "seek": 68964, "start": 703.64, "end": 715.64, "text": " There's not mandatory, but let's see what we have here. First thing, if you're used to debugging like me with println, you print code on", "tokens": [51064, 821, 311, 406, 22173, 11, 457, 718, 311, 536, 437, 321, 362, 510, 13, 2386, 551, 11, 498, 291, 434, 1143, 281, 45592, 411, 385, 365, 4482, 75, 77, 11, 291, 4482, 3089, 322, 51664], "temperature": 0.0, "avg_logprob": -0.2604583641151329, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.10790432244539261}, {"id": 81, "seek": 71564, "start": 715.64, "end": 725.64, "text": " terminal, it probably won't work as is on the browser, so you want to use the Web console. There's this console log crate which does the", "tokens": [50364, 14709, 11, 309, 1391, 1582, 380, 589, 382, 307, 322, 264, 11185, 11, 370, 291, 528, 281, 764, 264, 9573, 11076, 13, 821, 311, 341, 11076, 3565, 42426, 597, 775, 264, 50864], "temperature": 0.0, "avg_logprob": -0.20293057305472237, "compression_ratio": 1.6201117318435754, "no_speech_prob": 0.24869515001773834}, {"id": 82, "seek": 71564, "start": 725.64, "end": 737.64, "text": " binding of the console. If you use the log crate, it's really well integrated with the log levels and things like that. I also recommend that you use the", "tokens": [50864, 17359, 295, 264, 11076, 13, 759, 291, 764, 264, 3565, 42426, 11, 309, 311, 534, 731, 10919, 365, 264, 3565, 4358, 293, 721, 411, 300, 13, 286, 611, 2748, 300, 291, 764, 264, 51464], "temperature": 0.0, "avg_logprob": -0.20293057305472237, "compression_ratio": 1.6201117318435754, "no_speech_prob": 0.24869515001773834}, {"id": 83, "seek": 73764, "start": 738.64, "end": 754.64, "text": " console error panic hook crate. This one helps show when your program crashes, for example, I showed you the overflow checks it can panic. It will show you basically the panic in the", "tokens": [50414, 11076, 6713, 14783, 6328, 42426, 13, 639, 472, 3665, 855, 562, 428, 1461, 28642, 11, 337, 1365, 11, 286, 4712, 291, 264, 37772, 13834, 309, 393, 14783, 13, 467, 486, 855, 291, 1936, 264, 14783, 294, 264, 51214], "temperature": 0.0, "avg_logprob": -0.22001303696050878, "compression_ratio": 1.4, "no_speech_prob": 0.13505879044532776}, {"id": 84, "seek": 75464, "start": 754.64, "end": 772.64, "text": " console. That's how you register a console panic hook. Another trick I picked along the way is the cargo config. For this demo, I showed you, there's a bit of a", "tokens": [50364, 11076, 13, 663, 311, 577, 291, 7280, 257, 11076, 14783, 6328, 13, 3996, 4282, 286, 6183, 2051, 264, 636, 307, 264, 19449, 6662, 13, 1171, 341, 10723, 11, 286, 4712, 291, 11, 456, 311, 257, 857, 295, 257, 51264], "temperature": 0.0, "avg_logprob": -0.1893860385531471, "compression_ratio": 1.2698412698412698, "no_speech_prob": 0.013594366610050201}, {"id": 85, "seek": 77264, "start": 772.64, "end": 785.64, "text": " problem with some interactions. Some API I use, which I use directly from Rust, and I use the Web Cyscrate, which allows accessing those APIs for this demo.", "tokens": [50364, 1154, 365, 512, 13280, 13, 2188, 9362, 286, 764, 11, 597, 286, 764, 3838, 490, 34952, 11, 293, 286, 764, 264, 9573, 383, 749, 66, 4404, 11, 597, 4045, 26440, 729, 21445, 337, 341, 10723, 13, 51014], "temperature": 0.0, "avg_logprob": -0.4687031745910645, "compression_ratio": 1.2682926829268293, "no_speech_prob": 0.3262441158294678}, {"id": 86, "seek": 78564, "start": 785.64, "end": 806.64, "text": " In order to be able to access those APIs, which they are considered unstable, and you need to add an environment variable when you build, which is a bit annoying to add every time. You can add this Rust flags directly in your cargo config.tamo.", "tokens": [50364, 682, 1668, 281, 312, 1075, 281, 2105, 729, 21445, 11, 597, 436, 366, 4888, 23742, 11, 293, 291, 643, 281, 909, 364, 2823, 7006, 562, 291, 1322, 11, 597, 307, 257, 857, 11304, 281, 909, 633, 565, 13, 509, 393, 909, 341, 34952, 23265, 3838, 294, 428, 19449, 6662, 13, 83, 10502, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2657712133307206, "compression_ratio": 1.4610778443113772, "no_speech_prob": 0.1060602143406868}, {"id": 87, "seek": 80664, "start": 806.64, "end": 835.64, "text": " This way you can build with cargo builds. It will work. Another trick if you use to having VS code or integrated development environments, you probably are using Rust analyzer. If you have code that works on multiple platforms like me for the native, there's WebAssembly, you probably want to tell Rust analyzer to build as a tool.", "tokens": [50364, 639, 636, 291, 393, 1322, 365, 19449, 15182, 13, 467, 486, 589, 13, 3996, 4282, 498, 291, 764, 281, 1419, 25091, 3089, 420, 10919, 3250, 12388, 11, 291, 1391, 366, 1228, 34952, 6459, 4527, 13, 759, 291, 362, 3089, 300, 1985, 322, 3866, 9473, 411, 385, 337, 264, 8470, 11, 456, 311, 9573, 10884, 19160, 11, 291, 1391, 528, 281, 980, 34952, 6459, 4527, 281, 1322, 382, 257, 2290, 13, 51814], "temperature": 0.0, "avg_logprob": -0.35085461237659193, "compression_ratio": 1.5687203791469195, "no_speech_prob": 0.1648097038269043}, {"id": 88, "seek": 83664, "start": 836.64, "end": 851.64, "text": " You can do two different architecture. This way you have completion on the WebAssembly part. This is done as well in the cargo config.tamo by specifying multiple build targets. When you build it, you will have multiple build targets.", "tokens": [50364, 509, 393, 360, 732, 819, 9482, 13, 639, 636, 291, 362, 19372, 322, 264, 9573, 10884, 19160, 644, 13, 639, 307, 1096, 382, 731, 294, 264, 19449, 6662, 13, 83, 10502, 538, 1608, 5489, 3866, 1322, 12911, 13, 1133, 291, 1322, 309, 11, 291, 486, 362, 3866, 1322, 12911, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2733080298812301, "compression_ratio": 1.5129870129870129, "no_speech_prob": 0.12965358793735504}, {"id": 89, "seek": 85164, "start": 851.64, "end": 877.64, "text": " There are some drawbacks for that. It won't work with the workspace member. It must be at the root of your workspace. It also means that when you use cargo run, since you have multiple targets, cargo run will say, oh, no, you have to pick one target in order to run, which makes sense. It can be a bit annoying.", "tokens": [50364, 821, 366, 512, 2642, 17758, 337, 300, 13, 467, 1582, 380, 589, 365, 264, 32706, 4006, 13, 467, 1633, 312, 412, 264, 5593, 295, 428, 32706, 13, 467, 611, 1355, 300, 562, 291, 764, 19449, 1190, 11, 1670, 291, 362, 3866, 12911, 11, 19449, 1190, 486, 584, 11, 1954, 11, 572, 11, 291, 362, 281, 1888, 472, 3779, 294, 1668, 281, 1190, 11, 597, 1669, 2020, 13, 467, 393, 312, 257, 857, 11304, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2004403334397536, "compression_ratio": 1.6197916666666667, "no_speech_prob": 0.2918015420436859}, {"id": 90, "seek": 87764, "start": 877.64, "end": 899.64, "text": " So let's go with what did I think of this experience of putting this emulation. What's my feedback? I would say in general it's very easy to port standalone code to WebAssembly if you're using Rust. I did not change anything in my app's architecture.", "tokens": [50364, 407, 718, 311, 352, 365, 437, 630, 286, 519, 295, 341, 1752, 295, 3372, 341, 846, 2776, 13, 708, 311, 452, 5824, 30, 286, 576, 584, 294, 2674, 309, 311, 588, 1858, 281, 2436, 37454, 3089, 281, 9573, 10884, 19160, 498, 291, 434, 1228, 34952, 13, 286, 630, 406, 1319, 1340, 294, 452, 724, 311, 9482, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17953500591340613, "compression_ratio": 1.3966480446927374, "no_speech_prob": 0.2376212179660797}, {"id": 91, "seek": 89964, "start": 899.64, "end": 915.64, "text": " The total port took a few hours over a few days. As I told you, I did custom code for initialization, which is I think, and for DOM interaction, which is the demo you've seen.", "tokens": [50364, 440, 3217, 2436, 1890, 257, 1326, 2496, 670, 257, 1326, 1708, 13, 1018, 286, 1907, 291, 11, 286, 630, 2375, 3089, 337, 5883, 2144, 11, 597, 307, 286, 519, 11, 293, 337, 35727, 9285, 11, 597, 307, 264, 10723, 291, 600, 1612, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2524072565930955, "compression_ratio": 1.3157894736842106, "no_speech_prob": 0.38076624274253845}, {"id": 92, "seek": 91564, "start": 915.64, "end": 934.64, "text": " To go a bit further, what I won't talk about in this talk is how to build a web UI, for example. You probably want to use U or Laptos because I don't recommend accessing DOM APIs directly. This is very ugly, not really ergonomic.", "tokens": [50364, 1407, 352, 257, 857, 3052, 11, 437, 286, 1582, 380, 751, 466, 294, 341, 751, 307, 577, 281, 1322, 257, 3670, 15682, 11, 337, 1365, 13, 509, 1391, 528, 281, 764, 624, 420, 441, 2796, 329, 570, 286, 500, 380, 2748, 26440, 35727, 21445, 3838, 13, 639, 307, 588, 12246, 11, 406, 534, 42735, 21401, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15706070264180502, "compression_ratio": 1.323699421965318, "no_speech_prob": 0.2524416148662567}, {"id": 93, "seek": 93464, "start": 935.64, "end": 948.64, "text": " I did it so you don't have to try. Those library developers do a great job to do that. I didn't try building a complete UI. As you saw, nothing is configurable, etc.", "tokens": [50414, 286, 630, 309, 370, 291, 500, 380, 362, 281, 853, 13, 3950, 6405, 8849, 360, 257, 869, 1691, 281, 360, 300, 13, 286, 994, 380, 853, 2390, 257, 3566, 15682, 13, 1018, 291, 1866, 11, 1825, 307, 22192, 712, 11, 5183, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16958180717799975, "compression_ratio": 1.2790697674418605, "no_speech_prob": 0.5537327527999878}, {"id": 94, "seek": 94864, "start": 949.64, "end": 960.64, "text": " I'm thinking of building a UI with slints or a GUI, but I'm not really satisfied with the current status of font rendering. I know it's something that's being worked on.", "tokens": [50414, 286, 478, 1953, 295, 2390, 257, 15682, 365, 1061, 8654, 420, 257, 17917, 40, 11, 457, 286, 478, 406, 534, 11239, 365, 264, 2190, 6558, 295, 10703, 22407, 13, 286, 458, 309, 311, 746, 300, 311, 885, 2732, 322, 13, 50964], "temperature": 0.0, "avg_logprob": -0.24160312046514493, "compression_ratio": 1.6072727272727272, "no_speech_prob": 0.08770474046468735}, {"id": 95, "seek": 94864, "start": 961.64, "end": 977.64, "text": " Just like as well, minification in web size is not web-specific. There are many Rust tutorials you can find on minification, and I didn't do any performance measurement. I can tell you that it works. It also works on native. But I don't have any special feedback for that.", "tokens": [51014, 1449, 411, 382, 731, 11, 923, 3774, 294, 3670, 2744, 307, 406, 3670, 12, 29258, 13, 821, 366, 867, 34952, 17616, 291, 393, 915, 322, 923, 3774, 11, 293, 286, 994, 380, 360, 604, 3389, 13160, 13, 286, 393, 980, 291, 300, 309, 1985, 13, 467, 611, 1985, 322, 8470, 13, 583, 286, 500, 380, 362, 604, 2121, 5824, 337, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.24160312046514493, "compression_ratio": 1.6072727272727272, "no_speech_prob": 0.08770474046468735}, {"id": 96, "seek": 97864, "start": 978.64, "end": 981.64, "text": " That's it for my presentation.", "tokens": [50364, 663, 311, 309, 337, 452, 5860, 13, 50514], "temperature": 0.0, "avg_logprob": -0.27484978329051624, "compression_ratio": 0.7894736842105263, "no_speech_prob": 0.03700581192970276}, {"id": 97, "seek": 98164, "start": 981.64, "end": 984.64, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50514], "temperature": 0.0, "avg_logprob": -0.7775520597185407, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.07980726659297943}, {"id": 98, "seek": 98464, "start": 984.64, "end": 990.64, "text": " We have a question.", "tokens": [50364, 492, 362, 257, 1168, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2689161623938609, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.05135723948478699}, {"id": 99, "seek": 98464, "start": 995.64, "end": 1011.64, "text": " Yes, I have a question. When you build websites today, they have to be responsive. You use media queries in CSS style sheets to adopt to different kinds of resolution so that on the mobile tablet or desktop, it still looks nice.", "tokens": [50914, 1079, 11, 286, 362, 257, 1168, 13, 1133, 291, 1322, 12891, 965, 11, 436, 362, 281, 312, 21826, 13, 509, 764, 3021, 24109, 294, 24387, 3758, 15421, 281, 6878, 281, 819, 3685, 295, 8669, 370, 300, 322, 264, 6013, 14136, 420, 14502, 11, 309, 920, 1542, 1481, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2689161623938609, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.05135723948478699}, {"id": 100, "seek": 101164, "start": 1011.64, "end": 1024.6399999999999, "text": " Can you also do this in web assembly that you would say if I run the game in portrait or landscape mode, or if I do it on a bigger screen, that it takes care of the resolution? Will it also scale the graphics accordingly?", "tokens": [50364, 1664, 291, 611, 360, 341, 294, 3670, 12103, 300, 291, 576, 584, 498, 286, 1190, 264, 1216, 294, 17126, 420, 9661, 4391, 11, 420, 498, 286, 360, 309, 322, 257, 3801, 2568, 11, 300, 309, 2516, 1127, 295, 264, 8669, 30, 3099, 309, 611, 4373, 264, 11837, 19717, 30, 51014], "temperature": 0.0, "avg_logprob": -0.1798592873339383, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.100619837641716}, {"id": 101, "seek": 102464, "start": 1024.64, "end": 1038.64, "text": " There are multiple aspects to that. If you're building a web UI, you probably do that with CSS. If you use leptos or you, you will be able to generate HTML whether on the server or on the client.", "tokens": [50364, 821, 366, 3866, 7270, 281, 300, 13, 759, 291, 434, 2390, 257, 3670, 15682, 11, 291, 1391, 360, 300, 365, 24387, 13, 759, 291, 764, 476, 662, 329, 420, 291, 11, 291, 486, 312, 1075, 281, 8460, 17995, 1968, 322, 264, 7154, 420, 322, 264, 6423, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1627960953057981, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.622160792350769}, {"id": 102, "seek": 103864, "start": 1039.64, "end": 1050.64, "text": " Then it's basically the same thing as web development. You have CSS, you scan this HTML directly. For this demo, this is an emulator. It's a bit specific, especially because it's a full-screen application.", "tokens": [50414, 1396, 309, 311, 1936, 264, 912, 551, 382, 3670, 3250, 13, 509, 362, 24387, 11, 291, 11049, 341, 17995, 3838, 13, 1171, 341, 10723, 11, 341, 307, 364, 846, 16381, 13, 467, 311, 257, 857, 2685, 11, 2318, 570, 309, 311, 257, 1577, 12, 12439, 3861, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18862244020025415, "compression_ratio": 1.5068493150684932, "no_speech_prob": 0.5541245341300964}, {"id": 103, "seek": 103864, "start": 1050.64, "end": 1060.64, "text": " So basically it takes the whole width of your screen, and that's it. That's how it works on mobile and tablets and desktops.", "tokens": [50964, 407, 1936, 309, 2516, 264, 1379, 11402, 295, 428, 2568, 11, 293, 300, 311, 309, 13, 663, 311, 577, 309, 1985, 322, 6013, 293, 27622, 293, 730, 2320, 3370, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18862244020025415, "compression_ratio": 1.5068493150684932, "no_speech_prob": 0.5541245341300964}, {"id": 104, "seek": 106064, "start": 1061.64, "end": 1066.64, "text": " But it's not that you can combine those and that you can also do something in JavaScript or CSS.", "tokens": [50414, 583, 309, 311, 406, 300, 291, 393, 10432, 729, 293, 300, 291, 393, 611, 360, 746, 294, 15778, 420, 24387, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24671707690601619, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.34838902950286865}, {"id": 105, "seek": 106064, "start": 1066.64, "end": 1080.64, "text": " You can do that. You can find tutorials on the Rust-Waston book. You can look at the Rust-Waston guide and on the Rust-Waston project, which is this URL.", "tokens": [50664, 509, 393, 360, 300, 13, 509, 393, 915, 17616, 322, 264, 34952, 12, 54, 525, 266, 1446, 13, 509, 393, 574, 412, 264, 34952, 12, 54, 525, 266, 5934, 293, 322, 264, 34952, 12, 54, 525, 266, 1716, 11, 597, 307, 341, 12905, 13, 51364], "temperature": 0.0, "avg_logprob": -0.24671707690601619, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.34838902950286865}, {"id": 106, "seek": 108064, "start": 1080.64, "end": 1091.64, "text": " You can find information on how to bridge the two worlds. If you decide to use a crate, as I recommend, like you or leptos, they also have a lot of documentation on how to do that.", "tokens": [50364, 509, 393, 915, 1589, 322, 577, 281, 7283, 264, 732, 13401, 13, 759, 291, 4536, 281, 764, 257, 42426, 11, 382, 286, 2748, 11, 411, 291, 420, 476, 662, 329, 11, 436, 611, 362, 257, 688, 295, 14333, 322, 577, 281, 360, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12148094177246094, "compression_ratio": 1.5109170305676856, "no_speech_prob": 0.44035956263542175}, {"id": 107, "seek": 108064, "start": 1091.64, "end": 1102.64, "text": " I understand. Maybe a general question. Why did you choose Rust? Did you also consider programming in C++? Or are there any advantages of using Rust compared to C++?", "tokens": [50914, 286, 1223, 13, 2704, 257, 2674, 1168, 13, 1545, 630, 291, 2826, 34952, 30, 2589, 291, 611, 1949, 9410, 294, 383, 25472, 30, 1610, 366, 456, 604, 14906, 295, 1228, 34952, 5347, 281, 383, 25472, 30, 51464], "temperature": 0.0, "avg_logprob": -0.12148094177246094, "compression_ratio": 1.5109170305676856, "no_speech_prob": 0.44035956263542175}, {"id": 108, "seek": 110264, "start": 1102.64, "end": 1116.64, "text": " That's a great question. It was actually covered in other talks, but usually I like using Rust because it's a very nice language. It has nice ergonomics. It's fast and native.", "tokens": [50364, 663, 311, 257, 869, 1168, 13, 467, 390, 767, 5343, 294, 661, 6686, 11, 457, 2673, 286, 411, 1228, 34952, 570, 309, 311, 257, 588, 1481, 2856, 13, 467, 575, 1481, 42735, 29884, 13, 467, 311, 2370, 293, 8470, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1866821991769891, "compression_ratio": 1.46875, "no_speech_prob": 0.2829897999763489}, {"id": 109, "seek": 110264, "start": 1116.64, "end": 1123.64, "text": " It has more safety guarantees than C++. A great ecosystem.", "tokens": [51064, 467, 575, 544, 4514, 32567, 813, 383, 25472, 13, 316, 869, 11311, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1866821991769891, "compression_ratio": 1.46875, "no_speech_prob": 0.2829897999763489}, {"id": 110, "seek": 110264, "start": 1123.64, "end": 1125.64, "text": " Thank you.", "tokens": [51414, 1044, 291, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1866821991769891, "compression_ratio": 1.46875, "no_speech_prob": 0.2829897999763489}, {"id": 111, "seek": 110264, "start": 1125.64, "end": 1126.64, "text": " You're welcome.", "tokens": [51514, 509, 434, 2928, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1866821991769891, "compression_ratio": 1.46875, "no_speech_prob": 0.2829897999763489}, {"id": 112, "seek": 110264, "start": 1128.64, "end": 1130.64, "text": " Any other questions?", "tokens": [51664, 2639, 661, 1651, 30, 51764], "temperature": 0.0, "avg_logprob": -0.1866821991769891, "compression_ratio": 1.46875, "no_speech_prob": 0.2829897999763489}, {"id": 113, "seek": 113064, "start": 1130.64, "end": 1142.64, "text": " I'm curious what your main loop looks like. Do you spend all the time polling for events? Do you get called back from the browser? Does the browser hang if you never sleep?", "tokens": [50364, 286, 478, 6369, 437, 428, 2135, 6367, 1542, 411, 13, 1144, 291, 3496, 439, 264, 565, 29518, 337, 3931, 30, 1144, 291, 483, 1219, 646, 490, 264, 11185, 30, 4402, 264, 11185, 3967, 498, 291, 1128, 2817, 30, 50964], "temperature": 0.0, "avg_logprob": -0.16825578298913427, "compression_ratio": 1.5804878048780489, "no_speech_prob": 0.04199792072176933}, {"id": 114, "seek": 113064, "start": 1142.64, "end": 1153.64, "text": " That's a good question. I did not modify my main loop, but mostly because I used Winit. I used a Winit event loop. This is specific to the Winit crate.", "tokens": [50964, 663, 311, 257, 665, 1168, 13, 286, 630, 406, 16927, 452, 2135, 6367, 11, 457, 5240, 570, 286, 1143, 10427, 270, 13, 286, 1143, 257, 10427, 270, 2280, 6367, 13, 639, 307, 2685, 281, 264, 10427, 270, 42426, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16825578298913427, "compression_ratio": 1.5804878048780489, "no_speech_prob": 0.04199792072176933}, {"id": 115, "seek": 115364, "start": 1154.64, "end": 1171.64, "text": " Nothing was modified in the main loop. It spins. I don't remember how many times, but basically the length of a frame every time, and then it gets refreshed.", "tokens": [50414, 6693, 390, 15873, 294, 264, 2135, 6367, 13, 467, 31587, 13, 286, 500, 380, 1604, 577, 867, 1413, 11, 457, 1936, 264, 4641, 295, 257, 3920, 633, 565, 11, 293, 550, 309, 2170, 46330, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17315285665947094, "compression_ratio": 1.3986486486486487, "no_speech_prob": 0.15512517094612122}, {"id": 116, "seek": 115364, "start": 1171.64, "end": 1173.64, "text": " Yeah, that's it.", "tokens": [51264, 865, 11, 300, 311, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.17315285665947094, "compression_ratio": 1.3986486486486487, "no_speech_prob": 0.15512517094612122}, {"id": 117, "seek": 115364, "start": 1177.64, "end": 1179.64, "text": " And that's all the time we have.", "tokens": [51564, 400, 300, 311, 439, 264, 565, 321, 362, 13, 51664], "temperature": 0.0, "avg_logprob": -0.17315285665947094, "compression_ratio": 1.3986486486486487, "no_speech_prob": 0.15512517094612122}, {"id": 118, "seek": 118364, "start": 1183.64, "end": 1185.64, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.4980595111846924, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9635301232337952}], "language": "en"}