{"text": " Next talk is coming up. Pudos Shreinberg does not need a lot of introduction, especially in the micro-curnal circles, but he is the author of the NOVA microhypervisor, and I believe this talk is more a state of update. The stage is yours. Thank you. Can everybody hear me fine? All right. So this talk is going to be about using the NOVA microhypervisor for trusted computing at scale. So we will talk not so much about micro-curnals or micro-hypervisors. We will talk a little bit about scaling NOVA, and we will spend the majority of the talk talking about trusted computing. So the agenda is first I am going to give you a little overview of NOVA. For those of you who have not been in the micro-curnal deaf room before, maybe a quick question. Have you ever heard of NOVA before? Maybe one-third of the people. I will explain a little bit what NOVA is and why it is a microhypervisor and not a micro-curnal. Then we look at what happened in NOVA in the last year, in 2023. The second part of the talk will be about using NOVA for trusted computing for performing what is called a measured launch to actually get some trust in the platform. At the end, hopefully we will have some time for questions. NOVA is used as the bottom piece, the screen box, the micro-curnal that is used in the Bedrock Ultravisor, which is a virtualization layer that sits underneath virtual machines. For those of you who are familiar with micro-curnals, the kernel is very small and most of the operating system functionality is implemented in a multi-server user mode, a deep privileged environment. All of these colorful boxes are actually deep privileged processes that run in user mode and they are isolated from each other and they communicate with IPC. This is what you would expect from a typical micro-curnal. The reason that NOVA is a microhypervisor is because it additionally provides a virtualization interface that allows you to reuse unmodified legacy operating systems in virtual machines. NOVA basically relays all the VM exits to those yellow virtual machine monitors, which then implement the virtualization functionality. The whole stack, all the colorful boxes are in the process of being formally verified and this is going to be important also when we talk about trust. We will not talk so much about all these boxes, we will talk primarily about NOVA, the green kernel at the bottom and a little bit about establishing the trust between NOVA and the master controller, which is sort of the inner process of the user environment. When we talk about scaling NOVA, it originally started about 20 years ago as a research project to address them and since then we have productized it to run on multiple architectures. On the left we have ARC64 which is on V8 and on the right we have X86 architecture, primarily Intel and then we run on all these platforms and more that are listed on the slide. So at the top left corner you can see a variety of arm SOCs and all the ones in yellow are actually not using standard UEFI or ACPI interfaces so they have proprietary builds, you get proprietary or board specific binaries. But for some, like the Raspberry Pi's or even AWS's Graviton Cloud servers, the same NOVA binary works all the way from small embedded devices with just a handful of cores all the way up to big cloud servers with in this case 64 cores. And we have the same on the X86 world, actually the same binary runs on all these platforms whether this atom SOCs at the top right corner or client platforms that you see up there all the way again down to the largest cloud servers with over 100 of threads. So that actually required some infrastructure changes in NOVA but before we get there, in the interest of time I'm not doing any live demos but here you can see or if you can't read it then look at the slides online. The output of NOVA boots on Raspberry Pi 4 or 5. So naturally we had an interest in making NOVA working on the Pi 5 and it just works out of the box if you use UEFI firmware. And the top line which is highlighted shows that it's actually the same build, so the same commit ID and the same build timestamp and you can see the differences in the cores. Raspberry Pi 4 uses a 72 cores and the Pi 5 uses a 76 cores. And as I said the same binary also runs in the cloud. So if you take for example an AWS C7G metal instance you can run that binary and it will enumerate 64 cores actually our Neo-verse cores and it can also drive all of the PCI devices on a platform actually in multiple PCI segment groups. So I don't want to go into the details here. The same thing on x86 where you can see on the right side, so the left side is the beginning of the log and the right side is the end of the log that we can actually run on machines with over 100 cores with hundreds of PCI devices and tons of memory. So what did we have to do to make that work? And I presented a similar thing in my talk last year, what I call an innovation timeline. We put out a new version of NOVA approximately every two months, so six releases per year. And then some releases are more packed than others. So about a year ago we added some local APIC, registered virtualization and support for Atom Sox to NOVA. But then the more interesting work happened over the course of the first two releases or the next two releases at the beginning of the year where I implemented support for Intel TXT which is trusted execution technology in NOVA. And also to make NOVA work with really large core counts, we made the current memory pool extensible. So the bootloader has the choice of giving NOVA little or very large amounts of memory depending on how much a particular platform would want to use. And then in the middle of the year there were some minor adjustments to read, copy, update and capability management that we will not talk about here today. And then at the end of last year for the Christmas release basically, the TXT work was so complete that we could actually extend the trust chain all the way to the master controller, this blue component in New Zealand. And then again for the first release of this year which is going to come out at the end of February, you actually get even more functionality for the TPM and everything that's listed in bold. So you'll be talking about in this presentation. So why do we want to do something in the area of trusted computing? What problem does that solve? And I mentioned this in the introduction that we are formally verifying the entire ultravisor stack. So once that is complete, you know that the source code that you have fulfills its specification and maybe you have a qualified compiler that compiles this verified source code into some binaries. And even if you have that, things can go wrong. The binaries can be tampered with by an attacker either during the installation process, during the boot process, or after installation and you want to know that the binaries that you built are actually the ones that are running or are being launched on a computer. So you want to know that some remote computer is actually running exactly those binaries and not some modified version. Before you give that computer some precious content like your super secret K-I algorithm or some secret data. So in order to understand what trusted computing and what a chain of trust is, we have to look at the concept of what people commonly call secure boot. And secure boot is not a very precise term. The better term is actually verified boot. And verified boot works like this, that you have some immutable root of trust in this slide showing green. And that's the initial stage and it's immutable and it's a root of trust because you cannot reason about it's correct. You have to assume it is correct and it's usually implemented in ROM which doesn't change. And then every stage like, oops, every stage measures the integrity of the next stage and verifies it against some policy. And if the verification succeeds then the next stage gets launched and if the verification fails then you fail the boot. And this is basically establishing a transitive chain of trust and the thing we care about the NOVA hypervisor is at the very end. And this chain of trust only works if everybody before gets everything right. And that's hard because there's millions of lines of code living in all these boxes and some of these boxes are actually very complicated and extensible. So the E in UEFI actually stands for extensible. And the moment you make a change in any of those components, could be you add a new PCI card or you change the order of your boot devices, it changes the measurement. So keeping your databases of permitted integrity measurements or denied measurements up to date is hard. And the industry has learned this recently when UEFI was affected by this logo fail vulnerability which basically forced every vendor to deploy a new version of their UEFI firmware and to blacklist in the DBX database the old version that they had. So it is not very flexible and it is a very brittle thing. And the screen box here in the background shows that all of this stuff actually belongs to your trusted computing base. Because if any of these components actually modifies or trashes the binary, then even though you formally verified your source code, this binary is not going to do what you want it to do. So can we do better? This is an open source conference and we are not so much interested in DRM, we are interested in freedom. So we don't want to enforce boot policies, we want to instead use a concept called measure boot. And it works very similar that a stage measures the integrity of the next stage but then doesn't take an immediate decision on whether the next stage is good or bad. Instead this measurement simply gets extended into a TPM platform configuration register which stores this value for a later attestation request. And then the next stage gets executed. And there is still the problem that certain stages like UEFI and the boot loader are extensible and that they sort of leave a very hard to manage gap in this trust chain. But there is also the problem that typically the whole boot process is not protected against DMA. So these components do not make use of an IOMU or SMMU which means even if the software is correct you could have a USB device or some FireWire device, some DMA capable device that simply DMAs into this memory and trashes the software that way. So again the trusted computing base isn't really getting any smaller. So can we do better than that? Yes, we can and this extends the concept of measured launch with a dynamic root of trust. And the core idea is that you can't really change anything in this boot chain. You still have to execute all the firmware, you still have to load all your drivers, your firmware drivers, you still have to make a boot loader like a boot choice and you still have to initialize your memory controllers. But you can do all of this in a dirty environment. So a dynamic root of trust lets the system boot into initially an untrustworthy state. So we don't really care if anything that happens to this point and only at this point we want to bring the platform into a pristine state. And this is very interesting how this works because what the effect if you do here represented by this green bolt is it is a disruptive event which feels a bit like a platform reset but it doesn't reboot the machine. It just brings the CPU into a well-defined state. It's actually a protective mode with a paging turned off and it holds all the other cores. You can see that in a moment and it forces the execution after this launch event to a code pass which has previously been measured and protected. So we don't care about all this stuff in the red box anymore. That gets eliminated from the TCB which is great because it eliminates millions of instructions and our TCB is now just this DLTM sequence plus NOVA. So what do we need for that? The technology that gives us this on Intel platforms is called Intel TXT. You may also come across the acronym CDNT which just is short for Converged Boot Guard and TXT. So Intel has fused the static root of trust which is boot guard with the dynamic root of trust which is TXT into one technology. And TXT is the one we care about. This gives us the DLTM. You need a CPU that supports this and you need a TXT capable chipset and a TPM preferably TPM 2.0 because TPM 1.2 is really old and it can only do deprecated hash algorithms. And you need an SINNET module which matches your platform. And the purpose of this SINNET module is the module that Intel provides that you can download from their website is to initialize and verify the platform in a way that it is securely configured. And once you do this you can later do a remote attestation by asking the TPM what these measurements in all the platform configuration registers are. And then you can remotely take a trust decision to say if this PCR contains some value do I recognize this value as belonging to NOVA's December release or NOVA's February release. And who knows why there is this sign of like grant here. So Intel develops all its technologies under code names and the code name for Intel TXT many years ago used to be called Lagrange technology and this is named after a city in eastern Oregon. So what happens when you do this disruptive event? How does this reset the platform without rebooting it? And it's very interesting. So first of all we have a number of processors. Here this just shows four so these are four lanes. And we have one processor which we call the initiating logical processor. That's the one which initiates the DM sequence. And we have in this case three responding processors which maybe in some arbitrary state we don't know. They could be sitting in some idle loop. They could be executing malicious code. We simply don't know what they do at this point. But we also don't care. And then some time before the disruptive launch event the code for NOVA which is in this case called MLE the measure launch environment. And this is in it ACM must have been loaded into memory and again they could have been corrupted in memory. It could be the wrong version. We don't take a decision there. And then later there can be an arbitrary amount of time that passes minutes hours. We can do this a week later. It doesn't matter. Some component is executing this DLTM which is a specific processor instruction. And what happens when you execute this processor instruction which is privileged is that everything resets. And the chipset broadcasts an S-enter cycle on the interconnect. And the S-enter cycle basically initiates all the, initializes all the processors into an S-enter sleep state. So we now know that all the other processors, all the pieces are not executing any instruction. They are sleeping. And it transitions control to this S-init ACM and it checks its integrity. So it has a signature and it has a checksum or actually a hash cryptographic hash. So the processor validates that this module is a valid Intel S-init ACM and it launches that. And this module runs entirely inside the cache. It doesn't use any memory because the memory might have been initialized wrong. The memory might have physical memory aliasing where two physical addresses point to the same page. So this operates in a very constrained environment but it is software that can validate that your platform is correct. That the processors are not overclocked. There's no undervolting. That all the chipset registers that need locking are locked and so forth. And the final thing that this thing does when it has convinced itself that the platform is in a good state is that it measures and launches NOVA. And it stores the measurement of NOVA in TPM PCR 17. And then NOVA gets control at its measured entry point. And at some point later after it has initialized enough of itself, it can wrong the rule the other processors into the secure environment. So that by the time we get to the end of this, we have now all four cores or 128 cores in this measured environment. And should anything go wrong during this process like a rogue CPU showing up that nobody knew about or a CPU leaving, surprised leaving this environment, then the platform transitions into a TXC shutdown which effectively resets the platform. So now we talk a little bit about the TPM because what we want to do is we want to measure the next stage into a platform configuration register PCR. And whenever you measure a component, what we really mean is we have a region of that component of that image that we care about that doesn't change. You can call it an immutable region which is typically the code and the read-only data. And you compute a cryptographic hash like a SHA1 or a SHA2 cryptographic hash. And you get in the case of SHA256, you get a value that is 256 bits long or a large number like that. And this measuring entity executes a command to the TPM. And the TPM is a little chip like the one shown up here that sits on your motherboard. And it has, in a typical case of a client platform, it has 24 platform configuration registers. And it invokes an operation on the TPM that's called PCR extent. And the PCR extent operation is interesting in the sense that you can't write to a PCR directly. You can only extend a new value into a PCR and what it does is it takes the existing value, concatenates it with a new value and hashes the concatenated hash. And this forms the new value of the PCR. So the sequence in which you extend values into the TPM and the values themselves are all reflected in the hash. Basically it gets mixed together. And once you look at the PCR so you can read the value, you can no longer recompute the original chain of extent operations that led to this PCR value simply because the hash function is a one-way trap function. So how would a remote verifier who can ask the TPM for a quote so you can go to the TPM and say give me the value of those PCRs that I care about and have the TPM sign that quote report so you know it's authentic. You can send that off to some other computer elsewhere and they can look at all the PCRs and say, okay, if this PCR has the value that I recognize then the platform has launched authentic software. But how do you know if multiple extent operations have happened into a PCR what the individual values are because the individual values represent the individual software components. And for that you need the left side of this picture where in addition to extending a measurement into the TPM it also gets stored in what's called a crypto agile event log. And this effectively is an auditable trace. It's a record of all the extent operations that happened. And in addition to recording which PCR and what the digest so this measurement was that was extended. There's also some event metadata that said the meaning of this extent operation is I hashed the command line or I hashed the RAM disk or whatever it may be. So you have to send both of these things both the TPM quote request and the crypto agile event log to a mode of verifier and it can correlate the two things that can use the crypto event log for a particular PCR to recompute the value in a PCR. And then you can then check if the quote from the TPM actually lists exactly that value of the TPR PCR and if it has been signed with an authentic TPM signature. And then you know what platform and what software is running on the platform. So I said the SNNIT module measures the integrity of NOVA. And NOVA is a kernel that consists it's an F image that consists of code and read only data but also of some mutable data and some heap. And not all of that thing is immutable in the sense that it doesn't change. And while some people may think it's sufficient to just do an integrity measurement at launch time. So when you boot the system that's not the full truth because you can also close the lid on your laptop which will basically shut everything down and only keep the content of memory alive. And when you resume the laptop then all your protections are gone. So on a suspended zoom cycle you actually have to repeat this integrity measurement and then this yellow section has actually changed. So not everything can be measured and how does NOVA tell the SNNIT module which region of it to measure. And there is this MLE header which enumerates the memory pages that NOVA wants to have measured. And NOVA is actually the entity that initiates the launch process. So there's no bootloader that says launch NOVA. No, NOVA gets launched in this dirty environment and then decides itself to launch its second stage and thereby tells SNNIT module what this to be measured region is. But before it actually gets measured the SNNIT module DMA protects this entire region. So the moment it gets protected no attacker can change it anymore not even visit DMA attack. Then it gets measured the measured value gets extended into TPMPCR17 and then NOVA gets launched. And there's also some TXT heap data structures that NOVA's preamble code and NOVA's post launch code used to exchange data with the TXT heap. So one of the things for example that the SNNIT module produces and stores in this TXT heap is some information about how many processes really exist. And it also stores some validated copies of ACPI tables there so that no IOM use get hidden or whatever. When you write software like that that you want to measure you have to carefully think about what should be included in the measurement versus what should be excluded. So if you measure too little then maybe something can be changed in a security relevant manner and it will not be reflected in the hash. And the thing that immediately comes to mind is let's say you have a command line parameter and NOVA has a few among them is one where you can say don't turn on the IOMU. So this is basically a chicken bit for debugging and when you execute NOVA with this command line parameter it's obviously less than fully secure. So you want that change or the configuration change to definitely be reflected in the hash that the NOVA version that runs insecurely can be told apart from the normal version which uses the IOMU with the full potential. So the command line must be included in the hash but if you have some data structures that maybe take time stamps you don't want to take them into the hash because they will change the moment that the time stamp changes. So this needs very careful considerations. And then the next question is if you have a binary like that and you've built it to the compiler, the obviously compile instruction sequences of its choice. How do you know what integrity measurement to expect? So you need some form of reference measurement and when you execute NOVA's built infrastructure and you build a binary at the end of the boot process it will output all the reference integrity measurements. So it will say the sharp one value for this binary is this and the sharp two six values is this and the sharp have 12 values is this and then you know what value to expect when you do a decision. So extending this to user mode what does it require? So it requires NOVA to compute a launch integrity measurement of the root PD which means we have to define what is the region of the master controller of this root PD to measure and we have to actually do the hashing. And for that we can do two things. We can either send the whole data over the LPC or SPI bus to the TPM and let the TPM compute the integrity measurement or we can compute it in NOVA and software using the CPU. And I originally thought that using the TPM it would be a good idea because the TPM automatically does it for all supported hash algorithms. But as you can see on the right side the TPM is really really slow and the bus that connects the TPM to the system is also very slow. So in order to hash a binary of two megabytes of size TPM actually takes almost 14 seconds and NOVA takes 50 milliseconds plus two. So the 15 are for computing the hash and the two are for extending the PCR. And then obviously NOVA needs to drive the TPM itself because it needs to send commands to the TPM and NOVA needs to append the entry to the event log. So all of that infrastructure had to be added and we actually have to measure the root PD before we launch it because we can't have a process launching some let's say malicious instruction. And then saying after I've done some malicious action I'm changing my image to look innocuous and then I'd say measure me. Then it will look correctly even though it has executed something malicious. So before you even execute the first instruction of the next module you have to measure it. So the root PD cannot tell NOVA which part of it to measure so how do we define this. And it's simple you can actually use the L headers, the program headers in the root PD and we defined it to say the first L header that is readable or executable but not writable. That's the one that contains code and read only data. That's the one that we measure. And then NOVA obviously had to learn how to compute char one and char two fifty six and char three eighty four and char five twelve. And basically the entire NISP FIPS one hundred eighty standard. And that looked like very complicated but due to the beauty of C++ templates and function overloading and inheritance the implementation of all these hash functions and NOVA is actually just one hundred thirty lines. And it can do all of these algorithms. So that brings me to almost the end of my talk. The last thing we had to add to NOVA late last year was support for the TPM. And the TPM has two interfaces. The older interface is the FIFO interface and there is a newer command response buffer interface and NOVA had to understand how to drive those that adds another two hundred fifty lines of code. And then you have to send commands across that interface and the TPM library specification is very large. It's thousands of pages but NOVA only implements the subset of TPM commands that it needs for this measured launch which is determining what capabilities it needs. And then you have to understand how many TPM has and how many PCRs and what algorithms and then performing some PCR operations. And that adds about another five hundred lines of code. But for both the old TPM one or two and the newer TPM two dot oh. And then there is a table that lists how the TPM actually gets used by various parts of the platform. The TPM has different localities. And locality four which belongs to the core root of transform measurement actually measures the next stage which is NOVA into PCR 17 and then NOVA which drives the TPM at locality three measures. No, the SNET ACM measures NOVA also into PCR 17 and then NOVA measures the next stage which is the master controller into PCR 19 and then the root PD measures the next component further up stack into PCR 20. So this is the list of all the cool security technologies that we have in NOVA now. Ranging from control flow enforcement, total memory encryption with multiple keys and the latest thing we added which we just discussed is trusted execution technology and adaptation. So with that thank you for listening and I'm happy to take questions. you", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.0, "text": " Next talk is coming up.", "tokens": [50364, 3087, 751, 307, 1348, 493, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3758579751719599, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.4310941994190216}, {"id": 1, "seek": 0, "start": 8.0, "end": 13.0, "text": " Pudos Shreinberg does not need a lot of introduction, especially in the micro-curnal circles, but", "tokens": [50764, 430, 532, 329, 1160, 265, 259, 6873, 775, 406, 643, 257, 688, 295, 9339, 11, 2318, 294, 264, 4532, 12, 66, 925, 304, 13040, 11, 457, 51014], "temperature": 0.0, "avg_logprob": -0.3758579751719599, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.4310941994190216}, {"id": 2, "seek": 0, "start": 13.0, "end": 19.0, "text": " he is the author of the NOVA microhypervisor, and I believe this talk is more a state of", "tokens": [51014, 415, 307, 264, 3793, 295, 264, 9146, 20914, 4532, 3495, 610, 16457, 11, 293, 286, 1697, 341, 751, 307, 544, 257, 1785, 295, 51314], "temperature": 0.0, "avg_logprob": -0.3758579751719599, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.4310941994190216}, {"id": 3, "seek": 0, "start": 19.0, "end": 20.0, "text": " update.", "tokens": [51314, 5623, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3758579751719599, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.4310941994190216}, {"id": 4, "seek": 0, "start": 20.0, "end": 21.0, "text": " The stage is yours.", "tokens": [51364, 440, 3233, 307, 6342, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3758579751719599, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.4310941994190216}, {"id": 5, "seek": 0, "start": 21.0, "end": 22.0, "text": " Thank you.", "tokens": [51414, 1044, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.3758579751719599, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.4310941994190216}, {"id": 6, "seek": 0, "start": 22.0, "end": 24.0, "text": " Can everybody hear me fine?", "tokens": [51464, 1664, 2201, 1568, 385, 2489, 30, 51564], "temperature": 0.0, "avg_logprob": -0.3758579751719599, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.4310941994190216}, {"id": 7, "seek": 0, "start": 24.0, "end": 25.0, "text": " All right.", "tokens": [51564, 1057, 558, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3758579751719599, "compression_ratio": 1.4257425742574257, "no_speech_prob": 0.4310941994190216}, {"id": 8, "seek": 2500, "start": 25.0, "end": 31.0, "text": " So this talk is going to be about using the NOVA microhypervisor for trusted computing", "tokens": [50364, 407, 341, 751, 307, 516, 281, 312, 466, 1228, 264, 9146, 20914, 4532, 3495, 610, 16457, 337, 16034, 15866, 50664], "temperature": 0.0, "avg_logprob": -0.14495815769318612, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0777326300740242}, {"id": 9, "seek": 2500, "start": 31.0, "end": 32.0, "text": " at scale.", "tokens": [50664, 412, 4373, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14495815769318612, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0777326300740242}, {"id": 10, "seek": 2500, "start": 32.0, "end": 35.0, "text": " So we will talk not so much about micro-curnals or micro-hypervisors.", "tokens": [50714, 407, 321, 486, 751, 406, 370, 709, 466, 4532, 12, 66, 925, 1124, 420, 4532, 12, 3495, 610, 4938, 830, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14495815769318612, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0777326300740242}, {"id": 11, "seek": 2500, "start": 35.0, "end": 40.0, "text": " We will talk a little bit about scaling NOVA, and we will spend the majority of the talk", "tokens": [50864, 492, 486, 751, 257, 707, 857, 466, 21589, 9146, 20914, 11, 293, 321, 486, 3496, 264, 6286, 295, 264, 751, 51114], "temperature": 0.0, "avg_logprob": -0.14495815769318612, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0777326300740242}, {"id": 12, "seek": 2500, "start": 40.0, "end": 43.0, "text": " talking about trusted computing.", "tokens": [51114, 1417, 466, 16034, 15866, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14495815769318612, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0777326300740242}, {"id": 13, "seek": 2500, "start": 43.0, "end": 48.0, "text": " So the agenda is first I am going to give you a little overview of NOVA.", "tokens": [51264, 407, 264, 9829, 307, 700, 286, 669, 516, 281, 976, 291, 257, 707, 12492, 295, 9146, 20914, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14495815769318612, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0777326300740242}, {"id": 14, "seek": 2500, "start": 48.0, "end": 52.0, "text": " For those of you who have not been in the micro-curnal deaf room before, maybe a quick", "tokens": [51514, 1171, 729, 295, 291, 567, 362, 406, 668, 294, 264, 4532, 12, 66, 925, 304, 15559, 1808, 949, 11, 1310, 257, 1702, 51714], "temperature": 0.0, "avg_logprob": -0.14495815769318612, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.0777326300740242}, {"id": 15, "seek": 5200, "start": 52.0, "end": 53.0, "text": " question.", "tokens": [50364, 1168, 13, 50414], "temperature": 0.0, "avg_logprob": -0.17642745070570098, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.02563709206879139}, {"id": 16, "seek": 5200, "start": 53.0, "end": 56.0, "text": " Have you ever heard of NOVA before?", "tokens": [50414, 3560, 291, 1562, 2198, 295, 9146, 20914, 949, 30, 50564], "temperature": 0.0, "avg_logprob": -0.17642745070570098, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.02563709206879139}, {"id": 17, "seek": 5200, "start": 56.0, "end": 58.0, "text": " Maybe one-third of the people.", "tokens": [50564, 2704, 472, 12, 25095, 295, 264, 561, 13, 50664], "temperature": 0.0, "avg_logprob": -0.17642745070570098, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.02563709206879139}, {"id": 18, "seek": 5200, "start": 58.0, "end": 62.0, "text": " I will explain a little bit what NOVA is and why it is a microhypervisor and not a micro-curnal.", "tokens": [50664, 286, 486, 2903, 257, 707, 857, 437, 9146, 20914, 307, 293, 983, 309, 307, 257, 4532, 3495, 610, 16457, 293, 406, 257, 4532, 12, 66, 925, 304, 13, 50864], "temperature": 0.0, "avg_logprob": -0.17642745070570098, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.02563709206879139}, {"id": 19, "seek": 5200, "start": 62.0, "end": 67.0, "text": " Then we look at what happened in NOVA in the last year, in 2023.", "tokens": [50864, 1396, 321, 574, 412, 437, 2011, 294, 9146, 20914, 294, 264, 1036, 1064, 11, 294, 44377, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17642745070570098, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.02563709206879139}, {"id": 20, "seek": 5200, "start": 67.0, "end": 72.0, "text": " The second part of the talk will be about using NOVA for trusted computing for performing", "tokens": [51114, 440, 1150, 644, 295, 264, 751, 486, 312, 466, 1228, 9146, 20914, 337, 16034, 15866, 337, 10205, 51364], "temperature": 0.0, "avg_logprob": -0.17642745070570098, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.02563709206879139}, {"id": 21, "seek": 5200, "start": 72.0, "end": 76.0, "text": " what is called a measured launch to actually get some trust in the platform.", "tokens": [51364, 437, 307, 1219, 257, 12690, 4025, 281, 767, 483, 512, 3361, 294, 264, 3663, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17642745070570098, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.02563709206879139}, {"id": 22, "seek": 5200, "start": 76.0, "end": 80.0, "text": " At the end, hopefully we will have some time for questions.", "tokens": [51564, 1711, 264, 917, 11, 4696, 321, 486, 362, 512, 565, 337, 1651, 13, 51764], "temperature": 0.0, "avg_logprob": -0.17642745070570098, "compression_ratio": 1.648936170212766, "no_speech_prob": 0.02563709206879139}, {"id": 23, "seek": 8000, "start": 80.0, "end": 86.0, "text": " NOVA is used as the bottom piece, the screen box, the micro-curnal that is used in the", "tokens": [50364, 9146, 20914, 307, 1143, 382, 264, 2767, 2522, 11, 264, 2568, 2424, 11, 264, 4532, 12, 66, 925, 304, 300, 307, 1143, 294, 264, 50664], "temperature": 0.0, "avg_logprob": -0.1394447828594007, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014725809916853905}, {"id": 24, "seek": 8000, "start": 86.0, "end": 93.0, "text": " Bedrock Ultravisor, which is a virtualization layer that sits underneath virtual machines.", "tokens": [50664, 19893, 17799, 20925, 16457, 11, 597, 307, 257, 6374, 2144, 4583, 300, 12696, 7223, 6374, 8379, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1394447828594007, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014725809916853905}, {"id": 25, "seek": 8000, "start": 93.0, "end": 100.0, "text": " For those of you who are familiar with micro-curnals, the kernel is very small and most of the", "tokens": [51014, 1171, 729, 295, 291, 567, 366, 4963, 365, 4532, 12, 66, 925, 1124, 11, 264, 28256, 307, 588, 1359, 293, 881, 295, 264, 51364], "temperature": 0.0, "avg_logprob": -0.1394447828594007, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014725809916853905}, {"id": 26, "seek": 8000, "start": 100.0, "end": 106.0, "text": " operating system functionality is implemented in a multi-server user mode, a deep privileged", "tokens": [51364, 7447, 1185, 14980, 307, 12270, 294, 257, 4825, 12, 12484, 331, 4195, 4391, 11, 257, 2452, 25293, 51664], "temperature": 0.0, "avg_logprob": -0.1394447828594007, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014725809916853905}, {"id": 27, "seek": 8000, "start": 106.0, "end": 107.0, "text": " environment.", "tokens": [51664, 2823, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1394447828594007, "compression_ratio": 1.5949367088607596, "no_speech_prob": 0.014725809916853905}, {"id": 28, "seek": 10700, "start": 107.0, "end": 113.0, "text": " All of these colorful boxes are actually deep privileged processes that run in user mode", "tokens": [50364, 1057, 295, 613, 18506, 9002, 366, 767, 2452, 25293, 7555, 300, 1190, 294, 4195, 4391, 50664], "temperature": 0.0, "avg_logprob": -0.0782295897766784, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0019456603331491351}, {"id": 29, "seek": 10700, "start": 113.0, "end": 118.0, "text": " and they are isolated from each other and they communicate with IPC.", "tokens": [50664, 293, 436, 366, 14621, 490, 1184, 661, 293, 436, 7890, 365, 8671, 34, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0782295897766784, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0019456603331491351}, {"id": 30, "seek": 10700, "start": 118.0, "end": 121.0, "text": " This is what you would expect from a typical micro-curnal.", "tokens": [50914, 639, 307, 437, 291, 576, 2066, 490, 257, 7476, 4532, 12, 66, 925, 304, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0782295897766784, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0019456603331491351}, {"id": 31, "seek": 10700, "start": 121.0, "end": 127.0, "text": " The reason that NOVA is a microhypervisor is because it additionally provides a virtualization", "tokens": [51064, 440, 1778, 300, 9146, 20914, 307, 257, 4532, 3495, 610, 16457, 307, 570, 309, 43181, 6417, 257, 6374, 2144, 51364], "temperature": 0.0, "avg_logprob": -0.0782295897766784, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0019456603331491351}, {"id": 32, "seek": 10700, "start": 127.0, "end": 132.0, "text": " interface that allows you to reuse unmodified legacy operating systems in virtual machines.", "tokens": [51364, 9226, 300, 4045, 291, 281, 26225, 517, 8014, 2587, 11711, 7447, 3652, 294, 6374, 8379, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0782295897766784, "compression_ratio": 1.5866141732283465, "no_speech_prob": 0.0019456603331491351}, {"id": 33, "seek": 13200, "start": 132.0, "end": 138.0, "text": " NOVA basically relays all the VM exits to those yellow virtual machine monitors, which", "tokens": [50364, 9146, 20914, 1936, 1039, 3772, 439, 264, 18038, 44183, 281, 729, 5566, 6374, 3479, 26518, 11, 597, 50664], "temperature": 0.0, "avg_logprob": -0.1145138904966157, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.010132122784852982}, {"id": 34, "seek": 13200, "start": 138.0, "end": 143.0, "text": " then implement the virtualization functionality.", "tokens": [50664, 550, 4445, 264, 6374, 2144, 14980, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1145138904966157, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.010132122784852982}, {"id": 35, "seek": 13200, "start": 143.0, "end": 148.0, "text": " The whole stack, all the colorful boxes are in the process of being formally verified and", "tokens": [50914, 440, 1379, 8630, 11, 439, 264, 18506, 9002, 366, 294, 264, 1399, 295, 885, 25983, 31197, 293, 51164], "temperature": 0.0, "avg_logprob": -0.1145138904966157, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.010132122784852982}, {"id": 36, "seek": 13200, "start": 148.0, "end": 152.0, "text": " this is going to be important also when we talk about trust.", "tokens": [51164, 341, 307, 516, 281, 312, 1021, 611, 562, 321, 751, 466, 3361, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1145138904966157, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.010132122784852982}, {"id": 37, "seek": 13200, "start": 152.0, "end": 157.0, "text": " We will not talk so much about all these boxes, we will talk primarily about NOVA, the green", "tokens": [51364, 492, 486, 406, 751, 370, 709, 466, 439, 613, 9002, 11, 321, 486, 751, 10029, 466, 9146, 20914, 11, 264, 3092, 51614], "temperature": 0.0, "avg_logprob": -0.1145138904966157, "compression_ratio": 1.5791666666666666, "no_speech_prob": 0.010132122784852982}, {"id": 38, "seek": 15700, "start": 157.0, "end": 162.0, "text": " kernel at the bottom and a little bit about establishing the trust between NOVA and the", "tokens": [50364, 28256, 412, 264, 2767, 293, 257, 707, 857, 466, 22494, 264, 3361, 1296, 9146, 20914, 293, 264, 50614], "temperature": 0.0, "avg_logprob": -0.13682770501999628, "compression_ratio": 1.6383763837638377, "no_speech_prob": 0.009208176285028458}, {"id": 39, "seek": 15700, "start": 162.0, "end": 167.0, "text": " master controller, which is sort of the inner process of the user environment.", "tokens": [50614, 4505, 10561, 11, 597, 307, 1333, 295, 264, 7284, 1399, 295, 264, 4195, 2823, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13682770501999628, "compression_ratio": 1.6383763837638377, "no_speech_prob": 0.009208176285028458}, {"id": 40, "seek": 15700, "start": 167.0, "end": 173.0, "text": " When we talk about scaling NOVA, it originally started about 20 years ago as a research project", "tokens": [50864, 1133, 321, 751, 466, 21589, 9146, 20914, 11, 309, 7993, 1409, 466, 945, 924, 2057, 382, 257, 2132, 1716, 51164], "temperature": 0.0, "avg_logprob": -0.13682770501999628, "compression_ratio": 1.6383763837638377, "no_speech_prob": 0.009208176285028458}, {"id": 41, "seek": 15700, "start": 173.0, "end": 179.0, "text": " to address them and since then we have productized it to run on multiple architectures.", "tokens": [51164, 281, 2985, 552, 293, 1670, 550, 321, 362, 1674, 1602, 309, 281, 1190, 322, 3866, 6331, 1303, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13682770501999628, "compression_ratio": 1.6383763837638377, "no_speech_prob": 0.009208176285028458}, {"id": 42, "seek": 15700, "start": 179.0, "end": 186.0, "text": " On the left we have ARC64 which is on V8 and on the right we have X86 architecture, primarily", "tokens": [51464, 1282, 264, 1411, 321, 362, 8943, 34, 19395, 597, 307, 322, 691, 23, 293, 322, 264, 558, 321, 362, 1783, 22193, 9482, 11, 10029, 51814], "temperature": 0.0, "avg_logprob": -0.13682770501999628, "compression_ratio": 1.6383763837638377, "no_speech_prob": 0.009208176285028458}, {"id": 43, "seek": 18600, "start": 186.0, "end": 191.0, "text": " Intel and then we run on all these platforms and more that are listed on the slide.", "tokens": [50364, 19762, 293, 550, 321, 1190, 322, 439, 613, 9473, 293, 544, 300, 366, 10052, 322, 264, 4137, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16922934214274088, "compression_ratio": 1.5049019607843137, "no_speech_prob": 0.003016857197508216}, {"id": 44, "seek": 18600, "start": 191.0, "end": 199.0, "text": " So at the top left corner you can see a variety of arm SOCs and all the ones in yellow are", "tokens": [50614, 407, 412, 264, 1192, 1411, 4538, 291, 393, 536, 257, 5673, 295, 3726, 10621, 33290, 293, 439, 264, 2306, 294, 5566, 366, 51014], "temperature": 0.0, "avg_logprob": -0.16922934214274088, "compression_ratio": 1.5049019607843137, "no_speech_prob": 0.003016857197508216}, {"id": 45, "seek": 18600, "start": 199.0, "end": 207.0, "text": " actually not using standard UEFI or ACPI interfaces so they have proprietary builds, you get proprietary", "tokens": [51014, 767, 406, 1228, 3832, 42260, 38568, 420, 8157, 31701, 28416, 370, 436, 362, 38992, 15182, 11, 291, 483, 38992, 51414], "temperature": 0.0, "avg_logprob": -0.16922934214274088, "compression_ratio": 1.5049019607843137, "no_speech_prob": 0.003016857197508216}, {"id": 46, "seek": 18600, "start": 207.0, "end": 210.0, "text": " or board specific binaries.", "tokens": [51414, 420, 3150, 2685, 5171, 4889, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16922934214274088, "compression_ratio": 1.5049019607843137, "no_speech_prob": 0.003016857197508216}, {"id": 47, "seek": 21000, "start": 210.0, "end": 218.0, "text": " But for some, like the Raspberry Pi's or even AWS's Graviton Cloud servers, the same NOVA binary", "tokens": [50364, 583, 337, 512, 11, 411, 264, 41154, 17741, 311, 420, 754, 17650, 311, 8985, 10398, 266, 8061, 15909, 11, 264, 912, 9146, 20914, 17434, 50764], "temperature": 0.0, "avg_logprob": -0.1739969138639519, "compression_ratio": 1.5424528301886793, "no_speech_prob": 0.0033044940792024136}, {"id": 48, "seek": 21000, "start": 218.0, "end": 226.0, "text": " works all the way from small embedded devices with just a handful of cores all the way up to big cloud", "tokens": [50764, 1985, 439, 264, 636, 490, 1359, 16741, 5759, 365, 445, 257, 16458, 295, 24826, 439, 264, 636, 493, 281, 955, 4588, 51164], "temperature": 0.0, "avg_logprob": -0.1739969138639519, "compression_ratio": 1.5424528301886793, "no_speech_prob": 0.0033044940792024136}, {"id": 49, "seek": 21000, "start": 226.0, "end": 229.0, "text": " servers with in this case 64 cores.", "tokens": [51164, 15909, 365, 294, 341, 1389, 12145, 24826, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1739969138639519, "compression_ratio": 1.5424528301886793, "no_speech_prob": 0.0033044940792024136}, {"id": 50, "seek": 21000, "start": 229.0, "end": 235.0, "text": " And we have the same on the X86 world, actually the same binary runs on all these platforms", "tokens": [51314, 400, 321, 362, 264, 912, 322, 264, 1783, 22193, 1002, 11, 767, 264, 912, 17434, 6676, 322, 439, 613, 9473, 51614], "temperature": 0.0, "avg_logprob": -0.1739969138639519, "compression_ratio": 1.5424528301886793, "no_speech_prob": 0.0033044940792024136}, {"id": 51, "seek": 23500, "start": 235.0, "end": 241.0, "text": " whether this atom SOCs at the top right corner or client platforms that you see up there all the way", "tokens": [50364, 1968, 341, 12018, 10621, 33290, 412, 264, 1192, 558, 4538, 420, 6423, 9473, 300, 291, 536, 493, 456, 439, 264, 636, 50664], "temperature": 0.0, "avg_logprob": -0.12444409869966053, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.017553789541125298}, {"id": 52, "seek": 23500, "start": 241.0, "end": 247.0, "text": " again down to the largest cloud servers with over 100 of threads.", "tokens": [50664, 797, 760, 281, 264, 6443, 4588, 15909, 365, 670, 2319, 295, 19314, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12444409869966053, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.017553789541125298}, {"id": 53, "seek": 23500, "start": 247.0, "end": 254.0, "text": " So that actually required some infrastructure changes in NOVA but before we get there,", "tokens": [50964, 407, 300, 767, 4739, 512, 6896, 2962, 294, 9146, 20914, 457, 949, 321, 483, 456, 11, 51314], "temperature": 0.0, "avg_logprob": -0.12444409869966053, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.017553789541125298}, {"id": 54, "seek": 23500, "start": 254.0, "end": 260.0, "text": " in the interest of time I'm not doing any live demos but here you can see or if you can't read it", "tokens": [51314, 294, 264, 1179, 295, 565, 286, 478, 406, 884, 604, 1621, 33788, 457, 510, 291, 393, 536, 420, 498, 291, 393, 380, 1401, 309, 51614], "temperature": 0.0, "avg_logprob": -0.12444409869966053, "compression_ratio": 1.5194805194805194, "no_speech_prob": 0.017553789541125298}, {"id": 55, "seek": 26000, "start": 260.0, "end": 263.0, "text": " then look at the slides online.", "tokens": [50364, 550, 574, 412, 264, 9788, 2950, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11798463384789157, "compression_ratio": 1.4212962962962963, "no_speech_prob": 0.07024788111448288}, {"id": 56, "seek": 26000, "start": 263.0, "end": 267.0, "text": " The output of NOVA boots on Raspberry Pi 4 or 5.", "tokens": [50514, 440, 5598, 295, 9146, 20914, 15194, 322, 41154, 17741, 1017, 420, 1025, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11798463384789157, "compression_ratio": 1.4212962962962963, "no_speech_prob": 0.07024788111448288}, {"id": 57, "seek": 26000, "start": 267.0, "end": 275.0, "text": " So naturally we had an interest in making NOVA working on the Pi 5 and it just works out of the box", "tokens": [50714, 407, 8195, 321, 632, 364, 1179, 294, 1455, 9146, 20914, 1364, 322, 264, 17741, 1025, 293, 309, 445, 1985, 484, 295, 264, 2424, 51114], "temperature": 0.0, "avg_logprob": -0.11798463384789157, "compression_ratio": 1.4212962962962963, "no_speech_prob": 0.07024788111448288}, {"id": 58, "seek": 26000, "start": 275.0, "end": 278.0, "text": " if you use UEFI firmware.", "tokens": [51114, 498, 291, 764, 42260, 38568, 30289, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11798463384789157, "compression_ratio": 1.4212962962962963, "no_speech_prob": 0.07024788111448288}, {"id": 59, "seek": 26000, "start": 278.0, "end": 285.0, "text": " And the top line which is highlighted shows that it's actually the same build, so the same commit ID", "tokens": [51264, 400, 264, 1192, 1622, 597, 307, 17173, 3110, 300, 309, 311, 767, 264, 912, 1322, 11, 370, 264, 912, 5599, 7348, 51614], "temperature": 0.0, "avg_logprob": -0.11798463384789157, "compression_ratio": 1.4212962962962963, "no_speech_prob": 0.07024788111448288}, {"id": 60, "seek": 28500, "start": 285.0, "end": 289.0, "text": " and the same build timestamp and you can see the differences in the cores.", "tokens": [50364, 293, 264, 912, 1322, 49108, 1215, 293, 291, 393, 536, 264, 7300, 294, 264, 24826, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1543360698370286, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.004050493240356445}, {"id": 61, "seek": 28500, "start": 289.0, "end": 298.0, "text": " Raspberry Pi 4 uses a 72 cores and the Pi 5 uses a 76 cores.", "tokens": [50564, 41154, 17741, 1017, 4960, 257, 18731, 24826, 293, 264, 17741, 1025, 4960, 257, 24733, 24826, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1543360698370286, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.004050493240356445}, {"id": 62, "seek": 28500, "start": 298.0, "end": 302.0, "text": " And as I said the same binary also runs in the cloud.", "tokens": [51014, 400, 382, 286, 848, 264, 912, 17434, 611, 6676, 294, 264, 4588, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1543360698370286, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.004050493240356445}, {"id": 63, "seek": 28500, "start": 302.0, "end": 310.0, "text": " So if you take for example an AWS C7G metal instance you can run that binary and it will enumerate 64 cores", "tokens": [51214, 407, 498, 291, 747, 337, 1365, 364, 17650, 383, 22, 38, 5760, 5197, 291, 393, 1190, 300, 17434, 293, 309, 486, 465, 15583, 473, 12145, 24826, 51614], "temperature": 0.0, "avg_logprob": -0.1543360698370286, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.004050493240356445}, {"id": 64, "seek": 31000, "start": 310.0, "end": 317.0, "text": " actually our Neo-verse cores and it can also drive all of the PCI devices on a platform", "tokens": [50364, 767, 527, 24458, 12, 4308, 24826, 293, 309, 393, 611, 3332, 439, 295, 264, 6465, 40, 5759, 322, 257, 3663, 50714], "temperature": 0.0, "avg_logprob": -0.1385574146192901, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.007784705143421888}, {"id": 65, "seek": 31000, "start": 317.0, "end": 319.0, "text": " actually in multiple PCI segment groups.", "tokens": [50714, 767, 294, 3866, 6465, 40, 9469, 3935, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1385574146192901, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.007784705143421888}, {"id": 66, "seek": 31000, "start": 319.0, "end": 321.0, "text": " So I don't want to go into the details here.", "tokens": [50814, 407, 286, 500, 380, 528, 281, 352, 666, 264, 4365, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1385574146192901, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.007784705143421888}, {"id": 67, "seek": 31000, "start": 321.0, "end": 329.0, "text": " The same thing on x86 where you can see on the right side, so the left side is the beginning of the log", "tokens": [50914, 440, 912, 551, 322, 2031, 22193, 689, 291, 393, 536, 322, 264, 558, 1252, 11, 370, 264, 1411, 1252, 307, 264, 2863, 295, 264, 3565, 51314], "temperature": 0.0, "avg_logprob": -0.1385574146192901, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.007784705143421888}, {"id": 68, "seek": 31000, "start": 329.0, "end": 336.0, "text": " and the right side is the end of the log that we can actually run on machines with over 100 cores", "tokens": [51314, 293, 264, 558, 1252, 307, 264, 917, 295, 264, 3565, 300, 321, 393, 767, 1190, 322, 8379, 365, 670, 2319, 24826, 51664], "temperature": 0.0, "avg_logprob": -0.1385574146192901, "compression_ratio": 1.644736842105263, "no_speech_prob": 0.007784705143421888}, {"id": 69, "seek": 33600, "start": 336.0, "end": 340.0, "text": " with hundreds of PCI devices and tons of memory.", "tokens": [50364, 365, 6779, 295, 6465, 40, 5759, 293, 9131, 295, 4675, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0831039860135033, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.004522126633673906}, {"id": 70, "seek": 33600, "start": 340.0, "end": 344.0, "text": " So what did we have to do to make that work?", "tokens": [50564, 407, 437, 630, 321, 362, 281, 360, 281, 652, 300, 589, 30, 50764], "temperature": 0.0, "avg_logprob": -0.0831039860135033, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.004522126633673906}, {"id": 71, "seek": 33600, "start": 344.0, "end": 350.0, "text": " And I presented a similar thing in my talk last year, what I call an innovation timeline.", "tokens": [50764, 400, 286, 8212, 257, 2531, 551, 294, 452, 751, 1036, 1064, 11, 437, 286, 818, 364, 8504, 12933, 13, 51064], "temperature": 0.0, "avg_logprob": -0.0831039860135033, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.004522126633673906}, {"id": 72, "seek": 33600, "start": 350.0, "end": 356.0, "text": " We put out a new version of NOVA approximately every two months, so six releases per year.", "tokens": [51064, 492, 829, 484, 257, 777, 3037, 295, 9146, 20914, 10447, 633, 732, 2493, 11, 370, 2309, 16952, 680, 1064, 13, 51364], "temperature": 0.0, "avg_logprob": -0.0831039860135033, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.004522126633673906}, {"id": 73, "seek": 33600, "start": 356.0, "end": 360.0, "text": " And then some releases are more packed than others.", "tokens": [51364, 400, 550, 512, 16952, 366, 544, 13265, 813, 2357, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0831039860135033, "compression_ratio": 1.481818181818182, "no_speech_prob": 0.004522126633673906}, {"id": 74, "seek": 36000, "start": 360.0, "end": 370.0, "text": " So about a year ago we added some local APIC, registered virtualization and support for Atom Sox to NOVA.", "tokens": [50364, 407, 466, 257, 1064, 2057, 321, 3869, 512, 2654, 5372, 2532, 11, 13968, 6374, 2144, 293, 1406, 337, 1711, 298, 407, 87, 281, 9146, 20914, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16172947821679054, "compression_ratio": 1.5391705069124424, "no_speech_prob": 0.0018726979615166783}, {"id": 75, "seek": 36000, "start": 370.0, "end": 377.0, "text": " But then the more interesting work happened over the course of the first two releases or the next two releases at the beginning of the year", "tokens": [50864, 583, 550, 264, 544, 1880, 589, 2011, 670, 264, 1164, 295, 264, 700, 732, 16952, 420, 264, 958, 732, 16952, 412, 264, 2863, 295, 264, 1064, 51214], "temperature": 0.0, "avg_logprob": -0.16172947821679054, "compression_ratio": 1.5391705069124424, "no_speech_prob": 0.0018726979615166783}, {"id": 76, "seek": 36000, "start": 377.0, "end": 383.0, "text": " where I implemented support for Intel TXT which is trusted execution technology in NOVA.", "tokens": [51214, 689, 286, 12270, 1406, 337, 19762, 314, 20542, 597, 307, 16034, 15058, 2899, 294, 9146, 20914, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16172947821679054, "compression_ratio": 1.5391705069124424, "no_speech_prob": 0.0018726979615166783}, {"id": 77, "seek": 38300, "start": 383.0, "end": 391.0, "text": " And also to make NOVA work with really large core counts, we made the current memory pool extensible.", "tokens": [50364, 400, 611, 281, 652, 9146, 20914, 589, 365, 534, 2416, 4965, 14893, 11, 321, 1027, 264, 2190, 4675, 7005, 1279, 30633, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10379516647522707, "compression_ratio": 1.546218487394958, "no_speech_prob": 0.031738366931676865}, {"id": 78, "seek": 38300, "start": 391.0, "end": 400.0, "text": " So the bootloader has the choice of giving NOVA little or very large amounts of memory depending on how much a particular platform would want to use.", "tokens": [50764, 407, 264, 11450, 2907, 260, 575, 264, 3922, 295, 2902, 9146, 20914, 707, 420, 588, 2416, 11663, 295, 4675, 5413, 322, 577, 709, 257, 1729, 3663, 576, 528, 281, 764, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10379516647522707, "compression_ratio": 1.546218487394958, "no_speech_prob": 0.031738366931676865}, {"id": 79, "seek": 38300, "start": 400.0, "end": 407.0, "text": " And then in the middle of the year there were some minor adjustments to read, copy, update and capability management", "tokens": [51214, 400, 550, 294, 264, 2808, 295, 264, 1064, 456, 645, 512, 6696, 18624, 281, 1401, 11, 5055, 11, 5623, 293, 13759, 4592, 51564], "temperature": 0.0, "avg_logprob": -0.10379516647522707, "compression_ratio": 1.546218487394958, "no_speech_prob": 0.031738366931676865}, {"id": 80, "seek": 40700, "start": 407.0, "end": 413.0, "text": " that we will not talk about here today. And then at the end of last year for the Christmas release basically,", "tokens": [50364, 300, 321, 486, 406, 751, 466, 510, 965, 13, 400, 550, 412, 264, 917, 295, 1036, 1064, 337, 264, 5272, 4374, 1936, 11, 50664], "temperature": 0.0, "avg_logprob": -0.10278925849396048, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.15641161799430847}, {"id": 81, "seek": 40700, "start": 413.0, "end": 421.0, "text": " the TXT work was so complete that we could actually extend the trust chain all the way to the master controller, this blue component in New Zealand.", "tokens": [50664, 264, 314, 20542, 589, 390, 370, 3566, 300, 321, 727, 767, 10101, 264, 3361, 5021, 439, 264, 636, 281, 264, 4505, 10561, 11, 341, 3344, 6542, 294, 1873, 13883, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10278925849396048, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.15641161799430847}, {"id": 82, "seek": 40700, "start": 421.0, "end": 426.0, "text": " And then again for the first release of this year which is going to come out at the end of February,", "tokens": [51064, 400, 550, 797, 337, 264, 700, 4374, 295, 341, 1064, 597, 307, 516, 281, 808, 484, 412, 264, 917, 295, 8711, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10278925849396048, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.15641161799430847}, {"id": 83, "seek": 40700, "start": 426.0, "end": 434.0, "text": " you actually get even more functionality for the TPM and everything that's listed in bold.", "tokens": [51314, 291, 767, 483, 754, 544, 14980, 337, 264, 314, 18819, 293, 1203, 300, 311, 10052, 294, 11928, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10278925849396048, "compression_ratio": 1.6728624535315986, "no_speech_prob": 0.15641161799430847}, {"id": 84, "seek": 43400, "start": 434.0, "end": 439.0, "text": " So you'll be talking about in this presentation.", "tokens": [50364, 407, 291, 603, 312, 1417, 466, 294, 341, 5860, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09990196228027344, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.014357767067849636}, {"id": 85, "seek": 43400, "start": 439.0, "end": 445.0, "text": " So why do we want to do something in the area of trusted computing? What problem does that solve?", "tokens": [50614, 407, 983, 360, 321, 528, 281, 360, 746, 294, 264, 1859, 295, 16034, 15866, 30, 708, 1154, 775, 300, 5039, 30, 50914], "temperature": 0.0, "avg_logprob": -0.09990196228027344, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.014357767067849636}, {"id": 86, "seek": 43400, "start": 445.0, "end": 451.0, "text": " And I mentioned this in the introduction that we are formally verifying the entire ultravisor stack.", "tokens": [50914, 400, 286, 2835, 341, 294, 264, 9339, 300, 321, 366, 25983, 1306, 5489, 264, 2302, 14808, 16457, 8630, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09990196228027344, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.014357767067849636}, {"id": 87, "seek": 43400, "start": 451.0, "end": 457.0, "text": " So once that is complete, you know that the source code that you have fulfills its specification", "tokens": [51214, 407, 1564, 300, 307, 3566, 11, 291, 458, 300, 264, 4009, 3089, 300, 291, 362, 8081, 2565, 1080, 31256, 51514], "temperature": 0.0, "avg_logprob": -0.09990196228027344, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.014357767067849636}, {"id": 88, "seek": 43400, "start": 457.0, "end": 463.0, "text": " and maybe you have a qualified compiler that compiles this verified source code into some binaries.", "tokens": [51514, 293, 1310, 291, 362, 257, 15904, 31958, 300, 715, 4680, 341, 31197, 4009, 3089, 666, 512, 5171, 4889, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09990196228027344, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.014357767067849636}, {"id": 89, "seek": 46300, "start": 463.0, "end": 466.0, "text": " And even if you have that, things can go wrong.", "tokens": [50364, 400, 754, 498, 291, 362, 300, 11, 721, 393, 352, 2085, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1029168963432312, "compression_ratio": 1.8744588744588744, "no_speech_prob": 0.021694492548704147}, {"id": 90, "seek": 46300, "start": 466.0, "end": 472.0, "text": " The binaries can be tampered with by an attacker either during the installation process, during the boot process,", "tokens": [50514, 440, 5171, 4889, 393, 312, 7677, 40004, 365, 538, 364, 35871, 2139, 1830, 264, 13260, 1399, 11, 1830, 264, 11450, 1399, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1029168963432312, "compression_ratio": 1.8744588744588744, "no_speech_prob": 0.021694492548704147}, {"id": 91, "seek": 46300, "start": 472.0, "end": 480.0, "text": " or after installation and you want to know that the binaries that you built are actually the ones that are running or are being launched on a computer.", "tokens": [50814, 420, 934, 13260, 293, 291, 528, 281, 458, 300, 264, 5171, 4889, 300, 291, 3094, 366, 767, 264, 2306, 300, 366, 2614, 420, 366, 885, 8730, 322, 257, 3820, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1029168963432312, "compression_ratio": 1.8744588744588744, "no_speech_prob": 0.021694492548704147}, {"id": 92, "seek": 46300, "start": 480.0, "end": 490.0, "text": " So you want to know that some remote computer is actually running exactly those binaries and not some modified version.", "tokens": [51214, 407, 291, 528, 281, 458, 300, 512, 8607, 3820, 307, 767, 2614, 2293, 729, 5171, 4889, 293, 406, 512, 15873, 3037, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1029168963432312, "compression_ratio": 1.8744588744588744, "no_speech_prob": 0.021694492548704147}, {"id": 93, "seek": 49000, "start": 490.0, "end": 501.0, "text": " Before you give that computer some precious content like your super secret K-I algorithm or some secret data.", "tokens": [50364, 4546, 291, 976, 300, 3820, 512, 12406, 2701, 411, 428, 1687, 4054, 591, 12, 40, 9284, 420, 512, 4054, 1412, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13898717164993285, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.006359952036291361}, {"id": 94, "seek": 49000, "start": 501.0, "end": 506.0, "text": " So in order to understand what trusted computing and what a chain of trust is,", "tokens": [50914, 407, 294, 1668, 281, 1223, 437, 16034, 15866, 293, 437, 257, 5021, 295, 3361, 307, 11, 51164], "temperature": 0.0, "avg_logprob": -0.13898717164993285, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.006359952036291361}, {"id": 95, "seek": 49000, "start": 506.0, "end": 511.0, "text": " we have to look at the concept of what people commonly call secure boot.", "tokens": [51164, 321, 362, 281, 574, 412, 264, 3410, 295, 437, 561, 12719, 818, 7144, 11450, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13898717164993285, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.006359952036291361}, {"id": 96, "seek": 49000, "start": 511.0, "end": 515.0, "text": " And secure boot is not a very precise term. The better term is actually verified boot.", "tokens": [51414, 400, 7144, 11450, 307, 406, 257, 588, 13600, 1433, 13, 440, 1101, 1433, 307, 767, 31197, 11450, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13898717164993285, "compression_ratio": 1.6415094339622642, "no_speech_prob": 0.006359952036291361}, {"id": 97, "seek": 51500, "start": 515.0, "end": 522.0, "text": " And verified boot works like this, that you have some immutable root of trust in this slide showing green.", "tokens": [50364, 400, 31197, 11450, 1985, 411, 341, 11, 300, 291, 362, 512, 3397, 32148, 5593, 295, 3361, 294, 341, 4137, 4099, 3092, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13768362998962402, "compression_ratio": 1.6040609137055837, "no_speech_prob": 0.17224563658237457}, {"id": 98, "seek": 51500, "start": 522.0, "end": 528.0, "text": " And that's the initial stage and it's immutable and it's a root of trust because you cannot reason about it's correct.", "tokens": [50714, 400, 300, 311, 264, 5883, 3233, 293, 309, 311, 3397, 32148, 293, 309, 311, 257, 5593, 295, 3361, 570, 291, 2644, 1778, 466, 309, 311, 3006, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13768362998962402, "compression_ratio": 1.6040609137055837, "no_speech_prob": 0.17224563658237457}, {"id": 99, "seek": 51500, "start": 528.0, "end": 533.0, "text": " You have to assume it is correct and it's usually implemented in ROM which doesn't change.", "tokens": [51014, 509, 362, 281, 6552, 309, 307, 3006, 293, 309, 311, 2673, 12270, 294, 41678, 597, 1177, 380, 1319, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13768362998962402, "compression_ratio": 1.6040609137055837, "no_speech_prob": 0.17224563658237457}, {"id": 100, "seek": 53300, "start": 533.0, "end": 546.0, "text": " And then every stage like, oops, every stage measures the integrity of the next stage and verifies it against some policy.", "tokens": [50364, 400, 550, 633, 3233, 411, 11, 34166, 11, 633, 3233, 8000, 264, 16000, 295, 264, 958, 3233, 293, 1306, 11221, 309, 1970, 512, 3897, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12329693300178252, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.07324734330177307}, {"id": 101, "seek": 53300, "start": 546.0, "end": 553.0, "text": " And if the verification succeeds then the next stage gets launched and if the verification fails then you fail the boot.", "tokens": [51014, 400, 498, 264, 30206, 49263, 550, 264, 958, 3233, 2170, 8730, 293, 498, 264, 30206, 18199, 550, 291, 3061, 264, 11450, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12329693300178252, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.07324734330177307}, {"id": 102, "seek": 53300, "start": 553.0, "end": 562.0, "text": " And this is basically establishing a transitive chain of trust and the thing we care about the NOVA hypervisor is at the very end.", "tokens": [51364, 400, 341, 307, 1936, 22494, 257, 1145, 2187, 5021, 295, 3361, 293, 264, 551, 321, 1127, 466, 264, 9146, 20914, 9848, 16457, 307, 412, 264, 588, 917, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12329693300178252, "compression_ratio": 1.7725118483412323, "no_speech_prob": 0.07324734330177307}, {"id": 103, "seek": 56200, "start": 562.0, "end": 567.0, "text": " And this chain of trust only works if everybody before gets everything right.", "tokens": [50364, 400, 341, 5021, 295, 3361, 787, 1985, 498, 2201, 949, 2170, 1203, 558, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0768713464542311, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.006979706231504679}, {"id": 104, "seek": 56200, "start": 567.0, "end": 577.0, "text": " And that's hard because there's millions of lines of code living in all these boxes and some of these boxes are actually very complicated and extensible.", "tokens": [50614, 400, 300, 311, 1152, 570, 456, 311, 6803, 295, 3876, 295, 3089, 2647, 294, 439, 613, 9002, 293, 512, 295, 613, 9002, 366, 767, 588, 6179, 293, 1279, 30633, 13, 51114], "temperature": 0.0, "avg_logprob": -0.0768713464542311, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.006979706231504679}, {"id": 105, "seek": 56200, "start": 577.0, "end": 580.0, "text": " So the E in UEFI actually stands for extensible.", "tokens": [51114, 407, 264, 462, 294, 42260, 38568, 767, 7382, 337, 1279, 30633, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0768713464542311, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.006979706231504679}, {"id": 106, "seek": 56200, "start": 580.0, "end": 587.0, "text": " And the moment you make a change in any of those components, could be you add a new PCI card or you change the order of your boot devices,", "tokens": [51264, 400, 264, 1623, 291, 652, 257, 1319, 294, 604, 295, 729, 6677, 11, 727, 312, 291, 909, 257, 777, 6465, 40, 2920, 420, 291, 1319, 264, 1668, 295, 428, 11450, 5759, 11, 51614], "temperature": 0.0, "avg_logprob": -0.0768713464542311, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.006979706231504679}, {"id": 107, "seek": 58700, "start": 587.0, "end": 589.0, "text": " it changes the measurement.", "tokens": [50364, 309, 2962, 264, 13160, 13, 50464], "temperature": 0.0, "avg_logprob": -0.10474783374417213, "compression_ratio": 1.5495049504950495, "no_speech_prob": 0.07491517812013626}, {"id": 108, "seek": 58700, "start": 589.0, "end": 600.0, "text": " So keeping your databases of permitted integrity measurements or denied measurements up to date is hard.", "tokens": [50464, 407, 5145, 428, 22380, 295, 28658, 16000, 15383, 420, 17774, 15383, 493, 281, 4002, 307, 1152, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10474783374417213, "compression_ratio": 1.5495049504950495, "no_speech_prob": 0.07491517812013626}, {"id": 109, "seek": 58700, "start": 600.0, "end": 613.0, "text": " And the industry has learned this recently when UEFI was affected by this logo fail vulnerability which basically forced every vendor to deploy a new version of their UEFI firmware", "tokens": [51014, 400, 264, 3518, 575, 3264, 341, 3938, 562, 42260, 38568, 390, 8028, 538, 341, 9699, 3061, 24210, 597, 1936, 7579, 633, 24321, 281, 7274, 257, 777, 3037, 295, 641, 42260, 38568, 30289, 51664], "temperature": 0.0, "avg_logprob": -0.10474783374417213, "compression_ratio": 1.5495049504950495, "no_speech_prob": 0.07491517812013626}, {"id": 110, "seek": 61300, "start": 613.0, "end": 618.0, "text": " and to blacklist in the DBX database the old version that they had.", "tokens": [50364, 293, 281, 2211, 8264, 294, 264, 26754, 55, 8149, 264, 1331, 3037, 300, 436, 632, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08953645391371644, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0411178395152092}, {"id": 111, "seek": 61300, "start": 618.0, "end": 622.0, "text": " So it is not very flexible and it is a very brittle thing.", "tokens": [50614, 407, 309, 307, 406, 588, 11358, 293, 309, 307, 257, 588, 49325, 551, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08953645391371644, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0411178395152092}, {"id": 112, "seek": 61300, "start": 622.0, "end": 629.0, "text": " And the screen box here in the background shows that all of this stuff actually belongs to your trusted computing base.", "tokens": [50814, 400, 264, 2568, 2424, 510, 294, 264, 3678, 3110, 300, 439, 295, 341, 1507, 767, 12953, 281, 428, 16034, 15866, 3096, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08953645391371644, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0411178395152092}, {"id": 113, "seek": 61300, "start": 629.0, "end": 638.0, "text": " Because if any of these components actually modifies or trashes the binary, then even though you formally verified your source code,", "tokens": [51164, 1436, 498, 604, 295, 613, 6677, 767, 1072, 11221, 420, 11321, 279, 264, 17434, 11, 550, 754, 1673, 291, 25983, 31197, 428, 4009, 3089, 11, 51614], "temperature": 0.0, "avg_logprob": -0.08953645391371644, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0411178395152092}, {"id": 114, "seek": 61300, "start": 638.0, "end": 641.0, "text": " this binary is not going to do what you want it to do.", "tokens": [51614, 341, 17434, 307, 406, 516, 281, 360, 437, 291, 528, 309, 281, 360, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08953645391371644, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0411178395152092}, {"id": 115, "seek": 64100, "start": 641.0, "end": 643.0, "text": " So can we do better?", "tokens": [50364, 407, 393, 321, 360, 1101, 30, 50464], "temperature": 0.0, "avg_logprob": -0.08546763081704417, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00687573803588748}, {"id": 116, "seek": 64100, "start": 643.0, "end": 650.0, "text": " This is an open source conference and we are not so much interested in DRM, we are interested in freedom.", "tokens": [50464, 639, 307, 364, 1269, 4009, 7586, 293, 321, 366, 406, 370, 709, 3102, 294, 12118, 44, 11, 321, 366, 3102, 294, 5645, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08546763081704417, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00687573803588748}, {"id": 117, "seek": 64100, "start": 650.0, "end": 656.0, "text": " So we don't want to enforce boot policies, we want to instead use a concept called measure boot.", "tokens": [50814, 407, 321, 500, 380, 528, 281, 24825, 11450, 7657, 11, 321, 528, 281, 2602, 764, 257, 3410, 1219, 3481, 11450, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08546763081704417, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00687573803588748}, {"id": 118, "seek": 64100, "start": 656.0, "end": 665.0, "text": " And it works very similar that a stage measures the integrity of the next stage but then doesn't take an immediate decision on whether the next stage is good or bad.", "tokens": [51114, 400, 309, 1985, 588, 2531, 300, 257, 3233, 8000, 264, 16000, 295, 264, 958, 3233, 457, 550, 1177, 380, 747, 364, 11629, 3537, 322, 1968, 264, 958, 3233, 307, 665, 420, 1578, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08546763081704417, "compression_ratio": 1.6553191489361703, "no_speech_prob": 0.00687573803588748}, {"id": 119, "seek": 66500, "start": 665.0, "end": 675.0, "text": " Instead this measurement simply gets extended into a TPM platform configuration register which stores this value for a later attestation request.", "tokens": [50364, 7156, 341, 13160, 2935, 2170, 10913, 666, 257, 314, 18819, 3663, 11694, 7280, 597, 9512, 341, 2158, 337, 257, 1780, 951, 377, 399, 5308, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10149776018582858, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0730808824300766}, {"id": 120, "seek": 66500, "start": 675.0, "end": 680.0, "text": " And then the next stage gets executed.", "tokens": [50864, 400, 550, 264, 958, 3233, 2170, 17577, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10149776018582858, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0730808824300766}, {"id": 121, "seek": 66500, "start": 680.0, "end": 691.0, "text": " And there is still the problem that certain stages like UEFI and the boot loader are extensible and that they sort of leave a very hard to manage gap in this trust chain.", "tokens": [51114, 400, 456, 307, 920, 264, 1154, 300, 1629, 10232, 411, 42260, 38568, 293, 264, 11450, 3677, 260, 366, 1279, 30633, 293, 300, 436, 1333, 295, 1856, 257, 588, 1152, 281, 3067, 7417, 294, 341, 3361, 5021, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10149776018582858, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0730808824300766}, {"id": 122, "seek": 69100, "start": 691.0, "end": 698.0, "text": " But there is also the problem that typically the whole boot process is not protected against DMA.", "tokens": [50364, 583, 456, 307, 611, 264, 1154, 300, 5850, 264, 1379, 11450, 1399, 307, 406, 10594, 1970, 413, 9998, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14194642066955565, "compression_ratio": 1.615686274509804, "no_speech_prob": 0.016862593591213226}, {"id": 123, "seek": 69100, "start": 698.0, "end": 706.0, "text": " So these components do not make use of an IOMU or SMMU which means even if the software is correct you could have a USB device or some FireWire device,", "tokens": [50714, 407, 613, 6677, 360, 406, 652, 764, 295, 364, 286, 5251, 52, 420, 13115, 44, 52, 597, 1355, 754, 498, 264, 4722, 307, 3006, 291, 727, 362, 257, 10109, 4302, 420, 512, 7652, 54, 621, 4302, 11, 51114], "temperature": 0.0, "avg_logprob": -0.14194642066955565, "compression_ratio": 1.615686274509804, "no_speech_prob": 0.016862593591213226}, {"id": 124, "seek": 69100, "start": 706.0, "end": 712.0, "text": " some DMA capable device that simply DMAs into this memory and trashes the software that way.", "tokens": [51114, 512, 413, 9998, 8189, 4302, 300, 2935, 413, 9998, 82, 666, 341, 4675, 293, 11321, 279, 264, 4722, 300, 636, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14194642066955565, "compression_ratio": 1.615686274509804, "no_speech_prob": 0.016862593591213226}, {"id": 125, "seek": 69100, "start": 712.0, "end": 718.0, "text": " So again the trusted computing base isn't really getting any smaller.", "tokens": [51414, 407, 797, 264, 16034, 15866, 3096, 1943, 380, 534, 1242, 604, 4356, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14194642066955565, "compression_ratio": 1.615686274509804, "no_speech_prob": 0.016862593591213226}, {"id": 126, "seek": 71800, "start": 719.0, "end": 721.0, "text": " So can we do better than that?", "tokens": [50414, 407, 393, 321, 360, 1101, 813, 300, 30, 50514], "temperature": 0.0, "avg_logprob": -0.11070221900939942, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.02424544095993042}, {"id": 127, "seek": 71800, "start": 721.0, "end": 729.0, "text": " Yes, we can and this extends the concept of measured launch with a dynamic root of trust.", "tokens": [50514, 1079, 11, 321, 393, 293, 341, 26448, 264, 3410, 295, 12690, 4025, 365, 257, 8546, 5593, 295, 3361, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11070221900939942, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.02424544095993042}, {"id": 128, "seek": 71800, "start": 729.0, "end": 733.0, "text": " And the core idea is that you can't really change anything in this boot chain.", "tokens": [50914, 400, 264, 4965, 1558, 307, 300, 291, 393, 380, 534, 1319, 1340, 294, 341, 11450, 5021, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11070221900939942, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.02424544095993042}, {"id": 129, "seek": 71800, "start": 733.0, "end": 744.0, "text": " You still have to execute all the firmware, you still have to load all your drivers, your firmware drivers, you still have to make a boot loader like a boot choice and you still have to initialize your memory controllers.", "tokens": [51114, 509, 920, 362, 281, 14483, 439, 264, 30289, 11, 291, 920, 362, 281, 3677, 439, 428, 11590, 11, 428, 30289, 11590, 11, 291, 920, 362, 281, 652, 257, 11450, 3677, 260, 411, 257, 11450, 3922, 293, 291, 920, 362, 281, 5883, 1125, 428, 4675, 26903, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11070221900939942, "compression_ratio": 1.7914893617021277, "no_speech_prob": 0.02424544095993042}, {"id": 130, "seek": 74400, "start": 744.0, "end": 747.0, "text": " But you can do all of this in a dirty environment.", "tokens": [50364, 583, 291, 393, 360, 439, 295, 341, 294, 257, 9360, 2823, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06681027131922104, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.010023015551269054}, {"id": 131, "seek": 74400, "start": 747.0, "end": 755.0, "text": " So a dynamic root of trust lets the system boot into initially an untrustworthy state.", "tokens": [50514, 407, 257, 8546, 5593, 295, 3361, 6653, 264, 1185, 11450, 666, 9105, 364, 1701, 22326, 23727, 1785, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06681027131922104, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.010023015551269054}, {"id": 132, "seek": 74400, "start": 755.0, "end": 765.0, "text": " So we don't really care if anything that happens to this point and only at this point we want to bring the platform into a pristine state.", "tokens": [50914, 407, 321, 500, 380, 534, 1127, 498, 1340, 300, 2314, 281, 341, 935, 293, 787, 412, 341, 935, 321, 528, 281, 1565, 264, 3663, 666, 257, 582, 42745, 1785, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06681027131922104, "compression_ratio": 1.5862068965517242, "no_speech_prob": 0.010023015551269054}, {"id": 133, "seek": 76500, "start": 765.0, "end": 778.0, "text": " And this is very interesting how this works because what the effect if you do here represented by this green bolt is it is a disruptive event which feels a bit like a platform reset but it doesn't reboot the machine.", "tokens": [50364, 400, 341, 307, 588, 1880, 577, 341, 1985, 570, 437, 264, 1802, 498, 291, 360, 510, 10379, 538, 341, 3092, 13436, 307, 309, 307, 257, 37865, 2280, 597, 3417, 257, 857, 411, 257, 3663, 14322, 457, 309, 1177, 380, 33818, 264, 3479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1720442254859281, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.1694040596485138}, {"id": 134, "seek": 76500, "start": 778.0, "end": 782.0, "text": " It just brings the CPU into a well-defined state.", "tokens": [51014, 467, 445, 5607, 264, 13199, 666, 257, 731, 12, 37716, 1785, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1720442254859281, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.1694040596485138}, {"id": 135, "seek": 76500, "start": 782.0, "end": 787.0, "text": " It's actually a protective mode with a paging turned off and it holds all the other cores.", "tokens": [51214, 467, 311, 767, 257, 16314, 4391, 365, 257, 280, 3568, 3574, 766, 293, 309, 9190, 439, 264, 661, 24826, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1720442254859281, "compression_ratio": 1.5321888412017168, "no_speech_prob": 0.1694040596485138}, {"id": 136, "seek": 78700, "start": 787.0, "end": 798.0, "text": " You can see that in a moment and it forces the execution after this launch event to a code pass which has previously been measured and protected.", "tokens": [50364, 509, 393, 536, 300, 294, 257, 1623, 293, 309, 5874, 264, 15058, 934, 341, 4025, 2280, 281, 257, 3089, 1320, 597, 575, 8046, 668, 12690, 293, 10594, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1269122778651226, "compression_ratio": 1.5127118644067796, "no_speech_prob": 0.30593612790107727}, {"id": 137, "seek": 78700, "start": 798.0, "end": 802.0, "text": " So we don't care about all this stuff in the red box anymore.", "tokens": [50914, 407, 321, 500, 380, 1127, 466, 439, 341, 1507, 294, 264, 2182, 2424, 3602, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1269122778651226, "compression_ratio": 1.5127118644067796, "no_speech_prob": 0.30593612790107727}, {"id": 138, "seek": 78700, "start": 802.0, "end": 815.0, "text": " That gets eliminated from the TCB which is great because it eliminates millions of instructions and our TCB is now just this DLTM sequence plus NOVA.", "tokens": [51114, 663, 2170, 20308, 490, 264, 34150, 33, 597, 307, 869, 570, 309, 49893, 6803, 295, 9415, 293, 527, 34150, 33, 307, 586, 445, 341, 413, 43, 42023, 8310, 1804, 9146, 20914, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1269122778651226, "compression_ratio": 1.5127118644067796, "no_speech_prob": 0.30593612790107727}, {"id": 139, "seek": 81500, "start": 815.0, "end": 817.0, "text": " So what do we need for that?", "tokens": [50364, 407, 437, 360, 321, 643, 337, 300, 30, 50464], "temperature": 0.0, "avg_logprob": -0.10739168131126547, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.005612547509372234}, {"id": 140, "seek": 81500, "start": 817.0, "end": 822.0, "text": " The technology that gives us this on Intel platforms is called Intel TXT.", "tokens": [50464, 440, 2899, 300, 2709, 505, 341, 322, 19762, 9473, 307, 1219, 19762, 314, 20542, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10739168131126547, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.005612547509372234}, {"id": 141, "seek": 81500, "start": 822.0, "end": 829.0, "text": " You may also come across the acronym CDNT which just is short for Converged Boot Guard and TXT.", "tokens": [50714, 509, 815, 611, 808, 2108, 264, 39195, 6743, 30817, 597, 445, 307, 2099, 337, 2656, 331, 3004, 37263, 11549, 293, 314, 20542, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10739168131126547, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.005612547509372234}, {"id": 142, "seek": 81500, "start": 829.0, "end": 836.0, "text": " So Intel has fused the static root of trust which is boot guard with the dynamic root of trust which is TXT into one technology.", "tokens": [51064, 407, 19762, 575, 283, 4717, 264, 13437, 5593, 295, 3361, 597, 307, 11450, 6290, 365, 264, 8546, 5593, 295, 3361, 597, 307, 314, 20542, 666, 472, 2899, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10739168131126547, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.005612547509372234}, {"id": 143, "seek": 81500, "start": 836.0, "end": 838.0, "text": " And TXT is the one we care about.", "tokens": [51414, 400, 314, 20542, 307, 264, 472, 321, 1127, 466, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10739168131126547, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.005612547509372234}, {"id": 144, "seek": 81500, "start": 838.0, "end": 840.0, "text": " This gives us the DLTM.", "tokens": [51514, 639, 2709, 505, 264, 413, 43, 42023, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10739168131126547, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.005612547509372234}, {"id": 145, "seek": 84000, "start": 840.0, "end": 854.0, "text": " You need a CPU that supports this and you need a TXT capable chipset and a TPM preferably TPM 2.0 because TPM 1.2 is really old and it can only do deprecated hash algorithms.", "tokens": [50364, 509, 643, 257, 13199, 300, 9346, 341, 293, 291, 643, 257, 314, 20542, 8189, 11583, 302, 293, 257, 314, 18819, 45916, 314, 18819, 568, 13, 15, 570, 314, 18819, 502, 13, 17, 307, 534, 1331, 293, 309, 393, 787, 360, 1367, 13867, 770, 22019, 14642, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12765645097803185, "compression_ratio": 1.633587786259542, "no_speech_prob": 0.04195771366357803}, {"id": 146, "seek": 84000, "start": 854.0, "end": 857.0, "text": " And you need an SINNET module which matches your platform.", "tokens": [51064, 400, 291, 643, 364, 318, 1464, 45, 4850, 10088, 597, 10676, 428, 3663, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12765645097803185, "compression_ratio": 1.633587786259542, "no_speech_prob": 0.04195771366357803}, {"id": 147, "seek": 84000, "start": 857.0, "end": 868.0, "text": " And the purpose of this SINNET module is the module that Intel provides that you can download from their website is to initialize and verify the platform in a way that it is securely configured.", "tokens": [51214, 400, 264, 4334, 295, 341, 318, 1464, 45, 4850, 10088, 307, 264, 10088, 300, 19762, 6417, 300, 291, 393, 5484, 490, 641, 3144, 307, 281, 5883, 1125, 293, 16888, 264, 3663, 294, 257, 636, 300, 309, 307, 38348, 30538, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12765645097803185, "compression_ratio": 1.633587786259542, "no_speech_prob": 0.04195771366357803}, {"id": 148, "seek": 86800, "start": 869.0, "end": 878.0, "text": " And once you do this you can later do a remote attestation by asking the TPM what these measurements in all the platform configuration registers are.", "tokens": [50414, 400, 1564, 291, 360, 341, 291, 393, 1780, 360, 257, 8607, 951, 377, 399, 538, 3365, 264, 314, 18819, 437, 613, 15383, 294, 439, 264, 3663, 11694, 38351, 366, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12059750340201637, "compression_ratio": 1.5991735537190082, "no_speech_prob": 0.007765651680529118}, {"id": 149, "seek": 86800, "start": 878.0, "end": 889.0, "text": " And then you can remotely take a trust decision to say if this PCR contains some value do I recognize this value as belonging to NOVA's December release or NOVA's February release.", "tokens": [50864, 400, 550, 291, 393, 20824, 747, 257, 3361, 3537, 281, 584, 498, 341, 44022, 8306, 512, 2158, 360, 286, 5521, 341, 2158, 382, 22957, 281, 9146, 20914, 311, 7687, 4374, 420, 9146, 20914, 311, 8711, 4374, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12059750340201637, "compression_ratio": 1.5991735537190082, "no_speech_prob": 0.007765651680529118}, {"id": 150, "seek": 86800, "start": 889.0, "end": 894.0, "text": " And who knows why there is this sign of like grant here.", "tokens": [51414, 400, 567, 3255, 983, 456, 307, 341, 1465, 295, 411, 6386, 510, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12059750340201637, "compression_ratio": 1.5991735537190082, "no_speech_prob": 0.007765651680529118}, {"id": 151, "seek": 89400, "start": 895.0, "end": 907.0, "text": " So Intel develops all its technologies under code names and the code name for Intel TXT many years ago used to be called Lagrange technology and this is named after a city in eastern Oregon.", "tokens": [50414, 407, 19762, 25453, 439, 1080, 7943, 833, 3089, 5288, 293, 264, 3089, 1315, 337, 19762, 314, 20542, 867, 924, 2057, 1143, 281, 312, 1219, 24886, 14521, 2899, 293, 341, 307, 4926, 934, 257, 2307, 294, 19346, 18664, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15912386397240866, "compression_ratio": 1.5235849056603774, "no_speech_prob": 0.0027068147901445627}, {"id": 152, "seek": 89400, "start": 907.0, "end": 916.0, "text": " So what happens when you do this disruptive event? How does this reset the platform without rebooting it? And it's very interesting.", "tokens": [51014, 407, 437, 2314, 562, 291, 360, 341, 37865, 2280, 30, 1012, 775, 341, 14322, 264, 3663, 1553, 26802, 17001, 309, 30, 400, 309, 311, 588, 1880, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15912386397240866, "compression_ratio": 1.5235849056603774, "no_speech_prob": 0.0027068147901445627}, {"id": 153, "seek": 91600, "start": 916.0, "end": 923.0, "text": " So first of all we have a number of processors. Here this just shows four so these are four lanes.", "tokens": [50364, 407, 700, 295, 439, 321, 362, 257, 1230, 295, 27751, 13, 1692, 341, 445, 3110, 1451, 370, 613, 366, 1451, 25397, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1192485355195545, "compression_ratio": 1.823293172690763, "no_speech_prob": 0.03405316546559334}, {"id": 154, "seek": 91600, "start": 923.0, "end": 930.0, "text": " And we have one processor which we call the initiating logical processor. That's the one which initiates the DM sequence.", "tokens": [50714, 400, 321, 362, 472, 15321, 597, 321, 818, 264, 6265, 990, 14978, 15321, 13, 663, 311, 264, 472, 597, 6265, 1024, 264, 15322, 8310, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1192485355195545, "compression_ratio": 1.823293172690763, "no_speech_prob": 0.03405316546559334}, {"id": 155, "seek": 91600, "start": 930.0, "end": 936.0, "text": " And we have in this case three responding processors which maybe in some arbitrary state we don't know.", "tokens": [51064, 400, 321, 362, 294, 341, 1389, 1045, 16670, 27751, 597, 1310, 294, 512, 23211, 1785, 321, 500, 380, 458, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1192485355195545, "compression_ratio": 1.823293172690763, "no_speech_prob": 0.03405316546559334}, {"id": 156, "seek": 91600, "start": 936.0, "end": 942.0, "text": " They could be sitting in some idle loop. They could be executing malicious code. We simply don't know what they do at this point.", "tokens": [51364, 814, 727, 312, 3798, 294, 512, 30650, 6367, 13, 814, 727, 312, 32368, 33496, 3089, 13, 492, 2935, 500, 380, 458, 437, 436, 360, 412, 341, 935, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1192485355195545, "compression_ratio": 1.823293172690763, "no_speech_prob": 0.03405316546559334}, {"id": 157, "seek": 94200, "start": 942.0, "end": 957.0, "text": " But we also don't care. And then some time before the disruptive launch event the code for NOVA which is in this case called MLE the measure launch environment.", "tokens": [50364, 583, 321, 611, 500, 380, 1127, 13, 400, 550, 512, 565, 949, 264, 37865, 4025, 2280, 264, 3089, 337, 9146, 20914, 597, 307, 294, 341, 1389, 1219, 376, 2634, 264, 3481, 4025, 2823, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17346376180648804, "compression_ratio": 1.5687203791469195, "no_speech_prob": 0.00720960320904851}, {"id": 158, "seek": 94200, "start": 957.0, "end": 963.0, "text": " And this is in it ACM must have been loaded into memory and again they could have been corrupted in memory.", "tokens": [51114, 400, 341, 307, 294, 309, 8157, 44, 1633, 362, 668, 13210, 666, 4675, 293, 797, 436, 727, 362, 668, 39480, 294, 4675, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17346376180648804, "compression_ratio": 1.5687203791469195, "no_speech_prob": 0.00720960320904851}, {"id": 159, "seek": 94200, "start": 963.0, "end": 967.0, "text": " It could be the wrong version. We don't take a decision there.", "tokens": [51414, 467, 727, 312, 264, 2085, 3037, 13, 492, 500, 380, 747, 257, 3537, 456, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17346376180648804, "compression_ratio": 1.5687203791469195, "no_speech_prob": 0.00720960320904851}, {"id": 160, "seek": 96700, "start": 967.0, "end": 974.0, "text": " And then later there can be an arbitrary amount of time that passes minutes hours. We can do this a week later. It doesn't matter.", "tokens": [50364, 400, 550, 1780, 456, 393, 312, 364, 23211, 2372, 295, 565, 300, 11335, 2077, 2496, 13, 492, 393, 360, 341, 257, 1243, 1780, 13, 467, 1177, 380, 1871, 13, 50714], "temperature": 0.0, "avg_logprob": -0.135950129372733, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.016864601522684097}, {"id": 161, "seek": 96700, "start": 974.0, "end": 980.0, "text": " Some component is executing this DLTM which is a specific processor instruction.", "tokens": [50714, 2188, 6542, 307, 32368, 341, 413, 43, 42023, 597, 307, 257, 2685, 15321, 10951, 13, 51014], "temperature": 0.0, "avg_logprob": -0.135950129372733, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.016864601522684097}, {"id": 162, "seek": 96700, "start": 980.0, "end": 986.0, "text": " And what happens when you execute this processor instruction which is privileged is that everything resets.", "tokens": [51014, 400, 437, 2314, 562, 291, 14483, 341, 15321, 10951, 597, 307, 25293, 307, 300, 1203, 725, 1385, 13, 51314], "temperature": 0.0, "avg_logprob": -0.135950129372733, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.016864601522684097}, {"id": 163, "seek": 98600, "start": 986.0, "end": 990.0, "text": " And the chipset broadcasts an S-enter cycle on the interconnect.", "tokens": [50364, 400, 264, 11583, 302, 9975, 82, 364, 318, 12, 14278, 6586, 322, 264, 26253, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1851150386936062, "compression_ratio": 1.7718446601941749, "no_speech_prob": 0.17445318400859833}, {"id": 164, "seek": 98600, "start": 990.0, "end": 996.0, "text": " And the S-enter cycle basically initiates all the, initializes all the processors into an S-enter sleep state.", "tokens": [50564, 400, 264, 318, 12, 14278, 6586, 1936, 6265, 1024, 439, 264, 11, 5883, 5660, 439, 264, 27751, 666, 364, 318, 12, 14278, 2817, 1785, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1851150386936062, "compression_ratio": 1.7718446601941749, "no_speech_prob": 0.17445318400859833}, {"id": 165, "seek": 98600, "start": 996.0, "end": 1002.0, "text": " So we now know that all the other processors, all the pieces are not executing any instruction. They are sleeping.", "tokens": [50864, 407, 321, 586, 458, 300, 439, 264, 661, 27751, 11, 439, 264, 3755, 366, 406, 32368, 604, 10951, 13, 814, 366, 8296, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1851150386936062, "compression_ratio": 1.7718446601941749, "no_speech_prob": 0.17445318400859833}, {"id": 166, "seek": 98600, "start": 1002.0, "end": 1010.0, "text": " And it transitions control to this S-init ACM and it checks its integrity.", "tokens": [51164, 400, 309, 23767, 1969, 281, 341, 318, 12, 259, 270, 8157, 44, 293, 309, 13834, 1080, 16000, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1851150386936062, "compression_ratio": 1.7718446601941749, "no_speech_prob": 0.17445318400859833}, {"id": 167, "seek": 101000, "start": 1010.0, "end": 1015.0, "text": " So it has a signature and it has a checksum or actually a hash cryptographic hash.", "tokens": [50364, 407, 309, 575, 257, 13397, 293, 309, 575, 257, 13834, 449, 420, 767, 257, 22019, 9844, 12295, 22019, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07468365814726231, "compression_ratio": 1.7491638795986622, "no_speech_prob": 0.09365642815828323}, {"id": 168, "seek": 101000, "start": 1015.0, "end": 1021.0, "text": " So the processor validates that this module is a valid Intel S-init ACM and it launches that.", "tokens": [50614, 407, 264, 15321, 7363, 1024, 300, 341, 10088, 307, 257, 7363, 19762, 318, 12, 259, 270, 8157, 44, 293, 309, 31841, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07468365814726231, "compression_ratio": 1.7491638795986622, "no_speech_prob": 0.09365642815828323}, {"id": 169, "seek": 101000, "start": 1021.0, "end": 1027.0, "text": " And this module runs entirely inside the cache. It doesn't use any memory because the memory might have been initialized wrong.", "tokens": [50914, 400, 341, 10088, 6676, 7696, 1854, 264, 19459, 13, 467, 1177, 380, 764, 604, 4675, 570, 264, 4675, 1062, 362, 668, 5883, 1602, 2085, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07468365814726231, "compression_ratio": 1.7491638795986622, "no_speech_prob": 0.09365642815828323}, {"id": 170, "seek": 101000, "start": 1027.0, "end": 1032.0, "text": " The memory might have physical memory aliasing where two physical addresses point to the same page.", "tokens": [51214, 440, 4675, 1062, 362, 4001, 4675, 10198, 3349, 689, 732, 4001, 16862, 935, 281, 264, 912, 3028, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07468365814726231, "compression_ratio": 1.7491638795986622, "no_speech_prob": 0.09365642815828323}, {"id": 171, "seek": 101000, "start": 1032.0, "end": 1038.0, "text": " So this operates in a very constrained environment but it is software that can validate that your platform is correct.", "tokens": [51464, 407, 341, 22577, 294, 257, 588, 38901, 2823, 457, 309, 307, 4722, 300, 393, 29562, 300, 428, 3663, 307, 3006, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07468365814726231, "compression_ratio": 1.7491638795986622, "no_speech_prob": 0.09365642815828323}, {"id": 172, "seek": 103800, "start": 1038.0, "end": 1044.0, "text": " That the processors are not overclocked. There's no undervolting.", "tokens": [50364, 663, 264, 27751, 366, 406, 670, 9023, 292, 13, 821, 311, 572, 833, 9646, 783, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11130470949060776, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.014393446035683155}, {"id": 173, "seek": 103800, "start": 1044.0, "end": 1048.0, "text": " That all the chipset registers that need locking are locked and so forth.", "tokens": [50664, 663, 439, 264, 11583, 302, 38351, 300, 643, 23954, 366, 9376, 293, 370, 5220, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11130470949060776, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.014393446035683155}, {"id": 174, "seek": 103800, "start": 1048.0, "end": 1057.0, "text": " And the final thing that this thing does when it has convinced itself that the platform is in a good state is that it measures and launches NOVA.", "tokens": [50864, 400, 264, 2572, 551, 300, 341, 551, 775, 562, 309, 575, 12561, 2564, 300, 264, 3663, 307, 294, 257, 665, 1785, 307, 300, 309, 8000, 293, 31841, 9146, 20914, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11130470949060776, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.014393446035683155}, {"id": 175, "seek": 103800, "start": 1057.0, "end": 1062.0, "text": " And it stores the measurement of NOVA in TPM PCR 17.", "tokens": [51314, 400, 309, 9512, 264, 13160, 295, 9146, 20914, 294, 314, 18819, 44022, 3282, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11130470949060776, "compression_ratio": 1.5868544600938967, "no_speech_prob": 0.014393446035683155}, {"id": 176, "seek": 106200, "start": 1062.0, "end": 1067.0, "text": " And then NOVA gets control at its measured entry point.", "tokens": [50364, 400, 550, 9146, 20914, 2170, 1969, 412, 1080, 12690, 8729, 935, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16228599806089658, "compression_ratio": 1.5786802030456852, "no_speech_prob": 0.017026387155056}, {"id": 177, "seek": 106200, "start": 1067.0, "end": 1075.0, "text": " And at some point later after it has initialized enough of itself, it can wrong the rule the other processors into the secure environment.", "tokens": [50614, 400, 412, 512, 935, 1780, 934, 309, 575, 5883, 1602, 1547, 295, 2564, 11, 309, 393, 2085, 264, 4978, 264, 661, 27751, 666, 264, 7144, 2823, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16228599806089658, "compression_ratio": 1.5786802030456852, "no_speech_prob": 0.017026387155056}, {"id": 178, "seek": 106200, "start": 1075.0, "end": 1083.0, "text": " So that by the time we get to the end of this, we have now all four cores or 128 cores in this measured environment.", "tokens": [51014, 407, 300, 538, 264, 565, 321, 483, 281, 264, 917, 295, 341, 11, 321, 362, 586, 439, 1451, 24826, 420, 29810, 24826, 294, 341, 12690, 2823, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16228599806089658, "compression_ratio": 1.5786802030456852, "no_speech_prob": 0.017026387155056}, {"id": 179, "seek": 108300, "start": 1083.0, "end": 1090.0, "text": " And should anything go wrong during this process like a rogue CPU showing up that nobody knew about or a CPU leaving,", "tokens": [50364, 400, 820, 1340, 352, 2085, 1830, 341, 1399, 411, 257, 39100, 13199, 4099, 493, 300, 5079, 2586, 466, 420, 257, 13199, 5012, 11, 50714], "temperature": 0.0, "avg_logprob": -0.09298579272101908, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.017106540501117706}, {"id": 180, "seek": 108300, "start": 1090.0, "end": 1099.0, "text": " surprised leaving this environment, then the platform transitions into a TXC shutdown which effectively resets the platform.", "tokens": [50714, 6100, 5012, 341, 2823, 11, 550, 264, 3663, 23767, 666, 257, 314, 55, 34, 34927, 597, 8659, 725, 1385, 264, 3663, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09298579272101908, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.017106540501117706}, {"id": 181, "seek": 108300, "start": 1099.0, "end": 1112.0, "text": " So now we talk a little bit about the TPM because what we want to do is we want to measure the next stage into a platform configuration register PCR.", "tokens": [51164, 407, 586, 321, 751, 257, 707, 857, 466, 264, 314, 18819, 570, 437, 321, 528, 281, 360, 307, 321, 528, 281, 3481, 264, 958, 3233, 666, 257, 3663, 11694, 7280, 44022, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09298579272101908, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.017106540501117706}, {"id": 182, "seek": 111200, "start": 1112.0, "end": 1120.0, "text": " And whenever you measure a component, what we really mean is we have a region of that component of that image that we care about that doesn't change.", "tokens": [50364, 400, 5699, 291, 3481, 257, 6542, 11, 437, 321, 534, 914, 307, 321, 362, 257, 4458, 295, 300, 6542, 295, 300, 3256, 300, 321, 1127, 466, 300, 1177, 380, 1319, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10765381348438752, "compression_ratio": 1.6288659793814433, "no_speech_prob": 0.014198035933077335}, {"id": 183, "seek": 111200, "start": 1120.0, "end": 1125.0, "text": " You can call it an immutable region which is typically the code and the read-only data.", "tokens": [50764, 509, 393, 818, 309, 364, 3397, 32148, 4458, 597, 307, 5850, 264, 3089, 293, 264, 1401, 12, 25202, 1412, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10765381348438752, "compression_ratio": 1.6288659793814433, "no_speech_prob": 0.014198035933077335}, {"id": 184, "seek": 111200, "start": 1125.0, "end": 1131.0, "text": " And you compute a cryptographic hash like a SHA1 or a SHA2 cryptographic hash.", "tokens": [51014, 400, 291, 14722, 257, 9844, 12295, 22019, 411, 257, 38820, 16, 420, 257, 38820, 17, 9844, 12295, 22019, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10765381348438752, "compression_ratio": 1.6288659793814433, "no_speech_prob": 0.014198035933077335}, {"id": 185, "seek": 113100, "start": 1131.0, "end": 1143.0, "text": " And you get in the case of SHA256, you get a value that is 256 bits long or a large number like that.", "tokens": [50364, 400, 291, 483, 294, 264, 1389, 295, 38820, 6074, 21, 11, 291, 483, 257, 2158, 300, 307, 38882, 9239, 938, 420, 257, 2416, 1230, 411, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09264745712280273, "compression_ratio": 1.586046511627907, "no_speech_prob": 0.04068191722035408}, {"id": 186, "seek": 113100, "start": 1143.0, "end": 1147.0, "text": " And this measuring entity executes a command to the TPM.", "tokens": [50964, 400, 341, 13389, 13977, 4454, 1819, 257, 5622, 281, 264, 314, 18819, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09264745712280273, "compression_ratio": 1.586046511627907, "no_speech_prob": 0.04068191722035408}, {"id": 187, "seek": 113100, "start": 1147.0, "end": 1151.0, "text": " And the TPM is a little chip like the one shown up here that sits on your motherboard.", "tokens": [51164, 400, 264, 314, 18819, 307, 257, 707, 11409, 411, 264, 472, 4898, 493, 510, 300, 12696, 322, 428, 32916, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09264745712280273, "compression_ratio": 1.586046511627907, "no_speech_prob": 0.04068191722035408}, {"id": 188, "seek": 113100, "start": 1151.0, "end": 1158.0, "text": " And it has, in a typical case of a client platform, it has 24 platform configuration registers.", "tokens": [51364, 400, 309, 575, 11, 294, 257, 7476, 1389, 295, 257, 6423, 3663, 11, 309, 575, 4022, 3663, 11694, 38351, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09264745712280273, "compression_ratio": 1.586046511627907, "no_speech_prob": 0.04068191722035408}, {"id": 189, "seek": 115800, "start": 1158.0, "end": 1162.0, "text": " And it invokes an operation on the TPM that's called PCR extent.", "tokens": [50364, 400, 309, 1048, 8606, 364, 6916, 322, 264, 314, 18819, 300, 311, 1219, 44022, 8396, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0832469919894604, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.05372605472803116}, {"id": 190, "seek": 115800, "start": 1162.0, "end": 1169.0, "text": " And the PCR extent operation is interesting in the sense that you can't write to a PCR directly.", "tokens": [50564, 400, 264, 44022, 8396, 6916, 307, 1880, 294, 264, 2020, 300, 291, 393, 380, 2464, 281, 257, 44022, 3838, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0832469919894604, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.05372605472803116}, {"id": 191, "seek": 115800, "start": 1169.0, "end": 1179.0, "text": " You can only extend a new value into a PCR and what it does is it takes the existing value, concatenates it with a new value and hashes the concatenated hash.", "tokens": [50914, 509, 393, 787, 10101, 257, 777, 2158, 666, 257, 44022, 293, 437, 309, 775, 307, 309, 2516, 264, 6741, 2158, 11, 1588, 7186, 1024, 309, 365, 257, 777, 2158, 293, 575, 8076, 264, 1588, 7186, 770, 22019, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0832469919894604, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.05372605472803116}, {"id": 192, "seek": 115800, "start": 1179.0, "end": 1182.0, "text": " And this forms the new value of the PCR.", "tokens": [51414, 400, 341, 6422, 264, 777, 2158, 295, 264, 44022, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0832469919894604, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.05372605472803116}, {"id": 193, "seek": 118200, "start": 1182.0, "end": 1191.0, "text": " So the sequence in which you extend values into the TPM and the values themselves are all reflected in the hash.", "tokens": [50364, 407, 264, 8310, 294, 597, 291, 10101, 4190, 666, 264, 314, 18819, 293, 264, 4190, 2969, 366, 439, 15502, 294, 264, 22019, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12856375298848965, "compression_ratio": 1.634703196347032, "no_speech_prob": 0.019339412450790405}, {"id": 194, "seek": 118200, "start": 1191.0, "end": 1193.0, "text": " Basically it gets mixed together.", "tokens": [50814, 8537, 309, 2170, 7467, 1214, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12856375298848965, "compression_ratio": 1.634703196347032, "no_speech_prob": 0.019339412450790405}, {"id": 195, "seek": 118200, "start": 1193.0, "end": 1209.0, "text": " And once you look at the PCR so you can read the value, you can no longer recompute the original chain of extent operations that led to this PCR value simply because the hash function is a one-way trap function.", "tokens": [50914, 400, 1564, 291, 574, 412, 264, 44022, 370, 291, 393, 1401, 264, 2158, 11, 291, 393, 572, 2854, 48000, 1169, 264, 3380, 5021, 295, 8396, 7705, 300, 4684, 281, 341, 44022, 2158, 2935, 570, 264, 22019, 2445, 307, 257, 472, 12, 676, 11487, 2445, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12856375298848965, "compression_ratio": 1.634703196347032, "no_speech_prob": 0.019339412450790405}, {"id": 196, "seek": 120900, "start": 1210.0, "end": 1222.0, "text": " So how would a remote verifier who can ask the TPM for a quote so you can go to the TPM and say give me the value of those PCRs that I care about and have the TPM sign that quote report so you know it's authentic.", "tokens": [50414, 407, 577, 576, 257, 8607, 1306, 9902, 567, 393, 1029, 264, 314, 18819, 337, 257, 6513, 370, 291, 393, 352, 281, 264, 314, 18819, 293, 584, 976, 385, 264, 2158, 295, 729, 44022, 82, 300, 286, 1127, 466, 293, 362, 264, 314, 18819, 1465, 300, 6513, 2275, 370, 291, 458, 309, 311, 12466, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09456328590317528, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.032375842332839966}, {"id": 197, "seek": 120900, "start": 1222.0, "end": 1233.0, "text": " You can send that off to some other computer elsewhere and they can look at all the PCRs and say, okay, if this PCR has the value that I recognize then the platform has launched authentic software.", "tokens": [51014, 509, 393, 2845, 300, 766, 281, 512, 661, 3820, 14517, 293, 436, 393, 574, 412, 439, 264, 44022, 82, 293, 584, 11, 1392, 11, 498, 341, 44022, 575, 264, 2158, 300, 286, 5521, 550, 264, 3663, 575, 8730, 12466, 4722, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09456328590317528, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.032375842332839966}, {"id": 198, "seek": 123300, "start": 1233.0, "end": 1243.0, "text": " But how do you know if multiple extent operations have happened into a PCR what the individual values are because the individual values represent the individual software components.", "tokens": [50364, 583, 577, 360, 291, 458, 498, 3866, 8396, 7705, 362, 2011, 666, 257, 44022, 437, 264, 2609, 4190, 366, 570, 264, 2609, 4190, 2906, 264, 2609, 4722, 6677, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09458394789359939, "compression_ratio": 1.6164383561643836, "no_speech_prob": 0.03194108232855797}, {"id": 199, "seek": 123300, "start": 1243.0, "end": 1255.0, "text": " And for that you need the left side of this picture where in addition to extending a measurement into the TPM it also gets stored in what's called a crypto agile event log.", "tokens": [50864, 400, 337, 300, 291, 643, 264, 1411, 1252, 295, 341, 3036, 689, 294, 4500, 281, 24360, 257, 13160, 666, 264, 314, 18819, 309, 611, 2170, 12187, 294, 437, 311, 1219, 257, 17240, 30072, 2280, 3565, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09458394789359939, "compression_ratio": 1.6164383561643836, "no_speech_prob": 0.03194108232855797}, {"id": 200, "seek": 125500, "start": 1255.0, "end": 1263.0, "text": " And this effectively is an auditable trace. It's a record of all the extent operations that happened.", "tokens": [50364, 400, 341, 8659, 307, 364, 2379, 16772, 13508, 13, 467, 311, 257, 2136, 295, 439, 264, 8396, 7705, 300, 2011, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10603401137561333, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.05091746151447296}, {"id": 201, "seek": 125500, "start": 1263.0, "end": 1269.0, "text": " And in addition to recording which PCR and what the digest so this measurement was that was extended.", "tokens": [50764, 400, 294, 4500, 281, 6613, 597, 44022, 293, 437, 264, 13884, 370, 341, 13160, 390, 300, 390, 10913, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10603401137561333, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.05091746151447296}, {"id": 202, "seek": 125500, "start": 1269.0, "end": 1280.0, "text": " There's also some event metadata that said the meaning of this extent operation is I hashed the command line or I hashed the RAM disk or whatever it may be.", "tokens": [51064, 821, 311, 611, 512, 2280, 26603, 300, 848, 264, 3620, 295, 341, 8396, 6916, 307, 286, 22019, 292, 264, 5622, 1622, 420, 286, 22019, 292, 264, 14561, 12355, 420, 2035, 309, 815, 312, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10603401137561333, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.05091746151447296}, {"id": 203, "seek": 128000, "start": 1280.0, "end": 1295.0, "text": " So you have to send both of these things both the TPM quote request and the crypto agile event log to a mode of verifier and it can correlate the two things that can use the crypto event log for a particular PCR to recompute the value in a PCR.", "tokens": [50364, 407, 291, 362, 281, 2845, 1293, 295, 613, 721, 1293, 264, 314, 18819, 6513, 5308, 293, 264, 17240, 30072, 2280, 3565, 281, 257, 4391, 295, 1306, 9902, 293, 309, 393, 48742, 264, 732, 721, 300, 393, 764, 264, 17240, 2280, 3565, 337, 257, 1729, 44022, 281, 48000, 1169, 264, 2158, 294, 257, 44022, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15338942408561707, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.011654822155833244}, {"id": 204, "seek": 128000, "start": 1295.0, "end": 1307.0, "text": " And then you can then check if the quote from the TPM actually lists exactly that value of the TPR PCR and if it has been signed with an authentic TPM signature.", "tokens": [51114, 400, 550, 291, 393, 550, 1520, 498, 264, 6513, 490, 264, 314, 18819, 767, 14511, 2293, 300, 2158, 295, 264, 314, 15958, 44022, 293, 498, 309, 575, 668, 8175, 365, 364, 12466, 314, 18819, 13397, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15338942408561707, "compression_ratio": 1.7203389830508475, "no_speech_prob": 0.011654822155833244}, {"id": 205, "seek": 130700, "start": 1307.0, "end": 1313.0, "text": " And then you know what platform and what software is running on the platform.", "tokens": [50364, 400, 550, 291, 458, 437, 3663, 293, 437, 4722, 307, 2614, 322, 264, 3663, 13, 50664], "temperature": 0.0, "avg_logprob": -0.17213001251220703, "compression_ratio": 1.6157407407407407, "no_speech_prob": 0.019831916317343712}, {"id": 206, "seek": 130700, "start": 1313.0, "end": 1318.0, "text": " So I said the SNNIT module measures the integrity of NOVA.", "tokens": [50664, 407, 286, 848, 264, 13955, 45, 3927, 10088, 8000, 264, 16000, 295, 9146, 20914, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17213001251220703, "compression_ratio": 1.6157407407407407, "no_speech_prob": 0.019831916317343712}, {"id": 207, "seek": 130700, "start": 1318.0, "end": 1329.0, "text": " And NOVA is a kernel that consists it's an F image that consists of code and read only data but also of some mutable data and some heap.", "tokens": [50914, 400, 9146, 20914, 307, 257, 28256, 300, 14689, 309, 311, 364, 479, 3256, 300, 14689, 295, 3089, 293, 1401, 787, 1412, 457, 611, 295, 512, 5839, 712, 1412, 293, 512, 33591, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17213001251220703, "compression_ratio": 1.6157407407407407, "no_speech_prob": 0.019831916317343712}, {"id": 208, "seek": 130700, "start": 1329.0, "end": 1334.0, "text": " And not all of that thing is immutable in the sense that it doesn't change.", "tokens": [51464, 400, 406, 439, 295, 300, 551, 307, 3397, 32148, 294, 264, 2020, 300, 309, 1177, 380, 1319, 13, 51714], "temperature": 0.0, "avg_logprob": -0.17213001251220703, "compression_ratio": 1.6157407407407407, "no_speech_prob": 0.019831916317343712}, {"id": 209, "seek": 133400, "start": 1334.0, "end": 1340.0, "text": " And while some people may think it's sufficient to just do an integrity measurement at launch time.", "tokens": [50364, 400, 1339, 512, 561, 815, 519, 309, 311, 11563, 281, 445, 360, 364, 16000, 13160, 412, 4025, 565, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07542669071870692, "compression_ratio": 1.7437722419928825, "no_speech_prob": 0.012783398851752281}, {"id": 210, "seek": 133400, "start": 1340.0, "end": 1351.0, "text": " So when you boot the system that's not the full truth because you can also close the lid on your laptop which will basically shut everything down and only keep the content of memory alive.", "tokens": [50664, 407, 562, 291, 11450, 264, 1185, 300, 311, 406, 264, 1577, 3494, 570, 291, 393, 611, 1998, 264, 10252, 322, 428, 10732, 597, 486, 1936, 5309, 1203, 760, 293, 787, 1066, 264, 2701, 295, 4675, 5465, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07542669071870692, "compression_ratio": 1.7437722419928825, "no_speech_prob": 0.012783398851752281}, {"id": 211, "seek": 133400, "start": 1351.0, "end": 1355.0, "text": " And when you resume the laptop then all your protections are gone.", "tokens": [51214, 400, 562, 291, 15358, 264, 10732, 550, 439, 428, 29031, 366, 2780, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07542669071870692, "compression_ratio": 1.7437722419928825, "no_speech_prob": 0.012783398851752281}, {"id": 212, "seek": 133400, "start": 1355.0, "end": 1363.0, "text": " So on a suspended zoom cycle you actually have to repeat this integrity measurement and then this yellow section has actually changed.", "tokens": [51414, 407, 322, 257, 23437, 8863, 6586, 291, 767, 362, 281, 7149, 341, 16000, 13160, 293, 550, 341, 5566, 3541, 575, 767, 3105, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07542669071870692, "compression_ratio": 1.7437722419928825, "no_speech_prob": 0.012783398851752281}, {"id": 213, "seek": 136300, "start": 1363.0, "end": 1372.0, "text": " So not everything can be measured and how does NOVA tell the SNNIT module which region of it to measure.", "tokens": [50364, 407, 406, 1203, 393, 312, 12690, 293, 577, 775, 9146, 20914, 980, 264, 13955, 45, 3927, 10088, 597, 4458, 295, 309, 281, 3481, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0759901713175946, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.012471379712224007}, {"id": 214, "seek": 136300, "start": 1372.0, "end": 1379.0, "text": " And there is this MLE header which enumerates the memory pages that NOVA wants to have measured.", "tokens": [50814, 400, 456, 307, 341, 376, 2634, 23117, 597, 465, 15583, 1024, 264, 4675, 7183, 300, 9146, 20914, 2738, 281, 362, 12690, 13, 51164], "temperature": 0.0, "avg_logprob": -0.0759901713175946, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.012471379712224007}, {"id": 215, "seek": 136300, "start": 1379.0, "end": 1385.0, "text": " And NOVA is actually the entity that initiates the launch process.", "tokens": [51164, 400, 9146, 20914, 307, 767, 264, 13977, 300, 6265, 1024, 264, 4025, 1399, 13, 51464], "temperature": 0.0, "avg_logprob": -0.0759901713175946, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.012471379712224007}, {"id": 216, "seek": 136300, "start": 1385.0, "end": 1387.0, "text": " So there's no bootloader that says launch NOVA.", "tokens": [51464, 407, 456, 311, 572, 11450, 2907, 260, 300, 1619, 4025, 9146, 20914, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0759901713175946, "compression_ratio": 1.5643564356435644, "no_speech_prob": 0.012471379712224007}, {"id": 217, "seek": 138700, "start": 1387.0, "end": 1398.0, "text": " No, NOVA gets launched in this dirty environment and then decides itself to launch its second stage and thereby tells SNNIT module what this to be measured region is.", "tokens": [50364, 883, 11, 9146, 20914, 2170, 8730, 294, 341, 9360, 2823, 293, 550, 14898, 2564, 281, 4025, 1080, 1150, 3233, 293, 28281, 5112, 13955, 45, 3927, 10088, 437, 341, 281, 312, 12690, 4458, 307, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12458849416195768, "compression_ratio": 1.734375, "no_speech_prob": 0.07126742601394653}, {"id": 218, "seek": 138700, "start": 1398.0, "end": 1403.0, "text": " But before it actually gets measured the SNNIT module DMA protects this entire region.", "tokens": [50914, 583, 949, 309, 767, 2170, 12690, 264, 13955, 45, 3927, 10088, 413, 9998, 22583, 341, 2302, 4458, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12458849416195768, "compression_ratio": 1.734375, "no_speech_prob": 0.07126742601394653}, {"id": 219, "seek": 138700, "start": 1403.0, "end": 1409.0, "text": " So the moment it gets protected no attacker can change it anymore not even visit DMA attack.", "tokens": [51164, 407, 264, 1623, 309, 2170, 10594, 572, 35871, 393, 1319, 309, 3602, 406, 754, 3441, 413, 9998, 2690, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12458849416195768, "compression_ratio": 1.734375, "no_speech_prob": 0.07126742601394653}, {"id": 220, "seek": 138700, "start": 1409.0, "end": 1416.0, "text": " Then it gets measured the measured value gets extended into TPMPCR17 and then NOVA gets launched.", "tokens": [51464, 1396, 309, 2170, 12690, 264, 12690, 2158, 2170, 10913, 666, 314, 18819, 12986, 49, 7773, 293, 550, 9146, 20914, 2170, 8730, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12458849416195768, "compression_ratio": 1.734375, "no_speech_prob": 0.07126742601394653}, {"id": 221, "seek": 141600, "start": 1417.0, "end": 1426.0, "text": " And there's also some TXT heap data structures that NOVA's preamble code and NOVA's post launch code used to exchange data with the TXT heap.", "tokens": [50414, 400, 456, 311, 611, 512, 314, 20542, 33591, 1412, 9227, 300, 9146, 20914, 311, 659, 335, 638, 3089, 293, 9146, 20914, 311, 2183, 4025, 3089, 1143, 281, 7742, 1412, 365, 264, 314, 20542, 33591, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12084755455095743, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.007533256895840168}, {"id": 222, "seek": 141600, "start": 1426.0, "end": 1435.0, "text": " So one of the things for example that the SNNIT module produces and stores in this TXT heap is some information about how many processes really exist.", "tokens": [50864, 407, 472, 295, 264, 721, 337, 1365, 300, 264, 13955, 45, 3927, 10088, 14725, 293, 9512, 294, 341, 314, 20542, 33591, 307, 512, 1589, 466, 577, 867, 7555, 534, 2514, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12084755455095743, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.007533256895840168}, {"id": 223, "seek": 141600, "start": 1435.0, "end": 1442.0, "text": " And it also stores some validated copies of ACPI tables there so that no IOM use get hidden or whatever.", "tokens": [51314, 400, 309, 611, 9512, 512, 40693, 14341, 295, 8157, 31701, 8020, 456, 370, 300, 572, 286, 5251, 764, 483, 7633, 420, 2035, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12084755455095743, "compression_ratio": 1.6008064516129032, "no_speech_prob": 0.007533256895840168}, {"id": 224, "seek": 144200, "start": 1443.0, "end": 1451.0, "text": " When you write software like that that you want to measure you have to carefully think about what should be included in the measurement versus what should be excluded.", "tokens": [50414, 1133, 291, 2464, 4722, 411, 300, 300, 291, 528, 281, 3481, 291, 362, 281, 7500, 519, 466, 437, 820, 312, 5556, 294, 264, 13160, 5717, 437, 820, 312, 29486, 13, 50814], "temperature": 0.0, "avg_logprob": -0.060653457101785914, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.004882958251982927}, {"id": 225, "seek": 144200, "start": 1451.0, "end": 1461.0, "text": " So if you measure too little then maybe something can be changed in a security relevant manner and it will not be reflected in the hash.", "tokens": [50814, 407, 498, 291, 3481, 886, 707, 550, 1310, 746, 393, 312, 3105, 294, 257, 3825, 7340, 9060, 293, 309, 486, 406, 312, 15502, 294, 264, 22019, 13, 51314], "temperature": 0.0, "avg_logprob": -0.060653457101785914, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.004882958251982927}, {"id": 226, "seek": 144200, "start": 1461.0, "end": 1470.0, "text": " And the thing that immediately comes to mind is let's say you have a command line parameter and NOVA has a few among them is one where you can say don't turn on the IOMU.", "tokens": [51314, 400, 264, 551, 300, 4258, 1487, 281, 1575, 307, 718, 311, 584, 291, 362, 257, 5622, 1622, 13075, 293, 9146, 20914, 575, 257, 1326, 3654, 552, 307, 472, 689, 291, 393, 584, 500, 380, 1261, 322, 264, 286, 5251, 52, 13, 51764], "temperature": 0.0, "avg_logprob": -0.060653457101785914, "compression_ratio": 1.7272727272727273, "no_speech_prob": 0.004882958251982927}, {"id": 227, "seek": 147000, "start": 1470.0, "end": 1479.0, "text": " So this is basically a chicken bit for debugging and when you execute NOVA with this command line parameter it's obviously less than fully secure.", "tokens": [50364, 407, 341, 307, 1936, 257, 4662, 857, 337, 45592, 293, 562, 291, 14483, 9146, 20914, 365, 341, 5622, 1622, 13075, 309, 311, 2745, 1570, 813, 4498, 7144, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08087838001740284, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.005201239604502916}, {"id": 228, "seek": 147000, "start": 1479.0, "end": 1493.0, "text": " So you want that change or the configuration change to definitely be reflected in the hash that the NOVA version that runs insecurely can be told apart from the normal version which uses the IOMU with the full potential.", "tokens": [50814, 407, 291, 528, 300, 1319, 420, 264, 11694, 1319, 281, 2138, 312, 15502, 294, 264, 22019, 300, 264, 9146, 20914, 3037, 300, 6676, 32215, 356, 393, 312, 1907, 4936, 490, 264, 2710, 3037, 597, 4960, 264, 286, 5251, 52, 365, 264, 1577, 3995, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08087838001740284, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.005201239604502916}, {"id": 229, "seek": 149300, "start": 1494.0, "end": 1505.0, "text": " So the command line must be included in the hash but if you have some data structures that maybe take time stamps you don't want to take them into the hash because they will change the moment that the time stamp changes.", "tokens": [50414, 407, 264, 5622, 1622, 1633, 312, 5556, 294, 264, 22019, 457, 498, 291, 362, 512, 1412, 9227, 300, 1310, 747, 565, 30800, 291, 500, 380, 528, 281, 747, 552, 666, 264, 22019, 570, 436, 486, 1319, 264, 1623, 300, 264, 565, 9921, 2962, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14390428331163194, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.07566378265619278}, {"id": 230, "seek": 149300, "start": 1505.0, "end": 1509.0, "text": " So this needs very careful considerations.", "tokens": [50964, 407, 341, 2203, 588, 5026, 24070, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14390428331163194, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.07566378265619278}, {"id": 231, "seek": 149300, "start": 1509.0, "end": 1519.0, "text": " And then the next question is if you have a binary like that and you've built it to the compiler, the obviously compile instruction sequences of its choice.", "tokens": [51164, 400, 550, 264, 958, 1168, 307, 498, 291, 362, 257, 17434, 411, 300, 293, 291, 600, 3094, 309, 281, 264, 31958, 11, 264, 2745, 31413, 10951, 22978, 295, 1080, 3922, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14390428331163194, "compression_ratio": 1.728395061728395, "no_speech_prob": 0.07566378265619278}, {"id": 232, "seek": 151900, "start": 1519.0, "end": 1523.0, "text": " How do you know what integrity measurement to expect?", "tokens": [50364, 1012, 360, 291, 458, 437, 16000, 13160, 281, 2066, 30, 50564], "temperature": 0.0, "avg_logprob": -0.17336654663085938, "compression_ratio": 1.9404255319148935, "no_speech_prob": 0.06982805579900742}, {"id": 233, "seek": 151900, "start": 1523.0, "end": 1536.0, "text": " So you need some form of reference measurement and when you execute NOVA's built infrastructure and you build a binary at the end of the boot process it will output all the reference integrity measurements.", "tokens": [50564, 407, 291, 643, 512, 1254, 295, 6408, 13160, 293, 562, 291, 14483, 9146, 20914, 311, 3094, 6896, 293, 291, 1322, 257, 17434, 412, 264, 917, 295, 264, 11450, 1399, 309, 486, 5598, 439, 264, 6408, 16000, 15383, 13, 51214], "temperature": 0.0, "avg_logprob": -0.17336654663085938, "compression_ratio": 1.9404255319148935, "no_speech_prob": 0.06982805579900742}, {"id": 234, "seek": 151900, "start": 1536.0, "end": 1548.0, "text": " So it will say the sharp one value for this binary is this and the sharp two six values is this and the sharp have 12 values is this and then you know what value to expect when you do a decision.", "tokens": [51214, 407, 309, 486, 584, 264, 8199, 472, 2158, 337, 341, 17434, 307, 341, 293, 264, 8199, 732, 2309, 4190, 307, 341, 293, 264, 8199, 362, 2272, 4190, 307, 341, 293, 550, 291, 458, 437, 2158, 281, 2066, 562, 291, 360, 257, 3537, 13, 51814], "temperature": 0.0, "avg_logprob": -0.17336654663085938, "compression_ratio": 1.9404255319148935, "no_speech_prob": 0.06982805579900742}, {"id": 235, "seek": 154800, "start": 1548.0, "end": 1551.0, "text": " So extending this to user mode what does it require?", "tokens": [50364, 407, 24360, 341, 281, 4195, 4391, 437, 775, 309, 3651, 30, 50514], "temperature": 0.0, "avg_logprob": -0.08735196203248113, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.0041008698754012585}, {"id": 236, "seek": 154800, "start": 1551.0, "end": 1563.0, "text": " So it requires NOVA to compute a launch integrity measurement of the root PD which means we have to define what is the region of the master controller of this root PD to measure and we have to actually do the hashing.", "tokens": [50514, 407, 309, 7029, 9146, 20914, 281, 14722, 257, 4025, 16000, 13160, 295, 264, 5593, 10464, 597, 1355, 321, 362, 281, 6964, 437, 307, 264, 4458, 295, 264, 4505, 10561, 295, 341, 5593, 10464, 281, 3481, 293, 321, 362, 281, 767, 360, 264, 575, 571, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08735196203248113, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.0041008698754012585}, {"id": 237, "seek": 154800, "start": 1563.0, "end": 1566.0, "text": " And for that we can do two things.", "tokens": [51114, 400, 337, 300, 321, 393, 360, 732, 721, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08735196203248113, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.0041008698754012585}, {"id": 238, "seek": 154800, "start": 1566.0, "end": 1577.0, "text": " We can either send the whole data over the LPC or SPI bus to the TPM and let the TPM compute the integrity measurement or we can compute it in NOVA and software using the CPU.", "tokens": [51264, 492, 393, 2139, 2845, 264, 1379, 1412, 670, 264, 441, 12986, 420, 8420, 40, 1255, 281, 264, 314, 18819, 293, 718, 264, 314, 18819, 14722, 264, 16000, 13160, 420, 321, 393, 14722, 309, 294, 9146, 20914, 293, 4722, 1228, 264, 13199, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08735196203248113, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.0041008698754012585}, {"id": 239, "seek": 157700, "start": 1577.0, "end": 1585.0, "text": " And I originally thought that using the TPM it would be a good idea because the TPM automatically does it for all supported hash algorithms.", "tokens": [50364, 400, 286, 7993, 1194, 300, 1228, 264, 314, 18819, 309, 576, 312, 257, 665, 1558, 570, 264, 314, 18819, 6772, 775, 309, 337, 439, 8104, 22019, 14642, 13, 50764], "temperature": 0.0, "avg_logprob": -0.073990762848215, "compression_ratio": 1.6370967741935485, "no_speech_prob": 0.025808462873101234}, {"id": 240, "seek": 157700, "start": 1585.0, "end": 1593.0, "text": " But as you can see on the right side the TPM is really really slow and the bus that connects the TPM to the system is also very slow.", "tokens": [50764, 583, 382, 291, 393, 536, 322, 264, 558, 1252, 264, 314, 18819, 307, 534, 534, 2964, 293, 264, 1255, 300, 16967, 264, 314, 18819, 281, 264, 1185, 307, 611, 588, 2964, 13, 51164], "temperature": 0.0, "avg_logprob": -0.073990762848215, "compression_ratio": 1.6370967741935485, "no_speech_prob": 0.025808462873101234}, {"id": 241, "seek": 157700, "start": 1593.0, "end": 1603.0, "text": " So in order to hash a binary of two megabytes of size TPM actually takes almost 14 seconds and NOVA takes 50 milliseconds plus two.", "tokens": [51164, 407, 294, 1668, 281, 22019, 257, 17434, 295, 732, 10816, 24538, 295, 2744, 314, 18819, 767, 2516, 1920, 3499, 3949, 293, 9146, 20914, 2516, 2625, 34184, 1804, 732, 13, 51664], "temperature": 0.0, "avg_logprob": -0.073990762848215, "compression_ratio": 1.6370967741935485, "no_speech_prob": 0.025808462873101234}, {"id": 242, "seek": 160300, "start": 1603.0, "end": 1608.0, "text": " So the 15 are for computing the hash and the two are for extending the PCR.", "tokens": [50364, 407, 264, 2119, 366, 337, 15866, 264, 22019, 293, 264, 732, 366, 337, 24360, 264, 44022, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05860985431474509, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.02875812165439129}, {"id": 243, "seek": 160300, "start": 1608.0, "end": 1617.0, "text": " And then obviously NOVA needs to drive the TPM itself because it needs to send commands to the TPM and NOVA needs to append the entry to the event log.", "tokens": [50614, 400, 550, 2745, 9146, 20914, 2203, 281, 3332, 264, 314, 18819, 2564, 570, 309, 2203, 281, 2845, 16901, 281, 264, 314, 18819, 293, 9146, 20914, 2203, 281, 34116, 264, 8729, 281, 264, 2280, 3565, 13, 51064], "temperature": 0.0, "avg_logprob": -0.05860985431474509, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.02875812165439129}, {"id": 244, "seek": 160300, "start": 1617.0, "end": 1629.0, "text": " So all of that infrastructure had to be added and we actually have to measure the root PD before we launch it because we can't have a process launching some let's say malicious instruction.", "tokens": [51064, 407, 439, 295, 300, 6896, 632, 281, 312, 3869, 293, 321, 767, 362, 281, 3481, 264, 5593, 10464, 949, 321, 4025, 309, 570, 321, 393, 380, 362, 257, 1399, 18354, 512, 718, 311, 584, 33496, 10951, 13, 51664], "temperature": 0.0, "avg_logprob": -0.05860985431474509, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.02875812165439129}, {"id": 245, "seek": 162900, "start": 1629.0, "end": 1636.0, "text": " And then saying after I've done some malicious action I'm changing my image to look innocuous and then I'd say measure me.", "tokens": [50364, 400, 550, 1566, 934, 286, 600, 1096, 512, 33496, 3069, 286, 478, 4473, 452, 3256, 281, 574, 10843, 12549, 293, 550, 286, 1116, 584, 3481, 385, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06813326846347766, "compression_ratio": 1.625, "no_speech_prob": 0.18063221871852875}, {"id": 246, "seek": 162900, "start": 1636.0, "end": 1640.0, "text": " Then it will look correctly even though it has executed something malicious.", "tokens": [50714, 1396, 309, 486, 574, 8944, 754, 1673, 309, 575, 17577, 746, 33496, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06813326846347766, "compression_ratio": 1.625, "no_speech_prob": 0.18063221871852875}, {"id": 247, "seek": 162900, "start": 1640.0, "end": 1644.0, "text": " So before you even execute the first instruction of the next module you have to measure it.", "tokens": [50914, 407, 949, 291, 754, 14483, 264, 700, 10951, 295, 264, 958, 10088, 291, 362, 281, 3481, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06813326846347766, "compression_ratio": 1.625, "no_speech_prob": 0.18063221871852875}, {"id": 248, "seek": 162900, "start": 1644.0, "end": 1649.0, "text": " So the root PD cannot tell NOVA which part of it to measure so how do we define this.", "tokens": [51114, 407, 264, 5593, 10464, 2644, 980, 9146, 20914, 597, 644, 295, 309, 281, 3481, 370, 577, 360, 321, 6964, 341, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06813326846347766, "compression_ratio": 1.625, "no_speech_prob": 0.18063221871852875}, {"id": 249, "seek": 164900, "start": 1650.0, "end": 1661.0, "text": " And it's simple you can actually use the L headers, the program headers in the root PD and we defined it to say the first L header that is readable or executable but not writable.", "tokens": [50414, 400, 309, 311, 2199, 291, 393, 767, 764, 264, 441, 45101, 11, 264, 1461, 45101, 294, 264, 5593, 10464, 293, 321, 7642, 309, 281, 584, 264, 700, 441, 23117, 300, 307, 49857, 420, 7568, 712, 457, 406, 10912, 712, 13, 50964], "temperature": 0.0, "avg_logprob": -0.21508092465608017, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.20876717567443848}, {"id": 250, "seek": 164900, "start": 1661.0, "end": 1664.0, "text": " That's the one that contains code and read only data.", "tokens": [50964, 663, 311, 264, 472, 300, 8306, 3089, 293, 1401, 787, 1412, 13, 51114], "temperature": 0.0, "avg_logprob": -0.21508092465608017, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.20876717567443848}, {"id": 251, "seek": 164900, "start": 1664.0, "end": 1666.0, "text": " That's the one that we measure.", "tokens": [51114, 663, 311, 264, 472, 300, 321, 3481, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21508092465608017, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.20876717567443848}, {"id": 252, "seek": 164900, "start": 1666.0, "end": 1674.0, "text": " And then NOVA obviously had to learn how to compute char one and char two fifty six and char three eighty four and char five twelve.", "tokens": [51214, 400, 550, 9146, 20914, 2745, 632, 281, 1466, 577, 281, 14722, 1290, 472, 293, 1290, 732, 13442, 2309, 293, 1290, 1045, 26348, 1451, 293, 1290, 1732, 14390, 13, 51614], "temperature": 0.0, "avg_logprob": -0.21508092465608017, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.20876717567443848}, {"id": 253, "seek": 164900, "start": 1674.0, "end": 1678.0, "text": " And basically the entire NISP FIPS one hundred eighty standard.", "tokens": [51614, 400, 1936, 264, 2302, 426, 2343, 47, 479, 40, 6273, 472, 3262, 26348, 3832, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21508092465608017, "compression_ratio": 1.6985294117647058, "no_speech_prob": 0.20876717567443848}, {"id": 254, "seek": 167800, "start": 1679.0, "end": 1693.0, "text": " And that looked like very complicated but due to the beauty of C++ templates and function overloading and inheritance the implementation of all these hash functions and NOVA is actually just one hundred thirty lines.", "tokens": [50414, 400, 300, 2956, 411, 588, 6179, 457, 3462, 281, 264, 6643, 295, 383, 25472, 21165, 293, 2445, 28777, 278, 293, 32122, 264, 11420, 295, 439, 613, 22019, 6828, 293, 9146, 20914, 307, 767, 445, 472, 3262, 11790, 3876, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12728225919935438, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.0003734344500117004}, {"id": 255, "seek": 167800, "start": 1693.0, "end": 1696.0, "text": " And it can do all of these algorithms.", "tokens": [51114, 400, 309, 393, 360, 439, 295, 613, 14642, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12728225919935438, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.0003734344500117004}, {"id": 256, "seek": 167800, "start": 1697.0, "end": 1701.0, "text": " So that brings me to almost the end of my talk.", "tokens": [51314, 407, 300, 5607, 385, 281, 1920, 264, 917, 295, 452, 751, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12728225919935438, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.0003734344500117004}, {"id": 257, "seek": 167800, "start": 1701.0, "end": 1705.0, "text": " The last thing we had to add to NOVA late last year was support for the TPM.", "tokens": [51514, 440, 1036, 551, 321, 632, 281, 909, 281, 9146, 20914, 3469, 1036, 1064, 390, 1406, 337, 264, 314, 18819, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12728225919935438, "compression_ratio": 1.6033755274261603, "no_speech_prob": 0.0003734344500117004}, {"id": 258, "seek": 170500, "start": 1705.0, "end": 1708.0, "text": " And the TPM has two interfaces.", "tokens": [50364, 400, 264, 314, 18819, 575, 732, 28416, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12484390044880804, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.0030614137649536133}, {"id": 259, "seek": 170500, "start": 1708.0, "end": 1718.0, "text": " The older interface is the FIFO interface and there is a newer command response buffer interface and NOVA had to understand how to drive those that adds another two hundred fifty lines of code.", "tokens": [50514, 440, 4906, 9226, 307, 264, 479, 12775, 46, 9226, 293, 456, 307, 257, 17628, 5622, 4134, 21762, 9226, 293, 9146, 20914, 632, 281, 1223, 577, 281, 3332, 729, 300, 10860, 1071, 732, 3262, 13442, 3876, 295, 3089, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12484390044880804, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.0030614137649536133}, {"id": 260, "seek": 170500, "start": 1718.0, "end": 1724.0, "text": " And then you have to send commands across that interface and the TPM library specification is very large.", "tokens": [51014, 400, 550, 291, 362, 281, 2845, 16901, 2108, 300, 9226, 293, 264, 314, 18819, 6405, 31256, 307, 588, 2416, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12484390044880804, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.0030614137649536133}, {"id": 261, "seek": 170500, "start": 1724.0, "end": 1734.0, "text": " It's thousands of pages but NOVA only implements the subset of TPM commands that it needs for this measured launch which is determining what capabilities it needs.", "tokens": [51314, 467, 311, 5383, 295, 7183, 457, 9146, 20914, 787, 704, 17988, 264, 25993, 295, 314, 18819, 16901, 300, 309, 2203, 337, 341, 12690, 4025, 597, 307, 23751, 437, 10862, 309, 2203, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12484390044880804, "compression_ratio": 1.7678571428571428, "no_speech_prob": 0.0030614137649536133}, {"id": 262, "seek": 173500, "start": 1735.0, "end": 1741.0, "text": " And then you have to understand how many TPM has and how many PCRs and what algorithms and then performing some PCR operations.", "tokens": [50364, 400, 550, 291, 362, 281, 1223, 577, 867, 314, 18819, 575, 293, 577, 867, 44022, 82, 293, 437, 14642, 293, 550, 10205, 512, 44022, 7705, 13, 50664], "temperature": 0.0, "avg_logprob": -0.23234133817711655, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008152599446475506}, {"id": 263, "seek": 173500, "start": 1741.0, "end": 1744.0, "text": " And that adds about another five hundred lines of code.", "tokens": [50664, 400, 300, 10860, 466, 1071, 1732, 3262, 3876, 295, 3089, 13, 50814], "temperature": 0.0, "avg_logprob": -0.23234133817711655, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008152599446475506}, {"id": 264, "seek": 173500, "start": 1744.0, "end": 1749.0, "text": " But for both the old TPM one or two and the newer TPM two dot oh.", "tokens": [50814, 583, 337, 1293, 264, 1331, 314, 18819, 472, 420, 732, 293, 264, 17628, 314, 18819, 732, 5893, 1954, 13, 51064], "temperature": 0.0, "avg_logprob": -0.23234133817711655, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008152599446475506}, {"id": 265, "seek": 173500, "start": 1749.0, "end": 1755.0, "text": " And then there is a table that lists how the TPM actually gets used by various parts of the platform.", "tokens": [51064, 400, 550, 456, 307, 257, 3199, 300, 14511, 577, 264, 314, 18819, 767, 2170, 1143, 538, 3683, 3166, 295, 264, 3663, 13, 51364], "temperature": 0.0, "avg_logprob": -0.23234133817711655, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008152599446475506}, {"id": 266, "seek": 173500, "start": 1755.0, "end": 1758.0, "text": " The TPM has different localities.", "tokens": [51364, 440, 314, 18819, 575, 819, 2654, 1088, 13, 51514], "temperature": 0.0, "avg_logprob": -0.23234133817711655, "compression_ratio": 1.673913043478261, "no_speech_prob": 0.008152599446475506}, {"id": 267, "seek": 175800, "start": 1758.0, "end": 1770.0, "text": " And locality four which belongs to the core root of transform measurement actually measures the next stage which is NOVA into PCR 17 and then NOVA which drives the TPM at locality three measures.", "tokens": [50364, 400, 1628, 1860, 1451, 597, 12953, 281, 264, 4965, 5593, 295, 4088, 13160, 767, 8000, 264, 958, 3233, 597, 307, 9146, 20914, 666, 44022, 3282, 293, 550, 9146, 20914, 597, 11754, 264, 314, 18819, 412, 1628, 1860, 1045, 8000, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17303504114565643, "compression_ratio": 1.900943396226415, "no_speech_prob": 0.04714730754494667}, {"id": 268, "seek": 175800, "start": 1770.0, "end": 1783.0, "text": " No, the SNET ACM measures NOVA also into PCR 17 and then NOVA measures the next stage which is the master controller into PCR 19 and then the root PD measures the next component further up stack into PCR 20.", "tokens": [50964, 883, 11, 264, 13955, 4850, 8157, 44, 8000, 9146, 20914, 611, 666, 44022, 3282, 293, 550, 9146, 20914, 8000, 264, 958, 3233, 597, 307, 264, 4505, 10561, 666, 44022, 1294, 293, 550, 264, 5593, 10464, 8000, 264, 958, 6542, 3052, 493, 8630, 666, 44022, 945, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17303504114565643, "compression_ratio": 1.900943396226415, "no_speech_prob": 0.04714730754494667}, {"id": 269, "seek": 178300, "start": 1784.0, "end": 1790.0, "text": " So this is the list of all the cool security technologies that we have in NOVA now.", "tokens": [50414, 407, 341, 307, 264, 1329, 295, 439, 264, 1627, 3825, 7943, 300, 321, 362, 294, 9146, 20914, 586, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11459823393485916, "compression_ratio": 1.4977777777777779, "no_speech_prob": 0.04151366278529167}, {"id": 270, "seek": 178300, "start": 1790.0, "end": 1801.0, "text": " Ranging from control flow enforcement, total memory encryption with multiple keys and the latest thing we added which we just discussed is trusted execution technology and adaptation.", "tokens": [50714, 497, 9741, 490, 1969, 3095, 11475, 11, 3217, 4675, 29575, 365, 3866, 9317, 293, 264, 6792, 551, 321, 3869, 597, 321, 445, 7152, 307, 16034, 15058, 2899, 293, 21549, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11459823393485916, "compression_ratio": 1.4977777777777779, "no_speech_prob": 0.04151366278529167}, {"id": 271, "seek": 178300, "start": 1801.0, "end": 1805.0, "text": " So with that thank you for listening and I'm happy to take questions.", "tokens": [51264, 407, 365, 300, 1309, 291, 337, 4764, 293, 286, 478, 2055, 281, 747, 1651, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11459823393485916, "compression_ratio": 1.4977777777777779, "no_speech_prob": 0.04151366278529167}, {"id": 272, "seek": 181300, "start": 1813.0, "end": 1816.0, "text": " you", "tokens": [50414, 291, 50514], "temperature": 0.0, "avg_logprob": -0.7507063150405884, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.9935587048530579}], "language": "en"}