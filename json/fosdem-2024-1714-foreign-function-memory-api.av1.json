{"text": " Can you hear me? I think so. It's working but not in a loud kind of way. Anyway, I have a loud voice, so that's not a problem. So I'm happy to be here. I was here four years ago with everything that happened, and I gave a talk on foreign memory API, and it was an incubating API in Java 14, I think. So I'm happy to be here now to talk about the foreign function of memory API, which is a finalized API in the upcoming Java 22 release. So why did we do this API? The main reason is that the landscape around Java application is changing rapidly. With the rise of machine learning, it's Java developers often need to do tasks that they necessarily didn't have to do before, such as talking to highly optimized linear algebra library that are not written in Java, they are written in C, C++, or for trans sometimes even. And the only way to reach to those libraries sometime is just to reach into native code directly. So these libraries will not be ported in Java, most of the time because they keep changing. So a new library pops up nearly every month with a new kind of idea in order to do offloading of computation to the GPU. So how do we talk to native libraries in Java? We do that with JNI. How many of you have used JNI in this room? OK, fair number. So good audience. With JNI, you can declare native methods. Native methods are like absurd methods in the sense that they don't have a Java method body, but they have a body that is defined somewhere else in a C file or a C++ file. And it can be C, C++, even assembly if you like to play with it a little bit. JNI is flexible, but it has a little bit of issues in the sense that it's what we call a native first programming model. So it pretty much focuses on giving you access to Java functionalities from the native side of the fence. So when you write in JNI, you realize that quickly you are basically shifting all your computation logic from the Java world to the native world in order to minimize the number of transitions back and forth. And that can be a problem. There's also no, I guess, idiomatic way to pass data to JNI. Yes, you can pass objects, but that has an overhead. Sometimes a lot of developers end up passing logs as pointer, as opaque pointer that are stored in some Java objects. And that kind of works. So the problem with native function, as I said, they never exist in isolation. They always have to manipulate some data. And this data is often off heap, of course. And there are not very many libraries in the JDK that allows us to do off-heap memory access. One of them is the DirectBuffer API. So probably you are familiar with DirectBuffers. They can be passed to native methods. And there are some JNI functions that allows us to, for example, get the pointer that is backing a DirectBuffer. So that the JNI code can manipulate the buffer directly. One of the issues with DirectBuffer, perhaps the main one, is that there is no deterministic way to free or unmap a byte buffer. So if you are done using your off-heap memory, you basically have to wait for the garbage collector to determine that the byte buffer is no longer reachable from your application. And that can have a latency cost. There is also a problem in the addressing space. The byte buffer API was born in 1.4 time. So quite a few years ago. And we only use ints as offsets there, which means the maximum addressable space is 2 gigabytes. With minus 1, yes. With the advent of persistent memory, these limits are starting to be a little bit tighter. Also, there are not many addressing options provided by Buffer. Either we go on the relative addressing scheme where basically we say, put in, put in, put in, then we rely on a mutable index on the byte buffer to keep track of where we want to store the bytes. But that's low because we have to mutate some state and then situ optimization have a little bit more trouble coping with that. Or we go fully explicit. And so we put offsets everywhere in our code. And that makes our code a little bit more brittle. So this is what happens when you want to access an IT library. You have a client. You have an IT library. You have some JNI Goop in the middle. What's inside the JNI Goop? Well, a little bit of everything. There are some native method declarations in the Java code. Then if you compile this code using Java C dash H, you have to use a special option, which will generate the site headers file that you need in order to implement your C JNI function. So you go over to C, you implement your JNI function. You compile that function, the C file, which is your client compiler of choice. You get back a shim DLL. This DLL is not the library that you wanted to talk to in the first place. This is just some extra glue code that you need in order to get to the library that you want. So now you have two native libraries, the one you want to talk to and the JNI DLL. And that's a little bit suboptimal. So what we need instead is a Java first programming model. So something that allows us to reach into native functions directly only used in Java code. We also need, since we want to model off-it memory in a more sane way, we need a replacement for the by-buffer API, something that is more targeted at the use cases that FFI has. So we want deterministic allocation. We want bigger addressing space. We want better ways to describe struct layouts so that we can access memory more easily. And also we want to tie everything together. So we want to define tools that allows us to automatically generate bindings for native library in one shot. And we'll see a little bit about that later. Ultimately, our goal is not to replace existing frameworks, such as JNA, JNR, for example. I think Charlie is going to talk about that maybe later. But to help some of those frameworks to overcome the workarounds that they have to keep doing all over again, because they don't have a proper API to deal with pointers. They don't have a proper API to free pointers when they are no longer used. And so hopefully some of this stuff is going to come handy in those cases, too. So Panama is not just about the foreign function memory API. Of course, that's a huge part of Panama. But Panama also contains the vector API, which is an end API to access SIMD computation from Java code directly. But there's also Babylon, a project that recently sprung up, which allows us to see what's inside the body of a Java method with a nice IR that can be introspective using Java. So what can you do with Babylon? For example, you can take a Java method that contains a loop, for example. And you can inspect that loop. You can turn it into a GPU kernel. And then you can use FFM to dispatch that kernel using CUDA to the GPU. So Babylon and FFM kind of comes together and provides us a better and more robust solution in order to do on GPU computing. The main instruction when it comes to accessing memory is called memory segment. That gives us access to a contiguous region of memory. There are, of course, two kind of memory segments. This is similar to white buffer. There are heap segments that are backed by on-heap memory. And native segments that are backed by off-heap memory. All segments have a size. So if you try to access a segment out of bounds, you get an error. They have a lifetime, which means they are alive. But then after you free them, they are no longer alive. So if you try to access them when they are no longer alive, you get an exception. And some segments may also have confinement. So they may start in a thread, and they can only be accessed in the same thread where they started from. How do we use segments? Well, it's not too difficult. It's very similar to white buffer. You can almost see the translation, the mechanical translation from the white buffer API to memory segments. Let's say that we want to model a point that has fields x and y. So what we have to do, we have to allocate a segment. We do that using an arena. We will see a little bit later what an arena is. Let's just go with me for a minute. We have to allocate a segment in 16 bytes, because the coordinates are 8 byte each. And then we put double values into each coordinates, one at offset s0 and another at offset 8. And that's how we populate the memory of that particular segment. So one of the issues that we have in this code, of course, is that we are using an automatic arena. An automatic arena is essentially providing an automatic, the allocation scheme, which is similar to the one that is used by the white buffer API. So we are not going to get any advantage here. But we can do one better. In fact, this is actually where we spend the most time designing the memory API. Java, as you all know, is based on the very idea of having automatic memory management, which means you only care about allocating objects. The garbage collector will sit behind your back and automatically recycle memory when no longer used. This is based on this concept of computing which objects are reachable at any given point in time. Problems with this approach is that computing the reachability graph, so which objects are reachable at any given point in time, is a very expensive operation. And you can find that garbage collectors, especially the one of the latest generation, the low latency garbage collectors, they don't want to materialize the reachability graph as often. So if you try, for example, to allocate a lot of the red buffer using ZGC, you will see that there's a lot more time before the, by buffer, is collected compared to having something else where you can actually thermistically release the memory. So that's a problem. Another problem is that the garbage collector doesn't have knowledge about the off-heap memory region that can be attached to the red buffer. The only thing the garbage collector sees is a very small instance, a very small by buffer instance that is like, I don't know, 16 bytes or something more. But it doesn't seem that maybe there are four gigabytes of off-heap memory attached to that. So there's no way to prioritize that collection. And also, garbage collector only can keep track of an object as long as if it's used from a Java application. So if that by buffer escapes to native code, then it's up to the developer to keep that object alive across the native code boundary. So you have to start playing with reachability fences, and your code suddenly doesn't look as good anymore. So what we need is a new way to think about managing memory resources explicitly. And that's challenging because we are sitting on top of a language that made its success on the very idea of basically never worry about releasing memory ever, because the garbage collector will do it for you. So what we introduced was an abstraction called arena. And arena models the life cycle of one or more memory segment. All the memory segments are allocated with the same arena at the same lifetime. So we call this a lifetime-centric approach, because first you have to think about what is the lifetime of the memory that you want to work with. Then you create an arena that embodies that lifetime, and then you start allocating memory. There are many kinds of arena. Of course, there is the silly global arena that you can use. And basically, whatever you allocate, it stays alive. It's never collected. There's the automatic arena, which we saw before, which basically gives us an automatic memory management scheme, which is similar to the buffer. But then there are the more interesting confined and shared arenas. These are arenas that support the autoclosable interface. So if you call close on that arena, all the memory that has been allocated with that arena will basically just go away deterministically. We don't need to wait for the garbage collector to do that. There are strong safety guarantees. Regardless of whether you are in the confined case or in the shared case, it's not possible for you to access a segment after it has been freed. And in the shared case, we had to do a lot of JVM black magic in order to make this work. Because of course, you can think, well, we just put a lock. Whenever you access a memory segment, we'll check whether the segment is still alive using an expressive operation. And then you realize that memory access is 10x slower than before. So what we did instead is, with the help of the GC team, we relied on some safe pointing mechanism to make sure that it is never possible to close a segment while there is any other thread that is trying to access the same segment. That works very well. Of course, it's a little bit more expensive if you need to close shared arena very frequently. But hopefully, you won't need to do that. So what we are trying to do here is to find an epibalance between the flexibility of C automatic memory management, sorry, the thermistic memory management, where you have to do free and maloc explicitly. That's very flexible, but it's also very unsafe, because you can have use after free, you can have memory leak, or the extreme safety of Rust, which comes at the expense of some flexibility when you try to code. Because if you want to do, for example, secret data structures in Rust, like a link list, it becomes very, very, very difficult. So Java is trying to sit in the middle. And I think we've done a good job doing this. So how do you work with explicit arenas? It's basically the same as with automatic arenas. The only difference here is that now we are using a try with resource statement. So we create the arena inside the try with resource block. We do the allocation. We populate the point struct. And then when we close the brace, all the memory goes away. So this is much better than the direct buffer counterpart, especially if you need to frequently allocate off-heap data structures, because we no longer put load on the garbage collector just to clean up the off-heap memory. So one thing that we need to still improve on this API is how do we access the fields of the struct that we want to operate with? In the example that I showed previously, we had to say, well, I want to access off-heap zero. I want to access off-heap eight, because we knew these were the offset where my fields are. But what if we could just declare what is the layout of the struct that I want to work with? What if we can translate the struct point 2D definition that we have in C into a Java object that models the same layout? Then we can start asking interesting questions, such as what is the layout of the field x or y. Give me avarendo for accessing the x field. And that is exactly what we are doing here. So instead of just relegating the definition of point 2D in a comment, we actually define the layout of the point struct as an object, as a Java object. And then we use this object to derive the two varendals, one for accessing the x field and one for accessing the y field. Then inside the try with our sources, we can just use the varendal to access the fields. We don't have to specify the offset eight for the field y, for example, because the varendal will encode all the offset computation automatically. At the same time, look in the allocation expression, the very first inside the try with our source block, we can see that we are just using passing the layout to the location routine. And the layout, of course, knows what is the size of the block that we want to allocate. So switching gears a little bit, let's start talking about FFI. The main abstraction in FFI is called native linker. This is an object that essentially embeds the calling convention of the platform in which the JVM runs. It provides two capabilities. The first is it allows us to derive a method end all that targets a native function. So we can basically describe the native function we want to call, get a method end all, and just call it from Java. The second capability is kind of the reverse of that. So we have a method end all that describes on Java computation. We want to turn it into a function pointer, so a memory segment, that then we can pass back to native code. In this approach is inspired to, for example, Python C types or lib FFI. These are kind of the main inspiration. So we want to be able to describe a function from Java, so then we can call it directly. It all builds on the abstraction that we've seen so far. So we use layouts to describe the signature of C functions. We use memory segment to pass addresses or structs. And we use our in-apps to model life cycles of upcalls and to model the life cycles also of loaded libraries. So when we want to call a native function, so here I define a function distance that take a point, returns the distance of the point from the origin. Actually, doing that in C is a little bit more convoluted than it looks like, because it essentially depends on the platform we are on. So if we are on Linux, we will have to look at some rules that are called the CSV calling convention. And that tells us that, for example, structs that are as big as the point to destruct that we have here can have their fields pass in registers. So the only thing that we need to do when calling the distance function is to load the first floating point register with the value 3, the second floating point register with the value 4, then we just jump on the function. But if you are on Windows, even if you are on X64, but on Windows, there is a completely different set of calling convention, which actually tells us that any struct that is bigger than 64 bit, such as our struct here, will be passed in memory instead, which means the struct has to be spilled on the stack, a pointer to the stack has to be stored in the RCX register, and then we jump to the function. So same function, same architecture, because X64, completely very different set of assembly instruction that needs to be generated in order to act as a trampoline from Java code, for example, to C code. So that's why it's important that we are able to describe the signature of a C function to the linker, because the linker then will inspect the signature of the C function and will determine what is the exact set of instruction that we need in order to go from the Java code to the native code underneath. And so how do we do this? Well, when we call the down call end on the native linker, we will pass, of course, the address of the function that we want to call. This is obtained using a symbol lookup, which we won't have time to investigate in further detail. But it will basically give us the address of where the distance address function lives. And then we provide a function descriptor. This function descriptor is nothing but a set of layouts, one for the return type and one for the argument. In this case, we know that the return type is double. So we use a double layout. And the argument is actually the point to this track that we defined before. So that same layout can now be reused in order to describe the signature of the function. Then inside our try with the source, we populate the point as before. And then we can call the method end. So we just pass the point memory segment to the method end that we obtain. And that means that we will be able to pass the point by value to the C function. And nothing else needs to be done, because the linker will figure out exactly what set of machine instruction to generate in order to go there. So of course, when we talk about native function, we always have to keep safety in the back of our mind, right? Because whenever we go into native, the operation is fundamentally unsafe. We could, for example, make a mistake in describing the signature of our target C function, which means the assembly step that we have is not correct for calling that particular function. We may cause all sorts of issues. The foreign code may attempt to free memory that has already been freed from Java code. Or we may get a pointer from native code. We may try to resize the pointer, but we got the size wrong. And so we are suddenly trying to access memory that is not there. So in the FFM API, there is a concept that is called restricted method. So there are some methods in the FFM API that are not directly available all the time. They are part of the Java API. So if you go in the Java doc, you can see them. But they are restricted, and you need to use an extra command line flag if you want to use them without warnings. So for now, basically, if you try to use a restricted method, such as the method for creating a down call method endo, you will only get a warning. But in the future, we plan to turn this warning into an error. And in that case, you will have to use a new option that is called dash, dash enable native access that will grant a subset of the models of your application or the all unnamed model if you are using the class path, access to restricted methods. This is a part of a bigger plan to move Java on a more solid foundation, one that allows us to provide integrity by default. So Java in its default configuration should always preserve integrity, which means it shouldn't be possible for native code to mess up with invariants, such as, for example, mutating final fields and things like that. So this is the workflow using FFM API when we want to access a native library. So we still have something in the middle between us and the native library that we want to call. This time, though, the stuff we have in the middle is just Java objects. We have memory layout, varendals, method endals, function descriptors. But here's an idea. What if we could generate all this stuff mechanically using a tool? And that's exactly what the JXR tool does. So let's say that we want to call the QSAR function, which is actually a tricky function because it has a function pointer that allows us to sort the contents to compare elements of an array. So it uses a function pointer type def. So if you want to model this using plain FFM, it's going to take you a little bit of setup code in order to create the app call stub and the method endals that are required to call this. But if you give all this header to JXR, so we could just start with pointing it at the header or the standard library header where this is defined, then we basically just get a bunch of static declaration that we can use to call QSAR. So if I do all this, the only thing I have to do from my code is first to create the function pointer. And this is possible with a factor that has been generated by JSTRAP that allows me to pass a lambda expression. And the lambda expression will be turned into a function pointer that is stored inside a memory segment. And then I can pass to the QSAR function. And the QSAR function is not a method endal anymore. It's a nice static wrapper around the method endal. So it's much better to use from the developer perspective because using method endal can sometimes be tricky with the fact that we can pass the wrong type and then it gets lower and things like that. So in comparison, this is the code that you have to write if you wanted to do this using JNI. So there's Java code with native methods. There's another file that is generated by Java C. And then there's quite a bit of C implementation in order to do QSAR. And it actually took us a few attempts in order to get to the best optimal implementation because our first attempt wasn't very good. It can actually get quite tricky. And even better, if you look at the performances, the plain FFM-based approach is roughly 2x, 3x faster than the JNI approach, every optimized JNI approach. And that's because a colleague of mine, Neal Verne, has put a lot of effort in trying to optimize, especially the up-call path. So when you want to call a Java function from native code, there was a lot of performance left on the table from JNI. And we were able to greatly improve the performances there. For regular calls, you probably won't see much difference. So FFM is more or less on par with JNI. But as soon as your native call is starting to up-call back into Java, you're going to see massive differences. So wrapping up, FFM provides a safe and efficient way to access memory. We have deterministic location. We have layouts to describe structs. And so it gives us ability to describe the content of the memory that we want to work with and then get varendals to access that memory in a much more robust way. Then we have an API to access native function directly from Java. So no need to write JNI code. That means that your deployment gets simpler, because you don't have that shim DLL going around that you need to distribute along with your application. And together, the foreign linker and memory segment and layouts provide the foundation of a new interrupt story for Java that is based on a tool called JSTRACT, which allows us to target native library directly. One thing that emerged while we were working on FFM is that there was quite a lot of number of use cases that we didn't anticipate at first. Since FFM is a fairly low level library, it allows very easily for other languages that are built on top of the VM, such as Scala, Closure, or even Ruby to use the FFM layer to then target native function. That was very expensive to do with JNI, because it meant that the other language sitting on top of the VM needed to spin some JNI code in order to be able to do that or maybe uses a library like libffi. But with FFM, this is possible directly out of the box. And I think that's a good improvement. We have been incubating and previewing, of course, for a long time, since JDK14, essentially, so that allowed us to get a lot of feedback from Apache Lucene, Netty, Tomcat. And I think today they are in production with some of this stuff. So I think if you run Lucene with Java 21, you are getting a code path that uses FFM under the hood. And I think that helped them to get rid of some of the issues where they had to use unsafe in order to free the memory that was mapped because otherwise waiting for the garbage collector could lead to other issues. We also are being used by Tornado VM. So in that case, it's an interesting case where memory segments are used to model memory that is inside the GPU. So they are using memory segment in a very creative way there and a bunch of other projects as chime in as well. So for us, it was a very successful experience of using preview features because it allows us to gather a lot of feedback. Not necessarily, we have a lot of knowledge on these topics within the JDK team. So it was good for us to put something out. And then here, our people were using some of this stuff and make it better. That's the end of my talk. These are some of the links. I hope that you are going to try FFM in 22. You can subscribe to the mailing list and send us feedback. There is a link to the JSTRAC tool. So there are binary snapshots available. So you can grab the latest one and start extracting your library of choice and play with it a little bit. And then a link to the repos. But that's mostly it. Thank you very much. The first question. Questions? Who is FFM-focused from Canadian technologies? I think it's pick. Yeah, basically what is the difference between these and Kotlin native, since Kotlin native can provide access to off-if memory and native function as well. I think they are very similar. One of the things that I think Kotlin native cannot do because it's still sitting on top of the VM, and it has to play by the rules of the existing libraries, is that it cannot have a solution for releasing memory safely. So I believe that Kotlin native is going to use some, I mean it's going to say at some point, oh if you use pointer your code is going to be unsafe, and you try to free a pointer then all bets are off. So this is the main, without solution if you use memory segments, you can close an arena and your code will never crash. You may get an exception. This is the same thing as the same thing. Yeah, but you know the APIs I've seen so far, there is always a whole, like if you use them correctly it works, but there are ways to use them for multiple threads where it's not working, unless you go deeper at the VM level of course, which of course Kotlin native cannot do. Up here, Mereh, Siou. Go on, question. Mereh, Siou, here. Do you know how many platform specific hacks need to be done, like if I want to use one code on like ARM macOS and Linux risk v or something, or is it all fully one code for all platforms? So in terms of JStrack the model, sorry the question was, do our platform specific is all this? Do we need to worry about differences between platforms? The answer is yes, in the sense that the JStrack tool is going to give you a binding for the platform that you are running on. Now, this sounds scary. In practice, for example, if you work with a high level library such as Lib Clang for example, we have a single run of JStrack, and then we reuse it across all the platforms and it works fine, because that library is defined in a way that is portable. If you work with system libraries, of course you are going to have a lot less luck, and that system library is only going to work on one platform, and all the platforms will need to do something else. Yes, can you tell us about the memory footprint compared to JNI? Memory footprint compared to JNI. So of course if you use memory segment, there is a little bit of footprint because you have an object that embeds an address, so you don't have a long. But our plan is to make all these memory segments scalarizable because the implementation is completely hidden. You only have a sealed interface in the API, which means all these interfaces are going to be implemented by value classes when Valhalla comes, which means if you bring up a memory segment, you wrap a memory segment around an address, you are not going to pay anything allocation-wise. For now, there is a little bit of cost in the cases where the VM cannot figure out with escape analysis the allocation, but in the future we plan for this to completely disappear. Yeah, okay. Sorry.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.640000000000001, "text": " Can you hear me?", "tokens": [50364, 1664, 291, 1568, 385, 30, 50696], "temperature": 0.0, "avg_logprob": -0.3142239605938947, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.2314486801624298}, {"id": 1, "seek": 0, "start": 6.640000000000001, "end": 8.36, "text": " I think so.", "tokens": [50696, 286, 519, 370, 13, 50782], "temperature": 0.0, "avg_logprob": -0.3142239605938947, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.2314486801624298}, {"id": 2, "seek": 0, "start": 9.0, "end": 13.48, "text": " It's working but not in a loud kind of way.", "tokens": [50814, 467, 311, 1364, 457, 406, 294, 257, 6588, 733, 295, 636, 13, 51038], "temperature": 0.0, "avg_logprob": -0.3142239605938947, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.2314486801624298}, {"id": 3, "seek": 0, "start": 13.48, "end": 16.84, "text": " Anyway, I have a loud voice, so that's not a problem.", "tokens": [51038, 5684, 11, 286, 362, 257, 6588, 3177, 11, 370, 300, 311, 406, 257, 1154, 13, 51206], "temperature": 0.0, "avg_logprob": -0.3142239605938947, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.2314486801624298}, {"id": 4, "seek": 0, "start": 16.84, "end": 19.56, "text": " So I'm happy to be here.", "tokens": [51206, 407, 286, 478, 2055, 281, 312, 510, 13, 51342], "temperature": 0.0, "avg_logprob": -0.3142239605938947, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.2314486801624298}, {"id": 5, "seek": 0, "start": 19.56, "end": 23.8, "text": " I was here four years ago with everything that happened,", "tokens": [51342, 286, 390, 510, 1451, 924, 2057, 365, 1203, 300, 2011, 11, 51554], "temperature": 0.0, "avg_logprob": -0.3142239605938947, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.2314486801624298}, {"id": 6, "seek": 0, "start": 23.8, "end": 28.36, "text": " and I gave a talk on foreign memory API,", "tokens": [51554, 293, 286, 2729, 257, 751, 322, 5329, 4675, 9362, 11, 51782], "temperature": 0.0, "avg_logprob": -0.3142239605938947, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.2314486801624298}, {"id": 7, "seek": 2836, "start": 28.36, "end": 32.96, "text": " and it was an incubating API in Java 14, I think.", "tokens": [50364, 293, 309, 390, 364, 33345, 990, 9362, 294, 10745, 3499, 11, 286, 519, 13, 50594], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 8, "seek": 2836, "start": 32.96, "end": 35.88, "text": " So I'm happy to be here now to talk about the foreign function", "tokens": [50594, 407, 286, 478, 2055, 281, 312, 510, 586, 281, 751, 466, 264, 5329, 2445, 50740], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 9, "seek": 2836, "start": 35.88, "end": 40.0, "text": " of memory API, which is a finalized API in the upcoming", "tokens": [50740, 295, 4675, 9362, 11, 597, 307, 257, 2572, 1602, 9362, 294, 264, 11500, 50946], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 10, "seek": 2836, "start": 40.0, "end": 42.04, "text": " Java 22 release.", "tokens": [50946, 10745, 5853, 4374, 13, 51048], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 11, "seek": 2836, "start": 42.04, "end": 44.64, "text": " So why did we do this API?", "tokens": [51048, 407, 983, 630, 321, 360, 341, 9362, 30, 51178], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 12, "seek": 2836, "start": 44.64, "end": 47.44, "text": " The main reason is that the landscape around", "tokens": [51178, 440, 2135, 1778, 307, 300, 264, 9661, 926, 51318], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 13, "seek": 2836, "start": 47.44, "end": 49.44, "text": " Java application is changing rapidly.", "tokens": [51318, 10745, 3861, 307, 4473, 12910, 13, 51418], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 14, "seek": 2836, "start": 49.44, "end": 51.2, "text": " With the rise of machine learning,", "tokens": [51418, 2022, 264, 6272, 295, 3479, 2539, 11, 51506], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 15, "seek": 2836, "start": 51.2, "end": 56.72, "text": " it's Java developers often need to do tasks", "tokens": [51506, 309, 311, 10745, 8849, 2049, 643, 281, 360, 9608, 51782], "temperature": 0.0, "avg_logprob": -0.22486051540930294, "compression_ratio": 1.502008032128514, "no_speech_prob": 0.0212379302829504}, {"id": 16, "seek": 5672, "start": 56.72, "end": 58.56, "text": " that they necessarily didn't have to do before,", "tokens": [50364, 300, 436, 4725, 994, 380, 362, 281, 360, 949, 11, 50456], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 17, "seek": 5672, "start": 58.56, "end": 61.44, "text": " such as talking to highly optimized linear algebra", "tokens": [50456, 1270, 382, 1417, 281, 5405, 26941, 8213, 21989, 50600], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 18, "seek": 5672, "start": 61.44, "end": 63.16, "text": " library that are not written in Java,", "tokens": [50600, 6405, 300, 366, 406, 3720, 294, 10745, 11, 50686], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 19, "seek": 5672, "start": 63.16, "end": 66.52, "text": " they are written in C, C++, or for trans sometimes even.", "tokens": [50686, 436, 366, 3720, 294, 383, 11, 383, 25472, 11, 420, 337, 1145, 2171, 754, 13, 50854], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 20, "seek": 5672, "start": 66.52, "end": 69.8, "text": " And the only way to reach to those libraries sometime is", "tokens": [50854, 400, 264, 787, 636, 281, 2524, 281, 729, 15148, 15053, 307, 51018], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 21, "seek": 5672, "start": 69.8, "end": 73.72, "text": " just to reach into native code directly.", "tokens": [51018, 445, 281, 2524, 666, 8470, 3089, 3838, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 22, "seek": 5672, "start": 73.72, "end": 77.2, "text": " So these libraries will not be ported in Java,", "tokens": [51214, 407, 613, 15148, 486, 406, 312, 2436, 292, 294, 10745, 11, 51388], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 23, "seek": 5672, "start": 77.2, "end": 79.24, "text": " most of the time because they keep changing.", "tokens": [51388, 881, 295, 264, 565, 570, 436, 1066, 4473, 13, 51490], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 24, "seek": 5672, "start": 79.24, "end": 84.08, "text": " So a new library pops up nearly every month with", "tokens": [51490, 407, 257, 777, 6405, 16795, 493, 6217, 633, 1618, 365, 51732], "temperature": 0.0, "avg_logprob": -0.2261581767689098, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.008277859538793564}, {"id": 25, "seek": 8408, "start": 84.08, "end": 88.56, "text": " a new kind of idea in order to do offloading of computation", "tokens": [50364, 257, 777, 733, 295, 1558, 294, 1668, 281, 360, 766, 2907, 278, 295, 24903, 50588], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 26, "seek": 8408, "start": 88.56, "end": 90.03999999999999, "text": " to the GPU.", "tokens": [50588, 281, 264, 18407, 13, 50662], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 27, "seek": 8408, "start": 90.03999999999999, "end": 93.24, "text": " So how do we talk to native libraries in Java?", "tokens": [50662, 407, 577, 360, 321, 751, 281, 8470, 15148, 294, 10745, 30, 50822], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 28, "seek": 8408, "start": 93.24, "end": 95.92, "text": " We do that with JNI.", "tokens": [50822, 492, 360, 300, 365, 508, 42496, 13, 50956], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 29, "seek": 8408, "start": 95.92, "end": 98.6, "text": " How many of you have used JNI in this room?", "tokens": [50956, 1012, 867, 295, 291, 362, 1143, 508, 42496, 294, 341, 1808, 30, 51090], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 30, "seek": 8408, "start": 98.6, "end": 99.72, "text": " OK, fair number.", "tokens": [51090, 2264, 11, 3143, 1230, 13, 51146], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 31, "seek": 8408, "start": 99.72, "end": 102.4, "text": " So good audience.", "tokens": [51146, 407, 665, 4034, 13, 51280], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 32, "seek": 8408, "start": 102.4, "end": 104.75999999999999, "text": " With JNI, you can declare native methods.", "tokens": [51280, 2022, 508, 42496, 11, 291, 393, 19710, 8470, 7150, 13, 51398], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 33, "seek": 8408, "start": 104.75999999999999, "end": 107.0, "text": " Native methods are like absurd methods in the sense", "tokens": [51398, 15093, 7150, 366, 411, 19774, 7150, 294, 264, 2020, 51510], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 34, "seek": 8408, "start": 107.0, "end": 108.96, "text": " that they don't have a Java method body,", "tokens": [51510, 300, 436, 500, 380, 362, 257, 10745, 3170, 1772, 11, 51608], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 35, "seek": 8408, "start": 108.96, "end": 112.16, "text": " but they have a body that is defined somewhere else", "tokens": [51608, 457, 436, 362, 257, 1772, 300, 307, 7642, 4079, 1646, 51768], "temperature": 0.0, "avg_logprob": -0.2034287929534912, "compression_ratio": 1.6330645161290323, "no_speech_prob": 0.015795985236763954}, {"id": 36, "seek": 11216, "start": 112.2, "end": 115.56, "text": " in a C file or a C++ file.", "tokens": [50366, 294, 257, 383, 3991, 420, 257, 383, 25472, 3991, 13, 50534], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 37, "seek": 11216, "start": 115.56, "end": 117.67999999999999, "text": " And it can be C, C++, even assembly", "tokens": [50534, 400, 309, 393, 312, 383, 11, 383, 25472, 11, 754, 12103, 50640], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 38, "seek": 11216, "start": 117.67999999999999, "end": 121.52, "text": " if you like to play with it a little bit.", "tokens": [50640, 498, 291, 411, 281, 862, 365, 309, 257, 707, 857, 13, 50832], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 39, "seek": 11216, "start": 121.52, "end": 124.28, "text": " JNI is flexible, but it has a little bit of issues", "tokens": [50832, 508, 42496, 307, 11358, 11, 457, 309, 575, 257, 707, 857, 295, 2663, 50970], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 40, "seek": 11216, "start": 124.28, "end": 127.16, "text": " in the sense that it's what we call a native first programming", "tokens": [50970, 294, 264, 2020, 300, 309, 311, 437, 321, 818, 257, 8470, 700, 9410, 51114], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 41, "seek": 11216, "start": 127.16, "end": 127.92, "text": " model.", "tokens": [51114, 2316, 13, 51152], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 42, "seek": 11216, "start": 127.92, "end": 132.68, "text": " So it pretty much focuses on giving you access", "tokens": [51152, 407, 309, 1238, 709, 16109, 322, 2902, 291, 2105, 51390], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 43, "seek": 11216, "start": 132.68, "end": 137.24, "text": " to Java functionalities from the native side of the fence.", "tokens": [51390, 281, 10745, 11745, 1088, 490, 264, 8470, 1252, 295, 264, 15422, 13, 51618], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 44, "seek": 11216, "start": 137.24, "end": 140.56, "text": " So when you write in JNI, you realize that quickly you", "tokens": [51618, 407, 562, 291, 2464, 294, 508, 42496, 11, 291, 4325, 300, 2661, 291, 51784], "temperature": 0.0, "avg_logprob": -0.16204409013714707, "compression_ratio": 1.562753036437247, "no_speech_prob": 0.009653068147599697}, {"id": 45, "seek": 14056, "start": 140.56, "end": 142.52, "text": " are basically shifting all your computation logic", "tokens": [50364, 366, 1936, 17573, 439, 428, 24903, 9952, 50462], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 46, "seek": 14056, "start": 142.52, "end": 144.16, "text": " from the Java world to the native world", "tokens": [50462, 490, 264, 10745, 1002, 281, 264, 8470, 1002, 50544], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 47, "seek": 14056, "start": 144.16, "end": 148.0, "text": " in order to minimize the number of transitions back and forth.", "tokens": [50544, 294, 1668, 281, 17522, 264, 1230, 295, 23767, 646, 293, 5220, 13, 50736], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 48, "seek": 14056, "start": 148.0, "end": 150.0, "text": " And that can be a problem.", "tokens": [50736, 400, 300, 393, 312, 257, 1154, 13, 50836], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 49, "seek": 14056, "start": 150.0, "end": 153.4, "text": " There's also no, I guess, idiomatic way to pass data", "tokens": [50836, 821, 311, 611, 572, 11, 286, 2041, 11, 18014, 13143, 636, 281, 1320, 1412, 51006], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 50, "seek": 14056, "start": 153.4, "end": 153.96, "text": " to JNI.", "tokens": [51006, 281, 508, 42496, 13, 51034], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 51, "seek": 14056, "start": 153.96, "end": 156.8, "text": " Yes, you can pass objects, but that has an overhead.", "tokens": [51034, 1079, 11, 291, 393, 1320, 6565, 11, 457, 300, 575, 364, 19922, 13, 51176], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 52, "seek": 14056, "start": 156.8, "end": 158.76, "text": " Sometimes a lot of developers end up", "tokens": [51176, 4803, 257, 688, 295, 8849, 917, 493, 51274], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 53, "seek": 14056, "start": 158.76, "end": 161.68, "text": " passing logs as pointer, as opaque pointer", "tokens": [51274, 8437, 20820, 382, 23918, 11, 382, 42687, 23918, 51420], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 54, "seek": 14056, "start": 161.68, "end": 163.04, "text": " that are stored in some Java objects.", "tokens": [51420, 300, 366, 12187, 294, 512, 10745, 6565, 13, 51488], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 55, "seek": 14056, "start": 163.04, "end": 166.04, "text": " And that kind of works.", "tokens": [51488, 400, 300, 733, 295, 1985, 13, 51638], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 56, "seek": 14056, "start": 166.04, "end": 168.64000000000001, "text": " So the problem with native function, as I said,", "tokens": [51638, 407, 264, 1154, 365, 8470, 2445, 11, 382, 286, 848, 11, 51768], "temperature": 0.0, "avg_logprob": -0.20042336442088352, "compression_ratio": 1.654109589041096, "no_speech_prob": 0.004106184933334589}, {"id": 57, "seek": 16864, "start": 168.64, "end": 170.67999999999998, "text": " they never exist in isolation.", "tokens": [50364, 436, 1128, 2514, 294, 16001, 13, 50466], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 58, "seek": 16864, "start": 170.67999999999998, "end": 172.72, "text": " They always have to manipulate some data.", "tokens": [50466, 814, 1009, 362, 281, 20459, 512, 1412, 13, 50568], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 59, "seek": 16864, "start": 172.72, "end": 176.72, "text": " And this data is often off heap, of course.", "tokens": [50568, 400, 341, 1412, 307, 2049, 766, 33591, 11, 295, 1164, 13, 50768], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 60, "seek": 16864, "start": 176.72, "end": 180.44, "text": " And there are not very many libraries in the JDK", "tokens": [50768, 400, 456, 366, 406, 588, 867, 15148, 294, 264, 37082, 42, 50954], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 61, "seek": 16864, "start": 180.44, "end": 184.6, "text": " that allows us to do off-heap memory access.", "tokens": [50954, 300, 4045, 505, 281, 360, 766, 12, 675, 569, 4675, 2105, 13, 51162], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 62, "seek": 16864, "start": 184.6, "end": 186.76, "text": " One of them is the DirectBuffer API.", "tokens": [51162, 1485, 295, 552, 307, 264, 18308, 33, 1245, 260, 9362, 13, 51270], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 63, "seek": 16864, "start": 186.76, "end": 189.72, "text": " So probably you are familiar with DirectBuffers.", "tokens": [51270, 407, 1391, 291, 366, 4963, 365, 18308, 33, 1245, 433, 13, 51418], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 64, "seek": 16864, "start": 189.72, "end": 191.44, "text": " They can be passed to native methods.", "tokens": [51418, 814, 393, 312, 4678, 281, 8470, 7150, 13, 51504], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 65, "seek": 16864, "start": 191.44, "end": 193.2, "text": " And there are some JNI functions that", "tokens": [51504, 400, 456, 366, 512, 508, 42496, 6828, 300, 51592], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 66, "seek": 16864, "start": 193.2, "end": 196.83999999999997, "text": " allows us to, for example, get the pointer that", "tokens": [51592, 4045, 505, 281, 11, 337, 1365, 11, 483, 264, 23918, 300, 51774], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 67, "seek": 16864, "start": 196.83999999999997, "end": 198.48, "text": " is backing a DirectBuffer.", "tokens": [51774, 307, 19373, 257, 18308, 33, 1245, 260, 13, 51856], "temperature": 0.0, "avg_logprob": -0.15154190950615462, "compression_ratio": 1.6679104477611941, "no_speech_prob": 0.009504145942628384}, {"id": 68, "seek": 19848, "start": 198.48, "end": 202.23999999999998, "text": " So that the JNI code can manipulate the buffer directly.", "tokens": [50364, 407, 300, 264, 508, 42496, 3089, 393, 20459, 264, 21762, 3838, 13, 50552], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 69, "seek": 19848, "start": 202.23999999999998, "end": 204.92, "text": " One of the issues with DirectBuffer, perhaps the main one,", "tokens": [50552, 1485, 295, 264, 2663, 365, 18308, 33, 1245, 260, 11, 4317, 264, 2135, 472, 11, 50686], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 70, "seek": 19848, "start": 204.92, "end": 208.6, "text": " is that there is no deterministic way to free or unmap", "tokens": [50686, 307, 300, 456, 307, 572, 15957, 3142, 636, 281, 1737, 420, 517, 24223, 50870], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 71, "seek": 19848, "start": 208.6, "end": 209.56, "text": " a byte buffer.", "tokens": [50870, 257, 40846, 21762, 13, 50918], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 72, "seek": 19848, "start": 209.56, "end": 212.32, "text": " So if you are done using your off-heap memory,", "tokens": [50918, 407, 498, 291, 366, 1096, 1228, 428, 766, 12, 675, 569, 4675, 11, 51056], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 73, "seek": 19848, "start": 212.32, "end": 214.39999999999998, "text": " you basically have to wait for the garbage collector", "tokens": [51056, 291, 1936, 362, 281, 1699, 337, 264, 14150, 23960, 51160], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 74, "seek": 19848, "start": 214.39999999999998, "end": 217.12, "text": " to determine that the byte buffer is no longer", "tokens": [51160, 281, 6997, 300, 264, 40846, 21762, 307, 572, 2854, 51296], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 75, "seek": 19848, "start": 217.12, "end": 218.44, "text": " reachable from your application.", "tokens": [51296, 2524, 712, 490, 428, 3861, 13, 51362], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 76, "seek": 19848, "start": 218.44, "end": 222.0, "text": " And that can have a latency cost.", "tokens": [51362, 400, 300, 393, 362, 257, 27043, 2063, 13, 51540], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 77, "seek": 19848, "start": 222.0, "end": 224.83999999999997, "text": " There is also a problem in the addressing space.", "tokens": [51540, 821, 307, 611, 257, 1154, 294, 264, 14329, 1901, 13, 51682], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 78, "seek": 19848, "start": 224.83999999999997, "end": 228.32, "text": " The byte buffer API was born in 1.4 time.", "tokens": [51682, 440, 40846, 21762, 9362, 390, 4232, 294, 502, 13, 19, 565, 13, 51856], "temperature": 0.0, "avg_logprob": -0.17816198843496817, "compression_ratio": 1.6838487972508591, "no_speech_prob": 0.0031676958315074444}, {"id": 79, "seek": 22832, "start": 228.35999999999999, "end": 231.32, "text": " So quite a few years ago.", "tokens": [50366, 407, 1596, 257, 1326, 924, 2057, 13, 50514], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 80, "seek": 22832, "start": 231.32, "end": 235.76, "text": " And we only use ints as offsets there,", "tokens": [50514, 400, 321, 787, 764, 560, 82, 382, 39457, 1385, 456, 11, 50736], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 81, "seek": 22832, "start": 235.76, "end": 240.4, "text": " which means the maximum addressable space is 2 gigabytes.", "tokens": [50736, 597, 1355, 264, 6674, 2985, 712, 1901, 307, 568, 42741, 13, 50968], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 82, "seek": 22832, "start": 240.4, "end": 244.0, "text": " With minus 1, yes.", "tokens": [50968, 2022, 3175, 502, 11, 2086, 13, 51148], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 83, "seek": 22832, "start": 244.0, "end": 247.04, "text": " With the advent of persistent memory,", "tokens": [51148, 2022, 264, 7045, 295, 24315, 4675, 11, 51300], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 84, "seek": 22832, "start": 247.04, "end": 251.56, "text": " these limits are starting to be a little bit tighter.", "tokens": [51300, 613, 10406, 366, 2891, 281, 312, 257, 707, 857, 30443, 13, 51526], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 85, "seek": 22832, "start": 251.56, "end": 254.28, "text": " Also, there are not many addressing options provided", "tokens": [51526, 2743, 11, 456, 366, 406, 867, 14329, 3956, 5649, 51662], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 86, "seek": 22832, "start": 254.28, "end": 255.24, "text": " by Buffer.", "tokens": [51662, 538, 20254, 260, 13, 51710], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 87, "seek": 22832, "start": 255.24, "end": 258.03999999999996, "text": " Either we go on the relative addressing scheme", "tokens": [51710, 13746, 321, 352, 322, 264, 4972, 14329, 12232, 51850], "temperature": 0.0, "avg_logprob": -0.19779022703779506, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.0021323836408555508}, {"id": 88, "seek": 25804, "start": 258.04, "end": 260.28000000000003, "text": " where basically we say, put in, put in, put in,", "tokens": [50364, 689, 1936, 321, 584, 11, 829, 294, 11, 829, 294, 11, 829, 294, 11, 50476], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 89, "seek": 25804, "start": 260.28000000000003, "end": 262.96000000000004, "text": " then we rely on a mutable index on the byte buffer", "tokens": [50476, 550, 321, 10687, 322, 257, 5839, 712, 8186, 322, 264, 40846, 21762, 50610], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 90, "seek": 25804, "start": 262.96000000000004, "end": 265.64000000000004, "text": " to keep track of where we want to store the bytes.", "tokens": [50610, 281, 1066, 2837, 295, 689, 321, 528, 281, 3531, 264, 36088, 13, 50744], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 91, "seek": 25804, "start": 265.64000000000004, "end": 268.40000000000003, "text": " But that's low because we have to mutate some state", "tokens": [50744, 583, 300, 311, 2295, 570, 321, 362, 281, 5839, 473, 512, 1785, 50882], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 92, "seek": 25804, "start": 268.40000000000003, "end": 272.0, "text": " and then situ optimization have a little bit more trouble", "tokens": [50882, 293, 550, 2054, 19618, 362, 257, 707, 857, 544, 5253, 51062], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 93, "seek": 25804, "start": 272.0, "end": 273.08000000000004, "text": " coping with that.", "tokens": [51062, 32893, 365, 300, 13, 51116], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 94, "seek": 25804, "start": 273.08000000000004, "end": 274.84000000000003, "text": " Or we go fully explicit.", "tokens": [51116, 1610, 321, 352, 4498, 13691, 13, 51204], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 95, "seek": 25804, "start": 274.84000000000003, "end": 277.36, "text": " And so we put offsets everywhere in our code.", "tokens": [51204, 400, 370, 321, 829, 39457, 1385, 5315, 294, 527, 3089, 13, 51330], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 96, "seek": 25804, "start": 277.36, "end": 281.68, "text": " And that makes our code a little bit more brittle.", "tokens": [51330, 400, 300, 1669, 527, 3089, 257, 707, 857, 544, 49325, 13, 51546], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 97, "seek": 25804, "start": 281.68, "end": 283.76, "text": " So this is what happens when you want", "tokens": [51546, 407, 341, 307, 437, 2314, 562, 291, 528, 51650], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 98, "seek": 25804, "start": 283.76, "end": 285.92, "text": " to access an IT library.", "tokens": [51650, 281, 2105, 364, 6783, 6405, 13, 51758], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 99, "seek": 25804, "start": 285.92, "end": 286.76, "text": " You have a client.", "tokens": [51758, 509, 362, 257, 6423, 13, 51800], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 100, "seek": 25804, "start": 286.76, "end": 287.8, "text": " You have an IT library.", "tokens": [51800, 509, 362, 364, 6783, 6405, 13, 51852], "temperature": 0.0, "avg_logprob": -0.1643824084051724, "compression_ratio": 1.7907801418439717, "no_speech_prob": 0.0036779625806957483}, {"id": 101, "seek": 28780, "start": 287.8, "end": 289.52000000000004, "text": " You have some JNI Goop in the middle.", "tokens": [50364, 509, 362, 512, 508, 42496, 1037, 404, 294, 264, 2808, 13, 50450], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 102, "seek": 28780, "start": 289.52000000000004, "end": 291.08, "text": " What's inside the JNI Goop?", "tokens": [50450, 708, 311, 1854, 264, 508, 42496, 1037, 404, 30, 50528], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 103, "seek": 28780, "start": 291.08, "end": 293.28000000000003, "text": " Well, a little bit of everything.", "tokens": [50528, 1042, 11, 257, 707, 857, 295, 1203, 13, 50638], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 104, "seek": 28780, "start": 293.28000000000003, "end": 296.08, "text": " There are some native method declarations in the Java code.", "tokens": [50638, 821, 366, 512, 8470, 3170, 16694, 763, 294, 264, 10745, 3089, 13, 50778], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 105, "seek": 28780, "start": 296.08, "end": 299.68, "text": " Then if you compile this code using Java C dash H,", "tokens": [50778, 1396, 498, 291, 31413, 341, 3089, 1228, 10745, 383, 8240, 389, 11, 50958], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 106, "seek": 28780, "start": 299.68, "end": 301.48, "text": " you have to use a special option, which", "tokens": [50958, 291, 362, 281, 764, 257, 2121, 3614, 11, 597, 51048], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 107, "seek": 28780, "start": 301.48, "end": 303.76, "text": " will generate the site headers file", "tokens": [51048, 486, 8460, 264, 3621, 45101, 3991, 51162], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 108, "seek": 28780, "start": 303.76, "end": 308.08000000000004, "text": " that you need in order to implement your C JNI function.", "tokens": [51162, 300, 291, 643, 294, 1668, 281, 4445, 428, 383, 508, 42496, 2445, 13, 51378], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 109, "seek": 28780, "start": 308.08000000000004, "end": 310.84000000000003, "text": " So you go over to C, you implement your JNI function.", "tokens": [51378, 407, 291, 352, 670, 281, 383, 11, 291, 4445, 428, 508, 42496, 2445, 13, 51516], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 110, "seek": 28780, "start": 310.84000000000003, "end": 313.44, "text": " You compile that function, the C file,", "tokens": [51516, 509, 31413, 300, 2445, 11, 264, 383, 3991, 11, 51646], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 111, "seek": 28780, "start": 313.44, "end": 315.8, "text": " which is your client compiler of choice.", "tokens": [51646, 597, 307, 428, 6423, 31958, 295, 3922, 13, 51764], "temperature": 0.0, "avg_logprob": -0.180252852263274, "compression_ratio": 1.7865168539325842, "no_speech_prob": 0.0067099942825734615}, {"id": 112, "seek": 31580, "start": 315.8, "end": 318.08, "text": " You get back a shim DLL.", "tokens": [50364, 509, 483, 646, 257, 402, 332, 413, 24010, 13, 50478], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 113, "seek": 31580, "start": 318.08, "end": 319.56, "text": " This DLL is not the library that you", "tokens": [50478, 639, 413, 24010, 307, 406, 264, 6405, 300, 291, 50552], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 114, "seek": 31580, "start": 319.56, "end": 321.44, "text": " wanted to talk to in the first place.", "tokens": [50552, 1415, 281, 751, 281, 294, 264, 700, 1081, 13, 50646], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 115, "seek": 31580, "start": 321.44, "end": 323.0, "text": " This is just some extra glue code", "tokens": [50646, 639, 307, 445, 512, 2857, 8998, 3089, 50724], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 116, "seek": 31580, "start": 323.0, "end": 325.64, "text": " that you need in order to get to the library that you want.", "tokens": [50724, 300, 291, 643, 294, 1668, 281, 483, 281, 264, 6405, 300, 291, 528, 13, 50856], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 117, "seek": 31580, "start": 325.64, "end": 328.16, "text": " So now you have two native libraries,", "tokens": [50856, 407, 586, 291, 362, 732, 8470, 15148, 11, 50982], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 118, "seek": 31580, "start": 328.16, "end": 332.92, "text": " the one you want to talk to and the JNI DLL.", "tokens": [50982, 264, 472, 291, 528, 281, 751, 281, 293, 264, 508, 42496, 413, 24010, 13, 51220], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 119, "seek": 31580, "start": 332.92, "end": 335.40000000000003, "text": " And that's a little bit suboptimal.", "tokens": [51220, 400, 300, 311, 257, 707, 857, 1422, 5747, 10650, 13, 51344], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 120, "seek": 31580, "start": 335.40000000000003, "end": 338.52, "text": " So what we need instead is a Java first programming model.", "tokens": [51344, 407, 437, 321, 643, 2602, 307, 257, 10745, 700, 9410, 2316, 13, 51500], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 121, "seek": 31580, "start": 338.52, "end": 340.44, "text": " So something that allows us to reach", "tokens": [51500, 407, 746, 300, 4045, 505, 281, 2524, 51596], "temperature": 0.0, "avg_logprob": -0.16677367785745414, "compression_ratio": 1.7215189873417722, "no_speech_prob": 0.005769150797277689}, {"id": 122, "seek": 34044, "start": 340.44, "end": 345.2, "text": " into native functions directly only used in Java code.", "tokens": [50364, 666, 8470, 6828, 3838, 787, 1143, 294, 10745, 3089, 13, 50602], "temperature": 0.0, "avg_logprob": -0.2338728051436575, "compression_ratio": 1.5418502202643172, "no_speech_prob": 0.011511488817632198}, {"id": 123, "seek": 34044, "start": 347.96, "end": 352.32, "text": " We also need, since we want to model off-it memory", "tokens": [50740, 492, 611, 643, 11, 1670, 321, 528, 281, 2316, 766, 12, 270, 4675, 50958], "temperature": 0.0, "avg_logprob": -0.2338728051436575, "compression_ratio": 1.5418502202643172, "no_speech_prob": 0.011511488817632198}, {"id": 124, "seek": 34044, "start": 352.32, "end": 355.16, "text": " in a more sane way, we need a replacement for the by-buffer", "tokens": [50958, 294, 257, 544, 45610, 636, 11, 321, 643, 257, 14419, 337, 264, 538, 12, 65, 1245, 260, 51100], "temperature": 0.0, "avg_logprob": -0.2338728051436575, "compression_ratio": 1.5418502202643172, "no_speech_prob": 0.011511488817632198}, {"id": 125, "seek": 34044, "start": 355.16, "end": 359.28, "text": " API, something that is more targeted at the use cases", "tokens": [51100, 9362, 11, 746, 300, 307, 544, 15045, 412, 264, 764, 3331, 51306], "temperature": 0.0, "avg_logprob": -0.2338728051436575, "compression_ratio": 1.5418502202643172, "no_speech_prob": 0.011511488817632198}, {"id": 126, "seek": 34044, "start": 359.28, "end": 362.2, "text": " that FFI has.", "tokens": [51306, 300, 479, 38568, 575, 13, 51452], "temperature": 0.0, "avg_logprob": -0.2338728051436575, "compression_ratio": 1.5418502202643172, "no_speech_prob": 0.011511488817632198}, {"id": 127, "seek": 34044, "start": 362.2, "end": 363.96, "text": " So we want deterministic allocation.", "tokens": [51452, 407, 321, 528, 15957, 3142, 27599, 13, 51540], "temperature": 0.0, "avg_logprob": -0.2338728051436575, "compression_ratio": 1.5418502202643172, "no_speech_prob": 0.011511488817632198}, {"id": 128, "seek": 34044, "start": 363.96, "end": 366.04, "text": " We want bigger addressing space.", "tokens": [51540, 492, 528, 3801, 14329, 1901, 13, 51644], "temperature": 0.0, "avg_logprob": -0.2338728051436575, "compression_ratio": 1.5418502202643172, "no_speech_prob": 0.011511488817632198}, {"id": 129, "seek": 34044, "start": 366.04, "end": 369.52, "text": " We want better ways to describe struct layouts", "tokens": [51644, 492, 528, 1101, 2098, 281, 6786, 6594, 46100, 51818], "temperature": 0.0, "avg_logprob": -0.2338728051436575, "compression_ratio": 1.5418502202643172, "no_speech_prob": 0.011511488817632198}, {"id": 130, "seek": 36952, "start": 369.52, "end": 372.91999999999996, "text": " so that we can access memory more easily.", "tokens": [50364, 370, 300, 321, 393, 2105, 4675, 544, 3612, 13, 50534], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 131, "seek": 36952, "start": 372.91999999999996, "end": 375.12, "text": " And also we want to tie everything together.", "tokens": [50534, 400, 611, 321, 528, 281, 7582, 1203, 1214, 13, 50644], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 132, "seek": 36952, "start": 375.12, "end": 376.91999999999996, "text": " So we want to define tools that allows", "tokens": [50644, 407, 321, 528, 281, 6964, 3873, 300, 4045, 50734], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 133, "seek": 36952, "start": 376.91999999999996, "end": 381.15999999999997, "text": " us to automatically generate bindings for native library", "tokens": [50734, 505, 281, 6772, 8460, 14786, 1109, 337, 8470, 6405, 50946], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 134, "seek": 36952, "start": 381.15999999999997, "end": 382.15999999999997, "text": " in one shot.", "tokens": [50946, 294, 472, 3347, 13, 50996], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 135, "seek": 36952, "start": 382.15999999999997, "end": 385.4, "text": " And we'll see a little bit about that later.", "tokens": [50996, 400, 321, 603, 536, 257, 707, 857, 466, 300, 1780, 13, 51158], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 136, "seek": 36952, "start": 385.4, "end": 388.44, "text": " Ultimately, our goal is not to replace existing frameworks,", "tokens": [51158, 23921, 11, 527, 3387, 307, 406, 281, 7406, 6741, 29834, 11, 51310], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 137, "seek": 36952, "start": 388.44, "end": 391.28, "text": " such as JNA, JNR, for example.", "tokens": [51310, 1270, 382, 508, 5321, 11, 508, 45, 49, 11, 337, 1365, 13, 51452], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 138, "seek": 36952, "start": 391.28, "end": 395.28, "text": " I think Charlie is going to talk about that maybe later.", "tokens": [51452, 286, 519, 13754, 307, 516, 281, 751, 466, 300, 1310, 1780, 13, 51652], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 139, "seek": 36952, "start": 395.28, "end": 397.52, "text": " But to help some of those frameworks", "tokens": [51652, 583, 281, 854, 512, 295, 729, 29834, 51764], "temperature": 0.0, "avg_logprob": -0.13561851099917763, "compression_ratio": 1.6098484848484849, "no_speech_prob": 0.003099109511822462}, {"id": 140, "seek": 39752, "start": 397.52, "end": 399.76, "text": " to overcome the workarounds that they", "tokens": [50364, 281, 10473, 264, 589, 289, 4432, 300, 436, 50476], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 141, "seek": 39752, "start": 399.76, "end": 402.79999999999995, "text": " have to keep doing all over again,", "tokens": [50476, 362, 281, 1066, 884, 439, 670, 797, 11, 50628], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 142, "seek": 39752, "start": 402.79999999999995, "end": 405.47999999999996, "text": " because they don't have a proper API to deal with pointers.", "tokens": [50628, 570, 436, 500, 380, 362, 257, 2296, 9362, 281, 2028, 365, 44548, 13, 50762], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 143, "seek": 39752, "start": 405.47999999999996, "end": 407.76, "text": " They don't have a proper API to free pointers", "tokens": [50762, 814, 500, 380, 362, 257, 2296, 9362, 281, 1737, 44548, 50876], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 144, "seek": 39752, "start": 407.76, "end": 409.24, "text": " when they are no longer used.", "tokens": [50876, 562, 436, 366, 572, 2854, 1143, 13, 50950], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 145, "seek": 39752, "start": 409.24, "end": 410.76, "text": " And so hopefully some of this stuff", "tokens": [50950, 400, 370, 4696, 512, 295, 341, 1507, 51026], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 146, "seek": 39752, "start": 410.76, "end": 413.0, "text": " is going to come handy in those cases, too.", "tokens": [51026, 307, 516, 281, 808, 13239, 294, 729, 3331, 11, 886, 13, 51138], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 147, "seek": 39752, "start": 415.84, "end": 418.76, "text": " So Panama is not just about the foreign function memory API.", "tokens": [51280, 407, 41202, 307, 406, 445, 466, 264, 5329, 2445, 4675, 9362, 13, 51426], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 148, "seek": 39752, "start": 418.76, "end": 421.44, "text": " Of course, that's a huge part of Panama.", "tokens": [51426, 2720, 1164, 11, 300, 311, 257, 2603, 644, 295, 41202, 13, 51560], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 149, "seek": 39752, "start": 421.44, "end": 423.84, "text": " But Panama also contains the vector API,", "tokens": [51560, 583, 41202, 611, 8306, 264, 8062, 9362, 11, 51680], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 150, "seek": 39752, "start": 423.84, "end": 427.0, "text": " which is an end API to access SIMD computation", "tokens": [51680, 597, 307, 364, 917, 9362, 281, 2105, 24738, 35, 24903, 51838], "temperature": 0.0, "avg_logprob": -0.16979180565176083, "compression_ratio": 1.6830985915492958, "no_speech_prob": 0.002529915887862444}, {"id": 151, "seek": 42700, "start": 427.0, "end": 429.28, "text": " from Java code directly.", "tokens": [50364, 490, 10745, 3089, 3838, 13, 50478], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 152, "seek": 42700, "start": 429.28, "end": 434.08, "text": " But there's also Babylon, a project that recently sprung up,", "tokens": [50478, 583, 456, 311, 611, 30278, 11, 257, 1716, 300, 3938, 6103, 1063, 493, 11, 50718], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 153, "seek": 42700, "start": 434.08, "end": 437.8, "text": " which allows us to see what's inside the body of a Java", "tokens": [50718, 597, 4045, 505, 281, 536, 437, 311, 1854, 264, 1772, 295, 257, 10745, 50904], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 154, "seek": 42700, "start": 437.8, "end": 443.24, "text": " method with a nice IR that can be introspective using Java.", "tokens": [50904, 3170, 365, 257, 1481, 16486, 300, 393, 312, 560, 28713, 488, 1228, 10745, 13, 51176], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 155, "seek": 42700, "start": 443.24, "end": 444.72, "text": " So what can you do with Babylon?", "tokens": [51176, 407, 437, 393, 291, 360, 365, 30278, 30, 51250], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 156, "seek": 42700, "start": 444.72, "end": 446.52, "text": " For example, you can take a Java method that", "tokens": [51250, 1171, 1365, 11, 291, 393, 747, 257, 10745, 3170, 300, 51340], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 157, "seek": 42700, "start": 446.52, "end": 450.2, "text": " contains a loop, for example.", "tokens": [51340, 8306, 257, 6367, 11, 337, 1365, 13, 51524], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 158, "seek": 42700, "start": 450.2, "end": 452.32, "text": " And you can inspect that loop.", "tokens": [51524, 400, 291, 393, 15018, 300, 6367, 13, 51630], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 159, "seek": 42700, "start": 452.32, "end": 454.4, "text": " You can turn it into a GPU kernel.", "tokens": [51630, 509, 393, 1261, 309, 666, 257, 18407, 28256, 13, 51734], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 160, "seek": 42700, "start": 454.4, "end": 456.8, "text": " And then you can use FFM to dispatch that kernel", "tokens": [51734, 400, 550, 291, 393, 764, 479, 37, 44, 281, 36729, 300, 28256, 51854], "temperature": 0.0, "avg_logprob": -0.13370121412040772, "compression_ratio": 1.669291338582677, "no_speech_prob": 0.013504667207598686}, {"id": 161, "seek": 45680, "start": 456.8, "end": 458.76, "text": " using CUDA to the GPU.", "tokens": [50364, 1228, 29777, 7509, 281, 264, 18407, 13, 50462], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 162, "seek": 45680, "start": 458.76, "end": 461.76, "text": " So Babylon and FFM kind of comes together", "tokens": [50462, 407, 30278, 293, 479, 37, 44, 733, 295, 1487, 1214, 50612], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 163, "seek": 45680, "start": 461.76, "end": 464.08, "text": " and provides us a better and more robust solution", "tokens": [50612, 293, 6417, 505, 257, 1101, 293, 544, 13956, 3827, 50728], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 164, "seek": 45680, "start": 464.08, "end": 467.40000000000003, "text": " in order to do on GPU computing.", "tokens": [50728, 294, 1668, 281, 360, 322, 18407, 15866, 13, 50894], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 165, "seek": 45680, "start": 470.72, "end": 473.24, "text": " The main instruction when it comes to accessing memory", "tokens": [51060, 440, 2135, 10951, 562, 309, 1487, 281, 26440, 4675, 51186], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 166, "seek": 45680, "start": 473.24, "end": 474.52, "text": " is called memory segment.", "tokens": [51186, 307, 1219, 4675, 9469, 13, 51250], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 167, "seek": 45680, "start": 474.52, "end": 477.36, "text": " That gives us access to a contiguous region of memory.", "tokens": [51250, 663, 2709, 505, 2105, 281, 257, 660, 30525, 4458, 295, 4675, 13, 51392], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 168, "seek": 45680, "start": 477.36, "end": 479.52, "text": " There are, of course, two kind of memory segments.", "tokens": [51392, 821, 366, 11, 295, 1164, 11, 732, 733, 295, 4675, 19904, 13, 51500], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 169, "seek": 45680, "start": 479.52, "end": 480.68, "text": " This is similar to white buffer.", "tokens": [51500, 639, 307, 2531, 281, 2418, 21762, 13, 51558], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 170, "seek": 45680, "start": 480.68, "end": 484.6, "text": " There are heap segments that are backed by on-heap memory.", "tokens": [51558, 821, 366, 33591, 19904, 300, 366, 20391, 538, 322, 12, 675, 569, 4675, 13, 51754], "temperature": 0.0, "avg_logprob": -0.17008514404296876, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.0034211173187941313}, {"id": 171, "seek": 48460, "start": 484.64000000000004, "end": 487.64000000000004, "text": " And native segments that are backed by off-heap memory.", "tokens": [50366, 400, 8470, 19904, 300, 366, 20391, 538, 766, 12, 675, 569, 4675, 13, 50516], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 172, "seek": 48460, "start": 487.64000000000004, "end": 489.28000000000003, "text": " All segments have a size.", "tokens": [50516, 1057, 19904, 362, 257, 2744, 13, 50598], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 173, "seek": 48460, "start": 489.28000000000003, "end": 491.68, "text": " So if you try to access a segment out of bounds,", "tokens": [50598, 407, 498, 291, 853, 281, 2105, 257, 9469, 484, 295, 29905, 11, 50718], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 174, "seek": 48460, "start": 491.68, "end": 492.96000000000004, "text": " you get an error.", "tokens": [50718, 291, 483, 364, 6713, 13, 50782], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 175, "seek": 48460, "start": 492.96000000000004, "end": 495.6, "text": " They have a lifetime, which means they are alive.", "tokens": [50782, 814, 362, 257, 11364, 11, 597, 1355, 436, 366, 5465, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 176, "seek": 48460, "start": 495.6, "end": 498.24, "text": " But then after you free them, they are no longer alive.", "tokens": [50914, 583, 550, 934, 291, 1737, 552, 11, 436, 366, 572, 2854, 5465, 13, 51046], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 177, "seek": 48460, "start": 498.24, "end": 501.8, "text": " So if you try to access them when they are no longer alive,", "tokens": [51046, 407, 498, 291, 853, 281, 2105, 552, 562, 436, 366, 572, 2854, 5465, 11, 51224], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 178, "seek": 48460, "start": 501.8, "end": 503.08000000000004, "text": " you get an exception.", "tokens": [51224, 291, 483, 364, 11183, 13, 51288], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 179, "seek": 48460, "start": 503.08000000000004, "end": 505.92, "text": " And some segments may also have confinement.", "tokens": [51288, 400, 512, 19904, 815, 611, 362, 41064, 13, 51430], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 180, "seek": 48460, "start": 505.92, "end": 511.64000000000004, "text": " So they may start in a thread, and they can only", "tokens": [51430, 407, 436, 815, 722, 294, 257, 7207, 11, 293, 436, 393, 787, 51716], "temperature": 0.0, "avg_logprob": -0.1398393457586115, "compression_ratio": 1.8454935622317596, "no_speech_prob": 0.00752464821562171}, {"id": 181, "seek": 51164, "start": 511.64, "end": 516.24, "text": " be accessed in the same thread where they started from.", "tokens": [50364, 312, 34211, 294, 264, 912, 7207, 689, 436, 1409, 490, 13, 50594], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 182, "seek": 51164, "start": 516.24, "end": 517.4, "text": " How do we use segments?", "tokens": [50594, 1012, 360, 321, 764, 19904, 30, 50652], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 183, "seek": 51164, "start": 517.4, "end": 518.64, "text": " Well, it's not too difficult.", "tokens": [50652, 1042, 11, 309, 311, 406, 886, 2252, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 184, "seek": 51164, "start": 518.64, "end": 520.4, "text": " It's very similar to white buffer.", "tokens": [50714, 467, 311, 588, 2531, 281, 2418, 21762, 13, 50802], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 185, "seek": 51164, "start": 520.4, "end": 522.56, "text": " You can almost see the translation,", "tokens": [50802, 509, 393, 1920, 536, 264, 12853, 11, 50910], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 186, "seek": 51164, "start": 522.56, "end": 525.04, "text": " the mechanical translation from the white buffer API", "tokens": [50910, 264, 12070, 12853, 490, 264, 2418, 21762, 9362, 51034], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 187, "seek": 51164, "start": 525.04, "end": 526.4399999999999, "text": " to memory segments.", "tokens": [51034, 281, 4675, 19904, 13, 51104], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 188, "seek": 51164, "start": 526.4399999999999, "end": 528.36, "text": " Let's say that we want to model a point that", "tokens": [51104, 961, 311, 584, 300, 321, 528, 281, 2316, 257, 935, 300, 51200], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 189, "seek": 51164, "start": 528.36, "end": 530.6, "text": " has fields x and y.", "tokens": [51200, 575, 7909, 2031, 293, 288, 13, 51312], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 190, "seek": 51164, "start": 530.6, "end": 532.56, "text": " So what we have to do, we have to allocate a segment.", "tokens": [51312, 407, 437, 321, 362, 281, 360, 11, 321, 362, 281, 35713, 257, 9469, 13, 51410], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 191, "seek": 51164, "start": 532.56, "end": 533.76, "text": " We do that using an arena.", "tokens": [51410, 492, 360, 300, 1228, 364, 18451, 13, 51470], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 192, "seek": 51164, "start": 533.76, "end": 536.2, "text": " We will see a little bit later what an arena is.", "tokens": [51470, 492, 486, 536, 257, 707, 857, 1780, 437, 364, 18451, 307, 13, 51592], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 193, "seek": 51164, "start": 536.2, "end": 539.28, "text": " Let's just go with me for a minute.", "tokens": [51592, 961, 311, 445, 352, 365, 385, 337, 257, 3456, 13, 51746], "temperature": 0.0, "avg_logprob": -0.13461197444370815, "compression_ratio": 1.7163120567375887, "no_speech_prob": 0.011915038339793682}, {"id": 194, "seek": 53928, "start": 539.28, "end": 541.64, "text": " We have to allocate a segment in 16 bytes,", "tokens": [50364, 492, 362, 281, 35713, 257, 9469, 294, 3165, 36088, 11, 50482], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 195, "seek": 53928, "start": 541.64, "end": 544.56, "text": " because the coordinates are 8 byte each.", "tokens": [50482, 570, 264, 21056, 366, 1649, 40846, 1184, 13, 50628], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 196, "seek": 53928, "start": 544.56, "end": 549.48, "text": " And then we put double values into each coordinates, one", "tokens": [50628, 400, 550, 321, 829, 3834, 4190, 666, 1184, 21056, 11, 472, 50874], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 197, "seek": 53928, "start": 549.48, "end": 551.8399999999999, "text": " at offset s0 and another at offset 8.", "tokens": [50874, 412, 18687, 262, 15, 293, 1071, 412, 18687, 1649, 13, 50992], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 198, "seek": 53928, "start": 551.8399999999999, "end": 554.24, "text": " And that's how we populate the memory", "tokens": [50992, 400, 300, 311, 577, 321, 1665, 5256, 264, 4675, 51112], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 199, "seek": 53928, "start": 554.24, "end": 556.48, "text": " of that particular segment.", "tokens": [51112, 295, 300, 1729, 9469, 13, 51224], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 200, "seek": 53928, "start": 556.48, "end": 558.9599999999999, "text": " So one of the issues that we have in this code, of course,", "tokens": [51224, 407, 472, 295, 264, 2663, 300, 321, 362, 294, 341, 3089, 11, 295, 1164, 11, 51348], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 201, "seek": 53928, "start": 558.9599999999999, "end": 560.88, "text": " is that we are using an automatic arena.", "tokens": [51348, 307, 300, 321, 366, 1228, 364, 12509, 18451, 13, 51444], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 202, "seek": 53928, "start": 560.88, "end": 562.64, "text": " An automatic arena is essentially", "tokens": [51444, 1107, 12509, 18451, 307, 4476, 51532], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 203, "seek": 53928, "start": 562.64, "end": 564.8399999999999, "text": " providing an automatic, the allocation scheme,", "tokens": [51532, 6530, 364, 12509, 11, 264, 27599, 12232, 11, 51642], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 204, "seek": 53928, "start": 564.8399999999999, "end": 567.8399999999999, "text": " which is similar to the one that is used by the white buffer", "tokens": [51642, 597, 307, 2531, 281, 264, 472, 300, 307, 1143, 538, 264, 2418, 21762, 51792], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 205, "seek": 53928, "start": 567.8399999999999, "end": 568.24, "text": " API.", "tokens": [51792, 9362, 13, 51812], "temperature": 0.0, "avg_logprob": -0.18626849341938514, "compression_ratio": 1.772563176895307, "no_speech_prob": 0.014284596778452396}, {"id": 206, "seek": 56824, "start": 568.24, "end": 570.6, "text": " So we are not going to get any advantage here.", "tokens": [50364, 407, 321, 366, 406, 516, 281, 483, 604, 5002, 510, 13, 50482], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 207, "seek": 56824, "start": 570.6, "end": 573.76, "text": " But we can do one better.", "tokens": [50482, 583, 321, 393, 360, 472, 1101, 13, 50640], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 208, "seek": 56824, "start": 573.76, "end": 576.6800000000001, "text": " In fact, this is actually where we spend the most time", "tokens": [50640, 682, 1186, 11, 341, 307, 767, 689, 321, 3496, 264, 881, 565, 50786], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 209, "seek": 56824, "start": 576.6800000000001, "end": 579.6, "text": " designing the memory API.", "tokens": [50786, 14685, 264, 4675, 9362, 13, 50932], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 210, "seek": 56824, "start": 579.6, "end": 582.44, "text": " Java, as you all know, is based on the very idea", "tokens": [50932, 10745, 11, 382, 291, 439, 458, 11, 307, 2361, 322, 264, 588, 1558, 51074], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 211, "seek": 56824, "start": 582.44, "end": 584.52, "text": " of having automatic memory management, which", "tokens": [51074, 295, 1419, 12509, 4675, 4592, 11, 597, 51178], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 212, "seek": 56824, "start": 584.52, "end": 586.84, "text": " means you only care about allocating objects.", "tokens": [51178, 1355, 291, 787, 1127, 466, 12660, 990, 6565, 13, 51294], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 213, "seek": 56824, "start": 586.84, "end": 588.96, "text": " The garbage collector will sit behind your back", "tokens": [51294, 440, 14150, 23960, 486, 1394, 2261, 428, 646, 51400], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 214, "seek": 56824, "start": 588.96, "end": 593.16, "text": " and automatically recycle memory when no longer used.", "tokens": [51400, 293, 6772, 32162, 4675, 562, 572, 2854, 1143, 13, 51610], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 215, "seek": 56824, "start": 593.16, "end": 595.48, "text": " This is based on this concept of computing", "tokens": [51610, 639, 307, 2361, 322, 341, 3410, 295, 15866, 51726], "temperature": 0.0, "avg_logprob": -0.12516087884301538, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.00201036361977458}, {"id": 216, "seek": 59548, "start": 595.48, "end": 598.72, "text": " which objects are reachable at any given point in time.", "tokens": [50364, 597, 6565, 366, 2524, 712, 412, 604, 2212, 935, 294, 565, 13, 50526], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 217, "seek": 59548, "start": 598.72, "end": 602.28, "text": " Problems with this approach is that computing the reachability", "tokens": [50526, 11676, 82, 365, 341, 3109, 307, 300, 15866, 264, 2524, 2310, 50704], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 218, "seek": 59548, "start": 602.28, "end": 605.24, "text": " graph, so which objects are reachable at any given point", "tokens": [50704, 4295, 11, 370, 597, 6565, 366, 2524, 712, 412, 604, 2212, 935, 50852], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 219, "seek": 59548, "start": 605.24, "end": 607.52, "text": " in time, is a very expensive operation.", "tokens": [50852, 294, 565, 11, 307, 257, 588, 5124, 6916, 13, 50966], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 220, "seek": 59548, "start": 607.52, "end": 611.64, "text": " And you can find that garbage collectors, especially", "tokens": [50966, 400, 291, 393, 915, 300, 14150, 35384, 11, 2318, 51172], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 221, "seek": 59548, "start": 611.64, "end": 613.6800000000001, "text": " the one of the latest generation, the low latency", "tokens": [51172, 264, 472, 295, 264, 6792, 5125, 11, 264, 2295, 27043, 51274], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 222, "seek": 59548, "start": 613.6800000000001, "end": 616.04, "text": " garbage collectors, they don't want to materialize", "tokens": [51274, 14150, 35384, 11, 436, 500, 380, 528, 281, 2527, 1125, 51392], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 223, "seek": 59548, "start": 616.04, "end": 617.8000000000001, "text": " the reachability graph as often.", "tokens": [51392, 264, 2524, 2310, 4295, 382, 2049, 13, 51480], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 224, "seek": 59548, "start": 617.8000000000001, "end": 619.36, "text": " So if you try, for example, to allocate", "tokens": [51480, 407, 498, 291, 853, 11, 337, 1365, 11, 281, 35713, 51558], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 225, "seek": 59548, "start": 619.36, "end": 622.48, "text": " a lot of the red buffer using ZGC,", "tokens": [51558, 257, 688, 295, 264, 2182, 21762, 1228, 1176, 38, 34, 11, 51714], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 226, "seek": 59548, "start": 622.48, "end": 625.36, "text": " you will see that there's a lot more time", "tokens": [51714, 291, 486, 536, 300, 456, 311, 257, 688, 544, 565, 51858], "temperature": 0.0, "avg_logprob": -0.11874162179452402, "compression_ratio": 1.8804347826086956, "no_speech_prob": 0.0075842575170099735}, {"id": 227, "seek": 62536, "start": 625.36, "end": 627.5600000000001, "text": " before the, by buffer, is collected", "tokens": [50364, 949, 264, 11, 538, 21762, 11, 307, 11087, 50474], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 228, "seek": 62536, "start": 627.5600000000001, "end": 630.6800000000001, "text": " compared to having something else where you can actually", "tokens": [50474, 5347, 281, 1419, 746, 1646, 689, 291, 393, 767, 50630], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 229, "seek": 62536, "start": 630.6800000000001, "end": 632.48, "text": " thermistically release the memory.", "tokens": [50630, 8810, 20458, 4374, 264, 4675, 13, 50720], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 230, "seek": 62536, "start": 632.48, "end": 634.24, "text": " So that's a problem.", "tokens": [50720, 407, 300, 311, 257, 1154, 13, 50808], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 231, "seek": 62536, "start": 634.24, "end": 636.08, "text": " Another problem is that the garbage collector", "tokens": [50808, 3996, 1154, 307, 300, 264, 14150, 23960, 50900], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 232, "seek": 62536, "start": 636.08, "end": 638.84, "text": " doesn't have knowledge about the off-heap memory region that", "tokens": [50900, 1177, 380, 362, 3601, 466, 264, 766, 12, 675, 569, 4675, 4458, 300, 51038], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 233, "seek": 62536, "start": 638.84, "end": 640.4, "text": " can be attached to the red buffer.", "tokens": [51038, 393, 312, 8570, 281, 264, 2182, 21762, 13, 51116], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 234, "seek": 62536, "start": 640.4, "end": 641.96, "text": " The only thing the garbage collector sees", "tokens": [51116, 440, 787, 551, 264, 14150, 23960, 8194, 51194], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 235, "seek": 62536, "start": 641.96, "end": 644.8000000000001, "text": " is a very small instance, a very small by buffer instance", "tokens": [51194, 307, 257, 588, 1359, 5197, 11, 257, 588, 1359, 538, 21762, 5197, 51336], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 236, "seek": 62536, "start": 644.8000000000001, "end": 648.2, "text": " that is like, I don't know, 16 bytes or something more.", "tokens": [51336, 300, 307, 411, 11, 286, 500, 380, 458, 11, 3165, 36088, 420, 746, 544, 13, 51506], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 237, "seek": 62536, "start": 648.2, "end": 650.0, "text": " But it doesn't seem that maybe there", "tokens": [51506, 583, 309, 1177, 380, 1643, 300, 1310, 456, 51596], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 238, "seek": 62536, "start": 650.0, "end": 652.24, "text": " are four gigabytes of off-heap memory attached to that.", "tokens": [51596, 366, 1451, 42741, 295, 766, 12, 675, 569, 4675, 8570, 281, 300, 13, 51708], "temperature": 0.0, "avg_logprob": -0.23184944926828577, "compression_ratio": 1.8846153846153846, "no_speech_prob": 0.0033575829584151506}, {"id": 239, "seek": 65224, "start": 652.24, "end": 655.8, "text": " So there's no way to prioritize that collection.", "tokens": [50364, 407, 456, 311, 572, 636, 281, 25164, 300, 5765, 13, 50542], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 240, "seek": 65224, "start": 655.8, "end": 659.8, "text": " And also, garbage collector only can keep track of an object", "tokens": [50542, 400, 611, 11, 14150, 23960, 787, 393, 1066, 2837, 295, 364, 2657, 50742], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 241, "seek": 65224, "start": 659.8, "end": 662.12, "text": " as long as if it's used from a Java application.", "tokens": [50742, 382, 938, 382, 498, 309, 311, 1143, 490, 257, 10745, 3861, 13, 50858], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 242, "seek": 65224, "start": 662.12, "end": 665.32, "text": " So if that by buffer escapes to native code,", "tokens": [50858, 407, 498, 300, 538, 21762, 43769, 281, 8470, 3089, 11, 51018], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 243, "seek": 65224, "start": 665.32, "end": 669.0, "text": " then it's up to the developer to keep that object alive", "tokens": [51018, 550, 309, 311, 493, 281, 264, 10754, 281, 1066, 300, 2657, 5465, 51202], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 244, "seek": 65224, "start": 669.0, "end": 670.6, "text": " across the native code boundary.", "tokens": [51202, 2108, 264, 8470, 3089, 12866, 13, 51282], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 245, "seek": 65224, "start": 670.6, "end": 673.88, "text": " So you have to start playing with reachability fences,", "tokens": [51282, 407, 291, 362, 281, 722, 2433, 365, 2524, 2310, 45796, 11, 51446], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 246, "seek": 65224, "start": 673.88, "end": 677.8, "text": " and your code suddenly doesn't look as good anymore.", "tokens": [51446, 293, 428, 3089, 5800, 1177, 380, 574, 382, 665, 3602, 13, 51642], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 247, "seek": 65224, "start": 677.8, "end": 681.28, "text": " So what we need is a new way to think", "tokens": [51642, 407, 437, 321, 643, 307, 257, 777, 636, 281, 519, 51816], "temperature": 0.0, "avg_logprob": -0.1361723113478276, "compression_ratio": 1.6343283582089552, "no_speech_prob": 0.004954034462571144}, {"id": 248, "seek": 68128, "start": 681.28, "end": 686.56, "text": " about managing memory resources explicitly.", "tokens": [50364, 466, 11642, 4675, 3593, 20803, 13, 50628], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 249, "seek": 68128, "start": 686.56, "end": 688.52, "text": " And that's challenging because we", "tokens": [50628, 400, 300, 311, 7595, 570, 321, 50726], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 250, "seek": 68128, "start": 688.52, "end": 690.36, "text": " are sitting on top of a language that", "tokens": [50726, 366, 3798, 322, 1192, 295, 257, 2856, 300, 50818], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 251, "seek": 68128, "start": 690.36, "end": 693.9599999999999, "text": " made its success on the very idea of basically never", "tokens": [50818, 1027, 1080, 2245, 322, 264, 588, 1558, 295, 1936, 1128, 50998], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 252, "seek": 68128, "start": 693.9599999999999, "end": 695.9599999999999, "text": " worry about releasing memory ever,", "tokens": [50998, 3292, 466, 16327, 4675, 1562, 11, 51098], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 253, "seek": 68128, "start": 695.9599999999999, "end": 699.28, "text": " because the garbage collector will do it for you.", "tokens": [51098, 570, 264, 14150, 23960, 486, 360, 309, 337, 291, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 254, "seek": 68128, "start": 699.28, "end": 702.4399999999999, "text": " So what we introduced was an abstraction called arena.", "tokens": [51264, 407, 437, 321, 7268, 390, 364, 37765, 1219, 18451, 13, 51422], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 255, "seek": 68128, "start": 702.4399999999999, "end": 706.8, "text": " And arena models the life cycle of one or more memory segment.", "tokens": [51422, 400, 18451, 5245, 264, 993, 6586, 295, 472, 420, 544, 4675, 9469, 13, 51640], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 256, "seek": 68128, "start": 706.8, "end": 709.4399999999999, "text": " All the memory segments are allocated with the same arena", "tokens": [51640, 1057, 264, 4675, 19904, 366, 29772, 365, 264, 912, 18451, 51772], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 257, "seek": 68128, "start": 709.4399999999999, "end": 711.04, "text": " at the same lifetime.", "tokens": [51772, 412, 264, 912, 11364, 13, 51852], "temperature": 0.0, "avg_logprob": -0.20914561793489275, "compression_ratio": 1.748062015503876, "no_speech_prob": 0.0015236662002280354}, {"id": 258, "seek": 71104, "start": 711.0799999999999, "end": 713.36, "text": " So we call this a lifetime-centric approach,", "tokens": [50366, 407, 321, 818, 341, 257, 11364, 12, 45300, 3109, 11, 50480], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 259, "seek": 71104, "start": 713.36, "end": 715.68, "text": " because first you have to think about what", "tokens": [50480, 570, 700, 291, 362, 281, 519, 466, 437, 50596], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 260, "seek": 71104, "start": 715.68, "end": 718.4, "text": " is the lifetime of the memory that you want to work with.", "tokens": [50596, 307, 264, 11364, 295, 264, 4675, 300, 291, 528, 281, 589, 365, 13, 50732], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 261, "seek": 71104, "start": 718.4, "end": 721.7199999999999, "text": " Then you create an arena that embodies that lifetime,", "tokens": [50732, 1396, 291, 1884, 364, 18451, 300, 4605, 6087, 300, 11364, 11, 50898], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 262, "seek": 71104, "start": 721.7199999999999, "end": 724.12, "text": " and then you start allocating memory.", "tokens": [50898, 293, 550, 291, 722, 12660, 990, 4675, 13, 51018], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 263, "seek": 71104, "start": 724.12, "end": 725.48, "text": " There are many kinds of arena.", "tokens": [51018, 821, 366, 867, 3685, 295, 18451, 13, 51086], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 264, "seek": 71104, "start": 725.48, "end": 728.76, "text": " Of course, there is the silly global arena that you can use.", "tokens": [51086, 2720, 1164, 11, 456, 307, 264, 11774, 4338, 18451, 300, 291, 393, 764, 13, 51250], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 265, "seek": 71104, "start": 728.76, "end": 731.8399999999999, "text": " And basically, whatever you allocate, it stays alive.", "tokens": [51250, 400, 1936, 11, 2035, 291, 35713, 11, 309, 10834, 5465, 13, 51404], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 266, "seek": 71104, "start": 731.8399999999999, "end": 733.36, "text": " It's never collected.", "tokens": [51404, 467, 311, 1128, 11087, 13, 51480], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 267, "seek": 71104, "start": 733.36, "end": 735.36, "text": " There's the automatic arena, which we saw before,", "tokens": [51480, 821, 311, 264, 12509, 18451, 11, 597, 321, 1866, 949, 11, 51580], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 268, "seek": 71104, "start": 735.36, "end": 739.3199999999999, "text": " which basically gives us an automatic memory management", "tokens": [51580, 597, 1936, 2709, 505, 364, 12509, 4675, 4592, 51778], "temperature": 0.0, "avg_logprob": -0.15254154205322265, "compression_ratio": 1.7867132867132867, "no_speech_prob": 0.003810807364061475}, {"id": 269, "seek": 73932, "start": 739.32, "end": 741.84, "text": " scheme, which is similar to the buffer.", "tokens": [50364, 12232, 11, 597, 307, 2531, 281, 264, 21762, 13, 50490], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 270, "seek": 73932, "start": 741.84, "end": 744.08, "text": " But then there are the more interesting confined and shared", "tokens": [50490, 583, 550, 456, 366, 264, 544, 1880, 31745, 293, 5507, 50602], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 271, "seek": 73932, "start": 744.08, "end": 744.8000000000001, "text": " arenas.", "tokens": [50602, 3212, 296, 13, 50638], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 272, "seek": 73932, "start": 744.8000000000001, "end": 747.84, "text": " These are arenas that support the autoclosable interface.", "tokens": [50638, 1981, 366, 3212, 296, 300, 1406, 264, 45833, 9389, 712, 9226, 13, 50790], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 273, "seek": 73932, "start": 747.84, "end": 749.6400000000001, "text": " So if you call close on that arena,", "tokens": [50790, 407, 498, 291, 818, 1998, 322, 300, 18451, 11, 50880], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 274, "seek": 73932, "start": 749.6400000000001, "end": 752.12, "text": " all the memory that has been allocated with that arena", "tokens": [50880, 439, 264, 4675, 300, 575, 668, 29772, 365, 300, 18451, 51004], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 275, "seek": 73932, "start": 752.12, "end": 754.36, "text": " will basically just go away deterministically.", "tokens": [51004, 486, 1936, 445, 352, 1314, 15957, 20458, 13, 51116], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 276, "seek": 73932, "start": 754.36, "end": 758.6, "text": " We don't need to wait for the garbage collector to do that.", "tokens": [51116, 492, 500, 380, 643, 281, 1699, 337, 264, 14150, 23960, 281, 360, 300, 13, 51328], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 277, "seek": 73932, "start": 758.6, "end": 760.7600000000001, "text": " There are strong safety guarantees.", "tokens": [51328, 821, 366, 2068, 4514, 32567, 13, 51436], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 278, "seek": 73932, "start": 760.7600000000001, "end": 763.12, "text": " Regardless of whether you are in the confined case", "tokens": [51436, 25148, 295, 1968, 291, 366, 294, 264, 31745, 1389, 51554], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 279, "seek": 73932, "start": 763.12, "end": 766.84, "text": " or in the shared case, it's not possible for you", "tokens": [51554, 420, 294, 264, 5507, 1389, 11, 309, 311, 406, 1944, 337, 291, 51740], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 280, "seek": 73932, "start": 766.84, "end": 769.08, "text": " to access a segment after it has been freed.", "tokens": [51740, 281, 2105, 257, 9469, 934, 309, 575, 668, 21796, 13, 51852], "temperature": 0.0, "avg_logprob": -0.13234305727309076, "compression_ratio": 1.7548387096774194, "no_speech_prob": 0.017681067809462547}, {"id": 281, "seek": 76908, "start": 769.08, "end": 772.84, "text": " And in the shared case, we had to do a lot of JVM black magic", "tokens": [50364, 400, 294, 264, 5507, 1389, 11, 321, 632, 281, 360, 257, 688, 295, 508, 53, 44, 2211, 5585, 50552], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 282, "seek": 76908, "start": 772.84, "end": 775.2800000000001, "text": " in order to make this work.", "tokens": [50552, 294, 1668, 281, 652, 341, 589, 13, 50674], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 283, "seek": 76908, "start": 775.2800000000001, "end": 779.5200000000001, "text": " Because of course, you can think, well, we just put a lock.", "tokens": [50674, 1436, 295, 1164, 11, 291, 393, 519, 11, 731, 11, 321, 445, 829, 257, 4017, 13, 50886], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 284, "seek": 76908, "start": 779.5200000000001, "end": 781.08, "text": " Whenever you access a memory segment,", "tokens": [50886, 14159, 291, 2105, 257, 4675, 9469, 11, 50964], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 285, "seek": 76908, "start": 781.08, "end": 783.76, "text": " we'll check whether the segment is still alive using", "tokens": [50964, 321, 603, 1520, 1968, 264, 9469, 307, 920, 5465, 1228, 51098], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 286, "seek": 76908, "start": 783.76, "end": 784.88, "text": " an expressive operation.", "tokens": [51098, 364, 40189, 6916, 13, 51154], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 287, "seek": 76908, "start": 784.88, "end": 788.12, "text": " And then you realize that memory access is 10x slower", "tokens": [51154, 400, 550, 291, 4325, 300, 4675, 2105, 307, 1266, 87, 14009, 51316], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 288, "seek": 76908, "start": 788.12, "end": 788.6800000000001, "text": " than before.", "tokens": [51316, 813, 949, 13, 51344], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 289, "seek": 76908, "start": 788.6800000000001, "end": 792.36, "text": " So what we did instead is, with the help of the GC team,", "tokens": [51344, 407, 437, 321, 630, 2602, 307, 11, 365, 264, 854, 295, 264, 29435, 1469, 11, 51528], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 290, "seek": 76908, "start": 792.36, "end": 795.5200000000001, "text": " we relied on some safe pointing mechanism", "tokens": [51528, 321, 35463, 322, 512, 3273, 12166, 7513, 51686], "temperature": 0.0, "avg_logprob": -0.17710076967875163, "compression_ratio": 1.5615942028985508, "no_speech_prob": 0.0059709143824875355}, {"id": 291, "seek": 79552, "start": 795.56, "end": 800.04, "text": " to make sure that it is never possible to close a segment", "tokens": [50366, 281, 652, 988, 300, 309, 307, 1128, 1944, 281, 1998, 257, 9469, 50590], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 292, "seek": 79552, "start": 800.04, "end": 801.92, "text": " while there is any other thread that is trying", "tokens": [50590, 1339, 456, 307, 604, 661, 7207, 300, 307, 1382, 50684], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 293, "seek": 79552, "start": 801.92, "end": 804.04, "text": " to access the same segment.", "tokens": [50684, 281, 2105, 264, 912, 9469, 13, 50790], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 294, "seek": 79552, "start": 804.04, "end": 805.04, "text": " That works very well.", "tokens": [50790, 663, 1985, 588, 731, 13, 50840], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 295, "seek": 79552, "start": 805.04, "end": 806.72, "text": " Of course, it's a little bit more expensive", "tokens": [50840, 2720, 1164, 11, 309, 311, 257, 707, 857, 544, 5124, 50924], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 296, "seek": 79552, "start": 806.72, "end": 810.4399999999999, "text": " if you need to close shared arena very frequently.", "tokens": [50924, 498, 291, 643, 281, 1998, 5507, 18451, 588, 10374, 13, 51110], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 297, "seek": 79552, "start": 810.4399999999999, "end": 814.76, "text": " But hopefully, you won't need to do that.", "tokens": [51110, 583, 4696, 11, 291, 1582, 380, 643, 281, 360, 300, 13, 51326], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 298, "seek": 79552, "start": 814.76, "end": 817.0, "text": " So what we are trying to do here is to find an epibalance", "tokens": [51326, 407, 437, 321, 366, 1382, 281, 360, 510, 307, 281, 915, 364, 2388, 897, 304, 719, 51438], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 299, "seek": 79552, "start": 817.0, "end": 821.28, "text": " between the flexibility of C automatic memory management,", "tokens": [51438, 1296, 264, 12635, 295, 383, 12509, 4675, 4592, 11, 51652], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 300, "seek": 79552, "start": 821.28, "end": 823.72, "text": " sorry, the thermistic memory management,", "tokens": [51652, 2597, 11, 264, 8810, 3142, 4675, 4592, 11, 51774], "temperature": 0.0, "avg_logprob": -0.19411622063588288, "compression_ratio": 1.6905660377358491, "no_speech_prob": 0.004402776248753071}, {"id": 301, "seek": 82372, "start": 823.72, "end": 827.72, "text": " where you have to do free and maloc explicitly.", "tokens": [50364, 689, 291, 362, 281, 360, 1737, 293, 2806, 905, 20803, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 302, "seek": 82372, "start": 827.72, "end": 830.0, "text": " That's very flexible, but it's also very unsafe,", "tokens": [50564, 663, 311, 588, 11358, 11, 457, 309, 311, 611, 588, 35948, 11, 50678], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 303, "seek": 82372, "start": 830.0, "end": 831.96, "text": " because you can have use after free,", "tokens": [50678, 570, 291, 393, 362, 764, 934, 1737, 11, 50776], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 304, "seek": 82372, "start": 831.96, "end": 835.6800000000001, "text": " you can have memory leak, or the extreme safety of Rust,", "tokens": [50776, 291, 393, 362, 4675, 17143, 11, 420, 264, 8084, 4514, 295, 34952, 11, 50962], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 305, "seek": 82372, "start": 835.6800000000001, "end": 838.32, "text": " which comes at the expense of some flexibility", "tokens": [50962, 597, 1487, 412, 264, 18406, 295, 512, 12635, 51094], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 306, "seek": 82372, "start": 838.32, "end": 839.4, "text": " when you try to code.", "tokens": [51094, 562, 291, 853, 281, 3089, 13, 51148], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 307, "seek": 82372, "start": 839.4, "end": 841.84, "text": " Because if you want to do, for example,", "tokens": [51148, 1436, 498, 291, 528, 281, 360, 11, 337, 1365, 11, 51270], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 308, "seek": 82372, "start": 841.84, "end": 844.84, "text": " secret data structures in Rust, like a link list,", "tokens": [51270, 4054, 1412, 9227, 294, 34952, 11, 411, 257, 2113, 1329, 11, 51420], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 309, "seek": 82372, "start": 844.84, "end": 848.4, "text": " it becomes very, very, very difficult.", "tokens": [51420, 309, 3643, 588, 11, 588, 11, 588, 2252, 13, 51598], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 310, "seek": 82372, "start": 848.4, "end": 850.52, "text": " So Java is trying to sit in the middle.", "tokens": [51598, 407, 10745, 307, 1382, 281, 1394, 294, 264, 2808, 13, 51704], "temperature": 0.0, "avg_logprob": -0.17535627683003743, "compression_ratio": 1.671875, "no_speech_prob": 0.016517678275704384}, {"id": 311, "seek": 85052, "start": 850.52, "end": 855.92, "text": " And I think we've done a good job doing this.", "tokens": [50364, 400, 286, 519, 321, 600, 1096, 257, 665, 1691, 884, 341, 13, 50634], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 312, "seek": 85052, "start": 855.92, "end": 858.1999999999999, "text": " So how do you work with explicit arenas?", "tokens": [50634, 407, 577, 360, 291, 589, 365, 13691, 3212, 296, 30, 50748], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 313, "seek": 85052, "start": 858.1999999999999, "end": 860.48, "text": " It's basically the same as with automatic arenas.", "tokens": [50748, 467, 311, 1936, 264, 912, 382, 365, 12509, 3212, 296, 13, 50862], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 314, "seek": 85052, "start": 860.48, "end": 862.0, "text": " The only difference here is that now we", "tokens": [50862, 440, 787, 2649, 510, 307, 300, 586, 321, 50938], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 315, "seek": 85052, "start": 862.0, "end": 864.0799999999999, "text": " are using a try with resource statement.", "tokens": [50938, 366, 1228, 257, 853, 365, 7684, 5629, 13, 51042], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 316, "seek": 85052, "start": 864.0799999999999, "end": 867.28, "text": " So we create the arena inside the try with resource block.", "tokens": [51042, 407, 321, 1884, 264, 18451, 1854, 264, 853, 365, 7684, 3461, 13, 51202], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 317, "seek": 85052, "start": 867.28, "end": 868.36, "text": " We do the allocation.", "tokens": [51202, 492, 360, 264, 27599, 13, 51256], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 318, "seek": 85052, "start": 868.36, "end": 870.4399999999999, "text": " We populate the point struct.", "tokens": [51256, 492, 1665, 5256, 264, 935, 6594, 13, 51360], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 319, "seek": 85052, "start": 870.4399999999999, "end": 873.6, "text": " And then when we close the brace, all the memory goes away.", "tokens": [51360, 400, 550, 562, 321, 1998, 264, 38458, 11, 439, 264, 4675, 1709, 1314, 13, 51518], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 320, "seek": 85052, "start": 873.6, "end": 876.64, "text": " So this is much better than the direct buffer counterpart,", "tokens": [51518, 407, 341, 307, 709, 1101, 813, 264, 2047, 21762, 22335, 11, 51670], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 321, "seek": 85052, "start": 876.64, "end": 880.24, "text": " especially if you need to frequently allocate off-heap", "tokens": [51670, 2318, 498, 291, 643, 281, 10374, 35713, 766, 12, 675, 569, 51850], "temperature": 0.0, "avg_logprob": -0.1638655698389039, "compression_ratio": 1.7016949152542373, "no_speech_prob": 0.0036535868421196938}, {"id": 322, "seek": 88024, "start": 880.24, "end": 882.52, "text": " data structures, because we no longer", "tokens": [50364, 1412, 9227, 11, 570, 321, 572, 2854, 50478], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 323, "seek": 88024, "start": 882.52, "end": 884.08, "text": " put load on the garbage collector", "tokens": [50478, 829, 3677, 322, 264, 14150, 23960, 50556], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 324, "seek": 88024, "start": 884.08, "end": 886.16, "text": " just to clean up the off-heap memory.", "tokens": [50556, 445, 281, 2541, 493, 264, 766, 12, 675, 569, 4675, 13, 50660], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 325, "seek": 88024, "start": 889.0, "end": 893.6, "text": " So one thing that we need to still improve on this API", "tokens": [50802, 407, 472, 551, 300, 321, 643, 281, 920, 3470, 322, 341, 9362, 51032], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 326, "seek": 88024, "start": 893.6, "end": 897.12, "text": " is how do we access the fields of the struct", "tokens": [51032, 307, 577, 360, 321, 2105, 264, 7909, 295, 264, 6594, 51208], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 327, "seek": 88024, "start": 897.12, "end": 899.12, "text": " that we want to operate with?", "tokens": [51208, 300, 321, 528, 281, 9651, 365, 30, 51308], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 328, "seek": 88024, "start": 899.12, "end": 901.28, "text": " In the example that I showed previously,", "tokens": [51308, 682, 264, 1365, 300, 286, 4712, 8046, 11, 51416], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 329, "seek": 88024, "start": 901.28, "end": 903.6, "text": " we had to say, well, I want to access off-heap zero.", "tokens": [51416, 321, 632, 281, 584, 11, 731, 11, 286, 528, 281, 2105, 766, 12, 675, 569, 4018, 13, 51532], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 330, "seek": 88024, "start": 903.6, "end": 905.36, "text": " I want to access off-heap eight, because we", "tokens": [51532, 286, 528, 281, 2105, 766, 12, 675, 569, 3180, 11, 570, 321, 51620], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 331, "seek": 88024, "start": 905.36, "end": 908.44, "text": " knew these were the offset where my fields are.", "tokens": [51620, 2586, 613, 645, 264, 18687, 689, 452, 7909, 366, 13, 51774], "temperature": 0.0, "avg_logprob": -0.16314165709448641, "compression_ratio": 1.7782426778242677, "no_speech_prob": 0.0016579828225076199}, {"id": 332, "seek": 90844, "start": 908.44, "end": 912.48, "text": " But what if we could just declare", "tokens": [50364, 583, 437, 498, 321, 727, 445, 19710, 50566], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 333, "seek": 90844, "start": 912.48, "end": 914.6400000000001, "text": " what is the layout of the struct that I want to work with?", "tokens": [50566, 437, 307, 264, 13333, 295, 264, 6594, 300, 286, 528, 281, 589, 365, 30, 50674], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 334, "seek": 90844, "start": 914.6400000000001, "end": 917.7600000000001, "text": " What if we can translate the struct point 2D definition", "tokens": [50674, 708, 498, 321, 393, 13799, 264, 6594, 935, 568, 35, 7123, 50830], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 335, "seek": 90844, "start": 917.7600000000001, "end": 921.9200000000001, "text": " that we have in C into a Java object that models", "tokens": [50830, 300, 321, 362, 294, 383, 666, 257, 10745, 2657, 300, 5245, 51038], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 336, "seek": 90844, "start": 921.9200000000001, "end": 923.08, "text": " the same layout?", "tokens": [51038, 264, 912, 13333, 30, 51096], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 337, "seek": 90844, "start": 923.08, "end": 925.08, "text": " Then we can start asking interesting questions,", "tokens": [51096, 1396, 321, 393, 722, 3365, 1880, 1651, 11, 51196], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 338, "seek": 90844, "start": 925.08, "end": 928.1600000000001, "text": " such as what is the layout of the field x or y.", "tokens": [51196, 1270, 382, 437, 307, 264, 13333, 295, 264, 2519, 2031, 420, 288, 13, 51350], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 339, "seek": 90844, "start": 928.1600000000001, "end": 931.44, "text": " Give me avarendo for accessing the x field.", "tokens": [51350, 5303, 385, 1305, 543, 273, 78, 337, 26440, 264, 2031, 2519, 13, 51514], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 340, "seek": 90844, "start": 931.44, "end": 933.6, "text": " And that is exactly what we are doing here.", "tokens": [51514, 400, 300, 307, 2293, 437, 321, 366, 884, 510, 13, 51622], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 341, "seek": 90844, "start": 933.6, "end": 936.6800000000001, "text": " So instead of just relegating the definition of point", "tokens": [51622, 407, 2602, 295, 445, 2951, 70, 990, 264, 7123, 295, 935, 51776], "temperature": 0.0, "avg_logprob": -0.19298858952716114, "compression_ratio": 1.765625, "no_speech_prob": 0.0017615327378734946}, {"id": 342, "seek": 93668, "start": 936.68, "end": 942.0, "text": " 2D in a comment, we actually define", "tokens": [50364, 568, 35, 294, 257, 2871, 11, 321, 767, 6964, 50630], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 343, "seek": 93668, "start": 942.0, "end": 946.04, "text": " the layout of the point struct as an object, as a Java object.", "tokens": [50630, 264, 13333, 295, 264, 935, 6594, 382, 364, 2657, 11, 382, 257, 10745, 2657, 13, 50832], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 344, "seek": 93668, "start": 946.04, "end": 949.0, "text": " And then we use this object to derive the two varendals, one", "tokens": [50832, 400, 550, 321, 764, 341, 2657, 281, 28446, 264, 732, 1374, 521, 1124, 11, 472, 50980], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 345, "seek": 93668, "start": 949.0, "end": 953.4, "text": " for accessing the x field and one for accessing the y field.", "tokens": [50980, 337, 26440, 264, 2031, 2519, 293, 472, 337, 26440, 264, 288, 2519, 13, 51200], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 346, "seek": 93668, "start": 953.4, "end": 955.04, "text": " Then inside the try with our sources,", "tokens": [51200, 1396, 1854, 264, 853, 365, 527, 7139, 11, 51282], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 347, "seek": 93668, "start": 955.04, "end": 957.0, "text": " we can just use the varendal to access the fields.", "tokens": [51282, 321, 393, 445, 764, 264, 1374, 521, 304, 281, 2105, 264, 7909, 13, 51380], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 348, "seek": 93668, "start": 957.0, "end": 961.16, "text": " We don't have to specify the offset eight for the field y,", "tokens": [51380, 492, 500, 380, 362, 281, 16500, 264, 18687, 3180, 337, 264, 2519, 288, 11, 51588], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 349, "seek": 93668, "start": 961.16, "end": 963.8, "text": " for example, because the varendal will encode all the offset", "tokens": [51588, 337, 1365, 11, 570, 264, 1374, 521, 304, 486, 2058, 1429, 439, 264, 18687, 51720], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 350, "seek": 93668, "start": 963.8, "end": 966.4, "text": " computation automatically.", "tokens": [51720, 24903, 6772, 13, 51850], "temperature": 0.0, "avg_logprob": -0.18210646413987683, "compression_ratio": 1.7882352941176471, "no_speech_prob": 0.002393011935055256}, {"id": 351, "seek": 96640, "start": 966.4, "end": 969.28, "text": " At the same time, look in the allocation expression,", "tokens": [50364, 1711, 264, 912, 565, 11, 574, 294, 264, 27599, 6114, 11, 50508], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 352, "seek": 96640, "start": 969.28, "end": 971.8, "text": " the very first inside the try with our source block,", "tokens": [50508, 264, 588, 700, 1854, 264, 853, 365, 527, 4009, 3461, 11, 50634], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 353, "seek": 96640, "start": 971.8, "end": 973.0799999999999, "text": " we can see that we are just using", "tokens": [50634, 321, 393, 536, 300, 321, 366, 445, 1228, 50698], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 354, "seek": 96640, "start": 973.0799999999999, "end": 975.88, "text": " passing the layout to the location routine.", "tokens": [50698, 8437, 264, 13333, 281, 264, 4914, 9927, 13, 50838], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 355, "seek": 96640, "start": 975.88, "end": 977.64, "text": " And the layout, of course, knows what", "tokens": [50838, 400, 264, 13333, 11, 295, 1164, 11, 3255, 437, 50926], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 356, "seek": 96640, "start": 977.64, "end": 982.4399999999999, "text": " is the size of the block that we want to allocate.", "tokens": [50926, 307, 264, 2744, 295, 264, 3461, 300, 321, 528, 281, 35713, 13, 51166], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 357, "seek": 96640, "start": 982.4399999999999, "end": 984.28, "text": " So switching gears a little bit, let's", "tokens": [51166, 407, 16493, 20915, 257, 707, 857, 11, 718, 311, 51258], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 358, "seek": 96640, "start": 984.28, "end": 986.28, "text": " start talking about FFI.", "tokens": [51258, 722, 1417, 466, 479, 38568, 13, 51358], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 359, "seek": 96640, "start": 986.28, "end": 989.6, "text": " The main abstraction in FFI is called native linker.", "tokens": [51358, 440, 2135, 37765, 294, 479, 38568, 307, 1219, 8470, 2113, 260, 13, 51524], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 360, "seek": 96640, "start": 989.6, "end": 992.6, "text": " This is an object that essentially embeds", "tokens": [51524, 639, 307, 364, 2657, 300, 4476, 12240, 82, 51674], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 361, "seek": 96640, "start": 992.6, "end": 996.3199999999999, "text": " the calling convention of the platform in which the JVM runs.", "tokens": [51674, 264, 5141, 10286, 295, 264, 3663, 294, 597, 264, 508, 53, 44, 6676, 13, 51860], "temperature": 0.0, "avg_logprob": -0.13619801492402048, "compression_ratio": 1.6768707482993197, "no_speech_prob": 0.004677604418247938}, {"id": 362, "seek": 99632, "start": 996.32, "end": 997.8000000000001, "text": " It provides two capabilities.", "tokens": [50364, 467, 6417, 732, 10862, 13, 50438], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 363, "seek": 99632, "start": 997.8000000000001, "end": 1000.8000000000001, "text": " The first is it allows us to derive a method", "tokens": [50438, 440, 700, 307, 309, 4045, 505, 281, 28446, 257, 3170, 50588], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 364, "seek": 99632, "start": 1000.8000000000001, "end": 1003.6800000000001, "text": " end all that targets a native function.", "tokens": [50588, 917, 439, 300, 12911, 257, 8470, 2445, 13, 50732], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 365, "seek": 99632, "start": 1003.6800000000001, "end": 1007.6800000000001, "text": " So we can basically describe the native function", "tokens": [50732, 407, 321, 393, 1936, 6786, 264, 8470, 2445, 50932], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 366, "seek": 99632, "start": 1007.6800000000001, "end": 1009.1600000000001, "text": " we want to call, get a method end all,", "tokens": [50932, 321, 528, 281, 818, 11, 483, 257, 3170, 917, 439, 11, 51006], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 367, "seek": 99632, "start": 1009.1600000000001, "end": 1010.5200000000001, "text": " and just call it from Java.", "tokens": [51006, 293, 445, 818, 309, 490, 10745, 13, 51074], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 368, "seek": 99632, "start": 1010.5200000000001, "end": 1012.7600000000001, "text": " The second capability is kind of the reverse of that.", "tokens": [51074, 440, 1150, 13759, 307, 733, 295, 264, 9943, 295, 300, 13, 51186], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 369, "seek": 99632, "start": 1012.7600000000001, "end": 1014.6400000000001, "text": " So we have a method end all that describes", "tokens": [51186, 407, 321, 362, 257, 3170, 917, 439, 300, 15626, 51280], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 370, "seek": 99632, "start": 1014.6400000000001, "end": 1016.0400000000001, "text": " on Java computation.", "tokens": [51280, 322, 10745, 24903, 13, 51350], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 371, "seek": 99632, "start": 1016.0400000000001, "end": 1018.24, "text": " We want to turn it into a function pointer,", "tokens": [51350, 492, 528, 281, 1261, 309, 666, 257, 2445, 23918, 11, 51460], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 372, "seek": 99632, "start": 1018.24, "end": 1021.36, "text": " so a memory segment, that then we can pass back to native code.", "tokens": [51460, 370, 257, 4675, 9469, 11, 300, 550, 321, 393, 1320, 646, 281, 8470, 3089, 13, 51616], "temperature": 0.0, "avg_logprob": -0.22323258196721313, "compression_ratio": 1.8688524590163935, "no_speech_prob": 0.004257771652191877}, {"id": 373, "seek": 102136, "start": 1021.36, "end": 1027.92, "text": " In this approach is inspired to, for example,", "tokens": [50364, 682, 341, 3109, 307, 7547, 281, 11, 337, 1365, 11, 50692], "temperature": 0.0, "avg_logprob": -0.21283185600054147, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.0044980160892009735}, {"id": 374, "seek": 102136, "start": 1027.92, "end": 1030.68, "text": " Python C types or lib FFI.", "tokens": [50692, 15329, 383, 3467, 420, 22854, 479, 38568, 13, 50830], "temperature": 0.0, "avg_logprob": -0.21283185600054147, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.0044980160892009735}, {"id": 375, "seek": 102136, "start": 1030.68, "end": 1032.3600000000001, "text": " These are kind of the main inspiration.", "tokens": [50830, 1981, 366, 733, 295, 264, 2135, 10249, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21283185600054147, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.0044980160892009735}, {"id": 376, "seek": 102136, "start": 1032.3600000000001, "end": 1038.28, "text": " So we want to be able to describe a function from Java,", "tokens": [50914, 407, 321, 528, 281, 312, 1075, 281, 6786, 257, 2445, 490, 10745, 11, 51210], "temperature": 0.0, "avg_logprob": -0.21283185600054147, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.0044980160892009735}, {"id": 377, "seek": 102136, "start": 1038.28, "end": 1041.24, "text": " so then we can call it directly.", "tokens": [51210, 370, 550, 321, 393, 818, 309, 3838, 13, 51358], "temperature": 0.0, "avg_logprob": -0.21283185600054147, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.0044980160892009735}, {"id": 378, "seek": 102136, "start": 1041.24, "end": 1044.16, "text": " It all builds on the abstraction that we've seen so far.", "tokens": [51358, 467, 439, 15182, 322, 264, 37765, 300, 321, 600, 1612, 370, 1400, 13, 51504], "temperature": 0.0, "avg_logprob": -0.21283185600054147, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.0044980160892009735}, {"id": 379, "seek": 102136, "start": 1044.16, "end": 1047.96, "text": " So we use layouts to describe the signature of C functions.", "tokens": [51504, 407, 321, 764, 46100, 281, 6786, 264, 13397, 295, 383, 6828, 13, 51694], "temperature": 0.0, "avg_logprob": -0.21283185600054147, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.0044980160892009735}, {"id": 380, "seek": 102136, "start": 1047.96, "end": 1051.2, "text": " We use memory segment to pass addresses or structs.", "tokens": [51694, 492, 764, 4675, 9469, 281, 1320, 16862, 420, 6594, 82, 13, 51856], "temperature": 0.0, "avg_logprob": -0.21283185600054147, "compression_ratio": 1.5546218487394958, "no_speech_prob": 0.0044980160892009735}, {"id": 381, "seek": 105120, "start": 1051.2, "end": 1055.72, "text": " And we use our in-apps to model life cycles of upcalls", "tokens": [50364, 400, 321, 764, 527, 294, 12, 1746, 82, 281, 2316, 993, 17796, 295, 493, 66, 39655, 50590], "temperature": 0.0, "avg_logprob": -0.2770782007235233, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.0002181652089348063}, {"id": 382, "seek": 105120, "start": 1055.72, "end": 1058.32, "text": " and to model the life cycles also of loaded libraries.", "tokens": [50590, 293, 281, 2316, 264, 993, 17796, 611, 295, 13210, 15148, 13, 50720], "temperature": 0.0, "avg_logprob": -0.2770782007235233, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.0002181652089348063}, {"id": 383, "seek": 105120, "start": 1061.04, "end": 1064.32, "text": " So when we want to call a native function,", "tokens": [50856, 407, 562, 321, 528, 281, 818, 257, 8470, 2445, 11, 51020], "temperature": 0.0, "avg_logprob": -0.2770782007235233, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.0002181652089348063}, {"id": 384, "seek": 105120, "start": 1064.32, "end": 1067.16, "text": " so here I define a function distance that take a point,", "tokens": [51020, 370, 510, 286, 6964, 257, 2445, 4560, 300, 747, 257, 935, 11, 51162], "temperature": 0.0, "avg_logprob": -0.2770782007235233, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.0002181652089348063}, {"id": 385, "seek": 105120, "start": 1067.16, "end": 1070.32, "text": " returns the distance of the point from the origin.", "tokens": [51162, 11247, 264, 4560, 295, 264, 935, 490, 264, 4957, 13, 51320], "temperature": 0.0, "avg_logprob": -0.2770782007235233, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.0002181652089348063}, {"id": 386, "seek": 105120, "start": 1070.32, "end": 1073.8400000000001, "text": " Actually, doing that in C is a little bit more convoluted", "tokens": [51320, 5135, 11, 884, 300, 294, 383, 307, 257, 707, 857, 544, 3754, 2308, 292, 51496], "temperature": 0.0, "avg_logprob": -0.2770782007235233, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.0002181652089348063}, {"id": 387, "seek": 105120, "start": 1073.8400000000001, "end": 1076.8400000000001, "text": " than it looks like, because it essentially depends", "tokens": [51496, 813, 309, 1542, 411, 11, 570, 309, 4476, 5946, 51646], "temperature": 0.0, "avg_logprob": -0.2770782007235233, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.0002181652089348063}, {"id": 388, "seek": 105120, "start": 1076.8400000000001, "end": 1078.32, "text": " on the platform we are on.", "tokens": [51646, 322, 264, 3663, 321, 366, 322, 13, 51720], "temperature": 0.0, "avg_logprob": -0.2770782007235233, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.0002181652089348063}, {"id": 389, "seek": 107832, "start": 1078.32, "end": 1082.52, "text": " So if we are on Linux, we will have to look at some rules", "tokens": [50364, 407, 498, 321, 366, 322, 18734, 11, 321, 486, 362, 281, 574, 412, 512, 4474, 50574], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 390, "seek": 107832, "start": 1082.52, "end": 1085.28, "text": " that are called the CSV calling convention.", "tokens": [50574, 300, 366, 1219, 264, 48814, 5141, 10286, 13, 50712], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 391, "seek": 107832, "start": 1085.28, "end": 1086.84, "text": " And that tells us that, for example,", "tokens": [50712, 400, 300, 5112, 505, 300, 11, 337, 1365, 11, 50790], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 392, "seek": 107832, "start": 1086.84, "end": 1090.3999999999999, "text": " structs that are as big as the point to destruct", "tokens": [50790, 6594, 82, 300, 366, 382, 955, 382, 264, 935, 281, 2677, 1757, 50968], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 393, "seek": 107832, "start": 1090.3999999999999, "end": 1093.52, "text": " that we have here can have their fields pass in registers.", "tokens": [50968, 300, 321, 362, 510, 393, 362, 641, 7909, 1320, 294, 38351, 13, 51124], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 394, "seek": 107832, "start": 1093.52, "end": 1095.08, "text": " So the only thing that we need to do when", "tokens": [51124, 407, 264, 787, 551, 300, 321, 643, 281, 360, 562, 51202], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 395, "seek": 107832, "start": 1095.08, "end": 1098.9199999999998, "text": " calling the distance function is to load the first floating", "tokens": [51202, 5141, 264, 4560, 2445, 307, 281, 3677, 264, 700, 12607, 51394], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 396, "seek": 107832, "start": 1098.9199999999998, "end": 1102.28, "text": " point register with the value 3, the second floating point", "tokens": [51394, 935, 7280, 365, 264, 2158, 805, 11, 264, 1150, 12607, 935, 51562], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 397, "seek": 107832, "start": 1102.28, "end": 1104.9199999999998, "text": " register with the value 4, then we just jump on the function.", "tokens": [51562, 7280, 365, 264, 2158, 1017, 11, 550, 321, 445, 3012, 322, 264, 2445, 13, 51694], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 398, "seek": 107832, "start": 1104.9199999999998, "end": 1107.8799999999999, "text": " But if you are on Windows, even if you are on X64,", "tokens": [51694, 583, 498, 291, 366, 322, 8591, 11, 754, 498, 291, 366, 322, 1783, 19395, 11, 51842], "temperature": 0.0, "avg_logprob": -0.1901030194932136, "compression_ratio": 1.8571428571428572, "no_speech_prob": 0.003889245679602027}, {"id": 399, "seek": 110788, "start": 1107.88, "end": 1110.72, "text": " but on Windows, there is a completely different set", "tokens": [50364, 457, 322, 8591, 11, 456, 307, 257, 2584, 819, 992, 50506], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 400, "seek": 110788, "start": 1110.72, "end": 1113.16, "text": " of calling convention, which actually tells us", "tokens": [50506, 295, 5141, 10286, 11, 597, 767, 5112, 505, 50628], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 401, "seek": 110788, "start": 1113.16, "end": 1116.8400000000001, "text": " that any struct that is bigger than 64 bit,", "tokens": [50628, 300, 604, 6594, 300, 307, 3801, 813, 12145, 857, 11, 50812], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 402, "seek": 110788, "start": 1116.8400000000001, "end": 1119.88, "text": " such as our struct here, will be passed in memory instead,", "tokens": [50812, 1270, 382, 527, 6594, 510, 11, 486, 312, 4678, 294, 4675, 2602, 11, 50964], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 403, "seek": 110788, "start": 1119.88, "end": 1122.8000000000002, "text": " which means the struct has to be spilled on the stack,", "tokens": [50964, 597, 1355, 264, 6594, 575, 281, 312, 37833, 322, 264, 8630, 11, 51110], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 404, "seek": 110788, "start": 1122.8000000000002, "end": 1126.0, "text": " a pointer to the stack has to be stored in the RCX register,", "tokens": [51110, 257, 23918, 281, 264, 8630, 575, 281, 312, 12187, 294, 264, 28987, 55, 7280, 11, 51270], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 405, "seek": 110788, "start": 1126.0, "end": 1127.64, "text": " and then we jump to the function.", "tokens": [51270, 293, 550, 321, 3012, 281, 264, 2445, 13, 51352], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 406, "seek": 110788, "start": 1127.64, "end": 1132.5600000000002, "text": " So same function, same architecture, because X64,", "tokens": [51352, 407, 912, 2445, 11, 912, 9482, 11, 570, 1783, 19395, 11, 51598], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 407, "seek": 110788, "start": 1132.5600000000002, "end": 1136.0800000000002, "text": " completely very different set of assembly instruction", "tokens": [51598, 2584, 588, 819, 992, 295, 12103, 10951, 51774], "temperature": 0.0, "avg_logprob": -0.16252567893580386, "compression_ratio": 1.7843137254901962, "no_speech_prob": 0.001304743462242186}, {"id": 408, "seek": 113608, "start": 1136.08, "end": 1137.52, "text": " that needs to be generated in order", "tokens": [50364, 300, 2203, 281, 312, 10833, 294, 1668, 50436], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 409, "seek": 113608, "start": 1137.52, "end": 1142.08, "text": " to act as a trampoline from Java code, for example, to C code.", "tokens": [50436, 281, 605, 382, 257, 38605, 18773, 490, 10745, 3089, 11, 337, 1365, 11, 281, 383, 3089, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 410, "seek": 113608, "start": 1142.08, "end": 1146.56, "text": " So that's why it's important that we", "tokens": [50664, 407, 300, 311, 983, 309, 311, 1021, 300, 321, 50888], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 411, "seek": 113608, "start": 1146.56, "end": 1150.24, "text": " are able to describe the signature of a C function", "tokens": [50888, 366, 1075, 281, 6786, 264, 13397, 295, 257, 383, 2445, 51072], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 412, "seek": 113608, "start": 1150.24, "end": 1151.8799999999999, "text": " to the linker, because the linker then", "tokens": [51072, 281, 264, 2113, 260, 11, 570, 264, 2113, 260, 550, 51154], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 413, "seek": 113608, "start": 1151.8799999999999, "end": 1154.32, "text": " will inspect the signature of the C function", "tokens": [51154, 486, 15018, 264, 13397, 295, 264, 383, 2445, 51276], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 414, "seek": 113608, "start": 1154.32, "end": 1157.24, "text": " and will determine what is the exact set of instruction", "tokens": [51276, 293, 486, 6997, 437, 307, 264, 1900, 992, 295, 10951, 51422], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 415, "seek": 113608, "start": 1157.24, "end": 1159.6, "text": " that we need in order to go from the Java", "tokens": [51422, 300, 321, 643, 294, 1668, 281, 352, 490, 264, 10745, 51540], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 416, "seek": 113608, "start": 1159.6, "end": 1163.8, "text": " code to the native code underneath.", "tokens": [51540, 3089, 281, 264, 8470, 3089, 7223, 13, 51750], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 417, "seek": 113608, "start": 1163.8, "end": 1165.08, "text": " And so how do we do this?", "tokens": [51750, 400, 370, 577, 360, 321, 360, 341, 30, 51814], "temperature": 0.0, "avg_logprob": -0.1291689064543126, "compression_ratio": 1.7768595041322315, "no_speech_prob": 0.007377168163657188}, {"id": 418, "seek": 116508, "start": 1165.08, "end": 1169.08, "text": " Well, when we call the down call end on the native linker,", "tokens": [50364, 1042, 11, 562, 321, 818, 264, 760, 818, 917, 322, 264, 8470, 2113, 260, 11, 50564], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 419, "seek": 116508, "start": 1169.08, "end": 1171.36, "text": " we will pass, of course, the address of the function", "tokens": [50564, 321, 486, 1320, 11, 295, 1164, 11, 264, 2985, 295, 264, 2445, 50678], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 420, "seek": 116508, "start": 1171.36, "end": 1172.8799999999999, "text": " that we want to call.", "tokens": [50678, 300, 321, 528, 281, 818, 13, 50754], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 421, "seek": 116508, "start": 1172.8799999999999, "end": 1174.6399999999999, "text": " This is obtained using a symbol lookup,", "tokens": [50754, 639, 307, 14879, 1228, 257, 5986, 574, 1010, 11, 50842], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 422, "seek": 116508, "start": 1174.6399999999999, "end": 1178.4399999999998, "text": " which we won't have time to investigate in further detail.", "tokens": [50842, 597, 321, 1582, 380, 362, 565, 281, 15013, 294, 3052, 2607, 13, 51032], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 423, "seek": 116508, "start": 1178.4399999999998, "end": 1180.24, "text": " But it will basically give us the address", "tokens": [51032, 583, 309, 486, 1936, 976, 505, 264, 2985, 51122], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 424, "seek": 116508, "start": 1180.24, "end": 1182.4399999999998, "text": " of where the distance address function lives.", "tokens": [51122, 295, 689, 264, 4560, 2985, 2445, 2909, 13, 51232], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 425, "seek": 116508, "start": 1182.4399999999998, "end": 1184.36, "text": " And then we provide a function descriptor.", "tokens": [51232, 400, 550, 321, 2893, 257, 2445, 31280, 284, 13, 51328], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 426, "seek": 116508, "start": 1184.36, "end": 1186.84, "text": " This function descriptor is nothing but a set of layouts,", "tokens": [51328, 639, 2445, 31280, 284, 307, 1825, 457, 257, 992, 295, 46100, 11, 51452], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 427, "seek": 116508, "start": 1186.84, "end": 1189.56, "text": " one for the return type and one for the argument.", "tokens": [51452, 472, 337, 264, 2736, 2010, 293, 472, 337, 264, 6770, 13, 51588], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 428, "seek": 116508, "start": 1189.56, "end": 1192.04, "text": " In this case, we know that the return type is double.", "tokens": [51588, 682, 341, 1389, 11, 321, 458, 300, 264, 2736, 2010, 307, 3834, 13, 51712], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 429, "seek": 116508, "start": 1192.04, "end": 1193.6399999999999, "text": " So we use a double layout.", "tokens": [51712, 407, 321, 764, 257, 3834, 13333, 13, 51792], "temperature": 0.0, "avg_logprob": -0.16750755825558225, "compression_ratio": 1.8523489932885906, "no_speech_prob": 0.001212729956023395}, {"id": 430, "seek": 119364, "start": 1193.68, "end": 1195.76, "text": " And the argument is actually the point", "tokens": [50366, 400, 264, 6770, 307, 767, 264, 935, 50470], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 431, "seek": 119364, "start": 1195.76, "end": 1197.3200000000002, "text": " to this track that we defined before.", "tokens": [50470, 281, 341, 2837, 300, 321, 7642, 949, 13, 50548], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 432, "seek": 119364, "start": 1197.3200000000002, "end": 1199.8000000000002, "text": " So that same layout can now be reused in order", "tokens": [50548, 407, 300, 912, 13333, 393, 586, 312, 319, 4717, 294, 1668, 50672], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 433, "seek": 119364, "start": 1199.8000000000002, "end": 1202.44, "text": " to describe the signature of the function.", "tokens": [50672, 281, 6786, 264, 13397, 295, 264, 2445, 13, 50804], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 434, "seek": 119364, "start": 1202.44, "end": 1203.8000000000002, "text": " Then inside our try with the source,", "tokens": [50804, 1396, 1854, 527, 853, 365, 264, 4009, 11, 50872], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 435, "seek": 119364, "start": 1203.8000000000002, "end": 1205.96, "text": " we populate the point as before.", "tokens": [50872, 321, 1665, 5256, 264, 935, 382, 949, 13, 50980], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 436, "seek": 119364, "start": 1205.96, "end": 1208.2800000000002, "text": " And then we can call the method end.", "tokens": [50980, 400, 550, 321, 393, 818, 264, 3170, 917, 13, 51096], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 437, "seek": 119364, "start": 1208.2800000000002, "end": 1210.96, "text": " So we just pass the point memory segment", "tokens": [51096, 407, 321, 445, 1320, 264, 935, 4675, 9469, 51230], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 438, "seek": 119364, "start": 1210.96, "end": 1213.2800000000002, "text": " to the method end that we obtain.", "tokens": [51230, 281, 264, 3170, 917, 300, 321, 12701, 13, 51346], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 439, "seek": 119364, "start": 1213.2800000000002, "end": 1216.76, "text": " And that means that we will be able to pass the point by value", "tokens": [51346, 400, 300, 1355, 300, 321, 486, 312, 1075, 281, 1320, 264, 935, 538, 2158, 51520], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 440, "seek": 119364, "start": 1216.76, "end": 1218.1200000000001, "text": " to the C function.", "tokens": [51520, 281, 264, 383, 2445, 13, 51588], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 441, "seek": 119364, "start": 1218.1200000000001, "end": 1219.6000000000001, "text": " And nothing else needs to be done,", "tokens": [51588, 400, 1825, 1646, 2203, 281, 312, 1096, 11, 51662], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 442, "seek": 119364, "start": 1219.6000000000001, "end": 1222.5600000000002, "text": " because the linker will figure out exactly what set", "tokens": [51662, 570, 264, 2113, 260, 486, 2573, 484, 2293, 437, 992, 51810], "temperature": 0.0, "avg_logprob": -0.2049116952078683, "compression_ratio": 1.8464285714285715, "no_speech_prob": 0.0007290038047358394}, {"id": 443, "seek": 122256, "start": 1222.6, "end": 1225.2, "text": " of machine instruction to generate in order to go there.", "tokens": [50366, 295, 3479, 10951, 281, 8460, 294, 1668, 281, 352, 456, 13, 50496], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 444, "seek": 122256, "start": 1228.84, "end": 1231.28, "text": " So of course, when we talk about native function,", "tokens": [50678, 407, 295, 1164, 11, 562, 321, 751, 466, 8470, 2445, 11, 50800], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 445, "seek": 122256, "start": 1231.28, "end": 1235.0, "text": " we always have to keep safety in the back of our mind, right?", "tokens": [50800, 321, 1009, 362, 281, 1066, 4514, 294, 264, 646, 295, 527, 1575, 11, 558, 30, 50986], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 446, "seek": 122256, "start": 1235.0, "end": 1237.72, "text": " Because whenever we go into native,", "tokens": [50986, 1436, 5699, 321, 352, 666, 8470, 11, 51122], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 447, "seek": 122256, "start": 1237.72, "end": 1239.32, "text": " the operation is fundamentally unsafe.", "tokens": [51122, 264, 6916, 307, 17879, 35948, 13, 51202], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 448, "seek": 122256, "start": 1239.32, "end": 1241.84, "text": " We could, for example, make a mistake", "tokens": [51202, 492, 727, 11, 337, 1365, 11, 652, 257, 6146, 51328], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 449, "seek": 122256, "start": 1241.84, "end": 1245.08, "text": " in describing the signature of our target C function,", "tokens": [51328, 294, 16141, 264, 13397, 295, 527, 3779, 383, 2445, 11, 51490], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 450, "seek": 122256, "start": 1245.08, "end": 1247.2, "text": " which means the assembly step that we have", "tokens": [51490, 597, 1355, 264, 12103, 1823, 300, 321, 362, 51596], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 451, "seek": 122256, "start": 1247.2, "end": 1250.6799999999998, "text": " is not correct for calling that particular function.", "tokens": [51596, 307, 406, 3006, 337, 5141, 300, 1729, 2445, 13, 51770], "temperature": 0.0, "avg_logprob": -0.14660110113755712, "compression_ratio": 1.6576923076923078, "no_speech_prob": 0.002480936236679554}, {"id": 452, "seek": 125068, "start": 1250.68, "end": 1253.8400000000001, "text": " We may cause all sorts of issues.", "tokens": [50364, 492, 815, 3082, 439, 7527, 295, 2663, 13, 50522], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 453, "seek": 125068, "start": 1253.8400000000001, "end": 1255.8, "text": " The foreign code may attempt to free memory", "tokens": [50522, 440, 5329, 3089, 815, 5217, 281, 1737, 4675, 50620], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 454, "seek": 125068, "start": 1255.8, "end": 1258.16, "text": " that has already been freed from Java code.", "tokens": [50620, 300, 575, 1217, 668, 21796, 490, 10745, 3089, 13, 50738], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 455, "seek": 125068, "start": 1260.8400000000001, "end": 1263.3600000000001, "text": " Or we may get a pointer from native code.", "tokens": [50872, 1610, 321, 815, 483, 257, 23918, 490, 8470, 3089, 13, 50998], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 456, "seek": 125068, "start": 1263.3600000000001, "end": 1265.16, "text": " We may try to resize the pointer,", "tokens": [50998, 492, 815, 853, 281, 50069, 264, 23918, 11, 51088], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 457, "seek": 125068, "start": 1265.16, "end": 1266.92, "text": " but we got the size wrong.", "tokens": [51088, 457, 321, 658, 264, 2744, 2085, 13, 51176], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 458, "seek": 125068, "start": 1266.92, "end": 1269.4, "text": " And so we are suddenly trying to access memory", "tokens": [51176, 400, 370, 321, 366, 5800, 1382, 281, 2105, 4675, 51300], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 459, "seek": 125068, "start": 1269.4, "end": 1272.28, "text": " that is not there.", "tokens": [51300, 300, 307, 406, 456, 13, 51444], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 460, "seek": 125068, "start": 1272.28, "end": 1275.72, "text": " So in the FFM API, there is a concept", "tokens": [51444, 407, 294, 264, 479, 37, 44, 9362, 11, 456, 307, 257, 3410, 51616], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 461, "seek": 125068, "start": 1275.72, "end": 1276.96, "text": " that is called restricted method.", "tokens": [51616, 300, 307, 1219, 20608, 3170, 13, 51678], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 462, "seek": 125068, "start": 1276.96, "end": 1279.76, "text": " So there are some methods in the FFM API", "tokens": [51678, 407, 456, 366, 512, 7150, 294, 264, 479, 37, 44, 9362, 51818], "temperature": 0.0, "avg_logprob": -0.1606863788050464, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.030011529102921486}, {"id": 463, "seek": 127976, "start": 1279.76, "end": 1284.84, "text": " that are not directly available all the time.", "tokens": [50364, 300, 366, 406, 3838, 2435, 439, 264, 565, 13, 50618], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 464, "seek": 127976, "start": 1284.84, "end": 1286.4, "text": " They are part of the Java API.", "tokens": [50618, 814, 366, 644, 295, 264, 10745, 9362, 13, 50696], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 465, "seek": 127976, "start": 1286.4, "end": 1288.84, "text": " So if you go in the Java doc, you can see them.", "tokens": [50696, 407, 498, 291, 352, 294, 264, 10745, 3211, 11, 291, 393, 536, 552, 13, 50818], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 466, "seek": 127976, "start": 1288.84, "end": 1292.52, "text": " But they are restricted, and you need", "tokens": [50818, 583, 436, 366, 20608, 11, 293, 291, 643, 51002], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 467, "seek": 127976, "start": 1292.52, "end": 1295.08, "text": " to use an extra command line flag", "tokens": [51002, 281, 764, 364, 2857, 5622, 1622, 7166, 51130], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 468, "seek": 127976, "start": 1295.08, "end": 1297.2, "text": " if you want to use them without warnings.", "tokens": [51130, 498, 291, 528, 281, 764, 552, 1553, 30009, 13, 51236], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 469, "seek": 127976, "start": 1297.2, "end": 1299.6, "text": " So for now, basically, if you try to use a restricted method,", "tokens": [51236, 407, 337, 586, 11, 1936, 11, 498, 291, 853, 281, 764, 257, 20608, 3170, 11, 51356], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 470, "seek": 127976, "start": 1299.6, "end": 1302.8799999999999, "text": " such as the method for creating a down call method endo,", "tokens": [51356, 1270, 382, 264, 3170, 337, 4084, 257, 760, 818, 3170, 917, 78, 11, 51520], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 471, "seek": 127976, "start": 1302.8799999999999, "end": 1305.32, "text": " you will only get a warning.", "tokens": [51520, 291, 486, 787, 483, 257, 9164, 13, 51642], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 472, "seek": 127976, "start": 1305.32, "end": 1308.4, "text": " But in the future, we plan to turn this warning", "tokens": [51642, 583, 294, 264, 2027, 11, 321, 1393, 281, 1261, 341, 9164, 51796], "temperature": 0.0, "avg_logprob": -0.1710130955145611, "compression_ratio": 1.778688524590164, "no_speech_prob": 0.002584197325631976}, {"id": 473, "seek": 130840, "start": 1308.4, "end": 1309.5600000000002, "text": " into an error.", "tokens": [50364, 666, 364, 6713, 13, 50422], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 474, "seek": 130840, "start": 1309.5600000000002, "end": 1312.3600000000001, "text": " And in that case, you will have to use a new option that", "tokens": [50422, 400, 294, 300, 1389, 11, 291, 486, 362, 281, 764, 257, 777, 3614, 300, 50562], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 475, "seek": 130840, "start": 1312.3600000000001, "end": 1315.64, "text": " is called dash, dash enable native access that", "tokens": [50562, 307, 1219, 8240, 11, 8240, 9528, 8470, 2105, 300, 50726], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 476, "seek": 130840, "start": 1315.64, "end": 1319.5600000000002, "text": " will grant a subset of the models of your application", "tokens": [50726, 486, 6386, 257, 25993, 295, 264, 5245, 295, 428, 3861, 50922], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 477, "seek": 130840, "start": 1319.5600000000002, "end": 1323.64, "text": " or the all unnamed model if you are using the class path,", "tokens": [50922, 420, 264, 439, 517, 33465, 2316, 498, 291, 366, 1228, 264, 1508, 3100, 11, 51126], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 478, "seek": 130840, "start": 1323.64, "end": 1325.92, "text": " access to restricted methods.", "tokens": [51126, 2105, 281, 20608, 7150, 13, 51240], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 479, "seek": 130840, "start": 1325.92, "end": 1329.24, "text": " This is a part of a bigger plan to move Java", "tokens": [51240, 639, 307, 257, 644, 295, 257, 3801, 1393, 281, 1286, 10745, 51406], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 480, "seek": 130840, "start": 1329.24, "end": 1332.0800000000002, "text": " on a more solid foundation, one that", "tokens": [51406, 322, 257, 544, 5100, 7030, 11, 472, 300, 51548], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 481, "seek": 130840, "start": 1332.0800000000002, "end": 1335.24, "text": " allows us to provide integrity by default.", "tokens": [51548, 4045, 505, 281, 2893, 16000, 538, 7576, 13, 51706], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 482, "seek": 130840, "start": 1335.24, "end": 1337.76, "text": " So Java in its default configuration", "tokens": [51706, 407, 10745, 294, 1080, 7576, 11694, 51832], "temperature": 0.0, "avg_logprob": -0.17624829266522382, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.004335256293416023}, {"id": 483, "seek": 133776, "start": 1337.76, "end": 1339.68, "text": " should always preserve integrity,", "tokens": [50364, 820, 1009, 15665, 16000, 11, 50460], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 484, "seek": 133776, "start": 1339.68, "end": 1343.76, "text": " which means it shouldn't be possible for native code", "tokens": [50460, 597, 1355, 309, 4659, 380, 312, 1944, 337, 8470, 3089, 50664], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 485, "seek": 133776, "start": 1343.76, "end": 1347.44, "text": " to mess up with invariants, such as, for example,", "tokens": [50664, 281, 2082, 493, 365, 33270, 1719, 11, 1270, 382, 11, 337, 1365, 11, 50848], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 486, "seek": 133776, "start": 1347.44, "end": 1349.52, "text": " mutating final fields and things like that.", "tokens": [50848, 5839, 990, 2572, 7909, 293, 721, 411, 300, 13, 50952], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 487, "seek": 133776, "start": 1353.4, "end": 1356.96, "text": " So this is the workflow using FFM API when", "tokens": [51146, 407, 341, 307, 264, 20993, 1228, 479, 37, 44, 9362, 562, 51324], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 488, "seek": 133776, "start": 1356.96, "end": 1359.08, "text": " we want to access a native library.", "tokens": [51324, 321, 528, 281, 2105, 257, 8470, 6405, 13, 51430], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 489, "seek": 133776, "start": 1359.08, "end": 1361.84, "text": " So we still have something in the middle between us", "tokens": [51430, 407, 321, 920, 362, 746, 294, 264, 2808, 1296, 505, 51568], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 490, "seek": 133776, "start": 1361.84, "end": 1363.96, "text": " and the native library that we want to call.", "tokens": [51568, 293, 264, 8470, 6405, 300, 321, 528, 281, 818, 13, 51674], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 491, "seek": 133776, "start": 1363.96, "end": 1366.96, "text": " This time, though, the stuff we have in the middle", "tokens": [51674, 639, 565, 11, 1673, 11, 264, 1507, 321, 362, 294, 264, 2808, 51824], "temperature": 0.0, "avg_logprob": -0.14809769171255607, "compression_ratio": 1.6345381526104417, "no_speech_prob": 0.0006598347681574523}, {"id": 492, "seek": 136696, "start": 1366.96, "end": 1368.0, "text": " is just Java objects.", "tokens": [50364, 307, 445, 10745, 6565, 13, 50416], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 493, "seek": 136696, "start": 1368.0, "end": 1371.04, "text": " We have memory layout, varendals, method endals, function", "tokens": [50416, 492, 362, 4675, 13333, 11, 1374, 521, 1124, 11, 3170, 917, 1124, 11, 2445, 50568], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 494, "seek": 136696, "start": 1371.04, "end": 1372.28, "text": " descriptors.", "tokens": [50568, 31280, 830, 13, 50630], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 495, "seek": 136696, "start": 1372.28, "end": 1373.72, "text": " But here's an idea.", "tokens": [50630, 583, 510, 311, 364, 1558, 13, 50702], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 496, "seek": 136696, "start": 1373.72, "end": 1377.08, "text": " What if we could generate all this stuff mechanically", "tokens": [50702, 708, 498, 321, 727, 8460, 439, 341, 1507, 4236, 984, 50870], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 497, "seek": 136696, "start": 1377.08, "end": 1378.08, "text": " using a tool?", "tokens": [50870, 1228, 257, 2290, 30, 50920], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 498, "seek": 136696, "start": 1378.08, "end": 1381.72, "text": " And that's exactly what the JXR tool does.", "tokens": [50920, 400, 300, 311, 2293, 437, 264, 508, 55, 49, 2290, 775, 13, 51102], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 499, "seek": 136696, "start": 1381.72, "end": 1384.16, "text": " So let's say that we want to call the QSAR function, which", "tokens": [51102, 407, 718, 311, 584, 300, 321, 528, 281, 818, 264, 1249, 50, 1899, 2445, 11, 597, 51224], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 500, "seek": 136696, "start": 1384.16, "end": 1386.68, "text": " is actually a tricky function because it has a function pointer", "tokens": [51224, 307, 767, 257, 12414, 2445, 570, 309, 575, 257, 2445, 23918, 51350], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 501, "seek": 136696, "start": 1386.68, "end": 1390.3600000000001, "text": " that allows us to sort the contents to compare", "tokens": [51350, 300, 4045, 505, 281, 1333, 264, 15768, 281, 6794, 51534], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 502, "seek": 136696, "start": 1390.3600000000001, "end": 1392.08, "text": " elements of an array.", "tokens": [51534, 4959, 295, 364, 10225, 13, 51620], "temperature": 0.0, "avg_logprob": -0.2099899965174058, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0012343974085524678}, {"id": 503, "seek": 139208, "start": 1392.08, "end": 1397.04, "text": " So it uses a function pointer type def.", "tokens": [50364, 407, 309, 4960, 257, 2445, 23918, 2010, 1060, 13, 50612], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 504, "seek": 139208, "start": 1397.04, "end": 1400.28, "text": " So if you want to model this using plain FFM,", "tokens": [50612, 407, 498, 291, 528, 281, 2316, 341, 1228, 11121, 479, 37, 44, 11, 50774], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 505, "seek": 139208, "start": 1400.28, "end": 1402.52, "text": " it's going to take you a little bit of setup code", "tokens": [50774, 309, 311, 516, 281, 747, 291, 257, 707, 857, 295, 8657, 3089, 50886], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 506, "seek": 139208, "start": 1402.52, "end": 1404.1599999999999, "text": " in order to create the app call stub", "tokens": [50886, 294, 1668, 281, 1884, 264, 724, 818, 20266, 50968], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 507, "seek": 139208, "start": 1404.1599999999999, "end": 1406.28, "text": " and the method endals that are required to call this.", "tokens": [50968, 293, 264, 3170, 917, 1124, 300, 366, 4739, 281, 818, 341, 13, 51074], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 508, "seek": 139208, "start": 1406.28, "end": 1408.8, "text": " But if you give all this header to JXR,", "tokens": [51074, 583, 498, 291, 976, 439, 341, 23117, 281, 508, 55, 49, 11, 51200], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 509, "seek": 139208, "start": 1408.8, "end": 1410.6, "text": " so we could just start with pointing it at the header", "tokens": [51200, 370, 321, 727, 445, 722, 365, 12166, 309, 412, 264, 23117, 51290], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 510, "seek": 139208, "start": 1410.6, "end": 1413.9199999999998, "text": " or the standard library header where this is defined,", "tokens": [51290, 420, 264, 3832, 6405, 23117, 689, 341, 307, 7642, 11, 51456], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 511, "seek": 139208, "start": 1413.9199999999998, "end": 1418.04, "text": " then we basically just get a bunch of static declaration", "tokens": [51456, 550, 321, 1936, 445, 483, 257, 3840, 295, 13437, 27606, 51662], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 512, "seek": 139208, "start": 1418.04, "end": 1421.0, "text": " that we can use to call QSAR.", "tokens": [51662, 300, 321, 393, 764, 281, 818, 1249, 50, 1899, 13, 51810], "temperature": 0.0, "avg_logprob": -0.2549948877142381, "compression_ratio": 1.6523297491039426, "no_speech_prob": 0.004320045467466116}, {"id": 513, "seek": 142100, "start": 1421.04, "end": 1423.24, "text": " So if I do all this, the only thing", "tokens": [50366, 407, 498, 286, 360, 439, 341, 11, 264, 787, 551, 50476], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 514, "seek": 142100, "start": 1423.24, "end": 1425.12, "text": " I have to do from my code is first", "tokens": [50476, 286, 362, 281, 360, 490, 452, 3089, 307, 700, 50570], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 515, "seek": 142100, "start": 1425.12, "end": 1426.32, "text": " to create the function pointer.", "tokens": [50570, 281, 1884, 264, 2445, 23918, 13, 50630], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 516, "seek": 142100, "start": 1426.32, "end": 1428.6, "text": " And this is possible with a factor", "tokens": [50630, 400, 341, 307, 1944, 365, 257, 5952, 50744], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 517, "seek": 142100, "start": 1428.6, "end": 1431.24, "text": " that has been generated by JSTRAP that allows me to pass", "tokens": [50744, 300, 575, 668, 10833, 538, 508, 6840, 3750, 47, 300, 4045, 385, 281, 1320, 50876], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 518, "seek": 142100, "start": 1431.24, "end": 1432.52, "text": " a lambda expression.", "tokens": [50876, 257, 13607, 6114, 13, 50940], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 519, "seek": 142100, "start": 1432.52, "end": 1433.84, "text": " And the lambda expression will be", "tokens": [50940, 400, 264, 13607, 6114, 486, 312, 51006], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 520, "seek": 142100, "start": 1433.84, "end": 1436.24, "text": " turned into a function pointer that is stored", "tokens": [51006, 3574, 666, 257, 2445, 23918, 300, 307, 12187, 51126], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 521, "seek": 142100, "start": 1436.24, "end": 1437.36, "text": " inside a memory segment.", "tokens": [51126, 1854, 257, 4675, 9469, 13, 51182], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 522, "seek": 142100, "start": 1437.36, "end": 1439.56, "text": " And then I can pass to the QSAR function.", "tokens": [51182, 400, 550, 286, 393, 1320, 281, 264, 1249, 50, 1899, 2445, 13, 51292], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 523, "seek": 142100, "start": 1439.56, "end": 1442.04, "text": " And the QSAR function is not a method endal anymore.", "tokens": [51292, 400, 264, 1249, 50, 1899, 2445, 307, 406, 257, 3170, 917, 304, 3602, 13, 51416], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 524, "seek": 142100, "start": 1442.04, "end": 1444.68, "text": " It's a nice static wrapper around the method endal.", "tokens": [51416, 467, 311, 257, 1481, 13437, 46906, 926, 264, 3170, 917, 304, 13, 51548], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 525, "seek": 142100, "start": 1444.68, "end": 1449.36, "text": " So it's much better to use from the developer perspective", "tokens": [51548, 407, 309, 311, 709, 1101, 281, 764, 490, 264, 10754, 4585, 51782], "temperature": 0.0, "avg_logprob": -0.1909869337735111, "compression_ratio": 1.797945205479452, "no_speech_prob": 0.0020383275113999844}, {"id": 526, "seek": 144936, "start": 1449.36, "end": 1451.8, "text": " because using method endal can sometimes", "tokens": [50364, 570, 1228, 3170, 917, 304, 393, 2171, 50486], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 527, "seek": 144936, "start": 1451.8, "end": 1456.6799999999998, "text": " be tricky with the fact that we can pass the wrong type", "tokens": [50486, 312, 12414, 365, 264, 1186, 300, 321, 393, 1320, 264, 2085, 2010, 50730], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 528, "seek": 144936, "start": 1456.6799999999998, "end": 1460.24, "text": " and then it gets lower and things like that.", "tokens": [50730, 293, 550, 309, 2170, 3126, 293, 721, 411, 300, 13, 50908], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 529, "seek": 144936, "start": 1460.24, "end": 1463.24, "text": " So in comparison, this is the code", "tokens": [50908, 407, 294, 9660, 11, 341, 307, 264, 3089, 51058], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 530, "seek": 144936, "start": 1463.24, "end": 1467.12, "text": " that you have to write if you wanted to do this using JNI.", "tokens": [51058, 300, 291, 362, 281, 2464, 498, 291, 1415, 281, 360, 341, 1228, 508, 42496, 13, 51252], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 531, "seek": 144936, "start": 1467.12, "end": 1470.1599999999999, "text": " So there's Java code with native methods.", "tokens": [51252, 407, 456, 311, 10745, 3089, 365, 8470, 7150, 13, 51404], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 532, "seek": 144936, "start": 1470.1599999999999, "end": 1472.4399999999998, "text": " There's another file that is generated by Java C.", "tokens": [51404, 821, 311, 1071, 3991, 300, 307, 10833, 538, 10745, 383, 13, 51518], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 533, "seek": 144936, "start": 1472.4399999999998, "end": 1475.76, "text": " And then there's quite a bit of C implementation", "tokens": [51518, 400, 550, 456, 311, 1596, 257, 857, 295, 383, 11420, 51684], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 534, "seek": 144936, "start": 1475.76, "end": 1477.08, "text": " in order to do QSAR.", "tokens": [51684, 294, 1668, 281, 360, 1249, 50, 1899, 13, 51750], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 535, "seek": 144936, "start": 1477.08, "end": 1478.9199999999998, "text": " And it actually took us a few attempts", "tokens": [51750, 400, 309, 767, 1890, 505, 257, 1326, 15257, 51842], "temperature": 0.0, "avg_logprob": -0.14010972976684571, "compression_ratio": 1.676923076923077, "no_speech_prob": 0.0018880562856793404}, {"id": 536, "seek": 147892, "start": 1478.96, "end": 1481.88, "text": " in order to get to the best optimal implementation", "tokens": [50366, 294, 1668, 281, 483, 281, 264, 1151, 16252, 11420, 50512], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 537, "seek": 147892, "start": 1481.88, "end": 1484.64, "text": " because our first attempt wasn't very good.", "tokens": [50512, 570, 527, 700, 5217, 2067, 380, 588, 665, 13, 50650], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 538, "seek": 147892, "start": 1484.64, "end": 1486.92, "text": " It can actually get quite tricky.", "tokens": [50650, 467, 393, 767, 483, 1596, 12414, 13, 50764], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 539, "seek": 147892, "start": 1486.92, "end": 1490.3200000000002, "text": " And even better, if you look at the performances,", "tokens": [50764, 400, 754, 1101, 11, 498, 291, 574, 412, 264, 16087, 11, 50934], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 540, "seek": 147892, "start": 1490.3200000000002, "end": 1495.28, "text": " the plain FFM-based approach is roughly 2x, 3x faster", "tokens": [50934, 264, 11121, 479, 37, 44, 12, 6032, 3109, 307, 9810, 568, 87, 11, 805, 87, 4663, 51182], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 541, "seek": 147892, "start": 1495.28, "end": 1499.48, "text": " than the JNI approach, every optimized JNI approach.", "tokens": [51182, 813, 264, 508, 42496, 3109, 11, 633, 26941, 508, 42496, 3109, 13, 51392], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 542, "seek": 147892, "start": 1499.48, "end": 1502.4, "text": " And that's because a colleague of mine,", "tokens": [51392, 400, 300, 311, 570, 257, 13532, 295, 3892, 11, 51538], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 543, "seek": 147892, "start": 1502.4, "end": 1505.0800000000002, "text": " Neal Verne, has put a lot of effort", "tokens": [51538, 1734, 304, 4281, 716, 11, 575, 829, 257, 688, 295, 4630, 51672], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 544, "seek": 147892, "start": 1505.0800000000002, "end": 1508.44, "text": " in trying to optimize, especially the up-call path.", "tokens": [51672, 294, 1382, 281, 19719, 11, 2318, 264, 493, 12, 45459, 3100, 13, 51840], "temperature": 0.0, "avg_logprob": -0.20376009776674467, "compression_ratio": 1.5526315789473684, "no_speech_prob": 0.007022346835583448}, {"id": 545, "seek": 150844, "start": 1508.44, "end": 1511.8400000000001, "text": " So when you want to call a Java function from native code,", "tokens": [50364, 407, 562, 291, 528, 281, 818, 257, 10745, 2445, 490, 8470, 3089, 11, 50534], "temperature": 0.0, "avg_logprob": -0.15738741556803384, "compression_ratio": 1.603305785123967, "no_speech_prob": 0.0017953191418200731}, {"id": 546, "seek": 150844, "start": 1511.8400000000001, "end": 1515.6000000000001, "text": " there was a lot of performance left on the table from JNI.", "tokens": [50534, 456, 390, 257, 688, 295, 3389, 1411, 322, 264, 3199, 490, 508, 42496, 13, 50722], "temperature": 0.0, "avg_logprob": -0.15738741556803384, "compression_ratio": 1.603305785123967, "no_speech_prob": 0.0017953191418200731}, {"id": 547, "seek": 150844, "start": 1515.6000000000001, "end": 1520.0800000000002, "text": " And we were able to greatly improve the performances there.", "tokens": [50722, 400, 321, 645, 1075, 281, 14147, 3470, 264, 16087, 456, 13, 50946], "temperature": 0.0, "avg_logprob": -0.15738741556803384, "compression_ratio": 1.603305785123967, "no_speech_prob": 0.0017953191418200731}, {"id": 548, "seek": 150844, "start": 1522.8400000000001, "end": 1526.52, "text": " For regular calls, you probably won't see much difference.", "tokens": [51084, 1171, 3890, 5498, 11, 291, 1391, 1582, 380, 536, 709, 2649, 13, 51268], "temperature": 0.0, "avg_logprob": -0.15738741556803384, "compression_ratio": 1.603305785123967, "no_speech_prob": 0.0017953191418200731}, {"id": 549, "seek": 150844, "start": 1526.52, "end": 1529.3600000000001, "text": " So FFM is more or less on par with JNI.", "tokens": [51268, 407, 479, 37, 44, 307, 544, 420, 1570, 322, 971, 365, 508, 42496, 13, 51410], "temperature": 0.0, "avg_logprob": -0.15738741556803384, "compression_ratio": 1.603305785123967, "no_speech_prob": 0.0017953191418200731}, {"id": 550, "seek": 150844, "start": 1529.3600000000001, "end": 1533.3200000000002, "text": " But as soon as your native call is starting to up-call back", "tokens": [51410, 583, 382, 2321, 382, 428, 8470, 818, 307, 2891, 281, 493, 12, 45459, 646, 51608], "temperature": 0.0, "avg_logprob": -0.15738741556803384, "compression_ratio": 1.603305785123967, "no_speech_prob": 0.0017953191418200731}, {"id": 551, "seek": 150844, "start": 1533.3200000000002, "end": 1537.3600000000001, "text": " into Java, you're going to see massive differences.", "tokens": [51608, 666, 10745, 11, 291, 434, 516, 281, 536, 5994, 7300, 13, 51810], "temperature": 0.0, "avg_logprob": -0.15738741556803384, "compression_ratio": 1.603305785123967, "no_speech_prob": 0.0017953191418200731}, {"id": 552, "seek": 153736, "start": 1537.3999999999999, "end": 1542.52, "text": " So wrapping up, FFM provides a safe and efficient way", "tokens": [50366, 407, 21993, 493, 11, 479, 37, 44, 6417, 257, 3273, 293, 7148, 636, 50622], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 553, "seek": 153736, "start": 1542.52, "end": 1543.6399999999999, "text": " to access memory.", "tokens": [50622, 281, 2105, 4675, 13, 50678], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 554, "seek": 153736, "start": 1543.6399999999999, "end": 1545.08, "text": " We have deterministic location.", "tokens": [50678, 492, 362, 15957, 3142, 4914, 13, 50750], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 555, "seek": 153736, "start": 1545.08, "end": 1548.4399999999998, "text": " We have layouts to describe structs.", "tokens": [50750, 492, 362, 46100, 281, 6786, 6594, 82, 13, 50918], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 556, "seek": 153736, "start": 1548.4399999999998, "end": 1553.84, "text": " And so it gives us ability to describe the content", "tokens": [50918, 400, 370, 309, 2709, 505, 3485, 281, 6786, 264, 2701, 51188], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 557, "seek": 153736, "start": 1553.84, "end": 1556.4399999999998, "text": " of the memory that we want to work with and then get", "tokens": [51188, 295, 264, 4675, 300, 321, 528, 281, 589, 365, 293, 550, 483, 51318], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 558, "seek": 153736, "start": 1556.4399999999998, "end": 1559.9599999999998, "text": " varendals to access that memory in a much more robust way.", "tokens": [51318, 1374, 521, 1124, 281, 2105, 300, 4675, 294, 257, 709, 544, 13956, 636, 13, 51494], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 559, "seek": 153736, "start": 1559.9599999999998, "end": 1563.1599999999999, "text": " Then we have an API to access native function directly", "tokens": [51494, 1396, 321, 362, 364, 9362, 281, 2105, 8470, 2445, 3838, 51654], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 560, "seek": 153736, "start": 1563.1599999999999, "end": 1563.9199999999998, "text": " from Java.", "tokens": [51654, 490, 10745, 13, 51692], "temperature": 0.0, "avg_logprob": -0.22333642959594727, "compression_ratio": 1.6043478260869566, "no_speech_prob": 0.003054450498893857}, {"id": 561, "seek": 156392, "start": 1563.96, "end": 1567.3600000000001, "text": " So no need to write JNI code.", "tokens": [50366, 407, 572, 643, 281, 2464, 508, 42496, 3089, 13, 50536], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 562, "seek": 156392, "start": 1567.3600000000001, "end": 1570.0, "text": " That means that your deployment gets simpler,", "tokens": [50536, 663, 1355, 300, 428, 19317, 2170, 18587, 11, 50668], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 563, "seek": 156392, "start": 1570.0, "end": 1572.44, "text": " because you don't have that shim DLL going around", "tokens": [50668, 570, 291, 500, 380, 362, 300, 402, 332, 413, 24010, 516, 926, 50790], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 564, "seek": 156392, "start": 1572.44, "end": 1575.5600000000002, "text": " that you need to distribute along with your application.", "tokens": [50790, 300, 291, 643, 281, 20594, 2051, 365, 428, 3861, 13, 50946], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 565, "seek": 156392, "start": 1575.5600000000002, "end": 1579.64, "text": " And together, the foreign linker and memory segment", "tokens": [50946, 400, 1214, 11, 264, 5329, 2113, 260, 293, 4675, 9469, 51150], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 566, "seek": 156392, "start": 1579.64, "end": 1581.3200000000002, "text": " and layouts provide the foundation", "tokens": [51150, 293, 46100, 2893, 264, 7030, 51234], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 567, "seek": 156392, "start": 1581.3200000000002, "end": 1583.72, "text": " of a new interrupt story for Java that", "tokens": [51234, 295, 257, 777, 12729, 1657, 337, 10745, 300, 51354], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 568, "seek": 156392, "start": 1583.72, "end": 1586.3600000000001, "text": " is based on a tool called JSTRACT, which allows us", "tokens": [51354, 307, 2361, 322, 257, 2290, 1219, 508, 6840, 3750, 10259, 11, 597, 4045, 505, 51486], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 569, "seek": 156392, "start": 1586.3600000000001, "end": 1588.8000000000002, "text": " to target native library directly.", "tokens": [51486, 281, 3779, 8470, 6405, 3838, 13, 51608], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 570, "seek": 156392, "start": 1588.8000000000002, "end": 1593.1200000000001, "text": " One thing that emerged while we were working on FFM", "tokens": [51608, 1485, 551, 300, 20178, 1339, 321, 645, 1364, 322, 479, 37, 44, 51824], "temperature": 0.0, "avg_logprob": -0.16244235532037143, "compression_ratio": 1.5704225352112675, "no_speech_prob": 0.014335774816572666}, {"id": 571, "seek": 159312, "start": 1593.12, "end": 1595.84, "text": " is that there was quite a lot of number of use cases", "tokens": [50364, 307, 300, 456, 390, 1596, 257, 688, 295, 1230, 295, 764, 3331, 50500], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 572, "seek": 159312, "start": 1595.84, "end": 1597.8, "text": " that we didn't anticipate at first.", "tokens": [50500, 300, 321, 994, 380, 21685, 412, 700, 13, 50598], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 573, "seek": 159312, "start": 1597.8, "end": 1601.1599999999999, "text": " Since FFM is a fairly low level library,", "tokens": [50598, 4162, 479, 37, 44, 307, 257, 6457, 2295, 1496, 6405, 11, 50766], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 574, "seek": 159312, "start": 1601.1599999999999, "end": 1604.1999999999998, "text": " it allows very easily for other languages", "tokens": [50766, 309, 4045, 588, 3612, 337, 661, 8650, 50918], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 575, "seek": 159312, "start": 1604.1999999999998, "end": 1607.6, "text": " that are built on top of the VM, such as Scala, Closure,", "tokens": [50918, 300, 366, 3094, 322, 1192, 295, 264, 18038, 11, 1270, 382, 2747, 5159, 11, 2033, 7641, 11, 51088], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 576, "seek": 159312, "start": 1607.6, "end": 1614.32, "text": " or even Ruby to use the FFM layer to then target native", "tokens": [51088, 420, 754, 19907, 281, 764, 264, 479, 37, 44, 4583, 281, 550, 3779, 8470, 51424], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 577, "seek": 159312, "start": 1614.32, "end": 1616.2399999999998, "text": " function.", "tokens": [51424, 2445, 13, 51520], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 578, "seek": 159312, "start": 1616.2399999999998, "end": 1618.32, "text": " That was very expensive to do with JNI,", "tokens": [51520, 663, 390, 588, 5124, 281, 360, 365, 508, 42496, 11, 51624], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 579, "seek": 159312, "start": 1618.32, "end": 1621.6799999999998, "text": " because it meant that the other language sitting on top of the VM", "tokens": [51624, 570, 309, 4140, 300, 264, 661, 2856, 3798, 322, 1192, 295, 264, 18038, 51792], "temperature": 0.0, "avg_logprob": -0.12343500371564899, "compression_ratio": 1.6260162601626016, "no_speech_prob": 0.005719529930502176}, {"id": 580, "seek": 162168, "start": 1621.68, "end": 1623.8400000000001, "text": " needed to spin some JNI code in order", "tokens": [50364, 2978, 281, 6060, 512, 508, 42496, 3089, 294, 1668, 50472], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 581, "seek": 162168, "start": 1623.8400000000001, "end": 1627.44, "text": " to be able to do that or maybe uses a library like libffi.", "tokens": [50472, 281, 312, 1075, 281, 360, 300, 420, 1310, 4960, 257, 6405, 411, 22854, 69, 13325, 13, 50652], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 582, "seek": 162168, "start": 1627.44, "end": 1632.3200000000002, "text": " But with FFM, this is possible directly out of the box.", "tokens": [50652, 583, 365, 479, 37, 44, 11, 341, 307, 1944, 3838, 484, 295, 264, 2424, 13, 50896], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 583, "seek": 162168, "start": 1632.3200000000002, "end": 1634.68, "text": " And I think that's a good improvement.", "tokens": [50896, 400, 286, 519, 300, 311, 257, 665, 10444, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 584, "seek": 162168, "start": 1634.68, "end": 1637.1200000000001, "text": " We have been incubating and previewing, of course,", "tokens": [51014, 492, 362, 668, 33345, 990, 293, 14281, 278, 11, 295, 1164, 11, 51136], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 585, "seek": 162168, "start": 1637.1200000000001, "end": 1641.04, "text": " for a long time, since JDK14, essentially,", "tokens": [51136, 337, 257, 938, 565, 11, 1670, 37082, 42, 7271, 11, 4476, 11, 51332], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 586, "seek": 162168, "start": 1641.04, "end": 1644.1200000000001, "text": " so that allowed us to get a lot of feedback from Apache", "tokens": [51332, 370, 300, 4350, 505, 281, 483, 257, 688, 295, 5824, 490, 46597, 51486], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 587, "seek": 162168, "start": 1644.1200000000001, "end": 1646.8400000000001, "text": " Lucene, Netty, Tomcat.", "tokens": [51486, 9593, 1450, 11, 6188, 874, 11, 5041, 18035, 13, 51622], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 588, "seek": 162168, "start": 1646.8400000000001, "end": 1650.0, "text": " And I think today they are in production", "tokens": [51622, 400, 286, 519, 965, 436, 366, 294, 4265, 51780], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 589, "seek": 162168, "start": 1650.0, "end": 1651.16, "text": " with some of this stuff.", "tokens": [51780, 365, 512, 295, 341, 1507, 13, 51838], "temperature": 0.0, "avg_logprob": -0.17543458205003004, "compression_ratio": 1.524822695035461, "no_speech_prob": 0.011520115658640862}, {"id": 590, "seek": 165116, "start": 1651.2, "end": 1655.1200000000001, "text": " So I think if you run Lucene with Java 21,", "tokens": [50366, 407, 286, 519, 498, 291, 1190, 9593, 1450, 365, 10745, 5080, 11, 50562], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 591, "seek": 165116, "start": 1655.1200000000001, "end": 1659.0400000000002, "text": " you are getting a code path that uses FFM under the hood.", "tokens": [50562, 291, 366, 1242, 257, 3089, 3100, 300, 4960, 479, 37, 44, 833, 264, 13376, 13, 50758], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 592, "seek": 165116, "start": 1659.0400000000002, "end": 1664.68, "text": " And I think that helped them to get rid of some of the issues", "tokens": [50758, 400, 286, 519, 300, 4254, 552, 281, 483, 3973, 295, 512, 295, 264, 2663, 51040], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 593, "seek": 165116, "start": 1664.68, "end": 1668.0800000000002, "text": " where they had to use unsafe in order to free the memory that", "tokens": [51040, 689, 436, 632, 281, 764, 35948, 294, 1668, 281, 1737, 264, 4675, 300, 51210], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 594, "seek": 165116, "start": 1668.0800000000002, "end": 1670.52, "text": " was mapped because otherwise waiting for the garbage", "tokens": [51210, 390, 33318, 570, 5911, 3806, 337, 264, 14150, 51332], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 595, "seek": 165116, "start": 1670.52, "end": 1672.6000000000001, "text": " collector could lead to other issues.", "tokens": [51332, 23960, 727, 1477, 281, 661, 2663, 13, 51436], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 596, "seek": 165116, "start": 1672.6000000000001, "end": 1674.92, "text": " We also are being used by Tornado VM.", "tokens": [51436, 492, 611, 366, 885, 1143, 538, 314, 1865, 1573, 18038, 13, 51552], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 597, "seek": 165116, "start": 1674.92, "end": 1677.8000000000002, "text": " So in that case, it's an interesting case", "tokens": [51552, 407, 294, 300, 1389, 11, 309, 311, 364, 1880, 1389, 51696], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 598, "seek": 165116, "start": 1677.8000000000002, "end": 1680.3200000000002, "text": " where memory segments are used to model memory that", "tokens": [51696, 689, 4675, 19904, 366, 1143, 281, 2316, 4675, 300, 51822], "temperature": 0.0, "avg_logprob": -0.1583393321317785, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.003738703904673457}, {"id": 599, "seek": 168032, "start": 1680.36, "end": 1682.0, "text": " is inside the GPU.", "tokens": [50366, 307, 1854, 264, 18407, 13, 50448], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 600, "seek": 168032, "start": 1682.0, "end": 1687.8, "text": " So they are using memory segment in a very creative way there", "tokens": [50448, 407, 436, 366, 1228, 4675, 9469, 294, 257, 588, 5880, 636, 456, 50738], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 601, "seek": 168032, "start": 1687.8, "end": 1690.84, "text": " and a bunch of other projects as chime in as well.", "tokens": [50738, 293, 257, 3840, 295, 661, 4455, 382, 40921, 294, 382, 731, 13, 50890], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 602, "seek": 168032, "start": 1690.84, "end": 1694.24, "text": " So for us, it was a very successful experience", "tokens": [50890, 407, 337, 505, 11, 309, 390, 257, 588, 4406, 1752, 51060], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 603, "seek": 168032, "start": 1694.24, "end": 1696.24, "text": " of using preview features because it allows", "tokens": [51060, 295, 1228, 14281, 4122, 570, 309, 4045, 51160], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 604, "seek": 168032, "start": 1696.24, "end": 1698.32, "text": " us to gather a lot of feedback.", "tokens": [51160, 505, 281, 5448, 257, 688, 295, 5824, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 605, "seek": 168032, "start": 1698.32, "end": 1700.08, "text": " Not necessarily, we have a lot of knowledge", "tokens": [51264, 1726, 4725, 11, 321, 362, 257, 688, 295, 3601, 51352], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 606, "seek": 168032, "start": 1700.08, "end": 1702.6799999999998, "text": " on these topics within the JDK team.", "tokens": [51352, 322, 613, 8378, 1951, 264, 37082, 42, 1469, 13, 51482], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 607, "seek": 168032, "start": 1702.6799999999998, "end": 1704.56, "text": " So it was good for us to put something out.", "tokens": [51482, 407, 309, 390, 665, 337, 505, 281, 829, 746, 484, 13, 51576], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 608, "seek": 168032, "start": 1704.56, "end": 1707.32, "text": " And then here, our people were using some of this stuff", "tokens": [51576, 400, 550, 510, 11, 527, 561, 645, 1228, 512, 295, 341, 1507, 51714], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 609, "seek": 168032, "start": 1707.32, "end": 1709.6, "text": " and make it better.", "tokens": [51714, 293, 652, 309, 1101, 13, 51828], "temperature": 0.0, "avg_logprob": -0.1722114163060342, "compression_ratio": 1.6425992779783394, "no_speech_prob": 0.007813433185219765}, {"id": 610, "seek": 170960, "start": 1709.6, "end": 1710.6399999999999, "text": " That's the end of my talk.", "tokens": [50364, 663, 311, 264, 917, 295, 452, 751, 13, 50416], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 611, "seek": 170960, "start": 1710.6399999999999, "end": 1711.76, "text": " These are some of the links.", "tokens": [50416, 1981, 366, 512, 295, 264, 6123, 13, 50472], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 612, "seek": 170960, "start": 1711.76, "end": 1715.6799999999998, "text": " I hope that you are going to try FFM in 22.", "tokens": [50472, 286, 1454, 300, 291, 366, 516, 281, 853, 479, 37, 44, 294, 5853, 13, 50668], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 613, "seek": 170960, "start": 1715.6799999999998, "end": 1718.6399999999999, "text": " You can subscribe to the mailing list and send us feedback.", "tokens": [50668, 509, 393, 3022, 281, 264, 41612, 1329, 293, 2845, 505, 5824, 13, 50816], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 614, "seek": 170960, "start": 1718.6399999999999, "end": 1720.3999999999999, "text": " There is a link to the JSTRAC tool.", "tokens": [50816, 821, 307, 257, 2113, 281, 264, 508, 6840, 3750, 34, 2290, 13, 50904], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 615, "seek": 170960, "start": 1720.3999999999999, "end": 1723.4399999999998, "text": " So there are binary snapshots available.", "tokens": [50904, 407, 456, 366, 17434, 19206, 27495, 2435, 13, 51056], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 616, "seek": 170960, "start": 1723.4399999999998, "end": 1726.8, "text": " So you can grab the latest one and start extracting", "tokens": [51056, 407, 291, 393, 4444, 264, 6792, 472, 293, 722, 49844, 51224], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 617, "seek": 170960, "start": 1726.8, "end": 1730.28, "text": " your library of choice and play with it a little bit.", "tokens": [51224, 428, 6405, 295, 3922, 293, 862, 365, 309, 257, 707, 857, 13, 51398], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 618, "seek": 170960, "start": 1730.28, "end": 1732.3999999999999, "text": " And then a link to the repos.", "tokens": [51398, 400, 550, 257, 2113, 281, 264, 1085, 329, 13, 51504], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 619, "seek": 170960, "start": 1732.3999999999999, "end": 1733.76, "text": " But that's mostly it.", "tokens": [51504, 583, 300, 311, 5240, 309, 13, 51572], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 620, "seek": 170960, "start": 1733.76, "end": 1734.52, "text": " Thank you very much.", "tokens": [51572, 1044, 291, 588, 709, 13, 51610], "temperature": 0.0, "avg_logprob": -0.17953582823745848, "compression_ratio": 1.6085271317829457, "no_speech_prob": 0.014735688455402851}, {"id": 621, "seek": 173452, "start": 1734.52, "end": 1744.56, "text": " The first question.", "tokens": [50364, 440, 700, 1168, 13, 50866], "temperature": 1.0, "avg_logprob": -2.6892325661399146, "compression_ratio": 1.032258064516129, "no_speech_prob": 0.08666989952325821}, {"id": 622, "seek": 173452, "start": 1744.56, "end": 1750.52, "text": " Questions?", "tokens": [50866, 27738, 30, 51164], "temperature": 1.0, "avg_logprob": -2.6892325661399146, "compression_ratio": 1.032258064516129, "no_speech_prob": 0.08666989952325821}, {"id": 623, "seek": 173452, "start": 1750.52, "end": 1762.4, "text": " Who is FFM-focused from Canadian technologies?", "tokens": [51164, 2102, 307, 479, 37, 44, 12, 44062, 490, 12641, 7943, 30, 51758], "temperature": 1.0, "avg_logprob": -2.6892325661399146, "compression_ratio": 1.032258064516129, "no_speech_prob": 0.08666989952325821}, {"id": 624, "seek": 173452, "start": 1762.4, "end": 1764.42, "text": " I think it's pick.", "tokens": [51758, 286, 519, 309, 311, 1888, 13, 51859], "temperature": 1.0, "avg_logprob": -2.6892325661399146, "compression_ratio": 1.032258064516129, "no_speech_prob": 0.08666989952325821}, {"id": 625, "seek": 176442, "start": 1764.42, "end": 1768.9, "text": " Yeah, basically what is the difference between these and Kotlin native,", "tokens": [50364, 865, 11, 1936, 437, 307, 264, 2649, 1296, 613, 293, 30123, 5045, 8470, 11, 50588], "temperature": 0.0, "avg_logprob": -0.3569215138753255, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.07042419910430908}, {"id": 626, "seek": 176442, "start": 1768.9, "end": 1777.0600000000002, "text": " since Kotlin native can provide access to off-if memory and native function as well.", "tokens": [50588, 1670, 30123, 5045, 8470, 393, 2893, 2105, 281, 766, 12, 351, 4675, 293, 8470, 2445, 382, 731, 13, 50996], "temperature": 0.0, "avg_logprob": -0.3569215138753255, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.07042419910430908}, {"id": 627, "seek": 176442, "start": 1777.0600000000002, "end": 1779.74, "text": " I think they are very similar.", "tokens": [50996, 286, 519, 436, 366, 588, 2531, 13, 51130], "temperature": 0.0, "avg_logprob": -0.3569215138753255, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.07042419910430908}, {"id": 628, "seek": 176442, "start": 1779.74, "end": 1788.8200000000002, "text": " One of the things that I think Kotlin native cannot do because it's still sitting on top of the VM,", "tokens": [51130, 1485, 295, 264, 721, 300, 286, 519, 30123, 5045, 8470, 2644, 360, 570, 309, 311, 920, 3798, 322, 1192, 295, 264, 18038, 11, 51584], "temperature": 0.0, "avg_logprob": -0.3569215138753255, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.07042419910430908}, {"id": 629, "seek": 176442, "start": 1788.8200000000002, "end": 1791.66, "text": " and it has to play by the rules of the existing libraries,", "tokens": [51584, 293, 309, 575, 281, 862, 538, 264, 4474, 295, 264, 6741, 15148, 11, 51726], "temperature": 0.0, "avg_logprob": -0.3569215138753255, "compression_ratio": 1.6476190476190475, "no_speech_prob": 0.07042419910430908}, {"id": 630, "seek": 179166, "start": 1791.66, "end": 1797.14, "text": " is that it cannot have a solution for releasing memory safely.", "tokens": [50364, 307, 300, 309, 2644, 362, 257, 3827, 337, 16327, 4675, 11750, 13, 50638], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 631, "seek": 179166, "start": 1797.14, "end": 1800.6200000000001, "text": " So I believe that Kotlin native is going to use some,", "tokens": [50638, 407, 286, 1697, 300, 30123, 5045, 8470, 307, 516, 281, 764, 512, 11, 50812], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 632, "seek": 179166, "start": 1800.6200000000001, "end": 1802.22, "text": " I mean it's going to say at some point,", "tokens": [50812, 286, 914, 309, 311, 516, 281, 584, 412, 512, 935, 11, 50892], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 633, "seek": 179166, "start": 1802.22, "end": 1804.78, "text": " oh if you use pointer your code is going to be unsafe,", "tokens": [50892, 1954, 498, 291, 764, 23918, 428, 3089, 307, 516, 281, 312, 35948, 11, 51020], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 634, "seek": 179166, "start": 1804.78, "end": 1807.5400000000002, "text": " and you try to free a pointer then all bets are off.", "tokens": [51020, 293, 291, 853, 281, 1737, 257, 23918, 550, 439, 39922, 366, 766, 13, 51158], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 635, "seek": 179166, "start": 1807.5400000000002, "end": 1809.02, "text": " So this is the main,", "tokens": [51158, 407, 341, 307, 264, 2135, 11, 51232], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 636, "seek": 179166, "start": 1809.02, "end": 1812.22, "text": " without solution if you use memory segments,", "tokens": [51232, 1553, 3827, 498, 291, 764, 4675, 19904, 11, 51392], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 637, "seek": 179166, "start": 1812.22, "end": 1816.22, "text": " you can close an arena and your code will never crash.", "tokens": [51392, 291, 393, 1998, 364, 18451, 293, 428, 3089, 486, 1128, 8252, 13, 51592], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 638, "seek": 179166, "start": 1816.22, "end": 1817.8600000000001, "text": " You may get an exception.", "tokens": [51592, 509, 815, 483, 364, 11183, 13, 51674], "temperature": 0.0, "avg_logprob": -0.23956372445089774, "compression_ratio": 1.748936170212766, "no_speech_prob": 0.05184514448046684}, {"id": 639, "seek": 181786, "start": 1817.86, "end": 1823.1399999999999, "text": " This is the same thing as the same thing.", "tokens": [50364, 639, 307, 264, 912, 551, 382, 264, 912, 551, 13, 50628], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 640, "seek": 181786, "start": 1823.1399999999999, "end": 1826.4599999999998, "text": " Yeah, but you know the APIs I've seen so far,", "tokens": [50628, 865, 11, 457, 291, 458, 264, 21445, 286, 600, 1612, 370, 1400, 11, 50794], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 641, "seek": 181786, "start": 1826.4599999999998, "end": 1828.1399999999999, "text": " there is always a whole,", "tokens": [50794, 456, 307, 1009, 257, 1379, 11, 50878], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 642, "seek": 181786, "start": 1828.1399999999999, "end": 1831.62, "text": " like if you use them correctly it works,", "tokens": [50878, 411, 498, 291, 764, 552, 8944, 309, 1985, 11, 51052], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 643, "seek": 181786, "start": 1831.62, "end": 1835.1799999999998, "text": " but there are ways to use them for multiple threads where it's not working,", "tokens": [51052, 457, 456, 366, 2098, 281, 764, 552, 337, 3866, 19314, 689, 309, 311, 406, 1364, 11, 51230], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 644, "seek": 181786, "start": 1835.1799999999998, "end": 1838.06, "text": " unless you go deeper at the VM level of course,", "tokens": [51230, 5969, 291, 352, 7731, 412, 264, 18038, 1496, 295, 1164, 11, 51374], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 645, "seek": 181786, "start": 1838.06, "end": 1840.4199999999998, "text": " which of course Kotlin native cannot do.", "tokens": [51374, 597, 295, 1164, 30123, 5045, 8470, 2644, 360, 13, 51492], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 646, "seek": 181786, "start": 1840.4199999999998, "end": 1842.1, "text": " Up here, Mereh, Siou.", "tokens": [51492, 5858, 510, 11, 376, 323, 71, 11, 4909, 263, 13, 51576], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 647, "seek": 181786, "start": 1842.1, "end": 1843.8999999999999, "text": " Go on, question.", "tokens": [51576, 1037, 322, 11, 1168, 13, 51666], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 648, "seek": 181786, "start": 1843.8999999999999, "end": 1845.58, "text": " Mereh, Siou, here.", "tokens": [51666, 376, 323, 71, 11, 4909, 263, 11, 510, 13, 51750], "temperature": 0.0, "avg_logprob": -0.46246007283528645, "compression_ratio": 1.613733905579399, "no_speech_prob": 0.018279626965522766}, {"id": 649, "seek": 184558, "start": 1845.6999999999998, "end": 1849.46, "text": " Do you know how many platform specific hacks need to be done,", "tokens": [50370, 1144, 291, 458, 577, 867, 3663, 2685, 33617, 643, 281, 312, 1096, 11, 50558], "temperature": 0.0, "avg_logprob": -0.3690979457137608, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07409938424825668}, {"id": 650, "seek": 184558, "start": 1849.46, "end": 1854.46, "text": " like if I want to use one code on like ARM macOS and Linux risk v or something,", "tokens": [50558, 411, 498, 286, 528, 281, 764, 472, 3089, 322, 411, 45209, 7912, 4367, 293, 18734, 3148, 371, 420, 746, 11, 50808], "temperature": 0.0, "avg_logprob": -0.3690979457137608, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07409938424825668}, {"id": 651, "seek": 184558, "start": 1854.46, "end": 1858.9399999999998, "text": " or is it all fully one code for all platforms?", "tokens": [50808, 420, 307, 309, 439, 4498, 472, 3089, 337, 439, 9473, 30, 51032], "temperature": 0.0, "avg_logprob": -0.3690979457137608, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07409938424825668}, {"id": 652, "seek": 184558, "start": 1858.9399999999998, "end": 1862.98, "text": " So in terms of JStrack the model,", "tokens": [51032, 407, 294, 2115, 295, 508, 4520, 81, 501, 264, 2316, 11, 51234], "temperature": 0.0, "avg_logprob": -0.3690979457137608, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07409938424825668}, {"id": 653, "seek": 184558, "start": 1862.98, "end": 1864.6999999999998, "text": " sorry the question was,", "tokens": [51234, 2597, 264, 1168, 390, 11, 51320], "temperature": 0.0, "avg_logprob": -0.3690979457137608, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07409938424825668}, {"id": 654, "seek": 184558, "start": 1864.6999999999998, "end": 1867.54, "text": " do our platform specific is all this?", "tokens": [51320, 360, 527, 3663, 2685, 307, 439, 341, 30, 51462], "temperature": 0.0, "avg_logprob": -0.3690979457137608, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07409938424825668}, {"id": 655, "seek": 184558, "start": 1867.54, "end": 1870.78, "text": " Do we need to worry about differences between platforms?", "tokens": [51462, 1144, 321, 643, 281, 3292, 466, 7300, 1296, 9473, 30, 51624], "temperature": 0.0, "avg_logprob": -0.3690979457137608, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07409938424825668}, {"id": 656, "seek": 184558, "start": 1870.78, "end": 1872.3799999999999, "text": " The answer is yes,", "tokens": [51624, 440, 1867, 307, 2086, 11, 51704], "temperature": 0.0, "avg_logprob": -0.3690979457137608, "compression_ratio": 1.592920353982301, "no_speech_prob": 0.07409938424825668}, {"id": 657, "seek": 187238, "start": 1872.5, "end": 1876.18, "text": " in the sense that the JStrack tool is going to give you a binding", "tokens": [50370, 294, 264, 2020, 300, 264, 508, 4520, 81, 501, 2290, 307, 516, 281, 976, 291, 257, 17359, 50554], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 658, "seek": 187238, "start": 1876.18, "end": 1878.22, "text": " for the platform that you are running on.", "tokens": [50554, 337, 264, 3663, 300, 291, 366, 2614, 322, 13, 50656], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 659, "seek": 187238, "start": 1878.22, "end": 1880.66, "text": " Now, this sounds scary.", "tokens": [50656, 823, 11, 341, 3263, 6958, 13, 50778], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 660, "seek": 187238, "start": 1880.66, "end": 1882.1000000000001, "text": " In practice, for example,", "tokens": [50778, 682, 3124, 11, 337, 1365, 11, 50850], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 661, "seek": 187238, "start": 1882.1000000000001, "end": 1886.7800000000002, "text": " if you work with a high level library such as Lib Clang for example,", "tokens": [50850, 498, 291, 589, 365, 257, 1090, 1496, 6405, 1270, 382, 15834, 2033, 656, 337, 1365, 11, 51084], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 662, "seek": 187238, "start": 1886.7800000000002, "end": 1889.94, "text": " we have a single run of JStrack,", "tokens": [51084, 321, 362, 257, 2167, 1190, 295, 508, 4520, 81, 501, 11, 51242], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 663, "seek": 187238, "start": 1889.94, "end": 1892.8200000000002, "text": " and then we reuse it across all the platforms and it works fine,", "tokens": [51242, 293, 550, 321, 26225, 309, 2108, 439, 264, 9473, 293, 309, 1985, 2489, 11, 51386], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 664, "seek": 187238, "start": 1892.8200000000002, "end": 1895.98, "text": " because that library is defined in a way that is portable.", "tokens": [51386, 570, 300, 6405, 307, 7642, 294, 257, 636, 300, 307, 21800, 13, 51544], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 665, "seek": 187238, "start": 1895.98, "end": 1897.5400000000002, "text": " If you work with system libraries,", "tokens": [51544, 759, 291, 589, 365, 1185, 15148, 11, 51622], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 666, "seek": 187238, "start": 1897.5400000000002, "end": 1899.74, "text": " of course you are going to have a lot less luck,", "tokens": [51622, 295, 1164, 291, 366, 516, 281, 362, 257, 688, 1570, 3668, 11, 51732], "temperature": 0.0, "avg_logprob": -0.1721434737696792, "compression_ratio": 1.782442748091603, "no_speech_prob": 0.04445706680417061}, {"id": 667, "seek": 189974, "start": 1899.74, "end": 1903.5, "text": " and that system library is only going to work on one platform,", "tokens": [50364, 293, 300, 1185, 6405, 307, 787, 516, 281, 589, 322, 472, 3663, 11, 50552], "temperature": 0.0, "avg_logprob": -0.26499058045062823, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.010692327283322811}, {"id": 668, "seek": 189974, "start": 1903.5, "end": 1907.38, "text": " and all the platforms will need to do something else.", "tokens": [50552, 293, 439, 264, 9473, 486, 643, 281, 360, 746, 1646, 13, 50746], "temperature": 0.0, "avg_logprob": -0.26499058045062823, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.010692327283322811}, {"id": 669, "seek": 189974, "start": 1910.38, "end": 1914.78, "text": " Yes, can you tell us about the memory footprint compared to JNI?", "tokens": [50896, 1079, 11, 393, 291, 980, 505, 466, 264, 4675, 24222, 5347, 281, 508, 42496, 30, 51116], "temperature": 0.0, "avg_logprob": -0.26499058045062823, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.010692327283322811}, {"id": 670, "seek": 189974, "start": 1914.78, "end": 1918.6200000000001, "text": " Memory footprint compared to JNI.", "tokens": [51116, 38203, 24222, 5347, 281, 508, 42496, 13, 51308], "temperature": 0.0, "avg_logprob": -0.26499058045062823, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.010692327283322811}, {"id": 671, "seek": 189974, "start": 1918.6200000000001, "end": 1920.82, "text": " So of course if you use memory segment,", "tokens": [51308, 407, 295, 1164, 498, 291, 764, 4675, 9469, 11, 51418], "temperature": 0.0, "avg_logprob": -0.26499058045062823, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.010692327283322811}, {"id": 672, "seek": 189974, "start": 1920.82, "end": 1925.18, "text": " there is a little bit of footprint because you have an object that embeds an address,", "tokens": [51418, 456, 307, 257, 707, 857, 295, 24222, 570, 291, 362, 364, 2657, 300, 12240, 82, 364, 2985, 11, 51636], "temperature": 0.0, "avg_logprob": -0.26499058045062823, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.010692327283322811}, {"id": 673, "seek": 189974, "start": 1925.18, "end": 1927.14, "text": " so you don't have a long.", "tokens": [51636, 370, 291, 500, 380, 362, 257, 938, 13, 51734], "temperature": 0.0, "avg_logprob": -0.26499058045062823, "compression_ratio": 1.68348623853211, "no_speech_prob": 0.010692327283322811}, {"id": 674, "seek": 192714, "start": 1928.0200000000002, "end": 1932.6200000000001, "text": " But our plan is to make all these memory segments", "tokens": [50408, 583, 527, 1393, 307, 281, 652, 439, 613, 4675, 19904, 50638], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 675, "seek": 192714, "start": 1932.6200000000001, "end": 1936.3000000000002, "text": " scalarizable because the implementation is completely hidden.", "tokens": [50638, 39684, 22395, 570, 264, 11420, 307, 2584, 7633, 13, 50822], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 676, "seek": 192714, "start": 1936.3000000000002, "end": 1939.0200000000002, "text": " You only have a sealed interface in the API,", "tokens": [50822, 509, 787, 362, 257, 21514, 9226, 294, 264, 9362, 11, 50958], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 677, "seek": 192714, "start": 1939.0200000000002, "end": 1942.98, "text": " which means all these interfaces are going to be implemented by value classes", "tokens": [50958, 597, 1355, 439, 613, 28416, 366, 516, 281, 312, 12270, 538, 2158, 5359, 51156], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 678, "seek": 192714, "start": 1942.98, "end": 1944.38, "text": " when Valhalla comes,", "tokens": [51156, 562, 7188, 71, 10352, 1487, 11, 51226], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 679, "seek": 192714, "start": 1944.38, "end": 1948.26, "text": " which means if you bring up a memory segment,", "tokens": [51226, 597, 1355, 498, 291, 1565, 493, 257, 4675, 9469, 11, 51420], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 680, "seek": 192714, "start": 1948.26, "end": 1949.98, "text": " you wrap a memory segment around an address,", "tokens": [51420, 291, 7019, 257, 4675, 9469, 926, 364, 2985, 11, 51506], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 681, "seek": 192714, "start": 1949.98, "end": 1953.46, "text": " you are not going to pay anything allocation-wise.", "tokens": [51506, 291, 366, 406, 516, 281, 1689, 1340, 27599, 12, 3711, 13, 51680], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 682, "seek": 192714, "start": 1953.46, "end": 1956.18, "text": " For now, there is a little bit of cost in the cases", "tokens": [51680, 1171, 586, 11, 456, 307, 257, 707, 857, 295, 2063, 294, 264, 3331, 51816], "temperature": 0.0, "avg_logprob": -0.20759199331472586, "compression_ratio": 1.7470817120622568, "no_speech_prob": 0.022862402722239494}, {"id": 683, "seek": 195618, "start": 1956.22, "end": 1960.5800000000002, "text": " where the VM cannot figure out with escape analysis the allocation,", "tokens": [50366, 689, 264, 18038, 2644, 2573, 484, 365, 7615, 5215, 264, 27599, 11, 50584], "temperature": 0.0, "avg_logprob": -0.3795689247749947, "compression_ratio": 1.2586206896551724, "no_speech_prob": 0.010705224238336086}, {"id": 684, "seek": 195618, "start": 1960.5800000000002, "end": 1964.54, "text": " but in the future we plan for this to completely disappear.", "tokens": [50584, 457, 294, 264, 2027, 321, 1393, 337, 341, 281, 2584, 11596, 13, 50782], "temperature": 0.0, "avg_logprob": -0.3795689247749947, "compression_ratio": 1.2586206896551724, "no_speech_prob": 0.010705224238336086}, {"id": 685, "seek": 195618, "start": 1973.8600000000001, "end": 1978.7, "text": " Yeah, okay. Sorry.", "tokens": [51248, 865, 11, 1392, 13, 4919, 13, 51490], "temperature": 0.0, "avg_logprob": -0.3795689247749947, "compression_ratio": 1.2586206896551724, "no_speech_prob": 0.010705224238336086}], "language": "en"}