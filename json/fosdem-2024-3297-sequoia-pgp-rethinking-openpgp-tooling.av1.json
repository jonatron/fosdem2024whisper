{"text": " Thanks for coming. Today I'm going to talk about Sequoia PGP, in particular rethinking open PGP tooling. First I want to introduce Sequoia PGP for those of you who don't know about it. I'll talk about its design and implementations and what makes that interesting. And then some day-to-day usage in order to illustrate what I mean by rethinking open PGP tooling. So what is Sequoia PGP? Say an open PGP implementation. And you can see here this is our GitLab site and we have a number of projects. And what is this open PGP thing? Well it's an IETF standard. Go on the internet, you can download it for free. It's derived from PGP which was published in 1991. The first version of the standard was published in 1996 and work is still ongoing. The next version of the standard is expected this year. It's currently in working group last call. And the standard defines the wire format. So how messages look, how certificates look. It talks about algorithms like encryption and decryption and how signing and verification work. And it also defines importantly a PKI, a public key infrastructure. But it's not an implementation. Sequoia is an implementation. And it's not just an implementation of the spec. It's a whole number of services and tooling and applications on top. And for those of you who've used open PGP, it's also a paradigm shift. We've looked at the way things have worked in the past and we have some new ideas about how maybe they can work better at least for some people. Sequoia's technical goals are to be a library-first architecture. So not a command line tool where a library calls the command line tool, but really the library is the source of truth. It's the most powerful thing. We have unopinionated low-level interfaces that are safe by default. That means that you can do a lot of things. You can do a lot of stupid things. But what we really tried to do on our API is to make sure that the easy way to do something is the safe way. Of course, low-level interfaces are hard to use. And so we provide high- level interfaces. And these high-level interfaces are necessarily opinionated. And what do you do when the opinion doesn't match what you need? Well, you can either completely switch to the low-level interface, which is inconvenient. What we've tried to do is to make our interfaces gradual so it's possible to mix low-level data structures with high-level data structures. And we've also designed Sequoia that the services are optional. And I'll get to what that means later. But what was the motivation for building Sequoia PGP? Sure, most of you have heard about it. It's existed for, I think, 23 years. And we've talked to people. And we heard some complaints from some users. I don't want to say all users, but certainly some users. And as we all know, the people who have something negative to say tend to be the loudest. So I don't want to say that as a representative sample. But what we heard was that the CLI was hard to use. And that the CLI-first approach that GNU PG takes, where you have GPGME, which is a library that calls out to the CLI binary, it's brittle. We heard that the APIs are too opinionated. And sometimes you want to do something and it almost matches what GNU PG expects, but not quite. And then you have to write a lot of code in order to work around it. People didn't like that the services are mandatory and the scalability wasn't so good. And I'm not talking about internet scalability. I'm just talking about individual user who has a few thousand certificates locally. Operations just take too long. So that's sort of the negative motivation, but there was also positive motivation. If you go out onto YouTube and you look at the GNU PG channel, there are a number of interviews called the GNU PG stories. And there are a lot of people from different projects, the EFF, the ACLU from OCCRP, from newspapers and reporters and reporters without borders and activists. And there's a common theme that they all were repeating. We use a lot of different encryption technologies, but probably none more important than GPG. And the question that we had was, you know, can we do better? We were inspired by this. So I want to take another step back and talk about Sequoia's sort of prehistory. So Sequoia was started in 2017, but before that, the people who started it that was used as Kai and I, we worked on GNU PG. And while we worked on GNU PG, of course, we worked with code. We talked to people who were using GNU PG as in developers. And we also talked to end users. And we had ideas about how to change things because we had these conversations where people were telling us things that they were unhappy with. And we had many technical conversations with Werner. Werner is the main author of GNU PG. And we couldn't converge on a vision. And so we had this conflict in the room. Werner wanted to go in one direction. The three of us wanted to go in a different direction. Should we continue with the established approach? Should we pursue the Sequoia vision? What does a compromise look like? And sometimes a compromise just isn't possible. And what do you do in that case? Is one person win and dominate? And sometimes that's a solution. In this case, we chose to part ways. And I think that's a perfectly okay thing to do. Werner had a vision. We had a vision. We didn't demand that Werner changed his vision. We left and we started a new project where we wanted to experiment and see if we could solve these problems that we had recognized. And what happens when you have two projects? Do you split the users? Do we have a small number or a big number of GNU PG users and all of a sudden half of them go to GNU PG and half of them go to Sequoia or 10% go to Sequoia and 90% to GNU PG? It could happen. But I think that's a pessimistic view of the possibilities. I don't think that has to be that way. Because it's not just about the GNU PG users. They're all of these non-users out there who are not using encryption technology. We wanted to offer more choice for users. We wanted to explore different options and see if the users out there or non-users could be served by this new paradigm. There's a diversity of needs. We wanted to in particular win over non-users. And the great thing is that there are a lot of non-users or maybe that's a sad thing but there are a lot of non-users. And we have a protocol. OpenPGP. It's interoperable. Can the network effects help? More implementations, more users, more network effects? In this view of the world, the ecosystem wins. There is more privacy and there's more security. And at this point I want to have an ode to Werner. So Sequoia really owes its existence to Werner. He was an inspiration to make GNU PG better. He was our inspiration to work on cryptography and defend privacy. And if Yusis Kai and I are Sequoia's parents, then it's not far to say that Werner is absolutely Sequoia's grandfather. And it turns out that it's not just two implementations. There are many implementations. There's OpenPGP for go, OpenPGP.js, PG painless, PG pi, R&P, RPGP and Sequoia. And these are just the free software implementations that are relatively big. And if you have all of these implementations out there, how do they work together? Well, yeah, we have this standard, but we have to ensure interoperability. And ensuring interoperability prevents vendor lock-in and improves the network effects for everyone. And for this, a standard is not enough. We need more. We need an OpenPGP interoperability test suite. And this was one of the first things that we actually worked on. And it currently has 131 tests and over 1,500 test vectors. And here you can see a snapshot. You can see that most implementations are tested. Currently, there's one implementation that I mentioned that's not there, which is RPGP. But thank you to Heiko, a former Sequoia developer. He's currently adding support for RPGP. All right, now I want to switch gears a bit and talk about the design and implementation of the library or the low-level components. So this Sequoia's architecture, what does it look like? I mentioned before, library-first approach. So applications are built on the library. And on top of the library, we have the CLI. The CLI is using the library, and that makes the CLI necessarily less powerful than the library. And we think that's okay. If you want to do, if you want to program using our CLI, it's possible. If you want to go further, then you're probably in a space where you should be using a library in a high-level language. We have a bunch of high-level components. They're optional. We have services that run as demons, for instance, the key store. But it doesn't have to run as a daemon. It can be co-located. Now, the daemon has the advantage that you have process separation, and this avoids things like heartbleed. It can multiplex resources, it can share state. But it's not always the right solution. And so it's possible to co-locate the service into the application binary in the same address space. And that's good when you need a restricted environment or you want to fall back in order to increase robustness. Now, I mentioned that we have a whole bunch of components. So up top, we have here OpenPGP, which is our library. And next to it, we have PGP-CertD, which is a certificate store or a standard, or not yet a standard, but there is a text that describes how it works. It looks like a mailder. And we have a library implementation. And that doesn't directly depend on our library. And then we have a whole bunch of libraries on top and services. We have the key store for private key operations. We have the cert store, which is the in-memory certificate store. We have the web of trust engine. We have our network library for accessing key servers in WKD and Dane. We have our auto-crypt library for doing auto-crypt operations. And we have another library for configuring the cryptographic policy. And SQ, you know, it exposes all of this functionality. And so it's using all of these things. And RPM is one of the users of Sequoia. Since Fedora 38, the version of RPM that ship uses Sequoia to verify the packages. And it doesn't use secret key material. It has its own certificate store and it uses its own trust model. So all of these components aren't needed. And RPM just links against OpenPGP, the library, and the configuration policy. Now I mentioned before our API design, unopinionated low-level interfaces, opinionated high-level interfaces that are built on these low-level APIs. But what does that look like? So let's imagine that we have a certificate and we want to write it out to disk. So we have a method called serialize. You provide it with a buffer or a file or whatever. And it just writes it out in OpenPGP format. What if there's secret key material in there? That would be a shame if you accidentally leaked that. Well, in Sequoia, we automatically strip that out by default. That's safe. You really, really need to write out the secret key material. Sometimes you do. Sometimes you want to. You have to opt in. And for this, we have asTSK, which converts the data type. And the new data type provides an interface, the same interface, and you serialize it. And then you also get the secret key material. And I mentioned that we have these progressive high-level APIs. What do they look like? Here, we see how to create a certificate. We have a certificate builder. You want to create a general-purpose certificate. You add a user ID, and you generate it, and you're good. But what if you also want to add a decentralized social proof? So, probably heard of Keybase, where you can do these social proofs or link services. There's also a mechanism in OpenPGP, or an extension that allows you to embed them directly into the certificates. And that's not really supported by the library. At least there are no APIs to do that. But you can use the signature builder, and you can add on the appropriate notation. And then the cert builder, you override the how it creates the signature by using this template, and then the certificate that's created automatically has this decentralized proof embedded in it. So that's the library. What does the command line interface look like? So, SQ is our primary command line interface. There are other tools out there, of course, but SQ is sort of the GPG equivalent, if you will. And we opted for a sub-command style interface. So, if you want to encrypt a message, use the encrypt sub-command. And here, I'm encrypting a message to me. So, the recipient email is neil at sequoia-pqp.org. The next thing that's very important is that we have a very clear separation of options. So, there's another sub-command, SQ sign. You can sign a message. And this command does not take the recipient email argument, because it doesn't make sense in this context. And so, if you try to provide it, you get an error. And another thing that we've really tried to do is ensure that there's consistency between the sub-commands. So, if you have, for instance, an email option, it doesn't matter what sub-command we're talking about, it has more or less the same semantics. And we've talked to people who've used sequoia or SQ, and the reactions have been very positive so far. So, we're quite confident that the design maybe is not optimal, but certainly is good. But the really big paradigm shift in SQ and in sequoia in general is the way that we think about certificates. And a certificate is sort of this OpenPGP artifact that you use and that you throw out onto the internet someplace on a key server and a Web key directory. You publish it on your web page. And if I want to send you an encrypted message, then I download your certificate and I encrypt a message using your certificate. And then I send you that encrypted message and you're able to decrypt it with your keys. So, certificates are really important and how we use them is also important. And in SQ, we're moving away from curated key rings. So, a curated key ring means that the data that you have available locally has been checked. It's authentic. It's the right stuff. If you have a certificate for me or that claims to be for me in your key ring, you're assuming that it's good. And it's sort of this say yes to get worked on mentality. So, if you're using GPG and you have a curated key ring mentality, and that's not required in GPG, but it's how many people use it we've observed, and you want to send a message to DKG and you address him by his email address, then GPG is going to warn you and say, do you want to use this key anyway? And it doesn't really provide you any options. The options are get worked on or not get worked on. And certifying user IDs is not easy. So, the amount of energy required in order to certify a user ID means that hitting yes is sort of much easier. And we want to move towards strong authentication. And so, in SQ, we treat the local certificate store as a cache. It's no better than the certificates that are stored on, for instance, the SKS key servers where no authentication is done. By default, we'll just store anything there. What about these self signed user IDs? Right, if you have a certificate, you create a user ID, you add it to that certificate. On my certificate, I have a self signed user ID that says Neil, but anybody can create a certificate where there's a user ID that says Neil on it. We treat it at most as a hint. And SQ certificates can only be addressed by authenticated identifiers. And the way that we do this is we really, really embrace the web of trust. And now the question that you're probably asking is, is this going to be a usability nightmare? And it's a question that we also asked ourselves because we didn't know we had to try it out. And I propose let's take a look and see. But we need to take a step back again and ask, what is authentication exactly? And so there are sort of two aspects to authentication. What we want to know is what certificate should I use when I want to encrypt a message for Alice? Or alternatively, if I have a certificate, who does this certificate really belong to? Is it Alice's certificate? And really self signatures, they don't mean anything in this context, right? This certificate here that we see on the right, there are user IDs that say Alice, but did Alice create those user IDs? Or is it Mallory who's trying to trick you? Or maybe somebody who's just trolling? So what does authentication look like today? Well, we have a centralized authentication, which is easy to use, but it's unsafe in the sense that you're relying on these central authorities. You're relying on hundreds of centralized CAs in X509. These are controlled by governments, not only your government, they're controlled by companies whose interest is to make money. And any one of them can trick you. Certificate transparency helps, but you're still reliant on the centralized CAs. And they haven't done a good job historically. So up here at the top, we see here a Google security blog post and Chrome planned to distrust semantic certificates because they had made too many mistakes. This is not great. But signal, signal is great, right? In a certain sense, technically, signal is even worse. And signal, you have one key server. And it's on the same infrastructure as the message transport. The good news is, and I use signal, you can trust the signal foundation, right? I believe in Moxie, but I don't think belief is enough. I think we want technical solutions. So what about peer-to-peer? Here, we're talking about checking somebody's fingerprint or checking the safety numbers in the context of signal. You can do that, and that is really, really safe. And it's a really good thing to do if you're worried. But it has such high upfront costs that few people do it. We need something in between. And then there's a third model, which is the consistency model. Do you have the same certificate every single time? This is called trust on first use, more or less. And it's really easy for users until they have a problem. And then how do you resolve a conflict? All right. So we have these different models, and maybe they're good enough, I don't know. Maybe they're even good enough for most. So Pearlbuck, who's a Nobel prize winner, said 100 years ago, the test of a civilization is the way that it cares for its helpless members. So the weakest members, the people who need protection, the activists and the people that are being pursued. And so our goal is not to be good enough for most, but to be good enough for even more. We want to provide a progressive system that serves a range of needs. And the way that we're doing it is we're providing different tools in order to increase confidence. And the tools work to support the user. And then based on the individual user's threat model, you can decide if the degree of confidence is high enough. And for this, we use the web of trust, which is a powerful and flexible PKI. In the web of trust, everyone can act like a certification authority. That doesn't mean that everybody is your own personal certification authority. You have to opt in. But maybe you as an individual don't opt in by yourself, but it's your system administrator at work, or it's a family member who you rely on. And the web of trust can use weak evidence. It's not a zero or one decision. It's possible to combine evidence in the web of trust. And the web of trust can work with all of the models that I presented before. It can be used in a centralized manner. It can be used in a federated manner. And it can be used in a peer to peer manner. And traditionally, people think of the web of trust as a peer to peer solution to authentication, where we go to key signing parties and we check fingerprints. But that doesn't have to be. And so if the web of trust is so good, why hasn't it succeeded? Why are we only using it in this very limited way? And I think the reason is because we've been missing the tools to make it easier to automatically integrate evidence into a web of trust and tools that make it easy to manage the web of trust. And I would say until now, because we've been working hard on improving the tooling. So in order to illustrate the power of the tools, I want to do an example. I want to send an encrypted mail to DKG or encrypt a message to DKG. So let's just try it out and see what happens. So we do SQL encrypt. We provide the email address, and we get an error. Well, that's not so great. Let's go to the key servers. Let's go on the network and see if we can find a certificate for DKG. So in SQ, this is the SQ network fetch sub command. And immediately we see something that doesn't give us confidence in the tools I would suspect. We imported four certificates. Ouch. Which one do we use? Which one is the right one? Is one of the four even the right one? Maybe it's a fifth one that we didn't find. What should we do? The best thing that we can do would be to ask Daniel, what is your fingerprint? And then use that one. But what if we can't or it's inconvenient? We could ask somebody else. That's pretty good that we rely on. Or a better solution is to ask multiple entities, combine the evidence, and then weigh the evidence according to the entities, and ideally do this in a completely automated way. And then you have a certain degree of confidence that a binding is correct. And maybe that's enough for you, maybe not. That depends on your threat model. And there's already a whole bunch of rudimentary evidence out there about what certificate we should use for DKG. There are a whole bunch of key servers. There's WKD, which is the Web Key Directory, and there's Dane for looking up certificates in DNS. And it turns out that keys.openpgp.org is a validating key server. That means that if you attempt to upload a certificate to keys.openpgp.org, you get an email where the user IDs on the certificate get an email prompting them to follow a link to validate the user ID for that certificate. keys.mailvalope.com does something similar. Proton mail does something similar where you don't get an email, but you log in, you say, this is my certificate. WKD is controlled by the user or their administrator, and the same thing for Dane. And SQ network fetch already fetches them all. You don't have to do it manually. And by the way, it records the evidence in the Web of Trust. They're stored completely as normal Web of Trust data structures as defined by the ITF standard. But how are they stored? So the way it works is we'll take keys.openpgp.org as an example. It's more or less a de facto CA. So what we do locally is we create a shadow CA. We create a new certificate and we say downloaded from keys.openpgp.org as the user ID. We have a local trust route. The local trust route says this shadow CA is an intermediate intermediary CA. We don't create one for SKS because SKS does not do any form of validation. And so in the case of keys.openpgp.org, we download a certificate from that key server. We go through the user IDs and then we create a certification for the returned user IDs using the keys.openpgp.org shadow CA certificate. And this evidence is automatically combined by the Web of Trust. So we have this trust route and shadow CA's. They're created automatically. And by default, the shadow CA's are trusted minimally. Some users don't want to rely on keys.openpgp.org and that's completely understandable. And as I mentioned, in the Web of Trust, you can have a varying degree of confidence in a binding or in a CA. And so we use the minimum, one out of 120. And what we also do is the trust route and the shadow CA's and the certificates, the certifications that are created, they're all marked as unexportable. And we do this in order to protect the user's privacy. So let's take a quick look here at how the evidence is recorded. So we do sqpki list and we put down the email address and then sq helpfully shows us the three paths that it found. And at the top, we see that there's the local trust route that's followed by an intermediary CA called the public directories that's followed by our shadow CA downloaded from keys.openpgp.org and then that is certifying the certificate from Daniel. And what that looks like graphically is here shown at the bottom. And some observations, the shadow CA's are partially trusted. keys.openpgp.org, we see on the edge leading to it has a one on it. It's one out of 120. The same thing for WKD, the same thing for Dane. And we don't want to completely ever rely on all of the public directories out there. And so we insert in between a public directories shadow CA. And this acts as a sort of electrical resistor where there's a maximum of a 40 that can flow through it. In this case, we see that the trust amount is three out of 120. And that's not enough to authenticate the certificate. But what's interesting is that we have no evidence for other certificates either. So what do we do now? Are we done? Well, if we're sufficiently convinced, then we're done. If not, we need to get more evidence. Where can we get more evidence? Now, we can think about the additional overhead of talking to Daniel or finding people who know Daniel and his certificate. Whatever the case, once we're convinced, we have two options. We can create a public certification. This is what most people do when they go to a key signing party. They create a certification and they publish it on the key servers. Or we can create a private link, which is not exportable, either permanent or temporary. In this case, we're going to create a private link that is permanent. And we do sqpki link add, no password. No password required. It is the local trust route. It just works. Bam. So let's do sqpki list now, fully authenticated. And does it work? It does work. sq encrypt recipient email DKG. What if we decide we want to fully trust keys.openpqp.org? Also pretty easy. This is the general form for trusting any certificate as a CA. sqpki link add. And we say that we want this to be a CA for anything. I'll get to what that means in a minute. In this case, we're saying keys.openpqp.org should be fully trusted. So let's try another email address sqpki list. It's fully authenticated, going from the local trust route to download it from keys.openpqp.org to the email address that we entered. And there's more information that we can incorporate. And some of it we already do. We have usage information, for instance, tofu. If you download a certificate from a URL, like you're downloading, for instance, Fedora, or you're downloading tales, you can monitor the URL. We can use auto-crypt information. And we can even easily introduce CA's. So what are organizational CA's? You have an organization, say a company, or a group of activists, and they are willing to delegate sort of these authentication decisions to a trusted entity. Maybe it's the admin or the nerd. And if I want to talk to somebody inside of that organization, then I don't have to authenticate every individual. I just have to authenticate the CA. And now I've bootstrapped trust into the organization. And by the way, we have a CA, chriscoi.sh, pgp.org. So if you want to contact us, you can use it. How does it work? You first have to think about how much you want to trust it from 1 to 120. Do you want to scope the trust? Because it's our CA. We might trick you. But you can rely on us, probably, to say what are the correct certificates for people in our organization. So here we can partially trust the CA, sqpki.link.add. And we're limiting it to sequoia.pgp.org. So it won't be used for other certificates. And here you can see Justices' email address. I do sqpki.list. And it is fully authenticated using the CA. And by the way, if you want to run your own CA, there's tooling for that too. There's open pgpca. It's a great way to bring up a CA. It's easy to use. And it's written by hyco. And I encourage you to check it out. But there's more tooling out there where pki can help, where you need pki. Let's look at open SSH for a moment. In open SSH, the authentication keys are the identity keys. And if the authentication key is compromised, users have to update. Is that a problem? We have a great case study, just a few months ago, GitHub accidentally leaked their private key. The good news is it wasn't leaked for long. They immediately removed it, or seconds, minutes later, I don't know. They rotated the key. The bad news is every single GitHub user who used their RSA key had to update their known host file. Quite the pain in the butt. What if you could use OpenPGP's pki and OpenPGP's certificates, where you have a separate identity key, and you keep the identity key offline. And when something like that happens, you can, of course, make an announcement, then you rotate the subkey, and that's it. There are two former Sequoia developers who are currently working on that, Victor and David. The project is called SSH, OpenPGP off. And I encourage you to check that out as well. What about commits? I'm sure many of you have signed a commit. What does it mean? I don't know. It doesn't mean anything if you don't have a policy. So we have a tool called Sequoia Git. It defines, as a document that talks about how to define a signing policy for a project. You put it into a Tomo file. The Tomo file is directly embedded into your Git repository. It evolves with the project. And then you're able to check whether or not commits are authentic according to the project developers. So there's a whole bunch of tools that I think change the way that one could use OpenPGP and interact with the ecosystem. So what if you want to use Sequoia today? Of course, SQ, I presented. You can use it. It's packaged for Debian, it's packaged for Fedora, it's packaged for Arch, it's packaged for other distributions. But SQ is not integrated into a lot of existing tools. So do you want to live in sort of a split brain world where you have some of your tooling using some state and other tooling using other state? So we have the GPG Chameleon and it is an implementation of GPG's de facto interface. So you can just drop it in and use it and here you see GPG-version reports that it's the chameleon actually. And it uses both GPG state and SQs, which means that you immediately profit from SQ's PKI tooling. It automatically uses that when doing web of trust calculations. So you don't actually have to do any migration. And if you're using Thunderbird, we have the Octopus, which again is a drop-in equivalent API to the RMP interface that Thunderbird is currently using. And it includes web of trust support and GPG agent support. Now if you want to integrate OpenPGP, there's a standard. You can read the standard as long as it gets complicated. But recently, just two months ago, Hico, Paul, Ms. Uppedy, Victor and David published a book, OpenPGP for application developers. It's the book that should have existed 20 years ago. It didn't exist and now it exists. It's a few hundred pages talking about some of the details of OpenPGP as they relate to the needs of application developers. And I think that this is really the game changer. Who's been funding Sequoia? The project started in 2017. For six years, the PEP Foundation funded Sequoia. We received money from NLNet and currently we are being funded by the sovereign tech fund, at least until the end of the year. And post-2024. Well, that's an open question. Maybe somebody can help us with. Thanks for listening. I hope that I've convinced you that users have different needs. There are different users. They have different needs. And I don't think that there is one universal solution. There's not one implementation that is going to make everybody happy, necessarily. And if that implementation were to try to exist, the fact that it tries to be everything to everyone means that it's going to make some people unhappy. Sequoia has a different architecture. It has different paradigms. Maybe it's the right one for you. Maybe it's the right one for some non-users to convert. And I don't think that it's going to divert them to be open PHP users. I firmly believe that diversity in an ecosystem is a strength. I believe that we are better together. And I believe that winning is not dominance of a single implementation, but improving privacy and security for individuals. And as a small aside, by the way, implementing your own PKI, that's the new implement your own crypto library. Please don't do that. Thank you very much. Thank you very much. Are there any questions? A question there. Thank you. Um Okay. Thanks for your talk. I have a question. I currently use GPG agent as SSH agent. And is it possible with Sequoia too? Okay. I can't hear anything because the microphone or the speakers are pointed this direction. Can you say it again? I'm currently using GPG agent SSH agent. Can it be done with Sequoia too? Can you use Sequoia as a GPG agent? SSH agent. SSH agent. Yeah. Okay. Okay. It's okay. Hi Neil. Thanks for the talk. Lots of interesting points. Oh, sorry. I'll try to speak loud. Thanks for the talk. Thanks for the points raised. Thanks for the bows. I'm wondering a bit about compatibility and interop. Could you speak on that topic a bit? Because of, well, recent developments. Where do you see Sequoia in the future? Like, especially this year and going forward when it comes to interop with other implementations and newer versions of OpenPGP. I know this is a bit of a larger topic, but maybe you can share some of your thoughts with that. Okay. So I understood the question is what is the future compatibility with OpenPGP? And our intention is absolutely to implement whatever the ITF decides to standardize in the next revision of the OpenPGP protocol. And I believe what your question is sort of asking about is the LibrePGP thing? And I think that's a good question. I think that's a good question. I think that's a good question. And I believe what your question is sort of asking about is the LibrePGP thing? And I mean, that's a whole can of worms. And I think it's an extremely unfortunate situation. And my personal hope is that we're all going to implement the things that the standard bodies say is the standard because it improves interoperability. One of the arguments around LibrePGP, which is a different, which is the GNU PG format or the GNU PG and RMP format alternative to the ITF standard, is that they say we already shipped it. Well, they already shipped it. I think it absolutely makes sense to write down what it is that they shipped. But I hope that future developments are going to go in a direction where they also support the standard. Hi. Do you integrate with hardware backed private keys? So for example, Fido keys. Right. So there are two ways that we do integration. So the first one is if you're currently using GNU PG and you're using the GPG agent. And then you decide, okay, I want to try out Sequoia. And you're using the Chameleon GPG. Chameleon will automatically use GPG agent. That means that there is zero configuration required. You automatically get access to all of the things that you had access to before. So that's sort of the easy thing. The other half is what does it look like in terms of Sequoia sort of native support. And for this, we have a private key store, which has a device driver style architecture. And then there are different back ends implemented by that. Again, one of the back ends is the GPG agent back end. But Hico, for instance, did a lot of work on the smart card area. And so if you're using an open PGG smart card, then in the future you'll be able to use the private key store and it will be able to talk to your open PGG smart card. Likewise for PIV tokens and we expect to add additional things in the future. Are there any concerns or ongoing work with regards to post-quantum? Post-quantum is a good question. Right, of course. The whole ITF is very interested in addressing the question of how do we deal with the post-quantum threat. And there, as I mentioned, the ITF working group has submitted the document to the ITF for ratification. And it's currently in working group last call, or last call, I'm not entirely sure of the terminology. But we expect within the next couple of months that it will be ratified. And the working group has a nuke shatter. The nuke shatter has been accepted and the nuke shatter includes post-quantum work. The post-quantum work has more or less already been done and it was a collaboration between the BSI and Proton primarily. So the BSI a few years ago had a call and they asked, or the MTG, which is a company in Germany, applied to do the post-quantum work in the open PGG space. Proton joined in and there is an entire draft or there have been multiple versions of a draft. Everybody is more or less happy with the draft. It is much less controversial, one might say, not that the crypto refresh is terribly controversial. And this is the direction that we're moving in and I expect that it will also be ratified very quickly. The tricky part, of course, is the actual deployment in real life. It is not a very long time but it seems that we do still have a couple of years. Thank you very much. I think if there are further questions, your email was on the slide. Feel free to ask him, I'm assuming. It was a very enlightening talk. It was a challenging talk too. And as Belgians, we'd like to give you a token of our appreciation for your effort. Thank you very much. Have a nice day.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.64, "text": " Thanks for coming. Today I'm going to talk about Sequoia PGP, in particular rethinking", "tokens": [50364, 2561, 337, 1348, 13, 2692, 286, 478, 516, 281, 751, 466, 46859, 78, 654, 40975, 47, 11, 294, 1729, 319, 39873, 50996], "temperature": 0.0, "avg_logprob": -0.1859426630867852, "compression_ratio": 1.483695652173913, "no_speech_prob": 0.09180399030447006}, {"id": 1, "seek": 0, "start": 12.64, "end": 20.32, "text": " open PGP tooling. First I want to introduce Sequoia PGP for those of you who don't know", "tokens": [50996, 1269, 40975, 47, 46593, 13, 2386, 286, 528, 281, 5366, 46859, 78, 654, 40975, 47, 337, 729, 295, 291, 567, 500, 380, 458, 51380], "temperature": 0.0, "avg_logprob": -0.1859426630867852, "compression_ratio": 1.483695652173913, "no_speech_prob": 0.09180399030447006}, {"id": 2, "seek": 0, "start": 20.32, "end": 26.68, "text": " about it. I'll talk about its design and implementations and what makes that interesting. And then", "tokens": [51380, 466, 309, 13, 286, 603, 751, 466, 1080, 1715, 293, 4445, 763, 293, 437, 1669, 300, 1880, 13, 400, 550, 51698], "temperature": 0.0, "avg_logprob": -0.1859426630867852, "compression_ratio": 1.483695652173913, "no_speech_prob": 0.09180399030447006}, {"id": 3, "seek": 2668, "start": 26.68, "end": 32.4, "text": " some day-to-day usage in order to illustrate what I mean by rethinking open PGP tooling.", "tokens": [50364, 512, 786, 12, 1353, 12, 810, 14924, 294, 1668, 281, 23221, 437, 286, 914, 538, 319, 39873, 1269, 40975, 47, 46593, 13, 50650], "temperature": 0.0, "avg_logprob": -0.2230823241084455, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.009694903157651424}, {"id": 4, "seek": 2668, "start": 32.4, "end": 44.480000000000004, "text": " So what is Sequoia PGP? Say an open PGP implementation. And you can see here this is our GitLab site", "tokens": [50650, 407, 437, 307, 46859, 78, 654, 40975, 47, 30, 6463, 364, 1269, 40975, 47, 11420, 13, 400, 291, 393, 536, 510, 341, 307, 527, 16939, 37880, 3621, 51254], "temperature": 0.0, "avg_logprob": -0.2230823241084455, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.009694903157651424}, {"id": 5, "seek": 2668, "start": 44.480000000000004, "end": 51.519999999999996, "text": " and we have a number of projects. And what is this open PGP thing? Well it's an IETF standard.", "tokens": [51254, 293, 321, 362, 257, 1230, 295, 4455, 13, 400, 437, 307, 341, 1269, 40975, 47, 551, 30, 1042, 309, 311, 364, 286, 4850, 37, 3832, 13, 51606], "temperature": 0.0, "avg_logprob": -0.2230823241084455, "compression_ratio": 1.4416243654822336, "no_speech_prob": 0.009694903157651424}, {"id": 6, "seek": 5152, "start": 51.52, "end": 59.040000000000006, "text": " Go on the internet, you can download it for free. It's derived from PGP which was published in 1991.", "tokens": [50364, 1037, 322, 264, 4705, 11, 291, 393, 5484, 309, 337, 1737, 13, 467, 311, 18949, 490, 40975, 47, 597, 390, 6572, 294, 24097, 13, 50740], "temperature": 0.0, "avg_logprob": -0.17629560894436305, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.03303210437297821}, {"id": 7, "seek": 5152, "start": 59.040000000000006, "end": 68.16, "text": " The first version of the standard was published in 1996 and work is still ongoing. The next version", "tokens": [50740, 440, 700, 3037, 295, 264, 3832, 390, 6572, 294, 22690, 293, 589, 307, 920, 10452, 13, 440, 958, 3037, 51196], "temperature": 0.0, "avg_logprob": -0.17629560894436305, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.03303210437297821}, {"id": 8, "seek": 5152, "start": 68.16, "end": 74.64, "text": " of the standard is expected this year. It's currently in working group last call. And the", "tokens": [51196, 295, 264, 3832, 307, 5176, 341, 1064, 13, 467, 311, 4362, 294, 1364, 1594, 1036, 818, 13, 400, 264, 51520], "temperature": 0.0, "avg_logprob": -0.17629560894436305, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.03303210437297821}, {"id": 9, "seek": 5152, "start": 74.64, "end": 80.4, "text": " standard defines the wire format. So how messages look, how certificates look. It talks about", "tokens": [51520, 3832, 23122, 264, 6234, 7877, 13, 407, 577, 7897, 574, 11, 577, 32941, 574, 13, 467, 6686, 466, 51808], "temperature": 0.0, "avg_logprob": -0.17629560894436305, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.03303210437297821}, {"id": 10, "seek": 8040, "start": 80.44000000000001, "end": 86.24000000000001, "text": " algorithms like encryption and decryption and how signing and verification work. And it also", "tokens": [50366, 14642, 411, 29575, 293, 979, 627, 1695, 293, 577, 13393, 293, 30206, 589, 13, 400, 309, 611, 50656], "temperature": 0.0, "avg_logprob": -0.14914196124975232, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.00445356173440814}, {"id": 11, "seek": 8040, "start": 86.24000000000001, "end": 96.04, "text": " defines importantly a PKI, a public key infrastructure. But it's not an implementation. Sequoia is an", "tokens": [50656, 23122, 8906, 257, 430, 27731, 11, 257, 1908, 2141, 6896, 13, 583, 309, 311, 406, 364, 11420, 13, 46859, 78, 654, 307, 364, 51146], "temperature": 0.0, "avg_logprob": -0.14914196124975232, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.00445356173440814}, {"id": 12, "seek": 8040, "start": 96.04, "end": 104.0, "text": " implementation. And it's not just an implementation of the spec. It's a whole number of services and", "tokens": [51146, 11420, 13, 400, 309, 311, 406, 445, 364, 11420, 295, 264, 1608, 13, 467, 311, 257, 1379, 1230, 295, 3328, 293, 51544], "temperature": 0.0, "avg_logprob": -0.14914196124975232, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.00445356173440814}, {"id": 13, "seek": 10400, "start": 104.04, "end": 114.72, "text": " tooling and applications on top. And for those of you who've used open PGP, it's also a paradigm shift.", "tokens": [50366, 46593, 293, 5821, 322, 1192, 13, 400, 337, 729, 295, 291, 567, 600, 1143, 1269, 40975, 47, 11, 309, 311, 611, 257, 24709, 5513, 13, 50900], "temperature": 0.0, "avg_logprob": -0.18735606949050704, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.038199275732040405}, {"id": 14, "seek": 10400, "start": 114.72, "end": 121.72, "text": " We've looked at the way things have worked in the past and we have some new ideas about how maybe", "tokens": [50900, 492, 600, 2956, 412, 264, 636, 721, 362, 2732, 294, 264, 1791, 293, 321, 362, 512, 777, 3487, 466, 577, 1310, 51250], "temperature": 0.0, "avg_logprob": -0.18735606949050704, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.038199275732040405}, {"id": 15, "seek": 10400, "start": 121.72, "end": 129.0, "text": " they can work better at least for some people. Sequoia's technical goals are to be a library-first", "tokens": [51250, 436, 393, 589, 1101, 412, 1935, 337, 512, 561, 13, 46859, 78, 654, 311, 6191, 5493, 366, 281, 312, 257, 6405, 12, 29581, 51614], "temperature": 0.0, "avg_logprob": -0.18735606949050704, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.038199275732040405}, {"id": 16, "seek": 12900, "start": 129.16, "end": 136.08, "text": " architecture. So not a command line tool where a library calls the command line tool, but really the", "tokens": [50372, 9482, 13, 407, 406, 257, 5622, 1622, 2290, 689, 257, 6405, 5498, 264, 5622, 1622, 2290, 11, 457, 534, 264, 50718], "temperature": 0.0, "avg_logprob": -0.1327264658610026, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.054634664207696915}, {"id": 17, "seek": 12900, "start": 136.08, "end": 143.16, "text": " library is the source of truth. It's the most powerful thing. We have unopinionated low-level", "tokens": [50718, 6405, 307, 264, 4009, 295, 3494, 13, 467, 311, 264, 881, 4005, 551, 13, 492, 362, 517, 404, 259, 313, 770, 2295, 12, 12418, 51072], "temperature": 0.0, "avg_logprob": -0.1327264658610026, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.054634664207696915}, {"id": 18, "seek": 12900, "start": 143.16, "end": 153.56, "text": " interfaces that are safe by default. That means that you can do a lot of things. You can do a lot", "tokens": [51072, 28416, 300, 366, 3273, 538, 7576, 13, 663, 1355, 300, 291, 393, 360, 257, 688, 295, 721, 13, 509, 393, 360, 257, 688, 51592], "temperature": 0.0, "avg_logprob": -0.1327264658610026, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.054634664207696915}, {"id": 19, "seek": 15356, "start": 153.56, "end": 159.32, "text": " of stupid things. But what we really tried to do on our API is to make sure that the easy way to do", "tokens": [50364, 295, 6631, 721, 13, 583, 437, 321, 534, 3031, 281, 360, 322, 527, 9362, 307, 281, 652, 988, 300, 264, 1858, 636, 281, 360, 50652], "temperature": 0.0, "avg_logprob": -0.13190647086711846, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.011130272410809994}, {"id": 20, "seek": 15356, "start": 159.32, "end": 167.16, "text": " something is the safe way. Of course, low-level interfaces are hard to use. And so we provide high-", "tokens": [50652, 746, 307, 264, 3273, 636, 13, 2720, 1164, 11, 2295, 12, 12418, 28416, 366, 1152, 281, 764, 13, 400, 370, 321, 2893, 1090, 12, 51044], "temperature": 0.0, "avg_logprob": -0.13190647086711846, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.011130272410809994}, {"id": 21, "seek": 15356, "start": 167.16, "end": 173.28, "text": " level interfaces. And these high-level interfaces are necessarily opinionated. And what do you do when", "tokens": [51044, 1496, 28416, 13, 400, 613, 1090, 12, 12418, 28416, 366, 4725, 4800, 770, 13, 400, 437, 360, 291, 360, 562, 51350], "temperature": 0.0, "avg_logprob": -0.13190647086711846, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.011130272410809994}, {"id": 22, "seek": 15356, "start": 173.28, "end": 179.16, "text": " the opinion doesn't match what you need? Well, you can either completely switch to the low-level", "tokens": [51350, 264, 4800, 1177, 380, 2995, 437, 291, 643, 30, 1042, 11, 291, 393, 2139, 2584, 3679, 281, 264, 2295, 12, 12418, 51644], "temperature": 0.0, "avg_logprob": -0.13190647086711846, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.011130272410809994}, {"id": 23, "seek": 17916, "start": 179.2, "end": 186.16, "text": " interface, which is inconvenient. What we've tried to do is to make our interfaces gradual so it's", "tokens": [50366, 9226, 11, 597, 307, 46196, 13, 708, 321, 600, 3031, 281, 360, 307, 281, 652, 527, 28416, 32890, 370, 309, 311, 50714], "temperature": 0.0, "avg_logprob": -0.16168218556016978, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.006576460786163807}, {"id": 24, "seek": 17916, "start": 186.16, "end": 193.24, "text": " possible to mix low-level data structures with high-level data structures. And we've also designed", "tokens": [50714, 1944, 281, 2890, 2295, 12, 12418, 1412, 9227, 365, 1090, 12, 12418, 1412, 9227, 13, 400, 321, 600, 611, 4761, 51068], "temperature": 0.0, "avg_logprob": -0.16168218556016978, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.006576460786163807}, {"id": 25, "seek": 17916, "start": 193.24, "end": 200.64, "text": " Sequoia that the services are optional. And I'll get to what that means later. But what was the", "tokens": [51068, 46859, 78, 654, 300, 264, 3328, 366, 17312, 13, 400, 286, 603, 483, 281, 437, 300, 1355, 1780, 13, 583, 437, 390, 264, 51438], "temperature": 0.0, "avg_logprob": -0.16168218556016978, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.006576460786163807}, {"id": 26, "seek": 17916, "start": 200.64, "end": 207.8, "text": " motivation for building Sequoia PGP? Sure, most of you have heard about it. It's existed for, I think,", "tokens": [51438, 12335, 337, 2390, 46859, 78, 654, 40975, 47, 30, 4894, 11, 881, 295, 291, 362, 2198, 466, 309, 13, 467, 311, 13135, 337, 11, 286, 519, 11, 51796], "temperature": 0.0, "avg_logprob": -0.16168218556016978, "compression_ratio": 1.5776892430278884, "no_speech_prob": 0.006576460786163807}, {"id": 27, "seek": 20780, "start": 207.84, "end": 215.64000000000001, "text": " 23 years. And we've talked to people. And we heard some complaints from some users. I don't want to", "tokens": [50366, 6673, 924, 13, 400, 321, 600, 2825, 281, 561, 13, 400, 321, 2198, 512, 19585, 490, 512, 5022, 13, 286, 500, 380, 528, 281, 50756], "temperature": 0.0, "avg_logprob": -0.13321625183675892, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.012769855558872223}, {"id": 28, "seek": 20780, "start": 215.64000000000001, "end": 222.32000000000002, "text": " say all users, but certainly some users. And as we all know, the people who have something negative", "tokens": [50756, 584, 439, 5022, 11, 457, 3297, 512, 5022, 13, 400, 382, 321, 439, 458, 11, 264, 561, 567, 362, 746, 3671, 51090], "temperature": 0.0, "avg_logprob": -0.13321625183675892, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.012769855558872223}, {"id": 29, "seek": 20780, "start": 222.32000000000002, "end": 226.76000000000002, "text": " to say tend to be the loudest. So I don't want to say that as a representative sample. But what we", "tokens": [51090, 281, 584, 3928, 281, 312, 264, 6588, 377, 13, 407, 286, 500, 380, 528, 281, 584, 300, 382, 257, 12424, 6889, 13, 583, 437, 321, 51312], "temperature": 0.0, "avg_logprob": -0.13321625183675892, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.012769855558872223}, {"id": 30, "seek": 20780, "start": 226.76000000000002, "end": 233.68, "text": " heard was that the CLI was hard to use. And that the CLI-first approach that GNU PG takes, where you", "tokens": [51312, 2198, 390, 300, 264, 12855, 40, 390, 1152, 281, 764, 13, 400, 300, 264, 12855, 40, 12, 29581, 3109, 300, 46411, 52, 40975, 2516, 11, 689, 291, 51658], "temperature": 0.0, "avg_logprob": -0.13321625183675892, "compression_ratio": 1.7198275862068966, "no_speech_prob": 0.012769855558872223}, {"id": 31, "seek": 23368, "start": 233.72, "end": 242.20000000000002, "text": " have GPGME, which is a library that calls out to the CLI binary, it's brittle. We heard that the APIs", "tokens": [50366, 362, 26039, 38, 15454, 11, 597, 307, 257, 6405, 300, 5498, 484, 281, 264, 12855, 40, 17434, 11, 309, 311, 49325, 13, 492, 2198, 300, 264, 21445, 50790], "temperature": 0.0, "avg_logprob": -0.12202856378647887, "compression_ratio": 1.5369649805447472, "no_speech_prob": 0.008960289880633354}, {"id": 32, "seek": 23368, "start": 242.20000000000002, "end": 247.72, "text": " are too opinionated. And sometimes you want to do something and it almost matches what GNU PG", "tokens": [50790, 366, 886, 4800, 770, 13, 400, 2171, 291, 528, 281, 360, 746, 293, 309, 1920, 10676, 437, 46411, 52, 40975, 51066], "temperature": 0.0, "avg_logprob": -0.12202856378647887, "compression_ratio": 1.5369649805447472, "no_speech_prob": 0.008960289880633354}, {"id": 33, "seek": 23368, "start": 247.72, "end": 253.84, "text": " expects, but not quite. And then you have to write a lot of code in order to work around it. People", "tokens": [51066, 33280, 11, 457, 406, 1596, 13, 400, 550, 291, 362, 281, 2464, 257, 688, 295, 3089, 294, 1668, 281, 589, 926, 309, 13, 3432, 51372], "temperature": 0.0, "avg_logprob": -0.12202856378647887, "compression_ratio": 1.5369649805447472, "no_speech_prob": 0.008960289880633354}, {"id": 34, "seek": 23368, "start": 253.84, "end": 259.48, "text": " didn't like that the services are mandatory and the scalability wasn't so good. And I'm not talking", "tokens": [51372, 994, 380, 411, 300, 264, 3328, 366, 22173, 293, 264, 15664, 2310, 2067, 380, 370, 665, 13, 400, 286, 478, 406, 1417, 51654], "temperature": 0.0, "avg_logprob": -0.12202856378647887, "compression_ratio": 1.5369649805447472, "no_speech_prob": 0.008960289880633354}, {"id": 35, "seek": 25948, "start": 259.52000000000004, "end": 264.76, "text": " about internet scalability. I'm just talking about individual user who has a few thousand certificates", "tokens": [50366, 466, 4705, 15664, 2310, 13, 286, 478, 445, 1417, 466, 2609, 4195, 567, 575, 257, 1326, 4714, 32941, 50628], "temperature": 0.0, "avg_logprob": -0.1311277202937914, "compression_ratio": 1.5992063492063493, "no_speech_prob": 0.016796978190541267}, {"id": 36, "seek": 25948, "start": 264.76, "end": 270.76, "text": " locally. Operations just take too long. So that's sort of the negative motivation, but there was also", "tokens": [50628, 16143, 13, 36381, 445, 747, 886, 938, 13, 407, 300, 311, 1333, 295, 264, 3671, 12335, 11, 457, 456, 390, 611, 50928], "temperature": 0.0, "avg_logprob": -0.1311277202937914, "compression_ratio": 1.5992063492063493, "no_speech_prob": 0.016796978190541267}, {"id": 37, "seek": 25948, "start": 270.76, "end": 279.96000000000004, "text": " positive motivation. If you go out onto YouTube and you look at the GNU PG channel, there are a", "tokens": [50928, 3353, 12335, 13, 759, 291, 352, 484, 3911, 3088, 293, 291, 574, 412, 264, 46411, 52, 40975, 2269, 11, 456, 366, 257, 51388], "temperature": 0.0, "avg_logprob": -0.1311277202937914, "compression_ratio": 1.5992063492063493, "no_speech_prob": 0.016796978190541267}, {"id": 38, "seek": 25948, "start": 279.96000000000004, "end": 287.6, "text": " number of interviews called the GNU PG stories. And there are a lot of people from different projects,", "tokens": [51388, 1230, 295, 12318, 1219, 264, 46411, 52, 40975, 3676, 13, 400, 456, 366, 257, 688, 295, 561, 490, 819, 4455, 11, 51770], "temperature": 0.0, "avg_logprob": -0.1311277202937914, "compression_ratio": 1.5992063492063493, "no_speech_prob": 0.016796978190541267}, {"id": 39, "seek": 28760, "start": 287.64000000000004, "end": 296.28000000000003, "text": " the EFF, the ACLU from OCCRP, from newspapers and reporters and reporters without borders and", "tokens": [50366, 264, 462, 6345, 11, 264, 43873, 52, 490, 422, 11717, 28516, 11, 490, 20781, 293, 26249, 293, 26249, 1553, 16287, 293, 50798], "temperature": 0.0, "avg_logprob": -0.12916237242678377, "compression_ratio": 1.538152610441767, "no_speech_prob": 0.009806497022509575}, {"id": 40, "seek": 28760, "start": 296.28000000000003, "end": 303.44, "text": " activists. And there's a common theme that they all were repeating. We use a lot of different", "tokens": [50798, 23042, 13, 400, 456, 311, 257, 2689, 6314, 300, 436, 439, 645, 18617, 13, 492, 764, 257, 688, 295, 819, 51156], "temperature": 0.0, "avg_logprob": -0.12916237242678377, "compression_ratio": 1.538152610441767, "no_speech_prob": 0.009806497022509575}, {"id": 41, "seek": 28760, "start": 303.44, "end": 309.36, "text": " encryption technologies, but probably none more important than GPG. And the question that we had", "tokens": [51156, 29575, 7943, 11, 457, 1391, 6022, 544, 1021, 813, 26039, 38, 13, 400, 264, 1168, 300, 321, 632, 51452], "temperature": 0.0, "avg_logprob": -0.12916237242678377, "compression_ratio": 1.538152610441767, "no_speech_prob": 0.009806497022509575}, {"id": 42, "seek": 28760, "start": 309.36, "end": 316.16, "text": " was, you know, can we do better? We were inspired by this. So I want to take another step back and", "tokens": [51452, 390, 11, 291, 458, 11, 393, 321, 360, 1101, 30, 492, 645, 7547, 538, 341, 13, 407, 286, 528, 281, 747, 1071, 1823, 646, 293, 51792], "temperature": 0.0, "avg_logprob": -0.12916237242678377, "compression_ratio": 1.538152610441767, "no_speech_prob": 0.009806497022509575}, {"id": 43, "seek": 31616, "start": 316.20000000000005, "end": 323.72, "text": " talk about Sequoia's sort of prehistory. So Sequoia was started in 2017, but before that, the people", "tokens": [50366, 751, 466, 46859, 78, 654, 311, 1333, 295, 659, 33236, 827, 13, 407, 46859, 78, 654, 390, 1409, 294, 6591, 11, 457, 949, 300, 11, 264, 561, 50742], "temperature": 0.0, "avg_logprob": -0.17140672825000905, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.006779356859624386}, {"id": 44, "seek": 31616, "start": 323.72, "end": 331.04, "text": " who started it that was used as Kai and I, we worked on GNU PG. And while we worked on GNU PG,", "tokens": [50742, 567, 1409, 309, 300, 390, 1143, 382, 20753, 293, 286, 11, 321, 2732, 322, 46411, 52, 40975, 13, 400, 1339, 321, 2732, 322, 46411, 52, 40975, 11, 51108], "temperature": 0.0, "avg_logprob": -0.17140672825000905, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.006779356859624386}, {"id": 45, "seek": 31616, "start": 331.04, "end": 338.64000000000004, "text": " of course, we worked with code. We talked to people who were using GNU PG as in developers. And we", "tokens": [51108, 295, 1164, 11, 321, 2732, 365, 3089, 13, 492, 2825, 281, 561, 567, 645, 1228, 46411, 52, 40975, 382, 294, 8849, 13, 400, 321, 51488], "temperature": 0.0, "avg_logprob": -0.17140672825000905, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.006779356859624386}, {"id": 46, "seek": 31616, "start": 338.64000000000004, "end": 344.24, "text": " also talked to end users. And we had ideas about how to change things because we had these conversations", "tokens": [51488, 611, 2825, 281, 917, 5022, 13, 400, 321, 632, 3487, 466, 577, 281, 1319, 721, 570, 321, 632, 613, 7315, 51768], "temperature": 0.0, "avg_logprob": -0.17140672825000905, "compression_ratio": 1.6978723404255318, "no_speech_prob": 0.006779356859624386}, {"id": 47, "seek": 34424, "start": 344.24, "end": 351.96000000000004, "text": " where people were telling us things that they were unhappy with. And we had many technical", "tokens": [50364, 689, 561, 645, 3585, 505, 721, 300, 436, 645, 22172, 365, 13, 400, 321, 632, 867, 6191, 50750], "temperature": 0.0, "avg_logprob": -0.09055887097897737, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0017468526493757963}, {"id": 48, "seek": 34424, "start": 351.96000000000004, "end": 359.96000000000004, "text": " conversations with Werner. Werner is the main author of GNU PG. And we couldn't converge on a", "tokens": [50750, 7315, 365, 14255, 1193, 13, 14255, 1193, 307, 264, 2135, 3793, 295, 46411, 52, 40975, 13, 400, 321, 2809, 380, 41881, 322, 257, 51150], "temperature": 0.0, "avg_logprob": -0.09055887097897737, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0017468526493757963}, {"id": 49, "seek": 34424, "start": 359.96000000000004, "end": 368.36, "text": " vision. And so we had this conflict in the room. Werner wanted to go in one direction. The three of", "tokens": [51150, 5201, 13, 400, 370, 321, 632, 341, 6596, 294, 264, 1808, 13, 14255, 1193, 1415, 281, 352, 294, 472, 3513, 13, 440, 1045, 295, 51570], "temperature": 0.0, "avg_logprob": -0.09055887097897737, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0017468526493757963}, {"id": 50, "seek": 34424, "start": 368.36, "end": 374.0, "text": " us wanted to go in a different direction. Should we continue with the established approach? Should", "tokens": [51570, 505, 1415, 281, 352, 294, 257, 819, 3513, 13, 6454, 321, 2354, 365, 264, 7545, 3109, 30, 6454, 51852], "temperature": 0.0, "avg_logprob": -0.09055887097897737, "compression_ratio": 1.7098214285714286, "no_speech_prob": 0.0017468526493757963}, {"id": 51, "seek": 37400, "start": 374.04, "end": 384.96, "text": " we pursue the Sequoia vision? What does a compromise look like? And sometimes a compromise just isn't", "tokens": [50366, 321, 12392, 264, 46859, 78, 654, 5201, 30, 708, 775, 257, 18577, 574, 411, 30, 400, 2171, 257, 18577, 445, 1943, 380, 50912], "temperature": 0.0, "avg_logprob": -0.1555324348748899, "compression_ratio": 1.463235294117647, "no_speech_prob": 0.0019529227865859866}, {"id": 52, "seek": 37400, "start": 384.96, "end": 396.48, "text": " possible. And what do you do in that case? Is one person win and dominate? And sometimes that's a", "tokens": [50912, 1944, 13, 400, 437, 360, 291, 360, 294, 300, 1389, 30, 1119, 472, 954, 1942, 293, 28246, 30, 400, 2171, 300, 311, 257, 51488], "temperature": 0.0, "avg_logprob": -0.1555324348748899, "compression_ratio": 1.463235294117647, "no_speech_prob": 0.0019529227865859866}, {"id": 53, "seek": 39648, "start": 396.48, "end": 404.48, "text": " solution. In this case, we chose to part ways. And I think that's a perfectly okay thing to do.", "tokens": [50364, 3827, 13, 682, 341, 1389, 11, 321, 5111, 281, 644, 2098, 13, 400, 286, 519, 300, 311, 257, 6239, 1392, 551, 281, 360, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1409637451171875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.3120741546154022}, {"id": 54, "seek": 39648, "start": 404.48, "end": 412.92, "text": " Werner had a vision. We had a vision. We didn't demand that Werner changed his vision. We left and", "tokens": [50764, 14255, 1193, 632, 257, 5201, 13, 492, 632, 257, 5201, 13, 492, 994, 380, 4733, 300, 14255, 1193, 3105, 702, 5201, 13, 492, 1411, 293, 51186], "temperature": 0.0, "avg_logprob": -0.1409637451171875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.3120741546154022}, {"id": 55, "seek": 39648, "start": 412.92, "end": 420.44, "text": " we started a new project where we wanted to experiment and see if we could solve these problems", "tokens": [51186, 321, 1409, 257, 777, 1716, 689, 321, 1415, 281, 5120, 293, 536, 498, 321, 727, 5039, 613, 2740, 51562], "temperature": 0.0, "avg_logprob": -0.1409637451171875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.3120741546154022}, {"id": 56, "seek": 42044, "start": 420.52, "end": 430.16, "text": " that we had recognized. And what happens when you have two projects? Do you split the users? Do we", "tokens": [50368, 300, 321, 632, 9823, 13, 400, 437, 2314, 562, 291, 362, 732, 4455, 30, 1144, 291, 7472, 264, 5022, 30, 1144, 321, 50850], "temperature": 0.0, "avg_logprob": -0.14140440117229114, "compression_ratio": 1.5828877005347595, "no_speech_prob": 0.03768685832619667}, {"id": 57, "seek": 42044, "start": 430.16, "end": 436.0, "text": " have a small number or a big number of GNU PG users and all of a sudden half of them go to GNU PG", "tokens": [50850, 362, 257, 1359, 1230, 420, 257, 955, 1230, 295, 46411, 52, 40975, 5022, 293, 439, 295, 257, 3990, 1922, 295, 552, 352, 281, 46411, 52, 40975, 51142], "temperature": 0.0, "avg_logprob": -0.14140440117229114, "compression_ratio": 1.5828877005347595, "no_speech_prob": 0.03768685832619667}, {"id": 58, "seek": 42044, "start": 436.0, "end": 445.08, "text": " and half of them go to Sequoia or 10% go to Sequoia and 90% to GNU PG? It could happen. But I think", "tokens": [51142, 293, 1922, 295, 552, 352, 281, 46859, 78, 654, 420, 1266, 4, 352, 281, 46859, 78, 654, 293, 4289, 4, 281, 46411, 52, 40975, 30, 467, 727, 1051, 13, 583, 286, 519, 51596], "temperature": 0.0, "avg_logprob": -0.14140440117229114, "compression_ratio": 1.5828877005347595, "no_speech_prob": 0.03768685832619667}, {"id": 59, "seek": 44508, "start": 445.15999999999997, "end": 452.03999999999996, "text": " that's a pessimistic view of the possibilities. I don't think that has to be that way. Because it's", "tokens": [50368, 300, 311, 257, 37399, 3142, 1910, 295, 264, 12178, 13, 286, 500, 380, 519, 300, 575, 281, 312, 300, 636, 13, 1436, 309, 311, 50712], "temperature": 0.0, "avg_logprob": -0.14672965219576065, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.0400984026491642}, {"id": 60, "seek": 44508, "start": 452.03999999999996, "end": 456.84, "text": " not just about the GNU PG users. They're all of these non-users out there who are not using", "tokens": [50712, 406, 445, 466, 264, 46411, 52, 40975, 5022, 13, 814, 434, 439, 295, 613, 2107, 12, 301, 433, 484, 456, 567, 366, 406, 1228, 50952], "temperature": 0.0, "avg_logprob": -0.14672965219576065, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.0400984026491642}, {"id": 61, "seek": 44508, "start": 456.84, "end": 468.44, "text": " encryption technology. We wanted to offer more choice for users. We wanted to explore different", "tokens": [50952, 29575, 2899, 13, 492, 1415, 281, 2626, 544, 3922, 337, 5022, 13, 492, 1415, 281, 6839, 819, 51532], "temperature": 0.0, "avg_logprob": -0.14672965219576065, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.0400984026491642}, {"id": 62, "seek": 46844, "start": 468.52, "end": 478.92, "text": " options and see if the users out there or non-users could be served by this new paradigm. There's a", "tokens": [50368, 3956, 293, 536, 498, 264, 5022, 484, 456, 420, 2107, 12, 301, 433, 727, 312, 7584, 538, 341, 777, 24709, 13, 821, 311, 257, 50888], "temperature": 0.0, "avg_logprob": -0.16729625253116384, "compression_ratio": 1.7183908045977012, "no_speech_prob": 0.04200173541903496}, {"id": 63, "seek": 46844, "start": 478.92, "end": 488.2, "text": " diversity of needs. We wanted to in particular win over non-users. And the great thing is that there", "tokens": [50888, 8811, 295, 2203, 13, 492, 1415, 281, 294, 1729, 1942, 670, 2107, 12, 301, 433, 13, 400, 264, 869, 551, 307, 300, 456, 51352], "temperature": 0.0, "avg_logprob": -0.16729625253116384, "compression_ratio": 1.7183908045977012, "no_speech_prob": 0.04200173541903496}, {"id": 64, "seek": 46844, "start": 488.2, "end": 494.96, "text": " are a lot of non-users or maybe that's a sad thing but there are a lot of non-users. And we have a", "tokens": [51352, 366, 257, 688, 295, 2107, 12, 301, 433, 420, 1310, 300, 311, 257, 4227, 551, 457, 456, 366, 257, 688, 295, 2107, 12, 301, 433, 13, 400, 321, 362, 257, 51690], "temperature": 0.0, "avg_logprob": -0.16729625253116384, "compression_ratio": 1.7183908045977012, "no_speech_prob": 0.04200173541903496}, {"id": 65, "seek": 49496, "start": 495.0, "end": 505.03999999999996, "text": " protocol. OpenPGP. It's interoperable. Can the network effects help? More implementations, more", "tokens": [50366, 10336, 13, 7238, 47, 38, 47, 13, 467, 311, 728, 7192, 712, 13, 1664, 264, 3209, 5065, 854, 30, 5048, 4445, 763, 11, 544, 50868], "temperature": 0.0, "avg_logprob": -0.1648399646465595, "compression_ratio": 1.467005076142132, "no_speech_prob": 0.011477985419332981}, {"id": 66, "seek": 49496, "start": 505.03999999999996, "end": 513.0799999999999, "text": " users, more network effects? In this view of the world, the ecosystem wins. There is more privacy", "tokens": [50868, 5022, 11, 544, 3209, 5065, 30, 682, 341, 1910, 295, 264, 1002, 11, 264, 11311, 10641, 13, 821, 307, 544, 11427, 51270], "temperature": 0.0, "avg_logprob": -0.1648399646465595, "compression_ratio": 1.467005076142132, "no_speech_prob": 0.011477985419332981}, {"id": 67, "seek": 49496, "start": 513.0799999999999, "end": 520.96, "text": " and there's more security. And at this point I want to have an ode to Werner. So Sequoia really", "tokens": [51270, 293, 456, 311, 544, 3825, 13, 400, 412, 341, 935, 286, 528, 281, 362, 364, 45711, 281, 14255, 1193, 13, 407, 46859, 78, 654, 534, 51664], "temperature": 0.0, "avg_logprob": -0.1648399646465595, "compression_ratio": 1.467005076142132, "no_speech_prob": 0.011477985419332981}, {"id": 68, "seek": 52096, "start": 520.96, "end": 529.0400000000001, "text": " owes its existence to Werner. He was an inspiration to make GNU PG better. He was our inspiration to", "tokens": [50364, 50028, 1080, 9123, 281, 14255, 1193, 13, 634, 390, 364, 10249, 281, 652, 46411, 52, 40975, 1101, 13, 634, 390, 527, 10249, 281, 50768], "temperature": 0.0, "avg_logprob": -0.1489511772438332, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.049748171120882034}, {"id": 69, "seek": 52096, "start": 529.0400000000001, "end": 538.8000000000001, "text": " work on cryptography and defend privacy. And if Yusis Kai and I are Sequoia's parents, then it's", "tokens": [50768, 589, 322, 9844, 5820, 293, 8602, 11427, 13, 400, 498, 398, 301, 271, 20753, 293, 286, 366, 46859, 78, 654, 311, 3152, 11, 550, 309, 311, 51256], "temperature": 0.0, "avg_logprob": -0.1489511772438332, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.049748171120882034}, {"id": 70, "seek": 52096, "start": 538.8000000000001, "end": 548.88, "text": " not far to say that Werner is absolutely Sequoia's grandfather. And it turns out that it's not just", "tokens": [51256, 406, 1400, 281, 584, 300, 14255, 1193, 307, 3122, 46859, 78, 654, 311, 14754, 13, 400, 309, 4523, 484, 300, 309, 311, 406, 445, 51760], "temperature": 0.0, "avg_logprob": -0.1489511772438332, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.049748171120882034}, {"id": 71, "seek": 54888, "start": 548.96, "end": 557.6, "text": " two implementations. There are many implementations. There's OpenPGP for go, OpenPGP.js, PG painless,", "tokens": [50368, 732, 4445, 763, 13, 821, 366, 867, 4445, 763, 13, 821, 311, 7238, 47, 38, 47, 337, 352, 11, 7238, 47, 38, 47, 13, 25530, 11, 40975, 1822, 1832, 11, 50800], "temperature": 0.0, "avg_logprob": -0.2393942962993275, "compression_ratio": 1.6464088397790055, "no_speech_prob": 0.030134115368127823}, {"id": 72, "seek": 54888, "start": 557.6, "end": 568.36, "text": " PG pi, R&P, RPGP and Sequoia. And these are just the free software implementations that are relatively", "tokens": [50800, 40975, 3895, 11, 497, 5, 47, 11, 497, 47, 38, 47, 293, 46859, 78, 654, 13, 400, 613, 366, 445, 264, 1737, 4722, 4445, 763, 300, 366, 7226, 51338], "temperature": 0.0, "avg_logprob": -0.2393942962993275, "compression_ratio": 1.6464088397790055, "no_speech_prob": 0.030134115368127823}, {"id": 73, "seek": 54888, "start": 568.36, "end": 577.32, "text": " big. And if you have all of these implementations out there, how do they work together? Well,", "tokens": [51338, 955, 13, 400, 498, 291, 362, 439, 295, 613, 4445, 763, 484, 456, 11, 577, 360, 436, 589, 1214, 30, 1042, 11, 51786], "temperature": 0.0, "avg_logprob": -0.2393942962993275, "compression_ratio": 1.6464088397790055, "no_speech_prob": 0.030134115368127823}, {"id": 74, "seek": 57732, "start": 577.36, "end": 584.0400000000001, "text": " yeah, we have this standard, but we have to ensure interoperability. And ensuring interoperability", "tokens": [50366, 1338, 11, 321, 362, 341, 3832, 11, 457, 321, 362, 281, 5586, 728, 7192, 2310, 13, 400, 16882, 728, 7192, 2310, 50700], "temperature": 0.0, "avg_logprob": -0.13465568970660774, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.010621831752359867}, {"id": 75, "seek": 57732, "start": 584.0400000000001, "end": 589.24, "text": " prevents vendor lock-in and improves the network effects for everyone. And for this, a standard is", "tokens": [50700, 22367, 24321, 4017, 12, 259, 293, 24771, 264, 3209, 5065, 337, 1518, 13, 400, 337, 341, 11, 257, 3832, 307, 50960], "temperature": 0.0, "avg_logprob": -0.13465568970660774, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.010621831752359867}, {"id": 76, "seek": 57732, "start": 589.24, "end": 595.9200000000001, "text": " not enough. We need more. We need an OpenPGP interoperability test suite. And this was one of", "tokens": [50960, 406, 1547, 13, 492, 643, 544, 13, 492, 643, 364, 7238, 47, 38, 47, 728, 7192, 2310, 1500, 14205, 13, 400, 341, 390, 472, 295, 51294], "temperature": 0.0, "avg_logprob": -0.13465568970660774, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.010621831752359867}, {"id": 77, "seek": 57732, "start": 595.9200000000001, "end": 602.6400000000001, "text": " the first things that we actually worked on. And it currently has 131 tests and over 1,500 test", "tokens": [51294, 264, 700, 721, 300, 321, 767, 2732, 322, 13, 400, 309, 4362, 575, 3705, 16, 6921, 293, 670, 502, 11, 7526, 1500, 51630], "temperature": 0.0, "avg_logprob": -0.13465568970660774, "compression_ratio": 1.682608695652174, "no_speech_prob": 0.010621831752359867}, {"id": 78, "seek": 60264, "start": 602.68, "end": 610.36, "text": " vectors. And here you can see a snapshot. You can see that most implementations are tested.", "tokens": [50366, 18875, 13, 400, 510, 291, 393, 536, 257, 30163, 13, 509, 393, 536, 300, 881, 4445, 763, 366, 8246, 13, 50750], "temperature": 0.0, "avg_logprob": -0.18566860755284628, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.008823184296488762}, {"id": 79, "seek": 60264, "start": 610.36, "end": 616.1999999999999, "text": " Currently, there's one implementation that I mentioned that's not there, which is RPGP. But", "tokens": [50750, 19964, 11, 456, 311, 472, 11420, 300, 286, 2835, 300, 311, 406, 456, 11, 597, 307, 497, 47, 38, 47, 13, 583, 51042], "temperature": 0.0, "avg_logprob": -0.18566860755284628, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.008823184296488762}, {"id": 80, "seek": 60264, "start": 616.1999999999999, "end": 621.96, "text": " thank you to Heiko, a former Sequoia developer. He's currently adding support for RPGP.", "tokens": [51042, 1309, 291, 281, 634, 10770, 11, 257, 5819, 46859, 78, 654, 10754, 13, 634, 311, 4362, 5127, 1406, 337, 497, 47, 38, 47, 13, 51330], "temperature": 0.0, "avg_logprob": -0.18566860755284628, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.008823184296488762}, {"id": 81, "seek": 60264, "start": 621.96, "end": 628.2, "text": " All right, now I want to switch gears a bit and talk about the design and implementation of the", "tokens": [51330, 1057, 558, 11, 586, 286, 528, 281, 3679, 20915, 257, 857, 293, 751, 466, 264, 1715, 293, 11420, 295, 264, 51642], "temperature": 0.0, "avg_logprob": -0.18566860755284628, "compression_ratio": 1.6026200873362446, "no_speech_prob": 0.008823184296488762}, {"id": 82, "seek": 62820, "start": 628.6, "end": 636.72, "text": " library or the low-level components. So this Sequoia's architecture, what does it look like? I", "tokens": [50384, 6405, 420, 264, 2295, 12, 12418, 6677, 13, 407, 341, 46859, 78, 654, 311, 9482, 11, 437, 775, 309, 574, 411, 30, 286, 50790], "temperature": 0.0, "avg_logprob": -0.1434510192092584, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.012040219269692898}, {"id": 83, "seek": 62820, "start": 636.72, "end": 642.5200000000001, "text": " mentioned before, library-first approach. So applications are built on the library. And on", "tokens": [50790, 2835, 949, 11, 6405, 12, 29581, 3109, 13, 407, 5821, 366, 3094, 322, 264, 6405, 13, 400, 322, 51080], "temperature": 0.0, "avg_logprob": -0.1434510192092584, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.012040219269692898}, {"id": 84, "seek": 62820, "start": 642.5200000000001, "end": 648.36, "text": " top of the library, we have the CLI. The CLI is using the library, and that makes the CLI", "tokens": [51080, 1192, 295, 264, 6405, 11, 321, 362, 264, 12855, 40, 13, 440, 12855, 40, 307, 1228, 264, 6405, 11, 293, 300, 1669, 264, 12855, 40, 51372], "temperature": 0.0, "avg_logprob": -0.1434510192092584, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.012040219269692898}, {"id": 85, "seek": 62820, "start": 648.36, "end": 653.88, "text": " necessarily less powerful than the library. And we think that's okay. If you want to do, if you", "tokens": [51372, 4725, 1570, 4005, 813, 264, 6405, 13, 400, 321, 519, 300, 311, 1392, 13, 759, 291, 528, 281, 360, 11, 498, 291, 51648], "temperature": 0.0, "avg_logprob": -0.1434510192092584, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.012040219269692898}, {"id": 86, "seek": 65388, "start": 653.92, "end": 659.24, "text": " want to program using our CLI, it's possible. If you want to go further, then you're probably in a", "tokens": [50366, 528, 281, 1461, 1228, 527, 12855, 40, 11, 309, 311, 1944, 13, 759, 291, 528, 281, 352, 3052, 11, 550, 291, 434, 1391, 294, 257, 50632], "temperature": 0.0, "avg_logprob": -0.14590344473580333, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0030722294468432665}, {"id": 87, "seek": 65388, "start": 659.24, "end": 665.72, "text": " space where you should be using a library in a high-level language. We have a bunch of high-level", "tokens": [50632, 1901, 689, 291, 820, 312, 1228, 257, 6405, 294, 257, 1090, 12, 12418, 2856, 13, 492, 362, 257, 3840, 295, 1090, 12, 12418, 50956], "temperature": 0.0, "avg_logprob": -0.14590344473580333, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0030722294468432665}, {"id": 88, "seek": 65388, "start": 665.72, "end": 673.36, "text": " components. They're optional. We have services that run as demons, for instance, the key store.", "tokens": [50956, 6677, 13, 814, 434, 17312, 13, 492, 362, 3328, 300, 1190, 382, 19733, 11, 337, 5197, 11, 264, 2141, 3531, 13, 51338], "temperature": 0.0, "avg_logprob": -0.14590344473580333, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0030722294468432665}, {"id": 89, "seek": 65388, "start": 673.36, "end": 681.16, "text": " But it doesn't have to run as a daemon. It can be co-located. Now, the daemon has the advantage", "tokens": [51338, 583, 309, 1177, 380, 362, 281, 1190, 382, 257, 1120, 36228, 13, 467, 393, 312, 598, 12, 5842, 770, 13, 823, 11, 264, 1120, 36228, 575, 264, 5002, 51728], "temperature": 0.0, "avg_logprob": -0.14590344473580333, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.0030722294468432665}, {"id": 90, "seek": 68116, "start": 682.04, "end": 687.3199999999999, "text": " that you have process separation, and this avoids things like heartbleed. It can multiplex resources,", "tokens": [50408, 300, 291, 362, 1399, 14634, 11, 293, 341, 3641, 3742, 721, 411, 1917, 638, 292, 13, 467, 393, 3311, 2021, 3593, 11, 50672], "temperature": 0.0, "avg_logprob": -0.13613846262947457, "compression_ratio": 1.6032786885245902, "no_speech_prob": 0.0016993958270177245}, {"id": 91, "seek": 68116, "start": 687.3199999999999, "end": 692.8399999999999, "text": " it can share state. But it's not always the right solution. And so it's possible to co-locate the", "tokens": [50672, 309, 393, 2073, 1785, 13, 583, 309, 311, 406, 1009, 264, 558, 3827, 13, 400, 370, 309, 311, 1944, 281, 598, 12, 5842, 473, 264, 50948], "temperature": 0.0, "avg_logprob": -0.13613846262947457, "compression_ratio": 1.6032786885245902, "no_speech_prob": 0.0016993958270177245}, {"id": 92, "seek": 68116, "start": 692.8399999999999, "end": 698.76, "text": " service into the application binary in the same address space. And that's good when you need a", "tokens": [50948, 2643, 666, 264, 3861, 17434, 294, 264, 912, 2985, 1901, 13, 400, 300, 311, 665, 562, 291, 643, 257, 51244], "temperature": 0.0, "avg_logprob": -0.13613846262947457, "compression_ratio": 1.6032786885245902, "no_speech_prob": 0.0016993958270177245}, {"id": 93, "seek": 68116, "start": 698.76, "end": 706.12, "text": " restricted environment or you want to fall back in order to increase robustness. Now, I mentioned", "tokens": [51244, 20608, 2823, 420, 291, 528, 281, 2100, 646, 294, 1668, 281, 3488, 13956, 1287, 13, 823, 11, 286, 2835, 51612], "temperature": 0.0, "avg_logprob": -0.13613846262947457, "compression_ratio": 1.6032786885245902, "no_speech_prob": 0.0016993958270177245}, {"id": 94, "seek": 68116, "start": 706.12, "end": 710.8399999999999, "text": " that we have a whole bunch of components. So up top, we have here OpenPGP, which is our library.", "tokens": [51612, 300, 321, 362, 257, 1379, 3840, 295, 6677, 13, 407, 493, 1192, 11, 321, 362, 510, 7238, 47, 38, 47, 11, 597, 307, 527, 6405, 13, 51848], "temperature": 0.0, "avg_logprob": -0.13613846262947457, "compression_ratio": 1.6032786885245902, "no_speech_prob": 0.0016993958270177245}, {"id": 95, "seek": 71116, "start": 711.9599999999999, "end": 721.0, "text": " And next to it, we have PGP-CertD, which is a certificate store or a standard, or not yet a", "tokens": [50404, 400, 958, 281, 309, 11, 321, 362, 430, 38, 47, 12, 34, 911, 35, 11, 597, 307, 257, 15953, 3531, 420, 257, 3832, 11, 420, 406, 1939, 257, 50856], "temperature": 0.0, "avg_logprob": -0.1493085412418141, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.00025286461459472775}, {"id": 96, "seek": 71116, "start": 721.0, "end": 726.8399999999999, "text": " standard, but there is a text that describes how it works. It looks like a mailder. And we have a", "tokens": [50856, 3832, 11, 457, 456, 307, 257, 2487, 300, 15626, 577, 309, 1985, 13, 467, 1542, 411, 257, 463, 793, 260, 13, 400, 321, 362, 257, 51148], "temperature": 0.0, "avg_logprob": -0.1493085412418141, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.00025286461459472775}, {"id": 97, "seek": 71116, "start": 726.8399999999999, "end": 731.48, "text": " library implementation. And that doesn't directly depend on our library. And then we have a whole", "tokens": [51148, 6405, 11420, 13, 400, 300, 1177, 380, 3838, 5672, 322, 527, 6405, 13, 400, 550, 321, 362, 257, 1379, 51380], "temperature": 0.0, "avg_logprob": -0.1493085412418141, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.00025286461459472775}, {"id": 98, "seek": 71116, "start": 731.48, "end": 736.92, "text": " bunch of libraries on top and services. We have the key store for private key operations. We have", "tokens": [51380, 3840, 295, 15148, 322, 1192, 293, 3328, 13, 492, 362, 264, 2141, 3531, 337, 4551, 2141, 7705, 13, 492, 362, 51652], "temperature": 0.0, "avg_logprob": -0.1493085412418141, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.00025286461459472775}, {"id": 99, "seek": 73692, "start": 736.92, "end": 743.88, "text": " the cert store, which is the in-memory certificate store. We have the web of trust engine. We have", "tokens": [50364, 264, 5351, 3531, 11, 597, 307, 264, 294, 12, 17886, 827, 15953, 3531, 13, 492, 362, 264, 3670, 295, 3361, 2848, 13, 492, 362, 50712], "temperature": 0.0, "avg_logprob": -0.11159943117953763, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0009103781194426119}, {"id": 100, "seek": 73692, "start": 743.88, "end": 750.92, "text": " our network library for accessing key servers in WKD and Dane. We have our auto-crypt library for", "tokens": [50712, 527, 3209, 6405, 337, 26440, 2141, 15909, 294, 343, 42, 35, 293, 413, 1929, 13, 492, 362, 527, 8399, 12, 46555, 662, 6405, 337, 51064], "temperature": 0.0, "avg_logprob": -0.11159943117953763, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0009103781194426119}, {"id": 101, "seek": 73692, "start": 750.92, "end": 756.8399999999999, "text": " doing auto-crypt operations. And we have another library for configuring the cryptographic policy.", "tokens": [51064, 884, 8399, 12, 46555, 662, 7705, 13, 400, 321, 362, 1071, 6405, 337, 6662, 1345, 264, 9844, 12295, 3897, 13, 51360], "temperature": 0.0, "avg_logprob": -0.11159943117953763, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0009103781194426119}, {"id": 102, "seek": 73692, "start": 758.1999999999999, "end": 763.8, "text": " And SQ, you know, it exposes all of this functionality. And so it's using all of these", "tokens": [51428, 400, 318, 48, 11, 291, 458, 11, 309, 1278, 4201, 439, 295, 341, 14980, 13, 400, 370, 309, 311, 1228, 439, 295, 613, 51708], "temperature": 0.0, "avg_logprob": -0.11159943117953763, "compression_ratio": 1.7130044843049328, "no_speech_prob": 0.0009103781194426119}, {"id": 103, "seek": 76380, "start": 763.8, "end": 773.8, "text": " things. And RPM is one of the users of Sequoia. Since Fedora 38, the version of RPM that ship uses", "tokens": [50364, 721, 13, 400, 37389, 307, 472, 295, 264, 5022, 295, 46859, 78, 654, 13, 4162, 7772, 3252, 12843, 11, 264, 3037, 295, 37389, 300, 5374, 4960, 50864], "temperature": 0.0, "avg_logprob": -0.09615781709745333, "compression_ratio": 1.5077720207253886, "no_speech_prob": 0.0010641372064128518}, {"id": 104, "seek": 76380, "start": 773.8, "end": 781.24, "text": " Sequoia to verify the packages. And it doesn't use secret key material. It has its own certificate", "tokens": [50864, 46859, 78, 654, 281, 16888, 264, 17401, 13, 400, 309, 1177, 380, 764, 4054, 2141, 2527, 13, 467, 575, 1080, 1065, 15953, 51236], "temperature": 0.0, "avg_logprob": -0.09615781709745333, "compression_ratio": 1.5077720207253886, "no_speech_prob": 0.0010641372064128518}, {"id": 105, "seek": 76380, "start": 781.24, "end": 787.8, "text": " store and it uses its own trust model. So all of these components aren't needed. And RPM just", "tokens": [51236, 3531, 293, 309, 4960, 1080, 1065, 3361, 2316, 13, 407, 439, 295, 613, 6677, 3212, 380, 2978, 13, 400, 37389, 445, 51564], "temperature": 0.0, "avg_logprob": -0.09615781709745333, "compression_ratio": 1.5077720207253886, "no_speech_prob": 0.0010641372064128518}, {"id": 106, "seek": 78780, "start": 787.8, "end": 791.88, "text": " links against OpenPGP, the library, and the configuration policy.", "tokens": [50364, 6123, 1970, 7238, 47, 38, 47, 11, 264, 6405, 11, 293, 264, 11694, 3897, 13, 50568], "temperature": 0.0, "avg_logprob": -0.10903178420022269, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0055475072003901005}, {"id": 107, "seek": 78780, "start": 794.52, "end": 798.1999999999999, "text": " Now I mentioned before our API design, unopinionated low-level interfaces,", "tokens": [50700, 823, 286, 2835, 949, 527, 9362, 1715, 11, 517, 404, 259, 313, 770, 2295, 12, 12418, 28416, 11, 50884], "temperature": 0.0, "avg_logprob": -0.10903178420022269, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0055475072003901005}, {"id": 108, "seek": 78780, "start": 798.8399999999999, "end": 802.68, "text": " opinionated high-level interfaces that are built on these low-level", "tokens": [50916, 4800, 770, 1090, 12, 12418, 28416, 300, 366, 3094, 322, 613, 2295, 12, 12418, 51108], "temperature": 0.0, "avg_logprob": -0.10903178420022269, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0055475072003901005}, {"id": 109, "seek": 78780, "start": 802.68, "end": 809.0799999999999, "text": " APIs. But what does that look like? So let's imagine that we have a certificate and we want to write", "tokens": [51108, 21445, 13, 583, 437, 775, 300, 574, 411, 30, 407, 718, 311, 3811, 300, 321, 362, 257, 15953, 293, 321, 528, 281, 2464, 51428], "temperature": 0.0, "avg_logprob": -0.10903178420022269, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0055475072003901005}, {"id": 110, "seek": 78780, "start": 809.0799999999999, "end": 817.16, "text": " it out to disk. So we have a method called serialize. You provide it with a buffer or a file or whatever.", "tokens": [51428, 309, 484, 281, 12355, 13, 407, 321, 362, 257, 3170, 1219, 17436, 1125, 13, 509, 2893, 309, 365, 257, 21762, 420, 257, 3991, 420, 2035, 13, 51832], "temperature": 0.0, "avg_logprob": -0.10903178420022269, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.0055475072003901005}, {"id": 111, "seek": 81780, "start": 817.8, "end": 823.4, "text": " And it just writes it out in OpenPGP format. What if there's secret key material in there?", "tokens": [50364, 400, 309, 445, 13657, 309, 484, 294, 7238, 47, 38, 47, 7877, 13, 708, 498, 456, 311, 4054, 2141, 2527, 294, 456, 30, 50644], "temperature": 0.0, "avg_logprob": -0.11499728778801342, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.0003980188339482993}, {"id": 112, "seek": 81780, "start": 823.4, "end": 830.8399999999999, "text": " That would be a shame if you accidentally leaked that. Well, in Sequoia, we automatically strip", "tokens": [50644, 663, 576, 312, 257, 10069, 498, 291, 15715, 31779, 300, 13, 1042, 11, 294, 46859, 78, 654, 11, 321, 6772, 12828, 51016], "temperature": 0.0, "avg_logprob": -0.11499728778801342, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.0003980188339482993}, {"id": 113, "seek": 81780, "start": 830.8399999999999, "end": 837.88, "text": " that out by default. That's safe. You really, really need to write out the secret key material.", "tokens": [51016, 300, 484, 538, 7576, 13, 663, 311, 3273, 13, 509, 534, 11, 534, 643, 281, 2464, 484, 264, 4054, 2141, 2527, 13, 51368], "temperature": 0.0, "avg_logprob": -0.11499728778801342, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.0003980188339482993}, {"id": 114, "seek": 81780, "start": 837.88, "end": 844.92, "text": " Sometimes you do. Sometimes you want to. You have to opt in. And for this, we have asTSK,", "tokens": [51368, 4803, 291, 360, 13, 4803, 291, 528, 281, 13, 509, 362, 281, 2427, 294, 13, 400, 337, 341, 11, 321, 362, 382, 7327, 42, 11, 51720], "temperature": 0.0, "avg_logprob": -0.11499728778801342, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.0003980188339482993}, {"id": 115, "seek": 84492, "start": 844.92, "end": 851.3199999999999, "text": " which converts the data type. And the new data type provides an interface, the same interface,", "tokens": [50364, 597, 38874, 264, 1412, 2010, 13, 400, 264, 777, 1412, 2010, 6417, 364, 9226, 11, 264, 912, 9226, 11, 50684], "temperature": 0.0, "avg_logprob": -0.09110209676954481, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.0012249181745573878}, {"id": 116, "seek": 84492, "start": 852.04, "end": 855.4, "text": " and you serialize it. And then you also get the secret key material.", "tokens": [50720, 293, 291, 17436, 1125, 309, 13, 400, 550, 291, 611, 483, 264, 4054, 2141, 2527, 13, 50888], "temperature": 0.0, "avg_logprob": -0.09110209676954481, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.0012249181745573878}, {"id": 117, "seek": 84492, "start": 857.0799999999999, "end": 860.5999999999999, "text": " And I mentioned that we have these progressive high-level APIs. What do they look like?", "tokens": [50972, 400, 286, 2835, 300, 321, 362, 613, 16131, 1090, 12, 12418, 21445, 13, 708, 360, 436, 574, 411, 30, 51148], "temperature": 0.0, "avg_logprob": -0.09110209676954481, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.0012249181745573878}, {"id": 118, "seek": 84492, "start": 861.88, "end": 867.16, "text": " Here, we see how to create a certificate. We have a certificate builder. You want to create a", "tokens": [51212, 1692, 11, 321, 536, 577, 281, 1884, 257, 15953, 13, 492, 362, 257, 15953, 27377, 13, 509, 528, 281, 1884, 257, 51476], "temperature": 0.0, "avg_logprob": -0.09110209676954481, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.0012249181745573878}, {"id": 119, "seek": 84492, "start": 867.16, "end": 871.4, "text": " general-purpose certificate. You add a user ID, and you generate it, and you're good.", "tokens": [51476, 2674, 12, 42601, 15953, 13, 509, 909, 257, 4195, 7348, 11, 293, 291, 8460, 309, 11, 293, 291, 434, 665, 13, 51688], "temperature": 0.0, "avg_logprob": -0.09110209676954481, "compression_ratio": 1.7520325203252032, "no_speech_prob": 0.0012249181745573878}, {"id": 120, "seek": 87140, "start": 872.36, "end": 879.0799999999999, "text": " But what if you also want to add a decentralized social proof? So, probably heard of Keybase,", "tokens": [50412, 583, 437, 498, 291, 611, 528, 281, 909, 257, 32870, 2093, 8177, 30, 407, 11, 1391, 2198, 295, 12759, 17429, 11, 50748], "temperature": 0.0, "avg_logprob": -0.16209301081570712, "compression_ratio": 1.502145922746781, "no_speech_prob": 0.000868793751578778}, {"id": 121, "seek": 87140, "start": 879.64, "end": 885.64, "text": " where you can do these social proofs or link services. There's also a mechanism in OpenPGP,", "tokens": [50776, 689, 291, 393, 360, 613, 2093, 8177, 82, 420, 2113, 3328, 13, 821, 311, 611, 257, 7513, 294, 7238, 47, 38, 47, 11, 51076], "temperature": 0.0, "avg_logprob": -0.16209301081570712, "compression_ratio": 1.502145922746781, "no_speech_prob": 0.000868793751578778}, {"id": 122, "seek": 87140, "start": 885.64, "end": 889.64, "text": " or an extension that allows you to embed them directly into the certificates.", "tokens": [51076, 420, 364, 10320, 300, 4045, 291, 281, 12240, 552, 3838, 666, 264, 32941, 13, 51276], "temperature": 0.0, "avg_logprob": -0.16209301081570712, "compression_ratio": 1.502145922746781, "no_speech_prob": 0.000868793751578778}, {"id": 123, "seek": 87140, "start": 890.52, "end": 895.48, "text": " And that's not really supported by the library. At least there are no APIs to do that.", "tokens": [51320, 400, 300, 311, 406, 534, 8104, 538, 264, 6405, 13, 1711, 1935, 456, 366, 572, 21445, 281, 360, 300, 13, 51568], "temperature": 0.0, "avg_logprob": -0.16209301081570712, "compression_ratio": 1.502145922746781, "no_speech_prob": 0.000868793751578778}, {"id": 124, "seek": 89548, "start": 896.2, "end": 901.16, "text": " But you can use the signature builder, and you can add on the appropriate notation.", "tokens": [50400, 583, 291, 393, 764, 264, 13397, 27377, 11, 293, 291, 393, 909, 322, 264, 6854, 24657, 13, 50648], "temperature": 0.0, "avg_logprob": -0.12159990335439706, "compression_ratio": 1.6826923076923077, "no_speech_prob": 0.0017001471715047956}, {"id": 125, "seek": 89548, "start": 902.12, "end": 908.36, "text": " And then the cert builder, you override the how it creates the signature by using this template,", "tokens": [50696, 400, 550, 264, 5351, 27377, 11, 291, 42321, 264, 577, 309, 7829, 264, 13397, 538, 1228, 341, 12379, 11, 51008], "temperature": 0.0, "avg_logprob": -0.12159990335439706, "compression_ratio": 1.6826923076923077, "no_speech_prob": 0.0017001471715047956}, {"id": 126, "seek": 89548, "start": 909.24, "end": 914.04, "text": " and then the certificate that's created automatically has this decentralized proof embedded in it.", "tokens": [51052, 293, 550, 264, 15953, 300, 311, 2942, 6772, 575, 341, 32870, 8177, 16741, 294, 309, 13, 51292], "temperature": 0.0, "avg_logprob": -0.12159990335439706, "compression_ratio": 1.6826923076923077, "no_speech_prob": 0.0017001471715047956}, {"id": 127, "seek": 89548, "start": 917.88, "end": 921.4, "text": " So that's the library. What does the command line interface look like?", "tokens": [51484, 407, 300, 311, 264, 6405, 13, 708, 775, 264, 5622, 1622, 9226, 574, 411, 30, 51660], "temperature": 0.0, "avg_logprob": -0.12159990335439706, "compression_ratio": 1.6826923076923077, "no_speech_prob": 0.0017001471715047956}, {"id": 128, "seek": 92140, "start": 922.28, "end": 928.1999999999999, "text": " So, SQ is our primary command line interface. There are other tools out there, of course,", "tokens": [50408, 407, 11, 318, 48, 307, 527, 6194, 5622, 1622, 9226, 13, 821, 366, 661, 3873, 484, 456, 11, 295, 1164, 11, 50704], "temperature": 0.0, "avg_logprob": -0.13230247672544707, "compression_ratio": 1.6462264150943395, "no_speech_prob": 0.002841521054506302}, {"id": 129, "seek": 92140, "start": 928.1999999999999, "end": 938.12, "text": " but SQ is sort of the GPG equivalent, if you will. And we opted for a sub-command style interface.", "tokens": [50704, 457, 318, 48, 307, 1333, 295, 264, 26039, 38, 10344, 11, 498, 291, 486, 13, 400, 321, 40768, 337, 257, 1422, 12, 13278, 474, 3758, 9226, 13, 51200], "temperature": 0.0, "avg_logprob": -0.13230247672544707, "compression_ratio": 1.6462264150943395, "no_speech_prob": 0.002841521054506302}, {"id": 130, "seek": 92140, "start": 939.8, "end": 945.8, "text": " So, if you want to encrypt a message, use the encrypt sub-command. And here, I'm encrypting", "tokens": [51284, 407, 11, 498, 291, 528, 281, 17972, 662, 257, 3636, 11, 764, 264, 17972, 662, 1422, 12, 13278, 474, 13, 400, 510, 11, 286, 478, 17972, 662, 278, 51584], "temperature": 0.0, "avg_logprob": -0.13230247672544707, "compression_ratio": 1.6462264150943395, "no_speech_prob": 0.002841521054506302}, {"id": 131, "seek": 92140, "start": 945.8, "end": 950.36, "text": " a message to me. So, the recipient email is neil at sequoia-pqp.org.", "tokens": [51584, 257, 3636, 281, 385, 13, 407, 11, 264, 26216, 3796, 307, 408, 388, 412, 5123, 78, 654, 12, 79, 80, 79, 13, 4646, 13, 51812], "temperature": 0.0, "avg_logprob": -0.13230247672544707, "compression_ratio": 1.6462264150943395, "no_speech_prob": 0.002841521054506302}, {"id": 132, "seek": 95140, "start": 952.36, "end": 960.4399999999999, "text": " The next thing that's very important is that we have a very clear separation of options.", "tokens": [50412, 440, 958, 551, 300, 311, 588, 1021, 307, 300, 321, 362, 257, 588, 1850, 14634, 295, 3956, 13, 50816], "temperature": 0.0, "avg_logprob": -0.11342448978633671, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0003404851886443794}, {"id": 133, "seek": 95140, "start": 961.16, "end": 964.6, "text": " So, there's another sub-command, SQ sign. You can sign a message.", "tokens": [50852, 407, 11, 456, 311, 1071, 1422, 12, 13278, 474, 11, 318, 48, 1465, 13, 509, 393, 1465, 257, 3636, 13, 51024], "temperature": 0.0, "avg_logprob": -0.11342448978633671, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0003404851886443794}, {"id": 134, "seek": 95140, "start": 965.72, "end": 971.48, "text": " And this command does not take the recipient email argument, because it doesn't make sense in this", "tokens": [51080, 400, 341, 5622, 775, 406, 747, 264, 26216, 3796, 6770, 11, 570, 309, 1177, 380, 652, 2020, 294, 341, 51368], "temperature": 0.0, "avg_logprob": -0.11342448978633671, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0003404851886443794}, {"id": 135, "seek": 95140, "start": 971.48, "end": 977.96, "text": " context. And so, if you try to provide it, you get an error. And another thing that we've really", "tokens": [51368, 4319, 13, 400, 370, 11, 498, 291, 853, 281, 2893, 309, 11, 291, 483, 364, 6713, 13, 400, 1071, 551, 300, 321, 600, 534, 51692], "temperature": 0.0, "avg_logprob": -0.11342448978633671, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0003404851886443794}, {"id": 136, "seek": 97796, "start": 977.96, "end": 983.5600000000001, "text": " tried to do is ensure that there's consistency between the sub-commands. So, if you have, for", "tokens": [50364, 3031, 281, 360, 307, 5586, 300, 456, 311, 14416, 1296, 264, 1422, 12, 13278, 2967, 13, 407, 11, 498, 291, 362, 11, 337, 50644], "temperature": 0.0, "avg_logprob": -0.07176583947487247, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.009531422518193722}, {"id": 137, "seek": 97796, "start": 983.5600000000001, "end": 989.08, "text": " instance, an email option, it doesn't matter what sub-command we're talking about, it has more or", "tokens": [50644, 5197, 11, 364, 3796, 3614, 11, 309, 1177, 380, 1871, 437, 1422, 12, 13278, 474, 321, 434, 1417, 466, 11, 309, 575, 544, 420, 50920], "temperature": 0.0, "avg_logprob": -0.07176583947487247, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.009531422518193722}, {"id": 138, "seek": 97796, "start": 989.08, "end": 1000.0400000000001, "text": " less the same semantics. And we've talked to people who've used sequoia or SQ, and the reactions have", "tokens": [50920, 1570, 264, 912, 4361, 45298, 13, 400, 321, 600, 2825, 281, 561, 567, 600, 1143, 5123, 78, 654, 420, 318, 48, 11, 293, 264, 12215, 362, 51468], "temperature": 0.0, "avg_logprob": -0.07176583947487247, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.009531422518193722}, {"id": 139, "seek": 97796, "start": 1000.0400000000001, "end": 1006.36, "text": " been very positive so far. So, we're quite confident that the design maybe is not optimal,", "tokens": [51468, 668, 588, 3353, 370, 1400, 13, 407, 11, 321, 434, 1596, 6679, 300, 264, 1715, 1310, 307, 406, 16252, 11, 51784], "temperature": 0.0, "avg_logprob": -0.07176583947487247, "compression_ratio": 1.6340425531914893, "no_speech_prob": 0.009531422518193722}, {"id": 140, "seek": 100636, "start": 1006.36, "end": 1015.4, "text": " but certainly is good. But the really big paradigm shift in SQ and in sequoia in general", "tokens": [50364, 457, 3297, 307, 665, 13, 583, 264, 534, 955, 24709, 5513, 294, 318, 48, 293, 294, 5123, 78, 654, 294, 2674, 50816], "temperature": 0.0, "avg_logprob": -0.12872555435344737, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.004459974355995655}, {"id": 141, "seek": 100636, "start": 1016.2, "end": 1023.88, "text": " is the way that we think about certificates. And a certificate is sort of this OpenPGP", "tokens": [50856, 307, 264, 636, 300, 321, 519, 466, 32941, 13, 400, 257, 15953, 307, 1333, 295, 341, 7238, 47, 38, 47, 51240], "temperature": 0.0, "avg_logprob": -0.12872555435344737, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.004459974355995655}, {"id": 142, "seek": 100636, "start": 1023.88, "end": 1028.68, "text": " artifact that you use and that you throw out onto the internet someplace on a key server and a", "tokens": [51240, 34806, 300, 291, 764, 293, 300, 291, 3507, 484, 3911, 264, 4705, 37126, 322, 257, 2141, 7154, 293, 257, 51480], "temperature": 0.0, "avg_logprob": -0.12872555435344737, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.004459974355995655}, {"id": 143, "seek": 100636, "start": 1028.68, "end": 1034.68, "text": " Web key directory. You publish it on your web page. And if I want to send you an encrypted message,", "tokens": [51480, 9573, 2141, 21120, 13, 509, 11374, 309, 322, 428, 3670, 3028, 13, 400, 498, 286, 528, 281, 2845, 291, 364, 36663, 3636, 11, 51780], "temperature": 0.0, "avg_logprob": -0.12872555435344737, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.004459974355995655}, {"id": 144, "seek": 103468, "start": 1034.68, "end": 1042.2, "text": " then I download your certificate and I encrypt a message using your certificate. And then I send", "tokens": [50364, 550, 286, 5484, 428, 15953, 293, 286, 17972, 662, 257, 3636, 1228, 428, 15953, 13, 400, 550, 286, 2845, 50740], "temperature": 0.0, "avg_logprob": -0.07292940351698134, "compression_ratio": 1.7980769230769231, "no_speech_prob": 0.0016720413696020842}, {"id": 145, "seek": 103468, "start": 1042.2, "end": 1046.76, "text": " you that encrypted message and you're able to decrypt it with your keys. So, certificates are", "tokens": [50740, 291, 300, 36663, 3636, 293, 291, 434, 1075, 281, 979, 627, 662, 309, 365, 428, 9317, 13, 407, 11, 32941, 366, 50968], "temperature": 0.0, "avg_logprob": -0.07292940351698134, "compression_ratio": 1.7980769230769231, "no_speech_prob": 0.0016720413696020842}, {"id": 146, "seek": 103468, "start": 1046.76, "end": 1054.28, "text": " really important and how we use them is also important. And in SQ, we're moving away from", "tokens": [50968, 534, 1021, 293, 577, 321, 764, 552, 307, 611, 1021, 13, 400, 294, 318, 48, 11, 321, 434, 2684, 1314, 490, 51344], "temperature": 0.0, "avg_logprob": -0.07292940351698134, "compression_ratio": 1.7980769230769231, "no_speech_prob": 0.0016720413696020842}, {"id": 147, "seek": 103468, "start": 1054.28, "end": 1060.68, "text": " curated key rings. So, a curated key ring means that the data that you have available locally", "tokens": [51344, 47851, 2141, 11136, 13, 407, 11, 257, 47851, 2141, 4875, 1355, 300, 264, 1412, 300, 291, 362, 2435, 16143, 51664], "temperature": 0.0, "avg_logprob": -0.07292940351698134, "compression_ratio": 1.7980769230769231, "no_speech_prob": 0.0016720413696020842}, {"id": 148, "seek": 106068, "start": 1061.5600000000002, "end": 1068.04, "text": " has been checked. It's authentic. It's the right stuff. If you have a certificate for me", "tokens": [50408, 575, 668, 10033, 13, 467, 311, 12466, 13, 467, 311, 264, 558, 1507, 13, 759, 291, 362, 257, 15953, 337, 385, 50732], "temperature": 0.0, "avg_logprob": -0.09886272586121851, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.005202729720622301}, {"id": 149, "seek": 106068, "start": 1068.68, "end": 1073.16, "text": " or that claims to be for me in your key ring, you're assuming that it's good.", "tokens": [50764, 420, 300, 9441, 281, 312, 337, 385, 294, 428, 2141, 4875, 11, 291, 434, 11926, 300, 309, 311, 665, 13, 50988], "temperature": 0.0, "avg_logprob": -0.09886272586121851, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.005202729720622301}, {"id": 150, "seek": 106068, "start": 1075.0, "end": 1081.16, "text": " And it's sort of this say yes to get worked on mentality. So, if you're using GPG and you have", "tokens": [51080, 400, 309, 311, 1333, 295, 341, 584, 2086, 281, 483, 2732, 322, 21976, 13, 407, 11, 498, 291, 434, 1228, 26039, 38, 293, 291, 362, 51388], "temperature": 0.0, "avg_logprob": -0.09886272586121851, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.005202729720622301}, {"id": 151, "seek": 106068, "start": 1081.16, "end": 1088.04, "text": " a curated key ring mentality, and that's not required in GPG, but it's how many people use", "tokens": [51388, 257, 47851, 2141, 4875, 21976, 11, 293, 300, 311, 406, 4739, 294, 26039, 38, 11, 457, 309, 311, 577, 867, 561, 764, 51732], "temperature": 0.0, "avg_logprob": -0.09886272586121851, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.005202729720622301}, {"id": 152, "seek": 108804, "start": 1088.12, "end": 1097.1599999999999, "text": " it we've observed, and you want to send a message to DKG and you address him by his email address,", "tokens": [50368, 309, 321, 600, 13095, 11, 293, 291, 528, 281, 2845, 257, 3636, 281, 31934, 38, 293, 291, 2985, 796, 538, 702, 3796, 2985, 11, 50820], "temperature": 0.0, "avg_logprob": -0.08858359686218865, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.012600671499967575}, {"id": 153, "seek": 108804, "start": 1097.1599999999999, "end": 1101.0, "text": " then GPG is going to warn you and say, do you want to use this key anyway? And it doesn't", "tokens": [50820, 550, 26039, 38, 307, 516, 281, 12286, 291, 293, 584, 11, 360, 291, 528, 281, 764, 341, 2141, 4033, 30, 400, 309, 1177, 380, 51012], "temperature": 0.0, "avg_logprob": -0.08858359686218865, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.012600671499967575}, {"id": 154, "seek": 108804, "start": 1101.0, "end": 1106.6, "text": " really provide you any options. The options are get worked on or not get worked on. And certifying", "tokens": [51012, 534, 2893, 291, 604, 3956, 13, 440, 3956, 366, 483, 2732, 322, 420, 406, 483, 2732, 322, 13, 400, 5351, 5489, 51292], "temperature": 0.0, "avg_logprob": -0.08858359686218865, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.012600671499967575}, {"id": 155, "seek": 108804, "start": 1106.6, "end": 1115.1599999999999, "text": " user IDs is not easy. So, the amount of energy required in order to certify a user ID means", "tokens": [51292, 4195, 48212, 307, 406, 1858, 13, 407, 11, 264, 2372, 295, 2281, 4739, 294, 1668, 281, 5351, 2505, 257, 4195, 7348, 1355, 51720], "temperature": 0.0, "avg_logprob": -0.08858359686218865, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.012600671499967575}, {"id": 156, "seek": 111516, "start": 1115.16, "end": 1121.72, "text": " that hitting yes is sort of much easier. And we want to move towards strong authentication.", "tokens": [50364, 300, 8850, 2086, 307, 1333, 295, 709, 3571, 13, 400, 321, 528, 281, 1286, 3030, 2068, 26643, 13, 50692], "temperature": 0.0, "avg_logprob": -0.08468563174024041, "compression_ratio": 1.5728155339805825, "no_speech_prob": 0.001954267267137766}, {"id": 157, "seek": 111516, "start": 1123.24, "end": 1130.44, "text": " And so, in SQ, we treat the local certificate store as a cache. It's no better than the", "tokens": [50768, 400, 370, 11, 294, 318, 48, 11, 321, 2387, 264, 2654, 15953, 3531, 382, 257, 19459, 13, 467, 311, 572, 1101, 813, 264, 51128], "temperature": 0.0, "avg_logprob": -0.08468563174024041, "compression_ratio": 1.5728155339805825, "no_speech_prob": 0.001954267267137766}, {"id": 158, "seek": 111516, "start": 1130.44, "end": 1136.76, "text": " certificates that are stored on, for instance, the SKS key servers where no authentication is done.", "tokens": [51128, 32941, 300, 366, 12187, 322, 11, 337, 5197, 11, 264, 21483, 50, 2141, 15909, 689, 572, 26643, 307, 1096, 13, 51444], "temperature": 0.0, "avg_logprob": -0.08468563174024041, "compression_ratio": 1.5728155339805825, "no_speech_prob": 0.001954267267137766}, {"id": 159, "seek": 111516, "start": 1137.3200000000002, "end": 1140.2, "text": " By default, we'll just store anything there.", "tokens": [51472, 3146, 7576, 11, 321, 603, 445, 3531, 1340, 456, 13, 51616], "temperature": 0.0, "avg_logprob": -0.08468563174024041, "compression_ratio": 1.5728155339805825, "no_speech_prob": 0.001954267267137766}, {"id": 160, "seek": 114020, "start": 1140.8400000000001, "end": 1149.88, "text": " What about these self signed user IDs? Right, if you have a certificate, you create a user ID,", "tokens": [50396, 708, 466, 613, 2698, 8175, 4195, 48212, 30, 1779, 11, 498, 291, 362, 257, 15953, 11, 291, 1884, 257, 4195, 7348, 11, 50848], "temperature": 0.0, "avg_logprob": -0.13802755900791713, "compression_ratio": 1.75, "no_speech_prob": 0.0022502487991005182}, {"id": 161, "seek": 114020, "start": 1149.88, "end": 1155.48, "text": " you add it to that certificate. On my certificate, I have a self signed user ID that says Neil,", "tokens": [50848, 291, 909, 309, 281, 300, 15953, 13, 1282, 452, 15953, 11, 286, 362, 257, 2698, 8175, 4195, 7348, 300, 1619, 18615, 11, 51128], "temperature": 0.0, "avg_logprob": -0.13802755900791713, "compression_ratio": 1.75, "no_speech_prob": 0.0022502487991005182}, {"id": 162, "seek": 114020, "start": 1156.04, "end": 1161.32, "text": " but anybody can create a certificate where there's a user ID that says Neil on it.", "tokens": [51156, 457, 4472, 393, 1884, 257, 15953, 689, 456, 311, 257, 4195, 7348, 300, 1619, 18615, 322, 309, 13, 51420], "temperature": 0.0, "avg_logprob": -0.13802755900791713, "compression_ratio": 1.75, "no_speech_prob": 0.0022502487991005182}, {"id": 163, "seek": 116132, "start": 1161.72, "end": 1171.6399999999999, "text": " We treat it at most as a hint. And SQ certificates can only be addressed by authenticated identifiers.", "tokens": [50384, 492, 2387, 309, 412, 881, 382, 257, 12075, 13, 400, 318, 48, 32941, 393, 787, 312, 13847, 538, 9214, 3587, 2473, 23463, 13, 50880], "temperature": 0.0, "avg_logprob": -0.12572097778320312, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.023649336770176888}, {"id": 164, "seek": 116132, "start": 1174.36, "end": 1177.48, "text": " And the way that we do this is we really, really embrace the web of trust.", "tokens": [51016, 400, 264, 636, 300, 321, 360, 341, 307, 321, 534, 11, 534, 14038, 264, 3670, 295, 3361, 13, 51172], "temperature": 0.0, "avg_logprob": -0.12572097778320312, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.023649336770176888}, {"id": 165, "seek": 116132, "start": 1178.6, "end": 1182.28, "text": " And now the question that you're probably asking is, is this going to be a usability", "tokens": [51228, 400, 586, 264, 1168, 300, 291, 434, 1391, 3365, 307, 11, 307, 341, 516, 281, 312, 257, 46878, 51412], "temperature": 0.0, "avg_logprob": -0.12572097778320312, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.023649336770176888}, {"id": 166, "seek": 116132, "start": 1182.28, "end": 1186.84, "text": " nightmare? And it's a question that we also asked ourselves because we didn't know we had to try it", "tokens": [51412, 18724, 30, 400, 309, 311, 257, 1168, 300, 321, 611, 2351, 4175, 570, 321, 994, 380, 458, 321, 632, 281, 853, 309, 51640], "temperature": 0.0, "avg_logprob": -0.12572097778320312, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.023649336770176888}, {"id": 167, "seek": 118684, "start": 1186.84, "end": 1194.28, "text": " out. And I propose let's take a look and see. But we need to take a step back again and ask,", "tokens": [50364, 484, 13, 400, 286, 17421, 718, 311, 747, 257, 574, 293, 536, 13, 583, 321, 643, 281, 747, 257, 1823, 646, 797, 293, 1029, 11, 50736], "temperature": 0.0, "avg_logprob": -0.08752244383424193, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.006577191408723593}, {"id": 168, "seek": 118684, "start": 1194.28, "end": 1200.28, "text": " what is authentication exactly? And so there are sort of two aspects to authentication.", "tokens": [50736, 437, 307, 26643, 2293, 30, 400, 370, 456, 366, 1333, 295, 732, 7270, 281, 26643, 13, 51036], "temperature": 0.0, "avg_logprob": -0.08752244383424193, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.006577191408723593}, {"id": 169, "seek": 118684, "start": 1202.9199999999998, "end": 1208.52, "text": " What we want to know is what certificate should I use when I want to encrypt a message for Alice?", "tokens": [51168, 708, 321, 528, 281, 458, 307, 437, 15953, 820, 286, 764, 562, 286, 528, 281, 17972, 662, 257, 3636, 337, 16004, 30, 51448], "temperature": 0.0, "avg_logprob": -0.08752244383424193, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.006577191408723593}, {"id": 170, "seek": 118684, "start": 1209.56, "end": 1214.36, "text": " Or alternatively, if I have a certificate, who does this certificate really belong to?", "tokens": [51500, 1610, 8535, 356, 11, 498, 286, 362, 257, 15953, 11, 567, 775, 341, 15953, 534, 5784, 281, 30, 51740], "temperature": 0.0, "avg_logprob": -0.08752244383424193, "compression_ratio": 1.6150442477876106, "no_speech_prob": 0.006577191408723593}, {"id": 171, "seek": 121436, "start": 1214.36, "end": 1221.3999999999999, "text": " Is it Alice's certificate? And really self signatures, they don't mean anything in this", "tokens": [50364, 1119, 309, 16004, 311, 15953, 30, 400, 534, 2698, 32322, 11, 436, 500, 380, 914, 1340, 294, 341, 50716], "temperature": 0.0, "avg_logprob": -0.10786398067030796, "compression_ratio": 1.56, "no_speech_prob": 0.0008555459789931774}, {"id": 172, "seek": 121436, "start": 1221.3999999999999, "end": 1231.1599999999999, "text": " context, right? This certificate here that we see on the right, there are user IDs that say Alice,", "tokens": [50716, 4319, 11, 558, 30, 639, 15953, 510, 300, 321, 536, 322, 264, 558, 11, 456, 366, 4195, 48212, 300, 584, 16004, 11, 51204], "temperature": 0.0, "avg_logprob": -0.10786398067030796, "compression_ratio": 1.56, "no_speech_prob": 0.0008555459789931774}, {"id": 173, "seek": 121436, "start": 1231.8799999999999, "end": 1236.04, "text": " but did Alice create those user IDs? Or is it Mallory who's trying to trick you?", "tokens": [51240, 457, 630, 16004, 1884, 729, 4195, 48212, 30, 1610, 307, 309, 24883, 827, 567, 311, 1382, 281, 4282, 291, 30, 51448], "temperature": 0.0, "avg_logprob": -0.10786398067030796, "compression_ratio": 1.56, "no_speech_prob": 0.0008555459789931774}, {"id": 174, "seek": 121436, "start": 1237.8, "end": 1243.6399999999999, "text": " Or maybe somebody who's just trolling? So what does authentication look like today?", "tokens": [51536, 1610, 1310, 2618, 567, 311, 445, 4495, 2669, 30, 407, 437, 775, 26643, 574, 411, 965, 30, 51828], "temperature": 0.0, "avg_logprob": -0.10786398067030796, "compression_ratio": 1.56, "no_speech_prob": 0.0008555459789931774}, {"id": 175, "seek": 124436, "start": 1244.36, "end": 1248.04, "text": " Well, we have a centralized authentication, which is easy to use, but", "tokens": [50364, 1042, 11, 321, 362, 257, 32395, 26643, 11, 597, 307, 1858, 281, 764, 11, 457, 50548], "temperature": 0.0, "avg_logprob": -0.11777270923961293, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.0009826173773035407}, {"id": 176, "seek": 124436, "start": 1248.76, "end": 1253.08, "text": " it's unsafe in the sense that you're relying on these central authorities. You're relying on", "tokens": [50584, 309, 311, 35948, 294, 264, 2020, 300, 291, 434, 24140, 322, 613, 5777, 12076, 13, 509, 434, 24140, 322, 50800], "temperature": 0.0, "avg_logprob": -0.11777270923961293, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.0009826173773035407}, {"id": 177, "seek": 124436, "start": 1253.6399999999999, "end": 1259.24, "text": " hundreds of centralized CAs in X509. These are controlled by governments,", "tokens": [50828, 6779, 295, 32395, 383, 10884, 294, 1783, 2803, 24, 13, 1981, 366, 10164, 538, 11280, 11, 51108], "temperature": 0.0, "avg_logprob": -0.11777270923961293, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.0009826173773035407}, {"id": 178, "seek": 124436, "start": 1260.84, "end": 1265.8, "text": " not only your government, they're controlled by companies whose interest is to make money.", "tokens": [51188, 406, 787, 428, 2463, 11, 436, 434, 10164, 538, 3431, 6104, 1179, 307, 281, 652, 1460, 13, 51436], "temperature": 0.0, "avg_logprob": -0.11777270923961293, "compression_ratio": 1.5951219512195123, "no_speech_prob": 0.0009826173773035407}, {"id": 179, "seek": 126580, "start": 1266.68, "end": 1275.08, "text": " And any one of them can trick you. Certificate transparency helps, but you're still", "tokens": [50408, 400, 604, 472, 295, 552, 393, 4282, 291, 13, 31036, 1089, 473, 17131, 3665, 11, 457, 291, 434, 920, 50828], "temperature": 0.0, "avg_logprob": -0.12657938581524472, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.017158720642328262}, {"id": 180, "seek": 126580, "start": 1276.04, "end": 1285.24, "text": " reliant on the centralized CAs. And they haven't done a good job historically.", "tokens": [50876, 1039, 5798, 322, 264, 32395, 383, 10884, 13, 400, 436, 2378, 380, 1096, 257, 665, 1691, 16180, 13, 51336], "temperature": 0.0, "avg_logprob": -0.12657938581524472, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.017158720642328262}, {"id": 181, "seek": 126580, "start": 1285.24, "end": 1292.9199999999998, "text": " So up here at the top, we see here a Google security blog post and Chrome planned to distrust", "tokens": [51336, 407, 493, 510, 412, 264, 1192, 11, 321, 536, 510, 257, 3329, 3825, 6968, 2183, 293, 15327, 8589, 281, 1483, 22326, 51720], "temperature": 0.0, "avg_logprob": -0.12657938581524472, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.017158720642328262}, {"id": 182, "seek": 129292, "start": 1293.0, "end": 1301.4, "text": " semantic certificates because they had made too many mistakes. This is not great. But signal,", "tokens": [50368, 47982, 32941, 570, 436, 632, 1027, 886, 867, 8038, 13, 639, 307, 406, 869, 13, 583, 6358, 11, 50788], "temperature": 0.0, "avg_logprob": -0.1243770012488732, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.0025090950075536966}, {"id": 183, "seek": 129292, "start": 1301.4, "end": 1307.48, "text": " signal is great, right? In a certain sense, technically, signal is even worse. And signal,", "tokens": [50788, 6358, 307, 869, 11, 558, 30, 682, 257, 1629, 2020, 11, 12120, 11, 6358, 307, 754, 5324, 13, 400, 6358, 11, 51092], "temperature": 0.0, "avg_logprob": -0.1243770012488732, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.0025090950075536966}, {"id": 184, "seek": 129292, "start": 1307.48, "end": 1314.92, "text": " you have one key server. And it's on the same infrastructure as the message transport.", "tokens": [51092, 291, 362, 472, 2141, 7154, 13, 400, 309, 311, 322, 264, 912, 6896, 382, 264, 3636, 5495, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1243770012488732, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.0025090950075536966}, {"id": 185, "seek": 131492, "start": 1315.24, "end": 1323.88, "text": " The good news is, and I use signal, you can trust the signal foundation, right? I believe in Moxie,", "tokens": [50380, 440, 665, 2583, 307, 11, 293, 286, 764, 6358, 11, 291, 393, 3361, 264, 6358, 7030, 11, 558, 30, 286, 1697, 294, 3335, 87, 414, 11, 50812], "temperature": 0.0, "avg_logprob": -0.22987238566080728, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.014047994278371334}, {"id": 186, "seek": 131492, "start": 1323.88, "end": 1333.48, "text": " but I don't think belief is enough. I think we want technical solutions. So what about peer-to-peer?", "tokens": [50812, 457, 286, 500, 380, 519, 7107, 307, 1547, 13, 286, 519, 321, 528, 6191, 6547, 13, 407, 437, 466, 15108, 12, 1353, 12, 494, 260, 30, 51292], "temperature": 0.0, "avg_logprob": -0.22987238566080728, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.014047994278371334}, {"id": 187, "seek": 131492, "start": 1334.68, "end": 1338.44, "text": " Here, we're talking about checking somebody's fingerprint or checking the safety numbers", "tokens": [51352, 1692, 11, 321, 434, 1417, 466, 8568, 2618, 311, 30715, 420, 8568, 264, 4514, 3547, 51540], "temperature": 0.0, "avg_logprob": -0.22987238566080728, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.014047994278371334}, {"id": 188, "seek": 131492, "start": 1338.44, "end": 1343.24, "text": " in the context of signal. You can do that, and that is really, really safe.", "tokens": [51540, 294, 264, 4319, 295, 6358, 13, 509, 393, 360, 300, 11, 293, 300, 307, 534, 11, 534, 3273, 13, 51780], "temperature": 0.0, "avg_logprob": -0.22987238566080728, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.014047994278371334}, {"id": 189, "seek": 134324, "start": 1344.2, "end": 1352.1200000000001, "text": " And it's a really good thing to do if you're worried. But it has such high upfront costs", "tokens": [50412, 400, 309, 311, 257, 534, 665, 551, 281, 360, 498, 291, 434, 5804, 13, 583, 309, 575, 1270, 1090, 30264, 5497, 50808], "temperature": 0.0, "avg_logprob": -0.1697808627424569, "compression_ratio": 1.53125, "no_speech_prob": 0.0023574966471642256}, {"id": 190, "seek": 134324, "start": 1352.1200000000001, "end": 1359.48, "text": " that few people do it. We need something in between. And then there's a third model,", "tokens": [50808, 300, 1326, 561, 360, 309, 13, 492, 643, 746, 294, 1296, 13, 400, 550, 456, 311, 257, 2636, 2316, 11, 51176], "temperature": 0.0, "avg_logprob": -0.1697808627424569, "compression_ratio": 1.53125, "no_speech_prob": 0.0023574966471642256}, {"id": 191, "seek": 134324, "start": 1359.48, "end": 1365.56, "text": " which is the consistency model. Do you have the same certificate every single time?", "tokens": [51176, 597, 307, 264, 14416, 2316, 13, 1144, 291, 362, 264, 912, 15953, 633, 2167, 565, 30, 51480], "temperature": 0.0, "avg_logprob": -0.1697808627424569, "compression_ratio": 1.53125, "no_speech_prob": 0.0023574966471642256}, {"id": 192, "seek": 134324, "start": 1366.84, "end": 1371.48, "text": " This is called trust on first use, more or less. And it's really easy for users until", "tokens": [51544, 639, 307, 1219, 3361, 322, 700, 764, 11, 544, 420, 1570, 13, 400, 309, 311, 534, 1858, 337, 5022, 1826, 51776], "temperature": 0.0, "avg_logprob": -0.1697808627424569, "compression_ratio": 1.53125, "no_speech_prob": 0.0023574966471642256}, {"id": 193, "seek": 137148, "start": 1372.44, "end": 1375.32, "text": " they have a problem. And then how do you resolve a conflict?", "tokens": [50412, 436, 362, 257, 1154, 13, 400, 550, 577, 360, 291, 14151, 257, 6596, 30, 50556], "temperature": 0.0, "avg_logprob": -0.1452336311340332, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.005790507886558771}, {"id": 194, "seek": 137148, "start": 1377.96, "end": 1381.88, "text": " All right. So we have these different models, and maybe they're good enough, I don't know.", "tokens": [50688, 1057, 558, 13, 407, 321, 362, 613, 819, 5245, 11, 293, 1310, 436, 434, 665, 1547, 11, 286, 500, 380, 458, 13, 50884], "temperature": 0.0, "avg_logprob": -0.1452336311340332, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.005790507886558771}, {"id": 195, "seek": 137148, "start": 1383.32, "end": 1392.2, "text": " Maybe they're even good enough for most. So Pearlbuck, who's a Nobel prize winner, said 100", "tokens": [50956, 2704, 436, 434, 754, 665, 1547, 337, 881, 13, 407, 24639, 65, 1134, 11, 567, 311, 257, 24611, 12818, 8507, 11, 848, 2319, 51400], "temperature": 0.0, "avg_logprob": -0.1452336311340332, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.005790507886558771}, {"id": 196, "seek": 137148, "start": 1392.2, "end": 1397.64, "text": " years ago, the test of a civilization is the way that it cares for its helpless members.", "tokens": [51400, 924, 2057, 11, 264, 1500, 295, 257, 18036, 307, 264, 636, 300, 309, 12310, 337, 1080, 27596, 2679, 13, 51672], "temperature": 0.0, "avg_logprob": -0.1452336311340332, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.005790507886558771}, {"id": 197, "seek": 139764, "start": 1398.6000000000001, "end": 1406.5200000000002, "text": " So the weakest members, the people who need protection, the activists and the people that", "tokens": [50412, 407, 264, 44001, 2679, 11, 264, 561, 567, 643, 6334, 11, 264, 23042, 293, 264, 561, 300, 50808], "temperature": 0.0, "avg_logprob": -0.10938110213348831, "compression_ratio": 1.6358381502890174, "no_speech_prob": 0.002502603456377983}, {"id": 198, "seek": 139764, "start": 1406.5200000000002, "end": 1415.5600000000002, "text": " are being pursued. And so our goal is not to be good enough for most, but to be good enough for", "tokens": [50808, 366, 885, 34893, 13, 400, 370, 527, 3387, 307, 406, 281, 312, 665, 1547, 337, 881, 11, 457, 281, 312, 665, 1547, 337, 51260], "temperature": 0.0, "avg_logprob": -0.10938110213348831, "compression_ratio": 1.6358381502890174, "no_speech_prob": 0.002502603456377983}, {"id": 199, "seek": 139764, "start": 1415.5600000000002, "end": 1423.64, "text": " even more. We want to provide a progressive system that serves a range of needs. And the way that", "tokens": [51260, 754, 544, 13, 492, 528, 281, 2893, 257, 16131, 1185, 300, 13451, 257, 3613, 295, 2203, 13, 400, 264, 636, 300, 51664], "temperature": 0.0, "avg_logprob": -0.10938110213348831, "compression_ratio": 1.6358381502890174, "no_speech_prob": 0.002502603456377983}, {"id": 200, "seek": 142364, "start": 1423.64, "end": 1429.0, "text": " we're doing it is we're providing different tools in order to increase confidence.", "tokens": [50364, 321, 434, 884, 309, 307, 321, 434, 6530, 819, 3873, 294, 1668, 281, 3488, 6687, 13, 50632], "temperature": 0.0, "avg_logprob": -0.09018042541685559, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.0031189415603876114}, {"id": 201, "seek": 142364, "start": 1431.0800000000002, "end": 1438.68, "text": " And the tools work to support the user. And then based on the individual user's threat model,", "tokens": [50736, 400, 264, 3873, 589, 281, 1406, 264, 4195, 13, 400, 550, 2361, 322, 264, 2609, 4195, 311, 4734, 2316, 11, 51116], "temperature": 0.0, "avg_logprob": -0.09018042541685559, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.0031189415603876114}, {"id": 202, "seek": 142364, "start": 1440.2, "end": 1443.16, "text": " you can decide if the degree of confidence is high enough.", "tokens": [51192, 291, 393, 4536, 498, 264, 4314, 295, 6687, 307, 1090, 1547, 13, 51340], "temperature": 0.0, "avg_logprob": -0.09018042541685559, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.0031189415603876114}, {"id": 203, "seek": 142364, "start": 1446.0400000000002, "end": 1451.4, "text": " And for this, we use the web of trust, which is a powerful and flexible PKI. In the web of trust,", "tokens": [51484, 400, 337, 341, 11, 321, 764, 264, 3670, 295, 3361, 11, 597, 307, 257, 4005, 293, 11358, 430, 27731, 13, 682, 264, 3670, 295, 3361, 11, 51752], "temperature": 0.0, "avg_logprob": -0.09018042541685559, "compression_ratio": 1.6323529411764706, "no_speech_prob": 0.0031189415603876114}, {"id": 204, "seek": 145140, "start": 1452.1200000000001, "end": 1457.5600000000002, "text": " everyone can act like a certification authority. That doesn't mean that everybody", "tokens": [50400, 1518, 393, 605, 411, 257, 21775, 8281, 13, 663, 1177, 380, 914, 300, 2201, 50672], "temperature": 0.0, "avg_logprob": -0.052329256293478975, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0032646553590893745}, {"id": 205, "seek": 145140, "start": 1457.5600000000002, "end": 1463.8000000000002, "text": " is your own personal certification authority. You have to opt in. But maybe you as an individual", "tokens": [50672, 307, 428, 1065, 2973, 21775, 8281, 13, 509, 362, 281, 2427, 294, 13, 583, 1310, 291, 382, 364, 2609, 50984], "temperature": 0.0, "avg_logprob": -0.052329256293478975, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0032646553590893745}, {"id": 206, "seek": 145140, "start": 1463.8000000000002, "end": 1470.68, "text": " don't opt in by yourself, but it's your system administrator at work, or it's a family member", "tokens": [50984, 500, 380, 2427, 294, 538, 1803, 11, 457, 309, 311, 428, 1185, 25529, 412, 589, 11, 420, 309, 311, 257, 1605, 4006, 51328], "temperature": 0.0, "avg_logprob": -0.052329256293478975, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0032646553590893745}, {"id": 207, "seek": 145140, "start": 1470.68, "end": 1479.24, "text": " who you rely on. And the web of trust can use weak evidence. It's not a zero or one decision.", "tokens": [51328, 567, 291, 10687, 322, 13, 400, 264, 3670, 295, 3361, 393, 764, 5336, 4467, 13, 467, 311, 406, 257, 4018, 420, 472, 3537, 13, 51756], "temperature": 0.0, "avg_logprob": -0.052329256293478975, "compression_ratio": 1.605263157894737, "no_speech_prob": 0.0032646553590893745}, {"id": 208, "seek": 147924, "start": 1480.1200000000001, "end": 1487.32, "text": " It's possible to combine evidence in the web of trust. And the web of trust can work with all of", "tokens": [50408, 467, 311, 1944, 281, 10432, 4467, 294, 264, 3670, 295, 3361, 13, 400, 264, 3670, 295, 3361, 393, 589, 365, 439, 295, 50768], "temperature": 0.0, "avg_logprob": -0.07977440456549327, "compression_ratio": 1.883495145631068, "no_speech_prob": 0.0017226386116817594}, {"id": 209, "seek": 147924, "start": 1487.32, "end": 1492.84, "text": " the models that I presented before. It can be used in a centralized manner. It can be used in a", "tokens": [50768, 264, 5245, 300, 286, 8212, 949, 13, 467, 393, 312, 1143, 294, 257, 32395, 9060, 13, 467, 393, 312, 1143, 294, 257, 51044], "temperature": 0.0, "avg_logprob": -0.07977440456549327, "compression_ratio": 1.883495145631068, "no_speech_prob": 0.0017226386116817594}, {"id": 210, "seek": 147924, "start": 1492.84, "end": 1498.92, "text": " federated manner. And it can be used in a peer to peer manner. And traditionally, people think of", "tokens": [51044, 38024, 770, 9060, 13, 400, 309, 393, 312, 1143, 294, 257, 15108, 281, 15108, 9060, 13, 400, 19067, 11, 561, 519, 295, 51348], "temperature": 0.0, "avg_logprob": -0.07977440456549327, "compression_ratio": 1.883495145631068, "no_speech_prob": 0.0017226386116817594}, {"id": 211, "seek": 147924, "start": 1498.92, "end": 1505.48, "text": " the web of trust as a peer to peer solution to authentication, where we go to key signing parties", "tokens": [51348, 264, 3670, 295, 3361, 382, 257, 15108, 281, 15108, 3827, 281, 26643, 11, 689, 321, 352, 281, 2141, 13393, 8265, 51676], "temperature": 0.0, "avg_logprob": -0.07977440456549327, "compression_ratio": 1.883495145631068, "no_speech_prob": 0.0017226386116817594}, {"id": 212, "seek": 150548, "start": 1505.48, "end": 1512.52, "text": " and we check fingerprints. But that doesn't have to be. And so if the web of trust is so good,", "tokens": [50364, 293, 321, 1520, 42170, 13, 583, 300, 1177, 380, 362, 281, 312, 13, 400, 370, 498, 264, 3670, 295, 3361, 307, 370, 665, 11, 50716], "temperature": 0.0, "avg_logprob": -0.05818904439608256, "compression_ratio": 1.6812227074235808, "no_speech_prob": 0.010607505217194557}, {"id": 213, "seek": 150548, "start": 1512.52, "end": 1518.76, "text": " why hasn't it succeeded? Why are we only using it in this very limited way? And I think the reason", "tokens": [50716, 983, 6132, 380, 309, 20263, 30, 1545, 366, 321, 787, 1228, 309, 294, 341, 588, 5567, 636, 30, 400, 286, 519, 264, 1778, 51028], "temperature": 0.0, "avg_logprob": -0.05818904439608256, "compression_ratio": 1.6812227074235808, "no_speech_prob": 0.010607505217194557}, {"id": 214, "seek": 150548, "start": 1518.76, "end": 1525.48, "text": " is because we've been missing the tools to make it easier to automatically integrate evidence into", "tokens": [51028, 307, 570, 321, 600, 668, 5361, 264, 3873, 281, 652, 309, 3571, 281, 6772, 13365, 4467, 666, 51364], "temperature": 0.0, "avg_logprob": -0.05818904439608256, "compression_ratio": 1.6812227074235808, "no_speech_prob": 0.010607505217194557}, {"id": 215, "seek": 150548, "start": 1525.48, "end": 1533.32, "text": " a web of trust and tools that make it easy to manage the web of trust. And I would say until", "tokens": [51364, 257, 3670, 295, 3361, 293, 3873, 300, 652, 309, 1858, 281, 3067, 264, 3670, 295, 3361, 13, 400, 286, 576, 584, 1826, 51756], "temperature": 0.0, "avg_logprob": -0.05818904439608256, "compression_ratio": 1.6812227074235808, "no_speech_prob": 0.010607505217194557}, {"id": 216, "seek": 153332, "start": 1533.32, "end": 1544.36, "text": " now, because we've been working hard on improving the tooling. So in order to illustrate the power", "tokens": [50364, 586, 11, 570, 321, 600, 668, 1364, 1152, 322, 11470, 264, 46593, 13, 407, 294, 1668, 281, 23221, 264, 1347, 50916], "temperature": 0.0, "avg_logprob": -0.08040366349396882, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.004525680094957352}, {"id": 217, "seek": 153332, "start": 1544.36, "end": 1550.6, "text": " of the tools, I want to do an example. I want to send an encrypted mail to DKG or encrypt a message", "tokens": [50916, 295, 264, 3873, 11, 286, 528, 281, 360, 364, 1365, 13, 286, 528, 281, 2845, 364, 36663, 10071, 281, 31934, 38, 420, 17972, 662, 257, 3636, 51228], "temperature": 0.0, "avg_logprob": -0.08040366349396882, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.004525680094957352}, {"id": 218, "seek": 153332, "start": 1550.6, "end": 1559.8799999999999, "text": " to DKG. So let's just try it out and see what happens. So we do SQL encrypt. We provide the email", "tokens": [51228, 281, 31934, 38, 13, 407, 718, 311, 445, 853, 309, 484, 293, 536, 437, 2314, 13, 407, 321, 360, 19200, 17972, 662, 13, 492, 2893, 264, 3796, 51692], "temperature": 0.0, "avg_logprob": -0.08040366349396882, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.004525680094957352}, {"id": 219, "seek": 155988, "start": 1559.88, "end": 1565.8000000000002, "text": " address, and we get an error. Well, that's not so great. Let's go to the key servers. Let's go on", "tokens": [50364, 2985, 11, 293, 321, 483, 364, 6713, 13, 1042, 11, 300, 311, 406, 370, 869, 13, 961, 311, 352, 281, 264, 2141, 15909, 13, 961, 311, 352, 322, 50660], "temperature": 0.0, "avg_logprob": -0.13843752787663385, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.016125723719596863}, {"id": 220, "seek": 155988, "start": 1565.8000000000002, "end": 1573.16, "text": " the network and see if we can find a certificate for DKG. So in SQ, this is the SQ network fetch", "tokens": [50660, 264, 3209, 293, 536, 498, 321, 393, 915, 257, 15953, 337, 31934, 38, 13, 407, 294, 318, 48, 11, 341, 307, 264, 318, 48, 3209, 23673, 51028], "temperature": 0.0, "avg_logprob": -0.13843752787663385, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.016125723719596863}, {"id": 221, "seek": 155988, "start": 1573.16, "end": 1578.92, "text": " sub command. And immediately we see something that doesn't give us confidence in the tools I would", "tokens": [51028, 1422, 5622, 13, 400, 4258, 321, 536, 746, 300, 1177, 380, 976, 505, 6687, 294, 264, 3873, 286, 576, 51316], "temperature": 0.0, "avg_logprob": -0.13843752787663385, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.016125723719596863}, {"id": 222, "seek": 155988, "start": 1579.88, "end": 1588.3600000000001, "text": " suspect. We imported four certificates. Ouch. Which one do we use? Which one is the right one?", "tokens": [51364, 9091, 13, 492, 25524, 1451, 32941, 13, 27217, 13, 3013, 472, 360, 321, 764, 30, 3013, 472, 307, 264, 558, 472, 30, 51788], "temperature": 0.0, "avg_logprob": -0.13843752787663385, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.016125723719596863}, {"id": 223, "seek": 158988, "start": 1590.1200000000001, "end": 1593.5600000000002, "text": " Is one of the four even the right one? Maybe it's a fifth one that we didn't find.", "tokens": [50376, 1119, 472, 295, 264, 1451, 754, 264, 558, 472, 30, 2704, 309, 311, 257, 9266, 472, 300, 321, 994, 380, 915, 13, 50548], "temperature": 0.0, "avg_logprob": -0.08807851571952348, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0029783928766846657}, {"id": 224, "seek": 158988, "start": 1594.5200000000002, "end": 1597.16, "text": " What should we do? The best thing that we can do would be to ask Daniel,", "tokens": [50596, 708, 820, 321, 360, 30, 440, 1151, 551, 300, 321, 393, 360, 576, 312, 281, 1029, 8033, 11, 50728], "temperature": 0.0, "avg_logprob": -0.08807851571952348, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0029783928766846657}, {"id": 225, "seek": 158988, "start": 1598.2, "end": 1602.68, "text": " what is your fingerprint? And then use that one. But what if we can't or it's inconvenient?", "tokens": [50780, 437, 307, 428, 30715, 30, 400, 550, 764, 300, 472, 13, 583, 437, 498, 321, 393, 380, 420, 309, 311, 46196, 30, 51004], "temperature": 0.0, "avg_logprob": -0.08807851571952348, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0029783928766846657}, {"id": 226, "seek": 158988, "start": 1603.5600000000002, "end": 1610.44, "text": " We could ask somebody else. That's pretty good that we rely on. Or a better solution is to ask", "tokens": [51048, 492, 727, 1029, 2618, 1646, 13, 663, 311, 1238, 665, 300, 321, 10687, 322, 13, 1610, 257, 1101, 3827, 307, 281, 1029, 51392], "temperature": 0.0, "avg_logprob": -0.08807851571952348, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0029783928766846657}, {"id": 227, "seek": 158988, "start": 1610.44, "end": 1615.88, "text": " multiple entities, combine the evidence, and then weigh the evidence according to the entities,", "tokens": [51392, 3866, 16667, 11, 10432, 264, 4467, 11, 293, 550, 13843, 264, 4467, 4650, 281, 264, 16667, 11, 51664], "temperature": 0.0, "avg_logprob": -0.08807851571952348, "compression_ratio": 1.6846153846153846, "no_speech_prob": 0.0029783928766846657}, {"id": 228, "seek": 161588, "start": 1615.88, "end": 1622.6000000000001, "text": " and ideally do this in a completely automated way. And then you have a certain degree of", "tokens": [50364, 293, 22915, 360, 341, 294, 257, 2584, 18473, 636, 13, 400, 550, 291, 362, 257, 1629, 4314, 295, 50700], "temperature": 0.0, "avg_logprob": -0.06657774904940991, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0018954799743369222}, {"id": 229, "seek": 161588, "start": 1622.6000000000001, "end": 1627.96, "text": " confidence that a binding is correct. And maybe that's enough for you, maybe not. That depends on", "tokens": [50700, 6687, 300, 257, 17359, 307, 3006, 13, 400, 1310, 300, 311, 1547, 337, 291, 11, 1310, 406, 13, 663, 5946, 322, 50968], "temperature": 0.0, "avg_logprob": -0.06657774904940991, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0018954799743369222}, {"id": 230, "seek": 161588, "start": 1627.96, "end": 1635.0, "text": " your threat model. And there's already a whole bunch of rudimentary evidence out there about what", "tokens": [50968, 428, 4734, 2316, 13, 400, 456, 311, 1217, 257, 1379, 3840, 295, 32109, 2328, 822, 4467, 484, 456, 466, 437, 51320], "temperature": 0.0, "avg_logprob": -0.06657774904940991, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0018954799743369222}, {"id": 231, "seek": 161588, "start": 1635.0, "end": 1640.5200000000002, "text": " certificate we should use for DKG. There are a whole bunch of key servers. There's WKD, which is", "tokens": [51320, 15953, 321, 820, 764, 337, 31934, 38, 13, 821, 366, 257, 1379, 3840, 295, 2141, 15909, 13, 821, 311, 343, 42, 35, 11, 597, 307, 51596], "temperature": 0.0, "avg_logprob": -0.06657774904940991, "compression_ratio": 1.6282051282051282, "no_speech_prob": 0.0018954799743369222}, {"id": 232, "seek": 164052, "start": 1640.52, "end": 1647.32, "text": " the Web Key Directory, and there's Dane for looking up certificates in DNS. And it turns out that", "tokens": [50364, 264, 9573, 12759, 49598, 11, 293, 456, 311, 413, 1929, 337, 1237, 493, 32941, 294, 35153, 13, 400, 309, 4523, 484, 300, 50704], "temperature": 0.0, "avg_logprob": -0.10314713991605319, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.18445639312267303}, {"id": 233, "seek": 164052, "start": 1647.32, "end": 1653.32, "text": " keys.openpgp.org is a validating key server. That means that if you attempt to upload a certificate", "tokens": [50704, 9317, 13, 15752, 79, 70, 79, 13, 4646, 307, 257, 7363, 990, 2141, 7154, 13, 663, 1355, 300, 498, 291, 5217, 281, 6580, 257, 15953, 51004], "temperature": 0.0, "avg_logprob": -0.10314713991605319, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.18445639312267303}, {"id": 234, "seek": 164052, "start": 1653.32, "end": 1659.96, "text": " to keys.openpgp.org, you get an email where the user IDs on the certificate get an email prompting", "tokens": [51004, 281, 9317, 13, 15752, 79, 70, 79, 13, 4646, 11, 291, 483, 364, 3796, 689, 264, 4195, 48212, 322, 264, 15953, 483, 364, 3796, 12391, 278, 51336], "temperature": 0.0, "avg_logprob": -0.10314713991605319, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.18445639312267303}, {"id": 235, "seek": 164052, "start": 1659.96, "end": 1667.0, "text": " them to follow a link to validate the user ID for that certificate. keys.mailvalope.com", "tokens": [51336, 552, 281, 1524, 257, 2113, 281, 29562, 264, 4195, 7348, 337, 300, 15953, 13, 9317, 13, 11799, 3337, 1114, 13, 1112, 51688], "temperature": 0.0, "avg_logprob": -0.10314713991605319, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.18445639312267303}, {"id": 236, "seek": 166700, "start": 1667.0, "end": 1673.56, "text": " does something similar. Proton mail does something similar where you don't get an email, but you", "tokens": [50364, 775, 746, 2531, 13, 10019, 266, 10071, 775, 746, 2531, 689, 291, 500, 380, 483, 364, 3796, 11, 457, 291, 50692], "temperature": 0.0, "avg_logprob": -0.1509617892178622, "compression_ratio": 1.515625, "no_speech_prob": 0.005817141849547625}, {"id": 237, "seek": 166700, "start": 1673.56, "end": 1680.84, "text": " log in, you say, this is my certificate. WKD is controlled by the user or their administrator,", "tokens": [50692, 3565, 294, 11, 291, 584, 11, 341, 307, 452, 15953, 13, 343, 42, 35, 307, 10164, 538, 264, 4195, 420, 641, 25529, 11, 51056], "temperature": 0.0, "avg_logprob": -0.1509617892178622, "compression_ratio": 1.515625, "no_speech_prob": 0.005817141849547625}, {"id": 238, "seek": 166700, "start": 1680.84, "end": 1689.48, "text": " and the same thing for Dane. And SQ network fetch already fetches them all. You don't have to do it", "tokens": [51056, 293, 264, 912, 551, 337, 413, 1929, 13, 400, 318, 48, 3209, 23673, 1217, 15136, 3781, 552, 439, 13, 509, 500, 380, 362, 281, 360, 309, 51488], "temperature": 0.0, "avg_logprob": -0.1509617892178622, "compression_ratio": 1.515625, "no_speech_prob": 0.005817141849547625}, {"id": 239, "seek": 168948, "start": 1689.48, "end": 1697.48, "text": " manually. And by the way, it records the evidence in the Web of Trust. They're stored completely as", "tokens": [50364, 16945, 13, 400, 538, 264, 636, 11, 309, 7724, 264, 4467, 294, 264, 9573, 295, 11580, 13, 814, 434, 12187, 2584, 382, 50764], "temperature": 0.0, "avg_logprob": -0.09586911865427525, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.3001687228679657}, {"id": 240, "seek": 168948, "start": 1697.48, "end": 1704.92, "text": " normal Web of Trust data structures as defined by the ITF standard. But how are they stored?", "tokens": [50764, 2710, 9573, 295, 11580, 1412, 9227, 382, 7642, 538, 264, 6783, 37, 3832, 13, 583, 577, 366, 436, 12187, 30, 51136], "temperature": 0.0, "avg_logprob": -0.09586911865427525, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.3001687228679657}, {"id": 241, "seek": 168948, "start": 1706.6, "end": 1714.84, "text": " So the way it works is we'll take keys.openpgp.org as an example. It's more or less a de facto", "tokens": [51220, 407, 264, 636, 309, 1985, 307, 321, 603, 747, 9317, 13, 15752, 79, 70, 79, 13, 4646, 382, 364, 1365, 13, 467, 311, 544, 420, 1570, 257, 368, 42225, 51632], "temperature": 0.0, "avg_logprob": -0.09586911865427525, "compression_ratio": 1.4642857142857142, "no_speech_prob": 0.3001687228679657}, {"id": 242, "seek": 171484, "start": 1714.9199999999998, "end": 1722.1999999999998, "text": " CA. So what we do locally is we create a shadow CA. We create a new certificate and we say", "tokens": [50368, 22852, 13, 407, 437, 321, 360, 16143, 307, 321, 1884, 257, 8576, 22852, 13, 492, 1884, 257, 777, 15953, 293, 321, 584, 50732], "temperature": 0.0, "avg_logprob": -0.11976773922259991, "compression_ratio": 1.6067415730337078, "no_speech_prob": 0.009846683591604233}, {"id": 243, "seek": 171484, "start": 1722.9199999999998, "end": 1730.04, "text": " downloaded from keys.openpgp.org as the user ID. We have a local trust route. The local trust route", "tokens": [50768, 21748, 490, 9317, 13, 15752, 79, 70, 79, 13, 4646, 382, 264, 4195, 7348, 13, 492, 362, 257, 2654, 3361, 7955, 13, 440, 2654, 3361, 7955, 51124], "temperature": 0.0, "avg_logprob": -0.11976773922259991, "compression_ratio": 1.6067415730337078, "no_speech_prob": 0.009846683591604233}, {"id": 244, "seek": 171484, "start": 1730.04, "end": 1741.08, "text": " says this shadow CA is an intermediate intermediary CA. We don't create one for SKS because SKS", "tokens": [51124, 1619, 341, 8576, 22852, 307, 364, 19376, 15184, 822, 22852, 13, 492, 500, 380, 1884, 472, 337, 21483, 50, 570, 21483, 50, 51676], "temperature": 0.0, "avg_logprob": -0.11976773922259991, "compression_ratio": 1.6067415730337078, "no_speech_prob": 0.009846683591604233}, {"id": 245, "seek": 174108, "start": 1741.08, "end": 1749.8799999999999, "text": " does not do any form of validation. And so in the case of keys.openpgp.org, we download a", "tokens": [50364, 775, 406, 360, 604, 1254, 295, 24071, 13, 400, 370, 294, 264, 1389, 295, 9317, 13, 15752, 79, 70, 79, 13, 4646, 11, 321, 5484, 257, 50804], "temperature": 0.0, "avg_logprob": -0.0669921875, "compression_ratio": 1.630057803468208, "no_speech_prob": 0.0032706032507121563}, {"id": 246, "seek": 174108, "start": 1749.8799999999999, "end": 1757.08, "text": " certificate from that key server. We go through the user IDs and then we create a certification for", "tokens": [50804, 15953, 490, 300, 2141, 7154, 13, 492, 352, 807, 264, 4195, 48212, 293, 550, 321, 1884, 257, 21775, 337, 51164], "temperature": 0.0, "avg_logprob": -0.0669921875, "compression_ratio": 1.630057803468208, "no_speech_prob": 0.0032706032507121563}, {"id": 247, "seek": 174108, "start": 1757.08, "end": 1764.6799999999998, "text": " the returned user IDs using the keys.openpgp.org shadow CA certificate. And this evidence is", "tokens": [51164, 264, 8752, 4195, 48212, 1228, 264, 9317, 13, 15752, 79, 70, 79, 13, 4646, 8576, 22852, 15953, 13, 400, 341, 4467, 307, 51544], "temperature": 0.0, "avg_logprob": -0.0669921875, "compression_ratio": 1.630057803468208, "no_speech_prob": 0.0032706032507121563}, {"id": 248, "seek": 176468, "start": 1764.68, "end": 1772.8400000000001, "text": " automatically combined by the Web of Trust. So we have this trust route and shadow CA's.", "tokens": [50364, 6772, 9354, 538, 264, 9573, 295, 11580, 13, 407, 321, 362, 341, 3361, 7955, 293, 8576, 22852, 311, 13, 50772], "temperature": 0.0, "avg_logprob": -0.08820060059264466, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.011499178595840931}, {"id": 249, "seek": 176468, "start": 1772.8400000000001, "end": 1777.3200000000002, "text": " They're created automatically. And by default, the shadow CA's are trusted minimally.", "tokens": [50772, 814, 434, 2942, 6772, 13, 400, 538, 7576, 11, 264, 8576, 22852, 311, 366, 16034, 4464, 379, 13, 50996], "temperature": 0.0, "avg_logprob": -0.08820060059264466, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.011499178595840931}, {"id": 250, "seek": 176468, "start": 1779.16, "end": 1783.96, "text": " Some users don't want to rely on keys.openpgp.org and that's completely understandable.", "tokens": [51088, 2188, 5022, 500, 380, 528, 281, 10687, 322, 9317, 13, 15752, 79, 70, 79, 13, 4646, 293, 300, 311, 2584, 25648, 13, 51328], "temperature": 0.0, "avg_logprob": -0.08820060059264466, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.011499178595840931}, {"id": 251, "seek": 176468, "start": 1785.4, "end": 1793.24, "text": " And as I mentioned, in the Web of Trust, you can have a varying degree of confidence in a binding", "tokens": [51400, 400, 382, 286, 2835, 11, 294, 264, 9573, 295, 11580, 11, 291, 393, 362, 257, 22984, 4314, 295, 6687, 294, 257, 17359, 51792], "temperature": 0.0, "avg_logprob": -0.08820060059264466, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.011499178595840931}, {"id": 252, "seek": 179324, "start": 1793.24, "end": 1801.08, "text": " or in a CA. And so we use the minimum, one out of 120. And what we also do is the trust", "tokens": [50364, 420, 294, 257, 22852, 13, 400, 370, 321, 764, 264, 7285, 11, 472, 484, 295, 10411, 13, 400, 437, 321, 611, 360, 307, 264, 3361, 50756], "temperature": 0.0, "avg_logprob": -0.1076291616146381, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.0004725050530396402}, {"id": 253, "seek": 179324, "start": 1801.08, "end": 1805.56, "text": " route and the shadow CA's and the certificates, the certifications that are created, they're all", "tokens": [50756, 7955, 293, 264, 8576, 22852, 311, 293, 264, 32941, 11, 264, 5351, 7833, 300, 366, 2942, 11, 436, 434, 439, 50980], "temperature": 0.0, "avg_logprob": -0.1076291616146381, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.0004725050530396402}, {"id": 254, "seek": 179324, "start": 1805.56, "end": 1813.32, "text": " marked as unexportable. And we do this in order to protect the user's privacy. So let's take a", "tokens": [50980, 12658, 382, 11572, 2707, 712, 13, 400, 321, 360, 341, 294, 1668, 281, 2371, 264, 4195, 311, 11427, 13, 407, 718, 311, 747, 257, 51368], "temperature": 0.0, "avg_logprob": -0.1076291616146381, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.0004725050530396402}, {"id": 255, "seek": 179324, "start": 1813.32, "end": 1821.64, "text": " quick look here at how the evidence is recorded. So we do sqpki list and we put down the email address", "tokens": [51368, 1702, 574, 510, 412, 577, 264, 4467, 307, 8287, 13, 407, 321, 360, 262, 80, 79, 2984, 1329, 293, 321, 829, 760, 264, 3796, 2985, 51784], "temperature": 0.0, "avg_logprob": -0.1076291616146381, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.0004725050530396402}, {"id": 256, "seek": 182164, "start": 1822.44, "end": 1829.0, "text": " and then sq helpfully shows us the three paths that it found. And at the top, we see that there's", "tokens": [50404, 293, 550, 262, 80, 854, 2277, 3110, 505, 264, 1045, 14518, 300, 309, 1352, 13, 400, 412, 264, 1192, 11, 321, 536, 300, 456, 311, 50732], "temperature": 0.0, "avg_logprob": -0.06880401043181723, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0014535814989358187}, {"id": 257, "seek": 182164, "start": 1829.0, "end": 1834.5200000000002, "text": " the local trust route that's followed by an intermediary CA called the public directories", "tokens": [50732, 264, 2654, 3361, 7955, 300, 311, 6263, 538, 364, 15184, 822, 22852, 1219, 264, 1908, 5391, 530, 51008], "temperature": 0.0, "avg_logprob": -0.06880401043181723, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0014535814989358187}, {"id": 258, "seek": 182164, "start": 1834.5200000000002, "end": 1841.48, "text": " that's followed by our shadow CA downloaded from keys.openpgp.org and then that is certifying", "tokens": [51008, 300, 311, 6263, 538, 527, 8576, 22852, 21748, 490, 9317, 13, 15752, 79, 70, 79, 13, 4646, 293, 550, 300, 307, 5351, 5489, 51356], "temperature": 0.0, "avg_logprob": -0.06880401043181723, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0014535814989358187}, {"id": 259, "seek": 182164, "start": 1842.1200000000001, "end": 1848.5200000000002, "text": " the certificate from Daniel. And what that looks like graphically is here shown at the bottom.", "tokens": [51388, 264, 15953, 490, 8033, 13, 400, 437, 300, 1542, 411, 4295, 984, 307, 510, 4898, 412, 264, 2767, 13, 51708], "temperature": 0.0, "avg_logprob": -0.06880401043181723, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.0014535814989358187}, {"id": 260, "seek": 184852, "start": 1849.08, "end": 1857.24, "text": " And some observations, the shadow CA's are partially trusted. keys.openpgp.org, we see on the", "tokens": [50392, 400, 512, 18163, 11, 264, 8576, 22852, 311, 366, 18886, 16034, 13, 9317, 13, 15752, 79, 70, 79, 13, 4646, 11, 321, 536, 322, 264, 50800], "temperature": 0.0, "avg_logprob": -0.12657813672666196, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.0024289051070809364}, {"id": 261, "seek": 184852, "start": 1857.24, "end": 1863.08, "text": " edge leading to it has a one on it. It's one out of 120. The same thing for WKD, the same thing for", "tokens": [50800, 4691, 5775, 281, 309, 575, 257, 472, 322, 309, 13, 467, 311, 472, 484, 295, 10411, 13, 440, 912, 551, 337, 343, 42, 35, 11, 264, 912, 551, 337, 51092], "temperature": 0.0, "avg_logprob": -0.12657813672666196, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.0024289051070809364}, {"id": 262, "seek": 184852, "start": 1863.08, "end": 1869.8, "text": " Dane. And we don't want to completely ever rely on all of the public directories out there. And so", "tokens": [51092, 413, 1929, 13, 400, 321, 500, 380, 528, 281, 2584, 1562, 10687, 322, 439, 295, 264, 1908, 5391, 530, 484, 456, 13, 400, 370, 51428], "temperature": 0.0, "avg_logprob": -0.12657813672666196, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.0024289051070809364}, {"id": 263, "seek": 184852, "start": 1869.8, "end": 1877.56, "text": " we insert in between a public directories shadow CA. And this acts as a sort of electrical resistor", "tokens": [51428, 321, 8969, 294, 1296, 257, 1908, 5391, 530, 8576, 22852, 13, 400, 341, 10672, 382, 257, 1333, 295, 12147, 37672, 51816], "temperature": 0.0, "avg_logprob": -0.12657813672666196, "compression_ratio": 1.6265560165975104, "no_speech_prob": 0.0024289051070809364}, {"id": 264, "seek": 187756, "start": 1877.56, "end": 1882.84, "text": " where there's a maximum of a 40 that can flow through it. In this case, we see that the trust", "tokens": [50364, 689, 456, 311, 257, 6674, 295, 257, 3356, 300, 393, 3095, 807, 309, 13, 682, 341, 1389, 11, 321, 536, 300, 264, 3361, 50628], "temperature": 0.0, "avg_logprob": -0.042543892860412595, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0013440040638670325}, {"id": 265, "seek": 187756, "start": 1882.84, "end": 1890.52, "text": " amount is three out of 120. And that's not enough to authenticate the certificate. But what's", "tokens": [50628, 2372, 307, 1045, 484, 295, 10411, 13, 400, 300, 311, 406, 1547, 281, 9214, 8700, 264, 15953, 13, 583, 437, 311, 51012], "temperature": 0.0, "avg_logprob": -0.042543892860412595, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0013440040638670325}, {"id": 266, "seek": 187756, "start": 1890.52, "end": 1897.0, "text": " interesting is that we have no evidence for other certificates either. So what do we do now? Are we", "tokens": [51012, 1880, 307, 300, 321, 362, 572, 4467, 337, 661, 32941, 2139, 13, 407, 437, 360, 321, 360, 586, 30, 2014, 321, 51336], "temperature": 0.0, "avg_logprob": -0.042543892860412595, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0013440040638670325}, {"id": 267, "seek": 187756, "start": 1897.0, "end": 1904.84, "text": " done? Well, if we're sufficiently convinced, then we're done. If not, we need to get more evidence.", "tokens": [51336, 1096, 30, 1042, 11, 498, 321, 434, 31868, 12561, 11, 550, 321, 434, 1096, 13, 759, 406, 11, 321, 643, 281, 483, 544, 4467, 13, 51728], "temperature": 0.0, "avg_logprob": -0.042543892860412595, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0013440040638670325}, {"id": 268, "seek": 190484, "start": 1904.84, "end": 1911.3999999999999, "text": " Where can we get more evidence? Now, we can think about the additional overhead of talking to Daniel", "tokens": [50364, 2305, 393, 321, 483, 544, 4467, 30, 823, 11, 321, 393, 519, 466, 264, 4497, 19922, 295, 1417, 281, 8033, 50692], "temperature": 0.0, "avg_logprob": -0.09090998389504172, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0029789882246404886}, {"id": 269, "seek": 190484, "start": 1911.3999999999999, "end": 1916.6, "text": " or finding people who know Daniel and his certificate. Whatever the case, once we're convinced,", "tokens": [50692, 420, 5006, 561, 567, 458, 8033, 293, 702, 15953, 13, 8541, 264, 1389, 11, 1564, 321, 434, 12561, 11, 50952], "temperature": 0.0, "avg_logprob": -0.09090998389504172, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0029789882246404886}, {"id": 270, "seek": 190484, "start": 1916.6, "end": 1920.76, "text": " we have two options. We can create a public certification. This is what most people do when", "tokens": [50952, 321, 362, 732, 3956, 13, 492, 393, 1884, 257, 1908, 21775, 13, 639, 307, 437, 881, 561, 360, 562, 51160], "temperature": 0.0, "avg_logprob": -0.09090998389504172, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0029789882246404886}, {"id": 271, "seek": 190484, "start": 1920.76, "end": 1925.08, "text": " they go to a key signing party. They create a certification and they publish it on the key", "tokens": [51160, 436, 352, 281, 257, 2141, 13393, 3595, 13, 814, 1884, 257, 21775, 293, 436, 11374, 309, 322, 264, 2141, 51376], "temperature": 0.0, "avg_logprob": -0.09090998389504172, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0029789882246404886}, {"id": 272, "seek": 190484, "start": 1925.08, "end": 1931.32, "text": " servers. Or we can create a private link, which is not exportable, either permanent or temporary.", "tokens": [51376, 15909, 13, 1610, 321, 393, 1884, 257, 4551, 2113, 11, 597, 307, 406, 10725, 712, 11, 2139, 10996, 420, 13413, 13, 51688], "temperature": 0.0, "avg_logprob": -0.09090998389504172, "compression_ratio": 1.7158273381294964, "no_speech_prob": 0.0029789882246404886}, {"id": 273, "seek": 193132, "start": 1932.28, "end": 1939.0, "text": " In this case, we're going to create a private link that is permanent. And we do sqpki link add, no", "tokens": [50412, 682, 341, 1389, 11, 321, 434, 516, 281, 1884, 257, 4551, 2113, 300, 307, 10996, 13, 400, 321, 360, 262, 80, 79, 2984, 2113, 909, 11, 572, 50748], "temperature": 0.0, "avg_logprob": -0.19592521304175967, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.0012445860775187612}, {"id": 274, "seek": 193132, "start": 1939.0, "end": 1948.9199999999998, "text": " password. No password required. It is the local trust route. It just works. Bam. So let's do", "tokens": [50748, 11524, 13, 883, 11524, 4739, 13, 467, 307, 264, 2654, 3361, 7955, 13, 467, 445, 1985, 13, 26630, 13, 407, 718, 311, 360, 51244], "temperature": 0.0, "avg_logprob": -0.19592521304175967, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.0012445860775187612}, {"id": 275, "seek": 193132, "start": 1948.9199999999998, "end": 1959.24, "text": " sqpki list now, fully authenticated. And does it work? It does work. sq encrypt recipient email", "tokens": [51244, 262, 80, 79, 2984, 1329, 586, 11, 4498, 9214, 3587, 13, 400, 775, 309, 589, 30, 467, 775, 589, 13, 262, 80, 17972, 662, 26216, 3796, 51760], "temperature": 0.0, "avg_logprob": -0.19592521304175967, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.0012445860775187612}, {"id": 276, "seek": 195924, "start": 1960.04, "end": 1968.92, "text": " DKG. What if we decide we want to fully trust keys.openpqp.org? Also pretty easy. This is the", "tokens": [50404, 31934, 38, 13, 708, 498, 321, 4536, 321, 528, 281, 4498, 3361, 9317, 13, 15752, 79, 80, 79, 13, 4646, 30, 2743, 1238, 1858, 13, 639, 307, 264, 50848], "temperature": 0.0, "avg_logprob": -0.13612098078573903, "compression_ratio": 1.5025125628140703, "no_speech_prob": 0.009702268056571484}, {"id": 277, "seek": 195924, "start": 1971.0, "end": 1979.64, "text": " general form for trusting any certificate as a CA. sqpki link add. And we say that we want this to", "tokens": [50952, 2674, 1254, 337, 28235, 604, 15953, 382, 257, 22852, 13, 262, 80, 79, 2984, 2113, 909, 13, 400, 321, 584, 300, 321, 528, 341, 281, 51384], "temperature": 0.0, "avg_logprob": -0.13612098078573903, "compression_ratio": 1.5025125628140703, "no_speech_prob": 0.009702268056571484}, {"id": 278, "seek": 195924, "start": 1979.64, "end": 1988.52, "text": " be a CA for anything. I'll get to what that means in a minute. In this case, we're saying keys.openpqp.org", "tokens": [51384, 312, 257, 22852, 337, 1340, 13, 286, 603, 483, 281, 437, 300, 1355, 294, 257, 3456, 13, 682, 341, 1389, 11, 321, 434, 1566, 9317, 13, 15752, 79, 80, 79, 13, 4646, 51828], "temperature": 0.0, "avg_logprob": -0.13612098078573903, "compression_ratio": 1.5025125628140703, "no_speech_prob": 0.009702268056571484}, {"id": 279, "seek": 198852, "start": 1988.6, "end": 1995.6399999999999, "text": " should be fully trusted. So let's try another email address sqpki list. It's fully authenticated,", "tokens": [50368, 820, 312, 4498, 16034, 13, 407, 718, 311, 853, 1071, 3796, 2985, 262, 80, 79, 2984, 1329, 13, 467, 311, 4498, 9214, 3587, 11, 50720], "temperature": 0.0, "avg_logprob": -0.11548149108886718, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.0036442072596400976}, {"id": 280, "seek": 198852, "start": 1996.2, "end": 2002.68, "text": " going from the local trust route to download it from keys.openpqp.org to the email address that we", "tokens": [50748, 516, 490, 264, 2654, 3361, 7955, 281, 5484, 309, 490, 9317, 13, 15752, 79, 80, 79, 13, 4646, 281, 264, 3796, 2985, 300, 321, 51072], "temperature": 0.0, "avg_logprob": -0.11548149108886718, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.0036442072596400976}, {"id": 281, "seek": 198852, "start": 2002.68, "end": 2008.44, "text": " entered. And there's more information that we can incorporate. And some of it we already do. We", "tokens": [51072, 9065, 13, 400, 456, 311, 544, 1589, 300, 321, 393, 16091, 13, 400, 512, 295, 309, 321, 1217, 360, 13, 492, 51360], "temperature": 0.0, "avg_logprob": -0.11548149108886718, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.0036442072596400976}, {"id": 282, "seek": 198852, "start": 2008.44, "end": 2015.56, "text": " have usage information, for instance, tofu. If you download a certificate from a URL, like you're", "tokens": [51360, 362, 14924, 1589, 11, 337, 5197, 11, 21419, 13, 759, 291, 5484, 257, 15953, 490, 257, 12905, 11, 411, 291, 434, 51716], "temperature": 0.0, "avg_logprob": -0.11548149108886718, "compression_ratio": 1.6317991631799162, "no_speech_prob": 0.0036442072596400976}, {"id": 283, "seek": 201556, "start": 2015.56, "end": 2022.76, "text": " downloading, for instance, Fedora, or you're downloading tales, you can monitor the URL. We", "tokens": [50364, 32529, 11, 337, 5197, 11, 7772, 3252, 11, 420, 291, 434, 32529, 27254, 11, 291, 393, 6002, 264, 12905, 13, 492, 50724], "temperature": 0.0, "avg_logprob": -0.1752251533612813, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0022847859654575586}, {"id": 284, "seek": 201556, "start": 2022.76, "end": 2031.96, "text": " can use auto-crypt information. And we can even easily introduce CA's. So what are organizational", "tokens": [50724, 393, 764, 8399, 12, 46555, 662, 1589, 13, 400, 321, 393, 754, 3612, 5366, 22852, 311, 13, 407, 437, 366, 24730, 51184], "temperature": 0.0, "avg_logprob": -0.1752251533612813, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0022847859654575586}, {"id": 285, "seek": 201556, "start": 2032.52, "end": 2039.56, "text": " CA's? You have an organization, say a company, or a group of activists, and they are willing to", "tokens": [51212, 22852, 311, 30, 509, 362, 364, 4475, 11, 584, 257, 2237, 11, 420, 257, 1594, 295, 23042, 11, 293, 436, 366, 4950, 281, 51564], "temperature": 0.0, "avg_logprob": -0.1752251533612813, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.0022847859654575586}, {"id": 286, "seek": 203956, "start": 2039.56, "end": 2045.48, "text": " delegate sort of these authentication decisions to a trusted entity. Maybe it's the admin or the", "tokens": [50364, 40999, 1333, 295, 613, 26643, 5327, 281, 257, 16034, 13977, 13, 2704, 309, 311, 264, 24236, 420, 264, 50660], "temperature": 0.0, "avg_logprob": -0.12776351424882998, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.11569333076477051}, {"id": 287, "seek": 203956, "start": 2045.48, "end": 2051.7999999999997, "text": " nerd. And if I want to talk to somebody inside of that organization, then I don't have to authenticate", "tokens": [50660, 23229, 13, 400, 498, 286, 528, 281, 751, 281, 2618, 1854, 295, 300, 4475, 11, 550, 286, 500, 380, 362, 281, 9214, 8700, 50976], "temperature": 0.0, "avg_logprob": -0.12776351424882998, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.11569333076477051}, {"id": 288, "seek": 203956, "start": 2051.7999999999997, "end": 2058.6, "text": " every individual. I just have to authenticate the CA. And now I've bootstrapped trust into the", "tokens": [50976, 633, 2609, 13, 286, 445, 362, 281, 9214, 8700, 264, 22852, 13, 400, 586, 286, 600, 11450, 19639, 3320, 3361, 666, 264, 51316], "temperature": 0.0, "avg_logprob": -0.12776351424882998, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.11569333076477051}, {"id": 289, "seek": 203956, "start": 2058.6, "end": 2066.44, "text": " organization. And by the way, we have a CA, chriscoi.sh, pgp.org. So if you want to contact us,", "tokens": [51316, 4475, 13, 400, 538, 264, 636, 11, 321, 362, 257, 22852, 11, 417, 5714, 1291, 72, 13, 2716, 11, 280, 70, 79, 13, 4646, 13, 407, 498, 291, 528, 281, 3385, 505, 11, 51708], "temperature": 0.0, "avg_logprob": -0.12776351424882998, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.11569333076477051}, {"id": 290, "seek": 206644, "start": 2066.44, "end": 2071.56, "text": " you can use it. How does it work? You first have to think about how much you want to trust it", "tokens": [50364, 291, 393, 764, 309, 13, 1012, 775, 309, 589, 30, 509, 700, 362, 281, 519, 466, 577, 709, 291, 528, 281, 3361, 309, 50620], "temperature": 0.0, "avg_logprob": -0.09234519322713217, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.008697490207850933}, {"id": 291, "seek": 206644, "start": 2072.44, "end": 2077.96, "text": " from 1 to 120. Do you want to scope the trust? Because it's our CA. We might trick you.", "tokens": [50664, 490, 502, 281, 10411, 13, 1144, 291, 528, 281, 11923, 264, 3361, 30, 1436, 309, 311, 527, 22852, 13, 492, 1062, 4282, 291, 13, 50940], "temperature": 0.0, "avg_logprob": -0.09234519322713217, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.008697490207850933}, {"id": 292, "seek": 206644, "start": 2080.04, "end": 2087.8, "text": " But you can rely on us, probably, to say what are the correct certificates for people in our", "tokens": [51044, 583, 291, 393, 10687, 322, 505, 11, 1391, 11, 281, 584, 437, 366, 264, 3006, 32941, 337, 561, 294, 527, 51432], "temperature": 0.0, "avg_logprob": -0.09234519322713217, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.008697490207850933}, {"id": 293, "seek": 208780, "start": 2087.8, "end": 2099.32, "text": " organization. So here we can partially trust the CA, sqpki.link.add. And we're limiting it", "tokens": [50364, 4475, 13, 407, 510, 321, 393, 18886, 3361, 264, 22852, 11, 262, 80, 79, 2984, 13, 22473, 13, 25224, 13, 400, 321, 434, 22083, 309, 50940], "temperature": 0.0, "avg_logprob": -0.19308955328805105, "compression_ratio": 1.4662921348314606, "no_speech_prob": 0.11109953373670578}, {"id": 294, "seek": 208780, "start": 2099.32, "end": 2105.7200000000003, "text": " to sequoia.pgp.org. So it won't be used for other certificates. And here you can see", "tokens": [50940, 281, 5123, 78, 654, 13, 79, 70, 79, 13, 4646, 13, 407, 309, 1582, 380, 312, 1143, 337, 661, 32941, 13, 400, 510, 291, 393, 536, 51260], "temperature": 0.0, "avg_logprob": -0.19308955328805105, "compression_ratio": 1.4662921348314606, "no_speech_prob": 0.11109953373670578}, {"id": 295, "seek": 208780, "start": 2106.6000000000004, "end": 2113.0, "text": " Justices' email address. I do sqpki.list. And it is fully authenticated using the CA.", "tokens": [51304, 1449, 1473, 6, 3796, 2985, 13, 286, 360, 262, 80, 79, 2984, 13, 8264, 13, 400, 309, 307, 4498, 9214, 3587, 1228, 264, 22852, 13, 51624], "temperature": 0.0, "avg_logprob": -0.19308955328805105, "compression_ratio": 1.4662921348314606, "no_speech_prob": 0.11109953373670578}, {"id": 296, "seek": 211300, "start": 2113.32, "end": 2120.92, "text": " And by the way, if you want to run your own CA, there's tooling for that too. There's open pgpca.", "tokens": [50380, 400, 538, 264, 636, 11, 498, 291, 528, 281, 1190, 428, 1065, 22852, 11, 456, 311, 46593, 337, 300, 886, 13, 821, 311, 1269, 280, 70, 79, 496, 13, 50760], "temperature": 0.0, "avg_logprob": -0.15590148501926, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.011324352584779263}, {"id": 297, "seek": 211300, "start": 2122.92, "end": 2131.48, "text": " It's a great way to bring up a CA. It's easy to use. And it's written by hyco. And I encourage", "tokens": [50860, 467, 311, 257, 869, 636, 281, 1565, 493, 257, 22852, 13, 467, 311, 1858, 281, 764, 13, 400, 309, 311, 3720, 538, 2477, 1291, 13, 400, 286, 5373, 51288], "temperature": 0.0, "avg_logprob": -0.15590148501926, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.011324352584779263}, {"id": 298, "seek": 211300, "start": 2131.48, "end": 2137.56, "text": " you to check it out. But there's more tooling out there where pki can help, where you need pki.", "tokens": [51288, 291, 281, 1520, 309, 484, 13, 583, 456, 311, 544, 46593, 484, 456, 689, 280, 2984, 393, 854, 11, 689, 291, 643, 280, 2984, 13, 51592], "temperature": 0.0, "avg_logprob": -0.15590148501926, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.011324352584779263}, {"id": 299, "seek": 213756, "start": 2138.36, "end": 2146.7599999999998, "text": " Let's look at open SSH for a moment. In open SSH, the authentication keys are the identity keys.", "tokens": [50404, 961, 311, 574, 412, 1269, 12238, 39, 337, 257, 1623, 13, 682, 1269, 12238, 39, 11, 264, 26643, 9317, 366, 264, 6575, 9317, 13, 50824], "temperature": 0.0, "avg_logprob": -0.12488811574083694, "compression_ratio": 1.5702479338842976, "no_speech_prob": 0.04657836630940437}, {"id": 300, "seek": 213756, "start": 2146.7599999999998, "end": 2151.24, "text": " And if the authentication key is compromised, users have to update. Is that a problem?", "tokens": [50824, 400, 498, 264, 26643, 2141, 307, 32463, 11, 5022, 362, 281, 5623, 13, 1119, 300, 257, 1154, 30, 51048], "temperature": 0.0, "avg_logprob": -0.12488811574083694, "compression_ratio": 1.5702479338842976, "no_speech_prob": 0.04657836630940437}, {"id": 301, "seek": 213756, "start": 2151.96, "end": 2157.7999999999997, "text": " We have a great case study, just a few months ago, GitHub accidentally leaked their private key.", "tokens": [51084, 492, 362, 257, 869, 1389, 2979, 11, 445, 257, 1326, 2493, 2057, 11, 23331, 15715, 31779, 641, 4551, 2141, 13, 51376], "temperature": 0.0, "avg_logprob": -0.12488811574083694, "compression_ratio": 1.5702479338842976, "no_speech_prob": 0.04657836630940437}, {"id": 302, "seek": 213756, "start": 2158.84, "end": 2164.6, "text": " The good news is it wasn't leaked for long. They immediately removed it, or seconds, minutes later,", "tokens": [51428, 440, 665, 2583, 307, 309, 2067, 380, 31779, 337, 938, 13, 814, 4258, 7261, 309, 11, 420, 3949, 11, 2077, 1780, 11, 51716], "temperature": 0.0, "avg_logprob": -0.12488811574083694, "compression_ratio": 1.5702479338842976, "no_speech_prob": 0.04657836630940437}, {"id": 303, "seek": 216460, "start": 2164.6, "end": 2171.7999999999997, "text": " I don't know. They rotated the key. The bad news is every single GitHub user who used their RSA key", "tokens": [50364, 286, 500, 380, 458, 13, 814, 42146, 264, 2141, 13, 440, 1578, 2583, 307, 633, 2167, 23331, 4195, 567, 1143, 641, 497, 8886, 2141, 50724], "temperature": 0.0, "avg_logprob": -0.11124502882665517, "compression_ratio": 1.5665236051502145, "no_speech_prob": 0.0025494538713246584}, {"id": 304, "seek": 216460, "start": 2172.52, "end": 2176.2799999999997, "text": " had to update their known host file. Quite the pain in the butt.", "tokens": [50760, 632, 281, 5623, 641, 2570, 3975, 3991, 13, 20464, 264, 1822, 294, 264, 6660, 13, 50948], "temperature": 0.0, "avg_logprob": -0.11124502882665517, "compression_ratio": 1.5665236051502145, "no_speech_prob": 0.0025494538713246584}, {"id": 305, "seek": 216460, "start": 2178.52, "end": 2185.08, "text": " What if you could use OpenPGP's pki and OpenPGP's certificates, where you have a separate identity", "tokens": [51060, 708, 498, 291, 727, 764, 7238, 47, 38, 47, 311, 280, 2984, 293, 7238, 47, 38, 47, 311, 32941, 11, 689, 291, 362, 257, 4994, 6575, 51388], "temperature": 0.0, "avg_logprob": -0.11124502882665517, "compression_ratio": 1.5665236051502145, "no_speech_prob": 0.0025494538713246584}, {"id": 306, "seek": 216460, "start": 2185.08, "end": 2191.3199999999997, "text": " key, and you keep the identity key offline. And when something like that happens, you can, of course,", "tokens": [51388, 2141, 11, 293, 291, 1066, 264, 6575, 2141, 21857, 13, 400, 562, 746, 411, 300, 2314, 11, 291, 393, 11, 295, 1164, 11, 51700], "temperature": 0.0, "avg_logprob": -0.11124502882665517, "compression_ratio": 1.5665236051502145, "no_speech_prob": 0.0025494538713246584}, {"id": 307, "seek": 219132, "start": 2191.32, "end": 2194.36, "text": " make an announcement, then you rotate the subkey, and that's it.", "tokens": [50364, 652, 364, 12847, 11, 550, 291, 13121, 264, 1422, 4119, 11, 293, 300, 311, 309, 13, 50516], "temperature": 0.0, "avg_logprob": -0.09768632117738114, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.003536001080647111}, {"id": 308, "seek": 219132, "start": 2196.6000000000004, "end": 2200.76, "text": " There are two former Sequoia developers who are currently working on that, Victor and David.", "tokens": [50628, 821, 366, 732, 5819, 46859, 78, 654, 8849, 567, 366, 4362, 1364, 322, 300, 11, 15777, 293, 4389, 13, 50836], "temperature": 0.0, "avg_logprob": -0.09768632117738114, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.003536001080647111}, {"id": 309, "seek": 219132, "start": 2201.8, "end": 2207.48, "text": " The project is called SSH, OpenPGP off. And I encourage you to check that out as well.", "tokens": [50888, 440, 1716, 307, 1219, 12238, 39, 11, 7238, 47, 38, 47, 766, 13, 400, 286, 5373, 291, 281, 1520, 300, 484, 382, 731, 13, 51172], "temperature": 0.0, "avg_logprob": -0.09768632117738114, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.003536001080647111}, {"id": 310, "seek": 219132, "start": 2210.04, "end": 2216.76, "text": " What about commits? I'm sure many of you have signed a commit. What does it mean? I don't know.", "tokens": [51300, 708, 466, 48311, 30, 286, 478, 988, 867, 295, 291, 362, 8175, 257, 5599, 13, 708, 775, 309, 914, 30, 286, 500, 380, 458, 13, 51636], "temperature": 0.0, "avg_logprob": -0.09768632117738114, "compression_ratio": 1.4655172413793103, "no_speech_prob": 0.003536001080647111}, {"id": 311, "seek": 221676, "start": 2217.0, "end": 2221.0, "text": " It doesn't mean anything if you don't have a policy.", "tokens": [50376, 467, 1177, 380, 914, 1340, 498, 291, 500, 380, 362, 257, 3897, 13, 50576], "temperature": 0.0, "avg_logprob": -0.29237062503130007, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.0031698248349130154}, {"id": 312, "seek": 221676, "start": 2223.0, "end": 2231.88, "text": " So we have a tool called Sequoia Git. It defines, as a document that talks about how to define a signing policy for a project.", "tokens": [50676, 407, 321, 362, 257, 2290, 1219, 46859, 78, 654, 16939, 13, 467, 23122, 11, 382, 257, 4166, 300, 6686, 466, 577, 281, 6964, 257, 13393, 3897, 337, 257, 1716, 13, 51120], "temperature": 0.0, "avg_logprob": -0.29237062503130007, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.0031698248349130154}, {"id": 313, "seek": 221676, "start": 2232.76, "end": 2239.88, "text": " You put it into a Tomo file. The Tomo file is directly embedded into your Git repository. It evolves with the project.", "tokens": [51164, 509, 829, 309, 666, 257, 5041, 78, 3991, 13, 440, 5041, 78, 3991, 307, 3838, 16741, 666, 428, 16939, 25841, 13, 467, 43737, 365, 264, 1716, 13, 51520], "temperature": 0.0, "avg_logprob": -0.29237062503130007, "compression_ratio": 1.5126903553299493, "no_speech_prob": 0.0031698248349130154}, {"id": 314, "seek": 223988, "start": 2239.96, "end": 2247.96, "text": " And then you're able to check whether or not commits are authentic according to the project developers.", "tokens": [50368, 400, 550, 291, 434, 1075, 281, 1520, 1968, 420, 406, 48311, 366, 12466, 4650, 281, 264, 1716, 8849, 13, 50768], "temperature": 0.0, "avg_logprob": -0.25831884219322676, "compression_ratio": 1.460093896713615, "no_speech_prob": 0.009242926724255085}, {"id": 315, "seek": 223988, "start": 2252.6, "end": 2259.8, "text": " So there's a whole bunch of tools that I think change the way that one could use OpenPGP and interact with the ecosystem.", "tokens": [51000, 407, 456, 311, 257, 1379, 3840, 295, 3873, 300, 286, 519, 1319, 264, 636, 300, 472, 727, 764, 7238, 47, 38, 47, 293, 4648, 365, 264, 11311, 13, 51360], "temperature": 0.0, "avg_logprob": -0.25831884219322676, "compression_ratio": 1.460093896713615, "no_speech_prob": 0.009242926724255085}, {"id": 316, "seek": 223988, "start": 2260.76, "end": 2265.32, "text": " So what if you want to use Sequoia today? Of course, SQ, I presented. You can use it.", "tokens": [51408, 407, 437, 498, 291, 528, 281, 764, 46859, 78, 654, 965, 30, 2720, 1164, 11, 318, 48, 11, 286, 8212, 13, 509, 393, 764, 309, 13, 51636], "temperature": 0.0, "avg_logprob": -0.25831884219322676, "compression_ratio": 1.460093896713615, "no_speech_prob": 0.009242926724255085}, {"id": 317, "seek": 226532, "start": 2266.28, "end": 2272.28, "text": " It's packaged for Debian, it's packaged for Fedora, it's packaged for Arch, it's packaged for other distributions.", "tokens": [50412, 467, 311, 38162, 337, 1346, 20196, 11, 309, 311, 38162, 337, 7772, 3252, 11, 309, 311, 38162, 337, 10984, 11, 309, 311, 38162, 337, 661, 37870, 13, 50712], "temperature": 0.0, "avg_logprob": -0.2240168671858938, "compression_ratio": 1.738888888888889, "no_speech_prob": 0.009248301386833191}, {"id": 318, "seek": 226532, "start": 2276.28, "end": 2288.28, "text": " But SQ is not integrated into a lot of existing tools. So do you want to live in sort of a split brain world where you have some of your tooling using some state and other tooling using other state?", "tokens": [50912, 583, 318, 48, 307, 406, 10919, 666, 257, 688, 295, 6741, 3873, 13, 407, 360, 291, 528, 281, 1621, 294, 1333, 295, 257, 7472, 3567, 1002, 689, 291, 362, 512, 295, 428, 46593, 1228, 512, 1785, 293, 661, 46593, 1228, 661, 1785, 30, 51512], "temperature": 0.0, "avg_logprob": -0.2240168671858938, "compression_ratio": 1.738888888888889, "no_speech_prob": 0.009248301386833191}, {"id": 319, "seek": 228828, "start": 2289.2400000000002, "end": 2295.2400000000002, "text": " So we have the GPG Chameleon and it is an implementation of GPG's de facto interface.", "tokens": [50412, 407, 321, 362, 264, 26039, 38, 761, 529, 306, 266, 293, 309, 307, 364, 11420, 295, 26039, 38, 311, 368, 42225, 9226, 13, 50712], "temperature": 0.0, "avg_logprob": -0.20584637778145926, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.11247444152832031}, {"id": 320, "seek": 228828, "start": 2297.2400000000002, "end": 2303.2400000000002, "text": " So you can just drop it in and use it and here you see GPG-version reports that it's the chameleon actually.", "tokens": [50812, 407, 291, 393, 445, 3270, 309, 294, 293, 764, 309, 293, 510, 291, 536, 26039, 38, 12, 29153, 7122, 300, 309, 311, 264, 417, 529, 306, 266, 767, 13, 51112], "temperature": 0.0, "avg_logprob": -0.20584637778145926, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.11247444152832031}, {"id": 321, "seek": 228828, "start": 2305.2400000000002, "end": 2311.2400000000002, "text": " And it uses both GPG state and SQs, which means that you immediately profit from SQ's PKI tooling.", "tokens": [51212, 400, 309, 4960, 1293, 26039, 38, 1785, 293, 318, 48, 82, 11, 597, 1355, 300, 291, 4258, 7475, 490, 318, 48, 311, 430, 27731, 46593, 13, 51512], "temperature": 0.0, "avg_logprob": -0.20584637778145926, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.11247444152832031}, {"id": 322, "seek": 228828, "start": 2313.2400000000002, "end": 2317.2400000000002, "text": " It automatically uses that when doing web of trust calculations.", "tokens": [51612, 467, 6772, 4960, 300, 562, 884, 3670, 295, 3361, 20448, 13, 51812], "temperature": 0.0, "avg_logprob": -0.20584637778145926, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.11247444152832031}, {"id": 323, "seek": 231828, "start": 2319.2400000000002, "end": 2321.2400000000002, "text": " So you don't actually have to do any migration.", "tokens": [50412, 407, 291, 500, 380, 767, 362, 281, 360, 604, 17011, 13, 50512], "temperature": 0.0, "avg_logprob": -0.17154441912149646, "compression_ratio": 1.5432098765432098, "no_speech_prob": 0.002626139437779784}, {"id": 324, "seek": 231828, "start": 2323.2400000000002, "end": 2333.2400000000002, "text": " And if you're using Thunderbird, we have the Octopus, which again is a drop-in equivalent API to the RMP interface that Thunderbird is currently using.", "tokens": [50612, 400, 498, 291, 434, 1228, 21023, 18080, 11, 321, 362, 264, 6788, 23280, 11, 597, 797, 307, 257, 3270, 12, 259, 10344, 9362, 281, 264, 497, 12224, 9226, 300, 21023, 18080, 307, 4362, 1228, 13, 51112], "temperature": 0.0, "avg_logprob": -0.17154441912149646, "compression_ratio": 1.5432098765432098, "no_speech_prob": 0.002626139437779784}, {"id": 325, "seek": 231828, "start": 2333.2400000000002, "end": 2337.2400000000002, "text": " And it includes web of trust support and GPG agent support.", "tokens": [51112, 400, 309, 5974, 3670, 295, 3361, 1406, 293, 26039, 38, 9461, 1406, 13, 51312], "temperature": 0.0, "avg_logprob": -0.17154441912149646, "compression_ratio": 1.5432098765432098, "no_speech_prob": 0.002626139437779784}, {"id": 326, "seek": 231828, "start": 2341.2400000000002, "end": 2347.2400000000002, "text": " Now if you want to integrate OpenPGP, there's a standard. You can read the standard as long as it gets complicated.", "tokens": [51512, 823, 498, 291, 528, 281, 13365, 7238, 47, 38, 47, 11, 456, 311, 257, 3832, 13, 509, 393, 1401, 264, 3832, 382, 938, 382, 309, 2170, 6179, 13, 51812], "temperature": 0.0, "avg_logprob": -0.17154441912149646, "compression_ratio": 1.5432098765432098, "no_speech_prob": 0.002626139437779784}, {"id": 327, "seek": 234724, "start": 2348.2, "end": 2360.2, "text": " But recently, just two months ago, Hico, Paul, Ms. Uppedy, Victor and David published a book, OpenPGP for application developers.", "tokens": [50412, 583, 3938, 11, 445, 732, 2493, 2057, 11, 389, 2789, 11, 4552, 11, 7741, 13, 624, 427, 6038, 11, 15777, 293, 4389, 6572, 257, 1446, 11, 7238, 47, 38, 47, 337, 3861, 8849, 13, 51012], "temperature": 0.0, "avg_logprob": -0.1588496850884479, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.0038747494108974934}, {"id": 328, "seek": 234724, "start": 2360.2, "end": 2364.2, "text": " It's the book that should have existed 20 years ago.", "tokens": [51012, 467, 311, 264, 1446, 300, 820, 362, 13135, 945, 924, 2057, 13, 51212], "temperature": 0.0, "avg_logprob": -0.1588496850884479, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.0038747494108974934}, {"id": 329, "seek": 234724, "start": 2364.2, "end": 2366.2, "text": " It didn't exist and now it exists.", "tokens": [51212, 467, 994, 380, 2514, 293, 586, 309, 8198, 13, 51312], "temperature": 0.0, "avg_logprob": -0.1588496850884479, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.0038747494108974934}, {"id": 330, "seek": 234724, "start": 2366.2, "end": 2376.2, "text": " It's a few hundred pages talking about some of the details of OpenPGP as they relate to the needs of application developers.", "tokens": [51312, 467, 311, 257, 1326, 3262, 7183, 1417, 466, 512, 295, 264, 4365, 295, 7238, 47, 38, 47, 382, 436, 10961, 281, 264, 2203, 295, 3861, 8849, 13, 51812], "temperature": 0.0, "avg_logprob": -0.1588496850884479, "compression_ratio": 1.5405405405405406, "no_speech_prob": 0.0038747494108974934}, {"id": 331, "seek": 237620, "start": 2377.16, "end": 2381.16, "text": " And I think that this is really the game changer.", "tokens": [50412, 400, 286, 519, 300, 341, 307, 534, 264, 1216, 22822, 13, 50612], "temperature": 0.0, "avg_logprob": -0.1494793640939813, "compression_ratio": 1.418103448275862, "no_speech_prob": 0.008402736857533455}, {"id": 332, "seek": 237620, "start": 2383.16, "end": 2385.16, "text": " Who's been funding Sequoia?", "tokens": [50712, 2102, 311, 668, 6137, 46859, 78, 654, 30, 50812], "temperature": 0.0, "avg_logprob": -0.1494793640939813, "compression_ratio": 1.418103448275862, "no_speech_prob": 0.008402736857533455}, {"id": 333, "seek": 237620, "start": 2385.16, "end": 2387.16, "text": " The project started in 2017.", "tokens": [50812, 440, 1716, 1409, 294, 6591, 13, 50912], "temperature": 0.0, "avg_logprob": -0.1494793640939813, "compression_ratio": 1.418103448275862, "no_speech_prob": 0.008402736857533455}, {"id": 334, "seek": 237620, "start": 2389.16, "end": 2391.16, "text": " For six years, the PEP Foundation funded Sequoia.", "tokens": [51012, 1171, 2309, 924, 11, 264, 430, 8929, 10335, 14385, 46859, 78, 654, 13, 51112], "temperature": 0.0, "avg_logprob": -0.1494793640939813, "compression_ratio": 1.418103448275862, "no_speech_prob": 0.008402736857533455}, {"id": 335, "seek": 237620, "start": 2391.16, "end": 2401.16, "text": " We received money from NLNet and currently we are being funded by the sovereign tech fund, at least until the end of the year.", "tokens": [51112, 492, 4613, 1460, 490, 426, 43, 31890, 293, 4362, 321, 366, 885, 14385, 538, 264, 28756, 7553, 2374, 11, 412, 1935, 1826, 264, 917, 295, 264, 1064, 13, 51612], "temperature": 0.0, "avg_logprob": -0.1494793640939813, "compression_ratio": 1.418103448275862, "no_speech_prob": 0.008402736857533455}, {"id": 336, "seek": 237620, "start": 2401.16, "end": 2403.16, "text": " And post-2024.", "tokens": [51612, 400, 2183, 12, 2009, 7911, 13, 51712], "temperature": 0.0, "avg_logprob": -0.1494793640939813, "compression_ratio": 1.418103448275862, "no_speech_prob": 0.008402736857533455}, {"id": 337, "seek": 237620, "start": 2403.16, "end": 2405.16, "text": " Well, that's an open question.", "tokens": [51712, 1042, 11, 300, 311, 364, 1269, 1168, 13, 51812], "temperature": 0.0, "avg_logprob": -0.1494793640939813, "compression_ratio": 1.418103448275862, "no_speech_prob": 0.008402736857533455}, {"id": 338, "seek": 240620, "start": 2407.16, "end": 2409.16, "text": " Maybe somebody can help us with.", "tokens": [50412, 2704, 2618, 393, 854, 505, 365, 13, 50512], "temperature": 0.0, "avg_logprob": -0.23461685509517274, "compression_ratio": 1.5302013422818792, "no_speech_prob": 0.010696867480874062}, {"id": 339, "seek": 240620, "start": 2411.16, "end": 2413.16, "text": " Thanks for listening.", "tokens": [50612, 2561, 337, 4764, 13, 50712], "temperature": 0.0, "avg_logprob": -0.23461685509517274, "compression_ratio": 1.5302013422818792, "no_speech_prob": 0.010696867480874062}, {"id": 340, "seek": 240620, "start": 2413.16, "end": 2417.16, "text": " I hope that I've convinced you that users have different needs.", "tokens": [50712, 286, 1454, 300, 286, 600, 12561, 291, 300, 5022, 362, 819, 2203, 13, 50912], "temperature": 0.0, "avg_logprob": -0.23461685509517274, "compression_ratio": 1.5302013422818792, "no_speech_prob": 0.010696867480874062}, {"id": 341, "seek": 240620, "start": 2421.16, "end": 2425.16, "text": " There are different users. They have different needs.", "tokens": [51112, 821, 366, 819, 5022, 13, 814, 362, 819, 2203, 13, 51312], "temperature": 0.0, "avg_logprob": -0.23461685509517274, "compression_ratio": 1.5302013422818792, "no_speech_prob": 0.010696867480874062}, {"id": 342, "seek": 240620, "start": 2427.16, "end": 2431.16, "text": " And I don't think that there is one universal solution.", "tokens": [51412, 400, 286, 500, 380, 519, 300, 456, 307, 472, 11455, 3827, 13, 51612], "temperature": 0.0, "avg_logprob": -0.23461685509517274, "compression_ratio": 1.5302013422818792, "no_speech_prob": 0.010696867480874062}, {"id": 343, "seek": 243116, "start": 2432.12, "end": 2438.12, "text": " There's not one implementation that is going to make everybody happy, necessarily.", "tokens": [50412, 821, 311, 406, 472, 11420, 300, 307, 516, 281, 652, 2201, 2055, 11, 4725, 13, 50712], "temperature": 0.0, "avg_logprob": -0.09769153594970703, "compression_ratio": 1.7889908256880733, "no_speech_prob": 0.01655678264796734}, {"id": 344, "seek": 243116, "start": 2438.12, "end": 2448.12, "text": " And if that implementation were to try to exist, the fact that it tries to be everything to everyone means that it's going to make some people unhappy.", "tokens": [50712, 400, 498, 300, 11420, 645, 281, 853, 281, 2514, 11, 264, 1186, 300, 309, 9898, 281, 312, 1203, 281, 1518, 1355, 300, 309, 311, 516, 281, 652, 512, 561, 22172, 13, 51212], "temperature": 0.0, "avg_logprob": -0.09769153594970703, "compression_ratio": 1.7889908256880733, "no_speech_prob": 0.01655678264796734}, {"id": 345, "seek": 243116, "start": 2450.12, "end": 2452.12, "text": " Sequoia has a different architecture.", "tokens": [51312, 46859, 78, 654, 575, 257, 819, 9482, 13, 51412], "temperature": 0.0, "avg_logprob": -0.09769153594970703, "compression_ratio": 1.7889908256880733, "no_speech_prob": 0.01655678264796734}, {"id": 346, "seek": 243116, "start": 2452.12, "end": 2454.12, "text": " It has different paradigms.", "tokens": [51412, 467, 575, 819, 13480, 328, 2592, 13, 51512], "temperature": 0.0, "avg_logprob": -0.09769153594970703, "compression_ratio": 1.7889908256880733, "no_speech_prob": 0.01655678264796734}, {"id": 347, "seek": 243116, "start": 2454.12, "end": 2456.12, "text": " Maybe it's the right one for you.", "tokens": [51512, 2704, 309, 311, 264, 558, 472, 337, 291, 13, 51612], "temperature": 0.0, "avg_logprob": -0.09769153594970703, "compression_ratio": 1.7889908256880733, "no_speech_prob": 0.01655678264796734}, {"id": 348, "seek": 243116, "start": 2456.12, "end": 2460.12, "text": " Maybe it's the right one for some non-users to convert.", "tokens": [51612, 2704, 309, 311, 264, 558, 472, 337, 512, 2107, 12, 301, 433, 281, 7620, 13, 51812], "temperature": 0.0, "avg_logprob": -0.09769153594970703, "compression_ratio": 1.7889908256880733, "no_speech_prob": 0.01655678264796734}, {"id": 349, "seek": 246116, "start": 2462.12, "end": 2466.12, "text": " And I don't think that it's going to divert them to be open PHP users.", "tokens": [50412, 400, 286, 500, 380, 519, 300, 309, 311, 516, 281, 23781, 552, 281, 312, 1269, 47298, 5022, 13, 50612], "temperature": 0.0, "avg_logprob": -0.2610745360885841, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.033208392560482025}, {"id": 350, "seek": 246116, "start": 2466.12, "end": 2470.12, "text": " I firmly believe that diversity in an ecosystem is a strength.", "tokens": [50612, 286, 20031, 1697, 300, 8811, 294, 364, 11311, 307, 257, 3800, 13, 50812], "temperature": 0.0, "avg_logprob": -0.2610745360885841, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.033208392560482025}, {"id": 351, "seek": 246116, "start": 2470.12, "end": 2472.12, "text": " I believe that we are better together.", "tokens": [50812, 286, 1697, 300, 321, 366, 1101, 1214, 13, 50912], "temperature": 0.0, "avg_logprob": -0.2610745360885841, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.033208392560482025}, {"id": 352, "seek": 246116, "start": 2472.12, "end": 2484.12, "text": " And I believe that winning is not dominance of a single implementation, but improving privacy and security for individuals.", "tokens": [50912, 400, 286, 1697, 300, 8224, 307, 406, 34987, 295, 257, 2167, 11420, 11, 457, 11470, 11427, 293, 3825, 337, 5346, 13, 51512], "temperature": 0.0, "avg_logprob": -0.2610745360885841, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.033208392560482025}, {"id": 353, "seek": 248412, "start": 2485.08, "end": 2491.08, "text": " And as a small aside, by the way, implementing your own PKI, that's the new implement your own crypto library. Please don't do that.", "tokens": [50412, 400, 382, 257, 1359, 7359, 11, 538, 264, 636, 11, 18114, 428, 1065, 430, 27731, 11, 300, 311, 264, 777, 4445, 428, 1065, 17240, 6405, 13, 2555, 500, 380, 360, 300, 13, 50712], "temperature": 0.0, "avg_logprob": -0.13668368657430013, "compression_ratio": 1.5069444444444444, "no_speech_prob": 0.007620028220117092}, {"id": 354, "seek": 248412, "start": 2494.12, "end": 2496.12, "text": " Thank you very much.", "tokens": [50864, 1044, 291, 588, 709, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13668368657430013, "compression_ratio": 1.5069444444444444, "no_speech_prob": 0.007620028220117092}, {"id": 355, "seek": 248412, "start": 2504.12, "end": 2506.12, "text": " Thank you very much. Are there any questions?", "tokens": [51364, 1044, 291, 588, 709, 13, 2014, 456, 604, 1651, 30, 51464], "temperature": 0.0, "avg_logprob": -0.13668368657430013, "compression_ratio": 1.5069444444444444, "no_speech_prob": 0.007620028220117092}, {"id": 356, "seek": 248412, "start": 2510.12, "end": 2512.12, "text": " A question there.", "tokens": [51664, 316, 1168, 456, 13, 51764], "temperature": 0.0, "avg_logprob": -0.13668368657430013, "compression_ratio": 1.5069444444444444, "no_speech_prob": 0.007620028220117092}, {"id": 357, "seek": 251412, "start": 2514.12, "end": 2516.12, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.4, "avg_logprob": -0.3666735256419462, "compression_ratio": 1.191304347826087, "no_speech_prob": 0.026565345004200935}, {"id": 358, "seek": 251412, "start": 2526.12, "end": 2528.12, "text": " Um", "tokens": [50964, 3301, 51064], "temperature": 0.4, "avg_logprob": -0.3666735256419462, "compression_ratio": 1.191304347826087, "no_speech_prob": 0.026565345004200935}, {"id": 359, "seek": 251412, "start": 2530.12, "end": 2532.12, "text": " Okay.", "tokens": [51164, 1033, 13, 51264], "temperature": 0.4, "avg_logprob": -0.3666735256419462, "compression_ratio": 1.191304347826087, "no_speech_prob": 0.026565345004200935}, {"id": 360, "seek": 251412, "start": 2532.12, "end": 2534.12, "text": " Thanks for your talk. I have a question.", "tokens": [51264, 2561, 337, 428, 751, 13, 286, 362, 257, 1168, 13, 51364], "temperature": 0.4, "avg_logprob": -0.3666735256419462, "compression_ratio": 1.191304347826087, "no_speech_prob": 0.026565345004200935}, {"id": 361, "seek": 251412, "start": 2534.12, "end": 2538.12, "text": " I currently use GPG agent as SSH agent.", "tokens": [51364, 286, 4362, 764, 26039, 38, 9461, 382, 12238, 39, 9461, 13, 51564], "temperature": 0.4, "avg_logprob": -0.3666735256419462, "compression_ratio": 1.191304347826087, "no_speech_prob": 0.026565345004200935}, {"id": 362, "seek": 251412, "start": 2538.12, "end": 2542.12, "text": " And is it possible with Sequoia too?", "tokens": [51564, 400, 307, 309, 1944, 365, 46859, 78, 654, 886, 30, 51764], "temperature": 0.4, "avg_logprob": -0.3666735256419462, "compression_ratio": 1.191304347826087, "no_speech_prob": 0.026565345004200935}, {"id": 363, "seek": 254212, "start": 2542.12, "end": 2546.12, "text": " Okay. I can't hear anything because the microphone or the speakers are pointed this direction.", "tokens": [50364, 1033, 13, 286, 393, 380, 1568, 1340, 570, 264, 10952, 420, 264, 9518, 366, 10932, 341, 3513, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17540483247666133, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.008566677570343018}, {"id": 364, "seek": 254212, "start": 2548.12, "end": 2550.12, "text": " Can you say it again?", "tokens": [50664, 1664, 291, 584, 309, 797, 30, 50764], "temperature": 0.0, "avg_logprob": -0.17540483247666133, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.008566677570343018}, {"id": 365, "seek": 254212, "start": 2550.12, "end": 2554.12, "text": " I'm currently using GPG agent SSH agent.", "tokens": [50764, 286, 478, 4362, 1228, 26039, 38, 9461, 12238, 39, 9461, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17540483247666133, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.008566677570343018}, {"id": 366, "seek": 254212, "start": 2554.12, "end": 2558.12, "text": " Can it be done with Sequoia too?", "tokens": [50964, 1664, 309, 312, 1096, 365, 46859, 78, 654, 886, 30, 51164], "temperature": 0.0, "avg_logprob": -0.17540483247666133, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.008566677570343018}, {"id": 367, "seek": 254212, "start": 2558.12, "end": 2562.12, "text": " Can you use Sequoia as a GPG agent?", "tokens": [51164, 1664, 291, 764, 46859, 78, 654, 382, 257, 26039, 38, 9461, 30, 51364], "temperature": 0.0, "avg_logprob": -0.17540483247666133, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.008566677570343018}, {"id": 368, "seek": 254212, "start": 2562.12, "end": 2564.12, "text": " SSH agent.", "tokens": [51364, 12238, 39, 9461, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17540483247666133, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.008566677570343018}, {"id": 369, "seek": 254212, "start": 2564.12, "end": 2566.12, "text": " SSH agent.", "tokens": [51464, 12238, 39, 9461, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17540483247666133, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.008566677570343018}, {"id": 370, "seek": 254212, "start": 2566.12, "end": 2568.12, "text": " Yeah.", "tokens": [51564, 865, 13, 51664], "temperature": 0.0, "avg_logprob": -0.17540483247666133, "compression_ratio": 1.5301204819277108, "no_speech_prob": 0.008566677570343018}, {"id": 371, "seek": 257212, "start": 2572.12, "end": 2574.12, "text": " Okay.", "tokens": [50364, 1033, 13, 50464], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 372, "seek": 257212, "start": 2574.12, "end": 2576.12, "text": " Okay.", "tokens": [50464, 1033, 13, 50564], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 373, "seek": 257212, "start": 2576.12, "end": 2578.12, "text": " It's okay.", "tokens": [50564, 467, 311, 1392, 13, 50664], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 374, "seek": 257212, "start": 2578.12, "end": 2580.12, "text": " Hi Neil. Thanks for the talk.", "tokens": [50664, 2421, 18615, 13, 2561, 337, 264, 751, 13, 50764], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 375, "seek": 257212, "start": 2580.12, "end": 2582.12, "text": " Lots of interesting points.", "tokens": [50764, 15908, 295, 1880, 2793, 13, 50864], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 376, "seek": 257212, "start": 2582.12, "end": 2584.12, "text": " Oh, sorry.", "tokens": [50864, 876, 11, 2597, 13, 50964], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 377, "seek": 257212, "start": 2584.12, "end": 2586.12, "text": " I'll try to speak loud.", "tokens": [50964, 286, 603, 853, 281, 1710, 6588, 13, 51064], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 378, "seek": 257212, "start": 2586.12, "end": 2588.12, "text": " Thanks for the talk. Thanks for the points raised.", "tokens": [51064, 2561, 337, 264, 751, 13, 2561, 337, 264, 2793, 6005, 13, 51164], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 379, "seek": 257212, "start": 2588.12, "end": 2590.12, "text": " Thanks for the bows.", "tokens": [51164, 2561, 337, 264, 43158, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 380, "seek": 257212, "start": 2590.12, "end": 2596.12, "text": " I'm wondering a bit about compatibility and interop. Could you speak on that topic a bit?", "tokens": [51264, 286, 478, 6359, 257, 857, 466, 34237, 293, 728, 404, 13, 7497, 291, 1710, 322, 300, 4829, 257, 857, 30, 51564], "temperature": 0.0, "avg_logprob": -0.22338589562310113, "compression_ratio": 1.6294117647058823, "no_speech_prob": 0.024902639910578728}, {"id": 381, "seek": 259612, "start": 2596.12, "end": 2600.12, "text": " Because of, well, recent developments. Where do you see Sequoia in the future?", "tokens": [50364, 1436, 295, 11, 731, 11, 5162, 20862, 13, 2305, 360, 291, 536, 46859, 78, 654, 294, 264, 2027, 30, 50564], "temperature": 0.0, "avg_logprob": -0.1738851313688317, "compression_ratio": 1.515625, "no_speech_prob": 0.16328217089176178}, {"id": 382, "seek": 259612, "start": 2600.12, "end": 2608.12, "text": " Like, especially this year and going forward when it comes to interop with other implementations and newer versions of OpenPGP.", "tokens": [50564, 1743, 11, 2318, 341, 1064, 293, 516, 2128, 562, 309, 1487, 281, 728, 404, 365, 661, 4445, 763, 293, 17628, 9606, 295, 7238, 47, 38, 47, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1738851313688317, "compression_ratio": 1.515625, "no_speech_prob": 0.16328217089176178}, {"id": 383, "seek": 259612, "start": 2608.12, "end": 2614.12, "text": " I know this is a bit of a larger topic, but maybe you can share some of your thoughts with that.", "tokens": [50964, 286, 458, 341, 307, 257, 857, 295, 257, 4833, 4829, 11, 457, 1310, 291, 393, 2073, 512, 295, 428, 4598, 365, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1738851313688317, "compression_ratio": 1.515625, "no_speech_prob": 0.16328217089176178}, {"id": 384, "seek": 259612, "start": 2614.12, "end": 2618.12, "text": " Okay. So I understood the question is what is the future compatibility with OpenPGP?", "tokens": [51264, 1033, 13, 407, 286, 7320, 264, 1168, 307, 437, 307, 264, 2027, 34237, 365, 7238, 47, 38, 47, 30, 51464], "temperature": 0.0, "avg_logprob": -0.1738851313688317, "compression_ratio": 1.515625, "no_speech_prob": 0.16328217089176178}, {"id": 385, "seek": 261812, "start": 2618.12, "end": 2628.12, "text": " And our intention is absolutely to implement whatever the ITF decides to standardize in the next revision of the OpenPGP protocol.", "tokens": [50364, 400, 527, 7789, 307, 3122, 281, 4445, 2035, 264, 6783, 37, 14898, 281, 3832, 1125, 294, 264, 958, 34218, 295, 264, 7238, 47, 38, 47, 10336, 13, 50864], "temperature": 0.0, "avg_logprob": -0.39217017945789157, "compression_ratio": 1.7514124293785311, "no_speech_prob": 0.3586623966693878}, {"id": 386, "seek": 261812, "start": 2628.12, "end": 2634.12, "text": " And I believe what your question is sort of asking about is the LibrePGP thing?", "tokens": [50864, 400, 286, 1697, 437, 428, 1168, 307, 1333, 295, 3365, 466, 307, 264, 15834, 265, 47, 38, 47, 551, 30, 51164], "temperature": 0.0, "avg_logprob": -0.39217017945789157, "compression_ratio": 1.7514124293785311, "no_speech_prob": 0.3586623966693878}, {"id": 387, "seek": 261812, "start": 2634.12, "end": 2636.12, "text": " And I think that's a good question.", "tokens": [51164, 400, 286, 519, 300, 311, 257, 665, 1168, 13, 51264], "temperature": 0.0, "avg_logprob": -0.39217017945789157, "compression_ratio": 1.7514124293785311, "no_speech_prob": 0.3586623966693878}, {"id": 388, "seek": 261812, "start": 2636.12, "end": 2638.12, "text": " I think that's a good question.", "tokens": [51264, 286, 519, 300, 311, 257, 665, 1168, 13, 51364], "temperature": 0.0, "avg_logprob": -0.39217017945789157, "compression_ratio": 1.7514124293785311, "no_speech_prob": 0.3586623966693878}, {"id": 389, "seek": 261812, "start": 2638.12, "end": 2640.12, "text": " I think that's a good question.", "tokens": [51364, 286, 519, 300, 311, 257, 665, 1168, 13, 51464], "temperature": 0.0, "avg_logprob": -0.39217017945789157, "compression_ratio": 1.7514124293785311, "no_speech_prob": 0.3586623966693878}, {"id": 390, "seek": 264012, "start": 2640.12, "end": 2648.12, "text": " And I believe what your question is sort of asking about is the LibrePGP thing?", "tokens": [50364, 400, 286, 1697, 437, 428, 1168, 307, 1333, 295, 3365, 466, 307, 264, 15834, 265, 47, 38, 47, 551, 30, 50764], "temperature": 0.0, "avg_logprob": -0.07580041296688127, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.11849230527877808}, {"id": 391, "seek": 264012, "start": 2648.12, "end": 2652.12, "text": " And I mean, that's a whole can of worms.", "tokens": [50764, 400, 286, 914, 11, 300, 311, 257, 1379, 393, 295, 28271, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07580041296688127, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.11849230527877808}, {"id": 392, "seek": 264012, "start": 2652.12, "end": 2656.12, "text": " And I think it's an extremely unfortunate situation.", "tokens": [50964, 400, 286, 519, 309, 311, 364, 4664, 17843, 2590, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07580041296688127, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.11849230527877808}, {"id": 393, "seek": 264012, "start": 2656.12, "end": 2669.12, "text": " And my personal hope is that we're all going to implement the things that the standard bodies say is the standard because it improves interoperability.", "tokens": [51164, 400, 452, 2973, 1454, 307, 300, 321, 434, 439, 516, 281, 4445, 264, 721, 300, 264, 3832, 7510, 584, 307, 264, 3832, 570, 309, 24771, 728, 7192, 2310, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07580041296688127, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.11849230527877808}, {"id": 394, "seek": 266912, "start": 2670.12, "end": 2687.12, "text": " One of the arguments around LibrePGP, which is a different, which is the GNU PG format or the GNU PG and RMP format alternative to the ITF standard,", "tokens": [50414, 1485, 295, 264, 12869, 926, 15834, 265, 47, 38, 47, 11, 597, 307, 257, 819, 11, 597, 307, 264, 46411, 52, 40975, 7877, 420, 264, 46411, 52, 40975, 293, 497, 12224, 7877, 8535, 281, 264, 6783, 37, 3832, 11, 51264], "temperature": 0.0, "avg_logprob": -0.11453880498438705, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.005722254980355501}, {"id": 395, "seek": 266912, "start": 2687.12, "end": 2692.12, "text": " is that they say we already shipped it.", "tokens": [51264, 307, 300, 436, 584, 321, 1217, 25312, 309, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11453880498438705, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.005722254980355501}, {"id": 396, "seek": 266912, "start": 2692.12, "end": 2694.12, "text": " Well, they already shipped it.", "tokens": [51514, 1042, 11, 436, 1217, 25312, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11453880498438705, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.005722254980355501}, {"id": 397, "seek": 266912, "start": 2694.12, "end": 2697.12, "text": " I think it absolutely makes sense to write down what it is that they shipped.", "tokens": [51614, 286, 519, 309, 3122, 1669, 2020, 281, 2464, 760, 437, 309, 307, 300, 436, 25312, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11453880498438705, "compression_ratio": 1.6318681318681318, "no_speech_prob": 0.005722254980355501}, {"id": 398, "seek": 269712, "start": 2697.12, "end": 2705.12, "text": " But I hope that future developments are going to go in a direction where they also support the standard.", "tokens": [50364, 583, 286, 1454, 300, 2027, 20862, 366, 516, 281, 352, 294, 257, 3513, 689, 436, 611, 1406, 264, 3832, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11671071641900566, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.008024437353014946}, {"id": 399, "seek": 269712, "start": 2705.12, "end": 2707.12, "text": " Hi.", "tokens": [50764, 2421, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11671071641900566, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.008024437353014946}, {"id": 400, "seek": 269712, "start": 2707.12, "end": 2712.12, "text": " Do you integrate with hardware backed private keys?", "tokens": [50864, 1144, 291, 13365, 365, 8837, 20391, 4551, 9317, 30, 51114], "temperature": 0.0, "avg_logprob": -0.11671071641900566, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.008024437353014946}, {"id": 401, "seek": 269712, "start": 2712.12, "end": 2715.12, "text": " So for example, Fido keys.", "tokens": [51114, 407, 337, 1365, 11, 479, 2925, 9317, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11671071641900566, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.008024437353014946}, {"id": 402, "seek": 269712, "start": 2715.12, "end": 2716.12, "text": " Right.", "tokens": [51264, 1779, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11671071641900566, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.008024437353014946}, {"id": 403, "seek": 269712, "start": 2716.12, "end": 2719.12, "text": " So there are two ways that we do integration.", "tokens": [51314, 407, 456, 366, 732, 2098, 300, 321, 360, 10980, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11671071641900566, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.008024437353014946}, {"id": 404, "seek": 269712, "start": 2719.12, "end": 2725.12, "text": " So the first one is if you're currently using GNU PG and you're using the GPG agent.", "tokens": [51464, 407, 264, 700, 472, 307, 498, 291, 434, 4362, 1228, 46411, 52, 40975, 293, 291, 434, 1228, 264, 26039, 38, 9461, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11671071641900566, "compression_ratio": 1.5116279069767442, "no_speech_prob": 0.008024437353014946}, {"id": 405, "seek": 272512, "start": 2725.12, "end": 2729.12, "text": " And then you decide, okay, I want to try out Sequoia.", "tokens": [50364, 400, 550, 291, 4536, 11, 1392, 11, 286, 528, 281, 853, 484, 46859, 78, 654, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09800474359354841, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0020809774287045}, {"id": 406, "seek": 272512, "start": 2732.12, "end": 2734.12, "text": " And you're using the Chameleon GPG.", "tokens": [50714, 400, 291, 434, 1228, 264, 761, 529, 306, 266, 26039, 38, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09800474359354841, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0020809774287045}, {"id": 407, "seek": 272512, "start": 2734.12, "end": 2737.12, "text": " Chameleon will automatically use GPG agent.", "tokens": [50814, 761, 529, 306, 266, 486, 6772, 764, 26039, 38, 9461, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09800474359354841, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0020809774287045}, {"id": 408, "seek": 272512, "start": 2737.12, "end": 2739.12, "text": " That means that there is zero configuration required.", "tokens": [50964, 663, 1355, 300, 456, 307, 4018, 11694, 4739, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09800474359354841, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0020809774287045}, {"id": 409, "seek": 272512, "start": 2739.12, "end": 2744.12, "text": " You automatically get access to all of the things that you had access to before.", "tokens": [51064, 509, 6772, 483, 2105, 281, 439, 295, 264, 721, 300, 291, 632, 2105, 281, 949, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09800474359354841, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0020809774287045}, {"id": 410, "seek": 272512, "start": 2744.12, "end": 2746.12, "text": " So that's sort of the easy thing.", "tokens": [51314, 407, 300, 311, 1333, 295, 264, 1858, 551, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09800474359354841, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0020809774287045}, {"id": 411, "seek": 272512, "start": 2746.12, "end": 2752.12, "text": " The other half is what does it look like in terms of Sequoia sort of native support.", "tokens": [51414, 440, 661, 1922, 307, 437, 775, 309, 574, 411, 294, 2115, 295, 46859, 78, 654, 1333, 295, 8470, 1406, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09800474359354841, "compression_ratio": 1.6329113924050633, "no_speech_prob": 0.0020809774287045}, {"id": 412, "seek": 275212, "start": 2752.12, "end": 2759.12, "text": " And for this, we have a private key store, which has a device driver style architecture.", "tokens": [50364, 400, 337, 341, 11, 321, 362, 257, 4551, 2141, 3531, 11, 597, 575, 257, 4302, 6787, 3758, 9482, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1426169121102111, "compression_ratio": 1.5197740112994351, "no_speech_prob": 0.0025088132824748755}, {"id": 413, "seek": 275212, "start": 2759.12, "end": 2763.12, "text": " And then there are different back ends implemented by that.", "tokens": [50714, 400, 550, 456, 366, 819, 646, 5314, 12270, 538, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1426169121102111, "compression_ratio": 1.5197740112994351, "no_speech_prob": 0.0025088132824748755}, {"id": 414, "seek": 275212, "start": 2763.12, "end": 2767.12, "text": " Again, one of the back ends is the GPG agent back end.", "tokens": [50914, 3764, 11, 472, 295, 264, 646, 5314, 307, 264, 26039, 38, 9461, 646, 917, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1426169121102111, "compression_ratio": 1.5197740112994351, "no_speech_prob": 0.0025088132824748755}, {"id": 415, "seek": 275212, "start": 2767.12, "end": 2774.12, "text": " But Hico, for instance, did a lot of work on the smart card area.", "tokens": [51114, 583, 389, 2789, 11, 337, 5197, 11, 630, 257, 688, 295, 589, 322, 264, 4069, 2920, 1859, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1426169121102111, "compression_ratio": 1.5197740112994351, "no_speech_prob": 0.0025088132824748755}, {"id": 416, "seek": 277412, "start": 2775.12, "end": 2786.12, "text": " And so if you're using an open PGG smart card, then in the future you'll be able to use the private key store and it will be able to talk to your open PGG smart card.", "tokens": [50414, 400, 370, 498, 291, 434, 1228, 364, 1269, 40975, 38, 4069, 2920, 11, 550, 294, 264, 2027, 291, 603, 312, 1075, 281, 764, 264, 4551, 2141, 3531, 293, 309, 486, 312, 1075, 281, 751, 281, 428, 1269, 40975, 38, 4069, 2920, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17448151111602783, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.058174364268779755}, {"id": 417, "seek": 277412, "start": 2786.12, "end": 2793.12, "text": " Likewise for PIV tokens and we expect to add additional things in the future.", "tokens": [50964, 30269, 337, 430, 10375, 22667, 293, 321, 2066, 281, 909, 4497, 721, 294, 264, 2027, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17448151111602783, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.058174364268779755}, {"id": 418, "seek": 279312, "start": 2793.12, "end": 2806.12, "text": " Are there any concerns or ongoing work with regards to post-quantum?", "tokens": [50364, 2014, 456, 604, 7389, 420, 10452, 589, 365, 14258, 281, 2183, 12, 358, 394, 449, 30, 51014], "temperature": 0.0, "avg_logprob": -0.1289006724502101, "compression_ratio": 1.4458598726114649, "no_speech_prob": 0.09047495573759079}, {"id": 419, "seek": 279312, "start": 2806.12, "end": 2808.12, "text": " Post-quantum is a good question.", "tokens": [51014, 10223, 12, 358, 394, 449, 307, 257, 665, 1168, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1289006724502101, "compression_ratio": 1.4458598726114649, "no_speech_prob": 0.09047495573759079}, {"id": 420, "seek": 279312, "start": 2808.12, "end": 2809.12, "text": " Right, of course.", "tokens": [51114, 1779, 11, 295, 1164, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1289006724502101, "compression_ratio": 1.4458598726114649, "no_speech_prob": 0.09047495573759079}, {"id": 421, "seek": 279312, "start": 2809.12, "end": 2816.12, "text": " The whole ITF is very interested in addressing the question of how do we deal with the post-quantum threat.", "tokens": [51164, 440, 1379, 6783, 37, 307, 588, 3102, 294, 14329, 264, 1168, 295, 577, 360, 321, 2028, 365, 264, 2183, 12, 358, 394, 449, 4734, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1289006724502101, "compression_ratio": 1.4458598726114649, "no_speech_prob": 0.09047495573759079}, {"id": 422, "seek": 281612, "start": 2816.12, "end": 2828.12, "text": " And there, as I mentioned, the ITF working group has submitted the document to the ITF for ratification.", "tokens": [50364, 400, 456, 11, 382, 286, 2835, 11, 264, 6783, 37, 1364, 1594, 575, 14405, 264, 4166, 281, 264, 6783, 37, 337, 5937, 3774, 13, 50964], "temperature": 0.0, "avg_logprob": -0.09484993969952618, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.07189227640628815}, {"id": 423, "seek": 281612, "start": 2828.12, "end": 2833.12, "text": " And it's currently in working group last call, or last call, I'm not entirely sure of the terminology.", "tokens": [50964, 400, 309, 311, 4362, 294, 1364, 1594, 1036, 818, 11, 420, 1036, 818, 11, 286, 478, 406, 7696, 988, 295, 264, 27575, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09484993969952618, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.07189227640628815}, {"id": 424, "seek": 281612, "start": 2833.12, "end": 2837.12, "text": " But we expect within the next couple of months that it will be ratified.", "tokens": [51214, 583, 321, 2066, 1951, 264, 958, 1916, 295, 2493, 300, 309, 486, 312, 5937, 2587, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09484993969952618, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.07189227640628815}, {"id": 425, "seek": 281612, "start": 2837.12, "end": 2839.12, "text": " And the working group has a nuke shatter.", "tokens": [51414, 400, 264, 1364, 1594, 575, 257, 3822, 330, 402, 1161, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09484993969952618, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.07189227640628815}, {"id": 426, "seek": 281612, "start": 2839.12, "end": 2844.12, "text": " The nuke shatter has been accepted and the nuke shatter includes post-quantum work.", "tokens": [51514, 440, 3822, 330, 402, 1161, 575, 668, 9035, 293, 264, 3822, 330, 402, 1161, 5974, 2183, 12, 358, 394, 449, 589, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09484993969952618, "compression_ratio": 1.742489270386266, "no_speech_prob": 0.07189227640628815}, {"id": 427, "seek": 284412, "start": 2844.12, "end": 2854.12, "text": " The post-quantum work has more or less already been done and it was a collaboration between the BSI and Proton primarily.", "tokens": [50364, 440, 2183, 12, 358, 394, 449, 589, 575, 544, 420, 1570, 1217, 668, 1096, 293, 309, 390, 257, 9363, 1296, 264, 363, 20262, 293, 10019, 266, 10029, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10450326204299927, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.06982144713401794}, {"id": 428, "seek": 284412, "start": 2854.12, "end": 2867.12, "text": " So the BSI a few years ago had a call and they asked, or the MTG, which is a company in Germany,", "tokens": [50864, 407, 264, 363, 20262, 257, 1326, 924, 2057, 632, 257, 818, 293, 436, 2351, 11, 420, 264, 37333, 38, 11, 597, 307, 257, 2237, 294, 7244, 11, 51514], "temperature": 0.0, "avg_logprob": -0.10450326204299927, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.06982144713401794}, {"id": 429, "seek": 284412, "start": 2867.12, "end": 2872.12, "text": " applied to do the post-quantum work in the open PGG space.", "tokens": [51514, 6456, 281, 360, 264, 2183, 12, 358, 394, 449, 589, 294, 264, 1269, 40975, 38, 1901, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10450326204299927, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.06982144713401794}, {"id": 430, "seek": 287212, "start": 2872.12, "end": 2878.12, "text": " Proton joined in and there is an entire draft or there have been multiple versions of a draft.", "tokens": [50364, 10019, 266, 6869, 294, 293, 456, 307, 364, 2302, 11206, 420, 456, 362, 668, 3866, 9606, 295, 257, 11206, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0931175694321141, "compression_ratio": 1.649402390438247, "no_speech_prob": 0.2038976103067398}, {"id": 431, "seek": 287212, "start": 2878.12, "end": 2881.12, "text": " Everybody is more or less happy with the draft.", "tokens": [50664, 7646, 307, 544, 420, 1570, 2055, 365, 264, 11206, 13, 50814], "temperature": 0.0, "avg_logprob": -0.0931175694321141, "compression_ratio": 1.649402390438247, "no_speech_prob": 0.2038976103067398}, {"id": 432, "seek": 287212, "start": 2881.12, "end": 2889.12, "text": " It is much less controversial, one might say, not that the crypto refresh is terribly controversial.", "tokens": [50814, 467, 307, 709, 1570, 17323, 11, 472, 1062, 584, 11, 406, 300, 264, 17240, 15134, 307, 22903, 17323, 13, 51214], "temperature": 0.0, "avg_logprob": -0.0931175694321141, "compression_ratio": 1.649402390438247, "no_speech_prob": 0.2038976103067398}, {"id": 433, "seek": 287212, "start": 2889.12, "end": 2895.12, "text": " And this is the direction that we're moving in and I expect that it will also be ratified very quickly.", "tokens": [51214, 400, 341, 307, 264, 3513, 300, 321, 434, 2684, 294, 293, 286, 2066, 300, 309, 486, 611, 312, 5937, 2587, 588, 2661, 13, 51514], "temperature": 0.0, "avg_logprob": -0.0931175694321141, "compression_ratio": 1.649402390438247, "no_speech_prob": 0.2038976103067398}, {"id": 434, "seek": 287212, "start": 2895.12, "end": 2900.12, "text": " The tricky part, of course, is the actual deployment in real life.", "tokens": [51514, 440, 12414, 644, 11, 295, 1164, 11, 307, 264, 3539, 19317, 294, 957, 993, 13, 51764], "temperature": 0.0, "avg_logprob": -0.0931175694321141, "compression_ratio": 1.649402390438247, "no_speech_prob": 0.2038976103067398}, {"id": 435, "seek": 290012, "start": 2900.12, "end": 2905.12, "text": " It is not a very long time but it seems that we do still have a couple of years.", "tokens": [50364, 467, 307, 406, 257, 588, 938, 565, 457, 309, 2544, 300, 321, 360, 920, 362, 257, 1916, 295, 924, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18388447938142, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.3832312226295471}, {"id": 436, "seek": 290012, "start": 2905.12, "end": 2907.12, "text": " Thank you very much.", "tokens": [50614, 1044, 291, 588, 709, 13, 50714], "temperature": 0.0, "avg_logprob": -0.18388447938142, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.3832312226295471}, {"id": 437, "seek": 290012, "start": 2907.12, "end": 2912.12, "text": " I think if there are further questions, your email was on the slide.", "tokens": [50714, 286, 519, 498, 456, 366, 3052, 1651, 11, 428, 3796, 390, 322, 264, 4137, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18388447938142, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.3832312226295471}, {"id": 438, "seek": 290012, "start": 2912.12, "end": 2916.12, "text": " Feel free to ask him, I'm assuming.", "tokens": [50964, 14113, 1737, 281, 1029, 796, 11, 286, 478, 11926, 13, 51164], "temperature": 0.0, "avg_logprob": -0.18388447938142, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.3832312226295471}, {"id": 439, "seek": 290012, "start": 2916.12, "end": 2918.12, "text": " It was a very enlightening talk.", "tokens": [51164, 467, 390, 257, 588, 18690, 4559, 751, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18388447938142, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.3832312226295471}, {"id": 440, "seek": 290012, "start": 2918.12, "end": 2921.12, "text": " It was a challenging talk too.", "tokens": [51264, 467, 390, 257, 7595, 751, 886, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18388447938142, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.3832312226295471}, {"id": 441, "seek": 290012, "start": 2921.12, "end": 2927.12, "text": " And as Belgians, we'd like to give you a token of our appreciation for your effort.", "tokens": [51414, 400, 382, 19234, 2567, 11, 321, 1116, 411, 281, 976, 291, 257, 14862, 295, 527, 18909, 337, 428, 4630, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18388447938142, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.3832312226295471}, {"id": 442, "seek": 290012, "start": 2927.12, "end": 2928.12, "text": " Thank you very much.", "tokens": [51714, 1044, 291, 588, 709, 13, 51764], "temperature": 0.0, "avg_logprob": -0.18388447938142, "compression_ratio": 1.6233766233766234, "no_speech_prob": 0.3832312226295471}, {"id": 443, "seek": 292812, "start": 2928.12, "end": 2930.12, "text": " Have a nice day.", "tokens": [50364, 3560, 257, 1481, 786, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13048887252807617, "compression_ratio": 0.6666666666666666, "no_speech_prob": 0.3904638886451721}], "language": "en"}