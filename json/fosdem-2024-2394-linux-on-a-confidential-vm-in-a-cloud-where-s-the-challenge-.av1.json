{"text": " Hello, everyone. Welcome to the virtualization dev room. My name is Vitaly. I normally work for Red Hat and you can see me being active in KVM community as well as taking care of Linux on all types of third party hypervisors and public clouds. And today I wanted to talk about bringing basically general purpose Linux distributions to the newly introduced VM type on public clouds, which is a confidential virtual machines. So if you haven't been living in a cave with no internet over the last couple years, which I wouldn't blame you because the world is a crazy place to be in now, but you may have noticed that some hyperscalers were announcing or releasing their confidential VM instance types or features. I'm not here to advertise any of them, but just for the reference, Google probably was the first with their plain AMD serve option in 2020. And now they even have a seven SNP in public review as of like last week or the week before. Microsoft Asia, they were refers to commercialize seven SNP offering AMD seven SNP and they GA in 2022. You probably see they now have Intel TDX option available in public review and Amazon offers seven SNP feature in GA. So it sounds confidential, so it must be good, right? Because we all like when our data is confidential. But what does it actually give us? Like at least like these technologies, what are they about? Like this are like both like AMD serve and all its variants and Intel TDX, they are CPU technologies. So first thing they give you is memory encryption. So your VMs memory cannot be read by your hypervisor or other guests. Second, which is important and which wasn't in like first implementation like plain serve is that your CPU status encrypted because normally hypervisor can see for example your registers where your VM is executed and if it can stop you every cycle can certainly read your data. And the last which is also important is that memory integrity guarantees are provided to you because even when your memory is encrypted, the hypervisor which is like malicious or compromised can do like an esthetic try to for example swap to memory pages. They will remain encrypted but your guest will access the wrong one, right? And it can probably mount an attack using this technique. So this all sounds great, but when we talk about confidentiality normally we say like confidentiality must be achieved in runtime at rest and it transits, right? Like very generic and all these things which I just described, they give you confidentiality at runtime, right? So what about the rest, right? Concentrality of the data in transit is not really specific to CVM because we were doing this for years, right? We know that internet is not safe place, right? So we need to encrypt our data when we send it through public channels and not only public channels, but what about storage, right? How do we ensure that the storage of the VM is also confidential because even if you have something which is confidential in memory, you will eventually need to write it to disk and do other things like you will need to read your operating system from the disk. So you need some guarantees there. The last thing I wanted to mention is that these confidential VM technologies, they don't give you any additional guarantees when you're already within the VM. So if you have an application which is attacked there, right? Nothing's gonna save you, right? The hypervisor cannot see your data, but everything which is within the VM can normally see the data. That's how it works, right? We want to put general purpose operating systems there. So yes, let's discuss a little bit about this protecting data trust because it seems that hardware technologies don't give us this, right? So first is that you want to protect at the guest level. If some cloud tells you, oh, but we are encrypting our disks, right? Like you don't need to worry. Yes, but then you have the key, right? If you can encrypt and decrypt it for me like in a transparent way, so then it's not confidential from this perspective. So you need to do it from the guest. And the thing is you need to somehow protect the operating system itself and not only data you care about because first you have some data which is really sensitive. Like think SSH host keys, right? If somebody can read it from your VM, he can impersonate himself and pretend that he's you, you know? You don't want this. Second, you have, you will say, oh, I'm running like a general purpose operating system there. It's open source. Why would I need to protect it? You don't probably need to protect it from arbitrary like reading from the host, but you still need to protect it from writing because a malicious host can try to mount an attack by modifying something in the operating system. Think about swapping SSHD binary with something, you know? How would you notice, right? You won't. And good thing is that we have some technologies in Linux already for years which are mature like locks or things like the invariative or integrity protection which you can use because even when you store your like encryption key something or like integrity hash in memory, it is protected from the host because remember your memory is encrypted, the host cannot read it. The thing is the guest needs to somehow get this key, right, when it starts and where would it get it from? So, yes, let's take a look at like how Linux normally boots and what we, how we can implement say like full disk encryption or something, right? You start booting from firmware, normally everything is UFI now and all these confidential instances, they are UFI. So, there is some firmware which comes from CloudVendor, but that's like another story. Why would you trust this firmware? You probably shouldn't, but anyway. So, then you will always have some unencrypted part, right? Because the firmware cannot jump in the encrypted part without knowing the key, right? You want to do decryption yourself, you don't want to afloat this job to someone else. So, you will always have something like bootloader, kernel, initramafas stored there in clear. Yes, you may say that we can actually do encryption at bootloader level, which is true, but then we are complicating the bootloader like a lot and the only one which does it probably is grub and nobody likes it. No, I mean, no, but it becomes, it's all like a operating system with all the complexity and everything and you don't really want that for your bootloader. You want it to be really small if present, maybe even you don't want to have a bootloader at all for confidential case. So, and then you will jump into this, you know, encrypted part, you will somehow get the key and then we'll decrypt it. So, that's how it's going to work. So, yeah, how can you provide the key to the VM? You cannot do it manually. For example, like grub, you can type it on your console. You cannot do it on a cloud because you don't trust the console. The console is an emulated device there, right? If you type your password there, the cloud will know the password, right? So, you're not going to do that and you will need to provide it like in an automated fashion, but you can only do that. you you you you So, they were suggesting if you want to have a virtual TPM device, you run a separate domain like another virtual machine which will have this like TPM device. It's really hard to implement and this like 1.5, I think, TDA specification they've added partitioning, which is somewhat similar to trust levels and I think that that's what clouds are going to use. Although, you don't know, thumb clouds may actually implement an emulated device on the host. Just for example, like you do with QEMU and SWTPM, right? You can run it as a process on the host. And not all of these solutions will give you a confidentiality. For example, the one which runs on the host obviously won't. Then there are two types of TPMs normally, stateful and stateless. Stateful is a TPM which has its state, right? And every time you run it, for example, think about it this way. It has a private key and it never changes, right? So, it's generated once when your VM is created and then every time it's loaded, you can use it for like encrypting, decrypting, something. Stateless TPM is just firmware which will generate a new key every time it boots. So, how can we use this? Let's first talk about stateful TPM. Like all these hyperscalers, they give you some sort of a stateful TPM. The question is where is the state stored, right? Because you can turn off your VM, turn it on back. So, the state needs to be saved somewhere. And it's not part of your like encrypted truth volume or anything. It's somewhere else, right? So far, again, like not an advertisement but publicly only Azure proves that this state is kept securely, that there is some attestation going on under the hood when this TPM loads, which protects it from the underlying hosts. You can't say much about other implementations, like because no such claims were made. So, you know, you don't know whether you can use it to isolate from your host or not, right? What's good about stateful TPM is that you can implement root volume like pre-encryption, right? There is a device which has like private key so it can decrypt something. So, you can take your root volume and encrypt it and upload it in an encrypted state there. And that's something which, for example, like Azure confidential decryption is doing. In theory, we don't need to pre-encrypt. We can probably do something like self-encryption. And there are such ideas floating in the air that we will start with this general-purpose Linux distro, right? Do some integrity checking. And on the first boot, you will encrypt your root volume and seal the key to the TPM. But I haven't seen such implementation yet. It's probably possible, but it's kind of hard because you need to prove that the environment where you were doing the initial encryption is saying that it was really a confidential VM doing an initial encryption. Otherwise, someone can try doing it at some other place and attack your VM. So, stateless TPM. Currently, I only know about Azure TDX which publicly offers this option. But what's good about stateless TPM is that it's just a program. You know, it's just part of the firmware. So, you can take this initial launch measurements and attest it. It never changes, right? You don't need to attest the state of the VTPM. It's going to get generated every time, right? Which is good. Think is that, again, like as I said, currently, you will have to trust your cloud provider with the provided VTPM. And yeah, there is no anything like bring your own firmware in public clouds. You can still use it for volume disc encryption if you want to use TPM, but you will probably have to do some attestation and then inject some intermediary key. And also, there is nothing like this in standard Linux tools, anything. Like you can, like just encrypting root volume to TPM is something which is like generally supported by SystemD or Clevis or other solutions. But something which would do like attestation to remote server and then bring the key is just non-existing. Second, yes, what do you do with the VTPM if the cloud provider is not telling you that its state is isolated from the host? Or doesn't tell you how it's implemented, actually. And the thing is you cannot use it, right? You probably cannot even use it for things like PCR measurements because if it's an emulated device, it can certainly get messed with, you know, and then you will see different measurements. So, the only thing you can do in this case is try ignoring this thing completely and rely on architectural attestation, something, registers which both Sev and TDX give you. The thing is, again, that our standard Linux tools for like volume encrypting, something, they don't know anything about this currently, right? So, you will have to, you know, come up with a solution for attestation and delivering like root volume key password or something there. And it's not done yet. So, just a few words about this unencrypted part, right, which I told you that will always be there, right? Even if you do like full disk encryption, which you call full, it's not going to be full because you want to load like kernel and something. So, how can you prove that these things are good? So, normally, we have two technologies which have been used. One is called secure boot, the other called like measure boot. Secure boot without a space, measured boot with a space, nobody knows why. Anyway, so secure boot proves that all loaded EFI binaries are signed by a trusted party and measured boot basically measures every important fact about the boot, like binary certificates, which signed binaries, there has to be something in special registers of TPM devices. And we need to check basically everything which is being loaded. And as I told you, like normally, again, for general purpose Linux distro, you will end up with like a kernel, initramafas, kernel command line being available in clear, not encrypted because, yes. And to protect these things, there was a concept called unified kernel image introduced, which is a very simple thing. It just you take all these artifacts like kernel, initramafas, command line, sign them together and make it like a UFI binary like which is extracting itself and launches the kernel after that. So the implications are, of course, of this like it's more secure, but it's less convenient to use. The initramafas becomes static and generated when we build UKI. And normally for a general purpose Linux distro, we want our vendors, yes, to build UKI. You want just like install an RPM, you get a UKI. You don't want to build it yourself. Otherwise, you will have to get your keys provisioned in the firmware. And not all clouds allow that, right? They may have like a vendor certificate there in UFI by default. It may not give you an option to put your own there. So you will get like a static initramafas which may or may not be a problem. Of course, you have less demands for initramafas which is on public clouds. And like you don't need to do network boot something there normally. But it's still limited. There is a system extension feature in system D which can be used to with limitations to do initramafas extension. Emanuele is going to give a talk like in an hour after me about extending UKI is going to cover this topic, how this can be done. So the other limitation is kernel command line becomes static, right? So this becomes one size fits all, right? When we build as a vendor like Fedora, we build Fedora UKI, we need to hard code kernel command line. You cannot pass like root equals UID anymore. So you need to rely on something like auto discover or something. And again, we just got an extension mechanism which is called like signed extensions. You place basically a UFI binary stub in ESP and get your kernel command line extended. This is already like publicly released in system D but these tools are still adopting this. I haven't seen like a fully working solution yet. But we're actively working on it in Fedora. Last but not least is how do you boot your UKI, right? So it is UFI binary. So it must pass secure boot checks. So it must be signed. And you can boot it either directly from firmware or you can, for example, boot it from shim if you want to have shim for some reason. For example, if the cloud provider does not allow you to have your vendor certificate in the secure boot DB. But you will still have to manage your UFI variables because there is nothing like boot menu there if you are booting directly from firmware, right? In Fedora, we have a package called UKI direct now which can manage it for you like automatically. We do things like AB booting. For example, when you install a new UKI, it's going to be tried once. If it boots, it becomes the default. If it doesn't boot, you will rework back after the reboot to the old UKI. Because otherwise, if it doesn't boot, you are like screwed completely. You won't be able, even able to access your encrypted root volume. Yes, so if we speak about stateless TPM where we don't really need to trust the provider, the cloud provider doing attestation of VTPM state under the hood, then we will need an attestation server and client. And again, there are some offerings say in the proprietary world like Intel was advertised as project ember. But there is nothing which you can use today in the open source world. There are attempts to implement this in confidential containers project. There is this thing called KBS which is both like a protocol and an implementation of this key broker server. But again, like we will need something in the standard tools to do attestation. We are yet to figure out how to tell this thing which server to attest to. Yes, so we talked a little bit about encryption as I said that for root volume, you need to at least ensure that it wasn't tampered with. And for that you can probably use integrity checking. But then problems are very similar there because now instead of the password, you will have to somehow convey the right hash ID to use for the checked part. Right? Yeah, so I'm a little bit out of time here. But yes, you will still need to use all the technologies which I described for encryption. You will have to ensure the integrity of this non-encrypted, non-verified part because UKI is still going to be on ESP which is like VFAT, you cannot attach anything there. Right? Okay, so just a few words. Even if you have your VM which started and checked, yes, everything, you need to verify that you are basically connecting to the VM you expect because think about host starting your VM somewhere and then starting another one which is completely encrypted and was like host and you know, oil miners there are changed. How would you know that you are connecting your VM? So you probably need runtime attestation and clouds are offering you something but there is also no open source, something standard for that. Okay, I'll skip to the last and the most important slide. Thank you very much for listening. You probably don't really have time for questions but I can take as many as I can before dying in the hallway. Yeah, so thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.64, "text": " Hello, everyone. Welcome to the virtualization dev room. My name is Vitaly. I normally work", "tokens": [50364, 2425, 11, 1518, 13, 4027, 281, 264, 6374, 2144, 1905, 1808, 13, 1222, 1315, 307, 48307, 88, 13, 286, 5646, 589, 50946], "temperature": 0.0, "avg_logprob": -0.20979221888950894, "compression_ratio": 1.3775510204081634, "no_speech_prob": 0.3828868567943573}, {"id": 1, "seek": 0, "start": 11.64, "end": 19.02, "text": " for Red Hat and you can see me being active in KVM community as well as taking care of", "tokens": [50946, 337, 4477, 15867, 293, 291, 393, 536, 385, 885, 4967, 294, 591, 53, 44, 1768, 382, 731, 382, 1940, 1127, 295, 51315], "temperature": 0.0, "avg_logprob": -0.20979221888950894, "compression_ratio": 1.3775510204081634, "no_speech_prob": 0.3828868567943573}, {"id": 2, "seek": 0, "start": 19.02, "end": 26.84, "text": " Linux on all types of third party hypervisors and public clouds. And today I wanted to talk", "tokens": [51315, 18734, 322, 439, 3467, 295, 2636, 3595, 9848, 4938, 830, 293, 1908, 12193, 13, 400, 965, 286, 1415, 281, 751, 51706], "temperature": 0.0, "avg_logprob": -0.20979221888950894, "compression_ratio": 1.3775510204081634, "no_speech_prob": 0.3828868567943573}, {"id": 3, "seek": 2684, "start": 26.84, "end": 35.68, "text": " about bringing basically general purpose Linux distributions to the newly introduced VM type", "tokens": [50364, 466, 5062, 1936, 2674, 4334, 18734, 37870, 281, 264, 15109, 7268, 18038, 2010, 50806], "temperature": 0.0, "avg_logprob": -0.19318526131766184, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.08135359734296799}, {"id": 4, "seek": 2684, "start": 35.68, "end": 44.0, "text": " on public clouds, which is a confidential virtual machines. So if you haven't been living in a", "tokens": [50806, 322, 1908, 12193, 11, 597, 307, 257, 27054, 6374, 8379, 13, 407, 498, 291, 2378, 380, 668, 2647, 294, 257, 51222], "temperature": 0.0, "avg_logprob": -0.19318526131766184, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.08135359734296799}, {"id": 5, "seek": 2684, "start": 44.0, "end": 49.120000000000005, "text": " cave with no internet over the last couple years, which I wouldn't blame you because the world is", "tokens": [51222, 11730, 365, 572, 4705, 670, 264, 1036, 1916, 924, 11, 597, 286, 2759, 380, 10127, 291, 570, 264, 1002, 307, 51478], "temperature": 0.0, "avg_logprob": -0.19318526131766184, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.08135359734296799}, {"id": 6, "seek": 2684, "start": 49.120000000000005, "end": 56.36, "text": " a crazy place to be in now, but you may have noticed that some hyperscalers were announcing", "tokens": [51478, 257, 3219, 1081, 281, 312, 294, 586, 11, 457, 291, 815, 362, 5694, 300, 512, 7420, 433, 9895, 433, 645, 28706, 51840], "temperature": 0.0, "avg_logprob": -0.19318526131766184, "compression_ratio": 1.5387755102040817, "no_speech_prob": 0.08135359734296799}, {"id": 7, "seek": 5636, "start": 56.36, "end": 65.92, "text": " or releasing their confidential VM instance types or features. I'm not here to advertise any of", "tokens": [50364, 420, 16327, 641, 27054, 18038, 5197, 3467, 420, 4122, 13, 286, 478, 406, 510, 281, 35379, 604, 295, 50842], "temperature": 0.0, "avg_logprob": -0.2825279780796596, "compression_ratio": 1.4114832535885167, "no_speech_prob": 0.06764126569032669}, {"id": 8, "seek": 5636, "start": 65.92, "end": 74.48, "text": " them, but just for the reference, Google probably was the first with their plain AMD serve option in", "tokens": [50842, 552, 11, 457, 445, 337, 264, 6408, 11, 3329, 1391, 390, 264, 700, 365, 641, 11121, 34808, 4596, 3614, 294, 51270], "temperature": 0.0, "avg_logprob": -0.2825279780796596, "compression_ratio": 1.4114832535885167, "no_speech_prob": 0.06764126569032669}, {"id": 9, "seek": 5636, "start": 74.48, "end": 83.48, "text": " 2020. And now they even have a seven SNP in public review as of like last week or the week before.", "tokens": [51270, 4808, 13, 400, 586, 436, 754, 362, 257, 3407, 13955, 47, 294, 1908, 3131, 382, 295, 411, 1036, 1243, 420, 264, 1243, 949, 13, 51720], "temperature": 0.0, "avg_logprob": -0.2825279780796596, "compression_ratio": 1.4114832535885167, "no_speech_prob": 0.06764126569032669}, {"id": 10, "seek": 8348, "start": 84.44, "end": 93.92, "text": " Microsoft Asia, they were refers to commercialize seven SNP offering AMD seven SNP and they", "tokens": [50412, 8116, 10038, 11, 436, 645, 14942, 281, 6841, 1125, 3407, 13955, 47, 8745, 34808, 3407, 13955, 47, 293, 436, 50886], "temperature": 0.0, "avg_logprob": -0.4731017642550998, "compression_ratio": 1.2684563758389262, "no_speech_prob": 0.022784829139709473}, {"id": 11, "seek": 8348, "start": 93.92, "end": 104.28, "text": " GA in 2022. You probably see they now have Intel TDX option available in public review and Amazon", "tokens": [50886, 22841, 294, 20229, 13, 509, 1391, 536, 436, 586, 362, 19762, 42606, 55, 3614, 2435, 294, 1908, 3131, 293, 6795, 51404], "temperature": 0.0, "avg_logprob": -0.4731017642550998, "compression_ratio": 1.2684563758389262, "no_speech_prob": 0.022784829139709473}, {"id": 12, "seek": 10428, "start": 104.72, "end": 114.48, "text": " offers seven SNP feature in GA. So it sounds confidential, so it must be good, right? Because", "tokens": [50386, 7736, 3407, 13955, 47, 4111, 294, 22841, 13, 407, 309, 3263, 27054, 11, 370, 309, 1633, 312, 665, 11, 558, 30, 1436, 50874], "temperature": 0.0, "avg_logprob": -0.23439489092145646, "compression_ratio": 1.4764397905759161, "no_speech_prob": 0.06792885065078735}, {"id": 13, "seek": 10428, "start": 114.48, "end": 122.12, "text": " we all like when our data is confidential. But what does it actually give us? Like at least like", "tokens": [50874, 321, 439, 411, 562, 527, 1412, 307, 27054, 13, 583, 437, 775, 309, 767, 976, 505, 30, 1743, 412, 1935, 411, 51256], "temperature": 0.0, "avg_logprob": -0.23439489092145646, "compression_ratio": 1.4764397905759161, "no_speech_prob": 0.06792885065078735}, {"id": 14, "seek": 10428, "start": 122.12, "end": 130.68, "text": " these technologies, what are they about? Like this are like both like AMD serve and all its", "tokens": [51256, 613, 7943, 11, 437, 366, 436, 466, 30, 1743, 341, 366, 411, 1293, 411, 34808, 4596, 293, 439, 1080, 51684], "temperature": 0.0, "avg_logprob": -0.23439489092145646, "compression_ratio": 1.4764397905759161, "no_speech_prob": 0.06792885065078735}, {"id": 15, "seek": 13068, "start": 131.32, "end": 140.36, "text": " variants and Intel TDX, they are CPU technologies. So first thing they give you is memory encryption.", "tokens": [50396, 21669, 293, 19762, 42606, 55, 11, 436, 366, 13199, 7943, 13, 407, 700, 551, 436, 976, 291, 307, 4675, 29575, 13, 50848], "temperature": 0.0, "avg_logprob": -0.20193166875127536, "compression_ratio": 1.5051020408163265, "no_speech_prob": 0.09819474071264267}, {"id": 16, "seek": 13068, "start": 140.36, "end": 151.60000000000002, "text": " So your VMs memory cannot be read by your hypervisor or other guests. Second, which is important", "tokens": [50848, 407, 428, 18038, 82, 4675, 2644, 312, 1401, 538, 428, 9848, 16457, 420, 661, 9804, 13, 5736, 11, 597, 307, 1021, 51410], "temperature": 0.0, "avg_logprob": -0.20193166875127536, "compression_ratio": 1.5051020408163265, "no_speech_prob": 0.09819474071264267}, {"id": 17, "seek": 13068, "start": 151.60000000000002, "end": 156.52, "text": " and which wasn't in like first implementation like plain serve is that your CPU status encrypted", "tokens": [51410, 293, 597, 2067, 380, 294, 411, 700, 11420, 411, 11121, 4596, 307, 300, 428, 13199, 6558, 36663, 51656], "temperature": 0.0, "avg_logprob": -0.20193166875127536, "compression_ratio": 1.5051020408163265, "no_speech_prob": 0.09819474071264267}, {"id": 18, "seek": 15652, "start": 156.56, "end": 162.20000000000002, "text": " because normally hypervisor can see for example your registers where your VM is executed and if it", "tokens": [50366, 570, 5646, 9848, 16457, 393, 536, 337, 1365, 428, 38351, 689, 428, 18038, 307, 17577, 293, 498, 309, 50648], "temperature": 0.0, "avg_logprob": -0.2218696923903477, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.05725548416376114}, {"id": 19, "seek": 15652, "start": 162.20000000000002, "end": 169.60000000000002, "text": " can stop you every cycle can certainly read your data. And the last which is also important is", "tokens": [50648, 393, 1590, 291, 633, 6586, 393, 3297, 1401, 428, 1412, 13, 400, 264, 1036, 597, 307, 611, 1021, 307, 51018], "temperature": 0.0, "avg_logprob": -0.2218696923903477, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.05725548416376114}, {"id": 20, "seek": 15652, "start": 169.60000000000002, "end": 176.4, "text": " that memory integrity guarantees are provided to you because even when your memory is encrypted,", "tokens": [51018, 300, 4675, 16000, 32567, 366, 5649, 281, 291, 570, 754, 562, 428, 4675, 307, 36663, 11, 51358], "temperature": 0.0, "avg_logprob": -0.2218696923903477, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.05725548416376114}, {"id": 21, "seek": 15652, "start": 176.4, "end": 183.28, "text": " the hypervisor which is like malicious or compromised can do like an esthetic try to for", "tokens": [51358, 264, 9848, 16457, 597, 307, 411, 33496, 420, 32463, 393, 360, 411, 364, 871, 17151, 853, 281, 337, 51702], "temperature": 0.0, "avg_logprob": -0.2218696923903477, "compression_ratio": 1.6478260869565218, "no_speech_prob": 0.05725548416376114}, {"id": 22, "seek": 18328, "start": 183.32, "end": 188.48, "text": " example swap to memory pages. They will remain encrypted but your guest will access the wrong", "tokens": [50366, 1365, 18135, 281, 4675, 7183, 13, 814, 486, 6222, 36663, 457, 428, 8341, 486, 2105, 264, 2085, 50624], "temperature": 0.0, "avg_logprob": -0.22894767235065328, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.017276808619499207}, {"id": 23, "seek": 18328, "start": 188.48, "end": 195.8, "text": " one, right? And it can probably mount an attack using this technique. So this all sounds great,", "tokens": [50624, 472, 11, 558, 30, 400, 309, 393, 1391, 3746, 364, 2690, 1228, 341, 6532, 13, 407, 341, 439, 3263, 869, 11, 50990], "temperature": 0.0, "avg_logprob": -0.22894767235065328, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.017276808619499207}, {"id": 24, "seek": 18328, "start": 195.8, "end": 204.0, "text": " but when we talk about confidentiality normally we say like confidentiality must be achieved in", "tokens": [50990, 457, 562, 321, 751, 466, 27054, 507, 5646, 321, 584, 411, 27054, 507, 1633, 312, 11042, 294, 51400], "temperature": 0.0, "avg_logprob": -0.22894767235065328, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.017276808619499207}, {"id": 25, "seek": 18328, "start": 204.0, "end": 211.72, "text": " runtime at rest and it transits, right? Like very generic and all these things which I just described,", "tokens": [51400, 34474, 412, 1472, 293, 309, 1145, 1208, 11, 558, 30, 1743, 588, 19577, 293, 439, 613, 721, 597, 286, 445, 7619, 11, 51786], "temperature": 0.0, "avg_logprob": -0.22894767235065328, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.017276808619499207}, {"id": 26, "seek": 21172, "start": 211.84, "end": 219.52, "text": " they give you confidentiality at runtime, right? So what about the rest, right?", "tokens": [50370, 436, 976, 291, 27054, 507, 412, 34474, 11, 558, 30, 407, 437, 466, 264, 1472, 11, 558, 30, 50754], "temperature": 0.0, "avg_logprob": -0.16900685012981456, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.013598877005279064}, {"id": 27, "seek": 21172, "start": 219.52, "end": 226.24, "text": " Concentrality of the data in transit is not really specific to CVM because we were doing this for", "tokens": [50754, 2656, 2207, 81, 1860, 295, 264, 1412, 294, 17976, 307, 406, 534, 2685, 281, 22995, 44, 570, 321, 645, 884, 341, 337, 51090], "temperature": 0.0, "avg_logprob": -0.16900685012981456, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.013598877005279064}, {"id": 28, "seek": 21172, "start": 226.24, "end": 232.92, "text": " years, right? We know that internet is not safe place, right? So we need to encrypt our data when", "tokens": [51090, 924, 11, 558, 30, 492, 458, 300, 4705, 307, 406, 3273, 1081, 11, 558, 30, 407, 321, 643, 281, 17972, 662, 527, 1412, 562, 51424], "temperature": 0.0, "avg_logprob": -0.16900685012981456, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.013598877005279064}, {"id": 29, "seek": 21172, "start": 232.92, "end": 240.6, "text": " we send it through public channels and not only public channels, but what about storage, right?", "tokens": [51424, 321, 2845, 309, 807, 1908, 9235, 293, 406, 787, 1908, 9235, 11, 457, 437, 466, 6725, 11, 558, 30, 51808], "temperature": 0.0, "avg_logprob": -0.16900685012981456, "compression_ratio": 1.6940639269406392, "no_speech_prob": 0.013598877005279064}, {"id": 30, "seek": 24060, "start": 240.64, "end": 249.6, "text": " How do we ensure that the storage of the VM is also confidential because even if you have something", "tokens": [50366, 1012, 360, 321, 5586, 300, 264, 6725, 295, 264, 18038, 307, 611, 27054, 570, 754, 498, 291, 362, 746, 50814], "temperature": 0.0, "avg_logprob": -0.1441565454006195, "compression_ratio": 1.5879120879120878, "no_speech_prob": 0.024747300893068314}, {"id": 31, "seek": 24060, "start": 249.6, "end": 258.36, "text": " which is confidential in memory, you will eventually need to write it to disk and do other", "tokens": [50814, 597, 307, 27054, 294, 4675, 11, 291, 486, 4728, 643, 281, 2464, 309, 281, 12355, 293, 360, 661, 51252], "temperature": 0.0, "avg_logprob": -0.1441565454006195, "compression_ratio": 1.5879120879120878, "no_speech_prob": 0.024747300893068314}, {"id": 32, "seek": 24060, "start": 258.36, "end": 264.68, "text": " things like you will need to read your operating system from the disk. So you need some guarantees", "tokens": [51252, 721, 411, 291, 486, 643, 281, 1401, 428, 7447, 1185, 490, 264, 12355, 13, 407, 291, 643, 512, 32567, 51568], "temperature": 0.0, "avg_logprob": -0.1441565454006195, "compression_ratio": 1.5879120879120878, "no_speech_prob": 0.024747300893068314}, {"id": 33, "seek": 26468, "start": 264.72, "end": 271.52, "text": " there. The last thing I wanted to mention is that these confidential VM technologies, they don't", "tokens": [50366, 456, 13, 440, 1036, 551, 286, 1415, 281, 2152, 307, 300, 613, 27054, 18038, 7943, 11, 436, 500, 380, 50706], "temperature": 0.0, "avg_logprob": -0.1385282329891039, "compression_ratio": 1.6567796610169492, "no_speech_prob": 0.03544287011027336}, {"id": 34, "seek": 26468, "start": 271.52, "end": 277.72, "text": " give you any additional guarantees when you're already within the VM. So if you have an application", "tokens": [50706, 976, 291, 604, 4497, 32567, 562, 291, 434, 1217, 1951, 264, 18038, 13, 407, 498, 291, 362, 364, 3861, 51016], "temperature": 0.0, "avg_logprob": -0.1385282329891039, "compression_ratio": 1.6567796610169492, "no_speech_prob": 0.03544287011027336}, {"id": 35, "seek": 26468, "start": 277.72, "end": 283.16, "text": " which is attacked there, right? Nothing's gonna save you, right? The hypervisor cannot see your", "tokens": [51016, 597, 307, 12692, 456, 11, 558, 30, 6693, 311, 799, 3155, 291, 11, 558, 30, 440, 9848, 16457, 2644, 536, 428, 51288], "temperature": 0.0, "avg_logprob": -0.1385282329891039, "compression_ratio": 1.6567796610169492, "no_speech_prob": 0.03544287011027336}, {"id": 36, "seek": 26468, "start": 283.16, "end": 289.48, "text": " data, but everything which is within the VM can normally see the data. That's how it works, right?", "tokens": [51288, 1412, 11, 457, 1203, 597, 307, 1951, 264, 18038, 393, 5646, 536, 264, 1412, 13, 663, 311, 577, 309, 1985, 11, 558, 30, 51604], "temperature": 0.0, "avg_logprob": -0.1385282329891039, "compression_ratio": 1.6567796610169492, "no_speech_prob": 0.03544287011027336}, {"id": 37, "seek": 28948, "start": 289.52000000000004, "end": 295.52000000000004, "text": " We want to put general purpose operating systems there. So yes, let's discuss a little bit about", "tokens": [50366, 492, 528, 281, 829, 2674, 4334, 7447, 3652, 456, 13, 407, 2086, 11, 718, 311, 2248, 257, 707, 857, 466, 50666], "temperature": 0.0, "avg_logprob": -0.17758050918579102, "compression_ratio": 1.6131687242798354, "no_speech_prob": 0.017395377159118652}, {"id": 38, "seek": 28948, "start": 295.52000000000004, "end": 303.76, "text": " this protecting data trust because it seems that hardware technologies don't give us this, right?", "tokens": [50666, 341, 12316, 1412, 3361, 570, 309, 2544, 300, 8837, 7943, 500, 380, 976, 505, 341, 11, 558, 30, 51078], "temperature": 0.0, "avg_logprob": -0.17758050918579102, "compression_ratio": 1.6131687242798354, "no_speech_prob": 0.017395377159118652}, {"id": 39, "seek": 28948, "start": 303.76, "end": 311.92, "text": " So first is that you want to protect at the guest level. If some cloud tells you, oh, but we are", "tokens": [51078, 407, 700, 307, 300, 291, 528, 281, 2371, 412, 264, 8341, 1496, 13, 759, 512, 4588, 5112, 291, 11, 1954, 11, 457, 321, 366, 51486], "temperature": 0.0, "avg_logprob": -0.17758050918579102, "compression_ratio": 1.6131687242798354, "no_speech_prob": 0.017395377159118652}, {"id": 40, "seek": 28948, "start": 311.92, "end": 317.24, "text": " encrypting our disks, right? Like you don't need to worry. Yes, but then you have the key, right? If", "tokens": [51486, 17972, 662, 278, 527, 41617, 11, 558, 30, 1743, 291, 500, 380, 643, 281, 3292, 13, 1079, 11, 457, 550, 291, 362, 264, 2141, 11, 558, 30, 759, 51752], "temperature": 0.0, "avg_logprob": -0.17758050918579102, "compression_ratio": 1.6131687242798354, "no_speech_prob": 0.017395377159118652}, {"id": 41, "seek": 31724, "start": 317.28000000000003, "end": 324.8, "text": " you can encrypt and decrypt it for me like in a transparent way, so then it's not confidential from", "tokens": [50366, 291, 393, 17972, 662, 293, 979, 627, 662, 309, 337, 385, 411, 294, 257, 12737, 636, 11, 370, 550, 309, 311, 406, 27054, 490, 50742], "temperature": 0.0, "avg_logprob": -0.14213355044101147, "compression_ratio": 1.6058091286307055, "no_speech_prob": 0.013466235250234604}, {"id": 42, "seek": 31724, "start": 324.8, "end": 332.2, "text": " this perspective. So you need to do it from the guest. And the thing is you need to somehow", "tokens": [50742, 341, 4585, 13, 407, 291, 643, 281, 360, 309, 490, 264, 8341, 13, 400, 264, 551, 307, 291, 643, 281, 6063, 51112], "temperature": 0.0, "avg_logprob": -0.14213355044101147, "compression_ratio": 1.6058091286307055, "no_speech_prob": 0.013466235250234604}, {"id": 43, "seek": 31724, "start": 332.2, "end": 340.08, "text": " protect the operating system itself and not only data you care about because first you have some", "tokens": [51112, 2371, 264, 7447, 1185, 2564, 293, 406, 787, 1412, 291, 1127, 466, 570, 700, 291, 362, 512, 51506], "temperature": 0.0, "avg_logprob": -0.14213355044101147, "compression_ratio": 1.6058091286307055, "no_speech_prob": 0.013466235250234604}, {"id": 44, "seek": 31724, "start": 340.08, "end": 346.32, "text": " data which is really sensitive. Like think SSH host keys, right? If somebody can read it from your", "tokens": [51506, 1412, 597, 307, 534, 9477, 13, 1743, 519, 12238, 39, 3975, 9317, 11, 558, 30, 759, 2618, 393, 1401, 309, 490, 428, 51818], "temperature": 0.0, "avg_logprob": -0.14213355044101147, "compression_ratio": 1.6058091286307055, "no_speech_prob": 0.013466235250234604}, {"id": 45, "seek": 34632, "start": 346.4, "end": 353.76, "text": " VM, he can impersonate himself and pretend that he's you, you know? You don't want this. Second,", "tokens": [50368, 18038, 11, 415, 393, 38147, 473, 3647, 293, 11865, 300, 415, 311, 291, 11, 291, 458, 30, 509, 500, 380, 528, 341, 13, 5736, 11, 50736], "temperature": 0.0, "avg_logprob": -0.1575191143861751, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.030587103217840195}, {"id": 46, "seek": 34632, "start": 353.76, "end": 361.12, "text": " you have, you will say, oh, I'm running like a general purpose operating system there. It's", "tokens": [50736, 291, 362, 11, 291, 486, 584, 11, 1954, 11, 286, 478, 2614, 411, 257, 2674, 4334, 7447, 1185, 456, 13, 467, 311, 51104], "temperature": 0.0, "avg_logprob": -0.1575191143861751, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.030587103217840195}, {"id": 47, "seek": 34632, "start": 361.12, "end": 367.76, "text": " open source. Why would I need to protect it? You don't probably need to protect it from arbitrary", "tokens": [51104, 1269, 4009, 13, 1545, 576, 286, 643, 281, 2371, 309, 30, 509, 500, 380, 1391, 643, 281, 2371, 309, 490, 23211, 51436], "temperature": 0.0, "avg_logprob": -0.1575191143861751, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.030587103217840195}, {"id": 48, "seek": 34632, "start": 367.76, "end": 373.76, "text": " like reading from the host, but you still need to protect it from writing because a malicious host", "tokens": [51436, 411, 3760, 490, 264, 3975, 11, 457, 291, 920, 643, 281, 2371, 309, 490, 3579, 570, 257, 33496, 3975, 51736], "temperature": 0.0, "avg_logprob": -0.1575191143861751, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.030587103217840195}, {"id": 49, "seek": 37376, "start": 373.8, "end": 379.08, "text": " can try to mount an attack by modifying something in the operating system. Think about swapping", "tokens": [50366, 393, 853, 281, 3746, 364, 2690, 538, 42626, 746, 294, 264, 7447, 1185, 13, 6557, 466, 1693, 10534, 50630], "temperature": 0.0, "avg_logprob": -0.162124563665951, "compression_ratio": 1.4527363184079602, "no_speech_prob": 0.01899605058133602}, {"id": 50, "seek": 37376, "start": 379.08, "end": 388.03999999999996, "text": " SSHD binary with something, you know? How would you notice, right? You won't. And good thing is that", "tokens": [50630, 12238, 22859, 17434, 365, 746, 11, 291, 458, 30, 1012, 576, 291, 3449, 11, 558, 30, 509, 1582, 380, 13, 400, 665, 551, 307, 300, 51078], "temperature": 0.0, "avg_logprob": -0.162124563665951, "compression_ratio": 1.4527363184079602, "no_speech_prob": 0.01899605058133602}, {"id": 51, "seek": 37376, "start": 388.03999999999996, "end": 397.32, "text": " we have some technologies in Linux already for years which are mature like locks or things like", "tokens": [51078, 321, 362, 512, 7943, 294, 18734, 1217, 337, 924, 597, 366, 14442, 411, 20703, 420, 721, 411, 51542], "temperature": 0.0, "avg_logprob": -0.162124563665951, "compression_ratio": 1.4527363184079602, "no_speech_prob": 0.01899605058133602}, {"id": 52, "seek": 39732, "start": 397.36, "end": 405.84, "text": " the invariative or integrity protection which you can use because even when you store your", "tokens": [50366, 264, 33270, 1166, 420, 16000, 6334, 597, 291, 393, 764, 570, 754, 562, 291, 3531, 428, 50790], "temperature": 0.0, "avg_logprob": -0.23019826607625993, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.09228291362524033}, {"id": 53, "seek": 39732, "start": 405.84, "end": 412.88, "text": " like encryption key something or like integrity hash in memory, it is protected from the host", "tokens": [50790, 411, 29575, 2141, 746, 420, 411, 16000, 22019, 294, 4675, 11, 309, 307, 10594, 490, 264, 3975, 51142], "temperature": 0.0, "avg_logprob": -0.23019826607625993, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.09228291362524033}, {"id": 54, "seek": 39732, "start": 412.88, "end": 418.92, "text": " because remember your memory is encrypted, the host cannot read it. The thing is the guest needs to", "tokens": [51142, 570, 1604, 428, 4675, 307, 36663, 11, 264, 3975, 2644, 1401, 309, 13, 440, 551, 307, 264, 8341, 2203, 281, 51444], "temperature": 0.0, "avg_logprob": -0.23019826607625993, "compression_ratio": 1.7005988023952097, "no_speech_prob": 0.09228291362524033}, {"id": 55, "seek": 41892, "start": 418.96000000000004, "end": 429.0, "text": " somehow get this key, right, when it starts and where would it get it from? So, yes, let's take a look", "tokens": [50366, 6063, 483, 341, 2141, 11, 558, 11, 562, 309, 3719, 293, 689, 576, 309, 483, 309, 490, 30, 407, 11, 2086, 11, 718, 311, 747, 257, 574, 50868], "temperature": 0.0, "avg_logprob": -0.2291229351146801, "compression_ratio": 1.4974358974358974, "no_speech_prob": 0.12536710500717163}, {"id": 56, "seek": 41892, "start": 429.0, "end": 439.72, "text": " at like how Linux normally boots and what we, how we can implement say like full disk encryption", "tokens": [50868, 412, 411, 577, 18734, 5646, 15194, 293, 437, 321, 11, 577, 321, 393, 4445, 584, 411, 1577, 12355, 29575, 51404], "temperature": 0.0, "avg_logprob": -0.2291229351146801, "compression_ratio": 1.4974358974358974, "no_speech_prob": 0.12536710500717163}, {"id": 57, "seek": 41892, "start": 439.72, "end": 447.04, "text": " or something, right? You start booting from firmware, normally everything is UFI now and all", "tokens": [51404, 420, 746, 11, 558, 30, 509, 722, 11450, 278, 490, 30289, 11, 5646, 1203, 307, 624, 38568, 586, 293, 439, 51770], "temperature": 0.0, "avg_logprob": -0.2291229351146801, "compression_ratio": 1.4974358974358974, "no_speech_prob": 0.12536710500717163}, {"id": 58, "seek": 44704, "start": 447.08000000000004, "end": 453.84000000000003, "text": " these confidential instances, they are UFI. So, there is some firmware which comes from", "tokens": [50366, 613, 27054, 14519, 11, 436, 366, 624, 38568, 13, 407, 11, 456, 307, 512, 30289, 597, 1487, 490, 50704], "temperature": 0.0, "avg_logprob": -0.16626048874069047, "compression_ratio": 1.5622317596566524, "no_speech_prob": 0.013370691798627377}, {"id": 59, "seek": 44704, "start": 453.84000000000003, "end": 460.68, "text": " CloudVendor, but that's like another story. Why would you trust this firmware? You probably", "tokens": [50704, 8061, 53, 521, 284, 11, 457, 300, 311, 411, 1071, 1657, 13, 1545, 576, 291, 3361, 341, 30289, 30, 509, 1391, 51046], "temperature": 0.0, "avg_logprob": -0.16626048874069047, "compression_ratio": 1.5622317596566524, "no_speech_prob": 0.013370691798627377}, {"id": 60, "seek": 44704, "start": 460.68, "end": 469.52000000000004, "text": " shouldn't, but anyway. So, then you will always have some unencrypted part, right? Because the", "tokens": [51046, 4659, 380, 11, 457, 4033, 13, 407, 11, 550, 291, 486, 1009, 362, 512, 517, 22660, 627, 25383, 644, 11, 558, 30, 1436, 264, 51488], "temperature": 0.0, "avg_logprob": -0.16626048874069047, "compression_ratio": 1.5622317596566524, "no_speech_prob": 0.013370691798627377}, {"id": 61, "seek": 44704, "start": 469.52000000000004, "end": 474.04, "text": " firmware cannot jump in the encrypted part without knowing the key, right? You want to do", "tokens": [51488, 30289, 2644, 3012, 294, 264, 36663, 644, 1553, 5276, 264, 2141, 11, 558, 30, 509, 528, 281, 360, 51714], "temperature": 0.0, "avg_logprob": -0.16626048874069047, "compression_ratio": 1.5622317596566524, "no_speech_prob": 0.013370691798627377}, {"id": 62, "seek": 47404, "start": 474.36, "end": 482.08000000000004, "text": " decryption yourself, you don't want to afloat this job to someone else. So, you will always have", "tokens": [50380, 979, 627, 1695, 1803, 11, 291, 500, 380, 528, 281, 3238, 752, 267, 341, 1691, 281, 1580, 1646, 13, 407, 11, 291, 486, 1009, 362, 50766], "temperature": 0.0, "avg_logprob": -0.19661765005074294, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.019857238978147507}, {"id": 63, "seek": 47404, "start": 482.08000000000004, "end": 490.56, "text": " something like bootloader, kernel, initramafas stored there in clear. Yes, you may say that we", "tokens": [50766, 746, 411, 11450, 2907, 260, 11, 28256, 11, 3157, 2356, 2792, 296, 12187, 456, 294, 1850, 13, 1079, 11, 291, 815, 584, 300, 321, 51190], "temperature": 0.0, "avg_logprob": -0.19661765005074294, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.019857238978147507}, {"id": 64, "seek": 47404, "start": 490.56, "end": 496.92, "text": " can actually do encryption at bootloader level, which is true, but then we are complicating the", "tokens": [51190, 393, 767, 360, 29575, 412, 11450, 2907, 260, 1496, 11, 597, 307, 2074, 11, 457, 550, 321, 366, 16060, 990, 264, 51508], "temperature": 0.0, "avg_logprob": -0.19661765005074294, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.019857238978147507}, {"id": 65, "seek": 47404, "start": 496.92, "end": 502.24, "text": " bootloader like a lot and the only one which does it probably is grub and nobody likes it.", "tokens": [51508, 11450, 2907, 260, 411, 257, 688, 293, 264, 787, 472, 597, 775, 309, 1391, 307, 677, 836, 293, 5079, 5902, 309, 13, 51774], "temperature": 0.0, "avg_logprob": -0.19661765005074294, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.019857238978147507}, {"id": 66, "seek": 50224, "start": 502.8, "end": 509.2, "text": " No, I mean, no, but it becomes, it's all like a operating system with all the complexity and", "tokens": [50392, 883, 11, 286, 914, 11, 572, 11, 457, 309, 3643, 11, 309, 311, 439, 411, 257, 7447, 1185, 365, 439, 264, 14024, 293, 50712], "temperature": 0.0, "avg_logprob": -0.24604750652702487, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.018791550770401955}, {"id": 67, "seek": 50224, "start": 509.2, "end": 514.0, "text": " everything and you don't really want that for your bootloader. You want it to be really small if", "tokens": [50712, 1203, 293, 291, 500, 380, 534, 528, 300, 337, 428, 11450, 2907, 260, 13, 509, 528, 309, 281, 312, 534, 1359, 498, 50952], "temperature": 0.0, "avg_logprob": -0.24604750652702487, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.018791550770401955}, {"id": 68, "seek": 50224, "start": 515.76, "end": 521.6, "text": " present, maybe even you don't want to have a bootloader at all for confidential case. So,", "tokens": [51040, 1974, 11, 1310, 754, 291, 500, 380, 528, 281, 362, 257, 11450, 2907, 260, 412, 439, 337, 27054, 1389, 13, 407, 11, 51332], "temperature": 0.0, "avg_logprob": -0.24604750652702487, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.018791550770401955}, {"id": 69, "seek": 50224, "start": 521.6, "end": 527.92, "text": " and then you will jump into this, you know, encrypted part, you will somehow get the key and", "tokens": [51332, 293, 550, 291, 486, 3012, 666, 341, 11, 291, 458, 11, 36663, 644, 11, 291, 486, 6063, 483, 264, 2141, 293, 51648], "temperature": 0.0, "avg_logprob": -0.24604750652702487, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.018791550770401955}, {"id": 70, "seek": 52792, "start": 528.0, "end": 535.1999999999999, "text": " then we'll decrypt it. So, that's how it's going to work. So, yeah, how can you provide the key to", "tokens": [50368, 550, 321, 603, 979, 627, 662, 309, 13, 407, 11, 300, 311, 577, 309, 311, 516, 281, 589, 13, 407, 11, 1338, 11, 577, 393, 291, 2893, 264, 2141, 281, 50728], "temperature": 0.0, "avg_logprob": -0.13617950015597874, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.005428259260952473}, {"id": 71, "seek": 52792, "start": 535.1999999999999, "end": 541.7199999999999, "text": " the VM? You cannot do it manually. For example, like grub, you can type it on your console. You", "tokens": [50728, 264, 18038, 30, 509, 2644, 360, 309, 16945, 13, 1171, 1365, 11, 411, 677, 836, 11, 291, 393, 2010, 309, 322, 428, 11076, 13, 509, 51054], "temperature": 0.0, "avg_logprob": -0.13617950015597874, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.005428259260952473}, {"id": 72, "seek": 52792, "start": 541.7199999999999, "end": 546.3199999999999, "text": " cannot do it on a cloud because you don't trust the console. The console is an emulated device", "tokens": [51054, 2644, 360, 309, 322, 257, 4588, 570, 291, 500, 380, 3361, 264, 11076, 13, 440, 11076, 307, 364, 846, 6987, 4302, 51284], "temperature": 0.0, "avg_logprob": -0.13617950015597874, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.005428259260952473}, {"id": 73, "seek": 52792, "start": 546.3199999999999, "end": 552.9599999999999, "text": " there, right? If you type your password there, the cloud will know the password, right? So,", "tokens": [51284, 456, 11, 558, 30, 759, 291, 2010, 428, 11524, 456, 11, 264, 4588, 486, 458, 264, 11524, 11, 558, 30, 407, 11, 51616], "temperature": 0.0, "avg_logprob": -0.13617950015597874, "compression_ratio": 1.6565217391304348, "no_speech_prob": 0.005428259260952473}, {"id": 74, "seek": 55296, "start": 552.96, "end": 560.4000000000001, "text": " you're not going to do that and you will need to provide it like in an automated fashion, but you", "tokens": [50364, 291, 434, 406, 516, 281, 360, 300, 293, 291, 486, 643, 281, 2893, 309, 411, 294, 364, 18473, 6700, 11, 457, 291, 50736], "temperature": 0.0, "avg_logprob": -0.23652419447898865, "compression_ratio": 1.2365591397849462, "no_speech_prob": 0.05769658833742142}, {"id": 75, "seek": 55296, "start": 560.4000000000001, "end": 564.08, "text": " can only do that.", "tokens": [50736, 393, 787, 360, 300, 13, 50920], "temperature": 0.0, "avg_logprob": -0.23652419447898865, "compression_ratio": 1.2365591397849462, "no_speech_prob": 0.05769658833742142}, {"id": 76, "seek": 58296, "start": 582.96, "end": 584.48, "text": " you", "tokens": [50412, 291, 50440], "temperature": 0.0, "avg_logprob": -0.9934096932411194, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.8437824845314026}, {"id": 77, "seek": 61296, "start": 612.96, "end": 614.48, "text": " you", "tokens": [50412, 291, 50440], "temperature": 0.0, "avg_logprob": -0.8282632231712341, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.5361102223396301}, {"id": 78, "seek": 64296, "start": 642.96, "end": 644.48, "text": " you", "tokens": [50412, 291, 50440], "temperature": 0.0, "avg_logprob": -0.828130841255188, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.5147673487663269}, {"id": 79, "seek": 67296, "start": 672.96, "end": 673.52, "text": " you", "tokens": [50364, 291, 50392], "temperature": 0.0, "avg_logprob": -0.21657745152303617, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.012343370355665684}, {"id": 80, "seek": 67296, "start": 681.6800000000001, "end": 687.9200000000001, "text": " So, they were suggesting if you want to have a virtual TPM device, you run a separate domain", "tokens": [50800, 407, 11, 436, 645, 18094, 498, 291, 528, 281, 362, 257, 6374, 314, 18819, 4302, 11, 291, 1190, 257, 4994, 9274, 51112], "temperature": 0.0, "avg_logprob": -0.21657745152303617, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.012343370355665684}, {"id": 81, "seek": 67296, "start": 687.9200000000001, "end": 693.84, "text": " like another virtual machine which will have this like TPM device. It's really hard to implement", "tokens": [51112, 411, 1071, 6374, 3479, 597, 486, 362, 341, 411, 314, 18819, 4302, 13, 467, 311, 534, 1152, 281, 4445, 51408], "temperature": 0.0, "avg_logprob": -0.21657745152303617, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.012343370355665684}, {"id": 82, "seek": 67296, "start": 693.84, "end": 700.48, "text": " and this like 1.5, I think, TDA specification they've added partitioning, which is somewhat", "tokens": [51408, 293, 341, 411, 502, 13, 20, 11, 286, 519, 11, 314, 7509, 31256, 436, 600, 3869, 24808, 278, 11, 597, 307, 8344, 51740], "temperature": 0.0, "avg_logprob": -0.21657745152303617, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.012343370355665684}, {"id": 83, "seek": 70048, "start": 700.48, "end": 708.16, "text": " similar to trust levels and I think that that's what clouds are going to use. Although,", "tokens": [50364, 2531, 281, 3361, 4358, 293, 286, 519, 300, 300, 311, 437, 12193, 366, 516, 281, 764, 13, 5780, 11, 50748], "temperature": 0.0, "avg_logprob": -0.20741616068659602, "compression_ratio": 1.3989637305699483, "no_speech_prob": 0.023800058290362358}, {"id": 84, "seek": 70048, "start": 709.84, "end": 716.8000000000001, "text": " you don't know, thumb clouds may actually implement an emulated device on the host. Just", "tokens": [50832, 291, 500, 380, 458, 11, 9298, 12193, 815, 767, 4445, 364, 846, 6987, 4302, 322, 264, 3975, 13, 1449, 51180], "temperature": 0.0, "avg_logprob": -0.20741616068659602, "compression_ratio": 1.3989637305699483, "no_speech_prob": 0.023800058290362358}, {"id": 85, "seek": 70048, "start": 716.8000000000001, "end": 723.52, "text": " for example, like you do with QEMU and SWTPM, right? You can run it as a process on the host.", "tokens": [51180, 337, 1365, 11, 411, 291, 360, 365, 1249, 6683, 52, 293, 20346, 51, 18819, 11, 558, 30, 509, 393, 1190, 309, 382, 257, 1399, 322, 264, 3975, 13, 51516], "temperature": 0.0, "avg_logprob": -0.20741616068659602, "compression_ratio": 1.3989637305699483, "no_speech_prob": 0.023800058290362358}, {"id": 86, "seek": 72352, "start": 723.76, "end": 731.04, "text": " And not all of these solutions will give you a confidentiality. For example, the one which runs", "tokens": [50376, 400, 406, 439, 295, 613, 6547, 486, 976, 291, 257, 27054, 507, 13, 1171, 1365, 11, 264, 472, 597, 6676, 50740], "temperature": 0.0, "avg_logprob": -0.13118534643673202, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.078000009059906}, {"id": 87, "seek": 72352, "start": 731.04, "end": 739.52, "text": " on the host obviously won't. Then there are two types of TPMs normally, stateful and stateless.", "tokens": [50740, 322, 264, 3975, 2745, 1582, 380, 13, 1396, 456, 366, 732, 3467, 295, 314, 18819, 82, 5646, 11, 1785, 906, 293, 2219, 4272, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13118534643673202, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.078000009059906}, {"id": 88, "seek": 72352, "start": 739.52, "end": 745.52, "text": " Stateful is a TPM which has its state, right? And every time you run it, for example, think about", "tokens": [51164, 4533, 906, 307, 257, 314, 18819, 597, 575, 1080, 1785, 11, 558, 30, 400, 633, 565, 291, 1190, 309, 11, 337, 1365, 11, 519, 466, 51464], "temperature": 0.0, "avg_logprob": -0.13118534643673202, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.078000009059906}, {"id": 89, "seek": 72352, "start": 745.52, "end": 751.52, "text": " it this way. It has a private key and it never changes, right? So, it's generated once when your", "tokens": [51464, 309, 341, 636, 13, 467, 575, 257, 4551, 2141, 293, 309, 1128, 2962, 11, 558, 30, 407, 11, 309, 311, 10833, 1564, 562, 428, 51764], "temperature": 0.0, "avg_logprob": -0.13118534643673202, "compression_ratio": 1.5564516129032258, "no_speech_prob": 0.078000009059906}, {"id": 90, "seek": 75152, "start": 751.52, "end": 757.36, "text": " VM is created and then every time it's loaded, you can use it for like encrypting, decrypting,", "tokens": [50364, 18038, 307, 2942, 293, 550, 633, 565, 309, 311, 13210, 11, 291, 393, 764, 309, 337, 411, 17972, 662, 278, 11, 979, 627, 662, 278, 11, 50656], "temperature": 0.0, "avg_logprob": -0.09512170791625976, "compression_ratio": 1.4585635359116023, "no_speech_prob": 0.006139262113720179}, {"id": 91, "seek": 75152, "start": 757.36, "end": 765.36, "text": " something. Stateless TPM is just firmware which will generate a new key every time it boots.", "tokens": [50656, 746, 13, 16249, 4272, 314, 18819, 307, 445, 30289, 597, 486, 8460, 257, 777, 2141, 633, 565, 309, 15194, 13, 51056], "temperature": 0.0, "avg_logprob": -0.09512170791625976, "compression_ratio": 1.4585635359116023, "no_speech_prob": 0.006139262113720179}, {"id": 92, "seek": 75152, "start": 766.48, "end": 778.0799999999999, "text": " So, how can we use this? Let's first talk about stateful TPM. Like all these", "tokens": [51112, 407, 11, 577, 393, 321, 764, 341, 30, 961, 311, 700, 751, 466, 1785, 906, 314, 18819, 13, 1743, 439, 613, 51692], "temperature": 0.0, "avg_logprob": -0.09512170791625976, "compression_ratio": 1.4585635359116023, "no_speech_prob": 0.006139262113720179}, {"id": 93, "seek": 77808, "start": 779.0400000000001, "end": 787.5200000000001, "text": " hyperscalers, they give you some sort of a stateful TPM. The question is where is the state stored,", "tokens": [50412, 7420, 433, 9895, 433, 11, 436, 976, 291, 512, 1333, 295, 257, 1785, 906, 314, 18819, 13, 440, 1168, 307, 689, 307, 264, 1785, 12187, 11, 50836], "temperature": 0.0, "avg_logprob": -0.17374157324069883, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.005937905050814152}, {"id": 94, "seek": 77808, "start": 787.5200000000001, "end": 793.9200000000001, "text": " right? Because you can turn off your VM, turn it on back. So, the state needs to be saved somewhere.", "tokens": [50836, 558, 30, 1436, 291, 393, 1261, 766, 428, 18038, 11, 1261, 309, 322, 646, 13, 407, 11, 264, 1785, 2203, 281, 312, 6624, 4079, 13, 51156], "temperature": 0.0, "avg_logprob": -0.17374157324069883, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.005937905050814152}, {"id": 95, "seek": 77808, "start": 793.9200000000001, "end": 799.5200000000001, "text": " And it's not part of your like encrypted truth volume or anything. It's somewhere else, right?", "tokens": [51156, 400, 309, 311, 406, 644, 295, 428, 411, 17972, 662, 292, 3494, 5523, 420, 1340, 13, 467, 311, 4079, 1646, 11, 558, 30, 51436], "temperature": 0.0, "avg_logprob": -0.17374157324069883, "compression_ratio": 1.49746192893401, "no_speech_prob": 0.005937905050814152}, {"id": 96, "seek": 79952, "start": 799.6, "end": 812.24, "text": " So far, again, like not an advertisement but publicly only Azure proves that this state is kept", "tokens": [50368, 407, 1400, 11, 797, 11, 411, 406, 364, 31370, 457, 14843, 787, 11969, 25019, 300, 341, 1785, 307, 4305, 51000], "temperature": 0.0, "avg_logprob": -0.22553140200101413, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.017283950001001358}, {"id": 97, "seek": 79952, "start": 812.88, "end": 817.84, "text": " securely, that there is some attestation going on under the hood when this TPM loads,", "tokens": [51032, 38348, 11, 300, 456, 307, 512, 951, 377, 399, 516, 322, 833, 264, 13376, 562, 341, 314, 18819, 12668, 11, 51280], "temperature": 0.0, "avg_logprob": -0.22553140200101413, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.017283950001001358}, {"id": 98, "seek": 79952, "start": 819.36, "end": 827.84, "text": " which protects it from the underlying hosts. You can't say much about other implementations,", "tokens": [51356, 597, 22583, 309, 490, 264, 14217, 21573, 13, 509, 393, 380, 584, 709, 466, 661, 4445, 763, 11, 51780], "temperature": 0.0, "avg_logprob": -0.22553140200101413, "compression_ratio": 1.4497354497354498, "no_speech_prob": 0.017283950001001358}, {"id": 99, "seek": 82784, "start": 827.84, "end": 833.76, "text": " like because no such claims were made. So, you know,", "tokens": [50364, 411, 570, 572, 1270, 9441, 645, 1027, 13, 407, 11, 291, 458, 11, 50660], "temperature": 0.0, "avg_logprob": -0.12581206770504222, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.004754804074764252}, {"id": 100, "seek": 82784, "start": 836.8000000000001, "end": 843.6, "text": " you don't know whether you can use it to isolate from your host or not, right? What's good about", "tokens": [50812, 291, 500, 380, 458, 1968, 291, 393, 764, 309, 281, 25660, 490, 428, 3975, 420, 406, 11, 558, 30, 708, 311, 665, 466, 51152], "temperature": 0.0, "avg_logprob": -0.12581206770504222, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.004754804074764252}, {"id": 101, "seek": 82784, "start": 843.6, "end": 852.72, "text": " stateful TPM is that you can implement root volume like pre-encryption, right? There is a device", "tokens": [51152, 1785, 906, 314, 18819, 307, 300, 291, 393, 4445, 5593, 5523, 411, 659, 12, 22660, 627, 1695, 11, 558, 30, 821, 307, 257, 4302, 51608], "temperature": 0.0, "avg_logprob": -0.12581206770504222, "compression_ratio": 1.4219653179190752, "no_speech_prob": 0.004754804074764252}, {"id": 102, "seek": 85272, "start": 852.72, "end": 857.84, "text": " which has like private key so it can decrypt something. So, you can take your root volume", "tokens": [50364, 597, 575, 411, 4551, 2141, 370, 309, 393, 979, 627, 662, 746, 13, 407, 11, 291, 393, 747, 428, 5593, 5523, 50620], "temperature": 0.0, "avg_logprob": -0.11454115108567842, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.05252429097890854}, {"id": 103, "seek": 85272, "start": 857.84, "end": 865.0400000000001, "text": " and encrypt it and upload it in an encrypted state there. And that's something which, for example,", "tokens": [50620, 293, 17972, 662, 309, 293, 6580, 309, 294, 364, 36663, 1785, 456, 13, 400, 300, 311, 746, 597, 11, 337, 1365, 11, 50980], "temperature": 0.0, "avg_logprob": -0.11454115108567842, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.05252429097890854}, {"id": 104, "seek": 85272, "start": 865.0400000000001, "end": 874.8000000000001, "text": " like Azure confidential decryption is doing. In theory, we don't need to pre-encrypt. We can", "tokens": [50980, 411, 11969, 27054, 979, 627, 1695, 307, 884, 13, 682, 5261, 11, 321, 500, 380, 643, 281, 659, 12, 22660, 627, 662, 13, 492, 393, 51468], "temperature": 0.0, "avg_logprob": -0.11454115108567842, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.05252429097890854}, {"id": 105, "seek": 85272, "start": 874.8000000000001, "end": 881.36, "text": " probably do something like self-encryption. And there are such ideas floating in the air that", "tokens": [51468, 1391, 360, 746, 411, 2698, 12, 22660, 627, 1695, 13, 400, 456, 366, 1270, 3487, 12607, 294, 264, 1988, 300, 51796], "temperature": 0.0, "avg_logprob": -0.11454115108567842, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.05252429097890854}, {"id": 106, "seek": 88136, "start": 881.36, "end": 887.52, "text": " we will start with this general-purpose Linux distro, right? Do some integrity checking. And on", "tokens": [50364, 321, 486, 722, 365, 341, 2674, 12, 42601, 18734, 1483, 340, 11, 558, 30, 1144, 512, 16000, 8568, 13, 400, 322, 50672], "temperature": 0.0, "avg_logprob": -0.08282072203499931, "compression_ratio": 1.6360544217687074, "no_speech_prob": 0.01921418122947216}, {"id": 107, "seek": 88136, "start": 887.52, "end": 892.8000000000001, "text": " the first boot, you will encrypt your root volume and seal the key to the TPM. But I haven't seen", "tokens": [50672, 264, 700, 11450, 11, 291, 486, 17972, 662, 428, 5593, 5523, 293, 12185, 264, 2141, 281, 264, 314, 18819, 13, 583, 286, 2378, 380, 1612, 50936], "temperature": 0.0, "avg_logprob": -0.08282072203499931, "compression_ratio": 1.6360544217687074, "no_speech_prob": 0.01921418122947216}, {"id": 108, "seek": 88136, "start": 892.8000000000001, "end": 898.24, "text": " such implementation yet. It's probably possible, but it's kind of hard because you need to prove", "tokens": [50936, 1270, 11420, 1939, 13, 467, 311, 1391, 1944, 11, 457, 309, 311, 733, 295, 1152, 570, 291, 643, 281, 7081, 51208], "temperature": 0.0, "avg_logprob": -0.08282072203499931, "compression_ratio": 1.6360544217687074, "no_speech_prob": 0.01921418122947216}, {"id": 109, "seek": 88136, "start": 898.24, "end": 902.24, "text": " that the environment where you were doing the initial encryption is saying that it was really", "tokens": [51208, 300, 264, 2823, 689, 291, 645, 884, 264, 5883, 29575, 307, 1566, 300, 309, 390, 534, 51408], "temperature": 0.0, "avg_logprob": -0.08282072203499931, "compression_ratio": 1.6360544217687074, "no_speech_prob": 0.01921418122947216}, {"id": 110, "seek": 88136, "start": 902.24, "end": 908.48, "text": " a confidential VM doing an initial encryption. Otherwise, someone can try doing it at some other", "tokens": [51408, 257, 27054, 18038, 884, 364, 5883, 29575, 13, 10328, 11, 1580, 393, 853, 884, 309, 412, 512, 661, 51720], "temperature": 0.0, "avg_logprob": -0.08282072203499931, "compression_ratio": 1.6360544217687074, "no_speech_prob": 0.01921418122947216}, {"id": 111, "seek": 90848, "start": 908.48, "end": 919.12, "text": " place and attack your VM. So, stateless TPM. Currently, I only know about Azure TDX which", "tokens": [50364, 1081, 293, 2690, 428, 18038, 13, 407, 11, 2219, 4272, 314, 18819, 13, 19964, 11, 286, 787, 458, 466, 11969, 42606, 55, 597, 50896], "temperature": 0.0, "avg_logprob": -0.11904648558734214, "compression_ratio": 1.4248704663212435, "no_speech_prob": 0.004293397534638643}, {"id": 112, "seek": 90848, "start": 919.12, "end": 928.8000000000001, "text": " publicly offers this option. But what's good about stateless TPM is that it's just a program.", "tokens": [50896, 14843, 7736, 341, 3614, 13, 583, 437, 311, 665, 466, 2219, 4272, 314, 18819, 307, 300, 309, 311, 445, 257, 1461, 13, 51380], "temperature": 0.0, "avg_logprob": -0.11904648558734214, "compression_ratio": 1.4248704663212435, "no_speech_prob": 0.004293397534638643}, {"id": 113, "seek": 90848, "start": 928.8000000000001, "end": 933.84, "text": " You know, it's just part of the firmware. So, you can take this initial launch measurements", "tokens": [51380, 509, 458, 11, 309, 311, 445, 644, 295, 264, 30289, 13, 407, 11, 291, 393, 747, 341, 5883, 4025, 15383, 51632], "temperature": 0.0, "avg_logprob": -0.11904648558734214, "compression_ratio": 1.4248704663212435, "no_speech_prob": 0.004293397534638643}, {"id": 114, "seek": 93384, "start": 933.84, "end": 938.96, "text": " and attest it. It never changes, right? You don't need to attest the state of the VTPM. It's going to", "tokens": [50364, 293, 951, 377, 309, 13, 467, 1128, 2962, 11, 558, 30, 509, 500, 380, 643, 281, 951, 377, 264, 1785, 295, 264, 691, 51, 18819, 13, 467, 311, 516, 281, 50620], "temperature": 0.0, "avg_logprob": -0.13175580615089053, "compression_ratio": 1.48, "no_speech_prob": 0.01139206625521183}, {"id": 115, "seek": 93384, "start": 938.96, "end": 949.2, "text": " get generated every time, right? Which is good. Think is that, again, like as I said, currently,", "tokens": [50620, 483, 10833, 633, 565, 11, 558, 30, 3013, 307, 665, 13, 6557, 307, 300, 11, 797, 11, 411, 382, 286, 848, 11, 4362, 11, 51132], "temperature": 0.0, "avg_logprob": -0.13175580615089053, "compression_ratio": 1.48, "no_speech_prob": 0.01139206625521183}, {"id": 116, "seek": 93384, "start": 949.2, "end": 962.32, "text": " you will have to trust your cloud provider with the provided VTPM. And yeah, there is no anything", "tokens": [51132, 291, 486, 362, 281, 3361, 428, 4588, 12398, 365, 264, 5649, 691, 51, 18819, 13, 400, 1338, 11, 456, 307, 572, 1340, 51788], "temperature": 0.0, "avg_logprob": -0.13175580615089053, "compression_ratio": 1.48, "no_speech_prob": 0.01139206625521183}, {"id": 117, "seek": 96232, "start": 962.32, "end": 971.6, "text": " like bring your own firmware in public clouds. You can still use it for volume disc encryption", "tokens": [50364, 411, 1565, 428, 1065, 30289, 294, 1908, 12193, 13, 509, 393, 920, 764, 309, 337, 5523, 2983, 29575, 50828], "temperature": 0.0, "avg_logprob": -0.15414021996890798, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.015238186344504356}, {"id": 118, "seek": 96232, "start": 971.6, "end": 977.44, "text": " if you want to use TPM, but you will probably have to do some attestation and then inject some", "tokens": [50828, 498, 291, 528, 281, 764, 314, 18819, 11, 457, 291, 486, 1391, 362, 281, 360, 512, 951, 377, 399, 293, 550, 10711, 512, 51120], "temperature": 0.0, "avg_logprob": -0.15414021996890798, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.015238186344504356}, {"id": 119, "seek": 96232, "start": 977.44, "end": 987.2, "text": " intermediary key. And also, there is nothing like this in standard Linux tools, anything.", "tokens": [51120, 15184, 822, 2141, 13, 400, 611, 11, 456, 307, 1825, 411, 341, 294, 3832, 18734, 3873, 11, 1340, 13, 51608], "temperature": 0.0, "avg_logprob": -0.15414021996890798, "compression_ratio": 1.4607329842931938, "no_speech_prob": 0.015238186344504356}, {"id": 120, "seek": 98720, "start": 987.2800000000001, "end": 994.1600000000001, "text": " Like you can, like just encrypting root volume to TPM is something which is like generally", "tokens": [50368, 1743, 291, 393, 11, 411, 445, 17972, 662, 278, 5593, 5523, 281, 314, 18819, 307, 746, 597, 307, 411, 5101, 50712], "temperature": 0.0, "avg_logprob": -0.16879040129641268, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.011918401345610619}, {"id": 121, "seek": 98720, "start": 994.1600000000001, "end": 1001.2, "text": " supported by SystemD or Clevis or other solutions. But something which would do like attestation to", "tokens": [50712, 8104, 538, 8910, 35, 420, 8834, 4938, 420, 661, 6547, 13, 583, 746, 597, 576, 360, 411, 951, 377, 399, 281, 51064], "temperature": 0.0, "avg_logprob": -0.16879040129641268, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.011918401345610619}, {"id": 122, "seek": 98720, "start": 1001.2, "end": 1010.0, "text": " remote server and then bring the key is just non-existing. Second, yes, what do you do with", "tokens": [51064, 8607, 7154, 293, 550, 1565, 264, 2141, 307, 445, 2107, 12, 36447, 13, 5736, 11, 2086, 11, 437, 360, 291, 360, 365, 51504], "temperature": 0.0, "avg_logprob": -0.16879040129641268, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.011918401345610619}, {"id": 123, "seek": 98720, "start": 1010.0, "end": 1015.9200000000001, "text": " the VTPM if the cloud provider is not telling you that its state is isolated from the host?", "tokens": [51504, 264, 691, 51, 18819, 498, 264, 4588, 12398, 307, 406, 3585, 291, 300, 1080, 1785, 307, 14621, 490, 264, 3975, 30, 51800], "temperature": 0.0, "avg_logprob": -0.16879040129641268, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.011918401345610619}, {"id": 124, "seek": 101592, "start": 1016.88, "end": 1025.04, "text": " Or doesn't tell you how it's implemented, actually. And the thing is you cannot use it, right? You", "tokens": [50412, 1610, 1177, 380, 980, 291, 577, 309, 311, 12270, 11, 767, 13, 400, 264, 551, 307, 291, 2644, 764, 309, 11, 558, 30, 509, 50820], "temperature": 0.0, "avg_logprob": -0.12559047112098107, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.010942040011286736}, {"id": 125, "seek": 101592, "start": 1025.04, "end": 1031.12, "text": " probably cannot even use it for things like PCR measurements because if it's an emulated device,", "tokens": [50820, 1391, 2644, 754, 764, 309, 337, 721, 411, 44022, 15383, 570, 498, 309, 311, 364, 846, 6987, 4302, 11, 51124], "temperature": 0.0, "avg_logprob": -0.12559047112098107, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.010942040011286736}, {"id": 126, "seek": 101592, "start": 1031.12, "end": 1037.36, "text": " it can certainly get messed with, you know, and then you will see different measurements. So,", "tokens": [51124, 309, 393, 3297, 483, 16507, 365, 11, 291, 458, 11, 293, 550, 291, 486, 536, 819, 15383, 13, 407, 11, 51436], "temperature": 0.0, "avg_logprob": -0.12559047112098107, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.010942040011286736}, {"id": 127, "seek": 101592, "start": 1037.36, "end": 1045.12, "text": " the only thing you can do in this case is try ignoring this thing completely and rely on", "tokens": [51436, 264, 787, 551, 291, 393, 360, 294, 341, 1389, 307, 853, 26258, 341, 551, 2584, 293, 10687, 322, 51824], "temperature": 0.0, "avg_logprob": -0.12559047112098107, "compression_ratio": 1.6223175965665235, "no_speech_prob": 0.010942040011286736}, {"id": 128, "seek": 104512, "start": 1045.1999999999998, "end": 1054.56, "text": " architectural attestation, something, registers which both Sev and TDX give you. The thing is,", "tokens": [50368, 26621, 951, 377, 399, 11, 746, 11, 38351, 597, 1293, 28960, 293, 42606, 55, 976, 291, 13, 440, 551, 307, 11, 50836], "temperature": 0.0, "avg_logprob": -0.1684589662413666, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.0049366881139576435}, {"id": 129, "seek": 104512, "start": 1054.56, "end": 1059.76, "text": " again, that our standard Linux tools for like volume encrypting, something,", "tokens": [50836, 797, 11, 300, 527, 3832, 18734, 3873, 337, 411, 5523, 17972, 662, 278, 11, 746, 11, 51096], "temperature": 0.0, "avg_logprob": -0.1684589662413666, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.0049366881139576435}, {"id": 130, "seek": 104512, "start": 1061.52, "end": 1069.28, "text": " they don't know anything about this currently, right? So, you will have to, you know, come up with", "tokens": [51184, 436, 500, 380, 458, 1340, 466, 341, 4362, 11, 558, 30, 407, 11, 291, 486, 362, 281, 11, 291, 458, 11, 808, 493, 365, 51572], "temperature": 0.0, "avg_logprob": -0.1684589662413666, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.0049366881139576435}, {"id": 131, "seek": 106928, "start": 1069.28, "end": 1076.8, "text": " a solution for attestation and delivering like root volume key password or something there. And", "tokens": [50364, 257, 3827, 337, 951, 377, 399, 293, 14666, 411, 5593, 5523, 2141, 11524, 420, 746, 456, 13, 400, 50740], "temperature": 0.0, "avg_logprob": -0.16356167648777817, "compression_ratio": 1.652542372881356, "no_speech_prob": 0.032856959849596024}, {"id": 132, "seek": 106928, "start": 1078.16, "end": 1087.12, "text": " it's not done yet. So, just a few words about this unencrypted part, right, which I told you that", "tokens": [50808, 309, 311, 406, 1096, 1939, 13, 407, 11, 445, 257, 1326, 2283, 466, 341, 517, 22660, 627, 25383, 644, 11, 558, 11, 597, 286, 1907, 291, 300, 51256], "temperature": 0.0, "avg_logprob": -0.16356167648777817, "compression_ratio": 1.652542372881356, "no_speech_prob": 0.032856959849596024}, {"id": 133, "seek": 106928, "start": 1087.12, "end": 1092.0, "text": " will always be there, right? Even if you do like full disk encryption, which you call full, it's", "tokens": [51256, 486, 1009, 312, 456, 11, 558, 30, 2754, 498, 291, 360, 411, 1577, 12355, 29575, 11, 597, 291, 818, 1577, 11, 309, 311, 51500], "temperature": 0.0, "avg_logprob": -0.16356167648777817, "compression_ratio": 1.652542372881356, "no_speech_prob": 0.032856959849596024}, {"id": 134, "seek": 106928, "start": 1092.0, "end": 1099.12, "text": " not going to be full because you want to load like kernel and something. So, how can you prove that", "tokens": [51500, 406, 516, 281, 312, 1577, 570, 291, 528, 281, 3677, 411, 28256, 293, 746, 13, 407, 11, 577, 393, 291, 7081, 300, 51856], "temperature": 0.0, "avg_logprob": -0.16356167648777817, "compression_ratio": 1.652542372881356, "no_speech_prob": 0.032856959849596024}, {"id": 135, "seek": 109928, "start": 1099.28, "end": 1107.76, "text": " these things are good? So, normally, we have two technologies which have been used. One is called", "tokens": [50364, 613, 721, 366, 665, 30, 407, 11, 5646, 11, 321, 362, 732, 7943, 597, 362, 668, 1143, 13, 1485, 307, 1219, 50788], "temperature": 0.0, "avg_logprob": -0.2047186166467801, "compression_ratio": 1.5815217391304348, "no_speech_prob": 0.008301392197608948}, {"id": 136, "seek": 109928, "start": 1107.76, "end": 1111.92, "text": " secure boot, the other called like measure boot. Secure boot without a space, measured boot with", "tokens": [50788, 7144, 11450, 11, 264, 661, 1219, 411, 3481, 11450, 13, 3306, 540, 11450, 1553, 257, 1901, 11, 12690, 11450, 365, 50996], "temperature": 0.0, "avg_logprob": -0.2047186166467801, "compression_ratio": 1.5815217391304348, "no_speech_prob": 0.008301392197608948}, {"id": 137, "seek": 109928, "start": 1111.92, "end": 1122.48, "text": " a space, nobody knows why. Anyway, so secure boot proves that all loaded EFI binaries are signed", "tokens": [50996, 257, 1901, 11, 5079, 3255, 983, 13, 5684, 11, 370, 7144, 11450, 25019, 300, 439, 13210, 462, 38568, 5171, 4889, 366, 8175, 51524], "temperature": 0.0, "avg_logprob": -0.2047186166467801, "compression_ratio": 1.5815217391304348, "no_speech_prob": 0.008301392197608948}, {"id": 138, "seek": 112248, "start": 1122.48, "end": 1129.1200000000001, "text": " by a trusted party and measured boot basically measures every important fact about the boot,", "tokens": [50364, 538, 257, 16034, 3595, 293, 12690, 11450, 1936, 8000, 633, 1021, 1186, 466, 264, 11450, 11, 50696], "temperature": 0.0, "avg_logprob": -0.21810093145260864, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.028291447088122368}, {"id": 139, "seek": 112248, "start": 1129.1200000000001, "end": 1135.44, "text": " like binary certificates, which signed binaries, there has to be something in special registers of", "tokens": [50696, 411, 17434, 32941, 11, 597, 8175, 5171, 4889, 11, 456, 575, 281, 312, 746, 294, 2121, 38351, 295, 51012], "temperature": 0.0, "avg_logprob": -0.21810093145260864, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.028291447088122368}, {"id": 140, "seek": 112248, "start": 1136.0, "end": 1144.4, "text": " TPM devices. And we need to check basically everything which is being loaded. And as I told", "tokens": [51040, 314, 18819, 5759, 13, 400, 321, 643, 281, 1520, 1936, 1203, 597, 307, 885, 13210, 13, 400, 382, 286, 1907, 51460], "temperature": 0.0, "avg_logprob": -0.21810093145260864, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.028291447088122368}, {"id": 141, "seek": 112248, "start": 1144.4, "end": 1150.0, "text": " you, like normally, again, for general purpose Linux distro, you will end up with like a kernel,", "tokens": [51460, 291, 11, 411, 5646, 11, 797, 11, 337, 2674, 4334, 18734, 1483, 340, 11, 291, 486, 917, 493, 365, 411, 257, 28256, 11, 51740], "temperature": 0.0, "avg_logprob": -0.21810093145260864, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.028291447088122368}, {"id": 142, "seek": 115000, "start": 1150.0, "end": 1159.04, "text": " initramafas, kernel command line being available in clear, not encrypted because, yes. And to protect", "tokens": [50364, 294, 270, 2356, 2792, 296, 11, 28256, 5622, 1622, 885, 2435, 294, 1850, 11, 406, 36663, 570, 11, 2086, 13, 400, 281, 2371, 50816], "temperature": 0.0, "avg_logprob": -0.20119798944351522, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.012545670382678509}, {"id": 143, "seek": 115000, "start": 1159.04, "end": 1164.48, "text": " these things, there was a concept called unified kernel image introduced, which is a very simple", "tokens": [50816, 613, 721, 11, 456, 390, 257, 3410, 1219, 26787, 28256, 3256, 7268, 11, 597, 307, 257, 588, 2199, 51088], "temperature": 0.0, "avg_logprob": -0.20119798944351522, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.012545670382678509}, {"id": 144, "seek": 115000, "start": 1164.48, "end": 1171.44, "text": " thing. It just you take all these artifacts like kernel, initramafas, command line, sign them together", "tokens": [51088, 551, 13, 467, 445, 291, 747, 439, 613, 24617, 411, 28256, 11, 294, 270, 2356, 2792, 296, 11, 5622, 1622, 11, 1465, 552, 1214, 51436], "temperature": 0.0, "avg_logprob": -0.20119798944351522, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.012545670382678509}, {"id": 145, "seek": 115000, "start": 1171.44, "end": 1179.76, "text": " and make it like a UFI binary like which is extracting itself and launches the kernel after that.", "tokens": [51436, 293, 652, 309, 411, 257, 624, 38568, 17434, 411, 597, 307, 49844, 2564, 293, 31841, 264, 28256, 934, 300, 13, 51852], "temperature": 0.0, "avg_logprob": -0.20119798944351522, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.012545670382678509}, {"id": 146, "seek": 118000, "start": 1180.64, "end": 1189.36, "text": " So the implications are, of course, of this like it's more secure, but it's less convenient to use.", "tokens": [50396, 407, 264, 16602, 366, 11, 295, 1164, 11, 295, 341, 411, 309, 311, 544, 7144, 11, 457, 309, 311, 1570, 10851, 281, 764, 13, 50832], "temperature": 0.0, "avg_logprob": -0.1854709723056891, "compression_ratio": 1.4494949494949494, "no_speech_prob": 0.002000820357352495}, {"id": 147, "seek": 118000, "start": 1191.84, "end": 1199.28, "text": " The initramafas becomes static and generated when we build UKI. And normally for a general", "tokens": [50956, 440, 294, 270, 2356, 2792, 296, 3643, 13437, 293, 10833, 562, 321, 1322, 624, 27731, 13, 400, 5646, 337, 257, 2674, 51328], "temperature": 0.0, "avg_logprob": -0.1854709723056891, "compression_ratio": 1.4494949494949494, "no_speech_prob": 0.002000820357352495}, {"id": 148, "seek": 118000, "start": 1199.28, "end": 1207.6, "text": " purpose Linux distro, we want our vendors, yes, to build UKI. You want just like install an RPM,", "tokens": [51328, 4334, 18734, 1483, 340, 11, 321, 528, 527, 22056, 11, 2086, 11, 281, 1322, 624, 27731, 13, 509, 528, 445, 411, 3625, 364, 37389, 11, 51744], "temperature": 0.0, "avg_logprob": -0.1854709723056891, "compression_ratio": 1.4494949494949494, "no_speech_prob": 0.002000820357352495}, {"id": 149, "seek": 120760, "start": 1207.6, "end": 1214.0, "text": " you get a UKI. You don't want to build it yourself. Otherwise, you will have to get your keys provisioned", "tokens": [50364, 291, 483, 257, 624, 27731, 13, 509, 500, 380, 528, 281, 1322, 309, 1803, 13, 10328, 11, 291, 486, 362, 281, 483, 428, 9317, 17225, 292, 50684], "temperature": 0.0, "avg_logprob": -0.1262943812779018, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.01716430112719536}, {"id": 150, "seek": 120760, "start": 1214.0, "end": 1221.4399999999998, "text": " in the firmware. And not all clouds allow that, right? They may have like a vendor certificate", "tokens": [50684, 294, 264, 30289, 13, 400, 406, 439, 12193, 2089, 300, 11, 558, 30, 814, 815, 362, 411, 257, 24321, 15953, 51056], "temperature": 0.0, "avg_logprob": -0.1262943812779018, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.01716430112719536}, {"id": 151, "seek": 120760, "start": 1221.4399999999998, "end": 1226.8, "text": " there in UFI by default. It may not give you an option to put your own there. So you will get like", "tokens": [51056, 456, 294, 624, 38568, 538, 7576, 13, 467, 815, 406, 976, 291, 364, 3614, 281, 829, 428, 1065, 456, 13, 407, 291, 486, 483, 411, 51324], "temperature": 0.0, "avg_logprob": -0.1262943812779018, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.01716430112719536}, {"id": 152, "seek": 120760, "start": 1226.8, "end": 1233.28, "text": " a static initramafas which may or may not be a problem. Of course, you have less demands for", "tokens": [51324, 257, 13437, 294, 270, 2356, 2792, 296, 597, 815, 420, 815, 406, 312, 257, 1154, 13, 2720, 1164, 11, 291, 362, 1570, 15107, 337, 51648], "temperature": 0.0, "avg_logprob": -0.1262943812779018, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.01716430112719536}, {"id": 153, "seek": 123328, "start": 1233.28, "end": 1240.8799999999999, "text": " initramafas which is on public clouds. And like you don't need to do network boot something there", "tokens": [50364, 294, 270, 2356, 2792, 296, 597, 307, 322, 1908, 12193, 13, 400, 411, 291, 500, 380, 643, 281, 360, 3209, 11450, 746, 456, 50744], "temperature": 0.0, "avg_logprob": -0.17185031450711763, "compression_ratio": 1.560846560846561, "no_speech_prob": 0.011382324621081352}, {"id": 154, "seek": 123328, "start": 1240.8799999999999, "end": 1250.8799999999999, "text": " normally. But it's still limited. There is a system extension feature in system D which can be used to", "tokens": [50744, 5646, 13, 583, 309, 311, 920, 5567, 13, 821, 307, 257, 1185, 10320, 4111, 294, 1185, 413, 597, 393, 312, 1143, 281, 51244], "temperature": 0.0, "avg_logprob": -0.17185031450711763, "compression_ratio": 1.560846560846561, "no_speech_prob": 0.011382324621081352}, {"id": 155, "seek": 123328, "start": 1252.72, "end": 1260.0, "text": " with limitations to do initramafas extension. Emanuele is going to give a talk like in an hour", "tokens": [51336, 365, 15705, 281, 360, 294, 270, 2356, 2792, 296, 10320, 13, 462, 1601, 622, 306, 307, 516, 281, 976, 257, 751, 411, 294, 364, 1773, 51700], "temperature": 0.0, "avg_logprob": -0.17185031450711763, "compression_ratio": 1.560846560846561, "no_speech_prob": 0.011382324621081352}, {"id": 156, "seek": 126000, "start": 1260.0, "end": 1266.96, "text": " after me about extending UKI is going to cover this topic, how this can be done. So the other", "tokens": [50364, 934, 385, 466, 24360, 624, 27731, 307, 516, 281, 2060, 341, 4829, 11, 577, 341, 393, 312, 1096, 13, 407, 264, 661, 50712], "temperature": 0.0, "avg_logprob": -0.1084967851638794, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006487607024610043}, {"id": 157, "seek": 126000, "start": 1266.96, "end": 1273.6, "text": " limitation is kernel command line becomes static, right? So this becomes one size fits all, right?", "tokens": [50712, 27432, 307, 28256, 5622, 1622, 3643, 13437, 11, 558, 30, 407, 341, 3643, 472, 2744, 9001, 439, 11, 558, 30, 51044], "temperature": 0.0, "avg_logprob": -0.1084967851638794, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006487607024610043}, {"id": 158, "seek": 126000, "start": 1273.6, "end": 1279.36, "text": " When we build as a vendor like Fedora, we build Fedora UKI, we need to hard code kernel command", "tokens": [51044, 1133, 321, 1322, 382, 257, 24321, 411, 7772, 3252, 11, 321, 1322, 7772, 3252, 624, 27731, 11, 321, 643, 281, 1152, 3089, 28256, 5622, 51332], "temperature": 0.0, "avg_logprob": -0.1084967851638794, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006487607024610043}, {"id": 159, "seek": 126000, "start": 1279.36, "end": 1284.8, "text": " line. You cannot pass like root equals UID anymore. So you need to rely on something like", "tokens": [51332, 1622, 13, 509, 2644, 1320, 411, 5593, 6915, 624, 2777, 3602, 13, 407, 291, 643, 281, 10687, 322, 746, 411, 51604], "temperature": 0.0, "avg_logprob": -0.1084967851638794, "compression_ratio": 1.6578947368421053, "no_speech_prob": 0.006487607024610043}, {"id": 160, "seek": 128480, "start": 1285.68, "end": 1293.52, "text": " auto discover or something. And again, we just got an extension mechanism which is called like", "tokens": [50408, 8399, 4411, 420, 746, 13, 400, 797, 11, 321, 445, 658, 364, 10320, 7513, 597, 307, 1219, 411, 50800], "temperature": 0.0, "avg_logprob": -0.1382633996388269, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.01580042950809002}, {"id": 161, "seek": 128480, "start": 1293.52, "end": 1302.72, "text": " signed extensions. You place basically a UFI binary stub in ESP and get your kernel command line", "tokens": [50800, 8175, 25129, 13, 509, 1081, 1936, 257, 624, 38568, 17434, 20266, 294, 12564, 47, 293, 483, 428, 28256, 5622, 1622, 51260], "temperature": 0.0, "avg_logprob": -0.1382633996388269, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.01580042950809002}, {"id": 162, "seek": 128480, "start": 1302.72, "end": 1309.6, "text": " extended. This is already like publicly released in system D but these tools are still adopting", "tokens": [51260, 10913, 13, 639, 307, 1217, 411, 14843, 4736, 294, 1185, 413, 457, 613, 3873, 366, 920, 32328, 51604], "temperature": 0.0, "avg_logprob": -0.1382633996388269, "compression_ratio": 1.4137931034482758, "no_speech_prob": 0.01580042950809002}, {"id": 163, "seek": 130960, "start": 1309.6, "end": 1315.4399999999998, "text": " this. I haven't seen like a fully working solution yet. But we're actively working on it in Fedora.", "tokens": [50364, 341, 13, 286, 2378, 380, 1612, 411, 257, 4498, 1364, 3827, 1939, 13, 583, 321, 434, 13022, 1364, 322, 309, 294, 7772, 3252, 13, 50656], "temperature": 0.0, "avg_logprob": -0.15645321677712834, "compression_ratio": 1.4036144578313252, "no_speech_prob": 0.026279479265213013}, {"id": 164, "seek": 130960, "start": 1319.52, "end": 1325.1999999999998, "text": " Last but not least is how do you boot your UKI, right? So", "tokens": [50860, 5264, 457, 406, 1935, 307, 577, 360, 291, 11450, 428, 624, 27731, 11, 558, 30, 407, 51144], "temperature": 0.0, "avg_logprob": -0.15645321677712834, "compression_ratio": 1.4036144578313252, "no_speech_prob": 0.026279479265213013}, {"id": 165, "seek": 130960, "start": 1329.84, "end": 1336.7199999999998, "text": " it is UFI binary. So it must pass secure boot checks. So it must be signed.", "tokens": [51376, 309, 307, 624, 38568, 17434, 13, 407, 309, 1633, 1320, 7144, 11450, 13834, 13, 407, 309, 1633, 312, 8175, 13, 51720], "temperature": 0.0, "avg_logprob": -0.15645321677712834, "compression_ratio": 1.4036144578313252, "no_speech_prob": 0.026279479265213013}, {"id": 166, "seek": 133672, "start": 1336.72, "end": 1347.1200000000001, "text": " And you can boot it either directly from firmware or you can, for example, boot it from", "tokens": [50364, 400, 291, 393, 11450, 309, 2139, 3838, 490, 30289, 420, 291, 393, 11, 337, 1365, 11, 11450, 309, 490, 50884], "temperature": 0.0, "avg_logprob": -0.16679035822550456, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.010158241726458073}, {"id": 167, "seek": 133672, "start": 1347.68, "end": 1352.0, "text": " shim if you want to have shim for some reason. For example, if the cloud provider does not allow", "tokens": [50912, 402, 332, 498, 291, 528, 281, 362, 402, 332, 337, 512, 1778, 13, 1171, 1365, 11, 498, 264, 4588, 12398, 775, 406, 2089, 51128], "temperature": 0.0, "avg_logprob": -0.16679035822550456, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.010158241726458073}, {"id": 168, "seek": 133672, "start": 1352.0, "end": 1360.32, "text": " you to have your vendor certificate in the secure boot DB. But you will still have to manage your", "tokens": [51128, 291, 281, 362, 428, 24321, 15953, 294, 264, 7144, 11450, 26754, 13, 583, 291, 486, 920, 362, 281, 3067, 428, 51544], "temperature": 0.0, "avg_logprob": -0.16679035822550456, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.010158241726458073}, {"id": 169, "seek": 133672, "start": 1360.32, "end": 1364.64, "text": " UFI variables because there is nothing like boot menu there if you are booting directly from", "tokens": [51544, 624, 38568, 9102, 570, 456, 307, 1825, 411, 11450, 6510, 456, 498, 291, 366, 11450, 278, 3838, 490, 51760], "temperature": 0.0, "avg_logprob": -0.16679035822550456, "compression_ratio": 1.7123287671232876, "no_speech_prob": 0.010158241726458073}, {"id": 170, "seek": 136464, "start": 1364.64, "end": 1373.92, "text": " firmware, right? In Fedora, we have a package called UKI direct now which can manage it for you", "tokens": [50364, 30289, 11, 558, 30, 682, 7772, 3252, 11, 321, 362, 257, 7372, 1219, 624, 27731, 2047, 586, 597, 393, 3067, 309, 337, 291, 50828], "temperature": 0.0, "avg_logprob": -0.140865294659724, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.006572767626494169}, {"id": 171, "seek": 136464, "start": 1373.92, "end": 1379.2, "text": " like automatically. We do things like AB booting. For example, when you install a new UKI, it's", "tokens": [50828, 411, 6772, 13, 492, 360, 721, 411, 13838, 11450, 278, 13, 1171, 1365, 11, 562, 291, 3625, 257, 777, 624, 27731, 11, 309, 311, 51092], "temperature": 0.0, "avg_logprob": -0.140865294659724, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.006572767626494169}, {"id": 172, "seek": 136464, "start": 1379.2, "end": 1383.2800000000002, "text": " going to be tried once. If it boots, it becomes the default. If it doesn't boot, you will rework", "tokens": [51092, 516, 281, 312, 3031, 1564, 13, 759, 309, 15194, 11, 309, 3643, 264, 7576, 13, 759, 309, 1177, 380, 11450, 11, 291, 486, 48376, 51296], "temperature": 0.0, "avg_logprob": -0.140865294659724, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.006572767626494169}, {"id": 173, "seek": 136464, "start": 1383.2800000000002, "end": 1388.64, "text": " back after the reboot to the old UKI. Because otherwise, if it doesn't boot, you are like", "tokens": [51296, 646, 934, 264, 33818, 281, 264, 1331, 624, 27731, 13, 1436, 5911, 11, 498, 309, 1177, 380, 11450, 11, 291, 366, 411, 51564], "temperature": 0.0, "avg_logprob": -0.140865294659724, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.006572767626494169}, {"id": 174, "seek": 136464, "start": 1388.64, "end": 1393.2800000000002, "text": " screwed completely. You won't be able, even able to access your encrypted root volume.", "tokens": [51564, 20331, 2584, 13, 509, 1582, 380, 312, 1075, 11, 754, 1075, 281, 2105, 428, 36663, 5593, 5523, 13, 51796], "temperature": 0.0, "avg_logprob": -0.140865294659724, "compression_ratio": 1.6431095406360423, "no_speech_prob": 0.006572767626494169}, {"id": 175, "seek": 139464, "start": 1394.8000000000002, "end": 1405.68, "text": " Yes, so if we speak about stateless TPM where we don't really need to trust the provider,", "tokens": [50372, 1079, 11, 370, 498, 321, 1710, 466, 2219, 4272, 314, 18819, 689, 321, 500, 380, 534, 643, 281, 3361, 264, 12398, 11, 50916], "temperature": 0.0, "avg_logprob": -0.30800028642018634, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.005026374477893114}, {"id": 176, "seek": 139464, "start": 1405.68, "end": 1412.72, "text": " the cloud provider doing attestation of VTPM state under the hood, then we will need", "tokens": [50916, 264, 4588, 12398, 884, 951, 377, 399, 295, 691, 51, 18819, 1785, 833, 264, 13376, 11, 550, 321, 486, 643, 51268], "temperature": 0.0, "avg_logprob": -0.30800028642018634, "compression_ratio": 1.380952380952381, "no_speech_prob": 0.005026374477893114}, {"id": 177, "seek": 141272, "start": 1413.68, "end": 1425.2, "text": " an attestation server and client. And again, there are some offerings say in the proprietary world", "tokens": [50412, 364, 951, 377, 399, 7154, 293, 6423, 13, 400, 797, 11, 456, 366, 512, 25898, 584, 294, 264, 38992, 1002, 50988], "temperature": 0.0, "avg_logprob": -0.2689195979725231, "compression_ratio": 1.3453237410071943, "no_speech_prob": 0.07929661124944687}, {"id": 178, "seek": 141272, "start": 1425.2, "end": 1434.72, "text": " like Intel was advertised as project ember. But there is nothing which you can use today", "tokens": [50988, 411, 19762, 390, 42310, 382, 1716, 846, 607, 13, 583, 456, 307, 1825, 597, 291, 393, 764, 965, 51464], "temperature": 0.0, "avg_logprob": -0.2689195979725231, "compression_ratio": 1.3453237410071943, "no_speech_prob": 0.07929661124944687}, {"id": 179, "seek": 143472, "start": 1434.72, "end": 1443.6000000000001, "text": " in the open source world. There are attempts to implement this in confidential containers project.", "tokens": [50364, 294, 264, 1269, 4009, 1002, 13, 821, 366, 15257, 281, 4445, 341, 294, 27054, 17089, 1716, 13, 50808], "temperature": 0.0, "avg_logprob": -0.16815836979792667, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.026641827076673508}, {"id": 180, "seek": 143472, "start": 1444.4, "end": 1450.0, "text": " There is this thing called KBS which is both like a protocol and an implementation of this", "tokens": [50848, 821, 307, 341, 551, 1219, 591, 8176, 597, 307, 1293, 411, 257, 10336, 293, 364, 11420, 295, 341, 51128], "temperature": 0.0, "avg_logprob": -0.16815836979792667, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.026641827076673508}, {"id": 181, "seek": 143472, "start": 1450.56, "end": 1458.88, "text": " key broker server. But again, like we will need something in the standard tools to do attestation.", "tokens": [51156, 2141, 26502, 7154, 13, 583, 797, 11, 411, 321, 486, 643, 746, 294, 264, 3832, 3873, 281, 360, 951, 377, 399, 13, 51572], "temperature": 0.0, "avg_logprob": -0.16815836979792667, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.026641827076673508}, {"id": 182, "seek": 145888, "start": 1459.3600000000001, "end": 1464.8000000000002, "text": " We are yet to figure out how to tell this thing which server to attest to.", "tokens": [50388, 492, 366, 1939, 281, 2573, 484, 577, 281, 980, 341, 551, 597, 7154, 281, 951, 377, 281, 13, 50660], "temperature": 0.0, "avg_logprob": -0.17020545107253054, "compression_ratio": 1.3461538461538463, "no_speech_prob": 0.016132356598973274}, {"id": 183, "seek": 145888, "start": 1468.0800000000002, "end": 1478.8000000000002, "text": " Yes, so we talked a little bit about encryption as I said that for root volume, you need to at least", "tokens": [50824, 1079, 11, 370, 321, 2825, 257, 707, 857, 466, 29575, 382, 286, 848, 300, 337, 5593, 5523, 11, 291, 643, 281, 412, 1935, 51360], "temperature": 0.0, "avg_logprob": -0.17020545107253054, "compression_ratio": 1.3461538461538463, "no_speech_prob": 0.016132356598973274}, {"id": 184, "seek": 147880, "start": 1478.8, "end": 1490.8799999999999, "text": " ensure that it wasn't tampered with. And for that you can probably use integrity checking. But then", "tokens": [50364, 5586, 300, 309, 2067, 380, 7677, 40004, 365, 13, 400, 337, 300, 291, 393, 1391, 764, 16000, 8568, 13, 583, 550, 50968], "temperature": 0.0, "avg_logprob": -0.1851123809814453, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.06548824161291122}, {"id": 185, "seek": 147880, "start": 1490.8799999999999, "end": 1499.76, "text": " problems are very similar there because now instead of the password, you will have to somehow convey", "tokens": [50968, 2740, 366, 588, 2531, 456, 570, 586, 2602, 295, 264, 11524, 11, 291, 486, 362, 281, 6063, 16965, 51412], "temperature": 0.0, "avg_logprob": -0.1851123809814453, "compression_ratio": 1.3793103448275863, "no_speech_prob": 0.06548824161291122}, {"id": 186, "seek": 149976, "start": 1499.84, "end": 1512.16, "text": " the right hash ID to use for the checked part. Right? Yeah, so I'm a little bit out of time here.", "tokens": [50368, 264, 558, 22019, 7348, 281, 764, 337, 264, 10033, 644, 13, 1779, 30, 865, 11, 370, 286, 478, 257, 707, 857, 484, 295, 565, 510, 13, 50984], "temperature": 0.0, "avg_logprob": -0.21964601516723634, "compression_ratio": 1.296551724137931, "no_speech_prob": 0.049225591123104095}, {"id": 187, "seek": 149976, "start": 1513.04, "end": 1526.72, "text": " But yes, you will still need to use all the technologies which I described for encryption.", "tokens": [51028, 583, 2086, 11, 291, 486, 920, 643, 281, 764, 439, 264, 7943, 597, 286, 7619, 337, 29575, 13, 51712], "temperature": 0.0, "avg_logprob": -0.21964601516723634, "compression_ratio": 1.296551724137931, "no_speech_prob": 0.049225591123104095}, {"id": 188, "seek": 152672, "start": 1526.72, "end": 1532.32, "text": " You will have to ensure the integrity of this non-encrypted, non-verified part because UKI is", "tokens": [50364, 509, 486, 362, 281, 5586, 264, 16000, 295, 341, 2107, 12, 22660, 627, 25383, 11, 2107, 12, 331, 2587, 644, 570, 7051, 40, 307, 50644], "temperature": 0.0, "avg_logprob": -0.21717162842446186, "compression_ratio": 1.5, "no_speech_prob": 0.05006459727883339}, {"id": 189, "seek": 152672, "start": 1532.32, "end": 1540.56, "text": " still going to be on ESP which is like VFAT, you cannot attach anything there. Right? Okay, so", "tokens": [50644, 920, 516, 281, 312, 322, 12564, 47, 597, 307, 411, 691, 37, 2218, 11, 291, 2644, 5085, 1340, 456, 13, 1779, 30, 1033, 11, 370, 51056], "temperature": 0.0, "avg_logprob": -0.21717162842446186, "compression_ratio": 1.5, "no_speech_prob": 0.05006459727883339}, {"id": 190, "seek": 152672, "start": 1542.48, "end": 1550.0, "text": " just a few words. Even if you have your VM which started and checked, yes,", "tokens": [51152, 445, 257, 1326, 2283, 13, 2754, 498, 291, 362, 428, 18038, 597, 1409, 293, 10033, 11, 2086, 11, 51528], "temperature": 0.0, "avg_logprob": -0.21717162842446186, "compression_ratio": 1.5, "no_speech_prob": 0.05006459727883339}, {"id": 191, "seek": 152672, "start": 1551.04, "end": 1556.32, "text": " everything, you need to verify that you are basically connecting to the VM you expect because", "tokens": [51580, 1203, 11, 291, 643, 281, 16888, 300, 291, 366, 1936, 11015, 281, 264, 18038, 291, 2066, 570, 51844], "temperature": 0.0, "avg_logprob": -0.21717162842446186, "compression_ratio": 1.5, "no_speech_prob": 0.05006459727883339}, {"id": 192, "seek": 155632, "start": 1556.3999999999999, "end": 1560.8, "text": " think about host starting your VM somewhere and then starting another one which is completely", "tokens": [50368, 519, 466, 3975, 2891, 428, 18038, 4079, 293, 550, 2891, 1071, 472, 597, 307, 2584, 50588], "temperature": 0.0, "avg_logprob": -0.15913767814636232, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.011547373607754707}, {"id": 193, "seek": 155632, "start": 1560.8, "end": 1565.76, "text": " encrypted and was like host and you know, oil miners there are changed. How would you know that", "tokens": [50588, 36663, 293, 390, 411, 3975, 293, 291, 458, 11, 3184, 35640, 456, 366, 3105, 13, 1012, 576, 291, 458, 300, 50836], "temperature": 0.0, "avg_logprob": -0.15913767814636232, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.011547373607754707}, {"id": 194, "seek": 155632, "start": 1565.76, "end": 1571.36, "text": " you are connecting your VM? So you probably need runtime attestation and clouds are offering you", "tokens": [50836, 291, 366, 11015, 428, 18038, 30, 407, 291, 1391, 643, 34474, 951, 377, 399, 293, 12193, 366, 8745, 291, 51116], "temperature": 0.0, "avg_logprob": -0.15913767814636232, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.011547373607754707}, {"id": 195, "seek": 155632, "start": 1571.36, "end": 1578.32, "text": " something but there is also no open source, something standard for that. Okay, I'll skip to", "tokens": [51116, 746, 457, 456, 307, 611, 572, 1269, 4009, 11, 746, 3832, 337, 300, 13, 1033, 11, 286, 603, 10023, 281, 51464], "temperature": 0.0, "avg_logprob": -0.15913767814636232, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.011547373607754707}, {"id": 196, "seek": 155632, "start": 1578.96, "end": 1582.8799999999999, "text": " the last and the most important slide. Thank you very much for listening.", "tokens": [51496, 264, 1036, 293, 264, 881, 1021, 4137, 13, 1044, 291, 588, 709, 337, 4764, 13, 51692], "temperature": 0.0, "avg_logprob": -0.15913767814636232, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.011547373607754707}, {"id": 197, "seek": 158632, "start": 1587.04, "end": 1594.48, "text": " You probably don't really have time for questions but I can take as many as I can before dying", "tokens": [50400, 509, 1391, 500, 380, 534, 362, 565, 337, 1651, 457, 286, 393, 747, 382, 867, 382, 286, 393, 949, 8639, 50772], "temperature": 0.0, "avg_logprob": -0.26718289511544363, "compression_ratio": 1.1926605504587156, "no_speech_prob": 0.015849845483899117}, {"id": 198, "seek": 158632, "start": 1595.12, "end": 1598.48, "text": " in the hallway. Yeah, so thank you.", "tokens": [50804, 294, 264, 23903, 13, 865, 11, 370, 1309, 291, 13, 50972], "temperature": 0.0, "avg_logprob": -0.26718289511544363, "compression_ratio": 1.1926605504587156, "no_speech_prob": 0.015849845483899117}], "language": "en"}