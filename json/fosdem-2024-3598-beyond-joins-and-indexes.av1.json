{"text": " Good morning everyone. Thank you for coming to the Postgres Dev Room. This is our first opener. We're good? Yeah, we're good. The microphones working, yeah. My name is Bruce Momjin. I am one of the Postgres core team members and it's a pleasure to be here. I was told this is the death slot for a speaker but hey this is looking really good. So, thank you for coming. I promise you an interesting 50 minutes. I hope not to disappoint because I'm going to talk about some pretty complicated things and I hope they will be very interesting. They're certainly very interesting to me and hopefully they'll be interesting to you as well. As you know we have a whole span of Postgres talks today. I was looking through the list of talks and they look really interesting so I know you won't be disappointed. This talk is actually a follow up to another presentation that I've already done and I'm going to go over that in a minute. Probably the most interesting point here is this right here and this QR code which is a link to 62 Postgres presentations, 2700 slides, 121 videos of me speaking about Postgres. So, if you are curious about Postgres and you'd like to know more about this presentation or others please feel free to go to that URL and hopefully that will help you. So, as I said before this is a follow on to a talk that I did, originally wrote in 2011. So, by the way these slides are online right now so if you want the slides and you want to look at them closer to your laptop for example just go to that URL you'll find those presentations right there. So, this is a follow on to a presentation I did in 2011 about the optimizer. I'm going to ask for a show of hands, how many people have either seen the slides, a video or me present that talk. Okay, not a whole lot. Alright, so that's good to know. That talk is basically giving you an introduction to the optimizer. As you may know, optimizer is a critical part of a database. It allows you the system to choose when to use indexes and which type of join methods to use, how the importance of statistics and things like limit clauses and so forth. So, if you're curious about looking at the precursor of this presentation, again this URL here at the bottom will work and if you download the slides you can just click on that little URL down there at the bottom and that will take you to that presentation. But that is not about what this talk is about. That talk is about the basics of the optimizer and this talk is about everything else which is why we call it beyond joins and indexes because it's beyond the concept of joins and indexes is what we talked about in the previous talk. We are going to talk about 43 other things that Postgres does beyond again using indexes and join types. There's a lot of them that are actually really, really interesting. I learned a lot in preparing this talk and I hope you'll learn a lot as I prepare it. I color coded some of all the sections although I kind of ran out of colors as you can see but you can see they're kind of grouped together. For example, the ones over here on the right, the mustard color, yellow I guess. The green ones are related to comment table expressions. I have a talk on my website about comment table expressions. These other ones are about parallelism. The red ones, the pink ones are related to aggregates and so forth. So again hopefully this is helpful to you. Another aspect of Postgres is the ability to control the optimizer. I will not specifically talk about all of the configuration parameters but this is a list of pretty much all the config parameters that Postgres allows you to use to control the optimizer. Again we have two URLs here that I think are very helpful for you to study that. The ones right up here are the ones that I covered in my previous talk so I'm not going to be discussing the ones from the previous talk here but I will cover all of these right here related to things like gather merge, parallel, hash ag, memo wise which is kind of a funny term, incremental sort and so forth. I will not be covering these although I do cover these in another talk about partitioning which again is on my website so if you're curious about partitioning that is where you would go for that. Now I would love to say that I have a grand story about all of the join types that weaves into a very poetic narrative but unfortunately I can't do that. As you can imagine the join types are kind of distinct. There is not a real great way of presenting them in a sort of a way that connects them together. So we're basically going to spend the next 45 minutes basically going through the individual types and explaining why they're used and why they're important. And again we're going to start with some really silly ones that are really kind of not very useful but as we get forward we'll start to see some really interesting ones and of course at the end we have some really bizarre ones in some ways. The first one we're going to talk about is called a result node. If any of you have ever round explained before and you see these node types in the explain plan that's what we're going to be talking about. So you probably see the things like index scan, sequential scan, merge join, hash join, nested loop. You see those node types before. Those node types are talking about my previous talk. What I'm going to talk about now are the node types that I did not cover in my previous talk which are actually really interesting. Another thing that you should be aware of is that this presentation was originally written as SQL. So I basically created an SQL script that had a whole bunch of queries with explain running and then I ran it and then I captured it and I put it up into the slide deck and colorized it and labeled it and so forth. So if you want to run this presentation download this SQL file right here at that URL and just run it through PSQL and it'll just like fly off your screen. The only problem is you don't get the colors. It's just all one color. But you can test it. You can see and reproduce what you're seeing basically by running that SQL. Probably no questions about the result type. The result type is basically result is just a constant. Whether it's a string or whatever it's just a constant. There's nothing fancy going on here. You're basically just saying select one. Another thing is I'm using colon explain and you're going to see that over and over again in the presentation. Colon explain basically just turns off the costs. It's just so it makes it simpler for you to see. You don't see numbers in here that really aren't adding anything to the presentation. That's a PSQL feature right there, the backslash set and the ability to run explain without costs. That will reproduce the presentation on your screen. This one you might not have seen before and you might be a little surprised. This is not part of the SQL that I used back in the 90s. I guess SQL 89 didn't have this. I don't, Vic isn't here. He would know when we added this. This part of the SQL standard, it's basically the values clause is basically like a select with a bunch of values. Except that it's kind of like select with a union and select with a union. Instead of doing that, you can just type values and it makes a row of one and the second row has the number two. It's basically a very kind of throw off the cuff kind of a clause. It has a special scan node which is called values and that's exactly what it looks like. Another thing you're going to see over and over again in this talk is things that are in blue are causes of things that are in red. If we look at this slide, for example, the cause is values in blue and the result is the value scan. That's the output. If you're ever looking at a slide, you say blue is the cause, red is the output that caused the result of the blue. You'll see that over and over again. Any questions so far? Great. Generate series. This is just an example. There are many other cases where functions generate multiple rows. But any function that generates multiple rows, it's going to create a node type called a function scan. Normally functions return one value. That's kind of the mathematical definition of a function. But of course in SQL, we've gone beyond that. We have the ability for functions to return multiple rows. Not only multiple values in a row, which you would use in an out clause, but actually multiple rows. That would be something like a function scan. This is our first legitimate output. This is a case where we're doing something called an incremental sort. I had trouble understanding what that actually was, but I think this should illustrate it to you. How many have seen incremental sort before in their plans? Anybody? A couple? Incremental sort is a case where you're sorting by multiple keys and the earlier part of the key is already sorted, but the latter part of the key is not sorted. It kind of makes sense. You're incrementally sorting. You've got the front part, the early fields are sorted, and the later parts are not. So here we have, I've created a table with a million rows, and I've created an index on the first column, x. I've analyzed it, so I've got statistics on it, and I add a column y on the end of it, and then I select from it, and I do it by x, y. What happens is you can see the system is smart enough to say, well, I can get part of it sorted by pulling off of the index I've already created, but I can't really do the y, so I'm going to do an index scan on the x table, and then I'm going to do an incremental sort on top of that, and I already have x sorted, I'm just going to add the y part. So if you didn't have this, effectively you couldn't use the index, and you'd have to basically resort the whole result set, obviously it would be much slower, that's why we got incremental sort. And what you're also going to see in this presentation is a lot of diagrams, because I love diagrams, they help me to see what's going on, visually. What you can see here is you can see that the table, originally all of the 3's are together, all of the 4's are together, but you can see all of the y fields, the second column, are all in random order, and effectively what incremental sort does, it knows that the first blue section is in order, doesn't need to touch that, and it merely sorts the second column. So we're going to see this kind of pattern over and over, I'll show you the SQL, I'll show you a diagram that kind of explains what it does. Any questions? Okay, great. Unique, you've probably seen this before, this is not necessarily the unique clause when you do DDL, you can actually create a column as unique, that is actually not what we're doing here, it's basically, typically would use if you're using a distinct clause on top of some kind of result. So here I'm generating numbers from 1 to 10, I'm ordering them and I'm saying make sure they are distinct, so what we're doing is we're basically doing a function scan, remember function scan we just saw that earlier, right, and then we're doing a sword on top of that, so all the values are sword together and I'm running unique on it, basically another way of doing this, this is the way of distinct, another way of needing unique is a union, I'm not sure how many of you remember, but union always does distinct removal, you know, a duplicate removal, right, unless you use the all clause, unique is always going to remove duplicate, so even though I'm just saying union, I'm not saying union distinct or anything, it automatically does it that way. So therefore, when I do 1, 2, I basically am going to take my new result sets, remember, we did remember, that was the first node type we learned was result, remember, way back, hey, four minutes ago, then we sort them so all the results are next, the duplicates are next to each other, and then all we have to do is get rid of the duplicates as we go forward, and again, similar case here, we have a bunch of random numbers, we sort them so all of the duplicates are now next to each other, you can see the sixes and the threes are next to each other, and then we run the unique on it, and all it does is compare and removes any duplicate next to each other entries, and we get our unique output, okay, great. Okay, append, this one exactly what I talked about before, remember I said that union will remove duplicates by default, that's true, but if you use the union all clause, right, it doesn't remove the duplicates, so we have a special node type just for that, it's called append, so when you say select one, union all, select two, we have our two result nodes, and we just append the values right on the end of each other. It's exactly what it looks like, this is my first result set, this is my second result set for the union, and I'm just sticking them, I'm just appending them next to each other. Very, very, very basic, very basic case. Okay, merge append, this one's good, okay. This is kind of weird because it combines two terms that we think we know, right, we just talked about append, we know what that does, okay, but then we have the merge, which sounds like a merge joined in me, right, it's kind of, you're going to see this pattern where we've got a node type we know, another node type we know, and if we put the two names together and it does something different, it's not ideal, it's trying to kind of match it, but this is, what will we have, okay, so what I'm doing here is I'm taking a values clause, which we talked about before, remember values clause, I'm taking another values clause, I'm union alling them, so I'm appending them together, right, okay, now I'm appending them together, but each of the unions is already ordered, this is the key aspect here, okay, remember we had append, append just sticks one on the end of another, I will tell you that putting this presentation together is like a jigsaw puzzle, because you've got all these node types and you can only talk about the first node, the second node type, if you talked about the first one, and getting it all to kind of fit in your brain is quite a challenge, I hope I've succeeded, but effectively what we have here is two values clauses, but these values clauses are automatically ordered, and therefore when we do a union all and we want the result to be ordered, okay, the stupid way to do it would be to just take the results of a pandemic and then sort the whole result, right, that would be the silly way to do it, because we already have our results ordered in two pieces, so what merge a pen does is it takes two result sets that are already ordered and maintains the ordering as it merges them together and it repends them together, okay, so here you can actually see that right here, we've got our sort, for the first one we've got our sort for the second one and now we do our merge a pen, and I apologize for the diagram, but this is the best I can do, what we have here on the left is the first result set, on the bottom we have the second result set, as you can see from the query we sorted the first result set here, we sorted the second result set here, and as we append them together we want to maintain the ordering that those result sets already had, and to do that we're going to take the lowest value from each result set and just repeat it, so the lowest value between these two is two, the lowest value between these two is three, the lowest value between these two is three, the lowest value between this and this is four, five, six, eight, eleven and twelve, okay, so by using merge a pen we've avoided having to resort the results, we basically kind of merge them together, and if you're familiar with the way a merge join works, that's kind of how it works, right, it takes two results and kind of compares them and kind of walks down, finding the minimum matching values as it merges them together, it's the same concept, this is what I'm kind of getting at, that the terms that we use here are not random, like the fact we call this a merge a pen actually has some logic to it, because we're taking what effectively is a merge join and we're sort of repurposing that concept to do a pen and retain the sorting, any questions? Yes sir? Do you know the same thing by using merge a pen instead of just, I don't think the answer. So the question is do I know how much time we're gaining by doing merge a pen versus just sorting, so we have, we're a cost based optimizer, so we know the cost of how, what it would take to sort the whole thing and what it would take to do merge a pen, so we are always reevaluating that, all we know as back end developers is we're going to run the cost of both of them and we're going to figure out which one is faster, I don't know how much benefit it is, of course it depends on the size of your result set, but we're only going to do merge a pen if it's a win, if it would be cheaper to do it the other way we do it the other way, right? Other questions? Yes sir? Does the query guarantee the order of the two set periods to leave out the order by? So the question is if I leave out these order bys, No, the other, the lower order by. I'm sorry? Is that the query? Yeah, this one here? No. This one here. This one? Yeah. Well, if I don't have this here, I'm not going to do a merge a pen, because I don't need to, I don't just, I'll just append them together, I don't need to merge them and maintain, the only reason we're doing that, you see how order by one is in blue, that has to be there, if that order by isn't there we aren't going to use merge a pen, because we don't need to preserve it, right? Yeah? In that case would the other two order bys also be removed? So the question is in that other case where the two other order bys also be removed, the answer is no, because the user would still get the order by of the first result, and then the second result would be right underneath it. So they've specified in the query that they want the order by, we're going to maintain that. But because they've added an order by after it, we're kind of overriding it and kind of using their order by. Now I'll admit this is a contrived example, we could have done an index scan to get this order by. So this is the fact that I've got two order bys up there, you see they're not in blue, they have to be there, but it could be some other query, we could be doing an index scan and pull the orders that way, and that way we don't have to do sorting again, could be anything, right? Yes. I told you earlier that we do this order by inside, you kind of like hit the optimizer, which I'm not supposed to, but I know that you need to restore them. So it will do this, right? But I mean in more complex cases it's not necessarily that you had to restore the other two. So the question is do we need to order by there? The fact is if there's no ordering of the two results, we aren't going to do order by, we're just going to do a big one huge sort and just run with it, right? The only reason we're doing that is that. Okay, so eight and nine, two new options here. One is called subquery scan and one is called hash set up. I know I'm not super proud of hash set up, it sounds like a, I don't know, some kind of science fiction thing, or I don't know what, but let's just look at this. So this is a query where we've got a thousand rows and we're saying select from the small table and then remove or subtract or whatever, how do you explain it? These other rows. Now we know by looking at this there are no rows. Okay, so just go work with me here, all right? The system doesn't know that, that I've actually removed the rows from the same table twice. We don't have an optimization for that. So what we're going to do here is we're going to run something called a subquery scan and we're going to run it twice because we've got two queries here and then, I'm sorry, subquery scan and then we're going to do hash set ups. And again, crazy, crazy diagram, I'm going to walk you through this. What we basically have, this is the outer part, the first part of the query and this is the except part of the query. The query, we're removing all the matches, okay? And what we're going to do, and this is kind of weird, is we're going to create, we're going to kind of append the two together and we're going to put one, a label one for the first query and a label two for the second query. Okay, so here's the first query, all with ones in the second column. Here's, same thing with all, two is in the second column. And then what we're going to do is we're going to hash them and we're going to hash them basically in a random order because again, hashing doesn't have any ordering to it. And we're going to look for the ones that basically all of the ones that don't have a two. So for example, the seven does not have a two match for the hash and therefore it's part of the output, the three and the six have a one but without a two and those aren't going to go out. A 12 is going to come out and the five and the eight and the eleven have a two without a one. Okay, so anything basically that has a one without a two, that's what we're going to output and that's how we're going to implement this except right here. Again, we have some, if you want to read this at some point, this is related to how we do intersect and accept and so forth. It's kind of interesting if you're curious for later, you really want to study the slides, feel free to read that. Setup is what we would use for intersect. Intersect again, another opportunity here. So we want to find the ones that are in both of them. So we have large intersect from large, again same issue. We do a subquery scan, we append them together, we sort them and we do set up. Again, similar diagram, here's the first part, here's the second part. We label with one, we label with two, we create a joined result, we create the hash but in this case, we're now looking for cases that have a one and a two. Remember before it was cases that have a one without a two? Now we're looking for cases with a one and a two. And you can imagine we're kind of using the same code, right? It's sort of the same idea, it's just the filter you put on at the end. Because remember this one was all the ones without twos. This is cases where there's a one and a two together. Three has a one and two together, five does not, six has a one and two together, seven, eight, eleven and twelve do not. So that's intersect. Any questions? Materialize, this was an interesting one. I had trouble kind of understanding what this was, because materialize to me, there's like a materialize command, SQL command, like for materialize views. That's what I thought, is it that? Again, we're reusing terms quite a bit here. So what we have is a query that's selection small, and it also selects from a copy of itself, but again, the optimizer doesn't know this. And we're doing a very weird comparison here, we're doing a not equals. As you imagine, equals is really easy to do, not equals is kind of awkward. So what we end up doing, and I know this is kind of weird, we basically take the inner side, and we actually create a memory copy of it. So we load the matching rows, remember this is a small table, in fact it says literally small, we know it's a small table. And it just loads that into memory, so we can do the not equal comparison much quicker, than it could if it had to read them out of shared buffers. That's all it's really doing. It knows because we're going to be hitting this thing over and over and over again for not equals, we don't want to keep hitting the shared buffers, so we just bring it in, bring a copy in, and we effectively just do a bazillion comparisons on our local copy of this very small table. Memo-wise is a weird one, that was at I believe in 14, I think, somebody? Yes sir. Sorry, what was the phone number? Yeah. The local memory, is it a working memory set? Yeah, this would be your working workman. Could be, yeah. So if I cranked up my workman, would a... Would you work... So the question is if you cranked up workman, would you be more likely to do materialize? Maybe, yeah, I could maybe. I think so. Give it a try, yeah. Okay, Memo-wise was introduced... Memo-wise is a weird term to me, like it's a memo, it's like a letter, like what is it, right? It turns out that Memo-wise is the sort of academic term for this thing, and I'll explain what this thing is. But that's how we got the word Memo-wise. We had a long discussion about what to call this, and somebody said, oh, that's Memo-wise. And we're like, what do you mean that's Memo-wise? And they sent us some academic paper, and they're like, oh, okay, that's what it is. All right, so let's take a look at what Memo-wise is. So it's kind of hard to set up, I need to create a table with duplicates that also is too small to make sense for a hash joint. I know that's like a big word, a lot of words. But effectively, what I have here is I'm going to do a join, and I have a small table, but it's not big enough to hash it, because hashing is expensive. And I need something that's too big for a hash joint on the other side. So it sounds like the requirements for this thing almost never happened, but it turns out that Memo-wise has a lot of things. But Memo-wise happens all the time. I don't know why, but when I read the description and when it's important, I was like, pfft, nobody's ever going to use this thing. But it turns out that it actually gets used quite a bit in real-world applications. But again, it's a case where we have a lot of duplicates, something's really big, something's really small, so you can memo-wise it, and something's really big, meaning you're going to do a lot of comparisons. So we have an index on the Memo-wise field. So here's the query we select from small with dupes, and we join it to a medium table. And here you see the Memo-wise clause right here. If you're curious, this blog post right here does a great job of explaining Memo-wise, and you can see right here, Postgres 14 is the release that that was added in, because that says Postgres 14 right there. 14 later, right there. All right, so what does Memo-wise do? It basically creates a local memory cache of the table you're joining to. So basically it's a case where I know I have a lot of duplicates here. So here's, like, this is duplicate of that, this is duplicate of that, so forth. So I know I have a lot of duplicates, so I know I'm going to be hitting the cache over and over again. Right? So I'm going to be hitting the cache over and over again. Right? So instead of doing what potentially could be an index lookup over and over again into the index, I create a cache. And I basically say, okay, is this a match? If it is, then I can say that's a join. If it isn't, then I've got to go over here and check and refresh and make sure it's okay. It also has a negative cache. I'm not showing that, but there's a cache of stuff that isn't there as well, which I'm not going to show you. So the point of Memo-wise here, it's right here, inner-side lookups that return no-os are also recorded in the cache. So my point is that when you're going to do an index lookup over and over again, because you have a lot of duplicates, and you're going to be checking it over and over again, why don't we create a cache so we can remember the index lookups, and we don't have to keep doing them. But again, only in limited cases, table has to be small, has to be duplicates, has to be the inner-side, the Memo-wise side has to have an index, so we can refresh the cache when we need to. That makes sense, it sounds like crazy. I thought it sounded crazy, but it actually is really useful, and it's kind of cool. So if you see Memo-wise in the future, you'll be like, oh, that's kind of neat. Okay, any questions? Okay, let's launch into more of a section. Okay, I know we've kind of hit a bunch of sort of discrete topics. I'm going to move into an area where we have some coherence. We kind of move through. We're going to talk about grouping and aggregates now. So here's a query where we do a join, and we're saying x is less than 0, group by x. So I didn't know that you can do a group by i when there's no aggregates in the query. I learned that in doing this presentation. I thought a group by always had to have some aggregates out here, but turns out it doesn't. Basically removing, wearing, adding, what if I does the same thing? So here's a group clause. It's going to give me everything x less than 0. And all it does is it basically just removes the duplicates. That's all the group does. It says okay, 1, 1. Okay, that comes across 1, 2. I got two of those. I'm only going to get one of those. For these I would go across. I have three of these. I get one of those. So again, group by with aggregates is similar to distinct, except duplicate detection can consider more columns than those selected in the output. Again, I give you, that's an option for studying later, exactly what that means. You can try it out and see how it works. You can do a group of a single column, and that is actually a use for group alone. You notice I'm getting, notice I have, these are not unique. Like this and this and this, these are different, but they all generate one output. So it kind of trims off the one column. I know it sounds really silly, but there are actual use cases to this. So all the ones get output, choose in the first column, get output, all the freeze get output. Aggregate, everyone's familiar with this, the count command, we have a node type for that, just called aggregate, very easy to predict. Here's a group aggregate, which would be a group by with account on top of it. So this is an aggregate, again, makes sense, right? We learned aggregate, we learned group. What do we call the node type when we have aggregate and group together? Group aggregate, right, makes a lot of sense, so that's what we call it. And group aggregate effectively outputs the non-aggregate column once, and just like the group by, which we talked about, and then instead, for the second column, it runs an aggregate across that second column, right, which is what we're all familiar with. Oh, why do I find networks are available? Isn't that exciting? Okay, hash aggregate. So this is a case where it's not actually an aggregate, we're basically doing a distinct using a hash. There's no mention of aggregate here at all, right? But what effectively we do is we take all of our values, and we put them in a hash, and we merely have one value for each hash. It's very similar to group, the group clause. Remember how the group clause got rid of duplicates? This is a way of doing it, except instead of doing it by group, we're doing it by hash. Okay, instead of sorting, we can basically just create a hash and remove the duplicates that way, and that's what the distinct is. So normally I wouldn't think of distinct as related to group, but in fact, I can see now, kind of, okay. And I have lost my mic, so I'm sorry about that. I will fix that. There we go. Great, okay. Mixed aggregate, I'm not sure how many of you are familiar with rollup. I do have a Windows function talk on my website that explains what rollup does, okay. And effectively it does, the rollup is basically taking, again, the unique values and then rolling them up into an aggregate. Okay, and it also sorts it, which is different than the other one, because you notice that it's all sorted, okay. Window functions, again, I have a window function talk on my website, but again, these are all kind of grouped together. So this is a sum over the entire result set. It generates something called a window ag, and a window ag effectively just takes each individual roll, but it manages to output an aggregate across all the rows within the group. If that makes no sense to you, I recommend you take a look at my window talk. It is kind of unusual how this works, but effectively all we're doing here is it allows us to maintain the distinctness of the rows. Window functions allow aggregates across rows while the individual rows remain distinct. And that's exactly what's happening with the window ag. Okay, moving on to parallelism, we do have a nice reference here to the Postgres stocks about parallelism. I'm going to go over a bunch of parallelism nodes that are quite interesting. So here is parallel sequential scan, partial aggregate, gather and finalize aggregate, okay. So here we're doing a sum on the large table. So we have a big table, we're doing a sum, and we generate a whole bunch of parallelism here. Parallel sequential scan, a partial aggregate, something called a gather, and then a finalizer aggregate. So kind of like prepare for the diagram of craziness here. What we basically have, again, going from left to right, we have the first part of the sequential scan. Remember, we're only scanning one table, but we've broken it up into two parts, because we want to scan them in parallel, right. So here we're scanning, we're using one background worker to scan the first part of the table in parallel. This is called a parallel sequential scan. We're taking the second part of the table. We're also doing a parallel sequential scan on the second part of the table. We're also going to generate what's called a partial aggregate. That partial aggregate is going to be the aggregate result across all of the rows that our parallel sequential scan has processed. And now we have a partial sum right here. The same thing down here, this is a partial sum here. We then send both results to the parent, which generates something called a gather node. That kind of makes sense. Now the gather node is gathering results from parallel workers. And of course, because we're generating a sum, all we need to do is add together the two rows that we've gathered, 27, 33, and we issue something called a finalized aggregate, and that generates my 60. Okay. Now again, this is just a two, but we could use a hundred ten. However many parallelism you decide to use. And again, it's scanning different parts of the table in parallel. Yes, sir. Why there is partial aggregate, finalized aggregate, and aggregate nodes, because they are just the same, but they are different parts. And using parallel here, you just aggregate on a smaller size table. But I don't know why you decided to call three different nodes, but basically they're the same. Okay, so the question is why are we doing, why do we have different, why is this not the same as that basically? And the reason is that for some, for the sum command, they're the same. But if I'm doing something like a max or standard deviation or something, we're going to have different operations to join these together. So sum is the simplest one, that's the one I use, but for other aggregates, these would be more complex. And we may do different things at different stages. But I see what you're saying, it's sort of, the point is that, it's just the way it's processed. They probably, some cases could be the same, other cases they can't, so we just call them different things. Okay. Gather, now we saw merge append. Now we have gather merge, which sounds kind of like, well, what happened? Okay. And what gather merge does is it effectively is going to take parallel workers and then just merge them together. Again, I have the same parallel scan here, I have a parallel scan here, I'm going to do a sort. So again, I'm not using aggregate here, I'm doing a sort. Okay. And now I've scanned part of it. You know, I keep doing that, that's not good. The reason is because of the way the clip, the clip doesn't go into my shirt properly, so I keep having to shove it in there. Alright. So basically we've sorted, within the background worker, our results, we sorted and now we're going to gather, merge, remember merge append or merge joint merge, merge append. We're going to take the lowest of this, the lowest of this, and then we're just going to keep doing it and then take those and merge the two ordered results together. Okay. Makes a lot of sense. Parallel append, all we're going to do here is we're going to append stuff together. This is one of the craziest diagrams I have, I think. So here we're doing, we're doing our background worker parallel scan and we're going to take the, we're going to append the two of the workers together because this is a join again and then we're going to take the other part, we're going to join that and then we're going to sort those and then we're going to merge them. So I know it sounds like kind of crazy, but what we're doing is we're doing four sorts and we're appending them in stages and then we're sorting those in batches. And then, so it's a combination of basically a parallel scan with a sort involved, which also happens in background workers. So again, it's just, it's just, this is the craziest diagram I think we have. Parallel hash, parallel hash join. Here we're doing a join, a join in parallel. Again, crazy diagram. Here's our parallel sequential scan. We're going to hash those together in a shared memory hash, which is kind of like mind blowing, but effectively we have dynamic shared memory and we're going to create for the background workers a shared hash table and they're going to join, push those into the parallel hash table and then once we get this shared hash, which has been built by multiple background workers, we're going to take our outer side and we're going to join against these, that shared hash into potential background workers. And then we're going to gather them together and get the result. So not only are we doing the sorting in parallel, we're actually creating the hash in parallel and we're doing the hash join in parallel and then we're returning the result. Okay, so I realize it's a lot, but that's exactly what it's doing. Okay, let's move on. Comment table expressions, again, have a nice talk about that on my website. Honestly, I don't get any money for advertising my talks, but you'd think so from this talk. So if we do a comment table expression with a materialized node, we just do something called a CT scan and effectively all we're doing we're scanning across the comment table expression we created. Okay, I got it. Work table scan, this is also with a recursive comment table expression. We would do that here. We're going to loop around through this and again we create something called a work table and a recursive union. This is a diagram from my other presentation. It talks about how comment table expressions work. And again, this is a diagram. It's basically looping in and creating this comment table expression. And then as you loop through the results, you're continuing to append to what we call a CT source, which would be used later in a query. I know if you're not familiar with comment table expressions, it's not going to make any sense. I apologize for that. I apologize for my microphone. Project set, this is a case where we have a function returning multiple rows in the target list. Not the from clause in the target list. Very interesting. Lock rows, if you do for update, we generate a lock rows node. If you do a table sample, we generate a sample scan. Not surprising. If you're using XML table, we actually have a table function scan. I think that is the only function call that uses that node type. Just a very special, very obscure case there. Foreign tables, if you're familiar with those, we have special foreign scans for those. If you've ever used CTids, we have a special Tids scan. CTids are the physical location of the values. We're basically using a Tids scan for that. This is what a Tids scan would do, effectively open a certain page and return a certain value in the page. Insert generates an insert node. Update generates an update node. Delete generates a delete node. Truncate does not, by the way. Truncate is different. Merge, the merge command generates a merge node. Exists generates something called a semi-join. A semi-join is very similar to a normal join, except it stops after the first intermatch. So it's similar to any other join, but it stops after the first. It doesn't keep going to find out how many matches there are. As soon as it finds one, it can stop. The in clause will use also a semi-join, and again, some details on how null handling works for in exists for those people who are curious. Not exists uses something called an anti-join. Not surprising. Anti-join for not exists. And not in is kind of weird. So technically exists and in are almost the same for nulls, but not exists and not in is actually different. And again, we kind of explain it in the query here. We also have something called an outer... We have a feature that I realized during writing this talk called an outer join removal. Notice I'm doing a left join on something where it actually removes the join itself, because it has a unique index and it knows there's only one possible match, so it actually got rid of the join, which I felt was like crazy. That optimized pretty smart. And finally, two things I didn't cover, tuple scan and custom scan. There are... There's documentation and postgres about it, but you don't see this very often. So that does complete what I wanted to do. I believe the time is exactly 9.50. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.0, "text": " Good morning everyone. Thank you for coming to the Postgres Dev Room. This is our first", "tokens": [50364, 2205, 2446, 1518, 13, 1044, 291, 337, 1348, 281, 264, 10223, 45189, 9096, 19190, 13, 639, 307, 527, 700, 50964], "temperature": 0.0, "avg_logprob": -0.3332951119605531, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.4457823634147644}, {"id": 1, "seek": 0, "start": 12.0, "end": 19.48, "text": " opener. We're good? Yeah, we're good. The microphones working, yeah. My name is Bruce", "tokens": [50964, 43850, 13, 492, 434, 665, 30, 865, 11, 321, 434, 665, 13, 440, 30495, 1364, 11, 1338, 13, 1222, 1315, 307, 15429, 51338], "temperature": 0.0, "avg_logprob": -0.3332951119605531, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.4457823634147644}, {"id": 2, "seek": 0, "start": 19.48, "end": 24.52, "text": " Momjin. I am one of the Postgres core team members and it's a pleasure to be here. I", "tokens": [51338, 5576, 13970, 13, 286, 669, 472, 295, 264, 10223, 45189, 4965, 1469, 2679, 293, 309, 311, 257, 6834, 281, 312, 510, 13, 286, 51590], "temperature": 0.0, "avg_logprob": -0.3332951119605531, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.4457823634147644}, {"id": 3, "seek": 0, "start": 24.52, "end": 29.96, "text": " was told this is the death slot for a speaker but hey this is looking really good. So,", "tokens": [51590, 390, 1907, 341, 307, 264, 2966, 14747, 337, 257, 8145, 457, 4177, 341, 307, 1237, 534, 665, 13, 407, 11, 51862], "temperature": 0.0, "avg_logprob": -0.3332951119605531, "compression_ratio": 1.5065502183406114, "no_speech_prob": 0.4457823634147644}, {"id": 4, "seek": 2996, "start": 29.96, "end": 37.8, "text": " thank you for coming. I promise you an interesting 50 minutes. I hope not to disappoint because", "tokens": [50364, 1309, 291, 337, 1348, 13, 286, 6228, 291, 364, 1880, 2625, 2077, 13, 286, 1454, 406, 281, 8505, 570, 50756], "temperature": 0.0, "avg_logprob": -0.1958626783811129, "compression_ratio": 1.7734375, "no_speech_prob": 0.013096844777464867}, {"id": 5, "seek": 2996, "start": 37.8, "end": 43.760000000000005, "text": " I'm going to talk about some pretty complicated things and I hope they will be very interesting.", "tokens": [50756, 286, 478, 516, 281, 751, 466, 512, 1238, 6179, 721, 293, 286, 1454, 436, 486, 312, 588, 1880, 13, 51054], "temperature": 0.0, "avg_logprob": -0.1958626783811129, "compression_ratio": 1.7734375, "no_speech_prob": 0.013096844777464867}, {"id": 6, "seek": 2996, "start": 43.760000000000005, "end": 47.400000000000006, "text": " They're certainly very interesting to me and hopefully they'll be interesting to you as", "tokens": [51054, 814, 434, 3297, 588, 1880, 281, 385, 293, 4696, 436, 603, 312, 1880, 281, 291, 382, 51236], "temperature": 0.0, "avg_logprob": -0.1958626783811129, "compression_ratio": 1.7734375, "no_speech_prob": 0.013096844777464867}, {"id": 7, "seek": 2996, "start": 47.400000000000006, "end": 54.36, "text": " well. As you know we have a whole span of Postgres talks today. I was looking through", "tokens": [51236, 731, 13, 1018, 291, 458, 321, 362, 257, 1379, 16174, 295, 10223, 45189, 6686, 965, 13, 286, 390, 1237, 807, 51584], "temperature": 0.0, "avg_logprob": -0.1958626783811129, "compression_ratio": 1.7734375, "no_speech_prob": 0.013096844777464867}, {"id": 8, "seek": 2996, "start": 54.36, "end": 59.56, "text": " the list of talks and they look really interesting so I know you won't be disappointed.", "tokens": [51584, 264, 1329, 295, 6686, 293, 436, 574, 534, 1880, 370, 286, 458, 291, 1582, 380, 312, 13856, 13, 51844], "temperature": 0.0, "avg_logprob": -0.1958626783811129, "compression_ratio": 1.7734375, "no_speech_prob": 0.013096844777464867}, {"id": 9, "seek": 5956, "start": 60.56, "end": 67.92, "text": " This talk is actually a follow up to another presentation that I've already done and I'm going to go over that in a", "tokens": [50414, 639, 751, 307, 767, 257, 1524, 493, 281, 1071, 5860, 300, 286, 600, 1217, 1096, 293, 286, 478, 516, 281, 352, 670, 300, 294, 257, 50782], "temperature": 0.0, "avg_logprob": -0.2683463760569126, "compression_ratio": 1.4930875576036866, "no_speech_prob": 0.004388387780636549}, {"id": 10, "seek": 5956, "start": 67.92, "end": 74.92, "text": " minute. Probably the most interesting point here is this right here and this QR code which is a link to", "tokens": [50782, 3456, 13, 9210, 264, 881, 1880, 935, 510, 307, 341, 558, 510, 293, 341, 32784, 3089, 597, 307, 257, 2113, 281, 51132], "temperature": 0.0, "avg_logprob": -0.2683463760569126, "compression_ratio": 1.4930875576036866, "no_speech_prob": 0.004388387780636549}, {"id": 11, "seek": 5956, "start": 74.92, "end": 86.32000000000001, "text": " 62 Postgres presentations, 2700 slides, 121 videos of me speaking about Postgres. So, if you are curious", "tokens": [51132, 24536, 10223, 45189, 18964, 11, 7634, 628, 9788, 11, 2272, 16, 2145, 295, 385, 4124, 466, 10223, 45189, 13, 407, 11, 498, 291, 366, 6369, 51702], "temperature": 0.0, "avg_logprob": -0.2683463760569126, "compression_ratio": 1.4930875576036866, "no_speech_prob": 0.004388387780636549}, {"id": 12, "seek": 8632, "start": 86.36, "end": 94.36, "text": " about Postgres and you'd like to know more about this presentation or others please feel free to go to that URL", "tokens": [50366, 466, 10223, 45189, 293, 291, 1116, 411, 281, 458, 544, 466, 341, 5860, 420, 2357, 1767, 841, 1737, 281, 352, 281, 300, 12905, 50766], "temperature": 0.0, "avg_logprob": -0.2241519834937119, "compression_ratio": 1.5625, "no_speech_prob": 0.016107376664876938}, {"id": 13, "seek": 8632, "start": 94.36, "end": 106.35999999999999, "text": " and hopefully that will help you. So, as I said before this is a follow on to a talk that I did,", "tokens": [50766, 293, 4696, 300, 486, 854, 291, 13, 407, 11, 382, 286, 848, 949, 341, 307, 257, 1524, 322, 281, 257, 751, 300, 286, 630, 11, 51366], "temperature": 0.0, "avg_logprob": -0.2241519834937119, "compression_ratio": 1.5625, "no_speech_prob": 0.016107376664876938}, {"id": 14, "seek": 8632, "start": 106.35999999999999, "end": 114.0, "text": " originally wrote in 2011. So, by the way these slides are online right now so if you want the slides and you want to", "tokens": [51366, 7993, 4114, 294, 10154, 13, 407, 11, 538, 264, 636, 613, 9788, 366, 2950, 558, 586, 370, 498, 291, 528, 264, 9788, 293, 291, 528, 281, 51748], "temperature": 0.0, "avg_logprob": -0.2241519834937119, "compression_ratio": 1.5625, "no_speech_prob": 0.016107376664876938}, {"id": 15, "seek": 11400, "start": 114.04, "end": 120.04, "text": " look at them closer to your laptop for example just go to that URL you'll find those presentations right there.", "tokens": [50366, 574, 412, 552, 4966, 281, 428, 10732, 337, 1365, 445, 352, 281, 300, 12905, 291, 603, 915, 729, 18964, 558, 456, 13, 50666], "temperature": 0.0, "avg_logprob": -0.2216738746279762, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.040136516094207764}, {"id": 16, "seek": 11400, "start": 120.04, "end": 130.04, "text": " So, this is a follow on to a presentation I did in 2011 about the optimizer. I'm going to ask for a show of hands,", "tokens": [50666, 407, 11, 341, 307, 257, 1524, 322, 281, 257, 5860, 286, 630, 294, 10154, 466, 264, 5028, 6545, 13, 286, 478, 516, 281, 1029, 337, 257, 855, 295, 2377, 11, 51166], "temperature": 0.0, "avg_logprob": -0.2216738746279762, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.040136516094207764}, {"id": 17, "seek": 11400, "start": 130.04, "end": 138.04, "text": " how many people have either seen the slides, a video or me present that talk. Okay, not a whole lot.", "tokens": [51166, 577, 867, 561, 362, 2139, 1612, 264, 9788, 11, 257, 960, 420, 385, 1974, 300, 751, 13, 1033, 11, 406, 257, 1379, 688, 13, 51566], "temperature": 0.0, "avg_logprob": -0.2216738746279762, "compression_ratio": 1.5069124423963134, "no_speech_prob": 0.040136516094207764}, {"id": 18, "seek": 13804, "start": 138.07999999999998, "end": 146.07999999999998, "text": " Alright, so that's good to know. That talk is basically giving you an introduction to the optimizer. As you may", "tokens": [50366, 2798, 11, 370, 300, 311, 665, 281, 458, 13, 663, 751, 307, 1936, 2902, 291, 364, 9339, 281, 264, 5028, 6545, 13, 1018, 291, 815, 50766], "temperature": 0.0, "avg_logprob": -0.1516915440559387, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.04457242414355278}, {"id": 19, "seek": 13804, "start": 146.07999999999998, "end": 154.07999999999998, "text": " know, optimizer is a critical part of a database. It allows you the system to choose when to use indexes and which", "tokens": [50766, 458, 11, 5028, 6545, 307, 257, 4924, 644, 295, 257, 8149, 13, 467, 4045, 291, 264, 1185, 281, 2826, 562, 281, 764, 8186, 279, 293, 597, 51166], "temperature": 0.0, "avg_logprob": -0.1516915440559387, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.04457242414355278}, {"id": 20, "seek": 13804, "start": 154.07999999999998, "end": 163.07999999999998, "text": " type of join methods to use, how the importance of statistics and things like limit clauses and so forth.", "tokens": [51166, 2010, 295, 3917, 7150, 281, 764, 11, 577, 264, 7379, 295, 12523, 293, 721, 411, 4948, 49072, 293, 370, 5220, 13, 51616], "temperature": 0.0, "avg_logprob": -0.1516915440559387, "compression_ratio": 1.5586854460093897, "no_speech_prob": 0.04457242414355278}, {"id": 21, "seek": 16308, "start": 163.12, "end": 171.12, "text": " So, if you're curious about looking at the precursor of this presentation, again this URL here at the bottom", "tokens": [50366, 407, 11, 498, 291, 434, 6369, 466, 1237, 412, 264, 41736, 284, 295, 341, 5860, 11, 797, 341, 12905, 510, 412, 264, 2767, 50766], "temperature": 0.0, "avg_logprob": -0.09617630431526586, "compression_ratio": 1.7747252747252746, "no_speech_prob": 0.0426558293402195}, {"id": 22, "seek": 16308, "start": 171.12, "end": 177.12, "text": " will work and if you download the slides you can just click on that little URL down there at the bottom", "tokens": [50766, 486, 589, 293, 498, 291, 5484, 264, 9788, 291, 393, 445, 2052, 322, 300, 707, 12905, 760, 456, 412, 264, 2767, 51066], "temperature": 0.0, "avg_logprob": -0.09617630431526586, "compression_ratio": 1.7747252747252746, "no_speech_prob": 0.0426558293402195}, {"id": 23, "seek": 16308, "start": 177.12, "end": 185.12, "text": " and that will take you to that presentation. But that is not about what this talk is about. That talk is about", "tokens": [51066, 293, 300, 486, 747, 291, 281, 300, 5860, 13, 583, 300, 307, 406, 466, 437, 341, 751, 307, 466, 13, 663, 751, 307, 466, 51466], "temperature": 0.0, "avg_logprob": -0.09617630431526586, "compression_ratio": 1.7747252747252746, "no_speech_prob": 0.0426558293402195}, {"id": 24, "seek": 18512, "start": 185.16, "end": 192.16, "text": " the basics of the optimizer and this talk is about everything else which is why we call it beyond joins and indexes", "tokens": [50366, 264, 14688, 295, 264, 5028, 6545, 293, 341, 751, 307, 466, 1203, 1646, 597, 307, 983, 321, 818, 309, 4399, 24397, 293, 8186, 279, 50716], "temperature": 0.0, "avg_logprob": -0.11777669270833334, "compression_ratio": 1.687830687830688, "no_speech_prob": 0.06842974573373795}, {"id": 25, "seek": 18512, "start": 192.16, "end": 200.16, "text": " because it's beyond the concept of joins and indexes is what we talked about in the previous talk.", "tokens": [50716, 570, 309, 311, 4399, 264, 3410, 295, 24397, 293, 8186, 279, 307, 437, 321, 2825, 466, 294, 264, 3894, 751, 13, 51116], "temperature": 0.0, "avg_logprob": -0.11777669270833334, "compression_ratio": 1.687830687830688, "no_speech_prob": 0.06842974573373795}, {"id": 26, "seek": 18512, "start": 200.16, "end": 211.16, "text": " We are going to talk about 43 other things that Postgres does beyond again using indexes and join types.", "tokens": [51116, 492, 366, 516, 281, 751, 466, 17914, 661, 721, 300, 10223, 45189, 775, 4399, 797, 1228, 8186, 279, 293, 3917, 3467, 13, 51666], "temperature": 0.0, "avg_logprob": -0.11777669270833334, "compression_ratio": 1.687830687830688, "no_speech_prob": 0.06842974573373795}, {"id": 27, "seek": 21116, "start": 211.2, "end": 219.2, "text": " There's a lot of them that are actually really, really interesting. I learned a lot in preparing this talk", "tokens": [50366, 821, 311, 257, 688, 295, 552, 300, 366, 767, 534, 11, 534, 1880, 13, 286, 3264, 257, 688, 294, 10075, 341, 751, 50766], "temperature": 0.0, "avg_logprob": -0.19746223898494944, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.03773053362965584}, {"id": 28, "seek": 21116, "start": 219.2, "end": 227.2, "text": " and I hope you'll learn a lot as I prepare it. I color coded some of all the sections although I kind of ran out of colors", "tokens": [50766, 293, 286, 1454, 291, 603, 1466, 257, 688, 382, 286, 5940, 309, 13, 286, 2017, 34874, 512, 295, 439, 264, 10863, 4878, 286, 733, 295, 5872, 484, 295, 4577, 51166], "temperature": 0.0, "avg_logprob": -0.19746223898494944, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.03773053362965584}, {"id": 29, "seek": 21116, "start": 227.2, "end": 236.2, "text": " as you can see but you can see they're kind of grouped together. For example, the ones over here on the right,", "tokens": [51166, 382, 291, 393, 536, 457, 291, 393, 536, 436, 434, 733, 295, 41877, 1214, 13, 1171, 1365, 11, 264, 2306, 670, 510, 322, 264, 558, 11, 51616], "temperature": 0.0, "avg_logprob": -0.19746223898494944, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.03773053362965584}, {"id": 30, "seek": 23620, "start": 236.23999999999998, "end": 244.23999999999998, "text": " the mustard color, yellow I guess. The green ones are related to comment table expressions. I have a talk on my website", "tokens": [50366, 264, 23659, 2017, 11, 5566, 286, 2041, 13, 440, 3092, 2306, 366, 4077, 281, 2871, 3199, 15277, 13, 286, 362, 257, 751, 322, 452, 3144, 50766], "temperature": 0.0, "avg_logprob": -0.20127703438342456, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.004601785447448492}, {"id": 31, "seek": 23620, "start": 244.23999999999998, "end": 251.23999999999998, "text": " about comment table expressions. These other ones are about parallelism. The red ones, the pink ones are related to", "tokens": [50766, 466, 2871, 3199, 15277, 13, 1981, 661, 2306, 366, 466, 8952, 1434, 13, 440, 2182, 2306, 11, 264, 7022, 2306, 366, 4077, 281, 51116], "temperature": 0.0, "avg_logprob": -0.20127703438342456, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.004601785447448492}, {"id": 32, "seek": 23620, "start": 251.23999999999998, "end": 256.24, "text": " aggregates and so forth. So again hopefully this is helpful to you.", "tokens": [51116, 16743, 1024, 293, 370, 5220, 13, 407, 797, 4696, 341, 307, 4961, 281, 291, 13, 51366], "temperature": 0.0, "avg_logprob": -0.20127703438342456, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.004601785447448492}, {"id": 33, "seek": 25624, "start": 256.28000000000003, "end": 269.28000000000003, "text": " Another aspect of Postgres is the ability to control the optimizer. I will not specifically talk about all of the configuration", "tokens": [50366, 3996, 4171, 295, 10223, 45189, 307, 264, 3485, 281, 1969, 264, 5028, 6545, 13, 286, 486, 406, 4682, 751, 466, 439, 295, 264, 11694, 51016], "temperature": 0.0, "avg_logprob": -0.16048715699393795, "compression_ratio": 1.6225165562913908, "no_speech_prob": 0.05320458859205246}, {"id": 34, "seek": 25624, "start": 269.28000000000003, "end": 277.24, "text": " parameters but this is a list of pretty much all the config parameters that Postgres allows you to use to control the", "tokens": [51016, 9834, 457, 341, 307, 257, 1329, 295, 1238, 709, 439, 264, 6662, 9834, 300, 10223, 45189, 4045, 291, 281, 764, 281, 1969, 264, 51414], "temperature": 0.0, "avg_logprob": -0.16048715699393795, "compression_ratio": 1.6225165562913908, "no_speech_prob": 0.05320458859205246}, {"id": 35, "seek": 27724, "start": 277.28000000000003, "end": 284.28000000000003, "text": " optimizer. Again we have two URLs here that I think are very helpful for you to study that.", "tokens": [50366, 5028, 6545, 13, 3764, 321, 362, 732, 43267, 510, 300, 286, 519, 366, 588, 4961, 337, 291, 281, 2979, 300, 13, 50716], "temperature": 0.0, "avg_logprob": -0.13651223500569662, "compression_ratio": 1.5707070707070707, "no_speech_prob": 0.3478214740753174}, {"id": 36, "seek": 27724, "start": 284.28000000000003, "end": 293.28000000000003, "text": " The ones right up here are the ones that I covered in my previous talk so I'm not going to be discussing the ones", "tokens": [50716, 440, 2306, 558, 493, 510, 366, 264, 2306, 300, 286, 5343, 294, 452, 3894, 751, 370, 286, 478, 406, 516, 281, 312, 10850, 264, 2306, 51166], "temperature": 0.0, "avg_logprob": -0.13651223500569662, "compression_ratio": 1.5707070707070707, "no_speech_prob": 0.3478214740753174}, {"id": 37, "seek": 27724, "start": 293.28000000000003, "end": 300.28000000000003, "text": " from the previous talk here but I will cover all of these right here related to things like gather merge,", "tokens": [51166, 490, 264, 3894, 751, 510, 457, 286, 486, 2060, 439, 295, 613, 558, 510, 4077, 281, 721, 411, 5448, 22183, 11, 51516], "temperature": 0.0, "avg_logprob": -0.13651223500569662, "compression_ratio": 1.5707070707070707, "no_speech_prob": 0.3478214740753174}, {"id": 38, "seek": 30028, "start": 300.32, "end": 308.32, "text": " parallel, hash ag, memo wise which is kind of a funny term, incremental sort and so forth. I will not be covering these", "tokens": [50366, 8952, 11, 22019, 623, 11, 35900, 10829, 597, 307, 733, 295, 257, 4074, 1433, 11, 35759, 1333, 293, 370, 5220, 13, 286, 486, 406, 312, 10322, 613, 50766], "temperature": 0.0, "avg_logprob": -0.1544772411914582, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.022948453202843666}, {"id": 39, "seek": 30028, "start": 308.32, "end": 316.32, "text": " although I do cover these in another talk about partitioning which again is on my website so if you're", "tokens": [50766, 4878, 286, 360, 2060, 613, 294, 1071, 751, 466, 24808, 278, 597, 797, 307, 322, 452, 3144, 370, 498, 291, 434, 51166], "temperature": 0.0, "avg_logprob": -0.1544772411914582, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.022948453202843666}, {"id": 40, "seek": 30028, "start": 316.32, "end": 320.32, "text": " curious about partitioning that is where you would go for that.", "tokens": [51166, 6369, 466, 24808, 278, 300, 307, 689, 291, 576, 352, 337, 300, 13, 51366], "temperature": 0.0, "avg_logprob": -0.1544772411914582, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.022948453202843666}, {"id": 41, "seek": 30028, "start": 320.32, "end": 329.32, "text": " Now I would love to say that I have a grand story about all of the join types that weaves into a", "tokens": [51366, 823, 286, 576, 959, 281, 584, 300, 286, 362, 257, 2697, 1657, 466, 439, 295, 264, 3917, 3467, 300, 321, 5423, 666, 257, 51816], "temperature": 0.0, "avg_logprob": -0.1544772411914582, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.022948453202843666}, {"id": 42, "seek": 32932, "start": 329.36, "end": 338.36, "text": " very poetic narrative but unfortunately I can't do that. As you can imagine the join types are kind of distinct.", "tokens": [50366, 588, 41080, 9977, 457, 7015, 286, 393, 380, 360, 300, 13, 1018, 291, 393, 3811, 264, 3917, 3467, 366, 733, 295, 10644, 13, 50816], "temperature": 0.0, "avg_logprob": -0.160564210679796, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.011450255289673805}, {"id": 43, "seek": 32932, "start": 338.36, "end": 349.36, "text": " There is not a real great way of presenting them in a sort of a way that connects them together.", "tokens": [50816, 821, 307, 406, 257, 957, 869, 636, 295, 15578, 552, 294, 257, 1333, 295, 257, 636, 300, 16967, 552, 1214, 13, 51366], "temperature": 0.0, "avg_logprob": -0.160564210679796, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.011450255289673805}, {"id": 44, "seek": 32932, "start": 349.36, "end": 356.36, "text": " So we're basically going to spend the next 45 minutes basically going through the individual types and explaining why", "tokens": [51366, 407, 321, 434, 1936, 516, 281, 3496, 264, 958, 6905, 2077, 1936, 516, 807, 264, 2609, 3467, 293, 13468, 983, 51716], "temperature": 0.0, "avg_logprob": -0.160564210679796, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.011450255289673805}, {"id": 45, "seek": 35636, "start": 356.40000000000003, "end": 363.40000000000003, "text": " they're used and why they're important. And again we're going to start with some really silly ones that are really", "tokens": [50366, 436, 434, 1143, 293, 983, 436, 434, 1021, 13, 400, 797, 321, 434, 516, 281, 722, 365, 512, 534, 11774, 2306, 300, 366, 534, 50716], "temperature": 0.0, "avg_logprob": -0.13588281914039893, "compression_ratio": 1.79296875, "no_speech_prob": 0.02187259867787361}, {"id": 46, "seek": 35636, "start": 363.40000000000003, "end": 370.40000000000003, "text": " kind of not very useful but as we get forward we'll start to see some really interesting ones and of course at the end", "tokens": [50716, 733, 295, 406, 588, 4420, 457, 382, 321, 483, 2128, 321, 603, 722, 281, 536, 512, 534, 1880, 2306, 293, 295, 1164, 412, 264, 917, 51066], "temperature": 0.0, "avg_logprob": -0.13588281914039893, "compression_ratio": 1.79296875, "no_speech_prob": 0.02187259867787361}, {"id": 47, "seek": 35636, "start": 370.40000000000003, "end": 378.40000000000003, "text": " we have some really bizarre ones in some ways. The first one we're going to talk about is called a result node.", "tokens": [51066, 321, 362, 512, 534, 18265, 2306, 294, 512, 2098, 13, 440, 700, 472, 321, 434, 516, 281, 751, 466, 307, 1219, 257, 1874, 9984, 13, 51466], "temperature": 0.0, "avg_logprob": -0.13588281914039893, "compression_ratio": 1.79296875, "no_speech_prob": 0.02187259867787361}, {"id": 48, "seek": 35636, "start": 378.40000000000003, "end": 385.40000000000003, "text": " If any of you have ever round explained before and you see these node types in the explain plan that's what we're", "tokens": [51466, 759, 604, 295, 291, 362, 1562, 3098, 8825, 949, 293, 291, 536, 613, 9984, 3467, 294, 264, 2903, 1393, 300, 311, 437, 321, 434, 51816], "temperature": 0.0, "avg_logprob": -0.13588281914039893, "compression_ratio": 1.79296875, "no_speech_prob": 0.02187259867787361}, {"id": 49, "seek": 38540, "start": 385.44, "end": 392.44, "text": " going to be talking about. So you probably see the things like index scan, sequential scan, merge join, hash join,", "tokens": [50366, 516, 281, 312, 1417, 466, 13, 407, 291, 1391, 536, 264, 721, 411, 8186, 11049, 11, 42881, 11049, 11, 22183, 3917, 11, 22019, 3917, 11, 50716], "temperature": 0.0, "avg_logprob": -0.12093941528018158, "compression_ratio": 1.7480314960629921, "no_speech_prob": 0.023643404245376587}, {"id": 50, "seek": 38540, "start": 392.44, "end": 398.44, "text": " nested loop. You see those node types before. Those node types are talking about my previous talk.", "tokens": [50716, 15646, 292, 6367, 13, 509, 536, 729, 9984, 3467, 949, 13, 3950, 9984, 3467, 366, 1417, 466, 452, 3894, 751, 13, 51016], "temperature": 0.0, "avg_logprob": -0.12093941528018158, "compression_ratio": 1.7480314960629921, "no_speech_prob": 0.023643404245376587}, {"id": 51, "seek": 38540, "start": 398.44, "end": 405.44, "text": " What I'm going to talk about now are the node types that I did not cover in my previous talk which are actually", "tokens": [51016, 708, 286, 478, 516, 281, 751, 466, 586, 366, 264, 9984, 3467, 300, 286, 630, 406, 2060, 294, 452, 3894, 751, 597, 366, 767, 51366], "temperature": 0.0, "avg_logprob": -0.12093941528018158, "compression_ratio": 1.7480314960629921, "no_speech_prob": 0.023643404245376587}, {"id": 52, "seek": 38540, "start": 405.44, "end": 413.44, "text": " really interesting. Another thing that you should be aware of is that this presentation was originally written as SQL.", "tokens": [51366, 534, 1880, 13, 3996, 551, 300, 291, 820, 312, 3650, 295, 307, 300, 341, 5860, 390, 7993, 3720, 382, 19200, 13, 51766], "temperature": 0.0, "avg_logprob": -0.12093941528018158, "compression_ratio": 1.7480314960629921, "no_speech_prob": 0.023643404245376587}, {"id": 53, "seek": 41344, "start": 413.48, "end": 422.48, "text": " So I basically created an SQL script that had a whole bunch of queries with explain running and then I ran it and then", "tokens": [50366, 407, 286, 1936, 2942, 364, 19200, 5755, 300, 632, 257, 1379, 3840, 295, 24109, 365, 2903, 2614, 293, 550, 286, 5872, 309, 293, 550, 50816], "temperature": 0.0, "avg_logprob": -0.15892919274263603, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.023301921784877777}, {"id": 54, "seek": 41344, "start": 422.48, "end": 430.48, "text": " I captured it and I put it up into the slide deck and colorized it and labeled it and so forth. So if you want to run", "tokens": [50816, 286, 11828, 309, 293, 286, 829, 309, 493, 666, 264, 4137, 9341, 293, 2017, 1602, 309, 293, 21335, 309, 293, 370, 5220, 13, 407, 498, 291, 528, 281, 1190, 51216], "temperature": 0.0, "avg_logprob": -0.15892919274263603, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.023301921784877777}, {"id": 55, "seek": 41344, "start": 430.48, "end": 439.48, "text": " this presentation download this SQL file right here at that URL and just run it through PSQL and it'll just like fly off", "tokens": [51216, 341, 5860, 5484, 341, 19200, 3991, 558, 510, 412, 300, 12905, 293, 445, 1190, 309, 807, 8168, 13695, 293, 309, 603, 445, 411, 3603, 766, 51666], "temperature": 0.0, "avg_logprob": -0.15892919274263603, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.023301921784877777}, {"id": 56, "seek": 43948, "start": 439.52000000000004, "end": 448.52000000000004, "text": " your screen. The only problem is you don't get the colors. It's just all one color. But you can test it. You can see", "tokens": [50366, 428, 2568, 13, 440, 787, 1154, 307, 291, 500, 380, 483, 264, 4577, 13, 467, 311, 445, 439, 472, 2017, 13, 583, 291, 393, 1500, 309, 13, 509, 393, 536, 50816], "temperature": 0.0, "avg_logprob": -0.13592247846649913, "compression_ratio": 1.6766169154228856, "no_speech_prob": 0.023659100756049156}, {"id": 57, "seek": 43948, "start": 448.52000000000004, "end": 455.52000000000004, "text": " and reproduce what you're seeing basically by running that SQL. Probably no questions about the result type.", "tokens": [50816, 293, 29501, 437, 291, 434, 2577, 1936, 538, 2614, 300, 19200, 13, 9210, 572, 1651, 466, 264, 1874, 2010, 13, 51166], "temperature": 0.0, "avg_logprob": -0.13592247846649913, "compression_ratio": 1.6766169154228856, "no_speech_prob": 0.023659100756049156}, {"id": 58, "seek": 43948, "start": 455.52000000000004, "end": 462.52000000000004, "text": " The result type is basically result is just a constant. Whether it's a string or whatever it's just a constant.", "tokens": [51166, 440, 1874, 2010, 307, 1936, 1874, 307, 445, 257, 5754, 13, 8503, 309, 311, 257, 6798, 420, 2035, 309, 311, 445, 257, 5754, 13, 51516], "temperature": 0.0, "avg_logprob": -0.13592247846649913, "compression_ratio": 1.6766169154228856, "no_speech_prob": 0.023659100756049156}, {"id": 59, "seek": 46252, "start": 462.56, "end": 471.56, "text": " There's nothing fancy going on here. You're basically just saying select one. Another thing is I'm using colon explain", "tokens": [50366, 821, 311, 1825, 10247, 516, 322, 510, 13, 509, 434, 1936, 445, 1566, 3048, 472, 13, 3996, 551, 307, 286, 478, 1228, 8255, 2903, 50816], "temperature": 0.0, "avg_logprob": -0.10992733267850655, "compression_ratio": 1.7511737089201878, "no_speech_prob": 0.05253385752439499}, {"id": 60, "seek": 46252, "start": 471.56, "end": 478.56, "text": " and you're going to see that over and over again in the presentation. Colon explain basically just turns off the costs.", "tokens": [50816, 293, 291, 434, 516, 281, 536, 300, 670, 293, 670, 797, 294, 264, 5860, 13, 21408, 2903, 1936, 445, 4523, 766, 264, 5497, 13, 51166], "temperature": 0.0, "avg_logprob": -0.10992733267850655, "compression_ratio": 1.7511737089201878, "no_speech_prob": 0.05253385752439499}, {"id": 61, "seek": 46252, "start": 478.56, "end": 485.56, "text": " It's just so it makes it simpler for you to see. You don't see numbers in here that really aren't adding anything to the presentation.", "tokens": [51166, 467, 311, 445, 370, 309, 1669, 309, 18587, 337, 291, 281, 536, 13, 509, 500, 380, 536, 3547, 294, 510, 300, 534, 3212, 380, 5127, 1340, 281, 264, 5860, 13, 51516], "temperature": 0.0, "avg_logprob": -0.10992733267850655, "compression_ratio": 1.7511737089201878, "no_speech_prob": 0.05253385752439499}, {"id": 62, "seek": 48556, "start": 485.6, "end": 494.6, "text": " That's a PSQL feature right there, the backslash set and the ability to run explain without costs. That will reproduce the presentation", "tokens": [50366, 663, 311, 257, 8168, 13695, 4111, 558, 456, 11, 264, 646, 10418, 1299, 992, 293, 264, 3485, 281, 1190, 2903, 1553, 5497, 13, 663, 486, 29501, 264, 5860, 50816], "temperature": 0.0, "avg_logprob": -0.1621947483140595, "compression_ratio": 1.5578512396694215, "no_speech_prob": 0.02192654088139534}, {"id": 63, "seek": 48556, "start": 494.6, "end": 503.6, "text": " on your screen. This one you might not have seen before and you might be a little surprised. This is not part of the SQL that I", "tokens": [50816, 322, 428, 2568, 13, 639, 472, 291, 1062, 406, 362, 1612, 949, 293, 291, 1062, 312, 257, 707, 6100, 13, 639, 307, 406, 644, 295, 264, 19200, 300, 286, 51266], "temperature": 0.0, "avg_logprob": -0.1621947483140595, "compression_ratio": 1.5578512396694215, "no_speech_prob": 0.02192654088139534}, {"id": 64, "seek": 48556, "start": 503.6, "end": 511.6, "text": " used back in the 90s. I guess SQL 89 didn't have this. I don't, Vic isn't here. He would know when we added this.", "tokens": [51266, 1143, 646, 294, 264, 4289, 82, 13, 286, 2041, 19200, 31877, 994, 380, 362, 341, 13, 286, 500, 380, 11, 33316, 1943, 380, 510, 13, 634, 576, 458, 562, 321, 3869, 341, 13, 51666], "temperature": 0.0, "avg_logprob": -0.1621947483140595, "compression_ratio": 1.5578512396694215, "no_speech_prob": 0.02192654088139534}, {"id": 65, "seek": 51160, "start": 511.64000000000004, "end": 520.64, "text": " This part of the SQL standard, it's basically the values clause is basically like a select with a bunch of values.", "tokens": [50366, 639, 644, 295, 264, 19200, 3832, 11, 309, 311, 1936, 264, 4190, 25925, 307, 1936, 411, 257, 3048, 365, 257, 3840, 295, 4190, 13, 50816], "temperature": 0.0, "avg_logprob": -0.1749322283398974, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.023637302219867706}, {"id": 66, "seek": 51160, "start": 520.64, "end": 527.64, "text": " Except that it's kind of like select with a union and select with a union. Instead of doing that, you can just type values", "tokens": [50816, 16192, 300, 309, 311, 733, 295, 411, 3048, 365, 257, 11671, 293, 3048, 365, 257, 11671, 13, 7156, 295, 884, 300, 11, 291, 393, 445, 2010, 4190, 51166], "temperature": 0.0, "avg_logprob": -0.1749322283398974, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.023637302219867706}, {"id": 67, "seek": 51160, "start": 527.64, "end": 538.64, "text": " and it makes a row of one and the second row has the number two. It's basically a very kind of throw off the cuff kind of a clause.", "tokens": [51166, 293, 309, 1669, 257, 5386, 295, 472, 293, 264, 1150, 5386, 575, 264, 1230, 732, 13, 467, 311, 1936, 257, 588, 733, 295, 3507, 766, 264, 35997, 733, 295, 257, 25925, 13, 51716], "temperature": 0.0, "avg_logprob": -0.1749322283398974, "compression_ratio": 1.7826086956521738, "no_speech_prob": 0.023637302219867706}, {"id": 68, "seek": 53864, "start": 538.68, "end": 545.68, "text": " It has a special scan node which is called values and that's exactly what it looks like. Another thing you're going to see over and over", "tokens": [50366, 467, 575, 257, 2121, 11049, 9984, 597, 307, 1219, 4190, 293, 300, 311, 2293, 437, 309, 1542, 411, 13, 3996, 551, 291, 434, 516, 281, 536, 670, 293, 670, 50716], "temperature": 0.0, "avg_logprob": -0.13691329956054688, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.0021464242599904537}, {"id": 69, "seek": 53864, "start": 545.68, "end": 556.68, "text": " again in this talk is things that are in blue are causes of things that are in red. If we look at this slide, for example,", "tokens": [50716, 797, 294, 341, 751, 307, 721, 300, 366, 294, 3344, 366, 7700, 295, 721, 300, 366, 294, 2182, 13, 759, 321, 574, 412, 341, 4137, 11, 337, 1365, 11, 51266], "temperature": 0.0, "avg_logprob": -0.13691329956054688, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.0021464242599904537}, {"id": 70, "seek": 53864, "start": 556.68, "end": 567.68, "text": " the cause is values in blue and the result is the value scan. That's the output. If you're ever looking at a slide,", "tokens": [51266, 264, 3082, 307, 4190, 294, 3344, 293, 264, 1874, 307, 264, 2158, 11049, 13, 663, 311, 264, 5598, 13, 759, 291, 434, 1562, 1237, 412, 257, 4137, 11, 51816], "temperature": 0.0, "avg_logprob": -0.13691329956054688, "compression_ratio": 1.7361111111111112, "no_speech_prob": 0.0021464242599904537}, {"id": 71, "seek": 56768, "start": 567.7199999999999, "end": 577.7199999999999, "text": " you say blue is the cause, red is the output that caused the result of the blue. You'll see that over and over again.", "tokens": [50366, 291, 584, 3344, 307, 264, 3082, 11, 2182, 307, 264, 5598, 300, 7008, 264, 1874, 295, 264, 3344, 13, 509, 603, 536, 300, 670, 293, 670, 797, 13, 50866], "temperature": 0.0, "avg_logprob": -0.18178001526863344, "compression_ratio": 1.4912280701754386, "no_speech_prob": 0.0027081856969743967}, {"id": 72, "seek": 56768, "start": 577.7199999999999, "end": 589.7199999999999, "text": " Any questions so far? Great. Generate series. This is just an example. There are many other cases where functions generate multiple rows.", "tokens": [50866, 2639, 1651, 370, 1400, 30, 3769, 13, 15409, 473, 2638, 13, 639, 307, 445, 364, 1365, 13, 821, 366, 867, 661, 3331, 689, 6828, 8460, 3866, 13241, 13, 51466], "temperature": 0.0, "avg_logprob": -0.18178001526863344, "compression_ratio": 1.4912280701754386, "no_speech_prob": 0.0027081856969743967}, {"id": 73, "seek": 58972, "start": 589.76, "end": 600.76, "text": " But any function that generates multiple rows, it's going to create a node type called a function scan. Normally functions return", "tokens": [50366, 583, 604, 2445, 300, 23815, 3866, 13241, 11, 309, 311, 516, 281, 1884, 257, 9984, 2010, 1219, 257, 2445, 11049, 13, 17424, 6828, 2736, 50916], "temperature": 0.0, "avg_logprob": -0.17043104837107104, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.04332282766699791}, {"id": 74, "seek": 58972, "start": 600.76, "end": 609.76, "text": " one value. That's kind of the mathematical definition of a function. But of course in SQL, we've gone beyond that.", "tokens": [50916, 472, 2158, 13, 663, 311, 733, 295, 264, 18894, 7123, 295, 257, 2445, 13, 583, 295, 1164, 294, 19200, 11, 321, 600, 2780, 4399, 300, 13, 51366], "temperature": 0.0, "avg_logprob": -0.17043104837107104, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.04332282766699791}, {"id": 75, "seek": 58972, "start": 609.76, "end": 618.76, "text": " We have the ability for functions to return multiple rows. Not only multiple values in a row, which you would use in an out clause,", "tokens": [51366, 492, 362, 264, 3485, 337, 6828, 281, 2736, 3866, 13241, 13, 1726, 787, 3866, 4190, 294, 257, 5386, 11, 597, 291, 576, 764, 294, 364, 484, 25925, 11, 51816], "temperature": 0.0, "avg_logprob": -0.17043104837107104, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.04332282766699791}, {"id": 76, "seek": 61876, "start": 618.8, "end": 633.8, "text": " but actually multiple rows. That would be something like a function scan. This is our first legitimate output. This is a case where", "tokens": [50366, 457, 767, 3866, 13241, 13, 663, 576, 312, 746, 411, 257, 2445, 11049, 13, 639, 307, 527, 700, 17956, 5598, 13, 639, 307, 257, 1389, 689, 51116], "temperature": 0.0, "avg_logprob": -0.11413300254128196, "compression_ratio": 1.5297619047619047, "no_speech_prob": 0.0019548696000128984}, {"id": 77, "seek": 61876, "start": 633.8, "end": 643.8, "text": " we're doing something called an incremental sort. I had trouble understanding what that actually was, but I think this should", "tokens": [51116, 321, 434, 884, 746, 1219, 364, 35759, 1333, 13, 286, 632, 5253, 3701, 437, 300, 767, 390, 11, 457, 286, 519, 341, 820, 51616], "temperature": 0.0, "avg_logprob": -0.11413300254128196, "compression_ratio": 1.5297619047619047, "no_speech_prob": 0.0019548696000128984}, {"id": 78, "seek": 64380, "start": 643.8399999999999, "end": 654.8399999999999, "text": " illustrate it to you. How many have seen incremental sort before in their plans? Anybody? A couple? Incremental sort is a case where", "tokens": [50366, 23221, 309, 281, 291, 13, 1012, 867, 362, 1612, 35759, 1333, 949, 294, 641, 5482, 30, 19082, 30, 316, 1916, 30, 30367, 15875, 1333, 307, 257, 1389, 689, 50916], "temperature": 0.0, "avg_logprob": -0.13096647877846995, "compression_ratio": 1.6012269938650308, "no_speech_prob": 0.02029656618833542}, {"id": 79, "seek": 64380, "start": 654.8399999999999, "end": 665.8399999999999, "text": " you're sorting by multiple keys and the earlier part of the key is already sorted, but the latter part of the key is not sorted.", "tokens": [50916, 291, 434, 32411, 538, 3866, 9317, 293, 264, 3071, 644, 295, 264, 2141, 307, 1217, 25462, 11, 457, 264, 18481, 644, 295, 264, 2141, 307, 406, 25462, 13, 51466], "temperature": 0.0, "avg_logprob": -0.13096647877846995, "compression_ratio": 1.6012269938650308, "no_speech_prob": 0.02029656618833542}, {"id": 80, "seek": 66584, "start": 665.88, "end": 675.88, "text": " It kind of makes sense. You're incrementally sorting. You've got the front part, the early fields are sorted, and the later parts are not.", "tokens": [50366, 467, 733, 295, 1669, 2020, 13, 509, 434, 26200, 379, 32411, 13, 509, 600, 658, 264, 1868, 644, 11, 264, 2440, 7909, 366, 25462, 11, 293, 264, 1780, 3166, 366, 406, 13, 50866], "temperature": 0.0, "avg_logprob": -0.17963825225830077, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.007811667863279581}, {"id": 81, "seek": 66584, "start": 675.88, "end": 690.88, "text": " So here we have, I've created a table with a million rows, and I've created an index on the first column, x. I've analyzed it, so I've got", "tokens": [50866, 407, 510, 321, 362, 11, 286, 600, 2942, 257, 3199, 365, 257, 2459, 13241, 11, 293, 286, 600, 2942, 364, 8186, 322, 264, 700, 7738, 11, 2031, 13, 286, 600, 28181, 309, 11, 370, 286, 600, 658, 51616], "temperature": 0.0, "avg_logprob": -0.17963825225830077, "compression_ratio": 1.5649717514124293, "no_speech_prob": 0.007811667863279581}, {"id": 82, "seek": 69088, "start": 690.92, "end": 701.92, "text": " statistics on it, and I add a column y on the end of it, and then I select from it, and I do it by x, y. What happens is you can see", "tokens": [50366, 12523, 322, 309, 11, 293, 286, 909, 257, 7738, 288, 322, 264, 917, 295, 309, 11, 293, 550, 286, 3048, 490, 309, 11, 293, 286, 360, 309, 538, 2031, 11, 288, 13, 708, 2314, 307, 291, 393, 536, 50916], "temperature": 0.0, "avg_logprob": -0.1566037764916053, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.028830314055085182}, {"id": 83, "seek": 69088, "start": 701.92, "end": 713.92, "text": " the system is smart enough to say, well, I can get part of it sorted by pulling off of the index I've already created, but I can't really do", "tokens": [50916, 264, 1185, 307, 4069, 1547, 281, 584, 11, 731, 11, 286, 393, 483, 644, 295, 309, 25462, 538, 8407, 766, 295, 264, 8186, 286, 600, 1217, 2942, 11, 457, 286, 393, 380, 534, 360, 51516], "temperature": 0.0, "avg_logprob": -0.1566037764916053, "compression_ratio": 1.5337078651685394, "no_speech_prob": 0.028830314055085182}, {"id": 84, "seek": 71392, "start": 713.9599999999999, "end": 728.9599999999999, "text": " the y, so I'm going to do an index scan on the x table, and then I'm going to do an incremental sort on top of that, and I already have x sorted,", "tokens": [50366, 264, 288, 11, 370, 286, 478, 516, 281, 360, 364, 8186, 11049, 322, 264, 2031, 3199, 11, 293, 550, 286, 478, 516, 281, 360, 364, 35759, 1333, 322, 1192, 295, 300, 11, 293, 286, 1217, 362, 2031, 25462, 11, 51116], "temperature": 0.0, "avg_logprob": -0.15264304478963217, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.09658607840538025}, {"id": 85, "seek": 71392, "start": 728.9599999999999, "end": 740.9599999999999, "text": " I'm just going to add the y part. So if you didn't have this, effectively you couldn't use the index, and you'd have to basically resort the whole result set,", "tokens": [51116, 286, 478, 445, 516, 281, 909, 264, 288, 644, 13, 407, 498, 291, 994, 380, 362, 341, 11, 8659, 291, 2809, 380, 764, 264, 8186, 11, 293, 291, 1116, 362, 281, 1936, 725, 477, 264, 1379, 1874, 992, 11, 51716], "temperature": 0.0, "avg_logprob": -0.15264304478963217, "compression_ratio": 1.6888888888888889, "no_speech_prob": 0.09658607840538025}, {"id": 86, "seek": 74096, "start": 741.0, "end": 745.0, "text": " obviously it would be much slower, that's why we got incremental sort.", "tokens": [50366, 2745, 309, 576, 312, 709, 14009, 11, 300, 311, 983, 321, 658, 35759, 1333, 13, 50566], "temperature": 0.0, "avg_logprob": -0.18967981158562428, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.01470093335956335}, {"id": 87, "seek": 74096, "start": 745.0, "end": 754.0, "text": " And what you're also going to see in this presentation is a lot of diagrams, because I love diagrams, they help me to see what's going on,", "tokens": [50566, 400, 437, 291, 434, 611, 516, 281, 536, 294, 341, 5860, 307, 257, 688, 295, 36709, 11, 570, 286, 959, 36709, 11, 436, 854, 385, 281, 536, 437, 311, 516, 322, 11, 51016], "temperature": 0.0, "avg_logprob": -0.18967981158562428, "compression_ratio": 1.4217687074829932, "no_speech_prob": 0.01470093335956335}, {"id": 88, "seek": 75400, "start": 754.04, "end": 764.04, "text": " visually. What you can see here is you can see that the table, originally all of the 3's are together, all of the 4's are together,", "tokens": [50366, 19622, 13, 708, 291, 393, 536, 510, 307, 291, 393, 536, 300, 264, 3199, 11, 7993, 439, 295, 264, 805, 311, 366, 1214, 11, 439, 295, 264, 1017, 311, 366, 1214, 11, 50866], "temperature": 0.0, "avg_logprob": -0.15168692476005965, "compression_ratio": 1.855721393034826, "no_speech_prob": 0.21695555746555328}, {"id": 89, "seek": 75400, "start": 764.04, "end": 774.04, "text": " but you can see all of the y fields, the second column, are all in random order, and effectively what incremental sort does, it knows that the first", "tokens": [50866, 457, 291, 393, 536, 439, 295, 264, 288, 7909, 11, 264, 1150, 7738, 11, 366, 439, 294, 4974, 1668, 11, 293, 8659, 437, 35759, 1333, 775, 11, 309, 3255, 300, 264, 700, 51366], "temperature": 0.0, "avg_logprob": -0.15168692476005965, "compression_ratio": 1.855721393034826, "no_speech_prob": 0.21695555746555328}, {"id": 90, "seek": 75400, "start": 774.04, "end": 781.04, "text": " blue section is in order, doesn't need to touch that, and it merely sorts the second column.", "tokens": [51366, 3344, 3541, 307, 294, 1668, 11, 1177, 380, 643, 281, 2557, 300, 11, 293, 309, 17003, 7527, 264, 1150, 7738, 13, 51716], "temperature": 0.0, "avg_logprob": -0.15168692476005965, "compression_ratio": 1.855721393034826, "no_speech_prob": 0.21695555746555328}, {"id": 91, "seek": 78104, "start": 781.0799999999999, "end": 788.0799999999999, "text": " So we're going to see this kind of pattern over and over, I'll show you the SQL, I'll show you a diagram that kind of explains what it does.", "tokens": [50366, 407, 321, 434, 516, 281, 536, 341, 733, 295, 5102, 670, 293, 670, 11, 286, 603, 855, 291, 264, 19200, 11, 286, 603, 855, 291, 257, 10686, 300, 733, 295, 13948, 437, 309, 775, 13, 50716], "temperature": 0.0, "avg_logprob": -0.14546751976013184, "compression_ratio": 1.4834123222748816, "no_speech_prob": 0.01613127440214157}, {"id": 92, "seek": 78104, "start": 788.0799999999999, "end": 789.0799999999999, "text": " Any questions?", "tokens": [50716, 2639, 1651, 30, 50766], "temperature": 0.0, "avg_logprob": -0.14546751976013184, "compression_ratio": 1.4834123222748816, "no_speech_prob": 0.01613127440214157}, {"id": 93, "seek": 78104, "start": 789.0799999999999, "end": 791.0799999999999, "text": " Okay, great.", "tokens": [50766, 1033, 11, 869, 13, 50866], "temperature": 0.0, "avg_logprob": -0.14546751976013184, "compression_ratio": 1.4834123222748816, "no_speech_prob": 0.01613127440214157}, {"id": 94, "seek": 78104, "start": 791.0799999999999, "end": 805.0799999999999, "text": " Unique, you've probably seen this before, this is not necessarily the unique clause when you do DDL, you can actually create a column as unique,", "tokens": [50866, 1156, 1925, 11, 291, 600, 1391, 1612, 341, 949, 11, 341, 307, 406, 4725, 264, 3845, 25925, 562, 291, 360, 30778, 43, 11, 291, 393, 767, 1884, 257, 7738, 382, 3845, 11, 51566], "temperature": 0.0, "avg_logprob": -0.14546751976013184, "compression_ratio": 1.4834123222748816, "no_speech_prob": 0.01613127440214157}, {"id": 95, "seek": 80508, "start": 805.12, "end": 815.12, "text": " that is actually not what we're doing here, it's basically, typically would use if you're using a distinct clause on top of some kind of result.", "tokens": [50366, 300, 307, 767, 406, 437, 321, 434, 884, 510, 11, 309, 311, 1936, 11, 5850, 576, 764, 498, 291, 434, 1228, 257, 10644, 25925, 322, 1192, 295, 512, 733, 295, 1874, 13, 50866], "temperature": 0.0, "avg_logprob": -0.16005501380333534, "compression_ratio": 1.8288973384030418, "no_speech_prob": 0.15972435474395752}, {"id": 96, "seek": 80508, "start": 815.12, "end": 824.12, "text": " So here I'm generating numbers from 1 to 10, I'm ordering them and I'm saying make sure they are distinct, so what we're doing is we're basically doing a function scan,", "tokens": [50866, 407, 510, 286, 478, 17746, 3547, 490, 502, 281, 1266, 11, 286, 478, 21739, 552, 293, 286, 478, 1566, 652, 988, 436, 366, 10644, 11, 370, 437, 321, 434, 884, 307, 321, 434, 1936, 884, 257, 2445, 11049, 11, 51316], "temperature": 0.0, "avg_logprob": -0.16005501380333534, "compression_ratio": 1.8288973384030418, "no_speech_prob": 0.15972435474395752}, {"id": 97, "seek": 80508, "start": 824.12, "end": 834.12, "text": " remember function scan we just saw that earlier, right, and then we're doing a sword on top of that, so all the values are sword together and I'm running unique on it,", "tokens": [51316, 1604, 2445, 11049, 321, 445, 1866, 300, 3071, 11, 558, 11, 293, 550, 321, 434, 884, 257, 10576, 322, 1192, 295, 300, 11, 370, 439, 264, 4190, 366, 10576, 1214, 293, 286, 478, 2614, 3845, 322, 309, 11, 51816], "temperature": 0.0, "avg_logprob": -0.16005501380333534, "compression_ratio": 1.8288973384030418, "no_speech_prob": 0.15972435474395752}, {"id": 98, "seek": 83412, "start": 834.16, "end": 843.16, "text": " basically another way of doing this, this is the way of distinct, another way of needing unique is a union, I'm not sure how many of you remember,", "tokens": [50366, 1936, 1071, 636, 295, 884, 341, 11, 341, 307, 264, 636, 295, 10644, 11, 1071, 636, 295, 18006, 3845, 307, 257, 11671, 11, 286, 478, 406, 988, 577, 867, 295, 291, 1604, 11, 50816], "temperature": 0.0, "avg_logprob": -0.09813765889590549, "compression_ratio": 1.8863636363636365, "no_speech_prob": 0.005993131082504988}, {"id": 99, "seek": 83412, "start": 843.16, "end": 853.16, "text": " but union always does distinct removal, you know, a duplicate removal, right, unless you use the all clause, unique is always going to remove duplicate,", "tokens": [50816, 457, 11671, 1009, 775, 10644, 17933, 11, 291, 458, 11, 257, 23976, 17933, 11, 558, 11, 5969, 291, 764, 264, 439, 25925, 11, 3845, 307, 1009, 516, 281, 4159, 23976, 11, 51316], "temperature": 0.0, "avg_logprob": -0.09813765889590549, "compression_ratio": 1.8863636363636365, "no_speech_prob": 0.005993131082504988}, {"id": 100, "seek": 83412, "start": 853.16, "end": 859.16, "text": " so even though I'm just saying union, I'm not saying union distinct or anything, it automatically does it that way.", "tokens": [51316, 370, 754, 1673, 286, 478, 445, 1566, 11671, 11, 286, 478, 406, 1566, 11671, 10644, 420, 1340, 11, 309, 6772, 775, 309, 300, 636, 13, 51616], "temperature": 0.0, "avg_logprob": -0.09813765889590549, "compression_ratio": 1.8863636363636365, "no_speech_prob": 0.005993131082504988}, {"id": 101, "seek": 85916, "start": 859.1999999999999, "end": 868.1999999999999, "text": " So therefore, when I do 1, 2, I basically am going to take my new result sets, remember, we did remember,", "tokens": [50366, 407, 4412, 11, 562, 286, 360, 502, 11, 568, 11, 286, 1936, 669, 516, 281, 747, 452, 777, 1874, 6352, 11, 1604, 11, 321, 630, 1604, 11, 50816], "temperature": 0.0, "avg_logprob": -0.18656410773595175, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.06000347435474396}, {"id": 102, "seek": 85916, "start": 868.1999999999999, "end": 874.1999999999999, "text": " that was the first node type we learned was result, remember, way back, hey, four minutes ago,", "tokens": [50816, 300, 390, 264, 700, 9984, 2010, 321, 3264, 390, 1874, 11, 1604, 11, 636, 646, 11, 4177, 11, 1451, 2077, 2057, 11, 51116], "temperature": 0.0, "avg_logprob": -0.18656410773595175, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.06000347435474396}, {"id": 103, "seek": 85916, "start": 874.1999999999999, "end": 883.1999999999999, "text": " then we sort them so all the results are next, the duplicates are next to each other, and then all we have to do is get rid of the duplicates as we go forward,", "tokens": [51116, 550, 321, 1333, 552, 370, 439, 264, 3542, 366, 958, 11, 264, 17154, 1024, 366, 958, 281, 1184, 661, 11, 293, 550, 439, 321, 362, 281, 360, 307, 483, 3973, 295, 264, 17154, 1024, 382, 321, 352, 2128, 11, 51566], "temperature": 0.0, "avg_logprob": -0.18656410773595175, "compression_ratio": 1.6901408450704225, "no_speech_prob": 0.06000347435474396}, {"id": 104, "seek": 88320, "start": 883.24, "end": 891.24, "text": " and again, similar case here, we have a bunch of random numbers, we sort them so all of the duplicates are now next to each other,", "tokens": [50366, 293, 797, 11, 2531, 1389, 510, 11, 321, 362, 257, 3840, 295, 4974, 3547, 11, 321, 1333, 552, 370, 439, 295, 264, 17154, 1024, 366, 586, 958, 281, 1184, 661, 11, 50766], "temperature": 0.0, "avg_logprob": -0.11331336052863153, "compression_ratio": 1.8177083333333333, "no_speech_prob": 0.009120382368564606}, {"id": 105, "seek": 88320, "start": 891.24, "end": 902.24, "text": " you can see the sixes and the threes are next to each other, and then we run the unique on it, and all it does is compare and removes any duplicate next to each other entries,", "tokens": [50766, 291, 393, 536, 264, 2309, 279, 293, 264, 258, 4856, 366, 958, 281, 1184, 661, 11, 293, 550, 321, 1190, 264, 3845, 322, 309, 11, 293, 439, 309, 775, 307, 6794, 293, 30445, 604, 23976, 958, 281, 1184, 661, 23041, 11, 51316], "temperature": 0.0, "avg_logprob": -0.11331336052863153, "compression_ratio": 1.8177083333333333, "no_speech_prob": 0.009120382368564606}, {"id": 106, "seek": 88320, "start": 902.24, "end": 907.24, "text": " and we get our unique output, okay, great.", "tokens": [51316, 293, 321, 483, 527, 3845, 5598, 11, 1392, 11, 869, 13, 51566], "temperature": 0.0, "avg_logprob": -0.11331336052863153, "compression_ratio": 1.8177083333333333, "no_speech_prob": 0.009120382368564606}, {"id": 107, "seek": 90724, "start": 907.28, "end": 918.28, "text": " Okay, append, this one exactly what I talked about before, remember I said that union will remove duplicates by default, that's true,", "tokens": [50366, 1033, 11, 34116, 11, 341, 472, 2293, 437, 286, 2825, 466, 949, 11, 1604, 286, 848, 300, 11671, 486, 4159, 17154, 1024, 538, 7576, 11, 300, 311, 2074, 11, 50916], "temperature": 0.0, "avg_logprob": -0.11778269173964015, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.013401404023170471}, {"id": 108, "seek": 90724, "start": 918.28, "end": 927.28, "text": " but if you use the union all clause, right, it doesn't remove the duplicates, so we have a special node type just for that,", "tokens": [50916, 457, 498, 291, 764, 264, 11671, 439, 25925, 11, 558, 11, 309, 1177, 380, 4159, 264, 17154, 1024, 11, 370, 321, 362, 257, 2121, 9984, 2010, 445, 337, 300, 11, 51366], "temperature": 0.0, "avg_logprob": -0.11778269173964015, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.013401404023170471}, {"id": 109, "seek": 90724, "start": 927.28, "end": 936.28, "text": " it's called append, so when you say select one, union all, select two, we have our two result nodes, and we just append the values right on the end of each other.", "tokens": [51366, 309, 311, 1219, 34116, 11, 370, 562, 291, 584, 3048, 472, 11, 11671, 439, 11, 3048, 732, 11, 321, 362, 527, 732, 1874, 13891, 11, 293, 321, 445, 34116, 264, 4190, 558, 322, 264, 917, 295, 1184, 661, 13, 51816], "temperature": 0.0, "avg_logprob": -0.11778269173964015, "compression_ratio": 1.7355371900826446, "no_speech_prob": 0.013401404023170471}, {"id": 110, "seek": 93628, "start": 936.3199999999999, "end": 945.3199999999999, "text": " It's exactly what it looks like, this is my first result set, this is my second result set for the union, and I'm just sticking them, I'm just appending them next to each other.", "tokens": [50366, 467, 311, 2293, 437, 309, 1542, 411, 11, 341, 307, 452, 700, 1874, 992, 11, 341, 307, 452, 1150, 1874, 992, 337, 264, 11671, 11, 293, 286, 478, 445, 13465, 552, 11, 286, 478, 445, 724, 2029, 552, 958, 281, 1184, 661, 13, 50816], "temperature": 0.0, "avg_logprob": -0.15032311205594046, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.009252150543034077}, {"id": 111, "seek": 93628, "start": 945.3199999999999, "end": 949.3199999999999, "text": " Very, very, very basic, very basic case.", "tokens": [50816, 4372, 11, 588, 11, 588, 3875, 11, 588, 3875, 1389, 13, 51016], "temperature": 0.0, "avg_logprob": -0.15032311205594046, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.009252150543034077}, {"id": 112, "seek": 93628, "start": 949.3199999999999, "end": 954.3199999999999, "text": " Okay, merge append, this one's good, okay.", "tokens": [51016, 1033, 11, 22183, 34116, 11, 341, 472, 311, 665, 11, 1392, 13, 51266], "temperature": 0.0, "avg_logprob": -0.15032311205594046, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.009252150543034077}, {"id": 113, "seek": 93628, "start": 954.3199999999999, "end": 965.3199999999999, "text": " This is kind of weird because it combines two terms that we think we know, right, we just talked about append, we know what that does,", "tokens": [51266, 639, 307, 733, 295, 3657, 570, 309, 29520, 732, 2115, 300, 321, 519, 321, 458, 11, 558, 11, 321, 445, 2825, 466, 34116, 11, 321, 458, 437, 300, 775, 11, 51816], "temperature": 0.0, "avg_logprob": -0.15032311205594046, "compression_ratio": 1.7217391304347827, "no_speech_prob": 0.009252150543034077}, {"id": 114, "seek": 96532, "start": 965.36, "end": 979.36, "text": " okay, but then we have the merge, which sounds like a merge joined in me, right, it's kind of, you're going to see this pattern where we've got a node type we know,", "tokens": [50366, 1392, 11, 457, 550, 321, 362, 264, 22183, 11, 597, 3263, 411, 257, 22183, 6869, 294, 385, 11, 558, 11, 309, 311, 733, 295, 11, 291, 434, 516, 281, 536, 341, 5102, 689, 321, 600, 658, 257, 9984, 2010, 321, 458, 11, 51066], "temperature": 0.0, "avg_logprob": -0.15068519406202363, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.007112027611583471}, {"id": 115, "seek": 96532, "start": 979.36, "end": 987.36, "text": " another node type we know, and if we put the two names together and it does something different, it's not ideal, it's trying to kind of match it,", "tokens": [51066, 1071, 9984, 2010, 321, 458, 11, 293, 498, 321, 829, 264, 732, 5288, 1214, 293, 309, 775, 746, 819, 11, 309, 311, 406, 7157, 11, 309, 311, 1382, 281, 733, 295, 2995, 309, 11, 51466], "temperature": 0.0, "avg_logprob": -0.15068519406202363, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.007112027611583471}, {"id": 116, "seek": 98736, "start": 987.4, "end": 996.4, "text": " but this is, what will we have, okay, so what I'm doing here is I'm taking a values clause, which we talked about before, remember values clause,", "tokens": [50366, 457, 341, 307, 11, 437, 486, 321, 362, 11, 1392, 11, 370, 437, 286, 478, 884, 510, 307, 286, 478, 1940, 257, 4190, 25925, 11, 597, 321, 2825, 466, 949, 11, 1604, 4190, 25925, 11, 50816], "temperature": 0.0, "avg_logprob": -0.1922863300030048, "compression_ratio": 1.6853146853146854, "no_speech_prob": 0.29683977365493774}, {"id": 117, "seek": 98736, "start": 996.4, "end": 1003.4, "text": " I'm taking another values clause, I'm union alling them, so I'm appending them together, right,", "tokens": [50816, 286, 478, 1940, 1071, 4190, 25925, 11, 286, 478, 11671, 439, 278, 552, 11, 370, 286, 478, 724, 2029, 552, 1214, 11, 558, 11, 51166], "temperature": 0.0, "avg_logprob": -0.1922863300030048, "compression_ratio": 1.6853146853146854, "no_speech_prob": 0.29683977365493774}, {"id": 118, "seek": 100340, "start": 1003.4399999999999, "end": 1020.4399999999999, "text": " okay, now I'm appending them together, but each of the unions is already ordered, this is the key aspect here, okay, remember we had append,", "tokens": [50366, 1392, 11, 586, 286, 478, 724, 2029, 552, 1214, 11, 457, 1184, 295, 264, 24914, 307, 1217, 8866, 11, 341, 307, 264, 2141, 4171, 510, 11, 1392, 11, 1604, 321, 632, 34116, 11, 51216], "temperature": 0.0, "avg_logprob": -0.16271738572554154, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.08741245418787003}, {"id": 119, "seek": 100340, "start": 1020.4399999999999, "end": 1027.44, "text": " append just sticks one on the end of another, I will tell you that putting this presentation together is like a jigsaw puzzle,", "tokens": [51216, 34116, 445, 12518, 472, 322, 264, 917, 295, 1071, 11, 286, 486, 980, 291, 300, 3372, 341, 5860, 1214, 307, 411, 257, 361, 17156, 1607, 12805, 11, 51566], "temperature": 0.0, "avg_logprob": -0.16271738572554154, "compression_ratio": 1.552325581395349, "no_speech_prob": 0.08741245418787003}, {"id": 120, "seek": 102744, "start": 1027.48, "end": 1035.48, "text": " because you've got all these node types and you can only talk about the first node, the second node type, if you talked about the first one,", "tokens": [50366, 570, 291, 600, 658, 439, 613, 9984, 3467, 293, 291, 393, 787, 751, 466, 264, 700, 9984, 11, 264, 1150, 9984, 2010, 11, 498, 291, 2825, 466, 264, 700, 472, 11, 50766], "temperature": 0.0, "avg_logprob": -0.13437398930185848, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.2061094492673874}, {"id": 121, "seek": 102744, "start": 1035.48, "end": 1045.48, "text": " and getting it all to kind of fit in your brain is quite a challenge, I hope I've succeeded, but effectively what we have here is two values clauses,", "tokens": [50766, 293, 1242, 309, 439, 281, 733, 295, 3318, 294, 428, 3567, 307, 1596, 257, 3430, 11, 286, 1454, 286, 600, 20263, 11, 457, 8659, 437, 321, 362, 510, 307, 732, 4190, 49072, 11, 51266], "temperature": 0.0, "avg_logprob": -0.13437398930185848, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.2061094492673874}, {"id": 122, "seek": 102744, "start": 1045.48, "end": 1056.48, "text": " but these values clauses are automatically ordered, and therefore when we do a union all and we want the result to be ordered,", "tokens": [51266, 457, 613, 4190, 49072, 366, 6772, 8866, 11, 293, 4412, 562, 321, 360, 257, 11671, 439, 293, 321, 528, 264, 1874, 281, 312, 8866, 11, 51816], "temperature": 0.0, "avg_logprob": -0.13437398930185848, "compression_ratio": 1.7669491525423728, "no_speech_prob": 0.2061094492673874}, {"id": 123, "seek": 105648, "start": 1056.52, "end": 1066.52, "text": " okay, the stupid way to do it would be to just take the results of a pandemic and then sort the whole result,", "tokens": [50366, 1392, 11, 264, 6631, 636, 281, 360, 309, 576, 312, 281, 445, 747, 264, 3542, 295, 257, 5388, 293, 550, 1333, 264, 1379, 1874, 11, 50866], "temperature": 0.0, "avg_logprob": -0.15266948792992568, "compression_ratio": 1.796875, "no_speech_prob": 0.00879963394254446}, {"id": 124, "seek": 105648, "start": 1066.52, "end": 1072.52, "text": " right, that would be the silly way to do it, because we already have our results ordered in two pieces,", "tokens": [50866, 558, 11, 300, 576, 312, 264, 11774, 636, 281, 360, 309, 11, 570, 321, 1217, 362, 527, 3542, 8866, 294, 732, 3755, 11, 51166], "temperature": 0.0, "avg_logprob": -0.15266948792992568, "compression_ratio": 1.796875, "no_speech_prob": 0.00879963394254446}, {"id": 125, "seek": 105648, "start": 1072.52, "end": 1083.52, "text": " so what merge a pen does is it takes two result sets that are already ordered and maintains the ordering as it merges them together", "tokens": [51166, 370, 437, 22183, 257, 3435, 775, 307, 309, 2516, 732, 1874, 6352, 300, 366, 1217, 8866, 293, 33385, 264, 21739, 382, 309, 3551, 2880, 552, 1214, 51716], "temperature": 0.0, "avg_logprob": -0.15266948792992568, "compression_ratio": 1.796875, "no_speech_prob": 0.00879963394254446}, {"id": 126, "seek": 108352, "start": 1083.56, "end": 1090.56, "text": " and it repends them together, okay, so here you can actually see that right here, we've got our sort,", "tokens": [50366, 293, 309, 1085, 2581, 552, 1214, 11, 1392, 11, 370, 510, 291, 393, 767, 536, 300, 558, 510, 11, 321, 600, 658, 527, 1333, 11, 50716], "temperature": 0.0, "avg_logprob": -0.13859870036443075, "compression_ratio": 1.8051282051282052, "no_speech_prob": 0.018748397007584572}, {"id": 127, "seek": 108352, "start": 1090.56, "end": 1095.56, "text": " for the first one we've got our sort for the second one and now we do our merge a pen,", "tokens": [50716, 337, 264, 700, 472, 321, 600, 658, 527, 1333, 337, 264, 1150, 472, 293, 586, 321, 360, 527, 22183, 257, 3435, 11, 50966], "temperature": 0.0, "avg_logprob": -0.13859870036443075, "compression_ratio": 1.8051282051282052, "no_speech_prob": 0.018748397007584572}, {"id": 128, "seek": 108352, "start": 1095.56, "end": 1099.56, "text": " and I apologize for the diagram, but this is the best I can do,", "tokens": [50966, 293, 286, 12328, 337, 264, 10686, 11, 457, 341, 307, 264, 1151, 286, 393, 360, 11, 51166], "temperature": 0.0, "avg_logprob": -0.13859870036443075, "compression_ratio": 1.8051282051282052, "no_speech_prob": 0.018748397007584572}, {"id": 129, "seek": 108352, "start": 1099.56, "end": 1106.56, "text": " what we have here on the left is the first result set, on the bottom we have the second result set,", "tokens": [51166, 437, 321, 362, 510, 322, 264, 1411, 307, 264, 700, 1874, 992, 11, 322, 264, 2767, 321, 362, 264, 1150, 1874, 992, 11, 51516], "temperature": 0.0, "avg_logprob": -0.13859870036443075, "compression_ratio": 1.8051282051282052, "no_speech_prob": 0.018748397007584572}, {"id": 130, "seek": 110656, "start": 1106.6, "end": 1113.6, "text": " as you can see from the query we sorted the first result set here, we sorted the second result set here,", "tokens": [50366, 382, 291, 393, 536, 490, 264, 14581, 321, 25462, 264, 700, 1874, 992, 510, 11, 321, 25462, 264, 1150, 1874, 992, 510, 11, 50716], "temperature": 0.0, "avg_logprob": -0.08588555584783139, "compression_ratio": 2.052910052910053, "no_speech_prob": 0.08485326915979385}, {"id": 131, "seek": 110656, "start": 1113.6, "end": 1120.6, "text": " and as we append them together we want to maintain the ordering that those result sets already had,", "tokens": [50716, 293, 382, 321, 34116, 552, 1214, 321, 528, 281, 6909, 264, 21739, 300, 729, 1874, 6352, 1217, 632, 11, 51066], "temperature": 0.0, "avg_logprob": -0.08588555584783139, "compression_ratio": 2.052910052910053, "no_speech_prob": 0.08485326915979385}, {"id": 132, "seek": 110656, "start": 1120.6, "end": 1126.6, "text": " and to do that we're going to take the lowest value from each result set and just repeat it,", "tokens": [51066, 293, 281, 360, 300, 321, 434, 516, 281, 747, 264, 12437, 2158, 490, 1184, 1874, 992, 293, 445, 7149, 309, 11, 51366], "temperature": 0.0, "avg_logprob": -0.08588555584783139, "compression_ratio": 2.052910052910053, "no_speech_prob": 0.08485326915979385}, {"id": 133, "seek": 110656, "start": 1126.6, "end": 1133.6, "text": " so the lowest value between these two is two, the lowest value between these two is three,", "tokens": [51366, 370, 264, 12437, 2158, 1296, 613, 732, 307, 732, 11, 264, 12437, 2158, 1296, 613, 732, 307, 1045, 11, 51716], "temperature": 0.0, "avg_logprob": -0.08588555584783139, "compression_ratio": 2.052910052910053, "no_speech_prob": 0.08485326915979385}, {"id": 134, "seek": 113360, "start": 1133.6399999999999, "end": 1139.6399999999999, "text": " the lowest value between these two is three, the lowest value between this and this is four,", "tokens": [50366, 264, 12437, 2158, 1296, 613, 732, 307, 1045, 11, 264, 12437, 2158, 1296, 341, 293, 341, 307, 1451, 11, 50666], "temperature": 0.0, "avg_logprob": -0.1254423141479492, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.007336776703596115}, {"id": 135, "seek": 113360, "start": 1139.6399999999999, "end": 1152.6399999999999, "text": " five, six, eight, eleven and twelve, okay, so by using merge a pen we've avoided having to resort the results,", "tokens": [50666, 1732, 11, 2309, 11, 3180, 11, 21090, 293, 14390, 11, 1392, 11, 370, 538, 1228, 22183, 257, 3435, 321, 600, 24890, 1419, 281, 19606, 264, 3542, 11, 51316], "temperature": 0.0, "avg_logprob": -0.1254423141479492, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.007336776703596115}, {"id": 136, "seek": 113360, "start": 1152.6399999999999, "end": 1157.6399999999999, "text": " we basically kind of merge them together, and if you're familiar with the way a merge join works,", "tokens": [51316, 321, 1936, 733, 295, 22183, 552, 1214, 11, 293, 498, 291, 434, 4963, 365, 264, 636, 257, 22183, 3917, 1985, 11, 51566], "temperature": 0.0, "avg_logprob": -0.1254423141479492, "compression_ratio": 1.6538461538461537, "no_speech_prob": 0.007336776703596115}, {"id": 137, "seek": 115764, "start": 1157.68, "end": 1164.68, "text": " that's kind of how it works, right, it takes two results and kind of compares them and kind of walks down,", "tokens": [50366, 300, 311, 733, 295, 577, 309, 1985, 11, 558, 11, 309, 2516, 732, 3542, 293, 733, 295, 38334, 552, 293, 733, 295, 12896, 760, 11, 50716], "temperature": 0.0, "avg_logprob": -0.09417770721100188, "compression_ratio": 1.6908212560386473, "no_speech_prob": 0.09649105370044708}, {"id": 138, "seek": 115764, "start": 1164.68, "end": 1170.68, "text": " finding the minimum matching values as it merges them together, it's the same concept,", "tokens": [50716, 5006, 264, 7285, 14324, 4190, 382, 309, 3551, 2880, 552, 1214, 11, 309, 311, 264, 912, 3410, 11, 51016], "temperature": 0.0, "avg_logprob": -0.09417770721100188, "compression_ratio": 1.6908212560386473, "no_speech_prob": 0.09649105370044708}, {"id": 139, "seek": 115764, "start": 1170.68, "end": 1177.68, "text": " this is what I'm kind of getting at, that the terms that we use here are not random,", "tokens": [51016, 341, 307, 437, 286, 478, 733, 295, 1242, 412, 11, 300, 264, 2115, 300, 321, 764, 510, 366, 406, 4974, 11, 51366], "temperature": 0.0, "avg_logprob": -0.09417770721100188, "compression_ratio": 1.6908212560386473, "no_speech_prob": 0.09649105370044708}, {"id": 140, "seek": 115764, "start": 1177.68, "end": 1181.68, "text": " like the fact we call this a merge a pen actually has some logic to it,", "tokens": [51366, 411, 264, 1186, 321, 818, 341, 257, 22183, 257, 3435, 767, 575, 512, 9952, 281, 309, 11, 51566], "temperature": 0.0, "avg_logprob": -0.09417770721100188, "compression_ratio": 1.6908212560386473, "no_speech_prob": 0.09649105370044708}, {"id": 141, "seek": 118168, "start": 1181.72, "end": 1187.72, "text": " because we're taking what effectively is a merge join and we're sort of repurposing that concept", "tokens": [50366, 570, 321, 434, 1940, 437, 8659, 307, 257, 22183, 3917, 293, 321, 434, 1333, 295, 1085, 20130, 6110, 300, 3410, 50666], "temperature": 0.0, "avg_logprob": -0.25311905997140066, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.019086012616753578}, {"id": 142, "seek": 118168, "start": 1187.72, "end": 1193.72, "text": " to do a pen and retain the sorting, any questions?", "tokens": [50666, 281, 360, 257, 3435, 293, 18340, 264, 32411, 11, 604, 1651, 30, 50966], "temperature": 0.0, "avg_logprob": -0.25311905997140066, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.019086012616753578}, {"id": 143, "seek": 118168, "start": 1193.72, "end": 1194.72, "text": " Yes sir?", "tokens": [50966, 1079, 4735, 30, 51016], "temperature": 0.0, "avg_logprob": -0.25311905997140066, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.019086012616753578}, {"id": 144, "seek": 118168, "start": 1194.72, "end": 1201.72, "text": " Do you know the same thing by using merge a pen instead of just, I don't think the answer.", "tokens": [51016, 1144, 291, 458, 264, 912, 551, 538, 1228, 22183, 257, 3435, 2602, 295, 445, 11, 286, 500, 380, 519, 264, 1867, 13, 51366], "temperature": 0.0, "avg_logprob": -0.25311905997140066, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.019086012616753578}, {"id": 145, "seek": 118168, "start": 1201.72, "end": 1207.72, "text": " So the question is do I know how much time we're gaining by doing merge a pen versus just sorting,", "tokens": [51366, 407, 264, 1168, 307, 360, 286, 458, 577, 709, 565, 321, 434, 19752, 538, 884, 22183, 257, 3435, 5717, 445, 32411, 11, 51666], "temperature": 0.0, "avg_logprob": -0.25311905997140066, "compression_ratio": 1.6634615384615385, "no_speech_prob": 0.019086012616753578}, {"id": 146, "seek": 120772, "start": 1207.76, "end": 1214.76, "text": " so we have, we're a cost based optimizer, so we know the cost of how, what it would take to sort the whole thing", "tokens": [50366, 370, 321, 362, 11, 321, 434, 257, 2063, 2361, 5028, 6545, 11, 370, 321, 458, 264, 2063, 295, 577, 11, 437, 309, 576, 747, 281, 1333, 264, 1379, 551, 50716], "temperature": 0.0, "avg_logprob": -0.0905783799978403, "compression_ratio": 1.868, "no_speech_prob": 0.015409843064844608}, {"id": 147, "seek": 120772, "start": 1214.76, "end": 1219.76, "text": " and what it would take to do merge a pen, so we are always reevaluating that,", "tokens": [50716, 293, 437, 309, 576, 747, 281, 360, 22183, 257, 3435, 11, 370, 321, 366, 1009, 43060, 3337, 32438, 300, 11, 50966], "temperature": 0.0, "avg_logprob": -0.0905783799978403, "compression_ratio": 1.868, "no_speech_prob": 0.015409843064844608}, {"id": 148, "seek": 120772, "start": 1219.76, "end": 1224.76, "text": " all we know as back end developers is we're going to run the cost of both of them", "tokens": [50966, 439, 321, 458, 382, 646, 917, 8849, 307, 321, 434, 516, 281, 1190, 264, 2063, 295, 1293, 295, 552, 51216], "temperature": 0.0, "avg_logprob": -0.0905783799978403, "compression_ratio": 1.868, "no_speech_prob": 0.015409843064844608}, {"id": 149, "seek": 120772, "start": 1224.76, "end": 1228.76, "text": " and we're going to figure out which one is faster, I don't know how much benefit it is,", "tokens": [51216, 293, 321, 434, 516, 281, 2573, 484, 597, 472, 307, 4663, 11, 286, 500, 380, 458, 577, 709, 5121, 309, 307, 11, 51416], "temperature": 0.0, "avg_logprob": -0.0905783799978403, "compression_ratio": 1.868, "no_speech_prob": 0.015409843064844608}, {"id": 150, "seek": 120772, "start": 1228.76, "end": 1235.76, "text": " of course it depends on the size of your result set, but we're only going to do merge a pen if it's a win,", "tokens": [51416, 295, 1164, 309, 5946, 322, 264, 2744, 295, 428, 1874, 992, 11, 457, 321, 434, 787, 516, 281, 360, 22183, 257, 3435, 498, 309, 311, 257, 1942, 11, 51766], "temperature": 0.0, "avg_logprob": -0.0905783799978403, "compression_ratio": 1.868, "no_speech_prob": 0.015409843064844608}, {"id": 151, "seek": 123576, "start": 1235.8, "end": 1239.8, "text": " if it would be cheaper to do it the other way we do it the other way, right?", "tokens": [50366, 498, 309, 576, 312, 12284, 281, 360, 309, 264, 661, 636, 321, 360, 309, 264, 661, 636, 11, 558, 30, 50566], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 152, "seek": 123576, "start": 1239.8, "end": 1241.8, "text": " Other questions?", "tokens": [50566, 5358, 1651, 30, 50666], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 153, "seek": 123576, "start": 1241.8, "end": 1242.8, "text": " Yes sir?", "tokens": [50666, 1079, 4735, 30, 50716], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 154, "seek": 123576, "start": 1242.8, "end": 1249.8, "text": " Does the query guarantee the order of the two set periods to leave out the order by?", "tokens": [50716, 4402, 264, 14581, 10815, 264, 1668, 295, 264, 732, 992, 13804, 281, 1856, 484, 264, 1668, 538, 30, 51066], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 155, "seek": 123576, "start": 1249.8, "end": 1252.8, "text": " So the question is if I leave out these order bys,", "tokens": [51066, 407, 264, 1168, 307, 498, 286, 1856, 484, 613, 1668, 538, 82, 11, 51216], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 156, "seek": 123576, "start": 1252.8, "end": 1254.8, "text": " No, the other, the lower order by.", "tokens": [51216, 883, 11, 264, 661, 11, 264, 3126, 1668, 538, 13, 51316], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 157, "seek": 123576, "start": 1254.8, "end": 1256.8, "text": " I'm sorry?", "tokens": [51316, 286, 478, 2597, 30, 51416], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 158, "seek": 123576, "start": 1256.8, "end": 1257.8, "text": " Is that the query?", "tokens": [51416, 1119, 300, 264, 14581, 30, 51466], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 159, "seek": 123576, "start": 1257.8, "end": 1258.8, "text": " Yeah, this one here?", "tokens": [51466, 865, 11, 341, 472, 510, 30, 51516], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 160, "seek": 123576, "start": 1258.8, "end": 1259.8, "text": " No.", "tokens": [51516, 883, 13, 51566], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 161, "seek": 123576, "start": 1259.8, "end": 1260.8, "text": " This one here.", "tokens": [51566, 639, 472, 510, 13, 51616], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 162, "seek": 123576, "start": 1260.8, "end": 1261.8, "text": " This one?", "tokens": [51616, 639, 472, 30, 51666], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 163, "seek": 123576, "start": 1261.8, "end": 1262.8, "text": " Yeah.", "tokens": [51666, 865, 13, 51716], "temperature": 0.0, "avg_logprob": -0.3020186306031282, "compression_ratio": 1.8316326530612246, "no_speech_prob": 0.0131917092949152}, {"id": 164, "seek": 126280, "start": 1262.84, "end": 1266.84, "text": " Well, if I don't have this here, I'm not going to do a merge a pen,", "tokens": [50366, 1042, 11, 498, 286, 500, 380, 362, 341, 510, 11, 286, 478, 406, 516, 281, 360, 257, 22183, 257, 3435, 11, 50566], "temperature": 0.0, "avg_logprob": -0.14919529241674087, "compression_ratio": 1.8744769874476988, "no_speech_prob": 0.01908062770962715}, {"id": 165, "seek": 126280, "start": 1266.84, "end": 1269.84, "text": " because I don't need to, I don't just, I'll just append them together,", "tokens": [50566, 570, 286, 500, 380, 643, 281, 11, 286, 500, 380, 445, 11, 286, 603, 445, 34116, 552, 1214, 11, 50716], "temperature": 0.0, "avg_logprob": -0.14919529241674087, "compression_ratio": 1.8744769874476988, "no_speech_prob": 0.01908062770962715}, {"id": 166, "seek": 126280, "start": 1269.84, "end": 1274.84, "text": " I don't need to merge them and maintain, the only reason we're doing that,", "tokens": [50716, 286, 500, 380, 643, 281, 22183, 552, 293, 6909, 11, 264, 787, 1778, 321, 434, 884, 300, 11, 50966], "temperature": 0.0, "avg_logprob": -0.14919529241674087, "compression_ratio": 1.8744769874476988, "no_speech_prob": 0.01908062770962715}, {"id": 167, "seek": 126280, "start": 1274.84, "end": 1278.84, "text": " you see how order by one is in blue, that has to be there,", "tokens": [50966, 291, 536, 577, 1668, 538, 472, 307, 294, 3344, 11, 300, 575, 281, 312, 456, 11, 51166], "temperature": 0.0, "avg_logprob": -0.14919529241674087, "compression_ratio": 1.8744769874476988, "no_speech_prob": 0.01908062770962715}, {"id": 168, "seek": 126280, "start": 1278.84, "end": 1281.84, "text": " if that order by isn't there we aren't going to use merge a pen,", "tokens": [51166, 498, 300, 1668, 538, 1943, 380, 456, 321, 3212, 380, 516, 281, 764, 22183, 257, 3435, 11, 51316], "temperature": 0.0, "avg_logprob": -0.14919529241674087, "compression_ratio": 1.8744769874476988, "no_speech_prob": 0.01908062770962715}, {"id": 169, "seek": 126280, "start": 1281.84, "end": 1284.84, "text": " because we don't need to preserve it, right?", "tokens": [51316, 570, 321, 500, 380, 643, 281, 15665, 309, 11, 558, 30, 51466], "temperature": 0.0, "avg_logprob": -0.14919529241674087, "compression_ratio": 1.8744769874476988, "no_speech_prob": 0.01908062770962715}, {"id": 170, "seek": 126280, "start": 1284.84, "end": 1285.84, "text": " Yeah?", "tokens": [51466, 865, 30, 51516], "temperature": 0.0, "avg_logprob": -0.14919529241674087, "compression_ratio": 1.8744769874476988, "no_speech_prob": 0.01908062770962715}, {"id": 171, "seek": 126280, "start": 1285.84, "end": 1288.84, "text": " In that case would the other two order bys also be removed?", "tokens": [51516, 682, 300, 1389, 576, 264, 661, 732, 1668, 538, 82, 611, 312, 7261, 30, 51666], "temperature": 0.0, "avg_logprob": -0.14919529241674087, "compression_ratio": 1.8744769874476988, "no_speech_prob": 0.01908062770962715}, {"id": 172, "seek": 128884, "start": 1288.8799999999999, "end": 1292.8799999999999, "text": " So the question is in that other case where the two other order bys also be removed,", "tokens": [50366, 407, 264, 1168, 307, 294, 300, 661, 1389, 689, 264, 732, 661, 1668, 538, 82, 611, 312, 7261, 11, 50566], "temperature": 0.0, "avg_logprob": -0.12309186093442075, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.004326204769313335}, {"id": 173, "seek": 128884, "start": 1292.8799999999999, "end": 1299.8799999999999, "text": " the answer is no, because the user would still get the order by of the first result,", "tokens": [50566, 264, 1867, 307, 572, 11, 570, 264, 4195, 576, 920, 483, 264, 1668, 538, 295, 264, 700, 1874, 11, 50916], "temperature": 0.0, "avg_logprob": -0.12309186093442075, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.004326204769313335}, {"id": 174, "seek": 128884, "start": 1299.8799999999999, "end": 1301.8799999999999, "text": " and then the second result would be right underneath it.", "tokens": [50916, 293, 550, 264, 1150, 1874, 576, 312, 558, 7223, 309, 13, 51016], "temperature": 0.0, "avg_logprob": -0.12309186093442075, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.004326204769313335}, {"id": 175, "seek": 128884, "start": 1301.8799999999999, "end": 1306.8799999999999, "text": " So they've specified in the query that they want the order by, we're going to maintain that.", "tokens": [51016, 407, 436, 600, 22206, 294, 264, 14581, 300, 436, 528, 264, 1668, 538, 11, 321, 434, 516, 281, 6909, 300, 13, 51266], "temperature": 0.0, "avg_logprob": -0.12309186093442075, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.004326204769313335}, {"id": 176, "seek": 128884, "start": 1306.8799999999999, "end": 1312.8799999999999, "text": " But because they've added an order by after it, we're kind of overriding it", "tokens": [51266, 583, 570, 436, 600, 3869, 364, 1668, 538, 934, 309, 11, 321, 434, 733, 295, 670, 81, 2819, 309, 51566], "temperature": 0.0, "avg_logprob": -0.12309186093442075, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.004326204769313335}, {"id": 177, "seek": 128884, "start": 1312.8799999999999, "end": 1314.8799999999999, "text": " and kind of using their order by.", "tokens": [51566, 293, 733, 295, 1228, 641, 1668, 538, 13, 51666], "temperature": 0.0, "avg_logprob": -0.12309186093442075, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.004326204769313335}, {"id": 178, "seek": 131488, "start": 1314.92, "end": 1322.92, "text": " Now I'll admit this is a contrived example, we could have done an index scan to get this order by.", "tokens": [50366, 823, 286, 603, 9796, 341, 307, 257, 660, 470, 937, 1365, 11, 321, 727, 362, 1096, 364, 8186, 11049, 281, 483, 341, 1668, 538, 13, 50766], "temperature": 0.0, "avg_logprob": -0.14413480500917178, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.017120257019996643}, {"id": 179, "seek": 131488, "start": 1322.92, "end": 1326.92, "text": " So this is the fact that I've got two order bys up there, you see they're not in blue,", "tokens": [50766, 407, 341, 307, 264, 1186, 300, 286, 600, 658, 732, 1668, 538, 82, 493, 456, 11, 291, 536, 436, 434, 406, 294, 3344, 11, 50966], "temperature": 0.0, "avg_logprob": -0.14413480500917178, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.017120257019996643}, {"id": 180, "seek": 131488, "start": 1326.92, "end": 1329.92, "text": " they have to be there, but it could be some other query,", "tokens": [50966, 436, 362, 281, 312, 456, 11, 457, 309, 727, 312, 512, 661, 14581, 11, 51116], "temperature": 0.0, "avg_logprob": -0.14413480500917178, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.017120257019996643}, {"id": 181, "seek": 131488, "start": 1329.92, "end": 1333.92, "text": " we could be doing an index scan and pull the orders that way,", "tokens": [51116, 321, 727, 312, 884, 364, 8186, 11049, 293, 2235, 264, 9470, 300, 636, 11, 51316], "temperature": 0.0, "avg_logprob": -0.14413480500917178, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.017120257019996643}, {"id": 182, "seek": 131488, "start": 1333.92, "end": 1336.92, "text": " and that way we don't have to do sorting again, could be anything, right?", "tokens": [51316, 293, 300, 636, 321, 500, 380, 362, 281, 360, 32411, 797, 11, 727, 312, 1340, 11, 558, 30, 51466], "temperature": 0.0, "avg_logprob": -0.14413480500917178, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.017120257019996643}, {"id": 183, "seek": 131488, "start": 1336.92, "end": 1338.92, "text": " Yes.", "tokens": [51466, 1079, 13, 51566], "temperature": 0.0, "avg_logprob": -0.14413480500917178, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.017120257019996643}, {"id": 184, "seek": 133892, "start": 1338.96, "end": 1345.96, "text": " I told you earlier that we do this order by inside, you kind of like hit the optimizer,", "tokens": [50366, 286, 1907, 291, 3071, 300, 321, 360, 341, 1668, 538, 1854, 11, 291, 733, 295, 411, 2045, 264, 5028, 6545, 11, 50716], "temperature": 0.0, "avg_logprob": -0.230657042118541, "compression_ratio": 1.7024793388429753, "no_speech_prob": 0.023892391473054886}, {"id": 185, "seek": 133892, "start": 1345.96, "end": 1349.96, "text": " which I'm not supposed to, but I know that you need to restore them.", "tokens": [50716, 597, 286, 478, 406, 3442, 281, 11, 457, 286, 458, 300, 291, 643, 281, 15227, 552, 13, 50916], "temperature": 0.0, "avg_logprob": -0.230657042118541, "compression_ratio": 1.7024793388429753, "no_speech_prob": 0.023892391473054886}, {"id": 186, "seek": 133892, "start": 1349.96, "end": 1351.96, "text": " So it will do this, right?", "tokens": [50916, 407, 309, 486, 360, 341, 11, 558, 30, 51016], "temperature": 0.0, "avg_logprob": -0.230657042118541, "compression_ratio": 1.7024793388429753, "no_speech_prob": 0.023892391473054886}, {"id": 187, "seek": 133892, "start": 1351.96, "end": 1357.96, "text": " But I mean in more complex cases it's not necessarily that you had to restore the other two.", "tokens": [51016, 583, 286, 914, 294, 544, 3997, 3331, 309, 311, 406, 4725, 300, 291, 632, 281, 15227, 264, 661, 732, 13, 51316], "temperature": 0.0, "avg_logprob": -0.230657042118541, "compression_ratio": 1.7024793388429753, "no_speech_prob": 0.023892391473054886}, {"id": 188, "seek": 133892, "start": 1357.96, "end": 1361.96, "text": " So the question is do we need to order by there?", "tokens": [51316, 407, 264, 1168, 307, 360, 321, 643, 281, 1668, 538, 456, 30, 51516], "temperature": 0.0, "avg_logprob": -0.230657042118541, "compression_ratio": 1.7024793388429753, "no_speech_prob": 0.023892391473054886}, {"id": 189, "seek": 133892, "start": 1361.96, "end": 1366.96, "text": " The fact is if there's no ordering of the two results, we aren't going to do order by,", "tokens": [51516, 440, 1186, 307, 498, 456, 311, 572, 21739, 295, 264, 732, 3542, 11, 321, 3212, 380, 516, 281, 360, 1668, 538, 11, 51766], "temperature": 0.0, "avg_logprob": -0.230657042118541, "compression_ratio": 1.7024793388429753, "no_speech_prob": 0.023892391473054886}, {"id": 190, "seek": 136696, "start": 1367.0, "end": 1371.0, "text": " we're just going to do a big one huge sort and just run with it, right?", "tokens": [50366, 321, 434, 445, 516, 281, 360, 257, 955, 472, 2603, 1333, 293, 445, 1190, 365, 309, 11, 558, 30, 50566], "temperature": 0.0, "avg_logprob": -0.19314693175640302, "compression_ratio": 1.5865384615384615, "no_speech_prob": 0.008840550668537617}, {"id": 191, "seek": 136696, "start": 1371.0, "end": 1373.0, "text": " The only reason we're doing that is that.", "tokens": [50566, 440, 787, 1778, 321, 434, 884, 300, 307, 300, 13, 50666], "temperature": 0.0, "avg_logprob": -0.19314693175640302, "compression_ratio": 1.5865384615384615, "no_speech_prob": 0.008840550668537617}, {"id": 192, "seek": 136696, "start": 1373.0, "end": 1380.0, "text": " Okay, so eight and nine, two new options here.", "tokens": [50666, 1033, 11, 370, 3180, 293, 4949, 11, 732, 777, 3956, 510, 13, 51016], "temperature": 0.0, "avg_logprob": -0.19314693175640302, "compression_ratio": 1.5865384615384615, "no_speech_prob": 0.008840550668537617}, {"id": 193, "seek": 136696, "start": 1380.0, "end": 1386.0, "text": " One is called subquery scan and one is called hash set up.", "tokens": [51016, 1485, 307, 1219, 1422, 358, 2109, 11049, 293, 472, 307, 1219, 22019, 992, 493, 13, 51316], "temperature": 0.0, "avg_logprob": -0.19314693175640302, "compression_ratio": 1.5865384615384615, "no_speech_prob": 0.008840550668537617}, {"id": 194, "seek": 136696, "start": 1386.0, "end": 1393.0, "text": " I know I'm not super proud of hash set up, it sounds like a, I don't know, some kind of science fiction thing,", "tokens": [51316, 286, 458, 286, 478, 406, 1687, 4570, 295, 22019, 992, 493, 11, 309, 3263, 411, 257, 11, 286, 500, 380, 458, 11, 512, 733, 295, 3497, 13266, 551, 11, 51666], "temperature": 0.0, "avg_logprob": -0.19314693175640302, "compression_ratio": 1.5865384615384615, "no_speech_prob": 0.008840550668537617}, {"id": 195, "seek": 139300, "start": 1393.04, "end": 1396.04, "text": " or I don't know what, but let's just look at this.", "tokens": [50366, 420, 286, 500, 380, 458, 437, 11, 457, 718, 311, 445, 574, 412, 341, 13, 50516], "temperature": 0.0, "avg_logprob": -0.13859734483944472, "compression_ratio": 1.5330188679245282, "no_speech_prob": 0.0036477576941251755}, {"id": 196, "seek": 139300, "start": 1396.04, "end": 1405.04, "text": " So this is a query where we've got a thousand rows and we're saying select from the small table", "tokens": [50516, 407, 341, 307, 257, 14581, 689, 321, 600, 658, 257, 4714, 13241, 293, 321, 434, 1566, 3048, 490, 264, 1359, 3199, 50966], "temperature": 0.0, "avg_logprob": -0.13859734483944472, "compression_ratio": 1.5330188679245282, "no_speech_prob": 0.0036477576941251755}, {"id": 197, "seek": 139300, "start": 1405.04, "end": 1411.04, "text": " and then remove or subtract or whatever, how do you explain it?", "tokens": [50966, 293, 550, 4159, 420, 16390, 420, 2035, 11, 577, 360, 291, 2903, 309, 30, 51266], "temperature": 0.0, "avg_logprob": -0.13859734483944472, "compression_ratio": 1.5330188679245282, "no_speech_prob": 0.0036477576941251755}, {"id": 198, "seek": 139300, "start": 1411.04, "end": 1413.04, "text": " These other rows.", "tokens": [51266, 1981, 661, 13241, 13, 51366], "temperature": 0.0, "avg_logprob": -0.13859734483944472, "compression_ratio": 1.5330188679245282, "no_speech_prob": 0.0036477576941251755}, {"id": 199, "seek": 139300, "start": 1413.04, "end": 1415.04, "text": " Now we know by looking at this there are no rows.", "tokens": [51366, 823, 321, 458, 538, 1237, 412, 341, 456, 366, 572, 13241, 13, 51466], "temperature": 0.0, "avg_logprob": -0.13859734483944472, "compression_ratio": 1.5330188679245282, "no_speech_prob": 0.0036477576941251755}, {"id": 200, "seek": 139300, "start": 1415.04, "end": 1419.04, "text": " Okay, so just go work with me here, all right?", "tokens": [51466, 1033, 11, 370, 445, 352, 589, 365, 385, 510, 11, 439, 558, 30, 51666], "temperature": 0.0, "avg_logprob": -0.13859734483944472, "compression_ratio": 1.5330188679245282, "no_speech_prob": 0.0036477576941251755}, {"id": 201, "seek": 141904, "start": 1419.08, "end": 1425.08, "text": " The system doesn't know that, that I've actually removed the rows from the same table twice.", "tokens": [50366, 440, 1185, 1177, 380, 458, 300, 11, 300, 286, 600, 767, 7261, 264, 13241, 490, 264, 912, 3199, 6091, 13, 50666], "temperature": 0.0, "avg_logprob": -0.09514916145195396, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.005996784195303917}, {"id": 202, "seek": 141904, "start": 1425.08, "end": 1427.08, "text": " We don't have an optimization for that.", "tokens": [50666, 492, 500, 380, 362, 364, 19618, 337, 300, 13, 50766], "temperature": 0.0, "avg_logprob": -0.09514916145195396, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.005996784195303917}, {"id": 203, "seek": 141904, "start": 1427.08, "end": 1432.08, "text": " So what we're going to do here is we're going to run something called a subquery scan", "tokens": [50766, 407, 437, 321, 434, 516, 281, 360, 510, 307, 321, 434, 516, 281, 1190, 746, 1219, 257, 1422, 358, 2109, 11049, 51016], "temperature": 0.0, "avg_logprob": -0.09514916145195396, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.005996784195303917}, {"id": 204, "seek": 141904, "start": 1432.08, "end": 1436.08, "text": " and we're going to run it twice because we've got two queries here", "tokens": [51016, 293, 321, 434, 516, 281, 1190, 309, 6091, 570, 321, 600, 658, 732, 24109, 510, 51216], "temperature": 0.0, "avg_logprob": -0.09514916145195396, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.005996784195303917}, {"id": 205, "seek": 141904, "start": 1436.08, "end": 1440.08, "text": " and then, I'm sorry, subquery scan and then we're going to do hash set ups.", "tokens": [51216, 293, 550, 11, 286, 478, 2597, 11, 1422, 358, 2109, 11049, 293, 550, 321, 434, 516, 281, 360, 22019, 992, 15497, 13, 51416], "temperature": 0.0, "avg_logprob": -0.09514916145195396, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.005996784195303917}, {"id": 206, "seek": 141904, "start": 1440.08, "end": 1445.08, "text": " And again, crazy, crazy diagram, I'm going to walk you through this.", "tokens": [51416, 400, 797, 11, 3219, 11, 3219, 10686, 11, 286, 478, 516, 281, 1792, 291, 807, 341, 13, 51666], "temperature": 0.0, "avg_logprob": -0.09514916145195396, "compression_ratio": 1.7916666666666667, "no_speech_prob": 0.005996784195303917}, {"id": 207, "seek": 144508, "start": 1445.12, "end": 1450.12, "text": " What we basically have, this is the outer part, the first part of the query", "tokens": [50366, 708, 321, 1936, 362, 11, 341, 307, 264, 10847, 644, 11, 264, 700, 644, 295, 264, 14581, 50616], "temperature": 0.0, "avg_logprob": -0.07214700698852539, "compression_ratio": 1.893048128342246, "no_speech_prob": 0.006477876100689173}, {"id": 208, "seek": 144508, "start": 1450.12, "end": 1453.12, "text": " and this is the except part of the query.", "tokens": [50616, 293, 341, 307, 264, 3993, 644, 295, 264, 14581, 13, 50766], "temperature": 0.0, "avg_logprob": -0.07214700698852539, "compression_ratio": 1.893048128342246, "no_speech_prob": 0.006477876100689173}, {"id": 209, "seek": 144508, "start": 1453.12, "end": 1457.12, "text": " The query, we're removing all the matches, okay?", "tokens": [50766, 440, 14581, 11, 321, 434, 12720, 439, 264, 10676, 11, 1392, 30, 50966], "temperature": 0.0, "avg_logprob": -0.07214700698852539, "compression_ratio": 1.893048128342246, "no_speech_prob": 0.006477876100689173}, {"id": 210, "seek": 144508, "start": 1457.12, "end": 1461.12, "text": " And what we're going to do, and this is kind of weird,", "tokens": [50966, 400, 437, 321, 434, 516, 281, 360, 11, 293, 341, 307, 733, 295, 3657, 11, 51166], "temperature": 0.0, "avg_logprob": -0.07214700698852539, "compression_ratio": 1.893048128342246, "no_speech_prob": 0.006477876100689173}, {"id": 211, "seek": 144508, "start": 1461.12, "end": 1467.12, "text": " is we're going to create, we're going to kind of append the two together", "tokens": [51166, 307, 321, 434, 516, 281, 1884, 11, 321, 434, 516, 281, 733, 295, 34116, 264, 732, 1214, 51466], "temperature": 0.0, "avg_logprob": -0.07214700698852539, "compression_ratio": 1.893048128342246, "no_speech_prob": 0.006477876100689173}, {"id": 212, "seek": 144508, "start": 1467.12, "end": 1472.12, "text": " and we're going to put one, a label one for the first query", "tokens": [51466, 293, 321, 434, 516, 281, 829, 472, 11, 257, 7645, 472, 337, 264, 700, 14581, 51716], "temperature": 0.0, "avg_logprob": -0.07214700698852539, "compression_ratio": 1.893048128342246, "no_speech_prob": 0.006477876100689173}, {"id": 213, "seek": 147212, "start": 1472.1599999999999, "end": 1475.1599999999999, "text": " and a label two for the second query.", "tokens": [50366, 293, 257, 7645, 732, 337, 264, 1150, 14581, 13, 50516], "temperature": 0.0, "avg_logprob": -0.11789176293781825, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.0025091716088354588}, {"id": 214, "seek": 147212, "start": 1475.1599999999999, "end": 1478.1599999999999, "text": " Okay, so here's the first query, all with ones in the second column.", "tokens": [50516, 1033, 11, 370, 510, 311, 264, 700, 14581, 11, 439, 365, 2306, 294, 264, 1150, 7738, 13, 50666], "temperature": 0.0, "avg_logprob": -0.11789176293781825, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.0025091716088354588}, {"id": 215, "seek": 147212, "start": 1478.1599999999999, "end": 1481.1599999999999, "text": " Here's, same thing with all, two is in the second column.", "tokens": [50666, 1692, 311, 11, 912, 551, 365, 439, 11, 732, 307, 294, 264, 1150, 7738, 13, 50816], "temperature": 0.0, "avg_logprob": -0.11789176293781825, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.0025091716088354588}, {"id": 216, "seek": 147212, "start": 1481.1599999999999, "end": 1485.1599999999999, "text": " And then what we're going to do is we're going to hash them", "tokens": [50816, 400, 550, 437, 321, 434, 516, 281, 360, 307, 321, 434, 516, 281, 22019, 552, 51016], "temperature": 0.0, "avg_logprob": -0.11789176293781825, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.0025091716088354588}, {"id": 217, "seek": 147212, "start": 1485.1599999999999, "end": 1490.1599999999999, "text": " and we're going to hash them basically in a random order", "tokens": [51016, 293, 321, 434, 516, 281, 22019, 552, 1936, 294, 257, 4974, 1668, 51266], "temperature": 0.0, "avg_logprob": -0.11789176293781825, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.0025091716088354588}, {"id": 218, "seek": 147212, "start": 1490.1599999999999, "end": 1494.1599999999999, "text": " because again, hashing doesn't have any ordering to it.", "tokens": [51266, 570, 797, 11, 575, 571, 1177, 380, 362, 604, 21739, 281, 309, 13, 51466], "temperature": 0.0, "avg_logprob": -0.11789176293781825, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.0025091716088354588}, {"id": 219, "seek": 147212, "start": 1494.1599999999999, "end": 1500.1599999999999, "text": " And we're going to look for the ones that basically all of the ones", "tokens": [51466, 400, 321, 434, 516, 281, 574, 337, 264, 2306, 300, 1936, 439, 295, 264, 2306, 51766], "temperature": 0.0, "avg_logprob": -0.11789176293781825, "compression_ratio": 1.975609756097561, "no_speech_prob": 0.0025091716088354588}, {"id": 220, "seek": 150016, "start": 1500.2, "end": 1503.2, "text": " that don't have a two.", "tokens": [50366, 300, 500, 380, 362, 257, 732, 13, 50516], "temperature": 0.0, "avg_logprob": -0.11574260088113639, "compression_ratio": 1.8241206030150754, "no_speech_prob": 0.0018089731456711888}, {"id": 221, "seek": 150016, "start": 1503.2, "end": 1508.2, "text": " So for example, the seven does not have a two match for the hash", "tokens": [50516, 407, 337, 1365, 11, 264, 3407, 775, 406, 362, 257, 732, 2995, 337, 264, 22019, 50766], "temperature": 0.0, "avg_logprob": -0.11574260088113639, "compression_ratio": 1.8241206030150754, "no_speech_prob": 0.0018089731456711888}, {"id": 222, "seek": 150016, "start": 1508.2, "end": 1512.2, "text": " and therefore it's part of the output, the three and the six", "tokens": [50766, 293, 4412, 309, 311, 644, 295, 264, 5598, 11, 264, 1045, 293, 264, 2309, 50966], "temperature": 0.0, "avg_logprob": -0.11574260088113639, "compression_ratio": 1.8241206030150754, "no_speech_prob": 0.0018089731456711888}, {"id": 223, "seek": 150016, "start": 1512.2, "end": 1517.2, "text": " have a one but without a two and those aren't going to go out.", "tokens": [50966, 362, 257, 472, 457, 1553, 257, 732, 293, 729, 3212, 380, 516, 281, 352, 484, 13, 51216], "temperature": 0.0, "avg_logprob": -0.11574260088113639, "compression_ratio": 1.8241206030150754, "no_speech_prob": 0.0018089731456711888}, {"id": 224, "seek": 150016, "start": 1517.2, "end": 1522.2, "text": " A 12 is going to come out and the five and the eight and the eleven", "tokens": [51216, 316, 2272, 307, 516, 281, 808, 484, 293, 264, 1732, 293, 264, 3180, 293, 264, 21090, 51466], "temperature": 0.0, "avg_logprob": -0.11574260088113639, "compression_ratio": 1.8241206030150754, "no_speech_prob": 0.0018089731456711888}, {"id": 225, "seek": 150016, "start": 1522.2, "end": 1525.2, "text": " have a two without a one.", "tokens": [51466, 362, 257, 732, 1553, 257, 472, 13, 51616], "temperature": 0.0, "avg_logprob": -0.11574260088113639, "compression_ratio": 1.8241206030150754, "no_speech_prob": 0.0018089731456711888}, {"id": 226, "seek": 150016, "start": 1525.2, "end": 1528.2, "text": " Okay, so anything basically that has a one without a two,", "tokens": [51616, 1033, 11, 370, 1340, 1936, 300, 575, 257, 472, 1553, 257, 732, 11, 51766], "temperature": 0.0, "avg_logprob": -0.11574260088113639, "compression_ratio": 1.8241206030150754, "no_speech_prob": 0.0018089731456711888}, {"id": 227, "seek": 152820, "start": 1528.24, "end": 1531.24, "text": " that's what we're going to output and that's how we're going to implement", "tokens": [50366, 300, 311, 437, 321, 434, 516, 281, 5598, 293, 300, 311, 577, 321, 434, 516, 281, 4445, 50516], "temperature": 0.0, "avg_logprob": -0.16524557481732285, "compression_ratio": 1.773109243697479, "no_speech_prob": 0.0028427850920706987}, {"id": 228, "seek": 152820, "start": 1531.24, "end": 1534.24, "text": " this except right here.", "tokens": [50516, 341, 3993, 558, 510, 13, 50666], "temperature": 0.0, "avg_logprob": -0.16524557481732285, "compression_ratio": 1.773109243697479, "no_speech_prob": 0.0028427850920706987}, {"id": 229, "seek": 152820, "start": 1534.24, "end": 1538.24, "text": " Again, we have some, if you want to read this at some point,", "tokens": [50666, 3764, 11, 321, 362, 512, 11, 498, 291, 528, 281, 1401, 341, 412, 512, 935, 11, 50866], "temperature": 0.0, "avg_logprob": -0.16524557481732285, "compression_ratio": 1.773109243697479, "no_speech_prob": 0.0028427850920706987}, {"id": 230, "seek": 152820, "start": 1538.24, "end": 1543.24, "text": " this is related to how we do intersect and accept and so forth.", "tokens": [50866, 341, 307, 4077, 281, 577, 321, 360, 27815, 293, 3241, 293, 370, 5220, 13, 51116], "temperature": 0.0, "avg_logprob": -0.16524557481732285, "compression_ratio": 1.773109243697479, "no_speech_prob": 0.0028427850920706987}, {"id": 231, "seek": 152820, "start": 1543.24, "end": 1546.24, "text": " It's kind of interesting if you're curious for later,", "tokens": [51116, 467, 311, 733, 295, 1880, 498, 291, 434, 6369, 337, 1780, 11, 51266], "temperature": 0.0, "avg_logprob": -0.16524557481732285, "compression_ratio": 1.773109243697479, "no_speech_prob": 0.0028427850920706987}, {"id": 232, "seek": 152820, "start": 1546.24, "end": 1549.24, "text": " you really want to study the slides, feel free to read that.", "tokens": [51266, 291, 534, 528, 281, 2979, 264, 9788, 11, 841, 1737, 281, 1401, 300, 13, 51416], "temperature": 0.0, "avg_logprob": -0.16524557481732285, "compression_ratio": 1.773109243697479, "no_speech_prob": 0.0028427850920706987}, {"id": 233, "seek": 152820, "start": 1549.24, "end": 1553.24, "text": " Setup is what we would use for intersect.", "tokens": [51416, 8928, 1010, 307, 437, 321, 576, 764, 337, 27815, 13, 51616], "temperature": 0.0, "avg_logprob": -0.16524557481732285, "compression_ratio": 1.773109243697479, "no_speech_prob": 0.0028427850920706987}, {"id": 234, "seek": 152820, "start": 1553.24, "end": 1557.24, "text": " Intersect again, another opportunity here.", "tokens": [51616, 5751, 9632, 797, 11, 1071, 2650, 510, 13, 51816], "temperature": 0.0, "avg_logprob": -0.16524557481732285, "compression_ratio": 1.773109243697479, "no_speech_prob": 0.0028427850920706987}, {"id": 235, "seek": 155724, "start": 1557.28, "end": 1560.28, "text": " So we want to find the ones that are in both of them.", "tokens": [50366, 407, 321, 528, 281, 915, 264, 2306, 300, 366, 294, 1293, 295, 552, 13, 50516], "temperature": 0.0, "avg_logprob": -0.12322948018058402, "compression_ratio": 1.7447698744769875, "no_speech_prob": 0.0037540881894528866}, {"id": 236, "seek": 155724, "start": 1560.28, "end": 1564.28, "text": " So we have large intersect from large, again same issue.", "tokens": [50516, 407, 321, 362, 2416, 27815, 490, 2416, 11, 797, 912, 2734, 13, 50716], "temperature": 0.0, "avg_logprob": -0.12322948018058402, "compression_ratio": 1.7447698744769875, "no_speech_prob": 0.0037540881894528866}, {"id": 237, "seek": 155724, "start": 1564.28, "end": 1567.28, "text": " We do a subquery scan, we append them together, we sort them", "tokens": [50716, 492, 360, 257, 1422, 358, 2109, 11049, 11, 321, 34116, 552, 1214, 11, 321, 1333, 552, 50866], "temperature": 0.0, "avg_logprob": -0.12322948018058402, "compression_ratio": 1.7447698744769875, "no_speech_prob": 0.0037540881894528866}, {"id": 238, "seek": 155724, "start": 1567.28, "end": 1569.28, "text": " and we do set up.", "tokens": [50866, 293, 321, 360, 992, 493, 13, 50966], "temperature": 0.0, "avg_logprob": -0.12322948018058402, "compression_ratio": 1.7447698744769875, "no_speech_prob": 0.0037540881894528866}, {"id": 239, "seek": 155724, "start": 1569.28, "end": 1573.28, "text": " Again, similar diagram, here's the first part, here's the second part.", "tokens": [50966, 3764, 11, 2531, 10686, 11, 510, 311, 264, 700, 644, 11, 510, 311, 264, 1150, 644, 13, 51166], "temperature": 0.0, "avg_logprob": -0.12322948018058402, "compression_ratio": 1.7447698744769875, "no_speech_prob": 0.0037540881894528866}, {"id": 240, "seek": 155724, "start": 1573.28, "end": 1577.28, "text": " We label with one, we label with two, we create a joined result,", "tokens": [51166, 492, 7645, 365, 472, 11, 321, 7645, 365, 732, 11, 321, 1884, 257, 6869, 1874, 11, 51366], "temperature": 0.0, "avg_logprob": -0.12322948018058402, "compression_ratio": 1.7447698744769875, "no_speech_prob": 0.0037540881894528866}, {"id": 241, "seek": 155724, "start": 1577.28, "end": 1581.28, "text": " we create the hash but in this case,", "tokens": [51366, 321, 1884, 264, 22019, 457, 294, 341, 1389, 11, 51566], "temperature": 0.0, "avg_logprob": -0.12322948018058402, "compression_ratio": 1.7447698744769875, "no_speech_prob": 0.0037540881894528866}, {"id": 242, "seek": 155724, "start": 1581.28, "end": 1585.28, "text": " we're now looking for cases that have a one and a two.", "tokens": [51566, 321, 434, 586, 1237, 337, 3331, 300, 362, 257, 472, 293, 257, 732, 13, 51766], "temperature": 0.0, "avg_logprob": -0.12322948018058402, "compression_ratio": 1.7447698744769875, "no_speech_prob": 0.0037540881894528866}, {"id": 243, "seek": 158528, "start": 1585.32, "end": 1589.32, "text": " Remember before it was cases that have a one without a two?", "tokens": [50366, 5459, 949, 309, 390, 3331, 300, 362, 257, 472, 1553, 257, 732, 30, 50566], "temperature": 0.0, "avg_logprob": -0.1377558624535276, "compression_ratio": 1.7445887445887447, "no_speech_prob": 0.008968177251517773}, {"id": 244, "seek": 158528, "start": 1589.32, "end": 1593.32, "text": " Now we're looking for cases with a one and a two.", "tokens": [50566, 823, 321, 434, 1237, 337, 3331, 365, 257, 472, 293, 257, 732, 13, 50766], "temperature": 0.0, "avg_logprob": -0.1377558624535276, "compression_ratio": 1.7445887445887447, "no_speech_prob": 0.008968177251517773}, {"id": 245, "seek": 158528, "start": 1593.32, "end": 1597.32, "text": " And you can imagine we're kind of using the same code, right?", "tokens": [50766, 400, 291, 393, 3811, 321, 434, 733, 295, 1228, 264, 912, 3089, 11, 558, 30, 50966], "temperature": 0.0, "avg_logprob": -0.1377558624535276, "compression_ratio": 1.7445887445887447, "no_speech_prob": 0.008968177251517773}, {"id": 246, "seek": 158528, "start": 1597.32, "end": 1602.32, "text": " It's sort of the same idea, it's just the filter you put on at the end.", "tokens": [50966, 467, 311, 1333, 295, 264, 912, 1558, 11, 309, 311, 445, 264, 6608, 291, 829, 322, 412, 264, 917, 13, 51216], "temperature": 0.0, "avg_logprob": -0.1377558624535276, "compression_ratio": 1.7445887445887447, "no_speech_prob": 0.008968177251517773}, {"id": 247, "seek": 158528, "start": 1602.32, "end": 1606.32, "text": " Because remember this one was all the ones without twos.", "tokens": [51216, 1436, 1604, 341, 472, 390, 439, 264, 2306, 1553, 683, 329, 13, 51416], "temperature": 0.0, "avg_logprob": -0.1377558624535276, "compression_ratio": 1.7445887445887447, "no_speech_prob": 0.008968177251517773}, {"id": 248, "seek": 158528, "start": 1606.32, "end": 1609.32, "text": " This is cases where there's a one and a two together.", "tokens": [51416, 639, 307, 3331, 689, 456, 311, 257, 472, 293, 257, 732, 1214, 13, 51566], "temperature": 0.0, "avg_logprob": -0.1377558624535276, "compression_ratio": 1.7445887445887447, "no_speech_prob": 0.008968177251517773}, {"id": 249, "seek": 158528, "start": 1609.32, "end": 1612.32, "text": " Three has a one and two together, five does not,", "tokens": [51566, 6244, 575, 257, 472, 293, 732, 1214, 11, 1732, 775, 406, 11, 51716], "temperature": 0.0, "avg_logprob": -0.1377558624535276, "compression_ratio": 1.7445887445887447, "no_speech_prob": 0.008968177251517773}, {"id": 250, "seek": 161232, "start": 1612.36, "end": 1616.36, "text": " six has a one and two together, seven, eight, eleven and twelve do not.", "tokens": [50366, 2309, 575, 257, 472, 293, 732, 1214, 11, 3407, 11, 3180, 11, 21090, 293, 14390, 360, 406, 13, 50566], "temperature": 0.0, "avg_logprob": -0.17046890939985002, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.0014096221420913935}, {"id": 251, "seek": 161232, "start": 1616.36, "end": 1620.36, "text": " So that's intersect.", "tokens": [50566, 407, 300, 311, 27815, 13, 50766], "temperature": 0.0, "avg_logprob": -0.17046890939985002, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.0014096221420913935}, {"id": 252, "seek": 161232, "start": 1620.36, "end": 1624.36, "text": " Any questions?", "tokens": [50766, 2639, 1651, 30, 50966], "temperature": 0.0, "avg_logprob": -0.17046890939985002, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.0014096221420913935}, {"id": 253, "seek": 161232, "start": 1624.36, "end": 1628.36, "text": " Materialize, this was an interesting one.", "tokens": [50966, 29160, 1125, 11, 341, 390, 364, 1880, 472, 13, 51166], "temperature": 0.0, "avg_logprob": -0.17046890939985002, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.0014096221420913935}, {"id": 254, "seek": 161232, "start": 1628.36, "end": 1631.36, "text": " I had trouble kind of understanding what this was,", "tokens": [51166, 286, 632, 5253, 733, 295, 3701, 437, 341, 390, 11, 51316], "temperature": 0.0, "avg_logprob": -0.17046890939985002, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.0014096221420913935}, {"id": 255, "seek": 161232, "start": 1631.36, "end": 1635.36, "text": " because materialize to me, there's like a materialize command,", "tokens": [51316, 570, 2527, 1125, 281, 385, 11, 456, 311, 411, 257, 2527, 1125, 5622, 11, 51516], "temperature": 0.0, "avg_logprob": -0.17046890939985002, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.0014096221420913935}, {"id": 256, "seek": 161232, "start": 1635.36, "end": 1639.36, "text": " SQL command, like for materialize views.", "tokens": [51516, 19200, 5622, 11, 411, 337, 2527, 1125, 6809, 13, 51716], "temperature": 0.0, "avg_logprob": -0.17046890939985002, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.0014096221420913935}, {"id": 257, "seek": 163936, "start": 1639.3999999999999, "end": 1642.3999999999999, "text": " That's what I thought, is it that?", "tokens": [50366, 663, 311, 437, 286, 1194, 11, 307, 309, 300, 30, 50516], "temperature": 0.0, "avg_logprob": -0.19507307164809284, "compression_ratio": 1.5534883720930233, "no_speech_prob": 0.004463926889002323}, {"id": 258, "seek": 163936, "start": 1642.3999999999999, "end": 1645.3999999999999, "text": " Again, we're reusing terms quite a bit here.", "tokens": [50516, 3764, 11, 321, 434, 319, 7981, 2115, 1596, 257, 857, 510, 13, 50666], "temperature": 0.0, "avg_logprob": -0.19507307164809284, "compression_ratio": 1.5534883720930233, "no_speech_prob": 0.004463926889002323}, {"id": 259, "seek": 163936, "start": 1645.3999999999999, "end": 1649.3999999999999, "text": " So what we have is a query that's selection small,", "tokens": [50666, 407, 437, 321, 362, 307, 257, 14581, 300, 311, 9450, 1359, 11, 50866], "temperature": 0.0, "avg_logprob": -0.19507307164809284, "compression_ratio": 1.5534883720930233, "no_speech_prob": 0.004463926889002323}, {"id": 260, "seek": 163936, "start": 1649.3999999999999, "end": 1653.3999999999999, "text": " and it also selects from a copy of itself,", "tokens": [50866, 293, 309, 611, 3048, 82, 490, 257, 5055, 295, 2564, 11, 51066], "temperature": 0.0, "avg_logprob": -0.19507307164809284, "compression_ratio": 1.5534883720930233, "no_speech_prob": 0.004463926889002323}, {"id": 261, "seek": 163936, "start": 1653.3999999999999, "end": 1656.3999999999999, "text": " but again, the optimizer doesn't know this.", "tokens": [51066, 457, 797, 11, 264, 5028, 6545, 1177, 380, 458, 341, 13, 51216], "temperature": 0.0, "avg_logprob": -0.19507307164809284, "compression_ratio": 1.5534883720930233, "no_speech_prob": 0.004463926889002323}, {"id": 262, "seek": 163936, "start": 1656.3999999999999, "end": 1660.3999999999999, "text": " And we're doing a very weird comparison here,", "tokens": [51216, 400, 321, 434, 884, 257, 588, 3657, 9660, 510, 11, 51416], "temperature": 0.0, "avg_logprob": -0.19507307164809284, "compression_ratio": 1.5534883720930233, "no_speech_prob": 0.004463926889002323}, {"id": 263, "seek": 163936, "start": 1660.3999999999999, "end": 1663.3999999999999, "text": " we're doing a not equals.", "tokens": [51416, 321, 434, 884, 257, 406, 6915, 13, 51566], "temperature": 0.0, "avg_logprob": -0.19507307164809284, "compression_ratio": 1.5534883720930233, "no_speech_prob": 0.004463926889002323}, {"id": 264, "seek": 163936, "start": 1663.3999999999999, "end": 1666.3999999999999, "text": " As you imagine, equals is really easy to do,", "tokens": [51566, 1018, 291, 3811, 11, 6915, 307, 534, 1858, 281, 360, 11, 51716], "temperature": 0.0, "avg_logprob": -0.19507307164809284, "compression_ratio": 1.5534883720930233, "no_speech_prob": 0.004463926889002323}, {"id": 265, "seek": 166640, "start": 1666.44, "end": 1669.44, "text": " not equals is kind of awkward.", "tokens": [50366, 406, 6915, 307, 733, 295, 11411, 13, 50516], "temperature": 0.0, "avg_logprob": -0.1222646821219966, "compression_ratio": 1.6875, "no_speech_prob": 0.001698255306109786}, {"id": 266, "seek": 166640, "start": 1669.44, "end": 1672.44, "text": " So what we end up doing, and I know this is kind of weird,", "tokens": [50516, 407, 437, 321, 917, 493, 884, 11, 293, 286, 458, 341, 307, 733, 295, 3657, 11, 50666], "temperature": 0.0, "avg_logprob": -0.1222646821219966, "compression_ratio": 1.6875, "no_speech_prob": 0.001698255306109786}, {"id": 267, "seek": 166640, "start": 1672.44, "end": 1675.44, "text": " we basically take the inner side,", "tokens": [50666, 321, 1936, 747, 264, 7284, 1252, 11, 50816], "temperature": 0.0, "avg_logprob": -0.1222646821219966, "compression_ratio": 1.6875, "no_speech_prob": 0.001698255306109786}, {"id": 268, "seek": 166640, "start": 1675.44, "end": 1680.44, "text": " and we actually create a memory copy of it.", "tokens": [50816, 293, 321, 767, 1884, 257, 4675, 5055, 295, 309, 13, 51066], "temperature": 0.0, "avg_logprob": -0.1222646821219966, "compression_ratio": 1.6875, "no_speech_prob": 0.001698255306109786}, {"id": 269, "seek": 166640, "start": 1680.44, "end": 1684.44, "text": " So we load the matching rows, remember this is a small table,", "tokens": [51066, 407, 321, 3677, 264, 14324, 13241, 11, 1604, 341, 307, 257, 1359, 3199, 11, 51266], "temperature": 0.0, "avg_logprob": -0.1222646821219966, "compression_ratio": 1.6875, "no_speech_prob": 0.001698255306109786}, {"id": 270, "seek": 166640, "start": 1684.44, "end": 1688.44, "text": " in fact it says literally small, we know it's a small table.", "tokens": [51266, 294, 1186, 309, 1619, 3736, 1359, 11, 321, 458, 309, 311, 257, 1359, 3199, 13, 51466], "temperature": 0.0, "avg_logprob": -0.1222646821219966, "compression_ratio": 1.6875, "no_speech_prob": 0.001698255306109786}, {"id": 271, "seek": 166640, "start": 1688.44, "end": 1691.44, "text": " And it just loads that into memory,", "tokens": [51466, 400, 309, 445, 12668, 300, 666, 4675, 11, 51616], "temperature": 0.0, "avg_logprob": -0.1222646821219966, "compression_ratio": 1.6875, "no_speech_prob": 0.001698255306109786}, {"id": 272, "seek": 166640, "start": 1691.44, "end": 1695.44, "text": " so we can do the not equal comparison much quicker,", "tokens": [51616, 370, 321, 393, 360, 264, 406, 2681, 9660, 709, 16255, 11, 51816], "temperature": 0.0, "avg_logprob": -0.1222646821219966, "compression_ratio": 1.6875, "no_speech_prob": 0.001698255306109786}, {"id": 273, "seek": 169544, "start": 1695.48, "end": 1699.48, "text": " than it could if it had to read them out of shared buffers.", "tokens": [50366, 813, 309, 727, 498, 309, 632, 281, 1401, 552, 484, 295, 5507, 9204, 433, 13, 50566], "temperature": 0.0, "avg_logprob": -0.10733567192440942, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.0026684605982154608}, {"id": 274, "seek": 169544, "start": 1699.48, "end": 1702.48, "text": " That's all it's really doing.", "tokens": [50566, 663, 311, 439, 309, 311, 534, 884, 13, 50716], "temperature": 0.0, "avg_logprob": -0.10733567192440942, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.0026684605982154608}, {"id": 275, "seek": 169544, "start": 1702.48, "end": 1707.48, "text": " It knows because we're going to be hitting this thing", "tokens": [50716, 467, 3255, 570, 321, 434, 516, 281, 312, 8850, 341, 551, 50966], "temperature": 0.0, "avg_logprob": -0.10733567192440942, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.0026684605982154608}, {"id": 276, "seek": 169544, "start": 1707.48, "end": 1710.48, "text": " over and over and over again for not equals,", "tokens": [50966, 670, 293, 670, 293, 670, 797, 337, 406, 6915, 11, 51116], "temperature": 0.0, "avg_logprob": -0.10733567192440942, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.0026684605982154608}, {"id": 277, "seek": 169544, "start": 1710.48, "end": 1712.48, "text": " we don't want to keep hitting the shared buffers,", "tokens": [51116, 321, 500, 380, 528, 281, 1066, 8850, 264, 5507, 9204, 433, 11, 51216], "temperature": 0.0, "avg_logprob": -0.10733567192440942, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.0026684605982154608}, {"id": 278, "seek": 169544, "start": 1712.48, "end": 1714.48, "text": " so we just bring it in, bring a copy in,", "tokens": [51216, 370, 321, 445, 1565, 309, 294, 11, 1565, 257, 5055, 294, 11, 51316], "temperature": 0.0, "avg_logprob": -0.10733567192440942, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.0026684605982154608}, {"id": 279, "seek": 169544, "start": 1714.48, "end": 1718.48, "text": " and we effectively just do a bazillion comparisons", "tokens": [51316, 293, 321, 8659, 445, 360, 257, 27147, 11836, 33157, 51516], "temperature": 0.0, "avg_logprob": -0.10733567192440942, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.0026684605982154608}, {"id": 280, "seek": 169544, "start": 1718.48, "end": 1722.48, "text": " on our local copy of this very small table.", "tokens": [51516, 322, 527, 2654, 5055, 295, 341, 588, 1359, 3199, 13, 51716], "temperature": 0.0, "avg_logprob": -0.10733567192440942, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.0026684605982154608}, {"id": 281, "seek": 172248, "start": 1722.52, "end": 1727.52, "text": " Memo-wise is a weird one,", "tokens": [50366, 8731, 78, 12, 3711, 307, 257, 3657, 472, 11, 50616], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 282, "seek": 172248, "start": 1727.52, "end": 1731.52, "text": " that was at I believe in 14, I think, somebody?", "tokens": [50616, 300, 390, 412, 286, 1697, 294, 3499, 11, 286, 519, 11, 2618, 30, 50816], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 283, "seek": 172248, "start": 1731.52, "end": 1733.52, "text": " Yes sir.", "tokens": [50816, 1079, 4735, 13, 50916], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 284, "seek": 172248, "start": 1733.52, "end": 1735.52, "text": " Sorry, what was the phone number?", "tokens": [50916, 4919, 11, 437, 390, 264, 2593, 1230, 30, 51016], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 285, "seek": 172248, "start": 1735.52, "end": 1736.52, "text": " Yeah.", "tokens": [51016, 865, 13, 51066], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 286, "seek": 172248, "start": 1736.52, "end": 1739.52, "text": " The local memory, is it a working memory set?", "tokens": [51066, 440, 2654, 4675, 11, 307, 309, 257, 1364, 4675, 992, 30, 51216], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 287, "seek": 172248, "start": 1739.52, "end": 1744.52, "text": " Yeah, this would be your working workman.", "tokens": [51216, 865, 11, 341, 576, 312, 428, 1364, 589, 1601, 13, 51466], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 288, "seek": 172248, "start": 1744.52, "end": 1746.52, "text": " Could be, yeah.", "tokens": [51466, 7497, 312, 11, 1338, 13, 51566], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 289, "seek": 172248, "start": 1746.52, "end": 1748.52, "text": " So if I cranked up my workman, would a...", "tokens": [51566, 407, 498, 286, 21263, 292, 493, 452, 589, 1601, 11, 576, 257, 485, 51666], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 290, "seek": 172248, "start": 1748.52, "end": 1749.52, "text": " Would you work...", "tokens": [51666, 6068, 291, 589, 485, 51716], "temperature": 0.0, "avg_logprob": -0.410257453918457, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.006776304449886084}, {"id": 291, "seek": 174952, "start": 1749.56, "end": 1751.56, "text": " So the question is if you cranked up workman,", "tokens": [50366, 407, 264, 1168, 307, 498, 291, 21263, 292, 493, 589, 1601, 11, 50466], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 292, "seek": 174952, "start": 1751.56, "end": 1755.56, "text": " would you be more likely to do materialize?", "tokens": [50466, 576, 291, 312, 544, 3700, 281, 360, 2527, 1125, 30, 50666], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 293, "seek": 174952, "start": 1755.56, "end": 1758.56, "text": " Maybe, yeah, I could maybe.", "tokens": [50666, 2704, 11, 1338, 11, 286, 727, 1310, 13, 50816], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 294, "seek": 174952, "start": 1758.56, "end": 1759.56, "text": " I think so.", "tokens": [50816, 286, 519, 370, 13, 50866], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 295, "seek": 174952, "start": 1759.56, "end": 1761.56, "text": " Give it a try, yeah.", "tokens": [50866, 5303, 309, 257, 853, 11, 1338, 13, 50966], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 296, "seek": 174952, "start": 1761.56, "end": 1764.56, "text": " Okay, Memo-wise was introduced...", "tokens": [50966, 1033, 11, 8731, 78, 12, 3711, 390, 7268, 485, 51116], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 297, "seek": 174952, "start": 1764.56, "end": 1766.56, "text": " Memo-wise is a weird term to me,", "tokens": [51116, 8731, 78, 12, 3711, 307, 257, 3657, 1433, 281, 385, 11, 51216], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 298, "seek": 174952, "start": 1766.56, "end": 1770.56, "text": " like it's a memo, it's like a letter,", "tokens": [51216, 411, 309, 311, 257, 35900, 11, 309, 311, 411, 257, 5063, 11, 51416], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 299, "seek": 174952, "start": 1770.56, "end": 1771.56, "text": " like what is it, right?", "tokens": [51416, 411, 437, 307, 309, 11, 558, 30, 51466], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 300, "seek": 174952, "start": 1771.56, "end": 1776.56, "text": " It turns out that Memo-wise is the sort of academic term", "tokens": [51466, 467, 4523, 484, 300, 8731, 78, 12, 3711, 307, 264, 1333, 295, 7778, 1433, 51716], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 301, "seek": 174952, "start": 1776.56, "end": 1778.56, "text": " for this thing, and I'll explain what this thing is.", "tokens": [51716, 337, 341, 551, 11, 293, 286, 603, 2903, 437, 341, 551, 307, 13, 51816], "temperature": 0.0, "avg_logprob": -0.1681903518793237, "compression_ratio": 1.6141078838174274, "no_speech_prob": 0.0007296266849152744}, {"id": 302, "seek": 177856, "start": 1778.6, "end": 1780.6, "text": " But that's how we got the word Memo-wise.", "tokens": [50366, 583, 300, 311, 577, 321, 658, 264, 1349, 8731, 78, 12, 3711, 13, 50466], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 303, "seek": 177856, "start": 1780.6, "end": 1783.6, "text": " We had a long discussion about what to call this,", "tokens": [50466, 492, 632, 257, 938, 5017, 466, 437, 281, 818, 341, 11, 50616], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 304, "seek": 177856, "start": 1783.6, "end": 1786.6, "text": " and somebody said, oh, that's Memo-wise.", "tokens": [50616, 293, 2618, 848, 11, 1954, 11, 300, 311, 8731, 78, 12, 3711, 13, 50766], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 305, "seek": 177856, "start": 1786.6, "end": 1788.6, "text": " And we're like, what do you mean that's Memo-wise?", "tokens": [50766, 400, 321, 434, 411, 11, 437, 360, 291, 914, 300, 311, 8731, 78, 12, 3711, 30, 50866], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 306, "seek": 177856, "start": 1788.6, "end": 1790.6, "text": " And they sent us some academic paper,", "tokens": [50866, 400, 436, 2279, 505, 512, 7778, 3035, 11, 50966], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 307, "seek": 177856, "start": 1790.6, "end": 1792.6, "text": " and they're like, oh, okay, that's what it is.", "tokens": [50966, 293, 436, 434, 411, 11, 1954, 11, 1392, 11, 300, 311, 437, 309, 307, 13, 51066], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 308, "seek": 177856, "start": 1792.6, "end": 1794.6, "text": " All right, so let's take a look at what Memo-wise is.", "tokens": [51066, 1057, 558, 11, 370, 718, 311, 747, 257, 574, 412, 437, 8731, 78, 12, 3711, 307, 13, 51166], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 309, "seek": 177856, "start": 1794.6, "end": 1796.6, "text": " So it's kind of hard to set up,", "tokens": [51166, 407, 309, 311, 733, 295, 1152, 281, 992, 493, 11, 51266], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 310, "seek": 177856, "start": 1796.6, "end": 1802.6, "text": " I need to create a table with duplicates", "tokens": [51266, 286, 643, 281, 1884, 257, 3199, 365, 17154, 1024, 51566], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 311, "seek": 177856, "start": 1802.6, "end": 1806.6, "text": " that also is too small to make sense for a hash joint.", "tokens": [51566, 300, 611, 307, 886, 1359, 281, 652, 2020, 337, 257, 22019, 7225, 13, 51766], "temperature": 0.0, "avg_logprob": -0.11577002856196189, "compression_ratio": 1.6981132075471699, "no_speech_prob": 0.004129215143620968}, {"id": 312, "seek": 180660, "start": 1806.6399999999999, "end": 1809.6399999999999, "text": " I know that's like a big word, a lot of words.", "tokens": [50366, 286, 458, 300, 311, 411, 257, 955, 1349, 11, 257, 688, 295, 2283, 13, 50516], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 313, "seek": 180660, "start": 1809.6399999999999, "end": 1813.6399999999999, "text": " But effectively, what I have here", "tokens": [50516, 583, 8659, 11, 437, 286, 362, 510, 50716], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 314, "seek": 180660, "start": 1813.6399999999999, "end": 1815.6399999999999, "text": " is I'm going to do a join,", "tokens": [50716, 307, 286, 478, 516, 281, 360, 257, 3917, 11, 50816], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 315, "seek": 180660, "start": 1815.6399999999999, "end": 1819.6399999999999, "text": " and I have a small table,", "tokens": [50816, 293, 286, 362, 257, 1359, 3199, 11, 51016], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 316, "seek": 180660, "start": 1819.6399999999999, "end": 1821.6399999999999, "text": " but it's not big enough to hash it,", "tokens": [51016, 457, 309, 311, 406, 955, 1547, 281, 22019, 309, 11, 51116], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 317, "seek": 180660, "start": 1821.6399999999999, "end": 1823.6399999999999, "text": " because hashing is expensive.", "tokens": [51116, 570, 575, 571, 307, 5124, 13, 51216], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 318, "seek": 180660, "start": 1823.6399999999999, "end": 1826.6399999999999, "text": " And I need something that's too big", "tokens": [51216, 400, 286, 643, 746, 300, 311, 886, 955, 51366], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 319, "seek": 180660, "start": 1826.6399999999999, "end": 1828.6399999999999, "text": " for a hash joint on the other side.", "tokens": [51366, 337, 257, 22019, 7225, 322, 264, 661, 1252, 13, 51466], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 320, "seek": 180660, "start": 1828.6399999999999, "end": 1831.6399999999999, "text": " So it sounds like the requirements", "tokens": [51466, 407, 309, 3263, 411, 264, 7728, 51616], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 321, "seek": 180660, "start": 1831.6399999999999, "end": 1833.6399999999999, "text": " for this thing almost never happened,", "tokens": [51616, 337, 341, 551, 1920, 1128, 2011, 11, 51716], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 322, "seek": 180660, "start": 1833.6399999999999, "end": 1835.6399999999999, "text": " but it turns out that Memo-wise has a lot of things.", "tokens": [51716, 457, 309, 4523, 484, 300, 8731, 78, 12, 3711, 575, 257, 688, 295, 721, 13, 51816], "temperature": 0.0, "avg_logprob": -0.18854904174804688, "compression_ratio": 1.640495867768595, "no_speech_prob": 0.005380365066230297}, {"id": 323, "seek": 183564, "start": 1835.68, "end": 1837.68, "text": " But Memo-wise happens all the time.", "tokens": [50366, 583, 8731, 78, 12, 3711, 2314, 439, 264, 565, 13, 50466], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 324, "seek": 183564, "start": 1837.68, "end": 1839.68, "text": " I don't know why,", "tokens": [50466, 286, 500, 380, 458, 983, 11, 50566], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 325, "seek": 183564, "start": 1839.68, "end": 1841.68, "text": " but when I read the description", "tokens": [50566, 457, 562, 286, 1401, 264, 3855, 50666], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 326, "seek": 183564, "start": 1841.68, "end": 1843.68, "text": " and when it's important, I was like,", "tokens": [50666, 293, 562, 309, 311, 1021, 11, 286, 390, 411, 11, 50766], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 327, "seek": 183564, "start": 1843.68, "end": 1845.68, "text": " pfft, nobody's ever going to use this thing.", "tokens": [50766, 280, 602, 83, 11, 5079, 311, 1562, 516, 281, 764, 341, 551, 13, 50866], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 328, "seek": 183564, "start": 1845.68, "end": 1848.68, "text": " But it turns out that it actually gets used quite a bit", "tokens": [50866, 583, 309, 4523, 484, 300, 309, 767, 2170, 1143, 1596, 257, 857, 51016], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 329, "seek": 183564, "start": 1848.68, "end": 1851.68, "text": " in real-world applications.", "tokens": [51016, 294, 957, 12, 13217, 5821, 13, 51166], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 330, "seek": 183564, "start": 1851.68, "end": 1854.68, "text": " But again, it's a case where we have a lot of duplicates,", "tokens": [51166, 583, 797, 11, 309, 311, 257, 1389, 689, 321, 362, 257, 688, 295, 17154, 1024, 11, 51316], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 331, "seek": 183564, "start": 1854.68, "end": 1856.68, "text": " something's really big,", "tokens": [51316, 746, 311, 534, 955, 11, 51416], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 332, "seek": 183564, "start": 1856.68, "end": 1859.68, "text": " something's really small, so you can memo-wise it,", "tokens": [51416, 746, 311, 534, 1359, 11, 370, 291, 393, 35900, 12, 3711, 309, 11, 51566], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 333, "seek": 183564, "start": 1859.68, "end": 1861.68, "text": " and something's really big,", "tokens": [51566, 293, 746, 311, 534, 955, 11, 51666], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 334, "seek": 183564, "start": 1861.68, "end": 1863.68, "text": " meaning you're going to do a lot of comparisons.", "tokens": [51666, 3620, 291, 434, 516, 281, 360, 257, 688, 295, 33157, 13, 51766], "temperature": 0.0, "avg_logprob": -0.12313172476632255, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0014740844490006566}, {"id": 335, "seek": 186368, "start": 1863.72, "end": 1865.72, "text": " So we have an index on the Memo-wise field.", "tokens": [50366, 407, 321, 362, 364, 8186, 322, 264, 8731, 78, 12, 3711, 2519, 13, 50466], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 336, "seek": 186368, "start": 1865.72, "end": 1867.72, "text": " So here's the query we select", "tokens": [50466, 407, 510, 311, 264, 14581, 321, 3048, 50566], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 337, "seek": 186368, "start": 1867.72, "end": 1869.72, "text": " from small with dupes,", "tokens": [50566, 490, 1359, 365, 274, 1010, 279, 11, 50666], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 338, "seek": 186368, "start": 1869.72, "end": 1871.72, "text": " and we join it to a medium table.", "tokens": [50666, 293, 321, 3917, 309, 281, 257, 6399, 3199, 13, 50766], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 339, "seek": 186368, "start": 1871.72, "end": 1873.72, "text": " And here you see the Memo-wise clause right here.", "tokens": [50766, 400, 510, 291, 536, 264, 8731, 78, 12, 3711, 25925, 558, 510, 13, 50866], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 340, "seek": 186368, "start": 1873.72, "end": 1875.72, "text": " If you're curious, this blog post right here", "tokens": [50866, 759, 291, 434, 6369, 11, 341, 6968, 2183, 558, 510, 50966], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 341, "seek": 186368, "start": 1875.72, "end": 1878.72, "text": " does a great job of explaining Memo-wise,", "tokens": [50966, 775, 257, 869, 1691, 295, 13468, 8731, 78, 12, 3711, 11, 51116], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 342, "seek": 186368, "start": 1878.72, "end": 1880.72, "text": " and you can see right here,", "tokens": [51116, 293, 291, 393, 536, 558, 510, 11, 51216], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 343, "seek": 186368, "start": 1880.72, "end": 1883.72, "text": " Postgres 14 is the release", "tokens": [51216, 10223, 45189, 3499, 307, 264, 4374, 51366], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 344, "seek": 186368, "start": 1883.72, "end": 1885.72, "text": " that that was added in,", "tokens": [51366, 300, 300, 390, 3869, 294, 11, 51466], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 345, "seek": 186368, "start": 1885.72, "end": 1887.72, "text": " because that says Postgres 14 right there.", "tokens": [51466, 570, 300, 1619, 10223, 45189, 3499, 558, 456, 13, 51566], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 346, "seek": 186368, "start": 1887.72, "end": 1889.72, "text": " 14 later, right there.", "tokens": [51566, 3499, 1780, 11, 558, 456, 13, 51666], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 347, "seek": 186368, "start": 1889.72, "end": 1891.72, "text": " All right, so what does Memo-wise do?", "tokens": [51666, 1057, 558, 11, 370, 437, 775, 8731, 78, 12, 3711, 360, 30, 51766], "temperature": 0.0, "avg_logprob": -0.13816996415456137, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.03887372463941574}, {"id": 348, "seek": 189172, "start": 1891.76, "end": 1895.76, "text": " It basically creates a local memory cache", "tokens": [50366, 467, 1936, 7829, 257, 2654, 4675, 19459, 50566], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 349, "seek": 189172, "start": 1895.76, "end": 1899.76, "text": " of the table you're joining to.", "tokens": [50566, 295, 264, 3199, 291, 434, 5549, 281, 13, 50766], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 350, "seek": 189172, "start": 1899.76, "end": 1901.76, "text": " So basically it's a case where", "tokens": [50766, 407, 1936, 309, 311, 257, 1389, 689, 50866], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 351, "seek": 189172, "start": 1901.76, "end": 1903.76, "text": " I know I have a lot of duplicates here.", "tokens": [50866, 286, 458, 286, 362, 257, 688, 295, 17154, 1024, 510, 13, 50966], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 352, "seek": 189172, "start": 1903.76, "end": 1905.76, "text": " So here's, like, this is duplicate of that,", "tokens": [50966, 407, 510, 311, 11, 411, 11, 341, 307, 23976, 295, 300, 11, 51066], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 353, "seek": 189172, "start": 1905.76, "end": 1907.76, "text": " this is duplicate of that, so forth.", "tokens": [51066, 341, 307, 23976, 295, 300, 11, 370, 5220, 13, 51166], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 354, "seek": 189172, "start": 1907.76, "end": 1909.76, "text": " So I know I have a lot of duplicates,", "tokens": [51166, 407, 286, 458, 286, 362, 257, 688, 295, 17154, 1024, 11, 51266], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 355, "seek": 189172, "start": 1909.76, "end": 1911.76, "text": " so I know I'm going to be hitting", "tokens": [51266, 370, 286, 458, 286, 478, 516, 281, 312, 8850, 51366], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 356, "seek": 189172, "start": 1911.76, "end": 1913.76, "text": " the cache over and over again.", "tokens": [51366, 264, 19459, 670, 293, 670, 797, 13, 51466], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 357, "seek": 189172, "start": 1913.76, "end": 1915.76, "text": " Right?", "tokens": [51466, 1779, 30, 51566], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 358, "seek": 189172, "start": 1915.76, "end": 1917.76, "text": " So I'm going to be hitting", "tokens": [51566, 407, 286, 478, 516, 281, 312, 8850, 51666], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 359, "seek": 189172, "start": 1917.76, "end": 1919.76, "text": " the cache over and over again.", "tokens": [51666, 264, 19459, 670, 293, 670, 797, 13, 51766], "temperature": 0.0, "avg_logprob": -0.2378900264336811, "compression_ratio": 2.135869565217391, "no_speech_prob": 0.0043184650130569935}, {"id": 360, "seek": 191976, "start": 1919.8, "end": 1921.8, "text": " Right?", "tokens": [50366, 1779, 30, 50466], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 361, "seek": 191976, "start": 1921.8, "end": 1924.8, "text": " So instead of doing what potentially could be", "tokens": [50466, 407, 2602, 295, 884, 437, 7263, 727, 312, 50616], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 362, "seek": 191976, "start": 1924.8, "end": 1927.8, "text": " an index lookup", "tokens": [50616, 364, 8186, 574, 1010, 50766], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 363, "seek": 191976, "start": 1927.8, "end": 1929.8, "text": " over and over again", "tokens": [50766, 670, 293, 670, 797, 50866], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 364, "seek": 191976, "start": 1929.8, "end": 1931.8, "text": " into the index,", "tokens": [50866, 666, 264, 8186, 11, 50966], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 365, "seek": 191976, "start": 1931.8, "end": 1934.8, "text": " I create a cache.", "tokens": [50966, 286, 1884, 257, 19459, 13, 51116], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 366, "seek": 191976, "start": 1934.8, "end": 1936.8, "text": " And I basically say, okay, is this a match?", "tokens": [51116, 400, 286, 1936, 584, 11, 1392, 11, 307, 341, 257, 2995, 30, 51216], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 367, "seek": 191976, "start": 1936.8, "end": 1939.8, "text": " If it is, then I can say that's a join.", "tokens": [51216, 759, 309, 307, 11, 550, 286, 393, 584, 300, 311, 257, 3917, 13, 51366], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 368, "seek": 191976, "start": 1939.8, "end": 1942.8, "text": " If it isn't, then I've got to go over here", "tokens": [51366, 759, 309, 1943, 380, 11, 550, 286, 600, 658, 281, 352, 670, 510, 51516], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 369, "seek": 191976, "start": 1942.8, "end": 1946.8, "text": " and check and refresh and make sure it's okay.", "tokens": [51516, 293, 1520, 293, 15134, 293, 652, 988, 309, 311, 1392, 13, 51716], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 370, "seek": 191976, "start": 1946.8, "end": 1948.8, "text": " It also has a negative cache.", "tokens": [51716, 467, 611, 575, 257, 3671, 19459, 13, 51816], "temperature": 0.0, "avg_logprob": -0.13862524299978096, "compression_ratio": 1.5748792270531402, "no_speech_prob": 0.0027115540578961372}, {"id": 371, "seek": 194880, "start": 1948.84, "end": 1950.84, "text": " I'm not showing that, but there's a cache of stuff", "tokens": [50366, 286, 478, 406, 4099, 300, 11, 457, 456, 311, 257, 19459, 295, 1507, 50466], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 372, "seek": 194880, "start": 1950.84, "end": 1953.84, "text": " that isn't there as well, which I'm not going to show you.", "tokens": [50466, 300, 1943, 380, 456, 382, 731, 11, 597, 286, 478, 406, 516, 281, 855, 291, 13, 50616], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 373, "seek": 194880, "start": 1953.84, "end": 1956.84, "text": " So the point of Memo-wise here,", "tokens": [50616, 407, 264, 935, 295, 8731, 78, 12, 3711, 510, 11, 50766], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 374, "seek": 194880, "start": 1956.84, "end": 1959.84, "text": " it's right here, inner-side lookups that return no-os", "tokens": [50766, 309, 311, 558, 510, 11, 7284, 12, 1812, 574, 7528, 300, 2736, 572, 12, 329, 50916], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 375, "seek": 194880, "start": 1959.84, "end": 1961.84, "text": " are also recorded in the cache.", "tokens": [50916, 366, 611, 8287, 294, 264, 19459, 13, 51016], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 376, "seek": 194880, "start": 1961.84, "end": 1963.84, "text": " So my point is that when you're going to do", "tokens": [51016, 407, 452, 935, 307, 300, 562, 291, 434, 516, 281, 360, 51116], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 377, "seek": 194880, "start": 1963.84, "end": 1965.84, "text": " an index lookup over and over again,", "tokens": [51116, 364, 8186, 574, 1010, 670, 293, 670, 797, 11, 51216], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 378, "seek": 194880, "start": 1965.84, "end": 1967.84, "text": " because you have a lot of duplicates,", "tokens": [51216, 570, 291, 362, 257, 688, 295, 17154, 1024, 11, 51316], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 379, "seek": 194880, "start": 1967.84, "end": 1969.84, "text": " and you're going to be checking it over and over again,", "tokens": [51316, 293, 291, 434, 516, 281, 312, 8568, 309, 670, 293, 670, 797, 11, 51416], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 380, "seek": 194880, "start": 1969.84, "end": 1971.84, "text": " why don't we create a cache", "tokens": [51416, 983, 500, 380, 321, 1884, 257, 19459, 51516], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 381, "seek": 194880, "start": 1971.84, "end": 1973.84, "text": " so we can remember the index lookups,", "tokens": [51516, 370, 321, 393, 1604, 264, 8186, 574, 7528, 11, 51616], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 382, "seek": 194880, "start": 1973.84, "end": 1975.84, "text": " and we don't have to keep doing them.", "tokens": [51616, 293, 321, 500, 380, 362, 281, 1066, 884, 552, 13, 51716], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 383, "seek": 194880, "start": 1975.84, "end": 1977.84, "text": " But again, only in limited cases,", "tokens": [51716, 583, 797, 11, 787, 294, 5567, 3331, 11, 51816], "temperature": 0.0, "avg_logprob": -0.1522179921468099, "compression_ratio": 1.8620689655172413, "no_speech_prob": 0.0032175469677895308}, {"id": 384, "seek": 197784, "start": 1977.8799999999999, "end": 1980.8799999999999, "text": " table has to be small, has to be duplicates,", "tokens": [50366, 3199, 575, 281, 312, 1359, 11, 575, 281, 312, 17154, 1024, 11, 50516], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 385, "seek": 197784, "start": 1980.8799999999999, "end": 1982.8799999999999, "text": " has to be the inner-side,", "tokens": [50516, 575, 281, 312, 264, 7284, 12, 1812, 11, 50616], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 386, "seek": 197784, "start": 1982.8799999999999, "end": 1985.8799999999999, "text": " the Memo-wise side has to have an index,", "tokens": [50616, 264, 8731, 78, 12, 3711, 1252, 575, 281, 362, 364, 8186, 11, 50766], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 387, "seek": 197784, "start": 1985.8799999999999, "end": 1988.8799999999999, "text": " so we can refresh the cache when we need to.", "tokens": [50766, 370, 321, 393, 15134, 264, 19459, 562, 321, 643, 281, 13, 50916], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 388, "seek": 197784, "start": 1988.8799999999999, "end": 1991.8799999999999, "text": " That makes sense, it sounds like crazy.", "tokens": [50916, 663, 1669, 2020, 11, 309, 3263, 411, 3219, 13, 51066], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 389, "seek": 197784, "start": 1991.8799999999999, "end": 1994.8799999999999, "text": " I thought it sounded crazy, but it actually is really useful,", "tokens": [51066, 286, 1194, 309, 17714, 3219, 11, 457, 309, 767, 307, 534, 4420, 11, 51216], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 390, "seek": 197784, "start": 1994.8799999999999, "end": 1997.8799999999999, "text": " and it's kind of cool.", "tokens": [51216, 293, 309, 311, 733, 295, 1627, 13, 51366], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 391, "seek": 197784, "start": 1997.8799999999999, "end": 1999.8799999999999, "text": " So if you see Memo-wise in the future,", "tokens": [51366, 407, 498, 291, 536, 8731, 78, 12, 3711, 294, 264, 2027, 11, 51466], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 392, "seek": 197784, "start": 1999.8799999999999, "end": 2001.8799999999999, "text": " you'll be like, oh, that's kind of neat.", "tokens": [51466, 291, 603, 312, 411, 11, 1954, 11, 300, 311, 733, 295, 10654, 13, 51566], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 393, "seek": 197784, "start": 2001.8799999999999, "end": 2005.8799999999999, "text": " Okay, any questions?", "tokens": [51566, 1033, 11, 604, 1651, 30, 51766], "temperature": 0.0, "avg_logprob": -0.14711336935720137, "compression_ratio": 1.646551724137931, "no_speech_prob": 0.002974557224661112}, {"id": 394, "seek": 200588, "start": 2005.92, "end": 2009.92, "text": " Okay, let's launch into more of a section.", "tokens": [50366, 1033, 11, 718, 311, 4025, 666, 544, 295, 257, 3541, 13, 50566], "temperature": 0.0, "avg_logprob": -0.17641495014059133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0034243003465235233}, {"id": 395, "seek": 200588, "start": 2009.92, "end": 2013.92, "text": " Okay, I know we've kind of hit a bunch of sort of discrete topics.", "tokens": [50566, 1033, 11, 286, 458, 321, 600, 733, 295, 2045, 257, 3840, 295, 1333, 295, 27706, 8378, 13, 50766], "temperature": 0.0, "avg_logprob": -0.17641495014059133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0034243003465235233}, {"id": 396, "seek": 200588, "start": 2013.92, "end": 2016.92, "text": " I'm going to move into an area where we have some coherence.", "tokens": [50766, 286, 478, 516, 281, 1286, 666, 364, 1859, 689, 321, 362, 512, 26528, 655, 13, 50916], "temperature": 0.0, "avg_logprob": -0.17641495014059133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0034243003465235233}, {"id": 397, "seek": 200588, "start": 2016.92, "end": 2018.92, "text": " We kind of move through.", "tokens": [50916, 492, 733, 295, 1286, 807, 13, 51016], "temperature": 0.0, "avg_logprob": -0.17641495014059133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0034243003465235233}, {"id": 398, "seek": 200588, "start": 2018.92, "end": 2022.92, "text": " We're going to talk about grouping and aggregates now.", "tokens": [51016, 492, 434, 516, 281, 751, 466, 40149, 293, 16743, 1024, 586, 13, 51216], "temperature": 0.0, "avg_logprob": -0.17641495014059133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0034243003465235233}, {"id": 399, "seek": 200588, "start": 2022.92, "end": 2027.92, "text": " So here's a query where we do a join,", "tokens": [51216, 407, 510, 311, 257, 14581, 689, 321, 360, 257, 3917, 11, 51466], "temperature": 0.0, "avg_logprob": -0.17641495014059133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0034243003465235233}, {"id": 400, "seek": 200588, "start": 2027.92, "end": 2030.92, "text": " and we're saying x is less than 0, group by x.", "tokens": [51466, 293, 321, 434, 1566, 2031, 307, 1570, 813, 1958, 11, 1594, 538, 2031, 13, 51616], "temperature": 0.0, "avg_logprob": -0.17641495014059133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0034243003465235233}, {"id": 401, "seek": 200588, "start": 2030.92, "end": 2034.92, "text": " So I didn't know that you can do a group by", "tokens": [51616, 407, 286, 994, 380, 458, 300, 291, 393, 360, 257, 1594, 538, 51816], "temperature": 0.0, "avg_logprob": -0.17641495014059133, "compression_ratio": 1.6336206896551724, "no_speech_prob": 0.0034243003465235233}, {"id": 402, "seek": 203492, "start": 2034.96, "end": 2038.96, "text": " i when there's no aggregates in the query.", "tokens": [50366, 741, 562, 456, 311, 572, 16743, 1024, 294, 264, 14581, 13, 50566], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 403, "seek": 203492, "start": 2038.96, "end": 2042.96, "text": " I learned that in doing this presentation.", "tokens": [50566, 286, 3264, 300, 294, 884, 341, 5860, 13, 50766], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 404, "seek": 203492, "start": 2042.96, "end": 2046.96, "text": " I thought a group by always had to have some aggregates out here,", "tokens": [50766, 286, 1194, 257, 1594, 538, 1009, 632, 281, 362, 512, 16743, 1024, 484, 510, 11, 50966], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 405, "seek": 203492, "start": 2046.96, "end": 2049.96, "text": " but turns out it doesn't.", "tokens": [50966, 457, 4523, 484, 309, 1177, 380, 13, 51116], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 406, "seek": 203492, "start": 2049.96, "end": 2052.96, "text": " Basically removing, wearing, adding, what if I does the same thing?", "tokens": [51116, 8537, 12720, 11, 4769, 11, 5127, 11, 437, 498, 286, 775, 264, 912, 551, 30, 51266], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 407, "seek": 203492, "start": 2052.96, "end": 2054.96, "text": " So here's a group clause.", "tokens": [51266, 407, 510, 311, 257, 1594, 25925, 13, 51366], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 408, "seek": 203492, "start": 2054.96, "end": 2057.96, "text": " It's going to give me everything x less than 0.", "tokens": [51366, 467, 311, 516, 281, 976, 385, 1203, 2031, 1570, 813, 1958, 13, 51516], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 409, "seek": 203492, "start": 2057.96, "end": 2060.96, "text": " And all it does is it basically just removes the duplicates.", "tokens": [51516, 400, 439, 309, 775, 307, 309, 1936, 445, 30445, 264, 17154, 1024, 13, 51666], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 410, "seek": 203492, "start": 2060.96, "end": 2062.96, "text": " That's all the group does.", "tokens": [51666, 663, 311, 439, 264, 1594, 775, 13, 51766], "temperature": 0.0, "avg_logprob": -0.15792825118355128, "compression_ratio": 1.6748971193415638, "no_speech_prob": 0.0014986685710027814}, {"id": 411, "seek": 206296, "start": 2063.0, "end": 2065.0, "text": " It says okay, 1, 1.", "tokens": [50366, 467, 1619, 1392, 11, 502, 11, 502, 13, 50466], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 412, "seek": 206296, "start": 2065.0, "end": 2067.0, "text": " Okay, that comes across 1, 2.", "tokens": [50466, 1033, 11, 300, 1487, 2108, 502, 11, 568, 13, 50566], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 413, "seek": 206296, "start": 2067.0, "end": 2069.0, "text": " I got two of those.", "tokens": [50566, 286, 658, 732, 295, 729, 13, 50666], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 414, "seek": 206296, "start": 2069.0, "end": 2071.0, "text": " I'm only going to get one of those.", "tokens": [50666, 286, 478, 787, 516, 281, 483, 472, 295, 729, 13, 50766], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 415, "seek": 206296, "start": 2071.0, "end": 2073.0, "text": " For these I would go across.", "tokens": [50766, 1171, 613, 286, 576, 352, 2108, 13, 50866], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 416, "seek": 206296, "start": 2073.0, "end": 2075.0, "text": " I have three of these.", "tokens": [50866, 286, 362, 1045, 295, 613, 13, 50966], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 417, "seek": 206296, "start": 2075.0, "end": 2077.0, "text": " I get one of those.", "tokens": [50966, 286, 483, 472, 295, 729, 13, 51066], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 418, "seek": 206296, "start": 2077.0, "end": 2080.0, "text": " So again, group by with aggregates is similar to distinct,", "tokens": [51066, 407, 797, 11, 1594, 538, 365, 16743, 1024, 307, 2531, 281, 10644, 11, 51216], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 419, "seek": 206296, "start": 2080.0, "end": 2083.0, "text": " except duplicate detection can consider more columns", "tokens": [51216, 3993, 23976, 17784, 393, 1949, 544, 13766, 51366], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 420, "seek": 206296, "start": 2083.0, "end": 2085.0, "text": " than those selected in the output.", "tokens": [51366, 813, 729, 8209, 294, 264, 5598, 13, 51466], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 421, "seek": 206296, "start": 2085.0, "end": 2088.0, "text": " Again, I give you, that's an option for studying later,", "tokens": [51466, 3764, 11, 286, 976, 291, 11, 300, 311, 364, 3614, 337, 7601, 1780, 11, 51616], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 422, "seek": 206296, "start": 2088.0, "end": 2090.0, "text": " exactly what that means.", "tokens": [51616, 2293, 437, 300, 1355, 13, 51716], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 423, "seek": 206296, "start": 2090.0, "end": 2092.0, "text": " You can try it out and see how it works.", "tokens": [51716, 509, 393, 853, 309, 484, 293, 536, 577, 309, 1985, 13, 51816], "temperature": 0.0, "avg_logprob": -0.17340658702989564, "compression_ratio": 1.6336996336996337, "no_speech_prob": 0.00041716935811564326}, {"id": 424, "seek": 209200, "start": 2092.04, "end": 2095.04, "text": " You can do a group of a single column,", "tokens": [50366, 509, 393, 360, 257, 1594, 295, 257, 2167, 7738, 11, 50516], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 425, "seek": 209200, "start": 2095.04, "end": 2099.04, "text": " and that is actually a use for group alone.", "tokens": [50516, 293, 300, 307, 767, 257, 764, 337, 1594, 3312, 13, 50716], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 426, "seek": 209200, "start": 2099.04, "end": 2102.04, "text": " You notice I'm getting, notice I have,", "tokens": [50716, 509, 3449, 286, 478, 1242, 11, 3449, 286, 362, 11, 50866], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 427, "seek": 209200, "start": 2102.04, "end": 2105.04, "text": " these are not unique.", "tokens": [50866, 613, 366, 406, 3845, 13, 51016], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 428, "seek": 209200, "start": 2105.04, "end": 2109.04, "text": " Like this and this and this, these are different,", "tokens": [51016, 1743, 341, 293, 341, 293, 341, 11, 613, 366, 819, 11, 51216], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 429, "seek": 209200, "start": 2109.04, "end": 2112.04, "text": " but they all generate one output.", "tokens": [51216, 457, 436, 439, 8460, 472, 5598, 13, 51366], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 430, "seek": 209200, "start": 2112.04, "end": 2114.04, "text": " So it kind of trims off the one column.", "tokens": [51366, 407, 309, 733, 295, 10445, 82, 766, 264, 472, 7738, 13, 51466], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 431, "seek": 209200, "start": 2114.04, "end": 2116.04, "text": " I know it sounds really silly,", "tokens": [51466, 286, 458, 309, 3263, 534, 11774, 11, 51566], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 432, "seek": 209200, "start": 2116.04, "end": 2118.04, "text": " but there are actual use cases to this.", "tokens": [51566, 457, 456, 366, 3539, 764, 3331, 281, 341, 13, 51666], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 433, "seek": 209200, "start": 2118.04, "end": 2120.04, "text": " So all the ones get output,", "tokens": [51666, 407, 439, 264, 2306, 483, 5598, 11, 51766], "temperature": 0.0, "avg_logprob": -0.1131413486025749, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.001453856355510652}, {"id": 434, "seek": 212004, "start": 2120.08, "end": 2121.08, "text": " choose in the first column,", "tokens": [50366, 2826, 294, 264, 700, 7738, 11, 50416], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 435, "seek": 212004, "start": 2121.08, "end": 2123.08, "text": " get output, all the freeze get output.", "tokens": [50416, 483, 5598, 11, 439, 264, 15959, 483, 5598, 13, 50516], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 436, "seek": 212004, "start": 2123.08, "end": 2126.08, "text": " Aggregate, everyone's familiar with this,", "tokens": [50516, 41512, 3375, 473, 11, 1518, 311, 4963, 365, 341, 11, 50666], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 437, "seek": 212004, "start": 2126.08, "end": 2128.08, "text": " the count command, we have a node type for that,", "tokens": [50666, 264, 1207, 5622, 11, 321, 362, 257, 9984, 2010, 337, 300, 11, 50766], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 438, "seek": 212004, "start": 2128.08, "end": 2131.08, "text": " just called aggregate, very easy to predict.", "tokens": [50766, 445, 1219, 26118, 11, 588, 1858, 281, 6069, 13, 50916], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 439, "seek": 212004, "start": 2131.08, "end": 2133.08, "text": " Here's a group aggregate,", "tokens": [50916, 1692, 311, 257, 1594, 26118, 11, 51016], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 440, "seek": 212004, "start": 2133.08, "end": 2138.08, "text": " which would be a group by with account on top of it.", "tokens": [51016, 597, 576, 312, 257, 1594, 538, 365, 2696, 322, 1192, 295, 309, 13, 51266], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 441, "seek": 212004, "start": 2138.08, "end": 2142.08, "text": " So this is an aggregate, again, makes sense, right?", "tokens": [51266, 407, 341, 307, 364, 26118, 11, 797, 11, 1669, 2020, 11, 558, 30, 51466], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 442, "seek": 212004, "start": 2142.08, "end": 2145.08, "text": " We learned aggregate, we learned group.", "tokens": [51466, 492, 3264, 26118, 11, 321, 3264, 1594, 13, 51616], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 443, "seek": 212004, "start": 2145.08, "end": 2148.08, "text": " What do we call the node type when we have aggregate", "tokens": [51616, 708, 360, 321, 818, 264, 9984, 2010, 562, 321, 362, 26118, 51766], "temperature": 0.0, "avg_logprob": -0.18546330427923122, "compression_ratio": 1.7899159663865547, "no_speech_prob": 0.003070240840315819}, {"id": 444, "seek": 214808, "start": 2148.12, "end": 2149.12, "text": " and group together?", "tokens": [50366, 293, 1594, 1214, 30, 50416], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 445, "seek": 214808, "start": 2149.12, "end": 2151.12, "text": " Group aggregate, right, makes a lot of sense,", "tokens": [50416, 10500, 26118, 11, 558, 11, 1669, 257, 688, 295, 2020, 11, 50516], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 446, "seek": 214808, "start": 2151.12, "end": 2153.12, "text": " so that's what we call it.", "tokens": [50516, 370, 300, 311, 437, 321, 818, 309, 13, 50616], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 447, "seek": 214808, "start": 2153.12, "end": 2156.12, "text": " And group aggregate effectively outputs", "tokens": [50616, 400, 1594, 26118, 8659, 23930, 50766], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 448, "seek": 214808, "start": 2156.12, "end": 2159.12, "text": " the non-aggregate column once,", "tokens": [50766, 264, 2107, 12, 559, 11027, 473, 7738, 1564, 11, 50916], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 449, "seek": 214808, "start": 2159.12, "end": 2162.12, "text": " and just like the group by, which we talked about,", "tokens": [50916, 293, 445, 411, 264, 1594, 538, 11, 597, 321, 2825, 466, 11, 51066], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 450, "seek": 214808, "start": 2162.12, "end": 2164.12, "text": " and then instead, for the second column,", "tokens": [51066, 293, 550, 2602, 11, 337, 264, 1150, 7738, 11, 51166], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 451, "seek": 214808, "start": 2164.12, "end": 2168.12, "text": " it runs an aggregate across that second column, right,", "tokens": [51166, 309, 6676, 364, 26118, 2108, 300, 1150, 7738, 11, 558, 11, 51366], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 452, "seek": 214808, "start": 2168.12, "end": 2170.12, "text": " which is what we're all familiar with.", "tokens": [51366, 597, 307, 437, 321, 434, 439, 4963, 365, 13, 51466], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 453, "seek": 214808, "start": 2170.12, "end": 2173.12, "text": " Oh, why do I find networks are available?", "tokens": [51466, 876, 11, 983, 360, 286, 915, 9590, 366, 2435, 30, 51616], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 454, "seek": 214808, "start": 2173.12, "end": 2175.12, "text": " Isn't that exciting?", "tokens": [51616, 6998, 380, 300, 4670, 30, 51716], "temperature": 0.0, "avg_logprob": -0.19190502981854302, "compression_ratio": 1.6885245901639345, "no_speech_prob": 0.004193538799881935}, {"id": 455, "seek": 217512, "start": 2175.16, "end": 2179.16, "text": " Okay, hash aggregate.", "tokens": [50366, 1033, 11, 22019, 26118, 13, 50566], "temperature": 0.0, "avg_logprob": -0.14956634346095996, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0020175755489617586}, {"id": 456, "seek": 217512, "start": 2179.16, "end": 2183.16, "text": " So this is a case where it's not actually an aggregate,", "tokens": [50566, 407, 341, 307, 257, 1389, 689, 309, 311, 406, 767, 364, 26118, 11, 50766], "temperature": 0.0, "avg_logprob": -0.14956634346095996, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0020175755489617586}, {"id": 457, "seek": 217512, "start": 2183.16, "end": 2190.16, "text": " we're basically doing a distinct using a hash.", "tokens": [50766, 321, 434, 1936, 884, 257, 10644, 1228, 257, 22019, 13, 51116], "temperature": 0.0, "avg_logprob": -0.14956634346095996, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0020175755489617586}, {"id": 458, "seek": 217512, "start": 2190.16, "end": 2195.16, "text": " There's no mention of aggregate here at all, right?", "tokens": [51116, 821, 311, 572, 2152, 295, 26118, 510, 412, 439, 11, 558, 30, 51366], "temperature": 0.0, "avg_logprob": -0.14956634346095996, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0020175755489617586}, {"id": 459, "seek": 217512, "start": 2195.16, "end": 2198.16, "text": " But what effectively we do is we take all of our values,", "tokens": [51366, 583, 437, 8659, 321, 360, 307, 321, 747, 439, 295, 527, 4190, 11, 51516], "temperature": 0.0, "avg_logprob": -0.14956634346095996, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0020175755489617586}, {"id": 460, "seek": 217512, "start": 2198.16, "end": 2200.16, "text": " and we put them in a hash,", "tokens": [51516, 293, 321, 829, 552, 294, 257, 22019, 11, 51616], "temperature": 0.0, "avg_logprob": -0.14956634346095996, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0020175755489617586}, {"id": 461, "seek": 217512, "start": 2200.16, "end": 2203.16, "text": " and we merely have one value for each hash.", "tokens": [51616, 293, 321, 17003, 362, 472, 2158, 337, 1184, 22019, 13, 51766], "temperature": 0.0, "avg_logprob": -0.14956634346095996, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0020175755489617586}, {"id": 462, "seek": 220316, "start": 2203.2, "end": 2206.2, "text": " It's very similar to group, the group clause.", "tokens": [50366, 467, 311, 588, 2531, 281, 1594, 11, 264, 1594, 25925, 13, 50516], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 463, "seek": 220316, "start": 2206.2, "end": 2209.2, "text": " Remember how the group clause got rid of duplicates?", "tokens": [50516, 5459, 577, 264, 1594, 25925, 658, 3973, 295, 17154, 1024, 30, 50666], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 464, "seek": 220316, "start": 2209.2, "end": 2212.2, "text": " This is a way of doing it, except instead of doing it by group,", "tokens": [50666, 639, 307, 257, 636, 295, 884, 309, 11, 3993, 2602, 295, 884, 309, 538, 1594, 11, 50816], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 465, "seek": 220316, "start": 2212.2, "end": 2214.2, "text": " we're doing it by hash.", "tokens": [50816, 321, 434, 884, 309, 538, 22019, 13, 50916], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 466, "seek": 220316, "start": 2214.2, "end": 2217.2, "text": " Okay, instead of sorting, we can basically just create a hash", "tokens": [50916, 1033, 11, 2602, 295, 32411, 11, 321, 393, 1936, 445, 1884, 257, 22019, 51066], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 467, "seek": 220316, "start": 2217.2, "end": 2219.2, "text": " and remove the duplicates that way,", "tokens": [51066, 293, 4159, 264, 17154, 1024, 300, 636, 11, 51166], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 468, "seek": 220316, "start": 2219.2, "end": 2221.2, "text": " and that's what the distinct is.", "tokens": [51166, 293, 300, 311, 437, 264, 10644, 307, 13, 51266], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 469, "seek": 220316, "start": 2221.2, "end": 2224.2, "text": " So normally I wouldn't think of distinct as related to group,", "tokens": [51266, 407, 5646, 286, 2759, 380, 519, 295, 10644, 382, 4077, 281, 1594, 11, 51416], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 470, "seek": 220316, "start": 2224.2, "end": 2228.2, "text": " but in fact, I can see now, kind of, okay.", "tokens": [51416, 457, 294, 1186, 11, 286, 393, 536, 586, 11, 733, 295, 11, 1392, 13, 51616], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 471, "seek": 220316, "start": 2228.2, "end": 2232.2, "text": " And I have lost my mic, so I'm sorry about that.", "tokens": [51616, 400, 286, 362, 2731, 452, 3123, 11, 370, 286, 478, 2597, 466, 300, 13, 51816], "temperature": 0.0, "avg_logprob": -0.18234485431309164, "compression_ratio": 1.7316176470588236, "no_speech_prob": 0.006575365085154772}, {"id": 472, "seek": 223220, "start": 2232.24, "end": 2234.24, "text": " I will fix that.", "tokens": [50366, 286, 486, 3191, 300, 13, 50466], "temperature": 0.0, "avg_logprob": -0.15973272729427257, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001342641655355692}, {"id": 473, "seek": 223220, "start": 2236.24, "end": 2238.24, "text": " There we go.", "tokens": [50566, 821, 321, 352, 13, 50666], "temperature": 0.0, "avg_logprob": -0.15973272729427257, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001342641655355692}, {"id": 474, "seek": 223220, "start": 2238.24, "end": 2240.24, "text": " Great, okay.", "tokens": [50666, 3769, 11, 1392, 13, 50766], "temperature": 0.0, "avg_logprob": -0.15973272729427257, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001342641655355692}, {"id": 475, "seek": 223220, "start": 2240.24, "end": 2243.24, "text": " Mixed aggregate, I'm not sure how many of you are familiar with rollup.", "tokens": [50766, 12769, 292, 26118, 11, 286, 478, 406, 988, 577, 867, 295, 291, 366, 4963, 365, 3373, 1010, 13, 50916], "temperature": 0.0, "avg_logprob": -0.15973272729427257, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001342641655355692}, {"id": 476, "seek": 223220, "start": 2243.24, "end": 2246.24, "text": " I do have a Windows function talk on my website", "tokens": [50916, 286, 360, 362, 257, 8591, 2445, 751, 322, 452, 3144, 51066], "temperature": 0.0, "avg_logprob": -0.15973272729427257, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001342641655355692}, {"id": 477, "seek": 223220, "start": 2246.24, "end": 2250.24, "text": " that explains what rollup does, okay.", "tokens": [51066, 300, 13948, 437, 3373, 1010, 775, 11, 1392, 13, 51266], "temperature": 0.0, "avg_logprob": -0.15973272729427257, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001342641655355692}, {"id": 478, "seek": 223220, "start": 2250.24, "end": 2255.24, "text": " And effectively it does, the rollup is basically taking, again,", "tokens": [51266, 400, 8659, 309, 775, 11, 264, 3373, 1010, 307, 1936, 1940, 11, 797, 11, 51516], "temperature": 0.0, "avg_logprob": -0.15973272729427257, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001342641655355692}, {"id": 479, "seek": 223220, "start": 2255.24, "end": 2260.24, "text": " the unique values and then rolling them up into an aggregate.", "tokens": [51516, 264, 3845, 4190, 293, 550, 9439, 552, 493, 666, 364, 26118, 13, 51766], "temperature": 0.0, "avg_logprob": -0.15973272729427257, "compression_ratio": 1.5162790697674418, "no_speech_prob": 0.001342641655355692}, {"id": 480, "seek": 226024, "start": 2260.2799999999997, "end": 2263.2799999999997, "text": " Okay, and it also sorts it, which is different than the other one,", "tokens": [50366, 1033, 11, 293, 309, 611, 7527, 309, 11, 597, 307, 819, 813, 264, 661, 472, 11, 50516], "temperature": 0.0, "avg_logprob": -0.13243996976601957, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0008034283528104424}, {"id": 481, "seek": 226024, "start": 2263.2799999999997, "end": 2266.2799999999997, "text": " because you notice that it's all sorted, okay.", "tokens": [50516, 570, 291, 3449, 300, 309, 311, 439, 25462, 11, 1392, 13, 50666], "temperature": 0.0, "avg_logprob": -0.13243996976601957, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0008034283528104424}, {"id": 482, "seek": 226024, "start": 2266.2799999999997, "end": 2271.2799999999997, "text": " Window functions, again, I have a window function talk on my website,", "tokens": [50666, 44933, 6828, 11, 797, 11, 286, 362, 257, 4910, 2445, 751, 322, 452, 3144, 11, 50916], "temperature": 0.0, "avg_logprob": -0.13243996976601957, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0008034283528104424}, {"id": 483, "seek": 226024, "start": 2271.2799999999997, "end": 2274.2799999999997, "text": " but again, these are all kind of grouped together.", "tokens": [50916, 457, 797, 11, 613, 366, 439, 733, 295, 41877, 1214, 13, 51066], "temperature": 0.0, "avg_logprob": -0.13243996976601957, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0008034283528104424}, {"id": 484, "seek": 226024, "start": 2274.2799999999997, "end": 2278.2799999999997, "text": " So this is a sum over the entire result set.", "tokens": [51066, 407, 341, 307, 257, 2408, 670, 264, 2302, 1874, 992, 13, 51266], "temperature": 0.0, "avg_logprob": -0.13243996976601957, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0008034283528104424}, {"id": 485, "seek": 226024, "start": 2278.2799999999997, "end": 2280.2799999999997, "text": " It generates something called a window ag,", "tokens": [51266, 467, 23815, 746, 1219, 257, 4910, 623, 11, 51366], "temperature": 0.0, "avg_logprob": -0.13243996976601957, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0008034283528104424}, {"id": 486, "seek": 226024, "start": 2280.2799999999997, "end": 2285.2799999999997, "text": " and a window ag effectively just takes each individual roll,", "tokens": [51366, 293, 257, 4910, 623, 8659, 445, 2516, 1184, 2609, 3373, 11, 51616], "temperature": 0.0, "avg_logprob": -0.13243996976601957, "compression_ratio": 1.5958333333333334, "no_speech_prob": 0.0008034283528104424}, {"id": 487, "seek": 228528, "start": 2285.32, "end": 2290.32, "text": " but it manages to output an aggregate across all the rows", "tokens": [50366, 457, 309, 22489, 281, 5598, 364, 26118, 2108, 439, 264, 13241, 50616], "temperature": 0.0, "avg_logprob": -0.10474367643657484, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.00475104758515954}, {"id": 488, "seek": 228528, "start": 2290.32, "end": 2293.32, "text": " within the group.", "tokens": [50616, 1951, 264, 1594, 13, 50766], "temperature": 0.0, "avg_logprob": -0.10474367643657484, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.00475104758515954}, {"id": 489, "seek": 228528, "start": 2293.32, "end": 2297.32, "text": " If that makes no sense to you, I recommend you take a look at my window talk.", "tokens": [50766, 759, 300, 1669, 572, 2020, 281, 291, 11, 286, 2748, 291, 747, 257, 574, 412, 452, 4910, 751, 13, 50966], "temperature": 0.0, "avg_logprob": -0.10474367643657484, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.00475104758515954}, {"id": 490, "seek": 228528, "start": 2297.32, "end": 2300.32, "text": " It is kind of unusual how this works,", "tokens": [50966, 467, 307, 733, 295, 10901, 577, 341, 1985, 11, 51116], "temperature": 0.0, "avg_logprob": -0.10474367643657484, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.00475104758515954}, {"id": 491, "seek": 228528, "start": 2300.32, "end": 2304.32, "text": " but effectively all we're doing here is it allows us to maintain", "tokens": [51116, 457, 8659, 439, 321, 434, 884, 510, 307, 309, 4045, 505, 281, 6909, 51316], "temperature": 0.0, "avg_logprob": -0.10474367643657484, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.00475104758515954}, {"id": 492, "seek": 228528, "start": 2304.32, "end": 2306.32, "text": " the distinctness of the rows.", "tokens": [51316, 264, 10644, 1287, 295, 264, 13241, 13, 51416], "temperature": 0.0, "avg_logprob": -0.10474367643657484, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.00475104758515954}, {"id": 493, "seek": 228528, "start": 2306.32, "end": 2309.32, "text": " Window functions allow aggregates across rows", "tokens": [51416, 44933, 6828, 2089, 16743, 1024, 2108, 13241, 51566], "temperature": 0.0, "avg_logprob": -0.10474367643657484, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.00475104758515954}, {"id": 494, "seek": 228528, "start": 2309.32, "end": 2312.32, "text": " while the individual rows remain distinct.", "tokens": [51566, 1339, 264, 2609, 13241, 6222, 10644, 13, 51716], "temperature": 0.0, "avg_logprob": -0.10474367643657484, "compression_ratio": 1.6592920353982301, "no_speech_prob": 0.00475104758515954}, {"id": 495, "seek": 231232, "start": 2312.36, "end": 2315.36, "text": " And that's exactly what's happening with the window ag.", "tokens": [50366, 400, 300, 311, 2293, 437, 311, 2737, 365, 264, 4910, 623, 13, 50516], "temperature": 0.0, "avg_logprob": -0.11035964363499691, "compression_ratio": 1.7224489795918367, "no_speech_prob": 0.0014313729479908943}, {"id": 496, "seek": 231232, "start": 2315.36, "end": 2318.36, "text": " Okay, moving on to parallelism,", "tokens": [50516, 1033, 11, 2684, 322, 281, 8952, 1434, 11, 50666], "temperature": 0.0, "avg_logprob": -0.11035964363499691, "compression_ratio": 1.7224489795918367, "no_speech_prob": 0.0014313729479908943}, {"id": 497, "seek": 231232, "start": 2318.36, "end": 2322.36, "text": " we do have a nice reference here to the Postgres stocks about parallelism.", "tokens": [50666, 321, 360, 362, 257, 1481, 6408, 510, 281, 264, 10223, 45189, 12966, 466, 8952, 1434, 13, 50866], "temperature": 0.0, "avg_logprob": -0.11035964363499691, "compression_ratio": 1.7224489795918367, "no_speech_prob": 0.0014313729479908943}, {"id": 498, "seek": 231232, "start": 2322.36, "end": 2327.36, "text": " I'm going to go over a bunch of parallelism nodes that are quite interesting.", "tokens": [50866, 286, 478, 516, 281, 352, 670, 257, 3840, 295, 8952, 1434, 13891, 300, 366, 1596, 1880, 13, 51116], "temperature": 0.0, "avg_logprob": -0.11035964363499691, "compression_ratio": 1.7224489795918367, "no_speech_prob": 0.0014313729479908943}, {"id": 499, "seek": 231232, "start": 2327.36, "end": 2330.36, "text": " So here is parallel sequential scan,", "tokens": [51116, 407, 510, 307, 8952, 42881, 11049, 11, 51266], "temperature": 0.0, "avg_logprob": -0.11035964363499691, "compression_ratio": 1.7224489795918367, "no_speech_prob": 0.0014313729479908943}, {"id": 500, "seek": 231232, "start": 2330.36, "end": 2334.36, "text": " partial aggregate, gather and finalize aggregate, okay.", "tokens": [51266, 14641, 26118, 11, 5448, 293, 2572, 1125, 26118, 11, 1392, 13, 51466], "temperature": 0.0, "avg_logprob": -0.11035964363499691, "compression_ratio": 1.7224489795918367, "no_speech_prob": 0.0014313729479908943}, {"id": 501, "seek": 231232, "start": 2334.36, "end": 2337.36, "text": " So here we're doing a sum on the large table.", "tokens": [51466, 407, 510, 321, 434, 884, 257, 2408, 322, 264, 2416, 3199, 13, 51616], "temperature": 0.0, "avg_logprob": -0.11035964363499691, "compression_ratio": 1.7224489795918367, "no_speech_prob": 0.0014313729479908943}, {"id": 502, "seek": 231232, "start": 2337.36, "end": 2340.36, "text": " So we have a big table, we're doing a sum,", "tokens": [51616, 407, 321, 362, 257, 955, 3199, 11, 321, 434, 884, 257, 2408, 11, 51766], "temperature": 0.0, "avg_logprob": -0.11035964363499691, "compression_ratio": 1.7224489795918367, "no_speech_prob": 0.0014313729479908943}, {"id": 503, "seek": 234036, "start": 2340.4, "end": 2342.4, "text": " and we generate a whole bunch of parallelism here.", "tokens": [50366, 293, 321, 8460, 257, 1379, 3840, 295, 8952, 1434, 510, 13, 50466], "temperature": 0.0, "avg_logprob": -0.12790000869567136, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.0008419580408371985}, {"id": 504, "seek": 234036, "start": 2342.4, "end": 2345.4, "text": " Parallel sequential scan, a partial aggregate,", "tokens": [50466, 3457, 336, 338, 42881, 11049, 11, 257, 14641, 26118, 11, 50616], "temperature": 0.0, "avg_logprob": -0.12790000869567136, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.0008419580408371985}, {"id": 505, "seek": 234036, "start": 2345.4, "end": 2350.4, "text": " something called a gather, and then a finalizer aggregate.", "tokens": [50616, 746, 1219, 257, 5448, 11, 293, 550, 257, 2572, 6545, 26118, 13, 50866], "temperature": 0.0, "avg_logprob": -0.12790000869567136, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.0008419580408371985}, {"id": 506, "seek": 234036, "start": 2350.4, "end": 2356.4, "text": " So kind of like prepare for the diagram of craziness here.", "tokens": [50866, 407, 733, 295, 411, 5940, 337, 264, 10686, 295, 46348, 1324, 510, 13, 51166], "temperature": 0.0, "avg_logprob": -0.12790000869567136, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.0008419580408371985}, {"id": 507, "seek": 234036, "start": 2356.4, "end": 2362.4, "text": " What we basically have, again, going from left to right,", "tokens": [51166, 708, 321, 1936, 362, 11, 797, 11, 516, 490, 1411, 281, 558, 11, 51466], "temperature": 0.0, "avg_logprob": -0.12790000869567136, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.0008419580408371985}, {"id": 508, "seek": 234036, "start": 2362.4, "end": 2367.4, "text": " we have the first part of the sequential scan.", "tokens": [51466, 321, 362, 264, 700, 644, 295, 264, 42881, 11049, 13, 51716], "temperature": 0.0, "avg_logprob": -0.12790000869567136, "compression_ratio": 1.6275510204081634, "no_speech_prob": 0.0008419580408371985}, {"id": 509, "seek": 236740, "start": 2367.44, "end": 2370.44, "text": " Remember, we're only scanning one table,", "tokens": [50366, 5459, 11, 321, 434, 787, 27019, 472, 3199, 11, 50516], "temperature": 0.0, "avg_logprob": -0.1031228292556036, "compression_ratio": 1.99, "no_speech_prob": 0.008836510591208935}, {"id": 510, "seek": 236740, "start": 2370.44, "end": 2373.44, "text": " but we've broken it up into two parts,", "tokens": [50516, 457, 321, 600, 5463, 309, 493, 666, 732, 3166, 11, 50666], "temperature": 0.0, "avg_logprob": -0.1031228292556036, "compression_ratio": 1.99, "no_speech_prob": 0.008836510591208935}, {"id": 511, "seek": 236740, "start": 2373.44, "end": 2377.44, "text": " because we want to scan them in parallel, right.", "tokens": [50666, 570, 321, 528, 281, 11049, 552, 294, 8952, 11, 558, 13, 50866], "temperature": 0.0, "avg_logprob": -0.1031228292556036, "compression_ratio": 1.99, "no_speech_prob": 0.008836510591208935}, {"id": 512, "seek": 236740, "start": 2377.44, "end": 2381.44, "text": " So here we're scanning, we're using one background worker", "tokens": [50866, 407, 510, 321, 434, 27019, 11, 321, 434, 1228, 472, 3678, 11346, 51066], "temperature": 0.0, "avg_logprob": -0.1031228292556036, "compression_ratio": 1.99, "no_speech_prob": 0.008836510591208935}, {"id": 513, "seek": 236740, "start": 2381.44, "end": 2384.44, "text": " to scan the first part of the table in parallel.", "tokens": [51066, 281, 11049, 264, 700, 644, 295, 264, 3199, 294, 8952, 13, 51216], "temperature": 0.0, "avg_logprob": -0.1031228292556036, "compression_ratio": 1.99, "no_speech_prob": 0.008836510591208935}, {"id": 514, "seek": 236740, "start": 2384.44, "end": 2387.44, "text": " This is called a parallel sequential scan.", "tokens": [51216, 639, 307, 1219, 257, 8952, 42881, 11049, 13, 51366], "temperature": 0.0, "avg_logprob": -0.1031228292556036, "compression_ratio": 1.99, "no_speech_prob": 0.008836510591208935}, {"id": 515, "seek": 236740, "start": 2387.44, "end": 2389.44, "text": " We're taking the second part of the table.", "tokens": [51366, 492, 434, 1940, 264, 1150, 644, 295, 264, 3199, 13, 51466], "temperature": 0.0, "avg_logprob": -0.1031228292556036, "compression_ratio": 1.99, "no_speech_prob": 0.008836510591208935}, {"id": 516, "seek": 236740, "start": 2389.44, "end": 2393.44, "text": " We're also doing a parallel sequential scan on the second part of the table.", "tokens": [51466, 492, 434, 611, 884, 257, 8952, 42881, 11049, 322, 264, 1150, 644, 295, 264, 3199, 13, 51666], "temperature": 0.0, "avg_logprob": -0.1031228292556036, "compression_ratio": 1.99, "no_speech_prob": 0.008836510591208935}, {"id": 517, "seek": 239344, "start": 2393.48, "end": 2397.48, "text": " We're also going to generate what's called a partial aggregate.", "tokens": [50366, 492, 434, 611, 516, 281, 8460, 437, 311, 1219, 257, 14641, 26118, 13, 50566], "temperature": 0.0, "avg_logprob": -0.06880497414132823, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0006874857936054468}, {"id": 518, "seek": 239344, "start": 2397.48, "end": 2401.48, "text": " That partial aggregate is going to be the aggregate result", "tokens": [50566, 663, 14641, 26118, 307, 516, 281, 312, 264, 26118, 1874, 50766], "temperature": 0.0, "avg_logprob": -0.06880497414132823, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0006874857936054468}, {"id": 519, "seek": 239344, "start": 2401.48, "end": 2407.48, "text": " across all of the rows that our parallel sequential scan has processed.", "tokens": [50766, 2108, 439, 295, 264, 13241, 300, 527, 8952, 42881, 11049, 575, 18846, 13, 51066], "temperature": 0.0, "avg_logprob": -0.06880497414132823, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0006874857936054468}, {"id": 520, "seek": 239344, "start": 2407.48, "end": 2410.48, "text": " And now we have a partial sum right here.", "tokens": [51066, 400, 586, 321, 362, 257, 14641, 2408, 558, 510, 13, 51216], "temperature": 0.0, "avg_logprob": -0.06880497414132823, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0006874857936054468}, {"id": 521, "seek": 239344, "start": 2410.48, "end": 2413.48, "text": " The same thing down here, this is a partial sum here.", "tokens": [51216, 440, 912, 551, 760, 510, 11, 341, 307, 257, 14641, 2408, 510, 13, 51366], "temperature": 0.0, "avg_logprob": -0.06880497414132823, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0006874857936054468}, {"id": 522, "seek": 239344, "start": 2413.48, "end": 2418.48, "text": " We then send both results to the parent,", "tokens": [51366, 492, 550, 2845, 1293, 3542, 281, 264, 2596, 11, 51616], "temperature": 0.0, "avg_logprob": -0.06880497414132823, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0006874857936054468}, {"id": 523, "seek": 239344, "start": 2418.48, "end": 2421.48, "text": " which generates something called a gather node.", "tokens": [51616, 597, 23815, 746, 1219, 257, 5448, 9984, 13, 51766], "temperature": 0.0, "avg_logprob": -0.06880497414132823, "compression_ratio": 1.8047619047619048, "no_speech_prob": 0.0006874857936054468}, {"id": 524, "seek": 242148, "start": 2421.52, "end": 2423.52, "text": " That kind of makes sense.", "tokens": [50366, 663, 733, 295, 1669, 2020, 13, 50466], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 525, "seek": 242148, "start": 2423.52, "end": 2427.52, "text": " Now the gather node is gathering results from parallel workers.", "tokens": [50466, 823, 264, 5448, 9984, 307, 13519, 3542, 490, 8952, 5600, 13, 50666], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 526, "seek": 242148, "start": 2427.52, "end": 2429.52, "text": " And of course, because we're generating a sum,", "tokens": [50666, 400, 295, 1164, 11, 570, 321, 434, 17746, 257, 2408, 11, 50766], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 527, "seek": 242148, "start": 2429.52, "end": 2434.52, "text": " all we need to do is add together the two rows that we've gathered,", "tokens": [50766, 439, 321, 643, 281, 360, 307, 909, 1214, 264, 732, 13241, 300, 321, 600, 13032, 11, 51016], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 528, "seek": 242148, "start": 2434.52, "end": 2438.52, "text": " 27, 33, and we issue something called a finalized aggregate,", "tokens": [51016, 7634, 11, 11816, 11, 293, 321, 2734, 746, 1219, 257, 2572, 1602, 26118, 11, 51216], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 529, "seek": 242148, "start": 2438.52, "end": 2441.52, "text": " and that generates my 60.", "tokens": [51216, 293, 300, 23815, 452, 4060, 13, 51366], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 530, "seek": 242148, "start": 2441.52, "end": 2443.52, "text": " Okay.", "tokens": [51366, 1033, 13, 51466], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 531, "seek": 242148, "start": 2443.52, "end": 2446.52, "text": " Now again, this is just a two, but we could use a hundred ten.", "tokens": [51466, 823, 797, 11, 341, 307, 445, 257, 732, 11, 457, 321, 727, 764, 257, 3262, 2064, 13, 51616], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 532, "seek": 242148, "start": 2446.52, "end": 2449.52, "text": " However many parallelism you decide to use.", "tokens": [51616, 2908, 867, 8952, 1434, 291, 4536, 281, 764, 13, 51766], "temperature": 0.0, "avg_logprob": -0.15850968020302908, "compression_ratio": 1.5598455598455598, "no_speech_prob": 0.0034207087010145187}, {"id": 533, "seek": 244952, "start": 2449.56, "end": 2455.56, "text": " And again, it's scanning different parts of the table in parallel.", "tokens": [50366, 400, 797, 11, 309, 311, 27019, 819, 3166, 295, 264, 3199, 294, 8952, 13, 50666], "temperature": 0.0, "avg_logprob": -0.3093529624500494, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0039320276118814945}, {"id": 534, "seek": 244952, "start": 2455.56, "end": 2456.56, "text": " Yes, sir.", "tokens": [50666, 1079, 11, 4735, 13, 50716], "temperature": 0.0, "avg_logprob": -0.3093529624500494, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0039320276118814945}, {"id": 535, "seek": 244952, "start": 2456.56, "end": 2460.56, "text": " Why there is partial aggregate, finalized aggregate, and aggregate nodes,", "tokens": [50716, 1545, 456, 307, 14641, 26118, 11, 2572, 1602, 26118, 11, 293, 26118, 13891, 11, 50916], "temperature": 0.0, "avg_logprob": -0.3093529624500494, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0039320276118814945}, {"id": 536, "seek": 244952, "start": 2460.56, "end": 2466.56, "text": " because they are just the same, but they are different parts.", "tokens": [50916, 570, 436, 366, 445, 264, 912, 11, 457, 436, 366, 819, 3166, 13, 51216], "temperature": 0.0, "avg_logprob": -0.3093529624500494, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0039320276118814945}, {"id": 537, "seek": 244952, "start": 2466.56, "end": 2472.56, "text": " And using parallel here, you just aggregate on a smaller size table.", "tokens": [51216, 400, 1228, 8952, 510, 11, 291, 445, 26118, 322, 257, 4356, 2744, 3199, 13, 51516], "temperature": 0.0, "avg_logprob": -0.3093529624500494, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0039320276118814945}, {"id": 538, "seek": 244952, "start": 2472.56, "end": 2477.56, "text": " But I don't know why you decided to call three different nodes,", "tokens": [51516, 583, 286, 500, 380, 458, 983, 291, 3047, 281, 818, 1045, 819, 13891, 11, 51766], "temperature": 0.0, "avg_logprob": -0.3093529624500494, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.0039320276118814945}, {"id": 539, "seek": 247756, "start": 2477.6, "end": 2479.6, "text": " but basically they're the same.", "tokens": [50366, 457, 1936, 436, 434, 264, 912, 13, 50466], "temperature": 0.0, "avg_logprob": -0.1565759291342639, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.0002414460468571633}, {"id": 540, "seek": 247756, "start": 2479.6, "end": 2484.6, "text": " Okay, so the question is why are we doing, why do we have different,", "tokens": [50466, 1033, 11, 370, 264, 1168, 307, 983, 366, 321, 884, 11, 983, 360, 321, 362, 819, 11, 50716], "temperature": 0.0, "avg_logprob": -0.1565759291342639, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.0002414460468571633}, {"id": 541, "seek": 247756, "start": 2484.6, "end": 2487.6, "text": " why is this not the same as that basically?", "tokens": [50716, 983, 307, 341, 406, 264, 912, 382, 300, 1936, 30, 50866], "temperature": 0.0, "avg_logprob": -0.1565759291342639, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.0002414460468571633}, {"id": 542, "seek": 247756, "start": 2487.6, "end": 2492.6, "text": " And the reason is that for some, for the sum command, they're the same.", "tokens": [50866, 400, 264, 1778, 307, 300, 337, 512, 11, 337, 264, 2408, 5622, 11, 436, 434, 264, 912, 13, 51116], "temperature": 0.0, "avg_logprob": -0.1565759291342639, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.0002414460468571633}, {"id": 543, "seek": 247756, "start": 2492.6, "end": 2498.6, "text": " But if I'm doing something like a max or standard deviation or something,", "tokens": [51116, 583, 498, 286, 478, 884, 746, 411, 257, 11469, 420, 3832, 25163, 420, 746, 11, 51416], "temperature": 0.0, "avg_logprob": -0.1565759291342639, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.0002414460468571633}, {"id": 544, "seek": 247756, "start": 2498.6, "end": 2502.6, "text": " we're going to have different operations to join these together.", "tokens": [51416, 321, 434, 516, 281, 362, 819, 7705, 281, 3917, 613, 1214, 13, 51616], "temperature": 0.0, "avg_logprob": -0.1565759291342639, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.0002414460468571633}, {"id": 545, "seek": 247756, "start": 2502.6, "end": 2506.6, "text": " So sum is the simplest one, that's the one I use,", "tokens": [51616, 407, 2408, 307, 264, 22811, 472, 11, 300, 311, 264, 472, 286, 764, 11, 51816], "temperature": 0.0, "avg_logprob": -0.1565759291342639, "compression_ratio": 1.7532467532467533, "no_speech_prob": 0.0002414460468571633}, {"id": 546, "seek": 250660, "start": 2506.64, "end": 2509.64, "text": " but for other aggregates, these would be more complex.", "tokens": [50366, 457, 337, 661, 16743, 1024, 11, 613, 576, 312, 544, 3997, 13, 50516], "temperature": 0.0, "avg_logprob": -0.19720154941672147, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00375912943854928}, {"id": 547, "seek": 250660, "start": 2509.64, "end": 2512.64, "text": " And we may do different things at different stages.", "tokens": [50516, 400, 321, 815, 360, 819, 721, 412, 819, 10232, 13, 50666], "temperature": 0.0, "avg_logprob": -0.19720154941672147, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00375912943854928}, {"id": 548, "seek": 250660, "start": 2512.64, "end": 2517.64, "text": " But I see what you're saying, it's sort of, the point is that,", "tokens": [50666, 583, 286, 536, 437, 291, 434, 1566, 11, 309, 311, 1333, 295, 11, 264, 935, 307, 300, 11, 50916], "temperature": 0.0, "avg_logprob": -0.19720154941672147, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00375912943854928}, {"id": 549, "seek": 250660, "start": 2517.64, "end": 2520.64, "text": " it's just the way it's processed.", "tokens": [50916, 309, 311, 445, 264, 636, 309, 311, 18846, 13, 51066], "temperature": 0.0, "avg_logprob": -0.19720154941672147, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00375912943854928}, {"id": 550, "seek": 250660, "start": 2520.64, "end": 2522.64, "text": " They probably, some cases could be the same,", "tokens": [51066, 814, 1391, 11, 512, 3331, 727, 312, 264, 912, 11, 51166], "temperature": 0.0, "avg_logprob": -0.19720154941672147, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00375912943854928}, {"id": 551, "seek": 250660, "start": 2522.64, "end": 2526.64, "text": " other cases they can't, so we just call them different things.", "tokens": [51166, 661, 3331, 436, 393, 380, 11, 370, 321, 445, 818, 552, 819, 721, 13, 51366], "temperature": 0.0, "avg_logprob": -0.19720154941672147, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00375912943854928}, {"id": 552, "seek": 250660, "start": 2526.64, "end": 2528.64, "text": " Okay.", "tokens": [51366, 1033, 13, 51466], "temperature": 0.0, "avg_logprob": -0.19720154941672147, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00375912943854928}, {"id": 553, "seek": 250660, "start": 2528.64, "end": 2532.64, "text": " Gather, now we saw merge append.", "tokens": [51466, 39841, 11, 586, 321, 1866, 22183, 34116, 13, 51666], "temperature": 0.0, "avg_logprob": -0.19720154941672147, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.00375912943854928}, {"id": 554, "seek": 253264, "start": 2532.68, "end": 2538.68, "text": " Now we have gather merge, which sounds kind of like, well, what happened?", "tokens": [50366, 823, 321, 362, 5448, 22183, 11, 597, 3263, 733, 295, 411, 11, 731, 11, 437, 2011, 30, 50666], "temperature": 0.0, "avg_logprob": -0.15206015737433182, "compression_ratio": 1.7263681592039801, "no_speech_prob": 0.0021806107833981514}, {"id": 555, "seek": 253264, "start": 2538.68, "end": 2544.68, "text": " Okay. And what gather merge does is it effectively is going to take parallel workers", "tokens": [50666, 1033, 13, 400, 437, 5448, 22183, 775, 307, 309, 8659, 307, 516, 281, 747, 8952, 5600, 50966], "temperature": 0.0, "avg_logprob": -0.15206015737433182, "compression_ratio": 1.7263681592039801, "no_speech_prob": 0.0021806107833981514}, {"id": 556, "seek": 253264, "start": 2544.68, "end": 2546.68, "text": " and then just merge them together.", "tokens": [50966, 293, 550, 445, 22183, 552, 1214, 13, 51066], "temperature": 0.0, "avg_logprob": -0.15206015737433182, "compression_ratio": 1.7263681592039801, "no_speech_prob": 0.0021806107833981514}, {"id": 557, "seek": 253264, "start": 2546.68, "end": 2551.68, "text": " Again, I have the same parallel scan here, I have a parallel scan here,", "tokens": [51066, 3764, 11, 286, 362, 264, 912, 8952, 11049, 510, 11, 286, 362, 257, 8952, 11049, 510, 11, 51316], "temperature": 0.0, "avg_logprob": -0.15206015737433182, "compression_ratio": 1.7263681592039801, "no_speech_prob": 0.0021806107833981514}, {"id": 558, "seek": 253264, "start": 2551.68, "end": 2553.68, "text": " I'm going to do a sort.", "tokens": [51316, 286, 478, 516, 281, 360, 257, 1333, 13, 51416], "temperature": 0.0, "avg_logprob": -0.15206015737433182, "compression_ratio": 1.7263681592039801, "no_speech_prob": 0.0021806107833981514}, {"id": 559, "seek": 253264, "start": 2553.68, "end": 2557.68, "text": " So again, I'm not using aggregate here, I'm doing a sort.", "tokens": [51416, 407, 797, 11, 286, 478, 406, 1228, 26118, 510, 11, 286, 478, 884, 257, 1333, 13, 51616], "temperature": 0.0, "avg_logprob": -0.15206015737433182, "compression_ratio": 1.7263681592039801, "no_speech_prob": 0.0021806107833981514}, {"id": 560, "seek": 255768, "start": 2557.72, "end": 2561.72, "text": " Okay. And now I've scanned part of it.", "tokens": [50366, 1033, 13, 400, 586, 286, 600, 45089, 644, 295, 309, 13, 50566], "temperature": 0.0, "avg_logprob": -0.21333222342009592, "compression_ratio": 1.5541125541125542, "no_speech_prob": 0.0013874168507754803}, {"id": 561, "seek": 255768, "start": 2561.72, "end": 2563.72, "text": " You know, I keep doing that, that's not good.", "tokens": [50566, 509, 458, 11, 286, 1066, 884, 300, 11, 300, 311, 406, 665, 13, 50666], "temperature": 0.0, "avg_logprob": -0.21333222342009592, "compression_ratio": 1.5541125541125542, "no_speech_prob": 0.0013874168507754803}, {"id": 562, "seek": 255768, "start": 2564.72, "end": 2569.72, "text": " The reason is because of the way the clip, the clip doesn't go into my shirt properly,", "tokens": [50716, 440, 1778, 307, 570, 295, 264, 636, 264, 7353, 11, 264, 7353, 1177, 380, 352, 666, 452, 8336, 6108, 11, 50966], "temperature": 0.0, "avg_logprob": -0.21333222342009592, "compression_ratio": 1.5541125541125542, "no_speech_prob": 0.0013874168507754803}, {"id": 563, "seek": 255768, "start": 2569.72, "end": 2571.72, "text": " so I keep having to shove it in there.", "tokens": [50966, 370, 286, 1066, 1419, 281, 35648, 309, 294, 456, 13, 51066], "temperature": 0.0, "avg_logprob": -0.21333222342009592, "compression_ratio": 1.5541125541125542, "no_speech_prob": 0.0013874168507754803}, {"id": 564, "seek": 255768, "start": 2571.72, "end": 2573.72, "text": " Alright.", "tokens": [51066, 2798, 13, 51166], "temperature": 0.0, "avg_logprob": -0.21333222342009592, "compression_ratio": 1.5541125541125542, "no_speech_prob": 0.0013874168507754803}, {"id": 565, "seek": 255768, "start": 2573.72, "end": 2579.72, "text": " So basically we've sorted, within the background worker, our results,", "tokens": [51166, 407, 1936, 321, 600, 25462, 11, 1951, 264, 3678, 11346, 11, 527, 3542, 11, 51466], "temperature": 0.0, "avg_logprob": -0.21333222342009592, "compression_ratio": 1.5541125541125542, "no_speech_prob": 0.0013874168507754803}, {"id": 566, "seek": 255768, "start": 2579.72, "end": 2583.72, "text": " we sorted and now we're going to gather, merge, remember merge append", "tokens": [51466, 321, 25462, 293, 586, 321, 434, 516, 281, 5448, 11, 22183, 11, 1604, 22183, 34116, 51666], "temperature": 0.0, "avg_logprob": -0.21333222342009592, "compression_ratio": 1.5541125541125542, "no_speech_prob": 0.0013874168507754803}, {"id": 567, "seek": 258372, "start": 2583.7599999999998, "end": 2585.7599999999998, "text": " or merge joint merge, merge append.", "tokens": [50366, 420, 22183, 7225, 22183, 11, 22183, 34116, 13, 50466], "temperature": 0.0, "avg_logprob": -0.12195840402811516, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.008305005729198456}, {"id": 568, "seek": 258372, "start": 2585.7599999999998, "end": 2588.7599999999998, "text": " We're going to take the lowest of this, the lowest of this,", "tokens": [50466, 492, 434, 516, 281, 747, 264, 12437, 295, 341, 11, 264, 12437, 295, 341, 11, 50616], "temperature": 0.0, "avg_logprob": -0.12195840402811516, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.008305005729198456}, {"id": 569, "seek": 258372, "start": 2588.7599999999998, "end": 2594.7599999999998, "text": " and then we're just going to keep doing it and then take those and merge the two ordered results together.", "tokens": [50616, 293, 550, 321, 434, 445, 516, 281, 1066, 884, 309, 293, 550, 747, 729, 293, 22183, 264, 732, 8866, 3542, 1214, 13, 50916], "temperature": 0.0, "avg_logprob": -0.12195840402811516, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.008305005729198456}, {"id": 570, "seek": 258372, "start": 2594.7599999999998, "end": 2596.7599999999998, "text": " Okay.", "tokens": [50916, 1033, 13, 51016], "temperature": 0.0, "avg_logprob": -0.12195840402811516, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.008305005729198456}, {"id": 571, "seek": 258372, "start": 2596.7599999999998, "end": 2598.7599999999998, "text": " Makes a lot of sense.", "tokens": [51016, 25245, 257, 688, 295, 2020, 13, 51116], "temperature": 0.0, "avg_logprob": -0.12195840402811516, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.008305005729198456}, {"id": 572, "seek": 258372, "start": 2598.7599999999998, "end": 2602.7599999999998, "text": " Parallel append, all we're going to do here is we're going to append stuff together.", "tokens": [51116, 3457, 336, 338, 34116, 11, 439, 321, 434, 516, 281, 360, 510, 307, 321, 434, 516, 281, 34116, 1507, 1214, 13, 51316], "temperature": 0.0, "avg_logprob": -0.12195840402811516, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.008305005729198456}, {"id": 573, "seek": 258372, "start": 2602.7599999999998, "end": 2605.7599999999998, "text": " This is one of the craziest diagrams I have, I think.", "tokens": [51316, 639, 307, 472, 295, 264, 46339, 36709, 286, 362, 11, 286, 519, 13, 51466], "temperature": 0.0, "avg_logprob": -0.12195840402811516, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.008305005729198456}, {"id": 574, "seek": 258372, "start": 2605.7599999999998, "end": 2610.7599999999998, "text": " So here we're doing, we're doing our background worker parallel scan", "tokens": [51466, 407, 510, 321, 434, 884, 11, 321, 434, 884, 527, 3678, 11346, 8952, 11049, 51716], "temperature": 0.0, "avg_logprob": -0.12195840402811516, "compression_ratio": 1.8798283261802575, "no_speech_prob": 0.008305005729198456}, {"id": 575, "seek": 261076, "start": 2610.8, "end": 2616.8, "text": " and we're going to take the, we're going to append the two of the workers together", "tokens": [50366, 293, 321, 434, 516, 281, 747, 264, 11, 321, 434, 516, 281, 34116, 264, 732, 295, 264, 5600, 1214, 50666], "temperature": 0.0, "avg_logprob": -0.10586116143635341, "compression_ratio": 2.1065989847715736, "no_speech_prob": 0.007672381587326527}, {"id": 576, "seek": 261076, "start": 2616.8, "end": 2619.8, "text": " because this is a join again and then we're going to take the other part,", "tokens": [50666, 570, 341, 307, 257, 3917, 797, 293, 550, 321, 434, 516, 281, 747, 264, 661, 644, 11, 50816], "temperature": 0.0, "avg_logprob": -0.10586116143635341, "compression_ratio": 2.1065989847715736, "no_speech_prob": 0.007672381587326527}, {"id": 577, "seek": 261076, "start": 2619.8, "end": 2623.8, "text": " we're going to join that and then we're going to sort those", "tokens": [50816, 321, 434, 516, 281, 3917, 300, 293, 550, 321, 434, 516, 281, 1333, 729, 51016], "temperature": 0.0, "avg_logprob": -0.10586116143635341, "compression_ratio": 2.1065989847715736, "no_speech_prob": 0.007672381587326527}, {"id": 578, "seek": 261076, "start": 2623.8, "end": 2625.8, "text": " and then we're going to merge them.", "tokens": [51016, 293, 550, 321, 434, 516, 281, 22183, 552, 13, 51116], "temperature": 0.0, "avg_logprob": -0.10586116143635341, "compression_ratio": 2.1065989847715736, "no_speech_prob": 0.007672381587326527}, {"id": 579, "seek": 261076, "start": 2625.8, "end": 2631.8, "text": " So I know it sounds like kind of crazy, but what we're doing is we're doing four sorts", "tokens": [51116, 407, 286, 458, 309, 3263, 411, 733, 295, 3219, 11, 457, 437, 321, 434, 884, 307, 321, 434, 884, 1451, 7527, 51416], "temperature": 0.0, "avg_logprob": -0.10586116143635341, "compression_ratio": 2.1065989847715736, "no_speech_prob": 0.007672381587326527}, {"id": 580, "seek": 261076, "start": 2631.8, "end": 2636.8, "text": " and we're appending them in stages and then we're sorting those in batches.", "tokens": [51416, 293, 321, 434, 724, 2029, 552, 294, 10232, 293, 550, 321, 434, 32411, 729, 294, 15245, 279, 13, 51666], "temperature": 0.0, "avg_logprob": -0.10586116143635341, "compression_ratio": 2.1065989847715736, "no_speech_prob": 0.007672381587326527}, {"id": 581, "seek": 263680, "start": 2636.84, "end": 2644.84, "text": " And then, so it's a combination of basically a parallel scan with a sort involved,", "tokens": [50366, 400, 550, 11, 370, 309, 311, 257, 6562, 295, 1936, 257, 8952, 11049, 365, 257, 1333, 3288, 11, 50766], "temperature": 0.0, "avg_logprob": -0.12406634280556127, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.001048034755513072}, {"id": 582, "seek": 263680, "start": 2644.84, "end": 2646.84, "text": " which also happens in background workers.", "tokens": [50766, 597, 611, 2314, 294, 3678, 5600, 13, 50866], "temperature": 0.0, "avg_logprob": -0.12406634280556127, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.001048034755513072}, {"id": 583, "seek": 263680, "start": 2646.84, "end": 2652.84, "text": " So again, it's just, it's just, this is the craziest diagram I think we have.", "tokens": [50866, 407, 797, 11, 309, 311, 445, 11, 309, 311, 445, 11, 341, 307, 264, 46339, 10686, 286, 519, 321, 362, 13, 51166], "temperature": 0.0, "avg_logprob": -0.12406634280556127, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.001048034755513072}, {"id": 584, "seek": 263680, "start": 2652.84, "end": 2655.84, "text": " Parallel hash, parallel hash join.", "tokens": [51166, 3457, 336, 338, 22019, 11, 8952, 22019, 3917, 13, 51316], "temperature": 0.0, "avg_logprob": -0.12406634280556127, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.001048034755513072}, {"id": 585, "seek": 263680, "start": 2655.84, "end": 2660.84, "text": " Here we're doing a join, a join in parallel.", "tokens": [51316, 1692, 321, 434, 884, 257, 3917, 11, 257, 3917, 294, 8952, 13, 51566], "temperature": 0.0, "avg_logprob": -0.12406634280556127, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.001048034755513072}, {"id": 586, "seek": 263680, "start": 2660.84, "end": 2662.84, "text": " Again, crazy diagram.", "tokens": [51566, 3764, 11, 3219, 10686, 13, 51666], "temperature": 0.0, "avg_logprob": -0.12406634280556127, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.001048034755513072}, {"id": 587, "seek": 263680, "start": 2662.84, "end": 2664.84, "text": " Here's our parallel sequential scan.", "tokens": [51666, 1692, 311, 527, 8952, 42881, 11049, 13, 51766], "temperature": 0.0, "avg_logprob": -0.12406634280556127, "compression_ratio": 1.6084905660377358, "no_speech_prob": 0.001048034755513072}, {"id": 588, "seek": 266484, "start": 2664.88, "end": 2670.88, "text": " We're going to hash those together in a shared memory hash,", "tokens": [50366, 492, 434, 516, 281, 22019, 729, 1214, 294, 257, 5507, 4675, 22019, 11, 50666], "temperature": 0.0, "avg_logprob": -0.08862899224969405, "compression_ratio": 1.7679558011049723, "no_speech_prob": 0.004819211084395647}, {"id": 589, "seek": 266484, "start": 2670.88, "end": 2673.88, "text": " which is kind of like mind blowing,", "tokens": [50666, 597, 307, 733, 295, 411, 1575, 15068, 11, 50816], "temperature": 0.0, "avg_logprob": -0.08862899224969405, "compression_ratio": 1.7679558011049723, "no_speech_prob": 0.004819211084395647}, {"id": 590, "seek": 266484, "start": 2673.88, "end": 2676.88, "text": " but effectively we have dynamic shared memory", "tokens": [50816, 457, 8659, 321, 362, 8546, 5507, 4675, 50966], "temperature": 0.0, "avg_logprob": -0.08862899224969405, "compression_ratio": 1.7679558011049723, "no_speech_prob": 0.004819211084395647}, {"id": 591, "seek": 266484, "start": 2676.88, "end": 2682.88, "text": " and we're going to create for the background workers a shared hash table", "tokens": [50966, 293, 321, 434, 516, 281, 1884, 337, 264, 3678, 5600, 257, 5507, 22019, 3199, 51266], "temperature": 0.0, "avg_logprob": -0.08862899224969405, "compression_ratio": 1.7679558011049723, "no_speech_prob": 0.004819211084395647}, {"id": 592, "seek": 266484, "start": 2682.88, "end": 2686.88, "text": " and they're going to join, push those into the parallel hash table", "tokens": [51266, 293, 436, 434, 516, 281, 3917, 11, 2944, 729, 666, 264, 8952, 22019, 3199, 51466], "temperature": 0.0, "avg_logprob": -0.08862899224969405, "compression_ratio": 1.7679558011049723, "no_speech_prob": 0.004819211084395647}, {"id": 593, "seek": 266484, "start": 2686.88, "end": 2691.88, "text": " and then once we get this shared hash,", "tokens": [51466, 293, 550, 1564, 321, 483, 341, 5507, 22019, 11, 51716], "temperature": 0.0, "avg_logprob": -0.08862899224969405, "compression_ratio": 1.7679558011049723, "no_speech_prob": 0.004819211084395647}, {"id": 594, "seek": 269188, "start": 2691.92, "end": 2695.92, "text": " which has been built by multiple background workers,", "tokens": [50366, 597, 575, 668, 3094, 538, 3866, 3678, 5600, 11, 50566], "temperature": 0.0, "avg_logprob": -0.09680055100240825, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.007338640280067921}, {"id": 595, "seek": 269188, "start": 2695.92, "end": 2701.92, "text": " we're going to take our outer side and we're going to join against these,", "tokens": [50566, 321, 434, 516, 281, 747, 527, 10847, 1252, 293, 321, 434, 516, 281, 3917, 1970, 613, 11, 50866], "temperature": 0.0, "avg_logprob": -0.09680055100240825, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.007338640280067921}, {"id": 596, "seek": 269188, "start": 2701.92, "end": 2706.92, "text": " that shared hash into potential background workers.", "tokens": [50866, 300, 5507, 22019, 666, 3995, 3678, 5600, 13, 51116], "temperature": 0.0, "avg_logprob": -0.09680055100240825, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.007338640280067921}, {"id": 597, "seek": 269188, "start": 2706.92, "end": 2711.92, "text": " And then we're going to gather them together and get the result.", "tokens": [51116, 400, 550, 321, 434, 516, 281, 5448, 552, 1214, 293, 483, 264, 1874, 13, 51366], "temperature": 0.0, "avg_logprob": -0.09680055100240825, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.007338640280067921}, {"id": 598, "seek": 269188, "start": 2711.92, "end": 2715.92, "text": " So not only are we doing the sorting in parallel,", "tokens": [51366, 407, 406, 787, 366, 321, 884, 264, 32411, 294, 8952, 11, 51566], "temperature": 0.0, "avg_logprob": -0.09680055100240825, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.007338640280067921}, {"id": 599, "seek": 269188, "start": 2715.92, "end": 2718.92, "text": " we're actually creating the hash in parallel", "tokens": [51566, 321, 434, 767, 4084, 264, 22019, 294, 8952, 51716], "temperature": 0.0, "avg_logprob": -0.09680055100240825, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.007338640280067921}, {"id": 600, "seek": 271892, "start": 2718.96, "end": 2722.96, "text": " and we're doing the hash join in parallel", "tokens": [50366, 293, 321, 434, 884, 264, 22019, 3917, 294, 8952, 50566], "temperature": 0.0, "avg_logprob": -0.1118392649385118, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0027929903008043766}, {"id": 601, "seek": 271892, "start": 2722.96, "end": 2726.96, "text": " and then we're returning the result.", "tokens": [50566, 293, 550, 321, 434, 12678, 264, 1874, 13, 50766], "temperature": 0.0, "avg_logprob": -0.1118392649385118, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0027929903008043766}, {"id": 602, "seek": 271892, "start": 2726.96, "end": 2731.96, "text": " Okay, so I realize it's a lot, but that's exactly what it's doing.", "tokens": [50766, 1033, 11, 370, 286, 4325, 309, 311, 257, 688, 11, 457, 300, 311, 2293, 437, 309, 311, 884, 13, 51016], "temperature": 0.0, "avg_logprob": -0.1118392649385118, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0027929903008043766}, {"id": 603, "seek": 271892, "start": 2731.96, "end": 2734.96, "text": " Okay, let's move on.", "tokens": [51016, 1033, 11, 718, 311, 1286, 322, 13, 51166], "temperature": 0.0, "avg_logprob": -0.1118392649385118, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0027929903008043766}, {"id": 604, "seek": 271892, "start": 2734.96, "end": 2738.96, "text": " Comment table expressions, again, have a nice talk about that on my website.", "tokens": [51166, 16328, 3199, 15277, 11, 797, 11, 362, 257, 1481, 751, 466, 300, 322, 452, 3144, 13, 51366], "temperature": 0.0, "avg_logprob": -0.1118392649385118, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0027929903008043766}, {"id": 605, "seek": 271892, "start": 2738.96, "end": 2742.96, "text": " Honestly, I don't get any money for advertising my talks,", "tokens": [51366, 12348, 11, 286, 500, 380, 483, 604, 1460, 337, 13097, 452, 6686, 11, 51566], "temperature": 0.0, "avg_logprob": -0.1118392649385118, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0027929903008043766}, {"id": 606, "seek": 271892, "start": 2742.96, "end": 2744.96, "text": " but you'd think so from this talk.", "tokens": [51566, 457, 291, 1116, 519, 370, 490, 341, 751, 13, 51666], "temperature": 0.0, "avg_logprob": -0.1118392649385118, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.0027929903008043766}, {"id": 607, "seek": 274496, "start": 2745.0, "end": 2749.0, "text": " So if we do a comment table expression with a materialized node,", "tokens": [50366, 407, 498, 321, 360, 257, 2871, 3199, 6114, 365, 257, 2527, 1602, 9984, 11, 50566], "temperature": 0.0, "avg_logprob": -0.10979871295747302, "compression_ratio": 1.8508771929824561, "no_speech_prob": 0.0009383826400153339}, {"id": 608, "seek": 274496, "start": 2749.0, "end": 2753.0, "text": " we just do something called a CT scan", "tokens": [50566, 321, 445, 360, 746, 1219, 257, 19529, 11049, 50766], "temperature": 0.0, "avg_logprob": -0.10979871295747302, "compression_ratio": 1.8508771929824561, "no_speech_prob": 0.0009383826400153339}, {"id": 609, "seek": 274496, "start": 2753.0, "end": 2757.0, "text": " and effectively all we're doing we're scanning across the comment table expression we created.", "tokens": [50766, 293, 8659, 439, 321, 434, 884, 321, 434, 27019, 2108, 264, 2871, 3199, 6114, 321, 2942, 13, 50966], "temperature": 0.0, "avg_logprob": -0.10979871295747302, "compression_ratio": 1.8508771929824561, "no_speech_prob": 0.0009383826400153339}, {"id": 610, "seek": 274496, "start": 2757.0, "end": 2761.0, "text": " Okay, I got it.", "tokens": [50966, 1033, 11, 286, 658, 309, 13, 51166], "temperature": 0.0, "avg_logprob": -0.10979871295747302, "compression_ratio": 1.8508771929824561, "no_speech_prob": 0.0009383826400153339}, {"id": 611, "seek": 274496, "start": 2761.0, "end": 2765.0, "text": " Work table scan, this is also with a recursive comment table expression.", "tokens": [51166, 6603, 3199, 11049, 11, 341, 307, 611, 365, 257, 20560, 488, 2871, 3199, 6114, 13, 51366], "temperature": 0.0, "avg_logprob": -0.10979871295747302, "compression_ratio": 1.8508771929824561, "no_speech_prob": 0.0009383826400153339}, {"id": 612, "seek": 274496, "start": 2765.0, "end": 2769.0, "text": " We would do that here. We're going to loop around through this", "tokens": [51366, 492, 576, 360, 300, 510, 13, 492, 434, 516, 281, 6367, 926, 807, 341, 51566], "temperature": 0.0, "avg_logprob": -0.10979871295747302, "compression_ratio": 1.8508771929824561, "no_speech_prob": 0.0009383826400153339}, {"id": 613, "seek": 274496, "start": 2769.0, "end": 2773.0, "text": " and again we create something called a work table and a recursive union.", "tokens": [51566, 293, 797, 321, 1884, 746, 1219, 257, 589, 3199, 293, 257, 20560, 488, 11671, 13, 51766], "temperature": 0.0, "avg_logprob": -0.10979871295747302, "compression_ratio": 1.8508771929824561, "no_speech_prob": 0.0009383826400153339}, {"id": 614, "seek": 277300, "start": 2773.04, "end": 2776.04, "text": " This is a diagram from my other presentation.", "tokens": [50366, 639, 307, 257, 10686, 490, 452, 661, 5860, 13, 50516], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 615, "seek": 277300, "start": 2776.04, "end": 2779.04, "text": " It talks about how comment table expressions work.", "tokens": [50516, 467, 6686, 466, 577, 2871, 3199, 15277, 589, 13, 50666], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 616, "seek": 277300, "start": 2779.04, "end": 2782.04, "text": " And again, this is a diagram.", "tokens": [50666, 400, 797, 11, 341, 307, 257, 10686, 13, 50816], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 617, "seek": 277300, "start": 2782.04, "end": 2786.04, "text": " It's basically looping in and creating this comment table expression.", "tokens": [50816, 467, 311, 1936, 6367, 278, 294, 293, 4084, 341, 2871, 3199, 6114, 13, 51016], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 618, "seek": 277300, "start": 2786.04, "end": 2790.04, "text": " And then as you loop through the results,", "tokens": [51016, 400, 550, 382, 291, 6367, 807, 264, 3542, 11, 51216], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 619, "seek": 277300, "start": 2790.04, "end": 2793.04, "text": " you're continuing to append to what we call a CT source,", "tokens": [51216, 291, 434, 9289, 281, 34116, 281, 437, 321, 818, 257, 19529, 4009, 11, 51366], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 620, "seek": 277300, "start": 2793.04, "end": 2796.04, "text": " which would be used later in a query.", "tokens": [51366, 597, 576, 312, 1143, 1780, 294, 257, 14581, 13, 51516], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 621, "seek": 277300, "start": 2796.04, "end": 2799.04, "text": " I know if you're not familiar with comment table expressions,", "tokens": [51516, 286, 458, 498, 291, 434, 406, 4963, 365, 2871, 3199, 15277, 11, 51666], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 622, "seek": 277300, "start": 2799.04, "end": 2801.04, "text": " it's not going to make any sense.", "tokens": [51666, 309, 311, 406, 516, 281, 652, 604, 2020, 13, 51766], "temperature": 0.0, "avg_logprob": -0.13598657728315475, "compression_ratio": 1.7439024390243902, "no_speech_prob": 0.0016720962012186646}, {"id": 623, "seek": 280104, "start": 2801.08, "end": 2803.08, "text": " I apologize for that.", "tokens": [50366, 286, 12328, 337, 300, 13, 50466], "temperature": 0.0, "avg_logprob": -0.174958684709337, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.001168931950815022}, {"id": 624, "seek": 280104, "start": 2803.08, "end": 2805.08, "text": " I apologize for my microphone.", "tokens": [50466, 286, 12328, 337, 452, 10952, 13, 50566], "temperature": 0.0, "avg_logprob": -0.174958684709337, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.001168931950815022}, {"id": 625, "seek": 280104, "start": 2805.08, "end": 2809.08, "text": " Project set, this is a case where we have", "tokens": [50566, 9849, 992, 11, 341, 307, 257, 1389, 689, 321, 362, 50766], "temperature": 0.0, "avg_logprob": -0.174958684709337, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.001168931950815022}, {"id": 626, "seek": 280104, "start": 2809.08, "end": 2816.08, "text": " a function returning multiple rows in the target list.", "tokens": [50766, 257, 2445, 12678, 3866, 13241, 294, 264, 3779, 1329, 13, 51116], "temperature": 0.0, "avg_logprob": -0.174958684709337, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.001168931950815022}, {"id": 627, "seek": 280104, "start": 2816.08, "end": 2819.08, "text": " Not the from clause in the target list.", "tokens": [51116, 1726, 264, 490, 25925, 294, 264, 3779, 1329, 13, 51266], "temperature": 0.0, "avg_logprob": -0.174958684709337, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.001168931950815022}, {"id": 628, "seek": 280104, "start": 2819.08, "end": 2822.08, "text": " Very interesting.", "tokens": [51266, 4372, 1880, 13, 51416], "temperature": 0.0, "avg_logprob": -0.174958684709337, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.001168931950815022}, {"id": 629, "seek": 280104, "start": 2822.08, "end": 2826.08, "text": " Lock rows, if you do for update, we generate a lock rows node.", "tokens": [51416, 16736, 13241, 11, 498, 291, 360, 337, 5623, 11, 321, 8460, 257, 4017, 13241, 9984, 13, 51616], "temperature": 0.0, "avg_logprob": -0.174958684709337, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.001168931950815022}, {"id": 630, "seek": 280104, "start": 2826.08, "end": 2830.08, "text": " If you do a table sample, we generate a sample scan.", "tokens": [51616, 759, 291, 360, 257, 3199, 6889, 11, 321, 8460, 257, 6889, 11049, 13, 51816], "temperature": 0.0, "avg_logprob": -0.174958684709337, "compression_ratio": 1.6564102564102565, "no_speech_prob": 0.001168931950815022}, {"id": 631, "seek": 283008, "start": 2830.12, "end": 2833.12, "text": " Not surprising.", "tokens": [50366, 1726, 8830, 13, 50516], "temperature": 0.0, "avg_logprob": -0.12851610391036325, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.0015964084304869175}, {"id": 632, "seek": 283008, "start": 2833.12, "end": 2838.12, "text": " If you're using XML table, we actually have a table function scan.", "tokens": [50516, 759, 291, 434, 1228, 43484, 3199, 11, 321, 767, 362, 257, 3199, 2445, 11049, 13, 50766], "temperature": 0.0, "avg_logprob": -0.12851610391036325, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.0015964084304869175}, {"id": 633, "seek": 283008, "start": 2838.12, "end": 2843.12, "text": " I think that is the only function call that uses that node type.", "tokens": [50766, 286, 519, 300, 307, 264, 787, 2445, 818, 300, 4960, 300, 9984, 2010, 13, 51016], "temperature": 0.0, "avg_logprob": -0.12851610391036325, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.0015964084304869175}, {"id": 634, "seek": 283008, "start": 2843.12, "end": 2847.12, "text": " Just a very special, very obscure case there.", "tokens": [51016, 1449, 257, 588, 2121, 11, 588, 34443, 1389, 456, 13, 51216], "temperature": 0.0, "avg_logprob": -0.12851610391036325, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.0015964084304869175}, {"id": 635, "seek": 283008, "start": 2847.12, "end": 2850.12, "text": " Foreign tables, if you're familiar with those,", "tokens": [51216, 20430, 8020, 11, 498, 291, 434, 4963, 365, 729, 11, 51366], "temperature": 0.0, "avg_logprob": -0.12851610391036325, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.0015964084304869175}, {"id": 636, "seek": 283008, "start": 2850.12, "end": 2854.12, "text": " we have special foreign scans for those.", "tokens": [51366, 321, 362, 2121, 5329, 35116, 337, 729, 13, 51566], "temperature": 0.0, "avg_logprob": -0.12851610391036325, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.0015964084304869175}, {"id": 637, "seek": 283008, "start": 2854.12, "end": 2859.12, "text": " If you've ever used CTids, we have a special Tids scan.", "tokens": [51566, 759, 291, 600, 1562, 1143, 19529, 3742, 11, 321, 362, 257, 2121, 314, 3742, 11049, 13, 51816], "temperature": 0.0, "avg_logprob": -0.12851610391036325, "compression_ratio": 1.6683168316831682, "no_speech_prob": 0.0015964084304869175}, {"id": 638, "seek": 285912, "start": 2859.16, "end": 2863.16, "text": " CTids are the physical location of the values.", "tokens": [50366, 19529, 3742, 366, 264, 4001, 4914, 295, 264, 4190, 13, 50566], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 639, "seek": 285912, "start": 2863.16, "end": 2867.16, "text": " We're basically using a Tids scan for that.", "tokens": [50566, 492, 434, 1936, 1228, 257, 314, 3742, 11049, 337, 300, 13, 50766], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 640, "seek": 285912, "start": 2867.16, "end": 2869.16, "text": " This is what a Tids scan would do,", "tokens": [50766, 639, 307, 437, 257, 314, 3742, 11049, 576, 360, 11, 50866], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 641, "seek": 285912, "start": 2869.16, "end": 2873.16, "text": " effectively open a certain page and return a certain value in the page.", "tokens": [50866, 8659, 1269, 257, 1629, 3028, 293, 2736, 257, 1629, 2158, 294, 264, 3028, 13, 51066], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 642, "seek": 285912, "start": 2873.16, "end": 2876.16, "text": " Insert generates an insert node.", "tokens": [51066, 36487, 23815, 364, 8969, 9984, 13, 51216], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 643, "seek": 285912, "start": 2876.16, "end": 2878.16, "text": " Update generates an update node.", "tokens": [51216, 28923, 23815, 364, 5623, 9984, 13, 51316], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 644, "seek": 285912, "start": 2878.16, "end": 2881.16, "text": " Delete generates a delete node.", "tokens": [51316, 49452, 23815, 257, 12097, 9984, 13, 51466], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 645, "seek": 285912, "start": 2881.16, "end": 2883.16, "text": " Truncate does not, by the way.", "tokens": [51466, 1765, 409, 66, 473, 775, 406, 11, 538, 264, 636, 13, 51566], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 646, "seek": 285912, "start": 2883.16, "end": 2885.16, "text": " Truncate is different.", "tokens": [51566, 1765, 409, 66, 473, 307, 819, 13, 51666], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 647, "seek": 285912, "start": 2885.16, "end": 2888.16, "text": " Merge, the merge command generates a merge node.", "tokens": [51666, 6124, 432, 11, 264, 22183, 5622, 23815, 257, 22183, 9984, 13, 51816], "temperature": 0.0, "avg_logprob": -0.1245618786728173, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.0008686732617206872}, {"id": 648, "seek": 288816, "start": 2888.2, "end": 2892.2, "text": " Exists generates something called a semi-join.", "tokens": [50366, 2111, 1751, 23815, 746, 1219, 257, 12909, 12, 5134, 259, 13, 50566], "temperature": 0.0, "avg_logprob": -0.14722353064495583, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0013876694720238447}, {"id": 649, "seek": 288816, "start": 2892.2, "end": 2896.2, "text": " A semi-join is very similar to a normal join,", "tokens": [50566, 316, 12909, 12, 5134, 259, 307, 588, 2531, 281, 257, 2710, 3917, 11, 50766], "temperature": 0.0, "avg_logprob": -0.14722353064495583, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0013876694720238447}, {"id": 650, "seek": 288816, "start": 2896.2, "end": 2900.2, "text": " except it stops after the first intermatch.", "tokens": [50766, 3993, 309, 10094, 934, 264, 700, 728, 76, 852, 13, 50966], "temperature": 0.0, "avg_logprob": -0.14722353064495583, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0013876694720238447}, {"id": 651, "seek": 288816, "start": 2900.2, "end": 2904.2, "text": " So it's similar to any other join, but it stops after the first.", "tokens": [50966, 407, 309, 311, 2531, 281, 604, 661, 3917, 11, 457, 309, 10094, 934, 264, 700, 13, 51166], "temperature": 0.0, "avg_logprob": -0.14722353064495583, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0013876694720238447}, {"id": 652, "seek": 288816, "start": 2904.2, "end": 2907.2, "text": " It doesn't keep going to find out how many matches there are.", "tokens": [51166, 467, 1177, 380, 1066, 516, 281, 915, 484, 577, 867, 10676, 456, 366, 13, 51316], "temperature": 0.0, "avg_logprob": -0.14722353064495583, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0013876694720238447}, {"id": 653, "seek": 288816, "start": 2907.2, "end": 2910.2, "text": " As soon as it finds one, it can stop.", "tokens": [51316, 1018, 2321, 382, 309, 10704, 472, 11, 309, 393, 1590, 13, 51466], "temperature": 0.0, "avg_logprob": -0.14722353064495583, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0013876694720238447}, {"id": 654, "seek": 288816, "start": 2910.2, "end": 2913.2, "text": " The in clause will use also a semi-join,", "tokens": [51466, 440, 294, 25925, 486, 764, 611, 257, 12909, 12, 5134, 259, 11, 51616], "temperature": 0.0, "avg_logprob": -0.14722353064495583, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0013876694720238447}, {"id": 655, "seek": 288816, "start": 2913.2, "end": 2917.2, "text": " and again, some details on how null handling works", "tokens": [51616, 293, 797, 11, 512, 4365, 322, 577, 18184, 13175, 1985, 51816], "temperature": 0.0, "avg_logprob": -0.14722353064495583, "compression_ratio": 1.708695652173913, "no_speech_prob": 0.0013876694720238447}, {"id": 656, "seek": 291720, "start": 2917.24, "end": 2920.24, "text": " for in exists for those people who are curious.", "tokens": [50366, 337, 294, 8198, 337, 729, 561, 567, 366, 6369, 13, 50516], "temperature": 0.0, "avg_logprob": -0.1295438827352321, "compression_ratio": 1.689119170984456, "no_speech_prob": 0.009684781543910503}, {"id": 657, "seek": 291720, "start": 2920.24, "end": 2923.24, "text": " Not exists uses something called an anti-join.", "tokens": [50516, 1726, 8198, 4960, 746, 1219, 364, 6061, 12, 5134, 259, 13, 50666], "temperature": 0.0, "avg_logprob": -0.1295438827352321, "compression_ratio": 1.689119170984456, "no_speech_prob": 0.009684781543910503}, {"id": 658, "seek": 291720, "start": 2923.24, "end": 2925.24, "text": " Not surprising.", "tokens": [50666, 1726, 8830, 13, 50766], "temperature": 0.0, "avg_logprob": -0.1295438827352321, "compression_ratio": 1.689119170984456, "no_speech_prob": 0.009684781543910503}, {"id": 659, "seek": 291720, "start": 2925.24, "end": 2928.24, "text": " Anti-join for not exists.", "tokens": [50766, 27757, 12, 5134, 259, 337, 406, 8198, 13, 50916], "temperature": 0.0, "avg_logprob": -0.1295438827352321, "compression_ratio": 1.689119170984456, "no_speech_prob": 0.009684781543910503}, {"id": 660, "seek": 291720, "start": 2928.24, "end": 2931.24, "text": " And not in is kind of weird.", "tokens": [50916, 400, 406, 294, 307, 733, 295, 3657, 13, 51066], "temperature": 0.0, "avg_logprob": -0.1295438827352321, "compression_ratio": 1.689119170984456, "no_speech_prob": 0.009684781543910503}, {"id": 661, "seek": 291720, "start": 2931.24, "end": 2936.24, "text": " So technically exists and in are almost the same for nulls,", "tokens": [51066, 407, 12120, 8198, 293, 294, 366, 1920, 264, 912, 337, 18184, 82, 11, 51316], "temperature": 0.0, "avg_logprob": -0.1295438827352321, "compression_ratio": 1.689119170984456, "no_speech_prob": 0.009684781543910503}, {"id": 662, "seek": 291720, "start": 2936.24, "end": 2941.24, "text": " but not exists and not in is actually different.", "tokens": [51316, 457, 406, 8198, 293, 406, 294, 307, 767, 819, 13, 51566], "temperature": 0.0, "avg_logprob": -0.1295438827352321, "compression_ratio": 1.689119170984456, "no_speech_prob": 0.009684781543910503}, {"id": 663, "seek": 291720, "start": 2941.24, "end": 2945.24, "text": " And again, we kind of explain it in the query here.", "tokens": [51566, 400, 797, 11, 321, 733, 295, 2903, 309, 294, 264, 14581, 510, 13, 51766], "temperature": 0.0, "avg_logprob": -0.1295438827352321, "compression_ratio": 1.689119170984456, "no_speech_prob": 0.009684781543910503}, {"id": 664, "seek": 294524, "start": 2945.2799999999997, "end": 2948.2799999999997, "text": " We also have something called an outer...", "tokens": [50366, 492, 611, 362, 746, 1219, 364, 10847, 485, 50516], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 665, "seek": 294524, "start": 2948.2799999999997, "end": 2952.2799999999997, "text": " We have a feature that I realized during writing this talk", "tokens": [50516, 492, 362, 257, 4111, 300, 286, 5334, 1830, 3579, 341, 751, 50716], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 666, "seek": 294524, "start": 2952.2799999999997, "end": 2955.2799999999997, "text": " called an outer join removal.", "tokens": [50716, 1219, 364, 10847, 3917, 17933, 13, 50866], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 667, "seek": 294524, "start": 2955.2799999999997, "end": 2959.2799999999997, "text": " Notice I'm doing a left join on something where", "tokens": [50866, 13428, 286, 478, 884, 257, 1411, 3917, 322, 746, 689, 51066], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 668, "seek": 294524, "start": 2959.2799999999997, "end": 2963.2799999999997, "text": " it actually removes the join itself,", "tokens": [51066, 309, 767, 30445, 264, 3917, 2564, 11, 51266], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 669, "seek": 294524, "start": 2963.2799999999997, "end": 2966.2799999999997, "text": " because it has a unique index and it knows", "tokens": [51266, 570, 309, 575, 257, 3845, 8186, 293, 309, 3255, 51416], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 670, "seek": 294524, "start": 2966.2799999999997, "end": 2970.2799999999997, "text": " there's only one possible match, so it actually got rid of the join,", "tokens": [51416, 456, 311, 787, 472, 1944, 2995, 11, 370, 309, 767, 658, 3973, 295, 264, 3917, 11, 51616], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 671, "seek": 294524, "start": 2970.2799999999997, "end": 2972.2799999999997, "text": " which I felt was like crazy.", "tokens": [51616, 597, 286, 2762, 390, 411, 3219, 13, 51716], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 672, "seek": 294524, "start": 2972.2799999999997, "end": 2974.2799999999997, "text": " That optimized pretty smart.", "tokens": [51716, 663, 26941, 1238, 4069, 13, 51816], "temperature": 0.0, "avg_logprob": -0.18648394189699732, "compression_ratio": 1.6244725738396624, "no_speech_prob": 0.0011681494070217013}, {"id": 673, "seek": 297428, "start": 2974.32, "end": 2977.32, "text": " And finally, two things I didn't cover,", "tokens": [50366, 400, 2721, 11, 732, 721, 286, 994, 380, 2060, 11, 50516], "temperature": 0.0, "avg_logprob": -0.15516789754231772, "compression_ratio": 1.3976608187134503, "no_speech_prob": 0.0007909300620667636}, {"id": 674, "seek": 297428, "start": 2977.32, "end": 2980.32, "text": " tuple scan and custom scan.", "tokens": [50516, 2604, 781, 11049, 293, 2375, 11049, 13, 50666], "temperature": 0.0, "avg_logprob": -0.15516789754231772, "compression_ratio": 1.3976608187134503, "no_speech_prob": 0.0007909300620667636}, {"id": 675, "seek": 297428, "start": 2980.32, "end": 2983.32, "text": " There are... There's documentation and postgres about it,", "tokens": [50666, 821, 366, 485, 821, 311, 14333, 293, 2183, 45189, 466, 309, 11, 50816], "temperature": 0.0, "avg_logprob": -0.15516789754231772, "compression_ratio": 1.3976608187134503, "no_speech_prob": 0.0007909300620667636}, {"id": 676, "seek": 297428, "start": 2983.32, "end": 2985.32, "text": " but you don't see this very often.", "tokens": [50816, 457, 291, 500, 380, 536, 341, 588, 2049, 13, 50916], "temperature": 0.0, "avg_logprob": -0.15516789754231772, "compression_ratio": 1.3976608187134503, "no_speech_prob": 0.0007909300620667636}, {"id": 677, "seek": 297428, "start": 2985.32, "end": 2988.32, "text": " So that does complete what I wanted to do.", "tokens": [50916, 407, 300, 775, 3566, 437, 286, 1415, 281, 360, 13, 51066], "temperature": 0.0, "avg_logprob": -0.15516789754231772, "compression_ratio": 1.3976608187134503, "no_speech_prob": 0.0007909300620667636}, {"id": 678, "seek": 297428, "start": 2988.32, "end": 2992.32, "text": " I believe the time is exactly 9.50.", "tokens": [51066, 286, 1697, 264, 565, 307, 2293, 1722, 13, 2803, 13, 51266], "temperature": 0.0, "avg_logprob": -0.15516789754231772, "compression_ratio": 1.3976608187134503, "no_speech_prob": 0.0007909300620667636}, {"id": 679, "seek": 299232, "start": 2992.32, "end": 2994.36, "text": " Thank you.", "tokens": [50366, 1044, 291, 13, 50466], "temperature": 0.0, "avg_logprob": -0.5348320007324219, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.7884012460708618}], "language": "en"}