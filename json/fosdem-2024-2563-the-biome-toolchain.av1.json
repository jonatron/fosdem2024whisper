{"text": " Thank you. Our next speaker is Victorien, who is one of the lead maintainers of the Bayonne open source project. Big round of applause for Victorien. Hi everyone. Is everyone heard me? It's okay. Is everyone heard me? Yeah. I'm Victorien and I'm one of the biome lead maintenance. In this talk, I will present some unique characteristics of biome. We take a high overview of its internal, how it achieves this kind of unique characteristics. What is biome first? Biome is a code linter. Biome analyzes your code statically to find bugs to enforce convention with a team, similar to ES lint. Biome supports natively JavaScript, JavaScript, JS6, TS6. Unlike ES lint, you don't need to install zillion of plugins. You don't need extra dependencies or extra configuration to support TypeScript. Biome also tries to output helpful diagnostics. It brings you some context, explains the issue, and provides a course of action to solve the issue. For example, in the figure, you have a unique biome rule named no accumulating spread, and they warn you against the use of accumulation of the spread operators in reduce and maps. Biome currently provides 200 rules. Some are unique to biome. Overcome from ES lint, ES lint, TypeScript, and over plugins. One of our contributors is currently working on Ter-Wine class sorting. Biome is also a code formator. You can format JavaScript, TypeScript, JS6, TS6, JSON, JSONC, and we are currently working on CSS formatting. In contrast to Prettier, Biome is able to format invalid code, as demonstrated in the animation. Last November, one of the mountaineers of Prettier launched 10,000 Bounty. The goal was to create an alternative to Prettier, a faster alternative, right in the rest. That matching the Prettier output, in particular for the JavaScript formator, over guys come in the play and add monies, reaching $25,000. In one month, we made it. We reached 97% of compatibility with the JavaScript formator, not only for JavaScript, but also for TypeScript, JS6, TS6, and JSON. One question remains, is biome fast? According to our users, it is. Here we have an employee of OpenAI at TestBiome, and using biome to replace the S-Kint and Prettier, they reduce the linting and formatting time from one minute to about two seconds. Biome is also a growing community. We have, we reach 170,000 weekly downloads on NPM, and we have a big player that starts using biome. We have Astro, we have Arespaq, it's a project from Baddance. We have a three-person company, and we have a Gold Sponsor, Shiguredo, a Japanese company. Now you are familiar with biome. I propose you to take a look to its internal. Biome uses a leader follower architecture. We have a main thread, the leader thread. The leader thread spawns a thread for each file to process. This allows to scale with a number of threads on your computer. Each thread parts the file in a structured form, a tree, and under the file, for example, formatting, linting, and so on. Usually, code formators at Cundlinton in the JavaScript world keep every Watt space, every character. And the very tolerant parser is able to represent missing pieces in the tree. For example, here we have a hole because the variable is not initialized. And we have also a bogus node in some other case. And yes, we are able to format and fix the linting issue by replacing the bilete and removing the training space and indentation. If I use less indentation. That's fine. Many rules are like no var or no accumulating spread directly query the concrete syntax tree to output diagnostics. But sometimes you have some rule more complex. For example, no unused variables in the following code. The name variable in the conditional is unused. For this kind of rule, it's very hard to implement the rule just using the concrete syntax tree. In VatsCas, it's good to have extra information. For example, it's under scope, lexical scope. For example, you can see the name parameter is shadowed by the local variable name in the conditional. And you have also to handle a listing issue with function var places. To do so, instead of querying directly the tree, we consume the tree and provide the extra data in a semantic model. The semantic model is able to answer questions like find me all references of such declaration. And is this reference a right reference or read reference? For example, in the previous example, the name is unused because it's only right. It's not read. In September, we have a first version of name resolver. But a very simple name resolver. The goal of a random resolver is to bind the declaration to the references. Basically, this name resolver assigns a unique identifier for each declaration. And they follow an invariant that is a reference refer to a single declaration. You have some example here. It's correctly under scope because the name parameter is linked to the parameter for the same for the return value. And in the local variable case, it's also correctly bind. The issue is this name resolver doesn't play well with TypeScript. In fact, in TypeScript, you can use the same name for tip and variables. For example, here you have an interface and function with the same name. And using this first version of the name resolver, you can see some issues. For example, the return tip person is bound to the function name. And we export only reference the function. Actually, a reference in TypeScript can reference several declaration. Here, the export reference both the interface and the function. And we have also two differences between tips and variables because the return tip references the type and not the function. In fact, yes, maybe. We can just conclude here that a reference can reference a variable, a tip, or both. In fact, it's even worse than that because in TypeScript, a reference can reference an infinite number of declaration. Here, you have an example of the E type, in fact, reference three in fair declaration. You have also over issue, for example, in TypeScript, it's possible to partially reference a tip variable. For example, a case, it's both a tip and a variable. And here, you have the first reference only the variable and the last one, reference only the type. So to support TypeScript, we don't want, in fact, to handle every edge cases because it's very complex to expose this to the developer, to the implementer of the inter-rules. It's similar to you have a reality, TypeScript, and you want to model a simplification that covers most of the cases. What I propose is to keep the invariant that simplifies the API. It's a reference referred to a single declaration. And we handle edge cases with export, in fair, and others with different code. And we keep also important characteristics at tip and variable with the same name are possible and tip and variable duality with cases, for example. I implemented a second version of a name resolver. In fact, the name resolver add a tag to every declaration and references, a tip or variable tag. For example, here, the interface has a tag tip or for tip and the unique identifier we previously talked about. And for variable, for example, function, we have a tag variable and so on. And the reference refer ever a tip or a variable. With this new name resolver, it's possible to detect some issues. For example, here, we have a function, it's unused function, and the tip is used. And one important aspect is you don't expose the tip variable duality in the semantic model. It's only a resolving pace. Once you resolve the names, you just remove the tag and you have previously the same API. You can ask which declines every references of each declaration and so on. In conclusion, Biome is a formator as a linter. It also supports import sorting. Biome is fast because it's white and in a rest. It uses multicore capabilities. Biome is editor-ready because they use an error-tolerant parser and concrete syntax tree. And we support TypeScript, GSX, TSX. It's better included. And we have a tip-aware semantic model that allows to implement some interesting rules as use import tip, use export tip. This year and later, we plan to implement, to support more languages, CSS, HTML, Markdown, and more frameworks, Vue, Angular, Zvelt, Astro. We have already some support for React. We want to improve linter capabilities, multi-file analysis, because for now, we are only able to analyze file by file. We cannot analyze an entire project. And we want also to implement a SAP LIFI Type System to implement some rule of USLint TypeScript. We want also to support plugins. It's a requested feature by many users. And expand the tool chain with other tools. For example, transcut transformation and so on. If you want to help us, you can try BIOM first and report Azure feedbacks. You can also contribute to BIOM. We have a good first Azure on the repository. We have a great resource to create an inter-rule. Emma, the other lead partner, created a video for creating an inter-rule. If you have money, you can sponsor us also. Thank you. And I just put some comments. In fact, you can format your code base, you can link, and you can do both with a single comment, format and link. Thanks. I have some questions. Yes? What was the question you talked about? Sorry, I don't... What vision of ECMAScript do you talk about? Atmosphere. You can maybe... What vision of ECMAScript do you talk about? Advertisers. Okay. Advertisers. ECMAScript direction. Ah, okay. The last one. Are there any other questions? Can you shout? Can we use custom rules? Can we write custom rules already? It's a recurrent question. Currently, no, because we don't support plugins. But we have a core contributor, but currently working on that. We explore two options. First is WSM or JavaScript possibility for writing plugins. And another one is with domain-specific language. Maybe with a grid QL. Yes? For large projects that have large stinker operations, it might be difficult to switch to the bio-jazz stuff. You can have some library to generate bio-contagrations based on some existing configuration. Yes. In the next version, we plan to add some migration tools for pressure. But we're also thinking about doing the same for ESLint. Unfortunately, we have some differences with ESLint. Most of the ESLint rules have an equivalent biome rule. But we have some differences in the option. For example, we support less options because sometimes we think it's not relevant to support some options. And we have also some rules are split in two rules, for example. I can give you an example. It's NoVis alias in ESLint. In fact, ESLint forbid you to write, for example, const self, equal this. In fact, we think it's too restrictive. We decide to split in two rules. First is NoVuselessVis alias. In fact, it checks for use less Vis alias. For example, you use an arrow function here. You don't need to alias this with self. You can just remove the aliasing. And you have a second rule. It's use the arrow function that try to replace function with arrow function. And combining both, you have the same functionality as ESLint, but less opinionated. And we have also overruled more strict, but depend of the case. And this kind of differences make a bit hard to create a migration tool, but we're working on that. Yes? Sorry, the large advantage of criteria compared to formatting tools that came before it was its opinionatedness. What is your stance on the opinionatedness for the biogest? Sorry, can you just repeat the question each time, because for the live streaming? The question is, the pressure is opinionated, is biome the same? Yes, because in fact we decide to match the pressure output because of the challenge. And we implemented every option of pressure, and we decide to match its output. And yes, some users are not so happy because they don't like pressure. But most of the version of ESLint uses pressure. I think it's a good thing to match pressure on that. Yes? With TypeScript ESLint, it has some quite advanced rules, but it depends on the type. So for example, it will warn you if you call an async function without using await, because it knows that the function returns, I promise. Is this the kind of thing you do at the moment, and if not, do you have plans for that kind of semantic analysis? Yes. In fact, currently we implement about all the rules of TypeScript ESLint. It's basically all rules that don't require tip information. And for this kind of rule, no floating promises, I think so. It's this rule, yes. We need tip information. We have several ideas, but personally and the team also want to explore a simplified TAP system. In fact, we want to base our implementation on the new, the upcoming isolated declaration mode of TypeScript. It's for the next version or maybe the next one. And the idea is you require to have a bit more annotation in the code and combine this mode with a simplified tip inference system you can in fact achieve most of the type query in a code base. And I think this mode will gain a lot of support because it's built by Bloomberg and it brings a lot of performances in the TypeScript world. In one or two years, this mode will be the default. I think it's a great bet for us. Thanks. Any other questions? No. Big round of applause for Zipfana.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.6, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50894], "temperature": 0.0, "avg_logprob": -0.4963473840193315, "compression_ratio": 1.2735042735042734, "no_speech_prob": 0.43282073736190796}, {"id": 1, "seek": 0, "start": 10.6, "end": 19.56, "text": " Our next speaker is Victorien, who is one of the lead maintainers of the Bayonne open", "tokens": [50894, 2621, 958, 8145, 307, 15777, 1053, 11, 567, 307, 472, 295, 264, 1477, 6909, 433, 295, 264, 7840, 22419, 1269, 51342], "temperature": 0.0, "avg_logprob": -0.4963473840193315, "compression_ratio": 1.2735042735042734, "no_speech_prob": 0.43282073736190796}, {"id": 2, "seek": 0, "start": 19.56, "end": 21.06, "text": " source project.", "tokens": [51342, 4009, 1716, 13, 51417], "temperature": 0.0, "avg_logprob": -0.4963473840193315, "compression_ratio": 1.2735042735042734, "no_speech_prob": 0.43282073736190796}, {"id": 3, "seek": 0, "start": 21.06, "end": 25.7, "text": " Big round of applause for Victorien.", "tokens": [51417, 5429, 3098, 295, 9969, 337, 15777, 1053, 13, 51649], "temperature": 0.0, "avg_logprob": -0.4963473840193315, "compression_ratio": 1.2735042735042734, "no_speech_prob": 0.43282073736190796}, {"id": 4, "seek": 2570, "start": 25.7, "end": 30.7, "text": " Hi everyone.", "tokens": [50364, 2421, 1518, 13, 50614], "temperature": 0.0, "avg_logprob": -0.44136619567871094, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.04819513112306595}, {"id": 5, "seek": 2570, "start": 30.7, "end": 32.7, "text": " Is everyone heard me?", "tokens": [50614, 1119, 1518, 2198, 385, 30, 50714], "temperature": 0.0, "avg_logprob": -0.44136619567871094, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.04819513112306595}, {"id": 6, "seek": 2570, "start": 32.7, "end": 40.7, "text": " It's okay.", "tokens": [50714, 467, 311, 1392, 13, 51114], "temperature": 0.0, "avg_logprob": -0.44136619567871094, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.04819513112306595}, {"id": 7, "seek": 2570, "start": 40.7, "end": 42.7, "text": " Is everyone heard me?", "tokens": [51114, 1119, 1518, 2198, 385, 30, 51214], "temperature": 0.0, "avg_logprob": -0.44136619567871094, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.04819513112306595}, {"id": 8, "seek": 2570, "start": 42.7, "end": 43.7, "text": " Yeah.", "tokens": [51214, 865, 13, 51264], "temperature": 0.0, "avg_logprob": -0.44136619567871094, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.04819513112306595}, {"id": 9, "seek": 2570, "start": 43.7, "end": 48.7, "text": " I'm Victorien and I'm one of the biome lead maintenance.", "tokens": [51264, 286, 478, 15777, 1053, 293, 286, 478, 472, 295, 264, 3228, 423, 1477, 11258, 13, 51514], "temperature": 0.0, "avg_logprob": -0.44136619567871094, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.04819513112306595}, {"id": 10, "seek": 2570, "start": 48.7, "end": 53.7, "text": " In this talk, I will present some unique characteristics of biome.", "tokens": [51514, 682, 341, 751, 11, 286, 486, 1974, 512, 3845, 10891, 295, 3228, 423, 13, 51764], "temperature": 0.0, "avg_logprob": -0.44136619567871094, "compression_ratio": 1.4701492537313432, "no_speech_prob": 0.04819513112306595}, {"id": 11, "seek": 5370, "start": 53.7, "end": 62.7, "text": " We take a high overview of its internal, how it achieves this kind of unique characteristics.", "tokens": [50364, 492, 747, 257, 1090, 12492, 295, 1080, 6920, 11, 577, 309, 3538, 977, 341, 733, 295, 3845, 10891, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2694493449011514, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.13026557862758636}, {"id": 12, "seek": 5370, "start": 62.7, "end": 65.7, "text": " What is biome first?", "tokens": [50814, 708, 307, 3228, 423, 700, 30, 50964], "temperature": 0.0, "avg_logprob": -0.2694493449011514, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.13026557862758636}, {"id": 13, "seek": 5370, "start": 65.7, "end": 68.7, "text": " Biome is a code linter.", "tokens": [50964, 13007, 423, 307, 257, 3089, 287, 5106, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2694493449011514, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.13026557862758636}, {"id": 14, "seek": 5370, "start": 68.7, "end": 74.7, "text": " Biome analyzes your code statically to find bugs to enforce convention with a team,", "tokens": [51114, 13007, 423, 6459, 12214, 428, 3089, 2219, 984, 281, 915, 15120, 281, 24825, 10286, 365, 257, 1469, 11, 51414], "temperature": 0.0, "avg_logprob": -0.2694493449011514, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.13026557862758636}, {"id": 15, "seek": 5370, "start": 74.7, "end": 77.7, "text": " similar to ES lint.", "tokens": [51414, 2531, 281, 12564, 287, 686, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2694493449011514, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.13026557862758636}, {"id": 16, "seek": 5370, "start": 77.7, "end": 82.7, "text": " Biome supports natively JavaScript, JavaScript, JS6, TS6.", "tokens": [51564, 13007, 423, 9346, 8470, 356, 15778, 11, 15778, 11, 33063, 21, 11, 37645, 21, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2694493449011514, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.13026557862758636}, {"id": 17, "seek": 8270, "start": 82.7, "end": 87.7, "text": " Unlike ES lint, you don't need to install zillion of plugins.", "tokens": [50364, 17657, 12564, 287, 686, 11, 291, 500, 380, 643, 281, 3625, 710, 11836, 295, 33759, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16217075811850057, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.0167983490973711}, {"id": 18, "seek": 8270, "start": 87.7, "end": 96.7, "text": " You don't need extra dependencies or extra configuration to support TypeScript.", "tokens": [50614, 509, 500, 380, 643, 2857, 36606, 420, 2857, 11694, 281, 1406, 15576, 14237, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16217075811850057, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.0167983490973711}, {"id": 19, "seek": 8270, "start": 96.7, "end": 101.7, "text": " Biome also tries to output helpful diagnostics.", "tokens": [51064, 13007, 423, 611, 9898, 281, 5598, 854, 906, 43215, 1167, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16217075811850057, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.0167983490973711}, {"id": 20, "seek": 8270, "start": 101.7, "end": 107.7, "text": " It brings you some context, explains the issue, and provides a course of action to solve the", "tokens": [51314, 467, 5607, 291, 512, 4319, 11, 13948, 264, 2734, 11, 293, 6417, 257, 1164, 295, 3069, 281, 5039, 264, 51614], "temperature": 0.0, "avg_logprob": -0.16217075811850057, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.0167983490973711}, {"id": 21, "seek": 8270, "start": 107.7, "end": 108.7, "text": " issue.", "tokens": [51614, 2734, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16217075811850057, "compression_ratio": 1.5052083333333333, "no_speech_prob": 0.0167983490973711}, {"id": 22, "seek": 10870, "start": 108.7, "end": 115.7, "text": " For example, in the figure, you have a unique biome rule named no accumulating spread,", "tokens": [50364, 1171, 1365, 11, 294, 264, 2573, 11, 291, 362, 257, 3845, 3228, 423, 4978, 4926, 572, 12989, 12162, 3974, 11, 50714], "temperature": 0.0, "avg_logprob": -0.18455626887659873, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.022302187979221344}, {"id": 23, "seek": 10870, "start": 115.7, "end": 126.7, "text": " and they warn you against the use of accumulation of the spread operators in reduce and maps.", "tokens": [50714, 293, 436, 12286, 291, 1970, 264, 764, 295, 35647, 295, 264, 3974, 19077, 294, 5407, 293, 11317, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18455626887659873, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.022302187979221344}, {"id": 24, "seek": 10870, "start": 126.7, "end": 130.7, "text": " Biome currently provides 200 rules.", "tokens": [51264, 13007, 423, 4362, 6417, 2331, 4474, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18455626887659873, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.022302187979221344}, {"id": 25, "seek": 10870, "start": 130.7, "end": 132.7, "text": " Some are unique to biome.", "tokens": [51464, 2188, 366, 3845, 281, 3228, 423, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18455626887659873, "compression_ratio": 1.4938271604938271, "no_speech_prob": 0.022302187979221344}, {"id": 26, "seek": 13270, "start": 132.7, "end": 139.7, "text": " Overcome from ES lint, ES lint, TypeScript, and over plugins.", "tokens": [50364, 4886, 1102, 490, 12564, 287, 686, 11, 12564, 287, 686, 11, 15576, 14237, 11, 293, 670, 33759, 13, 50714], "temperature": 0.0, "avg_logprob": -0.25049169063568116, "compression_ratio": 1.5568181818181819, "no_speech_prob": 0.021999694406986237}, {"id": 27, "seek": 13270, "start": 139.7, "end": 147.7, "text": " One of our contributors is currently working on Ter-Wine class sorting.", "tokens": [50714, 1485, 295, 527, 45627, 307, 4362, 1364, 322, 6564, 12, 54, 533, 1508, 32411, 13, 51114], "temperature": 0.0, "avg_logprob": -0.25049169063568116, "compression_ratio": 1.5568181818181819, "no_speech_prob": 0.021999694406986237}, {"id": 28, "seek": 13270, "start": 147.7, "end": 150.7, "text": " Biome is also a code formator.", "tokens": [51114, 13007, 423, 307, 611, 257, 3089, 1254, 1639, 13, 51264], "temperature": 0.0, "avg_logprob": -0.25049169063568116, "compression_ratio": 1.5568181818181819, "no_speech_prob": 0.021999694406986237}, {"id": 29, "seek": 13270, "start": 150.7, "end": 158.7, "text": " You can format JavaScript, TypeScript, JS6, TS6, JSON, JSONC, and we are currently working on CSS formatting.", "tokens": [51264, 509, 393, 7877, 15778, 11, 15576, 14237, 11, 33063, 21, 11, 37645, 21, 11, 31828, 11, 31828, 34, 11, 293, 321, 366, 4362, 1364, 322, 24387, 39366, 13, 51664], "temperature": 0.0, "avg_logprob": -0.25049169063568116, "compression_ratio": 1.5568181818181819, "no_speech_prob": 0.021999694406986237}, {"id": 30, "seek": 15870, "start": 158.7, "end": 171.7, "text": " In contrast to Prettier, Biome is able to format invalid code, as demonstrated in the animation.", "tokens": [50364, 682, 8712, 281, 9739, 25402, 11, 13007, 423, 307, 1075, 281, 7877, 34702, 3089, 11, 382, 18772, 294, 264, 9603, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2683885798734777, "compression_ratio": 1.502857142857143, "no_speech_prob": 0.008038245141506195}, {"id": 31, "seek": 15870, "start": 171.7, "end": 177.7, "text": " Last November, one of the mountaineers of Prettier launched 10,000 Bounty.", "tokens": [51014, 5264, 7674, 11, 472, 295, 264, 6937, 68, 433, 295, 9739, 25402, 8730, 1266, 11, 1360, 363, 33450, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2683885798734777, "compression_ratio": 1.502857142857143, "no_speech_prob": 0.008038245141506195}, {"id": 32, "seek": 15870, "start": 177.7, "end": 185.7, "text": " The goal was to create an alternative to Prettier, a faster alternative, right in the rest.", "tokens": [51314, 440, 3387, 390, 281, 1884, 364, 8535, 281, 9739, 25402, 11, 257, 4663, 8535, 11, 558, 294, 264, 1472, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2683885798734777, "compression_ratio": 1.502857142857143, "no_speech_prob": 0.008038245141506195}, {"id": 33, "seek": 18570, "start": 185.7, "end": 206.7, "text": " That matching the Prettier output, in particular for the JavaScript formator, over guys come in the play and add monies, reaching $25,000.", "tokens": [50364, 663, 14324, 264, 9739, 25402, 5598, 11, 294, 1729, 337, 264, 15778, 1254, 1639, 11, 670, 1074, 808, 294, 264, 862, 293, 909, 1108, 530, 11, 9906, 1848, 6074, 11, 1360, 13, 51414], "temperature": 0.0, "avg_logprob": -0.34940102365281844, "compression_ratio": 1.1794871794871795, "no_speech_prob": 0.09932833164930344}, {"id": 34, "seek": 20670, "start": 206.7, "end": 209.7, "text": " In one month, we made it.", "tokens": [50364, 682, 472, 1618, 11, 321, 1027, 309, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14659670929410565, "compression_ratio": 1.331360946745562, "no_speech_prob": 0.27684733271598816}, {"id": 35, "seek": 20670, "start": 209.7, "end": 222.7, "text": " We reached 97% of compatibility with the JavaScript formator, not only for JavaScript, but also for TypeScript, JS6, TS6, and JSON.", "tokens": [50514, 492, 6488, 23399, 4, 295, 34237, 365, 264, 15778, 1254, 1639, 11, 406, 787, 337, 15778, 11, 457, 611, 337, 15576, 14237, 11, 33063, 21, 11, 37645, 21, 11, 293, 31828, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14659670929410565, "compression_ratio": 1.331360946745562, "no_speech_prob": 0.27684733271598816}, {"id": 36, "seek": 20670, "start": 222.7, "end": 226.7, "text": " One question remains, is biome fast?", "tokens": [51164, 1485, 1168, 7023, 11, 307, 3228, 423, 2370, 30, 51364], "temperature": 0.0, "avg_logprob": -0.14659670929410565, "compression_ratio": 1.331360946745562, "no_speech_prob": 0.27684733271598816}, {"id": 37, "seek": 20670, "start": 226.7, "end": 229.7, "text": " According to our users, it is.", "tokens": [51364, 7328, 281, 527, 5022, 11, 309, 307, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14659670929410565, "compression_ratio": 1.331360946745562, "no_speech_prob": 0.27684733271598816}, {"id": 38, "seek": 22970, "start": 229.7, "end": 250.7, "text": " Here we have an employee of OpenAI at TestBiome, and using biome to replace the S-Kint and Prettier, they reduce the linting and formatting time from one minute to about two seconds.", "tokens": [50364, 1692, 321, 362, 364, 10738, 295, 7238, 48698, 412, 9279, 33, 72, 423, 11, 293, 1228, 3228, 423, 281, 7406, 264, 318, 12, 42, 686, 293, 9739, 25402, 11, 436, 5407, 264, 287, 686, 278, 293, 39366, 565, 490, 472, 3456, 281, 466, 732, 3949, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3668239593505859, "compression_ratio": 1.318840579710145, "no_speech_prob": 0.07576698809862137}, {"id": 39, "seek": 25070, "start": 250.7, "end": 253.7, "text": " Biome is also a growing community.", "tokens": [50364, 13007, 423, 307, 611, 257, 4194, 1768, 13, 50514], "temperature": 0.0, "avg_logprob": -0.21801659417530847, "compression_ratio": 1.3133333333333332, "no_speech_prob": 0.8659044504165649}, {"id": 40, "seek": 25070, "start": 253.7, "end": 267.7, "text": " We have, we reach 170,000 weekly downloads on NPM, and we have a big player that starts using biome.", "tokens": [50514, 492, 362, 11, 321, 2524, 27228, 11, 1360, 12460, 36553, 322, 426, 18819, 11, 293, 321, 362, 257, 955, 4256, 300, 3719, 1228, 3228, 423, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21801659417530847, "compression_ratio": 1.3133333333333332, "no_speech_prob": 0.8659044504165649}, {"id": 41, "seek": 25070, "start": 267.7, "end": 272.7, "text": " We have Astro, we have Arespaq, it's a project from Baddance.", "tokens": [51214, 492, 362, 12884, 340, 11, 321, 362, 316, 495, 4306, 80, 11, 309, 311, 257, 1716, 490, 11523, 67, 719, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21801659417530847, "compression_ratio": 1.3133333333333332, "no_speech_prob": 0.8659044504165649}, {"id": 42, "seek": 27270, "start": 272.7, "end": 281.7, "text": " We have a three-person company, and we have a Gold Sponsor, Shiguredo, a Japanese company.", "tokens": [50364, 492, 362, 257, 1045, 12, 10813, 2237, 11, 293, 321, 362, 257, 6731, 1738, 892, 284, 11, 1160, 328, 540, 2595, 11, 257, 5433, 2237, 13, 50814], "temperature": 0.0, "avg_logprob": -0.4796383695782356, "compression_ratio": 1.3, "no_speech_prob": 0.27045124769210815}, {"id": 43, "seek": 27270, "start": 281.7, "end": 284.7, "text": " Now you are familiar with biome.", "tokens": [50814, 823, 291, 366, 4963, 365, 3228, 423, 13, 50964], "temperature": 0.0, "avg_logprob": -0.4796383695782356, "compression_ratio": 1.3, "no_speech_prob": 0.27045124769210815}, {"id": 44, "seek": 27270, "start": 284.7, "end": 291.7, "text": " I propose you to take a look to its internal.", "tokens": [50964, 286, 17421, 291, 281, 747, 257, 574, 281, 1080, 6920, 13, 51314], "temperature": 0.0, "avg_logprob": -0.4796383695782356, "compression_ratio": 1.3, "no_speech_prob": 0.27045124769210815}, {"id": 45, "seek": 29170, "start": 291.7, "end": 294.7, "text": " Biome uses a leader follower architecture.", "tokens": [50364, 13007, 423, 4960, 257, 5263, 35413, 9482, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13487235979102125, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.24205978214740753}, {"id": 46, "seek": 29170, "start": 294.7, "end": 297.7, "text": " We have a main thread, the leader thread.", "tokens": [50514, 492, 362, 257, 2135, 7207, 11, 264, 5263, 7207, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13487235979102125, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.24205978214740753}, {"id": 47, "seek": 29170, "start": 297.7, "end": 302.7, "text": " The leader thread spawns a thread for each file to process.", "tokens": [50664, 440, 5263, 7207, 17088, 82, 257, 7207, 337, 1184, 3991, 281, 1399, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13487235979102125, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.24205978214740753}, {"id": 48, "seek": 29170, "start": 302.7, "end": 307.7, "text": " This allows to scale with a number of threads on your computer.", "tokens": [50914, 639, 4045, 281, 4373, 365, 257, 1230, 295, 19314, 322, 428, 3820, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13487235979102125, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.24205978214740753}, {"id": 49, "seek": 29170, "start": 307.7, "end": 320.7, "text": " Each thread parts the file in a structured form, a tree, and under the file, for example, formatting, linting, and so on.", "tokens": [51164, 6947, 7207, 3166, 264, 3991, 294, 257, 18519, 1254, 11, 257, 4230, 11, 293, 833, 264, 3991, 11, 337, 1365, 11, 39366, 11, 287, 686, 278, 11, 293, 370, 322, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13487235979102125, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.24205978214740753}, {"id": 50, "seek": 32070, "start": 321.7, "end": 331.7, "text": " Usually, code formators at Cundlinton in the JavaScript world keep every Watt space, every character.", "tokens": [50414, 11419, 11, 3089, 1254, 3391, 412, 383, 997, 75, 12442, 294, 264, 15778, 1002, 1066, 633, 343, 1591, 1901, 11, 633, 2517, 13, 50914], "temperature": 0.0, "avg_logprob": -0.37444432576497394, "compression_ratio": 1.4375, "no_speech_prob": 0.009788252413272858}, {"id": 51, "seek": 32070, "start": 331.7, "end": 339.7, "text": " And the very tolerant parser is able to represent missing pieces in the tree.", "tokens": [50914, 400, 264, 588, 45525, 21156, 260, 307, 1075, 281, 2906, 5361, 3755, 294, 264, 4230, 13, 51314], "temperature": 0.0, "avg_logprob": -0.37444432576497394, "compression_ratio": 1.4375, "no_speech_prob": 0.009788252413272858}, {"id": 52, "seek": 32070, "start": 339.7, "end": 344.7, "text": " For example, here we have a hole because the variable is not initialized.", "tokens": [51314, 1171, 1365, 11, 510, 321, 362, 257, 5458, 570, 264, 7006, 307, 406, 5883, 1602, 13, 51564], "temperature": 0.0, "avg_logprob": -0.37444432576497394, "compression_ratio": 1.4375, "no_speech_prob": 0.009788252413272858}, {"id": 53, "seek": 34470, "start": 345.7, "end": 349.7, "text": " And we have also a bogus node in some other case.", "tokens": [50414, 400, 321, 362, 611, 257, 26132, 301, 9984, 294, 512, 661, 1389, 13, 50614], "temperature": 0.0, "avg_logprob": -0.22701107509552487, "compression_ratio": 1.46, "no_speech_prob": 0.0034503184724599123}, {"id": 54, "seek": 34470, "start": 352.7, "end": 361.7, "text": " And yes, we are able to format and fix the linting issue by replacing the bilete and removing the training space and indentation.", "tokens": [50764, 400, 2086, 11, 321, 366, 1075, 281, 7877, 293, 3191, 264, 287, 686, 278, 2734, 538, 19139, 264, 8588, 3498, 293, 12720, 264, 3097, 1901, 293, 44494, 399, 13, 51214], "temperature": 0.0, "avg_logprob": -0.22701107509552487, "compression_ratio": 1.46, "no_speech_prob": 0.0034503184724599123}, {"id": 55, "seek": 34470, "start": 361.7, "end": 363.7, "text": " If I use less indentation.", "tokens": [51214, 759, 286, 764, 1570, 44494, 399, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22701107509552487, "compression_ratio": 1.46, "no_speech_prob": 0.0034503184724599123}, {"id": 56, "seek": 34470, "start": 365.7, "end": 366.7, "text": " That's fine.", "tokens": [51414, 663, 311, 2489, 13, 51464], "temperature": 0.0, "avg_logprob": -0.22701107509552487, "compression_ratio": 1.46, "no_speech_prob": 0.0034503184724599123}, {"id": 57, "seek": 36670, "start": 366.7, "end": 377.7, "text": " Many rules are like no var or no accumulating spread directly query the concrete syntax tree to output diagnostics.", "tokens": [50364, 5126, 4474, 366, 411, 572, 1374, 420, 572, 12989, 12162, 3974, 3838, 14581, 264, 9859, 28431, 4230, 281, 5598, 43215, 1167, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1823915575371414, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.1141236275434494}, {"id": 58, "seek": 36670, "start": 377.7, "end": 379.7, "text": " But sometimes you have some rule more complex.", "tokens": [50914, 583, 2171, 291, 362, 512, 4978, 544, 3997, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1823915575371414, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.1141236275434494}, {"id": 59, "seek": 36670, "start": 379.7, "end": 384.7, "text": " For example, no unused variables in the following code.", "tokens": [51014, 1171, 1365, 11, 572, 44383, 9102, 294, 264, 3480, 3089, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1823915575371414, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.1141236275434494}, {"id": 60, "seek": 36670, "start": 384.7, "end": 390.7, "text": " The name variable in the conditional is unused.", "tokens": [51264, 440, 1315, 7006, 294, 264, 27708, 307, 44383, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1823915575371414, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.1141236275434494}, {"id": 61, "seek": 39070, "start": 390.7, "end": 400.7, "text": " For this kind of rule, it's very hard to implement the rule just using the concrete syntax tree.", "tokens": [50364, 1171, 341, 733, 295, 4978, 11, 309, 311, 588, 1152, 281, 4445, 264, 4978, 445, 1228, 264, 9859, 28431, 4230, 13, 50864], "temperature": 0.0, "avg_logprob": -0.17679447463796108, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.024209078401327133}, {"id": 62, "seek": 39070, "start": 400.7, "end": 403.7, "text": " In VatsCas, it's good to have extra information.", "tokens": [50864, 682, 691, 1720, 34, 296, 11, 309, 311, 665, 281, 362, 2857, 1589, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17679447463796108, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.024209078401327133}, {"id": 63, "seek": 39070, "start": 403.7, "end": 405.7, "text": " For example, it's under scope, lexical scope.", "tokens": [51014, 1171, 1365, 11, 309, 311, 833, 11923, 11, 476, 87, 804, 11923, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17679447463796108, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.024209078401327133}, {"id": 64, "seek": 39070, "start": 405.7, "end": 416.7, "text": " For example, you can see the name parameter is shadowed by the local variable name in the conditional.", "tokens": [51114, 1171, 1365, 11, 291, 393, 536, 264, 1315, 13075, 307, 8576, 292, 538, 264, 2654, 7006, 1315, 294, 264, 27708, 13, 51664], "temperature": 0.0, "avg_logprob": -0.17679447463796108, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.024209078401327133}, {"id": 65, "seek": 41670, "start": 417.7, "end": 424.7, "text": " And you have also to handle a listing issue with function var places.", "tokens": [50414, 400, 291, 362, 611, 281, 4813, 257, 22161, 2734, 365, 2445, 1374, 3190, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3156123990597932, "compression_ratio": 1.3676470588235294, "no_speech_prob": 0.0032133215572685003}, {"id": 66, "seek": 41670, "start": 426.7, "end": 438.7, "text": " To do so, instead of querying directly the tree, we consume the tree and provide the extra data in a semantic model.", "tokens": [50864, 1407, 360, 370, 11, 2602, 295, 7083, 1840, 3838, 264, 4230, 11, 321, 14732, 264, 4230, 293, 2893, 264, 2857, 1412, 294, 257, 47982, 2316, 13, 51464], "temperature": 0.0, "avg_logprob": -0.3156123990597932, "compression_ratio": 1.3676470588235294, "no_speech_prob": 0.0032133215572685003}, {"id": 67, "seek": 43870, "start": 439.7, "end": 447.7, "text": " The semantic model is able to answer questions like find me all references of such declaration.", "tokens": [50414, 440, 47982, 2316, 307, 1075, 281, 1867, 1651, 411, 915, 385, 439, 15400, 295, 1270, 27606, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1877643241256964, "compression_ratio": 1.5029940119760479, "no_speech_prob": 0.006063392851501703}, {"id": 68, "seek": 43870, "start": 447.7, "end": 452.7, "text": " And is this reference a right reference or read reference?", "tokens": [50814, 400, 307, 341, 6408, 257, 558, 6408, 420, 1401, 6408, 30, 51064], "temperature": 0.0, "avg_logprob": -0.1877643241256964, "compression_ratio": 1.5029940119760479, "no_speech_prob": 0.006063392851501703}, {"id": 69, "seek": 43870, "start": 452.7, "end": 458.7, "text": " For example, in the previous example, the name is unused because it's only right.", "tokens": [51064, 1171, 1365, 11, 294, 264, 3894, 1365, 11, 264, 1315, 307, 44383, 570, 309, 311, 787, 558, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1877643241256964, "compression_ratio": 1.5029940119760479, "no_speech_prob": 0.006063392851501703}, {"id": 70, "seek": 43870, "start": 458.7, "end": 459.7, "text": " It's not read.", "tokens": [51364, 467, 311, 406, 1401, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1877643241256964, "compression_ratio": 1.5029940119760479, "no_speech_prob": 0.006063392851501703}, {"id": 71, "seek": 45970, "start": 459.7, "end": 470.7, "text": " In September, we have a first version of name resolver.", "tokens": [50364, 682, 7216, 11, 321, 362, 257, 700, 3037, 295, 1315, 34480, 13, 50914], "temperature": 0.0, "avg_logprob": -0.21180218663708916, "compression_ratio": 1.5947712418300655, "no_speech_prob": 0.0019269121112301946}, {"id": 72, "seek": 45970, "start": 470.7, "end": 475.7, "text": " But a very simple name resolver.", "tokens": [50914, 583, 257, 588, 2199, 1315, 34480, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21180218663708916, "compression_ratio": 1.5947712418300655, "no_speech_prob": 0.0019269121112301946}, {"id": 73, "seek": 45970, "start": 475.7, "end": 480.7, "text": " The goal of a random resolver is to bind the declaration to the references.", "tokens": [51164, 440, 3387, 295, 257, 4974, 34480, 307, 281, 14786, 264, 27606, 281, 264, 15400, 13, 51414], "temperature": 0.0, "avg_logprob": -0.21180218663708916, "compression_ratio": 1.5947712418300655, "no_speech_prob": 0.0019269121112301946}, {"id": 74, "seek": 45970, "start": 480.7, "end": 487.7, "text": " Basically, this name resolver assigns a unique identifier for each declaration.", "tokens": [51414, 8537, 11, 341, 1315, 34480, 6269, 82, 257, 3845, 45690, 337, 1184, 27606, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21180218663708916, "compression_ratio": 1.5947712418300655, "no_speech_prob": 0.0019269121112301946}, {"id": 75, "seek": 48770, "start": 488.7, "end": 496.7, "text": " And they follow an invariant that is a reference refer to a single declaration.", "tokens": [50414, 400, 436, 1524, 364, 33270, 394, 300, 307, 257, 6408, 2864, 281, 257, 2167, 27606, 13, 50814], "temperature": 0.0, "avg_logprob": -0.22465296892019418, "compression_ratio": 1.457516339869281, "no_speech_prob": 0.0032471036538481712}, {"id": 76, "seek": 48770, "start": 496.7, "end": 498.7, "text": " You have some example here.", "tokens": [50814, 509, 362, 512, 1365, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.22465296892019418, "compression_ratio": 1.457516339869281, "no_speech_prob": 0.0032471036538481712}, {"id": 77, "seek": 48770, "start": 500.7, "end": 511.7, "text": " It's correctly under scope because the name parameter is linked to the parameter for the same for the return value.", "tokens": [51014, 467, 311, 8944, 833, 11923, 570, 264, 1315, 13075, 307, 9408, 281, 264, 13075, 337, 264, 912, 337, 264, 2736, 2158, 13, 51564], "temperature": 0.0, "avg_logprob": -0.22465296892019418, "compression_ratio": 1.457516339869281, "no_speech_prob": 0.0032471036538481712}, {"id": 78, "seek": 51170, "start": 511.7, "end": 517.7, "text": " And in the local variable case, it's also correctly bind.", "tokens": [50364, 400, 294, 264, 2654, 7006, 1389, 11, 309, 311, 611, 8944, 14786, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1398277691432408, "compression_ratio": 1.5, "no_speech_prob": 0.010023422539234161}, {"id": 79, "seek": 51170, "start": 520.7, "end": 525.7, "text": " The issue is this name resolver doesn't play well with TypeScript.", "tokens": [50814, 440, 2734, 307, 341, 1315, 34480, 1177, 380, 862, 731, 365, 15576, 14237, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1398277691432408, "compression_ratio": 1.5, "no_speech_prob": 0.010023422539234161}, {"id": 80, "seek": 51170, "start": 527.7, "end": 532.7, "text": " In fact, in TypeScript, you can use the same name for tip and variables.", "tokens": [51164, 682, 1186, 11, 294, 15576, 14237, 11, 291, 393, 764, 264, 912, 1315, 337, 4125, 293, 9102, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1398277691432408, "compression_ratio": 1.5, "no_speech_prob": 0.010023422539234161}, {"id": 81, "seek": 51170, "start": 532.7, "end": 535.7, "text": " For example, here you have an interface and function with the same name.", "tokens": [51414, 1171, 1365, 11, 510, 291, 362, 364, 9226, 293, 2445, 365, 264, 912, 1315, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1398277691432408, "compression_ratio": 1.5, "no_speech_prob": 0.010023422539234161}, {"id": 82, "seek": 53570, "start": 536.7, "end": 542.7, "text": " And using this first version of the name resolver, you can see some issues.", "tokens": [50414, 400, 1228, 341, 700, 3037, 295, 264, 1315, 34480, 11, 291, 393, 536, 512, 2663, 13, 50714], "temperature": 0.0, "avg_logprob": -0.17635726928710938, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.014619638212025166}, {"id": 83, "seek": 53570, "start": 542.7, "end": 548.7, "text": " For example, the return tip person is bound to the function name.", "tokens": [50714, 1171, 1365, 11, 264, 2736, 4125, 954, 307, 5472, 281, 264, 2445, 1315, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17635726928710938, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.014619638212025166}, {"id": 84, "seek": 53570, "start": 548.7, "end": 552.7, "text": " And we export only reference the function.", "tokens": [51014, 400, 321, 10725, 787, 6408, 264, 2445, 13, 51214], "temperature": 0.0, "avg_logprob": -0.17635726928710938, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.014619638212025166}, {"id": 85, "seek": 53570, "start": 554.7, "end": 562.7, "text": " Actually, a reference in TypeScript can reference several declaration.", "tokens": [51314, 5135, 11, 257, 6408, 294, 15576, 14237, 393, 6408, 2940, 27606, 13, 51714], "temperature": 0.0, "avg_logprob": -0.17635726928710938, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.014619638212025166}, {"id": 86, "seek": 56270, "start": 562.7, "end": 566.7, "text": " Here, the export reference both the interface and the function.", "tokens": [50364, 1692, 11, 264, 10725, 6408, 1293, 264, 9226, 293, 264, 2445, 13, 50564], "temperature": 0.0, "avg_logprob": -0.25056885981905286, "compression_ratio": 1.68, "no_speech_prob": 0.001547273714095354}, {"id": 87, "seek": 56270, "start": 568.7, "end": 576.7, "text": " And we have also two differences between tips and variables because the return tip references the type and not the function.", "tokens": [50664, 400, 321, 362, 611, 732, 7300, 1296, 6082, 293, 9102, 570, 264, 2736, 4125, 15400, 264, 2010, 293, 406, 264, 2445, 13, 51064], "temperature": 0.0, "avg_logprob": -0.25056885981905286, "compression_ratio": 1.68, "no_speech_prob": 0.001547273714095354}, {"id": 88, "seek": 56270, "start": 579.7, "end": 582.7, "text": " In fact, yes, maybe.", "tokens": [51214, 682, 1186, 11, 2086, 11, 1310, 13, 51364], "temperature": 0.0, "avg_logprob": -0.25056885981905286, "compression_ratio": 1.68, "no_speech_prob": 0.001547273714095354}, {"id": 89, "seek": 56270, "start": 583.7, "end": 591.7, "text": " We can just conclude here that a reference can reference a variable, a tip, or both.", "tokens": [51414, 492, 393, 445, 16886, 510, 300, 257, 6408, 393, 6408, 257, 7006, 11, 257, 4125, 11, 420, 1293, 13, 51814], "temperature": 0.0, "avg_logprob": -0.25056885981905286, "compression_ratio": 1.68, "no_speech_prob": 0.001547273714095354}, {"id": 90, "seek": 59270, "start": 593.7, "end": 602.7, "text": " In fact, it's even worse than that because in TypeScript, a reference can reference an infinite number of declaration.", "tokens": [50414, 682, 1186, 11, 309, 311, 754, 5324, 813, 300, 570, 294, 15576, 14237, 11, 257, 6408, 393, 6408, 364, 13785, 1230, 295, 27606, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19006201685691365, "compression_ratio": 1.474820143884892, "no_speech_prob": 0.0024212421849370003}, {"id": 91, "seek": 59270, "start": 602.7, "end": 614.7, "text": " Here, you have an example of the E type, in fact, reference three in fair declaration.", "tokens": [50864, 1692, 11, 291, 362, 364, 1365, 295, 264, 462, 2010, 11, 294, 1186, 11, 6408, 1045, 294, 3143, 27606, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19006201685691365, "compression_ratio": 1.474820143884892, "no_speech_prob": 0.0024212421849370003}, {"id": 92, "seek": 62270, "start": 622.7, "end": 629.7, "text": " You have also over issue, for example, in TypeScript, it's possible to partially reference a tip variable.", "tokens": [50364, 509, 362, 611, 670, 2734, 11, 337, 1365, 11, 294, 15576, 14237, 11, 309, 311, 1944, 281, 18886, 6408, 257, 4125, 7006, 13, 50714], "temperature": 0.0, "avg_logprob": -0.20258981790115585, "compression_ratio": 1.6602564102564104, "no_speech_prob": 0.0029251649975776672}, {"id": 93, "seek": 62270, "start": 629.7, "end": 633.7, "text": " For example, a case, it's both a tip and a variable.", "tokens": [50714, 1171, 1365, 11, 257, 1389, 11, 309, 311, 1293, 257, 4125, 293, 257, 7006, 13, 50914], "temperature": 0.0, "avg_logprob": -0.20258981790115585, "compression_ratio": 1.6602564102564104, "no_speech_prob": 0.0029251649975776672}, {"id": 94, "seek": 62270, "start": 633.7, "end": 643.7, "text": " And here, you have the first reference only the variable and the last one, reference only the type.", "tokens": [50914, 400, 510, 11, 291, 362, 264, 700, 6408, 787, 264, 7006, 293, 264, 1036, 472, 11, 6408, 787, 264, 2010, 13, 51414], "temperature": 0.0, "avg_logprob": -0.20258981790115585, "compression_ratio": 1.6602564102564104, "no_speech_prob": 0.0029251649975776672}, {"id": 95, "seek": 64370, "start": 644.7, "end": 659.7, "text": " So to support TypeScript, we don't want, in fact, to handle every edge cases because it's very complex to expose this to the developer,", "tokens": [50414, 407, 281, 1406, 15576, 14237, 11, 321, 500, 380, 528, 11, 294, 1186, 11, 281, 4813, 633, 4691, 3331, 570, 309, 311, 588, 3997, 281, 19219, 341, 281, 264, 10754, 11, 51164], "temperature": 0.0, "avg_logprob": -0.2720439632733663, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.007056538946926594}, {"id": 96, "seek": 64370, "start": 659.7, "end": 664.7, "text": " to the implementer of the inter-rules.", "tokens": [51164, 281, 264, 4445, 260, 295, 264, 728, 12, 81, 3473, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2720439632733663, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.007056538946926594}, {"id": 97, "seek": 66470, "start": 665.7, "end": 673.7, "text": " It's similar to you have a reality, TypeScript, and you want to model a simplification that covers most of the cases.", "tokens": [50414, 467, 311, 2531, 281, 291, 362, 257, 4103, 11, 15576, 14237, 11, 293, 291, 528, 281, 2316, 257, 6883, 3774, 300, 10538, 881, 295, 264, 3331, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1874752406832538, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.005395679268985987}, {"id": 98, "seek": 66470, "start": 675.7, "end": 680.7, "text": " What I propose is to keep the invariant that simplifies the API.", "tokens": [50914, 708, 286, 17421, 307, 281, 1066, 264, 33270, 394, 300, 6883, 11221, 264, 9362, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1874752406832538, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.005395679268985987}, {"id": 99, "seek": 66470, "start": 680.7, "end": 684.7, "text": " It's a reference referred to a single declaration.", "tokens": [51164, 467, 311, 257, 6408, 10839, 281, 257, 2167, 27606, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1874752406832538, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.005395679268985987}, {"id": 100, "seek": 66470, "start": 685.7, "end": 690.7, "text": " And we handle edge cases with export, in fair, and others with different code.", "tokens": [51414, 400, 321, 4813, 4691, 3331, 365, 10725, 11, 294, 3143, 11, 293, 2357, 365, 819, 3089, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1874752406832538, "compression_ratio": 1.5522388059701493, "no_speech_prob": 0.005395679268985987}, {"id": 101, "seek": 69070, "start": 691.7, "end": 703.7, "text": " And we keep also important characteristics at tip and variable with the same name are possible and tip and variable duality with cases, for example.", "tokens": [50414, 400, 321, 1066, 611, 1021, 10891, 412, 4125, 293, 7006, 365, 264, 912, 1315, 366, 1944, 293, 4125, 293, 7006, 11848, 507, 365, 3331, 11, 337, 1365, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2407302206212824, "compression_ratio": 1.474074074074074, "no_speech_prob": 0.0018571298569440842}, {"id": 102, "seek": 69070, "start": 706.7, "end": 711.7, "text": " I implemented a second version of a name resolver.", "tokens": [51164, 286, 12270, 257, 1150, 3037, 295, 257, 1315, 34480, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2407302206212824, "compression_ratio": 1.474074074074074, "no_speech_prob": 0.0018571298569440842}, {"id": 103, "seek": 71170, "start": 712.7, "end": 720.7, "text": " In fact, the name resolver add a tag to every declaration and references, a tip or variable tag.", "tokens": [50414, 682, 1186, 11, 264, 1315, 34480, 909, 257, 6162, 281, 633, 27606, 293, 15400, 11, 257, 4125, 420, 7006, 6162, 13, 50814], "temperature": 0.0, "avg_logprob": -0.19445148195539202, "compression_ratio": 1.5988700564971752, "no_speech_prob": 0.0008683113846927881}, {"id": 104, "seek": 71170, "start": 720.7, "end": 730.7, "text": " For example, here, the interface has a tag tip or for tip and the unique identifier we previously talked about.", "tokens": [50814, 1171, 1365, 11, 510, 11, 264, 9226, 575, 257, 6162, 4125, 420, 337, 4125, 293, 264, 3845, 45690, 321, 8046, 2825, 466, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19445148195539202, "compression_ratio": 1.5988700564971752, "no_speech_prob": 0.0008683113846927881}, {"id": 105, "seek": 71170, "start": 730.7, "end": 738.7, "text": " And for variable, for example, function, we have a tag variable and so on.", "tokens": [51314, 400, 337, 7006, 11, 337, 1365, 11, 2445, 11, 321, 362, 257, 6162, 7006, 293, 370, 322, 13, 51714], "temperature": 0.0, "avg_logprob": -0.19445148195539202, "compression_ratio": 1.5988700564971752, "no_speech_prob": 0.0008683113846927881}, {"id": 106, "seek": 73870, "start": 739.7, "end": 744.7, "text": " And the reference refer ever a tip or a variable.", "tokens": [50414, 400, 264, 6408, 2864, 1562, 257, 4125, 420, 257, 7006, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2151100723831742, "compression_ratio": 1.4485294117647058, "no_speech_prob": 0.00047008247929625213}, {"id": 107, "seek": 73870, "start": 749.7, "end": 759.7, "text": " With this new name resolver, it's possible to detect some issues.", "tokens": [50914, 2022, 341, 777, 1315, 34480, 11, 309, 311, 1944, 281, 5531, 512, 2663, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2151100723831742, "compression_ratio": 1.4485294117647058, "no_speech_prob": 0.00047008247929625213}, {"id": 108, "seek": 73870, "start": 759.7, "end": 765.7, "text": " For example, here, we have a function, it's unused function, and the tip is used.", "tokens": [51414, 1171, 1365, 11, 510, 11, 321, 362, 257, 2445, 11, 309, 311, 44383, 2445, 11, 293, 264, 4125, 307, 1143, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2151100723831742, "compression_ratio": 1.4485294117647058, "no_speech_prob": 0.00047008247929625213}, {"id": 109, "seek": 76570, "start": 766.7, "end": 776.7, "text": " And one important aspect is you don't expose the tip variable duality in the semantic model.", "tokens": [50414, 400, 472, 1021, 4171, 307, 291, 500, 380, 19219, 264, 4125, 7006, 11848, 507, 294, 264, 47982, 2316, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2391630568594303, "compression_ratio": 1.4093959731543624, "no_speech_prob": 0.004392895847558975}, {"id": 110, "seek": 76570, "start": 776.7, "end": 779.7, "text": " It's only a resolving pace.", "tokens": [50914, 467, 311, 787, 257, 49940, 11638, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2391630568594303, "compression_ratio": 1.4093959731543624, "no_speech_prob": 0.004392895847558975}, {"id": 111, "seek": 76570, "start": 782.7, "end": 789.7, "text": " Once you resolve the names, you just remove the tag and you have previously the same API.", "tokens": [51214, 3443, 291, 14151, 264, 5288, 11, 291, 445, 4159, 264, 6162, 293, 291, 362, 8046, 264, 912, 9362, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2391630568594303, "compression_ratio": 1.4093959731543624, "no_speech_prob": 0.004392895847558975}, {"id": 112, "seek": 78970, "start": 789.7, "end": 797.7, "text": " You can ask which declines every references of each declaration and so on.", "tokens": [50364, 509, 393, 1029, 597, 7488, 1652, 633, 15400, 295, 1184, 27606, 293, 370, 322, 13, 50764], "temperature": 0.0, "avg_logprob": -0.28552205634839606, "compression_ratio": 1.4596273291925466, "no_speech_prob": 0.004145861137658358}, {"id": 113, "seek": 78970, "start": 800.7, "end": 803.7, "text": " In conclusion, Biome is a formator as a linter.", "tokens": [50914, 682, 10063, 11, 13007, 423, 307, 257, 1254, 1639, 382, 257, 287, 5106, 13, 51064], "temperature": 0.0, "avg_logprob": -0.28552205634839606, "compression_ratio": 1.4596273291925466, "no_speech_prob": 0.004145861137658358}, {"id": 114, "seek": 78970, "start": 805.7, "end": 808.7, "text": " It also supports import sorting.", "tokens": [51164, 467, 611, 9346, 974, 32411, 13, 51314], "temperature": 0.0, "avg_logprob": -0.28552205634839606, "compression_ratio": 1.4596273291925466, "no_speech_prob": 0.004145861137658358}, {"id": 115, "seek": 78970, "start": 808.7, "end": 811.7, "text": " Biome is fast because it's white and in a rest.", "tokens": [51314, 13007, 423, 307, 2370, 570, 309, 311, 2418, 293, 294, 257, 1472, 13, 51464], "temperature": 0.0, "avg_logprob": -0.28552205634839606, "compression_ratio": 1.4596273291925466, "no_speech_prob": 0.004145861137658358}, {"id": 116, "seek": 78970, "start": 811.7, "end": 814.7, "text": " It uses multicore capabilities.", "tokens": [51464, 467, 4960, 30608, 418, 10862, 13, 51614], "temperature": 0.0, "avg_logprob": -0.28552205634839606, "compression_ratio": 1.4596273291925466, "no_speech_prob": 0.004145861137658358}, {"id": 117, "seek": 81470, "start": 815.7, "end": 823.7, "text": " Biome is editor-ready because they use an error-tolerant parser and concrete syntax tree.", "tokens": [50414, 13007, 423, 307, 9839, 12, 1201, 570, 436, 764, 364, 6713, 12, 83, 27035, 394, 21156, 260, 293, 9859, 28431, 4230, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2482509097537479, "compression_ratio": 1.4438502673796791, "no_speech_prob": 0.0034617206547409296}, {"id": 118, "seek": 81470, "start": 823.7, "end": 826.7, "text": " And we support TypeScript, GSX, TSX.", "tokens": [50814, 400, 321, 1406, 15576, 14237, 11, 32047, 55, 11, 37645, 55, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2482509097537479, "compression_ratio": 1.4438502673796791, "no_speech_prob": 0.0034617206547409296}, {"id": 119, "seek": 81470, "start": 826.7, "end": 828.7, "text": " It's better included.", "tokens": [50964, 467, 311, 1101, 5556, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2482509097537479, "compression_ratio": 1.4438502673796791, "no_speech_prob": 0.0034617206547409296}, {"id": 120, "seek": 81470, "start": 828.7, "end": 837.7, "text": " And we have a tip-aware semantic model that allows to implement some interesting rules as use import tip, use export tip.", "tokens": [51064, 400, 321, 362, 257, 4125, 12, 17074, 47982, 2316, 300, 4045, 281, 4445, 512, 1880, 4474, 382, 764, 974, 4125, 11, 764, 10725, 4125, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2482509097537479, "compression_ratio": 1.4438502673796791, "no_speech_prob": 0.0034617206547409296}, {"id": 121, "seek": 83770, "start": 838.7, "end": 852.7, "text": " This year and later, we plan to implement, to support more languages, CSS, HTML, Markdown, and more frameworks,", "tokens": [50414, 639, 1064, 293, 1780, 11, 321, 1393, 281, 4445, 11, 281, 1406, 544, 8650, 11, 24387, 11, 17995, 11, 3934, 5093, 11, 293, 544, 29834, 11, 51114], "temperature": 0.0, "avg_logprob": -0.21475217428552099, "compression_ratio": 1.4375, "no_speech_prob": 0.01416981965303421}, {"id": 122, "seek": 83770, "start": 852.7, "end": 854.7, "text": " Vue, Angular, Zvelt, Astro.", "tokens": [51114, 691, 622, 11, 34107, 11, 1176, 27196, 11, 12884, 340, 13, 51214], "temperature": 0.0, "avg_logprob": -0.21475217428552099, "compression_ratio": 1.4375, "no_speech_prob": 0.01416981965303421}, {"id": 123, "seek": 83770, "start": 854.7, "end": 856.7, "text": " We have already some support for React.", "tokens": [51214, 492, 362, 1217, 512, 1406, 337, 30644, 13, 51314], "temperature": 0.0, "avg_logprob": -0.21475217428552099, "compression_ratio": 1.4375, "no_speech_prob": 0.01416981965303421}, {"id": 124, "seek": 83770, "start": 858.7, "end": 866.7, "text": " We want to improve linter capabilities, multi-file analysis, because for now, we are only able to analyze file by file.", "tokens": [51414, 492, 528, 281, 3470, 287, 5106, 10862, 11, 4825, 12, 69, 794, 5215, 11, 570, 337, 586, 11, 321, 366, 787, 1075, 281, 12477, 3991, 538, 3991, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21475217428552099, "compression_ratio": 1.4375, "no_speech_prob": 0.01416981965303421}, {"id": 125, "seek": 86670, "start": 866.7, "end": 869.7, "text": " We cannot analyze an entire project.", "tokens": [50364, 492, 2644, 12477, 364, 2302, 1716, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2804575328585468, "compression_ratio": 1.4875621890547264, "no_speech_prob": 0.0013702332507818937}, {"id": 126, "seek": 86670, "start": 870.7, "end": 878.7, "text": " And we want also to implement a SAP LIFI Type System to implement some rule of USLint TypeScript.", "tokens": [50564, 400, 321, 528, 611, 281, 4445, 257, 27743, 441, 12775, 40, 15576, 8910, 281, 4445, 512, 4978, 295, 2546, 43, 686, 15576, 14237, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2804575328585468, "compression_ratio": 1.4875621890547264, "no_speech_prob": 0.0013702332507818937}, {"id": 127, "seek": 86670, "start": 879.7, "end": 881.7, "text": " We want also to support plugins.", "tokens": [51014, 492, 528, 611, 281, 1406, 33759, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2804575328585468, "compression_ratio": 1.4875621890547264, "no_speech_prob": 0.0013702332507818937}, {"id": 128, "seek": 86670, "start": 881.7, "end": 884.7, "text": " It's a requested feature by many users.", "tokens": [51114, 467, 311, 257, 16436, 4111, 538, 867, 5022, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2804575328585468, "compression_ratio": 1.4875621890547264, "no_speech_prob": 0.0013702332507818937}, {"id": 129, "seek": 86670, "start": 885.7, "end": 888.7, "text": " And expand the tool chain with other tools.", "tokens": [51314, 400, 5268, 264, 2290, 5021, 365, 661, 3873, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2804575328585468, "compression_ratio": 1.4875621890547264, "no_speech_prob": 0.0013702332507818937}, {"id": 130, "seek": 86670, "start": 888.7, "end": 893.7, "text": " For example, transcut transformation and so on.", "tokens": [51464, 1171, 1365, 11, 1145, 6672, 9887, 293, 370, 322, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2804575328585468, "compression_ratio": 1.4875621890547264, "no_speech_prob": 0.0013702332507818937}, {"id": 131, "seek": 89670, "start": 896.7, "end": 902.7, "text": " If you want to help us, you can try BIOM first and report Azure feedbacks.", "tokens": [50364, 759, 291, 528, 281, 854, 505, 11, 291, 393, 853, 23524, 5251, 700, 293, 2275, 11969, 5824, 82, 13, 50664], "temperature": 0.0, "avg_logprob": -0.23924179077148439, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.007049425970762968}, {"id": 132, "seek": 89670, "start": 902.7, "end": 905.7, "text": " You can also contribute to BIOM.", "tokens": [50664, 509, 393, 611, 10586, 281, 23524, 5251, 13, 50814], "temperature": 0.0, "avg_logprob": -0.23924179077148439, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.007049425970762968}, {"id": 133, "seek": 89670, "start": 905.7, "end": 908.7, "text": " We have a good first Azure on the repository.", "tokens": [50814, 492, 362, 257, 665, 700, 11969, 322, 264, 25841, 13, 50964], "temperature": 0.0, "avg_logprob": -0.23924179077148439, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.007049425970762968}, {"id": 134, "seek": 89670, "start": 909.7, "end": 912.7, "text": " We have a great resource to create an inter-rule.", "tokens": [51014, 492, 362, 257, 869, 7684, 281, 1884, 364, 728, 12, 44197, 13, 51164], "temperature": 0.0, "avg_logprob": -0.23924179077148439, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.007049425970762968}, {"id": 135, "seek": 89670, "start": 913.7, "end": 920.7, "text": " Emma, the other lead partner, created a video for creating an inter-rule.", "tokens": [51214, 17124, 11, 264, 661, 1477, 4975, 11, 2942, 257, 960, 337, 4084, 364, 728, 12, 44197, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23924179077148439, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.007049425970762968}, {"id": 136, "seek": 89670, "start": 921.7, "end": 923.7, "text": " If you have money, you can sponsor us also.", "tokens": [51614, 759, 291, 362, 1460, 11, 291, 393, 16198, 505, 611, 13, 51714], "temperature": 0.0, "avg_logprob": -0.23924179077148439, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.007049425970762968}, {"id": 137, "seek": 92670, "start": 926.7, "end": 928.7, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.33954061588770906, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.012963980436325073}, {"id": 138, "seek": 92670, "start": 928.7, "end": 931.7, "text": " And I just put some comments.", "tokens": [50464, 400, 286, 445, 829, 512, 3053, 13, 50614], "temperature": 0.0, "avg_logprob": -0.33954061588770906, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.012963980436325073}, {"id": 139, "seek": 92670, "start": 931.7, "end": 940.7, "text": " In fact, you can format your code base, you can link, and you can do both with a single comment, format and link.", "tokens": [50614, 682, 1186, 11, 291, 393, 7877, 428, 3089, 3096, 11, 291, 393, 2113, 11, 293, 291, 393, 360, 1293, 365, 257, 2167, 2871, 11, 7877, 293, 2113, 13, 51064], "temperature": 0.0, "avg_logprob": -0.33954061588770906, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.012963980436325073}, {"id": 140, "seek": 92670, "start": 940.7, "end": 941.7, "text": " Thanks.", "tokens": [51064, 2561, 13, 51114], "temperature": 0.0, "avg_logprob": -0.33954061588770906, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.012963980436325073}, {"id": 141, "seek": 92670, "start": 949.7, "end": 951.7, "text": " I have some questions.", "tokens": [51514, 286, 362, 512, 1651, 13, 51614], "temperature": 0.0, "avg_logprob": -0.33954061588770906, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.012963980436325073}, {"id": 142, "seek": 92670, "start": 951.7, "end": 952.7, "text": " Yes?", "tokens": [51614, 1079, 30, 51664], "temperature": 0.0, "avg_logprob": -0.33954061588770906, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.012963980436325073}, {"id": 143, "seek": 92670, "start": 952.7, "end": 955.7, "text": " What was the question you talked about?", "tokens": [51664, 708, 390, 264, 1168, 291, 2825, 466, 30, 51814], "temperature": 0.0, "avg_logprob": -0.33954061588770906, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.012963980436325073}, {"id": 144, "seek": 95570, "start": 955.7, "end": 957.7, "text": " Sorry, I don't...", "tokens": [50364, 4919, 11, 286, 500, 380, 485, 50464], "temperature": 0.0, "avg_logprob": -0.3638290714573216, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.03803590312600136}, {"id": 145, "seek": 95570, "start": 959.7, "end": 961.7, "text": " What vision of ECMAScript do you talk about?", "tokens": [50564, 708, 5201, 295, 19081, 44, 3160, 5944, 360, 291, 751, 466, 30, 50664], "temperature": 0.0, "avg_logprob": -0.3638290714573216, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.03803590312600136}, {"id": 146, "seek": 95570, "start": 961.7, "end": 963.7, "text": " Atmosphere.", "tokens": [50664, 1711, 3415, 6605, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3638290714573216, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.03803590312600136}, {"id": 147, "seek": 95570, "start": 963.7, "end": 965.7, "text": " You can maybe...", "tokens": [50764, 509, 393, 1310, 485, 50864], "temperature": 0.0, "avg_logprob": -0.3638290714573216, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.03803590312600136}, {"id": 148, "seek": 95570, "start": 973.7, "end": 976.7, "text": " What vision of ECMAScript do you talk about?", "tokens": [51264, 708, 5201, 295, 19081, 44, 3160, 5944, 360, 291, 751, 466, 30, 51414], "temperature": 0.0, "avg_logprob": -0.3638290714573216, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.03803590312600136}, {"id": 149, "seek": 95570, "start": 976.7, "end": 978.7, "text": " Advertisers.", "tokens": [51414, 1999, 3281, 271, 433, 13, 51514], "temperature": 0.0, "avg_logprob": -0.3638290714573216, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.03803590312600136}, {"id": 150, "seek": 95570, "start": 978.7, "end": 980.7, "text": " Okay. Advertisers.", "tokens": [51514, 1033, 13, 1999, 3281, 271, 433, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3638290714573216, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.03803590312600136}, {"id": 151, "seek": 95570, "start": 980.7, "end": 982.7, "text": " ECMAScript direction.", "tokens": [51614, 19081, 44, 3160, 5944, 3513, 13, 51714], "temperature": 0.0, "avg_logprob": -0.3638290714573216, "compression_ratio": 1.596638655462185, "no_speech_prob": 0.03803590312600136}, {"id": 152, "seek": 98270, "start": 982.7, "end": 984.7, "text": " Ah, okay. The last one.", "tokens": [50364, 2438, 11, 1392, 13, 440, 1036, 472, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1988103985786438, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.007052416447550058}, {"id": 153, "seek": 98270, "start": 987.7, "end": 989.7, "text": " Are there any other questions?", "tokens": [50614, 2014, 456, 604, 661, 1651, 30, 50714], "temperature": 0.0, "avg_logprob": -0.1988103985786438, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.007052416447550058}, {"id": 154, "seek": 98270, "start": 989.7, "end": 991.7, "text": " Can you shout?", "tokens": [50714, 1664, 291, 8043, 30, 50814], "temperature": 0.0, "avg_logprob": -0.1988103985786438, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.007052416447550058}, {"id": 155, "seek": 98270, "start": 991.7, "end": 994.7, "text": " Can we use custom rules?", "tokens": [50814, 1664, 321, 764, 2375, 4474, 30, 50964], "temperature": 0.0, "avg_logprob": -0.1988103985786438, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.007052416447550058}, {"id": 156, "seek": 98270, "start": 994.7, "end": 996.7, "text": " Can we write custom rules already?", "tokens": [50964, 1664, 321, 2464, 2375, 4474, 1217, 30, 51064], "temperature": 0.0, "avg_logprob": -0.1988103985786438, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.007052416447550058}, {"id": 157, "seek": 98270, "start": 997.7, "end": 999.7, "text": " It's a recurrent question.", "tokens": [51114, 467, 311, 257, 18680, 1753, 1168, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1988103985786438, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.007052416447550058}, {"id": 158, "seek": 98270, "start": 1000.7, "end": 1003.7, "text": " Currently, no, because we don't support plugins.", "tokens": [51264, 19964, 11, 572, 11, 570, 321, 500, 380, 1406, 33759, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1988103985786438, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.007052416447550058}, {"id": 159, "seek": 98270, "start": 1003.7, "end": 1010.7, "text": " But we have a core contributor, but currently working on that.", "tokens": [51414, 583, 321, 362, 257, 4965, 42859, 11, 457, 4362, 1364, 322, 300, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1988103985786438, "compression_ratio": 1.5056179775280898, "no_speech_prob": 0.007052416447550058}, {"id": 160, "seek": 101070, "start": 1011.7, "end": 1014.7, "text": " We explore two options.", "tokens": [50414, 492, 6839, 732, 3956, 13, 50564], "temperature": 0.0, "avg_logprob": -0.3409997325832561, "compression_ratio": 1.3190184049079754, "no_speech_prob": 0.00882655382156372}, {"id": 161, "seek": 101070, "start": 1014.7, "end": 1020.7, "text": " First is WSM or JavaScript possibility for writing plugins.", "tokens": [50564, 2386, 307, 343, 26693, 420, 15778, 7959, 337, 3579, 33759, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3409997325832561, "compression_ratio": 1.3190184049079754, "no_speech_prob": 0.00882655382156372}, {"id": 162, "seek": 101070, "start": 1020.7, "end": 1023.7, "text": " And another one is with domain-specific language.", "tokens": [50864, 400, 1071, 472, 307, 365, 9274, 12, 29258, 2856, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3409997325832561, "compression_ratio": 1.3190184049079754, "no_speech_prob": 0.00882655382156372}, {"id": 163, "seek": 101070, "start": 1023.7, "end": 1026.7, "text": " Maybe with a grid QL.", "tokens": [51014, 2704, 365, 257, 10748, 1249, 43, 13, 51164], "temperature": 0.0, "avg_logprob": -0.3409997325832561, "compression_ratio": 1.3190184049079754, "no_speech_prob": 0.00882655382156372}, {"id": 164, "seek": 101070, "start": 1029.7, "end": 1030.7, "text": " Yes?", "tokens": [51314, 1079, 30, 51364], "temperature": 0.0, "avg_logprob": -0.3409997325832561, "compression_ratio": 1.3190184049079754, "no_speech_prob": 0.00882655382156372}, {"id": 165, "seek": 101070, "start": 1030.7, "end": 1034.7, "text": " For large projects that have large stinker operations,", "tokens": [51364, 1171, 2416, 4455, 300, 362, 2416, 35843, 260, 7705, 11, 51564], "temperature": 0.0, "avg_logprob": -0.3409997325832561, "compression_ratio": 1.3190184049079754, "no_speech_prob": 0.00882655382156372}, {"id": 166, "seek": 103470, "start": 1034.7, "end": 1040.7, "text": " it might be difficult to switch to the bio-jazz stuff.", "tokens": [50364, 309, 1062, 312, 2252, 281, 3679, 281, 264, 12198, 12, 73, 9112, 1507, 13, 50664], "temperature": 0.0, "avg_logprob": -0.4415982234013545, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.018087739124894142}, {"id": 167, "seek": 103470, "start": 1040.7, "end": 1045.7, "text": " You can have some library to generate bio-contagrations", "tokens": [50664, 509, 393, 362, 512, 6405, 281, 8460, 12198, 12, 9000, 559, 12154, 50914], "temperature": 0.0, "avg_logprob": -0.4415982234013545, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.018087739124894142}, {"id": 168, "seek": 103470, "start": 1045.7, "end": 1048.7, "text": " based on some existing configuration.", "tokens": [50914, 2361, 322, 512, 6741, 11694, 13, 51064], "temperature": 0.0, "avg_logprob": -0.4415982234013545, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.018087739124894142}, {"id": 169, "seek": 103470, "start": 1048.7, "end": 1050.7, "text": " Yes.", "tokens": [51064, 1079, 13, 51164], "temperature": 0.0, "avg_logprob": -0.4415982234013545, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.018087739124894142}, {"id": 170, "seek": 103470, "start": 1050.7, "end": 1055.7, "text": " In the next version, we plan to add some migration tools for pressure.", "tokens": [51164, 682, 264, 958, 3037, 11, 321, 1393, 281, 909, 512, 17011, 3873, 337, 3321, 13, 51414], "temperature": 0.0, "avg_logprob": -0.4415982234013545, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.018087739124894142}, {"id": 171, "seek": 103470, "start": 1055.7, "end": 1060.7, "text": " But we're also thinking about doing the same for ESLint.", "tokens": [51414, 583, 321, 434, 611, 1953, 466, 884, 264, 912, 337, 12564, 43, 686, 13, 51664], "temperature": 0.0, "avg_logprob": -0.4415982234013545, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.018087739124894142}, {"id": 172, "seek": 106070, "start": 1061.7, "end": 1066.7, "text": " Unfortunately, we have some differences with ESLint.", "tokens": [50414, 8590, 11, 321, 362, 512, 7300, 365, 12564, 43, 686, 13, 50664], "temperature": 0.0, "avg_logprob": -0.16364679218810282, "compression_ratio": 1.6963350785340314, "no_speech_prob": 0.00416316743940115}, {"id": 173, "seek": 106070, "start": 1066.7, "end": 1070.7, "text": " Most of the ESLint rules have an equivalent biome rule.", "tokens": [50664, 4534, 295, 264, 12564, 43, 686, 4474, 362, 364, 10344, 3228, 423, 4978, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16364679218810282, "compression_ratio": 1.6963350785340314, "no_speech_prob": 0.00416316743940115}, {"id": 174, "seek": 106070, "start": 1070.7, "end": 1074.7, "text": " But we have some differences in the option.", "tokens": [50864, 583, 321, 362, 512, 7300, 294, 264, 3614, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16364679218810282, "compression_ratio": 1.6963350785340314, "no_speech_prob": 0.00416316743940115}, {"id": 175, "seek": 106070, "start": 1074.7, "end": 1080.7, "text": " For example, we support less options because sometimes we think it's not relevant to support some options.", "tokens": [51064, 1171, 1365, 11, 321, 1406, 1570, 3956, 570, 2171, 321, 519, 309, 311, 406, 7340, 281, 1406, 512, 3956, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16364679218810282, "compression_ratio": 1.6963350785340314, "no_speech_prob": 0.00416316743940115}, {"id": 176, "seek": 106070, "start": 1080.7, "end": 1086.7, "text": " And we have also some rules are split in two rules, for example.", "tokens": [51364, 400, 321, 362, 611, 512, 4474, 366, 7472, 294, 732, 4474, 11, 337, 1365, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16364679218810282, "compression_ratio": 1.6963350785340314, "no_speech_prob": 0.00416316743940115}, {"id": 177, "seek": 108670, "start": 1087.7, "end": 1089.7, "text": " I can give you an example.", "tokens": [50414, 286, 393, 976, 291, 364, 1365, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2826811018444243, "compression_ratio": 1.4528301886792452, "no_speech_prob": 0.0479784794151783}, {"id": 178, "seek": 108670, "start": 1089.7, "end": 1092.7, "text": " It's NoVis alias in ESLint.", "tokens": [50514, 467, 311, 883, 53, 271, 419, 4609, 294, 12564, 43, 686, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2826811018444243, "compression_ratio": 1.4528301886792452, "no_speech_prob": 0.0479784794151783}, {"id": 179, "seek": 108670, "start": 1092.7, "end": 1098.7, "text": " In fact, ESLint forbid you to write, for example, const self,", "tokens": [50664, 682, 1186, 11, 12564, 43, 686, 34117, 291, 281, 2464, 11, 337, 1365, 11, 1817, 2698, 11, 50964], "temperature": 0.0, "avg_logprob": -0.2826811018444243, "compression_ratio": 1.4528301886792452, "no_speech_prob": 0.0479784794151783}, {"id": 180, "seek": 108670, "start": 1098.7, "end": 1100.7, "text": " equal this.", "tokens": [50964, 2681, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2826811018444243, "compression_ratio": 1.4528301886792452, "no_speech_prob": 0.0479784794151783}, {"id": 181, "seek": 108670, "start": 1100.7, "end": 1105.7, "text": " In fact, we think it's too restrictive.", "tokens": [51064, 682, 1186, 11, 321, 519, 309, 311, 886, 43220, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2826811018444243, "compression_ratio": 1.4528301886792452, "no_speech_prob": 0.0479784794151783}, {"id": 182, "seek": 108670, "start": 1105.7, "end": 1110.7, "text": " We decide to split in two rules.", "tokens": [51314, 492, 4536, 281, 7472, 294, 732, 4474, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2826811018444243, "compression_ratio": 1.4528301886792452, "no_speech_prob": 0.0479784794151783}, {"id": 183, "seek": 108670, "start": 1110.7, "end": 1113.7, "text": " First is NoVuselessVis alias.", "tokens": [51564, 2386, 307, 883, 53, 301, 4272, 53, 271, 419, 4609, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2826811018444243, "compression_ratio": 1.4528301886792452, "no_speech_prob": 0.0479784794151783}, {"id": 184, "seek": 111370, "start": 1114.7, "end": 1117.7, "text": " In fact, it checks for use less Vis alias.", "tokens": [50414, 682, 1186, 11, 309, 13834, 337, 764, 1570, 691, 271, 419, 4609, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1867628569650178, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00654735928401351}, {"id": 185, "seek": 111370, "start": 1117.7, "end": 1119.7, "text": " For example, you use an arrow function here.", "tokens": [50564, 1171, 1365, 11, 291, 764, 364, 11610, 2445, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1867628569650178, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00654735928401351}, {"id": 186, "seek": 111370, "start": 1119.7, "end": 1122.7, "text": " You don't need to alias this with self.", "tokens": [50664, 509, 500, 380, 643, 281, 419, 4609, 341, 365, 2698, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1867628569650178, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00654735928401351}, {"id": 187, "seek": 111370, "start": 1122.7, "end": 1124.7, "text": " You can just remove the aliasing.", "tokens": [50814, 509, 393, 445, 4159, 264, 10198, 3349, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1867628569650178, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00654735928401351}, {"id": 188, "seek": 111370, "start": 1124.7, "end": 1126.7, "text": " And you have a second rule.", "tokens": [50914, 400, 291, 362, 257, 1150, 4978, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1867628569650178, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00654735928401351}, {"id": 189, "seek": 111370, "start": 1126.7, "end": 1132.7, "text": " It's use the arrow function that try to replace function with arrow function.", "tokens": [51014, 467, 311, 764, 264, 11610, 2445, 300, 853, 281, 7406, 2445, 365, 11610, 2445, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1867628569650178, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00654735928401351}, {"id": 190, "seek": 111370, "start": 1132.7, "end": 1137.7, "text": " And combining both, you have the same functionality as ESLint,", "tokens": [51314, 400, 21928, 1293, 11, 291, 362, 264, 912, 14980, 382, 12564, 43, 686, 11, 51564], "temperature": 0.0, "avg_logprob": -0.1867628569650178, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00654735928401351}, {"id": 191, "seek": 111370, "start": 1137.7, "end": 1140.7, "text": " but less opinionated.", "tokens": [51564, 457, 1570, 4800, 770, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1867628569650178, "compression_ratio": 1.6525821596244132, "no_speech_prob": 0.00654735928401351}, {"id": 192, "seek": 114070, "start": 1141.7, "end": 1146.7, "text": " And we have also overruled more strict, but depend of the case.", "tokens": [50414, 400, 321, 362, 611, 670, 35972, 292, 544, 10910, 11, 457, 5672, 295, 264, 1389, 13, 50664], "temperature": 0.0, "avg_logprob": -0.21730545891655817, "compression_ratio": 1.5642201834862386, "no_speech_prob": 0.01592225581407547}, {"id": 193, "seek": 114070, "start": 1146.7, "end": 1152.7, "text": " And this kind of differences make a bit hard to create a migration tool,", "tokens": [50664, 400, 341, 733, 295, 7300, 652, 257, 857, 1152, 281, 1884, 257, 17011, 2290, 11, 50964], "temperature": 0.0, "avg_logprob": -0.21730545891655817, "compression_ratio": 1.5642201834862386, "no_speech_prob": 0.01592225581407547}, {"id": 194, "seek": 114070, "start": 1152.7, "end": 1154.7, "text": " but we're working on that.", "tokens": [50964, 457, 321, 434, 1364, 322, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.21730545891655817, "compression_ratio": 1.5642201834862386, "no_speech_prob": 0.01592225581407547}, {"id": 195, "seek": 114070, "start": 1155.7, "end": 1157.7, "text": " Yes?", "tokens": [51114, 1079, 30, 51214], "temperature": 0.0, "avg_logprob": -0.21730545891655817, "compression_ratio": 1.5642201834862386, "no_speech_prob": 0.01592225581407547}, {"id": 196, "seek": 114070, "start": 1157.7, "end": 1164.7, "text": " Sorry, the large advantage of criteria compared to formatting tools that came before it was its opinionatedness.", "tokens": [51214, 4919, 11, 264, 2416, 5002, 295, 11101, 5347, 281, 39366, 3873, 300, 1361, 949, 309, 390, 1080, 4800, 770, 1287, 13, 51564], "temperature": 0.0, "avg_logprob": -0.21730545891655817, "compression_ratio": 1.5642201834862386, "no_speech_prob": 0.01592225581407547}, {"id": 197, "seek": 114070, "start": 1164.7, "end": 1168.7, "text": " What is your stance on the opinionatedness for the biogest?", "tokens": [51564, 708, 307, 428, 21033, 322, 264, 4800, 770, 1287, 337, 264, 3228, 664, 377, 30, 51764], "temperature": 0.0, "avg_logprob": -0.21730545891655817, "compression_ratio": 1.5642201834862386, "no_speech_prob": 0.01592225581407547}, {"id": 198, "seek": 116870, "start": 1169.7, "end": 1174.7, "text": " Sorry, can you just repeat the question each time, because for the live streaming?", "tokens": [50414, 4919, 11, 393, 291, 445, 7149, 264, 1168, 1184, 565, 11, 570, 337, 264, 1621, 11791, 30, 50664], "temperature": 0.0, "avg_logprob": -0.3146666822762325, "compression_ratio": 1.5533333333333332, "no_speech_prob": 0.011950427666306496}, {"id": 199, "seek": 116870, "start": 1174.7, "end": 1181.7, "text": " The question is, the pressure is opinionated, is biome the same?", "tokens": [50664, 440, 1168, 307, 11, 264, 3321, 307, 4800, 770, 11, 307, 3228, 423, 264, 912, 30, 51014], "temperature": 0.0, "avg_logprob": -0.3146666822762325, "compression_ratio": 1.5533333333333332, "no_speech_prob": 0.011950427666306496}, {"id": 200, "seek": 116870, "start": 1184.7, "end": 1190.7, "text": " Yes, because in fact we decide to match the pressure output because of the challenge.", "tokens": [51164, 1079, 11, 570, 294, 1186, 321, 4536, 281, 2995, 264, 3321, 5598, 570, 295, 264, 3430, 13, 51464], "temperature": 0.0, "avg_logprob": -0.3146666822762325, "compression_ratio": 1.5533333333333332, "no_speech_prob": 0.011950427666306496}, {"id": 201, "seek": 119070, "start": 1190.7, "end": 1199.7, "text": " And we implemented every option of pressure, and we decide to match its output.", "tokens": [50364, 400, 321, 12270, 633, 3614, 295, 3321, 11, 293, 321, 4536, 281, 2995, 1080, 5598, 13, 50814], "temperature": 0.0, "avg_logprob": -0.21326819943710112, "compression_ratio": 1.4855491329479769, "no_speech_prob": 0.032544661313295364}, {"id": 202, "seek": 119070, "start": 1199.7, "end": 1205.7, "text": " And yes, some users are not so happy because they don't like pressure.", "tokens": [50814, 400, 2086, 11, 512, 5022, 366, 406, 370, 2055, 570, 436, 500, 380, 411, 3321, 13, 51114], "temperature": 0.0, "avg_logprob": -0.21326819943710112, "compression_ratio": 1.4855491329479769, "no_speech_prob": 0.032544661313295364}, {"id": 203, "seek": 119070, "start": 1205.7, "end": 1208.7, "text": " But most of the version of ESLint uses pressure.", "tokens": [51114, 583, 881, 295, 264, 3037, 295, 12564, 43, 686, 4960, 3321, 13, 51264], "temperature": 0.0, "avg_logprob": -0.21326819943710112, "compression_ratio": 1.4855491329479769, "no_speech_prob": 0.032544661313295364}, {"id": 204, "seek": 119070, "start": 1208.7, "end": 1213.7, "text": " I think it's a good thing to match pressure on that.", "tokens": [51264, 286, 519, 309, 311, 257, 665, 551, 281, 2995, 3321, 322, 300, 13, 51514], "temperature": 0.0, "avg_logprob": -0.21326819943710112, "compression_ratio": 1.4855491329479769, "no_speech_prob": 0.032544661313295364}, {"id": 205, "seek": 119070, "start": 1213.7, "end": 1215.7, "text": " Yes?", "tokens": [51514, 1079, 30, 51614], "temperature": 0.0, "avg_logprob": -0.21326819943710112, "compression_ratio": 1.4855491329479769, "no_speech_prob": 0.032544661313295364}, {"id": 206, "seek": 121570, "start": 1215.7, "end": 1223.7, "text": " With TypeScript ESLint, it has some quite advanced rules, but it depends on the type.", "tokens": [50364, 2022, 15576, 14237, 12564, 43, 686, 11, 309, 575, 512, 1596, 7339, 4474, 11, 457, 309, 5946, 322, 264, 2010, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11604648286646063, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.02825309708714485}, {"id": 207, "seek": 121570, "start": 1223.7, "end": 1228.7, "text": " So for example, it will warn you if you call an async function without using await,", "tokens": [50764, 407, 337, 1365, 11, 309, 486, 12286, 291, 498, 291, 818, 364, 382, 34015, 2445, 1553, 1228, 19670, 11, 51014], "temperature": 0.0, "avg_logprob": -0.11604648286646063, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.02825309708714485}, {"id": 208, "seek": 121570, "start": 1228.7, "end": 1231.7, "text": " because it knows that the function returns, I promise.", "tokens": [51014, 570, 309, 3255, 300, 264, 2445, 11247, 11, 286, 6228, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11604648286646063, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.02825309708714485}, {"id": 209, "seek": 121570, "start": 1231.7, "end": 1237.7, "text": " Is this the kind of thing you do at the moment, and if not, do you have plans for that kind of semantic analysis?", "tokens": [51164, 1119, 341, 264, 733, 295, 551, 291, 360, 412, 264, 1623, 11, 293, 498, 406, 11, 360, 291, 362, 5482, 337, 300, 733, 295, 47982, 5215, 30, 51464], "temperature": 0.0, "avg_logprob": -0.11604648286646063, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.02825309708714485}, {"id": 210, "seek": 123770, "start": 1237.7, "end": 1239.7, "text": " Yes.", "tokens": [50364, 1079, 13, 50464], "temperature": 0.0, "avg_logprob": -0.2009279727935791, "compression_ratio": 1.5071090047393365, "no_speech_prob": 0.003986891359090805}, {"id": 211, "seek": 123770, "start": 1239.7, "end": 1247.7, "text": " In fact, currently we implement about all the rules of TypeScript ESLint.", "tokens": [50464, 682, 1186, 11, 4362, 321, 4445, 466, 439, 264, 4474, 295, 15576, 14237, 12564, 43, 686, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2009279727935791, "compression_ratio": 1.5071090047393365, "no_speech_prob": 0.003986891359090805}, {"id": 212, "seek": 123770, "start": 1247.7, "end": 1251.7, "text": " It's basically all rules that don't require tip information.", "tokens": [50864, 467, 311, 1936, 439, 4474, 300, 500, 380, 3651, 4125, 1589, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2009279727935791, "compression_ratio": 1.5071090047393365, "no_speech_prob": 0.003986891359090805}, {"id": 213, "seek": 123770, "start": 1251.7, "end": 1256.7, "text": " And for this kind of rule, no floating promises, I think so.", "tokens": [51064, 400, 337, 341, 733, 295, 4978, 11, 572, 12607, 16403, 11, 286, 519, 370, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2009279727935791, "compression_ratio": 1.5071090047393365, "no_speech_prob": 0.003986891359090805}, {"id": 214, "seek": 123770, "start": 1256.7, "end": 1258.7, "text": " It's this rule, yes.", "tokens": [51314, 467, 311, 341, 4978, 11, 2086, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2009279727935791, "compression_ratio": 1.5071090047393365, "no_speech_prob": 0.003986891359090805}, {"id": 215, "seek": 123770, "start": 1258.7, "end": 1260.7, "text": " We need tip information.", "tokens": [51414, 492, 643, 4125, 1589, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2009279727935791, "compression_ratio": 1.5071090047393365, "no_speech_prob": 0.003986891359090805}, {"id": 216, "seek": 123770, "start": 1260.7, "end": 1266.7, "text": " We have several ideas, but personally and the team also want to explore", "tokens": [51514, 492, 362, 2940, 3487, 11, 457, 5665, 293, 264, 1469, 611, 528, 281, 6839, 51814], "temperature": 0.0, "avg_logprob": -0.2009279727935791, "compression_ratio": 1.5071090047393365, "no_speech_prob": 0.003986891359090805}, {"id": 217, "seek": 126670, "start": 1266.7, "end": 1268.7, "text": " a simplified TAP system.", "tokens": [50364, 257, 26335, 314, 4715, 1185, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1576365285844945, "compression_ratio": 1.4457142857142857, "no_speech_prob": 0.002935560652986169}, {"id": 218, "seek": 126670, "start": 1268.7, "end": 1276.7, "text": " In fact, we want to base our implementation on the new, the upcoming", "tokens": [50464, 682, 1186, 11, 321, 528, 281, 3096, 527, 11420, 322, 264, 777, 11, 264, 11500, 50864], "temperature": 0.0, "avg_logprob": -0.1576365285844945, "compression_ratio": 1.4457142857142857, "no_speech_prob": 0.002935560652986169}, {"id": 219, "seek": 126670, "start": 1276.7, "end": 1281.7, "text": " isolated declaration mode of TypeScript.", "tokens": [50864, 14621, 27606, 4391, 295, 15576, 14237, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1576365285844945, "compression_ratio": 1.4457142857142857, "no_speech_prob": 0.002935560652986169}, {"id": 220, "seek": 126670, "start": 1281.7, "end": 1286.7, "text": " It's for the next version or maybe the next one.", "tokens": [51114, 467, 311, 337, 264, 958, 3037, 420, 1310, 264, 958, 472, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1576365285844945, "compression_ratio": 1.4457142857142857, "no_speech_prob": 0.002935560652986169}, {"id": 221, "seek": 126670, "start": 1286.7, "end": 1293.7, "text": " And the idea is you require to have a bit more annotation in the code", "tokens": [51364, 400, 264, 1558, 307, 291, 3651, 281, 362, 257, 857, 544, 48654, 294, 264, 3089, 51714], "temperature": 0.0, "avg_logprob": -0.1576365285844945, "compression_ratio": 1.4457142857142857, "no_speech_prob": 0.002935560652986169}, {"id": 222, "seek": 129370, "start": 1293.7, "end": 1299.7, "text": " and combine this mode with a simplified tip inference system", "tokens": [50364, 293, 10432, 341, 4391, 365, 257, 26335, 4125, 38253, 1185, 50664], "temperature": 0.0, "avg_logprob": -0.12993713617324829, "compression_ratio": 1.561576354679803, "no_speech_prob": 0.011836105026304722}, {"id": 223, "seek": 129370, "start": 1299.7, "end": 1306.7, "text": " you can in fact achieve most of the type query in a code base.", "tokens": [50664, 291, 393, 294, 1186, 4584, 881, 295, 264, 2010, 14581, 294, 257, 3089, 3096, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12993713617324829, "compression_ratio": 1.561576354679803, "no_speech_prob": 0.011836105026304722}, {"id": 224, "seek": 129370, "start": 1306.7, "end": 1314.7, "text": " And I think this mode will gain a lot of support because it's built by Bloomberg", "tokens": [51014, 400, 286, 519, 341, 4391, 486, 6052, 257, 688, 295, 1406, 570, 309, 311, 3094, 538, 40363, 51414], "temperature": 0.0, "avg_logprob": -0.12993713617324829, "compression_ratio": 1.561576354679803, "no_speech_prob": 0.011836105026304722}, {"id": 225, "seek": 129370, "start": 1314.7, "end": 1318.7, "text": " and it brings a lot of performances in the TypeScript world.", "tokens": [51414, 293, 309, 5607, 257, 688, 295, 16087, 294, 264, 15576, 14237, 1002, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12993713617324829, "compression_ratio": 1.561576354679803, "no_speech_prob": 0.011836105026304722}, {"id": 226, "seek": 129370, "start": 1318.7, "end": 1322.7, "text": " In one or two years, this mode will be the default.", "tokens": [51614, 682, 472, 420, 732, 924, 11, 341, 4391, 486, 312, 264, 7576, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12993713617324829, "compression_ratio": 1.561576354679803, "no_speech_prob": 0.011836105026304722}, {"id": 227, "seek": 132270, "start": 1322.7, "end": 1327.7, "text": " I think it's a great bet for us.", "tokens": [50364, 286, 519, 309, 311, 257, 869, 778, 337, 505, 13, 50614], "temperature": 0.0, "avg_logprob": -0.3573311047676282, "compression_ratio": 1.0526315789473684, "no_speech_prob": 0.05619995296001434}, {"id": 228, "seek": 132270, "start": 1327.7, "end": 1333.7, "text": " Thanks.", "tokens": [50614, 2561, 13, 50914], "temperature": 0.0, "avg_logprob": -0.3573311047676282, "compression_ratio": 1.0526315789473684, "no_speech_prob": 0.05619995296001434}, {"id": 229, "seek": 132270, "start": 1333.7, "end": 1335.7, "text": " Any other questions?", "tokens": [50914, 2639, 661, 1651, 30, 51014], "temperature": 0.0, "avg_logprob": -0.3573311047676282, "compression_ratio": 1.0526315789473684, "no_speech_prob": 0.05619995296001434}, {"id": 230, "seek": 132270, "start": 1335.7, "end": 1336.7, "text": " No.", "tokens": [51014, 883, 13, 51064], "temperature": 0.0, "avg_logprob": -0.3573311047676282, "compression_ratio": 1.0526315789473684, "no_speech_prob": 0.05619995296001434}, {"id": 231, "seek": 132270, "start": 1336.7, "end": 1339.7, "text": " Big round of applause for Zipfana.", "tokens": [51064, 5429, 3098, 295, 9969, 337, 1176, 647, 69, 2095, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3573311047676282, "compression_ratio": 1.0526315789473684, "no_speech_prob": 0.05619995296001434}], "language": "en"}