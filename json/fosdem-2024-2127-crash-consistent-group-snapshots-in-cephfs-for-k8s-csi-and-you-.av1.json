{"text": " Hi everyone. My name is Leonid. This is my colleague, Patrick. And today we're going to talk about Snapshot consistency with you. So before we dive into Snapshot consistency, let's discuss consistency on its own. Now here's some data storage, has a bunch of data written on it. Is this data consistent? We don't know. And the reason that we don't know is because consistency is not an intrinsic property of data. We have to consider a system that comprises of an application and its logic and a storage system and the data that is written. And only then, including the logic, we can reason about the data and we can define whether it's consistent or not. So the application is running fine, data is written, everything is consistent. What happens if the application dies? We don't know whether the system is in a consistent state or not. So actually it is possible to write an application and to write a storage provider in a way that by doing some smart decisions during the runtime, then the application can reach a consistent state after restarting, after a crash. This is called crash consistency. Now how is crash consistency related to snapshots? And the truth is that the snapshot, or rather the snapshot that we're talking about, which is a crash consistent background snapshot, is equivalent to a crash. The application cannot tell between restarting after a crash or restarting after you recovered from a snapshot. So let's look at the system. We have an application in storage and it was a poor selection of a storage. We cannot reach consistency in the system. Even if the application is a high quality, well designed app. Same thing other way around. If you are using an industry leader storage provider but the application just doesn't care or is poorly written, you're not getting consistency. If you have a well written application and an industry leader storage provider, it is still a question whether the consistency or rather crash consistency is reachable. And it is only reachable if we consider a contract that an application and storage adhere to and then when they both do things right, together they can reach crash consistency. And the scope of this talk would like to refer to this kind of application and storage as enterprise. There are many ways to unpack this term so bear with us for this scope of this talk. An enterprise app and an enterprise storage from our perspective are those that adhere to a contract. Now what is this contract? Or rather in our case what is interesting is what is it that we need to do itself as a storage provider that we automatically combine with an enterprise app that is already written with this contract in mind and together we provide a crash consistent system. And I remind you we want a crash consistent system because this is what enables consistent snapshots. To understand that we need to understand right ordering. Rights A and B here, they are ordered if and only if. Right B begins after the app has received and processed an acknowledgement from the data storage that right A has been successfully completed. Now it is important to note that the acknowledgement has to come from the storage and not from the OS because usually your applications are interacting with the operating system and it is the operating system that gives you the first acknowledgement after a right. These applications are aware of that. They know that they need to do to use things like flush or direct IO to know that the acknowledgement is originating at the storage level to perform ordered rights A and B. Now that we understand what ordered rights are, let's inspect what the storage needs to do. So we have two ordered rights. Right B hasn't begun before A has been acknowledged. And in order to understand what storage should do or shouldn't do, let's look at different types of background snapshots that the storage might have taken. So it could be that we've taken a snapshot before A and it's a consistent snapshot. It's a snapshot that has no knowledge about neither A or B. It could be that the snapshot already captured A and we know this is possible because there is a window of time when A has already been completed and B hasn't yet started because application was waiting for the acknowledgement. So this is a consistent snapshot. And finally there could be a case where the snapshot contains both and B. This is also a consistent snapshot. What the storage or enterprise storage provider must absolutely promise to the app is that snapshot 4 is not possible. There cannot be a case that a snapshot contains operation B but somehow lost operation A. That's basically the contract to preserve the order of rights. So we're going to ask Patrick to discuss how this relates to CEP. So within the context of CEPFS, we're going to first start looking at how snapshots work. So on the left we have MDS0, managing two trees of interest in the file system, SV1 and SV2 and two clients, client 1 and client 2. So how do we take a snapshot in CEPFS? Well there will be an operation sent to MDS called MakeSnap and that will snapshot a particular tree within the file system. In CEPFS you're allowed to snapshot a particular directory and everything under it, not just the entire file system. When a snapshot is taken it sends a notification to all the clients that the snapshot has been taken for a particular I know that the client is interacting with. And once that's all done the snapshot's complete. If you want to take another snapshot of another volume you have to do another operation. There's no compound snapshot operation. So we send a second snapshot out of the other volume and again notify the clients for any I know that they may be interacting with. When clients interact with RATOS, the underlying distributed object storage of CEPFS, they create snapshots implicitly when they write to the objects that hold the files data. And they do that by including a snapshot vector of the snapshot IDs that have been taken on the files. And those are what is transmitted to the clients in the snap updates. And here lies the rub. If this, with CEPFS snapshots we have eventual consistency. Because what, when a snapshot is taken on the file data depends on when the client gets the update from the MDS. So they're eventually consistent, not synchronous. To really highlight this we'll look at a case study. So here we have two clients in an MDS. Operation B on client two is dependent on the completion of operation A on client one. Let's say this is like a database application, a distributed database. The MDS is starting a snapshot and it sends the notifications to the clients and expecting the apps. Client one initiates operation A after it's been notified of the snapshot. And so operation A is not part of the snapshot. Meanwhile client two has not gotten the notification from the MDS yet or is not processed yet. But it has already started operation B. It was just a simple write to a file. Well operation B is in the snapshot because it processes the notification afterwards. This is a problem and creates inconsistency. Op B is in the snapshot but op A is not. Looking at this another way you may have a utility that's trying to create a snapshot on the file system and it tells the MDS to make the snapshot it does. But then induces operation A on the client. Expecting operation A to not be part of the snapshot because as far as it knows it's already been taken. But that's not the case. Operation A is in the snapshot because the client has not been notified yet of the snapshot. So this is also inconsistent. So the solution we've implemented is fairly common within enterprise storage systems in the industry that are trying to address this issue of crash consistent snapshots which has become a larger thing right now with Kubernetes CSI requirements is to introduce an IO pause. And IO pause ensures this ordering by preventing any operations from going on within the tree of interest while the snapshot is percolating among the entire file system and all of its clients. So the way this looks in practice is op A is started and IO pause is established. Point one is trying to induce client two to execute operation B. But operation B cannot execute because the IO pause is enforced. Looking at it a little differently you know we could have op A and op B happen before the IO pause. They're both part of the snapshot. This is consistent. And then we may also have a situation where op A is sent to the MDS before the IO pause just before the IO pause is established. Op A waits through the entire course of the IO pause. When the IO pause is lifted operation A is allowed to complete and then the notification is sent back to the client that the operation is done and op B is started. This is also consistent. We'll also look at a super operation, a compound monolith called a mix snap, a variant of mix snap which will also establish this IO pause for you. But we'll also look at the underlying mono operations you can do to establish this IO pause. And that will be the mechanism you can use to actually to establish these crash consistencies. So I'll move back onto the approach. Thanks Patrick. So we now realize that all we need to do is an IO pause and let's see how we do it. Now we were considering a couple of approaches and one of the approaches apparently is a monolith solution. We would define some new comment that would mean consistent snapshot and you would configure it somehow and start it off and it could be either sync across file systems and even across a file system which is a CFFS and an RBD volume. If you have multiple different types of volumes configured for your Kubernetes applications with this approach you will still be able to create a consistent snapshot across all those things. So in order to expose this to the user we introduce a concept of QS set and QS routes. So a QS set is basically just a collection of mount points that you'd like to QS your IO to. In the world of Kubernetes there would be a set of volumes that you would like to QS your IOS to. It's reasonable to give users this entity of QS set because you don't want them to chase around all the different sub volumes whether they are QS or not. We're interested if a group of volumes are together QS and that's what we are waiting. So a QS set implements this state transition. Now internally your mount points they map to some path inside CFFS file system and this is where the magic happens. This is where we actually QS in IO and we refer to that as a QS route. We have also thought about the condition where a QS route may be a part of multiple QS sets at the same time because we don't want to interact too much with the logic of automated snapshots like Kubernetes that might somehow involve consistent snapshot with some volume that is part of two different unrelated processes. The way we resolve it is really simple. As long as the route is part of at least one active QS set IO to this route is QS. So let's talk about the API. This is the comment that we're suggesting. QS we give it a file system name. We name our set ID so that we can refer to it later and then you are including as many mount points as you wish into the set. You can also ask this comment to be synchronous by minus minus a weight and so it won't return until the QS has been achieved. Once that is done you can go on creating snapshots. These are regular snapshots. This is the snapshots that you do in CFFS. Nothing changed about those. So we've created three snapshots for three mount points that we've added to the QS set and then we again refer to the QS comment but this time we're asking it to release the pause. If we successfully QS hopefully we haven't done anything else if there was a failure and then the release also succeeded then we know that those three snapshots are consistent because the pause has been confirmed active for the whole duration of this process. And here's your monolith. Hopefully almost for free we're having also a monolith approach so like a one liner for system administrators who don't need to interface with the internals. We're suggesting a minus minus consistent switch to the snapshot. We're changing the semantics of this comment a little bit by being able to provide all the mount points in the same time. And then this is going to do everything under the hood. It's the same thing. It's going to do it for you. Now we have a tool and we can shoot our leg with it of course because we can DOS our application. And we thought about this and we've built in DOS protection inside the QS database. We've done this by implementing two watchdog timers. The first watchdog timer is a timeout. So when we consider the set it's going to spend some time QSing. Why? Because there are ongoing operations, right? And before we can acknowledge QSing we have to let applications finish whatever they have been doing right now. So under the hood the QSing is managed automatically for you over each and every mount point. And so all the mount points have this timeout to reach the QSing. And then if at least one of the mount points fails to reach QSing within the timeout then the whole set is timed out and whichever QS that were achieved are released immediately. Now the next thing, the second timer is the QS expiration timer. And for that we need a QS set that actually succeeded to QS. Now we know that in order to succeed to QS we have seen all the mount points successfully QS within the configured timeout. But then if we forgot about the set or something crashed, something bad happened and we never released it or never cancelled it and the expiration timeout elapsed then the set is going to enter the expired site and again everything is going to be released automatically for you. Why do we have two timers and not just one? And the reason is because you're going to have different considerations when you will try to come up with the values for those timers. The QSing phase really depends on your system. It depends on how many mount points, what kind of applications you're running, what kind of operations they're doing with the storage because that means how long you should wait for the system to QS and you are allocating some reasonable amount of time for that. However the QS state is already on you. When the system did reach the QS state and you have the notification about this then you can say, okay I know that I need to do just a single snapshot so I don't need more than let's say 10 seconds. Whatever, right? Two different considerations that you need to take into account when figuring out these two timer values. This is the API, I've simplified it a little bit in the previous slides, this is the API where we're not going to go into all the details but it's basically a Swiss knife. You should have all the options that you want. And with that let's ask Patrick to discuss the design. So let's just take a quick look at the high level design of the entire system. So here we have an administrative client which in the wild is probably going to be the Kubernetes CSI driver. That's going to be interacting with the CEPH manager which is specifically the volumes plug-in within the CEPH manager. That volumes plug-in will be actually executing the commands on one of the MDSs in the file system. We'll call it the QS leader or rank zero in reality. And then that will be also coordinating with any other ranks in the file system. We'll call them MDSB and C. And then finally the file system clients which are talking to the MDSs. To talk to the volumes plug-in the API will be the regular CEPH command line interface that we all know and love. The API will be exposed at that level. And the volumes plug-in will be talking to the MDSs using the LibcFFS API. The MDSs will replicate the QS database amongst themselves so they all have a view of the same QS database. And then the QS protocol will be used to actually QS the IO and stop the clients from doing IO on a given subtree in the file system. So we're going to actually talk about that part next. So how do we actually QS IO on a subtree? Before we can get into that we'll take a small step back and look at some context and background regarding what CEPHFFS client capabilities are. So in CEPHFFS it's somewhat different in a number of distributed file systems in that the MDSs and the clients are maintaining a cooperative cache. Clients have an elevated status within the file system context in that they also can cache metadata, not just data of the file system. And not just cache it, they can also have rights to mutate that metadata locally without involving the MDSs immediately. So to give a specific example we have here MDS0 has a given file that it's authoritative for 0x19tb.dat and client.1 on the right has a capability for that file. And the access rights that it has on that file, delegated to it by the MDS is to read, write, cache reads and buffer writes to that file. It has shared extended attributes meaning it has a local cache of the entire extended attribute map for the file and it knows that the extended attribute will not change for that file without being told by the MDS. Similarly also for the link count of the file. This allows the client to respond to certain stat calls locally without actually talking to the MDS. Capabilities themselves are modeled loosely after leases, an academic paper I put in the slides and leases are mostly different for having a time-based duration whereas for capabilities within CEPFS they have an undefined time duration. So now to look at exactly how we're going to QSIL. So now we have this issue of clients having these capabilities and maybe trying to continue doing writes to the file or modifying metadata so we have to recall those capabilities. So here we have two MDSs, zero and one and a QS database replicated between them. On the right we have client one with a number of caps for a given tree of interest that we're trying to QS, rooted at SV. When we want to QS, the QS database launches a QS subvolume operation, it's an internal operation on the MDS, it will start that on MDS zero. That in turn launches some suboperations, QS subvolume inode and it will do that on every inode in the given sub tree that that particular MDS is authoritative for. So the inodes are colored according to the MDS authority. So just the first two inodes at the top of the tree the QS subvolume inode calls will be performed on. We'll look at what that does in the next slide. QSDB will also launch it the same operation on MDS one. It'll launch QS subvolume inode operations on the inodes that it's authoritative for. And then once all this is complete, it's done. So what does QS subvolume inode do? We have this, the operation being executed on as an example, OX19DB.dat. We have a client on the right with the capability to read, write, buffer and cache data for the file. It has exclusive writes on the X-Satters so it can even make local changes to the X-Satters without telling the MDS immediately about them and returning to the client. And it has a shared link count. Now when I start the QS subvolume inode operation, it actually behaves similarly to many client requests that are already executed within the MDS. We're using the internal facilities that already exist to do this. The operation requires a number of locks, internal locks on the inode, not the internal not the POSIX facing locks that normal file system users are familiar with. These are internal locks on the inode and they control which metadata the operation has permission to change on the inode. So we're acquiring the auth lock, the link lock, file lock, etc. for reading or exclusively. And by doing so, the MDS will reconcile this with what writes have already been given to clients, that is what capabilities have been issued. And if necessary, it will revoke capabilities before those locks can be acquired. So when this operation tries to acquire those locks, it sends a revoke to the client. The client updates its local capabilities according to what the MDS is allowing it now to have, possibly fleshing data if it changed the file size for example or added in an extended attribute. You may flush that along with an update message to the MDS saying yes, I've updated the capability, I don't have these access rights anymore. And now you see that it has no file permissions. Its X-hatter is now shared instead of exclusive and the link count continues to be shared. So after this has occurred, the operation is considered done and any future ops on the client associated with this inode will block because these locks are still held. Why? Because this is a long running operation. Unlike most ops in MDS, which it will acquire these locks, perform some metadata mutation and then drop the locks, this is necessarily a long lived operation because it needs to continue to prevent clients from getting capabilities on the file or executing metadata operations, which will also try to get the locks from executing. So the get adder would block or any other client operation that would acquire those locks. So now to close out the talk, we'll take a quick look at the QIES set state diagram and focus only on the happy path. You know, it's a typical state diagram, lots of error paths, right? So we have a new set, we're adding a number of routes to the set and once it's in that state it's going to enter the QIESing. So at that point we're going to be launching all our QIES sub volume inode operations and acquiring all these locks, capabilities will be revoked, new operations will be blocked. When all of those operations have their locks and they're complete but not dead, then we can enter the QIES state. So all of these, that'll trickle back up the stack when we're querying the database we'll be able to see that the set is QIESed. At that point we're going to take our snapshots on all the routes that we need, more than one probably and when the snapshots are complete we can then release the set. So then we'll go into the releasing state, all of those QIESa volume inode operations will be killed and the locks automatically released allowing clients to be reissued caps or any blocked metadata operations to be kicked and resumed. Once those operations are all dead then the set will enter the release state and the QIESet is considered terminal and done. So that is the basics of the QIESets and again there's a number of error states shown on the slide, a canceled QIESet or an expired one, etc. So with that that's the end of our talk, we're going to leave time for questions. Again I'm Patrick Donnelly, this is Usob, I said your last name right, right? Don't often say his last name. These are the pull requests we have open still for our work, they've not yet been merged into the main branch so this is not yet live and even the development version of CEP. And we have some documentation that you can also review, some preliminary documentation, some details may change but for the most part it's reaching a very concrete state. That's it, thank you. Any questions? Yes? Will CEP mistakes snapshot and store it in like dot snap or underscore snap type within the folder? You mentioned that all I.O. in that part onwards will be pleased so will like leads on previously taken snapshots also be frozen or that. For the most part, alright so the question is if I've quiesced I.O. on a subtree can I continue to access snapshots of that, past snapshots of the subtree and the answer is probably not because of the way the locks work on the I.O.s it may also incidentally protect how the access through the snapshot version of the I.O. Then there is like we didn't introduce the shallow volume people like maybe we can mount the snapshots for backup system to just read the contents. Not at this time so we're looking also into a variant of quiescing where it allows most read only access to the files. Right now it's very much a stop the world for the most part I.O. pause so you won't even be able to execute most reads on the file system. Or like some stat calls may still be able to respond well written stat calls on the clients because they still retain certain read only capabilities. In the future it will work for the ASX vector like we can access read only snapshots. That is the hope in the future we'd be able to do that yeah to support that. Any other questions? Neil. So now you have the set command to quiesce volumes is it also possible to run FS3s on the client side if you have set FS kernel mount for example that would quiesce the volume for all other clients. Do I answer that one? So the question was whether we're going to be able to use kernel if it will work for kernel clients. Exactly if you call FS3s on the client side instead of running set command. As of now we haven't planned to support the FS3s command but it will look into it. I think it's pretty reasonable to consider it even for the first operation. Now one of the good stuff about what we're doing right now is that it's intrinsically backward compatible because we're building on the set capabilities kernel clients will be able to reach the quiesce. Now how you trigger the quiesce it's another question and we'll consider this definitely. Other questions? Okay thank you very much. Was it pleasant?", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.08, "text": " Hi everyone.", "tokens": [50364, 2421, 1518, 13, 50768], "temperature": 0.0, "avg_logprob": -0.21057742129090012, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.09105765074491501}, {"id": 1, "seek": 0, "start": 8.08, "end": 9.08, "text": " My name is Leonid.", "tokens": [50768, 1222, 1315, 307, 13244, 327, 13, 50818], "temperature": 0.0, "avg_logprob": -0.21057742129090012, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.09105765074491501}, {"id": 2, "seek": 0, "start": 9.08, "end": 10.68, "text": " This is my colleague, Patrick.", "tokens": [50818, 639, 307, 452, 13532, 11, 13980, 13, 50898], "temperature": 0.0, "avg_logprob": -0.21057742129090012, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.09105765074491501}, {"id": 3, "seek": 0, "start": 10.68, "end": 15.200000000000001, "text": " And today we're going to talk about Snapshot consistency with you.", "tokens": [50898, 400, 965, 321, 434, 516, 281, 751, 466, 9264, 2382, 12194, 14416, 365, 291, 13, 51124], "temperature": 0.0, "avg_logprob": -0.21057742129090012, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.09105765074491501}, {"id": 4, "seek": 0, "start": 15.200000000000001, "end": 21.36, "text": " So before we dive into Snapshot consistency, let's discuss consistency on its own.", "tokens": [51124, 407, 949, 321, 9192, 666, 9264, 2382, 12194, 14416, 11, 718, 311, 2248, 14416, 322, 1080, 1065, 13, 51432], "temperature": 0.0, "avg_logprob": -0.21057742129090012, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.09105765074491501}, {"id": 5, "seek": 0, "start": 21.36, "end": 25.44, "text": " Now here's some data storage, has a bunch of data written on it.", "tokens": [51432, 823, 510, 311, 512, 1412, 6725, 11, 575, 257, 3840, 295, 1412, 3720, 322, 309, 13, 51636], "temperature": 0.0, "avg_logprob": -0.21057742129090012, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.09105765074491501}, {"id": 6, "seek": 0, "start": 25.44, "end": 28.080000000000002, "text": " Is this data consistent?", "tokens": [51636, 1119, 341, 1412, 8398, 30, 51768], "temperature": 0.0, "avg_logprob": -0.21057742129090012, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.09105765074491501}, {"id": 7, "seek": 0, "start": 28.080000000000002, "end": 29.080000000000002, "text": " We don't know.", "tokens": [51768, 492, 500, 380, 458, 13, 51818], "temperature": 0.0, "avg_logprob": -0.21057742129090012, "compression_ratio": 1.5167464114832536, "no_speech_prob": 0.09105765074491501}, {"id": 8, "seek": 2908, "start": 29.08, "end": 33.839999999999996, "text": " And the reason that we don't know is because consistency is not an intrinsic property of", "tokens": [50364, 400, 264, 1778, 300, 321, 500, 380, 458, 307, 570, 14416, 307, 406, 364, 35698, 4707, 295, 50602], "temperature": 0.0, "avg_logprob": -0.11259085589116162, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.001323407981544733}, {"id": 9, "seek": 2908, "start": 33.839999999999996, "end": 35.56, "text": " data.", "tokens": [50602, 1412, 13, 50688], "temperature": 0.0, "avg_logprob": -0.11259085589116162, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.001323407981544733}, {"id": 10, "seek": 2908, "start": 35.56, "end": 41.4, "text": " We have to consider a system that comprises of an application and its logic and a storage", "tokens": [50688, 492, 362, 281, 1949, 257, 1185, 300, 16802, 3598, 295, 364, 3861, 293, 1080, 9952, 293, 257, 6725, 50980], "temperature": 0.0, "avg_logprob": -0.11259085589116162, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.001323407981544733}, {"id": 11, "seek": 2908, "start": 41.4, "end": 44.68, "text": " system and the data that is written.", "tokens": [50980, 1185, 293, 264, 1412, 300, 307, 3720, 13, 51144], "temperature": 0.0, "avg_logprob": -0.11259085589116162, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.001323407981544733}, {"id": 12, "seek": 2908, "start": 44.68, "end": 51.04, "text": " And only then, including the logic, we can reason about the data and we can define whether", "tokens": [51144, 400, 787, 550, 11, 3009, 264, 9952, 11, 321, 393, 1778, 466, 264, 1412, 293, 321, 393, 6964, 1968, 51462], "temperature": 0.0, "avg_logprob": -0.11259085589116162, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.001323407981544733}, {"id": 13, "seek": 2908, "start": 51.04, "end": 53.36, "text": " it's consistent or not.", "tokens": [51462, 309, 311, 8398, 420, 406, 13, 51578], "temperature": 0.0, "avg_logprob": -0.11259085589116162, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.001323407981544733}, {"id": 14, "seek": 2908, "start": 53.36, "end": 58.599999999999994, "text": " So the application is running fine, data is written, everything is consistent.", "tokens": [51578, 407, 264, 3861, 307, 2614, 2489, 11, 1412, 307, 3720, 11, 1203, 307, 8398, 13, 51840], "temperature": 0.0, "avg_logprob": -0.11259085589116162, "compression_ratio": 1.7811158798283262, "no_speech_prob": 0.001323407981544733}, {"id": 15, "seek": 5860, "start": 58.6, "end": 62.24, "text": " What happens if the application dies?", "tokens": [50364, 708, 2314, 498, 264, 3861, 2714, 30, 50546], "temperature": 0.0, "avg_logprob": -0.10396909713745117, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005272792768664658}, {"id": 16, "seek": 5860, "start": 62.24, "end": 66.0, "text": " We don't know whether the system is in a consistent state or not.", "tokens": [50546, 492, 500, 380, 458, 1968, 264, 1185, 307, 294, 257, 8398, 1785, 420, 406, 13, 50734], "temperature": 0.0, "avg_logprob": -0.10396909713745117, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005272792768664658}, {"id": 17, "seek": 5860, "start": 66.0, "end": 73.68, "text": " So actually it is possible to write an application and to write a storage provider in a way that", "tokens": [50734, 407, 767, 309, 307, 1944, 281, 2464, 364, 3861, 293, 281, 2464, 257, 6725, 12398, 294, 257, 636, 300, 51118], "temperature": 0.0, "avg_logprob": -0.10396909713745117, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005272792768664658}, {"id": 18, "seek": 5860, "start": 73.68, "end": 80.84, "text": " by doing some smart decisions during the runtime, then the application can reach a consistent", "tokens": [51118, 538, 884, 512, 4069, 5327, 1830, 264, 34474, 11, 550, 264, 3861, 393, 2524, 257, 8398, 51476], "temperature": 0.0, "avg_logprob": -0.10396909713745117, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005272792768664658}, {"id": 19, "seek": 5860, "start": 80.84, "end": 83.98, "text": " state after restarting, after a crash.", "tokens": [51476, 1785, 934, 21022, 278, 11, 934, 257, 8252, 13, 51633], "temperature": 0.0, "avg_logprob": -0.10396909713745117, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005272792768664658}, {"id": 20, "seek": 5860, "start": 83.98, "end": 86.92, "text": " This is called crash consistency.", "tokens": [51633, 639, 307, 1219, 8252, 14416, 13, 51780], "temperature": 0.0, "avg_logprob": -0.10396909713745117, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005272792768664658}, {"id": 21, "seek": 8692, "start": 86.92, "end": 91.2, "text": " Now how is crash consistency related to snapshots?", "tokens": [50364, 823, 577, 307, 8252, 14416, 4077, 281, 19206, 27495, 30, 50578], "temperature": 0.0, "avg_logprob": -0.14875699224926175, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.00022689628531225026}, {"id": 22, "seek": 8692, "start": 91.2, "end": 95.92, "text": " And the truth is that the snapshot, or rather the snapshot that we're talking about, which", "tokens": [50578, 400, 264, 3494, 307, 300, 264, 30163, 11, 420, 2831, 264, 30163, 300, 321, 434, 1417, 466, 11, 597, 50814], "temperature": 0.0, "avg_logprob": -0.14875699224926175, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.00022689628531225026}, {"id": 23, "seek": 8692, "start": 95.92, "end": 101.36, "text": " is a crash consistent background snapshot, is equivalent to a crash.", "tokens": [50814, 307, 257, 8252, 8398, 3678, 30163, 11, 307, 10344, 281, 257, 8252, 13, 51086], "temperature": 0.0, "avg_logprob": -0.14875699224926175, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.00022689628531225026}, {"id": 24, "seek": 8692, "start": 101.36, "end": 107.68, "text": " The application cannot tell between restarting after a crash or restarting after you recovered", "tokens": [51086, 440, 3861, 2644, 980, 1296, 21022, 278, 934, 257, 8252, 420, 21022, 278, 934, 291, 19542, 51402], "temperature": 0.0, "avg_logprob": -0.14875699224926175, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.00022689628531225026}, {"id": 25, "seek": 8692, "start": 107.68, "end": 110.24000000000001, "text": " from a snapshot.", "tokens": [51402, 490, 257, 30163, 13, 51530], "temperature": 0.0, "avg_logprob": -0.14875699224926175, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.00022689628531225026}, {"id": 26, "seek": 8692, "start": 110.24000000000001, "end": 111.72, "text": " So let's look at the system.", "tokens": [51530, 407, 718, 311, 574, 412, 264, 1185, 13, 51604], "temperature": 0.0, "avg_logprob": -0.14875699224926175, "compression_ratio": 1.7205882352941178, "no_speech_prob": 0.00022689628531225026}, {"id": 27, "seek": 11172, "start": 111.72, "end": 117.6, "text": " We have an application in storage and it was a poor selection of a storage.", "tokens": [50364, 492, 362, 364, 3861, 294, 6725, 293, 309, 390, 257, 4716, 9450, 295, 257, 6725, 13, 50658], "temperature": 0.0, "avg_logprob": -0.17207337561107816, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.09937604516744614}, {"id": 28, "seek": 11172, "start": 117.6, "end": 120.8, "text": " We cannot reach consistency in the system.", "tokens": [50658, 492, 2644, 2524, 14416, 294, 264, 1185, 13, 50818], "temperature": 0.0, "avg_logprob": -0.17207337561107816, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.09937604516744614}, {"id": 29, "seek": 11172, "start": 120.8, "end": 125.03999999999999, "text": " Even if the application is a high quality, well designed app.", "tokens": [50818, 2754, 498, 264, 3861, 307, 257, 1090, 3125, 11, 731, 4761, 724, 13, 51030], "temperature": 0.0, "avg_logprob": -0.17207337561107816, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.09937604516744614}, {"id": 30, "seek": 11172, "start": 125.03999999999999, "end": 126.84, "text": " Same thing other way around.", "tokens": [51030, 10635, 551, 661, 636, 926, 13, 51120], "temperature": 0.0, "avg_logprob": -0.17207337561107816, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.09937604516744614}, {"id": 31, "seek": 11172, "start": 126.84, "end": 132.24, "text": " If you are using an industry leader storage provider but the application just doesn't", "tokens": [51120, 759, 291, 366, 1228, 364, 3518, 5263, 6725, 12398, 457, 264, 3861, 445, 1177, 380, 51390], "temperature": 0.0, "avg_logprob": -0.17207337561107816, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.09937604516744614}, {"id": 32, "seek": 11172, "start": 132.24, "end": 137.94, "text": " care or is poorly written, you're not getting consistency.", "tokens": [51390, 1127, 420, 307, 22271, 3720, 11, 291, 434, 406, 1242, 14416, 13, 51675], "temperature": 0.0, "avg_logprob": -0.17207337561107816, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.09937604516744614}, {"id": 33, "seek": 13794, "start": 137.94, "end": 142.7, "text": " If you have a well written application and an industry leader storage provider, it is", "tokens": [50364, 759, 291, 362, 257, 731, 3720, 3861, 293, 364, 3518, 5263, 6725, 12398, 11, 309, 307, 50602], "temperature": 0.0, "avg_logprob": -0.1667200399904835, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.00844225101172924}, {"id": 34, "seek": 13794, "start": 142.7, "end": 147.66, "text": " still a question whether the consistency or rather crash consistency is reachable.", "tokens": [50602, 920, 257, 1168, 1968, 264, 14416, 420, 2831, 8252, 14416, 307, 2524, 712, 13, 50850], "temperature": 0.0, "avg_logprob": -0.1667200399904835, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.00844225101172924}, {"id": 35, "seek": 13794, "start": 147.66, "end": 154.5, "text": " And it is only reachable if we consider a contract that an application and storage adhere", "tokens": [50850, 400, 309, 307, 787, 2524, 712, 498, 321, 1949, 257, 4364, 300, 364, 3861, 293, 6725, 33584, 51192], "temperature": 0.0, "avg_logprob": -0.1667200399904835, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.00844225101172924}, {"id": 36, "seek": 13794, "start": 154.5, "end": 160.74, "text": " to and then when they both do things right, together they can reach crash consistency.", "tokens": [51192, 281, 293, 550, 562, 436, 1293, 360, 721, 558, 11, 1214, 436, 393, 2524, 8252, 14416, 13, 51504], "temperature": 0.0, "avg_logprob": -0.1667200399904835, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.00844225101172924}, {"id": 37, "seek": 13794, "start": 160.74, "end": 164.66, "text": " And the scope of this talk would like to refer to this kind of application and storage as", "tokens": [51504, 400, 264, 11923, 295, 341, 751, 576, 411, 281, 2864, 281, 341, 733, 295, 3861, 293, 6725, 382, 51700], "temperature": 0.0, "avg_logprob": -0.1667200399904835, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.00844225101172924}, {"id": 38, "seek": 13794, "start": 164.66, "end": 165.66, "text": " enterprise.", "tokens": [51700, 14132, 13, 51750], "temperature": 0.0, "avg_logprob": -0.1667200399904835, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.00844225101172924}, {"id": 39, "seek": 16566, "start": 165.66, "end": 170.66, "text": " There are many ways to unpack this term so bear with us for this scope of this talk.", "tokens": [50364, 821, 366, 867, 2098, 281, 26699, 341, 1433, 370, 6155, 365, 505, 337, 341, 11923, 295, 341, 751, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1599722642164964, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0033744892571121454}, {"id": 40, "seek": 16566, "start": 170.66, "end": 176.3, "text": " An enterprise app and an enterprise storage from our perspective are those that adhere", "tokens": [50614, 1107, 14132, 724, 293, 364, 14132, 6725, 490, 527, 4585, 366, 729, 300, 33584, 50896], "temperature": 0.0, "avg_logprob": -0.1599722642164964, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0033744892571121454}, {"id": 41, "seek": 16566, "start": 176.3, "end": 178.9, "text": " to a contract.", "tokens": [50896, 281, 257, 4364, 13, 51026], "temperature": 0.0, "avg_logprob": -0.1599722642164964, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0033744892571121454}, {"id": 42, "seek": 16566, "start": 178.9, "end": 182.14, "text": " Now what is this contract?", "tokens": [51026, 823, 437, 307, 341, 4364, 30, 51188], "temperature": 0.0, "avg_logprob": -0.1599722642164964, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0033744892571121454}, {"id": 43, "seek": 16566, "start": 182.14, "end": 187.98, "text": " Or rather in our case what is interesting is what is it that we need to do itself as", "tokens": [51188, 1610, 2831, 294, 527, 1389, 437, 307, 1880, 307, 437, 307, 309, 300, 321, 643, 281, 360, 2564, 382, 51480], "temperature": 0.0, "avg_logprob": -0.1599722642164964, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0033744892571121454}, {"id": 44, "seek": 16566, "start": 187.98, "end": 194.7, "text": " a storage provider that we automatically combine with an enterprise app that is already written", "tokens": [51480, 257, 6725, 12398, 300, 321, 6772, 10432, 365, 364, 14132, 724, 300, 307, 1217, 3720, 51816], "temperature": 0.0, "avg_logprob": -0.1599722642164964, "compression_ratio": 1.7589285714285714, "no_speech_prob": 0.0033744892571121454}, {"id": 45, "seek": 19470, "start": 194.7, "end": 199.85999999999999, "text": " with this contract in mind and together we provide a crash consistent system.", "tokens": [50364, 365, 341, 4364, 294, 1575, 293, 1214, 321, 2893, 257, 8252, 8398, 1185, 13, 50622], "temperature": 0.0, "avg_logprob": -0.18687672545944434, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03563598915934563}, {"id": 46, "seek": 19470, "start": 199.85999999999999, "end": 205.61999999999998, "text": " And I remind you we want a crash consistent system because this is what enables consistent", "tokens": [50622, 400, 286, 4160, 291, 321, 528, 257, 8252, 8398, 1185, 570, 341, 307, 437, 17077, 8398, 50910], "temperature": 0.0, "avg_logprob": -0.18687672545944434, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03563598915934563}, {"id": 47, "seek": 19470, "start": 205.61999999999998, "end": 208.78, "text": " snapshots.", "tokens": [50910, 19206, 27495, 13, 51068], "temperature": 0.0, "avg_logprob": -0.18687672545944434, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03563598915934563}, {"id": 48, "seek": 19470, "start": 208.78, "end": 213.82, "text": " To understand that we need to understand right ordering.", "tokens": [51068, 1407, 1223, 300, 321, 643, 281, 1223, 558, 21739, 13, 51320], "temperature": 0.0, "avg_logprob": -0.18687672545944434, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03563598915934563}, {"id": 49, "seek": 19470, "start": 213.82, "end": 219.01999999999998, "text": " Rights A and B here, they are ordered if and only if.", "tokens": [51320, 16352, 316, 293, 363, 510, 11, 436, 366, 8866, 498, 293, 787, 498, 13, 51580], "temperature": 0.0, "avg_logprob": -0.18687672545944434, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.03563598915934563}, {"id": 50, "seek": 21902, "start": 219.02, "end": 226.06, "text": " Right B begins after the app has received and processed an acknowledgement from the", "tokens": [50364, 1779, 363, 7338, 934, 264, 724, 575, 4613, 293, 18846, 364, 47227, 490, 264, 50716], "temperature": 0.0, "avg_logprob": -0.16982715885813643, "compression_ratio": 1.841628959276018, "no_speech_prob": 0.4367143213748932}, {"id": 51, "seek": 21902, "start": 226.06, "end": 230.06, "text": " data storage that right A has been successfully completed.", "tokens": [50716, 1412, 6725, 300, 558, 316, 575, 668, 10727, 7365, 13, 50916], "temperature": 0.0, "avg_logprob": -0.16982715885813643, "compression_ratio": 1.841628959276018, "no_speech_prob": 0.4367143213748932}, {"id": 52, "seek": 21902, "start": 230.06, "end": 236.06, "text": " Now it is important to note that the acknowledgement has to come from the storage and not from", "tokens": [50916, 823, 309, 307, 1021, 281, 3637, 300, 264, 47227, 575, 281, 808, 490, 264, 6725, 293, 406, 490, 51216], "temperature": 0.0, "avg_logprob": -0.16982715885813643, "compression_ratio": 1.841628959276018, "no_speech_prob": 0.4367143213748932}, {"id": 53, "seek": 21902, "start": 236.06, "end": 240.38, "text": " the OS because usually your applications are interacting with the operating system and", "tokens": [51216, 264, 12731, 570, 2673, 428, 5821, 366, 18017, 365, 264, 7447, 1185, 293, 51432], "temperature": 0.0, "avg_logprob": -0.16982715885813643, "compression_ratio": 1.841628959276018, "no_speech_prob": 0.4367143213748932}, {"id": 54, "seek": 21902, "start": 240.38, "end": 246.14000000000001, "text": " it is the operating system that gives you the first acknowledgement after a right.", "tokens": [51432, 309, 307, 264, 7447, 1185, 300, 2709, 291, 264, 700, 47227, 934, 257, 558, 13, 51720], "temperature": 0.0, "avg_logprob": -0.16982715885813643, "compression_ratio": 1.841628959276018, "no_speech_prob": 0.4367143213748932}, {"id": 55, "seek": 24614, "start": 246.14, "end": 248.29999999999998, "text": " These applications are aware of that.", "tokens": [50364, 1981, 5821, 366, 3650, 295, 300, 13, 50472], "temperature": 0.0, "avg_logprob": -0.14743776190770816, "compression_ratio": 1.6324324324324324, "no_speech_prob": 0.02191779389977455}, {"id": 56, "seek": 24614, "start": 248.29999999999998, "end": 256.21999999999997, "text": " They know that they need to do to use things like flush or direct IO to know that the acknowledgement", "tokens": [50472, 814, 458, 300, 436, 643, 281, 360, 281, 764, 721, 411, 19568, 420, 2047, 39839, 281, 458, 300, 264, 47227, 50868], "temperature": 0.0, "avg_logprob": -0.14743776190770816, "compression_ratio": 1.6324324324324324, "no_speech_prob": 0.02191779389977455}, {"id": 57, "seek": 24614, "start": 256.21999999999997, "end": 264.26, "text": " is originating at the storage level to perform ordered rights A and B.", "tokens": [50868, 307, 4957, 990, 412, 264, 6725, 1496, 281, 2042, 8866, 4601, 316, 293, 363, 13, 51270], "temperature": 0.0, "avg_logprob": -0.14743776190770816, "compression_ratio": 1.6324324324324324, "no_speech_prob": 0.02191779389977455}, {"id": 58, "seek": 24614, "start": 264.26, "end": 269.7, "text": " Now that we understand what ordered rights are, let's inspect what the storage needs", "tokens": [51270, 823, 300, 321, 1223, 437, 8866, 4601, 366, 11, 718, 311, 15018, 437, 264, 6725, 2203, 51542], "temperature": 0.0, "avg_logprob": -0.14743776190770816, "compression_ratio": 1.6324324324324324, "no_speech_prob": 0.02191779389977455}, {"id": 59, "seek": 24614, "start": 269.7, "end": 271.02, "text": " to do.", "tokens": [51542, 281, 360, 13, 51608], "temperature": 0.0, "avg_logprob": -0.14743776190770816, "compression_ratio": 1.6324324324324324, "no_speech_prob": 0.02191779389977455}, {"id": 60, "seek": 27102, "start": 271.02, "end": 273.09999999999997, "text": " So we have two ordered rights.", "tokens": [50364, 407, 321, 362, 732, 8866, 4601, 13, 50468], "temperature": 0.0, "avg_logprob": -0.12354679902394612, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.003428430063650012}, {"id": 61, "seek": 27102, "start": 273.09999999999997, "end": 278.18, "text": " Right B hasn't begun before A has been acknowledged.", "tokens": [50468, 1779, 363, 6132, 380, 16009, 949, 316, 575, 668, 27262, 13, 50722], "temperature": 0.0, "avg_logprob": -0.12354679902394612, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.003428430063650012}, {"id": 62, "seek": 27102, "start": 278.18, "end": 282.62, "text": " And in order to understand what storage should do or shouldn't do, let's look at different", "tokens": [50722, 400, 294, 1668, 281, 1223, 437, 6725, 820, 360, 420, 4659, 380, 360, 11, 718, 311, 574, 412, 819, 50944], "temperature": 0.0, "avg_logprob": -0.12354679902394612, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.003428430063650012}, {"id": 63, "seek": 27102, "start": 282.62, "end": 288.94, "text": " types of background snapshots that the storage might have taken.", "tokens": [50944, 3467, 295, 3678, 19206, 27495, 300, 264, 6725, 1062, 362, 2726, 13, 51260], "temperature": 0.0, "avg_logprob": -0.12354679902394612, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.003428430063650012}, {"id": 64, "seek": 27102, "start": 288.94, "end": 293.97999999999996, "text": " So it could be that we've taken a snapshot before A and it's a consistent snapshot.", "tokens": [51260, 407, 309, 727, 312, 300, 321, 600, 2726, 257, 30163, 949, 316, 293, 309, 311, 257, 8398, 30163, 13, 51512], "temperature": 0.0, "avg_logprob": -0.12354679902394612, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.003428430063650012}, {"id": 65, "seek": 27102, "start": 293.97999999999996, "end": 299.41999999999996, "text": " It's a snapshot that has no knowledge about neither A or B.", "tokens": [51512, 467, 311, 257, 30163, 300, 575, 572, 3601, 466, 9662, 316, 420, 363, 13, 51784], "temperature": 0.0, "avg_logprob": -0.12354679902394612, "compression_ratio": 1.7330316742081449, "no_speech_prob": 0.003428430063650012}, {"id": 66, "seek": 29942, "start": 299.42, "end": 304.18, "text": " It could be that the snapshot already captured A and we know this is possible because there", "tokens": [50364, 467, 727, 312, 300, 264, 30163, 1217, 11828, 316, 293, 321, 458, 341, 307, 1944, 570, 456, 50602], "temperature": 0.0, "avg_logprob": -0.1478607177734375, "compression_ratio": 1.8352059925093633, "no_speech_prob": 0.0079348748549819}, {"id": 67, "seek": 29942, "start": 304.18, "end": 309.1, "text": " is a window of time when A has already been completed and B hasn't yet started because", "tokens": [50602, 307, 257, 4910, 295, 565, 562, 316, 575, 1217, 668, 7365, 293, 363, 6132, 380, 1939, 1409, 570, 50848], "temperature": 0.0, "avg_logprob": -0.1478607177734375, "compression_ratio": 1.8352059925093633, "no_speech_prob": 0.0079348748549819}, {"id": 68, "seek": 29942, "start": 309.1, "end": 311.34000000000003, "text": " application was waiting for the acknowledgement.", "tokens": [50848, 3861, 390, 3806, 337, 264, 47227, 13, 50960], "temperature": 0.0, "avg_logprob": -0.1478607177734375, "compression_ratio": 1.8352059925093633, "no_speech_prob": 0.0079348748549819}, {"id": 69, "seek": 29942, "start": 311.34000000000003, "end": 313.62, "text": " So this is a consistent snapshot.", "tokens": [50960, 407, 341, 307, 257, 8398, 30163, 13, 51074], "temperature": 0.0, "avg_logprob": -0.1478607177734375, "compression_ratio": 1.8352059925093633, "no_speech_prob": 0.0079348748549819}, {"id": 70, "seek": 29942, "start": 313.62, "end": 318.14, "text": " And finally there could be a case where the snapshot contains both and B. This is also", "tokens": [51074, 400, 2721, 456, 727, 312, 257, 1389, 689, 264, 30163, 8306, 1293, 293, 363, 13, 639, 307, 611, 51300], "temperature": 0.0, "avg_logprob": -0.1478607177734375, "compression_ratio": 1.8352059925093633, "no_speech_prob": 0.0079348748549819}, {"id": 71, "seek": 29942, "start": 318.14, "end": 320.18, "text": " a consistent snapshot.", "tokens": [51300, 257, 8398, 30163, 13, 51402], "temperature": 0.0, "avg_logprob": -0.1478607177734375, "compression_ratio": 1.8352059925093633, "no_speech_prob": 0.0079348748549819}, {"id": 72, "seek": 29942, "start": 320.18, "end": 325.98, "text": " What the storage or enterprise storage provider must absolutely promise to the app is that", "tokens": [51402, 708, 264, 6725, 420, 14132, 6725, 12398, 1633, 3122, 6228, 281, 264, 724, 307, 300, 51692], "temperature": 0.0, "avg_logprob": -0.1478607177734375, "compression_ratio": 1.8352059925093633, "no_speech_prob": 0.0079348748549819}, {"id": 73, "seek": 29942, "start": 325.98, "end": 328.34000000000003, "text": " snapshot 4 is not possible.", "tokens": [51692, 30163, 1017, 307, 406, 1944, 13, 51810], "temperature": 0.0, "avg_logprob": -0.1478607177734375, "compression_ratio": 1.8352059925093633, "no_speech_prob": 0.0079348748549819}, {"id": 74, "seek": 32834, "start": 328.34, "end": 334.65999999999997, "text": " There cannot be a case that a snapshot contains operation B but somehow lost operation A.", "tokens": [50364, 821, 2644, 312, 257, 1389, 300, 257, 30163, 8306, 6916, 363, 457, 6063, 2731, 6916, 316, 13, 50680], "temperature": 0.0, "avg_logprob": -0.22271992819649833, "compression_ratio": 1.3217391304347825, "no_speech_prob": 0.01559009961783886}, {"id": 75, "seek": 32834, "start": 334.65999999999997, "end": 341.17999999999995, "text": " That's basically the contract to preserve the order of rights.", "tokens": [50680, 663, 311, 1936, 264, 4364, 281, 15665, 264, 1668, 295, 4601, 13, 51006], "temperature": 0.0, "avg_logprob": -0.22271992819649833, "compression_ratio": 1.3217391304347825, "no_speech_prob": 0.01559009961783886}, {"id": 76, "seek": 34118, "start": 341.18, "end": 359.62, "text": " So we're going to ask Patrick to discuss how this relates to CEP.", "tokens": [50364, 407, 321, 434, 516, 281, 1029, 13980, 281, 2248, 577, 341, 16155, 281, 383, 8929, 13, 51286], "temperature": 0.0, "avg_logprob": -0.22062641924077814, "compression_ratio": 1.3247863247863247, "no_speech_prob": 0.04071572422981262}, {"id": 77, "seek": 34118, "start": 359.62, "end": 370.98, "text": " So within the context of CEPFS, we're going to first start looking at how snapshots work.", "tokens": [51286, 407, 1951, 264, 4319, 295, 383, 8929, 29318, 11, 321, 434, 516, 281, 700, 722, 1237, 412, 577, 19206, 27495, 589, 13, 51854], "temperature": 0.0, "avg_logprob": -0.22062641924077814, "compression_ratio": 1.3247863247863247, "no_speech_prob": 0.04071572422981262}, {"id": 78, "seek": 37098, "start": 371.98, "end": 381.98, "text": " So on the left we have MDS0, managing two trees of interest in the file system, SV1", "tokens": [50414, 407, 322, 264, 1411, 321, 362, 376, 11844, 15, 11, 11642, 732, 5852, 295, 1179, 294, 264, 3991, 1185, 11, 31910, 16, 50914], "temperature": 0.0, "avg_logprob": -0.2604680742536272, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.06648702174425125}, {"id": 79, "seek": 37098, "start": 381.98, "end": 387.46000000000004, "text": " and SV2 and two clients, client 1 and client 2.", "tokens": [50914, 293, 31910, 17, 293, 732, 6982, 11, 6423, 502, 293, 6423, 568, 13, 51188], "temperature": 0.0, "avg_logprob": -0.2604680742536272, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.06648702174425125}, {"id": 80, "seek": 37098, "start": 387.46000000000004, "end": 390.54, "text": " So how do we take a snapshot in CEPFS?", "tokens": [51188, 407, 577, 360, 321, 747, 257, 30163, 294, 383, 8929, 29318, 30, 51342], "temperature": 0.0, "avg_logprob": -0.2604680742536272, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.06648702174425125}, {"id": 81, "seek": 37098, "start": 390.54, "end": 400.74, "text": " Well there will be an operation sent to MDS called MakeSnap and that will snapshot a particular", "tokens": [51342, 1042, 456, 486, 312, 364, 6916, 2279, 281, 376, 11844, 1219, 4387, 50, 37252, 293, 300, 486, 30163, 257, 1729, 51852], "temperature": 0.0, "avg_logprob": -0.2604680742536272, "compression_ratio": 1.4860335195530727, "no_speech_prob": 0.06648702174425125}, {"id": 82, "seek": 40074, "start": 400.74, "end": 402.74, "text": " tree within the file system.", "tokens": [50364, 4230, 1951, 264, 3991, 1185, 13, 50464], "temperature": 0.0, "avg_logprob": -0.15455382369285406, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.014055571518838406}, {"id": 83, "seek": 40074, "start": 402.74, "end": 408.34000000000003, "text": " In CEPFS you're allowed to snapshot a particular directory and everything under it, not just", "tokens": [50464, 682, 383, 8929, 29318, 291, 434, 4350, 281, 30163, 257, 1729, 21120, 293, 1203, 833, 309, 11, 406, 445, 50744], "temperature": 0.0, "avg_logprob": -0.15455382369285406, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.014055571518838406}, {"id": 84, "seek": 40074, "start": 408.34000000000003, "end": 411.06, "text": " the entire file system.", "tokens": [50744, 264, 2302, 3991, 1185, 13, 50880], "temperature": 0.0, "avg_logprob": -0.15455382369285406, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.014055571518838406}, {"id": 85, "seek": 40074, "start": 411.06, "end": 416.02, "text": " When a snapshot is taken it sends a notification to all the clients that the snapshot has been", "tokens": [50880, 1133, 257, 30163, 307, 2726, 309, 14790, 257, 11554, 281, 439, 264, 6982, 300, 264, 30163, 575, 668, 51128], "temperature": 0.0, "avg_logprob": -0.15455382369285406, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.014055571518838406}, {"id": 86, "seek": 40074, "start": 416.02, "end": 422.7, "text": " taken for a particular I know that the client is interacting with.", "tokens": [51128, 2726, 337, 257, 1729, 286, 458, 300, 264, 6423, 307, 18017, 365, 13, 51462], "temperature": 0.0, "avg_logprob": -0.15455382369285406, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.014055571518838406}, {"id": 87, "seek": 40074, "start": 422.7, "end": 429.5, "text": " And once that's all done the snapshot's complete.", "tokens": [51462, 400, 1564, 300, 311, 439, 1096, 264, 30163, 311, 3566, 13, 51802], "temperature": 0.0, "avg_logprob": -0.15455382369285406, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.014055571518838406}, {"id": 88, "seek": 42950, "start": 429.5, "end": 436.22, "text": " If you want to take another snapshot of another volume you have to do another operation.", "tokens": [50364, 759, 291, 528, 281, 747, 1071, 30163, 295, 1071, 5523, 291, 362, 281, 360, 1071, 6916, 13, 50700], "temperature": 0.0, "avg_logprob": -0.17435264587402344, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.006486494094133377}, {"id": 89, "seek": 42950, "start": 436.22, "end": 438.94, "text": " There's no compound snapshot operation.", "tokens": [50700, 821, 311, 572, 14154, 30163, 6916, 13, 50836], "temperature": 0.0, "avg_logprob": -0.17435264587402344, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.006486494094133377}, {"id": 90, "seek": 42950, "start": 438.94, "end": 445.62, "text": " So we send a second snapshot out of the other volume and again notify the clients for any", "tokens": [50836, 407, 321, 2845, 257, 1150, 30163, 484, 295, 264, 661, 5523, 293, 797, 36560, 264, 6982, 337, 604, 51170], "temperature": 0.0, "avg_logprob": -0.17435264587402344, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.006486494094133377}, {"id": 91, "seek": 42950, "start": 445.62, "end": 451.3, "text": " I know that they may be interacting with.", "tokens": [51170, 286, 458, 300, 436, 815, 312, 18017, 365, 13, 51454], "temperature": 0.0, "avg_logprob": -0.17435264587402344, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.006486494094133377}, {"id": 92, "seek": 42950, "start": 451.3, "end": 459.06, "text": " When clients interact with RATOS, the underlying distributed object storage of CEPFS, they", "tokens": [51454, 1133, 6982, 4648, 365, 497, 2218, 4367, 11, 264, 14217, 12631, 2657, 6725, 295, 383, 8929, 29318, 11, 436, 51842], "temperature": 0.0, "avg_logprob": -0.17435264587402344, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.006486494094133377}, {"id": 93, "seek": 45906, "start": 459.06, "end": 468.22, "text": " create snapshots implicitly when they write to the objects that hold the files data.", "tokens": [50364, 1884, 19206, 27495, 26947, 356, 562, 436, 2464, 281, 264, 6565, 300, 1797, 264, 7098, 1412, 13, 50822], "temperature": 0.0, "avg_logprob": -0.1836803343988234, "compression_ratio": 1.6580645161290322, "no_speech_prob": 0.006900805979967117}, {"id": 94, "seek": 45906, "start": 468.22, "end": 475.98, "text": " And they do that by including a snapshot vector of the snapshot IDs that have been taken on", "tokens": [50822, 400, 436, 360, 300, 538, 3009, 257, 30163, 8062, 295, 264, 30163, 48212, 300, 362, 668, 2726, 322, 51210], "temperature": 0.0, "avg_logprob": -0.1836803343988234, "compression_ratio": 1.6580645161290322, "no_speech_prob": 0.006900805979967117}, {"id": 95, "seek": 45906, "start": 475.98, "end": 478.5, "text": " the files.", "tokens": [51210, 264, 7098, 13, 51336], "temperature": 0.0, "avg_logprob": -0.1836803343988234, "compression_ratio": 1.6580645161290322, "no_speech_prob": 0.006900805979967117}, {"id": 96, "seek": 45906, "start": 478.5, "end": 483.86, "text": " And those are what is transmitted to the clients in the snap updates.", "tokens": [51336, 400, 729, 366, 437, 307, 25355, 281, 264, 6982, 294, 264, 13650, 9205, 13, 51604], "temperature": 0.0, "avg_logprob": -0.1836803343988234, "compression_ratio": 1.6580645161290322, "no_speech_prob": 0.006900805979967117}, {"id": 97, "seek": 48386, "start": 483.86, "end": 487.22, "text": " And here lies the rub.", "tokens": [50364, 400, 510, 9134, 264, 5915, 13, 50532], "temperature": 0.0, "avg_logprob": -0.21991057829423385, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.16214635968208313}, {"id": 98, "seek": 48386, "start": 487.22, "end": 495.54, "text": " If this, with CEPFS snapshots we have eventual consistency.", "tokens": [50532, 759, 341, 11, 365, 383, 8929, 29318, 19206, 27495, 321, 362, 33160, 14416, 13, 50948], "temperature": 0.0, "avg_logprob": -0.21991057829423385, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.16214635968208313}, {"id": 99, "seek": 48386, "start": 495.54, "end": 503.5, "text": " Because what, when a snapshot is taken on the file data depends on when the client gets", "tokens": [50948, 1436, 437, 11, 562, 257, 30163, 307, 2726, 322, 264, 3991, 1412, 5946, 322, 562, 264, 6423, 2170, 51346], "temperature": 0.0, "avg_logprob": -0.21991057829423385, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.16214635968208313}, {"id": 100, "seek": 48386, "start": 503.5, "end": 506.98, "text": " the update from the MDS.", "tokens": [51346, 264, 5623, 490, 264, 376, 11844, 13, 51520], "temperature": 0.0, "avg_logprob": -0.21991057829423385, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.16214635968208313}, {"id": 101, "seek": 48386, "start": 506.98, "end": 513.34, "text": " So they're eventually consistent, not synchronous.", "tokens": [51520, 407, 436, 434, 4728, 8398, 11, 406, 44743, 13, 51838], "temperature": 0.0, "avg_logprob": -0.21991057829423385, "compression_ratio": 1.4470588235294117, "no_speech_prob": 0.16214635968208313}, {"id": 102, "seek": 51334, "start": 513.9, "end": 516.46, "text": " To really highlight this we'll look at a case study.", "tokens": [50392, 1407, 534, 5078, 341, 321, 603, 574, 412, 257, 1389, 2979, 13, 50520], "temperature": 0.0, "avg_logprob": -0.22586761821400037, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.06749379634857178}, {"id": 103, "seek": 51334, "start": 516.46, "end": 522.0600000000001, "text": " So here we have two clients in an MDS.", "tokens": [50520, 407, 510, 321, 362, 732, 6982, 294, 364, 376, 11844, 13, 50800], "temperature": 0.0, "avg_logprob": -0.22586761821400037, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.06749379634857178}, {"id": 104, "seek": 51334, "start": 522.0600000000001, "end": 528.34, "text": " Operation B on client two is dependent on the completion of operation A on client one.", "tokens": [50800, 27946, 363, 322, 6423, 732, 307, 12334, 322, 264, 19372, 295, 6916, 316, 322, 6423, 472, 13, 51114], "temperature": 0.0, "avg_logprob": -0.22586761821400037, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.06749379634857178}, {"id": 105, "seek": 51334, "start": 528.34, "end": 532.62, "text": " Let's say this is like a database application, a distributed database.", "tokens": [51114, 961, 311, 584, 341, 307, 411, 257, 8149, 3861, 11, 257, 12631, 8149, 13, 51328], "temperature": 0.0, "avg_logprob": -0.22586761821400037, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.06749379634857178}, {"id": 106, "seek": 51334, "start": 532.62, "end": 540.38, "text": " The MDS is starting a snapshot and it sends the notifications to the clients and expecting", "tokens": [51328, 440, 376, 11844, 307, 2891, 257, 30163, 293, 309, 14790, 264, 13426, 281, 264, 6982, 293, 9650, 51716], "temperature": 0.0, "avg_logprob": -0.22586761821400037, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.06749379634857178}, {"id": 107, "seek": 51334, "start": 540.38, "end": 542.02, "text": " the apps.", "tokens": [51716, 264, 7733, 13, 51798], "temperature": 0.0, "avg_logprob": -0.22586761821400037, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.06749379634857178}, {"id": 108, "seek": 54202, "start": 542.02, "end": 548.18, "text": " Client one initiates operation A after it's been notified of the snapshot.", "tokens": [50364, 2033, 1196, 472, 6265, 1024, 6916, 316, 934, 309, 311, 668, 18013, 295, 264, 30163, 13, 50672], "temperature": 0.0, "avg_logprob": -0.21491776285944758, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.002396328141912818}, {"id": 109, "seek": 54202, "start": 548.18, "end": 553.98, "text": " And so operation A is not part of the snapshot.", "tokens": [50672, 400, 370, 6916, 316, 307, 406, 644, 295, 264, 30163, 13, 50962], "temperature": 0.0, "avg_logprob": -0.21491776285944758, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.002396328141912818}, {"id": 110, "seek": 54202, "start": 553.98, "end": 560.5, "text": " Meanwhile client two has not gotten the notification from the MDS yet or is not processed yet.", "tokens": [50962, 13879, 6423, 732, 575, 406, 5768, 264, 11554, 490, 264, 376, 11844, 1939, 420, 307, 406, 18846, 1939, 13, 51288], "temperature": 0.0, "avg_logprob": -0.21491776285944758, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.002396328141912818}, {"id": 111, "seek": 54202, "start": 560.5, "end": 565.46, "text": " But it has already started operation B. It was just a simple write to a file.", "tokens": [51288, 583, 309, 575, 1217, 1409, 6916, 363, 13, 467, 390, 445, 257, 2199, 2464, 281, 257, 3991, 13, 51536], "temperature": 0.0, "avg_logprob": -0.21491776285944758, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.002396328141912818}, {"id": 112, "seek": 56546, "start": 565.46, "end": 577.1800000000001, "text": " Well operation B is in the snapshot because it processes the notification afterwards.", "tokens": [50364, 1042, 6916, 363, 307, 294, 264, 30163, 570, 309, 7555, 264, 11554, 10543, 13, 50950], "temperature": 0.0, "avg_logprob": -0.2244118433150034, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.001324982033111155}, {"id": 113, "seek": 56546, "start": 577.1800000000001, "end": 579.58, "text": " This is a problem and creates inconsistency.", "tokens": [50950, 639, 307, 257, 1154, 293, 7829, 22039, 468, 3020, 13, 51070], "temperature": 0.0, "avg_logprob": -0.2244118433150034, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.001324982033111155}, {"id": 114, "seek": 56546, "start": 579.58, "end": 587.46, "text": " Op B is in the snapshot but op A is not.", "tokens": [51070, 12011, 363, 307, 294, 264, 30163, 457, 999, 316, 307, 406, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2244118433150034, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.001324982033111155}, {"id": 115, "seek": 56546, "start": 587.46, "end": 592.26, "text": " Looking at this another way you may have a utility that's trying to create a snapshot", "tokens": [51464, 11053, 412, 341, 1071, 636, 291, 815, 362, 257, 14877, 300, 311, 1382, 281, 1884, 257, 30163, 51704], "temperature": 0.0, "avg_logprob": -0.2244118433150034, "compression_ratio": 1.5389221556886228, "no_speech_prob": 0.001324982033111155}, {"id": 116, "seek": 59226, "start": 592.26, "end": 601.7, "text": " on the file system and it tells the MDS to make the snapshot it does.", "tokens": [50364, 322, 264, 3991, 1185, 293, 309, 5112, 264, 376, 11844, 281, 652, 264, 30163, 309, 775, 13, 50836], "temperature": 0.0, "avg_logprob": -0.20140607169504915, "compression_ratio": 1.7967914438502675, "no_speech_prob": 0.015902310609817505}, {"id": 117, "seek": 59226, "start": 601.7, "end": 607.66, "text": " But then induces operation A on the client.", "tokens": [50836, 583, 550, 13716, 887, 6916, 316, 322, 264, 6423, 13, 51134], "temperature": 0.0, "avg_logprob": -0.20140607169504915, "compression_ratio": 1.7967914438502675, "no_speech_prob": 0.015902310609817505}, {"id": 118, "seek": 59226, "start": 607.66, "end": 612.3, "text": " Expecting operation A to not be part of the snapshot because as far as it knows it's already", "tokens": [51134, 46318, 278, 6916, 316, 281, 406, 312, 644, 295, 264, 30163, 570, 382, 1400, 382, 309, 3255, 309, 311, 1217, 51366], "temperature": 0.0, "avg_logprob": -0.20140607169504915, "compression_ratio": 1.7967914438502675, "no_speech_prob": 0.015902310609817505}, {"id": 119, "seek": 59226, "start": 612.3, "end": 614.06, "text": " been taken.", "tokens": [51366, 668, 2726, 13, 51454], "temperature": 0.0, "avg_logprob": -0.20140607169504915, "compression_ratio": 1.7967914438502675, "no_speech_prob": 0.015902310609817505}, {"id": 120, "seek": 59226, "start": 614.06, "end": 616.18, "text": " But that's not the case.", "tokens": [51454, 583, 300, 311, 406, 264, 1389, 13, 51560], "temperature": 0.0, "avg_logprob": -0.20140607169504915, "compression_ratio": 1.7967914438502675, "no_speech_prob": 0.015902310609817505}, {"id": 121, "seek": 59226, "start": 616.18, "end": 621.38, "text": " Operation A is in the snapshot because the client has not been notified yet of the snapshot.", "tokens": [51560, 27946, 316, 307, 294, 264, 30163, 570, 264, 6423, 575, 406, 668, 18013, 1939, 295, 264, 30163, 13, 51820], "temperature": 0.0, "avg_logprob": -0.20140607169504915, "compression_ratio": 1.7967914438502675, "no_speech_prob": 0.015902310609817505}, {"id": 122, "seek": 62138, "start": 622.38, "end": 626.5, "text": " So this is also inconsistent.", "tokens": [50414, 407, 341, 307, 611, 36891, 13, 50620], "temperature": 0.0, "avg_logprob": -0.20767252147197723, "compression_ratio": 1.5024875621890548, "no_speech_prob": 0.03407242149114609}, {"id": 123, "seek": 62138, "start": 626.5, "end": 633.9399999999999, "text": " So the solution we've implemented is fairly common within enterprise storage systems in", "tokens": [50620, 407, 264, 3827, 321, 600, 12270, 307, 6457, 2689, 1951, 14132, 6725, 3652, 294, 50992], "temperature": 0.0, "avg_logprob": -0.20767252147197723, "compression_ratio": 1.5024875621890548, "no_speech_prob": 0.03407242149114609}, {"id": 124, "seek": 62138, "start": 633.9399999999999, "end": 639.78, "text": " the industry that are trying to address this issue of crash consistent snapshots which has", "tokens": [50992, 264, 3518, 300, 366, 1382, 281, 2985, 341, 2734, 295, 8252, 8398, 19206, 27495, 597, 575, 51284], "temperature": 0.0, "avg_logprob": -0.20767252147197723, "compression_ratio": 1.5024875621890548, "no_speech_prob": 0.03407242149114609}, {"id": 125, "seek": 62138, "start": 639.78, "end": 648.5, "text": " become a larger thing right now with Kubernetes CSI requirements is to introduce an IO pause.", "tokens": [51284, 1813, 257, 4833, 551, 558, 586, 365, 23145, 9460, 40, 7728, 307, 281, 5366, 364, 39839, 10465, 13, 51720], "temperature": 0.0, "avg_logprob": -0.20767252147197723, "compression_ratio": 1.5024875621890548, "no_speech_prob": 0.03407242149114609}, {"id": 126, "seek": 64850, "start": 648.5, "end": 656.9, "text": " And IO pause ensures this ordering by preventing any operations from going on within the tree", "tokens": [50364, 400, 39839, 10465, 28111, 341, 21739, 538, 19965, 604, 7705, 490, 516, 322, 1951, 264, 4230, 50784], "temperature": 0.0, "avg_logprob": -0.19740845263004303, "compression_ratio": 1.5138121546961325, "no_speech_prob": 0.000245348404860124}, {"id": 127, "seek": 64850, "start": 656.9, "end": 663.98, "text": " of interest while the snapshot is percolating among the entire file system and all of its", "tokens": [50784, 295, 1179, 1339, 264, 30163, 307, 680, 8768, 990, 3654, 264, 2302, 3991, 1185, 293, 439, 295, 1080, 51138], "temperature": 0.0, "avg_logprob": -0.19740845263004303, "compression_ratio": 1.5138121546961325, "no_speech_prob": 0.000245348404860124}, {"id": 128, "seek": 64850, "start": 663.98, "end": 666.78, "text": " clients.", "tokens": [51138, 6982, 13, 51278], "temperature": 0.0, "avg_logprob": -0.19740845263004303, "compression_ratio": 1.5138121546961325, "no_speech_prob": 0.000245348404860124}, {"id": 129, "seek": 64850, "start": 666.78, "end": 674.98, "text": " So the way this looks in practice is op A is started and IO pause is established.", "tokens": [51278, 407, 264, 636, 341, 1542, 294, 3124, 307, 999, 316, 307, 1409, 293, 39839, 10465, 307, 7545, 13, 51688], "temperature": 0.0, "avg_logprob": -0.19740845263004303, "compression_ratio": 1.5138121546961325, "no_speech_prob": 0.000245348404860124}, {"id": 130, "seek": 67498, "start": 674.98, "end": 682.62, "text": " Point one is trying to induce client two to execute operation B. But operation B cannot", "tokens": [50364, 12387, 472, 307, 1382, 281, 41263, 6423, 732, 281, 14483, 6916, 363, 13, 583, 6916, 363, 2644, 50746], "temperature": 0.0, "avg_logprob": -0.20325109403427333, "compression_ratio": 1.518716577540107, "no_speech_prob": 0.0031230486929416656}, {"id": 131, "seek": 67498, "start": 682.62, "end": 687.3000000000001, "text": " execute because the IO pause is enforced.", "tokens": [50746, 14483, 570, 264, 39839, 10465, 307, 40953, 13, 50980], "temperature": 0.0, "avg_logprob": -0.20325109403427333, "compression_ratio": 1.518716577540107, "no_speech_prob": 0.0031230486929416656}, {"id": 132, "seek": 67498, "start": 687.3000000000001, "end": 693.0600000000001, "text": " Looking at it a little differently you know we could have op A and op B happen before the", "tokens": [50980, 11053, 412, 309, 257, 707, 7614, 291, 458, 321, 727, 362, 999, 316, 293, 999, 363, 1051, 949, 264, 51268], "temperature": 0.0, "avg_logprob": -0.20325109403427333, "compression_ratio": 1.518716577540107, "no_speech_prob": 0.0031230486929416656}, {"id": 133, "seek": 67498, "start": 693.0600000000001, "end": 694.0600000000001, "text": " IO pause.", "tokens": [51268, 39839, 10465, 13, 51318], "temperature": 0.0, "avg_logprob": -0.20325109403427333, "compression_ratio": 1.518716577540107, "no_speech_prob": 0.0031230486929416656}, {"id": 134, "seek": 67498, "start": 694.0600000000001, "end": 695.9, "text": " They're both part of the snapshot.", "tokens": [51318, 814, 434, 1293, 644, 295, 264, 30163, 13, 51410], "temperature": 0.0, "avg_logprob": -0.20325109403427333, "compression_ratio": 1.518716577540107, "no_speech_prob": 0.0031230486929416656}, {"id": 135, "seek": 67498, "start": 695.9, "end": 699.22, "text": " This is consistent.", "tokens": [51410, 639, 307, 8398, 13, 51576], "temperature": 0.0, "avg_logprob": -0.20325109403427333, "compression_ratio": 1.518716577540107, "no_speech_prob": 0.0031230486929416656}, {"id": 136, "seek": 69922, "start": 699.22, "end": 705.78, "text": " And then we may also have a situation where op A is sent to the MDS before the IO pause", "tokens": [50364, 400, 550, 321, 815, 611, 362, 257, 2590, 689, 999, 316, 307, 2279, 281, 264, 376, 11844, 949, 264, 39839, 10465, 50692], "temperature": 0.0, "avg_logprob": -0.1498488559517809, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.0037642051465809345}, {"id": 137, "seek": 69922, "start": 705.78, "end": 708.1800000000001, "text": " just before the IO pause is established.", "tokens": [50692, 445, 949, 264, 39839, 10465, 307, 7545, 13, 50812], "temperature": 0.0, "avg_logprob": -0.1498488559517809, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.0037642051465809345}, {"id": 138, "seek": 69922, "start": 708.1800000000001, "end": 712.22, "text": " Op A waits through the entire course of the IO pause.", "tokens": [50812, 12011, 316, 40597, 807, 264, 2302, 1164, 295, 264, 39839, 10465, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1498488559517809, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.0037642051465809345}, {"id": 139, "seek": 69922, "start": 712.22, "end": 716.6600000000001, "text": " When the IO pause is lifted operation A is allowed to complete and then the notification", "tokens": [51014, 1133, 264, 39839, 10465, 307, 17854, 6916, 316, 307, 4350, 281, 3566, 293, 550, 264, 11554, 51236], "temperature": 0.0, "avg_logprob": -0.1498488559517809, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.0037642051465809345}, {"id": 140, "seek": 69922, "start": 716.6600000000001, "end": 721.74, "text": " is sent back to the client that the operation is done and op B is started.", "tokens": [51236, 307, 2279, 646, 281, 264, 6423, 300, 264, 6916, 307, 1096, 293, 999, 363, 307, 1409, 13, 51490], "temperature": 0.0, "avg_logprob": -0.1498488559517809, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.0037642051465809345}, {"id": 141, "seek": 69922, "start": 721.74, "end": 724.1800000000001, "text": " This is also consistent.", "tokens": [51490, 639, 307, 611, 8398, 13, 51612], "temperature": 0.0, "avg_logprob": -0.1498488559517809, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.0037642051465809345}, {"id": 142, "seek": 72418, "start": 725.18, "end": 734.42, "text": " We'll also look at a super operation, a compound monolith called a mix snap, a variant of mix", "tokens": [50414, 492, 603, 611, 574, 412, 257, 1687, 6916, 11, 257, 14154, 1108, 29131, 1219, 257, 2890, 13650, 11, 257, 17501, 295, 2890, 50876], "temperature": 0.0, "avg_logprob": -0.23524879827731993, "compression_ratio": 1.7357512953367875, "no_speech_prob": 0.003537560813128948}, {"id": 143, "seek": 72418, "start": 734.42, "end": 739.62, "text": " snap which will also establish this IO pause for you.", "tokens": [50876, 13650, 597, 486, 611, 8327, 341, 39839, 10465, 337, 291, 13, 51136], "temperature": 0.0, "avg_logprob": -0.23524879827731993, "compression_ratio": 1.7357512953367875, "no_speech_prob": 0.003537560813128948}, {"id": 144, "seek": 72418, "start": 739.62, "end": 744.78, "text": " But we'll also look at the underlying mono operations you can do to establish this IO", "tokens": [51136, 583, 321, 603, 611, 574, 412, 264, 14217, 35624, 7705, 291, 393, 360, 281, 8327, 341, 39839, 51394], "temperature": 0.0, "avg_logprob": -0.23524879827731993, "compression_ratio": 1.7357512953367875, "no_speech_prob": 0.003537560813128948}, {"id": 145, "seek": 72418, "start": 744.78, "end": 746.3399999999999, "text": " pause.", "tokens": [51394, 10465, 13, 51472], "temperature": 0.0, "avg_logprob": -0.23524879827731993, "compression_ratio": 1.7357512953367875, "no_speech_prob": 0.003537560813128948}, {"id": 146, "seek": 72418, "start": 746.3399999999999, "end": 754.14, "text": " And that will be the mechanism you can use to actually to establish these crash consistencies.", "tokens": [51472, 400, 300, 486, 312, 264, 7513, 291, 393, 764, 281, 767, 281, 8327, 613, 8252, 4603, 6464, 13, 51862], "temperature": 0.0, "avg_logprob": -0.23524879827731993, "compression_ratio": 1.7357512953367875, "no_speech_prob": 0.003537560813128948}, {"id": 147, "seek": 75414, "start": 754.14, "end": 759.14, "text": " So I'll move back onto the approach.", "tokens": [50364, 407, 286, 603, 1286, 646, 3911, 264, 3109, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2845092523293417, "compression_ratio": 1.4610389610389611, "no_speech_prob": 0.005997337866574526}, {"id": 148, "seek": 75414, "start": 769.14, "end": 771.14, "text": " Thanks Patrick.", "tokens": [51114, 2561, 13980, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2845092523293417, "compression_ratio": 1.4610389610389611, "no_speech_prob": 0.005997337866574526}, {"id": 149, "seek": 75414, "start": 771.14, "end": 777.66, "text": " So we now realize that all we need to do is an IO pause and let's see how we do it.", "tokens": [51214, 407, 321, 586, 4325, 300, 439, 321, 643, 281, 360, 307, 364, 39839, 10465, 293, 718, 311, 536, 577, 321, 360, 309, 13, 51540], "temperature": 0.0, "avg_logprob": -0.2845092523293417, "compression_ratio": 1.4610389610389611, "no_speech_prob": 0.005997337866574526}, {"id": 150, "seek": 75414, "start": 777.66, "end": 782.22, "text": " Now we were considering a couple of approaches and one of the approaches apparently is a", "tokens": [51540, 823, 321, 645, 8079, 257, 1916, 295, 11587, 293, 472, 295, 264, 11587, 7970, 307, 257, 51768], "temperature": 0.0, "avg_logprob": -0.2845092523293417, "compression_ratio": 1.4610389610389611, "no_speech_prob": 0.005997337866574526}, {"id": 151, "seek": 78222, "start": 782.22, "end": 783.7, "text": " monolith solution.", "tokens": [50364, 1108, 29131, 3827, 13, 50438], "temperature": 0.0, "avg_logprob": -0.15061125129160255, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.01204222347587347}, {"id": 152, "seek": 78222, "start": 783.7, "end": 789.34, "text": " We would define some new comment that would mean consistent snapshot and you would configure", "tokens": [50438, 492, 576, 6964, 512, 777, 2871, 300, 576, 914, 8398, 30163, 293, 291, 576, 22162, 50720], "temperature": 0.0, "avg_logprob": -0.15061125129160255, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.01204222347587347}, {"id": 153, "seek": 78222, "start": 789.34, "end": 795.62, "text": " it somehow and start it off and it could be either sync across file systems and even", "tokens": [50720, 309, 6063, 293, 722, 309, 766, 293, 309, 727, 312, 2139, 20271, 2108, 3991, 3652, 293, 754, 51034], "temperature": 0.0, "avg_logprob": -0.15061125129160255, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.01204222347587347}, {"id": 154, "seek": 78222, "start": 795.62, "end": 799.86, "text": " across a file system which is a CFFS and an RBD volume.", "tokens": [51034, 2108, 257, 3991, 1185, 597, 307, 257, 383, 6345, 50, 293, 364, 40302, 35, 5523, 13, 51246], "temperature": 0.0, "avg_logprob": -0.15061125129160255, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.01204222347587347}, {"id": 155, "seek": 78222, "start": 799.86, "end": 804.9, "text": " If you have multiple different types of volumes configured for your Kubernetes applications", "tokens": [51246, 759, 291, 362, 3866, 819, 3467, 295, 22219, 30538, 337, 428, 23145, 5821, 51498], "temperature": 0.0, "avg_logprob": -0.15061125129160255, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.01204222347587347}, {"id": 156, "seek": 78222, "start": 804.9, "end": 808.46, "text": " with this approach you will still be able to create a consistent snapshot across all", "tokens": [51498, 365, 341, 3109, 291, 486, 920, 312, 1075, 281, 1884, 257, 8398, 30163, 2108, 439, 51676], "temperature": 0.0, "avg_logprob": -0.15061125129160255, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.01204222347587347}, {"id": 157, "seek": 78222, "start": 808.46, "end": 811.4200000000001, "text": " those things.", "tokens": [51676, 729, 721, 13, 51824], "temperature": 0.0, "avg_logprob": -0.15061125129160255, "compression_ratio": 1.7372549019607844, "no_speech_prob": 0.01204222347587347}, {"id": 158, "seek": 81142, "start": 811.62, "end": 819.42, "text": " So in order to expose this to the user we introduce a concept of QS set and QS routes.", "tokens": [50374, 407, 294, 1668, 281, 19219, 341, 281, 264, 4195, 321, 5366, 257, 3410, 295, 1249, 50, 992, 293, 1249, 50, 18242, 13, 50764], "temperature": 0.0, "avg_logprob": -0.19296660932522375, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.004375589545816183}, {"id": 159, "seek": 81142, "start": 819.42, "end": 826.78, "text": " So a QS set is basically just a collection of mount points that you'd like to QS your", "tokens": [50764, 407, 257, 1249, 50, 992, 307, 1936, 445, 257, 5765, 295, 3746, 2793, 300, 291, 1116, 411, 281, 1249, 50, 428, 51132], "temperature": 0.0, "avg_logprob": -0.19296660932522375, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.004375589545816183}, {"id": 160, "seek": 81142, "start": 826.78, "end": 827.86, "text": " IO to.", "tokens": [51132, 39839, 281, 13, 51186], "temperature": 0.0, "avg_logprob": -0.19296660932522375, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.004375589545816183}, {"id": 161, "seek": 81142, "start": 827.86, "end": 832.54, "text": " In the world of Kubernetes there would be a set of volumes that you would like to QS", "tokens": [51186, 682, 264, 1002, 295, 23145, 456, 576, 312, 257, 992, 295, 22219, 300, 291, 576, 411, 281, 1249, 50, 51420], "temperature": 0.0, "avg_logprob": -0.19296660932522375, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.004375589545816183}, {"id": 162, "seek": 81142, "start": 832.54, "end": 834.9, "text": " your IOS to.", "tokens": [51420, 428, 286, 4367, 281, 13, 51538], "temperature": 0.0, "avg_logprob": -0.19296660932522375, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.004375589545816183}, {"id": 163, "seek": 81142, "start": 834.9, "end": 841.18, "text": " It's reasonable to give users this entity of QS set because you don't want them to", "tokens": [51538, 467, 311, 10585, 281, 976, 5022, 341, 13977, 295, 1249, 50, 992, 570, 291, 500, 380, 528, 552, 281, 51852], "temperature": 0.0, "avg_logprob": -0.19296660932522375, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.004375589545816183}, {"id": 164, "seek": 84118, "start": 841.18, "end": 844.8199999999999, "text": " chase around all the different sub volumes whether they are QS or not.", "tokens": [50364, 15359, 926, 439, 264, 819, 1422, 22219, 1968, 436, 366, 1249, 50, 420, 406, 13, 50546], "temperature": 0.0, "avg_logprob": -0.15901859795174947, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.0006978476885706186}, {"id": 165, "seek": 84118, "start": 844.8199999999999, "end": 849.9399999999999, "text": " We're interested if a group of volumes are together QS and that's what we are waiting.", "tokens": [50546, 492, 434, 3102, 498, 257, 1594, 295, 22219, 366, 1214, 1249, 50, 293, 300, 311, 437, 321, 366, 3806, 13, 50802], "temperature": 0.0, "avg_logprob": -0.15901859795174947, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.0006978476885706186}, {"id": 166, "seek": 84118, "start": 849.9399999999999, "end": 855.38, "text": " So a QS set implements this state transition.", "tokens": [50802, 407, 257, 1249, 50, 992, 704, 17988, 341, 1785, 6034, 13, 51074], "temperature": 0.0, "avg_logprob": -0.15901859795174947, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.0006978476885706186}, {"id": 167, "seek": 84118, "start": 855.38, "end": 863.3, "text": " Now internally your mount points they map to some path inside CFFS file system and this", "tokens": [51074, 823, 19501, 428, 3746, 2793, 436, 4471, 281, 512, 3100, 1854, 383, 6345, 50, 3991, 1185, 293, 341, 51470], "temperature": 0.0, "avg_logprob": -0.15901859795174947, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.0006978476885706186}, {"id": 168, "seek": 84118, "start": 863.3, "end": 865.02, "text": " is where the magic happens.", "tokens": [51470, 307, 689, 264, 5585, 2314, 13, 51556], "temperature": 0.0, "avg_logprob": -0.15901859795174947, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.0006978476885706186}, {"id": 169, "seek": 86502, "start": 865.02, "end": 872.8199999999999, "text": " This is where we actually QS in IO and we refer to that as a QS route.", "tokens": [50364, 639, 307, 689, 321, 767, 1249, 50, 294, 39839, 293, 321, 2864, 281, 300, 382, 257, 1249, 50, 7955, 13, 50754], "temperature": 0.0, "avg_logprob": -0.1106995256935678, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.002354694064706564}, {"id": 170, "seek": 86502, "start": 872.8199999999999, "end": 879.74, "text": " We have also thought about the condition where a QS route may be a part of multiple QS sets", "tokens": [50754, 492, 362, 611, 1194, 466, 264, 4188, 689, 257, 1249, 50, 7955, 815, 312, 257, 644, 295, 3866, 1249, 50, 6352, 51100], "temperature": 0.0, "avg_logprob": -0.1106995256935678, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.002354694064706564}, {"id": 171, "seek": 86502, "start": 879.74, "end": 887.6999999999999, "text": " at the same time because we don't want to interact too much with the logic of automated", "tokens": [51100, 412, 264, 912, 565, 570, 321, 500, 380, 528, 281, 4648, 886, 709, 365, 264, 9952, 295, 18473, 51498], "temperature": 0.0, "avg_logprob": -0.1106995256935678, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.002354694064706564}, {"id": 172, "seek": 86502, "start": 887.6999999999999, "end": 893.74, "text": " snapshots like Kubernetes that might somehow involve consistent snapshot with some volume", "tokens": [51498, 19206, 27495, 411, 23145, 300, 1062, 6063, 9494, 8398, 30163, 365, 512, 5523, 51800], "temperature": 0.0, "avg_logprob": -0.1106995256935678, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.002354694064706564}, {"id": 173, "seek": 89374, "start": 893.78, "end": 896.82, "text": " that is part of two different unrelated processes.", "tokens": [50366, 300, 307, 644, 295, 732, 819, 38967, 7555, 13, 50518], "temperature": 0.0, "avg_logprob": -0.19107613196739784, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.019693143665790558}, {"id": 174, "seek": 89374, "start": 896.82, "end": 899.22, "text": " The way we resolve it is really simple.", "tokens": [50518, 440, 636, 321, 14151, 309, 307, 534, 2199, 13, 50638], "temperature": 0.0, "avg_logprob": -0.19107613196739784, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.019693143665790558}, {"id": 175, "seek": 89374, "start": 899.22, "end": 908.94, "text": " As long as the route is part of at least one active QS set IO to this route is QS.", "tokens": [50638, 1018, 938, 382, 264, 7955, 307, 644, 295, 412, 1935, 472, 4967, 1249, 50, 992, 39839, 281, 341, 7955, 307, 1249, 50, 13, 51124], "temperature": 0.0, "avg_logprob": -0.19107613196739784, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.019693143665790558}, {"id": 176, "seek": 89374, "start": 908.94, "end": 912.02, "text": " So let's talk about the API.", "tokens": [51124, 407, 718, 311, 751, 466, 264, 9362, 13, 51278], "temperature": 0.0, "avg_logprob": -0.19107613196739784, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.019693143665790558}, {"id": 177, "seek": 89374, "start": 912.02, "end": 914.14, "text": " This is the comment that we're suggesting.", "tokens": [51278, 639, 307, 264, 2871, 300, 321, 434, 18094, 13, 51384], "temperature": 0.0, "avg_logprob": -0.19107613196739784, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.019693143665790558}, {"id": 178, "seek": 89374, "start": 914.14, "end": 917.7, "text": " QS we give it a file system name.", "tokens": [51384, 1249, 50, 321, 976, 309, 257, 3991, 1185, 1315, 13, 51562], "temperature": 0.0, "avg_logprob": -0.19107613196739784, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.019693143665790558}, {"id": 179, "seek": 89374, "start": 917.7, "end": 923.1800000000001, "text": " We name our set ID so that we can refer to it later and then you are including as many", "tokens": [51562, 492, 1315, 527, 992, 7348, 370, 300, 321, 393, 2864, 281, 309, 1780, 293, 550, 291, 366, 3009, 382, 867, 51836], "temperature": 0.0, "avg_logprob": -0.19107613196739784, "compression_ratio": 1.5708154506437768, "no_speech_prob": 0.019693143665790558}, {"id": 180, "seek": 92318, "start": 923.18, "end": 925.14, "text": " mount points as you wish into the set.", "tokens": [50364, 3746, 2793, 382, 291, 3172, 666, 264, 992, 13, 50462], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 181, "seek": 92318, "start": 925.14, "end": 930.3399999999999, "text": " You can also ask this comment to be synchronous by minus minus a weight and so it won't return", "tokens": [50462, 509, 393, 611, 1029, 341, 2871, 281, 312, 44743, 538, 3175, 3175, 257, 3364, 293, 370, 309, 1582, 380, 2736, 50722], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 182, "seek": 92318, "start": 930.3399999999999, "end": 933.7399999999999, "text": " until the QS has been achieved.", "tokens": [50722, 1826, 264, 1249, 50, 575, 668, 11042, 13, 50892], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 183, "seek": 92318, "start": 933.7399999999999, "end": 936.14, "text": " Once that is done you can go on creating snapshots.", "tokens": [50892, 3443, 300, 307, 1096, 291, 393, 352, 322, 4084, 19206, 27495, 13, 51012], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 184, "seek": 92318, "start": 936.14, "end": 937.14, "text": " These are regular snapshots.", "tokens": [51012, 1981, 366, 3890, 19206, 27495, 13, 51062], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 185, "seek": 92318, "start": 937.14, "end": 939.66, "text": " This is the snapshots that you do in CFFS.", "tokens": [51062, 639, 307, 264, 19206, 27495, 300, 291, 360, 294, 383, 6345, 50, 13, 51188], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 186, "seek": 92318, "start": 939.66, "end": 941.3399999999999, "text": " Nothing changed about those.", "tokens": [51188, 6693, 3105, 466, 729, 13, 51272], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 187, "seek": 92318, "start": 941.3399999999999, "end": 945.14, "text": " So we've created three snapshots for three mount points that we've added to the QS set", "tokens": [51272, 407, 321, 600, 2942, 1045, 19206, 27495, 337, 1045, 3746, 2793, 300, 321, 600, 3869, 281, 264, 1249, 50, 992, 51462], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 188, "seek": 92318, "start": 945.14, "end": 949.02, "text": " and then we again refer to the QS comment but this time we're asking it to release the", "tokens": [51462, 293, 550, 321, 797, 2864, 281, 264, 1249, 50, 2871, 457, 341, 565, 321, 434, 3365, 309, 281, 4374, 264, 51656], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 189, "seek": 92318, "start": 949.02, "end": 950.26, "text": " pause.", "tokens": [51656, 10465, 13, 51718], "temperature": 0.0, "avg_logprob": -0.153966527785698, "compression_ratio": 1.7632508833922262, "no_speech_prob": 0.001244263374246657}, {"id": 190, "seek": 95026, "start": 950.8199999999999, "end": 956.26, "text": " If we successfully QS hopefully we haven't done anything else if there was a failure and", "tokens": [50392, 759, 321, 10727, 1249, 50, 4696, 321, 2378, 380, 1096, 1340, 1646, 498, 456, 390, 257, 7763, 293, 50664], "temperature": 0.0, "avg_logprob": -0.19556085146390476, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.000319937797030434}, {"id": 191, "seek": 95026, "start": 956.26, "end": 963.38, "text": " then the release also succeeded then we know that those three snapshots are consistent because", "tokens": [50664, 550, 264, 4374, 611, 20263, 550, 321, 458, 300, 729, 1045, 19206, 27495, 366, 8398, 570, 51020], "temperature": 0.0, "avg_logprob": -0.19556085146390476, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.000319937797030434}, {"id": 192, "seek": 95026, "start": 963.38, "end": 972.42, "text": " the pause has been confirmed active for the whole duration of this process.", "tokens": [51020, 264, 10465, 575, 668, 11341, 4967, 337, 264, 1379, 16365, 295, 341, 1399, 13, 51472], "temperature": 0.0, "avg_logprob": -0.19556085146390476, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.000319937797030434}, {"id": 193, "seek": 95026, "start": 972.42, "end": 975.26, "text": " And here's your monolith.", "tokens": [51472, 400, 510, 311, 428, 1108, 29131, 13, 51614], "temperature": 0.0, "avg_logprob": -0.19556085146390476, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.000319937797030434}, {"id": 194, "seek": 97526, "start": 975.26, "end": 980.78, "text": " Hopefully almost for free we're having also a monolith approach so like a one liner for", "tokens": [50364, 10429, 1920, 337, 1737, 321, 434, 1419, 611, 257, 1108, 29131, 3109, 370, 411, 257, 472, 24468, 337, 50640], "temperature": 0.0, "avg_logprob": -0.18853908672667385, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.010312982834875584}, {"id": 195, "seek": 97526, "start": 980.78, "end": 985.7, "text": " system administrators who don't need to interface with the internals.", "tokens": [50640, 1185, 27754, 567, 500, 380, 643, 281, 9226, 365, 264, 2154, 1124, 13, 50886], "temperature": 0.0, "avg_logprob": -0.18853908672667385, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.010312982834875584}, {"id": 196, "seek": 97526, "start": 985.7, "end": 989.22, "text": " We're suggesting a minus minus consistent switch to the snapshot.", "tokens": [50886, 492, 434, 18094, 257, 3175, 3175, 8398, 3679, 281, 264, 30163, 13, 51062], "temperature": 0.0, "avg_logprob": -0.18853908672667385, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.010312982834875584}, {"id": 197, "seek": 97526, "start": 989.22, "end": 992.38, "text": " We're changing the semantics of this comment a little bit by being able to provide all", "tokens": [51062, 492, 434, 4473, 264, 4361, 45298, 295, 341, 2871, 257, 707, 857, 538, 885, 1075, 281, 2893, 439, 51220], "temperature": 0.0, "avg_logprob": -0.18853908672667385, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.010312982834875584}, {"id": 198, "seek": 97526, "start": 992.38, "end": 994.62, "text": " the mount points in the same time.", "tokens": [51220, 264, 3746, 2793, 294, 264, 912, 565, 13, 51332], "temperature": 0.0, "avg_logprob": -0.18853908672667385, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.010312982834875584}, {"id": 199, "seek": 97526, "start": 994.62, "end": 997.8199999999999, "text": " And then this is going to do everything under the hood.", "tokens": [51332, 400, 550, 341, 307, 516, 281, 360, 1203, 833, 264, 13376, 13, 51492], "temperature": 0.0, "avg_logprob": -0.18853908672667385, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.010312982834875584}, {"id": 200, "seek": 97526, "start": 997.8199999999999, "end": 999.38, "text": " It's the same thing.", "tokens": [51492, 467, 311, 264, 912, 551, 13, 51570], "temperature": 0.0, "avg_logprob": -0.18853908672667385, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.010312982834875584}, {"id": 201, "seek": 97526, "start": 999.38, "end": 1003.54, "text": " It's going to do it for you.", "tokens": [51570, 467, 311, 516, 281, 360, 309, 337, 291, 13, 51778], "temperature": 0.0, "avg_logprob": -0.18853908672667385, "compression_ratio": 1.714828897338403, "no_speech_prob": 0.010312982834875584}, {"id": 202, "seek": 100354, "start": 1003.54, "end": 1012.18, "text": " Now we have a tool and we can shoot our leg with it of course because we can DOS our application.", "tokens": [50364, 823, 321, 362, 257, 2290, 293, 321, 393, 3076, 527, 1676, 365, 309, 295, 1164, 570, 321, 393, 413, 4367, 527, 3861, 13, 50796], "temperature": 0.0, "avg_logprob": -0.12856035143415503, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.002546547446399927}, {"id": 203, "seek": 100354, "start": 1012.18, "end": 1018.14, "text": " And we thought about this and we've built in DOS protection inside the QS database.", "tokens": [50796, 400, 321, 1194, 466, 341, 293, 321, 600, 3094, 294, 413, 4367, 6334, 1854, 264, 1249, 50, 8149, 13, 51094], "temperature": 0.0, "avg_logprob": -0.12856035143415503, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.002546547446399927}, {"id": 204, "seek": 100354, "start": 1018.14, "end": 1021.4599999999999, "text": " We've done this by implementing two watchdog timers.", "tokens": [51094, 492, 600, 1096, 341, 538, 18114, 732, 1159, 14833, 524, 433, 13, 51260], "temperature": 0.0, "avg_logprob": -0.12856035143415503, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.002546547446399927}, {"id": 205, "seek": 100354, "start": 1021.4599999999999, "end": 1024.42, "text": " The first watchdog timer is a timeout.", "tokens": [51260, 440, 700, 1159, 14833, 19247, 307, 257, 565, 346, 13, 51408], "temperature": 0.0, "avg_logprob": -0.12856035143415503, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.002546547446399927}, {"id": 206, "seek": 100354, "start": 1024.42, "end": 1028.22, "text": " So when we consider the set it's going to spend some time QSing.", "tokens": [51408, 407, 562, 321, 1949, 264, 992, 309, 311, 516, 281, 3496, 512, 565, 1249, 50, 278, 13, 51598], "temperature": 0.0, "avg_logprob": -0.12856035143415503, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.002546547446399927}, {"id": 207, "seek": 100354, "start": 1028.22, "end": 1029.22, "text": " Why?", "tokens": [51598, 1545, 30, 51648], "temperature": 0.0, "avg_logprob": -0.12856035143415503, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.002546547446399927}, {"id": 208, "seek": 100354, "start": 1029.22, "end": 1031.46, "text": " Because there are ongoing operations, right?", "tokens": [51648, 1436, 456, 366, 10452, 7705, 11, 558, 30, 51760], "temperature": 0.0, "avg_logprob": -0.12856035143415503, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.002546547446399927}, {"id": 209, "seek": 103146, "start": 1031.46, "end": 1036.58, "text": " And before we can acknowledge QSing we have to let applications finish whatever they have", "tokens": [50364, 400, 949, 321, 393, 10692, 1249, 50, 278, 321, 362, 281, 718, 5821, 2413, 2035, 436, 362, 50620], "temperature": 0.0, "avg_logprob": -0.10282888619796089, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004259455017745495}, {"id": 210, "seek": 103146, "start": 1036.58, "end": 1038.3400000000001, "text": " been doing right now.", "tokens": [50620, 668, 884, 558, 586, 13, 50708], "temperature": 0.0, "avg_logprob": -0.10282888619796089, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004259455017745495}, {"id": 211, "seek": 103146, "start": 1038.3400000000001, "end": 1044.94, "text": " So under the hood the QSing is managed automatically for you over each and every mount point.", "tokens": [50708, 407, 833, 264, 13376, 264, 1249, 50, 278, 307, 6453, 6772, 337, 291, 670, 1184, 293, 633, 3746, 935, 13, 51038], "temperature": 0.0, "avg_logprob": -0.10282888619796089, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004259455017745495}, {"id": 212, "seek": 103146, "start": 1044.94, "end": 1049.82, "text": " And so all the mount points have this timeout to reach the QSing.", "tokens": [51038, 400, 370, 439, 264, 3746, 2793, 362, 341, 565, 346, 281, 2524, 264, 1249, 50, 278, 13, 51282], "temperature": 0.0, "avg_logprob": -0.10282888619796089, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004259455017745495}, {"id": 213, "seek": 103146, "start": 1049.82, "end": 1055.18, "text": " And then if at least one of the mount points fails to reach QSing within the timeout then", "tokens": [51282, 400, 550, 498, 412, 1935, 472, 295, 264, 3746, 2793, 18199, 281, 2524, 1249, 50, 278, 1951, 264, 565, 346, 550, 51550], "temperature": 0.0, "avg_logprob": -0.10282888619796089, "compression_ratio": 1.7524271844660195, "no_speech_prob": 0.004259455017745495}, {"id": 214, "seek": 105518, "start": 1055.18, "end": 1063.66, "text": " the whole set is timed out and whichever QS that were achieved are released immediately.", "tokens": [50364, 264, 1379, 992, 307, 44696, 484, 293, 24123, 1249, 50, 300, 645, 11042, 366, 4736, 4258, 13, 50788], "temperature": 0.0, "avg_logprob": -0.08939416929223072, "compression_ratio": 1.648780487804878, "no_speech_prob": 0.02295793779194355}, {"id": 215, "seek": 105518, "start": 1063.66, "end": 1069.22, "text": " Now the next thing, the second timer is the QS expiration timer.", "tokens": [50788, 823, 264, 958, 551, 11, 264, 1150, 19247, 307, 264, 1249, 50, 39657, 19247, 13, 51066], "temperature": 0.0, "avg_logprob": -0.08939416929223072, "compression_ratio": 1.648780487804878, "no_speech_prob": 0.02295793779194355}, {"id": 216, "seek": 105518, "start": 1069.22, "end": 1072.8200000000002, "text": " And for that we need a QS set that actually succeeded to QS.", "tokens": [51066, 400, 337, 300, 321, 643, 257, 1249, 50, 992, 300, 767, 20263, 281, 1249, 50, 13, 51246], "temperature": 0.0, "avg_logprob": -0.08939416929223072, "compression_ratio": 1.648780487804878, "no_speech_prob": 0.02295793779194355}, {"id": 217, "seek": 105518, "start": 1072.8200000000002, "end": 1079.46, "text": " Now we know that in order to succeed to QS we have seen all the mount points successfully", "tokens": [51246, 823, 321, 458, 300, 294, 1668, 281, 7754, 281, 1249, 50, 321, 362, 1612, 439, 264, 3746, 2793, 10727, 51578], "temperature": 0.0, "avg_logprob": -0.08939416929223072, "compression_ratio": 1.648780487804878, "no_speech_prob": 0.02295793779194355}, {"id": 218, "seek": 105518, "start": 1079.46, "end": 1082.5, "text": " QS within the configured timeout.", "tokens": [51578, 1249, 50, 1951, 264, 30538, 565, 346, 13, 51730], "temperature": 0.0, "avg_logprob": -0.08939416929223072, "compression_ratio": 1.648780487804878, "no_speech_prob": 0.02295793779194355}, {"id": 219, "seek": 108250, "start": 1082.5, "end": 1086.42, "text": " But then if we forgot about the set or something crashed, something bad happened and we never", "tokens": [50364, 583, 550, 498, 321, 5298, 466, 264, 992, 420, 746, 24190, 11, 746, 1578, 2011, 293, 321, 1128, 50560], "temperature": 0.0, "avg_logprob": -0.11345939948910573, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.0017271308461204171}, {"id": 220, "seek": 108250, "start": 1086.42, "end": 1091.66, "text": " released it or never cancelled it and the expiration timeout elapsed then the set is", "tokens": [50560, 4736, 309, 420, 1128, 25103, 309, 293, 264, 39657, 565, 346, 806, 2382, 292, 550, 264, 992, 307, 50822], "temperature": 0.0, "avg_logprob": -0.11345939948910573, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.0017271308461204171}, {"id": 221, "seek": 108250, "start": 1091.66, "end": 1095.06, "text": " going to enter the expired site and again everything is going to be released automatically", "tokens": [50822, 516, 281, 3242, 264, 36587, 3621, 293, 797, 1203, 307, 516, 281, 312, 4736, 6772, 50992], "temperature": 0.0, "avg_logprob": -0.11345939948910573, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.0017271308461204171}, {"id": 222, "seek": 108250, "start": 1095.06, "end": 1097.3, "text": " for you.", "tokens": [50992, 337, 291, 13, 51104], "temperature": 0.0, "avg_logprob": -0.11345939948910573, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.0017271308461204171}, {"id": 223, "seek": 108250, "start": 1097.3, "end": 1099.62, "text": " Why do we have two timers and not just one?", "tokens": [51104, 1545, 360, 321, 362, 732, 524, 433, 293, 406, 445, 472, 30, 51220], "temperature": 0.0, "avg_logprob": -0.11345939948910573, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.0017271308461204171}, {"id": 224, "seek": 108250, "start": 1099.62, "end": 1105.26, "text": " And the reason is because you're going to have different considerations when you will", "tokens": [51220, 400, 264, 1778, 307, 570, 291, 434, 516, 281, 362, 819, 24070, 562, 291, 486, 51502], "temperature": 0.0, "avg_logprob": -0.11345939948910573, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.0017271308461204171}, {"id": 225, "seek": 108250, "start": 1105.26, "end": 1107.74, "text": " try to come up with the values for those timers.", "tokens": [51502, 853, 281, 808, 493, 365, 264, 4190, 337, 729, 524, 433, 13, 51626], "temperature": 0.0, "avg_logprob": -0.11345939948910573, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.0017271308461204171}, {"id": 226, "seek": 108250, "start": 1107.74, "end": 1110.22, "text": " The QSing phase really depends on your system.", "tokens": [51626, 440, 1249, 50, 278, 5574, 534, 5946, 322, 428, 1185, 13, 51750], "temperature": 0.0, "avg_logprob": -0.11345939948910573, "compression_ratio": 1.7746478873239437, "no_speech_prob": 0.0017271308461204171}, {"id": 227, "seek": 111022, "start": 1110.22, "end": 1113.66, "text": " It depends on how many mount points, what kind of applications you're running, what", "tokens": [50364, 467, 5946, 322, 577, 867, 3746, 2793, 11, 437, 733, 295, 5821, 291, 434, 2614, 11, 437, 50536], "temperature": 0.0, "avg_logprob": -0.1436016868998986, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.006188191939145327}, {"id": 228, "seek": 111022, "start": 1113.66, "end": 1119.1000000000001, "text": " kind of operations they're doing with the storage because that means how long you should", "tokens": [50536, 733, 295, 7705, 436, 434, 884, 365, 264, 6725, 570, 300, 1355, 577, 938, 291, 820, 50808], "temperature": 0.0, "avg_logprob": -0.1436016868998986, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.006188191939145327}, {"id": 229, "seek": 111022, "start": 1119.1000000000001, "end": 1124.7, "text": " wait for the system to QS and you are allocating some reasonable amount of time for that.", "tokens": [50808, 1699, 337, 264, 1185, 281, 1249, 50, 293, 291, 366, 12660, 990, 512, 10585, 2372, 295, 565, 337, 300, 13, 51088], "temperature": 0.0, "avg_logprob": -0.1436016868998986, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.006188191939145327}, {"id": 230, "seek": 111022, "start": 1124.7, "end": 1127.6200000000001, "text": " However the QS state is already on you.", "tokens": [51088, 2908, 264, 1249, 50, 1785, 307, 1217, 322, 291, 13, 51234], "temperature": 0.0, "avg_logprob": -0.1436016868998986, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.006188191939145327}, {"id": 231, "seek": 111022, "start": 1127.6200000000001, "end": 1132.26, "text": " When the system did reach the QS state and you have the notification about this then", "tokens": [51234, 1133, 264, 1185, 630, 2524, 264, 1249, 50, 1785, 293, 291, 362, 264, 11554, 466, 341, 550, 51466], "temperature": 0.0, "avg_logprob": -0.1436016868998986, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.006188191939145327}, {"id": 232, "seek": 111022, "start": 1132.26, "end": 1137.26, "text": " you can say, okay I know that I need to do just a single snapshot so I don't need more", "tokens": [51466, 291, 393, 584, 11, 1392, 286, 458, 300, 286, 643, 281, 360, 445, 257, 2167, 30163, 370, 286, 500, 380, 643, 544, 51716], "temperature": 0.0, "avg_logprob": -0.1436016868998986, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.006188191939145327}, {"id": 233, "seek": 111022, "start": 1137.26, "end": 1138.9, "text": " than let's say 10 seconds.", "tokens": [51716, 813, 718, 311, 584, 1266, 3949, 13, 51798], "temperature": 0.0, "avg_logprob": -0.1436016868998986, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.006188191939145327}, {"id": 234, "seek": 111022, "start": 1138.9, "end": 1139.9, "text": " Whatever, right?", "tokens": [51798, 8541, 11, 558, 30, 51848], "temperature": 0.0, "avg_logprob": -0.1436016868998986, "compression_ratio": 1.7266666666666666, "no_speech_prob": 0.006188191939145327}, {"id": 235, "seek": 113990, "start": 1139.98, "end": 1144.3000000000002, "text": " Two different considerations that you need to take into account when figuring out these", "tokens": [50368, 4453, 819, 24070, 300, 291, 643, 281, 747, 666, 2696, 562, 15213, 484, 613, 50584], "temperature": 0.0, "avg_logprob": -0.2421130108576949, "compression_ratio": 1.5857740585774058, "no_speech_prob": 0.017094293609261513}, {"id": 236, "seek": 113990, "start": 1144.3000000000002, "end": 1147.98, "text": " two timer values.", "tokens": [50584, 732, 19247, 4190, 13, 50768], "temperature": 0.0, "avg_logprob": -0.2421130108576949, "compression_ratio": 1.5857740585774058, "no_speech_prob": 0.017094293609261513}, {"id": 237, "seek": 113990, "start": 1147.98, "end": 1152.3400000000001, "text": " This is the API, I've simplified it a little bit in the previous slides, this is the API", "tokens": [50768, 639, 307, 264, 9362, 11, 286, 600, 26335, 309, 257, 707, 857, 294, 264, 3894, 9788, 11, 341, 307, 264, 9362, 50986], "temperature": 0.0, "avg_logprob": -0.2421130108576949, "compression_ratio": 1.5857740585774058, "no_speech_prob": 0.017094293609261513}, {"id": 238, "seek": 113990, "start": 1152.3400000000001, "end": 1156.9, "text": " where we're not going to go into all the details but it's basically a Swiss knife.", "tokens": [50986, 689, 321, 434, 406, 516, 281, 352, 666, 439, 264, 4365, 457, 309, 311, 1936, 257, 21965, 7976, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2421130108576949, "compression_ratio": 1.5857740585774058, "no_speech_prob": 0.017094293609261513}, {"id": 239, "seek": 113990, "start": 1156.9, "end": 1161.26, "text": " You should have all the options that you want.", "tokens": [51214, 509, 820, 362, 439, 264, 3956, 300, 291, 528, 13, 51432], "temperature": 0.0, "avg_logprob": -0.2421130108576949, "compression_ratio": 1.5857740585774058, "no_speech_prob": 0.017094293609261513}, {"id": 240, "seek": 113990, "start": 1161.26, "end": 1165.94, "text": " And with that let's ask Patrick to discuss the design.", "tokens": [51432, 400, 365, 300, 718, 311, 1029, 13980, 281, 2248, 264, 1715, 13, 51666], "temperature": 0.0, "avg_logprob": -0.2421130108576949, "compression_ratio": 1.5857740585774058, "no_speech_prob": 0.017094293609261513}, {"id": 241, "seek": 116990, "start": 1169.9, "end": 1186.9, "text": " So let's just take a quick look at the high level design of the entire system.", "tokens": [50364, 407, 718, 311, 445, 747, 257, 1702, 574, 412, 264, 1090, 1496, 1715, 295, 264, 2302, 1185, 13, 51214], "temperature": 0.0, "avg_logprob": -0.18882628281911215, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.007574641145765781}, {"id": 242, "seek": 116990, "start": 1186.9, "end": 1192.66, "text": " So here we have an administrative client which in the wild is probably going to be the Kubernetes", "tokens": [51214, 407, 510, 321, 362, 364, 17900, 6423, 597, 294, 264, 4868, 307, 1391, 516, 281, 312, 264, 23145, 51502], "temperature": 0.0, "avg_logprob": -0.18882628281911215, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.007574641145765781}, {"id": 243, "seek": 116990, "start": 1192.66, "end": 1194.5400000000002, "text": " CSI driver.", "tokens": [51502, 9460, 40, 6787, 13, 51596], "temperature": 0.0, "avg_logprob": -0.18882628281911215, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.007574641145765781}, {"id": 244, "seek": 119454, "start": 1194.6599999999999, "end": 1202.6599999999999, "text": " That's going to be interacting with the CEPH manager which is specifically the volumes", "tokens": [50370, 663, 311, 516, 281, 312, 18017, 365, 264, 383, 8929, 39, 6598, 597, 307, 4682, 264, 22219, 50770], "temperature": 0.0, "avg_logprob": -0.21376774158883602, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.06554769724607468}, {"id": 245, "seek": 119454, "start": 1202.6599999999999, "end": 1206.26, "text": " plug-in within the CEPH manager.", "tokens": [50770, 5452, 12, 259, 1951, 264, 383, 8929, 39, 6598, 13, 50950], "temperature": 0.0, "avg_logprob": -0.21376774158883602, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.06554769724607468}, {"id": 246, "seek": 119454, "start": 1206.26, "end": 1211.54, "text": " That volumes plug-in will be actually executing the commands on one of the MDSs in the file", "tokens": [50950, 663, 22219, 5452, 12, 259, 486, 312, 767, 32368, 264, 16901, 322, 472, 295, 264, 376, 11844, 82, 294, 264, 3991, 51214], "temperature": 0.0, "avg_logprob": -0.21376774158883602, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.06554769724607468}, {"id": 247, "seek": 119454, "start": 1211.54, "end": 1212.54, "text": " system.", "tokens": [51214, 1185, 13, 51264], "temperature": 0.0, "avg_logprob": -0.21376774158883602, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.06554769724607468}, {"id": 248, "seek": 119454, "start": 1212.54, "end": 1219.06, "text": " We'll call it the QS leader or rank zero in reality.", "tokens": [51264, 492, 603, 818, 309, 264, 1249, 50, 5263, 420, 6181, 4018, 294, 4103, 13, 51590], "temperature": 0.0, "avg_logprob": -0.21376774158883602, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.06554769724607468}, {"id": 249, "seek": 119454, "start": 1219.06, "end": 1224.3799999999999, "text": " And then that will be also coordinating with any other ranks in the file system.", "tokens": [51590, 400, 550, 300, 486, 312, 611, 37824, 365, 604, 661, 21406, 294, 264, 3991, 1185, 13, 51856], "temperature": 0.0, "avg_logprob": -0.21376774158883602, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.06554769724607468}, {"id": 250, "seek": 122438, "start": 1224.38, "end": 1227.46, "text": " We'll call them MDSB and C.", "tokens": [50364, 492, 603, 818, 552, 376, 11844, 33, 293, 383, 13, 50518], "temperature": 0.0, "avg_logprob": -0.18728361903010188, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.005217875353991985}, {"id": 251, "seek": 122438, "start": 1227.46, "end": 1233.0200000000002, "text": " And then finally the file system clients which are talking to the MDSs.", "tokens": [50518, 400, 550, 2721, 264, 3991, 1185, 6982, 597, 366, 1417, 281, 264, 376, 11844, 82, 13, 50796], "temperature": 0.0, "avg_logprob": -0.18728361903010188, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.005217875353991985}, {"id": 252, "seek": 122438, "start": 1233.0200000000002, "end": 1239.1000000000001, "text": " To talk to the volumes plug-in the API will be the regular CEPH command line interface", "tokens": [50796, 1407, 751, 281, 264, 22219, 5452, 12, 259, 264, 9362, 486, 312, 264, 3890, 383, 8929, 39, 5622, 1622, 9226, 51100], "temperature": 0.0, "avg_logprob": -0.18728361903010188, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.005217875353991985}, {"id": 253, "seek": 122438, "start": 1239.1000000000001, "end": 1242.1000000000001, "text": " that we all know and love.", "tokens": [51100, 300, 321, 439, 458, 293, 959, 13, 51250], "temperature": 0.0, "avg_logprob": -0.18728361903010188, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.005217875353991985}, {"id": 254, "seek": 122438, "start": 1242.1000000000001, "end": 1245.9, "text": " The API will be exposed at that level.", "tokens": [51250, 440, 9362, 486, 312, 9495, 412, 300, 1496, 13, 51440], "temperature": 0.0, "avg_logprob": -0.18728361903010188, "compression_ratio": 1.4482758620689655, "no_speech_prob": 0.005217875353991985}, {"id": 255, "seek": 124590, "start": 1246.9, "end": 1255.9, "text": " And the volumes plug-in will be talking to the MDSs using the LibcFFS API.", "tokens": [50414, 400, 264, 22219, 5452, 12, 259, 486, 312, 1417, 281, 264, 376, 11844, 82, 1228, 264, 15834, 66, 6345, 50, 9362, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19756759741367438, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.21163004636764526}, {"id": 256, "seek": 124590, "start": 1255.9, "end": 1262.3000000000002, "text": " The MDSs will replicate the QS database amongst themselves so they all have a view of the", "tokens": [50864, 440, 376, 11844, 82, 486, 25356, 264, 1249, 50, 8149, 12918, 2969, 370, 436, 439, 362, 257, 1910, 295, 264, 51184], "temperature": 0.0, "avg_logprob": -0.19756759741367438, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.21163004636764526}, {"id": 257, "seek": 124590, "start": 1262.3000000000002, "end": 1264.3400000000001, "text": " same QS database.", "tokens": [51184, 912, 1249, 50, 8149, 13, 51286], "temperature": 0.0, "avg_logprob": -0.19756759741367438, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.21163004636764526}, {"id": 258, "seek": 124590, "start": 1264.3400000000001, "end": 1272.46, "text": " And then the QS protocol will be used to actually QS the IO and stop the clients from doing", "tokens": [51286, 400, 550, 264, 1249, 50, 10336, 486, 312, 1143, 281, 767, 1249, 50, 264, 39839, 293, 1590, 264, 6982, 490, 884, 51692], "temperature": 0.0, "avg_logprob": -0.19756759741367438, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.21163004636764526}, {"id": 259, "seek": 127246, "start": 1272.46, "end": 1276.3, "text": " IO on a given subtree in the file system.", "tokens": [50364, 39839, 322, 257, 2212, 7257, 701, 294, 264, 3991, 1185, 13, 50556], "temperature": 0.0, "avg_logprob": -0.14665620633871249, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.04599880427122116}, {"id": 260, "seek": 127246, "start": 1276.3, "end": 1278.5, "text": " So we're going to actually talk about that part next.", "tokens": [50556, 407, 321, 434, 516, 281, 767, 751, 466, 300, 644, 958, 13, 50666], "temperature": 0.0, "avg_logprob": -0.14665620633871249, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.04599880427122116}, {"id": 261, "seek": 127246, "start": 1278.5, "end": 1283.8600000000001, "text": " So how do we actually QS IO on a subtree?", "tokens": [50666, 407, 577, 360, 321, 767, 1249, 50, 39839, 322, 257, 7257, 701, 30, 50934], "temperature": 0.0, "avg_logprob": -0.14665620633871249, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.04599880427122116}, {"id": 262, "seek": 127246, "start": 1283.8600000000001, "end": 1290.02, "text": " Before we can get into that we'll take a small step back and look at some context and background", "tokens": [50934, 4546, 321, 393, 483, 666, 300, 321, 603, 747, 257, 1359, 1823, 646, 293, 574, 412, 512, 4319, 293, 3678, 51242], "temperature": 0.0, "avg_logprob": -0.14665620633871249, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.04599880427122116}, {"id": 263, "seek": 127246, "start": 1290.02, "end": 1293.82, "text": " regarding what CEPHFFS client capabilities are.", "tokens": [51242, 8595, 437, 383, 8929, 39, 6345, 50, 6423, 10862, 366, 13, 51432], "temperature": 0.0, "avg_logprob": -0.14665620633871249, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.04599880427122116}, {"id": 264, "seek": 127246, "start": 1293.82, "end": 1301.3400000000001, "text": " So in CEPHFFS it's somewhat different in a number of distributed file systems in that", "tokens": [51432, 407, 294, 383, 8929, 39, 6345, 50, 309, 311, 8344, 819, 294, 257, 1230, 295, 12631, 3991, 3652, 294, 300, 51808], "temperature": 0.0, "avg_logprob": -0.14665620633871249, "compression_ratio": 1.593073593073593, "no_speech_prob": 0.04599880427122116}, {"id": 265, "seek": 130134, "start": 1301.4199999999998, "end": 1307.1799999999998, "text": " the MDSs and the clients are maintaining a cooperative cache.", "tokens": [50368, 264, 376, 11844, 82, 293, 264, 6982, 366, 14916, 257, 31772, 19459, 13, 50656], "temperature": 0.0, "avg_logprob": -0.16183972049069095, "compression_ratio": 1.6510416666666667, "no_speech_prob": 0.05103517323732376}, {"id": 266, "seek": 130134, "start": 1307.1799999999998, "end": 1312.34, "text": " Clients have an elevated status within the file system context in that they also can", "tokens": [50656, 2033, 2448, 362, 364, 23457, 6558, 1951, 264, 3991, 1185, 4319, 294, 300, 436, 611, 393, 50914], "temperature": 0.0, "avg_logprob": -0.16183972049069095, "compression_ratio": 1.6510416666666667, "no_speech_prob": 0.05103517323732376}, {"id": 267, "seek": 130134, "start": 1312.34, "end": 1316.3, "text": " cache metadata, not just data of the file system.", "tokens": [50914, 19459, 26603, 11, 406, 445, 1412, 295, 264, 3991, 1185, 13, 51112], "temperature": 0.0, "avg_logprob": -0.16183972049069095, "compression_ratio": 1.6510416666666667, "no_speech_prob": 0.05103517323732376}, {"id": 268, "seek": 130134, "start": 1316.3, "end": 1321.26, "text": " And not just cache it, they can also have rights to mutate that metadata locally without", "tokens": [51112, 400, 406, 445, 19459, 309, 11, 436, 393, 611, 362, 4601, 281, 5839, 473, 300, 26603, 16143, 1553, 51360], "temperature": 0.0, "avg_logprob": -0.16183972049069095, "compression_ratio": 1.6510416666666667, "no_speech_prob": 0.05103517323732376}, {"id": 269, "seek": 130134, "start": 1321.26, "end": 1326.1399999999999, "text": " involving the MDSs immediately.", "tokens": [51360, 17030, 264, 376, 11844, 82, 4258, 13, 51604], "temperature": 0.0, "avg_logprob": -0.16183972049069095, "compression_ratio": 1.6510416666666667, "no_speech_prob": 0.05103517323732376}, {"id": 270, "seek": 132614, "start": 1326.14, "end": 1334.8200000000002, "text": " So to give a specific example we have here MDS0 has a given file that it's authoritative", "tokens": [50364, 407, 281, 976, 257, 2685, 1365, 321, 362, 510, 376, 11844, 15, 575, 257, 2212, 3991, 300, 309, 311, 3793, 14275, 50798], "temperature": 0.0, "avg_logprob": -0.23943140700056748, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.034602269530296326}, {"id": 271, "seek": 132614, "start": 1334.8200000000002, "end": 1343.5, "text": " for 0x19tb.dat and client.1 on the right has a capability for that file.", "tokens": [50798, 337, 1958, 87, 3405, 83, 65, 13, 20367, 293, 6423, 13, 16, 322, 264, 558, 575, 257, 13759, 337, 300, 3991, 13, 51232], "temperature": 0.0, "avg_logprob": -0.23943140700056748, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.034602269530296326}, {"id": 272, "seek": 132614, "start": 1343.5, "end": 1349.6200000000001, "text": " And the access rights that it has on that file, delegated to it by the MDS is to read,", "tokens": [51232, 400, 264, 2105, 4601, 300, 309, 575, 322, 300, 3991, 11, 15824, 770, 281, 309, 538, 264, 376, 11844, 307, 281, 1401, 11, 51538], "temperature": 0.0, "avg_logprob": -0.23943140700056748, "compression_ratio": 1.4939759036144578, "no_speech_prob": 0.034602269530296326}, {"id": 273, "seek": 134962, "start": 1349.62, "end": 1356.62, "text": " write, cache reads and buffer writes to that file.", "tokens": [50364, 2464, 11, 19459, 15700, 293, 21762, 13657, 281, 300, 3991, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21502999336488784, "compression_ratio": 1.65625, "no_speech_prob": 0.2306143343448639}, {"id": 274, "seek": 134962, "start": 1356.62, "end": 1363.4199999999998, "text": " It has shared extended attributes meaning it has a local cache of the entire extended", "tokens": [50714, 467, 575, 5507, 10913, 17212, 3620, 309, 575, 257, 2654, 19459, 295, 264, 2302, 10913, 51054], "temperature": 0.0, "avg_logprob": -0.21502999336488784, "compression_ratio": 1.65625, "no_speech_prob": 0.2306143343448639}, {"id": 275, "seek": 134962, "start": 1363.4199999999998, "end": 1370.6999999999998, "text": " attribute map for the file and it knows that the extended attribute will not change for", "tokens": [51054, 19667, 4471, 337, 264, 3991, 293, 309, 3255, 300, 264, 10913, 19667, 486, 406, 1319, 337, 51418], "temperature": 0.0, "avg_logprob": -0.21502999336488784, "compression_ratio": 1.65625, "no_speech_prob": 0.2306143343448639}, {"id": 276, "seek": 134962, "start": 1370.6999999999998, "end": 1374.58, "text": " that file without being told by the MDS.", "tokens": [51418, 300, 3991, 1553, 885, 1907, 538, 264, 376, 11844, 13, 51612], "temperature": 0.0, "avg_logprob": -0.21502999336488784, "compression_ratio": 1.65625, "no_speech_prob": 0.2306143343448639}, {"id": 277, "seek": 137458, "start": 1375.54, "end": 1379.8999999999999, "text": " Similarly also for the link count of the file.", "tokens": [50412, 13157, 611, 337, 264, 2113, 1207, 295, 264, 3991, 13, 50630], "temperature": 0.0, "avg_logprob": -0.19095829010009766, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.11903741955757141}, {"id": 278, "seek": 137458, "start": 1379.8999999999999, "end": 1384.6999999999998, "text": " This allows the client to respond to certain stat calls locally without actually talking", "tokens": [50630, 639, 4045, 264, 6423, 281, 4196, 281, 1629, 2219, 5498, 16143, 1553, 767, 1417, 50870], "temperature": 0.0, "avg_logprob": -0.19095829010009766, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.11903741955757141}, {"id": 279, "seek": 137458, "start": 1384.6999999999998, "end": 1387.02, "text": " to the MDS.", "tokens": [50870, 281, 264, 376, 11844, 13, 50986], "temperature": 0.0, "avg_logprob": -0.19095829010009766, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.11903741955757141}, {"id": 280, "seek": 137458, "start": 1387.02, "end": 1391.06, "text": " Capabilities themselves are modeled loosely after leases, an academic paper I put in the", "tokens": [50986, 8363, 6167, 2969, 366, 37140, 37966, 934, 476, 1957, 11, 364, 7778, 3035, 286, 829, 294, 264, 51188], "temperature": 0.0, "avg_logprob": -0.19095829010009766, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.11903741955757141}, {"id": 281, "seek": 137458, "start": 1391.06, "end": 1400.06, "text": " slides and leases are mostly different for having a time-based duration whereas for capabilities", "tokens": [51188, 9788, 293, 476, 1957, 366, 5240, 819, 337, 1419, 257, 565, 12, 6032, 16365, 9735, 337, 10862, 51638], "temperature": 0.0, "avg_logprob": -0.19095829010009766, "compression_ratio": 1.5488372093023255, "no_speech_prob": 0.11903741955757141}, {"id": 282, "seek": 140006, "start": 1400.06, "end": 1407.3799999999999, "text": " within CEPFS they have an undefined time duration.", "tokens": [50364, 1951, 383, 8929, 29318, 436, 362, 364, 674, 5666, 2001, 565, 16365, 13, 50730], "temperature": 0.0, "avg_logprob": -0.19703915459769114, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.006189731415361166}, {"id": 283, "seek": 140006, "start": 1407.3799999999999, "end": 1411.02, "text": " So now to look at exactly how we're going to QSIL.", "tokens": [50730, 407, 586, 281, 574, 412, 2293, 577, 321, 434, 516, 281, 1249, 50, 4620, 13, 50912], "temperature": 0.0, "avg_logprob": -0.19703915459769114, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.006189731415361166}, {"id": 284, "seek": 140006, "start": 1411.02, "end": 1417.06, "text": " So now we have this issue of clients having these capabilities and maybe trying to continue", "tokens": [50912, 407, 586, 321, 362, 341, 2734, 295, 6982, 1419, 613, 10862, 293, 1310, 1382, 281, 2354, 51214], "temperature": 0.0, "avg_logprob": -0.19703915459769114, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.006189731415361166}, {"id": 285, "seek": 140006, "start": 1417.06, "end": 1423.34, "text": " doing writes to the file or modifying metadata so we have to recall those capabilities.", "tokens": [51214, 884, 13657, 281, 264, 3991, 420, 42626, 26603, 370, 321, 362, 281, 9901, 729, 10862, 13, 51528], "temperature": 0.0, "avg_logprob": -0.19703915459769114, "compression_ratio": 1.5271739130434783, "no_speech_prob": 0.006189731415361166}, {"id": 286, "seek": 142334, "start": 1423.34, "end": 1431.1, "text": " So here we have two MDSs, zero and one and a QS database replicated between them.", "tokens": [50364, 407, 510, 321, 362, 732, 376, 11844, 82, 11, 4018, 293, 472, 293, 257, 1249, 50, 8149, 46365, 1296, 552, 13, 50752], "temperature": 0.0, "avg_logprob": -0.17227764129638673, "compression_ratio": 1.5, "no_speech_prob": 0.029295552521944046}, {"id": 287, "seek": 142334, "start": 1431.1, "end": 1436.02, "text": " On the right we have client one with a number of caps for a given tree of interest that", "tokens": [50752, 1282, 264, 558, 321, 362, 6423, 472, 365, 257, 1230, 295, 13855, 337, 257, 2212, 4230, 295, 1179, 300, 50998], "temperature": 0.0, "avg_logprob": -0.17227764129638673, "compression_ratio": 1.5, "no_speech_prob": 0.029295552521944046}, {"id": 288, "seek": 142334, "start": 1436.02, "end": 1441.4599999999998, "text": " we're trying to QS, rooted at SV.", "tokens": [50998, 321, 434, 1382, 281, 1249, 50, 11, 25277, 412, 31910, 13, 51270], "temperature": 0.0, "avg_logprob": -0.17227764129638673, "compression_ratio": 1.5, "no_speech_prob": 0.029295552521944046}, {"id": 289, "seek": 142334, "start": 1441.4599999999998, "end": 1448.6599999999999, "text": " When we want to QS, the QS database launches a QS subvolume operation, it's an internal", "tokens": [51270, 1133, 321, 528, 281, 1249, 50, 11, 264, 1249, 50, 8149, 31841, 257, 1249, 50, 1422, 9646, 2540, 6916, 11, 309, 311, 364, 6920, 51630], "temperature": 0.0, "avg_logprob": -0.17227764129638673, "compression_ratio": 1.5, "no_speech_prob": 0.029295552521944046}, {"id": 290, "seek": 144866, "start": 1448.66, "end": 1454.18, "text": " operation on the MDS, it will start that on MDS zero.", "tokens": [50364, 6916, 322, 264, 376, 11844, 11, 309, 486, 722, 300, 322, 376, 11844, 4018, 13, 50640], "temperature": 0.0, "avg_logprob": -0.15925694386893458, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.5419824123382568}, {"id": 291, "seek": 144866, "start": 1454.18, "end": 1459.3000000000002, "text": " That in turn launches some suboperations, QS subvolume inode and it will do that on", "tokens": [50640, 663, 294, 1261, 31841, 512, 1422, 7192, 763, 11, 1249, 50, 1422, 9646, 2540, 294, 1429, 293, 309, 486, 360, 300, 322, 50896], "temperature": 0.0, "avg_logprob": -0.15925694386893458, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.5419824123382568}, {"id": 292, "seek": 144866, "start": 1459.3000000000002, "end": 1465.5400000000002, "text": " every inode in the given sub tree that that particular MDS is authoritative for.", "tokens": [50896, 633, 294, 1429, 294, 264, 2212, 1422, 4230, 300, 300, 1729, 376, 11844, 307, 3793, 14275, 337, 13, 51208], "temperature": 0.0, "avg_logprob": -0.15925694386893458, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.5419824123382568}, {"id": 293, "seek": 144866, "start": 1465.5400000000002, "end": 1469.94, "text": " So the inodes are colored according to the MDS authority.", "tokens": [51208, 407, 264, 294, 4789, 366, 14332, 4650, 281, 264, 376, 11844, 8281, 13, 51428], "temperature": 0.0, "avg_logprob": -0.15925694386893458, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.5419824123382568}, {"id": 294, "seek": 144866, "start": 1469.94, "end": 1475.02, "text": " So just the first two inodes at the top of the tree the QS subvolume inode calls will", "tokens": [51428, 407, 445, 264, 700, 732, 294, 4789, 412, 264, 1192, 295, 264, 4230, 264, 1249, 50, 1422, 9646, 2540, 294, 1429, 5498, 486, 51682], "temperature": 0.0, "avg_logprob": -0.15925694386893458, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.5419824123382568}, {"id": 295, "seek": 144866, "start": 1475.02, "end": 1476.74, "text": " be performed on.", "tokens": [51682, 312, 10332, 322, 13, 51768], "temperature": 0.0, "avg_logprob": -0.15925694386893458, "compression_ratio": 1.7877358490566038, "no_speech_prob": 0.5419824123382568}, {"id": 296, "seek": 147674, "start": 1477.1, "end": 1479.3, "text": " We'll look at what that does in the next slide.", "tokens": [50382, 492, 603, 574, 412, 437, 300, 775, 294, 264, 958, 4137, 13, 50492], "temperature": 0.0, "avg_logprob": -0.24920310974121093, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.004330852068960667}, {"id": 297, "seek": 147674, "start": 1481.42, "end": 1485.94, "text": " QSDB will also launch it the same operation on MDS one.", "tokens": [50598, 1249, 50, 27735, 486, 611, 4025, 309, 264, 912, 6916, 322, 376, 11844, 472, 13, 50824], "temperature": 0.0, "avg_logprob": -0.24920310974121093, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.004330852068960667}, {"id": 298, "seek": 147674, "start": 1485.94, "end": 1491.78, "text": " It'll launch QS subvolume inode operations on the inodes that it's authoritative for.", "tokens": [50824, 467, 603, 4025, 1249, 50, 1422, 9646, 2540, 294, 1429, 7705, 322, 264, 294, 4789, 300, 309, 311, 3793, 14275, 337, 13, 51116], "temperature": 0.0, "avg_logprob": -0.24920310974121093, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.004330852068960667}, {"id": 299, "seek": 147674, "start": 1493.22, "end": 1496.38, "text": " And then once all this is complete, it's done.", "tokens": [51188, 400, 550, 1564, 439, 341, 307, 3566, 11, 309, 311, 1096, 13, 51346], "temperature": 0.0, "avg_logprob": -0.24920310974121093, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.004330852068960667}, {"id": 300, "seek": 147674, "start": 1496.38, "end": 1498.7, "text": " So what does QS subvolume inode do?", "tokens": [51346, 407, 437, 775, 1249, 50, 1422, 9646, 2540, 294, 1429, 360, 30, 51462], "temperature": 0.0, "avg_logprob": -0.24920310974121093, "compression_ratio": 1.5632183908045978, "no_speech_prob": 0.004330852068960667}, {"id": 301, "seek": 149870, "start": 1499.06, "end": 1506.3400000000001, "text": " We have this, the operation being executed on as an example, OX19DB.dat.", "tokens": [50382, 492, 362, 341, 11, 264, 6916, 885, 17577, 322, 382, 364, 1365, 11, 422, 55, 3405, 27735, 13, 20367, 13, 50746], "temperature": 0.0, "avg_logprob": -0.48579861567570615, "compression_ratio": 1.4456521739130435, "no_speech_prob": 0.006002606358379126}, {"id": 302, "seek": 149870, "start": 1506.3400000000001, "end": 1514.3400000000001, "text": " We have a client on the right with the capability to read, write, buffer and cache data for", "tokens": [50746, 492, 362, 257, 6423, 322, 264, 558, 365, 264, 13759, 281, 1401, 11, 2464, 11, 21762, 293, 19459, 1412, 337, 51146], "temperature": 0.0, "avg_logprob": -0.48579861567570615, "compression_ratio": 1.4456521739130435, "no_speech_prob": 0.006002606358379126}, {"id": 303, "seek": 149870, "start": 1514.3400000000001, "end": 1515.3400000000001, "text": " the file.", "tokens": [51146, 264, 3991, 13, 51196], "temperature": 0.0, "avg_logprob": -0.48579861567570615, "compression_ratio": 1.4456521739130435, "no_speech_prob": 0.006002606358379126}, {"id": 304, "seek": 149870, "start": 1515.3400000000001, "end": 1523.3400000000001, "text": " It has exclusive writes on the X-Satters so it can even make local changes to the X-Satters", "tokens": [51196, 467, 575, 13005, 13657, 322, 264, 1783, 12, 50, 267, 1559, 370, 309, 393, 754, 652, 2654, 2962, 281, 264, 1783, 12, 50, 267, 1559, 51596], "temperature": 0.0, "avg_logprob": -0.48579861567570615, "compression_ratio": 1.4456521739130435, "no_speech_prob": 0.006002606358379126}, {"id": 305, "seek": 152334, "start": 1523.34, "end": 1527.9399999999998, "text": " without telling the MDS immediately about them and returning to the client.", "tokens": [50364, 1553, 3585, 264, 376, 11844, 4258, 466, 552, 293, 12678, 281, 264, 6423, 13, 50594], "temperature": 0.0, "avg_logprob": -0.26951626368931364, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.0032215523533523083}, {"id": 306, "seek": 152334, "start": 1527.9399999999998, "end": 1530.22, "text": " And it has a shared link count.", "tokens": [50594, 400, 309, 575, 257, 5507, 2113, 1207, 13, 50708], "temperature": 0.0, "avg_logprob": -0.26951626368931364, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.0032215523533523083}, {"id": 307, "seek": 152334, "start": 1530.22, "end": 1537.74, "text": " Now when I start the QS subvolume inode operation, it actually behaves similarly to many client", "tokens": [50708, 823, 562, 286, 722, 264, 1249, 50, 1422, 9646, 2540, 294, 1429, 6916, 11, 309, 767, 36896, 14138, 281, 867, 6423, 51084], "temperature": 0.0, "avg_logprob": -0.26951626368931364, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.0032215523533523083}, {"id": 308, "seek": 152334, "start": 1537.74, "end": 1540.54, "text": " requests that are already executed within the MDS.", "tokens": [51084, 12475, 300, 366, 1217, 17577, 1951, 264, 376, 11844, 13, 51224], "temperature": 0.0, "avg_logprob": -0.26951626368931364, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.0032215523533523083}, {"id": 309, "seek": 152334, "start": 1540.54, "end": 1544.02, "text": " We're using the internal facilities that already exist to do this.", "tokens": [51224, 492, 434, 1228, 264, 6920, 9406, 300, 1217, 2514, 281, 360, 341, 13, 51398], "temperature": 0.0, "avg_logprob": -0.26951626368931364, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.0032215523533523083}, {"id": 310, "seek": 152334, "start": 1544.02, "end": 1551.58, "text": " The operation requires a number of locks, internal locks on the inode, not the internal", "tokens": [51398, 440, 6916, 7029, 257, 1230, 295, 20703, 11, 6920, 20703, 322, 264, 294, 1429, 11, 406, 264, 6920, 51776], "temperature": 0.0, "avg_logprob": -0.26951626368931364, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.0032215523533523083}, {"id": 311, "seek": 155158, "start": 1552.58, "end": 1558.58, "text": " not the POSIX facing locks that normal file system users are familiar with.", "tokens": [50414, 406, 264, 430, 4367, 21124, 7170, 20703, 300, 2710, 3991, 1185, 5022, 366, 4963, 365, 13, 50714], "temperature": 0.0, "avg_logprob": -0.26853015687730575, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.010009466670453548}, {"id": 312, "seek": 155158, "start": 1558.58, "end": 1563.62, "text": " These are internal locks on the inode and they control which metadata the operation", "tokens": [50714, 1981, 366, 6920, 20703, 322, 264, 294, 1429, 293, 436, 1969, 597, 26603, 264, 6916, 50966], "temperature": 0.0, "avg_logprob": -0.26853015687730575, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.010009466670453548}, {"id": 313, "seek": 155158, "start": 1563.62, "end": 1566.26, "text": " has permission to change on the inode.", "tokens": [50966, 575, 11226, 281, 1319, 322, 264, 294, 1429, 13, 51098], "temperature": 0.0, "avg_logprob": -0.26853015687730575, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.010009466670453548}, {"id": 314, "seek": 155158, "start": 1566.26, "end": 1573.26, "text": " So we're acquiring the auth lock, the link lock, file lock, etc. for reading or exclusively.", "tokens": [51098, 407, 321, 434, 37374, 264, 6979, 4017, 11, 264, 2113, 4017, 11, 3991, 4017, 11, 5183, 13, 337, 3760, 420, 20638, 13, 51448], "temperature": 0.0, "avg_logprob": -0.26853015687730575, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.010009466670453548}, {"id": 315, "seek": 157326, "start": 1574.26, "end": 1581.26, "text": " And by doing so, the MDS will reconcile this with what writes have already been given to", "tokens": [50414, 400, 538, 884, 370, 11, 264, 376, 11844, 486, 41059, 341, 365, 437, 13657, 362, 1217, 668, 2212, 281, 50764], "temperature": 0.0, "avg_logprob": -0.17014839338219684, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.1845710128545761}, {"id": 316, "seek": 157326, "start": 1582.7, "end": 1586.62, "text": " clients, that is what capabilities have been issued.", "tokens": [50836, 6982, 11, 300, 307, 437, 10862, 362, 668, 14379, 13, 51032], "temperature": 0.0, "avg_logprob": -0.17014839338219684, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.1845710128545761}, {"id": 317, "seek": 157326, "start": 1586.62, "end": 1591.02, "text": " And if necessary, it will revoke capabilities before those locks can be acquired.", "tokens": [51032, 400, 498, 4818, 11, 309, 486, 3698, 2949, 10862, 949, 729, 20703, 393, 312, 17554, 13, 51252], "temperature": 0.0, "avg_logprob": -0.17014839338219684, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.1845710128545761}, {"id": 318, "seek": 157326, "start": 1591.02, "end": 1596.5, "text": " So when this operation tries to acquire those locks, it sends a revoke to the client.", "tokens": [51252, 407, 562, 341, 6916, 9898, 281, 20001, 729, 20703, 11, 309, 14790, 257, 3698, 2949, 281, 264, 6423, 13, 51526], "temperature": 0.0, "avg_logprob": -0.17014839338219684, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.1845710128545761}, {"id": 319, "seek": 157326, "start": 1596.5, "end": 1601.86, "text": " The client updates its local capabilities according to what the MDS is allowing it now", "tokens": [51526, 440, 6423, 9205, 1080, 2654, 10862, 4650, 281, 437, 264, 376, 11844, 307, 8293, 309, 586, 51794], "temperature": 0.0, "avg_logprob": -0.17014839338219684, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.1845710128545761}, {"id": 320, "seek": 160186, "start": 1601.9399999999998, "end": 1608.9399999999998, "text": " to have, possibly fleshing data if it changed the file size for example or added in an extended", "tokens": [50368, 281, 362, 11, 6264, 283, 904, 571, 1412, 498, 309, 3105, 264, 3991, 2744, 337, 1365, 420, 3869, 294, 364, 10913, 50718], "temperature": 0.0, "avg_logprob": -0.27587959983132104, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.0067958044819533825}, {"id": 321, "seek": 160186, "start": 1611.78, "end": 1613.1399999999999, "text": " attribute.", "tokens": [50860, 19667, 13, 50928], "temperature": 0.0, "avg_logprob": -0.27587959983132104, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.0067958044819533825}, {"id": 322, "seek": 160186, "start": 1613.1399999999999, "end": 1617.86, "text": " You may flush that along with an update message to the MDS saying yes, I've updated the capability,", "tokens": [50928, 509, 815, 19568, 300, 2051, 365, 364, 5623, 3636, 281, 264, 376, 11844, 1566, 2086, 11, 286, 600, 10588, 264, 13759, 11, 51164], "temperature": 0.0, "avg_logprob": -0.27587959983132104, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.0067958044819533825}, {"id": 323, "seek": 160186, "start": 1617.86, "end": 1621.1799999999998, "text": " I don't have these access rights anymore.", "tokens": [51164, 286, 500, 380, 362, 613, 2105, 4601, 3602, 13, 51330], "temperature": 0.0, "avg_logprob": -0.27587959983132104, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.0067958044819533825}, {"id": 324, "seek": 160186, "start": 1621.1799999999998, "end": 1624.26, "text": " And now you see that it has no file permissions.", "tokens": [51330, 400, 586, 291, 536, 300, 309, 575, 572, 3991, 32723, 13, 51484], "temperature": 0.0, "avg_logprob": -0.27587959983132104, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.0067958044819533825}, {"id": 325, "seek": 160186, "start": 1624.26, "end": 1630.26, "text": " Its X-hatter is now shared instead of exclusive and the link count continues to be shared.", "tokens": [51484, 6953, 1783, 12, 71, 1161, 307, 586, 5507, 2602, 295, 13005, 293, 264, 2113, 1207, 6515, 281, 312, 5507, 13, 51784], "temperature": 0.0, "avg_logprob": -0.27587959983132104, "compression_ratio": 1.5582329317269077, "no_speech_prob": 0.0067958044819533825}, {"id": 326, "seek": 163026, "start": 1631.26, "end": 1638.26, "text": " So after this has occurred, the operation is considered done and any future ops on the client", "tokens": [50414, 407, 934, 341, 575, 11068, 11, 264, 6916, 307, 4888, 1096, 293, 604, 2027, 44663, 322, 264, 6423, 50764], "temperature": 0.0, "avg_logprob": -0.24852050675286186, "compression_ratio": 1.5510204081632653, "no_speech_prob": 0.0008166436455212533}, {"id": 327, "seek": 163026, "start": 1642.82, "end": 1649.82, "text": " associated with this inode will block because these locks are still held.", "tokens": [50992, 6615, 365, 341, 294, 1429, 486, 3461, 570, 613, 20703, 366, 920, 5167, 13, 51342], "temperature": 0.0, "avg_logprob": -0.24852050675286186, "compression_ratio": 1.5510204081632653, "no_speech_prob": 0.0008166436455212533}, {"id": 328, "seek": 163026, "start": 1650.06, "end": 1651.62, "text": " Why?", "tokens": [51354, 1545, 30, 51432], "temperature": 0.0, "avg_logprob": -0.24852050675286186, "compression_ratio": 1.5510204081632653, "no_speech_prob": 0.0008166436455212533}, {"id": 329, "seek": 163026, "start": 1651.62, "end": 1653.66, "text": " Because this is a long running operation.", "tokens": [51432, 1436, 341, 307, 257, 938, 2614, 6916, 13, 51534], "temperature": 0.0, "avg_logprob": -0.24852050675286186, "compression_ratio": 1.5510204081632653, "no_speech_prob": 0.0008166436455212533}, {"id": 330, "seek": 163026, "start": 1653.66, "end": 1660.06, "text": " Unlike most ops in MDS, which it will acquire these locks, perform some metadata mutation", "tokens": [51534, 17657, 881, 44663, 294, 376, 11844, 11, 597, 309, 486, 20001, 613, 20703, 11, 2042, 512, 26603, 27960, 51854], "temperature": 0.0, "avg_logprob": -0.24852050675286186, "compression_ratio": 1.5510204081632653, "no_speech_prob": 0.0008166436455212533}, {"id": 331, "seek": 166006, "start": 1660.06, "end": 1665.7, "text": " and then drop the locks, this is necessarily a long lived operation because it needs to", "tokens": [50364, 293, 550, 3270, 264, 20703, 11, 341, 307, 4725, 257, 938, 5152, 6916, 570, 309, 2203, 281, 50646], "temperature": 0.0, "avg_logprob": -0.13475224743150685, "compression_ratio": 1.6887755102040816, "no_speech_prob": 0.00175405852496624}, {"id": 332, "seek": 166006, "start": 1665.7, "end": 1672.1799999999998, "text": " continue to prevent clients from getting capabilities on the file or executing metadata operations,", "tokens": [50646, 2354, 281, 4871, 6982, 490, 1242, 10862, 322, 264, 3991, 420, 32368, 26603, 7705, 11, 50970], "temperature": 0.0, "avg_logprob": -0.13475224743150685, "compression_ratio": 1.6887755102040816, "no_speech_prob": 0.00175405852496624}, {"id": 333, "seek": 166006, "start": 1672.1799999999998, "end": 1676.7, "text": " which will also try to get the locks from executing.", "tokens": [50970, 597, 486, 611, 853, 281, 483, 264, 20703, 490, 32368, 13, 51196], "temperature": 0.0, "avg_logprob": -0.13475224743150685, "compression_ratio": 1.6887755102040816, "no_speech_prob": 0.00175405852496624}, {"id": 334, "seek": 166006, "start": 1676.7, "end": 1683.7, "text": " So the get adder would block or any other client operation that would acquire those", "tokens": [51196, 407, 264, 483, 909, 260, 576, 3461, 420, 604, 661, 6423, 6916, 300, 576, 20001, 729, 51546], "temperature": 0.0, "avg_logprob": -0.13475224743150685, "compression_ratio": 1.6887755102040816, "no_speech_prob": 0.00175405852496624}, {"id": 335, "seek": 166006, "start": 1685.02, "end": 1688.34, "text": " locks.", "tokens": [51612, 20703, 13, 51778], "temperature": 0.0, "avg_logprob": -0.13475224743150685, "compression_ratio": 1.6887755102040816, "no_speech_prob": 0.00175405852496624}, {"id": 336, "seek": 168834, "start": 1688.34, "end": 1695.34, "text": " So now to close out the talk, we'll take a quick look at the QIES set state diagram", "tokens": [50364, 407, 586, 281, 1998, 484, 264, 751, 11, 321, 603, 747, 257, 1702, 574, 412, 264, 1249, 37166, 992, 1785, 10686, 50714], "temperature": 0.0, "avg_logprob": -0.2598151331362517, "compression_ratio": 1.555, "no_speech_prob": 0.003428103169426322}, {"id": 337, "seek": 168834, "start": 1695.54, "end": 1700.98, "text": " and focus only on the happy path.", "tokens": [50724, 293, 1879, 787, 322, 264, 2055, 3100, 13, 50996], "temperature": 0.0, "avg_logprob": -0.2598151331362517, "compression_ratio": 1.555, "no_speech_prob": 0.003428103169426322}, {"id": 338, "seek": 168834, "start": 1700.98, "end": 1704.28, "text": " You know, it's a typical state diagram, lots of error paths, right?", "tokens": [50996, 509, 458, 11, 309, 311, 257, 7476, 1785, 10686, 11, 3195, 295, 6713, 14518, 11, 558, 30, 51161], "temperature": 0.0, "avg_logprob": -0.2598151331362517, "compression_ratio": 1.555, "no_speech_prob": 0.003428103169426322}, {"id": 339, "seek": 168834, "start": 1704.28, "end": 1711.28, "text": " So we have a new set, we're adding a number of routes to the set and once it's in that", "tokens": [51161, 407, 321, 362, 257, 777, 992, 11, 321, 434, 5127, 257, 1230, 295, 18242, 281, 264, 992, 293, 1564, 309, 311, 294, 300, 51511], "temperature": 0.0, "avg_logprob": -0.2598151331362517, "compression_ratio": 1.555, "no_speech_prob": 0.003428103169426322}, {"id": 340, "seek": 168834, "start": 1712.54, "end": 1715.1399999999999, "text": " state it's going to enter the QIESing.", "tokens": [51574, 1785, 309, 311, 516, 281, 3242, 264, 1249, 37166, 278, 13, 51704], "temperature": 0.0, "avg_logprob": -0.2598151331362517, "compression_ratio": 1.555, "no_speech_prob": 0.003428103169426322}, {"id": 341, "seek": 171514, "start": 1715.18, "end": 1720.0600000000002, "text": " So at that point we're going to be launching all our QIES sub volume inode operations and", "tokens": [50366, 407, 412, 300, 935, 321, 434, 516, 281, 312, 18354, 439, 527, 1249, 37166, 1422, 5523, 294, 1429, 7705, 293, 50610], "temperature": 0.0, "avg_logprob": -0.17482679633684056, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0014322984497994184}, {"id": 342, "seek": 171514, "start": 1720.0600000000002, "end": 1726.5400000000002, "text": " acquiring all these locks, capabilities will be revoked, new operations will be blocked.", "tokens": [50610, 37374, 439, 613, 20703, 11, 10862, 486, 312, 3698, 9511, 11, 777, 7705, 486, 312, 15470, 13, 50934], "temperature": 0.0, "avg_logprob": -0.17482679633684056, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0014322984497994184}, {"id": 343, "seek": 171514, "start": 1726.5400000000002, "end": 1733.5400000000002, "text": " When all of those operations have their locks and they're complete but not dead, then we", "tokens": [50934, 1133, 439, 295, 729, 7705, 362, 641, 20703, 293, 436, 434, 3566, 457, 406, 3116, 11, 550, 321, 51284], "temperature": 0.0, "avg_logprob": -0.17482679633684056, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0014322984497994184}, {"id": 344, "seek": 171514, "start": 1734.9, "end": 1737.66, "text": " can enter the QIES state.", "tokens": [51352, 393, 3242, 264, 1249, 37166, 1785, 13, 51490], "temperature": 0.0, "avg_logprob": -0.17482679633684056, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0014322984497994184}, {"id": 345, "seek": 171514, "start": 1737.66, "end": 1744.66, "text": " So all of these, that'll trickle back up the stack when we're querying the database", "tokens": [51490, 407, 439, 295, 613, 11, 300, 603, 4282, 306, 646, 493, 264, 8630, 562, 321, 434, 7083, 1840, 264, 8149, 51840], "temperature": 0.0, "avg_logprob": -0.17482679633684056, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.0014322984497994184}, {"id": 346, "seek": 174514, "start": 1745.8200000000002, "end": 1750.0200000000002, "text": " we'll be able to see that the set is QIESed.", "tokens": [50398, 321, 603, 312, 1075, 281, 536, 300, 264, 992, 307, 1249, 37166, 292, 13, 50608], "temperature": 0.0, "avg_logprob": -0.13744051662492163, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.0007671440835110843}, {"id": 347, "seek": 174514, "start": 1750.0200000000002, "end": 1756.14, "text": " At that point we're going to take our snapshots on all the routes that we need, more than", "tokens": [50608, 1711, 300, 935, 321, 434, 516, 281, 747, 527, 19206, 27495, 322, 439, 264, 18242, 300, 321, 643, 11, 544, 813, 50914], "temperature": 0.0, "avg_logprob": -0.13744051662492163, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.0007671440835110843}, {"id": 348, "seek": 174514, "start": 1756.14, "end": 1763.14, "text": " one probably and when the snapshots are complete we can then release the set.", "tokens": [50914, 472, 1391, 293, 562, 264, 19206, 27495, 366, 3566, 321, 393, 550, 4374, 264, 992, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13744051662492163, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.0007671440835110843}, {"id": 349, "seek": 174514, "start": 1764.8600000000001, "end": 1771.0200000000002, "text": " So then we'll go into the releasing state, all of those QIESa volume inode operations", "tokens": [51350, 407, 550, 321, 603, 352, 666, 264, 16327, 1785, 11, 439, 295, 729, 1249, 37166, 64, 5523, 294, 1429, 7705, 51658], "temperature": 0.0, "avg_logprob": -0.13744051662492163, "compression_ratio": 1.5767195767195767, "no_speech_prob": 0.0007671440835110843}, {"id": 350, "seek": 177102, "start": 1771.02, "end": 1778.02, "text": " will be killed and the locks automatically released allowing clients to be reissued caps", "tokens": [50364, 486, 312, 4652, 293, 264, 20703, 6772, 4736, 8293, 6982, 281, 312, 319, 891, 5827, 13855, 50714], "temperature": 0.0, "avg_logprob": -0.17247203039744544, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0017543677240610123}, {"id": 351, "seek": 177102, "start": 1778.1, "end": 1785.6, "text": " or any blocked metadata operations to be kicked and resumed.", "tokens": [50718, 420, 604, 15470, 26603, 7705, 281, 312, 14609, 293, 725, 28189, 13, 51093], "temperature": 0.0, "avg_logprob": -0.17247203039744544, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0017543677240610123}, {"id": 352, "seek": 177102, "start": 1785.6, "end": 1792.6, "text": " Once those operations are all dead then the set will enter the release state and the QIESet", "tokens": [51093, 3443, 729, 7705, 366, 439, 3116, 550, 264, 992, 486, 3242, 264, 4374, 1785, 293, 264, 1249, 37166, 302, 51443], "temperature": 0.0, "avg_logprob": -0.17247203039744544, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0017543677240610123}, {"id": 353, "seek": 177102, "start": 1793.18, "end": 1796.1, "text": " is considered terminal and done.", "tokens": [51472, 307, 4888, 14709, 293, 1096, 13, 51618], "temperature": 0.0, "avg_logprob": -0.17247203039744544, "compression_ratio": 1.583815028901734, "no_speech_prob": 0.0017543677240610123}, {"id": 354, "seek": 179610, "start": 1796.1, "end": 1802.6599999999999, "text": " So that is the basics of the QIESets and again there's a number of error states shown", "tokens": [50364, 407, 300, 307, 264, 14688, 295, 264, 1249, 37166, 1385, 293, 797, 456, 311, 257, 1230, 295, 6713, 4368, 4898, 50692], "temperature": 0.0, "avg_logprob": -0.27148906836348974, "compression_ratio": 1.4611650485436893, "no_speech_prob": 0.003822299651801586}, {"id": 355, "seek": 179610, "start": 1802.6599999999999, "end": 1810.6599999999999, "text": " on the slide, a canceled QIESet or an expired one, etc.", "tokens": [50692, 322, 264, 4137, 11, 257, 24839, 1249, 37166, 302, 420, 364, 36587, 472, 11, 5183, 13, 51092], "temperature": 0.0, "avg_logprob": -0.27148906836348974, "compression_ratio": 1.4611650485436893, "no_speech_prob": 0.003822299651801586}, {"id": 356, "seek": 179610, "start": 1810.6999999999998, "end": 1816.82, "text": " So with that that's the end of our talk, we're going to leave time for questions.", "tokens": [51094, 407, 365, 300, 300, 311, 264, 917, 295, 527, 751, 11, 321, 434, 516, 281, 1856, 565, 337, 1651, 13, 51400], "temperature": 0.0, "avg_logprob": -0.27148906836348974, "compression_ratio": 1.4611650485436893, "no_speech_prob": 0.003822299651801586}, {"id": 357, "seek": 179610, "start": 1816.82, "end": 1823.82, "text": " Again I'm Patrick Donnelly, this is Usob, I said your last name right, right?", "tokens": [51400, 3764, 286, 478, 13980, 1468, 8903, 88, 11, 341, 307, 624, 539, 65, 11, 286, 848, 428, 1036, 1315, 558, 11, 558, 30, 51750], "temperature": 0.0, "avg_logprob": -0.27148906836348974, "compression_ratio": 1.4611650485436893, "no_speech_prob": 0.003822299651801586}, {"id": 358, "seek": 182382, "start": 1824.02, "end": 1827.1, "text": " Don't often say his last name.", "tokens": [50374, 1468, 380, 2049, 584, 702, 1036, 1315, 13, 50528], "temperature": 0.0, "avg_logprob": -0.27852024502224393, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.003220756771042943}, {"id": 359, "seek": 182382, "start": 1827.1, "end": 1831.7, "text": " These are the pull requests we have open still for our work, they've not yet been merged", "tokens": [50528, 1981, 366, 264, 2235, 12475, 321, 362, 1269, 920, 337, 527, 589, 11, 436, 600, 406, 1939, 668, 36427, 50758], "temperature": 0.0, "avg_logprob": -0.27852024502224393, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.003220756771042943}, {"id": 360, "seek": 182382, "start": 1831.7, "end": 1837.26, "text": " into the main branch so this is not yet live and even the development version of CEP.", "tokens": [50758, 666, 264, 2135, 9819, 370, 341, 307, 406, 1939, 1621, 293, 754, 264, 3250, 3037, 295, 383, 8929, 13, 51036], "temperature": 0.0, "avg_logprob": -0.27852024502224393, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.003220756771042943}, {"id": 361, "seek": 182382, "start": 1837.26, "end": 1844.26, "text": " And we have some documentation that you can also review, some preliminary documentation,", "tokens": [51036, 400, 321, 362, 512, 14333, 300, 291, 393, 611, 3131, 11, 512, 28817, 14333, 11, 51386], "temperature": 0.0, "avg_logprob": -0.27852024502224393, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.003220756771042943}, {"id": 362, "seek": 182382, "start": 1845.1, "end": 1852.1, "text": " some details may change but for the most part it's reaching a very concrete state.", "tokens": [51428, 512, 4365, 815, 1319, 457, 337, 264, 881, 644, 309, 311, 9906, 257, 588, 9859, 1785, 13, 51778], "temperature": 0.0, "avg_logprob": -0.27852024502224393, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.003220756771042943}, {"id": 363, "seek": 185210, "start": 1852.54, "end": 1855.54, "text": " That's it, thank you.", "tokens": [50386, 663, 311, 309, 11, 1309, 291, 13, 50536], "temperature": 0.0, "avg_logprob": -0.7011029985215929, "compression_ratio": 1.2335766423357664, "no_speech_prob": 0.03372124955058098}, {"id": 364, "seek": 185210, "start": 1855.54, "end": 1858.54, "text": " Any questions?", "tokens": [50536, 2639, 1651, 30, 50686], "temperature": 0.0, "avg_logprob": -0.7011029985215929, "compression_ratio": 1.2335766423357664, "no_speech_prob": 0.03372124955058098}, {"id": 365, "seek": 185210, "start": 1858.54, "end": 1861.54, "text": " Yes?", "tokens": [50686, 1079, 30, 50836], "temperature": 0.0, "avg_logprob": -0.7011029985215929, "compression_ratio": 1.2335766423357664, "no_speech_prob": 0.03372124955058098}, {"id": 366, "seek": 185210, "start": 1861.54, "end": 1868.54, "text": " Will CEP mistakes snapshot and store it in like dot snap or underscore snap type within", "tokens": [50836, 3099, 383, 8929, 8038, 30163, 293, 3531, 309, 294, 411, 5893, 13650, 420, 37556, 13650, 2010, 1951, 51186], "temperature": 0.0, "avg_logprob": -0.7011029985215929, "compression_ratio": 1.2335766423357664, "no_speech_prob": 0.03372124955058098}, {"id": 367, "seek": 185210, "start": 1868.54, "end": 1873.54, "text": " the folder?", "tokens": [51186, 264, 10820, 30, 51436], "temperature": 0.0, "avg_logprob": -0.7011029985215929, "compression_ratio": 1.2335766423357664, "no_speech_prob": 0.03372124955058098}, {"id": 368, "seek": 185210, "start": 1873.54, "end": 1878.54, "text": " You mentioned that all I.O.", "tokens": [51436, 509, 2835, 300, 439, 286, 13, 46, 13, 51686], "temperature": 0.0, "avg_logprob": -0.7011029985215929, "compression_ratio": 1.2335766423357664, "no_speech_prob": 0.03372124955058098}, {"id": 369, "seek": 187854, "start": 1878.98, "end": 1885.98, "text": " in that part onwards will be pleased so will like leads on previously taken snapshots also", "tokens": [50386, 294, 300, 644, 34230, 486, 312, 10587, 370, 486, 411, 6689, 322, 8046, 2726, 19206, 27495, 611, 50736], "temperature": 0.0, "avg_logprob": -0.3570230905111734, "compression_ratio": 1.5754189944134078, "no_speech_prob": 0.014054871164262295}, {"id": 370, "seek": 187854, "start": 1888.98, "end": 1891.98, "text": " be frozen or that.", "tokens": [50886, 312, 12496, 420, 300, 13, 51036], "temperature": 0.0, "avg_logprob": -0.3570230905111734, "compression_ratio": 1.5754189944134078, "no_speech_prob": 0.014054871164262295}, {"id": 371, "seek": 187854, "start": 1891.98, "end": 1898.98, "text": " For the most part, alright so the question is if I've quiesced I.O. on a subtree can", "tokens": [51036, 1171, 264, 881, 644, 11, 5845, 370, 264, 1168, 307, 498, 286, 600, 421, 530, 1232, 286, 13, 46, 13, 322, 257, 7257, 701, 393, 51386], "temperature": 0.0, "avg_logprob": -0.3570230905111734, "compression_ratio": 1.5754189944134078, "no_speech_prob": 0.014054871164262295}, {"id": 372, "seek": 187854, "start": 1899.42, "end": 1905.02, "text": " I continue to access snapshots of that, past snapshots of the subtree and the answer is", "tokens": [51408, 286, 2354, 281, 2105, 19206, 27495, 295, 300, 11, 1791, 19206, 27495, 295, 264, 7257, 701, 293, 264, 1867, 307, 51688], "temperature": 0.0, "avg_logprob": -0.3570230905111734, "compression_ratio": 1.5754189944134078, "no_speech_prob": 0.014054871164262295}, {"id": 373, "seek": 190502, "start": 1905.02, "end": 1910.46, "text": " probably not because of the way the locks work on the I.O.s it may also incidentally", "tokens": [50364, 1391, 406, 570, 295, 264, 636, 264, 20703, 589, 322, 264, 286, 13, 46, 13, 82, 309, 815, 611, 9348, 379, 50636], "temperature": 0.0, "avg_logprob": -0.47124532751134923, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.01384208258241415}, {"id": 374, "seek": 190502, "start": 1910.46, "end": 1917.46, "text": " protect how the access through the snapshot version of the I.O.", "tokens": [50636, 2371, 577, 264, 2105, 807, 264, 30163, 3037, 295, 264, 286, 13, 46, 13, 50986], "temperature": 0.0, "avg_logprob": -0.47124532751134923, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.01384208258241415}, {"id": 375, "seek": 190502, "start": 1917.46, "end": 1924.46, "text": " Then there is like we didn't introduce the shallow volume people like maybe we can mount", "tokens": [50986, 1396, 456, 307, 411, 321, 994, 380, 5366, 264, 20488, 5523, 561, 411, 1310, 321, 393, 3746, 51336], "temperature": 0.0, "avg_logprob": -0.47124532751134923, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.01384208258241415}, {"id": 376, "seek": 190502, "start": 1924.74, "end": 1929.74, "text": " the snapshots for backup system to just read the contents.", "tokens": [51350, 264, 19206, 27495, 337, 14807, 1185, 281, 445, 1401, 264, 15768, 13, 51600], "temperature": 0.0, "avg_logprob": -0.47124532751134923, "compression_ratio": 1.549738219895288, "no_speech_prob": 0.01384208258241415}, {"id": 377, "seek": 192974, "start": 1930.46, "end": 1937.46, "text": " Not at this time so we're looking also into a variant of quiescing where it allows most", "tokens": [50400, 1726, 412, 341, 565, 370, 321, 434, 1237, 611, 666, 257, 17501, 295, 421, 530, 2175, 689, 309, 4045, 881, 50750], "temperature": 0.0, "avg_logprob": -0.2597672674391005, "compression_ratio": 1.4685714285714286, "no_speech_prob": 0.012423829175531864}, {"id": 378, "seek": 192974, "start": 1941.5, "end": 1943.9, "text": " read only access to the files.", "tokens": [50952, 1401, 787, 2105, 281, 264, 7098, 13, 51072], "temperature": 0.0, "avg_logprob": -0.2597672674391005, "compression_ratio": 1.4685714285714286, "no_speech_prob": 0.012423829175531864}, {"id": 379, "seek": 192974, "start": 1943.9, "end": 1950.9, "text": " Right now it's very much a stop the world for the most part I.O. pause so you won't", "tokens": [51072, 1779, 586, 309, 311, 588, 709, 257, 1590, 264, 1002, 337, 264, 881, 644, 286, 13, 46, 13, 10465, 370, 291, 1582, 380, 51422], "temperature": 0.0, "avg_logprob": -0.2597672674391005, "compression_ratio": 1.4685714285714286, "no_speech_prob": 0.012423829175531864}, {"id": 380, "seek": 192974, "start": 1950.9, "end": 1955.42, "text": " even be able to execute most reads on the file system.", "tokens": [51422, 754, 312, 1075, 281, 14483, 881, 15700, 322, 264, 3991, 1185, 13, 51648], "temperature": 0.0, "avg_logprob": -0.2597672674391005, "compression_ratio": 1.4685714285714286, "no_speech_prob": 0.012423829175531864}, {"id": 381, "seek": 195542, "start": 1955.42, "end": 1960.26, "text": " Or like some stat calls may still be able to respond well written stat calls on the", "tokens": [50364, 1610, 411, 512, 2219, 5498, 815, 920, 312, 1075, 281, 4196, 731, 3720, 2219, 5498, 322, 264, 50606], "temperature": 0.0, "avg_logprob": -0.38363400901236183, "compression_ratio": 1.6403940886699508, "no_speech_prob": 0.02674282342195511}, {"id": 382, "seek": 195542, "start": 1960.26, "end": 1965.26, "text": " clients because they still retain certain read only capabilities.", "tokens": [50606, 6982, 570, 436, 920, 18340, 1629, 1401, 787, 10862, 13, 50856], "temperature": 0.0, "avg_logprob": -0.38363400901236183, "compression_ratio": 1.6403940886699508, "no_speech_prob": 0.02674282342195511}, {"id": 383, "seek": 195542, "start": 1965.26, "end": 1972.26, "text": " In the future it will work for the ASX vector like we can access read only snapshots.", "tokens": [50856, 682, 264, 2027, 309, 486, 589, 337, 264, 7469, 55, 8062, 411, 321, 393, 2105, 1401, 787, 19206, 27495, 13, 51206], "temperature": 0.0, "avg_logprob": -0.38363400901236183, "compression_ratio": 1.6403940886699508, "no_speech_prob": 0.02674282342195511}, {"id": 384, "seek": 195542, "start": 1973.6200000000001, "end": 1979.98, "text": " That is the hope in the future we'd be able to do that yeah to support that.", "tokens": [51274, 663, 307, 264, 1454, 294, 264, 2027, 321, 1116, 312, 1075, 281, 360, 300, 1338, 281, 1406, 300, 13, 51592], "temperature": 0.0, "avg_logprob": -0.38363400901236183, "compression_ratio": 1.6403940886699508, "no_speech_prob": 0.02674282342195511}, {"id": 385, "seek": 195542, "start": 1979.98, "end": 1982.5, "text": " Any other questions?", "tokens": [51592, 2639, 661, 1651, 30, 51718], "temperature": 0.0, "avg_logprob": -0.38363400901236183, "compression_ratio": 1.6403940886699508, "no_speech_prob": 0.02674282342195511}, {"id": 386, "seek": 198250, "start": 1982.5, "end": 1984.5, "text": " Neil.", "tokens": [50364, 18615, 13, 50464], "temperature": 0.0, "avg_logprob": -0.6483769850297407, "compression_ratio": 1.4580645161290322, "no_speech_prob": 0.164079487323761}, {"id": 387, "seek": 198250, "start": 1984.5, "end": 1989.5, "text": " So now you have the set command to quiesce volumes is it also possible to run FS3s on", "tokens": [50464, 407, 586, 291, 362, 264, 992, 5622, 281, 421, 530, 384, 22219, 307, 309, 611, 1944, 281, 1190, 41138, 18, 82, 322, 50714], "temperature": 0.0, "avg_logprob": -0.6483769850297407, "compression_ratio": 1.4580645161290322, "no_speech_prob": 0.164079487323761}, {"id": 388, "seek": 198250, "start": 1989.5, "end": 1996.5, "text": " the client side if you have set FS kernel mount for example that would quiesce the volume", "tokens": [50714, 264, 6423, 1252, 498, 291, 362, 992, 41138, 28256, 3746, 337, 1365, 300, 576, 421, 530, 384, 264, 5523, 51064], "temperature": 0.0, "avg_logprob": -0.6483769850297407, "compression_ratio": 1.4580645161290322, "no_speech_prob": 0.164079487323761}, {"id": 389, "seek": 198250, "start": 1998.62, "end": 2000.5, "text": " for all other clients.", "tokens": [51170, 337, 439, 661, 6982, 13, 51264], "temperature": 0.0, "avg_logprob": -0.6483769850297407, "compression_ratio": 1.4580645161290322, "no_speech_prob": 0.164079487323761}, {"id": 390, "seek": 198250, "start": 2000.5, "end": 2007.5, "text": " Do I answer that one?", "tokens": [51264, 1144, 286, 1867, 300, 472, 30, 51614], "temperature": 0.0, "avg_logprob": -0.6483769850297407, "compression_ratio": 1.4580645161290322, "no_speech_prob": 0.164079487323761}, {"id": 391, "seek": 200750, "start": 2008.5, "end": 2015.5, "text": " So the question was whether we're going to be able to use kernel if it will work for", "tokens": [50414, 407, 264, 1168, 390, 1968, 321, 434, 516, 281, 312, 1075, 281, 764, 28256, 498, 309, 486, 589, 337, 50764], "temperature": 0.0, "avg_logprob": -0.2258930206298828, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.003170122392475605}, {"id": 392, "seek": 200750, "start": 2016.58, "end": 2017.58, "text": " kernel clients.", "tokens": [50818, 28256, 6982, 13, 50868], "temperature": 0.0, "avg_logprob": -0.2258930206298828, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.003170122392475605}, {"id": 393, "seek": 200750, "start": 2017.58, "end": 2024.58, "text": " Exactly if you call FS3s on the client side instead of running set command.", "tokens": [50868, 7587, 498, 291, 818, 41138, 18, 82, 322, 264, 6423, 1252, 2602, 295, 2614, 992, 5622, 13, 51218], "temperature": 0.0, "avg_logprob": -0.2258930206298828, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.003170122392475605}, {"id": 394, "seek": 200750, "start": 2025.14, "end": 2030.94, "text": " As of now we haven't planned to support the FS3s command but it will look into it.", "tokens": [51246, 1018, 295, 586, 321, 2378, 380, 8589, 281, 1406, 264, 41138, 18, 82, 5622, 457, 309, 486, 574, 666, 309, 13, 51536], "temperature": 0.0, "avg_logprob": -0.2258930206298828, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.003170122392475605}, {"id": 395, "seek": 200750, "start": 2030.94, "end": 2037.1, "text": " I think it's pretty reasonable to consider it even for the first operation.", "tokens": [51536, 286, 519, 309, 311, 1238, 10585, 281, 1949, 309, 754, 337, 264, 700, 6916, 13, 51844], "temperature": 0.0, "avg_logprob": -0.2258930206298828, "compression_ratio": 1.5654205607476634, "no_speech_prob": 0.003170122392475605}, {"id": 396, "seek": 203710, "start": 2037.1, "end": 2042.62, "text": " Now one of the good stuff about what we're doing right now is that it's intrinsically", "tokens": [50364, 823, 472, 295, 264, 665, 1507, 466, 437, 321, 434, 884, 558, 586, 307, 300, 309, 311, 28621, 984, 50640], "temperature": 0.0, "avg_logprob": -0.23722889911697573, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0013692528009414673}, {"id": 397, "seek": 203710, "start": 2042.62, "end": 2047.86, "text": " backward compatible because we're building on the set capabilities kernel clients will", "tokens": [50640, 23897, 18218, 570, 321, 434, 2390, 322, 264, 992, 10862, 28256, 6982, 486, 50902], "temperature": 0.0, "avg_logprob": -0.23722889911697573, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0013692528009414673}, {"id": 398, "seek": 203710, "start": 2047.86, "end": 2050.46, "text": " be able to reach the quiesce.", "tokens": [50902, 312, 1075, 281, 2524, 264, 421, 530, 384, 13, 51032], "temperature": 0.0, "avg_logprob": -0.23722889911697573, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0013692528009414673}, {"id": 399, "seek": 203710, "start": 2050.46, "end": 2057.46, "text": " Now how you trigger the quiesce it's another question and we'll consider this definitely.", "tokens": [51032, 823, 577, 291, 7875, 264, 421, 530, 384, 309, 311, 1071, 1168, 293, 321, 603, 1949, 341, 2138, 13, 51382], "temperature": 0.0, "avg_logprob": -0.23722889911697573, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0013692528009414673}, {"id": 400, "seek": 203710, "start": 2060.86, "end": 2063.86, "text": " Other questions?", "tokens": [51552, 5358, 1651, 30, 51702], "temperature": 0.0, "avg_logprob": -0.23722889911697573, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0013692528009414673}, {"id": 401, "seek": 203710, "start": 2063.86, "end": 2065.86, "text": " Okay thank you very much.", "tokens": [51702, 1033, 1309, 291, 588, 709, 13, 51802], "temperature": 0.0, "avg_logprob": -0.23722889911697573, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0013692528009414673}, {"id": 402, "seek": 206586, "start": 2065.86, "end": 2068.1800000000003, "text": " Was it pleasant?", "tokens": [50380, 3027, 309, 16232, 30, 50480], "temperature": 0.0, "avg_logprob": -0.9844910076686314, "compression_ratio": 0.6666666666666666, "no_speech_prob": 0.34366172552108765}], "language": "en"}