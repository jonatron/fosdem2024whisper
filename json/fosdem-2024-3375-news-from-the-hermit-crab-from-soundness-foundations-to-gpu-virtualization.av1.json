{"text": " Go Martin, go! Okay, I guess. So let's get this started. Wow. Okay, thanks everyone for coming. I'm Martin from Avitiha-Aachen University, and I'll talk about the Hermit operating system. I'm here together with my colleague Jonathan, and a few students are also scattered around the room. Yeah, let's get started. These are the things that I'll talk about today. First, a general introduction into Hermit and Juni kernels, although if you've been to this room in the past few hours, you already know some of that. Then I'll cover some arguably interesting internals structurally, and then talk about two applications, namely GPU virtualization using Cricut, and application kernel profiling. Okay, we've been through this a few times now, but let's go through it again. We have compared to a standard VM where we have a hardware and a host operating system, which might also be missing if we have a level one hypervisor, and a hypervisor, we then have this virtual machine. And this virtual machine runs a virtual machine image, which... What's happening? Okay, this virtual machine image is just a full-blown operating system with its own guest kernel, user space, and everything else. Then we've also talked about containers before, which throws away the guest kernel and really tries to minimize the image for the application, and we have unicarnals, which then run in virtual machines again, but inside the unicarnal, everything is packed together as tightly as possible. We have the application, we have some user-provided libraries, and we have the library operating system all statically linked together. What this gives us then is an image that we can really specialize to the use case at hand. So that means for the environment, namely the hypervisor, and for the application itself, and what it should do. This leads to tiny images, only a few megabytes in size for Hello World, for example. And since we only have one process in this whole unicarnal image, we don't need any isolation between this process, other processes, or the kernel. That means we can do this as a single address-based operating system without any costly address-based context switches between. We can run everything at kernel level, have no privileged context switches, and then can just make system calls to function calls. And that's pretty cool. Enter the Hermit operating system, as you can probably guess by the logo. The logo is written in Rust, 100%, well, not 100%, but there's no C in there, at least. There's only Rust and a bit of assembly, of course. We mainly target Rust applications, too. So we have an official tier 3 Rust target for Rust applications that we can use. But we also have a GCC and NewLip fork if you really want to run C applications, though that's not our primary focus. We have multi-core support, we are easily configurable, and we can now also compile on Windows. Yeah, we can also support stable Rust nowadays through our own distribution of the Rust standard library, which you can check out here. Okay, let's talk about the platform support. Okay, once we have this image seen on the left where we have the application, standard library, NewLip, and the kernel, we can then run it on our own hypervisor, for example. U-Hive is a specialized Hermit hypervisor that is specialized to running Hermit unique kind of images, which is the focus of Jonathan. The main target for that is Linux KVM on x86, though there's also some degree of support for Mac OS on both x86 and ARM. And also upcoming, though not yet merged, is Linux KVM support for RISC-5, which is something that Simon worked on. Philip, sorry. We can also target generic VMs through our Hermit loader, which then chain loads the Hermit ELF image. We can support multi-boot on x86, we support firecracker, and there's also UEFI work going on, which will be there soon, hopefully. For ARM and RISC-5, we use the Linux boot protocol to be able to run on things like KAML. Okay, so that's all you need to know if you want to use Hermit. Let's take a look inside. This is the same unique kind of image again, but from a different point of view now. The left stack is the application stack. It is the application. It's some user defined libraries, Rust crates in this case, and the core crates of the Rust 2 chain itself, so standard, Alagon core. On the right side, we have the Hermit kernel, which depends on some crates as well, and Alagon core. These two things are compiled for different targets, though, because we don't want to use any floating point operations in the kernel target, because that's costly to switch between. And the user code is compiled for a special Hermit target, which does have floating point support and also tells the Rust standard library how to communicate with the Hermit kernel. We also provide together with the Hermit kernel, but compiled for the user target some intrinsic such as libm for math functions, or mem intrinsics for things like mem copy, which really benefit from having this floating point support available. One thing that I personally worked on a lot are soundness foundations. You can see unsafe and safe Rust on the right. And we published a paper on that. It's called on the challenge of sound code for operating system, and what this basically aims for is to make the Hermit target sound. That means any safety reasoning must not require context. That's extremely important, and the history behind that is that Hermit was once written in C without much strictness around the locality of this kind of reasoning, and we put a lot of work into going forward and migrating to a more Rust-like approach here. One thing that came out of this is Hermit sync, which is a collection of synchronization primitives used inside the Hermit kernel. Most of these are also independently published as single crates and republished through this image, so you can also pick whatever you like in your own project. Another thing is count unsafe, which you can use to count the amount of unsafe code inside your Rust thing that we use to analyze our progress there. The next thing I want to talk about is our evolving network stack. Originally, it was just a user-side thing, so the Rust applications would compile some network stack with small TCP, a Rust network stack, and C applications would use what's it called LWIP, such as Unicraft does. In 2022, we moved that from user space into kernel space, which is not that meaningful since everything is kernel space, actually, but we moved it to the distribution of the kernel. Then we implemented support for these D-Style sockets because before we had a custom-made API for networking, and now we want to standardize it and adopt these things because that will allow us to throw away all the user space network stack, which can then both C applications and Rust applications use the kernel-provided small TCP network stack. In 2024, we are going for Pulse support for async.io, which would enable us to run a whole bunch of Rust networking applications, which usually run on Tokyo or something like that, and work on this is already well underway. Okay, then let's talk about the two application-focused things. First, GPU virtualization with Cricut. Short introduction to Cricut, which is another project developed at our institute, ACS. It's basically just plugging networking in between some API. So classical GPU CUDA applications work like seen on top, where we have this CUDA app that calls CUDA APIs, a library from NVIDIA, which then performs the actual computations on the GPU. With Cricut, we plug a Cricut client next to the app and a server to the CUDA APIs, and then just tunnel through all requests and answers. That separates these two things, and we can move them wherever we want and control what's happening there. And we found it's not that... Yeah, it's not that high of an overhead. We can then use this for remote execution, scheduling, or monitoring of GPU applications, as seen here. We can have several nodes with virtual GPUs, which then run on another node for computation. We then adapted Cricut for Unicornals, and published a paper on that. And how we did this is Cricut is based on ONCRPCs, which came out of Sun way back when. And the reference implementation is Oden Complex and uses Linux-specific networking features, so it wasn't easy to port to our Rust toolchain, for example. And as you can already guess, we ported it to Rust. Our user code is then run inside the Unicornal and only like the server part serving the GPU is not run inside the Unicornal. We did this for Hermit and Unicraft. For Unicraft we had to develop Rust application support first, but we did that and now it's working fine. The last topic that I want to talk about is application and kernel profiling. It's a project that has been dormant for a while, but we are reawakening it and getting it up to date and getting it working again. It's called RF Trace for Rust Function Tracer. How this works is that essentially we want to find out how much time is spent in which functions when we run software. Instrumentation does this by changing the code that is output by the compiler. We are essentially changing the program that we measure, which kind of falsifies the results a little bit, but for that we get extremely reliable things because we measure each and every time frame inside a function. It works like this. We have our Rust source, which squares some number. That corresponds to this assembly for inter-architectures. If we just append the corresponding flex to the compiler, the compiler nicely inserts this call to a special mCount function. What this mCount function then does is it can inspect the stack to find out which function we are currently in. It can then take some timestamp and it can also insert a return trampoline into this stack so that it also knows when we leave the function again. Together, all of this together, then lets us measure the time of functions, which is cool. In the image it looks like this. Our F trace is just another static library, which is inside the whole image. It works for Rust programs, C programs, and also for images, obviously. It is very encapsulated, so it exposes only a few symbols like mCount and then does everything internally. When we measure such a trace, we can then look at it and have a trace replay and really see which function we go into how and how long it takes inside them. We can also have a look at these graphically, of course. There are tools available for trace visualization. You could also create flame graphs out of this and then optimize the kernel. We are looking forward to using that for further optimizing the network stack, for example. All in all, I think that is all I have to say for today. That is a broad overview of the different topics that we covered last year. You can check us out on GitHub. You can say hi on Zulip. With that, I thank you for your kind attention. Thanks, Martin, for the talk. We have a working mic, so we can have some questions. Five minutes. Hi. My question is how do you instrument the Rust code and how do you actually get the function codes in there? The what? The instrumentation and turn some calls into the Rust code, usually, that you have. My question is how do you get those function codes in there? The question was, you said it to the mic, so it should be. There is a compiler flag for that. For C code, it is much simpler. You would just compile with GCC and then say dash PG, I think. For Rust code, it is more complicated. Well, it is not more complicated. It is just more lengthy. I did not put it on the slide because it was two lines or something. But those are features available to us through LLVM. Rust work is on the way to make this easier because it is not a stable thing exposed by the Rust 2 chain, but through manually enabling the corresponding LLVM passes for the code, this works. Thank you. More questions? I had a similar question. We also have a track on profiling, benchmarking and Unicraft. You are using instrumentation for profiling. Are you also considering sampling profiling? For example, what you are using is Unicraft, we are trying to tie in VMI, virtual machine interface. That will be able to do some sort of snapshotting and the others. Is this enough? Also, Unicraft, you have GCof support now because GCC 13 has embedded GCof support, so that makes things easier. Is this enough for what you have tested so far, the instrumented approach? Because you have to build the application, you then have to run the instrumented one, maybe it is not similar practice, is this enough at this point? We will have to see. In general, we are not that automated yet compared to Unicraft. Our Rust application story is quite seamless, I think, and you just enable profiling through a simple feature flag, and then you run it and it gets dumped on the disk and you can look into it. This is also what Gaby is working on. Did you consider, I am not sure how F-TracingPerox does it, but for example, there is something called K-Probes or K-Raid-Probes or something like that, which is a dynamic way of instrumenting the calls. What that does to you is you don't have to have these items done at build time, so that means when you want to instrument the application, you can tie in some flags and then while you execute it, it replaces some sort of function, pro or web, with some sort of jumps. Interesting. There may be something interesting to look at. We are looking at that on Unicraft's side. Is this like inserting a general hook into every function and then dynamically chain? Gaby knows a bit more about that. It is a bit of a rewrite of the function for organic load. Basically, you have a function that you want to jump in and then you can do the whole function that you want to jump in. Similar to that, just by hand and for some functions only and switchable. Okay, makes sense. Still very cool with the flame graph. I mean, this is the most important item because everyone does profiling, but having some sort of visual way of determining what's actually being spent, that's really useful. Yeah. We have to switch to another talk, so Martin will be around for more questions. Thanks again.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Go Martin, go!", "tokens": [50364, 1037, 9184, 11, 352, 0, 50714], "temperature": 0.0, "avg_logprob": -0.3585135743424699, "compression_ratio": 1.339080459770115, "no_speech_prob": 0.1663016527891159}, {"id": 1, "seek": 0, "start": 7.0, "end": 10.0, "text": " Okay, I guess.", "tokens": [50714, 1033, 11, 286, 2041, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3585135743424699, "compression_ratio": 1.339080459770115, "no_speech_prob": 0.1663016527891159}, {"id": 2, "seek": 0, "start": 10.0, "end": 13.0, "text": " So let's get this started.", "tokens": [50864, 407, 718, 311, 483, 341, 1409, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3585135743424699, "compression_ratio": 1.339080459770115, "no_speech_prob": 0.1663016527891159}, {"id": 3, "seek": 0, "start": 13.0, "end": 17.0, "text": " Wow. Okay, thanks everyone for coming.", "tokens": [51014, 3153, 13, 1033, 11, 3231, 1518, 337, 1348, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3585135743424699, "compression_ratio": 1.339080459770115, "no_speech_prob": 0.1663016527891159}, {"id": 4, "seek": 0, "start": 17.0, "end": 20.0, "text": " I'm Martin from Avitiha-Aachen University,", "tokens": [51214, 286, 478, 9184, 490, 11667, 8707, 1641, 12, 32, 11646, 3535, 11, 51364], "temperature": 0.0, "avg_logprob": -0.3585135743424699, "compression_ratio": 1.339080459770115, "no_speech_prob": 0.1663016527891159}, {"id": 5, "seek": 0, "start": 20.0, "end": 24.0, "text": " and I'll talk about the Hermit operating system.", "tokens": [51364, 293, 286, 603, 751, 466, 264, 21842, 270, 7447, 1185, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3585135743424699, "compression_ratio": 1.339080459770115, "no_speech_prob": 0.1663016527891159}, {"id": 6, "seek": 0, "start": 24.0, "end": 27.0, "text": " I'm here together with my colleague Jonathan,", "tokens": [51564, 286, 478, 510, 1214, 365, 452, 13532, 15471, 11, 51714], "temperature": 0.0, "avg_logprob": -0.3585135743424699, "compression_ratio": 1.339080459770115, "no_speech_prob": 0.1663016527891159}, {"id": 7, "seek": 2700, "start": 27.0, "end": 31.0, "text": " and a few students are also scattered around the room.", "tokens": [50364, 293, 257, 1326, 1731, 366, 611, 21986, 926, 264, 1808, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09967095955558446, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.025996338576078415}, {"id": 8, "seek": 2700, "start": 31.0, "end": 35.0, "text": " Yeah, let's get started.", "tokens": [50564, 865, 11, 718, 311, 483, 1409, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09967095955558446, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.025996338576078415}, {"id": 9, "seek": 2700, "start": 35.0, "end": 38.0, "text": " These are the things that I'll talk about today.", "tokens": [50764, 1981, 366, 264, 721, 300, 286, 603, 751, 466, 965, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09967095955558446, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.025996338576078415}, {"id": 10, "seek": 2700, "start": 38.0, "end": 41.0, "text": " First, a general introduction into Hermit and Juni kernels,", "tokens": [50914, 2386, 11, 257, 2674, 9339, 666, 21842, 270, 293, 8492, 72, 23434, 1625, 11, 51064], "temperature": 0.0, "avg_logprob": -0.09967095955558446, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.025996338576078415}, {"id": 11, "seek": 2700, "start": 41.0, "end": 45.0, "text": " although if you've been to this room in the past few hours,", "tokens": [51064, 4878, 498, 291, 600, 668, 281, 341, 1808, 294, 264, 1791, 1326, 2496, 11, 51264], "temperature": 0.0, "avg_logprob": -0.09967095955558446, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.025996338576078415}, {"id": 12, "seek": 2700, "start": 45.0, "end": 48.0, "text": " you already know some of that.", "tokens": [51264, 291, 1217, 458, 512, 295, 300, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09967095955558446, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.025996338576078415}, {"id": 13, "seek": 2700, "start": 48.0, "end": 53.0, "text": " Then I'll cover some arguably interesting internals structurally,", "tokens": [51414, 1396, 286, 603, 2060, 512, 26771, 1880, 2154, 1124, 6594, 6512, 11, 51664], "temperature": 0.0, "avg_logprob": -0.09967095955558446, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.025996338576078415}, {"id": 14, "seek": 5300, "start": 53.0, "end": 58.0, "text": " and then talk about two applications,", "tokens": [50364, 293, 550, 751, 466, 732, 5821, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10893565730044716, "compression_ratio": 1.4278350515463918, "no_speech_prob": 0.002280787331983447}, {"id": 15, "seek": 5300, "start": 58.0, "end": 62.0, "text": " namely GPU virtualization using Cricut,", "tokens": [50614, 20926, 18407, 6374, 2144, 1228, 383, 1341, 325, 11, 50814], "temperature": 0.0, "avg_logprob": -0.10893565730044716, "compression_ratio": 1.4278350515463918, "no_speech_prob": 0.002280787331983447}, {"id": 16, "seek": 5300, "start": 62.0, "end": 66.0, "text": " and application kernel profiling.", "tokens": [50814, 293, 3861, 28256, 1740, 4883, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10893565730044716, "compression_ratio": 1.4278350515463918, "no_speech_prob": 0.002280787331983447}, {"id": 17, "seek": 5300, "start": 66.0, "end": 71.0, "text": " Okay, we've been through this a few times now,", "tokens": [51014, 1033, 11, 321, 600, 668, 807, 341, 257, 1326, 1413, 586, 11, 51264], "temperature": 0.0, "avg_logprob": -0.10893565730044716, "compression_ratio": 1.4278350515463918, "no_speech_prob": 0.002280787331983447}, {"id": 18, "seek": 5300, "start": 71.0, "end": 73.0, "text": " but let's go through it again.", "tokens": [51264, 457, 718, 311, 352, 807, 309, 797, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10893565730044716, "compression_ratio": 1.4278350515463918, "no_speech_prob": 0.002280787331983447}, {"id": 19, "seek": 5300, "start": 73.0, "end": 77.0, "text": " We have compared to a standard VM", "tokens": [51364, 492, 362, 5347, 281, 257, 3832, 18038, 51564], "temperature": 0.0, "avg_logprob": -0.10893565730044716, "compression_ratio": 1.4278350515463918, "no_speech_prob": 0.002280787331983447}, {"id": 20, "seek": 5300, "start": 77.0, "end": 81.0, "text": " where we have a hardware and a host operating system,", "tokens": [51564, 689, 321, 362, 257, 8837, 293, 257, 3975, 7447, 1185, 11, 51764], "temperature": 0.0, "avg_logprob": -0.10893565730044716, "compression_ratio": 1.4278350515463918, "no_speech_prob": 0.002280787331983447}, {"id": 21, "seek": 8100, "start": 81.0, "end": 85.0, "text": " which might also be missing if we have a level one hypervisor,", "tokens": [50364, 597, 1062, 611, 312, 5361, 498, 321, 362, 257, 1496, 472, 9848, 16457, 11, 50564], "temperature": 0.0, "avg_logprob": -0.15362522727564762, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.002666089218109846}, {"id": 22, "seek": 8100, "start": 85.0, "end": 88.0, "text": " and a hypervisor, we then have this virtual machine.", "tokens": [50564, 293, 257, 9848, 16457, 11, 321, 550, 362, 341, 6374, 3479, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15362522727564762, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.002666089218109846}, {"id": 23, "seek": 8100, "start": 88.0, "end": 93.0, "text": " And this virtual machine runs a virtual machine image, which...", "tokens": [50714, 400, 341, 6374, 3479, 6676, 257, 6374, 3479, 3256, 11, 597, 485, 50964], "temperature": 0.0, "avg_logprob": -0.15362522727564762, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.002666089218109846}, {"id": 24, "seek": 8100, "start": 93.0, "end": 96.0, "text": " What's happening?", "tokens": [50964, 708, 311, 2737, 30, 51114], "temperature": 0.0, "avg_logprob": -0.15362522727564762, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.002666089218109846}, {"id": 25, "seek": 8100, "start": 96.0, "end": 101.0, "text": " Okay, this virtual machine image is just a full-blown operating system", "tokens": [51114, 1033, 11, 341, 6374, 3479, 3256, 307, 445, 257, 1577, 12, 5199, 648, 7447, 1185, 51364], "temperature": 0.0, "avg_logprob": -0.15362522727564762, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.002666089218109846}, {"id": 26, "seek": 8100, "start": 101.0, "end": 105.0, "text": " with its own guest kernel, user space, and everything else.", "tokens": [51364, 365, 1080, 1065, 8341, 28256, 11, 4195, 1901, 11, 293, 1203, 1646, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15362522727564762, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.002666089218109846}, {"id": 27, "seek": 8100, "start": 105.0, "end": 108.0, "text": " Then we've also talked about containers before,", "tokens": [51564, 1396, 321, 600, 611, 2825, 466, 17089, 949, 11, 51714], "temperature": 0.0, "avg_logprob": -0.15362522727564762, "compression_ratio": 1.6936936936936937, "no_speech_prob": 0.002666089218109846}, {"id": 28, "seek": 10800, "start": 108.0, "end": 111.0, "text": " which throws away the guest kernel", "tokens": [50364, 597, 19251, 1314, 264, 8341, 28256, 50514], "temperature": 0.0, "avg_logprob": -0.10516853143673131, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.004050241783261299}, {"id": 29, "seek": 10800, "start": 111.0, "end": 114.0, "text": " and really tries to minimize the image for the application,", "tokens": [50514, 293, 534, 9898, 281, 17522, 264, 3256, 337, 264, 3861, 11, 50664], "temperature": 0.0, "avg_logprob": -0.10516853143673131, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.004050241783261299}, {"id": 30, "seek": 10800, "start": 114.0, "end": 119.0, "text": " and we have unicarnals, which then run in virtual machines again,", "tokens": [50664, 293, 321, 362, 517, 299, 1083, 1124, 11, 597, 550, 1190, 294, 6374, 8379, 797, 11, 50914], "temperature": 0.0, "avg_logprob": -0.10516853143673131, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.004050241783261299}, {"id": 31, "seek": 10800, "start": 119.0, "end": 123.0, "text": " but inside the unicarnal, everything is packed together as tightly as possible.", "tokens": [50914, 457, 1854, 264, 517, 299, 1083, 304, 11, 1203, 307, 13265, 1214, 382, 21952, 382, 1944, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10516853143673131, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.004050241783261299}, {"id": 32, "seek": 10800, "start": 123.0, "end": 127.0, "text": " We have the application, we have some user-provided libraries,", "tokens": [51114, 492, 362, 264, 3861, 11, 321, 362, 512, 4195, 12, 49911, 2112, 15148, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10516853143673131, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.004050241783261299}, {"id": 33, "seek": 10800, "start": 127.0, "end": 132.0, "text": " and we have the library operating system all statically linked together.", "tokens": [51314, 293, 321, 362, 264, 6405, 7447, 1185, 439, 2219, 984, 9408, 1214, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10516853143673131, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.004050241783261299}, {"id": 34, "seek": 10800, "start": 132.0, "end": 136.0, "text": " What this gives us then is an image", "tokens": [51564, 708, 341, 2709, 505, 550, 307, 364, 3256, 51764], "temperature": 0.0, "avg_logprob": -0.10516853143673131, "compression_ratio": 1.7531914893617022, "no_speech_prob": 0.004050241783261299}, {"id": 35, "seek": 13600, "start": 136.0, "end": 140.0, "text": " that we can really specialize to the use case at hand.", "tokens": [50364, 300, 321, 393, 534, 37938, 281, 264, 764, 1389, 412, 1011, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07025730725630973, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.003932873718440533}, {"id": 36, "seek": 13600, "start": 140.0, "end": 143.0, "text": " So that means for the environment, namely the hypervisor,", "tokens": [50564, 407, 300, 1355, 337, 264, 2823, 11, 20926, 264, 9848, 16457, 11, 50714], "temperature": 0.0, "avg_logprob": -0.07025730725630973, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.003932873718440533}, {"id": 37, "seek": 13600, "start": 143.0, "end": 147.0, "text": " and for the application itself, and what it should do.", "tokens": [50714, 293, 337, 264, 3861, 2564, 11, 293, 437, 309, 820, 360, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07025730725630973, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.003932873718440533}, {"id": 38, "seek": 13600, "start": 147.0, "end": 154.0, "text": " This leads to tiny images, only a few megabytes in size for Hello World, for example.", "tokens": [50914, 639, 6689, 281, 5870, 5267, 11, 787, 257, 1326, 10816, 24538, 294, 2744, 337, 2425, 3937, 11, 337, 1365, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07025730725630973, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.003932873718440533}, {"id": 39, "seek": 13600, "start": 154.0, "end": 159.0, "text": " And since we only have one process in this whole unicarnal image,", "tokens": [51264, 400, 1670, 321, 787, 362, 472, 1399, 294, 341, 1379, 517, 299, 1083, 304, 3256, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07025730725630973, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.003932873718440533}, {"id": 40, "seek": 13600, "start": 159.0, "end": 165.0, "text": " we don't need any isolation between this process, other processes, or the kernel.", "tokens": [51514, 321, 500, 380, 643, 604, 16001, 1296, 341, 1399, 11, 661, 7555, 11, 420, 264, 28256, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07025730725630973, "compression_ratio": 1.636734693877551, "no_speech_prob": 0.003932873718440533}, {"id": 41, "seek": 16500, "start": 165.0, "end": 169.0, "text": " That means we can do this as a single address-based operating system", "tokens": [50364, 663, 1355, 321, 393, 360, 341, 382, 257, 2167, 2985, 12, 6032, 7447, 1185, 50564], "temperature": 0.0, "avg_logprob": -0.10040099200080423, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.007204269524663687}, {"id": 42, "seek": 16500, "start": 169.0, "end": 173.0, "text": " without any costly address-based context switches between.", "tokens": [50564, 1553, 604, 28328, 2985, 12, 6032, 4319, 19458, 1296, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10040099200080423, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.007204269524663687}, {"id": 43, "seek": 16500, "start": 173.0, "end": 178.0, "text": " We can run everything at kernel level, have no privileged context switches,", "tokens": [50764, 492, 393, 1190, 1203, 412, 28256, 1496, 11, 362, 572, 25293, 4319, 19458, 11, 51014], "temperature": 0.0, "avg_logprob": -0.10040099200080423, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.007204269524663687}, {"id": 44, "seek": 16500, "start": 178.0, "end": 184.0, "text": " and then can just make system calls to function calls.", "tokens": [51014, 293, 550, 393, 445, 652, 1185, 5498, 281, 2445, 5498, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10040099200080423, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.007204269524663687}, {"id": 45, "seek": 16500, "start": 184.0, "end": 186.0, "text": " And that's pretty cool.", "tokens": [51314, 400, 300, 311, 1238, 1627, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10040099200080423, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.007204269524663687}, {"id": 46, "seek": 16500, "start": 186.0, "end": 191.0, "text": " Enter the Hermit operating system, as you can probably guess by the logo.", "tokens": [51414, 10399, 264, 21842, 270, 7447, 1185, 11, 382, 291, 393, 1391, 2041, 538, 264, 9699, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10040099200080423, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.007204269524663687}, {"id": 47, "seek": 19100, "start": 191.0, "end": 197.0, "text": " The logo is written in Rust, 100%, well, not 100%,", "tokens": [50364, 440, 9699, 307, 3720, 294, 34952, 11, 2319, 8923, 731, 11, 406, 2319, 8923, 50664], "temperature": 0.0, "avg_logprob": -0.16491471396552193, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.014239364303648472}, {"id": 48, "seek": 19100, "start": 197.0, "end": 199.0, "text": " but there's no C in there, at least.", "tokens": [50664, 457, 456, 311, 572, 383, 294, 456, 11, 412, 1935, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16491471396552193, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.014239364303648472}, {"id": 49, "seek": 19100, "start": 199.0, "end": 203.0, "text": " There's only Rust and a bit of assembly, of course.", "tokens": [50764, 821, 311, 787, 34952, 293, 257, 857, 295, 12103, 11, 295, 1164, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16491471396552193, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.014239364303648472}, {"id": 50, "seek": 19100, "start": 203.0, "end": 206.0, "text": " We mainly target Rust applications, too.", "tokens": [50964, 492, 8704, 3779, 34952, 5821, 11, 886, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16491471396552193, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.014239364303648472}, {"id": 51, "seek": 19100, "start": 206.0, "end": 212.0, "text": " So we have an official tier 3 Rust target for Rust applications that we can use.", "tokens": [51114, 407, 321, 362, 364, 4783, 12362, 805, 34952, 3779, 337, 34952, 5821, 300, 321, 393, 764, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16491471396552193, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.014239364303648472}, {"id": 52, "seek": 19100, "start": 212.0, "end": 217.0, "text": " But we also have a GCC and NewLip fork if you really want to run C applications,", "tokens": [51414, 583, 321, 611, 362, 257, 460, 11717, 293, 1873, 43, 647, 17716, 498, 291, 534, 528, 281, 1190, 383, 5821, 11, 51664], "temperature": 0.0, "avg_logprob": -0.16491471396552193, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.014239364303648472}, {"id": 53, "seek": 19100, "start": 217.0, "end": 220.0, "text": " though that's not our primary focus.", "tokens": [51664, 1673, 300, 311, 406, 527, 6194, 1879, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16491471396552193, "compression_ratio": 1.6266094420600858, "no_speech_prob": 0.014239364303648472}, {"id": 54, "seek": 22000, "start": 220.0, "end": 224.0, "text": " We have multi-core support, we are easily configurable,", "tokens": [50364, 492, 362, 4825, 12, 12352, 1406, 11, 321, 366, 3612, 22192, 712, 11, 50564], "temperature": 0.0, "avg_logprob": -0.08159536581773025, "compression_ratio": 1.65, "no_speech_prob": 0.000984090263955295}, {"id": 55, "seek": 22000, "start": 224.0, "end": 229.0, "text": " and we can now also compile on Windows.", "tokens": [50564, 293, 321, 393, 586, 611, 31413, 322, 8591, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08159536581773025, "compression_ratio": 1.65, "no_speech_prob": 0.000984090263955295}, {"id": 56, "seek": 22000, "start": 229.0, "end": 232.0, "text": " Yeah, we can also support stable Rust nowadays", "tokens": [50814, 865, 11, 321, 393, 611, 1406, 8351, 34952, 13434, 50964], "temperature": 0.0, "avg_logprob": -0.08159536581773025, "compression_ratio": 1.65, "no_speech_prob": 0.000984090263955295}, {"id": 57, "seek": 22000, "start": 232.0, "end": 235.0, "text": " through our own distribution of the Rust standard library,", "tokens": [50964, 807, 527, 1065, 7316, 295, 264, 34952, 3832, 6405, 11, 51114], "temperature": 0.0, "avg_logprob": -0.08159536581773025, "compression_ratio": 1.65, "no_speech_prob": 0.000984090263955295}, {"id": 58, "seek": 22000, "start": 235.0, "end": 238.0, "text": " which you can check out here.", "tokens": [51114, 597, 291, 393, 1520, 484, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08159536581773025, "compression_ratio": 1.65, "no_speech_prob": 0.000984090263955295}, {"id": 59, "seek": 22000, "start": 238.0, "end": 242.0, "text": " Okay, let's talk about the platform support.", "tokens": [51264, 1033, 11, 718, 311, 751, 466, 264, 3663, 1406, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08159536581773025, "compression_ratio": 1.65, "no_speech_prob": 0.000984090263955295}, {"id": 60, "seek": 22000, "start": 242.0, "end": 245.0, "text": " Okay, once we have this image seen on the left", "tokens": [51464, 1033, 11, 1564, 321, 362, 341, 3256, 1612, 322, 264, 1411, 51614], "temperature": 0.0, "avg_logprob": -0.08159536581773025, "compression_ratio": 1.65, "no_speech_prob": 0.000984090263955295}, {"id": 61, "seek": 22000, "start": 245.0, "end": 249.0, "text": " where we have the application, standard library, NewLip, and the kernel,", "tokens": [51614, 689, 321, 362, 264, 3861, 11, 3832, 6405, 11, 1873, 43, 647, 11, 293, 264, 28256, 11, 51814], "temperature": 0.0, "avg_logprob": -0.08159536581773025, "compression_ratio": 1.65, "no_speech_prob": 0.000984090263955295}, {"id": 62, "seek": 24900, "start": 249.0, "end": 252.0, "text": " we can then run it on our own hypervisor, for example.", "tokens": [50364, 321, 393, 550, 1190, 309, 322, 527, 1065, 9848, 16457, 11, 337, 1365, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14512317830866034, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.002501795068383217}, {"id": 63, "seek": 24900, "start": 252.0, "end": 258.0, "text": " U-Hive is a specialized Hermit hypervisor that is specialized to running", "tokens": [50514, 624, 12, 39, 488, 307, 257, 19813, 21842, 270, 9848, 16457, 300, 307, 19813, 281, 2614, 50814], "temperature": 0.0, "avg_logprob": -0.14512317830866034, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.002501795068383217}, {"id": 64, "seek": 24900, "start": 258.0, "end": 263.0, "text": " Hermit unique kind of images, which is the focus of Jonathan.", "tokens": [50814, 21842, 270, 3845, 733, 295, 5267, 11, 597, 307, 264, 1879, 295, 15471, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14512317830866034, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.002501795068383217}, {"id": 65, "seek": 24900, "start": 263.0, "end": 267.0, "text": " The main target for that is Linux KVM on x86,", "tokens": [51064, 440, 2135, 3779, 337, 300, 307, 18734, 591, 53, 44, 322, 2031, 22193, 11, 51264], "temperature": 0.0, "avg_logprob": -0.14512317830866034, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.002501795068383217}, {"id": 66, "seek": 24900, "start": 267.0, "end": 274.0, "text": " though there's also some degree of support for Mac OS on both x86 and ARM.", "tokens": [51264, 1673, 456, 311, 611, 512, 4314, 295, 1406, 337, 5707, 12731, 322, 1293, 2031, 22193, 293, 45209, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14512317830866034, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.002501795068383217}, {"id": 67, "seek": 27400, "start": 274.0, "end": 281.0, "text": " And also upcoming, though not yet merged, is Linux KVM support for RISC-5,", "tokens": [50364, 400, 611, 11500, 11, 1673, 406, 1939, 36427, 11, 307, 18734, 591, 53, 44, 1406, 337, 497, 2343, 34, 12, 20, 11, 50714], "temperature": 0.0, "avg_logprob": -0.16533336639404297, "compression_ratio": 1.4334975369458127, "no_speech_prob": 0.0023924848064780235}, {"id": 68, "seek": 27400, "start": 281.0, "end": 284.0, "text": " which is something that Simon worked on.", "tokens": [50714, 597, 307, 746, 300, 13193, 2732, 322, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16533336639404297, "compression_ratio": 1.4334975369458127, "no_speech_prob": 0.0023924848064780235}, {"id": 69, "seek": 27400, "start": 284.0, "end": 286.0, "text": " Philip, sorry.", "tokens": [50864, 21144, 11, 2597, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16533336639404297, "compression_ratio": 1.4334975369458127, "no_speech_prob": 0.0023924848064780235}, {"id": 70, "seek": 27400, "start": 286.0, "end": 291.0, "text": " We can also target generic VMs through our Hermit loader,", "tokens": [50964, 492, 393, 611, 3779, 19577, 18038, 82, 807, 527, 21842, 270, 3677, 260, 11, 51214], "temperature": 0.0, "avg_logprob": -0.16533336639404297, "compression_ratio": 1.4334975369458127, "no_speech_prob": 0.0023924848064780235}, {"id": 71, "seek": 27400, "start": 291.0, "end": 294.0, "text": " which then chain loads the Hermit ELF image.", "tokens": [51214, 597, 550, 5021, 12668, 264, 21842, 270, 14426, 37, 3256, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16533336639404297, "compression_ratio": 1.4334975369458127, "no_speech_prob": 0.0023924848064780235}, {"id": 72, "seek": 27400, "start": 294.0, "end": 299.0, "text": " We can support multi-boot on x86, we support firecracker,", "tokens": [51364, 492, 393, 1406, 4825, 12, 1763, 310, 322, 2031, 22193, 11, 321, 1406, 2610, 10757, 23599, 11, 51614], "temperature": 0.0, "avg_logprob": -0.16533336639404297, "compression_ratio": 1.4334975369458127, "no_speech_prob": 0.0023924848064780235}, {"id": 73, "seek": 29900, "start": 299.0, "end": 304.0, "text": " and there's also UEFI work going on, which will be there soon, hopefully.", "tokens": [50364, 293, 456, 311, 611, 42260, 38568, 589, 516, 322, 11, 597, 486, 312, 456, 2321, 11, 4696, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10749361536524317, "compression_ratio": 1.4747081712062258, "no_speech_prob": 0.005293544381856918}, {"id": 74, "seek": 29900, "start": 304.0, "end": 312.0, "text": " For ARM and RISC-5, we use the Linux boot protocol to be able to run on things like KAML.", "tokens": [50614, 1171, 45209, 293, 497, 2343, 34, 12, 20, 11, 321, 764, 264, 18734, 11450, 10336, 281, 312, 1075, 281, 1190, 322, 721, 411, 591, 2865, 43, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10749361536524317, "compression_ratio": 1.4747081712062258, "no_speech_prob": 0.005293544381856918}, {"id": 75, "seek": 29900, "start": 312.0, "end": 317.0, "text": " Okay, so that's all you need to know if you want to use Hermit.", "tokens": [51014, 1033, 11, 370, 300, 311, 439, 291, 643, 281, 458, 498, 291, 528, 281, 764, 21842, 270, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10749361536524317, "compression_ratio": 1.4747081712062258, "no_speech_prob": 0.005293544381856918}, {"id": 76, "seek": 29900, "start": 317.0, "end": 319.0, "text": " Let's take a look inside.", "tokens": [51264, 961, 311, 747, 257, 574, 1854, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10749361536524317, "compression_ratio": 1.4747081712062258, "no_speech_prob": 0.005293544381856918}, {"id": 77, "seek": 29900, "start": 319.0, "end": 324.0, "text": " This is the same unique kind of image again, but from a different point of view now.", "tokens": [51364, 639, 307, 264, 912, 3845, 733, 295, 3256, 797, 11, 457, 490, 257, 819, 935, 295, 1910, 586, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10749361536524317, "compression_ratio": 1.4747081712062258, "no_speech_prob": 0.005293544381856918}, {"id": 78, "seek": 29900, "start": 324.0, "end": 327.0, "text": " The left stack is the application stack.", "tokens": [51614, 440, 1411, 8630, 307, 264, 3861, 8630, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10749361536524317, "compression_ratio": 1.4747081712062258, "no_speech_prob": 0.005293544381856918}, {"id": 79, "seek": 32700, "start": 327.0, "end": 329.0, "text": " It is the application.", "tokens": [50364, 467, 307, 264, 3861, 13, 50464], "temperature": 0.0, "avg_logprob": -0.18832696450723185, "compression_ratio": 1.511764705882353, "no_speech_prob": 0.0018559163436293602}, {"id": 80, "seek": 32700, "start": 329.0, "end": 335.0, "text": " It's some user defined libraries, Rust crates in this case,", "tokens": [50464, 467, 311, 512, 4195, 7642, 15148, 11, 34952, 941, 1024, 294, 341, 1389, 11, 50764], "temperature": 0.0, "avg_logprob": -0.18832696450723185, "compression_ratio": 1.511764705882353, "no_speech_prob": 0.0018559163436293602}, {"id": 81, "seek": 32700, "start": 335.0, "end": 343.0, "text": " and the core crates of the Rust 2 chain itself, so standard, Alagon core.", "tokens": [50764, 293, 264, 4965, 941, 1024, 295, 264, 34952, 568, 5021, 2564, 11, 370, 3832, 11, 967, 6709, 4965, 13, 51164], "temperature": 0.0, "avg_logprob": -0.18832696450723185, "compression_ratio": 1.511764705882353, "no_speech_prob": 0.0018559163436293602}, {"id": 82, "seek": 32700, "start": 343.0, "end": 350.0, "text": " On the right side, we have the Hermit kernel, which depends on some crates as well, and Alagon core.", "tokens": [51164, 1282, 264, 558, 1252, 11, 321, 362, 264, 21842, 270, 28256, 11, 597, 5946, 322, 512, 941, 1024, 382, 731, 11, 293, 967, 6709, 4965, 13, 51514], "temperature": 0.0, "avg_logprob": -0.18832696450723185, "compression_ratio": 1.511764705882353, "no_speech_prob": 0.0018559163436293602}, {"id": 83, "seek": 35000, "start": 350.0, "end": 354.0, "text": " These two things are compiled for different targets, though,", "tokens": [50364, 1981, 732, 721, 366, 36548, 337, 819, 12911, 11, 1673, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1012778849828811, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.01027954276651144}, {"id": 84, "seek": 35000, "start": 354.0, "end": 359.0, "text": " because we don't want to use any floating point operations in the kernel target,", "tokens": [50564, 570, 321, 500, 380, 528, 281, 764, 604, 12607, 935, 7705, 294, 264, 28256, 3779, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1012778849828811, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.01027954276651144}, {"id": 85, "seek": 35000, "start": 359.0, "end": 363.0, "text": " because that's costly to switch between.", "tokens": [50814, 570, 300, 311, 28328, 281, 3679, 1296, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1012778849828811, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.01027954276651144}, {"id": 86, "seek": 35000, "start": 363.0, "end": 367.0, "text": " And the user code is compiled for a special Hermit target,", "tokens": [51014, 400, 264, 4195, 3089, 307, 36548, 337, 257, 2121, 21842, 270, 3779, 11, 51214], "temperature": 0.0, "avg_logprob": -0.1012778849828811, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.01027954276651144}, {"id": 87, "seek": 35000, "start": 367.0, "end": 372.0, "text": " which does have floating point support and also tells the Rust standard library", "tokens": [51214, 597, 775, 362, 12607, 935, 1406, 293, 611, 5112, 264, 34952, 3832, 6405, 51464], "temperature": 0.0, "avg_logprob": -0.1012778849828811, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.01027954276651144}, {"id": 88, "seek": 35000, "start": 372.0, "end": 377.0, "text": " how to communicate with the Hermit kernel.", "tokens": [51464, 577, 281, 7890, 365, 264, 21842, 270, 28256, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1012778849828811, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.01027954276651144}, {"id": 89, "seek": 37700, "start": 377.0, "end": 380.0, "text": " We also provide together with the Hermit kernel,", "tokens": [50364, 492, 611, 2893, 1214, 365, 264, 21842, 270, 28256, 11, 50514], "temperature": 0.0, "avg_logprob": -0.12163967309996139, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.00047936863848008215}, {"id": 90, "seek": 37700, "start": 380.0, "end": 388.0, "text": " but compiled for the user target some intrinsic such as libm for math functions,", "tokens": [50514, 457, 36548, 337, 264, 4195, 3779, 512, 35698, 1270, 382, 22854, 76, 337, 5221, 6828, 11, 50914], "temperature": 0.0, "avg_logprob": -0.12163967309996139, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.00047936863848008215}, {"id": 91, "seek": 37700, "start": 388.0, "end": 391.0, "text": " or mem intrinsics for things like mem copy,", "tokens": [50914, 420, 1334, 28621, 1167, 337, 721, 411, 1334, 5055, 11, 51064], "temperature": 0.0, "avg_logprob": -0.12163967309996139, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.00047936863848008215}, {"id": 92, "seek": 37700, "start": 391.0, "end": 398.0, "text": " which really benefit from having this floating point support available.", "tokens": [51064, 597, 534, 5121, 490, 1419, 341, 12607, 935, 1406, 2435, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12163967309996139, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.00047936863848008215}, {"id": 93, "seek": 37700, "start": 398.0, "end": 403.0, "text": " One thing that I personally worked on a lot are soundness foundations.", "tokens": [51414, 1485, 551, 300, 286, 5665, 2732, 322, 257, 688, 366, 1626, 1287, 22467, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12163967309996139, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.00047936863848008215}, {"id": 94, "seek": 37700, "start": 403.0, "end": 406.0, "text": " You can see unsafe and safe Rust on the right.", "tokens": [51664, 509, 393, 536, 35948, 293, 3273, 34952, 322, 264, 558, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12163967309996139, "compression_ratio": 1.5512820512820513, "no_speech_prob": 0.00047936863848008215}, {"id": 95, "seek": 40600, "start": 406.0, "end": 408.0, "text": " And we published a paper on that.", "tokens": [50364, 400, 321, 6572, 257, 3035, 322, 300, 13, 50464], "temperature": 0.0, "avg_logprob": -0.11617439814976284, "compression_ratio": 1.529100529100529, "no_speech_prob": 0.004860718734562397}, {"id": 96, "seek": 40600, "start": 408.0, "end": 412.0, "text": " It's called on the challenge of sound code for operating system,", "tokens": [50464, 467, 311, 1219, 322, 264, 3430, 295, 1626, 3089, 337, 7447, 1185, 11, 50664], "temperature": 0.0, "avg_logprob": -0.11617439814976284, "compression_ratio": 1.529100529100529, "no_speech_prob": 0.004860718734562397}, {"id": 97, "seek": 40600, "start": 412.0, "end": 419.0, "text": " and what this basically aims for is to make the Hermit target sound.", "tokens": [50664, 293, 437, 341, 1936, 24683, 337, 307, 281, 652, 264, 21842, 270, 3779, 1626, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11617439814976284, "compression_ratio": 1.529100529100529, "no_speech_prob": 0.004860718734562397}, {"id": 98, "seek": 40600, "start": 419.0, "end": 423.0, "text": " That means any safety reasoning must not require context.", "tokens": [51014, 663, 1355, 604, 4514, 21577, 1633, 406, 3651, 4319, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11617439814976284, "compression_ratio": 1.529100529100529, "no_speech_prob": 0.004860718734562397}, {"id": 99, "seek": 40600, "start": 423.0, "end": 427.0, "text": " That's extremely important, and the history behind that is that", "tokens": [51214, 663, 311, 4664, 1021, 11, 293, 264, 2503, 2261, 300, 307, 300, 51414], "temperature": 0.0, "avg_logprob": -0.11617439814976284, "compression_ratio": 1.529100529100529, "no_speech_prob": 0.004860718734562397}, {"id": 100, "seek": 42700, "start": 428.0, "end": 437.0, "text": " Hermit was once written in C without much strictness around the locality of this kind of reasoning,", "tokens": [50414, 21842, 270, 390, 1564, 3720, 294, 383, 1553, 709, 10910, 1287, 926, 264, 1628, 1860, 295, 341, 733, 295, 21577, 11, 50864], "temperature": 0.0, "avg_logprob": -0.0942755334171248, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.012954499572515488}, {"id": 101, "seek": 42700, "start": 437.0, "end": 445.0, "text": " and we put a lot of work into going forward and migrating to a more Rust-like approach here.", "tokens": [50864, 293, 321, 829, 257, 688, 295, 589, 666, 516, 2128, 293, 6186, 8754, 281, 257, 544, 34952, 12, 4092, 3109, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0942755334171248, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.012954499572515488}, {"id": 102, "seek": 42700, "start": 445.0, "end": 448.0, "text": " One thing that came out of this is Hermit sync,", "tokens": [51264, 1485, 551, 300, 1361, 484, 295, 341, 307, 21842, 270, 20271, 11, 51414], "temperature": 0.0, "avg_logprob": -0.0942755334171248, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.012954499572515488}, {"id": 103, "seek": 42700, "start": 448.0, "end": 452.0, "text": " which is a collection of synchronization primitives used inside the Hermit kernel.", "tokens": [51414, 597, 307, 257, 5765, 295, 19331, 2144, 2886, 38970, 1143, 1854, 264, 21842, 270, 28256, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0942755334171248, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.012954499572515488}, {"id": 104, "seek": 45200, "start": 453.0, "end": 458.0, "text": " Most of these are also independently published as single crates", "tokens": [50414, 4534, 295, 613, 366, 611, 21761, 6572, 382, 2167, 941, 1024, 50664], "temperature": 0.0, "avg_logprob": -0.09689047119834206, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.01932595670223236}, {"id": 105, "seek": 45200, "start": 458.0, "end": 463.0, "text": " and republished through this image, so you can also pick whatever you like in your own project.", "tokens": [50664, 293, 1085, 836, 4173, 807, 341, 3256, 11, 370, 291, 393, 611, 1888, 2035, 291, 411, 294, 428, 1065, 1716, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09689047119834206, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.01932595670223236}, {"id": 106, "seek": 45200, "start": 463.0, "end": 472.0, "text": " Another thing is count unsafe, which you can use to count the amount of unsafe code inside your Rust thing", "tokens": [50914, 3996, 551, 307, 1207, 35948, 11, 597, 291, 393, 764, 281, 1207, 264, 2372, 295, 35948, 3089, 1854, 428, 34952, 551, 51364], "temperature": 0.0, "avg_logprob": -0.09689047119834206, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.01932595670223236}, {"id": 107, "seek": 45200, "start": 472.0, "end": 475.0, "text": " that we use to analyze our progress there.", "tokens": [51364, 300, 321, 764, 281, 12477, 527, 4205, 456, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09689047119834206, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.01932595670223236}, {"id": 108, "seek": 45200, "start": 475.0, "end": 481.0, "text": " The next thing I want to talk about is our evolving network stack.", "tokens": [51514, 440, 958, 551, 286, 528, 281, 751, 466, 307, 527, 21085, 3209, 8630, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09689047119834206, "compression_ratio": 1.6277056277056277, "no_speech_prob": 0.01932595670223236}, {"id": 109, "seek": 48100, "start": 482.0, "end": 486.0, "text": " Originally, it was just a user-side thing,", "tokens": [50414, 28696, 11, 309, 390, 445, 257, 4195, 12, 1812, 551, 11, 50614], "temperature": 0.0, "avg_logprob": -0.11621638139088948, "compression_ratio": 1.4491978609625669, "no_speech_prob": 0.000997726689092815}, {"id": 110, "seek": 48100, "start": 486.0, "end": 495.0, "text": " so the Rust applications would compile some network stack with small TCP, a Rust network stack,", "tokens": [50614, 370, 264, 34952, 5821, 576, 31413, 512, 3209, 8630, 365, 1359, 48965, 11, 257, 34952, 3209, 8630, 11, 51064], "temperature": 0.0, "avg_logprob": -0.11621638139088948, "compression_ratio": 1.4491978609625669, "no_speech_prob": 0.000997726689092815}, {"id": 111, "seek": 48100, "start": 495.0, "end": 502.0, "text": " and C applications would use what's it called LWIP, such as Unicraft does.", "tokens": [51064, 293, 383, 5821, 576, 764, 437, 311, 309, 1219, 441, 54, 9139, 11, 1270, 382, 1156, 299, 4469, 775, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11621638139088948, "compression_ratio": 1.4491978609625669, "no_speech_prob": 0.000997726689092815}, {"id": 112, "seek": 48100, "start": 502.0, "end": 506.0, "text": " In 2022, we moved that from user space into kernel space,", "tokens": [51414, 682, 20229, 11, 321, 4259, 300, 490, 4195, 1901, 666, 28256, 1901, 11, 51614], "temperature": 0.0, "avg_logprob": -0.11621638139088948, "compression_ratio": 1.4491978609625669, "no_speech_prob": 0.000997726689092815}, {"id": 113, "seek": 50600, "start": 506.0, "end": 511.0, "text": " which is not that meaningful since everything is kernel space, actually,", "tokens": [50364, 597, 307, 406, 300, 10995, 1670, 1203, 307, 28256, 1901, 11, 767, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1528019799126519, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.010775761678814888}, {"id": 114, "seek": 50600, "start": 511.0, "end": 515.0, "text": " but we moved it to the distribution of the kernel.", "tokens": [50614, 457, 321, 4259, 309, 281, 264, 7316, 295, 264, 28256, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1528019799126519, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.010775761678814888}, {"id": 115, "seek": 50600, "start": 517.0, "end": 521.0, "text": " Then we implemented support for these D-Style sockets", "tokens": [50914, 1396, 321, 12270, 1406, 337, 613, 413, 12, 50, 874, 306, 370, 11984, 51114], "temperature": 0.0, "avg_logprob": -0.1528019799126519, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.010775761678814888}, {"id": 116, "seek": 50600, "start": 521.0, "end": 524.0, "text": " because before we had a custom-made API for networking,", "tokens": [51114, 570, 949, 321, 632, 257, 2375, 12, 10341, 9362, 337, 17985, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1528019799126519, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.010775761678814888}, {"id": 117, "seek": 50600, "start": 524.0, "end": 528.0, "text": " and now we want to standardize it and adopt these things", "tokens": [51264, 293, 586, 321, 528, 281, 3832, 1125, 309, 293, 6878, 613, 721, 51464], "temperature": 0.0, "avg_logprob": -0.1528019799126519, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.010775761678814888}, {"id": 118, "seek": 50600, "start": 528.0, "end": 534.0, "text": " because that will allow us to throw away all the user space network stack,", "tokens": [51464, 570, 300, 486, 2089, 505, 281, 3507, 1314, 439, 264, 4195, 1901, 3209, 8630, 11, 51764], "temperature": 0.0, "avg_logprob": -0.1528019799126519, "compression_ratio": 1.58008658008658, "no_speech_prob": 0.010775761678814888}, {"id": 119, "seek": 53400, "start": 534.0, "end": 538.0, "text": " which can then both C applications and Rust applications", "tokens": [50364, 597, 393, 550, 1293, 383, 5821, 293, 34952, 5821, 50564], "temperature": 0.0, "avg_logprob": -0.12009343756250589, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0009682202362455428}, {"id": 120, "seek": 53400, "start": 538.0, "end": 542.0, "text": " use the kernel-provided small TCP network stack.", "tokens": [50564, 764, 264, 28256, 12, 49911, 2112, 1359, 48965, 3209, 8630, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12009343756250589, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0009682202362455428}, {"id": 121, "seek": 53400, "start": 542.0, "end": 546.0, "text": " In 2024, we are going for Pulse support for async.io,", "tokens": [50764, 682, 45237, 11, 321, 366, 516, 337, 430, 19258, 1406, 337, 382, 34015, 13, 1004, 11, 50964], "temperature": 0.0, "avg_logprob": -0.12009343756250589, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0009682202362455428}, {"id": 122, "seek": 53400, "start": 546.0, "end": 551.0, "text": " which would enable us to run a whole bunch of Rust networking applications,", "tokens": [50964, 597, 576, 9528, 505, 281, 1190, 257, 1379, 3840, 295, 34952, 17985, 5821, 11, 51214], "temperature": 0.0, "avg_logprob": -0.12009343756250589, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0009682202362455428}, {"id": 123, "seek": 53400, "start": 551.0, "end": 555.0, "text": " which usually run on Tokyo or something like that,", "tokens": [51214, 597, 2673, 1190, 322, 15147, 420, 746, 411, 300, 11, 51414], "temperature": 0.0, "avg_logprob": -0.12009343756250589, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0009682202362455428}, {"id": 124, "seek": 53400, "start": 555.0, "end": 558.0, "text": " and work on this is already well underway.", "tokens": [51414, 293, 589, 322, 341, 307, 1217, 731, 27534, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12009343756250589, "compression_ratio": 1.5302325581395348, "no_speech_prob": 0.0009682202362455428}, {"id": 125, "seek": 55800, "start": 559.0, "end": 565.0, "text": " Okay, then let's talk about the two application-focused things.", "tokens": [50414, 1033, 11, 550, 718, 311, 751, 466, 264, 732, 3861, 12, 44062, 721, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1219921234326485, "compression_ratio": 1.4305555555555556, "no_speech_prob": 0.001302393851801753}, {"id": 126, "seek": 55800, "start": 565.0, "end": 568.0, "text": " First, GPU virtualization with Cricut.", "tokens": [50714, 2386, 11, 18407, 6374, 2144, 365, 383, 1341, 325, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1219921234326485, "compression_ratio": 1.4305555555555556, "no_speech_prob": 0.001302393851801753}, {"id": 127, "seek": 55800, "start": 568.0, "end": 574.0, "text": " Short introduction to Cricut, which is another project developed at our institute, ACS.", "tokens": [50864, 16881, 9339, 281, 383, 1341, 325, 11, 597, 307, 1071, 1716, 4743, 412, 527, 26860, 11, 8157, 50, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1219921234326485, "compression_ratio": 1.4305555555555556, "no_speech_prob": 0.001302393851801753}, {"id": 128, "seek": 55800, "start": 574.0, "end": 580.0, "text": " It's basically just plugging networking in between some API.", "tokens": [51164, 467, 311, 1936, 445, 42975, 17985, 294, 1296, 512, 9362, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1219921234326485, "compression_ratio": 1.4305555555555556, "no_speech_prob": 0.001302393851801753}, {"id": 129, "seek": 55800, "start": 580.0, "end": 585.0, "text": " So classical GPU CUDA applications work like seen on top,", "tokens": [51464, 407, 13735, 18407, 29777, 7509, 5821, 589, 411, 1612, 322, 1192, 11, 51714], "temperature": 0.0, "avg_logprob": -0.1219921234326485, "compression_ratio": 1.4305555555555556, "no_speech_prob": 0.001302393851801753}, {"id": 130, "seek": 58500, "start": 585.0, "end": 588.0, "text": " where we have this CUDA app that calls CUDA APIs,", "tokens": [50364, 689, 321, 362, 341, 29777, 7509, 724, 300, 5498, 29777, 7509, 21445, 11, 50514], "temperature": 0.0, "avg_logprob": -0.09127526144379551, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.002350069582462311}, {"id": 131, "seek": 58500, "start": 588.0, "end": 593.0, "text": " a library from NVIDIA, which then performs the actual computations on the GPU.", "tokens": [50514, 257, 6405, 490, 426, 3958, 6914, 11, 597, 550, 26213, 264, 3539, 2807, 763, 322, 264, 18407, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09127526144379551, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.002350069582462311}, {"id": 132, "seek": 58500, "start": 593.0, "end": 598.0, "text": " With Cricut, we plug a Cricut client next to the app", "tokens": [50764, 2022, 383, 1341, 325, 11, 321, 5452, 257, 383, 1341, 325, 6423, 958, 281, 264, 724, 51014], "temperature": 0.0, "avg_logprob": -0.09127526144379551, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.002350069582462311}, {"id": 133, "seek": 58500, "start": 598.0, "end": 601.0, "text": " and a server to the CUDA APIs,", "tokens": [51014, 293, 257, 7154, 281, 264, 29777, 7509, 21445, 11, 51164], "temperature": 0.0, "avg_logprob": -0.09127526144379551, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.002350069582462311}, {"id": 134, "seek": 58500, "start": 601.0, "end": 605.0, "text": " and then just tunnel through all requests and answers.", "tokens": [51164, 293, 550, 445, 13186, 807, 439, 12475, 293, 6338, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09127526144379551, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.002350069582462311}, {"id": 135, "seek": 58500, "start": 606.0, "end": 609.0, "text": " That separates these two things,", "tokens": [51414, 663, 34149, 613, 732, 721, 11, 51564], "temperature": 0.0, "avg_logprob": -0.09127526144379551, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.002350069582462311}, {"id": 136, "seek": 58500, "start": 609.0, "end": 613.0, "text": " and we can move them wherever we want and control what's happening there.", "tokens": [51564, 293, 321, 393, 1286, 552, 8660, 321, 528, 293, 1969, 437, 311, 2737, 456, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09127526144379551, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.002350069582462311}, {"id": 137, "seek": 61300, "start": 613.0, "end": 616.0, "text": " And we found it's not that...", "tokens": [50364, 400, 321, 1352, 309, 311, 406, 300, 485, 50514], "temperature": 0.0, "avg_logprob": -0.19253423137049522, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.0011853770120069385}, {"id": 138, "seek": 61300, "start": 617.0, "end": 620.0, "text": " Yeah, it's not that high of an overhead.", "tokens": [50564, 865, 11, 309, 311, 406, 300, 1090, 295, 364, 19922, 13, 50714], "temperature": 0.0, "avg_logprob": -0.19253423137049522, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.0011853770120069385}, {"id": 139, "seek": 61300, "start": 620.0, "end": 626.0, "text": " We can then use this for remote execution, scheduling, or monitoring of GPU applications, as seen here.", "tokens": [50714, 492, 393, 550, 764, 341, 337, 8607, 15058, 11, 29055, 11, 420, 11028, 295, 18407, 5821, 11, 382, 1612, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.19253423137049522, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.0011853770120069385}, {"id": 140, "seek": 61300, "start": 626.0, "end": 629.0, "text": " We can have several nodes with virtual GPUs,", "tokens": [51014, 492, 393, 362, 2940, 13891, 365, 6374, 18407, 82, 11, 51164], "temperature": 0.0, "avg_logprob": -0.19253423137049522, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.0011853770120069385}, {"id": 141, "seek": 61300, "start": 629.0, "end": 634.0, "text": " which then run on another node for computation.", "tokens": [51164, 597, 550, 1190, 322, 1071, 9984, 337, 24903, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19253423137049522, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.0011853770120069385}, {"id": 142, "seek": 61300, "start": 635.0, "end": 638.0, "text": " We then adapted Cricut for Unicornals,", "tokens": [51464, 492, 550, 20871, 383, 1341, 325, 337, 1156, 23115, 1124, 11, 51614], "temperature": 0.0, "avg_logprob": -0.19253423137049522, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.0011853770120069385}, {"id": 143, "seek": 61300, "start": 638.0, "end": 641.0, "text": " and published a paper on that.", "tokens": [51614, 293, 6572, 257, 3035, 322, 300, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19253423137049522, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.0011853770120069385}, {"id": 144, "seek": 64100, "start": 642.0, "end": 646.0, "text": " And how we did this is Cricut is based on ONCRPCs,", "tokens": [50414, 400, 577, 321, 630, 341, 307, 383, 1341, 325, 307, 2361, 322, 9299, 18547, 12986, 82, 11, 50614], "temperature": 0.0, "avg_logprob": -0.15637245563545613, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.0004577585496008396}, {"id": 145, "seek": 64100, "start": 646.0, "end": 649.0, "text": " which came out of Sun way back when.", "tokens": [50614, 597, 1361, 484, 295, 6163, 636, 646, 562, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15637245563545613, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.0004577585496008396}, {"id": 146, "seek": 64100, "start": 649.0, "end": 652.0, "text": " And the reference implementation is Oden Complex", "tokens": [50764, 400, 264, 6408, 11420, 307, 422, 1556, 41184, 50914], "temperature": 0.0, "avg_logprob": -0.15637245563545613, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.0004577585496008396}, {"id": 147, "seek": 64100, "start": 652.0, "end": 655.0, "text": " and uses Linux-specific networking features,", "tokens": [50914, 293, 4960, 18734, 12, 29258, 17985, 4122, 11, 51064], "temperature": 0.0, "avg_logprob": -0.15637245563545613, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.0004577585496008396}, {"id": 148, "seek": 64100, "start": 655.0, "end": 659.0, "text": " so it wasn't easy to port to our Rust toolchain, for example.", "tokens": [51064, 370, 309, 2067, 380, 1858, 281, 2436, 281, 527, 34952, 2290, 11509, 11, 337, 1365, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15637245563545613, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.0004577585496008396}, {"id": 149, "seek": 64100, "start": 659.0, "end": 663.0, "text": " And as you can already guess, we ported it to Rust.", "tokens": [51264, 400, 382, 291, 393, 1217, 2041, 11, 321, 2436, 292, 309, 281, 34952, 13, 51464], "temperature": 0.0, "avg_logprob": -0.15637245563545613, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.0004577585496008396}, {"id": 150, "seek": 64100, "start": 664.0, "end": 667.0, "text": " Our user code is then run inside the Unicornal", "tokens": [51514, 2621, 4195, 3089, 307, 550, 1190, 1854, 264, 1156, 23115, 304, 51664], "temperature": 0.0, "avg_logprob": -0.15637245563545613, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.0004577585496008396}, {"id": 151, "seek": 66700, "start": 667.0, "end": 676.0, "text": " and only like the server part serving the GPU is not run inside the Unicornal.", "tokens": [50364, 293, 787, 411, 264, 7154, 644, 8148, 264, 18407, 307, 406, 1190, 1854, 264, 1156, 23115, 304, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1024613203825774, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.0009215169120579958}, {"id": 152, "seek": 66700, "start": 676.0, "end": 679.0, "text": " We did this for Hermit and Unicraft.", "tokens": [50814, 492, 630, 341, 337, 21842, 270, 293, 1156, 299, 4469, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1024613203825774, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.0009215169120579958}, {"id": 153, "seek": 66700, "start": 680.0, "end": 683.0, "text": " For Unicraft we had to develop Rust application support first,", "tokens": [51014, 1171, 1156, 299, 4469, 321, 632, 281, 1499, 34952, 3861, 1406, 700, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1024613203825774, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.0009215169120579958}, {"id": 154, "seek": 66700, "start": 683.0, "end": 687.0, "text": " but we did that and now it's working fine.", "tokens": [51164, 457, 321, 630, 300, 293, 586, 309, 311, 1364, 2489, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1024613203825774, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.0009215169120579958}, {"id": 155, "seek": 66700, "start": 689.0, "end": 694.0, "text": " The last topic that I want to talk about is application and kernel profiling.", "tokens": [51464, 440, 1036, 4829, 300, 286, 528, 281, 751, 466, 307, 3861, 293, 28256, 1740, 4883, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1024613203825774, "compression_ratio": 1.5255102040816326, "no_speech_prob": 0.0009215169120579958}, {"id": 156, "seek": 69400, "start": 695.0, "end": 698.0, "text": " It's a project that has been dormant for a while,", "tokens": [50414, 467, 311, 257, 1716, 300, 575, 668, 12521, 394, 337, 257, 1339, 11, 50564], "temperature": 0.0, "avg_logprob": -0.11911522469869475, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0009980398463085294}, {"id": 157, "seek": 69400, "start": 698.0, "end": 706.0, "text": " but we are reawakening it and getting it up to date and getting it working again.", "tokens": [50564, 457, 321, 366, 319, 1607, 514, 4559, 309, 293, 1242, 309, 493, 281, 4002, 293, 1242, 309, 1364, 797, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11911522469869475, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0009980398463085294}, {"id": 158, "seek": 69400, "start": 706.0, "end": 709.0, "text": " It's called RF Trace for Rust Function Tracer.", "tokens": [50964, 467, 311, 1219, 26204, 1765, 617, 337, 34952, 11166, 882, 1765, 12858, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11911522469869475, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0009980398463085294}, {"id": 159, "seek": 69400, "start": 712.0, "end": 715.0, "text": " How this works is that essentially we want to find out", "tokens": [51264, 1012, 341, 1985, 307, 300, 4476, 321, 528, 281, 915, 484, 51414], "temperature": 0.0, "avg_logprob": -0.11911522469869475, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0009980398463085294}, {"id": 160, "seek": 69400, "start": 715.0, "end": 720.0, "text": " how much time is spent in which functions when we run software.", "tokens": [51414, 577, 709, 565, 307, 4418, 294, 597, 6828, 562, 321, 1190, 4722, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11911522469869475, "compression_ratio": 1.538860103626943, "no_speech_prob": 0.0009980398463085294}, {"id": 161, "seek": 72000, "start": 720.0, "end": 727.0, "text": " Instrumentation does this by changing the code that is output by the compiler.", "tokens": [50364, 39785, 2206, 399, 775, 341, 538, 4473, 264, 3089, 300, 307, 5598, 538, 264, 31958, 13, 50714], "temperature": 0.0, "avg_logprob": -0.0829847584600034, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.005979161709547043}, {"id": 162, "seek": 72000, "start": 727.0, "end": 730.0, "text": " We are essentially changing the program that we measure,", "tokens": [50714, 492, 366, 4476, 4473, 264, 1461, 300, 321, 3481, 11, 50864], "temperature": 0.0, "avg_logprob": -0.0829847584600034, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.005979161709547043}, {"id": 163, "seek": 72000, "start": 730.0, "end": 734.0, "text": " which kind of falsifies the results a little bit,", "tokens": [50864, 597, 733, 295, 16720, 11221, 264, 3542, 257, 707, 857, 11, 51064], "temperature": 0.0, "avg_logprob": -0.0829847584600034, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.005979161709547043}, {"id": 164, "seek": 72000, "start": 734.0, "end": 740.0, "text": " but for that we get extremely reliable things", "tokens": [51064, 457, 337, 300, 321, 483, 4664, 12924, 721, 51364], "temperature": 0.0, "avg_logprob": -0.0829847584600034, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.005979161709547043}, {"id": 165, "seek": 72000, "start": 740.0, "end": 745.0, "text": " because we measure each and every time frame inside a function.", "tokens": [51364, 570, 321, 3481, 1184, 293, 633, 565, 3920, 1854, 257, 2445, 13, 51614], "temperature": 0.0, "avg_logprob": -0.0829847584600034, "compression_ratio": 1.5775401069518717, "no_speech_prob": 0.005979161709547043}, {"id": 166, "seek": 74500, "start": 746.0, "end": 747.0, "text": " It works like this.", "tokens": [50414, 467, 1985, 411, 341, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1622484883954448, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0013639735989272594}, {"id": 167, "seek": 74500, "start": 747.0, "end": 750.0, "text": " We have our Rust source, which squares some number.", "tokens": [50464, 492, 362, 527, 34952, 4009, 11, 597, 19368, 512, 1230, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1622484883954448, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0013639735989272594}, {"id": 168, "seek": 74500, "start": 750.0, "end": 755.0, "text": " That corresponds to this assembly for inter-architectures.", "tokens": [50614, 663, 23249, 281, 341, 12103, 337, 728, 12, 1178, 5739, 1303, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1622484883954448, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0013639735989272594}, {"id": 169, "seek": 74500, "start": 755.0, "end": 759.0, "text": " If we just append the corresponding flex to the compiler,", "tokens": [50864, 759, 321, 445, 34116, 264, 11760, 5896, 281, 264, 31958, 11, 51064], "temperature": 0.0, "avg_logprob": -0.1622484883954448, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0013639735989272594}, {"id": 170, "seek": 74500, "start": 759.0, "end": 764.0, "text": " the compiler nicely inserts this call to a special mCount function.", "tokens": [51064, 264, 31958, 9594, 49163, 341, 818, 281, 257, 2121, 275, 34, 792, 2445, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1622484883954448, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0013639735989272594}, {"id": 171, "seek": 74500, "start": 765.0, "end": 770.0, "text": " What this mCount function then does is it can inspect the stack", "tokens": [51364, 708, 341, 275, 34, 792, 2445, 550, 775, 307, 309, 393, 15018, 264, 8630, 51614], "temperature": 0.0, "avg_logprob": -0.1622484883954448, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0013639735989272594}, {"id": 172, "seek": 74500, "start": 770.0, "end": 773.0, "text": " to find out which function we are currently in.", "tokens": [51614, 281, 915, 484, 597, 2445, 321, 366, 4362, 294, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1622484883954448, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.0013639735989272594}, {"id": 173, "seek": 77300, "start": 773.0, "end": 782.0, "text": " It can then take some timestamp and it can also insert a return trampoline into this stack", "tokens": [50364, 467, 393, 550, 747, 512, 49108, 1215, 293, 309, 393, 611, 8969, 257, 2736, 38605, 18773, 666, 341, 8630, 50814], "temperature": 0.0, "avg_logprob": -0.16395394698433255, "compression_ratio": 1.5976331360946745, "no_speech_prob": 0.0005186756607145071}, {"id": 174, "seek": 77300, "start": 782.0, "end": 786.0, "text": " so that it also knows when we leave the function again.", "tokens": [50814, 370, 300, 309, 611, 3255, 562, 321, 1856, 264, 2445, 797, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16395394698433255, "compression_ratio": 1.5976331360946745, "no_speech_prob": 0.0005186756607145071}, {"id": 175, "seek": 77300, "start": 786.0, "end": 795.0, "text": " Together, all of this together, then lets us measure the time of functions, which is cool.", "tokens": [51014, 15911, 11, 439, 295, 341, 1214, 11, 550, 6653, 505, 3481, 264, 565, 295, 6828, 11, 597, 307, 1627, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16395394698433255, "compression_ratio": 1.5976331360946745, "no_speech_prob": 0.0005186756607145071}, {"id": 176, "seek": 77300, "start": 797.0, "end": 799.0, "text": " In the image it looks like this.", "tokens": [51564, 682, 264, 3256, 309, 1542, 411, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16395394698433255, "compression_ratio": 1.5976331360946745, "no_speech_prob": 0.0005186756607145071}, {"id": 177, "seek": 79900, "start": 799.0, "end": 804.0, "text": " Our F trace is just another static library, which is inside the whole image.", "tokens": [50364, 2621, 479, 13508, 307, 445, 1071, 13437, 6405, 11, 597, 307, 1854, 264, 1379, 3256, 13, 50614], "temperature": 0.0, "avg_logprob": -0.155011648013268, "compression_ratio": 1.4951456310679612, "no_speech_prob": 0.0009237873600795865}, {"id": 178, "seek": 79900, "start": 804.0, "end": 812.0, "text": " It works for Rust programs, C programs, and also for images, obviously.", "tokens": [50614, 467, 1985, 337, 34952, 4268, 11, 383, 4268, 11, 293, 611, 337, 5267, 11, 2745, 13, 51014], "temperature": 0.0, "avg_logprob": -0.155011648013268, "compression_ratio": 1.4951456310679612, "no_speech_prob": 0.0009237873600795865}, {"id": 179, "seek": 79900, "start": 814.0, "end": 818.0, "text": " It is very encapsulated, so it exposes only a few symbols like mCount", "tokens": [51114, 467, 307, 588, 38745, 6987, 11, 370, 309, 1278, 4201, 787, 257, 1326, 16944, 411, 275, 34, 792, 51314], "temperature": 0.0, "avg_logprob": -0.155011648013268, "compression_ratio": 1.4951456310679612, "no_speech_prob": 0.0009237873600795865}, {"id": 180, "seek": 79900, "start": 818.0, "end": 822.0, "text": " and then does everything internally.", "tokens": [51314, 293, 550, 775, 1203, 19501, 13, 51514], "temperature": 0.0, "avg_logprob": -0.155011648013268, "compression_ratio": 1.4951456310679612, "no_speech_prob": 0.0009237873600795865}, {"id": 181, "seek": 79900, "start": 823.0, "end": 828.0, "text": " When we measure such a trace, we can then look at it", "tokens": [51564, 1133, 321, 3481, 1270, 257, 13508, 11, 321, 393, 550, 574, 412, 309, 51814], "temperature": 0.0, "avg_logprob": -0.155011648013268, "compression_ratio": 1.4951456310679612, "no_speech_prob": 0.0009237873600795865}, {"id": 182, "seek": 82800, "start": 828.0, "end": 836.0, "text": " and have a trace replay and really see which function we go into how", "tokens": [50364, 293, 362, 257, 13508, 23836, 293, 534, 536, 597, 2445, 321, 352, 666, 577, 50764], "temperature": 0.0, "avg_logprob": -0.112768987591347, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0010139371734112501}, {"id": 183, "seek": 82800, "start": 836.0, "end": 838.0, "text": " and how long it takes inside them.", "tokens": [50764, 293, 577, 938, 309, 2516, 1854, 552, 13, 50864], "temperature": 0.0, "avg_logprob": -0.112768987591347, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0010139371734112501}, {"id": 184, "seek": 82800, "start": 838.0, "end": 841.0, "text": " We can also have a look at these graphically, of course.", "tokens": [50864, 492, 393, 611, 362, 257, 574, 412, 613, 4295, 984, 11, 295, 1164, 13, 51014], "temperature": 0.0, "avg_logprob": -0.112768987591347, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0010139371734112501}, {"id": 185, "seek": 82800, "start": 841.0, "end": 844.0, "text": " There are tools available for trace visualization.", "tokens": [51014, 821, 366, 3873, 2435, 337, 13508, 25801, 13, 51164], "temperature": 0.0, "avg_logprob": -0.112768987591347, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0010139371734112501}, {"id": 186, "seek": 82800, "start": 844.0, "end": 851.0, "text": " You could also create flame graphs out of this and then optimize the kernel.", "tokens": [51164, 509, 727, 611, 1884, 13287, 24877, 484, 295, 341, 293, 550, 19719, 264, 28256, 13, 51514], "temperature": 0.0, "avg_logprob": -0.112768987591347, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0010139371734112501}, {"id": 187, "seek": 82800, "start": 851.0, "end": 856.0, "text": " We are looking forward to using that for further optimizing the network stack, for example.", "tokens": [51514, 492, 366, 1237, 2128, 281, 1228, 300, 337, 3052, 40425, 264, 3209, 8630, 11, 337, 1365, 13, 51764], "temperature": 0.0, "avg_logprob": -0.112768987591347, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.0010139371734112501}, {"id": 188, "seek": 85800, "start": 859.0, "end": 864.0, "text": " All in all, I think that is all I have to say for today.", "tokens": [50414, 1057, 294, 439, 11, 286, 519, 300, 307, 439, 286, 362, 281, 584, 337, 965, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1426577023097447, "compression_ratio": 1.4451219512195121, "no_speech_prob": 0.0023437021300196648}, {"id": 189, "seek": 85800, "start": 864.0, "end": 869.0, "text": " That is a broad overview of the different topics that we covered last year.", "tokens": [50664, 663, 307, 257, 4152, 12492, 295, 264, 819, 8378, 300, 321, 5343, 1036, 1064, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1426577023097447, "compression_ratio": 1.4451219512195121, "no_speech_prob": 0.0023437021300196648}, {"id": 190, "seek": 85800, "start": 873.0, "end": 875.0, "text": " You can check us out on GitHub.", "tokens": [51114, 509, 393, 1520, 505, 484, 322, 23331, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1426577023097447, "compression_ratio": 1.4451219512195121, "no_speech_prob": 0.0023437021300196648}, {"id": 191, "seek": 85800, "start": 875.0, "end": 877.0, "text": " You can say hi on Zulip.", "tokens": [51214, 509, 393, 584, 4879, 322, 1176, 425, 647, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1426577023097447, "compression_ratio": 1.4451219512195121, "no_speech_prob": 0.0023437021300196648}, {"id": 192, "seek": 85800, "start": 877.0, "end": 880.0, "text": " With that, I thank you for your kind attention.", "tokens": [51314, 2022, 300, 11, 286, 1309, 291, 337, 428, 733, 3202, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1426577023097447, "compression_ratio": 1.4451219512195121, "no_speech_prob": 0.0023437021300196648}, {"id": 193, "seek": 88800, "start": 888.0, "end": 890.0, "text": " Thanks, Martin, for the talk.", "tokens": [50364, 2561, 11, 9184, 11, 337, 264, 751, 13, 50464], "temperature": 0.0, "avg_logprob": -0.19921853076452498, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.04665941372513771}, {"id": 194, "seek": 88800, "start": 890.0, "end": 894.0, "text": " We have a working mic, so we can have some questions.", "tokens": [50464, 492, 362, 257, 1364, 3123, 11, 370, 321, 393, 362, 512, 1651, 13, 50664], "temperature": 0.0, "avg_logprob": -0.19921853076452498, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.04665941372513771}, {"id": 195, "seek": 88800, "start": 894.0, "end": 895.0, "text": " Five minutes.", "tokens": [50664, 9436, 2077, 13, 50714], "temperature": 0.0, "avg_logprob": -0.19921853076452498, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.04665941372513771}, {"id": 196, "seek": 88800, "start": 903.0, "end": 904.0, "text": " Hi.", "tokens": [51114, 2421, 13, 51164], "temperature": 0.0, "avg_logprob": -0.19921853076452498, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.04665941372513771}, {"id": 197, "seek": 88800, "start": 904.0, "end": 906.0, "text": " My question is how do you instrument the Rust code", "tokens": [51164, 1222, 1168, 307, 577, 360, 291, 7198, 264, 34952, 3089, 51264], "temperature": 0.0, "avg_logprob": -0.19921853076452498, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.04665941372513771}, {"id": 198, "seek": 88800, "start": 906.0, "end": 909.0, "text": " and how do you actually get the function codes in there?", "tokens": [51264, 293, 577, 360, 291, 767, 483, 264, 2445, 14211, 294, 456, 30, 51414], "temperature": 0.0, "avg_logprob": -0.19921853076452498, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.04665941372513771}, {"id": 199, "seek": 88800, "start": 909.0, "end": 910.0, "text": " The what?", "tokens": [51414, 440, 437, 30, 51464], "temperature": 0.0, "avg_logprob": -0.19921853076452498, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.04665941372513771}, {"id": 200, "seek": 88800, "start": 910.0, "end": 916.0, "text": " The instrumentation and turn some calls into the Rust code, usually, that you have.", "tokens": [51464, 440, 7198, 399, 293, 1261, 512, 5498, 666, 264, 34952, 3089, 11, 2673, 11, 300, 291, 362, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19921853076452498, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.04665941372513771}, {"id": 201, "seek": 91600, "start": 916.0, "end": 921.0, "text": " My question is how do you get those function codes in there?", "tokens": [50364, 1222, 1168, 307, 577, 360, 291, 483, 729, 2445, 14211, 294, 456, 30, 50614], "temperature": 0.0, "avg_logprob": -0.16834790498307609, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.0022045306395739317}, {"id": 202, "seek": 91600, "start": 921.0, "end": 926.0, "text": " The question was, you said it to the mic, so it should be.", "tokens": [50614, 440, 1168, 390, 11, 291, 848, 309, 281, 264, 3123, 11, 370, 309, 820, 312, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16834790498307609, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.0022045306395739317}, {"id": 203, "seek": 91600, "start": 926.0, "end": 929.0, "text": " There is a compiler flag for that.", "tokens": [50864, 821, 307, 257, 31958, 7166, 337, 300, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16834790498307609, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.0022045306395739317}, {"id": 204, "seek": 91600, "start": 929.0, "end": 932.0, "text": " For C code, it is much simpler.", "tokens": [51014, 1171, 383, 3089, 11, 309, 307, 709, 18587, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16834790498307609, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.0022045306395739317}, {"id": 205, "seek": 91600, "start": 932.0, "end": 937.0, "text": " You would just compile with GCC and then say dash PG, I think.", "tokens": [51164, 509, 576, 445, 31413, 365, 460, 11717, 293, 550, 584, 8240, 40975, 11, 286, 519, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16834790498307609, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.0022045306395739317}, {"id": 206, "seek": 91600, "start": 937.0, "end": 939.0, "text": " For Rust code, it is more complicated.", "tokens": [51414, 1171, 34952, 3089, 11, 309, 307, 544, 6179, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16834790498307609, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.0022045306395739317}, {"id": 207, "seek": 91600, "start": 939.0, "end": 941.0, "text": " Well, it is not more complicated.", "tokens": [51514, 1042, 11, 309, 307, 406, 544, 6179, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16834790498307609, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.0022045306395739317}, {"id": 208, "seek": 91600, "start": 941.0, "end": 943.0, "text": " It is just more lengthy.", "tokens": [51614, 467, 307, 445, 544, 35374, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16834790498307609, "compression_ratio": 1.6214953271028036, "no_speech_prob": 0.0022045306395739317}, {"id": 209, "seek": 94300, "start": 943.0, "end": 947.0, "text": " I did not put it on the slide because it was two lines or something.", "tokens": [50364, 286, 630, 406, 829, 309, 322, 264, 4137, 570, 309, 390, 732, 3876, 420, 746, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16542585212064076, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.020357361063361168}, {"id": 210, "seek": 94300, "start": 947.0, "end": 954.0, "text": " But those are features available to us through LLVM.", "tokens": [50564, 583, 729, 366, 4122, 2435, 281, 505, 807, 441, 43, 53, 44, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16542585212064076, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.020357361063361168}, {"id": 211, "seek": 94300, "start": 954.0, "end": 960.0, "text": " Rust work is on the way to make this easier because it is not a stable thing", "tokens": [50914, 34952, 589, 307, 322, 264, 636, 281, 652, 341, 3571, 570, 309, 307, 406, 257, 8351, 551, 51214], "temperature": 0.0, "avg_logprob": -0.16542585212064076, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.020357361063361168}, {"id": 212, "seek": 94300, "start": 960.0, "end": 970.0, "text": " exposed by the Rust 2 chain, but through manually enabling the corresponding LLVM passes for the code,", "tokens": [51214, 9495, 538, 264, 34952, 568, 5021, 11, 457, 807, 16945, 23148, 264, 11760, 441, 43, 53, 44, 11335, 337, 264, 3089, 11, 51714], "temperature": 0.0, "avg_logprob": -0.16542585212064076, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.020357361063361168}, {"id": 213, "seek": 94300, "start": 970.0, "end": 971.0, "text": " this works.", "tokens": [51714, 341, 1985, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16542585212064076, "compression_ratio": 1.5572139303482586, "no_speech_prob": 0.020357361063361168}, {"id": 214, "seek": 97100, "start": 971.0, "end": 975.0, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50564], "temperature": 0.0, "avg_logprob": -0.25469842249033403, "compression_ratio": 1.282258064516129, "no_speech_prob": 0.0887075737118721}, {"id": 215, "seek": 97100, "start": 975.0, "end": 977.0, "text": " More questions?", "tokens": [50564, 5048, 1651, 30, 50664], "temperature": 0.0, "avg_logprob": -0.25469842249033403, "compression_ratio": 1.282258064516129, "no_speech_prob": 0.0887075737118721}, {"id": 216, "seek": 97100, "start": 977.0, "end": 989.0, "text": " I had a similar question.", "tokens": [50664, 286, 632, 257, 2531, 1168, 13, 51264], "temperature": 0.0, "avg_logprob": -0.25469842249033403, "compression_ratio": 1.282258064516129, "no_speech_prob": 0.0887075737118721}, {"id": 217, "seek": 97100, "start": 989.0, "end": 994.0, "text": " We also have a track on profiling, benchmarking and Unicraft.", "tokens": [51264, 492, 611, 362, 257, 2837, 322, 1740, 4883, 11, 18927, 278, 293, 1156, 299, 4469, 13, 51514], "temperature": 0.0, "avg_logprob": -0.25469842249033403, "compression_ratio": 1.282258064516129, "no_speech_prob": 0.0887075737118721}, {"id": 218, "seek": 97100, "start": 994.0, "end": 997.0, "text": " You are using instrumentation for profiling.", "tokens": [51514, 509, 366, 1228, 7198, 399, 337, 1740, 4883, 13, 51664], "temperature": 0.0, "avg_logprob": -0.25469842249033403, "compression_ratio": 1.282258064516129, "no_speech_prob": 0.0887075737118721}, {"id": 219, "seek": 99700, "start": 997.0, "end": 1002.0, "text": " Are you also considering sampling profiling?", "tokens": [50364, 2014, 291, 611, 8079, 21179, 1740, 4883, 30, 50614], "temperature": 0.0, "avg_logprob": -0.2760483285655146, "compression_ratio": 1.5044247787610618, "no_speech_prob": 0.16378238797187805}, {"id": 220, "seek": 99700, "start": 1002.0, "end": 1008.0, "text": " For example, what you are using is Unicraft, we are trying to tie in VMI, virtual machine interface.", "tokens": [50614, 1171, 1365, 11, 437, 291, 366, 1228, 307, 1156, 299, 4469, 11, 321, 366, 1382, 281, 7582, 294, 691, 13808, 11, 6374, 3479, 9226, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2760483285655146, "compression_ratio": 1.5044247787610618, "no_speech_prob": 0.16378238797187805}, {"id": 221, "seek": 99700, "start": 1008.0, "end": 1012.0, "text": " That will be able to do some sort of snapshotting and the others.", "tokens": [50914, 663, 486, 312, 1075, 281, 360, 512, 1333, 295, 30163, 783, 293, 264, 2357, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2760483285655146, "compression_ratio": 1.5044247787610618, "no_speech_prob": 0.16378238797187805}, {"id": 222, "seek": 99700, "start": 1012.0, "end": 1014.0, "text": " Is this enough?", "tokens": [51114, 1119, 341, 1547, 30, 51214], "temperature": 0.0, "avg_logprob": -0.2760483285655146, "compression_ratio": 1.5044247787610618, "no_speech_prob": 0.16378238797187805}, {"id": 223, "seek": 99700, "start": 1014.0, "end": 1022.0, "text": " Also, Unicraft, you have GCof support now because GCC 13 has embedded GCof support, so that makes things easier.", "tokens": [51214, 2743, 11, 1156, 299, 4469, 11, 291, 362, 29435, 2670, 1406, 586, 570, 460, 11717, 3705, 575, 16741, 29435, 2670, 1406, 11, 370, 300, 1669, 721, 3571, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2760483285655146, "compression_ratio": 1.5044247787610618, "no_speech_prob": 0.16378238797187805}, {"id": 224, "seek": 102200, "start": 1022.0, "end": 1027.0, "text": " Is this enough for what you have tested so far, the instrumented approach?", "tokens": [50364, 1119, 341, 1547, 337, 437, 291, 362, 8246, 370, 1400, 11, 264, 7198, 292, 3109, 30, 50614], "temperature": 0.0, "avg_logprob": -0.1540204507333261, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.10773761570453644}, {"id": 225, "seek": 102200, "start": 1027.0, "end": 1033.0, "text": " Because you have to build the application, you then have to run the instrumented one,", "tokens": [50614, 1436, 291, 362, 281, 1322, 264, 3861, 11, 291, 550, 362, 281, 1190, 264, 7198, 292, 472, 11, 50914], "temperature": 0.0, "avg_logprob": -0.1540204507333261, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.10773761570453644}, {"id": 226, "seek": 102200, "start": 1033.0, "end": 1037.0, "text": " maybe it is not similar practice, is this enough at this point?", "tokens": [50914, 1310, 309, 307, 406, 2531, 3124, 11, 307, 341, 1547, 412, 341, 935, 30, 51114], "temperature": 0.0, "avg_logprob": -0.1540204507333261, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.10773761570453644}, {"id": 227, "seek": 102200, "start": 1037.0, "end": 1039.0, "text": " We will have to see.", "tokens": [51114, 492, 486, 362, 281, 536, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1540204507333261, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.10773761570453644}, {"id": 228, "seek": 102200, "start": 1039.0, "end": 1046.0, "text": " In general, we are not that automated yet compared to Unicraft.", "tokens": [51214, 682, 2674, 11, 321, 366, 406, 300, 18473, 1939, 5347, 281, 1156, 299, 4469, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1540204507333261, "compression_ratio": 1.6349206349206349, "no_speech_prob": 0.10773761570453644}, {"id": 229, "seek": 104600, "start": 1047.0, "end": 1056.0, "text": " Our Rust application story is quite seamless, I think, and you just enable profiling through a simple feature flag,", "tokens": [50414, 2621, 34952, 3861, 1657, 307, 1596, 28677, 11, 286, 519, 11, 293, 291, 445, 9528, 1740, 4883, 807, 257, 2199, 4111, 7166, 11, 50864], "temperature": 0.0, "avg_logprob": -0.2817147396228932, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.08205372840166092}, {"id": 230, "seek": 104600, "start": 1056.0, "end": 1061.0, "text": " and then you run it and it gets dumped on the disk and you can look into it.", "tokens": [50864, 293, 550, 291, 1190, 309, 293, 309, 2170, 32131, 322, 264, 12355, 293, 291, 393, 574, 666, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2817147396228932, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.08205372840166092}, {"id": 231, "seek": 104600, "start": 1061.0, "end": 1064.0, "text": " This is also what Gaby is working on.", "tokens": [51114, 639, 307, 611, 437, 460, 2509, 307, 1364, 322, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2817147396228932, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.08205372840166092}, {"id": 232, "seek": 104600, "start": 1064.0, "end": 1069.0, "text": " Did you consider, I am not sure how F-TracingPerox does it,", "tokens": [51264, 2589, 291, 1949, 11, 286, 669, 406, 988, 577, 479, 12, 14252, 5615, 47, 2032, 87, 775, 309, 11, 51514], "temperature": 0.0, "avg_logprob": -0.2817147396228932, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.08205372840166092}, {"id": 233, "seek": 104600, "start": 1069.0, "end": 1074.0, "text": " but for example, there is something called K-Probes or K-Raid-Probes or something like that,", "tokens": [51514, 457, 337, 1365, 11, 456, 307, 746, 1219, 591, 12, 12681, 6446, 420, 591, 12, 49, 17810, 12, 12681, 6446, 420, 746, 411, 300, 11, 51764], "temperature": 0.0, "avg_logprob": -0.2817147396228932, "compression_ratio": 1.5443548387096775, "no_speech_prob": 0.08205372840166092}, {"id": 234, "seek": 107400, "start": 1074.0, "end": 1081.0, "text": " which is a dynamic way of instrumenting the calls.", "tokens": [50364, 597, 307, 257, 8546, 636, 295, 7198, 278, 264, 5498, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1918215664950284, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.12541444599628448}, {"id": 235, "seek": 107400, "start": 1081.0, "end": 1085.0, "text": " What that does to you is you don't have to have these items done at build time,", "tokens": [50714, 708, 300, 775, 281, 291, 307, 291, 500, 380, 362, 281, 362, 613, 4754, 1096, 412, 1322, 565, 11, 50914], "temperature": 0.0, "avg_logprob": -0.1918215664950284, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.12541444599628448}, {"id": 236, "seek": 107400, "start": 1085.0, "end": 1089.0, "text": " so that means when you want to instrument the application, you can tie in some flags", "tokens": [50914, 370, 300, 1355, 562, 291, 528, 281, 7198, 264, 3861, 11, 291, 393, 7582, 294, 512, 23265, 51114], "temperature": 0.0, "avg_logprob": -0.1918215664950284, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.12541444599628448}, {"id": 237, "seek": 107400, "start": 1089.0, "end": 1096.0, "text": " and then while you execute it, it replaces some sort of function, pro or web, with some sort of jumps.", "tokens": [51114, 293, 550, 1339, 291, 14483, 309, 11, 309, 46734, 512, 1333, 295, 2445, 11, 447, 420, 3670, 11, 365, 512, 1333, 295, 16704, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1918215664950284, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.12541444599628448}, {"id": 238, "seek": 107400, "start": 1096.0, "end": 1097.0, "text": " Interesting.", "tokens": [51464, 14711, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1918215664950284, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.12541444599628448}, {"id": 239, "seek": 107400, "start": 1097.0, "end": 1099.0, "text": " There may be something interesting to look at.", "tokens": [51514, 821, 815, 312, 746, 1880, 281, 574, 412, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1918215664950284, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.12541444599628448}, {"id": 240, "seek": 107400, "start": 1099.0, "end": 1101.0, "text": " We are looking at that on Unicraft's side.", "tokens": [51614, 492, 366, 1237, 412, 300, 322, 1156, 299, 4469, 311, 1252, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1918215664950284, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.12541444599628448}, {"id": 241, "seek": 110100, "start": 1101.0, "end": 1109.0, "text": " Is this like inserting a general hook into every function and then dynamically chain?", "tokens": [50364, 1119, 341, 411, 46567, 257, 2674, 6328, 666, 633, 2445, 293, 550, 43492, 5021, 30, 50764], "temperature": 0.0, "avg_logprob": -0.3229197311401367, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.012193246744573116}, {"id": 242, "seek": 110100, "start": 1109.0, "end": 1111.0, "text": " Gaby knows a bit more about that.", "tokens": [50764, 460, 2509, 3255, 257, 857, 544, 466, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3229197311401367, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.012193246744573116}, {"id": 243, "seek": 110100, "start": 1111.0, "end": 1114.0, "text": " It is a bit of a rewrite of the function for organic load.", "tokens": [50864, 467, 307, 257, 857, 295, 257, 28132, 295, 264, 2445, 337, 10220, 3677, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3229197311401367, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.012193246744573116}, {"id": 244, "seek": 110100, "start": 1114.0, "end": 1121.0, "text": " Basically, you have a function that you want to jump in and then you can do the whole function that you want to jump in.", "tokens": [51014, 8537, 11, 291, 362, 257, 2445, 300, 291, 528, 281, 3012, 294, 293, 550, 291, 393, 360, 264, 1379, 2445, 300, 291, 528, 281, 3012, 294, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3229197311401367, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.012193246744573116}, {"id": 245, "seek": 110100, "start": 1121.0, "end": 1126.0, "text": " Similar to that, just by hand and for some functions only and switchable.", "tokens": [51364, 10905, 281, 300, 11, 445, 538, 1011, 293, 337, 512, 6828, 787, 293, 3679, 712, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3229197311401367, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.012193246744573116}, {"id": 246, "seek": 110100, "start": 1126.0, "end": 1128.0, "text": " Okay, makes sense.", "tokens": [51614, 1033, 11, 1669, 2020, 13, 51714], "temperature": 0.0, "avg_logprob": -0.3229197311401367, "compression_ratio": 1.7268722466960353, "no_speech_prob": 0.012193246744573116}, {"id": 247, "seek": 112800, "start": 1128.0, "end": 1130.0, "text": " Still very cool with the flame graph.", "tokens": [50364, 8291, 588, 1627, 365, 264, 13287, 4295, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1790302716768705, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.1274443119764328}, {"id": 248, "seek": 112800, "start": 1130.0, "end": 1133.0, "text": " I mean, this is the most important item because everyone does profiling,", "tokens": [50464, 286, 914, 11, 341, 307, 264, 881, 1021, 3174, 570, 1518, 775, 1740, 4883, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1790302716768705, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.1274443119764328}, {"id": 249, "seek": 112800, "start": 1133.0, "end": 1138.0, "text": " but having some sort of visual way of determining what's actually being spent, that's really useful.", "tokens": [50614, 457, 1419, 512, 1333, 295, 5056, 636, 295, 23751, 437, 311, 767, 885, 4418, 11, 300, 311, 534, 4420, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1790302716768705, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.1274443119764328}, {"id": 250, "seek": 112800, "start": 1138.0, "end": 1140.0, "text": " Yeah.", "tokens": [50864, 865, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1790302716768705, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.1274443119764328}, {"id": 251, "seek": 112800, "start": 1140.0, "end": 1144.0, "text": " We have to switch to another talk, so Martin will be around for more questions.", "tokens": [50964, 492, 362, 281, 3679, 281, 1071, 751, 11, 370, 9184, 486, 312, 926, 337, 544, 1651, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1790302716768705, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.1274443119764328}, {"id": 252, "seek": 112800, "start": 1144.0, "end": 1145.0, "text": " Thanks again.", "tokens": [51164, 2561, 797, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1790302716768705, "compression_ratio": 1.4669811320754718, "no_speech_prob": 0.1274443119764328}], "language": "en"}