{"text": " I will just slowly start as I will today try to give some kind of brief overview of SPDX tooling. There's a lot out there and I will try to capture some of that, especially the stuff that is inside the SPDX org on GitHub. So I'm max, maybe someone saw me already somewhere, that's my coordinates. Pick me if you have questions. So let's talk about SPDX tooling. I think the first part that I want to go through are the tools that are provided in the SPDX org and I think we all call them tools, but they are all libraries and tools and the first one that we just saw, a wonderful presentation of are the Java tools and I think they are still the most complete and most actively developed library for SPDX. Thanks to Gary, really a great job. And if you are unsure, I think the Java tools are a good starting point. They provide the possibility to implement or to use them low level to implement usage of SPDX in a Java JDK-based project or they provide a set of command line tools or tools that allow you to do some easy tasks like converting between formats and view stuff and generate stuff. So that's always a good starting point. I will be too fast, so there will be time for questions and I went fast through the Java tools as we just saw them. The next set of tools are the Python tools. I think they have a similar structure similar to the Java tools. They are also libraries and CLI tools and so there's a library part. If you have a Python project that you want to generate SPDX, pass SPDX, work with SPDX, they have the possibility or you can use them in your project to interact with SPDX. And similar to Java tools, also the Python tools have the CLI part that provides some common functionality like verifying and validation and converting of documents and files. Maybe a more interesting thing related to the Python tools is where are they with adoption of SPDX3 and the Python tools implement the current state of RC1 of the currently latest release candidate, but that will soon change and it was implemented by hand, not generated from the model. So it's a good starting point if you want to try out SPDX3 and try how it behaves and how it looks like. And it has functionality that if you start with an SPDX2 document, it bumps that to an SPDX3 document. So if you want to experiment with SPDX3, you could also use that to take an SPDX2 document and just convert it to SPDX3 and look at how it looks like. It has an implementation of the JSON-LD civilization so you can also see how the serialized format looks. And what's next with that? I think the big change that is up on the horizon is to migrate that manually wrote written model to an automatically generated model like we have seen in Gary's presentation. We also want to use the shackle as an input and get the model as an output to have, to don't make errors. The next, a pretty new part of the ecosystem that is provided in this GitHub org is the TypeScript tools. They are called TypeScript since they are written in TypeScript, but they actually work also with JavaScript and there's a pretty generic build system behind that so that it should work in every related ecosystem. What's different to the previous libraries here is that they are not trying to be the complete universal tool that can do everything and that can convert in every direction, but instead they are built with a use case in mind like I want to generate a software build of material of a dependency tree so they do not yet fully implement SPDX. They do not, they can't pass files. They are very small in lightweight to generate SPDX documents which is fairly helpful especially in the JavaScript ecosystem where small libraries are usually preferred and based on that there are already two plugins implemented. For example, there's a yarn plugin that allows you with two lines of code to generate a software build of material of a yarn project and that's, so one line is please install that plugin and the second line is please generate an S-Bomb and then you have an S-Bomb and the second thing is plugin for rollup. Rollup is one of these build tools in the JavaScript ecosystem that builds a single JavaScript file from a lot of files and here we use SPDX to encode which files from the source site went into the output so that you have traceability on the build process. So that's the second current plugin that is also on GitHub and just as a side note to mention it also the MPM tool recently got native support for S-Bomb generation for SPDX and CDX. That's why we didn't bother to to implement it there but maybe at some point we can get them to use the SPDX library and therefore they might get SPX free support at some point automatically. The last big library in the SPDX arc are the tools for Go. They are modular, they have a lot of the same functionality. I'm not very deep into Go development. There are probably other people that can answer the questions there but we also have tooling in Go. So that was the first part of tools from the tool overview. The next thing is there's also SPX free meta tooling. As we heard in the previous presentation there's a tool that takes the spec and generates machine readable output that can be used and Joshua wrote something that takes one of these outputs, the shackle, and already generates Python code from that. So there's already the first building block to generate code out of the model and it's with templating and it's generic so hopefully it will be soon expanded with a lot of other programming languages and that might be a very valuable tool in the future. And there are also other projects as you can imagine. That's a huge list. There's a page where tools supporting SPDX are listed. I think I copied it rather complete but I think I missed some of them. If you don't see yourself there, check on that list if you have a tool that supports SPDX and I think on the page there's also described how you can add yourself to this list. Maybe. Yeah and that's it. That's tooling and that's questions. Hi. So I'm working on a project called Z-Hypervisor and it's based on a C and it uses C, YAML, RST. I want to understand from a new view perspective that how do I make the project compatible with SPDX B.O overnight? Where do I start and what changes do I need to do? Okay so you're working on Z-Hypervisor and you want to know how to generate SPDX for this project and it's a C project. It's a C-Bus project so there is a hypervisor, there are tools and there are some documents. I want to know how to generate SPDX. How to make it compatible? I think that depends a lot on which build systems, what is happening in the build and how can you trace what's happening. Is it hardcoded somewhere? Is it C-Make or I don't know. And then you need to look for the right tools that can extract that information and maybe I think there's for example you could place if they're. Zephyr has. I need to repeat that answer. The Zephyr repository contains user C-Make and can produce SPDX so that might be a good point to look at. I also say right now it's 2.3 but we will be moving into 3.0. Right now it's 2.3 but it will be moving to 3.0. There are a bit different flavors of S-Bombs from just source files all the way to runtime and how many of the tools are supporting all the different types of S-Bombs. The question is there are many many different format or different S-Bombs types like runtime, build and so on and how many tools are supporting the different formats. I think my good position is that all these libraries are fairly generic. They are what you use in a tool that would generate a build S-Bombs or would generate a runtime S-Bombs. So it's a tooling question or usage question but I think it's there are many tools that are doing one or the other of the formats.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.72, "text": " I will just slowly start as I will today try to give some kind of brief overview of", "tokens": [50364, 286, 486, 445, 5692, 722, 382, 286, 486, 965, 853, 281, 976, 512, 733, 295, 5353, 12492, 295, 51100], "temperature": 0.0, "avg_logprob": -0.2823421136656804, "compression_ratio": 1.4397590361445782, "no_speech_prob": 0.2947281002998352}, {"id": 1, "seek": 0, "start": 14.72, "end": 20.96, "text": " SPDX tooling. There's a lot out there and I will try to capture some of that,", "tokens": [51100, 8420, 35, 55, 46593, 13, 821, 311, 257, 688, 484, 456, 293, 286, 486, 853, 281, 7983, 512, 295, 300, 11, 51412], "temperature": 0.0, "avg_logprob": -0.2823421136656804, "compression_ratio": 1.4397590361445782, "no_speech_prob": 0.2947281002998352}, {"id": 2, "seek": 0, "start": 20.96, "end": 29.16, "text": " especially the stuff that is inside the SPDX org on GitHub. So I'm max, maybe", "tokens": [51412, 2318, 264, 1507, 300, 307, 1854, 264, 8420, 35, 55, 14045, 322, 23331, 13, 407, 286, 478, 11469, 11, 1310, 51822], "temperature": 0.0, "avg_logprob": -0.2823421136656804, "compression_ratio": 1.4397590361445782, "no_speech_prob": 0.2947281002998352}, {"id": 3, "seek": 2916, "start": 29.16, "end": 35.56, "text": " someone saw me already somewhere, that's my coordinates. Pick me if you have questions.", "tokens": [50364, 1580, 1866, 385, 1217, 4079, 11, 300, 311, 452, 21056, 13, 14129, 385, 498, 291, 362, 1651, 13, 50684], "temperature": 0.0, "avg_logprob": -0.17238966134878306, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.031514231115579605}, {"id": 4, "seek": 2916, "start": 35.56, "end": 46.480000000000004, "text": " So let's talk about SPDX tooling. I think the first part that I want to go", "tokens": [50684, 407, 718, 311, 751, 466, 8420, 35, 55, 46593, 13, 286, 519, 264, 700, 644, 300, 286, 528, 281, 352, 51230], "temperature": 0.0, "avg_logprob": -0.17238966134878306, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.031514231115579605}, {"id": 5, "seek": 2916, "start": 46.480000000000004, "end": 54.96, "text": " through are the tools that are provided in the SPDX org and I think we all call", "tokens": [51230, 807, 366, 264, 3873, 300, 366, 5649, 294, 264, 8420, 35, 55, 14045, 293, 286, 519, 321, 439, 818, 51654], "temperature": 0.0, "avg_logprob": -0.17238966134878306, "compression_ratio": 1.4491017964071857, "no_speech_prob": 0.031514231115579605}, {"id": 6, "seek": 5496, "start": 54.96, "end": 60.4, "text": " them tools, but they are all libraries and tools and the first one that we just saw,", "tokens": [50364, 552, 3873, 11, 457, 436, 366, 439, 15148, 293, 3873, 293, 264, 700, 472, 300, 321, 445, 1866, 11, 50636], "temperature": 0.0, "avg_logprob": -0.24673684438069662, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.19741427898406982}, {"id": 7, "seek": 5496, "start": 60.4, "end": 68.44, "text": " a wonderful presentation of are the Java tools and I think they are still the most", "tokens": [50636, 257, 3715, 5860, 295, 366, 264, 10745, 3873, 293, 286, 519, 436, 366, 920, 264, 881, 51038], "temperature": 0.0, "avg_logprob": -0.24673684438069662, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.19741427898406982}, {"id": 8, "seek": 5496, "start": 68.44, "end": 77.8, "text": " complete and most actively developed library for SPDX. Thanks to Gary, really a great job.", "tokens": [51038, 3566, 293, 881, 13022, 4743, 6405, 337, 8420, 35, 55, 13, 2561, 281, 13788, 11, 534, 257, 869, 1691, 13, 51506], "temperature": 0.0, "avg_logprob": -0.24673684438069662, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.19741427898406982}, {"id": 9, "seek": 7780, "start": 77.8, "end": 89.56, "text": " And if you are unsure, I think the Java tools are a good starting point. They provide the", "tokens": [50364, 400, 498, 291, 366, 32486, 11, 286, 519, 264, 10745, 3873, 366, 257, 665, 2891, 935, 13, 814, 2893, 264, 50952], "temperature": 0.0, "avg_logprob": -0.20766634180925894, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.07978310436010361}, {"id": 10, "seek": 7780, "start": 89.56, "end": 96.92, "text": " possibility to implement or to use them low level to implement usage of SPDX in a Java", "tokens": [50952, 7959, 281, 4445, 420, 281, 764, 552, 2295, 1496, 281, 4445, 14924, 295, 8420, 35, 55, 294, 257, 10745, 51320], "temperature": 0.0, "avg_logprob": -0.20766634180925894, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.07978310436010361}, {"id": 11, "seek": 7780, "start": 96.92, "end": 106.0, "text": " JDK-based project or they provide a set of command line tools or tools that allow you to do some", "tokens": [51320, 37082, 42, 12, 6032, 1716, 420, 436, 2893, 257, 992, 295, 5622, 1622, 3873, 420, 3873, 300, 2089, 291, 281, 360, 512, 51774], "temperature": 0.0, "avg_logprob": -0.20766634180925894, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.07978310436010361}, {"id": 12, "seek": 10600, "start": 106.2, "end": 114.56, "text": " easy tasks like converting between formats and view stuff and generate stuff. So that's always a good", "tokens": [50374, 1858, 9608, 411, 29942, 1296, 25879, 293, 1910, 1507, 293, 8460, 1507, 13, 407, 300, 311, 1009, 257, 665, 50792], "temperature": 0.0, "avg_logprob": -0.22259767850240073, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.01146181020885706}, {"id": 13, "seek": 10600, "start": 114.56, "end": 124.52, "text": " starting point. I will be too fast, so there will be time for questions and I went fast through the", "tokens": [50792, 2891, 935, 13, 286, 486, 312, 886, 2370, 11, 370, 456, 486, 312, 565, 337, 1651, 293, 286, 1437, 2370, 807, 264, 51290], "temperature": 0.0, "avg_logprob": -0.22259767850240073, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.01146181020885706}, {"id": 14, "seek": 10600, "start": 124.52, "end": 132.04, "text": " Java tools as we just saw them. The next set of tools are the Python tools. I think they have a", "tokens": [51290, 10745, 3873, 382, 321, 445, 1866, 552, 13, 440, 958, 992, 295, 3873, 366, 264, 15329, 3873, 13, 286, 519, 436, 362, 257, 51666], "temperature": 0.0, "avg_logprob": -0.22259767850240073, "compression_ratio": 1.5549738219895288, "no_speech_prob": 0.01146181020885706}, {"id": 15, "seek": 13204, "start": 132.07999999999998, "end": 142.39999999999998, "text": " similar structure similar to the Java tools. They are also libraries and CLI tools and so", "tokens": [50366, 2531, 3877, 2531, 281, 264, 10745, 3873, 13, 814, 366, 611, 15148, 293, 12855, 40, 3873, 293, 370, 50882], "temperature": 0.0, "avg_logprob": -0.19688855785213105, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.00828978419303894}, {"id": 16, "seek": 13204, "start": 142.39999999999998, "end": 149.48, "text": " there's a library part. If you have a Python project that you want to generate SPDX, pass", "tokens": [50882, 456, 311, 257, 6405, 644, 13, 759, 291, 362, 257, 15329, 1716, 300, 291, 528, 281, 8460, 8420, 35, 55, 11, 1320, 51236], "temperature": 0.0, "avg_logprob": -0.19688855785213105, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.00828978419303894}, {"id": 17, "seek": 13204, "start": 149.48, "end": 160.76, "text": " SPDX, work with SPDX, they have the possibility or you can use them in your project to interact with", "tokens": [51236, 8420, 35, 55, 11, 589, 365, 8420, 35, 55, 11, 436, 362, 264, 7959, 420, 291, 393, 764, 552, 294, 428, 1716, 281, 4648, 365, 51800], "temperature": 0.0, "avg_logprob": -0.19688855785213105, "compression_ratio": 1.5469613259668509, "no_speech_prob": 0.00828978419303894}, {"id": 18, "seek": 16076, "start": 160.84, "end": 171.64, "text": " SPDX. And similar to Java tools, also the Python tools have the CLI part that provides some common", "tokens": [50368, 8420, 35, 55, 13, 400, 2531, 281, 10745, 3873, 11, 611, 264, 15329, 3873, 362, 264, 12855, 40, 644, 300, 6417, 512, 2689, 50908], "temperature": 0.0, "avg_logprob": -0.17706129286024305, "compression_ratio": 1.3197278911564625, "no_speech_prob": 0.009245490655303001}, {"id": 19, "seek": 16076, "start": 171.64, "end": 182.12, "text": " functionality like verifying and validation and converting of documents and files. Maybe a more", "tokens": [50908, 14980, 411, 1306, 5489, 293, 24071, 293, 29942, 295, 8512, 293, 7098, 13, 2704, 257, 544, 51432], "temperature": 0.0, "avg_logprob": -0.17706129286024305, "compression_ratio": 1.3197278911564625, "no_speech_prob": 0.009245490655303001}, {"id": 20, "seek": 18212, "start": 182.52, "end": 191.72, "text": " interesting thing related to the Python tools is where are they with adoption of SPDX3 and the", "tokens": [50384, 1880, 551, 4077, 281, 264, 15329, 3873, 307, 689, 366, 436, 365, 19215, 295, 8420, 35, 55, 18, 293, 264, 50844], "temperature": 0.0, "avg_logprob": -0.21125217045054717, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.02476634830236435}, {"id": 21, "seek": 18212, "start": 191.72, "end": 201.8, "text": " Python tools implement the current state of RC1 of the currently latest release candidate, but that", "tokens": [50844, 15329, 3873, 4445, 264, 2190, 1785, 295, 28987, 16, 295, 264, 4362, 6792, 4374, 11532, 11, 457, 300, 51348], "temperature": 0.0, "avg_logprob": -0.21125217045054717, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.02476634830236435}, {"id": 22, "seek": 18212, "start": 201.8, "end": 210.52, "text": " will soon change and it was implemented by hand, not generated from the model. So it's a good starting", "tokens": [51348, 486, 2321, 1319, 293, 309, 390, 12270, 538, 1011, 11, 406, 10833, 490, 264, 2316, 13, 407, 309, 311, 257, 665, 2891, 51784], "temperature": 0.0, "avg_logprob": -0.21125217045054717, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.02476634830236435}, {"id": 23, "seek": 21052, "start": 210.60000000000002, "end": 220.36, "text": " point if you want to try out SPDX3 and try how it behaves and how it looks like. And it has", "tokens": [50368, 935, 498, 291, 528, 281, 853, 484, 8420, 35, 55, 18, 293, 853, 577, 309, 36896, 293, 577, 309, 1542, 411, 13, 400, 309, 575, 50856], "temperature": 0.0, "avg_logprob": -0.1076521701123341, "compression_ratio": 1.6848484848484848, "no_speech_prob": 0.05242549628019333}, {"id": 24, "seek": 21052, "start": 221.0, "end": 227.08, "text": " functionality that if you start with an SPDX2 document, it bumps that to an SPDX3 document. So", "tokens": [50888, 14980, 300, 498, 291, 722, 365, 364, 8420, 35, 55, 17, 4166, 11, 309, 27719, 300, 281, 364, 8420, 35, 55, 18, 4166, 13, 407, 51192], "temperature": 0.0, "avg_logprob": -0.1076521701123341, "compression_ratio": 1.6848484848484848, "no_speech_prob": 0.05242549628019333}, {"id": 25, "seek": 21052, "start": 227.64000000000001, "end": 235.24, "text": " if you want to experiment with SPDX3, you could also use that to take an SPDX2 document and", "tokens": [51220, 498, 291, 528, 281, 5120, 365, 8420, 35, 55, 18, 11, 291, 727, 611, 764, 300, 281, 747, 364, 8420, 35, 55, 17, 4166, 293, 51600], "temperature": 0.0, "avg_logprob": -0.1076521701123341, "compression_ratio": 1.6848484848484848, "no_speech_prob": 0.05242549628019333}, {"id": 26, "seek": 23524, "start": 235.24, "end": 242.28, "text": " just convert it to SPDX3 and look at how it looks like. It has an implementation of the", "tokens": [50364, 445, 7620, 309, 281, 8420, 35, 55, 18, 293, 574, 412, 577, 309, 1542, 411, 13, 467, 575, 364, 11420, 295, 264, 50716], "temperature": 0.0, "avg_logprob": -0.09898929034962374, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.006274562329053879}, {"id": 27, "seek": 23524, "start": 242.28, "end": 246.36, "text": " JSON-LD civilization so you can also see how the serialized format looks.", "tokens": [50716, 31828, 12, 23704, 18036, 370, 291, 393, 611, 536, 577, 264, 17436, 1602, 7877, 1542, 13, 50920], "temperature": 0.0, "avg_logprob": -0.09898929034962374, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.006274562329053879}, {"id": 28, "seek": 23524, "start": 248.92000000000002, "end": 258.76, "text": " And what's next with that? I think the big change that is up on the horizon is to migrate that", "tokens": [51048, 400, 437, 311, 958, 365, 300, 30, 286, 519, 264, 955, 1319, 300, 307, 493, 322, 264, 18046, 307, 281, 31821, 300, 51540], "temperature": 0.0, "avg_logprob": -0.09898929034962374, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.006274562329053879}, {"id": 29, "seek": 25876, "start": 259.32, "end": 269.0, "text": " manually wrote written model to an automatically generated model like we have seen in Gary's", "tokens": [50392, 16945, 4114, 3720, 2316, 281, 364, 6772, 10833, 2316, 411, 321, 362, 1612, 294, 13788, 311, 50876], "temperature": 0.0, "avg_logprob": -0.16351019541422526, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.009388339705765247}, {"id": 30, "seek": 25876, "start": 269.0, "end": 279.56, "text": " presentation. We also want to use the shackle as an input and get the model as an output to have,", "tokens": [50876, 5860, 13, 492, 611, 528, 281, 764, 264, 40369, 306, 382, 364, 4846, 293, 483, 264, 2316, 382, 364, 5598, 281, 362, 11, 51404], "temperature": 0.0, "avg_logprob": -0.16351019541422526, "compression_ratio": 1.4285714285714286, "no_speech_prob": 0.009388339705765247}, {"id": 31, "seek": 27956, "start": 279.56, "end": 291.32, "text": " to don't make errors. The next, a pretty new part of the ecosystem that is provided in this", "tokens": [50364, 281, 500, 380, 652, 13603, 13, 440, 958, 11, 257, 1238, 777, 644, 295, 264, 11311, 300, 307, 5649, 294, 341, 50952], "temperature": 0.0, "avg_logprob": -0.1376280271089994, "compression_ratio": 1.5977011494252873, "no_speech_prob": 0.015879308804869652}, {"id": 32, "seek": 27956, "start": 291.32, "end": 297.0, "text": " GitHub org is the TypeScript tools. They are called TypeScript since they are written in TypeScript,", "tokens": [50952, 23331, 14045, 307, 264, 15576, 14237, 3873, 13, 814, 366, 1219, 15576, 14237, 1670, 436, 366, 3720, 294, 15576, 14237, 11, 51236], "temperature": 0.0, "avg_logprob": -0.1376280271089994, "compression_ratio": 1.5977011494252873, "no_speech_prob": 0.015879308804869652}, {"id": 33, "seek": 27956, "start": 297.0, "end": 304.28, "text": " but they actually work also with JavaScript and there's a pretty generic build system", "tokens": [51236, 457, 436, 767, 589, 611, 365, 15778, 293, 456, 311, 257, 1238, 19577, 1322, 1185, 51600], "temperature": 0.0, "avg_logprob": -0.1376280271089994, "compression_ratio": 1.5977011494252873, "no_speech_prob": 0.015879308804869652}, {"id": 34, "seek": 30428, "start": 304.28, "end": 308.67999999999995, "text": " behind that so that it should work in every related ecosystem.", "tokens": [50364, 2261, 300, 370, 300, 309, 820, 589, 294, 633, 4077, 11311, 13, 50584], "temperature": 0.0, "avg_logprob": -0.07595237663814, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.007104003801941872}, {"id": 35, "seek": 30428, "start": 311.47999999999996, "end": 319.47999999999996, "text": " What's different to the previous libraries here is that they are not trying to be the complete", "tokens": [50724, 708, 311, 819, 281, 264, 3894, 15148, 510, 307, 300, 436, 366, 406, 1382, 281, 312, 264, 3566, 51124], "temperature": 0.0, "avg_logprob": -0.07595237663814, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.007104003801941872}, {"id": 36, "seek": 30428, "start": 319.47999999999996, "end": 326.76, "text": " universal tool that can do everything and that can convert in every direction, but instead they are", "tokens": [51124, 11455, 2290, 300, 393, 360, 1203, 293, 300, 393, 7620, 294, 633, 3513, 11, 457, 2602, 436, 366, 51488], "temperature": 0.0, "avg_logprob": -0.07595237663814, "compression_ratio": 1.5962732919254659, "no_speech_prob": 0.007104003801941872}, {"id": 37, "seek": 32676, "start": 327.48, "end": 334.12, "text": " built with a use case in mind like I want to generate a software build of material of a", "tokens": [50400, 3094, 365, 257, 764, 1389, 294, 1575, 411, 286, 528, 281, 8460, 257, 4722, 1322, 295, 2527, 295, 257, 50732], "temperature": 0.0, "avg_logprob": -0.16809503582940585, "compression_ratio": 1.5106382978723405, "no_speech_prob": 0.023650571703910828}, {"id": 38, "seek": 32676, "start": 334.12, "end": 345.08, "text": " dependency tree so they do not yet fully implement SPDX. They do not, they can't pass files. They are", "tokens": [50732, 33621, 4230, 370, 436, 360, 406, 1939, 4498, 4445, 8420, 35, 55, 13, 814, 360, 406, 11, 436, 393, 380, 1320, 7098, 13, 814, 366, 51280], "temperature": 0.0, "avg_logprob": -0.16809503582940585, "compression_ratio": 1.5106382978723405, "no_speech_prob": 0.023650571703910828}, {"id": 39, "seek": 32676, "start": 345.96, "end": 351.71999999999997, "text": " very small in lightweight to generate SPDX documents which is fairly helpful especially in the", "tokens": [51324, 588, 1359, 294, 22052, 281, 8460, 8420, 35, 55, 8512, 597, 307, 6457, 4961, 2318, 294, 264, 51612], "temperature": 0.0, "avg_logprob": -0.16809503582940585, "compression_ratio": 1.5106382978723405, "no_speech_prob": 0.023650571703910828}, {"id": 40, "seek": 35172, "start": 352.28000000000003, "end": 358.84000000000003, "text": " JavaScript ecosystem where small libraries are usually preferred and based on that", "tokens": [50392, 15778, 11311, 689, 1359, 15148, 366, 2673, 16494, 293, 2361, 322, 300, 50720], "temperature": 0.0, "avg_logprob": -0.1316244727686832, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.00700300931930542}, {"id": 41, "seek": 35172, "start": 359.64000000000004, "end": 367.0, "text": " there are already two plugins implemented. For example, there's a yarn plugin that allows you", "tokens": [50760, 456, 366, 1217, 732, 33759, 12270, 13, 1171, 1365, 11, 456, 311, 257, 11400, 23407, 300, 4045, 291, 51128], "temperature": 0.0, "avg_logprob": -0.1316244727686832, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.00700300931930542}, {"id": 42, "seek": 35172, "start": 367.0, "end": 373.88000000000005, "text": " with two lines of code to generate a software build of material of a yarn project and that's,", "tokens": [51128, 365, 732, 3876, 295, 3089, 281, 8460, 257, 4722, 1322, 295, 2527, 295, 257, 11400, 1716, 293, 300, 311, 11, 51472], "temperature": 0.0, "avg_logprob": -0.1316244727686832, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.00700300931930542}, {"id": 43, "seek": 35172, "start": 373.88000000000005, "end": 378.76000000000005, "text": " so one line is please install that plugin and the second line is please generate an", "tokens": [51472, 370, 472, 1622, 307, 1767, 3625, 300, 23407, 293, 264, 1150, 1622, 307, 1767, 8460, 364, 51716], "temperature": 0.0, "avg_logprob": -0.1316244727686832, "compression_ratio": 1.6388888888888888, "no_speech_prob": 0.00700300931930542}, {"id": 44, "seek": 37876, "start": 378.76, "end": 389.15999999999997, "text": " S-Bomb and then you have an S-Bomb and the second thing is plugin for rollup. Rollup is", "tokens": [50364, 318, 12, 33, 3548, 293, 550, 291, 362, 364, 318, 12, 33, 3548, 293, 264, 1150, 551, 307, 23407, 337, 3373, 1010, 13, 9926, 1010, 307, 50884], "temperature": 0.0, "avg_logprob": -0.11292578468860036, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.004190817009657621}, {"id": 45, "seek": 37876, "start": 389.15999999999997, "end": 395.08, "text": " one of these build tools in the JavaScript ecosystem that builds a single JavaScript", "tokens": [50884, 472, 295, 613, 1322, 3873, 294, 264, 15778, 11311, 300, 15182, 257, 2167, 15778, 51180], "temperature": 0.0, "avg_logprob": -0.11292578468860036, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.004190817009657621}, {"id": 46, "seek": 37876, "start": 395.08, "end": 404.59999999999997, "text": " file from a lot of files and here we use SPDX to encode which files from the source site went", "tokens": [51180, 3991, 490, 257, 688, 295, 7098, 293, 510, 321, 764, 8420, 35, 55, 281, 2058, 1429, 597, 7098, 490, 264, 4009, 3621, 1437, 51656], "temperature": 0.0, "avg_logprob": -0.11292578468860036, "compression_ratio": 1.5739644970414202, "no_speech_prob": 0.004190817009657621}, {"id": 47, "seek": 40460, "start": 404.6, "end": 411.16, "text": " into the output so that you have traceability on the build process. So that's the second current", "tokens": [50364, 666, 264, 5598, 370, 300, 291, 362, 13508, 2310, 322, 264, 1322, 1399, 13, 407, 300, 311, 264, 1150, 2190, 50692], "temperature": 0.0, "avg_logprob": -0.12867642737723686, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.021551981568336487}, {"id": 48, "seek": 40460, "start": 412.44, "end": 419.16, "text": " plugin that is also on GitHub and just as a side note to mention it also the MPM tool", "tokens": [50756, 23407, 300, 307, 611, 322, 23331, 293, 445, 382, 257, 1252, 3637, 281, 2152, 309, 611, 264, 14146, 44, 2290, 51092], "temperature": 0.0, "avg_logprob": -0.12867642737723686, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.021551981568336487}, {"id": 49, "seek": 40460, "start": 420.12, "end": 428.84000000000003, "text": " recently got native support for S-Bomb generation for SPDX and CDX. That's why we didn't bother to", "tokens": [51140, 3938, 658, 8470, 1406, 337, 318, 12, 33, 3548, 5125, 337, 8420, 35, 55, 293, 6743, 55, 13, 663, 311, 983, 321, 994, 380, 8677, 281, 51576], "temperature": 0.0, "avg_logprob": -0.12867642737723686, "compression_ratio": 1.455958549222798, "no_speech_prob": 0.021551981568336487}, {"id": 50, "seek": 42884, "start": 429.79999999999995, "end": 436.84, "text": " to implement it there but maybe at some point we can get them to use the SPDX library and therefore", "tokens": [50412, 281, 4445, 309, 456, 457, 1310, 412, 512, 935, 321, 393, 483, 552, 281, 764, 264, 8420, 35, 55, 6405, 293, 4412, 50764], "temperature": 0.0, "avg_logprob": -0.1364592794162124, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.012033708393573761}, {"id": 51, "seek": 42884, "start": 436.84, "end": 440.35999999999996, "text": " they might get SPX free support at some point automatically.", "tokens": [50764, 436, 1062, 483, 8420, 55, 1737, 1406, 412, 512, 935, 6772, 13, 50940], "temperature": 0.0, "avg_logprob": -0.1364592794162124, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.012033708393573761}, {"id": 52, "seek": 42884, "start": 444.28, "end": 453.88, "text": " The last big library in the SPDX arc are the tools for Go. They are modular, they have a lot of", "tokens": [51136, 440, 1036, 955, 6405, 294, 264, 8420, 35, 55, 10346, 366, 264, 3873, 337, 1037, 13, 814, 366, 31111, 11, 436, 362, 257, 688, 295, 51616], "temperature": 0.0, "avg_logprob": -0.1364592794162124, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.012033708393573761}, {"id": 53, "seek": 45388, "start": 453.88, "end": 460.6, "text": " the same functionality. I'm not very deep into Go development. There are probably other people", "tokens": [50364, 264, 912, 14980, 13, 286, 478, 406, 588, 2452, 666, 1037, 3250, 13, 821, 366, 1391, 661, 561, 50700], "temperature": 0.0, "avg_logprob": -0.11281372844309047, "compression_ratio": 1.5078534031413613, "no_speech_prob": 0.013805197551846504}, {"id": 54, "seek": 45388, "start": 460.6, "end": 470.92, "text": " that can answer the questions there but we also have tooling in Go. So that was the first part of", "tokens": [50700, 300, 393, 1867, 264, 1651, 456, 457, 321, 611, 362, 46593, 294, 1037, 13, 407, 300, 390, 264, 700, 644, 295, 51216], "temperature": 0.0, "avg_logprob": -0.11281372844309047, "compression_ratio": 1.5078534031413613, "no_speech_prob": 0.013805197551846504}, {"id": 55, "seek": 45388, "start": 470.92, "end": 480.6, "text": " tools from the tool overview. The next thing is there's also SPX free meta tooling. As we heard", "tokens": [51216, 3873, 490, 264, 2290, 12492, 13, 440, 958, 551, 307, 456, 311, 611, 8420, 55, 1737, 19616, 46593, 13, 1018, 321, 2198, 51700], "temperature": 0.0, "avg_logprob": -0.11281372844309047, "compression_ratio": 1.5078534031413613, "no_speech_prob": 0.013805197551846504}, {"id": 56, "seek": 48060, "start": 480.6, "end": 486.44, "text": " in the previous presentation there's a tool that takes the spec and generates machine readable", "tokens": [50364, 294, 264, 3894, 5860, 456, 311, 257, 2290, 300, 2516, 264, 1608, 293, 23815, 3479, 49857, 50656], "temperature": 0.0, "avg_logprob": -0.14134984993072877, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.01661970652639866}, {"id": 57, "seek": 48060, "start": 486.44, "end": 496.12, "text": " output that can be used and Joshua wrote something that takes one of these outputs, the shackle,", "tokens": [50656, 5598, 300, 393, 312, 1143, 293, 24005, 4114, 746, 300, 2516, 472, 295, 613, 23930, 11, 264, 40369, 306, 11, 51140], "temperature": 0.0, "avg_logprob": -0.14134984993072877, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.01661970652639866}, {"id": 58, "seek": 48060, "start": 496.12, "end": 504.44, "text": " and already generates Python code from that. So there's already the first building block to", "tokens": [51140, 293, 1217, 23815, 15329, 3089, 490, 300, 13, 407, 456, 311, 1217, 264, 700, 2390, 3461, 281, 51556], "temperature": 0.0, "avg_logprob": -0.14134984993072877, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.01661970652639866}, {"id": 59, "seek": 48060, "start": 504.44, "end": 510.28000000000003, "text": " generate code out of the model and it's with templating and it's generic so hopefully it will", "tokens": [51556, 8460, 3089, 484, 295, 264, 2316, 293, 309, 311, 365, 9100, 990, 293, 309, 311, 19577, 370, 4696, 309, 486, 51848], "temperature": 0.0, "avg_logprob": -0.14134984993072877, "compression_ratio": 1.7453703703703705, "no_speech_prob": 0.01661970652639866}, {"id": 60, "seek": 51028, "start": 510.28, "end": 516.04, "text": " be soon expanded with a lot of other programming languages and that might be a very valuable tool", "tokens": [50364, 312, 2321, 14342, 365, 257, 688, 295, 661, 9410, 8650, 293, 300, 1062, 312, 257, 588, 8263, 2290, 50652], "temperature": 0.0, "avg_logprob": -0.12621047156197684, "compression_ratio": 1.4744897959183674, "no_speech_prob": 0.0015694467583671212}, {"id": 61, "seek": 51028, "start": 516.04, "end": 525.9599999999999, "text": " in the future. And there are also other projects as you can imagine. That's a huge list. There's a", "tokens": [50652, 294, 264, 2027, 13, 400, 456, 366, 611, 661, 4455, 382, 291, 393, 3811, 13, 663, 311, 257, 2603, 1329, 13, 821, 311, 257, 51148], "temperature": 0.0, "avg_logprob": -0.12621047156197684, "compression_ratio": 1.4744897959183674, "no_speech_prob": 0.0015694467583671212}, {"id": 62, "seek": 51028, "start": 527.9599999999999, "end": 536.12, "text": " page where tools supporting SPDX are listed. I think I copied it rather complete but I think", "tokens": [51248, 3028, 689, 3873, 7231, 8420, 35, 55, 366, 10052, 13, 286, 519, 286, 25365, 309, 2831, 3566, 457, 286, 519, 51656], "temperature": 0.0, "avg_logprob": -0.12621047156197684, "compression_ratio": 1.4744897959183674, "no_speech_prob": 0.0015694467583671212}, {"id": 63, "seek": 53612, "start": 536.12, "end": 542.2, "text": " I missed some of them. If you don't see yourself there, check on that list if you have a tool that", "tokens": [50364, 286, 6721, 512, 295, 552, 13, 759, 291, 500, 380, 536, 1803, 456, 11, 1520, 322, 300, 1329, 498, 291, 362, 257, 2290, 300, 50668], "temperature": 0.0, "avg_logprob": -0.15770388321137765, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.02057468518614769}, {"id": 64, "seek": 53612, "start": 542.2, "end": 549.24, "text": " supports SPDX and I think on the page there's also described how you can add yourself to this list.", "tokens": [50668, 9346, 8420, 35, 55, 293, 286, 519, 322, 264, 3028, 456, 311, 611, 7619, 577, 291, 393, 909, 1803, 281, 341, 1329, 13, 51020], "temperature": 0.0, "avg_logprob": -0.15770388321137765, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.02057468518614769}, {"id": 65, "seek": 53612, "start": 555.0, "end": 559.96, "text": " Maybe. Yeah and that's it. That's tooling and that's questions.", "tokens": [51308, 2704, 13, 865, 293, 300, 311, 309, 13, 663, 311, 46593, 293, 300, 311, 1651, 13, 51556], "temperature": 0.0, "avg_logprob": -0.15770388321137765, "compression_ratio": 1.5411764705882354, "no_speech_prob": 0.02057468518614769}, {"id": 66, "seek": 55996, "start": 560.9200000000001, "end": 573.32, "text": " Hi. So I'm working on a project called Z-Hypervisor and it's based on a C and it uses C, YAML,", "tokens": [50412, 2421, 13, 407, 286, 478, 1364, 322, 257, 1716, 1219, 1176, 12, 38792, 610, 16457, 293, 309, 311, 2361, 322, 257, 383, 293, 309, 4960, 383, 11, 398, 2865, 43, 11, 51032], "temperature": 0.0, "avg_logprob": -0.3753037158353829, "compression_ratio": 1.3366834170854272, "no_speech_prob": 0.013819970190525055}, {"id": 67, "seek": 55996, "start": 573.32, "end": 578.36, "text": " RST. I want to understand from a new view perspective that how do I make the project", "tokens": [51032, 497, 6840, 13, 286, 528, 281, 1223, 490, 257, 777, 1910, 4585, 300, 577, 360, 286, 652, 264, 1716, 51284], "temperature": 0.0, "avg_logprob": -0.3753037158353829, "compression_ratio": 1.3366834170854272, "no_speech_prob": 0.013819970190525055}, {"id": 68, "seek": 55996, "start": 578.36, "end": 585.24, "text": " compatible with SPDX B.O overnight? Where do I start and what changes do I need to do?", "tokens": [51284, 18218, 365, 8420, 35, 55, 363, 13, 46, 13935, 30, 2305, 360, 286, 722, 293, 437, 2962, 360, 286, 643, 281, 360, 30, 51628], "temperature": 0.0, "avg_logprob": -0.3753037158353829, "compression_ratio": 1.3366834170854272, "no_speech_prob": 0.013819970190525055}, {"id": 69, "seek": 58524, "start": 586.2, "end": 592.6800000000001, "text": " Okay so you're working on Z-Hypervisor and you want to know how to", "tokens": [50412, 1033, 370, 291, 434, 1364, 322, 1176, 12, 38792, 610, 16457, 293, 291, 528, 281, 458, 577, 281, 50736], "temperature": 0.0, "avg_logprob": -0.21062264959496188, "compression_ratio": 1.6331360946745561, "no_speech_prob": 0.008538078516721725}, {"id": 70, "seek": 58524, "start": 593.4, "end": 599.0, "text": " generate SPDX for this project and it's a C project.", "tokens": [50772, 8460, 8420, 35, 55, 337, 341, 1716, 293, 309, 311, 257, 383, 1716, 13, 51052], "temperature": 0.0, "avg_logprob": -0.21062264959496188, "compression_ratio": 1.6331360946745561, "no_speech_prob": 0.008538078516721725}, {"id": 71, "seek": 58524, "start": 599.0, "end": 603.72, "text": " It's a C-Bus project so there is a hypervisor, there are tools and there are some documents.", "tokens": [51052, 467, 311, 257, 383, 12, 33, 301, 1716, 370, 456, 307, 257, 9848, 16457, 11, 456, 366, 3873, 293, 456, 366, 512, 8512, 13, 51288], "temperature": 0.0, "avg_logprob": -0.21062264959496188, "compression_ratio": 1.6331360946745561, "no_speech_prob": 0.008538078516721725}, {"id": 72, "seek": 58524, "start": 603.72, "end": 608.36, "text": " I want to know how to generate SPDX. How to make it compatible?", "tokens": [51288, 286, 528, 281, 458, 577, 281, 8460, 8420, 35, 55, 13, 1012, 281, 652, 309, 18218, 30, 51520], "temperature": 0.0, "avg_logprob": -0.21062264959496188, "compression_ratio": 1.6331360946745561, "no_speech_prob": 0.008538078516721725}, {"id": 73, "seek": 60836, "start": 609.32, "end": 616.28, "text": " I think that depends a lot on which build systems, what is happening in the build", "tokens": [50412, 286, 519, 300, 5946, 257, 688, 322, 597, 1322, 3652, 11, 437, 307, 2737, 294, 264, 1322, 50760], "temperature": 0.0, "avg_logprob": -0.25440032223621045, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.016621317714452744}, {"id": 74, "seek": 60836, "start": 616.28, "end": 623.08, "text": " and how can you trace what's happening. Is it hardcoded somewhere? Is it C-Make or I don't know.", "tokens": [50760, 293, 577, 393, 291, 13508, 437, 311, 2737, 13, 1119, 309, 1152, 66, 12340, 4079, 30, 1119, 309, 383, 12, 35650, 420, 286, 500, 380, 458, 13, 51100], "temperature": 0.0, "avg_logprob": -0.25440032223621045, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.016621317714452744}, {"id": 75, "seek": 60836, "start": 623.08, "end": 628.92, "text": " And then you need to look for the right tools that can extract that information", "tokens": [51100, 400, 550, 291, 643, 281, 574, 337, 264, 558, 3873, 300, 393, 8947, 300, 1589, 51392], "temperature": 0.0, "avg_logprob": -0.25440032223621045, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.016621317714452744}, {"id": 76, "seek": 60836, "start": 629.5600000000001, "end": 635.08, "text": " and maybe I think there's for example you could place if they're.", "tokens": [51424, 293, 1310, 286, 519, 456, 311, 337, 1365, 291, 727, 1081, 498, 436, 434, 13, 51700], "temperature": 0.0, "avg_logprob": -0.25440032223621045, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.016621317714452744}, {"id": 77, "seek": 63836, "start": 638.76, "end": 641.08, "text": " Zephyr has.", "tokens": [50384, 1176, 595, 3495, 81, 575, 13, 50500], "temperature": 0.0, "avg_logprob": -0.3125922728557976, "compression_ratio": 1.1951219512195121, "no_speech_prob": 0.012772890739142895}, {"id": 78, "seek": 63836, "start": 649.5600000000001, "end": 653.4, "text": " I need to repeat that answer. The Zephyr repository contains", "tokens": [50924, 286, 643, 281, 7149, 300, 1867, 13, 440, 1176, 595, 3495, 81, 25841, 8306, 51116], "temperature": 0.0, "avg_logprob": -0.3125922728557976, "compression_ratio": 1.1951219512195121, "no_speech_prob": 0.012772890739142895}, {"id": 79, "seek": 63836, "start": 654.6, "end": 661.08, "text": " user C-Make and can produce SPDX so that might be a good point to look at.", "tokens": [51176, 4195, 383, 12, 35650, 293, 393, 5258, 8420, 35, 55, 370, 300, 1062, 312, 257, 665, 935, 281, 574, 412, 13, 51500], "temperature": 0.0, "avg_logprob": -0.3125922728557976, "compression_ratio": 1.1951219512195121, "no_speech_prob": 0.012772890739142895}, {"id": 80, "seek": 66108, "start": 661.08, "end": 664.5200000000001, "text": " I also say right now it's 2.3 but we will be moving into 3.0.", "tokens": [50364, 286, 611, 584, 558, 586, 309, 311, 568, 13, 18, 457, 321, 486, 312, 2684, 666, 805, 13, 15, 13, 50536], "temperature": 0.0, "avg_logprob": -0.23674257960888223, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.01929504983127117}, {"id": 81, "seek": 66108, "start": 664.5200000000001, "end": 667.0, "text": " Right now it's 2.3 but it will be moving to 3.0.", "tokens": [50536, 1779, 586, 309, 311, 568, 13, 18, 457, 309, 486, 312, 2684, 281, 805, 13, 15, 13, 50660], "temperature": 0.0, "avg_logprob": -0.23674257960888223, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.01929504983127117}, {"id": 82, "seek": 66108, "start": 670.2800000000001, "end": 675.88, "text": " There are a bit different flavors of S-Bombs from just source files all the way to runtime and", "tokens": [50824, 821, 366, 257, 857, 819, 16303, 295, 318, 12, 33, 298, 929, 490, 445, 4009, 7098, 439, 264, 636, 281, 34474, 293, 51104], "temperature": 0.0, "avg_logprob": -0.23674257960888223, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.01929504983127117}, {"id": 83, "seek": 66108, "start": 675.88, "end": 679.72, "text": " how many of the tools are supporting all the different types of S-Bombs.", "tokens": [51104, 577, 867, 295, 264, 3873, 366, 7231, 439, 264, 819, 3467, 295, 318, 12, 33, 298, 929, 13, 51296], "temperature": 0.0, "avg_logprob": -0.23674257960888223, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.01929504983127117}, {"id": 84, "seek": 66108, "start": 680.44, "end": 686.2800000000001, "text": " The question is there are many many different format or different S-Bombs types like runtime,", "tokens": [51332, 440, 1168, 307, 456, 366, 867, 867, 819, 7877, 420, 819, 318, 12, 33, 298, 929, 3467, 411, 34474, 11, 51624], "temperature": 0.0, "avg_logprob": -0.23674257960888223, "compression_ratio": 1.8146341463414635, "no_speech_prob": 0.01929504983127117}, {"id": 85, "seek": 68628, "start": 686.28, "end": 691.0799999999999, "text": " build and so on and how many tools are supporting the different formats. I think", "tokens": [50364, 1322, 293, 370, 322, 293, 577, 867, 3873, 366, 7231, 264, 819, 25879, 13, 286, 519, 50604], "temperature": 0.0, "avg_logprob": -0.11297179305035135, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.05382313206791878}, {"id": 86, "seek": 68628, "start": 691.0799999999999, "end": 697.0799999999999, "text": " my good position is that all these libraries are fairly generic. They are what you use in a tool", "tokens": [50604, 452, 665, 2535, 307, 300, 439, 613, 15148, 366, 6457, 19577, 13, 814, 366, 437, 291, 764, 294, 257, 2290, 50904], "temperature": 0.0, "avg_logprob": -0.11297179305035135, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.05382313206791878}, {"id": 87, "seek": 68628, "start": 697.0799999999999, "end": 704.52, "text": " that would generate a build S-Bombs or would generate a runtime S-Bombs. So it's a tooling", "tokens": [50904, 300, 576, 8460, 257, 1322, 318, 12, 33, 298, 929, 420, 576, 8460, 257, 34474, 318, 12, 33, 298, 929, 13, 407, 309, 311, 257, 46593, 51276], "temperature": 0.0, "avg_logprob": -0.11297179305035135, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.05382313206791878}, {"id": 88, "seek": 68628, "start": 704.52, "end": 715.72, "text": " question or usage question but I think it's there are many tools that are doing one or the other", "tokens": [51276, 1168, 420, 14924, 1168, 457, 286, 519, 309, 311, 456, 366, 867, 3873, 300, 366, 884, 472, 420, 264, 661, 51836], "temperature": 0.0, "avg_logprob": -0.11297179305035135, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.05382313206791878}, {"id": 89, "seek": 71572, "start": 715.72, "end": 719.48, "text": " of the formats.", "tokens": [50364, 295, 264, 25879, 13, 50552], "temperature": 0.0, "avg_logprob": -0.5951029232570103, "compression_ratio": 0.6521739130434783, "no_speech_prob": 0.03240556642413139}], "language": "en"}