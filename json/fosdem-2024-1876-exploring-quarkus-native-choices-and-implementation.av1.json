{"text": " Hello everyone, I'm Fivo Zakat and today I will talk about Quarkus native and some choices it makes and how it implements them. So how many of you are familiar with Quarkus? Know what Quarkus is? Well, less than I expected. Okay, so what it is? It's a Java framework. Well, it's an open source stack for building Java web apps, so it's a Java framework that aims to bring developer joy, it's Kubernetes native, brings the best of breed of libraries and standards and supports both imperative and reactive code. And that stopped working. So what does typically a framework do when you use it? Well, usually you write your Java application using the framework, then you package it, you save it wherever you want to deploy it and you start the application. And what it does, it will load configuration files, perform some annotations, perform some annotation processing, create some metadata graphs or whatever is needed and eventually run the application. So what Quarkus does to improve that situation is that it moves part of this configuration to build time, so you only run once the configuration and setup of your application and then when you deploy your application, it starts up faster and you don't have to repeat all this process. One benefit of this Quarkus feature is that it allows you to also go native. So instead of deploying on the JVM, you can deploy a native binary. So why would someone want to go native? We have put so much effort on making the JVM very mature, very stable, very high performance, et cetera, so why would someone want to go native? Without going in too much detail, I will list some of the pros and cons of going native. So first we will start with the pros. One of the major advantages of going native is that you get faster startup because you don't have a JVM that needs to start up, load classes, do classification, warm up, stuff like this, you get faster startup. You also get close to peak performance right from the beginning because you don't do just in time compilation, everything is ahead of time compile and that gives you close to your peak performance right from the beginning. You get a smaller standalone binary. Hint here, I'm comparing with shaping your application with the JVM. Otherwise the JAR file is smaller than the binary. And you also get smaller memory footprint when running your application because you don't have to keep all this data that the JVM keeps to track internal things. And another benefit is that if you launch the same application multiple times on the same host, they can share the heap as a copy and write memory segment. Now what are the disadvantages? First of all, you get slower development cycle. Compiling to native takes more than it takes to compiling to a JAR file. So we suggest that you develop on JVM, debug on the JVM and only when you are happy with your application then move to native because that takes some time. You also get lower peak performance because when you run binary, you don't get just in time compilation. So the compiler doesn't have the benefit to profile your code and to do better optimizations. It also can perform very aggressive optimizations relying on the deoptimizer to fall back to a slower version if something doesn't go as assumed during compilation time. Another issue is that security patches require recompilation. So even if a third-party library is vulnerable, you can just update the JAR file of that third-party library and don't recompile your code. You have to rebuild your code because parts of that third-party library might be empty in your application. So you have to recompile. Your application is also not portable. You lose the right ones run anywhere, principle. So because you are generating a binary file, it will only work on the target platform that you compile for. And last but not least, it lacks behind in terms of tooling support. So debugging is not as simple as in the JVM world. And the same goes for observability. That doesn't work. Okay. Now that we have seen that there are some benefits in using native code, let's see how it works. Quarkus uses GraVM and particularly GraVM's native image to generate the binary code from Java code. And how this works is that GraVM will take as input your Java application classes, the JDK classes, and the substrate VM classes. The substrate VM is a thin runtime layer that allows your application to run on bare metal. So it takes care of some of the system things going on. Then it performs a static analysis and this will allow it to perform dead code elimination. So it essentially doesn't compile any code that you don't need. If your application doesn't reference some part of your class path or your dependencies, it won't go in the binary. So it creates a graph like this where your Java applications reference some JDK classes and the JDK classes reference some substrate VM classes and it will eventually compile it to a native binary. However, GraVM comes with some limitations. There are things that are not supported and there are things that are supported but need manual configuration. And some of the not supported parts are currently working progress. I don't have enough time to go through this. So how does Quarkus offer, what does Quarkus offer on top of that? So GraVM takes Java and produces native code. So where does Quarkus native come into play? Because of the limitations I mentioned earlier, developing native applications for GraVM's native image might be painful and that's where Quarkus comes into play. It aims to help Java developers write their application and compile it to native without having to handle all the extra things that GraVM native image requires. First Quarkus will drive all the gathering of the metadata that the GraVM needs. So what's reflectively accessed, how many JNI interfaces are used, what are the resources we want to include our binary and stuff like this. Another benefit is that most of the ecosystem, so anything that comes with Quarkus is already supported for native image compilation. So if you want to use a library that's already supported by Quarkus, you don't have to do anything special, you just put it as a dependency to your application and it should work with native as well. It minimizes the dependencies because Quarkus already does a dependency analysis before going to native, so that allows you to pass less things to the class path and it helps the static analysis do the dead code elimination. Furthermore Quarkus through annotations, APIs and some configuration properties allow you to further find the configuration of your application for native. So some might think that that's not the only framework that does that, right? So why Quarkus? Quarkus takes an opinionated approach and it's different than the other frameworks in that it will try and build time initialize all the classes, while by default, Graph VMs native image runtime initializes the classes. And this might create some issues, so Quarkus will take care of reinitializing anything that's necessary like random seeds or some platform specific values and it will also reset fields that we don't need at runtime. It also doesn't allow incomplete class paths, so when you build everything needs to be on the class path, otherwise the build will fail and this ensures that you won't get any unexpected no class defound exceptions at runtime. And class, it uses Mandrel instead of the upstream Graph VM community addition, which is based on the Eclipse Temuring Open JDK build instead of the Laps JDK build and it's specifically tailored to Quarkus and maintained by Red Hat. So how does this really work under the covers? First of all, the Quarkus will take care of generating the Graph native image json configuration files. It will perform code substitutions wherever necessary. Code substitutions allow us to go and patch third-party libraries or even the JDK itself. So if we don't like there something or if something is not compatible with native compilation, we can adapt it. It will generate some byte code that is responsible for configuring things and it will change the defaults for Graph VM native image and it will also allow the user to pass additional parameters. So for the json configuration part, it generates these five files, one for JNI, for proxy classes, for reflective accesses, resources and serialization. These are the generation of these files is handled by the classes here. So it's native image reflective configs, let's say. And it decides what to put in these json files based on the build items that exist in your application. In Quarkus, you can define the build pipeline using these build items. And earlier I mentioned substitutions. Substitutions are heavily used in Quarkus because they assist in dead code elimination and they also make sure that things that are not supported in native code are not reachable and it will throw some appropriate exceptions for that. So Quarkus performs 303 method substitutions and 32 field recommendations in a total of 208 classes. This means that you don't have to do any of these on your own. They are already handled by Quarkus and this is only on Quarkus core. If you go and use some Quarkus extension, it performs its own substitutions and stuff like this. To see an example here, here we substitute the method allocate buffer in this class and we only do that when ZSTD is absent from the class path. And what we substitute the method with is a throw of an exception that this operation is unsupported. So if you compile your code to native and it invokes this method while the ZSTD library is not available, you will get this exception. And this is how we recompute fields. So here in Bouncy Castle's easy point, we go and reset the test random field because this is a secure random class and we don't want it to be preceded and pre-initialized in the native image. But whenever we restart the application, we get different random numbers. We can similarly change the value of a field by reinitializing from an alias. That means that we can pass whatever value we want not just reset it to null. Here we change the field unavailability cause to put a Quarkus specific exception in there. And we also substitute the method is available to return false to show that OpenSSL is not supported in this specific case. Regarding features generation, this is handled by the native image features step class and it will use Quarkus Gizmo to generate bytecode. And this bytecode is used to invoke Grail VMs APIs to perform stuff that cannot be done through the json configuration. So here is a part of the native image features that we generate. And what it essentially does is that it invokes first it gets the method descriptor for the runtime class initialization.initialize at build time method. And it will invoke this method passing it a string array with the empty string. This instructs Grail VM to build time initialize everything, which is different than what it does by default. And we can also parameterize the options that are passed to the native image build. And we do that in the native image build step. And here we see part of it. And what it does is that it always enables allow fold methods, which is off by default. It makes our application headless by default. It doesn't allow the creation of fallback images because fallback images are essentially JVM lancers. So you don't get the native application that you asked for. And we also always ask it to link at build time. And that concludes the talk. I would like to acknowledge that Quarkus participates in the IROEU funded project. And I'm ready to take questions, if any. Any questions in the chat? Yeah, the custom class loader is a bit tricky because Quarkus. The question was whether Quarkus also supports the standard JDK instead of Grail VM JDK. So this is the first part of the question. And the answer to that is yes. This is Quarkus native and this is optional. This is only if you want to go native. If you want to stay on the JVM path, you can use any JDK and it will work just fine. Now to the second question about custom class loaders. Although I'm not very familiar with that, I think that this might be a bit tricky because Quarkus already uses custom class loaders. So you have to make sure that they are somehow compatible. I couldn't hear the question, so. Okay, you find out a library and you wonder whether you can use it or not. Okay, if the library is supported by Quarkus itself, you will find it listed in the Quarkus supported libraries or in a Quarkus extension that supports this library. In that case, everything should work out of the box and you don't need to do anything. In the case that your library is not supported by Quarkus Core or any of the Quarkus extensions, then you need to use some of the trickings that Quarkus does to make it work. And Quarkus gives you some APIs and annotations that may assist you. Let's see that. There is a website like supported libraries that I can go to and have a look. I think if you go to code.quarkus.io, then you can see a list of supported extensions in libraries. Do we have time to get some more questions? One more question. Sorry. I was wondering if Worker's Native works with GNI-based providers, sorry, the provider interface, not GNI. The foreign API? No, no, sorry, like classes discovery when you want to load a specific service, SPI, that's the name, sorry, the service provider interface. I think I don't know. Okay, thank you. Okay, for the rest of the questions, please feel free to approach me on the break. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.48, "text": " Hello everyone, I'm Fivo Zakat and today I will talk about Quarkus native and some choices", "tokens": [50364, 2425, 1518, 11, 286, 478, 479, 6340, 1176, 39051, 293, 965, 286, 486, 751, 466, 2326, 809, 301, 8470, 293, 512, 7994, 50938], "temperature": 0.0, "avg_logprob": -0.32526404358619865, "compression_ratio": 1.390625, "no_speech_prob": 0.2222873866558075}, {"id": 1, "seek": 0, "start": 11.48, "end": 14.280000000000001, "text": " it makes and how it implements them.", "tokens": [50938, 309, 1669, 293, 577, 309, 704, 17988, 552, 13, 51078], "temperature": 0.0, "avg_logprob": -0.32526404358619865, "compression_ratio": 1.390625, "no_speech_prob": 0.2222873866558075}, {"id": 2, "seek": 0, "start": 14.280000000000001, "end": 16.64, "text": " So how many of you are familiar with Quarkus?", "tokens": [51078, 407, 577, 867, 295, 291, 366, 4963, 365, 2326, 809, 301, 30, 51196], "temperature": 0.0, "avg_logprob": -0.32526404358619865, "compression_ratio": 1.390625, "no_speech_prob": 0.2222873866558075}, {"id": 3, "seek": 0, "start": 16.64, "end": 18.52, "text": " Know what Quarkus is?", "tokens": [51196, 10265, 437, 2326, 809, 301, 307, 30, 51290], "temperature": 0.0, "avg_logprob": -0.32526404358619865, "compression_ratio": 1.390625, "no_speech_prob": 0.2222873866558075}, {"id": 4, "seek": 0, "start": 18.52, "end": 21.28, "text": " Well, less than I expected.", "tokens": [51290, 1042, 11, 1570, 813, 286, 5176, 13, 51428], "temperature": 0.0, "avg_logprob": -0.32526404358619865, "compression_ratio": 1.390625, "no_speech_prob": 0.2222873866558075}, {"id": 5, "seek": 0, "start": 21.28, "end": 24.2, "text": " Okay, so what it is?", "tokens": [51428, 1033, 11, 370, 437, 309, 307, 30, 51574], "temperature": 0.0, "avg_logprob": -0.32526404358619865, "compression_ratio": 1.390625, "no_speech_prob": 0.2222873866558075}, {"id": 6, "seek": 0, "start": 24.2, "end": 26.080000000000002, "text": " It's a Java framework.", "tokens": [51574, 467, 311, 257, 10745, 8388, 13, 51668], "temperature": 0.0, "avg_logprob": -0.32526404358619865, "compression_ratio": 1.390625, "no_speech_prob": 0.2222873866558075}, {"id": 7, "seek": 2608, "start": 27.08, "end": 33.04, "text": " Well, it's an open source stack for building Java web apps, so it's a Java framework that", "tokens": [50414, 1042, 11, 309, 311, 364, 1269, 4009, 8630, 337, 2390, 10745, 3670, 7733, 11, 370, 309, 311, 257, 10745, 8388, 300, 50712], "temperature": 0.0, "avg_logprob": -0.2885736318734976, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.00567608792334795}, {"id": 8, "seek": 2608, "start": 33.04, "end": 37.8, "text": " aims to bring developer joy, it's Kubernetes native, brings the best of breed of libraries", "tokens": [50712, 24683, 281, 1565, 10754, 6258, 11, 309, 311, 23145, 8470, 11, 5607, 264, 1151, 295, 18971, 295, 15148, 50950], "temperature": 0.0, "avg_logprob": -0.2885736318734976, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.00567608792334795}, {"id": 9, "seek": 2608, "start": 37.8, "end": 45.44, "text": " and standards and supports both imperative and reactive code.", "tokens": [50950, 293, 7787, 293, 9346, 1293, 32490, 293, 28897, 3089, 13, 51332], "temperature": 0.0, "avg_logprob": -0.2885736318734976, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.00567608792334795}, {"id": 10, "seek": 2608, "start": 45.44, "end": 47.959999999999994, "text": " And that stopped working.", "tokens": [51332, 400, 300, 5936, 1364, 13, 51458], "temperature": 0.0, "avg_logprob": -0.2885736318734976, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.00567608792334795}, {"id": 11, "seek": 2608, "start": 47.959999999999994, "end": 54.4, "text": " So what does typically a framework do when you use it?", "tokens": [51458, 407, 437, 775, 5850, 257, 8388, 360, 562, 291, 764, 309, 30, 51780], "temperature": 0.0, "avg_logprob": -0.2885736318734976, "compression_ratio": 1.5679611650485437, "no_speech_prob": 0.00567608792334795}, {"id": 12, "seek": 5440, "start": 54.4, "end": 59.16, "text": " Well, usually you write your Java application using the framework, then you package it, you", "tokens": [50364, 1042, 11, 2673, 291, 2464, 428, 10745, 3861, 1228, 264, 8388, 11, 550, 291, 7372, 309, 11, 291, 50602], "temperature": 0.0, "avg_logprob": -0.19138623491118226, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.00508777005597949}, {"id": 13, "seek": 5440, "start": 59.16, "end": 62.48, "text": " save it wherever you want to deploy it and you start the application.", "tokens": [50602, 3155, 309, 8660, 291, 528, 281, 7274, 309, 293, 291, 722, 264, 3861, 13, 50768], "temperature": 0.0, "avg_logprob": -0.19138623491118226, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.00508777005597949}, {"id": 14, "seek": 5440, "start": 62.48, "end": 69.8, "text": " And what it does, it will load configuration files, perform some annotations, perform some", "tokens": [50768, 400, 437, 309, 775, 11, 309, 486, 3677, 11694, 7098, 11, 2042, 512, 25339, 763, 11, 2042, 512, 51134], "temperature": 0.0, "avg_logprob": -0.19138623491118226, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.00508777005597949}, {"id": 15, "seek": 5440, "start": 69.8, "end": 75.68, "text": " annotation processing, create some metadata graphs or whatever is needed and eventually", "tokens": [51134, 48654, 9007, 11, 1884, 512, 26603, 24877, 420, 2035, 307, 2978, 293, 4728, 51428], "temperature": 0.0, "avg_logprob": -0.19138623491118226, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.00508777005597949}, {"id": 16, "seek": 5440, "start": 75.68, "end": 79.52, "text": " run the application.", "tokens": [51428, 1190, 264, 3861, 13, 51620], "temperature": 0.0, "avg_logprob": -0.19138623491118226, "compression_ratio": 1.7696078431372548, "no_speech_prob": 0.00508777005597949}, {"id": 17, "seek": 7952, "start": 79.52, "end": 87.39999999999999, "text": " So what Quarkus does to improve that situation is that it moves part of this configuration", "tokens": [50364, 407, 437, 2326, 809, 301, 775, 281, 3470, 300, 2590, 307, 300, 309, 6067, 644, 295, 341, 11694, 50758], "temperature": 0.0, "avg_logprob": -0.13276632900895743, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.008231847546994686}, {"id": 18, "seek": 7952, "start": 87.39999999999999, "end": 94.24, "text": " to build time, so you only run once the configuration and setup of your application and then when", "tokens": [50758, 281, 1322, 565, 11, 370, 291, 787, 1190, 1564, 264, 11694, 293, 8657, 295, 428, 3861, 293, 550, 562, 51100], "temperature": 0.0, "avg_logprob": -0.13276632900895743, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.008231847546994686}, {"id": 19, "seek": 7952, "start": 94.24, "end": 99.28, "text": " you deploy your application, it starts up faster and you don't have to repeat all this", "tokens": [51100, 291, 7274, 428, 3861, 11, 309, 3719, 493, 4663, 293, 291, 500, 380, 362, 281, 7149, 439, 341, 51352], "temperature": 0.0, "avg_logprob": -0.13276632900895743, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.008231847546994686}, {"id": 20, "seek": 7952, "start": 99.28, "end": 101.19999999999999, "text": " process.", "tokens": [51352, 1399, 13, 51448], "temperature": 0.0, "avg_logprob": -0.13276632900895743, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.008231847546994686}, {"id": 21, "seek": 7952, "start": 101.19999999999999, "end": 106.92, "text": " One benefit of this Quarkus feature is that it allows you to also go native.", "tokens": [51448, 1485, 5121, 295, 341, 2326, 809, 301, 4111, 307, 300, 309, 4045, 291, 281, 611, 352, 8470, 13, 51734], "temperature": 0.0, "avg_logprob": -0.13276632900895743, "compression_ratio": 1.7355769230769231, "no_speech_prob": 0.008231847546994686}, {"id": 22, "seek": 10692, "start": 106.92, "end": 113.2, "text": " So instead of deploying on the JVM, you can deploy a native binary.", "tokens": [50364, 407, 2602, 295, 34198, 322, 264, 508, 53, 44, 11, 291, 393, 7274, 257, 8470, 17434, 13, 50678], "temperature": 0.0, "avg_logprob": -0.15290924777155337, "compression_ratio": 1.7135678391959799, "no_speech_prob": 0.07130259275436401}, {"id": 23, "seek": 10692, "start": 113.2, "end": 116.48, "text": " So why would someone want to go native?", "tokens": [50678, 407, 983, 576, 1580, 528, 281, 352, 8470, 30, 50842], "temperature": 0.0, "avg_logprob": -0.15290924777155337, "compression_ratio": 1.7135678391959799, "no_speech_prob": 0.07130259275436401}, {"id": 24, "seek": 10692, "start": 116.48, "end": 124.52000000000001, "text": " We have put so much effort on making the JVM very mature, very stable, very high performance,", "tokens": [50842, 492, 362, 829, 370, 709, 4630, 322, 1455, 264, 508, 53, 44, 588, 14442, 11, 588, 8351, 11, 588, 1090, 3389, 11, 51244], "temperature": 0.0, "avg_logprob": -0.15290924777155337, "compression_ratio": 1.7135678391959799, "no_speech_prob": 0.07130259275436401}, {"id": 25, "seek": 10692, "start": 124.52000000000001, "end": 128.76, "text": " et cetera, so why would someone want to go native?", "tokens": [51244, 1030, 11458, 11, 370, 983, 576, 1580, 528, 281, 352, 8470, 30, 51456], "temperature": 0.0, "avg_logprob": -0.15290924777155337, "compression_ratio": 1.7135678391959799, "no_speech_prob": 0.07130259275436401}, {"id": 26, "seek": 10692, "start": 128.76, "end": 135.24, "text": " Without going in too much detail, I will list some of the pros and cons of going native.", "tokens": [51456, 9129, 516, 294, 886, 709, 2607, 11, 286, 486, 1329, 512, 295, 264, 6267, 293, 1014, 295, 516, 8470, 13, 51780], "temperature": 0.0, "avg_logprob": -0.15290924777155337, "compression_ratio": 1.7135678391959799, "no_speech_prob": 0.07130259275436401}, {"id": 27, "seek": 13524, "start": 135.24, "end": 138.0, "text": " So first we will start with the pros.", "tokens": [50364, 407, 700, 321, 486, 722, 365, 264, 6267, 13, 50502], "temperature": 0.0, "avg_logprob": -0.15167659979600173, "compression_ratio": 1.712, "no_speech_prob": 0.012647300958633423}, {"id": 28, "seek": 13524, "start": 138.0, "end": 143.92000000000002, "text": " One of the major advantages of going native is that you get faster startup because you", "tokens": [50502, 1485, 295, 264, 2563, 14906, 295, 516, 8470, 307, 300, 291, 483, 4663, 18578, 570, 291, 50798], "temperature": 0.0, "avg_logprob": -0.15167659979600173, "compression_ratio": 1.712, "no_speech_prob": 0.012647300958633423}, {"id": 29, "seek": 13524, "start": 143.92000000000002, "end": 149.36, "text": " don't have a JVM that needs to start up, load classes, do classification, warm up, stuff", "tokens": [50798, 500, 380, 362, 257, 508, 53, 44, 300, 2203, 281, 722, 493, 11, 3677, 5359, 11, 360, 21538, 11, 4561, 493, 11, 1507, 51070], "temperature": 0.0, "avg_logprob": -0.15167659979600173, "compression_ratio": 1.712, "no_speech_prob": 0.012647300958633423}, {"id": 30, "seek": 13524, "start": 149.36, "end": 152.52, "text": " like this, you get faster startup.", "tokens": [51070, 411, 341, 11, 291, 483, 4663, 18578, 13, 51228], "temperature": 0.0, "avg_logprob": -0.15167659979600173, "compression_ratio": 1.712, "no_speech_prob": 0.012647300958633423}, {"id": 31, "seek": 13524, "start": 152.52, "end": 157.72, "text": " You also get close to peak performance right from the beginning because you don't do just", "tokens": [51228, 509, 611, 483, 1998, 281, 10651, 3389, 558, 490, 264, 2863, 570, 291, 500, 380, 360, 445, 51488], "temperature": 0.0, "avg_logprob": -0.15167659979600173, "compression_ratio": 1.712, "no_speech_prob": 0.012647300958633423}, {"id": 32, "seek": 13524, "start": 157.72, "end": 164.32000000000002, "text": " in time compilation, everything is ahead of time compile and that gives you close to your", "tokens": [51488, 294, 565, 40261, 11, 1203, 307, 2286, 295, 565, 31413, 293, 300, 2709, 291, 1998, 281, 428, 51818], "temperature": 0.0, "avg_logprob": -0.15167659979600173, "compression_ratio": 1.712, "no_speech_prob": 0.012647300958633423}, {"id": 33, "seek": 16432, "start": 164.32, "end": 168.04, "text": " peak performance right from the beginning.", "tokens": [50364, 10651, 3389, 558, 490, 264, 2863, 13, 50550], "temperature": 0.0, "avg_logprob": -0.22509269280867142, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.02181682176887989}, {"id": 34, "seek": 16432, "start": 168.04, "end": 171.79999999999998, "text": " You get a smaller standalone binary.", "tokens": [50550, 509, 483, 257, 4356, 37454, 17434, 13, 50738], "temperature": 0.0, "avg_logprob": -0.22509269280867142, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.02181682176887989}, {"id": 35, "seek": 16432, "start": 171.79999999999998, "end": 176.48, "text": " Hint here, I'm comparing with shaping your application with the JVM.", "tokens": [50738, 389, 686, 510, 11, 286, 478, 15763, 365, 25945, 428, 3861, 365, 264, 508, 53, 44, 13, 50972], "temperature": 0.0, "avg_logprob": -0.22509269280867142, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.02181682176887989}, {"id": 36, "seek": 16432, "start": 176.48, "end": 180.4, "text": " Otherwise the JAR file is smaller than the binary.", "tokens": [50972, 10328, 264, 508, 1899, 3991, 307, 4356, 813, 264, 17434, 13, 51168], "temperature": 0.0, "avg_logprob": -0.22509269280867142, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.02181682176887989}, {"id": 37, "seek": 16432, "start": 180.4, "end": 184.24, "text": " And you also get smaller memory footprint when running your application because you don't", "tokens": [51168, 400, 291, 611, 483, 4356, 4675, 24222, 562, 2614, 428, 3861, 570, 291, 500, 380, 51360], "temperature": 0.0, "avg_logprob": -0.22509269280867142, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.02181682176887989}, {"id": 38, "seek": 16432, "start": 184.24, "end": 190.76, "text": " have to keep all this data that the JVM keeps to track internal things.", "tokens": [51360, 362, 281, 1066, 439, 341, 1412, 300, 264, 508, 53, 44, 5965, 281, 2837, 6920, 721, 13, 51686], "temperature": 0.0, "avg_logprob": -0.22509269280867142, "compression_ratio": 1.5973451327433628, "no_speech_prob": 0.02181682176887989}, {"id": 39, "seek": 19076, "start": 190.76, "end": 194.07999999999998, "text": " And another benefit is that if you launch the same application multiple times on the", "tokens": [50364, 400, 1071, 5121, 307, 300, 498, 291, 4025, 264, 912, 3861, 3866, 1413, 322, 264, 50530], "temperature": 0.0, "avg_logprob": -0.14350480940735455, "compression_ratio": 1.588, "no_speech_prob": 0.004398016724735498}, {"id": 40, "seek": 19076, "start": 194.07999999999998, "end": 202.64, "text": " same host, they can share the heap as a copy and write memory segment.", "tokens": [50530, 912, 3975, 11, 436, 393, 2073, 264, 33591, 382, 257, 5055, 293, 2464, 4675, 9469, 13, 50958], "temperature": 0.0, "avg_logprob": -0.14350480940735455, "compression_ratio": 1.588, "no_speech_prob": 0.004398016724735498}, {"id": 41, "seek": 19076, "start": 202.64, "end": 205.6, "text": " Now what are the disadvantages?", "tokens": [50958, 823, 437, 366, 264, 37431, 30, 51106], "temperature": 0.0, "avg_logprob": -0.14350480940735455, "compression_ratio": 1.588, "no_speech_prob": 0.004398016724735498}, {"id": 42, "seek": 19076, "start": 205.6, "end": 208.76, "text": " First of all, you get slower development cycle.", "tokens": [51106, 2386, 295, 439, 11, 291, 483, 14009, 3250, 6586, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14350480940735455, "compression_ratio": 1.588, "no_speech_prob": 0.004398016724735498}, {"id": 43, "seek": 19076, "start": 208.76, "end": 214.12, "text": " Compiling to native takes more than it takes to compiling to a JAR file.", "tokens": [51264, 6620, 4883, 281, 8470, 2516, 544, 813, 309, 2516, 281, 715, 4883, 281, 257, 508, 1899, 3991, 13, 51532], "temperature": 0.0, "avg_logprob": -0.14350480940735455, "compression_ratio": 1.588, "no_speech_prob": 0.004398016724735498}, {"id": 44, "seek": 19076, "start": 214.12, "end": 219.92, "text": " So we suggest that you develop on JVM, debug on the JVM and only when you are happy with", "tokens": [51532, 407, 321, 3402, 300, 291, 1499, 322, 508, 53, 44, 11, 24083, 322, 264, 508, 53, 44, 293, 787, 562, 291, 366, 2055, 365, 51822], "temperature": 0.0, "avg_logprob": -0.14350480940735455, "compression_ratio": 1.588, "no_speech_prob": 0.004398016724735498}, {"id": 45, "seek": 21992, "start": 219.92, "end": 224.67999999999998, "text": " your application then move to native because that takes some time.", "tokens": [50364, 428, 3861, 550, 1286, 281, 8470, 570, 300, 2516, 512, 565, 13, 50602], "temperature": 0.0, "avg_logprob": -0.16206588515316148, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.0037838455755263567}, {"id": 46, "seek": 21992, "start": 224.67999999999998, "end": 230.76, "text": " You also get lower peak performance because when you run binary, you don't get just in", "tokens": [50602, 509, 611, 483, 3126, 10651, 3389, 570, 562, 291, 1190, 17434, 11, 291, 500, 380, 483, 445, 294, 50906], "temperature": 0.0, "avg_logprob": -0.16206588515316148, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.0037838455755263567}, {"id": 47, "seek": 21992, "start": 230.76, "end": 232.2, "text": " time compilation.", "tokens": [50906, 565, 40261, 13, 50978], "temperature": 0.0, "avg_logprob": -0.16206588515316148, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.0037838455755263567}, {"id": 48, "seek": 21992, "start": 232.2, "end": 239.56, "text": " So the compiler doesn't have the benefit to profile your code and to do better optimizations.", "tokens": [50978, 407, 264, 31958, 1177, 380, 362, 264, 5121, 281, 7964, 428, 3089, 293, 281, 360, 1101, 5028, 14455, 13, 51346], "temperature": 0.0, "avg_logprob": -0.16206588515316148, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.0037838455755263567}, {"id": 49, "seek": 21992, "start": 239.56, "end": 247.04, "text": " It also can perform very aggressive optimizations relying on the deoptimizer to fall back to", "tokens": [51346, 467, 611, 393, 2042, 588, 10762, 5028, 14455, 24140, 322, 264, 368, 5747, 332, 6545, 281, 2100, 646, 281, 51720], "temperature": 0.0, "avg_logprob": -0.16206588515316148, "compression_ratio": 1.6272727272727272, "no_speech_prob": 0.0037838455755263567}, {"id": 50, "seek": 24704, "start": 247.04, "end": 254.76, "text": " a slower version if something doesn't go as assumed during compilation time.", "tokens": [50364, 257, 14009, 3037, 498, 746, 1177, 380, 352, 382, 15895, 1830, 40261, 565, 13, 50750], "temperature": 0.0, "avg_logprob": -0.14748349397078805, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.007651074789464474}, {"id": 51, "seek": 24704, "start": 254.76, "end": 258.03999999999996, "text": " Another issue is that security patches require recompilation.", "tokens": [50750, 3996, 2734, 307, 300, 3825, 26531, 3651, 48000, 16067, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14748349397078805, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.007651074789464474}, {"id": 52, "seek": 24704, "start": 258.03999999999996, "end": 265.15999999999997, "text": " So even if a third-party library is vulnerable, you can just update the JAR file of that third-party", "tokens": [50914, 407, 754, 498, 257, 2636, 12, 23409, 6405, 307, 10955, 11, 291, 393, 445, 5623, 264, 508, 1899, 3991, 295, 300, 2636, 12, 23409, 51270], "temperature": 0.0, "avg_logprob": -0.14748349397078805, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.007651074789464474}, {"id": 53, "seek": 24704, "start": 265.15999999999997, "end": 268.03999999999996, "text": " library and don't recompile your code.", "tokens": [51270, 6405, 293, 500, 380, 48000, 794, 428, 3089, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14748349397078805, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.007651074789464474}, {"id": 54, "seek": 24704, "start": 268.03999999999996, "end": 273.08, "text": " You have to rebuild your code because parts of that third-party library might be empty", "tokens": [51414, 509, 362, 281, 16877, 428, 3089, 570, 3166, 295, 300, 2636, 12, 23409, 6405, 1062, 312, 6707, 51666], "temperature": 0.0, "avg_logprob": -0.14748349397078805, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.007651074789464474}, {"id": 55, "seek": 24704, "start": 273.08, "end": 274.08, "text": " in your application.", "tokens": [51666, 294, 428, 3861, 13, 51716], "temperature": 0.0, "avg_logprob": -0.14748349397078805, "compression_ratio": 1.7232142857142858, "no_speech_prob": 0.007651074789464474}, {"id": 56, "seek": 27408, "start": 274.8, "end": 277.84, "text": " So you have to recompile.", "tokens": [50400, 407, 291, 362, 281, 48000, 794, 13, 50552], "temperature": 0.0, "avg_logprob": -0.22288065592447917, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.008388208225369453}, {"id": 57, "seek": 27408, "start": 277.84, "end": 280.03999999999996, "text": " Your application is also not portable.", "tokens": [50552, 2260, 3861, 307, 611, 406, 21800, 13, 50662], "temperature": 0.0, "avg_logprob": -0.22288065592447917, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.008388208225369453}, {"id": 58, "seek": 27408, "start": 280.03999999999996, "end": 283.76, "text": " You lose the right ones run anywhere, principle.", "tokens": [50662, 509, 3624, 264, 558, 2306, 1190, 4992, 11, 8665, 13, 50848], "temperature": 0.0, "avg_logprob": -0.22288065592447917, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.008388208225369453}, {"id": 59, "seek": 27408, "start": 283.76, "end": 288.2, "text": " So because you are generating a binary file, it will only work on the target platform that", "tokens": [50848, 407, 570, 291, 366, 17746, 257, 17434, 3991, 11, 309, 486, 787, 589, 322, 264, 3779, 3663, 300, 51070], "temperature": 0.0, "avg_logprob": -0.22288065592447917, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.008388208225369453}, {"id": 60, "seek": 27408, "start": 288.2, "end": 290.88, "text": " you compile for.", "tokens": [51070, 291, 31413, 337, 13, 51204], "temperature": 0.0, "avg_logprob": -0.22288065592447917, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.008388208225369453}, {"id": 61, "seek": 27408, "start": 290.88, "end": 295.24, "text": " And last but not least, it lacks behind in terms of tooling support.", "tokens": [51204, 400, 1036, 457, 406, 1935, 11, 309, 31132, 2261, 294, 2115, 295, 46593, 1406, 13, 51422], "temperature": 0.0, "avg_logprob": -0.22288065592447917, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.008388208225369453}, {"id": 62, "seek": 29524, "start": 295.24, "end": 301.32, "text": " So debugging is not as simple as in the JVM world.", "tokens": [50364, 407, 45592, 307, 406, 382, 2199, 382, 294, 264, 508, 53, 44, 1002, 13, 50668], "temperature": 0.0, "avg_logprob": -0.3310633355920965, "compression_ratio": 1.4585365853658536, "no_speech_prob": 0.02679573930799961}, {"id": 63, "seek": 29524, "start": 301.32, "end": 303.52, "text": " And the same goes for observability.", "tokens": [50668, 400, 264, 912, 1709, 337, 9951, 2310, 13, 50778], "temperature": 0.0, "avg_logprob": -0.3310633355920965, "compression_ratio": 1.4585365853658536, "no_speech_prob": 0.02679573930799961}, {"id": 64, "seek": 29524, "start": 303.52, "end": 307.0, "text": " That doesn't work.", "tokens": [50778, 663, 1177, 380, 589, 13, 50952], "temperature": 0.0, "avg_logprob": -0.3310633355920965, "compression_ratio": 1.4585365853658536, "no_speech_prob": 0.02679573930799961}, {"id": 65, "seek": 29524, "start": 307.0, "end": 308.2, "text": " Okay.", "tokens": [50952, 1033, 13, 51012], "temperature": 0.0, "avg_logprob": -0.3310633355920965, "compression_ratio": 1.4585365853658536, "no_speech_prob": 0.02679573930799961}, {"id": 66, "seek": 29524, "start": 308.2, "end": 314.36, "text": " Now that we have seen that there are some benefits in using native code, let's see how", "tokens": [51012, 823, 300, 321, 362, 1612, 300, 456, 366, 512, 5311, 294, 1228, 8470, 3089, 11, 718, 311, 536, 577, 51320], "temperature": 0.0, "avg_logprob": -0.3310633355920965, "compression_ratio": 1.4585365853658536, "no_speech_prob": 0.02679573930799961}, {"id": 67, "seek": 29524, "start": 314.36, "end": 316.48, "text": " it works.", "tokens": [51320, 309, 1985, 13, 51426], "temperature": 0.0, "avg_logprob": -0.3310633355920965, "compression_ratio": 1.4585365853658536, "no_speech_prob": 0.02679573930799961}, {"id": 68, "seek": 29524, "start": 316.48, "end": 324.36, "text": " Quarkus uses GraVM and particularly GraVM's native image to generate the binary code from", "tokens": [51426, 2326, 809, 301, 4960, 8985, 53, 44, 293, 4098, 8985, 53, 44, 311, 8470, 3256, 281, 8460, 264, 17434, 3089, 490, 51820], "temperature": 0.0, "avg_logprob": -0.3310633355920965, "compression_ratio": 1.4585365853658536, "no_speech_prob": 0.02679573930799961}, {"id": 69, "seek": 32436, "start": 324.44, "end": 326.8, "text": " Java code.", "tokens": [50368, 10745, 3089, 13, 50486], "temperature": 0.0, "avg_logprob": -0.19245197296142577, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.000852736528031528}, {"id": 70, "seek": 32436, "start": 326.8, "end": 332.24, "text": " And how this works is that GraVM will take as input your Java application classes, the", "tokens": [50486, 400, 577, 341, 1985, 307, 300, 8985, 53, 44, 486, 747, 382, 4846, 428, 10745, 3861, 5359, 11, 264, 50758], "temperature": 0.0, "avg_logprob": -0.19245197296142577, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.000852736528031528}, {"id": 71, "seek": 32436, "start": 332.24, "end": 335.92, "text": " JDK classes, and the substrate VM classes.", "tokens": [50758, 37082, 42, 5359, 11, 293, 264, 27585, 18038, 5359, 13, 50942], "temperature": 0.0, "avg_logprob": -0.19245197296142577, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.000852736528031528}, {"id": 72, "seek": 32436, "start": 335.92, "end": 345.2, "text": " The substrate VM is a thin runtime layer that allows your application to run on bare metal.", "tokens": [50942, 440, 27585, 18038, 307, 257, 5862, 34474, 4583, 300, 4045, 428, 3861, 281, 1190, 322, 6949, 5760, 13, 51406], "temperature": 0.0, "avg_logprob": -0.19245197296142577, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.000852736528031528}, {"id": 73, "seek": 32436, "start": 345.2, "end": 351.0, "text": " So it takes care of some of the system things going on.", "tokens": [51406, 407, 309, 2516, 1127, 295, 512, 295, 264, 1185, 721, 516, 322, 13, 51696], "temperature": 0.0, "avg_logprob": -0.19245197296142577, "compression_ratio": 1.591160220994475, "no_speech_prob": 0.000852736528031528}, {"id": 74, "seek": 35100, "start": 351.0, "end": 358.12, "text": " Then it performs a static analysis and this will allow it to perform dead code elimination.", "tokens": [50364, 1396, 309, 26213, 257, 13437, 5215, 293, 341, 486, 2089, 309, 281, 2042, 3116, 3089, 29224, 13, 50720], "temperature": 0.0, "avg_logprob": -0.141982479095459, "compression_ratio": 1.8429752066115703, "no_speech_prob": 0.001448931754566729}, {"id": 75, "seek": 35100, "start": 358.12, "end": 362.4, "text": " So it essentially doesn't compile any code that you don't need.", "tokens": [50720, 407, 309, 4476, 1177, 380, 31413, 604, 3089, 300, 291, 500, 380, 643, 13, 50934], "temperature": 0.0, "avg_logprob": -0.141982479095459, "compression_ratio": 1.8429752066115703, "no_speech_prob": 0.001448931754566729}, {"id": 76, "seek": 35100, "start": 362.4, "end": 368.2, "text": " If your application doesn't reference some part of your class path or your dependencies,", "tokens": [50934, 759, 428, 3861, 1177, 380, 6408, 512, 644, 295, 428, 1508, 3100, 420, 428, 36606, 11, 51224], "temperature": 0.0, "avg_logprob": -0.141982479095459, "compression_ratio": 1.8429752066115703, "no_speech_prob": 0.001448931754566729}, {"id": 77, "seek": 35100, "start": 368.2, "end": 370.32, "text": " it won't go in the binary.", "tokens": [51224, 309, 1582, 380, 352, 294, 264, 17434, 13, 51330], "temperature": 0.0, "avg_logprob": -0.141982479095459, "compression_ratio": 1.8429752066115703, "no_speech_prob": 0.001448931754566729}, {"id": 78, "seek": 35100, "start": 370.32, "end": 374.04, "text": " So it creates a graph like this where your Java applications reference some JDK classes", "tokens": [51330, 407, 309, 7829, 257, 4295, 411, 341, 689, 428, 10745, 5821, 6408, 512, 37082, 42, 5359, 51516], "temperature": 0.0, "avg_logprob": -0.141982479095459, "compression_ratio": 1.8429752066115703, "no_speech_prob": 0.001448931754566729}, {"id": 79, "seek": 35100, "start": 374.04, "end": 379.12, "text": " and the JDK classes reference some substrate VM classes and it will eventually compile", "tokens": [51516, 293, 264, 37082, 42, 5359, 6408, 512, 27585, 18038, 5359, 293, 309, 486, 4728, 31413, 51770], "temperature": 0.0, "avg_logprob": -0.141982479095459, "compression_ratio": 1.8429752066115703, "no_speech_prob": 0.001448931754566729}, {"id": 80, "seek": 37912, "start": 379.16, "end": 382.12, "text": " it to a native binary.", "tokens": [50366, 309, 281, 257, 8470, 17434, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2244199381934272, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0027553578838706017}, {"id": 81, "seek": 37912, "start": 382.12, "end": 388.32, "text": " However, GraVM comes with some limitations.", "tokens": [50514, 2908, 11, 8985, 53, 44, 1487, 365, 512, 15705, 13, 50824], "temperature": 0.0, "avg_logprob": -0.2244199381934272, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0027553578838706017}, {"id": 82, "seek": 37912, "start": 388.32, "end": 394.16, "text": " There are things that are not supported and there are things that are supported but need", "tokens": [50824, 821, 366, 721, 300, 366, 406, 8104, 293, 456, 366, 721, 300, 366, 8104, 457, 643, 51116], "temperature": 0.0, "avg_logprob": -0.2244199381934272, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0027553578838706017}, {"id": 83, "seek": 37912, "start": 394.16, "end": 398.04, "text": " manual configuration.", "tokens": [51116, 9688, 11694, 13, 51310], "temperature": 0.0, "avg_logprob": -0.2244199381934272, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0027553578838706017}, {"id": 84, "seek": 37912, "start": 398.04, "end": 401.44, "text": " And some of the not supported parts are currently working progress.", "tokens": [51310, 400, 512, 295, 264, 406, 8104, 3166, 366, 4362, 1364, 4205, 13, 51480], "temperature": 0.0, "avg_logprob": -0.2244199381934272, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0027553578838706017}, {"id": 85, "seek": 37912, "start": 401.44, "end": 405.88, "text": " I don't have enough time to go through this.", "tokens": [51480, 286, 500, 380, 362, 1547, 565, 281, 352, 807, 341, 13, 51702], "temperature": 0.0, "avg_logprob": -0.2244199381934272, "compression_ratio": 1.5675675675675675, "no_speech_prob": 0.0027553578838706017}, {"id": 86, "seek": 40588, "start": 405.88, "end": 411.12, "text": " So how does Quarkus offer, what does Quarkus offer on top of that?", "tokens": [50364, 407, 577, 775, 2326, 809, 301, 2626, 11, 437, 775, 2326, 809, 301, 2626, 322, 1192, 295, 300, 30, 50626], "temperature": 0.0, "avg_logprob": -0.1746819253061332, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.0008506845915690064}, {"id": 87, "seek": 40588, "start": 411.12, "end": 413.71999999999997, "text": " So GraVM takes Java and produces native code.", "tokens": [50626, 407, 8985, 53, 44, 2516, 10745, 293, 14725, 8470, 3089, 13, 50756], "temperature": 0.0, "avg_logprob": -0.1746819253061332, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.0008506845915690064}, {"id": 88, "seek": 40588, "start": 413.71999999999997, "end": 417.6, "text": " So where does Quarkus native come into play?", "tokens": [50756, 407, 689, 775, 2326, 809, 301, 8470, 808, 666, 862, 30, 50950], "temperature": 0.0, "avg_logprob": -0.1746819253061332, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.0008506845915690064}, {"id": 89, "seek": 40588, "start": 417.6, "end": 423.52, "text": " Because of the limitations I mentioned earlier, developing native applications for GraVM's", "tokens": [50950, 1436, 295, 264, 15705, 286, 2835, 3071, 11, 6416, 8470, 5821, 337, 8985, 53, 44, 311, 51246], "temperature": 0.0, "avg_logprob": -0.1746819253061332, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.0008506845915690064}, {"id": 90, "seek": 40588, "start": 423.52, "end": 428.2, "text": " native image might be painful and that's where Quarkus comes into play.", "tokens": [51246, 8470, 3256, 1062, 312, 11697, 293, 300, 311, 689, 2326, 809, 301, 1487, 666, 862, 13, 51480], "temperature": 0.0, "avg_logprob": -0.1746819253061332, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.0008506845915690064}, {"id": 91, "seek": 40588, "start": 428.2, "end": 433.96, "text": " It aims to help Java developers write their application and compile it to native without", "tokens": [51480, 467, 24683, 281, 854, 10745, 8849, 2464, 641, 3861, 293, 31413, 309, 281, 8470, 1553, 51768], "temperature": 0.0, "avg_logprob": -0.1746819253061332, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.0008506845915690064}, {"id": 92, "seek": 43396, "start": 434.03999999999996, "end": 441.88, "text": " having to handle all the extra things that GraVM native image requires.", "tokens": [50368, 1419, 281, 4813, 439, 264, 2857, 721, 300, 8985, 53, 44, 8470, 3256, 7029, 13, 50760], "temperature": 0.0, "avg_logprob": -0.1797139580185349, "compression_ratio": 1.4873096446700507, "no_speech_prob": 0.0002317551989108324}, {"id": 93, "seek": 43396, "start": 441.88, "end": 447.15999999999997, "text": " First Quarkus will drive all the gathering of the metadata that the GraVM needs.", "tokens": [50760, 2386, 2326, 809, 301, 486, 3332, 439, 264, 13519, 295, 264, 26603, 300, 264, 8985, 53, 44, 2203, 13, 51024], "temperature": 0.0, "avg_logprob": -0.1797139580185349, "compression_ratio": 1.4873096446700507, "no_speech_prob": 0.0002317551989108324}, {"id": 94, "seek": 43396, "start": 447.15999999999997, "end": 455.15999999999997, "text": " So what's reflectively accessed, how many JNI interfaces are used, what are the resources", "tokens": [51024, 407, 437, 311, 5031, 3413, 34211, 11, 577, 867, 508, 42496, 28416, 366, 1143, 11, 437, 366, 264, 3593, 51424], "temperature": 0.0, "avg_logprob": -0.1797139580185349, "compression_ratio": 1.4873096446700507, "no_speech_prob": 0.0002317551989108324}, {"id": 95, "seek": 43396, "start": 455.15999999999997, "end": 459.84, "text": " we want to include our binary and stuff like this.", "tokens": [51424, 321, 528, 281, 4090, 527, 17434, 293, 1507, 411, 341, 13, 51658], "temperature": 0.0, "avg_logprob": -0.1797139580185349, "compression_ratio": 1.4873096446700507, "no_speech_prob": 0.0002317551989108324}, {"id": 96, "seek": 45984, "start": 459.84, "end": 466.52, "text": " Another benefit is that most of the ecosystem, so anything that comes with Quarkus is already", "tokens": [50364, 3996, 5121, 307, 300, 881, 295, 264, 11311, 11, 370, 1340, 300, 1487, 365, 2326, 809, 301, 307, 1217, 50698], "temperature": 0.0, "avg_logprob": -0.1429751205444336, "compression_ratio": 1.721774193548387, "no_speech_prob": 0.01431384775787592}, {"id": 97, "seek": 45984, "start": 466.52, "end": 470.11999999999995, "text": " supported for native image compilation.", "tokens": [50698, 8104, 337, 8470, 3256, 40261, 13, 50878], "temperature": 0.0, "avg_logprob": -0.1429751205444336, "compression_ratio": 1.721774193548387, "no_speech_prob": 0.01431384775787592}, {"id": 98, "seek": 45984, "start": 470.11999999999995, "end": 475.64, "text": " So if you want to use a library that's already supported by Quarkus, you don't have to do", "tokens": [50878, 407, 498, 291, 528, 281, 764, 257, 6405, 300, 311, 1217, 8104, 538, 2326, 809, 301, 11, 291, 500, 380, 362, 281, 360, 51154], "temperature": 0.0, "avg_logprob": -0.1429751205444336, "compression_ratio": 1.721774193548387, "no_speech_prob": 0.01431384775787592}, {"id": 99, "seek": 45984, "start": 475.64, "end": 481.71999999999997, "text": " anything special, you just put it as a dependency to your application and it should work with", "tokens": [51154, 1340, 2121, 11, 291, 445, 829, 309, 382, 257, 33621, 281, 428, 3861, 293, 309, 820, 589, 365, 51458], "temperature": 0.0, "avg_logprob": -0.1429751205444336, "compression_ratio": 1.721774193548387, "no_speech_prob": 0.01431384775787592}, {"id": 100, "seek": 45984, "start": 481.71999999999997, "end": 483.88, "text": " native as well.", "tokens": [51458, 8470, 382, 731, 13, 51566], "temperature": 0.0, "avg_logprob": -0.1429751205444336, "compression_ratio": 1.721774193548387, "no_speech_prob": 0.01431384775787592}, {"id": 101, "seek": 45984, "start": 483.88, "end": 488.88, "text": " It minimizes the dependencies because Quarkus already does a dependency analysis before going", "tokens": [51566, 467, 4464, 5660, 264, 36606, 570, 2326, 809, 301, 1217, 775, 257, 33621, 5215, 949, 516, 51816], "temperature": 0.0, "avg_logprob": -0.1429751205444336, "compression_ratio": 1.721774193548387, "no_speech_prob": 0.01431384775787592}, {"id": 102, "seek": 48888, "start": 488.88, "end": 500.4, "text": " to native, so that allows you to pass less things to the class path and it helps the", "tokens": [50364, 281, 8470, 11, 370, 300, 4045, 291, 281, 1320, 1570, 721, 281, 264, 1508, 3100, 293, 309, 3665, 264, 50940], "temperature": 0.0, "avg_logprob": -0.2684905815124512, "compression_ratio": 1.4379084967320261, "no_speech_prob": 0.00014919874956831336}, {"id": 103, "seek": 48888, "start": 500.4, "end": 507.28, "text": " static analysis do the dead code elimination.", "tokens": [50940, 13437, 5215, 360, 264, 3116, 3089, 29224, 13, 51284], "temperature": 0.0, "avg_logprob": -0.2684905815124512, "compression_ratio": 1.4379084967320261, "no_speech_prob": 0.00014919874956831336}, {"id": 104, "seek": 48888, "start": 507.28, "end": 512.36, "text": " Furthermore Quarkus through annotations, APIs and some configuration properties allow you", "tokens": [51284, 23999, 2326, 809, 301, 807, 25339, 763, 11, 21445, 293, 512, 11694, 7221, 2089, 291, 51538], "temperature": 0.0, "avg_logprob": -0.2684905815124512, "compression_ratio": 1.4379084967320261, "no_speech_prob": 0.00014919874956831336}, {"id": 105, "seek": 51236, "start": 512.36, "end": 520.64, "text": " to further find the configuration of your application for native.", "tokens": [50364, 281, 3052, 915, 264, 11694, 295, 428, 3861, 337, 8470, 13, 50778], "temperature": 0.0, "avg_logprob": -0.239629542241331, "compression_ratio": 1.5408805031446542, "no_speech_prob": 0.0010138321667909622}, {"id": 106, "seek": 51236, "start": 520.64, "end": 527.04, "text": " So some might think that that's not the only framework that does that, right?", "tokens": [50778, 407, 512, 1062, 519, 300, 300, 311, 406, 264, 787, 8388, 300, 775, 300, 11, 558, 30, 51098], "temperature": 0.0, "avg_logprob": -0.239629542241331, "compression_ratio": 1.5408805031446542, "no_speech_prob": 0.0010138321667909622}, {"id": 107, "seek": 51236, "start": 527.04, "end": 529.8000000000001, "text": " So why Quarkus?", "tokens": [51098, 407, 983, 2326, 809, 301, 30, 51236], "temperature": 0.0, "avg_logprob": -0.239629542241331, "compression_ratio": 1.5408805031446542, "no_speech_prob": 0.0010138321667909622}, {"id": 108, "seek": 51236, "start": 529.8000000000001, "end": 537.5600000000001, "text": " Quarkus takes an opinionated approach and it's different than the other frameworks in", "tokens": [51236, 2326, 809, 301, 2516, 364, 4800, 770, 3109, 293, 309, 311, 819, 813, 264, 661, 29834, 294, 51624], "temperature": 0.0, "avg_logprob": -0.239629542241331, "compression_ratio": 1.5408805031446542, "no_speech_prob": 0.0010138321667909622}, {"id": 109, "seek": 53756, "start": 537.56, "end": 544.0, "text": " that it will try and build time initialize all the classes, while by default, Graph VMs", "tokens": [50364, 300, 309, 486, 853, 293, 1322, 565, 5883, 1125, 439, 264, 5359, 11, 1339, 538, 7576, 11, 21884, 18038, 82, 50686], "temperature": 0.0, "avg_logprob": -0.26439213472254136, "compression_ratio": 1.5981735159817352, "no_speech_prob": 0.002574580954387784}, {"id": 110, "seek": 53756, "start": 544.0, "end": 549.68, "text": " native image runtime initializes the classes.", "tokens": [50686, 8470, 3256, 34474, 5883, 5660, 264, 5359, 13, 50970], "temperature": 0.0, "avg_logprob": -0.26439213472254136, "compression_ratio": 1.5981735159817352, "no_speech_prob": 0.002574580954387784}, {"id": 111, "seek": 53756, "start": 549.68, "end": 554.0799999999999, "text": " And this might create some issues, so Quarkus will take care of reinitializing anything", "tokens": [50970, 400, 341, 1062, 1884, 512, 2663, 11, 370, 2326, 809, 301, 486, 747, 1127, 295, 6561, 270, 831, 3319, 1340, 51190], "temperature": 0.0, "avg_logprob": -0.26439213472254136, "compression_ratio": 1.5981735159817352, "no_speech_prob": 0.002574580954387784}, {"id": 112, "seek": 53756, "start": 554.0799999999999, "end": 560.4799999999999, "text": " that's necessary like random seeds or some platform specific values and it will also", "tokens": [51190, 300, 311, 4818, 411, 4974, 9203, 420, 512, 3663, 2685, 4190, 293, 309, 486, 611, 51510], "temperature": 0.0, "avg_logprob": -0.26439213472254136, "compression_ratio": 1.5981735159817352, "no_speech_prob": 0.002574580954387784}, {"id": 113, "seek": 53756, "start": 560.4799999999999, "end": 566.2399999999999, "text": " reset fields that we don't need at runtime.", "tokens": [51510, 14322, 7909, 300, 321, 500, 380, 643, 412, 34474, 13, 51798], "temperature": 0.0, "avg_logprob": -0.26439213472254136, "compression_ratio": 1.5981735159817352, "no_speech_prob": 0.002574580954387784}, {"id": 114, "seek": 56624, "start": 566.24, "end": 570.92, "text": " It also doesn't allow incomplete class paths, so when you build everything needs to be on", "tokens": [50364, 467, 611, 1177, 380, 2089, 31709, 1508, 14518, 11, 370, 562, 291, 1322, 1203, 2203, 281, 312, 322, 50598], "temperature": 0.0, "avg_logprob": -0.2800315545529735, "compression_ratio": 1.609375, "no_speech_prob": 0.06271519511938095}, {"id": 115, "seek": 56624, "start": 570.92, "end": 577.6, "text": " the class path, otherwise the build will fail and this ensures that you won't get any unexpected", "tokens": [50598, 264, 1508, 3100, 11, 5911, 264, 1322, 486, 3061, 293, 341, 28111, 300, 291, 1582, 380, 483, 604, 13106, 50932], "temperature": 0.0, "avg_logprob": -0.2800315545529735, "compression_ratio": 1.609375, "no_speech_prob": 0.06271519511938095}, {"id": 116, "seek": 56624, "start": 577.6, "end": 581.48, "text": " no class defound exceptions at runtime.", "tokens": [50932, 572, 1508, 1060, 554, 22847, 412, 34474, 13, 51126], "temperature": 0.0, "avg_logprob": -0.2800315545529735, "compression_ratio": 1.609375, "no_speech_prob": 0.06271519511938095}, {"id": 117, "seek": 56624, "start": 581.48, "end": 587.5600000000001, "text": " And class, it uses Mandrel instead of the upstream Graph VM community addition, which", "tokens": [51126, 400, 1508, 11, 309, 4960, 15458, 4419, 2602, 295, 264, 33915, 21884, 18038, 1768, 4500, 11, 597, 51430], "temperature": 0.0, "avg_logprob": -0.2800315545529735, "compression_ratio": 1.609375, "no_speech_prob": 0.06271519511938095}, {"id": 118, "seek": 56624, "start": 587.5600000000001, "end": 594.36, "text": " is based on the Eclipse Temuring Open JDK build instead of the Laps JDK build and it's specifically", "tokens": [51430, 307, 2361, 322, 264, 462, 27197, 8095, 1345, 7238, 37082, 42, 1322, 2602, 295, 264, 441, 2382, 37082, 42, 1322, 293, 309, 311, 4682, 51770], "temperature": 0.0, "avg_logprob": -0.2800315545529735, "compression_ratio": 1.609375, "no_speech_prob": 0.06271519511938095}, {"id": 119, "seek": 59436, "start": 594.36, "end": 599.64, "text": " tailored to Quarkus and maintained by Red Hat.", "tokens": [50364, 34858, 281, 2326, 809, 301, 293, 17578, 538, 4477, 15867, 13, 50628], "temperature": 0.0, "avg_logprob": -0.21377729815106059, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.0010954372119158506}, {"id": 120, "seek": 59436, "start": 599.64, "end": 605.28, "text": " So how does this really work under the covers?", "tokens": [50628, 407, 577, 775, 341, 534, 589, 833, 264, 10538, 30, 50910], "temperature": 0.0, "avg_logprob": -0.21377729815106059, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.0010954372119158506}, {"id": 121, "seek": 59436, "start": 605.28, "end": 611.24, "text": " First of all, the Quarkus will take care of generating the Graph native image json configuration", "tokens": [50910, 2386, 295, 439, 11, 264, 2326, 809, 301, 486, 747, 1127, 295, 17746, 264, 21884, 8470, 3256, 361, 3015, 11694, 51208], "temperature": 0.0, "avg_logprob": -0.21377729815106059, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.0010954372119158506}, {"id": 122, "seek": 59436, "start": 611.24, "end": 613.16, "text": " files.", "tokens": [51208, 7098, 13, 51304], "temperature": 0.0, "avg_logprob": -0.21377729815106059, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.0010954372119158506}, {"id": 123, "seek": 59436, "start": 613.16, "end": 616.28, "text": " It will perform code substitutions wherever necessary.", "tokens": [51304, 467, 486, 2042, 3089, 26441, 3666, 8660, 4818, 13, 51460], "temperature": 0.0, "avg_logprob": -0.21377729815106059, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.0010954372119158506}, {"id": 124, "seek": 59436, "start": 616.28, "end": 623.76, "text": " Code substitutions allow us to go and patch third-party libraries or even the JDK itself.", "tokens": [51460, 15549, 26441, 3666, 2089, 505, 281, 352, 293, 9972, 2636, 12, 23409, 15148, 420, 754, 264, 37082, 42, 2564, 13, 51834], "temperature": 0.0, "avg_logprob": -0.21377729815106059, "compression_ratio": 1.5132743362831858, "no_speech_prob": 0.0010954372119158506}, {"id": 125, "seek": 62376, "start": 623.76, "end": 628.6, "text": " So if we don't like there something or if something is not compatible with native compilation,", "tokens": [50364, 407, 498, 321, 500, 380, 411, 456, 746, 420, 498, 746, 307, 406, 18218, 365, 8470, 40261, 11, 50606], "temperature": 0.0, "avg_logprob": -0.16625048773629325, "compression_ratio": 1.5989583333333333, "no_speech_prob": 0.0005093113868497312}, {"id": 126, "seek": 62376, "start": 628.6, "end": 630.76, "text": " we can adapt it.", "tokens": [50606, 321, 393, 6231, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16625048773629325, "compression_ratio": 1.5989583333333333, "no_speech_prob": 0.0005093113868497312}, {"id": 127, "seek": 62376, "start": 630.76, "end": 639.72, "text": " It will generate some byte code that is responsible for configuring things and it will change the", "tokens": [50714, 467, 486, 8460, 512, 40846, 3089, 300, 307, 6250, 337, 6662, 1345, 721, 293, 309, 486, 1319, 264, 51162], "temperature": 0.0, "avg_logprob": -0.16625048773629325, "compression_ratio": 1.5989583333333333, "no_speech_prob": 0.0005093113868497312}, {"id": 128, "seek": 62376, "start": 639.72, "end": 649.96, "text": " defaults for Graph VM native image and it will also allow the user to pass additional parameters.", "tokens": [51162, 7576, 82, 337, 21884, 18038, 8470, 3256, 293, 309, 486, 611, 2089, 264, 4195, 281, 1320, 4497, 9834, 13, 51674], "temperature": 0.0, "avg_logprob": -0.16625048773629325, "compression_ratio": 1.5989583333333333, "no_speech_prob": 0.0005093113868497312}, {"id": 129, "seek": 64996, "start": 649.96, "end": 656.4000000000001, "text": " So for the json configuration part, it generates these five files, one for JNI, for proxy classes,", "tokens": [50364, 407, 337, 264, 361, 3015, 11694, 644, 11, 309, 23815, 613, 1732, 7098, 11, 472, 337, 508, 42496, 11, 337, 29690, 5359, 11, 50686], "temperature": 0.0, "avg_logprob": -0.1811377207438151, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.015123139135539532}, {"id": 130, "seek": 64996, "start": 656.4000000000001, "end": 660.8000000000001, "text": " for reflective accesses, resources and serialization.", "tokens": [50686, 337, 28931, 2105, 279, 11, 3593, 293, 17436, 2144, 13, 50906], "temperature": 0.0, "avg_logprob": -0.1811377207438151, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.015123139135539532}, {"id": 131, "seek": 64996, "start": 660.8000000000001, "end": 666.0400000000001, "text": " These are the generation of these files is handled by the classes here.", "tokens": [50906, 1981, 366, 264, 5125, 295, 613, 7098, 307, 18033, 538, 264, 5359, 510, 13, 51168], "temperature": 0.0, "avg_logprob": -0.1811377207438151, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.015123139135539532}, {"id": 132, "seek": 64996, "start": 666.0400000000001, "end": 671.08, "text": " So it's native image reflective configs, let's say.", "tokens": [51168, 407, 309, 311, 8470, 3256, 28931, 6662, 82, 11, 718, 311, 584, 13, 51420], "temperature": 0.0, "avg_logprob": -0.1811377207438151, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.015123139135539532}, {"id": 133, "seek": 64996, "start": 671.08, "end": 676.6800000000001, "text": " And it decides what to put in these json files based on the build items that exist in your", "tokens": [51420, 400, 309, 14898, 437, 281, 829, 294, 613, 361, 3015, 7098, 2361, 322, 264, 1322, 4754, 300, 2514, 294, 428, 51700], "temperature": 0.0, "avg_logprob": -0.1811377207438151, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.015123139135539532}, {"id": 134, "seek": 64996, "start": 676.6800000000001, "end": 677.6800000000001, "text": " application.", "tokens": [51700, 3861, 13, 51750], "temperature": 0.0, "avg_logprob": -0.1811377207438151, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.015123139135539532}, {"id": 135, "seek": 67768, "start": 677.92, "end": 687.12, "text": " In Quarkus, you can define the build pipeline using these build items.", "tokens": [50376, 682, 2326, 809, 301, 11, 291, 393, 6964, 264, 1322, 15517, 1228, 613, 1322, 4754, 13, 50836], "temperature": 0.0, "avg_logprob": -0.1713419795036316, "compression_ratio": 1.645933014354067, "no_speech_prob": 0.002826032694429159}, {"id": 136, "seek": 67768, "start": 687.12, "end": 689.4399999999999, "text": " And earlier I mentioned substitutions.", "tokens": [50836, 400, 3071, 286, 2835, 26441, 3666, 13, 50952], "temperature": 0.0, "avg_logprob": -0.1713419795036316, "compression_ratio": 1.645933014354067, "no_speech_prob": 0.002826032694429159}, {"id": 137, "seek": 67768, "start": 689.4399999999999, "end": 694.2399999999999, "text": " Substitutions are heavily used in Quarkus because they assist in dead code elimination", "tokens": [50952, 42090, 270, 3666, 366, 10950, 1143, 294, 2326, 809, 301, 570, 436, 4255, 294, 3116, 3089, 29224, 51192], "temperature": 0.0, "avg_logprob": -0.1713419795036316, "compression_ratio": 1.645933014354067, "no_speech_prob": 0.002826032694429159}, {"id": 138, "seek": 67768, "start": 694.2399999999999, "end": 701.4399999999999, "text": " and they also make sure that things that are not supported in native code are not reachable", "tokens": [51192, 293, 436, 611, 652, 988, 300, 721, 300, 366, 406, 8104, 294, 8470, 3089, 366, 406, 2524, 712, 51552], "temperature": 0.0, "avg_logprob": -0.1713419795036316, "compression_ratio": 1.645933014354067, "no_speech_prob": 0.002826032694429159}, {"id": 139, "seek": 67768, "start": 701.4399999999999, "end": 705.16, "text": " and it will throw some appropriate exceptions for that.", "tokens": [51552, 293, 309, 486, 3507, 512, 6854, 22847, 337, 300, 13, 51738], "temperature": 0.0, "avg_logprob": -0.1713419795036316, "compression_ratio": 1.645933014354067, "no_speech_prob": 0.002826032694429159}, {"id": 140, "seek": 70516, "start": 705.16, "end": 711.0, "text": " So Quarkus performs 303 method substitutions and 32 field recommendations in a total of", "tokens": [50364, 407, 2326, 809, 301, 26213, 2217, 18, 3170, 26441, 3666, 293, 8858, 2519, 10434, 294, 257, 3217, 295, 50656], "temperature": 0.0, "avg_logprob": -0.19215954904970917, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.001660433947108686}, {"id": 141, "seek": 70516, "start": 711.0, "end": 714.0, "text": " 208 classes.", "tokens": [50656, 945, 23, 5359, 13, 50806], "temperature": 0.0, "avg_logprob": -0.19215954904970917, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.001660433947108686}, {"id": 142, "seek": 70516, "start": 714.0, "end": 717.3199999999999, "text": " This means that you don't have to do any of these on your own.", "tokens": [50806, 639, 1355, 300, 291, 500, 380, 362, 281, 360, 604, 295, 613, 322, 428, 1065, 13, 50972], "temperature": 0.0, "avg_logprob": -0.19215954904970917, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.001660433947108686}, {"id": 143, "seek": 70516, "start": 717.3199999999999, "end": 721.12, "text": " They are already handled by Quarkus and this is only on Quarkus core.", "tokens": [50972, 814, 366, 1217, 18033, 538, 2326, 809, 301, 293, 341, 307, 787, 322, 2326, 809, 301, 4965, 13, 51162], "temperature": 0.0, "avg_logprob": -0.19215954904970917, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.001660433947108686}, {"id": 144, "seek": 70516, "start": 721.12, "end": 726.88, "text": " If you go and use some Quarkus extension, it performs its own substitutions and stuff", "tokens": [51162, 759, 291, 352, 293, 764, 512, 2326, 809, 301, 10320, 11, 309, 26213, 1080, 1065, 26441, 3666, 293, 1507, 51450], "temperature": 0.0, "avg_logprob": -0.19215954904970917, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.001660433947108686}, {"id": 145, "seek": 70516, "start": 726.88, "end": 727.88, "text": " like this.", "tokens": [51450, 411, 341, 13, 51500], "temperature": 0.0, "avg_logprob": -0.19215954904970917, "compression_ratio": 1.6019417475728155, "no_speech_prob": 0.001660433947108686}, {"id": 146, "seek": 72788, "start": 728.88, "end": 737.08, "text": " To see an example here, here we substitute the method allocate buffer in this class and", "tokens": [50414, 1407, 536, 364, 1365, 510, 11, 510, 321, 15802, 264, 3170, 35713, 21762, 294, 341, 1508, 293, 50824], "temperature": 0.0, "avg_logprob": -0.1485056708840763, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.004095524549484253}, {"id": 147, "seek": 72788, "start": 737.08, "end": 741.92, "text": " we only do that when ZSTD is absent from the class path.", "tokens": [50824, 321, 787, 360, 300, 562, 1176, 6840, 35, 307, 25185, 490, 264, 1508, 3100, 13, 51066], "temperature": 0.0, "avg_logprob": -0.1485056708840763, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.004095524549484253}, {"id": 148, "seek": 72788, "start": 741.92, "end": 748.2, "text": " And what we substitute the method with is a throw of an exception that this operation", "tokens": [51066, 400, 437, 321, 15802, 264, 3170, 365, 307, 257, 3507, 295, 364, 11183, 300, 341, 6916, 51380], "temperature": 0.0, "avg_logprob": -0.1485056708840763, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.004095524549484253}, {"id": 149, "seek": 72788, "start": 748.2, "end": 749.2, "text": " is unsupported.", "tokens": [51380, 307, 2693, 10504, 14813, 13, 51430], "temperature": 0.0, "avg_logprob": -0.1485056708840763, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.004095524549484253}, {"id": 150, "seek": 72788, "start": 749.2, "end": 755.84, "text": " So if you compile your code to native and it invokes this method while the ZSTD library", "tokens": [51430, 407, 498, 291, 31413, 428, 3089, 281, 8470, 293, 309, 1048, 8606, 341, 3170, 1339, 264, 1176, 6840, 35, 6405, 51762], "temperature": 0.0, "avg_logprob": -0.1485056708840763, "compression_ratio": 1.6616915422885572, "no_speech_prob": 0.004095524549484253}, {"id": 151, "seek": 75584, "start": 755.84, "end": 761.5600000000001, "text": " is not available, you will get this exception.", "tokens": [50364, 307, 406, 2435, 11, 291, 486, 483, 341, 11183, 13, 50650], "temperature": 0.0, "avg_logprob": -0.1620666045176832, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.022854354232549667}, {"id": 152, "seek": 75584, "start": 761.5600000000001, "end": 768.44, "text": " And this is how we recompute fields.", "tokens": [50650, 400, 341, 307, 577, 321, 48000, 1169, 7909, 13, 50994], "temperature": 0.0, "avg_logprob": -0.1620666045176832, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.022854354232549667}, {"id": 153, "seek": 75584, "start": 768.44, "end": 775.8000000000001, "text": " So here in Bouncy Castle's easy point, we go and reset the test random field because", "tokens": [50994, 407, 510, 294, 363, 1733, 1344, 21076, 311, 1858, 935, 11, 321, 352, 293, 14322, 264, 1500, 4974, 2519, 570, 51362], "temperature": 0.0, "avg_logprob": -0.1620666045176832, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.022854354232549667}, {"id": 154, "seek": 75584, "start": 775.8000000000001, "end": 782.0, "text": " this is a secure random class and we don't want it to be preceded and pre-initialized", "tokens": [51362, 341, 307, 257, 7144, 4974, 1508, 293, 321, 500, 380, 528, 309, 281, 312, 16969, 292, 293, 659, 12, 259, 270, 831, 1602, 51672], "temperature": 0.0, "avg_logprob": -0.1620666045176832, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.022854354232549667}, {"id": 155, "seek": 75584, "start": 782.0, "end": 783.0, "text": " in the native image.", "tokens": [51672, 294, 264, 8470, 3256, 13, 51722], "temperature": 0.0, "avg_logprob": -0.1620666045176832, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.022854354232549667}, {"id": 156, "seek": 78300, "start": 783.0, "end": 790.8, "text": " But whenever we restart the application, we get different random numbers.", "tokens": [50364, 583, 5699, 321, 21022, 264, 3861, 11, 321, 483, 819, 4974, 3547, 13, 50754], "temperature": 0.0, "avg_logprob": -0.15227485608450975, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.0018728955183178186}, {"id": 157, "seek": 78300, "start": 790.8, "end": 797.96, "text": " We can similarly change the value of a field by reinitializing from an alias.", "tokens": [50754, 492, 393, 14138, 1319, 264, 2158, 295, 257, 2519, 538, 6561, 270, 831, 3319, 490, 364, 419, 4609, 13, 51112], "temperature": 0.0, "avg_logprob": -0.15227485608450975, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.0018728955183178186}, {"id": 158, "seek": 78300, "start": 797.96, "end": 803.44, "text": " That means that we can pass whatever value we want not just reset it to null.", "tokens": [51112, 663, 1355, 300, 321, 393, 1320, 2035, 2158, 321, 528, 406, 445, 14322, 309, 281, 18184, 13, 51386], "temperature": 0.0, "avg_logprob": -0.15227485608450975, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.0018728955183178186}, {"id": 159, "seek": 78300, "start": 803.44, "end": 810.84, "text": " Here we change the field unavailability cause to put a Quarkus specific exception in there.", "tokens": [51386, 1692, 321, 1319, 264, 2519, 36541, 864, 2310, 3082, 281, 829, 257, 2326, 809, 301, 2685, 11183, 294, 456, 13, 51756], "temperature": 0.0, "avg_logprob": -0.15227485608450975, "compression_ratio": 1.5141509433962264, "no_speech_prob": 0.0018728955183178186}, {"id": 160, "seek": 81084, "start": 810.84, "end": 817.32, "text": " And we also substitute the method is available to return false to show that OpenSSL is not", "tokens": [50364, 400, 321, 611, 15802, 264, 3170, 307, 2435, 281, 2736, 7908, 281, 855, 300, 7238, 21929, 43, 307, 406, 50688], "temperature": 0.0, "avg_logprob": -0.2023369323375613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.001362712704576552}, {"id": 161, "seek": 81084, "start": 817.32, "end": 823.52, "text": " supported in this specific case.", "tokens": [50688, 8104, 294, 341, 2685, 1389, 13, 50998], "temperature": 0.0, "avg_logprob": -0.2023369323375613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.001362712704576552}, {"id": 162, "seek": 81084, "start": 823.52, "end": 828.32, "text": " Regarding features generation, this is handled by the native image features step class and", "tokens": [50998, 35523, 4122, 5125, 11, 341, 307, 18033, 538, 264, 8470, 3256, 4122, 1823, 1508, 293, 51238], "temperature": 0.0, "avg_logprob": -0.2023369323375613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.001362712704576552}, {"id": 163, "seek": 81084, "start": 828.32, "end": 831.76, "text": " it will use Quarkus Gizmo to generate bytecode.", "tokens": [51238, 309, 486, 764, 2326, 809, 301, 460, 590, 3280, 281, 8460, 40846, 22332, 13, 51410], "temperature": 0.0, "avg_logprob": -0.2023369323375613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.001362712704576552}, {"id": 164, "seek": 81084, "start": 831.76, "end": 837.9200000000001, "text": " And this bytecode is used to invoke Grail VMs APIs to perform stuff that cannot be done", "tokens": [51410, 400, 341, 40846, 22332, 307, 1143, 281, 41117, 8985, 388, 18038, 82, 21445, 281, 2042, 1507, 300, 2644, 312, 1096, 51718], "temperature": 0.0, "avg_logprob": -0.2023369323375613, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.001362712704576552}, {"id": 165, "seek": 83792, "start": 837.92, "end": 842.56, "text": " through the json configuration.", "tokens": [50364, 807, 264, 361, 3015, 11694, 13, 50596], "temperature": 0.0, "avg_logprob": -0.24539525168282644, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.006224530749022961}, {"id": 166, "seek": 83792, "start": 842.56, "end": 850.1999999999999, "text": " So here is a part of the native image features that we generate.", "tokens": [50596, 407, 510, 307, 257, 644, 295, 264, 8470, 3256, 4122, 300, 321, 8460, 13, 50978], "temperature": 0.0, "avg_logprob": -0.24539525168282644, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.006224530749022961}, {"id": 167, "seek": 83792, "start": 850.1999999999999, "end": 856.92, "text": " And what it essentially does is that it invokes first it gets the method descriptor for the", "tokens": [50978, 400, 437, 309, 4476, 775, 307, 300, 309, 1048, 8606, 700, 309, 2170, 264, 3170, 31280, 284, 337, 264, 51314], "temperature": 0.0, "avg_logprob": -0.24539525168282644, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.006224530749022961}, {"id": 168, "seek": 83792, "start": 856.92, "end": 861.4399999999999, "text": " runtime class initialization.initialize at build time method.", "tokens": [51314, 34474, 1508, 5883, 2144, 13, 259, 270, 831, 1125, 412, 1322, 565, 3170, 13, 51540], "temperature": 0.0, "avg_logprob": -0.24539525168282644, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.006224530749022961}, {"id": 169, "seek": 86144, "start": 861.44, "end": 868.5600000000001, "text": " And it will invoke this method passing it a string array with the empty string.", "tokens": [50364, 400, 309, 486, 41117, 341, 3170, 8437, 309, 257, 6798, 10225, 365, 264, 6707, 6798, 13, 50720], "temperature": 0.0, "avg_logprob": -0.2014666904102672, "compression_ratio": 1.452127659574468, "no_speech_prob": 0.0013550905277952552}, {"id": 170, "seek": 86144, "start": 868.5600000000001, "end": 874.4000000000001, "text": " This instructs Grail VM to build time initialize everything, which is different than what it", "tokens": [50720, 639, 7232, 82, 8985, 388, 18038, 281, 1322, 565, 5883, 1125, 1203, 11, 597, 307, 819, 813, 437, 309, 51012], "temperature": 0.0, "avg_logprob": -0.2014666904102672, "compression_ratio": 1.452127659574468, "no_speech_prob": 0.0013550905277952552}, {"id": 171, "seek": 86144, "start": 874.4000000000001, "end": 881.6400000000001, "text": " does by default.", "tokens": [51012, 775, 538, 7576, 13, 51374], "temperature": 0.0, "avg_logprob": -0.2014666904102672, "compression_ratio": 1.452127659574468, "no_speech_prob": 0.0013550905277952552}, {"id": 172, "seek": 86144, "start": 881.6400000000001, "end": 888.84, "text": " And we can also parameterize the options that are passed to the native image build.", "tokens": [51374, 400, 321, 393, 611, 13075, 1125, 264, 3956, 300, 366, 4678, 281, 264, 8470, 3256, 1322, 13, 51734], "temperature": 0.0, "avg_logprob": -0.2014666904102672, "compression_ratio": 1.452127659574468, "no_speech_prob": 0.0013550905277952552}, {"id": 173, "seek": 88884, "start": 888.84, "end": 893.2, "text": " And we do that in the native image build step.", "tokens": [50364, 400, 321, 360, 300, 294, 264, 8470, 3256, 1322, 1823, 13, 50582], "temperature": 0.0, "avg_logprob": -0.23750250680106028, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0014207143103703856}, {"id": 174, "seek": 88884, "start": 893.2, "end": 896.12, "text": " And here we see part of it.", "tokens": [50582, 400, 510, 321, 536, 644, 295, 309, 13, 50728], "temperature": 0.0, "avg_logprob": -0.23750250680106028, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0014207143103703856}, {"id": 175, "seek": 88884, "start": 896.12, "end": 901.48, "text": " And what it does is that it always enables allow fold methods, which is off by default.", "tokens": [50728, 400, 437, 309, 775, 307, 300, 309, 1009, 17077, 2089, 4860, 7150, 11, 597, 307, 766, 538, 7576, 13, 50996], "temperature": 0.0, "avg_logprob": -0.23750250680106028, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0014207143103703856}, {"id": 176, "seek": 88884, "start": 901.48, "end": 905.88, "text": " It makes our application headless by default.", "tokens": [50996, 467, 1669, 527, 3861, 1378, 1832, 538, 7576, 13, 51216], "temperature": 0.0, "avg_logprob": -0.23750250680106028, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0014207143103703856}, {"id": 177, "seek": 88884, "start": 905.88, "end": 911.9200000000001, "text": " It doesn't allow the creation of fallback images because fallback images are essentially", "tokens": [51216, 467, 1177, 380, 2089, 264, 8016, 295, 2100, 3207, 5267, 570, 2100, 3207, 5267, 366, 4476, 51518], "temperature": 0.0, "avg_logprob": -0.23750250680106028, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0014207143103703856}, {"id": 178, "seek": 88884, "start": 911.9200000000001, "end": 913.2, "text": " JVM lancers.", "tokens": [51518, 508, 53, 44, 9326, 8530, 13, 51582], "temperature": 0.0, "avg_logprob": -0.23750250680106028, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0014207143103703856}, {"id": 179, "seek": 88884, "start": 913.2, "end": 916.96, "text": " So you don't get the native application that you asked for.", "tokens": [51582, 407, 291, 500, 380, 483, 264, 8470, 3861, 300, 291, 2351, 337, 13, 51770], "temperature": 0.0, "avg_logprob": -0.23750250680106028, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.0014207143103703856}, {"id": 180, "seek": 91696, "start": 916.96, "end": 922.24, "text": " And we also always ask it to link at build time.", "tokens": [50364, 400, 321, 611, 1009, 1029, 309, 281, 2113, 412, 1322, 565, 13, 50628], "temperature": 0.0, "avg_logprob": -0.2856884856722248, "compression_ratio": 1.3818181818181818, "no_speech_prob": 0.041620466858148575}, {"id": 181, "seek": 91696, "start": 922.24, "end": 926.0, "text": " And that concludes the talk.", "tokens": [50628, 400, 300, 24643, 264, 751, 13, 50816], "temperature": 0.0, "avg_logprob": -0.2856884856722248, "compression_ratio": 1.3818181818181818, "no_speech_prob": 0.041620466858148575}, {"id": 182, "seek": 91696, "start": 926.0, "end": 932.0400000000001, "text": " I would like to acknowledge that Quarkus participates in the IROEU funded project.", "tokens": [50816, 286, 576, 411, 281, 10692, 300, 2326, 809, 301, 3421, 1024, 294, 264, 286, 7142, 36, 52, 14385, 1716, 13, 51118], "temperature": 0.0, "avg_logprob": -0.2856884856722248, "compression_ratio": 1.3818181818181818, "no_speech_prob": 0.041620466858148575}, {"id": 183, "seek": 91696, "start": 932.0400000000001, "end": 941.0400000000001, "text": " And I'm ready to take questions, if any.", "tokens": [51118, 400, 286, 478, 1919, 281, 747, 1651, 11, 498, 604, 13, 51568], "temperature": 0.0, "avg_logprob": -0.2856884856722248, "compression_ratio": 1.3818181818181818, "no_speech_prob": 0.041620466858148575}, {"id": 184, "seek": 91696, "start": 941.0400000000001, "end": 945.0400000000001, "text": " Any questions in the chat?", "tokens": [51568, 2639, 1651, 294, 264, 5081, 30, 51768], "temperature": 0.0, "avg_logprob": -0.2856884856722248, "compression_ratio": 1.3818181818181818, "no_speech_prob": 0.041620466858148575}, {"id": 185, "seek": 94504, "start": 945.04, "end": 965.04, "text": " Yeah, the custom class loader is a bit tricky because Quarkus.", "tokens": [50364, 865, 11, 264, 2375, 1508, 3677, 260, 307, 257, 857, 12414, 570, 2326, 809, 301, 13, 51364], "temperature": 0.0, "avg_logprob": -0.31395956527355107, "compression_ratio": 1.217741935483871, "no_speech_prob": 0.08239850401878357}, {"id": 186, "seek": 94504, "start": 965.04, "end": 972.88, "text": " The question was whether Quarkus also supports the standard JDK instead of Grail VM JDK.", "tokens": [51364, 440, 1168, 390, 1968, 2326, 809, 301, 611, 9346, 264, 3832, 37082, 42, 2602, 295, 8985, 388, 18038, 37082, 42, 13, 51756], "temperature": 0.0, "avg_logprob": -0.31395956527355107, "compression_ratio": 1.217741935483871, "no_speech_prob": 0.08239850401878357}, {"id": 187, "seek": 97288, "start": 972.88, "end": 975.28, "text": " So this is the first part of the question.", "tokens": [50364, 407, 341, 307, 264, 700, 644, 295, 264, 1168, 13, 50484], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 188, "seek": 97288, "start": 975.28, "end": 977.28, "text": " And the answer to that is yes.", "tokens": [50484, 400, 264, 1867, 281, 300, 307, 2086, 13, 50584], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 189, "seek": 97288, "start": 977.28, "end": 979.48, "text": " This is Quarkus native and this is optional.", "tokens": [50584, 639, 307, 2326, 809, 301, 8470, 293, 341, 307, 17312, 13, 50694], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 190, "seek": 97288, "start": 979.48, "end": 981.08, "text": " This is only if you want to go native.", "tokens": [50694, 639, 307, 787, 498, 291, 528, 281, 352, 8470, 13, 50774], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 191, "seek": 97288, "start": 981.08, "end": 988.04, "text": " If you want to stay on the JVM path, you can use any JDK and it will work just fine.", "tokens": [50774, 759, 291, 528, 281, 1754, 322, 264, 508, 53, 44, 3100, 11, 291, 393, 764, 604, 37082, 42, 293, 309, 486, 589, 445, 2489, 13, 51122], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 192, "seek": 97288, "start": 988.04, "end": 990.96, "text": " Now to the second question about custom class loaders.", "tokens": [51122, 823, 281, 264, 1150, 1168, 466, 2375, 1508, 3677, 433, 13, 51268], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 193, "seek": 97288, "start": 990.96, "end": 995.28, "text": " Although I'm not very familiar with that, I think that this might be a bit tricky because", "tokens": [51268, 5780, 286, 478, 406, 588, 4963, 365, 300, 11, 286, 519, 300, 341, 1062, 312, 257, 857, 12414, 570, 51484], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 194, "seek": 97288, "start": 995.28, "end": 997.68, "text": " Quarkus already uses custom class loaders.", "tokens": [51484, 2326, 809, 301, 1217, 4960, 2375, 1508, 3677, 433, 13, 51604], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 195, "seek": 97288, "start": 997.68, "end": 1000.08, "text": " So you have to make sure that they are somehow compatible.", "tokens": [51604, 407, 291, 362, 281, 652, 988, 300, 436, 366, 6063, 18218, 13, 51724], "temperature": 0.0, "avg_logprob": -0.19791297351612763, "compression_ratio": 1.7097902097902098, "no_speech_prob": 0.1448087990283966}, {"id": 196, "seek": 100008, "start": 1000.08, "end": 1009.5200000000001, "text": " I couldn't hear the question, so.", "tokens": [50364, 286, 2809, 380, 1568, 264, 1168, 11, 370, 13, 50836], "temperature": 0.0, "avg_logprob": -0.25930152068267, "compression_ratio": 1.6606060606060606, "no_speech_prob": 0.005859797820448875}, {"id": 197, "seek": 100008, "start": 1009.5200000000001, "end": 1017.48, "text": " Okay, you find out a library and you wonder whether you can use it or not.", "tokens": [50836, 1033, 11, 291, 915, 484, 257, 6405, 293, 291, 2441, 1968, 291, 393, 764, 309, 420, 406, 13, 51234], "temperature": 0.0, "avg_logprob": -0.25930152068267, "compression_ratio": 1.6606060606060606, "no_speech_prob": 0.005859797820448875}, {"id": 198, "seek": 100008, "start": 1017.48, "end": 1023.8000000000001, "text": " Okay, if the library is supported by Quarkus itself, you will find it listed in the Quarkus", "tokens": [51234, 1033, 11, 498, 264, 6405, 307, 8104, 538, 2326, 809, 301, 2564, 11, 291, 486, 915, 309, 10052, 294, 264, 2326, 809, 301, 51550], "temperature": 0.0, "avg_logprob": -0.25930152068267, "compression_ratio": 1.6606060606060606, "no_speech_prob": 0.005859797820448875}, {"id": 199, "seek": 100008, "start": 1023.8000000000001, "end": 1028.96, "text": " supported libraries or in a Quarkus extension that supports this library.", "tokens": [51550, 8104, 15148, 420, 294, 257, 2326, 809, 301, 10320, 300, 9346, 341, 6405, 13, 51808], "temperature": 0.0, "avg_logprob": -0.25930152068267, "compression_ratio": 1.6606060606060606, "no_speech_prob": 0.005859797820448875}, {"id": 200, "seek": 102896, "start": 1028.96, "end": 1033.64, "text": " In that case, everything should work out of the box and you don't need to do anything.", "tokens": [50364, 682, 300, 1389, 11, 1203, 820, 589, 484, 295, 264, 2424, 293, 291, 500, 380, 643, 281, 360, 1340, 13, 50598], "temperature": 0.0, "avg_logprob": -0.20385128518809442, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.06749098747968674}, {"id": 201, "seek": 102896, "start": 1033.64, "end": 1039.6000000000001, "text": " In the case that your library is not supported by Quarkus Core or any of the Quarkus extensions,", "tokens": [50598, 682, 264, 1389, 300, 428, 6405, 307, 406, 8104, 538, 2326, 809, 301, 14798, 420, 604, 295, 264, 2326, 809, 301, 25129, 11, 50896], "temperature": 0.0, "avg_logprob": -0.20385128518809442, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.06749098747968674}, {"id": 202, "seek": 102896, "start": 1039.6000000000001, "end": 1046.52, "text": " then you need to use some of the trickings that Quarkus does to make it work.", "tokens": [50896, 550, 291, 643, 281, 764, 512, 295, 264, 4282, 1109, 300, 2326, 809, 301, 775, 281, 652, 309, 589, 13, 51242], "temperature": 0.0, "avg_logprob": -0.20385128518809442, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.06749098747968674}, {"id": 203, "seek": 102896, "start": 1046.52, "end": 1051.24, "text": " And Quarkus gives you some APIs and annotations that may assist you.", "tokens": [51242, 400, 2326, 809, 301, 2709, 291, 512, 21445, 293, 25339, 763, 300, 815, 4255, 291, 13, 51478], "temperature": 0.0, "avg_logprob": -0.20385128518809442, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.06749098747968674}, {"id": 204, "seek": 102896, "start": 1051.24, "end": 1052.24, "text": " Let's see that.", "tokens": [51478, 961, 311, 536, 300, 13, 51528], "temperature": 0.0, "avg_logprob": -0.20385128518809442, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.06749098747968674}, {"id": 205, "seek": 102896, "start": 1052.24, "end": 1058.04, "text": " There is a website like supported libraries that I can go to and have a look.", "tokens": [51528, 821, 307, 257, 3144, 411, 8104, 15148, 300, 286, 393, 352, 281, 293, 362, 257, 574, 13, 51818], "temperature": 0.0, "avg_logprob": -0.20385128518809442, "compression_ratio": 1.7096774193548387, "no_speech_prob": 0.06749098747968674}, {"id": 206, "seek": 105804, "start": 1058.04, "end": 1065.24, "text": " I think if you go to code.quarkus.io, then you can see a list of supported extensions", "tokens": [50364, 286, 519, 498, 291, 352, 281, 3089, 13, 358, 809, 301, 13, 1004, 11, 550, 291, 393, 536, 257, 1329, 295, 8104, 25129, 50724], "temperature": 0.0, "avg_logprob": -0.30489976671006946, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.19414803385734558}, {"id": 207, "seek": 105804, "start": 1065.24, "end": 1066.24, "text": " in libraries.", "tokens": [50724, 294, 15148, 13, 50774], "temperature": 0.0, "avg_logprob": -0.30489976671006946, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.19414803385734558}, {"id": 208, "seek": 105804, "start": 1066.24, "end": 1071.56, "text": " Do we have time to get some more questions?", "tokens": [50774, 1144, 321, 362, 565, 281, 483, 512, 544, 1651, 30, 51040], "temperature": 0.0, "avg_logprob": -0.30489976671006946, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.19414803385734558}, {"id": 209, "seek": 105804, "start": 1071.56, "end": 1072.56, "text": " One more question.", "tokens": [51040, 1485, 544, 1168, 13, 51090], "temperature": 0.0, "avg_logprob": -0.30489976671006946, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.19414803385734558}, {"id": 210, "seek": 105804, "start": 1072.56, "end": 1073.56, "text": " Sorry.", "tokens": [51090, 4919, 13, 51140], "temperature": 0.0, "avg_logprob": -0.30489976671006946, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.19414803385734558}, {"id": 211, "seek": 105804, "start": 1073.56, "end": 1081.8799999999999, "text": " I was wondering if Worker's Native works with GNI-based providers, sorry, the provider", "tokens": [51140, 286, 390, 6359, 498, 6603, 260, 311, 15093, 1985, 365, 460, 42496, 12, 6032, 11330, 11, 2597, 11, 264, 12398, 51556], "temperature": 0.0, "avg_logprob": -0.30489976671006946, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.19414803385734558}, {"id": 212, "seek": 105804, "start": 1081.8799999999999, "end": 1084.0, "text": " interface, not GNI.", "tokens": [51556, 9226, 11, 406, 460, 42496, 13, 51662], "temperature": 0.0, "avg_logprob": -0.30489976671006946, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.19414803385734558}, {"id": 213, "seek": 105804, "start": 1084.0, "end": 1085.0, "text": " The foreign API?", "tokens": [51662, 440, 5329, 9362, 30, 51712], "temperature": 0.0, "avg_logprob": -0.30489976671006946, "compression_ratio": 1.4504950495049505, "no_speech_prob": 0.19414803385734558}, {"id": 214, "seek": 108500, "start": 1085.0, "end": 1092.0, "text": " No, no, sorry, like classes discovery when you want to load a specific service, SPI,", "tokens": [50364, 883, 11, 572, 11, 2597, 11, 411, 5359, 12114, 562, 291, 528, 281, 3677, 257, 2685, 2643, 11, 8420, 40, 11, 50714], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 215, "seek": 108500, "start": 1092.0, "end": 1098.0, "text": " that's the name, sorry, the service provider interface.", "tokens": [50714, 300, 311, 264, 1315, 11, 2597, 11, 264, 2643, 12398, 9226, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 216, "seek": 108500, "start": 1098.0, "end": 1100.0, "text": " I think I don't know.", "tokens": [51014, 286, 519, 286, 500, 380, 458, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 217, "seek": 108500, "start": 1100.0, "end": 1101.0, "text": " Okay, thank you.", "tokens": [51114, 1033, 11, 1309, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 218, "seek": 108500, "start": 1101.0, "end": 1105.48, "text": " Okay, for the rest of the questions, please feel free to approach me on the break.", "tokens": [51164, 1033, 11, 337, 264, 1472, 295, 264, 1651, 11, 1767, 841, 1737, 281, 3109, 385, 322, 264, 1821, 13, 51388], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 219, "seek": 108500, "start": 1105.48, "end": 1106.48, "text": " Thank you.", "tokens": [51388, 1044, 291, 13, 51438], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 220, "seek": 108500, "start": 1106.48, "end": 1107.48, "text": " Thank you.", "tokens": [51438, 1044, 291, 13, 51488], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 221, "seek": 108500, "start": 1107.48, "end": 1108.48, "text": " Thank you.", "tokens": [51488, 1044, 291, 13, 51538], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 222, "seek": 108500, "start": 1108.48, "end": 1109.48, "text": " Thank you.", "tokens": [51538, 1044, 291, 13, 51588], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 223, "seek": 108500, "start": 1109.48, "end": 1110.48, "text": " Thank you.", "tokens": [51588, 1044, 291, 13, 51638], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 224, "seek": 108500, "start": 1110.48, "end": 1111.48, "text": " Thank you.", "tokens": [51638, 1044, 291, 13, 51688], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 225, "seek": 108500, "start": 1111.48, "end": 1112.48, "text": " Thank you.", "tokens": [51688, 1044, 291, 13, 51738], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 226, "seek": 108500, "start": 1112.48, "end": 1113.48, "text": " Thank you.", "tokens": [51738, 1044, 291, 13, 51788], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 227, "seek": 108500, "start": 1113.48, "end": 1114.48, "text": " Thank you.", "tokens": [51788, 1044, 291, 13, 51838], "temperature": 0.0, "avg_logprob": -0.3337884698032348, "compression_ratio": 1.9408602150537635, "no_speech_prob": 0.09462643414735794}, {"id": 228, "seek": 111448, "start": 1114.48, "end": 1115.48, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 229, "seek": 111448, "start": 1115.48, "end": 1116.48, "text": " Thank you.", "tokens": [50414, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 230, "seek": 111448, "start": 1116.48, "end": 1117.48, "text": " Thank you.", "tokens": [50464, 1044, 291, 13, 50514], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 231, "seek": 111448, "start": 1117.48, "end": 1118.48, "text": " Thank you.", "tokens": [50514, 1044, 291, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 232, "seek": 111448, "start": 1118.48, "end": 1119.48, "text": " Thank you.", "tokens": [50564, 1044, 291, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 233, "seek": 111448, "start": 1119.48, "end": 1120.48, "text": " Thank you.", "tokens": [50614, 1044, 291, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 234, "seek": 111448, "start": 1120.48, "end": 1121.48, "text": " Thank you.", "tokens": [50664, 1044, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 235, "seek": 111448, "start": 1121.48, "end": 1122.48, "text": " Thank you.", "tokens": [50714, 1044, 291, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 236, "seek": 111448, "start": 1122.48, "end": 1123.48, "text": " Thank you.", "tokens": [50764, 1044, 291, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 237, "seek": 111448, "start": 1123.48, "end": 1124.48, "text": " Thank you.", "tokens": [50814, 1044, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 238, "seek": 111448, "start": 1124.48, "end": 1125.48, "text": " Thank you.", "tokens": [50864, 1044, 291, 13, 50914], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 239, "seek": 111448, "start": 1125.48, "end": 1126.48, "text": " Thank you.", "tokens": [50914, 1044, 291, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 240, "seek": 111448, "start": 1126.48, "end": 1127.48, "text": " Thank you.", "tokens": [50964, 1044, 291, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 241, "seek": 111448, "start": 1127.48, "end": 1128.48, "text": " Thank you.", "tokens": [51014, 1044, 291, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 242, "seek": 111448, "start": 1128.48, "end": 1129.48, "text": " Thank you.", "tokens": [51064, 1044, 291, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 243, "seek": 111448, "start": 1129.48, "end": 1130.48, "text": " Thank you.", "tokens": [51114, 1044, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 244, "seek": 111448, "start": 1130.48, "end": 1131.48, "text": " Thank you.", "tokens": [51164, 1044, 291, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 245, "seek": 111448, "start": 1131.48, "end": 1132.48, "text": " Thank you.", "tokens": [51214, 1044, 291, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 246, "seek": 111448, "start": 1132.48, "end": 1133.48, "text": " Thank you.", "tokens": [51264, 1044, 291, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 247, "seek": 111448, "start": 1133.48, "end": 1134.48, "text": " Thank you.", "tokens": [51314, 1044, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 248, "seek": 111448, "start": 1134.48, "end": 1135.48, "text": " Thank you.", "tokens": [51364, 1044, 291, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 249, "seek": 111448, "start": 1135.48, "end": 1136.48, "text": " Thank you.", "tokens": [51414, 1044, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 250, "seek": 111448, "start": 1136.48, "end": 1137.48, "text": " Thank you.", "tokens": [51464, 1044, 291, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 251, "seek": 111448, "start": 1137.48, "end": 1138.48, "text": " Thank you.", "tokens": [51514, 1044, 291, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 252, "seek": 111448, "start": 1138.48, "end": 1139.48, "text": " Thank you.", "tokens": [51564, 1044, 291, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 253, "seek": 111448, "start": 1139.48, "end": 1140.48, "text": " Thank you.", "tokens": [51614, 1044, 291, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 254, "seek": 111448, "start": 1140.48, "end": 1141.48, "text": " Thank you.", "tokens": [51664, 1044, 291, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 255, "seek": 111448, "start": 1141.48, "end": 1142.48, "text": " Thank you.", "tokens": [51714, 1044, 291, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}, {"id": 256, "seek": 111448, "start": 1142.48, "end": 1143.48, "text": " Thank you.", "tokens": [51764, 1044, 291, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06287714251044656, "compression_ratio": 13.25, "no_speech_prob": 0.9873464703559875}], "language": "en"}