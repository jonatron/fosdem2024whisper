{"text": " This is the Kernel Dev Room, just a reminder from time to time. Ready for our next talk, Renzo and Luca are going to talk about LibVPol, create synthetic events for poll select and friends. Hello, I'm Luca Bassi, I'm a student from University of Bologna and today with Professor Renzo Davoli from University of Bologna we will present the LibVPol library. Many programs use the poll and select system calls to wait for events triggered by file descriptor of events. So you can write a library to be like a natural stack or device and you can implement your drop-in replacement function of a system call and use some dynamic library magic to rename the verb t's system call request to their virtual implementation. t seems all good but there is a big caveat that this approach doesn't allow to mix the normal file descriptor using the real file descriptor with the library one to use in the same select and poll and similar system calls. So Professor Renzo Davoli developed the LibVPol library that is a library that permits to define file descriptor whose IO events can be generated at user level. This permits to generate synthetic events for the standard Linux poll select, poll select, etc. system calls and with this library it's possible to mix the real file descriptor with the ones provided by libraries as a parameter of the poll select, etc. system calls. The API of LibVPol is very simple, it's three methods. Vupol create to create Vupol file descriptor, Vupol CTL to change the set of pending events reported by the Vupol file descriptor and Vupol close to close the file descriptor. To work with the LibVPol library needs kernel support for a complete implementation of this feature. There is two possible support to LibVPol, a kernel patch extending the eventfd system call and a kernel model that implement a virtual device, exponent dev slash vupol. The library also provides a fallback implementation but is feature limited and for full support they need a patched kernel or the kernel model implementing the virtual devices. So we had a problem, the problem was to mix a real file descriptor and a file descriptor code file descriptor created by library implementing stacks, implementing virtual devices. We decided to do the nice API for the library but unfortunately it is impossible to have this implementation complete without having a kernel support. The first idea was to extend the feature of eventfd. In fact if you try to code a library like that and you look around the system code and you step into the manual of eventfd the title set create a file descriptor for event notification. That's it. But unfortunately it is not providing ways to create, to set arbitrarily, pull in, pull out, pull out. That's just some way to synchronize processes using counters. So it was chosen because of the finish of the feature. The kernel patch adds to eventfd a third semantics because eventfd has already two semantics, the normal semantics and the semaphore semantics that is able to implement a service like the standard semaphores up, down, and down in the kernel. We had a third way, a third way, a third semantics, a loophole. There should be another way to implement it. So following the standard naming of system codes we have a loophole create, loophole, control and so on. It would be possible to create, to propose the adding of two different system codes, loophole fd create and loophole fd control. But the idea is that we feel that eventfd is the most clear and straightforward way to implement this feature. So out of these extension words we can create the eventfd with the new flag saying we want the semantics of the pole. Then following the semantics of eventfd we have read and write, read, return the current stage of rendering. We use the 64-bit buffer of eventfd as a bitmap of a set. Write is used to change the set of events for the file descriptor. For example you can add the pole in and pole pre using these system codes. So the operation flag add mod del is specified by setting the mod request bits. We had a problem, we had a proposal of solution but we needed to have it working quite fast, quite good. We needed it for our process. So we proposed, we developed another way to have the same service to implement this service as a virtual device. So we have implemented it. If you download, if you install the LibrePole package from Debian Ubuntu you get this module and this module is installed using decay MS. So you can have the service by adding the package after the kernel module. Here the implementation, so we use the LibrePole, the user-level library tries one after the other. If there is eventfd patch it uses eventfd patch. Otherwise if there is the LibrePole device it uses the Ubipole device. At the last resort it uses an emulation. For the device it is possible to open the device and the generation of events is performed by IO control like it's usual for devices. Examples. We work in Internet of Threats. The idea of giving each process the ability to have their own stack inside the process itself so that this process can be a network node by itself. People Peacock's Net is a library which implements a user-level network implementation. Peacock's Net is based off Peacot TCP. There is Peacot TCP plus a glue layer that creates the abstraction of a library-based network stack. We have added LibrePole, we use LibrePole in Peacock's Net so that you can write programs like a terminal emulator which has a main event loop waiting for standard input to send data on the socket and to wait for the socket to send to write on the terminal output. So it wouldn't be possible using other stuff or tricky solution based on unisockets or bytes to synchronize but it would be just on purpose for this. Instead of using LibrePole and extension of the kernel or the device gives a general purpose solution so that we are working to port even LWP as a user-level stack implementation so that we can mix and create applications that can use different stack implementations. Maybe we can create gateways between network streams coming from different network implementations. So to summarize we had a problem to have a file descriptor, real file descriptor and virtual file descriptor working together in PulseSelector, E-Pole and whatever POLU you can invent in the future. Providing POLIN POLAR POPLE and all the POLU events you can create in the future. We have proposed a library giving a nice and easily straightforward interface and we have implemented the proposed implementation and implemented a proposal to be accepted in the kernel. A device driver and an extension to say existing system code. If you want obviously all the source code is publicly available on GitHub. Okay, I think that's all of the questions. I wasn't sure if there were any slides but does this need each individual event loop library to add support for this? Or can you use this with existing event loop libraries like for example SystemD has an event loop library but we need to add explicit support to be able to use V-Pole file descriptors? Or can you plug this in without needing to modify existing event loop libraries to use it? So you create a V-Pole file descriptor and you want to use it with an event loop. Does the event loop need to do anything special? No, absolutely. That's the point. Instead of creating something special to use the POL selector, you use this method. You use the standard, clean syntax of the selector POL or whatever event you're waiting for. System code you won't not use. That's the point. So instead of creating unpublished solutions for the use of that application, this is a general purpose solution for all applications needing to work with select POL. Because you can add extra services to provide the same semantics, the same method to unblock, to signal, and for this system codes. Maybe one more question. Please. Is there any... There's also the new interface in the Linux kernel as IOU ring. Is there anything needed to make this work with IOU ring as well? Or I'm not sure if you've looked at that. I'm not sure. So I'll check and please send the mail or send feedback. I probably missed this, but why didn't you, for example, consider proposing a new E-POL extension? Like a new E-POL system call, for example? It's not an extension for E-POL. I use the standard E-POL like POL or the other. It's a way to signal to POL or E-POL that's never occurred. A common solution for this is to create, for example, a pipe and waiting for a red event on a pipe. And you know that if you receive a red event on a pipe, it means that something has happened. Instead of having this, you can use, you can write a flight description behaving like an event driver, so that you can port your code as is. Because if the driver would have to send POL and VAL, you can synthesize POL and VAL and your E-POL or POL can work in the standard way. With that extra code, it's just to simulate something because it's not possible to do what LibbyPOL does. Another question. As I understand it correctly, it simulates somehow the source of events somehow. But how does it scale? Because you use just one system call in the case of the I.O. control. It's just a system call or using write. It's just another system call somehow. So it doesn't probably not scale, right? So if you want to generate thousands of events, triggering events, it requires a system call each. I say it does scale. It scales as a poll of scales. Because you can use as many fider skaters. For each fider skater, you can have all the events you need. In which means you think there are problems with scaling? Yeah, I mean a poll or an E-POL or whatever scales somehow. But the mechanism on your side to trigger this requires one system call. So here you see another write on the slides. Another one, the other slides. If you saw the write, it's just a system call or using the I.O. control. It's just another system call to trigger this. So you have one event. The solution with the device, you mean using the I.O. control. Yeah, to trigger the event, probably we can do it offline later. Here the last line. No, no, on the previous slide. This one, the write call. Here, right? You see this? This is a system call, the write is a system call. And if you trigger it, it requires a system call. But each aesthetic event requires one system call, right? No. And if I want to simulate millions of... No, no, you don't need the call for each event because it's a bitmap. So you can set the bitmap of an event. You want to be added or set or cleaned. So with one call, you set all the events for one FD. Obviously for different FD, you need different... Right. Next. Thanks. We're out of time. Thank you for your talk. Thank you. And we'll have a five minute break. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.8, "text": " This is the Kernel Dev Room, just a reminder from time to time.", "tokens": [50364, 639, 307, 264, 40224, 338, 9096, 19190, 11, 445, 257, 13548, 490, 565, 281, 565, 13, 50854], "temperature": 0.0, "avg_logprob": -0.4402382095138748, "compression_ratio": 1.4111675126903553, "no_speech_prob": 0.30962756276130676}, {"id": 1, "seek": 0, "start": 9.8, "end": 14.72, "text": " Ready for our next talk, Renzo and Luca are going to talk about LibVPol, create synthetic", "tokens": [50854, 9944, 337, 527, 958, 751, 11, 12883, 4765, 293, 42076, 366, 516, 281, 751, 466, 15834, 53, 47, 401, 11, 1884, 23420, 51100], "temperature": 0.0, "avg_logprob": -0.4402382095138748, "compression_ratio": 1.4111675126903553, "no_speech_prob": 0.30962756276130676}, {"id": 2, "seek": 0, "start": 14.72, "end": 16.76, "text": " events for poll select and friends.", "tokens": [51100, 3931, 337, 6418, 3048, 293, 1855, 13, 51202], "temperature": 0.0, "avg_logprob": -0.4402382095138748, "compression_ratio": 1.4111675126903553, "no_speech_prob": 0.30962756276130676}, {"id": 3, "seek": 0, "start": 16.76, "end": 23.52, "text": " Hello, I'm Luca Bassi, I'm a student from University of Bologna and today with Professor", "tokens": [51202, 2425, 11, 286, 478, 42076, 29626, 72, 11, 286, 478, 257, 3107, 490, 3535, 295, 363, 1132, 629, 293, 965, 365, 8419, 51540], "temperature": 0.0, "avg_logprob": -0.4402382095138748, "compression_ratio": 1.4111675126903553, "no_speech_prob": 0.30962756276130676}, {"id": 4, "seek": 2352, "start": 23.52, "end": 32.44, "text": " Renzo Davoli from University of Bologna we will present the LibVPol library.", "tokens": [50364, 12883, 4765, 3724, 9384, 490, 3535, 295, 363, 1132, 629, 321, 486, 1974, 264, 15834, 53, 47, 401, 6405, 13, 50810], "temperature": 0.0, "avg_logprob": -0.30970540727887835, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.051879409700632095}, {"id": 5, "seek": 2352, "start": 32.44, "end": 39.92, "text": " Many programs use the poll and select system calls to wait for events triggered by file", "tokens": [50810, 5126, 4268, 764, 264, 6418, 293, 3048, 1185, 5498, 281, 1699, 337, 3931, 21710, 538, 3991, 51184], "temperature": 0.0, "avg_logprob": -0.30970540727887835, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.051879409700632095}, {"id": 6, "seek": 2352, "start": 39.92, "end": 41.92, "text": " descriptor of events.", "tokens": [51184, 31280, 284, 295, 3931, 13, 51284], "temperature": 0.0, "avg_logprob": -0.30970540727887835, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.051879409700632095}, {"id": 7, "seek": 2352, "start": 41.92, "end": 51.04, "text": " So you can write a library to be like a natural stack or device and you can implement your", "tokens": [51284, 407, 291, 393, 2464, 257, 6405, 281, 312, 411, 257, 3303, 8630, 420, 4302, 293, 291, 393, 4445, 428, 51740], "temperature": 0.0, "avg_logprob": -0.30970540727887835, "compression_ratio": 1.450261780104712, "no_speech_prob": 0.051879409700632095}, {"id": 8, "seek": 5104, "start": 51.04, "end": 60.879999999999995, "text": " drop-in replacement function of a system call and use some dynamic library magic to", "tokens": [50364, 3270, 12, 259, 14419, 2445, 295, 257, 1185, 818, 293, 764, 512, 8546, 6405, 5585, 281, 50856], "temperature": 0.0, "avg_logprob": -0.44868121828351704, "compression_ratio": 1.51875, "no_speech_prob": 0.00754823163151741}, {"id": 9, "seek": 5104, "start": 60.879999999999995, "end": 69.12, "text": " rename the verb t's system call request to their virtual implementation.", "tokens": [50856, 36741, 264, 9595, 256, 311, 1185, 818, 5308, 281, 641, 6374, 11420, 13, 51268], "temperature": 0.0, "avg_logprob": -0.44868121828351704, "compression_ratio": 1.51875, "no_speech_prob": 0.00754823163151741}, {"id": 10, "seek": 5104, "start": 69.12, "end": 78.6, "text": " t seems all good but there is a big caveat that this approach doesn't allow to mix the", "tokens": [51268, 256, 2544, 439, 665, 457, 456, 307, 257, 955, 43012, 300, 341, 3109, 1177, 380, 2089, 281, 2890, 264, 51742], "temperature": 0.0, "avg_logprob": -0.44868121828351704, "compression_ratio": 1.51875, "no_speech_prob": 0.00754823163151741}, {"id": 11, "seek": 7860, "start": 78.6, "end": 89.0, "text": " normal file descriptor using the real file descriptor with the library one to use in the", "tokens": [50364, 2710, 3991, 31280, 284, 1228, 264, 957, 3991, 31280, 284, 365, 264, 6405, 472, 281, 764, 294, 264, 50884], "temperature": 0.0, "avg_logprob": -0.2283751747824929, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.013352766633033752}, {"id": 12, "seek": 7860, "start": 89.0, "end": 96.0, "text": " same select and poll and similar system calls.", "tokens": [50884, 912, 3048, 293, 6418, 293, 2531, 1185, 5498, 13, 51234], "temperature": 0.0, "avg_logprob": -0.2283751747824929, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.013352766633033752}, {"id": 13, "seek": 7860, "start": 96.0, "end": 103.03999999999999, "text": " So Professor Renzo Davoli developed the LibVPol library that is a library that permits to", "tokens": [51234, 407, 8419, 12883, 4765, 3724, 9384, 4743, 264, 15834, 53, 47, 401, 6405, 300, 307, 257, 6405, 300, 30990, 281, 51586], "temperature": 0.0, "avg_logprob": -0.2283751747824929, "compression_ratio": 1.530612244897959, "no_speech_prob": 0.013352766633033752}, {"id": 14, "seek": 10304, "start": 103.04, "end": 110.92, "text": " define file descriptor whose IO events can be generated at user level.", "tokens": [50364, 6964, 3991, 31280, 284, 6104, 286, 46, 3931, 393, 312, 10833, 412, 4195, 1496, 13, 50758], "temperature": 0.0, "avg_logprob": -0.35301169033708246, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.07569444179534912}, {"id": 15, "seek": 10304, "start": 110.92, "end": 118.88000000000001, "text": " This permits to generate synthetic events for the standard Linux poll select, poll select,", "tokens": [50758, 639, 30990, 281, 8460, 23420, 3931, 337, 264, 3832, 18734, 6418, 3048, 11, 6418, 3048, 11, 51156], "temperature": 0.0, "avg_logprob": -0.35301169033708246, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.07569444179534912}, {"id": 16, "seek": 10304, "start": 118.88000000000001, "end": 127.16000000000001, "text": " etc. system calls and with this library it's possible to mix the real file descriptor with", "tokens": [51156, 5183, 13, 1185, 5498, 293, 365, 341, 6405, 309, 311, 1944, 281, 2890, 264, 957, 3991, 31280, 284, 365, 51570], "temperature": 0.0, "avg_logprob": -0.35301169033708246, "compression_ratio": 1.5365853658536586, "no_speech_prob": 0.07569444179534912}, {"id": 17, "seek": 12716, "start": 127.16, "end": 137.4, "text": " the ones provided by libraries as a parameter of the poll select, etc. system calls.", "tokens": [50364, 264, 2306, 5649, 538, 15148, 382, 257, 13075, 295, 264, 6418, 3048, 11, 5183, 13, 1185, 5498, 13, 50876], "temperature": 0.0, "avg_logprob": -0.28067927574043844, "compression_ratio": 1.3832335329341316, "no_speech_prob": 0.020732790231704712}, {"id": 18, "seek": 12716, "start": 137.4, "end": 143.4, "text": " The API of LibVPol is very simple, it's three methods.", "tokens": [50876, 440, 9362, 295, 15834, 53, 47, 401, 307, 588, 2199, 11, 309, 311, 1045, 7150, 13, 51176], "temperature": 0.0, "avg_logprob": -0.28067927574043844, "compression_ratio": 1.3832335329341316, "no_speech_prob": 0.020732790231704712}, {"id": 19, "seek": 12716, "start": 143.4, "end": 153.32, "text": " Vupol create to create Vupol file descriptor, Vupol CTL to change the set of pending events", "tokens": [51176, 691, 1010, 401, 1884, 281, 1884, 691, 1010, 401, 3991, 31280, 284, 11, 691, 1010, 401, 19529, 43, 281, 1319, 264, 992, 295, 32110, 3931, 51672], "temperature": 0.0, "avg_logprob": -0.28067927574043844, "compression_ratio": 1.3832335329341316, "no_speech_prob": 0.020732790231704712}, {"id": 20, "seek": 15332, "start": 153.32, "end": 163.23999999999998, "text": " reported by the Vupol file descriptor and Vupol close to close the file descriptor.", "tokens": [50364, 7055, 538, 264, 691, 1010, 401, 3991, 31280, 284, 293, 691, 1010, 401, 1998, 281, 1998, 264, 3991, 31280, 284, 13, 50860], "temperature": 0.0, "avg_logprob": -0.22512930211886553, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.06996436417102814}, {"id": 21, "seek": 15332, "start": 163.23999999999998, "end": 170.04, "text": " To work with the LibVPol library needs kernel support for a complete implementation of this", "tokens": [50860, 1407, 589, 365, 264, 15834, 53, 47, 401, 6405, 2203, 28256, 1406, 337, 257, 3566, 11420, 295, 341, 51200], "temperature": 0.0, "avg_logprob": -0.22512930211886553, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.06996436417102814}, {"id": 22, "seek": 15332, "start": 170.04, "end": 171.6, "text": " feature.", "tokens": [51200, 4111, 13, 51278], "temperature": 0.0, "avg_logprob": -0.22512930211886553, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.06996436417102814}, {"id": 23, "seek": 15332, "start": 171.6, "end": 181.14, "text": " There is two possible support to LibVPol, a kernel patch extending the eventfd system", "tokens": [51278, 821, 307, 732, 1944, 1406, 281, 15834, 53, 47, 401, 11, 257, 28256, 9972, 24360, 264, 2280, 69, 67, 1185, 51755], "temperature": 0.0, "avg_logprob": -0.22512930211886553, "compression_ratio": 1.5517241379310345, "no_speech_prob": 0.06996436417102814}, {"id": 24, "seek": 18114, "start": 181.14, "end": 190.22, "text": " call and a kernel model that implement a virtual device, exponent dev slash vupol.", "tokens": [50364, 818, 293, 257, 28256, 2316, 300, 4445, 257, 6374, 4302, 11, 37871, 1905, 17330, 371, 1010, 401, 13, 50818], "temperature": 0.0, "avg_logprob": -0.4397623538970947, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.012882864102721214}, {"id": 25, "seek": 18114, "start": 190.22, "end": 199.66, "text": " The library also provides a fallback implementation but is feature limited and for full support", "tokens": [50818, 440, 6405, 611, 6417, 257, 2100, 3207, 11420, 457, 307, 4111, 5567, 293, 337, 1577, 1406, 51290], "temperature": 0.0, "avg_logprob": -0.4397623538970947, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.012882864102721214}, {"id": 26, "seek": 19966, "start": 199.66, "end": 223.85999999999999, "text": " they need a patched kernel or the kernel model implementing the virtual devices.", "tokens": [50364, 436, 643, 257, 9972, 292, 28256, 420, 264, 28256, 2316, 18114, 264, 6374, 5759, 13, 51574], "temperature": 0.0, "avg_logprob": -0.26155092841700506, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.17851996421813965}, {"id": 27, "seek": 22386, "start": 223.86, "end": 230.46, "text": " So we had a problem, the problem was to mix a real file descriptor and a file descriptor", "tokens": [50364, 407, 321, 632, 257, 1154, 11, 264, 1154, 390, 281, 2890, 257, 957, 3991, 31280, 284, 293, 257, 3991, 31280, 284, 50694], "temperature": 0.0, "avg_logprob": -0.2330762030373157, "compression_ratio": 1.6751269035532994, "no_speech_prob": 0.4086282253265381}, {"id": 28, "seek": 22386, "start": 230.46, "end": 239.18, "text": " code file descriptor created by library implementing stacks, implementing virtual devices.", "tokens": [50694, 3089, 3991, 31280, 284, 2942, 538, 6405, 18114, 30792, 11, 18114, 6374, 5759, 13, 51130], "temperature": 0.0, "avg_logprob": -0.2330762030373157, "compression_ratio": 1.6751269035532994, "no_speech_prob": 0.4086282253265381}, {"id": 29, "seek": 22386, "start": 239.18, "end": 247.18, "text": " We decided to do the nice API for the library but unfortunately it is impossible to have", "tokens": [51130, 492, 3047, 281, 360, 264, 1481, 9362, 337, 264, 6405, 457, 7015, 309, 307, 6243, 281, 362, 51530], "temperature": 0.0, "avg_logprob": -0.2330762030373157, "compression_ratio": 1.6751269035532994, "no_speech_prob": 0.4086282253265381}, {"id": 30, "seek": 22386, "start": 247.18, "end": 253.02, "text": " this implementation complete without having a kernel support.", "tokens": [51530, 341, 11420, 3566, 1553, 1419, 257, 28256, 1406, 13, 51822], "temperature": 0.0, "avg_logprob": -0.2330762030373157, "compression_ratio": 1.6751269035532994, "no_speech_prob": 0.4086282253265381}, {"id": 31, "seek": 25302, "start": 253.02, "end": 260.86, "text": " The first idea was to extend the feature of eventfd.", "tokens": [50364, 440, 700, 1558, 390, 281, 10101, 264, 4111, 295, 2280, 69, 67, 13, 50756], "temperature": 0.0, "avg_logprob": -0.2827446496308739, "compression_ratio": 1.55625, "no_speech_prob": 0.1691702902317047}, {"id": 32, "seek": 25302, "start": 260.86, "end": 267.66, "text": " In fact if you try to code a library like that and you look around the system code and", "tokens": [50756, 682, 1186, 498, 291, 853, 281, 3089, 257, 6405, 411, 300, 293, 291, 574, 926, 264, 1185, 3089, 293, 51096], "temperature": 0.0, "avg_logprob": -0.2827446496308739, "compression_ratio": 1.55625, "no_speech_prob": 0.1691702902317047}, {"id": 33, "seek": 25302, "start": 267.66, "end": 276.62, "text": " you step into the manual of eventfd the title set create a file descriptor for event notification.", "tokens": [51096, 291, 1823, 666, 264, 9688, 295, 2280, 69, 67, 264, 4876, 992, 1884, 257, 3991, 31280, 284, 337, 2280, 11554, 13, 51544], "temperature": 0.0, "avg_logprob": -0.2827446496308739, "compression_ratio": 1.55625, "no_speech_prob": 0.1691702902317047}, {"id": 34, "seek": 25302, "start": 276.62, "end": 277.62, "text": " That's it.", "tokens": [51544, 663, 311, 309, 13, 51594], "temperature": 0.0, "avg_logprob": -0.2827446496308739, "compression_ratio": 1.55625, "no_speech_prob": 0.1691702902317047}, {"id": 35, "seek": 27762, "start": 277.62, "end": 285.62, "text": " But unfortunately it is not providing ways to create, to set arbitrarily, pull in, pull", "tokens": [50364, 583, 7015, 309, 307, 406, 6530, 2098, 281, 1884, 11, 281, 992, 19071, 3289, 11, 2235, 294, 11, 2235, 50764], "temperature": 0.0, "avg_logprob": -0.3300859188211375, "compression_ratio": 1.46, "no_speech_prob": 0.01252496987581253}, {"id": 36, "seek": 27762, "start": 285.62, "end": 287.54, "text": " out, pull out.", "tokens": [50764, 484, 11, 2235, 484, 13, 50860], "temperature": 0.0, "avg_logprob": -0.3300859188211375, "compression_ratio": 1.46, "no_speech_prob": 0.01252496987581253}, {"id": 37, "seek": 27762, "start": 287.54, "end": 298.22, "text": " That's just some way to synchronize processes using counters.", "tokens": [50860, 663, 311, 445, 512, 636, 281, 19331, 1125, 7555, 1228, 39338, 13, 51394], "temperature": 0.0, "avg_logprob": -0.3300859188211375, "compression_ratio": 1.46, "no_speech_prob": 0.01252496987581253}, {"id": 38, "seek": 27762, "start": 298.22, "end": 304.78000000000003, "text": " So it was chosen because of the finish of the feature.", "tokens": [51394, 407, 309, 390, 8614, 570, 295, 264, 2413, 295, 264, 4111, 13, 51722], "temperature": 0.0, "avg_logprob": -0.3300859188211375, "compression_ratio": 1.46, "no_speech_prob": 0.01252496987581253}, {"id": 39, "seek": 30478, "start": 304.78, "end": 314.7, "text": " The kernel patch adds to eventfd a third semantics because eventfd has already two semantics,", "tokens": [50364, 440, 28256, 9972, 10860, 281, 2280, 69, 67, 257, 2636, 4361, 45298, 570, 2280, 69, 67, 575, 1217, 732, 4361, 45298, 11, 50860], "temperature": 0.0, "avg_logprob": -0.23935578763484955, "compression_ratio": 1.6394557823129252, "no_speech_prob": 0.051451344043016434}, {"id": 40, "seek": 30478, "start": 314.7, "end": 321.85999999999996, "text": " the normal semantics and the semaphore semantics that is able to implement a service like the", "tokens": [50860, 264, 2710, 4361, 45298, 293, 264, 4361, 13957, 418, 4361, 45298, 300, 307, 1075, 281, 4445, 257, 2643, 411, 264, 51218], "temperature": 0.0, "avg_logprob": -0.23935578763484955, "compression_ratio": 1.6394557823129252, "no_speech_prob": 0.051451344043016434}, {"id": 41, "seek": 30478, "start": 321.85999999999996, "end": 327.09999999999997, "text": " standard semaphores up, down, and down in the kernel.", "tokens": [51218, 3832, 4361, 13957, 2706, 493, 11, 760, 11, 293, 760, 294, 264, 28256, 13, 51480], "temperature": 0.0, "avg_logprob": -0.23935578763484955, "compression_ratio": 1.6394557823129252, "no_speech_prob": 0.051451344043016434}, {"id": 42, "seek": 32710, "start": 327.1, "end": 338.06, "text": " We had a third way, a third way, a third semantics, a loophole.", "tokens": [50364, 492, 632, 257, 2636, 636, 11, 257, 2636, 636, 11, 257, 2636, 4361, 45298, 11, 257, 6367, 14094, 13, 50912], "temperature": 0.0, "avg_logprob": -0.38229091831895173, "compression_ratio": 1.5547445255474452, "no_speech_prob": 0.031412214040756226}, {"id": 43, "seek": 32710, "start": 338.06, "end": 340.38, "text": " There should be another way to implement it.", "tokens": [50912, 821, 820, 312, 1071, 636, 281, 4445, 309, 13, 51028], "temperature": 0.0, "avg_logprob": -0.38229091831895173, "compression_ratio": 1.5547445255474452, "no_speech_prob": 0.031412214040756226}, {"id": 44, "seek": 32710, "start": 340.38, "end": 350.18, "text": " So following the standard naming of system codes we have a loophole create, loophole,", "tokens": [51028, 407, 3480, 264, 3832, 25290, 295, 1185, 14211, 321, 362, 257, 6367, 14094, 1884, 11, 6367, 14094, 11, 51518], "temperature": 0.0, "avg_logprob": -0.38229091831895173, "compression_ratio": 1.5547445255474452, "no_speech_prob": 0.031412214040756226}, {"id": 45, "seek": 32710, "start": 350.18, "end": 352.18, "text": " control and so on.", "tokens": [51518, 1969, 293, 370, 322, 13, 51618], "temperature": 0.0, "avg_logprob": -0.38229091831895173, "compression_ratio": 1.5547445255474452, "no_speech_prob": 0.031412214040756226}, {"id": 46, "seek": 35218, "start": 352.18, "end": 360.1, "text": " It would be possible to create, to propose the adding of two different system codes,", "tokens": [50364, 467, 576, 312, 1944, 281, 1884, 11, 281, 17421, 264, 5127, 295, 732, 819, 1185, 14211, 11, 50760], "temperature": 0.0, "avg_logprob": -0.2991791694395004, "compression_ratio": 1.5031446540880504, "no_speech_prob": 0.00931047834455967}, {"id": 47, "seek": 35218, "start": 360.1, "end": 364.46000000000004, "text": " loophole fd create and loophole fd control.", "tokens": [50760, 6367, 14094, 283, 67, 1884, 293, 6367, 14094, 283, 67, 1969, 13, 50978], "temperature": 0.0, "avg_logprob": -0.2991791694395004, "compression_ratio": 1.5031446540880504, "no_speech_prob": 0.00931047834455967}, {"id": 48, "seek": 35218, "start": 364.46000000000004, "end": 374.86, "text": " But the idea is that we feel that eventfd is the most clear and straightforward way", "tokens": [50978, 583, 264, 1558, 307, 300, 321, 841, 300, 2280, 69, 67, 307, 264, 881, 1850, 293, 15325, 636, 51498], "temperature": 0.0, "avg_logprob": -0.2991791694395004, "compression_ratio": 1.5031446540880504, "no_speech_prob": 0.00931047834455967}, {"id": 49, "seek": 35218, "start": 374.86, "end": 378.66, "text": " to implement this feature.", "tokens": [51498, 281, 4445, 341, 4111, 13, 51688], "temperature": 0.0, "avg_logprob": -0.2991791694395004, "compression_ratio": 1.5031446540880504, "no_speech_prob": 0.00931047834455967}, {"id": 50, "seek": 37866, "start": 378.66, "end": 390.74, "text": " So out of these extension words we can create the eventfd with the new flag saying we want", "tokens": [50364, 407, 484, 295, 613, 10320, 2283, 321, 393, 1884, 264, 2280, 69, 67, 365, 264, 777, 7166, 1566, 321, 528, 50968], "temperature": 0.0, "avg_logprob": -0.3859284197697874, "compression_ratio": 1.5804195804195804, "no_speech_prob": 0.01465979777276516}, {"id": 51, "seek": 37866, "start": 390.74, "end": 394.94000000000005, "text": " the semantics of the pole.", "tokens": [50968, 264, 4361, 45298, 295, 264, 13208, 13, 51178], "temperature": 0.0, "avg_logprob": -0.3859284197697874, "compression_ratio": 1.5804195804195804, "no_speech_prob": 0.01465979777276516}, {"id": 52, "seek": 37866, "start": 394.94000000000005, "end": 404.46000000000004, "text": " Then following the semantics of eventfd we have read and write, read, return the current", "tokens": [51178, 1396, 3480, 264, 4361, 45298, 295, 2280, 69, 67, 321, 362, 1401, 293, 2464, 11, 1401, 11, 2736, 264, 2190, 51654], "temperature": 0.0, "avg_logprob": -0.3859284197697874, "compression_ratio": 1.5804195804195804, "no_speech_prob": 0.01465979777276516}, {"id": 53, "seek": 37866, "start": 404.46000000000004, "end": 407.74, "text": " stage of rendering.", "tokens": [51654, 3233, 295, 22407, 13, 51818], "temperature": 0.0, "avg_logprob": -0.3859284197697874, "compression_ratio": 1.5804195804195804, "no_speech_prob": 0.01465979777276516}, {"id": 54, "seek": 40774, "start": 407.74, "end": 415.90000000000003, "text": " We use the 64-bit buffer of eventfd as a bitmap of a set.", "tokens": [50364, 492, 764, 264, 12145, 12, 5260, 21762, 295, 2280, 69, 67, 382, 257, 857, 24223, 295, 257, 992, 13, 50772], "temperature": 0.0, "avg_logprob": -0.23105075359344482, "compression_ratio": 1.2653061224489797, "no_speech_prob": 0.02778647281229496}, {"id": 55, "seek": 40774, "start": 415.90000000000003, "end": 428.46000000000004, "text": " Write is used to change the set of events for the file descriptor.", "tokens": [50772, 23499, 307, 1143, 281, 1319, 264, 992, 295, 3931, 337, 264, 3991, 31280, 284, 13, 51400], "temperature": 0.0, "avg_logprob": -0.23105075359344482, "compression_ratio": 1.2653061224489797, "no_speech_prob": 0.02778647281229496}, {"id": 56, "seek": 42846, "start": 428.46, "end": 438.78, "text": " For example you can add the pole in and pole pre using these system codes.", "tokens": [50364, 1171, 1365, 291, 393, 909, 264, 13208, 294, 293, 13208, 659, 1228, 613, 1185, 14211, 13, 50880], "temperature": 0.0, "avg_logprob": -0.5727307670994809, "compression_ratio": 1.3508771929824561, "no_speech_prob": 0.07000911235809326}, {"id": 57, "seek": 42846, "start": 438.78, "end": 456.85999999999996, "text": " So the operation flag add mod del is specified by setting the mod request bits.", "tokens": [50880, 407, 264, 6916, 7166, 909, 1072, 1103, 307, 22206, 538, 3287, 264, 1072, 5308, 9239, 13, 51784], "temperature": 0.0, "avg_logprob": -0.5727307670994809, "compression_ratio": 1.3508771929824561, "no_speech_prob": 0.07000911235809326}, {"id": 58, "seek": 45686, "start": 456.86, "end": 469.02000000000004, "text": " We had a problem, we had a proposal of solution but we needed to have it working quite fast,", "tokens": [50364, 492, 632, 257, 1154, 11, 321, 632, 257, 11494, 295, 3827, 457, 321, 2978, 281, 362, 309, 1364, 1596, 2370, 11, 50972], "temperature": 0.0, "avg_logprob": -0.3271381378173828, "compression_ratio": 1.5632911392405062, "no_speech_prob": 0.18553054332733154}, {"id": 59, "seek": 45686, "start": 469.02000000000004, "end": 470.02000000000004, "text": " quite good.", "tokens": [50972, 1596, 665, 13, 51022], "temperature": 0.0, "avg_logprob": -0.3271381378173828, "compression_ratio": 1.5632911392405062, "no_speech_prob": 0.18553054332733154}, {"id": 60, "seek": 45686, "start": 470.02000000000004, "end": 473.54, "text": " We needed it for our process.", "tokens": [51022, 492, 2978, 309, 337, 527, 1399, 13, 51198], "temperature": 0.0, "avg_logprob": -0.3271381378173828, "compression_ratio": 1.5632911392405062, "no_speech_prob": 0.18553054332733154}, {"id": 61, "seek": 45686, "start": 473.54, "end": 482.3, "text": " So we proposed, we developed another way to have the same service to implement this service", "tokens": [51198, 407, 321, 10348, 11, 321, 4743, 1071, 636, 281, 362, 264, 912, 2643, 281, 4445, 341, 2643, 51636], "temperature": 0.0, "avg_logprob": -0.3271381378173828, "compression_ratio": 1.5632911392405062, "no_speech_prob": 0.18553054332733154}, {"id": 62, "seek": 45686, "start": 482.3, "end": 484.66, "text": " as a virtual device.", "tokens": [51636, 382, 257, 6374, 4302, 13, 51754], "temperature": 0.0, "avg_logprob": -0.3271381378173828, "compression_ratio": 1.5632911392405062, "no_speech_prob": 0.18553054332733154}, {"id": 63, "seek": 48466, "start": 484.66, "end": 487.74, "text": " So we have implemented it.", "tokens": [50364, 407, 321, 362, 12270, 309, 13, 50518], "temperature": 0.0, "avg_logprob": -0.4544803195529514, "compression_ratio": 1.28125, "no_speech_prob": 0.0712573230266571}, {"id": 64, "seek": 48466, "start": 487.74, "end": 505.86, "text": " If you download, if you install the LibrePole package from Debian Ubuntu you get this module", "tokens": [50518, 759, 291, 5484, 11, 498, 291, 3625, 264, 15834, 265, 47, 4812, 7372, 490, 1346, 20196, 30230, 45605, 291, 483, 341, 10088, 51424], "temperature": 0.0, "avg_logprob": -0.4544803195529514, "compression_ratio": 1.28125, "no_speech_prob": 0.0712573230266571}, {"id": 65, "seek": 48466, "start": 505.86, "end": 511.1, "text": " and this module is installed using decay MS.", "tokens": [51424, 293, 341, 10088, 307, 8899, 1228, 21039, 7395, 13, 51686], "temperature": 0.0, "avg_logprob": -0.4544803195529514, "compression_ratio": 1.28125, "no_speech_prob": 0.0712573230266571}, {"id": 66, "seek": 51110, "start": 511.1, "end": 522.66, "text": " So you can have the service by adding the package after the kernel module.", "tokens": [50364, 407, 291, 393, 362, 264, 2643, 538, 5127, 264, 7372, 934, 264, 28256, 10088, 13, 50942], "temperature": 0.0, "avg_logprob": -0.25389427834368766, "compression_ratio": 1.359375, "no_speech_prob": 0.029905397444963455}, {"id": 67, "seek": 51110, "start": 522.66, "end": 534.62, "text": " Here the implementation, so we use the LibrePole, the user-level library tries one after the", "tokens": [50942, 1692, 264, 11420, 11, 370, 321, 764, 264, 15834, 265, 47, 4812, 11, 264, 4195, 12, 12418, 6405, 9898, 472, 934, 264, 51540], "temperature": 0.0, "avg_logprob": -0.25389427834368766, "compression_ratio": 1.359375, "no_speech_prob": 0.029905397444963455}, {"id": 68, "seek": 51110, "start": 534.62, "end": 535.62, "text": " other.", "tokens": [51540, 661, 13, 51590], "temperature": 0.0, "avg_logprob": -0.25389427834368766, "compression_ratio": 1.359375, "no_speech_prob": 0.029905397444963455}, {"id": 69, "seek": 53562, "start": 535.62, "end": 541.42, "text": " If there is eventfd patch it uses eventfd patch.", "tokens": [50364, 759, 456, 307, 2280, 69, 67, 9972, 309, 4960, 2280, 69, 67, 9972, 13, 50654], "temperature": 0.0, "avg_logprob": -0.3271833226300668, "compression_ratio": 1.7074829931972788, "no_speech_prob": 0.027618616819381714}, {"id": 70, "seek": 53562, "start": 541.42, "end": 548.3, "text": " Otherwise if there is the LibrePole device it uses the Ubipole device.", "tokens": [50654, 10328, 498, 456, 307, 264, 15834, 265, 47, 4812, 4302, 309, 4960, 264, 30230, 647, 4812, 4302, 13, 50998], "temperature": 0.0, "avg_logprob": -0.3271833226300668, "compression_ratio": 1.7074829931972788, "no_speech_prob": 0.027618616819381714}, {"id": 71, "seek": 53562, "start": 548.3, "end": 554.3, "text": " At the last resort it uses an emulation.", "tokens": [50998, 1711, 264, 1036, 19606, 309, 4960, 364, 846, 2776, 13, 51298], "temperature": 0.0, "avg_logprob": -0.3271833226300668, "compression_ratio": 1.7074829931972788, "no_speech_prob": 0.027618616819381714}, {"id": 72, "seek": 53562, "start": 554.3, "end": 561.1800000000001, "text": " For the device it is possible to open the device and the generation of events is performed", "tokens": [51298, 1171, 264, 4302, 309, 307, 1944, 281, 1269, 264, 4302, 293, 264, 5125, 295, 3931, 307, 10332, 51642], "temperature": 0.0, "avg_logprob": -0.3271833226300668, "compression_ratio": 1.7074829931972788, "no_speech_prob": 0.027618616819381714}, {"id": 73, "seek": 56118, "start": 561.18, "end": 570.6999999999999, "text": " by IO control like it's usual for devices.", "tokens": [50364, 538, 39839, 1969, 411, 309, 311, 7713, 337, 5759, 13, 50840], "temperature": 0.0, "avg_logprob": -0.32864980494722407, "compression_ratio": 1.2954545454545454, "no_speech_prob": 0.07986762374639511}, {"id": 74, "seek": 56118, "start": 570.6999999999999, "end": 572.6999999999999, "text": " Examples.", "tokens": [50840, 48591, 13, 50940], "temperature": 0.0, "avg_logprob": -0.32864980494722407, "compression_ratio": 1.2954545454545454, "no_speech_prob": 0.07986762374639511}, {"id": 75, "seek": 56118, "start": 572.6999999999999, "end": 574.5799999999999, "text": " We work in Internet of Threats.", "tokens": [50940, 492, 589, 294, 7703, 295, 334, 620, 82, 13, 51034], "temperature": 0.0, "avg_logprob": -0.32864980494722407, "compression_ratio": 1.2954545454545454, "no_speech_prob": 0.07986762374639511}, {"id": 76, "seek": 56118, "start": 574.5799999999999, "end": 582.8199999999999, "text": " The idea of giving each process the ability to have their own stack inside the process", "tokens": [51034, 440, 1558, 295, 2902, 1184, 1399, 264, 3485, 281, 362, 641, 1065, 8630, 1854, 264, 1399, 51446], "temperature": 0.0, "avg_logprob": -0.32864980494722407, "compression_ratio": 1.2954545454545454, "no_speech_prob": 0.07986762374639511}, {"id": 77, "seek": 58282, "start": 582.82, "end": 592.1, "text": " itself so that this process can be a network node by itself.", "tokens": [50364, 2564, 370, 300, 341, 1399, 393, 312, 257, 3209, 9984, 538, 2564, 13, 50828], "temperature": 0.0, "avg_logprob": -0.3767751657737876, "compression_ratio": 1.4384615384615385, "no_speech_prob": 0.09692663699388504}, {"id": 78, "seek": 58282, "start": 592.1, "end": 602.5400000000001, "text": " People Peacock's Net is a library which implements a user-level network implementation.", "tokens": [50828, 3432, 2396, 326, 1560, 311, 6188, 307, 257, 6405, 597, 704, 17988, 257, 4195, 12, 12418, 3209, 11420, 13, 51350], "temperature": 0.0, "avg_logprob": -0.3767751657737876, "compression_ratio": 1.4384615384615385, "no_speech_prob": 0.09692663699388504}, {"id": 79, "seek": 58282, "start": 602.5400000000001, "end": 606.5400000000001, "text": " Peacock's Net is based off Peacot TCP.", "tokens": [51350, 2396, 326, 1560, 311, 6188, 307, 2361, 766, 2396, 326, 310, 48965, 13, 51550], "temperature": 0.0, "avg_logprob": -0.3767751657737876, "compression_ratio": 1.4384615384615385, "no_speech_prob": 0.09692663699388504}, {"id": 80, "seek": 60654, "start": 606.54, "end": 620.78, "text": " There is Peacot TCP plus a glue layer that creates the abstraction of a library-based", "tokens": [50364, 821, 307, 2396, 326, 310, 48965, 1804, 257, 8998, 4583, 300, 7829, 264, 37765, 295, 257, 6405, 12, 6032, 51076], "temperature": 0.0, "avg_logprob": -0.23469289711543492, "compression_ratio": 1.3286713286713288, "no_speech_prob": 0.009259063750505447}, {"id": 81, "seek": 60654, "start": 620.78, "end": 623.78, "text": " network stack.", "tokens": [51076, 3209, 8630, 13, 51226], "temperature": 0.0, "avg_logprob": -0.23469289711543492, "compression_ratio": 1.3286713286713288, "no_speech_prob": 0.009259063750505447}, {"id": 82, "seek": 60654, "start": 623.78, "end": 632.86, "text": " We have added LibrePole, we use LibrePole in Peacock's Net so that you can write programs", "tokens": [51226, 492, 362, 3869, 15834, 265, 47, 4812, 11, 321, 764, 15834, 265, 47, 4812, 294, 2396, 326, 1560, 311, 6188, 370, 300, 291, 393, 2464, 4268, 51680], "temperature": 0.0, "avg_logprob": -0.23469289711543492, "compression_ratio": 1.3286713286713288, "no_speech_prob": 0.009259063750505447}, {"id": 83, "seek": 63286, "start": 632.86, "end": 640.26, "text": " like a terminal emulator which has a main event loop waiting for standard input to send", "tokens": [50364, 411, 257, 14709, 846, 16381, 597, 575, 257, 2135, 2280, 6367, 3806, 337, 3832, 4846, 281, 2845, 50734], "temperature": 0.0, "avg_logprob": -0.2575757162911551, "compression_ratio": 1.5535714285714286, "no_speech_prob": 0.007835214026272297}, {"id": 84, "seek": 63286, "start": 640.26, "end": 647.38, "text": " data on the socket and to wait for the socket to send to write on the terminal output.", "tokens": [50734, 1412, 322, 264, 19741, 293, 281, 1699, 337, 264, 19741, 281, 2845, 281, 2464, 322, 264, 14709, 5598, 13, 51090], "temperature": 0.0, "avg_logprob": -0.2575757162911551, "compression_ratio": 1.5535714285714286, "no_speech_prob": 0.007835214026272297}, {"id": 85, "seek": 64738, "start": 647.38, "end": 664.82, "text": " So it wouldn't be possible using other stuff or tricky solution based on unisockets or", "tokens": [50364, 407, 309, 2759, 380, 312, 1944, 1228, 661, 1507, 420, 12414, 3827, 2361, 322, 517, 271, 1560, 1385, 420, 51236], "temperature": 0.0, "avg_logprob": -0.37680978041428786, "compression_ratio": 1.3070175438596492, "no_speech_prob": 0.022625433281064034}, {"id": 86, "seek": 64738, "start": 664.82, "end": 675.18, "text": " bytes to synchronize but it would be just on purpose for this.", "tokens": [51236, 36088, 281, 19331, 1125, 457, 309, 576, 312, 445, 322, 4334, 337, 341, 13, 51754], "temperature": 0.0, "avg_logprob": -0.37680978041428786, "compression_ratio": 1.3070175438596492, "no_speech_prob": 0.022625433281064034}, {"id": 87, "seek": 67518, "start": 675.3, "end": 684.54, "text": " Instead of using LibrePole and extension of the kernel or the device gives a general", "tokens": [50370, 7156, 295, 1228, 15834, 265, 47, 4812, 293, 10320, 295, 264, 28256, 420, 264, 4302, 2709, 257, 2674, 50832], "temperature": 0.0, "avg_logprob": -0.27414555983109906, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.053510621190071106}, {"id": 88, "seek": 67518, "start": 684.54, "end": 696.9399999999999, "text": " purpose solution so that we are working to port even LWP as a user-level stack implementation", "tokens": [50832, 4334, 3827, 370, 300, 321, 366, 1364, 281, 2436, 754, 441, 54, 47, 382, 257, 4195, 12, 12418, 8630, 11420, 51452], "temperature": 0.0, "avg_logprob": -0.27414555983109906, "compression_ratio": 1.3484848484848484, "no_speech_prob": 0.053510621190071106}, {"id": 89, "seek": 69694, "start": 697.1, "end": 705.1, "text": " so that we can mix and create applications that can use different stack implementations.", "tokens": [50372, 370, 300, 321, 393, 2890, 293, 1884, 5821, 300, 393, 764, 819, 8630, 4445, 763, 13, 50772], "temperature": 0.0, "avg_logprob": -0.41786773581253855, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.03303661197423935}, {"id": 90, "seek": 69694, "start": 705.1, "end": 714.3800000000001, "text": " Maybe we can create gateways between network streams coming from different network implementations.", "tokens": [50772, 2704, 321, 393, 1884, 8539, 942, 1296, 3209, 15842, 1348, 490, 819, 3209, 4445, 763, 13, 51236], "temperature": 0.0, "avg_logprob": -0.41786773581253855, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.03303661197423935}, {"id": 91, "seek": 71438, "start": 715.34, "end": 726.74, "text": " So to summarize we had a problem to have a file descriptor, real file descriptor and", "tokens": [50412, 407, 281, 20858, 321, 632, 257, 1154, 281, 362, 257, 3991, 31280, 284, 11, 957, 3991, 31280, 284, 293, 50982], "temperature": 0.0, "avg_logprob": -0.4572369371141706, "compression_ratio": 1.4452554744525548, "no_speech_prob": 0.020495524629950523}, {"id": 92, "seek": 71438, "start": 726.74, "end": 733.9399999999999, "text": " virtual file descriptor working together in PulseSelector, E-Pole and whatever POLU you", "tokens": [50982, 6374, 3991, 31280, 284, 1364, 1214, 294, 430, 19258, 10637, 306, 1672, 11, 462, 12, 47, 4812, 293, 2035, 430, 5046, 52, 291, 51342], "temperature": 0.0, "avg_logprob": -0.4572369371141706, "compression_ratio": 1.4452554744525548, "no_speech_prob": 0.020495524629950523}, {"id": 93, "seek": 71438, "start": 733.9399999999999, "end": 735.5, "text": " can invent in the future.", "tokens": [51342, 393, 7962, 294, 264, 2027, 13, 51420], "temperature": 0.0, "avg_logprob": -0.4572369371141706, "compression_ratio": 1.4452554744525548, "no_speech_prob": 0.020495524629950523}, {"id": 94, "seek": 73550, "start": 736.5, "end": 743.5, "text": " Providing POLIN POLAR POPLE and all the POLU events you can create in the future.", "tokens": [50414, 15685, 2819, 430, 5046, 1464, 430, 5046, 1899, 430, 12059, 2634, 293, 439, 264, 430, 5046, 52, 3931, 291, 393, 1884, 294, 264, 2027, 13, 50764], "temperature": 0.0, "avg_logprob": -0.48517799377441406, "compression_ratio": 1.2761194029850746, "no_speech_prob": 0.033016715198755264}, {"id": 95, "seek": 73550, "start": 743.5, "end": 764.18, "text": " We have proposed a library giving a nice and easily straightforward interface and we have", "tokens": [50764, 492, 362, 10348, 257, 6405, 2902, 257, 1481, 293, 3612, 15325, 9226, 293, 321, 362, 51798], "temperature": 0.0, "avg_logprob": -0.48517799377441406, "compression_ratio": 1.2761194029850746, "no_speech_prob": 0.033016715198755264}, {"id": 96, "seek": 76418, "start": 764.9399999999999, "end": 776.8199999999999, "text": " implemented the proposed implementation and implemented a proposal to be accepted in the kernel.", "tokens": [50402, 12270, 264, 10348, 11420, 293, 12270, 257, 11494, 281, 312, 9035, 294, 264, 28256, 13, 50996], "temperature": 0.0, "avg_logprob": -0.4270001435891176, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.019025856629014015}, {"id": 97, "seek": 76418, "start": 776.8199999999999, "end": 788.8599999999999, "text": " A device driver and an extension to say existing system code. If you want obviously all the", "tokens": [50996, 316, 4302, 6787, 293, 364, 10320, 281, 584, 6741, 1185, 3089, 13, 759, 291, 528, 2745, 439, 264, 51598], "temperature": 0.0, "avg_logprob": -0.4270001435891176, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.019025856629014015}, {"id": 98, "seek": 78886, "start": 788.94, "end": 793.74, "text": " source code is publicly available on GitHub.", "tokens": [50368, 4009, 3089, 307, 14843, 2435, 322, 23331, 13, 50608], "temperature": 0.0, "avg_logprob": -0.600644032160441, "compression_ratio": 1.0357142857142858, "no_speech_prob": 0.029092280194163322}, {"id": 99, "seek": 78886, "start": 795.34, "end": 799.0600000000001, "text": " Okay, I think that's all of the questions.", "tokens": [50688, 1033, 11, 286, 519, 300, 311, 439, 295, 264, 1651, 13, 50874], "temperature": 0.0, "avg_logprob": -0.600644032160441, "compression_ratio": 1.0357142857142858, "no_speech_prob": 0.029092280194163322}, {"id": 100, "seek": 81886, "start": 818.86, "end": 834.86, "text": " I wasn't sure if there were any slides but does this need each individual event loop library to add support for this?", "tokens": [50364, 286, 2067, 380, 988, 498, 456, 645, 604, 9788, 457, 775, 341, 643, 1184, 2609, 2280, 6367, 6405, 281, 909, 1406, 337, 341, 30, 51164], "temperature": 0.0, "avg_logprob": -0.35221754180060494, "compression_ratio": 1.581151832460733, "no_speech_prob": 0.03555729240179062}, {"id": 101, "seek": 81886, "start": 834.86, "end": 842.86, "text": " Or can you use this with existing event loop libraries like for example SystemD has an event loop library", "tokens": [51164, 1610, 393, 291, 764, 341, 365, 6741, 2280, 6367, 15148, 411, 337, 1365, 8910, 35, 575, 364, 2280, 6367, 6405, 51564], "temperature": 0.0, "avg_logprob": -0.35221754180060494, "compression_ratio": 1.581151832460733, "no_speech_prob": 0.03555729240179062}, {"id": 102, "seek": 81886, "start": 842.86, "end": 847.38, "text": " but we need to add explicit support to be able to use V-Pole file descriptors?", "tokens": [51564, 457, 321, 643, 281, 909, 13691, 1406, 281, 312, 1075, 281, 764, 691, 12, 47, 4812, 3991, 31280, 830, 30, 51790], "temperature": 0.0, "avg_logprob": -0.35221754180060494, "compression_ratio": 1.581151832460733, "no_speech_prob": 0.03555729240179062}, {"id": 103, "seek": 84738, "start": 847.38, "end": 852.38, "text": " Or can you plug this in without needing to modify existing event loop libraries to use it?", "tokens": [50364, 1610, 393, 291, 5452, 341, 294, 1553, 18006, 281, 16927, 6741, 2280, 6367, 15148, 281, 764, 309, 30, 50614], "temperature": 0.0, "avg_logprob": -0.22405611950418222, "compression_ratio": 1.376, "no_speech_prob": 0.01263089757412672}, {"id": 104, "seek": 84738, "start": 866.38, "end": 873.38, "text": " So you create a V-Pole file descriptor and you want to use it with an event loop.", "tokens": [51314, 407, 291, 1884, 257, 691, 12, 47, 4812, 3991, 31280, 284, 293, 291, 528, 281, 764, 309, 365, 364, 2280, 6367, 13, 51664], "temperature": 0.0, "avg_logprob": -0.22405611950418222, "compression_ratio": 1.376, "no_speech_prob": 0.01263089757412672}, {"id": 105, "seek": 87338, "start": 874.38, "end": 877.38, "text": " Does the event loop need to do anything special?", "tokens": [50414, 4402, 264, 2280, 6367, 643, 281, 360, 1340, 2121, 30, 50564], "temperature": 0.0, "avg_logprob": -0.40361393199247475, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.022165842354297638}, {"id": 106, "seek": 87338, "start": 877.38, "end": 880.38, "text": " No, absolutely. That's the point.", "tokens": [50564, 883, 11, 3122, 13, 663, 311, 264, 935, 13, 50714], "temperature": 0.0, "avg_logprob": -0.40361393199247475, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.022165842354297638}, {"id": 107, "seek": 87338, "start": 880.38, "end": 887.38, "text": " Instead of creating something special to use the POL selector, you use this method.", "tokens": [50714, 7156, 295, 4084, 746, 2121, 281, 764, 264, 430, 5046, 23264, 1672, 11, 291, 764, 341, 3170, 13, 51064], "temperature": 0.0, "avg_logprob": -0.40361393199247475, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.022165842354297638}, {"id": 108, "seek": 87338, "start": 887.38, "end": 899.38, "text": " You use the standard, clean syntax of the selector POL or whatever event you're waiting for.", "tokens": [51064, 509, 764, 264, 3832, 11, 2541, 28431, 295, 264, 23264, 1672, 430, 5046, 420, 2035, 2280, 291, 434, 3806, 337, 13, 51664], "temperature": 0.0, "avg_logprob": -0.40361393199247475, "compression_ratio": 1.4885057471264367, "no_speech_prob": 0.022165842354297638}, {"id": 109, "seek": 89938, "start": 900.38, "end": 904.38, "text": " System code you won't not use. That's the point.", "tokens": [50414, 8910, 3089, 291, 1582, 380, 406, 764, 13, 663, 311, 264, 935, 13, 50614], "temperature": 0.0, "avg_logprob": -0.23661041259765625, "compression_ratio": 1.5073170731707317, "no_speech_prob": 0.002856412436813116}, {"id": 110, "seek": 89938, "start": 904.38, "end": 912.38, "text": " So instead of creating unpublished solutions for the use of that application,", "tokens": [50614, 407, 2602, 295, 4084, 20994, 836, 4173, 6547, 337, 264, 764, 295, 300, 3861, 11, 51014], "temperature": 0.0, "avg_logprob": -0.23661041259765625, "compression_ratio": 1.5073170731707317, "no_speech_prob": 0.002856412436813116}, {"id": 111, "seek": 89938, "start": 912.38, "end": 917.38, "text": " this is a general purpose solution for all applications needing to work with select POL.", "tokens": [51014, 341, 307, 257, 2674, 4334, 3827, 337, 439, 5821, 18006, 281, 589, 365, 3048, 430, 5046, 13, 51264], "temperature": 0.0, "avg_logprob": -0.23661041259765625, "compression_ratio": 1.5073170731707317, "no_speech_prob": 0.002856412436813116}, {"id": 112, "seek": 89938, "start": 917.38, "end": 927.38, "text": " Because you can add extra services to provide the same semantics, the same method to unblock,", "tokens": [51264, 1436, 291, 393, 909, 2857, 3328, 281, 2893, 264, 912, 4361, 45298, 11, 264, 912, 3170, 281, 517, 28830, 11, 51764], "temperature": 0.0, "avg_logprob": -0.23661041259765625, "compression_ratio": 1.5073170731707317, "no_speech_prob": 0.002856412436813116}, {"id": 113, "seek": 92738, "start": 927.38, "end": 932.38, "text": " to signal, and for this system codes.", "tokens": [50364, 281, 6358, 11, 293, 337, 341, 1185, 14211, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2478044950045072, "compression_ratio": 1.425414364640884, "no_speech_prob": 0.025539660826325417}, {"id": 114, "seek": 92738, "start": 935.38, "end": 937.38, "text": " Maybe one more question.", "tokens": [50764, 2704, 472, 544, 1168, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2478044950045072, "compression_ratio": 1.425414364640884, "no_speech_prob": 0.025539660826325417}, {"id": 115, "seek": 92738, "start": 937.38, "end": 938.38, "text": " Please.", "tokens": [50864, 2555, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2478044950045072, "compression_ratio": 1.425414364640884, "no_speech_prob": 0.025539660826325417}, {"id": 116, "seek": 92738, "start": 938.38, "end": 940.38, "text": " Is there any...", "tokens": [50914, 1119, 456, 604, 485, 51014], "temperature": 0.0, "avg_logprob": -0.2478044950045072, "compression_ratio": 1.425414364640884, "no_speech_prob": 0.025539660826325417}, {"id": 117, "seek": 92738, "start": 940.38, "end": 944.38, "text": " There's also the new interface in the Linux kernel as IOU ring.", "tokens": [51014, 821, 311, 611, 264, 777, 9226, 294, 264, 18734, 28256, 382, 286, 4807, 4875, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2478044950045072, "compression_ratio": 1.425414364640884, "no_speech_prob": 0.025539660826325417}, {"id": 118, "seek": 92738, "start": 944.38, "end": 950.38, "text": " Is there anything needed to make this work with IOU ring as well?", "tokens": [51214, 1119, 456, 1340, 2978, 281, 652, 341, 589, 365, 286, 4807, 4875, 382, 731, 30, 51514], "temperature": 0.0, "avg_logprob": -0.2478044950045072, "compression_ratio": 1.425414364640884, "no_speech_prob": 0.025539660826325417}, {"id": 119, "seek": 92738, "start": 950.38, "end": 953.38, "text": " Or I'm not sure if you've looked at that.", "tokens": [51514, 1610, 286, 478, 406, 988, 498, 291, 600, 2956, 412, 300, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2478044950045072, "compression_ratio": 1.425414364640884, "no_speech_prob": 0.025539660826325417}, {"id": 120, "seek": 95338, "start": 953.38, "end": 955.38, "text": " I'm not sure.", "tokens": [50364, 286, 478, 406, 988, 13, 50464], "temperature": 0.0, "avg_logprob": -0.14577404657999674, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.006442772224545479}, {"id": 121, "seek": 95338, "start": 955.38, "end": 963.38, "text": " So I'll check and please send the mail or send feedback.", "tokens": [50464, 407, 286, 603, 1520, 293, 1767, 2845, 264, 10071, 420, 2845, 5824, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14577404657999674, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.006442772224545479}, {"id": 122, "seek": 95338, "start": 965.38, "end": 971.38, "text": " I probably missed this, but why didn't you, for example, consider proposing a new E-POL extension?", "tokens": [50964, 286, 1391, 6721, 341, 11, 457, 983, 994, 380, 291, 11, 337, 1365, 11, 1949, 29939, 257, 777, 462, 12, 47, 5046, 10320, 30, 51264], "temperature": 0.0, "avg_logprob": -0.14577404657999674, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.006442772224545479}, {"id": 123, "seek": 95338, "start": 971.38, "end": 974.38, "text": " Like a new E-POL system call, for example?", "tokens": [51264, 1743, 257, 777, 462, 12, 47, 5046, 1185, 818, 11, 337, 1365, 30, 51414], "temperature": 0.0, "avg_logprob": -0.14577404657999674, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.006442772224545479}, {"id": 124, "seek": 95338, "start": 978.38, "end": 982.38, "text": " It's not an extension for E-POL.", "tokens": [51614, 467, 311, 406, 364, 10320, 337, 462, 12, 47, 5046, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14577404657999674, "compression_ratio": 1.4583333333333333, "no_speech_prob": 0.006442772224545479}, {"id": 125, "seek": 98238, "start": 982.38, "end": 986.38, "text": " I use the standard E-POL like POL or the other.", "tokens": [50364, 286, 764, 264, 3832, 462, 12, 47, 5046, 411, 430, 5046, 420, 264, 661, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17306644996900236, "compression_ratio": 1.5842105263157895, "no_speech_prob": 0.004751119296997786}, {"id": 126, "seek": 98238, "start": 986.38, "end": 993.38, "text": " It's a way to signal to POL or E-POL that's never occurred.", "tokens": [50564, 467, 311, 257, 636, 281, 6358, 281, 430, 5046, 420, 462, 12, 47, 5046, 300, 311, 1128, 11068, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17306644996900236, "compression_ratio": 1.5842105263157895, "no_speech_prob": 0.004751119296997786}, {"id": 127, "seek": 98238, "start": 994.38, "end": 1004.38, "text": " A common solution for this is to create, for example, a pipe and waiting for a red event on a pipe.", "tokens": [50964, 316, 2689, 3827, 337, 341, 307, 281, 1884, 11, 337, 1365, 11, 257, 11240, 293, 3806, 337, 257, 2182, 2280, 322, 257, 11240, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17306644996900236, "compression_ratio": 1.5842105263157895, "no_speech_prob": 0.004751119296997786}, {"id": 128, "seek": 98238, "start": 1004.38, "end": 1010.38, "text": " And you know that if you receive a red event on a pipe, it means that something has happened.", "tokens": [51464, 400, 291, 458, 300, 498, 291, 4774, 257, 2182, 2280, 322, 257, 11240, 11, 309, 1355, 300, 746, 575, 2011, 13, 51764], "temperature": 0.0, "avg_logprob": -0.17306644996900236, "compression_ratio": 1.5842105263157895, "no_speech_prob": 0.004751119296997786}, {"id": 129, "seek": 101038, "start": 1011.38, "end": 1024.38, "text": " Instead of having this, you can use, you can write a flight description behaving like an event driver,", "tokens": [50414, 7156, 295, 1419, 341, 11, 291, 393, 764, 11, 291, 393, 2464, 257, 7018, 3855, 35263, 411, 364, 2280, 6787, 11, 51064], "temperature": 0.0, "avg_logprob": -0.30966136140643424, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005680383183062077}, {"id": 130, "seek": 101038, "start": 1024.38, "end": 1028.38, "text": " so that you can port your code as is.", "tokens": [51064, 370, 300, 291, 393, 2436, 428, 3089, 382, 307, 13, 51264], "temperature": 0.0, "avg_logprob": -0.30966136140643424, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005680383183062077}, {"id": 131, "seek": 101038, "start": 1028.38, "end": 1034.38, "text": " Because if the driver would have to send POL and VAL,", "tokens": [51264, 1436, 498, 264, 6787, 576, 362, 281, 2845, 430, 5046, 293, 691, 3427, 11, 51564], "temperature": 0.0, "avg_logprob": -0.30966136140643424, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.005680383183062077}, {"id": 132, "seek": 103438, "start": 1035.38, "end": 1043.38, "text": " you can synthesize POL and VAL and your E-POL or POL can work in the standard way.", "tokens": [50414, 291, 393, 26617, 1125, 430, 5046, 293, 691, 3427, 293, 428, 462, 12, 47, 5046, 420, 430, 5046, 393, 589, 294, 264, 3832, 636, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13917057730934837, "compression_ratio": 1.3146853146853146, "no_speech_prob": 0.003262534271925688}, {"id": 133, "seek": 103438, "start": 1043.38, "end": 1052.38, "text": " With that extra code, it's just to simulate something because it's not possible to do what LibbyPOL does.", "tokens": [50814, 2022, 300, 2857, 3089, 11, 309, 311, 445, 281, 27817, 746, 570, 309, 311, 406, 1944, 281, 360, 437, 15834, 2322, 47, 5046, 775, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13917057730934837, "compression_ratio": 1.3146853146853146, "no_speech_prob": 0.003262534271925688}, {"id": 134, "seek": 106438, "start": 1064.38, "end": 1074.38, "text": " Another question.", "tokens": [50364, 3996, 1168, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2077368418375651, "compression_ratio": 1.6265060240963856, "no_speech_prob": 0.02174954116344452}, {"id": 135, "seek": 106438, "start": 1074.38, "end": 1081.38, "text": " As I understand it correctly, it simulates somehow the source of events somehow.", "tokens": [50864, 1018, 286, 1223, 309, 8944, 11, 309, 1034, 26192, 6063, 264, 4009, 295, 3931, 6063, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2077368418375651, "compression_ratio": 1.6265060240963856, "no_speech_prob": 0.02174954116344452}, {"id": 136, "seek": 106438, "start": 1081.38, "end": 1083.38, "text": " But how does it scale?", "tokens": [51214, 583, 577, 775, 309, 4373, 30, 51314], "temperature": 0.0, "avg_logprob": -0.2077368418375651, "compression_ratio": 1.6265060240963856, "no_speech_prob": 0.02174954116344452}, {"id": 137, "seek": 106438, "start": 1083.38, "end": 1088.38, "text": " Because you use just one system call in the case of the I.O. control.", "tokens": [51314, 1436, 291, 764, 445, 472, 1185, 818, 294, 264, 1389, 295, 264, 286, 13, 46, 13, 1969, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2077368418375651, "compression_ratio": 1.6265060240963856, "no_speech_prob": 0.02174954116344452}, {"id": 138, "seek": 106438, "start": 1088.38, "end": 1090.38, "text": " It's just a system call or using write.", "tokens": [51564, 467, 311, 445, 257, 1185, 818, 420, 1228, 2464, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2077368418375651, "compression_ratio": 1.6265060240963856, "no_speech_prob": 0.02174954116344452}, {"id": 139, "seek": 106438, "start": 1090.38, "end": 1093.38, "text": " It's just another system call somehow.", "tokens": [51664, 467, 311, 445, 1071, 1185, 818, 6063, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2077368418375651, "compression_ratio": 1.6265060240963856, "no_speech_prob": 0.02174954116344452}, {"id": 140, "seek": 109338, "start": 1093.38, "end": 1096.38, "text": " So it doesn't probably not scale, right?", "tokens": [50364, 407, 309, 1177, 380, 1391, 406, 4373, 11, 558, 30, 50514], "temperature": 0.0, "avg_logprob": -0.2827293431317365, "compression_ratio": 1.4253731343283582, "no_speech_prob": 0.007062469609081745}, {"id": 141, "seek": 109338, "start": 1096.38, "end": 1105.38, "text": " So if you want to generate thousands of events, triggering events, it requires a system call each.", "tokens": [50514, 407, 498, 291, 528, 281, 8460, 5383, 295, 3931, 11, 40406, 3931, 11, 309, 7029, 257, 1185, 818, 1184, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2827293431317365, "compression_ratio": 1.4253731343283582, "no_speech_prob": 0.007062469609081745}, {"id": 142, "seek": 109338, "start": 1105.38, "end": 1110.38, "text": " I say it does scale.", "tokens": [50964, 286, 584, 309, 775, 4373, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2827293431317365, "compression_ratio": 1.4253731343283582, "no_speech_prob": 0.007062469609081745}, {"id": 143, "seek": 109338, "start": 1110.38, "end": 1117.38, "text": " It scales as a poll of scales.", "tokens": [51214, 467, 17408, 382, 257, 6418, 295, 17408, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2827293431317365, "compression_ratio": 1.4253731343283582, "no_speech_prob": 0.007062469609081745}, {"id": 144, "seek": 111738, "start": 1117.38, "end": 1120.38, "text": " Because you can use as many fider skaters.", "tokens": [50364, 1436, 291, 393, 764, 382, 867, 283, 1438, 1110, 16749, 13, 50514], "temperature": 0.0, "avg_logprob": -0.26137698138201676, "compression_ratio": 1.47, "no_speech_prob": 0.02599666826426983}, {"id": 145, "seek": 111738, "start": 1120.38, "end": 1127.38, "text": " For each fider skater, you can have all the events you need.", "tokens": [50514, 1171, 1184, 283, 1438, 1110, 771, 11, 291, 393, 362, 439, 264, 3931, 291, 643, 13, 50864], "temperature": 0.0, "avg_logprob": -0.26137698138201676, "compression_ratio": 1.47, "no_speech_prob": 0.02599666826426983}, {"id": 146, "seek": 111738, "start": 1127.38, "end": 1132.38, "text": " In which means you think there are problems with scaling?", "tokens": [50864, 682, 597, 1355, 291, 519, 456, 366, 2740, 365, 21589, 30, 51114], "temperature": 0.0, "avg_logprob": -0.26137698138201676, "compression_ratio": 1.47, "no_speech_prob": 0.02599666826426983}, {"id": 147, "seek": 111738, "start": 1132.38, "end": 1137.38, "text": " Yeah, I mean a poll or an E-POL or whatever scales somehow.", "tokens": [51114, 865, 11, 286, 914, 257, 6418, 420, 364, 462, 12, 47, 5046, 420, 2035, 17408, 6063, 13, 51364], "temperature": 0.0, "avg_logprob": -0.26137698138201676, "compression_ratio": 1.47, "no_speech_prob": 0.02599666826426983}, {"id": 148, "seek": 111738, "start": 1137.38, "end": 1145.38, "text": " But the mechanism on your side to trigger this requires one system call.", "tokens": [51364, 583, 264, 7513, 322, 428, 1252, 281, 7875, 341, 7029, 472, 1185, 818, 13, 51764], "temperature": 0.0, "avg_logprob": -0.26137698138201676, "compression_ratio": 1.47, "no_speech_prob": 0.02599666826426983}, {"id": 149, "seek": 114538, "start": 1145.38, "end": 1150.38, "text": " So here you see another write on the slides.", "tokens": [50364, 407, 510, 291, 536, 1071, 2464, 322, 264, 9788, 13, 50614], "temperature": 0.0, "avg_logprob": -0.20799984250749862, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.06184419244527817}, {"id": 150, "seek": 114538, "start": 1150.38, "end": 1152.38, "text": " Another one, the other slides.", "tokens": [50614, 3996, 472, 11, 264, 661, 9788, 13, 50714], "temperature": 0.0, "avg_logprob": -0.20799984250749862, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.06184419244527817}, {"id": 151, "seek": 114538, "start": 1152.38, "end": 1156.38, "text": " If you saw the write, it's just a system call or using the I.O. control.", "tokens": [50714, 759, 291, 1866, 264, 2464, 11, 309, 311, 445, 257, 1185, 818, 420, 1228, 264, 286, 13, 46, 13, 1969, 13, 50914], "temperature": 0.0, "avg_logprob": -0.20799984250749862, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.06184419244527817}, {"id": 152, "seek": 114538, "start": 1156.38, "end": 1159.38, "text": " It's just another system call to trigger this.", "tokens": [50914, 467, 311, 445, 1071, 1185, 818, 281, 7875, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.20799984250749862, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.06184419244527817}, {"id": 153, "seek": 114538, "start": 1159.38, "end": 1163.38, "text": " So you have one event.", "tokens": [51064, 407, 291, 362, 472, 2280, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20799984250749862, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.06184419244527817}, {"id": 154, "seek": 114538, "start": 1163.38, "end": 1170.38, "text": " The solution with the device, you mean using the I.O. control.", "tokens": [51264, 440, 3827, 365, 264, 4302, 11, 291, 914, 1228, 264, 286, 13, 46, 13, 1969, 13, 51614], "temperature": 0.0, "avg_logprob": -0.20799984250749862, "compression_ratio": 1.7134146341463414, "no_speech_prob": 0.06184419244527817}, {"id": 155, "seek": 117038, "start": 1170.38, "end": 1175.38, "text": " Yeah, to trigger the event, probably we can do it offline later.", "tokens": [50364, 865, 11, 281, 7875, 264, 2280, 11, 1391, 321, 393, 360, 309, 21857, 1780, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1871161625303071, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.034886494278907776}, {"id": 156, "seek": 117038, "start": 1175.38, "end": 1180.38, "text": " Here the last line.", "tokens": [50614, 1692, 264, 1036, 1622, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1871161625303071, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.034886494278907776}, {"id": 157, "seek": 117038, "start": 1180.38, "end": 1182.38, "text": " No, no, on the previous slide.", "tokens": [50864, 883, 11, 572, 11, 322, 264, 3894, 4137, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1871161625303071, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.034886494278907776}, {"id": 158, "seek": 117038, "start": 1182.38, "end": 1186.38, "text": " This one, the write call.", "tokens": [50964, 639, 472, 11, 264, 2464, 818, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1871161625303071, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.034886494278907776}, {"id": 159, "seek": 117038, "start": 1186.38, "end": 1188.38, "text": " Here, right?", "tokens": [51164, 1692, 11, 558, 30, 51264], "temperature": 0.0, "avg_logprob": -0.1871161625303071, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.034886494278907776}, {"id": 160, "seek": 117038, "start": 1188.38, "end": 1190.38, "text": " You see this?", "tokens": [51264, 509, 536, 341, 30, 51364], "temperature": 0.0, "avg_logprob": -0.1871161625303071, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.034886494278907776}, {"id": 161, "seek": 117038, "start": 1190.38, "end": 1192.38, "text": " This is a system call, the write is a system call.", "tokens": [51364, 639, 307, 257, 1185, 818, 11, 264, 2464, 307, 257, 1185, 818, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1871161625303071, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.034886494278907776}, {"id": 162, "seek": 117038, "start": 1192.38, "end": 1196.38, "text": " And if you trigger it, it requires a system call.", "tokens": [51464, 400, 498, 291, 7875, 309, 11, 309, 7029, 257, 1185, 818, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1871161625303071, "compression_ratio": 1.6303030303030304, "no_speech_prob": 0.034886494278907776}, {"id": 163, "seek": 119638, "start": 1196.38, "end": 1202.38, "text": " But each aesthetic event requires one system call, right?", "tokens": [50364, 583, 1184, 20092, 2280, 7029, 472, 1185, 818, 11, 558, 30, 50664], "temperature": 0.0, "avg_logprob": -0.20884595598493302, "compression_ratio": 1.4425287356321839, "no_speech_prob": 0.045561544597148895}, {"id": 164, "seek": 119638, "start": 1202.38, "end": 1205.38, "text": " No.", "tokens": [50664, 883, 13, 50814], "temperature": 0.0, "avg_logprob": -0.20884595598493302, "compression_ratio": 1.4425287356321839, "no_speech_prob": 0.045561544597148895}, {"id": 165, "seek": 119638, "start": 1205.38, "end": 1209.38, "text": " And if I want to simulate millions of...", "tokens": [50814, 400, 498, 286, 528, 281, 27817, 6803, 295, 485, 51014], "temperature": 0.0, "avg_logprob": -0.20884595598493302, "compression_ratio": 1.4425287356321839, "no_speech_prob": 0.045561544597148895}, {"id": 166, "seek": 119638, "start": 1209.38, "end": 1213.38, "text": " No, no, you don't need the call for each event because it's a bitmap.", "tokens": [51014, 883, 11, 572, 11, 291, 500, 380, 643, 264, 818, 337, 1184, 2280, 570, 309, 311, 257, 857, 24223, 13, 51214], "temperature": 0.0, "avg_logprob": -0.20884595598493302, "compression_ratio": 1.4425287356321839, "no_speech_prob": 0.045561544597148895}, {"id": 167, "seek": 119638, "start": 1213.38, "end": 1219.38, "text": " So you can set the bitmap of an event.", "tokens": [51214, 407, 291, 393, 992, 264, 857, 24223, 295, 364, 2280, 13, 51514], "temperature": 0.0, "avg_logprob": -0.20884595598493302, "compression_ratio": 1.4425287356321839, "no_speech_prob": 0.045561544597148895}, {"id": 168, "seek": 119638, "start": 1219.38, "end": 1225.38, "text": " You want to be added or set or cleaned.", "tokens": [51514, 509, 528, 281, 312, 3869, 420, 992, 420, 16146, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20884595598493302, "compression_ratio": 1.4425287356321839, "no_speech_prob": 0.045561544597148895}, {"id": 169, "seek": 122538, "start": 1225.38, "end": 1230.38, "text": " So with one call, you set all the events for one FD.", "tokens": [50364, 407, 365, 472, 818, 11, 291, 992, 439, 264, 3931, 337, 472, 479, 35, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2121026251051161, "compression_ratio": 1.4172185430463575, "no_speech_prob": 0.0437619611620903}, {"id": 170, "seek": 122538, "start": 1230.38, "end": 1233.38, "text": " Obviously for different FD, you need different...", "tokens": [50614, 7580, 337, 819, 479, 35, 11, 291, 643, 819, 485, 50764], "temperature": 0.0, "avg_logprob": -0.2121026251051161, "compression_ratio": 1.4172185430463575, "no_speech_prob": 0.0437619611620903}, {"id": 171, "seek": 122538, "start": 1233.38, "end": 1236.38, "text": " Right.", "tokens": [50764, 1779, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2121026251051161, "compression_ratio": 1.4172185430463575, "no_speech_prob": 0.0437619611620903}, {"id": 172, "seek": 122538, "start": 1236.38, "end": 1241.38, "text": " Next.", "tokens": [50914, 3087, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2121026251051161, "compression_ratio": 1.4172185430463575, "no_speech_prob": 0.0437619611620903}, {"id": 173, "seek": 122538, "start": 1241.38, "end": 1244.38, "text": " Thanks. We're out of time.", "tokens": [51164, 2561, 13, 492, 434, 484, 295, 565, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2121026251051161, "compression_ratio": 1.4172185430463575, "no_speech_prob": 0.0437619611620903}, {"id": 174, "seek": 122538, "start": 1244.38, "end": 1246.38, "text": " Thank you for your talk.", "tokens": [51314, 1044, 291, 337, 428, 751, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2121026251051161, "compression_ratio": 1.4172185430463575, "no_speech_prob": 0.0437619611620903}, {"id": 175, "seek": 122538, "start": 1246.38, "end": 1247.38, "text": " Thank you.", "tokens": [51414, 1044, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2121026251051161, "compression_ratio": 1.4172185430463575, "no_speech_prob": 0.0437619611620903}, {"id": 176, "seek": 122538, "start": 1247.38, "end": 1250.38, "text": " And we'll have a five minute break.", "tokens": [51464, 400, 321, 603, 362, 257, 1732, 3456, 1821, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2121026251051161, "compression_ratio": 1.4172185430463575, "no_speech_prob": 0.0437619611620903}, {"id": 177, "seek": 125538, "start": 1255.38, "end": 1257.38, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.6652586857477824, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9924363493919373}], "language": "en"}