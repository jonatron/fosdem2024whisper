{"text": " Hi, y'all. I have the privilege of introducing you to Stefano. And he is from Italy, in the middle of the Italian coast. You've been a Linux enthusiast for 20 years, got me on that one. And your focus is on VoIP, interestingly enough. This is his 10th Fosdom, and your favorite animal is you after four beers. Very appropriate. Everyone, welcome Stefano. Thank you. One of my hobbies was caving. I spent 10 years going into caves, descending pitches with ropes, crawling into mud, and doing those awful things. The reason for doing that is that the very few time I had the chance to be the first one in an unknown place, it was awesome. When you are in an unknown place, you face some dangers, but you also have infinite possibilities. Behind the light of your headlamp, there could be anything. A river, a beach, kilometers of unexplored passages, who knows. And I feel the same about the AI today. And I'd really love to increase the power of your headlamp today. So I'm going to kick start you into Lang chain. This is the GitHub page for the talk, where you can find the proof of concept code and the presentation itself. It's better if you look at the code during the presentation. We'll explore Lang chain using one of its notable use case, that is retrieval of met generation. And for doing that, we will look at some of its components and concept that are document loaders, text splitters, embeddings, vector stores, retrievers, prompts and templates for generating prompts, large-length models, of course, and finally we'll combine some of those together in a chain. Then I'll experience the adrenaline of a live demo, and maybe we will take a look at some other notable use cases. Let's talk about our main quest first, that is retrieval of met generation. This cutting edge techniques involves giving additional data to the LLM to enhance its responses. It's interesting because when you give additional data to the LLM, the answers become more precise and relevant, and it's also allowed the citation of sources, and allowed to respond to data that are not in training data set, that could be even personal data or real-time data. It's a very discussed topic, and it's an intriguing case for showcasing Lang chain. This is the scheme of what we want to obtain. Multiple use cases exist over retrieval of met generation. We will look at the simple one that is question answering over unstructured data. We will take some text that is our unstructured data, and we will put it into a storage. Then we will ask a question and use the data from the storage to help the LLM answer the question. Let's look at it in more detail. We will take data from a transcript from a YouTube video, and we will load it into a usable format. Then we will split it into smaller parts and compute a vector representation, also known as embeddings, of this data. We will store it into a database. Then we will ask a question and compute the vector representation of the question, and use this vector representation to find similar documents. Then we will put the question and the retrieved documents into the prompt and give it to the large language model. If you're thinking that it's complex, I assure you that it's not, and it fits in a few lines of code. If you're thinking that it's trivial or worthless, I assure you that it's not the case-hater, because there are a lot of concepts behind that. Why using LineChain? LineChain is a framework for developing LLM-powered applications. It offers us a lot of ready-to-use of the shelf components and building blocks that make our life easier. Should we take our code in production, it also has components that make it easier for us to do it, and also it has a lot of samples to copy. It's fun because it has an extreme speed of improvement, and something interesting came out of its community continuously. On the other hand, it's very young, and breaking changes may happen, but we like risk. We are using Python. LineChain is also available in TypeScript, but that's not make-up-of-tea. We also have our main requirements that are LineChain, of course. OpenAI that we will use as embeddings and LLM provider, and TraumaDB as vector store. Since we're using OpenAI, we will provide an API key. Okay. In this part, we prepare and store our data. We will use four components that are a document loader to retrieve our data, to get our data, and convert it into a usable format. A text splitter for divide the document into smaller meaningful units, an embedding function to compute the vector representation and the vector store to store our vectors. The document loader is an object that takes from various sources to the data source. It takes from various sources of data and gives us a transform it into a usable format. That is a document. Multiple sources are available, and for instance, we can have files like PDF or text file or web pages or cloud storage such as Amazon S3 or Google Drive, social media like Reddit, Twitter, GitHub, and papers, and of course, YouTube transcripts. It's also very easy to write your own if you don't find something that fits for what you need. You can just extend the base loader class. This is our document loader, and we are using the YouTube loaders from the LineChain community. And this will take the transcript of our video and put it into the document class. This is the document class. It has a page content string that will hold the transcript of our video and a metadata dictionary that will have a key source with the URL of our video. Now that we have our document, we want to split it into smaller meaningful units. Why do we want to split it? Well, for free reason. The first one is that the input size of our LLM is limited, so we want to give smaller pieces. The second one is that, like me, our LLM tends to be easily distracted, so we want to increase as much as possible the signal-to-noise ratio and avoid to distract it, giving it useless information. So we will choose only the pieces important to answer the question. And the third reason is that usually we pay per token, so the more we give, the more we pay. We can think of five levels of text splitting from simple to complex. The simple one is splitting just counting charters or tokens. This is simple and easy, but it has a problem, and the problem is that probably we will end up splitting in the middle of a word or a phrase. The second level addresses this problem, and this recursive splitting. It recursively tries to split text on special charters like new line or punctuation, then combines those phrases together till the maximum length specified is reached. The third one, look at the document structure that works for HTML files or markdown or code. And then there are semantic chunkers that is still experimental on a long chain, and it's very interesting because it combines phrases together only if they are similar and use embeddings to compute similarity. The last one is highly experimental, and it's asking an LLM to split our text. This is highly experimental and also very expensive. It probably makes sense only if you are thinking that the cost per token is going to zero. We are using the recursive charter text splitter, that is the second, and it's a good default choice. We can specify the length of the text, and if you want some overlap. There's not a golden rule about that, so maybe you want to try what works best for you. Okay, now we have our documents, and we want to compute the embeddings. The embeddings are a vector representation in a high dimensional space. That means that we take our data and represent it as a vector. Each dimension of this vector will reflect an aspect of context or meaning of our data. There are thousands of those dimensions. If two pieces of text are similar, they are next to each other in the embedding space. That means that we can compute the similarity of two pieces of text just measuring the distance between those vectors. It seems complex, but for us it's very easy because for us it's just a function that we use when we create the vector store. We are using an external provider here, that is OpenAI. And auto privacy, obviously if you use an external provider to compute embeddings, you are sending your data to the external provider. We now have vector representation of our data, and our data is split. We want to store it into a vector store. A vector store is a database that is tailored for storing and searching embeddings. We are using TraumaDB here. It is open source, it's very easy to set up. This is the initialization. And as we said before, we are passing the OpenAI embedding function to it when we initialize it. These are the most used vector store in the reports of the state of AI for 2023. And TraumaDB is at first place, and FACE is also open source, it's from Meta. And Pinecon is a very popular cloud vector storage. Okay, we now have hard data into the vector store. We want to use it. We will use four main components here that are a retriever to search similar documents to our question, a prompt that will give the LLM the instruction on the output that we will give, the LLM that is the heart and lung and brain of our application, and finally we will combine those three together in a chain. Okay, the retriever is an object that is responsible for searching documents that are relevant to answer our question. The simple retriever does this just computing the vector representation of our question and search for document that are near to this vector in the embedding space. This is the simple retriever. Long chain also offers us more advanced retriever like this one, this is multi-query retriever. Please use the LLM component to formulate the variation of our question and then use the embeddings of those variations to search for similar documents, similar and hopefully relevant to answer our question. Now that we have similar documents, we can put them into the prompt and the prompt to give to the LLM. This is the prompt that we are using and the prompt is just a template with the instruction for our LLM and two variables in this case that are the context that will be our documents and the question itself. I love delving into details because it's just a template and also we can take this prompt from the long chain app. Long chain features an app with all the prompts and other objects that we can use, all the of the shell components that we can use. We have the prompt, we want to give it to the LLM. We are using OpenAI SLLM and this is how we initialize it. I use streaming, the first variable because it really improves the user experience and temperature zero means that we don't want creativity or hallucination, we just want precise answers. Maybe you can argue that I should have used different LLM providers but nobody gets fired for buying OpenAI so I chose that. These are the most used LLM providers always from long chain state of AI. OpenAI is at first place and I'd like to rant a bit about that because CloudAI, the third on that list, is labeled from almost from everywhere in the world except from Europe. This week the Italian data protection authority is going against OpenAI over privacy issue again. I know that there are a lot of privacy advocates here and I also care about user privacy but I think that defending the user right shouldn't mean going against going against war against them. That's my two cents. Those are the most used open source providers. It's interesting because the first three has a very different business model. The first one rents hardware, the second has a cost per token, paper token and the third one is for surf hosting. We now have gathered all the components, we want to put them together. This is all the components called one after another. We have our question and we pass the question to the retriever and we get a list of documents. The list of documents is joined together in the context variable then the context variable is used in the template to generate the prompt and the prompt is given to the LLM. It works nice and easy but we can do better and this put everything together using a chain. A chain is a sequence of components that does a function and it's better than just calling the component one after another because it has several advantages like it offers sync and the sync support and that allow us to take our code directly into production without changing it and also as advantages of observability and it's integrated very well with other launch chain components that are used to take code in production. This is the code put together using the LLM expression language LCL that is a new way of doing those chains. This is an acquired taste and it's quite new. It's from September but I find it very useful when you get used to it. Okay, let's see how this works. This is our code and there are two examples. One uses the chain, one not, this is the one that doesn't use it and it's just a few lines of codes. It's very easy. Okay, I forget the open AI key. Okay, I forget the open AI key. Of course it doesn't work. I'm not connected, you're right. Okay, I have a backup video. No, no. By the way, it's just for giving you an idea of the piece of calling the various components and the parts that takes the most time is computing embeddings and this is the streaming output. Okay, I have prepared some questions that are those questions and those are given too fast, sorry. I gave the question to the LLM and this is the output of the output of the LLM. Also, okay, it's nice because this one, the retriever wasn't able to find the answer for this question and so it wasn't able to give us a response and the LLM told us, I don't know. I'm not sure if I can move forward. Maybe I also have it for the LCL. The LCL version uses the multi-query retriever. So you will see now that it will ask multiple questions. Each question is transformed into multiple questions. This is low, I'm sorry. Okay, those are the questions and this is the answer that came out. Okay. There are also other interesting use cases of luncheon. We look at the simple one that is question answering over unstructured data. Also it's very interesting question answering over structured data. This one uses the LLM component to convert our question into a sequel query that is executed and the result of the query is used to improve the answer of our LLM. It's very interesting. Another one is data extraction. You just have to provide a JSON schema and then unstructured text and the JSON schema is automatically filled in with the data from the structured text. The LLM understands what to put into the JSON schema. It's interesting because there are people paid for doing that work. Summarization is very useful and it has a lot of, let's say, problems. It's an open problem. It's very interesting and useful. Then there is a synthetic data generation that is useful if you want to find a model or maybe if you want to anonymize some data. It works like data extraction backwards. You have a JSON schema and the LLM generates a text unstructured that contains data that will fit into the JSON schema. Finally, there are agents that is a key concept of luncheon and it's very fun. With agents, the LLM takes charge of choosing what action to do. It's worth studying. It's very interesting. Okay, that's it. So, thank you. Do you have any questions? I saw his hand first. Thank you. Very interesting. My question is how does this scale? You showed an example in which we have just one transcript. What if we had billions of transcripts? I didn't see any mention to the ranking of the retrieved chunk. If you can elaborate a little bit on that, it would be very good. Thanks. Okay, luncheon helps to take this in production. This was proof of concept so you can take this in production. Also, it's out of the scope of this talk. This was luncheon from zero to one. So, that scaling is from zero to 100. You can find a lot of examples on how to take that in production. If you take a look at the GitHub repository, there is also a link on how people from luncheon use this in production with the chatbot that helps searching in the luncheon documentation. You can find the code and it's very interesting. If you want to take it in production, it's worth copying that code. It's the best practice. Did I answer your question? I'm sure you'll see this coming. If I have some money to spend on a hardware and I want to get an LLM, there is a lot of proprietary intelligence that you use, like the Mbendix in particular, and also the other part that it's on the query side at the end of the chain. How difficult it is to do this without using OpenAI? It's really easy because luncheon allows to swap those components. I use it here at OpenAI because it's the easy way for having a result. But if you, for instance, use the Ollama, you can self-host the LLM and ask questions to the LLM, or maybe with a face you can rent hardware and run your open source model on their hardware. So it's easy because those components are swappable. All right, y'all. Let's give Stefano one more round of applause.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Hi, y'all.", "tokens": [50364, 2421, 11, 288, 6, 336, 13, 50714], "temperature": 0.0, "avg_logprob": -0.24453050317898603, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.20055687427520752}, {"id": 1, "seek": 0, "start": 7.0, "end": 12.24, "text": " I have the privilege of introducing you to Stefano.", "tokens": [50714, 286, 362, 264, 12122, 295, 15424, 291, 281, 43421, 3730, 13, 50976], "temperature": 0.0, "avg_logprob": -0.24453050317898603, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.20055687427520752}, {"id": 2, "seek": 0, "start": 12.24, "end": 18.0, "text": " And he is from Italy, in the middle of the Italian coast.", "tokens": [50976, 400, 415, 307, 490, 10705, 11, 294, 264, 2808, 295, 264, 10003, 8684, 13, 51264], "temperature": 0.0, "avg_logprob": -0.24453050317898603, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.20055687427520752}, {"id": 3, "seek": 0, "start": 18.0, "end": 23.04, "text": " You've been a Linux enthusiast for 20 years, got me on that one.", "tokens": [51264, 509, 600, 668, 257, 18734, 18076, 525, 337, 945, 924, 11, 658, 385, 322, 300, 472, 13, 51516], "temperature": 0.0, "avg_logprob": -0.24453050317898603, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.20055687427520752}, {"id": 4, "seek": 0, "start": 23.04, "end": 25.36, "text": " And your focus is on VoIP, interestingly enough.", "tokens": [51516, 400, 428, 1879, 307, 322, 7518, 9139, 11, 25873, 1547, 13, 51632], "temperature": 0.0, "avg_logprob": -0.24453050317898603, "compression_ratio": 1.3448275862068966, "no_speech_prob": 0.20055687427520752}, {"id": 5, "seek": 2536, "start": 25.36, "end": 32.04, "text": " This is his 10th Fosdom, and your favorite animal is you after four beers.", "tokens": [50364, 639, 307, 702, 1266, 392, 479, 329, 4121, 11, 293, 428, 2954, 5496, 307, 291, 934, 1451, 34159, 13, 50698], "temperature": 0.0, "avg_logprob": -0.44781400643143, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.06942225247621536}, {"id": 6, "seek": 2536, "start": 32.04, "end": 33.72, "text": " Very appropriate.", "tokens": [50698, 4372, 6854, 13, 50782], "temperature": 0.0, "avg_logprob": -0.44781400643143, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.06942225247621536}, {"id": 7, "seek": 2536, "start": 33.72, "end": 34.8, "text": " Everyone, welcome Stefano.", "tokens": [50782, 5198, 11, 2928, 43421, 3730, 13, 50836], "temperature": 0.0, "avg_logprob": -0.44781400643143, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.06942225247621536}, {"id": 8, "seek": 2536, "start": 36.4, "end": 36.9, "text": " Thank you.", "tokens": [50916, 1044, 291, 13, 50941], "temperature": 0.0, "avg_logprob": -0.44781400643143, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.06942225247621536}, {"id": 9, "seek": 2536, "start": 36.9, "end": 50.239999999999995, "text": " One of my hobbies was caving.", "tokens": [50941, 1485, 295, 452, 35750, 390, 269, 6152, 13, 51608], "temperature": 0.0, "avg_logprob": -0.44781400643143, "compression_ratio": 1.2307692307692308, "no_speech_prob": 0.06942225247621536}, {"id": 10, "seek": 5024, "start": 50.24, "end": 58.44, "text": " I spent 10 years going into caves, descending pitches with ropes, crawling into mud, and", "tokens": [50364, 286, 4418, 1266, 924, 516, 666, 32288, 11, 40182, 43110, 365, 32964, 11, 32979, 666, 8933, 11, 293, 50774], "temperature": 0.0, "avg_logprob": -0.21410517465500606, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.469361275434494}, {"id": 11, "seek": 5024, "start": 58.44, "end": 60.760000000000005, "text": " doing those awful things.", "tokens": [50774, 884, 729, 11232, 721, 13, 50890], "temperature": 0.0, "avg_logprob": -0.21410517465500606, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.469361275434494}, {"id": 12, "seek": 5024, "start": 60.760000000000005, "end": 66.12, "text": " The reason for doing that is that the very few time I had the chance to be the first", "tokens": [50890, 440, 1778, 337, 884, 300, 307, 300, 264, 588, 1326, 565, 286, 632, 264, 2931, 281, 312, 264, 700, 51158], "temperature": 0.0, "avg_logprob": -0.21410517465500606, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.469361275434494}, {"id": 13, "seek": 5024, "start": 66.12, "end": 70.16, "text": " one in an unknown place, it was awesome.", "tokens": [51158, 472, 294, 364, 9841, 1081, 11, 309, 390, 3476, 13, 51360], "temperature": 0.0, "avg_logprob": -0.21410517465500606, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.469361275434494}, {"id": 14, "seek": 5024, "start": 70.16, "end": 78.0, "text": " When you are in an unknown place, you face some dangers, but you also have infinite possibilities.", "tokens": [51360, 1133, 291, 366, 294, 364, 9841, 1081, 11, 291, 1851, 512, 27701, 11, 457, 291, 611, 362, 13785, 12178, 13, 51752], "temperature": 0.0, "avg_logprob": -0.21410517465500606, "compression_ratio": 1.6220095693779903, "no_speech_prob": 0.469361275434494}, {"id": 15, "seek": 7800, "start": 78.0, "end": 80.2, "text": " Behind the light of your headlamp, there could be anything.", "tokens": [50364, 20475, 264, 1442, 295, 428, 1378, 75, 1215, 11, 456, 727, 312, 1340, 13, 50474], "temperature": 0.0, "avg_logprob": -0.2476870991359247, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.02774890325963497}, {"id": 16, "seek": 7800, "start": 80.2, "end": 84.84, "text": " A river, a beach, kilometers of unexplored passages, who knows.", "tokens": [50474, 316, 6810, 11, 257, 7534, 11, 13904, 295, 11572, 564, 2769, 31589, 11, 567, 3255, 13, 50706], "temperature": 0.0, "avg_logprob": -0.2476870991359247, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.02774890325963497}, {"id": 17, "seek": 7800, "start": 84.84, "end": 87.6, "text": " And I feel the same about the AI today.", "tokens": [50706, 400, 286, 841, 264, 912, 466, 264, 7318, 965, 13, 50844], "temperature": 0.0, "avg_logprob": -0.2476870991359247, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.02774890325963497}, {"id": 18, "seek": 7800, "start": 87.6, "end": 93.88, "text": " And I'd really love to increase the power of your headlamp today.", "tokens": [50844, 400, 286, 1116, 534, 959, 281, 3488, 264, 1347, 295, 428, 1378, 75, 1215, 965, 13, 51158], "temperature": 0.0, "avg_logprob": -0.2476870991359247, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.02774890325963497}, {"id": 19, "seek": 7800, "start": 93.88, "end": 97.4, "text": " So I'm going to kick start you into Lang chain.", "tokens": [51158, 407, 286, 478, 516, 281, 4437, 722, 291, 666, 13313, 5021, 13, 51334], "temperature": 0.0, "avg_logprob": -0.2476870991359247, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.02774890325963497}, {"id": 20, "seek": 7800, "start": 97.4, "end": 103.28, "text": " This is the GitHub page for the talk, where you can find the proof of concept code and", "tokens": [51334, 639, 307, 264, 23331, 3028, 337, 264, 751, 11, 689, 291, 393, 915, 264, 8177, 295, 3410, 3089, 293, 51628], "temperature": 0.0, "avg_logprob": -0.2476870991359247, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.02774890325963497}, {"id": 21, "seek": 7800, "start": 103.28, "end": 104.64, "text": " the presentation itself.", "tokens": [51628, 264, 5860, 2564, 13, 51696], "temperature": 0.0, "avg_logprob": -0.2476870991359247, "compression_ratio": 1.58130081300813, "no_speech_prob": 0.02774890325963497}, {"id": 22, "seek": 10464, "start": 104.64, "end": 109.48, "text": " It's better if you look at the code during the presentation.", "tokens": [50364, 467, 311, 1101, 498, 291, 574, 412, 264, 3089, 1830, 264, 5860, 13, 50606], "temperature": 0.0, "avg_logprob": -0.2830279936273414, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.05928122624754906}, {"id": 23, "seek": 10464, "start": 109.48, "end": 114.28, "text": " We'll explore Lang chain using one of its notable use case, that is retrieval of met", "tokens": [50606, 492, 603, 6839, 13313, 5021, 1228, 472, 295, 1080, 22556, 764, 1389, 11, 300, 307, 19817, 3337, 295, 1131, 50846], "temperature": 0.0, "avg_logprob": -0.2830279936273414, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.05928122624754906}, {"id": 24, "seek": 10464, "start": 114.28, "end": 115.28, "text": " generation.", "tokens": [50846, 5125, 13, 50896], "temperature": 0.0, "avg_logprob": -0.2830279936273414, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.05928122624754906}, {"id": 25, "seek": 10464, "start": 115.28, "end": 120.88, "text": " And for doing that, we will look at some of its components and concept that are document", "tokens": [50896, 400, 337, 884, 300, 11, 321, 486, 574, 412, 512, 295, 1080, 6677, 293, 3410, 300, 366, 4166, 51176], "temperature": 0.0, "avg_logprob": -0.2830279936273414, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.05928122624754906}, {"id": 26, "seek": 10464, "start": 120.88, "end": 130.24, "text": " loaders, text splitters, embeddings, vector stores, retrievers, prompts and templates", "tokens": [51176, 3677, 433, 11, 2487, 7472, 1559, 11, 12240, 29432, 11, 8062, 9512, 11, 19817, 840, 11, 41095, 293, 21165, 51644], "temperature": 0.0, "avg_logprob": -0.2830279936273414, "compression_ratio": 1.5809523809523809, "no_speech_prob": 0.05928122624754906}, {"id": 27, "seek": 13024, "start": 130.24, "end": 136.72, "text": " for generating prompts, large-length models, of course, and finally we'll combine some", "tokens": [50364, 337, 17746, 41095, 11, 2416, 12, 45390, 5245, 11, 295, 1164, 11, 293, 2721, 321, 603, 10432, 512, 50688], "temperature": 0.0, "avg_logprob": -0.26516270401454206, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.006326879374682903}, {"id": 28, "seek": 13024, "start": 136.72, "end": 139.28, "text": " of those together in a chain.", "tokens": [50688, 295, 729, 1214, 294, 257, 5021, 13, 50816], "temperature": 0.0, "avg_logprob": -0.26516270401454206, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.006326879374682903}, {"id": 29, "seek": 13024, "start": 139.28, "end": 143.48000000000002, "text": " Then I'll experience the adrenaline of a live demo, and maybe we will take a look at some", "tokens": [50816, 1396, 286, 603, 1752, 264, 35649, 295, 257, 1621, 10723, 11, 293, 1310, 321, 486, 747, 257, 574, 412, 512, 51026], "temperature": 0.0, "avg_logprob": -0.26516270401454206, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.006326879374682903}, {"id": 30, "seek": 13024, "start": 143.48000000000002, "end": 147.92000000000002, "text": " other notable use cases.", "tokens": [51026, 661, 22556, 764, 3331, 13, 51248], "temperature": 0.0, "avg_logprob": -0.26516270401454206, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.006326879374682903}, {"id": 31, "seek": 13024, "start": 147.92000000000002, "end": 153.56, "text": " Let's talk about our main quest first, that is retrieval of met generation.", "tokens": [51248, 961, 311, 751, 466, 527, 2135, 866, 700, 11, 300, 307, 19817, 3337, 295, 1131, 5125, 13, 51530], "temperature": 0.0, "avg_logprob": -0.26516270401454206, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.006326879374682903}, {"id": 32, "seek": 13024, "start": 153.56, "end": 158.84, "text": " This cutting edge techniques involves giving additional data to the LLM to enhance its", "tokens": [51530, 639, 6492, 4691, 7512, 11626, 2902, 4497, 1412, 281, 264, 441, 43, 44, 281, 11985, 1080, 51794], "temperature": 0.0, "avg_logprob": -0.26516270401454206, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.006326879374682903}, {"id": 33, "seek": 13024, "start": 158.84, "end": 159.84, "text": " responses.", "tokens": [51794, 13019, 13, 51844], "temperature": 0.0, "avg_logprob": -0.26516270401454206, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.006326879374682903}, {"id": 34, "seek": 15984, "start": 160.24, "end": 167.56, "text": " It's interesting because when you give additional data to the LLM, the answers become more precise", "tokens": [50384, 467, 311, 1880, 570, 562, 291, 976, 4497, 1412, 281, 264, 441, 43, 44, 11, 264, 6338, 1813, 544, 13600, 50750], "temperature": 0.0, "avg_logprob": -0.2350670424374667, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.005852097179740667}, {"id": 35, "seek": 15984, "start": 167.56, "end": 176.56, "text": " and relevant, and it's also allowed the citation of sources, and allowed to respond to data", "tokens": [50750, 293, 7340, 11, 293, 309, 311, 611, 4350, 264, 45590, 295, 7139, 11, 293, 4350, 281, 4196, 281, 1412, 51200], "temperature": 0.0, "avg_logprob": -0.2350670424374667, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.005852097179740667}, {"id": 36, "seek": 15984, "start": 176.56, "end": 183.0, "text": " that are not in training data set, that could be even personal data or real-time data.", "tokens": [51200, 300, 366, 406, 294, 3097, 1412, 992, 11, 300, 727, 312, 754, 2973, 1412, 420, 957, 12, 3766, 1412, 13, 51522], "temperature": 0.0, "avg_logprob": -0.2350670424374667, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.005852097179740667}, {"id": 37, "seek": 15984, "start": 183.0, "end": 188.48000000000002, "text": " It's a very discussed topic, and it's an intriguing case for showcasing Lang chain.", "tokens": [51522, 467, 311, 257, 588, 7152, 4829, 11, 293, 309, 311, 364, 32503, 1389, 337, 29794, 3349, 13313, 5021, 13, 51796], "temperature": 0.0, "avg_logprob": -0.2350670424374667, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.005852097179740667}, {"id": 38, "seek": 18848, "start": 189.48, "end": 194.44, "text": " This is the scheme of what we want to obtain.", "tokens": [50414, 639, 307, 264, 12232, 295, 437, 321, 528, 281, 12701, 13, 50662], "temperature": 0.0, "avg_logprob": -0.18588044246037802, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0012924023903906345}, {"id": 39, "seek": 18848, "start": 194.44, "end": 197.28, "text": " Multiple use cases exist over retrieval of met generation.", "tokens": [50662, 40056, 764, 3331, 2514, 670, 19817, 3337, 295, 1131, 5125, 13, 50804], "temperature": 0.0, "avg_logprob": -0.18588044246037802, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0012924023903906345}, {"id": 40, "seek": 18848, "start": 197.28, "end": 202.35999999999999, "text": " We will look at the simple one that is question answering over unstructured data.", "tokens": [50804, 492, 486, 574, 412, 264, 2199, 472, 300, 307, 1168, 13430, 670, 18799, 46847, 1412, 13, 51058], "temperature": 0.0, "avg_logprob": -0.18588044246037802, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0012924023903906345}, {"id": 41, "seek": 18848, "start": 202.35999999999999, "end": 207.79999999999998, "text": " We will take some text that is our unstructured data, and we will put it into a storage.", "tokens": [51058, 492, 486, 747, 512, 2487, 300, 307, 527, 18799, 46847, 1412, 11, 293, 321, 486, 829, 309, 666, 257, 6725, 13, 51330], "temperature": 0.0, "avg_logprob": -0.18588044246037802, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0012924023903906345}, {"id": 42, "seek": 18848, "start": 207.79999999999998, "end": 214.04, "text": " Then we will ask a question and use the data from the storage to help the LLM answer the", "tokens": [51330, 1396, 321, 486, 1029, 257, 1168, 293, 764, 264, 1412, 490, 264, 6725, 281, 854, 264, 441, 43, 44, 1867, 264, 51642], "temperature": 0.0, "avg_logprob": -0.18588044246037802, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0012924023903906345}, {"id": 43, "seek": 18848, "start": 214.04, "end": 215.04, "text": " question.", "tokens": [51642, 1168, 13, 51692], "temperature": 0.0, "avg_logprob": -0.18588044246037802, "compression_ratio": 1.7476635514018692, "no_speech_prob": 0.0012924023903906345}, {"id": 44, "seek": 21504, "start": 216.0, "end": 219.04, "text": " Let's look at it in more detail.", "tokens": [50412, 961, 311, 574, 412, 309, 294, 544, 2607, 13, 50564], "temperature": 0.0, "avg_logprob": -0.24584197998046875, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.0041970182210206985}, {"id": 45, "seek": 21504, "start": 219.04, "end": 223.84, "text": " We will take data from a transcript from a YouTube video, and we will load it into a", "tokens": [50564, 492, 486, 747, 1412, 490, 257, 24444, 490, 257, 3088, 960, 11, 293, 321, 486, 3677, 309, 666, 257, 50804], "temperature": 0.0, "avg_logprob": -0.24584197998046875, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.0041970182210206985}, {"id": 46, "seek": 21504, "start": 223.84, "end": 225.32, "text": " usable format.", "tokens": [50804, 29975, 7877, 13, 50878], "temperature": 0.0, "avg_logprob": -0.24584197998046875, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.0041970182210206985}, {"id": 47, "seek": 21504, "start": 225.32, "end": 230.12, "text": " Then we will split it into smaller parts and compute a vector representation, also known", "tokens": [50878, 1396, 321, 486, 7472, 309, 666, 4356, 3166, 293, 14722, 257, 8062, 10290, 11, 611, 2570, 51118], "temperature": 0.0, "avg_logprob": -0.24584197998046875, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.0041970182210206985}, {"id": 48, "seek": 21504, "start": 230.12, "end": 234.44, "text": " as embeddings, of this data.", "tokens": [51118, 382, 12240, 29432, 11, 295, 341, 1412, 13, 51334], "temperature": 0.0, "avg_logprob": -0.24584197998046875, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.0041970182210206985}, {"id": 49, "seek": 21504, "start": 234.44, "end": 237.23999999999998, "text": " We will store it into a database.", "tokens": [51334, 492, 486, 3531, 309, 666, 257, 8149, 13, 51474], "temperature": 0.0, "avg_logprob": -0.24584197998046875, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.0041970182210206985}, {"id": 50, "seek": 21504, "start": 237.23999999999998, "end": 242.04, "text": " Then we will ask a question and compute the vector representation of the question, and", "tokens": [51474, 1396, 321, 486, 1029, 257, 1168, 293, 14722, 264, 8062, 10290, 295, 264, 1168, 11, 293, 51714], "temperature": 0.0, "avg_logprob": -0.24584197998046875, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.0041970182210206985}, {"id": 51, "seek": 24204, "start": 242.04, "end": 246.23999999999998, "text": " use this vector representation to find similar documents.", "tokens": [50364, 764, 341, 8062, 10290, 281, 915, 2531, 8512, 13, 50574], "temperature": 0.0, "avg_logprob": -0.20440750515338071, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.005470514763146639}, {"id": 52, "seek": 24204, "start": 246.23999999999998, "end": 255.23999999999998, "text": " Then we will put the question and the retrieved documents into the prompt and give it to the", "tokens": [50574, 1396, 321, 486, 829, 264, 1168, 293, 264, 19817, 937, 8512, 666, 264, 12391, 293, 976, 309, 281, 264, 51024], "temperature": 0.0, "avg_logprob": -0.20440750515338071, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.005470514763146639}, {"id": 53, "seek": 24204, "start": 255.23999999999998, "end": 259.32, "text": " large language model.", "tokens": [51024, 2416, 2856, 2316, 13, 51228], "temperature": 0.0, "avg_logprob": -0.20440750515338071, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.005470514763146639}, {"id": 54, "seek": 24204, "start": 259.32, "end": 263.15999999999997, "text": " If you're thinking that it's complex, I assure you that it's not, and it fits in a few lines", "tokens": [51228, 759, 291, 434, 1953, 300, 309, 311, 3997, 11, 286, 20968, 291, 300, 309, 311, 406, 11, 293, 309, 9001, 294, 257, 1326, 3876, 51420], "temperature": 0.0, "avg_logprob": -0.20440750515338071, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.005470514763146639}, {"id": 55, "seek": 24204, "start": 263.15999999999997, "end": 265.8, "text": " of code.", "tokens": [51420, 295, 3089, 13, 51552], "temperature": 0.0, "avg_logprob": -0.20440750515338071, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.005470514763146639}, {"id": 56, "seek": 24204, "start": 265.8, "end": 269.96, "text": " If you're thinking that it's trivial or worthless, I assure you that it's not the case-hater,", "tokens": [51552, 759, 291, 434, 1953, 300, 309, 311, 26703, 420, 34857, 11, 286, 20968, 291, 300, 309, 311, 406, 264, 1389, 12, 71, 771, 11, 51760], "temperature": 0.0, "avg_logprob": -0.20440750515338071, "compression_ratio": 1.803921568627451, "no_speech_prob": 0.005470514763146639}, {"id": 57, "seek": 26996, "start": 270.08, "end": 273.28, "text": " because there are a lot of concepts behind that.", "tokens": [50370, 570, 456, 366, 257, 688, 295, 10392, 2261, 300, 13, 50530], "temperature": 0.0, "avg_logprob": -0.2578095839573787, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.006168787367641926}, {"id": 58, "seek": 26996, "start": 273.28, "end": 275.08, "text": " Why using LineChain?", "tokens": [50530, 1545, 1228, 14670, 6546, 491, 30, 50620], "temperature": 0.0, "avg_logprob": -0.2578095839573787, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.006168787367641926}, {"id": 59, "seek": 26996, "start": 275.08, "end": 279.91999999999996, "text": " LineChain is a framework for developing LLM-powered applications.", "tokens": [50620, 14670, 6546, 491, 307, 257, 8388, 337, 6416, 441, 43, 44, 12, 27178, 5821, 13, 50862], "temperature": 0.0, "avg_logprob": -0.2578095839573787, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.006168787367641926}, {"id": 60, "seek": 26996, "start": 279.91999999999996, "end": 284.91999999999996, "text": " It offers us a lot of ready-to-use of the shelf components and building blocks that make our", "tokens": [50862, 467, 7736, 505, 257, 688, 295, 1919, 12, 1353, 12, 438, 295, 264, 15222, 6677, 293, 2390, 8474, 300, 652, 527, 51112], "temperature": 0.0, "avg_logprob": -0.2578095839573787, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.006168787367641926}, {"id": 61, "seek": 26996, "start": 284.91999999999996, "end": 286.91999999999996, "text": " life easier.", "tokens": [51112, 993, 3571, 13, 51212], "temperature": 0.0, "avg_logprob": -0.2578095839573787, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.006168787367641926}, {"id": 62, "seek": 26996, "start": 286.91999999999996, "end": 291.67999999999995, "text": " Should we take our code in production, it also has components that make it easier for", "tokens": [51212, 6454, 321, 747, 527, 3089, 294, 4265, 11, 309, 611, 575, 6677, 300, 652, 309, 3571, 337, 51450], "temperature": 0.0, "avg_logprob": -0.2578095839573787, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.006168787367641926}, {"id": 63, "seek": 26996, "start": 291.67999999999995, "end": 298.12, "text": " us to do it, and also it has a lot of samples to copy.", "tokens": [51450, 505, 281, 360, 309, 11, 293, 611, 309, 575, 257, 688, 295, 10938, 281, 5055, 13, 51772], "temperature": 0.0, "avg_logprob": -0.2578095839573787, "compression_ratio": 1.6394849785407726, "no_speech_prob": 0.006168787367641926}, {"id": 64, "seek": 29812, "start": 298.28000000000003, "end": 303.92, "text": " It's fun because it has an extreme speed of improvement, and something interesting came", "tokens": [50372, 467, 311, 1019, 570, 309, 575, 364, 8084, 3073, 295, 10444, 11, 293, 746, 1880, 1361, 50654], "temperature": 0.0, "avg_logprob": -0.28105685222579774, "compression_ratio": 1.4272300469483568, "no_speech_prob": 0.017136910930275917}, {"id": 65, "seek": 29812, "start": 303.92, "end": 309.28000000000003, "text": " out of its community continuously.", "tokens": [50654, 484, 295, 1080, 1768, 15684, 13, 50922], "temperature": 0.0, "avg_logprob": -0.28105685222579774, "compression_ratio": 1.4272300469483568, "no_speech_prob": 0.017136910930275917}, {"id": 66, "seek": 29812, "start": 309.28000000000003, "end": 316.08, "text": " On the other hand, it's very young, and breaking changes may happen, but we like risk.", "tokens": [50922, 1282, 264, 661, 1011, 11, 309, 311, 588, 2037, 11, 293, 7697, 2962, 815, 1051, 11, 457, 321, 411, 3148, 13, 51262], "temperature": 0.0, "avg_logprob": -0.28105685222579774, "compression_ratio": 1.4272300469483568, "no_speech_prob": 0.017136910930275917}, {"id": 67, "seek": 29812, "start": 316.08, "end": 318.08, "text": " We are using Python.", "tokens": [51262, 492, 366, 1228, 15329, 13, 51362], "temperature": 0.0, "avg_logprob": -0.28105685222579774, "compression_ratio": 1.4272300469483568, "no_speech_prob": 0.017136910930275917}, {"id": 68, "seek": 29812, "start": 318.08, "end": 323.16, "text": " LineChain is also available in TypeScript, but that's not make-up-of-tea.", "tokens": [51362, 14670, 6546, 491, 307, 611, 2435, 294, 15576, 14237, 11, 457, 300, 311, 406, 652, 12, 1010, 12, 2670, 12, 975, 64, 13, 51616], "temperature": 0.0, "avg_logprob": -0.28105685222579774, "compression_ratio": 1.4272300469483568, "no_speech_prob": 0.017136910930275917}, {"id": 69, "seek": 32316, "start": 323.32000000000005, "end": 328.32000000000005, "text": " We also have our main requirements that are LineChain, of course.", "tokens": [50372, 492, 611, 362, 527, 2135, 7728, 300, 366, 14670, 6546, 491, 11, 295, 1164, 13, 50622], "temperature": 0.0, "avg_logprob": -0.38579041617257254, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.013839137740433216}, {"id": 70, "seek": 32316, "start": 328.32000000000005, "end": 334.32000000000005, "text": " OpenAI that we will use as embeddings and LLM provider, and TraumaDB as vector store.", "tokens": [50622, 7238, 48698, 300, 321, 486, 764, 382, 12240, 29432, 293, 441, 43, 44, 12398, 11, 293, 5403, 5544, 27735, 382, 8062, 3531, 13, 50922], "temperature": 0.0, "avg_logprob": -0.38579041617257254, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.013839137740433216}, {"id": 71, "seek": 32316, "start": 334.32000000000005, "end": 339.32000000000005, "text": " Since we're using OpenAI, we will provide an API key.", "tokens": [50922, 4162, 321, 434, 1228, 7238, 48698, 11, 321, 486, 2893, 364, 9362, 2141, 13, 51172], "temperature": 0.0, "avg_logprob": -0.38579041617257254, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.013839137740433216}, {"id": 72, "seek": 32316, "start": 339.32000000000005, "end": 342.32000000000005, "text": " Okay.", "tokens": [51172, 1033, 13, 51322], "temperature": 0.0, "avg_logprob": -0.38579041617257254, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.013839137740433216}, {"id": 73, "seek": 32316, "start": 342.32000000000005, "end": 346.32000000000005, "text": " In this part, we prepare and store our data.", "tokens": [51322, 682, 341, 644, 11, 321, 5940, 293, 3531, 527, 1412, 13, 51522], "temperature": 0.0, "avg_logprob": -0.38579041617257254, "compression_ratio": 1.4065934065934067, "no_speech_prob": 0.013839137740433216}, {"id": 74, "seek": 34632, "start": 346.48, "end": 353.48, "text": " We will use four components that are a document loader to retrieve our data, to get our data,", "tokens": [50372, 492, 486, 764, 1451, 6677, 300, 366, 257, 4166, 3677, 260, 281, 30254, 527, 1412, 11, 281, 483, 527, 1412, 11, 50722], "temperature": 0.0, "avg_logprob": -0.30509679967706854, "compression_ratio": 1.7477477477477477, "no_speech_prob": 0.0006290344754233956}, {"id": 75, "seek": 34632, "start": 355.98, "end": 357.98, "text": " and convert it into a usable format.", "tokens": [50847, 293, 7620, 309, 666, 257, 29975, 7877, 13, 50947], "temperature": 0.0, "avg_logprob": -0.30509679967706854, "compression_ratio": 1.7477477477477477, "no_speech_prob": 0.0006290344754233956}, {"id": 76, "seek": 34632, "start": 357.98, "end": 363.48, "text": " A text splitter for divide the document into smaller meaningful units, an embedding function", "tokens": [50947, 316, 2487, 4732, 3904, 337, 9845, 264, 4166, 666, 4356, 10995, 6815, 11, 364, 12240, 3584, 2445, 51222], "temperature": 0.0, "avg_logprob": -0.30509679967706854, "compression_ratio": 1.7477477477477477, "no_speech_prob": 0.0006290344754233956}, {"id": 77, "seek": 34632, "start": 363.48, "end": 368.48, "text": " to compute the vector representation and the vector store to store our vectors.", "tokens": [51222, 281, 14722, 264, 8062, 10290, 293, 264, 8062, 3531, 281, 3531, 527, 18875, 13, 51472], "temperature": 0.0, "avg_logprob": -0.30509679967706854, "compression_ratio": 1.7477477477477477, "no_speech_prob": 0.0006290344754233956}, {"id": 78, "seek": 34632, "start": 368.48, "end": 375.48, "text": " The document loader is an object that takes from various sources to the data source.", "tokens": [51472, 440, 4166, 3677, 260, 307, 364, 2657, 300, 2516, 490, 3683, 7139, 281, 264, 1412, 4009, 13, 51822], "temperature": 0.0, "avg_logprob": -0.30509679967706854, "compression_ratio": 1.7477477477477477, "no_speech_prob": 0.0006290344754233956}, {"id": 79, "seek": 37632, "start": 376.48, "end": 383.48, "text": " It takes from various sources of data and gives us a transform it into a usable format.", "tokens": [50372, 467, 2516, 490, 3683, 7139, 295, 1412, 293, 2709, 505, 257, 4088, 309, 666, 257, 29975, 7877, 13, 50722], "temperature": 0.0, "avg_logprob": -0.39471733737999287, "compression_ratio": 1.44, "no_speech_prob": 0.01720000058412552}, {"id": 80, "seek": 37632, "start": 383.48, "end": 385.48, "text": " That is a document.", "tokens": [50722, 663, 307, 257, 4166, 13, 50822], "temperature": 0.0, "avg_logprob": -0.39471733737999287, "compression_ratio": 1.44, "no_speech_prob": 0.01720000058412552}, {"id": 81, "seek": 37632, "start": 385.48, "end": 392.48, "text": " Multiple sources are available, and for instance, we can have files like PDF or text file or", "tokens": [50822, 40056, 7139, 366, 2435, 11, 293, 337, 5197, 11, 321, 393, 362, 7098, 411, 17752, 420, 2487, 3991, 420, 51172], "temperature": 0.0, "avg_logprob": -0.39471733737999287, "compression_ratio": 1.44, "no_speech_prob": 0.01720000058412552}, {"id": 82, "seek": 37632, "start": 393.48, "end": 400.48, "text": " web pages or cloud storage such as Amazon S3 or Google Drive, social media like Reddit,", "tokens": [51222, 3670, 7183, 420, 4588, 6725, 1270, 382, 6795, 318, 18, 420, 3329, 15622, 11, 2093, 3021, 411, 32210, 11, 51572], "temperature": 0.0, "avg_logprob": -0.39471733737999287, "compression_ratio": 1.44, "no_speech_prob": 0.01720000058412552}, {"id": 83, "seek": 40048, "start": 400.48, "end": 407.48, "text": " Twitter, GitHub, and papers, and of course, YouTube transcripts.", "tokens": [50364, 5794, 11, 23331, 11, 293, 10577, 11, 293, 295, 1164, 11, 3088, 24444, 82, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21222071647644042, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00703834556043148}, {"id": 84, "seek": 40048, "start": 408.8, "end": 415.8, "text": " It's also very easy to write your own if you don't find something that fits for what", "tokens": [50780, 467, 311, 611, 588, 1858, 281, 2464, 428, 1065, 498, 291, 500, 380, 915, 746, 300, 9001, 337, 437, 51130], "temperature": 0.0, "avg_logprob": -0.21222071647644042, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00703834556043148}, {"id": 85, "seek": 40048, "start": 415.8, "end": 417.8, "text": " you need.", "tokens": [51130, 291, 643, 13, 51230], "temperature": 0.0, "avg_logprob": -0.21222071647644042, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00703834556043148}, {"id": 86, "seek": 40048, "start": 417.8, "end": 421.44, "text": " You can just extend the base loader class.", "tokens": [51230, 509, 393, 445, 10101, 264, 3096, 3677, 260, 1508, 13, 51412], "temperature": 0.0, "avg_logprob": -0.21222071647644042, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00703834556043148}, {"id": 87, "seek": 40048, "start": 421.44, "end": 428.44, "text": " This is our document loader, and we are using the YouTube loaders from the LineChain community.", "tokens": [51412, 639, 307, 527, 4166, 3677, 260, 11, 293, 321, 366, 1228, 264, 3088, 3677, 433, 490, 264, 14670, 6546, 491, 1768, 13, 51762], "temperature": 0.0, "avg_logprob": -0.21222071647644042, "compression_ratio": 1.505050505050505, "no_speech_prob": 0.00703834556043148}, {"id": 88, "seek": 43048, "start": 431.40000000000003, "end": 438.40000000000003, "text": " And this will take the transcript of our video and put it into the document class.", "tokens": [50410, 400, 341, 486, 747, 264, 24444, 295, 527, 960, 293, 829, 309, 666, 264, 4166, 1508, 13, 50760], "temperature": 0.0, "avg_logprob": -0.1738387495279312, "compression_ratio": 1.730263157894737, "no_speech_prob": 0.012958469800651073}, {"id": 89, "seek": 43048, "start": 440.6, "end": 442.6, "text": " This is the document class.", "tokens": [50870, 639, 307, 264, 4166, 1508, 13, 50970], "temperature": 0.0, "avg_logprob": -0.1738387495279312, "compression_ratio": 1.730263157894737, "no_speech_prob": 0.012958469800651073}, {"id": 90, "seek": 43048, "start": 442.6, "end": 449.6, "text": " It has a page content string that will hold the transcript of our video and a metadata", "tokens": [50970, 467, 575, 257, 3028, 2701, 6798, 300, 486, 1797, 264, 24444, 295, 527, 960, 293, 257, 26603, 51320], "temperature": 0.0, "avg_logprob": -0.1738387495279312, "compression_ratio": 1.730263157894737, "no_speech_prob": 0.012958469800651073}, {"id": 91, "seek": 43048, "start": 452.20000000000005, "end": 459.20000000000005, "text": " dictionary that will have a key source with the URL of our video.", "tokens": [51450, 25890, 300, 486, 362, 257, 2141, 4009, 365, 264, 12905, 295, 527, 960, 13, 51800], "temperature": 0.0, "avg_logprob": -0.1738387495279312, "compression_ratio": 1.730263157894737, "no_speech_prob": 0.012958469800651073}, {"id": 92, "seek": 45920, "start": 459.2, "end": 466.2, "text": " Now that we have our document, we want to split it into smaller meaningful units.", "tokens": [50364, 823, 300, 321, 362, 527, 4166, 11, 321, 528, 281, 7472, 309, 666, 4356, 10995, 6815, 13, 50714], "temperature": 0.0, "avg_logprob": -0.18295320900537634, "compression_ratio": 1.694736842105263, "no_speech_prob": 0.005975367501378059}, {"id": 93, "seek": 45920, "start": 467.59999999999997, "end": 468.59999999999997, "text": " Why do we want to split it?", "tokens": [50784, 1545, 360, 321, 528, 281, 7472, 309, 30, 50834], "temperature": 0.0, "avg_logprob": -0.18295320900537634, "compression_ratio": 1.694736842105263, "no_speech_prob": 0.005975367501378059}, {"id": 94, "seek": 45920, "start": 468.59999999999997, "end": 470.0, "text": " Well, for free reason.", "tokens": [50834, 1042, 11, 337, 1737, 1778, 13, 50904], "temperature": 0.0, "avg_logprob": -0.18295320900537634, "compression_ratio": 1.694736842105263, "no_speech_prob": 0.005975367501378059}, {"id": 95, "seek": 45920, "start": 470.0, "end": 477.0, "text": " The first one is that the input size of our LLM is limited, so we want to give smaller", "tokens": [50904, 440, 700, 472, 307, 300, 264, 4846, 2744, 295, 527, 441, 43, 44, 307, 5567, 11, 370, 321, 528, 281, 976, 4356, 51254], "temperature": 0.0, "avg_logprob": -0.18295320900537634, "compression_ratio": 1.694736842105263, "no_speech_prob": 0.005975367501378059}, {"id": 96, "seek": 45920, "start": 477.56, "end": 478.76, "text": " pieces.", "tokens": [51282, 3755, 13, 51342], "temperature": 0.0, "avg_logprob": -0.18295320900537634, "compression_ratio": 1.694736842105263, "no_speech_prob": 0.005975367501378059}, {"id": 97, "seek": 45920, "start": 478.76, "end": 485.76, "text": " The second one is that, like me, our LLM tends to be easily distracted, so we want to increase", "tokens": [51342, 440, 1150, 472, 307, 300, 11, 411, 385, 11, 527, 441, 43, 44, 12258, 281, 312, 3612, 21658, 11, 370, 321, 528, 281, 3488, 51692], "temperature": 0.0, "avg_logprob": -0.18295320900537634, "compression_ratio": 1.694736842105263, "no_speech_prob": 0.005975367501378059}, {"id": 98, "seek": 48576, "start": 485.96, "end": 491.15999999999997, "text": " as much as possible the signal-to-noise ratio and avoid to distract it, giving it useless", "tokens": [50374, 382, 709, 382, 1944, 264, 6358, 12, 1353, 12, 42641, 8509, 293, 5042, 281, 9945, 309, 11, 2902, 309, 14115, 50634], "temperature": 0.0, "avg_logprob": -0.20191312789916993, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.004395375028252602}, {"id": 99, "seek": 48576, "start": 491.15999999999997, "end": 491.96, "text": " information.", "tokens": [50634, 1589, 13, 50674], "temperature": 0.0, "avg_logprob": -0.20191312789916993, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.004395375028252602}, {"id": 100, "seek": 48576, "start": 491.96, "end": 496.92, "text": " So we will choose only the pieces important to answer the question.", "tokens": [50674, 407, 321, 486, 2826, 787, 264, 3755, 1021, 281, 1867, 264, 1168, 13, 50922], "temperature": 0.0, "avg_logprob": -0.20191312789916993, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.004395375028252602}, {"id": 101, "seek": 48576, "start": 496.92, "end": 501.36, "text": " And the third reason is that usually we pay per token, so the more we give, the more we", "tokens": [50922, 400, 264, 2636, 1778, 307, 300, 2673, 321, 1689, 680, 14862, 11, 370, 264, 544, 321, 976, 11, 264, 544, 321, 51144], "temperature": 0.0, "avg_logprob": -0.20191312789916993, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.004395375028252602}, {"id": 102, "seek": 48576, "start": 501.36, "end": 503.64, "text": " pay.", "tokens": [51144, 1689, 13, 51258], "temperature": 0.0, "avg_logprob": -0.20191312789916993, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.004395375028252602}, {"id": 103, "seek": 48576, "start": 503.64, "end": 509.44, "text": " We can think of five levels of text splitting from simple to complex.", "tokens": [51258, 492, 393, 519, 295, 1732, 4358, 295, 2487, 30348, 490, 2199, 281, 3997, 13, 51548], "temperature": 0.0, "avg_logprob": -0.20191312789916993, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.004395375028252602}, {"id": 104, "seek": 48576, "start": 509.44, "end": 515.12, "text": " The simple one is splitting just counting charters or tokens.", "tokens": [51548, 440, 2199, 472, 307, 30348, 445, 13251, 1290, 1559, 420, 22667, 13, 51832], "temperature": 0.0, "avg_logprob": -0.20191312789916993, "compression_ratio": 1.6527196652719665, "no_speech_prob": 0.004395375028252602}, {"id": 105, "seek": 51512, "start": 515.2, "end": 521.2, "text": " This is simple and easy, but it has a problem, and the problem is that probably we will end", "tokens": [50368, 639, 307, 2199, 293, 1858, 11, 457, 309, 575, 257, 1154, 11, 293, 264, 1154, 307, 300, 1391, 321, 486, 917, 50668], "temperature": 0.0, "avg_logprob": -0.2587612452131979, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.006963033694773912}, {"id": 106, "seek": 51512, "start": 521.2, "end": 525.12, "text": " up splitting in the middle of a word or a phrase.", "tokens": [50668, 493, 30348, 294, 264, 2808, 295, 257, 1349, 420, 257, 9535, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2587612452131979, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.006963033694773912}, {"id": 107, "seek": 51512, "start": 525.12, "end": 528.8, "text": " The second level addresses this problem, and this recursive splitting.", "tokens": [50864, 440, 1150, 1496, 16862, 341, 1154, 11, 293, 341, 20560, 488, 30348, 13, 51048], "temperature": 0.0, "avg_logprob": -0.2587612452131979, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.006963033694773912}, {"id": 108, "seek": 51512, "start": 528.8, "end": 535.8, "text": " It recursively tries to split text on special charters like new line or punctuation, then", "tokens": [51048, 467, 20560, 3413, 9898, 281, 7472, 2487, 322, 2121, 1290, 1559, 411, 777, 1622, 420, 27006, 16073, 11, 550, 51398], "temperature": 0.0, "avg_logprob": -0.2587612452131979, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.006963033694773912}, {"id": 109, "seek": 51512, "start": 537.36, "end": 544.36, "text": " combines those phrases together till the maximum length specified is reached.", "tokens": [51476, 29520, 729, 20312, 1214, 4288, 264, 6674, 4641, 22206, 307, 6488, 13, 51826], "temperature": 0.0, "avg_logprob": -0.2587612452131979, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.006963033694773912}, {"id": 110, "seek": 54436, "start": 544.36, "end": 551.36, "text": " The third one, look at the document structure that works for HTML files or markdown or code.", "tokens": [50364, 440, 2636, 472, 11, 574, 412, 264, 4166, 3877, 300, 1985, 337, 17995, 7098, 420, 1491, 5093, 420, 3089, 13, 50714], "temperature": 0.0, "avg_logprob": -0.23221261160714285, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0032866927795112133}, {"id": 111, "seek": 54436, "start": 552.32, "end": 558.4, "text": " And then there are semantic chunkers that is still experimental on a long chain, and", "tokens": [50762, 400, 550, 456, 366, 47982, 16635, 433, 300, 307, 920, 17069, 322, 257, 938, 5021, 11, 293, 51066], "temperature": 0.0, "avg_logprob": -0.23221261160714285, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0032866927795112133}, {"id": 112, "seek": 54436, "start": 558.4, "end": 563.04, "text": " it's very interesting because it combines phrases together only if they are similar", "tokens": [51066, 309, 311, 588, 1880, 570, 309, 29520, 20312, 1214, 787, 498, 436, 366, 2531, 51298], "temperature": 0.0, "avg_logprob": -0.23221261160714285, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0032866927795112133}, {"id": 113, "seek": 54436, "start": 563.04, "end": 566.12, "text": " and use embeddings to compute similarity.", "tokens": [51298, 293, 764, 12240, 29432, 281, 14722, 32194, 13, 51452], "temperature": 0.0, "avg_logprob": -0.23221261160714285, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0032866927795112133}, {"id": 114, "seek": 54436, "start": 566.12, "end": 573.12, "text": " The last one is highly experimental, and it's asking an LLM to split our text.", "tokens": [51452, 440, 1036, 472, 307, 5405, 17069, 11, 293, 309, 311, 3365, 364, 441, 43, 44, 281, 7472, 527, 2487, 13, 51802], "temperature": 0.0, "avg_logprob": -0.23221261160714285, "compression_ratio": 1.598326359832636, "no_speech_prob": 0.0032866927795112133}, {"id": 115, "seek": 57312, "start": 573.48, "end": 576.32, "text": " This is highly experimental and also very expensive.", "tokens": [50382, 639, 307, 5405, 17069, 293, 611, 588, 5124, 13, 50524], "temperature": 0.0, "avg_logprob": -0.26029442351998633, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.004036211874336004}, {"id": 116, "seek": 57312, "start": 576.32, "end": 582.5600000000001, "text": " It probably makes sense only if you are thinking that the cost per token is going to zero.", "tokens": [50524, 467, 1391, 1669, 2020, 787, 498, 291, 366, 1953, 300, 264, 2063, 680, 14862, 307, 516, 281, 4018, 13, 50836], "temperature": 0.0, "avg_logprob": -0.26029442351998633, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.004036211874336004}, {"id": 117, "seek": 57312, "start": 582.5600000000001, "end": 587.32, "text": " We are using the recursive charter text splitter, that is the second, and it's a good default", "tokens": [50836, 492, 366, 1228, 264, 20560, 488, 27472, 2487, 4732, 3904, 11, 300, 307, 264, 1150, 11, 293, 309, 311, 257, 665, 7576, 51074], "temperature": 0.0, "avg_logprob": -0.26029442351998633, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.004036211874336004}, {"id": 118, "seek": 57312, "start": 587.32, "end": 588.24, "text": " choice.", "tokens": [51074, 3922, 13, 51120], "temperature": 0.0, "avg_logprob": -0.26029442351998633, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.004036211874336004}, {"id": 119, "seek": 57312, "start": 588.24, "end": 595.24, "text": " We can specify the length of the text, and if you want some overlap.", "tokens": [51120, 492, 393, 16500, 264, 4641, 295, 264, 2487, 11, 293, 498, 291, 528, 512, 19959, 13, 51470], "temperature": 0.0, "avg_logprob": -0.26029442351998633, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.004036211874336004}, {"id": 120, "seek": 57312, "start": 596.52, "end": 601.52, "text": " There's not a golden rule about that, so maybe you want to try what works best for you.", "tokens": [51534, 821, 311, 406, 257, 9729, 4978, 466, 300, 11, 370, 1310, 291, 528, 281, 853, 437, 1985, 1151, 337, 291, 13, 51784], "temperature": 0.0, "avg_logprob": -0.26029442351998633, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.004036211874336004}, {"id": 121, "seek": 60152, "start": 602.52, "end": 608.52, "text": " Okay, now we have our documents, and we want to compute the embeddings.", "tokens": [50414, 1033, 11, 586, 321, 362, 527, 8512, 11, 293, 321, 528, 281, 14722, 264, 12240, 29432, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15316479642626266, "compression_ratio": 1.651685393258427, "no_speech_prob": 0.0029366782400757074}, {"id": 122, "seek": 60152, "start": 608.52, "end": 613.1999999999999, "text": " The embeddings are a vector representation in a high dimensional space.", "tokens": [50714, 440, 12240, 29432, 366, 257, 8062, 10290, 294, 257, 1090, 18795, 1901, 13, 50948], "temperature": 0.0, "avg_logprob": -0.15316479642626266, "compression_ratio": 1.651685393258427, "no_speech_prob": 0.0029366782400757074}, {"id": 123, "seek": 60152, "start": 613.1999999999999, "end": 618.8, "text": " That means that we take our data and represent it as a vector.", "tokens": [50948, 663, 1355, 300, 321, 747, 527, 1412, 293, 2906, 309, 382, 257, 8062, 13, 51228], "temperature": 0.0, "avg_logprob": -0.15316479642626266, "compression_ratio": 1.651685393258427, "no_speech_prob": 0.0029366782400757074}, {"id": 124, "seek": 60152, "start": 618.8, "end": 625.8, "text": " Each dimension of this vector will reflect an aspect of context or meaning of our data.", "tokens": [51228, 6947, 10139, 295, 341, 8062, 486, 5031, 364, 4171, 295, 4319, 420, 3620, 295, 527, 1412, 13, 51578], "temperature": 0.0, "avg_logprob": -0.15316479642626266, "compression_ratio": 1.651685393258427, "no_speech_prob": 0.0029366782400757074}, {"id": 125, "seek": 62580, "start": 626.76, "end": 631.5999999999999, "text": " There are thousands of those dimensions.", "tokens": [50412, 821, 366, 5383, 295, 729, 12819, 13, 50654], "temperature": 0.0, "avg_logprob": -0.16311168670654297, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.015630053356289864}, {"id": 126, "seek": 62580, "start": 631.5999999999999, "end": 637.3599999999999, "text": " If two pieces of text are similar, they are next to each other in the embedding space.", "tokens": [50654, 759, 732, 3755, 295, 2487, 366, 2531, 11, 436, 366, 958, 281, 1184, 661, 294, 264, 12240, 3584, 1901, 13, 50942], "temperature": 0.0, "avg_logprob": -0.16311168670654297, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.015630053356289864}, {"id": 127, "seek": 62580, "start": 637.3599999999999, "end": 643.1999999999999, "text": " That means that we can compute the similarity of two pieces of text just measuring the distance", "tokens": [50942, 663, 1355, 300, 321, 393, 14722, 264, 32194, 295, 732, 3755, 295, 2487, 445, 13389, 264, 4560, 51234], "temperature": 0.0, "avg_logprob": -0.16311168670654297, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.015630053356289864}, {"id": 128, "seek": 62580, "start": 643.1999999999999, "end": 646.04, "text": " between those vectors.", "tokens": [51234, 1296, 729, 18875, 13, 51376], "temperature": 0.0, "avg_logprob": -0.16311168670654297, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.015630053356289864}, {"id": 129, "seek": 62580, "start": 646.04, "end": 653.04, "text": " It seems complex, but for us it's very easy because for us it's just a function that we", "tokens": [51376, 467, 2544, 3997, 11, 457, 337, 505, 309, 311, 588, 1858, 570, 337, 505, 309, 311, 445, 257, 2445, 300, 321, 51726], "temperature": 0.0, "avg_logprob": -0.16311168670654297, "compression_ratio": 1.678391959798995, "no_speech_prob": 0.015630053356289864}, {"id": 130, "seek": 65304, "start": 654.0, "end": 657.4, "text": " use when we create the vector store.", "tokens": [50412, 764, 562, 321, 1884, 264, 8062, 3531, 13, 50582], "temperature": 0.0, "avg_logprob": -0.31456636828045514, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.005092587787657976}, {"id": 131, "seek": 65304, "start": 657.4, "end": 660.4399999999999, "text": " We are using an external provider here, that is OpenAI.", "tokens": [50582, 492, 366, 1228, 364, 8320, 12398, 510, 11, 300, 307, 7238, 48698, 13, 50734], "temperature": 0.0, "avg_logprob": -0.31456636828045514, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.005092587787657976}, {"id": 132, "seek": 65304, "start": 660.4399999999999, "end": 666.4, "text": " And auto privacy, obviously if you use an external provider to compute embeddings, you", "tokens": [50734, 400, 8399, 11427, 11, 2745, 498, 291, 764, 364, 8320, 12398, 281, 14722, 12240, 29432, 11, 291, 51032], "temperature": 0.0, "avg_logprob": -0.31456636828045514, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.005092587787657976}, {"id": 133, "seek": 65304, "start": 666.4, "end": 671.3199999999999, "text": " are sending your data to the external provider.", "tokens": [51032, 366, 7750, 428, 1412, 281, 264, 8320, 12398, 13, 51278], "temperature": 0.0, "avg_logprob": -0.31456636828045514, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.005092587787657976}, {"id": 134, "seek": 65304, "start": 671.3199999999999, "end": 675.92, "text": " We now have vector representation of our data, and our data is split.", "tokens": [51278, 492, 586, 362, 8062, 10290, 295, 527, 1412, 11, 293, 527, 1412, 307, 7472, 13, 51508], "temperature": 0.0, "avg_logprob": -0.31456636828045514, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.005092587787657976}, {"id": 135, "seek": 65304, "start": 675.92, "end": 677.68, "text": " We want to store it into a vector store.", "tokens": [51508, 492, 528, 281, 3531, 309, 666, 257, 8062, 3531, 13, 51596], "temperature": 0.0, "avg_logprob": -0.31456636828045514, "compression_ratio": 1.715736040609137, "no_speech_prob": 0.005092587787657976}, {"id": 136, "seek": 67768, "start": 677.7199999999999, "end": 684.64, "text": " A vector store is a database that is tailored for storing and searching embeddings.", "tokens": [50366, 316, 8062, 3531, 307, 257, 8149, 300, 307, 34858, 337, 26085, 293, 10808, 12240, 29432, 13, 50712], "temperature": 0.0, "avg_logprob": -0.2638322114944458, "compression_ratio": 1.4946808510638299, "no_speech_prob": 0.006254649255424738}, {"id": 137, "seek": 67768, "start": 684.64, "end": 688.0799999999999, "text": " We are using TraumaDB here.", "tokens": [50712, 492, 366, 1228, 5403, 5544, 27735, 510, 13, 50884], "temperature": 0.0, "avg_logprob": -0.2638322114944458, "compression_ratio": 1.4946808510638299, "no_speech_prob": 0.006254649255424738}, {"id": 138, "seek": 67768, "start": 688.0799999999999, "end": 690.8, "text": " It is open source, it's very easy to set up.", "tokens": [50884, 467, 307, 1269, 4009, 11, 309, 311, 588, 1858, 281, 992, 493, 13, 51020], "temperature": 0.0, "avg_logprob": -0.2638322114944458, "compression_ratio": 1.4946808510638299, "no_speech_prob": 0.006254649255424738}, {"id": 139, "seek": 67768, "start": 690.8, "end": 694.7199999999999, "text": " This is the initialization.", "tokens": [51020, 639, 307, 264, 5883, 2144, 13, 51216], "temperature": 0.0, "avg_logprob": -0.2638322114944458, "compression_ratio": 1.4946808510638299, "no_speech_prob": 0.006254649255424738}, {"id": 140, "seek": 67768, "start": 694.7199999999999, "end": 700.7199999999999, "text": " And as we said before, we are passing the OpenAI embedding function to it when we initialize", "tokens": [51216, 400, 382, 321, 848, 949, 11, 321, 366, 8437, 264, 7238, 48698, 12240, 3584, 2445, 281, 309, 562, 321, 5883, 1125, 51516], "temperature": 0.0, "avg_logprob": -0.2638322114944458, "compression_ratio": 1.4946808510638299, "no_speech_prob": 0.006254649255424738}, {"id": 141, "seek": 67768, "start": 700.7199999999999, "end": 702.68, "text": " it.", "tokens": [51516, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2638322114944458, "compression_ratio": 1.4946808510638299, "no_speech_prob": 0.006254649255424738}, {"id": 142, "seek": 70268, "start": 702.68, "end": 708.88, "text": " These are the most used vector store in the reports of the state of AI for 2023.", "tokens": [50364, 1981, 366, 264, 881, 1143, 8062, 3531, 294, 264, 7122, 295, 264, 1785, 295, 7318, 337, 44377, 13, 50674], "temperature": 0.0, "avg_logprob": -0.32867259514041064, "compression_ratio": 1.443298969072165, "no_speech_prob": 0.022304736077785492}, {"id": 143, "seek": 70268, "start": 708.88, "end": 714.76, "text": " And TraumaDB is at first place, and FACE is also open source, it's from Meta.", "tokens": [50674, 400, 5403, 5544, 27735, 307, 412, 700, 1081, 11, 293, 479, 23866, 307, 611, 1269, 4009, 11, 309, 311, 490, 6377, 64, 13, 50968], "temperature": 0.0, "avg_logprob": -0.32867259514041064, "compression_ratio": 1.443298969072165, "no_speech_prob": 0.022304736077785492}, {"id": 144, "seek": 70268, "start": 714.76, "end": 718.76, "text": " And Pinecon is a very popular cloud vector storage.", "tokens": [50968, 400, 33531, 1671, 307, 257, 588, 3743, 4588, 8062, 6725, 13, 51168], "temperature": 0.0, "avg_logprob": -0.32867259514041064, "compression_ratio": 1.443298969072165, "no_speech_prob": 0.022304736077785492}, {"id": 145, "seek": 70268, "start": 718.76, "end": 724.76, "text": " Okay, we now have hard data into the vector store.", "tokens": [51168, 1033, 11, 321, 586, 362, 1152, 1412, 666, 264, 8062, 3531, 13, 51468], "temperature": 0.0, "avg_logprob": -0.32867259514041064, "compression_ratio": 1.443298969072165, "no_speech_prob": 0.022304736077785492}, {"id": 146, "seek": 70268, "start": 724.76, "end": 727.24, "text": " We want to use it.", "tokens": [51468, 492, 528, 281, 764, 309, 13, 51592], "temperature": 0.0, "avg_logprob": -0.32867259514041064, "compression_ratio": 1.443298969072165, "no_speech_prob": 0.022304736077785492}, {"id": 147, "seek": 72724, "start": 727.24, "end": 733.4, "text": " We will use four main components here that are a retriever to search similar documents", "tokens": [50364, 492, 486, 764, 1451, 2135, 6677, 510, 300, 366, 257, 19817, 331, 281, 3164, 2531, 8512, 50672], "temperature": 0.0, "avg_logprob": -0.18970284859339395, "compression_ratio": 1.7763157894736843, "no_speech_prob": 0.03623208776116371}, {"id": 148, "seek": 72724, "start": 733.4, "end": 740.24, "text": " to our question, a prompt that will give the LLM the instruction on the output that we", "tokens": [50672, 281, 527, 1168, 11, 257, 12391, 300, 486, 976, 264, 441, 43, 44, 264, 10951, 322, 264, 5598, 300, 321, 51014], "temperature": 0.0, "avg_logprob": -0.18970284859339395, "compression_ratio": 1.7763157894736843, "no_speech_prob": 0.03623208776116371}, {"id": 149, "seek": 72724, "start": 740.24, "end": 746.6, "text": " will give, the LLM that is the heart and lung and brain of our application, and finally", "tokens": [51014, 486, 976, 11, 264, 441, 43, 44, 300, 307, 264, 1917, 293, 16730, 293, 3567, 295, 527, 3861, 11, 293, 2721, 51332], "temperature": 0.0, "avg_logprob": -0.18970284859339395, "compression_ratio": 1.7763157894736843, "no_speech_prob": 0.03623208776116371}, {"id": 150, "seek": 72724, "start": 746.6, "end": 749.92, "text": " we will combine those three together in a chain.", "tokens": [51332, 321, 486, 10432, 729, 1045, 1214, 294, 257, 5021, 13, 51498], "temperature": 0.0, "avg_logprob": -0.18970284859339395, "compression_ratio": 1.7763157894736843, "no_speech_prob": 0.03623208776116371}, {"id": 151, "seek": 72724, "start": 749.92, "end": 757.16, "text": " Okay, the retriever is an object that is responsible for searching documents that are relevant", "tokens": [51498, 1033, 11, 264, 19817, 331, 307, 364, 2657, 300, 307, 6250, 337, 10808, 8512, 300, 366, 7340, 51860], "temperature": 0.0, "avg_logprob": -0.18970284859339395, "compression_ratio": 1.7763157894736843, "no_speech_prob": 0.03623208776116371}, {"id": 152, "seek": 75716, "start": 757.16, "end": 759.12, "text": " to answer our question.", "tokens": [50364, 281, 1867, 527, 1168, 13, 50462], "temperature": 0.0, "avg_logprob": -0.19749017765647486, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.019287873059511185}, {"id": 153, "seek": 75716, "start": 759.12, "end": 767.68, "text": " The simple retriever does this just computing the vector representation of our question", "tokens": [50462, 440, 2199, 19817, 331, 775, 341, 445, 15866, 264, 8062, 10290, 295, 527, 1168, 50890], "temperature": 0.0, "avg_logprob": -0.19749017765647486, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.019287873059511185}, {"id": 154, "seek": 75716, "start": 767.68, "end": 774.3199999999999, "text": " and search for document that are near to this vector in the embedding space.", "tokens": [50890, 293, 3164, 337, 4166, 300, 366, 2651, 281, 341, 8062, 294, 264, 12240, 3584, 1901, 13, 51222], "temperature": 0.0, "avg_logprob": -0.19749017765647486, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.019287873059511185}, {"id": 155, "seek": 75716, "start": 774.3199999999999, "end": 777.4399999999999, "text": " This is the simple retriever.", "tokens": [51222, 639, 307, 264, 2199, 19817, 331, 13, 51378], "temperature": 0.0, "avg_logprob": -0.19749017765647486, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.019287873059511185}, {"id": 156, "seek": 75716, "start": 777.4399999999999, "end": 783.12, "text": " Long chain also offers us more advanced retriever like this one, this is multi-query retriever.", "tokens": [51378, 8282, 5021, 611, 7736, 505, 544, 7339, 19817, 331, 411, 341, 472, 11, 341, 307, 4825, 12, 358, 2109, 19817, 331, 13, 51662], "temperature": 0.0, "avg_logprob": -0.19749017765647486, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.019287873059511185}, {"id": 157, "seek": 78312, "start": 783.12, "end": 791.12, "text": " Please use the LLM component to formulate the variation of our question and then use", "tokens": [50364, 2555, 764, 264, 441, 43, 44, 6542, 281, 47881, 264, 12990, 295, 527, 1168, 293, 550, 764, 50764], "temperature": 0.0, "avg_logprob": -0.21322781880696615, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.02456429973244667}, {"id": 158, "seek": 78312, "start": 791.12, "end": 797.32, "text": " the embeddings of those variations to search for similar documents, similar and hopefully", "tokens": [50764, 264, 12240, 29432, 295, 729, 17840, 281, 3164, 337, 2531, 8512, 11, 2531, 293, 4696, 51074], "temperature": 0.0, "avg_logprob": -0.21322781880696615, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.02456429973244667}, {"id": 159, "seek": 78312, "start": 797.32, "end": 800.72, "text": " relevant to answer our question.", "tokens": [51074, 7340, 281, 1867, 527, 1168, 13, 51244], "temperature": 0.0, "avg_logprob": -0.21322781880696615, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.02456429973244667}, {"id": 160, "seek": 78312, "start": 800.72, "end": 808.28, "text": " Now that we have similar documents, we can put them into the prompt and the prompt to", "tokens": [51244, 823, 300, 321, 362, 2531, 8512, 11, 321, 393, 829, 552, 666, 264, 12391, 293, 264, 12391, 281, 51622], "temperature": 0.0, "avg_logprob": -0.21322781880696615, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.02456429973244667}, {"id": 161, "seek": 78312, "start": 808.28, "end": 809.28, "text": " give to the LLM.", "tokens": [51622, 976, 281, 264, 441, 43, 44, 13, 51672], "temperature": 0.0, "avg_logprob": -0.21322781880696615, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.02456429973244667}, {"id": 162, "seek": 80928, "start": 809.28, "end": 816.36, "text": " This is the prompt that we are using and the prompt is just a template with the instruction", "tokens": [50364, 639, 307, 264, 12391, 300, 321, 366, 1228, 293, 264, 12391, 307, 445, 257, 12379, 365, 264, 10951, 50718], "temperature": 0.0, "avg_logprob": -0.232945980411945, "compression_ratio": 1.7801724137931034, "no_speech_prob": 0.01647663302719593}, {"id": 163, "seek": 80928, "start": 816.36, "end": 822.88, "text": " for our LLM and two variables in this case that are the context that will be our documents", "tokens": [50718, 337, 527, 441, 43, 44, 293, 732, 9102, 294, 341, 1389, 300, 366, 264, 4319, 300, 486, 312, 527, 8512, 51044], "temperature": 0.0, "avg_logprob": -0.232945980411945, "compression_ratio": 1.7801724137931034, "no_speech_prob": 0.01647663302719593}, {"id": 164, "seek": 80928, "start": 822.88, "end": 825.68, "text": " and the question itself.", "tokens": [51044, 293, 264, 1168, 2564, 13, 51184], "temperature": 0.0, "avg_logprob": -0.232945980411945, "compression_ratio": 1.7801724137931034, "no_speech_prob": 0.01647663302719593}, {"id": 165, "seek": 80928, "start": 825.68, "end": 831.8399999999999, "text": " I love delving into details because it's just a template and also we can take this prompt", "tokens": [51184, 286, 959, 1103, 798, 666, 4365, 570, 309, 311, 445, 257, 12379, 293, 611, 321, 393, 747, 341, 12391, 51492], "temperature": 0.0, "avg_logprob": -0.232945980411945, "compression_ratio": 1.7801724137931034, "no_speech_prob": 0.01647663302719593}, {"id": 166, "seek": 80928, "start": 831.8399999999999, "end": 833.6, "text": " from the long chain app.", "tokens": [51492, 490, 264, 938, 5021, 724, 13, 51580], "temperature": 0.0, "avg_logprob": -0.232945980411945, "compression_ratio": 1.7801724137931034, "no_speech_prob": 0.01647663302719593}, {"id": 167, "seek": 80928, "start": 833.6, "end": 839.0, "text": " Long chain features an app with all the prompts and other objects that we can use, all the", "tokens": [51580, 8282, 5021, 4122, 364, 724, 365, 439, 264, 41095, 293, 661, 6565, 300, 321, 393, 764, 11, 439, 264, 51850], "temperature": 0.0, "avg_logprob": -0.232945980411945, "compression_ratio": 1.7801724137931034, "no_speech_prob": 0.01647663302719593}, {"id": 168, "seek": 83900, "start": 839.2, "end": 843.52, "text": " of the shell components that we can use.", "tokens": [50374, 295, 264, 8720, 6677, 300, 321, 393, 764, 13, 50590], "temperature": 0.0, "avg_logprob": -0.2519748463350184, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.020611615851521492}, {"id": 169, "seek": 83900, "start": 843.52, "end": 849.12, "text": " We have the prompt, we want to give it to the LLM.", "tokens": [50590, 492, 362, 264, 12391, 11, 321, 528, 281, 976, 309, 281, 264, 441, 43, 44, 13, 50870], "temperature": 0.0, "avg_logprob": -0.2519748463350184, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.020611615851521492}, {"id": 170, "seek": 83900, "start": 849.12, "end": 854.68, "text": " We are using OpenAI SLLM and this is how we initialize it.", "tokens": [50870, 492, 366, 1228, 7238, 48698, 22999, 43, 44, 293, 341, 307, 577, 321, 5883, 1125, 309, 13, 51148], "temperature": 0.0, "avg_logprob": -0.2519748463350184, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.020611615851521492}, {"id": 171, "seek": 83900, "start": 854.68, "end": 861.68, "text": " I use streaming, the first variable because it really improves the user experience and", "tokens": [51148, 286, 764, 11791, 11, 264, 700, 7006, 570, 309, 534, 24771, 264, 4195, 1752, 293, 51498], "temperature": 0.0, "avg_logprob": -0.2519748463350184, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.020611615851521492}, {"id": 172, "seek": 83900, "start": 862.92, "end": 868.0, "text": " temperature zero means that we don't want creativity or hallucination, we just want", "tokens": [51560, 4292, 4018, 1355, 300, 321, 500, 380, 528, 12915, 420, 35212, 2486, 11, 321, 445, 528, 51814], "temperature": 0.0, "avg_logprob": -0.2519748463350184, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.020611615851521492}, {"id": 173, "seek": 86800, "start": 868.04, "end": 871.64, "text": " precise answers.", "tokens": [50366, 13600, 6338, 13, 50546], "temperature": 0.0, "avg_logprob": -0.3139331723436897, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.013932119123637676}, {"id": 174, "seek": 86800, "start": 871.64, "end": 878.64, "text": " Maybe you can argue that I should have used different LLM providers but nobody gets fired", "tokens": [50546, 2704, 291, 393, 9695, 300, 286, 820, 362, 1143, 819, 441, 43, 44, 11330, 457, 5079, 2170, 11777, 50896], "temperature": 0.0, "avg_logprob": -0.3139331723436897, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.013932119123637676}, {"id": 175, "seek": 86800, "start": 880.16, "end": 885.12, "text": " for buying OpenAI so I chose that.", "tokens": [50972, 337, 6382, 7238, 48698, 370, 286, 5111, 300, 13, 51220], "temperature": 0.0, "avg_logprob": -0.3139331723436897, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.013932119123637676}, {"id": 176, "seek": 86800, "start": 885.12, "end": 889.4, "text": " These are the most used LLM providers always from long chain state of AI.", "tokens": [51220, 1981, 366, 264, 881, 1143, 441, 43, 44, 11330, 1009, 490, 938, 5021, 1785, 295, 7318, 13, 51434], "temperature": 0.0, "avg_logprob": -0.3139331723436897, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.013932119123637676}, {"id": 177, "seek": 86800, "start": 889.4, "end": 896.4, "text": " OpenAI is at first place and I'd like to rant a bit about that because CloudAI, the third", "tokens": [51434, 7238, 48698, 307, 412, 700, 1081, 293, 286, 1116, 411, 281, 45332, 257, 857, 466, 300, 570, 8061, 48698, 11, 264, 2636, 51784], "temperature": 0.0, "avg_logprob": -0.3139331723436897, "compression_ratio": 1.4734299516908214, "no_speech_prob": 0.013932119123637676}, {"id": 178, "seek": 89640, "start": 897.4, "end": 904.4, "text": " on that list, is labeled from almost from everywhere in the world except from Europe.", "tokens": [50414, 322, 300, 1329, 11, 307, 21335, 490, 1920, 490, 5315, 294, 264, 1002, 3993, 490, 3315, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2518113613128662, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.010028351098299026}, {"id": 179, "seek": 89640, "start": 905.56, "end": 911.92, "text": " This week the Italian data protection authority is going against OpenAI over privacy issue", "tokens": [50822, 639, 1243, 264, 10003, 1412, 6334, 8281, 307, 516, 1970, 7238, 48698, 670, 11427, 2734, 51140], "temperature": 0.0, "avg_logprob": -0.2518113613128662, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.010028351098299026}, {"id": 180, "seek": 89640, "start": 911.92, "end": 913.48, "text": " again.", "tokens": [51140, 797, 13, 51218], "temperature": 0.0, "avg_logprob": -0.2518113613128662, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.010028351098299026}, {"id": 181, "seek": 89640, "start": 913.48, "end": 919.16, "text": " I know that there are a lot of privacy advocates here and I also care about user privacy but", "tokens": [51218, 286, 458, 300, 456, 366, 257, 688, 295, 11427, 25160, 510, 293, 286, 611, 1127, 466, 4195, 11427, 457, 51502], "temperature": 0.0, "avg_logprob": -0.2518113613128662, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.010028351098299026}, {"id": 182, "seek": 89640, "start": 919.16, "end": 926.16, "text": " I think that defending the user right shouldn't mean going against going against war against", "tokens": [51502, 286, 519, 300, 21377, 264, 4195, 558, 4659, 380, 914, 516, 1970, 516, 1970, 1516, 1970, 51852], "temperature": 0.0, "avg_logprob": -0.2518113613128662, "compression_ratio": 1.6849315068493151, "no_speech_prob": 0.010028351098299026}, {"id": 183, "seek": 92640, "start": 926.76, "end": 927.4, "text": " them.", "tokens": [50382, 552, 13, 50414], "temperature": 0.0, "avg_logprob": -0.30411106889898126, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.0013144529657438397}, {"id": 184, "seek": 92640, "start": 927.4, "end": 929.88, "text": " That's my two cents.", "tokens": [50414, 663, 311, 452, 732, 14941, 13, 50538], "temperature": 0.0, "avg_logprob": -0.30411106889898126, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.0013144529657438397}, {"id": 185, "seek": 92640, "start": 929.88, "end": 934.4399999999999, "text": " Those are the most used open source providers.", "tokens": [50538, 3950, 366, 264, 881, 1143, 1269, 4009, 11330, 13, 50766], "temperature": 0.0, "avg_logprob": -0.30411106889898126, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.0013144529657438397}, {"id": 186, "seek": 92640, "start": 934.4399999999999, "end": 938.16, "text": " It's interesting because the first three has a very different business model.", "tokens": [50766, 467, 311, 1880, 570, 264, 700, 1045, 575, 257, 588, 819, 1606, 2316, 13, 50952], "temperature": 0.0, "avg_logprob": -0.30411106889898126, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.0013144529657438397}, {"id": 187, "seek": 92640, "start": 938.16, "end": 944.66, "text": " The first one rents hardware, the second has a cost per token, paper token and the third", "tokens": [50952, 440, 700, 472, 6214, 82, 8837, 11, 264, 1150, 575, 257, 2063, 680, 14862, 11, 3035, 14862, 293, 264, 2636, 51277], "temperature": 0.0, "avg_logprob": -0.30411106889898126, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.0013144529657438397}, {"id": 188, "seek": 92640, "start": 944.66, "end": 950.4399999999999, "text": " one is for surf hosting.", "tokens": [51277, 472, 307, 337, 9684, 16058, 13, 51566], "temperature": 0.0, "avg_logprob": -0.30411106889898126, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.0013144529657438397}, {"id": 189, "seek": 92640, "start": 950.4399999999999, "end": 953.84, "text": " We now have gathered all the components, we want to put them together.", "tokens": [51566, 492, 586, 362, 13032, 439, 264, 6677, 11, 321, 528, 281, 829, 552, 1214, 13, 51736], "temperature": 0.0, "avg_logprob": -0.30411106889898126, "compression_ratio": 1.5924170616113744, "no_speech_prob": 0.0013144529657438397}, {"id": 190, "seek": 95384, "start": 953.84, "end": 956.96, "text": " This is all the components called one after another.", "tokens": [50364, 639, 307, 439, 264, 6677, 1219, 472, 934, 1071, 13, 50520], "temperature": 0.0, "avg_logprob": -0.2159085224584206, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.006539430934935808}, {"id": 191, "seek": 95384, "start": 956.96, "end": 962.5600000000001, "text": " We have our question and we pass the question to the retriever and we get a list of documents.", "tokens": [50520, 492, 362, 527, 1168, 293, 321, 1320, 264, 1168, 281, 264, 19817, 331, 293, 321, 483, 257, 1329, 295, 8512, 13, 50800], "temperature": 0.0, "avg_logprob": -0.2159085224584206, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.006539430934935808}, {"id": 192, "seek": 95384, "start": 962.5600000000001, "end": 966.52, "text": " The list of documents is joined together in the context variable then the context variable", "tokens": [50800, 440, 1329, 295, 8512, 307, 6869, 1214, 294, 264, 4319, 7006, 550, 264, 4319, 7006, 50998], "temperature": 0.0, "avg_logprob": -0.2159085224584206, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.006539430934935808}, {"id": 193, "seek": 95384, "start": 966.52, "end": 973.52, "text": " is used in the template to generate the prompt and the prompt is given to the LLM.", "tokens": [50998, 307, 1143, 294, 264, 12379, 281, 8460, 264, 12391, 293, 264, 12391, 307, 2212, 281, 264, 441, 43, 44, 13, 51348], "temperature": 0.0, "avg_logprob": -0.2159085224584206, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.006539430934935808}, {"id": 194, "seek": 95384, "start": 974.4, "end": 981.4000000000001, "text": " It works nice and easy but we can do better and this put everything together using a chain.", "tokens": [51392, 467, 1985, 1481, 293, 1858, 457, 321, 393, 360, 1101, 293, 341, 829, 1203, 1214, 1228, 257, 5021, 13, 51742], "temperature": 0.0, "avg_logprob": -0.2159085224584206, "compression_ratio": 1.8193832599118942, "no_speech_prob": 0.006539430934935808}, {"id": 195, "seek": 98140, "start": 982.04, "end": 989.04, "text": " A chain is a sequence of components that does a function and it's better than just", "tokens": [50396, 316, 5021, 307, 257, 8310, 295, 6677, 300, 775, 257, 2445, 293, 309, 311, 1101, 813, 445, 50746], "temperature": 0.0, "avg_logprob": -0.21040848323277064, "compression_ratio": 1.5680473372781065, "no_speech_prob": 0.007931568659842014}, {"id": 196, "seek": 98140, "start": 992.04, "end": 999.04, "text": " calling the component one after another because it has several advantages like it offers sync", "tokens": [50896, 5141, 264, 6542, 472, 934, 1071, 570, 309, 575, 2940, 14906, 411, 309, 7736, 20271, 51246], "temperature": 0.0, "avg_logprob": -0.21040848323277064, "compression_ratio": 1.5680473372781065, "no_speech_prob": 0.007931568659842014}, {"id": 197, "seek": 98140, "start": 1000.4399999999999, "end": 1006.24, "text": " and the sync support and that allow us to take our code directly into production without", "tokens": [51316, 293, 264, 20271, 1406, 293, 300, 2089, 505, 281, 747, 527, 3089, 3838, 666, 4265, 1553, 51606], "temperature": 0.0, "avg_logprob": -0.21040848323277064, "compression_ratio": 1.5680473372781065, "no_speech_prob": 0.007931568659842014}, {"id": 198, "seek": 100624, "start": 1006.24, "end": 1013.24, "text": " changing it and also as advantages of observability and it's integrated very well with other", "tokens": [50364, 4473, 309, 293, 611, 382, 14906, 295, 9951, 2310, 293, 309, 311, 10919, 588, 731, 365, 661, 50714], "temperature": 0.0, "avg_logprob": -0.34314680936043723, "compression_ratio": 1.4437869822485208, "no_speech_prob": 0.005604464095085859}, {"id": 199, "seek": 100624, "start": 1014.4, "end": 1022.2, "text": " launch chain components that are used to take code in production.", "tokens": [50772, 4025, 5021, 6677, 300, 366, 1143, 281, 747, 3089, 294, 4265, 13, 51162], "temperature": 0.0, "avg_logprob": -0.34314680936043723, "compression_ratio": 1.4437869822485208, "no_speech_prob": 0.005604464095085859}, {"id": 200, "seek": 100624, "start": 1022.2, "end": 1029.2, "text": " This is the code put together using the LLM expression language LCL that is a new way", "tokens": [51162, 639, 307, 264, 3089, 829, 1214, 1228, 264, 441, 43, 44, 6114, 2856, 441, 22458, 300, 307, 257, 777, 636, 51512], "temperature": 0.0, "avg_logprob": -0.34314680936043723, "compression_ratio": 1.4437869822485208, "no_speech_prob": 0.005604464095085859}, {"id": 201, "seek": 102920, "start": 1029.88, "end": 1036.88, "text": " of doing those chains. This is an acquired taste and it's quite new.", "tokens": [50398, 295, 884, 729, 12626, 13, 639, 307, 364, 17554, 3939, 293, 309, 311, 1596, 777, 13, 50748], "temperature": 0.0, "avg_logprob": -0.4013110958800024, "compression_ratio": 1.2761194029850746, "no_speech_prob": 0.02048894204199314}, {"id": 202, "seek": 102920, "start": 1042.52, "end": 1049.52, "text": " It's from September but I find it very useful when you get used to it.", "tokens": [51030, 467, 311, 490, 7216, 457, 286, 915, 309, 588, 4420, 562, 291, 483, 1143, 281, 309, 13, 51380], "temperature": 0.0, "avg_logprob": -0.4013110958800024, "compression_ratio": 1.2761194029850746, "no_speech_prob": 0.02048894204199314}, {"id": 203, "seek": 102920, "start": 1052.04, "end": 1059.04, "text": " Okay, let's see how this works.", "tokens": [51506, 1033, 11, 718, 311, 536, 577, 341, 1985, 13, 51856], "temperature": 0.0, "avg_logprob": -0.4013110958800024, "compression_ratio": 1.2761194029850746, "no_speech_prob": 0.02048894204199314}, {"id": 204, "seek": 105920, "start": 1060.2, "end": 1067.2, "text": " This is our code and there are two examples.", "tokens": [50414, 639, 307, 527, 3089, 293, 456, 366, 732, 5110, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3151119971761898, "compression_ratio": 1.319672131147541, "no_speech_prob": 0.002670804038643837}, {"id": 205, "seek": 105920, "start": 1071.96, "end": 1078.96, "text": " One uses the chain, one not, this is the one that doesn't use it and it's just a few lines", "tokens": [51002, 1485, 4960, 264, 5021, 11, 472, 406, 11, 341, 307, 264, 472, 300, 1177, 380, 764, 309, 293, 309, 311, 445, 257, 1326, 3876, 51352], "temperature": 0.0, "avg_logprob": -0.3151119971761898, "compression_ratio": 1.319672131147541, "no_speech_prob": 0.002670804038643837}, {"id": 206, "seek": 105920, "start": 1081.8, "end": 1088.8, "text": " of codes. It's very easy.", "tokens": [51494, 295, 14211, 13, 467, 311, 588, 1858, 13, 51844], "temperature": 0.0, "avg_logprob": -0.3151119971761898, "compression_ratio": 1.319672131147541, "no_speech_prob": 0.002670804038643837}, {"id": 207, "seek": 108920, "start": 1089.2, "end": 1096.2, "text": " Okay, I forget the open AI key.", "tokens": [50364, 1033, 11, 286, 2870, 264, 1269, 7318, 2141, 13, 50714], "temperature": 0.0, "avg_logprob": -0.5906756027885105, "compression_ratio": 1.4651162790697674, "no_speech_prob": 0.11143185943365097}, {"id": 208, "seek": 108920, "start": 1111.2, "end": 1118.2, "text": " Okay, I forget the open AI key.", "tokens": [51464, 1033, 11, 286, 2870, 264, 1269, 7318, 2141, 13, 51814], "temperature": 0.0, "avg_logprob": -0.5906756027885105, "compression_ratio": 1.4651162790697674, "no_speech_prob": 0.11143185943365097}, {"id": 209, "seek": 111920, "start": 1120.2, "end": 1127.2, "text": " Of course it doesn't work.", "tokens": [50414, 2720, 1164, 309, 1177, 380, 589, 13, 50764], "temperature": 0.0, "avg_logprob": -0.29539554349837766, "compression_ratio": 1.035294117647059, "no_speech_prob": 0.018073713406920433}, {"id": 210, "seek": 111920, "start": 1127.2, "end": 1132.2, "text": " I'm not connected, you're right.", "tokens": [50764, 286, 478, 406, 4582, 11, 291, 434, 558, 13, 51014], "temperature": 0.0, "avg_logprob": -0.29539554349837766, "compression_ratio": 1.035294117647059, "no_speech_prob": 0.018073713406920433}, {"id": 211, "seek": 111920, "start": 1132.2, "end": 1139.2, "text": " Okay, I have a backup video.", "tokens": [51014, 1033, 11, 286, 362, 257, 14807, 960, 13, 51364], "temperature": 0.0, "avg_logprob": -0.29539554349837766, "compression_ratio": 1.035294117647059, "no_speech_prob": 0.018073713406920433}, {"id": 212, "seek": 114920, "start": 1150.2, "end": 1156.2, "text": " No, no.", "tokens": [50414, 883, 11, 572, 13, 50714], "temperature": 0.0, "avg_logprob": -0.22691244008589764, "compression_ratio": 1.4242424242424243, "no_speech_prob": 0.009370946325361729}, {"id": 213, "seek": 114920, "start": 1156.2, "end": 1163.2, "text": " By the way, it's just for giving you an idea of the piece of calling the various components", "tokens": [50714, 3146, 264, 636, 11, 309, 311, 445, 337, 2902, 291, 364, 1558, 295, 264, 2522, 295, 5141, 264, 3683, 6677, 51064], "temperature": 0.0, "avg_logprob": -0.22691244008589764, "compression_ratio": 1.4242424242424243, "no_speech_prob": 0.009370946325361729}, {"id": 214, "seek": 114920, "start": 1168.3600000000001, "end": 1175.3600000000001, "text": " and the parts that takes the most time is computing embeddings and this is the streaming", "tokens": [51322, 293, 264, 3166, 300, 2516, 264, 881, 565, 307, 15866, 12240, 29432, 293, 341, 307, 264, 11791, 51672], "temperature": 0.0, "avg_logprob": -0.22691244008589764, "compression_ratio": 1.4242424242424243, "no_speech_prob": 0.009370946325361729}, {"id": 215, "seek": 117536, "start": 1175.36, "end": 1182.36, "text": " output. Okay, I have prepared some questions that are those questions and those are given", "tokens": [50364, 5598, 13, 1033, 11, 286, 362, 4927, 512, 1651, 300, 366, 729, 1651, 293, 729, 366, 2212, 50714], "temperature": 0.0, "avg_logprob": -0.32880500646737904, "compression_ratio": 1.5630252100840336, "no_speech_prob": 0.004269678611308336}, {"id": 216, "seek": 117536, "start": 1191.9599999999998, "end": 1196.9599999999998, "text": " too fast, sorry.", "tokens": [51194, 886, 2370, 11, 2597, 13, 51444], "temperature": 0.0, "avg_logprob": -0.32880500646737904, "compression_ratio": 1.5630252100840336, "no_speech_prob": 0.004269678611308336}, {"id": 217, "seek": 117536, "start": 1196.9599999999998, "end": 1203.9599999999998, "text": " I gave the question to the LLM and this is the output of the output of the LLM.", "tokens": [51444, 286, 2729, 264, 1168, 281, 264, 441, 43, 44, 293, 341, 307, 264, 5598, 295, 264, 5598, 295, 264, 441, 43, 44, 13, 51794], "temperature": 0.0, "avg_logprob": -0.32880500646737904, "compression_ratio": 1.5630252100840336, "no_speech_prob": 0.004269678611308336}, {"id": 218, "seek": 120536, "start": 1206.36, "end": 1213.36, "text": " Also, okay, it's nice because this one, the retriever wasn't able to find the answer for", "tokens": [50414, 2743, 11, 1392, 11, 309, 311, 1481, 570, 341, 472, 11, 264, 19817, 331, 2067, 380, 1075, 281, 915, 264, 1867, 337, 50764], "temperature": 0.0, "avg_logprob": -0.23068245819636754, "compression_ratio": 1.3923076923076922, "no_speech_prob": 0.007502199616283178}, {"id": 219, "seek": 120536, "start": 1221.36, "end": 1228.36, "text": " this question and so it wasn't able to give us a response and the LLM told us, I don't", "tokens": [51164, 341, 1168, 293, 370, 309, 2067, 380, 1075, 281, 976, 505, 257, 4134, 293, 264, 441, 43, 44, 1907, 505, 11, 286, 500, 380, 51514], "temperature": 0.0, "avg_logprob": -0.23068245819636754, "compression_ratio": 1.3923076923076922, "no_speech_prob": 0.007502199616283178}, {"id": 220, "seek": 120536, "start": 1228.36, "end": 1231.36, "text": " know.", "tokens": [51514, 458, 13, 51664], "temperature": 0.0, "avg_logprob": -0.23068245819636754, "compression_ratio": 1.3923076923076922, "no_speech_prob": 0.007502199616283178}, {"id": 221, "seek": 123136, "start": 1231.36, "end": 1236.36, "text": " I'm not sure if I can move forward. Maybe I also have it for the LCL.", "tokens": [50364, 286, 478, 406, 988, 498, 286, 393, 1286, 2128, 13, 2704, 286, 611, 362, 309, 337, 264, 441, 22458, 13, 50614], "temperature": 0.0, "avg_logprob": -0.38621049457126194, "compression_ratio": 1.5, "no_speech_prob": 0.015461564995348454}, {"id": 222, "seek": 123136, "start": 1236.36, "end": 1241.36, "text": " The LCL version uses the multi-query retriever.", "tokens": [50614, 440, 441, 22458, 3037, 4960, 264, 4825, 12, 358, 2109, 19817, 331, 13, 50864], "temperature": 0.0, "avg_logprob": -0.38621049457126194, "compression_ratio": 1.5, "no_speech_prob": 0.015461564995348454}, {"id": 223, "seek": 123136, "start": 1241.36, "end": 1247.36, "text": " So you will see now that it will ask multiple questions.", "tokens": [50864, 407, 291, 486, 536, 586, 300, 309, 486, 1029, 3866, 1651, 13, 51164], "temperature": 0.0, "avg_logprob": -0.38621049457126194, "compression_ratio": 1.5, "no_speech_prob": 0.015461564995348454}, {"id": 224, "seek": 123136, "start": 1247.36, "end": 1252.36, "text": " Each question is transformed into multiple questions.", "tokens": [51164, 6947, 1168, 307, 16894, 666, 3866, 1651, 13, 51414], "temperature": 0.0, "avg_logprob": -0.38621049457126194, "compression_ratio": 1.5, "no_speech_prob": 0.015461564995348454}, {"id": 225, "seek": 123136, "start": 1252.36, "end": 1258.36, "text": " This is low, I'm sorry.", "tokens": [51414, 639, 307, 2295, 11, 286, 478, 2597, 13, 51714], "temperature": 0.0, "avg_logprob": -0.38621049457126194, "compression_ratio": 1.5, "no_speech_prob": 0.015461564995348454}, {"id": 226, "seek": 126136, "start": 1261.36, "end": 1268.36, "text": " Okay, those are the questions and this is the answer that came out.", "tokens": [50364, 1033, 11, 729, 366, 264, 1651, 293, 341, 307, 264, 1867, 300, 1361, 484, 13, 50714], "temperature": 0.0, "avg_logprob": -0.20476494664731232, "compression_ratio": 1.0138888888888888, "no_speech_prob": 0.005858517251908779}, {"id": 227, "seek": 126136, "start": 1280.36, "end": 1285.36, "text": " Okay.", "tokens": [51314, 1033, 13, 51564], "temperature": 0.0, "avg_logprob": -0.20476494664731232, "compression_ratio": 1.0138888888888888, "no_speech_prob": 0.005858517251908779}, {"id": 228, "seek": 128536, "start": 1285.36, "end": 1292.36, "text": " There are also other interesting use cases of luncheon.", "tokens": [50364, 821, 366, 611, 661, 1880, 764, 3331, 295, 6349, 27015, 13, 50714], "temperature": 0.0, "avg_logprob": -0.29694242188424774, "compression_ratio": 1.723529411764706, "no_speech_prob": 0.003229173133149743}, {"id": 229, "seek": 128536, "start": 1296.36, "end": 1302.36, "text": " We look at the simple one that is question answering over unstructured data.", "tokens": [50914, 492, 574, 412, 264, 2199, 472, 300, 307, 1168, 13430, 670, 18799, 46847, 1412, 13, 51214], "temperature": 0.0, "avg_logprob": -0.29694242188424774, "compression_ratio": 1.723529411764706, "no_speech_prob": 0.003229173133149743}, {"id": 230, "seek": 128536, "start": 1302.36, "end": 1307.36, "text": " Also it's very interesting question answering over structured data.", "tokens": [51214, 2743, 309, 311, 588, 1880, 1168, 13430, 670, 18519, 1412, 13, 51464], "temperature": 0.0, "avg_logprob": -0.29694242188424774, "compression_ratio": 1.723529411764706, "no_speech_prob": 0.003229173133149743}, {"id": 231, "seek": 128536, "start": 1307.36, "end": 1313.36, "text": " This one uses the LLM component to convert our question into a sequel query that is executed", "tokens": [51464, 639, 472, 4960, 264, 441, 43, 44, 6542, 281, 7620, 527, 1168, 666, 257, 20622, 14581, 300, 307, 17577, 51764], "temperature": 0.0, "avg_logprob": -0.29694242188424774, "compression_ratio": 1.723529411764706, "no_speech_prob": 0.003229173133149743}, {"id": 232, "seek": 131336, "start": 1314.36, "end": 1320.36, "text": " and the result of the query is used to improve the answer of our LLM.", "tokens": [50414, 293, 264, 1874, 295, 264, 14581, 307, 1143, 281, 3470, 264, 1867, 295, 527, 441, 43, 44, 13, 50714], "temperature": 0.0, "avg_logprob": -0.24548894096823298, "compression_ratio": 1.6467661691542288, "no_speech_prob": 0.005735431332141161}, {"id": 233, "seek": 131336, "start": 1320.36, "end": 1323.36, "text": " It's very interesting.", "tokens": [50714, 467, 311, 588, 1880, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24548894096823298, "compression_ratio": 1.6467661691542288, "no_speech_prob": 0.005735431332141161}, {"id": 234, "seek": 131336, "start": 1323.36, "end": 1326.36, "text": " Another one is data extraction.", "tokens": [50864, 3996, 472, 307, 1412, 30197, 13, 51014], "temperature": 0.0, "avg_logprob": -0.24548894096823298, "compression_ratio": 1.6467661691542288, "no_speech_prob": 0.005735431332141161}, {"id": 235, "seek": 131336, "start": 1326.36, "end": 1332.36, "text": " You just have to provide a JSON schema and then unstructured text and the JSON schema is", "tokens": [51014, 509, 445, 362, 281, 2893, 257, 31828, 34078, 293, 550, 18799, 46847, 2487, 293, 264, 31828, 34078, 307, 51314], "temperature": 0.0, "avg_logprob": -0.24548894096823298, "compression_ratio": 1.6467661691542288, "no_speech_prob": 0.005735431332141161}, {"id": 236, "seek": 131336, "start": 1332.36, "end": 1336.36, "text": " automatically filled in with the data from the structured text.", "tokens": [51314, 6772, 6412, 294, 365, 264, 1412, 490, 264, 18519, 2487, 13, 51514], "temperature": 0.0, "avg_logprob": -0.24548894096823298, "compression_ratio": 1.6467661691542288, "no_speech_prob": 0.005735431332141161}, {"id": 237, "seek": 131336, "start": 1336.36, "end": 1340.36, "text": " The LLM understands what to put into the JSON schema.", "tokens": [51514, 440, 441, 43, 44, 15146, 437, 281, 829, 666, 264, 31828, 34078, 13, 51714], "temperature": 0.0, "avg_logprob": -0.24548894096823298, "compression_ratio": 1.6467661691542288, "no_speech_prob": 0.005735431332141161}, {"id": 238, "seek": 134036, "start": 1340.36, "end": 1345.36, "text": " It's interesting because there are people paid for doing that work.", "tokens": [50364, 467, 311, 1880, 570, 456, 366, 561, 4835, 337, 884, 300, 589, 13, 50614], "temperature": 0.0, "avg_logprob": -0.20040919862944503, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.004214540123939514}, {"id": 239, "seek": 134036, "start": 1345.36, "end": 1354.36, "text": " Summarization is very useful and it has a lot of, let's say, problems.", "tokens": [50614, 8626, 6209, 2144, 307, 588, 4420, 293, 309, 575, 257, 688, 295, 11, 718, 311, 584, 11, 2740, 13, 51064], "temperature": 0.0, "avg_logprob": -0.20040919862944503, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.004214540123939514}, {"id": 240, "seek": 134036, "start": 1354.36, "end": 1356.36, "text": " It's an open problem.", "tokens": [51064, 467, 311, 364, 1269, 1154, 13, 51164], "temperature": 0.0, "avg_logprob": -0.20040919862944503, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.004214540123939514}, {"id": 241, "seek": 134036, "start": 1356.36, "end": 1358.36, "text": " It's very interesting and useful.", "tokens": [51164, 467, 311, 588, 1880, 293, 4420, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20040919862944503, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.004214540123939514}, {"id": 242, "seek": 134036, "start": 1358.36, "end": 1364.36, "text": " Then there is a synthetic data generation that is useful if you want to find a model", "tokens": [51264, 1396, 456, 307, 257, 23420, 1412, 5125, 300, 307, 4420, 498, 291, 528, 281, 915, 257, 2316, 51564], "temperature": 0.0, "avg_logprob": -0.20040919862944503, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.004214540123939514}, {"id": 243, "seek": 134036, "start": 1364.36, "end": 1368.36, "text": " or maybe if you want to anonymize some data.", "tokens": [51564, 420, 1310, 498, 291, 528, 281, 37293, 1125, 512, 1412, 13, 51764], "temperature": 0.0, "avg_logprob": -0.20040919862944503, "compression_ratio": 1.6363636363636365, "no_speech_prob": 0.004214540123939514}, {"id": 244, "seek": 136836, "start": 1368.36, "end": 1371.36, "text": " It works like data extraction backwards.", "tokens": [50364, 467, 1985, 411, 1412, 30197, 12204, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12822558879852294, "compression_ratio": 1.4975369458128078, "no_speech_prob": 0.007267974782735109}, {"id": 245, "seek": 136836, "start": 1371.36, "end": 1378.36, "text": " You have a JSON schema and the LLM generates a text unstructured that contains data that", "tokens": [50514, 509, 362, 257, 31828, 34078, 293, 264, 441, 43, 44, 23815, 257, 2487, 18799, 46847, 300, 8306, 1412, 300, 50864], "temperature": 0.0, "avg_logprob": -0.12822558879852294, "compression_ratio": 1.4975369458128078, "no_speech_prob": 0.007267974782735109}, {"id": 246, "seek": 136836, "start": 1378.36, "end": 1380.36, "text": " will fit into the JSON schema.", "tokens": [50864, 486, 3318, 666, 264, 31828, 34078, 13, 50964], "temperature": 0.0, "avg_logprob": -0.12822558879852294, "compression_ratio": 1.4975369458128078, "no_speech_prob": 0.007267974782735109}, {"id": 247, "seek": 136836, "start": 1380.36, "end": 1387.36, "text": " Finally, there are agents that is a key concept of luncheon and it's very fun.", "tokens": [50964, 6288, 11, 456, 366, 12554, 300, 307, 257, 2141, 3410, 295, 6349, 27015, 293, 309, 311, 588, 1019, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12822558879852294, "compression_ratio": 1.4975369458128078, "no_speech_prob": 0.007267974782735109}, {"id": 248, "seek": 136836, "start": 1387.36, "end": 1393.36, "text": " With agents, the LLM takes charge of choosing what action to do.", "tokens": [51314, 2022, 12554, 11, 264, 441, 43, 44, 2516, 4602, 295, 10875, 437, 3069, 281, 360, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12822558879852294, "compression_ratio": 1.4975369458128078, "no_speech_prob": 0.007267974782735109}, {"id": 249, "seek": 139336, "start": 1394.36, "end": 1398.36, "text": " It's worth studying.", "tokens": [50414, 467, 311, 3163, 7601, 13, 50614], "temperature": 0.0, "avg_logprob": -0.22337992294974948, "compression_ratio": 1.180952380952381, "no_speech_prob": 0.001794995041564107}, {"id": 250, "seek": 139336, "start": 1398.36, "end": 1400.36, "text": " It's very interesting.", "tokens": [50614, 467, 311, 588, 1880, 13, 50714], "temperature": 0.0, "avg_logprob": -0.22337992294974948, "compression_ratio": 1.180952380952381, "no_speech_prob": 0.001794995041564107}, {"id": 251, "seek": 139336, "start": 1402.36, "end": 1404.36, "text": " Okay, that's it.", "tokens": [50814, 1033, 11, 300, 311, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.22337992294974948, "compression_ratio": 1.180952380952381, "no_speech_prob": 0.001794995041564107}, {"id": 252, "seek": 139336, "start": 1404.36, "end": 1408.36, "text": " So, thank you.", "tokens": [50914, 407, 11, 1309, 291, 13, 51114], "temperature": 0.0, "avg_logprob": -0.22337992294974948, "compression_ratio": 1.180952380952381, "no_speech_prob": 0.001794995041564107}, {"id": 253, "seek": 139336, "start": 1412.36, "end": 1414.36, "text": " Do you have any questions?", "tokens": [51314, 1144, 291, 362, 604, 1651, 30, 51414], "temperature": 0.0, "avg_logprob": -0.22337992294974948, "compression_ratio": 1.180952380952381, "no_speech_prob": 0.001794995041564107}, {"id": 254, "seek": 139336, "start": 1418.36, "end": 1420.36, "text": " I saw his hand first.", "tokens": [51614, 286, 1866, 702, 1011, 700, 13, 51714], "temperature": 0.0, "avg_logprob": -0.22337992294974948, "compression_ratio": 1.180952380952381, "no_speech_prob": 0.001794995041564107}, {"id": 255, "seek": 142336, "start": 1423.36, "end": 1425.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 256, "seek": 142336, "start": 1425.36, "end": 1427.36, "text": " Very interesting.", "tokens": [50464, 4372, 1880, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 257, "seek": 142336, "start": 1427.36, "end": 1429.36, "text": " My question is how does this scale?", "tokens": [50564, 1222, 1168, 307, 577, 775, 341, 4373, 30, 50664], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 258, "seek": 142336, "start": 1429.36, "end": 1433.36, "text": " You showed an example in which we have just one transcript.", "tokens": [50664, 509, 4712, 364, 1365, 294, 597, 321, 362, 445, 472, 24444, 13, 50864], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 259, "seek": 142336, "start": 1433.36, "end": 1435.36, "text": " What if we had billions of transcripts?", "tokens": [50864, 708, 498, 321, 632, 17375, 295, 24444, 82, 30, 50964], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 260, "seek": 142336, "start": 1435.36, "end": 1440.36, "text": " I didn't see any mention to the ranking of the retrieved chunk.", "tokens": [50964, 286, 994, 380, 536, 604, 2152, 281, 264, 17833, 295, 264, 19817, 937, 16635, 13, 51214], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 261, "seek": 142336, "start": 1440.36, "end": 1443.36, "text": " If you can elaborate a little bit on that, it would be very good.", "tokens": [51214, 759, 291, 393, 20945, 257, 707, 857, 322, 300, 11, 309, 576, 312, 588, 665, 13, 51364], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 262, "seek": 142336, "start": 1443.36, "end": 1445.36, "text": " Thanks.", "tokens": [51364, 2561, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 263, "seek": 142336, "start": 1447.36, "end": 1451.36, "text": " Okay, luncheon helps to take this in production.", "tokens": [51564, 1033, 11, 6349, 27015, 3665, 281, 747, 341, 294, 4265, 13, 51764], "temperature": 0.0, "avg_logprob": -0.17358828072596078, "compression_ratio": 1.4872881355932204, "no_speech_prob": 0.02857685089111328}, {"id": 264, "seek": 145136, "start": 1451.36, "end": 1455.36, "text": " This was proof of concept so you can take this in production.", "tokens": [50364, 639, 390, 8177, 295, 3410, 370, 291, 393, 747, 341, 294, 4265, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16941867703976837, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.07375238090753555}, {"id": 265, "seek": 145136, "start": 1455.36, "end": 1458.36, "text": " Also, it's out of the scope of this talk.", "tokens": [50564, 2743, 11, 309, 311, 484, 295, 264, 11923, 295, 341, 751, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16941867703976837, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.07375238090753555}, {"id": 266, "seek": 145136, "start": 1458.36, "end": 1460.36, "text": " This was luncheon from zero to one.", "tokens": [50714, 639, 390, 6349, 27015, 490, 4018, 281, 472, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16941867703976837, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.07375238090753555}, {"id": 267, "seek": 145136, "start": 1460.36, "end": 1464.36, "text": " So, that scaling is from zero to 100.", "tokens": [50814, 407, 11, 300, 21589, 307, 490, 4018, 281, 2319, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16941867703976837, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.07375238090753555}, {"id": 268, "seek": 145136, "start": 1464.36, "end": 1469.36, "text": " You can find a lot of examples on how to take that in production.", "tokens": [51014, 509, 393, 915, 257, 688, 295, 5110, 322, 577, 281, 747, 300, 294, 4265, 13, 51264], "temperature": 0.0, "avg_logprob": -0.16941867703976837, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.07375238090753555}, {"id": 269, "seek": 145136, "start": 1469.36, "end": 1477.36, "text": " If you take a look at the GitHub repository, there is also a link on how people from", "tokens": [51264, 759, 291, 747, 257, 574, 412, 264, 23331, 25841, 11, 456, 307, 611, 257, 2113, 322, 577, 561, 490, 51664], "temperature": 0.0, "avg_logprob": -0.16941867703976837, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.07375238090753555}, {"id": 270, "seek": 147736, "start": 1477.36, "end": 1484.36, "text": " luncheon use this in production with the chatbot that helps searching", "tokens": [50364, 6349, 27015, 764, 341, 294, 4265, 365, 264, 5081, 18870, 300, 3665, 10808, 50714], "temperature": 0.0, "avg_logprob": -0.12274260693285839, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.010250887833535671}, {"id": 271, "seek": 147736, "start": 1484.36, "end": 1486.36, "text": " in the luncheon documentation.", "tokens": [50714, 294, 264, 6349, 27015, 14333, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12274260693285839, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.010250887833535671}, {"id": 272, "seek": 147736, "start": 1486.36, "end": 1492.36, "text": " You can find the code and it's very interesting.", "tokens": [50814, 509, 393, 915, 264, 3089, 293, 309, 311, 588, 1880, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12274260693285839, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.010250887833535671}, {"id": 273, "seek": 147736, "start": 1492.36, "end": 1496.36, "text": " If you want to take it in production, it's worth copying that code.", "tokens": [51114, 759, 291, 528, 281, 747, 309, 294, 4265, 11, 309, 311, 3163, 27976, 300, 3089, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12274260693285839, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.010250887833535671}, {"id": 274, "seek": 147736, "start": 1496.36, "end": 1498.36, "text": " It's the best practice.", "tokens": [51314, 467, 311, 264, 1151, 3124, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12274260693285839, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.010250887833535671}, {"id": 275, "seek": 147736, "start": 1498.36, "end": 1500.36, "text": " Did I answer your question?", "tokens": [51414, 2589, 286, 1867, 428, 1168, 30, 51514], "temperature": 0.0, "avg_logprob": -0.12274260693285839, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.010250887833535671}, {"id": 276, "seek": 147736, "start": 1503.36, "end": 1505.36, "text": " I'm sure you'll see this coming.", "tokens": [51664, 286, 478, 988, 291, 603, 536, 341, 1348, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12274260693285839, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.010250887833535671}, {"id": 277, "seek": 150536, "start": 1505.36, "end": 1509.36, "text": " If I have some money to spend on a hardware and I want to get an LLM,", "tokens": [50364, 759, 286, 362, 512, 1460, 281, 3496, 322, 257, 8837, 293, 286, 528, 281, 483, 364, 441, 43, 44, 11, 50564], "temperature": 0.0, "avg_logprob": -0.19759579499562582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.05027095228433609}, {"id": 278, "seek": 150536, "start": 1509.36, "end": 1515.36, "text": " there is a lot of proprietary intelligence that you use, like the Mbendix in particular,", "tokens": [50564, 456, 307, 257, 688, 295, 38992, 7599, 300, 291, 764, 11, 411, 264, 376, 65, 521, 970, 294, 1729, 11, 50864], "temperature": 0.0, "avg_logprob": -0.19759579499562582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.05027095228433609}, {"id": 279, "seek": 150536, "start": 1515.36, "end": 1520.36, "text": " and also the other part that it's on the query side at the end of the chain.", "tokens": [50864, 293, 611, 264, 661, 644, 300, 309, 311, 322, 264, 14581, 1252, 412, 264, 917, 295, 264, 5021, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19759579499562582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.05027095228433609}, {"id": 280, "seek": 150536, "start": 1520.36, "end": 1526.36, "text": " How difficult it is to do this without using OpenAI?", "tokens": [51114, 1012, 2252, 309, 307, 281, 360, 341, 1553, 1228, 7238, 48698, 30, 51414], "temperature": 0.0, "avg_logprob": -0.19759579499562582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.05027095228433609}, {"id": 281, "seek": 150536, "start": 1528.36, "end": 1533.36, "text": " It's really easy because luncheon allows to swap those components.", "tokens": [51514, 467, 311, 534, 1858, 570, 6349, 27015, 4045, 281, 18135, 729, 6677, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19759579499562582, "compression_ratio": 1.5367965367965368, "no_speech_prob": 0.05027095228433609}, {"id": 282, "seek": 153336, "start": 1533.36, "end": 1541.36, "text": " I use it here at OpenAI because it's the easy way for having a result.", "tokens": [50364, 286, 764, 309, 510, 412, 7238, 48698, 570, 309, 311, 264, 1858, 636, 337, 1419, 257, 1874, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2546187200044331, "compression_ratio": 1.4914285714285713, "no_speech_prob": 0.027544325217604637}, {"id": 283, "seek": 153336, "start": 1541.36, "end": 1552.36, "text": " But if you, for instance, use the Ollama, you can self-host the LLM and ask questions to the LLM,", "tokens": [50764, 583, 498, 291, 11, 337, 5197, 11, 764, 264, 422, 285, 2404, 11, 291, 393, 2698, 12, 6037, 264, 441, 43, 44, 293, 1029, 1651, 281, 264, 441, 43, 44, 11, 51314], "temperature": 0.0, "avg_logprob": -0.2546187200044331, "compression_ratio": 1.4914285714285713, "no_speech_prob": 0.027544325217604637}, {"id": 284, "seek": 153336, "start": 1552.36, "end": 1561.36, "text": " or maybe with a face you can rent hardware and run your open source model on their hardware.", "tokens": [51314, 420, 1310, 365, 257, 1851, 291, 393, 6214, 8837, 293, 1190, 428, 1269, 4009, 2316, 322, 641, 8837, 13, 51764], "temperature": 0.0, "avg_logprob": -0.2546187200044331, "compression_ratio": 1.4914285714285713, "no_speech_prob": 0.027544325217604637}, {"id": 285, "seek": 156136, "start": 1561.36, "end": 1565.36, "text": " So it's easy because those components are swappable.", "tokens": [50364, 407, 309, 311, 1858, 570, 729, 6677, 366, 1693, 1746, 712, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1984792845589774, "compression_ratio": 1.1359223300970873, "no_speech_prob": 0.030735600739717484}, {"id": 286, "seek": 156136, "start": 1567.36, "end": 1570.36, "text": " All right, y'all. Let's give Stefano one more round of applause.", "tokens": [50664, 1057, 558, 11, 288, 6, 336, 13, 961, 311, 976, 43421, 3730, 472, 544, 3098, 295, 9969, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1984792845589774, "compression_ratio": 1.1359223300970873, "no_speech_prob": 0.030735600739717484}], "language": "en"}