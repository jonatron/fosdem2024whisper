{"text": " So, in the previous talk, we heard about how you can add lots of commands to, well, like to fix the shortcomings of an interesting or dated model of version control. In this talk, I want to convince you that you can actually... Oh, this isn't working? Yeah. I didn't do anything. So, I don't... Oh, yeah, right, right, right. So, as I was saying in the previous talk, we heard about how you can add commands to all sorts of things and improve on the state of the art in version control. In this talk, I want to convince you that we can actually get all, like most of the stuff for free if we do... If we start by doing some mathematics. So, my entire life so far has been about doing really far stretches between deep PRE or deep practice or between one domain and another. I've been working on DNA nanotechnology as a theoretical computer scientist for a while. Today, I'm working on a game theory and economics algorithms for electricity markets. I'm also working... Well, in general, I'm interested in distributed computing. So, PIRUL is a byproduct of that interest. So, in this talk, I'll first start with defining things. There'll be some mathematics involved and also some practical stuff. So, if you're not interested in mathematical parts, like bear with me, they won't be too long hopefully. All right. So, I'll first start with defining what version control is for me, then talk about our solution and what we've been working on, and then some cool implementation details or things that I find cool at least. And then, well, my talk title was a little bit of a bit of a bit of a bit of a bit of So, I'll try to come back to that and comment on that choice by asking the question again. Is this really post-get? Okay. So, version control. Probably many people here use it and know exactly what it is. Let's do it anyway. It's one or more cool out there. Is it a tree of documents concurrently? And one thing that's super important is the asynchronous nature of the thing. The co-authors can choose when they want to sync or merge. And like reminding these definitions sounds like it's a little bit trivial, but it actually matters a lot when you're deep down in mathematics and you're trying to understand what you're doing and why you're doing it. So, for example, how does version control differ from Google Docs, for example? It is made conflicts. So, that's a feature that's been often overlooked in current systems like Git, Mercurial, SVN, CVS, RCS before it. And finally, also, version control allows you to review a project's history. So, that's a very important feature as well. Many people consider, well, apparently not everybody, but many people consider version control a solved problem. Git is here to stay. It's sold version control 15 years ago, and that's the end of the story. Unfortunately, well, I personally don't think this is true. Some symptoms indicating this might not be true are, for example, that's R-tools, no matter how good we think they are. They still aren't used by non-coders despite their maturity. We've been working on this for 30 years, and the thing we're most proud of in this industry cannot even be used by outsiders. So, nowadays we have, like, Silverware designed by NASA, and everybody at NASA is proud of that, and everybody buying Silverware designed by NASA is proud of that. But R-tools for version control, they aren't used by outsiders or just marginally. R-tools are distributed. Yes, most of the time we use them with a global central server. So I've seen a poster in this conference saying, not all paths lead to Chrome, but apparently many paths lead to GitHub. R-tools also require strong work discipline in planning. You need to plan ahead of time, to plan your branches, to follow really strict workflows, to rebase versus merge. We even had a slide on that in previous talk, like how we merge shop or rebase shop. In this talk, I'll try to convince you that this doesn't matter at all. And all this results in a significant waste of human work time at a global scale. Improvements have been proposed, for example, DAX, but they don't really scale and nobody uses them. So, is there, can we get a quick fix? Can we get that next Git command that will fix everything? Well, unfortunately, I don't think so. First of all, because abstractions leak terribly in Git. And the reason isn't the UI, isn't the bad naming of some commands or arguments. The reason is that if we consider miracle trees and DAX as the core mechanism, they can't really be hidden from the user. Because if that's the core thing you want, and if all the properties you want come from that, there's absolutely no reason to hide it from the user. And there's no hope you can even succeed in doing that. Also, similarly, if strict ordering of snapshots is the main feature, the most used Git commands like rebase, we heard about rarararar in previous talk, cherpic, they're fixes around that best feature we have. So why do you need to fix your main feature? That's strange. Anyway, some more same terms. There is an inflation of commands and options in Git. Like I'll try to show you an example here. This is God and comicals, it's the point that someone made a Git's man page generator that actually looks credible. If you reload the page here, you get a different one every time. Give environment grabs non-reset downstream environments using past local garbage collectors while overriding fitting shells survey the given environments. Boo doesn't use this command here. Anyway, there is also an inflation of UIs. Even Big Tech is now investing in Git in mercurial UIs. I won't cite names here. But there's also inflation of forges. How many forges have started last year alone? I know a bunch of forges because they sometimes contact me to help them do something with people. My claim here is that we all consider text editing a solved problem. There's no new text editor popping up every now and then and convincing the VC that this is a really cool idea. Window managers, same thing. And forges, you keep seeing forges popping up every now and then. I'm not saying this is bad. This is actually really good. It's fantastic that the ecosystem is thriving and there's a lot of diversity. But my claim is that maybe this inflation comes from some more fundamental thing that we don't understand. Now, on to our demands. First, we demand associative merges. It may not matter much to use, but I'll show you in the next slide that you actually want associative merges. Associative merges means that when you have two changes, A and B, and you merge them together, it should do the same as merging A followed by merging B. And the reason you want that is because you want to be able to review your patches or your comments one by one and then merge them and trust that the merge does exactly what you think it does, except in get it doesn't. Associative merges, if A and B can be produced independently, they all should not matter. That's what I mean by are we a rebase shop or a merge shop. It doesn't matter. We don't want to ask this question. We want to get back to work. Branches, we do want branches. Everybody loves branches, but not too many branches. Branches are good until they aren't. I'll tell you more on that later. We also want that's something I personally really want. I want low algorithmic complexity. And also ideally, fast implementations was in my way of seeing things that come second. But I also give you an example of a very fast implementation of something with Darm. All right, associative merges, the first of our demands. This is exactly what I described, but this is a graphic view of it. So you have two co-authors, Alice and Bob. Alice produces one, commits A, and Bob produces two, commits B and C. And then in the first scenario, Alice merges Bob's first, commits, and then Bob's second, commits. The second scenario, she merges both commits at once. And while the commit identifiers, nobody would expect that they're the same. They will necessarily be different. But the contents of the, if there's no conflict at all, the contents should absolutely be the same. And this is actually false. So this is an example, a counter example of where Giz is not associated, and this might be a problem. This is actually terrifying to me. We start on the left here with a simplified two lines, A and B. Alice follows that path. She adds the first commits with a G at the very beginning of the file. And then she goes on and adds another commit with another copy of A and B before that G, right? And concurrently to that, Bob inserts an X between the initial A and B. And when you can try that, if you have a laptop here, you can try to simulate that in Git today. And this is actually not a bug, it's a feature of Git. And what happens if you do that is that Bob's new lines get merged into Alice's new lines. And if I were working in a high security project, this would absolutely terrify me. This means that Git can randomly shuffle your lines around and do it silently. Without telling you that there's no conflict, nothing. It just works. And yet it doesn't really work. It doesn't do what you think it does. So we don't want that. We want to fix the problem. We also want commutative mergers. So that's a more controversial one. We want the property that if Alice and Bob work together, well, Alice can pull Bob's changes and Bob can pull Alice's changes. Without having to worry too much about the resulting hashes or the contents of the file. If the patches are independent, you should be able to apply them in any order without changing the results. So we do that. Git and SBN are never commutative. So why would we want this? Actually there's very good reasons to want this. For example, you might want to unapply and unapply an old change, an old patch that you just made a few patches ago that was wrong. And you want to undo it without having to change your entire identities. Of course, we also want state identities and I'll come back to that later. We want cherry picking. We want to be able to just take that one patch from a different branch, maybe a bug fix. I want to pull this into our branch without having to rebase everything and change every commit's identity. And yet keep strong, unfortable state identifiers. And we want partial clones. So partial clones means that you want to just pull the patches related to subprojects and possibly also in the other direction merge repos transparently. Scott was talking before about mono repos and how Microsoft devoted probably millions of man hours to have their mono repos work. But actually if you first try to model your things properly and try to understand commutativity, actually you don't need all that. You can get mono repos for free. And so that brings us to one of the crucial slides in this presentation about states versus changes. So the way we see things in order to think about version control. So I understand I'm not giving you many new commands or cool line hacks, but before getting to that we had to think about what it means to do version control. So states versus changes. There's actually two fundamentally different ways to model what version control is. One is by seeing it as a series of versions, a series of snapshots of your repos, which is what Git does, and Mercurial, SVN, CVS do that. And only compute changes as a byproduct of these. The question we can ask is what if we did the opposite? What is if instead of considering that working in a project means creating a new version, we consider that working in a project means changing it, creating a change. And another question we can ask is what if we did both at the same time? And that's what we do. All right. So a little bit of bibliography first. And this is getting a little bit mathematically. So bear with me if you don't understand everything, I'll get back to cool implementation stuff later. So a change-based idea, and this is from the 80s, it's called operational transforms. It is what Google Docs, for example, uses, or Docs uses that as well. So in operational transforms, for example, we start with a file with only three lines, T1 on the left inserts, so this is Alice, let's say, inserts X at the beginning of the file, and T2 deletes the character C. So to get into two divergent states, and then what operational transforms mean is that now that we've inserted an X at the beginning of the file, this changes, we have to rewrite the other concurrent changes. So for example, here, instead of saying delete the second character, it was a C, now you have to say delete the third character, it was a C. And so that's how you can merge things. Docs does this and uses this to detect conflicts. One issue is that if you only have insertions and deletions, it's okay, but there are still performance problems. But as soon as you start handling more than insertions and deletions, you get into a quadratic explosion of cases because you have to handle all pairs of types of operations. And this is according to Google engineers who worked in the Google Docs project, this is an absolute nightmare to implement. And I've never heard anyone implement an operational transform, we said, yeah, they're cool, they're really easy. So a hybrid in more recent state approach is CRDTs. So how many here know about CRDTs? Okay, okay, reasonable number. So the general principle is very simple. The idea is to design a structure where all operations have the properties we want. Instead of having your structure and say, okay, now how do we merge changes? Instead of doing that, you take the problem in the opposite direction saying, how can we design a data structure from scratch so that all operations on that data structure have the right properties, meaning they are commutative, associative, they have a neutral element and all that algebraic things. Natural examples of CRDTs are like, for example, a very simple one, increments only counters, counters where you can only add one to the counter. This is a very easy and natural example of a CRDT because if Alice and Bob both increment the counter, you just have to add two to the result to merge their change. Insert only sets, for the exact same reason, insert only sets, there are natural CRDTs. And if you want to do things like deletions or more subtle data structure, more subtle, more interesting operations, you have to use more trickier techniques like Tom Stones and Landport clocks. I won't get into these details and if you're interested, we can talk later. A useless example of a CRDT that's often invoked is a full git repository. Well this is just an append only set of commits. So yeah, sure, it's a CRDT. It's commutative and all that. But also, it's not super useful to see a git repository as a CRDT. Just means you can clone this. Saying this is a CRDT means basically it's okay, you can clone a git repository and then keep pulling into it. But it doesn't mean it handles merges properly. What we want is the heads of the git repository to be a CRDT. All right, so how do we do that? Well, merges, when everything goes right, we're not really interested. So we'll start by modeling conflicts because they're the hardest case. And if we cannot model conflicts properly, then there's little hope of doing anything interesting. So conflicts are where we need a good tool the most. The exact definition depends on the tool. DAX for example has really cool and exotic definitions of conflicts. For example, if Alice and Bob are writing to the same file at the same place, I'd say most tools consider that a conflict, but not all. When Alice renames a file from F to G, while Bob renames it to H, I'd say most tools also consider that a conflict. Some will just pick a name randomly. Alice renames a function F while Bob adds a call to F. So that's a trickier one. And very few tools that I know of can handle that conflict properly. If a conflict can do it, my tool cannot do it. And Git can certainly not do it. So how do we do that? How do we solve all these problems at once and get all the nice properties for free? We do that by using category theory. So this is a mathematical framework that gives you really nice tools to model, to work in abstractions of things in general. So our modeling in category theory of this problem is if you have any two patches, F and G, what we want is a unique state P, which is the sort of the minimal merge of F and G, such that for anything that Alice and Bob could do after F and G to reach a common state, that common state, or common state Q, that common state can also be reached from P. So instead of doing some work to get to common points, you can always first get to a common point and then do the work. So if P exists, category theorist call it the push out of F and G. So the reason we're interested in that is because category theory has a lot of tools to start from this simple modeling and give us lots of cool stuff like free data structures and while do our job for us basically. So in this case, category theorist would notice that the push out of two patches doesn't always exist and this is absolutely equivalent saying that sometimes there are conflicts. And now the question becomes how to generalize representation of states, states are like X, Y and Z, so that all pairs of changes F and G have a push out. The solution is to just generalize states to directed graphs instead of just sequences of bytes where vertices of these graphs are bytes. I'll give you an example in the next slide. Verses are bytes and edges represent the union of all known order between bytes. So that sounds a little far fetch, but actually it's very clear in the example. So the way we model these things in Pichl is as fellow. So the first example of a simple patch is how do we add some bytes to our data structures. So we have a file. So well first in our graph, all vertices are labeled by a change number. Here for example C0 is change number zero and an interval such as zero and presenting bytes inside that change, inside that patch. And edges or our graph are labeled by the change that introduced them. So for example, here's a starting from an initial file C0, zero, n. How do we add some bytes in the middle? Well, we'll first split the initial file and then add some bytes, add a new vertex inside the middle of that vertex and then reconnect everything so that we can get the order of rights. And now that the bytes introduced by C0 between zero and i come before the bytes in C1 between zero and m and these in turn come before the bytes introduced by C0 between i and n. So this is how we do insertions. The implementation now, the rest is a question of, is a matter of implementation like how do we store these giants graphs efficiently on disk and so on. Deleting works more or less in the same way except we now introduce a new thing which is the edge label. So deleting a vertex in our system means turning an edge, like turning an edge from a continuous line into a dashed line. And so we do more or less the same thing. In this example we're deleting bytes J2i from C0 and zero to K from C1. So some bytes that were introduced by previous patches. And so this is what we guess in the end. So we get a bunch of vertices and dashed lines to indicate which bytes should be deleted and which are still alive. All right. And that's actually the good news is that we don't need more than that to build an entire version control system. So this is rebuilding foundations first, right? This is actually really cool because it's a very minimalistic system and we like that because it makes everything else easy. So two kinds of changes. One is adding a vertex to our graph in a context, meaning parents and children of that new vertex, and change an edge's label. And this is all we need actually. We get, like, from these things we get a ton of cool properties for free. First we get free conflict handling because we were just, like, there's no notion of conflict in this. We're just adding vertices, changing edges' labels. And there's no, like, the graph naturally models conflicts. So conflicts are possible. They're properly modeled inside the graph and they can be talked about and manipulated without any specific treatments. So our definition of conflict here is we could first call the live vertices whose incoming edges are all alive, meaning they're all full lines. Live vertices or vertices whose incoming edges are all dead, and vertices in the middle that have both alive and dead edges, we call them zombies. We say now that the graph has no conflicts if and only if it has no zombie, and all its live vertices are totally ordered, meaning we can actually compute a full ordering of all the bytes. We know exactly what order the bytes come in the file, and if we have that, then we can output the file to the user, and it actually makes sense. So some notes on this system. So this gives a system where we have changes that are not exactly or diffs that are not exactly Unix diffs. They are Unix diffs plus tons of metadata to make it work. And now they are partially ordered by their dependencies on other changes. This means that you cannot possibly work inside a file that has not been introduced in the repository yet, or you cannot edit a paragraph that doesn't exist yet. So not all changes are commutative, but changes that could be made independently are commutative. Chera picking, now this is the same as applying a patch. We only have two commands in the system, apply a patch, unapply a patch, and it does everything. So chair picking is just apply a patch. There's no need for git rararar, because conflicts are solved by changes. You can chair pick changes. So you don't have to do any special hack or Ruby Goldberg machine to remember the conflict resolution or anything. Like the conflict resolution is just a patch, and you can just send that to others, push it, pull it, and that's it. Partial clones, monorepo sub modules, so they are easy. As long as white patches are disallowed. So if you have a patch that just does some formatting across your giant monorepo, then you will have a problem, because this patch will probably have tons of dependencies, and you will end up pulling lots of dependencies into your repo. But if you're careful enough to fragment or to cut this patch into smaller pieces, then everything becomes easy, because you can just pull the patches that are relative to a tiny part of your repository, or your giant monorepo, and it just works because of commutativity. Because all the patches you produce locally by working, they do, they necessarily commute with all the patches that were produced by your co-authors and other parts of the monorepo. So after your day of work, when you push your patches to the server, others do the same, but it doesn't matter, because it gives the same results in the end. For large files, so I've showed you a graph in the previous slides that didn't talk at all about the contents. So the contents is something super important, obviously, but it's only handled during Diff, and it is not, like you don't apply a patch, the patch themselves, they are not applied, they don't use the contents of the vertices in order to be applied. You can apply a patch by just saying, well, I just added this file, it has like one terabyte of data, and that's it, and you can find the data in some change somewhere. And so a nice consequence of that is that for large files, you can apply a patch without knowing what's in the patch. You can fetch the rest later. And so if you're running a video game shop, for example, and you have artists pushing assets, large binary assets all day, then at the end of the day, when you want to just pull everything, you don't have to pull all the intermediate versions. You pull just the operational part of these versions, saying, well, I added one gigabyte here, and now I replace that gigabyte with another one, and then yet with another one, and maybe you have 10 versions of your binary asset during the day. But at the end of the day, the only thing you know is that, yeah, you had 10 versions, there's only one still alive, just pull that one. So there's no special hack or LFS needed, you're just using patches. All right. Now onto some implementation things. So there's a lot of things to say about the implementation. The project is entirely written in Rust, or mostly written in Rust, I'd say. So I won't cover all the details about how it works and our implementation, because there would be, that would take an entire day of talks, and I won't do that. But I'll just give you some cool things that I like about our implementation. So the first challenge is that we have really large graphs on disk, and we obviously don't want to load them up entirely in memory in order to edit them. We want to be able to just work directly with the on disk data structure. So we want to store edges in a key value store, because that's an easy way to do that kind of stuff. We want transactions, because we're actually inventing a new format, data format, so we absolutely want assets, properties, we want like full transactionality, we want passive crash safety, so all these things. And we want branches. So we want to be able to take a key value store and just fork it without copying a single byte, because it would take too long. It would take a time linear in the size of history, and we don't want that. So there's no key value store, there was no key value store when we started that would do that, especially the branching feature. So we had to write, I had to write one. It's called Sanakiria, which means dictionary and finish. It's a non-disk transactional key value store, but it's actually not just a key value store, it's something really generic. It's an ACID block allocator in a file, really. And that block allocator uses a key value store, uses B trees to allocate memory, but also the B trees themselves use the allocator to do their job. So that's why the minimal data structure we can have is B trees, but also you can write all sorts of data structures with Sanakiria just by using the allocator. We have crash safety using referential transparency in copy and write. The initial goal was actually done successfully, completed successfully, because the tables are forkable in big O of log n, so it's probably completely useless for a general key value store. Then in our case, branches were really needed, so we had to do it. So forkable in big O of log n, a logarithmic time in the total size of the total number of keys. As written in Rust, while it started in Rust back in 2015 or something, Rust was still a bit younger than today. And the cool bit about that is that it allows you to access generic Rust types directly as pointers into, like, storing the file. It is way too generic, way too many things, meaning that the APIs is horrible to use, but there's a good consequence of the generality is that it's even generic in the underlying storage layer. For example, we can use it on memory map file, which we do all the time in Pichol, but we can also do it in Z standard compressed files. I've also used it not super successfully, but the prototype worked on Cloudflare key values, Cloudflare KV, so storing, like, building a key value store on top of another key value store. The cool thing about that is that, you can also use it to build ropes, for example, or Patricia trees or things like that, or vector search indexes. So I thought that implementing this in Cloudflare KV was interesting, but it's actually too slow to be really useful. All right. A very unexpected consequence of that is that Senacilia is the fastest key value store we've tested and actually beats LMDB, which is the fastest C key value store by a pretty wide margin. In these graphs, I've included, actually, the coolest project ever in this space, which is not Senacilia, it's Sled. Sled is a really fantastic key value store that allows you to have multiple concurrent writers using really, really cool data, like modern database technology and so on. Senacilia is much more modest in its scope, but it's also way faster. So if we remove Sled, which is more on the experimental side, we can see that we beat LMDB by 50% or something. I've included the Rust standard B trees in these graphs. They're the theoretical limit. You cannot go faster than that because they don't even store anything on disk. We have to store stuff on disk, so we will be slower. Okay. So using Senacilia, I can build modular databases. Like I said, this is transactional block allocator with reference counting included. I've built different data structures in this. One cool thing you cannot do with others that can be done in Senacilia are composite types. So for example, in Pihu, branches are B trees of strings to other B trees that store our graphs. So you can nest data structures like that, which is cool. I have a prototype text editor with forkable files. So you can click a button and have a free copy of your file, sharing all its common bytes with the previous one. And its type is something like that, a B tree of string to rope in the Pihu graph. So if you're interested in data structures and performance challenges, join us because we're doing cool stuff in the space. All right. So back to my claim that this is both GIT. Things we get for free. I've said a few of these so far, but we can get, one thing I haven't said is we can get super fast Pihu credits, which is the Pihu equivalence of GIT blame because we don't want to blame our co-authors. We'd rather credit them. So the info is readily available in the graph. So you get that for free. So Scott was speaking in his talk about how you can use really cool hacks to speed up GIT's blame. But actually, if you don't use GIT at all, like if you model your stuff properly, you don't even need to speed things up because the information is readily available in the graph. And so it's fast by default. You can have your bug fixes in your main branch. You don't have to plan feature branches and bug fix branches in advance. You can push them to production by having them on your main branch. You can work on several features in the same branch and then decide what belongs to a feature after the fact. So no more rigid workflows. No more like way less meetings, hopefully. You can get sub modules. So sub modules don't have to suck. Don't let anyone tell you otherwise. Sub modules don't have to suck. You can get them for free using patch commutativity. And the reason is changes in unrelated projects commute because they can be produced independently because they are related to unrelated projects. So they are commutative. And so you can get sub modules for free. Signing and identity. So this is something that GIT introduced recently as well. But after we did, your identity is your public key. All patches are signed by default. And the identity changes are easy and possible because we like to welcome everyone. And people sometimes change their identity. And we don't want to let their personal life interfere with their work. You get free cherry picking. So I've said that a couple of times already. But you just apply the patch and no need to change its hash, its identity. And you can get almost free scalability to very large mono repos. So I've said that. We Goldberg machine needed. Just one cool bit of implementation. We have commutative state identifiers. So I've said earlier that we want to hash our patches to be able to make them inforgible. But we also don't want it to be just like a soup of patches and like, you know, hidden states where you cannot get your, you can get like where you don't understand anything anymore. So we do want state identifiers. It's like commit hashes. And but the thing we, the thing that's hard for us is because we want, because we, because we, the patches are commutative, we want a then B to give the same state as identifiers as B then A. And at the same time, we want these state identifiers to be fast to compute. So we want, we want, we don't want to have to like, for example, when naive, naive, naive, naive version would be like sorts all your hashes by, by hash and then hashed all of that. So that would take a time linear in the size of history, but there is a cool trick which is to use discrete log and elliptic curves. So this is where you turn each patch identity H into an integer and then you identify, you identify your states using each the part, each the product of all your hashes. And this is something you can compute very easily from a state and the next patch. So this takes a constant time to confuse and it's commutative for free. So this is, this is, this is a trick that I like. Okay. All right. Now, what's future developments in that, in that space? So we want, we're working towards a hybrid states patch system. So in, in GITS, I said that commits our states, not changes. There's like the blog posts all the time reminding us of that fact, even though patches can be applied and recomputed after the fact. Darks only has changes and recomputes states as needed. So it's completely, completely opposite approach. And Pihla's both, as I've tried to convince you. It has a data structure modeling the current states, but that data structure was not actually designed, it was found, it was, it was calculated from the nature of the patches we wanted to have on text files. And this is therefore completely transparent. So this is not a leaky abstraction. This is something that was found and calculated from the patches themselves and not just a cache that, that leaks or is like sometimes becomes irrelevant to the patches that were applied to it. All right. Ongoing projects in that direction towards a hybrid state patch system where we have tags currently, but there are a bit, there are bits of slow and, and bloated. So we want to, we're working towards a lightweight tags. And this is a feature that will add super fast history browsing in, in Pihla, while retaining all the good properties of patches. Currently tags are implemented as a semi-quill data database using compressed files as a back end. Another thing we're, we've, we've been discussing on our, Zulip is patch groups or topics or things like that to group patches together and to be able to say, well, I have just one branch. I don't want to work with branches. So I only have one branch. Maybe this is bad practice, good practice. I don't know what, I don't, I don't want to tell people what their good practices should be. Like it should be what makes them fast and efficient. That's all. So patch groups would, would allow people to group patches together to have all their patches in the, in the main branch and then push just patches related to one specific feature. So that would allow people to like be a bit more organized, for example. Someone proposed queues recently to avoid half-merged states because when, when you're merging states, patches one by one, sometimes you can get in a state that was never tested by anyone. So that's, that's not great. And so we want to add queues to get the best of both words actually to say, well, actually I've done a merge here. I've not, I've just, I've not just applied the patch. I've done, I've applied the patch together with other patches. So that's the kind of stuff we're working on. But this is not, not super, not super hard. And if you're interested in contributing, we're really welcoming. Well, we, we hope we're welcoming enough. All right. So if you want to help us, this is currently a large project and a small team. There's lots of satellite projects. So we've, we've built our own database system in order to build this. We've built our own SSH implementation in order to build this. But fortunately proper mathematics can make that work. We have way less things to implement that, that any other version control system. It's bootstrapped, meaning it's used, we've been using it for itself since 2017, which wasn't without its problems in the beginning, because some patches could only be applied if you already had the patch. So there was a interesting, interesting challenges. There's a lot of effort needed in maintaining the documentation, accessibility tutorials, UI, bike shedding, we're really demanding of that. We have good first bugs tags on our repository. Well, our repository hopefully isn't hosted on GitHub because we can't, they don't support Piholi yet. So we had to build our own forge, unfortunately. And so if you want to come help us, then yeah, good first bugs are the way to, to get started. And come say hi on our Zulip. It's the URL is here. All right. So open source version control based on algorithms and PRMs and also cool, low level stuff to optimize databases, scalable to mono repos and large files for free, potentially usable by non-coders. I've told it to absolute non-coders. I've discussed with some people in parliament, in the French parliament actually. Artists can use it without having to learn what's a rebase, without having to know whether they're in a merge shop or a rebase shop. Lawyers can use it to version their, their documents and what about others. Sonic Pi composers and music musicians, legal builders and whatnot. We have a repository hosting service available. That's it. Thank you. Okay. If you're living live quietly, we have time for like a couple of questions. Raise your hand. Okay. Quiet, please. Hi. Thank you for your talk. I had a quick question regarding diff algorithms. I think the default diff algorithm in GitHub is Meyer. There's a bunch of other ones you can select. Something I can't hear the question. Can, please. Sorry, I'll speak a bit more. My question was regarding the diff algorithms. I think in Git, the default algorithm is Meyer. There's a few other ones you can select, I believe. But something that's a bit too bad is that the diff algorithm is generic. It's only diffing text. It doesn't know what it is actually diffing. If it's a JS file or a Python file, it doesn't really care. And so, in a way, I think it could be interesting to have plug-and-play diff algorithms to have more semantic diffing based on what interpreting what you're diffing. Would that be something you're thinking about? Yeah. So the question is, can you swap? Can you replace the diff algorithm with something else? So, yes, actually you can. But unlike in Git, Git doesn't do diffs. You can do diff after the fact and change your diff algorithm after the fact. Obviously here, this won't be possible because the diff is so core to what we do. So you can definitely change the diff algorithm, but you have to do it while you're working in order to create your passion. You cannot do it after the fact. So that's a trade-off that we've made. Hi. It looks like a really interesting tool. I was going to ask how easy do you think it would be to automatically migrate from, say, an existing Git repo into a repo kind of based around this system? Well, you tell me. We have a Git importer. One pain point currently with the importer is that there's no exporter because importing and then exporting would be doing a round trip. Because diffs are ambiguous in Git, doing a round trip would create artificial conflicts. So we haven't implemented that. There are interesting challenges towards that goal. So one thing for perfect interpretability would be to have an importer and an exporter that work in a transparent way. Currently, there's only a Git importer. So if you want to convert your project into Pihl, you can use our Git importer. You cannot just work on the side using Pihl and then collaborate with the rest of your team using Git. So we'd love to have that. But there are theoretical challenges towards that goal. But yeah, how is he? I don't know. Try it and tell us if it was too hard. Hey. Thanks for the talk. I'm over here. You said that DAX can recognize it as a conflict when Alice renames a function f to g and Bob adds a call to f concurrently. How does that work? This was a little bit of exaggeration in what I said. What DAX can do is that they don't do just insertions and deletions. What they do is they have a command called DAX replace where you can replace an identifier with another one. And so they make it commutative with other operations so that they are able to detect a conflict in some cases. But I wouldn't rely on it to check for the semantics of my repository. This is just a tool. This isn't meant to solve all the problems of solving conflicts automatically or conflicts are part of a normal working process. As some say, seeing is believing. You're working on something that can be called, can be similar to a group where. So we know that someone like Douglas Engelbart provided a nice demo and showed that people actually can use that. So you're saying potentially non coders can use that. But can you or have you some demos or something that can show this actually in action and use by the non coders or do you have plans to show something like that? I don't really have a demo of non coders working something. So the non coders, the specific non coders I was thinking about when I wrote that on the slides are people doing like contracts in my company. So we're using plain text contracts for our customers to make sure that we're on the same page and so we're using version control between the sales and implementation to make sure we're not selling stuff that doesn't exist, for example. So yeah, that's that kind of stuff. But it's still very limited and we don't yet have demos, like entire demos of people working like a part of the apartment were operating entirely in Pichu because no part of the apartment has, so they've tried, they've started to look at it. But no, there's no demo of that. But yeah, we very much love to start collaborating with non coders to make it welcoming and useful and fun for them. So you think you can do that actually? Yeah, I'm pretty sure I can. I can explain the entire Pichu in just a few minutes, like the entire UI in just our CLI in just a few minutes to people who've never coded before. So yeah, apply a patch, unapply a patch, that's all you do. I thought these, I was extremely excited to see this talk. I started off very skeptical and I completely changed my opinion and I just really appreciate kind of doing that. It was a really effective talk and I'm very glad about that. I wanted to say regarding operational transforms versus the directed graph model that you have, I noticed that you had, there are boxes that you've drawn for operational transforms that seemed similar when you drew the same boxes to describe your category theory, sorry, your directed graph process. The question I wanted to ask is, could you view the vertices of the operational transform block as every vertex is the entire state of the document? I want to ask you, is it correct to say that your directed graph model instead of having each vertex be the entire state of the document, is instead individual byte ranges? So I guess would you say that this analogy to operational transforms is kind of correct in that each vertex is not the entire state and part of the reason why I would say Pjul and, sorry, I mispronounced that, Pjul and the rest of your software I think works, I think it's because it has less of a dependency on the entire state of the document. So I don't know if I explained it right, but I felt like I had a realization as all and I wanted to know whether you had, I guess, thoughts about how this directed graph model is kind of inherently easier or harder than operation. To me it makes sense why it's stronger and I just wanted to share that realization because there's less dependency on state. I wanted to know if you thought that that was a reasonable description. Yeah, this is reasonable. One comment I would have on that is the main difference with operational transforms is that you don't have, if you want to, for example, merge n batches in a sequence, in Pjul you don't have to look at pairs of batches. You can just apply one batch and then the next one and they don't have to see each other in order to, they don't modify each other when they're being applied, which is not the case in operational transforms. So that's the main difference. But I agree that it's confusing that the diagrams look similar. What is the killer feature of Pjul that will make it succeed where darks failed? Performance. Okay, speaking of performance, how much of that is attributable to the change of data structures and algorithms and how much is attributable to rewriting it in Rust or in Haskell? Most of it is algorithms. Almost 100% of it is algorithms. Sure, writing in Rust makes it faster than writing it in a garbage collected language, but this is just marginal. The main thing about Rust is that it allows you to write really low level stuff that allows you to build different kinds of algorithms. For example, Senakiria, I cannot see how this could be written in Haskell or OCaml, but it would be really, really painful. Rust makes it much easier because this is low level stuff and this is where you can get most optimizations. But yeah, performance, Pjul is, it was doubly exponentially faster than darks for mergers. So back when, like two years ago when darks had the exponential merge problem, this has been fixed since then. And we're only exponentially faster than them there. So for example, if you want to merge a patch, if you have a really large file with a really long history in Pjul and you want to apply a patch in the middle of that file, this will take a time logarithmic in the size of the file. In Git, you have to look at the entire file, do a deep pre between that file and your patch and then apply that. So it's linear in the size of the file. So we're still exponentially faster than that. Of course it doesn't matter because most files are not so crazily large that we can see the difference in the algorithmic complexity between Git and Pjul. But on really, really large files, this would matter. So what that means is, yeah, killer feature, you can scale to mono repos where darks, I've seen it fail on a paper. I've seen it take, I've seen, merged this take a really, really long time, several minutes on the mathematics paper with 10 pages of latex. And here we're like, everything works in milliseconds or less. And because of the fear, like the scalability to mono repos in large files is not done using extra hacks or extra layers or extra LFSs or extra sub modules or whatnot. They're just like a byproduct of our design. They're just, yeah, these are the killer features. I don't know if I answered the question. I get the name of Sanakya for dictionary, but why the name Pjul? Oh, this is the name of a South American bird that has the property that it lays nest. It builds a nest cooperatively in between a group of birds. And then all the females of the group lay their eggs in the same nest and they take turns to keep them warm. And so, yeah, it's just a metaphor. Okay, our time is up. And so let's thank again. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.96, "text": " So, in the previous talk, we heard about how you can add lots of commands to, well, like", "tokens": [50364, 407, 11, 294, 264, 3894, 751, 11, 321, 2198, 466, 577, 291, 393, 909, 3195, 295, 16901, 281, 11, 731, 11, 411, 51112], "temperature": 0.0, "avg_logprob": -0.26389734135117643, "compression_ratio": 1.3524590163934427, "no_speech_prob": 0.3115527033805847}, {"id": 1, "seek": 0, "start": 14.96, "end": 22.56, "text": " to fix the shortcomings of an interesting or dated model of version control.", "tokens": [51112, 281, 3191, 264, 2099, 49886, 295, 364, 1880, 420, 23804, 2316, 295, 3037, 1969, 13, 51492], "temperature": 0.0, "avg_logprob": -0.26389734135117643, "compression_ratio": 1.3524590163934427, "no_speech_prob": 0.3115527033805847}, {"id": 2, "seek": 2256, "start": 22.56, "end": 28.32, "text": " In this talk, I want to convince you that you can actually...", "tokens": [50364, 682, 341, 751, 11, 286, 528, 281, 13447, 291, 300, 291, 393, 767, 485, 50652], "temperature": 0.0, "avg_logprob": -0.375289762863005, "compression_ratio": 1.5763546798029557, "no_speech_prob": 0.2658681869506836}, {"id": 3, "seek": 2256, "start": 28.32, "end": 31.68, "text": " Oh, this isn't working?", "tokens": [50652, 876, 11, 341, 1943, 380, 1364, 30, 50820], "temperature": 0.0, "avg_logprob": -0.375289762863005, "compression_ratio": 1.5763546798029557, "no_speech_prob": 0.2658681869506836}, {"id": 4, "seek": 2256, "start": 31.68, "end": 32.68, "text": " Yeah.", "tokens": [50820, 865, 13, 50870], "temperature": 0.0, "avg_logprob": -0.375289762863005, "compression_ratio": 1.5763546798029557, "no_speech_prob": 0.2658681869506836}, {"id": 5, "seek": 2256, "start": 32.68, "end": 35.239999999999995, "text": " I didn't do anything.", "tokens": [50870, 286, 994, 380, 360, 1340, 13, 50998], "temperature": 0.0, "avg_logprob": -0.375289762863005, "compression_ratio": 1.5763546798029557, "no_speech_prob": 0.2658681869506836}, {"id": 6, "seek": 2256, "start": 35.239999999999995, "end": 36.239999999999995, "text": " So, I don't...", "tokens": [50998, 407, 11, 286, 500, 380, 485, 51048], "temperature": 0.0, "avg_logprob": -0.375289762863005, "compression_ratio": 1.5763546798029557, "no_speech_prob": 0.2658681869506836}, {"id": 7, "seek": 2256, "start": 36.239999999999995, "end": 38.239999999999995, "text": " Oh, yeah, right, right, right.", "tokens": [51048, 876, 11, 1338, 11, 558, 11, 558, 11, 558, 13, 51148], "temperature": 0.0, "avg_logprob": -0.375289762863005, "compression_ratio": 1.5763546798029557, "no_speech_prob": 0.2658681869506836}, {"id": 8, "seek": 2256, "start": 38.239999999999995, "end": 43.4, "text": " So, as I was saying in the previous talk, we heard about how you can add commands to", "tokens": [51148, 407, 11, 382, 286, 390, 1566, 294, 264, 3894, 751, 11, 321, 2198, 466, 577, 291, 393, 909, 16901, 281, 51406], "temperature": 0.0, "avg_logprob": -0.375289762863005, "compression_ratio": 1.5763546798029557, "no_speech_prob": 0.2658681869506836}, {"id": 9, "seek": 2256, "start": 43.4, "end": 48.84, "text": " all sorts of things and improve on the state of the art in version control.", "tokens": [51406, 439, 7527, 295, 721, 293, 3470, 322, 264, 1785, 295, 264, 1523, 294, 3037, 1969, 13, 51678], "temperature": 0.0, "avg_logprob": -0.375289762863005, "compression_ratio": 1.5763546798029557, "no_speech_prob": 0.2658681869506836}, {"id": 10, "seek": 4884, "start": 48.84, "end": 52.760000000000005, "text": " In this talk, I want to convince you that we can actually get all, like most of the", "tokens": [50364, 682, 341, 751, 11, 286, 528, 281, 13447, 291, 300, 321, 393, 767, 483, 439, 11, 411, 881, 295, 264, 50560], "temperature": 0.0, "avg_logprob": -0.2820593854214283, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.06563841551542282}, {"id": 11, "seek": 4884, "start": 52.760000000000005, "end": 54.64, "text": " stuff for free if we do...", "tokens": [50560, 1507, 337, 1737, 498, 321, 360, 485, 50654], "temperature": 0.0, "avg_logprob": -0.2820593854214283, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.06563841551542282}, {"id": 12, "seek": 4884, "start": 54.64, "end": 56.96000000000001, "text": " If we start by doing some mathematics.", "tokens": [50654, 759, 321, 722, 538, 884, 512, 18666, 13, 50770], "temperature": 0.0, "avg_logprob": -0.2820593854214283, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.06563841551542282}, {"id": 13, "seek": 4884, "start": 56.96000000000001, "end": 66.2, "text": " So, my entire life so far has been about doing really far stretches between deep PRE", "tokens": [50770, 407, 11, 452, 2302, 993, 370, 1400, 575, 668, 466, 884, 534, 1400, 29058, 1296, 2452, 430, 3850, 51232], "temperature": 0.0, "avg_logprob": -0.2820593854214283, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.06563841551542282}, {"id": 14, "seek": 4884, "start": 66.2, "end": 70.88, "text": " or deep practice or between one domain and another.", "tokens": [51232, 420, 2452, 3124, 420, 1296, 472, 9274, 293, 1071, 13, 51466], "temperature": 0.0, "avg_logprob": -0.2820593854214283, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.06563841551542282}, {"id": 15, "seek": 4884, "start": 70.88, "end": 75.92, "text": " I've been working on DNA nanotechnology as a theoretical computer scientist for a while.", "tokens": [51466, 286, 600, 668, 1364, 322, 8272, 14067, 43594, 382, 257, 20864, 3820, 12662, 337, 257, 1339, 13, 51718], "temperature": 0.0, "avg_logprob": -0.2820593854214283, "compression_ratio": 1.524390243902439, "no_speech_prob": 0.06563841551542282}, {"id": 16, "seek": 7592, "start": 75.92, "end": 83.2, "text": " Today, I'm working on a game theory and economics algorithms for electricity markets.", "tokens": [50364, 2692, 11, 286, 478, 1364, 322, 257, 1216, 5261, 293, 14564, 14642, 337, 10356, 8383, 13, 50728], "temperature": 0.0, "avg_logprob": -0.38598827983057776, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.006885048002004623}, {"id": 17, "seek": 7592, "start": 83.2, "end": 86.2, "text": " I'm also working...", "tokens": [50728, 286, 478, 611, 1364, 485, 50878], "temperature": 0.0, "avg_logprob": -0.38598827983057776, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.006885048002004623}, {"id": 18, "seek": 7592, "start": 86.2, "end": 89.44, "text": " Well, in general, I'm interested in distributed computing.", "tokens": [50878, 1042, 11, 294, 2674, 11, 286, 478, 3102, 294, 12631, 15866, 13, 51040], "temperature": 0.0, "avg_logprob": -0.38598827983057776, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.006885048002004623}, {"id": 19, "seek": 7592, "start": 89.44, "end": 93.48, "text": " So, PIRUL is a byproduct of that interest.", "tokens": [51040, 407, 11, 430, 7740, 10253, 307, 257, 538, 33244, 295, 300, 1179, 13, 51242], "temperature": 0.0, "avg_logprob": -0.38598827983057776, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.006885048002004623}, {"id": 20, "seek": 7592, "start": 93.48, "end": 100.28, "text": " So, in this talk, I'll first start with defining things.", "tokens": [51242, 407, 11, 294, 341, 751, 11, 286, 603, 700, 722, 365, 17827, 721, 13, 51582], "temperature": 0.0, "avg_logprob": -0.38598827983057776, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.006885048002004623}, {"id": 21, "seek": 7592, "start": 100.28, "end": 104.52000000000001, "text": " There'll be some mathematics involved and also some practical stuff.", "tokens": [51582, 821, 603, 312, 512, 18666, 3288, 293, 611, 512, 8496, 1507, 13, 51794], "temperature": 0.0, "avg_logprob": -0.38598827983057776, "compression_ratio": 1.493273542600897, "no_speech_prob": 0.006885048002004623}, {"id": 22, "seek": 10452, "start": 104.52, "end": 110.75999999999999, "text": " So, if you're not interested in mathematical parts, like bear with me, they won't be too", "tokens": [50364, 407, 11, 498, 291, 434, 406, 3102, 294, 18894, 3166, 11, 411, 6155, 365, 385, 11, 436, 1582, 380, 312, 886, 50676], "temperature": 0.0, "avg_logprob": -0.3146368490683066, "compression_ratio": 1.7, "no_speech_prob": 0.006790760438889265}, {"id": 23, "seek": 10452, "start": 110.75999999999999, "end": 111.75999999999999, "text": " long hopefully.", "tokens": [50676, 938, 4696, 13, 50726], "temperature": 0.0, "avg_logprob": -0.3146368490683066, "compression_ratio": 1.7, "no_speech_prob": 0.006790760438889265}, {"id": 24, "seek": 10452, "start": 111.75999999999999, "end": 112.75999999999999, "text": " All right.", "tokens": [50726, 1057, 558, 13, 50776], "temperature": 0.0, "avg_logprob": -0.3146368490683066, "compression_ratio": 1.7, "no_speech_prob": 0.006790760438889265}, {"id": 25, "seek": 10452, "start": 112.75999999999999, "end": 118.84, "text": " So, I'll first start with defining what version control is for me, then talk about our solution", "tokens": [50776, 407, 11, 286, 603, 700, 722, 365, 17827, 437, 3037, 1969, 307, 337, 385, 11, 550, 751, 466, 527, 3827, 51080], "temperature": 0.0, "avg_logprob": -0.3146368490683066, "compression_ratio": 1.7, "no_speech_prob": 0.006790760438889265}, {"id": 26, "seek": 10452, "start": 118.84, "end": 125.72, "text": " and what we've been working on, and then some cool implementation details or things that", "tokens": [51080, 293, 437, 321, 600, 668, 1364, 322, 11, 293, 550, 512, 1627, 11420, 4365, 420, 721, 300, 51424], "temperature": 0.0, "avg_logprob": -0.3146368490683066, "compression_ratio": 1.7, "no_speech_prob": 0.006790760438889265}, {"id": 27, "seek": 10452, "start": 125.72, "end": 128.0, "text": " I find cool at least.", "tokens": [51424, 286, 915, 1627, 412, 1935, 13, 51538], "temperature": 0.0, "avg_logprob": -0.3146368490683066, "compression_ratio": 1.7, "no_speech_prob": 0.006790760438889265}, {"id": 28, "seek": 10452, "start": 128.0, "end": 134.32, "text": " And then, well, my talk title was a little bit of a bit of a bit of a bit of a bit of", "tokens": [51538, 400, 550, 11, 731, 11, 452, 751, 4876, 390, 257, 707, 857, 295, 257, 857, 295, 257, 857, 295, 257, 857, 295, 257, 857, 295, 51854], "temperature": 0.0, "avg_logprob": -0.3146368490683066, "compression_ratio": 1.7, "no_speech_prob": 0.006790760438889265}, {"id": 29, "seek": 13432, "start": 135.2, "end": 141.82, "text": " So, I'll try to come back to that and comment on that choice by asking the question again.", "tokens": [50408, 407, 11, 286, 603, 853, 281, 808, 646, 281, 300, 293, 2871, 322, 300, 3922, 538, 3365, 264, 1168, 797, 13, 50739], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 30, "seek": 13432, "start": 141.82, "end": 143.82, "text": " Is this really post-get?", "tokens": [50739, 1119, 341, 534, 2183, 12, 847, 30, 50839], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 31, "seek": 13432, "start": 143.82, "end": 144.82, "text": " Okay.", "tokens": [50839, 1033, 13, 50889], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 32, "seek": 13432, "start": 144.82, "end": 147.2, "text": " So, version control.", "tokens": [50889, 407, 11, 3037, 1969, 13, 51008], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 33, "seek": 13432, "start": 147.2, "end": 150.6, "text": " Probably many people here use it and know exactly what it is.", "tokens": [51008, 9210, 867, 561, 510, 764, 309, 293, 458, 2293, 437, 309, 307, 13, 51178], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 34, "seek": 13432, "start": 150.6, "end": 153.0, "text": " Let's do it anyway.", "tokens": [51178, 961, 311, 360, 309, 4033, 13, 51298], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 35, "seek": 13432, "start": 153.0, "end": 155.6, "text": " It's one or more cool out there.", "tokens": [51298, 467, 311, 472, 420, 544, 1627, 484, 456, 13, 51428], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 36, "seek": 13432, "start": 155.6, "end": 158.24, "text": " Is it a tree of documents concurrently?", "tokens": [51428, 1119, 309, 257, 4230, 295, 8512, 37702, 356, 30, 51560], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 37, "seek": 13432, "start": 158.24, "end": 163.44, "text": " And one thing that's super important is the asynchronous nature of the thing.", "tokens": [51560, 400, 472, 551, 300, 311, 1687, 1021, 307, 264, 49174, 3687, 295, 264, 551, 13, 51820], "temperature": 0.4, "avg_logprob": -0.4554403429833528, "compression_ratio": 1.5560165975103735, "no_speech_prob": 0.011802502907812595}, {"id": 38, "seek": 16344, "start": 163.56, "end": 167.64, "text": " The co-authors can choose when they want to sync or merge.", "tokens": [50370, 440, 598, 12, 40198, 830, 393, 2826, 562, 436, 528, 281, 20271, 420, 22183, 13, 50574], "temperature": 0.0, "avg_logprob": -0.2530146638552348, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.010408682748675346}, {"id": 39, "seek": 16344, "start": 167.64, "end": 175.64, "text": " And like reminding these definitions sounds like it's a little bit trivial, but it actually", "tokens": [50574, 400, 411, 27639, 613, 21988, 3263, 411, 309, 311, 257, 707, 857, 26703, 11, 457, 309, 767, 50974], "temperature": 0.0, "avg_logprob": -0.2530146638552348, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.010408682748675346}, {"id": 40, "seek": 16344, "start": 175.64, "end": 180.92, "text": " matters a lot when you're deep down in mathematics and you're trying to understand what you're", "tokens": [50974, 7001, 257, 688, 562, 291, 434, 2452, 760, 294, 18666, 293, 291, 434, 1382, 281, 1223, 437, 291, 434, 51238], "temperature": 0.0, "avg_logprob": -0.2530146638552348, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.010408682748675346}, {"id": 41, "seek": 16344, "start": 180.92, "end": 182.92, "text": " doing and why you're doing it.", "tokens": [51238, 884, 293, 983, 291, 434, 884, 309, 13, 51338], "temperature": 0.0, "avg_logprob": -0.2530146638552348, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.010408682748675346}, {"id": 42, "seek": 16344, "start": 182.92, "end": 189.12, "text": " So, for example, how does version control differ from Google Docs, for example?", "tokens": [51338, 407, 11, 337, 1365, 11, 577, 775, 3037, 1969, 743, 490, 3329, 16024, 82, 11, 337, 1365, 30, 51648], "temperature": 0.0, "avg_logprob": -0.2530146638552348, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.010408682748675346}, {"id": 43, "seek": 16344, "start": 189.12, "end": 190.56, "text": " It is made conflicts.", "tokens": [51648, 467, 307, 1027, 19807, 13, 51720], "temperature": 0.0, "avg_logprob": -0.2530146638552348, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.010408682748675346}, {"id": 44, "seek": 19056, "start": 190.68, "end": 198.68, "text": " So, that's a feature that's been often overlooked in current systems like Git, Mercurial, SVN,", "tokens": [50370, 407, 11, 300, 311, 257, 4111, 300, 311, 668, 2049, 32269, 294, 2190, 3652, 411, 16939, 11, 18897, 374, 831, 11, 31910, 45, 11, 50770], "temperature": 0.0, "avg_logprob": -0.2544275416005956, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.003502108156681061}, {"id": 45, "seek": 19056, "start": 198.68, "end": 201.96, "text": " CVS, RCS before it.", "tokens": [50770, 22995, 50, 11, 497, 26283, 949, 309, 13, 50934], "temperature": 0.0, "avg_logprob": -0.2544275416005956, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.003502108156681061}, {"id": 46, "seek": 19056, "start": 201.96, "end": 206.04, "text": " And finally, also, version control allows you to review a project's history.", "tokens": [50934, 400, 2721, 11, 611, 11, 3037, 1969, 4045, 291, 281, 3131, 257, 1716, 311, 2503, 13, 51138], "temperature": 0.0, "avg_logprob": -0.2544275416005956, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.003502108156681061}, {"id": 47, "seek": 19056, "start": 206.04, "end": 209.72, "text": " So, that's a very important feature as well.", "tokens": [51138, 407, 11, 300, 311, 257, 588, 1021, 4111, 382, 731, 13, 51322], "temperature": 0.0, "avg_logprob": -0.2544275416005956, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.003502108156681061}, {"id": 48, "seek": 19056, "start": 209.72, "end": 216.16, "text": " Many people consider, well, apparently not everybody, but many people consider version", "tokens": [51322, 5126, 561, 1949, 11, 731, 11, 7970, 406, 2201, 11, 457, 867, 561, 1949, 3037, 51644], "temperature": 0.0, "avg_logprob": -0.2544275416005956, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.003502108156681061}, {"id": 49, "seek": 19056, "start": 216.16, "end": 217.96, "text": " control a solved problem.", "tokens": [51644, 1969, 257, 13041, 1154, 13, 51734], "temperature": 0.0, "avg_logprob": -0.2544275416005956, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.003502108156681061}, {"id": 50, "seek": 19056, "start": 217.96, "end": 219.76, "text": " Git is here to stay.", "tokens": [51734, 16939, 307, 510, 281, 1754, 13, 51824], "temperature": 0.0, "avg_logprob": -0.2544275416005956, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.003502108156681061}, {"id": 51, "seek": 21976, "start": 219.76, "end": 224.64, "text": " It's sold version control 15 years ago, and that's the end of the story.", "tokens": [50364, 467, 311, 3718, 3037, 1969, 2119, 924, 2057, 11, 293, 300, 311, 264, 917, 295, 264, 1657, 13, 50608], "temperature": 0.0, "avg_logprob": -0.20418447606703816, "compression_ratio": 1.602189781021898, "no_speech_prob": 0.0076742167584598064}, {"id": 52, "seek": 21976, "start": 224.64, "end": 229.04, "text": " Unfortunately, well, I personally don't think this is true.", "tokens": [50608, 8590, 11, 731, 11, 286, 5665, 500, 380, 519, 341, 307, 2074, 13, 50828], "temperature": 0.0, "avg_logprob": -0.20418447606703816, "compression_ratio": 1.602189781021898, "no_speech_prob": 0.0076742167584598064}, {"id": 53, "seek": 21976, "start": 229.04, "end": 234.32, "text": " Some symptoms indicating this might not be true are, for example, that's R-tools, no", "tokens": [50828, 2188, 8332, 25604, 341, 1062, 406, 312, 2074, 366, 11, 337, 1365, 11, 300, 311, 497, 12, 83, 29298, 11, 572, 51092], "temperature": 0.0, "avg_logprob": -0.20418447606703816, "compression_ratio": 1.602189781021898, "no_speech_prob": 0.0076742167584598064}, {"id": 54, "seek": 21976, "start": 234.32, "end": 236.92, "text": " matter how good we think they are.", "tokens": [51092, 1871, 577, 665, 321, 519, 436, 366, 13, 51222], "temperature": 0.0, "avg_logprob": -0.20418447606703816, "compression_ratio": 1.602189781021898, "no_speech_prob": 0.0076742167584598064}, {"id": 55, "seek": 21976, "start": 236.92, "end": 239.79999999999998, "text": " They still aren't used by non-coders despite their maturity.", "tokens": [51222, 814, 920, 3212, 380, 1143, 538, 2107, 12, 66, 378, 433, 7228, 641, 28874, 13, 51366], "temperature": 0.0, "avg_logprob": -0.20418447606703816, "compression_ratio": 1.602189781021898, "no_speech_prob": 0.0076742167584598064}, {"id": 56, "seek": 21976, "start": 239.79999999999998, "end": 245.23999999999998, "text": " We've been working on this for 30 years, and the thing we're most proud of in this industry", "tokens": [51366, 492, 600, 668, 1364, 322, 341, 337, 2217, 924, 11, 293, 264, 551, 321, 434, 881, 4570, 295, 294, 341, 3518, 51638], "temperature": 0.0, "avg_logprob": -0.20418447606703816, "compression_ratio": 1.602189781021898, "no_speech_prob": 0.0076742167584598064}, {"id": 57, "seek": 21976, "start": 245.23999999999998, "end": 247.84, "text": " cannot even be used by outsiders.", "tokens": [51638, 2644, 754, 312, 1143, 538, 49825, 13, 51768], "temperature": 0.0, "avg_logprob": -0.20418447606703816, "compression_ratio": 1.602189781021898, "no_speech_prob": 0.0076742167584598064}, {"id": 58, "seek": 24784, "start": 248.28, "end": 255.48000000000002, "text": " So, nowadays we have, like, Silverware designed by NASA, and everybody at NASA is proud of", "tokens": [50386, 407, 11, 13434, 321, 362, 11, 411, 11, 15861, 3039, 4761, 538, 12077, 11, 293, 2201, 412, 12077, 307, 4570, 295, 50746], "temperature": 0.0, "avg_logprob": -0.26181606716579864, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.0036115555558353662}, {"id": 59, "seek": 24784, "start": 255.48000000000002, "end": 259.04, "text": " that, and everybody buying Silverware designed by NASA is proud of that.", "tokens": [50746, 300, 11, 293, 2201, 6382, 15861, 3039, 4761, 538, 12077, 307, 4570, 295, 300, 13, 50924], "temperature": 0.0, "avg_logprob": -0.26181606716579864, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.0036115555558353662}, {"id": 60, "seek": 24784, "start": 259.04, "end": 265.84000000000003, "text": " But R-tools for version control, they aren't used by outsiders or just marginally.", "tokens": [50924, 583, 497, 12, 83, 29298, 337, 3037, 1969, 11, 436, 3212, 380, 1143, 538, 49825, 420, 445, 10270, 379, 13, 51264], "temperature": 0.0, "avg_logprob": -0.26181606716579864, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.0036115555558353662}, {"id": 61, "seek": 24784, "start": 265.84000000000003, "end": 268.12, "text": " R-tools are distributed.", "tokens": [51264, 497, 12, 83, 29298, 366, 12631, 13, 51378], "temperature": 0.0, "avg_logprob": -0.26181606716579864, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.0036115555558353662}, {"id": 62, "seek": 24784, "start": 268.12, "end": 273.12, "text": " Yes, most of the time we use them with a global central server.", "tokens": [51378, 1079, 11, 881, 295, 264, 565, 321, 764, 552, 365, 257, 4338, 5777, 7154, 13, 51628], "temperature": 0.0, "avg_logprob": -0.26181606716579864, "compression_ratio": 1.642156862745098, "no_speech_prob": 0.0036115555558353662}, {"id": 63, "seek": 27312, "start": 273.12, "end": 279.76, "text": " So I've seen a poster in this conference saying, not all paths lead to Chrome, but apparently", "tokens": [50364, 407, 286, 600, 1612, 257, 17171, 294, 341, 7586, 1566, 11, 406, 439, 14518, 1477, 281, 15327, 11, 457, 7970, 50696], "temperature": 0.0, "avg_logprob": -0.2408780662380919, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.011846733279526234}, {"id": 64, "seek": 27312, "start": 279.76, "end": 282.4, "text": " many paths lead to GitHub.", "tokens": [50696, 867, 14518, 1477, 281, 23331, 13, 50828], "temperature": 0.0, "avg_logprob": -0.2408780662380919, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.011846733279526234}, {"id": 65, "seek": 27312, "start": 282.4, "end": 286.96, "text": " R-tools also require strong work discipline in planning.", "tokens": [50828, 497, 12, 83, 29298, 611, 3651, 2068, 589, 13635, 294, 5038, 13, 51056], "temperature": 0.0, "avg_logprob": -0.2408780662380919, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.011846733279526234}, {"id": 66, "seek": 27312, "start": 286.96, "end": 293.88, "text": " You need to plan ahead of time, to plan your branches, to follow really strict workflows,", "tokens": [51056, 509, 643, 281, 1393, 2286, 295, 565, 11, 281, 1393, 428, 14770, 11, 281, 1524, 534, 10910, 43461, 11, 51402], "temperature": 0.0, "avg_logprob": -0.2408780662380919, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.011846733279526234}, {"id": 67, "seek": 27312, "start": 293.88, "end": 295.2, "text": " to rebase versus merge.", "tokens": [51402, 281, 12970, 651, 5717, 22183, 13, 51468], "temperature": 0.0, "avg_logprob": -0.2408780662380919, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.011846733279526234}, {"id": 68, "seek": 27312, "start": 295.2, "end": 301.56, "text": " We even had a slide on that in previous talk, like how we merge shop or rebase shop.", "tokens": [51468, 492, 754, 632, 257, 4137, 322, 300, 294, 3894, 751, 11, 411, 577, 321, 22183, 3945, 420, 12970, 651, 3945, 13, 51786], "temperature": 0.0, "avg_logprob": -0.2408780662380919, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.011846733279526234}, {"id": 69, "seek": 30156, "start": 301.56, "end": 305.6, "text": " In this talk, I'll try to convince you that this doesn't matter at all.", "tokens": [50364, 682, 341, 751, 11, 286, 603, 853, 281, 13447, 291, 300, 341, 1177, 380, 1871, 412, 439, 13, 50566], "temperature": 0.0, "avg_logprob": -0.24409124586317274, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.015062264166772366}, {"id": 70, "seek": 30156, "start": 305.6, "end": 312.6, "text": " And all this results in a significant waste of human work time at a global scale.", "tokens": [50566, 400, 439, 341, 3542, 294, 257, 4776, 5964, 295, 1952, 589, 565, 412, 257, 4338, 4373, 13, 50916], "temperature": 0.0, "avg_logprob": -0.24409124586317274, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.015062264166772366}, {"id": 71, "seek": 30156, "start": 312.6, "end": 317.64, "text": " Improvements have been proposed, for example, DAX, but they don't really scale and nobody", "tokens": [50916, 46366, 1117, 362, 668, 10348, 11, 337, 1365, 11, 9578, 55, 11, 457, 436, 500, 380, 534, 4373, 293, 5079, 51168], "temperature": 0.0, "avg_logprob": -0.24409124586317274, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.015062264166772366}, {"id": 72, "seek": 30156, "start": 317.64, "end": 319.2, "text": " uses them.", "tokens": [51168, 4960, 552, 13, 51246], "temperature": 0.0, "avg_logprob": -0.24409124586317274, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.015062264166772366}, {"id": 73, "seek": 30156, "start": 319.2, "end": 322.52, "text": " So, is there, can we get a quick fix?", "tokens": [51246, 407, 11, 307, 456, 11, 393, 321, 483, 257, 1702, 3191, 30, 51412], "temperature": 0.0, "avg_logprob": -0.24409124586317274, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.015062264166772366}, {"id": 74, "seek": 30156, "start": 322.52, "end": 327.28, "text": " Can we get that next Git command that will fix everything?", "tokens": [51412, 1664, 321, 483, 300, 958, 16939, 5622, 300, 486, 3191, 1203, 30, 51650], "temperature": 0.0, "avg_logprob": -0.24409124586317274, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.015062264166772366}, {"id": 75, "seek": 30156, "start": 327.28, "end": 330.36, "text": " Well, unfortunately, I don't think so.", "tokens": [51650, 1042, 11, 7015, 11, 286, 500, 380, 519, 370, 13, 51804], "temperature": 0.0, "avg_logprob": -0.24409124586317274, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.015062264166772366}, {"id": 76, "seek": 33036, "start": 330.36, "end": 335.52000000000004, "text": " First of all, because abstractions leak terribly in Git.", "tokens": [50364, 2386, 295, 439, 11, 570, 12649, 626, 17143, 22903, 294, 16939, 13, 50622], "temperature": 0.0, "avg_logprob": -0.18062604268391927, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.09242019057273865}, {"id": 77, "seek": 33036, "start": 335.52000000000004, "end": 341.36, "text": " And the reason isn't the UI, isn't the bad naming of some commands or arguments.", "tokens": [50622, 400, 264, 1778, 1943, 380, 264, 15682, 11, 1943, 380, 264, 1578, 25290, 295, 512, 16901, 420, 12869, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18062604268391927, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.09242019057273865}, {"id": 78, "seek": 33036, "start": 341.36, "end": 346.8, "text": " The reason is that if we consider miracle trees and DAX as the core mechanism, they", "tokens": [50914, 440, 1778, 307, 300, 498, 321, 1949, 14660, 5852, 293, 9578, 55, 382, 264, 4965, 7513, 11, 436, 51186], "temperature": 0.0, "avg_logprob": -0.18062604268391927, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.09242019057273865}, {"id": 79, "seek": 33036, "start": 346.8, "end": 349.2, "text": " can't really be hidden from the user.", "tokens": [51186, 393, 380, 534, 312, 7633, 490, 264, 4195, 13, 51306], "temperature": 0.0, "avg_logprob": -0.18062604268391927, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.09242019057273865}, {"id": 80, "seek": 33036, "start": 349.2, "end": 352.88, "text": " Because if that's the core thing you want, and if all the properties you want come from", "tokens": [51306, 1436, 498, 300, 311, 264, 4965, 551, 291, 528, 11, 293, 498, 439, 264, 7221, 291, 528, 808, 490, 51490], "temperature": 0.0, "avg_logprob": -0.18062604268391927, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.09242019057273865}, {"id": 81, "seek": 33036, "start": 352.88, "end": 356.04, "text": " that, there's absolutely no reason to hide it from the user.", "tokens": [51490, 300, 11, 456, 311, 3122, 572, 1778, 281, 6479, 309, 490, 264, 4195, 13, 51648], "temperature": 0.0, "avg_logprob": -0.18062604268391927, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.09242019057273865}, {"id": 82, "seek": 35604, "start": 356.04, "end": 359.36, "text": " And there's no hope you can even succeed in doing that.", "tokens": [50364, 400, 456, 311, 572, 1454, 291, 393, 754, 7754, 294, 884, 300, 13, 50530], "temperature": 0.0, "avg_logprob": -0.2939100579901056, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.07430006563663483}, {"id": 83, "seek": 35604, "start": 359.36, "end": 368.64000000000004, "text": " Also, similarly, if strict ordering of snapshots is the main feature, the most used Git commands", "tokens": [50530, 2743, 11, 14138, 11, 498, 10910, 21739, 295, 19206, 27495, 307, 264, 2135, 4111, 11, 264, 881, 1143, 16939, 16901, 50994], "temperature": 0.0, "avg_logprob": -0.2939100579901056, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.07430006563663483}, {"id": 84, "seek": 35604, "start": 368.64000000000004, "end": 375.08000000000004, "text": " like rebase, we heard about rarararar in previous talk, cherpic, they're fixes around that best", "tokens": [50994, 411, 12970, 651, 11, 321, 2198, 466, 367, 289, 289, 289, 289, 294, 3894, 751, 11, 12085, 37509, 11, 436, 434, 32539, 926, 300, 1151, 51316], "temperature": 0.0, "avg_logprob": -0.2939100579901056, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.07430006563663483}, {"id": 85, "seek": 35604, "start": 375.08000000000004, "end": 376.76, "text": " feature we have.", "tokens": [51316, 4111, 321, 362, 13, 51400], "temperature": 0.0, "avg_logprob": -0.2939100579901056, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.07430006563663483}, {"id": 86, "seek": 35604, "start": 376.76, "end": 380.36, "text": " So why do you need to fix your main feature?", "tokens": [51400, 407, 983, 360, 291, 643, 281, 3191, 428, 2135, 4111, 30, 51580], "temperature": 0.0, "avg_logprob": -0.2939100579901056, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.07430006563663483}, {"id": 87, "seek": 35604, "start": 380.36, "end": 382.36, "text": " That's strange.", "tokens": [51580, 663, 311, 5861, 13, 51680], "temperature": 0.0, "avg_logprob": -0.2939100579901056, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.07430006563663483}, {"id": 88, "seek": 38236, "start": 382.36, "end": 385.48, "text": " Anyway, some more same terms.", "tokens": [50364, 5684, 11, 512, 544, 912, 2115, 13, 50520], "temperature": 0.0, "avg_logprob": -0.3177985463823591, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.07520008087158203}, {"id": 89, "seek": 38236, "start": 385.48, "end": 389.96000000000004, "text": " There is an inflation of commands and options in Git.", "tokens": [50520, 821, 307, 364, 15860, 295, 16901, 293, 3956, 294, 16939, 13, 50744], "temperature": 0.0, "avg_logprob": -0.3177985463823591, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.07520008087158203}, {"id": 90, "seek": 38236, "start": 389.96000000000004, "end": 393.64, "text": " Like I'll try to show you an example here.", "tokens": [50744, 1743, 286, 603, 853, 281, 855, 291, 364, 1365, 510, 13, 50928], "temperature": 0.0, "avg_logprob": -0.3177985463823591, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.07520008087158203}, {"id": 91, "seek": 38236, "start": 393.64, "end": 397.84000000000003, "text": " This is God and comicals, it's the point that someone made a Git's man page generator that", "tokens": [50928, 639, 307, 1265, 293, 395, 804, 82, 11, 309, 311, 264, 935, 300, 1580, 1027, 257, 16939, 311, 587, 3028, 19265, 300, 51138], "temperature": 0.0, "avg_logprob": -0.3177985463823591, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.07520008087158203}, {"id": 92, "seek": 38236, "start": 397.84000000000003, "end": 399.76, "text": " actually looks credible.", "tokens": [51138, 767, 1542, 32757, 13, 51234], "temperature": 0.0, "avg_logprob": -0.3177985463823591, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.07520008087158203}, {"id": 93, "seek": 38236, "start": 399.76, "end": 409.40000000000003, "text": " If you reload the page here, you get a different one every time.", "tokens": [51234, 759, 291, 25628, 264, 3028, 510, 11, 291, 483, 257, 819, 472, 633, 565, 13, 51716], "temperature": 0.0, "avg_logprob": -0.3177985463823591, "compression_ratio": 1.497560975609756, "no_speech_prob": 0.07520008087158203}, {"id": 94, "seek": 40940, "start": 409.4, "end": 413.91999999999996, "text": " Give environment grabs non-reset downstream environments using past local garbage collectors", "tokens": [50364, 5303, 2823, 30028, 2107, 12, 495, 302, 30621, 12388, 1228, 1791, 2654, 14150, 35384, 50590], "temperature": 0.0, "avg_logprob": -0.3632227332846632, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.27610257267951965}, {"id": 95, "seek": 40940, "start": 413.91999999999996, "end": 416.76, "text": " while overriding fitting shells survey the given environments.", "tokens": [50590, 1339, 670, 81, 2819, 15669, 22523, 8984, 264, 2212, 12388, 13, 50732], "temperature": 0.0, "avg_logprob": -0.3632227332846632, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.27610257267951965}, {"id": 96, "seek": 40940, "start": 416.76, "end": 421.15999999999997, "text": " Boo doesn't use this command here.", "tokens": [50732, 23351, 1177, 380, 764, 341, 5622, 510, 13, 50952], "temperature": 0.0, "avg_logprob": -0.3632227332846632, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.27610257267951965}, {"id": 97, "seek": 40940, "start": 421.15999999999997, "end": 425.76, "text": " Anyway, there is also an inflation of UIs.", "tokens": [50952, 5684, 11, 456, 307, 611, 364, 15860, 295, 624, 6802, 13, 51182], "temperature": 0.0, "avg_logprob": -0.3632227332846632, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.27610257267951965}, {"id": 98, "seek": 40940, "start": 425.76, "end": 428.64, "text": " Even Big Tech is now investing in Git in mercurial UIs.", "tokens": [51182, 2754, 5429, 13795, 307, 586, 10978, 294, 16939, 294, 10811, 374, 831, 624, 6802, 13, 51326], "temperature": 0.0, "avg_logprob": -0.3632227332846632, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.27610257267951965}, {"id": 99, "seek": 40940, "start": 428.64, "end": 430.96, "text": " I won't cite names here.", "tokens": [51326, 286, 1582, 380, 37771, 5288, 510, 13, 51442], "temperature": 0.0, "avg_logprob": -0.3632227332846632, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.27610257267951965}, {"id": 100, "seek": 40940, "start": 430.96, "end": 432.91999999999996, "text": " But there's also inflation of forges.", "tokens": [51442, 583, 456, 311, 611, 15860, 295, 337, 2880, 13, 51540], "temperature": 0.0, "avg_logprob": -0.3632227332846632, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.27610257267951965}, {"id": 101, "seek": 40940, "start": 432.91999999999996, "end": 436.35999999999996, "text": " How many forges have started last year alone?", "tokens": [51540, 1012, 867, 337, 2880, 362, 1409, 1036, 1064, 3312, 30, 51712], "temperature": 0.0, "avg_logprob": -0.3632227332846632, "compression_ratio": 1.6244897959183673, "no_speech_prob": 0.27610257267951965}, {"id": 102, "seek": 43636, "start": 436.36, "end": 442.40000000000003, "text": " I know a bunch of forges because they sometimes contact me to help them do something with", "tokens": [50364, 286, 458, 257, 3840, 295, 337, 2880, 570, 436, 2171, 3385, 385, 281, 854, 552, 360, 746, 365, 50666], "temperature": 0.0, "avg_logprob": -0.2958596150080363, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.1190139651298523}, {"id": 103, "seek": 43636, "start": 442.40000000000003, "end": 445.68, "text": " people.", "tokens": [50666, 561, 13, 50830], "temperature": 0.0, "avg_logprob": -0.2958596150080363, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.1190139651298523}, {"id": 104, "seek": 43636, "start": 445.68, "end": 452.04, "text": " My claim here is that we all consider text editing a solved problem.", "tokens": [50830, 1222, 3932, 510, 307, 300, 321, 439, 1949, 2487, 10000, 257, 13041, 1154, 13, 51148], "temperature": 0.0, "avg_logprob": -0.2958596150080363, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.1190139651298523}, {"id": 105, "seek": 43636, "start": 452.04, "end": 456.28000000000003, "text": " There's no new text editor popping up every now and then and convincing the VC that this", "tokens": [51148, 821, 311, 572, 777, 2487, 9839, 18374, 493, 633, 586, 293, 550, 293, 24823, 264, 41922, 300, 341, 51360], "temperature": 0.0, "avg_logprob": -0.2958596150080363, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.1190139651298523}, {"id": 106, "seek": 43636, "start": 456.28000000000003, "end": 458.52000000000004, "text": " is a really cool idea.", "tokens": [51360, 307, 257, 534, 1627, 1558, 13, 51472], "temperature": 0.0, "avg_logprob": -0.2958596150080363, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.1190139651298523}, {"id": 107, "seek": 43636, "start": 458.52000000000004, "end": 461.0, "text": " Window managers, same thing.", "tokens": [51472, 44933, 14084, 11, 912, 551, 13, 51596], "temperature": 0.0, "avg_logprob": -0.2958596150080363, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.1190139651298523}, {"id": 108, "seek": 43636, "start": 461.0, "end": 465.84000000000003, "text": " And forges, you keep seeing forges popping up every now and then.", "tokens": [51596, 400, 337, 2880, 11, 291, 1066, 2577, 337, 2880, 18374, 493, 633, 586, 293, 550, 13, 51838], "temperature": 0.0, "avg_logprob": -0.2958596150080363, "compression_ratio": 1.6359649122807018, "no_speech_prob": 0.1190139651298523}, {"id": 109, "seek": 46584, "start": 466.32, "end": 467.47999999999996, "text": " I'm not saying this is bad.", "tokens": [50388, 286, 478, 406, 1566, 341, 307, 1578, 13, 50446], "temperature": 0.0, "avg_logprob": -0.2358012426467169, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.08197272568941116}, {"id": 110, "seek": 46584, "start": 467.47999999999996, "end": 469.11999999999995, "text": " This is actually really good.", "tokens": [50446, 639, 307, 767, 534, 665, 13, 50528], "temperature": 0.0, "avg_logprob": -0.2358012426467169, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.08197272568941116}, {"id": 111, "seek": 46584, "start": 469.11999999999995, "end": 473.64, "text": " It's fantastic that the ecosystem is thriving and there's a lot of diversity.", "tokens": [50528, 467, 311, 5456, 300, 264, 11311, 307, 30643, 293, 456, 311, 257, 688, 295, 8811, 13, 50754], "temperature": 0.0, "avg_logprob": -0.2358012426467169, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.08197272568941116}, {"id": 112, "seek": 46584, "start": 473.64, "end": 478.56, "text": " But my claim is that maybe this inflation comes from some more fundamental thing that", "tokens": [50754, 583, 452, 3932, 307, 300, 1310, 341, 15860, 1487, 490, 512, 544, 8088, 551, 300, 51000], "temperature": 0.0, "avg_logprob": -0.2358012426467169, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.08197272568941116}, {"id": 113, "seek": 46584, "start": 478.56, "end": 480.35999999999996, "text": " we don't understand.", "tokens": [51000, 321, 500, 380, 1223, 13, 51090], "temperature": 0.0, "avg_logprob": -0.2358012426467169, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.08197272568941116}, {"id": 114, "seek": 46584, "start": 480.35999999999996, "end": 484.59999999999997, "text": " Now, on to our demands.", "tokens": [51090, 823, 11, 322, 281, 527, 15107, 13, 51302], "temperature": 0.0, "avg_logprob": -0.2358012426467169, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.08197272568941116}, {"id": 115, "seek": 46584, "start": 484.59999999999997, "end": 489.67999999999995, "text": " First, we demand associative merges.", "tokens": [51302, 2386, 11, 321, 4733, 4180, 1166, 3551, 2880, 13, 51556], "temperature": 0.0, "avg_logprob": -0.2358012426467169, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.08197272568941116}, {"id": 116, "seek": 46584, "start": 489.67999999999995, "end": 494.67999999999995, "text": " It may not matter much to use, but I'll show you in the next slide that you actually want", "tokens": [51556, 467, 815, 406, 1871, 709, 281, 764, 11, 457, 286, 603, 855, 291, 294, 264, 958, 4137, 300, 291, 767, 528, 51806], "temperature": 0.0, "avg_logprob": -0.2358012426467169, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.08197272568941116}, {"id": 117, "seek": 49468, "start": 494.68, "end": 496.68, "text": " associative merges.", "tokens": [50364, 4180, 1166, 3551, 2880, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1727435045903272, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.02010984905064106}, {"id": 118, "seek": 49468, "start": 496.68, "end": 503.04, "text": " Associative merges means that when you have two changes, A and B, and you merge them together,", "tokens": [50464, 8619, 1166, 3551, 2880, 1355, 300, 562, 291, 362, 732, 2962, 11, 316, 293, 363, 11, 293, 291, 22183, 552, 1214, 11, 50782], "temperature": 0.0, "avg_logprob": -0.1727435045903272, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.02010984905064106}, {"id": 119, "seek": 49468, "start": 503.04, "end": 508.84000000000003, "text": " it should do the same as merging A followed by merging B.", "tokens": [50782, 309, 820, 360, 264, 912, 382, 44559, 316, 6263, 538, 44559, 363, 13, 51072], "temperature": 0.0, "avg_logprob": -0.1727435045903272, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.02010984905064106}, {"id": 120, "seek": 49468, "start": 508.84000000000003, "end": 512.72, "text": " And the reason you want that is because you want to be able to review your patches or", "tokens": [51072, 400, 264, 1778, 291, 528, 300, 307, 570, 291, 528, 281, 312, 1075, 281, 3131, 428, 26531, 420, 51266], "temperature": 0.0, "avg_logprob": -0.1727435045903272, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.02010984905064106}, {"id": 121, "seek": 49468, "start": 512.72, "end": 517.72, "text": " your comments one by one and then merge them and trust that the merge does exactly what", "tokens": [51266, 428, 3053, 472, 538, 472, 293, 550, 22183, 552, 293, 3361, 300, 264, 22183, 775, 2293, 437, 51516], "temperature": 0.0, "avg_logprob": -0.1727435045903272, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.02010984905064106}, {"id": 122, "seek": 49468, "start": 517.72, "end": 521.28, "text": " you think it does, except in get it doesn't.", "tokens": [51516, 291, 519, 309, 775, 11, 3993, 294, 483, 309, 1177, 380, 13, 51694], "temperature": 0.0, "avg_logprob": -0.1727435045903272, "compression_ratio": 1.7853881278538812, "no_speech_prob": 0.02010984905064106}, {"id": 123, "seek": 52128, "start": 521.3199999999999, "end": 528.36, "text": " Associative merges, if A and B can be produced independently, they all should not matter.", "tokens": [50366, 8619, 1166, 3551, 2880, 11, 498, 316, 293, 363, 393, 312, 7126, 21761, 11, 436, 439, 820, 406, 1871, 13, 50718], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 124, "seek": 52128, "start": 528.36, "end": 532.3199999999999, "text": " That's what I mean by are we a rebase shop or a merge shop.", "tokens": [50718, 663, 311, 437, 286, 914, 538, 366, 321, 257, 12970, 651, 3945, 420, 257, 22183, 3945, 13, 50916], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 125, "seek": 52128, "start": 532.3199999999999, "end": 533.3199999999999, "text": " It doesn't matter.", "tokens": [50916, 467, 1177, 380, 1871, 13, 50966], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 126, "seek": 52128, "start": 533.3199999999999, "end": 534.8399999999999, "text": " We don't want to ask this question.", "tokens": [50966, 492, 500, 380, 528, 281, 1029, 341, 1168, 13, 51042], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 127, "seek": 52128, "start": 534.8399999999999, "end": 537.9599999999999, "text": " We want to get back to work.", "tokens": [51042, 492, 528, 281, 483, 646, 281, 589, 13, 51198], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 128, "seek": 52128, "start": 537.9599999999999, "end": 539.48, "text": " Branches, we do want branches.", "tokens": [51198, 45265, 3781, 11, 321, 360, 528, 14770, 13, 51274], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 129, "seek": 52128, "start": 539.48, "end": 544.3199999999999, "text": " Everybody loves branches, but not too many branches.", "tokens": [51274, 7646, 6752, 14770, 11, 457, 406, 886, 867, 14770, 13, 51516], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 130, "seek": 52128, "start": 544.3199999999999, "end": 546.4, "text": " Branches are good until they aren't.", "tokens": [51516, 45265, 3781, 366, 665, 1826, 436, 3212, 380, 13, 51620], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 131, "seek": 52128, "start": 546.4, "end": 549.04, "text": " I'll tell you more on that later.", "tokens": [51620, 286, 603, 980, 291, 544, 322, 300, 1780, 13, 51752], "temperature": 0.0, "avg_logprob": -0.22172576240871264, "compression_ratio": 1.6371308016877637, "no_speech_prob": 0.07244805991649628}, {"id": 132, "seek": 54904, "start": 549.8, "end": 553.1999999999999, "text": " We also want that's something I personally really want.", "tokens": [50402, 492, 611, 528, 300, 311, 746, 286, 5665, 534, 528, 13, 50572], "temperature": 0.0, "avg_logprob": -0.28419683417495417, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.027603184804320335}, {"id": 133, "seek": 54904, "start": 553.1999999999999, "end": 555.48, "text": " I want low algorithmic complexity.", "tokens": [50572, 286, 528, 2295, 9284, 299, 14024, 13, 50686], "temperature": 0.0, "avg_logprob": -0.28419683417495417, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.027603184804320335}, {"id": 134, "seek": 54904, "start": 555.48, "end": 562.8, "text": " And also ideally, fast implementations was in my way of seeing things that come second.", "tokens": [50686, 400, 611, 22915, 11, 2370, 4445, 763, 390, 294, 452, 636, 295, 2577, 721, 300, 808, 1150, 13, 51052], "temperature": 0.0, "avg_logprob": -0.28419683417495417, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.027603184804320335}, {"id": 135, "seek": 54904, "start": 562.8, "end": 567.56, "text": " But I also give you an example of a very fast implementation of something with Darm.", "tokens": [51052, 583, 286, 611, 976, 291, 364, 1365, 295, 257, 588, 2370, 11420, 295, 746, 365, 413, 4452, 13, 51290], "temperature": 0.0, "avg_logprob": -0.28419683417495417, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.027603184804320335}, {"id": 136, "seek": 54904, "start": 567.56, "end": 572.28, "text": " All right, associative merges, the first of our demands.", "tokens": [51290, 1057, 558, 11, 4180, 1166, 3551, 2880, 11, 264, 700, 295, 527, 15107, 13, 51526], "temperature": 0.0, "avg_logprob": -0.28419683417495417, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.027603184804320335}, {"id": 137, "seek": 54904, "start": 572.28, "end": 576.4, "text": " This is exactly what I described, but this is a graphic view of it.", "tokens": [51526, 639, 307, 2293, 437, 286, 7619, 11, 457, 341, 307, 257, 14089, 1910, 295, 309, 13, 51732], "temperature": 0.0, "avg_logprob": -0.28419683417495417, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.027603184804320335}, {"id": 138, "seek": 57640, "start": 576.4, "end": 579.84, "text": " So you have two co-authors, Alice and Bob.", "tokens": [50364, 407, 291, 362, 732, 598, 12, 40198, 830, 11, 16004, 293, 6085, 13, 50536], "temperature": 0.0, "avg_logprob": -0.25606238588373714, "compression_ratio": 1.8, "no_speech_prob": 0.02284352108836174}, {"id": 139, "seek": 57640, "start": 579.84, "end": 586.04, "text": " Alice produces one, commits A, and Bob produces two, commits B and C.", "tokens": [50536, 16004, 14725, 472, 11, 48311, 316, 11, 293, 6085, 14725, 732, 11, 48311, 363, 293, 383, 13, 50846], "temperature": 0.0, "avg_logprob": -0.25606238588373714, "compression_ratio": 1.8, "no_speech_prob": 0.02284352108836174}, {"id": 140, "seek": 57640, "start": 586.04, "end": 593.16, "text": " And then in the first scenario, Alice merges Bob's first, commits, and then Bob's second, commits.", "tokens": [50846, 400, 550, 294, 264, 700, 9005, 11, 16004, 3551, 2880, 6085, 311, 700, 11, 48311, 11, 293, 550, 6085, 311, 1150, 11, 48311, 13, 51202], "temperature": 0.0, "avg_logprob": -0.25606238588373714, "compression_ratio": 1.8, "no_speech_prob": 0.02284352108836174}, {"id": 141, "seek": 57640, "start": 593.16, "end": 597.76, "text": " The second scenario, she merges both commits at once.", "tokens": [51202, 440, 1150, 9005, 11, 750, 3551, 2880, 1293, 48311, 412, 1564, 13, 51432], "temperature": 0.0, "avg_logprob": -0.25606238588373714, "compression_ratio": 1.8, "no_speech_prob": 0.02284352108836174}, {"id": 142, "seek": 57640, "start": 597.76, "end": 604.64, "text": " And while the commit identifiers, nobody would expect that they're the same.", "tokens": [51432, 400, 1339, 264, 5599, 2473, 23463, 11, 5079, 576, 2066, 300, 436, 434, 264, 912, 13, 51776], "temperature": 0.0, "avg_logprob": -0.25606238588373714, "compression_ratio": 1.8, "no_speech_prob": 0.02284352108836174}, {"id": 143, "seek": 60464, "start": 604.72, "end": 606.6, "text": " They will necessarily be different.", "tokens": [50368, 814, 486, 4725, 312, 819, 13, 50462], "temperature": 0.0, "avg_logprob": -0.2606036336798417, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.045390449464321136}, {"id": 144, "seek": 60464, "start": 606.6, "end": 615.36, "text": " But the contents of the, if there's no conflict at all, the contents should absolutely be the same.", "tokens": [50462, 583, 264, 15768, 295, 264, 11, 498, 456, 311, 572, 6596, 412, 439, 11, 264, 15768, 820, 3122, 312, 264, 912, 13, 50900], "temperature": 0.0, "avg_logprob": -0.2606036336798417, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.045390449464321136}, {"id": 145, "seek": 60464, "start": 615.36, "end": 618.0, "text": " And this is actually false.", "tokens": [50900, 400, 341, 307, 767, 7908, 13, 51032], "temperature": 0.0, "avg_logprob": -0.2606036336798417, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.045390449464321136}, {"id": 146, "seek": 60464, "start": 618.0, "end": 625.3199999999999, "text": " So this is an example, a counter example of where Giz is not associated, and this might be a problem.", "tokens": [51032, 407, 341, 307, 364, 1365, 11, 257, 5682, 1365, 295, 689, 460, 590, 307, 406, 6615, 11, 293, 341, 1062, 312, 257, 1154, 13, 51398], "temperature": 0.0, "avg_logprob": -0.2606036336798417, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.045390449464321136}, {"id": 147, "seek": 60464, "start": 625.3199999999999, "end": 628.0, "text": " This is actually terrifying to me.", "tokens": [51398, 639, 307, 767, 18106, 281, 385, 13, 51532], "temperature": 0.0, "avg_logprob": -0.2606036336798417, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.045390449464321136}, {"id": 148, "seek": 60464, "start": 628.0, "end": 633.92, "text": " We start on the left here with a simplified two lines, A and B.", "tokens": [51532, 492, 722, 322, 264, 1411, 510, 365, 257, 26335, 732, 3876, 11, 316, 293, 363, 13, 51828], "temperature": 0.0, "avg_logprob": -0.2606036336798417, "compression_ratio": 1.6470588235294117, "no_speech_prob": 0.045390449464321136}, {"id": 149, "seek": 63392, "start": 634.0, "end": 635.7199999999999, "text": " Alice follows that path.", "tokens": [50368, 16004, 10002, 300, 3100, 13, 50454], "temperature": 0.0, "avg_logprob": -0.17867996295293173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.005465970374643803}, {"id": 150, "seek": 63392, "start": 635.7199999999999, "end": 641.0799999999999, "text": " She adds the first commits with a G at the very beginning of the file.", "tokens": [50454, 1240, 10860, 264, 700, 48311, 365, 257, 460, 412, 264, 588, 2863, 295, 264, 3991, 13, 50722], "temperature": 0.0, "avg_logprob": -0.17867996295293173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.005465970374643803}, {"id": 151, "seek": 63392, "start": 641.0799999999999, "end": 648.92, "text": " And then she goes on and adds another commit with another copy of A and B before that G, right?", "tokens": [50722, 400, 550, 750, 1709, 322, 293, 10860, 1071, 5599, 365, 1071, 5055, 295, 316, 293, 363, 949, 300, 460, 11, 558, 30, 51114], "temperature": 0.0, "avg_logprob": -0.17867996295293173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.005465970374643803}, {"id": 152, "seek": 63392, "start": 648.92, "end": 655.3199999999999, "text": " And concurrently to that, Bob inserts an X between the initial A and B.", "tokens": [51114, 400, 37702, 356, 281, 300, 11, 6085, 49163, 364, 1783, 1296, 264, 5883, 316, 293, 363, 13, 51434], "temperature": 0.0, "avg_logprob": -0.17867996295293173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.005465970374643803}, {"id": 153, "seek": 63392, "start": 655.3199999999999, "end": 661.64, "text": " And when you can try that, if you have a laptop here, you can try to simulate that in Git today.", "tokens": [51434, 400, 562, 291, 393, 853, 300, 11, 498, 291, 362, 257, 10732, 510, 11, 291, 393, 853, 281, 27817, 300, 294, 16939, 965, 13, 51750], "temperature": 0.0, "avg_logprob": -0.17867996295293173, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.005465970374643803}, {"id": 154, "seek": 66164, "start": 661.64, "end": 664.6, "text": " And this is actually not a bug, it's a feature of Git.", "tokens": [50364, 400, 341, 307, 767, 406, 257, 7426, 11, 309, 311, 257, 4111, 295, 16939, 13, 50512], "temperature": 0.0, "avg_logprob": -0.1603481857864945, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.0017919378587976098}, {"id": 155, "seek": 66164, "start": 664.6, "end": 671.56, "text": " And what happens if you do that is that Bob's new lines get merged into Alice's new lines.", "tokens": [50512, 400, 437, 2314, 498, 291, 360, 300, 307, 300, 6085, 311, 777, 3876, 483, 36427, 666, 16004, 311, 777, 3876, 13, 50860], "temperature": 0.0, "avg_logprob": -0.1603481857864945, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.0017919378587976098}, {"id": 156, "seek": 66164, "start": 671.56, "end": 677.04, "text": " And if I were working in a high security project, this would absolutely terrify me.", "tokens": [50860, 400, 498, 286, 645, 1364, 294, 257, 1090, 3825, 1716, 11, 341, 576, 3122, 7245, 2505, 385, 13, 51134], "temperature": 0.0, "avg_logprob": -0.1603481857864945, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.0017919378587976098}, {"id": 157, "seek": 66164, "start": 677.04, "end": 684.76, "text": " This means that Git can randomly shuffle your lines around and do it silently.", "tokens": [51134, 639, 1355, 300, 16939, 393, 16979, 39426, 428, 3876, 926, 293, 360, 309, 40087, 13, 51520], "temperature": 0.0, "avg_logprob": -0.1603481857864945, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.0017919378587976098}, {"id": 158, "seek": 66164, "start": 684.76, "end": 687.56, "text": " Without telling you that there's no conflict, nothing.", "tokens": [51520, 9129, 3585, 291, 300, 456, 311, 572, 6596, 11, 1825, 13, 51660], "temperature": 0.0, "avg_logprob": -0.1603481857864945, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.0017919378587976098}, {"id": 159, "seek": 66164, "start": 687.56, "end": 689.36, "text": " It just works.", "tokens": [51660, 467, 445, 1985, 13, 51750], "temperature": 0.0, "avg_logprob": -0.1603481857864945, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.0017919378587976098}, {"id": 160, "seek": 66164, "start": 689.36, "end": 691.04, "text": " And yet it doesn't really work.", "tokens": [51750, 400, 1939, 309, 1177, 380, 534, 589, 13, 51834], "temperature": 0.0, "avg_logprob": -0.1603481857864945, "compression_ratio": 1.583011583011583, "no_speech_prob": 0.0017919378587976098}, {"id": 161, "seek": 69104, "start": 691.04, "end": 693.24, "text": " It doesn't do what you think it does.", "tokens": [50364, 467, 1177, 380, 360, 437, 291, 519, 309, 775, 13, 50474], "temperature": 0.0, "avg_logprob": -0.1900486355736142, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.002727530198171735}, {"id": 162, "seek": 69104, "start": 693.24, "end": 694.0799999999999, "text": " So we don't want that.", "tokens": [50474, 407, 321, 500, 380, 528, 300, 13, 50516], "temperature": 0.0, "avg_logprob": -0.1900486355736142, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.002727530198171735}, {"id": 163, "seek": 69104, "start": 694.0799999999999, "end": 696.92, "text": " We want to fix the problem.", "tokens": [50516, 492, 528, 281, 3191, 264, 1154, 13, 50658], "temperature": 0.0, "avg_logprob": -0.1900486355736142, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.002727530198171735}, {"id": 164, "seek": 69104, "start": 696.92, "end": 698.64, "text": " We also want commutative mergers.", "tokens": [50658, 492, 611, 528, 800, 325, 1166, 3551, 9458, 13, 50744], "temperature": 0.0, "avg_logprob": -0.1900486355736142, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.002727530198171735}, {"id": 165, "seek": 69104, "start": 698.64, "end": 701.8, "text": " So that's a more controversial one.", "tokens": [50744, 407, 300, 311, 257, 544, 17323, 472, 13, 50902], "temperature": 0.0, "avg_logprob": -0.1900486355736142, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.002727530198171735}, {"id": 166, "seek": 69104, "start": 701.8, "end": 709.8, "text": " We want the property that if Alice and Bob work together, well, Alice can pull Bob's changes", "tokens": [50902, 492, 528, 264, 4707, 300, 498, 16004, 293, 6085, 589, 1214, 11, 731, 11, 16004, 393, 2235, 6085, 311, 2962, 51302], "temperature": 0.0, "avg_logprob": -0.1900486355736142, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.002727530198171735}, {"id": 167, "seek": 69104, "start": 709.8, "end": 712.4399999999999, "text": " and Bob can pull Alice's changes.", "tokens": [51302, 293, 6085, 393, 2235, 16004, 311, 2962, 13, 51434], "temperature": 0.0, "avg_logprob": -0.1900486355736142, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.002727530198171735}, {"id": 168, "seek": 69104, "start": 712.4399999999999, "end": 718.56, "text": " Without having to worry too much about the resulting hashes or the contents of the file.", "tokens": [51434, 9129, 1419, 281, 3292, 886, 709, 466, 264, 16505, 575, 8076, 420, 264, 15768, 295, 264, 3991, 13, 51740], "temperature": 0.0, "avg_logprob": -0.1900486355736142, "compression_ratio": 1.6923076923076923, "no_speech_prob": 0.002727530198171735}, {"id": 169, "seek": 71856, "start": 718.5999999999999, "end": 722.52, "text": " If the patches are independent, you should be able to apply them in any order without", "tokens": [50366, 759, 264, 26531, 366, 6695, 11, 291, 820, 312, 1075, 281, 3079, 552, 294, 604, 1668, 1553, 50562], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 170, "seek": 71856, "start": 722.52, "end": 724.1199999999999, "text": " changing the results.", "tokens": [50562, 4473, 264, 3542, 13, 50642], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 171, "seek": 71856, "start": 724.1199999999999, "end": 726.2399999999999, "text": " So we do that.", "tokens": [50642, 407, 321, 360, 300, 13, 50748], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 172, "seek": 71856, "start": 726.2399999999999, "end": 727.5999999999999, "text": " Git and SBN are never commutative.", "tokens": [50748, 16939, 293, 26944, 45, 366, 1128, 800, 325, 1166, 13, 50816], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 173, "seek": 71856, "start": 727.5999999999999, "end": 731.3599999999999, "text": " So why would we want this?", "tokens": [50816, 407, 983, 576, 321, 528, 341, 30, 51004], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 174, "seek": 71856, "start": 731.3599999999999, "end": 733.7199999999999, "text": " Actually there's very good reasons to want this.", "tokens": [51004, 5135, 456, 311, 588, 665, 4112, 281, 528, 341, 13, 51122], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 175, "seek": 71856, "start": 733.7199999999999, "end": 739.52, "text": " For example, you might want to unapply and unapply an old change, an old patch that you", "tokens": [51122, 1171, 1365, 11, 291, 1062, 528, 281, 517, 1746, 356, 293, 517, 1746, 356, 364, 1331, 1319, 11, 364, 1331, 9972, 300, 291, 51412], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 176, "seek": 71856, "start": 739.52, "end": 742.68, "text": " just made a few patches ago that was wrong.", "tokens": [51412, 445, 1027, 257, 1326, 26531, 2057, 300, 390, 2085, 13, 51570], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 177, "seek": 71856, "start": 742.68, "end": 746.4, "text": " And you want to undo it without having to change your entire identities.", "tokens": [51570, 400, 291, 528, 281, 23779, 309, 1553, 1419, 281, 1319, 428, 2302, 24239, 13, 51756], "temperature": 0.0, "avg_logprob": -0.2176895300547282, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.05708780139684677}, {"id": 178, "seek": 74640, "start": 746.4, "end": 750.68, "text": " Of course, we also want state identities and I'll come back to that later.", "tokens": [50364, 2720, 1164, 11, 321, 611, 528, 1785, 24239, 293, 286, 603, 808, 646, 281, 300, 1780, 13, 50578], "temperature": 0.0, "avg_logprob": -0.21041889579928652, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.006015928927809}, {"id": 179, "seek": 74640, "start": 750.68, "end": 751.92, "text": " We want cherry picking.", "tokens": [50578, 492, 528, 20164, 8867, 13, 50640], "temperature": 0.0, "avg_logprob": -0.21041889579928652, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.006015928927809}, {"id": 180, "seek": 74640, "start": 751.92, "end": 757.76, "text": " We want to be able to just take that one patch from a different branch, maybe a bug fix.", "tokens": [50640, 492, 528, 281, 312, 1075, 281, 445, 747, 300, 472, 9972, 490, 257, 819, 9819, 11, 1310, 257, 7426, 3191, 13, 50932], "temperature": 0.0, "avg_logprob": -0.21041889579928652, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.006015928927809}, {"id": 181, "seek": 74640, "start": 757.76, "end": 762.88, "text": " I want to pull this into our branch without having to rebase everything and change every", "tokens": [50932, 286, 528, 281, 2235, 341, 666, 527, 9819, 1553, 1419, 281, 12970, 651, 1203, 293, 1319, 633, 51188], "temperature": 0.0, "avg_logprob": -0.21041889579928652, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.006015928927809}, {"id": 182, "seek": 74640, "start": 762.88, "end": 764.9599999999999, "text": " commit's identity.", "tokens": [51188, 5599, 311, 6575, 13, 51292], "temperature": 0.0, "avg_logprob": -0.21041889579928652, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.006015928927809}, {"id": 183, "seek": 74640, "start": 764.9599999999999, "end": 770.3199999999999, "text": " And yet keep strong, unfortable state identifiers.", "tokens": [51292, 400, 1939, 1066, 2068, 11, 3971, 477, 712, 1785, 2473, 23463, 13, 51560], "temperature": 0.0, "avg_logprob": -0.21041889579928652, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.006015928927809}, {"id": 184, "seek": 74640, "start": 770.3199999999999, "end": 771.8, "text": " And we want partial clones.", "tokens": [51560, 400, 321, 528, 14641, 43803, 13, 51634], "temperature": 0.0, "avg_logprob": -0.21041889579928652, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.006015928927809}, {"id": 185, "seek": 77180, "start": 771.8399999999999, "end": 779.0799999999999, "text": " So partial clones means that you want to just pull the patches related to subprojects and", "tokens": [50366, 407, 14641, 43803, 1355, 300, 291, 528, 281, 445, 2235, 264, 26531, 4077, 281, 1422, 4318, 1020, 82, 293, 50728], "temperature": 0.0, "avg_logprob": -0.19911801446344435, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.008460823446512222}, {"id": 186, "seek": 77180, "start": 779.0799999999999, "end": 783.3599999999999, "text": " possibly also in the other direction merge repos transparently.", "tokens": [50728, 6264, 611, 294, 264, 661, 3513, 22183, 1085, 329, 7132, 6420, 13, 50942], "temperature": 0.0, "avg_logprob": -0.19911801446344435, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.008460823446512222}, {"id": 187, "seek": 77180, "start": 783.3599999999999, "end": 789.7199999999999, "text": " Scott was talking before about mono repos and how Microsoft devoted probably millions", "tokens": [50942, 6659, 390, 1417, 949, 466, 35624, 1085, 329, 293, 577, 8116, 21815, 1391, 6803, 51260], "temperature": 0.0, "avg_logprob": -0.19911801446344435, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.008460823446512222}, {"id": 188, "seek": 77180, "start": 789.7199999999999, "end": 793.4399999999999, "text": " of man hours to have their mono repos work.", "tokens": [51260, 295, 587, 2496, 281, 362, 641, 35624, 1085, 329, 589, 13, 51446], "temperature": 0.0, "avg_logprob": -0.19911801446344435, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.008460823446512222}, {"id": 189, "seek": 77180, "start": 793.4399999999999, "end": 799.4799999999999, "text": " But actually if you first try to model your things properly and try to understand commutativity,", "tokens": [51446, 583, 767, 498, 291, 700, 853, 281, 2316, 428, 721, 6108, 293, 853, 281, 1223, 800, 325, 30142, 11, 51748], "temperature": 0.0, "avg_logprob": -0.19911801446344435, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.008460823446512222}, {"id": 190, "seek": 77180, "start": 799.4799999999999, "end": 801.5999999999999, "text": " actually you don't need all that.", "tokens": [51748, 767, 291, 500, 380, 643, 439, 300, 13, 51854], "temperature": 0.0, "avg_logprob": -0.19911801446344435, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.008460823446512222}, {"id": 191, "seek": 80160, "start": 801.6, "end": 806.0, "text": " You can get mono repos for free.", "tokens": [50364, 509, 393, 483, 35624, 1085, 329, 337, 1737, 13, 50584], "temperature": 0.0, "avg_logprob": -0.17197402536052547, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.008229109458625317}, {"id": 192, "seek": 80160, "start": 806.0, "end": 814.0400000000001, "text": " And so that brings us to one of the crucial slides in this presentation about states versus", "tokens": [50584, 400, 370, 300, 5607, 505, 281, 472, 295, 264, 11462, 9788, 294, 341, 5860, 466, 4368, 5717, 50986], "temperature": 0.0, "avg_logprob": -0.17197402536052547, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.008229109458625317}, {"id": 193, "seek": 80160, "start": 814.0400000000001, "end": 815.0400000000001, "text": " changes.", "tokens": [50986, 2962, 13, 51036], "temperature": 0.0, "avg_logprob": -0.17197402536052547, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.008229109458625317}, {"id": 194, "seek": 80160, "start": 815.0400000000001, "end": 820.08, "text": " So the way we see things in order to think about version control.", "tokens": [51036, 407, 264, 636, 321, 536, 721, 294, 1668, 281, 519, 466, 3037, 1969, 13, 51288], "temperature": 0.0, "avg_logprob": -0.17197402536052547, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.008229109458625317}, {"id": 195, "seek": 80160, "start": 820.08, "end": 826.28, "text": " So I understand I'm not giving you many new commands or cool line hacks, but before getting", "tokens": [51288, 407, 286, 1223, 286, 478, 406, 2902, 291, 867, 777, 16901, 420, 1627, 1622, 33617, 11, 457, 949, 1242, 51598], "temperature": 0.0, "avg_logprob": -0.17197402536052547, "compression_ratio": 1.4846938775510203, "no_speech_prob": 0.008229109458625317}, {"id": 196, "seek": 82628, "start": 826.28, "end": 832.28, "text": " to that we had to think about what it means to do version control.", "tokens": [50364, 281, 300, 321, 632, 281, 519, 466, 437, 309, 1355, 281, 360, 3037, 1969, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2054010449033795, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.18393784761428833}, {"id": 197, "seek": 82628, "start": 832.28, "end": 834.64, "text": " So states versus changes.", "tokens": [50664, 407, 4368, 5717, 2962, 13, 50782], "temperature": 0.0, "avg_logprob": -0.2054010449033795, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.18393784761428833}, {"id": 198, "seek": 82628, "start": 834.64, "end": 839.8, "text": " There's actually two fundamentally different ways to model what version control is.", "tokens": [50782, 821, 311, 767, 732, 17879, 819, 2098, 281, 2316, 437, 3037, 1969, 307, 13, 51040], "temperature": 0.0, "avg_logprob": -0.2054010449033795, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.18393784761428833}, {"id": 199, "seek": 82628, "start": 839.8, "end": 845.68, "text": " One is by seeing it as a series of versions, a series of snapshots of your repos, which", "tokens": [51040, 1485, 307, 538, 2577, 309, 382, 257, 2638, 295, 9606, 11, 257, 2638, 295, 19206, 27495, 295, 428, 1085, 329, 11, 597, 51334], "temperature": 0.0, "avg_logprob": -0.2054010449033795, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.18393784761428833}, {"id": 200, "seek": 82628, "start": 845.68, "end": 850.0, "text": " is what Git does, and Mercurial, SVN, CVS do that.", "tokens": [51334, 307, 437, 16939, 775, 11, 293, 18897, 374, 831, 11, 31910, 45, 11, 22995, 50, 360, 300, 13, 51550], "temperature": 0.0, "avg_logprob": -0.2054010449033795, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.18393784761428833}, {"id": 201, "seek": 82628, "start": 850.0, "end": 856.12, "text": " And only compute changes as a byproduct of these.", "tokens": [51550, 400, 787, 14722, 2962, 382, 257, 538, 33244, 295, 613, 13, 51856], "temperature": 0.0, "avg_logprob": -0.2054010449033795, "compression_ratio": 1.5938864628820961, "no_speech_prob": 0.18393784761428833}, {"id": 202, "seek": 85612, "start": 856.6, "end": 858.8, "text": " The question we can ask is what if we did the opposite?", "tokens": [50388, 440, 1168, 321, 393, 1029, 307, 437, 498, 321, 630, 264, 6182, 30, 50498], "temperature": 0.0, "avg_logprob": -0.2337714716331246, "compression_ratio": 1.835, "no_speech_prob": 0.03181947022676468}, {"id": 203, "seek": 85612, "start": 858.8, "end": 865.24, "text": " What is if instead of considering that working in a project means creating a new version,", "tokens": [50498, 708, 307, 498, 2602, 295, 8079, 300, 1364, 294, 257, 1716, 1355, 4084, 257, 777, 3037, 11, 50820], "temperature": 0.0, "avg_logprob": -0.2337714716331246, "compression_ratio": 1.835, "no_speech_prob": 0.03181947022676468}, {"id": 204, "seek": 85612, "start": 865.24, "end": 871.28, "text": " we consider that working in a project means changing it, creating a change.", "tokens": [50820, 321, 1949, 300, 1364, 294, 257, 1716, 1355, 4473, 309, 11, 4084, 257, 1319, 13, 51122], "temperature": 0.0, "avg_logprob": -0.2337714716331246, "compression_ratio": 1.835, "no_speech_prob": 0.03181947022676468}, {"id": 205, "seek": 85612, "start": 871.28, "end": 875.52, "text": " And another question we can ask is what if we did both at the same time?", "tokens": [51122, 400, 1071, 1168, 321, 393, 1029, 307, 437, 498, 321, 630, 1293, 412, 264, 912, 565, 30, 51334], "temperature": 0.0, "avg_logprob": -0.2337714716331246, "compression_ratio": 1.835, "no_speech_prob": 0.03181947022676468}, {"id": 206, "seek": 85612, "start": 875.52, "end": 877.52, "text": " And that's what we do.", "tokens": [51334, 400, 300, 311, 437, 321, 360, 13, 51434], "temperature": 0.0, "avg_logprob": -0.2337714716331246, "compression_ratio": 1.835, "no_speech_prob": 0.03181947022676468}, {"id": 207, "seek": 85612, "start": 877.52, "end": 879.5600000000001, "text": " All right.", "tokens": [51434, 1057, 558, 13, 51536], "temperature": 0.0, "avg_logprob": -0.2337714716331246, "compression_ratio": 1.835, "no_speech_prob": 0.03181947022676468}, {"id": 208, "seek": 85612, "start": 879.5600000000001, "end": 881.84, "text": " So a little bit of bibliography first.", "tokens": [51536, 407, 257, 707, 857, 295, 34344, 5820, 700, 13, 51650], "temperature": 0.0, "avg_logprob": -0.2337714716331246, "compression_ratio": 1.835, "no_speech_prob": 0.03181947022676468}, {"id": 209, "seek": 88184, "start": 881.84, "end": 888.2800000000001, "text": " And this is getting a little bit mathematically.", "tokens": [50364, 400, 341, 307, 1242, 257, 707, 857, 44003, 13, 50686], "temperature": 0.0, "avg_logprob": -0.22788821840749204, "compression_ratio": 1.6239669421487604, "no_speech_prob": 0.005858228541910648}, {"id": 210, "seek": 88184, "start": 888.2800000000001, "end": 892.88, "text": " So bear with me if you don't understand everything, I'll get back to cool implementation stuff", "tokens": [50686, 407, 6155, 365, 385, 498, 291, 500, 380, 1223, 1203, 11, 286, 603, 483, 646, 281, 1627, 11420, 1507, 50916], "temperature": 0.0, "avg_logprob": -0.22788821840749204, "compression_ratio": 1.6239669421487604, "no_speech_prob": 0.005858228541910648}, {"id": 211, "seek": 88184, "start": 892.88, "end": 894.4, "text": " later.", "tokens": [50916, 1780, 13, 50992], "temperature": 0.0, "avg_logprob": -0.22788821840749204, "compression_ratio": 1.6239669421487604, "no_speech_prob": 0.005858228541910648}, {"id": 212, "seek": 88184, "start": 894.4, "end": 899.48, "text": " So a change-based idea, and this is from the 80s, it's called operational transforms.", "tokens": [50992, 407, 257, 1319, 12, 6032, 1558, 11, 293, 341, 307, 490, 264, 4688, 82, 11, 309, 311, 1219, 16607, 35592, 13, 51246], "temperature": 0.0, "avg_logprob": -0.22788821840749204, "compression_ratio": 1.6239669421487604, "no_speech_prob": 0.005858228541910648}, {"id": 213, "seek": 88184, "start": 899.48, "end": 904.0, "text": " It is what Google Docs, for example, uses, or Docs uses that as well.", "tokens": [51246, 467, 307, 437, 3329, 16024, 82, 11, 337, 1365, 11, 4960, 11, 420, 16024, 82, 4960, 300, 382, 731, 13, 51472], "temperature": 0.0, "avg_logprob": -0.22788821840749204, "compression_ratio": 1.6239669421487604, "no_speech_prob": 0.005858228541910648}, {"id": 214, "seek": 88184, "start": 904.0, "end": 909.88, "text": " So in operational transforms, for example, we start with a file with only three lines,", "tokens": [51472, 407, 294, 16607, 35592, 11, 337, 1365, 11, 321, 722, 365, 257, 3991, 365, 787, 1045, 3876, 11, 51766], "temperature": 0.0, "avg_logprob": -0.22788821840749204, "compression_ratio": 1.6239669421487604, "no_speech_prob": 0.005858228541910648}, {"id": 215, "seek": 90988, "start": 910.52, "end": 916.2, "text": " T1 on the left inserts, so this is Alice, let's say, inserts X at the beginning of the", "tokens": [50396, 314, 16, 322, 264, 1411, 49163, 11, 370, 341, 307, 16004, 11, 718, 311, 584, 11, 49163, 1783, 412, 264, 2863, 295, 264, 50680], "temperature": 0.0, "avg_logprob": -0.2249994387571839, "compression_ratio": 1.665, "no_speech_prob": 0.00514784874394536}, {"id": 216, "seek": 90988, "start": 916.2, "end": 926.2, "text": " file, and T2 deletes the character C. So to get into two divergent states, and then", "tokens": [50680, 3991, 11, 293, 314, 17, 1103, 37996, 264, 2517, 383, 13, 407, 281, 483, 666, 732, 18558, 6930, 4368, 11, 293, 550, 51180], "temperature": 0.0, "avg_logprob": -0.2249994387571839, "compression_ratio": 1.665, "no_speech_prob": 0.00514784874394536}, {"id": 217, "seek": 90988, "start": 926.2, "end": 930.8, "text": " what operational transforms mean is that now that we've inserted an X at the beginning", "tokens": [51180, 437, 16607, 35592, 914, 307, 300, 586, 300, 321, 600, 27992, 364, 1783, 412, 264, 2863, 51410], "temperature": 0.0, "avg_logprob": -0.2249994387571839, "compression_ratio": 1.665, "no_speech_prob": 0.00514784874394536}, {"id": 218, "seek": 90988, "start": 930.8, "end": 935.76, "text": " of the file, this changes, we have to rewrite the other concurrent changes.", "tokens": [51410, 295, 264, 3991, 11, 341, 2962, 11, 321, 362, 281, 28132, 264, 661, 37702, 2962, 13, 51658], "temperature": 0.0, "avg_logprob": -0.2249994387571839, "compression_ratio": 1.665, "no_speech_prob": 0.00514784874394536}, {"id": 219, "seek": 93576, "start": 935.8, "end": 939.88, "text": " So for example, here, instead of saying delete the second character, it was a C, now you", "tokens": [50366, 407, 337, 1365, 11, 510, 11, 2602, 295, 1566, 12097, 264, 1150, 2517, 11, 309, 390, 257, 383, 11, 586, 291, 50570], "temperature": 0.0, "avg_logprob": -0.20432163106984105, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.029302621260285378}, {"id": 220, "seek": 93576, "start": 939.88, "end": 945.2, "text": " have to say delete the third character, it was a C. And so that's how you can merge things.", "tokens": [50570, 362, 281, 584, 12097, 264, 2636, 2517, 11, 309, 390, 257, 383, 13, 400, 370, 300, 311, 577, 291, 393, 22183, 721, 13, 50836], "temperature": 0.0, "avg_logprob": -0.20432163106984105, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.029302621260285378}, {"id": 221, "seek": 93576, "start": 945.2, "end": 949.3199999999999, "text": " Docs does this and uses this to detect conflicts.", "tokens": [50836, 16024, 82, 775, 341, 293, 4960, 341, 281, 5531, 19807, 13, 51042], "temperature": 0.0, "avg_logprob": -0.20432163106984105, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.029302621260285378}, {"id": 222, "seek": 93576, "start": 949.3199999999999, "end": 956.3199999999999, "text": " One issue is that if you only have insertions and deletions, it's okay, but there are still", "tokens": [51042, 1485, 2734, 307, 300, 498, 291, 787, 362, 8969, 626, 293, 1103, 302, 626, 11, 309, 311, 1392, 11, 457, 456, 366, 920, 51392], "temperature": 0.0, "avg_logprob": -0.20432163106984105, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.029302621260285378}, {"id": 223, "seek": 93576, "start": 956.3199999999999, "end": 958.0, "text": " performance problems.", "tokens": [51392, 3389, 2740, 13, 51476], "temperature": 0.0, "avg_logprob": -0.20432163106984105, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.029302621260285378}, {"id": 224, "seek": 93576, "start": 958.0, "end": 963.0, "text": " But as soon as you start handling more than insertions and deletions, you get into a quadratic", "tokens": [51476, 583, 382, 2321, 382, 291, 722, 13175, 544, 813, 8969, 626, 293, 1103, 302, 626, 11, 291, 483, 666, 257, 37262, 51726], "temperature": 0.0, "avg_logprob": -0.20432163106984105, "compression_ratio": 1.7845528455284554, "no_speech_prob": 0.029302621260285378}, {"id": 225, "seek": 96300, "start": 963.04, "end": 970.2, "text": " explosion of cases because you have to handle all pairs of types of operations.", "tokens": [50366, 15673, 295, 3331, 570, 291, 362, 281, 4813, 439, 15494, 295, 3467, 295, 7705, 13, 50724], "temperature": 0.0, "avg_logprob": -0.308323493370643, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.009881380014121532}, {"id": 226, "seek": 96300, "start": 970.2, "end": 974.92, "text": " And this is according to Google engineers who worked in the Google Docs project, this", "tokens": [50724, 400, 341, 307, 4650, 281, 3329, 11955, 567, 2732, 294, 264, 3329, 16024, 82, 1716, 11, 341, 50960], "temperature": 0.0, "avg_logprob": -0.308323493370643, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.009881380014121532}, {"id": 227, "seek": 96300, "start": 974.92, "end": 976.44, "text": " is an absolute nightmare to implement.", "tokens": [50960, 307, 364, 8236, 18724, 281, 4445, 13, 51036], "temperature": 0.0, "avg_logprob": -0.308323493370643, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.009881380014121532}, {"id": 228, "seek": 96300, "start": 976.44, "end": 980.76, "text": " And I've never heard anyone implement an operational transform, we said, yeah, they're cool, they're", "tokens": [51036, 400, 286, 600, 1128, 2198, 2878, 4445, 364, 16607, 4088, 11, 321, 848, 11, 1338, 11, 436, 434, 1627, 11, 436, 434, 51252], "temperature": 0.0, "avg_logprob": -0.308323493370643, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.009881380014121532}, {"id": 229, "seek": 96300, "start": 980.76, "end": 984.36, "text": " really easy.", "tokens": [51252, 534, 1858, 13, 51432], "temperature": 0.0, "avg_logprob": -0.308323493370643, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.009881380014121532}, {"id": 230, "seek": 96300, "start": 984.36, "end": 988.72, "text": " So a hybrid in more recent state approach is CRDTs.", "tokens": [51432, 407, 257, 13051, 294, 544, 5162, 1785, 3109, 307, 14123, 35, 33424, 13, 51650], "temperature": 0.0, "avg_logprob": -0.308323493370643, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.009881380014121532}, {"id": 231, "seek": 98872, "start": 988.8000000000001, "end": 991.8000000000001, "text": " So how many here know about CRDTs?", "tokens": [50368, 407, 577, 867, 510, 458, 466, 14123, 35, 33424, 30, 50518], "temperature": 0.0, "avg_logprob": -0.2188021842013584, "compression_ratio": 1.5829596412556053, "no_speech_prob": 0.028083397075533867}, {"id": 232, "seek": 98872, "start": 991.8000000000001, "end": 997.2, "text": " Okay, okay, reasonable number.", "tokens": [50518, 1033, 11, 1392, 11, 10585, 1230, 13, 50788], "temperature": 0.0, "avg_logprob": -0.2188021842013584, "compression_ratio": 1.5829596412556053, "no_speech_prob": 0.028083397075533867}, {"id": 233, "seek": 98872, "start": 997.2, "end": 1000.52, "text": " So the general principle is very simple.", "tokens": [50788, 407, 264, 2674, 8665, 307, 588, 2199, 13, 50954], "temperature": 0.0, "avg_logprob": -0.2188021842013584, "compression_ratio": 1.5829596412556053, "no_speech_prob": 0.028083397075533867}, {"id": 234, "seek": 98872, "start": 1000.52, "end": 1004.6800000000001, "text": " The idea is to design a structure where all operations have the properties we want.", "tokens": [50954, 440, 1558, 307, 281, 1715, 257, 3877, 689, 439, 7705, 362, 264, 7221, 321, 528, 13, 51162], "temperature": 0.0, "avg_logprob": -0.2188021842013584, "compression_ratio": 1.5829596412556053, "no_speech_prob": 0.028083397075533867}, {"id": 235, "seek": 98872, "start": 1004.6800000000001, "end": 1010.5600000000001, "text": " Instead of having your structure and say, okay, now how do we merge changes?", "tokens": [51162, 7156, 295, 1419, 428, 3877, 293, 584, 11, 1392, 11, 586, 577, 360, 321, 22183, 2962, 30, 51456], "temperature": 0.0, "avg_logprob": -0.2188021842013584, "compression_ratio": 1.5829596412556053, "no_speech_prob": 0.028083397075533867}, {"id": 236, "seek": 98872, "start": 1010.5600000000001, "end": 1015.2, "text": " Instead of doing that, you take the problem in the opposite direction saying, how can", "tokens": [51456, 7156, 295, 884, 300, 11, 291, 747, 264, 1154, 294, 264, 6182, 3513, 1566, 11, 577, 393, 51688], "temperature": 0.0, "avg_logprob": -0.2188021842013584, "compression_ratio": 1.5829596412556053, "no_speech_prob": 0.028083397075533867}, {"id": 237, "seek": 101520, "start": 1015.2, "end": 1020.2800000000001, "text": " we design a data structure from scratch so that all operations on that data structure", "tokens": [50364, 321, 1715, 257, 1412, 3877, 490, 8459, 370, 300, 439, 7705, 322, 300, 1412, 3877, 50618], "temperature": 0.0, "avg_logprob": -0.2306055529364224, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011786163784563541}, {"id": 238, "seek": 101520, "start": 1020.2800000000001, "end": 1026.48, "text": " have the right properties, meaning they are commutative, associative, they have a neutral", "tokens": [50618, 362, 264, 558, 7221, 11, 3620, 436, 366, 800, 325, 1166, 11, 4180, 1166, 11, 436, 362, 257, 10598, 50928], "temperature": 0.0, "avg_logprob": -0.2306055529364224, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011786163784563541}, {"id": 239, "seek": 101520, "start": 1026.48, "end": 1030.64, "text": " element and all that algebraic things.", "tokens": [50928, 4478, 293, 439, 300, 21989, 299, 721, 13, 51136], "temperature": 0.0, "avg_logprob": -0.2306055529364224, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011786163784563541}, {"id": 240, "seek": 101520, "start": 1030.64, "end": 1036.4, "text": " Natural examples of CRDTs are like, for example, a very simple one, increments only counters,", "tokens": [51136, 20137, 5110, 295, 14123, 35, 33424, 366, 411, 11, 337, 1365, 11, 257, 588, 2199, 472, 11, 1946, 1117, 787, 39338, 11, 51424], "temperature": 0.0, "avg_logprob": -0.2306055529364224, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011786163784563541}, {"id": 241, "seek": 101520, "start": 1036.4, "end": 1039.8400000000001, "text": " counters where you can only add one to the counter.", "tokens": [51424, 39338, 689, 291, 393, 787, 909, 472, 281, 264, 5682, 13, 51596], "temperature": 0.0, "avg_logprob": -0.2306055529364224, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.011786163784563541}, {"id": 242, "seek": 103984, "start": 1039.84, "end": 1046.56, "text": " This is a very easy and natural example of a CRDT because if Alice and Bob both increment", "tokens": [50364, 639, 307, 257, 588, 1858, 293, 3303, 1365, 295, 257, 14123, 35, 51, 570, 498, 16004, 293, 6085, 1293, 26200, 50700], "temperature": 0.0, "avg_logprob": -0.1825805360620672, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.025435704737901688}, {"id": 243, "seek": 103984, "start": 1046.56, "end": 1051.36, "text": " the counter, you just have to add two to the result to merge their change.", "tokens": [50700, 264, 5682, 11, 291, 445, 362, 281, 909, 732, 281, 264, 1874, 281, 22183, 641, 1319, 13, 50940], "temperature": 0.0, "avg_logprob": -0.1825805360620672, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.025435704737901688}, {"id": 244, "seek": 103984, "start": 1051.36, "end": 1058.48, "text": " Insert only sets, for the exact same reason, insert only sets, there are natural CRDTs.", "tokens": [50940, 36487, 787, 6352, 11, 337, 264, 1900, 912, 1778, 11, 8969, 787, 6352, 11, 456, 366, 3303, 14123, 35, 33424, 13, 51296], "temperature": 0.0, "avg_logprob": -0.1825805360620672, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.025435704737901688}, {"id": 245, "seek": 103984, "start": 1058.48, "end": 1064.1599999999999, "text": " And if you want to do things like deletions or more subtle data structure, more subtle,", "tokens": [51296, 400, 498, 291, 528, 281, 360, 721, 411, 1103, 302, 626, 420, 544, 13743, 1412, 3877, 11, 544, 13743, 11, 51580], "temperature": 0.0, "avg_logprob": -0.1825805360620672, "compression_ratio": 1.552511415525114, "no_speech_prob": 0.025435704737901688}, {"id": 246, "seek": 106416, "start": 1064.16, "end": 1069.92, "text": " more interesting operations, you have to use more trickier techniques like Tom Stones", "tokens": [50364, 544, 1880, 7705, 11, 291, 362, 281, 764, 544, 4282, 811, 7512, 411, 5041, 49982, 50652], "temperature": 0.0, "avg_logprob": -0.3045486813499814, "compression_ratio": 1.5020576131687242, "no_speech_prob": 0.13287308812141418}, {"id": 247, "seek": 106416, "start": 1069.92, "end": 1071.64, "text": " and Landport clocks.", "tokens": [50652, 293, 6607, 2707, 41528, 13, 50738], "temperature": 0.0, "avg_logprob": -0.3045486813499814, "compression_ratio": 1.5020576131687242, "no_speech_prob": 0.13287308812141418}, {"id": 248, "seek": 106416, "start": 1071.64, "end": 1076.76, "text": " I won't get into these details and if you're interested, we can talk later.", "tokens": [50738, 286, 1582, 380, 483, 666, 613, 4365, 293, 498, 291, 434, 3102, 11, 321, 393, 751, 1780, 13, 50994], "temperature": 0.0, "avg_logprob": -0.3045486813499814, "compression_ratio": 1.5020576131687242, "no_speech_prob": 0.13287308812141418}, {"id": 249, "seek": 106416, "start": 1076.76, "end": 1082.3200000000002, "text": " A useless example of a CRDT that's often invoked is a full git repository.", "tokens": [50994, 316, 14115, 1365, 295, 257, 14123, 35, 51, 300, 311, 2049, 1048, 9511, 307, 257, 1577, 18331, 25841, 13, 51272], "temperature": 0.0, "avg_logprob": -0.3045486813499814, "compression_ratio": 1.5020576131687242, "no_speech_prob": 0.13287308812141418}, {"id": 250, "seek": 106416, "start": 1082.3200000000002, "end": 1084.96, "text": " Well this is just an append only set of commits.", "tokens": [51272, 1042, 341, 307, 445, 364, 34116, 787, 992, 295, 48311, 13, 51404], "temperature": 0.0, "avg_logprob": -0.3045486813499814, "compression_ratio": 1.5020576131687242, "no_speech_prob": 0.13287308812141418}, {"id": 251, "seek": 106416, "start": 1084.96, "end": 1089.8000000000002, "text": " So yeah, sure, it's a CRDT.", "tokens": [51404, 407, 1338, 11, 988, 11, 309, 311, 257, 14123, 35, 51, 13, 51646], "temperature": 0.0, "avg_logprob": -0.3045486813499814, "compression_ratio": 1.5020576131687242, "no_speech_prob": 0.13287308812141418}, {"id": 252, "seek": 106416, "start": 1089.8000000000002, "end": 1091.0800000000002, "text": " It's commutative and all that.", "tokens": [51646, 467, 311, 800, 325, 1166, 293, 439, 300, 13, 51710], "temperature": 0.0, "avg_logprob": -0.3045486813499814, "compression_ratio": 1.5020576131687242, "no_speech_prob": 0.13287308812141418}, {"id": 253, "seek": 109108, "start": 1091.08, "end": 1095.6, "text": " But also, it's not super useful to see a git repository as a CRDT.", "tokens": [50364, 583, 611, 11, 309, 311, 406, 1687, 4420, 281, 536, 257, 18331, 25841, 382, 257, 14123, 35, 51, 13, 50590], "temperature": 0.0, "avg_logprob": -0.25429711251888637, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.023105556145310402}, {"id": 254, "seek": 109108, "start": 1095.6, "end": 1097.12, "text": " Just means you can clone this.", "tokens": [50590, 1449, 1355, 291, 393, 26506, 341, 13, 50666], "temperature": 0.0, "avg_logprob": -0.25429711251888637, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.023105556145310402}, {"id": 255, "seek": 109108, "start": 1097.12, "end": 1101.56, "text": " Saying this is a CRDT means basically it's okay, you can clone a git repository and then", "tokens": [50666, 34087, 341, 307, 257, 14123, 35, 51, 1355, 1936, 309, 311, 1392, 11, 291, 393, 26506, 257, 18331, 25841, 293, 550, 50888], "temperature": 0.0, "avg_logprob": -0.25429711251888637, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.023105556145310402}, {"id": 256, "seek": 109108, "start": 1101.56, "end": 1104.24, "text": " keep pulling into it.", "tokens": [50888, 1066, 8407, 666, 309, 13, 51022], "temperature": 0.0, "avg_logprob": -0.25429711251888637, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.023105556145310402}, {"id": 257, "seek": 109108, "start": 1104.24, "end": 1107.9199999999998, "text": " But it doesn't mean it handles merges properly.", "tokens": [51022, 583, 309, 1177, 380, 914, 309, 18722, 3551, 2880, 6108, 13, 51206], "temperature": 0.0, "avg_logprob": -0.25429711251888637, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.023105556145310402}, {"id": 258, "seek": 109108, "start": 1107.9199999999998, "end": 1112.8, "text": " What we want is the heads of the git repository to be a CRDT.", "tokens": [51206, 708, 321, 528, 307, 264, 8050, 295, 264, 18331, 25841, 281, 312, 257, 14123, 35, 51, 13, 51450], "temperature": 0.0, "avg_logprob": -0.25429711251888637, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.023105556145310402}, {"id": 259, "seek": 109108, "start": 1112.8, "end": 1116.48, "text": " All right, so how do we do that?", "tokens": [51450, 1057, 558, 11, 370, 577, 360, 321, 360, 300, 30, 51634], "temperature": 0.0, "avg_logprob": -0.25429711251888637, "compression_ratio": 1.647887323943662, "no_speech_prob": 0.023105556145310402}, {"id": 260, "seek": 111648, "start": 1117.48, "end": 1124.3600000000001, "text": " Well, merges, when everything goes right, we're not really interested.", "tokens": [50414, 1042, 11, 3551, 2880, 11, 562, 1203, 1709, 558, 11, 321, 434, 406, 534, 3102, 13, 50758], "temperature": 0.0, "avg_logprob": -0.2842414502016048, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.03372899070382118}, {"id": 261, "seek": 111648, "start": 1124.3600000000001, "end": 1127.72, "text": " So we'll start by modeling conflicts because they're the hardest case.", "tokens": [50758, 407, 321, 603, 722, 538, 15983, 19807, 570, 436, 434, 264, 13158, 1389, 13, 50926], "temperature": 0.0, "avg_logprob": -0.2842414502016048, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.03372899070382118}, {"id": 262, "seek": 111648, "start": 1127.72, "end": 1132.88, "text": " And if we cannot model conflicts properly, then there's little hope of doing anything", "tokens": [50926, 400, 498, 321, 2644, 2316, 19807, 6108, 11, 550, 456, 311, 707, 1454, 295, 884, 1340, 51184], "temperature": 0.0, "avg_logprob": -0.2842414502016048, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.03372899070382118}, {"id": 263, "seek": 111648, "start": 1132.88, "end": 1133.88, "text": " interesting.", "tokens": [51184, 1880, 13, 51234], "temperature": 0.0, "avg_logprob": -0.2842414502016048, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.03372899070382118}, {"id": 264, "seek": 111648, "start": 1133.88, "end": 1137.08, "text": " So conflicts are where we need a good tool the most.", "tokens": [51234, 407, 19807, 366, 689, 321, 643, 257, 665, 2290, 264, 881, 13, 51394], "temperature": 0.0, "avg_logprob": -0.2842414502016048, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.03372899070382118}, {"id": 265, "seek": 111648, "start": 1137.08, "end": 1139.16, "text": " The exact definition depends on the tool.", "tokens": [51394, 440, 1900, 7123, 5946, 322, 264, 2290, 13, 51498], "temperature": 0.0, "avg_logprob": -0.2842414502016048, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.03372899070382118}, {"id": 266, "seek": 111648, "start": 1139.16, "end": 1144.1200000000001, "text": " DAX for example has really cool and exotic definitions of conflicts.", "tokens": [51498, 9578, 55, 337, 1365, 575, 534, 1627, 293, 27063, 21988, 295, 19807, 13, 51746], "temperature": 0.0, "avg_logprob": -0.2842414502016048, "compression_ratio": 1.6833333333333333, "no_speech_prob": 0.03372899070382118}, {"id": 267, "seek": 114412, "start": 1144.76, "end": 1149.2399999999998, "text": " For example, if Alice and Bob are writing to the same file at the same place, I'd say", "tokens": [50396, 1171, 1365, 11, 498, 16004, 293, 6085, 366, 3579, 281, 264, 912, 3991, 412, 264, 912, 1081, 11, 286, 1116, 584, 50620], "temperature": 0.0, "avg_logprob": -0.19197052814921395, "compression_ratio": 1.8174273858921162, "no_speech_prob": 0.02280608005821705}, {"id": 268, "seek": 114412, "start": 1149.2399999999998, "end": 1153.08, "text": " most tools consider that a conflict, but not all.", "tokens": [50620, 881, 3873, 1949, 300, 257, 6596, 11, 457, 406, 439, 13, 50812], "temperature": 0.0, "avg_logprob": -0.19197052814921395, "compression_ratio": 1.8174273858921162, "no_speech_prob": 0.02280608005821705}, {"id": 269, "seek": 114412, "start": 1153.08, "end": 1158.9199999999998, "text": " When Alice renames a file from F to G, while Bob renames it to H, I'd say most tools also", "tokens": [50812, 1133, 16004, 8124, 1632, 257, 3991, 490, 479, 281, 460, 11, 1339, 6085, 8124, 1632, 309, 281, 389, 11, 286, 1116, 584, 881, 3873, 611, 51104], "temperature": 0.0, "avg_logprob": -0.19197052814921395, "compression_ratio": 1.8174273858921162, "no_speech_prob": 0.02280608005821705}, {"id": 270, "seek": 114412, "start": 1158.9199999999998, "end": 1160.04, "text": " consider that a conflict.", "tokens": [51104, 1949, 300, 257, 6596, 13, 51160], "temperature": 0.0, "avg_logprob": -0.19197052814921395, "compression_ratio": 1.8174273858921162, "no_speech_prob": 0.02280608005821705}, {"id": 271, "seek": 114412, "start": 1160.04, "end": 1162.8799999999999, "text": " Some will just pick a name randomly.", "tokens": [51160, 2188, 486, 445, 1888, 257, 1315, 16979, 13, 51302], "temperature": 0.0, "avg_logprob": -0.19197052814921395, "compression_ratio": 1.8174273858921162, "no_speech_prob": 0.02280608005821705}, {"id": 272, "seek": 114412, "start": 1162.8799999999999, "end": 1167.8, "text": " Alice renames a function F while Bob adds a call to F. So that's a trickier one.", "tokens": [51302, 16004, 8124, 1632, 257, 2445, 479, 1339, 6085, 10860, 257, 818, 281, 479, 13, 407, 300, 311, 257, 4282, 811, 472, 13, 51548], "temperature": 0.0, "avg_logprob": -0.19197052814921395, "compression_ratio": 1.8174273858921162, "no_speech_prob": 0.02280608005821705}, {"id": 273, "seek": 114412, "start": 1167.8, "end": 1172.12, "text": " And very few tools that I know of can handle that conflict properly.", "tokens": [51548, 400, 588, 1326, 3873, 300, 286, 458, 295, 393, 4813, 300, 6596, 6108, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19197052814921395, "compression_ratio": 1.8174273858921162, "no_speech_prob": 0.02280608005821705}, {"id": 274, "seek": 117212, "start": 1172.12, "end": 1174.8799999999999, "text": " If a conflict can do it, my tool cannot do it.", "tokens": [50364, 759, 257, 6596, 393, 360, 309, 11, 452, 2290, 2644, 360, 309, 13, 50502], "temperature": 0.0, "avg_logprob": -0.22518087688245272, "compression_ratio": 1.6261682242990654, "no_speech_prob": 0.0271757859736681}, {"id": 275, "seek": 117212, "start": 1174.8799999999999, "end": 1177.2399999999998, "text": " And Git can certainly not do it.", "tokens": [50502, 400, 16939, 393, 3297, 406, 360, 309, 13, 50620], "temperature": 0.0, "avg_logprob": -0.22518087688245272, "compression_ratio": 1.6261682242990654, "no_speech_prob": 0.0271757859736681}, {"id": 276, "seek": 117212, "start": 1177.2399999999998, "end": 1179.9199999999998, "text": " So how do we do that?", "tokens": [50620, 407, 577, 360, 321, 360, 300, 30, 50754], "temperature": 0.0, "avg_logprob": -0.22518087688245272, "compression_ratio": 1.6261682242990654, "no_speech_prob": 0.0271757859736681}, {"id": 277, "seek": 117212, "start": 1179.9199999999998, "end": 1185.9599999999998, "text": " How do we solve all these problems at once and get all the nice properties for free?", "tokens": [50754, 1012, 360, 321, 5039, 439, 613, 2740, 412, 1564, 293, 483, 439, 264, 1481, 7221, 337, 1737, 30, 51056], "temperature": 0.0, "avg_logprob": -0.22518087688245272, "compression_ratio": 1.6261682242990654, "no_speech_prob": 0.0271757859736681}, {"id": 278, "seek": 117212, "start": 1185.9599999999998, "end": 1188.7199999999998, "text": " We do that by using category theory.", "tokens": [51056, 492, 360, 300, 538, 1228, 7719, 5261, 13, 51194], "temperature": 0.0, "avg_logprob": -0.22518087688245272, "compression_ratio": 1.6261682242990654, "no_speech_prob": 0.0271757859736681}, {"id": 279, "seek": 117212, "start": 1188.7199999999998, "end": 1196.76, "text": " So this is a mathematical framework that gives you really nice tools to model, to work in", "tokens": [51194, 407, 341, 307, 257, 18894, 8388, 300, 2709, 291, 534, 1481, 3873, 281, 2316, 11, 281, 589, 294, 51596], "temperature": 0.0, "avg_logprob": -0.22518087688245272, "compression_ratio": 1.6261682242990654, "no_speech_prob": 0.0271757859736681}, {"id": 280, "seek": 117212, "start": 1196.76, "end": 1200.2399999999998, "text": " abstractions of things in general.", "tokens": [51596, 12649, 626, 295, 721, 294, 2674, 13, 51770], "temperature": 0.0, "avg_logprob": -0.22518087688245272, "compression_ratio": 1.6261682242990654, "no_speech_prob": 0.0271757859736681}, {"id": 281, "seek": 120024, "start": 1200.24, "end": 1207.92, "text": " So our modeling in category theory of this problem is if you have any two patches, F and", "tokens": [50364, 407, 527, 15983, 294, 7719, 5261, 295, 341, 1154, 307, 498, 291, 362, 604, 732, 26531, 11, 479, 293, 50748], "temperature": 0.0, "avg_logprob": -0.19870179699313256, "compression_ratio": 1.6971153846153846, "no_speech_prob": 0.002106061903759837}, {"id": 282, "seek": 120024, "start": 1207.92, "end": 1214.32, "text": " G, what we want is a unique state P, which is the sort of the minimal merge of F and", "tokens": [50748, 460, 11, 437, 321, 528, 307, 257, 3845, 1785, 430, 11, 597, 307, 264, 1333, 295, 264, 13206, 22183, 295, 479, 293, 51068], "temperature": 0.0, "avg_logprob": -0.19870179699313256, "compression_ratio": 1.6971153846153846, "no_speech_prob": 0.002106061903759837}, {"id": 283, "seek": 120024, "start": 1214.32, "end": 1221.68, "text": " G, such that for anything that Alice and Bob could do after F and G to reach a common state,", "tokens": [51068, 460, 11, 1270, 300, 337, 1340, 300, 16004, 293, 6085, 727, 360, 934, 479, 293, 460, 281, 2524, 257, 2689, 1785, 11, 51436], "temperature": 0.0, "avg_logprob": -0.19870179699313256, "compression_ratio": 1.6971153846153846, "no_speech_prob": 0.002106061903759837}, {"id": 284, "seek": 120024, "start": 1221.68, "end": 1226.04, "text": " that common state, or common state Q, that common state can also be reached from P. So", "tokens": [51436, 300, 2689, 1785, 11, 420, 2689, 1785, 1249, 11, 300, 2689, 1785, 393, 611, 312, 6488, 490, 430, 13, 407, 51654], "temperature": 0.0, "avg_logprob": -0.19870179699313256, "compression_ratio": 1.6971153846153846, "no_speech_prob": 0.002106061903759837}, {"id": 285, "seek": 122604, "start": 1226.04, "end": 1232.44, "text": " instead of doing some work to get to common points, you can always first get to a common", "tokens": [50364, 2602, 295, 884, 512, 589, 281, 483, 281, 2689, 2793, 11, 291, 393, 1009, 700, 483, 281, 257, 2689, 50684], "temperature": 0.0, "avg_logprob": -0.18737224528664037, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0053608110174536705}, {"id": 286, "seek": 122604, "start": 1232.44, "end": 1235.28, "text": " point and then do the work.", "tokens": [50684, 935, 293, 550, 360, 264, 589, 13, 50826], "temperature": 0.0, "avg_logprob": -0.18737224528664037, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0053608110174536705}, {"id": 287, "seek": 122604, "start": 1235.28, "end": 1243.84, "text": " So if P exists, category theorist call it the push out of F and G. So the reason we're", "tokens": [50826, 407, 498, 430, 8198, 11, 7719, 27423, 468, 818, 309, 264, 2944, 484, 295, 479, 293, 460, 13, 407, 264, 1778, 321, 434, 51254], "temperature": 0.0, "avg_logprob": -0.18737224528664037, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0053608110174536705}, {"id": 288, "seek": 122604, "start": 1243.84, "end": 1249.48, "text": " interested in that is because category theory has a lot of tools to start from this simple", "tokens": [51254, 3102, 294, 300, 307, 570, 7719, 5261, 575, 257, 688, 295, 3873, 281, 722, 490, 341, 2199, 51536], "temperature": 0.0, "avg_logprob": -0.18737224528664037, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0053608110174536705}, {"id": 289, "seek": 124948, "start": 1249.48, "end": 1256.52, "text": " modeling and give us lots of cool stuff like free data structures and while do our job", "tokens": [50364, 15983, 293, 976, 505, 3195, 295, 1627, 1507, 411, 1737, 1412, 9227, 293, 1339, 360, 527, 1691, 50716], "temperature": 0.0, "avg_logprob": -0.19693193203065454, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.03494760021567345}, {"id": 290, "seek": 124948, "start": 1256.52, "end": 1258.08, "text": " for us basically.", "tokens": [50716, 337, 505, 1936, 13, 50794], "temperature": 0.0, "avg_logprob": -0.19693193203065454, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.03494760021567345}, {"id": 291, "seek": 124948, "start": 1258.08, "end": 1264.64, "text": " So in this case, category theorist would notice that the push out of two patches doesn't always", "tokens": [50794, 407, 294, 341, 1389, 11, 7719, 27423, 468, 576, 3449, 300, 264, 2944, 484, 295, 732, 26531, 1177, 380, 1009, 51122], "temperature": 0.0, "avg_logprob": -0.19693193203065454, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.03494760021567345}, {"id": 292, "seek": 124948, "start": 1264.64, "end": 1269.6, "text": " exist and this is absolutely equivalent saying that sometimes there are conflicts.", "tokens": [51122, 2514, 293, 341, 307, 3122, 10344, 1566, 300, 2171, 456, 366, 19807, 13, 51370], "temperature": 0.0, "avg_logprob": -0.19693193203065454, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.03494760021567345}, {"id": 293, "seek": 124948, "start": 1269.6, "end": 1273.88, "text": " And now the question becomes how to generalize representation of states, states are like", "tokens": [51370, 400, 586, 264, 1168, 3643, 577, 281, 2674, 1125, 10290, 295, 4368, 11, 4368, 366, 411, 51584], "temperature": 0.0, "avg_logprob": -0.19693193203065454, "compression_ratio": 1.5696202531645569, "no_speech_prob": 0.03494760021567345}, {"id": 294, "seek": 127388, "start": 1273.88, "end": 1279.48, "text": " X, Y and Z, so that all pairs of changes F and G have a push out.", "tokens": [50364, 1783, 11, 398, 293, 1176, 11, 370, 300, 439, 15494, 295, 2962, 479, 293, 460, 362, 257, 2944, 484, 13, 50644], "temperature": 0.0, "avg_logprob": -0.24136844048133263, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.11500459164381027}, {"id": 295, "seek": 127388, "start": 1279.48, "end": 1285.7600000000002, "text": " The solution is to just generalize states to directed graphs instead of just sequences", "tokens": [50644, 440, 3827, 307, 281, 445, 2674, 1125, 4368, 281, 12898, 24877, 2602, 295, 445, 22978, 50958], "temperature": 0.0, "avg_logprob": -0.24136844048133263, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.11500459164381027}, {"id": 296, "seek": 127388, "start": 1285.7600000000002, "end": 1289.6000000000001, "text": " of bytes where vertices of these graphs are bytes.", "tokens": [50958, 295, 36088, 689, 32053, 295, 613, 24877, 366, 36088, 13, 51150], "temperature": 0.0, "avg_logprob": -0.24136844048133263, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.11500459164381027}, {"id": 297, "seek": 127388, "start": 1289.6000000000001, "end": 1292.16, "text": " I'll give you an example in the next slide.", "tokens": [51150, 286, 603, 976, 291, 364, 1365, 294, 264, 958, 4137, 13, 51278], "temperature": 0.0, "avg_logprob": -0.24136844048133263, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.11500459164381027}, {"id": 298, "seek": 127388, "start": 1292.16, "end": 1296.0400000000002, "text": " Verses are bytes and edges represent the union of all known order between bytes.", "tokens": [51278, 12226, 279, 366, 36088, 293, 8819, 2906, 264, 11671, 295, 439, 2570, 1668, 1296, 36088, 13, 51472], "temperature": 0.0, "avg_logprob": -0.24136844048133263, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.11500459164381027}, {"id": 299, "seek": 127388, "start": 1296.0400000000002, "end": 1301.8400000000001, "text": " So that sounds a little far fetch, but actually it's very clear in the example.", "tokens": [51472, 407, 300, 3263, 257, 707, 1400, 23673, 11, 457, 767, 309, 311, 588, 1850, 294, 264, 1365, 13, 51762], "temperature": 0.0, "avg_logprob": -0.24136844048133263, "compression_ratio": 1.6254980079681276, "no_speech_prob": 0.11500459164381027}, {"id": 300, "seek": 130184, "start": 1301.84, "end": 1306.48, "text": " So the way we model these things in Pichl is as fellow.", "tokens": [50364, 407, 264, 636, 321, 2316, 613, 721, 294, 430, 480, 75, 307, 382, 7177, 13, 50596], "temperature": 0.0, "avg_logprob": -0.31388147098501934, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.006535509135574102}, {"id": 301, "seek": 130184, "start": 1306.48, "end": 1312.3999999999999, "text": " So the first example of a simple patch is how do we add some bytes to our data structures.", "tokens": [50596, 407, 264, 700, 1365, 295, 257, 2199, 9972, 307, 577, 360, 321, 909, 512, 36088, 281, 527, 1412, 9227, 13, 50892], "temperature": 0.0, "avg_logprob": -0.31388147098501934, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.006535509135574102}, {"id": 302, "seek": 130184, "start": 1312.3999999999999, "end": 1315.04, "text": " So we have a file.", "tokens": [50892, 407, 321, 362, 257, 3991, 13, 51024], "temperature": 0.0, "avg_logprob": -0.31388147098501934, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.006535509135574102}, {"id": 303, "seek": 130184, "start": 1315.04, "end": 1320.6, "text": " So well first in our graph, all vertices are labeled by a change number.", "tokens": [51024, 407, 731, 700, 294, 527, 4295, 11, 439, 32053, 366, 21335, 538, 257, 1319, 1230, 13, 51302], "temperature": 0.0, "avg_logprob": -0.31388147098501934, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.006535509135574102}, {"id": 304, "seek": 130184, "start": 1320.6, "end": 1327.4399999999998, "text": " Here for example C0 is change number zero and an interval such as zero and presenting", "tokens": [51302, 1692, 337, 1365, 383, 15, 307, 1319, 1230, 4018, 293, 364, 15035, 1270, 382, 4018, 293, 15578, 51644], "temperature": 0.0, "avg_logprob": -0.31388147098501934, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.006535509135574102}, {"id": 305, "seek": 130184, "start": 1327.4399999999998, "end": 1331.36, "text": " bytes inside that change, inside that patch.", "tokens": [51644, 36088, 1854, 300, 1319, 11, 1854, 300, 9972, 13, 51840], "temperature": 0.0, "avg_logprob": -0.31388147098501934, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.006535509135574102}, {"id": 306, "seek": 133136, "start": 1331.36, "end": 1335.36, "text": " And edges or our graph are labeled by the change that introduced them.", "tokens": [50364, 400, 8819, 420, 527, 4295, 366, 21335, 538, 264, 1319, 300, 7268, 552, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2481184204419454, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.007031670771539211}, {"id": 307, "seek": 133136, "start": 1335.36, "end": 1341.3999999999999, "text": " So for example, here's a starting from an initial file C0, zero, n.", "tokens": [50564, 407, 337, 1365, 11, 510, 311, 257, 2891, 490, 364, 5883, 3991, 383, 15, 11, 4018, 11, 297, 13, 50866], "temperature": 0.0, "avg_logprob": -0.2481184204419454, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.007031670771539211}, {"id": 308, "seek": 133136, "start": 1341.3999999999999, "end": 1343.4399999999998, "text": " How do we add some bytes in the middle?", "tokens": [50866, 1012, 360, 321, 909, 512, 36088, 294, 264, 2808, 30, 50968], "temperature": 0.0, "avg_logprob": -0.2481184204419454, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.007031670771539211}, {"id": 309, "seek": 133136, "start": 1343.4399999999998, "end": 1352.12, "text": " Well, we'll first split the initial file and then add some bytes, add a new vertex inside", "tokens": [50968, 1042, 11, 321, 603, 700, 7472, 264, 5883, 3991, 293, 550, 909, 512, 36088, 11, 909, 257, 777, 28162, 1854, 51402], "temperature": 0.0, "avg_logprob": -0.2481184204419454, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.007031670771539211}, {"id": 310, "seek": 133136, "start": 1352.12, "end": 1355.6799999999998, "text": " the middle of that vertex and then reconnect everything so that we can get the order of", "tokens": [51402, 264, 2808, 295, 300, 28162, 293, 550, 30095, 1203, 370, 300, 321, 393, 483, 264, 1668, 295, 51580], "temperature": 0.0, "avg_logprob": -0.2481184204419454, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.007031670771539211}, {"id": 311, "seek": 133136, "start": 1355.6799999999998, "end": 1356.6799999999998, "text": " rights.", "tokens": [51580, 4601, 13, 51630], "temperature": 0.0, "avg_logprob": -0.2481184204419454, "compression_ratio": 1.6322869955156951, "no_speech_prob": 0.007031670771539211}, {"id": 312, "seek": 135668, "start": 1356.68, "end": 1363.88, "text": " And now that the bytes introduced by C0 between zero and i come before the bytes in C1 between", "tokens": [50364, 400, 586, 300, 264, 36088, 7268, 538, 383, 15, 1296, 4018, 293, 741, 808, 949, 264, 36088, 294, 383, 16, 1296, 50724], "temperature": 0.0, "avg_logprob": -0.2651912320044733, "compression_ratio": 1.8622448979591837, "no_speech_prob": 0.04164206609129906}, {"id": 313, "seek": 135668, "start": 1363.88, "end": 1370.2, "text": " zero and m and these in turn come before the bytes introduced by C0 between i and n.", "tokens": [50724, 4018, 293, 275, 293, 613, 294, 1261, 808, 949, 264, 36088, 7268, 538, 383, 15, 1296, 741, 293, 297, 13, 51040], "temperature": 0.0, "avg_logprob": -0.2651912320044733, "compression_ratio": 1.8622448979591837, "no_speech_prob": 0.04164206609129906}, {"id": 314, "seek": 135668, "start": 1370.2, "end": 1373.76, "text": " So this is how we do insertions.", "tokens": [51040, 407, 341, 307, 577, 321, 360, 8969, 626, 13, 51218], "temperature": 0.0, "avg_logprob": -0.2651912320044733, "compression_ratio": 1.8622448979591837, "no_speech_prob": 0.04164206609129906}, {"id": 315, "seek": 135668, "start": 1373.76, "end": 1378.88, "text": " The implementation now, the rest is a question of, is a matter of implementation like how", "tokens": [51218, 440, 11420, 586, 11, 264, 1472, 307, 257, 1168, 295, 11, 307, 257, 1871, 295, 11420, 411, 577, 51474], "temperature": 0.0, "avg_logprob": -0.2651912320044733, "compression_ratio": 1.8622448979591837, "no_speech_prob": 0.04164206609129906}, {"id": 316, "seek": 135668, "start": 1378.88, "end": 1385.4, "text": " do we store these giants graphs efficiently on disk and so on.", "tokens": [51474, 360, 321, 3531, 613, 31894, 24877, 19621, 322, 12355, 293, 370, 322, 13, 51800], "temperature": 0.0, "avg_logprob": -0.2651912320044733, "compression_ratio": 1.8622448979591837, "no_speech_prob": 0.04164206609129906}, {"id": 317, "seek": 138540, "start": 1386.2, "end": 1392.4, "text": " Deleting works more or less in the same way except we now introduce a new thing which", "tokens": [50404, 5831, 9880, 1985, 544, 420, 1570, 294, 264, 912, 636, 3993, 321, 586, 5366, 257, 777, 551, 597, 50714], "temperature": 0.0, "avg_logprob": -0.21528037221808183, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.010664367116987705}, {"id": 318, "seek": 138540, "start": 1392.4, "end": 1393.96, "text": " is the edge label.", "tokens": [50714, 307, 264, 4691, 7645, 13, 50792], "temperature": 0.0, "avg_logprob": -0.21528037221808183, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.010664367116987705}, {"id": 319, "seek": 138540, "start": 1393.96, "end": 1401.8000000000002, "text": " So deleting a vertex in our system means turning an edge, like turning an edge from a continuous", "tokens": [50792, 407, 48946, 257, 28162, 294, 527, 1185, 1355, 6246, 364, 4691, 11, 411, 6246, 364, 4691, 490, 257, 10957, 51184], "temperature": 0.0, "avg_logprob": -0.21528037221808183, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.010664367116987705}, {"id": 320, "seek": 138540, "start": 1401.8000000000002, "end": 1405.6000000000001, "text": " line into a dashed line.", "tokens": [51184, 1622, 666, 257, 8240, 292, 1622, 13, 51374], "temperature": 0.0, "avg_logprob": -0.21528037221808183, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.010664367116987705}, {"id": 321, "seek": 138540, "start": 1405.6000000000001, "end": 1408.48, "text": " And so we do more or less the same thing.", "tokens": [51374, 400, 370, 321, 360, 544, 420, 1570, 264, 912, 551, 13, 51518], "temperature": 0.0, "avg_logprob": -0.21528037221808183, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.010664367116987705}, {"id": 322, "seek": 138540, "start": 1408.48, "end": 1413.0, "text": " In this example we're deleting bytes J2i from C0 and zero to K from C1.", "tokens": [51518, 682, 341, 1365, 321, 434, 48946, 36088, 508, 17, 72, 490, 383, 15, 293, 4018, 281, 591, 490, 383, 16, 13, 51744], "temperature": 0.0, "avg_logprob": -0.21528037221808183, "compression_ratio": 1.6346153846153846, "no_speech_prob": 0.010664367116987705}, {"id": 323, "seek": 141300, "start": 1413.04, "end": 1416.6, "text": " So some bytes that were introduced by previous patches.", "tokens": [50366, 407, 512, 36088, 300, 645, 7268, 538, 3894, 26531, 13, 50544], "temperature": 0.0, "avg_logprob": -0.22287332168733232, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.007714229170233011}, {"id": 324, "seek": 141300, "start": 1416.6, "end": 1418.96, "text": " And so this is what we guess in the end.", "tokens": [50544, 400, 370, 341, 307, 437, 321, 2041, 294, 264, 917, 13, 50662], "temperature": 0.0, "avg_logprob": -0.22287332168733232, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.007714229170233011}, {"id": 325, "seek": 141300, "start": 1418.96, "end": 1425.12, "text": " So we get a bunch of vertices and dashed lines to indicate which bytes should be deleted", "tokens": [50662, 407, 321, 483, 257, 3840, 295, 32053, 293, 8240, 292, 3876, 281, 13330, 597, 36088, 820, 312, 22981, 50970], "temperature": 0.0, "avg_logprob": -0.22287332168733232, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.007714229170233011}, {"id": 326, "seek": 141300, "start": 1425.12, "end": 1428.12, "text": " and which are still alive.", "tokens": [50970, 293, 597, 366, 920, 5465, 13, 51120], "temperature": 0.0, "avg_logprob": -0.22287332168733232, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.007714229170233011}, {"id": 327, "seek": 141300, "start": 1428.12, "end": 1429.6, "text": " All right.", "tokens": [51120, 1057, 558, 13, 51194], "temperature": 0.0, "avg_logprob": -0.22287332168733232, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.007714229170233011}, {"id": 328, "seek": 141300, "start": 1429.6, "end": 1433.68, "text": " And that's actually the good news is that we don't need more than that to build an entire", "tokens": [51194, 400, 300, 311, 767, 264, 665, 2583, 307, 300, 321, 500, 380, 643, 544, 813, 300, 281, 1322, 364, 2302, 51398], "temperature": 0.0, "avg_logprob": -0.22287332168733232, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.007714229170233011}, {"id": 329, "seek": 141300, "start": 1433.68, "end": 1435.56, "text": " version control system.", "tokens": [51398, 3037, 1969, 1185, 13, 51492], "temperature": 0.0, "avg_logprob": -0.22287332168733232, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.007714229170233011}, {"id": 330, "seek": 141300, "start": 1435.56, "end": 1439.2, "text": " So this is rebuilding foundations first, right?", "tokens": [51492, 407, 341, 307, 36717, 22467, 700, 11, 558, 30, 51674], "temperature": 0.0, "avg_logprob": -0.22287332168733232, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.007714229170233011}, {"id": 331, "seek": 143920, "start": 1439.2, "end": 1443.92, "text": " This is actually really cool because it's a very minimalistic system and we like that", "tokens": [50364, 639, 307, 767, 534, 1627, 570, 309, 311, 257, 588, 13206, 3142, 1185, 293, 321, 411, 300, 50600], "temperature": 0.0, "avg_logprob": -0.18753169377644857, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.017259107902646065}, {"id": 332, "seek": 143920, "start": 1443.92, "end": 1446.68, "text": " because it makes everything else easy.", "tokens": [50600, 570, 309, 1669, 1203, 1646, 1858, 13, 50738], "temperature": 0.0, "avg_logprob": -0.18753169377644857, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.017259107902646065}, {"id": 333, "seek": 143920, "start": 1446.68, "end": 1448.24, "text": " So two kinds of changes.", "tokens": [50738, 407, 732, 3685, 295, 2962, 13, 50816], "temperature": 0.0, "avg_logprob": -0.18753169377644857, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.017259107902646065}, {"id": 334, "seek": 143920, "start": 1448.24, "end": 1454.04, "text": " One is adding a vertex to our graph in a context, meaning parents and children of that new vertex,", "tokens": [50816, 1485, 307, 5127, 257, 28162, 281, 527, 4295, 294, 257, 4319, 11, 3620, 3152, 293, 2227, 295, 300, 777, 28162, 11, 51106], "temperature": 0.0, "avg_logprob": -0.18753169377644857, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.017259107902646065}, {"id": 335, "seek": 143920, "start": 1454.04, "end": 1456.76, "text": " and change an edge's label.", "tokens": [51106, 293, 1319, 364, 4691, 311, 7645, 13, 51242], "temperature": 0.0, "avg_logprob": -0.18753169377644857, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.017259107902646065}, {"id": 336, "seek": 143920, "start": 1456.76, "end": 1458.04, "text": " And this is all we need actually.", "tokens": [51242, 400, 341, 307, 439, 321, 643, 767, 13, 51306], "temperature": 0.0, "avg_logprob": -0.18753169377644857, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.017259107902646065}, {"id": 337, "seek": 143920, "start": 1458.04, "end": 1462.76, "text": " We get, like, from these things we get a ton of cool properties for free.", "tokens": [51306, 492, 483, 11, 411, 11, 490, 613, 721, 321, 483, 257, 2952, 295, 1627, 7221, 337, 1737, 13, 51542], "temperature": 0.0, "avg_logprob": -0.18753169377644857, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.017259107902646065}, {"id": 338, "seek": 143920, "start": 1462.76, "end": 1468.76, "text": " First we get free conflict handling because we were just, like, there's no notion of", "tokens": [51542, 2386, 321, 483, 1737, 6596, 13175, 570, 321, 645, 445, 11, 411, 11, 456, 311, 572, 10710, 295, 51842], "temperature": 0.0, "avg_logprob": -0.18753169377644857, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.017259107902646065}, {"id": 339, "seek": 146876, "start": 1468.76, "end": 1469.76, "text": " conflict in this.", "tokens": [50364, 6596, 294, 341, 13, 50414], "temperature": 0.0, "avg_logprob": -0.19473403391211924, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.0050934371538460255}, {"id": 340, "seek": 146876, "start": 1469.76, "end": 1472.92, "text": " We're just adding vertices, changing edges' labels.", "tokens": [50414, 492, 434, 445, 5127, 32053, 11, 4473, 8819, 6, 16949, 13, 50572], "temperature": 0.0, "avg_logprob": -0.19473403391211924, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.0050934371538460255}, {"id": 341, "seek": 146876, "start": 1472.92, "end": 1477.96, "text": " And there's no, like, the graph naturally models conflicts.", "tokens": [50572, 400, 456, 311, 572, 11, 411, 11, 264, 4295, 8195, 5245, 19807, 13, 50824], "temperature": 0.0, "avg_logprob": -0.19473403391211924, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.0050934371538460255}, {"id": 342, "seek": 146876, "start": 1477.96, "end": 1479.12, "text": " So conflicts are possible.", "tokens": [50824, 407, 19807, 366, 1944, 13, 50882], "temperature": 0.0, "avg_logprob": -0.19473403391211924, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.0050934371538460255}, {"id": 343, "seek": 146876, "start": 1479.12, "end": 1484.6, "text": " They're properly modeled inside the graph and they can be talked about and manipulated", "tokens": [50882, 814, 434, 6108, 37140, 1854, 264, 4295, 293, 436, 393, 312, 2825, 466, 293, 37161, 51156], "temperature": 0.0, "avg_logprob": -0.19473403391211924, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.0050934371538460255}, {"id": 344, "seek": 146876, "start": 1484.6, "end": 1488.12, "text": " without any specific treatments.", "tokens": [51156, 1553, 604, 2685, 15795, 13, 51332], "temperature": 0.0, "avg_logprob": -0.19473403391211924, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.0050934371538460255}, {"id": 345, "seek": 146876, "start": 1488.12, "end": 1493.2, "text": " So our definition of conflict here is we could first call the live vertices whose incoming", "tokens": [51332, 407, 527, 7123, 295, 6596, 510, 307, 321, 727, 700, 818, 264, 1621, 32053, 6104, 22341, 51586], "temperature": 0.0, "avg_logprob": -0.19473403391211924, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.0050934371538460255}, {"id": 346, "seek": 146876, "start": 1493.2, "end": 1496.48, "text": " edges are all alive, meaning they're all full lines.", "tokens": [51586, 8819, 366, 439, 5465, 11, 3620, 436, 434, 439, 1577, 3876, 13, 51750], "temperature": 0.0, "avg_logprob": -0.19473403391211924, "compression_ratio": 1.6935483870967742, "no_speech_prob": 0.0050934371538460255}, {"id": 347, "seek": 149648, "start": 1496.48, "end": 1502.0, "text": " Live vertices or vertices whose incoming edges are all dead, and vertices in the middle that", "tokens": [50364, 10385, 32053, 420, 32053, 6104, 22341, 8819, 366, 439, 3116, 11, 293, 32053, 294, 264, 2808, 300, 50640], "temperature": 0.0, "avg_logprob": -0.17662700171609527, "compression_ratio": 1.8296943231441047, "no_speech_prob": 0.018375219777226448}, {"id": 348, "seek": 149648, "start": 1502.0, "end": 1506.64, "text": " have both alive and dead edges, we call them zombies.", "tokens": [50640, 362, 1293, 5465, 293, 3116, 8819, 11, 321, 818, 552, 24230, 13, 50872], "temperature": 0.0, "avg_logprob": -0.17662700171609527, "compression_ratio": 1.8296943231441047, "no_speech_prob": 0.018375219777226448}, {"id": 349, "seek": 149648, "start": 1506.64, "end": 1510.8, "text": " We say now that the graph has no conflicts if and only if it has no zombie, and all its", "tokens": [50872, 492, 584, 586, 300, 264, 4295, 575, 572, 19807, 498, 293, 787, 498, 309, 575, 572, 20310, 11, 293, 439, 1080, 51080], "temperature": 0.0, "avg_logprob": -0.17662700171609527, "compression_ratio": 1.8296943231441047, "no_speech_prob": 0.018375219777226448}, {"id": 350, "seek": 149648, "start": 1510.8, "end": 1516.48, "text": " live vertices are totally ordered, meaning we can actually compute a full ordering of", "tokens": [51080, 1621, 32053, 366, 3879, 8866, 11, 3620, 321, 393, 767, 14722, 257, 1577, 21739, 295, 51364], "temperature": 0.0, "avg_logprob": -0.17662700171609527, "compression_ratio": 1.8296943231441047, "no_speech_prob": 0.018375219777226448}, {"id": 351, "seek": 149648, "start": 1516.48, "end": 1517.48, "text": " all the bytes.", "tokens": [51364, 439, 264, 36088, 13, 51414], "temperature": 0.0, "avg_logprob": -0.17662700171609527, "compression_ratio": 1.8296943231441047, "no_speech_prob": 0.018375219777226448}, {"id": 352, "seek": 149648, "start": 1517.48, "end": 1522.3600000000001, "text": " We know exactly what order the bytes come in the file, and if we have that, then we", "tokens": [51414, 492, 458, 2293, 437, 1668, 264, 36088, 808, 294, 264, 3991, 11, 293, 498, 321, 362, 300, 11, 550, 321, 51658], "temperature": 0.0, "avg_logprob": -0.17662700171609527, "compression_ratio": 1.8296943231441047, "no_speech_prob": 0.018375219777226448}, {"id": 353, "seek": 152236, "start": 1522.36, "end": 1527.1599999999999, "text": " can output the file to the user, and it actually makes sense.", "tokens": [50364, 393, 5598, 264, 3991, 281, 264, 4195, 11, 293, 309, 767, 1669, 2020, 13, 50604], "temperature": 0.0, "avg_logprob": -0.1946877349506725, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.07541745156049728}, {"id": 354, "seek": 152236, "start": 1527.1599999999999, "end": 1532.04, "text": " So some notes on this system.", "tokens": [50604, 407, 512, 5570, 322, 341, 1185, 13, 50848], "temperature": 0.0, "avg_logprob": -0.1946877349506725, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.07541745156049728}, {"id": 355, "seek": 152236, "start": 1532.04, "end": 1536.7199999999998, "text": " So this gives a system where we have changes that are not exactly or diffs that are not", "tokens": [50848, 407, 341, 2709, 257, 1185, 689, 321, 362, 2962, 300, 366, 406, 2293, 420, 7593, 82, 300, 366, 406, 51082], "temperature": 0.0, "avg_logprob": -0.1946877349506725, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.07541745156049728}, {"id": 356, "seek": 152236, "start": 1536.7199999999998, "end": 1538.1599999999999, "text": " exactly Unix diffs.", "tokens": [51082, 2293, 1156, 970, 7593, 82, 13, 51154], "temperature": 0.0, "avg_logprob": -0.1946877349506725, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.07541745156049728}, {"id": 357, "seek": 152236, "start": 1538.1599999999999, "end": 1542.56, "text": " They are Unix diffs plus tons of metadata to make it work.", "tokens": [51154, 814, 366, 1156, 970, 7593, 82, 1804, 9131, 295, 26603, 281, 652, 309, 589, 13, 51374], "temperature": 0.0, "avg_logprob": -0.1946877349506725, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.07541745156049728}, {"id": 358, "seek": 152236, "start": 1542.56, "end": 1547.6, "text": " And now they are partially ordered by their dependencies on other changes.", "tokens": [51374, 400, 586, 436, 366, 18886, 8866, 538, 641, 36606, 322, 661, 2962, 13, 51626], "temperature": 0.0, "avg_logprob": -0.1946877349506725, "compression_ratio": 1.6903553299492386, "no_speech_prob": 0.07541745156049728}, {"id": 359, "seek": 154760, "start": 1547.6, "end": 1552.52, "text": " This means that you cannot possibly work inside a file that has not been introduced", "tokens": [50364, 639, 1355, 300, 291, 2644, 6264, 589, 1854, 257, 3991, 300, 575, 406, 668, 7268, 50610], "temperature": 0.0, "avg_logprob": -0.2068199129665599, "compression_ratio": 1.7804054054054055, "no_speech_prob": 0.2686583399772644}, {"id": 360, "seek": 154760, "start": 1552.52, "end": 1556.9599999999998, "text": " in the repository yet, or you cannot edit a paragraph that doesn't exist yet.", "tokens": [50610, 294, 264, 25841, 1939, 11, 420, 291, 2644, 8129, 257, 18865, 300, 1177, 380, 2514, 1939, 13, 50832], "temperature": 0.0, "avg_logprob": -0.2068199129665599, "compression_ratio": 1.7804054054054055, "no_speech_prob": 0.2686583399772644}, {"id": 361, "seek": 154760, "start": 1556.9599999999998, "end": 1563.24, "text": " So not all changes are commutative, but changes that could be made independently are commutative.", "tokens": [50832, 407, 406, 439, 2962, 366, 800, 325, 1166, 11, 457, 2962, 300, 727, 312, 1027, 21761, 366, 800, 325, 1166, 13, 51146], "temperature": 0.0, "avg_logprob": -0.2068199129665599, "compression_ratio": 1.7804054054054055, "no_speech_prob": 0.2686583399772644}, {"id": 362, "seek": 154760, "start": 1563.24, "end": 1566.08, "text": " Chera picking, now this is the same as applying a patch.", "tokens": [51146, 761, 1663, 8867, 11, 586, 341, 307, 264, 912, 382, 9275, 257, 9972, 13, 51288], "temperature": 0.0, "avg_logprob": -0.2068199129665599, "compression_ratio": 1.7804054054054055, "no_speech_prob": 0.2686583399772644}, {"id": 363, "seek": 154760, "start": 1566.08, "end": 1569.4399999999998, "text": " We only have two commands in the system, apply a patch, unapply a patch, and it does", "tokens": [51288, 492, 787, 362, 732, 16901, 294, 264, 1185, 11, 3079, 257, 9972, 11, 517, 1746, 356, 257, 9972, 11, 293, 309, 775, 51456], "temperature": 0.0, "avg_logprob": -0.2068199129665599, "compression_ratio": 1.7804054054054055, "no_speech_prob": 0.2686583399772644}, {"id": 364, "seek": 154760, "start": 1569.4399999999998, "end": 1570.4399999999998, "text": " everything.", "tokens": [51456, 1203, 13, 51506], "temperature": 0.0, "avg_logprob": -0.2068199129665599, "compression_ratio": 1.7804054054054055, "no_speech_prob": 0.2686583399772644}, {"id": 365, "seek": 154760, "start": 1570.4399999999998, "end": 1572.7199999999998, "text": " So chair picking is just apply a patch.", "tokens": [51506, 407, 6090, 8867, 307, 445, 3079, 257, 9972, 13, 51620], "temperature": 0.0, "avg_logprob": -0.2068199129665599, "compression_ratio": 1.7804054054054055, "no_speech_prob": 0.2686583399772644}, {"id": 366, "seek": 154760, "start": 1572.7199999999998, "end": 1576.4399999999998, "text": " There's no need for git rararar, because conflicts are solved by changes.", "tokens": [51620, 821, 311, 572, 643, 337, 18331, 367, 289, 289, 289, 11, 570, 19807, 366, 13041, 538, 2962, 13, 51806], "temperature": 0.0, "avg_logprob": -0.2068199129665599, "compression_ratio": 1.7804054054054055, "no_speech_prob": 0.2686583399772644}, {"id": 367, "seek": 157644, "start": 1576.44, "end": 1577.44, "text": " You can chair pick changes.", "tokens": [50364, 509, 393, 6090, 1888, 2962, 13, 50414], "temperature": 0.0, "avg_logprob": -0.21273651123046874, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.11891266703605652}, {"id": 368, "seek": 157644, "start": 1577.44, "end": 1583.8, "text": " So you don't have to do any special hack or Ruby Goldberg machine to remember the conflict", "tokens": [50414, 407, 291, 500, 380, 362, 281, 360, 604, 2121, 10339, 420, 19907, 6731, 6873, 3479, 281, 1604, 264, 6596, 50732], "temperature": 0.0, "avg_logprob": -0.21273651123046874, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.11891266703605652}, {"id": 369, "seek": 157644, "start": 1583.8, "end": 1584.8, "text": " resolution or anything.", "tokens": [50732, 8669, 420, 1340, 13, 50782], "temperature": 0.0, "avg_logprob": -0.21273651123046874, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.11891266703605652}, {"id": 370, "seek": 157644, "start": 1584.8, "end": 1588.96, "text": " Like the conflict resolution is just a patch, and you can just send that to others, push", "tokens": [50782, 1743, 264, 6596, 8669, 307, 445, 257, 9972, 11, 293, 291, 393, 445, 2845, 300, 281, 2357, 11, 2944, 50990], "temperature": 0.0, "avg_logprob": -0.21273651123046874, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.11891266703605652}, {"id": 371, "seek": 157644, "start": 1588.96, "end": 1591.88, "text": " it, pull it, and that's it.", "tokens": [50990, 309, 11, 2235, 309, 11, 293, 300, 311, 309, 13, 51136], "temperature": 0.0, "avg_logprob": -0.21273651123046874, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.11891266703605652}, {"id": 372, "seek": 157644, "start": 1591.88, "end": 1594.8, "text": " Partial clones, monorepo sub modules, so they are easy.", "tokens": [51136, 4100, 831, 43803, 11, 1108, 418, 2259, 1422, 16679, 11, 370, 436, 366, 1858, 13, 51282], "temperature": 0.0, "avg_logprob": -0.21273651123046874, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.11891266703605652}, {"id": 373, "seek": 157644, "start": 1594.8, "end": 1596.8400000000001, "text": " As long as white patches are disallowed.", "tokens": [51282, 1018, 938, 382, 2418, 26531, 366, 717, 13253, 292, 13, 51384], "temperature": 0.0, "avg_logprob": -0.21273651123046874, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.11891266703605652}, {"id": 374, "seek": 157644, "start": 1596.8400000000001, "end": 1603.0, "text": " So if you have a patch that just does some formatting across your giant monorepo, then", "tokens": [51384, 407, 498, 291, 362, 257, 9972, 300, 445, 775, 512, 39366, 2108, 428, 7410, 1108, 418, 2259, 11, 550, 51692], "temperature": 0.0, "avg_logprob": -0.21273651123046874, "compression_ratio": 1.7038461538461538, "no_speech_prob": 0.11891266703605652}, {"id": 375, "seek": 160300, "start": 1603.0, "end": 1607.08, "text": " you will have a problem, because this patch will probably have tons of dependencies, and", "tokens": [50364, 291, 486, 362, 257, 1154, 11, 570, 341, 9972, 486, 1391, 362, 9131, 295, 36606, 11, 293, 50568], "temperature": 0.0, "avg_logprob": -0.1744799127384108, "compression_ratio": 1.76890756302521, "no_speech_prob": 0.08217745274305344}, {"id": 376, "seek": 160300, "start": 1607.08, "end": 1609.92, "text": " you will end up pulling lots of dependencies into your repo.", "tokens": [50568, 291, 486, 917, 493, 8407, 3195, 295, 36606, 666, 428, 49040, 13, 50710], "temperature": 0.0, "avg_logprob": -0.1744799127384108, "compression_ratio": 1.76890756302521, "no_speech_prob": 0.08217745274305344}, {"id": 377, "seek": 160300, "start": 1609.92, "end": 1616.76, "text": " But if you're careful enough to fragment or to cut this patch into smaller pieces, then", "tokens": [50710, 583, 498, 291, 434, 5026, 1547, 281, 26424, 420, 281, 1723, 341, 9972, 666, 4356, 3755, 11, 550, 51052], "temperature": 0.0, "avg_logprob": -0.1744799127384108, "compression_ratio": 1.76890756302521, "no_speech_prob": 0.08217745274305344}, {"id": 378, "seek": 160300, "start": 1616.76, "end": 1621.08, "text": " everything becomes easy, because you can just pull the patches that are relative to a tiny", "tokens": [51052, 1203, 3643, 1858, 11, 570, 291, 393, 445, 2235, 264, 26531, 300, 366, 4972, 281, 257, 5870, 51268], "temperature": 0.0, "avg_logprob": -0.1744799127384108, "compression_ratio": 1.76890756302521, "no_speech_prob": 0.08217745274305344}, {"id": 379, "seek": 160300, "start": 1621.08, "end": 1628.52, "text": " part of your repository, or your giant monorepo, and it just works because of commutativity.", "tokens": [51268, 644, 295, 428, 25841, 11, 420, 428, 7410, 1108, 418, 2259, 11, 293, 309, 445, 1985, 570, 295, 800, 325, 30142, 13, 51640], "temperature": 0.0, "avg_logprob": -0.1744799127384108, "compression_ratio": 1.76890756302521, "no_speech_prob": 0.08217745274305344}, {"id": 380, "seek": 162852, "start": 1628.52, "end": 1634.52, "text": " Because all the patches you produce locally by working, they do, they necessarily commute", "tokens": [50364, 1436, 439, 264, 26531, 291, 5258, 16143, 538, 1364, 11, 436, 360, 11, 436, 4725, 800, 1169, 50664], "temperature": 0.0, "avg_logprob": -0.13727497432542884, "compression_ratio": 1.7110266159695817, "no_speech_prob": 0.23078086972236633}, {"id": 381, "seek": 162852, "start": 1634.52, "end": 1639.12, "text": " with all the patches that were produced by your co-authors and other parts of the monorepo.", "tokens": [50664, 365, 439, 264, 26531, 300, 645, 7126, 538, 428, 598, 12, 40198, 830, 293, 661, 3166, 295, 264, 1108, 418, 2259, 13, 50894], "temperature": 0.0, "avg_logprob": -0.13727497432542884, "compression_ratio": 1.7110266159695817, "no_speech_prob": 0.23078086972236633}, {"id": 382, "seek": 162852, "start": 1639.12, "end": 1643.96, "text": " So after your day of work, when you push your patches to the server, others do the same,", "tokens": [50894, 407, 934, 428, 786, 295, 589, 11, 562, 291, 2944, 428, 26531, 281, 264, 7154, 11, 2357, 360, 264, 912, 11, 51136], "temperature": 0.0, "avg_logprob": -0.13727497432542884, "compression_ratio": 1.7110266159695817, "no_speech_prob": 0.23078086972236633}, {"id": 383, "seek": 162852, "start": 1643.96, "end": 1648.52, "text": " but it doesn't matter, because it gives the same results in the end.", "tokens": [51136, 457, 309, 1177, 380, 1871, 11, 570, 309, 2709, 264, 912, 3542, 294, 264, 917, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13727497432542884, "compression_ratio": 1.7110266159695817, "no_speech_prob": 0.23078086972236633}, {"id": 384, "seek": 162852, "start": 1648.52, "end": 1654.92, "text": " For large files, so I've showed you a graph in the previous slides that didn't talk at", "tokens": [51364, 1171, 2416, 7098, 11, 370, 286, 600, 4712, 291, 257, 4295, 294, 264, 3894, 9788, 300, 994, 380, 751, 412, 51684], "temperature": 0.0, "avg_logprob": -0.13727497432542884, "compression_ratio": 1.7110266159695817, "no_speech_prob": 0.23078086972236633}, {"id": 385, "seek": 162852, "start": 1654.92, "end": 1656.24, "text": " all about the contents.", "tokens": [51684, 439, 466, 264, 15768, 13, 51750], "temperature": 0.0, "avg_logprob": -0.13727497432542884, "compression_ratio": 1.7110266159695817, "no_speech_prob": 0.23078086972236633}, {"id": 386, "seek": 165624, "start": 1656.24, "end": 1664.56, "text": " So the contents is something super important, obviously, but it's only handled during Diff,", "tokens": [50364, 407, 264, 15768, 307, 746, 1687, 1021, 11, 2745, 11, 457, 309, 311, 787, 18033, 1830, 413, 3661, 11, 50780], "temperature": 0.0, "avg_logprob": -0.2031024239280007, "compression_ratio": 1.7231404958677685, "no_speech_prob": 0.02076324075460434}, {"id": 387, "seek": 165624, "start": 1664.56, "end": 1671.44, "text": " and it is not, like you don't apply a patch, the patch themselves, they are not applied,", "tokens": [50780, 293, 309, 307, 406, 11, 411, 291, 500, 380, 3079, 257, 9972, 11, 264, 9972, 2969, 11, 436, 366, 406, 6456, 11, 51124], "temperature": 0.0, "avg_logprob": -0.2031024239280007, "compression_ratio": 1.7231404958677685, "no_speech_prob": 0.02076324075460434}, {"id": 388, "seek": 165624, "start": 1671.44, "end": 1674.64, "text": " they don't use the contents of the vertices in order to be applied.", "tokens": [51124, 436, 500, 380, 764, 264, 15768, 295, 264, 32053, 294, 1668, 281, 312, 6456, 13, 51284], "temperature": 0.0, "avg_logprob": -0.2031024239280007, "compression_ratio": 1.7231404958677685, "no_speech_prob": 0.02076324075460434}, {"id": 389, "seek": 165624, "start": 1674.64, "end": 1678.4, "text": " You can apply a patch by just saying, well, I just added this file, it has like one terabyte", "tokens": [51284, 509, 393, 3079, 257, 9972, 538, 445, 1566, 11, 731, 11, 286, 445, 3869, 341, 3991, 11, 309, 575, 411, 472, 1796, 34529, 51472], "temperature": 0.0, "avg_logprob": -0.2031024239280007, "compression_ratio": 1.7231404958677685, "no_speech_prob": 0.02076324075460434}, {"id": 390, "seek": 165624, "start": 1678.4, "end": 1684.32, "text": " of data, and that's it, and you can find the data in some change somewhere.", "tokens": [51472, 295, 1412, 11, 293, 300, 311, 309, 11, 293, 291, 393, 915, 264, 1412, 294, 512, 1319, 4079, 13, 51768], "temperature": 0.0, "avg_logprob": -0.2031024239280007, "compression_ratio": 1.7231404958677685, "no_speech_prob": 0.02076324075460434}, {"id": 391, "seek": 168432, "start": 1684.32, "end": 1690.24, "text": " And so a nice consequence of that is that for large files, you can apply a patch without", "tokens": [50364, 400, 370, 257, 1481, 18326, 295, 300, 307, 300, 337, 2416, 7098, 11, 291, 393, 3079, 257, 9972, 1553, 50660], "temperature": 0.0, "avg_logprob": -0.18655603238851717, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.047284454107284546}, {"id": 392, "seek": 168432, "start": 1690.24, "end": 1692.08, "text": " knowing what's in the patch.", "tokens": [50660, 5276, 437, 311, 294, 264, 9972, 13, 50752], "temperature": 0.0, "avg_logprob": -0.18655603238851717, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.047284454107284546}, {"id": 393, "seek": 168432, "start": 1692.08, "end": 1694.76, "text": " You can fetch the rest later.", "tokens": [50752, 509, 393, 23673, 264, 1472, 1780, 13, 50886], "temperature": 0.0, "avg_logprob": -0.18655603238851717, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.047284454107284546}, {"id": 394, "seek": 168432, "start": 1694.76, "end": 1699.32, "text": " And so if you're running a video game shop, for example, and you have artists pushing", "tokens": [50886, 400, 370, 498, 291, 434, 2614, 257, 960, 1216, 3945, 11, 337, 1365, 11, 293, 291, 362, 6910, 7380, 51114], "temperature": 0.0, "avg_logprob": -0.18655603238851717, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.047284454107284546}, {"id": 395, "seek": 168432, "start": 1699.32, "end": 1704.3999999999999, "text": " assets, large binary assets all day, then at the end of the day, when you want to just", "tokens": [51114, 9769, 11, 2416, 17434, 9769, 439, 786, 11, 550, 412, 264, 917, 295, 264, 786, 11, 562, 291, 528, 281, 445, 51368], "temperature": 0.0, "avg_logprob": -0.18655603238851717, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.047284454107284546}, {"id": 396, "seek": 168432, "start": 1704.3999999999999, "end": 1708.76, "text": " pull everything, you don't have to pull all the intermediate versions.", "tokens": [51368, 2235, 1203, 11, 291, 500, 380, 362, 281, 2235, 439, 264, 19376, 9606, 13, 51586], "temperature": 0.0, "avg_logprob": -0.18655603238851717, "compression_ratio": 1.649789029535865, "no_speech_prob": 0.047284454107284546}, {"id": 397, "seek": 170876, "start": 1708.76, "end": 1714.72, "text": " You pull just the operational part of these versions, saying, well, I added one gigabyte", "tokens": [50364, 509, 2235, 445, 264, 16607, 644, 295, 613, 9606, 11, 1566, 11, 731, 11, 286, 3869, 472, 8741, 34529, 50662], "temperature": 0.0, "avg_logprob": -0.19153753649286864, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.3594105541706085}, {"id": 398, "seek": 170876, "start": 1714.72, "end": 1720.04, "text": " here, and now I replace that gigabyte with another one, and then yet with another one,", "tokens": [50662, 510, 11, 293, 586, 286, 7406, 300, 8741, 34529, 365, 1071, 472, 11, 293, 550, 1939, 365, 1071, 472, 11, 50928], "temperature": 0.0, "avg_logprob": -0.19153753649286864, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.3594105541706085}, {"id": 399, "seek": 170876, "start": 1720.04, "end": 1723.28, "text": " and maybe you have 10 versions of your binary asset during the day.", "tokens": [50928, 293, 1310, 291, 362, 1266, 9606, 295, 428, 17434, 11999, 1830, 264, 786, 13, 51090], "temperature": 0.0, "avg_logprob": -0.19153753649286864, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.3594105541706085}, {"id": 400, "seek": 170876, "start": 1723.28, "end": 1727.2, "text": " But at the end of the day, the only thing you know is that, yeah, you had 10 versions,", "tokens": [51090, 583, 412, 264, 917, 295, 264, 786, 11, 264, 787, 551, 291, 458, 307, 300, 11, 1338, 11, 291, 632, 1266, 9606, 11, 51286], "temperature": 0.0, "avg_logprob": -0.19153753649286864, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.3594105541706085}, {"id": 401, "seek": 170876, "start": 1727.2, "end": 1730.4, "text": " there's only one still alive, just pull that one.", "tokens": [51286, 456, 311, 787, 472, 920, 5465, 11, 445, 2235, 300, 472, 13, 51446], "temperature": 0.0, "avg_logprob": -0.19153753649286864, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.3594105541706085}, {"id": 402, "seek": 170876, "start": 1730.4, "end": 1735.8799999999999, "text": " So there's no special hack or LFS needed, you're just using patches.", "tokens": [51446, 407, 456, 311, 572, 2121, 10339, 420, 441, 29318, 2978, 11, 291, 434, 445, 1228, 26531, 13, 51720], "temperature": 0.0, "avg_logprob": -0.19153753649286864, "compression_ratio": 1.726923076923077, "no_speech_prob": 0.3594105541706085}, {"id": 403, "seek": 173588, "start": 1736.88, "end": 1738.88, "text": " All right.", "tokens": [50414, 1057, 558, 13, 50514], "temperature": 0.0, "avg_logprob": -0.26947296058738623, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.02177034132182598}, {"id": 404, "seek": 173588, "start": 1738.88, "end": 1743.4, "text": " Now onto some implementation things.", "tokens": [50514, 823, 3911, 512, 11420, 721, 13, 50740], "temperature": 0.0, "avg_logprob": -0.26947296058738623, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.02177034132182598}, {"id": 405, "seek": 173588, "start": 1743.4, "end": 1746.4, "text": " So there's a lot of things to say about the implementation.", "tokens": [50740, 407, 456, 311, 257, 688, 295, 721, 281, 584, 466, 264, 11420, 13, 50890], "temperature": 0.0, "avg_logprob": -0.26947296058738623, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.02177034132182598}, {"id": 406, "seek": 173588, "start": 1746.4, "end": 1752.3600000000001, "text": " The project is entirely written in Rust, or mostly written in Rust, I'd say.", "tokens": [50890, 440, 1716, 307, 7696, 3720, 294, 34952, 11, 420, 5240, 3720, 294, 34952, 11, 286, 1116, 584, 13, 51188], "temperature": 0.0, "avg_logprob": -0.26947296058738623, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.02177034132182598}, {"id": 407, "seek": 173588, "start": 1752.3600000000001, "end": 1757.88, "text": " So I won't cover all the details about how it works and our implementation, because", "tokens": [51188, 407, 286, 1582, 380, 2060, 439, 264, 4365, 466, 577, 309, 1985, 293, 527, 11420, 11, 570, 51464], "temperature": 0.0, "avg_logprob": -0.26947296058738623, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.02177034132182598}, {"id": 408, "seek": 173588, "start": 1757.88, "end": 1763.72, "text": " there would be, that would take an entire day of talks, and I won't do that.", "tokens": [51464, 456, 576, 312, 11, 300, 576, 747, 364, 2302, 786, 295, 6686, 11, 293, 286, 1582, 380, 360, 300, 13, 51756], "temperature": 0.0, "avg_logprob": -0.26947296058738623, "compression_ratio": 1.7164179104477613, "no_speech_prob": 0.02177034132182598}, {"id": 409, "seek": 176372, "start": 1763.72, "end": 1768.4, "text": " But I'll just give you some cool things that I like about our implementation.", "tokens": [50364, 583, 286, 603, 445, 976, 291, 512, 1627, 721, 300, 286, 411, 466, 527, 11420, 13, 50598], "temperature": 0.0, "avg_logprob": -0.15304721832275392, "compression_ratio": 1.525, "no_speech_prob": 0.014577179215848446}, {"id": 410, "seek": 176372, "start": 1768.4, "end": 1776.08, "text": " So the first challenge is that we have really large graphs on disk, and we obviously don't", "tokens": [50598, 407, 264, 700, 3430, 307, 300, 321, 362, 534, 2416, 24877, 322, 12355, 11, 293, 321, 2745, 500, 380, 50982], "temperature": 0.0, "avg_logprob": -0.15304721832275392, "compression_ratio": 1.525, "no_speech_prob": 0.014577179215848446}, {"id": 411, "seek": 176372, "start": 1776.08, "end": 1783.24, "text": " want to load them up entirely in memory in order to edit them.", "tokens": [50982, 528, 281, 3677, 552, 493, 7696, 294, 4675, 294, 1668, 281, 8129, 552, 13, 51340], "temperature": 0.0, "avg_logprob": -0.15304721832275392, "compression_ratio": 1.525, "no_speech_prob": 0.014577179215848446}, {"id": 412, "seek": 176372, "start": 1783.24, "end": 1789.08, "text": " We want to be able to just work directly with the on disk data structure.", "tokens": [51340, 492, 528, 281, 312, 1075, 281, 445, 589, 3838, 365, 264, 322, 12355, 1412, 3877, 13, 51632], "temperature": 0.0, "avg_logprob": -0.15304721832275392, "compression_ratio": 1.525, "no_speech_prob": 0.014577179215848446}, {"id": 413, "seek": 178908, "start": 1789.08, "end": 1794.08, "text": " So we want to store edges in a key value store, because that's an easy way to do that kind", "tokens": [50364, 407, 321, 528, 281, 3531, 8819, 294, 257, 2141, 2158, 3531, 11, 570, 300, 311, 364, 1858, 636, 281, 360, 300, 733, 50614], "temperature": 0.0, "avg_logprob": -0.20350515192205257, "compression_ratio": 1.7773109243697478, "no_speech_prob": 0.0074887629598379135}, {"id": 414, "seek": 178908, "start": 1794.08, "end": 1795.08, "text": " of stuff.", "tokens": [50614, 295, 1507, 13, 50664], "temperature": 0.0, "avg_logprob": -0.20350515192205257, "compression_ratio": 1.7773109243697478, "no_speech_prob": 0.0074887629598379135}, {"id": 415, "seek": 178908, "start": 1795.08, "end": 1800.32, "text": " We want transactions, because we're actually inventing a new format, data format, so we", "tokens": [50664, 492, 528, 16856, 11, 570, 321, 434, 767, 7962, 278, 257, 777, 7877, 11, 1412, 7877, 11, 370, 321, 50926], "temperature": 0.0, "avg_logprob": -0.20350515192205257, "compression_ratio": 1.7773109243697478, "no_speech_prob": 0.0074887629598379135}, {"id": 416, "seek": 178908, "start": 1800.32, "end": 1806.36, "text": " absolutely want assets, properties, we want like full transactionality, we want passive", "tokens": [50926, 3122, 528, 9769, 11, 7221, 11, 321, 528, 411, 1577, 46688, 1966, 507, 11, 321, 528, 14975, 51228], "temperature": 0.0, "avg_logprob": -0.20350515192205257, "compression_ratio": 1.7773109243697478, "no_speech_prob": 0.0074887629598379135}, {"id": 417, "seek": 178908, "start": 1806.36, "end": 1808.9199999999998, "text": " crash safety, so all these things.", "tokens": [51228, 8252, 4514, 11, 370, 439, 613, 721, 13, 51356], "temperature": 0.0, "avg_logprob": -0.20350515192205257, "compression_ratio": 1.7773109243697478, "no_speech_prob": 0.0074887629598379135}, {"id": 418, "seek": 178908, "start": 1808.9199999999998, "end": 1809.9199999999998, "text": " And we want branches.", "tokens": [51356, 400, 321, 528, 14770, 13, 51406], "temperature": 0.0, "avg_logprob": -0.20350515192205257, "compression_ratio": 1.7773109243697478, "no_speech_prob": 0.0074887629598379135}, {"id": 419, "seek": 178908, "start": 1809.9199999999998, "end": 1815.56, "text": " So we want to be able to take a key value store and just fork it without copying a single", "tokens": [51406, 407, 321, 528, 281, 312, 1075, 281, 747, 257, 2141, 2158, 3531, 293, 445, 17716, 309, 1553, 27976, 257, 2167, 51688], "temperature": 0.0, "avg_logprob": -0.20350515192205257, "compression_ratio": 1.7773109243697478, "no_speech_prob": 0.0074887629598379135}, {"id": 420, "seek": 181556, "start": 1815.56, "end": 1818.2, "text": " byte, because it would take too long.", "tokens": [50364, 40846, 11, 570, 309, 576, 747, 886, 938, 13, 50496], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 421, "seek": 181556, "start": 1818.2, "end": 1822.2, "text": " It would take a time linear in the size of history, and we don't want that.", "tokens": [50496, 467, 576, 747, 257, 565, 8213, 294, 264, 2744, 295, 2503, 11, 293, 321, 500, 380, 528, 300, 13, 50696], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 422, "seek": 181556, "start": 1822.2, "end": 1826.08, "text": " So there's no key value store, there was no key value store when we started that would", "tokens": [50696, 407, 456, 311, 572, 2141, 2158, 3531, 11, 456, 390, 572, 2141, 2158, 3531, 562, 321, 1409, 300, 576, 50890], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 423, "seek": 181556, "start": 1826.08, "end": 1829.04, "text": " do that, especially the branching feature.", "tokens": [50890, 360, 300, 11, 2318, 264, 9819, 278, 4111, 13, 51038], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 424, "seek": 181556, "start": 1829.04, "end": 1831.96, "text": " So we had to write, I had to write one.", "tokens": [51038, 407, 321, 632, 281, 2464, 11, 286, 632, 281, 2464, 472, 13, 51184], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 425, "seek": 181556, "start": 1831.96, "end": 1835.12, "text": " It's called Sanakiria, which means dictionary and finish.", "tokens": [51184, 467, 311, 1219, 5271, 514, 347, 654, 11, 597, 1355, 25890, 293, 2413, 13, 51342], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 426, "seek": 181556, "start": 1835.12, "end": 1839.28, "text": " It's a non-disk transactional key value store, but it's actually not just a key value store,", "tokens": [51342, 467, 311, 257, 2107, 12, 67, 7797, 46688, 1966, 2141, 2158, 3531, 11, 457, 309, 311, 767, 406, 445, 257, 2141, 2158, 3531, 11, 51550], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 427, "seek": 181556, "start": 1839.28, "end": 1841.08, "text": " it's something really generic.", "tokens": [51550, 309, 311, 746, 534, 19577, 13, 51640], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 428, "seek": 181556, "start": 1841.08, "end": 1843.8799999999999, "text": " It's an ACID block allocator in a file, really.", "tokens": [51640, 467, 311, 364, 8157, 2777, 3461, 12660, 1639, 294, 257, 3991, 11, 534, 13, 51780], "temperature": 0.0, "avg_logprob": -0.19833380555453367, "compression_ratio": 1.832142857142857, "no_speech_prob": 0.09198267757892609}, {"id": 429, "seek": 184388, "start": 1843.88, "end": 1849.2800000000002, "text": " And that block allocator uses a key value store, uses B trees to allocate memory, but", "tokens": [50364, 400, 300, 3461, 12660, 1639, 4960, 257, 2141, 2158, 3531, 11, 4960, 363, 5852, 281, 35713, 4675, 11, 457, 50634], "temperature": 0.0, "avg_logprob": -0.1519997847707648, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.0034051057882606983}, {"id": 430, "seek": 184388, "start": 1849.2800000000002, "end": 1854.2, "text": " also the B trees themselves use the allocator to do their job.", "tokens": [50634, 611, 264, 363, 5852, 2969, 764, 264, 12660, 1639, 281, 360, 641, 1691, 13, 50880], "temperature": 0.0, "avg_logprob": -0.1519997847707648, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.0034051057882606983}, {"id": 431, "seek": 184388, "start": 1854.2, "end": 1859.16, "text": " So that's why the minimal data structure we can have is B trees, but also you can write", "tokens": [50880, 407, 300, 311, 983, 264, 13206, 1412, 3877, 321, 393, 362, 307, 363, 5852, 11, 457, 611, 291, 393, 2464, 51128], "temperature": 0.0, "avg_logprob": -0.1519997847707648, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.0034051057882606983}, {"id": 432, "seek": 184388, "start": 1859.16, "end": 1863.64, "text": " all sorts of data structures with Sanakiria just by using the allocator.", "tokens": [51128, 439, 7527, 295, 1412, 9227, 365, 5271, 514, 347, 654, 445, 538, 1228, 264, 12660, 1639, 13, 51352], "temperature": 0.0, "avg_logprob": -0.1519997847707648, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.0034051057882606983}, {"id": 433, "seek": 184388, "start": 1863.64, "end": 1868.8000000000002, "text": " We have crash safety using referential transparency in copy and write.", "tokens": [51352, 492, 362, 8252, 4514, 1228, 2864, 2549, 17131, 294, 5055, 293, 2464, 13, 51610], "temperature": 0.0, "avg_logprob": -0.1519997847707648, "compression_ratio": 1.7511520737327189, "no_speech_prob": 0.0034051057882606983}, {"id": 434, "seek": 186880, "start": 1868.8, "end": 1876.8, "text": " The initial goal was actually done successfully, completed successfully, because the tables", "tokens": [50364, 440, 5883, 3387, 390, 767, 1096, 10727, 11, 7365, 10727, 11, 570, 264, 8020, 50764], "temperature": 0.0, "avg_logprob": -0.17766309291758436, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.07481701672077179}, {"id": 435, "seek": 186880, "start": 1876.8, "end": 1882.9199999999998, "text": " are forkable in big O of log n, so it's probably completely useless for a general key value", "tokens": [50764, 366, 17716, 712, 294, 955, 422, 295, 3565, 297, 11, 370, 309, 311, 1391, 2584, 14115, 337, 257, 2674, 2141, 2158, 51070], "temperature": 0.0, "avg_logprob": -0.17766309291758436, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.07481701672077179}, {"id": 436, "seek": 186880, "start": 1882.9199999999998, "end": 1883.9199999999998, "text": " store.", "tokens": [51070, 3531, 13, 51120], "temperature": 0.0, "avg_logprob": -0.17766309291758436, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.07481701672077179}, {"id": 437, "seek": 186880, "start": 1883.9199999999998, "end": 1887.8, "text": " Then in our case, branches were really needed, so we had to do it.", "tokens": [51120, 1396, 294, 527, 1389, 11, 14770, 645, 534, 2978, 11, 370, 321, 632, 281, 360, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17766309291758436, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.07481701672077179}, {"id": 438, "seek": 186880, "start": 1887.8, "end": 1894.32, "text": " So forkable in big O of log n, a logarithmic time in the total size of the total number", "tokens": [51314, 407, 17716, 712, 294, 955, 422, 295, 3565, 297, 11, 257, 41473, 355, 13195, 565, 294, 264, 3217, 2744, 295, 264, 3217, 1230, 51640], "temperature": 0.0, "avg_logprob": -0.17766309291758436, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.07481701672077179}, {"id": 439, "seek": 186880, "start": 1894.32, "end": 1895.32, "text": " of keys.", "tokens": [51640, 295, 9317, 13, 51690], "temperature": 0.0, "avg_logprob": -0.17766309291758436, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.07481701672077179}, {"id": 440, "seek": 189532, "start": 1895.56, "end": 1903.52, "text": " As written in Rust, while it started in Rust back in 2015 or something, Rust was still a", "tokens": [50376, 1018, 3720, 294, 34952, 11, 1339, 309, 1409, 294, 34952, 646, 294, 7546, 420, 746, 11, 34952, 390, 920, 257, 50774], "temperature": 0.0, "avg_logprob": -0.30439141217400045, "compression_ratio": 1.5660377358490567, "no_speech_prob": 0.008404405787587166}, {"id": 441, "seek": 189532, "start": 1903.52, "end": 1906.24, "text": " bit younger than today.", "tokens": [50774, 857, 7037, 813, 965, 13, 50910], "temperature": 0.0, "avg_logprob": -0.30439141217400045, "compression_ratio": 1.5660377358490567, "no_speech_prob": 0.008404405787587166}, {"id": 442, "seek": 189532, "start": 1906.24, "end": 1914.1599999999999, "text": " And the cool bit about that is that it allows you to access generic Rust types directly", "tokens": [50910, 400, 264, 1627, 857, 466, 300, 307, 300, 309, 4045, 291, 281, 2105, 19577, 34952, 3467, 3838, 51306], "temperature": 0.0, "avg_logprob": -0.30439141217400045, "compression_ratio": 1.5660377358490567, "no_speech_prob": 0.008404405787587166}, {"id": 443, "seek": 189532, "start": 1914.1599999999999, "end": 1917.96, "text": " as pointers into, like, storing the file.", "tokens": [51306, 382, 44548, 666, 11, 411, 11, 26085, 264, 3991, 13, 51496], "temperature": 0.0, "avg_logprob": -0.30439141217400045, "compression_ratio": 1.5660377358490567, "no_speech_prob": 0.008404405787587166}, {"id": 444, "seek": 189532, "start": 1917.96, "end": 1924.48, "text": " It is way too generic, way too many things, meaning that the APIs is horrible to use, but", "tokens": [51496, 467, 307, 636, 886, 19577, 11, 636, 886, 867, 721, 11, 3620, 300, 264, 21445, 307, 9263, 281, 764, 11, 457, 51822], "temperature": 0.0, "avg_logprob": -0.30439141217400045, "compression_ratio": 1.5660377358490567, "no_speech_prob": 0.008404405787587166}, {"id": 445, "seek": 192448, "start": 1924.64, "end": 1930.24, "text": " there's a good consequence of the generality is that it's even generic in the underlying", "tokens": [50372, 456, 311, 257, 665, 18326, 295, 264, 1337, 1860, 307, 300, 309, 311, 754, 19577, 294, 264, 14217, 50652], "temperature": 0.0, "avg_logprob": -0.24316575609404464, "compression_ratio": 1.6398467432950192, "no_speech_prob": 0.0712331235408783}, {"id": 446, "seek": 192448, "start": 1930.24, "end": 1931.24, "text": " storage layer.", "tokens": [50652, 6725, 4583, 13, 50702], "temperature": 0.0, "avg_logprob": -0.24316575609404464, "compression_ratio": 1.6398467432950192, "no_speech_prob": 0.0712331235408783}, {"id": 447, "seek": 192448, "start": 1931.24, "end": 1935.88, "text": " For example, we can use it on memory map file, which we do all the time in Pichol, but we", "tokens": [50702, 1171, 1365, 11, 321, 393, 764, 309, 322, 4675, 4471, 3991, 11, 597, 321, 360, 439, 264, 565, 294, 430, 480, 401, 11, 457, 321, 50934], "temperature": 0.0, "avg_logprob": -0.24316575609404464, "compression_ratio": 1.6398467432950192, "no_speech_prob": 0.0712331235408783}, {"id": 448, "seek": 192448, "start": 1935.88, "end": 1939.28, "text": " can also do it in Z standard compressed files.", "tokens": [50934, 393, 611, 360, 309, 294, 1176, 3832, 30353, 7098, 13, 51104], "temperature": 0.0, "avg_logprob": -0.24316575609404464, "compression_ratio": 1.6398467432950192, "no_speech_prob": 0.0712331235408783}, {"id": 449, "seek": 192448, "start": 1939.28, "end": 1943.56, "text": " I've also used it not super successfully, but the prototype worked on Cloudflare key", "tokens": [51104, 286, 600, 611, 1143, 309, 406, 1687, 10727, 11, 457, 264, 19475, 2732, 322, 8061, 3423, 543, 2141, 51318], "temperature": 0.0, "avg_logprob": -0.24316575609404464, "compression_ratio": 1.6398467432950192, "no_speech_prob": 0.0712331235408783}, {"id": 450, "seek": 192448, "start": 1943.56, "end": 1949.92, "text": " values, Cloudflare KV, so storing, like, building a key value store on top of another key value", "tokens": [51318, 4190, 11, 8061, 3423, 543, 591, 53, 11, 370, 26085, 11, 411, 11, 2390, 257, 2141, 2158, 3531, 322, 1192, 295, 1071, 2141, 2158, 51636], "temperature": 0.0, "avg_logprob": -0.24316575609404464, "compression_ratio": 1.6398467432950192, "no_speech_prob": 0.0712331235408783}, {"id": 451, "seek": 192448, "start": 1949.92, "end": 1950.92, "text": " store.", "tokens": [51636, 3531, 13, 51686], "temperature": 0.0, "avg_logprob": -0.24316575609404464, "compression_ratio": 1.6398467432950192, "no_speech_prob": 0.0712331235408783}, {"id": 452, "seek": 195092, "start": 1950.92, "end": 1961.76, "text": " The cool thing about that is that, you can also use it to build ropes, for example, or", "tokens": [50364, 440, 1627, 551, 466, 300, 307, 300, 11, 291, 393, 611, 764, 309, 281, 1322, 32964, 11, 337, 1365, 11, 420, 50906], "temperature": 0.0, "avg_logprob": -0.433423205784389, "compression_ratio": 1.453551912568306, "no_speech_prob": 0.0038337446749210358}, {"id": 453, "seek": 195092, "start": 1961.76, "end": 1966.96, "text": " Patricia trees or things like that, or vector search indexes.", "tokens": [50906, 34307, 5852, 420, 721, 411, 300, 11, 420, 8062, 3164, 8186, 279, 13, 51166], "temperature": 0.0, "avg_logprob": -0.433423205784389, "compression_ratio": 1.453551912568306, "no_speech_prob": 0.0038337446749210358}, {"id": 454, "seek": 195092, "start": 1966.96, "end": 1973.2, "text": " So I thought that implementing this in Cloudflare KV was interesting, but it's actually too", "tokens": [51166, 407, 286, 1194, 300, 18114, 341, 294, 8061, 3423, 543, 591, 53, 390, 1880, 11, 457, 309, 311, 767, 886, 51478], "temperature": 0.0, "avg_logprob": -0.433423205784389, "compression_ratio": 1.453551912568306, "no_speech_prob": 0.0038337446749210358}, {"id": 455, "seek": 195092, "start": 1973.2, "end": 1975.6000000000001, "text": " slow to be really useful.", "tokens": [51478, 2964, 281, 312, 534, 4420, 13, 51598], "temperature": 0.0, "avg_logprob": -0.433423205784389, "compression_ratio": 1.453551912568306, "no_speech_prob": 0.0038337446749210358}, {"id": 456, "seek": 197560, "start": 1976.6, "end": 1978.6, "text": " All right.", "tokens": [50414, 1057, 558, 13, 50514], "temperature": 0.0, "avg_logprob": -0.32086032560501976, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.0077501339837908745}, {"id": 457, "seek": 197560, "start": 1978.6, "end": 1984.04, "text": " A very unexpected consequence of that is that Senacilia is the fastest key value store we've", "tokens": [50514, 316, 588, 13106, 18326, 295, 300, 307, 300, 3862, 326, 24169, 307, 264, 14573, 2141, 2158, 3531, 321, 600, 50786], "temperature": 0.0, "avg_logprob": -0.32086032560501976, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.0077501339837908745}, {"id": 458, "seek": 197560, "start": 1984.04, "end": 1991.4399999999998, "text": " tested and actually beats LMDB, which is the fastest C key value store by a pretty wide", "tokens": [50786, 8246, 293, 767, 16447, 46529, 27735, 11, 597, 307, 264, 14573, 383, 2141, 2158, 3531, 538, 257, 1238, 4874, 51156], "temperature": 0.0, "avg_logprob": -0.32086032560501976, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.0077501339837908745}, {"id": 459, "seek": 197560, "start": 1991.4399999999998, "end": 1992.4399999999998, "text": " margin.", "tokens": [51156, 10270, 13, 51206], "temperature": 0.0, "avg_logprob": -0.32086032560501976, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.0077501339837908745}, {"id": 460, "seek": 197560, "start": 1992.4399999999998, "end": 1999.04, "text": " In these graphs, I've included, actually, the coolest project ever in this space, which", "tokens": [51206, 682, 613, 24877, 11, 286, 600, 5556, 11, 767, 11, 264, 22013, 1716, 1562, 294, 341, 1901, 11, 597, 51536], "temperature": 0.0, "avg_logprob": -0.32086032560501976, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.0077501339837908745}, {"id": 461, "seek": 197560, "start": 1999.04, "end": 2001.76, "text": " is not Senacilia, it's Sled.", "tokens": [51536, 307, 406, 3862, 326, 24169, 11, 309, 311, 318, 1493, 13, 51672], "temperature": 0.0, "avg_logprob": -0.32086032560501976, "compression_ratio": 1.572139303482587, "no_speech_prob": 0.0077501339837908745}, {"id": 462, "seek": 200176, "start": 2001.76, "end": 2006.04, "text": " Sled is a really fantastic key value store that allows you to have multiple concurrent", "tokens": [50364, 318, 1493, 307, 257, 534, 5456, 2141, 2158, 3531, 300, 4045, 291, 281, 362, 3866, 37702, 50578], "temperature": 0.0, "avg_logprob": -0.21157954289362982, "compression_ratio": 1.4936170212765958, "no_speech_prob": 0.08941007405519485}, {"id": 463, "seek": 200176, "start": 2006.04, "end": 2012.48, "text": " writers using really, really cool data, like modern database technology and so on.", "tokens": [50578, 13491, 1228, 534, 11, 534, 1627, 1412, 11, 411, 4363, 8149, 2899, 293, 370, 322, 13, 50900], "temperature": 0.0, "avg_logprob": -0.21157954289362982, "compression_ratio": 1.4936170212765958, "no_speech_prob": 0.08941007405519485}, {"id": 464, "seek": 200176, "start": 2012.48, "end": 2017.4, "text": " Senacilia is much more modest in its scope, but it's also way faster.", "tokens": [50900, 3862, 326, 24169, 307, 709, 544, 25403, 294, 1080, 11923, 11, 457, 309, 311, 611, 636, 4663, 13, 51146], "temperature": 0.0, "avg_logprob": -0.21157954289362982, "compression_ratio": 1.4936170212765958, "no_speech_prob": 0.08941007405519485}, {"id": 465, "seek": 200176, "start": 2017.4, "end": 2023.84, "text": " So if we remove Sled, which is more on the experimental side, we can see that we beat", "tokens": [51146, 407, 498, 321, 4159, 318, 1493, 11, 597, 307, 544, 322, 264, 17069, 1252, 11, 321, 393, 536, 300, 321, 4224, 51468], "temperature": 0.0, "avg_logprob": -0.21157954289362982, "compression_ratio": 1.4936170212765958, "no_speech_prob": 0.08941007405519485}, {"id": 466, "seek": 200176, "start": 2023.84, "end": 2027.12, "text": " LMDB by 50% or something.", "tokens": [51468, 46529, 27735, 538, 2625, 4, 420, 746, 13, 51632], "temperature": 0.0, "avg_logprob": -0.21157954289362982, "compression_ratio": 1.4936170212765958, "no_speech_prob": 0.08941007405519485}, {"id": 467, "seek": 202712, "start": 2028.0, "end": 2031.84, "text": " I've included the Rust standard B trees in these graphs.", "tokens": [50408, 286, 600, 5556, 264, 34952, 3832, 363, 5852, 294, 613, 24877, 13, 50600], "temperature": 0.0, "avg_logprob": -0.29092921302432107, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.0021076861303299665}, {"id": 468, "seek": 202712, "start": 2031.84, "end": 2033.4399999999998, "text": " They're the theoretical limit.", "tokens": [50600, 814, 434, 264, 20864, 4948, 13, 50680], "temperature": 0.0, "avg_logprob": -0.29092921302432107, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.0021076861303299665}, {"id": 469, "seek": 202712, "start": 2033.4399999999998, "end": 2036.8799999999999, "text": " You cannot go faster than that because they don't even store anything on disk.", "tokens": [50680, 509, 2644, 352, 4663, 813, 300, 570, 436, 500, 380, 754, 3531, 1340, 322, 12355, 13, 50852], "temperature": 0.0, "avg_logprob": -0.29092921302432107, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.0021076861303299665}, {"id": 470, "seek": 202712, "start": 2036.8799999999999, "end": 2040.2399999999998, "text": " We have to store stuff on disk, so we will be slower.", "tokens": [50852, 492, 362, 281, 3531, 1507, 322, 12355, 11, 370, 321, 486, 312, 14009, 13, 51020], "temperature": 0.0, "avg_logprob": -0.29092921302432107, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.0021076861303299665}, {"id": 471, "seek": 202712, "start": 2040.2399999999998, "end": 2042.2399999999998, "text": " Okay.", "tokens": [51020, 1033, 13, 51120], "temperature": 0.0, "avg_logprob": -0.29092921302432107, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.0021076861303299665}, {"id": 472, "seek": 202712, "start": 2042.2399999999998, "end": 2047.8799999999999, "text": " So using Senacilia, I can build modular databases.", "tokens": [51120, 407, 1228, 3862, 326, 24169, 11, 286, 393, 1322, 31111, 22380, 13, 51402], "temperature": 0.0, "avg_logprob": -0.29092921302432107, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.0021076861303299665}, {"id": 473, "seek": 202712, "start": 2047.8799999999999, "end": 2051.88, "text": " Like I said, this is transactional block allocator with reference counting included.", "tokens": [51402, 1743, 286, 848, 11, 341, 307, 46688, 1966, 3461, 12660, 1639, 365, 6408, 13251, 5556, 13, 51602], "temperature": 0.0, "avg_logprob": -0.29092921302432107, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.0021076861303299665}, {"id": 474, "seek": 202712, "start": 2051.88, "end": 2054.3199999999997, "text": " I've built different data structures in this.", "tokens": [51602, 286, 600, 3094, 819, 1412, 9227, 294, 341, 13, 51724], "temperature": 0.0, "avg_logprob": -0.29092921302432107, "compression_ratio": 1.5572519083969465, "no_speech_prob": 0.0021076861303299665}, {"id": 475, "seek": 205432, "start": 2054.32, "end": 2058.6000000000004, "text": " One cool thing you cannot do with others that can be done in Senacilia are composite", "tokens": [50364, 1485, 1627, 551, 291, 2644, 360, 365, 2357, 300, 393, 312, 1096, 294, 3862, 326, 24169, 366, 25557, 50578], "temperature": 0.0, "avg_logprob": -0.23043336954202737, "compression_ratio": 1.657258064516129, "no_speech_prob": 0.04016181454062462}, {"id": 476, "seek": 205432, "start": 2058.6000000000004, "end": 2059.6000000000004, "text": " types.", "tokens": [50578, 3467, 13, 50628], "temperature": 0.0, "avg_logprob": -0.23043336954202737, "compression_ratio": 1.657258064516129, "no_speech_prob": 0.04016181454062462}, {"id": 477, "seek": 205432, "start": 2059.6000000000004, "end": 2065.6800000000003, "text": " So for example, in Pihu, branches are B trees of strings to other B trees that store our", "tokens": [50628, 407, 337, 1365, 11, 294, 430, 4247, 84, 11, 14770, 366, 363, 5852, 295, 13985, 281, 661, 363, 5852, 300, 3531, 527, 50932], "temperature": 0.0, "avg_logprob": -0.23043336954202737, "compression_ratio": 1.657258064516129, "no_speech_prob": 0.04016181454062462}, {"id": 478, "seek": 205432, "start": 2065.6800000000003, "end": 2066.6800000000003, "text": " graphs.", "tokens": [50932, 24877, 13, 50982], "temperature": 0.0, "avg_logprob": -0.23043336954202737, "compression_ratio": 1.657258064516129, "no_speech_prob": 0.04016181454062462}, {"id": 479, "seek": 205432, "start": 2066.6800000000003, "end": 2071.1200000000003, "text": " So you can nest data structures like that, which is cool.", "tokens": [50982, 407, 291, 393, 15646, 1412, 9227, 411, 300, 11, 597, 307, 1627, 13, 51204], "temperature": 0.0, "avg_logprob": -0.23043336954202737, "compression_ratio": 1.657258064516129, "no_speech_prob": 0.04016181454062462}, {"id": 480, "seek": 205432, "start": 2071.1200000000003, "end": 2075.32, "text": " I have a prototype text editor with forkable files.", "tokens": [51204, 286, 362, 257, 19475, 2487, 9839, 365, 17716, 712, 7098, 13, 51414], "temperature": 0.0, "avg_logprob": -0.23043336954202737, "compression_ratio": 1.657258064516129, "no_speech_prob": 0.04016181454062462}, {"id": 481, "seek": 205432, "start": 2075.32, "end": 2080.1200000000003, "text": " So you can click a button and have a free copy of your file, sharing all its common bytes", "tokens": [51414, 407, 291, 393, 2052, 257, 2960, 293, 362, 257, 1737, 5055, 295, 428, 3991, 11, 5414, 439, 1080, 2689, 36088, 51654], "temperature": 0.0, "avg_logprob": -0.23043336954202737, "compression_ratio": 1.657258064516129, "no_speech_prob": 0.04016181454062462}, {"id": 482, "seek": 205432, "start": 2080.1200000000003, "end": 2082.6400000000003, "text": " with the previous one.", "tokens": [51654, 365, 264, 3894, 472, 13, 51780], "temperature": 0.0, "avg_logprob": -0.23043336954202737, "compression_ratio": 1.657258064516129, "no_speech_prob": 0.04016181454062462}, {"id": 483, "seek": 208264, "start": 2082.64, "end": 2088.64, "text": " And its type is something like that, a B tree of string to rope in the Pihu graph.", "tokens": [50364, 400, 1080, 2010, 307, 746, 411, 300, 11, 257, 363, 4230, 295, 6798, 281, 13540, 294, 264, 430, 4247, 84, 4295, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24902788319982083, "compression_ratio": 1.6148409893992932, "no_speech_prob": 0.04037465155124664}, {"id": 484, "seek": 208264, "start": 2088.64, "end": 2092.7599999999998, "text": " So if you're interested in data structures and performance challenges, join us because", "tokens": [50664, 407, 498, 291, 434, 3102, 294, 1412, 9227, 293, 3389, 4759, 11, 3917, 505, 570, 50870], "temperature": 0.0, "avg_logprob": -0.24902788319982083, "compression_ratio": 1.6148409893992932, "no_speech_prob": 0.04037465155124664}, {"id": 485, "seek": 208264, "start": 2092.7599999999998, "end": 2095.64, "text": " we're doing cool stuff in the space.", "tokens": [50870, 321, 434, 884, 1627, 1507, 294, 264, 1901, 13, 51014], "temperature": 0.0, "avg_logprob": -0.24902788319982083, "compression_ratio": 1.6148409893992932, "no_speech_prob": 0.04037465155124664}, {"id": 486, "seek": 208264, "start": 2095.64, "end": 2096.64, "text": " All right.", "tokens": [51014, 1057, 558, 13, 51064], "temperature": 0.0, "avg_logprob": -0.24902788319982083, "compression_ratio": 1.6148409893992932, "no_speech_prob": 0.04037465155124664}, {"id": 487, "seek": 208264, "start": 2096.64, "end": 2100.12, "text": " So back to my claim that this is both GIT.", "tokens": [51064, 407, 646, 281, 452, 3932, 300, 341, 307, 1293, 460, 3927, 13, 51238], "temperature": 0.0, "avg_logprob": -0.24902788319982083, "compression_ratio": 1.6148409893992932, "no_speech_prob": 0.04037465155124664}, {"id": 488, "seek": 208264, "start": 2100.12, "end": 2101.12, "text": " Things we get for free.", "tokens": [51238, 9514, 321, 483, 337, 1737, 13, 51288], "temperature": 0.0, "avg_logprob": -0.24902788319982083, "compression_ratio": 1.6148409893992932, "no_speech_prob": 0.04037465155124664}, {"id": 489, "seek": 208264, "start": 2101.12, "end": 2107.4, "text": " I've said a few of these so far, but we can get, one thing I haven't said is we can get", "tokens": [51288, 286, 600, 848, 257, 1326, 295, 613, 370, 1400, 11, 457, 321, 393, 483, 11, 472, 551, 286, 2378, 380, 848, 307, 321, 393, 483, 51602], "temperature": 0.0, "avg_logprob": -0.24902788319982083, "compression_ratio": 1.6148409893992932, "no_speech_prob": 0.04037465155124664}, {"id": 490, "seek": 208264, "start": 2107.4, "end": 2112.6, "text": " super fast Pihu credits, which is the Pihu equivalence of GIT blame because we don't", "tokens": [51602, 1687, 2370, 430, 4247, 84, 16816, 11, 597, 307, 264, 430, 4247, 84, 9052, 655, 295, 460, 3927, 10127, 570, 321, 500, 380, 51862], "temperature": 0.0, "avg_logprob": -0.24902788319982083, "compression_ratio": 1.6148409893992932, "no_speech_prob": 0.04037465155124664}, {"id": 491, "seek": 211260, "start": 2112.6, "end": 2115.08, "text": " want to blame our co-authors.", "tokens": [50364, 528, 281, 10127, 527, 598, 12, 40198, 830, 13, 50488], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 492, "seek": 211260, "start": 2115.08, "end": 2116.96, "text": " We'd rather credit them.", "tokens": [50488, 492, 1116, 2831, 5397, 552, 13, 50582], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 493, "seek": 211260, "start": 2116.96, "end": 2118.92, "text": " So the info is readily available in the graph.", "tokens": [50582, 407, 264, 13614, 307, 26336, 2435, 294, 264, 4295, 13, 50680], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 494, "seek": 211260, "start": 2118.92, "end": 2120.24, "text": " So you get that for free.", "tokens": [50680, 407, 291, 483, 300, 337, 1737, 13, 50746], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 495, "seek": 211260, "start": 2120.24, "end": 2127.48, "text": " So Scott was speaking in his talk about how you can use really cool hacks to speed up", "tokens": [50746, 407, 6659, 390, 4124, 294, 702, 751, 466, 577, 291, 393, 764, 534, 1627, 33617, 281, 3073, 493, 51108], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 496, "seek": 211260, "start": 2127.48, "end": 2128.48, "text": " GIT's blame.", "tokens": [51108, 460, 3927, 311, 10127, 13, 51158], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 497, "seek": 211260, "start": 2128.48, "end": 2132.72, "text": " But actually, if you don't use GIT at all, like if you model your stuff properly, you", "tokens": [51158, 583, 767, 11, 498, 291, 500, 380, 764, 460, 3927, 412, 439, 11, 411, 498, 291, 2316, 428, 1507, 6108, 11, 291, 51370], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 498, "seek": 211260, "start": 2132.72, "end": 2136.72, "text": " don't even need to speed things up because the information is readily available in the", "tokens": [51370, 500, 380, 754, 643, 281, 3073, 721, 493, 570, 264, 1589, 307, 26336, 2435, 294, 264, 51570], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 499, "seek": 211260, "start": 2136.72, "end": 2137.72, "text": " graph.", "tokens": [51570, 4295, 13, 51620], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 500, "seek": 211260, "start": 2137.72, "end": 2140.88, "text": " And so it's fast by default.", "tokens": [51620, 400, 370, 309, 311, 2370, 538, 7576, 13, 51778], "temperature": 0.0, "avg_logprob": -0.20482304382324218, "compression_ratio": 1.7330677290836654, "no_speech_prob": 0.035113491117954254}, {"id": 501, "seek": 214088, "start": 2140.88, "end": 2142.88, "text": " You can have your bug fixes in your main branch.", "tokens": [50364, 509, 393, 362, 428, 7426, 32539, 294, 428, 2135, 9819, 13, 50464], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 502, "seek": 214088, "start": 2142.88, "end": 2147.52, "text": " You don't have to plan feature branches and bug fix branches in advance.", "tokens": [50464, 509, 500, 380, 362, 281, 1393, 4111, 14770, 293, 7426, 3191, 14770, 294, 7295, 13, 50696], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 503, "seek": 214088, "start": 2147.52, "end": 2150.4, "text": " You can push them to production by having them on your main branch.", "tokens": [50696, 509, 393, 2944, 552, 281, 4265, 538, 1419, 552, 322, 428, 2135, 9819, 13, 50840], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 504, "seek": 214088, "start": 2150.4, "end": 2154.48, "text": " You can work on several features in the same branch and then decide what belongs to a feature", "tokens": [50840, 509, 393, 589, 322, 2940, 4122, 294, 264, 912, 9819, 293, 550, 4536, 437, 12953, 281, 257, 4111, 51044], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 505, "seek": 214088, "start": 2154.48, "end": 2155.88, "text": " after the fact.", "tokens": [51044, 934, 264, 1186, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 506, "seek": 214088, "start": 2155.88, "end": 2159.04, "text": " So no more rigid workflows.", "tokens": [51114, 407, 572, 544, 22195, 43461, 13, 51272], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 507, "seek": 214088, "start": 2159.04, "end": 2162.4, "text": " No more like way less meetings, hopefully.", "tokens": [51272, 883, 544, 411, 636, 1570, 8410, 11, 4696, 13, 51440], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 508, "seek": 214088, "start": 2162.4, "end": 2164.92, "text": " You can get sub modules.", "tokens": [51440, 509, 393, 483, 1422, 16679, 13, 51566], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 509, "seek": 214088, "start": 2164.92, "end": 2166.6800000000003, "text": " So sub modules don't have to suck.", "tokens": [51566, 407, 1422, 16679, 500, 380, 362, 281, 9967, 13, 51654], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 510, "seek": 214088, "start": 2166.6800000000003, "end": 2168.92, "text": " Don't let anyone tell you otherwise.", "tokens": [51654, 1468, 380, 718, 2878, 980, 291, 5911, 13, 51766], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 511, "seek": 214088, "start": 2168.92, "end": 2170.08, "text": " Sub modules don't have to suck.", "tokens": [51766, 8511, 16679, 500, 380, 362, 281, 9967, 13, 51824], "temperature": 0.0, "avg_logprob": -0.20309394778627338, "compression_ratio": 1.94921875, "no_speech_prob": 0.2304224818944931}, {"id": 512, "seek": 217008, "start": 2170.08, "end": 2174.04, "text": " You can get them for free using patch commutativity.", "tokens": [50364, 509, 393, 483, 552, 337, 1737, 1228, 9972, 800, 325, 30142, 13, 50562], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 513, "seek": 217008, "start": 2174.04, "end": 2180.52, "text": " And the reason is changes in unrelated projects commute because they can be produced independently", "tokens": [50562, 400, 264, 1778, 307, 2962, 294, 38967, 4455, 36750, 570, 436, 393, 312, 7126, 21761, 50886], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 514, "seek": 217008, "start": 2180.52, "end": 2185.36, "text": " because they are related to unrelated projects.", "tokens": [50886, 570, 436, 366, 4077, 281, 38967, 4455, 13, 51128], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 515, "seek": 217008, "start": 2185.36, "end": 2186.52, "text": " So they are commutative.", "tokens": [51128, 407, 436, 366, 800, 325, 1166, 13, 51186], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 516, "seek": 217008, "start": 2186.52, "end": 2188.96, "text": " And so you can get sub modules for free.", "tokens": [51186, 400, 370, 291, 393, 483, 1422, 16679, 337, 1737, 13, 51308], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 517, "seek": 217008, "start": 2188.96, "end": 2189.96, "text": " Signing and identity.", "tokens": [51308, 318, 9676, 293, 6575, 13, 51358], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 518, "seek": 217008, "start": 2189.96, "end": 2193.08, "text": " So this is something that GIT introduced recently as well.", "tokens": [51358, 407, 341, 307, 746, 300, 460, 3927, 7268, 3938, 382, 731, 13, 51514], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 519, "seek": 217008, "start": 2193.08, "end": 2196.72, "text": " But after we did, your identity is your public key.", "tokens": [51514, 583, 934, 321, 630, 11, 428, 6575, 307, 428, 1908, 2141, 13, 51696], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 520, "seek": 217008, "start": 2196.72, "end": 2199.3199999999997, "text": " All patches are signed by default.", "tokens": [51696, 1057, 26531, 366, 8175, 538, 7576, 13, 51826], "temperature": 0.0, "avg_logprob": -0.19208904548927588, "compression_ratio": 1.7818930041152263, "no_speech_prob": 0.021290592849254608}, {"id": 521, "seek": 219932, "start": 2199.32, "end": 2205.4, "text": " And the identity changes are easy and possible because we like to welcome everyone.", "tokens": [50364, 400, 264, 6575, 2962, 366, 1858, 293, 1944, 570, 321, 411, 281, 2928, 1518, 13, 50668], "temperature": 0.0, "avg_logprob": -0.21691083041104403, "compression_ratio": 1.6980392156862745, "no_speech_prob": 0.012257043272256851}, {"id": 522, "seek": 219932, "start": 2205.4, "end": 2208.6800000000003, "text": " And people sometimes change their identity.", "tokens": [50668, 400, 561, 2171, 1319, 641, 6575, 13, 50832], "temperature": 0.0, "avg_logprob": -0.21691083041104403, "compression_ratio": 1.6980392156862745, "no_speech_prob": 0.012257043272256851}, {"id": 523, "seek": 219932, "start": 2208.6800000000003, "end": 2212.48, "text": " And we don't want to let their personal life interfere with their work.", "tokens": [50832, 400, 321, 500, 380, 528, 281, 718, 641, 2973, 993, 23946, 365, 641, 589, 13, 51022], "temperature": 0.0, "avg_logprob": -0.21691083041104403, "compression_ratio": 1.6980392156862745, "no_speech_prob": 0.012257043272256851}, {"id": 524, "seek": 219932, "start": 2212.48, "end": 2214.32, "text": " You get free cherry picking.", "tokens": [51022, 509, 483, 1737, 20164, 8867, 13, 51114], "temperature": 0.0, "avg_logprob": -0.21691083041104403, "compression_ratio": 1.6980392156862745, "no_speech_prob": 0.012257043272256851}, {"id": 525, "seek": 219932, "start": 2214.32, "end": 2215.92, "text": " So I've said that a couple of times already.", "tokens": [51114, 407, 286, 600, 848, 300, 257, 1916, 295, 1413, 1217, 13, 51194], "temperature": 0.0, "avg_logprob": -0.21691083041104403, "compression_ratio": 1.6980392156862745, "no_speech_prob": 0.012257043272256851}, {"id": 526, "seek": 219932, "start": 2215.92, "end": 2221.2400000000002, "text": " But you just apply the patch and no need to change its hash, its identity.", "tokens": [51194, 583, 291, 445, 3079, 264, 9972, 293, 572, 643, 281, 1319, 1080, 22019, 11, 1080, 6575, 13, 51460], "temperature": 0.0, "avg_logprob": -0.21691083041104403, "compression_ratio": 1.6980392156862745, "no_speech_prob": 0.012257043272256851}, {"id": 527, "seek": 219932, "start": 2221.2400000000002, "end": 2225.7200000000003, "text": " And you can get almost free scalability to very large mono repos.", "tokens": [51460, 400, 291, 393, 483, 1920, 1737, 15664, 2310, 281, 588, 2416, 35624, 1085, 329, 13, 51684], "temperature": 0.0, "avg_logprob": -0.21691083041104403, "compression_ratio": 1.6980392156862745, "no_speech_prob": 0.012257043272256851}, {"id": 528, "seek": 219932, "start": 2225.7200000000003, "end": 2226.7200000000003, "text": " So I've said that.", "tokens": [51684, 407, 286, 600, 848, 300, 13, 51734], "temperature": 0.0, "avg_logprob": -0.21691083041104403, "compression_ratio": 1.6980392156862745, "no_speech_prob": 0.012257043272256851}, {"id": 529, "seek": 222672, "start": 2226.72, "end": 2229.56, "text": " We Goldberg machine needed.", "tokens": [50364, 492, 6731, 6873, 3479, 2978, 13, 50506], "temperature": 0.0, "avg_logprob": -0.20973842958860758, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.059107594192028046}, {"id": 530, "seek": 222672, "start": 2229.56, "end": 2231.9599999999996, "text": " Just one cool bit of implementation.", "tokens": [50506, 1449, 472, 1627, 857, 295, 11420, 13, 50626], "temperature": 0.0, "avg_logprob": -0.20973842958860758, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.059107594192028046}, {"id": 531, "seek": 222672, "start": 2231.9599999999996, "end": 2234.3599999999997, "text": " We have commutative state identifiers.", "tokens": [50626, 492, 362, 800, 325, 1166, 1785, 2473, 23463, 13, 50746], "temperature": 0.0, "avg_logprob": -0.20973842958860758, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.059107594192028046}, {"id": 532, "seek": 222672, "start": 2234.3599999999997, "end": 2242.3599999999997, "text": " So I've said earlier that we want to hash our patches to be able to make them inforgible.", "tokens": [50746, 407, 286, 600, 848, 3071, 300, 321, 528, 281, 22019, 527, 26531, 281, 312, 1075, 281, 652, 552, 1536, 284, 70, 964, 13, 51146], "temperature": 0.0, "avg_logprob": -0.20973842958860758, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.059107594192028046}, {"id": 533, "seek": 222672, "start": 2242.3599999999997, "end": 2253.24, "text": " But we also don't want it to be just like a soup of patches and like, you know, hidden", "tokens": [51146, 583, 321, 611, 500, 380, 528, 309, 281, 312, 445, 411, 257, 7884, 295, 26531, 293, 411, 11, 291, 458, 11, 7633, 51690], "temperature": 0.0, "avg_logprob": -0.20973842958860758, "compression_ratio": 1.4736842105263157, "no_speech_prob": 0.059107594192028046}, {"id": 534, "seek": 225324, "start": 2253.24, "end": 2257.2799999999997, "text": " states where you cannot get your, you can get like where you don't understand anything", "tokens": [50364, 4368, 689, 291, 2644, 483, 428, 11, 291, 393, 483, 411, 689, 291, 500, 380, 1223, 1340, 50566], "temperature": 0.0, "avg_logprob": -0.33458522928172146, "compression_ratio": 2.052, "no_speech_prob": 0.4568168818950653}, {"id": 535, "seek": 225324, "start": 2257.2799999999997, "end": 2258.2799999999997, "text": " anymore.", "tokens": [50566, 3602, 13, 50616], "temperature": 0.0, "avg_logprob": -0.33458522928172146, "compression_ratio": 2.052, "no_speech_prob": 0.4568168818950653}, {"id": 536, "seek": 225324, "start": 2258.2799999999997, "end": 2259.9199999999996, "text": " So we do want state identifiers.", "tokens": [50616, 407, 321, 360, 528, 1785, 2473, 23463, 13, 50698], "temperature": 0.0, "avg_logprob": -0.33458522928172146, "compression_ratio": 2.052, "no_speech_prob": 0.4568168818950653}, {"id": 537, "seek": 225324, "start": 2259.9199999999996, "end": 2261.6, "text": " It's like commit hashes.", "tokens": [50698, 467, 311, 411, 5599, 575, 8076, 13, 50782], "temperature": 0.0, "avg_logprob": -0.33458522928172146, "compression_ratio": 2.052, "no_speech_prob": 0.4568168818950653}, {"id": 538, "seek": 225324, "start": 2261.6, "end": 2267.8799999999997, "text": " And but the thing we, the thing that's hard for us is because we want, because we, because", "tokens": [50782, 400, 457, 264, 551, 321, 11, 264, 551, 300, 311, 1152, 337, 505, 307, 570, 321, 528, 11, 570, 321, 11, 570, 51096], "temperature": 0.0, "avg_logprob": -0.33458522928172146, "compression_ratio": 2.052, "no_speech_prob": 0.4568168818950653}, {"id": 539, "seek": 225324, "start": 2267.8799999999997, "end": 2273.4399999999996, "text": " we, the patches are commutative, we want a then B to give the same state as identifiers", "tokens": [51096, 321, 11, 264, 26531, 366, 800, 325, 1166, 11, 321, 528, 257, 550, 363, 281, 976, 264, 912, 1785, 382, 2473, 23463, 51374], "temperature": 0.0, "avg_logprob": -0.33458522928172146, "compression_ratio": 2.052, "no_speech_prob": 0.4568168818950653}, {"id": 540, "seek": 225324, "start": 2273.4399999999996, "end": 2280.08, "text": " as B then A. And at the same time, we want these state identifiers to be fast to compute.", "tokens": [51374, 382, 363, 550, 316, 13, 400, 412, 264, 912, 565, 11, 321, 528, 613, 1785, 2473, 23463, 281, 312, 2370, 281, 14722, 13, 51706], "temperature": 0.0, "avg_logprob": -0.33458522928172146, "compression_ratio": 2.052, "no_speech_prob": 0.4568168818950653}, {"id": 541, "seek": 225324, "start": 2280.08, "end": 2283.2, "text": " So we want, we want, we don't want to have to like, for example, when naive, naive, naive,", "tokens": [51706, 407, 321, 528, 11, 321, 528, 11, 321, 500, 380, 528, 281, 362, 281, 411, 11, 337, 1365, 11, 562, 29052, 11, 29052, 11, 29052, 11, 51862], "temperature": 0.0, "avg_logprob": -0.33458522928172146, "compression_ratio": 2.052, "no_speech_prob": 0.4568168818950653}, {"id": 542, "seek": 228320, "start": 2283.2, "end": 2291.48, "text": " naive version would be like sorts all your hashes by, by hash and then hashed all of", "tokens": [50364, 29052, 3037, 576, 312, 411, 7527, 439, 428, 575, 8076, 538, 11, 538, 22019, 293, 550, 22019, 292, 439, 295, 50778], "temperature": 0.0, "avg_logprob": -0.2416242417835054, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.15039294958114624}, {"id": 543, "seek": 228320, "start": 2291.48, "end": 2292.48, "text": " that.", "tokens": [50778, 300, 13, 50828], "temperature": 0.0, "avg_logprob": -0.2416242417835054, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.15039294958114624}, {"id": 544, "seek": 228320, "start": 2292.48, "end": 2296.2799999999997, "text": " So that would take a time linear in the size of history, but there is a cool trick which", "tokens": [50828, 407, 300, 576, 747, 257, 565, 8213, 294, 264, 2744, 295, 2503, 11, 457, 456, 307, 257, 1627, 4282, 597, 51018], "temperature": 0.0, "avg_logprob": -0.2416242417835054, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.15039294958114624}, {"id": 545, "seek": 228320, "start": 2296.2799999999997, "end": 2299.12, "text": " is to use discrete log and elliptic curves.", "tokens": [51018, 307, 281, 764, 27706, 3565, 293, 8284, 22439, 299, 19490, 13, 51160], "temperature": 0.0, "avg_logprob": -0.2416242417835054, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.15039294958114624}, {"id": 546, "seek": 228320, "start": 2299.12, "end": 2305.52, "text": " So this is where you turn each patch identity H into an integer and then you identify, you", "tokens": [51160, 407, 341, 307, 689, 291, 1261, 1184, 9972, 6575, 389, 666, 364, 24922, 293, 550, 291, 5876, 11, 291, 51480], "temperature": 0.0, "avg_logprob": -0.2416242417835054, "compression_ratio": 1.6269430051813472, "no_speech_prob": 0.15039294958114624}, {"id": 547, "seek": 230552, "start": 2305.52, "end": 2312.68, "text": " identify your states using each the part, each the product of all your hashes.", "tokens": [50364, 5876, 428, 4368, 1228, 1184, 264, 644, 11, 1184, 264, 1674, 295, 439, 428, 575, 8076, 13, 50722], "temperature": 0.0, "avg_logprob": -0.23723934173583985, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.14329521358013153}, {"id": 548, "seek": 230552, "start": 2312.68, "end": 2318.08, "text": " And this is something you can compute very easily from a state and the next patch.", "tokens": [50722, 400, 341, 307, 746, 291, 393, 14722, 588, 3612, 490, 257, 1785, 293, 264, 958, 9972, 13, 50992], "temperature": 0.0, "avg_logprob": -0.23723934173583985, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.14329521358013153}, {"id": 549, "seek": 230552, "start": 2318.08, "end": 2322.48, "text": " So this takes a constant time to confuse and it's commutative for free.", "tokens": [50992, 407, 341, 2516, 257, 5754, 565, 281, 28584, 293, 309, 311, 800, 325, 1166, 337, 1737, 13, 51212], "temperature": 0.0, "avg_logprob": -0.23723934173583985, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.14329521358013153}, {"id": 550, "seek": 230552, "start": 2322.48, "end": 2326.4, "text": " So this is, this is, this is a trick that I like.", "tokens": [51212, 407, 341, 307, 11, 341, 307, 11, 341, 307, 257, 4282, 300, 286, 411, 13, 51408], "temperature": 0.0, "avg_logprob": -0.23723934173583985, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.14329521358013153}, {"id": 551, "seek": 230552, "start": 2326.4, "end": 2327.4, "text": " Okay.", "tokens": [51408, 1033, 13, 51458], "temperature": 0.0, "avg_logprob": -0.23723934173583985, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.14329521358013153}, {"id": 552, "seek": 230552, "start": 2327.4, "end": 2328.4, "text": " All right.", "tokens": [51458, 1057, 558, 13, 51508], "temperature": 0.0, "avg_logprob": -0.23723934173583985, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.14329521358013153}, {"id": 553, "seek": 230552, "start": 2328.4, "end": 2331.84, "text": " Now, what's future developments in that, in that space?", "tokens": [51508, 823, 11, 437, 311, 2027, 20862, 294, 300, 11, 294, 300, 1901, 30, 51680], "temperature": 0.0, "avg_logprob": -0.23723934173583985, "compression_ratio": 1.6036036036036037, "no_speech_prob": 0.14329521358013153}, {"id": 554, "seek": 233184, "start": 2331.84, "end": 2336.28, "text": " So we want, we're working towards a hybrid states patch system.", "tokens": [50364, 407, 321, 528, 11, 321, 434, 1364, 3030, 257, 13051, 4368, 9972, 1185, 13, 50586], "temperature": 0.0, "avg_logprob": -0.3559242856186048, "compression_ratio": 1.6070038910505837, "no_speech_prob": 0.019170686602592468}, {"id": 555, "seek": 233184, "start": 2336.28, "end": 2340.48, "text": " So in, in GITS, I said that commits our states, not changes.", "tokens": [50586, 407, 294, 11, 294, 460, 3927, 50, 11, 286, 848, 300, 48311, 527, 4368, 11, 406, 2962, 13, 50796], "temperature": 0.0, "avg_logprob": -0.3559242856186048, "compression_ratio": 1.6070038910505837, "no_speech_prob": 0.019170686602592468}, {"id": 556, "seek": 233184, "start": 2340.48, "end": 2345.92, "text": " There's like the blog posts all the time reminding us of that fact, even though patches can be", "tokens": [50796, 821, 311, 411, 264, 6968, 12300, 439, 264, 565, 27639, 505, 295, 300, 1186, 11, 754, 1673, 26531, 393, 312, 51068], "temperature": 0.0, "avg_logprob": -0.3559242856186048, "compression_ratio": 1.6070038910505837, "no_speech_prob": 0.019170686602592468}, {"id": 557, "seek": 233184, "start": 2345.92, "end": 2348.1600000000003, "text": " applied and recomputed after the fact.", "tokens": [51068, 6456, 293, 23334, 2582, 292, 934, 264, 1186, 13, 51180], "temperature": 0.0, "avg_logprob": -0.3559242856186048, "compression_ratio": 1.6070038910505837, "no_speech_prob": 0.019170686602592468}, {"id": 558, "seek": 233184, "start": 2348.1600000000003, "end": 2351.4, "text": " Darks only has changes and recomputes states as needed.", "tokens": [51180, 9563, 82, 787, 575, 2962, 293, 48000, 1819, 4368, 382, 2978, 13, 51342], "temperature": 0.0, "avg_logprob": -0.3559242856186048, "compression_ratio": 1.6070038910505837, "no_speech_prob": 0.019170686602592468}, {"id": 559, "seek": 233184, "start": 2351.4, "end": 2354.4, "text": " So it's completely, completely opposite approach.", "tokens": [51342, 407, 309, 311, 2584, 11, 2584, 6182, 3109, 13, 51492], "temperature": 0.0, "avg_logprob": -0.3559242856186048, "compression_ratio": 1.6070038910505837, "no_speech_prob": 0.019170686602592468}, {"id": 560, "seek": 233184, "start": 2354.4, "end": 2358.2000000000003, "text": " And Pihla's both, as I've tried to convince you.", "tokens": [51492, 400, 430, 4247, 875, 311, 1293, 11, 382, 286, 600, 3031, 281, 13447, 291, 13, 51682], "temperature": 0.0, "avg_logprob": -0.3559242856186048, "compression_ratio": 1.6070038910505837, "no_speech_prob": 0.019170686602592468}, {"id": 561, "seek": 235820, "start": 2358.2, "end": 2363.2799999999997, "text": " It has a data structure modeling the current states, but that data structure was not actually", "tokens": [50364, 467, 575, 257, 1412, 3877, 15983, 264, 2190, 4368, 11, 457, 300, 1412, 3877, 390, 406, 767, 50618], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 562, "seek": 235820, "start": 2363.2799999999997, "end": 2369.2799999999997, "text": " designed, it was found, it was, it was calculated from the nature of the patches we wanted to", "tokens": [50618, 4761, 11, 309, 390, 1352, 11, 309, 390, 11, 309, 390, 15598, 490, 264, 3687, 295, 264, 26531, 321, 1415, 281, 50918], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 563, "seek": 235820, "start": 2369.2799999999997, "end": 2370.2799999999997, "text": " have on text files.", "tokens": [50918, 362, 322, 2487, 7098, 13, 50968], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 564, "seek": 235820, "start": 2370.2799999999997, "end": 2372.72, "text": " And this is therefore completely transparent.", "tokens": [50968, 400, 341, 307, 4412, 2584, 12737, 13, 51090], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 565, "seek": 235820, "start": 2372.72, "end": 2374.52, "text": " So this is not a leaky abstraction.", "tokens": [51090, 407, 341, 307, 406, 257, 476, 15681, 37765, 13, 51180], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 566, "seek": 235820, "start": 2374.52, "end": 2379.16, "text": " This is something that was found and calculated from the patches themselves and not just a", "tokens": [51180, 639, 307, 746, 300, 390, 1352, 293, 15598, 490, 264, 26531, 2969, 293, 406, 445, 257, 51412], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 567, "seek": 235820, "start": 2379.16, "end": 2384.2799999999997, "text": " cache that, that leaks or is like sometimes becomes irrelevant to the patches that were", "tokens": [51412, 19459, 300, 11, 300, 28885, 420, 307, 411, 2171, 3643, 28682, 281, 264, 26531, 300, 645, 51668], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 568, "seek": 235820, "start": 2384.2799999999997, "end": 2385.2799999999997, "text": " applied to it.", "tokens": [51668, 6456, 281, 309, 13, 51718], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 569, "seek": 235820, "start": 2385.2799999999997, "end": 2386.2799999999997, "text": " All right.", "tokens": [51718, 1057, 558, 13, 51768], "temperature": 0.0, "avg_logprob": -0.23236859855005296, "compression_ratio": 1.8364312267657992, "no_speech_prob": 0.009959419257938862}, {"id": 570, "seek": 238628, "start": 2386.6400000000003, "end": 2391.36, "text": " Ongoing projects in that direction towards a hybrid state patch system where we have", "tokens": [50382, 422, 872, 78, 278, 4455, 294, 300, 3513, 3030, 257, 13051, 1785, 9972, 1185, 689, 321, 362, 50618], "temperature": 0.0, "avg_logprob": -0.2897697917202063, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.003063848940655589}, {"id": 571, "seek": 238628, "start": 2391.36, "end": 2398.0400000000004, "text": " tags currently, but there are a bit, there are bits of slow and, and bloated.", "tokens": [50618, 18632, 4362, 11, 457, 456, 366, 257, 857, 11, 456, 366, 9239, 295, 2964, 293, 11, 293, 1749, 770, 13, 50952], "temperature": 0.0, "avg_logprob": -0.2897697917202063, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.003063848940655589}, {"id": 572, "seek": 238628, "start": 2398.0400000000004, "end": 2402.88, "text": " So we want to, we're working towards a lightweight tags.", "tokens": [50952, 407, 321, 528, 281, 11, 321, 434, 1364, 3030, 257, 22052, 18632, 13, 51194], "temperature": 0.0, "avg_logprob": -0.2897697917202063, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.003063848940655589}, {"id": 573, "seek": 238628, "start": 2402.88, "end": 2407.8, "text": " And this is a feature that will add super fast history browsing in, in Pihla, while retaining", "tokens": [51194, 400, 341, 307, 257, 4111, 300, 486, 909, 1687, 2370, 2503, 38602, 294, 11, 294, 430, 4247, 875, 11, 1339, 34936, 51440], "temperature": 0.0, "avg_logprob": -0.2897697917202063, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.003063848940655589}, {"id": 574, "seek": 238628, "start": 2407.8, "end": 2410.7200000000003, "text": " all the good properties of patches.", "tokens": [51440, 439, 264, 665, 7221, 295, 26531, 13, 51586], "temperature": 0.0, "avg_logprob": -0.2897697917202063, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.003063848940655589}, {"id": 575, "seek": 238628, "start": 2410.7200000000003, "end": 2414.84, "text": " Currently tags are implemented as a semi-quill data database using compressed files as a", "tokens": [51586, 19964, 18632, 366, 12270, 382, 257, 12909, 12, 358, 373, 1412, 8149, 1228, 30353, 7098, 382, 257, 51792], "temperature": 0.0, "avg_logprob": -0.2897697917202063, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.003063848940655589}, {"id": 576, "seek": 238628, "start": 2414.84, "end": 2415.84, "text": " back end.", "tokens": [51792, 646, 917, 13, 51842], "temperature": 0.0, "avg_logprob": -0.2897697917202063, "compression_ratio": 1.641025641025641, "no_speech_prob": 0.003063848940655589}, {"id": 577, "seek": 241584, "start": 2415.88, "end": 2422.08, "text": " Another thing we're, we've, we've been discussing on our, Zulip is patch groups or topics or", "tokens": [50366, 3996, 551, 321, 434, 11, 321, 600, 11, 321, 600, 668, 10850, 322, 527, 11, 1176, 425, 647, 307, 9972, 3935, 420, 8378, 420, 50676], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 578, "seek": 241584, "start": 2422.08, "end": 2427.32, "text": " things like that to group patches together and to be able to say, well, I have just one", "tokens": [50676, 721, 411, 300, 281, 1594, 26531, 1214, 293, 281, 312, 1075, 281, 584, 11, 731, 11, 286, 362, 445, 472, 50938], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 579, "seek": 241584, "start": 2427.32, "end": 2428.32, "text": " branch.", "tokens": [50938, 9819, 13, 50988], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 580, "seek": 241584, "start": 2428.32, "end": 2429.32, "text": " I don't want to work with branches.", "tokens": [50988, 286, 500, 380, 528, 281, 589, 365, 14770, 13, 51038], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 581, "seek": 241584, "start": 2429.32, "end": 2431.36, "text": " So I only have one branch.", "tokens": [51038, 407, 286, 787, 362, 472, 9819, 13, 51140], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 582, "seek": 241584, "start": 2431.36, "end": 2432.84, "text": " Maybe this is bad practice, good practice.", "tokens": [51140, 2704, 341, 307, 1578, 3124, 11, 665, 3124, 13, 51214], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 583, "seek": 241584, "start": 2432.84, "end": 2436.2400000000002, "text": " I don't know what, I don't, I don't want to tell people what their good practices should", "tokens": [51214, 286, 500, 380, 458, 437, 11, 286, 500, 380, 11, 286, 500, 380, 528, 281, 980, 561, 437, 641, 665, 7525, 820, 51384], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 584, "seek": 241584, "start": 2436.2400000000002, "end": 2437.2400000000002, "text": " be.", "tokens": [51384, 312, 13, 51434], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 585, "seek": 241584, "start": 2437.2400000000002, "end": 2439.08, "text": " Like it should be what makes them fast and efficient.", "tokens": [51434, 1743, 309, 820, 312, 437, 1669, 552, 2370, 293, 7148, 13, 51526], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 586, "seek": 241584, "start": 2439.08, "end": 2440.08, "text": " That's all.", "tokens": [51526, 663, 311, 439, 13, 51576], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 587, "seek": 241584, "start": 2440.08, "end": 2444.6000000000004, "text": " So patch groups would, would allow people to group patches together to have all their", "tokens": [51576, 407, 9972, 3935, 576, 11, 576, 2089, 561, 281, 1594, 26531, 1214, 281, 362, 439, 641, 51802], "temperature": 0.0, "avg_logprob": -0.18455713907877605, "compression_ratio": 1.9113475177304964, "no_speech_prob": 0.00921450462192297}, {"id": 588, "seek": 244460, "start": 2444.6, "end": 2449.48, "text": " patches in the, in the main branch and then push just patches related to one specific", "tokens": [50364, 26531, 294, 264, 11, 294, 264, 2135, 9819, 293, 550, 2944, 445, 26531, 4077, 281, 472, 2685, 50608], "temperature": 0.0, "avg_logprob": -0.1660635548253213, "compression_ratio": 1.7122302158273381, "no_speech_prob": 0.01079653576016426}, {"id": 589, "seek": 244460, "start": 2449.48, "end": 2450.48, "text": " feature.", "tokens": [50608, 4111, 13, 50658], "temperature": 0.0, "avg_logprob": -0.1660635548253213, "compression_ratio": 1.7122302158273381, "no_speech_prob": 0.01079653576016426}, {"id": 590, "seek": 244460, "start": 2450.48, "end": 2455.68, "text": " So that would allow people to like be a bit more organized, for example.", "tokens": [50658, 407, 300, 576, 2089, 561, 281, 411, 312, 257, 857, 544, 9983, 11, 337, 1365, 13, 50918], "temperature": 0.0, "avg_logprob": -0.1660635548253213, "compression_ratio": 1.7122302158273381, "no_speech_prob": 0.01079653576016426}, {"id": 591, "seek": 244460, "start": 2455.68, "end": 2460.12, "text": " Someone proposed queues recently to avoid half-merged states because when, when you're", "tokens": [50918, 8734, 10348, 631, 1247, 3938, 281, 5042, 1922, 12, 936, 3004, 4368, 570, 562, 11, 562, 291, 434, 51140], "temperature": 0.0, "avg_logprob": -0.1660635548253213, "compression_ratio": 1.7122302158273381, "no_speech_prob": 0.01079653576016426}, {"id": 592, "seek": 244460, "start": 2460.12, "end": 2466.0, "text": " merging states, patches one by one, sometimes you can get in a state that was never tested", "tokens": [51140, 44559, 4368, 11, 26531, 472, 538, 472, 11, 2171, 291, 393, 483, 294, 257, 1785, 300, 390, 1128, 8246, 51434], "temperature": 0.0, "avg_logprob": -0.1660635548253213, "compression_ratio": 1.7122302158273381, "no_speech_prob": 0.01079653576016426}, {"id": 593, "seek": 244460, "start": 2466.0, "end": 2467.0, "text": " by anyone.", "tokens": [51434, 538, 2878, 13, 51484], "temperature": 0.0, "avg_logprob": -0.1660635548253213, "compression_ratio": 1.7122302158273381, "no_speech_prob": 0.01079653576016426}, {"id": 594, "seek": 244460, "start": 2467.0, "end": 2468.68, "text": " So that's, that's not great.", "tokens": [51484, 407, 300, 311, 11, 300, 311, 406, 869, 13, 51568], "temperature": 0.0, "avg_logprob": -0.1660635548253213, "compression_ratio": 1.7122302158273381, "no_speech_prob": 0.01079653576016426}, {"id": 595, "seek": 244460, "start": 2468.68, "end": 2473.36, "text": " And so we want to add queues to get the best of both words actually to say, well, actually", "tokens": [51568, 400, 370, 321, 528, 281, 909, 631, 1247, 281, 483, 264, 1151, 295, 1293, 2283, 767, 281, 584, 11, 731, 11, 767, 51802], "temperature": 0.0, "avg_logprob": -0.1660635548253213, "compression_ratio": 1.7122302158273381, "no_speech_prob": 0.01079653576016426}, {"id": 596, "seek": 247336, "start": 2473.36, "end": 2474.36, "text": " I've done a merge here.", "tokens": [50364, 286, 600, 1096, 257, 22183, 510, 13, 50414], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 597, "seek": 247336, "start": 2474.36, "end": 2477.2400000000002, "text": " I've not, I've just, I've not just applied the patch.", "tokens": [50414, 286, 600, 406, 11, 286, 600, 445, 11, 286, 600, 406, 445, 6456, 264, 9972, 13, 50558], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 598, "seek": 247336, "start": 2477.2400000000002, "end": 2479.84, "text": " I've done, I've applied the patch together with other patches.", "tokens": [50558, 286, 600, 1096, 11, 286, 600, 6456, 264, 9972, 1214, 365, 661, 26531, 13, 50688], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 599, "seek": 247336, "start": 2479.84, "end": 2481.6800000000003, "text": " So that's the kind of stuff we're working on.", "tokens": [50688, 407, 300, 311, 264, 733, 295, 1507, 321, 434, 1364, 322, 13, 50780], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 600, "seek": 247336, "start": 2481.6800000000003, "end": 2483.92, "text": " But this is not, not super, not super hard.", "tokens": [50780, 583, 341, 307, 406, 11, 406, 1687, 11, 406, 1687, 1152, 13, 50892], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 601, "seek": 247336, "start": 2483.92, "end": 2486.6800000000003, "text": " And if you're interested in contributing, we're really welcoming.", "tokens": [50892, 400, 498, 291, 434, 3102, 294, 19270, 11, 321, 434, 534, 17378, 13, 51030], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 602, "seek": 247336, "start": 2486.6800000000003, "end": 2489.6400000000003, "text": " Well, we, we hope we're welcoming enough.", "tokens": [51030, 1042, 11, 321, 11, 321, 1454, 321, 434, 17378, 1547, 13, 51178], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 603, "seek": 247336, "start": 2489.6400000000003, "end": 2490.6400000000003, "text": " All right.", "tokens": [51178, 1057, 558, 13, 51228], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 604, "seek": 247336, "start": 2490.6400000000003, "end": 2495.6, "text": " So if you want to help us, this is currently a large project and a small team.", "tokens": [51228, 407, 498, 291, 528, 281, 854, 505, 11, 341, 307, 4362, 257, 2416, 1716, 293, 257, 1359, 1469, 13, 51476], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 605, "seek": 247336, "start": 2495.6, "end": 2496.96, "text": " There's lots of satellite projects.", "tokens": [51476, 821, 311, 3195, 295, 16016, 4455, 13, 51544], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 606, "seek": 247336, "start": 2496.96, "end": 2500.08, "text": " So we've, we've built our own database system in order to build this.", "tokens": [51544, 407, 321, 600, 11, 321, 600, 3094, 527, 1065, 8149, 1185, 294, 1668, 281, 1322, 341, 13, 51700], "temperature": 0.0, "avg_logprob": -0.25069708055065526, "compression_ratio": 1.7682119205298013, "no_speech_prob": 0.0652245283126831}, {"id": 607, "seek": 250008, "start": 2500.08, "end": 2504.2, "text": " We've built our own SSH implementation in order to build this.", "tokens": [50364, 492, 600, 3094, 527, 1065, 12238, 39, 11420, 294, 1668, 281, 1322, 341, 13, 50570], "temperature": 0.0, "avg_logprob": -0.19998900387265267, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.013919605873525143}, {"id": 608, "seek": 250008, "start": 2504.2, "end": 2507.0, "text": " But fortunately proper mathematics can make that work.", "tokens": [50570, 583, 25511, 2296, 18666, 393, 652, 300, 589, 13, 50710], "temperature": 0.0, "avg_logprob": -0.19998900387265267, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.013919605873525143}, {"id": 609, "seek": 250008, "start": 2507.0, "end": 2512.0, "text": " We have way less things to implement that, that any other version control system.", "tokens": [50710, 492, 362, 636, 1570, 721, 281, 4445, 300, 11, 300, 604, 661, 3037, 1969, 1185, 13, 50960], "temperature": 0.0, "avg_logprob": -0.19998900387265267, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.013919605873525143}, {"id": 610, "seek": 250008, "start": 2512.0, "end": 2517.24, "text": " It's bootstrapped, meaning it's used, we've been using it for itself since 2017, which", "tokens": [50960, 467, 311, 11450, 19639, 3320, 11, 3620, 309, 311, 1143, 11, 321, 600, 668, 1228, 309, 337, 2564, 1670, 6591, 11, 597, 51222], "temperature": 0.0, "avg_logprob": -0.19998900387265267, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.013919605873525143}, {"id": 611, "seek": 250008, "start": 2517.24, "end": 2520.88, "text": " wasn't without its problems in the beginning, because some patches could only be applied", "tokens": [51222, 2067, 380, 1553, 1080, 2740, 294, 264, 2863, 11, 570, 512, 26531, 727, 787, 312, 6456, 51404], "temperature": 0.0, "avg_logprob": -0.19998900387265267, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.013919605873525143}, {"id": 612, "seek": 250008, "start": 2520.88, "end": 2523.16, "text": " if you already had the patch.", "tokens": [51404, 498, 291, 1217, 632, 264, 9972, 13, 51518], "temperature": 0.0, "avg_logprob": -0.19998900387265267, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.013919605873525143}, {"id": 613, "seek": 250008, "start": 2523.16, "end": 2529.2799999999997, "text": " So there was a interesting, interesting challenges.", "tokens": [51518, 407, 456, 390, 257, 1880, 11, 1880, 4759, 13, 51824], "temperature": 0.0, "avg_logprob": -0.19998900387265267, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.013919605873525143}, {"id": 614, "seek": 252928, "start": 2529.28, "end": 2534.44, "text": " There's a lot of effort needed in maintaining the documentation, accessibility tutorials,", "tokens": [50364, 821, 311, 257, 688, 295, 4630, 2978, 294, 14916, 264, 14333, 11, 15002, 17616, 11, 50622], "temperature": 0.0, "avg_logprob": -0.2378754236001884, "compression_ratio": 1.6051660516605166, "no_speech_prob": 0.08125626295804977}, {"id": 615, "seek": 252928, "start": 2534.44, "end": 2538.84, "text": " UI, bike shedding, we're really demanding of that.", "tokens": [50622, 15682, 11, 5656, 49934, 11, 321, 434, 534, 19960, 295, 300, 13, 50842], "temperature": 0.0, "avg_logprob": -0.2378754236001884, "compression_ratio": 1.6051660516605166, "no_speech_prob": 0.08125626295804977}, {"id": 616, "seek": 252928, "start": 2538.84, "end": 2541.96, "text": " We have good first bugs tags on our repository.", "tokens": [50842, 492, 362, 665, 700, 15120, 18632, 322, 527, 25841, 13, 50998], "temperature": 0.0, "avg_logprob": -0.2378754236001884, "compression_ratio": 1.6051660516605166, "no_speech_prob": 0.08125626295804977}, {"id": 617, "seek": 252928, "start": 2541.96, "end": 2546.52, "text": " Well, our repository hopefully isn't hosted on GitHub because we can't, they don't support", "tokens": [50998, 1042, 11, 527, 25841, 4696, 1943, 380, 19204, 322, 23331, 570, 321, 393, 380, 11, 436, 500, 380, 1406, 51226], "temperature": 0.0, "avg_logprob": -0.2378754236001884, "compression_ratio": 1.6051660516605166, "no_speech_prob": 0.08125626295804977}, {"id": 618, "seek": 252928, "start": 2546.52, "end": 2548.2400000000002, "text": " Piholi yet.", "tokens": [51226, 430, 4247, 9384, 1939, 13, 51312], "temperature": 0.0, "avg_logprob": -0.2378754236001884, "compression_ratio": 1.6051660516605166, "no_speech_prob": 0.08125626295804977}, {"id": 619, "seek": 252928, "start": 2548.2400000000002, "end": 2552.28, "text": " So we had to build our own forge, unfortunately.", "tokens": [51312, 407, 321, 632, 281, 1322, 527, 1065, 38741, 11, 7015, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2378754236001884, "compression_ratio": 1.6051660516605166, "no_speech_prob": 0.08125626295804977}, {"id": 620, "seek": 252928, "start": 2552.28, "end": 2558.84, "text": " And so if you want to come help us, then yeah, good first bugs are the way to, to get started.", "tokens": [51514, 400, 370, 498, 291, 528, 281, 808, 854, 505, 11, 550, 1338, 11, 665, 700, 15120, 366, 264, 636, 281, 11, 281, 483, 1409, 13, 51842], "temperature": 0.0, "avg_logprob": -0.2378754236001884, "compression_ratio": 1.6051660516605166, "no_speech_prob": 0.08125626295804977}, {"id": 621, "seek": 255884, "start": 2558.84, "end": 2561.7200000000003, "text": " And come say hi on our Zulip.", "tokens": [50364, 400, 808, 584, 4879, 322, 527, 1176, 425, 647, 13, 50508], "temperature": 0.0, "avg_logprob": -0.36129925467751245, "compression_ratio": 1.4439024390243902, "no_speech_prob": 0.12351193279027939}, {"id": 622, "seek": 255884, "start": 2561.7200000000003, "end": 2563.84, "text": " It's the URL is here.", "tokens": [50508, 467, 311, 264, 12905, 307, 510, 13, 50614], "temperature": 0.0, "avg_logprob": -0.36129925467751245, "compression_ratio": 1.4439024390243902, "no_speech_prob": 0.12351193279027939}, {"id": 623, "seek": 255884, "start": 2563.84, "end": 2564.96, "text": " All right.", "tokens": [50614, 1057, 558, 13, 50670], "temperature": 0.0, "avg_logprob": -0.36129925467751245, "compression_ratio": 1.4439024390243902, "no_speech_prob": 0.12351193279027939}, {"id": 624, "seek": 255884, "start": 2564.96, "end": 2572.92, "text": " So open source version control based on algorithms and PRMs and also cool, low level stuff to", "tokens": [50670, 407, 1269, 4009, 3037, 1969, 2361, 322, 14642, 293, 11568, 26386, 293, 611, 1627, 11, 2295, 1496, 1507, 281, 51068], "temperature": 0.0, "avg_logprob": -0.36129925467751245, "compression_ratio": 1.4439024390243902, "no_speech_prob": 0.12351193279027939}, {"id": 625, "seek": 255884, "start": 2572.92, "end": 2579.6800000000003, "text": " optimize databases, scalable to mono repos and large files for free, potentially usable", "tokens": [51068, 19719, 22380, 11, 38481, 281, 35624, 1085, 329, 293, 2416, 7098, 337, 1737, 11, 7263, 29975, 51406], "temperature": 0.0, "avg_logprob": -0.36129925467751245, "compression_ratio": 1.4439024390243902, "no_speech_prob": 0.12351193279027939}, {"id": 626, "seek": 255884, "start": 2579.6800000000003, "end": 2580.6800000000003, "text": " by non-coders.", "tokens": [51406, 538, 2107, 12, 26560, 433, 13, 51456], "temperature": 0.0, "avg_logprob": -0.36129925467751245, "compression_ratio": 1.4439024390243902, "no_speech_prob": 0.12351193279027939}, {"id": 627, "seek": 255884, "start": 2580.6800000000003, "end": 2583.4, "text": " I've told it to absolute non-coders.", "tokens": [51456, 286, 600, 1907, 309, 281, 8236, 2107, 12, 26560, 433, 13, 51592], "temperature": 0.0, "avg_logprob": -0.36129925467751245, "compression_ratio": 1.4439024390243902, "no_speech_prob": 0.12351193279027939}, {"id": 628, "seek": 258340, "start": 2583.4, "end": 2590.56, "text": " I've discussed with some people in parliament, in the French parliament actually.", "tokens": [50364, 286, 600, 7152, 365, 512, 561, 294, 19520, 11, 294, 264, 5522, 19520, 767, 13, 50722], "temperature": 0.0, "avg_logprob": -0.2767049118324562, "compression_ratio": 1.6784313725490196, "no_speech_prob": 0.05603443831205368}, {"id": 629, "seek": 258340, "start": 2590.56, "end": 2595.0, "text": " Artists can use it without having to learn what's a rebase, without having to know whether", "tokens": [50722, 5735, 1751, 393, 764, 309, 1553, 1419, 281, 1466, 437, 311, 257, 12970, 651, 11, 1553, 1419, 281, 458, 1968, 50944], "temperature": 0.0, "avg_logprob": -0.2767049118324562, "compression_ratio": 1.6784313725490196, "no_speech_prob": 0.05603443831205368}, {"id": 630, "seek": 258340, "start": 2595.0, "end": 2597.88, "text": " they're in a merge shop or a rebase shop.", "tokens": [50944, 436, 434, 294, 257, 22183, 3945, 420, 257, 12970, 651, 3945, 13, 51088], "temperature": 0.0, "avg_logprob": -0.2767049118324562, "compression_ratio": 1.6784313725490196, "no_speech_prob": 0.05603443831205368}, {"id": 631, "seek": 258340, "start": 2597.88, "end": 2602.6, "text": " Lawyers can use it to version their, their documents and what about others.", "tokens": [51088, 7744, 13917, 393, 764, 309, 281, 3037, 641, 11, 641, 8512, 293, 437, 466, 2357, 13, 51324], "temperature": 0.0, "avg_logprob": -0.2767049118324562, "compression_ratio": 1.6784313725490196, "no_speech_prob": 0.05603443831205368}, {"id": 632, "seek": 258340, "start": 2602.6, "end": 2606.96, "text": " Sonic Pi composers and music musicians, legal builders and whatnot.", "tokens": [51324, 14290, 17741, 43872, 293, 1318, 16916, 11, 5089, 36281, 293, 25882, 13, 51542], "temperature": 0.0, "avg_logprob": -0.2767049118324562, "compression_ratio": 1.6784313725490196, "no_speech_prob": 0.05603443831205368}, {"id": 633, "seek": 258340, "start": 2606.96, "end": 2610.56, "text": " We have a repository hosting service available.", "tokens": [51542, 492, 362, 257, 25841, 16058, 2643, 2435, 13, 51722], "temperature": 0.0, "avg_logprob": -0.2767049118324562, "compression_ratio": 1.6784313725490196, "no_speech_prob": 0.05603443831205368}, {"id": 634, "seek": 258340, "start": 2610.56, "end": 2611.56, "text": " That's it.", "tokens": [51722, 663, 311, 309, 13, 51772], "temperature": 0.0, "avg_logprob": -0.2767049118324562, "compression_ratio": 1.6784313725490196, "no_speech_prob": 0.05603443831205368}, {"id": 635, "seek": 258340, "start": 2611.56, "end": 2612.56, "text": " Thank you.", "tokens": [51772, 1044, 291, 13, 51822], "temperature": 0.0, "avg_logprob": -0.2767049118324562, "compression_ratio": 1.6784313725490196, "no_speech_prob": 0.05603443831205368}, {"id": 636, "seek": 261256, "start": 2612.56, "end": 2613.56, "text": " Okay.", "tokens": [50364, 1033, 13, 50414], "temperature": 0.0, "avg_logprob": -0.5386626773410373, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.28691092133522034}, {"id": 637, "seek": 261256, "start": 2613.56, "end": 2628.72, "text": " If you're living live quietly, we have time for like a couple of questions.", "tokens": [50414, 759, 291, 434, 2647, 1621, 19141, 11, 321, 362, 565, 337, 411, 257, 1916, 295, 1651, 13, 51172], "temperature": 0.0, "avg_logprob": -0.5386626773410373, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.28691092133522034}, {"id": 638, "seek": 261256, "start": 2628.72, "end": 2630.72, "text": " Raise your hand.", "tokens": [51172, 30062, 428, 1011, 13, 51272], "temperature": 0.0, "avg_logprob": -0.5386626773410373, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.28691092133522034}, {"id": 639, "seek": 261256, "start": 2630.72, "end": 2632.72, "text": " Okay.", "tokens": [51272, 1033, 13, 51372], "temperature": 0.0, "avg_logprob": -0.5386626773410373, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.28691092133522034}, {"id": 640, "seek": 261256, "start": 2632.72, "end": 2635.72, "text": " Quiet, please.", "tokens": [51372, 32193, 11, 1767, 13, 51522], "temperature": 0.0, "avg_logprob": -0.5386626773410373, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.28691092133522034}, {"id": 641, "seek": 261256, "start": 2635.72, "end": 2637.72, "text": " Hi.", "tokens": [51522, 2421, 13, 51622], "temperature": 0.0, "avg_logprob": -0.5386626773410373, "compression_ratio": 1.1495327102803738, "no_speech_prob": 0.28691092133522034}, {"id": 642, "seek": 263772, "start": 2637.72, "end": 2644.7999999999997, "text": " Thank you for your talk.", "tokens": [50364, 1044, 291, 337, 428, 751, 13, 50718], "temperature": 0.0, "avg_logprob": -0.39643084813678076, "compression_ratio": 1.3975155279503106, "no_speech_prob": 0.2119099199771881}, {"id": 643, "seek": 263772, "start": 2644.7999999999997, "end": 2649.04, "text": " I had a quick question regarding diff algorithms.", "tokens": [50718, 286, 632, 257, 1702, 1168, 8595, 7593, 14642, 13, 50930], "temperature": 0.0, "avg_logprob": -0.39643084813678076, "compression_ratio": 1.3975155279503106, "no_speech_prob": 0.2119099199771881}, {"id": 644, "seek": 263772, "start": 2649.04, "end": 2654.2, "text": " I think the default diff algorithm in GitHub is Meyer.", "tokens": [50930, 286, 519, 264, 7576, 7593, 9284, 294, 23331, 307, 47207, 13, 51188], "temperature": 0.0, "avg_logprob": -0.39643084813678076, "compression_ratio": 1.3975155279503106, "no_speech_prob": 0.2119099199771881}, {"id": 645, "seek": 263772, "start": 2654.2, "end": 2657.16, "text": " There's a bunch of other ones you can select.", "tokens": [51188, 821, 311, 257, 3840, 295, 661, 2306, 291, 393, 3048, 13, 51336], "temperature": 0.0, "avg_logprob": -0.39643084813678076, "compression_ratio": 1.3975155279503106, "no_speech_prob": 0.2119099199771881}, {"id": 646, "seek": 263772, "start": 2657.16, "end": 2661.3199999999997, "text": " Something I can't hear the question.", "tokens": [51336, 6595, 286, 393, 380, 1568, 264, 1168, 13, 51544], "temperature": 0.0, "avg_logprob": -0.39643084813678076, "compression_ratio": 1.3975155279503106, "no_speech_prob": 0.2119099199771881}, {"id": 647, "seek": 263772, "start": 2661.3199999999997, "end": 2663.9599999999996, "text": " Can, please.", "tokens": [51544, 1664, 11, 1767, 13, 51676], "temperature": 0.0, "avg_logprob": -0.39643084813678076, "compression_ratio": 1.3975155279503106, "no_speech_prob": 0.2119099199771881}, {"id": 648, "seek": 266396, "start": 2664.96, "end": 2672.08, "text": " Sorry, I'll speak a bit more.", "tokens": [50414, 4919, 11, 286, 603, 1710, 257, 857, 544, 13, 50770], "temperature": 0.0, "avg_logprob": -0.22148477114163911, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.0740526020526886}, {"id": 649, "seek": 266396, "start": 2672.08, "end": 2674.12, "text": " My question was regarding the diff algorithms.", "tokens": [50770, 1222, 1168, 390, 8595, 264, 7593, 14642, 13, 50872], "temperature": 0.0, "avg_logprob": -0.22148477114163911, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.0740526020526886}, {"id": 650, "seek": 266396, "start": 2674.12, "end": 2677.68, "text": " I think in Git, the default algorithm is Meyer.", "tokens": [50872, 286, 519, 294, 16939, 11, 264, 7576, 9284, 307, 47207, 13, 51050], "temperature": 0.0, "avg_logprob": -0.22148477114163911, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.0740526020526886}, {"id": 651, "seek": 266396, "start": 2677.68, "end": 2680.56, "text": " There's a few other ones you can select, I believe.", "tokens": [51050, 821, 311, 257, 1326, 661, 2306, 291, 393, 3048, 11, 286, 1697, 13, 51194], "temperature": 0.0, "avg_logprob": -0.22148477114163911, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.0740526020526886}, {"id": 652, "seek": 266396, "start": 2680.56, "end": 2688.36, "text": " But something that's a bit too bad is that the diff algorithm is generic.", "tokens": [51194, 583, 746, 300, 311, 257, 857, 886, 1578, 307, 300, 264, 7593, 9284, 307, 19577, 13, 51584], "temperature": 0.0, "avg_logprob": -0.22148477114163911, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.0740526020526886}, {"id": 653, "seek": 266396, "start": 2688.36, "end": 2689.88, "text": " It's only diffing text.", "tokens": [51584, 467, 311, 787, 7593, 278, 2487, 13, 51660], "temperature": 0.0, "avg_logprob": -0.22148477114163911, "compression_ratio": 1.5054945054945055, "no_speech_prob": 0.0740526020526886}, {"id": 654, "seek": 268988, "start": 2689.88, "end": 2692.08, "text": " It doesn't know what it is actually diffing.", "tokens": [50364, 467, 1177, 380, 458, 437, 309, 307, 767, 7593, 278, 13, 50474], "temperature": 0.0, "avg_logprob": -0.22160407953095018, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.11089842021465302}, {"id": 655, "seek": 268988, "start": 2692.08, "end": 2697.04, "text": " If it's a JS file or a Python file, it doesn't really care.", "tokens": [50474, 759, 309, 311, 257, 33063, 3991, 420, 257, 15329, 3991, 11, 309, 1177, 380, 534, 1127, 13, 50722], "temperature": 0.0, "avg_logprob": -0.22160407953095018, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.11089842021465302}, {"id": 656, "seek": 268988, "start": 2697.04, "end": 2703.04, "text": " And so, in a way, I think it could be interesting to have plug-and-play diff algorithms to have", "tokens": [50722, 400, 370, 11, 294, 257, 636, 11, 286, 519, 309, 727, 312, 1880, 281, 362, 5452, 12, 474, 12, 2858, 7593, 14642, 281, 362, 51022], "temperature": 0.0, "avg_logprob": -0.22160407953095018, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.11089842021465302}, {"id": 657, "seek": 268988, "start": 2703.04, "end": 2708.88, "text": " more semantic diffing based on what interpreting what you're diffing.", "tokens": [51022, 544, 47982, 7593, 278, 2361, 322, 437, 37395, 437, 291, 434, 7593, 278, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22160407953095018, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.11089842021465302}, {"id": 658, "seek": 268988, "start": 2708.88, "end": 2711.4, "text": " Would that be something you're thinking about?", "tokens": [51314, 6068, 300, 312, 746, 291, 434, 1953, 466, 30, 51440], "temperature": 0.0, "avg_logprob": -0.22160407953095018, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.11089842021465302}, {"id": 659, "seek": 268988, "start": 2711.4, "end": 2712.4, "text": " Yeah.", "tokens": [51440, 865, 13, 51490], "temperature": 0.0, "avg_logprob": -0.22160407953095018, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.11089842021465302}, {"id": 660, "seek": 268988, "start": 2712.4, "end": 2714.88, "text": " So the question is, can you swap?", "tokens": [51490, 407, 264, 1168, 307, 11, 393, 291, 18135, 30, 51614], "temperature": 0.0, "avg_logprob": -0.22160407953095018, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.11089842021465302}, {"id": 661, "seek": 268988, "start": 2714.88, "end": 2718.92, "text": " Can you replace the diff algorithm with something else?", "tokens": [51614, 1664, 291, 7406, 264, 7593, 9284, 365, 746, 1646, 30, 51816], "temperature": 0.0, "avg_logprob": -0.22160407953095018, "compression_ratio": 1.6653225806451613, "no_speech_prob": 0.11089842021465302}, {"id": 662, "seek": 271892, "start": 2718.92, "end": 2722.12, "text": " So, yes, actually you can.", "tokens": [50364, 407, 11, 2086, 11, 767, 291, 393, 13, 50524], "temperature": 0.0, "avg_logprob": -0.2687322525751023, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.027730340138077736}, {"id": 663, "seek": 271892, "start": 2722.12, "end": 2726.52, "text": " But unlike in Git, Git doesn't do diffs.", "tokens": [50524, 583, 8343, 294, 16939, 11, 16939, 1177, 380, 360, 7593, 82, 13, 50744], "temperature": 0.0, "avg_logprob": -0.2687322525751023, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.027730340138077736}, {"id": 664, "seek": 271892, "start": 2726.52, "end": 2729.88, "text": " You can do diff after the fact and change your diff algorithm after the fact.", "tokens": [50744, 509, 393, 360, 7593, 934, 264, 1186, 293, 1319, 428, 7593, 9284, 934, 264, 1186, 13, 50912], "temperature": 0.0, "avg_logprob": -0.2687322525751023, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.027730340138077736}, {"id": 665, "seek": 271892, "start": 2729.88, "end": 2738.6800000000003, "text": " Obviously here, this won't be possible because the diff is so core to what we do.", "tokens": [50912, 7580, 510, 11, 341, 1582, 380, 312, 1944, 570, 264, 7593, 307, 370, 4965, 281, 437, 321, 360, 13, 51352], "temperature": 0.0, "avg_logprob": -0.2687322525751023, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.027730340138077736}, {"id": 666, "seek": 271892, "start": 2738.6800000000003, "end": 2742.96, "text": " So you can definitely change the diff algorithm, but you have to do it while you're working", "tokens": [51352, 407, 291, 393, 2138, 1319, 264, 7593, 9284, 11, 457, 291, 362, 281, 360, 309, 1339, 291, 434, 1364, 51566], "temperature": 0.0, "avg_logprob": -0.2687322525751023, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.027730340138077736}, {"id": 667, "seek": 271892, "start": 2742.96, "end": 2743.96, "text": " in order to create your passion.", "tokens": [51566, 294, 1668, 281, 1884, 428, 5418, 13, 51616], "temperature": 0.0, "avg_logprob": -0.2687322525751023, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.027730340138077736}, {"id": 668, "seek": 271892, "start": 2743.96, "end": 2745.16, "text": " You cannot do it after the fact.", "tokens": [51616, 509, 2644, 360, 309, 934, 264, 1186, 13, 51676], "temperature": 0.0, "avg_logprob": -0.2687322525751023, "compression_ratio": 1.7264573991031391, "no_speech_prob": 0.027730340138077736}, {"id": 669, "seek": 274516, "start": 2745.16, "end": 2749.3599999999997, "text": " So that's a trade-off that we've made.", "tokens": [50364, 407, 300, 311, 257, 4923, 12, 4506, 300, 321, 600, 1027, 13, 50574], "temperature": 0.0, "avg_logprob": -0.2395015313075139, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.09624942392110825}, {"id": 670, "seek": 274516, "start": 2749.3599999999997, "end": 2750.3599999999997, "text": " Hi.", "tokens": [50574, 2421, 13, 50624], "temperature": 0.0, "avg_logprob": -0.2395015313075139, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.09624942392110825}, {"id": 671, "seek": 274516, "start": 2750.3599999999997, "end": 2753.72, "text": " It looks like a really interesting tool.", "tokens": [50624, 467, 1542, 411, 257, 534, 1880, 2290, 13, 50792], "temperature": 0.0, "avg_logprob": -0.2395015313075139, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.09624942392110825}, {"id": 672, "seek": 274516, "start": 2753.72, "end": 2757.8399999999997, "text": " I was going to ask how easy do you think it would be to automatically migrate from, say,", "tokens": [50792, 286, 390, 516, 281, 1029, 577, 1858, 360, 291, 519, 309, 576, 312, 281, 6772, 31821, 490, 11, 584, 11, 50998], "temperature": 0.0, "avg_logprob": -0.2395015313075139, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.09624942392110825}, {"id": 673, "seek": 274516, "start": 2757.8399999999997, "end": 2764.68, "text": " an existing Git repo into a repo kind of based around this system?", "tokens": [50998, 364, 6741, 16939, 49040, 666, 257, 49040, 733, 295, 2361, 926, 341, 1185, 30, 51340], "temperature": 0.0, "avg_logprob": -0.2395015313075139, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.09624942392110825}, {"id": 674, "seek": 274516, "start": 2764.68, "end": 2766.8799999999997, "text": " Well, you tell me.", "tokens": [51340, 1042, 11, 291, 980, 385, 13, 51450], "temperature": 0.0, "avg_logprob": -0.2395015313075139, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.09624942392110825}, {"id": 675, "seek": 274516, "start": 2766.8799999999997, "end": 2769.48, "text": " We have a Git importer.", "tokens": [51450, 492, 362, 257, 16939, 704, 6122, 13, 51580], "temperature": 0.0, "avg_logprob": -0.2395015313075139, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.09624942392110825}, {"id": 676, "seek": 274516, "start": 2769.48, "end": 2773.56, "text": " One pain point currently with the importer is that there's no exporter because importing", "tokens": [51580, 1485, 1822, 935, 4362, 365, 264, 704, 6122, 307, 300, 456, 311, 572, 1278, 6122, 570, 43866, 51784], "temperature": 0.0, "avg_logprob": -0.2395015313075139, "compression_ratio": 1.5720338983050848, "no_speech_prob": 0.09624942392110825}, {"id": 677, "seek": 277356, "start": 2773.56, "end": 2779.2, "text": " and then exporting would be doing a round trip.", "tokens": [50364, 293, 550, 44686, 576, 312, 884, 257, 3098, 4931, 13, 50646], "temperature": 0.0, "avg_logprob": -0.1989844092007341, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.033001337200403214}, {"id": 678, "seek": 277356, "start": 2779.2, "end": 2784.44, "text": " Because diffs are ambiguous in Git, doing a round trip would create artificial conflicts.", "tokens": [50646, 1436, 7593, 82, 366, 39465, 294, 16939, 11, 884, 257, 3098, 4931, 576, 1884, 11677, 19807, 13, 50908], "temperature": 0.0, "avg_logprob": -0.1989844092007341, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.033001337200403214}, {"id": 679, "seek": 277356, "start": 2784.44, "end": 2786.16, "text": " So we haven't implemented that.", "tokens": [50908, 407, 321, 2378, 380, 12270, 300, 13, 50994], "temperature": 0.0, "avg_logprob": -0.1989844092007341, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.033001337200403214}, {"id": 680, "seek": 277356, "start": 2786.16, "end": 2789.0, "text": " There are interesting challenges towards that goal.", "tokens": [50994, 821, 366, 1880, 4759, 3030, 300, 3387, 13, 51136], "temperature": 0.0, "avg_logprob": -0.1989844092007341, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.033001337200403214}, {"id": 681, "seek": 277356, "start": 2789.0, "end": 2793.44, "text": " So one thing for perfect interpretability would be to have an importer and an exporter", "tokens": [51136, 407, 472, 551, 337, 2176, 7302, 2310, 576, 312, 281, 362, 364, 704, 6122, 293, 364, 1278, 6122, 51358], "temperature": 0.0, "avg_logprob": -0.1989844092007341, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.033001337200403214}, {"id": 682, "seek": 277356, "start": 2793.44, "end": 2795.08, "text": " that work in a transparent way.", "tokens": [51358, 300, 589, 294, 257, 12737, 636, 13, 51440], "temperature": 0.0, "avg_logprob": -0.1989844092007341, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.033001337200403214}, {"id": 683, "seek": 277356, "start": 2795.08, "end": 2796.84, "text": " Currently, there's only a Git importer.", "tokens": [51440, 19964, 11, 456, 311, 787, 257, 16939, 704, 6122, 13, 51528], "temperature": 0.0, "avg_logprob": -0.1989844092007341, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.033001337200403214}, {"id": 684, "seek": 277356, "start": 2796.84, "end": 2802.52, "text": " So if you want to convert your project into Pihl, you can use our Git importer.", "tokens": [51528, 407, 498, 291, 528, 281, 7620, 428, 1716, 666, 430, 4247, 75, 11, 291, 393, 764, 527, 16939, 704, 6122, 13, 51812], "temperature": 0.0, "avg_logprob": -0.1989844092007341, "compression_ratio": 1.6974169741697418, "no_speech_prob": 0.033001337200403214}, {"id": 685, "seek": 280252, "start": 2802.84, "end": 2807.92, "text": " You cannot just work on the side using Pihl and then collaborate with the rest of your", "tokens": [50380, 509, 2644, 445, 589, 322, 264, 1252, 1228, 430, 4247, 75, 293, 550, 18338, 365, 264, 1472, 295, 428, 50634], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 686, "seek": 280252, "start": 2807.92, "end": 2809.4, "text": " team using Git.", "tokens": [50634, 1469, 1228, 16939, 13, 50708], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 687, "seek": 280252, "start": 2809.4, "end": 2811.2, "text": " So we'd love to have that.", "tokens": [50708, 407, 321, 1116, 959, 281, 362, 300, 13, 50798], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 688, "seek": 280252, "start": 2811.2, "end": 2815.96, "text": " But there are theoretical challenges towards that goal.", "tokens": [50798, 583, 456, 366, 20864, 4759, 3030, 300, 3387, 13, 51036], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 689, "seek": 280252, "start": 2815.96, "end": 2819.2, "text": " But yeah, how is he?", "tokens": [51036, 583, 1338, 11, 577, 307, 415, 30, 51198], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 690, "seek": 280252, "start": 2819.2, "end": 2820.96, "text": " I don't know.", "tokens": [51198, 286, 500, 380, 458, 13, 51286], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 691, "seek": 280252, "start": 2820.96, "end": 2824.16, "text": " Try it and tell us if it was too hard.", "tokens": [51286, 6526, 309, 293, 980, 505, 498, 309, 390, 886, 1152, 13, 51446], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 692, "seek": 280252, "start": 2824.16, "end": 2825.4, "text": " Hey.", "tokens": [51446, 1911, 13, 51508], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 693, "seek": 280252, "start": 2825.4, "end": 2828.6, "text": " Thanks for the talk.", "tokens": [51508, 2561, 337, 264, 751, 13, 51668], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 694, "seek": 280252, "start": 2828.6, "end": 2832.12, "text": " I'm over here.", "tokens": [51668, 286, 478, 670, 510, 13, 51844], "temperature": 0.0, "avg_logprob": -0.34812931178771345, "compression_ratio": 1.477832512315271, "no_speech_prob": 0.10515537858009338}, {"id": 695, "seek": 283212, "start": 2832.12, "end": 2841.92, "text": " You said that DAX can recognize it as a conflict when Alice renames a function f to g and Bob", "tokens": [50364, 509, 848, 300, 9578, 55, 393, 5521, 309, 382, 257, 6596, 562, 16004, 8124, 1632, 257, 2445, 283, 281, 290, 293, 6085, 50854], "temperature": 0.0, "avg_logprob": -0.21547199200980272, "compression_ratio": 1.467032967032967, "no_speech_prob": 0.022907191887497902}, {"id": 696, "seek": 283212, "start": 2841.92, "end": 2844.92, "text": " adds a call to f concurrently.", "tokens": [50854, 10860, 257, 818, 281, 283, 37702, 356, 13, 51004], "temperature": 0.0, "avg_logprob": -0.21547199200980272, "compression_ratio": 1.467032967032967, "no_speech_prob": 0.022907191887497902}, {"id": 697, "seek": 283212, "start": 2844.92, "end": 2848.7999999999997, "text": " How does that work?", "tokens": [51004, 1012, 775, 300, 589, 30, 51198], "temperature": 0.0, "avg_logprob": -0.21547199200980272, "compression_ratio": 1.467032967032967, "no_speech_prob": 0.022907191887497902}, {"id": 698, "seek": 283212, "start": 2848.7999999999997, "end": 2853.2, "text": " This was a little bit of exaggeration in what I said.", "tokens": [51198, 639, 390, 257, 707, 857, 295, 19123, 399, 294, 437, 286, 848, 13, 51418], "temperature": 0.0, "avg_logprob": -0.21547199200980272, "compression_ratio": 1.467032967032967, "no_speech_prob": 0.022907191887497902}, {"id": 699, "seek": 283212, "start": 2853.2, "end": 2859.56, "text": " What DAX can do is that they don't do just insertions and deletions.", "tokens": [51418, 708, 9578, 55, 393, 360, 307, 300, 436, 500, 380, 360, 445, 8969, 626, 293, 1103, 302, 626, 13, 51736], "temperature": 0.0, "avg_logprob": -0.21547199200980272, "compression_ratio": 1.467032967032967, "no_speech_prob": 0.022907191887497902}, {"id": 700, "seek": 285956, "start": 2859.56, "end": 2864.88, "text": " What they do is they have a command called DAX replace where you can replace an identifier", "tokens": [50364, 708, 436, 360, 307, 436, 362, 257, 5622, 1219, 9578, 55, 7406, 689, 291, 393, 7406, 364, 45690, 50630], "temperature": 0.0, "avg_logprob": -0.23484716415405274, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.035759393125772476}, {"id": 701, "seek": 285956, "start": 2864.88, "end": 2866.68, "text": " with another one.", "tokens": [50630, 365, 1071, 472, 13, 50720], "temperature": 0.0, "avg_logprob": -0.23484716415405274, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.035759393125772476}, {"id": 702, "seek": 285956, "start": 2866.68, "end": 2871.72, "text": " And so they make it commutative with other operations so that they are able to detect", "tokens": [50720, 400, 370, 436, 652, 309, 800, 325, 1166, 365, 661, 7705, 370, 300, 436, 366, 1075, 281, 5531, 50972], "temperature": 0.0, "avg_logprob": -0.23484716415405274, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.035759393125772476}, {"id": 703, "seek": 285956, "start": 2871.72, "end": 2873.16, "text": " a conflict in some cases.", "tokens": [50972, 257, 6596, 294, 512, 3331, 13, 51044], "temperature": 0.0, "avg_logprob": -0.23484716415405274, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.035759393125772476}, {"id": 704, "seek": 285956, "start": 2873.16, "end": 2879.2799999999997, "text": " But I wouldn't rely on it to check for the semantics of my repository.", "tokens": [51044, 583, 286, 2759, 380, 10687, 322, 309, 281, 1520, 337, 264, 4361, 45298, 295, 452, 25841, 13, 51350], "temperature": 0.0, "avg_logprob": -0.23484716415405274, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.035759393125772476}, {"id": 705, "seek": 285956, "start": 2879.2799999999997, "end": 2881.12, "text": " This is just a tool.", "tokens": [51350, 639, 307, 445, 257, 2290, 13, 51442], "temperature": 0.0, "avg_logprob": -0.23484716415405274, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.035759393125772476}, {"id": 706, "seek": 285956, "start": 2881.12, "end": 2887.2, "text": " This isn't meant to solve all the problems of solving conflicts automatically or conflicts", "tokens": [51442, 639, 1943, 380, 4140, 281, 5039, 439, 264, 2740, 295, 12606, 19807, 6772, 420, 19807, 51746], "temperature": 0.0, "avg_logprob": -0.23484716415405274, "compression_ratio": 1.6721991701244814, "no_speech_prob": 0.035759393125772476}, {"id": 707, "seek": 288720, "start": 2887.2, "end": 2892.8399999999997, "text": " are part of a normal working process.", "tokens": [50364, 366, 644, 295, 257, 2710, 1364, 1399, 13, 50646], "temperature": 0.0, "avg_logprob": -0.23864442023678104, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.24602541327476501}, {"id": 708, "seek": 288720, "start": 2892.8399999999997, "end": 2896.64, "text": " As some say, seeing is believing.", "tokens": [50646, 1018, 512, 584, 11, 2577, 307, 16594, 13, 50836], "temperature": 0.0, "avg_logprob": -0.23864442023678104, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.24602541327476501}, {"id": 709, "seek": 288720, "start": 2896.64, "end": 2902.52, "text": " You're working on something that can be called, can be similar to a group where.", "tokens": [50836, 509, 434, 1364, 322, 746, 300, 393, 312, 1219, 11, 393, 312, 2531, 281, 257, 1594, 689, 13, 51130], "temperature": 0.0, "avg_logprob": -0.23864442023678104, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.24602541327476501}, {"id": 710, "seek": 288720, "start": 2902.52, "end": 2911.9199999999996, "text": " So we know that someone like Douglas Engelbart provided a nice demo and showed that people", "tokens": [51130, 407, 321, 458, 300, 1580, 411, 23010, 2469, 338, 47504, 5649, 257, 1481, 10723, 293, 4712, 300, 561, 51600], "temperature": 0.0, "avg_logprob": -0.23864442023678104, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.24602541327476501}, {"id": 711, "seek": 288720, "start": 2911.9199999999996, "end": 2913.52, "text": " actually can use that.", "tokens": [51600, 767, 393, 764, 300, 13, 51680], "temperature": 0.0, "avg_logprob": -0.23864442023678104, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.24602541327476501}, {"id": 712, "seek": 291352, "start": 2913.52, "end": 2917.8, "text": " So you're saying potentially non coders can use that.", "tokens": [50364, 407, 291, 434, 1566, 7263, 2107, 17656, 433, 393, 764, 300, 13, 50578], "temperature": 0.0, "avg_logprob": -0.20559337777151188, "compression_ratio": 1.7080745341614907, "no_speech_prob": 0.2225162833929062}, {"id": 713, "seek": 291352, "start": 2917.8, "end": 2926.64, "text": " But can you or have you some demos or something that can show this actually in action and", "tokens": [50578, 583, 393, 291, 420, 362, 291, 512, 33788, 420, 746, 300, 393, 855, 341, 767, 294, 3069, 293, 51020], "temperature": 0.0, "avg_logprob": -0.20559337777151188, "compression_ratio": 1.7080745341614907, "no_speech_prob": 0.2225162833929062}, {"id": 714, "seek": 291352, "start": 2926.64, "end": 2933.44, "text": " use by the non coders or do you have plans to show something like that?", "tokens": [51020, 764, 538, 264, 2107, 17656, 433, 420, 360, 291, 362, 5482, 281, 855, 746, 411, 300, 30, 51360], "temperature": 0.0, "avg_logprob": -0.20559337777151188, "compression_ratio": 1.7080745341614907, "no_speech_prob": 0.2225162833929062}, {"id": 715, "seek": 291352, "start": 2933.44, "end": 2939.12, "text": " I don't really have a demo of non coders working something.", "tokens": [51360, 286, 500, 380, 534, 362, 257, 10723, 295, 2107, 17656, 433, 1364, 746, 13, 51644], "temperature": 0.0, "avg_logprob": -0.20559337777151188, "compression_ratio": 1.7080745341614907, "no_speech_prob": 0.2225162833929062}, {"id": 716, "seek": 293912, "start": 2939.12, "end": 2943.44, "text": " So the non coders, the specific non coders I was thinking about when I wrote that on", "tokens": [50364, 407, 264, 2107, 17656, 433, 11, 264, 2685, 2107, 17656, 433, 286, 390, 1953, 466, 562, 286, 4114, 300, 322, 50580], "temperature": 0.0, "avg_logprob": -0.18905678536128073, "compression_ratio": 1.7887931034482758, "no_speech_prob": 0.15271900594234467}, {"id": 717, "seek": 293912, "start": 2943.44, "end": 2949.7599999999998, "text": " the slides are people doing like contracts in my company.", "tokens": [50580, 264, 9788, 366, 561, 884, 411, 13952, 294, 452, 2237, 13, 50896], "temperature": 0.0, "avg_logprob": -0.18905678536128073, "compression_ratio": 1.7887931034482758, "no_speech_prob": 0.15271900594234467}, {"id": 718, "seek": 293912, "start": 2949.7599999999998, "end": 2957.16, "text": " So we're using plain text contracts for our customers to make sure that we're on the same", "tokens": [50896, 407, 321, 434, 1228, 11121, 2487, 13952, 337, 527, 4581, 281, 652, 988, 300, 321, 434, 322, 264, 912, 51266], "temperature": 0.0, "avg_logprob": -0.18905678536128073, "compression_ratio": 1.7887931034482758, "no_speech_prob": 0.15271900594234467}, {"id": 719, "seek": 293912, "start": 2957.16, "end": 2961.64, "text": " page and so we're using version control between the sales and implementation to make sure", "tokens": [51266, 3028, 293, 370, 321, 434, 1228, 3037, 1969, 1296, 264, 5763, 293, 11420, 281, 652, 988, 51490], "temperature": 0.0, "avg_logprob": -0.18905678536128073, "compression_ratio": 1.7887931034482758, "no_speech_prob": 0.15271900594234467}, {"id": 720, "seek": 293912, "start": 2961.64, "end": 2965.12, "text": " we're not selling stuff that doesn't exist, for example.", "tokens": [51490, 321, 434, 406, 6511, 1507, 300, 1177, 380, 2514, 11, 337, 1365, 13, 51664], "temperature": 0.0, "avg_logprob": -0.18905678536128073, "compression_ratio": 1.7887931034482758, "no_speech_prob": 0.15271900594234467}, {"id": 721, "seek": 293912, "start": 2965.12, "end": 2967.64, "text": " So yeah, that's that kind of stuff.", "tokens": [51664, 407, 1338, 11, 300, 311, 300, 733, 295, 1507, 13, 51790], "temperature": 0.0, "avg_logprob": -0.18905678536128073, "compression_ratio": 1.7887931034482758, "no_speech_prob": 0.15271900594234467}, {"id": 722, "seek": 296764, "start": 2967.64, "end": 2972.8399999999997, "text": " But it's still very limited and we don't yet have demos, like entire demos of people", "tokens": [50364, 583, 309, 311, 920, 588, 5567, 293, 321, 500, 380, 1939, 362, 33788, 11, 411, 2302, 33788, 295, 561, 50624], "temperature": 0.0, "avg_logprob": -0.303504638671875, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.3003460168838501}, {"id": 723, "seek": 296764, "start": 2972.8399999999997, "end": 2976.7599999999998, "text": " working like a part of the apartment were operating entirely in Pichu because no part", "tokens": [50624, 1364, 411, 257, 644, 295, 264, 9587, 645, 7447, 7696, 294, 430, 480, 84, 570, 572, 644, 50820], "temperature": 0.0, "avg_logprob": -0.303504638671875, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.3003460168838501}, {"id": 724, "seek": 296764, "start": 2976.7599999999998, "end": 2981.08, "text": " of the apartment has, so they've tried, they've started to look at it.", "tokens": [50820, 295, 264, 9587, 575, 11, 370, 436, 600, 3031, 11, 436, 600, 1409, 281, 574, 412, 309, 13, 51036], "temperature": 0.0, "avg_logprob": -0.303504638671875, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.3003460168838501}, {"id": 725, "seek": 296764, "start": 2981.08, "end": 2983.7999999999997, "text": " But no, there's no demo of that.", "tokens": [51036, 583, 572, 11, 456, 311, 572, 10723, 295, 300, 13, 51172], "temperature": 0.0, "avg_logprob": -0.303504638671875, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.3003460168838501}, {"id": 726, "seek": 296764, "start": 2983.7999999999997, "end": 2989.92, "text": " But yeah, we very much love to start collaborating with non coders to make it welcoming and useful", "tokens": [51172, 583, 1338, 11, 321, 588, 709, 959, 281, 722, 30188, 365, 2107, 17656, 433, 281, 652, 309, 17378, 293, 4420, 51478], "temperature": 0.0, "avg_logprob": -0.303504638671875, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.3003460168838501}, {"id": 727, "seek": 296764, "start": 2989.92, "end": 2991.44, "text": " and fun for them.", "tokens": [51478, 293, 1019, 337, 552, 13, 51554], "temperature": 0.0, "avg_logprob": -0.303504638671875, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.3003460168838501}, {"id": 728, "seek": 296764, "start": 2991.44, "end": 2992.92, "text": " So you think you can do that actually?", "tokens": [51554, 407, 291, 519, 291, 393, 360, 300, 767, 30, 51628], "temperature": 0.0, "avg_logprob": -0.303504638671875, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.3003460168838501}, {"id": 729, "seek": 296764, "start": 2992.92, "end": 2994.44, "text": " Yeah, I'm pretty sure I can.", "tokens": [51628, 865, 11, 286, 478, 1238, 988, 286, 393, 13, 51704], "temperature": 0.0, "avg_logprob": -0.303504638671875, "compression_ratio": 1.712686567164179, "no_speech_prob": 0.3003460168838501}, {"id": 730, "seek": 299444, "start": 2994.44, "end": 3001.64, "text": " I can explain the entire Pichu in just a few minutes, like the entire UI in just our CLI", "tokens": [50364, 286, 393, 2903, 264, 2302, 430, 480, 84, 294, 445, 257, 1326, 2077, 11, 411, 264, 2302, 15682, 294, 445, 527, 12855, 40, 50724], "temperature": 0.0, "avg_logprob": -0.2061629736122965, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.008880781941115856}, {"id": 731, "seek": 299444, "start": 3001.64, "end": 3004.28, "text": " in just a few minutes to people who've never coded before.", "tokens": [50724, 294, 445, 257, 1326, 2077, 281, 561, 567, 600, 1128, 34874, 949, 13, 50856], "temperature": 0.0, "avg_logprob": -0.2061629736122965, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.008880781941115856}, {"id": 732, "seek": 299444, "start": 3004.28, "end": 3009.2000000000003, "text": " So yeah, apply a patch, unapply a patch, that's all you do.", "tokens": [50856, 407, 1338, 11, 3079, 257, 9972, 11, 517, 1746, 356, 257, 9972, 11, 300, 311, 439, 291, 360, 13, 51102], "temperature": 0.0, "avg_logprob": -0.2061629736122965, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.008880781941115856}, {"id": 733, "seek": 299444, "start": 3009.2000000000003, "end": 3013.48, "text": " I thought these, I was extremely excited to see this talk.", "tokens": [51102, 286, 1194, 613, 11, 286, 390, 4664, 2919, 281, 536, 341, 751, 13, 51316], "temperature": 0.0, "avg_logprob": -0.2061629736122965, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.008880781941115856}, {"id": 734, "seek": 299444, "start": 3013.48, "end": 3018.2400000000002, "text": " I started off very skeptical and I completely changed my opinion and I just really appreciate", "tokens": [51316, 286, 1409, 766, 588, 28601, 293, 286, 2584, 3105, 452, 4800, 293, 286, 445, 534, 4449, 51554], "temperature": 0.0, "avg_logprob": -0.2061629736122965, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.008880781941115856}, {"id": 735, "seek": 299444, "start": 3018.2400000000002, "end": 3019.44, "text": " kind of doing that.", "tokens": [51554, 733, 295, 884, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2061629736122965, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.008880781941115856}, {"id": 736, "seek": 299444, "start": 3019.44, "end": 3021.7200000000003, "text": " It was a really effective talk and I'm very glad about that.", "tokens": [51614, 467, 390, 257, 534, 4942, 751, 293, 286, 478, 588, 5404, 466, 300, 13, 51728], "temperature": 0.0, "avg_logprob": -0.2061629736122965, "compression_ratio": 1.683206106870229, "no_speech_prob": 0.008880781941115856}, {"id": 737, "seek": 302172, "start": 3021.8399999999997, "end": 3028.8399999999997, "text": " I wanted to say regarding operational transforms versus the directed graph model that you have,", "tokens": [50370, 286, 1415, 281, 584, 8595, 16607, 35592, 5717, 264, 12898, 4295, 2316, 300, 291, 362, 11, 50720], "temperature": 0.0, "avg_logprob": -0.1735939733760873, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.04551154002547264}, {"id": 738, "seek": 302172, "start": 3028.8399999999997, "end": 3033.8399999999997, "text": " I noticed that you had, there are boxes that you've drawn for operational transforms that", "tokens": [50720, 286, 5694, 300, 291, 632, 11, 456, 366, 9002, 300, 291, 600, 10117, 337, 16607, 35592, 300, 50970], "temperature": 0.0, "avg_logprob": -0.1735939733760873, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.04551154002547264}, {"id": 739, "seek": 302172, "start": 3033.8399999999997, "end": 3038.08, "text": " seemed similar when you drew the same boxes to describe your category theory, sorry, your", "tokens": [50970, 6576, 2531, 562, 291, 12804, 264, 912, 9002, 281, 6786, 428, 7719, 5261, 11, 2597, 11, 428, 51182], "temperature": 0.0, "avg_logprob": -0.1735939733760873, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.04551154002547264}, {"id": 740, "seek": 302172, "start": 3038.08, "end": 3040.08, "text": " directed graph process.", "tokens": [51182, 12898, 4295, 1399, 13, 51282], "temperature": 0.0, "avg_logprob": -0.1735939733760873, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.04551154002547264}, {"id": 741, "seek": 302172, "start": 3040.08, "end": 3046.04, "text": " The question I wanted to ask is, could you view the vertices of the operational transform", "tokens": [51282, 440, 1168, 286, 1415, 281, 1029, 307, 11, 727, 291, 1910, 264, 32053, 295, 264, 16607, 4088, 51580], "temperature": 0.0, "avg_logprob": -0.1735939733760873, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.04551154002547264}, {"id": 742, "seek": 302172, "start": 3046.04, "end": 3050.8399999999997, "text": " block as every vertex is the entire state of the document?", "tokens": [51580, 3461, 382, 633, 28162, 307, 264, 2302, 1785, 295, 264, 4166, 30, 51820], "temperature": 0.0, "avg_logprob": -0.1735939733760873, "compression_ratio": 1.8589211618257262, "no_speech_prob": 0.04551154002547264}, {"id": 743, "seek": 305084, "start": 3050.96, "end": 3056.2000000000003, "text": " I want to ask you, is it correct to say that your directed graph model instead of having", "tokens": [50370, 286, 528, 281, 1029, 291, 11, 307, 309, 3006, 281, 584, 300, 428, 12898, 4295, 2316, 2602, 295, 1419, 50632], "temperature": 0.0, "avg_logprob": -0.26080976713688003, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.005026169586926699}, {"id": 744, "seek": 305084, "start": 3056.2000000000003, "end": 3060.76, "text": " each vertex be the entire state of the document, is instead individual byte ranges?", "tokens": [50632, 1184, 28162, 312, 264, 2302, 1785, 295, 264, 4166, 11, 307, 2602, 2609, 40846, 22526, 30, 50860], "temperature": 0.0, "avg_logprob": -0.26080976713688003, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.005026169586926699}, {"id": 745, "seek": 305084, "start": 3060.76, "end": 3067.76, "text": " So I guess would you say that this analogy to operational transforms is kind of correct", "tokens": [50860, 407, 286, 2041, 576, 291, 584, 300, 341, 21663, 281, 16607, 35592, 307, 733, 295, 3006, 51210], "temperature": 0.0, "avg_logprob": -0.26080976713688003, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.005026169586926699}, {"id": 746, "seek": 305084, "start": 3067.76, "end": 3072.96, "text": " in that each vertex is not the entire state and part of the reason why I would say Pjul", "tokens": [51210, 294, 300, 1184, 28162, 307, 406, 264, 2302, 1785, 293, 644, 295, 264, 1778, 983, 286, 576, 584, 430, 73, 425, 51470], "temperature": 0.0, "avg_logprob": -0.26080976713688003, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.005026169586926699}, {"id": 747, "seek": 305084, "start": 3072.96, "end": 3079.96, "text": " and, sorry, I mispronounced that, Pjul and the rest of your software I think works, I", "tokens": [51470, 293, 11, 2597, 11, 286, 3346, 1424, 266, 37879, 300, 11, 430, 73, 425, 293, 264, 1472, 295, 428, 4722, 286, 519, 1985, 11, 286, 51820], "temperature": 0.0, "avg_logprob": -0.26080976713688003, "compression_ratio": 1.757085020242915, "no_speech_prob": 0.005026169586926699}, {"id": 748, "seek": 307996, "start": 3080.08, "end": 3084.32, "text": " think it's because it has less of a dependency on the entire state of the document.", "tokens": [50370, 519, 309, 311, 570, 309, 575, 1570, 295, 257, 33621, 322, 264, 2302, 1785, 295, 264, 4166, 13, 50582], "temperature": 0.0, "avg_logprob": -0.2112393998007738, "compression_ratio": 1.79, "no_speech_prob": 0.016614163294434547}, {"id": 749, "seek": 307996, "start": 3084.32, "end": 3087.68, "text": " So I don't know if I explained it right, but I felt like I had a realization as all and", "tokens": [50582, 407, 286, 500, 380, 458, 498, 286, 8825, 309, 558, 11, 457, 286, 2762, 411, 286, 632, 257, 25138, 382, 439, 293, 50750], "temperature": 0.0, "avg_logprob": -0.2112393998007738, "compression_ratio": 1.79, "no_speech_prob": 0.016614163294434547}, {"id": 750, "seek": 307996, "start": 3087.68, "end": 3091.56, "text": " I wanted to know whether you had, I guess, thoughts about how this directed graph model", "tokens": [50750, 286, 1415, 281, 458, 1968, 291, 632, 11, 286, 2041, 11, 4598, 466, 577, 341, 12898, 4295, 2316, 50944], "temperature": 0.0, "avg_logprob": -0.2112393998007738, "compression_ratio": 1.79, "no_speech_prob": 0.016614163294434547}, {"id": 751, "seek": 307996, "start": 3091.56, "end": 3094.8, "text": " is kind of inherently easier or harder than operation.", "tokens": [50944, 307, 733, 295, 27993, 3571, 420, 6081, 813, 6916, 13, 51106], "temperature": 0.0, "avg_logprob": -0.2112393998007738, "compression_ratio": 1.79, "no_speech_prob": 0.016614163294434547}, {"id": 752, "seek": 307996, "start": 3094.8, "end": 3099.04, "text": " To me it makes sense why it's stronger and I just wanted to share that realization because", "tokens": [51106, 1407, 385, 309, 1669, 2020, 983, 309, 311, 7249, 293, 286, 445, 1415, 281, 2073, 300, 25138, 570, 51318], "temperature": 0.0, "avg_logprob": -0.2112393998007738, "compression_ratio": 1.79, "no_speech_prob": 0.016614163294434547}, {"id": 753, "seek": 307996, "start": 3099.04, "end": 3100.7200000000003, "text": " there's less dependency on state.", "tokens": [51318, 456, 311, 1570, 33621, 322, 1785, 13, 51402], "temperature": 0.0, "avg_logprob": -0.2112393998007738, "compression_ratio": 1.79, "no_speech_prob": 0.016614163294434547}, {"id": 754, "seek": 307996, "start": 3100.7200000000003, "end": 3103.7200000000003, "text": " I wanted to know if you thought that that was a reasonable description.", "tokens": [51402, 286, 1415, 281, 458, 498, 291, 1194, 300, 300, 390, 257, 10585, 3855, 13, 51552], "temperature": 0.0, "avg_logprob": -0.2112393998007738, "compression_ratio": 1.79, "no_speech_prob": 0.016614163294434547}, {"id": 755, "seek": 307996, "start": 3103.7200000000003, "end": 3107.7200000000003, "text": " Yeah, this is reasonable.", "tokens": [51552, 865, 11, 341, 307, 10585, 13, 51752], "temperature": 0.0, "avg_logprob": -0.2112393998007738, "compression_ratio": 1.79, "no_speech_prob": 0.016614163294434547}, {"id": 756, "seek": 310772, "start": 3107.72, "end": 3112.24, "text": " One comment I would have on that is the main difference with operational transforms is", "tokens": [50364, 1485, 2871, 286, 576, 362, 322, 300, 307, 264, 2135, 2649, 365, 16607, 35592, 307, 50590], "temperature": 0.0, "avg_logprob": -0.22429745256408187, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.3690668046474457}, {"id": 757, "seek": 310772, "start": 3112.24, "end": 3119.24, "text": " that you don't have, if you want to, for example, merge n batches in a sequence, in Pjul you", "tokens": [50590, 300, 291, 500, 380, 362, 11, 498, 291, 528, 281, 11, 337, 1365, 11, 22183, 297, 15245, 279, 294, 257, 8310, 11, 294, 430, 73, 425, 291, 50940], "temperature": 0.0, "avg_logprob": -0.22429745256408187, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.3690668046474457}, {"id": 758, "seek": 310772, "start": 3122.24, "end": 3124.7599999999998, "text": " don't have to look at pairs of batches.", "tokens": [51090, 500, 380, 362, 281, 574, 412, 15494, 295, 15245, 279, 13, 51216], "temperature": 0.0, "avg_logprob": -0.22429745256408187, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.3690668046474457}, {"id": 759, "seek": 310772, "start": 3124.7599999999998, "end": 3128.3599999999997, "text": " You can just apply one batch and then the next one and they don't have to see each other", "tokens": [51216, 509, 393, 445, 3079, 472, 15245, 293, 550, 264, 958, 472, 293, 436, 500, 380, 362, 281, 536, 1184, 661, 51396], "temperature": 0.0, "avg_logprob": -0.22429745256408187, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.3690668046474457}, {"id": 760, "seek": 310772, "start": 3128.3599999999997, "end": 3133.3599999999997, "text": " in order to, they don't modify each other when they're being applied, which is not the case", "tokens": [51396, 294, 1668, 281, 11, 436, 500, 380, 16927, 1184, 661, 562, 436, 434, 885, 6456, 11, 597, 307, 406, 264, 1389, 51646], "temperature": 0.0, "avg_logprob": -0.22429745256408187, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.3690668046474457}, {"id": 761, "seek": 310772, "start": 3133.3599999999997, "end": 3134.3599999999997, "text": " in operational transforms.", "tokens": [51646, 294, 16607, 35592, 13, 51696], "temperature": 0.0, "avg_logprob": -0.22429745256408187, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.3690668046474457}, {"id": 762, "seek": 310772, "start": 3134.3599999999997, "end": 3135.7599999999998, "text": " So that's the main difference.", "tokens": [51696, 407, 300, 311, 264, 2135, 2649, 13, 51766], "temperature": 0.0, "avg_logprob": -0.22429745256408187, "compression_ratio": 1.8617886178861789, "no_speech_prob": 0.3690668046474457}, {"id": 763, "seek": 313576, "start": 3136.2000000000003, "end": 3140.2000000000003, "text": " But I agree that it's confusing that the diagrams look similar.", "tokens": [50386, 583, 286, 3986, 300, 309, 311, 13181, 300, 264, 36709, 574, 2531, 13, 50586], "temperature": 0.0, "avg_logprob": -0.415517216637021, "compression_ratio": 1.2868852459016393, "no_speech_prob": 0.0260945875197649}, {"id": 764, "seek": 313576, "start": 3146.0400000000004, "end": 3154.0400000000004, "text": " What is the killer feature of Pjul that will make it succeed where darks failed?", "tokens": [50878, 708, 307, 264, 13364, 4111, 295, 430, 73, 425, 300, 486, 652, 309, 7754, 689, 2877, 82, 7612, 30, 51278], "temperature": 0.0, "avg_logprob": -0.415517216637021, "compression_ratio": 1.2868852459016393, "no_speech_prob": 0.0260945875197649}, {"id": 765, "seek": 313576, "start": 3155.96, "end": 3156.96, "text": " Performance.", "tokens": [51374, 25047, 13, 51424], "temperature": 0.0, "avg_logprob": -0.415517216637021, "compression_ratio": 1.2868852459016393, "no_speech_prob": 0.0260945875197649}, {"id": 766, "seek": 315696, "start": 3157.96, "end": 3166.96, "text": " Okay, speaking of performance, how much of that is attributable to the change of data", "tokens": [50414, 1033, 11, 4124, 295, 3389, 11, 577, 709, 295, 300, 307, 9080, 32148, 281, 264, 1319, 295, 1412, 50864], "temperature": 0.0, "avg_logprob": -0.32952262509253716, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.017222702503204346}, {"id": 767, "seek": 315696, "start": 3168.16, "end": 3175.16, "text": " structures and algorithms and how much is attributable to rewriting it in Rust or in Haskell?", "tokens": [50924, 9227, 293, 14642, 293, 577, 709, 307, 9080, 32148, 281, 319, 19868, 309, 294, 34952, 420, 294, 8646, 43723, 30, 51274], "temperature": 0.0, "avg_logprob": -0.32952262509253716, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.017222702503204346}, {"id": 768, "seek": 315696, "start": 3176.6, "end": 3178.64, "text": " Most of it is algorithms.", "tokens": [51346, 4534, 295, 309, 307, 14642, 13, 51448], "temperature": 0.0, "avg_logprob": -0.32952262509253716, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.017222702503204346}, {"id": 769, "seek": 315696, "start": 3178.64, "end": 3180.7200000000003, "text": " Almost 100% of it is algorithms.", "tokens": [51448, 12627, 2319, 4, 295, 309, 307, 14642, 13, 51552], "temperature": 0.0, "avg_logprob": -0.32952262509253716, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.017222702503204346}, {"id": 770, "seek": 318072, "start": 3181.04, "end": 3188.04, "text": " Sure, writing in Rust makes it faster than writing it in a garbage collected language,", "tokens": [50380, 4894, 11, 3579, 294, 34952, 1669, 309, 4663, 813, 3579, 309, 294, 257, 14150, 11087, 2856, 11, 50730], "temperature": 0.0, "avg_logprob": -0.30724671829578487, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.07097072154283524}, {"id": 771, "seek": 318072, "start": 3189.7999999999997, "end": 3191.64, "text": " but this is just marginal.", "tokens": [50818, 457, 341, 307, 445, 16885, 13, 50910], "temperature": 0.0, "avg_logprob": -0.30724671829578487, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.07097072154283524}, {"id": 772, "seek": 318072, "start": 3191.64, "end": 3198.3999999999996, "text": " The main thing about Rust is that it allows you to write really low level stuff that allows", "tokens": [50910, 440, 2135, 551, 466, 34952, 307, 300, 309, 4045, 291, 281, 2464, 534, 2295, 1496, 1507, 300, 4045, 51248], "temperature": 0.0, "avg_logprob": -0.30724671829578487, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.07097072154283524}, {"id": 773, "seek": 318072, "start": 3198.3999999999996, "end": 3200.56, "text": " you to build different kinds of algorithms.", "tokens": [51248, 291, 281, 1322, 819, 3685, 295, 14642, 13, 51356], "temperature": 0.0, "avg_logprob": -0.30724671829578487, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.07097072154283524}, {"id": 774, "seek": 318072, "start": 3200.56, "end": 3207.56, "text": " For example, Senakiria, I cannot see how this could be written in Haskell or OCaml, but", "tokens": [51356, 1171, 1365, 11, 3862, 514, 347, 654, 11, 286, 2644, 536, 577, 341, 727, 312, 3720, 294, 8646, 43723, 420, 422, 31030, 75, 11, 457, 51706], "temperature": 0.0, "avg_logprob": -0.30724671829578487, "compression_ratio": 1.5529953917050692, "no_speech_prob": 0.07097072154283524}, {"id": 775, "seek": 320756, "start": 3208.56, "end": 3210.88, "text": " it would be really, really painful.", "tokens": [50414, 309, 576, 312, 534, 11, 534, 11697, 13, 50530], "temperature": 0.0, "avg_logprob": -0.24936292459676554, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.02317066118121147}, {"id": 776, "seek": 320756, "start": 3210.88, "end": 3215.96, "text": " Rust makes it much easier because this is low level stuff and this is where you can get", "tokens": [50530, 34952, 1669, 309, 709, 3571, 570, 341, 307, 2295, 1496, 1507, 293, 341, 307, 689, 291, 393, 483, 50784], "temperature": 0.0, "avg_logprob": -0.24936292459676554, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.02317066118121147}, {"id": 777, "seek": 320756, "start": 3215.96, "end": 3217.7599999999998, "text": " most optimizations.", "tokens": [50784, 881, 5028, 14455, 13, 50874], "temperature": 0.0, "avg_logprob": -0.24936292459676554, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.02317066118121147}, {"id": 778, "seek": 320756, "start": 3217.7599999999998, "end": 3224.7599999999998, "text": " But yeah, performance, Pjul is, it was doubly exponentially faster than darks for mergers.", "tokens": [50874, 583, 1338, 11, 3389, 11, 430, 73, 425, 307, 11, 309, 390, 10831, 356, 37330, 4663, 813, 2877, 82, 337, 3551, 9458, 13, 51224], "temperature": 0.0, "avg_logprob": -0.24936292459676554, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.02317066118121147}, {"id": 779, "seek": 320756, "start": 3226.48, "end": 3232.36, "text": " So back when, like two years ago when darks had the exponential merge problem, this has", "tokens": [51310, 407, 646, 562, 11, 411, 732, 924, 2057, 562, 2877, 82, 632, 264, 21510, 22183, 1154, 11, 341, 575, 51604], "temperature": 0.0, "avg_logprob": -0.24936292459676554, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.02317066118121147}, {"id": 780, "seek": 320756, "start": 3232.36, "end": 3233.56, "text": " been fixed since then.", "tokens": [51604, 668, 6806, 1670, 550, 13, 51664], "temperature": 0.0, "avg_logprob": -0.24936292459676554, "compression_ratio": 1.554054054054054, "no_speech_prob": 0.02317066118121147}, {"id": 781, "seek": 323356, "start": 3233.56, "end": 3239.2799999999997, "text": " And we're only exponentially faster than them there.", "tokens": [50364, 400, 321, 434, 787, 37330, 4663, 813, 552, 456, 13, 50650], "temperature": 0.0, "avg_logprob": -0.1498162481519911, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0233970507979393}, {"id": 782, "seek": 323356, "start": 3239.2799999999997, "end": 3243.52, "text": " So for example, if you want to merge a patch, if you have a really large file with a really", "tokens": [50650, 407, 337, 1365, 11, 498, 291, 528, 281, 22183, 257, 9972, 11, 498, 291, 362, 257, 534, 2416, 3991, 365, 257, 534, 50862], "temperature": 0.0, "avg_logprob": -0.1498162481519911, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0233970507979393}, {"id": 783, "seek": 323356, "start": 3243.52, "end": 3248.12, "text": " long history in Pjul and you want to apply a patch in the middle of that file, this will", "tokens": [50862, 938, 2503, 294, 430, 73, 425, 293, 291, 528, 281, 3079, 257, 9972, 294, 264, 2808, 295, 300, 3991, 11, 341, 486, 51092], "temperature": 0.0, "avg_logprob": -0.1498162481519911, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0233970507979393}, {"id": 784, "seek": 323356, "start": 3248.12, "end": 3253.56, "text": " take a time logarithmic in the size of the file.", "tokens": [51092, 747, 257, 565, 41473, 355, 13195, 294, 264, 2744, 295, 264, 3991, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1498162481519911, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0233970507979393}, {"id": 785, "seek": 323356, "start": 3253.56, "end": 3260.08, "text": " In Git, you have to look at the entire file, do a deep pre between that file and your patch", "tokens": [51364, 682, 16939, 11, 291, 362, 281, 574, 412, 264, 2302, 3991, 11, 360, 257, 2452, 659, 1296, 300, 3991, 293, 428, 9972, 51690], "temperature": 0.0, "avg_logprob": -0.1498162481519911, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0233970507979393}, {"id": 786, "seek": 323356, "start": 3260.08, "end": 3261.0, "text": " and then apply that.", "tokens": [51690, 293, 550, 3079, 300, 13, 51736], "temperature": 0.0, "avg_logprob": -0.1498162481519911, "compression_ratio": 1.7400881057268722, "no_speech_prob": 0.0233970507979393}, {"id": 787, "seek": 326100, "start": 3261.0, "end": 3262.84, "text": " So it's linear in the size of the file.", "tokens": [50364, 407, 309, 311, 8213, 294, 264, 2744, 295, 264, 3991, 13, 50456], "temperature": 0.0, "avg_logprob": -0.21096347059522355, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.039733923971652985}, {"id": 788, "seek": 326100, "start": 3262.84, "end": 3265.44, "text": " So we're still exponentially faster than that.", "tokens": [50456, 407, 321, 434, 920, 37330, 4663, 813, 300, 13, 50586], "temperature": 0.0, "avg_logprob": -0.21096347059522355, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.039733923971652985}, {"id": 789, "seek": 326100, "start": 3265.44, "end": 3271.64, "text": " Of course it doesn't matter because most files are not so crazily large that we can see the", "tokens": [50586, 2720, 1164, 309, 1177, 380, 1871, 570, 881, 7098, 366, 406, 370, 46348, 953, 2416, 300, 321, 393, 536, 264, 50896], "temperature": 0.0, "avg_logprob": -0.21096347059522355, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.039733923971652985}, {"id": 790, "seek": 326100, "start": 3271.64, "end": 3276.24, "text": " difference in the algorithmic complexity between Git and Pjul.", "tokens": [50896, 2649, 294, 264, 9284, 299, 14024, 1296, 16939, 293, 430, 73, 425, 13, 51126], "temperature": 0.0, "avg_logprob": -0.21096347059522355, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.039733923971652985}, {"id": 791, "seek": 326100, "start": 3276.24, "end": 3278.84, "text": " But on really, really large files, this would matter.", "tokens": [51126, 583, 322, 534, 11, 534, 2416, 7098, 11, 341, 576, 1871, 13, 51256], "temperature": 0.0, "avg_logprob": -0.21096347059522355, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.039733923971652985}, {"id": 792, "seek": 326100, "start": 3278.84, "end": 3285.6, "text": " So what that means is, yeah, killer feature, you can scale to mono repos where darks, I've", "tokens": [51256, 407, 437, 300, 1355, 307, 11, 1338, 11, 13364, 4111, 11, 291, 393, 4373, 281, 35624, 1085, 329, 689, 2877, 82, 11, 286, 600, 51594], "temperature": 0.0, "avg_logprob": -0.21096347059522355, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.039733923971652985}, {"id": 793, "seek": 326100, "start": 3285.6, "end": 3288.92, "text": " seen it fail on a paper.", "tokens": [51594, 1612, 309, 3061, 322, 257, 3035, 13, 51760], "temperature": 0.0, "avg_logprob": -0.21096347059522355, "compression_ratio": 1.5868725868725868, "no_speech_prob": 0.039733923971652985}, {"id": 794, "seek": 328892, "start": 3289.2400000000002, "end": 3295.44, "text": " I've seen it take, I've seen, merged this take a really, really long time, several minutes", "tokens": [50380, 286, 600, 1612, 309, 747, 11, 286, 600, 1612, 11, 36427, 341, 747, 257, 534, 11, 534, 938, 565, 11, 2940, 2077, 50690], "temperature": 0.0, "avg_logprob": -0.29181614169826753, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.008142655715346336}, {"id": 795, "seek": 328892, "start": 3295.44, "end": 3300.0, "text": " on the mathematics paper with 10 pages of latex.", "tokens": [50690, 322, 264, 18666, 3035, 365, 1266, 7183, 295, 3469, 87, 13, 50918], "temperature": 0.0, "avg_logprob": -0.29181614169826753, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.008142655715346336}, {"id": 796, "seek": 328892, "start": 3300.0, "end": 3306.84, "text": " And here we're like, everything works in milliseconds or less.", "tokens": [50918, 400, 510, 321, 434, 411, 11, 1203, 1985, 294, 34184, 420, 1570, 13, 51260], "temperature": 0.0, "avg_logprob": -0.29181614169826753, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.008142655715346336}, {"id": 797, "seek": 328892, "start": 3306.84, "end": 3313.4, "text": " And because of the fear, like the scalability to mono repos in large files is not done using", "tokens": [51260, 400, 570, 295, 264, 4240, 11, 411, 264, 15664, 2310, 281, 35624, 1085, 329, 294, 2416, 7098, 307, 406, 1096, 1228, 51588], "temperature": 0.0, "avg_logprob": -0.29181614169826753, "compression_ratio": 1.5128205128205128, "no_speech_prob": 0.008142655715346336}, {"id": 798, "seek": 331340, "start": 3313.4, "end": 3318.6, "text": " extra hacks or extra layers or extra LFSs or extra sub modules or whatnot.", "tokens": [50364, 2857, 33617, 420, 2857, 7914, 420, 2857, 441, 29318, 82, 420, 2857, 1422, 16679, 420, 25882, 13, 50624], "temperature": 0.0, "avg_logprob": -0.4380203058690201, "compression_ratio": 1.5248618784530388, "no_speech_prob": 0.011896408163011074}, {"id": 799, "seek": 331340, "start": 3318.6, "end": 3322.6800000000003, "text": " They're just like a byproduct of our design.", "tokens": [50624, 814, 434, 445, 411, 257, 538, 33244, 295, 527, 1715, 13, 50828], "temperature": 0.0, "avg_logprob": -0.4380203058690201, "compression_ratio": 1.5248618784530388, "no_speech_prob": 0.011896408163011074}, {"id": 800, "seek": 331340, "start": 3322.6800000000003, "end": 3326.28, "text": " They're just, yeah, these are the killer features.", "tokens": [50828, 814, 434, 445, 11, 1338, 11, 613, 366, 264, 13364, 4122, 13, 51008], "temperature": 0.0, "avg_logprob": -0.4380203058690201, "compression_ratio": 1.5248618784530388, "no_speech_prob": 0.011896408163011074}, {"id": 801, "seek": 331340, "start": 3326.28, "end": 3328.92, "text": " I don't know if I answered the question.", "tokens": [51008, 286, 500, 380, 458, 498, 286, 10103, 264, 1168, 13, 51140], "temperature": 0.0, "avg_logprob": -0.4380203058690201, "compression_ratio": 1.5248618784530388, "no_speech_prob": 0.011896408163011074}, {"id": 802, "seek": 331340, "start": 3332.44, "end": 3337.48, "text": " I get the name of Sanakya for dictionary, but why the name Pjul?", "tokens": [51316, 286, 483, 264, 1315, 295, 5271, 514, 3016, 337, 25890, 11, 457, 983, 264, 1315, 430, 73, 425, 30, 51568], "temperature": 0.0, "avg_logprob": -0.4380203058690201, "compression_ratio": 1.5248618784530388, "no_speech_prob": 0.011896408163011074}, {"id": 803, "seek": 333748, "start": 3337.56, "end": 3345.08, "text": " Oh, this is the name of a South American bird that has the property that it lays nest.", "tokens": [50368, 876, 11, 341, 307, 264, 1315, 295, 257, 4242, 2665, 5255, 300, 575, 264, 4707, 300, 309, 32714, 15646, 13, 50744], "temperature": 0.0, "avg_logprob": -0.29631746732271635, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.009801648557186127}, {"id": 804, "seek": 333748, "start": 3345.08, "end": 3351.56, "text": " It builds a nest cooperatively in between a group of birds.", "tokens": [50744, 467, 15182, 257, 15646, 13414, 19020, 294, 1296, 257, 1594, 295, 9009, 13, 51068], "temperature": 0.0, "avg_logprob": -0.29631746732271635, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.009801648557186127}, {"id": 805, "seek": 333748, "start": 3351.56, "end": 3357.88, "text": " And then all the females of the group lay their eggs in the same nest and they take turns to keep them warm.", "tokens": [51068, 400, 550, 439, 264, 21529, 295, 264, 1594, 2360, 641, 6466, 294, 264, 912, 15646, 293, 436, 747, 4523, 281, 1066, 552, 4561, 13, 51384], "temperature": 0.0, "avg_logprob": -0.29631746732271635, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.009801648557186127}, {"id": 806, "seek": 333748, "start": 3357.88, "end": 3361.08, "text": " And so, yeah, it's just a metaphor.", "tokens": [51384, 400, 370, 11, 1338, 11, 309, 311, 445, 257, 19157, 13, 51544], "temperature": 0.0, "avg_logprob": -0.29631746732271635, "compression_ratio": 1.5561497326203209, "no_speech_prob": 0.009801648557186127}, {"id": 807, "seek": 336108, "start": 3361.08, "end": 3366.36, "text": " Okay, our time is up.", "tokens": [50364, 1033, 11, 527, 565, 307, 493, 13, 50628], "temperature": 0.0, "avg_logprob": -0.5369747082392374, "compression_ratio": 0.9354838709677419, "no_speech_prob": 0.028516538441181183}, {"id": 808, "seek": 336108, "start": 3366.36, "end": 3368.6, "text": " And so let's thank again.", "tokens": [50628, 400, 370, 718, 311, 1309, 797, 13, 50740], "temperature": 0.0, "avg_logprob": -0.5369747082392374, "compression_ratio": 0.9354838709677419, "no_speech_prob": 0.028516538441181183}, {"id": 809, "seek": 336108, "start": 3368.6, "end": 3371.24, "text": " Thank you.", "tokens": [50740, 1044, 291, 13, 50872], "temperature": 0.0, "avg_logprob": -0.5369747082392374, "compression_ratio": 0.9354838709677419, "no_speech_prob": 0.028516538441181183}], "language": "en"}