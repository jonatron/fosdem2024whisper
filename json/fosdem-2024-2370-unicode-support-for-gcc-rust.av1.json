{"text": " Okay, so unique code support for GCC Rust. Okay, it's here. Sorry, wait a moment please. Okay, let me start my presentation, Unicode Support for GCC Rust frontend. And here's today's outline. First, I'll explain about my project and then how Unicode can be used in Rust. And then I'll explain about how we implement Unicode support in GCC Rust. And then I briefly explain about, introduce about two mongering schemes in Rust and then summary. So first, let me introduce a little bit about myself. My name is Raiki Tamura, and I'm an undergraduate student at Kyoto University in Japan. And I participated at Google Summer of Code 2023, and I worked with GCC organization. And other program and my main interests are compilers and low level program such as emulators. So next, I'll explain about my project. I worked on Unicode support for GCC Rust as a Google Summer of Code 2023 project last summer. And Google Summer of Code is a global online mentoring program where students work with open source organization, and they write some code and contribute to the organization. And now, I'm continuously working on supporting the new Rust manga in GCC Rust. So next, Unicode in Rust. You can use Unicode characters in Rust program, and first, you can know as key new lines and white spaces in Rust program. And next, you can create name attribute to specify the name of your Rust program and the values of this attribute accepts Unicode alphabetic and numeric characters and which includes also known as key characters such as alphabet from various languages. And last, you can use more known as key characters for identity. For example, below, you can find Germany characters and Japanese characters and Korean characters. And you can also use all varieties identifiers. Next, let's more deeply dig into Rust identifiers. Rust adapt the syntax of identifiers defining Uax31 which is a part of Unicode standard. And Uax31 is also adapted by ECMAScript, that is JavaScript, C++, Python, and other many languages. So the syntax of this Uax31 identifier are shown below, and this is something like a generalization of typical Novoski identifiers in programming languages. And in Rust, after identifiers being talked about, their normalization to special form is called normalization form C, shortly NFC, so that compiler can compare the same identifiers but with different encodings. So identifiers are normalized to some normalization form. So next, implementation. So before my project starts, there are already other front-end, GCC front-end, which supports Unicode. For example, libcpp is a C-pre-processing DCC, which implements lexer. And also, C++, as you remember, C++ adapts the same syntax of Unicode identifiers as Rust. So I took a look at it first, and next are also go front-end, go language supports Unicode, but go adapts different syntax for identifiers, so... but I read the implementation of DCC go. So my implementation is divided into three parts. First part is lexer part. In the first part, we modify the lexer to accept Unicode characters, and second part is the great-name attribute part. We added validation for values of the great-name attribute. And we checked if the values of the great-name only has Unicode alphabetical numeric characters, and last, the mangler part. We modify the mangler to handle Unicode identifiers. So the first part, the lexer part, in order to look up character properties, for example, identifiers... So we have to tell the compiler which characters can be used as identifiers, and which characters cannot be used for identifiers. So we have to tell the compiler some Unicode properties. So in order to look up such Unicode properties, we'll use some functions already in libcpp, and for other missing properties, we generated a header file from Unicode data files. Unicode data files are distributed by Unicode.org at the Unicode official site. And to achieve this, we wrote a Python script, and we pass... which passes Unicode data files and then generate C++ header files. So this is the part of the generated header file, which contains such boring table. So the next part is the great-name implementing, great-name attribute. So this is quite a simple part because all we have to do is to use a generated header file and add it to validation to the values of the identifiers. And the last part is the mangler part. First of all, we have to modify the Rust default mangler to handle Unicode characters. So the default mangler is called legacy, and legacy mangling schemes escapes non-asky characters as their code point. And also, we have to implement a new Rust mangler scheme, which is called v0. And in v0, identifiers are encoded as punicode, which is used in WebBrowser or something like that. And implementing v0.mangler to DCCRS is now still in progress. So here, I briefly explain about mangling schemes. There are two mangling schemes in Rust, legacy and v0. You can pass options to switch this mangler scheme. So in Rust C, you can use C symbol mangling version option, and in case of DCC, you can use f Rust mangling option. And v0 was introduced to Rust C on 2019, and it is used in the Rust for Linux project for some reason. I'll explain it later. So implementing v0 is so important for DCCRS project. So here, let me compare the two mangling schemes. In legacy mangling scheme, legacy symbols start with underscore z prefix, which conflict Italian ABI, which is used in C++. And v0 uses underscore r, which is unique to Rust. And next, used characters are different in legacy mangling schemes. Mangled symbol uses ASCII alphabet and ASCII number, and also uses Dara signs and period. And on the other hand, in v0, mangled symbol uses ASCII alphabet and number and underscore. So speaking of Dara signs, Dara signs are vendor-specific characters in mangled symbols. So typically, it is preferable that we avoid using these symbols. So next, type information. Basically, legacy symbols doesn't contain any type information. On the other hand, v0 has rich type information such as generic types and inherent implementation in Rust, or tried implementation in Rust, and more. And for example, these are contents namespaces like modules in Rust. And Rust, speaking of Unicode identifiers, you know, as you remember, legacy escapes Unicode characters as code points. On the other hand, v0 uses punicode to encode Unicode identifiers. So let's look at a simple example of a two-mangling scheme. If you define this function in Rust, you can see two-mangled symbols. And highlighted part is corresponding to the name of the function. And you can find Dara signs in legacy mangled scheme, which is vendor-specific characters. And you can also find a invisible symbol. You can also find a punicode encoded symbols. This is a hero part of this slide. So in summary, as a result of GSOC-223, GCCRS supports Unicode. And Rust compiler uses Unicode normalization and punicode encoding, and implementing the new-visor-mangled to GCCRS is now in progress. Thank you for free software foundation for supporting me to attend this conference. And I would like also thank to my mentors, Philippa and Arthur and other GCCRS team and another GSOC student, Mahat. And that's all. Thank you for listening. Thank you. So we have a few minutes to questions. Four minutes for questions. If people have questions. Hi. You showed the example for like the new and the old mangling. And how I can say, I can't understand how you would look at that and know if it's Unicode or if it's someone actually wrote U7 blah blah blah blah as a name of function. So how can you identify that? Oh, okay. So if I understand your question correctly, are there questions that you cannot find part corresponding to the name of function, right? Yeah, I cannot look at this and see, right, from U7 onwards, this is Unicode encoding and not something that was actually written by the user. Sorry, one more please. It's just like, imagine some user decided to write a function and they decided to call the function U7 KED blah blah blah blah. How can I tell if this encoding is saved, the user wrote that exactly, or if they used the Unicode? Okay, so your question is that you cannot tell this symbol is encoded using Unicode or low ASCII data. Oh, if it is verbating. Okay, so in visual symbol, you can find the first U character, right? So this means Unicode encoding and then you can find 7, which is a length of character string from K to H, which is an encoded part. So, yeah, thank you. One minute left for questions. Yeah, so my question is how much effort would it be for you now, after you know all this, to improve the existing lecture to also accept Unicode? Is it just 3 for things and an HR or? Are you speaking now? Current situation? Yeah, now I would add to an existing lecture the option to pass Unicode. How much work would it be? I think many developers don't use NoaSki Identifier, but what is so wide so many developers want to use NoaSki Identifier. So in terms of that, I think it is meaningful. Yeah, how much work would it be just if you edit now? Sorry? Would it take you a week or weeks? Maybe three days or so. Okay, all right. Time's up. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.36, "text": " Okay, so unique code support for GCC Rust.", "tokens": [50364, 1033, 11, 370, 3845, 3089, 1406, 337, 460, 11717, 34952, 13, 50782], "temperature": 0.0, "avg_logprob": -0.5792067209879558, "compression_ratio": 0.84, "no_speech_prob": 0.19023597240447998}, {"id": 1, "seek": 836, "start": 8.36, "end": 14.36, "text": " Okay, it's here.", "tokens": [50364, 1033, 11, 309, 311, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.9573118421766493, "compression_ratio": 0.8653846153846154, "no_speech_prob": 0.13957001268863678}, {"id": 2, "seek": 836, "start": 14.36, "end": 26.36, "text": " Sorry, wait a moment please.", "tokens": [50664, 4919, 11, 1699, 257, 1623, 1767, 13, 51264], "temperature": 0.0, "avg_logprob": -0.9573118421766493, "compression_ratio": 0.8653846153846154, "no_speech_prob": 0.13957001268863678}, {"id": 3, "seek": 3836, "start": 39.36, "end": 45.36, "text": " Okay, let me start my presentation,", "tokens": [50414, 1033, 11, 718, 385, 722, 452, 5860, 11, 50714], "temperature": 0.0, "avg_logprob": -0.3069728102002825, "compression_ratio": 1.2657342657342658, "no_speech_prob": 0.05832931399345398}, {"id": 4, "seek": 3836, "start": 45.36, "end": 50.36, "text": " Unicode Support for GCC Rust frontend.", "tokens": [50714, 1156, 299, 1429, 18073, 337, 460, 11717, 34952, 1868, 521, 13, 50964], "temperature": 0.0, "avg_logprob": -0.3069728102002825, "compression_ratio": 1.2657342657342658, "no_speech_prob": 0.05832931399345398}, {"id": 5, "seek": 3836, "start": 50.36, "end": 53.36, "text": " And here's today's outline.", "tokens": [50964, 400, 510, 311, 965, 311, 16387, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3069728102002825, "compression_ratio": 1.2657342657342658, "no_speech_prob": 0.05832931399345398}, {"id": 6, "seek": 3836, "start": 53.36, "end": 60.36, "text": " First, I'll explain about my project and then how Unicode can be used in Rust.", "tokens": [51114, 2386, 11, 286, 603, 2903, 466, 452, 1716, 293, 550, 577, 1156, 299, 1429, 393, 312, 1143, 294, 34952, 13, 51464], "temperature": 0.0, "avg_logprob": -0.3069728102002825, "compression_ratio": 1.2657342657342658, "no_speech_prob": 0.05832931399345398}, {"id": 7, "seek": 6036, "start": 60.36, "end": 68.36, "text": " And then I'll explain about how we implement Unicode support in GCC Rust.", "tokens": [50364, 400, 550, 286, 603, 2903, 466, 577, 321, 4445, 1156, 299, 1429, 1406, 294, 460, 11717, 34952, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1477621282849993, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.16725784540176392}, {"id": 8, "seek": 6036, "start": 68.36, "end": 72.36, "text": " And then I briefly explain about,", "tokens": [50764, 400, 550, 286, 10515, 2903, 466, 11, 50964], "temperature": 0.0, "avg_logprob": -0.1477621282849993, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.16725784540176392}, {"id": 9, "seek": 6036, "start": 72.36, "end": 78.36, "text": " introduce about two mongering schemes in Rust and then summary.", "tokens": [50964, 5366, 466, 732, 275, 556, 1794, 26954, 294, 34952, 293, 550, 12691, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1477621282849993, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.16725784540176392}, {"id": 10, "seek": 6036, "start": 78.36, "end": 83.36, "text": " So first, let me introduce a little bit about myself.", "tokens": [51264, 407, 700, 11, 718, 385, 5366, 257, 707, 857, 466, 2059, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1477621282849993, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.16725784540176392}, {"id": 11, "seek": 6036, "start": 83.36, "end": 85.36, "text": " My name is Raiki Tamura,", "tokens": [51514, 1222, 1315, 307, 7591, 9850, 8540, 2991, 11, 51614], "temperature": 0.0, "avg_logprob": -0.1477621282849993, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.16725784540176392}, {"id": 12, "seek": 6036, "start": 85.36, "end": 89.36, "text": " and I'm an undergraduate student at Kyoto University in Japan.", "tokens": [51614, 293, 286, 478, 364, 19113, 3107, 412, 48470, 3535, 294, 3367, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1477621282849993, "compression_ratio": 1.5120772946859904, "no_speech_prob": 0.16725784540176392}, {"id": 13, "seek": 8936, "start": 89.36, "end": 93.36, "text": " And I participated at Google Summer of Code 2023,", "tokens": [50364, 400, 286, 17978, 412, 3329, 16161, 295, 15549, 44377, 11, 50564], "temperature": 0.0, "avg_logprob": -0.17259554746674327, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.021853627637028694}, {"id": 14, "seek": 8936, "start": 93.36, "end": 98.36, "text": " and I worked with GCC organization.", "tokens": [50564, 293, 286, 2732, 365, 460, 11717, 4475, 13, 50814], "temperature": 0.0, "avg_logprob": -0.17259554746674327, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.021853627637028694}, {"id": 15, "seek": 8936, "start": 98.36, "end": 107.36, "text": " And other program and my main interests are compilers and low level program such as emulators.", "tokens": [50814, 400, 661, 1461, 293, 452, 2135, 8847, 366, 715, 388, 433, 293, 2295, 1496, 1461, 1270, 382, 846, 39265, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17259554746674327, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.021853627637028694}, {"id": 16, "seek": 8936, "start": 107.36, "end": 111.36, "text": " So next, I'll explain about my project.", "tokens": [51264, 407, 958, 11, 286, 603, 2903, 466, 452, 1716, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17259554746674327, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.021853627637028694}, {"id": 17, "seek": 8936, "start": 111.36, "end": 118.36, "text": " I worked on Unicode support for GCC Rust as a Google Summer of Code 2023 project last summer.", "tokens": [51464, 286, 2732, 322, 1156, 299, 1429, 1406, 337, 460, 11717, 34952, 382, 257, 3329, 16161, 295, 15549, 44377, 1716, 1036, 4266, 13, 51814], "temperature": 0.0, "avg_logprob": -0.17259554746674327, "compression_ratio": 1.5621890547263682, "no_speech_prob": 0.021853627637028694}, {"id": 18, "seek": 11836, "start": 118.36, "end": 131.36, "text": " And Google Summer of Code is a global online mentoring program where students work with open source organization,", "tokens": [50364, 400, 3329, 16161, 295, 15549, 307, 257, 4338, 2950, 30257, 1461, 689, 1731, 589, 365, 1269, 4009, 4475, 11, 51014], "temperature": 0.0, "avg_logprob": -0.1281111580984933, "compression_ratio": 1.4431818181818181, "no_speech_prob": 0.012413149699568748}, {"id": 19, "seek": 11836, "start": 131.36, "end": 137.36, "text": " and they write some code and contribute to the organization.", "tokens": [51014, 293, 436, 2464, 512, 3089, 293, 10586, 281, 264, 4475, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1281111580984933, "compression_ratio": 1.4431818181818181, "no_speech_prob": 0.012413149699568748}, {"id": 20, "seek": 11836, "start": 137.36, "end": 144.36, "text": " And now, I'm continuously working on supporting the new Rust manga in GCC Rust.", "tokens": [51314, 400, 586, 11, 286, 478, 15684, 1364, 322, 7231, 264, 777, 34952, 23316, 294, 460, 11717, 34952, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1281111580984933, "compression_ratio": 1.4431818181818181, "no_speech_prob": 0.012413149699568748}, {"id": 21, "seek": 14436, "start": 145.36, "end": 151.36, "text": " So next, Unicode in Rust.", "tokens": [50414, 407, 958, 11, 1156, 299, 1429, 294, 34952, 13, 50714], "temperature": 0.0, "avg_logprob": -0.18784418560209729, "compression_ratio": 1.6013986013986015, "no_speech_prob": 0.0202865581959486}, {"id": 22, "seek": 14436, "start": 151.36, "end": 155.36, "text": " You can use Unicode characters in Rust program,", "tokens": [50714, 509, 393, 764, 1156, 299, 1429, 4342, 294, 34952, 1461, 11, 50914], "temperature": 0.0, "avg_logprob": -0.18784418560209729, "compression_ratio": 1.6013986013986015, "no_speech_prob": 0.0202865581959486}, {"id": 23, "seek": 14436, "start": 155.36, "end": 164.36, "text": " and first, you can know as key new lines and white spaces in Rust program.", "tokens": [50914, 293, 700, 11, 291, 393, 458, 382, 2141, 777, 3876, 293, 2418, 7673, 294, 34952, 1461, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18784418560209729, "compression_ratio": 1.6013986013986015, "no_speech_prob": 0.0202865581959486}, {"id": 24, "seek": 14436, "start": 164.36, "end": 172.36, "text": " And next, you can create name attribute to specify the name of your Rust program", "tokens": [51364, 400, 958, 11, 291, 393, 1884, 1315, 19667, 281, 16500, 264, 1315, 295, 428, 34952, 1461, 51764], "temperature": 0.0, "avg_logprob": -0.18784418560209729, "compression_ratio": 1.6013986013986015, "no_speech_prob": 0.0202865581959486}, {"id": 25, "seek": 17236, "start": 172.36, "end": 178.36, "text": " and the values of this attribute accepts Unicode alphabetic and numeric characters", "tokens": [50364, 293, 264, 4190, 295, 341, 19667, 33538, 1156, 299, 1429, 23339, 299, 293, 7866, 299, 4342, 50664], "temperature": 0.0, "avg_logprob": -0.1713252067565918, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.02157703973352909}, {"id": 26, "seek": 17236, "start": 178.36, "end": 187.36, "text": " and which includes also known as key characters such as alphabet from various languages.", "tokens": [50664, 293, 597, 5974, 611, 2570, 382, 2141, 4342, 1270, 382, 23339, 490, 3683, 8650, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1713252067565918, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.02157703973352909}, {"id": 27, "seek": 17236, "start": 187.36, "end": 192.36, "text": " And last, you can use more known as key characters for identity.", "tokens": [51114, 400, 1036, 11, 291, 393, 764, 544, 2570, 382, 2141, 4342, 337, 6575, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1713252067565918, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.02157703973352909}, {"id": 28, "seek": 17236, "start": 192.36, "end": 201.36, "text": " For example, below, you can find Germany characters and Japanese characters and Korean characters.", "tokens": [51364, 1171, 1365, 11, 2507, 11, 291, 393, 915, 7244, 4342, 293, 5433, 4342, 293, 6933, 4342, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1713252067565918, "compression_ratio": 1.7179487179487178, "no_speech_prob": 0.02157703973352909}, {"id": 29, "seek": 20136, "start": 201.36, "end": 206.36, "text": " And you can also use all varieties identifiers.", "tokens": [50364, 400, 291, 393, 611, 764, 439, 22092, 2473, 23463, 13, 50614], "temperature": 0.0, "avg_logprob": -0.4079716626335593, "compression_ratio": 1.364963503649635, "no_speech_prob": 0.01670980267226696}, {"id": 30, "seek": 20136, "start": 206.36, "end": 213.36, "text": " Next, let's more deeply dig into Rust identifiers.", "tokens": [50614, 3087, 11, 718, 311, 544, 8760, 2528, 666, 34952, 2473, 23463, 13, 50964], "temperature": 0.0, "avg_logprob": -0.4079716626335593, "compression_ratio": 1.364963503649635, "no_speech_prob": 0.01670980267226696}, {"id": 31, "seek": 20136, "start": 213.36, "end": 222.36, "text": " Rust adapt the syntax of identifiers defining Uax31 which is a part of Unicode standard.", "tokens": [50964, 34952, 6231, 264, 28431, 295, 2473, 23463, 17827, 624, 2797, 12967, 597, 307, 257, 644, 295, 1156, 299, 1429, 3832, 13, 51414], "temperature": 0.0, "avg_logprob": -0.4079716626335593, "compression_ratio": 1.364963503649635, "no_speech_prob": 0.01670980267226696}, {"id": 32, "seek": 22236, "start": 223.36, "end": 237.36, "text": " And Uax31 is also adapted by ECMAScript, that is JavaScript, C++, Python, and other many languages.", "tokens": [50414, 400, 624, 2797, 12967, 307, 611, 20871, 538, 19081, 44, 3160, 5944, 11, 300, 307, 15778, 11, 383, 25472, 11, 15329, 11, 293, 661, 867, 8650, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2627276130344557, "compression_ratio": 1.1923076923076923, "no_speech_prob": 0.07327413558959961}, {"id": 33, "seek": 22236, "start": 237.36, "end": 244.36, "text": " So the syntax of this Uax31 identifier are shown below,", "tokens": [51114, 407, 264, 28431, 295, 341, 624, 2797, 12967, 45690, 366, 4898, 2507, 11, 51464], "temperature": 0.0, "avg_logprob": -0.2627276130344557, "compression_ratio": 1.1923076923076923, "no_speech_prob": 0.07327413558959961}, {"id": 34, "seek": 24436, "start": 244.36, "end": 254.36, "text": " and this is something like a generalization of typical Novoski identifiers in programming languages.", "tokens": [50364, 293, 341, 307, 746, 411, 257, 2674, 2144, 295, 7476, 883, 19140, 2984, 2473, 23463, 294, 9410, 8650, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3375291629713409, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.07653162628412247}, {"id": 35, "seek": 24436, "start": 254.36, "end": 263.36, "text": " And in Rust, after identifiers being talked about, their normalization to special form is called normalization form C,", "tokens": [50864, 400, 294, 34952, 11, 934, 2473, 23463, 885, 2825, 466, 11, 641, 2710, 2144, 281, 2121, 1254, 307, 1219, 2710, 2144, 1254, 383, 11, 51314], "temperature": 0.0, "avg_logprob": -0.3375291629713409, "compression_ratio": 1.489795918367347, "no_speech_prob": 0.07653162628412247}, {"id": 36, "seek": 26336, "start": 263.36, "end": 275.36, "text": " shortly NFC, so that compiler can compare the same identifiers but with different encodings.", "tokens": [50364, 13392, 13576, 34, 11, 370, 300, 31958, 393, 6794, 264, 912, 2473, 23463, 457, 365, 819, 2058, 378, 1109, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18699240684509277, "compression_ratio": 1.3888888888888888, "no_speech_prob": 0.044770654290914536}, {"id": 37, "seek": 26336, "start": 275.36, "end": 281.36, "text": " So identifiers are normalized to some normalization form.", "tokens": [50964, 407, 2473, 23463, 366, 48704, 281, 512, 2710, 2144, 1254, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18699240684509277, "compression_ratio": 1.3888888888888888, "no_speech_prob": 0.044770654290914536}, {"id": 38, "seek": 26336, "start": 281.36, "end": 285.36, "text": " So next, implementation.", "tokens": [51264, 407, 958, 11, 11420, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18699240684509277, "compression_ratio": 1.3888888888888888, "no_speech_prob": 0.044770654290914536}, {"id": 39, "seek": 28536, "start": 285.36, "end": 293.36, "text": " So before my project starts, there are already other front-end, GCC front-end, which supports Unicode.", "tokens": [50364, 407, 949, 452, 1716, 3719, 11, 456, 366, 1217, 661, 1868, 12, 521, 11, 460, 11717, 1868, 12, 521, 11, 597, 9346, 1156, 299, 1429, 13, 50764], "temperature": 0.0, "avg_logprob": -0.24872907002766928, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.01919928938150406}, {"id": 40, "seek": 28536, "start": 293.36, "end": 303.36, "text": " For example, libcpp is a C-pre-processing DCC, which implements lexer.", "tokens": [50764, 1171, 1365, 11, 22854, 66, 427, 307, 257, 383, 12, 3712, 12, 41075, 278, 413, 11717, 11, 597, 704, 17988, 476, 87, 260, 13, 51264], "temperature": 0.0, "avg_logprob": -0.24872907002766928, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.01919928938150406}, {"id": 41, "seek": 28536, "start": 303.36, "end": 311.36, "text": " And also, C++, as you remember, C++ adapts the same syntax of Unicode identifiers as Rust.", "tokens": [51264, 400, 611, 11, 383, 25472, 11, 382, 291, 1604, 11, 383, 25472, 23169, 1373, 264, 912, 28431, 295, 1156, 299, 1429, 2473, 23463, 382, 34952, 13, 51664], "temperature": 0.0, "avg_logprob": -0.24872907002766928, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.01919928938150406}, {"id": 42, "seek": 31136, "start": 311.36, "end": 322.36, "text": " So I took a look at it first, and next are also go front-end, go language supports Unicode,", "tokens": [50364, 407, 286, 1890, 257, 574, 412, 309, 700, 11, 293, 958, 366, 611, 352, 1868, 12, 521, 11, 352, 2856, 9346, 1156, 299, 1429, 11, 50914], "temperature": 0.0, "avg_logprob": -0.2317597129128196, "compression_ratio": 1.3285714285714285, "no_speech_prob": 0.05313505232334137}, {"id": 43, "seek": 31136, "start": 322.36, "end": 332.36, "text": " but go adapts different syntax for identifiers, so...", "tokens": [50914, 457, 352, 23169, 1373, 819, 28431, 337, 2473, 23463, 11, 370, 485, 51414], "temperature": 0.0, "avg_logprob": -0.2317597129128196, "compression_ratio": 1.3285714285714285, "no_speech_prob": 0.05313505232334137}, {"id": 44, "seek": 31136, "start": 332.36, "end": 338.36, "text": " but I read the implementation of DCC go.", "tokens": [51414, 457, 286, 1401, 264, 11420, 295, 413, 11717, 352, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2317597129128196, "compression_ratio": 1.3285714285714285, "no_speech_prob": 0.05313505232334137}, {"id": 45, "seek": 33836, "start": 338.36, "end": 343.36, "text": " So my implementation is divided into three parts.", "tokens": [50364, 407, 452, 11420, 307, 6666, 666, 1045, 3166, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18206383200252757, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.0103727076202631}, {"id": 46, "seek": 33836, "start": 343.36, "end": 347.36, "text": " First part is lexer part.", "tokens": [50614, 2386, 644, 307, 476, 87, 260, 644, 13, 50814], "temperature": 0.0, "avg_logprob": -0.18206383200252757, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.0103727076202631}, {"id": 47, "seek": 33836, "start": 347.36, "end": 356.36, "text": " In the first part, we modify the lexer to accept Unicode characters, and second part is the great-name attribute part.", "tokens": [50814, 682, 264, 700, 644, 11, 321, 16927, 264, 476, 87, 260, 281, 3241, 1156, 299, 1429, 4342, 11, 293, 1150, 644, 307, 264, 869, 12, 16344, 19667, 644, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18206383200252757, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.0103727076202631}, {"id": 48, "seek": 33836, "start": 356.36, "end": 363.36, "text": " We added validation for values of the great-name attribute.", "tokens": [51264, 492, 3869, 24071, 337, 4190, 295, 264, 869, 12, 16344, 19667, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18206383200252757, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.0103727076202631}, {"id": 49, "seek": 36336, "start": 364.36, "end": 380.36, "text": " And we checked if the values of the great-name only has Unicode alphabetical numeric characters,", "tokens": [50414, 400, 321, 10033, 498, 264, 4190, 295, 264, 869, 12, 16344, 787, 575, 1156, 299, 1429, 23339, 804, 7866, 299, 4342, 11, 51214], "temperature": 0.0, "avg_logprob": -0.1897707733453489, "compression_ratio": 1.372093023255814, "no_speech_prob": 0.0083127710968256}, {"id": 50, "seek": 36336, "start": 380.36, "end": 383.36, "text": " and last, the mangler part.", "tokens": [51214, 293, 1036, 11, 264, 32432, 1918, 644, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1897707733453489, "compression_ratio": 1.372093023255814, "no_speech_prob": 0.0083127710968256}, {"id": 51, "seek": 36336, "start": 383.36, "end": 389.36, "text": " We modify the mangler to handle Unicode identifiers.", "tokens": [51364, 492, 16927, 264, 32432, 1918, 281, 4813, 1156, 299, 1429, 2473, 23463, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1897707733453489, "compression_ratio": 1.372093023255814, "no_speech_prob": 0.0083127710968256}, {"id": 52, "seek": 38936, "start": 389.36, "end": 401.36, "text": " So the first part, the lexer part, in order to look up character properties, for example, identifiers...", "tokens": [50364, 407, 264, 700, 644, 11, 264, 476, 87, 260, 644, 11, 294, 1668, 281, 574, 493, 2517, 7221, 11, 337, 1365, 11, 2473, 23463, 485, 50964], "temperature": 0.0, "avg_logprob": -0.13733031386035985, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.009982881136238575}, {"id": 53, "seek": 38936, "start": 401.36, "end": 407.36, "text": " So we have to tell the compiler which characters can be used as identifiers,", "tokens": [50964, 407, 321, 362, 281, 980, 264, 31958, 597, 4342, 393, 312, 1143, 382, 2473, 23463, 11, 51264], "temperature": 0.0, "avg_logprob": -0.13733031386035985, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.009982881136238575}, {"id": 54, "seek": 38936, "start": 407.36, "end": 414.36, "text": " and which characters cannot be used for identifiers.", "tokens": [51264, 293, 597, 4342, 2644, 312, 1143, 337, 2473, 23463, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13733031386035985, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.009982881136238575}, {"id": 55, "seek": 41436, "start": 414.36, "end": 419.36, "text": " So we have to tell the compiler some Unicode properties.", "tokens": [50364, 407, 321, 362, 281, 980, 264, 31958, 512, 1156, 299, 1429, 7221, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13889405035203503, "compression_ratio": 1.56, "no_speech_prob": 0.022070612758398056}, {"id": 56, "seek": 41436, "start": 419.36, "end": 427.36, "text": " So in order to look up such Unicode properties, we'll use some functions already in libcpp,", "tokens": [50614, 407, 294, 1668, 281, 574, 493, 1270, 1156, 299, 1429, 7221, 11, 321, 603, 764, 512, 6828, 1217, 294, 22854, 66, 427, 11, 51014], "temperature": 0.0, "avg_logprob": -0.13889405035203503, "compression_ratio": 1.56, "no_speech_prob": 0.022070612758398056}, {"id": 57, "seek": 41436, "start": 427.36, "end": 436.36, "text": " and for other missing properties, we generated a header file from Unicode data files.", "tokens": [51014, 293, 337, 661, 5361, 7221, 11, 321, 10833, 257, 23117, 3991, 490, 1156, 299, 1429, 1412, 7098, 13, 51464], "temperature": 0.0, "avg_logprob": -0.13889405035203503, "compression_ratio": 1.56, "no_speech_prob": 0.022070612758398056}, {"id": 58, "seek": 43636, "start": 436.36, "end": 444.36, "text": " Unicode data files are distributed by Unicode.org at the Unicode official site.", "tokens": [50364, 1156, 299, 1429, 1412, 7098, 366, 12631, 538, 1156, 299, 1429, 13, 4646, 412, 264, 1156, 299, 1429, 4783, 3621, 13, 50764], "temperature": 0.0, "avg_logprob": -0.20452859846212096, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.15393830835819244}, {"id": 59, "seek": 43636, "start": 444.36, "end": 451.36, "text": " And to achieve this, we wrote a Python script, and we pass...", "tokens": [50764, 400, 281, 4584, 341, 11, 321, 4114, 257, 15329, 5755, 11, 293, 321, 1320, 485, 51114], "temperature": 0.0, "avg_logprob": -0.20452859846212096, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.15393830835819244}, {"id": 60, "seek": 43636, "start": 451.36, "end": 458.36, "text": " which passes Unicode data files and then generate C++ header files.", "tokens": [51114, 597, 11335, 1156, 299, 1429, 1412, 7098, 293, 550, 8460, 383, 25472, 23117, 7098, 13, 51464], "temperature": 0.0, "avg_logprob": -0.20452859846212096, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.15393830835819244}, {"id": 61, "seek": 45836, "start": 459.36, "end": 470.36, "text": " So this is the part of the generated header file, which contains such boring table.", "tokens": [50414, 407, 341, 307, 264, 644, 295, 264, 10833, 23117, 3991, 11, 597, 8306, 1270, 9989, 3199, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19899659279065254, "compression_ratio": 1.3628318584070795, "no_speech_prob": 0.009926265105605125}, {"id": 62, "seek": 45836, "start": 470.36, "end": 478.36, "text": " So the next part is the great-name implementing, great-name attribute.", "tokens": [50964, 407, 264, 958, 644, 307, 264, 869, 12, 16344, 18114, 11, 869, 12, 16344, 19667, 13, 51364], "temperature": 0.0, "avg_logprob": -0.19899659279065254, "compression_ratio": 1.3628318584070795, "no_speech_prob": 0.009926265105605125}, {"id": 63, "seek": 47836, "start": 479.36, "end": 491.36, "text": " So this is quite a simple part because all we have to do is to use a generated header file", "tokens": [50414, 407, 341, 307, 1596, 257, 2199, 644, 570, 439, 321, 362, 281, 360, 307, 281, 764, 257, 10833, 23117, 3991, 51014], "temperature": 0.0, "avg_logprob": -0.16053139929677926, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.006152746733278036}, {"id": 64, "seek": 47836, "start": 491.36, "end": 497.36, "text": " and add it to validation to the values of the identifiers.", "tokens": [51014, 293, 909, 309, 281, 24071, 281, 264, 4190, 295, 264, 2473, 23463, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16053139929677926, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.006152746733278036}, {"id": 65, "seek": 47836, "start": 502.36, "end": 505.36, "text": " And the last part is the mangler part.", "tokens": [51564, 400, 264, 1036, 644, 307, 264, 32432, 1918, 644, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16053139929677926, "compression_ratio": 1.4461538461538461, "no_speech_prob": 0.006152746733278036}, {"id": 66, "seek": 50536, "start": 505.36, "end": 512.36, "text": " First of all, we have to modify the Rust default mangler to handle Unicode characters.", "tokens": [50364, 2386, 295, 439, 11, 321, 362, 281, 16927, 264, 34952, 7576, 32432, 1918, 281, 4813, 1156, 299, 1429, 4342, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1922078459230188, "compression_ratio": 1.630057803468208, "no_speech_prob": 0.0030892326030880213}, {"id": 67, "seek": 50536, "start": 512.36, "end": 521.36, "text": " So the default mangler is called legacy, and legacy mangling schemes escapes non-asky characters as their code point.", "tokens": [50714, 407, 264, 7576, 32432, 1918, 307, 1219, 11711, 11, 293, 11711, 32432, 1688, 26954, 43769, 2107, 12, 3863, 88, 4342, 382, 641, 3089, 935, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1922078459230188, "compression_ratio": 1.630057803468208, "no_speech_prob": 0.0030892326030880213}, {"id": 68, "seek": 50536, "start": 521.36, "end": 529.36, "text": " And also, we have to implement a new Rust mangler scheme, which is called v0.", "tokens": [51164, 400, 611, 11, 321, 362, 281, 4445, 257, 777, 34952, 32432, 1918, 12232, 11, 597, 307, 1219, 371, 15, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1922078459230188, "compression_ratio": 1.630057803468208, "no_speech_prob": 0.0030892326030880213}, {"id": 69, "seek": 52936, "start": 529.36, "end": 540.36, "text": " And in v0, identifiers are encoded as punicode, which is used in WebBrowser or something like that.", "tokens": [50364, 400, 294, 371, 15, 11, 2473, 23463, 366, 2058, 12340, 382, 4468, 299, 1429, 11, 597, 307, 1143, 294, 9573, 22170, 30947, 420, 746, 411, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.20488090813159943, "compression_ratio": 1.33125, "no_speech_prob": 0.012160388752818108}, {"id": 70, "seek": 52936, "start": 540.36, "end": 549.36, "text": " And implementing v0.mangler to DCCRS is now still in progress.", "tokens": [50914, 400, 18114, 371, 15, 13, 76, 656, 1918, 281, 9114, 18547, 50, 307, 586, 920, 294, 4205, 13, 51364], "temperature": 0.0, "avg_logprob": -0.20488090813159943, "compression_ratio": 1.33125, "no_speech_prob": 0.012160388752818108}, {"id": 71, "seek": 52936, "start": 551.36, "end": 558.36, "text": " So here, I briefly explain about mangling schemes.", "tokens": [51464, 407, 510, 11, 286, 10515, 2903, 466, 32432, 1688, 26954, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20488090813159943, "compression_ratio": 1.33125, "no_speech_prob": 0.012160388752818108}, {"id": 72, "seek": 55836, "start": 558.36, "end": 562.36, "text": " There are two mangling schemes in Rust, legacy and v0.", "tokens": [50364, 821, 366, 732, 32432, 1688, 26954, 294, 34952, 11, 11711, 293, 371, 15, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14558999240398407, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.0061304387636482716}, {"id": 73, "seek": 55836, "start": 562.36, "end": 568.36, "text": " You can pass options to switch this mangler scheme.", "tokens": [50564, 509, 393, 1320, 3956, 281, 3679, 341, 32432, 1918, 12232, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14558999240398407, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.0061304387636482716}, {"id": 74, "seek": 55836, "start": 568.36, "end": 579.36, "text": " So in Rust C, you can use C symbol mangling version option, and in case of DCC, you can use f Rust mangling option.", "tokens": [50864, 407, 294, 34952, 383, 11, 291, 393, 764, 383, 5986, 32432, 1688, 3037, 3614, 11, 293, 294, 1389, 295, 9114, 34, 11, 291, 393, 764, 283, 34952, 32432, 1688, 3614, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14558999240398407, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.0061304387636482716}, {"id": 75, "seek": 57936, "start": 579.36, "end": 588.36, "text": " And v0 was introduced to Rust C on 2019, and it is used in the Rust for Linux project for some reason.", "tokens": [50364, 400, 371, 15, 390, 7268, 281, 34952, 383, 322, 6071, 11, 293, 309, 307, 1143, 294, 264, 34952, 337, 18734, 1716, 337, 512, 1778, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11846033732096355, "compression_ratio": 1.3795180722891567, "no_speech_prob": 0.0072504677809774876}, {"id": 76, "seek": 57936, "start": 588.36, "end": 590.36, "text": " I'll explain it later.", "tokens": [50814, 286, 603, 2903, 309, 1780, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11846033732096355, "compression_ratio": 1.3795180722891567, "no_speech_prob": 0.0072504677809774876}, {"id": 77, "seek": 57936, "start": 590.36, "end": 597.36, "text": " So implementing v0 is so important for DCCRS project.", "tokens": [50914, 407, 18114, 371, 15, 307, 370, 1021, 337, 9114, 18547, 50, 1716, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11846033732096355, "compression_ratio": 1.3795180722891567, "no_speech_prob": 0.0072504677809774876}, {"id": 78, "seek": 57936, "start": 599.36, "end": 603.36, "text": " So here, let me compare the two mangling schemes.", "tokens": [51364, 407, 510, 11, 718, 385, 6794, 264, 732, 32432, 1688, 26954, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11846033732096355, "compression_ratio": 1.3795180722891567, "no_speech_prob": 0.0072504677809774876}, {"id": 79, "seek": 60336, "start": 603.36, "end": 619.36, "text": " In legacy mangling scheme, legacy symbols start with underscore z prefix, which conflict Italian ABI, which is used in C++.", "tokens": [50364, 682, 11711, 32432, 1688, 12232, 11, 11711, 16944, 722, 365, 37556, 710, 46969, 11, 597, 6596, 10003, 316, 11291, 11, 597, 307, 1143, 294, 383, 25472, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21462848912114682, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.013746870681643486}, {"id": 80, "seek": 60336, "start": 619.36, "end": 625.36, "text": " And v0 uses underscore r, which is unique to Rust.", "tokens": [51164, 400, 371, 15, 4960, 37556, 367, 11, 597, 307, 3845, 281, 34952, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21462848912114682, "compression_ratio": 1.3700787401574803, "no_speech_prob": 0.013746870681643486}, {"id": 81, "seek": 62536, "start": 626.36, "end": 633.36, "text": " And next, used characters are different in legacy mangling schemes.", "tokens": [50414, 400, 958, 11, 1143, 4342, 366, 819, 294, 11711, 32432, 1688, 26954, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2832229705083938, "compression_ratio": 1.2661290322580645, "no_speech_prob": 0.024175364524126053}, {"id": 82, "seek": 62536, "start": 633.36, "end": 645.36, "text": " Mangled symbol uses ASCII alphabet and ASCII number, and also uses Dara signs and period.", "tokens": [50764, 35487, 1493, 5986, 4960, 7469, 34, 9503, 23339, 293, 7469, 34, 9503, 1230, 11, 293, 611, 4960, 413, 2419, 7880, 293, 2896, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2832229705083938, "compression_ratio": 1.2661290322580645, "no_speech_prob": 0.024175364524126053}, {"id": 83, "seek": 64536, "start": 645.36, "end": 655.36, "text": " And on the other hand, in v0, mangled symbol uses ASCII alphabet and number and underscore.", "tokens": [50364, 400, 322, 264, 661, 1011, 11, 294, 371, 15, 11, 32432, 1493, 5986, 4960, 7469, 34, 9503, 23339, 293, 1230, 293, 37556, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18460941314697266, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.004887823481112719}, {"id": 84, "seek": 64536, "start": 655.36, "end": 667.36, "text": " So speaking of Dara signs, Dara signs are vendor-specific characters in mangled symbols.", "tokens": [50864, 407, 4124, 295, 413, 2419, 7880, 11, 413, 2419, 7880, 366, 24321, 12, 29258, 4342, 294, 32432, 1493, 16944, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18460941314697266, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.004887823481112719}, {"id": 85, "seek": 66736, "start": 668.36, "end": 682.36, "text": " So typically, it is preferable that we avoid using these symbols.", "tokens": [50414, 407, 5850, 11, 309, 307, 4382, 712, 300, 321, 5042, 1228, 613, 16944, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12093852116511418, "compression_ratio": 1.3805309734513274, "no_speech_prob": 0.025919046252965927}, {"id": 86, "seek": 66736, "start": 682.36, "end": 686.36, "text": " So next, type information.", "tokens": [51114, 407, 958, 11, 2010, 1589, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12093852116511418, "compression_ratio": 1.3805309734513274, "no_speech_prob": 0.025919046252965927}, {"id": 87, "seek": 66736, "start": 686.36, "end": 691.36, "text": " Basically, legacy symbols doesn't contain any type information.", "tokens": [51314, 8537, 11, 11711, 16944, 1177, 380, 5304, 604, 2010, 1589, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12093852116511418, "compression_ratio": 1.3805309734513274, "no_speech_prob": 0.025919046252965927}, {"id": 88, "seek": 69136, "start": 691.36, "end": 710.36, "text": " On the other hand, v0 has rich type information such as generic types and inherent implementation in Rust, or tried implementation in Rust, and more.", "tokens": [50364, 1282, 264, 661, 1011, 11, 371, 15, 575, 4593, 2010, 1589, 1270, 382, 19577, 3467, 293, 26387, 11420, 294, 34952, 11, 420, 3031, 11420, 294, 34952, 11, 293, 544, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22665729242212632, "compression_ratio": 1.4190476190476191, "no_speech_prob": 0.047074273228645325}, {"id": 89, "seek": 71036, "start": 710.36, "end": 719.36, "text": " And for example, these are contents namespaces like modules in Rust.", "tokens": [50364, 400, 337, 1365, 11, 613, 366, 15768, 5288, 79, 2116, 411, 16679, 294, 34952, 13, 50814], "temperature": 0.0, "avg_logprob": -0.3104254080324757, "compression_ratio": 1.3428571428571427, "no_speech_prob": 0.09787614643573761}, {"id": 90, "seek": 71036, "start": 719.36, "end": 734.36, "text": " And Rust, speaking of Unicode identifiers, you know, as you remember, legacy escapes Unicode characters as code points.", "tokens": [50814, 400, 34952, 11, 4124, 295, 1156, 299, 1429, 2473, 23463, 11, 291, 458, 11, 382, 291, 1604, 11, 11711, 43769, 1156, 299, 1429, 4342, 382, 3089, 2793, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3104254080324757, "compression_ratio": 1.3428571428571427, "no_speech_prob": 0.09787614643573761}, {"id": 91, "seek": 73436, "start": 734.36, "end": 740.36, "text": " On the other hand, v0 uses punicode to encode Unicode identifiers.", "tokens": [50364, 1282, 264, 661, 1011, 11, 371, 15, 4960, 4468, 299, 1429, 281, 2058, 1429, 1156, 299, 1429, 2473, 23463, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1259998291257828, "compression_ratio": 1.3517241379310345, "no_speech_prob": 0.014467023313045502}, {"id": 92, "seek": 73436, "start": 740.36, "end": 746.36, "text": " So let's look at a simple example of a two-mangling scheme.", "tokens": [50664, 407, 718, 311, 574, 412, 257, 2199, 1365, 295, 257, 732, 12, 76, 656, 1688, 12232, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1259998291257828, "compression_ratio": 1.3517241379310345, "no_speech_prob": 0.014467023313045502}, {"id": 93, "seek": 73436, "start": 746.36, "end": 760.36, "text": " If you define this function in Rust, you can see two-mangled symbols.", "tokens": [50964, 759, 291, 6964, 341, 2445, 294, 34952, 11, 291, 393, 536, 732, 12, 76, 656, 1493, 16944, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1259998291257828, "compression_ratio": 1.3517241379310345, "no_speech_prob": 0.014467023313045502}, {"id": 94, "seek": 76036, "start": 761.36, "end": 768.36, "text": " And highlighted part is corresponding to the name of the function.", "tokens": [50414, 400, 17173, 644, 307, 11760, 281, 264, 1315, 295, 264, 2445, 13, 50764], "temperature": 0.0, "avg_logprob": -0.18221544840979198, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.005958494730293751}, {"id": 95, "seek": 76036, "start": 768.36, "end": 774.36, "text": " And you can find Dara signs in legacy mangled scheme, which is vendor-specific characters.", "tokens": [50764, 400, 291, 393, 915, 413, 2419, 7880, 294, 11711, 32432, 1493, 12232, 11, 597, 307, 24321, 12, 29258, 4342, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18221544840979198, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.005958494730293751}, {"id": 96, "seek": 76036, "start": 774.36, "end": 780.36, "text": " And you can also find a invisible symbol.", "tokens": [51064, 400, 291, 393, 611, 915, 257, 14603, 5986, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18221544840979198, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.005958494730293751}, {"id": 97, "seek": 76036, "start": 780.36, "end": 785.36, "text": " You can also find a punicode encoded symbols.", "tokens": [51364, 509, 393, 611, 915, 257, 4468, 299, 1429, 2058, 12340, 16944, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18221544840979198, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.005958494730293751}, {"id": 98, "seek": 78536, "start": 786.36, "end": 790.36, "text": " This is a hero part of this slide.", "tokens": [50414, 639, 307, 257, 5316, 644, 295, 341, 4137, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2266528389670632, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.03609057143330574}, {"id": 99, "seek": 78536, "start": 790.36, "end": 796.36, "text": " So in summary, as a result of GSOC-223, GCCRS supports Unicode.", "tokens": [50614, 407, 294, 12691, 11, 382, 257, 1874, 295, 460, 17188, 34, 12, 7490, 18, 11, 460, 11717, 43580, 9346, 1156, 299, 1429, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2266528389670632, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.03609057143330574}, {"id": 100, "seek": 78536, "start": 796.36, "end": 802.36, "text": " And Rust compiler uses Unicode normalization and punicode encoding,", "tokens": [50914, 400, 34952, 31958, 4960, 1156, 299, 1429, 2710, 2144, 293, 4468, 299, 1429, 43430, 11, 51214], "temperature": 0.0, "avg_logprob": -0.2266528389670632, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.03609057143330574}, {"id": 101, "seek": 78536, "start": 802.36, "end": 811.36, "text": " and implementing the new-visor-mangled to GCCRS is now in progress.", "tokens": [51214, 293, 18114, 264, 777, 12, 4938, 284, 12, 76, 656, 1493, 281, 460, 11717, 43580, 307, 586, 294, 4205, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2266528389670632, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.03609057143330574}, {"id": 102, "seek": 81136, "start": 812.36, "end": 823.36, "text": " Thank you for free software foundation for supporting me to attend this conference.", "tokens": [50414, 1044, 291, 337, 1737, 4722, 7030, 337, 7231, 385, 281, 6888, 341, 7586, 13, 50964], "temperature": 0.0, "avg_logprob": -0.23103158982073674, "compression_ratio": 1.409356725146199, "no_speech_prob": 0.06356785446405411}, {"id": 103, "seek": 81136, "start": 823.36, "end": 830.36, "text": " And I would like also thank to my mentors, Philippa and Arthur and other GCCRS team", "tokens": [50964, 400, 286, 576, 411, 611, 1309, 281, 452, 21798, 11, 13694, 64, 293, 19624, 293, 661, 460, 11717, 43580, 1469, 51314], "temperature": 0.0, "avg_logprob": -0.23103158982073674, "compression_ratio": 1.409356725146199, "no_speech_prob": 0.06356785446405411}, {"id": 104, "seek": 81136, "start": 830.36, "end": 835.36, "text": " and another GSOC student, Mahat. And that's all. Thank you for listening.", "tokens": [51314, 293, 1071, 460, 17188, 34, 3107, 11, 10104, 267, 13, 400, 300, 311, 439, 13, 1044, 291, 337, 4764, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23103158982073674, "compression_ratio": 1.409356725146199, "no_speech_prob": 0.06356785446405411}, {"id": 105, "seek": 84136, "start": 842.36, "end": 847.36, "text": " Thank you.", "tokens": [50414, 1044, 291, 13, 50664], "temperature": 0.0, "avg_logprob": -0.33098331451416013, "compression_ratio": 1.4322033898305084, "no_speech_prob": 0.16244269907474518}, {"id": 106, "seek": 84136, "start": 847.36, "end": 851.36, "text": " So we have a few minutes to questions. Four minutes for questions.", "tokens": [50664, 407, 321, 362, 257, 1326, 2077, 281, 1651, 13, 7451, 2077, 337, 1651, 13, 50864], "temperature": 0.0, "avg_logprob": -0.33098331451416013, "compression_ratio": 1.4322033898305084, "no_speech_prob": 0.16244269907474518}, {"id": 107, "seek": 84136, "start": 851.36, "end": 854.36, "text": " If people have questions.", "tokens": [50864, 759, 561, 362, 1651, 13, 51014], "temperature": 0.0, "avg_logprob": -0.33098331451416013, "compression_ratio": 1.4322033898305084, "no_speech_prob": 0.16244269907474518}, {"id": 108, "seek": 84136, "start": 859.36, "end": 861.36, "text": " Hi.", "tokens": [51264, 2421, 13, 51364], "temperature": 0.0, "avg_logprob": -0.33098331451416013, "compression_ratio": 1.4322033898305084, "no_speech_prob": 0.16244269907474518}, {"id": 109, "seek": 84136, "start": 861.36, "end": 866.36, "text": " You showed the example for like the new and the old mangling.", "tokens": [51364, 509, 4712, 264, 1365, 337, 411, 264, 777, 293, 264, 1331, 32432, 1688, 13, 51614], "temperature": 0.0, "avg_logprob": -0.33098331451416013, "compression_ratio": 1.4322033898305084, "no_speech_prob": 0.16244269907474518}, {"id": 110, "seek": 86636, "start": 866.36, "end": 871.36, "text": " And how I can say, I can't understand how you would look at that", "tokens": [50364, 400, 577, 286, 393, 584, 11, 286, 393, 380, 1223, 577, 291, 576, 574, 412, 300, 50614], "temperature": 0.0, "avg_logprob": -0.2135279973347982, "compression_ratio": 1.5149700598802396, "no_speech_prob": 0.03951741009950638}, {"id": 111, "seek": 86636, "start": 871.36, "end": 877.36, "text": " and know if it's Unicode or if it's someone actually wrote U7 blah blah blah blah as a name of function.", "tokens": [50614, 293, 458, 498, 309, 311, 1156, 299, 1429, 420, 498, 309, 311, 1580, 767, 4114, 624, 22, 12288, 12288, 12288, 12288, 382, 257, 1315, 295, 2445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2135279973347982, "compression_ratio": 1.5149700598802396, "no_speech_prob": 0.03951741009950638}, {"id": 112, "seek": 86636, "start": 877.36, "end": 880.36, "text": " So how can you identify that?", "tokens": [50914, 407, 577, 393, 291, 5876, 300, 30, 51064], "temperature": 0.0, "avg_logprob": -0.2135279973347982, "compression_ratio": 1.5149700598802396, "no_speech_prob": 0.03951741009950638}, {"id": 113, "seek": 86636, "start": 880.36, "end": 888.36, "text": " Oh, okay. So if I understand your question correctly,", "tokens": [51064, 876, 11, 1392, 13, 407, 498, 286, 1223, 428, 1168, 8944, 11, 51464], "temperature": 0.0, "avg_logprob": -0.2135279973347982, "compression_ratio": 1.5149700598802396, "no_speech_prob": 0.03951741009950638}, {"id": 114, "seek": 88836, "start": 888.36, "end": 899.36, "text": " are there questions that you cannot find part corresponding to the name of function, right?", "tokens": [50364, 366, 456, 1651, 300, 291, 2644, 915, 644, 11760, 281, 264, 1315, 295, 2445, 11, 558, 30, 50914], "temperature": 0.0, "avg_logprob": -0.23570479207964085, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.054204948246479034}, {"id": 115, "seek": 88836, "start": 899.36, "end": 908.36, "text": " Yeah, I cannot look at this and see, right, from U7 onwards, this is Unicode encoding", "tokens": [50914, 865, 11, 286, 2644, 574, 412, 341, 293, 536, 11, 558, 11, 490, 624, 22, 34230, 11, 341, 307, 1156, 299, 1429, 43430, 51364], "temperature": 0.0, "avg_logprob": -0.23570479207964085, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.054204948246479034}, {"id": 116, "seek": 88836, "start": 908.36, "end": 912.36, "text": " and not something that was actually written by the user.", "tokens": [51364, 293, 406, 746, 300, 390, 767, 3720, 538, 264, 4195, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23570479207964085, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.054204948246479034}, {"id": 117, "seek": 88836, "start": 912.36, "end": 914.36, "text": " Sorry, one more please.", "tokens": [51564, 4919, 11, 472, 544, 1767, 13, 51664], "temperature": 0.0, "avg_logprob": -0.23570479207964085, "compression_ratio": 1.4333333333333333, "no_speech_prob": 0.054204948246479034}, {"id": 118, "seek": 91436, "start": 915.36, "end": 921.36, "text": " It's just like, imagine some user decided to write a function", "tokens": [50414, 467, 311, 445, 411, 11, 3811, 512, 4195, 3047, 281, 2464, 257, 2445, 50714], "temperature": 0.0, "avg_logprob": -0.2591283859745149, "compression_ratio": 1.4645161290322581, "no_speech_prob": 0.020688803866505623}, {"id": 119, "seek": 91436, "start": 921.36, "end": 925.36, "text": " and they decided to call the function U7 KED blah blah blah blah.", "tokens": [50714, 293, 436, 3047, 281, 818, 264, 2445, 624, 22, 591, 4731, 12288, 12288, 12288, 12288, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2591283859745149, "compression_ratio": 1.4645161290322581, "no_speech_prob": 0.020688803866505623}, {"id": 120, "seek": 91436, "start": 925.36, "end": 933.36, "text": " How can I tell if this encoding is saved, the user wrote that exactly, or if they used the Unicode?", "tokens": [50914, 1012, 393, 286, 980, 498, 341, 43430, 307, 6624, 11, 264, 4195, 4114, 300, 2293, 11, 420, 498, 436, 1143, 264, 1156, 299, 1429, 30, 51314], "temperature": 0.0, "avg_logprob": -0.2591283859745149, "compression_ratio": 1.4645161290322581, "no_speech_prob": 0.020688803866505623}, {"id": 121, "seek": 93336, "start": 933.36, "end": 950.36, "text": " Okay, so your question is that you cannot tell this symbol is encoded using Unicode or low ASCII data.", "tokens": [50364, 1033, 11, 370, 428, 1168, 307, 300, 291, 2644, 980, 341, 5986, 307, 2058, 12340, 1228, 1156, 299, 1429, 420, 2295, 7469, 34, 9503, 1412, 13, 51214], "temperature": 0.0, "avg_logprob": -0.22300901251324154, "compression_ratio": 1.3517241379310345, "no_speech_prob": 0.04053617641329765}, {"id": 122, "seek": 93336, "start": 950.36, "end": 951.36, "text": " Oh, if it is verbating.", "tokens": [51214, 876, 11, 498, 309, 307, 9595, 990, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22300901251324154, "compression_ratio": 1.3517241379310345, "no_speech_prob": 0.04053617641329765}, {"id": 123, "seek": 93336, "start": 951.36, "end": 958.36, "text": " Okay, so in visual symbol, you can find the first U character, right?", "tokens": [51264, 1033, 11, 370, 294, 5056, 5986, 11, 291, 393, 915, 264, 700, 624, 2517, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.22300901251324154, "compression_ratio": 1.3517241379310345, "no_speech_prob": 0.04053617641329765}, {"id": 124, "seek": 95836, "start": 958.36, "end": 973.36, "text": " So this means Unicode encoding and then you can find 7, which is a length of character string from K to H,", "tokens": [50364, 407, 341, 1355, 1156, 299, 1429, 43430, 293, 550, 291, 393, 915, 1614, 11, 597, 307, 257, 4641, 295, 2517, 6798, 490, 591, 281, 389, 11, 51114], "temperature": 0.0, "avg_logprob": -0.2924712498982747, "compression_ratio": 1.2857142857142858, "no_speech_prob": 0.009773429483175278}, {"id": 125, "seek": 95836, "start": 973.36, "end": 976.36, "text": " which is an encoded part.", "tokens": [51114, 597, 307, 364, 2058, 12340, 644, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2924712498982747, "compression_ratio": 1.2857142857142858, "no_speech_prob": 0.009773429483175278}, {"id": 126, "seek": 95836, "start": 976.36, "end": 980.36, "text": " So, yeah, thank you.", "tokens": [51264, 407, 11, 1338, 11, 1309, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2924712498982747, "compression_ratio": 1.2857142857142858, "no_speech_prob": 0.009773429483175278}, {"id": 127, "seek": 98036, "start": 981.36, "end": 983.36, "text": " One minute left for questions.", "tokens": [50414, 1485, 3456, 1411, 337, 1651, 13, 50514], "temperature": 0.0, "avg_logprob": -0.3272431778581175, "compression_ratio": 1.3709677419354838, "no_speech_prob": 0.18490992486476898}, {"id": 128, "seek": 98036, "start": 983.36, "end": 993.36, "text": " Yeah, so my question is how much effort would it be for you now, after you know all this,", "tokens": [50514, 865, 11, 370, 452, 1168, 307, 577, 709, 4630, 576, 309, 312, 337, 291, 586, 11, 934, 291, 458, 439, 341, 11, 51014], "temperature": 0.0, "avg_logprob": -0.3272431778581175, "compression_ratio": 1.3709677419354838, "no_speech_prob": 0.18490992486476898}, {"id": 129, "seek": 98036, "start": 993.36, "end": 999.36, "text": " to improve the existing lecture to also accept Unicode?", "tokens": [51014, 281, 3470, 264, 6741, 7991, 281, 611, 3241, 1156, 299, 1429, 30, 51314], "temperature": 0.0, "avg_logprob": -0.3272431778581175, "compression_ratio": 1.3709677419354838, "no_speech_prob": 0.18490992486476898}, {"id": 130, "seek": 98036, "start": 999.36, "end": 1005.36, "text": " Is it just 3 for things and an HR or?", "tokens": [51314, 1119, 309, 445, 805, 337, 721, 293, 364, 19460, 420, 30, 51614], "temperature": 0.0, "avg_logprob": -0.3272431778581175, "compression_ratio": 1.3709677419354838, "no_speech_prob": 0.18490992486476898}, {"id": 131, "seek": 98036, "start": 1005.36, "end": 1007.36, "text": " Are you speaking now?", "tokens": [51614, 2014, 291, 4124, 586, 30, 51714], "temperature": 0.0, "avg_logprob": -0.3272431778581175, "compression_ratio": 1.3709677419354838, "no_speech_prob": 0.18490992486476898}, {"id": 132, "seek": 98036, "start": 1007.36, "end": 1008.36, "text": " Current situation?", "tokens": [51714, 15629, 2590, 30, 51764], "temperature": 0.0, "avg_logprob": -0.3272431778581175, "compression_ratio": 1.3709677419354838, "no_speech_prob": 0.18490992486476898}, {"id": 133, "seek": 100836, "start": 1008.36, "end": 1015.36, "text": " Yeah, now I would add to an existing lecture the option to pass Unicode.", "tokens": [50364, 865, 11, 586, 286, 576, 909, 281, 364, 6741, 7991, 264, 3614, 281, 1320, 1156, 299, 1429, 13, 50714], "temperature": 0.0, "avg_logprob": -0.40185851239143533, "compression_ratio": 1.2063492063492063, "no_speech_prob": 0.026053618639707565}, {"id": 134, "seek": 100836, "start": 1015.36, "end": 1019.36, "text": " How much work would it be?", "tokens": [50714, 1012, 709, 589, 576, 309, 312, 30, 50914], "temperature": 0.0, "avg_logprob": -0.40185851239143533, "compression_ratio": 1.2063492063492063, "no_speech_prob": 0.026053618639707565}, {"id": 135, "seek": 100836, "start": 1019.36, "end": 1028.3600000000001, "text": " I think many developers don't use NoaSki Identifier,", "tokens": [50914, 286, 519, 867, 8849, 500, 380, 764, 883, 64, 50, 2984, 25905, 9902, 11, 51364], "temperature": 0.0, "avg_logprob": -0.40185851239143533, "compression_ratio": 1.2063492063492063, "no_speech_prob": 0.026053618639707565}, {"id": 136, "seek": 102836, "start": 1028.36, "end": 1038.36, "text": " but what is so wide so many developers want to use NoaSki Identifier.", "tokens": [50364, 457, 437, 307, 370, 4874, 370, 867, 8849, 528, 281, 764, 883, 64, 50, 2984, 25905, 9902, 13, 50864], "temperature": 0.0, "avg_logprob": -0.22474446167816986, "compression_ratio": 1.3801169590643274, "no_speech_prob": 0.0448388047516346}, {"id": 137, "seek": 102836, "start": 1038.36, "end": 1044.36, "text": " So in terms of that, I think it is meaningful.", "tokens": [50864, 407, 294, 2115, 295, 300, 11, 286, 519, 309, 307, 10995, 13, 51164], "temperature": 0.0, "avg_logprob": -0.22474446167816986, "compression_ratio": 1.3801169590643274, "no_speech_prob": 0.0448388047516346}, {"id": 138, "seek": 102836, "start": 1044.36, "end": 1049.36, "text": " Yeah, how much work would it be just if you edit now?", "tokens": [51164, 865, 11, 577, 709, 589, 576, 309, 312, 445, 498, 291, 8129, 586, 30, 51414], "temperature": 0.0, "avg_logprob": -0.22474446167816986, "compression_ratio": 1.3801169590643274, "no_speech_prob": 0.0448388047516346}, {"id": 139, "seek": 102836, "start": 1049.36, "end": 1050.36, "text": " Sorry?", "tokens": [51414, 4919, 30, 51464], "temperature": 0.0, "avg_logprob": -0.22474446167816986, "compression_ratio": 1.3801169590643274, "no_speech_prob": 0.0448388047516346}, {"id": 140, "seek": 102836, "start": 1050.36, "end": 1053.36, "text": " Would it take you a week or weeks?", "tokens": [51464, 6068, 309, 747, 291, 257, 1243, 420, 3259, 30, 51614], "temperature": 0.0, "avg_logprob": -0.22474446167816986, "compression_ratio": 1.3801169590643274, "no_speech_prob": 0.0448388047516346}, {"id": 141, "seek": 102836, "start": 1053.36, "end": 1057.36, "text": " Maybe three days or so.", "tokens": [51614, 2704, 1045, 1708, 420, 370, 13, 51814], "temperature": 0.0, "avg_logprob": -0.22474446167816986, "compression_ratio": 1.3801169590643274, "no_speech_prob": 0.0448388047516346}, {"id": 142, "seek": 105836, "start": 1058.36, "end": 1060.36, "text": " Okay, all right.", "tokens": [50364, 1033, 11, 439, 558, 13, 50464], "temperature": 0.0, "avg_logprob": -0.4354934190448962, "compression_ratio": 0.8636363636363636, "no_speech_prob": 0.3616989850997925}, {"id": 143, "seek": 105836, "start": 1060.36, "end": 1061.36, "text": " Time's up.", "tokens": [50464, 6161, 311, 493, 13, 50514], "temperature": 0.0, "avg_logprob": -0.4354934190448962, "compression_ratio": 0.8636363636363636, "no_speech_prob": 0.3616989850997925}, {"id": 144, "seek": 105836, "start": 1061.36, "end": 1062.36, "text": " Thank you.", "tokens": [50514, 1044, 291, 13, 50564], "temperature": 0.0, "avg_logprob": -0.4354934190448962, "compression_ratio": 0.8636363636363636, "no_speech_prob": 0.3616989850997925}], "language": "en"}