{"text": " Okay, so yeah, I'm the filthy, uh, from over guy that asked the intrinsic question. Um, and my name is flow and nice to meet you. Um, last year, my colleague Adam, I had a talk here about, um, the open source VBC decoder, um, VV deck and the encoder VVank here at foster and I, I optimized the decoder for arm architectures in my master thesis, which I will talk about now. So basically that's this on the right. They can see the, um, Zindi optimization of VV deck. So VV deck is optimized for SSE 4.1 and AVX 2 4.2 was needed. So 4.1 was enough. And to be also able to run VV deck on arm architectures, um, the, the open source project Zindi everywhere is used, which basically like in this case, parts the SSE implementation to arm architectures in the justice by using, um, either built in functions, um, or neon intrinsics in this case because it's arm and, um, but it can also only use, um, scarline implementations and tells the compiler to like vectorize it automatically. So yeah, a combination of these. So my goal was to, um, yeah, make it faster for arm. Um, for that, uh, the first thing I did was identify the hotspots. Um, I was profiling VV deck using instruments since I was using this M1 PC here. And yeah, um, I divided the profiling into three steps. First of all, I identified the most time consuming functions. Um, with these I checked like the performance on arm versus the performance on X 86. And the third part was since VV deck is implementing, uh, every Zindi function as a non vectorized version as well. Um, I compared by wanted to know like how much, uh, speed up does the Zindi implementation generates. And with all this information, I chose for the foremost promising function, which basically means I wanted to get the biggest bang for the buck. And yeah, I chose to optimize these four functions. Um, on the left you can see these, the names of these four functions. Don't mind the names. Um, the only thing that is interesting is like the speed up. And, um, yeah, this graphic shows the manual optimization optimization. So the optimization I did versus the automated, um, the automated optimization from Zindi everywhere. And I visualized this for one of the JVET video sequences for a quantization parameter of 43. And, uh, yeah, you can definitely see that like two functions have a really nice acceleration so compared to the Zindi everywhere implementation. So in this case, the apply load Zindi function and the X get SAD function, but generally speaking, uh, you can definitely notice that Zindi everywhere does a decent job and to, yeah, in comparison to like just optimizing with C and forensics. And yeah, after having a look at the single function accelerations, I also wanted to know like how much is the impact of the optimization of these four functions on the general, um, on the total acceleration of VV deck. So I measured 11 JVET video sequences two times, obviously, since I need to compare them and average that for every or for, um, common quantization parameters. And yeah, the range is between 3% and 9%. What is not definitely noticeable is that like with, um, decreasing quantization parameter, the speed up gets, um, lower. And this is because the bit rate is higher with lower quantization parameters. This may, uh, this is because, um, not this is because, but, um, and because of that, like the decoding of the entropy decoding is getting more complex and yeah, it gets a bigger piece of the cake. So yeah, that was basically my master thesis in a nutshell. And after that, um, I also integrated like Zimdi everywhere to, um, to, to port the AVX to implementation, to arm, which also led to a contribution, which was pretty nice. It led to a conclusion to Zimdi everywhere since there were some, some errors in the portation. And right now, since there's also an encoder, I'm repeating the optimization for VVNG. And in the future, we might also optimize for the scalable vector extension like directly, or the scalable matrix extension. So yeah, thank you for joining for us. If you have any questions for free to ask, you can also ask me at the, I don't know, post foster and drink up. I don't know. Yeah. I have one. So what is translating across all the speed presets when you do the encoding, the decoding improvements? Uh, what the presets? Sorry. So when you do the encoding, you have different presets, right? So I didn't know that's you are asking about the encoding. So after the encoding, when you decode, right, does it translate across all the presets for recording? Cause every preset may not have all the tools. Uh, yeah, that's true. So the question was like, um, they are different, um, like there are different presets in the encoding, which affect the functions called in the, um, decoding. This is, um, true. I mean, I did like, uh, I tried to get a general overview, which functions were used by like profiling several, um, yeah, several, um, settings and tried, uh, yeah, and tried to figure out which functions were used most and average that basically. So yeah, there's a like a bigger story behind that behind the profiling, obviously, since this was only a five minute talk. And yeah. Does this mean that I can use a Raspberry Pi now to decode it? Have you tried to use the ARM devices to see? Okay. So the question is, um, can I use a Raspberry Pi to, uh, to decode it? And I mean the Raspberry Pi is based on an ARM, right? And I would say, yeah, obviously you can write because, um, I mean, you could do it before as well because Zimdia everywhere was included and Zimdia everywhere ports, uh, the SSE implementation to ARM, which, um, I mean it doesn't do it like perfectly, obviously, but we actually, um, submitted a paper or some colleagues of me are submit to the paper at a mile high conference. Um, yeah, I mean, I can, I mean, I can even probably put it up on, for, on the foster side, maybe. If you want to see that where they, um, like measure the performance of Zimdia everywhere on ARM and, so much of examples of what platforms, I mean the platforms, uh, which are supported are also like visible on the GitHub repository. So, um, yeah, this is also, um, on foster website. Um, like when you go to my talk, like there's the VVDec repository linked to it. And there you can see it. Um, yeah. That's tight. There's another question. Why don't you probably, you're simply by hand instead of using the quality performance in June? I mean, obviously we are still the best, right? So we are still the best when it comes to decoding and encode. But, um, like VV, like VVDec and VVN is performing pretty well in comparison to other VVC, um, coders, I would say, right? Um, yeah, that's true. That's obviously true. I mean, of course we have a head start, but, yeah, but I mean, let's see, right? I think nothing better than a healthy competition. Yeah.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.36, "text": " Okay, so yeah, I'm the filthy, uh,", "tokens": [50364, 1033, 11, 370, 1338, 11, 286, 478, 264, 40384, 11, 2232, 11, 50782], "temperature": 0.0, "avg_logprob": -0.5436646420022716, "compression_ratio": 1.481283422459893, "no_speech_prob": 0.29761803150177}, {"id": 1, "seek": 0, "start": 8.36, "end": 11.0, "text": " from over guy that asked the intrinsic question. Um,", "tokens": [50782, 490, 670, 2146, 300, 2351, 264, 35698, 1168, 13, 3301, 11, 50914], "temperature": 0.0, "avg_logprob": -0.5436646420022716, "compression_ratio": 1.481283422459893, "no_speech_prob": 0.29761803150177}, {"id": 2, "seek": 0, "start": 12.32, "end": 15.88, "text": " and my name is flow and nice to meet you. Um,", "tokens": [50980, 293, 452, 1315, 307, 3095, 293, 1481, 281, 1677, 291, 13, 3301, 11, 51158], "temperature": 0.0, "avg_logprob": -0.5436646420022716, "compression_ratio": 1.481283422459893, "no_speech_prob": 0.29761803150177}, {"id": 3, "seek": 0, "start": 17.2, "end": 18.64, "text": " last year, my colleague Adam,", "tokens": [51224, 1036, 1064, 11, 452, 13532, 7938, 11, 51296], "temperature": 0.0, "avg_logprob": -0.5436646420022716, "compression_ratio": 1.481283422459893, "no_speech_prob": 0.29761803150177}, {"id": 4, "seek": 0, "start": 19.04, "end": 23.04, "text": " I had a talk here about, um, the open source VBC decoder, um,", "tokens": [51316, 286, 632, 257, 751, 510, 466, 11, 1105, 11, 264, 1269, 4009, 691, 7869, 979, 19866, 11, 1105, 11, 51516], "temperature": 0.0, "avg_logprob": -0.5436646420022716, "compression_ratio": 1.481283422459893, "no_speech_prob": 0.29761803150177}, {"id": 5, "seek": 0, "start": 23.04, "end": 28.28, "text": " VV deck and the encoder VVank here at foster and I,", "tokens": [51516, 691, 53, 9341, 293, 264, 2058, 19866, 691, 53, 657, 510, 412, 17114, 293, 286, 11, 51778], "temperature": 0.0, "avg_logprob": -0.5436646420022716, "compression_ratio": 1.481283422459893, "no_speech_prob": 0.29761803150177}, {"id": 6, "seek": 2828, "start": 29.040000000000003, "end": 33.4, "text": " I optimized the decoder for arm architectures in my master thesis,", "tokens": [50402, 286, 26941, 264, 979, 19866, 337, 3726, 6331, 1303, 294, 452, 4505, 22288, 11, 50620], "temperature": 0.0, "avg_logprob": -0.2983214832911982, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0202373955398798}, {"id": 7, "seek": 2828, "start": 33.42, "end": 37.88, "text": " which I will talk about now. So basically that's this on the right.", "tokens": [50621, 597, 286, 486, 751, 466, 586, 13, 407, 1936, 300, 311, 341, 322, 264, 558, 13, 50844], "temperature": 0.0, "avg_logprob": -0.2983214832911982, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0202373955398798}, {"id": 8, "seek": 2828, "start": 37.88, "end": 40.24, "text": " They can see the, um,", "tokens": [50844, 814, 393, 536, 264, 11, 1105, 11, 50962], "temperature": 0.0, "avg_logprob": -0.2983214832911982, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0202373955398798}, {"id": 9, "seek": 2828, "start": 40.56, "end": 42.6, "text": " Zindi optimization of VV deck.", "tokens": [50978, 1176, 10255, 19618, 295, 691, 53, 9341, 13, 51080], "temperature": 0.0, "avg_logprob": -0.2983214832911982, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0202373955398798}, {"id": 10, "seek": 2828, "start": 43.08, "end": 49.040000000000006, "text": " So VV deck is optimized for SSE 4.1 and AVX 2 4.2 was", "tokens": [51104, 407, 691, 53, 9341, 307, 26941, 337, 318, 5879, 1017, 13, 16, 293, 30198, 55, 568, 1017, 13, 17, 390, 51402], "temperature": 0.0, "avg_logprob": -0.2983214832911982, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0202373955398798}, {"id": 11, "seek": 2828, "start": 49.040000000000006, "end": 51.52, "text": " needed. So 4.1 was enough.", "tokens": [51402, 2978, 13, 407, 1017, 13, 16, 390, 1547, 13, 51526], "temperature": 0.0, "avg_logprob": -0.2983214832911982, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0202373955398798}, {"id": 12, "seek": 2828, "start": 52.2, "end": 56.56, "text": " And to be also able to run VV deck on arm architectures, um,", "tokens": [51560, 400, 281, 312, 611, 1075, 281, 1190, 691, 53, 9341, 322, 3726, 6331, 1303, 11, 1105, 11, 51778], "temperature": 0.0, "avg_logprob": -0.2983214832911982, "compression_ratio": 1.5231481481481481, "no_speech_prob": 0.0202373955398798}, {"id": 13, "seek": 5656, "start": 56.56, "end": 60.88, "text": " the, the open source project Zindi everywhere is used,", "tokens": [50364, 264, 11, 264, 1269, 4009, 1716, 1176, 10255, 5315, 307, 1143, 11, 50580], "temperature": 0.0, "avg_logprob": -0.3072390264394332, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0013232161290943623}, {"id": 14, "seek": 5656, "start": 61.2, "end": 63.36, "text": " which basically like in this case,", "tokens": [50596, 597, 1936, 411, 294, 341, 1389, 11, 50704], "temperature": 0.0, "avg_logprob": -0.3072390264394332, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0013232161290943623}, {"id": 15, "seek": 5656, "start": 63.36, "end": 68.28, "text": " parts the SSE implementation to arm architectures in the justice by", "tokens": [50704, 3166, 264, 318, 5879, 11420, 281, 3726, 6331, 1303, 294, 264, 6118, 538, 50950], "temperature": 0.0, "avg_logprob": -0.3072390264394332, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0013232161290943623}, {"id": 16, "seek": 5656, "start": 68.72, "end": 72.12, "text": " using, um, either built in functions, um,", "tokens": [50972, 1228, 11, 1105, 11, 2139, 3094, 294, 6828, 11, 1105, 11, 51142], "temperature": 0.0, "avg_logprob": -0.3072390264394332, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0013232161290943623}, {"id": 17, "seek": 5656, "start": 73.0, "end": 77.68, "text": " or neon intrinsics in this case because it's arm and, um,", "tokens": [51186, 420, 30820, 28621, 1167, 294, 341, 1389, 570, 309, 311, 3726, 293, 11, 1105, 11, 51420], "temperature": 0.0, "avg_logprob": -0.3072390264394332, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0013232161290943623}, {"id": 18, "seek": 5656, "start": 77.72, "end": 79.48, "text": " but it can also only use, um,", "tokens": [51422, 457, 309, 393, 611, 787, 764, 11, 1105, 11, 51510], "temperature": 0.0, "avg_logprob": -0.3072390264394332, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0013232161290943623}, {"id": 19, "seek": 5656, "start": 79.48, "end": 84.28, "text": " scarline implementations and tells the compiler to like vectorize it automatically.", "tokens": [51510, 10569, 1889, 4445, 763, 293, 5112, 264, 31958, 281, 411, 8062, 1125, 309, 6772, 13, 51750], "temperature": 0.0, "avg_logprob": -0.3072390264394332, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0013232161290943623}, {"id": 20, "seek": 8428, "start": 84.88, "end": 89.68, "text": " So yeah, a combination of these. So my goal was to, um,", "tokens": [50394, 407, 1338, 11, 257, 6562, 295, 613, 13, 407, 452, 3387, 390, 281, 11, 1105, 11, 50634], "temperature": 0.0, "avg_logprob": -0.23729191186293117, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.0008936080266721547}, {"id": 21, "seek": 8428, "start": 90.04, "end": 94.56, "text": " yeah, make it faster for arm. Um,", "tokens": [50652, 1338, 11, 652, 309, 4663, 337, 3726, 13, 3301, 11, 50878], "temperature": 0.0, "avg_logprob": -0.23729191186293117, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.0008936080266721547}, {"id": 22, "seek": 8428, "start": 94.64, "end": 99.04, "text": " for that, uh, the first thing I did was identify the hotspots. Um,", "tokens": [50882, 337, 300, 11, 2232, 11, 264, 700, 551, 286, 630, 390, 5876, 264, 36121, 79, 1971, 13, 3301, 11, 51102], "temperature": 0.0, "avg_logprob": -0.23729191186293117, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.0008936080266721547}, {"id": 23, "seek": 8428, "start": 99.32000000000001, "end": 104.52000000000001, "text": " I was profiling VV deck using instruments since I was using this M1 PC here.", "tokens": [51116, 286, 390, 1740, 4883, 691, 53, 9341, 1228, 12190, 1670, 286, 390, 1228, 341, 376, 16, 6465, 510, 13, 51376], "temperature": 0.0, "avg_logprob": -0.23729191186293117, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.0008936080266721547}, {"id": 24, "seek": 8428, "start": 104.8, "end": 109.4, "text": " And yeah, um, I divided the profiling into three steps.", "tokens": [51390, 400, 1338, 11, 1105, 11, 286, 6666, 264, 1740, 4883, 666, 1045, 4439, 13, 51620], "temperature": 0.0, "avg_logprob": -0.23729191186293117, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.0008936080266721547}, {"id": 25, "seek": 8428, "start": 109.6, "end": 113.56, "text": " First of all, I identified the most time consuming functions. Um,", "tokens": [51630, 2386, 295, 439, 11, 286, 9234, 264, 881, 565, 19867, 6828, 13, 3301, 11, 51828], "temperature": 0.0, "avg_logprob": -0.23729191186293117, "compression_ratio": 1.6063348416289593, "no_speech_prob": 0.0008936080266721547}, {"id": 26, "seek": 11356, "start": 113.56, "end": 118.52, "text": " with these I checked like the performance on arm versus the performance on X", "tokens": [50364, 365, 613, 286, 10033, 411, 264, 3389, 322, 3726, 5717, 264, 3389, 322, 1783, 50612], "temperature": 0.0, "avg_logprob": -0.2592083017031352, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007788873044773936}, {"id": 27, "seek": 11356, "start": 118.52, "end": 123.64, "text": " 86. And the third part was since VV deck is implementing,", "tokens": [50612, 26687, 13, 400, 264, 2636, 644, 390, 1670, 691, 53, 9341, 307, 18114, 11, 50868], "temperature": 0.0, "avg_logprob": -0.2592083017031352, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007788873044773936}, {"id": 28, "seek": 11356, "start": 124.36, "end": 128.92000000000002, "text": " uh, every Zindi function as a non vectorized version as well. Um,", "tokens": [50904, 2232, 11, 633, 1176, 10255, 2445, 382, 257, 2107, 8062, 1602, 3037, 382, 731, 13, 3301, 11, 51132], "temperature": 0.0, "avg_logprob": -0.2592083017031352, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007788873044773936}, {"id": 29, "seek": 11356, "start": 128.96, "end": 132.92000000000002, "text": " I compared by wanted to know like how much, uh,", "tokens": [51134, 286, 5347, 538, 1415, 281, 458, 411, 577, 709, 11, 2232, 11, 51332], "temperature": 0.0, "avg_logprob": -0.2592083017031352, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007788873044773936}, {"id": 30, "seek": 11356, "start": 133.2, "end": 136.48000000000002, "text": " speed up does the Zindi implementation generates.", "tokens": [51346, 3073, 493, 775, 264, 1176, 10255, 11420, 23815, 13, 51510], "temperature": 0.0, "avg_logprob": -0.2592083017031352, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007788873044773936}, {"id": 31, "seek": 11356, "start": 136.8, "end": 138.24, "text": " And with all this information,", "tokens": [51526, 400, 365, 439, 341, 1589, 11, 51598], "temperature": 0.0, "avg_logprob": -0.2592083017031352, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007788873044773936}, {"id": 32, "seek": 11356, "start": 138.88, "end": 141.0, "text": " I chose for the foremost promising function,", "tokens": [51630, 286, 5111, 337, 264, 18864, 20257, 2445, 11, 51736], "temperature": 0.0, "avg_logprob": -0.2592083017031352, "compression_ratio": 1.6403508771929824, "no_speech_prob": 0.0007788873044773936}, {"id": 33, "seek": 14100, "start": 141.0, "end": 144.6, "text": " which basically means I wanted to get the biggest bang for the buck.", "tokens": [50364, 597, 1936, 1355, 286, 1415, 281, 483, 264, 3880, 8550, 337, 264, 14894, 13, 50544], "temperature": 0.0, "avg_logprob": -0.19798456580893506, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.0008148252964019775}, {"id": 34, "seek": 14100, "start": 145.2, "end": 150.28, "text": " And yeah, I chose to optimize these four functions. Um,", "tokens": [50574, 400, 1338, 11, 286, 5111, 281, 19719, 613, 1451, 6828, 13, 3301, 11, 50828], "temperature": 0.0, "avg_logprob": -0.19798456580893506, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.0008148252964019775}, {"id": 35, "seek": 14100, "start": 150.3, "end": 153.68, "text": " on the left you can see these, the names of these four functions.", "tokens": [50829, 322, 264, 1411, 291, 393, 536, 613, 11, 264, 5288, 295, 613, 1451, 6828, 13, 50998], "temperature": 0.0, "avg_logprob": -0.19798456580893506, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.0008148252964019775}, {"id": 36, "seek": 14100, "start": 154.52, "end": 158.24, "text": " Don't mind the names. Um, the only thing that is interesting is like the speed", "tokens": [51040, 1468, 380, 1575, 264, 5288, 13, 3301, 11, 264, 787, 551, 300, 307, 1880, 307, 411, 264, 3073, 51226], "temperature": 0.0, "avg_logprob": -0.19798456580893506, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.0008148252964019775}, {"id": 37, "seek": 14100, "start": 158.24, "end": 161.04, "text": " up. And, um, yeah,", "tokens": [51226, 493, 13, 400, 11, 1105, 11, 1338, 11, 51366], "temperature": 0.0, "avg_logprob": -0.19798456580893506, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.0008148252964019775}, {"id": 38, "seek": 14100, "start": 161.04, "end": 164.6, "text": " this graphic shows the manual optimization optimization.", "tokens": [51366, 341, 14089, 3110, 264, 9688, 19618, 19618, 13, 51544], "temperature": 0.0, "avg_logprob": -0.19798456580893506, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.0008148252964019775}, {"id": 39, "seek": 14100, "start": 164.6, "end": 168.48, "text": " So the optimization I did versus the automated, um,", "tokens": [51544, 407, 264, 19618, 286, 630, 5717, 264, 18473, 11, 1105, 11, 51738], "temperature": 0.0, "avg_logprob": -0.19798456580893506, "compression_ratio": 1.7336244541484715, "no_speech_prob": 0.0008148252964019775}, {"id": 40, "seek": 16848, "start": 169.48, "end": 171.88, "text": " the automated optimization from Zindi everywhere.", "tokens": [50414, 264, 18473, 19618, 490, 1176, 10255, 5315, 13, 50534], "temperature": 0.0, "avg_logprob": -0.2716658602478684, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0008555069798603654}, {"id": 41, "seek": 16848, "start": 172.72, "end": 177.32, "text": " And I visualized this for one of the JVET video sequences for a quantization", "tokens": [50576, 400, 286, 5056, 1602, 341, 337, 472, 295, 264, 508, 53, 4850, 960, 22978, 337, 257, 4426, 2144, 50806], "temperature": 0.0, "avg_logprob": -0.2716658602478684, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0008555069798603654}, {"id": 42, "seek": 16848, "start": 177.32, "end": 181.56, "text": " parameter of 43. And, uh, yeah,", "tokens": [50806, 13075, 295, 17914, 13, 400, 11, 2232, 11, 1338, 11, 51018], "temperature": 0.0, "avg_logprob": -0.2716658602478684, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0008555069798603654}, {"id": 43, "seek": 16848, "start": 181.56, "end": 186.56, "text": " you can definitely see that like two functions have a really nice acceleration", "tokens": [51018, 291, 393, 2138, 536, 300, 411, 732, 6828, 362, 257, 534, 1481, 17162, 51268], "temperature": 0.0, "avg_logprob": -0.2716658602478684, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0008555069798603654}, {"id": 44, "seek": 16848, "start": 187.51999999999998, "end": 190.23999999999998, "text": " so compared to the Zindi everywhere implementation.", "tokens": [51316, 370, 5347, 281, 264, 1176, 10255, 5315, 11420, 13, 51452], "temperature": 0.0, "avg_logprob": -0.2716658602478684, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0008555069798603654}, {"id": 45, "seek": 16848, "start": 190.39999999999998, "end": 191.07999999999998, "text": " So in this case,", "tokens": [51460, 407, 294, 341, 1389, 11, 51494], "temperature": 0.0, "avg_logprob": -0.2716658602478684, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0008555069798603654}, {"id": 46, "seek": 16848, "start": 191.07999999999998, "end": 194.44, "text": " the apply load Zindi function and the X get SAD function,", "tokens": [51494, 264, 3079, 3677, 1176, 10255, 2445, 293, 264, 1783, 483, 318, 6112, 2445, 11, 51662], "temperature": 0.0, "avg_logprob": -0.2716658602478684, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.0008555069798603654}, {"id": 47, "seek": 19444, "start": 195.12, "end": 197.92, "text": " but generally speaking, uh,", "tokens": [50398, 457, 5101, 4124, 11, 2232, 11, 50538], "temperature": 0.0, "avg_logprob": -0.21497233160610857, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0008821173687465489}, {"id": 48, "seek": 19444, "start": 197.92, "end": 202.92, "text": " you can definitely notice that Zindi everywhere does a decent job and to,", "tokens": [50538, 291, 393, 2138, 3449, 300, 1176, 10255, 5315, 775, 257, 8681, 1691, 293, 281, 11, 50788], "temperature": 0.0, "avg_logprob": -0.21497233160610857, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0008821173687465489}, {"id": 49, "seek": 19444, "start": 203.28, "end": 207.84, "text": " yeah, in comparison to like just optimizing with C and forensics.", "tokens": [50806, 1338, 11, 294, 9660, 281, 411, 445, 40425, 365, 383, 293, 32034, 1167, 13, 51034], "temperature": 0.0, "avg_logprob": -0.21497233160610857, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0008821173687465489}, {"id": 50, "seek": 19444, "start": 208.76, "end": 213.76, "text": " And yeah, after having a look at the single function accelerations,", "tokens": [51080, 400, 1338, 11, 934, 1419, 257, 574, 412, 264, 2167, 2445, 10172, 763, 11, 51330], "temperature": 0.0, "avg_logprob": -0.21497233160610857, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0008821173687465489}, {"id": 51, "seek": 19444, "start": 214.84, "end": 219.56, "text": " I also wanted to know like how much is the impact of the optimization of these", "tokens": [51384, 286, 611, 1415, 281, 458, 411, 577, 709, 307, 264, 2712, 295, 264, 19618, 295, 613, 51620], "temperature": 0.0, "avg_logprob": -0.21497233160610857, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0008821173687465489}, {"id": 52, "seek": 19444, "start": 219.56, "end": 222.56, "text": " four functions on the general, um,", "tokens": [51620, 1451, 6828, 322, 264, 2674, 11, 1105, 11, 51770], "temperature": 0.0, "avg_logprob": -0.21497233160610857, "compression_ratio": 1.579185520361991, "no_speech_prob": 0.0008821173687465489}, {"id": 53, "seek": 22256, "start": 222.8, "end": 225.28, "text": " on the total acceleration of VV deck.", "tokens": [50376, 322, 264, 3217, 17162, 295, 691, 53, 9341, 13, 50500], "temperature": 0.0, "avg_logprob": -0.32942167142542395, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.001343620358966291}, {"id": 54, "seek": 22256, "start": 226.12, "end": 229.8, "text": " So I measured 11 JVET video sequences two times, obviously,", "tokens": [50542, 407, 286, 12690, 2975, 508, 53, 4850, 960, 22978, 732, 1413, 11, 2745, 11, 50726], "temperature": 0.0, "avg_logprob": -0.32942167142542395, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.001343620358966291}, {"id": 55, "seek": 22256, "start": 229.88, "end": 234.88, "text": " since I need to compare them and average that for every or for,", "tokens": [50730, 1670, 286, 643, 281, 6794, 552, 293, 4274, 300, 337, 633, 420, 337, 11, 50980], "temperature": 0.0, "avg_logprob": -0.32942167142542395, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.001343620358966291}, {"id": 56, "seek": 22256, "start": 235.92000000000002, "end": 240.92000000000002, "text": " um, common quantization parameters. And yeah,", "tokens": [51032, 1105, 11, 2689, 4426, 2144, 9834, 13, 400, 1338, 11, 51282], "temperature": 0.0, "avg_logprob": -0.32942167142542395, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.001343620358966291}, {"id": 57, "seek": 22256, "start": 241.4, "end": 244.2, "text": " the range is between 3% and 9%.", "tokens": [51306, 264, 3613, 307, 1296, 805, 4, 293, 1722, 6856, 51446], "temperature": 0.0, "avg_logprob": -0.32942167142542395, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.001343620358966291}, {"id": 58, "seek": 22256, "start": 245.28, "end": 250.08, "text": " What is not definitely noticeable is that like with, um,", "tokens": [51500, 708, 307, 406, 2138, 26041, 307, 300, 411, 365, 11, 1105, 11, 51740], "temperature": 0.0, "avg_logprob": -0.32942167142542395, "compression_ratio": 1.4230769230769231, "no_speech_prob": 0.001343620358966291}, {"id": 59, "seek": 25008, "start": 250.08, "end": 254.96, "text": " decreasing quantization parameter, the speed up gets, um, lower.", "tokens": [50364, 23223, 4426, 2144, 13075, 11, 264, 3073, 493, 2170, 11, 1105, 11, 3126, 13, 50608], "temperature": 0.0, "avg_logprob": -0.19755665761119914, "compression_ratio": 1.8063063063063063, "no_speech_prob": 0.0043941279873251915}, {"id": 60, "seek": 25008, "start": 255.0, "end": 258.96000000000004, "text": " And this is because the bit rate is higher with lower quantization parameters.", "tokens": [50610, 400, 341, 307, 570, 264, 857, 3314, 307, 2946, 365, 3126, 4426, 2144, 9834, 13, 50808], "temperature": 0.0, "avg_logprob": -0.19755665761119914, "compression_ratio": 1.8063063063063063, "no_speech_prob": 0.0043941279873251915}, {"id": 61, "seek": 25008, "start": 259.44, "end": 264.2, "text": " This may, uh, this is because, um, not this is because, but, um,", "tokens": [50832, 639, 815, 11, 2232, 11, 341, 307, 570, 11, 1105, 11, 406, 341, 307, 570, 11, 457, 11, 1105, 11, 51070], "temperature": 0.0, "avg_logprob": -0.19755665761119914, "compression_ratio": 1.8063063063063063, "no_speech_prob": 0.0043941279873251915}, {"id": 62, "seek": 25008, "start": 264.32, "end": 269.32, "text": " and because of that, like the decoding of the entropy decoding is getting more", "tokens": [51076, 293, 570, 295, 300, 11, 411, 264, 979, 8616, 295, 264, 30867, 979, 8616, 307, 1242, 544, 51326], "temperature": 0.0, "avg_logprob": -0.19755665761119914, "compression_ratio": 1.8063063063063063, "no_speech_prob": 0.0043941279873251915}, {"id": 63, "seek": 25008, "start": 269.56, "end": 274.0, "text": " complex and yeah, it gets a bigger piece of the cake.", "tokens": [51338, 3997, 293, 1338, 11, 309, 2170, 257, 3801, 2522, 295, 264, 5908, 13, 51560], "temperature": 0.0, "avg_logprob": -0.19755665761119914, "compression_ratio": 1.8063063063063063, "no_speech_prob": 0.0043941279873251915}, {"id": 64, "seek": 25008, "start": 275.12, "end": 278.04, "text": " So yeah, that was basically my master thesis in a nutshell.", "tokens": [51616, 407, 1338, 11, 300, 390, 1936, 452, 4505, 22288, 294, 257, 37711, 13, 51762], "temperature": 0.0, "avg_logprob": -0.19755665761119914, "compression_ratio": 1.8063063063063063, "no_speech_prob": 0.0043941279873251915}, {"id": 65, "seek": 27804, "start": 278.68, "end": 281.40000000000003, "text": " And after that, um,", "tokens": [50396, 400, 934, 300, 11, 1105, 11, 50532], "temperature": 0.0, "avg_logprob": -0.2521940011244554, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.0011148204794153571}, {"id": 66, "seek": 27804, "start": 281.8, "end": 285.56, "text": " I also integrated like Zimdi everywhere to, um,", "tokens": [50552, 286, 611, 10919, 411, 1176, 332, 4504, 5315, 281, 11, 1105, 11, 50740], "temperature": 0.0, "avg_logprob": -0.2521940011244554, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.0011148204794153571}, {"id": 67, "seek": 27804, "start": 286.32, "end": 290.6, "text": " to, to port the AVX to implementation, to arm,", "tokens": [50778, 281, 11, 281, 2436, 264, 30198, 55, 281, 11420, 11, 281, 3726, 11, 50992], "temperature": 0.0, "avg_logprob": -0.2521940011244554, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.0011148204794153571}, {"id": 68, "seek": 27804, "start": 291.24, "end": 294.52000000000004, "text": " which also led to a contribution, which was pretty nice.", "tokens": [51024, 597, 611, 4684, 281, 257, 13150, 11, 597, 390, 1238, 1481, 13, 51188], "temperature": 0.0, "avg_logprob": -0.2521940011244554, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.0011148204794153571}, {"id": 69, "seek": 27804, "start": 294.76, "end": 298.04, "text": " It led to a conclusion to Zimdi everywhere since there were some,", "tokens": [51200, 467, 4684, 281, 257, 10063, 281, 1176, 332, 4504, 5315, 1670, 456, 645, 512, 11, 51364], "temperature": 0.0, "avg_logprob": -0.2521940011244554, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.0011148204794153571}, {"id": 70, "seek": 27804, "start": 298.16, "end": 301.88, "text": " some errors in the portation. And right now,", "tokens": [51370, 512, 13603, 294, 264, 2436, 399, 13, 400, 558, 586, 11, 51556], "temperature": 0.0, "avg_logprob": -0.2521940011244554, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.0011148204794153571}, {"id": 71, "seek": 27804, "start": 301.92, "end": 306.92, "text": " since there's also an encoder, I'm repeating the optimization for VVNG.", "tokens": [51558, 1670, 456, 311, 611, 364, 2058, 19866, 11, 286, 478, 18617, 264, 19618, 337, 691, 53, 45, 38, 13, 51808], "temperature": 0.0, "avg_logprob": -0.2521940011244554, "compression_ratio": 1.6465116279069767, "no_speech_prob": 0.0011148204794153571}, {"id": 72, "seek": 30692, "start": 307.92, "end": 310.32, "text": " And in the future,", "tokens": [50414, 400, 294, 264, 2027, 11, 50534], "temperature": 0.0, "avg_logprob": -0.29350009965307916, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0014750795671716332}, {"id": 73, "seek": 30692, "start": 310.32, "end": 315.32, "text": " we might also optimize for the scalable vector extension like directly,", "tokens": [50534, 321, 1062, 611, 19719, 337, 264, 38481, 8062, 10320, 411, 3838, 11, 50784], "temperature": 0.0, "avg_logprob": -0.29350009965307916, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0014750795671716332}, {"id": 74, "seek": 30692, "start": 318.04, "end": 320.96000000000004, "text": " or the scalable matrix extension. So yeah,", "tokens": [50920, 420, 264, 38481, 8141, 10320, 13, 407, 1338, 11, 51066], "temperature": 0.0, "avg_logprob": -0.29350009965307916, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0014750795671716332}, {"id": 75, "seek": 30692, "start": 321.64000000000004, "end": 323.32, "text": " thank you for joining for us.", "tokens": [51100, 1309, 291, 337, 5549, 337, 505, 13, 51184], "temperature": 0.0, "avg_logprob": -0.29350009965307916, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0014750795671716332}, {"id": 76, "seek": 30692, "start": 327.52000000000004, "end": 330.24, "text": " If you have any questions for free to ask, you can also ask me at the,", "tokens": [51394, 759, 291, 362, 604, 1651, 337, 1737, 281, 1029, 11, 291, 393, 611, 1029, 385, 412, 264, 11, 51530], "temperature": 0.0, "avg_logprob": -0.29350009965307916, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0014750795671716332}, {"id": 77, "seek": 30692, "start": 330.28000000000003, "end": 332.76, "text": " I don't know, post foster and drink up. I don't know.", "tokens": [51532, 286, 500, 380, 458, 11, 2183, 17114, 293, 2822, 493, 13, 286, 500, 380, 458, 13, 51656], "temperature": 0.0, "avg_logprob": -0.29350009965307916, "compression_ratio": 1.565217391304348, "no_speech_prob": 0.0014750795671716332}, {"id": 78, "seek": 33276, "start": 332.76, "end": 336.59999999999997, "text": " Yeah.", "tokens": [50364, 865, 13, 50556], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 79, "seek": 33276, "start": 336.59999999999997, "end": 337.44, "text": " I have one.", "tokens": [50556, 286, 362, 472, 13, 50598], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 80, "seek": 33276, "start": 337.44, "end": 341.0, "text": " So what is translating across all the speed presets when you do the encoding,", "tokens": [50598, 407, 437, 307, 35030, 2108, 439, 264, 3073, 41865, 562, 291, 360, 264, 43430, 11, 50776], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 81, "seek": 33276, "start": 341.0, "end": 345.24, "text": " the decoding improvements? Uh, what the presets? Sorry.", "tokens": [50776, 264, 979, 8616, 13797, 30, 4019, 11, 437, 264, 41865, 30, 4919, 13, 50988], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 82, "seek": 33276, "start": 345.28, "end": 347.56, "text": " So when you do the encoding, you have different presets, right?", "tokens": [50990, 407, 562, 291, 360, 264, 43430, 11, 291, 362, 819, 41865, 11, 558, 30, 51104], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 83, "seek": 33276, "start": 347.56, "end": 348.4, "text": " So I didn't know that's", "tokens": [51104, 407, 286, 994, 380, 458, 300, 311, 51146], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 84, "seek": 33276, "start": 352.0, "end": 353.56, "text": " you are asking about the encoding.", "tokens": [51326, 291, 366, 3365, 466, 264, 43430, 13, 51404], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 85, "seek": 33276, "start": 354.36, "end": 355.4, "text": " So after the encoding,", "tokens": [51444, 407, 934, 264, 43430, 11, 51496], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 86, "seek": 33276, "start": 355.4, "end": 356.15999999999997, "text": " when you decode, right,", "tokens": [51496, 562, 291, 979, 1429, 11, 558, 11, 51534], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 87, "seek": 33276, "start": 356.71999999999997, "end": 358.84, "text": " does it translate across all the presets for recording?", "tokens": [51562, 775, 309, 13799, 2108, 439, 264, 41865, 337, 6613, 30, 51668], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 88, "seek": 33276, "start": 359.32, "end": 361.64, "text": " Cause every preset may not have all the tools.", "tokens": [51692, 10865, 633, 32081, 815, 406, 362, 439, 264, 3873, 13, 51808], "temperature": 0.0, "avg_logprob": -0.5745706073308395, "compression_ratio": 1.8928571428571428, "no_speech_prob": 0.02340986579656601}, {"id": 89, "seek": 36164, "start": 362.47999999999996, "end": 363.52, "text": " Uh, yeah, that's true.", "tokens": [50406, 4019, 11, 1338, 11, 300, 311, 2074, 13, 50458], "temperature": 0.0, "avg_logprob": -0.25392866134643555, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.002318334300071001}, {"id": 90, "seek": 36164, "start": 364.03999999999996, "end": 368.36, "text": " So the question was like, um, they are different, um,", "tokens": [50484, 407, 264, 1168, 390, 411, 11, 1105, 11, 436, 366, 819, 11, 1105, 11, 50700], "temperature": 0.0, "avg_logprob": -0.25392866134643555, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.002318334300071001}, {"id": 91, "seek": 36164, "start": 368.88, "end": 371.56, "text": " like there are different presets in the encoding,", "tokens": [50726, 411, 456, 366, 819, 41865, 294, 264, 43430, 11, 50860], "temperature": 0.0, "avg_logprob": -0.25392866134643555, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.002318334300071001}, {"id": 92, "seek": 36164, "start": 371.56, "end": 376.71999999999997, "text": " which affect the functions called in the, um, decoding. This is, um, true.", "tokens": [50860, 597, 3345, 264, 6828, 1219, 294, 264, 11, 1105, 11, 979, 8616, 13, 639, 307, 11, 1105, 11, 2074, 13, 51118], "temperature": 0.0, "avg_logprob": -0.25392866134643555, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.002318334300071001}, {"id": 93, "seek": 36164, "start": 377.56, "end": 381.84, "text": " I mean, I did like, uh,", "tokens": [51160, 286, 914, 11, 286, 630, 411, 11, 2232, 11, 51374], "temperature": 0.0, "avg_logprob": -0.25392866134643555, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.002318334300071001}, {"id": 94, "seek": 36164, "start": 382.03999999999996, "end": 384.03999999999996, "text": " I tried to get a general overview,", "tokens": [51384, 286, 3031, 281, 483, 257, 2674, 12492, 11, 51484], "temperature": 0.0, "avg_logprob": -0.25392866134643555, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.002318334300071001}, {"id": 95, "seek": 36164, "start": 384.03999999999996, "end": 388.59999999999997, "text": " which functions were used by like profiling several, um,", "tokens": [51484, 597, 6828, 645, 1143, 538, 411, 1740, 4883, 2940, 11, 1105, 11, 51712], "temperature": 0.0, "avg_logprob": -0.25392866134643555, "compression_ratio": 1.6772486772486772, "no_speech_prob": 0.002318334300071001}, {"id": 96, "seek": 38860, "start": 389.12, "end": 392.40000000000003, "text": " yeah, several, um,", "tokens": [50390, 1338, 11, 2940, 11, 1105, 11, 50554], "temperature": 0.0, "avg_logprob": -0.3844707538555195, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.002505986951291561}, {"id": 97, "seek": 38860, "start": 393.32000000000005, "end": 396.40000000000003, "text": " settings and tried,", "tokens": [50600, 6257, 293, 3031, 11, 50754], "temperature": 0.0, "avg_logprob": -0.3844707538555195, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.002505986951291561}, {"id": 98, "seek": 38860, "start": 397.0, "end": 397.48, "text": " uh, yeah,", "tokens": [50784, 2232, 11, 1338, 11, 50808], "temperature": 0.0, "avg_logprob": -0.3844707538555195, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.002505986951291561}, {"id": 99, "seek": 38860, "start": 397.48, "end": 402.12, "text": " and tried to figure out which functions were used most and average that", "tokens": [50808, 293, 3031, 281, 2573, 484, 597, 6828, 645, 1143, 881, 293, 4274, 300, 51040], "temperature": 0.0, "avg_logprob": -0.3844707538555195, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.002505986951291561}, {"id": 100, "seek": 38860, "start": 402.12, "end": 405.08000000000004, "text": " basically. So yeah,", "tokens": [51040, 1936, 13, 407, 1338, 11, 51188], "temperature": 0.0, "avg_logprob": -0.3844707538555195, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.002505986951291561}, {"id": 101, "seek": 38860, "start": 405.08000000000004, "end": 409.08000000000004, "text": " there's a like a bigger story behind that behind the profiling, obviously,", "tokens": [51188, 456, 311, 257, 411, 257, 3801, 1657, 2261, 300, 2261, 264, 1740, 4883, 11, 2745, 11, 51388], "temperature": 0.0, "avg_logprob": -0.3844707538555195, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.002505986951291561}, {"id": 102, "seek": 38860, "start": 409.12, "end": 410.84000000000003, "text": " since this was only a five minute talk.", "tokens": [51390, 1670, 341, 390, 787, 257, 1732, 3456, 751, 13, 51476], "temperature": 0.0, "avg_logprob": -0.3844707538555195, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.002505986951291561}, {"id": 103, "seek": 38860, "start": 412.08000000000004, "end": 416.28000000000003, "text": " And yeah.", "tokens": [51538, 400, 1338, 13, 51748], "temperature": 0.0, "avg_logprob": -0.3844707538555195, "compression_ratio": 1.4887640449438202, "no_speech_prob": 0.002505986951291561}, {"id": 104, "seek": 41860, "start": 418.84000000000003, "end": 422.08000000000004, "text": " Does this mean that I can use a Raspberry Pi now to decode it?", "tokens": [50376, 4402, 341, 914, 300, 286, 393, 764, 257, 41154, 17741, 586, 281, 979, 1429, 309, 30, 50538], "temperature": 0.0, "avg_logprob": -0.33000400610137404, "compression_ratio": 1.68, "no_speech_prob": 0.00677980063483119}, {"id": 105, "seek": 41860, "start": 425.68, "end": 428.04, "text": " Have you tried to use the ARM devices to see?", "tokens": [50718, 3560, 291, 3031, 281, 764, 264, 45209, 5759, 281, 536, 30, 50836], "temperature": 0.0, "avg_logprob": -0.33000400610137404, "compression_ratio": 1.68, "no_speech_prob": 0.00677980063483119}, {"id": 106, "seek": 41860, "start": 428.32000000000005, "end": 430.08000000000004, "text": " Okay. So the question is, um,", "tokens": [50850, 1033, 13, 407, 264, 1168, 307, 11, 1105, 11, 50938], "temperature": 0.0, "avg_logprob": -0.33000400610137404, "compression_ratio": 1.68, "no_speech_prob": 0.00677980063483119}, {"id": 107, "seek": 41860, "start": 430.12, "end": 433.52000000000004, "text": " can I use a Raspberry Pi to, uh, to decode it?", "tokens": [50940, 393, 286, 764, 257, 41154, 17741, 281, 11, 2232, 11, 281, 979, 1429, 309, 30, 51110], "temperature": 0.0, "avg_logprob": -0.33000400610137404, "compression_ratio": 1.68, "no_speech_prob": 0.00677980063483119}, {"id": 108, "seek": 41860, "start": 434.16, "end": 439.16, "text": " And I mean the Raspberry Pi is based on an ARM, right? And I would say,", "tokens": [51142, 400, 286, 914, 264, 41154, 17741, 307, 2361, 322, 364, 45209, 11, 558, 30, 400, 286, 576, 584, 11, 51392], "temperature": 0.0, "avg_logprob": -0.33000400610137404, "compression_ratio": 1.68, "no_speech_prob": 0.00677980063483119}, {"id": 109, "seek": 41860, "start": 439.16, "end": 441.68, "text": " yeah, obviously you can write because, um,", "tokens": [51392, 1338, 11, 2745, 291, 393, 2464, 570, 11, 1105, 11, 51518], "temperature": 0.0, "avg_logprob": -0.33000400610137404, "compression_ratio": 1.68, "no_speech_prob": 0.00677980063483119}, {"id": 110, "seek": 41860, "start": 441.72, "end": 445.68, "text": " I mean, you could do it before as well because Zimdia everywhere was included", "tokens": [51520, 286, 914, 11, 291, 727, 360, 309, 949, 382, 731, 570, 1176, 332, 67, 654, 5315, 390, 5556, 51718], "temperature": 0.0, "avg_logprob": -0.33000400610137404, "compression_ratio": 1.68, "no_speech_prob": 0.00677980063483119}, {"id": 111, "seek": 44568, "start": 446.08, "end": 449.12, "text": " and Zimdia everywhere ports, uh,", "tokens": [50384, 293, 1176, 332, 67, 654, 5315, 18160, 11, 2232, 11, 50536], "temperature": 0.0, "avg_logprob": -0.2655724024368545, "compression_ratio": 1.5532786885245902, "no_speech_prob": 0.001983971567824483}, {"id": 112, "seek": 44568, "start": 449.28000000000003, "end": 453.28000000000003, "text": " the SSE implementation to ARM, which, um,", "tokens": [50544, 264, 318, 5879, 11420, 281, 45209, 11, 597, 11, 1105, 11, 50744], "temperature": 0.0, "avg_logprob": -0.2655724024368545, "compression_ratio": 1.5532786885245902, "no_speech_prob": 0.001983971567824483}, {"id": 113, "seek": 44568, "start": 453.36, "end": 455.64, "text": " I mean it doesn't do it like perfectly, obviously,", "tokens": [50748, 286, 914, 309, 1177, 380, 360, 309, 411, 6239, 11, 2745, 11, 50862], "temperature": 0.0, "avg_logprob": -0.2655724024368545, "compression_ratio": 1.5532786885245902, "no_speech_prob": 0.001983971567824483}, {"id": 114, "seek": 44568, "start": 455.96, "end": 457.44, "text": " but we actually, um,", "tokens": [50878, 457, 321, 767, 11, 1105, 11, 50952], "temperature": 0.0, "avg_logprob": -0.2655724024368545, "compression_ratio": 1.5532786885245902, "no_speech_prob": 0.001983971567824483}, {"id": 115, "seek": 44568, "start": 457.44, "end": 462.0, "text": " submitted a paper or some colleagues of me are submit to the paper at a mile", "tokens": [50952, 14405, 257, 3035, 420, 512, 7734, 295, 385, 366, 10315, 281, 264, 3035, 412, 257, 12620, 51180], "temperature": 0.0, "avg_logprob": -0.2655724024368545, "compression_ratio": 1.5532786885245902, "no_speech_prob": 0.001983971567824483}, {"id": 116, "seek": 44568, "start": 462.0, "end": 466.4, "text": " high conference. Um, yeah, I mean, I can,", "tokens": [51180, 1090, 7586, 13, 3301, 11, 1338, 11, 286, 914, 11, 286, 393, 11, 51400], "temperature": 0.0, "avg_logprob": -0.2655724024368545, "compression_ratio": 1.5532786885245902, "no_speech_prob": 0.001983971567824483}, {"id": 117, "seek": 44568, "start": 466.64, "end": 470.72, "text": " I mean, I can even probably put it up on, for, on the foster side, maybe.", "tokens": [51412, 286, 914, 11, 286, 393, 754, 1391, 829, 309, 493, 322, 11, 337, 11, 322, 264, 17114, 1252, 11, 1310, 13, 51616], "temperature": 0.0, "avg_logprob": -0.2655724024368545, "compression_ratio": 1.5532786885245902, "no_speech_prob": 0.001983971567824483}, {"id": 118, "seek": 44568, "start": 471.16, "end": 473.52, "text": " If you want to see that where they, um,", "tokens": [51638, 759, 291, 528, 281, 536, 300, 689, 436, 11, 1105, 11, 51756], "temperature": 0.0, "avg_logprob": -0.2655724024368545, "compression_ratio": 1.5532786885245902, "no_speech_prob": 0.001983971567824483}, {"id": 119, "seek": 47352, "start": 474.52, "end": 479.52, "text": " like measure the performance of Zimdia everywhere on ARM and,", "tokens": [50414, 411, 3481, 264, 3389, 295, 1176, 332, 67, 654, 5315, 322, 45209, 293, 11, 50664], "temperature": 0.0, "avg_logprob": -0.45150708137674533, "compression_ratio": 1.5023041474654377, "no_speech_prob": 0.0023542791604995728}, {"id": 120, "seek": 47352, "start": 480.52, "end": 482.44, "text": " so much of examples of what platforms,", "tokens": [50714, 370, 709, 295, 5110, 295, 437, 9473, 11, 50810], "temperature": 0.0, "avg_logprob": -0.45150708137674533, "compression_ratio": 1.5023041474654377, "no_speech_prob": 0.0023542791604995728}, {"id": 121, "seek": 47352, "start": 484.52, "end": 486.0, "text": " I mean the platforms, uh,", "tokens": [50914, 286, 914, 264, 9473, 11, 2232, 11, 50988], "temperature": 0.0, "avg_logprob": -0.45150708137674533, "compression_ratio": 1.5023041474654377, "no_speech_prob": 0.0023542791604995728}, {"id": 122, "seek": 47352, "start": 486.03999999999996, "end": 491.03999999999996, "text": " which are supported are also like visible on the GitHub repository.", "tokens": [50990, 597, 366, 8104, 366, 611, 411, 8974, 322, 264, 23331, 25841, 13, 51240], "temperature": 0.0, "avg_logprob": -0.45150708137674533, "compression_ratio": 1.5023041474654377, "no_speech_prob": 0.0023542791604995728}, {"id": 123, "seek": 47352, "start": 491.28, "end": 495.64, "text": " So, um, yeah, this is also, um, on foster website.", "tokens": [51252, 407, 11, 1105, 11, 1338, 11, 341, 307, 611, 11, 1105, 11, 322, 17114, 3144, 13, 51470], "temperature": 0.0, "avg_logprob": -0.45150708137674533, "compression_ratio": 1.5023041474654377, "no_speech_prob": 0.0023542791604995728}, {"id": 124, "seek": 47352, "start": 496.2, "end": 500.76, "text": " Um, like when you go to my talk, like there's the VVDec repository linked to it.", "tokens": [51498, 3301, 11, 411, 562, 291, 352, 281, 452, 751, 11, 411, 456, 311, 264, 691, 53, 35, 3045, 25841, 9408, 281, 309, 13, 51726], "temperature": 0.0, "avg_logprob": -0.45150708137674533, "compression_ratio": 1.5023041474654377, "no_speech_prob": 0.0023542791604995728}, {"id": 125, "seek": 50076, "start": 501.48, "end": 504.03999999999996, "text": " And there you can see it. Um, yeah.", "tokens": [50400, 400, 456, 291, 393, 536, 309, 13, 3301, 11, 1338, 13, 50528], "temperature": 0.0, "avg_logprob": -0.45422823088509695, "compression_ratio": 0.9868421052631579, "no_speech_prob": 0.00978886615484953}, {"id": 126, "seek": 50076, "start": 514.08, "end": 514.92, "text": " That's tight.", "tokens": [51030, 663, 311, 4524, 13, 51072], "temperature": 0.0, "avg_logprob": -0.45422823088509695, "compression_ratio": 0.9868421052631579, "no_speech_prob": 0.00978886615484953}, {"id": 127, "seek": 50076, "start": 523.56, "end": 524.4, "text": " There's another question.", "tokens": [51504, 821, 311, 1071, 1168, 13, 51546], "temperature": 0.0, "avg_logprob": -0.45422823088509695, "compression_ratio": 0.9868421052631579, "no_speech_prob": 0.00978886615484953}, {"id": 128, "seek": 52440, "start": 524.64, "end": 525.92, "text": " Why don't you probably,", "tokens": [50376, 1545, 500, 380, 291, 1391, 11, 50440], "temperature": 0.0, "avg_logprob": -0.4680829835169524, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.011281614191830158}, {"id": 129, "seek": 52440, "start": 525.92, "end": 528.76, "text": " you're simply by hand instead of using the quality performance in June?", "tokens": [50440, 291, 434, 2935, 538, 1011, 2602, 295, 1228, 264, 3125, 3389, 294, 6928, 30, 50582], "temperature": 0.0, "avg_logprob": -0.4680829835169524, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.011281614191830158}, {"id": 130, "seek": 52440, "start": 529.4, "end": 532.16, "text": " I mean, obviously we are still the best, right?", "tokens": [50614, 286, 914, 11, 2745, 321, 366, 920, 264, 1151, 11, 558, 30, 50752], "temperature": 0.0, "avg_logprob": -0.4680829835169524, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.011281614191830158}, {"id": 131, "seek": 52440, "start": 532.84, "end": 536.68, "text": " So we are still the best when it comes to decoding and encode.", "tokens": [50786, 407, 321, 366, 920, 264, 1151, 562, 309, 1487, 281, 979, 8616, 293, 2058, 1429, 13, 50978], "temperature": 0.0, "avg_logprob": -0.4680829835169524, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.011281614191830158}, {"id": 132, "seek": 52440, "start": 542.24, "end": 543.88, "text": " But, um, like VV,", "tokens": [51256, 583, 11, 1105, 11, 411, 691, 53, 11, 51338], "temperature": 0.0, "avg_logprob": -0.4680829835169524, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.011281614191830158}, {"id": 133, "seek": 52440, "start": 544.16, "end": 549.16, "text": " like VVDec and VVN is performing pretty well in comparison to other VVC,", "tokens": [51352, 411, 691, 53, 35, 3045, 293, 691, 53, 45, 307, 10205, 1238, 731, 294, 9660, 281, 661, 691, 53, 34, 11, 51602], "temperature": 0.0, "avg_logprob": -0.4680829835169524, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.011281614191830158}, {"id": 134, "seek": 52440, "start": 550.4, "end": 551.6, "text": " um, coders, I would say, right?", "tokens": [51664, 1105, 11, 17656, 433, 11, 286, 576, 584, 11, 558, 30, 51724], "temperature": 0.0, "avg_logprob": -0.4680829835169524, "compression_ratio": 1.5518867924528301, "no_speech_prob": 0.011281614191830158}, {"id": 135, "seek": 55440, "start": 555.4, "end": 563.1999999999999, "text": " Um, yeah, that's true. That's obviously true. I mean,", "tokens": [50414, 3301, 11, 1338, 11, 300, 311, 2074, 13, 663, 311, 2745, 2074, 13, 286, 914, 11, 50804], "temperature": 0.0, "avg_logprob": -0.3467850508513274, "compression_ratio": 1.372093023255814, "no_speech_prob": 0.023080334067344666}, {"id": 136, "seek": 55440, "start": 563.64, "end": 566.0, "text": " of course we have a head start, but,", "tokens": [50826, 295, 1164, 321, 362, 257, 1378, 722, 11, 457, 11, 50944], "temperature": 0.0, "avg_logprob": -0.3467850508513274, "compression_ratio": 1.372093023255814, "no_speech_prob": 0.023080334067344666}, {"id": 137, "seek": 55440, "start": 567.4, "end": 571.68, "text": " yeah, but I mean, let's see, right? I think nothing better than a healthy competition.", "tokens": [51014, 1338, 11, 457, 286, 914, 11, 718, 311, 536, 11, 558, 30, 286, 519, 1825, 1101, 813, 257, 4627, 6211, 13, 51228], "temperature": 0.0, "avg_logprob": -0.3467850508513274, "compression_ratio": 1.372093023255814, "no_speech_prob": 0.023080334067344666}, {"id": 138, "seek": 58440, "start": 584.4, "end": 585.4, "text": " Yeah.", "tokens": [50364, 865, 13, 50414], "temperature": 0.0, "avg_logprob": -0.9882078170776367, "compression_ratio": 0.38461538461538464, "no_speech_prob": 0.9179390668869019}], "language": "en"}