{"text": " All right, so the next talk is going to be about the Linux kernel key store and why you should be using it in your next application. Thank you. Hello, my name is Ignat. I work for Cloud for and today we're going to talk about Linux key store. By the way, how many people here know that Linux has a key store? Cool, many hands. Because like James earlier showed us that it has a key store but probably not everyone knows that Linux actually has a key store. So, yeah, a little bit about myself. I do Linux at Cloud for. I'm passionate about system security and performance. I'm like Lolo programming, Linux, but loaders, drivers and other stuff written in scary and safe languages. And I'm a hard Linux fan. That's why I'm presenting from a Mac. And probably like most of you here, I'm a fugitive programmer because NSA banned writing C and C++ languages and enterprises. And why is that? And there are many reasons but one of them is regarding application keys and memory. And by the way, here is the brand that NSA recommends that organization use memory safe languages whenever possible. So what is the problem with application key? Regarding keys, we're like talking about cryptographic keys, right? So to dig into that, let's review the Linux address namespace, isolation concept. So yeah, you have these many processes running on your systems because Linux is a multi-threaded, multi-process system. But what these processes have inside, right? So usually it's kind of like your code, like compiled code, your business logic. Some libraries, shared libraries, if your application uses shared libraries, some data, like global data stack. And yeah, I have the stack box separately. So it's like data heap and global variable with mStacks, right? And then you have the kernel, right? Everything runs in the kernel. In the kernel also you have the core code. You have static and dynamic data. You have the drivers which you load modules. And also you have stack or stacks if you have different threads, right? And the idea regarding the address spaces is within the process, each process, and even within the kernel, everything can access everything, right? So it's like one global space, whereas you can't access the memory of another process from one process and you also can't access the memory of the kernel. Like it's separated. This is Linux address space isolation. If we zoom in into the main process, into one of the processes, right? Like let's actually review what can be here and what can be in your data. And it can be like some internal state. So you have global variables, like applications can keep some internal state in the data. Yeah, your process can have user or customer data if it processes some external inputs and does stuff. Right? And the most important thing is cryptographic keys. If your application does some sort of level of encryption, it probably has some keys in the process address space. And what if like suddenly your application becomes compromised, so either through your main application logic or through a library, well, it means because it's all in the same address space, it means all your data section is compromised, right? But not all data is created equal. So, well, yeah. So yeah, well, like if your application internal state is compromised, well, it can be good or bad, right? It depends. Like depends on your logic. Of course, it can be bad if the attacker has control of some kind of data which can, for example, change the control flow of your application. If you're verifying a password, you can flip back like true or false or you can put some authenticated flag on and yeah, this can be bad, but sometimes it's not as bad depends on if your application is simple, but it can lead to further compromise. Well, if your user customer data is compromised, then like it's much, much more now. And yesterday also mentioned Equifox, my favorite company. Yeah, if you're a user customer data leak, it's a big problem because kind of it creates a lot of pressure on the company and you have to pay a lot of fines, but it's very, very bad but still more or less recoverably. Equifox is still in business to this day, unfortunately. But what about cryptographic key compromise? And this is like a total game over, right? So like if your identity key is leaked, that's what anyone can be as you. If you're like the main data encryption key is leaked, everyone knows your data. So it's a data integrity compromise, full security compromise and total identity take over. So what are the, well, 1000 feet view level of methods you can leak your application keys, right? Well, first of all, untrusted inputs and out of bound memory access. So imagine you have stuff in your memory written somewhere, right? And it may be that like near that stuff, you can have like a cryptographic key also in the same memory. And the normal application logic should allow you only to read stuff. But like what happened, for example, in hard bleed, if you can make the application read past the buffer boundary, you can also read the cryptographic key, right? And this is what happened to hard bleed. Everyone remembers hard bleed. Well, if your application have arbitrary remote code execution, like what else to discuss there is game over, right? So like attacker can control the execution of your binary and they can read, and due to say everything being in the same process space, so they can read everything and as to write everything. Not much to discuss there, but in the example was recent one, lock for shell. Everyone remembers lock for shell. Who patched lock for shell? Should have asked yesterday here, Java, right? Well, buffer use can be a sort of problem for leaking a key. So for example, this is a very, of course, this is a simplified program, but specifically tailored to leak the key, but like it illustrates the example. So for example, it has to function and crypt and log, right? And oh no, we forgot to initialize the logging message in the log function. And if you actually execute it, you will see that it kind of actually leaks the cryptographic key. So what happens is you have the process as thread stack, you have your main logic. For example, you call the decrypt or encrypt data function, which will get the key from somewhere and may put it on the stack depending on the implementation. But if you then the function exits, but if it doesn't clean it up the stack with the key, the next function can take it over and actually has an example, sorry, has an access to that cryptographic key, right? This is why all the compliance and security folks will tell you you always need to zero memory after key use. Like you have to clean up. Which is hard to do in many high level programming languages, especially if in garbage collected languages, right? Finally, you have the debugging tools. If you have a logging can accidentally leak your keys like core dumps, like GDB, Ptrace, everything that can access the memory of the application can leak a secret. Yeah, well let's make our applications don't crash and fix all the problems, right? We obviously can't fix all the bugs, so we have to do something about it. And probably we can't do a completely secure application, but what can we do specifically for cryptographic keys? Because they are the highest, most valuable data in our process address space. What some applications do, well, they try to leverage the operating system address space isolation, so they basically create another process, right? It will have a different data section and you can just move the cryptographic keys over to a different process and you write some very basic, very simple, which is unlikely to have bugs, a cryptographic logic to handle these keys on behalf of the main process. And then you create some kind of well-defined, tightened user interface between two processes, right? So we call it the key agent model. So you have two processes, one, the main process and the helper agent. The main process does not have the cryptographic material in the address space and the main communicates with the agent through a well-defined interface to perform cryptographic operation on its behalf. And agent is usually doesn't process untrusted input, like it's not connected to the network and is usually, and more scrutiny goes into that review. And some of the example of these we all use every day. So who here uses SSH? Who here doesn't use SSH agent? You don't? Yeah. Yeah, so SSH agent, GP agent, stuff like that. But there are drawbacks to this approach, right? So we need to develop and maintain two programs. We need to design this well-defined interface. We need to add communication. Like we need to think about how these processes communicate. Should we use Unix, talk, shared memory, something else, HTTP. And probably it's a good to somehow enforce and authenticate the main process from the agent. And not if the agent is kind of like this thing that performs cryptographic operations, we don't want anything in our system talking to it and being able to do signatures with our keys. This is where we go to Linux kernel key store. And the official name is Linux kernel key retention service. I call it the key store. Some people say it's a key ring, but actually, like key store has many key rings. So I think the key store is kind of the most applicable technology. And what it does is basically it takes this agent model and instead of process two, it replaces it with a kernel, right? And the well-defined interface is just system calls. Easy. So in a nutshell, Linux kernel key retention service stores cryptographic keys as kernel object. And this gives us some flexibility. So it was initially actually designed to share keys with the kernel services itself. So like for disk encryption, for example, you pass a key to the kernel and the kernel uses it. But eventually it was extended to user space. And the advantages that keys are now stored outside of the process address space, you have already have a well-defined system call interface to access and use the keys. And keys are becoming kernel objects so you can have associated access control lists, permission checks. Like you have on files or some other kernel objects itself. And the nice thing about it is like the key life cycle can be implicitly bound to the code life cycle. For example, security deleting a key even if the process terminates abruptly. And for a kernel feature, it surprisingly has a quite good documentation. So what does the key store look like? So it's a collection of key rings and keys. So a key ring can have links to other key rings and keys can contain other key rings or contain keys. So you can get this like a tree like structure. So keys are just objects that contain actual cryptographic material or a pointer treat. They can be read and written to and used to perform cryptographic operations. There are several key types which I go on later. You have user, logon, asymmetric encrypted and trusted keys. And they're kind of similar to a file system but unlike the file which can be on the in one directory, like if you don't take into account the weird bind mounts or some kind of hard links, keys can be part of many key rings at once. And key rings, they, it's a collection of links to the keys. And basically they enforce the life cycle of a key. If a particular key is not linked to a key ring, like it gets automatically destructed. And they can be explicitly created key rings or implicit special, a thread process, user and session. And they do enforce the key lifetime and they are kind of similar to a directory in the file system. So let's see an example. And by the way, all the examples I'm showing, I copied it from a real terminal. So it's a demo which doesn't fail. So in this example, here I'm creating a new key ring and linking it to my implicit user key ring. And each key or key ring is designated by a serial number which you can see. So it's kind of a unique number of the object inside the kernel. And once I created the key ring, I can add a key there with some secret contents Hunter 2 to my key ring. Basically I can then show, kind of, KCTL show shows my key ring and key tree. So we have the session ring, the user ring, my ring and my key there. Yeah. And basically you can see that the serial numbers match so what we just created. And also like because I just created the key, I have access to it so I can read the cryptographic material back and get the secret. And I think one of the examples you can use is like secret sharing between two users. So you have Alice and Bob to users on the system and you may notice they don't have anything in common. So they have separate groups, separate IDs, everything is separate. No common groups or permissions. For example, and Alice can create a secret with Hunter 2 and put it in their user key ring. What Bob can do, for example, it can create a new key ring called from others, a recipient key ring. And Bob can actually set permissions on that key ring so it allows everyone to write there. Write means putting links to other keys. So then if Bob communicates the serial number to Alice, Alice can just move that key to the Bob's key ring and then we now see that Alice doesn't have the key anymore in their possession and Bob can actually now read the cryptographic material because Bob now possesses that key. Simple. There are special key ring types. And these special key ring times determine the life cycle of a key ring. So there are session key rings which are available to all the current process and all these children. So for example, if you are system D and you put a key in the session key ring, it will be available to every process on the system which is spawned by system D. The process key ring is private to a particular process. So like every process has their own implicit key ring which they can use to store process specific credentials. And there is also a sweat key ring which is specific to a particular thread. Then let's say you write a web server which serves several websites and each website has a different TLS key. And you can, if you serve a website per thread, for example, so you can kind of securely store a TLS key for that thread, for that website without other threads even having access to that key, which is really cool. There are also user key rings which are bound to the life cycle of a user. So it's a key ring which is shared between all the processes with the same user ID and there is a user session key ring which is similar to user but not important in this context. There is also a type called persistent key rings which the name is a little bit confusing because they are not actually persisting the keys on the desk. It has nothing to do with it. It's just the life cycle of these key rings are different. They're not bound to a process or a user. So it's kind of time bound. So if you basically don't access the key ring for a time out, it gets automatically destroyed. It's useful, for example, in Chrome jobs where you can't really bind, for example, a key ring to a user because that user appears and disappears from the system but you can put a time bound and while your Chrome job is running, your key ring will be available. If for some reason your Chrome job stops running, the key will be eventually destroyed. So let's see a session key ring example. So let me add my favorite Hunter 2 secret to my session key. And basically, I imagine I'm on a SSH session to this particular machine. I can see that my key exists, right, and I can see its ID and it's linked to the session key ring. What I can do now is, for example, in another terminal I can put a BPF probe on a user destroy function which is responsible for securely destroying keys from the kernel key store. And if now I just exit my SSH session, I log out, I can see that the probe works and my key was automatically destroyed because my session ended, so my session key ring got destroyed and all the keys are linked to it got automatically destroyed as well. And if I re-log in back, I can see that technically my session key ring changed. It was destroyed and recreated automatically and I don't have the key anymore. So what it helps is, like, if you select the appropriate key ring type, you can ensure that keys will be securely destroyed when not needed. And you don't have to explicitly clear the memory. It will happen if you're out. For example, if you bound to a process key ring, if the process dies, the key will get destroyed. And regardless how the process dies, if it's successful exit, if it crashed, if it cordoned, whatever, like the keys will be gone. Okay, so now let's consider, like, some different key types. So we check the key ring types, the key types, the simplest one is the user key, which we just saw. So you have the cryptographic material, you put it inside the kernel, and then eventually either this process or the other process, which has relevant permissions, can read that secret back. There is also, like, a special type called logon key, which you can put inside the kernel, but you can never read back. And this is where this type is primarily used to share secrets with the kernel for disk encryption or eCryptFS. So if you're in a relatively recent Linux distribution, if you dump your dmCrypt setup, you will see that some of your keys are actually coming from the kernel key ring instead of, like, you will see the bytes directly. There is also an asymmetric key type, which only supports RSA currently. So you put an RSA key inside the kernel, and technically you don't read it back, but you can perform some operations with this key, like you can instruct the kernel to sign data or decrypt something with the key. So for example, this is a simple example, it was open SSL, so we can generate an RSA private key. Kernel understands only pkcs8 format for unencrypted pkcs8 private keys, so we have to convert it to pkcs8 format, and then we can actually add it to the kernel, and then we can ask the kernel to sign something, and basically we can then verify that the signature is valid with OpenSSL. Which is very useful, so all the things I'm describing today, and more is describing Cloud for a blog post, and there we have an example where we completely replace SSL, it's like a proof-of-concept patch, but we patched OpenSSH and replaced the SSH agent with the kernel key store, so instead of SSH add, you do SSH add our bash script, which puts your private SSH key into the kernel key store, and if you run the patched SSH client, it will actually work the same as it would communicate with an agent, but you don't need any agents running on the assist. Cool, this is all well and good, this is how you can use it, but surprisingly key store can be very useful as a big corporate key management building model, but the question here remains, in all the previous examples you just saw, that we still need to put the keys into the kernel, so we don't want the secrets to be in the application address space, but we still need the application to put it inside the kernel, so even though if the application cleans up after itself, there is a small window of opportunity where application has the plain text secret in its address space, so how can we provision application keys without cryptographic material ever being exposed to the user space at all? So for this we have two other interesting key types, one is called encrypted key, and in this case the process has not the plain text key material, but encrypted key material with some other key, and the kernel has a wrapping key, so when the process inserts that key inside the kernel, the kernel automatically unwraps the key, and if we try to read it back, it gets automatically wrapped by the kernel again. But here we have the chicken and egg problem like how do you then provision the wrap key, right? So, still things, so what James showed earlier today in his demo is you can technically replace this with a TPM, and then you have a thing called a trusted key, so again you have the wrap key, but wrap to a particular TPM, you can insert in the kernel and TPM will automatically unwrap it, and again if you read it back, it gets wrapped. But this schema is not really great because as James mentioned TPMs are slow and there is as much as you can do with these operations, so like if you have thousands of keys you don't want to continuously poke the TPM to unwrap them, so you can do some kind of a combined approach where basically you have some kind of provision, right? So, and you have some kind of HSM in the cloud or on-prem, whatever which does your cryptographic keys, and then you provision a root key first, so you basically wrap the root key to a particular machine to its TPM, and then you insert it and the TPM unwraps it, but all the other thousand keys are encrypted with this root key, so the process received the wrap key and then it puts inside the kernel and then you don't go to TPM, you already have the root key which is a software implementation, can easily unwrap all the other thousand keys. But there are still problems with this approach, even though the application never sees the cryptographic material in this process address phase, but applications are still responsible for receiving this wrapped cryptographical material from this centralized KMS HSM service to wrap their keys, and so basically each application needs, who here uses Vault? Yeah, some people, right? So like it's, you kind of like know what, need to know what your Vault address endpoint is, right? You need to speak the Vault protocol or AWS KMS protocol, you need to basically integrate all this crap in your code, and there is little administrative control if like you're managing fleet of machines of the created kernel key object, so applications when inserting the key can set invalid permissions, so like anyone can, for example, if you set improper permissions on your RSA private key, any application, even malicious on your system, can use it to encrypt or sign data, right? And ideally like you also want authentication here, so KMS or HSM, that remote service, needs to somehow authenticate each requesting application if it can provide the wrapped cryptographic material. So how the kernel tries to solve that problem, it has two set of system calls. So far we've been using the at key system call with a key CTL utility, so it adds the key to the specified, key ring with the specified payload. So basically the application is responsible for the payload itself, so it's either plain text or in case of trusted or encrypted key, the encrypted payload, it gets it from somewhere and it sorts it into the kernel. And the payload is interpreted according to the key type, it's like no interpretation happens for user logon keys, because those are mostly symmetric keys which are random strings, it's a private public key for asymmetric cryptos or wrapped for encrypted and trusted. But there is another interesting API in the kernel called request key, so instead of applications inserting the payload directly what applications can do, they can ask the kernel, just give me my key, give me my key and give it an arbitrary string as an identifier. And it's on the kernel to actually satisfy that request, and obviously the kernel has no idea of everyone set up, like where should it take the key from, so it's one of the examples where the kernel can then make a user space callback and with a special helper program which you can then configure to actually deliver your keys, right? But it's a more centralized and transparent API to the kernel system, so how it works, so you have the process instead of adding key, so the process requests the key from the kernel and provides the identifier, so like give me my cloud app key one, so the kernel creates a placeholder, then it creates a special process, a callout process, helper process in user space called request key, and this one you can configure and you can specify different routes for different key types, for example if I requested the cloud app key one, it will go to the cloud sub-module and you can write these sub-modules in any programming language by the way, it doesn't have to be C, so you can write them in Go, it can be just simple batch scripts as well, which are basically responsible for if the path is cloud, it can contact your cloud HSM, get the wrapped cryptographic material, put it back inside the kernel, the kernel will then instantiate the keys and then the application will get its key back. So with request key advantages, you have a single centralized operating system API to request key from the application, so there are no KMS or HSM connection strings, you arise in your configuration form, just a freeform ID string, and it kind of fully decouples, your application is fully decoupled from key storage backend, so it doesn't care where the keys are stored and how they are distributed, and it's a more secure way to instantiate the keys in the kernel, so this special call-out process which is created by the kernel is very special in the sense that it has a special credential enforced by the kernel, so even if you launch the same helper process yourself as root, it will not be able to instantiate the requested key because it doesn't have a specific token from the kernel to do it. And this also call-out process is very useful, in fact it can be trustworthy, so you can perform additional security checks, you can implement arbitrary policies there, so you can check the requestor, user ID, group ID, executable pass, package name, whatever you suppose, is this application even allowed to request the key in the first place, and you can immediately deny that request. And you can support multiple key storage backends, you have local storage, you have a TPM backend, cloud HSM backend, whatever, and you can even swap these backends transparently, like if you, for example, migrated from on-prem HSM to a cloud HSM, all you have to do is just modify this helper process config file and applications will not notice. And then you have the nice thing that you need to only authenticate this single helper process on your backend. And yeah, as I mentioned, the backend connectors can be written in any language, so very easy to extend. But the nice thing about that with request key, the key management and distribution becomes a core service operating of the operating system itself as it should be, versus like every application has to deal with it on its own. That's basically it for today. Here are some links to some kernel documentation, to some key ring man pages, as well as the last link. Again, everything I told you today and even more is described in the cloud for our blog post, which is linked at the end. Thank you and I'm happy to talk to you. Thank you for the great talk. So I recall there was an API in the producer space to protect memory from kernel space. So the, like a given page was unmapped from the kernel. So if you had an out of bounds in the kernel, you couldn't access the memory, but of course the kernel could remap the page back again. My question is, are the keys protected in such a way in the kernel? And do you think it would make sense to do it? I mean, it would potentially minimize the exposure in theory at least. The default, I don't, I'm not sure about the implement, but I would say no. I think the keys are not like more protected. So the guy who wrote it is right there. And what was the question? If you put a key of the user space process into these areas, they will be more protected than otherwise. It still doesn't guarantee like 100% My point is the kernel could also do it so that it would protect those keys from itself as well. And it would only remap the page back again when it actually, when you do the request key for it. But what's the point then? If kernel needs the keys, it has to have access anyway and remapping and mapping is costly. The other thing is the key store API internally is also extendable. You can write other modules and this is what I asked for. James earlier, that you can technically write an asymmetric key implementation backed by the TPM. So the keys will not be even inside the kernel. It will be in the TPM, but then each operation will have to touch TPM in the first place. Or if you like design some kind of crypto chip or you can like design like an arm like a truss zone back here. So like whatever you want. There was some effort. I don't remember exactly which areas it touched to do this sort of separation between subsystems. But I only learned about it once. I don't know what they say this. No, no. Well in kernel it's still like the old, you mean in the kernel subsystems? I don't like it's still like a flat address space at this point. I don't, unless you're again using like arm trance zone or enclaves or whatever. My question is, so you mentioned that we can do RSA operations. Not everybody is using RSA. Are there any efforts to introduce other kinds of asymmetric keys? In particular, I'd like to see an explicated stuff. So, yes. So the kernel currently also supports ECDSA, but only for signature verification. It was added for kernel modules. I send like patches to actually support signatures through for the Q-Stone API twice. I didn't get any traction on them. I'll send it one more time maybe. Because I also know that the kernel has its own internal crypto API and has support for all of these operations. They're just not exposed through the key store. Well, specifically for RSA, for ECDSA, no. The kernel crypto API doesn't have crypto for ECDSA signatures for generating the signature. So my patch set included both the crypto subsystem and the key store subsystem. The kernel can do ECDSA signatures, but also this code is reachable through the key store API. Okay, thank you. Very interesting talk. Thank you. I have basically the same question. But also, wouldn't there be an urgency to get some PQ crypto in there? Maybe, but we have to fix ECDSA first before we have to learn to walk before the run, right? James, can you pass it to the next? So if we now add the trouson to the picture, does the kernel have any kind of API to interact? I mean, the key store itself, would it interact with the trouson to get the key or we need to still go to the user space to the helper and then the helper will just go through a normal way of communicating with the trouson and secure monitor call and get back the result and then the key back to the kernel. For the trouson, I think there is some code, because I never tested on an ARM system like similar to what we have, the trusted keys for the TPM back trusted keys. There is an implementation for trusted keys for the ARM trouson, the open source one. I saw the code, I never tried it, but it's there. So there is some reference of the application, right? Yes. The GNS and there is internal support for that. Yes. OPTE. Yes, OPTE. Alright, anything else? Oh, yeah. If you shout, I'll just repeat. It's just wondering which version I need to use this. Sorry? Which version is it available from? The kernel key store. I mean, it's quite all, I guess. What we did, I think from 6.1, again, we mentioned the crypto subsystem, the key store subsystem. It was really handy to insert the RSA key into operation with it, but you didn't have any ability to do the same with the symmetric key. So what we extended is like the crypto user space socket API to be initialized from the user or logon key. So now you can do it from 6.1, you can insert a symmetric key and then you can create a crypto socket based on that key to perform like AS encryption with that key without exposing the key to user space. Back to you, does this not want to... So if I recall correctly, you said that the persistent keys can expire after some time of being unused. Does listing the keys also count as using them? That's my first question. My second question is like, what's the time out time for it to expire? I haven't used them like so widely to have those specifics. I think the time out is configurable, definitely, but listing, I don't know if listing the keys actually reset the timer. I just want to answer the question from over here. It looks like the API has been available since 2.6.10, which feels old. Yeah. There is one person over there which... Maybe you shout, I repeat. As a certified micro-configuration enthusiast, is there a reason why this approach is taking rather than planning APIs for the value of duty and so on, that you need the space and have the same benefits? The question was why we didn't do it in user space, but... How do you add extra functionality to the kernel to give you the same benefits? I kind of don't quite understand the question. The whole point is not to expose cryptographic material to user space. You're saying the benefits are, for example, if a process dies, then you can immediately wipe the key from memory and that sort of thing. You could also add functionality to add consistals to the normal database processes that have that sort of benefits. Why didn't you do that rather than sticking extra things into the kernel? Because you can retrace the processing of user space, but you cannot retrace the kernel. Just saying. Anyway, we are out of time. Thank you very much. I'm sure you can get two infocations.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.200000000000001, "text": " All right, so the next talk is going to be about the Linux kernel key store and why you", "tokens": [50364, 1057, 558, 11, 370, 264, 958, 751, 307, 516, 281, 312, 466, 264, 18734, 28256, 2141, 3531, 293, 983, 291, 51024], "temperature": 0.0, "avg_logprob": -0.2776073234668676, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.17506122589111328}, {"id": 1, "seek": 0, "start": 13.200000000000001, "end": 18.240000000000002, "text": " should be using it in your next application.", "tokens": [51024, 820, 312, 1228, 309, 294, 428, 958, 3861, 13, 51276], "temperature": 0.0, "avg_logprob": -0.2776073234668676, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.17506122589111328}, {"id": 2, "seek": 0, "start": 18.240000000000002, "end": 19.240000000000002, "text": " Thank you.", "tokens": [51276, 1044, 291, 13, 51326], "temperature": 0.0, "avg_logprob": -0.2776073234668676, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.17506122589111328}, {"id": 3, "seek": 0, "start": 19.240000000000002, "end": 21.6, "text": " Hello, my name is Ignat.", "tokens": [51326, 2425, 11, 452, 1315, 307, 24754, 267, 13, 51444], "temperature": 0.0, "avg_logprob": -0.2776073234668676, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.17506122589111328}, {"id": 4, "seek": 0, "start": 21.6, "end": 26.68, "text": " I work for Cloud for and today we're going to talk about Linux key store.", "tokens": [51444, 286, 589, 337, 8061, 337, 293, 965, 321, 434, 516, 281, 751, 466, 18734, 2141, 3531, 13, 51698], "temperature": 0.0, "avg_logprob": -0.2776073234668676, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.17506122589111328}, {"id": 5, "seek": 2668, "start": 26.68, "end": 31.48, "text": " By the way, how many people here know that Linux has a key store?", "tokens": [50364, 3146, 264, 636, 11, 577, 867, 561, 510, 458, 300, 18734, 575, 257, 2141, 3531, 30, 50604], "temperature": 0.0, "avg_logprob": -0.24910410967740146, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.00707401055842638}, {"id": 6, "seek": 2668, "start": 31.48, "end": 34.76, "text": " Cool, many hands.", "tokens": [50604, 8561, 11, 867, 2377, 13, 50768], "temperature": 0.0, "avg_logprob": -0.24910410967740146, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.00707401055842638}, {"id": 7, "seek": 2668, "start": 34.76, "end": 40.84, "text": " Because like James earlier showed us that it has a key store but probably not everyone", "tokens": [50768, 1436, 411, 5678, 3071, 4712, 505, 300, 309, 575, 257, 2141, 3531, 457, 1391, 406, 1518, 51072], "temperature": 0.0, "avg_logprob": -0.24910410967740146, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.00707401055842638}, {"id": 8, "seek": 2668, "start": 40.84, "end": 43.72, "text": " knows that Linux actually has a key store.", "tokens": [51072, 3255, 300, 18734, 767, 575, 257, 2141, 3531, 13, 51216], "temperature": 0.0, "avg_logprob": -0.24910410967740146, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.00707401055842638}, {"id": 9, "seek": 2668, "start": 43.72, "end": 46.480000000000004, "text": " So, yeah, a little bit about myself.", "tokens": [51216, 407, 11, 1338, 11, 257, 707, 857, 466, 2059, 13, 51354], "temperature": 0.0, "avg_logprob": -0.24910410967740146, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.00707401055842638}, {"id": 10, "seek": 2668, "start": 46.480000000000004, "end": 48.56, "text": " I do Linux at Cloud for.", "tokens": [51354, 286, 360, 18734, 412, 8061, 337, 13, 51458], "temperature": 0.0, "avg_logprob": -0.24910410967740146, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.00707401055842638}, {"id": 11, "seek": 2668, "start": 48.56, "end": 52.04, "text": " I'm passionate about system security and performance.", "tokens": [51458, 286, 478, 11410, 466, 1185, 3825, 293, 3389, 13, 51632], "temperature": 0.0, "avg_logprob": -0.24910410967740146, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.00707401055842638}, {"id": 12, "seek": 5204, "start": 52.04, "end": 59.08, "text": " I'm like Lolo programming, Linux, but loaders, drivers and other stuff written in scary and", "tokens": [50364, 286, 478, 411, 441, 7902, 9410, 11, 18734, 11, 457, 3677, 433, 11, 11590, 293, 661, 1507, 3720, 294, 6958, 293, 50716], "temperature": 0.0, "avg_logprob": -0.2743292390630486, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.0025702519342303276}, {"id": 13, "seek": 5204, "start": 59.08, "end": 62.24, "text": " safe languages.", "tokens": [50716, 3273, 8650, 13, 50874], "temperature": 0.0, "avg_logprob": -0.2743292390630486, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.0025702519342303276}, {"id": 14, "seek": 5204, "start": 62.24, "end": 63.72, "text": " And I'm a hard Linux fan.", "tokens": [50874, 400, 286, 478, 257, 1152, 18734, 3429, 13, 50948], "temperature": 0.0, "avg_logprob": -0.2743292390630486, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.0025702519342303276}, {"id": 15, "seek": 5204, "start": 63.72, "end": 69.6, "text": " That's why I'm presenting from a Mac.", "tokens": [50948, 663, 311, 983, 286, 478, 15578, 490, 257, 5707, 13, 51242], "temperature": 0.0, "avg_logprob": -0.2743292390630486, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.0025702519342303276}, {"id": 16, "seek": 5204, "start": 69.6, "end": 75.56, "text": " And probably like most of you here, I'm a fugitive programmer because NSA banned writing", "tokens": [51242, 400, 1391, 411, 881, 295, 291, 510, 11, 286, 478, 257, 31838, 2187, 32116, 570, 47299, 19564, 3579, 51540], "temperature": 0.0, "avg_logprob": -0.2743292390630486, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.0025702519342303276}, {"id": 17, "seek": 5204, "start": 75.56, "end": 80.12, "text": " C and C++ languages and enterprises.", "tokens": [51540, 383, 293, 383, 25472, 8650, 293, 29034, 13, 51768], "temperature": 0.0, "avg_logprob": -0.2743292390630486, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.0025702519342303276}, {"id": 18, "seek": 5204, "start": 80.12, "end": 81.32, "text": " And why is that?", "tokens": [51768, 400, 983, 307, 300, 30, 51828], "temperature": 0.0, "avg_logprob": -0.2743292390630486, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.0025702519342303276}, {"id": 19, "seek": 8132, "start": 81.32, "end": 91.36, "text": " And there are many reasons but one of them is regarding application keys and memory.", "tokens": [50364, 400, 456, 366, 867, 4112, 457, 472, 295, 552, 307, 8595, 3861, 9317, 293, 4675, 13, 50866], "temperature": 0.0, "avg_logprob": -0.27918668415235437, "compression_ratio": 1.584, "no_speech_prob": 0.0009213000303134322}, {"id": 20, "seek": 8132, "start": 91.36, "end": 96.08, "text": " And by the way, here is the brand that NSA recommends that organization use memory safe", "tokens": [50866, 400, 538, 264, 636, 11, 510, 307, 264, 3360, 300, 47299, 34556, 300, 4475, 764, 4675, 3273, 51102], "temperature": 0.0, "avg_logprob": -0.27918668415235437, "compression_ratio": 1.584, "no_speech_prob": 0.0009213000303134322}, {"id": 21, "seek": 8132, "start": 96.08, "end": 99.8, "text": " languages whenever possible.", "tokens": [51102, 8650, 5699, 1944, 13, 51288], "temperature": 0.0, "avg_logprob": -0.27918668415235437, "compression_ratio": 1.584, "no_speech_prob": 0.0009213000303134322}, {"id": 22, "seek": 8132, "start": 99.8, "end": 103.24, "text": " So what is the problem with application key?", "tokens": [51288, 407, 437, 307, 264, 1154, 365, 3861, 2141, 30, 51460], "temperature": 0.0, "avg_logprob": -0.27918668415235437, "compression_ratio": 1.584, "no_speech_prob": 0.0009213000303134322}, {"id": 23, "seek": 8132, "start": 103.24, "end": 106.08, "text": " Regarding keys, we're like talking about cryptographic keys, right?", "tokens": [51460, 35523, 9317, 11, 321, 434, 411, 1417, 466, 9844, 12295, 9317, 11, 558, 30, 51602], "temperature": 0.0, "avg_logprob": -0.27918668415235437, "compression_ratio": 1.584, "no_speech_prob": 0.0009213000303134322}, {"id": 24, "seek": 8132, "start": 106.08, "end": 111.08, "text": " So to dig into that, let's review the Linux address namespace, isolation concept.", "tokens": [51602, 407, 281, 2528, 666, 300, 11, 718, 311, 3131, 264, 18734, 2985, 5288, 17940, 11, 16001, 3410, 13, 51852], "temperature": 0.0, "avg_logprob": -0.27918668415235437, "compression_ratio": 1.584, "no_speech_prob": 0.0009213000303134322}, {"id": 25, "seek": 11108, "start": 111.08, "end": 118.16, "text": " So yeah, you have these many processes running on your systems because Linux is a multi-threaded,", "tokens": [50364, 407, 1338, 11, 291, 362, 613, 867, 7555, 2614, 322, 428, 3652, 570, 18734, 307, 257, 4825, 12, 392, 2538, 292, 11, 50718], "temperature": 0.0, "avg_logprob": -0.2226553927646594, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.012197896838188171}, {"id": 26, "seek": 11108, "start": 118.16, "end": 120.2, "text": " multi-process system.", "tokens": [50718, 4825, 12, 41075, 1185, 13, 50820], "temperature": 0.0, "avg_logprob": -0.2226553927646594, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.012197896838188171}, {"id": 27, "seek": 11108, "start": 120.2, "end": 123.24, "text": " But what these processes have inside, right?", "tokens": [50820, 583, 437, 613, 7555, 362, 1854, 11, 558, 30, 50972], "temperature": 0.0, "avg_logprob": -0.2226553927646594, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.012197896838188171}, {"id": 28, "seek": 11108, "start": 123.24, "end": 130.32, "text": " So usually it's kind of like your code, like compiled code, your business logic.", "tokens": [50972, 407, 2673, 309, 311, 733, 295, 411, 428, 3089, 11, 411, 36548, 3089, 11, 428, 1606, 9952, 13, 51326], "temperature": 0.0, "avg_logprob": -0.2226553927646594, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.012197896838188171}, {"id": 29, "seek": 11108, "start": 130.32, "end": 137.52, "text": " Some libraries, shared libraries, if your application uses shared libraries, some data, like global", "tokens": [51326, 2188, 15148, 11, 5507, 15148, 11, 498, 428, 3861, 4960, 5507, 15148, 11, 512, 1412, 11, 411, 4338, 51686], "temperature": 0.0, "avg_logprob": -0.2226553927646594, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.012197896838188171}, {"id": 30, "seek": 11108, "start": 137.52, "end": 138.92, "text": " data stack.", "tokens": [51686, 1412, 8630, 13, 51756], "temperature": 0.0, "avg_logprob": -0.2226553927646594, "compression_ratio": 1.6919431279620853, "no_speech_prob": 0.012197896838188171}, {"id": 31, "seek": 13892, "start": 139.92, "end": 142.88, "text": " And yeah, I have the stack box separately.", "tokens": [50414, 400, 1338, 11, 286, 362, 264, 8630, 2424, 14759, 13, 50562], "temperature": 0.0, "avg_logprob": -0.22181861877441406, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.0006332866032607853}, {"id": 32, "seek": 13892, "start": 142.88, "end": 149.92, "text": " So it's like data heap and global variable with mStacks, right?", "tokens": [50562, 407, 309, 311, 411, 1412, 33591, 293, 4338, 7006, 365, 275, 4520, 7424, 11, 558, 30, 50914], "temperature": 0.0, "avg_logprob": -0.22181861877441406, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.0006332866032607853}, {"id": 33, "seek": 13892, "start": 149.92, "end": 152.44, "text": " And then you have the kernel, right?", "tokens": [50914, 400, 550, 291, 362, 264, 28256, 11, 558, 30, 51040], "temperature": 0.0, "avg_logprob": -0.22181861877441406, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.0006332866032607853}, {"id": 34, "seek": 13892, "start": 152.44, "end": 153.44, "text": " Everything runs in the kernel.", "tokens": [51040, 5471, 6676, 294, 264, 28256, 13, 51090], "temperature": 0.0, "avg_logprob": -0.22181861877441406, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.0006332866032607853}, {"id": 35, "seek": 13892, "start": 153.44, "end": 156.44, "text": " In the kernel also you have the core code.", "tokens": [51090, 682, 264, 28256, 611, 291, 362, 264, 4965, 3089, 13, 51240], "temperature": 0.0, "avg_logprob": -0.22181861877441406, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.0006332866032607853}, {"id": 36, "seek": 13892, "start": 156.44, "end": 159.51999999999998, "text": " You have static and dynamic data.", "tokens": [51240, 509, 362, 13437, 293, 8546, 1412, 13, 51394], "temperature": 0.0, "avg_logprob": -0.22181861877441406, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.0006332866032607853}, {"id": 37, "seek": 13892, "start": 159.51999999999998, "end": 163.2, "text": " You have the drivers which you load modules.", "tokens": [51394, 509, 362, 264, 11590, 597, 291, 3677, 16679, 13, 51578], "temperature": 0.0, "avg_logprob": -0.22181861877441406, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.0006332866032607853}, {"id": 38, "seek": 13892, "start": 163.2, "end": 167.72, "text": " And also you have stack or stacks if you have different threads, right?", "tokens": [51578, 400, 611, 291, 362, 8630, 420, 30792, 498, 291, 362, 819, 19314, 11, 558, 30, 51804], "temperature": 0.0, "avg_logprob": -0.22181861877441406, "compression_ratio": 1.7440758293838863, "no_speech_prob": 0.0006332866032607853}, {"id": 39, "seek": 16772, "start": 167.72, "end": 176.04, "text": " And the idea regarding the address spaces is within the process, each process, and even", "tokens": [50364, 400, 264, 1558, 8595, 264, 2985, 7673, 307, 1951, 264, 1399, 11, 1184, 1399, 11, 293, 754, 50780], "temperature": 0.0, "avg_logprob": -0.21078333361395474, "compression_ratio": 1.8375634517766497, "no_speech_prob": 0.0004366213397588581}, {"id": 40, "seek": 16772, "start": 176.04, "end": 179.52, "text": " within the kernel, everything can access everything, right?", "tokens": [50780, 1951, 264, 28256, 11, 1203, 393, 2105, 1203, 11, 558, 30, 50954], "temperature": 0.0, "avg_logprob": -0.21078333361395474, "compression_ratio": 1.8375634517766497, "no_speech_prob": 0.0004366213397588581}, {"id": 41, "seek": 16772, "start": 179.52, "end": 188.28, "text": " So it's like one global space, whereas you can't access the memory of another process", "tokens": [50954, 407, 309, 311, 411, 472, 4338, 1901, 11, 9735, 291, 393, 380, 2105, 264, 4675, 295, 1071, 1399, 51392], "temperature": 0.0, "avg_logprob": -0.21078333361395474, "compression_ratio": 1.8375634517766497, "no_speech_prob": 0.0004366213397588581}, {"id": 42, "seek": 16772, "start": 188.28, "end": 192.4, "text": " from one process and you also can't access the memory of the kernel.", "tokens": [51392, 490, 472, 1399, 293, 291, 611, 393, 380, 2105, 264, 4675, 295, 264, 28256, 13, 51598], "temperature": 0.0, "avg_logprob": -0.21078333361395474, "compression_ratio": 1.8375634517766497, "no_speech_prob": 0.0004366213397588581}, {"id": 43, "seek": 16772, "start": 192.4, "end": 193.92, "text": " Like it's separated.", "tokens": [51598, 1743, 309, 311, 12005, 13, 51674], "temperature": 0.0, "avg_logprob": -0.21078333361395474, "compression_ratio": 1.8375634517766497, "no_speech_prob": 0.0004366213397588581}, {"id": 44, "seek": 16772, "start": 193.92, "end": 196.72, "text": " This is Linux address space isolation.", "tokens": [51674, 639, 307, 18734, 2985, 1901, 16001, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21078333361395474, "compression_ratio": 1.8375634517766497, "no_speech_prob": 0.0004366213397588581}, {"id": 45, "seek": 19672, "start": 197.72, "end": 202.92, "text": " If we zoom in into the main process, into one of the processes, right?", "tokens": [50414, 759, 321, 8863, 294, 666, 264, 2135, 1399, 11, 666, 472, 295, 264, 7555, 11, 558, 30, 50674], "temperature": 0.0, "avg_logprob": -0.26133585990743435, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0001710768701741472}, {"id": 46, "seek": 19672, "start": 202.92, "end": 210.04, "text": " Like let's actually review what can be here and what can be in your data.", "tokens": [50674, 1743, 718, 311, 767, 3131, 437, 393, 312, 510, 293, 437, 393, 312, 294, 428, 1412, 13, 51030], "temperature": 0.0, "avg_logprob": -0.26133585990743435, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0001710768701741472}, {"id": 47, "seek": 19672, "start": 210.04, "end": 212.56, "text": " And it can be like some internal state.", "tokens": [51030, 400, 309, 393, 312, 411, 512, 6920, 1785, 13, 51156], "temperature": 0.0, "avg_logprob": -0.26133585990743435, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0001710768701741472}, {"id": 48, "seek": 19672, "start": 212.56, "end": 218.12, "text": " So you have global variables, like applications can keep some internal state in the data.", "tokens": [51156, 407, 291, 362, 4338, 9102, 11, 411, 5821, 393, 1066, 512, 6920, 1785, 294, 264, 1412, 13, 51434], "temperature": 0.0, "avg_logprob": -0.26133585990743435, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0001710768701741472}, {"id": 49, "seek": 19672, "start": 218.12, "end": 224.4, "text": " Yeah, your process can have user or customer data if it processes some external inputs", "tokens": [51434, 865, 11, 428, 1399, 393, 362, 4195, 420, 5474, 1412, 498, 309, 7555, 512, 8320, 15743, 51748], "temperature": 0.0, "avg_logprob": -0.26133585990743435, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0001710768701741472}, {"id": 50, "seek": 19672, "start": 224.4, "end": 225.8, "text": " and does stuff.", "tokens": [51748, 293, 775, 1507, 13, 51818], "temperature": 0.0, "avg_logprob": -0.26133585990743435, "compression_ratio": 1.721461187214612, "no_speech_prob": 0.0001710768701741472}, {"id": 51, "seek": 22580, "start": 225.8, "end": 226.8, "text": " Right?", "tokens": [50364, 1779, 30, 50414], "temperature": 0.0, "avg_logprob": -0.18576690831135229, "compression_ratio": 1.771186440677966, "no_speech_prob": 5.216318095335737e-05}, {"id": 52, "seek": 22580, "start": 226.8, "end": 230.84, "text": " And the most important thing is cryptographic keys.", "tokens": [50414, 400, 264, 881, 1021, 551, 307, 9844, 12295, 9317, 13, 50616], "temperature": 0.0, "avg_logprob": -0.18576690831135229, "compression_ratio": 1.771186440677966, "no_speech_prob": 5.216318095335737e-05}, {"id": 53, "seek": 22580, "start": 230.84, "end": 235.8, "text": " If your application does some sort of level of encryption, it probably has some keys in", "tokens": [50616, 759, 428, 3861, 775, 512, 1333, 295, 1496, 295, 29575, 11, 309, 1391, 575, 512, 9317, 294, 50864], "temperature": 0.0, "avg_logprob": -0.18576690831135229, "compression_ratio": 1.771186440677966, "no_speech_prob": 5.216318095335737e-05}, {"id": 54, "seek": 22580, "start": 235.8, "end": 238.88000000000002, "text": " the process address space.", "tokens": [50864, 264, 1399, 2985, 1901, 13, 51018], "temperature": 0.0, "avg_logprob": -0.18576690831135229, "compression_ratio": 1.771186440677966, "no_speech_prob": 5.216318095335737e-05}, {"id": 55, "seek": 22580, "start": 238.88000000000002, "end": 244.36, "text": " And what if like suddenly your application becomes compromised, so either through your", "tokens": [51018, 400, 437, 498, 411, 5800, 428, 3861, 3643, 32463, 11, 370, 2139, 807, 428, 51292], "temperature": 0.0, "avg_logprob": -0.18576690831135229, "compression_ratio": 1.771186440677966, "no_speech_prob": 5.216318095335737e-05}, {"id": 56, "seek": 22580, "start": 244.36, "end": 249.76000000000002, "text": " main application logic or through a library, well, it means because it's all in the same", "tokens": [51292, 2135, 3861, 9952, 420, 807, 257, 6405, 11, 731, 11, 309, 1355, 570, 309, 311, 439, 294, 264, 912, 51562], "temperature": 0.0, "avg_logprob": -0.18576690831135229, "compression_ratio": 1.771186440677966, "no_speech_prob": 5.216318095335737e-05}, {"id": 57, "seek": 22580, "start": 249.76000000000002, "end": 255.08, "text": " address space, it means all your data section is compromised, right?", "tokens": [51562, 2985, 1901, 11, 309, 1355, 439, 428, 1412, 3541, 307, 32463, 11, 558, 30, 51828], "temperature": 0.0, "avg_logprob": -0.18576690831135229, "compression_ratio": 1.771186440677966, "no_speech_prob": 5.216318095335737e-05}, {"id": 58, "seek": 25508, "start": 255.08, "end": 257.48, "text": " But not all data is created equal.", "tokens": [50364, 583, 406, 439, 1412, 307, 2942, 2681, 13, 50484], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 59, "seek": 25508, "start": 257.48, "end": 260.32, "text": " So, well, yeah.", "tokens": [50484, 407, 11, 731, 11, 1338, 13, 50626], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 60, "seek": 25508, "start": 260.32, "end": 267.08000000000004, "text": " So yeah, well, like if your application internal state is compromised, well, it can be good", "tokens": [50626, 407, 1338, 11, 731, 11, 411, 498, 428, 3861, 6920, 1785, 307, 32463, 11, 731, 11, 309, 393, 312, 665, 50964], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 61, "seek": 25508, "start": 267.08000000000004, "end": 268.08000000000004, "text": " or bad, right?", "tokens": [50964, 420, 1578, 11, 558, 30, 51014], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 62, "seek": 25508, "start": 268.08000000000004, "end": 269.08000000000004, "text": " It depends.", "tokens": [51014, 467, 5946, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 63, "seek": 25508, "start": 269.08000000000004, "end": 270.2, "text": " Like depends on your logic.", "tokens": [51064, 1743, 5946, 322, 428, 9952, 13, 51120], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 64, "seek": 25508, "start": 270.2, "end": 275.84000000000003, "text": " Of course, it can be bad if the attacker has control of some kind of data which can, for", "tokens": [51120, 2720, 1164, 11, 309, 393, 312, 1578, 498, 264, 35871, 575, 1969, 295, 512, 733, 295, 1412, 597, 393, 11, 337, 51402], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 65, "seek": 25508, "start": 275.84000000000003, "end": 278.84000000000003, "text": " example, change the control flow of your application.", "tokens": [51402, 1365, 11, 1319, 264, 1969, 3095, 295, 428, 3861, 13, 51552], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 66, "seek": 25508, "start": 278.84000000000003, "end": 284.52000000000004, "text": " If you're verifying a password, you can flip back like true or false or you can put some", "tokens": [51552, 759, 291, 434, 1306, 5489, 257, 11524, 11, 291, 393, 7929, 646, 411, 2074, 420, 7908, 420, 291, 393, 829, 512, 51836], "temperature": 0.0, "avg_logprob": -0.19537148475646973, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.0003326665027998388}, {"id": 67, "seek": 28452, "start": 284.52, "end": 290.15999999999997, "text": " authenticated flag on and yeah, this can be bad, but sometimes it's not as bad depends", "tokens": [50364, 9214, 3587, 7166, 322, 293, 1338, 11, 341, 393, 312, 1578, 11, 457, 2171, 309, 311, 406, 382, 1578, 5946, 50646], "temperature": 0.0, "avg_logprob": -0.3171600490421444, "compression_ratio": 1.5380710659898478, "no_speech_prob": 0.001446239068172872}, {"id": 68, "seek": 28452, "start": 290.15999999999997, "end": 295.68, "text": " on if your application is simple, but it can lead to further compromise.", "tokens": [50646, 322, 498, 428, 3861, 307, 2199, 11, 457, 309, 393, 1477, 281, 3052, 18577, 13, 50922], "temperature": 0.0, "avg_logprob": -0.3171600490421444, "compression_ratio": 1.5380710659898478, "no_speech_prob": 0.001446239068172872}, {"id": 69, "seek": 28452, "start": 295.68, "end": 303.15999999999997, "text": " Well, if your user customer data is compromised, then like it's much, much more now.", "tokens": [50922, 1042, 11, 498, 428, 4195, 5474, 1412, 307, 32463, 11, 550, 411, 309, 311, 709, 11, 709, 544, 586, 13, 51296], "temperature": 0.0, "avg_logprob": -0.3171600490421444, "compression_ratio": 1.5380710659898478, "no_speech_prob": 0.001446239068172872}, {"id": 70, "seek": 28452, "start": 303.15999999999997, "end": 308.32, "text": " And yesterday also mentioned Equifox, my favorite company.", "tokens": [51296, 400, 5186, 611, 2835, 15624, 351, 5230, 11, 452, 2954, 2237, 13, 51554], "temperature": 0.0, "avg_logprob": -0.3171600490421444, "compression_ratio": 1.5380710659898478, "no_speech_prob": 0.001446239068172872}, {"id": 71, "seek": 30832, "start": 309.32, "end": 316.44, "text": " Yeah, if you're a user customer data leak, it's a big problem because kind of it creates", "tokens": [50414, 865, 11, 498, 291, 434, 257, 4195, 5474, 1412, 17143, 11, 309, 311, 257, 955, 1154, 570, 733, 295, 309, 7829, 50770], "temperature": 0.0, "avg_logprob": -0.24870194329155815, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.004763712640851736}, {"id": 72, "seek": 30832, "start": 316.44, "end": 323.12, "text": " a lot of pressure on the company and you have to pay a lot of fines, but it's very, very", "tokens": [50770, 257, 688, 295, 3321, 322, 264, 2237, 293, 291, 362, 281, 1689, 257, 688, 295, 37989, 11, 457, 309, 311, 588, 11, 588, 51104], "temperature": 0.0, "avg_logprob": -0.24870194329155815, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.004763712640851736}, {"id": 73, "seek": 30832, "start": 323.12, "end": 325.64, "text": " bad but still more or less recoverably.", "tokens": [51104, 1578, 457, 920, 544, 420, 1570, 8114, 1188, 13, 51230], "temperature": 0.0, "avg_logprob": -0.24870194329155815, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.004763712640851736}, {"id": 74, "seek": 30832, "start": 325.64, "end": 330.76, "text": " Equifox is still in business to this day, unfortunately.", "tokens": [51230, 15624, 351, 5230, 307, 920, 294, 1606, 281, 341, 786, 11, 7015, 13, 51486], "temperature": 0.0, "avg_logprob": -0.24870194329155815, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.004763712640851736}, {"id": 75, "seek": 30832, "start": 330.76, "end": 335.28, "text": " But what about cryptographic key compromise?", "tokens": [51486, 583, 437, 466, 9844, 12295, 2141, 18577, 30, 51712], "temperature": 0.0, "avg_logprob": -0.24870194329155815, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.004763712640851736}, {"id": 76, "seek": 30832, "start": 335.28, "end": 337.84, "text": " And this is like a total game over, right?", "tokens": [51712, 400, 341, 307, 411, 257, 3217, 1216, 670, 11, 558, 30, 51840], "temperature": 0.0, "avg_logprob": -0.24870194329155815, "compression_ratio": 1.5404255319148936, "no_speech_prob": 0.004763712640851736}, {"id": 77, "seek": 33784, "start": 337.84, "end": 343.15999999999997, "text": " So like if your identity key is leaked, that's what anyone can be as you.", "tokens": [50364, 407, 411, 498, 428, 6575, 2141, 307, 31779, 11, 300, 311, 437, 2878, 393, 312, 382, 291, 13, 50630], "temperature": 0.0, "avg_logprob": -0.24563733014193448, "compression_ratio": 1.6699029126213591, "no_speech_prob": 0.0003095956926699728}, {"id": 78, "seek": 33784, "start": 343.15999999999997, "end": 347.0, "text": " If you're like the main data encryption key is leaked, everyone knows your data.", "tokens": [50630, 759, 291, 434, 411, 264, 2135, 1412, 29575, 2141, 307, 31779, 11, 1518, 3255, 428, 1412, 13, 50822], "temperature": 0.0, "avg_logprob": -0.24563733014193448, "compression_ratio": 1.6699029126213591, "no_speech_prob": 0.0003095956926699728}, {"id": 79, "seek": 33784, "start": 347.0, "end": 351.56, "text": " So it's a data integrity compromise, full security compromise and total identity take", "tokens": [50822, 407, 309, 311, 257, 1412, 16000, 18577, 11, 1577, 3825, 18577, 293, 3217, 6575, 747, 51050], "temperature": 0.0, "avg_logprob": -0.24563733014193448, "compression_ratio": 1.6699029126213591, "no_speech_prob": 0.0003095956926699728}, {"id": 80, "seek": 33784, "start": 351.56, "end": 354.0, "text": " over.", "tokens": [51050, 670, 13, 51172], "temperature": 0.0, "avg_logprob": -0.24563733014193448, "compression_ratio": 1.6699029126213591, "no_speech_prob": 0.0003095956926699728}, {"id": 81, "seek": 33784, "start": 354.0, "end": 361.47999999999996, "text": " So what are the, well, 1000 feet view level of methods you can leak your application keys,", "tokens": [51172, 407, 437, 366, 264, 11, 731, 11, 9714, 3521, 1910, 1496, 295, 7150, 291, 393, 17143, 428, 3861, 9317, 11, 51546], "temperature": 0.0, "avg_logprob": -0.24563733014193448, "compression_ratio": 1.6699029126213591, "no_speech_prob": 0.0003095956926699728}, {"id": 82, "seek": 33784, "start": 361.47999999999996, "end": 362.47999999999996, "text": " right?", "tokens": [51546, 558, 30, 51596], "temperature": 0.0, "avg_logprob": -0.24563733014193448, "compression_ratio": 1.6699029126213591, "no_speech_prob": 0.0003095956926699728}, {"id": 83, "seek": 36248, "start": 362.48, "end": 367.68, "text": " Well, first of all, untrusted inputs and out of bound memory access.", "tokens": [50364, 1042, 11, 700, 295, 439, 11, 1701, 81, 6589, 15743, 293, 484, 295, 5472, 4675, 2105, 13, 50624], "temperature": 0.0, "avg_logprob": -0.18932170867919923, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0007257733377628028}, {"id": 84, "seek": 36248, "start": 367.68, "end": 373.6, "text": " So imagine you have stuff in your memory written somewhere, right?", "tokens": [50624, 407, 3811, 291, 362, 1507, 294, 428, 4675, 3720, 4079, 11, 558, 30, 50920], "temperature": 0.0, "avg_logprob": -0.18932170867919923, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0007257733377628028}, {"id": 85, "seek": 36248, "start": 373.6, "end": 379.12, "text": " And it may be that like near that stuff, you can have like a cryptographic key also in", "tokens": [50920, 400, 309, 815, 312, 300, 411, 2651, 300, 1507, 11, 291, 393, 362, 411, 257, 9844, 12295, 2141, 611, 294, 51196], "temperature": 0.0, "avg_logprob": -0.18932170867919923, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0007257733377628028}, {"id": 86, "seek": 36248, "start": 379.12, "end": 380.12, "text": " the same memory.", "tokens": [51196, 264, 912, 4675, 13, 51246], "temperature": 0.0, "avg_logprob": -0.18932170867919923, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0007257733377628028}, {"id": 87, "seek": 36248, "start": 380.12, "end": 385.84000000000003, "text": " And the normal application logic should allow you only to read stuff.", "tokens": [51246, 400, 264, 2710, 3861, 9952, 820, 2089, 291, 787, 281, 1401, 1507, 13, 51532], "temperature": 0.0, "avg_logprob": -0.18932170867919923, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0007257733377628028}, {"id": 88, "seek": 36248, "start": 385.84000000000003, "end": 391.84000000000003, "text": " But like what happened, for example, in hard bleed, if you can make the application read", "tokens": [51532, 583, 411, 437, 2011, 11, 337, 1365, 11, 294, 1152, 28385, 11, 498, 291, 393, 652, 264, 3861, 1401, 51832], "temperature": 0.0, "avg_logprob": -0.18932170867919923, "compression_ratio": 1.6514522821576763, "no_speech_prob": 0.0007257733377628028}, {"id": 89, "seek": 39184, "start": 391.84, "end": 399.35999999999996, "text": " past the buffer boundary, you can also read the cryptographic key, right?", "tokens": [50364, 1791, 264, 21762, 12866, 11, 291, 393, 611, 1401, 264, 9844, 12295, 2141, 11, 558, 30, 50740], "temperature": 0.0, "avg_logprob": -0.25547856376284644, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.00028176195337437093}, {"id": 90, "seek": 39184, "start": 399.35999999999996, "end": 401.76, "text": " And this is what happened to hard bleed.", "tokens": [50740, 400, 341, 307, 437, 2011, 281, 1152, 28385, 13, 50860], "temperature": 0.0, "avg_logprob": -0.25547856376284644, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.00028176195337437093}, {"id": 91, "seek": 39184, "start": 401.76, "end": 404.0, "text": " Everyone remembers hard bleed.", "tokens": [50860, 5198, 26228, 1152, 28385, 13, 50972], "temperature": 0.0, "avg_logprob": -0.25547856376284644, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.00028176195337437093}, {"id": 92, "seek": 39184, "start": 404.0, "end": 411.32, "text": " Well, if your application have arbitrary remote code execution, like what else to discuss", "tokens": [50972, 1042, 11, 498, 428, 3861, 362, 23211, 8607, 3089, 15058, 11, 411, 437, 1646, 281, 2248, 51338], "temperature": 0.0, "avg_logprob": -0.25547856376284644, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.00028176195337437093}, {"id": 93, "seek": 39184, "start": 411.32, "end": 412.55999999999995, "text": " there is game over, right?", "tokens": [51338, 456, 307, 1216, 670, 11, 558, 30, 51400], "temperature": 0.0, "avg_logprob": -0.25547856376284644, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.00028176195337437093}, {"id": 94, "seek": 39184, "start": 412.55999999999995, "end": 417.2, "text": " So like attacker can control the execution of your binary and they can read, and due", "tokens": [51400, 407, 411, 35871, 393, 1969, 264, 15058, 295, 428, 17434, 293, 436, 393, 1401, 11, 293, 3462, 51632], "temperature": 0.0, "avg_logprob": -0.25547856376284644, "compression_ratio": 1.591743119266055, "no_speech_prob": 0.00028176195337437093}, {"id": 95, "seek": 41720, "start": 417.2, "end": 423.0, "text": " to say everything being in the same process space, so they can read everything and as", "tokens": [50364, 281, 584, 1203, 885, 294, 264, 912, 1399, 1901, 11, 370, 436, 393, 1401, 1203, 293, 382, 50654], "temperature": 0.0, "avg_logprob": -0.37272551185206365, "compression_ratio": 1.5891891891891892, "no_speech_prob": 0.007532072719186544}, {"id": 96, "seek": 41720, "start": 423.0, "end": 425.28, "text": " to write everything.", "tokens": [50654, 281, 2464, 1203, 13, 50768], "temperature": 0.0, "avg_logprob": -0.37272551185206365, "compression_ratio": 1.5891891891891892, "no_speech_prob": 0.007532072719186544}, {"id": 97, "seek": 41720, "start": 425.28, "end": 430.84, "text": " Not much to discuss there, but in the example was recent one, lock for shell.", "tokens": [50768, 1726, 709, 281, 2248, 456, 11, 457, 294, 264, 1365, 390, 5162, 472, 11, 4017, 337, 8720, 13, 51046], "temperature": 0.0, "avg_logprob": -0.37272551185206365, "compression_ratio": 1.5891891891891892, "no_speech_prob": 0.007532072719186544}, {"id": 98, "seek": 41720, "start": 430.84, "end": 432.59999999999997, "text": " Everyone remembers lock for shell.", "tokens": [51046, 5198, 26228, 4017, 337, 8720, 13, 51134], "temperature": 0.0, "avg_logprob": -0.37272551185206365, "compression_ratio": 1.5891891891891892, "no_speech_prob": 0.007532072719186544}, {"id": 99, "seek": 41720, "start": 432.59999999999997, "end": 435.2, "text": " Who patched lock for shell?", "tokens": [51134, 2102, 9972, 292, 4017, 337, 8720, 30, 51264], "temperature": 0.0, "avg_logprob": -0.37272551185206365, "compression_ratio": 1.5891891891891892, "no_speech_prob": 0.007532072719186544}, {"id": 100, "seek": 41720, "start": 435.2, "end": 441.88, "text": " Should have asked yesterday here, Java, right?", "tokens": [51264, 6454, 362, 2351, 5186, 510, 11, 10745, 11, 558, 30, 51598], "temperature": 0.0, "avg_logprob": -0.37272551185206365, "compression_ratio": 1.5891891891891892, "no_speech_prob": 0.007532072719186544}, {"id": 101, "seek": 44188, "start": 441.88, "end": 447.36, "text": " Well, buffer use can be a sort of problem for leaking a key.", "tokens": [50364, 1042, 11, 21762, 764, 393, 312, 257, 1333, 295, 1154, 337, 32856, 257, 2141, 13, 50638], "temperature": 0.0, "avg_logprob": -0.2171744263690451, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.04463861137628555}, {"id": 102, "seek": 44188, "start": 447.36, "end": 452.44, "text": " So for example, this is a very, of course, this is a simplified program, but specifically", "tokens": [50638, 407, 337, 1365, 11, 341, 307, 257, 588, 11, 295, 1164, 11, 341, 307, 257, 26335, 1461, 11, 457, 4682, 50892], "temperature": 0.0, "avg_logprob": -0.2171744263690451, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.04463861137628555}, {"id": 103, "seek": 44188, "start": 452.44, "end": 456.84, "text": " tailored to leak the key, but like it illustrates the example.", "tokens": [50892, 34858, 281, 17143, 264, 2141, 11, 457, 411, 309, 41718, 264, 1365, 13, 51112], "temperature": 0.0, "avg_logprob": -0.2171744263690451, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.04463861137628555}, {"id": 104, "seek": 44188, "start": 456.84, "end": 462.24, "text": " So for example, it has to function and crypt and log, right?", "tokens": [51112, 407, 337, 1365, 11, 309, 575, 281, 2445, 293, 9844, 293, 3565, 11, 558, 30, 51382], "temperature": 0.0, "avg_logprob": -0.2171744263690451, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.04463861137628555}, {"id": 105, "seek": 44188, "start": 462.24, "end": 468.84, "text": " And oh no, we forgot to initialize the logging message in the log function.", "tokens": [51382, 400, 1954, 572, 11, 321, 5298, 281, 5883, 1125, 264, 27991, 3636, 294, 264, 3565, 2445, 13, 51712], "temperature": 0.0, "avg_logprob": -0.2171744263690451, "compression_ratio": 1.6587677725118484, "no_speech_prob": 0.04463861137628555}, {"id": 106, "seek": 46884, "start": 468.84, "end": 473.35999999999996, "text": " And if you actually execute it, you will see that it kind of actually leaks the cryptographic", "tokens": [50364, 400, 498, 291, 767, 14483, 309, 11, 291, 486, 536, 300, 309, 733, 295, 767, 28885, 264, 9844, 12295, 50590], "temperature": 0.0, "avg_logprob": -0.14885107967831673, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.0028870857786387205}, {"id": 107, "seek": 46884, "start": 473.35999999999996, "end": 475.11999999999995, "text": " key.", "tokens": [50590, 2141, 13, 50678], "temperature": 0.0, "avg_logprob": -0.14885107967831673, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.0028870857786387205}, {"id": 108, "seek": 46884, "start": 475.11999999999995, "end": 480.4, "text": " So what happens is you have the process as thread stack, you have your main logic.", "tokens": [50678, 407, 437, 2314, 307, 291, 362, 264, 1399, 382, 7207, 8630, 11, 291, 362, 428, 2135, 9952, 13, 50942], "temperature": 0.0, "avg_logprob": -0.14885107967831673, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.0028870857786387205}, {"id": 109, "seek": 46884, "start": 480.4, "end": 485.47999999999996, "text": " For example, you call the decrypt or encrypt data function, which will get the key from", "tokens": [50942, 1171, 1365, 11, 291, 818, 264, 979, 627, 662, 420, 17972, 662, 1412, 2445, 11, 597, 486, 483, 264, 2141, 490, 51196], "temperature": 0.0, "avg_logprob": -0.14885107967831673, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.0028870857786387205}, {"id": 110, "seek": 46884, "start": 485.47999999999996, "end": 489.47999999999996, "text": " somewhere and may put it on the stack depending on the implementation.", "tokens": [51196, 4079, 293, 815, 829, 309, 322, 264, 8630, 5413, 322, 264, 11420, 13, 51396], "temperature": 0.0, "avg_logprob": -0.14885107967831673, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.0028870857786387205}, {"id": 111, "seek": 46884, "start": 489.47999999999996, "end": 495.0, "text": " But if you then the function exits, but if it doesn't clean it up the stack with the key,", "tokens": [51396, 583, 498, 291, 550, 264, 2445, 44183, 11, 457, 498, 309, 1177, 380, 2541, 309, 493, 264, 8630, 365, 264, 2141, 11, 51672], "temperature": 0.0, "avg_logprob": -0.14885107967831673, "compression_ratio": 1.7408906882591093, "no_speech_prob": 0.0028870857786387205}, {"id": 112, "seek": 49500, "start": 495.0, "end": 501.72, "text": " the next function can take it over and actually has an example, sorry, has an access to that", "tokens": [50364, 264, 958, 2445, 393, 747, 309, 670, 293, 767, 575, 364, 1365, 11, 2597, 11, 575, 364, 2105, 281, 300, 50700], "temperature": 0.0, "avg_logprob": -0.27323702107305115, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.002840449335053563}, {"id": 113, "seek": 49500, "start": 501.72, "end": 504.16, "text": " cryptographic key, right?", "tokens": [50700, 9844, 12295, 2141, 11, 558, 30, 50822], "temperature": 0.0, "avg_logprob": -0.27323702107305115, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.002840449335053563}, {"id": 114, "seek": 49500, "start": 504.16, "end": 510.4, "text": " This is why all the compliance and security folks will tell you you always need to zero", "tokens": [50822, 639, 307, 983, 439, 264, 15882, 293, 3825, 4024, 486, 980, 291, 291, 1009, 643, 281, 4018, 51134], "temperature": 0.0, "avg_logprob": -0.27323702107305115, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.002840449335053563}, {"id": 115, "seek": 49500, "start": 510.4, "end": 512.08, "text": " memory after key use.", "tokens": [51134, 4675, 934, 2141, 764, 13, 51218], "temperature": 0.0, "avg_logprob": -0.27323702107305115, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.002840449335053563}, {"id": 116, "seek": 49500, "start": 512.08, "end": 514.08, "text": " Like you have to clean up.", "tokens": [51218, 1743, 291, 362, 281, 2541, 493, 13, 51318], "temperature": 0.0, "avg_logprob": -0.27323702107305115, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.002840449335053563}, {"id": 117, "seek": 49500, "start": 514.08, "end": 519.76, "text": " Which is hard to do in many high level programming languages, especially if in garbage collected", "tokens": [51318, 3013, 307, 1152, 281, 360, 294, 867, 1090, 1496, 9410, 8650, 11, 2318, 498, 294, 14150, 11087, 51602], "temperature": 0.0, "avg_logprob": -0.27323702107305115, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.002840449335053563}, {"id": 118, "seek": 49500, "start": 519.76, "end": 521.32, "text": " languages, right?", "tokens": [51602, 8650, 11, 558, 30, 51680], "temperature": 0.0, "avg_logprob": -0.27323702107305115, "compression_ratio": 1.5481171548117154, "no_speech_prob": 0.002840449335053563}, {"id": 119, "seek": 52132, "start": 522.2, "end": 525.0400000000001, "text": " Finally, you have the debugging tools.", "tokens": [50408, 6288, 11, 291, 362, 264, 45592, 3873, 13, 50550], "temperature": 0.0, "avg_logprob": -0.3091762015160094, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.000507242395542562}, {"id": 120, "seek": 52132, "start": 525.0400000000001, "end": 533.0400000000001, "text": " If you have a logging can accidentally leak your keys like core dumps, like GDB, Ptrace,", "tokens": [50550, 759, 291, 362, 257, 27991, 393, 15715, 17143, 428, 9317, 411, 4965, 11430, 82, 11, 411, 460, 27735, 11, 430, 6903, 617, 11, 50950], "temperature": 0.0, "avg_logprob": -0.3091762015160094, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.000507242395542562}, {"id": 121, "seek": 52132, "start": 533.0400000000001, "end": 538.7600000000001, "text": " everything that can access the memory of the application can leak a secret.", "tokens": [50950, 1203, 300, 393, 2105, 264, 4675, 295, 264, 3861, 393, 17143, 257, 4054, 13, 51236], "temperature": 0.0, "avg_logprob": -0.3091762015160094, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.000507242395542562}, {"id": 122, "seek": 52132, "start": 538.7600000000001, "end": 545.8000000000001, "text": " Yeah, well let's make our applications don't crash and fix all the problems, right?", "tokens": [51236, 865, 11, 731, 718, 311, 652, 527, 5821, 500, 380, 8252, 293, 3191, 439, 264, 2740, 11, 558, 30, 51588], "temperature": 0.0, "avg_logprob": -0.3091762015160094, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.000507242395542562}, {"id": 123, "seek": 52132, "start": 545.8000000000001, "end": 549.96, "text": " We obviously can't fix all the bugs, so we have to do something about it.", "tokens": [51588, 492, 2745, 393, 380, 3191, 439, 264, 15120, 11, 370, 321, 362, 281, 360, 746, 466, 309, 13, 51796], "temperature": 0.0, "avg_logprob": -0.3091762015160094, "compression_ratio": 1.5903083700440528, "no_speech_prob": 0.000507242395542562}, {"id": 124, "seek": 54996, "start": 549.96, "end": 555.1600000000001, "text": " And probably we can't do a completely secure application, but what can we do specifically", "tokens": [50364, 400, 1391, 321, 393, 380, 360, 257, 2584, 7144, 3861, 11, 457, 437, 393, 321, 360, 4682, 50624], "temperature": 0.0, "avg_logprob": -0.21796613994397615, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0002774277236312628}, {"id": 125, "seek": 54996, "start": 555.1600000000001, "end": 556.52, "text": " for cryptographic keys?", "tokens": [50624, 337, 9844, 12295, 9317, 30, 50692], "temperature": 0.0, "avg_logprob": -0.21796613994397615, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0002774277236312628}, {"id": 126, "seek": 54996, "start": 556.52, "end": 562.88, "text": " Because they are the highest, most valuable data in our process address space.", "tokens": [50692, 1436, 436, 366, 264, 6343, 11, 881, 8263, 1412, 294, 527, 1399, 2985, 1901, 13, 51010], "temperature": 0.0, "avg_logprob": -0.21796613994397615, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0002774277236312628}, {"id": 127, "seek": 54996, "start": 562.88, "end": 570.0, "text": " What some applications do, well, they try to leverage the operating system address space", "tokens": [51010, 708, 512, 5821, 360, 11, 731, 11, 436, 853, 281, 13982, 264, 7447, 1185, 2985, 1901, 51366], "temperature": 0.0, "avg_logprob": -0.21796613994397615, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0002774277236312628}, {"id": 128, "seek": 54996, "start": 570.0, "end": 574.08, "text": " isolation, so they basically create another process, right?", "tokens": [51366, 16001, 11, 370, 436, 1936, 1884, 1071, 1399, 11, 558, 30, 51570], "temperature": 0.0, "avg_logprob": -0.21796613994397615, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0002774277236312628}, {"id": 129, "seek": 54996, "start": 574.08, "end": 579.84, "text": " It will have a different data section and you can just move the cryptographic keys over", "tokens": [51570, 467, 486, 362, 257, 819, 1412, 3541, 293, 291, 393, 445, 1286, 264, 9844, 12295, 9317, 670, 51858], "temperature": 0.0, "avg_logprob": -0.21796613994397615, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.0002774277236312628}, {"id": 130, "seek": 57984, "start": 579.84, "end": 587.9200000000001, "text": " to a different process and you write some very basic, very simple, which is unlikely", "tokens": [50364, 281, 257, 819, 1399, 293, 291, 2464, 512, 588, 3875, 11, 588, 2199, 11, 597, 307, 17518, 50768], "temperature": 0.0, "avg_logprob": -0.22184493324973367, "compression_ratio": 1.5297029702970297, "no_speech_prob": 0.0008071874617598951}, {"id": 131, "seek": 57984, "start": 587.9200000000001, "end": 593.88, "text": " to have bugs, a cryptographic logic to handle these keys on behalf of the main process.", "tokens": [50768, 281, 362, 15120, 11, 257, 9844, 12295, 9952, 281, 4813, 613, 9317, 322, 9490, 295, 264, 2135, 1399, 13, 51066], "temperature": 0.0, "avg_logprob": -0.22184493324973367, "compression_ratio": 1.5297029702970297, "no_speech_prob": 0.0008071874617598951}, {"id": 132, "seek": 57984, "start": 593.88, "end": 601.36, "text": " And then you create some kind of well-defined, tightened user interface between two processes,", "tokens": [51066, 400, 550, 291, 1884, 512, 733, 295, 731, 12, 37716, 11, 49673, 4195, 9226, 1296, 732, 7555, 11, 51440], "temperature": 0.0, "avg_logprob": -0.22184493324973367, "compression_ratio": 1.5297029702970297, "no_speech_prob": 0.0008071874617598951}, {"id": 133, "seek": 57984, "start": 601.36, "end": 604.24, "text": " right?", "tokens": [51440, 558, 30, 51584], "temperature": 0.0, "avg_logprob": -0.22184493324973367, "compression_ratio": 1.5297029702970297, "no_speech_prob": 0.0008071874617598951}, {"id": 134, "seek": 57984, "start": 604.24, "end": 607.08, "text": " So we call it the key agent model.", "tokens": [51584, 407, 321, 818, 309, 264, 2141, 9461, 2316, 13, 51726], "temperature": 0.0, "avg_logprob": -0.22184493324973367, "compression_ratio": 1.5297029702970297, "no_speech_prob": 0.0008071874617598951}, {"id": 135, "seek": 60708, "start": 607.08, "end": 611.36, "text": " So you have two processes, one, the main process and the helper agent.", "tokens": [50364, 407, 291, 362, 732, 7555, 11, 472, 11, 264, 2135, 1399, 293, 264, 36133, 9461, 13, 50578], "temperature": 0.0, "avg_logprob": -0.17192305396584903, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.002164205303415656}, {"id": 136, "seek": 60708, "start": 611.36, "end": 618.0, "text": " The main process does not have the cryptographic material in the address space and the main", "tokens": [50578, 440, 2135, 1399, 775, 406, 362, 264, 9844, 12295, 2527, 294, 264, 2985, 1901, 293, 264, 2135, 50910], "temperature": 0.0, "avg_logprob": -0.17192305396584903, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.002164205303415656}, {"id": 137, "seek": 60708, "start": 618.0, "end": 622.6800000000001, "text": " communicates with the agent through a well-defined interface to perform cryptographic operation", "tokens": [50910, 3363, 1024, 365, 264, 9461, 807, 257, 731, 12, 37716, 9226, 281, 2042, 9844, 12295, 6916, 51144], "temperature": 0.0, "avg_logprob": -0.17192305396584903, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.002164205303415656}, {"id": 138, "seek": 60708, "start": 622.6800000000001, "end": 624.44, "text": " on its behalf.", "tokens": [51144, 322, 1080, 9490, 13, 51232], "temperature": 0.0, "avg_logprob": -0.17192305396584903, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.002164205303415656}, {"id": 139, "seek": 60708, "start": 624.44, "end": 629.6, "text": " And agent is usually doesn't process untrusted input, like it's not connected to the network", "tokens": [51232, 400, 9461, 307, 2673, 1177, 380, 1399, 1701, 81, 6589, 4846, 11, 411, 309, 311, 406, 4582, 281, 264, 3209, 51490], "temperature": 0.0, "avg_logprob": -0.17192305396584903, "compression_ratio": 1.6944444444444444, "no_speech_prob": 0.002164205303415656}, {"id": 140, "seek": 62960, "start": 629.6, "end": 637.0400000000001, "text": " and is usually, and more scrutiny goes into that review.", "tokens": [50364, 293, 307, 2673, 11, 293, 544, 38615, 1709, 666, 300, 3131, 13, 50736], "temperature": 0.0, "avg_logprob": -0.30090664757622615, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.0779067873954773}, {"id": 141, "seek": 62960, "start": 637.0400000000001, "end": 640.76, "text": " And some of the example of these we all use every day.", "tokens": [50736, 400, 512, 295, 264, 1365, 295, 613, 321, 439, 764, 633, 786, 13, 50922], "temperature": 0.0, "avg_logprob": -0.30090664757622615, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.0779067873954773}, {"id": 142, "seek": 62960, "start": 640.76, "end": 642.96, "text": " So who here uses SSH?", "tokens": [50922, 407, 567, 510, 4960, 12238, 39, 30, 51032], "temperature": 0.0, "avg_logprob": -0.30090664757622615, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.0779067873954773}, {"id": 143, "seek": 62960, "start": 642.96, "end": 646.8000000000001, "text": " Who here doesn't use SSH agent?", "tokens": [51032, 2102, 510, 1177, 380, 764, 12238, 39, 9461, 30, 51224], "temperature": 0.0, "avg_logprob": -0.30090664757622615, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.0779067873954773}, {"id": 144, "seek": 62960, "start": 646.8000000000001, "end": 647.8000000000001, "text": " You don't?", "tokens": [51224, 509, 500, 380, 30, 51274], "temperature": 0.0, "avg_logprob": -0.30090664757622615, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.0779067873954773}, {"id": 145, "seek": 62960, "start": 647.8000000000001, "end": 648.8000000000001, "text": " Yeah.", "tokens": [51274, 865, 13, 51324], "temperature": 0.0, "avg_logprob": -0.30090664757622615, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.0779067873954773}, {"id": 146, "seek": 62960, "start": 648.8000000000001, "end": 654.6, "text": " Yeah, so SSH agent, GP agent, stuff like that.", "tokens": [51324, 865, 11, 370, 12238, 39, 9461, 11, 26039, 9461, 11, 1507, 411, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.30090664757622615, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.0779067873954773}, {"id": 147, "seek": 62960, "start": 654.6, "end": 657.0, "text": " But there are drawbacks to this approach, right?", "tokens": [51614, 583, 456, 366, 2642, 17758, 281, 341, 3109, 11, 558, 30, 51734], "temperature": 0.0, "avg_logprob": -0.30090664757622615, "compression_ratio": 1.470899470899471, "no_speech_prob": 0.0779067873954773}, {"id": 148, "seek": 65700, "start": 657.0, "end": 660.08, "text": " So we need to develop and maintain two programs.", "tokens": [50364, 407, 321, 643, 281, 1499, 293, 6909, 732, 4268, 13, 50518], "temperature": 0.0, "avg_logprob": -0.2716820673509078, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.0009655047906562686}, {"id": 149, "seek": 65700, "start": 660.08, "end": 663.32, "text": " We need to design this well-defined interface.", "tokens": [50518, 492, 643, 281, 1715, 341, 731, 12, 37716, 9226, 13, 50680], "temperature": 0.0, "avg_logprob": -0.2716820673509078, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.0009655047906562686}, {"id": 150, "seek": 65700, "start": 663.32, "end": 665.16, "text": " We need to add communication.", "tokens": [50680, 492, 643, 281, 909, 6101, 13, 50772], "temperature": 0.0, "avg_logprob": -0.2716820673509078, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.0009655047906562686}, {"id": 151, "seek": 65700, "start": 665.16, "end": 667.28, "text": " Like we need to think about how these processes communicate.", "tokens": [50772, 1743, 321, 643, 281, 519, 466, 577, 613, 7555, 7890, 13, 50878], "temperature": 0.0, "avg_logprob": -0.2716820673509078, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.0009655047906562686}, {"id": 152, "seek": 65700, "start": 667.28, "end": 673.88, "text": " Should we use Unix, talk, shared memory, something else, HTTP.", "tokens": [50878, 6454, 321, 764, 1156, 970, 11, 751, 11, 5507, 4675, 11, 746, 1646, 11, 33283, 13, 51208], "temperature": 0.0, "avg_logprob": -0.2716820673509078, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.0009655047906562686}, {"id": 153, "seek": 65700, "start": 673.88, "end": 680.88, "text": " And probably it's a good to somehow enforce and authenticate the main process from the", "tokens": [51208, 400, 1391, 309, 311, 257, 665, 281, 6063, 24825, 293, 9214, 8700, 264, 2135, 1399, 490, 264, 51558], "temperature": 0.0, "avg_logprob": -0.2716820673509078, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.0009655047906562686}, {"id": 154, "seek": 65700, "start": 680.88, "end": 681.88, "text": " agent.", "tokens": [51558, 9461, 13, 51608], "temperature": 0.0, "avg_logprob": -0.2716820673509078, "compression_ratio": 1.5806451612903225, "no_speech_prob": 0.0009655047906562686}, {"id": 155, "seek": 68188, "start": 681.88, "end": 686.84, "text": " And not if the agent is kind of like this thing that performs cryptographic operations,", "tokens": [50364, 400, 406, 498, 264, 9461, 307, 733, 295, 411, 341, 551, 300, 26213, 9844, 12295, 7705, 11, 50612], "temperature": 0.0, "avg_logprob": -0.22775022265980543, "compression_ratio": 1.646090534979424, "no_speech_prob": 0.0024217525497078896}, {"id": 156, "seek": 68188, "start": 686.84, "end": 691.76, "text": " we don't want anything in our system talking to it and being able to do signatures with", "tokens": [50612, 321, 500, 380, 528, 1340, 294, 527, 1185, 1417, 281, 309, 293, 885, 1075, 281, 360, 32322, 365, 50858], "temperature": 0.0, "avg_logprob": -0.22775022265980543, "compression_ratio": 1.646090534979424, "no_speech_prob": 0.0024217525497078896}, {"id": 157, "seek": 68188, "start": 691.76, "end": 695.12, "text": " our keys.", "tokens": [50858, 527, 9317, 13, 51026], "temperature": 0.0, "avg_logprob": -0.22775022265980543, "compression_ratio": 1.646090534979424, "no_speech_prob": 0.0024217525497078896}, {"id": 158, "seek": 68188, "start": 695.12, "end": 698.4399999999999, "text": " This is where we go to Linux kernel key store.", "tokens": [51026, 639, 307, 689, 321, 352, 281, 18734, 28256, 2141, 3531, 13, 51192], "temperature": 0.0, "avg_logprob": -0.22775022265980543, "compression_ratio": 1.646090534979424, "no_speech_prob": 0.0024217525497078896}, {"id": 159, "seek": 68188, "start": 698.4399999999999, "end": 704.28, "text": " And the official name is Linux kernel key retention service.", "tokens": [51192, 400, 264, 4783, 1315, 307, 18734, 28256, 2141, 22871, 2643, 13, 51484], "temperature": 0.0, "avg_logprob": -0.22775022265980543, "compression_ratio": 1.646090534979424, "no_speech_prob": 0.0024217525497078896}, {"id": 160, "seek": 68188, "start": 704.28, "end": 705.6, "text": " I call it the key store.", "tokens": [51484, 286, 818, 309, 264, 2141, 3531, 13, 51550], "temperature": 0.0, "avg_logprob": -0.22775022265980543, "compression_ratio": 1.646090534979424, "no_speech_prob": 0.0024217525497078896}, {"id": 161, "seek": 68188, "start": 705.6, "end": 710.8, "text": " Some people say it's a key ring, but actually, like key store has many key rings.", "tokens": [51550, 2188, 561, 584, 309, 311, 257, 2141, 4875, 11, 457, 767, 11, 411, 2141, 3531, 575, 867, 2141, 11136, 13, 51810], "temperature": 0.0, "avg_logprob": -0.22775022265980543, "compression_ratio": 1.646090534979424, "no_speech_prob": 0.0024217525497078896}, {"id": 162, "seek": 71080, "start": 710.8, "end": 715.92, "text": " So I think the key store is kind of the most applicable technology.", "tokens": [50364, 407, 286, 519, 264, 2141, 3531, 307, 733, 295, 264, 881, 21142, 2899, 13, 50620], "temperature": 0.0, "avg_logprob": -0.2165735363960266, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.00041226125904358923}, {"id": 163, "seek": 71080, "start": 715.92, "end": 720.76, "text": " And what it does is basically it takes this agent model and instead of process two, it", "tokens": [50620, 400, 437, 309, 775, 307, 1936, 309, 2516, 341, 9461, 2316, 293, 2602, 295, 1399, 732, 11, 309, 50862], "temperature": 0.0, "avg_logprob": -0.2165735363960266, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.00041226125904358923}, {"id": 164, "seek": 71080, "start": 720.76, "end": 723.12, "text": " replaces it with a kernel, right?", "tokens": [50862, 46734, 309, 365, 257, 28256, 11, 558, 30, 50980], "temperature": 0.0, "avg_logprob": -0.2165735363960266, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.00041226125904358923}, {"id": 165, "seek": 71080, "start": 723.12, "end": 728.16, "text": " And the well-defined interface is just system calls.", "tokens": [50980, 400, 264, 731, 12, 37716, 9226, 307, 445, 1185, 5498, 13, 51232], "temperature": 0.0, "avg_logprob": -0.2165735363960266, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.00041226125904358923}, {"id": 166, "seek": 71080, "start": 728.16, "end": 729.4399999999999, "text": " Easy.", "tokens": [51232, 16002, 13, 51296], "temperature": 0.0, "avg_logprob": -0.2165735363960266, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.00041226125904358923}, {"id": 167, "seek": 71080, "start": 729.4399999999999, "end": 735.4799999999999, "text": " So in a nutshell, Linux kernel key retention service stores cryptographic keys as kernel", "tokens": [51296, 407, 294, 257, 37711, 11, 18734, 28256, 2141, 22871, 2643, 9512, 9844, 12295, 9317, 382, 28256, 51598], "temperature": 0.0, "avg_logprob": -0.2165735363960266, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.00041226125904358923}, {"id": 168, "seek": 71080, "start": 735.4799999999999, "end": 736.4799999999999, "text": " object.", "tokens": [51598, 2657, 13, 51648], "temperature": 0.0, "avg_logprob": -0.2165735363960266, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.00041226125904358923}, {"id": 169, "seek": 71080, "start": 736.4799999999999, "end": 739.64, "text": " And this gives us some flexibility.", "tokens": [51648, 400, 341, 2709, 505, 512, 12635, 13, 51806], "temperature": 0.0, "avg_logprob": -0.2165735363960266, "compression_ratio": 1.5447154471544715, "no_speech_prob": 0.00041226125904358923}, {"id": 170, "seek": 73964, "start": 739.64, "end": 745.0, "text": " So it was initially actually designed to share keys with the kernel services itself.", "tokens": [50364, 407, 309, 390, 9105, 767, 4761, 281, 2073, 9317, 365, 264, 28256, 3328, 2564, 13, 50632], "temperature": 0.0, "avg_logprob": -0.19639671989109206, "compression_ratio": 1.7695035460992907, "no_speech_prob": 0.0007648313767276704}, {"id": 171, "seek": 73964, "start": 745.0, "end": 748.64, "text": " So like for disk encryption, for example, you pass a key to the kernel and the kernel", "tokens": [50632, 407, 411, 337, 12355, 29575, 11, 337, 1365, 11, 291, 1320, 257, 2141, 281, 264, 28256, 293, 264, 28256, 50814], "temperature": 0.0, "avg_logprob": -0.19639671989109206, "compression_ratio": 1.7695035460992907, "no_speech_prob": 0.0007648313767276704}, {"id": 172, "seek": 73964, "start": 748.64, "end": 749.72, "text": " uses it.", "tokens": [50814, 4960, 309, 13, 50868], "temperature": 0.0, "avg_logprob": -0.19639671989109206, "compression_ratio": 1.7695035460992907, "no_speech_prob": 0.0007648313767276704}, {"id": 173, "seek": 73964, "start": 749.72, "end": 753.52, "text": " But eventually it was extended to user space.", "tokens": [50868, 583, 4728, 309, 390, 10913, 281, 4195, 1901, 13, 51058], "temperature": 0.0, "avg_logprob": -0.19639671989109206, "compression_ratio": 1.7695035460992907, "no_speech_prob": 0.0007648313767276704}, {"id": 174, "seek": 73964, "start": 753.52, "end": 757.72, "text": " And the advantages that keys are now stored outside of the process address space, you", "tokens": [51058, 400, 264, 14906, 300, 9317, 366, 586, 12187, 2380, 295, 264, 1399, 2985, 1901, 11, 291, 51268], "temperature": 0.0, "avg_logprob": -0.19639671989109206, "compression_ratio": 1.7695035460992907, "no_speech_prob": 0.0007648313767276704}, {"id": 175, "seek": 73964, "start": 757.72, "end": 762.84, "text": " have already have a well-defined system call interface to access and use the keys.", "tokens": [51268, 362, 1217, 362, 257, 731, 12, 37716, 1185, 818, 9226, 281, 2105, 293, 764, 264, 9317, 13, 51524], "temperature": 0.0, "avg_logprob": -0.19639671989109206, "compression_ratio": 1.7695035460992907, "no_speech_prob": 0.0007648313767276704}, {"id": 176, "seek": 73964, "start": 762.84, "end": 767.92, "text": " And keys are becoming kernel objects so you can have associated access control lists,", "tokens": [51524, 400, 9317, 366, 5617, 28256, 6565, 370, 291, 393, 362, 6615, 2105, 1969, 14511, 11, 51778], "temperature": 0.0, "avg_logprob": -0.19639671989109206, "compression_ratio": 1.7695035460992907, "no_speech_prob": 0.0007648313767276704}, {"id": 177, "seek": 73964, "start": 767.92, "end": 768.92, "text": " permission checks.", "tokens": [51778, 11226, 13834, 13, 51828], "temperature": 0.0, "avg_logprob": -0.19639671989109206, "compression_ratio": 1.7695035460992907, "no_speech_prob": 0.0007648313767276704}, {"id": 178, "seek": 76892, "start": 769.8, "end": 772.7199999999999, "text": " Like you have on files or some other kernel objects itself.", "tokens": [50408, 1743, 291, 362, 322, 7098, 420, 512, 661, 28256, 6565, 2564, 13, 50554], "temperature": 0.0, "avg_logprob": -0.1850137710571289, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.000509408360812813}, {"id": 179, "seek": 76892, "start": 772.7199999999999, "end": 777.88, "text": " And the nice thing about it is like the key life cycle can be implicitly bound to the", "tokens": [50554, 400, 264, 1481, 551, 466, 309, 307, 411, 264, 2141, 993, 6586, 393, 312, 26947, 356, 5472, 281, 264, 50812], "temperature": 0.0, "avg_logprob": -0.1850137710571289, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.000509408360812813}, {"id": 180, "seek": 76892, "start": 777.88, "end": 780.52, "text": " code life cycle.", "tokens": [50812, 3089, 993, 6586, 13, 50944], "temperature": 0.0, "avg_logprob": -0.1850137710571289, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.000509408360812813}, {"id": 181, "seek": 76892, "start": 780.52, "end": 786.4399999999999, "text": " For example, security deleting a key even if the process terminates abruptly.", "tokens": [50944, 1171, 1365, 11, 3825, 48946, 257, 2141, 754, 498, 264, 1399, 10761, 1024, 49642, 13, 51240], "temperature": 0.0, "avg_logprob": -0.1850137710571289, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.000509408360812813}, {"id": 182, "seek": 76892, "start": 786.4399999999999, "end": 793.8399999999999, "text": " And for a kernel feature, it surprisingly has a quite good documentation.", "tokens": [51240, 400, 337, 257, 28256, 4111, 11, 309, 17600, 575, 257, 1596, 665, 14333, 13, 51610], "temperature": 0.0, "avg_logprob": -0.1850137710571289, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.000509408360812813}, {"id": 183, "seek": 76892, "start": 793.8399999999999, "end": 795.8399999999999, "text": " So what does the key store look like?", "tokens": [51610, 407, 437, 775, 264, 2141, 3531, 574, 411, 30, 51710], "temperature": 0.0, "avg_logprob": -0.1850137710571289, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.000509408360812813}, {"id": 184, "seek": 76892, "start": 795.8399999999999, "end": 798.36, "text": " So it's a collection of key rings and keys.", "tokens": [51710, 407, 309, 311, 257, 5765, 295, 2141, 11136, 293, 9317, 13, 51836], "temperature": 0.0, "avg_logprob": -0.1850137710571289, "compression_ratio": 1.5903614457831325, "no_speech_prob": 0.000509408360812813}, {"id": 185, "seek": 79836, "start": 798.36, "end": 806.24, "text": " So a key ring can have links to other key rings and keys can contain other key rings", "tokens": [50364, 407, 257, 2141, 4875, 393, 362, 6123, 281, 661, 2141, 11136, 293, 9317, 393, 5304, 661, 2141, 11136, 50758], "temperature": 0.0, "avg_logprob": -0.20996003740289237, "compression_ratio": 1.75, "no_speech_prob": 6.577942986041307e-05}, {"id": 186, "seek": 79836, "start": 806.24, "end": 807.24, "text": " or contain keys.", "tokens": [50758, 420, 5304, 9317, 13, 50808], "temperature": 0.0, "avg_logprob": -0.20996003740289237, "compression_ratio": 1.75, "no_speech_prob": 6.577942986041307e-05}, {"id": 187, "seek": 79836, "start": 807.24, "end": 811.0, "text": " So you can get this like a tree like structure.", "tokens": [50808, 407, 291, 393, 483, 341, 411, 257, 4230, 411, 3877, 13, 50996], "temperature": 0.0, "avg_logprob": -0.20996003740289237, "compression_ratio": 1.75, "no_speech_prob": 6.577942986041307e-05}, {"id": 188, "seek": 79836, "start": 811.0, "end": 817.32, "text": " So keys are just objects that contain actual cryptographic material or a pointer treat.", "tokens": [50996, 407, 9317, 366, 445, 6565, 300, 5304, 3539, 9844, 12295, 2527, 420, 257, 23918, 2387, 13, 51312], "temperature": 0.0, "avg_logprob": -0.20996003740289237, "compression_ratio": 1.75, "no_speech_prob": 6.577942986041307e-05}, {"id": 189, "seek": 79836, "start": 817.32, "end": 821.5600000000001, "text": " They can be read and written to and used to perform cryptographic operations.", "tokens": [51312, 814, 393, 312, 1401, 293, 3720, 281, 293, 1143, 281, 2042, 9844, 12295, 7705, 13, 51524], "temperature": 0.0, "avg_logprob": -0.20996003740289237, "compression_ratio": 1.75, "no_speech_prob": 6.577942986041307e-05}, {"id": 190, "seek": 79836, "start": 821.5600000000001, "end": 823.88, "text": " There are several key types which I go on later.", "tokens": [51524, 821, 366, 2940, 2141, 3467, 597, 286, 352, 322, 1780, 13, 51640], "temperature": 0.0, "avg_logprob": -0.20996003740289237, "compression_ratio": 1.75, "no_speech_prob": 6.577942986041307e-05}, {"id": 191, "seek": 82388, "start": 824.08, "end": 828.04, "text": " You have user, logon, asymmetric encrypted and trusted keys.", "tokens": [50374, 509, 362, 4195, 11, 3565, 266, 11, 37277, 17475, 36663, 293, 16034, 9317, 13, 50572], "temperature": 0.0, "avg_logprob": -0.2109786316200539, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0017071381444111466}, {"id": 192, "seek": 82388, "start": 828.04, "end": 832.4, "text": " And they're kind of similar to a file system but unlike the file which can be on the in", "tokens": [50572, 400, 436, 434, 733, 295, 2531, 281, 257, 3991, 1185, 457, 8343, 264, 3991, 597, 393, 312, 322, 264, 294, 50790], "temperature": 0.0, "avg_logprob": -0.2109786316200539, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0017071381444111466}, {"id": 193, "seek": 82388, "start": 832.4, "end": 837.36, "text": " one directory, like if you don't take into account the weird bind mounts or some kind", "tokens": [50790, 472, 21120, 11, 411, 498, 291, 500, 380, 747, 666, 2696, 264, 3657, 14786, 40982, 420, 512, 733, 51038], "temperature": 0.0, "avg_logprob": -0.2109786316200539, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0017071381444111466}, {"id": 194, "seek": 82388, "start": 837.36, "end": 843.4399999999999, "text": " of hard links, keys can be part of many key rings at once.", "tokens": [51038, 295, 1152, 6123, 11, 9317, 393, 312, 644, 295, 867, 2141, 11136, 412, 1564, 13, 51342], "temperature": 0.0, "avg_logprob": -0.2109786316200539, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0017071381444111466}, {"id": 195, "seek": 82388, "start": 843.4399999999999, "end": 848.48, "text": " And key rings, they, it's a collection of links to the keys.", "tokens": [51342, 400, 2141, 11136, 11, 436, 11, 309, 311, 257, 5765, 295, 6123, 281, 264, 9317, 13, 51594], "temperature": 0.0, "avg_logprob": -0.2109786316200539, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0017071381444111466}, {"id": 196, "seek": 82388, "start": 848.48, "end": 850.8, "text": " And basically they enforce the life cycle of a key.", "tokens": [51594, 400, 1936, 436, 24825, 264, 993, 6586, 295, 257, 2141, 13, 51710], "temperature": 0.0, "avg_logprob": -0.2109786316200539, "compression_ratio": 1.6916666666666667, "no_speech_prob": 0.0017071381444111466}, {"id": 197, "seek": 85080, "start": 850.8, "end": 857.28, "text": " If a particular key is not linked to a key ring, like it gets automatically destructed.", "tokens": [50364, 759, 257, 1729, 2141, 307, 406, 9408, 281, 257, 2141, 4875, 11, 411, 309, 2170, 6772, 2677, 1757, 292, 13, 50688], "temperature": 0.0, "avg_logprob": -0.2070931838108943, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00046050301170907915}, {"id": 198, "seek": 85080, "start": 857.28, "end": 864.8399999999999, "text": " And they can be explicitly created key rings or implicit special, a thread process, user", "tokens": [50688, 400, 436, 393, 312, 20803, 2942, 2141, 11136, 420, 26947, 2121, 11, 257, 7207, 1399, 11, 4195, 51066], "temperature": 0.0, "avg_logprob": -0.2070931838108943, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00046050301170907915}, {"id": 199, "seek": 85080, "start": 864.8399999999999, "end": 866.76, "text": " and session.", "tokens": [51066, 293, 5481, 13, 51162], "temperature": 0.0, "avg_logprob": -0.2070931838108943, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00046050301170907915}, {"id": 200, "seek": 85080, "start": 866.76, "end": 872.12, "text": " And they do enforce the key lifetime and they are kind of similar to a directory in the", "tokens": [51162, 400, 436, 360, 24825, 264, 2141, 11364, 293, 436, 366, 733, 295, 2531, 281, 257, 21120, 294, 264, 51430], "temperature": 0.0, "avg_logprob": -0.2070931838108943, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00046050301170907915}, {"id": 201, "seek": 85080, "start": 872.12, "end": 874.28, "text": " file system.", "tokens": [51430, 3991, 1185, 13, 51538], "temperature": 0.0, "avg_logprob": -0.2070931838108943, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00046050301170907915}, {"id": 202, "seek": 85080, "start": 874.28, "end": 875.76, "text": " So let's see an example.", "tokens": [51538, 407, 718, 311, 536, 364, 1365, 13, 51612], "temperature": 0.0, "avg_logprob": -0.2070931838108943, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00046050301170907915}, {"id": 203, "seek": 85080, "start": 875.76, "end": 880.64, "text": " And by the way, all the examples I'm showing, I copied it from a real terminal.", "tokens": [51612, 400, 538, 264, 636, 11, 439, 264, 5110, 286, 478, 4099, 11, 286, 25365, 309, 490, 257, 957, 14709, 13, 51856], "temperature": 0.0, "avg_logprob": -0.2070931838108943, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.00046050301170907915}, {"id": 204, "seek": 88064, "start": 880.64, "end": 883.72, "text": " So it's a demo which doesn't fail.", "tokens": [50364, 407, 309, 311, 257, 10723, 597, 1177, 380, 3061, 13, 50518], "temperature": 0.0, "avg_logprob": -0.22043262337738612, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0002083649451378733}, {"id": 205, "seek": 88064, "start": 883.72, "end": 891.36, "text": " So in this example, here I'm creating a new key ring and linking it to my implicit user", "tokens": [50518, 407, 294, 341, 1365, 11, 510, 286, 478, 4084, 257, 777, 2141, 4875, 293, 25775, 309, 281, 452, 26947, 4195, 50900], "temperature": 0.0, "avg_logprob": -0.22043262337738612, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0002083649451378733}, {"id": 206, "seek": 88064, "start": 891.36, "end": 893.52, "text": " key ring.", "tokens": [50900, 2141, 4875, 13, 51008], "temperature": 0.0, "avg_logprob": -0.22043262337738612, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0002083649451378733}, {"id": 207, "seek": 88064, "start": 893.52, "end": 897.96, "text": " And each key or key ring is designated by a serial number which you can see.", "tokens": [51008, 400, 1184, 2141, 420, 2141, 4875, 307, 21688, 538, 257, 17436, 1230, 597, 291, 393, 536, 13, 51230], "temperature": 0.0, "avg_logprob": -0.22043262337738612, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0002083649451378733}, {"id": 208, "seek": 88064, "start": 897.96, "end": 901.36, "text": " So it's kind of a unique number of the object inside the kernel.", "tokens": [51230, 407, 309, 311, 733, 295, 257, 3845, 1230, 295, 264, 2657, 1854, 264, 28256, 13, 51400], "temperature": 0.0, "avg_logprob": -0.22043262337738612, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0002083649451378733}, {"id": 209, "seek": 88064, "start": 901.36, "end": 905.56, "text": " And once I created the key ring, I can add a key there with some secret contents Hunter", "tokens": [51400, 400, 1564, 286, 2942, 264, 2141, 4875, 11, 286, 393, 909, 257, 2141, 456, 365, 512, 4054, 15768, 18704, 51610], "temperature": 0.0, "avg_logprob": -0.22043262337738612, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0002083649451378733}, {"id": 210, "seek": 88064, "start": 905.56, "end": 907.84, "text": " 2 to my key ring.", "tokens": [51610, 568, 281, 452, 2141, 4875, 13, 51724], "temperature": 0.0, "avg_logprob": -0.22043262337738612, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0002083649451378733}, {"id": 211, "seek": 90784, "start": 908.76, "end": 917.9200000000001, "text": " Basically I can then show, kind of, KCTL show shows my key ring and key tree.", "tokens": [50410, 8537, 286, 393, 550, 855, 11, 733, 295, 11, 591, 10259, 43, 855, 3110, 452, 2141, 4875, 293, 2141, 4230, 13, 50868], "temperature": 0.0, "avg_logprob": -0.25576025575071903, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.0008322506910189986}, {"id": 212, "seek": 90784, "start": 917.9200000000001, "end": 924.0400000000001, "text": " So we have the session ring, the user ring, my ring and my key there.", "tokens": [50868, 407, 321, 362, 264, 5481, 4875, 11, 264, 4195, 4875, 11, 452, 4875, 293, 452, 2141, 456, 13, 51174], "temperature": 0.0, "avg_logprob": -0.25576025575071903, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.0008322506910189986}, {"id": 213, "seek": 90784, "start": 924.0400000000001, "end": 925.24, "text": " Yeah.", "tokens": [51174, 865, 13, 51234], "temperature": 0.0, "avg_logprob": -0.25576025575071903, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.0008322506910189986}, {"id": 214, "seek": 90784, "start": 925.24, "end": 931.64, "text": " And basically you can see that the serial numbers match so what we just created.", "tokens": [51234, 400, 1936, 291, 393, 536, 300, 264, 17436, 3547, 2995, 370, 437, 321, 445, 2942, 13, 51554], "temperature": 0.0, "avg_logprob": -0.25576025575071903, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.0008322506910189986}, {"id": 215, "seek": 90784, "start": 931.64, "end": 935.9200000000001, "text": " And also like because I just created the key, I have access to it so I can read the cryptographic", "tokens": [51554, 400, 611, 411, 570, 286, 445, 2942, 264, 2141, 11, 286, 362, 2105, 281, 309, 370, 286, 393, 1401, 264, 9844, 12295, 51768], "temperature": 0.0, "avg_logprob": -0.25576025575071903, "compression_ratio": 1.6435643564356435, "no_speech_prob": 0.0008322506910189986}, {"id": 216, "seek": 93592, "start": 935.92, "end": 939.36, "text": " material back and get the secret.", "tokens": [50364, 2527, 646, 293, 483, 264, 4054, 13, 50536], "temperature": 0.0, "avg_logprob": -0.1823923722752985, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.00027677282923832536}, {"id": 217, "seek": 93592, "start": 939.36, "end": 944.0799999999999, "text": " And I think one of the examples you can use is like secret sharing between two users.", "tokens": [50536, 400, 286, 519, 472, 295, 264, 5110, 291, 393, 764, 307, 411, 4054, 5414, 1296, 732, 5022, 13, 50772], "temperature": 0.0, "avg_logprob": -0.1823923722752985, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.00027677282923832536}, {"id": 218, "seek": 93592, "start": 944.0799999999999, "end": 948.12, "text": " So you have Alice and Bob to users on the system and you may notice they don't have", "tokens": [50772, 407, 291, 362, 16004, 293, 6085, 281, 5022, 322, 264, 1185, 293, 291, 815, 3449, 436, 500, 380, 362, 50974], "temperature": 0.0, "avg_logprob": -0.1823923722752985, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.00027677282923832536}, {"id": 219, "seek": 93592, "start": 948.12, "end": 949.12, "text": " anything in common.", "tokens": [50974, 1340, 294, 2689, 13, 51024], "temperature": 0.0, "avg_logprob": -0.1823923722752985, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.00027677282923832536}, {"id": 220, "seek": 93592, "start": 949.12, "end": 951.92, "text": " So they have separate groups, separate IDs, everything is separate.", "tokens": [51024, 407, 436, 362, 4994, 3935, 11, 4994, 48212, 11, 1203, 307, 4994, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1823923722752985, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.00027677282923832536}, {"id": 221, "seek": 93592, "start": 951.92, "end": 956.5999999999999, "text": " No common groups or permissions.", "tokens": [51164, 883, 2689, 3935, 420, 32723, 13, 51398], "temperature": 0.0, "avg_logprob": -0.1823923722752985, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.00027677282923832536}, {"id": 222, "seek": 93592, "start": 956.5999999999999, "end": 962.64, "text": " For example, and Alice can create a secret with Hunter 2 and put it in their user key", "tokens": [51398, 1171, 1365, 11, 293, 16004, 393, 1884, 257, 4054, 365, 18704, 568, 293, 829, 309, 294, 641, 4195, 2141, 51700], "temperature": 0.0, "avg_logprob": -0.1823923722752985, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.00027677282923832536}, {"id": 223, "seek": 93592, "start": 962.64, "end": 963.8, "text": " ring.", "tokens": [51700, 4875, 13, 51758], "temperature": 0.0, "avg_logprob": -0.1823923722752985, "compression_ratio": 1.7119341563786008, "no_speech_prob": 0.00027677282923832536}, {"id": 224, "seek": 96380, "start": 963.8, "end": 970.04, "text": " What Bob can do, for example, it can create a new key ring called from others, a recipient", "tokens": [50364, 708, 6085, 393, 360, 11, 337, 1365, 11, 309, 393, 1884, 257, 777, 2141, 4875, 1219, 490, 2357, 11, 257, 26216, 50676], "temperature": 0.0, "avg_logprob": -0.18530367879034246, "compression_ratio": 1.711297071129707, "no_speech_prob": 0.0005329748964868486}, {"id": 225, "seek": 96380, "start": 970.04, "end": 971.7199999999999, "text": " key ring.", "tokens": [50676, 2141, 4875, 13, 50760], "temperature": 0.0, "avg_logprob": -0.18530367879034246, "compression_ratio": 1.711297071129707, "no_speech_prob": 0.0005329748964868486}, {"id": 226, "seek": 96380, "start": 971.7199999999999, "end": 977.16, "text": " And Bob can actually set permissions on that key ring so it allows everyone to write there.", "tokens": [50760, 400, 6085, 393, 767, 992, 32723, 322, 300, 2141, 4875, 370, 309, 4045, 1518, 281, 2464, 456, 13, 51032], "temperature": 0.0, "avg_logprob": -0.18530367879034246, "compression_ratio": 1.711297071129707, "no_speech_prob": 0.0005329748964868486}, {"id": 227, "seek": 96380, "start": 977.16, "end": 980.24, "text": " Write means putting links to other keys.", "tokens": [51032, 23499, 1355, 3372, 6123, 281, 661, 9317, 13, 51186], "temperature": 0.0, "avg_logprob": -0.18530367879034246, "compression_ratio": 1.711297071129707, "no_speech_prob": 0.0005329748964868486}, {"id": 228, "seek": 96380, "start": 980.24, "end": 987.8, "text": " So then if Bob communicates the serial number to Alice, Alice can just move that key to", "tokens": [51186, 407, 550, 498, 6085, 3363, 1024, 264, 17436, 1230, 281, 16004, 11, 16004, 393, 445, 1286, 300, 2141, 281, 51564], "temperature": 0.0, "avg_logprob": -0.18530367879034246, "compression_ratio": 1.711297071129707, "no_speech_prob": 0.0005329748964868486}, {"id": 229, "seek": 96380, "start": 987.8, "end": 992.76, "text": " the Bob's key ring and then we now see that Alice doesn't have the key anymore in their", "tokens": [51564, 264, 6085, 311, 2141, 4875, 293, 550, 321, 586, 536, 300, 16004, 1177, 380, 362, 264, 2141, 3602, 294, 641, 51812], "temperature": 0.0, "avg_logprob": -0.18530367879034246, "compression_ratio": 1.711297071129707, "no_speech_prob": 0.0005329748964868486}, {"id": 230, "seek": 99276, "start": 992.76, "end": 999.52, "text": " possession and Bob can actually now read the cryptographic material because Bob now possesses", "tokens": [50364, 20935, 293, 6085, 393, 767, 586, 1401, 264, 9844, 12295, 2527, 570, 6085, 586, 17490, 279, 50702], "temperature": 0.0, "avg_logprob": -0.2655235340720729, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.0006097031873650849}, {"id": 231, "seek": 99276, "start": 999.52, "end": 1001.3199999999999, "text": " that key.", "tokens": [50702, 300, 2141, 13, 50792], "temperature": 0.0, "avg_logprob": -0.2655235340720729, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.0006097031873650849}, {"id": 232, "seek": 99276, "start": 1001.3199999999999, "end": 1003.4, "text": " Simple.", "tokens": [50792, 21532, 13, 50896], "temperature": 0.0, "avg_logprob": -0.2655235340720729, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.0006097031873650849}, {"id": 233, "seek": 99276, "start": 1003.4, "end": 1008.6, "text": " There are special key ring types.", "tokens": [50896, 821, 366, 2121, 2141, 4875, 3467, 13, 51156], "temperature": 0.0, "avg_logprob": -0.2655235340720729, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.0006097031873650849}, {"id": 234, "seek": 99276, "start": 1008.6, "end": 1012.88, "text": " And these special key ring times determine the life cycle of a key ring.", "tokens": [51156, 400, 613, 2121, 2141, 4875, 1413, 6997, 264, 993, 6586, 295, 257, 2141, 4875, 13, 51370], "temperature": 0.0, "avg_logprob": -0.2655235340720729, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.0006097031873650849}, {"id": 235, "seek": 99276, "start": 1012.88, "end": 1019.68, "text": " So there are session key rings which are available to all the current process and all these children.", "tokens": [51370, 407, 456, 366, 5481, 2141, 11136, 597, 366, 2435, 281, 439, 264, 2190, 1399, 293, 439, 613, 2227, 13, 51710], "temperature": 0.0, "avg_logprob": -0.2655235340720729, "compression_ratio": 1.6842105263157894, "no_speech_prob": 0.0006097031873650849}, {"id": 236, "seek": 101968, "start": 1019.68, "end": 1024.52, "text": " So for example, if you are system D and you put a key in the session key ring, it will", "tokens": [50364, 407, 337, 1365, 11, 498, 291, 366, 1185, 413, 293, 291, 829, 257, 2141, 294, 264, 5481, 2141, 4875, 11, 309, 486, 50606], "temperature": 0.0, "avg_logprob": -0.1810359184188072, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.00100947474129498}, {"id": 237, "seek": 101968, "start": 1024.52, "end": 1030.08, "text": " be available to every process on the system which is spawned by system D.", "tokens": [50606, 312, 2435, 281, 633, 1399, 322, 264, 1185, 597, 307, 17088, 292, 538, 1185, 413, 13, 50884], "temperature": 0.0, "avg_logprob": -0.1810359184188072, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.00100947474129498}, {"id": 238, "seek": 101968, "start": 1030.08, "end": 1034.3999999999999, "text": " The process key ring is private to a particular process.", "tokens": [50884, 440, 1399, 2141, 4875, 307, 4551, 281, 257, 1729, 1399, 13, 51100], "temperature": 0.0, "avg_logprob": -0.1810359184188072, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.00100947474129498}, {"id": 239, "seek": 101968, "start": 1034.3999999999999, "end": 1040.36, "text": " So like every process has their own implicit key ring which they can use to store process", "tokens": [51100, 407, 411, 633, 1399, 575, 641, 1065, 26947, 2141, 4875, 597, 436, 393, 764, 281, 3531, 1399, 51398], "temperature": 0.0, "avg_logprob": -0.1810359184188072, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.00100947474129498}, {"id": 240, "seek": 101968, "start": 1040.36, "end": 1041.44, "text": " specific credentials.", "tokens": [51398, 2685, 27404, 13, 51452], "temperature": 0.0, "avg_logprob": -0.1810359184188072, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.00100947474129498}, {"id": 241, "seek": 101968, "start": 1041.44, "end": 1046.28, "text": " And there is also a sweat key ring which is specific to a particular thread.", "tokens": [51452, 400, 456, 307, 611, 257, 11872, 2141, 4875, 597, 307, 2685, 281, 257, 1729, 7207, 13, 51694], "temperature": 0.0, "avg_logprob": -0.1810359184188072, "compression_ratio": 1.8538812785388128, "no_speech_prob": 0.00100947474129498}, {"id": 242, "seek": 104628, "start": 1046.28, "end": 1056.84, "text": " Then let's say you write a web server which serves several websites and each website has", "tokens": [50364, 1396, 718, 311, 584, 291, 2464, 257, 3670, 7154, 597, 13451, 2940, 12891, 293, 1184, 3144, 575, 50892], "temperature": 0.0, "avg_logprob": -0.2512577930128718, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.020549310371279716}, {"id": 243, "seek": 104628, "start": 1056.84, "end": 1059.04, "text": " a different TLS key.", "tokens": [50892, 257, 819, 314, 19198, 2141, 13, 51002], "temperature": 0.0, "avg_logprob": -0.2512577930128718, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.020549310371279716}, {"id": 244, "seek": 104628, "start": 1059.04, "end": 1067.3999999999999, "text": " And you can, if you serve a website per thread, for example, so you can kind of securely store", "tokens": [51002, 400, 291, 393, 11, 498, 291, 4596, 257, 3144, 680, 7207, 11, 337, 1365, 11, 370, 291, 393, 733, 295, 38348, 3531, 51420], "temperature": 0.0, "avg_logprob": -0.2512577930128718, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.020549310371279716}, {"id": 245, "seek": 104628, "start": 1067.3999999999999, "end": 1072.68, "text": " a TLS key for that thread, for that website without other threads even having access to", "tokens": [51420, 257, 314, 19198, 2141, 337, 300, 7207, 11, 337, 300, 3144, 1553, 661, 19314, 754, 1419, 2105, 281, 51684], "temperature": 0.0, "avg_logprob": -0.2512577930128718, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.020549310371279716}, {"id": 246, "seek": 104628, "start": 1072.68, "end": 1075.0, "text": " that key, which is really cool.", "tokens": [51684, 300, 2141, 11, 597, 307, 534, 1627, 13, 51800], "temperature": 0.0, "avg_logprob": -0.2512577930128718, "compression_ratio": 1.6615384615384616, "no_speech_prob": 0.020549310371279716}, {"id": 247, "seek": 107500, "start": 1075.0, "end": 1079.32, "text": " There are also user key rings which are bound to the life cycle of a user.", "tokens": [50364, 821, 366, 611, 4195, 2141, 11136, 597, 366, 5472, 281, 264, 993, 6586, 295, 257, 4195, 13, 50580], "temperature": 0.0, "avg_logprob": -0.1817609649343589, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0005852867616340518}, {"id": 248, "seek": 107500, "start": 1079.32, "end": 1084.04, "text": " So it's a key ring which is shared between all the processes with the same user ID and", "tokens": [50580, 407, 309, 311, 257, 2141, 4875, 597, 307, 5507, 1296, 439, 264, 7555, 365, 264, 912, 4195, 7348, 293, 50816], "temperature": 0.0, "avg_logprob": -0.1817609649343589, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0005852867616340518}, {"id": 249, "seek": 107500, "start": 1084.04, "end": 1089.96, "text": " there is a user session key ring which is similar to user but not important in this context.", "tokens": [50816, 456, 307, 257, 4195, 5481, 2141, 4875, 597, 307, 2531, 281, 4195, 457, 406, 1021, 294, 341, 4319, 13, 51112], "temperature": 0.0, "avg_logprob": -0.1817609649343589, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0005852867616340518}, {"id": 250, "seek": 107500, "start": 1089.96, "end": 1097.24, "text": " There is also a type called persistent key rings which the name is a little bit confusing", "tokens": [51112, 821, 307, 611, 257, 2010, 1219, 24315, 2141, 11136, 597, 264, 1315, 307, 257, 707, 857, 13181, 51476], "temperature": 0.0, "avg_logprob": -0.1817609649343589, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0005852867616340518}, {"id": 251, "seek": 107500, "start": 1097.24, "end": 1101.24, "text": " because they are not actually persisting the keys on the desk.", "tokens": [51476, 570, 436, 366, 406, 767, 13233, 278, 264, 9317, 322, 264, 10026, 13, 51676], "temperature": 0.0, "avg_logprob": -0.1817609649343589, "compression_ratio": 1.7850877192982457, "no_speech_prob": 0.0005852867616340518}, {"id": 252, "seek": 110124, "start": 1101.24, "end": 1103.44, "text": " It has nothing to do with it.", "tokens": [50364, 467, 575, 1825, 281, 360, 365, 309, 13, 50474], "temperature": 0.0, "avg_logprob": -0.17399378954353978, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.020155806094408035}, {"id": 253, "seek": 110124, "start": 1103.44, "end": 1106.0, "text": " It's just the life cycle of these key rings are different.", "tokens": [50474, 467, 311, 445, 264, 993, 6586, 295, 613, 2141, 11136, 366, 819, 13, 50602], "temperature": 0.0, "avg_logprob": -0.17399378954353978, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.020155806094408035}, {"id": 254, "seek": 110124, "start": 1106.0, "end": 1108.92, "text": " They're not bound to a process or a user.", "tokens": [50602, 814, 434, 406, 5472, 281, 257, 1399, 420, 257, 4195, 13, 50748], "temperature": 0.0, "avg_logprob": -0.17399378954353978, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.020155806094408035}, {"id": 255, "seek": 110124, "start": 1108.92, "end": 1110.6, "text": " So it's kind of time bound.", "tokens": [50748, 407, 309, 311, 733, 295, 565, 5472, 13, 50832], "temperature": 0.0, "avg_logprob": -0.17399378954353978, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.020155806094408035}, {"id": 256, "seek": 110124, "start": 1110.6, "end": 1118.36, "text": " So if you basically don't access the key ring for a time out, it gets automatically destroyed.", "tokens": [50832, 407, 498, 291, 1936, 500, 380, 2105, 264, 2141, 4875, 337, 257, 565, 484, 11, 309, 2170, 6772, 8937, 13, 51220], "temperature": 0.0, "avg_logprob": -0.17399378954353978, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.020155806094408035}, {"id": 257, "seek": 110124, "start": 1118.36, "end": 1125.76, "text": " It's useful, for example, in Chrome jobs where you can't really bind, for example, a key ring", "tokens": [51220, 467, 311, 4420, 11, 337, 1365, 11, 294, 15327, 4782, 689, 291, 393, 380, 534, 14786, 11, 337, 1365, 11, 257, 2141, 4875, 51590], "temperature": 0.0, "avg_logprob": -0.17399378954353978, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.020155806094408035}, {"id": 258, "seek": 110124, "start": 1125.76, "end": 1130.72, "text": " to a user because that user appears and disappears from the system but you can put a time bound", "tokens": [51590, 281, 257, 4195, 570, 300, 4195, 7038, 293, 25527, 490, 264, 1185, 457, 291, 393, 829, 257, 565, 5472, 51838], "temperature": 0.0, "avg_logprob": -0.17399378954353978, "compression_ratio": 1.7509881422924902, "no_speech_prob": 0.020155806094408035}, {"id": 259, "seek": 113072, "start": 1130.72, "end": 1134.48, "text": " and while your Chrome job is running, your key ring will be available.", "tokens": [50364, 293, 1339, 428, 15327, 1691, 307, 2614, 11, 428, 2141, 4875, 486, 312, 2435, 13, 50552], "temperature": 0.0, "avg_logprob": -0.1979719274184283, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0001757824793457985}, {"id": 260, "seek": 113072, "start": 1134.48, "end": 1141.84, "text": " If for some reason your Chrome job stops running, the key will be eventually destroyed.", "tokens": [50552, 759, 337, 512, 1778, 428, 15327, 1691, 10094, 2614, 11, 264, 2141, 486, 312, 4728, 8937, 13, 50920], "temperature": 0.0, "avg_logprob": -0.1979719274184283, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0001757824793457985}, {"id": 261, "seek": 113072, "start": 1141.84, "end": 1144.44, "text": " So let's see a session key ring example.", "tokens": [50920, 407, 718, 311, 536, 257, 5481, 2141, 4875, 1365, 13, 51050], "temperature": 0.0, "avg_logprob": -0.1979719274184283, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0001757824793457985}, {"id": 262, "seek": 113072, "start": 1144.44, "end": 1149.16, "text": " So let me add my favorite Hunter 2 secret to my session key.", "tokens": [51050, 407, 718, 385, 909, 452, 2954, 18704, 568, 4054, 281, 452, 5481, 2141, 13, 51286], "temperature": 0.0, "avg_logprob": -0.1979719274184283, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0001757824793457985}, {"id": 263, "seek": 113072, "start": 1149.16, "end": 1155.24, "text": " And basically, I imagine I'm on a SSH session to this particular machine.", "tokens": [51286, 400, 1936, 11, 286, 3811, 286, 478, 322, 257, 12238, 39, 5481, 281, 341, 1729, 3479, 13, 51590], "temperature": 0.0, "avg_logprob": -0.1979719274184283, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.0001757824793457985}, {"id": 264, "seek": 115524, "start": 1155.24, "end": 1162.88, "text": " I can see that my key exists, right, and I can see its ID and it's linked to the session key ring.", "tokens": [50364, 286, 393, 536, 300, 452, 2141, 8198, 11, 558, 11, 293, 286, 393, 536, 1080, 7348, 293, 309, 311, 9408, 281, 264, 5481, 2141, 4875, 13, 50746], "temperature": 0.0, "avg_logprob": -0.16700669129689535, "compression_ratio": 1.5859030837004404, "no_speech_prob": 0.0005090807098895311}, {"id": 265, "seek": 115524, "start": 1162.88, "end": 1171.1200000000001, "text": " What I can do now is, for example, in another terminal I can put a BPF probe on a user destroy function", "tokens": [50746, 708, 286, 393, 360, 586, 307, 11, 337, 1365, 11, 294, 1071, 14709, 286, 393, 829, 257, 40533, 37, 22715, 322, 257, 4195, 5293, 2445, 51158], "temperature": 0.0, "avg_logprob": -0.16700669129689535, "compression_ratio": 1.5859030837004404, "no_speech_prob": 0.0005090807098895311}, {"id": 266, "seek": 115524, "start": 1171.1200000000001, "end": 1177.2, "text": " which is responsible for securely destroying keys from the kernel key store.", "tokens": [51158, 597, 307, 6250, 337, 38348, 19926, 9317, 490, 264, 28256, 2141, 3531, 13, 51462], "temperature": 0.0, "avg_logprob": -0.16700669129689535, "compression_ratio": 1.5859030837004404, "no_speech_prob": 0.0005090807098895311}, {"id": 267, "seek": 115524, "start": 1177.2, "end": 1184.24, "text": " And if now I just exit my SSH session, I log out, I can see that the probe works", "tokens": [51462, 400, 498, 586, 286, 445, 11043, 452, 12238, 39, 5481, 11, 286, 3565, 484, 11, 286, 393, 536, 300, 264, 22715, 1985, 51814], "temperature": 0.0, "avg_logprob": -0.16700669129689535, "compression_ratio": 1.5859030837004404, "no_speech_prob": 0.0005090807098895311}, {"id": 268, "seek": 118424, "start": 1184.24, "end": 1192.76, "text": " and my key was automatically destroyed because my session ended, so my session key ring got destroyed", "tokens": [50364, 293, 452, 2141, 390, 6772, 8937, 570, 452, 5481, 4590, 11, 370, 452, 5481, 2141, 4875, 658, 8937, 50790], "temperature": 0.0, "avg_logprob": -0.14559210944421513, "compression_ratio": 1.8363636363636364, "no_speech_prob": 9.300751116825268e-05}, {"id": 269, "seek": 118424, "start": 1192.76, "end": 1196.04, "text": " and all the keys are linked to it got automatically destroyed as well.", "tokens": [50790, 293, 439, 264, 9317, 366, 9408, 281, 309, 658, 6772, 8937, 382, 731, 13, 50954], "temperature": 0.0, "avg_logprob": -0.14559210944421513, "compression_ratio": 1.8363636363636364, "no_speech_prob": 9.300751116825268e-05}, {"id": 270, "seek": 118424, "start": 1196.04, "end": 1202.16, "text": " And if I re-log in back, I can see that technically my session key ring changed.", "tokens": [50954, 400, 498, 286, 319, 12, 4987, 294, 646, 11, 286, 393, 536, 300, 12120, 452, 5481, 2141, 4875, 3105, 13, 51260], "temperature": 0.0, "avg_logprob": -0.14559210944421513, "compression_ratio": 1.8363636363636364, "no_speech_prob": 9.300751116825268e-05}, {"id": 271, "seek": 118424, "start": 1202.16, "end": 1207.6, "text": " It was destroyed and recreated automatically and I don't have the key anymore.", "tokens": [51260, 467, 390, 8937, 293, 850, 26559, 6772, 293, 286, 500, 380, 362, 264, 2141, 3602, 13, 51532], "temperature": 0.0, "avg_logprob": -0.14559210944421513, "compression_ratio": 1.8363636363636364, "no_speech_prob": 9.300751116825268e-05}, {"id": 272, "seek": 118424, "start": 1207.6, "end": 1211.6, "text": " So what it helps is, like, if you select the appropriate key ring type,", "tokens": [51532, 407, 437, 309, 3665, 307, 11, 411, 11, 498, 291, 3048, 264, 6854, 2141, 4875, 2010, 11, 51732], "temperature": 0.0, "avg_logprob": -0.14559210944421513, "compression_ratio": 1.8363636363636364, "no_speech_prob": 9.300751116825268e-05}, {"id": 273, "seek": 121160, "start": 1211.6, "end": 1215.6399999999999, "text": " you can ensure that keys will be securely destroyed when not needed.", "tokens": [50364, 291, 393, 5586, 300, 9317, 486, 312, 38348, 8937, 562, 406, 2978, 13, 50566], "temperature": 0.0, "avg_logprob": -0.22304361343383788, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.0017228636424988508}, {"id": 274, "seek": 121160, "start": 1215.6399999999999, "end": 1219.1999999999998, "text": " And you don't have to explicitly clear the memory.", "tokens": [50566, 400, 291, 500, 380, 362, 281, 20803, 1850, 264, 4675, 13, 50744], "temperature": 0.0, "avg_logprob": -0.22304361343383788, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.0017228636424988508}, {"id": 275, "seek": 121160, "start": 1219.1999999999998, "end": 1220.8799999999999, "text": " It will happen if you're out.", "tokens": [50744, 467, 486, 1051, 498, 291, 434, 484, 13, 50828], "temperature": 0.0, "avg_logprob": -0.22304361343383788, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.0017228636424988508}, {"id": 276, "seek": 121160, "start": 1220.8799999999999, "end": 1225.7199999999998, "text": " For example, if you bound to a process key ring, if the process dies, the key will get destroyed.", "tokens": [50828, 1171, 1365, 11, 498, 291, 5472, 281, 257, 1399, 2141, 4875, 11, 498, 264, 1399, 2714, 11, 264, 2141, 486, 483, 8937, 13, 51070], "temperature": 0.0, "avg_logprob": -0.22304361343383788, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.0017228636424988508}, {"id": 277, "seek": 121160, "start": 1225.7199999999998, "end": 1232.04, "text": " And regardless how the process dies, if it's successful exit, if it crashed, if it cordoned, whatever,", "tokens": [51070, 400, 10060, 577, 264, 1399, 2714, 11, 498, 309, 311, 4406, 11043, 11, 498, 309, 24190, 11, 498, 309, 12250, 19009, 11, 2035, 11, 51386], "temperature": 0.0, "avg_logprob": -0.22304361343383788, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.0017228636424988508}, {"id": 278, "seek": 121160, "start": 1232.04, "end": 1234.4399999999998, "text": " like the keys will be gone.", "tokens": [51386, 411, 264, 9317, 486, 312, 2780, 13, 51506], "temperature": 0.0, "avg_logprob": -0.22304361343383788, "compression_ratio": 1.7027027027027026, "no_speech_prob": 0.0017228636424988508}, {"id": 279, "seek": 123444, "start": 1234.44, "end": 1241.8, "text": " Okay, so now let's consider, like, some different key types.", "tokens": [50364, 1033, 11, 370, 586, 718, 311, 1949, 11, 411, 11, 512, 819, 2141, 3467, 13, 50732], "temperature": 0.0, "avg_logprob": -0.2892211607132835, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.00022607538267038763}, {"id": 280, "seek": 123444, "start": 1241.8, "end": 1248.16, "text": " So we check the key ring types, the key types, the simplest one is the user key, which we just saw.", "tokens": [50732, 407, 321, 1520, 264, 2141, 4875, 3467, 11, 264, 2141, 3467, 11, 264, 22811, 472, 307, 264, 4195, 2141, 11, 597, 321, 445, 1866, 13, 51050], "temperature": 0.0, "avg_logprob": -0.2892211607132835, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.00022607538267038763}, {"id": 281, "seek": 123444, "start": 1248.16, "end": 1251.68, "text": " So you have the cryptographic material, you put it inside the kernel,", "tokens": [51050, 407, 291, 362, 264, 9844, 12295, 2527, 11, 291, 829, 309, 1854, 264, 28256, 11, 51226], "temperature": 0.0, "avg_logprob": -0.2892211607132835, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.00022607538267038763}, {"id": 282, "seek": 123444, "start": 1251.68, "end": 1257.68, "text": " and then eventually either this process or the other process, which has relevant permissions, can read that secret back.", "tokens": [51226, 293, 550, 4728, 2139, 341, 1399, 420, 264, 661, 1399, 11, 597, 575, 7340, 32723, 11, 393, 1401, 300, 4054, 646, 13, 51526], "temperature": 0.0, "avg_logprob": -0.2892211607132835, "compression_ratio": 1.6401869158878504, "no_speech_prob": 0.00022607538267038763}, {"id": 283, "seek": 125768, "start": 1258.68, "end": 1263.4, "text": " There is also, like, a special type called logon key, which you can put inside the kernel,", "tokens": [50414, 821, 307, 611, 11, 411, 11, 257, 2121, 2010, 1219, 3565, 266, 2141, 11, 597, 291, 393, 829, 1854, 264, 28256, 11, 50650], "temperature": 0.0, "avg_logprob": -0.20639067604428246, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.002751218620687723}, {"id": 284, "seek": 125768, "start": 1263.4, "end": 1265.1200000000001, "text": " but you can never read back.", "tokens": [50650, 457, 291, 393, 1128, 1401, 646, 13, 50736], "temperature": 0.0, "avg_logprob": -0.20639067604428246, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.002751218620687723}, {"id": 285, "seek": 125768, "start": 1265.1200000000001, "end": 1272.4, "text": " And this is where this type is primarily used to share secrets with the kernel for disk encryption or eCryptFS.", "tokens": [50736, 400, 341, 307, 689, 341, 2010, 307, 10029, 1143, 281, 2073, 14093, 365, 264, 28256, 337, 12355, 29575, 420, 308, 38477, 662, 29318, 13, 51100], "temperature": 0.0, "avg_logprob": -0.20639067604428246, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.002751218620687723}, {"id": 286, "seek": 125768, "start": 1272.4, "end": 1280.3200000000002, "text": " So if you're in a relatively recent Linux distribution, if you dump your dmCrypt setup,", "tokens": [51100, 407, 498, 291, 434, 294, 257, 7226, 5162, 18734, 7316, 11, 498, 291, 11430, 428, 274, 76, 38477, 662, 8657, 11, 51496], "temperature": 0.0, "avg_logprob": -0.20639067604428246, "compression_ratio": 1.5047169811320755, "no_speech_prob": 0.002751218620687723}, {"id": 287, "seek": 128032, "start": 1280.32, "end": 1290.6799999999998, "text": " you will see that some of your keys are actually coming from the kernel key ring instead of, like, you will see the bytes directly.", "tokens": [50364, 291, 486, 536, 300, 512, 295, 428, 9317, 366, 767, 1348, 490, 264, 28256, 2141, 4875, 2602, 295, 11, 411, 11, 291, 486, 536, 264, 36088, 3838, 13, 50882], "temperature": 0.0, "avg_logprob": -0.14664593864889705, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.0007413848070427775}, {"id": 288, "seek": 128032, "start": 1290.6799999999998, "end": 1295.4399999999998, "text": " There is also an asymmetric key type, which only supports RSA currently.", "tokens": [50882, 821, 307, 611, 364, 37277, 17475, 2141, 2010, 11, 597, 787, 9346, 497, 8886, 4362, 13, 51120], "temperature": 0.0, "avg_logprob": -0.14664593864889705, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.0007413848070427775}, {"id": 289, "seek": 128032, "start": 1295.4399999999998, "end": 1299.72, "text": " So you put an RSA key inside the kernel, and technically you don't read it back,", "tokens": [51120, 407, 291, 829, 364, 497, 8886, 2141, 1854, 264, 28256, 11, 293, 12120, 291, 500, 380, 1401, 309, 646, 11, 51334], "temperature": 0.0, "avg_logprob": -0.14664593864889705, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.0007413848070427775}, {"id": 290, "seek": 128032, "start": 1299.72, "end": 1307.96, "text": " but you can perform some operations with this key, like you can instruct the kernel to sign data or decrypt something with the key.", "tokens": [51334, 457, 291, 393, 2042, 512, 7705, 365, 341, 2141, 11, 411, 291, 393, 7232, 264, 28256, 281, 1465, 1412, 420, 979, 627, 662, 746, 365, 264, 2141, 13, 51746], "temperature": 0.0, "avg_logprob": -0.14664593864889705, "compression_ratio": 1.6951219512195121, "no_speech_prob": 0.0007413848070427775}, {"id": 291, "seek": 130796, "start": 1308.0, "end": 1317.3600000000001, "text": " So for example, this is a simple example, it was open SSL, so we can generate an RSA private key.", "tokens": [50366, 407, 337, 1365, 11, 341, 307, 257, 2199, 1365, 11, 309, 390, 1269, 12238, 43, 11, 370, 321, 393, 8460, 364, 497, 8886, 4551, 2141, 13, 50834], "temperature": 0.0, "avg_logprob": -0.19578400902126147, "compression_ratio": 1.6793478260869565, "no_speech_prob": 0.0012774098431691527}, {"id": 292, "seek": 130796, "start": 1317.3600000000001, "end": 1325.3600000000001, "text": " Kernel understands only pkcs8 format for unencrypted pkcs8 private keys,", "tokens": [50834, 40224, 338, 15146, 787, 280, 74, 14368, 23, 7877, 337, 517, 22660, 627, 25383, 280, 74, 14368, 23, 4551, 9317, 11, 51234], "temperature": 0.0, "avg_logprob": -0.19578400902126147, "compression_ratio": 1.6793478260869565, "no_speech_prob": 0.0012774098431691527}, {"id": 293, "seek": 130796, "start": 1325.3600000000001, "end": 1330.76, "text": " so we have to convert it to pkcs8 format, and then we can actually add it to the kernel,", "tokens": [51234, 370, 321, 362, 281, 7620, 309, 281, 280, 74, 14368, 23, 7877, 11, 293, 550, 321, 393, 767, 909, 309, 281, 264, 28256, 11, 51504], "temperature": 0.0, "avg_logprob": -0.19578400902126147, "compression_ratio": 1.6793478260869565, "no_speech_prob": 0.0012774098431691527}, {"id": 294, "seek": 130796, "start": 1330.76, "end": 1335.3600000000001, "text": " and then we can ask the kernel to sign something,", "tokens": [51504, 293, 550, 321, 393, 1029, 264, 28256, 281, 1465, 746, 11, 51734], "temperature": 0.0, "avg_logprob": -0.19578400902126147, "compression_ratio": 1.6793478260869565, "no_speech_prob": 0.0012774098431691527}, {"id": 295, "seek": 133536, "start": 1335.36, "end": 1341.9599999999998, "text": " and basically we can then verify that the signature is valid with OpenSSL.", "tokens": [50364, 293, 1936, 321, 393, 550, 16888, 300, 264, 13397, 307, 7363, 365, 7238, 21929, 43, 13, 50694], "temperature": 0.0, "avg_logprob": -0.2784182568813892, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.0006393853109329939}, {"id": 296, "seek": 133536, "start": 1341.9599999999998, "end": 1347.76, "text": " Which is very useful, so all the things I'm describing today, and more is describing Cloud for a blog post,", "tokens": [50694, 3013, 307, 588, 4420, 11, 370, 439, 264, 721, 286, 478, 16141, 965, 11, 293, 544, 307, 16141, 8061, 337, 257, 6968, 2183, 11, 50984], "temperature": 0.0, "avg_logprob": -0.2784182568813892, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.0006393853109329939}, {"id": 297, "seek": 133536, "start": 1347.76, "end": 1354.76, "text": " and there we have an example where we completely replace SSL, it's like a proof-of-concept patch,", "tokens": [50984, 293, 456, 321, 362, 364, 1365, 689, 321, 2584, 7406, 12238, 43, 11, 309, 311, 411, 257, 8177, 12, 2670, 12, 1671, 1336, 9972, 11, 51334], "temperature": 0.0, "avg_logprob": -0.2784182568813892, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.0006393853109329939}, {"id": 298, "seek": 133536, "start": 1354.76, "end": 1360.56, "text": " but we patched OpenSSH and replaced the SSH agent with the kernel key store,", "tokens": [51334, 457, 321, 9972, 292, 7238, 21929, 39, 293, 10772, 264, 12238, 39, 9461, 365, 264, 28256, 2141, 3531, 11, 51624], "temperature": 0.0, "avg_logprob": -0.2784182568813892, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.0006393853109329939}, {"id": 299, "seek": 136056, "start": 1360.56, "end": 1368.96, "text": " so instead of SSH add, you do SSH add our bash script, which puts your private SSH key into the kernel key store,", "tokens": [50364, 370, 2602, 295, 12238, 39, 909, 11, 291, 360, 12238, 39, 909, 527, 46183, 5755, 11, 597, 8137, 428, 4551, 12238, 39, 2141, 666, 264, 28256, 2141, 3531, 11, 50784], "temperature": 0.0, "avg_logprob": -0.1556624956028436, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.001316908746957779}, {"id": 300, "seek": 136056, "start": 1368.96, "end": 1376.76, "text": " and if you run the patched SSH client, it will actually work the same as it would communicate with an agent,", "tokens": [50784, 293, 498, 291, 1190, 264, 9972, 292, 12238, 39, 6423, 11, 309, 486, 767, 589, 264, 912, 382, 309, 576, 7890, 365, 364, 9461, 11, 51174], "temperature": 0.0, "avg_logprob": -0.1556624956028436, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.001316908746957779}, {"id": 301, "seek": 136056, "start": 1376.76, "end": 1380.96, "text": " but you don't need any agents running on the assist.", "tokens": [51174, 457, 291, 500, 380, 643, 604, 12554, 2614, 322, 264, 4255, 13, 51384], "temperature": 0.0, "avg_logprob": -0.1556624956028436, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.001316908746957779}, {"id": 302, "seek": 136056, "start": 1380.96, "end": 1386.36, "text": " Cool, this is all well and good, this is how you can use it,", "tokens": [51384, 8561, 11, 341, 307, 439, 731, 293, 665, 11, 341, 307, 577, 291, 393, 764, 309, 11, 51654], "temperature": 0.0, "avg_logprob": -0.1556624956028436, "compression_ratio": 1.6076555023923444, "no_speech_prob": 0.001316908746957779}, {"id": 303, "seek": 138636, "start": 1386.36, "end": 1396.1599999999999, "text": " but surprisingly key store can be very useful as a big corporate key management building model,", "tokens": [50364, 457, 17600, 2141, 3531, 393, 312, 588, 4420, 382, 257, 955, 10896, 2141, 4592, 2390, 2316, 11, 50854], "temperature": 0.0, "avg_logprob": -0.15846331526593463, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0006125030922703445}, {"id": 304, "seek": 138636, "start": 1396.1599999999999, "end": 1402.1599999999999, "text": " but the question here remains, in all the previous examples you just saw,", "tokens": [50854, 457, 264, 1168, 510, 7023, 11, 294, 439, 264, 3894, 5110, 291, 445, 1866, 11, 51154], "temperature": 0.0, "avg_logprob": -0.15846331526593463, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0006125030922703445}, {"id": 305, "seek": 138636, "start": 1402.1599999999999, "end": 1410.56, "text": " that we still need to put the keys into the kernel, so we don't want the secrets to be in the application address space,", "tokens": [51154, 300, 321, 920, 643, 281, 829, 264, 9317, 666, 264, 28256, 11, 370, 321, 500, 380, 528, 264, 14093, 281, 312, 294, 264, 3861, 2985, 1901, 11, 51574], "temperature": 0.0, "avg_logprob": -0.15846331526593463, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0006125030922703445}, {"id": 306, "seek": 138636, "start": 1410.56, "end": 1413.56, "text": " but we still need the application to put it inside the kernel,", "tokens": [51574, 457, 321, 920, 643, 264, 3861, 281, 829, 309, 1854, 264, 28256, 11, 51724], "temperature": 0.0, "avg_logprob": -0.15846331526593463, "compression_ratio": 1.7303921568627452, "no_speech_prob": 0.0006125030922703445}, {"id": 307, "seek": 141356, "start": 1413.56, "end": 1419.36, "text": " so even though if the application cleans up after itself, there is a small window of opportunity", "tokens": [50364, 370, 754, 1673, 498, 264, 3861, 16912, 493, 934, 2564, 11, 456, 307, 257, 1359, 4910, 295, 2650, 50654], "temperature": 0.0, "avg_logprob": -0.18649563422569862, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.00043656042544171214}, {"id": 308, "seek": 141356, "start": 1419.36, "end": 1424.1599999999999, "text": " where application has the plain text secret in its address space,", "tokens": [50654, 689, 3861, 575, 264, 11121, 2487, 4054, 294, 1080, 2985, 1901, 11, 50894], "temperature": 0.0, "avg_logprob": -0.18649563422569862, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.00043656042544171214}, {"id": 309, "seek": 141356, "start": 1424.1599999999999, "end": 1431.56, "text": " so how can we provision application keys without cryptographic material ever being exposed to the user space at all?", "tokens": [50894, 370, 577, 393, 321, 17225, 3861, 9317, 1553, 9844, 12295, 2527, 1562, 885, 9495, 281, 264, 4195, 1901, 412, 439, 30, 51264], "temperature": 0.0, "avg_logprob": -0.18649563422569862, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.00043656042544171214}, {"id": 310, "seek": 141356, "start": 1431.56, "end": 1437.1599999999999, "text": " So for this we have two other interesting key types, one is called encrypted key,", "tokens": [51264, 407, 337, 341, 321, 362, 732, 661, 1880, 2141, 3467, 11, 472, 307, 1219, 36663, 2141, 11, 51544], "temperature": 0.0, "avg_logprob": -0.18649563422569862, "compression_ratio": 1.6484018264840183, "no_speech_prob": 0.00043656042544171214}, {"id": 311, "seek": 143716, "start": 1437.76, "end": 1446.76, "text": " and in this case the process has not the plain text key material, but encrypted key material with some other key,", "tokens": [50394, 293, 294, 341, 1389, 264, 1399, 575, 406, 264, 11121, 2487, 2141, 2527, 11, 457, 36663, 2141, 2527, 365, 512, 661, 2141, 11, 50844], "temperature": 0.0, "avg_logprob": -0.13447352818080358, "compression_ratio": 1.8531073446327684, "no_speech_prob": 0.0016204427229240537}, {"id": 312, "seek": 143716, "start": 1446.76, "end": 1453.76, "text": " and the kernel has a wrapping key, so when the process inserts that key inside the kernel,", "tokens": [50844, 293, 264, 28256, 575, 257, 21993, 2141, 11, 370, 562, 264, 1399, 49163, 300, 2141, 1854, 264, 28256, 11, 51194], "temperature": 0.0, "avg_logprob": -0.13447352818080358, "compression_ratio": 1.8531073446327684, "no_speech_prob": 0.0016204427229240537}, {"id": 313, "seek": 143716, "start": 1453.76, "end": 1460.76, "text": " the kernel automatically unwraps the key, and if we try to read it back, it gets automatically wrapped by the kernel again.", "tokens": [51194, 264, 28256, 6772, 14853, 424, 1878, 264, 2141, 11, 293, 498, 321, 853, 281, 1401, 309, 646, 11, 309, 2170, 6772, 14226, 538, 264, 28256, 797, 13, 51544], "temperature": 0.0, "avg_logprob": -0.13447352818080358, "compression_ratio": 1.8531073446327684, "no_speech_prob": 0.0016204427229240537}, {"id": 314, "seek": 146076, "start": 1461.36, "end": 1466.36, "text": " But here we have the chicken and egg problem like how do you then provision the wrap key, right?", "tokens": [50394, 583, 510, 321, 362, 264, 4662, 293, 3777, 1154, 411, 577, 360, 291, 550, 17225, 264, 7019, 2141, 11, 558, 30, 50644], "temperature": 0.0, "avg_logprob": -0.16992028262637077, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0034035935532301664}, {"id": 315, "seek": 146076, "start": 1466.36, "end": 1476.36, "text": " So, still things, so what James showed earlier today in his demo is you can technically replace this with a TPM,", "tokens": [50644, 407, 11, 920, 721, 11, 370, 437, 5678, 4712, 3071, 965, 294, 702, 10723, 307, 291, 393, 12120, 7406, 341, 365, 257, 314, 18819, 11, 51144], "temperature": 0.0, "avg_logprob": -0.16992028262637077, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0034035935532301664}, {"id": 316, "seek": 146076, "start": 1476.36, "end": 1482.36, "text": " and then you have a thing called a trusted key, so again you have the wrap key, but wrap to a particular TPM,", "tokens": [51144, 293, 550, 291, 362, 257, 551, 1219, 257, 16034, 2141, 11, 370, 797, 291, 362, 264, 7019, 2141, 11, 457, 7019, 281, 257, 1729, 314, 18819, 11, 51444], "temperature": 0.0, "avg_logprob": -0.16992028262637077, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0034035935532301664}, {"id": 317, "seek": 146076, "start": 1482.36, "end": 1489.36, "text": " you can insert in the kernel and TPM will automatically unwrap it, and again if you read it back, it gets wrapped.", "tokens": [51444, 291, 393, 8969, 294, 264, 28256, 293, 314, 18819, 486, 6772, 14853, 4007, 309, 11, 293, 797, 498, 291, 1401, 309, 646, 11, 309, 2170, 14226, 13, 51794], "temperature": 0.0, "avg_logprob": -0.16992028262637077, "compression_ratio": 1.7019607843137254, "no_speech_prob": 0.0034035935532301664}, {"id": 318, "seek": 149076, "start": 1491.36, "end": 1500.36, "text": " But this schema is not really great because as James mentioned TPMs are slow and there is as much as you can do with these operations,", "tokens": [50394, 583, 341, 34078, 307, 406, 534, 869, 570, 382, 5678, 2835, 314, 18819, 82, 366, 2964, 293, 456, 307, 382, 709, 382, 291, 393, 360, 365, 613, 7705, 11, 50844], "temperature": 0.0, "avg_logprob": -0.1323623068538713, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0023465564008802176}, {"id": 319, "seek": 149076, "start": 1500.36, "end": 1506.36, "text": " so like if you have thousands of keys you don't want to continuously poke the TPM to unwrap them,", "tokens": [50844, 370, 411, 498, 291, 362, 5383, 295, 9317, 291, 500, 380, 528, 281, 15684, 19712, 264, 314, 18819, 281, 14853, 4007, 552, 11, 51144], "temperature": 0.0, "avg_logprob": -0.1323623068538713, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0023465564008802176}, {"id": 320, "seek": 149076, "start": 1506.36, "end": 1513.36, "text": " so you can do some kind of a combined approach where basically you have some kind of provision, right?", "tokens": [51144, 370, 291, 393, 360, 512, 733, 295, 257, 9354, 3109, 689, 1936, 291, 362, 512, 733, 295, 17225, 11, 558, 30, 51494], "temperature": 0.0, "avg_logprob": -0.1323623068538713, "compression_ratio": 1.5727699530516432, "no_speech_prob": 0.0023465564008802176}, {"id": 321, "seek": 151336, "start": 1513.9599999999998, "end": 1520.9599999999998, "text": " So, and you have some kind of HSM in the cloud or on-prem, whatever which does your cryptographic keys,", "tokens": [50394, 407, 11, 293, 291, 362, 512, 733, 295, 389, 26693, 294, 264, 4588, 420, 322, 12, 29403, 11, 2035, 597, 775, 428, 9844, 12295, 9317, 11, 50744], "temperature": 0.0, "avg_logprob": -0.1425580423931743, "compression_ratio": 1.6157635467980296, "no_speech_prob": 0.002942468738183379}, {"id": 322, "seek": 151336, "start": 1520.9599999999998, "end": 1529.9599999999998, "text": " and then you provision a root key first, so you basically wrap the root key to a particular machine to its TPM,", "tokens": [50744, 293, 550, 291, 17225, 257, 5593, 2141, 700, 11, 370, 291, 1936, 7019, 264, 5593, 2141, 281, 257, 1729, 3479, 281, 1080, 314, 18819, 11, 51194], "temperature": 0.0, "avg_logprob": -0.1425580423931743, "compression_ratio": 1.6157635467980296, "no_speech_prob": 0.002942468738183379}, {"id": 323, "seek": 151336, "start": 1529.9599999999998, "end": 1536.9599999999998, "text": " and then you insert it and the TPM unwraps it, but all the other thousand keys are encrypted with this root key,", "tokens": [51194, 293, 550, 291, 8969, 309, 293, 264, 314, 18819, 14853, 424, 1878, 309, 11, 457, 439, 264, 661, 4714, 9317, 366, 36663, 365, 341, 5593, 2141, 11, 51544], "temperature": 0.0, "avg_logprob": -0.1425580423931743, "compression_ratio": 1.6157635467980296, "no_speech_prob": 0.002942468738183379}, {"id": 324, "seek": 153696, "start": 1537.56, "end": 1544.56, "text": " so the process received the wrap key and then it puts inside the kernel and then you don't go to TPM,", "tokens": [50394, 370, 264, 1399, 4613, 264, 7019, 2141, 293, 550, 309, 8137, 1854, 264, 28256, 293, 550, 291, 500, 380, 352, 281, 314, 18819, 11, 50744], "temperature": 0.0, "avg_logprob": -0.19347020644175855, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0008899791864678264}, {"id": 325, "seek": 153696, "start": 1544.56, "end": 1550.56, "text": " you already have the root key which is a software implementation, can easily unwrap all the other thousand keys.", "tokens": [50744, 291, 1217, 362, 264, 5593, 2141, 597, 307, 257, 4722, 11420, 11, 393, 3612, 14853, 4007, 439, 264, 661, 4714, 9317, 13, 51044], "temperature": 0.0, "avg_logprob": -0.19347020644175855, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0008899791864678264}, {"id": 326, "seek": 153696, "start": 1552.56, "end": 1562.56, "text": " But there are still problems with this approach, even though the application never sees the cryptographic material in this process address phase,", "tokens": [51144, 583, 456, 366, 920, 2740, 365, 341, 3109, 11, 754, 1673, 264, 3861, 1128, 8194, 264, 9844, 12295, 2527, 294, 341, 1399, 2985, 5574, 11, 51644], "temperature": 0.0, "avg_logprob": -0.19347020644175855, "compression_ratio": 1.6143497757847534, "no_speech_prob": 0.0008899791864678264}, {"id": 327, "seek": 156256, "start": 1563.1599999999999, "end": 1573.1599999999999, "text": " but applications are still responsible for receiving this wrapped cryptographical material from this centralized KMS HSM service to wrap their keys,", "tokens": [50394, 457, 5821, 366, 920, 6250, 337, 10040, 341, 14226, 9844, 48434, 2527, 490, 341, 32395, 591, 10288, 389, 26693, 2643, 281, 7019, 641, 9317, 11, 50894], "temperature": 0.0, "avg_logprob": -0.2262580018294485, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.006879072170704603}, {"id": 328, "seek": 156256, "start": 1573.1599999999999, "end": 1578.1599999999999, "text": " and so basically each application needs, who here uses Vault?", "tokens": [50894, 293, 370, 1936, 1184, 3861, 2203, 11, 567, 510, 4960, 46071, 30, 51144], "temperature": 0.0, "avg_logprob": -0.2262580018294485, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.006879072170704603}, {"id": 329, "seek": 156256, "start": 1578.1599999999999, "end": 1587.1599999999999, "text": " Yeah, some people, right? So like it's, you kind of like know what, need to know what your Vault address endpoint is, right?", "tokens": [51144, 865, 11, 512, 561, 11, 558, 30, 407, 411, 309, 311, 11, 291, 733, 295, 411, 458, 437, 11, 643, 281, 458, 437, 428, 46071, 2985, 35795, 307, 11, 558, 30, 51594], "temperature": 0.0, "avg_logprob": -0.2262580018294485, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.006879072170704603}, {"id": 330, "seek": 158716, "start": 1587.76, "end": 1598.76, "text": " You need to speak the Vault protocol or AWS KMS protocol, you need to basically integrate all this crap in your code,", "tokens": [50394, 509, 643, 281, 1710, 264, 46071, 10336, 420, 17650, 591, 10288, 10336, 11, 291, 643, 281, 1936, 13365, 439, 341, 12426, 294, 428, 3089, 11, 50944], "temperature": 0.0, "avg_logprob": -0.21237481783514153, "compression_ratio": 1.5248868778280542, "no_speech_prob": 0.008693681098520756}, {"id": 331, "seek": 158716, "start": 1598.76, "end": 1606.76, "text": " and there is little administrative control if like you're managing fleet of machines of the created kernel key object,", "tokens": [50944, 293, 456, 307, 707, 17900, 1969, 498, 411, 291, 434, 11642, 19396, 295, 8379, 295, 264, 2942, 28256, 2141, 2657, 11, 51344], "temperature": 0.0, "avg_logprob": -0.21237481783514153, "compression_ratio": 1.5248868778280542, "no_speech_prob": 0.008693681098520756}, {"id": 332, "seek": 158716, "start": 1607.76, "end": 1612.76, "text": " so applications when inserting the key can set invalid permissions, so like anyone can, for example,", "tokens": [51394, 370, 5821, 562, 46567, 264, 2141, 393, 992, 34702, 32723, 11, 370, 411, 2878, 393, 11, 337, 1365, 11, 51644], "temperature": 0.0, "avg_logprob": -0.21237481783514153, "compression_ratio": 1.5248868778280542, "no_speech_prob": 0.008693681098520756}, {"id": 333, "seek": 161276, "start": 1613.36, "end": 1619.36, "text": " if you set improper permissions on your RSA private key, any application, even malicious on your system,", "tokens": [50394, 498, 291, 992, 40651, 32723, 322, 428, 497, 8886, 4551, 2141, 11, 604, 3861, 11, 754, 33496, 322, 428, 1185, 11, 50694], "temperature": 0.0, "avg_logprob": -0.1790260974271798, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.0002489196485839784}, {"id": 334, "seek": 161276, "start": 1619.36, "end": 1622.36, "text": " can use it to encrypt or sign data, right?", "tokens": [50694, 393, 764, 309, 281, 17972, 662, 420, 1465, 1412, 11, 558, 30, 50844], "temperature": 0.0, "avg_logprob": -0.1790260974271798, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.0002489196485839784}, {"id": 335, "seek": 161276, "start": 1622.36, "end": 1629.36, "text": " And ideally like you also want authentication here, so KMS or HSM, that remote service,", "tokens": [50844, 400, 22915, 411, 291, 611, 528, 26643, 510, 11, 370, 591, 10288, 420, 389, 26693, 11, 300, 8607, 2643, 11, 51194], "temperature": 0.0, "avg_logprob": -0.1790260974271798, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.0002489196485839784}, {"id": 336, "seek": 161276, "start": 1630.36, "end": 1636.36, "text": " needs to somehow authenticate each requesting application if it can provide the wrapped cryptographic material.", "tokens": [51244, 2203, 281, 6063, 9214, 8700, 1184, 31937, 3861, 498, 309, 393, 2893, 264, 14226, 9844, 12295, 2527, 13, 51544], "temperature": 0.0, "avg_logprob": -0.1790260974271798, "compression_ratio": 1.5491071428571428, "no_speech_prob": 0.0002489196485839784}, {"id": 337, "seek": 163636, "start": 1636.9599999999998, "end": 1643.9599999999998, "text": " So how the kernel tries to solve that problem, it has two set of system calls.", "tokens": [50394, 407, 577, 264, 28256, 9898, 281, 5039, 300, 1154, 11, 309, 575, 732, 992, 295, 1185, 5498, 13, 50744], "temperature": 0.0, "avg_logprob": -0.19264369315289437, "compression_ratio": 1.704035874439462, "no_speech_prob": 0.0005693248240277171}, {"id": 338, "seek": 163636, "start": 1644.9599999999998, "end": 1649.9599999999998, "text": " So far we've been using the at key system call with a key CTL utility,", "tokens": [50794, 407, 1400, 321, 600, 668, 1228, 264, 412, 2141, 1185, 818, 365, 257, 2141, 19529, 43, 14877, 11, 51044], "temperature": 0.0, "avg_logprob": -0.19264369315289437, "compression_ratio": 1.704035874439462, "no_speech_prob": 0.0005693248240277171}, {"id": 339, "seek": 163636, "start": 1649.9599999999998, "end": 1654.9599999999998, "text": " so it adds the key to the specified, key ring with the specified payload.", "tokens": [51044, 370, 309, 10860, 264, 2141, 281, 264, 22206, 11, 2141, 4875, 365, 264, 22206, 30918, 13, 51294], "temperature": 0.0, "avg_logprob": -0.19264369315289437, "compression_ratio": 1.704035874439462, "no_speech_prob": 0.0005693248240277171}, {"id": 340, "seek": 163636, "start": 1655.9599999999998, "end": 1659.9599999999998, "text": " So basically the application is responsible for the payload itself,", "tokens": [51344, 407, 1936, 264, 3861, 307, 6250, 337, 264, 30918, 2564, 11, 51544], "temperature": 0.0, "avg_logprob": -0.19264369315289437, "compression_ratio": 1.704035874439462, "no_speech_prob": 0.0005693248240277171}, {"id": 341, "seek": 163636, "start": 1659.9599999999998, "end": 1664.9599999999998, "text": " so it's either plain text or in case of trusted or encrypted key, the encrypted payload,", "tokens": [51544, 370, 309, 311, 2139, 11121, 2487, 420, 294, 1389, 295, 16034, 420, 36663, 2141, 11, 264, 36663, 30918, 11, 51794], "temperature": 0.0, "avg_logprob": -0.19264369315289437, "compression_ratio": 1.704035874439462, "no_speech_prob": 0.0005693248240277171}, {"id": 342, "seek": 166496, "start": 1664.96, "end": 1667.96, "text": " it gets it from somewhere and it sorts it into the kernel.", "tokens": [50364, 309, 2170, 309, 490, 4079, 293, 309, 7527, 309, 666, 264, 28256, 13, 50514], "temperature": 0.0, "avg_logprob": -0.20216087765163845, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.00031867521465756}, {"id": 343, "seek": 166496, "start": 1669.96, "end": 1675.96, "text": " And the payload is interpreted according to the key type, it's like no interpretation happens for user logon keys,", "tokens": [50614, 400, 264, 30918, 307, 26749, 4650, 281, 264, 2141, 2010, 11, 309, 311, 411, 572, 14174, 2314, 337, 4195, 3565, 266, 9317, 11, 50914], "temperature": 0.0, "avg_logprob": -0.20216087765163845, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.00031867521465756}, {"id": 344, "seek": 166496, "start": 1675.96, "end": 1679.96, "text": " because those are mostly symmetric keys which are random strings,", "tokens": [50914, 570, 729, 366, 5240, 32330, 9317, 597, 366, 4974, 13985, 11, 51114], "temperature": 0.0, "avg_logprob": -0.20216087765163845, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.00031867521465756}, {"id": 345, "seek": 166496, "start": 1679.96, "end": 1685.96, "text": " it's a private public key for asymmetric cryptos or wrapped for encrypted and trusted.", "tokens": [51114, 309, 311, 257, 4551, 1908, 2141, 337, 37277, 17475, 9844, 329, 420, 14226, 337, 36663, 293, 16034, 13, 51414], "temperature": 0.0, "avg_logprob": -0.20216087765163845, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.00031867521465756}, {"id": 346, "seek": 166496, "start": 1685.96, "end": 1690.96, "text": " But there is another interesting API in the kernel called request key,", "tokens": [51414, 583, 456, 307, 1071, 1880, 9362, 294, 264, 28256, 1219, 5308, 2141, 11, 51664], "temperature": 0.0, "avg_logprob": -0.20216087765163845, "compression_ratio": 1.6822033898305084, "no_speech_prob": 0.00031867521465756}, {"id": 347, "seek": 169096, "start": 1690.96, "end": 1695.96, "text": " so instead of applications inserting the payload directly what applications can do,", "tokens": [50364, 370, 2602, 295, 5821, 46567, 264, 30918, 3838, 437, 5821, 393, 360, 11, 50614], "temperature": 0.0, "avg_logprob": -0.13876854204664044, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.0001764938933774829}, {"id": 348, "seek": 169096, "start": 1695.96, "end": 1702.96, "text": " they can ask the kernel, just give me my key, give me my key and give it an arbitrary string as an identifier.", "tokens": [50614, 436, 393, 1029, 264, 28256, 11, 445, 976, 385, 452, 2141, 11, 976, 385, 452, 2141, 293, 976, 309, 364, 23211, 6798, 382, 364, 45690, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13876854204664044, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.0001764938933774829}, {"id": 349, "seek": 169096, "start": 1703.96, "end": 1706.96, "text": " And it's on the kernel to actually satisfy that request,", "tokens": [51014, 400, 309, 311, 322, 264, 28256, 281, 767, 19319, 300, 5308, 11, 51164], "temperature": 0.0, "avg_logprob": -0.13876854204664044, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.0001764938933774829}, {"id": 350, "seek": 169096, "start": 1706.96, "end": 1712.96, "text": " and obviously the kernel has no idea of everyone set up, like where should it take the key from,", "tokens": [51164, 293, 2745, 264, 28256, 575, 572, 1558, 295, 1518, 992, 493, 11, 411, 689, 820, 309, 747, 264, 2141, 490, 11, 51464], "temperature": 0.0, "avg_logprob": -0.13876854204664044, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.0001764938933774829}, {"id": 351, "seek": 169096, "start": 1712.96, "end": 1718.96, "text": " so it's one of the examples where the kernel can then make a user space callback", "tokens": [51464, 370, 309, 311, 472, 295, 264, 5110, 689, 264, 28256, 393, 550, 652, 257, 4195, 1901, 818, 3207, 51764], "temperature": 0.0, "avg_logprob": -0.13876854204664044, "compression_ratio": 1.7800829875518671, "no_speech_prob": 0.0001764938933774829}, {"id": 352, "seek": 171896, "start": 1718.96, "end": 1728.96, "text": " and with a special helper program which you can then configure to actually deliver your keys, right?", "tokens": [50364, 293, 365, 257, 2121, 36133, 1461, 597, 291, 393, 550, 22162, 281, 767, 4239, 428, 9317, 11, 558, 30, 50864], "temperature": 0.0, "avg_logprob": -0.13461982913133574, "compression_ratio": 1.572072072072072, "no_speech_prob": 0.00034457966103218496}, {"id": 353, "seek": 171896, "start": 1728.96, "end": 1734.96, "text": " But it's a more centralized and transparent API to the kernel system, so how it works,", "tokens": [50864, 583, 309, 311, 257, 544, 32395, 293, 12737, 9362, 281, 264, 28256, 1185, 11, 370, 577, 309, 1985, 11, 51164], "temperature": 0.0, "avg_logprob": -0.13461982913133574, "compression_ratio": 1.572072072072072, "no_speech_prob": 0.00034457966103218496}, {"id": 354, "seek": 171896, "start": 1734.96, "end": 1740.96, "text": " so you have the process instead of adding key, so the process requests the key from the kernel", "tokens": [51164, 370, 291, 362, 264, 1399, 2602, 295, 5127, 2141, 11, 370, 264, 1399, 12475, 264, 2141, 490, 264, 28256, 51464], "temperature": 0.0, "avg_logprob": -0.13461982913133574, "compression_ratio": 1.572072072072072, "no_speech_prob": 0.00034457966103218496}, {"id": 355, "seek": 171896, "start": 1740.96, "end": 1744.96, "text": " and provides the identifier, so like give me my cloud app key one,", "tokens": [51464, 293, 6417, 264, 45690, 11, 370, 411, 976, 385, 452, 4588, 724, 2141, 472, 11, 51664], "temperature": 0.0, "avg_logprob": -0.13461982913133574, "compression_ratio": 1.572072072072072, "no_speech_prob": 0.00034457966103218496}, {"id": 356, "seek": 174496, "start": 1744.96, "end": 1750.96, "text": " so the kernel creates a placeholder, then it creates a special process,", "tokens": [50364, 370, 264, 28256, 7829, 257, 1081, 20480, 11, 550, 309, 7829, 257, 2121, 1399, 11, 50664], "temperature": 0.0, "avg_logprob": -0.11680434300349309, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.0004144791455473751}, {"id": 357, "seek": 174496, "start": 1750.96, "end": 1754.96, "text": " a callout process, helper process in user space called request key,", "tokens": [50664, 257, 818, 346, 1399, 11, 36133, 1399, 294, 4195, 1901, 1219, 5308, 2141, 11, 50864], "temperature": 0.0, "avg_logprob": -0.11680434300349309, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.0004144791455473751}, {"id": 358, "seek": 174496, "start": 1754.96, "end": 1760.96, "text": " and this one you can configure and you can specify different routes for different key types,", "tokens": [50864, 293, 341, 472, 291, 393, 22162, 293, 291, 393, 16500, 819, 18242, 337, 819, 2141, 3467, 11, 51164], "temperature": 0.0, "avg_logprob": -0.11680434300349309, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.0004144791455473751}, {"id": 359, "seek": 174496, "start": 1760.96, "end": 1766.96, "text": " for example if I requested the cloud app key one, it will go to the cloud sub-module", "tokens": [51164, 337, 1365, 498, 286, 16436, 264, 4588, 724, 2141, 472, 11, 309, 486, 352, 281, 264, 4588, 1422, 12, 8014, 2271, 51464], "temperature": 0.0, "avg_logprob": -0.11680434300349309, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.0004144791455473751}, {"id": 360, "seek": 174496, "start": 1766.96, "end": 1771.96, "text": " and you can write these sub-modules in any programming language by the way, it doesn't have to be C,", "tokens": [51464, 293, 291, 393, 2464, 613, 1422, 12, 8014, 3473, 294, 604, 9410, 2856, 538, 264, 636, 11, 309, 1177, 380, 362, 281, 312, 383, 11, 51714], "temperature": 0.0, "avg_logprob": -0.11680434300349309, "compression_ratio": 1.793991416309013, "no_speech_prob": 0.0004144791455473751}, {"id": 361, "seek": 177196, "start": 1771.96, "end": 1775.96, "text": " so you can write them in Go, it can be just simple batch scripts as well,", "tokens": [50364, 370, 291, 393, 2464, 552, 294, 1037, 11, 309, 393, 312, 445, 2199, 15245, 23294, 382, 731, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1493128764478466, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.000346906716004014}, {"id": 362, "seek": 177196, "start": 1775.96, "end": 1782.96, "text": " which are basically responsible for if the path is cloud, it can contact your cloud HSM,", "tokens": [50564, 597, 366, 1936, 6250, 337, 498, 264, 3100, 307, 4588, 11, 309, 393, 3385, 428, 4588, 389, 26693, 11, 50914], "temperature": 0.0, "avg_logprob": -0.1493128764478466, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.000346906716004014}, {"id": 363, "seek": 177196, "start": 1782.96, "end": 1787.96, "text": " get the wrapped cryptographic material, put it back inside the kernel,", "tokens": [50914, 483, 264, 14226, 9844, 12295, 2527, 11, 829, 309, 646, 1854, 264, 28256, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1493128764478466, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.000346906716004014}, {"id": 364, "seek": 177196, "start": 1787.96, "end": 1796.96, "text": " the kernel will then instantiate the keys and then the application will get its key back.", "tokens": [51164, 264, 28256, 486, 550, 9836, 13024, 264, 9317, 293, 550, 264, 3861, 486, 483, 1080, 2141, 646, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1493128764478466, "compression_ratio": 1.6069651741293531, "no_speech_prob": 0.000346906716004014}, {"id": 365, "seek": 179696, "start": 1796.96, "end": 1801.96, "text": " So with request key advantages, you have a single centralized operating system API", "tokens": [50364, 407, 365, 5308, 2141, 14906, 11, 291, 362, 257, 2167, 32395, 7447, 1185, 9362, 50614], "temperature": 0.0, "avg_logprob": -0.13778006037076315, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.00039057459798641503}, {"id": 366, "seek": 179696, "start": 1801.96, "end": 1808.96, "text": " to request key from the application, so there are no KMS or HSM connection strings,", "tokens": [50614, 281, 5308, 2141, 490, 264, 3861, 11, 370, 456, 366, 572, 591, 10288, 420, 389, 26693, 4984, 13985, 11, 50964], "temperature": 0.0, "avg_logprob": -0.13778006037076315, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.00039057459798641503}, {"id": 367, "seek": 179696, "start": 1808.96, "end": 1813.96, "text": " you arise in your configuration form, just a freeform ID string,", "tokens": [50964, 291, 20288, 294, 428, 11694, 1254, 11, 445, 257, 1737, 837, 7348, 6798, 11, 51214], "temperature": 0.0, "avg_logprob": -0.13778006037076315, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.00039057459798641503}, {"id": 368, "seek": 179696, "start": 1813.96, "end": 1819.96, "text": " and it kind of fully decouples, your application is fully decoupled from key storage backend,", "tokens": [51214, 293, 309, 733, 295, 4498, 979, 263, 2622, 11, 428, 3861, 307, 4498, 979, 263, 15551, 490, 2141, 6725, 38087, 11, 51514], "temperature": 0.0, "avg_logprob": -0.13778006037076315, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.00039057459798641503}, {"id": 369, "seek": 179696, "start": 1819.96, "end": 1823.96, "text": " so it doesn't care where the keys are stored and how they are distributed,", "tokens": [51514, 370, 309, 1177, 380, 1127, 689, 264, 9317, 366, 12187, 293, 577, 436, 366, 12631, 11, 51714], "temperature": 0.0, "avg_logprob": -0.13778006037076315, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.00039057459798641503}, {"id": 370, "seek": 182396, "start": 1823.96, "end": 1831.96, "text": " and it's a more secure way to instantiate the keys in the kernel,", "tokens": [50364, 293, 309, 311, 257, 544, 7144, 636, 281, 9836, 13024, 264, 9317, 294, 264, 28256, 11, 50764], "temperature": 0.0, "avg_logprob": -0.09531651547080593, "compression_ratio": 1.8302752293577982, "no_speech_prob": 0.000954349699895829}, {"id": 371, "seek": 182396, "start": 1831.96, "end": 1837.96, "text": " so this special call-out process which is created by the kernel is very special in the sense that", "tokens": [50764, 370, 341, 2121, 818, 12, 346, 1399, 597, 307, 2942, 538, 264, 28256, 307, 588, 2121, 294, 264, 2020, 300, 51064], "temperature": 0.0, "avg_logprob": -0.09531651547080593, "compression_ratio": 1.8302752293577982, "no_speech_prob": 0.000954349699895829}, {"id": 372, "seek": 182396, "start": 1837.96, "end": 1844.96, "text": " it has a special credential enforced by the kernel, so even if you launch the same helper process yourself as root,", "tokens": [51064, 309, 575, 257, 2121, 22034, 40953, 538, 264, 28256, 11, 370, 754, 498, 291, 4025, 264, 912, 36133, 1399, 1803, 382, 5593, 11, 51414], "temperature": 0.0, "avg_logprob": -0.09531651547080593, "compression_ratio": 1.8302752293577982, "no_speech_prob": 0.000954349699895829}, {"id": 373, "seek": 182396, "start": 1844.96, "end": 1852.96, "text": " it will not be able to instantiate the requested key because it doesn't have a specific token from the kernel to do it.", "tokens": [51414, 309, 486, 406, 312, 1075, 281, 9836, 13024, 264, 16436, 2141, 570, 309, 1177, 380, 362, 257, 2685, 14862, 490, 264, 28256, 281, 360, 309, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09531651547080593, "compression_ratio": 1.8302752293577982, "no_speech_prob": 0.000954349699895829}, {"id": 374, "seek": 185296, "start": 1852.96, "end": 1857.96, "text": " And this also call-out process is very useful, in fact it can be trustworthy,", "tokens": [50364, 400, 341, 611, 818, 12, 346, 1399, 307, 588, 4420, 11, 294, 1186, 309, 393, 312, 39714, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1587794656338899, "compression_ratio": 1.6398305084745763, "no_speech_prob": 0.0012668482959270477}, {"id": 375, "seek": 185296, "start": 1857.96, "end": 1863.96, "text": " so you can perform additional security checks, you can implement arbitrary policies there,", "tokens": [50614, 370, 291, 393, 2042, 4497, 3825, 13834, 11, 291, 393, 4445, 23211, 7657, 456, 11, 50914], "temperature": 0.0, "avg_logprob": -0.1587794656338899, "compression_ratio": 1.6398305084745763, "no_speech_prob": 0.0012668482959270477}, {"id": 376, "seek": 185296, "start": 1863.96, "end": 1870.96, "text": " so you can check the requestor, user ID, group ID, executable pass, package name, whatever you suppose,", "tokens": [50914, 370, 291, 393, 1520, 264, 5308, 284, 11, 4195, 7348, 11, 1594, 7348, 11, 7568, 712, 1320, 11, 7372, 1315, 11, 2035, 291, 7297, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1587794656338899, "compression_ratio": 1.6398305084745763, "no_speech_prob": 0.0012668482959270477}, {"id": 377, "seek": 185296, "start": 1870.96, "end": 1874.96, "text": " is this application even allowed to request the key in the first place,", "tokens": [51264, 307, 341, 3861, 754, 4350, 281, 5308, 264, 2141, 294, 264, 700, 1081, 11, 51464], "temperature": 0.0, "avg_logprob": -0.1587794656338899, "compression_ratio": 1.6398305084745763, "no_speech_prob": 0.0012668482959270477}, {"id": 378, "seek": 185296, "start": 1874.96, "end": 1877.96, "text": " and you can immediately deny that request.", "tokens": [51464, 293, 291, 393, 4258, 15744, 300, 5308, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1587794656338899, "compression_ratio": 1.6398305084745763, "no_speech_prob": 0.0012668482959270477}, {"id": 379, "seek": 187796, "start": 1877.96, "end": 1883.96, "text": " And you can support multiple key storage backends, you have local storage,", "tokens": [50364, 400, 291, 393, 1406, 3866, 2141, 6725, 646, 2581, 11, 291, 362, 2654, 6725, 11, 50664], "temperature": 0.0, "avg_logprob": -0.1858046670977989, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.0045031411573290825}, {"id": 380, "seek": 187796, "start": 1883.96, "end": 1890.96, "text": " you have a TPM backend, cloud HSM backend, whatever, and you can even swap these backends transparently,", "tokens": [50664, 291, 362, 257, 314, 18819, 38087, 11, 4588, 389, 26693, 38087, 11, 2035, 11, 293, 291, 393, 754, 18135, 613, 646, 2581, 7132, 6420, 11, 51014], "temperature": 0.0, "avg_logprob": -0.1858046670977989, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.0045031411573290825}, {"id": 381, "seek": 187796, "start": 1890.96, "end": 1895.96, "text": " like if you, for example, migrated from on-prem HSM to a cloud HSM,", "tokens": [51014, 411, 498, 291, 11, 337, 1365, 11, 48329, 490, 322, 12, 29403, 389, 26693, 281, 257, 4588, 389, 26693, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1858046670977989, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.0045031411573290825}, {"id": 382, "seek": 187796, "start": 1895.96, "end": 1904.96, "text": " all you have to do is just modify this helper process config file and applications will not notice.", "tokens": [51264, 439, 291, 362, 281, 360, 307, 445, 16927, 341, 36133, 1399, 6662, 3991, 293, 5821, 486, 406, 3449, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1858046670977989, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.0045031411573290825}, {"id": 383, "seek": 190496, "start": 1904.96, "end": 1914.96, "text": " And then you have the nice thing that you need to only authenticate this single helper process on your backend.", "tokens": [50364, 400, 550, 291, 362, 264, 1481, 551, 300, 291, 643, 281, 787, 9214, 8700, 341, 2167, 36133, 1399, 322, 428, 38087, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13730749365401596, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.0022127905394881964}, {"id": 384, "seek": 190496, "start": 1914.96, "end": 1921.96, "text": " And yeah, as I mentioned, the backend connectors can be written in any language, so very easy to extend.", "tokens": [50864, 400, 1338, 11, 382, 286, 2835, 11, 264, 38087, 31865, 393, 312, 3720, 294, 604, 2856, 11, 370, 588, 1858, 281, 10101, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13730749365401596, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.0022127905394881964}, {"id": 385, "seek": 190496, "start": 1921.96, "end": 1929.96, "text": " But the nice thing about that with request key, the key management and distribution becomes a core service operating", "tokens": [51214, 583, 264, 1481, 551, 466, 300, 365, 5308, 2141, 11, 264, 2141, 4592, 293, 7316, 3643, 257, 4965, 2643, 7447, 51614], "temperature": 0.0, "avg_logprob": -0.13730749365401596, "compression_ratio": 1.608695652173913, "no_speech_prob": 0.0022127905394881964}, {"id": 386, "seek": 192996, "start": 1929.96, "end": 1938.96, "text": " of the operating system itself as it should be, versus like every application has to deal with it on its own.", "tokens": [50364, 295, 264, 7447, 1185, 2564, 382, 309, 820, 312, 11, 5717, 411, 633, 3861, 575, 281, 2028, 365, 309, 322, 1080, 1065, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1361717012193468, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.013152031227946281}, {"id": 387, "seek": 192996, "start": 1938.96, "end": 1945.96, "text": " That's basically it for today. Here are some links to some kernel documentation, to some key ring man pages,", "tokens": [50814, 663, 311, 1936, 309, 337, 965, 13, 1692, 366, 512, 6123, 281, 512, 28256, 14333, 11, 281, 512, 2141, 4875, 587, 7183, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1361717012193468, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.013152031227946281}, {"id": 388, "seek": 192996, "start": 1945.96, "end": 1953.96, "text": " as well as the last link. Again, everything I told you today and even more is described in the cloud for our blog post,", "tokens": [51164, 382, 731, 382, 264, 1036, 2113, 13, 3764, 11, 1203, 286, 1907, 291, 965, 293, 754, 544, 307, 7619, 294, 264, 4588, 337, 527, 6968, 2183, 11, 51564], "temperature": 0.0, "avg_logprob": -0.1361717012193468, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.013152031227946281}, {"id": 389, "seek": 192996, "start": 1953.96, "end": 1955.96, "text": " which is linked at the end.", "tokens": [51564, 597, 307, 9408, 412, 264, 917, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1361717012193468, "compression_ratio": 1.5913043478260869, "no_speech_prob": 0.013152031227946281}, {"id": 390, "seek": 195596, "start": 1955.96, "end": 1958.96, "text": " Thank you and I'm happy to talk to you.", "tokens": [50364, 1044, 291, 293, 286, 478, 2055, 281, 751, 281, 291, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1934891700744629, "compression_ratio": 1.598901098901099, "no_speech_prob": 0.023836027830839157}, {"id": 391, "seek": 195596, "start": 1966.96, "end": 1974.96, "text": " Thank you for the great talk. So I recall there was an API in the producer space to protect memory from kernel space.", "tokens": [50914, 1044, 291, 337, 264, 869, 751, 13, 407, 286, 9901, 456, 390, 364, 9362, 294, 264, 12314, 1901, 281, 2371, 4675, 490, 28256, 1901, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1934891700744629, "compression_ratio": 1.598901098901099, "no_speech_prob": 0.023836027830839157}, {"id": 392, "seek": 195596, "start": 1974.96, "end": 1977.96, "text": " So the, like a given page was unmapped from the kernel.", "tokens": [51314, 407, 264, 11, 411, 257, 2212, 3028, 390, 517, 1696, 3320, 490, 264, 28256, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1934891700744629, "compression_ratio": 1.598901098901099, "no_speech_prob": 0.023836027830839157}, {"id": 393, "seek": 195596, "start": 1977.96, "end": 1981.96, "text": " So if you had an out of bounds in the kernel, you couldn't access the memory,", "tokens": [51464, 407, 498, 291, 632, 364, 484, 295, 29905, 294, 264, 28256, 11, 291, 2809, 380, 2105, 264, 4675, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1934891700744629, "compression_ratio": 1.598901098901099, "no_speech_prob": 0.023836027830839157}, {"id": 394, "seek": 198196, "start": 1981.96, "end": 1985.96, "text": " but of course the kernel could remap the page back again.", "tokens": [50364, 457, 295, 1164, 264, 28256, 727, 890, 569, 264, 3028, 646, 797, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12235782796686345, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.18866772949695587}, {"id": 395, "seek": 198196, "start": 1985.96, "end": 1989.96, "text": " My question is, are the keys protected in such a way in the kernel?", "tokens": [50564, 1222, 1168, 307, 11, 366, 264, 9317, 10594, 294, 1270, 257, 636, 294, 264, 28256, 30, 50764], "temperature": 0.0, "avg_logprob": -0.12235782796686345, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.18866772949695587}, {"id": 396, "seek": 198196, "start": 1989.96, "end": 1997.96, "text": " And do you think it would make sense to do it? I mean, it would potentially minimize the exposure in theory at least.", "tokens": [50764, 400, 360, 291, 519, 309, 576, 652, 2020, 281, 360, 309, 30, 286, 914, 11, 309, 576, 7263, 17522, 264, 10420, 294, 5261, 412, 1935, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12235782796686345, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.18866772949695587}, {"id": 397, "seek": 198196, "start": 1997.96, "end": 2002.96, "text": " The default, I don't, I'm not sure about the implement, but I would say no.", "tokens": [51164, 440, 7576, 11, 286, 500, 380, 11, 286, 478, 406, 988, 466, 264, 4445, 11, 457, 286, 576, 584, 572, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12235782796686345, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.18866772949695587}, {"id": 398, "seek": 198196, "start": 2002.96, "end": 2006.96, "text": " I think the keys are not like more protected.", "tokens": [51414, 286, 519, 264, 9317, 366, 406, 411, 544, 10594, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12235782796686345, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.18866772949695587}, {"id": 399, "seek": 198196, "start": 2006.96, "end": 2010.96, "text": " So the guy who wrote it is right there.", "tokens": [51614, 407, 264, 2146, 567, 4114, 309, 307, 558, 456, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12235782796686345, "compression_ratio": 1.646341463414634, "no_speech_prob": 0.18866772949695587}, {"id": 400, "seek": 201096, "start": 2010.96, "end": 2021.96, "text": " And what was the question? If you put a key of the user space process into these areas, they will be more protected than otherwise.", "tokens": [50364, 400, 437, 390, 264, 1168, 30, 759, 291, 829, 257, 2141, 295, 264, 4195, 1901, 1399, 666, 613, 3179, 11, 436, 486, 312, 544, 10594, 813, 5911, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16954375758315576, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.01199034322053194}, {"id": 401, "seek": 201096, "start": 2021.96, "end": 2024.96, "text": " It still doesn't guarantee like 100%", "tokens": [50914, 467, 920, 1177, 380, 10815, 411, 2319, 4, 51064], "temperature": 0.0, "avg_logprob": -0.16954375758315576, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.01199034322053194}, {"id": 402, "seek": 201096, "start": 2024.96, "end": 2030.96, "text": " My point is the kernel could also do it so that it would protect those keys from itself as well.", "tokens": [51064, 1222, 935, 307, 264, 28256, 727, 611, 360, 309, 370, 300, 309, 576, 2371, 729, 9317, 490, 2564, 382, 731, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16954375758315576, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.01199034322053194}, {"id": 403, "seek": 201096, "start": 2030.96, "end": 2035.96, "text": " And it would only remap the page back again when it actually, when you do the request key for it.", "tokens": [51364, 400, 309, 576, 787, 890, 569, 264, 3028, 646, 797, 562, 309, 767, 11, 562, 291, 360, 264, 5308, 2141, 337, 309, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16954375758315576, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.01199034322053194}, {"id": 404, "seek": 201096, "start": 2035.96, "end": 2038.96, "text": " But what's the point then?", "tokens": [51614, 583, 437, 311, 264, 935, 550, 30, 51764], "temperature": 0.0, "avg_logprob": -0.16954375758315576, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.01199034322053194}, {"id": 405, "seek": 203896, "start": 2039.96, "end": 2047.96, "text": " If kernel needs the keys, it has to have access anyway and remapping and mapping is costly.", "tokens": [50414, 759, 28256, 2203, 264, 9317, 11, 309, 575, 281, 362, 2105, 4033, 293, 890, 10534, 293, 18350, 307, 28328, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16716538118512442, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.004571731202304363}, {"id": 406, "seek": 203896, "start": 2047.96, "end": 2053.96, "text": " The other thing is the key store API internally is also extendable.", "tokens": [50814, 440, 661, 551, 307, 264, 2141, 3531, 9362, 19501, 307, 611, 10101, 712, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16716538118512442, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.004571731202304363}, {"id": 407, "seek": 203896, "start": 2053.96, "end": 2056.96, "text": " You can write other modules and this is what I asked for.", "tokens": [51114, 509, 393, 2464, 661, 16679, 293, 341, 307, 437, 286, 2351, 337, 13, 51264], "temperature": 0.0, "avg_logprob": -0.16716538118512442, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.004571731202304363}, {"id": 408, "seek": 203896, "start": 2056.96, "end": 2061.96, "text": " James earlier, that you can technically write an asymmetric key implementation backed by the TPM.", "tokens": [51264, 5678, 3071, 11, 300, 291, 393, 12120, 2464, 364, 37277, 17475, 2141, 11420, 20391, 538, 264, 314, 18819, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16716538118512442, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.004571731202304363}, {"id": 409, "seek": 203896, "start": 2061.96, "end": 2064.96, "text": " So the keys will not be even inside the kernel.", "tokens": [51514, 407, 264, 9317, 486, 406, 312, 754, 1854, 264, 28256, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16716538118512442, "compression_ratio": 1.5851528384279476, "no_speech_prob": 0.004571731202304363}, {"id": 410, "seek": 206496, "start": 2064.96, "end": 2069.96, "text": " It will be in the TPM, but then each operation will have to touch TPM in the first place.", "tokens": [50364, 467, 486, 312, 294, 264, 314, 18819, 11, 457, 550, 1184, 6916, 486, 362, 281, 2557, 314, 18819, 294, 264, 700, 1081, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13260828245670422, "compression_ratio": 1.62109375, "no_speech_prob": 0.011888789013028145}, {"id": 411, "seek": 206496, "start": 2069.96, "end": 2075.96, "text": " Or if you like design some kind of crypto chip or you can like design like an arm like a truss zone back here.", "tokens": [50614, 1610, 498, 291, 411, 1715, 512, 733, 295, 17240, 11409, 420, 291, 393, 411, 1715, 411, 364, 3726, 411, 257, 504, 2023, 6668, 646, 510, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13260828245670422, "compression_ratio": 1.62109375, "no_speech_prob": 0.011888789013028145}, {"id": 412, "seek": 206496, "start": 2075.96, "end": 2077.96, "text": " So like whatever you want.", "tokens": [50914, 407, 411, 2035, 291, 528, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13260828245670422, "compression_ratio": 1.62109375, "no_speech_prob": 0.011888789013028145}, {"id": 413, "seek": 206496, "start": 2078.96, "end": 2088.96, "text": " There was some effort. I don't remember exactly which areas it touched to do this sort of separation between subsystems.", "tokens": [51064, 821, 390, 512, 4630, 13, 286, 500, 380, 1604, 2293, 597, 3179, 309, 9828, 281, 360, 341, 1333, 295, 14634, 1296, 2090, 9321, 82, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13260828245670422, "compression_ratio": 1.62109375, "no_speech_prob": 0.011888789013028145}, {"id": 414, "seek": 206496, "start": 2088.96, "end": 2093.96, "text": " But I only learned about it once. I don't know what they say this.", "tokens": [51564, 583, 286, 787, 3264, 466, 309, 1564, 13, 286, 500, 380, 458, 437, 436, 584, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13260828245670422, "compression_ratio": 1.62109375, "no_speech_prob": 0.011888789013028145}, {"id": 415, "seek": 209396, "start": 2093.96, "end": 2099.96, "text": " No, no. Well in kernel it's still like the old, you mean in the kernel subsystems?", "tokens": [50364, 883, 11, 572, 13, 1042, 294, 28256, 309, 311, 920, 411, 264, 1331, 11, 291, 914, 294, 264, 28256, 2090, 9321, 82, 30, 50664], "temperature": 0.0, "avg_logprob": -0.16848341623942056, "compression_ratio": 1.5860655737704918, "no_speech_prob": 0.0005853681359440088}, {"id": 416, "seek": 209396, "start": 2099.96, "end": 2103.96, "text": " I don't like it's still like a flat address space at this point.", "tokens": [50664, 286, 500, 380, 411, 309, 311, 920, 411, 257, 4962, 2985, 1901, 412, 341, 935, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16848341623942056, "compression_ratio": 1.5860655737704918, "no_speech_prob": 0.0005853681359440088}, {"id": 417, "seek": 209396, "start": 2103.96, "end": 2110.96, "text": " I don't, unless you're again using like arm trance zone or enclaves or whatever.", "tokens": [50864, 286, 500, 380, 11, 5969, 291, 434, 797, 1228, 411, 3726, 504, 719, 6668, 420, 20987, 5423, 420, 2035, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16848341623942056, "compression_ratio": 1.5860655737704918, "no_speech_prob": 0.0005853681359440088}, {"id": 418, "seek": 209396, "start": 2110.96, "end": 2114.96, "text": " My question is, so you mentioned that we can do RSA operations.", "tokens": [51214, 1222, 1168, 307, 11, 370, 291, 2835, 300, 321, 393, 360, 497, 8886, 7705, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16848341623942056, "compression_ratio": 1.5860655737704918, "no_speech_prob": 0.0005853681359440088}, {"id": 419, "seek": 209396, "start": 2114.96, "end": 2117.96, "text": " Not everybody is using RSA.", "tokens": [51414, 1726, 2201, 307, 1228, 497, 8886, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16848341623942056, "compression_ratio": 1.5860655737704918, "no_speech_prob": 0.0005853681359440088}, {"id": 420, "seek": 209396, "start": 2117.96, "end": 2121.96, "text": " Are there any efforts to introduce other kinds of asymmetric keys?", "tokens": [51564, 2014, 456, 604, 6484, 281, 5366, 661, 3685, 295, 37277, 17475, 9317, 30, 51764], "temperature": 0.0, "avg_logprob": -0.16848341623942056, "compression_ratio": 1.5860655737704918, "no_speech_prob": 0.0005853681359440088}, {"id": 421, "seek": 212196, "start": 2121.96, "end": 2124.96, "text": " In particular, I'd like to see an explicated stuff.", "tokens": [50364, 682, 1729, 11, 286, 1116, 411, 281, 536, 364, 1490, 3587, 1507, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2658772786458333, "compression_ratio": 1.5, "no_speech_prob": 0.010931543074548244}, {"id": 422, "seek": 212196, "start": 2124.96, "end": 2127.96, "text": " So, yes.", "tokens": [50514, 407, 11, 2086, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2658772786458333, "compression_ratio": 1.5, "no_speech_prob": 0.010931543074548244}, {"id": 423, "seek": 212196, "start": 2127.96, "end": 2133.96, "text": " So the kernel currently also supports ECDSA, but only for signature verification.", "tokens": [50664, 407, 264, 28256, 4362, 611, 9346, 19081, 35, 8886, 11, 457, 787, 337, 13397, 30206, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2658772786458333, "compression_ratio": 1.5, "no_speech_prob": 0.010931543074548244}, {"id": 424, "seek": 212196, "start": 2133.96, "end": 2135.96, "text": " It was added for kernel modules.", "tokens": [50964, 467, 390, 3869, 337, 28256, 16679, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2658772786458333, "compression_ratio": 1.5, "no_speech_prob": 0.010931543074548244}, {"id": 425, "seek": 212196, "start": 2135.96, "end": 2142.96, "text": " I send like patches to actually support signatures through for the Q-Stone API twice.", "tokens": [51064, 286, 2845, 411, 26531, 281, 767, 1406, 32322, 807, 337, 264, 1249, 12, 4520, 546, 9362, 6091, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2658772786458333, "compression_ratio": 1.5, "no_speech_prob": 0.010931543074548244}, {"id": 426, "seek": 212196, "start": 2142.96, "end": 2148.96, "text": " I didn't get any traction on them. I'll send it one more time maybe.", "tokens": [51414, 286, 994, 380, 483, 604, 23558, 322, 552, 13, 286, 603, 2845, 309, 472, 544, 565, 1310, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2658772786458333, "compression_ratio": 1.5, "no_speech_prob": 0.010931543074548244}, {"id": 427, "seek": 214896, "start": 2149.96, "end": 2153.96, "text": " Because I also know that the kernel has its own internal crypto API", "tokens": [50414, 1436, 286, 611, 458, 300, 264, 28256, 575, 1080, 1065, 6920, 17240, 9362, 50614], "temperature": 0.0, "avg_logprob": -0.13501496565969368, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0019179777009412646}, {"id": 428, "seek": 214896, "start": 2153.96, "end": 2155.96, "text": " and has support for all of these operations.", "tokens": [50614, 293, 575, 1406, 337, 439, 295, 613, 7705, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13501496565969368, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0019179777009412646}, {"id": 429, "seek": 214896, "start": 2155.96, "end": 2158.96, "text": " They're just not exposed through the key store.", "tokens": [50714, 814, 434, 445, 406, 9495, 807, 264, 2141, 3531, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13501496565969368, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0019179777009412646}, {"id": 430, "seek": 214896, "start": 2158.96, "end": 2162.96, "text": " Well, specifically for RSA, for ECDSA, no.", "tokens": [50864, 1042, 11, 4682, 337, 497, 8886, 11, 337, 19081, 35, 8886, 11, 572, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13501496565969368, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0019179777009412646}, {"id": 431, "seek": 214896, "start": 2162.96, "end": 2168.96, "text": " The kernel crypto API doesn't have crypto for ECDSA signatures for generating the signature.", "tokens": [51064, 440, 28256, 17240, 9362, 1177, 380, 362, 17240, 337, 19081, 35, 8886, 32322, 337, 17746, 264, 13397, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13501496565969368, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0019179777009412646}, {"id": 432, "seek": 214896, "start": 2168.96, "end": 2173.96, "text": " So my patch set included both the crypto subsystem and the key store subsystem.", "tokens": [51364, 407, 452, 9972, 992, 5556, 1293, 264, 17240, 2090, 9321, 293, 264, 2141, 3531, 2090, 9321, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13501496565969368, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0019179777009412646}, {"id": 433, "seek": 217396, "start": 2173.96, "end": 2180.96, "text": " The kernel can do ECDSA signatures, but also this code is reachable through the key store API.", "tokens": [50364, 440, 28256, 393, 360, 19081, 35, 8886, 32322, 11, 457, 611, 341, 3089, 307, 2524, 712, 807, 264, 2141, 3531, 9362, 13, 50714], "temperature": 0.0, "avg_logprob": -0.18095003389844708, "compression_ratio": 1.2836879432624113, "no_speech_prob": 0.009063562378287315}, {"id": 434, "seek": 217396, "start": 2180.96, "end": 2182.96, "text": " Okay, thank you.", "tokens": [50714, 1033, 11, 1309, 291, 13, 50814], "temperature": 0.0, "avg_logprob": -0.18095003389844708, "compression_ratio": 1.2836879432624113, "no_speech_prob": 0.009063562378287315}, {"id": 435, "seek": 217396, "start": 2193.96, "end": 2196.96, "text": " Very interesting talk. Thank you.", "tokens": [51364, 4372, 1880, 751, 13, 1044, 291, 13, 51514], "temperature": 0.0, "avg_logprob": -0.18095003389844708, "compression_ratio": 1.2836879432624113, "no_speech_prob": 0.009063562378287315}, {"id": 436, "seek": 217396, "start": 2196.96, "end": 2198.96, "text": " I have basically the same question.", "tokens": [51514, 286, 362, 1936, 264, 912, 1168, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18095003389844708, "compression_ratio": 1.2836879432624113, "no_speech_prob": 0.009063562378287315}, {"id": 437, "seek": 219896, "start": 2198.96, "end": 2205.96, "text": " But also, wouldn't there be an urgency to get some PQ crypto in there?", "tokens": [50364, 583, 611, 11, 2759, 380, 456, 312, 364, 29734, 281, 483, 512, 430, 48, 17240, 294, 456, 30, 50714], "temperature": 0.0, "avg_logprob": -0.2047504981358846, "compression_ratio": 1.2734375, "no_speech_prob": 0.06286919116973877}, {"id": 438, "seek": 219896, "start": 2205.96, "end": 2216.96, "text": " Maybe, but we have to fix ECDSA first before we have to learn to walk before the run, right?", "tokens": [50714, 2704, 11, 457, 321, 362, 281, 3191, 19081, 35, 8886, 700, 949, 321, 362, 281, 1466, 281, 1792, 949, 264, 1190, 11, 558, 30, 51264], "temperature": 0.0, "avg_logprob": -0.2047504981358846, "compression_ratio": 1.2734375, "no_speech_prob": 0.06286919116973877}, {"id": 439, "seek": 221696, "start": 2217.96, "end": 2220.96, "text": " James, can you pass it to the next?", "tokens": [50414, 5678, 11, 393, 291, 1320, 309, 281, 264, 958, 30, 50564], "temperature": 0.0, "avg_logprob": -0.1508274893475394, "compression_ratio": 1.825, "no_speech_prob": 0.06796176731586456}, {"id": 440, "seek": 221696, "start": 2223.96, "end": 2228.96, "text": " So if we now add the trouson to the picture, does the kernel have any kind of API to interact?", "tokens": [50714, 407, 498, 321, 586, 909, 264, 504, 563, 266, 281, 264, 3036, 11, 775, 264, 28256, 362, 604, 733, 295, 9362, 281, 4648, 30, 50964], "temperature": 0.0, "avg_logprob": -0.1508274893475394, "compression_ratio": 1.825, "no_speech_prob": 0.06796176731586456}, {"id": 441, "seek": 221696, "start": 2228.96, "end": 2233.96, "text": " I mean, the key store itself, would it interact with the trouson to get the key", "tokens": [50964, 286, 914, 11, 264, 2141, 3531, 2564, 11, 576, 309, 4648, 365, 264, 504, 563, 266, 281, 483, 264, 2141, 51214], "temperature": 0.0, "avg_logprob": -0.1508274893475394, "compression_ratio": 1.825, "no_speech_prob": 0.06796176731586456}, {"id": 442, "seek": 221696, "start": 2233.96, "end": 2236.96, "text": " or we need to still go to the user space to the helper", "tokens": [51214, 420, 321, 643, 281, 920, 352, 281, 264, 4195, 1901, 281, 264, 36133, 51364], "temperature": 0.0, "avg_logprob": -0.1508274893475394, "compression_ratio": 1.825, "no_speech_prob": 0.06796176731586456}, {"id": 443, "seek": 221696, "start": 2236.96, "end": 2240.96, "text": " and then the helper will just go through a normal way of communicating with the trouson", "tokens": [51364, 293, 550, 264, 36133, 486, 445, 352, 807, 257, 2710, 636, 295, 17559, 365, 264, 504, 563, 266, 51564], "temperature": 0.0, "avg_logprob": -0.1508274893475394, "compression_ratio": 1.825, "no_speech_prob": 0.06796176731586456}, {"id": 444, "seek": 221696, "start": 2240.96, "end": 2244.96, "text": " and secure monitor call and get back the result and then the key back to the kernel.", "tokens": [51564, 293, 7144, 6002, 818, 293, 483, 646, 264, 1874, 293, 550, 264, 2141, 646, 281, 264, 28256, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1508274893475394, "compression_ratio": 1.825, "no_speech_prob": 0.06796176731586456}, {"id": 445, "seek": 224496, "start": 2244.96, "end": 2251.96, "text": " For the trouson, I think there is some code, because I never tested on an ARM system", "tokens": [50364, 1171, 264, 504, 563, 266, 11, 286, 519, 456, 307, 512, 3089, 11, 570, 286, 1128, 8246, 322, 364, 45209, 1185, 50714], "temperature": 0.0, "avg_logprob": -0.19157036637837907, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.04399753361940384}, {"id": 446, "seek": 224496, "start": 2251.96, "end": 2258.96, "text": " like similar to what we have, the trusted keys for the TPM back trusted keys.", "tokens": [50714, 411, 2531, 281, 437, 321, 362, 11, 264, 16034, 9317, 337, 264, 314, 18819, 646, 16034, 9317, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19157036637837907, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.04399753361940384}, {"id": 447, "seek": 224496, "start": 2258.96, "end": 2263.96, "text": " There is an implementation for trusted keys for the ARM trouson, the open source one.", "tokens": [51064, 821, 307, 364, 11420, 337, 16034, 9317, 337, 264, 45209, 504, 563, 266, 11, 264, 1269, 4009, 472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.19157036637837907, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.04399753361940384}, {"id": 448, "seek": 224496, "start": 2263.96, "end": 2266.96, "text": " I saw the code, I never tried it, but it's there.", "tokens": [51314, 286, 1866, 264, 3089, 11, 286, 1128, 3031, 309, 11, 457, 309, 311, 456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19157036637837907, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.04399753361940384}, {"id": 449, "seek": 224496, "start": 2266.96, "end": 2269.96, "text": " So there is some reference of the application, right?", "tokens": [51464, 407, 456, 307, 512, 6408, 295, 264, 3861, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.19157036637837907, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.04399753361940384}, {"id": 450, "seek": 224496, "start": 2269.96, "end": 2270.96, "text": " Yes.", "tokens": [51614, 1079, 13, 51664], "temperature": 0.0, "avg_logprob": -0.19157036637837907, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.04399753361940384}, {"id": 451, "seek": 224496, "start": 2270.96, "end": 2273.96, "text": " The GNS and there is internal support for that.", "tokens": [51664, 440, 460, 42003, 293, 456, 307, 6920, 1406, 337, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.19157036637837907, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.04399753361940384}, {"id": 452, "seek": 227396, "start": 2273.96, "end": 2274.96, "text": " Yes.", "tokens": [50364, 1079, 13, 50414], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 453, "seek": 227396, "start": 2274.96, "end": 2275.96, "text": " OPTE.", "tokens": [50414, 23324, 13639, 13, 50464], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 454, "seek": 227396, "start": 2275.96, "end": 2277.96, "text": " Yes, OPTE.", "tokens": [50464, 1079, 11, 23324, 13639, 13, 50564], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 455, "seek": 227396, "start": 2285.96, "end": 2287.96, "text": " Alright, anything else?", "tokens": [50964, 2798, 11, 1340, 1646, 30, 51064], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 456, "seek": 227396, "start": 2287.96, "end": 2288.96, "text": " Oh, yeah.", "tokens": [51064, 876, 11, 1338, 13, 51114], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 457, "seek": 227396, "start": 2288.96, "end": 2291.96, "text": " If you shout, I'll just repeat.", "tokens": [51114, 759, 291, 8043, 11, 286, 603, 445, 7149, 13, 51264], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 458, "seek": 227396, "start": 2291.96, "end": 2295.96, "text": " It's just wondering which version I need to use this.", "tokens": [51264, 467, 311, 445, 6359, 597, 3037, 286, 643, 281, 764, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 459, "seek": 227396, "start": 2295.96, "end": 2296.96, "text": " Sorry?", "tokens": [51464, 4919, 30, 51514], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 460, "seek": 227396, "start": 2296.96, "end": 2298.96, "text": " Which version is it available from?", "tokens": [51514, 3013, 3037, 307, 309, 2435, 490, 30, 51614], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 461, "seek": 227396, "start": 2298.96, "end": 2300.96, "text": " The kernel key store.", "tokens": [51614, 440, 28256, 2141, 3531, 13, 51714], "temperature": 0.0, "avg_logprob": -0.24073216789647153, "compression_ratio": 1.3205128205128205, "no_speech_prob": 0.017452625557780266}, {"id": 462, "seek": 230096, "start": 2300.96, "end": 2302.96, "text": " I mean, it's quite all, I guess.", "tokens": [50364, 286, 914, 11, 309, 311, 1596, 439, 11, 286, 2041, 13, 50464], "temperature": 0.0, "avg_logprob": -0.12565714705224132, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.016392894089221954}, {"id": 463, "seek": 230096, "start": 2302.96, "end": 2309.96, "text": " What we did, I think from 6.1, again, we mentioned the crypto subsystem, the key store subsystem.", "tokens": [50464, 708, 321, 630, 11, 286, 519, 490, 1386, 13, 16, 11, 797, 11, 321, 2835, 264, 17240, 2090, 9321, 11, 264, 2141, 3531, 2090, 9321, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12565714705224132, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.016392894089221954}, {"id": 464, "seek": 230096, "start": 2309.96, "end": 2318.96, "text": " It was really handy to insert the RSA key into operation with it, but you didn't have any ability to do the same with the symmetric key.", "tokens": [50814, 467, 390, 534, 13239, 281, 8969, 264, 497, 8886, 2141, 666, 6916, 365, 309, 11, 457, 291, 994, 380, 362, 604, 3485, 281, 360, 264, 912, 365, 264, 32330, 2141, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12565714705224132, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.016392894089221954}, {"id": 465, "seek": 230096, "start": 2318.96, "end": 2326.96, "text": " So what we extended is like the crypto user space socket API to be initialized from the user or logon key.", "tokens": [51264, 407, 437, 321, 10913, 307, 411, 264, 17240, 4195, 1901, 19741, 9362, 281, 312, 5883, 1602, 490, 264, 4195, 420, 3565, 266, 2141, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12565714705224132, "compression_ratio": 1.5648535564853556, "no_speech_prob": 0.016392894089221954}, {"id": 466, "seek": 232696, "start": 2326.96, "end": 2339.96, "text": " So now you can do it from 6.1, you can insert a symmetric key and then you can create a crypto socket based on that key to perform like AS encryption with that key without exposing the key to user space.", "tokens": [50364, 407, 586, 291, 393, 360, 309, 490, 1386, 13, 16, 11, 291, 393, 8969, 257, 32330, 2141, 293, 550, 291, 393, 1884, 257, 17240, 19741, 2361, 322, 300, 2141, 281, 2042, 411, 7469, 29575, 365, 300, 2141, 1553, 33178, 264, 2141, 281, 4195, 1901, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21550606899574154, "compression_ratio": 1.4968944099378882, "no_speech_prob": 0.002796479966491461}, {"id": 467, "seek": 232696, "start": 2339.96, "end": 2346.96, "text": " Back to you, does this not want to...", "tokens": [51014, 5833, 281, 291, 11, 775, 341, 406, 528, 281, 485, 51364], "temperature": 0.0, "avg_logprob": -0.21550606899574154, "compression_ratio": 1.4968944099378882, "no_speech_prob": 0.002796479966491461}, {"id": 468, "seek": 234696, "start": 2346.96, "end": 2352.96, "text": " So if I recall correctly, you said that the persistent keys can expire after some time of being unused.", "tokens": [50364, 407, 498, 286, 9901, 8944, 11, 291, 848, 300, 264, 24315, 9317, 393, 45447, 934, 512, 565, 295, 885, 44383, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15146848890516493, "compression_ratio": 1.6929133858267718, "no_speech_prob": 0.2202063798904419}, {"id": 469, "seek": 234696, "start": 2352.96, "end": 2356.96, "text": " Does listing the keys also count as using them?", "tokens": [50664, 4402, 22161, 264, 9317, 611, 1207, 382, 1228, 552, 30, 50864], "temperature": 0.0, "avg_logprob": -0.15146848890516493, "compression_ratio": 1.6929133858267718, "no_speech_prob": 0.2202063798904419}, {"id": 470, "seek": 234696, "start": 2356.96, "end": 2357.96, "text": " That's my first question.", "tokens": [50864, 663, 311, 452, 700, 1168, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15146848890516493, "compression_ratio": 1.6929133858267718, "no_speech_prob": 0.2202063798904419}, {"id": 471, "seek": 234696, "start": 2357.96, "end": 2362.96, "text": " My second question is like, what's the time out time for it to expire?", "tokens": [50914, 1222, 1150, 1168, 307, 411, 11, 437, 311, 264, 565, 484, 565, 337, 309, 281, 45447, 30, 51164], "temperature": 0.0, "avg_logprob": -0.15146848890516493, "compression_ratio": 1.6929133858267718, "no_speech_prob": 0.2202063798904419}, {"id": 472, "seek": 234696, "start": 2362.96, "end": 2366.96, "text": " I haven't used them like so widely to have those specifics.", "tokens": [51164, 286, 2378, 380, 1143, 552, 411, 370, 13371, 281, 362, 729, 28454, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15146848890516493, "compression_ratio": 1.6929133858267718, "no_speech_prob": 0.2202063798904419}, {"id": 473, "seek": 234696, "start": 2366.96, "end": 2375.96, "text": " I think the time out is configurable, definitely, but listing, I don't know if listing the keys actually reset the timer.", "tokens": [51364, 286, 519, 264, 565, 484, 307, 22192, 712, 11, 2138, 11, 457, 22161, 11, 286, 500, 380, 458, 498, 22161, 264, 9317, 767, 14322, 264, 19247, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15146848890516493, "compression_ratio": 1.6929133858267718, "no_speech_prob": 0.2202063798904419}, {"id": 474, "seek": 237596, "start": 2375.96, "end": 2378.96, "text": " I just want to answer the question from over here.", "tokens": [50364, 286, 445, 528, 281, 1867, 264, 1168, 490, 670, 510, 13, 50514], "temperature": 0.0, "avg_logprob": -0.183459605200816, "compression_ratio": 1.308724832214765, "no_speech_prob": 0.02687305212020874}, {"id": 475, "seek": 237596, "start": 2378.96, "end": 2386.96, "text": " It looks like the API has been available since 2.6.10, which feels old.", "tokens": [50514, 467, 1542, 411, 264, 9362, 575, 668, 2435, 1670, 568, 13, 21, 13, 3279, 11, 597, 3417, 1331, 13, 50914], "temperature": 0.0, "avg_logprob": -0.183459605200816, "compression_ratio": 1.308724832214765, "no_speech_prob": 0.02687305212020874}, {"id": 476, "seek": 237596, "start": 2386.96, "end": 2388.96, "text": " Yeah.", "tokens": [50914, 865, 13, 51014], "temperature": 0.0, "avg_logprob": -0.183459605200816, "compression_ratio": 1.308724832214765, "no_speech_prob": 0.02687305212020874}, {"id": 477, "seek": 237596, "start": 2388.96, "end": 2391.96, "text": " There is one person over there which...", "tokens": [51014, 821, 307, 472, 954, 670, 456, 597, 485, 51164], "temperature": 0.0, "avg_logprob": -0.183459605200816, "compression_ratio": 1.308724832214765, "no_speech_prob": 0.02687305212020874}, {"id": 478, "seek": 237596, "start": 2391.96, "end": 2394.96, "text": " Maybe you shout, I repeat.", "tokens": [51164, 2704, 291, 8043, 11, 286, 7149, 13, 51314], "temperature": 0.0, "avg_logprob": -0.183459605200816, "compression_ratio": 1.308724832214765, "no_speech_prob": 0.02687305212020874}, {"id": 479, "seek": 239496, "start": 2394.96, "end": 2407.96, "text": " As a certified micro-configuration enthusiast, is there a reason why this approach is taking rather than planning APIs for the value of duty and so on, that you need the space and have the same benefits?", "tokens": [50364, 1018, 257, 18580, 4532, 12, 1671, 20646, 8167, 18076, 525, 11, 307, 456, 257, 1778, 983, 341, 3109, 307, 1940, 2831, 813, 5038, 21445, 337, 264, 2158, 295, 9776, 293, 370, 322, 11, 300, 291, 643, 264, 1901, 293, 362, 264, 912, 5311, 30, 51014], "temperature": 0.0, "avg_logprob": -0.32007798203476917, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.032746221870183945}, {"id": 480, "seek": 239496, "start": 2407.96, "end": 2411.96, "text": " The question was why we didn't do it in user space, but...", "tokens": [51014, 440, 1168, 390, 983, 321, 994, 380, 360, 309, 294, 4195, 1901, 11, 457, 485, 51214], "temperature": 0.0, "avg_logprob": -0.32007798203476917, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.032746221870183945}, {"id": 481, "seek": 239496, "start": 2411.96, "end": 2415.96, "text": " How do you add extra functionality to the kernel to give you the same benefits?", "tokens": [51214, 1012, 360, 291, 909, 2857, 14980, 281, 264, 28256, 281, 976, 291, 264, 912, 5311, 30, 51414], "temperature": 0.0, "avg_logprob": -0.32007798203476917, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.032746221870183945}, {"id": 482, "seek": 239496, "start": 2415.96, "end": 2418.96, "text": " I kind of don't quite understand the question.", "tokens": [51414, 286, 733, 295, 500, 380, 1596, 1223, 264, 1168, 13, 51564], "temperature": 0.0, "avg_logprob": -0.32007798203476917, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.032746221870183945}, {"id": 483, "seek": 239496, "start": 2418.96, "end": 2422.96, "text": " The whole point is not to expose cryptographic material to user space.", "tokens": [51564, 440, 1379, 935, 307, 406, 281, 19219, 9844, 12295, 2527, 281, 4195, 1901, 13, 51764], "temperature": 0.0, "avg_logprob": -0.32007798203476917, "compression_ratio": 1.6727272727272726, "no_speech_prob": 0.032746221870183945}, {"id": 484, "seek": 242296, "start": 2422.96, "end": 2429.96, "text": " You're saying the benefits are, for example, if a process dies, then you can immediately wipe the key from memory and that sort of thing.", "tokens": [50364, 509, 434, 1566, 264, 5311, 366, 11, 337, 1365, 11, 498, 257, 1399, 2714, 11, 550, 291, 393, 4258, 14082, 264, 2141, 490, 4675, 293, 300, 1333, 295, 551, 13, 50714], "temperature": 0.0, "avg_logprob": -0.23725990295410157, "compression_ratio": 1.7269076305220883, "no_speech_prob": 0.12453274428844452}, {"id": 485, "seek": 242296, "start": 2429.96, "end": 2438.96, "text": " You could also add functionality to add consistals to the normal database processes that have that sort of benefits.", "tokens": [50714, 509, 727, 611, 909, 14980, 281, 909, 4603, 1124, 281, 264, 2710, 8149, 7555, 300, 362, 300, 1333, 295, 5311, 13, 51164], "temperature": 0.0, "avg_logprob": -0.23725990295410157, "compression_ratio": 1.7269076305220883, "no_speech_prob": 0.12453274428844452}, {"id": 486, "seek": 242296, "start": 2438.96, "end": 2441.96, "text": " Why didn't you do that rather than sticking extra things into the kernel?", "tokens": [51164, 1545, 994, 380, 291, 360, 300, 2831, 813, 13465, 2857, 721, 666, 264, 28256, 30, 51314], "temperature": 0.0, "avg_logprob": -0.23725990295410157, "compression_ratio": 1.7269076305220883, "no_speech_prob": 0.12453274428844452}, {"id": 487, "seek": 242296, "start": 2441.96, "end": 2446.96, "text": " Because you can retrace the processing of user space, but you cannot retrace the kernel.", "tokens": [51314, 1436, 291, 393, 23106, 617, 264, 9007, 295, 4195, 1901, 11, 457, 291, 2644, 23106, 617, 264, 28256, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23725990295410157, "compression_ratio": 1.7269076305220883, "no_speech_prob": 0.12453274428844452}, {"id": 488, "seek": 242296, "start": 2446.96, "end": 2449.96, "text": " Just saying.", "tokens": [51564, 1449, 1566, 13, 51714], "temperature": 0.0, "avg_logprob": -0.23725990295410157, "compression_ratio": 1.7269076305220883, "no_speech_prob": 0.12453274428844452}, {"id": 489, "seek": 244996, "start": 2449.96, "end": 2452.96, "text": " Anyway, we are out of time. Thank you very much.", "tokens": [50364, 5684, 11, 321, 366, 484, 295, 565, 13, 1044, 291, 588, 709, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2917316370996936, "compression_ratio": 1.0238095238095237, "no_speech_prob": 0.22484229505062103}, {"id": 490, "seek": 244996, "start": 2452.96, "end": 2455.96, "text": " I'm sure you can get two infocations.", "tokens": [50514, 286, 478, 988, 291, 393, 483, 732, 1536, 905, 763, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2917316370996936, "compression_ratio": 1.0238095238095237, "no_speech_prob": 0.22484229505062103}], "language": "en"}