{"text": " Okay, if I may have your attention again, it's time for next talk by Matthias Lorsen, this time about his unicernal and how he can run MPI code faster. Which is yours? So hello everyone, you take me well? Okay, thank you. I'm Matthias Lada, in this presentation I'm going to talk about the player in MPI applications using Total Unicernal. This is an exploratory work, so it's an area I am still investigating, so at the end of the presentation feel free to ask me any questions because I'm still benchmarking things, I'm not pretty sure where I'm going. So first I would like to present myself, I'm fascinated about practice system development and mutualization, and I have been working in these companies, this is my email, I did have a profile if you want to get in touch or you want to see some of my projects. This current project is not related with my current work, so it's something that I'm just doing when I have some free time. I would like to start by what is my intuition about what is an MPI application, I am not an expert on MPI, so it is what I understood since two years I have been working on this. So it is an application that compiles with the implementation of the MPI standard, so there exists several implementations of the MPI standard. The standard defines a set of APIs to synchronize and communicate parallel instances of the MPI application, so for example we have this sort of API, like MPI barrier broadcast and all reuse for example, so to set some of them. My impression is that the only performance matter when we deploy MPI applications, so I have a feeling that the virtualization is not very popular in HPC, at least my impression for the overhead that this adds. So my thought was that maybe MPI applications may benefit from the unicurners because for example Cisco are expensive, so in unicurners we remove that, we have calls, threads are cheaper than process, so you may know that we are not switching the page today, every time we are doing context switching in unicurner, depending on your application you can completely remove the scheduler because you are going to run only one thread per course or something like this. You can rely on communication and share memory for example, in the case of unicurners. And sometimes this is something that I just added, sometimes perform better than a general operating system as I guess and I say this because sometimes you can tweak your operating system to reach good performance, let's say. So yeah, well this is the diagram or the components that they are involved with when you are deploying an MPI application using a general proposal of the operating system. In this case I am thinking that the MPI application is running as a built-in machine but the diagram is more or less the same in case it is bare metal. So what we have is your MPI application, then it compiles with implementation of the MPI standard, for example OpenMPI and the OpenMPI is going to use some Cisco to communicate with the operating system to get some service like scaling file system, networking and so on. So what unicurners propose is well let's take a look at the data. Thank you. you you you you you you you about the scheduler. So the scheduler in tutorial is quite simple and also well here is no scheduler, it is the way that the tutorial creates threads. You have a dedicated API called a begin thread but it is a parameter that has to tell where the instance is going to run so you have to set up where the core is, I mean where you want that function to run. Otherwise it is going to choose all the times the booting core. The scheduler is quite simple, it is a cooperative scheduler, so I mean the thread is going to do something and then call this thread switch which is going to invoke the scheduler and each scheduler, I think I present that in the next one. Yeah, I mean each scheduler is independent one another so there is no communication between the instance so each core is scheduler completely independent one another and the algorithm is quite simple, it is going to choose the next thread that is ready, not more than that. And the idea behind that is that the idea was to have instance of the kernel that don't require any mechanism to synchronize the instance so there is no speed lock or something like this so all the access to the kernel data is lock free. So I just talked about the scheduler, now I am going to talk about the memory, also total memory is dedicated so when the kernel initialize is split the memory in rations and then all the allocations happen from that rations depending the core. So the splitting is quite simple, it is just split by the number of cores so you have two cores, you have two cores, you have three, so for a moment this algorithm is quite simple and maybe it could be improved for sure. So for example we have a memory allocator that since each ration is assigned to different core the way that we implement the allocator doesn't require any synchronization between the core, keep also the same idea that each instance runs independent one another. So for example when a thread has two allocator memories it is always coming from the same ration and also doesn't require any synchronization between the cores and so on. The idea behind this is also to try to leverage from technologies that integrate paths that you can have a known informer memory and then you have faster access to some rations. And in a general way all the kernel data in total is per CPU variables so it means that it doesn't require any synchronization between the core to access kernel data. And also to access faster to these CPU variables using the chs register for example and this is an improvement that I did a couple of months ago and so we have a table and it is faster access through the chs register which is pointing to that table. I don't remember exactly the mechanics but I think I have a blog that I wrote about that and all the access is log free. The only moment that we require synchronization between the cores is when we wanted to for example create a thread from one core to another. We need to synchronize somehow the cores to migrate one thread to another something like this but it's the only moment that we need it. Otherwise this is completely independent all the instance. And to end the principles of total I will be going to talk a bit about the core to core communication. And the idea was to even if you as a user you can implement anything on share memory as you want. I decided to implement the entire over share memory so each core has a set of big use that allows to get data from a remote core and say data to another core. And it was just a bit of I mean to have fun to do it like this. I mean I'm starting to see if I can implement the entire like this. And the idea is that the communication is core to core so we don't have only one queue per core. You have as many birch use as you need to communicate one to one for each core. I don't know how to say exactly but this makes that you don't require any protection to send or keep the exclusive access to this birch use. Because you have only one consumer or one producer and so on. And relying on this mechanism then I could implement the API from MPI like MPI Gutter broadcast and MPI scatter which are functions that require communication between the core. So from the root core to the root core and so on. So I think I will just talk a bit about the benchmark I have been done. I feel free to comment about this because I'm not really sure about the numbers I'm getting. What I did was to choose a set of well known benchmarks called also micro benchmark which is since that it is used for benchmark in different implementations of the MPI standard. And I pick up two of them the also barrier and also already use which what they do is just stress some function. So for example the also barrier stress the MPI barrier function which is something to synchronize the instance of an MPI application. It's just a software barrier let's say. And the other one they already use is stress the MPI already use function. Which is going to send some vector to the root core process something and get back the rest to the other cores or other instance. What I did was comparing with Linux Bermuda and Linux in IBM and I use it. I pick up this machine from the from a clinics which is an AMD epic with 24 cores and 64 sheen rate and the host I use it for the VN is a Wuntu with isolated cores. No sorry yeah with isolated course. And I ran the and I use it. KBM team was hypervisor. I'm sorry now the host was Wuntu and the guess was Fedora 38. What I did is in this particular case what I did was to use a huge VM with 16 cores. Maybe it's not the most common case for MPI people just have several nodes instead of putting everything on the same. In my case I was trying to play with this so I decided to use a huge VM let's say and then compare with total right. So this is how I launch the benchmark. So for example I am using 16 threads for example. I'm not an expert in MPI I'm not really sure if this I mean if the MPI run for example is really using one core per thread it will not be optimal otherwise I think. And I was launching for 1000 interaction so this is the result for the Linux Bermuda. No Linux in IBM sorry. So these are the numbers for the host barrier. Which is this test if I yeah. So you can see that there is quite huge difference between the Linux VM and the Unicolon. But still I have to read redo these numbers I'm not really sure about that I mean because there are one order of magnitude at least. At the beginning I was interested to compare with Linux Bermuda because I think we can achieve something like this in IBM. But then when I started to play with Linux VM I said well there is a huge already difference with the VM. And also I was comparing with the host already used as I said before in particular with that side of the vector. And also it's quite huge difference with the Unicolon. So in the two cases are 16 cores in the VM and the Unicolon too. And I think that's all about the benchmark. To have this number also I figured out that some issues in particular I don't know if you were measuring something in VMs. In particular in carry-in the early TCC register is not emulated so you have to be careful when you use that. For example you have to when you are doing numbers you have to check that the carry-in is still in time. So if you make the difference it's not going to work always so you have to be careful about that. That's all I think. The question is a question. It's a question. It's a pity I'm not doing... The question was why I'm not doing communication between the VMs using this implementation. Basically this implementation can only run on a single node but people are using MPI on classes with tens or hundreds or thousands of nodes. Why? Do you have any plans to extend that? Well I'm thinking about that because it's not the first time that they mention this. Maybe create an interface, I mean use butyonet or butyvisoc to communicate with other instance. You will have multiple VMs running that. But for the moment maybe I will do it soon. I'm not really worried about that. What questions? Which MPI implementation are you implementing? Because there are different kind of versions of MPI or Pitch or so on. Which one are you based on? I'm not really sure because what I'm doing is just trying to read the semantics of MPI. I'm trying to implement it at code. The number of the functions I'm implementing is based on what is the benchmark. That's all. This is why I'm doing it. No more than that. Do you have numbers when you increase the number of nodes? Do you mean if I have numbers when you increment the number of nodes? How that behave? Yeah. I'm still doing that number. The difference is still there between the VM and the Linux implementation. Still a difference in the sense that it's faster, let's say. I'm still doing those numbers too. There is no point in finding the question. I don't know. Do you have a question about the big problems that are happening in the end of the time? The question is if I understand why we have that difference. I don't know. There are a lot of ways to tweak Linux to make it more performance. Maybe I'm lacking that. If you tweak it, you're going to dramatically drop that difference and the configuration. I'm not really sure from where it's coming. But I said before, it's still numbers that I'm working on. Okay, I think we are running out of time. So, Api, thanks again for the talk. Thank you. We have a short break for five minutes. And after that, we will have talk. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 17.36, "text": " Okay, if I may have your attention again, it's time for next talk by Matthias Lorsen,", "tokens": [50364, 1033, 11, 498, 286, 815, 362, 428, 3202, 797, 11, 309, 311, 565, 337, 958, 751, 538, 11327, 4609, 441, 830, 268, 11, 51232], "temperature": 0.0, "avg_logprob": -0.4357249077330244, "compression_ratio": 1.2479338842975207, "no_speech_prob": 0.5651030540466309}, {"id": 1, "seek": 0, "start": 17.36, "end": 24.560000000000002, "text": " this time about his unicernal and how he can run MPI code faster.", "tokens": [51232, 341, 565, 466, 702, 517, 299, 1248, 304, 293, 577, 415, 393, 1190, 14146, 40, 3089, 4663, 13, 51592], "temperature": 0.0, "avg_logprob": -0.4357249077330244, "compression_ratio": 1.2479338842975207, "no_speech_prob": 0.5651030540466309}, {"id": 2, "seek": 2456, "start": 24.56, "end": 26.56, "text": " Which is yours?", "tokens": [50364, 3013, 307, 6342, 30, 50464], "temperature": 0.0, "avg_logprob": -0.4800182811000891, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.14736616611480713}, {"id": 3, "seek": 2456, "start": 33.56, "end": 37.56, "text": " So hello everyone, you take me well?", "tokens": [50814, 407, 7751, 1518, 11, 291, 747, 385, 731, 30, 51014], "temperature": 0.0, "avg_logprob": -0.4800182811000891, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.14736616611480713}, {"id": 4, "seek": 2456, "start": 37.56, "end": 39.56, "text": " Okay, thank you.", "tokens": [51014, 1033, 11, 1309, 291, 13, 51114], "temperature": 0.0, "avg_logprob": -0.4800182811000891, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.14736616611480713}, {"id": 5, "seek": 2456, "start": 39.56, "end": 49.56, "text": " I'm Matthias Lada, in this presentation I'm going to talk about the player in MPI applications using Total Unicernal.", "tokens": [51114, 286, 478, 11327, 4609, 441, 1538, 11, 294, 341, 5860, 286, 478, 516, 281, 751, 466, 264, 4256, 294, 14146, 40, 5821, 1228, 23170, 1156, 299, 1248, 304, 13, 51614], "temperature": 0.0, "avg_logprob": -0.4800182811000891, "compression_ratio": 1.3076923076923077, "no_speech_prob": 0.14736616611480713}, {"id": 6, "seek": 4956, "start": 49.56, "end": 64.56, "text": " This is an exploratory work, so it's an area I am still investigating, so at the end of the presentation feel free to ask me any questions because I'm still benchmarking things, I'm not pretty sure where I'm going.", "tokens": [50364, 639, 307, 364, 24765, 4745, 589, 11, 370, 309, 311, 364, 1859, 286, 669, 920, 22858, 11, 370, 412, 264, 917, 295, 264, 5860, 841, 1737, 281, 1029, 385, 604, 1651, 570, 286, 478, 920, 18927, 278, 721, 11, 286, 478, 406, 1238, 988, 689, 286, 478, 516, 13, 51114], "temperature": 0.0, "avg_logprob": -0.21311795936440522, "compression_ratio": 1.445945945945946, "no_speech_prob": 0.2080029994249344}, {"id": 7, "seek": 6456, "start": 64.56, "end": 84.56, "text": " So first I would like to present myself, I'm fascinated about practice system development and mutualization, and I have been working in these companies, this is my email, I did have a profile if you want to get in touch or you want to see some of my projects.", "tokens": [50364, 407, 700, 286, 576, 411, 281, 1974, 2059, 11, 286, 478, 24597, 466, 3124, 1185, 3250, 293, 16917, 2144, 11, 293, 286, 362, 668, 1364, 294, 613, 3431, 11, 341, 307, 452, 3796, 11, 286, 630, 362, 257, 7964, 498, 291, 528, 281, 483, 294, 2557, 420, 291, 528, 281, 536, 512, 295, 452, 4455, 13, 51364], "temperature": 0.0, "avg_logprob": -0.23810308774312336, "compression_ratio": 1.4550561797752808, "no_speech_prob": 0.09597010910511017}, {"id": 8, "seek": 8456, "start": 85.56, "end": 92.56, "text": " This current project is not related with my current work, so it's something that I'm just doing when I have some free time.", "tokens": [50414, 639, 2190, 1716, 307, 406, 4077, 365, 452, 2190, 589, 11, 370, 309, 311, 746, 300, 286, 478, 445, 884, 562, 286, 362, 512, 1737, 565, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16818690299987793, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.07524219155311584}, {"id": 9, "seek": 8456, "start": 92.56, "end": 106.56, "text": " I would like to start by what is my intuition about what is an MPI application, I am not an expert on MPI, so it is what I understood since two years I have been working on this.", "tokens": [50764, 286, 576, 411, 281, 722, 538, 437, 307, 452, 24002, 466, 437, 307, 364, 14146, 40, 3861, 11, 286, 669, 406, 364, 5844, 322, 14146, 40, 11, 370, 309, 307, 437, 286, 7320, 1670, 732, 924, 286, 362, 668, 1364, 322, 341, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16818690299987793, "compression_ratio": 1.5487179487179488, "no_speech_prob": 0.07524219155311584}, {"id": 10, "seek": 10656, "start": 106.56, "end": 115.56, "text": " So it is an application that compiles with the implementation of the MPI standard, so there exists several implementations of the MPI standard.", "tokens": [50364, 407, 309, 307, 364, 3861, 300, 715, 4680, 365, 264, 11420, 295, 264, 14146, 40, 3832, 11, 370, 456, 8198, 2940, 4445, 763, 295, 264, 14146, 40, 3832, 13, 50814], "temperature": 0.0, "avg_logprob": -0.22267070448542214, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.19140934944152832}, {"id": 11, "seek": 10656, "start": 115.56, "end": 131.56, "text": " The standard defines a set of APIs to synchronize and communicate parallel instances of the MPI application, so for example we have this sort of API, like MPI barrier broadcast and all reuse for example, so to set some of them.", "tokens": [50814, 440, 3832, 23122, 257, 992, 295, 21445, 281, 19331, 1125, 293, 7890, 8952, 14519, 295, 264, 14146, 40, 3861, 11, 370, 337, 1365, 321, 362, 341, 1333, 295, 9362, 11, 411, 14146, 40, 13357, 9975, 293, 439, 26225, 337, 1365, 11, 370, 281, 992, 512, 295, 552, 13, 51614], "temperature": 0.0, "avg_logprob": -0.22267070448542214, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.19140934944152832}, {"id": 12, "seek": 13156, "start": 132.56, "end": 147.56, "text": " My impression is that the only performance matter when we deploy MPI applications, so I have a feeling that the virtualization is not very popular in HPC, at least my impression for the overhead that this adds.", "tokens": [50414, 1222, 9995, 307, 300, 264, 787, 3389, 1871, 562, 321, 7274, 14146, 40, 5821, 11, 370, 286, 362, 257, 2633, 300, 264, 6374, 2144, 307, 406, 588, 3743, 294, 12557, 34, 11, 412, 1935, 452, 9995, 337, 264, 19922, 300, 341, 10860, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1853091666039, "compression_ratio": 1.4189189189189189, "no_speech_prob": 0.0259237177670002}, {"id": 13, "seek": 14756, "start": 148.56, "end": 169.56, "text": " So my thought was that maybe MPI applications may benefit from the unicurners because for example Cisco are expensive, so in unicurners we remove that, we have calls, threads are cheaper than process, so you may know that we are not switching the page today,", "tokens": [50414, 407, 452, 1194, 390, 300, 1310, 14146, 40, 5821, 815, 5121, 490, 264, 517, 299, 925, 433, 570, 337, 1365, 38528, 366, 5124, 11, 370, 294, 517, 299, 925, 433, 321, 4159, 300, 11, 321, 362, 5498, 11, 19314, 366, 12284, 813, 1399, 11, 370, 291, 815, 458, 300, 321, 366, 406, 16493, 264, 3028, 965, 11, 51464], "temperature": 0.0, "avg_logprob": -0.30663349589363476, "compression_ratio": 1.4659090909090908, "no_speech_prob": 0.04926828294992447}, {"id": 14, "seek": 16956, "start": 169.56, "end": 181.56, "text": " every time we are doing context switching in unicurner, depending on your application you can completely remove the scheduler because you are going to run only one thread per course or something like this.", "tokens": [50364, 633, 565, 321, 366, 884, 4319, 16493, 294, 517, 299, 925, 260, 11, 5413, 322, 428, 3861, 291, 393, 2584, 4159, 264, 12000, 260, 570, 291, 366, 516, 281, 1190, 787, 472, 7207, 680, 1164, 420, 746, 411, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.22630263819839014, "compression_ratio": 1.6222222222222222, "no_speech_prob": 0.17042693495750427}, {"id": 15, "seek": 16956, "start": 181.56, "end": 188.56, "text": " You can rely on communication and share memory for example, in the case of unicurners.", "tokens": [50964, 509, 393, 10687, 322, 6101, 293, 2073, 4675, 337, 1365, 11, 294, 264, 1389, 295, 517, 299, 925, 433, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22630263819839014, "compression_ratio": 1.6222222222222222, "no_speech_prob": 0.17042693495750427}, {"id": 16, "seek": 18856, "start": 189.56, "end": 203.56, "text": " And sometimes this is something that I just added, sometimes perform better than a general operating system as I guess and I say this because sometimes you can tweak your operating system to reach good performance, let's say.", "tokens": [50414, 400, 2171, 341, 307, 746, 300, 286, 445, 3869, 11, 2171, 2042, 1101, 813, 257, 2674, 7447, 1185, 382, 286, 2041, 293, 286, 584, 341, 570, 2171, 291, 393, 29879, 428, 7447, 1185, 281, 2524, 665, 3389, 11, 718, 311, 584, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1572784258995527, "compression_ratio": 1.7260869565217392, "no_speech_prob": 0.16401691734790802}, {"id": 17, "seek": 18856, "start": 206.56, "end": 215.56, "text": " So yeah, well this is the diagram or the components that they are involved with when you are deploying an MPI application using a general proposal of the operating system.", "tokens": [51264, 407, 1338, 11, 731, 341, 307, 264, 10686, 420, 264, 6677, 300, 436, 366, 3288, 365, 562, 291, 366, 34198, 364, 14146, 40, 3861, 1228, 257, 2674, 11494, 295, 264, 7447, 1185, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1572784258995527, "compression_ratio": 1.7260869565217392, "no_speech_prob": 0.16401691734790802}, {"id": 18, "seek": 21556, "start": 215.56, "end": 225.56, "text": " In this case I am thinking that the MPI application is running as a built-in machine but the diagram is more or less the same in case it is bare metal.", "tokens": [50364, 682, 341, 1389, 286, 669, 1953, 300, 264, 14146, 40, 3861, 307, 2614, 382, 257, 3094, 12, 259, 3479, 457, 264, 10686, 307, 544, 420, 1570, 264, 912, 294, 1389, 309, 307, 6949, 5760, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19800351846097697, "compression_ratio": 1.688, "no_speech_prob": 0.009380752220749855}, {"id": 19, "seek": 21556, "start": 225.56, "end": 243.56, "text": " So what we have is your MPI application, then it compiles with implementation of the MPI standard, for example OpenMPI and the OpenMPI is going to use some Cisco to communicate with the operating system to get some service like scaling file system, networking and so on.", "tokens": [50864, 407, 437, 321, 362, 307, 428, 14146, 40, 3861, 11, 550, 309, 715, 4680, 365, 11420, 295, 264, 14146, 40, 3832, 11, 337, 1365, 7238, 12224, 40, 293, 264, 7238, 12224, 40, 307, 516, 281, 764, 512, 38528, 281, 7890, 365, 264, 7447, 1185, 281, 483, 512, 2643, 411, 21589, 3991, 1185, 11, 17985, 293, 370, 322, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19800351846097697, "compression_ratio": 1.688, "no_speech_prob": 0.009380752220749855}, {"id": 20, "seek": 24356, "start": 243.56, "end": 251.56, "text": " So what unicurners propose is well let's take a look at the data.", "tokens": [50414, 407, 437, 517, 299, 925, 433, 17421, 307, 731, 718, 311, 747, 257, 574, 412, 264, 1412, 13, 50764], "temperature": 0.0, "avg_logprob": -0.60807922908238, "compression_ratio": 0.9701492537313433, "no_speech_prob": 0.3313966393470764}, {"id": 21, "seek": 27356, "start": 273.56, "end": 278.56, "text": " Thank you.", "tokens": [50414, 1044, 291, 13, 50614], "temperature": 0.0, "avg_logprob": -0.8629868825276693, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9872849583625793}, {"id": 22, "seek": 30356, "start": 303.56, "end": 306.56, "text": " you", "tokens": [50414, 291, 50514], "temperature": 0.0, "avg_logprob": -0.8336347341537476, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.9908047914505005}, {"id": 23, "seek": 33356, "start": 333.56, "end": 335.56, "text": " you", "tokens": [50364, 291, 50464], "temperature": 0.0, "avg_logprob": -0.5720525264739991, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.32988888025283813}, {"id": 24, "seek": 33556, "start": 336.56, "end": 338.56, "text": " you", "tokens": [50414, 291, 50514], "temperature": 0.0, "avg_logprob": -0.5695765495300293, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.1164700835943222}, {"id": 25, "seek": 33856, "start": 338.56, "end": 340.56, "text": " you", "tokens": [50364, 291, 50464], "temperature": 0.0, "avg_logprob": -0.7838890552520752, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.09026739746332169}, {"id": 26, "seek": 34056, "start": 340.56, "end": 342.56, "text": " you", "tokens": [50364, 291, 50464], "temperature": 0.0, "avg_logprob": -0.7204318046569824, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.04740408435463905}, {"id": 27, "seek": 34256, "start": 342.56, "end": 344.56, "text": " you", "tokens": [50364, 291, 50464], "temperature": 0.0, "avg_logprob": -0.718778419494629, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.04696744680404663}, {"id": 28, "seek": 34456, "start": 344.56, "end": 346.56, "text": " you", "tokens": [50364, 291, 50464], "temperature": 0.0, "avg_logprob": -0.5107340017954508, "compression_ratio": 0.75, "no_speech_prob": 0.03972836211323738}, {"id": 29, "seek": 34456, "start": 357.56, "end": 359.56, "text": " about the scheduler.", "tokens": [51014, 466, 264, 12000, 260, 13, 51114], "temperature": 0.0, "avg_logprob": -0.5107340017954508, "compression_ratio": 0.75, "no_speech_prob": 0.03972836211323738}, {"id": 30, "seek": 35956, "start": 359.56, "end": 366.56, "text": " So the scheduler in tutorial is quite simple and also well here is no scheduler, it is the way that the tutorial creates threads.", "tokens": [50364, 407, 264, 12000, 260, 294, 7073, 307, 1596, 2199, 293, 611, 731, 510, 307, 572, 12000, 260, 11, 309, 307, 264, 636, 300, 264, 7073, 7829, 19314, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3197847604751587, "compression_ratio": 1.75, "no_speech_prob": 0.089643694460392}, {"id": 31, "seek": 35956, "start": 366.56, "end": 376.56, "text": " You have a dedicated API called a begin thread but it is a parameter that has to tell where the instance is going to run so you have to set up where the core is, I mean where you want that function to run.", "tokens": [50714, 509, 362, 257, 8374, 9362, 1219, 257, 1841, 7207, 457, 309, 307, 257, 13075, 300, 575, 281, 980, 689, 264, 5197, 307, 516, 281, 1190, 370, 291, 362, 281, 992, 493, 689, 264, 4965, 307, 11, 286, 914, 689, 291, 528, 300, 2445, 281, 1190, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3197847604751587, "compression_ratio": 1.75, "no_speech_prob": 0.089643694460392}, {"id": 32, "seek": 35956, "start": 378.56, "end": 383.56, "text": " Otherwise it is going to choose all the times the booting core.", "tokens": [51314, 10328, 309, 307, 516, 281, 2826, 439, 264, 1413, 264, 11450, 278, 4965, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3197847604751587, "compression_ratio": 1.75, "no_speech_prob": 0.089643694460392}, {"id": 33, "seek": 38356, "start": 384.56, "end": 402.56, "text": " The scheduler is quite simple, it is a cooperative scheduler, so I mean the thread is going to do something and then call this thread switch which is going to invoke the scheduler and each scheduler, I think I present that in the next one.", "tokens": [50414, 440, 12000, 260, 307, 1596, 2199, 11, 309, 307, 257, 31772, 12000, 260, 11, 370, 286, 914, 264, 7207, 307, 516, 281, 360, 746, 293, 550, 818, 341, 7207, 3679, 597, 307, 516, 281, 41117, 264, 12000, 260, 293, 1184, 12000, 260, 11, 286, 519, 286, 1974, 300, 294, 264, 958, 472, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2338201121280068, "compression_ratio": 1.6258503401360545, "no_speech_prob": 0.05404914543032646}, {"id": 34, "seek": 40256, "start": 402.56, "end": 420.56, "text": " Yeah, I mean each scheduler is independent one another so there is no communication between the instance so each core is scheduler completely independent one another and the algorithm is quite simple, it is going to choose the next thread that is ready, not more than that.", "tokens": [50364, 865, 11, 286, 914, 1184, 12000, 260, 307, 6695, 472, 1071, 370, 456, 307, 572, 6101, 1296, 264, 5197, 370, 1184, 4965, 307, 12000, 260, 2584, 6695, 472, 1071, 293, 264, 9284, 307, 1596, 2199, 11, 309, 307, 516, 281, 2826, 264, 958, 7207, 300, 307, 1919, 11, 406, 544, 813, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2263233787135074, "compression_ratio": 1.6956521739130435, "no_speech_prob": 0.012123893946409225}, {"id": 35, "seek": 42056, "start": 421.56, "end": 438.56, "text": " And the idea behind that is that the idea was to have instance of the kernel that don't require any mechanism to synchronize the instance so there is no speed lock or something like this so all the access to the kernel data is lock free.", "tokens": [50414, 400, 264, 1558, 2261, 300, 307, 300, 264, 1558, 390, 281, 362, 5197, 295, 264, 28256, 300, 500, 380, 3651, 604, 7513, 281, 19331, 1125, 264, 5197, 370, 456, 307, 572, 3073, 4017, 420, 746, 411, 341, 370, 439, 264, 2105, 281, 264, 28256, 1412, 307, 4017, 1737, 13, 51264], "temperature": 0.0, "avg_logprob": -0.23384808594325804, "compression_ratio": 1.6013513513513513, "no_speech_prob": 0.020219773054122925}, {"id": 36, "seek": 43856, "start": 439.56, "end": 460.56, "text": " So I just talked about the scheduler, now I am going to talk about the memory, also total memory is dedicated so when the kernel initialize is split the memory in rations and then all the allocations happen from that rations depending the core.", "tokens": [50414, 407, 286, 445, 2825, 466, 264, 12000, 260, 11, 586, 286, 669, 516, 281, 751, 466, 264, 4675, 11, 611, 3217, 4675, 307, 8374, 370, 562, 264, 28256, 5883, 1125, 307, 7472, 264, 4675, 294, 367, 763, 293, 550, 439, 264, 12660, 763, 1051, 490, 300, 367, 763, 5413, 264, 4965, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16368475982121058, "compression_ratio": 1.6158940397350994, "no_speech_prob": 0.007326913066208363}, {"id": 37, "seek": 46056, "start": 461.56, "end": 477.56, "text": " So the splitting is quite simple, it is just split by the number of cores so you have two cores, you have two cores, you have three, so for a moment this algorithm is quite simple and maybe it could be improved for sure.", "tokens": [50414, 407, 264, 30348, 307, 1596, 2199, 11, 309, 307, 445, 7472, 538, 264, 1230, 295, 24826, 370, 291, 362, 732, 24826, 11, 291, 362, 732, 24826, 11, 291, 362, 1045, 11, 370, 337, 257, 1623, 341, 9284, 307, 1596, 2199, 293, 1310, 309, 727, 312, 9689, 337, 988, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3313672407618109, "compression_ratio": 1.6541353383458646, "no_speech_prob": 0.05880478397011757}, {"id": 38, "seek": 47756, "start": 478.56, "end": 500.56, "text": " So for example we have a memory allocator that since each ration is assigned to different core the way that we implement the allocator doesn't require any synchronization between the core, keep also the same idea that each instance runs independent one another.", "tokens": [50414, 407, 337, 1365, 321, 362, 257, 4675, 12660, 1639, 300, 1670, 1184, 24258, 307, 13279, 281, 819, 4965, 264, 636, 300, 321, 4445, 264, 12660, 1639, 1177, 380, 3651, 604, 19331, 2144, 1296, 264, 4965, 11, 1066, 611, 264, 912, 1558, 300, 1184, 5197, 6676, 6695, 472, 1071, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1579968254521208, "compression_ratio": 1.535294117647059, "no_speech_prob": 0.11557352542877197}, {"id": 39, "seek": 50056, "start": 501.56, "end": 516.56, "text": " So for example when a thread has two allocator memories it is always coming from the same ration and also doesn't require any synchronization between the cores and so on.", "tokens": [50414, 407, 337, 1365, 562, 257, 7207, 575, 732, 12660, 1639, 8495, 309, 307, 1009, 1348, 490, 264, 912, 24258, 293, 611, 1177, 380, 3651, 604, 19331, 2144, 1296, 264, 24826, 293, 370, 322, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21091985702514648, "compression_ratio": 1.3492063492063493, "no_speech_prob": 0.01416700053960085}, {"id": 40, "seek": 51656, "start": 516.56, "end": 529.56, "text": " The idea behind this is also to try to leverage from technologies that integrate paths that you can have a known informer memory and then you have faster access to some rations.", "tokens": [50364, 440, 1558, 2261, 341, 307, 611, 281, 853, 281, 13982, 490, 7943, 300, 13365, 14518, 300, 291, 393, 362, 257, 2570, 1356, 260, 4675, 293, 550, 291, 362, 4663, 2105, 281, 512, 367, 763, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21695386446439302, "compression_ratio": 1.4047619047619047, "no_speech_prob": 0.03980406001210213}, {"id": 41, "seek": 52956, "start": 529.56, "end": 549.56, "text": " And in a general way all the kernel data in total is per CPU variables so it means that it doesn't require any synchronization between the core to access kernel data.", "tokens": [50364, 400, 294, 257, 2674, 636, 439, 264, 28256, 1412, 294, 3217, 307, 680, 13199, 9102, 370, 309, 1355, 300, 309, 1177, 380, 3651, 604, 19331, 2144, 1296, 264, 4965, 281, 2105, 28256, 1412, 13, 51364], "temperature": 0.0, "avg_logprob": -0.22115022257754677, "compression_ratio": 1.328, "no_speech_prob": 0.04614082723855972}, {"id": 42, "seek": 54956, "start": 549.56, "end": 569.56, "text": " And also to access faster to these CPU variables using the chs register for example and this is an improvement that I did a couple of months ago and so we have a table and it is faster access through the chs register which is pointing to that table.", "tokens": [50364, 400, 611, 281, 2105, 4663, 281, 613, 13199, 9102, 1228, 264, 417, 82, 7280, 337, 1365, 293, 341, 307, 364, 10444, 300, 286, 630, 257, 1916, 295, 2493, 2057, 293, 370, 321, 362, 257, 3199, 293, 309, 307, 4663, 2105, 807, 264, 417, 82, 7280, 597, 307, 12166, 281, 300, 3199, 13, 51364], "temperature": 0.0, "avg_logprob": -0.29309701919555664, "compression_ratio": 1.5660377358490567, "no_speech_prob": 0.15854713320732117}, {"id": 43, "seek": 56956, "start": 569.56, "end": 579.56, "text": " I don't remember exactly the mechanics but I think I have a blog that I wrote about that and all the access is log free.", "tokens": [50364, 286, 500, 380, 1604, 2293, 264, 12939, 457, 286, 519, 286, 362, 257, 6968, 300, 286, 4114, 466, 300, 293, 439, 264, 2105, 307, 3565, 1737, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20096499125162762, "compression_ratio": 1.7644444444444445, "no_speech_prob": 0.3962709903717041}, {"id": 44, "seek": 56956, "start": 579.56, "end": 587.56, "text": " The only moment that we require synchronization between the cores is when we wanted to for example create a thread from one core to another.", "tokens": [50864, 440, 787, 1623, 300, 321, 3651, 19331, 2144, 1296, 264, 24826, 307, 562, 321, 1415, 281, 337, 1365, 1884, 257, 7207, 490, 472, 4965, 281, 1071, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20096499125162762, "compression_ratio": 1.7644444444444445, "no_speech_prob": 0.3962709903717041}, {"id": 45, "seek": 56956, "start": 587.56, "end": 595.56, "text": " We need to synchronize somehow the cores to migrate one thread to another something like this but it's the only moment that we need it.", "tokens": [51264, 492, 643, 281, 19331, 1125, 6063, 264, 24826, 281, 31821, 472, 7207, 281, 1071, 746, 411, 341, 457, 309, 311, 264, 787, 1623, 300, 321, 643, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.20096499125162762, "compression_ratio": 1.7644444444444445, "no_speech_prob": 0.3962709903717041}, {"id": 46, "seek": 59556, "start": 595.56, "end": 603.56, "text": " Otherwise this is completely independent all the instance.", "tokens": [50364, 10328, 341, 307, 2584, 6695, 439, 264, 5197, 13, 50764], "temperature": 0.0, "avg_logprob": -0.28487680779128777, "compression_ratio": 1.532544378698225, "no_speech_prob": 0.10938958823680878}, {"id": 47, "seek": 59556, "start": 603.56, "end": 610.56, "text": " And to end the principles of total I will be going to talk a bit about the core to core communication.", "tokens": [50764, 400, 281, 917, 264, 9156, 295, 3217, 286, 486, 312, 516, 281, 751, 257, 857, 466, 264, 4965, 281, 4965, 6101, 13, 51114], "temperature": 0.0, "avg_logprob": -0.28487680779128777, "compression_ratio": 1.532544378698225, "no_speech_prob": 0.10938958823680878}, {"id": 48, "seek": 59556, "start": 610.56, "end": 617.56, "text": " And the idea was to even if you as a user you can implement anything on share memory as you want.", "tokens": [51114, 400, 264, 1558, 390, 281, 754, 498, 291, 382, 257, 4195, 291, 393, 4445, 1340, 322, 2073, 4675, 382, 291, 528, 13, 51464], "temperature": 0.0, "avg_logprob": -0.28487680779128777, "compression_ratio": 1.532544378698225, "no_speech_prob": 0.10938958823680878}, {"id": 49, "seek": 61756, "start": 617.56, "end": 628.56, "text": " I decided to implement the entire over share memory so each core has a set of big use that allows to get data from a remote core and say data to another core.", "tokens": [50364, 286, 3047, 281, 4445, 264, 2302, 670, 2073, 4675, 370, 1184, 4965, 575, 257, 992, 295, 955, 764, 300, 4045, 281, 483, 1412, 490, 257, 8607, 4965, 293, 584, 1412, 281, 1071, 4965, 13, 50914], "temperature": 0.0, "avg_logprob": -0.3465034083316201, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.17024609446525574}, {"id": 50, "seek": 61756, "start": 628.56, "end": 634.56, "text": " And it was just a bit of I mean to have fun to do it like this.", "tokens": [50914, 400, 309, 390, 445, 257, 857, 295, 286, 914, 281, 362, 1019, 281, 360, 309, 411, 341, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3465034083316201, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.17024609446525574}, {"id": 51, "seek": 61756, "start": 634.56, "end": 638.56, "text": " I mean I'm starting to see if I can implement the entire like this.", "tokens": [51214, 286, 914, 286, 478, 2891, 281, 536, 498, 286, 393, 4445, 264, 2302, 411, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3465034083316201, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.17024609446525574}, {"id": 52, "seek": 63856, "start": 638.56, "end": 647.56, "text": " And the idea is that the communication is core to core so we don't have only one queue per core.", "tokens": [50364, 400, 264, 1558, 307, 300, 264, 6101, 307, 4965, 281, 4965, 370, 321, 500, 380, 362, 787, 472, 18639, 680, 4965, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15744373798370362, "compression_ratio": 1.668421052631579, "no_speech_prob": 0.07377241551876068}, {"id": 53, "seek": 63856, "start": 647.56, "end": 652.56, "text": " You have as many birch use as you need to communicate one to one for each core.", "tokens": [50814, 509, 362, 382, 867, 1904, 339, 764, 382, 291, 643, 281, 7890, 472, 281, 472, 337, 1184, 4965, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15744373798370362, "compression_ratio": 1.668421052631579, "no_speech_prob": 0.07377241551876068}, {"id": 54, "seek": 63856, "start": 652.56, "end": 664.56, "text": " I don't know how to say exactly but this makes that you don't require any protection to send or keep the exclusive access to this birch use.", "tokens": [51064, 286, 500, 380, 458, 577, 281, 584, 2293, 457, 341, 1669, 300, 291, 500, 380, 3651, 604, 6334, 281, 2845, 420, 1066, 264, 13005, 2105, 281, 341, 1904, 339, 764, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15744373798370362, "compression_ratio": 1.668421052631579, "no_speech_prob": 0.07377241551876068}, {"id": 55, "seek": 66456, "start": 664.56, "end": 669.56, "text": " Because you have only one consumer or one producer and so on.", "tokens": [50364, 1436, 291, 362, 787, 472, 9711, 420, 472, 12314, 293, 370, 322, 13, 50614], "temperature": 0.0, "avg_logprob": -0.22252744786879597, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.03802281990647316}, {"id": 56, "seek": 66456, "start": 669.56, "end": 688.56, "text": " And relying on this mechanism then I could implement the API from MPI like MPI Gutter broadcast and MPI scatter which are functions that require communication between the core.", "tokens": [50614, 400, 24140, 322, 341, 7513, 550, 286, 727, 4445, 264, 9362, 490, 14146, 40, 411, 14146, 40, 460, 9947, 9975, 293, 14146, 40, 34951, 597, 366, 6828, 300, 3651, 6101, 1296, 264, 4965, 13, 51564], "temperature": 0.0, "avg_logprob": -0.22252744786879597, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.03802281990647316}, {"id": 57, "seek": 66456, "start": 688.56, "end": 693.56, "text": " So from the root core to the root core and so on.", "tokens": [51564, 407, 490, 264, 5593, 4965, 281, 264, 5593, 4965, 293, 370, 322, 13, 51814], "temperature": 0.0, "avg_logprob": -0.22252744786879597, "compression_ratio": 1.5483870967741935, "no_speech_prob": 0.03802281990647316}, {"id": 58, "seek": 69356, "start": 693.56, "end": 697.56, "text": " So I think I will just talk a bit about the benchmark I have been done.", "tokens": [50364, 407, 286, 519, 286, 486, 445, 751, 257, 857, 466, 264, 18927, 286, 362, 668, 1096, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16490103006362916, "compression_ratio": 1.6179245283018868, "no_speech_prob": 0.02325626276433468}, {"id": 59, "seek": 69356, "start": 697.56, "end": 701.56, "text": " I feel free to comment about this because I'm not really sure about the numbers I'm getting.", "tokens": [50564, 286, 841, 1737, 281, 2871, 466, 341, 570, 286, 478, 406, 534, 988, 466, 264, 3547, 286, 478, 1242, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16490103006362916, "compression_ratio": 1.6179245283018868, "no_speech_prob": 0.02325626276433468}, {"id": 60, "seek": 69356, "start": 701.56, "end": 716.56, "text": " What I did was to choose a set of well known benchmarks called also micro benchmark which is since that it is used for benchmark in different implementations of the MPI standard.", "tokens": [50764, 708, 286, 630, 390, 281, 2826, 257, 992, 295, 731, 2570, 43751, 1219, 611, 4532, 18927, 597, 307, 1670, 300, 309, 307, 1143, 337, 18927, 294, 819, 4445, 763, 295, 264, 14146, 40, 3832, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16490103006362916, "compression_ratio": 1.6179245283018868, "no_speech_prob": 0.02325626276433468}, {"id": 61, "seek": 71656, "start": 716.56, "end": 724.56, "text": " And I pick up two of them the also barrier and also already use which what they do is just stress some function.", "tokens": [50364, 400, 286, 1888, 493, 732, 295, 552, 264, 611, 13357, 293, 611, 1217, 764, 597, 437, 436, 360, 307, 445, 4244, 512, 2445, 13, 50764], "temperature": 0.0, "avg_logprob": -0.24249576119815602, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.11001727730035782}, {"id": 62, "seek": 71656, "start": 724.56, "end": 734.56, "text": " So for example the also barrier stress the MPI barrier function which is something to synchronize the instance of an MPI application.", "tokens": [50764, 407, 337, 1365, 264, 611, 13357, 4244, 264, 14146, 40, 13357, 2445, 597, 307, 746, 281, 19331, 1125, 264, 5197, 295, 364, 14146, 40, 3861, 13, 51264], "temperature": 0.0, "avg_logprob": -0.24249576119815602, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.11001727730035782}, {"id": 63, "seek": 71656, "start": 734.56, "end": 739.56, "text": " It's just a software barrier let's say.", "tokens": [51264, 467, 311, 445, 257, 4722, 13357, 718, 311, 584, 13, 51514], "temperature": 0.0, "avg_logprob": -0.24249576119815602, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.11001727730035782}, {"id": 64, "seek": 73956, "start": 740.56, "end": 745.56, "text": " And the other one they already use is stress the MPI already use function.", "tokens": [50414, 400, 264, 661, 472, 436, 1217, 764, 307, 4244, 264, 14146, 40, 1217, 764, 2445, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24746807416280112, "compression_ratio": 1.511111111111111, "no_speech_prob": 0.00656999833881855}, {"id": 65, "seek": 73956, "start": 745.56, "end": 756.56, "text": " Which is going to send some vector to the root core process something and get back the rest to the other cores or other instance.", "tokens": [50664, 3013, 307, 516, 281, 2845, 512, 8062, 281, 264, 5593, 4965, 1399, 746, 293, 483, 646, 264, 1472, 281, 264, 661, 24826, 420, 661, 5197, 13, 51214], "temperature": 0.0, "avg_logprob": -0.24746807416280112, "compression_ratio": 1.511111111111111, "no_speech_prob": 0.00656999833881855}, {"id": 66, "seek": 75656, "start": 756.56, "end": 763.56, "text": " What I did was comparing with Linux Bermuda and Linux in IBM and I use it.", "tokens": [50364, 708, 286, 630, 390, 15763, 365, 18734, 363, 966, 11152, 293, 18734, 294, 23487, 293, 286, 764, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.5025971730550131, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.2888523042201996}, {"id": 67, "seek": 75656, "start": 763.56, "end": 780.56, "text": " I pick up this machine from the from a clinics which is an AMD epic with 24 cores and 64 sheen rate and the host I use it for the VN is a Wuntu with isolated cores.", "tokens": [50714, 286, 1888, 493, 341, 3479, 490, 264, 490, 257, 27252, 597, 307, 364, 34808, 13581, 365, 4022, 24826, 293, 12145, 750, 268, 3314, 293, 264, 3975, 286, 764, 309, 337, 264, 691, 45, 307, 257, 343, 45605, 365, 14621, 24826, 13, 51564], "temperature": 0.0, "avg_logprob": -0.5025971730550131, "compression_ratio": 1.4662576687116564, "no_speech_prob": 0.2888523042201996}, {"id": 68, "seek": 78056, "start": 780.56, "end": 783.56, "text": " No sorry yeah with isolated course.", "tokens": [50364, 883, 2597, 1338, 365, 14621, 1164, 13, 50514], "temperature": 0.0, "avg_logprob": -0.3146383476257324, "compression_ratio": 1.5021276595744681, "no_speech_prob": 0.01289898157119751}, {"id": 69, "seek": 78056, "start": 783.56, "end": 787.56, "text": " And I ran the and I use it.", "tokens": [50514, 400, 286, 5872, 264, 293, 286, 764, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3146383476257324, "compression_ratio": 1.5021276595744681, "no_speech_prob": 0.01289898157119751}, {"id": 70, "seek": 78056, "start": 787.56, "end": 789.56, "text": " KBM team was hypervisor.", "tokens": [50714, 591, 33, 44, 1469, 390, 9848, 16457, 13, 50814], "temperature": 0.0, "avg_logprob": -0.3146383476257324, "compression_ratio": 1.5021276595744681, "no_speech_prob": 0.01289898157119751}, {"id": 71, "seek": 78056, "start": 789.56, "end": 794.56, "text": " I'm sorry now the host was Wuntu and the guess was Fedora 38.", "tokens": [50814, 286, 478, 2597, 586, 264, 3975, 390, 343, 45605, 293, 264, 2041, 390, 7772, 3252, 12843, 13, 51064], "temperature": 0.0, "avg_logprob": -0.3146383476257324, "compression_ratio": 1.5021276595744681, "no_speech_prob": 0.01289898157119751}, {"id": 72, "seek": 78056, "start": 794.56, "end": 801.56, "text": " What I did is in this particular case what I did was to use a huge VM with 16 cores.", "tokens": [51064, 708, 286, 630, 307, 294, 341, 1729, 1389, 437, 286, 630, 390, 281, 764, 257, 2603, 18038, 365, 3165, 24826, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3146383476257324, "compression_ratio": 1.5021276595744681, "no_speech_prob": 0.01289898157119751}, {"id": 73, "seek": 78056, "start": 801.56, "end": 809.56, "text": " Maybe it's not the most common case for MPI people just have several nodes instead of putting everything on the same.", "tokens": [51414, 2704, 309, 311, 406, 264, 881, 2689, 1389, 337, 14146, 40, 561, 445, 362, 2940, 13891, 2602, 295, 3372, 1203, 322, 264, 912, 13, 51814], "temperature": 0.0, "avg_logprob": -0.3146383476257324, "compression_ratio": 1.5021276595744681, "no_speech_prob": 0.01289898157119751}, {"id": 74, "seek": 80956, "start": 809.56, "end": 820.56, "text": " In my case I was trying to play with this so I decided to use a huge VM let's say and then compare with total right.", "tokens": [50364, 682, 452, 1389, 286, 390, 1382, 281, 862, 365, 341, 370, 286, 3047, 281, 764, 257, 2603, 18038, 718, 311, 584, 293, 550, 6794, 365, 3217, 558, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14556377274649485, "compression_ratio": 1.3758389261744965, "no_speech_prob": 0.00249117542989552}, {"id": 75, "seek": 80956, "start": 820.56, "end": 827.56, "text": " So this is how I launch the benchmark.", "tokens": [50914, 407, 341, 307, 577, 286, 4025, 264, 18927, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14556377274649485, "compression_ratio": 1.3758389261744965, "no_speech_prob": 0.00249117542989552}, {"id": 76, "seek": 80956, "start": 827.56, "end": 836.56, "text": " So for example I am using 16 threads for example.", "tokens": [51264, 407, 337, 1365, 286, 669, 1228, 3165, 19314, 337, 1365, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14556377274649485, "compression_ratio": 1.3758389261744965, "no_speech_prob": 0.00249117542989552}, {"id": 77, "seek": 83656, "start": 836.56, "end": 850.56, "text": " I'm not an expert in MPI I'm not really sure if this I mean if the MPI run for example is really using one core per thread it will not be optimal otherwise I think.", "tokens": [50364, 286, 478, 406, 364, 5844, 294, 14146, 40, 286, 478, 406, 534, 988, 498, 341, 286, 914, 498, 264, 14146, 40, 1190, 337, 1365, 307, 534, 1228, 472, 4965, 680, 7207, 309, 486, 406, 312, 16252, 5911, 286, 519, 13, 51064], "temperature": 0.0, "avg_logprob": -0.237442722059276, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.01007380522787571}, {"id": 78, "seek": 83656, "start": 850.56, "end": 856.56, "text": " And I was launching for 1000 interaction so this is the result for the Linux Bermuda.", "tokens": [51064, 400, 286, 390, 18354, 337, 9714, 9285, 370, 341, 307, 264, 1874, 337, 264, 18734, 363, 966, 11152, 13, 51364], "temperature": 0.0, "avg_logprob": -0.237442722059276, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.01007380522787571}, {"id": 79, "seek": 83656, "start": 856.56, "end": 860.56, "text": " No Linux in IBM sorry.", "tokens": [51364, 883, 18734, 294, 23487, 2597, 13, 51564], "temperature": 0.0, "avg_logprob": -0.237442722059276, "compression_ratio": 1.4918032786885247, "no_speech_prob": 0.01007380522787571}, {"id": 80, "seek": 86056, "start": 860.56, "end": 865.56, "text": " So these are the numbers for the host barrier.", "tokens": [50364, 407, 613, 366, 264, 3547, 337, 264, 3975, 13357, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2786443860907304, "compression_ratio": 1.5025125628140703, "no_speech_prob": 0.010884569957852364}, {"id": 81, "seek": 86056, "start": 865.56, "end": 870.56, "text": " Which is this test if I yeah.", "tokens": [50614, 3013, 307, 341, 1500, 498, 286, 1338, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2786443860907304, "compression_ratio": 1.5025125628140703, "no_speech_prob": 0.010884569957852364}, {"id": 82, "seek": 86056, "start": 870.56, "end": 878.56, "text": " So you can see that there is quite huge difference between the Linux VM and the Unicolon.", "tokens": [50864, 407, 291, 393, 536, 300, 456, 307, 1596, 2603, 2649, 1296, 264, 18734, 18038, 293, 264, 1156, 299, 38780, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2786443860907304, "compression_ratio": 1.5025125628140703, "no_speech_prob": 0.010884569957852364}, {"id": 83, "seek": 86056, "start": 878.56, "end": 887.56, "text": " But still I have to read redo these numbers I'm not really sure about that I mean because there are one order of magnitude at least.", "tokens": [51264, 583, 920, 286, 362, 281, 1401, 29956, 613, 3547, 286, 478, 406, 534, 988, 466, 300, 286, 914, 570, 456, 366, 472, 1668, 295, 15668, 412, 1935, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2786443860907304, "compression_ratio": 1.5025125628140703, "no_speech_prob": 0.010884569957852364}, {"id": 84, "seek": 88756, "start": 887.56, "end": 895.56, "text": " At the beginning I was interested to compare with Linux Bermuda because I think we can achieve something like this in IBM.", "tokens": [50364, 1711, 264, 2863, 286, 390, 3102, 281, 6794, 365, 18734, 363, 966, 11152, 570, 286, 519, 321, 393, 4584, 746, 411, 341, 294, 23487, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2172756677941431, "compression_ratio": 1.6473429951690821, "no_speech_prob": 0.0034493794664740562}, {"id": 85, "seek": 88756, "start": 895.56, "end": 903.56, "text": " But then when I started to play with Linux VM I said well there is a huge already difference with the VM.", "tokens": [50764, 583, 550, 562, 286, 1409, 281, 862, 365, 18734, 18038, 286, 848, 731, 456, 307, 257, 2603, 1217, 2649, 365, 264, 18038, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2172756677941431, "compression_ratio": 1.6473429951690821, "no_speech_prob": 0.0034493794664740562}, {"id": 86, "seek": 88756, "start": 903.56, "end": 913.56, "text": " And also I was comparing with the host already used as I said before in particular with that side of the vector.", "tokens": [51164, 400, 611, 286, 390, 15763, 365, 264, 3975, 1217, 1143, 382, 286, 848, 949, 294, 1729, 365, 300, 1252, 295, 264, 8062, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2172756677941431, "compression_ratio": 1.6473429951690821, "no_speech_prob": 0.0034493794664740562}, {"id": 87, "seek": 91356, "start": 913.56, "end": 923.56, "text": " And also it's quite huge difference with the Unicolon.", "tokens": [50364, 400, 611, 309, 311, 1596, 2603, 2649, 365, 264, 1156, 299, 38780, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2875485517540757, "compression_ratio": 1.304, "no_speech_prob": 0.03083290532231331}, {"id": 88, "seek": 91356, "start": 923.56, "end": 932.56, "text": " So in the two cases are 16 cores in the VM and the Unicolon too.", "tokens": [50864, 407, 294, 264, 732, 3331, 366, 3165, 24826, 294, 264, 18038, 293, 264, 1156, 299, 38780, 886, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2875485517540757, "compression_ratio": 1.304, "no_speech_prob": 0.03083290532231331}, {"id": 89, "seek": 91356, "start": 932.56, "end": 938.56, "text": " And I think that's all about the benchmark.", "tokens": [51314, 400, 286, 519, 300, 311, 439, 466, 264, 18927, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2875485517540757, "compression_ratio": 1.304, "no_speech_prob": 0.03083290532231331}, {"id": 90, "seek": 93856, "start": 938.56, "end": 946.56, "text": " To have this number also I figured out that some issues in particular I don't know if you were measuring something in VMs.", "tokens": [50364, 1407, 362, 341, 1230, 611, 286, 8932, 484, 300, 512, 2663, 294, 1729, 286, 500, 380, 458, 498, 291, 645, 13389, 746, 294, 18038, 82, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14003566459373193, "compression_ratio": 1.7755102040816326, "no_speech_prob": 0.07595977932214737}, {"id": 91, "seek": 93856, "start": 946.56, "end": 954.56, "text": " In particular in carry-in the early TCC register is not emulated so you have to be careful when you use that.", "tokens": [50764, 682, 1729, 294, 3985, 12, 259, 264, 2440, 314, 11717, 7280, 307, 406, 846, 6987, 370, 291, 362, 281, 312, 5026, 562, 291, 764, 300, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14003566459373193, "compression_ratio": 1.7755102040816326, "no_speech_prob": 0.07595977932214737}, {"id": 92, "seek": 93856, "start": 954.56, "end": 961.56, "text": " For example you have to when you are doing numbers you have to check that the carry-in is still in time.", "tokens": [51164, 1171, 1365, 291, 362, 281, 562, 291, 366, 884, 3547, 291, 362, 281, 1520, 300, 264, 3985, 12, 259, 307, 920, 294, 565, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14003566459373193, "compression_ratio": 1.7755102040816326, "no_speech_prob": 0.07595977932214737}, {"id": 93, "seek": 93856, "start": 961.56, "end": 967.56, "text": " So if you make the difference it's not going to work always so you have to be careful about that.", "tokens": [51514, 407, 498, 291, 652, 264, 2649, 309, 311, 406, 516, 281, 589, 1009, 370, 291, 362, 281, 312, 5026, 466, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14003566459373193, "compression_ratio": 1.7755102040816326, "no_speech_prob": 0.07595977932214737}, {"id": 94, "seek": 96756, "start": 967.56, "end": 970.56, "text": " That's all I think.", "tokens": [50364, 663, 311, 439, 286, 519, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2987942695617676, "compression_ratio": 0.7037037037037037, "no_speech_prob": 0.0756189301609993}, {"id": 95, "seek": 99756, "start": 997.56, "end": 1004.56, "text": " The question is a question.", "tokens": [50364, 440, 1168, 307, 257, 1168, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3339350071359188, "compression_ratio": 1.5137614678899083, "no_speech_prob": 0.21315039694309235}, {"id": 96, "seek": 99756, "start": 1004.56, "end": 1006.56, "text": " It's a question.", "tokens": [50714, 467, 311, 257, 1168, 13, 50814], "temperature": 0.0, "avg_logprob": -0.3339350071359188, "compression_ratio": 1.5137614678899083, "no_speech_prob": 0.21315039694309235}, {"id": 97, "seek": 99756, "start": 1006.56, "end": 1010.56, "text": " It's a pity I'm not doing...", "tokens": [50814, 467, 311, 257, 21103, 286, 478, 406, 884, 485, 51014], "temperature": 0.0, "avg_logprob": -0.3339350071359188, "compression_ratio": 1.5137614678899083, "no_speech_prob": 0.21315039694309235}, {"id": 98, "seek": 99756, "start": 1010.56, "end": 1016.56, "text": " The question was why I'm not doing communication between the VMs using this implementation.", "tokens": [51014, 440, 1168, 390, 983, 286, 478, 406, 884, 6101, 1296, 264, 18038, 82, 1228, 341, 11420, 13, 51314], "temperature": 0.0, "avg_logprob": -0.3339350071359188, "compression_ratio": 1.5137614678899083, "no_speech_prob": 0.21315039694309235}, {"id": 99, "seek": 101656, "start": 1016.56, "end": 1028.56, "text": " Basically this implementation can only run on a single node but people are using MPI on classes with tens or hundreds or thousands of nodes.", "tokens": [50364, 8537, 341, 11420, 393, 787, 1190, 322, 257, 2167, 9984, 457, 561, 366, 1228, 14146, 40, 322, 5359, 365, 10688, 420, 6779, 420, 5383, 295, 13891, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2875641909512607, "compression_ratio": 1.4565217391304348, "no_speech_prob": 0.09637156873941422}, {"id": 100, "seek": 101656, "start": 1028.56, "end": 1032.56, "text": " Why?", "tokens": [50964, 1545, 30, 51164], "temperature": 0.0, "avg_logprob": -0.2875641909512607, "compression_ratio": 1.4565217391304348, "no_speech_prob": 0.09637156873941422}, {"id": 101, "seek": 101656, "start": 1032.56, "end": 1035.56, "text": " Do you have any plans to extend that?", "tokens": [51164, 1144, 291, 362, 604, 5482, 281, 10101, 300, 30, 51314], "temperature": 0.0, "avg_logprob": -0.2875641909512607, "compression_ratio": 1.4565217391304348, "no_speech_prob": 0.09637156873941422}, {"id": 102, "seek": 101656, "start": 1035.56, "end": 1039.56, "text": " Well I'm thinking about that because it's not the first time that they mention this.", "tokens": [51314, 1042, 286, 478, 1953, 466, 300, 570, 309, 311, 406, 264, 700, 565, 300, 436, 2152, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2875641909512607, "compression_ratio": 1.4565217391304348, "no_speech_prob": 0.09637156873941422}, {"id": 103, "seek": 103956, "start": 1039.56, "end": 1046.56, "text": " Maybe create an interface, I mean use butyonet or butyvisoc to communicate with other instance.", "tokens": [50364, 2704, 1884, 364, 9226, 11, 286, 914, 764, 457, 88, 266, 302, 420, 457, 88, 4938, 905, 281, 7890, 365, 661, 5197, 13, 50714], "temperature": 0.0, "avg_logprob": -0.4185150319879705, "compression_ratio": 1.375, "no_speech_prob": 0.18524394929409027}, {"id": 104, "seek": 103956, "start": 1046.56, "end": 1049.56, "text": " You will have multiple VMs running that.", "tokens": [50714, 509, 486, 362, 3866, 18038, 82, 2614, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.4185150319879705, "compression_ratio": 1.375, "no_speech_prob": 0.18524394929409027}, {"id": 105, "seek": 103956, "start": 1049.56, "end": 1054.56, "text": " But for the moment maybe I will do it soon.", "tokens": [50864, 583, 337, 264, 1623, 1310, 286, 486, 360, 309, 2321, 13, 51114], "temperature": 0.0, "avg_logprob": -0.4185150319879705, "compression_ratio": 1.375, "no_speech_prob": 0.18524394929409027}, {"id": 106, "seek": 103956, "start": 1054.56, "end": 1057.56, "text": " I'm not really worried about that.", "tokens": [51114, 286, 478, 406, 534, 5804, 466, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.4185150319879705, "compression_ratio": 1.375, "no_speech_prob": 0.18524394929409027}, {"id": 107, "seek": 103956, "start": 1057.56, "end": 1062.56, "text": " What questions?", "tokens": [51264, 708, 1651, 30, 51514], "temperature": 0.0, "avg_logprob": -0.4185150319879705, "compression_ratio": 1.375, "no_speech_prob": 0.18524394929409027}, {"id": 108, "seek": 106256, "start": 1062.56, "end": 1073.56, "text": " Which MPI implementation are you implementing?", "tokens": [50364, 3013, 14146, 40, 11420, 366, 291, 18114, 30, 50914], "temperature": 0.0, "avg_logprob": -0.3151414096355438, "compression_ratio": 1.4654088050314464, "no_speech_prob": 0.07666327059268951}, {"id": 109, "seek": 106256, "start": 1073.56, "end": 1079.56, "text": " Because there are different kind of versions of MPI or Pitch or so on.", "tokens": [50914, 1436, 456, 366, 819, 733, 295, 9606, 295, 14146, 40, 420, 430, 1549, 420, 370, 322, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3151414096355438, "compression_ratio": 1.4654088050314464, "no_speech_prob": 0.07666327059268951}, {"id": 110, "seek": 106256, "start": 1079.56, "end": 1083.56, "text": " Which one are you based on?", "tokens": [51214, 3013, 472, 366, 291, 2361, 322, 30, 51414], "temperature": 0.0, "avg_logprob": -0.3151414096355438, "compression_ratio": 1.4654088050314464, "no_speech_prob": 0.07666327059268951}, {"id": 111, "seek": 106256, "start": 1083.56, "end": 1090.56, "text": " I'm not really sure because what I'm doing is just trying to read the semantics of MPI.", "tokens": [51414, 286, 478, 406, 534, 988, 570, 437, 286, 478, 884, 307, 445, 1382, 281, 1401, 264, 4361, 45298, 295, 14146, 40, 13, 51764], "temperature": 0.0, "avg_logprob": -0.3151414096355438, "compression_ratio": 1.4654088050314464, "no_speech_prob": 0.07666327059268951}, {"id": 112, "seek": 109056, "start": 1090.56, "end": 1093.56, "text": " I'm trying to implement it at code.", "tokens": [50364, 286, 478, 1382, 281, 4445, 309, 412, 3089, 13, 50514], "temperature": 0.0, "avg_logprob": -0.24505315780639647, "compression_ratio": 1.3543307086614174, "no_speech_prob": 0.0587460920214653}, {"id": 113, "seek": 109056, "start": 1093.56, "end": 1097.56, "text": " The number of the functions I'm implementing is based on what is the benchmark.", "tokens": [50514, 440, 1230, 295, 264, 6828, 286, 478, 18114, 307, 2361, 322, 437, 307, 264, 18927, 13, 50714], "temperature": 0.0, "avg_logprob": -0.24505315780639647, "compression_ratio": 1.3543307086614174, "no_speech_prob": 0.0587460920214653}, {"id": 114, "seek": 109056, "start": 1097.56, "end": 1100.56, "text": " That's all. This is why I'm doing it. No more than that.", "tokens": [50714, 663, 311, 439, 13, 639, 307, 983, 286, 478, 884, 309, 13, 883, 544, 813, 300, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24505315780639647, "compression_ratio": 1.3543307086614174, "no_speech_prob": 0.0587460920214653}, {"id": 115, "seek": 113056, "start": 1130.56, "end": 1142.56, "text": " Do you have numbers when you increase the number of nodes?", "tokens": [50364, 1144, 291, 362, 3547, 562, 291, 3488, 264, 1230, 295, 13891, 30, 50964], "temperature": 0.0, "avg_logprob": -0.38330850368592795, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.04751156270503998}, {"id": 116, "seek": 113056, "start": 1142.56, "end": 1147.56, "text": " Do you mean if I have numbers when you increment the number of nodes? How that behave?", "tokens": [50964, 1144, 291, 914, 498, 286, 362, 3547, 562, 291, 26200, 264, 1230, 295, 13891, 30, 1012, 300, 15158, 30, 51214], "temperature": 0.0, "avg_logprob": -0.38330850368592795, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.04751156270503998}, {"id": 117, "seek": 113056, "start": 1147.56, "end": 1155.56, "text": " Yeah.", "tokens": [51214, 865, 13, 51614], "temperature": 0.0, "avg_logprob": -0.38330850368592795, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.04751156270503998}, {"id": 118, "seek": 115556, "start": 1155.56, "end": 1158.56, "text": " I'm still doing that number.", "tokens": [50364, 286, 478, 920, 884, 300, 1230, 13, 50514], "temperature": 0.0, "avg_logprob": -0.26283366725129903, "compression_ratio": 1.4962406015037595, "no_speech_prob": 0.07888735830783844}, {"id": 119, "seek": 115556, "start": 1158.56, "end": 1167.56, "text": " The difference is still there between the VM and the Linux implementation.", "tokens": [50514, 440, 2649, 307, 920, 456, 1296, 264, 18038, 293, 264, 18734, 11420, 13, 50964], "temperature": 0.0, "avg_logprob": -0.26283366725129903, "compression_ratio": 1.4962406015037595, "no_speech_prob": 0.07888735830783844}, {"id": 120, "seek": 115556, "start": 1167.56, "end": 1172.56, "text": " Still a difference in the sense that it's faster, let's say.", "tokens": [50964, 8291, 257, 2649, 294, 264, 2020, 300, 309, 311, 4663, 11, 718, 311, 584, 13, 51214], "temperature": 0.0, "avg_logprob": -0.26283366725129903, "compression_ratio": 1.4962406015037595, "no_speech_prob": 0.07888735830783844}, {"id": 121, "seek": 115556, "start": 1172.56, "end": 1175.56, "text": " I'm still doing those numbers too.", "tokens": [51214, 286, 478, 920, 884, 729, 3547, 886, 13, 51364], "temperature": 0.0, "avg_logprob": -0.26283366725129903, "compression_ratio": 1.4962406015037595, "no_speech_prob": 0.07888735830783844}, {"id": 122, "seek": 117556, "start": 1175.56, "end": 1180.56, "text": " There is no point in finding the question.", "tokens": [50364, 821, 307, 572, 935, 294, 5006, 264, 1168, 13, 50614], "temperature": 0.0, "avg_logprob": -0.5016821774569424, "compression_ratio": 1.4109589041095891, "no_speech_prob": 0.053635526448488235}, {"id": 123, "seek": 117556, "start": 1180.56, "end": 1185.56, "text": " I don't know.", "tokens": [50614, 286, 500, 380, 458, 13, 50864], "temperature": 0.0, "avg_logprob": -0.5016821774569424, "compression_ratio": 1.4109589041095891, "no_speech_prob": 0.053635526448488235}, {"id": 124, "seek": 117556, "start": 1185.56, "end": 1191.56, "text": " Do you have a question about the big problems that are happening in the end of the time?", "tokens": [50864, 1144, 291, 362, 257, 1168, 466, 264, 955, 2740, 300, 366, 2737, 294, 264, 917, 295, 264, 565, 30, 51164], "temperature": 0.0, "avg_logprob": -0.5016821774569424, "compression_ratio": 1.4109589041095891, "no_speech_prob": 0.053635526448488235}, {"id": 125, "seek": 117556, "start": 1191.56, "end": 1196.56, "text": " The question is if I understand why we have that difference.", "tokens": [51164, 440, 1168, 307, 498, 286, 1223, 983, 321, 362, 300, 2649, 13, 51414], "temperature": 0.0, "avg_logprob": -0.5016821774569424, "compression_ratio": 1.4109589041095891, "no_speech_prob": 0.053635526448488235}, {"id": 126, "seek": 119656, "start": 1196.56, "end": 1200.56, "text": " I don't know.", "tokens": [50364, 286, 500, 380, 458, 13, 50564], "temperature": 0.0, "avg_logprob": -0.2151731238307723, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.11957547068595886}, {"id": 127, "seek": 119656, "start": 1200.56, "end": 1205.56, "text": " There are a lot of ways to tweak Linux to make it more performance.", "tokens": [50564, 821, 366, 257, 688, 295, 2098, 281, 29879, 18734, 281, 652, 309, 544, 3389, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2151731238307723, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.11957547068595886}, {"id": 128, "seek": 119656, "start": 1205.56, "end": 1207.56, "text": " Maybe I'm lacking that.", "tokens": [50814, 2704, 286, 478, 20889, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2151731238307723, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.11957547068595886}, {"id": 129, "seek": 119656, "start": 1207.56, "end": 1214.56, "text": " If you tweak it, you're going to dramatically drop that difference and the configuration.", "tokens": [50914, 759, 291, 29879, 309, 11, 291, 434, 516, 281, 17548, 3270, 300, 2649, 293, 264, 11694, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2151731238307723, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.11957547068595886}, {"id": 130, "seek": 119656, "start": 1214.56, "end": 1217.56, "text": " I'm not really sure from where it's coming.", "tokens": [51264, 286, 478, 406, 534, 988, 490, 689, 309, 311, 1348, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2151731238307723, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.11957547068595886}, {"id": 131, "seek": 119656, "start": 1217.56, "end": 1223.56, "text": " But I said before, it's still numbers that I'm working on.", "tokens": [51414, 583, 286, 848, 949, 11, 309, 311, 920, 3547, 300, 286, 478, 1364, 322, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2151731238307723, "compression_ratio": 1.4974874371859297, "no_speech_prob": 0.11957547068595886}, {"id": 132, "seek": 122356, "start": 1223.56, "end": 1226.56, "text": " Okay, I think we are running out of time.", "tokens": [50364, 1033, 11, 286, 519, 321, 366, 2614, 484, 295, 565, 13, 50514], "temperature": 0.0, "avg_logprob": -0.4730541441175673, "compression_ratio": 1.2734375, "no_speech_prob": 0.18769122660160065}, {"id": 133, "seek": 122356, "start": 1226.56, "end": 1229.56, "text": " So, Api, thanks again for the talk.", "tokens": [50514, 407, 11, 8723, 72, 11, 3231, 797, 337, 264, 751, 13, 50664], "temperature": 0.0, "avg_logprob": -0.4730541441175673, "compression_ratio": 1.2734375, "no_speech_prob": 0.18769122660160065}, {"id": 134, "seek": 122356, "start": 1229.56, "end": 1234.56, "text": " Thank you.", "tokens": [50664, 1044, 291, 13, 50914], "temperature": 0.0, "avg_logprob": -0.4730541441175673, "compression_ratio": 1.2734375, "no_speech_prob": 0.18769122660160065}, {"id": 135, "seek": 122356, "start": 1234.56, "end": 1237.56, "text": " We have a short break for five minutes.", "tokens": [50914, 492, 362, 257, 2099, 1821, 337, 1732, 2077, 13, 51064], "temperature": 0.0, "avg_logprob": -0.4730541441175673, "compression_ratio": 1.2734375, "no_speech_prob": 0.18769122660160065}, {"id": 136, "seek": 122356, "start": 1237.56, "end": 1240.56, "text": " And after that, we will have talk.", "tokens": [51064, 400, 934, 300, 11, 321, 486, 362, 751, 13, 51214], "temperature": 0.0, "avg_logprob": -0.4730541441175673, "compression_ratio": 1.2734375, "no_speech_prob": 0.18769122660160065}, {"id": 137, "seek": 125356, "start": 1253.56, "end": 1258.56, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50614], "temperature": 0.0, "avg_logprob": -0.6396563450495402, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9970113039016724}], "language": "en"}