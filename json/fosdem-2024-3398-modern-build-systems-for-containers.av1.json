{"text": " Thank you very much. Yeah, so my name is Adrian. I work for Chingard but I'm a technical community advocate or DevRel. I do have a minor issue in that there's a rugby match on right now. I'm Scottish and Scotland is playing Wales right now so somebody scheduled my talk for the exact time of the rugby match. So I'm quite serious if somebody can go and look up the scores and let me know what's happening I would appreciate it. And you're all laughing I'm looking at me like I'm joking but I am actually quite serious. Okay so so this is one of my favourite quotes about containers. Docker is doing to apt what apt did to tar. That's by Brian Cantrell or I guess a lot of you know he works at Oxide now but he used to be at Sun and Giant and has done a whole bunch of stuff with containers and operating systems and so on. But the point is in the old days I guess we used tar balls like 20 years ago people were shipping software around by handing people sending people tar balls and it kind of worked especially like if you you know it's building from source but you typically got into problems with dependencies and he tried to ship a binary well good luck frankly. So then we got package managers and package managers really kind of solved a whole bunch of these problems right they took care of getting you the right dependencies. And I think we kind of take package managers for granted now but they are pretty cool and people still have to put a lot of work into them so if there's any sort of package manager containers out there thank you. But having said that all a package manager really is or all package really is is a tar ball plus some metadata about dependencies right. And then if you take a docker build or docker or a container image well that's really just an app or so on plus some metadata about how to run it. But now we're containing all the dependencies down to the operating system level. So that's kind of what Brian was talking about here. And container images really are just the same right they're just a file system plus some metadata. There's OCI standards on exactly what the file system should look like. It's not too complicated. Some of the metadata does get a bit confused and admittedly it's just a few levels of indirection. But it's not that complicated. Running and maintaining containers okay I will grant you that can get a lot more complicated. But that would be a very different talk to this one. So back in the early days of Docker and so on this is how we built container images. And this is a pretty typical build. And people still do this kind of thing today. And it's okay and it works. Yeah we're just using Golang copying in a source code running go build and set an entry point. There are some problems with this. Primarily you've got a big image here. I ran a build very similar to this one yesterday and it was 892 megabytes. It's also got CVE's. A Golang image is based on build tools which is based on Debian. And that base image the scanners at least. Scanners being like Trivys, Sneak, Grite, things like that. They complain that it does have CVE's. With or not those are at Trivys. Well I'll let you figure out. There's also poor reproducibility. I've not helped things here by writing from Golang. You could put a digest there and that would specify a specific image. But at the minute each time you run this you're going to get a very different build out. So one thing we can do that makes things a lot better is use a multi stage build. So here we've got practically the same build as this one at the top. But what we're doing is taking the artifact out and copying it on top of a production image. Now for the production image in this case I've used this to this image. This one has a chain guard static image. You could also totally use the Google disk to this image and you'll get pretty much the same thing. So what we're doing here, the other thing I had to do was set C go enabled to zero which tells go to produce a static binary in most cases. There are a couple of gotchas. But we copy that binary and copy onto this static image. So why can't I copy it onto a scratch image which is completely empty? Well typically you'll find that a lot of Linux applications do require a few things to be available. For example CA certificates we're talking to TLS to other web services. What often applications expect things like slash temp, slash home to be available and that's basically what static and the disk list images give you. They give you sort of bare minimum to run the typical statically compiled application. And if you do that you get a much, much smaller image. Like I did that yesterday that resulted in an 8.5 megabyte image as compared to the 892 megabyte image that's based on top of Golang. So that's an enormous saving. And that's not good just for security, it's also good just for transferring it about and reproducibility and so on. This is still not completely reproducible because Docker build tends not to be completely reproducible. There is ongoing work on that. There was a great talk at DockerCon last year on exactly that subject. There is an issue with disk to list. So in this example that we saw we used a static image which is for statically compiled binaries. So if you have a project that's run in say Rust, Go or something like that where you can produce a static binary that's perfect. But you can't use that for something like Java, Ruby or Node. In that case you're going to need a different base image that has the runtime you need in it at least. Now Google disk to list project does have a few of these. I believe they've got a Python one and a Java one at least. A Ching we've got a whole bunch more. But yeah, even if you find a base image you may still find that you need one or two more dependencies. Which brings you to the point well can I create my own sort of disk to list base images with absolute minimum in them. And I should like make the point that these images are so minimal they don't have like shells or package managers in them. They really are stripped down to just what you need at runtime. A quick aside there is a project called KO. We're cool, I'm not quite sure of which. And this is like a really easy way to build a go application into a disk to list image. So instead of an go build you're literally running a code build and it builds your container image. And you don't even need Docker. It's just because like all it's really doing is producing a file system there's no Docker involved. Yeah, so that's really trivial to use. There's no configuration literally. It's literally just code build. And yeah, you might be thinking well hang on how do you make these disk to list images if you're not using Docker build and so on. And can you make your own disk to list images. And the answer is you totally can. It's not that simple though. If you look at how the Google container tools disk list images are made they actually use Bazel which as some of you probably wear is the open source version of Blaze which is the internal Google build system which is understandably quite complex. But basically you know Google container tools disk list is debian with almost everything stripped out. A chain guard we did things a different way. We've got app code which builds our container images and you have to pair that with an operating system or package repository such as Wolfie which is our one or Alpine also works. You can't mix it though like Wolfie is based on G-Lib C and Alpine is based against Muzzle. So you can't mix packages at all. Okay, so we'll see if this works. I did it. Here is the repository for the go example for building with Bazel. So if you want to create a Docker image with Bazel this is the simplest example for creating one's go. And there's basically two you know there's like a go program here. We won't bother looking at that. But we can look at I think two interesting ones are module and build. So we have module here. I think somewhere we'll see we specify the base image. So we're building on top of a distrust base image and we're specifying the platforms. This bit's kind of interesting. If you use rules OCI in Bazel to build a container image you do have to specify a base image. Just kind of a bit annoying because when you're using something like Bazel you really want to specify everything down to the ingredients. Part of the whole point of Bazel is to completely specify where everything comes from but we have to pull in an image here. And there's no reason you couldn't create everything completely from scratch. Because again, container image is just a file system really. Okay, let's see if I can go back. And the other file is a build file. And okay there's not too much in it but there's a bit. And this is literally just to build that single very simple go application. So there is when you decide to use Bazel you suddenly got to bring in a whole bunch of stuff. But it does buy you a lot. There's a reason people like Google use it. There's excellent reproducibility. You run it twice. You get exactly the same binary artifact out. It is fast. There's a lot of levels of caching going on here. I think the main reason people use it though is for like provenance and so on. So provenance and reproducibility are sort of essential to your organization. That's when you want to be looking at something like Bazel. Yet you can build totally minimal images with it but as we saw there it is a bit of a beast. You're bringing in a lot of stuff just to build a simple go application in this case. So it's something you want to do for larger, more complicated systems. Probably not for like a small open source project. Yeah and there's the other issue about having to bring in a base image if you're using something like rules OCI. I think you can chain images though. And if you compare this to what we do at ChainGuard this is like how we build the Wolfie base image. This is the entire app code for the Wolfie base image. If you run this you'll get something very similar to the Wolfie base image you can download. So what we're saying is first thing is we got to point it at the package repository. In this case I'm pointing at the Wolfie package repository. Could also use Alpine. And then I'm saying what packages I want to install in my image. So I'm saying we need C certificates and Wolfie base. And if you do that you end up with an image that's basically got busybox and a few other things in it and not a lot else. And glibs too. Yeah then you set some metadata on your image things like entry point cmd and so on. And that's all you can do in app code. Right there's none of this like in Docker where you have run commands and you run arbitrary commands. You also can't add outside files in. Everything has to be in an APK package from a repository somewhere. That's all you can do. But because of that it's a lot simpler. Hopefully that example was simpler to understand than for example the Basel build. It's declarative. You're saying what you do and you can't do all this run imperative stuff. It's reproducible. I've done it twice. I will get the same result with the assumption that these packages haven't changed in the meantime. You can specify the exact version of packages as well and there is support for getting like a lock file out with exact versions of packages that you use. You do tend to get very low CV images from using this if you use Wolfie just because we're really aggressive at keeping the Wolfie packages up to date and they tend to have no CV use. The other thing is it composes well with Docker files. So like I said all you can do in app code is add in APKs. So if you want to add your own application in well you can use something like melange which is what we use internally to build APKs or you can take an existing you can build a base image of app code and then use it like Docker or something to copy in your application on top of it which is basically exactly what you're doing when you're using a multi-stage build with the train guard static image. Drawbacks I guess you are dependent on Alpine or Wolfie so if you want a package that's not in there you're going to have to create it yourself. What you totally can do you can use APK tools or you can use melange which is the train guard version of APK tools. As an aside there is also roles app code for Bazel which does kind of help with that issue I mentioned before about being able to build images in Bazel completely from scratch. So you can also check that out if you're interested. Oh yeah what's the score? That was unexpected thank you. Who scored? No don't worry. Yes I want to mention canonical chiseled containers so I spent a little while looking at this. There are resources you can't totally download it and play with it but there's not that much out there to be honest. So this is the canonical version of this chiseled containers. They do seem to have produced minimal low CV images and they do look good but it seems to be a very limited number of images they've created with this chisel mechanism. I could only find 3.net images and a GRE image. You can create your own images but it does seem a little bit complex. Basically the app is the idea of slices or the idea that you can, I guess that's where the name chisel comes from so you take an apt package and your chisel bits out that you're interested in or you're not interested in. It does feel a bit like the app packages, the problem is app packages are large as opposed to with APK and other package managers where you have the idea of sub packages. So we haven't had this problem in Molfi because we just defined sub packages if you want a package that just has libraries for example. I don't know enough about app to say if that would have been a reasonable pathway to do it but this chisel mechanism does look very manual. You end up having to specify paths etc. The other thing is it's very much part of the canonical ecosystem. You start seeing things like snapcraft and charms and so on and very much ties into all that. Build packs, I didn't spend too long looking at this one. A lot of you are probably aware of build packs from the old Heroku days which is where it all started and then Pivotal did their version and then they merged them together again and now we have cloud native build packs that build OCI images. The main selling point seems to be that it's easy to use and sort of automatic. So your build packs, well look at your project, they'll see you've got a Python requirements dot text or you've got a node package dot jason and try to automatically configure a build pack to build on top of that so you automatically get a container image out. From playing with it, it didn't seem to produce very small images. Maybe that was me holding it wrong. I don't think there's any reason it shouldn't produce small images. It just seems to be, that's all based on this idea of stacks and the stacks by default aren't that small. It does definitely feel to me about one size fits all. But yeah, have a look if you like. One thing I really do like that came out recently is Buildkit and well Buildkit didn't come out recently, but Dagger came out recently. So Buildkit is the sort of engine behind Docker build and Buildkit is a lot more powerful than it appears from looking at Docker file. There's a whole bunch of stuff you can do here about dependencies and resolution and caching that's really quite powerful. And I think when they built Buildkit, they were hoping that there'd be much more front ends created on top of Buildkit rather than just Docker file. But that's not really happened until now with Dagger. And Dagger really tries to take advantage of the power of Buildkit. I would say Dagger is much more designed for CI CD. So the selling point of Dagger is to solve this problem that you have in CI CD when I'm sure you all had like GitHub actions where your action isn't working. So you like chicken, try this and then try three, try four and you end up with try 26 of commits. Yeah, you've all been there? Yeah, it's a pain. And that's kind of what Dagger is trying to solve. The idea being that you can run Dagger locally and it'll build the same as it does locally as in a GitHub action or Circle CI, et cetera. I don't think this example is very fair to Dagger because it's actually really large and powerful, but I want to give you some flavor at least. So in this example, we're building a container, we're giving it a base image, we're telling it like a directory from the host to include. In this case, we're just including the MD files, markdown files, sitting the work directory, then telling it to execute LS and I put in the, I put from LS. So that's kind of what Dagger workflows look like. We're just half built a container, it's also done something with it. To me, it kind of feels similar in some ways to Bazel, but a lot simpler, right? Because now we have a build system that will build an entire sort of organization, my project if you like. I'm sure it does not offer the same providence and so on guarantees. What I really mean is just that it's designed for a team to use as opposed to a single person. There is also a bunch of plugins. So the Dagger working on something called the Daggerverse and that includes plugins, including one for AppCo. However, having played with it, you're actually better off with a plugin for APKs. So Dagger can effectively recreate AppCo because you can create a file system or image from scratch and then just add an APKs using the plugin. In some ways, it will be better than AppCo because you'll get caching and rebuilds really much faster. So there's quite a strong argument for using Dagger there instead of AppCo. Next, how am I doing for time? Okay, we should be okay. So you don't need to understand all of Nix or even install it to play with Nix to build Docker images or container images. There's effectively two approaches. You can use packages to Docker tools or you can use flakes and copy them into an image. And I should say I have definitely not understood very much of Nix and I didn't install it. Here is packages.docker tools. So again, it's somewhat similar to Bazel or something like that. We're specifying the name of the image. We're saying we want the reddest package inside it and that it should be available at slash bin and mountain of volume, et cetera. Now, you should be able to build that. I tried building it on my Mac and it told me it wouldn't build because it required KVM. I don't want to understand if that's, if there's something I could work around that. Now, I believe we'll create something that's fully reproducible. So I run twice and it will give me a bit wise identical result. You should be able to create minimal images. I'm not 100% sure in that one. It takes a full programming language and you do sort of need to buy into the whole Nix ecosystem, but it does seem quite a powerful solution. Nix Flakes. So this is entirely stolen from Mitchell Hashimoto's blog, but it was really quite interesting. So the idea with Nix is when you install an application, you also get all of the dependencies or particular version of all its dependencies along with it so that it always works wherever you put it. So there's no reason that you can't just take the whole file system tree and put it in a container and it should just work and it does. So the idea is to create a flake and copy it into an image using a Docker file and that's a pretty simple method and it does work on my Mac. The whole sort of method is written up by Mitchell Hashimoto at this blog post. I could show you, but by the time, it is a little bit frustrating because now we put Docker into the mix, it's reduced the level of reproducibility. I think you should be able to take minimal images, but there is an issue in that it creates a slightly weird file system. The app or the entry point is a shell script which includes all the dependencies. So I guess you get forced to include bash or something. I'm not quite sure that's always the case or there's a workaround for that. I really need to play more with it. But you do end up with a weird file system. So the problem with this solution is if you give it to somebody else and they try and debug it, they might well hit problems because you do a file system and you've got app and you've got next door. You don't have your usual Etsy and BIN directors. Okay, so to wrap up, what would I recommend? If you want a big organization wide solution, if you need provenance, reproducibility and so on, you can totally do that. But do be aware it can be a bit of a beast. I really like Dagger. I hope it does well. It is a new solution. So do be aware that it's still being built out. Yeah, it certainly seems a good solution if you feel a pain in CI CD and I think everybody does. If you have a smaller project, the first thing I would genuinely look at is like ecosystem specific build tooling. So like co for go for example. Because that's really simple and you're pretty sure it's going to work and be low config. There is jib for Java. I've not tried that one, but that would probably be the first thing I would try if I was doing Java again. Otherwise, there's nothing wrong with doing a multi-stage Docker build with this full of images. I totally would recommend looking at this full of images though to get a fully minimal production image. App Co, yeah, if you want to, if you need a bit more flexibility and creating your sort of base image, please go and have a look at App Co. And then finally the next stuff, yeah, that could well be a solution totally if you understand Nix and you've bought into that ecosystem. Okay, what's the score? Pretty good there, thank you. All right. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 20.52, "text": " Thank you very much. Yeah, so my name is Adrian. I work for Chingard but I'm a technical community", "tokens": [50364, 1044, 291, 588, 709, 13, 865, 11, 370, 452, 1315, 307, 31746, 13, 286, 589, 337, 47818, 515, 457, 286, 478, 257, 6191, 1768, 51390], "temperature": 0.0, "avg_logprob": -0.4797720227922712, "compression_ratio": 1.053763440860215, "no_speech_prob": 0.6771049499511719}, {"id": 1, "seek": 2052, "start": 20.52, "end": 30.6, "text": " advocate or DevRel. I do have a minor issue in that there's a rugby match on right now.", "tokens": [50364, 14608, 420, 9096, 49029, 13, 286, 360, 362, 257, 6696, 2734, 294, 300, 456, 311, 257, 43895, 2995, 322, 558, 586, 13, 50868], "temperature": 0.0, "avg_logprob": -0.211663870975889, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.8000698685646057}, {"id": 2, "seek": 2052, "start": 30.6, "end": 35.36, "text": " I'm Scottish and Scotland is playing Wales right now so somebody scheduled my talk for", "tokens": [50868, 286, 478, 13777, 293, 11180, 307, 2433, 16495, 558, 586, 370, 2618, 15678, 452, 751, 337, 51106], "temperature": 0.0, "avg_logprob": -0.211663870975889, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.8000698685646057}, {"id": 3, "seek": 2052, "start": 35.36, "end": 39.760000000000005, "text": " the exact time of the rugby match. So I'm quite serious if somebody can go and look", "tokens": [51106, 264, 1900, 565, 295, 264, 43895, 2995, 13, 407, 286, 478, 1596, 3156, 498, 2618, 393, 352, 293, 574, 51326], "temperature": 0.0, "avg_logprob": -0.211663870975889, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.8000698685646057}, {"id": 4, "seek": 2052, "start": 39.760000000000005, "end": 44.879999999999995, "text": " up the scores and let me know what's happening I would appreciate it. And you're all laughing", "tokens": [51326, 493, 264, 13444, 293, 718, 385, 458, 437, 311, 2737, 286, 576, 4449, 309, 13, 400, 291, 434, 439, 5059, 51582], "temperature": 0.0, "avg_logprob": -0.211663870975889, "compression_ratio": 1.543859649122807, "no_speech_prob": 0.8000698685646057}, {"id": 5, "seek": 4488, "start": 44.88, "end": 56.080000000000005, "text": " I'm looking at me like I'm joking but I am actually quite serious. Okay so so this is", "tokens": [50364, 286, 478, 1237, 412, 385, 411, 286, 478, 17396, 457, 286, 669, 767, 1596, 3156, 13, 1033, 370, 370, 341, 307, 50924], "temperature": 0.0, "avg_logprob": -0.35668953696450034, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.30061087012290955}, {"id": 6, "seek": 4488, "start": 56.080000000000005, "end": 64.80000000000001, "text": " one of my favourite quotes about containers. Docker is doing to apt what apt did to tar.", "tokens": [50924, 472, 295, 452, 10696, 19963, 466, 17089, 13, 33772, 307, 884, 281, 29427, 437, 29427, 630, 281, 3112, 13, 51360], "temperature": 0.0, "avg_logprob": -0.35668953696450034, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.30061087012290955}, {"id": 7, "seek": 4488, "start": 64.80000000000001, "end": 69.32000000000001, "text": " That's by Brian Cantrell or I guess a lot of you know he works at Oxide now but he used", "tokens": [51360, 663, 311, 538, 10765, 26697, 19771, 420, 286, 2041, 257, 688, 295, 291, 458, 415, 1985, 412, 16489, 482, 586, 457, 415, 1143, 51586], "temperature": 0.0, "avg_logprob": -0.35668953696450034, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.30061087012290955}, {"id": 8, "seek": 4488, "start": 69.32000000000001, "end": 74.4, "text": " to be at Sun and Giant and has done a whole bunch of stuff with containers and operating", "tokens": [51586, 281, 312, 412, 6163, 293, 29391, 293, 575, 1096, 257, 1379, 3840, 295, 1507, 365, 17089, 293, 7447, 51840], "temperature": 0.0, "avg_logprob": -0.35668953696450034, "compression_ratio": 1.5394736842105263, "no_speech_prob": 0.30061087012290955}, {"id": 9, "seek": 7440, "start": 74.4, "end": 84.44000000000001, "text": " systems and so on. But the point is in the old days I guess we used tar balls like 20", "tokens": [50364, 3652, 293, 370, 322, 13, 583, 264, 935, 307, 294, 264, 1331, 1708, 286, 2041, 321, 1143, 3112, 9803, 411, 945, 50866], "temperature": 0.0, "avg_logprob": -0.230740993837767, "compression_ratio": 1.6018099547511313, "no_speech_prob": 0.1544601172208786}, {"id": 10, "seek": 7440, "start": 84.44000000000001, "end": 88.52000000000001, "text": " years ago people were shipping software around by handing people sending people tar balls", "tokens": [50866, 924, 2057, 561, 645, 14122, 4722, 926, 538, 34774, 561, 7750, 561, 3112, 9803, 51070], "temperature": 0.0, "avg_logprob": -0.230740993837767, "compression_ratio": 1.6018099547511313, "no_speech_prob": 0.1544601172208786}, {"id": 11, "seek": 7440, "start": 88.52000000000001, "end": 93.80000000000001, "text": " and it kind of worked especially like if you you know it's building from source but you", "tokens": [51070, 293, 309, 733, 295, 2732, 2318, 411, 498, 291, 291, 458, 309, 311, 2390, 490, 4009, 457, 291, 51334], "temperature": 0.0, "avg_logprob": -0.230740993837767, "compression_ratio": 1.6018099547511313, "no_speech_prob": 0.1544601172208786}, {"id": 12, "seek": 7440, "start": 93.80000000000001, "end": 98.88000000000001, "text": " typically got into problems with dependencies and he tried to ship a binary well good luck", "tokens": [51334, 5850, 658, 666, 2740, 365, 36606, 293, 415, 3031, 281, 5374, 257, 17434, 731, 665, 3668, 51588], "temperature": 0.0, "avg_logprob": -0.230740993837767, "compression_ratio": 1.6018099547511313, "no_speech_prob": 0.1544601172208786}, {"id": 13, "seek": 9888, "start": 98.88, "end": 106.0, "text": " frankly. So then we got package managers and package managers really kind of solved a whole", "tokens": [50364, 11939, 13, 407, 550, 321, 658, 7372, 14084, 293, 7372, 14084, 534, 733, 295, 13041, 257, 1379, 50720], "temperature": 0.0, "avg_logprob": -0.19698359966278076, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.5432918667793274}, {"id": 14, "seek": 9888, "start": 106.0, "end": 111.8, "text": " bunch of these problems right they took care of getting you the right dependencies. And", "tokens": [50720, 3840, 295, 613, 2740, 558, 436, 1890, 1127, 295, 1242, 291, 264, 558, 36606, 13, 400, 51010], "temperature": 0.0, "avg_logprob": -0.19698359966278076, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.5432918667793274}, {"id": 15, "seek": 9888, "start": 111.8, "end": 117.6, "text": " I think we kind of take package managers for granted now but they are pretty cool and people", "tokens": [51010, 286, 519, 321, 733, 295, 747, 7372, 14084, 337, 12344, 586, 457, 436, 366, 1238, 1627, 293, 561, 51300], "temperature": 0.0, "avg_logprob": -0.19698359966278076, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.5432918667793274}, {"id": 16, "seek": 9888, "start": 117.6, "end": 122.44, "text": " still have to put a lot of work into them so if there's any sort of package manager", "tokens": [51300, 920, 362, 281, 829, 257, 688, 295, 589, 666, 552, 370, 498, 456, 311, 604, 1333, 295, 7372, 6598, 51542], "temperature": 0.0, "avg_logprob": -0.19698359966278076, "compression_ratio": 1.7198067632850242, "no_speech_prob": 0.5432918667793274}, {"id": 17, "seek": 12244, "start": 122.8, "end": 133.32, "text": " containers out there thank you. But having said that all a package manager really is or all", "tokens": [50382, 17089, 484, 456, 1309, 291, 13, 583, 1419, 848, 300, 439, 257, 7372, 6598, 534, 307, 420, 439, 50908], "temperature": 0.0, "avg_logprob": -0.2797225829093687, "compression_ratio": 1.5783132530120483, "no_speech_prob": 0.6762765049934387}, {"id": 18, "seek": 12244, "start": 133.32, "end": 142.52, "text": " package really is is a tar ball plus some metadata about dependencies right. And then", "tokens": [50908, 7372, 534, 307, 307, 257, 3112, 2594, 1804, 512, 26603, 466, 36606, 558, 13, 400, 550, 51368], "temperature": 0.0, "avg_logprob": -0.2797225829093687, "compression_ratio": 1.5783132530120483, "no_speech_prob": 0.6762765049934387}, {"id": 19, "seek": 12244, "start": 142.52, "end": 150.52, "text": " if you take a docker build or docker or a container image well that's really just an", "tokens": [51368, 498, 291, 747, 257, 360, 9178, 1322, 420, 360, 9178, 420, 257, 10129, 3256, 731, 300, 311, 534, 445, 364, 51768], "temperature": 0.0, "avg_logprob": -0.2797225829093687, "compression_ratio": 1.5783132530120483, "no_speech_prob": 0.6762765049934387}, {"id": 20, "seek": 15052, "start": 150.60000000000002, "end": 155.16, "text": " app or so on plus some metadata about how to run it. But now we're containing all the", "tokens": [50368, 724, 420, 370, 322, 1804, 512, 26603, 466, 577, 281, 1190, 309, 13, 583, 586, 321, 434, 19273, 439, 264, 50596], "temperature": 0.0, "avg_logprob": -0.1682755888962164, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.023014193400740623}, {"id": 21, "seek": 15052, "start": 155.16, "end": 160.56, "text": " dependencies down to the operating system level. So that's kind of what Brian was talking", "tokens": [50596, 36606, 760, 281, 264, 7447, 1185, 1496, 13, 407, 300, 311, 733, 295, 437, 10765, 390, 1417, 50866], "temperature": 0.0, "avg_logprob": -0.1682755888962164, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.023014193400740623}, {"id": 22, "seek": 15052, "start": 160.56, "end": 171.56, "text": " about here. And container images really are just the same right they're just a file system", "tokens": [50866, 466, 510, 13, 400, 10129, 5267, 534, 366, 445, 264, 912, 558, 436, 434, 445, 257, 3991, 1185, 51416], "temperature": 0.0, "avg_logprob": -0.1682755888962164, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.023014193400740623}, {"id": 23, "seek": 15052, "start": 172.04000000000002, "end": 177.84, "text": " plus some metadata. There's OCI standards on exactly what the file system should look", "tokens": [51440, 1804, 512, 26603, 13, 821, 311, 422, 25240, 7787, 322, 2293, 437, 264, 3991, 1185, 820, 574, 51730], "temperature": 0.0, "avg_logprob": -0.1682755888962164, "compression_ratio": 1.614678899082569, "no_speech_prob": 0.023014193400740623}, {"id": 24, "seek": 17784, "start": 177.92000000000002, "end": 183.88, "text": " like. It's not too complicated. Some of the metadata does get a bit confused and admittedly", "tokens": [50368, 411, 13, 467, 311, 406, 886, 6179, 13, 2188, 295, 264, 26603, 775, 483, 257, 857, 9019, 293, 14920, 356, 50666], "temperature": 0.0, "avg_logprob": -0.19964880353949044, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.047699011862277985}, {"id": 25, "seek": 17784, "start": 183.88, "end": 190.88, "text": " it's just a few levels of indirection. But it's not that complicated. Running and maintaining", "tokens": [50666, 309, 311, 445, 257, 1326, 4358, 295, 1016, 621, 882, 13, 583, 309, 311, 406, 300, 6179, 13, 28136, 293, 14916, 51016], "temperature": 0.0, "avg_logprob": -0.19964880353949044, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.047699011862277985}, {"id": 26, "seek": 17784, "start": 191.56, "end": 196.2, "text": " containers okay I will grant you that can get a lot more complicated. But that would", "tokens": [51050, 17089, 1392, 286, 486, 6386, 291, 300, 393, 483, 257, 688, 544, 6179, 13, 583, 300, 576, 51282], "temperature": 0.0, "avg_logprob": -0.19964880353949044, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.047699011862277985}, {"id": 27, "seek": 17784, "start": 196.2, "end": 203.2, "text": " be a very different talk to this one. So back in the early days of Docker and so on this", "tokens": [51282, 312, 257, 588, 819, 751, 281, 341, 472, 13, 407, 646, 294, 264, 2440, 1708, 295, 33772, 293, 370, 322, 341, 51632], "temperature": 0.0, "avg_logprob": -0.19964880353949044, "compression_ratio": 1.6318181818181818, "no_speech_prob": 0.047699011862277985}, {"id": 28, "seek": 20320, "start": 204.2, "end": 211.2, "text": " is how we built container images. And this is a pretty typical build. And people still", "tokens": [50414, 307, 577, 321, 3094, 10129, 5267, 13, 400, 341, 307, 257, 1238, 7476, 1322, 13, 400, 561, 920, 50764], "temperature": 0.0, "avg_logprob": -0.24817134009467232, "compression_ratio": 1.5739910313901346, "no_speech_prob": 0.06353038549423218}, {"id": 29, "seek": 20320, "start": 211.2, "end": 217.2, "text": " do this kind of thing today. And it's okay and it works. Yeah we're just using Golang", "tokens": [50764, 360, 341, 733, 295, 551, 965, 13, 400, 309, 311, 1392, 293, 309, 1985, 13, 865, 321, 434, 445, 1228, 36319, 656, 51064], "temperature": 0.0, "avg_logprob": -0.24817134009467232, "compression_ratio": 1.5739910313901346, "no_speech_prob": 0.06353038549423218}, {"id": 30, "seek": 20320, "start": 217.2, "end": 224.2, "text": " copying in a source code running go build and set an entry point. There are some problems", "tokens": [51064, 27976, 294, 257, 4009, 3089, 2614, 352, 1322, 293, 992, 364, 8729, 935, 13, 821, 366, 512, 2740, 51414], "temperature": 0.0, "avg_logprob": -0.24817134009467232, "compression_ratio": 1.5739910313901346, "no_speech_prob": 0.06353038549423218}, {"id": 31, "seek": 20320, "start": 226.04, "end": 232.12, "text": " with this. Primarily you've got a big image here. I ran a build very similar to this one", "tokens": [51506, 365, 341, 13, 19671, 3289, 291, 600, 658, 257, 955, 3256, 510, 13, 286, 5872, 257, 1322, 588, 2531, 281, 341, 472, 51810], "temperature": 0.0, "avg_logprob": -0.24817134009467232, "compression_ratio": 1.5739910313901346, "no_speech_prob": 0.06353038549423218}, {"id": 32, "seek": 23212, "start": 232.16, "end": 239.16, "text": " yesterday and it was 892 megabytes. It's also got CVE's. A Golang image is based on build", "tokens": [50366, 5186, 293, 309, 390, 1649, 21821, 10816, 24538, 13, 467, 311, 611, 658, 383, 7540, 311, 13, 316, 36319, 656, 3256, 307, 2361, 322, 1322, 50716], "temperature": 0.0, "avg_logprob": -0.3339995861053467, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.013984148390591145}, {"id": 33, "seek": 23212, "start": 244.28, "end": 251.28, "text": " tools which is based on Debian. And that base image the scanners at least. Scanners being", "tokens": [50972, 3873, 597, 307, 2361, 322, 1346, 20196, 13, 400, 300, 3096, 3256, 264, 795, 25792, 412, 1935, 13, 2747, 25792, 885, 51322], "temperature": 0.0, "avg_logprob": -0.3339995861053467, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.013984148390591145}, {"id": 34, "seek": 23212, "start": 251.84, "end": 258.84000000000003, "text": " like Trivys, Sneak, Grite, things like that. They complain that it does have CVE's. With", "tokens": [51350, 411, 10931, 85, 749, 11, 41336, 514, 11, 2606, 642, 11, 721, 411, 300, 13, 814, 11024, 300, 309, 775, 362, 383, 7540, 311, 13, 2022, 51700], "temperature": 0.0, "avg_logprob": -0.3339995861053467, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.013984148390591145}, {"id": 35, "seek": 25884, "start": 259.2, "end": 266.2, "text": " or not those are at Trivys. Well I'll let you figure out. There's also poor reproducibility.", "tokens": [50382, 420, 406, 729, 366, 412, 10931, 85, 749, 13, 1042, 286, 603, 718, 291, 2573, 484, 13, 821, 311, 611, 4716, 11408, 537, 39802, 13, 50732], "temperature": 0.0, "avg_logprob": -0.23034286499023438, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.009282262995839119}, {"id": 36, "seek": 25884, "start": 267.84, "end": 274.84, "text": " I've not helped things here by writing from Golang. You could put a digest there and that", "tokens": [50814, 286, 600, 406, 4254, 721, 510, 538, 3579, 490, 36319, 656, 13, 509, 727, 829, 257, 13884, 456, 293, 300, 51164], "temperature": 0.0, "avg_logprob": -0.23034286499023438, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.009282262995839119}, {"id": 37, "seek": 25884, "start": 278.91999999999996, "end": 282.76, "text": " would specify a specific image. But at the minute each time you run this you're going", "tokens": [51368, 576, 16500, 257, 2685, 3256, 13, 583, 412, 264, 3456, 1184, 565, 291, 1190, 341, 291, 434, 516, 51560], "temperature": 0.0, "avg_logprob": -0.23034286499023438, "compression_ratio": 1.4408602150537635, "no_speech_prob": 0.009282262995839119}, {"id": 38, "seek": 28276, "start": 282.8, "end": 289.8, "text": " to get a very different build out. So one thing we can do that makes things a lot better", "tokens": [50366, 281, 483, 257, 588, 819, 1322, 484, 13, 407, 472, 551, 321, 393, 360, 300, 1669, 721, 257, 688, 1101, 50716], "temperature": 0.0, "avg_logprob": -0.2385649894600484, "compression_ratio": 1.5449101796407185, "no_speech_prob": 0.13880525529384613}, {"id": 39, "seek": 28276, "start": 294.96, "end": 301.96, "text": " is use a multi stage build. So here we've got practically the same build as this one", "tokens": [50974, 307, 764, 257, 4825, 3233, 1322, 13, 407, 510, 321, 600, 658, 15667, 264, 912, 1322, 382, 341, 472, 51324], "temperature": 0.0, "avg_logprob": -0.2385649894600484, "compression_ratio": 1.5449101796407185, "no_speech_prob": 0.13880525529384613}, {"id": 40, "seek": 28276, "start": 303.4, "end": 308.48, "text": " at the top. But what we're doing is taking the artifact out and copying it on top of", "tokens": [51396, 412, 264, 1192, 13, 583, 437, 321, 434, 884, 307, 1940, 264, 34806, 484, 293, 27976, 309, 322, 1192, 295, 51650], "temperature": 0.0, "avg_logprob": -0.2385649894600484, "compression_ratio": 1.5449101796407185, "no_speech_prob": 0.13880525529384613}, {"id": 41, "seek": 30848, "start": 308.48, "end": 313.8, "text": " a production image. Now for the production image in this case I've used this to this", "tokens": [50364, 257, 4265, 3256, 13, 823, 337, 264, 4265, 3256, 294, 341, 1389, 286, 600, 1143, 341, 281, 341, 50630], "temperature": 0.0, "avg_logprob": -0.2921523172920997, "compression_ratio": 1.7098039215686274, "no_speech_prob": 0.1290218085050583}, {"id": 42, "seek": 30848, "start": 313.8, "end": 319.16, "text": " image. This one has a chain guard static image. You could also totally use the Google", "tokens": [50630, 3256, 13, 639, 472, 575, 257, 5021, 6290, 13437, 3256, 13, 509, 727, 611, 3879, 764, 264, 3329, 50898], "temperature": 0.0, "avg_logprob": -0.2921523172920997, "compression_ratio": 1.7098039215686274, "no_speech_prob": 0.1290218085050583}, {"id": 43, "seek": 30848, "start": 319.16, "end": 325.16, "text": " disk to this image and you'll get pretty much the same thing. So what we're doing here,", "tokens": [50898, 12355, 281, 341, 3256, 293, 291, 603, 483, 1238, 709, 264, 912, 551, 13, 407, 437, 321, 434, 884, 510, 11, 51198], "temperature": 0.0, "avg_logprob": -0.2921523172920997, "compression_ratio": 1.7098039215686274, "no_speech_prob": 0.1290218085050583}, {"id": 44, "seek": 30848, "start": 325.16, "end": 330.64000000000004, "text": " the other thing I had to do was set C go enabled to zero which tells go to produce a static", "tokens": [51198, 264, 661, 551, 286, 632, 281, 360, 390, 992, 383, 352, 15172, 281, 4018, 597, 5112, 352, 281, 5258, 257, 13437, 51472], "temperature": 0.0, "avg_logprob": -0.2921523172920997, "compression_ratio": 1.7098039215686274, "no_speech_prob": 0.1290218085050583}, {"id": 45, "seek": 30848, "start": 330.64000000000004, "end": 337.64000000000004, "text": " binary in most cases. There are a couple of gotchas. But we copy that binary and copy", "tokens": [51472, 17434, 294, 881, 3331, 13, 821, 366, 257, 1916, 295, 658, 41299, 13, 583, 321, 5055, 300, 17434, 293, 5055, 51822], "temperature": 0.0, "avg_logprob": -0.2921523172920997, "compression_ratio": 1.7098039215686274, "no_speech_prob": 0.1290218085050583}, {"id": 46, "seek": 33848, "start": 338.48, "end": 343.0, "text": " onto this static image. So why can't I copy it onto a scratch image which is completely", "tokens": [50364, 3911, 341, 13437, 3256, 13, 407, 983, 393, 380, 286, 5055, 309, 3911, 257, 8459, 3256, 597, 307, 2584, 50590], "temperature": 0.0, "avg_logprob": -0.27247849106788635, "compression_ratio": 1.390625, "no_speech_prob": 0.03920288011431694}, {"id": 47, "seek": 33848, "start": 343.0, "end": 350.0, "text": " empty? Well typically you'll find that a lot of Linux applications do require a few things", "tokens": [50590, 6707, 30, 1042, 5850, 291, 603, 915, 300, 257, 688, 295, 18734, 5821, 360, 3651, 257, 1326, 721, 50940], "temperature": 0.0, "avg_logprob": -0.27247849106788635, "compression_ratio": 1.390625, "no_speech_prob": 0.03920288011431694}, {"id": 48, "seek": 33848, "start": 352.24, "end": 359.24, "text": " to be available. For example CA certificates we're talking to TLS to other web services.", "tokens": [51052, 281, 312, 2435, 13, 1171, 1365, 22852, 32941, 321, 434, 1417, 281, 314, 19198, 281, 661, 3670, 3328, 13, 51402], "temperature": 0.0, "avg_logprob": -0.27247849106788635, "compression_ratio": 1.390625, "no_speech_prob": 0.03920288011431694}, {"id": 49, "seek": 35924, "start": 359.96000000000004, "end": 366.96000000000004, "text": " What often applications expect things like slash temp, slash home to be available and", "tokens": [50400, 708, 2049, 5821, 2066, 721, 411, 17330, 18274, 11, 17330, 1280, 281, 312, 2435, 293, 50750], "temperature": 0.0, "avg_logprob": -0.28257611902748664, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.2288942039012909}, {"id": 50, "seek": 35924, "start": 367.56, "end": 372.2, "text": " that's basically what static and the disk list images give you. They give you sort of bare", "tokens": [50780, 300, 311, 1936, 437, 13437, 293, 264, 12355, 1329, 5267, 976, 291, 13, 814, 976, 291, 1333, 295, 6949, 51012], "temperature": 0.0, "avg_logprob": -0.28257611902748664, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.2288942039012909}, {"id": 51, "seek": 35924, "start": 372.2, "end": 379.2, "text": " minimum to run the typical statically compiled application. And if you do that you get a", "tokens": [51012, 7285, 281, 1190, 264, 7476, 2219, 984, 36548, 3861, 13, 400, 498, 291, 360, 300, 291, 483, 257, 51362], "temperature": 0.0, "avg_logprob": -0.28257611902748664, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.2288942039012909}, {"id": 52, "seek": 35924, "start": 381.56, "end": 387.6, "text": " much, much smaller image. Like I did that yesterday that resulted in an 8.5 megabyte", "tokens": [51480, 709, 11, 709, 4356, 3256, 13, 1743, 286, 630, 300, 5186, 300, 18753, 294, 364, 1649, 13, 20, 10816, 34529, 51782], "temperature": 0.0, "avg_logprob": -0.28257611902748664, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.2288942039012909}, {"id": 53, "seek": 38760, "start": 387.6, "end": 394.6, "text": " image as compared to the 892 megabyte image that's based on top of Golang. So that's an", "tokens": [50364, 3256, 382, 5347, 281, 264, 1649, 21821, 10816, 34529, 3256, 300, 311, 2361, 322, 1192, 295, 36319, 656, 13, 407, 300, 311, 364, 50714], "temperature": 0.0, "avg_logprob": -0.1802376217312283, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.028449416160583496}, {"id": 54, "seek": 38760, "start": 395.52000000000004, "end": 400.84000000000003, "text": " enormous saving. And that's not good just for security, it's also good just for transferring", "tokens": [50760, 11322, 6816, 13, 400, 300, 311, 406, 665, 445, 337, 3825, 11, 309, 311, 611, 665, 445, 337, 31437, 51026], "temperature": 0.0, "avg_logprob": -0.1802376217312283, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.028449416160583496}, {"id": 55, "seek": 38760, "start": 400.84000000000003, "end": 406.52000000000004, "text": " it about and reproducibility and so on. This is still not completely reproducible because", "tokens": [51026, 309, 466, 293, 11408, 537, 39802, 293, 370, 322, 13, 639, 307, 920, 406, 2584, 11408, 32128, 570, 51310], "temperature": 0.0, "avg_logprob": -0.1802376217312283, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.028449416160583496}, {"id": 56, "seek": 38760, "start": 406.52000000000004, "end": 411.68, "text": " Docker build tends not to be completely reproducible. There is ongoing work on that. There was a", "tokens": [51310, 33772, 1322, 12258, 406, 281, 312, 2584, 11408, 32128, 13, 821, 307, 10452, 589, 322, 300, 13, 821, 390, 257, 51568], "temperature": 0.0, "avg_logprob": -0.1802376217312283, "compression_ratio": 1.6757990867579908, "no_speech_prob": 0.028449416160583496}, {"id": 57, "seek": 41168, "start": 411.68, "end": 418.68, "text": " great talk at DockerCon last year on exactly that subject. There is an issue with disk", "tokens": [50364, 869, 751, 412, 33772, 9838, 1036, 1064, 322, 2293, 300, 3983, 13, 821, 307, 364, 2734, 365, 12355, 50714], "temperature": 0.0, "avg_logprob": -0.1652593700163955, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.3093145191669464}, {"id": 58, "seek": 41168, "start": 418.96, "end": 424.6, "text": " to list. So in this example that we saw we used a static image which is for statically", "tokens": [50728, 281, 1329, 13, 407, 294, 341, 1365, 300, 321, 1866, 321, 1143, 257, 13437, 3256, 597, 307, 337, 2219, 984, 51010], "temperature": 0.0, "avg_logprob": -0.1652593700163955, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.3093145191669464}, {"id": 59, "seek": 41168, "start": 424.6, "end": 430.4, "text": " compiled binaries. So if you have a project that's run in say Rust, Go or something like", "tokens": [51010, 36548, 5171, 4889, 13, 407, 498, 291, 362, 257, 1716, 300, 311, 1190, 294, 584, 34952, 11, 1037, 420, 746, 411, 51300], "temperature": 0.0, "avg_logprob": -0.1652593700163955, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.3093145191669464}, {"id": 60, "seek": 41168, "start": 430.4, "end": 434.88, "text": " that where you can produce a static binary that's perfect. But you can't use that for", "tokens": [51300, 300, 689, 291, 393, 5258, 257, 13437, 17434, 300, 311, 2176, 13, 583, 291, 393, 380, 764, 300, 337, 51524], "temperature": 0.0, "avg_logprob": -0.1652593700163955, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.3093145191669464}, {"id": 61, "seek": 41168, "start": 434.88, "end": 440.08, "text": " something like Java, Ruby or Node. In that case you're going to need a different base", "tokens": [51524, 746, 411, 10745, 11, 19907, 420, 38640, 13, 682, 300, 1389, 291, 434, 516, 281, 643, 257, 819, 3096, 51784], "temperature": 0.0, "avg_logprob": -0.1652593700163955, "compression_ratio": 1.6628352490421456, "no_speech_prob": 0.3093145191669464}, {"id": 62, "seek": 44008, "start": 440.15999999999997, "end": 447.15999999999997, "text": " image that has the runtime you need in it at least. Now Google disk to list project does", "tokens": [50368, 3256, 300, 575, 264, 34474, 291, 643, 294, 309, 412, 1935, 13, 823, 3329, 12355, 281, 1329, 1716, 775, 50718], "temperature": 0.0, "avg_logprob": -0.2375768846081149, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.036046214401721954}, {"id": 63, "seek": 44008, "start": 447.84, "end": 452.59999999999997, "text": " have a few of these. I believe they've got a Python one and a Java one at least. A Ching", "tokens": [50752, 362, 257, 1326, 295, 613, 13, 286, 1697, 436, 600, 658, 257, 15329, 472, 293, 257, 10745, 472, 412, 1935, 13, 316, 47818, 50990], "temperature": 0.0, "avg_logprob": -0.2375768846081149, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.036046214401721954}, {"id": 64, "seek": 44008, "start": 452.59999999999997, "end": 459.59999999999997, "text": " we've got a whole bunch more. But yeah, even if you find a base image you may still find", "tokens": [50990, 321, 600, 658, 257, 1379, 3840, 544, 13, 583, 1338, 11, 754, 498, 291, 915, 257, 3096, 3256, 291, 815, 920, 915, 51340], "temperature": 0.0, "avg_logprob": -0.2375768846081149, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.036046214401721954}, {"id": 65, "seek": 44008, "start": 461.12, "end": 466.08, "text": " that you need one or two more dependencies. Which brings you to the point well can I create", "tokens": [51416, 300, 291, 643, 472, 420, 732, 544, 36606, 13, 3013, 5607, 291, 281, 264, 935, 731, 393, 286, 1884, 51664], "temperature": 0.0, "avg_logprob": -0.2375768846081149, "compression_ratio": 1.5701754385964912, "no_speech_prob": 0.036046214401721954}, {"id": 66, "seek": 46608, "start": 466.08, "end": 471.4, "text": " my own sort of disk to list base images with absolute minimum in them. And I should like", "tokens": [50364, 452, 1065, 1333, 295, 12355, 281, 1329, 3096, 5267, 365, 8236, 7285, 294, 552, 13, 400, 286, 820, 411, 50630], "temperature": 0.0, "avg_logprob": -0.2348205342012293, "compression_ratio": 1.5267857142857142, "no_speech_prob": 0.03726278617978096}, {"id": 67, "seek": 46608, "start": 471.4, "end": 476.71999999999997, "text": " make the point that these images are so minimal they don't have like shells or package managers", "tokens": [50630, 652, 264, 935, 300, 613, 5267, 366, 370, 13206, 436, 500, 380, 362, 411, 22523, 420, 7372, 14084, 50896], "temperature": 0.0, "avg_logprob": -0.2348205342012293, "compression_ratio": 1.5267857142857142, "no_speech_prob": 0.03726278617978096}, {"id": 68, "seek": 46608, "start": 476.71999999999997, "end": 482.52, "text": " in them. They really are stripped down to just what you need at runtime.", "tokens": [50896, 294, 552, 13, 814, 534, 366, 33221, 760, 281, 445, 437, 291, 643, 412, 34474, 13, 51186], "temperature": 0.0, "avg_logprob": -0.2348205342012293, "compression_ratio": 1.5267857142857142, "no_speech_prob": 0.03726278617978096}, {"id": 69, "seek": 46608, "start": 482.52, "end": 489.52, "text": " A quick aside there is a project called KO. We're cool, I'm not quite sure of which.", "tokens": [51186, 316, 1702, 7359, 456, 307, 257, 1716, 1219, 34245, 13, 492, 434, 1627, 11, 286, 478, 406, 1596, 988, 295, 597, 13, 51536], "temperature": 0.0, "avg_logprob": -0.2348205342012293, "compression_ratio": 1.5267857142857142, "no_speech_prob": 0.03726278617978096}, {"id": 70, "seek": 48952, "start": 490.08, "end": 497.08, "text": " And this is like a really easy way to build a go application into a disk to list image.", "tokens": [50392, 400, 341, 307, 411, 257, 534, 1858, 636, 281, 1322, 257, 352, 3861, 666, 257, 12355, 281, 1329, 3256, 13, 50742], "temperature": 0.0, "avg_logprob": -0.3129221159836342, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.061873167753219604}, {"id": 71, "seek": 48952, "start": 499.0, "end": 504.2, "text": " So instead of an go build you're literally running a code build and it builds your container", "tokens": [50838, 407, 2602, 295, 364, 352, 1322, 291, 434, 3736, 2614, 257, 3089, 1322, 293, 309, 15182, 428, 10129, 51098], "temperature": 0.0, "avg_logprob": -0.3129221159836342, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.061873167753219604}, {"id": 72, "seek": 48952, "start": 504.2, "end": 507.68, "text": " image. And you don't even need Docker. It's just because like all it's really doing is", "tokens": [51098, 3256, 13, 400, 291, 500, 380, 754, 643, 33772, 13, 467, 311, 445, 570, 411, 439, 309, 311, 534, 884, 307, 51272], "temperature": 0.0, "avg_logprob": -0.3129221159836342, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.061873167753219604}, {"id": 73, "seek": 48952, "start": 507.68, "end": 514.68, "text": " producing a file system there's no Docker involved. Yeah, so that's really trivial to", "tokens": [51272, 10501, 257, 3991, 1185, 456, 311, 572, 33772, 3288, 13, 865, 11, 370, 300, 311, 534, 26703, 281, 51622], "temperature": 0.0, "avg_logprob": -0.3129221159836342, "compression_ratio": 1.59009009009009, "no_speech_prob": 0.061873167753219604}, {"id": 74, "seek": 51468, "start": 514.8399999999999, "end": 521.8399999999999, "text": " use. There's no configuration literally. It's literally just code build. And yeah, you might", "tokens": [50372, 764, 13, 821, 311, 572, 11694, 3736, 13, 467, 311, 3736, 445, 3089, 1322, 13, 400, 1338, 11, 291, 1062, 50722], "temperature": 0.0, "avg_logprob": -0.21298325856526693, "compression_ratio": 1.6589861751152073, "no_speech_prob": 0.05276712402701378}, {"id": 75, "seek": 51468, "start": 523.2399999999999, "end": 526.9599999999999, "text": " be thinking well hang on how do you make these disk to list images if you're not using Docker", "tokens": [50792, 312, 1953, 731, 3967, 322, 577, 360, 291, 652, 613, 12355, 281, 1329, 5267, 498, 291, 434, 406, 1228, 33772, 50978], "temperature": 0.0, "avg_logprob": -0.21298325856526693, "compression_ratio": 1.6589861751152073, "no_speech_prob": 0.05276712402701378}, {"id": 76, "seek": 51468, "start": 526.9599999999999, "end": 532.9599999999999, "text": " build and so on. And can you make your own disk to list images. And the answer is you", "tokens": [50978, 1322, 293, 370, 322, 13, 400, 393, 291, 652, 428, 1065, 12355, 281, 1329, 5267, 13, 400, 264, 1867, 307, 291, 51278], "temperature": 0.0, "avg_logprob": -0.21298325856526693, "compression_ratio": 1.6589861751152073, "no_speech_prob": 0.05276712402701378}, {"id": 77, "seek": 51468, "start": 532.9599999999999, "end": 539.9599999999999, "text": " totally can. It's not that simple though. If you look at how the Google container tools", "tokens": [51278, 3879, 393, 13, 467, 311, 406, 300, 2199, 1673, 13, 759, 291, 574, 412, 577, 264, 3329, 10129, 3873, 51628], "temperature": 0.0, "avg_logprob": -0.21298325856526693, "compression_ratio": 1.6589861751152073, "no_speech_prob": 0.05276712402701378}, {"id": 78, "seek": 53996, "start": 540.08, "end": 545.8000000000001, "text": " disk list images are made they actually use Bazel which as some of you probably wear is", "tokens": [50370, 12355, 1329, 5267, 366, 1027, 436, 767, 764, 42220, 338, 597, 382, 512, 295, 291, 1391, 3728, 307, 50656], "temperature": 0.0, "avg_logprob": -0.3265153266288139, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.11793222278356552}, {"id": 79, "seek": 53996, "start": 545.8000000000001, "end": 552.8000000000001, "text": " the open source version of Blaze which is the internal Google build system which is", "tokens": [50656, 264, 1269, 4009, 3037, 295, 49894, 597, 307, 264, 6920, 3329, 1322, 1185, 597, 307, 51006], "temperature": 0.0, "avg_logprob": -0.3265153266288139, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.11793222278356552}, {"id": 80, "seek": 53996, "start": 552.8000000000001, "end": 558.72, "text": " understandably quite complex. But basically you know Google container tools disk list", "tokens": [51006, 1223, 1188, 1596, 3997, 13, 583, 1936, 291, 458, 3329, 10129, 3873, 12355, 1329, 51302], "temperature": 0.0, "avg_logprob": -0.3265153266288139, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.11793222278356552}, {"id": 81, "seek": 53996, "start": 558.72, "end": 565.72, "text": " is debian with almost everything stripped out. A chain guard we did things a different", "tokens": [51302, 307, 3001, 952, 365, 1920, 1203, 33221, 484, 13, 316, 5021, 6290, 321, 630, 721, 257, 819, 51652], "temperature": 0.0, "avg_logprob": -0.3265153266288139, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.11793222278356552}, {"id": 82, "seek": 56572, "start": 566.4, "end": 572.4, "text": " way. We've got app code which builds our container images and you have to pair that with an operating", "tokens": [50398, 636, 13, 492, 600, 658, 724, 3089, 597, 15182, 527, 10129, 5267, 293, 291, 362, 281, 6119, 300, 365, 364, 7447, 50698], "temperature": 0.0, "avg_logprob": -0.27187846405337557, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.023697203025221825}, {"id": 83, "seek": 56572, "start": 572.4, "end": 579.4, "text": " system or package repository such as Wolfie which is our one or Alpine also works. You", "tokens": [50698, 1185, 420, 7372, 25841, 1270, 382, 16634, 414, 597, 307, 527, 472, 420, 967, 40412, 611, 1985, 13, 509, 51048], "temperature": 0.0, "avg_logprob": -0.27187846405337557, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.023697203025221825}, {"id": 84, "seek": 56572, "start": 580.64, "end": 586.08, "text": " can't mix it though like Wolfie is based on G-Lib C and Alpine is based against Muzzle.", "tokens": [51110, 393, 380, 2890, 309, 1673, 411, 16634, 414, 307, 2361, 322, 460, 12, 43, 897, 383, 293, 967, 40412, 307, 2361, 1970, 376, 16740, 306, 13, 51382], "temperature": 0.0, "avg_logprob": -0.27187846405337557, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.023697203025221825}, {"id": 85, "seek": 56572, "start": 586.08, "end": 593.08, "text": " So you can't mix packages at all. Okay, so we'll see if this works. I did it. Here", "tokens": [51382, 407, 291, 393, 380, 2890, 17401, 412, 439, 13, 1033, 11, 370, 321, 603, 536, 498, 341, 1985, 13, 286, 630, 309, 13, 1692, 51732], "temperature": 0.0, "avg_logprob": -0.27187846405337557, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.023697203025221825}, {"id": 86, "seek": 59572, "start": 595.84, "end": 602.84, "text": " is the repository for the go example for building with Bazel. So if you want to create a Docker", "tokens": [50370, 307, 264, 25841, 337, 264, 352, 1365, 337, 2390, 365, 42220, 338, 13, 407, 498, 291, 528, 281, 1884, 257, 33772, 50720], "temperature": 0.0, "avg_logprob": -0.21060007640293665, "compression_ratio": 1.5536723163841808, "no_speech_prob": 0.04309910163283348}, {"id": 87, "seek": 59572, "start": 608.12, "end": 613.9200000000001, "text": " image with Bazel this is the simplest example for creating one's go. And there's basically", "tokens": [50984, 3256, 365, 42220, 338, 341, 307, 264, 22811, 1365, 337, 4084, 472, 311, 352, 13, 400, 456, 311, 1936, 51274], "temperature": 0.0, "avg_logprob": -0.21060007640293665, "compression_ratio": 1.5536723163841808, "no_speech_prob": 0.04309910163283348}, {"id": 88, "seek": 59572, "start": 613.9200000000001, "end": 619.8000000000001, "text": " two you know there's like a go program here. We won't bother looking at that. But we can", "tokens": [51274, 732, 291, 458, 456, 311, 411, 257, 352, 1461, 510, 13, 492, 1582, 380, 8677, 1237, 412, 300, 13, 583, 321, 393, 51568], "temperature": 0.0, "avg_logprob": -0.21060007640293665, "compression_ratio": 1.5536723163841808, "no_speech_prob": 0.04309910163283348}, {"id": 89, "seek": 61980, "start": 619.88, "end": 626.88, "text": " look at I think two interesting ones are module and build. So we have module here. I think", "tokens": [50368, 574, 412, 286, 519, 732, 1880, 2306, 366, 10088, 293, 1322, 13, 407, 321, 362, 10088, 510, 13, 286, 519, 50718], "temperature": 0.0, "avg_logprob": -0.23544245180876358, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.0777672827243805}, {"id": 90, "seek": 61980, "start": 631.0, "end": 635.28, "text": " somewhere we'll see we specify the base image. So we're building on top of a distrust base", "tokens": [50924, 4079, 321, 603, 536, 321, 16500, 264, 3096, 3256, 13, 407, 321, 434, 2390, 322, 1192, 295, 257, 1483, 22326, 3096, 51138], "temperature": 0.0, "avg_logprob": -0.23544245180876358, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.0777672827243805}, {"id": 91, "seek": 61980, "start": 635.28, "end": 640.4399999999999, "text": " image and we're specifying the platforms. This bit's kind of interesting. If you use", "tokens": [51138, 3256, 293, 321, 434, 1608, 5489, 264, 9473, 13, 639, 857, 311, 733, 295, 1880, 13, 759, 291, 764, 51396], "temperature": 0.0, "avg_logprob": -0.23544245180876358, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.0777672827243805}, {"id": 92, "seek": 61980, "start": 640.4399999999999, "end": 647.4399999999999, "text": " rules OCI in Bazel to build a container image you do have to specify a base image. Just kind", "tokens": [51396, 4474, 422, 25240, 294, 42220, 338, 281, 1322, 257, 10129, 3256, 291, 360, 362, 281, 16500, 257, 3096, 3256, 13, 1449, 733, 51746], "temperature": 0.0, "avg_logprob": -0.23544245180876358, "compression_ratio": 1.7177033492822966, "no_speech_prob": 0.0777672827243805}, {"id": 93, "seek": 64744, "start": 648.44, "end": 652.44, "text": " of a bit annoying because when you're using something like Bazel you really want to specify", "tokens": [50414, 295, 257, 857, 11304, 570, 562, 291, 434, 1228, 746, 411, 42220, 338, 291, 534, 528, 281, 16500, 50614], "temperature": 0.0, "avg_logprob": -0.22062555144104776, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.026435118168592453}, {"id": 94, "seek": 64744, "start": 652.44, "end": 658.44, "text": " everything down to the ingredients. Part of the whole point of Bazel is to completely", "tokens": [50614, 1203, 760, 281, 264, 6952, 13, 4100, 295, 264, 1379, 935, 295, 42220, 338, 307, 281, 2584, 50914], "temperature": 0.0, "avg_logprob": -0.22062555144104776, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.026435118168592453}, {"id": 95, "seek": 64744, "start": 658.44, "end": 663.44, "text": " specify where everything comes from but we have to pull in an image here. And there's", "tokens": [50914, 16500, 689, 1203, 1487, 490, 457, 321, 362, 281, 2235, 294, 364, 3256, 510, 13, 400, 456, 311, 51164], "temperature": 0.0, "avg_logprob": -0.22062555144104776, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.026435118168592453}, {"id": 96, "seek": 64744, "start": 663.44, "end": 670.44, "text": " no reason you couldn't create everything completely from scratch. Because again, container image", "tokens": [51164, 572, 1778, 291, 2809, 380, 1884, 1203, 2584, 490, 8459, 13, 1436, 797, 11, 10129, 3256, 51514], "temperature": 0.0, "avg_logprob": -0.22062555144104776, "compression_ratio": 1.6744186046511629, "no_speech_prob": 0.026435118168592453}, {"id": 97, "seek": 67044, "start": 671.44, "end": 678.44, "text": " is just a file system really. Okay, let's see if I can go back. And the other file is", "tokens": [50414, 307, 445, 257, 3991, 1185, 534, 13, 1033, 11, 718, 311, 536, 498, 286, 393, 352, 646, 13, 400, 264, 661, 3991, 307, 50764], "temperature": 0.0, "avg_logprob": -0.17335147124070388, "compression_ratio": 1.3858267716535433, "no_speech_prob": 0.023805351927876472}, {"id": 98, "seek": 67044, "start": 685.32, "end": 692.32, "text": " a build file. And okay there's not too much in it but there's a bit. And this is literally", "tokens": [51108, 257, 1322, 3991, 13, 400, 1392, 456, 311, 406, 886, 709, 294, 309, 457, 456, 311, 257, 857, 13, 400, 341, 307, 3736, 51458], "temperature": 0.0, "avg_logprob": -0.17335147124070388, "compression_ratio": 1.3858267716535433, "no_speech_prob": 0.023805351927876472}, {"id": 99, "seek": 69232, "start": 693.32, "end": 700.32, "text": " just to build that single very simple go application. So there is when you decide to use Bazel you", "tokens": [50414, 445, 281, 1322, 300, 2167, 588, 2199, 352, 3861, 13, 407, 456, 307, 562, 291, 4536, 281, 764, 42220, 338, 291, 50764], "temperature": 0.0, "avg_logprob": -0.19835482703314888, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.14562954008579254}, {"id": 100, "seek": 69232, "start": 702.6800000000001, "end": 709.6800000000001, "text": " suddenly got to bring in a whole bunch of stuff. But it does buy you a lot. There's a reason", "tokens": [50882, 5800, 658, 281, 1565, 294, 257, 1379, 3840, 295, 1507, 13, 583, 309, 775, 2256, 291, 257, 688, 13, 821, 311, 257, 1778, 51232], "temperature": 0.0, "avg_logprob": -0.19835482703314888, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.14562954008579254}, {"id": 101, "seek": 69232, "start": 714.6, "end": 718.5200000000001, "text": " people like Google use it. There's excellent reproducibility. You run it twice. You get", "tokens": [51478, 561, 411, 3329, 764, 309, 13, 821, 311, 7103, 11408, 537, 39802, 13, 509, 1190, 309, 6091, 13, 509, 483, 51674], "temperature": 0.0, "avg_logprob": -0.19835482703314888, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.14562954008579254}, {"id": 102, "seek": 71852, "start": 718.56, "end": 724.56, "text": " exactly the same binary artifact out. It is fast. There's a lot of levels of caching", "tokens": [50366, 2293, 264, 912, 17434, 34806, 484, 13, 467, 307, 2370, 13, 821, 311, 257, 688, 295, 4358, 295, 269, 2834, 50666], "temperature": 0.0, "avg_logprob": -0.13995008210878115, "compression_ratio": 1.6564885496183206, "no_speech_prob": 0.050928838551044464}, {"id": 103, "seek": 71852, "start": 724.56, "end": 729.1999999999999, "text": " going on here. I think the main reason people use it though is for like provenance and so", "tokens": [50666, 516, 322, 510, 13, 286, 519, 264, 2135, 1778, 561, 764, 309, 1673, 307, 337, 411, 12785, 719, 293, 370, 50898], "temperature": 0.0, "avg_logprob": -0.13995008210878115, "compression_ratio": 1.6564885496183206, "no_speech_prob": 0.050928838551044464}, {"id": 104, "seek": 71852, "start": 729.1999999999999, "end": 734.0, "text": " on. So provenance and reproducibility are sort of essential to your organization. That's", "tokens": [50898, 322, 13, 407, 12785, 719, 293, 11408, 537, 39802, 366, 1333, 295, 7115, 281, 428, 4475, 13, 663, 311, 51138], "temperature": 0.0, "avg_logprob": -0.13995008210878115, "compression_ratio": 1.6564885496183206, "no_speech_prob": 0.050928838551044464}, {"id": 105, "seek": 71852, "start": 734.0, "end": 739.12, "text": " when you want to be looking at something like Bazel. Yet you can build totally minimal", "tokens": [51138, 562, 291, 528, 281, 312, 1237, 412, 746, 411, 42220, 338, 13, 10890, 291, 393, 1322, 3879, 13206, 51394], "temperature": 0.0, "avg_logprob": -0.13995008210878115, "compression_ratio": 1.6564885496183206, "no_speech_prob": 0.050928838551044464}, {"id": 106, "seek": 71852, "start": 739.12, "end": 745.1999999999999, "text": " images with it but as we saw there it is a bit of a beast. You're bringing in a lot", "tokens": [51394, 5267, 365, 309, 457, 382, 321, 1866, 456, 309, 307, 257, 857, 295, 257, 13464, 13, 509, 434, 5062, 294, 257, 688, 51698], "temperature": 0.0, "avg_logprob": -0.13995008210878115, "compression_ratio": 1.6564885496183206, "no_speech_prob": 0.050928838551044464}, {"id": 107, "seek": 74520, "start": 745.24, "end": 750.08, "text": " of stuff just to build a simple go application in this case. So it's something you want to", "tokens": [50366, 295, 1507, 445, 281, 1322, 257, 2199, 352, 3861, 294, 341, 1389, 13, 407, 309, 311, 746, 291, 528, 281, 50608], "temperature": 0.0, "avg_logprob": -0.2266173873628889, "compression_ratio": 1.6200716845878136, "no_speech_prob": 0.05496508255600929}, {"id": 108, "seek": 74520, "start": 750.08, "end": 756.08, "text": " do for larger, more complicated systems. Probably not for like a small open source project.", "tokens": [50608, 360, 337, 4833, 11, 544, 6179, 3652, 13, 9210, 406, 337, 411, 257, 1359, 1269, 4009, 1716, 13, 50908], "temperature": 0.0, "avg_logprob": -0.2266173873628889, "compression_ratio": 1.6200716845878136, "no_speech_prob": 0.05496508255600929}, {"id": 109, "seek": 74520, "start": 756.08, "end": 760.5200000000001, "text": " Yeah and there's the other issue about having to bring in a base image if you're using something", "tokens": [50908, 865, 293, 456, 311, 264, 661, 2734, 466, 1419, 281, 1565, 294, 257, 3096, 3256, 498, 291, 434, 1228, 746, 51130], "temperature": 0.0, "avg_logprob": -0.2266173873628889, "compression_ratio": 1.6200716845878136, "no_speech_prob": 0.05496508255600929}, {"id": 110, "seek": 74520, "start": 760.5200000000001, "end": 767.5200000000001, "text": " like rules OCI. I think you can chain images though. And if you compare this to what we", "tokens": [51130, 411, 4474, 422, 25240, 13, 286, 519, 291, 393, 5021, 5267, 1673, 13, 400, 498, 291, 6794, 341, 281, 437, 321, 51480], "temperature": 0.0, "avg_logprob": -0.2266173873628889, "compression_ratio": 1.6200716845878136, "no_speech_prob": 0.05496508255600929}, {"id": 111, "seek": 74520, "start": 768.88, "end": 774.2800000000001, "text": " do at ChainGuard this is like how we build the Wolfie base image. This is the entire", "tokens": [51548, 360, 412, 33252, 38, 16981, 341, 307, 411, 577, 321, 1322, 264, 16634, 414, 3096, 3256, 13, 639, 307, 264, 2302, 51818], "temperature": 0.0, "avg_logprob": -0.2266173873628889, "compression_ratio": 1.6200716845878136, "no_speech_prob": 0.05496508255600929}, {"id": 112, "seek": 77428, "start": 774.3199999999999, "end": 778.8, "text": " app code for the Wolfie base image. If you run this you'll get something very similar", "tokens": [50366, 724, 3089, 337, 264, 16634, 414, 3096, 3256, 13, 759, 291, 1190, 341, 291, 603, 483, 746, 588, 2531, 50590], "temperature": 0.0, "avg_logprob": -0.1743064846908837, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.024005917832255363}, {"id": 113, "seek": 77428, "start": 778.8, "end": 785.8, "text": " to the Wolfie base image you can download. So what we're saying is first thing is we", "tokens": [50590, 281, 264, 16634, 414, 3096, 3256, 291, 393, 5484, 13, 407, 437, 321, 434, 1566, 307, 700, 551, 307, 321, 50940], "temperature": 0.0, "avg_logprob": -0.1743064846908837, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.024005917832255363}, {"id": 114, "seek": 77428, "start": 785.88, "end": 790.24, "text": " got to point it at the package repository. In this case I'm pointing at the Wolfie package", "tokens": [50944, 658, 281, 935, 309, 412, 264, 7372, 25841, 13, 682, 341, 1389, 286, 478, 12166, 412, 264, 16634, 414, 7372, 51162], "temperature": 0.0, "avg_logprob": -0.1743064846908837, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.024005917832255363}, {"id": 115, "seek": 77428, "start": 790.24, "end": 795.88, "text": " repository. Could also use Alpine. And then I'm saying what packages I want to install", "tokens": [51162, 25841, 13, 7497, 611, 764, 967, 40412, 13, 400, 550, 286, 478, 1566, 437, 17401, 286, 528, 281, 3625, 51444], "temperature": 0.0, "avg_logprob": -0.1743064846908837, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.024005917832255363}, {"id": 116, "seek": 77428, "start": 795.88, "end": 801.64, "text": " in my image. So I'm saying we need C certificates and Wolfie base. And if you do that you end", "tokens": [51444, 294, 452, 3256, 13, 407, 286, 478, 1566, 321, 643, 383, 32941, 293, 16634, 414, 3096, 13, 400, 498, 291, 360, 300, 291, 917, 51732], "temperature": 0.0, "avg_logprob": -0.1743064846908837, "compression_ratio": 1.8493723849372385, "no_speech_prob": 0.024005917832255363}, {"id": 117, "seek": 80164, "start": 801.68, "end": 806.04, "text": " up with an image that's basically got busybox and a few other things in it and not a lot", "tokens": [50366, 493, 365, 364, 3256, 300, 311, 1936, 658, 5856, 4995, 293, 257, 1326, 661, 721, 294, 309, 293, 406, 257, 688, 50584], "temperature": 0.0, "avg_logprob": -0.2632799866378948, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.04489629715681076}, {"id": 118, "seek": 80164, "start": 806.04, "end": 813.04, "text": " else. And glibs too. Yeah then you set some metadata on your image things like entry point", "tokens": [50584, 1646, 13, 400, 290, 38270, 82, 886, 13, 865, 550, 291, 992, 512, 26603, 322, 428, 3256, 721, 411, 8729, 935, 50934], "temperature": 0.0, "avg_logprob": -0.2632799866378948, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.04489629715681076}, {"id": 119, "seek": 80164, "start": 814.76, "end": 820.56, "text": " cmd and so on. And that's all you can do in app code. Right there's none of this like", "tokens": [51020, 14668, 67, 293, 370, 322, 13, 400, 300, 311, 439, 291, 393, 360, 294, 724, 3089, 13, 1779, 456, 311, 6022, 295, 341, 411, 51310], "temperature": 0.0, "avg_logprob": -0.2632799866378948, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.04489629715681076}, {"id": 120, "seek": 80164, "start": 820.56, "end": 825.3199999999999, "text": " in Docker where you have run commands and you run arbitrary commands. You also can't", "tokens": [51310, 294, 33772, 689, 291, 362, 1190, 16901, 293, 291, 1190, 23211, 16901, 13, 509, 611, 393, 380, 51548], "temperature": 0.0, "avg_logprob": -0.2632799866378948, "compression_ratio": 1.6129032258064515, "no_speech_prob": 0.04489629715681076}, {"id": 121, "seek": 82532, "start": 825.32, "end": 832.32, "text": " add outside files in. Everything has to be in an APK package from a repository somewhere.", "tokens": [50364, 909, 2380, 7098, 294, 13, 5471, 575, 281, 312, 294, 364, 5372, 42, 7372, 490, 257, 25841, 4079, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21996934678819444, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.3725827932357788}, {"id": 122, "seek": 82532, "start": 834.36, "end": 841.36, "text": " That's all you can do. But because of that it's a lot simpler. Hopefully that example", "tokens": [50816, 663, 311, 439, 291, 393, 360, 13, 583, 570, 295, 300, 309, 311, 257, 688, 18587, 13, 10429, 300, 1365, 51166], "temperature": 0.0, "avg_logprob": -0.21996934678819444, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.3725827932357788}, {"id": 123, "seek": 82532, "start": 842.36, "end": 849.36, "text": " was simpler to understand than for example the Basel build. It's declarative. You're", "tokens": [51216, 390, 18587, 281, 1223, 813, 337, 1365, 264, 5859, 338, 1322, 13, 467, 311, 16694, 1166, 13, 509, 434, 51566], "temperature": 0.0, "avg_logprob": -0.21996934678819444, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.3725827932357788}, {"id": 124, "seek": 82532, "start": 849.8800000000001, "end": 855.08, "text": " saying what you do and you can't do all this run imperative stuff. It's reproducible. I've", "tokens": [51592, 1566, 437, 291, 360, 293, 291, 393, 380, 360, 439, 341, 1190, 32490, 1507, 13, 467, 311, 11408, 32128, 13, 286, 600, 51852], "temperature": 0.0, "avg_logprob": -0.21996934678819444, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.3725827932357788}, {"id": 125, "seek": 85508, "start": 855.1600000000001, "end": 862.1600000000001, "text": " done it twice. I will get the same result with the assumption that these packages haven't", "tokens": [50368, 1096, 309, 6091, 13, 286, 486, 483, 264, 912, 1874, 365, 264, 15302, 300, 613, 17401, 2378, 380, 50718], "temperature": 0.0, "avg_logprob": -0.23641521174733232, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.0019781356677412987}, {"id": 126, "seek": 85508, "start": 862.1600000000001, "end": 869.1600000000001, "text": " changed in the meantime. You can specify the exact version of packages as well and there", "tokens": [50718, 3105, 294, 264, 14991, 13, 509, 393, 16500, 264, 1900, 3037, 295, 17401, 382, 731, 293, 456, 51068], "temperature": 0.0, "avg_logprob": -0.23641521174733232, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.0019781356677412987}, {"id": 127, "seek": 85508, "start": 870.24, "end": 876.24, "text": " is support for getting like a lock file out with exact versions of packages that you use.", "tokens": [51122, 307, 1406, 337, 1242, 411, 257, 4017, 3991, 484, 365, 1900, 9606, 295, 17401, 300, 291, 764, 13, 51422], "temperature": 0.0, "avg_logprob": -0.23641521174733232, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.0019781356677412987}, {"id": 128, "seek": 85508, "start": 876.24, "end": 882.36, "text": " You do tend to get very low CV images from using this if you use Wolfie just because", "tokens": [51422, 509, 360, 3928, 281, 483, 588, 2295, 22995, 5267, 490, 1228, 341, 498, 291, 764, 16634, 414, 445, 570, 51728], "temperature": 0.0, "avg_logprob": -0.23641521174733232, "compression_ratio": 1.6495327102803738, "no_speech_prob": 0.0019781356677412987}, {"id": 129, "seek": 88236, "start": 882.4, "end": 886.52, "text": " we're really aggressive at keeping the Wolfie packages up to date and they tend to have", "tokens": [50366, 321, 434, 534, 10762, 412, 5145, 264, 16634, 414, 17401, 493, 281, 4002, 293, 436, 3928, 281, 362, 50572], "temperature": 0.0, "avg_logprob": -0.2103874306929739, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.01830958016216755}, {"id": 130, "seek": 88236, "start": 886.52, "end": 893.52, "text": " no CV use. The other thing is it composes well with Docker files. So like I said all", "tokens": [50572, 572, 22995, 764, 13, 440, 661, 551, 307, 309, 715, 4201, 731, 365, 33772, 7098, 13, 407, 411, 286, 848, 439, 50922], "temperature": 0.0, "avg_logprob": -0.2103874306929739, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.01830958016216755}, {"id": 131, "seek": 88236, "start": 894.52, "end": 900.12, "text": " you can do in app code is add in APKs. So if you want to add your own application in", "tokens": [50972, 291, 393, 360, 294, 724, 3089, 307, 909, 294, 5372, 42, 82, 13, 407, 498, 291, 528, 281, 909, 428, 1065, 3861, 294, 51252], "temperature": 0.0, "avg_logprob": -0.2103874306929739, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.01830958016216755}, {"id": 132, "seek": 88236, "start": 900.12, "end": 906.5600000000001, "text": " well you can use something like melange which is what we use internally to build APKs or", "tokens": [51252, 731, 291, 393, 764, 746, 411, 4795, 933, 597, 307, 437, 321, 764, 19501, 281, 1322, 5372, 42, 82, 420, 51574], "temperature": 0.0, "avg_logprob": -0.2103874306929739, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.01830958016216755}, {"id": 133, "seek": 88236, "start": 906.5600000000001, "end": 911.64, "text": " you can take an existing you can build a base image of app code and then use it like Docker", "tokens": [51574, 291, 393, 747, 364, 6741, 291, 393, 1322, 257, 3096, 3256, 295, 724, 3089, 293, 550, 764, 309, 411, 33772, 51828], "temperature": 0.0, "avg_logprob": -0.2103874306929739, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.01830958016216755}, {"id": 134, "seek": 91164, "start": 911.68, "end": 916.0, "text": " or something to copy in your application on top of it which is basically exactly what", "tokens": [50366, 420, 746, 281, 5055, 294, 428, 3861, 322, 1192, 295, 309, 597, 307, 1936, 2293, 437, 50582], "temperature": 0.0, "avg_logprob": -0.22248113295611213, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.003781359177082777}, {"id": 135, "seek": 91164, "start": 916.0, "end": 922.0, "text": " you're doing when you're using a multi-stage build with the train guard static image.", "tokens": [50582, 291, 434, 884, 562, 291, 434, 1228, 257, 4825, 12, 17882, 1322, 365, 264, 3847, 6290, 13437, 3256, 13, 50882], "temperature": 0.0, "avg_logprob": -0.22248113295611213, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.003781359177082777}, {"id": 136, "seek": 91164, "start": 926.0, "end": 932.0, "text": " Drawbacks I guess you are dependent on Alpine or Wolfie so if you want a package that's", "tokens": [51082, 20386, 17758, 286, 2041, 291, 366, 12334, 322, 967, 40412, 420, 16634, 414, 370, 498, 291, 528, 257, 7372, 300, 311, 51382], "temperature": 0.0, "avg_logprob": -0.22248113295611213, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.003781359177082777}, {"id": 137, "seek": 91164, "start": 932.0, "end": 936.84, "text": " not in there you're going to have to create it yourself. What you totally can do you", "tokens": [51382, 406, 294, 456, 291, 434, 516, 281, 362, 281, 1884, 309, 1803, 13, 708, 291, 3879, 393, 360, 291, 51624], "temperature": 0.0, "avg_logprob": -0.22248113295611213, "compression_ratio": 1.5707762557077625, "no_speech_prob": 0.003781359177082777}, {"id": 138, "seek": 93684, "start": 936.88, "end": 943.88, "text": " can use APK tools or you can use melange which is the train guard version of APK tools.", "tokens": [50366, 393, 764, 5372, 42, 3873, 420, 291, 393, 764, 4795, 933, 597, 307, 264, 3847, 6290, 3037, 295, 5372, 42, 3873, 13, 50716], "temperature": 0.0, "avg_logprob": -0.199914559550669, "compression_ratio": 1.5381165919282511, "no_speech_prob": 0.11803803592920303}, {"id": 139, "seek": 93684, "start": 944.88, "end": 951.1600000000001, "text": " As an aside there is also roles app code for Bazel which does kind of help with that issue", "tokens": [50766, 1018, 364, 7359, 456, 307, 611, 9604, 724, 3089, 337, 42220, 338, 597, 775, 733, 295, 854, 365, 300, 2734, 51080], "temperature": 0.0, "avg_logprob": -0.199914559550669, "compression_ratio": 1.5381165919282511, "no_speech_prob": 0.11803803592920303}, {"id": 140, "seek": 93684, "start": 951.1600000000001, "end": 957.76, "text": " I mentioned before about being able to build images in Bazel completely from scratch. So", "tokens": [51080, 286, 2835, 949, 466, 885, 1075, 281, 1322, 5267, 294, 42220, 338, 2584, 490, 8459, 13, 407, 51410], "temperature": 0.0, "avg_logprob": -0.199914559550669, "compression_ratio": 1.5381165919282511, "no_speech_prob": 0.11803803592920303}, {"id": 141, "seek": 93684, "start": 957.76, "end": 962.76, "text": " you can also check that out if you're interested. Oh yeah what's the score?", "tokens": [51410, 291, 393, 611, 1520, 300, 484, 498, 291, 434, 3102, 13, 876, 1338, 437, 311, 264, 6175, 30, 51660], "temperature": 0.0, "avg_logprob": -0.199914559550669, "compression_ratio": 1.5381165919282511, "no_speech_prob": 0.11803803592920303}, {"id": 142, "seek": 96276, "start": 963.68, "end": 970.68, "text": " That was unexpected thank you. Who scored? No don't worry.", "tokens": [50410, 663, 390, 13106, 1309, 291, 13, 2102, 18139, 30, 883, 500, 380, 3292, 13, 50760], "temperature": 0.0, "avg_logprob": -0.3836938826764216, "compression_ratio": 1.3977272727272727, "no_speech_prob": 0.038070760667324066}, {"id": 143, "seek": 96276, "start": 979.08, "end": 985.08, "text": " Yes I want to mention canonical chiseled containers so I spent a little while looking at this.", "tokens": [51180, 1079, 286, 528, 281, 2152, 46491, 417, 271, 31689, 17089, 370, 286, 4418, 257, 707, 1339, 1237, 412, 341, 13, 51480], "temperature": 0.0, "avg_logprob": -0.3836938826764216, "compression_ratio": 1.3977272727272727, "no_speech_prob": 0.038070760667324066}, {"id": 144, "seek": 96276, "start": 985.08, "end": 991.08, "text": " There are resources you can't totally download it and play with it but there's not that much", "tokens": [51480, 821, 366, 3593, 291, 393, 380, 3879, 5484, 309, 293, 862, 365, 309, 457, 456, 311, 406, 300, 709, 51780], "temperature": 0.0, "avg_logprob": -0.3836938826764216, "compression_ratio": 1.3977272727272727, "no_speech_prob": 0.038070760667324066}, {"id": 145, "seek": 99108, "start": 991.2, "end": 996.5200000000001, "text": " out there to be honest. So this is the canonical version of this chiseled containers. They", "tokens": [50370, 484, 456, 281, 312, 3245, 13, 407, 341, 307, 264, 46491, 3037, 295, 341, 417, 271, 31689, 17089, 13, 814, 50636], "temperature": 0.0, "avg_logprob": -0.2047110875447591, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.05950285121798515}, {"id": 146, "seek": 99108, "start": 996.5200000000001, "end": 1003.12, "text": " do seem to have produced minimal low CV images and they do look good but it seems to be a", "tokens": [50636, 360, 1643, 281, 362, 7126, 13206, 2295, 22995, 5267, 293, 436, 360, 574, 665, 457, 309, 2544, 281, 312, 257, 50966], "temperature": 0.0, "avg_logprob": -0.2047110875447591, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.05950285121798515}, {"id": 147, "seek": 99108, "start": 1003.12, "end": 1010.12, "text": " very limited number of images they've created with this chisel mechanism. I could only find", "tokens": [50966, 588, 5567, 1230, 295, 5267, 436, 600, 2942, 365, 341, 417, 39711, 7513, 13, 286, 727, 787, 915, 51316], "temperature": 0.0, "avg_logprob": -0.2047110875447591, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.05950285121798515}, {"id": 148, "seek": 99108, "start": 1010.1600000000001, "end": 1016.6800000000001, "text": " 3.net images and a GRE image. You can create your own images but it does seem a little bit", "tokens": [51318, 805, 13, 7129, 5267, 293, 257, 20830, 3256, 13, 509, 393, 1884, 428, 1065, 5267, 457, 309, 775, 1643, 257, 707, 857, 51644], "temperature": 0.0, "avg_logprob": -0.2047110875447591, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.05950285121798515}, {"id": 149, "seek": 101668, "start": 1016.7199999999999, "end": 1023.7199999999999, "text": " complex. Basically the app is the idea of slices or the idea that you can, I guess that's", "tokens": [50366, 3997, 13, 8537, 264, 724, 307, 264, 1558, 295, 19793, 420, 264, 1558, 300, 291, 393, 11, 286, 2041, 300, 311, 50716], "temperature": 0.0, "avg_logprob": -0.23439790937635635, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.04816091060638428}, {"id": 150, "seek": 101668, "start": 1026.0, "end": 1031.6799999999998, "text": " where the name chisel comes from so you take an apt package and your chisel bits out that", "tokens": [50830, 689, 264, 1315, 417, 39711, 1487, 490, 370, 291, 747, 364, 29427, 7372, 293, 428, 417, 39711, 9239, 484, 300, 51114], "temperature": 0.0, "avg_logprob": -0.23439790937635635, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.04816091060638428}, {"id": 151, "seek": 101668, "start": 1031.6799999999998, "end": 1038.6799999999998, "text": " you're interested in or you're not interested in. It does feel a bit like the app packages,", "tokens": [51114, 291, 434, 3102, 294, 420, 291, 434, 406, 3102, 294, 13, 467, 775, 841, 257, 857, 411, 264, 724, 17401, 11, 51464], "temperature": 0.0, "avg_logprob": -0.23439790937635635, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.04816091060638428}, {"id": 152, "seek": 101668, "start": 1039.48, "end": 1045.56, "text": " the problem is app packages are large as opposed to with APK and other package managers where", "tokens": [51504, 264, 1154, 307, 724, 17401, 366, 2416, 382, 8851, 281, 365, 5372, 42, 293, 661, 7372, 14084, 689, 51808], "temperature": 0.0, "avg_logprob": -0.23439790937635635, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.04816091060638428}, {"id": 153, "seek": 104556, "start": 1045.56, "end": 1049.8, "text": " you have the idea of sub packages. So we haven't had this problem in Molfi because we just", "tokens": [50364, 291, 362, 264, 1558, 295, 1422, 17401, 13, 407, 321, 2378, 380, 632, 341, 1154, 294, 376, 7491, 72, 570, 321, 445, 50576], "temperature": 0.0, "avg_logprob": -0.18280880406217756, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.010405863635241985}, {"id": 154, "seek": 104556, "start": 1049.8, "end": 1056.1599999999999, "text": " defined sub packages if you want a package that just has libraries for example. I don't", "tokens": [50576, 7642, 1422, 17401, 498, 291, 528, 257, 7372, 300, 445, 575, 15148, 337, 1365, 13, 286, 500, 380, 50894], "temperature": 0.0, "avg_logprob": -0.18280880406217756, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.010405863635241985}, {"id": 155, "seek": 104556, "start": 1056.1599999999999, "end": 1061.8, "text": " know enough about app to say if that would have been a reasonable pathway to do it but", "tokens": [50894, 458, 1547, 466, 724, 281, 584, 498, 300, 576, 362, 668, 257, 10585, 18590, 281, 360, 309, 457, 51176], "temperature": 0.0, "avg_logprob": -0.18280880406217756, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.010405863635241985}, {"id": 156, "seek": 104556, "start": 1061.8, "end": 1068.8, "text": " this chisel mechanism does look very manual. You end up having to specify paths etc. The", "tokens": [51176, 341, 417, 39711, 7513, 775, 574, 588, 9688, 13, 509, 917, 493, 1419, 281, 16500, 14518, 5183, 13, 440, 51526], "temperature": 0.0, "avg_logprob": -0.18280880406217756, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.010405863635241985}, {"id": 157, "seek": 104556, "start": 1069.44, "end": 1074.6399999999999, "text": " other thing is it's very much part of the canonical ecosystem. You start seeing things", "tokens": [51558, 661, 551, 307, 309, 311, 588, 709, 644, 295, 264, 46491, 11311, 13, 509, 722, 2577, 721, 51818], "temperature": 0.0, "avg_logprob": -0.18280880406217756, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.010405863635241985}, {"id": 158, "seek": 107464, "start": 1074.68, "end": 1081.68, "text": " like snapcraft and charms and so on and very much ties into all that. Build packs, I didn't", "tokens": [50366, 411, 13650, 5611, 293, 41383, 293, 370, 322, 293, 588, 709, 14039, 666, 439, 300, 13, 11875, 19403, 11, 286, 994, 380, 50716], "temperature": 0.0, "avg_logprob": -0.1926772658889358, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.03126145526766777}, {"id": 159, "seek": 107464, "start": 1083.0800000000002, "end": 1087.5600000000002, "text": " spend too long looking at this one. A lot of you are probably aware of build packs from", "tokens": [50786, 3496, 886, 938, 1237, 412, 341, 472, 13, 316, 688, 295, 291, 366, 1391, 3650, 295, 1322, 19403, 490, 51010], "temperature": 0.0, "avg_logprob": -0.1926772658889358, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.03126145526766777}, {"id": 160, "seek": 107464, "start": 1087.5600000000002, "end": 1091.96, "text": " the old Heroku days which is where it all started and then Pivotal did their version", "tokens": [51010, 264, 1331, 3204, 13275, 1708, 597, 307, 689, 309, 439, 1409, 293, 550, 430, 13142, 304, 630, 641, 3037, 51230], "temperature": 0.0, "avg_logprob": -0.1926772658889358, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.03126145526766777}, {"id": 161, "seek": 107464, "start": 1091.96, "end": 1096.2, "text": " and then they merged them together again and now we have cloud native build packs that", "tokens": [51230, 293, 550, 436, 36427, 552, 1214, 797, 293, 586, 321, 362, 4588, 8470, 1322, 19403, 300, 51442], "temperature": 0.0, "avg_logprob": -0.1926772658889358, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.03126145526766777}, {"id": 162, "seek": 107464, "start": 1096.2, "end": 1103.2, "text": " build OCI images. The main selling point seems to be that it's easy to use and sort of automatic.", "tokens": [51442, 1322, 422, 25240, 5267, 13, 440, 2135, 6511, 935, 2544, 281, 312, 300, 309, 311, 1858, 281, 764, 293, 1333, 295, 12509, 13, 51792], "temperature": 0.0, "avg_logprob": -0.1926772658889358, "compression_ratio": 1.6568265682656826, "no_speech_prob": 0.03126145526766777}, {"id": 163, "seek": 110320, "start": 1103.44, "end": 1107.92, "text": " So your build packs, well look at your project, they'll see you've got a Python requirements", "tokens": [50376, 407, 428, 1322, 19403, 11, 731, 574, 412, 428, 1716, 11, 436, 603, 536, 291, 600, 658, 257, 15329, 7728, 50600], "temperature": 0.0, "avg_logprob": -0.23223325368520376, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.019017621874809265}, {"id": 164, "seek": 110320, "start": 1107.92, "end": 1113.0800000000002, "text": " dot text or you've got a node package dot jason and try to automatically configure a build", "tokens": [50600, 5893, 2487, 420, 291, 600, 658, 257, 9984, 7372, 5893, 361, 1258, 293, 853, 281, 6772, 22162, 257, 1322, 50858], "temperature": 0.0, "avg_logprob": -0.23223325368520376, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.019017621874809265}, {"id": 165, "seek": 110320, "start": 1113.0800000000002, "end": 1119.0800000000002, "text": " pack to build on top of that so you automatically get a container image out. From playing with", "tokens": [50858, 2844, 281, 1322, 322, 1192, 295, 300, 370, 291, 6772, 483, 257, 10129, 3256, 484, 13, 3358, 2433, 365, 51158], "temperature": 0.0, "avg_logprob": -0.23223325368520376, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.019017621874809265}, {"id": 166, "seek": 110320, "start": 1119.0800000000002, "end": 1126.0800000000002, "text": " it, it didn't seem to produce very small images. Maybe that was me holding it wrong.", "tokens": [51158, 309, 11, 309, 994, 380, 1643, 281, 5258, 588, 1359, 5267, 13, 2704, 300, 390, 385, 5061, 309, 2085, 13, 51508], "temperature": 0.0, "avg_logprob": -0.23223325368520376, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.019017621874809265}, {"id": 167, "seek": 110320, "start": 1126.0800000000002, "end": 1130.72, "text": " I don't think there's any reason it shouldn't produce small images. It just seems to be,", "tokens": [51508, 286, 500, 380, 519, 456, 311, 604, 1778, 309, 4659, 380, 5258, 1359, 5267, 13, 467, 445, 2544, 281, 312, 11, 51740], "temperature": 0.0, "avg_logprob": -0.23223325368520376, "compression_ratio": 1.7186311787072244, "no_speech_prob": 0.019017621874809265}, {"id": 168, "seek": 113072, "start": 1130.76, "end": 1135.8, "text": " that's all based on this idea of stacks and the stacks by default aren't that small. It", "tokens": [50366, 300, 311, 439, 2361, 322, 341, 1558, 295, 30792, 293, 264, 30792, 538, 7576, 3212, 380, 300, 1359, 13, 467, 50618], "temperature": 0.0, "avg_logprob": -0.26152105589170715, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.02298392914235592}, {"id": 169, "seek": 113072, "start": 1135.8, "end": 1142.8, "text": " does definitely feel to me about one size fits all. But yeah, have a look if you like.", "tokens": [50618, 775, 2138, 841, 281, 385, 466, 472, 2744, 9001, 439, 13, 583, 1338, 11, 362, 257, 574, 498, 291, 411, 13, 50968], "temperature": 0.0, "avg_logprob": -0.26152105589170715, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.02298392914235592}, {"id": 170, "seek": 113072, "start": 1144.84, "end": 1149.3600000000001, "text": " One thing I really do like that came out recently is Buildkit and well Buildkit didn't come out", "tokens": [51070, 1485, 551, 286, 534, 360, 411, 300, 1361, 484, 3938, 307, 11875, 22681, 293, 731, 11875, 22681, 994, 380, 808, 484, 51296], "temperature": 0.0, "avg_logprob": -0.26152105589170715, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.02298392914235592}, {"id": 171, "seek": 113072, "start": 1149.3600000000001, "end": 1153.8, "text": " recently, but Dagger came out recently. So Buildkit is the sort of engine behind Docker", "tokens": [51296, 3938, 11, 457, 413, 11062, 1361, 484, 3938, 13, 407, 11875, 22681, 307, 264, 1333, 295, 2848, 2261, 33772, 51518], "temperature": 0.0, "avg_logprob": -0.26152105589170715, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.02298392914235592}, {"id": 172, "seek": 113072, "start": 1153.8, "end": 1159.3600000000001, "text": " build and Buildkit is a lot more powerful than it appears from looking at Docker file.", "tokens": [51518, 1322, 293, 11875, 22681, 307, 257, 688, 544, 4005, 813, 309, 7038, 490, 1237, 412, 33772, 3991, 13, 51796], "temperature": 0.0, "avg_logprob": -0.26152105589170715, "compression_ratio": 1.7519685039370079, "no_speech_prob": 0.02298392914235592}, {"id": 173, "seek": 115936, "start": 1159.56, "end": 1163.56, "text": " There's a whole bunch of stuff you can do here about dependencies and resolution and", "tokens": [50374, 821, 311, 257, 1379, 3840, 295, 1507, 291, 393, 360, 510, 466, 36606, 293, 8669, 293, 50574], "temperature": 0.0, "avg_logprob": -0.20347486223493302, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.00959095824509859}, {"id": 174, "seek": 115936, "start": 1163.56, "end": 1169.1599999999999, "text": " caching that's really quite powerful. And I think when they built Buildkit, they were", "tokens": [50574, 269, 2834, 300, 311, 534, 1596, 4005, 13, 400, 286, 519, 562, 436, 3094, 11875, 22681, 11, 436, 645, 50854], "temperature": 0.0, "avg_logprob": -0.20347486223493302, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.00959095824509859}, {"id": 175, "seek": 115936, "start": 1169.1599999999999, "end": 1174.3999999999999, "text": " hoping that there'd be much more front ends created on top of Buildkit rather than just", "tokens": [50854, 7159, 300, 456, 1116, 312, 709, 544, 1868, 5314, 2942, 322, 1192, 295, 11875, 22681, 2831, 813, 445, 51116], "temperature": 0.0, "avg_logprob": -0.20347486223493302, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.00959095824509859}, {"id": 176, "seek": 115936, "start": 1174.3999999999999, "end": 1181.3999999999999, "text": " Docker file. But that's not really happened until now with Dagger. And Dagger really tries", "tokens": [51116, 33772, 3991, 13, 583, 300, 311, 406, 534, 2011, 1826, 586, 365, 413, 11062, 13, 400, 413, 11062, 534, 9898, 51466], "temperature": 0.0, "avg_logprob": -0.20347486223493302, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.00959095824509859}, {"id": 177, "seek": 115936, "start": 1181.3999999999999, "end": 1187.3999999999999, "text": " to take advantage of the power of Buildkit. I would say Dagger is much more designed for", "tokens": [51466, 281, 747, 5002, 295, 264, 1347, 295, 11875, 22681, 13, 286, 576, 584, 413, 11062, 307, 709, 544, 4761, 337, 51766], "temperature": 0.0, "avg_logprob": -0.20347486223493302, "compression_ratio": 1.691119691119691, "no_speech_prob": 0.00959095824509859}, {"id": 178, "seek": 118740, "start": 1187.44, "end": 1194.44, "text": " CI CD. So the selling point of Dagger is to solve this problem that you have in CI CD when", "tokens": [50366, 37777, 6743, 13, 407, 264, 6511, 935, 295, 413, 11062, 307, 281, 5039, 341, 1154, 300, 291, 362, 294, 37777, 6743, 562, 50716], "temperature": 0.0, "avg_logprob": -0.22927584413622246, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.008308561518788338}, {"id": 179, "seek": 118740, "start": 1194.44, "end": 1201.1200000000001, "text": " I'm sure you all had like GitHub actions where your action isn't working. So you like chicken,", "tokens": [50716, 286, 478, 988, 291, 439, 632, 411, 23331, 5909, 689, 428, 3069, 1943, 380, 1364, 13, 407, 291, 411, 4662, 11, 51050], "temperature": 0.0, "avg_logprob": -0.22927584413622246, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.008308561518788338}, {"id": 180, "seek": 118740, "start": 1201.1200000000001, "end": 1206.0, "text": " try this and then try three, try four and you end up with try 26 of commits. Yeah, you've", "tokens": [51050, 853, 341, 293, 550, 853, 1045, 11, 853, 1451, 293, 291, 917, 493, 365, 853, 7551, 295, 48311, 13, 865, 11, 291, 600, 51294], "temperature": 0.0, "avg_logprob": -0.22927584413622246, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.008308561518788338}, {"id": 181, "seek": 118740, "start": 1206.0, "end": 1212.2, "text": " all been there? Yeah, it's a pain. And that's kind of what Dagger is trying to solve. The", "tokens": [51294, 439, 668, 456, 30, 865, 11, 309, 311, 257, 1822, 13, 400, 300, 311, 733, 295, 437, 413, 11062, 307, 1382, 281, 5039, 13, 440, 51604], "temperature": 0.0, "avg_logprob": -0.22927584413622246, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.008308561518788338}, {"id": 182, "seek": 118740, "start": 1212.2, "end": 1216.2800000000002, "text": " idea being that you can run Dagger locally and it'll build the same as it does locally", "tokens": [51604, 1558, 885, 300, 291, 393, 1190, 413, 11062, 16143, 293, 309, 603, 1322, 264, 912, 382, 309, 775, 16143, 51808], "temperature": 0.0, "avg_logprob": -0.22927584413622246, "compression_ratio": 1.692883895131086, "no_speech_prob": 0.008308561518788338}, {"id": 183, "seek": 121628, "start": 1216.28, "end": 1223.28, "text": " as in a GitHub action or Circle CI, et cetera. I don't think this example is very fair to", "tokens": [50364, 382, 294, 257, 23331, 3069, 420, 29381, 37777, 11, 1030, 11458, 13, 286, 500, 380, 519, 341, 1365, 307, 588, 3143, 281, 50714], "temperature": 0.0, "avg_logprob": -0.21889153347220472, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.020581046119332314}, {"id": 184, "seek": 121628, "start": 1225.44, "end": 1229.2, "text": " Dagger because it's actually really large and powerful, but I want to give you some", "tokens": [50822, 413, 11062, 570, 309, 311, 767, 534, 2416, 293, 4005, 11, 457, 286, 528, 281, 976, 291, 512, 51010], "temperature": 0.0, "avg_logprob": -0.21889153347220472, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.020581046119332314}, {"id": 185, "seek": 121628, "start": 1229.2, "end": 1235.32, "text": " flavor at least. So in this example, we're building a container, we're giving it a base", "tokens": [51010, 6813, 412, 1935, 13, 407, 294, 341, 1365, 11, 321, 434, 2390, 257, 10129, 11, 321, 434, 2902, 309, 257, 3096, 51316], "temperature": 0.0, "avg_logprob": -0.21889153347220472, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.020581046119332314}, {"id": 186, "seek": 121628, "start": 1235.32, "end": 1241.2, "text": " image, we're telling it like a directory from the host to include. In this case, we're just", "tokens": [51316, 3256, 11, 321, 434, 3585, 309, 411, 257, 21120, 490, 264, 3975, 281, 4090, 13, 682, 341, 1389, 11, 321, 434, 445, 51610], "temperature": 0.0, "avg_logprob": -0.21889153347220472, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.020581046119332314}, {"id": 187, "seek": 124120, "start": 1241.24, "end": 1248.24, "text": " including the MD files, markdown files, sitting the work directory, then telling it to execute", "tokens": [50366, 3009, 264, 22521, 7098, 11, 1491, 5093, 7098, 11, 3798, 264, 589, 21120, 11, 550, 3585, 309, 281, 14483, 50716], "temperature": 0.0, "avg_logprob": -0.2473023154518821, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.06279495358467102}, {"id": 188, "seek": 124120, "start": 1249.1200000000001, "end": 1256.1200000000001, "text": " LS and I put in the, I put from LS. So that's kind of what Dagger workflows look like. We're", "tokens": [50760, 36657, 293, 286, 829, 294, 264, 11, 286, 829, 490, 36657, 13, 407, 300, 311, 733, 295, 437, 413, 11062, 43461, 574, 411, 13, 492, 434, 51110], "temperature": 0.0, "avg_logprob": -0.2473023154518821, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.06279495358467102}, {"id": 189, "seek": 124120, "start": 1257.8, "end": 1264.48, "text": " just half built a container, it's also done something with it. To me, it kind of feels", "tokens": [51194, 445, 1922, 3094, 257, 10129, 11, 309, 311, 611, 1096, 746, 365, 309, 13, 1407, 385, 11, 309, 733, 295, 3417, 51528], "temperature": 0.0, "avg_logprob": -0.2473023154518821, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.06279495358467102}, {"id": 190, "seek": 124120, "start": 1264.48, "end": 1270.24, "text": " similar in some ways to Bazel, but a lot simpler, right? Because now we have a build system that", "tokens": [51528, 2531, 294, 512, 2098, 281, 42220, 338, 11, 457, 257, 688, 18587, 11, 558, 30, 1436, 586, 321, 362, 257, 1322, 1185, 300, 51816], "temperature": 0.0, "avg_logprob": -0.2473023154518821, "compression_ratio": 1.5330578512396693, "no_speech_prob": 0.06279495358467102}, {"id": 191, "seek": 127024, "start": 1270.28, "end": 1277.28, "text": " will build an entire sort of organization, my project if you like. I'm sure it does not", "tokens": [50366, 486, 1322, 364, 2302, 1333, 295, 4475, 11, 452, 1716, 498, 291, 411, 13, 286, 478, 988, 309, 775, 406, 50716], "temperature": 0.0, "avg_logprob": -0.18551620907253688, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.020055189728736877}, {"id": 192, "seek": 127024, "start": 1280.76, "end": 1287.52, "text": " offer the same providence and so on guarantees. What I really mean is just that it's designed", "tokens": [50890, 2626, 264, 912, 1439, 2778, 293, 370, 322, 32567, 13, 708, 286, 534, 914, 307, 445, 300, 309, 311, 4761, 51228], "temperature": 0.0, "avg_logprob": -0.18551620907253688, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.020055189728736877}, {"id": 193, "seek": 127024, "start": 1287.52, "end": 1293.6, "text": " for a team to use as opposed to a single person. There is also a bunch of plugins. So the", "tokens": [51228, 337, 257, 1469, 281, 764, 382, 8851, 281, 257, 2167, 954, 13, 821, 307, 611, 257, 3840, 295, 33759, 13, 407, 264, 51532], "temperature": 0.0, "avg_logprob": -0.18551620907253688, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.020055189728736877}, {"id": 194, "seek": 127024, "start": 1293.6, "end": 1298.52, "text": " Dagger working on something called the Daggerverse and that includes plugins, including one for", "tokens": [51532, 413, 11062, 1364, 322, 746, 1219, 264, 413, 11062, 4308, 293, 300, 5974, 33759, 11, 3009, 472, 337, 51778], "temperature": 0.0, "avg_logprob": -0.18551620907253688, "compression_ratio": 1.5751072961373391, "no_speech_prob": 0.020055189728736877}, {"id": 195, "seek": 129852, "start": 1298.56, "end": 1304.56, "text": " AppCo. However, having played with it, you're actually better off with a plugin for APKs.", "tokens": [50366, 3132, 21141, 13, 2908, 11, 1419, 3737, 365, 309, 11, 291, 434, 767, 1101, 766, 365, 257, 23407, 337, 5372, 42, 82, 13, 50666], "temperature": 0.0, "avg_logprob": -0.2411912349944419, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.019517531618475914}, {"id": 196, "seek": 129852, "start": 1304.56, "end": 1311.56, "text": " So Dagger can effectively recreate AppCo because you can create a file system or image from", "tokens": [50666, 407, 413, 11062, 393, 8659, 25833, 3132, 21141, 570, 291, 393, 1884, 257, 3991, 1185, 420, 3256, 490, 51016], "temperature": 0.0, "avg_logprob": -0.2411912349944419, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.019517531618475914}, {"id": 197, "seek": 129852, "start": 1312.36, "end": 1318.72, "text": " scratch and then just add an APKs using the plugin. In some ways, it will be better than", "tokens": [51056, 8459, 293, 550, 445, 909, 364, 5372, 42, 82, 1228, 264, 23407, 13, 682, 512, 2098, 11, 309, 486, 312, 1101, 813, 51374], "temperature": 0.0, "avg_logprob": -0.2411912349944419, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.019517531618475914}, {"id": 198, "seek": 129852, "start": 1318.72, "end": 1325.72, "text": " AppCo because you'll get caching and rebuilds really much faster. So there's quite a strong", "tokens": [51374, 3132, 21141, 570, 291, 603, 483, 269, 2834, 293, 16877, 82, 534, 709, 4663, 13, 407, 456, 311, 1596, 257, 2068, 51724], "temperature": 0.0, "avg_logprob": -0.2411912349944419, "compression_ratio": 1.547008547008547, "no_speech_prob": 0.019517531618475914}, {"id": 199, "seek": 132572, "start": 1325.88, "end": 1328.88, "text": " argument for using Dagger there instead of AppCo.", "tokens": [50372, 6770, 337, 1228, 413, 11062, 456, 2602, 295, 3132, 21141, 13, 50522], "temperature": 0.0, "avg_logprob": -0.2963555942882191, "compression_ratio": 1.4977777777777779, "no_speech_prob": 0.023718316107988358}, {"id": 200, "seek": 132572, "start": 1328.88, "end": 1335.88, "text": " Next, how am I doing for time?", "tokens": [50522, 3087, 11, 577, 669, 286, 884, 337, 565, 30, 50872], "temperature": 0.0, "avg_logprob": -0.2963555942882191, "compression_ratio": 1.4977777777777779, "no_speech_prob": 0.023718316107988358}, {"id": 201, "seek": 132572, "start": 1335.88, "end": 1342.88, "text": " Okay, we should be okay. So you don't need to understand all of Nix or even install it", "tokens": [50872, 1033, 11, 321, 820, 312, 1392, 13, 407, 291, 500, 380, 643, 281, 1223, 439, 295, 426, 970, 420, 754, 3625, 309, 51222], "temperature": 0.0, "avg_logprob": -0.2963555942882191, "compression_ratio": 1.4977777777777779, "no_speech_prob": 0.023718316107988358}, {"id": 202, "seek": 132572, "start": 1344.52, "end": 1350.76, "text": " to play with Nix to build Docker images or container images. There's effectively two", "tokens": [51304, 281, 862, 365, 426, 970, 281, 1322, 33772, 5267, 420, 10129, 5267, 13, 821, 311, 8659, 732, 51616], "temperature": 0.0, "avg_logprob": -0.2963555942882191, "compression_ratio": 1.4977777777777779, "no_speech_prob": 0.023718316107988358}, {"id": 203, "seek": 132572, "start": 1350.76, "end": 1355.3600000000001, "text": " approaches. You can use packages to Docker tools or you can use flakes and copy them", "tokens": [51616, 11587, 13, 509, 393, 764, 17401, 281, 33772, 3873, 420, 291, 393, 764, 35392, 293, 5055, 552, 51846], "temperature": 0.0, "avg_logprob": -0.2963555942882191, "compression_ratio": 1.4977777777777779, "no_speech_prob": 0.023718316107988358}, {"id": 204, "seek": 135536, "start": 1355.3999999999999, "end": 1362.3999999999999, "text": " into an image. And I should say I have definitely not understood very much of Nix and I didn't", "tokens": [50366, 666, 364, 3256, 13, 400, 286, 820, 584, 286, 362, 2138, 406, 7320, 588, 709, 295, 426, 970, 293, 286, 994, 380, 50716], "temperature": 0.0, "avg_logprob": -0.2748396396636963, "compression_ratio": 1.427807486631016, "no_speech_prob": 0.021169528365135193}, {"id": 205, "seek": 135536, "start": 1362.6, "end": 1369.6, "text": " install it. Here is packages.docker tools. So again, it's somewhat similar to Bazel", "tokens": [50726, 3625, 309, 13, 1692, 307, 17401, 13, 48341, 260, 3873, 13, 407, 797, 11, 309, 311, 8344, 2531, 281, 42220, 338, 51076], "temperature": 0.0, "avg_logprob": -0.2748396396636963, "compression_ratio": 1.427807486631016, "no_speech_prob": 0.021169528365135193}, {"id": 206, "seek": 135536, "start": 1373.04, "end": 1380.04, "text": " or something like that. We're specifying the name of the image. We're saying we want the", "tokens": [51248, 420, 746, 411, 300, 13, 492, 434, 1608, 5489, 264, 1315, 295, 264, 3256, 13, 492, 434, 1566, 321, 528, 264, 51598], "temperature": 0.0, "avg_logprob": -0.2748396396636963, "compression_ratio": 1.427807486631016, "no_speech_prob": 0.021169528365135193}, {"id": 207, "seek": 138004, "start": 1380.44, "end": 1385.32, "text": " reddest package inside it and that it should be available at slash bin and mountain of", "tokens": [50384, 2182, 23748, 7372, 1854, 309, 293, 300, 309, 820, 312, 2435, 412, 17330, 5171, 293, 6937, 295, 50628], "temperature": 0.0, "avg_logprob": -0.3102304002513056, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.19502544403076172}, {"id": 208, "seek": 138004, "start": 1385.32, "end": 1392.32, "text": " volume, et cetera. Now, you should be able to build that. I tried building it on my Mac", "tokens": [50628, 5523, 11, 1030, 11458, 13, 823, 11, 291, 820, 312, 1075, 281, 1322, 300, 13, 286, 3031, 2390, 309, 322, 452, 5707, 50978], "temperature": 0.0, "avg_logprob": -0.3102304002513056, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.19502544403076172}, {"id": 209, "seek": 138004, "start": 1392.76, "end": 1396.8, "text": " and it told me it wouldn't build because it required KVM. I don't want to understand", "tokens": [51000, 293, 309, 1907, 385, 309, 2759, 380, 1322, 570, 309, 4739, 591, 53, 44, 13, 286, 500, 380, 528, 281, 1223, 51202], "temperature": 0.0, "avg_logprob": -0.3102304002513056, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.19502544403076172}, {"id": 210, "seek": 138004, "start": 1396.8, "end": 1403.8, "text": " if that's, if there's something I could work around that. Now, I believe we'll create something", "tokens": [51202, 498, 300, 311, 11, 498, 456, 311, 746, 286, 727, 589, 926, 300, 13, 823, 11, 286, 1697, 321, 603, 1884, 746, 51552], "temperature": 0.0, "avg_logprob": -0.3102304002513056, "compression_ratio": 1.6359447004608294, "no_speech_prob": 0.19502544403076172}, {"id": 211, "seek": 140380, "start": 1404.68, "end": 1411.68, "text": " that's fully reproducible. So I run twice and it will give me a bit wise identical result.", "tokens": [50408, 300, 311, 4498, 11408, 32128, 13, 407, 286, 1190, 6091, 293, 309, 486, 976, 385, 257, 857, 10829, 14800, 1874, 13, 50758], "temperature": 0.0, "avg_logprob": -0.20706803458077566, "compression_ratio": 1.4728033472803348, "no_speech_prob": 0.25661396980285645}, {"id": 212, "seek": 140380, "start": 1411.76, "end": 1417.08, "text": " You should be able to create minimal images. I'm not 100% sure in that one. It takes a", "tokens": [50762, 509, 820, 312, 1075, 281, 1884, 13206, 5267, 13, 286, 478, 406, 2319, 4, 988, 294, 300, 472, 13, 467, 2516, 257, 51028], "temperature": 0.0, "avg_logprob": -0.20706803458077566, "compression_ratio": 1.4728033472803348, "no_speech_prob": 0.25661396980285645}, {"id": 213, "seek": 140380, "start": 1417.08, "end": 1422.84, "text": " full programming language and you do sort of need to buy into the whole Nix ecosystem,", "tokens": [51028, 1577, 9410, 2856, 293, 291, 360, 1333, 295, 643, 281, 2256, 666, 264, 1379, 426, 970, 11311, 11, 51316], "temperature": 0.0, "avg_logprob": -0.20706803458077566, "compression_ratio": 1.4728033472803348, "no_speech_prob": 0.25661396980285645}, {"id": 214, "seek": 140380, "start": 1422.84, "end": 1429.84, "text": " but it does seem quite a powerful solution. Nix Flakes. So this is entirely stolen from", "tokens": [51316, 457, 309, 775, 1643, 1596, 257, 4005, 3827, 13, 426, 970, 3235, 3419, 13, 407, 341, 307, 7696, 15900, 490, 51666], "temperature": 0.0, "avg_logprob": -0.20706803458077566, "compression_ratio": 1.4728033472803348, "no_speech_prob": 0.25661396980285645}, {"id": 215, "seek": 142984, "start": 1430.84, "end": 1436.32, "text": " Mitchell Hashimoto's blog, but it was really quite interesting. So the idea with Nix is", "tokens": [50414, 27582, 30775, 42277, 311, 6968, 11, 457, 309, 390, 534, 1596, 1880, 13, 407, 264, 1558, 365, 426, 970, 307, 50688], "temperature": 0.0, "avg_logprob": -0.2125923110217583, "compression_ratio": 1.6018518518518519, "no_speech_prob": 0.015038721263408661}, {"id": 216, "seek": 142984, "start": 1436.32, "end": 1442.52, "text": " when you install an application, you also get all of the dependencies or particular", "tokens": [50688, 562, 291, 3625, 364, 3861, 11, 291, 611, 483, 439, 295, 264, 36606, 420, 1729, 50998], "temperature": 0.0, "avg_logprob": -0.2125923110217583, "compression_ratio": 1.6018518518518519, "no_speech_prob": 0.015038721263408661}, {"id": 217, "seek": 142984, "start": 1442.52, "end": 1448.52, "text": " version of all its dependencies along with it so that it always works wherever you put", "tokens": [50998, 3037, 295, 439, 1080, 36606, 2051, 365, 309, 370, 300, 309, 1009, 1985, 8660, 291, 829, 51298], "temperature": 0.0, "avg_logprob": -0.2125923110217583, "compression_ratio": 1.6018518518518519, "no_speech_prob": 0.015038721263408661}, {"id": 218, "seek": 142984, "start": 1448.52, "end": 1454.0, "text": " it. So there's no reason that you can't just take the whole file system tree and put it", "tokens": [51298, 309, 13, 407, 456, 311, 572, 1778, 300, 291, 393, 380, 445, 747, 264, 1379, 3991, 1185, 4230, 293, 829, 309, 51572], "temperature": 0.0, "avg_logprob": -0.2125923110217583, "compression_ratio": 1.6018518518518519, "no_speech_prob": 0.015038721263408661}, {"id": 219, "seek": 145400, "start": 1454.12, "end": 1460.12, "text": " in a container and it should just work and it does. So the idea is to create a flake", "tokens": [50370, 294, 257, 10129, 293, 309, 820, 445, 589, 293, 309, 775, 13, 407, 264, 1558, 307, 281, 1884, 257, 932, 619, 50670], "temperature": 0.0, "avg_logprob": -0.2080594767694888, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.20134805142879486}, {"id": 220, "seek": 145400, "start": 1460.12, "end": 1465.56, "text": " and copy it into an image using a Docker file and that's a pretty simple method and it does", "tokens": [50670, 293, 5055, 309, 666, 364, 3256, 1228, 257, 33772, 3991, 293, 300, 311, 257, 1238, 2199, 3170, 293, 309, 775, 50942], "temperature": 0.0, "avg_logprob": -0.2080594767694888, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.20134805142879486}, {"id": 221, "seek": 145400, "start": 1465.56, "end": 1471.56, "text": " work on my Mac. The whole sort of method is written up by Mitchell Hashimoto at this blog", "tokens": [50942, 589, 322, 452, 5707, 13, 440, 1379, 1333, 295, 3170, 307, 3720, 493, 538, 27582, 30775, 42277, 412, 341, 6968, 51242], "temperature": 0.0, "avg_logprob": -0.2080594767694888, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.20134805142879486}, {"id": 222, "seek": 145400, "start": 1471.56, "end": 1478.56, "text": " post. I could show you, but by the time, it is a little bit frustrating because now we", "tokens": [51242, 2183, 13, 286, 727, 855, 291, 11, 457, 538, 264, 565, 11, 309, 307, 257, 707, 857, 16522, 570, 586, 321, 51592], "temperature": 0.0, "avg_logprob": -0.2080594767694888, "compression_ratio": 1.568888888888889, "no_speech_prob": 0.20134805142879486}, {"id": 223, "seek": 147856, "start": 1479.3999999999999, "end": 1486.3999999999999, "text": " put Docker into the mix, it's reduced the level of reproducibility. I think you should", "tokens": [50406, 829, 33772, 666, 264, 2890, 11, 309, 311, 9212, 264, 1496, 295, 11408, 537, 39802, 13, 286, 519, 291, 820, 50756], "temperature": 0.0, "avg_logprob": -0.21925132924860175, "compression_ratio": 1.4491978609625669, "no_speech_prob": 0.009054150432348251}, {"id": 224, "seek": 147856, "start": 1488.56, "end": 1495.1599999999999, "text": " be able to take minimal images, but there is an issue in that it creates a slightly weird", "tokens": [50864, 312, 1075, 281, 747, 13206, 5267, 11, 457, 456, 307, 364, 2734, 294, 300, 309, 7829, 257, 4748, 3657, 51194], "temperature": 0.0, "avg_logprob": -0.21925132924860175, "compression_ratio": 1.4491978609625669, "no_speech_prob": 0.009054150432348251}, {"id": 225, "seek": 147856, "start": 1495.1599999999999, "end": 1502.1599999999999, "text": " file system. The app or the entry point is a shell script which includes all the dependencies.", "tokens": [51194, 3991, 1185, 13, 440, 724, 420, 264, 8729, 935, 307, 257, 8720, 5755, 597, 5974, 439, 264, 36606, 13, 51544], "temperature": 0.0, "avg_logprob": -0.21925132924860175, "compression_ratio": 1.4491978609625669, "no_speech_prob": 0.009054150432348251}, {"id": 226, "seek": 150216, "start": 1502.88, "end": 1509.88, "text": " So I guess you get forced to include bash or something. I'm not quite sure that's always", "tokens": [50400, 407, 286, 2041, 291, 483, 7579, 281, 4090, 46183, 420, 746, 13, 286, 478, 406, 1596, 988, 300, 311, 1009, 50750], "temperature": 0.0, "avg_logprob": -0.18763040692618724, "compression_ratio": 1.5818181818181818, "no_speech_prob": 0.18571217358112335}, {"id": 227, "seek": 150216, "start": 1510.88, "end": 1517.2, "text": " the case or there's a workaround for that. I really need to play more with it. But you", "tokens": [50800, 264, 1389, 420, 456, 311, 257, 589, 25762, 337, 300, 13, 286, 534, 643, 281, 862, 544, 365, 309, 13, 583, 291, 51116], "temperature": 0.0, "avg_logprob": -0.18763040692618724, "compression_ratio": 1.5818181818181818, "no_speech_prob": 0.18571217358112335}, {"id": 228, "seek": 150216, "start": 1517.2, "end": 1522.8000000000002, "text": " do end up with a weird file system. So the problem with this solution is if you give", "tokens": [51116, 360, 917, 493, 365, 257, 3657, 3991, 1185, 13, 407, 264, 1154, 365, 341, 3827, 307, 498, 291, 976, 51396], "temperature": 0.0, "avg_logprob": -0.18763040692618724, "compression_ratio": 1.5818181818181818, "no_speech_prob": 0.18571217358112335}, {"id": 229, "seek": 150216, "start": 1522.8000000000002, "end": 1528.4, "text": " it to somebody else and they try and debug it, they might well hit problems because you", "tokens": [51396, 309, 281, 2618, 1646, 293, 436, 853, 293, 24083, 309, 11, 436, 1062, 731, 2045, 2740, 570, 291, 51676], "temperature": 0.0, "avg_logprob": -0.18763040692618724, "compression_ratio": 1.5818181818181818, "no_speech_prob": 0.18571217358112335}, {"id": 230, "seek": 152840, "start": 1528.48, "end": 1534.72, "text": " do a file system and you've got app and you've got next door. You don't have your usual Etsy", "tokens": [50368, 360, 257, 3991, 1185, 293, 291, 600, 658, 724, 293, 291, 600, 658, 958, 2853, 13, 509, 500, 380, 362, 428, 7713, 47170, 88, 50680], "temperature": 0.0, "avg_logprob": -0.27581314728638834, "compression_ratio": 1.5606694560669456, "no_speech_prob": 0.06766671687364578}, {"id": 231, "seek": 152840, "start": 1534.72, "end": 1541.72, "text": " and BIN directors. Okay, so to wrap up, what would I recommend? If you want a big organization", "tokens": [50680, 293, 363, 1464, 17307, 13, 1033, 11, 370, 281, 7019, 493, 11, 437, 576, 286, 2748, 30, 759, 291, 528, 257, 955, 4475, 51030], "temperature": 0.0, "avg_logprob": -0.27581314728638834, "compression_ratio": 1.5606694560669456, "no_speech_prob": 0.06766671687364578}, {"id": 232, "seek": 152840, "start": 1543.0400000000002, "end": 1550.0400000000002, "text": " wide solution, if you need provenance, reproducibility and so on, you can totally do that. But do", "tokens": [51096, 4874, 3827, 11, 498, 291, 643, 12785, 719, 11, 11408, 537, 39802, 293, 370, 322, 11, 291, 393, 3879, 360, 300, 13, 583, 360, 51446], "temperature": 0.0, "avg_logprob": -0.27581314728638834, "compression_ratio": 1.5606694560669456, "no_speech_prob": 0.06766671687364578}, {"id": 233, "seek": 152840, "start": 1550.24, "end": 1557.0, "text": " be aware it can be a bit of a beast. I really like Dagger. I hope it does well. It is a", "tokens": [51456, 312, 3650, 309, 393, 312, 257, 857, 295, 257, 13464, 13, 286, 534, 411, 413, 11062, 13, 286, 1454, 309, 775, 731, 13, 467, 307, 257, 51794], "temperature": 0.0, "avg_logprob": -0.27581314728638834, "compression_ratio": 1.5606694560669456, "no_speech_prob": 0.06766671687364578}, {"id": 234, "seek": 155700, "start": 1557.0, "end": 1564.0, "text": " new solution. So do be aware that it's still being built out. Yeah, it certainly seems", "tokens": [50364, 777, 3827, 13, 407, 360, 312, 3650, 300, 309, 311, 920, 885, 3094, 484, 13, 865, 11, 309, 3297, 2544, 50714], "temperature": 0.0, "avg_logprob": -0.2216815948486328, "compression_ratio": 1.5213675213675213, "no_speech_prob": 0.0234404094517231}, {"id": 235, "seek": 155700, "start": 1564.04, "end": 1571.04, "text": " a good solution if you feel a pain in CI CD and I think everybody does. If you have a", "tokens": [50716, 257, 665, 3827, 498, 291, 841, 257, 1822, 294, 37777, 6743, 293, 286, 519, 2201, 775, 13, 759, 291, 362, 257, 51066], "temperature": 0.0, "avg_logprob": -0.2216815948486328, "compression_ratio": 1.5213675213675213, "no_speech_prob": 0.0234404094517231}, {"id": 236, "seek": 155700, "start": 1571.44, "end": 1578.44, "text": " smaller project, the first thing I would genuinely look at is like ecosystem specific build", "tokens": [51086, 4356, 1716, 11, 264, 700, 551, 286, 576, 17839, 574, 412, 307, 411, 11311, 2685, 1322, 51436], "temperature": 0.0, "avg_logprob": -0.2216815948486328, "compression_ratio": 1.5213675213675213, "no_speech_prob": 0.0234404094517231}, {"id": 237, "seek": 155700, "start": 1578.44, "end": 1583.84, "text": " tooling. So like co for go for example. Because that's really simple and you're pretty sure", "tokens": [51436, 46593, 13, 407, 411, 598, 337, 352, 337, 1365, 13, 1436, 300, 311, 534, 2199, 293, 291, 434, 1238, 988, 51706], "temperature": 0.0, "avg_logprob": -0.2216815948486328, "compression_ratio": 1.5213675213675213, "no_speech_prob": 0.0234404094517231}, {"id": 238, "seek": 158384, "start": 1583.8799999999999, "end": 1590.08, "text": " it's going to work and be low config. There is jib for Java. I've not tried that one,", "tokens": [50366, 309, 311, 516, 281, 589, 293, 312, 2295, 6662, 13, 821, 307, 361, 897, 337, 10745, 13, 286, 600, 406, 3031, 300, 472, 11, 50676], "temperature": 0.0, "avg_logprob": -0.2691066641556589, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.05945196375250816}, {"id": 239, "seek": 158384, "start": 1590.08, "end": 1596.08, "text": " but that would probably be the first thing I would try if I was doing Java again. Otherwise,", "tokens": [50676, 457, 300, 576, 1391, 312, 264, 700, 551, 286, 576, 853, 498, 286, 390, 884, 10745, 797, 13, 10328, 11, 50976], "temperature": 0.0, "avg_logprob": -0.2691066641556589, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.05945196375250816}, {"id": 240, "seek": 158384, "start": 1596.08, "end": 1600.6, "text": " there's nothing wrong with doing a multi-stage Docker build with this full of images. I totally", "tokens": [50976, 456, 311, 1825, 2085, 365, 884, 257, 4825, 12, 17882, 33772, 1322, 365, 341, 1577, 295, 5267, 13, 286, 3879, 51202], "temperature": 0.0, "avg_logprob": -0.2691066641556589, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.05945196375250816}, {"id": 241, "seek": 158384, "start": 1600.6, "end": 1606.0, "text": " would recommend looking at this full of images though to get a fully minimal production image.", "tokens": [51202, 576, 2748, 1237, 412, 341, 1577, 295, 5267, 1673, 281, 483, 257, 4498, 13206, 4265, 3256, 13, 51472], "temperature": 0.0, "avg_logprob": -0.2691066641556589, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.05945196375250816}, {"id": 242, "seek": 158384, "start": 1606.0, "end": 1610.9199999999998, "text": " App Co, yeah, if you want to, if you need a bit more flexibility and creating your sort", "tokens": [51472, 3132, 3066, 11, 1338, 11, 498, 291, 528, 281, 11, 498, 291, 643, 257, 857, 544, 12635, 293, 4084, 428, 1333, 51718], "temperature": 0.0, "avg_logprob": -0.2691066641556589, "compression_ratio": 1.643884892086331, "no_speech_prob": 0.05945196375250816}, {"id": 243, "seek": 161092, "start": 1610.96, "end": 1617.48, "text": " of base image, please go and have a look at App Co. And then finally the next stuff, yeah,", "tokens": [50366, 295, 3096, 3256, 11, 1767, 352, 293, 362, 257, 574, 412, 3132, 3066, 13, 400, 550, 2721, 264, 958, 1507, 11, 1338, 11, 50692], "temperature": 0.0, "avg_logprob": -0.40416648652818465, "compression_ratio": 1.4269662921348314, "no_speech_prob": 0.02253148704767227}, {"id": 244, "seek": 161092, "start": 1617.48, "end": 1621.6000000000001, "text": " that could well be a solution totally if you understand Nix and you've bought into that", "tokens": [50692, 300, 727, 731, 312, 257, 3827, 3879, 498, 291, 1223, 426, 970, 293, 291, 600, 4243, 666, 300, 50898], "temperature": 0.0, "avg_logprob": -0.40416648652818465, "compression_ratio": 1.4269662921348314, "no_speech_prob": 0.02253148704767227}, {"id": 245, "seek": 161092, "start": 1621.6000000000001, "end": 1626.6000000000001, "text": " ecosystem. Okay, what's the score?", "tokens": [50898, 11311, 13, 1033, 11, 437, 311, 264, 6175, 30, 51148], "temperature": 0.0, "avg_logprob": -0.40416648652818465, "compression_ratio": 1.4269662921348314, "no_speech_prob": 0.02253148704767227}, {"id": 246, "seek": 161092, "start": 1626.6000000000001, "end": 1631.6000000000001, "text": " Pretty good there, thank you.", "tokens": [51148, 10693, 665, 456, 11, 1309, 291, 13, 51398], "temperature": 0.0, "avg_logprob": -0.40416648652818465, "compression_ratio": 1.4269662921348314, "no_speech_prob": 0.02253148704767227}, {"id": 247, "seek": 161092, "start": 1631.6000000000001, "end": 1635.6000000000001, "text": " All right.", "tokens": [51398, 1057, 558, 13, 51598], "temperature": 0.0, "avg_logprob": -0.40416648652818465, "compression_ratio": 1.4269662921348314, "no_speech_prob": 0.02253148704767227}, {"id": 248, "seek": 163560, "start": 1635.6, "end": 1638.6, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50514], "temperature": 0.0, "avg_logprob": -0.9308629035949707, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9829584956169128}], "language": "en"}