{"text": " Actually, an ex-collworker of mine, we worked together on CertManager, if I recall correctly. We wrote a lot of tests there, not enough tests in my opinion, but there is never enough tests in the world. And I have to be honest, when I code and I'm not being paid for it, I do not write tests. So Josh does, and that's why he's going to talk to us about how to make your testing life way, way better. Right, that's possible Josh? Thank you very much. Cheers, Marsha. Good. So hi, Ron. Yeah, hopefully I can change Marsha's opinion on that during this talk. So I'm Josh. I work on the project DAPA, which is an open source project. I'm going to talk about that in a second. And the talk is about efficient integration testing in Go. So it's a case study on DAPA. I work on DAPA, I'm coming from a DAPA perspective, but the idea here is the kind of learnings that we have did through DAPA, you can kind of bring to your own project and make your project better, more efficient and correct and these kinds of things. So this is the agenda. Like I say, we'll talk about testing, we'll talk about DAPA a bit, the framework that I wrote for the integration testing in DAPA, and then some learnings and some gotchas and some things you can pick up for your own project. Cool. So testing. Why do we test software? Fundamentally, why do we test software? So the first thing is to prove the correctness of software. That's the main point, right? We write software, software is complex. Code is hardly readable by humans and we make mistakes and the more software you write, the harder it gets to keep track of the state and yeah, we all write bugs. But it's not necessarily the case that this is the only reason why we write tests. If it was the only reason why we write tests, we would write our test once and then once they start passing, we would delete the test file. So writing tests just for the correctness is not the only reason. Another reason is for putting guardrails in place. Implementation code changes over time and so assertions you want to make about your code behaving in a certain way, you want to kind of keep into the future. So yeah, that's why we don't want to delete our test files after we've written them. The next thing is ensuring compatibility with external APIs. So if you have external services, I'm thinking I come from like a Kubernetes world and things like this. So Kubernetes version changes, they break stuff all the time. You want to make sure that your code still behaves in the expected way when external things change. Verifying performance, performance testing, these kinds of things, making sure that not only your code is correct but it also does things in a timely manner or uses less resources than is your limit or things like this. And finally, and what we'll follow in this talk is hopefully that if you write a testing framework which is usable by humans and is efficient and is easy to read and use, then that testing framework itself can then be used as your kind of sandbox on how you can test or do experiments in your software and test features and things like this. So a really good testing framework is really important to improve your developer experience and the final thing is increasing developer velocity which is largely a big thing that we care about, right? We want to write features. So test types, if you open a textbook on testing, you'll probably see this graph somewhere. It's a very kind of classic visualization of the different types of testing. At the bottom you have a unit test, that's your test bar, that's your logic code, and it tests a variable equals another variable, really exciting stuff. And then at the very top you have things like your performance testing, your testings and things like this. And then the middle section you have your end-to-end and integration testing. The difference between these two things is semantic and depends what project you're talking about and who you're asking and things like this. Again, I'm coming from a dapper perspective. End-to-end tests for us are deploying to Kubernetes and running it in a Kubernetes environment and invoking it there. Integration testing is running binaries locally, typically, and that's where the differential takes place. Integration testing ideally runs quicker than your end-to-end testing. Kubernetes is a slow software so it's a pain in the ass to write loads of tests for an end-to-end test. So yeah, the talks about integration testing, what are integration tests? Fundamentally, this is what an integration test is, and this is true for a lot of testing as well. But fundamentally, you're setting up your system to be in a particular state that you care about. You're then asserting a particular behavior and then you are then cleaning up that system state. That is it. That is fundamentally what you're doing. As an example, again, going back to dapper, this might be executing one of the dapper services, then doing a curl, in this case, to make sure that the healthy endpoint returns a 200 or something like this, and then finally killing that process at the end. That's it. That's what an integration test is. Keep talking about dapper. That's interesting. That's not dapper. Okay. Try that again. What is dapper? Not that. Dapper is an open source project, all written in go. The tagline, the marketing headline, is that it is a set of APIs and SDKs and frameworks to make a developer more productive in a cloud-native environment. What that means fundamentally is that the project will expose a bunch of APIs for you that you typically need to write some business logic that does something interesting. They have a list of APIs here, so it gives you some state management, PubSub, Actors, and then you can back those APIs by whatever implementation that you want. It might have different concerns, so the infrateam might manage your postgres, and then to you as a developer, you're just exposed with the state support API. That's fundamentally what dapper is. What is important for this talk is that dapper is a complex software system. We have multiple services running, and they're all doing different things. We're all talking to each other. Maybe sometimes they're MTLS, sometimes it's not. Sometimes GRPC, sometimes HTTP. We have a whole set of APIs. We have a bunch of backing services that we support, whether it be postgres or some Google stuff, whatever it might be. The point here is that this is a very complex software system, which all software turns into over a longer period of time. When your software system becomes this complicated spaghetti mess, it becomes a house of cards. It will happen, and if anyone who's worked on a larger project will have first-hand experience, you make a small change, and that will have unexpected consequences or behaviors in a completely seemingly unrelated part of the system. You'll have software turns into house of cards, you don't want to make changes, and again you slow your developer velocity that we were talking about. How do we resolve this? Tests. We use integration testing. When I joined the project, there wasn't any integration tests, so it was kind of a blank slate. I could start from the very beginning of how I wanted our integration tests to look. I came with these set of design decisions. First of all, I wanted to go as the sole dependency on these integration tests. I hate make files. I think make is terrible, and I don't want that anywhere near having to invoke tests. The next thing that I wanted to do was to run a test. I wanted to do something like a test, and it would be worse, something like needing Python or God forbid having to run Docker or something like this. It just run my tests. We want them to be as close to what developers are doing in their day-to-day, because remember it's a community project, we have lots of contributors. Having go as a sole dependency was really important. They need to be quick. Time.sleepers.band, we'll talk about that later. Tests need to be portable. We basically get that for free with go, because go is very good in that it can be compiled to different architectures and operating systems and things like this, and it's designed from a portability perspective from the start, so we get that for free. It needs to be extensible. We have lots of contributors. People need to be able to write code for the integration tests as they contribute to the project, and it needs to be readable. Similar reasons. That was the design philosophy, the design decisions I came into the project with, or into the integration test with. Next was actually writing the framework itself. If we go back to our original diagram of fundamentally this is what an integration test is, the first thing we can do is turn this into go stuff. We create what I call the process, which is the thing that is managing the setup and also the cleanup, and then we have the test case, which is doing the assertions that we want on that particular test scenario. We can then put in some kind of wrapper stuff, so this is actually executable, and there's like an entry point into this kind of test case. And then we're in go, so it probably makes sense to make these interfaces. So this is what a test case is fundamentally. If you can do a setup and you can run, it will be able to be executable in the integration test suite. This is what an integration test looks like in DAPA. It's a single self-contained file, we do some registration on the test, and we'll talk about that in a second, and then we do a setup and then we do a run. You can see here in my setup that I'm creating a process, which is going to do the setup and the cleanup, and then the run bit is where I'm going to do the actual assertions. Talking about the process part, the bit that's responsible for the kind of dependency creation and cleanup. Again, similar story, it's an interface, it does a run, and it does a cleanup. Really simple, and that's the point, it needs to be simple. We'll talk about a bit in a second on why this is a great thing. This is what a process would look like. This is kind of like a no-op kind of example, not super important to read the whole thing. The whole idea is it's, again, a self-contained package. We have the new, which creates the thing with a bunch of options, using functional option style here, which isn't necessarily people's favorite. It made sense in this particular case. The kind of struct versus the kind of functional style is a bit of a hot topic. Yeah, it has a run and then it has a cleanup further down. I know very abstract, but it's clear, it's obviously very important to get your interfaces correct because you're going to live with these forever. Cool. We have a framework run. The thing that I wanted to point out here is we do a process run here, and then you can see that we're using the go test cleanup function, which is amazing because it puts things on a stack. When you create your dependencies, whether these be binaries or whatever else that we're using in our processes, it will clean them up in reverse order. You have that stack, which is the natural order for things to be executed and then cleaned up in. Cool. We have all our test cases defined. They're running various processes. Again, there might be executing binaries, writing to files, things like this. We do our assertions and then we do our cleanups. These will get put into test cases and then we have some kind of sweet runner that executes these tests. That's what it looks like. It's a for loop over a set of tests and it executes them. Simple stuff. The next thing is how does the integration sweet runner know about these tests? What we need is a case registry, which is just a very fancy way of saying that we have a global variable that has a slice of test cases. What is important here that I wanted to point out was that it was a design decision that our test cases, and I mentioned it before, that they should be self-isolated in single files. I think as a developer, when you're reading test cases and things like this and you're having to go backwards and forwards into various places to even follow what the test is doing, is not good practice and it's confusing. Again, you can run into these problems. In order to eliminate that, we went for the style of having an init function, which does the registration to that global variable, and then using the bare import and style to import our init functions up into the top-level registry. Next thing is naming, which is always hard. I think there's a thing where developers generally don't necessarily respect testing code as much as they should. They care a lot about their implementation code and make it look pretty and performant and things like this, but they don't necessarily respect their testing code as much. This leads on to the kind of mess that people don't want to add to it because it's difficult to read. Having respect to your test code is really important. Similarly, naming is generally really important. Go has good standard on how you should name things, i.e. meaning should be derived through context. If you have a HTTP package, don't call your thing HTTP server, call it server. It should be hierarchical. Similarly, derived meaning through context, package path, describe your thing. Less is more. Go is not an IDE language. It's a good language. You don't need to have really long names. Just be very specific. No under scores, things like this. The benefit of then treating our test cases to be this package hierarchy with very meaningful being purposeful names is that we can do some reflect magic that gets us a lot of benefits. So when I showed before that we're doing this kind of sweet test case registration, when we are registering a test or when we're pulling out all the tests, you don't need to read the code. But basically what we're doing is using reflect to name the test its package path plus that struct name. So before our thing was called base, so it pulls out the package path of where that base test file is plus the struct name itself. So in this particular case, this test would be test underscore integration, DAPID foo base. Why is this a cool thing to do? Because that means we can start doing reject searches over our tests. So you can imagine for example if I'm writing a feature for DAPID or trying to fix a bug, if I'm working on maybe the active subsystem or something like this or placement, I can in another time and I'll have my integration test running and I can just do a search, a reject search on all the tests that are in the project for related things. So yeah, being very specific about your naming means that you can search through them and run all the relevant tests. Again being quick, developer focus, good UX. Yeah, that's how you do rejects in Go for loop and then you filter out all the test names that don't match the rejects. Here's another example, I'm working on century related things or MTS related things, I want to run all the century tests, I can just give it a query. The next is processes. So these are the two bits down here, the kind of dependency setup and the cleanup. We've been talking a lot about the different services in DAPID, so these are obviously using the exec, we're exacting processes on the computer, using the exec package. What we've decided to do is follow the kind of UNIX philosophy of running these processes as in do one thing and do one thing really well. So the exec process does really good at exacting a binary on the computer. You can then wrap that process in another more meaningful, again being intentional about naming which has a bit more context about how that binary should be run. So for example, this century process has all the context of knows what the CLI flags and things like this gives it same defaults, exposes the options in a human readable way in order to run that binary. And then as I mentioned before, DAPID has lots of different services, it's a complex software system but following this UNIX philosophy you can do this wrapping in your processes to make more meaningful, higher level naming and interfaces for your developer. So I can talk about a Kubernetes process and it's very easy as a developer in my test suite to say run Kubernetes, whatever that might mean, under the hood that's actually like a mocked Kubernetes API server which is actually a HTTP server, yada yada yada. So yeah, having this kind of wrapped process is kind of an elegant way to handle that. Here's an example of another one, so there's an operator service, we're doing some log line stuff in here, some DAPID stuff, but these are very high order concepts of dependencies that we're creating and these are all wrapped going down. Process binaries, so I mentioned before that we want to go as the sole dependency and go is a good language and it's got a very good build caching system and what that means is that in our testing integration testing itself is we're building the binaries in the test, so one of the first things it's going to do is it's going to build all the binaries that are in the project, that's the code that's doing that. It's then going to write them to a deterministic static file location and what that means is that every time I invoke the test it's going to run that go build, but because of go builds cache magic it's not going to take any time at all, so I can completely retry my go test and it will just be quick. The other nice thing about this is that if I change my implementation code and just write go test in my integration test, it's going to pull all the changes that I've just made to the code right because it is building from source every time. So that's a neat thing with go piping. So software writes things to logs and these can typically be very noisy if you're running lots and lots and lots of tests and this is going to take up a lot of disk space potentially, it's going to write a lot of things to the screen and it makes it impossible to read the test output. If you've got oodles, like a gigabyte of test logs and you're trying to find one test failure and read the logs from what happened, it becomes impossible. So write these things to in-memory buffers and then you can do things like only write the in-memory log buffer to the screen if the test actually fails, which is the only time where you actually care about what the log line is. Then obviously you can do things like because it's in memory, you've got a reference to it, you've got a pointer to it, you can then do some assertions on what was in the log lines and test log lines that way. It's quite good for this, you can create pipes and things like this. All very idiomatic kind of go stuff that you're familiar with. Asserting eventually, so all software is eventually consistent fundamentally like computers that are any as quick as the speed of light that is as fast as they can go, they're not as fast as that. But fundamentally computers to do a thing will take some time. And so we have to wait a period of time to observe some behavior when we put it into a particular state. Just fundamentally we have to do that. However you should never use time.sleep to do this, which I think is very, it's always there and it's very easy to just be like, time.sleep three seconds or something like this, but you should never do it. Time.sleep is the nuclear option. So to kind of illustrate this, if a single test sleeps for five seconds and DAPA CI for example runs four times a day, not counting PRs or anything like this, just standardly runs every four times a day, this equates to two hours of idle CPU time a year. If we then do it more than this, so like DAPA currently has 133 integration tests, if just 10% of those tests sleep for five seconds, then that equates to more than an entire day in a year of idle CPU. Which is crazy, right? This is bad for the polar bears, bad for the environment, it's bad for our developers too, which, yeah. If your test takes ages to run, no one will want to run them and no one wants to add to them. So being very intentional about the speed of your tests is very important. The way to do this would be to do polling basically, so in Go there's the kind of testifier package that is really, really good and highly recommend using it and it has this eventually function. All of the functions in this package are like super sane and highly recommend used to use them. And yeah, computers are faster than you think they are. Stuff does not take as much as you think it does, so like HTTP calls over local hosts take like milliseconds. It doesn't confuse as fast as you think they are. So even I've got here an appalling of like every 100 milliseconds, maybe that is even too slow itself. So yeah, computers are faster than you think they are. Be more aggressive with your kind of assertions and your polling. Clean up. Tests should never leak. Having data leaking from one test case to another will invalidate your assertions just fundamentally. So it's very important that you clean up state in between test case runs. And yeah, and it's also the case that if you're not cleaning up the state in your project in between case runs, then you're going to reduce the resource utilization that each test case can do and it's going to slow down your tests. So I'm thinking, you know, if you've got database tests or something like this, you're writing a bunch of stuff to disk. What if you fill up the disk? You're not running any more tests, right? So clean up is important. To list through some of the things that could be interesting for you to use, use temporary directories, using the test package. That's really good. T.cleanup, we just spoke about that earlier. That's doing the kind of stack thing, so it does things in the kind of reverse order. Use port zero. Ideally your kernel is going to give you a free port if you ask for zero. Use in-memory stuff. Don't use the internet. Don't give stop channels into functions. And use context. Context is one of the best things in Go and always use context. Very quick to talk about operating systems. Operating systems are very weird. Use build tags where you need to do different file types and things like this depending on their operating system. Work through the pain. Use if statements. Yeah, and then finally being productive. So building a culture of integration tests in a distributed team is always a work in progress. To know unnecessarily really likes writing tests, however, if you write a really good test framework, that's going to encourage people to add to them. And if they're quick, they're easy to use, then yeah. A good testing framework should be usable as a development sandbox. So what I mean by that is if you're writing a new feature, your testing framework should be your first port of call to wanting to use that new feature. Tests are great because they're encode, which means they're reproducible, and I can execute them and I can make changes over time. And it's very clear what's going on. Just running binaries on your terminal and things like this are fine, but having it in test code makes the reproducible better. And then the more, again, the more higher order your processes are, the more productive your team will be. So don't describe things like your developer shouldn't be describing things like exec, this binary, things like this. They should always be in a high order kind of thing that they're describing. Again, it decreases the amount of code that you have to write in your test case and makes them more approachable for contributors. And that's me. Thank you, everyone. APPLAUSE Saved some time for you, but I don't know if you want some questions or leave it there. I can fit in one quick question. Otherwise, you can just grab them in the hallway. Ah, no question there. Let me run one second. Keep holding your hand up. So, quickly, why did you make your own sort of test filtering system instead of using Go's test filtering system? And secondly, why didn't you use an event hub instead of polling? Say the first one again, sorry. Why didn't you...", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.48, "text": " Actually, an ex-collworker of mine, we worked together on CertManager, if I recall correctly.", "tokens": [50364, 5135, 11, 364, 454, 12, 33891, 49402, 295, 3892, 11, 321, 2732, 1214, 322, 31036, 6652, 3557, 11, 498, 286, 9901, 8944, 13, 50938], "temperature": 0.0, "avg_logprob": -0.29179115755012236, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.7586609721183777}, {"id": 1, "seek": 0, "start": 11.48, "end": 15.74, "text": " We wrote a lot of tests there, not enough tests in my opinion, but there is never enough", "tokens": [50938, 492, 4114, 257, 688, 295, 6921, 456, 11, 406, 1547, 6921, 294, 452, 4800, 11, 457, 456, 307, 1128, 1547, 51151], "temperature": 0.0, "avg_logprob": -0.29179115755012236, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.7586609721183777}, {"id": 2, "seek": 0, "start": 15.74, "end": 16.740000000000002, "text": " tests in the world.", "tokens": [51151, 6921, 294, 264, 1002, 13, 51201], "temperature": 0.0, "avg_logprob": -0.29179115755012236, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.7586609721183777}, {"id": 3, "seek": 0, "start": 16.740000000000002, "end": 25.66, "text": " And I have to be honest, when I code and I'm not being paid for it, I do not write tests.", "tokens": [51201, 400, 286, 362, 281, 312, 3245, 11, 562, 286, 3089, 293, 286, 478, 406, 885, 4835, 337, 309, 11, 286, 360, 406, 2464, 6921, 13, 51647], "temperature": 0.0, "avg_logprob": -0.29179115755012236, "compression_ratio": 1.5287958115183247, "no_speech_prob": 0.7586609721183777}, {"id": 4, "seek": 2566, "start": 25.66, "end": 30.3, "text": " So Josh does, and that's why he's going to talk to us about how to make your testing", "tokens": [50364, 407, 9785, 775, 11, 293, 300, 311, 983, 415, 311, 516, 281, 751, 281, 505, 466, 577, 281, 652, 428, 4997, 50596], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 5, "seek": 2566, "start": 30.3, "end": 31.3, "text": " life way, way better.", "tokens": [50596, 993, 636, 11, 636, 1101, 13, 50646], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 6, "seek": 2566, "start": 31.3, "end": 32.3, "text": " Right, that's possible Josh?", "tokens": [50646, 1779, 11, 300, 311, 1944, 9785, 30, 50696], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 7, "seek": 2566, "start": 32.3, "end": 33.3, "text": " Thank you very much.", "tokens": [50696, 1044, 291, 588, 709, 13, 50746], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 8, "seek": 2566, "start": 33.3, "end": 34.3, "text": " Cheers, Marsha.", "tokens": [50746, 13006, 11, 9692, 1641, 13, 50796], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 9, "seek": 2566, "start": 34.3, "end": 35.3, "text": " Good.", "tokens": [50796, 2205, 13, 50846], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 10, "seek": 2566, "start": 35.3, "end": 36.3, "text": " So hi, Ron.", "tokens": [50846, 407, 4879, 11, 9949, 13, 50896], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 11, "seek": 2566, "start": 36.3, "end": 42.980000000000004, "text": " Yeah, hopefully I can change Marsha's opinion on that during this talk.", "tokens": [50896, 865, 11, 4696, 286, 393, 1319, 9692, 1641, 311, 4800, 322, 300, 1830, 341, 751, 13, 51230], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 12, "seek": 2566, "start": 42.980000000000004, "end": 44.22, "text": " So I'm Josh.", "tokens": [51230, 407, 286, 478, 9785, 13, 51292], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 13, "seek": 2566, "start": 44.22, "end": 47.94, "text": " I work on the project DAPA, which is an open source project.", "tokens": [51292, 286, 589, 322, 264, 1716, 413, 4715, 32, 11, 597, 307, 364, 1269, 4009, 1716, 13, 51478], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 14, "seek": 2566, "start": 47.94, "end": 50.900000000000006, "text": " I'm going to talk about that in a second.", "tokens": [51478, 286, 478, 516, 281, 751, 466, 300, 294, 257, 1150, 13, 51626], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 15, "seek": 2566, "start": 50.900000000000006, "end": 53.54, "text": " And the talk is about efficient integration testing in Go.", "tokens": [51626, 400, 264, 751, 307, 466, 7148, 10980, 4997, 294, 1037, 13, 51758], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 16, "seek": 2566, "start": 53.54, "end": 55.14, "text": " So it's a case study on DAPA.", "tokens": [51758, 407, 309, 311, 257, 1389, 2979, 322, 413, 4715, 32, 13, 51838], "temperature": 0.0, "avg_logprob": -0.3277599411522782, "compression_ratio": 1.6385964912280702, "no_speech_prob": 0.5086140036582947}, {"id": 17, "seek": 5514, "start": 55.14, "end": 59.620000000000005, "text": " I work on DAPA, I'm coming from a DAPA perspective, but the idea here is the kind of learnings", "tokens": [50364, 286, 589, 322, 413, 4715, 32, 11, 286, 478, 1348, 490, 257, 413, 4715, 32, 4585, 11, 457, 264, 1558, 510, 307, 264, 733, 295, 2539, 82, 50588], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 18, "seek": 5514, "start": 59.620000000000005, "end": 64.18, "text": " that we have did through DAPA, you can kind of bring to your own project and make your", "tokens": [50588, 300, 321, 362, 630, 807, 413, 4715, 32, 11, 291, 393, 733, 295, 1565, 281, 428, 1065, 1716, 293, 652, 428, 50816], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 19, "seek": 5514, "start": 64.18, "end": 68.34, "text": " project better, more efficient and correct and these kinds of things.", "tokens": [50816, 1716, 1101, 11, 544, 7148, 293, 3006, 293, 613, 3685, 295, 721, 13, 51024], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 20, "seek": 5514, "start": 68.34, "end": 69.34, "text": " So this is the agenda.", "tokens": [51024, 407, 341, 307, 264, 9829, 13, 51074], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 21, "seek": 5514, "start": 69.34, "end": 72.74000000000001, "text": " Like I say, we'll talk about testing, we'll talk about DAPA a bit, the framework that I", "tokens": [51074, 1743, 286, 584, 11, 321, 603, 751, 466, 4997, 11, 321, 603, 751, 466, 413, 4715, 32, 257, 857, 11, 264, 8388, 300, 286, 51244], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 22, "seek": 5514, "start": 72.74000000000001, "end": 77.62, "text": " wrote for the integration testing in DAPA, and then some learnings and some gotchas and", "tokens": [51244, 4114, 337, 264, 10980, 4997, 294, 413, 4715, 32, 11, 293, 550, 512, 2539, 82, 293, 512, 658, 41299, 293, 51488], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 23, "seek": 5514, "start": 77.62, "end": 81.02, "text": " some things you can pick up for your own project.", "tokens": [51488, 512, 721, 291, 393, 1888, 493, 337, 428, 1065, 1716, 13, 51658], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 24, "seek": 5514, "start": 81.02, "end": 82.02, "text": " Cool.", "tokens": [51658, 8561, 13, 51708], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 25, "seek": 5514, "start": 82.02, "end": 83.02, "text": " So testing.", "tokens": [51708, 407, 4997, 13, 51758], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 26, "seek": 5514, "start": 83.02, "end": 84.34, "text": " Why do we test software?", "tokens": [51758, 1545, 360, 321, 1500, 4722, 30, 51824], "temperature": 0.0, "avg_logprob": -0.17838746347735004, "compression_ratio": 1.846938775510204, "no_speech_prob": 0.04501727595925331}, {"id": 27, "seek": 8434, "start": 84.34, "end": 87.06, "text": " Fundamentally, why do we test software?", "tokens": [50364, 13493, 2466, 379, 11, 983, 360, 321, 1500, 4722, 30, 50500], "temperature": 0.0, "avg_logprob": -0.16363756744949906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0729752704501152}, {"id": 28, "seek": 8434, "start": 87.06, "end": 90.9, "text": " So the first thing is to prove the correctness of software.", "tokens": [50500, 407, 264, 700, 551, 307, 281, 7081, 264, 3006, 1287, 295, 4722, 13, 50692], "temperature": 0.0, "avg_logprob": -0.16363756744949906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0729752704501152}, {"id": 29, "seek": 8434, "start": 90.9, "end": 92.62, "text": " That's the main point, right?", "tokens": [50692, 663, 311, 264, 2135, 935, 11, 558, 30, 50778], "temperature": 0.0, "avg_logprob": -0.16363756744949906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0729752704501152}, {"id": 30, "seek": 8434, "start": 92.62, "end": 96.02000000000001, "text": " We write software, software is complex.", "tokens": [50778, 492, 2464, 4722, 11, 4722, 307, 3997, 13, 50948], "temperature": 0.0, "avg_logprob": -0.16363756744949906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0729752704501152}, {"id": 31, "seek": 8434, "start": 96.02000000000001, "end": 100.94, "text": " Code is hardly readable by humans and we make mistakes and the more software you write,", "tokens": [50948, 15549, 307, 13572, 49857, 538, 6255, 293, 321, 652, 8038, 293, 264, 544, 4722, 291, 2464, 11, 51194], "temperature": 0.0, "avg_logprob": -0.16363756744949906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0729752704501152}, {"id": 32, "seek": 8434, "start": 100.94, "end": 106.58000000000001, "text": " the harder it gets to keep track of the state and yeah, we all write bugs.", "tokens": [51194, 264, 6081, 309, 2170, 281, 1066, 2837, 295, 264, 1785, 293, 1338, 11, 321, 439, 2464, 15120, 13, 51476], "temperature": 0.0, "avg_logprob": -0.16363756744949906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0729752704501152}, {"id": 33, "seek": 8434, "start": 106.58000000000001, "end": 111.06, "text": " But it's not necessarily the case that this is the only reason why we write tests.", "tokens": [51476, 583, 309, 311, 406, 4725, 264, 1389, 300, 341, 307, 264, 787, 1778, 983, 321, 2464, 6921, 13, 51700], "temperature": 0.0, "avg_logprob": -0.16363756744949906, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0729752704501152}, {"id": 34, "seek": 11106, "start": 111.06, "end": 115.42, "text": " If it was the only reason why we write tests, we would write our test once and then once", "tokens": [50364, 759, 309, 390, 264, 787, 1778, 983, 321, 2464, 6921, 11, 321, 576, 2464, 527, 1500, 1564, 293, 550, 1564, 50582], "temperature": 0.0, "avg_logprob": -0.12265653685321957, "compression_ratio": 1.8145454545454545, "no_speech_prob": 0.05130903422832489}, {"id": 35, "seek": 11106, "start": 115.42, "end": 118.06, "text": " they start passing, we would delete the test file.", "tokens": [50582, 436, 722, 8437, 11, 321, 576, 12097, 264, 1500, 3991, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12265653685321957, "compression_ratio": 1.8145454545454545, "no_speech_prob": 0.05130903422832489}, {"id": 36, "seek": 11106, "start": 118.06, "end": 121.98, "text": " So writing tests just for the correctness is not the only reason.", "tokens": [50714, 407, 3579, 6921, 445, 337, 264, 3006, 1287, 307, 406, 264, 787, 1778, 13, 50910], "temperature": 0.0, "avg_logprob": -0.12265653685321957, "compression_ratio": 1.8145454545454545, "no_speech_prob": 0.05130903422832489}, {"id": 37, "seek": 11106, "start": 121.98, "end": 125.46000000000001, "text": " Another reason is for putting guardrails in place.", "tokens": [50910, 3996, 1778, 307, 337, 3372, 6290, 424, 4174, 294, 1081, 13, 51084], "temperature": 0.0, "avg_logprob": -0.12265653685321957, "compression_ratio": 1.8145454545454545, "no_speech_prob": 0.05130903422832489}, {"id": 38, "seek": 11106, "start": 125.46000000000001, "end": 129.7, "text": " Implementation code changes over time and so assertions you want to make about your code", "tokens": [51084, 4331, 781, 19631, 3089, 2962, 670, 565, 293, 370, 19810, 626, 291, 528, 281, 652, 466, 428, 3089, 51296], "temperature": 0.0, "avg_logprob": -0.12265653685321957, "compression_ratio": 1.8145454545454545, "no_speech_prob": 0.05130903422832489}, {"id": 39, "seek": 11106, "start": 129.7, "end": 133.74, "text": " behaving in a certain way, you want to kind of keep into the future.", "tokens": [51296, 35263, 294, 257, 1629, 636, 11, 291, 528, 281, 733, 295, 1066, 666, 264, 2027, 13, 51498], "temperature": 0.0, "avg_logprob": -0.12265653685321957, "compression_ratio": 1.8145454545454545, "no_speech_prob": 0.05130903422832489}, {"id": 40, "seek": 11106, "start": 133.74, "end": 138.06, "text": " So yeah, that's why we don't want to delete our test files after we've written them.", "tokens": [51498, 407, 1338, 11, 300, 311, 983, 321, 500, 380, 528, 281, 12097, 527, 1500, 7098, 934, 321, 600, 3720, 552, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12265653685321957, "compression_ratio": 1.8145454545454545, "no_speech_prob": 0.05130903422832489}, {"id": 41, "seek": 13806, "start": 138.06, "end": 142.26, "text": " The next thing is ensuring compatibility with external APIs.", "tokens": [50364, 440, 958, 551, 307, 16882, 34237, 365, 8320, 21445, 13, 50574], "temperature": 0.0, "avg_logprob": -0.16562359022057574, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.04009624943137169}, {"id": 42, "seek": 13806, "start": 142.26, "end": 147.62, "text": " So if you have external services, I'm thinking I come from like a Kubernetes world and things", "tokens": [50574, 407, 498, 291, 362, 8320, 3328, 11, 286, 478, 1953, 286, 808, 490, 411, 257, 23145, 1002, 293, 721, 50842], "temperature": 0.0, "avg_logprob": -0.16562359022057574, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.04009624943137169}, {"id": 43, "seek": 13806, "start": 147.62, "end": 148.62, "text": " like this.", "tokens": [50842, 411, 341, 13, 50892], "temperature": 0.0, "avg_logprob": -0.16562359022057574, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.04009624943137169}, {"id": 44, "seek": 13806, "start": 148.62, "end": 151.14000000000001, "text": " So Kubernetes version changes, they break stuff all the time.", "tokens": [50892, 407, 23145, 3037, 2962, 11, 436, 1821, 1507, 439, 264, 565, 13, 51018], "temperature": 0.0, "avg_logprob": -0.16562359022057574, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.04009624943137169}, {"id": 45, "seek": 13806, "start": 151.14000000000001, "end": 154.66, "text": " You want to make sure that your code still behaves in the expected way when external", "tokens": [51018, 509, 528, 281, 652, 988, 300, 428, 3089, 920, 36896, 294, 264, 5176, 636, 562, 8320, 51194], "temperature": 0.0, "avg_logprob": -0.16562359022057574, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.04009624943137169}, {"id": 46, "seek": 13806, "start": 154.66, "end": 157.5, "text": " things change.", "tokens": [51194, 721, 1319, 13, 51336], "temperature": 0.0, "avg_logprob": -0.16562359022057574, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.04009624943137169}, {"id": 47, "seek": 13806, "start": 157.5, "end": 160.74, "text": " Verifying performance, performance testing, these kinds of things, making sure that not", "tokens": [51336, 4281, 5489, 3389, 11, 3389, 4997, 11, 613, 3685, 295, 721, 11, 1455, 988, 300, 406, 51498], "temperature": 0.0, "avg_logprob": -0.16562359022057574, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.04009624943137169}, {"id": 48, "seek": 13806, "start": 160.74, "end": 165.82, "text": " only your code is correct but it also does things in a timely manner or uses less resources", "tokens": [51498, 787, 428, 3089, 307, 3006, 457, 309, 611, 775, 721, 294, 257, 25150, 9060, 420, 4960, 1570, 3593, 51752], "temperature": 0.0, "avg_logprob": -0.16562359022057574, "compression_ratio": 1.7422680412371134, "no_speech_prob": 0.04009624943137169}, {"id": 49, "seek": 16582, "start": 165.82, "end": 169.42, "text": " than is your limit or things like this.", "tokens": [50364, 813, 307, 428, 4948, 420, 721, 411, 341, 13, 50544], "temperature": 0.0, "avg_logprob": -0.17626143561469185, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.15536333620548248}, {"id": 50, "seek": 16582, "start": 169.42, "end": 174.98, "text": " And finally, and what we'll follow in this talk is hopefully that if you write a testing", "tokens": [50544, 400, 2721, 11, 293, 437, 321, 603, 1524, 294, 341, 751, 307, 4696, 300, 498, 291, 2464, 257, 4997, 50822], "temperature": 0.0, "avg_logprob": -0.17626143561469185, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.15536333620548248}, {"id": 51, "seek": 16582, "start": 174.98, "end": 183.45999999999998, "text": " framework which is usable by humans and is efficient and is easy to read and use, then", "tokens": [50822, 8388, 597, 307, 29975, 538, 6255, 293, 307, 7148, 293, 307, 1858, 281, 1401, 293, 764, 11, 550, 51246], "temperature": 0.0, "avg_logprob": -0.17626143561469185, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.15536333620548248}, {"id": 52, "seek": 16582, "start": 183.45999999999998, "end": 188.14, "text": " that testing framework itself can then be used as your kind of sandbox on how you can", "tokens": [51246, 300, 4997, 8388, 2564, 393, 550, 312, 1143, 382, 428, 733, 295, 42115, 322, 577, 291, 393, 51480], "temperature": 0.0, "avg_logprob": -0.17626143561469185, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.15536333620548248}, {"id": 53, "seek": 16582, "start": 188.14, "end": 193.06, "text": " test or do experiments in your software and test features and things like this.", "tokens": [51480, 1500, 420, 360, 12050, 294, 428, 4722, 293, 1500, 4122, 293, 721, 411, 341, 13, 51726], "temperature": 0.0, "avg_logprob": -0.17626143561469185, "compression_ratio": 1.7638888888888888, "no_speech_prob": 0.15536333620548248}, {"id": 54, "seek": 19306, "start": 193.06, "end": 199.58, "text": " So a really good testing framework is really important to improve your developer experience", "tokens": [50364, 407, 257, 534, 665, 4997, 8388, 307, 534, 1021, 281, 3470, 428, 10754, 1752, 50690], "temperature": 0.0, "avg_logprob": -0.22892218695746527, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.058898407965898514}, {"id": 55, "seek": 19306, "start": 199.58, "end": 205.5, "text": " and the final thing is increasing developer velocity which is largely a big thing that", "tokens": [50690, 293, 264, 2572, 551, 307, 5662, 10754, 9269, 597, 307, 11611, 257, 955, 551, 300, 50986], "temperature": 0.0, "avg_logprob": -0.22892218695746527, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.058898407965898514}, {"id": 56, "seek": 19306, "start": 205.5, "end": 206.62, "text": " we care about, right?", "tokens": [50986, 321, 1127, 466, 11, 558, 30, 51042], "temperature": 0.0, "avg_logprob": -0.22892218695746527, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.058898407965898514}, {"id": 57, "seek": 19306, "start": 206.62, "end": 208.82, "text": " We want to write features.", "tokens": [51042, 492, 528, 281, 2464, 4122, 13, 51152], "temperature": 0.0, "avg_logprob": -0.22892218695746527, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.058898407965898514}, {"id": 58, "seek": 19306, "start": 208.82, "end": 215.66, "text": " So test types, if you open a textbook on testing, you'll probably see this graph somewhere.", "tokens": [51152, 407, 1500, 3467, 11, 498, 291, 1269, 257, 25591, 322, 4997, 11, 291, 603, 1391, 536, 341, 4295, 4079, 13, 51494], "temperature": 0.0, "avg_logprob": -0.22892218695746527, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.058898407965898514}, {"id": 59, "seek": 19306, "start": 215.66, "end": 219.02, "text": " It's a very kind of classic visualization of the different types of testing.", "tokens": [51494, 467, 311, 257, 588, 733, 295, 7230, 25801, 295, 264, 819, 3467, 295, 4997, 13, 51662], "temperature": 0.0, "avg_logprob": -0.22892218695746527, "compression_ratio": 1.596774193548387, "no_speech_prob": 0.058898407965898514}, {"id": 60, "seek": 21902, "start": 219.46, "end": 223.06, "text": " At the bottom you have a unit test, that's your test bar, that's your logic code, and", "tokens": [50386, 1711, 264, 2767, 291, 362, 257, 4985, 1500, 11, 300, 311, 428, 1500, 2159, 11, 300, 311, 428, 9952, 3089, 11, 293, 50566], "temperature": 0.0, "avg_logprob": -0.309874564409256, "compression_ratio": 1.8785714285714286, "no_speech_prob": 0.22102364897727966}, {"id": 61, "seek": 21902, "start": 223.06, "end": 226.70000000000002, "text": " it tests a variable equals another variable, really exciting stuff.", "tokens": [50566, 309, 6921, 257, 7006, 6915, 1071, 7006, 11, 534, 4670, 1507, 13, 50748], "temperature": 0.0, "avg_logprob": -0.309874564409256, "compression_ratio": 1.8785714285714286, "no_speech_prob": 0.22102364897727966}, {"id": 62, "seek": 21902, "start": 226.70000000000002, "end": 230.34, "text": " And then at the very top you have things like your performance testing, your testings and", "tokens": [50748, 400, 550, 412, 264, 588, 1192, 291, 362, 721, 411, 428, 3389, 4997, 11, 428, 1500, 1109, 293, 50930], "temperature": 0.0, "avg_logprob": -0.309874564409256, "compression_ratio": 1.8785714285714286, "no_speech_prob": 0.22102364897727966}, {"id": 63, "seek": 21902, "start": 230.34, "end": 231.98000000000002, "text": " things like this.", "tokens": [50930, 721, 411, 341, 13, 51012], "temperature": 0.0, "avg_logprob": -0.309874564409256, "compression_ratio": 1.8785714285714286, "no_speech_prob": 0.22102364897727966}, {"id": 64, "seek": 21902, "start": 231.98000000000002, "end": 237.78, "text": " And then the middle section you have your end-to-end and integration testing.", "tokens": [51012, 400, 550, 264, 2808, 3541, 291, 362, 428, 917, 12, 1353, 12, 521, 293, 10980, 4997, 13, 51302], "temperature": 0.0, "avg_logprob": -0.309874564409256, "compression_ratio": 1.8785714285714286, "no_speech_prob": 0.22102364897727966}, {"id": 65, "seek": 21902, "start": 237.78, "end": 241.10000000000002, "text": " The difference between these two things is semantic and depends what project you're talking", "tokens": [51302, 440, 2649, 1296, 613, 732, 721, 307, 47982, 293, 5946, 437, 1716, 291, 434, 1417, 51468], "temperature": 0.0, "avg_logprob": -0.309874564409256, "compression_ratio": 1.8785714285714286, "no_speech_prob": 0.22102364897727966}, {"id": 66, "seek": 21902, "start": 241.10000000000002, "end": 243.9, "text": " about and who you're asking and things like this.", "tokens": [51468, 466, 293, 567, 291, 434, 3365, 293, 721, 411, 341, 13, 51608], "temperature": 0.0, "avg_logprob": -0.309874564409256, "compression_ratio": 1.8785714285714286, "no_speech_prob": 0.22102364897727966}, {"id": 67, "seek": 21902, "start": 243.9, "end": 246.62, "text": " Again, I'm coming from a dapper perspective.", "tokens": [51608, 3764, 11, 286, 478, 1348, 490, 257, 1120, 3717, 4585, 13, 51744], "temperature": 0.0, "avg_logprob": -0.309874564409256, "compression_ratio": 1.8785714285714286, "no_speech_prob": 0.22102364897727966}, {"id": 68, "seek": 24662, "start": 246.62, "end": 251.5, "text": " End-to-end tests for us are deploying to Kubernetes and running it in a Kubernetes environment", "tokens": [50364, 6967, 12, 1353, 12, 521, 6921, 337, 505, 366, 34198, 281, 23145, 293, 2614, 309, 294, 257, 23145, 2823, 50608], "temperature": 0.0, "avg_logprob": -0.23503473069932726, "compression_ratio": 1.8844621513944224, "no_speech_prob": 0.1022576317191124}, {"id": 69, "seek": 24662, "start": 251.5, "end": 253.1, "text": " and invoking it there.", "tokens": [50608, 293, 1048, 5953, 309, 456, 13, 50688], "temperature": 0.0, "avg_logprob": -0.23503473069932726, "compression_ratio": 1.8844621513944224, "no_speech_prob": 0.1022576317191124}, {"id": 70, "seek": 24662, "start": 253.1, "end": 258.54, "text": " Integration testing is running binaries locally, typically, and that's where the differential", "tokens": [50688, 47713, 4997, 307, 2614, 5171, 4889, 16143, 11, 5850, 11, 293, 300, 311, 689, 264, 15756, 50960], "temperature": 0.0, "avg_logprob": -0.23503473069932726, "compression_ratio": 1.8844621513944224, "no_speech_prob": 0.1022576317191124}, {"id": 71, "seek": 24662, "start": 258.54, "end": 261.34000000000003, "text": " takes place.", "tokens": [50960, 2516, 1081, 13, 51100], "temperature": 0.0, "avg_logprob": -0.23503473069932726, "compression_ratio": 1.8844621513944224, "no_speech_prob": 0.1022576317191124}, {"id": 72, "seek": 24662, "start": 261.34000000000003, "end": 264.46, "text": " Integration testing ideally runs quicker than your end-to-end testing.", "tokens": [51100, 47713, 4997, 22915, 6676, 16255, 813, 428, 917, 12, 1353, 12, 521, 4997, 13, 51256], "temperature": 0.0, "avg_logprob": -0.23503473069932726, "compression_ratio": 1.8844621513944224, "no_speech_prob": 0.1022576317191124}, {"id": 73, "seek": 24662, "start": 264.46, "end": 268.78000000000003, "text": " Kubernetes is a slow software so it's a pain in the ass to write loads of tests for an", "tokens": [51256, 23145, 307, 257, 2964, 4722, 370, 309, 311, 257, 1822, 294, 264, 1256, 281, 2464, 12668, 295, 6921, 337, 364, 51472], "temperature": 0.0, "avg_logprob": -0.23503473069932726, "compression_ratio": 1.8844621513944224, "no_speech_prob": 0.1022576317191124}, {"id": 74, "seek": 24662, "start": 268.78000000000003, "end": 271.62, "text": " end-to-end test.", "tokens": [51472, 917, 12, 1353, 12, 521, 1500, 13, 51614], "temperature": 0.0, "avg_logprob": -0.23503473069932726, "compression_ratio": 1.8844621513944224, "no_speech_prob": 0.1022576317191124}, {"id": 75, "seek": 24662, "start": 271.62, "end": 275.54, "text": " So yeah, the talks about integration testing, what are integration tests?", "tokens": [51614, 407, 1338, 11, 264, 6686, 466, 10980, 4997, 11, 437, 366, 10980, 6921, 30, 51810], "temperature": 0.0, "avg_logprob": -0.23503473069932726, "compression_ratio": 1.8844621513944224, "no_speech_prob": 0.1022576317191124}, {"id": 76, "seek": 27554, "start": 275.54, "end": 281.90000000000003, "text": " Fundamentally, this is what an integration test is, and this is true for a lot of testing", "tokens": [50364, 13493, 2466, 379, 11, 341, 307, 437, 364, 10980, 1500, 307, 11, 293, 341, 307, 2074, 337, 257, 688, 295, 4997, 50682], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 77, "seek": 27554, "start": 281.90000000000003, "end": 282.90000000000003, "text": " as well.", "tokens": [50682, 382, 731, 13, 50732], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 78, "seek": 27554, "start": 282.90000000000003, "end": 286.86, "text": " But fundamentally, you're setting up your system to be in a particular state that you", "tokens": [50732, 583, 17879, 11, 291, 434, 3287, 493, 428, 1185, 281, 312, 294, 257, 1729, 1785, 300, 291, 50930], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 79, "seek": 27554, "start": 286.86, "end": 287.86, "text": " care about.", "tokens": [50930, 1127, 466, 13, 50980], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 80, "seek": 27554, "start": 287.86, "end": 291.70000000000005, "text": " You're then asserting a particular behavior and then you are then cleaning up that system", "tokens": [50980, 509, 434, 550, 1256, 27187, 257, 1729, 5223, 293, 550, 291, 366, 550, 8924, 493, 300, 1185, 51172], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 81, "seek": 27554, "start": 291.70000000000005, "end": 292.70000000000005, "text": " state.", "tokens": [51172, 1785, 13, 51222], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 82, "seek": 27554, "start": 292.70000000000005, "end": 293.70000000000005, "text": " That is it.", "tokens": [51222, 663, 307, 309, 13, 51272], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 83, "seek": 27554, "start": 293.70000000000005, "end": 296.26, "text": " That is fundamentally what you're doing.", "tokens": [51272, 663, 307, 17879, 437, 291, 434, 884, 13, 51400], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 84, "seek": 27554, "start": 296.26, "end": 300.06, "text": " As an example, again, going back to dapper, this might be executing one of the dapper", "tokens": [51400, 1018, 364, 1365, 11, 797, 11, 516, 646, 281, 1120, 3717, 11, 341, 1062, 312, 32368, 472, 295, 264, 1120, 3717, 51590], "temperature": 0.0, "avg_logprob": -0.16173982620239258, "compression_ratio": 1.8075313807531381, "no_speech_prob": 0.2058373987674713}, {"id": 85, "seek": 30006, "start": 300.06, "end": 305.54, "text": " services, then doing a curl, in this case, to make sure that the healthy endpoint returns", "tokens": [50364, 3328, 11, 550, 884, 257, 22591, 11, 294, 341, 1389, 11, 281, 652, 988, 300, 264, 4627, 35795, 11247, 50638], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 86, "seek": 30006, "start": 305.54, "end": 311.34, "text": " a 200 or something like this, and then finally killing that process at the end.", "tokens": [50638, 257, 2331, 420, 746, 411, 341, 11, 293, 550, 2721, 8011, 300, 1399, 412, 264, 917, 13, 50928], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 87, "seek": 30006, "start": 311.34, "end": 312.34000000000003, "text": " That's it.", "tokens": [50928, 663, 311, 309, 13, 50978], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 88, "seek": 30006, "start": 312.34000000000003, "end": 314.5, "text": " That's what an integration test is.", "tokens": [50978, 663, 311, 437, 364, 10980, 1500, 307, 13, 51086], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 89, "seek": 30006, "start": 314.5, "end": 318.5, "text": " Keep talking about dapper.", "tokens": [51086, 5527, 1417, 466, 1120, 3717, 13, 51286], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 90, "seek": 30006, "start": 318.5, "end": 321.86, "text": " That's interesting.", "tokens": [51286, 663, 311, 1880, 13, 51454], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 91, "seek": 30006, "start": 321.86, "end": 323.02, "text": " That's not dapper.", "tokens": [51454, 663, 311, 406, 1120, 3717, 13, 51512], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 92, "seek": 30006, "start": 323.02, "end": 324.02, "text": " Okay.", "tokens": [51512, 1033, 13, 51562], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 93, "seek": 30006, "start": 324.02, "end": 325.7, "text": " Try that again.", "tokens": [51562, 6526, 300, 797, 13, 51646], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 94, "seek": 30006, "start": 325.7, "end": 326.7, "text": " What is dapper?", "tokens": [51646, 708, 307, 1120, 3717, 30, 51696], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 95, "seek": 30006, "start": 326.7, "end": 327.7, "text": " Not that.", "tokens": [51696, 1726, 300, 13, 51746], "temperature": 0.0, "avg_logprob": -0.23212361803241804, "compression_ratio": 1.5942028985507246, "no_speech_prob": 0.06565523147583008}, {"id": 96, "seek": 32770, "start": 327.97999999999996, "end": 332.3, "text": " Dapper is an open source project, all written in go.", "tokens": [50378, 413, 34456, 307, 364, 1269, 4009, 1716, 11, 439, 3720, 294, 352, 13, 50594], "temperature": 0.0, "avg_logprob": -0.21512560258831895, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.039383430033922195}, {"id": 97, "seek": 32770, "start": 332.3, "end": 339.38, "text": " The tagline, the marketing headline, is that it is a set of APIs and SDKs and frameworks", "tokens": [50594, 440, 6162, 1889, 11, 264, 6370, 28380, 11, 307, 300, 309, 307, 257, 992, 295, 21445, 293, 37135, 82, 293, 29834, 50948], "temperature": 0.0, "avg_logprob": -0.21512560258831895, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.039383430033922195}, {"id": 98, "seek": 32770, "start": 339.38, "end": 344.3, "text": " to make a developer more productive in a cloud-native environment.", "tokens": [50948, 281, 652, 257, 10754, 544, 13304, 294, 257, 4588, 12, 77, 1166, 2823, 13, 51194], "temperature": 0.0, "avg_logprob": -0.21512560258831895, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.039383430033922195}, {"id": 99, "seek": 32770, "start": 344.3, "end": 348.21999999999997, "text": " What that means fundamentally is that the project will expose a bunch of APIs for you", "tokens": [51194, 708, 300, 1355, 17879, 307, 300, 264, 1716, 486, 19219, 257, 3840, 295, 21445, 337, 291, 51390], "temperature": 0.0, "avg_logprob": -0.21512560258831895, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.039383430033922195}, {"id": 100, "seek": 32770, "start": 348.21999999999997, "end": 351.62, "text": " that you typically need to write some business logic that does something interesting.", "tokens": [51390, 300, 291, 5850, 643, 281, 2464, 512, 1606, 9952, 300, 775, 746, 1880, 13, 51560], "temperature": 0.0, "avg_logprob": -0.21512560258831895, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.039383430033922195}, {"id": 101, "seek": 32770, "start": 351.62, "end": 357.46, "text": " They have a list of APIs here, so it gives you some state management, PubSub, Actors,", "tokens": [51560, 814, 362, 257, 1329, 295, 21445, 510, 11, 370, 309, 2709, 291, 512, 1785, 4592, 11, 21808, 39582, 11, 3251, 830, 11, 51852], "temperature": 0.0, "avg_logprob": -0.21512560258831895, "compression_ratio": 1.6583629893238434, "no_speech_prob": 0.039383430033922195}, {"id": 102, "seek": 35746, "start": 358.21999999999997, "end": 363.46, "text": " and then you can back those APIs by whatever implementation that you want.", "tokens": [50402, 293, 550, 291, 393, 646, 729, 21445, 538, 2035, 11420, 300, 291, 528, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3461580200195313, "compression_ratio": 1.7060810810810811, "no_speech_prob": 0.059429802000522614}, {"id": 103, "seek": 35746, "start": 363.46, "end": 368.65999999999997, "text": " It might have different concerns, so the infrateam might manage your postgres, and then to you", "tokens": [50664, 467, 1062, 362, 819, 7389, 11, 370, 264, 1536, 4404, 335, 1062, 3067, 428, 2183, 45189, 11, 293, 550, 281, 291, 50924], "temperature": 0.0, "avg_logprob": -0.3461580200195313, "compression_ratio": 1.7060810810810811, "no_speech_prob": 0.059429802000522614}, {"id": 104, "seek": 35746, "start": 368.65999999999997, "end": 371.78, "text": " as a developer, you're just exposed with the state support API.", "tokens": [50924, 382, 257, 10754, 11, 291, 434, 445, 9495, 365, 264, 1785, 1406, 9362, 13, 51080], "temperature": 0.0, "avg_logprob": -0.3461580200195313, "compression_ratio": 1.7060810810810811, "no_speech_prob": 0.059429802000522614}, {"id": 105, "seek": 35746, "start": 371.78, "end": 373.62, "text": " That's fundamentally what dapper is.", "tokens": [51080, 663, 311, 17879, 437, 1120, 3717, 307, 13, 51172], "temperature": 0.0, "avg_logprob": -0.3461580200195313, "compression_ratio": 1.7060810810810811, "no_speech_prob": 0.059429802000522614}, {"id": 106, "seek": 35746, "start": 373.62, "end": 378.46, "text": " What is important for this talk is that dapper is a complex software system.", "tokens": [51172, 708, 307, 1021, 337, 341, 751, 307, 300, 1120, 3717, 307, 257, 3997, 4722, 1185, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3461580200195313, "compression_ratio": 1.7060810810810811, "no_speech_prob": 0.059429802000522614}, {"id": 107, "seek": 35746, "start": 378.46, "end": 381.38, "text": " We have multiple services running, and they're all doing different things.", "tokens": [51414, 492, 362, 3866, 3328, 2614, 11, 293, 436, 434, 439, 884, 819, 721, 13, 51560], "temperature": 0.0, "avg_logprob": -0.3461580200195313, "compression_ratio": 1.7060810810810811, "no_speech_prob": 0.059429802000522614}, {"id": 108, "seek": 35746, "start": 381.38, "end": 382.62, "text": " We're all talking to each other.", "tokens": [51560, 492, 434, 439, 1417, 281, 1184, 661, 13, 51622], "temperature": 0.0, "avg_logprob": -0.3461580200195313, "compression_ratio": 1.7060810810810811, "no_speech_prob": 0.059429802000522614}, {"id": 109, "seek": 35746, "start": 382.62, "end": 384.9, "text": " Maybe sometimes they're MTLS, sometimes it's not.", "tokens": [51622, 2704, 2171, 436, 434, 37333, 19198, 11, 2171, 309, 311, 406, 13, 51736], "temperature": 0.0, "avg_logprob": -0.3461580200195313, "compression_ratio": 1.7060810810810811, "no_speech_prob": 0.059429802000522614}, {"id": 110, "seek": 38490, "start": 384.94, "end": 386.7, "text": " Sometimes GRPC, sometimes HTTP.", "tokens": [50366, 4803, 10903, 12986, 11, 2171, 33283, 13, 50454], "temperature": 0.0, "avg_logprob": -0.19494557621503117, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.01895281672477722}, {"id": 111, "seek": 38490, "start": 386.7, "end": 388.17999999999995, "text": " We have a whole set of APIs.", "tokens": [50454, 492, 362, 257, 1379, 992, 295, 21445, 13, 50528], "temperature": 0.0, "avg_logprob": -0.19494557621503117, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.01895281672477722}, {"id": 112, "seek": 38490, "start": 388.17999999999995, "end": 394.46, "text": " We have a bunch of backing services that we support, whether it be postgres or some", "tokens": [50528, 492, 362, 257, 3840, 295, 19373, 3328, 300, 321, 1406, 11, 1968, 309, 312, 2183, 45189, 420, 512, 50842], "temperature": 0.0, "avg_logprob": -0.19494557621503117, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.01895281672477722}, {"id": 113, "seek": 38490, "start": 394.46, "end": 397.46, "text": " Google stuff, whatever it might be.", "tokens": [50842, 3329, 1507, 11, 2035, 309, 1062, 312, 13, 50992], "temperature": 0.0, "avg_logprob": -0.19494557621503117, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.01895281672477722}, {"id": 114, "seek": 38490, "start": 397.46, "end": 403.14, "text": " The point here is that this is a very complex software system, which all software turns", "tokens": [50992, 440, 935, 510, 307, 300, 341, 307, 257, 588, 3997, 4722, 1185, 11, 597, 439, 4722, 4523, 51276], "temperature": 0.0, "avg_logprob": -0.19494557621503117, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.01895281672477722}, {"id": 115, "seek": 38490, "start": 403.14, "end": 407.58, "text": " into over a longer period of time.", "tokens": [51276, 666, 670, 257, 2854, 2896, 295, 565, 13, 51498], "temperature": 0.0, "avg_logprob": -0.19494557621503117, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.01895281672477722}, {"id": 116, "seek": 38490, "start": 407.58, "end": 414.5, "text": " When your software system becomes this complicated spaghetti mess, it becomes a house of cards.", "tokens": [51498, 1133, 428, 4722, 1185, 3643, 341, 6179, 28556, 2082, 11, 309, 3643, 257, 1782, 295, 5632, 13, 51844], "temperature": 0.0, "avg_logprob": -0.19494557621503117, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.01895281672477722}, {"id": 117, "seek": 41450, "start": 414.58, "end": 419.62, "text": " It will happen, and if anyone who's worked on a larger project will have first-hand experience,", "tokens": [50368, 467, 486, 1051, 11, 293, 498, 2878, 567, 311, 2732, 322, 257, 4833, 1716, 486, 362, 700, 12, 5543, 1752, 11, 50620], "temperature": 0.0, "avg_logprob": -0.3181417606495045, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.008286897093057632}, {"id": 118, "seek": 41450, "start": 419.62, "end": 424.02, "text": " you make a small change, and that will have unexpected consequences or behaviors in a", "tokens": [50620, 291, 652, 257, 1359, 1319, 11, 293, 300, 486, 362, 13106, 10098, 420, 15501, 294, 257, 50840], "temperature": 0.0, "avg_logprob": -0.3181417606495045, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.008286897093057632}, {"id": 119, "seek": 41450, "start": 424.02, "end": 428.54, "text": " completely seemingly unrelated part of the system.", "tokens": [50840, 2584, 18709, 38967, 644, 295, 264, 1185, 13, 51066], "temperature": 0.0, "avg_logprob": -0.3181417606495045, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.008286897093057632}, {"id": 120, "seek": 41450, "start": 428.54, "end": 431.34, "text": " You'll have software turns into house of cards, you don't want to make changes, and", "tokens": [51066, 509, 603, 362, 4722, 4523, 666, 1782, 295, 5632, 11, 291, 500, 380, 528, 281, 652, 2962, 11, 293, 51206], "temperature": 0.0, "avg_logprob": -0.3181417606495045, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.008286897093057632}, {"id": 121, "seek": 41450, "start": 431.34, "end": 435.14, "text": " again you slow your developer velocity that we were talking about.", "tokens": [51206, 797, 291, 2964, 428, 10754, 9269, 300, 321, 645, 1417, 466, 13, 51396], "temperature": 0.0, "avg_logprob": -0.3181417606495045, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.008286897093057632}, {"id": 122, "seek": 41450, "start": 435.14, "end": 436.58, "text": " How do we resolve this?", "tokens": [51396, 1012, 360, 321, 14151, 341, 30, 51468], "temperature": 0.0, "avg_logprob": -0.3181417606495045, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.008286897093057632}, {"id": 123, "seek": 41450, "start": 436.58, "end": 437.98, "text": " Tests.", "tokens": [51468, 314, 4409, 13, 51538], "temperature": 0.0, "avg_logprob": -0.3181417606495045, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.008286897093057632}, {"id": 124, "seek": 41450, "start": 437.98, "end": 440.18, "text": " We use integration testing.", "tokens": [51538, 492, 764, 10980, 4997, 13, 51648], "temperature": 0.0, "avg_logprob": -0.3181417606495045, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.008286897093057632}, {"id": 125, "seek": 44018, "start": 440.26, "end": 445.38, "text": " When I joined the project, there wasn't any integration tests, so it was kind of a blank", "tokens": [50368, 1133, 286, 6869, 264, 1716, 11, 456, 2067, 380, 604, 10980, 6921, 11, 370, 309, 390, 733, 295, 257, 8247, 50624], "temperature": 0.0, "avg_logprob": -0.19221373058500743, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.07166619598865509}, {"id": 126, "seek": 44018, "start": 445.38, "end": 446.38, "text": " slate.", "tokens": [50624, 39118, 13, 50674], "temperature": 0.0, "avg_logprob": -0.19221373058500743, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.07166619598865509}, {"id": 127, "seek": 44018, "start": 446.38, "end": 451.1, "text": " I could start from the very beginning of how I wanted our integration tests to look.", "tokens": [50674, 286, 727, 722, 490, 264, 588, 2863, 295, 577, 286, 1415, 527, 10980, 6921, 281, 574, 13, 50910], "temperature": 0.0, "avg_logprob": -0.19221373058500743, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.07166619598865509}, {"id": 128, "seek": 44018, "start": 451.1, "end": 454.42, "text": " I came with these set of design decisions.", "tokens": [50910, 286, 1361, 365, 613, 992, 295, 1715, 5327, 13, 51076], "temperature": 0.0, "avg_logprob": -0.19221373058500743, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.07166619598865509}, {"id": 129, "seek": 44018, "start": 454.42, "end": 458.38, "text": " First of all, I wanted to go as the sole dependency on these integration tests.", "tokens": [51076, 2386, 295, 439, 11, 286, 1415, 281, 352, 382, 264, 12321, 33621, 322, 613, 10980, 6921, 13, 51274], "temperature": 0.0, "avg_logprob": -0.19221373058500743, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.07166619598865509}, {"id": 130, "seek": 44018, "start": 458.38, "end": 460.5, "text": " I hate make files.", "tokens": [51274, 286, 4700, 652, 7098, 13, 51380], "temperature": 0.0, "avg_logprob": -0.19221373058500743, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.07166619598865509}, {"id": 131, "seek": 44018, "start": 460.5, "end": 466.06, "text": " I think make is terrible, and I don't want that anywhere near having to invoke tests.", "tokens": [51380, 286, 519, 652, 307, 6237, 11, 293, 286, 500, 380, 528, 300, 4992, 2651, 1419, 281, 41117, 6921, 13, 51658], "temperature": 0.0, "avg_logprob": -0.19221373058500743, "compression_ratio": 1.707112970711297, "no_speech_prob": 0.07166619598865509}, {"id": 132, "seek": 46606, "start": 466.14, "end": 469.66, "text": " The next thing that I wanted to do was to run a test.", "tokens": [50368, 440, 958, 551, 300, 286, 1415, 281, 360, 390, 281, 1190, 257, 1500, 13, 50544], "temperature": 0.0, "avg_logprob": -0.7292520218536633, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.2302766740322113}, {"id": 133, "seek": 46606, "start": 469.66, "end": 474.38, "text": " I wanted to do something like a test, and it would be worse, something like needing", "tokens": [50544, 286, 1415, 281, 360, 746, 411, 257, 1500, 11, 293, 309, 576, 312, 5324, 11, 746, 411, 18006, 50780], "temperature": 0.0, "avg_logprob": -0.7292520218536633, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.2302766740322113}, {"id": 134, "seek": 46606, "start": 474.38, "end": 478.02, "text": " Python or God forbid having to run Docker or something like this.", "tokens": [50780, 15329, 420, 1265, 34117, 1419, 281, 1190, 33772, 420, 746, 411, 341, 13, 50962], "temperature": 0.0, "avg_logprob": -0.7292520218536633, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.2302766740322113}, {"id": 135, "seek": 46606, "start": 478.02, "end": 479.82, "text": " It just run my tests.", "tokens": [50962, 467, 445, 1190, 452, 6921, 13, 51052], "temperature": 0.0, "avg_logprob": -0.7292520218536633, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.2302766740322113}, {"id": 136, "seek": 46606, "start": 479.82, "end": 484.98, "text": " We want them to be as close to what developers are doing in their day-to-day, because remember", "tokens": [51052, 492, 528, 552, 281, 312, 382, 1998, 281, 437, 8849, 366, 884, 294, 641, 786, 12, 1353, 12, 810, 11, 570, 1604, 51310], "temperature": 0.0, "avg_logprob": -0.7292520218536633, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.2302766740322113}, {"id": 137, "seek": 46606, "start": 484.98, "end": 488.42, "text": " it's a community project, we have lots of contributors.", "tokens": [51310, 309, 311, 257, 1768, 1716, 11, 321, 362, 3195, 295, 45627, 13, 51482], "temperature": 0.0, "avg_logprob": -0.7292520218536633, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.2302766740322113}, {"id": 138, "seek": 46606, "start": 488.42, "end": 491.86, "text": " Having go as a sole dependency was really important.", "tokens": [51482, 10222, 352, 382, 257, 12321, 33621, 390, 534, 1021, 13, 51654], "temperature": 0.0, "avg_logprob": -0.7292520218536633, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.2302766740322113}, {"id": 139, "seek": 46606, "start": 491.86, "end": 493.86, "text": " They need to be quick.", "tokens": [51654, 814, 643, 281, 312, 1702, 13, 51754], "temperature": 0.0, "avg_logprob": -0.7292520218536633, "compression_ratio": 1.699248120300752, "no_speech_prob": 0.2302766740322113}, {"id": 140, "seek": 49386, "start": 493.98, "end": 497.14, "text": " Time.sleepers.band, we'll talk about that later.", "tokens": [50370, 6161, 13, 82, 7927, 433, 13, 4235, 11, 321, 603, 751, 466, 300, 1780, 13, 50528], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 141, "seek": 49386, "start": 497.14, "end": 498.54, "text": " Tests need to be portable.", "tokens": [50528, 314, 4409, 643, 281, 312, 21800, 13, 50598], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 142, "seek": 49386, "start": 498.54, "end": 502.82, "text": " We basically get that for free with go, because go is very good in that it can be compiled", "tokens": [50598, 492, 1936, 483, 300, 337, 1737, 365, 352, 11, 570, 352, 307, 588, 665, 294, 300, 309, 393, 312, 36548, 50812], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 143, "seek": 49386, "start": 502.82, "end": 506.06, "text": " to different architectures and operating systems and things like this, and it's designed from", "tokens": [50812, 281, 819, 6331, 1303, 293, 7447, 3652, 293, 721, 411, 341, 11, 293, 309, 311, 4761, 490, 50974], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 144, "seek": 49386, "start": 506.06, "end": 509.26, "text": " a portability perspective from the start, so we get that for free.", "tokens": [50974, 257, 2436, 2310, 4585, 490, 264, 722, 11, 370, 321, 483, 300, 337, 1737, 13, 51134], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 145, "seek": 49386, "start": 509.26, "end": 511.5, "text": " It needs to be extensible.", "tokens": [51134, 467, 2203, 281, 312, 1279, 30633, 13, 51246], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 146, "seek": 49386, "start": 511.5, "end": 513.58, "text": " We have lots of contributors.", "tokens": [51246, 492, 362, 3195, 295, 45627, 13, 51350], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 147, "seek": 49386, "start": 513.58, "end": 518.46, "text": " People need to be able to write code for the integration tests as they contribute to the", "tokens": [51350, 3432, 643, 281, 312, 1075, 281, 2464, 3089, 337, 264, 10980, 6921, 382, 436, 10586, 281, 264, 51594], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 148, "seek": 49386, "start": 518.46, "end": 521.14, "text": " project, and it needs to be readable.", "tokens": [51594, 1716, 11, 293, 309, 2203, 281, 312, 49857, 13, 51728], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 149, "seek": 49386, "start": 521.14, "end": 522.14, "text": " Similar reasons.", "tokens": [51728, 10905, 4112, 13, 51778], "temperature": 0.0, "avg_logprob": -0.2424718331599581, "compression_ratio": 1.7718120805369129, "no_speech_prob": 0.01174190454185009}, {"id": 150, "seek": 52214, "start": 522.38, "end": 528.3, "text": " That was the design philosophy, the design decisions I came into the project with, or", "tokens": [50376, 663, 390, 264, 1715, 10675, 11, 264, 1715, 5327, 286, 1361, 666, 264, 1716, 365, 11, 420, 50672], "temperature": 0.0, "avg_logprob": -0.22687847739771794, "compression_ratio": 1.7063829787234042, "no_speech_prob": 0.0023196577094495296}, {"id": 151, "seek": 52214, "start": 528.3, "end": 530.74, "text": " into the integration test with.", "tokens": [50672, 666, 264, 10980, 1500, 365, 13, 50794], "temperature": 0.0, "avg_logprob": -0.22687847739771794, "compression_ratio": 1.7063829787234042, "no_speech_prob": 0.0023196577094495296}, {"id": 152, "seek": 52214, "start": 530.74, "end": 532.22, "text": " Next was actually writing the framework itself.", "tokens": [50794, 3087, 390, 767, 3579, 264, 8388, 2564, 13, 50868], "temperature": 0.0, "avg_logprob": -0.22687847739771794, "compression_ratio": 1.7063829787234042, "no_speech_prob": 0.0023196577094495296}, {"id": 153, "seek": 52214, "start": 532.22, "end": 540.06, "text": " If we go back to our original diagram of fundamentally this is what an integration test is, the first", "tokens": [50868, 759, 321, 352, 646, 281, 527, 3380, 10686, 295, 17879, 341, 307, 437, 364, 10980, 1500, 307, 11, 264, 700, 51260], "temperature": 0.0, "avg_logprob": -0.22687847739771794, "compression_ratio": 1.7063829787234042, "no_speech_prob": 0.0023196577094495296}, {"id": 154, "seek": 52214, "start": 540.06, "end": 543.66, "text": " thing we can do is turn this into go stuff.", "tokens": [51260, 551, 321, 393, 360, 307, 1261, 341, 666, 352, 1507, 13, 51440], "temperature": 0.0, "avg_logprob": -0.22687847739771794, "compression_ratio": 1.7063829787234042, "no_speech_prob": 0.0023196577094495296}, {"id": 155, "seek": 52214, "start": 543.66, "end": 548.9399999999999, "text": " We create what I call the process, which is the thing that is managing the setup and also", "tokens": [51440, 492, 1884, 437, 286, 818, 264, 1399, 11, 597, 307, 264, 551, 300, 307, 11642, 264, 8657, 293, 611, 51704], "temperature": 0.0, "avg_logprob": -0.22687847739771794, "compression_ratio": 1.7063829787234042, "no_speech_prob": 0.0023196577094495296}, {"id": 156, "seek": 54894, "start": 548.94, "end": 552.5, "text": " the cleanup, and then we have the test case, which is doing the assertions that we want", "tokens": [50364, 264, 40991, 11, 293, 550, 321, 362, 264, 1500, 1389, 11, 597, 307, 884, 264, 19810, 626, 300, 321, 528, 50542], "temperature": 0.0, "avg_logprob": -0.17089061439037323, "compression_ratio": 1.77007299270073, "no_speech_prob": 0.01939678192138672}, {"id": 157, "seek": 54894, "start": 552.5, "end": 555.1400000000001, "text": " on that particular test scenario.", "tokens": [50542, 322, 300, 1729, 1500, 9005, 13, 50674], "temperature": 0.0, "avg_logprob": -0.17089061439037323, "compression_ratio": 1.77007299270073, "no_speech_prob": 0.01939678192138672}, {"id": 158, "seek": 54894, "start": 555.1400000000001, "end": 559.34, "text": " We can then put in some kind of wrapper stuff, so this is actually executable, and there's", "tokens": [50674, 492, 393, 550, 829, 294, 512, 733, 295, 46906, 1507, 11, 370, 341, 307, 767, 7568, 712, 11, 293, 456, 311, 50884], "temperature": 0.0, "avg_logprob": -0.17089061439037323, "compression_ratio": 1.77007299270073, "no_speech_prob": 0.01939678192138672}, {"id": 159, "seek": 54894, "start": 559.34, "end": 563.4200000000001, "text": " like an entry point into this kind of test case.", "tokens": [50884, 411, 364, 8729, 935, 666, 341, 733, 295, 1500, 1389, 13, 51088], "temperature": 0.0, "avg_logprob": -0.17089061439037323, "compression_ratio": 1.77007299270073, "no_speech_prob": 0.01939678192138672}, {"id": 160, "seek": 54894, "start": 563.4200000000001, "end": 568.22, "text": " And then we're in go, so it probably makes sense to make these interfaces.", "tokens": [51088, 400, 550, 321, 434, 294, 352, 11, 370, 309, 1391, 1669, 2020, 281, 652, 613, 28416, 13, 51328], "temperature": 0.0, "avg_logprob": -0.17089061439037323, "compression_ratio": 1.77007299270073, "no_speech_prob": 0.01939678192138672}, {"id": 161, "seek": 54894, "start": 568.22, "end": 570.7, "text": " So this is what a test case is fundamentally.", "tokens": [51328, 407, 341, 307, 437, 257, 1500, 1389, 307, 17879, 13, 51452], "temperature": 0.0, "avg_logprob": -0.17089061439037323, "compression_ratio": 1.77007299270073, "no_speech_prob": 0.01939678192138672}, {"id": 162, "seek": 54894, "start": 570.7, "end": 574.62, "text": " If you can do a setup and you can run, it will be able to be executable in the integration", "tokens": [51452, 759, 291, 393, 360, 257, 8657, 293, 291, 393, 1190, 11, 309, 486, 312, 1075, 281, 312, 7568, 712, 294, 264, 10980, 51648], "temperature": 0.0, "avg_logprob": -0.17089061439037323, "compression_ratio": 1.77007299270073, "no_speech_prob": 0.01939678192138672}, {"id": 163, "seek": 54894, "start": 574.62, "end": 577.1, "text": " test suite.", "tokens": [51648, 1500, 14205, 13, 51772], "temperature": 0.0, "avg_logprob": -0.17089061439037323, "compression_ratio": 1.77007299270073, "no_speech_prob": 0.01939678192138672}, {"id": 164, "seek": 57710, "start": 577.26, "end": 580.82, "text": " This is what an integration test looks like in DAPA.", "tokens": [50372, 639, 307, 437, 364, 10980, 1500, 1542, 411, 294, 413, 4715, 32, 13, 50550], "temperature": 0.0, "avg_logprob": -0.18724057054895116, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.007314940448850393}, {"id": 165, "seek": 57710, "start": 580.82, "end": 584.86, "text": " It's a single self-contained file, we do some registration on the test, and we'll talk about", "tokens": [50550, 467, 311, 257, 2167, 2698, 12, 9000, 3563, 3991, 11, 321, 360, 512, 16847, 322, 264, 1500, 11, 293, 321, 603, 751, 466, 50752], "temperature": 0.0, "avg_logprob": -0.18724057054895116, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.007314940448850393}, {"id": 166, "seek": 57710, "start": 584.86, "end": 589.22, "text": " that in a second, and then we do a setup and then we do a run.", "tokens": [50752, 300, 294, 257, 1150, 11, 293, 550, 321, 360, 257, 8657, 293, 550, 321, 360, 257, 1190, 13, 50970], "temperature": 0.0, "avg_logprob": -0.18724057054895116, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.007314940448850393}, {"id": 167, "seek": 57710, "start": 589.22, "end": 593.86, "text": " You can see here in my setup that I'm creating a process, which is going to do the setup", "tokens": [50970, 509, 393, 536, 510, 294, 452, 8657, 300, 286, 478, 4084, 257, 1399, 11, 597, 307, 516, 281, 360, 264, 8657, 51202], "temperature": 0.0, "avg_logprob": -0.18724057054895116, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.007314940448850393}, {"id": 168, "seek": 57710, "start": 593.86, "end": 600.22, "text": " and the cleanup, and then the run bit is where I'm going to do the actual assertions.", "tokens": [51202, 293, 264, 40991, 11, 293, 550, 264, 1190, 857, 307, 689, 286, 478, 516, 281, 360, 264, 3539, 19810, 626, 13, 51520], "temperature": 0.0, "avg_logprob": -0.18724057054895116, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.007314940448850393}, {"id": 169, "seek": 57710, "start": 600.22, "end": 605.94, "text": " Talking about the process part, the bit that's responsible for the kind of dependency creation", "tokens": [51520, 22445, 466, 264, 1399, 644, 11, 264, 857, 300, 311, 6250, 337, 264, 733, 295, 33621, 8016, 51806], "temperature": 0.0, "avg_logprob": -0.18724057054895116, "compression_ratio": 1.7769516728624535, "no_speech_prob": 0.007314940448850393}, {"id": 170, "seek": 60594, "start": 605.94, "end": 607.34, "text": " and cleanup.", "tokens": [50364, 293, 40991, 13, 50434], "temperature": 0.0, "avg_logprob": -0.19902998659791066, "compression_ratio": 1.7264957264957266, "no_speech_prob": 0.015891319140791893}, {"id": 171, "seek": 60594, "start": 607.34, "end": 611.82, "text": " Again, similar story, it's an interface, it does a run, and it does a cleanup.", "tokens": [50434, 3764, 11, 2531, 1657, 11, 309, 311, 364, 9226, 11, 309, 775, 257, 1190, 11, 293, 309, 775, 257, 40991, 13, 50658], "temperature": 0.0, "avg_logprob": -0.19902998659791066, "compression_ratio": 1.7264957264957266, "no_speech_prob": 0.015891319140791893}, {"id": 172, "seek": 60594, "start": 611.82, "end": 614.62, "text": " Really simple, and that's the point, it needs to be simple.", "tokens": [50658, 4083, 2199, 11, 293, 300, 311, 264, 935, 11, 309, 2203, 281, 312, 2199, 13, 50798], "temperature": 0.0, "avg_logprob": -0.19902998659791066, "compression_ratio": 1.7264957264957266, "no_speech_prob": 0.015891319140791893}, {"id": 173, "seek": 60594, "start": 614.62, "end": 621.86, "text": " We'll talk about a bit in a second on why this is a great thing.", "tokens": [50798, 492, 603, 751, 466, 257, 857, 294, 257, 1150, 322, 983, 341, 307, 257, 869, 551, 13, 51160], "temperature": 0.0, "avg_logprob": -0.19902998659791066, "compression_ratio": 1.7264957264957266, "no_speech_prob": 0.015891319140791893}, {"id": 174, "seek": 60594, "start": 621.86, "end": 624.1, "text": " This is what a process would look like.", "tokens": [51160, 639, 307, 437, 257, 1399, 576, 574, 411, 13, 51272], "temperature": 0.0, "avg_logprob": -0.19902998659791066, "compression_ratio": 1.7264957264957266, "no_speech_prob": 0.015891319140791893}, {"id": 175, "seek": 60594, "start": 624.1, "end": 629.5400000000001, "text": " This is kind of like a no-op kind of example, not super important to read the whole thing.", "tokens": [51272, 639, 307, 733, 295, 411, 257, 572, 12, 404, 733, 295, 1365, 11, 406, 1687, 1021, 281, 1401, 264, 1379, 551, 13, 51544], "temperature": 0.0, "avg_logprob": -0.19902998659791066, "compression_ratio": 1.7264957264957266, "no_speech_prob": 0.015891319140791893}, {"id": 176, "seek": 60594, "start": 629.5400000000001, "end": 632.94, "text": " The whole idea is it's, again, a self-contained package.", "tokens": [51544, 440, 1379, 1558, 307, 309, 311, 11, 797, 11, 257, 2698, 12, 9000, 3563, 7372, 13, 51714], "temperature": 0.0, "avg_logprob": -0.19902998659791066, "compression_ratio": 1.7264957264957266, "no_speech_prob": 0.015891319140791893}, {"id": 177, "seek": 63294, "start": 632.94, "end": 639.5400000000001, "text": " We have the new, which creates the thing with a bunch of options, using functional option", "tokens": [50364, 492, 362, 264, 777, 11, 597, 7829, 264, 551, 365, 257, 3840, 295, 3956, 11, 1228, 11745, 3614, 50694], "temperature": 0.0, "avg_logprob": -0.26453738536649535, "compression_ratio": 1.652, "no_speech_prob": 0.17588891088962555}, {"id": 178, "seek": 63294, "start": 639.5400000000001, "end": 642.5400000000001, "text": " style here, which isn't necessarily people's favorite.", "tokens": [50694, 3758, 510, 11, 597, 1943, 380, 4725, 561, 311, 2954, 13, 50844], "temperature": 0.0, "avg_logprob": -0.26453738536649535, "compression_ratio": 1.652, "no_speech_prob": 0.17588891088962555}, {"id": 179, "seek": 63294, "start": 642.5400000000001, "end": 644.98, "text": " It made sense in this particular case.", "tokens": [50844, 467, 1027, 2020, 294, 341, 1729, 1389, 13, 50966], "temperature": 0.0, "avg_logprob": -0.26453738536649535, "compression_ratio": 1.652, "no_speech_prob": 0.17588891088962555}, {"id": 180, "seek": 63294, "start": 644.98, "end": 650.0600000000001, "text": " The kind of struct versus the kind of functional style is a bit of a hot topic.", "tokens": [50966, 440, 733, 295, 6594, 5717, 264, 733, 295, 11745, 3758, 307, 257, 857, 295, 257, 2368, 4829, 13, 51220], "temperature": 0.0, "avg_logprob": -0.26453738536649535, "compression_ratio": 1.652, "no_speech_prob": 0.17588891088962555}, {"id": 181, "seek": 63294, "start": 650.0600000000001, "end": 653.86, "text": " Yeah, it has a run and then it has a cleanup further down.", "tokens": [51220, 865, 11, 309, 575, 257, 1190, 293, 550, 309, 575, 257, 40991, 3052, 760, 13, 51410], "temperature": 0.0, "avg_logprob": -0.26453738536649535, "compression_ratio": 1.652, "no_speech_prob": 0.17588891088962555}, {"id": 182, "seek": 63294, "start": 653.86, "end": 659.22, "text": " I know very abstract, but it's clear, it's obviously very important to get your interfaces", "tokens": [51410, 286, 458, 588, 12649, 11, 457, 309, 311, 1850, 11, 309, 311, 2745, 588, 1021, 281, 483, 428, 28416, 51678], "temperature": 0.0, "avg_logprob": -0.26453738536649535, "compression_ratio": 1.652, "no_speech_prob": 0.17588891088962555}, {"id": 183, "seek": 65922, "start": 659.22, "end": 663.1, "text": " correct because you're going to live with these forever.", "tokens": [50364, 3006, 570, 291, 434, 516, 281, 1621, 365, 613, 5680, 13, 50558], "temperature": 0.0, "avg_logprob": -0.24049403541966488, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.22507885098457336}, {"id": 184, "seek": 65922, "start": 663.1, "end": 664.1, "text": " Cool.", "tokens": [50558, 8561, 13, 50608], "temperature": 0.0, "avg_logprob": -0.24049403541966488, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.22507885098457336}, {"id": 185, "seek": 65922, "start": 664.1, "end": 667.7, "text": " We have a framework run.", "tokens": [50608, 492, 362, 257, 8388, 1190, 13, 50788], "temperature": 0.0, "avg_logprob": -0.24049403541966488, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.22507885098457336}, {"id": 186, "seek": 65922, "start": 667.7, "end": 672.86, "text": " The thing that I wanted to point out here is we do a process run here, and then you can", "tokens": [50788, 440, 551, 300, 286, 1415, 281, 935, 484, 510, 307, 321, 360, 257, 1399, 1190, 510, 11, 293, 550, 291, 393, 51046], "temperature": 0.0, "avg_logprob": -0.24049403541966488, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.22507885098457336}, {"id": 187, "seek": 65922, "start": 672.86, "end": 679.74, "text": " see that we're using the go test cleanup function, which is amazing because it puts things on", "tokens": [51046, 536, 300, 321, 434, 1228, 264, 352, 1500, 40991, 2445, 11, 597, 307, 2243, 570, 309, 8137, 721, 322, 51390], "temperature": 0.0, "avg_logprob": -0.24049403541966488, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.22507885098457336}, {"id": 188, "seek": 65922, "start": 679.74, "end": 680.94, "text": " a stack.", "tokens": [51390, 257, 8630, 13, 51450], "temperature": 0.0, "avg_logprob": -0.24049403541966488, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.22507885098457336}, {"id": 189, "seek": 65922, "start": 680.94, "end": 685.22, "text": " When you create your dependencies, whether these be binaries or whatever else that we're", "tokens": [51450, 1133, 291, 1884, 428, 36606, 11, 1968, 613, 312, 5171, 4889, 420, 2035, 1646, 300, 321, 434, 51664], "temperature": 0.0, "avg_logprob": -0.24049403541966488, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.22507885098457336}, {"id": 190, "seek": 68522, "start": 685.22, "end": 690.46, "text": " using in our processes, it will clean them up in reverse order.", "tokens": [50364, 1228, 294, 527, 7555, 11, 309, 486, 2541, 552, 493, 294, 9943, 1668, 13, 50626], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 191, "seek": 68522, "start": 690.46, "end": 696.1800000000001, "text": " You have that stack, which is the natural order for things to be executed and then cleaned", "tokens": [50626, 509, 362, 300, 8630, 11, 597, 307, 264, 3303, 1668, 337, 721, 281, 312, 17577, 293, 550, 16146, 50912], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 192, "seek": 68522, "start": 696.1800000000001, "end": 697.1800000000001, "text": " up in.", "tokens": [50912, 493, 294, 13, 50962], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 193, "seek": 68522, "start": 697.1800000000001, "end": 698.1800000000001, "text": " Cool.", "tokens": [50962, 8561, 13, 51012], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 194, "seek": 68522, "start": 698.1800000000001, "end": 700.6600000000001, "text": " We have all our test cases defined.", "tokens": [51012, 492, 362, 439, 527, 1500, 3331, 7642, 13, 51136], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 195, "seek": 68522, "start": 700.6600000000001, "end": 702.1, "text": " They're running various processes.", "tokens": [51136, 814, 434, 2614, 3683, 7555, 13, 51208], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 196, "seek": 68522, "start": 702.1, "end": 706.1, "text": " Again, there might be executing binaries, writing to files, things like this.", "tokens": [51208, 3764, 11, 456, 1062, 312, 32368, 5171, 4889, 11, 3579, 281, 7098, 11, 721, 411, 341, 13, 51408], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 197, "seek": 68522, "start": 706.1, "end": 709.02, "text": " We do our assertions and then we do our cleanups.", "tokens": [51408, 492, 360, 527, 19810, 626, 293, 550, 321, 360, 527, 2541, 7528, 13, 51554], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 198, "seek": 68522, "start": 709.02, "end": 712.9, "text": " These will get put into test cases and then we have some kind of sweet runner that executes", "tokens": [51554, 1981, 486, 483, 829, 666, 1500, 3331, 293, 550, 321, 362, 512, 733, 295, 3844, 24376, 300, 4454, 1819, 51748], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 199, "seek": 68522, "start": 712.9, "end": 714.9, "text": " these tests.", "tokens": [51748, 613, 6921, 13, 51848], "temperature": 0.0, "avg_logprob": -0.20862069702148436, "compression_ratio": 1.797709923664122, "no_speech_prob": 0.11905118823051453}, {"id": 200, "seek": 71490, "start": 715.66, "end": 717.66, "text": " That's what it looks like.", "tokens": [50402, 663, 311, 437, 309, 1542, 411, 13, 50502], "temperature": 0.0, "avg_logprob": -0.18437297954115756, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00203458359465003}, {"id": 201, "seek": 71490, "start": 717.66, "end": 720.4599999999999, "text": " It's a for loop over a set of tests and it executes them.", "tokens": [50502, 467, 311, 257, 337, 6367, 670, 257, 992, 295, 6921, 293, 309, 4454, 1819, 552, 13, 50642], "temperature": 0.0, "avg_logprob": -0.18437297954115756, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00203458359465003}, {"id": 202, "seek": 71490, "start": 720.4599999999999, "end": 723.38, "text": " Simple stuff.", "tokens": [50642, 21532, 1507, 13, 50788], "temperature": 0.0, "avg_logprob": -0.18437297954115756, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00203458359465003}, {"id": 203, "seek": 71490, "start": 723.38, "end": 729.3, "text": " The next thing is how does the integration sweet runner know about these tests?", "tokens": [50788, 440, 958, 551, 307, 577, 775, 264, 10980, 3844, 24376, 458, 466, 613, 6921, 30, 51084], "temperature": 0.0, "avg_logprob": -0.18437297954115756, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00203458359465003}, {"id": 204, "seek": 71490, "start": 729.3, "end": 734.3, "text": " What we need is a case registry, which is just a very fancy way of saying that we have", "tokens": [51084, 708, 321, 643, 307, 257, 1389, 36468, 11, 597, 307, 445, 257, 588, 10247, 636, 295, 1566, 300, 321, 362, 51334], "temperature": 0.0, "avg_logprob": -0.18437297954115756, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00203458359465003}, {"id": 205, "seek": 71490, "start": 734.3, "end": 739.26, "text": " a global variable that has a slice of test cases.", "tokens": [51334, 257, 4338, 7006, 300, 575, 257, 13153, 295, 1500, 3331, 13, 51582], "temperature": 0.0, "avg_logprob": -0.18437297954115756, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.00203458359465003}, {"id": 206, "seek": 73926, "start": 739.34, "end": 746.34, "text": " What is important here that I wanted to point out was that it was a design decision that", "tokens": [50368, 708, 307, 1021, 510, 300, 286, 1415, 281, 935, 484, 390, 300, 309, 390, 257, 1715, 3537, 300, 50718], "temperature": 0.0, "avg_logprob": -0.21266914917542054, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.08949467539787292}, {"id": 207, "seek": 73926, "start": 746.34, "end": 751.46, "text": " our test cases, and I mentioned it before, that they should be self-isolated in single", "tokens": [50718, 527, 1500, 3331, 11, 293, 286, 2835, 309, 949, 11, 300, 436, 820, 312, 2698, 12, 29273, 770, 294, 2167, 50974], "temperature": 0.0, "avg_logprob": -0.21266914917542054, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.08949467539787292}, {"id": 208, "seek": 73926, "start": 751.46, "end": 752.86, "text": " files.", "tokens": [50974, 7098, 13, 51044], "temperature": 0.0, "avg_logprob": -0.21266914917542054, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.08949467539787292}, {"id": 209, "seek": 73926, "start": 752.86, "end": 757.8199999999999, "text": " I think as a developer, when you're reading test cases and things like this and you're", "tokens": [51044, 286, 519, 382, 257, 10754, 11, 562, 291, 434, 3760, 1500, 3331, 293, 721, 411, 341, 293, 291, 434, 51292], "temperature": 0.0, "avg_logprob": -0.21266914917542054, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.08949467539787292}, {"id": 210, "seek": 73926, "start": 757.8199999999999, "end": 762.5, "text": " having to go backwards and forwards into various places to even follow what the test is doing,", "tokens": [51292, 1419, 281, 352, 12204, 293, 30126, 666, 3683, 3190, 281, 754, 1524, 437, 264, 1500, 307, 884, 11, 51526], "temperature": 0.0, "avg_logprob": -0.21266914917542054, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.08949467539787292}, {"id": 211, "seek": 73926, "start": 762.5, "end": 764.54, "text": " is not good practice and it's confusing.", "tokens": [51526, 307, 406, 665, 3124, 293, 309, 311, 13181, 13, 51628], "temperature": 0.0, "avg_logprob": -0.21266914917542054, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.08949467539787292}, {"id": 212, "seek": 73926, "start": 764.54, "end": 767.3, "text": " Again, you can run into these problems.", "tokens": [51628, 3764, 11, 291, 393, 1190, 666, 613, 2740, 13, 51766], "temperature": 0.0, "avg_logprob": -0.21266914917542054, "compression_ratio": 1.6984732824427482, "no_speech_prob": 0.08949467539787292}, {"id": 213, "seek": 76730, "start": 767.38, "end": 771.8199999999999, "text": " In order to eliminate that, we went for the style of having an init function, which does", "tokens": [50368, 682, 1668, 281, 13819, 300, 11, 321, 1437, 337, 264, 3758, 295, 1419, 364, 3157, 2445, 11, 597, 775, 50590], "temperature": 0.0, "avg_logprob": -0.27910284374071204, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.001297389972023666}, {"id": 214, "seek": 76730, "start": 771.8199999999999, "end": 778.8199999999999, "text": " the registration to that global variable, and then using the bare import and style to", "tokens": [50590, 264, 16847, 281, 300, 4338, 7006, 11, 293, 550, 1228, 264, 6949, 974, 293, 3758, 281, 50940], "temperature": 0.0, "avg_logprob": -0.27910284374071204, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.001297389972023666}, {"id": 215, "seek": 76730, "start": 778.8199999999999, "end": 783.8199999999999, "text": " import our init functions up into the top-level registry.", "tokens": [50940, 974, 527, 3157, 6828, 493, 666, 264, 1192, 12, 12418, 36468, 13, 51190], "temperature": 0.0, "avg_logprob": -0.27910284374071204, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.001297389972023666}, {"id": 216, "seek": 76730, "start": 786.0999999999999, "end": 790.0999999999999, "text": " Next thing is naming, which is always hard.", "tokens": [51304, 3087, 551, 307, 25290, 11, 597, 307, 1009, 1152, 13, 51504], "temperature": 0.0, "avg_logprob": -0.27910284374071204, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.001297389972023666}, {"id": 217, "seek": 76730, "start": 790.0999999999999, "end": 795.3399999999999, "text": " I think there's a thing where developers generally don't necessarily respect testing", "tokens": [51504, 286, 519, 456, 311, 257, 551, 689, 8849, 5101, 500, 380, 4725, 3104, 4997, 51766], "temperature": 0.0, "avg_logprob": -0.27910284374071204, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.001297389972023666}, {"id": 218, "seek": 76730, "start": 795.3399999999999, "end": 796.9, "text": " code as much as they should.", "tokens": [51766, 3089, 382, 709, 382, 436, 820, 13, 51844], "temperature": 0.0, "avg_logprob": -0.27910284374071204, "compression_ratio": 1.6738197424892705, "no_speech_prob": 0.001297389972023666}, {"id": 219, "seek": 79690, "start": 796.9, "end": 801.62, "text": " They care a lot about their implementation code and make it look pretty and performant", "tokens": [50364, 814, 1127, 257, 688, 466, 641, 11420, 3089, 293, 652, 309, 574, 1238, 293, 2042, 394, 50600], "temperature": 0.0, "avg_logprob": -0.2256826280473589, "compression_ratio": 1.7106227106227105, "no_speech_prob": 0.004042040556669235}, {"id": 220, "seek": 79690, "start": 801.62, "end": 806.5799999999999, "text": " and things like this, but they don't necessarily respect their testing code as much.", "tokens": [50600, 293, 721, 411, 341, 11, 457, 436, 500, 380, 4725, 3104, 641, 4997, 3089, 382, 709, 13, 50848], "temperature": 0.0, "avg_logprob": -0.2256826280473589, "compression_ratio": 1.7106227106227105, "no_speech_prob": 0.004042040556669235}, {"id": 221, "seek": 79690, "start": 806.5799999999999, "end": 810.5, "text": " This leads on to the kind of mess that people don't want to add to it because it's difficult", "tokens": [50848, 639, 6689, 322, 281, 264, 733, 295, 2082, 300, 561, 500, 380, 528, 281, 909, 281, 309, 570, 309, 311, 2252, 51044], "temperature": 0.0, "avg_logprob": -0.2256826280473589, "compression_ratio": 1.7106227106227105, "no_speech_prob": 0.004042040556669235}, {"id": 222, "seek": 79690, "start": 810.5, "end": 811.5, "text": " to read.", "tokens": [51044, 281, 1401, 13, 51094], "temperature": 0.0, "avg_logprob": -0.2256826280473589, "compression_ratio": 1.7106227106227105, "no_speech_prob": 0.004042040556669235}, {"id": 223, "seek": 79690, "start": 811.5, "end": 816.34, "text": " Having respect to your test code is really important.", "tokens": [51094, 10222, 3104, 281, 428, 1500, 3089, 307, 534, 1021, 13, 51336], "temperature": 0.0, "avg_logprob": -0.2256826280473589, "compression_ratio": 1.7106227106227105, "no_speech_prob": 0.004042040556669235}, {"id": 224, "seek": 79690, "start": 816.34, "end": 819.6999999999999, "text": " Similarly, naming is generally really important.", "tokens": [51336, 13157, 11, 25290, 307, 5101, 534, 1021, 13, 51504], "temperature": 0.0, "avg_logprob": -0.2256826280473589, "compression_ratio": 1.7106227106227105, "no_speech_prob": 0.004042040556669235}, {"id": 225, "seek": 79690, "start": 819.6999999999999, "end": 824.22, "text": " Go has good standard on how you should name things, i.e. meaning should be derived through", "tokens": [51504, 1037, 575, 665, 3832, 322, 577, 291, 820, 1315, 721, 11, 741, 13, 68, 13, 3620, 820, 312, 18949, 807, 51730], "temperature": 0.0, "avg_logprob": -0.2256826280473589, "compression_ratio": 1.7106227106227105, "no_speech_prob": 0.004042040556669235}, {"id": 226, "seek": 82422, "start": 824.26, "end": 825.26, "text": " context.", "tokens": [50366, 4319, 13, 50416], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 227, "seek": 82422, "start": 825.26, "end": 830.1800000000001, "text": " If you have a HTTP package, don't call your thing HTTP server, call it server.", "tokens": [50416, 759, 291, 362, 257, 33283, 7372, 11, 500, 380, 818, 428, 551, 33283, 7154, 11, 818, 309, 7154, 13, 50662], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 228, "seek": 82422, "start": 830.1800000000001, "end": 831.74, "text": " It should be hierarchical.", "tokens": [50662, 467, 820, 312, 35250, 804, 13, 50740], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 229, "seek": 82422, "start": 831.74, "end": 839.26, "text": " Similarly, derived meaning through context, package path, describe your thing.", "tokens": [50740, 13157, 11, 18949, 3620, 807, 4319, 11, 7372, 3100, 11, 6786, 428, 551, 13, 51116], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 230, "seek": 82422, "start": 839.26, "end": 840.26, "text": " Less is more.", "tokens": [51116, 18649, 307, 544, 13, 51166], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 231, "seek": 82422, "start": 840.26, "end": 842.1800000000001, "text": " Go is not an IDE language.", "tokens": [51166, 1037, 307, 406, 364, 40930, 2856, 13, 51262], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 232, "seek": 82422, "start": 842.1800000000001, "end": 843.5, "text": " It's a good language.", "tokens": [51262, 467, 311, 257, 665, 2856, 13, 51328], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 233, "seek": 82422, "start": 843.5, "end": 848.62, "text": " You don't need to have really long names.", "tokens": [51328, 509, 500, 380, 643, 281, 362, 534, 938, 5288, 13, 51584], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 234, "seek": 82422, "start": 848.62, "end": 850.9, "text": " Just be very specific.", "tokens": [51584, 1449, 312, 588, 2685, 13, 51698], "temperature": 0.0, "avg_logprob": -0.32051316127982193, "compression_ratio": 1.5213270142180095, "no_speech_prob": 0.05416488274931908}, {"id": 235, "seek": 85090, "start": 850.98, "end": 855.34, "text": " No under scores, things like this.", "tokens": [50368, 883, 833, 13444, 11, 721, 411, 341, 13, 50586], "temperature": 0.0, "avg_logprob": -0.33840616544087726, "compression_ratio": 1.545, "no_speech_prob": 0.12340827286243439}, {"id": 236, "seek": 85090, "start": 855.34, "end": 864.1, "text": " The benefit of then treating our test cases to be this package hierarchy with very meaningful", "tokens": [50586, 440, 5121, 295, 550, 15083, 527, 1500, 3331, 281, 312, 341, 7372, 22333, 365, 588, 10995, 51024], "temperature": 0.0, "avg_logprob": -0.33840616544087726, "compression_ratio": 1.545, "no_speech_prob": 0.12340827286243439}, {"id": 237, "seek": 85090, "start": 864.1, "end": 871.4599999999999, "text": " being purposeful names is that we can do some reflect magic that gets us a lot of benefits.", "tokens": [51024, 885, 4334, 906, 5288, 307, 300, 321, 393, 360, 512, 5031, 5585, 300, 2170, 505, 257, 688, 295, 5311, 13, 51392], "temperature": 0.0, "avg_logprob": -0.33840616544087726, "compression_ratio": 1.545, "no_speech_prob": 0.12340827286243439}, {"id": 238, "seek": 85090, "start": 871.4599999999999, "end": 878.14, "text": " So when I showed before that we're doing this kind of sweet test case registration, when", "tokens": [51392, 407, 562, 286, 4712, 949, 300, 321, 434, 884, 341, 733, 295, 3844, 1500, 1389, 16847, 11, 562, 51726], "temperature": 0.0, "avg_logprob": -0.33840616544087726, "compression_ratio": 1.545, "no_speech_prob": 0.12340827286243439}, {"id": 239, "seek": 87814, "start": 878.18, "end": 883.1, "text": " we are registering a test or when we're pulling out all the tests, you don't need to read", "tokens": [50366, 321, 366, 47329, 257, 1500, 420, 562, 321, 434, 8407, 484, 439, 264, 6921, 11, 291, 500, 380, 643, 281, 1401, 50612], "temperature": 0.0, "avg_logprob": -0.20977688931870733, "compression_ratio": 1.6919191919191918, "no_speech_prob": 0.020626990124583244}, {"id": 240, "seek": 87814, "start": 883.1, "end": 884.1, "text": " the code.", "tokens": [50612, 264, 3089, 13, 50662], "temperature": 0.0, "avg_logprob": -0.20977688931870733, "compression_ratio": 1.6919191919191918, "no_speech_prob": 0.020626990124583244}, {"id": 241, "seek": 87814, "start": 884.1, "end": 890.34, "text": " But basically what we're doing is using reflect to name the test its package path plus that", "tokens": [50662, 583, 1936, 437, 321, 434, 884, 307, 1228, 5031, 281, 1315, 264, 1500, 1080, 7372, 3100, 1804, 300, 50974], "temperature": 0.0, "avg_logprob": -0.20977688931870733, "compression_ratio": 1.6919191919191918, "no_speech_prob": 0.020626990124583244}, {"id": 242, "seek": 87814, "start": 890.34, "end": 892.38, "text": " struct name.", "tokens": [50974, 6594, 1315, 13, 51076], "temperature": 0.0, "avg_logprob": -0.20977688931870733, "compression_ratio": 1.6919191919191918, "no_speech_prob": 0.020626990124583244}, {"id": 243, "seek": 87814, "start": 892.38, "end": 897.9399999999999, "text": " So before our thing was called base, so it pulls out the package path of where that base", "tokens": [51076, 407, 949, 527, 551, 390, 1219, 3096, 11, 370, 309, 16982, 484, 264, 7372, 3100, 295, 689, 300, 3096, 51354], "temperature": 0.0, "avg_logprob": -0.20977688931870733, "compression_ratio": 1.6919191919191918, "no_speech_prob": 0.020626990124583244}, {"id": 244, "seek": 87814, "start": 897.9399999999999, "end": 901.58, "text": " test file is plus the struct name itself.", "tokens": [51354, 1500, 3991, 307, 1804, 264, 6594, 1315, 2564, 13, 51536], "temperature": 0.0, "avg_logprob": -0.20977688931870733, "compression_ratio": 1.6919191919191918, "no_speech_prob": 0.020626990124583244}, {"id": 245, "seek": 90158, "start": 901.58, "end": 908.1800000000001, "text": " So in this particular case, this test would be test underscore integration, DAPID foo", "tokens": [50364, 407, 294, 341, 1729, 1389, 11, 341, 1500, 576, 312, 1500, 37556, 10980, 11, 413, 4715, 2777, 726, 78, 50694], "temperature": 0.0, "avg_logprob": -0.2613103847311001, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.19738978147506714}, {"id": 246, "seek": 90158, "start": 908.1800000000001, "end": 909.74, "text": " base.", "tokens": [50694, 3096, 13, 50772], "temperature": 0.0, "avg_logprob": -0.2613103847311001, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.19738978147506714}, {"id": 247, "seek": 90158, "start": 909.74, "end": 913.22, "text": " Why is this a cool thing to do?", "tokens": [50772, 1545, 307, 341, 257, 1627, 551, 281, 360, 30, 50946], "temperature": 0.0, "avg_logprob": -0.2613103847311001, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.19738978147506714}, {"id": 248, "seek": 90158, "start": 913.22, "end": 917.26, "text": " Because that means we can start doing reject searches over our tests.", "tokens": [50946, 1436, 300, 1355, 321, 393, 722, 884, 8248, 26701, 670, 527, 6921, 13, 51148], "temperature": 0.0, "avg_logprob": -0.2613103847311001, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.19738978147506714}, {"id": 249, "seek": 90158, "start": 917.26, "end": 922.1, "text": " So you can imagine for example if I'm writing a feature for DAPID or trying to fix a bug,", "tokens": [51148, 407, 291, 393, 3811, 337, 1365, 498, 286, 478, 3579, 257, 4111, 337, 413, 4715, 2777, 420, 1382, 281, 3191, 257, 7426, 11, 51390], "temperature": 0.0, "avg_logprob": -0.2613103847311001, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.19738978147506714}, {"id": 250, "seek": 90158, "start": 922.1, "end": 927.98, "text": " if I'm working on maybe the active subsystem or something like this or placement, I can", "tokens": [51390, 498, 286, 478, 1364, 322, 1310, 264, 4967, 2090, 9321, 420, 746, 411, 341, 420, 17257, 11, 286, 393, 51684], "temperature": 0.0, "avg_logprob": -0.2613103847311001, "compression_ratio": 1.5458333333333334, "no_speech_prob": 0.19738978147506714}, {"id": 251, "seek": 92798, "start": 928.0600000000001, "end": 931.4200000000001, "text": " in another time and I'll have my integration test running and I can just do a search, a", "tokens": [50368, 294, 1071, 565, 293, 286, 603, 362, 452, 10980, 1500, 2614, 293, 286, 393, 445, 360, 257, 3164, 11, 257, 50536], "temperature": 0.0, "avg_logprob": -0.2714721973125751, "compression_ratio": 1.66, "no_speech_prob": 0.023976551368832588}, {"id": 252, "seek": 92798, "start": 931.4200000000001, "end": 937.66, "text": " reject search on all the tests that are in the project for related things.", "tokens": [50536, 8248, 3164, 322, 439, 264, 6921, 300, 366, 294, 264, 1716, 337, 4077, 721, 13, 50848], "temperature": 0.0, "avg_logprob": -0.2714721973125751, "compression_ratio": 1.66, "no_speech_prob": 0.023976551368832588}, {"id": 253, "seek": 92798, "start": 937.66, "end": 943.3000000000001, "text": " So yeah, being very specific about your naming means that you can search through them and", "tokens": [50848, 407, 1338, 11, 885, 588, 2685, 466, 428, 25290, 1355, 300, 291, 393, 3164, 807, 552, 293, 51130], "temperature": 0.0, "avg_logprob": -0.2714721973125751, "compression_ratio": 1.66, "no_speech_prob": 0.023976551368832588}, {"id": 254, "seek": 92798, "start": 943.3000000000001, "end": 944.82, "text": " run all the relevant tests.", "tokens": [51130, 1190, 439, 264, 7340, 6921, 13, 51206], "temperature": 0.0, "avg_logprob": -0.2714721973125751, "compression_ratio": 1.66, "no_speech_prob": 0.023976551368832588}, {"id": 255, "seek": 92798, "start": 944.82, "end": 949.82, "text": " Again being quick, developer focus, good UX.", "tokens": [51206, 3764, 885, 1702, 11, 10754, 1879, 11, 665, 40176, 13, 51456], "temperature": 0.0, "avg_logprob": -0.2714721973125751, "compression_ratio": 1.66, "no_speech_prob": 0.023976551368832588}, {"id": 256, "seek": 92798, "start": 949.82, "end": 957.14, "text": " Yeah, that's how you do rejects in Go for loop and then you filter out all the test names", "tokens": [51456, 865, 11, 300, 311, 577, 291, 360, 8248, 82, 294, 1037, 337, 6367, 293, 550, 291, 6608, 484, 439, 264, 1500, 5288, 51822], "temperature": 0.0, "avg_logprob": -0.2714721973125751, "compression_ratio": 1.66, "no_speech_prob": 0.023976551368832588}, {"id": 257, "seek": 95714, "start": 957.18, "end": 958.78, "text": " that don't match the rejects.", "tokens": [50366, 300, 500, 380, 2995, 264, 8248, 82, 13, 50446], "temperature": 0.0, "avg_logprob": -0.27869881523980033, "compression_ratio": 1.5435684647302905, "no_speech_prob": 0.020964642986655235}, {"id": 258, "seek": 95714, "start": 958.78, "end": 963.78, "text": " Here's another example, I'm working on century related things or MTS related things, I want", "tokens": [50446, 1692, 311, 1071, 1365, 11, 286, 478, 1364, 322, 4901, 4077, 721, 420, 376, 7327, 4077, 721, 11, 286, 528, 50696], "temperature": 0.0, "avg_logprob": -0.27869881523980033, "compression_ratio": 1.5435684647302905, "no_speech_prob": 0.020964642986655235}, {"id": 259, "seek": 95714, "start": 963.78, "end": 968.62, "text": " to run all the century tests, I can just give it a query.", "tokens": [50696, 281, 1190, 439, 264, 4901, 6921, 11, 286, 393, 445, 976, 309, 257, 14581, 13, 50938], "temperature": 0.0, "avg_logprob": -0.27869881523980033, "compression_ratio": 1.5435684647302905, "no_speech_prob": 0.020964642986655235}, {"id": 260, "seek": 95714, "start": 968.62, "end": 970.9399999999999, "text": " The next is processes.", "tokens": [50938, 440, 958, 307, 7555, 13, 51054], "temperature": 0.0, "avg_logprob": -0.27869881523980033, "compression_ratio": 1.5435684647302905, "no_speech_prob": 0.020964642986655235}, {"id": 261, "seek": 95714, "start": 970.9399999999999, "end": 976.66, "text": " So these are the two bits down here, the kind of dependency setup and the cleanup.", "tokens": [51054, 407, 613, 366, 264, 732, 9239, 760, 510, 11, 264, 733, 295, 33621, 8657, 293, 264, 40991, 13, 51340], "temperature": 0.0, "avg_logprob": -0.27869881523980033, "compression_ratio": 1.5435684647302905, "no_speech_prob": 0.020964642986655235}, {"id": 262, "seek": 95714, "start": 976.66, "end": 981.34, "text": " We've been talking a lot about the different services in DAPID, so these are obviously", "tokens": [51340, 492, 600, 668, 1417, 257, 688, 466, 264, 819, 3328, 294, 413, 4715, 2777, 11, 370, 613, 366, 2745, 51574], "temperature": 0.0, "avg_logprob": -0.27869881523980033, "compression_ratio": 1.5435684647302905, "no_speech_prob": 0.020964642986655235}, {"id": 263, "seek": 98134, "start": 981.38, "end": 990.38, "text": " using the exec, we're exacting processes on the computer, using the exec package.", "tokens": [50366, 1228, 264, 4454, 11, 321, 434, 1900, 278, 7555, 322, 264, 3820, 11, 1228, 264, 4454, 7372, 13, 50816], "temperature": 0.0, "avg_logprob": -0.19297176403003735, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.2752336263656616}, {"id": 264, "seek": 98134, "start": 990.62, "end": 996.38, "text": " What we've decided to do is follow the kind of UNIX philosophy of running these processes", "tokens": [50828, 708, 321, 600, 3047, 281, 360, 307, 1524, 264, 733, 295, 8229, 21124, 10675, 295, 2614, 613, 7555, 51116], "temperature": 0.0, "avg_logprob": -0.19297176403003735, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.2752336263656616}, {"id": 265, "seek": 98134, "start": 996.38, "end": 999.0600000000001, "text": " as in do one thing and do one thing really well.", "tokens": [51116, 382, 294, 360, 472, 551, 293, 360, 472, 551, 534, 731, 13, 51250], "temperature": 0.0, "avg_logprob": -0.19297176403003735, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.2752336263656616}, {"id": 266, "seek": 98134, "start": 999.0600000000001, "end": 1004.5400000000001, "text": " So the exec process does really good at exacting a binary on the computer.", "tokens": [51250, 407, 264, 4454, 1399, 775, 534, 665, 412, 1900, 278, 257, 17434, 322, 264, 3820, 13, 51524], "temperature": 0.0, "avg_logprob": -0.19297176403003735, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.2752336263656616}, {"id": 267, "seek": 98134, "start": 1004.5400000000001, "end": 1010.14, "text": " You can then wrap that process in another more meaningful, again being intentional about", "tokens": [51524, 509, 393, 550, 7019, 300, 1399, 294, 1071, 544, 10995, 11, 797, 885, 21935, 466, 51804], "temperature": 0.0, "avg_logprob": -0.19297176403003735, "compression_ratio": 1.737556561085973, "no_speech_prob": 0.2752336263656616}, {"id": 268, "seek": 101014, "start": 1010.14, "end": 1014.02, "text": " naming which has a bit more context about how that binary should be run.", "tokens": [50364, 25290, 597, 575, 257, 857, 544, 4319, 466, 577, 300, 17434, 820, 312, 1190, 13, 50558], "temperature": 0.0, "avg_logprob": -0.19333233964552574, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.015066191554069519}, {"id": 269, "seek": 101014, "start": 1014.02, "end": 1018.18, "text": " So for example, this century process has all the context of knows what the CLI flags and", "tokens": [50558, 407, 337, 1365, 11, 341, 4901, 1399, 575, 439, 264, 4319, 295, 3255, 437, 264, 12855, 40, 23265, 293, 50766], "temperature": 0.0, "avg_logprob": -0.19333233964552574, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.015066191554069519}, {"id": 270, "seek": 101014, "start": 1018.18, "end": 1023.14, "text": " things like this gives it same defaults, exposes the options in a human readable way in order", "tokens": [50766, 721, 411, 341, 2709, 309, 912, 7576, 82, 11, 1278, 4201, 264, 3956, 294, 257, 1952, 49857, 636, 294, 1668, 51014], "temperature": 0.0, "avg_logprob": -0.19333233964552574, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.015066191554069519}, {"id": 271, "seek": 101014, "start": 1023.14, "end": 1026.1399999999999, "text": " to run that binary.", "tokens": [51014, 281, 1190, 300, 17434, 13, 51164], "temperature": 0.0, "avg_logprob": -0.19333233964552574, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.015066191554069519}, {"id": 272, "seek": 101014, "start": 1026.1399999999999, "end": 1030.34, "text": " And then as I mentioned before, DAPID has lots of different services, it's a complex software", "tokens": [51164, 400, 550, 382, 286, 2835, 949, 11, 413, 4715, 2777, 575, 3195, 295, 819, 3328, 11, 309, 311, 257, 3997, 4722, 51374], "temperature": 0.0, "avg_logprob": -0.19333233964552574, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.015066191554069519}, {"id": 273, "seek": 101014, "start": 1030.34, "end": 1035.62, "text": " system but following this UNIX philosophy you can do this wrapping in your processes", "tokens": [51374, 1185, 457, 3480, 341, 8229, 21124, 10675, 291, 393, 360, 341, 21993, 294, 428, 7555, 51638], "temperature": 0.0, "avg_logprob": -0.19333233964552574, "compression_ratio": 1.5763888888888888, "no_speech_prob": 0.015066191554069519}, {"id": 274, "seek": 103562, "start": 1035.6999999999998, "end": 1042.6999999999998, "text": " to make more meaningful, higher level naming and interfaces for your developer.", "tokens": [50368, 281, 652, 544, 10995, 11, 2946, 1496, 25290, 293, 28416, 337, 428, 10754, 13, 50718], "temperature": 0.0, "avg_logprob": -0.2985665377448587, "compression_ratio": 1.692, "no_speech_prob": 0.0742376521229744}, {"id": 275, "seek": 103562, "start": 1043.26, "end": 1046.8999999999999, "text": " So I can talk about a Kubernetes process and it's very easy as a developer in my test", "tokens": [50746, 407, 286, 393, 751, 466, 257, 23145, 1399, 293, 309, 311, 588, 1858, 382, 257, 10754, 294, 452, 1500, 50928], "temperature": 0.0, "avg_logprob": -0.2985665377448587, "compression_ratio": 1.692, "no_speech_prob": 0.0742376521229744}, {"id": 276, "seek": 103562, "start": 1046.8999999999999, "end": 1051.5, "text": " suite to say run Kubernetes, whatever that might mean, under the hood that's actually", "tokens": [50928, 14205, 281, 584, 1190, 23145, 11, 2035, 300, 1062, 914, 11, 833, 264, 13376, 300, 311, 767, 51158], "temperature": 0.0, "avg_logprob": -0.2985665377448587, "compression_ratio": 1.692, "no_speech_prob": 0.0742376521229744}, {"id": 277, "seek": 103562, "start": 1051.5, "end": 1057.02, "text": " like a mocked Kubernetes API server which is actually a HTTP server, yada yada yada.", "tokens": [51158, 411, 257, 17362, 292, 23145, 9362, 7154, 597, 307, 767, 257, 33283, 7154, 11, 288, 1538, 288, 1538, 288, 1538, 13, 51434], "temperature": 0.0, "avg_logprob": -0.2985665377448587, "compression_ratio": 1.692, "no_speech_prob": 0.0742376521229744}, {"id": 278, "seek": 103562, "start": 1057.02, "end": 1061.02, "text": " So yeah, having this kind of wrapped process is kind of an elegant way to handle that.", "tokens": [51434, 407, 1338, 11, 1419, 341, 733, 295, 14226, 1399, 307, 733, 295, 364, 21117, 636, 281, 4813, 300, 13, 51634], "temperature": 0.0, "avg_logprob": -0.2985665377448587, "compression_ratio": 1.692, "no_speech_prob": 0.0742376521229744}, {"id": 279, "seek": 106102, "start": 1062.02, "end": 1068.02, "text": " Here's an example of another one, so there's an operator service, we're doing some log", "tokens": [50414, 1692, 311, 364, 1365, 295, 1071, 472, 11, 370, 456, 311, 364, 12973, 2643, 11, 321, 434, 884, 512, 3565, 50714], "temperature": 0.0, "avg_logprob": -0.23237412064163773, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.010489329695701599}, {"id": 280, "seek": 106102, "start": 1068.02, "end": 1073.02, "text": " line stuff in here, some DAPID stuff, but these are very high order concepts of dependencies", "tokens": [50714, 1622, 1507, 294, 510, 11, 512, 413, 4715, 2777, 1507, 11, 457, 613, 366, 588, 1090, 1668, 10392, 295, 36606, 50964], "temperature": 0.0, "avg_logprob": -0.23237412064163773, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.010489329695701599}, {"id": 281, "seek": 106102, "start": 1073.02, "end": 1079.02, "text": " that we're creating and these are all wrapped going down.", "tokens": [50964, 300, 321, 434, 4084, 293, 613, 366, 439, 14226, 516, 760, 13, 51264], "temperature": 0.0, "avg_logprob": -0.23237412064163773, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.010489329695701599}, {"id": 282, "seek": 106102, "start": 1079.02, "end": 1086.02, "text": " Process binaries, so I mentioned before that we want to go as the sole dependency and go", "tokens": [51264, 31093, 5171, 4889, 11, 370, 286, 2835, 949, 300, 321, 528, 281, 352, 382, 264, 12321, 33621, 293, 352, 51614], "temperature": 0.0, "avg_logprob": -0.23237412064163773, "compression_ratio": 1.5673076923076923, "no_speech_prob": 0.010489329695701599}, {"id": 283, "seek": 108602, "start": 1086.02, "end": 1093.02, "text": " is a good language and it's got a very good build caching system and what that means is", "tokens": [50364, 307, 257, 665, 2856, 293, 309, 311, 658, 257, 588, 665, 1322, 269, 2834, 1185, 293, 437, 300, 1355, 307, 50714], "temperature": 0.0, "avg_logprob": -0.14683048611595517, "compression_ratio": 1.966824644549763, "no_speech_prob": 0.06932566314935684}, {"id": 284, "seek": 108602, "start": 1093.02, "end": 1098.02, "text": " that in our testing integration testing itself is we're building the binaries in the test,", "tokens": [50714, 300, 294, 527, 4997, 10980, 4997, 2564, 307, 321, 434, 2390, 264, 5171, 4889, 294, 264, 1500, 11, 50964], "temperature": 0.0, "avg_logprob": -0.14683048611595517, "compression_ratio": 1.966824644549763, "no_speech_prob": 0.06932566314935684}, {"id": 285, "seek": 108602, "start": 1098.02, "end": 1101.02, "text": " so one of the first things it's going to do is it's going to build all the binaries", "tokens": [50964, 370, 472, 295, 264, 700, 721, 309, 311, 516, 281, 360, 307, 309, 311, 516, 281, 1322, 439, 264, 5171, 4889, 51114], "temperature": 0.0, "avg_logprob": -0.14683048611595517, "compression_ratio": 1.966824644549763, "no_speech_prob": 0.06932566314935684}, {"id": 286, "seek": 108602, "start": 1101.02, "end": 1105.02, "text": " that are in the project, that's the code that's doing that.", "tokens": [51114, 300, 366, 294, 264, 1716, 11, 300, 311, 264, 3089, 300, 311, 884, 300, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14683048611595517, "compression_ratio": 1.966824644549763, "no_speech_prob": 0.06932566314935684}, {"id": 287, "seek": 108602, "start": 1105.02, "end": 1111.02, "text": " It's then going to write them to a deterministic static file location and what that means is", "tokens": [51314, 467, 311, 550, 516, 281, 2464, 552, 281, 257, 15957, 3142, 13437, 3991, 4914, 293, 437, 300, 1355, 307, 51614], "temperature": 0.0, "avg_logprob": -0.14683048611595517, "compression_ratio": 1.966824644549763, "no_speech_prob": 0.06932566314935684}, {"id": 288, "seek": 111102, "start": 1111.02, "end": 1116.02, "text": " that every time I invoke the test it's going to run that go build, but because of go builds", "tokens": [50364, 300, 633, 565, 286, 41117, 264, 1500, 309, 311, 516, 281, 1190, 300, 352, 1322, 11, 457, 570, 295, 352, 15182, 50614], "temperature": 0.0, "avg_logprob": -0.11952358379698637, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.05291518196463585}, {"id": 289, "seek": 111102, "start": 1116.02, "end": 1122.02, "text": " cache magic it's not going to take any time at all, so I can completely retry my go test", "tokens": [50614, 19459, 5585, 309, 311, 406, 516, 281, 747, 604, 565, 412, 439, 11, 370, 286, 393, 2584, 1533, 627, 452, 352, 1500, 50914], "temperature": 0.0, "avg_logprob": -0.11952358379698637, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.05291518196463585}, {"id": 290, "seek": 111102, "start": 1122.02, "end": 1125.02, "text": " and it will just be quick.", "tokens": [50914, 293, 309, 486, 445, 312, 1702, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11952358379698637, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.05291518196463585}, {"id": 291, "seek": 111102, "start": 1125.02, "end": 1129.02, "text": " The other nice thing about this is that if I change my implementation code and just write", "tokens": [51064, 440, 661, 1481, 551, 466, 341, 307, 300, 498, 286, 1319, 452, 11420, 3089, 293, 445, 2464, 51264], "temperature": 0.0, "avg_logprob": -0.11952358379698637, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.05291518196463585}, {"id": 292, "seek": 111102, "start": 1129.02, "end": 1134.02, "text": " go test in my integration test, it's going to pull all the changes that I've just made", "tokens": [51264, 352, 1500, 294, 452, 10980, 1500, 11, 309, 311, 516, 281, 2235, 439, 264, 2962, 300, 286, 600, 445, 1027, 51514], "temperature": 0.0, "avg_logprob": -0.11952358379698637, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.05291518196463585}, {"id": 293, "seek": 111102, "start": 1134.02, "end": 1137.02, "text": " to the code right because it is building from source every time.", "tokens": [51514, 281, 264, 3089, 558, 570, 309, 307, 2390, 490, 4009, 633, 565, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11952358379698637, "compression_ratio": 1.7888446215139442, "no_speech_prob": 0.05291518196463585}, {"id": 294, "seek": 113702, "start": 1138.02, "end": 1142.02, "text": " So that's a neat thing with go piping.", "tokens": [50414, 407, 300, 311, 257, 10654, 551, 365, 352, 35204, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11548687377065983, "compression_ratio": 1.7863247863247864, "no_speech_prob": 0.009188729338347912}, {"id": 295, "seek": 113702, "start": 1142.02, "end": 1149.02, "text": " So software writes things to logs and these can typically be very noisy if you're running", "tokens": [50614, 407, 4722, 13657, 721, 281, 20820, 293, 613, 393, 5850, 312, 588, 24518, 498, 291, 434, 2614, 50964], "temperature": 0.0, "avg_logprob": -0.11548687377065983, "compression_ratio": 1.7863247863247864, "no_speech_prob": 0.009188729338347912}, {"id": 296, "seek": 113702, "start": 1149.02, "end": 1154.02, "text": " lots and lots and lots of tests and this is going to take up a lot of disk space potentially,", "tokens": [50964, 3195, 293, 3195, 293, 3195, 295, 6921, 293, 341, 307, 516, 281, 747, 493, 257, 688, 295, 12355, 1901, 7263, 11, 51214], "temperature": 0.0, "avg_logprob": -0.11548687377065983, "compression_ratio": 1.7863247863247864, "no_speech_prob": 0.009188729338347912}, {"id": 297, "seek": 113702, "start": 1154.02, "end": 1159.02, "text": " it's going to write a lot of things to the screen and it makes it impossible to read the test output.", "tokens": [51214, 309, 311, 516, 281, 2464, 257, 688, 295, 721, 281, 264, 2568, 293, 309, 1669, 309, 6243, 281, 1401, 264, 1500, 5598, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11548687377065983, "compression_ratio": 1.7863247863247864, "no_speech_prob": 0.009188729338347912}, {"id": 298, "seek": 113702, "start": 1159.02, "end": 1164.02, "text": " If you've got oodles, like a gigabyte of test logs and you're trying to find one test failure", "tokens": [51464, 759, 291, 600, 658, 277, 35192, 11, 411, 257, 8741, 34529, 295, 1500, 20820, 293, 291, 434, 1382, 281, 915, 472, 1500, 7763, 51714], "temperature": 0.0, "avg_logprob": -0.11548687377065983, "compression_ratio": 1.7863247863247864, "no_speech_prob": 0.009188729338347912}, {"id": 299, "seek": 116402, "start": 1164.02, "end": 1167.02, "text": " and read the logs from what happened, it becomes impossible.", "tokens": [50364, 293, 1401, 264, 20820, 490, 437, 2011, 11, 309, 3643, 6243, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11068641252754148, "compression_ratio": 1.8685258964143425, "no_speech_prob": 0.023314720019698143}, {"id": 300, "seek": 116402, "start": 1167.02, "end": 1174.02, "text": " So write these things to in-memory buffers and then you can do things like only write", "tokens": [50514, 407, 2464, 613, 721, 281, 294, 12, 17886, 827, 9204, 433, 293, 550, 291, 393, 360, 721, 411, 787, 2464, 50864], "temperature": 0.0, "avg_logprob": -0.11068641252754148, "compression_ratio": 1.8685258964143425, "no_speech_prob": 0.023314720019698143}, {"id": 301, "seek": 116402, "start": 1174.02, "end": 1179.02, "text": " the in-memory log buffer to the screen if the test actually fails, which is the only time", "tokens": [50864, 264, 294, 12, 17886, 827, 3565, 21762, 281, 264, 2568, 498, 264, 1500, 767, 18199, 11, 597, 307, 264, 787, 565, 51114], "temperature": 0.0, "avg_logprob": -0.11068641252754148, "compression_ratio": 1.8685258964143425, "no_speech_prob": 0.023314720019698143}, {"id": 302, "seek": 116402, "start": 1179.02, "end": 1182.02, "text": " where you actually care about what the log line is.", "tokens": [51114, 689, 291, 767, 1127, 466, 437, 264, 3565, 1622, 307, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11068641252754148, "compression_ratio": 1.8685258964143425, "no_speech_prob": 0.023314720019698143}, {"id": 303, "seek": 116402, "start": 1182.02, "end": 1187.02, "text": " Then obviously you can do things like because it's in memory, you've got a reference to it,", "tokens": [51264, 1396, 2745, 291, 393, 360, 721, 411, 570, 309, 311, 294, 4675, 11, 291, 600, 658, 257, 6408, 281, 309, 11, 51514], "temperature": 0.0, "avg_logprob": -0.11068641252754148, "compression_ratio": 1.8685258964143425, "no_speech_prob": 0.023314720019698143}, {"id": 304, "seek": 116402, "start": 1187.02, "end": 1190.02, "text": " you've got a pointer to it, you can then do some assertions on what was in the log lines", "tokens": [51514, 291, 600, 658, 257, 23918, 281, 309, 11, 291, 393, 550, 360, 512, 19810, 626, 322, 437, 390, 294, 264, 3565, 3876, 51664], "temperature": 0.0, "avg_logprob": -0.11068641252754148, "compression_ratio": 1.8685258964143425, "no_speech_prob": 0.023314720019698143}, {"id": 305, "seek": 119002, "start": 1190.02, "end": 1193.02, "text": " and test log lines that way.", "tokens": [50364, 293, 1500, 3565, 3876, 300, 636, 13, 50514], "temperature": 0.0, "avg_logprob": -0.16959121789825096, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.07223912328481674}, {"id": 306, "seek": 119002, "start": 1193.02, "end": 1196.02, "text": " It's quite good for this, you can create pipes and things like this.", "tokens": [50514, 467, 311, 1596, 665, 337, 341, 11, 291, 393, 1884, 21882, 293, 721, 411, 341, 13, 50664], "temperature": 0.0, "avg_logprob": -0.16959121789825096, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.07223912328481674}, {"id": 307, "seek": 119002, "start": 1196.02, "end": 1202.02, "text": " All very idiomatic kind of go stuff that you're familiar with.", "tokens": [50664, 1057, 588, 18014, 13143, 733, 295, 352, 1507, 300, 291, 434, 4963, 365, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16959121789825096, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.07223912328481674}, {"id": 308, "seek": 119002, "start": 1202.02, "end": 1209.02, "text": " Asserting eventually, so all software is eventually consistent fundamentally like computers", "tokens": [50964, 6281, 27187, 4728, 11, 370, 439, 4722, 307, 4728, 8398, 17879, 411, 10807, 51314], "temperature": 0.0, "avg_logprob": -0.16959121789825096, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.07223912328481674}, {"id": 309, "seek": 119002, "start": 1209.02, "end": 1215.02, "text": " that are any as quick as the speed of light that is as fast as they can go, they're not as fast as that.", "tokens": [51314, 300, 366, 604, 382, 1702, 382, 264, 3073, 295, 1442, 300, 307, 382, 2370, 382, 436, 393, 352, 11, 436, 434, 406, 382, 2370, 382, 300, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16959121789825096, "compression_ratio": 1.6604651162790698, "no_speech_prob": 0.07223912328481674}, {"id": 310, "seek": 121502, "start": 1215.02, "end": 1221.02, "text": " But fundamentally computers to do a thing will take some time.", "tokens": [50364, 583, 17879, 10807, 281, 360, 257, 551, 486, 747, 512, 565, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13892585690281972, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.047702595591545105}, {"id": 311, "seek": 121502, "start": 1221.02, "end": 1226.02, "text": " And so we have to wait a period of time to observe some behavior when we put it into a particular state.", "tokens": [50664, 400, 370, 321, 362, 281, 1699, 257, 2896, 295, 565, 281, 11441, 512, 5223, 562, 321, 829, 309, 666, 257, 1729, 1785, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13892585690281972, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.047702595591545105}, {"id": 312, "seek": 121502, "start": 1226.02, "end": 1229.02, "text": " Just fundamentally we have to do that.", "tokens": [50914, 1449, 17879, 321, 362, 281, 360, 300, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13892585690281972, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.047702595591545105}, {"id": 313, "seek": 121502, "start": 1229.02, "end": 1235.02, "text": " However you should never use time.sleep to do this, which I think is very, it's always there", "tokens": [51064, 2908, 291, 820, 1128, 764, 565, 13, 82, 7927, 281, 360, 341, 11, 597, 286, 519, 307, 588, 11, 309, 311, 1009, 456, 51364], "temperature": 0.0, "avg_logprob": -0.13892585690281972, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.047702595591545105}, {"id": 314, "seek": 121502, "start": 1235.02, "end": 1239.02, "text": " and it's very easy to just be like, time.sleep three seconds or something like this,", "tokens": [51364, 293, 309, 311, 588, 1858, 281, 445, 312, 411, 11, 565, 13, 82, 7927, 1045, 3949, 420, 746, 411, 341, 11, 51564], "temperature": 0.0, "avg_logprob": -0.13892585690281972, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.047702595591545105}, {"id": 315, "seek": 121502, "start": 1239.02, "end": 1241.02, "text": " but you should never do it.", "tokens": [51564, 457, 291, 820, 1128, 360, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13892585690281972, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.047702595591545105}, {"id": 316, "seek": 121502, "start": 1241.02, "end": 1244.02, "text": " Time.sleep is the nuclear option.", "tokens": [51664, 6161, 13, 82, 7927, 307, 264, 8179, 3614, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13892585690281972, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.047702595591545105}, {"id": 317, "seek": 124402, "start": 1244.02, "end": 1249.02, "text": " So to kind of illustrate this, if a single test sleeps for five seconds", "tokens": [50364, 407, 281, 733, 295, 23221, 341, 11, 498, 257, 2167, 1500, 37991, 337, 1732, 3949, 50614], "temperature": 0.0, "avg_logprob": -0.09822763380457143, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.016544675454497337}, {"id": 318, "seek": 124402, "start": 1249.02, "end": 1254.02, "text": " and DAPA CI for example runs four times a day, not counting PRs or anything like this,", "tokens": [50614, 293, 413, 4715, 32, 37777, 337, 1365, 6676, 1451, 1413, 257, 786, 11, 406, 13251, 11568, 82, 420, 1340, 411, 341, 11, 50864], "temperature": 0.0, "avg_logprob": -0.09822763380457143, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.016544675454497337}, {"id": 319, "seek": 124402, "start": 1254.02, "end": 1260.02, "text": " just standardly runs every four times a day, this equates to two hours of idle CPU time a year.", "tokens": [50864, 445, 3832, 356, 6676, 633, 1451, 1413, 257, 786, 11, 341, 1267, 1024, 281, 732, 2496, 295, 30650, 13199, 565, 257, 1064, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09822763380457143, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.016544675454497337}, {"id": 320, "seek": 124402, "start": 1260.02, "end": 1266.02, "text": " If we then do it more than this, so like DAPA currently has 133 integration tests,", "tokens": [51164, 759, 321, 550, 360, 309, 544, 813, 341, 11, 370, 411, 413, 4715, 32, 4362, 575, 3705, 18, 10980, 6921, 11, 51464], "temperature": 0.0, "avg_logprob": -0.09822763380457143, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.016544675454497337}, {"id": 321, "seek": 124402, "start": 1266.02, "end": 1273.02, "text": " if just 10% of those tests sleep for five seconds, then that equates to more than an entire day in a year of idle CPU.", "tokens": [51464, 498, 445, 1266, 4, 295, 729, 6921, 2817, 337, 1732, 3949, 11, 550, 300, 1267, 1024, 281, 544, 813, 364, 2302, 786, 294, 257, 1064, 295, 30650, 13199, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09822763380457143, "compression_ratio": 1.7471264367816093, "no_speech_prob": 0.016544675454497337}, {"id": 322, "seek": 127302, "start": 1273.02, "end": 1275.02, "text": " Which is crazy, right?", "tokens": [50364, 3013, 307, 3219, 11, 558, 30, 50464], "temperature": 0.0, "avg_logprob": -0.13844450620504525, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.02236582525074482}, {"id": 323, "seek": 127302, "start": 1275.02, "end": 1280.02, "text": " This is bad for the polar bears, bad for the environment, it's bad for our developers too, which, yeah.", "tokens": [50464, 639, 307, 1578, 337, 264, 12367, 17276, 11, 1578, 337, 264, 2823, 11, 309, 311, 1578, 337, 527, 8849, 886, 11, 597, 11, 1338, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13844450620504525, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.02236582525074482}, {"id": 324, "seek": 127302, "start": 1280.02, "end": 1284.02, "text": " If your test takes ages to run, no one will want to run them and no one wants to add to them.", "tokens": [50714, 759, 428, 1500, 2516, 12357, 281, 1190, 11, 572, 472, 486, 528, 281, 1190, 552, 293, 572, 472, 2738, 281, 909, 281, 552, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13844450620504525, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.02236582525074482}, {"id": 325, "seek": 127302, "start": 1284.02, "end": 1290.02, "text": " So being very intentional about the speed of your tests is very important.", "tokens": [50914, 407, 885, 588, 21935, 466, 264, 3073, 295, 428, 6921, 307, 588, 1021, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13844450620504525, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.02236582525074482}, {"id": 326, "seek": 127302, "start": 1290.02, "end": 1298.02, "text": " The way to do this would be to do polling basically, so in Go there's the kind of testifier package", "tokens": [51214, 440, 636, 281, 360, 341, 576, 312, 281, 360, 29518, 1936, 11, 370, 294, 1037, 456, 311, 264, 733, 295, 1500, 9902, 7372, 51614], "temperature": 0.0, "avg_logprob": -0.13844450620504525, "compression_ratio": 1.6458333333333333, "no_speech_prob": 0.02236582525074482}, {"id": 327, "seek": 129802, "start": 1298.02, "end": 1303.02, "text": " that is really, really good and highly recommend using it and it has this eventually function.", "tokens": [50364, 300, 307, 534, 11, 534, 665, 293, 5405, 2748, 1228, 309, 293, 309, 575, 341, 4728, 2445, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1710918347040812, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.3592609167098999}, {"id": 328, "seek": 129802, "start": 1303.02, "end": 1309.02, "text": " All of the functions in this package are like super sane and highly recommend used to use them.", "tokens": [50614, 1057, 295, 264, 6828, 294, 341, 7372, 366, 411, 1687, 45610, 293, 5405, 2748, 1143, 281, 764, 552, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1710918347040812, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.3592609167098999}, {"id": 329, "seek": 129802, "start": 1309.02, "end": 1312.02, "text": " And yeah, computers are faster than you think they are.", "tokens": [50914, 400, 1338, 11, 10807, 366, 4663, 813, 291, 519, 436, 366, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1710918347040812, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.3592609167098999}, {"id": 330, "seek": 129802, "start": 1312.02, "end": 1318.02, "text": " Stuff does not take as much as you think it does, so like HTTP calls over local hosts take like milliseconds.", "tokens": [51064, 31347, 775, 406, 747, 382, 709, 382, 291, 519, 309, 775, 11, 370, 411, 33283, 5498, 670, 2654, 21573, 747, 411, 34184, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1710918347040812, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.3592609167098999}, {"id": 331, "seek": 129802, "start": 1318.02, "end": 1321.02, "text": " It doesn't confuse as fast as you think they are.", "tokens": [51364, 467, 1177, 380, 28584, 382, 2370, 382, 291, 519, 436, 366, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1710918347040812, "compression_ratio": 1.7729257641921397, "no_speech_prob": 0.3592609167098999}, {"id": 332, "seek": 132102, "start": 1321.02, "end": 1327.02, "text": " So even I've got here an appalling of like every 100 milliseconds, maybe that is even too slow itself.", "tokens": [50364, 407, 754, 286, 600, 658, 510, 364, 724, 24021, 295, 411, 633, 2319, 34184, 11, 1310, 300, 307, 754, 886, 2964, 2564, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11627666081223532, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.18624426424503326}, {"id": 333, "seek": 132102, "start": 1327.02, "end": 1330.02, "text": " So yeah, computers are faster than you think they are.", "tokens": [50664, 407, 1338, 11, 10807, 366, 4663, 813, 291, 519, 436, 366, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11627666081223532, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.18624426424503326}, {"id": 334, "seek": 132102, "start": 1330.02, "end": 1334.02, "text": " Be more aggressive with your kind of assertions and your polling.", "tokens": [50814, 879, 544, 10762, 365, 428, 733, 295, 19810, 626, 293, 428, 29518, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11627666081223532, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.18624426424503326}, {"id": 335, "seek": 132102, "start": 1336.02, "end": 1337.02, "text": " Clean up.", "tokens": [51114, 18463, 493, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11627666081223532, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.18624426424503326}, {"id": 336, "seek": 132102, "start": 1337.02, "end": 1339.02, "text": " Tests should never leak.", "tokens": [51164, 314, 4409, 820, 1128, 17143, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11627666081223532, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.18624426424503326}, {"id": 337, "seek": 132102, "start": 1339.02, "end": 1345.02, "text": " Having data leaking from one test case to another will invalidate your assertions just fundamentally.", "tokens": [51264, 10222, 1412, 32856, 490, 472, 1500, 1389, 281, 1071, 486, 34702, 473, 428, 19810, 626, 445, 17879, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11627666081223532, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.18624426424503326}, {"id": 338, "seek": 132102, "start": 1345.02, "end": 1350.02, "text": " So it's very important that you clean up state in between test case runs.", "tokens": [51564, 407, 309, 311, 588, 1021, 300, 291, 2541, 493, 1785, 294, 1296, 1500, 1389, 6676, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11627666081223532, "compression_ratio": 1.6014760147601477, "no_speech_prob": 0.18624426424503326}, {"id": 339, "seek": 135002, "start": 1351.02, "end": 1359.02, "text": " And yeah, and it's also the case that if you're not cleaning up the state in your project in between case runs,", "tokens": [50414, 400, 1338, 11, 293, 309, 311, 611, 264, 1389, 300, 498, 291, 434, 406, 8924, 493, 264, 1785, 294, 428, 1716, 294, 1296, 1389, 6676, 11, 50814], "temperature": 0.0, "avg_logprob": -0.14776853035236226, "compression_ratio": 1.7509727626459144, "no_speech_prob": 0.0028416146524250507}, {"id": 340, "seek": 135002, "start": 1359.02, "end": 1364.02, "text": " then you're going to reduce the resource utilization that each test case can do and it's going to slow down your tests.", "tokens": [50814, 550, 291, 434, 516, 281, 5407, 264, 7684, 37074, 300, 1184, 1500, 1389, 393, 360, 293, 309, 311, 516, 281, 2964, 760, 428, 6921, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14776853035236226, "compression_ratio": 1.7509727626459144, "no_speech_prob": 0.0028416146524250507}, {"id": 341, "seek": 135002, "start": 1364.02, "end": 1369.02, "text": " So I'm thinking, you know, if you've got database tests or something like this, you're writing a bunch of stuff to disk.", "tokens": [51064, 407, 286, 478, 1953, 11, 291, 458, 11, 498, 291, 600, 658, 8149, 6921, 420, 746, 411, 341, 11, 291, 434, 3579, 257, 3840, 295, 1507, 281, 12355, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14776853035236226, "compression_ratio": 1.7509727626459144, "no_speech_prob": 0.0028416146524250507}, {"id": 342, "seek": 135002, "start": 1369.02, "end": 1372.02, "text": " What if you fill up the disk? You're not running any more tests, right?", "tokens": [51314, 708, 498, 291, 2836, 493, 264, 12355, 30, 509, 434, 406, 2614, 604, 544, 6921, 11, 558, 30, 51464], "temperature": 0.0, "avg_logprob": -0.14776853035236226, "compression_ratio": 1.7509727626459144, "no_speech_prob": 0.0028416146524250507}, {"id": 343, "seek": 135002, "start": 1372.02, "end": 1374.02, "text": " So clean up is important.", "tokens": [51464, 407, 2541, 493, 307, 1021, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14776853035236226, "compression_ratio": 1.7509727626459144, "no_speech_prob": 0.0028416146524250507}, {"id": 344, "seek": 137402, "start": 1375.02, "end": 1383.02, "text": " To list through some of the things that could be interesting for you to use, use temporary directories, using the test package.", "tokens": [50414, 1407, 1329, 807, 512, 295, 264, 721, 300, 727, 312, 1880, 337, 291, 281, 764, 11, 764, 13413, 5391, 530, 11, 1228, 264, 1500, 7372, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 345, "seek": 137402, "start": 1383.02, "end": 1384.02, "text": " That's really good.", "tokens": [50814, 663, 311, 534, 665, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 346, "seek": 137402, "start": 1384.02, "end": 1387.02, "text": " T.cleanup, we just spoke about that earlier.", "tokens": [50864, 314, 13, 2160, 282, 1010, 11, 321, 445, 7179, 466, 300, 3071, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 347, "seek": 137402, "start": 1387.02, "end": 1392.02, "text": " That's doing the kind of stack thing, so it does things in the kind of reverse order.", "tokens": [51014, 663, 311, 884, 264, 733, 295, 8630, 551, 11, 370, 309, 775, 721, 294, 264, 733, 295, 9943, 1668, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 348, "seek": 137402, "start": 1392.02, "end": 1393.02, "text": " Use port zero.", "tokens": [51264, 8278, 2436, 4018, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 349, "seek": 137402, "start": 1393.02, "end": 1397.02, "text": " Ideally your kernel is going to give you a free port if you ask for zero.", "tokens": [51314, 40817, 428, 28256, 307, 516, 281, 976, 291, 257, 1737, 2436, 498, 291, 1029, 337, 4018, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 350, "seek": 137402, "start": 1397.02, "end": 1398.02, "text": " Use in-memory stuff.", "tokens": [51514, 8278, 294, 12, 17886, 827, 1507, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 351, "seek": 137402, "start": 1398.02, "end": 1400.02, "text": " Don't use the internet.", "tokens": [51564, 1468, 380, 764, 264, 4705, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 352, "seek": 137402, "start": 1400.02, "end": 1403.02, "text": " Don't give stop channels into functions.", "tokens": [51664, 1468, 380, 976, 1590, 9235, 666, 6828, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13293458545018758, "compression_ratio": 1.7159090909090908, "no_speech_prob": 0.08336745947599411}, {"id": 353, "seek": 140302, "start": 1403.02, "end": 1404.02, "text": " And use context.", "tokens": [50364, 400, 764, 4319, 13, 50414], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 354, "seek": 140302, "start": 1404.02, "end": 1409.02, "text": " Context is one of the best things in Go and always use context.", "tokens": [50414, 4839, 3828, 307, 472, 295, 264, 1151, 721, 294, 1037, 293, 1009, 764, 4319, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 355, "seek": 140302, "start": 1409.02, "end": 1411.02, "text": " Very quick to talk about operating systems.", "tokens": [50664, 4372, 1702, 281, 751, 466, 7447, 3652, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 356, "seek": 140302, "start": 1411.02, "end": 1413.02, "text": " Operating systems are very weird.", "tokens": [50764, 12480, 990, 3652, 366, 588, 3657, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 357, "seek": 140302, "start": 1413.02, "end": 1419.02, "text": " Use build tags where you need to do different file types and things like this depending on their operating system.", "tokens": [50864, 8278, 1322, 18632, 689, 291, 643, 281, 360, 819, 3991, 3467, 293, 721, 411, 341, 5413, 322, 641, 7447, 1185, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 358, "seek": 140302, "start": 1419.02, "end": 1420.02, "text": " Work through the pain.", "tokens": [51164, 6603, 807, 264, 1822, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 359, "seek": 140302, "start": 1420.02, "end": 1422.02, "text": " Use if statements.", "tokens": [51214, 8278, 498, 12363, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 360, "seek": 140302, "start": 1422.02, "end": 1424.02, "text": " Yeah, and then finally being productive.", "tokens": [51314, 865, 11, 293, 550, 2721, 885, 13304, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 361, "seek": 140302, "start": 1424.02, "end": 1430.02, "text": " So building a culture of integration tests in a distributed team is always a work in progress.", "tokens": [51414, 407, 2390, 257, 3713, 295, 10980, 6921, 294, 257, 12631, 1469, 307, 1009, 257, 589, 294, 4205, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12427786046808416, "compression_ratio": 1.6891385767790261, "no_speech_prob": 0.006997621152549982}, {"id": 362, "seek": 143002, "start": 1430.02, "end": 1435.02, "text": " To know unnecessarily really likes writing tests, however, if you write a really good test framework,", "tokens": [50364, 1407, 458, 16799, 3289, 534, 5902, 3579, 6921, 11, 4461, 11, 498, 291, 2464, 257, 534, 665, 1500, 8388, 11, 50614], "temperature": 0.0, "avg_logprob": -0.08973508496438304, "compression_ratio": 1.8308823529411764, "no_speech_prob": 0.03241020068526268}, {"id": 363, "seek": 143002, "start": 1435.02, "end": 1438.02, "text": " that's going to encourage people to add to them.", "tokens": [50614, 300, 311, 516, 281, 5373, 561, 281, 909, 281, 552, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08973508496438304, "compression_ratio": 1.8308823529411764, "no_speech_prob": 0.03241020068526268}, {"id": 364, "seek": 143002, "start": 1438.02, "end": 1442.02, "text": " And if they're quick, they're easy to use, then yeah.", "tokens": [50764, 400, 498, 436, 434, 1702, 11, 436, 434, 1858, 281, 764, 11, 550, 1338, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08973508496438304, "compression_ratio": 1.8308823529411764, "no_speech_prob": 0.03241020068526268}, {"id": 365, "seek": 143002, "start": 1442.02, "end": 1446.02, "text": " A good testing framework should be usable as a development sandbox.", "tokens": [50964, 316, 665, 4997, 8388, 820, 312, 29975, 382, 257, 3250, 42115, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08973508496438304, "compression_ratio": 1.8308823529411764, "no_speech_prob": 0.03241020068526268}, {"id": 366, "seek": 143002, "start": 1446.02, "end": 1449.02, "text": " So what I mean by that is if you're writing a new feature,", "tokens": [51164, 407, 437, 286, 914, 538, 300, 307, 498, 291, 434, 3579, 257, 777, 4111, 11, 51314], "temperature": 0.0, "avg_logprob": -0.08973508496438304, "compression_ratio": 1.8308823529411764, "no_speech_prob": 0.03241020068526268}, {"id": 367, "seek": 143002, "start": 1449.02, "end": 1453.02, "text": " your testing framework should be your first port of call to wanting to use that new feature.", "tokens": [51314, 428, 4997, 8388, 820, 312, 428, 700, 2436, 295, 818, 281, 7935, 281, 764, 300, 777, 4111, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08973508496438304, "compression_ratio": 1.8308823529411764, "no_speech_prob": 0.03241020068526268}, {"id": 368, "seek": 143002, "start": 1453.02, "end": 1457.02, "text": " Tests are great because they're encode, which means they're reproducible,", "tokens": [51514, 314, 4409, 366, 869, 570, 436, 434, 2058, 1429, 11, 597, 1355, 436, 434, 11408, 32128, 11, 51714], "temperature": 0.0, "avg_logprob": -0.08973508496438304, "compression_ratio": 1.8308823529411764, "no_speech_prob": 0.03241020068526268}, {"id": 369, "seek": 145702, "start": 1457.02, "end": 1460.02, "text": " and I can execute them and I can make changes over time.", "tokens": [50364, 293, 286, 393, 14483, 552, 293, 286, 393, 652, 2962, 670, 565, 13, 50514], "temperature": 0.0, "avg_logprob": -0.11708427119899441, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.026453742757439613}, {"id": 370, "seek": 145702, "start": 1460.02, "end": 1462.02, "text": " And it's very clear what's going on.", "tokens": [50514, 400, 309, 311, 588, 1850, 437, 311, 516, 322, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11708427119899441, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.026453742757439613}, {"id": 371, "seek": 145702, "start": 1462.02, "end": 1465.02, "text": " Just running binaries on your terminal and things like this are fine,", "tokens": [50614, 1449, 2614, 5171, 4889, 322, 428, 14709, 293, 721, 411, 341, 366, 2489, 11, 50764], "temperature": 0.0, "avg_logprob": -0.11708427119899441, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.026453742757439613}, {"id": 372, "seek": 145702, "start": 1465.02, "end": 1470.02, "text": " but having it in test code makes the reproducible better.", "tokens": [50764, 457, 1419, 309, 294, 1500, 3089, 1669, 264, 11408, 32128, 1101, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11708427119899441, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.026453742757439613}, {"id": 373, "seek": 145702, "start": 1470.02, "end": 1475.02, "text": " And then the more, again, the more higher order your processes are,", "tokens": [51014, 400, 550, 264, 544, 11, 797, 11, 264, 544, 2946, 1668, 428, 7555, 366, 11, 51264], "temperature": 0.0, "avg_logprob": -0.11708427119899441, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.026453742757439613}, {"id": 374, "seek": 145702, "start": 1475.02, "end": 1477.02, "text": " the more productive your team will be.", "tokens": [51264, 264, 544, 13304, 428, 1469, 486, 312, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11708427119899441, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.026453742757439613}, {"id": 375, "seek": 145702, "start": 1477.02, "end": 1484.02, "text": " So don't describe things like your developer shouldn't be describing things like exec, this binary, things like this.", "tokens": [51364, 407, 500, 380, 6786, 721, 411, 428, 10754, 4659, 380, 312, 16141, 721, 411, 4454, 11, 341, 17434, 11, 721, 411, 341, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11708427119899441, "compression_ratio": 1.7698412698412698, "no_speech_prob": 0.026453742757439613}, {"id": 376, "seek": 148402, "start": 1484.02, "end": 1488.02, "text": " They should always be in a high order kind of thing that they're describing.", "tokens": [50364, 814, 820, 1009, 312, 294, 257, 1090, 1668, 733, 295, 551, 300, 436, 434, 16141, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11749696195795295, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.012139424681663513}, {"id": 377, "seek": 148402, "start": 1488.02, "end": 1493.02, "text": " Again, it decreases the amount of code that you have to write in your test case", "tokens": [50564, 3764, 11, 309, 24108, 264, 2372, 295, 3089, 300, 291, 362, 281, 2464, 294, 428, 1500, 1389, 50814], "temperature": 0.0, "avg_logprob": -0.11749696195795295, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.012139424681663513}, {"id": 378, "seek": 148402, "start": 1493.02, "end": 1497.02, "text": " and makes them more approachable for contributors.", "tokens": [50814, 293, 1669, 552, 544, 3109, 712, 337, 45627, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11749696195795295, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.012139424681663513}, {"id": 379, "seek": 148402, "start": 1497.02, "end": 1500.02, "text": " And that's me. Thank you, everyone.", "tokens": [51014, 400, 300, 311, 385, 13, 1044, 291, 11, 1518, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11749696195795295, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.012139424681663513}, {"id": 380, "seek": 148402, "start": 1500.02, "end": 1506.02, "text": " APPLAUSE", "tokens": [51164, 35298, 51464], "temperature": 0.0, "avg_logprob": -0.11749696195795295, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.012139424681663513}, {"id": 381, "seek": 148402, "start": 1506.02, "end": 1511.02, "text": " Saved some time for you, but I don't know if you want some questions or leave it there.", "tokens": [51464, 12346, 292, 512, 565, 337, 291, 11, 457, 286, 500, 380, 458, 498, 291, 528, 512, 1651, 420, 1856, 309, 456, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11749696195795295, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.012139424681663513}, {"id": 382, "seek": 151102, "start": 1511.02, "end": 1514.02, "text": " I can fit in one quick question.", "tokens": [50364, 286, 393, 3318, 294, 472, 1702, 1168, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14359639672672048, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.07370885461568832}, {"id": 383, "seek": 151102, "start": 1514.02, "end": 1517.02, "text": " Otherwise, you can just grab them in the hallway.", "tokens": [50514, 10328, 11, 291, 393, 445, 4444, 552, 294, 264, 23903, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14359639672672048, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.07370885461568832}, {"id": 384, "seek": 151102, "start": 1517.02, "end": 1520.02, "text": " Ah, no question there. Let me run one second.", "tokens": [50664, 2438, 11, 572, 1168, 456, 13, 961, 385, 1190, 472, 1150, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14359639672672048, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.07370885461568832}, {"id": 385, "seek": 151102, "start": 1520.02, "end": 1524.02, "text": " Keep holding your hand up.", "tokens": [50814, 5527, 5061, 428, 1011, 493, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14359639672672048, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.07370885461568832}, {"id": 386, "seek": 151102, "start": 1524.02, "end": 1529.02, "text": " So, quickly, why did you make your own sort of test filtering system", "tokens": [51014, 407, 11, 2661, 11, 983, 630, 291, 652, 428, 1065, 1333, 295, 1500, 30822, 1185, 51264], "temperature": 0.0, "avg_logprob": -0.14359639672672048, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.07370885461568832}, {"id": 387, "seek": 151102, "start": 1529.02, "end": 1532.02, "text": " instead of using Go's test filtering system?", "tokens": [51264, 2602, 295, 1228, 1037, 311, 1500, 30822, 1185, 30, 51414], "temperature": 0.0, "avg_logprob": -0.14359639672672048, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.07370885461568832}, {"id": 388, "seek": 151102, "start": 1532.02, "end": 1537.02, "text": " And secondly, why didn't you use an event hub instead of polling?", "tokens": [51414, 400, 26246, 11, 983, 994, 380, 291, 764, 364, 2280, 11838, 2602, 295, 29518, 30, 51664], "temperature": 0.0, "avg_logprob": -0.14359639672672048, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.07370885461568832}, {"id": 389, "seek": 151102, "start": 1537.02, "end": 1540.02, "text": " Say the first one again, sorry.", "tokens": [51664, 6463, 264, 700, 472, 797, 11, 2597, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14359639672672048, "compression_ratio": 1.6238938053097345, "no_speech_prob": 0.07370885461568832}, {"id": 390, "seek": 154002, "start": 1540.02, "end": 1542.02, "text": " Why didn't you...", "tokens": [50364, 1545, 994, 380, 291, 485, 50464], "temperature": 0.0, "avg_logprob": -0.2999284267425537, "compression_ratio": 0.68, "no_speech_prob": 0.5896607637405396}], "language": "en"}