{"text": " Next, we have Nishant and Mike with aerodynamic data models flying fast at the scale of DuckDV. Okay. Thanks so much. Great to be here. I'm Mike Driscoll. I'm the co-founder and CEO of Rail Data. Here with my colleague Nishant, also co-founder of Rail Data, and we're going to be talking about DuckDB and making super fast data applications with DuckDB. So really quickly, we're going to just talk about our product vision and how we ended up choosing a fast engine, ultimately what the criteria were for DuckDB. And then we're going to talk a little bit about some of the optimizations that we've made at the application data model and data engine layer to get Rail to be super fast for our needs. So I am going to be brave enough to do a live demo here, so we'll see how that goes. But first, what is Rail? Rail is an operational BI tool. A lot of BI tools out there, so what makes us different? Well, first of all, we have faster dashboards. We co-locate the data and compute. Queries are instant, even at billion record scale. We embrace BI as code, deploy globally but develop locally with GitHub workflows, and we do all of the ETL and SQL, and we embrace a metrics first philosophy. So all of the visualizations that you'll see here are automatically generated. So let's get into it. Let's do a demo. If you want to try it at home or in the safety of your own laptop, you can install Rail with that single curl command. And I'll go ahead and do that here. So I've already installed Rail, so we'll just go ahead and get started. So let's imagine we've downloaded it here, and I'm just going to run Rail, Start, my Fosden demo. Let's get that moving. So that's going to fire up a web browser here. And what I'm actually going to do is I'm going to show how we can basically add data, a source. This is going to be just a local file here because that's what I've got access to. So this is basically a Parquet file called GCP consumption metrics. It's got basically data from GCP that I collected on our cloud usage. I'm going to bring that in as a source. And what you'll see here is pretty fast. We imported 4.4 million records, and we can actually, with one click here, we're going to build a dashboard. So it's 4.5 million records with about seven columns. There's a timestamp there. Let's auto-generate a dashboard. And instantly we can look at some trends in this GCP data. Again, these are automatically generated dashboards. I'm actually going to zoom in on a particular area of the data here. And Rail lets me kind of slice and dice this data. I can take a look at what I've been paying for cloud storage. Wow, it looks like something was going on there sometime in 2021. I can zoom into that if I wanted to drill further and find out if there's a particular skew that was driving that. I can kind of get some insights with that, break this down and look at period over period comparisons. There's a lot of visualizations I can do. I can even create pivot tables here in Rail. And that's something that we've spent some time launching. But I won't go much further into Rail because we've only got a lightning talk here. I'm going to turn it over to my colleague, Nishant, to talk a little bit about what we've done to make Rail work really fast with DuckDB. Thanks, Mike. So there have been a lot of optimizations that we have done in order to make it snappy and faster, specifically at scale. So we have a three-in-one architecture where Rail starts with, as Mike showed, connecting to a source of data, then loading that source of data into Rail, storing that into an in-memory database, DuckDB, and then running these operational BI dashboards on the top. So why we chose DuckDB? What were our requirements? How we came to use DuckDB? There are a couple of things why we like DuckDB. The first one is speed. We were able to profile tens of GBs of data on your local laptop. So the demo we showed was just offline on this laptop only with subsequent performance. It's simple and lightweight, so it can be embedded into a very small binary size, which could be downloaded and easily started. It can scale up to hundreds of concurrent queries and scale up to hundreds of GBs of data. So the dashboard that you saw, there were almost 50-plus queries that were fired concurrently from that dashboard when that was loaded. Rail is open source, and we love open source technologies, so is DuckDB. So that was also one of the reasons to choose DuckDB as well. Here is another snapshot of DuckDB commits. This is again like a real dashboard. It's hosted on this demo URL if you want to dig further and slice and dice the different commits on GitHub. You can do that as well, but you can see that there are over 350 contributors on the DuckDB project, which is really great, and there is a good velocity with respect to all the contributions over there. Moving on to what specific optimizations we did across the stack, both in the front-end, the back-end, as well as the database side, what different optimizations we did in order to make it fast. It's not just one optimization that actually gave us the speed at scale. It was a series of small optimizations that added up to a subsequent performance, both starting from the application layer, the platform, and the engine. It was all across the stack, and I'll be going over those in detail one by one. The first thing you might have noticed is that the dashboard is very much focused on the time series where you can slice and dice filter on time. So we wanted the filtering on time to be very, very efficient, and DuckDB's storage format uses row groups to store the data. And with each row group, it also stores min-max of your timestamps. If you don't order your data correctly, you might end up with these min-max, which are spread all across the place. So when you run a query with a filter on a timestamp, you may need to scan all these row groups. So one optimization was to try to sort the data during your ingestion so that your min-max and indexes are more efficiently used. Here you can see there is a query which tries to figure out top-ten products by sales for like the first week of January. And on the left, when we are not ordered, it's scanning like two row groups, but it can scan only one row group and give the result back. There's one small tip that we noticed was that you also do not want to need to sort the data in a perfect way. If your input source is already partitioned by time, you can also just preserve the insertion order during ingestion. This is much faster than just resorting the whole dataset. Another thing we noticed was that we are doing a lot of filtering on dimensions, and comparing numbers is quite faster as compared to comparing strings. So there is a data type in DugDB which is enum, which you can use instead of string columns, which allows for faster comparisons and filtering on those columns. However, there was a trade-off that we had to do over there because now we are also converting a column type, which leads to higher ingestion time. Incremental ingestion also became harder for us because we now have to rewrite the column type where we need to add more values. For example, if there is a new user, there is a new campaign. If we are using it for that column, it doesn't work very well, but it works very well for columns like gender where the values are fixed and it doesn't change over time. The next optimization we did was query cancellation. As you go in the application, a user is interacting with different states, and if there are one state, when I click on the dashboard, it fires hundreds of queries. As those queries are, results are being streamed back and those queries are being executed, there are chances that the user sometimes goes ahead and changes the state of the dashboard by maybe adding a new filter. Clicking on another dimension value. All those things lead to a bunch of queries which are in the queue. We added a queue for those queries and we started cancelling those queries. This reduced the overall load on the database and saved almost 30-40% of the CPU cycles, which overall helped us to scale it even further. We also added a priority queue because not all workloads on your application are going to be the same. Interactive dashboard queries were the highest priority for us, so we wanted that interactive experience on the dashboard, but there are other workloads like schedule reports or API machine generated queries which could be executed at a lower priority. Having a priority queue helped us a lot in order to make the dashboards more interactive. This is an acronym Mike came with today around what you see is what you fetch. We implemented the delay execution in our dashboards. You can see in this slight animation that the rows are actually loaded dynamically as we are scrolling it down, then these things are fetched from the database. We believe that only compute what you want to show to your users, even though we have the scrolling experience here, but it is being dynamically computed. We do fetch like row groups and filter heavily on the data so that we don't end up computing things which we don't need to show to the user at all. Data modeling is also another technique which if you model your data correctly, you can reduce the overall complexity or overall data that needs to be scanned at the query time. You are essentially doing a trade off where you are pushing computations to your data modeling layer, to your ingestion rather than doing it at query time every time. Here is a data model which tries to do a bunch of things. I'll start with aggregation. This is like a sales data set. First, it tries to aggregate the data by day, which in itself reduces the amount of data by 10x. Just by doing that in my data models, I am now able to reduce the amount of data that needs to be scanned for each and every query by 10x, which improves the performance there. There are certain use cases where if the business needs allow you to retain certain amount of data, as the data gets old, the value gets decreased. If you are only looking at last few quarters of data, you may also choose to set some retention rules by applying a filter in your data modeling layer. You can order the data by timestamp as to you better utilize minmax indexes and finally, materialize the output of your model in real. That will store that as a materialized model so that it doesn't need to recompute the view every time. What we actually did here is that we leveraged SQL mainly for our data modeling layer, which allows you to set all these optimizations and do those in your data modeling layer itself. Here are a few resources around a blog post that we did on why we love REL. Here is a link on how would you like to try REL. It's a simple command as Mike showed, which you can use to download and try it yourself. I'll open up for questions. We can also grab questions on the hallway. Great question from the front of the audience. I think I recognize this gentleman as the creator of Click House. Great to see you, Alexi. Questions, how does it scale beyond one machine? It's a great question. Today REL runs, we do run DuckDB for single nodes, but we have been experimenting with other engines to achieve scale. So, fun fact is that Nishant and I worked together at the company that created Apache Druid. It was an advertising analytics business called MetaMarkets. We recently have been experimenting with Click House as well to achieve scale. So today REL's cloud version does use Apache Druid, and some of our customers have 50 terabytes or more of scale running this same application. What we like about saying like Click House is it may allow us to have the same sequel, dialect, same ergonomics from small scale to large scale without having to swap engines. So, but we look forward to trying that out more in the future. Great question. Other questions before we, I think we've got one minute left. Go ahead. Can we attach a mic for the base via Dr. D? Absolutely. I wouldn't recommend attaching per se, but maybe Nishant you can show in the demo. You can read from MySQL. You can read from Postgres. We support dozens of different connectors here. The key thing for REL is that we are not just attaching to a server. We're actually ingesting or orchestrating data into the compute, the in-memory compute engine, and then we co-locate the application very close to that database server. So, yeah, you can attach to any of these data sources and bring in, again, for real developer, you're right in your laptop. I have an example where I've got 100 billion events, 100 billion event systems can scale quite well on a single net. Okay. Thank you very much. We look forward to you trying it out and hearing from you on Discord. Bye-bye. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 12.0, "text": " Next, we have Nishant and Mike with aerodynamic data models flying fast at the scale of DuckDV.", "tokens": [50364, 3087, 11, 321, 362, 426, 742, 394, 293, 6602, 365, 11207, 34988, 1412, 5245, 7137, 2370, 412, 264, 4373, 295, 29266, 35, 53, 13, 50964], "temperature": 0.0, "avg_logprob": -0.32593180338541666, "compression_ratio": 1.2745098039215685, "no_speech_prob": 0.10328863561153412}, {"id": 1, "seek": 0, "start": 12.0, "end": 23.0, "text": " Okay. Thanks so much. Great to be here. I'm Mike Driscoll. I'm the co-founder and CEO of Rail Data.", "tokens": [50964, 1033, 13, 2561, 370, 709, 13, 3769, 281, 312, 510, 13, 286, 478, 6602, 2491, 8610, 285, 13, 286, 478, 264, 598, 12, 33348, 293, 9282, 295, 23494, 11888, 13, 51514], "temperature": 0.0, "avg_logprob": -0.32593180338541666, "compression_ratio": 1.2745098039215685, "no_speech_prob": 0.10328863561153412}, {"id": 2, "seek": 2300, "start": 23.0, "end": 34.0, "text": " Here with my colleague Nishant, also co-founder of Rail Data, and we're going to be talking about DuckDB and making super fast data applications with DuckDB.", "tokens": [50364, 1692, 365, 452, 13532, 426, 742, 394, 11, 611, 598, 12, 33348, 295, 23494, 11888, 11, 293, 321, 434, 516, 281, 312, 1417, 466, 29266, 27735, 293, 1455, 1687, 2370, 1412, 5821, 365, 29266, 27735, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1267914072672526, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.24179257452487946}, {"id": 3, "seek": 2300, "start": 34.0, "end": 45.0, "text": " So really quickly, we're going to just talk about our product vision and how we ended up choosing a fast engine, ultimately what the criteria were for DuckDB.", "tokens": [50914, 407, 534, 2661, 11, 321, 434, 516, 281, 445, 751, 466, 527, 1674, 5201, 293, 577, 321, 4590, 493, 10875, 257, 2370, 2848, 11, 6284, 437, 264, 11101, 645, 337, 29266, 27735, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1267914072672526, "compression_ratio": 1.5414634146341464, "no_speech_prob": 0.24179257452487946}, {"id": 4, "seek": 4500, "start": 45.0, "end": 58.0, "text": " And then we're going to talk a little bit about some of the optimizations that we've made at the application data model and data engine layer to get Rail to be super fast for our needs.", "tokens": [50364, 400, 550, 321, 434, 516, 281, 751, 257, 707, 857, 466, 512, 295, 264, 5028, 14455, 300, 321, 600, 1027, 412, 264, 3861, 1412, 2316, 293, 1412, 2848, 4583, 281, 483, 23494, 281, 312, 1687, 2370, 337, 527, 2203, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06847528977827592, "compression_ratio": 1.620253164556962, "no_speech_prob": 0.647064745426178}, {"id": 5, "seek": 4500, "start": 58.0, "end": 63.0, "text": " So I am going to be brave enough to do a live demo here, so we'll see how that goes.", "tokens": [51014, 407, 286, 669, 516, 281, 312, 12653, 1547, 281, 360, 257, 1621, 10723, 510, 11, 370, 321, 603, 536, 577, 300, 1709, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06847528977827592, "compression_ratio": 1.620253164556962, "no_speech_prob": 0.647064745426178}, {"id": 6, "seek": 4500, "start": 63.0, "end": 71.0, "text": " But first, what is Rail? Rail is an operational BI tool. A lot of BI tools out there, so what makes us different?", "tokens": [51264, 583, 700, 11, 437, 307, 23494, 30, 23494, 307, 364, 16607, 23524, 2290, 13, 316, 688, 295, 23524, 3873, 484, 456, 11, 370, 437, 1669, 505, 819, 30, 51664], "temperature": 0.0, "avg_logprob": -0.06847528977827592, "compression_ratio": 1.620253164556962, "no_speech_prob": 0.647064745426178}, {"id": 7, "seek": 7100, "start": 71.0, "end": 83.0, "text": " Well, first of all, we have faster dashboards. We co-locate the data and compute. Queries are instant, even at billion record scale.", "tokens": [50364, 1042, 11, 700, 295, 439, 11, 321, 362, 4663, 8240, 17228, 13, 492, 598, 12, 5842, 473, 264, 1412, 293, 14722, 13, 2326, 21659, 366, 9836, 11, 754, 412, 5218, 2136, 4373, 13, 50964], "temperature": 0.0, "avg_logprob": -0.13822773711322106, "compression_ratio": 1.4405940594059405, "no_speech_prob": 0.1640801727771759}, {"id": 8, "seek": 7100, "start": 83.0, "end": 95.0, "text": " We embrace BI as code, deploy globally but develop locally with GitHub workflows, and we do all of the ETL and SQL, and we embrace a metrics first philosophy.", "tokens": [50964, 492, 14038, 23524, 382, 3089, 11, 7274, 18958, 457, 1499, 16143, 365, 23331, 43461, 11, 293, 321, 360, 439, 295, 264, 36953, 43, 293, 19200, 11, 293, 321, 14038, 257, 16367, 700, 10675, 13, 51564], "temperature": 0.0, "avg_logprob": -0.13822773711322106, "compression_ratio": 1.4405940594059405, "no_speech_prob": 0.1640801727771759}, {"id": 9, "seek": 9500, "start": 96.0, "end": 101.0, "text": " So all of the visualizations that you'll see here are automatically generated.", "tokens": [50414, 407, 439, 295, 264, 5056, 14455, 300, 291, 603, 536, 510, 366, 6772, 10833, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09337297015719943, "compression_ratio": 1.5779816513761469, "no_speech_prob": 0.3694400191307068}, {"id": 10, "seek": 9500, "start": 101.0, "end": 111.0, "text": " So let's get into it. Let's do a demo. If you want to try it at home or in the safety of your own laptop, you can install Rail with that single curl command.", "tokens": [50664, 407, 718, 311, 483, 666, 309, 13, 961, 311, 360, 257, 10723, 13, 759, 291, 528, 281, 853, 309, 412, 1280, 420, 294, 264, 4514, 295, 428, 1065, 10732, 11, 291, 393, 3625, 23494, 365, 300, 2167, 22591, 5622, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09337297015719943, "compression_ratio": 1.5779816513761469, "no_speech_prob": 0.3694400191307068}, {"id": 11, "seek": 9500, "start": 111.0, "end": 119.0, "text": " And I'll go ahead and do that here. So I've already installed Rail, so we'll just go ahead and get started.", "tokens": [51164, 400, 286, 603, 352, 2286, 293, 360, 300, 510, 13, 407, 286, 600, 1217, 8899, 23494, 11, 370, 321, 603, 445, 352, 2286, 293, 483, 1409, 13, 51564], "temperature": 0.0, "avg_logprob": -0.09337297015719943, "compression_ratio": 1.5779816513761469, "no_speech_prob": 0.3694400191307068}, {"id": 12, "seek": 11900, "start": 119.0, "end": 130.0, "text": " So let's imagine we've downloaded it here, and I'm just going to run Rail, Start, my Fosden demo. Let's get that moving.", "tokens": [50364, 407, 718, 311, 3811, 321, 600, 21748, 309, 510, 11, 293, 286, 478, 445, 516, 281, 1190, 23494, 11, 6481, 11, 452, 479, 329, 1556, 10723, 13, 961, 311, 483, 300, 2684, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14106844584147135, "compression_ratio": 1.4775280898876404, "no_speech_prob": 0.3195645809173584}, {"id": 13, "seek": 11900, "start": 130.0, "end": 142.0, "text": " So that's going to fire up a web browser here. And what I'm actually going to do is I'm going to show how we can basically add data, a source.", "tokens": [50914, 407, 300, 311, 516, 281, 2610, 493, 257, 3670, 11185, 510, 13, 400, 437, 286, 478, 767, 516, 281, 360, 307, 286, 478, 516, 281, 855, 577, 321, 393, 1936, 909, 1412, 11, 257, 4009, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14106844584147135, "compression_ratio": 1.4775280898876404, "no_speech_prob": 0.3195645809173584}, {"id": 14, "seek": 14200, "start": 142.0, "end": 150.0, "text": " This is going to be just a local file here because that's what I've got access to. So this is basically a Parquet file called GCP consumption metrics.", "tokens": [50364, 639, 307, 516, 281, 312, 445, 257, 2654, 3991, 510, 570, 300, 311, 437, 286, 600, 658, 2105, 281, 13, 407, 341, 307, 1936, 257, 3457, 19343, 3991, 1219, 460, 20049, 12126, 16367, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08220167614164807, "compression_ratio": 1.595330739299611, "no_speech_prob": 0.12217320501804352}, {"id": 15, "seek": 14200, "start": 150.0, "end": 159.0, "text": " It's got basically data from GCP that I collected on our cloud usage. I'm going to bring that in as a source.", "tokens": [50764, 467, 311, 658, 1936, 1412, 490, 460, 20049, 300, 286, 11087, 322, 527, 4588, 14924, 13, 286, 478, 516, 281, 1565, 300, 294, 382, 257, 4009, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08220167614164807, "compression_ratio": 1.595330739299611, "no_speech_prob": 0.12217320501804352}, {"id": 16, "seek": 14200, "start": 159.0, "end": 169.0, "text": " And what you'll see here is pretty fast. We imported 4.4 million records, and we can actually, with one click here, we're going to build a dashboard.", "tokens": [51214, 400, 437, 291, 603, 536, 510, 307, 1238, 2370, 13, 492, 25524, 1017, 13, 19, 2459, 7724, 11, 293, 321, 393, 767, 11, 365, 472, 2052, 510, 11, 321, 434, 516, 281, 1322, 257, 18342, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08220167614164807, "compression_ratio": 1.595330739299611, "no_speech_prob": 0.12217320501804352}, {"id": 17, "seek": 16900, "start": 169.0, "end": 176.0, "text": " So it's 4.5 million records with about seven columns. There's a timestamp there. Let's auto-generate a dashboard.", "tokens": [50364, 407, 309, 311, 1017, 13, 20, 2459, 7724, 365, 466, 3407, 13766, 13, 821, 311, 257, 49108, 1215, 456, 13, 961, 311, 8399, 12, 21848, 473, 257, 18342, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09598963910883124, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.03017738275229931}, {"id": 18, "seek": 16900, "start": 176.0, "end": 185.0, "text": " And instantly we can look at some trends in this GCP data. Again, these are automatically generated dashboards.", "tokens": [50714, 400, 13518, 321, 393, 574, 412, 512, 13892, 294, 341, 460, 20049, 1412, 13, 3764, 11, 613, 366, 6772, 10833, 8240, 17228, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09598963910883124, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.03017738275229931}, {"id": 19, "seek": 16900, "start": 185.0, "end": 195.0, "text": " I'm actually going to zoom in on a particular area of the data here. And Rail lets me kind of slice and dice this data.", "tokens": [51164, 286, 478, 767, 516, 281, 8863, 294, 322, 257, 1729, 1859, 295, 264, 1412, 510, 13, 400, 23494, 6653, 385, 733, 295, 13153, 293, 10313, 341, 1412, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09598963910883124, "compression_ratio": 1.5265486725663717, "no_speech_prob": 0.03017738275229931}, {"id": 20, "seek": 19500, "start": 195.0, "end": 204.0, "text": " I can take a look at what I've been paying for cloud storage. Wow, it looks like something was going on there sometime in 2021.", "tokens": [50364, 286, 393, 747, 257, 574, 412, 437, 286, 600, 668, 6229, 337, 4588, 6725, 13, 3153, 11, 309, 1542, 411, 746, 390, 516, 322, 456, 15053, 294, 7201, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10544877960568383, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.39155662059783936}, {"id": 21, "seek": 19500, "start": 204.0, "end": 210.0, "text": " I can zoom into that if I wanted to drill further and find out if there's a particular skew that was driving that.", "tokens": [50814, 286, 393, 8863, 666, 300, 498, 286, 1415, 281, 11392, 3052, 293, 915, 484, 498, 456, 311, 257, 1729, 8756, 86, 300, 390, 4840, 300, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10544877960568383, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.39155662059783936}, {"id": 22, "seek": 19500, "start": 210.0, "end": 216.0, "text": " I can kind of get some insights with that, break this down and look at period over period comparisons.", "tokens": [51114, 286, 393, 733, 295, 483, 512, 14310, 365, 300, 11, 1821, 341, 760, 293, 574, 412, 2896, 670, 2896, 33157, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10544877960568383, "compression_ratio": 1.5898617511520738, "no_speech_prob": 0.39155662059783936}, {"id": 23, "seek": 21600, "start": 216.0, "end": 222.0, "text": " There's a lot of visualizations I can do. I can even create pivot tables here in Rail.", "tokens": [50364, 821, 311, 257, 688, 295, 5056, 14455, 286, 393, 360, 13, 286, 393, 754, 1884, 14538, 8020, 510, 294, 23494, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11310609516344572, "compression_ratio": 1.5420168067226891, "no_speech_prob": 0.5478945374488831}, {"id": 24, "seek": 21600, "start": 222.0, "end": 233.0, "text": " And that's something that we've spent some time launching. But I won't go much further into Rail because we've only got a lightning talk here.", "tokens": [50664, 400, 300, 311, 746, 300, 321, 600, 4418, 512, 565, 18354, 13, 583, 286, 1582, 380, 352, 709, 3052, 666, 23494, 570, 321, 600, 787, 658, 257, 16589, 751, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11310609516344572, "compression_ratio": 1.5420168067226891, "no_speech_prob": 0.5478945374488831}, {"id": 25, "seek": 21600, "start": 233.0, "end": 242.0, "text": " I'm going to turn it over to my colleague, Nishant, to talk a little bit about what we've done to make Rail work really fast with DuckDB.", "tokens": [51214, 286, 478, 516, 281, 1261, 309, 670, 281, 452, 13532, 11, 426, 742, 394, 11, 281, 751, 257, 707, 857, 466, 437, 321, 600, 1096, 281, 652, 23494, 589, 534, 2370, 365, 29266, 27735, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11310609516344572, "compression_ratio": 1.5420168067226891, "no_speech_prob": 0.5478945374488831}, {"id": 26, "seek": 24200, "start": 242.0, "end": 251.0, "text": " Thanks, Mike. So there have been a lot of optimizations that we have done in order to make it snappy and faster, specifically at scale.", "tokens": [50364, 2561, 11, 6602, 13, 407, 456, 362, 668, 257, 688, 295, 5028, 14455, 300, 321, 362, 1096, 294, 1668, 281, 652, 309, 14528, 7966, 293, 4663, 11, 4682, 412, 4373, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08950205523558337, "compression_ratio": 1.6194331983805668, "no_speech_prob": 0.01701415330171585}, {"id": 27, "seek": 24200, "start": 251.0, "end": 261.0, "text": " So we have a three-in-one architecture where Rail starts with, as Mike showed, connecting to a source of data, then loading that source of data into Rail,", "tokens": [50814, 407, 321, 362, 257, 1045, 12, 259, 12, 546, 9482, 689, 23494, 3719, 365, 11, 382, 6602, 4712, 11, 11015, 281, 257, 4009, 295, 1412, 11, 550, 15114, 300, 4009, 295, 1412, 666, 23494, 11, 51314], "temperature": 0.0, "avg_logprob": -0.08950205523558337, "compression_ratio": 1.6194331983805668, "no_speech_prob": 0.01701415330171585}, {"id": 28, "seek": 24200, "start": 261.0, "end": 269.0, "text": " storing that into an in-memory database, DuckDB, and then running these operational BI dashboards on the top.", "tokens": [51314, 26085, 300, 666, 364, 294, 12, 17886, 827, 8149, 11, 29266, 27735, 11, 293, 550, 2614, 613, 16607, 23524, 8240, 17228, 322, 264, 1192, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08950205523558337, "compression_ratio": 1.6194331983805668, "no_speech_prob": 0.01701415330171585}, {"id": 29, "seek": 26900, "start": 270.0, "end": 278.0, "text": " So why we chose DuckDB? What were our requirements? How we came to use DuckDB?", "tokens": [50414, 407, 983, 321, 5111, 29266, 27735, 30, 708, 645, 527, 7728, 30, 1012, 321, 1361, 281, 764, 29266, 27735, 30, 50814], "temperature": 0.0, "avg_logprob": -0.08704827993344037, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.009864305146038532}, {"id": 30, "seek": 26900, "start": 278.0, "end": 287.0, "text": " There are a couple of things why we like DuckDB. The first one is speed. We were able to profile tens of GBs of data on your local laptop.", "tokens": [50814, 821, 366, 257, 1916, 295, 721, 983, 321, 411, 29266, 27735, 13, 440, 700, 472, 307, 3073, 13, 492, 645, 1075, 281, 7964, 10688, 295, 26809, 82, 295, 1412, 322, 428, 2654, 10732, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08704827993344037, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.009864305146038532}, {"id": 31, "seek": 26900, "start": 287.0, "end": 293.0, "text": " So the demo we showed was just offline on this laptop only with subsequent performance.", "tokens": [51264, 407, 264, 10723, 321, 4712, 390, 445, 21857, 322, 341, 10732, 787, 365, 19962, 3389, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08704827993344037, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.009864305146038532}, {"id": 32, "seek": 29300, "start": 293.0, "end": 300.0, "text": " It's simple and lightweight, so it can be embedded into a very small binary size, which could be downloaded and easily started.", "tokens": [50364, 467, 311, 2199, 293, 22052, 11, 370, 309, 393, 312, 16741, 666, 257, 588, 1359, 17434, 2744, 11, 597, 727, 312, 21748, 293, 3612, 1409, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08277861553689708, "compression_ratio": 1.7402135231316727, "no_speech_prob": 0.006060005631297827}, {"id": 33, "seek": 29300, "start": 300.0, "end": 306.0, "text": " It can scale up to hundreds of concurrent queries and scale up to hundreds of GBs of data.", "tokens": [50714, 467, 393, 4373, 493, 281, 6779, 295, 37702, 24109, 293, 4373, 493, 281, 6779, 295, 26809, 82, 295, 1412, 13, 51014], "temperature": 0.0, "avg_logprob": -0.08277861553689708, "compression_ratio": 1.7402135231316727, "no_speech_prob": 0.006060005631297827}, {"id": 34, "seek": 29300, "start": 306.0, "end": 314.0, "text": " So the dashboard that you saw, there were almost 50-plus queries that were fired concurrently from that dashboard when that was loaded.", "tokens": [51014, 407, 264, 18342, 300, 291, 1866, 11, 456, 645, 1920, 2625, 12, 18954, 24109, 300, 645, 11777, 37702, 356, 490, 300, 18342, 562, 300, 390, 13210, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08277861553689708, "compression_ratio": 1.7402135231316727, "no_speech_prob": 0.006060005631297827}, {"id": 35, "seek": 29300, "start": 314.0, "end": 322.0, "text": " Rail is open source, and we love open source technologies, so is DuckDB. So that was also one of the reasons to choose DuckDB as well.", "tokens": [51414, 23494, 307, 1269, 4009, 11, 293, 321, 959, 1269, 4009, 7943, 11, 370, 307, 29266, 27735, 13, 407, 300, 390, 611, 472, 295, 264, 4112, 281, 2826, 29266, 27735, 382, 731, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08277861553689708, "compression_ratio": 1.7402135231316727, "no_speech_prob": 0.006060005631297827}, {"id": 36, "seek": 32200, "start": 322.0, "end": 327.0, "text": " Here is another snapshot of DuckDB commits. This is again like a real dashboard.", "tokens": [50364, 1692, 307, 1071, 30163, 295, 29266, 27735, 48311, 13, 639, 307, 797, 411, 257, 957, 18342, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07199735538933867, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.0076544093899428844}, {"id": 37, "seek": 32200, "start": 327.0, "end": 333.0, "text": " It's hosted on this demo URL if you want to dig further and slice and dice the different commits on GitHub.", "tokens": [50614, 467, 311, 19204, 322, 341, 10723, 12905, 498, 291, 528, 281, 2528, 3052, 293, 13153, 293, 10313, 264, 819, 48311, 322, 23331, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07199735538933867, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.0076544093899428844}, {"id": 38, "seek": 32200, "start": 333.0, "end": 340.0, "text": " You can do that as well, but you can see that there are over 350 contributors on the DuckDB project, which is really great,", "tokens": [50914, 509, 393, 360, 300, 382, 731, 11, 457, 291, 393, 536, 300, 456, 366, 670, 18065, 45627, 322, 264, 29266, 27735, 1716, 11, 597, 307, 534, 869, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07199735538933867, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.0076544093899428844}, {"id": 39, "seek": 32200, "start": 340.0, "end": 344.0, "text": " and there is a good velocity with respect to all the contributions over there.", "tokens": [51264, 293, 456, 307, 257, 665, 9269, 365, 3104, 281, 439, 264, 15725, 670, 456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07199735538933867, "compression_ratio": 1.5515873015873016, "no_speech_prob": 0.0076544093899428844}, {"id": 40, "seek": 34400, "start": 344.0, "end": 353.0, "text": " Moving on to what specific optimizations we did across the stack, both in the front-end, the back-end, as well as the database side,", "tokens": [50364, 14242, 322, 281, 437, 2685, 5028, 14455, 321, 630, 2108, 264, 8630, 11, 1293, 294, 264, 1868, 12, 521, 11, 264, 646, 12, 521, 11, 382, 731, 382, 264, 8149, 1252, 11, 50814], "temperature": 0.0, "avg_logprob": -0.07378600918969443, "compression_ratio": 1.6778846153846154, "no_speech_prob": 0.01709037460386753}, {"id": 41, "seek": 34400, "start": 353.0, "end": 357.0, "text": " what different optimizations we did in order to make it fast.", "tokens": [50814, 437, 819, 5028, 14455, 321, 630, 294, 1668, 281, 652, 309, 2370, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07378600918969443, "compression_ratio": 1.6778846153846154, "no_speech_prob": 0.01709037460386753}, {"id": 42, "seek": 34400, "start": 357.0, "end": 362.0, "text": " It's not just one optimization that actually gave us the speed at scale.", "tokens": [51014, 467, 311, 406, 445, 472, 19618, 300, 767, 2729, 505, 264, 3073, 412, 4373, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07378600918969443, "compression_ratio": 1.6778846153846154, "no_speech_prob": 0.01709037460386753}, {"id": 43, "seek": 34400, "start": 362.0, "end": 367.0, "text": " It was a series of small optimizations that added up to a subsequent performance,", "tokens": [51264, 467, 390, 257, 2638, 295, 1359, 5028, 14455, 300, 3869, 493, 281, 257, 19962, 3389, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07378600918969443, "compression_ratio": 1.6778846153846154, "no_speech_prob": 0.01709037460386753}, {"id": 44, "seek": 36700, "start": 367.0, "end": 372.0, "text": " both starting from the application layer, the platform, and the engine.", "tokens": [50364, 1293, 2891, 490, 264, 3861, 4583, 11, 264, 3663, 11, 293, 264, 2848, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10452162865364906, "compression_ratio": 1.6459143968871595, "no_speech_prob": 0.022444695234298706}, {"id": 45, "seek": 36700, "start": 372.0, "end": 379.0, "text": " It was all across the stack, and I'll be going over those in detail one by one.", "tokens": [50614, 467, 390, 439, 2108, 264, 8630, 11, 293, 286, 603, 312, 516, 670, 729, 294, 2607, 472, 538, 472, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10452162865364906, "compression_ratio": 1.6459143968871595, "no_speech_prob": 0.022444695234298706}, {"id": 46, "seek": 36700, "start": 379.0, "end": 387.0, "text": " The first thing you might have noticed is that the dashboard is very much focused on the time series where you can slice and dice filter on time.", "tokens": [50964, 440, 700, 551, 291, 1062, 362, 5694, 307, 300, 264, 18342, 307, 588, 709, 5178, 322, 264, 565, 2638, 689, 291, 393, 13153, 293, 10313, 6608, 322, 565, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10452162865364906, "compression_ratio": 1.6459143968871595, "no_speech_prob": 0.022444695234298706}, {"id": 47, "seek": 36700, "start": 387.0, "end": 396.0, "text": " So we wanted the filtering on time to be very, very efficient, and DuckDB's storage format uses row groups to store the data.", "tokens": [51364, 407, 321, 1415, 264, 30822, 322, 565, 281, 312, 588, 11, 588, 7148, 11, 293, 29266, 27735, 311, 6725, 7877, 4960, 5386, 3935, 281, 3531, 264, 1412, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10452162865364906, "compression_ratio": 1.6459143968871595, "no_speech_prob": 0.022444695234298706}, {"id": 48, "seek": 39600, "start": 396.0, "end": 400.0, "text": " And with each row group, it also stores min-max of your timestamps.", "tokens": [50364, 400, 365, 1184, 5386, 1594, 11, 309, 611, 9512, 923, 12, 41167, 295, 428, 49108, 23150, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08506272873788509, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.009791502729058266}, {"id": 49, "seek": 39600, "start": 400.0, "end": 406.0, "text": " If you don't order your data correctly, you might end up with these min-max, which are spread all across the place.", "tokens": [50564, 759, 291, 500, 380, 1668, 428, 1412, 8944, 11, 291, 1062, 917, 493, 365, 613, 923, 12, 41167, 11, 597, 366, 3974, 439, 2108, 264, 1081, 13, 50864], "temperature": 0.0, "avg_logprob": -0.08506272873788509, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.009791502729058266}, {"id": 50, "seek": 39600, "start": 406.0, "end": 411.0, "text": " So when you run a query with a filter on a timestamp, you may need to scan all these row groups.", "tokens": [50864, 407, 562, 291, 1190, 257, 14581, 365, 257, 6608, 322, 257, 49108, 1215, 11, 291, 815, 643, 281, 11049, 439, 613, 5386, 3935, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08506272873788509, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.009791502729058266}, {"id": 51, "seek": 39600, "start": 411.0, "end": 420.0, "text": " So one optimization was to try to sort the data during your ingestion so that your min-max and indexes are more efficiently used.", "tokens": [51114, 407, 472, 19618, 390, 281, 853, 281, 1333, 264, 1412, 1830, 428, 3957, 31342, 370, 300, 428, 923, 12, 41167, 293, 8186, 279, 366, 544, 19621, 1143, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08506272873788509, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.009791502729058266}, {"id": 52, "seek": 42000, "start": 420.0, "end": 428.0, "text": " Here you can see there is a query which tries to figure out top-ten products by sales for like the first week of January.", "tokens": [50364, 1692, 291, 393, 536, 456, 307, 257, 14581, 597, 9898, 281, 2573, 484, 1192, 12, 1147, 3383, 538, 5763, 337, 411, 264, 700, 1243, 295, 7061, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09125038918028487, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.014587723650038242}, {"id": 53, "seek": 42000, "start": 428.0, "end": 437.0, "text": " And on the left, when we are not ordered, it's scanning like two row groups, but it can scan only one row group and give the result back.", "tokens": [50764, 400, 322, 264, 1411, 11, 562, 321, 366, 406, 8866, 11, 309, 311, 27019, 411, 732, 5386, 3935, 11, 457, 309, 393, 11049, 787, 472, 5386, 1594, 293, 976, 264, 1874, 646, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09125038918028487, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.014587723650038242}, {"id": 54, "seek": 42000, "start": 437.0, "end": 445.0, "text": " There's one small tip that we noticed was that you also do not want to need to sort the data in a perfect way.", "tokens": [51214, 821, 311, 472, 1359, 4125, 300, 321, 5694, 390, 300, 291, 611, 360, 406, 528, 281, 643, 281, 1333, 264, 1412, 294, 257, 2176, 636, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09125038918028487, "compression_ratio": 1.574468085106383, "no_speech_prob": 0.014587723650038242}, {"id": 55, "seek": 44500, "start": 445.0, "end": 452.0, "text": " If your input source is already partitioned by time, you can also just preserve the insertion order during ingestion.", "tokens": [50364, 759, 428, 4846, 4009, 307, 1217, 24808, 292, 538, 565, 11, 291, 393, 611, 445, 15665, 264, 8969, 313, 1668, 1830, 3957, 31342, 13, 50714], "temperature": 0.0, "avg_logprob": -0.05982137706181775, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.010090427473187447}, {"id": 56, "seek": 44500, "start": 452.0, "end": 456.0, "text": " This is much faster than just resorting the whole dataset.", "tokens": [50714, 639, 307, 709, 4663, 813, 445, 725, 477, 278, 264, 1379, 28872, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05982137706181775, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.010090427473187447}, {"id": 57, "seek": 44500, "start": 456.0, "end": 467.0, "text": " Another thing we noticed was that we are doing a lot of filtering on dimensions, and comparing numbers is quite faster as compared to comparing strings.", "tokens": [50914, 3996, 551, 321, 5694, 390, 300, 321, 366, 884, 257, 688, 295, 30822, 322, 12819, 11, 293, 15763, 3547, 307, 1596, 4663, 382, 5347, 281, 15763, 13985, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05982137706181775, "compression_ratio": 1.604878048780488, "no_speech_prob": 0.010090427473187447}, {"id": 58, "seek": 46700, "start": 467.0, "end": 478.0, "text": " So there is a data type in DugDB which is enum, which you can use instead of string columns, which allows for faster comparisons and filtering on those columns.", "tokens": [50364, 407, 456, 307, 257, 1412, 2010, 294, 413, 697, 27735, 597, 307, 465, 449, 11, 597, 291, 393, 764, 2602, 295, 6798, 13766, 11, 597, 4045, 337, 4663, 33157, 293, 30822, 322, 729, 13766, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14834384660463076, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.0537358857691288}, {"id": 59, "seek": 46700, "start": 478.0, "end": 487.0, "text": " However, there was a trade-off that we had to do over there because now we are also converting a column type, which leads to higher ingestion time.", "tokens": [50914, 2908, 11, 456, 390, 257, 4923, 12, 4506, 300, 321, 632, 281, 360, 670, 456, 570, 586, 321, 366, 611, 29942, 257, 7738, 2010, 11, 597, 6689, 281, 2946, 3957, 31342, 565, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14834384660463076, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.0537358857691288}, {"id": 60, "seek": 48700, "start": 488.0, "end": 496.0, "text": " Incremental ingestion also became harder for us because we now have to rewrite the column type where we need to add more values.", "tokens": [50414, 30367, 15875, 3957, 31342, 611, 3062, 6081, 337, 505, 570, 321, 586, 362, 281, 28132, 264, 7738, 2010, 689, 321, 643, 281, 909, 544, 4190, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08144155957482078, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.10088513791561127}, {"id": 61, "seek": 48700, "start": 496.0, "end": 499.0, "text": " For example, if there is a new user, there is a new campaign.", "tokens": [50814, 1171, 1365, 11, 498, 456, 307, 257, 777, 4195, 11, 456, 307, 257, 777, 5129, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08144155957482078, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.10088513791561127}, {"id": 62, "seek": 48700, "start": 499.0, "end": 508.0, "text": " If we are using it for that column, it doesn't work very well, but it works very well for columns like gender where the values are fixed and it doesn't change over time.", "tokens": [50964, 759, 321, 366, 1228, 309, 337, 300, 7738, 11, 309, 1177, 380, 589, 588, 731, 11, 457, 309, 1985, 588, 731, 337, 13766, 411, 7898, 689, 264, 4190, 366, 6806, 293, 309, 1177, 380, 1319, 670, 565, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08144155957482078, "compression_ratio": 1.6822429906542056, "no_speech_prob": 0.10088513791561127}, {"id": 63, "seek": 50800, "start": 509.0, "end": 514.0, "text": " The next optimization we did was query cancellation.", "tokens": [50414, 440, 958, 19618, 321, 630, 390, 14581, 45867, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12752661497696585, "compression_ratio": 1.7269076305220883, "no_speech_prob": 0.011332261376082897}, {"id": 64, "seek": 50800, "start": 514.0, "end": 526.0, "text": " As you go in the application, a user is interacting with different states, and if there are one state, when I click on the dashboard, it fires hundreds of queries.", "tokens": [50664, 1018, 291, 352, 294, 264, 3861, 11, 257, 4195, 307, 18017, 365, 819, 4368, 11, 293, 498, 456, 366, 472, 1785, 11, 562, 286, 2052, 322, 264, 18342, 11, 309, 15044, 6779, 295, 24109, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12752661497696585, "compression_ratio": 1.7269076305220883, "no_speech_prob": 0.011332261376082897}, {"id": 65, "seek": 50800, "start": 526.0, "end": 537.0, "text": " As those queries are, results are being streamed back and those queries are being executed, there are chances that the user sometimes goes ahead and changes the state of the dashboard by maybe adding a new filter.", "tokens": [51264, 1018, 729, 24109, 366, 11, 3542, 366, 885, 4309, 292, 646, 293, 729, 24109, 366, 885, 17577, 11, 456, 366, 10486, 300, 264, 4195, 2171, 1709, 2286, 293, 2962, 264, 1785, 295, 264, 18342, 538, 1310, 5127, 257, 777, 6608, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12752661497696585, "compression_ratio": 1.7269076305220883, "no_speech_prob": 0.011332261376082897}, {"id": 66, "seek": 53800, "start": 538.0, "end": 541.0, "text": " Clicking on another dimension value.", "tokens": [50364, 8230, 278, 322, 1071, 10139, 2158, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12728185653686525, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.007228564005345106}, {"id": 67, "seek": 53800, "start": 541.0, "end": 545.0, "text": " All those things lead to a bunch of queries which are in the queue.", "tokens": [50514, 1057, 729, 721, 1477, 281, 257, 3840, 295, 24109, 597, 366, 294, 264, 18639, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12728185653686525, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.007228564005345106}, {"id": 68, "seek": 53800, "start": 545.0, "end": 549.0, "text": " We added a queue for those queries and we started cancelling those queries.", "tokens": [50714, 492, 3869, 257, 18639, 337, 729, 24109, 293, 321, 1409, 393, 384, 2669, 729, 24109, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12728185653686525, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.007228564005345106}, {"id": 69, "seek": 53800, "start": 549.0, "end": 558.0, "text": " This reduced the overall load on the database and saved almost 30-40% of the CPU cycles, which overall helped us to scale it even further.", "tokens": [50914, 639, 9212, 264, 4787, 3677, 322, 264, 8149, 293, 6624, 1920, 2217, 12, 5254, 4, 295, 264, 13199, 17796, 11, 597, 4787, 4254, 505, 281, 4373, 309, 754, 3052, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12728185653686525, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.007228564005345106}, {"id": 70, "seek": 53800, "start": 561.0, "end": 566.0, "text": " We also added a priority queue because not all workloads on your application are going to be the same.", "tokens": [51514, 492, 611, 3869, 257, 9365, 18639, 570, 406, 439, 32452, 322, 428, 3861, 366, 516, 281, 312, 264, 912, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12728185653686525, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.007228564005345106}, {"id": 71, "seek": 56600, "start": 566.0, "end": 581.0, "text": " Interactive dashboard queries were the highest priority for us, so we wanted that interactive experience on the dashboard, but there are other workloads like schedule reports or API machine generated queries which could be executed at a lower priority.", "tokens": [50364, 5751, 12596, 18342, 24109, 645, 264, 6343, 9365, 337, 505, 11, 370, 321, 1415, 300, 15141, 1752, 322, 264, 18342, 11, 457, 456, 366, 661, 32452, 411, 7567, 7122, 420, 9362, 3479, 10833, 24109, 597, 727, 312, 17577, 412, 257, 3126, 9365, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1569896520570267, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.002448225859552622}, {"id": 72, "seek": 56600, "start": 581.0, "end": 586.0, "text": " Having a priority queue helped us a lot in order to make the dashboards more interactive.", "tokens": [51114, 10222, 257, 9365, 18639, 4254, 505, 257, 688, 294, 1668, 281, 652, 264, 8240, 17228, 544, 15141, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1569896520570267, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.002448225859552622}, {"id": 73, "seek": 56600, "start": 588.0, "end": 592.0, "text": " This is an acronym Mike came with today around what you see is what you fetch.", "tokens": [51464, 639, 307, 364, 39195, 6602, 1361, 365, 965, 926, 437, 291, 536, 307, 437, 291, 23673, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1569896520570267, "compression_ratio": 1.6907630522088353, "no_speech_prob": 0.002448225859552622}, {"id": 74, "seek": 59200, "start": 593.0, "end": 596.0, "text": " We implemented the delay execution in our dashboards.", "tokens": [50414, 492, 12270, 264, 8577, 15058, 294, 527, 8240, 17228, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1525452287891243, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.008356302045285702}, {"id": 75, "seek": 59200, "start": 596.0, "end": 606.0, "text": " You can see in this slight animation that the rows are actually loaded dynamically as we are scrolling it down, then these things are fetched from the database.", "tokens": [50564, 509, 393, 536, 294, 341, 4036, 9603, 300, 264, 13241, 366, 767, 13210, 43492, 382, 321, 366, 29053, 309, 760, 11, 550, 613, 721, 366, 23673, 292, 490, 264, 8149, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1525452287891243, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.008356302045285702}, {"id": 76, "seek": 59200, "start": 606.0, "end": 615.0, "text": " We believe that only compute what you want to show to your users, even though we have the scrolling experience here, but it is being dynamically computed.", "tokens": [51064, 492, 1697, 300, 787, 14722, 437, 291, 528, 281, 855, 281, 428, 5022, 11, 754, 1673, 321, 362, 264, 29053, 1752, 510, 11, 457, 309, 307, 885, 43492, 40610, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1525452287891243, "compression_ratio": 1.662162162162162, "no_speech_prob": 0.008356302045285702}, {"id": 77, "seek": 61500, "start": 616.0, "end": 624.0, "text": " We do fetch like row groups and filter heavily on the data so that we don't end up computing things which we don't need to show to the user at all.", "tokens": [50414, 492, 360, 23673, 411, 5386, 3935, 293, 6608, 10950, 322, 264, 1412, 370, 300, 321, 500, 380, 917, 493, 15866, 721, 597, 321, 500, 380, 643, 281, 855, 281, 264, 4195, 412, 439, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08600245436576948, "compression_ratio": 1.6169154228855722, "no_speech_prob": 0.011078513227403164}, {"id": 78, "seek": 61500, "start": 627.0, "end": 639.0, "text": " Data modeling is also another technique which if you model your data correctly, you can reduce the overall complexity or overall data that needs to be scanned at the query time.", "tokens": [50964, 11888, 15983, 307, 611, 1071, 6532, 597, 498, 291, 2316, 428, 1412, 8944, 11, 291, 393, 5407, 264, 4787, 14024, 420, 4787, 1412, 300, 2203, 281, 312, 45089, 412, 264, 14581, 565, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08600245436576948, "compression_ratio": 1.6169154228855722, "no_speech_prob": 0.011078513227403164}, {"id": 79, "seek": 63900, "start": 640.0, "end": 649.0, "text": " You are essentially doing a trade off where you are pushing computations to your data modeling layer, to your ingestion rather than doing it at query time every time.", "tokens": [50414, 509, 366, 4476, 884, 257, 4923, 766, 689, 291, 366, 7380, 2807, 763, 281, 428, 1412, 15983, 4583, 11, 281, 428, 3957, 31342, 2831, 813, 884, 309, 412, 14581, 565, 633, 565, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14397251483091375, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.012721733190119267}, {"id": 80, "seek": 63900, "start": 650.0, "end": 654.0, "text": " Here is a data model which tries to do a bunch of things.", "tokens": [50914, 1692, 307, 257, 1412, 2316, 597, 9898, 281, 360, 257, 3840, 295, 721, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14397251483091375, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.012721733190119267}, {"id": 81, "seek": 63900, "start": 654.0, "end": 656.0, "text": " I'll start with aggregation.", "tokens": [51114, 286, 603, 722, 365, 16743, 399, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14397251483091375, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.012721733190119267}, {"id": 82, "seek": 63900, "start": 658.0, "end": 660.0, "text": " This is like a sales data set.", "tokens": [51314, 639, 307, 411, 257, 5763, 1412, 992, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14397251483091375, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.012721733190119267}, {"id": 83, "seek": 63900, "start": 660.0, "end": 666.0, "text": " First, it tries to aggregate the data by day, which in itself reduces the amount of data by 10x.", "tokens": [51414, 2386, 11, 309, 9898, 281, 26118, 264, 1412, 538, 786, 11, 597, 294, 2564, 18081, 264, 2372, 295, 1412, 538, 1266, 87, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14397251483091375, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.012721733190119267}, {"id": 84, "seek": 66600, "start": 666.0, "end": 675.0, "text": " Just by doing that in my data models, I am now able to reduce the amount of data that needs to be scanned for each and every query by 10x, which improves the performance there.", "tokens": [50364, 1449, 538, 884, 300, 294, 452, 1412, 5245, 11, 286, 669, 586, 1075, 281, 5407, 264, 2372, 295, 1412, 300, 2203, 281, 312, 45089, 337, 1184, 293, 633, 14581, 538, 1266, 87, 11, 597, 24771, 264, 3389, 456, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10561183646873191, "compression_ratio": 1.7372262773722629, "no_speech_prob": 0.00313701038248837}, {"id": 85, "seek": 66600, "start": 676.0, "end": 684.0, "text": " There are certain use cases where if the business needs allow you to retain certain amount of data, as the data gets old, the value gets decreased.", "tokens": [50864, 821, 366, 1629, 764, 3331, 689, 498, 264, 1606, 2203, 2089, 291, 281, 18340, 1629, 2372, 295, 1412, 11, 382, 264, 1412, 2170, 1331, 11, 264, 2158, 2170, 24436, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10561183646873191, "compression_ratio": 1.7372262773722629, "no_speech_prob": 0.00313701038248837}, {"id": 86, "seek": 66600, "start": 684.0, "end": 693.0, "text": " If you are only looking at last few quarters of data, you may also choose to set some retention rules by applying a filter in your data modeling layer.", "tokens": [51264, 759, 291, 366, 787, 1237, 412, 1036, 1326, 20612, 295, 1412, 11, 291, 815, 611, 2826, 281, 992, 512, 22871, 4474, 538, 9275, 257, 6608, 294, 428, 1412, 15983, 4583, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10561183646873191, "compression_ratio": 1.7372262773722629, "no_speech_prob": 0.00313701038248837}, {"id": 87, "seek": 69300, "start": 694.0, "end": 703.0, "text": " You can order the data by timestamp as to you better utilize minmax indexes and finally, materialize the output of your model in real.", "tokens": [50414, 509, 393, 1668, 264, 1412, 538, 49108, 1215, 382, 281, 291, 1101, 16117, 923, 41167, 8186, 279, 293, 2721, 11, 2527, 1125, 264, 5598, 295, 428, 2316, 294, 957, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2758779040837692, "compression_ratio": 1.5, "no_speech_prob": 0.008204523473978043}, {"id": 88, "seek": 69300, "start": 703.0, "end": 709.0, "text": " That will store that as a materialized model so that it doesn't need to recompute the view every time.", "tokens": [50864, 663, 486, 3531, 300, 382, 257, 2527, 1602, 2316, 370, 300, 309, 1177, 380, 643, 281, 48000, 1169, 264, 1910, 633, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2758779040837692, "compression_ratio": 1.5, "no_speech_prob": 0.008204523473978043}, {"id": 89, "seek": 70900, "start": 710.0, "end": 725.0, "text": " What we actually did here is that we leveraged SQL mainly for our data modeling layer, which allows you to set all these optimizations and do those in your data modeling layer itself.", "tokens": [50414, 708, 321, 767, 630, 510, 307, 300, 321, 12451, 2980, 19200, 8704, 337, 527, 1412, 15983, 4583, 11, 597, 4045, 291, 281, 992, 439, 613, 5028, 14455, 293, 360, 729, 294, 428, 1412, 15983, 4583, 2564, 13, 51164], "temperature": 0.0, "avg_logprob": -0.20966449860603578, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.02638321928679943}, {"id": 90, "seek": 70900, "start": 725.0, "end": 732.0, "text": " Here are a few resources around a blog post that we did on why we love REL.", "tokens": [51164, 1692, 366, 257, 1326, 3593, 926, 257, 6968, 2183, 300, 321, 630, 322, 983, 321, 959, 497, 3158, 13, 51514], "temperature": 0.0, "avg_logprob": -0.20966449860603578, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.02638321928679943}, {"id": 91, "seek": 73200, "start": 732.0, "end": 737.0, "text": " Here is a link on how would you like to try REL.", "tokens": [50364, 1692, 307, 257, 2113, 322, 577, 576, 291, 411, 281, 853, 497, 3158, 13, 50614], "temperature": 0.0, "avg_logprob": -0.251565416653951, "compression_ratio": 1.2790697674418605, "no_speech_prob": 0.14871910214424133}, {"id": 92, "seek": 73200, "start": 737.0, "end": 744.0, "text": " It's a simple command as Mike showed, which you can use to download and try it yourself.", "tokens": [50614, 467, 311, 257, 2199, 5622, 382, 6602, 4712, 11, 597, 291, 393, 764, 281, 5484, 293, 853, 309, 1803, 13, 50964], "temperature": 0.0, "avg_logprob": -0.251565416653951, "compression_ratio": 1.2790697674418605, "no_speech_prob": 0.14871910214424133}, {"id": 93, "seek": 73200, "start": 744.0, "end": 747.0, "text": " I'll open up for questions.", "tokens": [50964, 286, 603, 1269, 493, 337, 1651, 13, 51114], "temperature": 0.0, "avg_logprob": -0.251565416653951, "compression_ratio": 1.2790697674418605, "no_speech_prob": 0.14871910214424133}, {"id": 94, "seek": 76200, "start": 763.0, "end": 769.0, "text": " We can also grab questions on the hallway.", "tokens": [50414, 492, 393, 611, 4444, 1651, 322, 264, 23903, 13, 50714], "temperature": 0.0, "avg_logprob": -0.29050875932742387, "compression_ratio": 1.3025210084033614, "no_speech_prob": 0.03479379415512085}, {"id": 95, "seek": 76200, "start": 769.0, "end": 782.0, "text": " Great question from the front of the audience.", "tokens": [50714, 3769, 1168, 490, 264, 1868, 295, 264, 4034, 13, 51364], "temperature": 0.0, "avg_logprob": -0.29050875932742387, "compression_ratio": 1.3025210084033614, "no_speech_prob": 0.03479379415512085}, {"id": 96, "seek": 76200, "start": 782.0, "end": 787.0, "text": " I think I recognize this gentleman as the creator of Click House.", "tokens": [51364, 286, 519, 286, 5521, 341, 15761, 382, 264, 14181, 295, 8230, 4928, 13, 51614], "temperature": 0.0, "avg_logprob": -0.29050875932742387, "compression_ratio": 1.3025210084033614, "no_speech_prob": 0.03479379415512085}, {"id": 97, "seek": 78700, "start": 788.0, "end": 790.0, "text": " Great to see you, Alexi.", "tokens": [50414, 3769, 281, 536, 291, 11, 5202, 72, 13, 50514], "temperature": 0.0, "avg_logprob": -0.19562489645821707, "compression_ratio": 1.4701195219123506, "no_speech_prob": 0.07004841417074203}, {"id": 98, "seek": 78700, "start": 790.0, "end": 793.0, "text": " Questions, how does it scale beyond one machine?", "tokens": [50514, 27738, 11, 577, 775, 309, 4373, 4399, 472, 3479, 30, 50664], "temperature": 0.0, "avg_logprob": -0.19562489645821707, "compression_ratio": 1.4701195219123506, "no_speech_prob": 0.07004841417074203}, {"id": 99, "seek": 78700, "start": 793.0, "end": 794.0, "text": " It's a great question.", "tokens": [50664, 467, 311, 257, 869, 1168, 13, 50714], "temperature": 0.0, "avg_logprob": -0.19562489645821707, "compression_ratio": 1.4701195219123506, "no_speech_prob": 0.07004841417074203}, {"id": 100, "seek": 78700, "start": 794.0, "end": 805.0, "text": " Today REL runs, we do run DuckDB for single nodes, but we have been experimenting with other engines to achieve scale.", "tokens": [50714, 2692, 497, 3158, 6676, 11, 321, 360, 1190, 29266, 27735, 337, 2167, 13891, 11, 457, 321, 362, 668, 29070, 365, 661, 12982, 281, 4584, 4373, 13, 51264], "temperature": 0.0, "avg_logprob": -0.19562489645821707, "compression_ratio": 1.4701195219123506, "no_speech_prob": 0.07004841417074203}, {"id": 101, "seek": 78700, "start": 805.0, "end": 811.0, "text": " So, fun fact is that Nishant and I worked together at the company that created Apache Druid.", "tokens": [51264, 407, 11, 1019, 1186, 307, 300, 426, 742, 394, 293, 286, 2732, 1214, 412, 264, 2237, 300, 2942, 46597, 36744, 327, 13, 51564], "temperature": 0.0, "avg_logprob": -0.19562489645821707, "compression_ratio": 1.4701195219123506, "no_speech_prob": 0.07004841417074203}, {"id": 102, "seek": 78700, "start": 811.0, "end": 815.0, "text": " It was an advertising analytics business called MetaMarkets.", "tokens": [51564, 467, 390, 364, 13097, 15370, 1606, 1219, 6377, 64, 15168, 1385, 13, 51764], "temperature": 0.0, "avg_logprob": -0.19562489645821707, "compression_ratio": 1.4701195219123506, "no_speech_prob": 0.07004841417074203}, {"id": 103, "seek": 81500, "start": 815.0, "end": 820.0, "text": " We recently have been experimenting with Click House as well to achieve scale.", "tokens": [50364, 492, 3938, 362, 668, 29070, 365, 8230, 4928, 382, 731, 281, 4584, 4373, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10852562979366003, "compression_ratio": 1.5546875, "no_speech_prob": 0.02326510287821293}, {"id": 104, "seek": 81500, "start": 820.0, "end": 831.0, "text": " So today REL's cloud version does use Apache Druid, and some of our customers have 50 terabytes or more of scale running this same application.", "tokens": [50614, 407, 965, 497, 3158, 311, 4588, 3037, 775, 764, 46597, 36744, 327, 11, 293, 512, 295, 527, 4581, 362, 2625, 1796, 24538, 420, 544, 295, 4373, 2614, 341, 912, 3861, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10852562979366003, "compression_ratio": 1.5546875, "no_speech_prob": 0.02326510287821293}, {"id": 105, "seek": 81500, "start": 831.0, "end": 842.0, "text": " What we like about saying like Click House is it may allow us to have the same sequel, dialect, same ergonomics from small scale to large scale without having to swap engines.", "tokens": [51164, 708, 321, 411, 466, 1566, 411, 8230, 4928, 307, 309, 815, 2089, 505, 281, 362, 264, 912, 20622, 11, 24652, 11, 912, 42735, 29884, 490, 1359, 4373, 281, 2416, 4373, 1553, 1419, 281, 18135, 12982, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10852562979366003, "compression_ratio": 1.5546875, "no_speech_prob": 0.02326510287821293}, {"id": 106, "seek": 84200, "start": 842.0, "end": 848.0, "text": " So, but we look forward to trying that out more in the future.", "tokens": [50364, 407, 11, 457, 321, 574, 2128, 281, 1382, 300, 484, 544, 294, 264, 2027, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3150975426962209, "compression_ratio": 1.445, "no_speech_prob": 0.08425179123878479}, {"id": 107, "seek": 84200, "start": 848.0, "end": 849.0, "text": " Great question.", "tokens": [50664, 3769, 1168, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3150975426962209, "compression_ratio": 1.445, "no_speech_prob": 0.08425179123878479}, {"id": 108, "seek": 84200, "start": 849.0, "end": 854.0, "text": " Other questions before we, I think we've got one minute left.", "tokens": [50714, 5358, 1651, 949, 321, 11, 286, 519, 321, 600, 658, 472, 3456, 1411, 13, 50964], "temperature": 0.0, "avg_logprob": -0.3150975426962209, "compression_ratio": 1.445, "no_speech_prob": 0.08425179123878479}, {"id": 109, "seek": 84200, "start": 854.0, "end": 857.0, "text": " Go ahead.", "tokens": [50964, 1037, 2286, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3150975426962209, "compression_ratio": 1.445, "no_speech_prob": 0.08425179123878479}, {"id": 110, "seek": 84200, "start": 857.0, "end": 861.0, "text": " Can we attach a mic for the base via Dr. D?", "tokens": [51114, 1664, 321, 5085, 257, 3123, 337, 264, 3096, 5766, 2491, 13, 413, 30, 51314], "temperature": 0.0, "avg_logprob": -0.3150975426962209, "compression_ratio": 1.445, "no_speech_prob": 0.08425179123878479}, {"id": 111, "seek": 84200, "start": 861.0, "end": 863.0, "text": " Absolutely.", "tokens": [51314, 7021, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3150975426962209, "compression_ratio": 1.445, "no_speech_prob": 0.08425179123878479}, {"id": 112, "seek": 84200, "start": 863.0, "end": 871.0, "text": " I wouldn't recommend attaching per se, but maybe Nishant you can show in the demo.", "tokens": [51414, 286, 2759, 380, 2748, 39074, 680, 369, 11, 457, 1310, 426, 742, 394, 291, 393, 855, 294, 264, 10723, 13, 51814], "temperature": 0.0, "avg_logprob": -0.3150975426962209, "compression_ratio": 1.445, "no_speech_prob": 0.08425179123878479}, {"id": 113, "seek": 87100, "start": 872.0, "end": 875.0, "text": " You can read from MySQL.", "tokens": [50414, 509, 393, 1401, 490, 1222, 39934, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09154639460823753, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.013208248652517796}, {"id": 114, "seek": 87100, "start": 875.0, "end": 877.0, "text": " You can read from Postgres.", "tokens": [50564, 509, 393, 1401, 490, 10223, 45189, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09154639460823753, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.013208248652517796}, {"id": 115, "seek": 87100, "start": 877.0, "end": 879.0, "text": " We support dozens of different connectors here.", "tokens": [50664, 492, 1406, 18431, 295, 819, 31865, 510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09154639460823753, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.013208248652517796}, {"id": 116, "seek": 87100, "start": 879.0, "end": 884.0, "text": " The key thing for REL is that we are not just attaching to a server.", "tokens": [50764, 440, 2141, 551, 337, 497, 3158, 307, 300, 321, 366, 406, 445, 39074, 281, 257, 7154, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09154639460823753, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.013208248652517796}, {"id": 117, "seek": 87100, "start": 884.0, "end": 896.0, "text": " We're actually ingesting or orchestrating data into the compute, the in-memory compute engine, and then we co-locate the application very close to that database server.", "tokens": [51014, 492, 434, 767, 3957, 8714, 420, 14161, 8754, 1412, 666, 264, 14722, 11, 264, 294, 12, 17886, 827, 14722, 2848, 11, 293, 550, 321, 598, 12, 5842, 473, 264, 3861, 588, 1998, 281, 300, 8149, 7154, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09154639460823753, "compression_ratio": 1.5794392523364487, "no_speech_prob": 0.013208248652517796}, {"id": 118, "seek": 89600, "start": 897.0, "end": 906.0, "text": " So, yeah, you can attach to any of these data sources and bring in, again, for real developer, you're right in your laptop.", "tokens": [50414, 407, 11, 1338, 11, 291, 393, 5085, 281, 604, 295, 613, 1412, 7139, 293, 1565, 294, 11, 797, 11, 337, 957, 10754, 11, 291, 434, 558, 294, 428, 10732, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16038477044356497, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.021889537572860718}, {"id": 119, "seek": 89600, "start": 906.0, "end": 916.0, "text": " I have an example where I've got 100 billion events, 100 billion event systems can scale quite well on a single net.", "tokens": [50864, 286, 362, 364, 1365, 689, 286, 600, 658, 2319, 5218, 3931, 11, 2319, 5218, 2280, 3652, 393, 4373, 1596, 731, 322, 257, 2167, 2533, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16038477044356497, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.021889537572860718}, {"id": 120, "seek": 89600, "start": 919.0, "end": 920.0, "text": " Okay.", "tokens": [51514, 1033, 13, 51564], "temperature": 0.0, "avg_logprob": -0.16038477044356497, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.021889537572860718}, {"id": 121, "seek": 89600, "start": 920.0, "end": 921.0, "text": " Thank you very much.", "tokens": [51564, 1044, 291, 588, 709, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16038477044356497, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.021889537572860718}, {"id": 122, "seek": 89600, "start": 921.0, "end": 923.0, "text": " We look forward to you trying it out and hearing from you on Discord.", "tokens": [51614, 492, 574, 2128, 281, 291, 1382, 309, 484, 293, 4763, 490, 291, 322, 32623, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16038477044356497, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.021889537572860718}, {"id": 123, "seek": 89600, "start": 923.0, "end": 924.0, "text": " Bye-bye.", "tokens": [51714, 4621, 12, 6650, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16038477044356497, "compression_ratio": 1.5043478260869565, "no_speech_prob": 0.021889537572860718}, {"id": 124, "seek": 92400, "start": 924.0, "end": 925.0, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.37783586978912354, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.516569972038269}], "language": "en"}