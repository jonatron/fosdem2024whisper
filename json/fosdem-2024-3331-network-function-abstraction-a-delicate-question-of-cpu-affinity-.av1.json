{"text": " To Gaffani the renter of the So the thing to watch out is you may have heard with the other speaker. If when you move, you should be okay. I think I got it. He sure was rubbing against it. That's why it was making so much noise. Thanks. Right. So hello everyone. Today I'm going to talk to you about the challenges of deploying your network workloads at different levels of extraction, and particularly from the standpoint of CPU affinity. So first thing first, I'm Hadi, and I'm currently part of the vector packet processing team at Cisco alongside Nathan and Hedy who contributed to this presentation. So we're all contributors to the FDIO VPP project, and Nathan and Hedy are active contributors of the Calico VPP data plane. So first, I'd like to introduce the concept of network function. So it's basically any application or network service which processes packets, and you're probably familiar with physical network functions, which are appliances like routers or switches. And in these systems, there is a challenge to L4, and also it can be used in many network functions as a very performant data plane component. So rather than using a scalar packet processing approach, it goes for a vector packet processing approach using an optimized graph of packet. So also, I'd like to talk about the Calico VPP data plane. So Calico in itself is a CNI, a container network interface for Kubernetes. It allows to deploy Kubernetes cluster with additional network and security features, and it allows for seamless communication between Kubernetes workloads, maybe VM, containers, or legacy workloads. So what's nice about Calico is that it enables the use of other data planes, in this case VPP. So Calico VPP allows for the introduction of IPsec tunnels and also wire guard traffic. And it's also been in GA since December 2023, if you want to check it out. So first, I want to give an overview of the CPA pinning problematic. So currently, we have CPU pinning, which is by definition binding a process or thread to a particular CPU or at least a set of CPUs. And within the scope of network workloads, this allows us to ensure stable and optimal performance for network workloads. And you may have some workloads which might be with a single thread or they may be multi-threaded, so you want to avoid contention. And also workloads need to be quite performance. At some of them, my process hundreds of millions of packets per second and require the most out of your CPUs. So the question is, how do you select CPUs for pinning? And also, why is CPU pinning important in the first place? So of course, there are some concerns concerning the memory architecture of systems. If, for example, we have one of your network workloads which is pinned on any new node, we'll try to access the memory in another new node and you'll have additional latency. So the best practice to have is to try to pin your network workloads on CPUs in the same new node. And of course, distance also for any network interface card that you might have as if it's present on a new node and you're trying to run a network workload, which will use that device will have additional latency. So in short, try to be numer-aware. There are tools if you'd like to get your numer architecture or visualize it directly from the terminal or getting picture outputs. So some short recommendation would be to avoid pinning on Core Zero as some processes run by default. And if you can change kernel boot parameter and you want to set up system for maximum performance on benchmarking, you can try to modify some settings such as ISO CPUs to isolate Core. You can change also the affinity of some of the IRQs or in reduced kernel noise with no HZ in the score for to remove system cloutics. So what we attempt to do is see the impact of CPU pinning on one of our example workloads. So we wanted to test connection between two VPP instances that establish an IP-6 tunnel. So we run a workload locally using only virtual interfaces and which is each VPP instance using one core only. And the results were as expected, we managed with proper pinning to get the best performance around 10 gigabits per second with IP-6 tunnels and the more we went into scenarios like cross-numa or using only two core to pin for process, the two VPP and the two IPERF, this is where we observed the most performance loss. So moving into abstraction challenges. So first of all, the virtual machine. Virtual machine are popular to employ network workloads in. They allow to abstract or hardware and have multiple isolated system where we can run our network workloads. One of the main network namespaces and separate file system, but they also have Linux kernel construct that allow us to manage the resources of our containers, which is C-groups. So we're directly also able to pin the threads of our network workloads running within container using task command previous command we've seen. So if you look in particular at one controller of the C-groups, the CPU set controller, it allows us to limit the set of CPUs on the host machine which are available for a container. And when we do that, we can move towards dedicating some cores to a specific container or a specific workloads. And of course, it needs to go and turn them with isolation on the host machine of the CPUs that we're going to use. And you should watch out for difference between C-groups V1 and C-groups V2. C-groups V2 has been around a long time since 2016, but there are many systems, especially against the system, which still run with C-groups V1. And this is going to cost a mission on where you can fetch the current CPUs which are available. So I like to talk about one of the challenges we have with VPP, a concerning CPU set. So right now if you run VPP and bare metal, what we can do is rather than using task set, we can provide VPP with a list of core we'd like it to pin itself on, to spawn threads and pin itself on. And bare metal, it works pretty well. So we're going to ask it to pin itself from 0 to 3 and it's going to pin itself properly and run without any problem. But here's the challenge. We're going to introduce an abstraction which is containers. And container in this case will have a limited CPU set. We're going to ask it to only use CPUs 4 to 7 on the host machine using C-groups CPU set. And what's going to happen? We're not using task set. VPP is trying to pin itself on 0 to 3 and this is going to fail. This is going to fail the P-throw. VPP takes that into consideration and it's mapping. So again, what we learned from this challenge with the CPU set is that we should be aware of the cores that are exposed by environment. Our environment is going to expose currently available resources and at the same time we need to be aware of how application that's running within the container instance in this case fetches available cores. So similarly to our previous use case, we tried to launch an IP-seq tunnel between two VPP instances. But the twist was to introduce an additional abstraction layer which is container. In this case we used Calico VPP to route traffic between the two VPP instances. And we wanted to see if we could expect on the performance side similar performance result with abstraction. So by adding an additional hop we obtained with our IP-seq tunnels a traffic of around 9 Gbps. So compared to the 10 Gbps obtained with Burr metal, this is pretty close. We lost 1 Gbps but we gained the additional feature introduced by Calico VPP which is additional security and isolation. So to close it up, if you're thinking of switching to performant virtual network function, think about VPP. If you're thinking of adding a performant data plan to your network function and think Calico VPP if you're using Kubernetes workloads. And of course be aware of your architecture when configuring especially the layer of abstraction you're currently running your workload on. And stay tuned if you're interested in seeing more VPP. Pim will have a talk this afternoon. But we'll talk about how he managed to get hundreds of millions of packets per second with MPLS on an XPC with community hardware. So this is the test spec we used for our machines. And thank you for your attention. So right now we're assuming that a set of course is already been made available to a container. And this is going to be the role of the administrator deploying those containers. It's going to deploy them on specific human nodes. This is an assumption we need to take. If for example we have a container with a set of core that are present on a human node and set of core that are present on another human node, there's not much that can be done with this system. So we're going to take a set of core that are present on a human node and set of core that are present on another human node. There's not much that can be done with this system. So there's a need for awareness at different types. Yes, I was wondering related to kind of big little design CPUs. Is this a problem as well for pinning or did you look into this? Sorry. Like big little CPUs? No. Like the ones with performance cores and efficiency cores? You mean with the new Intel architecture with the yes, with P cores and E cores. So no, we are not considering this. We're trying to be as agnostic as possible. Thank you. This is going to be the last question. Thank you. There's the elephant in the room about hyper threading and the fact that the repeat does not perform well if it's scheduled on through on two different hyper thread cores that actually sits on the same physical core. How do you schedule workload on one core but not on the twin core? Let's say. So one of the issues that might arise if you have two cores that are on the same. If you have two threads are in the same core using hyper threading is that for example, if they're going to deal with the same packets, they might deal with the same packets of cash information and this might create some contention. Yeah, this will definitely create some contention. So it's a specific use case. This is fine if you're only going to read information, same cash line. But if there are rights, there's definitely going to be some contention and lock and slow down. Thank you very much. Thank you again. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. I just changed it. It's a slide also here.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.0, "text": " To Gaffani the renter", "tokens": [50364, 1407, 460, 2518, 3782, 264, 8124, 391, 50614], "temperature": 1.0, "avg_logprob": -4.6667119344075525, "compression_ratio": 0.8484848484848485, "no_speech_prob": 0.4209853410720825}, {"id": 1, "seek": 0, "start": 9.94, "end": 29.66, "text": " of the", "tokens": [50861, 295, 264, 51847], "temperature": 1.0, "avg_logprob": -4.6667119344075525, "compression_ratio": 0.8484848484848485, "no_speech_prob": 0.4209853410720825}, {"id": 2, "seek": 8966, "start": 89.66, "end": 96.66, "text": " So the thing to watch out is you may have heard with the other speaker.", "tokens": [50364, 407, 264, 551, 281, 1159, 484, 307, 291, 815, 362, 2198, 365, 264, 661, 8145, 13, 50714], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 3, "seek": 8966, "start": 96.66, "end": 102.66, "text": " If when you move, you should be okay.", "tokens": [50714, 759, 562, 291, 1286, 11, 291, 820, 312, 1392, 13, 51014], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 4, "seek": 8966, "start": 102.66, "end": 103.66, "text": " I think I got it.", "tokens": [51014, 286, 519, 286, 658, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 5, "seek": 8966, "start": 103.66, "end": 104.66, "text": " He sure was rubbing against it.", "tokens": [51064, 634, 988, 390, 29770, 1970, 309, 13, 51114], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 6, "seek": 8966, "start": 104.66, "end": 106.66, "text": " That's why it was making so much noise.", "tokens": [51114, 663, 311, 983, 309, 390, 1455, 370, 709, 5658, 13, 51214], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 7, "seek": 8966, "start": 106.66, "end": 107.66, "text": " Thanks.", "tokens": [51214, 2561, 13, 51264], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 8, "seek": 8966, "start": 107.66, "end": 109.66, "text": " Right.", "tokens": [51264, 1779, 13, 51364], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 9, "seek": 8966, "start": 109.66, "end": 112.66, "text": " So hello everyone.", "tokens": [51364, 407, 7751, 1518, 13, 51514], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 10, "seek": 8966, "start": 112.66, "end": 116.66, "text": " Today I'm going to talk to you about the challenges of deploying your network workloads", "tokens": [51514, 2692, 286, 478, 516, 281, 751, 281, 291, 466, 264, 4759, 295, 34198, 428, 3209, 32452, 51714], "temperature": 0.0, "avg_logprob": -0.38095892629315775, "compression_ratio": 1.5432692307692308, "no_speech_prob": 0.18374605476856232}, {"id": 11, "seek": 11666, "start": 116.66, "end": 122.66, "text": " at different levels of extraction, and particularly from the standpoint of CPU affinity.", "tokens": [50364, 412, 819, 4358, 295, 30197, 11, 293, 4098, 490, 264, 15827, 295, 13199, 39703, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1825638460309318, "compression_ratio": 1.6085106382978724, "no_speech_prob": 0.16893444955348969}, {"id": 12, "seek": 11666, "start": 122.66, "end": 127.66, "text": " So first thing first, I'm Hadi, and I'm currently part of the vector packet processing team at Cisco", "tokens": [50664, 407, 700, 551, 700, 11, 286, 478, 18908, 11, 293, 286, 478, 4362, 644, 295, 264, 8062, 20300, 9007, 1469, 412, 38528, 50914], "temperature": 0.0, "avg_logprob": -0.1825638460309318, "compression_ratio": 1.6085106382978724, "no_speech_prob": 0.16893444955348969}, {"id": 13, "seek": 11666, "start": 127.66, "end": 131.66, "text": " alongside Nathan and Hedy who contributed to this presentation.", "tokens": [50914, 12385, 20634, 293, 389, 6038, 567, 18434, 281, 341, 5860, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1825638460309318, "compression_ratio": 1.6085106382978724, "no_speech_prob": 0.16893444955348969}, {"id": 14, "seek": 11666, "start": 131.66, "end": 140.66, "text": " So we're all contributors to the FDIO VPP project, and Nathan and Hedy are active contributors of the Calico VPP data plane.", "tokens": [51114, 407, 321, 434, 439, 45627, 281, 264, 479, 35, 15167, 691, 17755, 1716, 11, 293, 20634, 293, 389, 6038, 366, 4967, 45627, 295, 264, 3511, 2789, 691, 17755, 1412, 5720, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1825638460309318, "compression_ratio": 1.6085106382978724, "no_speech_prob": 0.16893444955348969}, {"id": 15, "seek": 14066, "start": 140.66, "end": 144.66, "text": " So first, I'd like to introduce the concept of network function.", "tokens": [50364, 407, 700, 11, 286, 1116, 411, 281, 5366, 264, 3410, 295, 3209, 2445, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11980677734721791, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.01000024750828743}, {"id": 16, "seek": 14066, "start": 144.66, "end": 148.66, "text": " So it's basically any application or network service which processes packets,", "tokens": [50564, 407, 309, 311, 1936, 604, 3861, 420, 3209, 2643, 597, 7555, 30364, 11, 50764], "temperature": 0.0, "avg_logprob": -0.11980677734721791, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.01000024750828743}, {"id": 17, "seek": 14066, "start": 148.66, "end": 154.66, "text": " and you're probably familiar with physical network functions, which are appliances like routers or switches.", "tokens": [50764, 293, 291, 434, 1391, 4963, 365, 4001, 3209, 6828, 11, 597, 366, 35480, 411, 4020, 433, 420, 19458, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11980677734721791, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.01000024750828743}, {"id": 18, "seek": 14066, "start": 154.66, "end": 165.66, "text": " And in these systems, there is a challenge to L4, and also it can be used in many network functions as a very performant data plane component.", "tokens": [51064, 400, 294, 613, 3652, 11, 456, 307, 257, 3430, 281, 441, 19, 11, 293, 611, 309, 393, 312, 1143, 294, 867, 3209, 6828, 382, 257, 588, 2042, 394, 1412, 5720, 6542, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11980677734721791, "compression_ratio": 1.6416666666666666, "no_speech_prob": 0.01000024750828743}, {"id": 19, "seek": 16566, "start": 165.66, "end": 176.66, "text": " So rather than using a scalar packet processing approach, it goes for a vector packet processing approach using an optimized graph of packet.", "tokens": [50364, 407, 2831, 813, 1228, 257, 39684, 20300, 9007, 3109, 11, 309, 1709, 337, 257, 8062, 20300, 9007, 3109, 1228, 364, 26941, 4295, 295, 20300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08891070761331697, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.009555436670780182}, {"id": 20, "seek": 16566, "start": 176.66, "end": 180.66, "text": " So also, I'd like to talk about the Calico VPP data plane.", "tokens": [50914, 407, 611, 11, 286, 1116, 411, 281, 751, 466, 264, 3511, 2789, 691, 17755, 1412, 5720, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08891070761331697, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.009555436670780182}, {"id": 21, "seek": 16566, "start": 180.66, "end": 185.66, "text": " So Calico in itself is a CNI, a container network interface for Kubernetes.", "tokens": [51114, 407, 3511, 2789, 294, 2564, 307, 257, 14589, 40, 11, 257, 10129, 3209, 9226, 337, 23145, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08891070761331697, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.009555436670780182}, {"id": 22, "seek": 16566, "start": 185.66, "end": 192.66, "text": " It allows to deploy Kubernetes cluster with additional network and security features,", "tokens": [51364, 467, 4045, 281, 7274, 23145, 13630, 365, 4497, 3209, 293, 3825, 4122, 11, 51714], "temperature": 0.0, "avg_logprob": -0.08891070761331697, "compression_ratio": 1.6233183856502242, "no_speech_prob": 0.009555436670780182}, {"id": 23, "seek": 19266, "start": 192.66, "end": 198.66, "text": " and it allows for seamless communication between Kubernetes workloads, maybe VM, containers, or legacy workloads.", "tokens": [50364, 293, 309, 4045, 337, 28677, 6101, 1296, 23145, 32452, 11, 1310, 18038, 11, 17089, 11, 420, 11711, 32452, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10658055609399146, "compression_ratio": 1.5020242914979758, "no_speech_prob": 0.0045356182381510735}, {"id": 24, "seek": 19266, "start": 198.66, "end": 205.66, "text": " So what's nice about Calico is that it enables the use of other data planes, in this case VPP.", "tokens": [50664, 407, 437, 311, 1481, 466, 3511, 2789, 307, 300, 309, 17077, 264, 764, 295, 661, 1412, 14952, 11, 294, 341, 1389, 691, 17755, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10658055609399146, "compression_ratio": 1.5020242914979758, "no_speech_prob": 0.0045356182381510735}, {"id": 25, "seek": 19266, "start": 205.66, "end": 212.66, "text": " So Calico VPP allows for the introduction of IPsec tunnels and also wire guard traffic.", "tokens": [51014, 407, 3511, 2789, 691, 17755, 4045, 337, 264, 9339, 295, 8671, 8159, 30804, 293, 611, 6234, 6290, 6419, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10658055609399146, "compression_ratio": 1.5020242914979758, "no_speech_prob": 0.0045356182381510735}, {"id": 26, "seek": 19266, "start": 212.66, "end": 218.66, "text": " And it's also been in GA since December 2023, if you want to check it out.", "tokens": [51364, 400, 309, 311, 611, 668, 294, 22841, 1670, 7687, 44377, 11, 498, 291, 528, 281, 1520, 309, 484, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10658055609399146, "compression_ratio": 1.5020242914979758, "no_speech_prob": 0.0045356182381510735}, {"id": 27, "seek": 21866, "start": 218.66, "end": 222.66, "text": " So first, I want to give an overview of the CPA pinning problematic.", "tokens": [50364, 407, 700, 11, 286, 528, 281, 976, 364, 12492, 295, 264, 48672, 5447, 773, 19011, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09937193634313181, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.013615839183330536}, {"id": 28, "seek": 21866, "start": 222.66, "end": 233.66, "text": " So currently, we have CPU pinning, which is by definition binding a process or thread to a particular CPU or at least a set of CPUs.", "tokens": [50564, 407, 4362, 11, 321, 362, 13199, 5447, 773, 11, 597, 307, 538, 7123, 17359, 257, 1399, 420, 7207, 281, 257, 1729, 13199, 420, 412, 1935, 257, 992, 295, 13199, 82, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09937193634313181, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.013615839183330536}, {"id": 29, "seek": 21866, "start": 233.66, "end": 240.66, "text": " And within the scope of network workloads, this allows us to ensure stable and optimal performance for network workloads.", "tokens": [51114, 400, 1951, 264, 11923, 295, 3209, 32452, 11, 341, 4045, 505, 281, 5586, 8351, 293, 16252, 3389, 337, 3209, 32452, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09937193634313181, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.013615839183330536}, {"id": 30, "seek": 21866, "start": 240.66, "end": 247.66, "text": " And you may have some workloads which might be with a single thread or they may be multi-threaded, so you want to avoid contention.", "tokens": [51464, 400, 291, 815, 362, 512, 32452, 597, 1062, 312, 365, 257, 2167, 7207, 420, 436, 815, 312, 4825, 12, 392, 2538, 292, 11, 370, 291, 528, 281, 5042, 660, 1251, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09937193634313181, "compression_ratio": 1.6789667896678966, "no_speech_prob": 0.013615839183330536}, {"id": 31, "seek": 24766, "start": 247.66, "end": 250.66, "text": " And also workloads need to be quite performance.", "tokens": [50364, 400, 611, 32452, 643, 281, 312, 1596, 3389, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1167660616756825, "compression_ratio": 1.577092511013216, "no_speech_prob": 0.010960749350488186}, {"id": 32, "seek": 24766, "start": 250.66, "end": 257.65999999999997, "text": " At some of them, my process hundreds of millions of packets per second and require the most out of your CPUs.", "tokens": [50514, 1711, 512, 295, 552, 11, 452, 1399, 6779, 295, 6803, 295, 30364, 680, 1150, 293, 3651, 264, 881, 484, 295, 428, 13199, 82, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1167660616756825, "compression_ratio": 1.577092511013216, "no_speech_prob": 0.010960749350488186}, {"id": 33, "seek": 24766, "start": 257.65999999999997, "end": 260.65999999999997, "text": " So the question is, how do you select CPUs for pinning?", "tokens": [50864, 407, 264, 1168, 307, 11, 577, 360, 291, 3048, 13199, 82, 337, 5447, 773, 30, 51014], "temperature": 0.0, "avg_logprob": -0.1167660616756825, "compression_ratio": 1.577092511013216, "no_speech_prob": 0.010960749350488186}, {"id": 34, "seek": 24766, "start": 260.65999999999997, "end": 264.65999999999997, "text": " And also, why is CPU pinning important in the first place?", "tokens": [51014, 400, 611, 11, 983, 307, 13199, 5447, 773, 1021, 294, 264, 700, 1081, 30, 51214], "temperature": 0.0, "avg_logprob": -0.1167660616756825, "compression_ratio": 1.577092511013216, "no_speech_prob": 0.010960749350488186}, {"id": 35, "seek": 24766, "start": 264.65999999999997, "end": 269.65999999999997, "text": " So of course, there are some concerns concerning the memory architecture of systems.", "tokens": [51214, 407, 295, 1164, 11, 456, 366, 512, 7389, 18087, 264, 4675, 9482, 295, 3652, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1167660616756825, "compression_ratio": 1.577092511013216, "no_speech_prob": 0.010960749350488186}, {"id": 36, "seek": 26966, "start": 269.66, "end": 280.66, "text": " If, for example, we have one of your network workloads which is pinned on any new node, we'll try to access the memory in another new node and you'll have additional latency.", "tokens": [50364, 759, 11, 337, 1365, 11, 321, 362, 472, 295, 428, 3209, 32452, 597, 307, 33802, 322, 604, 777, 9984, 11, 321, 603, 853, 281, 2105, 264, 4675, 294, 1071, 777, 9984, 293, 291, 603, 362, 4497, 27043, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13273840043151264, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.6319798231124878}, {"id": 37, "seek": 26966, "start": 280.66, "end": 286.66, "text": " So the best practice to have is to try to pin your network workloads on CPUs in the same new node.", "tokens": [50914, 407, 264, 1151, 3124, 281, 362, 307, 281, 853, 281, 5447, 428, 3209, 32452, 322, 13199, 82, 294, 264, 912, 777, 9984, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13273840043151264, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.6319798231124878}, {"id": 38, "seek": 26966, "start": 286.66, "end": 295.66, "text": " And of course, distance also for any network interface card that you might have as if it's present on a new node and you're trying to run a network workload,", "tokens": [51214, 400, 295, 1164, 11, 4560, 611, 337, 604, 3209, 9226, 2920, 300, 291, 1062, 362, 382, 498, 309, 311, 1974, 322, 257, 777, 9984, 293, 291, 434, 1382, 281, 1190, 257, 3209, 20139, 11, 51664], "temperature": 0.0, "avg_logprob": -0.13273840043151264, "compression_ratio": 1.7736625514403292, "no_speech_prob": 0.6319798231124878}, {"id": 39, "seek": 29566, "start": 295.66, "end": 300.66, "text": " which will use that device will have additional latency.", "tokens": [50364, 597, 486, 764, 300, 4302, 486, 362, 4497, 27043, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1464139175415039, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.006285837385803461}, {"id": 40, "seek": 29566, "start": 300.66, "end": 303.66, "text": " So in short, try to be numer-aware.", "tokens": [50614, 407, 294, 2099, 11, 853, 281, 312, 7866, 12, 17074, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1464139175415039, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.006285837385803461}, {"id": 41, "seek": 29566, "start": 303.66, "end": 311.66, "text": " There are tools if you'd like to get your numer architecture or visualize it directly from the terminal or getting picture outputs.", "tokens": [50764, 821, 366, 3873, 498, 291, 1116, 411, 281, 483, 428, 7866, 9482, 420, 23273, 309, 3838, 490, 264, 14709, 420, 1242, 3036, 23930, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1464139175415039, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.006285837385803461}, {"id": 42, "seek": 29566, "start": 311.66, "end": 319.66, "text": " So some short recommendation would be to avoid pinning on Core Zero as some processes run by default.", "tokens": [51164, 407, 512, 2099, 11879, 576, 312, 281, 5042, 5447, 773, 322, 14798, 17182, 382, 512, 7555, 1190, 538, 7576, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1464139175415039, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.006285837385803461}, {"id": 43, "seek": 31966, "start": 319.66, "end": 326.66, "text": " And if you can change kernel boot parameter and you want to set up system for maximum performance on benchmarking,", "tokens": [50364, 400, 498, 291, 393, 1319, 28256, 11450, 13075, 293, 291, 528, 281, 992, 493, 1185, 337, 6674, 3389, 322, 18927, 278, 11, 50714], "temperature": 0.0, "avg_logprob": -0.2358219291590437, "compression_ratio": 1.5118483412322274, "no_speech_prob": 0.07360700517892838}, {"id": 44, "seek": 31966, "start": 326.66, "end": 332.66, "text": " you can try to modify some settings such as ISO CPUs to isolate Core.", "tokens": [50714, 291, 393, 853, 281, 16927, 512, 6257, 1270, 382, 25042, 13199, 82, 281, 25660, 14798, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2358219291590437, "compression_ratio": 1.5118483412322274, "no_speech_prob": 0.07360700517892838}, {"id": 45, "seek": 31966, "start": 332.66, "end": 342.66, "text": " You can change also the affinity of some of the IRQs or in reduced kernel noise with no HZ in the score for to remove system cloutics.", "tokens": [51014, 509, 393, 1319, 611, 264, 39703, 295, 512, 295, 264, 16486, 48, 82, 420, 294, 9212, 28256, 5658, 365, 572, 389, 57, 294, 264, 6175, 337, 281, 4159, 1185, 596, 346, 1167, 13, 51514], "temperature": 0.0, "avg_logprob": -0.2358219291590437, "compression_ratio": 1.5118483412322274, "no_speech_prob": 0.07360700517892838}, {"id": 46, "seek": 34266, "start": 343.66, "end": 348.66, "text": " So what we attempt to do is see the impact of CPU pinning on one of our example workloads.", "tokens": [50414, 407, 437, 321, 5217, 281, 360, 307, 536, 264, 2712, 295, 13199, 5447, 773, 322, 472, 295, 527, 1365, 32452, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1586498181844495, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.00657672667875886}, {"id": 47, "seek": 34266, "start": 348.66, "end": 355.66, "text": " So we wanted to test connection between two VPP instances that establish an IP-6 tunnel.", "tokens": [50664, 407, 321, 1415, 281, 1500, 4984, 1296, 732, 691, 17755, 14519, 300, 8327, 364, 8671, 12, 21, 13186, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1586498181844495, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.00657672667875886}, {"id": 48, "seek": 34266, "start": 355.66, "end": 364.66, "text": " So we run a workload locally using only virtual interfaces and which is each VPP instance using one core only.", "tokens": [51014, 407, 321, 1190, 257, 20139, 16143, 1228, 787, 6374, 28416, 293, 597, 307, 1184, 691, 17755, 5197, 1228, 472, 4965, 787, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1586498181844495, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.00657672667875886}, {"id": 49, "seek": 34266, "start": 364.66, "end": 371.66, "text": " And the results were as expected, we managed with proper pinning to get the best performance around 10 gigabits per second", "tokens": [51464, 400, 264, 3542, 645, 382, 5176, 11, 321, 6453, 365, 2296, 5447, 773, 281, 483, 264, 1151, 3389, 926, 1266, 8741, 455, 1208, 680, 1150, 51814], "temperature": 0.0, "avg_logprob": -0.1586498181844495, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.00657672667875886}, {"id": 50, "seek": 37166, "start": 371.66, "end": 380.66, "text": " with IP-6 tunnels and the more we went into scenarios like cross-numa or using only two core to pin for process,", "tokens": [50364, 365, 8671, 12, 21, 30804, 293, 264, 544, 321, 1437, 666, 15077, 411, 3278, 12, 77, 5544, 420, 1228, 787, 732, 4965, 281, 5447, 337, 1399, 11, 50814], "temperature": 0.0, "avg_logprob": -0.2045107224408318, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0033723285887390375}, {"id": 51, "seek": 37166, "start": 380.66, "end": 385.66, "text": " the two VPP and the two IPERF, this is where we observed the most performance loss.", "tokens": [50814, 264, 732, 691, 17755, 293, 264, 732, 8671, 1598, 37, 11, 341, 307, 689, 321, 13095, 264, 881, 3389, 4470, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2045107224408318, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0033723285887390375}, {"id": 52, "seek": 37166, "start": 385.66, "end": 389.66, "text": " So moving into abstraction challenges.", "tokens": [51064, 407, 2684, 666, 37765, 4759, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2045107224408318, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0033723285887390375}, {"id": 53, "seek": 37166, "start": 389.66, "end": 391.66, "text": " So first of all, the virtual machine.", "tokens": [51264, 407, 700, 295, 439, 11, 264, 6374, 3479, 13, 51364], "temperature": 0.0, "avg_logprob": -0.2045107224408318, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0033723285887390375}, {"id": 54, "seek": 37166, "start": 391.66, "end": 395.66, "text": " Virtual machine are popular to employ network workloads in.", "tokens": [51364, 23887, 3479, 366, 3743, 281, 3188, 3209, 32452, 294, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2045107224408318, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.0033723285887390375}, {"id": 55, "seek": 39566, "start": 395.66, "end": 401.66, "text": " They allow to abstract or hardware and have multiple isolated system where we can run our network workloads.", "tokens": [50364, 814, 2089, 281, 12649, 420, 8837, 293, 362, 3866, 14621, 1185, 689, 321, 393, 1190, 527, 3209, 32452, 13, 50664], "temperature": 0.0, "avg_logprob": -0.170783936031281, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.008053545840084553}, {"id": 56, "seek": 39566, "start": 401.66, "end": 415.66, "text": " One of the main network namespaces and separate file system, but they also have Linux kernel construct that allow us to manage the resources of our containers, which is C-groups.", "tokens": [50664, 1485, 295, 264, 2135, 3209, 5288, 79, 2116, 293, 4994, 3991, 1185, 11, 457, 436, 611, 362, 18734, 28256, 7690, 300, 2089, 505, 281, 3067, 264, 3593, 295, 527, 17089, 11, 597, 307, 383, 12, 17377, 82, 13, 51364], "temperature": 0.0, "avg_logprob": -0.170783936031281, "compression_ratio": 1.4947916666666667, "no_speech_prob": 0.008053545840084553}, {"id": 57, "seek": 41566, "start": 416.66, "end": 427.66, "text": " So we're directly also able to pin the threads of our network workloads running within container using task command previous command we've seen.", "tokens": [50414, 407, 321, 434, 3838, 611, 1075, 281, 5447, 264, 19314, 295, 527, 3209, 32452, 2614, 1951, 10129, 1228, 5633, 5622, 3894, 5622, 321, 600, 1612, 13, 50964], "temperature": 0.0, "avg_logprob": -0.11252314335591085, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.00505439518019557}, {"id": 58, "seek": 41566, "start": 427.66, "end": 440.66, "text": " So if you look in particular at one controller of the C-groups, the CPU set controller, it allows us to limit the set of CPUs on the host machine which are available for a container.", "tokens": [50964, 407, 498, 291, 574, 294, 1729, 412, 472, 10561, 295, 264, 383, 12, 17377, 82, 11, 264, 13199, 992, 10561, 11, 309, 4045, 505, 281, 4948, 264, 992, 295, 13199, 82, 322, 264, 3975, 3479, 597, 366, 2435, 337, 257, 10129, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11252314335591085, "compression_ratio": 1.5497630331753554, "no_speech_prob": 0.00505439518019557}, {"id": 59, "seek": 44066, "start": 440.66, "end": 447.66, "text": " And when we do that, we can move towards dedicating some cores to a specific container or a specific workloads.", "tokens": [50364, 400, 562, 321, 360, 300, 11, 321, 393, 1286, 3030, 4172, 30541, 512, 24826, 281, 257, 2685, 10129, 420, 257, 2685, 32452, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11401820182800293, "compression_ratio": 1.6386861313868613, "no_speech_prob": 0.03502563759684563}, {"id": 60, "seek": 44066, "start": 447.66, "end": 453.66, "text": " And of course, it needs to go and turn them with isolation on the host machine of the CPUs that we're going to use.", "tokens": [50714, 400, 295, 1164, 11, 309, 2203, 281, 352, 293, 1261, 552, 365, 16001, 322, 264, 3975, 3479, 295, 264, 13199, 82, 300, 321, 434, 516, 281, 764, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11401820182800293, "compression_ratio": 1.6386861313868613, "no_speech_prob": 0.03502563759684563}, {"id": 61, "seek": 44066, "start": 453.66, "end": 457.66, "text": " And you should watch out for difference between C-groups V1 and C-groups V2.", "tokens": [51014, 400, 291, 820, 1159, 484, 337, 2649, 1296, 383, 12, 17377, 82, 691, 16, 293, 383, 12, 17377, 82, 691, 17, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11401820182800293, "compression_ratio": 1.6386861313868613, "no_speech_prob": 0.03502563759684563}, {"id": 62, "seek": 44066, "start": 457.66, "end": 465.66, "text": " C-groups V2 has been around a long time since 2016, but there are many systems, especially against the system, which still run with C-groups V1.", "tokens": [51214, 383, 12, 17377, 82, 691, 17, 575, 668, 926, 257, 938, 565, 1670, 6549, 11, 457, 456, 366, 867, 3652, 11, 2318, 1970, 264, 1185, 11, 597, 920, 1190, 365, 383, 12, 17377, 82, 691, 16, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11401820182800293, "compression_ratio": 1.6386861313868613, "no_speech_prob": 0.03502563759684563}, {"id": 63, "seek": 46566, "start": 465.66, "end": 471.66, "text": " And this is going to cost a mission on where you can fetch the current CPUs which are available.", "tokens": [50364, 400, 341, 307, 516, 281, 2063, 257, 4447, 322, 689, 291, 393, 23673, 264, 2190, 13199, 82, 597, 366, 2435, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11724119787817602, "compression_ratio": 1.625, "no_speech_prob": 0.052502378821372986}, {"id": 64, "seek": 46566, "start": 473.66, "end": 478.66, "text": " So I like to talk about one of the challenges we have with VPP, a concerning CPU set.", "tokens": [50764, 407, 286, 411, 281, 751, 466, 472, 295, 264, 4759, 321, 362, 365, 691, 17755, 11, 257, 18087, 13199, 992, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11724119787817602, "compression_ratio": 1.625, "no_speech_prob": 0.052502378821372986}, {"id": 65, "seek": 46566, "start": 478.66, "end": 491.66, "text": " So right now if you run VPP and bare metal, what we can do is rather than using task set, we can provide VPP with a list of core we'd like it to pin itself on, to spawn threads and pin itself on.", "tokens": [51014, 407, 558, 586, 498, 291, 1190, 691, 17755, 293, 6949, 5760, 11, 437, 321, 393, 360, 307, 2831, 813, 1228, 5633, 992, 11, 321, 393, 2893, 691, 17755, 365, 257, 1329, 295, 4965, 321, 1116, 411, 309, 281, 5447, 2564, 322, 11, 281, 17088, 19314, 293, 5447, 2564, 322, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11724119787817602, "compression_ratio": 1.625, "no_speech_prob": 0.052502378821372986}, {"id": 66, "seek": 46566, "start": 491.66, "end": 493.66, "text": " And bare metal, it works pretty well.", "tokens": [51664, 400, 6949, 5760, 11, 309, 1985, 1238, 731, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11724119787817602, "compression_ratio": 1.625, "no_speech_prob": 0.052502378821372986}, {"id": 67, "seek": 49366, "start": 494.66, "end": 501.66, "text": " So we're going to ask it to pin itself from 0 to 3 and it's going to pin itself properly and run without any problem.", "tokens": [50414, 407, 321, 434, 516, 281, 1029, 309, 281, 5447, 2564, 490, 1958, 281, 805, 293, 309, 311, 516, 281, 5447, 2564, 6108, 293, 1190, 1553, 604, 1154, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08478505482045255, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.004606980364769697}, {"id": 68, "seek": 49366, "start": 501.66, "end": 505.66, "text": " But here's the challenge. We're going to introduce an abstraction which is containers.", "tokens": [50764, 583, 510, 311, 264, 3430, 13, 492, 434, 516, 281, 5366, 364, 37765, 597, 307, 17089, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08478505482045255, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.004606980364769697}, {"id": 69, "seek": 49366, "start": 505.66, "end": 509.66, "text": " And container in this case will have a limited CPU set.", "tokens": [50964, 400, 10129, 294, 341, 1389, 486, 362, 257, 5567, 13199, 992, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08478505482045255, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.004606980364769697}, {"id": 70, "seek": 49366, "start": 509.66, "end": 515.6600000000001, "text": " We're going to ask it to only use CPUs 4 to 7 on the host machine using C-groups CPU set.", "tokens": [51164, 492, 434, 516, 281, 1029, 309, 281, 787, 764, 13199, 82, 1017, 281, 1614, 322, 264, 3975, 3479, 1228, 383, 12, 17377, 82, 13199, 992, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08478505482045255, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.004606980364769697}, {"id": 71, "seek": 49366, "start": 515.6600000000001, "end": 518.6600000000001, "text": " And what's going to happen? We're not using task set.", "tokens": [51464, 400, 437, 311, 516, 281, 1051, 30, 492, 434, 406, 1228, 5633, 992, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08478505482045255, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.004606980364769697}, {"id": 72, "seek": 49366, "start": 518.6600000000001, "end": 522.6600000000001, "text": " VPP is trying to pin itself on 0 to 3 and this is going to fail.", "tokens": [51614, 691, 17755, 307, 1382, 281, 5447, 2564, 322, 1958, 281, 805, 293, 341, 307, 516, 281, 3061, 13, 51814], "temperature": 0.0, "avg_logprob": -0.08478505482045255, "compression_ratio": 1.8464566929133859, "no_speech_prob": 0.004606980364769697}, {"id": 73, "seek": 52266, "start": 522.66, "end": 528.66, "text": " This is going to fail the P-throw. VPP takes that into consideration and it's mapping.", "tokens": [50364, 639, 307, 516, 281, 3061, 264, 430, 12, 392, 1892, 13, 691, 17755, 2516, 300, 666, 12381, 293, 309, 311, 18350, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15221452713012695, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.0012416724348440766}, {"id": 74, "seek": 52266, "start": 530.66, "end": 540.66, "text": " So again, what we learned from this challenge with the CPU set is that we should be aware of the cores that are exposed by environment.", "tokens": [50764, 407, 797, 11, 437, 321, 3264, 490, 341, 3430, 365, 264, 13199, 992, 307, 300, 321, 820, 312, 3650, 295, 264, 24826, 300, 366, 9495, 538, 2823, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15221452713012695, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.0012416724348440766}, {"id": 75, "seek": 52266, "start": 540.66, "end": 551.66, "text": " Our environment is going to expose currently available resources and at the same time we need to be aware of how application that's running within the container instance in this case fetches available cores.", "tokens": [51264, 2621, 2823, 307, 516, 281, 19219, 4362, 2435, 3593, 293, 412, 264, 912, 565, 321, 643, 281, 312, 3650, 295, 577, 3861, 300, 311, 2614, 1951, 264, 10129, 5197, 294, 341, 1389, 15136, 3781, 2435, 24826, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15221452713012695, "compression_ratio": 1.6731517509727627, "no_speech_prob": 0.0012416724348440766}, {"id": 76, "seek": 55266, "start": 553.66, "end": 560.66, "text": " So similarly to our previous use case, we tried to launch an IP-seq tunnel between two VPP instances.", "tokens": [50414, 407, 14138, 281, 527, 3894, 764, 1389, 11, 321, 3031, 281, 4025, 364, 8671, 12, 405, 80, 13186, 1296, 732, 691, 17755, 14519, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16327231429344, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00024888862390071154}, {"id": 77, "seek": 55266, "start": 560.66, "end": 566.66, "text": " But the twist was to introduce an additional abstraction layer which is container.", "tokens": [50764, 583, 264, 8203, 390, 281, 5366, 364, 4497, 37765, 4583, 597, 307, 10129, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16327231429344, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00024888862390071154}, {"id": 78, "seek": 55266, "start": 566.66, "end": 571.66, "text": " In this case we used Calico VPP to route traffic between the two VPP instances.", "tokens": [51064, 682, 341, 1389, 321, 1143, 3511, 2789, 691, 17755, 281, 7955, 6419, 1296, 264, 732, 691, 17755, 14519, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16327231429344, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00024888862390071154}, {"id": 79, "seek": 55266, "start": 571.66, "end": 577.66, "text": " And we wanted to see if we could expect on the performance side similar performance result with abstraction.", "tokens": [51314, 400, 321, 1415, 281, 536, 498, 321, 727, 2066, 322, 264, 3389, 1252, 2531, 3389, 1874, 365, 37765, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16327231429344, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00024888862390071154}, {"id": 80, "seek": 57766, "start": 578.66, "end": 586.66, "text": " So by adding an additional hop we obtained with our IP-seq tunnels a traffic of around 9 Gbps.", "tokens": [50414, 407, 538, 5127, 364, 4497, 3818, 321, 14879, 365, 527, 8671, 12, 405, 80, 30804, 257, 6419, 295, 926, 1722, 460, 65, 1878, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16294557169864052, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.006900899112224579}, {"id": 81, "seek": 57766, "start": 586.66, "end": 591.66, "text": " So compared to the 10 Gbps obtained with Burr metal, this is pretty close.", "tokens": [50814, 407, 5347, 281, 264, 1266, 460, 65, 1878, 14879, 365, 7031, 81, 5760, 11, 341, 307, 1238, 1998, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16294557169864052, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.006900899112224579}, {"id": 82, "seek": 57766, "start": 591.66, "end": 598.66, "text": " We lost 1 Gbps but we gained the additional feature introduced by Calico VPP which is additional security and isolation.", "tokens": [51064, 492, 2731, 502, 460, 65, 1878, 457, 321, 12634, 264, 4497, 4111, 7268, 538, 3511, 2789, 691, 17755, 597, 307, 4497, 3825, 293, 16001, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16294557169864052, "compression_ratio": 1.5104166666666667, "no_speech_prob": 0.006900899112224579}, {"id": 83, "seek": 59866, "start": 599.66, "end": 606.66, "text": " So to close it up, if you're thinking of switching to performant virtual network function, think about VPP.", "tokens": [50414, 407, 281, 1998, 309, 493, 11, 498, 291, 434, 1953, 295, 16493, 281, 2042, 394, 6374, 3209, 2445, 11, 519, 466, 691, 17755, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17221550714401973, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.0599709153175354}, {"id": 84, "seek": 59866, "start": 606.66, "end": 613.66, "text": " If you're thinking of adding a performant data plan to your network function and think Calico VPP if you're using Kubernetes workloads.", "tokens": [50764, 759, 291, 434, 1953, 295, 5127, 257, 2042, 394, 1412, 1393, 281, 428, 3209, 2445, 293, 519, 3511, 2789, 691, 17755, 498, 291, 434, 1228, 23145, 32452, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17221550714401973, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.0599709153175354}, {"id": 85, "seek": 59866, "start": 613.66, "end": 622.66, "text": " And of course be aware of your architecture when configuring especially the layer of abstraction you're currently running your workload on.", "tokens": [51114, 400, 295, 1164, 312, 3650, 295, 428, 9482, 562, 6662, 1345, 2318, 264, 4583, 295, 37765, 291, 434, 4362, 2614, 428, 20139, 322, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17221550714401973, "compression_ratio": 1.7252252252252251, "no_speech_prob": 0.0599709153175354}, {"id": 86, "seek": 62266, "start": 623.66, "end": 628.66, "text": " And stay tuned if you're interested in seeing more VPP. Pim will have a talk this afternoon.", "tokens": [50414, 400, 1754, 10870, 498, 291, 434, 3102, 294, 2577, 544, 691, 17755, 13, 430, 332, 486, 362, 257, 751, 341, 6499, 13, 50664], "temperature": 0.0, "avg_logprob": -0.27324265319031554, "compression_ratio": 1.4460093896713615, "no_speech_prob": 0.04318682476878166}, {"id": 87, "seek": 62266, "start": 628.66, "end": 635.66, "text": " But we'll talk about how he managed to get hundreds of millions of packets per second with MPLS on an XPC with community hardware.", "tokens": [50664, 583, 321, 603, 751, 466, 577, 415, 6453, 281, 483, 6779, 295, 6803, 295, 30364, 680, 1150, 365, 14146, 19198, 322, 364, 1783, 12986, 365, 1768, 8837, 13, 51014], "temperature": 0.0, "avg_logprob": -0.27324265319031554, "compression_ratio": 1.4460093896713615, "no_speech_prob": 0.04318682476878166}, {"id": 88, "seek": 62266, "start": 637.66, "end": 642.66, "text": " So this is the test spec we used for our machines. And thank you for your attention.", "tokens": [51114, 407, 341, 307, 264, 1500, 1608, 321, 1143, 337, 527, 8379, 13, 400, 1309, 291, 337, 428, 3202, 13, 51364], "temperature": 0.0, "avg_logprob": -0.27324265319031554, "compression_ratio": 1.4460093896713615, "no_speech_prob": 0.04318682476878166}, {"id": 89, "seek": 64266, "start": 642.66, "end": 647.66, "text": " So right now we're assuming that a set of course is already been made available to a container.", "tokens": [50364, 407, 558, 586, 321, 434, 11926, 300, 257, 992, 295, 1164, 307, 1217, 668, 1027, 2435, 281, 257, 10129, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2484773135354333, "compression_ratio": 2.27027027027027, "no_speech_prob": 0.2961960434913635}, {"id": 90, "seek": 64266, "start": 647.66, "end": 651.66, "text": " And this is going to be the role of the administrator deploying those containers.", "tokens": [50614, 400, 341, 307, 516, 281, 312, 264, 3090, 295, 264, 25529, 34198, 729, 17089, 13, 50814], "temperature": 0.0, "avg_logprob": -0.2484773135354333, "compression_ratio": 2.27027027027027, "no_speech_prob": 0.2961960434913635}, {"id": 91, "seek": 64266, "start": 651.66, "end": 656.66, "text": " It's going to deploy them on specific human nodes. This is an assumption we need to take.", "tokens": [50814, 467, 311, 516, 281, 7274, 552, 322, 2685, 1952, 13891, 13, 639, 307, 364, 15302, 321, 643, 281, 747, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2484773135354333, "compression_ratio": 2.27027027027027, "no_speech_prob": 0.2961960434913635}, {"id": 92, "seek": 64266, "start": 656.66, "end": 662.66, "text": " If for example we have a container with a set of core that are present on a human node and set of core that are present on another human node,", "tokens": [51064, 759, 337, 1365, 321, 362, 257, 10129, 365, 257, 992, 295, 4965, 300, 366, 1974, 322, 257, 1952, 9984, 293, 992, 295, 4965, 300, 366, 1974, 322, 1071, 1952, 9984, 11, 51364], "temperature": 0.0, "avg_logprob": -0.2484773135354333, "compression_ratio": 2.27027027027027, "no_speech_prob": 0.2961960434913635}, {"id": 93, "seek": 64266, "start": 662.66, "end": 664.66, "text": " there's not much that can be done with this system.", "tokens": [51364, 456, 311, 406, 709, 300, 393, 312, 1096, 365, 341, 1185, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2484773135354333, "compression_ratio": 2.27027027027027, "no_speech_prob": 0.2961960434913635}, {"id": 94, "seek": 64266, "start": 664.66, "end": 669.66, "text": " So we're going to take a set of core that are present on a human node and set of core that are present on another human node.", "tokens": [51464, 407, 321, 434, 516, 281, 747, 257, 992, 295, 4965, 300, 366, 1974, 322, 257, 1952, 9984, 293, 992, 295, 4965, 300, 366, 1974, 322, 1071, 1952, 9984, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2484773135354333, "compression_ratio": 2.27027027027027, "no_speech_prob": 0.2961960434913635}, {"id": 95, "seek": 66966, "start": 669.66, "end": 674.66, "text": " There's not much that can be done with this system. So there's a need for awareness at different types.", "tokens": [50364, 821, 311, 406, 709, 300, 393, 312, 1096, 365, 341, 1185, 13, 407, 456, 311, 257, 643, 337, 8888, 412, 819, 3467, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2110319561428494, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.05458996444940567}, {"id": 96, "seek": 66966, "start": 677.66, "end": 681.66, "text": " Yes, I was wondering related to kind of big little design CPUs.", "tokens": [50764, 1079, 11, 286, 390, 6359, 4077, 281, 733, 295, 955, 707, 1715, 13199, 82, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2110319561428494, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.05458996444940567}, {"id": 97, "seek": 66966, "start": 681.66, "end": 685.66, "text": " Is this a problem as well for pinning or did you look into this?", "tokens": [50964, 1119, 341, 257, 1154, 382, 731, 337, 5447, 773, 420, 630, 291, 574, 666, 341, 30, 51164], "temperature": 0.0, "avg_logprob": -0.2110319561428494, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.05458996444940567}, {"id": 98, "seek": 66966, "start": 685.66, "end": 686.66, "text": " Sorry.", "tokens": [51164, 4919, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2110319561428494, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.05458996444940567}, {"id": 99, "seek": 66966, "start": 686.66, "end": 688.66, "text": " Like big little CPUs?", "tokens": [51214, 1743, 955, 707, 13199, 82, 30, 51314], "temperature": 0.0, "avg_logprob": -0.2110319561428494, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.05458996444940567}, {"id": 100, "seek": 66966, "start": 690.66, "end": 691.66, "text": " No.", "tokens": [51414, 883, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2110319561428494, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.05458996444940567}, {"id": 101, "seek": 66966, "start": 691.66, "end": 693.66, "text": " Like the ones with performance cores and efficiency cores?", "tokens": [51464, 1743, 264, 2306, 365, 3389, 24826, 293, 10493, 24826, 30, 51564], "temperature": 0.0, "avg_logprob": -0.2110319561428494, "compression_ratio": 1.514018691588785, "no_speech_prob": 0.05458996444940567}, {"id": 102, "seek": 69366, "start": 694.66, "end": 699.66, "text": " You mean with the new Intel architecture with the yes, with P cores and E cores.", "tokens": [50414, 509, 914, 365, 264, 777, 19762, 9482, 365, 264, 2086, 11, 365, 430, 24826, 293, 462, 24826, 13, 50664], "temperature": 0.0, "avg_logprob": -0.22918141971934924, "compression_ratio": 1.483221476510067, "no_speech_prob": 0.010019585490226746}, {"id": 103, "seek": 69366, "start": 699.66, "end": 704.66, "text": " So no, we are not considering this. We're trying to be as agnostic as possible.", "tokens": [50664, 407, 572, 11, 321, 366, 406, 8079, 341, 13, 492, 434, 1382, 281, 312, 382, 623, 77, 19634, 382, 1944, 13, 50914], "temperature": 0.0, "avg_logprob": -0.22918141971934924, "compression_ratio": 1.483221476510067, "no_speech_prob": 0.010019585490226746}, {"id": 104, "seek": 69366, "start": 704.66, "end": 705.66, "text": " Thank you.", "tokens": [50914, 1044, 291, 13, 50964], "temperature": 0.0, "avg_logprob": -0.22918141971934924, "compression_ratio": 1.483221476510067, "no_speech_prob": 0.010019585490226746}, {"id": 105, "seek": 69366, "start": 711.66, "end": 713.66, "text": " This is going to be the last question.", "tokens": [51264, 639, 307, 516, 281, 312, 264, 1036, 1168, 13, 51364], "temperature": 0.0, "avg_logprob": -0.22918141971934924, "compression_ratio": 1.483221476510067, "no_speech_prob": 0.010019585490226746}, {"id": 106, "seek": 69366, "start": 716.66, "end": 717.66, "text": " Thank you.", "tokens": [51514, 1044, 291, 13, 51564], "temperature": 0.0, "avg_logprob": -0.22918141971934924, "compression_ratio": 1.483221476510067, "no_speech_prob": 0.010019585490226746}, {"id": 107, "seek": 71766, "start": 717.66, "end": 730.66, "text": " There's the elephant in the room about hyper threading and the fact that the repeat does not perform well if it's scheduled on through on two different hyper thread cores that actually sits on the same physical core.", "tokens": [50364, 821, 311, 264, 19791, 294, 264, 1808, 466, 9848, 7207, 278, 293, 264, 1186, 300, 264, 7149, 775, 406, 2042, 731, 498, 309, 311, 15678, 322, 807, 322, 732, 819, 9848, 7207, 24826, 300, 767, 12696, 322, 264, 912, 4001, 4965, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1904606713189019, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.03459654375910759}, {"id": 108, "seek": 71766, "start": 730.66, "end": 737.66, "text": " How do you schedule workload on one core but not on the twin core?", "tokens": [51014, 1012, 360, 291, 7567, 20139, 322, 472, 4965, 457, 406, 322, 264, 18397, 4965, 30, 51364], "temperature": 0.0, "avg_logprob": -0.1904606713189019, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.03459654375910759}, {"id": 109, "seek": 71766, "start": 737.66, "end": 738.66, "text": " Let's say.", "tokens": [51364, 961, 311, 584, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1904606713189019, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.03459654375910759}, {"id": 110, "seek": 71766, "start": 739.66, "end": 744.66, "text": " So one of the issues that might arise if you have two cores that are on the same.", "tokens": [51464, 407, 472, 295, 264, 2663, 300, 1062, 20288, 498, 291, 362, 732, 24826, 300, 366, 322, 264, 912, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1904606713189019, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.03459654375910759}, {"id": 111, "seek": 74466, "start": 745.66, "end": 756.66, "text": " If you have two threads are in the same core using hyper threading is that for example, if they're going to deal with the same packets, they might deal with the same packets of cash information and this might create some contention.", "tokens": [50414, 759, 291, 362, 732, 19314, 366, 294, 264, 912, 4965, 1228, 9848, 7207, 278, 307, 300, 337, 1365, 11, 498, 436, 434, 516, 281, 2028, 365, 264, 912, 30364, 11, 436, 1062, 2028, 365, 264, 912, 30364, 295, 6388, 1589, 293, 341, 1062, 1884, 512, 660, 1251, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1706325500968873, "compression_ratio": 1.950943396226415, "no_speech_prob": 0.025764716789126396}, {"id": 112, "seek": 74466, "start": 757.66, "end": 759.66, "text": " Yeah, this will definitely create some contention.", "tokens": [51014, 865, 11, 341, 486, 2138, 1884, 512, 660, 1251, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1706325500968873, "compression_ratio": 1.950943396226415, "no_speech_prob": 0.025764716789126396}, {"id": 113, "seek": 74466, "start": 759.66, "end": 761.66, "text": " So it's a specific use case.", "tokens": [51114, 407, 309, 311, 257, 2685, 764, 1389, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1706325500968873, "compression_ratio": 1.950943396226415, "no_speech_prob": 0.025764716789126396}, {"id": 114, "seek": 74466, "start": 761.66, "end": 764.66, "text": " This is fine if you're only going to read information, same cash line.", "tokens": [51214, 639, 307, 2489, 498, 291, 434, 787, 516, 281, 1401, 1589, 11, 912, 6388, 1622, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1706325500968873, "compression_ratio": 1.950943396226415, "no_speech_prob": 0.025764716789126396}, {"id": 115, "seek": 74466, "start": 764.66, "end": 768.66, "text": " But if there are rights, there's definitely going to be some contention and lock and slow down.", "tokens": [51364, 583, 498, 456, 366, 4601, 11, 456, 311, 2138, 516, 281, 312, 512, 660, 1251, 293, 4017, 293, 2964, 760, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1706325500968873, "compression_ratio": 1.950943396226415, "no_speech_prob": 0.025764716789126396}, {"id": 116, "seek": 74466, "start": 768.66, "end": 769.66, "text": " Thank you very much.", "tokens": [51564, 1044, 291, 588, 709, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1706325500968873, "compression_ratio": 1.950943396226415, "no_speech_prob": 0.025764716789126396}, {"id": 117, "seek": 74466, "start": 769.66, "end": 770.66, "text": " Thank you again.", "tokens": [51614, 1044, 291, 797, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1706325500968873, "compression_ratio": 1.950943396226415, "no_speech_prob": 0.025764716789126396}, {"id": 118, "seek": 77466, "start": 774.66, "end": 775.66, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.3887065251668294, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9508670568466187}, {"id": 119, "seek": 80466, "start": 804.66, "end": 806.66, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.7079079491751534, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.6883909702301025}, {"id": 120, "seek": 80666, "start": 806.66, "end": 808.66, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.6400907380240304, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.44755107164382935}, {"id": 121, "seek": 80866, "start": 808.66, "end": 810.66, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.4877084493637085, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.43624481558799744}, {"id": 122, "seek": 83866, "start": 838.66, "end": 840.66, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.37705949942270917, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9642876386642456}, {"id": 123, "seek": 86866, "start": 868.66, "end": 870.66, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.33554351329803467, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.895923912525177}, {"id": 124, "seek": 89866, "start": 898.66, "end": 900.66, "text": " I just changed it.", "tokens": [50364, 286, 445, 3105, 309, 13, 50464], "temperature": 0.0, "avg_logprob": -0.740502301384421, "compression_ratio": 0.84, "no_speech_prob": 0.7807603478431702}, {"id": 125, "seek": 89866, "start": 900.66, "end": 904.66, "text": " It's a slide also here.", "tokens": [50464, 467, 311, 257, 4137, 611, 510, 13, 50664], "temperature": 0.0, "avg_logprob": -0.740502301384421, "compression_ratio": 0.84, "no_speech_prob": 0.7807603478431702}], "language": "en"}