{"text": " you Patrick will start you away. at that time. And I co-founded a company that is offering support and custom development for NetXMS in 2009. And since 2017, it's my full-time job to lead the development of NetXMS and also participate in the management of state company. So, why do we need network discovery in the first place? So, we usually want to create nice maps of our networks, preferably automatically, so we don't need to draw it, and we want them up to date. We want to correlate events in our network based on topology. So, a very simple example, when we have an upstream router down, you don't want to get a lot of alerts for all devices behind the router. We want to correlate them into single alert. The main source of information is IP neighbors. And it will be ARP caches on devices for IP version 4 and neighbor discovery protocol caches for IP version 6. And basically, we just read all the IP addresses mentioned in the ARP table and took it as a potential target for monitoring. The routing tables are another useful source of information. We can take host routes, we can take gateway addresses from routing tables, and this is really helpful dealing with point-to-point links or any other links when we don't have ARP protocol. And this actually allows our passive discovery to help through the civil links, for example, in the network. In NetXMS, we also use other sources of information about IP addresses. So, any syslog message, for some reason, comes to the management server. Any SNMP trap received, we can take the source address and use it as a potential device to monitor. And we also can support proprietary methods, proprietary MIPS, like an example of Micropeak, Neighbor Tables, so anything that is specific to certain equipment. In NetXMS, we have a special layer, we call it network device drivers. Those are pluggable modules that hide vendor specifics and provide information in a unified form to the upper layer. Active scan, that's really simple, we just send out packets and network devices like switches and routers, they should be accessible by SNMP from network management system. The monitoring system will take some preparation steps. So, for each device that is added to the monitoring, we will read full interface information from that device, name of the interface, description, MAC address, IP addresses, because we will need this information to match topology data. If device supports BridgeMap, which is normal for all switches, then we will read Bridgeport Mapping as well from BridgeMap. And if device is LDP capable, then we will read LDP local port information as well. Then we have multiple sources of topology information, and the first and most important and most reliable usually is LDP. It's an industry standard now, and a brief summary how LDP operates. So, each LDP capable device will send a fixed intervals, information frames that can be received by other LDP capable device. And if we talk about switches, the switch will work in a bit unusual way, it will not forward the frame as it will do with any other frame, it will receive it and process it, and on other ports it will send its own LDP information frames. So, each frame contains a sequence of TLV structures, and there are a few mandatory TLVs, which principles as LDP, so basically we will do the same stuff, but we will use different MIPs. Another interesting source is switch forwarding database, or sometimes it's called MAC address table. It's not a protocol as such, it's just a table within the switch that determines to which port the switch should forward frames designed for specific MAC address. And if we read MAC address table from the switch, we can identify ports that only have one MAC address known on them. And we can assume that this is only one device connected to that switch port, so we can add a topology link connecting that device, which may not be manageable at all, so it may be just, we can just ping it and know its MAC address, and we know that it's connected on that switch port. And this is a MAC address table example, and we see that the first three ports have only one MAC address, so we can assume that the end nodes connected, it's not some link between switches. Another bit unusual source of topology information is spending free. This is a spending free protocol that's never intended to be a protocol for topology discovery, but still we can get some information about connectivity between switches from spending free, and we can use it as last resort if we don't have LLDP or CDP between switches. So how spending free operates? When the switches are connected in the spending free domain, they elect a root bridge, and then every switch will have a root port. This is the port that points to the shortest path to the root, and it will also elect designated ports. In theory, the problem is there's a lot of vendors, especially maybe not from the top, they implement LLDP in the wrong way, so they may send wrong information LLDP packets itself. They may send everything correctly on LLDP level, but they may report absolute garbage through the SNMP when you read this LLDP myth. So we actually have a lot of code inside the monitoring to deal with inconsistencies and incorrect data in devices from different vendors. Those are some comments from our code related to specific devices. So that's it, a quick overview of how we do network discovery. If you have any questions, you can ask us later, visit our website. Thank you. We have one question. Hello, sorry, can I ask one question? Question. Sorry. Yeah. I have one question. Real quick, I was wondering if you've looked into using Open Config at all to collect some of this data. No. Have you considered or looked at Open Config at all to collect some of this data about neighbors? I don't. Open Config. Open Config now, we don't use it. But we always open to new ways.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.06, "text": " you", "tokens": [50364, 291, 50467], "temperature": 0.0, "avg_logprob": -0.5513222217559814, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.9439696669578552}, {"id": 1, "seek": 3000, "start": 30.0, "end": 32.26, "text": " Patrick will start you away.", "tokens": [50377, 13980, 486, 722, 291, 1314, 13, 50477], "temperature": 1.0, "avg_logprob": -4.387652926974827, "compression_ratio": 0.7777777777777778, "no_speech_prob": 0.3696484863758087}, {"id": 2, "seek": 6000, "start": 60.0, "end": 61.0, "text": " at that time.", "tokens": [50364, 412, 300, 565, 13, 50414], "temperature": 0.0, "avg_logprob": -0.24771108745056905, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.3471128046512604}, {"id": 3, "seek": 6000, "start": 63.0, "end": 67.0, "text": " And I co-founded a company that is offering support", "tokens": [50514, 400, 286, 598, 12, 49547, 257, 2237, 300, 307, 8745, 1406, 50714], "temperature": 0.0, "avg_logprob": -0.24771108745056905, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.3471128046512604}, {"id": 4, "seek": 6000, "start": 67.0, "end": 70.0, "text": " and custom development for NetXMS in 2009.", "tokens": [50714, 293, 2375, 3250, 337, 6188, 55, 10288, 294, 11453, 13, 50864], "temperature": 0.0, "avg_logprob": -0.24771108745056905, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.3471128046512604}, {"id": 5, "seek": 6000, "start": 70.0, "end": 76.0, "text": " And since 2017, it's my full-time job to lead the development", "tokens": [50864, 400, 1670, 6591, 11, 309, 311, 452, 1577, 12, 3766, 1691, 281, 1477, 264, 3250, 51164], "temperature": 0.0, "avg_logprob": -0.24771108745056905, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.3471128046512604}, {"id": 6, "seek": 6000, "start": 76.0, "end": 82.0, "text": " of NetXMS and also participate in the management of state company.", "tokens": [51164, 295, 6188, 55, 10288, 293, 611, 8197, 294, 264, 4592, 295, 1785, 2237, 13, 51464], "temperature": 0.0, "avg_logprob": -0.24771108745056905, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.3471128046512604}, {"id": 7, "seek": 6000, "start": 84.0, "end": 89.0, "text": " So, why do we need network discovery in the first place?", "tokens": [51564, 407, 11, 983, 360, 321, 643, 3209, 12114, 294, 264, 700, 1081, 30, 51814], "temperature": 0.0, "avg_logprob": -0.24771108745056905, "compression_ratio": 1.462686567164179, "no_speech_prob": 0.3471128046512604}, {"id": 8, "seek": 8900, "start": 89.0, "end": 95.0, "text": " So, we usually want to create nice maps of our networks,", "tokens": [50364, 407, 11, 321, 2673, 528, 281, 1884, 1481, 11317, 295, 527, 9590, 11, 50664], "temperature": 0.0, "avg_logprob": -0.12287234223407248, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.015574600547552109}, {"id": 9, "seek": 8900, "start": 95.0, "end": 98.0, "text": " preferably automatically, so we don't need to draw it,", "tokens": [50664, 45916, 6772, 11, 370, 321, 500, 380, 643, 281, 2642, 309, 11, 50814], "temperature": 0.0, "avg_logprob": -0.12287234223407248, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.015574600547552109}, {"id": 10, "seek": 8900, "start": 98.0, "end": 100.0, "text": " and we want them up to date.", "tokens": [50814, 293, 321, 528, 552, 493, 281, 4002, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12287234223407248, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.015574600547552109}, {"id": 11, "seek": 8900, "start": 102.0, "end": 108.0, "text": " We want to correlate events in our network based on topology.", "tokens": [51014, 492, 528, 281, 48742, 3931, 294, 527, 3209, 2361, 322, 1192, 1793, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12287234223407248, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.015574600547552109}, {"id": 12, "seek": 8900, "start": 108.0, "end": 114.0, "text": " So, a very simple example, when we have an upstream router down,", "tokens": [51314, 407, 11, 257, 588, 2199, 1365, 11, 562, 321, 362, 364, 33915, 22492, 760, 11, 51614], "temperature": 0.0, "avg_logprob": -0.12287234223407248, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.015574600547552109}, {"id": 13, "seek": 8900, "start": 114.0, "end": 118.0, "text": " you don't want to get a lot of alerts for all devices behind the router.", "tokens": [51614, 291, 500, 380, 528, 281, 483, 257, 688, 295, 28061, 337, 439, 5759, 2261, 264, 22492, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12287234223407248, "compression_ratio": 1.596244131455399, "no_speech_prob": 0.015574600547552109}, {"id": 14, "seek": 11800, "start": 118.0, "end": 121.0, "text": " We want to correlate them into single alert.", "tokens": [50364, 492, 528, 281, 48742, 552, 666, 2167, 9615, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12775713059960342, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.005768949631601572}, {"id": 15, "seek": 11800, "start": 122.0, "end": 126.0, "text": " The main source of information is IP neighbors.", "tokens": [50564, 440, 2135, 4009, 295, 1589, 307, 8671, 12512, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12775713059960342, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.005768949631601572}, {"id": 16, "seek": 11800, "start": 126.0, "end": 132.0, "text": " And it will be ARP caches on devices for IP version 4", "tokens": [50764, 400, 309, 486, 312, 8943, 47, 269, 13272, 322, 5759, 337, 8671, 3037, 1017, 51064], "temperature": 0.0, "avg_logprob": -0.12775713059960342, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.005768949631601572}, {"id": 17, "seek": 11800, "start": 132.0, "end": 137.0, "text": " and neighbor discovery protocol caches for IP version 6.", "tokens": [51064, 293, 5987, 12114, 10336, 269, 13272, 337, 8671, 3037, 1386, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12775713059960342, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.005768949631601572}, {"id": 18, "seek": 11800, "start": 137.0, "end": 143.0, "text": " And basically, we just read all the IP addresses mentioned in the ARP table", "tokens": [51314, 400, 1936, 11, 321, 445, 1401, 439, 264, 8671, 16862, 2835, 294, 264, 8943, 47, 3199, 51614], "temperature": 0.0, "avg_logprob": -0.12775713059960342, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.005768949631601572}, {"id": 19, "seek": 11800, "start": 143.0, "end": 147.0, "text": " and took it as a potential target for monitoring.", "tokens": [51614, 293, 1890, 309, 382, 257, 3995, 3779, 337, 11028, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12775713059960342, "compression_ratio": 1.5446009389671362, "no_speech_prob": 0.005768949631601572}, {"id": 20, "seek": 14800, "start": 148.0, "end": 154.0, "text": " The routing tables are another useful source of information.", "tokens": [50364, 440, 32722, 8020, 366, 1071, 4420, 4009, 295, 1589, 13, 50664], "temperature": 0.0, "avg_logprob": -0.12990785326276508, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.0042307497933506966}, {"id": 21, "seek": 14800, "start": 154.0, "end": 161.0, "text": " We can take host routes, we can take gateway addresses from routing tables,", "tokens": [50664, 492, 393, 747, 3975, 18242, 11, 321, 393, 747, 28532, 16862, 490, 32722, 8020, 11, 51014], "temperature": 0.0, "avg_logprob": -0.12990785326276508, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.0042307497933506966}, {"id": 22, "seek": 14800, "start": 161.0, "end": 165.0, "text": " and this is really helpful dealing with point-to-point links", "tokens": [51014, 293, 341, 307, 534, 4961, 6260, 365, 935, 12, 1353, 12, 6053, 6123, 51214], "temperature": 0.0, "avg_logprob": -0.12990785326276508, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.0042307497933506966}, {"id": 23, "seek": 14800, "start": 165.0, "end": 169.0, "text": " or any other links when we don't have ARP protocol.", "tokens": [51214, 420, 604, 661, 6123, 562, 321, 500, 380, 362, 8943, 47, 10336, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12990785326276508, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.0042307497933506966}, {"id": 24, "seek": 14800, "start": 171.0, "end": 174.0, "text": " And this actually allows our passive discovery", "tokens": [51514, 400, 341, 767, 4045, 527, 14975, 12114, 51664], "temperature": 0.0, "avg_logprob": -0.12990785326276508, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.0042307497933506966}, {"id": 25, "seek": 17400, "start": 174.0, "end": 178.0, "text": " to help through the civil links, for example, in the network.", "tokens": [50364, 281, 854, 807, 264, 5605, 6123, 11, 337, 1365, 11, 294, 264, 3209, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17441675139636528, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0027548661455512047}, {"id": 26, "seek": 17400, "start": 181.0, "end": 187.0, "text": " In NetXMS, we also use other sources of information about IP addresses.", "tokens": [50714, 682, 6188, 55, 10288, 11, 321, 611, 764, 661, 7139, 295, 1589, 466, 8671, 16862, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17441675139636528, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0027548661455512047}, {"id": 27, "seek": 17400, "start": 187.0, "end": 192.0, "text": " So, any syslog message, for some reason, comes to the management server.", "tokens": [51014, 407, 11, 604, 262, 749, 4987, 3636, 11, 337, 512, 1778, 11, 1487, 281, 264, 4592, 7154, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17441675139636528, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0027548661455512047}, {"id": 28, "seek": 17400, "start": 192.0, "end": 197.0, "text": " Any SNMP trap received, we can take the source address", "tokens": [51264, 2639, 13955, 12224, 11487, 4613, 11, 321, 393, 747, 264, 4009, 2985, 51514], "temperature": 0.0, "avg_logprob": -0.17441675139636528, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0027548661455512047}, {"id": 29, "seek": 17400, "start": 197.0, "end": 201.0, "text": " and use it as a potential device to monitor.", "tokens": [51514, 293, 764, 309, 382, 257, 3995, 4302, 281, 6002, 13, 51714], "temperature": 0.0, "avg_logprob": -0.17441675139636528, "compression_ratio": 1.4854368932038835, "no_speech_prob": 0.0027548661455512047}, {"id": 30, "seek": 20100, "start": 201.0, "end": 206.0, "text": " And we also can support proprietary methods, proprietary MIPS,", "tokens": [50364, 400, 321, 611, 393, 1406, 38992, 7150, 11, 38992, 13696, 6273, 11, 50614], "temperature": 0.0, "avg_logprob": -0.18392993128576943, "compression_ratio": 1.5, "no_speech_prob": 0.0013503794325515628}, {"id": 31, "seek": 20100, "start": 206.0, "end": 210.0, "text": " like an example of Micropeak, Neighbor Tables,", "tokens": [50614, 411, 364, 1365, 295, 25642, 494, 514, 11, 47729, 314, 2965, 11, 50814], "temperature": 0.0, "avg_logprob": -0.18392993128576943, "compression_ratio": 1.5, "no_speech_prob": 0.0013503794325515628}, {"id": 32, "seek": 20100, "start": 210.0, "end": 214.0, "text": " so anything that is specific to certain equipment.", "tokens": [50814, 370, 1340, 300, 307, 2685, 281, 1629, 5927, 13, 51014], "temperature": 0.0, "avg_logprob": -0.18392993128576943, "compression_ratio": 1.5, "no_speech_prob": 0.0013503794325515628}, {"id": 33, "seek": 20100, "start": 214.0, "end": 219.0, "text": " In NetXMS, we have a special layer, we call it network device drivers.", "tokens": [51014, 682, 6188, 55, 10288, 11, 321, 362, 257, 2121, 4583, 11, 321, 818, 309, 3209, 4302, 11590, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18392993128576943, "compression_ratio": 1.5, "no_speech_prob": 0.0013503794325515628}, {"id": 34, "seek": 20100, "start": 219.0, "end": 224.0, "text": " Those are pluggable modules that hide vendor specifics", "tokens": [51264, 3950, 366, 499, 3562, 712, 16679, 300, 6479, 24321, 28454, 51514], "temperature": 0.0, "avg_logprob": -0.18392993128576943, "compression_ratio": 1.5, "no_speech_prob": 0.0013503794325515628}, {"id": 35, "seek": 20100, "start": 224.0, "end": 230.0, "text": " and provide information in a unified form to the upper layer.", "tokens": [51514, 293, 2893, 1589, 294, 257, 26787, 1254, 281, 264, 6597, 4583, 13, 51814], "temperature": 0.0, "avg_logprob": -0.18392993128576943, "compression_ratio": 1.5, "no_speech_prob": 0.0013503794325515628}, {"id": 36, "seek": 23100, "start": 231.0, "end": 236.0, "text": " Active scan, that's really simple, we just send out packets", "tokens": [50364, 26635, 11049, 11, 300, 311, 534, 2199, 11, 321, 445, 2845, 484, 30364, 50614], "temperature": 0.0, "avg_logprob": -0.14573760530841884, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.0004558096989057958}, {"id": 37, "seek": 23100, "start": 236.0, "end": 240.0, "text": " and network devices like switches and routers,", "tokens": [50614, 293, 3209, 5759, 411, 19458, 293, 4020, 433, 11, 50814], "temperature": 0.0, "avg_logprob": -0.14573760530841884, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.0004558096989057958}, {"id": 38, "seek": 23100, "start": 240.0, "end": 245.0, "text": " they should be accessible by SNMP from network management system.", "tokens": [50814, 436, 820, 312, 9515, 538, 13955, 12224, 490, 3209, 4592, 1185, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14573760530841884, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.0004558096989057958}, {"id": 39, "seek": 23100, "start": 249.0, "end": 253.0, "text": " The monitoring system will take some preparation steps.", "tokens": [51264, 440, 11028, 1185, 486, 747, 512, 13081, 4439, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14573760530841884, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.0004558096989057958}, {"id": 40, "seek": 23100, "start": 253.0, "end": 257.0, "text": " So, for each device that is added to the monitoring,", "tokens": [51464, 407, 11, 337, 1184, 4302, 300, 307, 3869, 281, 264, 11028, 11, 51664], "temperature": 0.0, "avg_logprob": -0.14573760530841884, "compression_ratio": 1.4635416666666667, "no_speech_prob": 0.0004558096989057958}, {"id": 41, "seek": 25700, "start": 257.0, "end": 262.0, "text": " we will read full interface information from that device,", "tokens": [50364, 321, 486, 1401, 1577, 9226, 1589, 490, 300, 4302, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1380920786606638, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.015918759629130363}, {"id": 42, "seek": 25700, "start": 262.0, "end": 267.0, "text": " name of the interface, description, MAC address, IP addresses,", "tokens": [50614, 1315, 295, 264, 9226, 11, 3855, 11, 27716, 2985, 11, 8671, 16862, 11, 50864], "temperature": 0.0, "avg_logprob": -0.1380920786606638, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.015918759629130363}, {"id": 43, "seek": 25700, "start": 267.0, "end": 273.0, "text": " because we will need this information to match topology data.", "tokens": [50864, 570, 321, 486, 643, 341, 1589, 281, 2995, 1192, 1793, 1412, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1380920786606638, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.015918759629130363}, {"id": 44, "seek": 25700, "start": 273.0, "end": 280.0, "text": " If device supports BridgeMap, which is normal for all switches,", "tokens": [51164, 759, 4302, 9346, 18917, 44, 569, 11, 597, 307, 2710, 337, 439, 19458, 11, 51514], "temperature": 0.0, "avg_logprob": -0.1380920786606638, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.015918759629130363}, {"id": 45, "seek": 25700, "start": 280.0, "end": 285.0, "text": " then we will read Bridgeport Mapping as well from BridgeMap.", "tokens": [51514, 550, 321, 486, 1401, 18917, 2707, 376, 10534, 382, 731, 490, 18917, 44, 569, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1380920786606638, "compression_ratio": 1.6157894736842104, "no_speech_prob": 0.015918759629130363}, {"id": 46, "seek": 28500, "start": 286.0, "end": 294.0, "text": " And if device is LDP capable, then we will read LDP local port information as well.", "tokens": [50414, 400, 498, 4302, 307, 441, 11373, 8189, 11, 550, 321, 486, 1401, 441, 11373, 2654, 2436, 1589, 382, 731, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13601647048700052, "compression_ratio": 1.4478527607361964, "no_speech_prob": 0.004429662134498358}, {"id": 47, "seek": 28500, "start": 296.0, "end": 301.0, "text": " Then we have multiple sources of topology information,", "tokens": [50914, 1396, 321, 362, 3866, 7139, 295, 1192, 1793, 1589, 11, 51164], "temperature": 0.0, "avg_logprob": -0.13601647048700052, "compression_ratio": 1.4478527607361964, "no_speech_prob": 0.004429662134498358}, {"id": 48, "seek": 28500, "start": 301.0, "end": 306.0, "text": " and the first and most important and most reliable usually is LDP.", "tokens": [51164, 293, 264, 700, 293, 881, 1021, 293, 881, 12924, 2673, 307, 441, 11373, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13601647048700052, "compression_ratio": 1.4478527607361964, "no_speech_prob": 0.004429662134498358}, {"id": 49, "seek": 28500, "start": 306.0, "end": 310.0, "text": " It's an industry standard now,", "tokens": [51414, 467, 311, 364, 3518, 3832, 586, 11, 51614], "temperature": 0.0, "avg_logprob": -0.13601647048700052, "compression_ratio": 1.4478527607361964, "no_speech_prob": 0.004429662134498358}, {"id": 50, "seek": 31000, "start": 310.0, "end": 315.0, "text": " and a brief summary how LDP operates.", "tokens": [50364, 293, 257, 5353, 12691, 577, 441, 11373, 22577, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14182980452911764, "compression_ratio": 1.578125, "no_speech_prob": 0.0020200598519295454}, {"id": 51, "seek": 31000, "start": 315.0, "end": 322.0, "text": " So, each LDP capable device will send a fixed intervals,", "tokens": [50614, 407, 11, 1184, 441, 11373, 8189, 4302, 486, 2845, 257, 6806, 26651, 11, 50964], "temperature": 0.0, "avg_logprob": -0.14182980452911764, "compression_ratio": 1.578125, "no_speech_prob": 0.0020200598519295454}, {"id": 52, "seek": 31000, "start": 322.0, "end": 328.0, "text": " information frames that can be received by other LDP capable device.", "tokens": [50964, 1589, 12083, 300, 393, 312, 4613, 538, 661, 441, 11373, 8189, 4302, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14182980452911764, "compression_ratio": 1.578125, "no_speech_prob": 0.0020200598519295454}, {"id": 53, "seek": 31000, "start": 328.0, "end": 332.0, "text": " And if we talk about switches, the switch will work in a bit unusual way,", "tokens": [51264, 400, 498, 321, 751, 466, 19458, 11, 264, 3679, 486, 589, 294, 257, 857, 10901, 636, 11, 51464], "temperature": 0.0, "avg_logprob": -0.14182980452911764, "compression_ratio": 1.578125, "no_speech_prob": 0.0020200598519295454}, {"id": 54, "seek": 31000, "start": 332.0, "end": 336.0, "text": " it will not forward the frame as it will do with any other frame,", "tokens": [51464, 309, 486, 406, 2128, 264, 3920, 382, 309, 486, 360, 365, 604, 661, 3920, 11, 51664], "temperature": 0.0, "avg_logprob": -0.14182980452911764, "compression_ratio": 1.578125, "no_speech_prob": 0.0020200598519295454}, {"id": 55, "seek": 33600, "start": 336.0, "end": 340.0, "text": " it will receive it and process it,", "tokens": [50364, 309, 486, 4774, 309, 293, 1399, 309, 11, 50564], "temperature": 0.0, "avg_logprob": -0.16910530328750611, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.008861289359629154}, {"id": 56, "seek": 33600, "start": 340.0, "end": 347.0, "text": " and on other ports it will send its own LDP information frames.", "tokens": [50564, 293, 322, 661, 18160, 309, 486, 2845, 1080, 1065, 441, 11373, 1589, 12083, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16910530328750611, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.008861289359629154}, {"id": 57, "seek": 33600, "start": 347.0, "end": 352.0, "text": " So, each frame contains a sequence of TLV structures,", "tokens": [50914, 407, 11, 1184, 3920, 8306, 257, 8310, 295, 40277, 53, 9227, 11, 51164], "temperature": 0.0, "avg_logprob": -0.16910530328750611, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.008861289359629154}, {"id": 58, "seek": 33600, "start": 352.0, "end": 356.0, "text": " and there are a few mandatory TLVs, which principles as LDP,", "tokens": [51164, 293, 456, 366, 257, 1326, 22173, 40277, 53, 82, 11, 597, 9156, 382, 441, 11373, 11, 51364], "temperature": 0.0, "avg_logprob": -0.16910530328750611, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.008861289359629154}, {"id": 59, "seek": 33600, "start": 356.0, "end": 362.0, "text": " so basically we will do the same stuff, but we will use different MIPs.", "tokens": [51364, 370, 1936, 321, 486, 360, 264, 912, 1507, 11, 457, 321, 486, 764, 819, 376, 9139, 82, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16910530328750611, "compression_ratio": 1.507936507936508, "no_speech_prob": 0.008861289359629154}, {"id": 60, "seek": 36200, "start": 363.0, "end": 367.0, "text": " Another interesting source is switch forwarding database,", "tokens": [50414, 3996, 1880, 4009, 307, 3679, 2128, 278, 8149, 11, 50614], "temperature": 0.0, "avg_logprob": -0.10311594009399414, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.001635806867852807}, {"id": 61, "seek": 36200, "start": 367.0, "end": 370.0, "text": " or sometimes it's called MAC address table.", "tokens": [50614, 420, 2171, 309, 311, 1219, 27716, 2985, 3199, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10311594009399414, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.001635806867852807}, {"id": 62, "seek": 36200, "start": 370.0, "end": 374.0, "text": " It's not a protocol as such, it's just a table within the switch", "tokens": [50764, 467, 311, 406, 257, 10336, 382, 1270, 11, 309, 311, 445, 257, 3199, 1951, 264, 3679, 50964], "temperature": 0.0, "avg_logprob": -0.10311594009399414, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.001635806867852807}, {"id": 63, "seek": 36200, "start": 374.0, "end": 380.0, "text": " that determines to which port the switch should forward frames", "tokens": [50964, 300, 24799, 281, 597, 2436, 264, 3679, 820, 2128, 12083, 51264], "temperature": 0.0, "avg_logprob": -0.10311594009399414, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.001635806867852807}, {"id": 64, "seek": 36200, "start": 380.0, "end": 383.0, "text": " designed for specific MAC address.", "tokens": [51264, 4761, 337, 2685, 27716, 2985, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10311594009399414, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.001635806867852807}, {"id": 65, "seek": 36200, "start": 383.0, "end": 387.0, "text": " And if we read MAC address table from the switch,", "tokens": [51414, 400, 498, 321, 1401, 27716, 2985, 3199, 490, 264, 3679, 11, 51614], "temperature": 0.0, "avg_logprob": -0.10311594009399414, "compression_ratio": 1.679144385026738, "no_speech_prob": 0.001635806867852807}, {"id": 66, "seek": 38700, "start": 387.0, "end": 392.0, "text": " we can identify ports that only have one MAC address known on them.", "tokens": [50364, 321, 393, 5876, 18160, 300, 787, 362, 472, 27716, 2985, 2570, 322, 552, 13, 50614], "temperature": 0.0, "avg_logprob": -0.13773208856582642, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.022470390424132347}, {"id": 67, "seek": 38700, "start": 392.0, "end": 398.0, "text": " And we can assume that this is only one device connected to that switch port,", "tokens": [50614, 400, 321, 393, 6552, 300, 341, 307, 787, 472, 4302, 4582, 281, 300, 3679, 2436, 11, 50914], "temperature": 0.0, "avg_logprob": -0.13773208856582642, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.022470390424132347}, {"id": 68, "seek": 38700, "start": 398.0, "end": 402.0, "text": " so we can add a topology link connecting that device,", "tokens": [50914, 370, 321, 393, 909, 257, 1192, 1793, 2113, 11015, 300, 4302, 11, 51114], "temperature": 0.0, "avg_logprob": -0.13773208856582642, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.022470390424132347}, {"id": 69, "seek": 38700, "start": 402.0, "end": 406.0, "text": " which may not be manageable at all, so it may be just,", "tokens": [51114, 597, 815, 406, 312, 38798, 412, 439, 11, 370, 309, 815, 312, 445, 11, 51314], "temperature": 0.0, "avg_logprob": -0.13773208856582642, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.022470390424132347}, {"id": 70, "seek": 38700, "start": 406.0, "end": 409.0, "text": " we can just ping it and know its MAC address,", "tokens": [51314, 321, 393, 445, 26151, 309, 293, 458, 1080, 27716, 2985, 11, 51464], "temperature": 0.0, "avg_logprob": -0.13773208856582642, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.022470390424132347}, {"id": 71, "seek": 38700, "start": 409.0, "end": 412.0, "text": " and we know that it's connected on that switch port.", "tokens": [51464, 293, 321, 458, 300, 309, 311, 4582, 322, 300, 3679, 2436, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13773208856582642, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.022470390424132347}, {"id": 72, "seek": 38700, "start": 412.0, "end": 416.0, "text": " And this is a MAC address table example, and we see that the first three ports", "tokens": [51614, 400, 341, 307, 257, 27716, 2985, 3199, 1365, 11, 293, 321, 536, 300, 264, 700, 1045, 18160, 51814], "temperature": 0.0, "avg_logprob": -0.13773208856582642, "compression_ratio": 1.8782608695652174, "no_speech_prob": 0.022470390424132347}, {"id": 73, "seek": 41600, "start": 416.0, "end": 422.0, "text": " have only one MAC address, so we can assume that the end nodes connected,", "tokens": [50364, 362, 787, 472, 27716, 2985, 11, 370, 321, 393, 6552, 300, 264, 917, 13891, 4582, 11, 50664], "temperature": 0.0, "avg_logprob": -0.18362784385681152, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.002880117855966091}, {"id": 74, "seek": 41600, "start": 422.0, "end": 425.0, "text": " it's not some link between switches.", "tokens": [50664, 309, 311, 406, 512, 2113, 1296, 19458, 13, 50814], "temperature": 0.0, "avg_logprob": -0.18362784385681152, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.002880117855966091}, {"id": 75, "seek": 41600, "start": 427.0, "end": 431.0, "text": " Another bit unusual source of topology information is spending free.", "tokens": [50914, 3996, 857, 10901, 4009, 295, 1192, 1793, 1589, 307, 6434, 1737, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18362784385681152, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.002880117855966091}, {"id": 76, "seek": 41600, "start": 431.0, "end": 437.0, "text": " This is a spending free protocol that's never intended to be a protocol", "tokens": [51114, 639, 307, 257, 6434, 1737, 10336, 300, 311, 1128, 10226, 281, 312, 257, 10336, 51414], "temperature": 0.0, "avg_logprob": -0.18362784385681152, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.002880117855966091}, {"id": 77, "seek": 41600, "start": 437.0, "end": 440.0, "text": " for topology discovery, but still we can get some information", "tokens": [51414, 337, 1192, 1793, 12114, 11, 457, 920, 321, 393, 483, 512, 1589, 51564], "temperature": 0.0, "avg_logprob": -0.18362784385681152, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.002880117855966091}, {"id": 78, "seek": 41600, "start": 440.0, "end": 443.0, "text": " about connectivity between switches from spending free,", "tokens": [51564, 466, 21095, 1296, 19458, 490, 6434, 1737, 11, 51714], "temperature": 0.0, "avg_logprob": -0.18362784385681152, "compression_ratio": 1.716279069767442, "no_speech_prob": 0.002880117855966091}, {"id": 79, "seek": 44300, "start": 444.0, "end": 450.0, "text": " and we can use it as last resort if we don't have LLDP or CDP between switches.", "tokens": [50414, 293, 321, 393, 764, 309, 382, 1036, 19606, 498, 321, 500, 380, 362, 441, 43, 11373, 420, 6743, 47, 1296, 19458, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15432431962754992, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.00608885707333684}, {"id": 80, "seek": 44300, "start": 450.0, "end": 453.0, "text": " So how spending free operates?", "tokens": [50714, 407, 577, 6434, 1737, 22577, 30, 50864], "temperature": 0.0, "avg_logprob": -0.15432431962754992, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.00608885707333684}, {"id": 81, "seek": 44300, "start": 453.0, "end": 457.0, "text": " When the switches are connected in the spending free domain,", "tokens": [50864, 1133, 264, 19458, 366, 4582, 294, 264, 6434, 1737, 9274, 11, 51064], "temperature": 0.0, "avg_logprob": -0.15432431962754992, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.00608885707333684}, {"id": 82, "seek": 44300, "start": 457.0, "end": 463.0, "text": " they elect a root bridge, and then every switch will have a root port.", "tokens": [51064, 436, 2185, 257, 5593, 7283, 11, 293, 550, 633, 3679, 486, 362, 257, 5593, 2436, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15432431962754992, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.00608885707333684}, {"id": 83, "seek": 44300, "start": 463.0, "end": 467.0, "text": " This is the port that points to the shortest path to the root,", "tokens": [51364, 639, 307, 264, 2436, 300, 2793, 281, 264, 31875, 3100, 281, 264, 5593, 11, 51564], "temperature": 0.0, "avg_logprob": -0.15432431962754992, "compression_ratio": 1.564102564102564, "no_speech_prob": 0.00608885707333684}, {"id": 84, "seek": 46700, "start": 468.0, "end": 475.0, "text": " and it will also elect designated ports.", "tokens": [50414, 293, 309, 486, 611, 2185, 21688, 18160, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1145546795570687, "compression_ratio": 1.489010989010989, "no_speech_prob": 0.02650083601474762}, {"id": 85, "seek": 46700, "start": 475.0, "end": 479.0, "text": " In theory, the problem is there's a lot of vendors,", "tokens": [50764, 682, 5261, 11, 264, 1154, 307, 456, 311, 257, 688, 295, 22056, 11, 50964], "temperature": 0.0, "avg_logprob": -0.1145546795570687, "compression_ratio": 1.489010989010989, "no_speech_prob": 0.02650083601474762}, {"id": 86, "seek": 46700, "start": 479.0, "end": 485.0, "text": " especially maybe not from the top, they implement LLDP in the wrong way,", "tokens": [50964, 2318, 1310, 406, 490, 264, 1192, 11, 436, 4445, 441, 43, 11373, 294, 264, 2085, 636, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1145546795570687, "compression_ratio": 1.489010989010989, "no_speech_prob": 0.02650083601474762}, {"id": 87, "seek": 46700, "start": 485.0, "end": 489.0, "text": " so they may send wrong information LLDP packets itself.", "tokens": [51264, 370, 436, 815, 2845, 2085, 1589, 441, 43, 11373, 30364, 2564, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1145546795570687, "compression_ratio": 1.489010989010989, "no_speech_prob": 0.02650083601474762}, {"id": 88, "seek": 46700, "start": 489.0, "end": 493.0, "text": " They may send everything correctly on LLDP level,", "tokens": [51464, 814, 815, 2845, 1203, 8944, 322, 441, 43, 11373, 1496, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1145546795570687, "compression_ratio": 1.489010989010989, "no_speech_prob": 0.02650083601474762}, {"id": 89, "seek": 49300, "start": 493.0, "end": 500.0, "text": " but they may report absolute garbage through the SNMP when you read this LLDP myth.", "tokens": [50364, 457, 436, 815, 2275, 8236, 14150, 807, 264, 13955, 12224, 562, 291, 1401, 341, 441, 43, 11373, 9474, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14526241230514814, "compression_ratio": 1.3875, "no_speech_prob": 0.013487281277775764}, {"id": 90, "seek": 49300, "start": 500.0, "end": 506.0, "text": " So we actually have a lot of code inside the monitoring", "tokens": [50714, 407, 321, 767, 362, 257, 688, 295, 3089, 1854, 264, 11028, 51014], "temperature": 0.0, "avg_logprob": -0.14526241230514814, "compression_ratio": 1.3875, "no_speech_prob": 0.013487281277775764}, {"id": 91, "seek": 49300, "start": 506.0, "end": 515.0, "text": " to deal with inconsistencies and incorrect data in devices from different vendors.", "tokens": [51014, 281, 2028, 365, 22039, 4821, 4629, 293, 18424, 1412, 294, 5759, 490, 819, 22056, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14526241230514814, "compression_ratio": 1.3875, "no_speech_prob": 0.013487281277775764}, {"id": 92, "seek": 51500, "start": 515.0, "end": 523.0, "text": " Those are some comments from our code related to specific devices.", "tokens": [50364, 3950, 366, 512, 3053, 490, 527, 3089, 4077, 281, 2685, 5759, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1857169529177108, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.021446287631988525}, {"id": 93, "seek": 51500, "start": 526.0, "end": 531.0, "text": " So that's it, a quick overview of how we do network discovery.", "tokens": [50914, 407, 300, 311, 309, 11, 257, 1702, 12492, 295, 577, 321, 360, 3209, 12114, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1857169529177108, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.021446287631988525}, {"id": 94, "seek": 51500, "start": 531.0, "end": 537.0, "text": " If you have any questions, you can ask us later, visit our website. Thank you.", "tokens": [51164, 759, 291, 362, 604, 1651, 11, 291, 393, 1029, 505, 1780, 11, 3441, 527, 3144, 13, 1044, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1857169529177108, "compression_ratio": 1.368421052631579, "no_speech_prob": 0.021446287631988525}, {"id": 95, "seek": 54500, "start": 546.0, "end": 549.0, "text": " We have one question.", "tokens": [50414, 492, 362, 472, 1168, 13, 50564], "temperature": 0.0, "avg_logprob": -0.3171657674452838, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.13875934481620789}, {"id": 96, "seek": 54500, "start": 554.0, "end": 557.0, "text": " Hello, sorry, can I ask one question?", "tokens": [50814, 2425, 11, 2597, 11, 393, 286, 1029, 472, 1168, 30, 50964], "temperature": 0.0, "avg_logprob": -0.3171657674452838, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.13875934481620789}, {"id": 97, "seek": 54500, "start": 557.0, "end": 559.0, "text": " Question.", "tokens": [50964, 14464, 13, 51064], "temperature": 0.0, "avg_logprob": -0.3171657674452838, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.13875934481620789}, {"id": 98, "seek": 54500, "start": 559.0, "end": 561.0, "text": " Sorry.", "tokens": [51064, 4919, 13, 51164], "temperature": 0.0, "avg_logprob": -0.3171657674452838, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.13875934481620789}, {"id": 99, "seek": 54500, "start": 561.0, "end": 563.0, "text": " Yeah.", "tokens": [51164, 865, 13, 51264], "temperature": 0.0, "avg_logprob": -0.3171657674452838, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.13875934481620789}, {"id": 100, "seek": 54500, "start": 563.0, "end": 565.0, "text": " I have one question.", "tokens": [51264, 286, 362, 472, 1168, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3171657674452838, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.13875934481620789}, {"id": 101, "seek": 54500, "start": 565.0, "end": 571.0, "text": " Real quick, I was wondering if you've looked into using Open Config at all to collect some of this data.", "tokens": [51364, 8467, 1702, 11, 286, 390, 6359, 498, 291, 600, 2956, 666, 1228, 7238, 44151, 412, 439, 281, 2500, 512, 295, 341, 1412, 13, 51664], "temperature": 0.0, "avg_logprob": -0.3171657674452838, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.13875934481620789}, {"id": 102, "seek": 54500, "start": 571.0, "end": 573.0, "text": " No.", "tokens": [51664, 883, 13, 51764], "temperature": 0.0, "avg_logprob": -0.3171657674452838, "compression_ratio": 1.4133333333333333, "no_speech_prob": 0.13875934481620789}, {"id": 103, "seek": 57500, "start": 576.0, "end": 583.0, "text": " Have you considered or looked at Open Config at all to collect some of this data about neighbors?", "tokens": [50414, 3560, 291, 4888, 420, 2956, 412, 7238, 44151, 412, 439, 281, 2500, 512, 295, 341, 1412, 466, 12512, 30, 50764], "temperature": 0.0, "avg_logprob": -0.18869897669011895, "compression_ratio": 1.4015151515151516, "no_speech_prob": 0.058681752532720566}, {"id": 104, "seek": 57500, "start": 583.0, "end": 585.0, "text": " I don't.", "tokens": [50764, 286, 500, 380, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18869897669011895, "compression_ratio": 1.4015151515151516, "no_speech_prob": 0.058681752532720566}, {"id": 105, "seek": 57500, "start": 585.0, "end": 587.0, "text": " Open Config.", "tokens": [50864, 7238, 44151, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18869897669011895, "compression_ratio": 1.4015151515151516, "no_speech_prob": 0.058681752532720566}, {"id": 106, "seek": 57500, "start": 587.0, "end": 589.0, "text": " Open Config now, we don't use it.", "tokens": [50964, 7238, 44151, 586, 11, 321, 500, 380, 764, 309, 13, 51064], "temperature": 0.0, "avg_logprob": -0.18869897669011895, "compression_ratio": 1.4015151515151516, "no_speech_prob": 0.058681752532720566}, {"id": 107, "seek": 57500, "start": 589.0, "end": 591.0, "text": " But we always open to new ways.", "tokens": [51064, 583, 321, 1009, 1269, 281, 777, 2098, 13, 51164], "temperature": 0.0, "avg_logprob": -0.18869897669011895, "compression_ratio": 1.4015151515151516, "no_speech_prob": 0.058681752532720566}], "language": "en"}