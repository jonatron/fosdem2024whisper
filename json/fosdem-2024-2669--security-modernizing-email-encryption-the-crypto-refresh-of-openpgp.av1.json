{"text": " Welcome everyone. I hope you can hear me well. I am Daniel Huygens. I am the cryptography team lead at Proton and I will be talking about modernizing email encryption today, primarily about the new version of the OpenBGP standard, but also about the OpenBGP standard more generally and sorry, the OpenBGP ecosystem more generally and how it has evolved in recent times. And I will in fact start with the latter because OpenBGP has a rather bad reputation at least as far as it comes to the user experience. And you might remember having to generate a key manually using KnoopaG in the comment line and that used to be basically the only way to use PGP. But it's no longer the case. So my employer would like to tell you that obviously Proton made everything better and you know it's so much easier now, but it's not only Proton also Thunderbird has OpenBGP support built in now. You still have to click a few buttons, but it's much easier than before. And also other applications like FlowCrypt make it much easier to use encrypted email. And for a technical audience like this one, you might think well it's not a big deal, I can use the comment line or I even prefer it and that's perfectly reasonable and fine. But for a wider audience, this is really important. And also for us it's important because you want to write encrypted emails not only to yourself, but also to your friends. So the more people that use encrypted email, the more reason there is in fact to use it. And so the user experience is also very important and it has improved over the past decade or so. Then regarding the libraries, there used to be basically only one open source, open PGP implementation which is GNUMPG. And of course GNUMPG is still around, but there are many more implementations nowadays. So for example, OpenBGP and OpenBGP.js are two implementations that Proton maintains and uses. And then there's PGP English which is specifically designed to be easy to use and it's a Java implementation, a wrapper on Balty Castle. Then there's PGPI, a Python implementation, RMP, a C++ implementation that's used in Thunderbird. And there is Zekoya which is a new implementation in Rust which Neil presented on in the main track earlier today. If you happen to have come across that, it aims to provide a modern implementation of OpenBGP also for the comment line, basically providing a drop in replacement for GNUMPG. And then key distribution. You might remember that back in the day, you might have to export your key manually and then attach it to your emails or upload it to a key server manually. All of that is also not really necessary anymore today. So there is the key server protocol. Well, it has been around for a while but it's more widely used now and can be used by applications to automatically upload keys and also automatically fetch public keys of your friends. If you want to send an encrypted email to someone, your email application can automatically fetch keys to do so. And WebKey directory can do something similar but instead of fetching from a key server, you can fetch the public key from the domain of the email address that you're sending to. So if your provider supports that or if you're self-hosting your email, it can serve your public keys that way. And then finally, there's AutoCrypt which is a way to send public keys in email headers so that also again, the user doesn't have to worry about it and everything should work automatically hence the name. So slightly diving into HP key server, I won't dive into it very much because the presentation is not primarily about that. But so as you can see, you can simply make an HP request to fetch a public key for a given email address and you get an open HP key back if there is one and then you can use that. And WKD is very similar except instead of making a request to a key server, you make a request to the domain of the email address as I said before. All right, then talking a bit about key verification, you might remember that FOSSTEM used to host very cool key signing parties. And as you can see, these people are having a lot of fun and although the party hats have been photoshopped on, but nevertheless, it can be fun but admittedly, most people don't want to spend their time doing this in 2024. At least the average user probably doesn't. So there is an alternative to that as well, which is called key transparency. And I've presented about it at a previous FOSSTEM but just summarizing briefly, the idea behind key transparency is that we publish all the public keys of our users or of the provider's users or the key servers, public keys or whatever to an append-only transparency log somewhat similar to a certificate transparency. For example, if you heard of it, it's a concept where TLS certificates are published to a central transparency log that's an append-only log and everyone can verify that the TLS certificates that you are getting are in that log and therefore are probably not malicious. And the basic idea here is the same. We publish the openBGP certificates to a transparency log and then in this case, all the owners of the public keys need to check their own keys because they're the ones that then generated them and know whether it's the correct public key or not. So they go and check in the key transparency log whether the public key for their email address is correct. And then everybody else who fetches the public key can be certain that it's the correct public key given that everyone sees the same keys. So it's roughly similar to a blockchain in a way. I know it's a dirty word, but the concept is vaguely similar. Everyone has the same view over the data and if everyone checks the keys, everyone can be sure that all the keys are correct. And we have shipped this at Proton. There is also a working group at the ITF to standardize key transparency, not specifically for OpenBGP, but the general concept. And we would also like to standardize the use of key transparency for OpenBGP so that not only Proton users can benefit from this, but all OpenBGP email can be protected in this way because the advantage of this again is that all of that is fully automatic. So the OpenBGP implementation or the email client, let's say, can verify the keys without the user having to do anything. So it makes the use of end-to-end encrypted email much simpler. All right, so then getting to the actual OpenBGP standard. First, a short history. The current OpenBGP standard stems from 2007, believe it or not, so it's new for an update. Although it's not the case that nothing has happened since then, so there was an RFC for adding the Chamelea Cipher and also for adding Elliptic Curve cryptography using the NIST curves in 2009 and 2012, respectively. But that's the last RFC related to OpenBGP that was published. After that, there have been a number of drafts, one for adding EDDSA that has been widely implemented and also adding Curve25519 has been fairly widely implemented, but nevertheless has never been standardized. And there are a number of other things that were kind of overdue. So the RFC 480 BIS draft was in fact intended to be become an RFC as well, but that never happened. And then the CryptoRefresh is the most recent draft and that will become an RFC very soon. It's currently in the editor's queue, so it should become an RFC in the coming weeks, hopefully. So what is actually in the CryptoRefresh? Well, a lot of things, since it's been so long since we had an update, there were a lot of things that needed to be updated or that we wanted to update. So first of all, it merges the previous RFCs for Camelia and ECC. Then it standardizes finally Curve25519 as well as Curve4Fraight and the Brain Pool Curves, which are commonly used by the German government and they like them. But they are not mandatory to implement. Curve25519 is mandatory to implement Curve4Fraight, recommended to be implemented. Brain Pool is fully optional, so they can use it. Everybody else doesn't have to. Then it also adds modern AAD encryption, authenticated encryption, which was also fairly overdue, so it adds the use of OCB, EX, and GCM. GCM was slightly controversial, so I'll dive slightly into that. So first, OCB is the mandatory to implement algorithm. EX and GCM are fully optional. The reason that they're there is because even though OCB, in theory, should be fastest. In practice, in our testing, particularly GCM is usually fastest because it often has assembly implementations, for example. That's part of the reason why it's there. Another reason is because GCM is standardized by NIST, and so it's FIPS-approved. So for the people that care about that, they can use that. But again, it's fully optional. So for those that want to use the theoretically fastest, or once it becomes actually fastest, everyone can use OCB. Then also a memory hard password hashing function was added, Argon2. The previous password hashing function in OpenBGP was very weak, so this was also very, very necessary. This means that if you, for example, encrypt your keys with a password, they're protected much more strongly. Of course, it's still important to choose a strong password, but it has become much more expensive to do brute force attack on that password. Then it deprecates a number of legacy algorithms, such as RSA with weak keys, DSA, Algomal, and so on. All of those things that we really shouldn't be using in 2024 have been deprecated. Then it prevents a number of key overriding attacks that we discovered in collaboration with ETH Turic a few years ago, that we worked around in our implementations, but the workaround was fairly expensive. So now they've been fixed in the spec, which is a much cheaper way to do it. So for the implementations that worked around those issues, they should provide essentially a free performance improvement. And by the way, the AAD algorithms also essentially improve the performance as well. So it's not just, the main focus was about improving the security, but improving the performance is basically an added benefit. Then finally, it's not quite finally, it also protects against future vulnerabilities in hash algorithms by sorting signatures such that if for example, SHA2 ever becomes broken in a way that SHA1 was, even though we don't expect that today, but it provides some protection against that. And then finally, it adds a padding packet, which means that if you want to hide the size of your files or the size of your message when you're sending an email or of your attachments, you can do that by adding a padding packet to hide the size of the unencrypted data. All right, then for what's next, you might think, well, what about this? So the obvious one is post quantum cryptography, which we have also been working on, but is not yet in the crypto refresh yet. But there is a separate draft for the use of post quantum cryptography in OpenPGP, so that will come relatively soon as well. And then finally, we are, again, quite finally, we also would like to start working on forward secrecy. That's not quite as far along yet, but perfect forward secrecy is obviously something that Signal, for example, has been championing and is a good security property to have in an encryption standard, although it's slightly more difficult to achieve in an email context since you're storing emails basically forever usually, but still there are some improvements that we can and would like to make. And then, as I mentioned before, we would also like to standardize key transparency for OpenPGP. So then as to the implementation status, here you can see a graph. Some of the implementations are already very far along. Some of them not quite yet. Also, notably for its absence is Gnupig. Unfortunately, it seems like Gnupig does not want to implement the crypto refresh and rather would like to stick with the previous drafts, RFC 480B, which they have rebranded Libra PGP, which is a rather shrewd marketing move, I would say, since Libra Office is better than Open Office, so clearly Libra PGP should be better than OpenPGP, right? But actually it's not the case, it's more or less a rebranded version of the old standard. And there is a lot of controversy about it at the moment, so I felt like I couldn't really get around that. So I've here included a short comparison. In the interest of time, I won't go through all of the points, but I would say the technical differences are very minor and in my personal opinion, should not have led to such a big schism in the community. And in fact, I still am somewhat hopeful that we can find some sort of resolution, particularly if you consider that RFC 480B originally was intended to become an RFC. If it had become an RFC and people had implemented that, then the crypto refresh would have been an update to that and we would have basically had to implement both anyway. And my proposed resolution is essentially that, I would argue that everyone should implement both. If you're going to implement the crypto refresh, implementing Libra PGP as well as not that much added effort, the other way around, there is a bit more effort. I haven't heard any objections from any of the other implementations to implementing crypto refresh, so I still hope that GNU-BG eventually will do so as well, although it seems unlikely at the moment. But let's see. So in conclusion, we're trying to drag OpenBGP into the 21st century. Hopefully, we've succeeded. Thank you. And my other point that I would like you to take away is it's becoming more and more possible to build modern email encryption applications using OpenBGP. It doesn't have to have the UX of 10, 20 years ago. And finally, I hope that everyone will implement and use the crypto refresh. Thanks a lot. Thank you very much. I see one straight hand immediately, so this needs to be rewarded instantly. Hi. First question that comes to my mind, especially when you compared GNU-BG to other implementations, is what about hardware support? Because in my mind, and this is why I haven't used either of these implementations, especially those JavaScript based, is that I'd like to keep these keys in my hand on a device. So what about it? Yes. So there is an open pull request for OpenBGP.js to add support for hardware based keys, although in full disclosure, it has been a bit idle in the last while. But I still hope that someone will do the work to support it also in other implementations. I'm not fully up to date on what's the status for the support in all the libraries, but certainly it would be good to add support elsewhere as well. Yes. Another question, actually. I wanted to congratulate you hard to felt for not having the suckful user interfaces that PGP used to have. This sounds hopeful. Thanks. Thank you. I'm very excited about your approach to key transparency, well, or protons, not yours personally. I think it's very good. Do you have any thoughts on the relocation transparency to make that more? Yes. So in our implementation of key transparency, we do include, for example, when the user marks a key as compromised or obsolete, it is included in key transparency. So this means that once that's included, other people shouldn't use the key anymore, right? And I would imagine that in the standardized version, you would similarly include revocations in key transparency such that when you revoke a key, you can be sure that others won't use it anymore. The way I don't, you just get a new record for the mapping, which is not the relocation. Yes. So we always support updates to the key. So the key transparency always provides a snapshot in time. So we repeatedly publish all the keys, conceptually speaking. And also when you generate a new key, the keys are updated, but also when you revoke a key. So essentially it will be the same thing. When you were going through your list of new changes in OpenGBT, you were talking a lot about these optional features. But does it make sense to have optional features when both ends kind of need to implement them in order to be able to communicate with the... Sorry, I didn't fully hear what kind of features were you saying? The optional features like the... Optional features, I see. So there is a lot of new mandatory features as well. Curve 25519 is mandatory to implement. OSEB is mandatory to implement. But to be perfectly honest, a standard doesn't have that much power over implementations just by existing. Every implementation in the end can choose what they implement, even if we write that it's mandatory in the spec. We hope that everyone will implement the mandatory parts and the optional parts as well, usually. But we can't force anyone, right? All right. Thank you again, Daniel, for that interesting talk.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.0, "text": " Welcome everyone. I hope you can hear me well. I am Daniel Huygens. I am the cryptography", "tokens": [50364, 4027, 1518, 13, 286, 1454, 291, 393, 1568, 385, 731, 13, 286, 669, 8033, 389, 7493, 23212, 13, 286, 669, 264, 9844, 5820, 51114], "temperature": 0.0, "avg_logprob": -0.22327427182878767, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.5594974160194397}, {"id": 1, "seek": 0, "start": 15.0, "end": 22.36, "text": " team lead at Proton and I will be talking about modernizing email encryption today,", "tokens": [51114, 1469, 1477, 412, 10019, 266, 293, 286, 486, 312, 1417, 466, 4363, 3319, 3796, 29575, 965, 11, 51482], "temperature": 0.0, "avg_logprob": -0.22327427182878767, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.5594974160194397}, {"id": 2, "seek": 0, "start": 22.36, "end": 29.96, "text": " primarily about the new version of the OpenBGP standard, but also about the OpenBGP standard", "tokens": [51482, 10029, 466, 264, 777, 3037, 295, 264, 7238, 33, 38, 47, 3832, 11, 457, 611, 466, 264, 7238, 33, 38, 47, 3832, 51862], "temperature": 0.0, "avg_logprob": -0.22327427182878767, "compression_ratio": 1.5113636363636365, "no_speech_prob": 0.5594974160194397}, {"id": 3, "seek": 2996, "start": 30.84, "end": 40.4, "text": " more generally and sorry, the OpenBGP ecosystem more generally and how it has evolved in recent", "tokens": [50408, 544, 5101, 293, 2597, 11, 264, 7238, 33, 38, 47, 11311, 544, 5101, 293, 577, 309, 575, 14178, 294, 5162, 50886], "temperature": 0.0, "avg_logprob": -0.21178582785786063, "compression_ratio": 1.5380434782608696, "no_speech_prob": 0.032021988183259964}, {"id": 4, "seek": 2996, "start": 40.4, "end": 51.16, "text": " times. And I will in fact start with the latter because OpenBGP has a rather bad reputation", "tokens": [50886, 1413, 13, 400, 286, 486, 294, 1186, 722, 365, 264, 18481, 570, 7238, 33, 38, 47, 575, 257, 2831, 1578, 13061, 51424], "temperature": 0.0, "avg_logprob": -0.21178582785786063, "compression_ratio": 1.5380434782608696, "no_speech_prob": 0.032021988183259964}, {"id": 5, "seek": 2996, "start": 51.16, "end": 59.6, "text": " at least as far as it comes to the user experience. And you might remember having to generate a", "tokens": [51424, 412, 1935, 382, 1400, 382, 309, 1487, 281, 264, 4195, 1752, 13, 400, 291, 1062, 1604, 1419, 281, 8460, 257, 51846], "temperature": 0.0, "avg_logprob": -0.21178582785786063, "compression_ratio": 1.5380434782608696, "no_speech_prob": 0.032021988183259964}, {"id": 6, "seek": 5960, "start": 59.6, "end": 67.48, "text": " key manually using KnoopaG in the comment line and that used to be basically the only way to use", "tokens": [50364, 2141, 16945, 1228, 591, 1771, 33097, 38, 294, 264, 2871, 1622, 293, 300, 1143, 281, 312, 1936, 264, 787, 636, 281, 764, 50758], "temperature": 0.0, "avg_logprob": -0.2062198664690997, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.025997433811426163}, {"id": 7, "seek": 5960, "start": 67.48, "end": 78.56, "text": " PGP. But it's no longer the case. So my employer would like to tell you that obviously Proton", "tokens": [50758, 40975, 47, 13, 583, 309, 311, 572, 2854, 264, 1389, 13, 407, 452, 16205, 576, 411, 281, 980, 291, 300, 2745, 10019, 266, 51312], "temperature": 0.0, "avg_logprob": -0.2062198664690997, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.025997433811426163}, {"id": 8, "seek": 5960, "start": 78.56, "end": 83.96000000000001, "text": " made everything better and you know it's so much easier now, but it's not only Proton also", "tokens": [51312, 1027, 1203, 1101, 293, 291, 458, 309, 311, 370, 709, 3571, 586, 11, 457, 309, 311, 406, 787, 10019, 266, 611, 51582], "temperature": 0.0, "avg_logprob": -0.2062198664690997, "compression_ratio": 1.510752688172043, "no_speech_prob": 0.025997433811426163}, {"id": 9, "seek": 8396, "start": 83.96, "end": 91.28, "text": " Thunderbird has OpenBGP support built in now. You still have to click a few buttons, but it's", "tokens": [50364, 21023, 18080, 575, 7238, 33, 38, 47, 1406, 3094, 294, 586, 13, 509, 920, 362, 281, 2052, 257, 1326, 9905, 11, 457, 309, 311, 50730], "temperature": 0.0, "avg_logprob": -0.207110861937205, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.10118754953145981}, {"id": 10, "seek": 8396, "start": 91.28, "end": 100.39999999999999, "text": " much easier than before. And also other applications like FlowCrypt make it much easier to use", "tokens": [50730, 709, 3571, 813, 949, 13, 400, 611, 661, 5821, 411, 32792, 38477, 662, 652, 309, 709, 3571, 281, 764, 51186], "temperature": 0.0, "avg_logprob": -0.207110861937205, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.10118754953145981}, {"id": 11, "seek": 8396, "start": 100.39999999999999, "end": 107.08, "text": " encrypted email. And for a technical audience like this one, you might think well it's not a big", "tokens": [51186, 36663, 3796, 13, 400, 337, 257, 6191, 4034, 411, 341, 472, 11, 291, 1062, 519, 731, 309, 311, 406, 257, 955, 51520], "temperature": 0.0, "avg_logprob": -0.207110861937205, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.10118754953145981}, {"id": 12, "seek": 8396, "start": 107.08, "end": 112.44, "text": " deal, I can use the comment line or I even prefer it and that's perfectly reasonable and fine. But", "tokens": [51520, 2028, 11, 286, 393, 764, 264, 2871, 1622, 420, 286, 754, 4382, 309, 293, 300, 311, 6239, 10585, 293, 2489, 13, 583, 51788], "temperature": 0.0, "avg_logprob": -0.207110861937205, "compression_ratio": 1.5298804780876494, "no_speech_prob": 0.10118754953145981}, {"id": 13, "seek": 11244, "start": 112.67999999999999, "end": 122.28, "text": " for a wider audience, this is really important. And also for us it's important because you want to", "tokens": [50376, 337, 257, 11842, 4034, 11, 341, 307, 534, 1021, 13, 400, 611, 337, 505, 309, 311, 1021, 570, 291, 528, 281, 50856], "temperature": 0.0, "avg_logprob": -0.18236653233917666, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.022662747651338577}, {"id": 14, "seek": 11244, "start": 122.28, "end": 128.92, "text": " write encrypted emails not only to yourself, but also to your friends. So the more people that use", "tokens": [50856, 2464, 36663, 12524, 406, 787, 281, 1803, 11, 457, 611, 281, 428, 1855, 13, 407, 264, 544, 561, 300, 764, 51188], "temperature": 0.0, "avg_logprob": -0.18236653233917666, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.022662747651338577}, {"id": 15, "seek": 11244, "start": 128.92, "end": 137.64, "text": " encrypted email, the more reason there is in fact to use it. And so the user experience is also very", "tokens": [51188, 36663, 3796, 11, 264, 544, 1778, 456, 307, 294, 1186, 281, 764, 309, 13, 400, 370, 264, 4195, 1752, 307, 611, 588, 51624], "temperature": 0.0, "avg_logprob": -0.18236653233917666, "compression_ratio": 1.6555555555555554, "no_speech_prob": 0.022662747651338577}, {"id": 16, "seek": 13764, "start": 137.88, "end": 148.83999999999997, "text": " important and it has improved over the past decade or so. Then regarding the libraries, there used to", "tokens": [50376, 1021, 293, 309, 575, 9689, 670, 264, 1791, 10378, 420, 370, 13, 1396, 8595, 264, 15148, 11, 456, 1143, 281, 50924], "temperature": 0.0, "avg_logprob": -0.2235758236476353, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.03650156781077385}, {"id": 17, "seek": 13764, "start": 148.83999999999997, "end": 157.92, "text": " be basically only one open source, open PGP implementation which is GNUMPG. And of course", "tokens": [50924, 312, 1936, 787, 472, 1269, 4009, 11, 1269, 40975, 47, 11420, 597, 307, 46411, 52, 12224, 38, 13, 400, 295, 1164, 51378], "temperature": 0.0, "avg_logprob": -0.2235758236476353, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.03650156781077385}, {"id": 18, "seek": 13764, "start": 157.95999999999998, "end": 163.95999999999998, "text": " GNUMPG is still around, but there are many more implementations nowadays. So for example,", "tokens": [51380, 46411, 52, 12224, 38, 307, 920, 926, 11, 457, 456, 366, 867, 544, 4445, 763, 13434, 13, 407, 337, 1365, 11, 51680], "temperature": 0.0, "avg_logprob": -0.2235758236476353, "compression_ratio": 1.4789473684210526, "no_speech_prob": 0.03650156781077385}, {"id": 19, "seek": 16396, "start": 164.04000000000002, "end": 172.20000000000002, "text": " OpenBGP and OpenBGP.js are two implementations that Proton maintains and uses. And then there's", "tokens": [50368, 7238, 33, 38, 47, 293, 7238, 33, 38, 47, 13, 25530, 366, 732, 4445, 763, 300, 10019, 266, 33385, 293, 4960, 13, 400, 550, 456, 311, 50776], "temperature": 0.0, "avg_logprob": -0.2882843017578125, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0449615977704525}, {"id": 20, "seek": 16396, "start": 172.20000000000002, "end": 179.32, "text": " PGP English which is specifically designed to be easy to use and it's a Java implementation,", "tokens": [50776, 40975, 47, 3669, 597, 307, 4682, 4761, 281, 312, 1858, 281, 764, 293, 309, 311, 257, 10745, 11420, 11, 51132], "temperature": 0.0, "avg_logprob": -0.2882843017578125, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0449615977704525}, {"id": 21, "seek": 16396, "start": 179.96, "end": 187.88, "text": " a wrapper on Balty Castle. Then there's PGPI, a Python implementation, RMP, a C++ implementation", "tokens": [51164, 257, 46906, 322, 13140, 874, 21076, 13, 1396, 456, 311, 40975, 31701, 11, 257, 15329, 11420, 11, 497, 12224, 11, 257, 383, 25472, 11420, 51560], "temperature": 0.0, "avg_logprob": -0.2882843017578125, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0449615977704525}, {"id": 22, "seek": 18788, "start": 187.88, "end": 195.48, "text": " that's used in Thunderbird. And there is Zekoya which is a new implementation in Rust which Neil", "tokens": [50364, 300, 311, 1143, 294, 21023, 18080, 13, 400, 456, 307, 1176, 916, 24642, 597, 307, 257, 777, 11420, 294, 34952, 597, 18615, 50744], "temperature": 0.0, "avg_logprob": -0.15446250098092215, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.05818334221839905}, {"id": 23, "seek": 18788, "start": 195.48, "end": 203.96, "text": " presented on in the main track earlier today. If you happen to have come across that, it aims to", "tokens": [50744, 8212, 322, 294, 264, 2135, 2837, 3071, 965, 13, 759, 291, 1051, 281, 362, 808, 2108, 300, 11, 309, 24683, 281, 51168], "temperature": 0.0, "avg_logprob": -0.15446250098092215, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.05818334221839905}, {"id": 24, "seek": 18788, "start": 204.76, "end": 213.24, "text": " provide a modern implementation of OpenBGP also for the comment line, basically providing a drop", "tokens": [51208, 2893, 257, 4363, 11420, 295, 7238, 33, 38, 47, 611, 337, 264, 2871, 1622, 11, 1936, 6530, 257, 3270, 51632], "temperature": 0.0, "avg_logprob": -0.15446250098092215, "compression_ratio": 1.4871794871794872, "no_speech_prob": 0.05818334221839905}, {"id": 25, "seek": 21324, "start": 213.32000000000002, "end": 224.60000000000002, "text": " in replacement for GNUMPG. And then key distribution. You might remember that back in the day,", "tokens": [50368, 294, 14419, 337, 46411, 52, 12224, 38, 13, 400, 550, 2141, 7316, 13, 509, 1062, 1604, 300, 646, 294, 264, 786, 11, 50932], "temperature": 0.0, "avg_logprob": -0.12497364265331323, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.011880184523761272}, {"id": 26, "seek": 21324, "start": 224.60000000000002, "end": 231.88, "text": " you might have to export your key manually and then attach it to your emails or upload it to a", "tokens": [50932, 291, 1062, 362, 281, 10725, 428, 2141, 16945, 293, 550, 5085, 309, 281, 428, 12524, 420, 6580, 309, 281, 257, 51296], "temperature": 0.0, "avg_logprob": -0.12497364265331323, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.011880184523761272}, {"id": 27, "seek": 21324, "start": 231.88, "end": 239.48000000000002, "text": " key server manually. All of that is also not really necessary anymore today. So there is the", "tokens": [51296, 2141, 7154, 16945, 13, 1057, 295, 300, 307, 611, 406, 534, 4818, 3602, 965, 13, 407, 456, 307, 264, 51676], "temperature": 0.0, "avg_logprob": -0.12497364265331323, "compression_ratio": 1.5080213903743316, "no_speech_prob": 0.011880184523761272}, {"id": 28, "seek": 23948, "start": 240.44, "end": 247.56, "text": " key server protocol. Well, it has been around for a while but it's more widely used now and can be", "tokens": [50412, 2141, 7154, 10336, 13, 1042, 11, 309, 575, 668, 926, 337, 257, 1339, 457, 309, 311, 544, 13371, 1143, 586, 293, 393, 312, 50768], "temperature": 0.0, "avg_logprob": -0.08977774968222967, "compression_ratio": 1.595505617977528, "no_speech_prob": 0.014790414832532406}, {"id": 29, "seek": 23948, "start": 247.56, "end": 254.92, "text": " used by applications to automatically upload keys and also automatically fetch public keys", "tokens": [50768, 1143, 538, 5821, 281, 6772, 6580, 9317, 293, 611, 6772, 23673, 1908, 9317, 51136], "temperature": 0.0, "avg_logprob": -0.08977774968222967, "compression_ratio": 1.595505617977528, "no_speech_prob": 0.014790414832532406}, {"id": 30, "seek": 23948, "start": 254.92, "end": 261.96, "text": " of your friends. If you want to send an encrypted email to someone, your email application can", "tokens": [51136, 295, 428, 1855, 13, 759, 291, 528, 281, 2845, 364, 36663, 3796, 281, 1580, 11, 428, 3796, 3861, 393, 51488], "temperature": 0.0, "avg_logprob": -0.08977774968222967, "compression_ratio": 1.595505617977528, "no_speech_prob": 0.014790414832532406}, {"id": 31, "seek": 26196, "start": 261.96, "end": 271.88, "text": " automatically fetch keys to do so. And WebKey directory can do something similar but instead", "tokens": [50364, 6772, 23673, 9317, 281, 360, 370, 13, 400, 9573, 42, 2030, 21120, 393, 360, 746, 2531, 457, 2602, 50860], "temperature": 0.0, "avg_logprob": -0.11048173402485094, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.02176123671233654}, {"id": 32, "seek": 26196, "start": 271.88, "end": 279.88, "text": " of fetching from a key server, you can fetch the public key from the domain of the email address", "tokens": [50860, 295, 23673, 278, 490, 257, 2141, 7154, 11, 291, 393, 23673, 264, 1908, 2141, 490, 264, 9274, 295, 264, 3796, 2985, 51260], "temperature": 0.0, "avg_logprob": -0.11048173402485094, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.02176123671233654}, {"id": 33, "seek": 26196, "start": 279.88, "end": 285.0, "text": " that you're sending to. So if your provider supports that or if you're self-hosting your email,", "tokens": [51260, 300, 291, 434, 7750, 281, 13, 407, 498, 428, 12398, 9346, 300, 420, 498, 291, 434, 2698, 12, 6037, 278, 428, 3796, 11, 51516], "temperature": 0.0, "avg_logprob": -0.11048173402485094, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.02176123671233654}, {"id": 34, "seek": 26196, "start": 285.0, "end": 291.4, "text": " it can serve your public keys that way. And then finally, there's AutoCrypt which is a way to send", "tokens": [51516, 309, 393, 4596, 428, 1908, 9317, 300, 636, 13, 400, 550, 2721, 11, 456, 311, 13738, 38477, 662, 597, 307, 257, 636, 281, 2845, 51836], "temperature": 0.0, "avg_logprob": -0.11048173402485094, "compression_ratio": 1.6768558951965065, "no_speech_prob": 0.02176123671233654}, {"id": 35, "seek": 29196, "start": 292.12, "end": 299.56, "text": " public keys in email headers so that also again, the user doesn't have to worry about it and", "tokens": [50372, 1908, 9317, 294, 3796, 45101, 370, 300, 611, 797, 11, 264, 4195, 1177, 380, 362, 281, 3292, 466, 309, 293, 50744], "temperature": 0.0, "avg_logprob": -0.16099131491876417, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.0037164411041885614}, {"id": 36, "seek": 29196, "start": 300.35999999999996, "end": 309.0, "text": " everything should work automatically hence the name. So slightly diving into HP key server,", "tokens": [50784, 1203, 820, 589, 6772, 16678, 264, 1315, 13, 407, 4748, 20241, 666, 12557, 2141, 7154, 11, 51216], "temperature": 0.0, "avg_logprob": -0.16099131491876417, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.0037164411041885614}, {"id": 37, "seek": 29196, "start": 309.0, "end": 315.71999999999997, "text": " I won't dive into it very much because the presentation is not primarily about that. But", "tokens": [51216, 286, 1582, 380, 9192, 666, 309, 588, 709, 570, 264, 5860, 307, 406, 10029, 466, 300, 13, 583, 51552], "temperature": 0.0, "avg_logprob": -0.16099131491876417, "compression_ratio": 1.4598930481283423, "no_speech_prob": 0.0037164411041885614}, {"id": 38, "seek": 31572, "start": 315.72, "end": 323.16, "text": " so as you can see, you can simply make an HP request to fetch a public key for a given email", "tokens": [50364, 370, 382, 291, 393, 536, 11, 291, 393, 2935, 652, 364, 12557, 5308, 281, 23673, 257, 1908, 2141, 337, 257, 2212, 3796, 50736], "temperature": 0.0, "avg_logprob": -0.1090981839883207, "compression_ratio": 1.72, "no_speech_prob": 0.013648967258632183}, {"id": 39, "seek": 31572, "start": 323.16, "end": 330.12, "text": " address and you get an open HP key back if there is one and then you can use that. And WKD is very", "tokens": [50736, 2985, 293, 291, 483, 364, 1269, 12557, 2141, 646, 498, 456, 307, 472, 293, 550, 291, 393, 764, 300, 13, 400, 343, 42, 35, 307, 588, 51084], "temperature": 0.0, "avg_logprob": -0.1090981839883207, "compression_ratio": 1.72, "no_speech_prob": 0.013648967258632183}, {"id": 40, "seek": 31572, "start": 330.12, "end": 336.68, "text": " similar except instead of making a request to a key server, you make a request to the domain of the", "tokens": [51084, 2531, 3993, 2602, 295, 1455, 257, 5308, 281, 257, 2141, 7154, 11, 291, 652, 257, 5308, 281, 264, 9274, 295, 264, 51412], "temperature": 0.0, "avg_logprob": -0.1090981839883207, "compression_ratio": 1.72, "no_speech_prob": 0.013648967258632183}, {"id": 41, "seek": 31572, "start": 336.68, "end": 344.84000000000003, "text": " email address as I said before. All right, then talking a bit about key verification, you might", "tokens": [51412, 3796, 2985, 382, 286, 848, 949, 13, 1057, 558, 11, 550, 1417, 257, 857, 466, 2141, 30206, 11, 291, 1062, 51820], "temperature": 0.0, "avg_logprob": -0.1090981839883207, "compression_ratio": 1.72, "no_speech_prob": 0.013648967258632183}, {"id": 42, "seek": 34484, "start": 344.84, "end": 354.03999999999996, "text": " remember that FOSSTEM used to host very cool key signing parties. And as you can see, these people", "tokens": [50364, 1604, 300, 479, 4367, 6840, 6683, 1143, 281, 3975, 588, 1627, 2141, 13393, 8265, 13, 400, 382, 291, 393, 536, 11, 613, 561, 50824], "temperature": 0.0, "avg_logprob": -0.15988815152967298, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.028860148042440414}, {"id": 43, "seek": 34484, "start": 354.03999999999996, "end": 360.84, "text": " are having a lot of fun and although the party hats have been photoshopped on, but nevertheless,", "tokens": [50824, 366, 1419, 257, 688, 295, 1019, 293, 4878, 264, 3595, 20549, 362, 668, 2409, 18000, 3452, 322, 11, 457, 26924, 11, 51164], "temperature": 0.0, "avg_logprob": -0.15988815152967298, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.028860148042440414}, {"id": 44, "seek": 34484, "start": 362.03999999999996, "end": 370.44, "text": " it can be fun but admittedly, most people don't want to spend their time doing this in 2024.", "tokens": [51224, 309, 393, 312, 1019, 457, 14920, 356, 11, 881, 561, 500, 380, 528, 281, 3496, 641, 565, 884, 341, 294, 45237, 13, 51644], "temperature": 0.0, "avg_logprob": -0.15988815152967298, "compression_ratio": 1.4328358208955223, "no_speech_prob": 0.028860148042440414}, {"id": 45, "seek": 37044, "start": 370.44, "end": 377.64, "text": " At least the average user probably doesn't. So there is an alternative to that as well,", "tokens": [50364, 1711, 1935, 264, 4274, 4195, 1391, 1177, 380, 13, 407, 456, 307, 364, 8535, 281, 300, 382, 731, 11, 50724], "temperature": 0.0, "avg_logprob": -0.11742569506168365, "compression_ratio": 1.4331550802139037, "no_speech_prob": 0.023931974545121193}, {"id": 46, "seek": 37044, "start": 378.84, "end": 386.12, "text": " which is called key transparency. And I've presented about it at a previous FOSSTEM but just", "tokens": [50784, 597, 307, 1219, 2141, 17131, 13, 400, 286, 600, 8212, 466, 309, 412, 257, 3894, 479, 4367, 6840, 6683, 457, 445, 51148], "temperature": 0.0, "avg_logprob": -0.11742569506168365, "compression_ratio": 1.4331550802139037, "no_speech_prob": 0.023931974545121193}, {"id": 47, "seek": 37044, "start": 387.08, "end": 393.96, "text": " summarizing briefly, the idea behind key transparency is that we publish all the public", "tokens": [51196, 14611, 3319, 10515, 11, 264, 1558, 2261, 2141, 17131, 307, 300, 321, 11374, 439, 264, 1908, 51540], "temperature": 0.0, "avg_logprob": -0.11742569506168365, "compression_ratio": 1.4331550802139037, "no_speech_prob": 0.023931974545121193}, {"id": 48, "seek": 39396, "start": 393.96, "end": 403.15999999999997, "text": " keys of our users or of the provider's users or the key servers, public keys or whatever", "tokens": [50364, 9317, 295, 527, 5022, 420, 295, 264, 12398, 311, 5022, 420, 264, 2141, 15909, 11, 1908, 9317, 420, 2035, 50824], "temperature": 0.0, "avg_logprob": -0.1876034206814236, "compression_ratio": 1.5823529411764705, "no_speech_prob": 0.01690472476184368}, {"id": 49, "seek": 39396, "start": 404.59999999999997, "end": 413.4, "text": " to an append-only transparency log somewhat similar to a certificate transparency. For example,", "tokens": [50896, 281, 364, 34116, 12, 25202, 17131, 3565, 8344, 2531, 281, 257, 15953, 17131, 13, 1171, 1365, 11, 51336], "temperature": 0.0, "avg_logprob": -0.1876034206814236, "compression_ratio": 1.5823529411764705, "no_speech_prob": 0.01690472476184368}, {"id": 50, "seek": 39396, "start": 414.44, "end": 420.84, "text": " if you heard of it, it's a concept where TLS certificates are published to a central", "tokens": [51388, 498, 291, 2198, 295, 309, 11, 309, 311, 257, 3410, 689, 314, 19198, 32941, 366, 6572, 281, 257, 5777, 51708], "temperature": 0.0, "avg_logprob": -0.1876034206814236, "compression_ratio": 1.5823529411764705, "no_speech_prob": 0.01690472476184368}, {"id": 51, "seek": 42084, "start": 421.79999999999995, "end": 429.96, "text": " transparency log that's an append-only log and everyone can verify that the TLS certificates", "tokens": [50412, 17131, 3565, 300, 311, 364, 34116, 12, 25202, 3565, 293, 1518, 393, 16888, 300, 264, 314, 19198, 32941, 50820], "temperature": 0.0, "avg_logprob": -0.13207542195039637, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.013693773187696934}, {"id": 52, "seek": 42084, "start": 429.96, "end": 438.91999999999996, "text": " that you are getting are in that log and therefore are probably not malicious. And the basic idea", "tokens": [50820, 300, 291, 366, 1242, 366, 294, 300, 3565, 293, 4412, 366, 1391, 406, 33496, 13, 400, 264, 3875, 1558, 51268], "temperature": 0.0, "avg_logprob": -0.13207542195039637, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.013693773187696934}, {"id": 53, "seek": 42084, "start": 438.91999999999996, "end": 446.44, "text": " here is the same. We publish the openBGP certificates to a transparency log and then in this case,", "tokens": [51268, 510, 307, 264, 912, 13, 492, 11374, 264, 1269, 33, 38, 47, 32941, 281, 257, 17131, 3565, 293, 550, 294, 341, 1389, 11, 51644], "temperature": 0.0, "avg_logprob": -0.13207542195039637, "compression_ratio": 1.6055555555555556, "no_speech_prob": 0.013693773187696934}, {"id": 54, "seek": 44644, "start": 447.4, "end": 454.36, "text": " all the owners of the public keys need to check their own keys because they're the ones that", "tokens": [50412, 439, 264, 7710, 295, 264, 1908, 9317, 643, 281, 1520, 641, 1065, 9317, 570, 436, 434, 264, 2306, 300, 50760], "temperature": 0.0, "avg_logprob": -0.09827181872199564, "compression_ratio": 1.878787878787879, "no_speech_prob": 0.009288754314184189}, {"id": 55, "seek": 44644, "start": 454.36, "end": 459.4, "text": " then generated them and know whether it's the correct public key or not. So they go and check", "tokens": [50760, 550, 10833, 552, 293, 458, 1968, 309, 311, 264, 3006, 1908, 2141, 420, 406, 13, 407, 436, 352, 293, 1520, 51012], "temperature": 0.0, "avg_logprob": -0.09827181872199564, "compression_ratio": 1.878787878787879, "no_speech_prob": 0.009288754314184189}, {"id": 56, "seek": 44644, "start": 459.4, "end": 466.12, "text": " in the key transparency log whether the public key for their email address is correct. And then", "tokens": [51012, 294, 264, 2141, 17131, 3565, 1968, 264, 1908, 2141, 337, 641, 3796, 2985, 307, 3006, 13, 400, 550, 51348], "temperature": 0.0, "avg_logprob": -0.09827181872199564, "compression_ratio": 1.878787878787879, "no_speech_prob": 0.009288754314184189}, {"id": 57, "seek": 44644, "start": 466.12, "end": 473.08, "text": " everybody else who fetches the public key can be certain that it's the correct public key", "tokens": [51348, 2201, 1646, 567, 15136, 3781, 264, 1908, 2141, 393, 312, 1629, 300, 309, 311, 264, 3006, 1908, 2141, 51696], "temperature": 0.0, "avg_logprob": -0.09827181872199564, "compression_ratio": 1.878787878787879, "no_speech_prob": 0.009288754314184189}, {"id": 58, "seek": 47308, "start": 474.03999999999996, "end": 482.44, "text": " given that everyone sees the same keys. So it's roughly similar to a blockchain in a way. I know", "tokens": [50412, 2212, 300, 1518, 8194, 264, 912, 9317, 13, 407, 309, 311, 9810, 2531, 281, 257, 17176, 294, 257, 636, 13, 286, 458, 50832], "temperature": 0.0, "avg_logprob": -0.10031230482336594, "compression_ratio": 1.5966850828729282, "no_speech_prob": 0.02311202697455883}, {"id": 59, "seek": 47308, "start": 482.44, "end": 491.0, "text": " it's a dirty word, but the concept is vaguely similar. Everyone has the same view over the data", "tokens": [50832, 309, 311, 257, 9360, 1349, 11, 457, 264, 3410, 307, 13501, 48863, 2531, 13, 5198, 575, 264, 912, 1910, 670, 264, 1412, 51260], "temperature": 0.0, "avg_logprob": -0.10031230482336594, "compression_ratio": 1.5966850828729282, "no_speech_prob": 0.02311202697455883}, {"id": 60, "seek": 47308, "start": 491.0, "end": 497.79999999999995, "text": " and if everyone checks the keys, everyone can be sure that all the keys are correct. And we have", "tokens": [51260, 293, 498, 1518, 13834, 264, 9317, 11, 1518, 393, 312, 988, 300, 439, 264, 9317, 366, 3006, 13, 400, 321, 362, 51600], "temperature": 0.0, "avg_logprob": -0.10031230482336594, "compression_ratio": 1.5966850828729282, "no_speech_prob": 0.02311202697455883}, {"id": 61, "seek": 49780, "start": 498.28000000000003, "end": 507.40000000000003, "text": " shipped this at Proton. There is also a working group at the ITF to standardize key transparency,", "tokens": [50388, 25312, 341, 412, 10019, 266, 13, 821, 307, 611, 257, 1364, 1594, 412, 264, 6783, 37, 281, 3832, 1125, 2141, 17131, 11, 50844], "temperature": 0.0, "avg_logprob": -0.1388133023236249, "compression_ratio": 1.559782608695652, "no_speech_prob": 0.03176509216427803}, {"id": 62, "seek": 49780, "start": 508.2, "end": 515.72, "text": " not specifically for OpenBGP, but the general concept. And we would also like to standardize", "tokens": [50884, 406, 4682, 337, 7238, 33, 38, 47, 11, 457, 264, 2674, 3410, 13, 400, 321, 576, 611, 411, 281, 3832, 1125, 51260], "temperature": 0.0, "avg_logprob": -0.1388133023236249, "compression_ratio": 1.559782608695652, "no_speech_prob": 0.03176509216427803}, {"id": 63, "seek": 49780, "start": 516.44, "end": 526.28, "text": " the use of key transparency for OpenBGP so that not only Proton users can benefit from this, but", "tokens": [51296, 264, 764, 295, 2141, 17131, 337, 7238, 33, 38, 47, 370, 300, 406, 787, 10019, 266, 5022, 393, 5121, 490, 341, 11, 457, 51788], "temperature": 0.0, "avg_logprob": -0.1388133023236249, "compression_ratio": 1.559782608695652, "no_speech_prob": 0.03176509216427803}, {"id": 64, "seek": 52628, "start": 527.0, "end": 533.4, "text": " all OpenBGP email can be protected in this way because the advantage of this again is that all", "tokens": [50400, 439, 7238, 33, 38, 47, 3796, 393, 312, 10594, 294, 341, 636, 570, 264, 5002, 295, 341, 797, 307, 300, 439, 50720], "temperature": 0.0, "avg_logprob": -0.09629519089408543, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.014980548061430454}, {"id": 65, "seek": 52628, "start": 533.4, "end": 540.04, "text": " of that is fully automatic. So the OpenBGP implementation or the email client, let's say,", "tokens": [50720, 295, 300, 307, 4498, 12509, 13, 407, 264, 7238, 33, 38, 47, 11420, 420, 264, 3796, 6423, 11, 718, 311, 584, 11, 51052], "temperature": 0.0, "avg_logprob": -0.09629519089408543, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.014980548061430454}, {"id": 66, "seek": 52628, "start": 540.04, "end": 547.24, "text": " can verify the keys without the user having to do anything. So it makes the use of", "tokens": [51052, 393, 16888, 264, 9317, 1553, 264, 4195, 1419, 281, 360, 1340, 13, 407, 309, 1669, 264, 764, 295, 51412], "temperature": 0.0, "avg_logprob": -0.09629519089408543, "compression_ratio": 1.5257142857142858, "no_speech_prob": 0.014980548061430454}, {"id": 67, "seek": 54724, "start": 547.96, "end": 555.96, "text": " end-to-end encrypted email much simpler. All right, so then getting to the actual OpenBGP standard.", "tokens": [50400, 917, 12, 1353, 12, 521, 36663, 3796, 709, 18587, 13, 1057, 558, 11, 370, 550, 1242, 281, 264, 3539, 7238, 33, 38, 47, 3832, 13, 50800], "temperature": 0.0, "avg_logprob": -0.11136120244076378, "compression_ratio": 1.443298969072165, "no_speech_prob": 0.036862414330244064}, {"id": 68, "seek": 54724, "start": 556.92, "end": 565.48, "text": " First, a short history. The current OpenBGP standard stems from 2007, believe it or not,", "tokens": [50848, 2386, 11, 257, 2099, 2503, 13, 440, 2190, 7238, 33, 38, 47, 3832, 27600, 490, 12656, 11, 1697, 309, 420, 406, 11, 51276], "temperature": 0.0, "avg_logprob": -0.11136120244076378, "compression_ratio": 1.443298969072165, "no_speech_prob": 0.036862414330244064}, {"id": 69, "seek": 54724, "start": 565.48, "end": 571.64, "text": " so it's new for an update. Although it's not the case that nothing has happened since then,", "tokens": [51276, 370, 309, 311, 777, 337, 364, 5623, 13, 5780, 309, 311, 406, 264, 1389, 300, 1825, 575, 2011, 1670, 550, 11, 51584], "temperature": 0.0, "avg_logprob": -0.11136120244076378, "compression_ratio": 1.443298969072165, "no_speech_prob": 0.036862414330244064}, {"id": 70, "seek": 57164, "start": 571.64, "end": 579.16, "text": " so there was an RFC for adding the Chamelea Cipher and also for adding Elliptic Curve", "tokens": [50364, 370, 456, 390, 364, 497, 18671, 337, 5127, 264, 761, 529, 306, 64, 383, 21240, 293, 611, 337, 5127, 8353, 22439, 299, 7907, 303, 50740], "temperature": 0.0, "avg_logprob": -0.12681546529134113, "compression_ratio": 1.3842105263157896, "no_speech_prob": 0.00856935977935791}, {"id": 71, "seek": 57164, "start": 579.16, "end": 588.04, "text": " cryptography using the NIST curves in 2009 and 2012, respectively. But that's the last RFC", "tokens": [50740, 9844, 5820, 1228, 264, 426, 19756, 19490, 294, 11453, 293, 9125, 11, 25009, 13, 583, 300, 311, 264, 1036, 497, 18671, 51184], "temperature": 0.0, "avg_logprob": -0.12681546529134113, "compression_ratio": 1.3842105263157896, "no_speech_prob": 0.00856935977935791}, {"id": 72, "seek": 57164, "start": 588.84, "end": 593.72, "text": " related to OpenBGP that was published. After that, there have been a number of drafts,", "tokens": [51224, 4077, 281, 7238, 33, 38, 47, 300, 390, 6572, 13, 2381, 300, 11, 456, 362, 668, 257, 1230, 295, 11206, 82, 11, 51468], "temperature": 0.0, "avg_logprob": -0.12681546529134113, "compression_ratio": 1.3842105263157896, "no_speech_prob": 0.00856935977935791}, {"id": 73, "seek": 59372, "start": 594.52, "end": 603.8000000000001, "text": " one for adding EDDSA that has been widely implemented and also adding Curve25519 has", "tokens": [50404, 472, 337, 5127, 18050, 35, 8886, 300, 575, 668, 13371, 12270, 293, 611, 5127, 7907, 303, 6074, 20, 3405, 575, 50868], "temperature": 0.0, "avg_logprob": -0.1482585384732201, "compression_ratio": 1.390625, "no_speech_prob": 0.025561939924955368}, {"id": 74, "seek": 59372, "start": 603.8000000000001, "end": 611.32, "text": " been fairly widely implemented, but nevertheless has never been standardized. And there are a", "tokens": [50868, 668, 6457, 13371, 12270, 11, 457, 26924, 575, 1128, 668, 31677, 13, 400, 456, 366, 257, 51244], "temperature": 0.0, "avg_logprob": -0.1482585384732201, "compression_ratio": 1.390625, "no_speech_prob": 0.025561939924955368}, {"id": 75, "seek": 61132, "start": 611.32, "end": 625.24, "text": " number of other things that were kind of overdue. So the RFC 480 BIS draft was in fact intended to be", "tokens": [50364, 1230, 295, 661, 721, 300, 645, 733, 295, 19853, 622, 13, 407, 264, 497, 18671, 1017, 4702, 363, 2343, 11206, 390, 294, 1186, 10226, 281, 312, 51060], "temperature": 0.0, "avg_logprob": -0.18118675968103243, "compression_ratio": 1.34, "no_speech_prob": 0.15288031101226807}, {"id": 76, "seek": 61132, "start": 625.88, "end": 635.6400000000001, "text": " become an RFC as well, but that never happened. And then the CryptoRefresh is the most recent draft", "tokens": [51092, 1813, 364, 497, 18671, 382, 731, 11, 457, 300, 1128, 2011, 13, 400, 550, 264, 34809, 78, 49, 5666, 3644, 307, 264, 881, 5162, 11206, 51580], "temperature": 0.0, "avg_logprob": -0.18118675968103243, "compression_ratio": 1.34, "no_speech_prob": 0.15288031101226807}, {"id": 77, "seek": 63564, "start": 635.64, "end": 641.0, "text": " and that will become an RFC very soon. It's currently in the editor's queue,", "tokens": [50364, 293, 300, 486, 1813, 364, 497, 18671, 588, 2321, 13, 467, 311, 4362, 294, 264, 9839, 311, 18639, 11, 50632], "temperature": 0.0, "avg_logprob": -0.09063502853991938, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.01685224287211895}, {"id": 78, "seek": 63564, "start": 641.88, "end": 649.72, "text": " so it should become an RFC in the coming weeks, hopefully. So what is actually in the CryptoRefresh?", "tokens": [50676, 370, 309, 820, 1813, 364, 497, 18671, 294, 264, 1348, 3259, 11, 4696, 13, 407, 437, 307, 767, 294, 264, 34809, 78, 49, 5666, 3644, 30, 51068], "temperature": 0.0, "avg_logprob": -0.09063502853991938, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.01685224287211895}, {"id": 79, "seek": 63564, "start": 649.72, "end": 654.92, "text": " Well, a lot of things, since it's been so long since we had an update, there were a lot of things", "tokens": [51068, 1042, 11, 257, 688, 295, 721, 11, 1670, 309, 311, 668, 370, 938, 1670, 321, 632, 364, 5623, 11, 456, 645, 257, 688, 295, 721, 51328], "temperature": 0.0, "avg_logprob": -0.09063502853991938, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.01685224287211895}, {"id": 80, "seek": 63564, "start": 654.92, "end": 661.08, "text": " that needed to be updated or that we wanted to update. So first of all, it merges the previous", "tokens": [51328, 300, 2978, 281, 312, 10588, 420, 300, 321, 1415, 281, 5623, 13, 407, 700, 295, 439, 11, 309, 3551, 2880, 264, 3894, 51636], "temperature": 0.0, "avg_logprob": -0.09063502853991938, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.01685224287211895}, {"id": 81, "seek": 66108, "start": 661.1600000000001, "end": 671.88, "text": " RFCs for Camelia and ECC. Then it standardizes finally Curve25519 as well as Curve4Fraight and", "tokens": [50368, 497, 18671, 82, 337, 6886, 26091, 293, 462, 11717, 13, 1396, 309, 3832, 5660, 2721, 7907, 303, 6074, 20, 3405, 382, 731, 382, 7907, 303, 19, 37, 424, 397, 293, 50904], "temperature": 0.0, "avg_logprob": -0.22192182658631124, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.03152867406606674}, {"id": 82, "seek": 66108, "start": 671.88, "end": 679.24, "text": " the Brain Pool Curves, which are commonly used by the German government and they like them.", "tokens": [50904, 264, 29783, 46188, 7907, 977, 11, 597, 366, 12719, 1143, 538, 264, 6521, 2463, 293, 436, 411, 552, 13, 51272], "temperature": 0.0, "avg_logprob": -0.22192182658631124, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.03152867406606674}, {"id": 83, "seek": 66108, "start": 681.5600000000001, "end": 688.0400000000001, "text": " But they are not mandatory to implement. Curve25519 is mandatory to implement Curve4Fraight,", "tokens": [51388, 583, 436, 366, 406, 22173, 281, 4445, 13, 7907, 303, 6074, 20, 3405, 307, 22173, 281, 4445, 7907, 303, 19, 37, 424, 397, 11, 51712], "temperature": 0.0, "avg_logprob": -0.22192182658631124, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.03152867406606674}, {"id": 84, "seek": 68804, "start": 688.8399999999999, "end": 696.1999999999999, "text": " recommended to be implemented. Brain Pool is fully optional, so they can use it. Everybody", "tokens": [50404, 9628, 281, 312, 12270, 13, 29783, 46188, 307, 4498, 17312, 11, 370, 436, 393, 764, 309, 13, 7646, 50772], "temperature": 0.0, "avg_logprob": -0.1171104135647626, "compression_ratio": 1.4126984126984128, "no_speech_prob": 0.009190310724079609}, {"id": 85, "seek": 68804, "start": 696.1999999999999, "end": 704.68, "text": " else doesn't have to. Then it also adds modern AAD encryption, authenticated encryption,", "tokens": [50772, 1646, 1177, 380, 362, 281, 13, 1396, 309, 611, 10860, 4363, 316, 6112, 29575, 11, 9214, 3587, 29575, 11, 51196], "temperature": 0.0, "avg_logprob": -0.1171104135647626, "compression_ratio": 1.4126984126984128, "no_speech_prob": 0.009190310724079609}, {"id": 86, "seek": 68804, "start": 705.9599999999999, "end": 716.4399999999999, "text": " which was also fairly overdue, so it adds the use of OCB, EX, and GCM. GCM was slightly", "tokens": [51260, 597, 390, 611, 6457, 19853, 622, 11, 370, 309, 10860, 264, 764, 295, 42278, 33, 11, 16385, 11, 293, 29435, 44, 13, 29435, 44, 390, 4748, 51784], "temperature": 0.0, "avg_logprob": -0.1171104135647626, "compression_ratio": 1.4126984126984128, "no_speech_prob": 0.009190310724079609}, {"id": 87, "seek": 71644, "start": 716.44, "end": 725.32, "text": " controversial, so I'll dive slightly into that. So first, OCB is the mandatory to implement", "tokens": [50364, 17323, 11, 370, 286, 603, 9192, 4748, 666, 300, 13, 407, 700, 11, 42278, 33, 307, 264, 22173, 281, 4445, 50808], "temperature": 0.0, "avg_logprob": -0.10864757810320173, "compression_ratio": 1.4111675126903553, "no_speech_prob": 0.015130412764847279}, {"id": 88, "seek": 71644, "start": 726.6, "end": 734.6, "text": " algorithm. EX and GCM are fully optional. The reason that they're there is because even though", "tokens": [50872, 9284, 13, 16385, 293, 29435, 44, 366, 4498, 17312, 13, 440, 1778, 300, 436, 434, 456, 307, 570, 754, 1673, 51272], "temperature": 0.0, "avg_logprob": -0.10864757810320173, "compression_ratio": 1.4111675126903553, "no_speech_prob": 0.015130412764847279}, {"id": 89, "seek": 71644, "start": 734.6, "end": 744.6, "text": " OCB, in theory, should be fastest. In practice, in our testing, particularly GCM is usually", "tokens": [51272, 42278, 33, 11, 294, 5261, 11, 820, 312, 14573, 13, 682, 3124, 11, 294, 527, 4997, 11, 4098, 29435, 44, 307, 2673, 51772], "temperature": 0.0, "avg_logprob": -0.10864757810320173, "compression_ratio": 1.4111675126903553, "no_speech_prob": 0.015130412764847279}, {"id": 90, "seek": 74460, "start": 744.6, "end": 752.9200000000001, "text": " fastest because it often has assembly implementations, for example. That's part of the reason why", "tokens": [50364, 14573, 570, 309, 2049, 575, 12103, 4445, 763, 11, 337, 1365, 13, 663, 311, 644, 295, 264, 1778, 983, 50780], "temperature": 0.0, "avg_logprob": -0.17728207328102805, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.01878092996776104}, {"id": 91, "seek": 74460, "start": 752.9200000000001, "end": 760.36, "text": " it's there. Another reason is because GCM is standardized by NIST, and so it's FIPS-approved.", "tokens": [50780, 309, 311, 456, 13, 3996, 1778, 307, 570, 29435, 44, 307, 31677, 538, 426, 19756, 11, 293, 370, 309, 311, 479, 40, 6273, 12, 35821, 937, 13, 51152], "temperature": 0.0, "avg_logprob": -0.17728207328102805, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.01878092996776104}, {"id": 92, "seek": 74460, "start": 760.36, "end": 767.4, "text": " So for the people that care about that, they can use that. But again, it's fully optional. So", "tokens": [51152, 407, 337, 264, 561, 300, 1127, 466, 300, 11, 436, 393, 764, 300, 13, 583, 797, 11, 309, 311, 4498, 17312, 13, 407, 51504], "temperature": 0.0, "avg_logprob": -0.17728207328102805, "compression_ratio": 1.4690721649484537, "no_speech_prob": 0.01878092996776104}, {"id": 93, "seek": 76740, "start": 767.4, "end": 773.4, "text": " for those that want to use the theoretically fastest, or once it becomes actually fastest,", "tokens": [50364, 337, 729, 300, 528, 281, 764, 264, 29400, 14573, 11, 420, 1564, 309, 3643, 767, 14573, 11, 50664], "temperature": 0.0, "avg_logprob": -0.12080491383870443, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.005004622507840395}, {"id": 94, "seek": 76740, "start": 774.4399999999999, "end": 782.68, "text": " everyone can use OCB. Then also a memory hard password hashing function was added,", "tokens": [50716, 1518, 393, 764, 42278, 33, 13, 1396, 611, 257, 4675, 1152, 11524, 575, 571, 2445, 390, 3869, 11, 51128], "temperature": 0.0, "avg_logprob": -0.12080491383870443, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.005004622507840395}, {"id": 95, "seek": 76740, "start": 782.68, "end": 791.0799999999999, "text": " Argon2. The previous password hashing function in OpenBGP was very weak, so this was also very,", "tokens": [51128, 1587, 10660, 17, 13, 440, 3894, 11524, 575, 571, 2445, 294, 7238, 33, 38, 47, 390, 588, 5336, 11, 370, 341, 390, 611, 588, 11, 51548], "temperature": 0.0, "avg_logprob": -0.12080491383870443, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.005004622507840395}, {"id": 96, "seek": 76740, "start": 791.0799999999999, "end": 795.4, "text": " very necessary. This means that if you, for example, encrypt your keys with a password,", "tokens": [51548, 588, 4818, 13, 639, 1355, 300, 498, 291, 11, 337, 1365, 11, 17972, 662, 428, 9317, 365, 257, 11524, 11, 51764], "temperature": 0.0, "avg_logprob": -0.12080491383870443, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.005004622507840395}, {"id": 97, "seek": 79540, "start": 796.28, "end": 802.84, "text": " they're protected much more strongly. Of course, it's still important to choose a strong password,", "tokens": [50408, 436, 434, 10594, 709, 544, 10613, 13, 2720, 1164, 11, 309, 311, 920, 1021, 281, 2826, 257, 2068, 11524, 11, 50736], "temperature": 0.0, "avg_logprob": -0.13281344319437885, "compression_ratio": 1.4873949579831933, "no_speech_prob": 0.006508735474199057}, {"id": 98, "seek": 79540, "start": 802.84, "end": 808.92, "text": " but it has become much more expensive to do brute force attack on that password.", "tokens": [50736, 457, 309, 575, 1813, 709, 544, 5124, 281, 360, 47909, 3464, 2690, 322, 300, 11524, 13, 51040], "temperature": 0.0, "avg_logprob": -0.13281344319437885, "compression_ratio": 1.4873949579831933, "no_speech_prob": 0.006508735474199057}, {"id": 99, "seek": 79540, "start": 809.64, "end": 818.68, "text": " Then it deprecates a number of legacy algorithms, such as RSA with weak keys, DSA,", "tokens": [51076, 1396, 309, 1367, 13867, 1024, 257, 1230, 295, 11711, 14642, 11, 1270, 382, 497, 8886, 365, 5336, 9317, 11, 413, 8886, 11, 51528], "temperature": 0.0, "avg_logprob": -0.13281344319437885, "compression_ratio": 1.4873949579831933, "no_speech_prob": 0.006508735474199057}, {"id": 100, "seek": 79540, "start": 818.68, "end": 824.28, "text": " Algomal, and so on. All of those things that we really shouldn't be using in 2024 have been", "tokens": [51528, 35014, 298, 304, 11, 293, 370, 322, 13, 1057, 295, 729, 721, 300, 321, 534, 4659, 380, 312, 1228, 294, 45237, 362, 668, 51808], "temperature": 0.0, "avg_logprob": -0.13281344319437885, "compression_ratio": 1.4873949579831933, "no_speech_prob": 0.006508735474199057}, {"id": 101, "seek": 82428, "start": 824.28, "end": 833.8, "text": " deprecated. Then it prevents a number of key overriding attacks that we discovered in collaboration", "tokens": [50364, 1367, 13867, 770, 13, 1396, 309, 22367, 257, 1230, 295, 2141, 670, 81, 2819, 8122, 300, 321, 6941, 294, 9363, 50840], "temperature": 0.0, "avg_logprob": -0.0970369529724121, "compression_ratio": 1.4603960396039604, "no_speech_prob": 0.016425734385848045}, {"id": 102, "seek": 82428, "start": 833.8, "end": 842.52, "text": " with ETH Turic a few years ago, that we worked around in our implementations, but the workaround", "tokens": [50840, 365, 462, 9620, 5712, 299, 257, 1326, 924, 2057, 11, 300, 321, 2732, 926, 294, 527, 4445, 763, 11, 457, 264, 589, 25762, 51276], "temperature": 0.0, "avg_logprob": -0.0970369529724121, "compression_ratio": 1.4603960396039604, "no_speech_prob": 0.016425734385848045}, {"id": 103, "seek": 82428, "start": 842.52, "end": 850.6, "text": " was fairly expensive. So now they've been fixed in the spec, which is a much cheaper way to do it.", "tokens": [51276, 390, 6457, 5124, 13, 407, 586, 436, 600, 668, 6806, 294, 264, 1608, 11, 597, 307, 257, 709, 12284, 636, 281, 360, 309, 13, 51680], "temperature": 0.0, "avg_logprob": -0.0970369529724121, "compression_ratio": 1.4603960396039604, "no_speech_prob": 0.016425734385848045}, {"id": 104, "seek": 85060, "start": 850.84, "end": 858.76, "text": " So for the implementations that worked around those issues, they should provide essentially", "tokens": [50376, 407, 337, 264, 4445, 763, 300, 2732, 926, 729, 2663, 11, 436, 820, 2893, 4476, 50772], "temperature": 0.0, "avg_logprob": -0.15500380198160807, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.004231920465826988}, {"id": 105, "seek": 85060, "start": 859.4, "end": 867.8000000000001, "text": " a free performance improvement. And by the way, the AAD algorithms also essentially improve the", "tokens": [50804, 257, 1737, 3389, 10444, 13, 400, 538, 264, 636, 11, 264, 316, 6112, 14642, 611, 4476, 3470, 264, 51224], "temperature": 0.0, "avg_logprob": -0.15500380198160807, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.004231920465826988}, {"id": 106, "seek": 85060, "start": 867.8000000000001, "end": 873.8000000000001, "text": " performance as well. So it's not just, the main focus was about improving the security,", "tokens": [51224, 3389, 382, 731, 13, 407, 309, 311, 406, 445, 11, 264, 2135, 1879, 390, 466, 11470, 264, 3825, 11, 51524], "temperature": 0.0, "avg_logprob": -0.15500380198160807, "compression_ratio": 1.5804597701149425, "no_speech_prob": 0.004231920465826988}, {"id": 107, "seek": 87380, "start": 873.88, "end": 878.04, "text": " but improving the performance is basically an added benefit.", "tokens": [50368, 457, 11470, 264, 3389, 307, 1936, 364, 3869, 5121, 13, 50576], "temperature": 0.0, "avg_logprob": -0.2407611630997568, "compression_ratio": 1.4034090909090908, "no_speech_prob": 0.011224477551877499}, {"id": 108, "seek": 87380, "start": 879.7199999999999, "end": 886.92, "text": " Then finally, it's not quite finally, it also protects against future vulnerabilities in", "tokens": [50660, 1396, 2721, 11, 309, 311, 406, 1596, 2721, 11, 309, 611, 22583, 1970, 2027, 37633, 294, 51020], "temperature": 0.0, "avg_logprob": -0.2407611630997568, "compression_ratio": 1.4034090909090908, "no_speech_prob": 0.011224477551877499}, {"id": 109, "seek": 87380, "start": 888.52, "end": 900.5999999999999, "text": " hash algorithms by sorting signatures such that if for example, SHA2 ever becomes broken in a way", "tokens": [51100, 22019, 14642, 538, 32411, 32322, 1270, 300, 498, 337, 1365, 11, 38820, 17, 1562, 3643, 5463, 294, 257, 636, 51704], "temperature": 0.0, "avg_logprob": -0.2407611630997568, "compression_ratio": 1.4034090909090908, "no_speech_prob": 0.011224477551877499}, {"id": 110, "seek": 90060, "start": 900.6, "end": 909.4, "text": " that SHA1 was, even though we don't expect that today, but it provides some protection against", "tokens": [50364, 300, 38820, 16, 390, 11, 754, 1673, 321, 500, 380, 2066, 300, 965, 11, 457, 309, 6417, 512, 6334, 1970, 50804], "temperature": 0.0, "avg_logprob": -0.07672037397112165, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.009474340826272964}, {"id": 111, "seek": 90060, "start": 909.4, "end": 917.8000000000001, "text": " that. And then finally, it adds a padding packet, which means that if you want to hide the size of", "tokens": [50804, 300, 13, 400, 550, 2721, 11, 309, 10860, 257, 39562, 20300, 11, 597, 1355, 300, 498, 291, 528, 281, 6479, 264, 2744, 295, 51224], "temperature": 0.0, "avg_logprob": -0.07672037397112165, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.009474340826272964}, {"id": 112, "seek": 90060, "start": 917.8000000000001, "end": 923.4, "text": " your files or the size of your message when you're sending an email or of your attachments,", "tokens": [51224, 428, 7098, 420, 264, 2744, 295, 428, 3636, 562, 291, 434, 7750, 364, 3796, 420, 295, 428, 37987, 11, 51504], "temperature": 0.0, "avg_logprob": -0.07672037397112165, "compression_ratio": 1.548913043478261, "no_speech_prob": 0.009474340826272964}, {"id": 113, "seek": 92340, "start": 923.9599999999999, "end": 931.64, "text": " you can do that by adding a padding packet to hide the size of the unencrypted data.", "tokens": [50392, 291, 393, 360, 300, 538, 5127, 257, 39562, 20300, 281, 6479, 264, 2744, 295, 264, 517, 22660, 627, 25383, 1412, 13, 50776], "temperature": 0.0, "avg_logprob": -0.10899521853472735, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.033473048359155655}, {"id": 114, "seek": 92340, "start": 933.3199999999999, "end": 943.0799999999999, "text": " All right, then for what's next, you might think, well, what about this? So the obvious one is", "tokens": [50860, 1057, 558, 11, 550, 337, 437, 311, 958, 11, 291, 1062, 519, 11, 731, 11, 437, 466, 341, 30, 407, 264, 6322, 472, 307, 51348], "temperature": 0.0, "avg_logprob": -0.10899521853472735, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.033473048359155655}, {"id": 115, "seek": 92340, "start": 943.0799999999999, "end": 948.76, "text": " post quantum cryptography, which we have also been working on, but is not yet in the crypto refresh", "tokens": [51348, 2183, 13018, 9844, 5820, 11, 597, 321, 362, 611, 668, 1364, 322, 11, 457, 307, 406, 1939, 294, 264, 17240, 15134, 51632], "temperature": 0.0, "avg_logprob": -0.10899521853472735, "compression_ratio": 1.4840425531914894, "no_speech_prob": 0.033473048359155655}, {"id": 116, "seek": 94876, "start": 948.84, "end": 956.2, "text": " yet. But there is a separate draft for the use of post quantum cryptography in OpenPGP,", "tokens": [50368, 1939, 13, 583, 456, 307, 257, 4994, 11206, 337, 264, 764, 295, 2183, 13018, 9844, 5820, 294, 7238, 47, 38, 47, 11, 50736], "temperature": 0.0, "avg_logprob": -0.14795503351423475, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.009359262883663177}, {"id": 117, "seek": 94876, "start": 956.2, "end": 964.92, "text": " so that will come relatively soon as well. And then finally, we are, again, quite finally,", "tokens": [50736, 370, 300, 486, 808, 7226, 2321, 382, 731, 13, 400, 550, 2721, 11, 321, 366, 11, 797, 11, 1596, 2721, 11, 51172], "temperature": 0.0, "avg_logprob": -0.14795503351423475, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.009359262883663177}, {"id": 118, "seek": 94876, "start": 964.92, "end": 972.76, "text": " we also would like to start working on forward secrecy. That's not quite as far along yet,", "tokens": [51172, 321, 611, 576, 411, 281, 722, 1364, 322, 2128, 34432, 1344, 13, 663, 311, 406, 1596, 382, 1400, 2051, 1939, 11, 51564], "temperature": 0.0, "avg_logprob": -0.14795503351423475, "compression_ratio": 1.4385026737967914, "no_speech_prob": 0.009359262883663177}, {"id": 119, "seek": 97276, "start": 973.72, "end": 980.28, "text": " but perfect forward secrecy is obviously something that Signal, for example, has been", "tokens": [50412, 457, 2176, 2128, 34432, 1344, 307, 2745, 746, 300, 43414, 11, 337, 1365, 11, 575, 668, 50740], "temperature": 0.0, "avg_logprob": -0.10811652146376573, "compression_ratio": 1.5603448275862069, "no_speech_prob": 0.004939321894198656}, {"id": 120, "seek": 97276, "start": 980.28, "end": 987.96, "text": " championing and is a good security property to have in an encryption standard, although it's", "tokens": [50740, 10971, 278, 293, 307, 257, 665, 3825, 4707, 281, 362, 294, 364, 29575, 3832, 11, 4878, 309, 311, 51124], "temperature": 0.0, "avg_logprob": -0.10811652146376573, "compression_ratio": 1.5603448275862069, "no_speech_prob": 0.004939321894198656}, {"id": 121, "seek": 97276, "start": 987.96, "end": 994.68, "text": " slightly more difficult to achieve in an email context since you're storing emails basically", "tokens": [51124, 4748, 544, 2252, 281, 4584, 294, 364, 3796, 4319, 1670, 291, 434, 26085, 12524, 1936, 51460], "temperature": 0.0, "avg_logprob": -0.10811652146376573, "compression_ratio": 1.5603448275862069, "no_speech_prob": 0.004939321894198656}, {"id": 122, "seek": 97276, "start": 994.68, "end": 999.72, "text": " forever usually, but still there are some improvements that we can and would like to make.", "tokens": [51460, 5680, 2673, 11, 457, 920, 456, 366, 512, 13797, 300, 321, 393, 293, 576, 411, 281, 652, 13, 51712], "temperature": 0.0, "avg_logprob": -0.10811652146376573, "compression_ratio": 1.5603448275862069, "no_speech_prob": 0.004939321894198656}, {"id": 123, "seek": 99972, "start": 1000.6800000000001, "end": 1007.72, "text": " And then, as I mentioned before, we would also like to standardize key transparency for OpenPGP.", "tokens": [50412, 400, 550, 11, 382, 286, 2835, 949, 11, 321, 576, 611, 411, 281, 3832, 1125, 2141, 17131, 337, 7238, 47, 38, 47, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14306304824184363, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.005266313906759024}, {"id": 124, "seek": 99972, "start": 1008.6800000000001, "end": 1016.44, "text": " So then as to the implementation status, here you can see a graph. Some of the implementations", "tokens": [50812, 407, 550, 382, 281, 264, 11420, 6558, 11, 510, 291, 393, 536, 257, 4295, 13, 2188, 295, 264, 4445, 763, 51200], "temperature": 0.0, "avg_logprob": -0.14306304824184363, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.005266313906759024}, {"id": 125, "seek": 99972, "start": 1016.44, "end": 1025.96, "text": " are already very far along. Some of them not quite yet. Also, notably for its absence is", "tokens": [51200, 366, 1217, 588, 1400, 2051, 13, 2188, 295, 552, 406, 1596, 1939, 13, 2743, 11, 31357, 337, 1080, 17145, 307, 51676], "temperature": 0.0, "avg_logprob": -0.14306304824184363, "compression_ratio": 1.530054644808743, "no_speech_prob": 0.005266313906759024}, {"id": 126, "seek": 102596, "start": 1026.1200000000001, "end": 1035.48, "text": " Gnupig. Unfortunately, it seems like Gnupig does not want to implement the crypto refresh and", "tokens": [50372, 460, 77, 1010, 328, 13, 8590, 11, 309, 2544, 411, 460, 77, 1010, 328, 775, 406, 528, 281, 4445, 264, 17240, 15134, 293, 50840], "temperature": 0.0, "avg_logprob": -0.2510419303988233, "compression_ratio": 1.4228855721393034, "no_speech_prob": 0.043411921709775925}, {"id": 127, "seek": 102596, "start": 1035.48, "end": 1045.56, "text": " rather would like to stick with the previous drafts, RFC 480B, which they have rebranded Libra", "tokens": [50840, 2831, 576, 411, 281, 2897, 365, 264, 3894, 11206, 82, 11, 497, 18671, 1017, 4702, 33, 11, 597, 436, 362, 12970, 3699, 292, 15834, 424, 51344], "temperature": 0.0, "avg_logprob": -0.2510419303988233, "compression_ratio": 1.4228855721393034, "no_speech_prob": 0.043411921709775925}, {"id": 128, "seek": 102596, "start": 1045.56, "end": 1052.92, "text": " PGP, which is a rather shrewd marketing move, I would say, since Libra Office is better than Open", "tokens": [51344, 40975, 47, 11, 597, 307, 257, 2831, 402, 2236, 67, 6370, 1286, 11, 286, 576, 584, 11, 1670, 15834, 424, 8935, 307, 1101, 813, 7238, 51712], "temperature": 0.0, "avg_logprob": -0.2510419303988233, "compression_ratio": 1.4228855721393034, "no_speech_prob": 0.043411921709775925}, {"id": 129, "seek": 105292, "start": 1052.92, "end": 1058.6000000000001, "text": " Office, so clearly Libra PGP should be better than OpenPGP, right? But actually it's not the case,", "tokens": [50364, 8935, 11, 370, 4448, 15834, 424, 40975, 47, 820, 312, 1101, 813, 7238, 47, 38, 47, 11, 558, 30, 583, 767, 309, 311, 406, 264, 1389, 11, 50648], "temperature": 0.0, "avg_logprob": -0.11868594674503102, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.02389058843255043}, {"id": 130, "seek": 105292, "start": 1058.6000000000001, "end": 1067.3200000000002, "text": " it's more or less a rebranded version of the old standard. And there is a lot of controversy", "tokens": [50648, 309, 311, 544, 420, 1570, 257, 12970, 3699, 292, 3037, 295, 264, 1331, 3832, 13, 400, 456, 307, 257, 688, 295, 22976, 51084], "temperature": 0.0, "avg_logprob": -0.11868594674503102, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.02389058843255043}, {"id": 131, "seek": 105292, "start": 1068.2, "end": 1075.3200000000002, "text": " about it at the moment, so I felt like I couldn't really get around that. So I've here included", "tokens": [51128, 466, 309, 412, 264, 1623, 11, 370, 286, 2762, 411, 286, 2809, 380, 534, 483, 926, 300, 13, 407, 286, 600, 510, 5556, 51484], "temperature": 0.0, "avg_logprob": -0.11868594674503102, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.02389058843255043}, {"id": 132, "seek": 105292, "start": 1076.8400000000001, "end": 1081.88, "text": " a short comparison. In the interest of time, I won't go through all of the points, but", "tokens": [51560, 257, 2099, 9660, 13, 682, 264, 1179, 295, 565, 11, 286, 1582, 380, 352, 807, 439, 295, 264, 2793, 11, 457, 51812], "temperature": 0.0, "avg_logprob": -0.11868594674503102, "compression_ratio": 1.5390946502057614, "no_speech_prob": 0.02389058843255043}, {"id": 133, "seek": 108292, "start": 1083.0800000000002, "end": 1089.48, "text": " I would say the technical differences are very minor and in my personal opinion,", "tokens": [50372, 286, 576, 584, 264, 6191, 7300, 366, 588, 6696, 293, 294, 452, 2973, 4800, 11, 50692], "temperature": 0.0, "avg_logprob": -0.10990656339205228, "compression_ratio": 1.402116402116402, "no_speech_prob": 0.006113152019679546}, {"id": 134, "seek": 108292, "start": 1090.04, "end": 1097.96, "text": " should not have led to such a big schism in the community. And in fact, I still am somewhat", "tokens": [50720, 820, 406, 362, 4684, 281, 1270, 257, 955, 956, 1434, 294, 264, 1768, 13, 400, 294, 1186, 11, 286, 920, 669, 8344, 51116], "temperature": 0.0, "avg_logprob": -0.10990656339205228, "compression_ratio": 1.402116402116402, "no_speech_prob": 0.006113152019679546}, {"id": 135, "seek": 108292, "start": 1097.96, "end": 1107.0, "text": " hopeful that we can find some sort of resolution, particularly if you consider that RFC 480B", "tokens": [51116, 20531, 300, 321, 393, 915, 512, 1333, 295, 8669, 11, 4098, 498, 291, 1949, 300, 497, 18671, 1017, 4702, 33, 51568], "temperature": 0.0, "avg_logprob": -0.10990656339205228, "compression_ratio": 1.402116402116402, "no_speech_prob": 0.006113152019679546}, {"id": 136, "seek": 110700, "start": 1107.0, "end": 1115.72, "text": " originally was intended to become an RFC. If it had become an RFC and people had implemented that,", "tokens": [50364, 7993, 390, 10226, 281, 1813, 364, 497, 18671, 13, 759, 309, 632, 1813, 364, 497, 18671, 293, 561, 632, 12270, 300, 11, 50800], "temperature": 0.0, "avg_logprob": -0.1034327203577215, "compression_ratio": 1.4375, "no_speech_prob": 0.10881774127483368}, {"id": 137, "seek": 110700, "start": 1116.36, "end": 1124.12, "text": " then the crypto refresh would have been an update to that and we would have basically", "tokens": [50832, 550, 264, 17240, 15134, 576, 362, 668, 364, 5623, 281, 300, 293, 321, 576, 362, 1936, 51220], "temperature": 0.0, "avg_logprob": -0.1034327203577215, "compression_ratio": 1.4375, "no_speech_prob": 0.10881774127483368}, {"id": 138, "seek": 112412, "start": 1125.08, "end": 1137.8, "text": " had to implement both anyway. And my proposed resolution is essentially that, I would argue that", "tokens": [50412, 632, 281, 4445, 1293, 4033, 13, 400, 452, 10348, 8669, 307, 4476, 300, 11, 286, 576, 9695, 300, 51048], "temperature": 0.0, "avg_logprob": -0.13146253193126006, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.5061299204826355}, {"id": 139, "seek": 112412, "start": 1138.76, "end": 1146.84, "text": " everyone should implement both. If you're going to implement the crypto refresh, implementing Libra", "tokens": [51096, 1518, 820, 4445, 1293, 13, 759, 291, 434, 516, 281, 4445, 264, 17240, 15134, 11, 18114, 15834, 424, 51500], "temperature": 0.0, "avg_logprob": -0.13146253193126006, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.5061299204826355}, {"id": 140, "seek": 112412, "start": 1146.84, "end": 1153.4799999999998, "text": " PGP as well as not that much added effort, the other way around, there is a bit more effort. I", "tokens": [51500, 40975, 47, 382, 731, 382, 406, 300, 709, 3869, 4630, 11, 264, 661, 636, 926, 11, 456, 307, 257, 857, 544, 4630, 13, 286, 51832], "temperature": 0.0, "avg_logprob": -0.13146253193126006, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.5061299204826355}, {"id": 141, "seek": 115348, "start": 1153.56, "end": 1160.3600000000001, "text": " haven't heard any objections from any of the other implementations to implementing crypto refresh,", "tokens": [50368, 2378, 380, 2198, 604, 44649, 490, 604, 295, 264, 661, 4445, 763, 281, 18114, 17240, 15134, 11, 50708], "temperature": 0.0, "avg_logprob": -0.16333556175231934, "compression_ratio": 1.4320388349514563, "no_speech_prob": 0.02133026532828808}, {"id": 142, "seek": 115348, "start": 1160.3600000000001, "end": 1167.88, "text": " so I still hope that GNU-BG eventually will do so as well, although it seems unlikely at the moment.", "tokens": [50708, 370, 286, 920, 1454, 300, 46411, 52, 12, 33, 38, 4728, 486, 360, 370, 382, 731, 11, 4878, 309, 2544, 17518, 412, 264, 1623, 13, 51084], "temperature": 0.0, "avg_logprob": -0.16333556175231934, "compression_ratio": 1.4320388349514563, "no_speech_prob": 0.02133026532828808}, {"id": 143, "seek": 115348, "start": 1167.88, "end": 1176.84, "text": " But let's see. So in conclusion, we're trying to drag OpenBGP into the 21st century. Hopefully,", "tokens": [51084, 583, 718, 311, 536, 13, 407, 294, 10063, 11, 321, 434, 1382, 281, 5286, 7238, 33, 38, 47, 666, 264, 5080, 372, 4901, 13, 10429, 11, 51532], "temperature": 0.0, "avg_logprob": -0.16333556175231934, "compression_ratio": 1.4320388349514563, "no_speech_prob": 0.02133026532828808}, {"id": 144, "seek": 117684, "start": 1176.84, "end": 1187.56, "text": " we've succeeded. Thank you. And my other point that I would like you to take away is it's becoming", "tokens": [50364, 321, 600, 20263, 13, 1044, 291, 13, 400, 452, 661, 935, 300, 286, 576, 411, 291, 281, 747, 1314, 307, 309, 311, 5617, 50900], "temperature": 0.0, "avg_logprob": -0.0663045560809928, "compression_ratio": 1.3940886699507389, "no_speech_prob": 0.25027477741241455}, {"id": 145, "seek": 117684, "start": 1187.56, "end": 1196.04, "text": " more and more possible to build modern email encryption applications using OpenBGP. It doesn't", "tokens": [50900, 544, 293, 544, 1944, 281, 1322, 4363, 3796, 29575, 5821, 1228, 7238, 33, 38, 47, 13, 467, 1177, 380, 51324], "temperature": 0.0, "avg_logprob": -0.0663045560809928, "compression_ratio": 1.3940886699507389, "no_speech_prob": 0.25027477741241455}, {"id": 146, "seek": 117684, "start": 1196.04, "end": 1202.76, "text": " have to have the UX of 10, 20 years ago. And finally, I hope that everyone will implement", "tokens": [51324, 362, 281, 362, 264, 40176, 295, 1266, 11, 945, 924, 2057, 13, 400, 2721, 11, 286, 1454, 300, 1518, 486, 4445, 51660], "temperature": 0.0, "avg_logprob": -0.0663045560809928, "compression_ratio": 1.3940886699507389, "no_speech_prob": 0.25027477741241455}, {"id": 147, "seek": 120276, "start": 1202.76, "end": 1206.2, "text": " and use the crypto refresh. Thanks a lot. Thank you very much.", "tokens": [50364, 293, 764, 264, 17240, 15134, 13, 2561, 257, 688, 13, 1044, 291, 588, 709, 13, 50536], "temperature": 0.0, "avg_logprob": -0.09432188939240019, "compression_ratio": 1.3452380952380953, "no_speech_prob": 0.03660253435373306}, {"id": 148, "seek": 120276, "start": 1211.24, "end": 1215.8799999999999, "text": " I see one straight hand immediately, so this needs to be rewarded instantly.", "tokens": [50788, 286, 536, 472, 2997, 1011, 4258, 11, 370, 341, 2203, 281, 312, 29105, 13518, 13, 51020], "temperature": 0.0, "avg_logprob": -0.09432188939240019, "compression_ratio": 1.3452380952380953, "no_speech_prob": 0.03660253435373306}, {"id": 149, "seek": 120276, "start": 1219.24, "end": 1227.72, "text": " Hi. First question that comes to my mind, especially when you compared GNU-BG to other", "tokens": [51188, 2421, 13, 2386, 1168, 300, 1487, 281, 452, 1575, 11, 2318, 562, 291, 5347, 46411, 52, 12, 33, 38, 281, 661, 51612], "temperature": 0.0, "avg_logprob": -0.09432188939240019, "compression_ratio": 1.3452380952380953, "no_speech_prob": 0.03660253435373306}, {"id": 150, "seek": 122772, "start": 1227.8, "end": 1237.4, "text": " implementations, is what about hardware support? Because in my mind, and this is why I haven't used", "tokens": [50368, 4445, 763, 11, 307, 437, 466, 8837, 1406, 30, 1436, 294, 452, 1575, 11, 293, 341, 307, 983, 286, 2378, 380, 1143, 50848], "temperature": 0.0, "avg_logprob": -0.16026314445163892, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.22510148584842682}, {"id": 151, "seek": 122772, "start": 1239.32, "end": 1248.1200000000001, "text": " either of these implementations, especially those JavaScript based, is that I'd like to keep", "tokens": [50944, 2139, 295, 613, 4445, 763, 11, 2318, 729, 15778, 2361, 11, 307, 300, 286, 1116, 411, 281, 1066, 51384], "temperature": 0.0, "avg_logprob": -0.16026314445163892, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.22510148584842682}, {"id": 152, "seek": 124812, "start": 1249.08, "end": 1258.6, "text": " these keys in my hand on a device. So what about it? Yes. So there is an open pull request for", "tokens": [50412, 613, 9317, 294, 452, 1011, 322, 257, 4302, 13, 407, 437, 466, 309, 30, 1079, 13, 407, 456, 307, 364, 1269, 2235, 5308, 337, 50888], "temperature": 0.0, "avg_logprob": -0.13225664411272323, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.03566727042198181}, {"id": 153, "seek": 124812, "start": 1258.6, "end": 1265.8799999999999, "text": " OpenBGP.js to add support for hardware based keys, although in full disclosure, it has been a bit", "tokens": [50888, 7238, 33, 38, 47, 13, 25530, 281, 909, 1406, 337, 8837, 2361, 9317, 11, 4878, 294, 1577, 30392, 11, 309, 575, 668, 257, 857, 51252], "temperature": 0.0, "avg_logprob": -0.13225664411272323, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.03566727042198181}, {"id": 154, "seek": 124812, "start": 1265.8799999999999, "end": 1275.56, "text": " idle in the last while. But I still hope that someone will do the work to support it also in", "tokens": [51252, 30650, 294, 264, 1036, 1339, 13, 583, 286, 920, 1454, 300, 1580, 486, 360, 264, 589, 281, 1406, 309, 611, 294, 51736], "temperature": 0.0, "avg_logprob": -0.13225664411272323, "compression_ratio": 1.4540816326530612, "no_speech_prob": 0.03566727042198181}, {"id": 155, "seek": 127556, "start": 1275.56, "end": 1283.72, "text": " other implementations. I'm not fully up to date on what's the status for the support in all the", "tokens": [50364, 661, 4445, 763, 13, 286, 478, 406, 4498, 493, 281, 4002, 322, 437, 311, 264, 6558, 337, 264, 1406, 294, 439, 264, 50772], "temperature": 0.0, "avg_logprob": -0.19382810592651367, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.01505554374307394}, {"id": 156, "seek": 127556, "start": 1283.72, "end": 1289.32, "text": " libraries, but certainly it would be good to add support elsewhere as well. Yes.", "tokens": [50772, 15148, 11, 457, 3297, 309, 576, 312, 665, 281, 909, 1406, 14517, 382, 731, 13, 1079, 13, 51052], "temperature": 0.0, "avg_logprob": -0.19382810592651367, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.01505554374307394}, {"id": 157, "seek": 127556, "start": 1294.6799999999998, "end": 1302.44, "text": " Another question, actually. I wanted to congratulate you hard to felt for not having the", "tokens": [51320, 3996, 1168, 11, 767, 13, 286, 1415, 281, 24353, 291, 1152, 281, 2762, 337, 406, 1419, 264, 51708], "temperature": 0.0, "avg_logprob": -0.19382810592651367, "compression_ratio": 1.4722222222222223, "no_speech_prob": 0.01505554374307394}, {"id": 158, "seek": 130244, "start": 1302.44, "end": 1309.0800000000002, "text": " suckful user interfaces that PGP used to have. This sounds hopeful. Thanks. Thank you.", "tokens": [50364, 9967, 906, 4195, 28416, 300, 40975, 47, 1143, 281, 362, 13, 639, 3263, 20531, 13, 2561, 13, 1044, 291, 13, 50696], "temperature": 0.0, "avg_logprob": -0.22019011633736746, "compression_ratio": 1.4816753926701571, "no_speech_prob": 0.025450706481933594}, {"id": 159, "seek": 130244, "start": 1315.3200000000002, "end": 1321.64, "text": " I'm very excited about your approach to key transparency, well, or protons, not yours personally.", "tokens": [51008, 286, 478, 588, 2919, 466, 428, 3109, 281, 2141, 17131, 11, 731, 11, 420, 40270, 11, 406, 6342, 5665, 13, 51324], "temperature": 0.0, "avg_logprob": -0.22019011633736746, "compression_ratio": 1.4816753926701571, "no_speech_prob": 0.025450706481933594}, {"id": 160, "seek": 130244, "start": 1321.64, "end": 1327.48, "text": " I think it's very good. Do you have any thoughts on the relocation transparency to make that more?", "tokens": [51324, 286, 519, 309, 311, 588, 665, 13, 1144, 291, 362, 604, 4598, 322, 264, 26981, 399, 17131, 281, 652, 300, 544, 30, 51616], "temperature": 0.0, "avg_logprob": -0.22019011633736746, "compression_ratio": 1.4816753926701571, "no_speech_prob": 0.025450706481933594}, {"id": 161, "seek": 132748, "start": 1328.2, "end": 1337.32, "text": " Yes. So in our implementation of key transparency, we do include, for example, when the user marks a", "tokens": [50400, 1079, 13, 407, 294, 527, 11420, 295, 2141, 17131, 11, 321, 360, 4090, 11, 337, 1365, 11, 562, 264, 4195, 10640, 257, 50856], "temperature": 0.0, "avg_logprob": -0.10953196798052106, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.00990099273622036}, {"id": 162, "seek": 132748, "start": 1337.32, "end": 1346.92, "text": " key as compromised or obsolete, it is included in key transparency. So this means that once that's", "tokens": [50856, 2141, 382, 32463, 420, 46333, 11, 309, 307, 5556, 294, 2141, 17131, 13, 407, 341, 1355, 300, 1564, 300, 311, 51336], "temperature": 0.0, "avg_logprob": -0.10953196798052106, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.00990099273622036}, {"id": 163, "seek": 132748, "start": 1346.92, "end": 1353.64, "text": " included, other people shouldn't use the key anymore, right? And I would imagine that in the", "tokens": [51336, 5556, 11, 661, 561, 4659, 380, 764, 264, 2141, 3602, 11, 558, 30, 400, 286, 576, 3811, 300, 294, 264, 51672], "temperature": 0.0, "avg_logprob": -0.10953196798052106, "compression_ratio": 1.5614973262032086, "no_speech_prob": 0.00990099273622036}, {"id": 164, "seek": 135364, "start": 1353.64, "end": 1364.2, "text": " standardized version, you would similarly include revocations in key transparency such that", "tokens": [50364, 31677, 3037, 11, 291, 576, 14138, 4090, 3698, 905, 763, 294, 2141, 17131, 1270, 300, 50892], "temperature": 0.0, "avg_logprob": -0.23835650223952073, "compression_ratio": 1.4709302325581395, "no_speech_prob": 0.005441885907202959}, {"id": 165, "seek": 135364, "start": 1365.48, "end": 1369.0800000000002, "text": " when you revoke a key, you can be sure that others won't use it anymore.", "tokens": [50956, 562, 291, 3698, 2949, 257, 2141, 11, 291, 393, 312, 988, 300, 2357, 1582, 380, 764, 309, 3602, 13, 51136], "temperature": 0.0, "avg_logprob": -0.23835650223952073, "compression_ratio": 1.4709302325581395, "no_speech_prob": 0.005441885907202959}, {"id": 166, "seek": 135364, "start": 1373.0, "end": 1378.1200000000001, "text": " The way I don't, you just get a new record for the mapping, which is not the relocation.", "tokens": [51332, 440, 636, 286, 500, 380, 11, 291, 445, 483, 257, 777, 2136, 337, 264, 18350, 11, 597, 307, 406, 264, 26981, 399, 13, 51588], "temperature": 0.0, "avg_logprob": -0.23835650223952073, "compression_ratio": 1.4709302325581395, "no_speech_prob": 0.005441885907202959}, {"id": 167, "seek": 137812, "start": 1379.08, "end": 1389.9599999999998, "text": " Yes. So we always support updates to the key. So the key transparency always provides a snapshot", "tokens": [50412, 1079, 13, 407, 321, 1009, 1406, 9205, 281, 264, 2141, 13, 407, 264, 2141, 17131, 1009, 6417, 257, 30163, 50956], "temperature": 0.0, "avg_logprob": -0.11743858125474718, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.006652760785073042}, {"id": 168, "seek": 137812, "start": 1389.9599999999998, "end": 1399.56, "text": " in time. So we repeatedly publish all the keys, conceptually speaking. And also when you generate", "tokens": [50956, 294, 565, 13, 407, 321, 18227, 11374, 439, 264, 9317, 11, 3410, 671, 4124, 13, 400, 611, 562, 291, 8460, 51436], "temperature": 0.0, "avg_logprob": -0.11743858125474718, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.006652760785073042}, {"id": 169, "seek": 137812, "start": 1399.56, "end": 1407.0, "text": " a new key, the keys are updated, but also when you revoke a key. So essentially it will be the same", "tokens": [51436, 257, 777, 2141, 11, 264, 9317, 366, 10588, 11, 457, 611, 562, 291, 3698, 2949, 257, 2141, 13, 407, 4476, 309, 486, 312, 264, 912, 51808], "temperature": 0.0, "avg_logprob": -0.11743858125474718, "compression_ratio": 1.6424581005586592, "no_speech_prob": 0.006652760785073042}, {"id": 170, "seek": 140700, "start": 1407.0, "end": 1416.44, "text": " thing. When you were going through your list of new changes in OpenGBT, you were talking a lot", "tokens": [50364, 551, 13, 1133, 291, 645, 516, 807, 428, 1329, 295, 777, 2962, 294, 7238, 8769, 51, 11, 291, 645, 1417, 257, 688, 50836], "temperature": 0.0, "avg_logprob": -0.1646314303080241, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.027607334777712822}, {"id": 171, "seek": 140700, "start": 1416.44, "end": 1423.24, "text": " about these optional features. But does it make sense to have optional features when both ends", "tokens": [50836, 466, 613, 17312, 4122, 13, 583, 775, 309, 652, 2020, 281, 362, 17312, 4122, 562, 1293, 5314, 51176], "temperature": 0.0, "avg_logprob": -0.1646314303080241, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.027607334777712822}, {"id": 172, "seek": 140700, "start": 1423.24, "end": 1429.08, "text": " kind of need to implement them in order to be able to communicate with the... Sorry, I didn't", "tokens": [51176, 733, 295, 643, 281, 4445, 552, 294, 1668, 281, 312, 1075, 281, 7890, 365, 264, 485, 4919, 11, 286, 994, 380, 51468], "temperature": 0.0, "avg_logprob": -0.1646314303080241, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.027607334777712822}, {"id": 173, "seek": 140700, "start": 1429.08, "end": 1434.04, "text": " fully hear what kind of features were you saying? The optional features like the... Optional features,", "tokens": [51468, 4498, 1568, 437, 733, 295, 4122, 645, 291, 1566, 30, 440, 17312, 4122, 411, 264, 485, 29284, 304, 4122, 11, 51716], "temperature": 0.0, "avg_logprob": -0.1646314303080241, "compression_ratio": 1.7155555555555555, "no_speech_prob": 0.027607334777712822}, {"id": 174, "seek": 143404, "start": 1434.04, "end": 1440.68, "text": " I see. So there is a lot of new mandatory features as well. Curve 25519 is mandatory to", "tokens": [50364, 286, 536, 13, 407, 456, 307, 257, 688, 295, 777, 22173, 4122, 382, 731, 13, 7907, 303, 3552, 20, 3405, 307, 22173, 281, 50696], "temperature": 0.0, "avg_logprob": -0.1412541037020476, "compression_ratio": 1.6875, "no_speech_prob": 0.01634153537452221}, {"id": 175, "seek": 143404, "start": 1440.68, "end": 1447.72, "text": " implement. OSEB is mandatory to implement. But to be perfectly honest, a standard doesn't have that", "tokens": [50696, 4445, 13, 422, 5879, 33, 307, 22173, 281, 4445, 13, 583, 281, 312, 6239, 3245, 11, 257, 3832, 1177, 380, 362, 300, 51048], "temperature": 0.0, "avg_logprob": -0.1412541037020476, "compression_ratio": 1.6875, "no_speech_prob": 0.01634153537452221}, {"id": 176, "seek": 143404, "start": 1447.72, "end": 1455.24, "text": " much power over implementations just by existing. Every implementation in the end can choose what", "tokens": [51048, 709, 1347, 670, 4445, 763, 445, 538, 6741, 13, 2048, 11420, 294, 264, 917, 393, 2826, 437, 51424], "temperature": 0.0, "avg_logprob": -0.1412541037020476, "compression_ratio": 1.6875, "no_speech_prob": 0.01634153537452221}, {"id": 177, "seek": 143404, "start": 1455.24, "end": 1460.04, "text": " they implement, even if we write that it's mandatory in the spec. We hope that everyone will", "tokens": [51424, 436, 4445, 11, 754, 498, 321, 2464, 300, 309, 311, 22173, 294, 264, 1608, 13, 492, 1454, 300, 1518, 486, 51664], "temperature": 0.0, "avg_logprob": -0.1412541037020476, "compression_ratio": 1.6875, "no_speech_prob": 0.01634153537452221}, {"id": 178, "seek": 146004, "start": 1460.04, "end": 1465.3999999999999, "text": " implement the mandatory parts and the optional parts as well, usually. But we can't force anyone,", "tokens": [50364, 4445, 264, 22173, 3166, 293, 264, 17312, 3166, 382, 731, 11, 2673, 13, 583, 321, 393, 380, 3464, 2878, 11, 50632], "temperature": 0.0, "avg_logprob": -0.2107852610146127, "compression_ratio": 1.2945736434108528, "no_speech_prob": 0.0871766209602356}, {"id": 179, "seek": 146004, "start": 1465.3999999999999, "end": 1471.8, "text": " right? All right. Thank you again, Daniel, for that interesting talk.", "tokens": [50632, 558, 30, 1057, 558, 13, 1044, 291, 797, 11, 8033, 11, 337, 300, 1880, 751, 13, 50952], "temperature": 0.0, "avg_logprob": -0.2107852610146127, "compression_ratio": 1.2945736434108528, "no_speech_prob": 0.0871766209602356}], "language": "en"}