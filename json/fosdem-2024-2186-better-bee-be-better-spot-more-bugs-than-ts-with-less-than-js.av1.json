{"text": " Hello everyone. So this is a really tightly talked with a bit ambitious title about a site project of mine. I will explain a bit what site project is about, two parts of the title and explain what I plan to do with it later. So I made a toy programming language for fun, like yeah it's not really original but anyway. I was thinking of it for more than a year now and I have a lot of ideas about stuff to experiment and I start implementing a lot of parts of it but at the end I had no programming language at all. So I decided somehow to send a first-dem talk and to try to do a programming language usable by people. So here I am and I will, I publish online a version where I have a domain name and so this is something I tried to write a few past months that is mostly usable and I can explain why. So the idea is I made a really small programming language and by small I hope it's easy to learn. That helps you to catch a lot of bugs at build time, what most of programming language try to do and I make it kind of looks like JavaScript and target JavaScript because it's more easy to target JavaScript when you do a programming language that targets something else. So it's one of the motivations of it. And so maybe you know that GS is not the perfect programming language. There's a lot of flow. There is one I really hate which is shallow code by default which is you pass something to some place of your program and it's changed behind your back and you don't realize only really after about what's really happened and it's actually painful. There is really weird behavior with every operator that everyone know and talk about. It's not really big issue but still annoying when you try to use it and discover it at the last moment. And there is most painful things about there is a lot of things that should fail that does not really fail and rather return and define and you will really discover it really later in your program and there is a lot of work on JavaScript to make it a better language but the problem is you will still want JavaScript to work with all JavaScript code so there is a lot of duplication in the language like the same things two times but not exactly the same thing because we try to fix where we ever so this is really confusing I believe. And I think JavaScript is actually a good language to have another language transpiled or compiled because it can work anywhere. It's actually quite fast because there is a lot of engineer that worked into making JavaScript fast and that's true JavaScript is run fast on a lot of platform and still there are alternative run times that you have to make JavaScript easily embeddable in other program or use it for other usage on the web. And there is that thing that everyone knows about maybe which is WebAssembly which is the thing that your language should target if you want to go on the web and don't want to work write JavaScript and it's cool, it's fast, it's also cross-platform, it's even know as the fact that you don't really have to manage your memory by hand in WebAssembly because there are no GCs that let you say okay I create object and let's manage the memory like you would do in JavaScript so it's really nice to have a language that built to WebAssembly but there is still few reasons to prefer to target JavaScript than WebAssembly. The one is WebAssembly doesn't work on older browser, it's really nice to have a language when you can do all the hack of the earth because it's really expressive and you try to do a type project programming language, really nice to have all this expressive power. You can get more easy to work with any existing API which is something which is really painful to do in WebAssembly if you already tried WebAssembly you will be aware that it's really hard to interpret WebAssembly code with any other API because you have to do JavaScript glue code and this glue code is not really safe, it's really hard to maintain and this kind of stuff. Having a target language that is familiar and when you can run it into a step by step debugger if you find bugs in your compiler or I mean mine type project and also you can build a term JavaScript to see with something called Quick.js which is actually really cool and so if you have JavaScript you can have native target for free, native backend for free. Maybe you were aware there is a lot of language that already tried to target JavaScript, there's a few of them named here. The one in bold are actually functional language and the one in italic are the ones that try to kind of look like JavaScript and the only one in the list that's really used by a lot of people is TypeScript because that's the one language that accepts the ideas that most of people want to write JavaScript or keep using working on JavaScript code base so I don't know a lot of people that's doing per script for example that look like Askel or Elms that look like to Askel too and that don't look like at all like JavaScript. So what does that mean to make something smaller than JavaScript? It means that I have for example one kind of function which all functions are lambda and an image function, the arrow function. I have one kind of string in the literal not three and the ones that one support string interpolation like you do in JavaScript but all the strings support it so it's more easy. So all this kind of detail like you just take the minimum amount of feature you can implement and try to make a smaller JavaScript and there is kind of the thing that's normally a rather functional language but I kind of implement which is everything return a value so every expression you can put it into another expression because everything should return a value so for example I can assign the result of an if-else branching because the value of an if-else branching is a branch that was executed so you can just say that which makes sometimes the code more compact and easy and something you can do easily in JavaScript because you have to define variables with a default value, reassign the variable in the branch and scan stuff which is painful and I don't have an undefined and just have an empty object which is empty value like when you do something that does not return a value it returns an empty value which is the empty object or record anyway. I have some integration to make it easy to embed into JavaScript and this thing that is that sorry since every file is kind of an expression and every expression is a value every expression is convert to the equivalent JavaScript value so every expression could be compiled and using JavaScript for example I have a function which is compiled to the equivalent JavaScript function and those equivalent things you would expect the function to do and it's kind of expected and I want to speak a bit about some things that's often when you use a lot of programming language we take we start to feel like a lot of behavior are normal and logical but if we really think about it those behavior are not logical at all and for example there are so many different scope rules in JavaScript and many language that does at some point there's too many scope rules it's really counterintuitive for example this is legal in JavaScript you can use a function which is declared later in your program because function are top-level things that can be used anywhere in your programs or order don't count but if you do a lambda if you do an anonymous function it's blockscop so you can't use something before it's defined logical it's not the same mechanism but still we are two mechanisms it's a bit counterintuitive and if we are in object declaration of course you can't use an item of an object within an object because you have to wait for the object to be created fully and you can't call the object within the object because you have to wait the object to be to be declared you can do that it's obviously is legal it seems logical but if we look at function we can use function inside function of course and we can even use value that are declared after function even if function capture the definition site because we set the semantic of JavaScript because JavaScript without harvesting which is function are actually declared in top of your block but only assigned later so and it's also true for const on let keyword so this code will actually work and display a lot of emoji and at some point do a stack overflow of course but this is really counterintuitive that you can you can access a variable here define here it's working function it looks so a lot of different variable so I come with the idea of doing something really more simple which is let's merge the two concept of object and block and say just one thing which is a block could have side effect a block could have value redefined but a block will return the object of the element within it so we just have one kind of brackets that do the two things in one and are one scope rule which is always the same and you don't have to remind four five scoping different scoping rules there is that rules that works for everything it's more smaller language like you just have one block to have instruction and that is also the way to define objects so that kind of one main idea and so other idea it's be is pure and pure it's the world that is so much used for things so many different things that I will be to explain what I mean by that in this context of this talk I mean that when you define a variable and call something else you expect the variable to not have changed because you expect not to have shared mutability like the you don't expect to functions that implicitly change a value of your program you what you expect is to have kind of a guarantee with a value of what it it in B of having whatever you do with the value the value and change and this kind of invariant is kind of things you you you know you will always have it's really cool because it's a lot of stuff I will show later in the presentation but kind of kind of nice to know that to know to whatever I do if I don't reassign x explicitly it cannot be reassigned by another part of the program I can't do that if I want to reassign x I have to return it as a return value of a function it's the only way to reassign it it's to have it at return value not to pass it as implicitly like that so I have a kind of immutability by default so immutability kind of says that when you define a value keeps that value forever but you can redefine value which work bit like mutation and actually is implemented like mutation can redefine things and if you redefine something in a different scope it don't touch to the thing in the upper scope so if you redefine value in sub scope and later call to the value it's the previous value because you you want some modification to be local to don't propagate and that this idea of scoping which is always the same that's applied everywhere which is maybe a bit weird but actually really handy and so the interesting part is about how having a more constrained language makes allow the ability to spot more bugs and I speak a bit about the fact that tabscript sadly have exactly the same flows as JavaScript because it's a superset so for example charm immutability a 4x2 have right correct inference and correct typing here I have an example of bad inference in typescript which is I it's borrowed from the typescript tutorial I should have typescript understandings that's if I want something which is left of right and assign a variable right I should have the right thing but the thing is typescript decide to infer s as a string and not as a left or right and why typescript does that because here we have a let s equal right and not a cost s equal right if you change the let by the cost typescript will correctly infer but since there's shared immutability everywhere typescript can't really know or assume that the value of s will not be changed so it just say okay it will be a string even if you don't change it if you even if you use it right after say it's a string because it's mutable it can change so you don't know it's don't know so so that's kind of among situation where so typescript inference failed and if you have immutability you don't have this kind of error of course and there is also bad typing this code is a bit nasty but the idea if you expect something which is a string or a number and then you check it's a string and then you kind of calling some things that changing the value behind the back of typescript and typescript can detect that because typescript just choose to don't keep track of that and assume you don't do it even if you can do it so this code was compiled it will check with typescript strict typescript strict is hard to say we say there is no no error everything is fine but if you run it every of course at one time you say that's two uppercase is not a function which is annoying I would expect typescript to catch it but in a way I know typescript can't catch it because yeah it's really hard to keep track of every value and and types then can't do that easily so this question is no how I expect types to work in my minimal programming language I've not finished yet and there is an idea that's come from mostly really mathematical language which is called dependent type language which is the idea that types could be values that could be used like a value you can assign like for example here I just say types kind of a function they just say if something is true or false and if it's true it's type and if it falls it don't type it's really natural to understand but then I could use this in my code in to prefix value and say okay let's check if it's work and everything and and this is a really expressive way to say that something is a type because every function could be a type as soon as the function return true or false a boolean value this since there are functions function can be composed so you can for example do structural typing you can for example do union types the things you have in typescript you can do interchange type it's just way to say is it a thing and a thing and a thing or a thing is a thing is a thing and and just comparing value it's not that hard but the thing is you want to run all that computation at run at build time not at run time so you kind of all you you will you will succeed to do that what typically typescript type script can do and the thing is it's more easy because as we see before the execution flow of the language is more predictable there's no shown metability you don't know if a value can be shown by something else and there is a technique that's come from static analysis which is technique which is mostly used to prove that's a language that don't behave correctly still behave correctly this technique for example used to prove that the C program works as expected and in a C program you can do whatever you want so you kind of need a powerful technique so the idea of this technique is typing a program checking a program the build time check is really like running your program you run your program and you check if it failed or if it worked but running a program does not scale because if your program has an infinite loop your check at build time will be infinite or if you do an infinite recursion so you have to change a bit to be aware of your program you have to change a bit of if else work a function call work and you have to change a bit the standard library to to not do print not write file not read file and the idea if you change a bit seems to be fully determined for example random function rather than returning a random number return the range of possible numbers so you know your number will be between zero and five because it's expected to be between zero and five but you don't know what value you you you change value by kind of the what would be the expected value in this case this is really simple and powerful technique but that does not really scale well because if you have a really big program you kind of running a really big program at build time which is problematic and there's a solution to that later in this presentation and I have a little demo of this working yeah so here I have four file but only two of interest I have something in type script which is I have an array of four element I pop an element and try to access the previous last element and obviously it failed and I have the same thing in these that look kind of similar actually parentheses are optional but I put them because it's more looking like JavaScript yeah so two two can do the same thing so if I do it in in type script yeah take a while it's really small file but still type script yeah cool I have an old computer for type script defense and it compile no issue everything fine and if I run it obviously I got in the fine which is not what I I expect here but if I do it with my super cool side project toy compiler I have a really nice error that tell me a lot about what's it is happening here yeah so tell me what's the static value of the array what's happening where how yeah and I work mostly on that on having kind of user friendly error and tries next to make this thing scale well and have more expressivity to explain type so so that's the idea um yeah I'm I'm I'm near the end of the talk so I implement a lot of things like really funny scoping bugs I use three-seater for my grammar which is what use github for syntax creation and analysis of everything on github I have all the things we have in JavaScript like the spread operator or the structuring I have things that does not exist in JavaScript like implicit function argument, hyper-overloading and I have a small standard library where with everything you can expect to to write a program and and I have also a client as I just demonstrate that work without node in your class you don't even need to have JavaScript installed on your computer to make it work I have build targets so you can customize your JavaScript with different compile time variable and you can even use or define have build cache so when you you do yeah it's not a good example because the compilation fail anyway but if your compilation succeeds if you run it several times you just compile only the files that change not the new one I have syntax highlighting not the best but still and I have a lot of things left to do I don't have yet pattern matching I would like to have it for the presentation but I still don't have it so I try to do it soon because it's really nice to kind of destruct your things in function if parameter or yeah anyway so this case where my language looks really too functional like you don't really can't really do while loops you can have forage but you can't have while and because you need kind of mutability to be able to say okay do that until that thing it's no longer valid and and I'm kind of thinking about having a bit of mutability constraint because it solves this problem and there is subtyping because actually with types I as I show them I cannot say that's a type is of another type and it's not that art you but I didn't did it yet because I have keep track of all the type declare and can explain that later if there is question about it and and yeah and there is a lot of things to do and societal is a part-time project but maybe one day it will no longer be a part-time project it's really nice to have a language server protocol maybe you are aware of that debug adapter protocol too it's kind of the language was designed the first place to not compile to JavaScript but to compile to kind of so I made a read me you can try it if you want and that's basically the end of my talk thank you are there any questions yeah so the question was what's programming language parted part theme I use as inspiration was this just JavaScript or something else for example rest or functional programming and the answer is I work in for the asset for an ascal company so I am really a functional programmer indeed and before I was working with rest and I really love rest but I I kind of feeling that trust is not a language for anyone because rest ergonomic make it sometimes really painful to use for writing like most of the program tasks you you want to write in your daily program or life so my first motivation was to try modestly to do a better rest like a rest but that's with maybe more simple rules and more easy to use but still the same kind of guarantee but it's still the idea a bit behind this project but I I like what I said in the beginning of the talk I try to to I try to make something small and hackable in on which I can really experiment if my semantic work in my syntax is is an ambiguous this kind of stuff and it's more easy to have something small that work on which you can experiment and see if it's usable rather than it's a bigger goal I have I had in the beginning which was more inspired by yeah rest or functional programming overall yeah thanks for the question so uh one of the you", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 19.0, "text": " Hello everyone. So this is a really tightly talked with a bit ambitious title about a", "tokens": [50364, 2425, 1518, 13, 407, 341, 307, 257, 534, 21952, 2825, 365, 257, 857, 20239, 4876, 466, 257, 51314], "temperature": 0.0, "avg_logprob": -0.34738434192746187, "compression_ratio": 1.384, "no_speech_prob": 0.19431090354919434}, {"id": 1, "seek": 0, "start": 19.0, "end": 28.84, "text": " site project of mine. I will explain a bit what site project is about, two parts of the", "tokens": [51314, 3621, 1716, 295, 3892, 13, 286, 486, 2903, 257, 857, 437, 3621, 1716, 307, 466, 11, 732, 3166, 295, 264, 51806], "temperature": 0.0, "avg_logprob": -0.34738434192746187, "compression_ratio": 1.384, "no_speech_prob": 0.19431090354919434}, {"id": 2, "seek": 2884, "start": 28.84, "end": 37.64, "text": " title and explain what I plan to do with it later. So I made a toy programming language", "tokens": [50364, 4876, 293, 2903, 437, 286, 1393, 281, 360, 365, 309, 1780, 13, 407, 286, 1027, 257, 12058, 9410, 2856, 50804], "temperature": 0.0, "avg_logprob": -0.25600198386372, "compression_ratio": 1.5027322404371584, "no_speech_prob": 0.01738225854933262}, {"id": 3, "seek": 2884, "start": 37.64, "end": 46.08, "text": " for fun, like yeah it's not really original but anyway. I was thinking of it for more than", "tokens": [50804, 337, 1019, 11, 411, 1338, 309, 311, 406, 534, 3380, 457, 4033, 13, 286, 390, 1953, 295, 309, 337, 544, 813, 51226], "temperature": 0.0, "avg_logprob": -0.25600198386372, "compression_ratio": 1.5027322404371584, "no_speech_prob": 0.01738225854933262}, {"id": 4, "seek": 2884, "start": 46.08, "end": 52.96, "text": " a year now and I have a lot of ideas about stuff to experiment and I start implementing a lot of", "tokens": [51226, 257, 1064, 586, 293, 286, 362, 257, 688, 295, 3487, 466, 1507, 281, 5120, 293, 286, 722, 18114, 257, 688, 295, 51570], "temperature": 0.0, "avg_logprob": -0.25600198386372, "compression_ratio": 1.5027322404371584, "no_speech_prob": 0.01738225854933262}, {"id": 5, "seek": 5296, "start": 52.96, "end": 61.2, "text": " parts of it but at the end I had no programming language at all. So I decided somehow to send", "tokens": [50364, 3166, 295, 309, 457, 412, 264, 917, 286, 632, 572, 9410, 2856, 412, 439, 13, 407, 286, 3047, 6063, 281, 2845, 50776], "temperature": 0.0, "avg_logprob": -0.2977104970853623, "compression_ratio": 1.5635359116022098, "no_speech_prob": 0.02851392701268196}, {"id": 6, "seek": 5296, "start": 61.2, "end": 69.32, "text": " a first-dem talk and to try to do a programming language usable by people. So here I am and I", "tokens": [50776, 257, 700, 12, 10730, 751, 293, 281, 853, 281, 360, 257, 9410, 2856, 29975, 538, 561, 13, 407, 510, 286, 669, 293, 286, 51182], "temperature": 0.0, "avg_logprob": -0.2977104970853623, "compression_ratio": 1.5635359116022098, "no_speech_prob": 0.02851392701268196}, {"id": 7, "seek": 5296, "start": 69.32, "end": 78.84, "text": " will, I publish online a version where I have a domain name and so this is something I tried to", "tokens": [51182, 486, 11, 286, 11374, 2950, 257, 3037, 689, 286, 362, 257, 9274, 1315, 293, 370, 341, 307, 746, 286, 3031, 281, 51658], "temperature": 0.0, "avg_logprob": -0.2977104970853623, "compression_ratio": 1.5635359116022098, "no_speech_prob": 0.02851392701268196}, {"id": 8, "seek": 7884, "start": 78.84, "end": 91.92, "text": " write a few past months that is mostly usable and I can explain why. So the idea is I made a", "tokens": [50364, 2464, 257, 1326, 1791, 2493, 300, 307, 5240, 29975, 293, 286, 393, 2903, 983, 13, 407, 264, 1558, 307, 286, 1027, 257, 51018], "temperature": 0.0, "avg_logprob": -0.21385646192994837, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.01992144249379635}, {"id": 9, "seek": 7884, "start": 91.92, "end": 99.2, "text": " really small programming language and by small I hope it's easy to learn. That helps you to catch a", "tokens": [51018, 534, 1359, 9410, 2856, 293, 538, 1359, 286, 1454, 309, 311, 1858, 281, 1466, 13, 663, 3665, 291, 281, 3745, 257, 51382], "temperature": 0.0, "avg_logprob": -0.21385646192994837, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.01992144249379635}, {"id": 10, "seek": 7884, "start": 99.2, "end": 107.52000000000001, "text": " lot of bugs at build time, what most of programming language try to do and I make it kind of looks", "tokens": [51382, 688, 295, 15120, 412, 1322, 565, 11, 437, 881, 295, 9410, 2856, 853, 281, 360, 293, 286, 652, 309, 733, 295, 1542, 51798], "temperature": 0.0, "avg_logprob": -0.21385646192994837, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.01992144249379635}, {"id": 11, "seek": 10752, "start": 107.64, "end": 113.75999999999999, "text": " like JavaScript and target JavaScript because it's more easy to target JavaScript when you do a", "tokens": [50370, 411, 15778, 293, 3779, 15778, 570, 309, 311, 544, 1858, 281, 3779, 15778, 562, 291, 360, 257, 50676], "temperature": 0.0, "avg_logprob": -0.3068718745790679, "compression_ratio": 1.7671232876712328, "no_speech_prob": 0.04584402218461037}, {"id": 12, "seek": 10752, "start": 113.75999999999999, "end": 123.16, "text": " programming language that targets something else. So it's one of the motivations of it. And so maybe", "tokens": [50676, 9410, 2856, 300, 12911, 746, 1646, 13, 407, 309, 311, 472, 295, 264, 39034, 295, 309, 13, 400, 370, 1310, 51146], "temperature": 0.0, "avg_logprob": -0.3068718745790679, "compression_ratio": 1.7671232876712328, "no_speech_prob": 0.04584402218461037}, {"id": 13, "seek": 10752, "start": 123.16, "end": 129.32, "text": " you know that GS is not the perfect programming language. There's a lot of flow. There is one I", "tokens": [51146, 291, 458, 300, 32047, 307, 406, 264, 2176, 9410, 2856, 13, 821, 311, 257, 688, 295, 3095, 13, 821, 307, 472, 286, 51454], "temperature": 0.0, "avg_logprob": -0.3068718745790679, "compression_ratio": 1.7671232876712328, "no_speech_prob": 0.04584402218461037}, {"id": 14, "seek": 10752, "start": 129.32, "end": 136.28, "text": " really hate which is shallow code by default which is you pass something to some place of your", "tokens": [51454, 534, 4700, 597, 307, 20488, 3089, 538, 7576, 597, 307, 291, 1320, 746, 281, 512, 1081, 295, 428, 51802], "temperature": 0.0, "avg_logprob": -0.3068718745790679, "compression_ratio": 1.7671232876712328, "no_speech_prob": 0.04584402218461037}, {"id": 15, "seek": 13628, "start": 136.52, "end": 143.8, "text": " program and it's changed behind your back and you don't realize only really after about what's", "tokens": [50376, 1461, 293, 309, 311, 3105, 2261, 428, 646, 293, 291, 500, 380, 4325, 787, 534, 934, 466, 437, 311, 50740], "temperature": 0.0, "avg_logprob": -0.26207425044133115, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.019047077745199203}, {"id": 16, "seek": 13628, "start": 143.8, "end": 152.48, "text": " really happened and it's actually painful. There is really weird behavior with every operator that", "tokens": [50740, 534, 2011, 293, 309, 311, 767, 11697, 13, 821, 307, 534, 3657, 5223, 365, 633, 12973, 300, 51174], "temperature": 0.0, "avg_logprob": -0.26207425044133115, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.019047077745199203}, {"id": 17, "seek": 13628, "start": 152.48, "end": 158.52, "text": " everyone know and talk about. It's not really big issue but still annoying when you try to use it", "tokens": [51174, 1518, 458, 293, 751, 466, 13, 467, 311, 406, 534, 955, 2734, 457, 920, 11304, 562, 291, 853, 281, 764, 309, 51476], "temperature": 0.0, "avg_logprob": -0.26207425044133115, "compression_ratio": 1.5901639344262295, "no_speech_prob": 0.019047077745199203}, {"id": 18, "seek": 15852, "start": 158.76000000000002, "end": 166.96, "text": " and discover it at the last moment. And there is most painful things about there is a lot of things", "tokens": [50376, 293, 4411, 309, 412, 264, 1036, 1623, 13, 400, 456, 307, 881, 11697, 721, 466, 456, 307, 257, 688, 295, 721, 50786], "temperature": 0.0, "avg_logprob": -0.3011136282057989, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.10411430150270462}, {"id": 19, "seek": 15852, "start": 166.96, "end": 170.84, "text": " that should fail that does not really fail and rather return and define and you will really", "tokens": [50786, 300, 820, 3061, 300, 775, 406, 534, 3061, 293, 2831, 2736, 293, 6964, 293, 291, 486, 534, 50980], "temperature": 0.0, "avg_logprob": -0.3011136282057989, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.10411430150270462}, {"id": 20, "seek": 15852, "start": 170.84, "end": 177.76000000000002, "text": " discover it really later in your program and there is a lot of work on JavaScript to make it a", "tokens": [50980, 4411, 309, 534, 1780, 294, 428, 1461, 293, 456, 307, 257, 688, 295, 589, 322, 15778, 281, 652, 309, 257, 51326], "temperature": 0.0, "avg_logprob": -0.3011136282057989, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.10411430150270462}, {"id": 21, "seek": 15852, "start": 177.76000000000002, "end": 181.96, "text": " better language but the problem is you will still want JavaScript to work with all JavaScript", "tokens": [51326, 1101, 2856, 457, 264, 1154, 307, 291, 486, 920, 528, 15778, 281, 589, 365, 439, 15778, 51536], "temperature": 0.0, "avg_logprob": -0.3011136282057989, "compression_ratio": 1.8446601941747574, "no_speech_prob": 0.10411430150270462}, {"id": 22, "seek": 18196, "start": 182.4, "end": 189.4, "text": " code so there is a lot of duplication in the language like the same things two times but not", "tokens": [50386, 3089, 370, 456, 307, 257, 688, 295, 17154, 399, 294, 264, 2856, 411, 264, 912, 721, 732, 1413, 457, 406, 50736], "temperature": 0.0, "avg_logprob": -0.2932910919189453, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.014888815581798553}, {"id": 23, "seek": 18196, "start": 189.4, "end": 197.08, "text": " exactly the same thing because we try to fix where we ever so this is really confusing I believe.", "tokens": [50736, 2293, 264, 912, 551, 570, 321, 853, 281, 3191, 689, 321, 1562, 370, 341, 307, 534, 13181, 286, 1697, 13, 51120], "temperature": 0.0, "avg_logprob": -0.2932910919189453, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.014888815581798553}, {"id": 24, "seek": 18196, "start": 197.08, "end": 205.20000000000002, "text": " And I think JavaScript is actually a good language to have another language", "tokens": [51120, 400, 286, 519, 15778, 307, 767, 257, 665, 2856, 281, 362, 1071, 2856, 51526], "temperature": 0.0, "avg_logprob": -0.2932910919189453, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.014888815581798553}, {"id": 25, "seek": 20520, "start": 206.2, "end": 214.2, "text": " transpiled or compiled because it can work anywhere. It's actually quite fast because there is a lot", "tokens": [50414, 7132, 7292, 420, 36548, 570, 309, 393, 589, 4992, 13, 467, 311, 767, 1596, 2370, 570, 456, 307, 257, 688, 50814], "temperature": 0.0, "avg_logprob": -0.3172143300374349, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.016263926401734352}, {"id": 26, "seek": 20520, "start": 214.2, "end": 220.51999999999998, "text": " of engineer that worked into making JavaScript fast and that's true JavaScript is run fast", "tokens": [50814, 295, 11403, 300, 2732, 666, 1455, 15778, 2370, 293, 300, 311, 2074, 15778, 307, 1190, 2370, 51130], "temperature": 0.0, "avg_logprob": -0.3172143300374349, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.016263926401734352}, {"id": 27, "seek": 20520, "start": 220.51999999999998, "end": 227.28, "text": " on a lot of platform and still there are alternative run times that you have to make", "tokens": [51130, 322, 257, 688, 295, 3663, 293, 920, 456, 366, 8535, 1190, 1413, 300, 291, 362, 281, 652, 51468], "temperature": 0.0, "avg_logprob": -0.3172143300374349, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.016263926401734352}, {"id": 28, "seek": 20520, "start": 227.28, "end": 233.28, "text": " JavaScript easily embeddable in other program or use it for other usage on the web.", "tokens": [51468, 15778, 3612, 12240, 67, 712, 294, 661, 1461, 420, 764, 309, 337, 661, 14924, 322, 264, 3670, 13, 51768], "temperature": 0.0, "avg_logprob": -0.3172143300374349, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.016263926401734352}, {"id": 29, "seek": 23328, "start": 234.28, "end": 240.72, "text": " And there is that thing that everyone knows about maybe which is WebAssembly which is the", "tokens": [50414, 400, 456, 307, 300, 551, 300, 1518, 3255, 466, 1310, 597, 307, 9573, 10884, 19160, 597, 307, 264, 50736], "temperature": 0.0, "avg_logprob": -0.24924826286208462, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.012148435227572918}, {"id": 30, "seek": 23328, "start": 240.72, "end": 246.92000000000002, "text": " thing that your language should target if you want to go on the web and don't want to work", "tokens": [50736, 551, 300, 428, 2856, 820, 3779, 498, 291, 528, 281, 352, 322, 264, 3670, 293, 500, 380, 528, 281, 589, 51046], "temperature": 0.0, "avg_logprob": -0.24924826286208462, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.012148435227572918}, {"id": 31, "seek": 23328, "start": 246.92000000000002, "end": 257.48, "text": " write JavaScript and it's cool, it's fast, it's also cross-platform, it's even know as the", "tokens": [51046, 2464, 15778, 293, 309, 311, 1627, 11, 309, 311, 2370, 11, 309, 311, 611, 3278, 12, 39975, 837, 11, 309, 311, 754, 458, 382, 264, 51574], "temperature": 0.0, "avg_logprob": -0.24924826286208462, "compression_ratio": 1.5755813953488371, "no_speech_prob": 0.012148435227572918}, {"id": 32, "seek": 25748, "start": 257.48, "end": 265.8, "text": " fact that you don't really have to manage your memory by hand in WebAssembly because there are no", "tokens": [50364, 1186, 300, 291, 500, 380, 534, 362, 281, 3067, 428, 4675, 538, 1011, 294, 9573, 10884, 19160, 570, 456, 366, 572, 50780], "temperature": 0.0, "avg_logprob": -0.22524544890497772, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.017013011500239372}, {"id": 33, "seek": 25748, "start": 265.8, "end": 274.96000000000004, "text": " GCs that let you say okay I create object and let's manage the memory like you would do in", "tokens": [50780, 29435, 82, 300, 718, 291, 584, 1392, 286, 1884, 2657, 293, 718, 311, 3067, 264, 4675, 411, 291, 576, 360, 294, 51238], "temperature": 0.0, "avg_logprob": -0.22524544890497772, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.017013011500239372}, {"id": 34, "seek": 25748, "start": 274.96000000000004, "end": 282.16, "text": " JavaScript so it's really nice to have a language that built to WebAssembly but there is still few", "tokens": [51238, 15778, 370, 309, 311, 534, 1481, 281, 362, 257, 2856, 300, 3094, 281, 9573, 10884, 19160, 457, 456, 307, 920, 1326, 51598], "temperature": 0.0, "avg_logprob": -0.22524544890497772, "compression_ratio": 1.5944444444444446, "no_speech_prob": 0.017013011500239372}, {"id": 35, "seek": 28216, "start": 282.20000000000005, "end": 287.88000000000005, "text": " reasons to prefer to target JavaScript than WebAssembly. The one is WebAssembly doesn't work", "tokens": [50366, 4112, 281, 4382, 281, 3779, 15778, 813, 9573, 10884, 19160, 13, 440, 472, 307, 9573, 10884, 19160, 1177, 380, 589, 50650], "temperature": 0.0, "avg_logprob": -0.28068874099037866, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.01572115533053875}, {"id": 36, "seek": 28216, "start": 287.88000000000005, "end": 294.96000000000004, "text": " on older browser, it's really nice to have a language when you can do all the hack of the earth", "tokens": [50650, 322, 4906, 11185, 11, 309, 311, 534, 1481, 281, 362, 257, 2856, 562, 291, 393, 360, 439, 264, 10339, 295, 264, 4120, 51004], "temperature": 0.0, "avg_logprob": -0.28068874099037866, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.01572115533053875}, {"id": 37, "seek": 28216, "start": 294.96000000000004, "end": 301.24, "text": " because it's really expressive and you try to do a type project programming language,", "tokens": [51004, 570, 309, 311, 534, 40189, 293, 291, 853, 281, 360, 257, 2010, 1716, 9410, 2856, 11, 51318], "temperature": 0.0, "avg_logprob": -0.28068874099037866, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.01572115533053875}, {"id": 38, "seek": 28216, "start": 301.24, "end": 311.68, "text": " really nice to have all this expressive power. You can get more easy to work with any existing API", "tokens": [51318, 534, 1481, 281, 362, 439, 341, 40189, 1347, 13, 509, 393, 483, 544, 1858, 281, 589, 365, 604, 6741, 9362, 51840], "temperature": 0.0, "avg_logprob": -0.28068874099037866, "compression_ratio": 1.6651785714285714, "no_speech_prob": 0.01572115533053875}, {"id": 39, "seek": 31168, "start": 312.6, "end": 317.44, "text": " which is something which is really painful to do in WebAssembly if you already tried WebAssembly you", "tokens": [50410, 597, 307, 746, 597, 307, 534, 11697, 281, 360, 294, 9573, 10884, 19160, 498, 291, 1217, 3031, 9573, 10884, 19160, 291, 50652], "temperature": 0.0, "avg_logprob": -0.24126266151346187, "compression_ratio": 1.720524017467249, "no_speech_prob": 0.011014376766979694}, {"id": 40, "seek": 31168, "start": 317.44, "end": 323.36, "text": " will be aware that it's really hard to interpret WebAssembly code with any other API because you", "tokens": [50652, 486, 312, 3650, 300, 309, 311, 534, 1152, 281, 7302, 9573, 10884, 19160, 3089, 365, 604, 661, 9362, 570, 291, 50948], "temperature": 0.0, "avg_logprob": -0.24126266151346187, "compression_ratio": 1.720524017467249, "no_speech_prob": 0.011014376766979694}, {"id": 41, "seek": 31168, "start": 323.36, "end": 329.76, "text": " have to do JavaScript glue code and this glue code is not really safe, it's really hard to maintain", "tokens": [50948, 362, 281, 360, 15778, 8998, 3089, 293, 341, 8998, 3089, 307, 406, 534, 3273, 11, 309, 311, 534, 1152, 281, 6909, 51268], "temperature": 0.0, "avg_logprob": -0.24126266151346187, "compression_ratio": 1.720524017467249, "no_speech_prob": 0.011014376766979694}, {"id": 42, "seek": 31168, "start": 329.76, "end": 337.88, "text": " and this kind of stuff. Having a target language that is familiar and when you can run it into a", "tokens": [51268, 293, 341, 733, 295, 1507, 13, 10222, 257, 3779, 2856, 300, 307, 4963, 293, 562, 291, 393, 1190, 309, 666, 257, 51674], "temperature": 0.0, "avg_logprob": -0.24126266151346187, "compression_ratio": 1.720524017467249, "no_speech_prob": 0.011014376766979694}, {"id": 43, "seek": 33788, "start": 337.88, "end": 344.96, "text": " step by step debugger if you find bugs in your compiler or I mean mine type project and also you", "tokens": [50364, 1823, 538, 1823, 24083, 1321, 498, 291, 915, 15120, 294, 428, 31958, 420, 286, 914, 3892, 2010, 1716, 293, 611, 291, 50718], "temperature": 0.0, "avg_logprob": -0.34172871533562155, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.008479561656713486}, {"id": 44, "seek": 33788, "start": 344.96, "end": 352.84, "text": " can build a term JavaScript to see with something called Quick.js which is actually really cool and", "tokens": [50718, 393, 1322, 257, 1433, 15778, 281, 536, 365, 746, 1219, 12101, 13, 25530, 597, 307, 767, 534, 1627, 293, 51112], "temperature": 0.0, "avg_logprob": -0.34172871533562155, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.008479561656713486}, {"id": 45, "seek": 33788, "start": 352.84, "end": 362.08, "text": " so if you have JavaScript you can have native target for free, native backend for free. Maybe you", "tokens": [51112, 370, 498, 291, 362, 15778, 291, 393, 362, 8470, 3779, 337, 1737, 11, 8470, 38087, 337, 1737, 13, 2704, 291, 51574], "temperature": 0.0, "avg_logprob": -0.34172871533562155, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.008479561656713486}, {"id": 46, "seek": 36208, "start": 362.12, "end": 368.08, "text": " were aware there is a lot of language that already tried to target JavaScript, there's a few of them", "tokens": [50366, 645, 3650, 456, 307, 257, 688, 295, 2856, 300, 1217, 3031, 281, 3779, 15778, 11, 456, 311, 257, 1326, 295, 552, 50664], "temperature": 0.0, "avg_logprob": -0.22962609157767347, "compression_ratio": 1.8685446009389672, "no_speech_prob": 0.05229556933045387}, {"id": 47, "seek": 36208, "start": 368.08, "end": 377.08, "text": " named here. The one in bold are actually functional language and the one in italic are the ones that", "tokens": [50664, 4926, 510, 13, 440, 472, 294, 11928, 366, 767, 11745, 2856, 293, 264, 472, 294, 22366, 299, 366, 264, 2306, 300, 51114], "temperature": 0.0, "avg_logprob": -0.22962609157767347, "compression_ratio": 1.8685446009389672, "no_speech_prob": 0.05229556933045387}, {"id": 48, "seek": 36208, "start": 377.08, "end": 385.4, "text": " try to kind of look like JavaScript and the only one in the list that's really used by a lot of", "tokens": [51114, 853, 281, 733, 295, 574, 411, 15778, 293, 264, 787, 472, 294, 264, 1329, 300, 311, 534, 1143, 538, 257, 688, 295, 51530], "temperature": 0.0, "avg_logprob": -0.22962609157767347, "compression_ratio": 1.8685446009389672, "no_speech_prob": 0.05229556933045387}, {"id": 49, "seek": 36208, "start": 385.4, "end": 390.28, "text": " people is TypeScript because that's the one language that accepts the ideas that most of people want", "tokens": [51530, 561, 307, 15576, 14237, 570, 300, 311, 264, 472, 2856, 300, 33538, 264, 3487, 300, 881, 295, 561, 528, 51774], "temperature": 0.0, "avg_logprob": -0.22962609157767347, "compression_ratio": 1.8685446009389672, "no_speech_prob": 0.05229556933045387}, {"id": 50, "seek": 39028, "start": 390.47999999999996, "end": 398.91999999999996, "text": " to write JavaScript or keep using working on JavaScript code base so I don't know a lot of people", "tokens": [50374, 281, 2464, 15778, 420, 1066, 1228, 1364, 322, 15778, 3089, 3096, 370, 286, 500, 380, 458, 257, 688, 295, 561, 50796], "temperature": 0.0, "avg_logprob": -0.2702845059908353, "compression_ratio": 1.8396226415094339, "no_speech_prob": 0.012893485836684704}, {"id": 51, "seek": 39028, "start": 398.91999999999996, "end": 405.84, "text": " that's doing per script for example that look like Askel or Elms that look like to Askel too and", "tokens": [50796, 300, 311, 884, 680, 5755, 337, 1365, 300, 574, 411, 1018, 7124, 420, 2699, 2592, 300, 574, 411, 281, 1018, 7124, 886, 293, 51142], "temperature": 0.0, "avg_logprob": -0.2702845059908353, "compression_ratio": 1.8396226415094339, "no_speech_prob": 0.012893485836684704}, {"id": 52, "seek": 39028, "start": 405.84, "end": 413.96, "text": " that don't look like at all like JavaScript. So what does that mean to make something smaller than", "tokens": [51142, 300, 500, 380, 574, 411, 412, 439, 411, 15778, 13, 407, 437, 775, 300, 914, 281, 652, 746, 4356, 813, 51548], "temperature": 0.0, "avg_logprob": -0.2702845059908353, "compression_ratio": 1.8396226415094339, "no_speech_prob": 0.012893485836684704}, {"id": 53, "seek": 39028, "start": 413.96, "end": 418.4, "text": " JavaScript? It means that I have for example one kind of function which all functions are lambda", "tokens": [51548, 15778, 30, 467, 1355, 300, 286, 362, 337, 1365, 472, 733, 295, 2445, 597, 439, 6828, 366, 13607, 51770], "temperature": 0.0, "avg_logprob": -0.2702845059908353, "compression_ratio": 1.8396226415094339, "no_speech_prob": 0.012893485836684704}, {"id": 54, "seek": 41840, "start": 418.4, "end": 423.88, "text": " and an image function, the arrow function. I have one kind of string in the literal not three and", "tokens": [50364, 293, 364, 3256, 2445, 11, 264, 11610, 2445, 13, 286, 362, 472, 733, 295, 6798, 294, 264, 20411, 406, 1045, 293, 50638], "temperature": 0.0, "avg_logprob": -0.3536415757804081, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0031604603864252567}, {"id": 55, "seek": 41840, "start": 423.88, "end": 429.08, "text": " the ones that one support string interpolation like you do in JavaScript but all the strings", "tokens": [50638, 264, 2306, 300, 472, 1406, 6798, 44902, 399, 411, 291, 360, 294, 15778, 457, 439, 264, 13985, 50898], "temperature": 0.0, "avg_logprob": -0.3536415757804081, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0031604603864252567}, {"id": 56, "seek": 41840, "start": 429.08, "end": 435.35999999999996, "text": " support it so it's more easy. So all this kind of detail like you just take the minimum amount of", "tokens": [50898, 1406, 309, 370, 309, 311, 544, 1858, 13, 407, 439, 341, 733, 295, 2607, 411, 291, 445, 747, 264, 7285, 2372, 295, 51212], "temperature": 0.0, "avg_logprob": -0.3536415757804081, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0031604603864252567}, {"id": 57, "seek": 41840, "start": 435.35999999999996, "end": 442.91999999999996, "text": " feature you can implement and try to make a smaller JavaScript and there is kind of the", "tokens": [51212, 4111, 291, 393, 4445, 293, 853, 281, 652, 257, 4356, 15778, 293, 456, 307, 733, 295, 264, 51590], "temperature": 0.0, "avg_logprob": -0.3536415757804081, "compression_ratio": 1.7819905213270142, "no_speech_prob": 0.0031604603864252567}, {"id": 58, "seek": 44292, "start": 442.96000000000004, "end": 449.64000000000004, "text": " thing that's normally a rather functional language but I kind of implement which is everything return", "tokens": [50366, 551, 300, 311, 5646, 257, 2831, 11745, 2856, 457, 286, 733, 295, 4445, 597, 307, 1203, 2736, 50700], "temperature": 0.0, "avg_logprob": -0.2238630915797034, "compression_ratio": 1.8202764976958525, "no_speech_prob": 0.012592963874340057}, {"id": 59, "seek": 44292, "start": 449.64000000000004, "end": 455.92, "text": " a value so every expression you can put it into another expression because everything should return", "tokens": [50700, 257, 2158, 370, 633, 6114, 291, 393, 829, 309, 666, 1071, 6114, 570, 1203, 820, 2736, 51014], "temperature": 0.0, "avg_logprob": -0.2238630915797034, "compression_ratio": 1.8202764976958525, "no_speech_prob": 0.012592963874340057}, {"id": 60, "seek": 44292, "start": 455.92, "end": 463.32, "text": " a value so for example I can assign the result of an if-else branching because the value of an", "tokens": [51014, 257, 2158, 370, 337, 1365, 286, 393, 6269, 264, 1874, 295, 364, 498, 12, 44408, 9819, 278, 570, 264, 2158, 295, 364, 51384], "temperature": 0.0, "avg_logprob": -0.2238630915797034, "compression_ratio": 1.8202764976958525, "no_speech_prob": 0.012592963874340057}, {"id": 61, "seek": 44292, "start": 463.32, "end": 469.20000000000005, "text": " if-else branching is a branch that was executed so you can just say that which makes sometimes the", "tokens": [51384, 498, 12, 44408, 9819, 278, 307, 257, 9819, 300, 390, 17577, 370, 291, 393, 445, 584, 300, 597, 1669, 2171, 264, 51678], "temperature": 0.0, "avg_logprob": -0.2238630915797034, "compression_ratio": 1.8202764976958525, "no_speech_prob": 0.012592963874340057}, {"id": 62, "seek": 46920, "start": 469.2, "end": 475.36, "text": " code more compact and easy and something you can do easily in JavaScript because you have to define", "tokens": [50364, 3089, 544, 14679, 293, 1858, 293, 746, 291, 393, 360, 3612, 294, 15778, 570, 291, 362, 281, 6964, 50672], "temperature": 0.0, "avg_logprob": -0.24925484818019225, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.010255683213472366}, {"id": 63, "seek": 46920, "start": 475.36, "end": 481.64, "text": " variables with a default value, reassign the variable in the branch and scan stuff which is painful", "tokens": [50672, 9102, 365, 257, 7576, 2158, 11, 19486, 788, 264, 7006, 294, 264, 9819, 293, 11049, 1507, 597, 307, 11697, 50986], "temperature": 0.0, "avg_logprob": -0.24925484818019225, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.010255683213472366}, {"id": 64, "seek": 46920, "start": 481.64, "end": 488.24, "text": " and I don't have an undefined and just have an empty object which is empty value like when you do", "tokens": [50986, 293, 286, 500, 380, 362, 364, 674, 5666, 2001, 293, 445, 362, 364, 6707, 2657, 597, 307, 6707, 2158, 411, 562, 291, 360, 51316], "temperature": 0.0, "avg_logprob": -0.24925484818019225, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.010255683213472366}, {"id": 65, "seek": 46920, "start": 488.24, "end": 493.32, "text": " something that does not return a value it returns an empty value which is the empty object or record", "tokens": [51316, 746, 300, 775, 406, 2736, 257, 2158, 309, 11247, 364, 6707, 2158, 597, 307, 264, 6707, 2657, 420, 2136, 51570], "temperature": 0.0, "avg_logprob": -0.24925484818019225, "compression_ratio": 1.817351598173516, "no_speech_prob": 0.010255683213472366}, {"id": 66, "seek": 49332, "start": 493.36, "end": 503.56, "text": " anyway. I have some integration to make it easy to embed into JavaScript and this thing that is that", "tokens": [50366, 4033, 13, 286, 362, 512, 10980, 281, 652, 309, 1858, 281, 12240, 666, 15778, 293, 341, 551, 300, 307, 300, 50876], "temperature": 0.0, "avg_logprob": -0.26973600387573243, "compression_ratio": 1.7425149700598803, "no_speech_prob": 0.004412866197526455}, {"id": 67, "seek": 49332, "start": 503.56, "end": 513.2, "text": " sorry since every file is kind of an expression and every expression is a value every expression is", "tokens": [50876, 2597, 1670, 633, 3991, 307, 733, 295, 364, 6114, 293, 633, 6114, 307, 257, 2158, 633, 6114, 307, 51358], "temperature": 0.0, "avg_logprob": -0.26973600387573243, "compression_ratio": 1.7425149700598803, "no_speech_prob": 0.004412866197526455}, {"id": 68, "seek": 49332, "start": 513.2, "end": 518.52, "text": " convert to the equivalent JavaScript value so every expression could be compiled and using", "tokens": [51358, 7620, 281, 264, 10344, 15778, 2158, 370, 633, 6114, 727, 312, 36548, 293, 1228, 51624], "temperature": 0.0, "avg_logprob": -0.26973600387573243, "compression_ratio": 1.7425149700598803, "no_speech_prob": 0.004412866197526455}, {"id": 69, "seek": 51852, "start": 518.56, "end": 524.1999999999999, "text": " JavaScript for example I have a function which is compiled to the equivalent JavaScript function", "tokens": [50366, 15778, 337, 1365, 286, 362, 257, 2445, 597, 307, 36548, 281, 264, 10344, 15778, 2445, 50648], "temperature": 0.0, "avg_logprob": -0.15146529485308935, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.007116597145795822}, {"id": 70, "seek": 51852, "start": 524.1999999999999, "end": 535.92, "text": " and those equivalent things you would expect the function to do and it's kind of expected and I want", "tokens": [50648, 293, 729, 10344, 721, 291, 576, 2066, 264, 2445, 281, 360, 293, 309, 311, 733, 295, 5176, 293, 286, 528, 51234], "temperature": 0.0, "avg_logprob": -0.15146529485308935, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.007116597145795822}, {"id": 71, "seek": 51852, "start": 535.92, "end": 541.1999999999999, "text": " to speak a bit about some things that's often when you use a lot of programming language we take", "tokens": [51234, 281, 1710, 257, 857, 466, 512, 721, 300, 311, 2049, 562, 291, 764, 257, 688, 295, 9410, 2856, 321, 747, 51498], "temperature": 0.0, "avg_logprob": -0.15146529485308935, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.007116597145795822}, {"id": 72, "seek": 54120, "start": 542.1600000000001, "end": 554.9200000000001, "text": " we start to feel like a lot of behavior are normal and logical but if we really think about it those", "tokens": [50412, 321, 722, 281, 841, 411, 257, 688, 295, 5223, 366, 2710, 293, 14978, 457, 498, 321, 534, 519, 466, 309, 729, 51050], "temperature": 0.0, "avg_logprob": -0.23570121935944058, "compression_ratio": 1.6685082872928176, "no_speech_prob": 0.01284374576061964}, {"id": 73, "seek": 54120, "start": 554.9200000000001, "end": 560.12, "text": " behavior are not logical at all and for example there are so many different scope rules in JavaScript", "tokens": [51050, 5223, 366, 406, 14978, 412, 439, 293, 337, 1365, 456, 366, 370, 867, 819, 11923, 4474, 294, 15778, 51310], "temperature": 0.0, "avg_logprob": -0.23570121935944058, "compression_ratio": 1.6685082872928176, "no_speech_prob": 0.01284374576061964}, {"id": 74, "seek": 54120, "start": 560.12, "end": 565.8000000000001, "text": " and many language that does at some point there's too many scope rules it's really counterintuitive", "tokens": [51310, 293, 867, 2856, 300, 775, 412, 512, 935, 456, 311, 886, 867, 11923, 4474, 309, 311, 534, 5682, 686, 48314, 51594], "temperature": 0.0, "avg_logprob": -0.23570121935944058, "compression_ratio": 1.6685082872928176, "no_speech_prob": 0.01284374576061964}, {"id": 75, "seek": 56580, "start": 566.4, "end": 572.68, "text": " for example this is legal in JavaScript you can use a function which is declared later in your", "tokens": [50394, 337, 1365, 341, 307, 5089, 294, 15778, 291, 393, 764, 257, 2445, 597, 307, 15489, 1780, 294, 428, 50708], "temperature": 0.0, "avg_logprob": -0.20732465283624057, "compression_ratio": 1.68, "no_speech_prob": 0.003666054457426071}, {"id": 76, "seek": 56580, "start": 572.68, "end": 579.4799999999999, "text": " program because function are top-level things that can be used anywhere in your programs or", "tokens": [50708, 1461, 570, 2445, 366, 1192, 12, 12418, 721, 300, 393, 312, 1143, 4992, 294, 428, 4268, 420, 51048], "temperature": 0.0, "avg_logprob": -0.20732465283624057, "compression_ratio": 1.68, "no_speech_prob": 0.003666054457426071}, {"id": 77, "seek": 56580, "start": 579.4799999999999, "end": 586.5999999999999, "text": " order don't count but if you do a lambda if you do an anonymous function it's blockscop so you", "tokens": [51048, 1668, 500, 380, 1207, 457, 498, 291, 360, 257, 13607, 498, 291, 360, 364, 24932, 2445, 309, 311, 8474, 13084, 370, 291, 51404], "temperature": 0.0, "avg_logprob": -0.20732465283624057, "compression_ratio": 1.68, "no_speech_prob": 0.003666054457426071}, {"id": 78, "seek": 56580, "start": 586.5999999999999, "end": 593.7199999999999, "text": " can't use something before it's defined logical it's not the same mechanism but still we are two", "tokens": [51404, 393, 380, 764, 746, 949, 309, 311, 7642, 14978, 309, 311, 406, 264, 912, 7513, 457, 920, 321, 366, 732, 51760], "temperature": 0.0, "avg_logprob": -0.20732465283624057, "compression_ratio": 1.68, "no_speech_prob": 0.003666054457426071}, {"id": 79, "seek": 59372, "start": 593.76, "end": 600.1600000000001, "text": " mechanisms it's a bit counterintuitive and if we are in object declaration of course you can't use", "tokens": [50366, 15902, 309, 311, 257, 857, 5682, 686, 48314, 293, 498, 321, 366, 294, 2657, 27606, 295, 1164, 291, 393, 380, 764, 50686], "temperature": 0.0, "avg_logprob": -0.14857011256010635, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.007025451865047216}, {"id": 80, "seek": 59372, "start": 600.1600000000001, "end": 606.28, "text": " an item of an object within an object because you have to wait for the object to be created fully", "tokens": [50686, 364, 3174, 295, 364, 2657, 1951, 364, 2657, 570, 291, 362, 281, 1699, 337, 264, 2657, 281, 312, 2942, 4498, 50992], "temperature": 0.0, "avg_logprob": -0.14857011256010635, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.007025451865047216}, {"id": 81, "seek": 59372, "start": 606.28, "end": 612.4, "text": " and you can't call the object within the object because you have to wait the object to be to be", "tokens": [50992, 293, 291, 393, 380, 818, 264, 2657, 1951, 264, 2657, 570, 291, 362, 281, 1699, 264, 2657, 281, 312, 281, 312, 51298], "temperature": 0.0, "avg_logprob": -0.14857011256010635, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.007025451865047216}, {"id": 82, "seek": 59372, "start": 612.4, "end": 618.28, "text": " declared you can do that it's obviously is legal it seems logical but if we look at function we", "tokens": [51298, 15489, 291, 393, 360, 300, 309, 311, 2745, 307, 5089, 309, 2544, 14978, 457, 498, 321, 574, 412, 2445, 321, 51592], "temperature": 0.0, "avg_logprob": -0.14857011256010635, "compression_ratio": 1.9795918367346939, "no_speech_prob": 0.007025451865047216}, {"id": 83, "seek": 61828, "start": 618.3199999999999, "end": 625.6, "text": " can use function inside function of course and we can even use value that are declared after", "tokens": [50366, 393, 764, 2445, 1854, 2445, 295, 1164, 293, 321, 393, 754, 764, 2158, 300, 366, 15489, 934, 50730], "temperature": 0.0, "avg_logprob": -0.2630503765948407, "compression_ratio": 1.7824074074074074, "no_speech_prob": 0.003048527054488659}, {"id": 84, "seek": 61828, "start": 625.6, "end": 631.28, "text": " function even if function capture the definition site because we set the semantic of JavaScript", "tokens": [50730, 2445, 754, 498, 2445, 7983, 264, 7123, 3621, 570, 321, 992, 264, 47982, 295, 15778, 51014], "temperature": 0.0, "avg_logprob": -0.2630503765948407, "compression_ratio": 1.7824074074074074, "no_speech_prob": 0.003048527054488659}, {"id": 85, "seek": 61828, "start": 631.28, "end": 638.4, "text": " because JavaScript without harvesting which is function are actually declared in top of your block", "tokens": [51014, 570, 15778, 1553, 35679, 597, 307, 2445, 366, 767, 15489, 294, 1192, 295, 428, 3461, 51370], "temperature": 0.0, "avg_logprob": -0.2630503765948407, "compression_ratio": 1.7824074074074074, "no_speech_prob": 0.003048527054488659}, {"id": 86, "seek": 61828, "start": 638.4, "end": 646.4, "text": " but only assigned later so and it's also true for const on let keyword so this code will actually", "tokens": [51370, 457, 787, 13279, 1780, 370, 293, 309, 311, 611, 2074, 337, 1817, 322, 718, 20428, 370, 341, 3089, 486, 767, 51770], "temperature": 0.0, "avg_logprob": -0.2630503765948407, "compression_ratio": 1.7824074074074074, "no_speech_prob": 0.003048527054488659}, {"id": 87, "seek": 64640, "start": 646.4399999999999, "end": 653.0, "text": " work and display a lot of emoji and at some point do a stack overflow of course but this is really", "tokens": [50366, 589, 293, 4674, 257, 688, 295, 31595, 293, 412, 512, 935, 360, 257, 8630, 37772, 295, 1164, 457, 341, 307, 534, 50694], "temperature": 0.0, "avg_logprob": -0.23110021244395862, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.004918619059026241}, {"id": 88, "seek": 64640, "start": 653.0, "end": 658.24, "text": " counterintuitive that you can you can access a variable here define here it's working function", "tokens": [50694, 5682, 686, 48314, 300, 291, 393, 291, 393, 2105, 257, 7006, 510, 6964, 510, 309, 311, 1364, 2445, 50956], "temperature": 0.0, "avg_logprob": -0.23110021244395862, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.004918619059026241}, {"id": 89, "seek": 64640, "start": 658.24, "end": 663.1999999999999, "text": " it looks so a lot of different variable so I come with the idea of doing something really more", "tokens": [50956, 309, 1542, 370, 257, 688, 295, 819, 7006, 370, 286, 808, 365, 264, 1558, 295, 884, 746, 534, 544, 51204], "temperature": 0.0, "avg_logprob": -0.23110021244395862, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.004918619059026241}, {"id": 90, "seek": 64640, "start": 663.1999999999999, "end": 669.56, "text": " simple which is let's merge the two concept of object and block and say just one thing which is", "tokens": [51204, 2199, 597, 307, 718, 311, 22183, 264, 732, 3410, 295, 2657, 293, 3461, 293, 584, 445, 472, 551, 597, 307, 51522], "temperature": 0.0, "avg_logprob": -0.23110021244395862, "compression_ratio": 1.6916299559471366, "no_speech_prob": 0.004918619059026241}, {"id": 91, "seek": 66956, "start": 670.52, "end": 678.3599999999999, "text": " a block could have side effect a block could have value redefined but a block will return the", "tokens": [50412, 257, 3461, 727, 362, 1252, 1802, 257, 3461, 727, 362, 2158, 38818, 2001, 457, 257, 3461, 486, 2736, 264, 50804], "temperature": 0.0, "avg_logprob": -0.2260839089579966, "compression_ratio": 1.7772511848341233, "no_speech_prob": 0.02337360382080078}, {"id": 92, "seek": 66956, "start": 678.3599999999999, "end": 686.76, "text": " object of the element within it so we just have one kind of brackets that do the two things in one", "tokens": [50804, 2657, 295, 264, 4478, 1951, 309, 370, 321, 445, 362, 472, 733, 295, 26179, 300, 360, 264, 732, 721, 294, 472, 51224], "temperature": 0.0, "avg_logprob": -0.2260839089579966, "compression_ratio": 1.7772511848341233, "no_speech_prob": 0.02337360382080078}, {"id": 93, "seek": 66956, "start": 686.76, "end": 692.5999999999999, "text": " and are one scope rule which is always the same and you don't have to remind four five", "tokens": [51224, 293, 366, 472, 11923, 4978, 597, 307, 1009, 264, 912, 293, 291, 500, 380, 362, 281, 4160, 1451, 1732, 51516], "temperature": 0.0, "avg_logprob": -0.2260839089579966, "compression_ratio": 1.7772511848341233, "no_speech_prob": 0.02337360382080078}, {"id": 94, "seek": 66956, "start": 692.5999999999999, "end": 698.28, "text": " scoping different scoping rules there is that rules that works for everything it's more smaller", "tokens": [51516, 795, 26125, 819, 795, 26125, 4474, 456, 307, 300, 4474, 300, 1985, 337, 1203, 309, 311, 544, 4356, 51800], "temperature": 0.0, "avg_logprob": -0.2260839089579966, "compression_ratio": 1.7772511848341233, "no_speech_prob": 0.02337360382080078}, {"id": 95, "seek": 69828, "start": 698.3199999999999, "end": 705.3199999999999, "text": " language like you just have one block to have instruction and that is also the way to define", "tokens": [50366, 2856, 411, 291, 445, 362, 472, 3461, 281, 362, 10951, 293, 300, 307, 611, 264, 636, 281, 6964, 50716], "temperature": 0.0, "avg_logprob": -0.24589031764439173, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.009514260105788708}, {"id": 96, "seek": 69828, "start": 705.3199999999999, "end": 714.12, "text": " objects so that kind of one main idea and so other idea it's be is pure and pure it's the world", "tokens": [50716, 6565, 370, 300, 733, 295, 472, 2135, 1558, 293, 370, 661, 1558, 309, 311, 312, 307, 6075, 293, 6075, 309, 311, 264, 1002, 51156], "temperature": 0.0, "avg_logprob": -0.24589031764439173, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.009514260105788708}, {"id": 97, "seek": 69828, "start": 714.12, "end": 720.4399999999999, "text": " that is so much used for things so many different things that I will be to explain what I mean by", "tokens": [51156, 300, 307, 370, 709, 1143, 337, 721, 370, 867, 819, 721, 300, 286, 486, 312, 281, 2903, 437, 286, 914, 538, 51472], "temperature": 0.0, "avg_logprob": -0.24589031764439173, "compression_ratio": 1.653179190751445, "no_speech_prob": 0.009514260105788708}, {"id": 98, "seek": 72044, "start": 720.44, "end": 728.9200000000001, "text": " that in this context of this talk I mean that when you define a variable and call something else", "tokens": [50364, 300, 294, 341, 4319, 295, 341, 751, 286, 914, 300, 562, 291, 6964, 257, 7006, 293, 818, 746, 1646, 50788], "temperature": 0.0, "avg_logprob": -0.2262804911686824, "compression_ratio": 1.6954022988505748, "no_speech_prob": 0.08868405967950821}, {"id": 99, "seek": 72044, "start": 728.9200000000001, "end": 737.72, "text": " you expect the variable to not have changed because you expect not to have shared mutability like", "tokens": [50788, 291, 2066, 264, 7006, 281, 406, 362, 3105, 570, 291, 2066, 406, 281, 362, 5507, 5839, 2310, 411, 51228], "temperature": 0.0, "avg_logprob": -0.2262804911686824, "compression_ratio": 1.6954022988505748, "no_speech_prob": 0.08868405967950821}, {"id": 100, "seek": 72044, "start": 737.72, "end": 745.6400000000001, "text": " the you don't expect to functions that implicitly change a value of your program you what you expect", "tokens": [51228, 264, 291, 500, 380, 2066, 281, 6828, 300, 26947, 356, 1319, 257, 2158, 295, 428, 1461, 291, 437, 291, 2066, 51624], "temperature": 0.0, "avg_logprob": -0.2262804911686824, "compression_ratio": 1.6954022988505748, "no_speech_prob": 0.08868405967950821}, {"id": 101, "seek": 74564, "start": 745.8, "end": 753.64, "text": " is to have kind of a guarantee with a value of what it it in B of having whatever you do with the", "tokens": [50372, 307, 281, 362, 733, 295, 257, 10815, 365, 257, 2158, 295, 437, 309, 309, 294, 363, 295, 1419, 2035, 291, 360, 365, 264, 50764], "temperature": 0.0, "avg_logprob": -0.2222845819261339, "compression_ratio": 1.7159763313609468, "no_speech_prob": 0.020488444715738297}, {"id": 102, "seek": 74564, "start": 753.64, "end": 763.0, "text": " value the value and change and this kind of invariant is kind of things you you you know you", "tokens": [50764, 2158, 264, 2158, 293, 1319, 293, 341, 733, 295, 33270, 394, 307, 733, 295, 721, 291, 291, 291, 458, 291, 51232], "temperature": 0.0, "avg_logprob": -0.2222845819261339, "compression_ratio": 1.7159763313609468, "no_speech_prob": 0.020488444715738297}, {"id": 103, "seek": 74564, "start": 763.0, "end": 769.96, "text": " will always have it's really cool because it's a lot of stuff I will show later in the presentation", "tokens": [51232, 486, 1009, 362, 309, 311, 534, 1627, 570, 309, 311, 257, 688, 295, 1507, 286, 486, 855, 1780, 294, 264, 5860, 51580], "temperature": 0.0, "avg_logprob": -0.2222845819261339, "compression_ratio": 1.7159763313609468, "no_speech_prob": 0.020488444715738297}, {"id": 104, "seek": 76996, "start": 770.0400000000001, "end": 778.12, "text": " but kind of kind of nice to know that to know to whatever I do if I don't reassign x explicitly", "tokens": [50368, 457, 733, 295, 733, 295, 1481, 281, 458, 300, 281, 458, 281, 2035, 286, 360, 498, 286, 500, 380, 19486, 788, 2031, 20803, 50772], "temperature": 0.0, "avg_logprob": -0.10655596256256103, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.0035814831499010324}, {"id": 105, "seek": 76996, "start": 778.12, "end": 783.8000000000001, "text": " it cannot be reassigned by another part of the program I can't do that if I want to reassign x I", "tokens": [50772, 309, 2644, 312, 19486, 16690, 538, 1071, 644, 295, 264, 1461, 286, 393, 380, 360, 300, 498, 286, 528, 281, 19486, 788, 2031, 286, 51056], "temperature": 0.0, "avg_logprob": -0.10655596256256103, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.0035814831499010324}, {"id": 106, "seek": 76996, "start": 783.8000000000001, "end": 789.24, "text": " have to return it as a return value of a function it's the only way to reassign it it's to have it", "tokens": [51056, 362, 281, 2736, 309, 382, 257, 2736, 2158, 295, 257, 2445, 309, 311, 264, 787, 636, 281, 19486, 788, 309, 309, 311, 281, 362, 309, 51328], "temperature": 0.0, "avg_logprob": -0.10655596256256103, "compression_ratio": 1.7852760736196318, "no_speech_prob": 0.0035814831499010324}, {"id": 107, "seek": 78924, "start": 789.24, "end": 801.4, "text": " at return value not to pass it as implicitly like that so I have a kind of immutability by default", "tokens": [50364, 412, 2736, 2158, 406, 281, 1320, 309, 382, 26947, 356, 411, 300, 370, 286, 362, 257, 733, 295, 3397, 325, 2310, 538, 7576, 50972], "temperature": 0.0, "avg_logprob": -0.14823319695212625, "compression_ratio": 1.725609756097561, "no_speech_prob": 0.005439802072942257}, {"id": 108, "seek": 78924, "start": 801.4, "end": 808.6800000000001, "text": " so immutability kind of says that when you define a value keeps that value forever but you can", "tokens": [50972, 370, 3397, 325, 2310, 733, 295, 1619, 300, 562, 291, 6964, 257, 2158, 5965, 300, 2158, 5680, 457, 291, 393, 51336], "temperature": 0.0, "avg_logprob": -0.14823319695212625, "compression_ratio": 1.725609756097561, "no_speech_prob": 0.005439802072942257}, {"id": 109, "seek": 78924, "start": 808.6800000000001, "end": 814.2, "text": " redefine value which work bit like mutation and actually is implemented like mutation can", "tokens": [51336, 38818, 533, 2158, 597, 589, 857, 411, 27960, 293, 767, 307, 12270, 411, 27960, 393, 51612], "temperature": 0.0, "avg_logprob": -0.14823319695212625, "compression_ratio": 1.725609756097561, "no_speech_prob": 0.005439802072942257}, {"id": 110, "seek": 81420, "start": 814.2, "end": 820.2800000000001, "text": " redefine things and if you redefine something in a different scope it don't touch to the thing in", "tokens": [50364, 38818, 533, 721, 293, 498, 291, 38818, 533, 746, 294, 257, 819, 11923, 309, 500, 380, 2557, 281, 264, 551, 294, 50668], "temperature": 0.0, "avg_logprob": -0.14878111619215745, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.008803801611065865}, {"id": 111, "seek": 81420, "start": 820.2800000000001, "end": 827.48, "text": " the upper scope so if you redefine value in sub scope and later call to the value it's the", "tokens": [50668, 264, 6597, 11923, 370, 498, 291, 38818, 533, 2158, 294, 1422, 11923, 293, 1780, 818, 281, 264, 2158, 309, 311, 264, 51028], "temperature": 0.0, "avg_logprob": -0.14878111619215745, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.008803801611065865}, {"id": 112, "seek": 81420, "start": 827.48, "end": 835.96, "text": " previous value because you you want some modification to be local to don't propagate and that this idea", "tokens": [51028, 3894, 2158, 570, 291, 291, 528, 512, 26747, 281, 312, 2654, 281, 500, 380, 48256, 293, 300, 341, 1558, 51452], "temperature": 0.0, "avg_logprob": -0.14878111619215745, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.008803801611065865}, {"id": 113, "seek": 81420, "start": 835.96, "end": 842.0400000000001, "text": " of scoping which is always the same that's applied everywhere which is maybe a bit weird but actually", "tokens": [51452, 295, 795, 26125, 597, 307, 1009, 264, 912, 300, 311, 6456, 5315, 597, 307, 1310, 257, 857, 3657, 457, 767, 51756], "temperature": 0.0, "avg_logprob": -0.14878111619215745, "compression_ratio": 1.8325581395348838, "no_speech_prob": 0.008803801611065865}, {"id": 114, "seek": 84204, "start": 842.12, "end": 852.5999999999999, "text": " really handy and so the interesting part is about how having a more constrained language makes", "tokens": [50368, 534, 13239, 293, 370, 264, 1880, 644, 307, 466, 577, 1419, 257, 544, 38901, 2856, 1669, 50892], "temperature": 0.0, "avg_logprob": -0.24020217259724935, "compression_ratio": 1.5310734463276836, "no_speech_prob": 0.004203726537525654}, {"id": 115, "seek": 84204, "start": 854.76, "end": 860.28, "text": " allow the ability to spot more bugs and I speak a bit about the fact that tabscript", "tokens": [51000, 2089, 264, 3485, 281, 4008, 544, 15120, 293, 286, 1710, 257, 857, 466, 264, 1186, 300, 20743, 5944, 51276], "temperature": 0.0, "avg_logprob": -0.24020217259724935, "compression_ratio": 1.5310734463276836, "no_speech_prob": 0.004203726537525654}, {"id": 116, "seek": 84204, "start": 860.8399999999999, "end": 866.12, "text": " sadly have exactly the same flows as JavaScript because it's a superset so for example charm", "tokens": [51304, 22023, 362, 2293, 264, 912, 12867, 382, 15778, 570, 309, 311, 257, 37906, 302, 370, 337, 1365, 18904, 51568], "temperature": 0.0, "avg_logprob": -0.24020217259724935, "compression_ratio": 1.5310734463276836, "no_speech_prob": 0.004203726537525654}, {"id": 117, "seek": 86612, "start": 866.12, "end": 873.32, "text": " immutability a 4x2 have right correct inference and correct typing here I have an example of bad", "tokens": [50364, 3397, 325, 2310, 257, 1017, 87, 17, 362, 558, 3006, 38253, 293, 3006, 18444, 510, 286, 362, 364, 1365, 295, 1578, 50724], "temperature": 0.0, "avg_logprob": -0.19760796518036813, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.006640253588557243}, {"id": 118, "seek": 86612, "start": 873.32, "end": 882.2, "text": " inference in typescript which is I it's borrowed from the typescript tutorial I should have typescript", "tokens": [50724, 38253, 294, 3467, 5944, 597, 307, 286, 309, 311, 26805, 490, 264, 3467, 5944, 7073, 286, 820, 362, 3467, 5944, 51168], "temperature": 0.0, "avg_logprob": -0.19760796518036813, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.006640253588557243}, {"id": 119, "seek": 86612, "start": 882.92, "end": 889.64, "text": " understandings that's if I want something which is left of right and assign a variable", "tokens": [51204, 1223, 1109, 300, 311, 498, 286, 528, 746, 597, 307, 1411, 295, 558, 293, 6269, 257, 7006, 51540], "temperature": 0.0, "avg_logprob": -0.19760796518036813, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.006640253588557243}, {"id": 120, "seek": 88964, "start": 889.88, "end": 900.12, "text": " right I should have the right thing but the thing is typescript decide to infer s as a string and not", "tokens": [50376, 558, 286, 820, 362, 264, 558, 551, 457, 264, 551, 307, 3467, 5944, 4536, 281, 13596, 262, 382, 257, 6798, 293, 406, 50888], "temperature": 0.0, "avg_logprob": -0.16098354922400582, "compression_ratio": 1.8209876543209877, "no_speech_prob": 0.003617043374106288}, {"id": 121, "seek": 88964, "start": 900.12, "end": 909.24, "text": " as a left or right and why typescript does that because here we have a let s equal right and not", "tokens": [50888, 382, 257, 1411, 420, 558, 293, 983, 3467, 5944, 775, 300, 570, 510, 321, 362, 257, 718, 262, 2681, 558, 293, 406, 51344], "temperature": 0.0, "avg_logprob": -0.16098354922400582, "compression_ratio": 1.8209876543209877, "no_speech_prob": 0.003617043374106288}, {"id": 122, "seek": 88964, "start": 909.24, "end": 916.76, "text": " a cost s equal right if you change the let by the cost typescript will correctly infer but since", "tokens": [51344, 257, 2063, 262, 2681, 558, 498, 291, 1319, 264, 718, 538, 264, 2063, 3467, 5944, 486, 8944, 13596, 457, 1670, 51720], "temperature": 0.0, "avg_logprob": -0.16098354922400582, "compression_ratio": 1.8209876543209877, "no_speech_prob": 0.003617043374106288}, {"id": 123, "seek": 91676, "start": 916.76, "end": 923.24, "text": " there's shared immutability everywhere typescript can't really know or assume that the value of s", "tokens": [50364, 456, 311, 5507, 3397, 325, 2310, 5315, 3467, 5944, 393, 380, 534, 458, 420, 6552, 300, 264, 2158, 295, 262, 50688], "temperature": 0.0, "avg_logprob": -0.17633717330460696, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0050257472321391106}, {"id": 124, "seek": 91676, "start": 923.24, "end": 929.8, "text": " will not be changed so it just say okay it will be a string even if you don't change it if you even", "tokens": [50688, 486, 406, 312, 3105, 370, 309, 445, 584, 1392, 309, 486, 312, 257, 6798, 754, 498, 291, 500, 380, 1319, 309, 498, 291, 754, 51016], "temperature": 0.0, "avg_logprob": -0.17633717330460696, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0050257472321391106}, {"id": 125, "seek": 91676, "start": 929.8, "end": 936.4399999999999, "text": " if you use it right after say it's a string because it's mutable it can change so you don't know", "tokens": [51016, 498, 291, 764, 309, 558, 934, 584, 309, 311, 257, 6798, 570, 309, 311, 5839, 712, 309, 393, 1319, 370, 291, 500, 380, 458, 51348], "temperature": 0.0, "avg_logprob": -0.17633717330460696, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0050257472321391106}, {"id": 126, "seek": 91676, "start": 937.8, "end": 945.96, "text": " it's don't know so so that's kind of among situation where so typescript inference failed", "tokens": [51416, 309, 311, 500, 380, 458, 370, 370, 300, 311, 733, 295, 3654, 2590, 689, 370, 3467, 5944, 38253, 7612, 51824], "temperature": 0.0, "avg_logprob": -0.17633717330460696, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.0050257472321391106}, {"id": 127, "seek": 94596, "start": 945.96, "end": 951.5600000000001, "text": " and if you have immutability you don't have this kind of error of course and there is also", "tokens": [50364, 293, 498, 291, 362, 3397, 325, 2310, 291, 500, 380, 362, 341, 733, 295, 6713, 295, 1164, 293, 456, 307, 611, 50644], "temperature": 0.0, "avg_logprob": -0.08771279123094347, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.0008925527217797935}, {"id": 128, "seek": 94596, "start": 952.6, "end": 958.9200000000001, "text": " bad typing this code is a bit nasty but the idea if you expect something which is a string or a", "tokens": [50696, 1578, 18444, 341, 3089, 307, 257, 857, 17923, 457, 264, 1558, 498, 291, 2066, 746, 597, 307, 257, 6798, 420, 257, 51012], "temperature": 0.0, "avg_logprob": -0.08771279123094347, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.0008925527217797935}, {"id": 129, "seek": 94596, "start": 958.9200000000001, "end": 968.76, "text": " number and then you check it's a string and then you kind of calling some things that changing the", "tokens": [51012, 1230, 293, 550, 291, 1520, 309, 311, 257, 6798, 293, 550, 291, 733, 295, 5141, 512, 721, 300, 4473, 264, 51504], "temperature": 0.0, "avg_logprob": -0.08771279123094347, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.0008925527217797935}, {"id": 130, "seek": 94596, "start": 968.76, "end": 975.4000000000001, "text": " value behind the back of typescript and typescript can detect that because typescript just choose to", "tokens": [51504, 2158, 2261, 264, 646, 295, 3467, 5944, 293, 3467, 5944, 393, 5531, 300, 570, 3467, 5944, 445, 2826, 281, 51836], "temperature": 0.0, "avg_logprob": -0.08771279123094347, "compression_ratio": 1.8647342995169083, "no_speech_prob": 0.0008925527217797935}, {"id": 131, "seek": 97596, "start": 975.96, "end": 981.5600000000001, "text": " don't keep track of that and assume you don't do it even if you can do it so this code was compiled", "tokens": [50364, 500, 380, 1066, 2837, 295, 300, 293, 6552, 291, 500, 380, 360, 309, 754, 498, 291, 393, 360, 309, 370, 341, 3089, 390, 36548, 50644], "temperature": 0.0, "avg_logprob": -0.17077297860003532, "compression_ratio": 1.7630331753554502, "no_speech_prob": 0.002355096861720085}, {"id": 132, "seek": 97596, "start": 983.08, "end": 990.2800000000001, "text": " it will check with typescript strict typescript strict is hard to say we say there is no", "tokens": [50720, 309, 486, 1520, 365, 3467, 5944, 10910, 3467, 5944, 10910, 307, 1152, 281, 584, 321, 584, 456, 307, 572, 51080], "temperature": 0.0, "avg_logprob": -0.17077297860003532, "compression_ratio": 1.7630331753554502, "no_speech_prob": 0.002355096861720085}, {"id": 133, "seek": 97596, "start": 990.2800000000001, "end": 994.9200000000001, "text": " no error everything is fine but if you run it every of course at one time you say that's two", "tokens": [51080, 572, 6713, 1203, 307, 2489, 457, 498, 291, 1190, 309, 633, 295, 1164, 412, 472, 565, 291, 584, 300, 311, 732, 51312], "temperature": 0.0, "avg_logprob": -0.17077297860003532, "compression_ratio": 1.7630331753554502, "no_speech_prob": 0.002355096861720085}, {"id": 134, "seek": 97596, "start": 994.9200000000001, "end": 1001.5600000000001, "text": " uppercase is not a function which is annoying I would expect typescript to catch it but in", "tokens": [51312, 11775, 2869, 651, 307, 406, 257, 2445, 597, 307, 11304, 286, 576, 2066, 3467, 5944, 281, 3745, 309, 457, 294, 51644], "temperature": 0.0, "avg_logprob": -0.17077297860003532, "compression_ratio": 1.7630331753554502, "no_speech_prob": 0.002355096861720085}, {"id": 135, "seek": 100156, "start": 1001.56, "end": 1007.0, "text": " a way I know typescript can't catch it because yeah it's really hard to keep track of every value", "tokens": [50364, 257, 636, 286, 458, 3467, 5944, 393, 380, 3745, 309, 570, 1338, 309, 311, 534, 1152, 281, 1066, 2837, 295, 633, 2158, 50636], "temperature": 0.0, "avg_logprob": -0.18178309565005096, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.0010718166595324874}, {"id": 136, "seek": 100156, "start": 1007.0, "end": 1019.56, "text": " and and types then can't do that easily so this question is no how I expect types to work in my", "tokens": [50636, 293, 293, 3467, 550, 393, 380, 360, 300, 3612, 370, 341, 1168, 307, 572, 577, 286, 2066, 3467, 281, 589, 294, 452, 51264], "temperature": 0.0, "avg_logprob": -0.18178309565005096, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.0010718166595324874}, {"id": 137, "seek": 100156, "start": 1021.16, "end": 1028.36, "text": " minimal programming language I've not finished yet and there is an idea that's come from", "tokens": [51344, 13206, 9410, 2856, 286, 600, 406, 4335, 1939, 293, 456, 307, 364, 1558, 300, 311, 808, 490, 51704], "temperature": 0.0, "avg_logprob": -0.18178309565005096, "compression_ratio": 1.540983606557377, "no_speech_prob": 0.0010718166595324874}, {"id": 138, "seek": 102836, "start": 1029.32, "end": 1035.4799999999998, "text": " mostly really mathematical language which is called dependent type language which is the idea that", "tokens": [50412, 5240, 534, 18894, 2856, 597, 307, 1219, 12334, 2010, 2856, 597, 307, 264, 1558, 300, 50720], "temperature": 0.0, "avg_logprob": -0.145205015159515, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.004423565696924925}, {"id": 139, "seek": 102836, "start": 1035.4799999999998, "end": 1043.8, "text": " types could be values that could be used like a value you can assign like for example here I just say", "tokens": [50720, 3467, 727, 312, 4190, 300, 727, 312, 1143, 411, 257, 2158, 291, 393, 6269, 411, 337, 1365, 510, 286, 445, 584, 51136], "temperature": 0.0, "avg_logprob": -0.145205015159515, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.004423565696924925}, {"id": 140, "seek": 102836, "start": 1043.8, "end": 1049.08, "text": " types kind of a function they just say if something is true or false and if it's true", "tokens": [51136, 3467, 733, 295, 257, 2445, 436, 445, 584, 498, 746, 307, 2074, 420, 7908, 293, 498, 309, 311, 2074, 51400], "temperature": 0.0, "avg_logprob": -0.145205015159515, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.004423565696924925}, {"id": 141, "seek": 102836, "start": 1049.08, "end": 1055.7199999999998, "text": " it's type and if it falls it don't type it's really natural to understand but", "tokens": [51400, 309, 311, 2010, 293, 498, 309, 8804, 309, 500, 380, 2010, 309, 311, 534, 3303, 281, 1223, 457, 51732], "temperature": 0.0, "avg_logprob": -0.145205015159515, "compression_ratio": 1.793103448275862, "no_speech_prob": 0.004423565696924925}, {"id": 142, "seek": 105572, "start": 1056.68, "end": 1064.6000000000001, "text": " then I could use this in my code in to prefix value and say okay let's check if it's work and everything and", "tokens": [50412, 550, 286, 727, 764, 341, 294, 452, 3089, 294, 281, 46969, 2158, 293, 584, 1392, 718, 311, 1520, 498, 309, 311, 589, 293, 1203, 293, 50808], "temperature": 0.0, "avg_logprob": -0.21209360493554008, "compression_ratio": 1.65, "no_speech_prob": 0.0008014447521418333}, {"id": 143, "seek": 105572, "start": 1066.6000000000001, "end": 1072.04, "text": " and this is a really expressive way to say that something is a type because every function could", "tokens": [50908, 293, 341, 307, 257, 534, 40189, 636, 281, 584, 300, 746, 307, 257, 2010, 570, 633, 2445, 727, 51180], "temperature": 0.0, "avg_logprob": -0.21209360493554008, "compression_ratio": 1.65, "no_speech_prob": 0.0008014447521418333}, {"id": 144, "seek": 105572, "start": 1072.04, "end": 1080.1200000000001, "text": " be a type as soon as the function return true or false a boolean value this since there are", "tokens": [51180, 312, 257, 2010, 382, 2321, 382, 264, 2445, 2736, 2074, 420, 7908, 257, 748, 4812, 282, 2158, 341, 1670, 456, 366, 51584], "temperature": 0.0, "avg_logprob": -0.21209360493554008, "compression_ratio": 1.65, "no_speech_prob": 0.0008014447521418333}, {"id": 145, "seek": 108012, "start": 1080.1999999999998, "end": 1087.56, "text": " functions function can be composed so you can for example do structural typing you can for", "tokens": [50368, 6828, 2445, 393, 312, 18204, 370, 291, 393, 337, 1365, 360, 15067, 18444, 291, 393, 337, 50736], "temperature": 0.0, "avg_logprob": -0.17043870359986693, "compression_ratio": 2.0267379679144386, "no_speech_prob": 0.00577833317220211}, {"id": 146, "seek": 108012, "start": 1087.56, "end": 1092.76, "text": " example do union types the things you have in typescript you can do interchange type it's just", "tokens": [50736, 1365, 360, 11671, 3467, 264, 721, 291, 362, 294, 3467, 5944, 291, 393, 360, 30358, 2010, 309, 311, 445, 50996], "temperature": 0.0, "avg_logprob": -0.17043870359986693, "compression_ratio": 2.0267379679144386, "no_speech_prob": 0.00577833317220211}, {"id": 147, "seek": 108012, "start": 1092.76, "end": 1100.76, "text": " way to say is it a thing and a thing and a thing or a thing is a thing is a thing and and just", "tokens": [50996, 636, 281, 584, 307, 309, 257, 551, 293, 257, 551, 293, 257, 551, 420, 257, 551, 307, 257, 551, 307, 257, 551, 293, 293, 445, 51396], "temperature": 0.0, "avg_logprob": -0.17043870359986693, "compression_ratio": 2.0267379679144386, "no_speech_prob": 0.00577833317220211}, {"id": 148, "seek": 108012, "start": 1100.76, "end": 1107.9599999999998, "text": " comparing value it's not that hard but the thing is you want to run all that computation at run at", "tokens": [51396, 15763, 2158, 309, 311, 406, 300, 1152, 457, 264, 551, 307, 291, 528, 281, 1190, 439, 300, 24903, 412, 1190, 412, 51756], "temperature": 0.0, "avg_logprob": -0.17043870359986693, "compression_ratio": 2.0267379679144386, "no_speech_prob": 0.00577833317220211}, {"id": 149, "seek": 110796, "start": 1107.96, "end": 1116.2, "text": " build time not at run time so you kind of all you you will you will succeed to do that what", "tokens": [50364, 1322, 565, 406, 412, 1190, 565, 370, 291, 733, 295, 439, 291, 291, 486, 291, 486, 7754, 281, 360, 300, 437, 50776], "temperature": 0.0, "avg_logprob": -0.16590668938376688, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.0012598545290529728}, {"id": 150, "seek": 110796, "start": 1116.2, "end": 1122.28, "text": " typically typescript type script can do and the thing is it's more easy because as we see before", "tokens": [50776, 5850, 3467, 5944, 2010, 5755, 393, 360, 293, 264, 551, 307, 309, 311, 544, 1858, 570, 382, 321, 536, 949, 51080], "temperature": 0.0, "avg_logprob": -0.16590668938376688, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.0012598545290529728}, {"id": 151, "seek": 110796, "start": 1123.72, "end": 1128.6000000000001, "text": " the execution flow of the language is more predictable there's no shown metability you", "tokens": [51152, 264, 15058, 3095, 295, 264, 2856, 307, 544, 27737, 456, 311, 572, 4898, 1131, 2310, 291, 51396], "temperature": 0.0, "avg_logprob": -0.16590668938376688, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.0012598545290529728}, {"id": 152, "seek": 110796, "start": 1128.6000000000001, "end": 1132.44, "text": " don't know if a value can be shown by something else and there is a technique that's come from", "tokens": [51396, 500, 380, 458, 498, 257, 2158, 393, 312, 4898, 538, 746, 1646, 293, 456, 307, 257, 6532, 300, 311, 808, 490, 51588], "temperature": 0.0, "avg_logprob": -0.16590668938376688, "compression_ratio": 1.7289719626168225, "no_speech_prob": 0.0012598545290529728}, {"id": 153, "seek": 113244, "start": 1132.44, "end": 1140.52, "text": " static analysis which is technique which is mostly used to prove that's a language that don't behave", "tokens": [50364, 13437, 5215, 597, 307, 6532, 597, 307, 5240, 1143, 281, 7081, 300, 311, 257, 2856, 300, 500, 380, 15158, 50768], "temperature": 0.0, "avg_logprob": -0.10221821428781533, "compression_ratio": 1.911764705882353, "no_speech_prob": 0.0038142141420394182}, {"id": 154, "seek": 113244, "start": 1140.52, "end": 1146.76, "text": " correctly still behave correctly this technique for example used to prove that the C program works as", "tokens": [50768, 8944, 920, 15158, 8944, 341, 6532, 337, 1365, 1143, 281, 7081, 300, 264, 383, 1461, 1985, 382, 51080], "temperature": 0.0, "avg_logprob": -0.10221821428781533, "compression_ratio": 1.911764705882353, "no_speech_prob": 0.0038142141420394182}, {"id": 155, "seek": 113244, "start": 1146.76, "end": 1153.24, "text": " expected and in a C program you can do whatever you want so you kind of need a powerful technique", "tokens": [51080, 5176, 293, 294, 257, 383, 1461, 291, 393, 360, 2035, 291, 528, 370, 291, 733, 295, 643, 257, 4005, 6532, 51404], "temperature": 0.0, "avg_logprob": -0.10221821428781533, "compression_ratio": 1.911764705882353, "no_speech_prob": 0.0038142141420394182}, {"id": 156, "seek": 113244, "start": 1153.96, "end": 1158.6000000000001, "text": " so the idea of this technique is typing a program checking a program the build time check", "tokens": [51440, 370, 264, 1558, 295, 341, 6532, 307, 18444, 257, 1461, 8568, 257, 1461, 264, 1322, 565, 1520, 51672], "temperature": 0.0, "avg_logprob": -0.10221821428781533, "compression_ratio": 1.911764705882353, "no_speech_prob": 0.0038142141420394182}, {"id": 157, "seek": 115860, "start": 1158.6, "end": 1163.8, "text": " is really like running your program you run your program and you check if it failed or if it worked", "tokens": [50364, 307, 534, 411, 2614, 428, 1461, 291, 1190, 428, 1461, 293, 291, 1520, 498, 309, 7612, 420, 498, 309, 2732, 50624], "temperature": 0.0, "avg_logprob": -0.14541236067240218, "compression_ratio": 2.1140350877192984, "no_speech_prob": 0.0009056518319994211}, {"id": 158, "seek": 115860, "start": 1163.8, "end": 1167.6399999999999, "text": " but running a program does not scale because if your program has an infinite loop your", "tokens": [50624, 457, 2614, 257, 1461, 775, 406, 4373, 570, 498, 428, 1461, 575, 364, 13785, 6367, 428, 50816], "temperature": 0.0, "avg_logprob": -0.14541236067240218, "compression_ratio": 2.1140350877192984, "no_speech_prob": 0.0009056518319994211}, {"id": 159, "seek": 115860, "start": 1168.1999999999998, "end": 1172.76, "text": " check at build time will be infinite or if you do an infinite recursion so you have to change a bit", "tokens": [50844, 1520, 412, 1322, 565, 486, 312, 13785, 420, 498, 291, 360, 364, 13785, 20560, 313, 370, 291, 362, 281, 1319, 257, 857, 51072], "temperature": 0.0, "avg_logprob": -0.14541236067240218, "compression_ratio": 2.1140350877192984, "no_speech_prob": 0.0009056518319994211}, {"id": 160, "seek": 115860, "start": 1172.76, "end": 1178.84, "text": " to be aware of your program you have to change a bit of if else work a function call work and you", "tokens": [51072, 281, 312, 3650, 295, 428, 1461, 291, 362, 281, 1319, 257, 857, 295, 498, 1646, 589, 257, 2445, 818, 589, 293, 291, 51376], "temperature": 0.0, "avg_logprob": -0.14541236067240218, "compression_ratio": 2.1140350877192984, "no_speech_prob": 0.0009056518319994211}, {"id": 161, "seek": 115860, "start": 1178.84, "end": 1184.28, "text": " have to change a bit the standard library to to not do print not write file not read file and the", "tokens": [51376, 362, 281, 1319, 257, 857, 264, 3832, 6405, 281, 281, 406, 360, 4482, 406, 2464, 3991, 406, 1401, 3991, 293, 264, 51648], "temperature": 0.0, "avg_logprob": -0.14541236067240218, "compression_ratio": 2.1140350877192984, "no_speech_prob": 0.0009056518319994211}, {"id": 162, "seek": 118428, "start": 1184.28, "end": 1190.36, "text": " idea if you change a bit seems to be fully determined for example random function rather than returning", "tokens": [50364, 1558, 498, 291, 1319, 257, 857, 2544, 281, 312, 4498, 9540, 337, 1365, 4974, 2445, 2831, 813, 12678, 50668], "temperature": 0.0, "avg_logprob": -0.09821888496135843, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.002656473545357585}, {"id": 163, "seek": 118428, "start": 1190.36, "end": 1197.32, "text": " a random number return the range of possible numbers so you know your number will be between zero and", "tokens": [50668, 257, 4974, 1230, 2736, 264, 3613, 295, 1944, 3547, 370, 291, 458, 428, 1230, 486, 312, 1296, 4018, 293, 51016], "temperature": 0.0, "avg_logprob": -0.09821888496135843, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.002656473545357585}, {"id": 164, "seek": 118428, "start": 1197.32, "end": 1204.2, "text": " five because it's expected to be between zero and five but you don't know what value you you you", "tokens": [51016, 1732, 570, 309, 311, 5176, 281, 312, 1296, 4018, 293, 1732, 457, 291, 500, 380, 458, 437, 2158, 291, 291, 291, 51360], "temperature": 0.0, "avg_logprob": -0.09821888496135843, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.002656473545357585}, {"id": 165, "seek": 118428, "start": 1204.2, "end": 1212.52, "text": " change value by kind of the what would be the expected value in this case this is really simple", "tokens": [51360, 1319, 2158, 538, 733, 295, 264, 437, 576, 312, 264, 5176, 2158, 294, 341, 1389, 341, 307, 534, 2199, 51776], "temperature": 0.0, "avg_logprob": -0.09821888496135843, "compression_ratio": 1.8341013824884793, "no_speech_prob": 0.002656473545357585}, {"id": 166, "seek": 121252, "start": 1212.52, "end": 1216.76, "text": " and powerful technique but that does not really scale well because if you have a really big program", "tokens": [50364, 293, 4005, 6532, 457, 300, 775, 406, 534, 4373, 731, 570, 498, 291, 362, 257, 534, 955, 1461, 50576], "temperature": 0.0, "avg_logprob": -0.11638227609487681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.003068056423217058}, {"id": 167, "seek": 121252, "start": 1216.76, "end": 1224.12, "text": " you kind of running a really big program at build time which is problematic and there's a solution", "tokens": [50576, 291, 733, 295, 2614, 257, 534, 955, 1461, 412, 1322, 565, 597, 307, 19011, 293, 456, 311, 257, 3827, 50944], "temperature": 0.0, "avg_logprob": -0.11638227609487681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.003068056423217058}, {"id": 168, "seek": 121252, "start": 1224.12, "end": 1235.32, "text": " to that later in this presentation and I have a little demo of this working yeah so here I have", "tokens": [50944, 281, 300, 1780, 294, 341, 5860, 293, 286, 362, 257, 707, 10723, 295, 341, 1364, 1338, 370, 510, 286, 362, 51504], "temperature": 0.0, "avg_logprob": -0.11638227609487681, "compression_ratio": 1.6610169491525424, "no_speech_prob": 0.003068056423217058}, {"id": 169, "seek": 123532, "start": 1235.96, "end": 1245.08, "text": " four file but only two of interest I have something in type script which is I have an array of four", "tokens": [50396, 1451, 3991, 457, 787, 732, 295, 1179, 286, 362, 746, 294, 2010, 5755, 597, 307, 286, 362, 364, 10225, 295, 1451, 50852], "temperature": 0.0, "avg_logprob": -0.1552403767903646, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.01114610955119133}, {"id": 170, "seek": 123532, "start": 1245.08, "end": 1252.04, "text": " element I pop an element and try to access the previous last element and obviously it failed", "tokens": [50852, 4478, 286, 1665, 364, 4478, 293, 853, 281, 2105, 264, 3894, 1036, 4478, 293, 2745, 309, 7612, 51200], "temperature": 0.0, "avg_logprob": -0.1552403767903646, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.01114610955119133}, {"id": 171, "seek": 123532, "start": 1254.2, "end": 1263.0, "text": " and I have the same thing in these that look kind of similar actually parentheses are optional", "tokens": [51308, 293, 286, 362, 264, 912, 551, 294, 613, 300, 574, 733, 295, 2531, 767, 34153, 366, 17312, 51748], "temperature": 0.0, "avg_logprob": -0.1552403767903646, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.01114610955119133}, {"id": 172, "seek": 126300, "start": 1263.24, "end": 1271.0, "text": " but I put them because it's more looking like JavaScript yeah so two two can do the same thing so", "tokens": [50376, 457, 286, 829, 552, 570, 309, 311, 544, 1237, 411, 15778, 1338, 370, 732, 732, 393, 360, 264, 912, 551, 370, 50764], "temperature": 0.0, "avg_logprob": -0.20609141107815415, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.014909313060343266}, {"id": 173, "seek": 126300, "start": 1271.72, "end": 1281.0, "text": " if I do it in in type script yeah take a while it's really small file but still type script yeah", "tokens": [50800, 498, 286, 360, 309, 294, 294, 2010, 5755, 1338, 747, 257, 1339, 309, 311, 534, 1359, 3991, 457, 920, 2010, 5755, 1338, 51264], "temperature": 0.0, "avg_logprob": -0.20609141107815415, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.014909313060343266}, {"id": 174, "seek": 126300, "start": 1281.88, "end": 1288.52, "text": " cool I have an old computer for type script defense and it compile no issue everything", "tokens": [51308, 1627, 286, 362, 364, 1331, 3820, 337, 2010, 5755, 7654, 293, 309, 31413, 572, 2734, 1203, 51640], "temperature": 0.0, "avg_logprob": -0.20609141107815415, "compression_ratio": 1.6529411764705881, "no_speech_prob": 0.014909313060343266}, {"id": 175, "seek": 128852, "start": 1288.52, "end": 1297.48, "text": " fine and if I run it obviously I got in the fine which is not what I I expect here but if I do it", "tokens": [50364, 2489, 293, 498, 286, 1190, 309, 2745, 286, 658, 294, 264, 2489, 597, 307, 406, 437, 286, 286, 2066, 510, 457, 498, 286, 360, 309, 50812], "temperature": 0.0, "avg_logprob": -0.17875189323947854, "compression_ratio": 1.5842696629213484, "no_speech_prob": 0.0032584320288151503}, {"id": 176, "seek": 128852, "start": 1298.68, "end": 1308.6, "text": " with my super cool side project toy compiler I have a really nice error that tell me a lot about", "tokens": [50872, 365, 452, 1687, 1627, 1252, 1716, 12058, 31958, 286, 362, 257, 534, 1481, 6713, 300, 980, 385, 257, 688, 466, 51368], "temperature": 0.0, "avg_logprob": -0.17875189323947854, "compression_ratio": 1.5842696629213484, "no_speech_prob": 0.0032584320288151503}, {"id": 177, "seek": 128852, "start": 1308.6, "end": 1316.44, "text": " what's it is happening here yeah so tell me what's the static value of the array what's", "tokens": [51368, 437, 311, 309, 307, 2737, 510, 1338, 370, 980, 385, 437, 311, 264, 13437, 2158, 295, 264, 10225, 437, 311, 51760], "temperature": 0.0, "avg_logprob": -0.17875189323947854, "compression_ratio": 1.5842696629213484, "no_speech_prob": 0.0032584320288151503}, {"id": 178, "seek": 131644, "start": 1317.0800000000002, "end": 1324.68, "text": " happening where how yeah and I work mostly on that on having kind of user friendly error", "tokens": [50396, 2737, 689, 577, 1338, 293, 286, 589, 5240, 322, 300, 322, 1419, 733, 295, 4195, 9208, 6713, 50776], "temperature": 0.0, "avg_logprob": -0.11069876214732295, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.0009510984527878463}, {"id": 179, "seek": 131644, "start": 1325.56, "end": 1331.56, "text": " and tries next to make this thing scale well and have more expressivity to explain type so", "tokens": [50820, 293, 9898, 958, 281, 652, 341, 551, 4373, 731, 293, 362, 544, 5109, 4253, 281, 2903, 2010, 370, 51120], "temperature": 0.0, "avg_logprob": -0.11069876214732295, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.0009510984527878463}, {"id": 180, "seek": 131644, "start": 1332.2, "end": 1342.28, "text": " so that's the idea um yeah I'm I'm I'm near the end of the talk so I implement a lot of things", "tokens": [51152, 370, 300, 311, 264, 1558, 1105, 1338, 286, 478, 286, 478, 286, 478, 2651, 264, 917, 295, 264, 751, 370, 286, 4445, 257, 688, 295, 721, 51656], "temperature": 0.0, "avg_logprob": -0.11069876214732295, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.0009510984527878463}, {"id": 181, "seek": 134228, "start": 1342.28, "end": 1349.16, "text": " like really funny scoping bugs I use three-seater for my grammar which is what use github for", "tokens": [50364, 411, 534, 4074, 795, 26125, 15120, 286, 764, 1045, 12, 405, 771, 337, 452, 22317, 597, 307, 437, 764, 290, 355, 836, 337, 50708], "temperature": 0.0, "avg_logprob": -0.29271446676815255, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.0031591772567480803}, {"id": 182, "seek": 134228, "start": 1351.32, "end": 1359.0, "text": " syntax creation and analysis of everything on github I have all the things we have in", "tokens": [50816, 28431, 8016, 293, 5215, 295, 1203, 322, 290, 355, 836, 286, 362, 439, 264, 721, 321, 362, 294, 51200], "temperature": 0.0, "avg_logprob": -0.29271446676815255, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.0031591772567480803}, {"id": 183, "seek": 134228, "start": 1359.0, "end": 1364.2, "text": " JavaScript like the spread operator or the structuring I have things that does not exist in", "tokens": [51200, 15778, 411, 264, 3974, 12973, 420, 264, 6594, 1345, 286, 362, 721, 300, 775, 406, 2514, 294, 51460], "temperature": 0.0, "avg_logprob": -0.29271446676815255, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.0031591772567480803}, {"id": 184, "seek": 134228, "start": 1364.2, "end": 1369.56, "text": " JavaScript like implicit function argument, hyper-overloading and I have a small standard", "tokens": [51460, 15778, 411, 26947, 2445, 6770, 11, 9848, 12, 3570, 2907, 278, 293, 286, 362, 257, 1359, 3832, 51728], "temperature": 0.0, "avg_logprob": -0.29271446676815255, "compression_ratio": 1.6559633027522935, "no_speech_prob": 0.0031591772567480803}, {"id": 185, "seek": 136956, "start": 1369.56, "end": 1377.3999999999999, "text": " library where with everything you can expect to to write a program and and I have also a", "tokens": [50364, 6405, 689, 365, 1203, 291, 393, 2066, 281, 281, 2464, 257, 1461, 293, 293, 286, 362, 611, 257, 50756], "temperature": 0.0, "avg_logprob": -0.16113526308083836, "compression_ratio": 1.6531531531531531, "no_speech_prob": 0.0029437649063766003}, {"id": 186, "seek": 136956, "start": 1377.3999999999999, "end": 1382.6799999999998, "text": " client as I just demonstrate that work without node in your class you don't even need to have", "tokens": [50756, 6423, 382, 286, 445, 11698, 300, 589, 1553, 9984, 294, 428, 1508, 291, 500, 380, 754, 643, 281, 362, 51020], "temperature": 0.0, "avg_logprob": -0.16113526308083836, "compression_ratio": 1.6531531531531531, "no_speech_prob": 0.0029437649063766003}, {"id": 187, "seek": 136956, "start": 1382.6799999999998, "end": 1389.56, "text": " JavaScript installed on your computer to make it work I have build targets so you can customize", "tokens": [51020, 15778, 8899, 322, 428, 3820, 281, 652, 309, 589, 286, 362, 1322, 12911, 370, 291, 393, 19734, 51364], "temperature": 0.0, "avg_logprob": -0.16113526308083836, "compression_ratio": 1.6531531531531531, "no_speech_prob": 0.0029437649063766003}, {"id": 188, "seek": 136956, "start": 1389.56, "end": 1396.2, "text": " your JavaScript with different compile time variable and you can even use or define have", "tokens": [51364, 428, 15778, 365, 819, 31413, 565, 7006, 293, 291, 393, 754, 764, 420, 6964, 362, 51696], "temperature": 0.0, "avg_logprob": -0.16113526308083836, "compression_ratio": 1.6531531531531531, "no_speech_prob": 0.0029437649063766003}, {"id": 189, "seek": 139620, "start": 1396.2, "end": 1403.48, "text": " build cache so when you you do yeah it's not a good example because the compilation fail anyway", "tokens": [50364, 1322, 19459, 370, 562, 291, 291, 360, 1338, 309, 311, 406, 257, 665, 1365, 570, 264, 40261, 3061, 4033, 50728], "temperature": 0.0, "avg_logprob": -0.1143817243904903, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.005862074438482523}, {"id": 190, "seek": 139620, "start": 1404.1200000000001, "end": 1409.72, "text": " but if your compilation succeeds if you run it several times you just compile only the files", "tokens": [50760, 457, 498, 428, 40261, 49263, 498, 291, 1190, 309, 2940, 1413, 291, 445, 31413, 787, 264, 7098, 51040], "temperature": 0.0, "avg_logprob": -0.1143817243904903, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.005862074438482523}, {"id": 191, "seek": 139620, "start": 1409.72, "end": 1417.32, "text": " that change not the new one I have syntax highlighting not the best but still and I have", "tokens": [51040, 300, 1319, 406, 264, 777, 472, 286, 362, 28431, 26551, 406, 264, 1151, 457, 920, 293, 286, 362, 51420], "temperature": 0.0, "avg_logprob": -0.1143817243904903, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.005862074438482523}, {"id": 192, "seek": 139620, "start": 1417.32, "end": 1423.16, "text": " a lot of things left to do I don't have yet pattern matching I would like to have it for the presentation", "tokens": [51420, 257, 688, 295, 721, 1411, 281, 360, 286, 500, 380, 362, 1939, 5102, 14324, 286, 576, 411, 281, 362, 309, 337, 264, 5860, 51712], "temperature": 0.0, "avg_logprob": -0.1143817243904903, "compression_ratio": 1.6946902654867257, "no_speech_prob": 0.005862074438482523}, {"id": 193, "seek": 142316, "start": 1423.16, "end": 1432.8400000000001, "text": " but I still don't have it so I try to do it soon because it's really nice to kind of destruct your", "tokens": [50364, 457, 286, 920, 500, 380, 362, 309, 370, 286, 853, 281, 360, 309, 2321, 570, 309, 311, 534, 1481, 281, 733, 295, 2677, 1757, 428, 50848], "temperature": 0.0, "avg_logprob": -0.14530766010284424, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.0024146889336407185}, {"id": 194, "seek": 142316, "start": 1432.8400000000001, "end": 1442.44, "text": " things in function if parameter or yeah anyway so this case where my language looks really too", "tokens": [50848, 721, 294, 2445, 498, 13075, 420, 1338, 4033, 370, 341, 1389, 689, 452, 2856, 1542, 534, 886, 51328], "temperature": 0.0, "avg_logprob": -0.14530766010284424, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.0024146889336407185}, {"id": 195, "seek": 142316, "start": 1442.44, "end": 1447.72, "text": " functional like you don't really can't really do while loops you can have forage but you can't have", "tokens": [51328, 11745, 411, 291, 500, 380, 534, 393, 380, 534, 360, 1339, 16121, 291, 393, 362, 337, 609, 457, 291, 393, 380, 362, 51592], "temperature": 0.0, "avg_logprob": -0.14530766010284424, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.0024146889336407185}, {"id": 196, "seek": 144772, "start": 1447.72, "end": 1455.0, "text": " while and because you need kind of mutability to be able to say okay do that until that thing", "tokens": [50364, 1339, 293, 570, 291, 643, 733, 295, 5839, 2310, 281, 312, 1075, 281, 584, 1392, 360, 300, 1826, 300, 551, 50728], "temperature": 0.0, "avg_logprob": -0.14343150002615793, "compression_ratio": 1.6573033707865168, "no_speech_prob": 0.014457670971751213}, {"id": 197, "seek": 144772, "start": 1455.0, "end": 1465.08, "text": " it's no longer valid and and I'm kind of thinking about having a bit of mutability constraint because", "tokens": [50728, 309, 311, 572, 2854, 7363, 293, 293, 286, 478, 733, 295, 1953, 466, 1419, 257, 857, 295, 5839, 2310, 25534, 570, 51232], "temperature": 0.0, "avg_logprob": -0.14343150002615793, "compression_ratio": 1.6573033707865168, "no_speech_prob": 0.014457670971751213}, {"id": 198, "seek": 144772, "start": 1465.08, "end": 1472.1200000000001, "text": " it solves this problem and there is subtyping because actually with types I as I show them I cannot", "tokens": [51232, 309, 39890, 341, 1154, 293, 456, 307, 1422, 874, 3381, 570, 767, 365, 3467, 286, 382, 286, 855, 552, 286, 2644, 51584], "temperature": 0.0, "avg_logprob": -0.14343150002615793, "compression_ratio": 1.6573033707865168, "no_speech_prob": 0.014457670971751213}, {"id": 199, "seek": 147212, "start": 1472.12, "end": 1482.6, "text": " say that's a type is of another type and it's not that art you but I didn't did it yet because I", "tokens": [50364, 584, 300, 311, 257, 2010, 307, 295, 1071, 2010, 293, 309, 311, 406, 300, 1523, 291, 457, 286, 994, 380, 630, 309, 1939, 570, 286, 50888], "temperature": 0.0, "avg_logprob": -0.1837855275472005, "compression_ratio": 1.6077348066298343, "no_speech_prob": 0.01343522872775793}, {"id": 200, "seek": 147212, "start": 1482.6, "end": 1491.1599999999999, "text": " have keep track of all the type declare and can explain that later if there is question about it", "tokens": [50888, 362, 1066, 2837, 295, 439, 264, 2010, 19710, 293, 393, 2903, 300, 1780, 498, 456, 307, 1168, 466, 309, 51316], "temperature": 0.0, "avg_logprob": -0.1837855275472005, "compression_ratio": 1.6077348066298343, "no_speech_prob": 0.01343522872775793}, {"id": 201, "seek": 147212, "start": 1492.36, "end": 1499.56, "text": " and and yeah and there is a lot of things to do and societal is a part-time project but maybe one", "tokens": [51376, 293, 293, 1338, 293, 456, 307, 257, 688, 295, 721, 281, 360, 293, 33472, 307, 257, 644, 12, 3766, 1716, 457, 1310, 472, 51736], "temperature": 0.0, "avg_logprob": -0.1837855275472005, "compression_ratio": 1.6077348066298343, "no_speech_prob": 0.01343522872775793}, {"id": 202, "seek": 149956, "start": 1499.56, "end": 1505.08, "text": " day it will no longer be a part-time project it's really nice to have a language server protocol", "tokens": [50364, 786, 309, 486, 572, 2854, 312, 257, 644, 12, 3766, 1716, 309, 311, 534, 1481, 281, 362, 257, 2856, 7154, 10336, 50640], "temperature": 0.0, "avg_logprob": -0.12392884406490602, "compression_ratio": 1.6235955056179776, "no_speech_prob": 0.00745871476829052}, {"id": 203, "seek": 149956, "start": 1505.08, "end": 1511.24, "text": " maybe you are aware of that debug adapter protocol too it's kind of the language was designed the", "tokens": [50640, 1310, 291, 366, 3650, 295, 300, 24083, 22860, 10336, 886, 309, 311, 733, 295, 264, 2856, 390, 4761, 264, 50948], "temperature": 0.0, "avg_logprob": -0.12392884406490602, "compression_ratio": 1.6235955056179776, "no_speech_prob": 0.00745871476829052}, {"id": 204, "seek": 149956, "start": 1511.24, "end": 1519.3999999999999, "text": " first place to not compile to JavaScript but to compile to kind of so I made a read me you can", "tokens": [50948, 700, 1081, 281, 406, 31413, 281, 15778, 457, 281, 31413, 281, 733, 295, 370, 286, 1027, 257, 1401, 385, 291, 393, 51356], "temperature": 0.0, "avg_logprob": -0.12392884406490602, "compression_ratio": 1.6235955056179776, "no_speech_prob": 0.00745871476829052}, {"id": 205, "seek": 151940, "start": 1519.48, "end": 1531.24, "text": " try it if you want and that's basically the end of my talk thank you", "tokens": [50368, 853, 309, 498, 291, 528, 293, 300, 311, 1936, 264, 917, 295, 452, 751, 1309, 291, 50956], "temperature": 0.0, "avg_logprob": -0.3667170715332031, "compression_ratio": 1.1645569620253164, "no_speech_prob": 0.04193560779094696}, {"id": 206, "seek": 151940, "start": 1535.16, "end": 1537.24, "text": " are there any questions", "tokens": [51152, 366, 456, 604, 1651, 51256], "temperature": 0.0, "avg_logprob": -0.3667170715332031, "compression_ratio": 1.1645569620253164, "no_speech_prob": 0.04193560779094696}, {"id": 207, "seek": 154940, "start": 1550.1200000000001, "end": 1560.3600000000001, "text": " yeah so the question was what's programming language parted part theme I use as inspiration", "tokens": [50400, 1338, 370, 264, 1168, 390, 437, 311, 9410, 2856, 644, 292, 644, 6314, 286, 764, 382, 10249, 50912], "temperature": 0.0, "avg_logprob": -0.31264400482177734, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.043580442667007446}, {"id": 208, "seek": 154940, "start": 1560.3600000000001, "end": 1566.1200000000001, "text": " was this just JavaScript or something else for example rest or functional programming and the", "tokens": [50912, 390, 341, 445, 15778, 420, 746, 1646, 337, 1365, 1472, 420, 11745, 9410, 293, 264, 51200], "temperature": 0.0, "avg_logprob": -0.31264400482177734, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.043580442667007446}, {"id": 209, "seek": 154940, "start": 1566.1200000000001, "end": 1573.88, "text": " answer is I work in for the asset for an ascal company so I am really a functional programmer", "tokens": [51200, 1867, 307, 286, 589, 294, 337, 264, 11999, 337, 364, 382, 9895, 2237, 370, 286, 669, 534, 257, 11745, 32116, 51588], "temperature": 0.0, "avg_logprob": -0.31264400482177734, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.043580442667007446}, {"id": 210, "seek": 157388, "start": 1574.44, "end": 1582.2, "text": " indeed and before I was working with rest and I really love rest but I I kind of feeling that", "tokens": [50392, 6451, 293, 949, 286, 390, 1364, 365, 1472, 293, 286, 534, 959, 1472, 457, 286, 286, 733, 295, 2633, 300, 50780], "temperature": 0.0, "avg_logprob": -0.1712419656606821, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.022772550582885742}, {"id": 211, "seek": 157388, "start": 1582.2, "end": 1590.44, "text": " trust is not a language for anyone because rest ergonomic make it sometimes really painful to use", "tokens": [50780, 3361, 307, 406, 257, 2856, 337, 2878, 570, 1472, 42735, 21401, 652, 309, 2171, 534, 11697, 281, 764, 51192], "temperature": 0.0, "avg_logprob": -0.1712419656606821, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.022772550582885742}, {"id": 212, "seek": 157388, "start": 1590.44, "end": 1598.1200000000001, "text": " for writing like most of the program tasks you you want to write in your daily program or life", "tokens": [51192, 337, 3579, 411, 881, 295, 264, 1461, 9608, 291, 291, 528, 281, 2464, 294, 428, 5212, 1461, 420, 993, 51576], "temperature": 0.0, "avg_logprob": -0.1712419656606821, "compression_ratio": 1.615819209039548, "no_speech_prob": 0.022772550582885742}, {"id": 213, "seek": 159812, "start": 1598.6799999999998, "end": 1608.84, "text": " so my first motivation was to try modestly to do a better rest like a rest but that's with maybe", "tokens": [50392, 370, 452, 700, 12335, 390, 281, 853, 1072, 11154, 281, 360, 257, 1101, 1472, 411, 257, 1472, 457, 300, 311, 365, 1310, 50900], "temperature": 0.0, "avg_logprob": -0.13609794775644937, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.004368179477751255}, {"id": 214, "seek": 159812, "start": 1608.84, "end": 1618.12, "text": " more simple rules and more easy to use but still the same kind of guarantee but it's still the idea", "tokens": [50900, 544, 2199, 4474, 293, 544, 1858, 281, 764, 457, 920, 264, 912, 733, 295, 10815, 457, 309, 311, 920, 264, 1558, 51364], "temperature": 0.0, "avg_logprob": -0.13609794775644937, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.004368179477751255}, {"id": 215, "seek": 159812, "start": 1618.12, "end": 1624.1999999999998, "text": " a bit behind this project but I I like what I said in the beginning of the talk I try to", "tokens": [51364, 257, 857, 2261, 341, 1716, 457, 286, 286, 411, 437, 286, 848, 294, 264, 2863, 295, 264, 751, 286, 853, 281, 51668], "temperature": 0.0, "avg_logprob": -0.13609794775644937, "compression_ratio": 1.6101694915254237, "no_speech_prob": 0.004368179477751255}, {"id": 216, "seek": 162420, "start": 1624.92, "end": 1631.0, "text": " to I try to make something small and hackable in on which I can really experiment if my", "tokens": [50400, 281, 286, 853, 281, 652, 746, 1359, 293, 10339, 712, 294, 322, 597, 286, 393, 534, 5120, 498, 452, 50704], "temperature": 0.0, "avg_logprob": -0.1657925397157669, "compression_ratio": 1.6441717791411044, "no_speech_prob": 0.0037050978280603886}, {"id": 217, "seek": 162420, "start": 1631.0, "end": 1637.48, "text": " semantic work in my syntax is is an ambiguous this kind of stuff and it's more easy to have", "tokens": [50704, 47982, 589, 294, 452, 28431, 307, 307, 364, 39465, 341, 733, 295, 1507, 293, 309, 311, 544, 1858, 281, 362, 51028], "temperature": 0.0, "avg_logprob": -0.1657925397157669, "compression_ratio": 1.6441717791411044, "no_speech_prob": 0.0037050978280603886}, {"id": 218, "seek": 162420, "start": 1639.88, "end": 1645.96, "text": " something small that work on which you can experiment and see if it's usable rather than", "tokens": [51148, 746, 1359, 300, 589, 322, 597, 291, 393, 5120, 293, 536, 498, 309, 311, 29975, 2831, 813, 51452], "temperature": 0.0, "avg_logprob": -0.1657925397157669, "compression_ratio": 1.6441717791411044, "no_speech_prob": 0.0037050978280603886}, {"id": 219, "seek": 164596, "start": 1646.8400000000001, "end": 1651.88, "text": " it's a bigger goal I have I had in the beginning which was more inspired by", "tokens": [50408, 309, 311, 257, 3801, 3387, 286, 362, 286, 632, 294, 264, 2863, 597, 390, 544, 7547, 538, 50660], "temperature": 0.0, "avg_logprob": -0.28485658168792727, "compression_ratio": 1.3524590163934427, "no_speech_prob": 0.007507517002522945}, {"id": 220, "seek": 164596, "start": 1652.52, "end": 1657.96, "text": " yeah rest or functional programming overall yeah thanks for the question", "tokens": [50692, 1338, 1472, 420, 11745, 9410, 4787, 1338, 3231, 337, 264, 1168, 50964], "temperature": 0.0, "avg_logprob": -0.28485658168792727, "compression_ratio": 1.3524590163934427, "no_speech_prob": 0.007507517002522945}, {"id": 221, "seek": 164596, "start": 1671.24, "end": 1672.76, "text": " so uh one of the", "tokens": [51628, 370, 2232, 472, 295, 264, 51704], "temperature": 0.0, "avg_logprob": -0.28485658168792727, "compression_ratio": 1.3524590163934427, "no_speech_prob": 0.007507517002522945}, {"id": 222, "seek": 167596, "start": 1675.96, "end": 1677.3400000000001, "text": " you", "tokens": [50408, 291, 50433], "temperature": 0.8, "avg_logprob": -0.9944415092468262, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.12150885164737701}], "language": "en"}