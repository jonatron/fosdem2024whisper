{"text": " Welcome to our next talk. Using your laptop TPM as a secure key store. How are we there that? From James Potomly, welcome. Have a fun. Thank you. Thank you very much. So I have been working with TPMs for quite a long time, but my history goes back way, way before that. I mostly began life as a kernel developer in Linux. A long, long time ago, I got into open source as business advocacy at least over a decade ago. I think my history with Linux kernel actually began before some of you were born now because we're all getting on a bit. I've been a kernel developer ever since, well I've been a kernel maintainer ever since 2002, this because he subsystem. I also think whether other architectures like PA risk have done a bit of arm, obviously we're forced to do risk five because it's a new trendy thing. I've been doing containers for a long, long time. I should probably be in the container dev room, but I have to be here, here to talk to you. And I'm what's called a reluctant TPM coder. The reason I'm a reluctant TPM coder is because I got into the TPM primarily because of my interest in actually using it as a security device to store keys. And part of the reason I got into that is because in the early days of Linux, we had a break in at kernel.org and everybody was forced to actually use more security around the SSH keys we used to push the kernel tree. And part of this was they gave us a Yubi key. And you know, these are these nice key dongles you plug in. And that Yubi key just did one key. And I was sort of like, well, but I don't have just one key. I've got my signing key and I've got my SSH key. And I actually use a couple more sub keys. And you know, I've got these keys for this. And so by the time I'd actually put all of my keys onto these Yubi key dongles, you've got about a fistful of them. And if you were here, I used to get Ted Cho to stand up and show me his Yubi key fistful for Google because he's got many, many more than I have. He's got about 20, which is pretty much useless. So what I was trying to do was to use the TPM of my laptop to replace all of these keys and yet still have exactly the same security as you would with a hardware dongle. The reason for Eluctant is because TPMs are really nasty things to program. This is why they actually haven't penetrated very well throughout the ecosystem. And the other point is you will actually not find a non-relectant TPM programmer. Pretty much everybody who stands up and gives you a talk about the TPM will always say they got into it for some other reason. Nobody loves the TPM is the moralfulness. Here's some more details about me because I've been blogging about this for a long time. So you can go to my blog site and there are tons of articles about the TPM. I'm afraid my blog is a bit stream of consciousness. The articles are in order of what I got interested in yesterday. And that means that there's a lot of stuff that isn't TPM on the blog. But I've usually got it tagged and labeled so you should be able to find the TPM stuff you're interested in. Thanks to FOSDAM, we all do matrix stuff now. So that's my matrix login. It's on my own server, so I run most of my own things. And you can get my GPG key. I'm not going to put up a key fingerprint because you get it over Dain instead. So Dain is this security protocol that goes over DNSSEC straight to my domain and actually pulls the GPG key directly from there. It's one of the ways you can actually replace the key distribution network of GPG. Of course another one is Web Key Distribution and all sorts of other things. But this command is actually the one you use to get my key and it's the one I was just training Lieness on about a week ago when he was wittering about the fact that my key expires quite often. So let's get started with YTPM, so security and trust. Everybody needs help protecting secrets. So I gave you my story of why I got interested in it. It was essentially protect secrets. Everybody has this need. And usually in computing terms, your secret is associated with an asymmetric key of some sort. For most people in this room, I bet you it's probably an RSA key. It's probably your GPG long-lived certification key. For more modern people, you're moving to elliptic curve keys. The reason for this is basically bits of security. So quantum computers, assuming we can't run Shor's algorithm, which just allows them to factor RSA and of course elliptic curves, if they come along, there's another algorithm called Grover's algorithm which dramatically reduces the amount of time it will take to do a brute force attack on a key. And so NEST and most government agencies are recommending we double the number of security bits in our keys. So if you have an RSA 2024 key, you've got about 112 bits of security. Most of my keys are elliptic curve, they're P256. I've got about 128 bits of security. But the minimum recommendation is going to be 256, and we're all going to have to upgrade to that. 256 bits of security in RSA equates to about 15,000 and something or other in terms of bits that you need for an RSA key. Effectively, it's an RSA 16K key. These keys are way too wieldy to actually be useful in practice, and so everybody is going to be forced to use elliptic curve keys shortly. And obviously, if these keys get stolen, the user can be impersonated. And the current state of the art is all of these key dongles, as I said. And I think we should do better than this. That statement about them carrying one key is no longer entirely true. Some of the more decent UB key ones can now carry up to three keys, but it's still way too small a number. And the good thing about a TPM is that the key does not have to be stored in the hardware. So TPM hardware actually has a small storage space as well you could use. But one of the things you can do with the TPM is actually load the key from the file into the TPM. So effectively, you can have thousands and thousands of keys on the same TPM. In fact, it just scales as far as your file system storage does. The other good thing about TPM keys is that automatically two factor. So let's conduct a little experiment about two factor authentication. Who uses USB keys in this room? Keep your hand up if you use a pin or a password with that USB key. That's actually pretty good. So about 20% of the hands went down. So the point is, even if you have a USB key and you don't use a pin or password, you're not two factor. Two factor requires something you know, which is the password, and something you have, which would be the key. So with the TPM, it's the authority for the key, which is what I proved. It's a passphrase I used to prove to the TPM. I'm the owner of the key, and something which I have, which is of course access to the TPM. So for TPM basics, effectively the TPM is a separate security module that's present in pretty much all laptops. This is an Infineon mobile TPM. The TPM is that little chip there. Sorry, my battery is running down on this. So I think I've got one shot out of the laser pointer, so I won't use it yet. But the big thing on the top is actually the LPC bus connector. So as you can see, the chip is tiny. The major component of this is actually connection to the bus. They've been ubiquitous for a while now. So they've been present in laptops for at least the last 20 years. Originally at TPM 1.2, but TPM 2.0 is going through the ecosystem. The reason why everybody should have a TPM 2.0, and if you only have a TPM 1.2, you shouldn't be using it, is for agile cryptography. TPM 1.2, the specification is so old that the only hash it can do for signing is Char-1, which has been deprecated for quite a long time. So if you see Char-1 in any key signing process, most people will tell you not to use that and not to use that signature. And this basically means that TPM 1.2 is obsolete. The good thing about TPM 2.0 is it has agile cryptography, although it's not as agile as you think. If I give you a list of all the algorithms my current TPM can do, it's basically four. It can do RSA 2K, it can do NIST P256 elliptic curve, it can do the burrito and airing curve, and I was hoping to say it could do P384, but I actually checked it just before the talk and it can't. So my laptop in fact can only do three algorithms. The actual functions that a TPM can do are many that vary than one run way beyond key storage. So shielded key handling is the big one that I'm talking about today, but it can also do something called measurement. If you've heard of measured boot, that's a function that a TPM does, and that was actually the original function that a TPM was invented to perform. It can also do something called data sealing. Data sealing means that you put a blob of data into the TPM and it only releases it back to you under certain circumstances. Effectively we use this for symmetric keys. So your disk encryption key on your laptop for instance would be stored as a sealed key blob that would be released to the kernel when everything goes right. And I'll actually be talking about that in the TPM and kernel session tomorrow. And then the final function a TPM does is attestation. If you're doing things like measurements, you need to prove to somebody else what the measurements you collected actually were. And so the TPM is capable of forming a signature over a set of measurements that can be verified back to this TPM and is therefore used as proof to somebody else that what you say is correct. But obviously today I'm only talking about shielded key handling. So none of the other three functions of the TPM will be covered. So keys inside the TPM are stored in hierarchies, which means they have a theoretical hierarchy with a root key at the top and then they have other keys descending off the root key. You can actually have intermediate keys in this hierarchy. The only reason it's called a hierarchy is because of the way the TPM works. It encrypts the key file that you get back from a TPM to a symmetric key that's stored in the hierarchy. The top key of the hierarchy is always called the primary. TPM 2 has four hierarchies, which basically mean four primary keys, but there's the platform hierarchy is never used. It belongs to the film I guys and they don't use it. The endorsement hierarchy is used for attestation. The storage hierarchy is where we put our keys and the null hierarchy is also pretty much never used because it's volatile. The null key changes every time you reboot your TPM and that means that you don't have a permanent key. You can actually encrypt to it because it changes every time. So a key file from a null hierarchy on one reboot would encrypt differently from the key file on the next reboot. So effectively we only use the storage hierarchy for keys. Like I said, TPM 1.2 was char and RSA and is therefore deprecated. TPM 2 can do RSA, char 256, char 512 is actually present on most of them, and it can do elliptic curve algorithms, which is really useful. TPM 1.2 has this agile cryptography because instead of actually storing keys in its internal structure, it stores 128 bit number called a seed. And from this seed it actually uses a key derivation function to get from the seed to whatever key you want. This sounds really good and it is because the seed is just a random number. Every time you initialize a TPM, which you can do, it will choose a new set of random numbers. So the storage seed is stored as this 128 bit number and from it you derive either an RSA key or elliptic curve key or whatever else you want. The key derivation algorithm ensures the same seed as long as you have the same number, it always comes back with the same public-private key pair or the same symmetric key, which is useful. But the problem is that the key derivation function for things like RSA involves finding prime numbers. So there is a special key derivation function that means you always find the same prime numbers, but you still have to conduct a prime search. The problem for a TPM is it is a very slow processing engine and that means it takes a long time to do prime searches. So creating a key from a seed on a TPM2 can take a long time. So this is my old laptop. It takes 43 seconds to actually do a prime search and construct the correct RSA 2048 primary from its seed. My new laptop is actually using an Intel firmware TPM, which is supposed to operate on the CPU, and it still takes 7 seconds to actually derive an RSA key. So the reason I use elliptic curve keys is just because they are much, much faster. An elliptic curve key derivation to a TPM is pretty much a linear-like operation. It doesn't involve finding primes. And the storage seed can be changed in a TPM. There is a special command to do that. And the reason it's useful is because if you're storing all of your keys in your TPM as key files and you want to shred every key that you ever own at once, all you have to do is change the primary seed because that changes the encryption key that is used to save and restore the keys. All your old keys will no longer restore into this TPM. So effectively your old keys become shredded, which is a useful thing to do if you're giving up your laptop or airport security wants to do something strange with it. So once you take a key that, say you create a key for GPG and you transfer it to a TPM key, that transfer is one way. You will never get that key back again from the TPM. So if you're using this for identity keys, you have to be careful because your identity keys tend to live a lot longer than your laptops. If you're an average developer like me, you'll tend to go through a new laptop once every, you know, I'd like to say two or three years. In fact, it's pretty expensive, so it's probably every five years. But my GPG key has been with me for the last 15 years and I would expect to keep it a lot longer than that. So my GPG key will outlive the TPM in this laptop. So the one thing I can't do is transfer the key irrevocably to the laptop. So what I usually do is I generate all my identity keys in a sort of vault, put them on a secure hard drive, lock it in the drawer on my desktop. Every time I get a new laptop, I convert the keys to TPM format for that laptop and then thereafter the unconverted keys just stay on my locked drawer. And the laptop travels with me with the keys in, but you can't get hold of them because they're TPM keys. And this never extractive property is really useful. Even the manufacturer of a TPM can't extract the key. There is a theoretical process you can go through where you decap a TPM, you pop its top off, and if I can get at the seeds within, I can actually derive the encryption key for the key files from them, and that would allow me to get the keys. But there is no programmatic way of doing this in the TPM. So the stated play of this is that unfortunately the TPM is really, really hard to use in program. So the way we try and enable these key systems for everybody to use is we try and actually enable them in the crypto systems. The TPM actually has a slight disagreement over the library standard you should use to program it. This is all technical, none of you need to know about this, but there are two implementations, one from Intel and one from IBM, conforming to two completely separate specifications that are both legitimately published by the TCG for no readily apparent reason, and therefore look completely different to program. And God knows why this is. But the key to enabling TPMs for key storage is just to make it simple. And that means that it needs really to be an integral part of the cryptography system that you use. So GPG, if you use it, needs to, as an integral part of GPG, just use TPMs. Open SSL, if that's your crypto system, needs as an integral part of that to use TPMs. And that's where everything would stay, except now there's a new added wrinkle in TPM security. So the TPM is usually attached to the bus, a bus in my laptop. For most Intel laptops, it's attached to something called the LPC bus, the low pin count bus. And this bus, unfortunately, is actually pretty easy to snoop. And if you can snoop the bus and you can snoop TPM transactions on it, I can actually intercept all of the commands that are flowing over the TPM. So for instance, if I'm wrapping my private key, the private key material has to go over this bus to the TPM, somebody could intercept it. If I'm not using HMAC-based passwords, the password goes in the clear over this bus, the authority for the key, you could intercept it. And there is actually an existing attack that does this, it's called TPM Genie. The guys at the National Security Lab in Canada actually constructed a dongle that you can easily attach to a laptop without actually really opening it up. And just extract all of the TPM traffic. There is also a theory that you can actually program another device on the LPC bus, like keyboard or the mouse, simply to reflect the commands back and also do the snooping for you. So there is a theory that this TPM Genie attack could also be a remote infiltration attack. It doesn't have to be an evil made local attack. But the upshot is, nobody uses a TPM nowadays without actually running security on the bus itself, the TPM talks to the laptop on. So all data and transit now has to be encrypted. And this makes TPMs go from sort of complicated to use to being excruciating extremely complicated to use. Because now you have to use something called a TPM session, which effectively is sort of like an ECDH encryption stream between the application and you. And you in the room do not want to know how to do this. I've actually written this code from scratch for the Linux kernel because right at the moment the Linux kernel doesn't do this. And at some point we're going to get a problem because of this. So we need to be doing this encryption. It really is horrible code. Nobody in there should actually have to do this. This is why all TPM coders are reluctant coders. So I do this so you don't have to. And for added sophistication, these sessions once we have them can actually be used to implement key policy. Key policy is useful because it can say things like, unless you booted this exact kernel version, do not release this key. Do not sign anything with this GPG key. Do not use this key. So key policy is something that I'll come on to a bit later. But sessions make using a TPM way more complicated. It's all complexity you hopefully don't need to know anything about because the more complex and difficult it is, the more reluctant everybody is to use it. So let's get on to crypto system enabling. Existing crypto systems mostly use password protected keys. You've all seen them in open SSH and GPG that if you cap the key file, the private key file, it's usually just a password encrypted key of some sort. Easy. TPM keys also require something called an authority. I mean, you can actually tell TPM not to use an authority. You can just use it without effectively non too factor like a lot of USB keys. But for the best use case, you've actually got a key authority. And it's basically a secret you just proved to the TPM, you know. If you do it over an HMAC session, you do an HMAC proof. It's effectively a challenge proof that you know the password. Password itself doesn't flow over the bus in the clear. And the key files contain a TPM key blobs and the password can just be used as the key authority. This is all very easy. The problem is the key file format needs standardizing. We have loads of crypto systems. One of the early successes of cryptography is that pretty much everybody uses the open SSL key format, which if you've seen it, it's that PEM file format, which is really useful. So in order to get interoperability in the TPM ecosystem, I've actually had to spend a long time trying to force people to standardize on one particular way of using TPM keys, one way of writing them. And pretty much over the last seven years, everybody has actually agreed to do this. Well, an IBM who can't agree on anything over the TPM have agreed to do this. And so we actually have, oh, well, apart from system D, who's a late comer to the TPM consumer of space, everything else uses a standard key format. And that key format is currently standardized on my website, but ultimately I'm hoping to make it an RFC so that it will just be part of the industry. And so then, as long as the crypto system recognizes the key file, everything should just work. You can use a TPM based key file in exactly the same place as you just used a private key file. Everything should just work through the TPM. All your cryptography operations become naturally secure, which is useful property. And you don't need to know anything about the TPM. All you need to do is know how to do a one time conversion of your key, and that's it. And obviously you need some discipline around key backup. As I said, if you convert your key and remove the original, you have no way of separating that key from that laptop. Now, lots of keys are ephemeral, so perhaps that's the way you should use some of your keys. But some keys represent your identity and should survive the laptop. So you need to be careful knowing which key is which and how you should use it. So some discipline around this. The advantages are easy. You only need to trust the TPM. TPMs have been manufactured by a lot of countries all over the world. Israel is now a current one. There have been allegations the NSA put a back door in it, but currently, if you remember two talks ago, the guy was talking about reproducible bills. We actually now have a standard software model for a TPM that manufacturers are supposed to provably conform to. So we should have proof that there are no back doors on behalf of the NSA. Of course, they could be listening on the bus or something. And the great thing is, even if you take away my private key file, you can't extract the key from it without being in possession of my laptop. Everybody when I used to make this statement said, prove it. So there is an SSH private key. I've helpfully removed the password from it, so it has no password. It's my TPM key. If you actually scan that QR code, you will get the private key. And anybody can actually see this. You can't do this with an ordinary private key because I'd be giving away with my secrets. But I can do this with a TPM key. And just as a precaution for those of you figured out that this key would be usable if you got hold of the laptop that produced it, it wasn't produced by this laptop sitting on the desk. It was produced by a laptop sitting back home. So don't mug me late at night to try and get this. But this is the SSH key that I use for logging into kernel.org. And I'm now just publishing the secret part of that key so confident and I that the TPM will protect those secrets. So apart from conversion to TPM format, there is no change to the workflow. So this is hopefully what makes it simple for all of you to actually use TPM keys in your everyday life. The disadvantages are, as I said, the key is tied to a physical TPM, which is part of your laptop. When your laptop is retired or dies, that key is no longer accessible. You can no longer use it. The keys all need to be reconverted or duplicated, therefore, when you change laptop, if it's a long-lived key. And the TPM is slow. It can't process hundreds of keys. This is the reason why the TPM has a key ceiling operation, because TPM is way too slow to use for symmetric encryption like disk encryption. So the way you use disk encryption with a TPM is the key is actually sealed to the TPM. But if the TPM agrees and you provide the right password and all the policy satisfies, it will actually release that key into the kernel, into the open, where it can then actually be used by the main CPU for symmetric cryptography. But for asymmetric keys for elliptic curve and RSA, the TPM itself is doing the key operations. The private part of the key is never actually revealed. So the current status is that for open SSL1, the only way of using external crypto systems was something called an open SSL engine. And fortunately, we now have two of these for the TPM. So this is one I wrote, the top one, the open SSL2 TPM engine. This is one Intel guys wrote to go with the Intel TSS, which is the TPM2 TSS engine. Both of those are fairly good and fully functional as open SSL engines. For open SSL3, there is a problem in that they are trying to deprecate engines. Now, right at the moment, we're on open SSL... So when open SSL3 was coming up, they promised us point blank that if we hadn't converted our engines, they wouldn't work with open SSL3 full stop. They admitted when open SSL3.0 was released, this was a lie. And so open SSL3.0 still works with engines. They've just released open SSL3.1, which amazingly enough still works with engines. So the reason for this is because open SSL themselves internally uses engines and they're having a bit of difficulty deprecating their internal engines, and obviously they can't pull engine support until they can do that. So the engines will continue to work for a while. But there is a new mechanism, and it's by new, I mean this was excruciatingly and completely different from engine code. So I actually had to rewrite the entirety of the engine code to work with the provider. And then I did a little blog post about it, so if you're in the same position and have to convert an engine to a provider, I've got a detailed description of how to do it. It's not something I would wish on anybody, but it's finally been done. And we do have, even though it only says open SSLTPM2 engine because that's the name I chose for the project, before I knew it would have to become provider. So it's actually the same code that was in the previous engine is the core code is still there. I just separated it up, and I did a provider wrapper around it because the TPM code goes through a lot of tests and has to be provably correct. The last thing I wanted to do was rewrite all TPM code as well. My TPM system comes with Create TPM2 key. The Intel one comes with a Create key as well, but I've forgotten what it's called. This can also be used to convert ordinary keys to TPM-based keys, so it can be used to wrap effectively keys for the TPM. Elliptic curve issues. So TPM enabling works just fine, but the way that elliptic curves were programmed in the TPM, they didn't actually do the generic parameterized curves. They did specific named curves. This means that the only way you get to use elliptic curves with the TPM is if the curve is known to the TPM. And in fact, there are only really three mandated... Well, there's technically four because there's a Chinese curve called the SM something or other that's also mandated in the TPM, but nobody trusts the Chinese. So realistically, it's the NIST curves, and the Burrito-Nerring curve, the BN curve, is not something you should use. It was invented for direct anonymous attestation. It doesn't have as good security properties as the NIST curves, so realistically, you're down to only one elliptic curve you can actually use with the TPM. And the algorithms supports only ECDSA and ECDH, and this will be important because if you create a new GPG key, chances are it's told you to use a Bernstein 25519 curve, which is not part of the TPM, and it's actually not on the TCG radar for a very unfortunate reason. The 25519 is an Edwards curve, and Bernstein decided that the Edwards curve would have separate signature and separate Diffie-Hellman algorithms, and that means that the algorithms themselves, if for all agile cryptography in the TPM, are not present, which is a bit unfortunate. So don't wait, don't hold your breath waiting for 25519 to become a TPM standard curve. Chances are it's not going to be. If you want to use the TPM with elliptic curves, you're going to have to embrace the NIST curves. The other problem when I said all this is simple is actually an open SSL complexity. Open SSL has a special API to load engine key files. If you don't have this in your program, it won't load engine key files. And the problem was that pretty much no consumers of open SSL code, you know, open SSH, open VPN, all of the ones that are based on open SSL had this API sitting in there. So I can present a TPM key file all I like to these programs, they won't recognize it, because they're not using the correct load routine. This annoyingly stupid problem has been fixed in open SSL 3, but it was basically a complete drag on the ecosystem for a long time because it's the barrier to TPM enabling is not the fact that I've written the engine, because that didn't take me very long, it's the fact that pretty much no code out there actually knows how to use an engine with a key file because of this API. Because the open SSL consumers always forget this. Open SSL is sort of like an API explosion, which I mean, so the fewer APIs you have to know, the easier you find it program, which is why everybody always forgets the engine APIs. But it is only a couple of extra lines in the code, so I have actually successfully enabled it in things like open VPN. It's actually been using, so what it does is it just, for no good reason, when you go to the open SSL command line, you have to name the key type. You've seen the inform DER, inform PAM. There's also actually an inform engine for everything else. But nobody in their right mind would program that. All you do is you try the DER loader first, then you try the PAM loader, and then you should try the engine loader. But everybody forgets to try the engine loader after the DER and the PAM loader. So I put the code into open VPN, and it's been in there since 2.5. Unfortunately, we had a dispute over the licensing, so it got removed again in 2.67. This was over a statement about Apache and open SSL being compatible at the binary level. You don't need to go into it, but these things happen even to the best intentioned people, unfortunately. The good news is that if you compile open VPN with open SSL 3, it just works, because all of this is fixed in open SSL 3. So hopefully, open SSL 3 will also rescue me from trying to enable engine loading in all of the other open SSL consumer programs that I want to use this with. Open SSH was converted to use engine keys. I have a patch for it. But because Libre SSL does not use engines, the open SSH people seem to be philosophically opposed to anything to do with engine keys. And there's another wrinkle for open SSH. The problem is the way open SSH feeds keys into the agent is actually done by the primes. And as you know, for a TPM key, it won't release the primes to you. You can only use the engine key through the TPM. You can't see what the source prime numbers are. So the way that the SSH communicates with its agent is actually incompatible with the way engine keys work. Compatibility is easy. Making it compatible is easy. There's just an engine extension to open SSH which says, I'm not going to use primes. I'm just going to tell you where the key file is located. Agent, pick up the key file, don't use the primes. Which was, I mean, it was about a 20 line patch. It's fairly easy. But like I said, open SSH philosophically opposed to this. So I still have to patch open SSH to get all of my open SSH keys to work. For open SSL 3, this problem is mostly fixed because the file provider now understands how to load keys from any other provider. It will actually query all the providers and say, do you recognize this key? And if one of them says yes, it will load the key successfully, which is really useful. It gets me out of all the engine stuff. Doesn't solve the open SSH problem because it's trying to pass in prime. So in an unpatched open SSH, you will still get an error because it can't extract primes from the key. Unfortunately. So you don't need separate key loading routines. Everything should just work. This is brilliant. The one real success story I have is GNU PG. So it actually, way, way back in 2018, I had a conversation at FOSDAM with Werner Almsberger, who does GPG. And we agreed that we, I would code the GPG to use TPM keys and he would take the code. And it was, again, it was another problem because GPG doesn't use any known crypto system. It uses G-crypt, which is a very unusual cryptography library that I also wouldn't want to wish on anybody. But I was keen to get GPG supporting TPM keys because I use it on my laptop as well. So since version 2.3, it has supported them and version 2.3 is pretty old. It's a few revisions back. The main problem is that very few, even the bleeding edge distributions have this. Debbie and, Debbie in testing is still on 2240. I think Fedora is just about moving to open SSH to GPG 2.4. Fortunately, OpenSUSA, which is the distribution I'm currently running, has been using GPG 2.3 and then 2.4 for the past few years. So that's why I don't have the problem that you would have if you tried to use this. And key conversion is very easy. You just do GPG edit key, my key. You switch to the private key. You select the private key and you type key to TPM. Remember, this command is irreversible. Once, and it's not like the standard GPG thing is when you exit, it will ask you, do you really want to do this? Each TPM is instantaneous. It will do it immediately. So if you don't have a backup of your GPG keys, you've lost them because it will delete the old key file. So just be aware of that. But other than that, it's all fairly seamless. And other TPM supporting utilities are things like GNU TLS actually got it from OpenConnect, OpenConnect's for Cisco VPNs, SB sign tools is for secure boot, EFI tools is another secure boot thing. Oh, PKCS11 export is the way I'm hoping finally to get OpenSSH to do this because there's a guy from Red Hat called Jacob Yellen who's actually doing PKCS11 support in OpenSSH. And so the PKCS11 export is actually just a program that takes an OpenSSH key and exports it as a PKCS11 key, but it knows how to do it with any engine key or any provider key. So I can use this to actually export my OpenSSL keys as PKCS11 keys. It's also useful if you have Firefox because Firefox resolutely refuses to understand the basic OpenSSL key format. It insists you have to use the Netscape system key format, which nobody uses, but it also understands PKCS11. So this is the way I also use client certificate keys with Firefox as well. TPM key policies. So since TPM 2.0, it's actually supported a rich policy language based on things like PCR values, which are measured boot parameters, what have you, object secrets, it includes ands and aurs, which means you can build elaborate policy chains. So with TPM 1.2, the policy was a single statement. With TPM 2.0, the policy can be a chain of statements, and that can be this and this and this or this and this and this and this or this and so on and so forth. So you can build a very, very rich policy around how this key should be used. I wouldn't advise you to because it's sort of difficult to use, but you can do it. And policy is described to the key by a single hash value. So the way you construct policy is you use a session register. You have to execute all the policy statements in sequence, and if you've done it correctly, the hash value in that register matches the one in the key file and everything just works. The problem is that if you look at a key file, the policy is just a single hash. You can't go from the hash to the statements that were used to create the policy. So one of the things you have to do, one of the things the key file format does for you, is it actually stores all of the policy statements in a way that actually allow you to reconstruct the policy. So as long as you're using the standard key file format, the policy will always follow your keys. And the reason you need to do this is because if you forget which policy goes with which key, you suddenly get a combinatoric explosion of trying to figure out all the policies sort of I have lying around. Do they match this hash? How long is it actually going to take me to get up to this hash and match it? Yeah, I have to know how to execute the statements. And like I said, standardizing the file format meant that we could standardize the way the policy is presented. So all you have to know how to do now is to construct the policy. You don't need to know the mechanics of how it's done on the back end. We'll just do it for you. One of the useful things about policy is that as you saw, policy was a hash. If that hash is tied to the key, it can't be changed once the key is created. But the TPM has quite a few mechanisms that allow you to add policy after the fact. And the most standard mechanism for doing this is something called policy signing. So the usual way that the TPM works is that and policy is constructed just by a hash extension, which is the same way TPM's work, TPM PCR's work. So you put a hash in there, you put it side by side with the original value that was in the register, you hash it again, that becomes the new value, and you keep building up like this. If the TPM sees a signed policy statement, it will actually throw that hash value away and start using the one from the signed policy, which effectively means you can use policy signing to replace any policy on the key, which is interesting and useful. And it means the key can be updated if you change PCR values. So now, if you boot a standard Linux kernel, it will actually hash the command line, the initial RAM disk, and the kernel all into PCR9. And this means that I can lock my key to only unlocking, not only if it's the kernel version I know, but it has to be booted with the correct initial RAM disk and the correct command line, which is another really useful feature, and if I upgrade my kernel, the PCR values will change, but I can calculate what they should be. I just add another signed policy to the key that says use this. And I can also delete signed policies from the key, but beware, deleting a signed policy does not revoke the policy. If somebody else comes across the old policy, they can still use it, signature will still match. It just removes it from the key. And all statements, and indeed signed policy statements, are all processed effectively as fragment chains. And the same mechanism can actually be used to execute multiple signed policies, and it will keep trying until one fits. At this particular time, I was going to try and do a demo. I think I have two minutes left. Well, let's see if we can do that. Come here. Actually, let's make that bigger. So everybody can just about see that. First of all, I should just edit the key. So this is my GPG secret key. If you go up here, what you see is that a lot of my non-revoked or expired keys are actually TPM protected. So I'm using all of my GPG keys in my TPM, which is a very useful property. Let's see. I've got about two minutes left. So let's just... So what I've done is I've just moved my actual key directory out of the way, and I'm just going to create a new key. So this is the way you generate keys quickly. And this P256 is the way you tell it to. The very secure passphrase I'm going to use is test. Yep. So this is... Oh, for God's sake. Okay, let's not do a demo. Let's just go straight on to questions. I already showed you I had TPM keys. So five minutes left. Any questions? Hi. It's not so much a question. It's more a comment, because you put system. We're not using any non-standard format that we came up with. We're just using civilization that the Intel stack suggests us to use. So we didn't really add anything on top of that. So, I mean, your specification, great. We have no problem at all. We're supporting this, but it's also very, very new. And it doesn't even support the stuff that we need. Like we, for example, use policy authorize.nv, which allows you to store policy hash in an nv index. It's what we built everything on. And if your spec can't color that yet, then it's also not really in the position yet to be used for this kind of stuff. But in general, I'm not opposed at all. Like you seem to insinuating that we did our own thing and didn't want to play balls, anyone else. That's just garbage. You totally find supporting anything that people can agree on. This is not an area you want to be pioneers in. We want that some people do the work for us and then we just move to that. That's entirely fine. But yeah, make sure, though, that the functionality that people need, in this case, like for system-y stuff, that at least, like, looking through the spec, I just did that on my phone. Maybe I've missed something, but it just doesn't cover the stuff that we need, which is policy authorize.nv, for example. But actually, it only covers everything other than the exceptional commands. Policy authorize.nv is an actually exceptional command, so it's already technically covered by the spec that's there. Signed policy is an exception command. So this is technical to do with the way the spec works. Well, you have to, like, it's the same thing as the assigned stuff because you just store it in the nv. But anyway, this is very technical. Like, looking through the spec, it's just not covering. All I'm saying is, you know, we're not the problem. Like, we're fine with supporting anything, but maybe putting our stuff on the slides, not the West Wing, to start getting the discussion going. No, just use the point there. I thought I had everything standardized on this key format and system D came along and wasn't. That was all the sliders there to do. There's no real difficulty transferring keys from one format to another. And also, the standard is ASN1. I know there are a lot of people who hate ASN1 want to use JSON instead. We use TPM2B stuff that the Intel stack gives us. But again, if you add it to the Intel stack, we're happy to use it. We just consume the APIs as a provider. We do not see our position in a role in innovating that. We just want to use libraries that work for us. And if the libraries don't support it, they don't. So it's already in the Intel stack. The Intel engine stack generates keys of this format. And which layer is that? I think it's the create TPM. It's not a TSS layer. It's the actual Intel rotor TPM engine that was on the slides. That TPM engine also uses this key format because it's designed to be used for open-source. We did it in the library, right? Like in the TSS library. The key conversion sits outside. I would like to invite you to get together in a deaf room place. Thank you. Hi. We still, okay. So thank you for the talk. My question was, since the policies are only treated as hashes, does it mean that you could eventually, regardless of practicality, find another policy set that produces the same result and use an alternative policy set to update access to the key? So the question was, could I get two policies that produce the same hash? The actual question you're asking me is, can I induce a hash collision with SHA256? And the answer to that is no. And the reason that two policies can't produce the same hash is because they've been very careful to actually use the input values that go into the hash that mean if the policy is different, the value in the statement is different, so the hash value always has to be different. So the chances of getting a policy hash collision are exactly the same as they would be if getting a SHA256 hash collision or whatever hash you use. Is there any reason to use, if you're on Linux, to use either IBM or Intel Stack versus just in kernel TPM resource manager? So if you're a consumer and you're not programming with TPM, there is no reason whatsoever to prefer one stack or the other. They all work equally well. There are no security problems with either of them. When correctly programmed, they will set up sessions and do everything right. Intel does have one problem in that the Intel code also has an engine sitting in it, but that engine doesn't actually use TPM security. So that's the one piece of the Intel stack that's wrong, but the IBM stack doesn't include an engine. I mean my engine is separate from the IBM stack. Well, resource management just works. So you're leading to the problem where the Intel TSS encourages people to contact safe sessions, right? This is the problem. And the kernel resource manager doesn't expect people to do that, so it doesn't do a technical operation called regapping, right? The reason it doesn't do it is because I wrote that resource manager and I never had a reason to use it for regapping, so it just doesn't do it. I've already told the Intel people that if they want to use it like this, the kernel would be perfectly happy to accept patches to do de-gapping, and they're fairly easy to write. There is actually, and we're getting onto kernel stuff, a point at which the kernel itself may need to do de-gapping. One of the things that we're looking at is trying to use a permanent session within the kernel for certain key operations. If we do that, that session will be context saved, then we will have to do de-gapping and everything will just work. The problem is that the kernel coding is just in time. I'm the person doing it, and I haven't got around to it yet. So if you want to use the Intel TSS with saved sessions, then you need to use the ABMRD resource manager. If you want to use saved sessions, everything just works. Many, many thanks for the great talk.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 15.0, "text": " Welcome to our next talk. Using your laptop TPM as a secure key store. How are we there", "tokens": [50364, 4027, 281, 527, 958, 751, 13, 11142, 428, 10732, 314, 18819, 382, 257, 7144, 2141, 3531, 13, 1012, 366, 321, 456, 51114], "temperature": 0.0, "avg_logprob": -0.4144406318664551, "compression_ratio": 1.1693548387096775, "no_speech_prob": 0.49466219544410706}, {"id": 1, "seek": 0, "start": 15.0, "end": 20.0, "text": " that? From James Potomly, welcome. Have a fun. Thank you.", "tokens": [51114, 300, 30, 3358, 5678, 9145, 298, 356, 11, 2928, 13, 3560, 257, 1019, 13, 1044, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.4144406318664551, "compression_ratio": 1.1693548387096775, "no_speech_prob": 0.49466219544410706}, {"id": 2, "seek": 2000, "start": 20.0, "end": 31.0, "text": " Thank you very much. So I have been working with TPMs for quite a long time, but my history", "tokens": [50364, 1044, 291, 588, 709, 13, 407, 286, 362, 668, 1364, 365, 314, 18819, 82, 337, 1596, 257, 938, 565, 11, 457, 452, 2503, 50914], "temperature": 0.0, "avg_logprob": -0.13755353721412453, "compression_ratio": 1.4256410256410257, "no_speech_prob": 0.5880866646766663}, {"id": 3, "seek": 2000, "start": 31.0, "end": 39.0, "text": " goes back way, way before that. I mostly began life as a kernel developer in Linux. A long,", "tokens": [50914, 1709, 646, 636, 11, 636, 949, 300, 13, 286, 5240, 4283, 993, 382, 257, 28256, 10754, 294, 18734, 13, 316, 938, 11, 51314], "temperature": 0.0, "avg_logprob": -0.13755353721412453, "compression_ratio": 1.4256410256410257, "no_speech_prob": 0.5880866646766663}, {"id": 4, "seek": 2000, "start": 39.0, "end": 48.0, "text": " long time ago, I got into open source as business advocacy at least over a decade ago. I think", "tokens": [51314, 938, 565, 2057, 11, 286, 658, 666, 1269, 4009, 382, 1606, 22011, 412, 1935, 670, 257, 10378, 2057, 13, 286, 519, 51764], "temperature": 0.0, "avg_logprob": -0.13755353721412453, "compression_ratio": 1.4256410256410257, "no_speech_prob": 0.5880866646766663}, {"id": 5, "seek": 4800, "start": 48.0, "end": 53.0, "text": " my history with Linux kernel actually began before some of you were born now because we're all", "tokens": [50364, 452, 2503, 365, 18734, 28256, 767, 4283, 949, 512, 295, 291, 645, 4232, 586, 570, 321, 434, 439, 50614], "temperature": 0.0, "avg_logprob": -0.17954132620212251, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.10150407254695892}, {"id": 6, "seek": 4800, "start": 53.0, "end": 59.0, "text": " getting on a bit. I've been a kernel developer ever since, well I've been a kernel maintainer", "tokens": [50614, 1242, 322, 257, 857, 13, 286, 600, 668, 257, 28256, 10754, 1562, 1670, 11, 731, 286, 600, 668, 257, 28256, 6909, 260, 50914], "temperature": 0.0, "avg_logprob": -0.17954132620212251, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.10150407254695892}, {"id": 7, "seek": 4800, "start": 59.0, "end": 65.0, "text": " ever since 2002, this because he subsystem. I also think whether other architectures like", "tokens": [50914, 1562, 1670, 17822, 11, 341, 570, 415, 2090, 9321, 13, 286, 611, 519, 1968, 661, 6331, 1303, 411, 51214], "temperature": 0.0, "avg_logprob": -0.17954132620212251, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.10150407254695892}, {"id": 8, "seek": 4800, "start": 65.0, "end": 69.0, "text": " PA risk have done a bit of arm, obviously we're forced to do risk five because it's a new", "tokens": [51214, 17718, 3148, 362, 1096, 257, 857, 295, 3726, 11, 2745, 321, 434, 7579, 281, 360, 3148, 1732, 570, 309, 311, 257, 777, 51414], "temperature": 0.0, "avg_logprob": -0.17954132620212251, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.10150407254695892}, {"id": 9, "seek": 4800, "start": 69.0, "end": 75.0, "text": " trendy thing. I've been doing containers for a long, long time. I should probably be in the", "tokens": [51414, 38596, 551, 13, 286, 600, 668, 884, 17089, 337, 257, 938, 11, 938, 565, 13, 286, 820, 1391, 312, 294, 264, 51714], "temperature": 0.0, "avg_logprob": -0.17954132620212251, "compression_ratio": 1.6911764705882353, "no_speech_prob": 0.10150407254695892}, {"id": 10, "seek": 7500, "start": 75.0, "end": 81.0, "text": " container dev room, but I have to be here, here to talk to you. And I'm what's called a", "tokens": [50364, 10129, 1905, 1808, 11, 457, 286, 362, 281, 312, 510, 11, 510, 281, 751, 281, 291, 13, 400, 286, 478, 437, 311, 1219, 257, 50664], "temperature": 0.0, "avg_logprob": -0.11585251696698078, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.06098606809973717}, {"id": 11, "seek": 7500, "start": 81.0, "end": 89.0, "text": " reluctant TPM coder. The reason I'm a reluctant TPM coder is because I got into the TPM primarily", "tokens": [50664, 33677, 314, 18819, 17656, 260, 13, 440, 1778, 286, 478, 257, 33677, 314, 18819, 17656, 260, 307, 570, 286, 658, 666, 264, 314, 18819, 10029, 51064], "temperature": 0.0, "avg_logprob": -0.11585251696698078, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.06098606809973717}, {"id": 12, "seek": 7500, "start": 89.0, "end": 95.0, "text": " because of my interest in actually using it as a security device to store keys. And part of the", "tokens": [51064, 570, 295, 452, 1179, 294, 767, 1228, 309, 382, 257, 3825, 4302, 281, 3531, 9317, 13, 400, 644, 295, 264, 51364], "temperature": 0.0, "avg_logprob": -0.11585251696698078, "compression_ratio": 1.518918918918919, "no_speech_prob": 0.06098606809973717}, {"id": 13, "seek": 9500, "start": 96.0, "end": 105.0, "text": " reason I got into that is because in the early days of Linux, we had a break in at kernel.org and", "tokens": [50414, 1778, 286, 658, 666, 300, 307, 570, 294, 264, 2440, 1708, 295, 18734, 11, 321, 632, 257, 1821, 294, 412, 28256, 13, 4646, 293, 50864], "temperature": 0.0, "avg_logprob": -0.12200560263537485, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.18750466406345367}, {"id": 14, "seek": 9500, "start": 105.0, "end": 111.0, "text": " everybody was forced to actually use more security around the SSH keys we used to push the kernel", "tokens": [50864, 2201, 390, 7579, 281, 767, 764, 544, 3825, 926, 264, 12238, 39, 9317, 321, 1143, 281, 2944, 264, 28256, 51164], "temperature": 0.0, "avg_logprob": -0.12200560263537485, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.18750466406345367}, {"id": 15, "seek": 9500, "start": 111.0, "end": 117.0, "text": " tree. And part of this was they gave us a Yubi key. And you know, these are these nice key dongles", "tokens": [51164, 4230, 13, 400, 644, 295, 341, 390, 436, 2729, 505, 257, 398, 836, 72, 2141, 13, 400, 291, 458, 11, 613, 366, 613, 1481, 2141, 33079, 904, 51464], "temperature": 0.0, "avg_logprob": -0.12200560263537485, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.18750466406345367}, {"id": 16, "seek": 9500, "start": 117.0, "end": 122.0, "text": " you plug in. And that Yubi key just did one key. And I was sort of like, well, but I don't have", "tokens": [51464, 291, 5452, 294, 13, 400, 300, 398, 836, 72, 2141, 445, 630, 472, 2141, 13, 400, 286, 390, 1333, 295, 411, 11, 731, 11, 457, 286, 500, 380, 362, 51714], "temperature": 0.0, "avg_logprob": -0.12200560263537485, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.18750466406345367}, {"id": 17, "seek": 12200, "start": 122.0, "end": 127.0, "text": " just one key. I've got my signing key and I've got my SSH key. And I actually use a couple more sub", "tokens": [50364, 445, 472, 2141, 13, 286, 600, 658, 452, 13393, 2141, 293, 286, 600, 658, 452, 12238, 39, 2141, 13, 400, 286, 767, 764, 257, 1916, 544, 1422, 50614], "temperature": 0.0, "avg_logprob": -0.08979556139777689, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.17879340052604675}, {"id": 18, "seek": 12200, "start": 127.0, "end": 133.0, "text": " keys. And you know, I've got these keys for this. And so by the time I'd actually put all of my keys", "tokens": [50614, 9317, 13, 400, 291, 458, 11, 286, 600, 658, 613, 9317, 337, 341, 13, 400, 370, 538, 264, 565, 286, 1116, 767, 829, 439, 295, 452, 9317, 50914], "temperature": 0.0, "avg_logprob": -0.08979556139777689, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.17879340052604675}, {"id": 19, "seek": 12200, "start": 133.0, "end": 139.0, "text": " onto these Yubi key dongles, you've got about a fistful of them. And if you were here, I used to get", "tokens": [50914, 3911, 613, 398, 836, 72, 2141, 33079, 904, 11, 291, 600, 658, 466, 257, 21849, 906, 295, 552, 13, 400, 498, 291, 645, 510, 11, 286, 1143, 281, 483, 51214], "temperature": 0.0, "avg_logprob": -0.08979556139777689, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.17879340052604675}, {"id": 20, "seek": 12200, "start": 139.0, "end": 146.0, "text": " Ted Cho to stand up and show me his Yubi key fistful for Google because he's got many, many more than", "tokens": [51214, 14985, 12366, 281, 1463, 493, 293, 855, 385, 702, 398, 836, 72, 2141, 21849, 906, 337, 3329, 570, 415, 311, 658, 867, 11, 867, 544, 813, 51564], "temperature": 0.0, "avg_logprob": -0.08979556139777689, "compression_ratio": 1.7521739130434784, "no_speech_prob": 0.17879340052604675}, {"id": 21, "seek": 14600, "start": 146.0, "end": 153.0, "text": " I have. He's got about 20, which is pretty much useless. So what I was trying to do was to use the TPM", "tokens": [50364, 286, 362, 13, 634, 311, 658, 466, 945, 11, 597, 307, 1238, 709, 14115, 13, 407, 437, 286, 390, 1382, 281, 360, 390, 281, 764, 264, 314, 18819, 50714], "temperature": 0.0, "avg_logprob": -0.07235396262442712, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.5955246090888977}, {"id": 22, "seek": 14600, "start": 153.0, "end": 159.0, "text": " of my laptop to replace all of these keys and yet still have exactly the same security as you would", "tokens": [50714, 295, 452, 10732, 281, 7406, 439, 295, 613, 9317, 293, 1939, 920, 362, 2293, 264, 912, 3825, 382, 291, 576, 51014], "temperature": 0.0, "avg_logprob": -0.07235396262442712, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.5955246090888977}, {"id": 23, "seek": 14600, "start": 159.0, "end": 165.0, "text": " with a hardware dongle. The reason for Eluctant is because TPMs are really nasty things to program.", "tokens": [51014, 365, 257, 8837, 500, 22631, 13, 440, 1778, 337, 2699, 11130, 394, 307, 570, 314, 18819, 82, 366, 534, 17923, 721, 281, 1461, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07235396262442712, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.5955246090888977}, {"id": 24, "seek": 14600, "start": 165.0, "end": 172.0, "text": " This is why they actually haven't penetrated very well throughout the ecosystem. And the other point", "tokens": [51314, 639, 307, 983, 436, 767, 2378, 380, 16183, 5468, 588, 731, 3710, 264, 11311, 13, 400, 264, 661, 935, 51664], "temperature": 0.0, "avg_logprob": -0.07235396262442712, "compression_ratio": 1.5265151515151516, "no_speech_prob": 0.5955246090888977}, {"id": 25, "seek": 17200, "start": 172.0, "end": 179.0, "text": " is you will actually not find a non-relectant TPM programmer. Pretty much everybody who stands up and gives you a", "tokens": [50364, 307, 291, 486, 767, 406, 915, 257, 2107, 12, 265, 1809, 394, 314, 18819, 32116, 13, 10693, 709, 2201, 567, 7382, 493, 293, 2709, 291, 257, 50714], "temperature": 0.0, "avg_logprob": -0.1064460580999201, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.01879803277552128}, {"id": 26, "seek": 17200, "start": 179.0, "end": 186.0, "text": " talk about the TPM will always say they got into it for some other reason. Nobody loves the TPM is the", "tokens": [50714, 751, 466, 264, 314, 18819, 486, 1009, 584, 436, 658, 666, 309, 337, 512, 661, 1778, 13, 9297, 6752, 264, 314, 18819, 307, 264, 51064], "temperature": 0.0, "avg_logprob": -0.1064460580999201, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.01879803277552128}, {"id": 27, "seek": 17200, "start": 186.0, "end": 193.0, "text": " moralfulness. Here's some more details about me because I've been blogging about this for a long time.", "tokens": [51064, 9723, 26872, 13, 1692, 311, 512, 544, 4365, 466, 385, 570, 286, 600, 668, 6968, 3249, 466, 341, 337, 257, 938, 565, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1064460580999201, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.01879803277552128}, {"id": 28, "seek": 17200, "start": 193.0, "end": 199.0, "text": " So you can go to my blog site and there are tons of articles about the TPM. I'm afraid my blog is a bit", "tokens": [51414, 407, 291, 393, 352, 281, 452, 6968, 3621, 293, 456, 366, 9131, 295, 11290, 466, 264, 314, 18819, 13, 286, 478, 4638, 452, 6968, 307, 257, 857, 51714], "temperature": 0.0, "avg_logprob": -0.1064460580999201, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.01879803277552128}, {"id": 29, "seek": 19900, "start": 199.0, "end": 205.0, "text": " stream of consciousness. The articles are in order of what I got interested in yesterday. And that means that", "tokens": [50364, 4309, 295, 10081, 13, 440, 11290, 366, 294, 1668, 295, 437, 286, 658, 3102, 294, 5186, 13, 400, 300, 1355, 300, 50664], "temperature": 0.0, "avg_logprob": -0.14484127807617186, "compression_ratio": 1.6223021582733812, "no_speech_prob": 0.007289897184818983}, {"id": 30, "seek": 19900, "start": 205.0, "end": 211.0, "text": " there's a lot of stuff that isn't TPM on the blog. But I've usually got it tagged and labeled so you should be able", "tokens": [50664, 456, 311, 257, 688, 295, 1507, 300, 1943, 380, 314, 18819, 322, 264, 6968, 13, 583, 286, 600, 2673, 658, 309, 40239, 293, 21335, 370, 291, 820, 312, 1075, 50964], "temperature": 0.0, "avg_logprob": -0.14484127807617186, "compression_ratio": 1.6223021582733812, "no_speech_prob": 0.007289897184818983}, {"id": 31, "seek": 19900, "start": 211.0, "end": 219.0, "text": " to find the TPM stuff you're interested in. Thanks to FOSDAM, we all do matrix stuff now. So that's my matrix", "tokens": [50964, 281, 915, 264, 314, 18819, 1507, 291, 434, 3102, 294, 13, 2561, 281, 479, 4367, 35, 2865, 11, 321, 439, 360, 8141, 1507, 586, 13, 407, 300, 311, 452, 8141, 51364], "temperature": 0.0, "avg_logprob": -0.14484127807617186, "compression_ratio": 1.6223021582733812, "no_speech_prob": 0.007289897184818983}, {"id": 32, "seek": 19900, "start": 219.0, "end": 226.0, "text": " login. It's on my own server, so I run most of my own things. And you can get my GPG key. I'm not going to put up a", "tokens": [51364, 24276, 13, 467, 311, 322, 452, 1065, 7154, 11, 370, 286, 1190, 881, 295, 452, 1065, 721, 13, 400, 291, 393, 483, 452, 26039, 38, 2141, 13, 286, 478, 406, 516, 281, 829, 493, 257, 51714], "temperature": 0.0, "avg_logprob": -0.14484127807617186, "compression_ratio": 1.6223021582733812, "no_speech_prob": 0.007289897184818983}, {"id": 33, "seek": 22600, "start": 226.0, "end": 233.0, "text": " key fingerprint because you get it over Dain instead. So Dain is this security protocol that goes over DNSSEC", "tokens": [50364, 2141, 30715, 570, 291, 483, 309, 670, 413, 491, 2602, 13, 407, 413, 491, 307, 341, 3825, 10336, 300, 1709, 670, 35153, 5879, 34, 50714], "temperature": 0.0, "avg_logprob": -0.0995823280720771, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.19579842686653137}, {"id": 34, "seek": 22600, "start": 233.0, "end": 242.0, "text": " straight to my domain and actually pulls the GPG key directly from there. It's one of the ways you can actually", "tokens": [50714, 2997, 281, 452, 9274, 293, 767, 16982, 264, 26039, 38, 2141, 3838, 490, 456, 13, 467, 311, 472, 295, 264, 2098, 291, 393, 767, 51164], "temperature": 0.0, "avg_logprob": -0.0995823280720771, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.19579842686653137}, {"id": 35, "seek": 22600, "start": 242.0, "end": 249.0, "text": " replace the key distribution network of GPG. Of course another one is Web Key Distribution and all sorts of other", "tokens": [51164, 7406, 264, 2141, 7316, 3209, 295, 26039, 38, 13, 2720, 1164, 1071, 472, 307, 9573, 12759, 9840, 30783, 293, 439, 7527, 295, 661, 51514], "temperature": 0.0, "avg_logprob": -0.0995823280720771, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.19579842686653137}, {"id": 36, "seek": 24900, "start": 249.0, "end": 256.0, "text": " things. But this command is actually the one you use to get my key and it's the one I was just training Lieness on", "tokens": [50364, 721, 13, 583, 341, 5622, 307, 767, 264, 472, 291, 764, 281, 483, 452, 2141, 293, 309, 311, 264, 472, 286, 390, 445, 3097, 441, 1053, 442, 322, 50714], "temperature": 0.0, "avg_logprob": -0.1493643642811293, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.4732002913951874}, {"id": 37, "seek": 24900, "start": 256.0, "end": 264.0, "text": " about a week ago when he was wittering about the fact that my key expires quite often. So let's get started with", "tokens": [50714, 466, 257, 1243, 2057, 562, 415, 390, 261, 3904, 278, 466, 264, 1186, 300, 452, 2141, 1278, 3145, 1596, 2049, 13, 407, 718, 311, 483, 1409, 365, 51114], "temperature": 0.0, "avg_logprob": -0.1493643642811293, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.4732002913951874}, {"id": 38, "seek": 24900, "start": 264.0, "end": 273.0, "text": " YTPM, so security and trust. Everybody needs help protecting secrets. So I gave you my story of why I got interested", "tokens": [51114, 398, 16804, 44, 11, 370, 3825, 293, 3361, 13, 7646, 2203, 854, 12316, 14093, 13, 407, 286, 2729, 291, 452, 1657, 295, 983, 286, 658, 3102, 51564], "temperature": 0.0, "avg_logprob": -0.1493643642811293, "compression_ratio": 1.5357142857142858, "no_speech_prob": 0.4732002913951874}, {"id": 39, "seek": 27300, "start": 273.0, "end": 281.0, "text": " in it. It was essentially protect secrets. Everybody has this need. And usually in computing terms, your secret is", "tokens": [50364, 294, 309, 13, 467, 390, 4476, 2371, 14093, 13, 7646, 575, 341, 643, 13, 400, 2673, 294, 15866, 2115, 11, 428, 4054, 307, 50764], "temperature": 0.0, "avg_logprob": -0.10403482206575163, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.3083139955997467}, {"id": 40, "seek": 27300, "start": 281.0, "end": 289.0, "text": " associated with an asymmetric key of some sort. For most people in this room, I bet you it's probably an RSA key. It's probably", "tokens": [50764, 6615, 365, 364, 37277, 17475, 2141, 295, 512, 1333, 13, 1171, 881, 561, 294, 341, 1808, 11, 286, 778, 291, 309, 311, 1391, 364, 497, 8886, 2141, 13, 467, 311, 1391, 51164], "temperature": 0.0, "avg_logprob": -0.10403482206575163, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.3083139955997467}, {"id": 41, "seek": 27300, "start": 289.0, "end": 298.0, "text": " your GPG long-lived certification key. For more modern people, you're moving to elliptic curve keys. The reason for this is", "tokens": [51164, 428, 26039, 38, 938, 12, 46554, 21775, 2141, 13, 1171, 544, 4363, 561, 11, 291, 434, 2684, 281, 8284, 22439, 299, 7605, 9317, 13, 440, 1778, 337, 341, 307, 51614], "temperature": 0.0, "avg_logprob": -0.10403482206575163, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.3083139955997467}, {"id": 42, "seek": 29800, "start": 298.0, "end": 307.0, "text": " basically bits of security. So quantum computers, assuming we can't run Shor's algorithm, which just allows them to factor", "tokens": [50364, 1936, 9239, 295, 3825, 13, 407, 13018, 10807, 11, 11926, 321, 393, 380, 1190, 1160, 284, 311, 9284, 11, 597, 445, 4045, 552, 281, 5952, 50814], "temperature": 0.0, "avg_logprob": -0.12678882687590842, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.18235816061496735}, {"id": 43, "seek": 29800, "start": 307.0, "end": 315.0, "text": " RSA and of course elliptic curves, if they come along, there's another algorithm called Grover's algorithm which dramatically reduces", "tokens": [50814, 497, 8886, 293, 295, 1164, 8284, 22439, 299, 19490, 11, 498, 436, 808, 2051, 11, 456, 311, 1071, 9284, 1219, 12981, 331, 311, 9284, 597, 17548, 18081, 51214], "temperature": 0.0, "avg_logprob": -0.12678882687590842, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.18235816061496735}, {"id": 44, "seek": 29800, "start": 315.0, "end": 322.0, "text": " the amount of time it will take to do a brute force attack on a key. And so NEST and most government agencies are", "tokens": [51214, 264, 2372, 295, 565, 309, 486, 747, 281, 360, 257, 47909, 3464, 2690, 322, 257, 2141, 13, 400, 370, 426, 14497, 293, 881, 2463, 9504, 366, 51564], "temperature": 0.0, "avg_logprob": -0.12678882687590842, "compression_ratio": 1.5416666666666667, "no_speech_prob": 0.18235816061496735}, {"id": 45, "seek": 32200, "start": 322.0, "end": 330.0, "text": " recommending we double the number of security bits in our keys. So if you have an RSA 2024 key, you've got about 112 bits of", "tokens": [50364, 30559, 321, 3834, 264, 1230, 295, 3825, 9239, 294, 527, 9317, 13, 407, 498, 291, 362, 364, 497, 8886, 45237, 2141, 11, 291, 600, 658, 466, 45835, 9239, 295, 50764], "temperature": 0.0, "avg_logprob": -0.07629421076823756, "compression_ratio": 1.6441441441441442, "no_speech_prob": 0.6340715289115906}, {"id": 46, "seek": 32200, "start": 330.0, "end": 338.0, "text": " security. Most of my keys are elliptic curve, they're P256. I've got about 128 bits of security. But the minimum", "tokens": [50764, 3825, 13, 4534, 295, 452, 9317, 366, 8284, 22439, 299, 7605, 11, 436, 434, 430, 6074, 21, 13, 286, 600, 658, 466, 29810, 9239, 295, 3825, 13, 583, 264, 7285, 51164], "temperature": 0.0, "avg_logprob": -0.07629421076823756, "compression_ratio": 1.6441441441441442, "no_speech_prob": 0.6340715289115906}, {"id": 47, "seek": 32200, "start": 338.0, "end": 347.0, "text": " recommendation is going to be 256, and we're all going to have to upgrade to that. 256 bits of security in RSA equates to about", "tokens": [51164, 11879, 307, 516, 281, 312, 38882, 11, 293, 321, 434, 439, 516, 281, 362, 281, 11484, 281, 300, 13, 38882, 9239, 295, 3825, 294, 497, 8886, 1267, 1024, 281, 466, 51614], "temperature": 0.0, "avg_logprob": -0.07629421076823756, "compression_ratio": 1.6441441441441442, "no_speech_prob": 0.6340715289115906}, {"id": 48, "seek": 34700, "start": 348.0, "end": 357.0, "text": " 15,000 and something or other in terms of bits that you need for an RSA key. Effectively, it's an RSA 16K key. These keys are way too", "tokens": [50414, 2119, 11, 1360, 293, 746, 420, 661, 294, 2115, 295, 9239, 300, 291, 643, 337, 364, 497, 8886, 2141, 13, 17764, 3413, 11, 309, 311, 364, 497, 8886, 3165, 42, 2141, 13, 1981, 9317, 366, 636, 886, 50864], "temperature": 0.0, "avg_logprob": -0.10375994604987067, "compression_ratio": 1.5938697318007662, "no_speech_prob": 0.07949226349592209}, {"id": 49, "seek": 34700, "start": 357.0, "end": 367.0, "text": " wieldy to actually be useful in practice, and so everybody is going to be forced to use elliptic curve keys shortly. And obviously, if these", "tokens": [50864, 35982, 88, 281, 767, 312, 4420, 294, 3124, 11, 293, 370, 2201, 307, 516, 281, 312, 7579, 281, 764, 8284, 22439, 299, 7605, 9317, 13392, 13, 400, 2745, 11, 498, 613, 51364], "temperature": 0.0, "avg_logprob": -0.10375994604987067, "compression_ratio": 1.5938697318007662, "no_speech_prob": 0.07949226349592209}, {"id": 50, "seek": 34700, "start": 367.0, "end": 376.0, "text": " keys get stolen, the user can be impersonated. And the current state of the art is all of these key dongles, as I said. And I think we should", "tokens": [51364, 9317, 483, 15900, 11, 264, 4195, 393, 312, 38147, 770, 13, 400, 264, 2190, 1785, 295, 264, 1523, 307, 439, 295, 613, 2141, 33079, 904, 11, 382, 286, 848, 13, 400, 286, 519, 321, 820, 51814], "temperature": 0.0, "avg_logprob": -0.10375994604987067, "compression_ratio": 1.5938697318007662, "no_speech_prob": 0.07949226349592209}, {"id": 51, "seek": 37600, "start": 376.0, "end": 386.0, "text": " do better than this. That statement about them carrying one key is no longer entirely true. Some of the more decent UB key ones can", "tokens": [50364, 360, 1101, 813, 341, 13, 663, 5629, 466, 552, 9792, 472, 2141, 307, 572, 2854, 7696, 2074, 13, 2188, 295, 264, 544, 8681, 624, 33, 2141, 2306, 393, 50864], "temperature": 0.0, "avg_logprob": -0.08471663475036621, "compression_ratio": 1.6300813008130082, "no_speech_prob": 0.008252535946667194}, {"id": 52, "seek": 37600, "start": 386.0, "end": 395.0, "text": " now carry up to three keys, but it's still way too small a number. And the good thing about a TPM is that the key does not have to be", "tokens": [50864, 586, 3985, 493, 281, 1045, 9317, 11, 457, 309, 311, 920, 636, 886, 1359, 257, 1230, 13, 400, 264, 665, 551, 466, 257, 314, 18819, 307, 300, 264, 2141, 775, 406, 362, 281, 312, 51314], "temperature": 0.0, "avg_logprob": -0.08471663475036621, "compression_ratio": 1.6300813008130082, "no_speech_prob": 0.008252535946667194}, {"id": 53, "seek": 37600, "start": 395.0, "end": 402.0, "text": " stored in the hardware. So TPM hardware actually has a small storage space as well you could use. But one of the things you can do with", "tokens": [51314, 12187, 294, 264, 8837, 13, 407, 314, 18819, 8837, 767, 575, 257, 1359, 6725, 1901, 382, 731, 291, 727, 764, 13, 583, 472, 295, 264, 721, 291, 393, 360, 365, 51664], "temperature": 0.0, "avg_logprob": -0.08471663475036621, "compression_ratio": 1.6300813008130082, "no_speech_prob": 0.008252535946667194}, {"id": 54, "seek": 40200, "start": 402.0, "end": 411.0, "text": " the TPM is actually load the key from the file into the TPM. So effectively, you can have thousands and thousands of keys on the same TPM.", "tokens": [50364, 264, 314, 18819, 307, 767, 3677, 264, 2141, 490, 264, 3991, 666, 264, 314, 18819, 13, 407, 8659, 11, 291, 393, 362, 5383, 293, 5383, 295, 9317, 322, 264, 912, 314, 18819, 13, 50814], "temperature": 0.0, "avg_logprob": -0.09192479825487324, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.05647560581564903}, {"id": 55, "seek": 40200, "start": 411.0, "end": 420.0, "text": " In fact, it just scales as far as your file system storage does. The other good thing about TPM keys is that automatically two factor. So let's", "tokens": [50814, 682, 1186, 11, 309, 445, 17408, 382, 1400, 382, 428, 3991, 1185, 6725, 775, 13, 440, 661, 665, 551, 466, 314, 18819, 9317, 307, 300, 6772, 732, 5952, 13, 407, 718, 311, 51264], "temperature": 0.0, "avg_logprob": -0.09192479825487324, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.05647560581564903}, {"id": 56, "seek": 40200, "start": 420.0, "end": 430.0, "text": " conduct a little experiment about two factor authentication. Who uses USB keys in this room? Keep your hand up if you use a pin or a password", "tokens": [51264, 6018, 257, 707, 5120, 466, 732, 5952, 26643, 13, 2102, 4960, 10109, 9317, 294, 341, 1808, 30, 5527, 428, 1011, 493, 498, 291, 764, 257, 5447, 420, 257, 11524, 51764], "temperature": 0.0, "avg_logprob": -0.09192479825487324, "compression_ratio": 1.6245210727969348, "no_speech_prob": 0.05647560581564903}, {"id": 57, "seek": 43000, "start": 430.0, "end": 442.0, "text": " with that USB key. That's actually pretty good. So about 20% of the hands went down. So the point is, even if you have a USB key and you", "tokens": [50364, 365, 300, 10109, 2141, 13, 663, 311, 767, 1238, 665, 13, 407, 466, 945, 4, 295, 264, 2377, 1437, 760, 13, 407, 264, 935, 307, 11, 754, 498, 291, 362, 257, 10109, 2141, 293, 291, 50964], "temperature": 0.0, "avg_logprob": -0.07852578825420803, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.11179109662771225}, {"id": 58, "seek": 43000, "start": 442.0, "end": 450.0, "text": " don't use a pin or password, you're not two factor. Two factor requires something you know, which is the password, and something you have,", "tokens": [50964, 500, 380, 764, 257, 5447, 420, 11524, 11, 291, 434, 406, 732, 5952, 13, 4453, 5952, 7029, 746, 291, 458, 11, 597, 307, 264, 11524, 11, 293, 746, 291, 362, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07852578825420803, "compression_ratio": 1.5277777777777777, "no_speech_prob": 0.11179109662771225}, {"id": 59, "seek": 45000, "start": 450.0, "end": 458.0, "text": " which would be the key. So with the TPM, it's the authority for the key, which is what I proved. It's a passphrase I used to prove to the TPM.", "tokens": [50364, 597, 576, 312, 264, 2141, 13, 407, 365, 264, 314, 18819, 11, 309, 311, 264, 8281, 337, 264, 2141, 11, 597, 307, 437, 286, 14617, 13, 467, 311, 257, 1320, 44598, 651, 286, 1143, 281, 7081, 281, 264, 314, 18819, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13844776941725045, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.7832615971565247}, {"id": 60, "seek": 45000, "start": 458.0, "end": 468.0, "text": " I'm the owner of the key, and something which I have, which is of course access to the TPM. So for TPM basics, effectively the TPM is a separate", "tokens": [50764, 286, 478, 264, 7289, 295, 264, 2141, 11, 293, 746, 597, 286, 362, 11, 597, 307, 295, 1164, 2105, 281, 264, 314, 18819, 13, 407, 337, 314, 18819, 14688, 11, 8659, 264, 314, 18819, 307, 257, 4994, 51264], "temperature": 0.0, "avg_logprob": -0.13844776941725045, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.7832615971565247}, {"id": 61, "seek": 45000, "start": 468.0, "end": 479.0, "text": " security module that's present in pretty much all laptops. This is an Infineon mobile TPM. The TPM is that little chip there. Sorry, my battery is", "tokens": [51264, 3825, 10088, 300, 311, 1974, 294, 1238, 709, 439, 27642, 13, 639, 307, 364, 11537, 533, 266, 6013, 314, 18819, 13, 440, 314, 18819, 307, 300, 707, 11409, 456, 13, 4919, 11, 452, 5809, 307, 51814], "temperature": 0.0, "avg_logprob": -0.13844776941725045, "compression_ratio": 1.7222222222222223, "no_speech_prob": 0.7832615971565247}, {"id": 62, "seek": 47900, "start": 479.0, "end": 488.0, "text": " running down on this. So I think I've got one shot out of the laser pointer, so I won't use it yet. But the big thing on the top is actually the LPC", "tokens": [50364, 2614, 760, 322, 341, 13, 407, 286, 519, 286, 600, 658, 472, 3347, 484, 295, 264, 12530, 23918, 11, 370, 286, 1582, 380, 764, 309, 1939, 13, 583, 264, 955, 551, 322, 264, 1192, 307, 767, 264, 441, 12986, 50814], "temperature": 0.0, "avg_logprob": -0.10179465494038147, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.08314072340726852}, {"id": 63, "seek": 47900, "start": 488.0, "end": 498.0, "text": " bus connector. So as you can see, the chip is tiny. The major component of this is actually connection to the bus. They've been ubiquitous for a while now.", "tokens": [50814, 1255, 19127, 13, 407, 382, 291, 393, 536, 11, 264, 11409, 307, 5870, 13, 440, 2563, 6542, 295, 341, 307, 767, 4984, 281, 264, 1255, 13, 814, 600, 668, 43868, 39831, 337, 257, 1339, 586, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10179465494038147, "compression_ratio": 1.5276381909547738, "no_speech_prob": 0.08314072340726852}, {"id": 64, "seek": 49800, "start": 498.0, "end": 508.0, "text": " So they've been present in laptops for at least the last 20 years. Originally at TPM 1.2, but TPM 2.0 is going through the ecosystem.", "tokens": [50364, 407, 436, 600, 668, 1974, 294, 27642, 337, 412, 1935, 264, 1036, 945, 924, 13, 28696, 412, 314, 18819, 502, 13, 17, 11, 457, 314, 18819, 568, 13, 15, 307, 516, 807, 264, 11311, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07276237463649315, "compression_ratio": 1.4751381215469612, "no_speech_prob": 0.8329981565475464}, {"id": 65, "seek": 49800, "start": 508.0, "end": 517.0, "text": " The reason why everybody should have a TPM 2.0, and if you only have a TPM 1.2, you shouldn't be using it, is for agile cryptography.", "tokens": [50864, 440, 1778, 983, 2201, 820, 362, 257, 314, 18819, 568, 13, 15, 11, 293, 498, 291, 787, 362, 257, 314, 18819, 502, 13, 17, 11, 291, 4659, 380, 312, 1228, 309, 11, 307, 337, 30072, 9844, 5820, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07276237463649315, "compression_ratio": 1.4751381215469612, "no_speech_prob": 0.8329981565475464}, {"id": 66, "seek": 51700, "start": 517.0, "end": 535.0, "text": " TPM 1.2, the specification is so old that the only hash it can do for signing is Char-1, which has been deprecated for quite a long time. So if you see Char-1 in any key signing process, most people will tell you not to use that and not to use that signature.", "tokens": [50364, 314, 18819, 502, 13, 17, 11, 264, 31256, 307, 370, 1331, 300, 264, 787, 22019, 309, 393, 360, 337, 13393, 307, 4327, 12, 16, 11, 597, 575, 668, 1367, 13867, 770, 337, 1596, 257, 938, 565, 13, 407, 498, 291, 536, 4327, 12, 16, 294, 604, 2141, 13393, 1399, 11, 881, 561, 486, 980, 291, 406, 281, 764, 300, 293, 406, 281, 764, 300, 13397, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18224942343575615, "compression_ratio": 1.48, "no_speech_prob": 0.34380286931991577}, {"id": 67, "seek": 53500, "start": 535.0, "end": 550.0, "text": " And this basically means that TPM 1.2 is obsolete. The good thing about TPM 2.0 is it has agile cryptography, although it's not as agile as you think. If I give you a list of all the algorithms my current TPM can do, it's basically four.", "tokens": [50364, 400, 341, 1936, 1355, 300, 314, 18819, 502, 13, 17, 307, 46333, 13, 440, 665, 551, 466, 314, 18819, 568, 13, 15, 307, 309, 575, 30072, 9844, 5820, 11, 4878, 309, 311, 406, 382, 30072, 382, 291, 519, 13, 759, 286, 976, 291, 257, 1329, 295, 439, 264, 14642, 452, 2190, 314, 18819, 393, 360, 11, 309, 311, 1936, 1451, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06271363771878756, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.6775221228599548}, {"id": 68, "seek": 55000, "start": 550.0, "end": 565.0, "text": " It can do RSA 2K, it can do NIST P256 elliptic curve, it can do the burrito and airing curve, and I was hoping to say it could do P384, but I actually checked it just before the talk and it can't. So my laptop in fact can only do three algorithms.", "tokens": [50364, 467, 393, 360, 497, 8886, 568, 42, 11, 309, 393, 360, 426, 19756, 430, 6074, 21, 8284, 22439, 299, 7605, 11, 309, 393, 360, 264, 2779, 17492, 293, 1988, 278, 7605, 11, 293, 286, 390, 7159, 281, 584, 309, 727, 360, 430, 12625, 19, 11, 457, 286, 767, 10033, 309, 445, 949, 264, 751, 293, 309, 393, 380, 13, 407, 452, 10732, 294, 1186, 393, 787, 360, 1045, 14642, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12935289176734718, "compression_ratio": 1.4195402298850575, "no_speech_prob": 0.8094680309295654}, {"id": 69, "seek": 56500, "start": 566.0, "end": 587.0, "text": " The actual functions that a TPM can do are many that vary than one run way beyond key storage. So shielded key handling is the big one that I'm talking about today, but it can also do something called measurement. If you've heard of measured boot, that's a function that a TPM does, and that was actually the original function that a TPM was invented to perform.", "tokens": [50414, 440, 3539, 6828, 300, 257, 314, 18819, 393, 360, 366, 867, 300, 10559, 813, 472, 1190, 636, 4399, 2141, 6725, 13, 407, 10257, 292, 2141, 13175, 307, 264, 955, 472, 300, 286, 478, 1417, 466, 965, 11, 457, 309, 393, 611, 360, 746, 1219, 13160, 13, 759, 291, 600, 2198, 295, 12690, 11450, 11, 300, 311, 257, 2445, 300, 257, 314, 18819, 775, 11, 293, 300, 390, 767, 264, 3380, 2445, 300, 257, 314, 18819, 390, 14479, 281, 2042, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10368390310378302, "compression_ratio": 1.6605504587155964, "no_speech_prob": 0.8043133020401001}, {"id": 70, "seek": 58700, "start": 588.0, "end": 611.0, "text": " It can also do something called data sealing. Data sealing means that you put a blob of data into the TPM and it only releases it back to you under certain circumstances. Effectively we use this for symmetric keys. So your disk encryption key on your laptop for instance would be stored as a sealed key blob that would be released to the kernel when everything goes right.", "tokens": [50414, 467, 393, 611, 360, 746, 1219, 1412, 48678, 13, 11888, 48678, 1355, 300, 291, 829, 257, 46115, 295, 1412, 666, 264, 314, 18819, 293, 309, 787, 16952, 309, 646, 281, 291, 833, 1629, 9121, 13, 17764, 3413, 321, 764, 341, 337, 32330, 9317, 13, 407, 428, 12355, 29575, 2141, 322, 428, 10732, 337, 5197, 576, 312, 12187, 382, 257, 21514, 2141, 46115, 300, 576, 312, 4736, 281, 264, 28256, 562, 1203, 1709, 558, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07329369813967974, "compression_ratio": 1.617391304347826, "no_speech_prob": 0.39214637875556946}, {"id": 71, "seek": 61100, "start": 611.0, "end": 616.0, "text": " And I'll actually be talking about that in the TPM and kernel session tomorrow.", "tokens": [50364, 400, 286, 603, 767, 312, 1417, 466, 300, 294, 264, 314, 18819, 293, 28256, 5481, 4153, 13, 50614], "temperature": 0.0, "avg_logprob": -0.06042438340418547, "compression_ratio": 1.7665369649805447, "no_speech_prob": 0.3967530131340027}, {"id": 72, "seek": 61100, "start": 616.0, "end": 626.0, "text": " And then the final function a TPM does is attestation. If you're doing things like measurements, you need to prove to somebody else what the measurements you collected actually were.", "tokens": [50614, 400, 550, 264, 2572, 2445, 257, 314, 18819, 775, 307, 951, 377, 399, 13, 759, 291, 434, 884, 721, 411, 15383, 11, 291, 643, 281, 7081, 281, 2618, 1646, 437, 264, 15383, 291, 11087, 767, 645, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06042438340418547, "compression_ratio": 1.7665369649805447, "no_speech_prob": 0.3967530131340027}, {"id": 73, "seek": 61100, "start": 626.0, "end": 638.0, "text": " And so the TPM is capable of forming a signature over a set of measurements that can be verified back to this TPM and is therefore used as proof to somebody else that what you say is correct.", "tokens": [51114, 400, 370, 264, 314, 18819, 307, 8189, 295, 15745, 257, 13397, 670, 257, 992, 295, 15383, 300, 393, 312, 31197, 646, 281, 341, 314, 18819, 293, 307, 4412, 1143, 382, 8177, 281, 2618, 1646, 300, 437, 291, 584, 307, 3006, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06042438340418547, "compression_ratio": 1.7665369649805447, "no_speech_prob": 0.3967530131340027}, {"id": 74, "seek": 63800, "start": 638.0, "end": 645.0, "text": " But obviously today I'm only talking about shielded key handling. So none of the other three functions of the TPM will be covered.", "tokens": [50364, 583, 2745, 965, 286, 478, 787, 1417, 466, 10257, 292, 2141, 13175, 13, 407, 6022, 295, 264, 661, 1045, 6828, 295, 264, 314, 18819, 486, 312, 5343, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08274662494659424, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.013447253033518791}, {"id": 75, "seek": 63800, "start": 647.0, "end": 658.0, "text": " So keys inside the TPM are stored in hierarchies, which means they have a theoretical hierarchy with a root key at the top and then they have other keys descending off the root key.", "tokens": [50814, 407, 9317, 1854, 264, 314, 18819, 366, 12187, 294, 35250, 530, 11, 597, 1355, 436, 362, 257, 20864, 22333, 365, 257, 5593, 2141, 412, 264, 1192, 293, 550, 436, 362, 661, 9317, 40182, 766, 264, 5593, 2141, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08274662494659424, "compression_ratio": 1.5918367346938775, "no_speech_prob": 0.013447253033518791}, {"id": 76, "seek": 65800, "start": 658.0, "end": 666.0, "text": " You can actually have intermediate keys in this hierarchy. The only reason it's called a hierarchy is because of the way the TPM works.", "tokens": [50364, 509, 393, 767, 362, 19376, 9317, 294, 341, 22333, 13, 440, 787, 1778, 309, 311, 1219, 257, 22333, 307, 570, 295, 264, 636, 264, 314, 18819, 1985, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06544595221950583, "compression_ratio": 1.60752688172043, "no_speech_prob": 0.8815255761146545}, {"id": 77, "seek": 65800, "start": 666.0, "end": 674.0, "text": " It encrypts the key file that you get back from a TPM to a symmetric key that's stored in the hierarchy.", "tokens": [50764, 467, 17972, 39280, 264, 2141, 3991, 300, 291, 483, 646, 490, 257, 314, 18819, 281, 257, 32330, 2141, 300, 311, 12187, 294, 264, 22333, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06544595221950583, "compression_ratio": 1.60752688172043, "no_speech_prob": 0.8815255761146545}, {"id": 78, "seek": 65800, "start": 674.0, "end": 677.0, "text": " The top key of the hierarchy is always called the primary.", "tokens": [51164, 440, 1192, 2141, 295, 264, 22333, 307, 1009, 1219, 264, 6194, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06544595221950583, "compression_ratio": 1.60752688172043, "no_speech_prob": 0.8815255761146545}, {"id": 79, "seek": 67700, "start": 678.0, "end": 686.0, "text": " TPM 2 has four hierarchies, which basically mean four primary keys, but there's the platform hierarchy is never used.", "tokens": [50414, 314, 18819, 568, 575, 1451, 35250, 530, 11, 597, 1936, 914, 1451, 6194, 9317, 11, 457, 456, 311, 264, 3663, 22333, 307, 1128, 1143, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13513245233675328, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.7176339626312256}, {"id": 80, "seek": 67700, "start": 686.0, "end": 691.0, "text": " It belongs to the film I guys and they don't use it. The endorsement hierarchy is used for attestation.", "tokens": [50814, 467, 12953, 281, 264, 2007, 286, 1074, 293, 436, 500, 380, 764, 309, 13, 440, 29228, 518, 22333, 307, 1143, 337, 951, 377, 399, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13513245233675328, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.7176339626312256}, {"id": 81, "seek": 67700, "start": 691.0, "end": 698.0, "text": " The storage hierarchy is where we put our keys and the null hierarchy is also pretty much never used because it's volatile.", "tokens": [51064, 440, 6725, 22333, 307, 689, 321, 829, 527, 9317, 293, 264, 18184, 22333, 307, 611, 1238, 709, 1128, 1143, 570, 309, 311, 34377, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13513245233675328, "compression_ratio": 1.6586538461538463, "no_speech_prob": 0.7176339626312256}, {"id": 82, "seek": 69800, "start": 698.0, "end": 704.0, "text": " The null key changes every time you reboot your TPM and that means that you don't have a permanent key.", "tokens": [50364, 440, 18184, 2141, 2962, 633, 565, 291, 33818, 428, 314, 18819, 293, 300, 1355, 300, 291, 500, 380, 362, 257, 10996, 2141, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07636050236077956, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.10961364954710007}, {"id": 83, "seek": 69800, "start": 704.0, "end": 707.0, "text": " You can actually encrypt to it because it changes every time.", "tokens": [50664, 509, 393, 767, 17972, 662, 281, 309, 570, 309, 2962, 633, 565, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07636050236077956, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.10961364954710007}, {"id": 84, "seek": 69800, "start": 707.0, "end": 713.0, "text": " So a key file from a null hierarchy on one reboot would encrypt differently from the key file on the next reboot.", "tokens": [50814, 407, 257, 2141, 3991, 490, 257, 18184, 22333, 322, 472, 33818, 576, 17972, 662, 7614, 490, 264, 2141, 3991, 322, 264, 958, 33818, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07636050236077956, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.10961364954710007}, {"id": 85, "seek": 69800, "start": 713.0, "end": 717.0, "text": " So effectively we only use the storage hierarchy for keys.", "tokens": [51114, 407, 8659, 321, 787, 764, 264, 6725, 22333, 337, 9317, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07636050236077956, "compression_ratio": 1.6650246305418719, "no_speech_prob": 0.10961364954710007}, {"id": 86, "seek": 71700, "start": 717.0, "end": 726.0, "text": " Like I said, TPM 1.2 was char and RSA and is therefore deprecated.", "tokens": [50364, 1743, 286, 848, 11, 314, 18819, 502, 13, 17, 390, 1290, 293, 497, 8886, 293, 307, 4412, 1367, 13867, 770, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13245613873004913, "compression_ratio": 1.3576158940397351, "no_speech_prob": 0.07300405949354172}, {"id": 87, "seek": 71700, "start": 726.0, "end": 736.0, "text": " TPM 2 can do RSA, char 256, char 512 is actually present on most of them, and it can do elliptic curve algorithms, which is really useful.", "tokens": [50814, 314, 18819, 568, 393, 360, 497, 8886, 11, 1290, 38882, 11, 1290, 1025, 4762, 307, 767, 1974, 322, 881, 295, 552, 11, 293, 309, 393, 360, 8284, 22439, 299, 7605, 14642, 11, 597, 307, 534, 4420, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13245613873004913, "compression_ratio": 1.3576158940397351, "no_speech_prob": 0.07300405949354172}, {"id": 88, "seek": 73600, "start": 737.0, "end": 751.0, "text": " TPM 1.2 has this agile cryptography because instead of actually storing keys in its internal structure, it stores 128 bit number called a seed.", "tokens": [50414, 314, 18819, 502, 13, 17, 575, 341, 30072, 9844, 5820, 570, 2602, 295, 767, 26085, 9317, 294, 1080, 6920, 3877, 11, 309, 9512, 29810, 857, 1230, 1219, 257, 8871, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09038505306491604, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.08686321973800659}, {"id": 89, "seek": 73600, "start": 751.0, "end": 759.0, "text": " And from this seed it actually uses a key derivation function to get from the seed to whatever key you want.", "tokens": [51114, 400, 490, 341, 8871, 309, 767, 4960, 257, 2141, 10151, 399, 2445, 281, 483, 490, 264, 8871, 281, 2035, 2141, 291, 528, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09038505306491604, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.08686321973800659}, {"id": 90, "seek": 73600, "start": 759.0, "end": 764.0, "text": " This sounds really good and it is because the seed is just a random number.", "tokens": [51514, 639, 3263, 534, 665, 293, 309, 307, 570, 264, 8871, 307, 445, 257, 4974, 1230, 13, 51764], "temperature": 0.0, "avg_logprob": -0.09038505306491604, "compression_ratio": 1.569377990430622, "no_speech_prob": 0.08686321973800659}, {"id": 91, "seek": 76400, "start": 764.0, "end": 769.0, "text": " Every time you initialize a TPM, which you can do, it will choose a new set of random numbers.", "tokens": [50364, 2048, 565, 291, 5883, 1125, 257, 314, 18819, 11, 597, 291, 393, 360, 11, 309, 486, 2826, 257, 777, 992, 295, 4974, 3547, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11089241279746001, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.026260901242494583}, {"id": 92, "seek": 76400, "start": 769.0, "end": 779.0, "text": " So the storage seed is stored as this 128 bit number and from it you derive either an RSA key or elliptic curve key or whatever else you want.", "tokens": [50614, 407, 264, 6725, 8871, 307, 12187, 382, 341, 29810, 857, 1230, 293, 490, 309, 291, 28446, 2139, 364, 497, 8886, 2141, 420, 8284, 22439, 299, 7605, 2141, 420, 2035, 1646, 291, 528, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11089241279746001, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.026260901242494583}, {"id": 93, "seek": 76400, "start": 779.0, "end": 790.0, "text": " The key derivation algorithm ensures the same seed as long as you have the same number, it always comes back with the same public-private key pair or the same symmetric key, which is useful.", "tokens": [51114, 440, 2141, 10151, 399, 9284, 28111, 264, 912, 8871, 382, 938, 382, 291, 362, 264, 912, 1230, 11, 309, 1009, 1487, 646, 365, 264, 912, 1908, 12, 36391, 19083, 2141, 6119, 420, 264, 912, 32330, 2141, 11, 597, 307, 4420, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11089241279746001, "compression_ratio": 1.646153846153846, "no_speech_prob": 0.026260901242494583}, {"id": 94, "seek": 79000, "start": 791.0, "end": 798.0, "text": " But the problem is that the key derivation function for things like RSA involves finding prime numbers.", "tokens": [50414, 583, 264, 1154, 307, 300, 264, 2141, 10151, 399, 2445, 337, 721, 411, 497, 8886, 11626, 5006, 5835, 3547, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08261045387813024, "compression_ratio": 1.7464114832535884, "no_speech_prob": 0.07053258270025253}, {"id": 95, "seek": 79000, "start": 798.0, "end": 805.0, "text": " So there is a special key derivation function that means you always find the same prime numbers, but you still have to conduct a prime search.", "tokens": [50764, 407, 456, 307, 257, 2121, 2141, 10151, 399, 2445, 300, 1355, 291, 1009, 915, 264, 912, 5835, 3547, 11, 457, 291, 920, 362, 281, 6018, 257, 5835, 3164, 13, 51114], "temperature": 0.0, "avg_logprob": -0.08261045387813024, "compression_ratio": 1.7464114832535884, "no_speech_prob": 0.07053258270025253}, {"id": 96, "seek": 79000, "start": 805.0, "end": 812.0, "text": " The problem for a TPM is it is a very slow processing engine and that means it takes a long time to do prime searches.", "tokens": [51114, 440, 1154, 337, 257, 314, 18819, 307, 309, 307, 257, 588, 2964, 9007, 2848, 293, 300, 1355, 309, 2516, 257, 938, 565, 281, 360, 5835, 26701, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08261045387813024, "compression_ratio": 1.7464114832535884, "no_speech_prob": 0.07053258270025253}, {"id": 97, "seek": 81200, "start": 813.0, "end": 818.0, "text": " So creating a key from a seed on a TPM2 can take a long time.", "tokens": [50414, 407, 4084, 257, 2141, 490, 257, 8871, 322, 257, 314, 18819, 17, 393, 747, 257, 938, 565, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07101053195995288, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.650631308555603}, {"id": 98, "seek": 81200, "start": 818.0, "end": 829.0, "text": " So this is my old laptop. It takes 43 seconds to actually do a prime search and construct the correct RSA 2048 primary from its seed.", "tokens": [50664, 407, 341, 307, 452, 1331, 10732, 13, 467, 2516, 17914, 3949, 281, 767, 360, 257, 5835, 3164, 293, 7690, 264, 3006, 497, 8886, 945, 13318, 6194, 490, 1080, 8871, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07101053195995288, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.650631308555603}, {"id": 99, "seek": 81200, "start": 829.0, "end": 838.0, "text": " My new laptop is actually using an Intel firmware TPM, which is supposed to operate on the CPU, and it still takes 7 seconds to actually derive an RSA key.", "tokens": [51214, 1222, 777, 10732, 307, 767, 1228, 364, 19762, 30289, 314, 18819, 11, 597, 307, 3442, 281, 9651, 322, 264, 13199, 11, 293, 309, 920, 2516, 1614, 3949, 281, 767, 28446, 364, 497, 8886, 2141, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07101053195995288, "compression_ratio": 1.5462555066079295, "no_speech_prob": 0.650631308555603}, {"id": 100, "seek": 83800, "start": 838.0, "end": 843.0, "text": " So the reason I use elliptic curve keys is just because they are much, much faster.", "tokens": [50364, 407, 264, 1778, 286, 764, 8284, 22439, 299, 7605, 9317, 307, 445, 570, 436, 366, 709, 11, 709, 4663, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09797246639545147, "compression_ratio": 1.4921465968586387, "no_speech_prob": 0.07936170697212219}, {"id": 101, "seek": 83800, "start": 843.0, "end": 852.0, "text": " An elliptic curve key derivation to a TPM is pretty much a linear-like operation. It doesn't involve finding primes.", "tokens": [50614, 1107, 8284, 22439, 299, 7605, 2141, 10151, 399, 281, 257, 314, 18819, 307, 1238, 709, 257, 8213, 12, 4092, 6916, 13, 467, 1177, 380, 9494, 5006, 582, 1532, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09797246639545147, "compression_ratio": 1.4921465968586387, "no_speech_prob": 0.07936170697212219}, {"id": 102, "seek": 83800, "start": 855.0, "end": 860.0, "text": " And the storage seed can be changed in a TPM. There is a special command to do that.", "tokens": [51214, 400, 264, 6725, 8871, 393, 312, 3105, 294, 257, 314, 18819, 13, 821, 307, 257, 2121, 5622, 281, 360, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09797246639545147, "compression_ratio": 1.4921465968586387, "no_speech_prob": 0.07936170697212219}, {"id": 103, "seek": 86000, "start": 861.0, "end": 871.0, "text": " And the reason it's useful is because if you're storing all of your keys in your TPM as key files and you want to shred every key that you ever own at once,", "tokens": [50414, 400, 264, 1778, 309, 311, 4420, 307, 570, 498, 291, 434, 26085, 439, 295, 428, 9317, 294, 428, 314, 18819, 382, 2141, 7098, 293, 291, 528, 281, 21567, 633, 2141, 300, 291, 1562, 1065, 412, 1564, 11, 50914], "temperature": 0.0, "avg_logprob": -0.07774600528535389, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.746334969997406}, {"id": 104, "seek": 86000, "start": 871.0, "end": 878.0, "text": " all you have to do is change the primary seed because that changes the encryption key that is used to save and restore the keys.", "tokens": [50914, 439, 291, 362, 281, 360, 307, 1319, 264, 6194, 8871, 570, 300, 2962, 264, 29575, 2141, 300, 307, 1143, 281, 3155, 293, 15227, 264, 9317, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07774600528535389, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.746334969997406}, {"id": 105, "seek": 86000, "start": 878.0, "end": 881.0, "text": " All your old keys will no longer restore into this TPM.", "tokens": [51264, 1057, 428, 1331, 9317, 486, 572, 2854, 15227, 666, 341, 314, 18819, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07774600528535389, "compression_ratio": 1.6798029556650247, "no_speech_prob": 0.746334969997406}, {"id": 106, "seek": 88100, "start": 881.0, "end": 890.0, "text": " So effectively your old keys become shredded, which is a useful thing to do if you're giving up your laptop or airport security wants to do something strange with it.", "tokens": [50364, 407, 8659, 428, 1331, 9317, 1813, 39091, 11, 597, 307, 257, 4420, 551, 281, 360, 498, 291, 434, 2902, 493, 428, 10732, 420, 10155, 3825, 2738, 281, 360, 746, 5861, 365, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.08382316374442947, "compression_ratio": 1.518716577540107, "no_speech_prob": 0.4697122871875763}, {"id": 107, "seek": 88100, "start": 897.0, "end": 908.0, "text": " So once you take a key that, say you create a key for GPG and you transfer it to a TPM key, that transfer is one way.", "tokens": [51164, 407, 1564, 291, 747, 257, 2141, 300, 11, 584, 291, 1884, 257, 2141, 337, 26039, 38, 293, 291, 5003, 309, 281, 257, 314, 18819, 2141, 11, 300, 5003, 307, 472, 636, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08382316374442947, "compression_ratio": 1.518716577540107, "no_speech_prob": 0.4697122871875763}, {"id": 108, "seek": 90800, "start": 908.0, "end": 911.0, "text": " You will never get that key back again from the TPM.", "tokens": [50364, 509, 486, 1128, 483, 300, 2141, 646, 797, 490, 264, 314, 18819, 13, 50514], "temperature": 0.0, "avg_logprob": -0.05598508674679822, "compression_ratio": 1.6845637583892616, "no_speech_prob": 0.1918509602546692}, {"id": 109, "seek": 90800, "start": 911.0, "end": 919.0, "text": " So if you're using this for identity keys, you have to be careful because your identity keys tend to live a lot longer than your laptops.", "tokens": [50514, 407, 498, 291, 434, 1228, 341, 337, 6575, 9317, 11, 291, 362, 281, 312, 5026, 570, 428, 6575, 9317, 3928, 281, 1621, 257, 688, 2854, 813, 428, 27642, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05598508674679822, "compression_ratio": 1.6845637583892616, "no_speech_prob": 0.1918509602546692}, {"id": 110, "seek": 90800, "start": 919.0, "end": 927.0, "text": " If you're an average developer like me, you'll tend to go through a new laptop once every, you know, I'd like to say two or three years.", "tokens": [50914, 759, 291, 434, 364, 4274, 10754, 411, 385, 11, 291, 603, 3928, 281, 352, 807, 257, 777, 10732, 1564, 633, 11, 291, 458, 11, 286, 1116, 411, 281, 584, 732, 420, 1045, 924, 13, 51314], "temperature": 0.0, "avg_logprob": -0.05598508674679822, "compression_ratio": 1.6845637583892616, "no_speech_prob": 0.1918509602546692}, {"id": 111, "seek": 90800, "start": 927.0, "end": 930.0, "text": " In fact, it's pretty expensive, so it's probably every five years.", "tokens": [51314, 682, 1186, 11, 309, 311, 1238, 5124, 11, 370, 309, 311, 1391, 633, 1732, 924, 13, 51464], "temperature": 0.0, "avg_logprob": -0.05598508674679822, "compression_ratio": 1.6845637583892616, "no_speech_prob": 0.1918509602546692}, {"id": 112, "seek": 90800, "start": 930.0, "end": 936.0, "text": " But my GPG key has been with me for the last 15 years and I would expect to keep it a lot longer than that.", "tokens": [51464, 583, 452, 26039, 38, 2141, 575, 668, 365, 385, 337, 264, 1036, 2119, 924, 293, 286, 576, 2066, 281, 1066, 309, 257, 688, 2854, 813, 300, 13, 51764], "temperature": 0.0, "avg_logprob": -0.05598508674679822, "compression_ratio": 1.6845637583892616, "no_speech_prob": 0.1918509602546692}, {"id": 113, "seek": 93600, "start": 936.0, "end": 940.0, "text": " So my GPG key will outlive the TPM in this laptop.", "tokens": [50364, 407, 452, 26039, 38, 2141, 486, 484, 45273, 264, 314, 18819, 294, 341, 10732, 13, 50564], "temperature": 0.0, "avg_logprob": -0.05913832357951573, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.04845154657959938}, {"id": 114, "seek": 93600, "start": 940.0, "end": 945.0, "text": " So the one thing I can't do is transfer the key irrevocably to the laptop.", "tokens": [50564, 407, 264, 472, 551, 286, 393, 380, 360, 307, 5003, 264, 2141, 16014, 20836, 1188, 281, 264, 10732, 13, 50814], "temperature": 0.0, "avg_logprob": -0.05913832357951573, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.04845154657959938}, {"id": 115, "seek": 93600, "start": 945.0, "end": 954.0, "text": " So what I usually do is I generate all my identity keys in a sort of vault, put them on a secure hard drive, lock it in the drawer on my desktop.", "tokens": [50814, 407, 437, 286, 2673, 360, 307, 286, 8460, 439, 452, 6575, 9317, 294, 257, 1333, 295, 27134, 11, 829, 552, 322, 257, 7144, 1152, 3332, 11, 4017, 309, 294, 264, 24039, 322, 452, 14502, 13, 51264], "temperature": 0.0, "avg_logprob": -0.05913832357951573, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.04845154657959938}, {"id": 116, "seek": 93600, "start": 954.0, "end": 965.0, "text": " Every time I get a new laptop, I convert the keys to TPM format for that laptop and then thereafter the unconverted keys just stay on my locked drawer.", "tokens": [51264, 2048, 565, 286, 483, 257, 777, 10732, 11, 286, 7620, 264, 9317, 281, 314, 18819, 7877, 337, 300, 10732, 293, 550, 38729, 264, 35847, 18537, 9317, 445, 1754, 322, 452, 9376, 24039, 13, 51814], "temperature": 0.0, "avg_logprob": -0.05913832357951573, "compression_ratio": 1.6785714285714286, "no_speech_prob": 0.04845154657959938}, {"id": 117, "seek": 96500, "start": 965.0, "end": 971.0, "text": " And the laptop travels with me with the keys in, but you can't get hold of them because they're TPM keys.", "tokens": [50364, 400, 264, 10732, 19863, 365, 385, 365, 264, 9317, 294, 11, 457, 291, 393, 380, 483, 1797, 295, 552, 570, 436, 434, 314, 18819, 9317, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07294966810840671, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.01993466168642044}, {"id": 118, "seek": 96500, "start": 971.0, "end": 974.0, "text": " And this never extractive property is really useful.", "tokens": [50664, 400, 341, 1128, 8947, 488, 4707, 307, 534, 4420, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07294966810840671, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.01993466168642044}, {"id": 119, "seek": 96500, "start": 974.0, "end": 977.0, "text": " Even the manufacturer of a TPM can't extract the key.", "tokens": [50814, 2754, 264, 18022, 295, 257, 314, 18819, 393, 380, 8947, 264, 2141, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07294966810840671, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.01993466168642044}, {"id": 120, "seek": 96500, "start": 977.0, "end": 985.0, "text": " There is a theoretical process you can go through where you decap a TPM, you pop its top off, and if I can get at the seeds within,", "tokens": [50964, 821, 307, 257, 20864, 1399, 291, 393, 352, 807, 689, 291, 368, 9485, 257, 314, 18819, 11, 291, 1665, 1080, 1192, 766, 11, 293, 498, 286, 393, 483, 412, 264, 9203, 1951, 11, 51364], "temperature": 0.0, "avg_logprob": -0.07294966810840671, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.01993466168642044}, {"id": 121, "seek": 96500, "start": 985.0, "end": 991.0, "text": " I can actually derive the encryption key for the key files from them, and that would allow me to get the keys.", "tokens": [51364, 286, 393, 767, 28446, 264, 29575, 2141, 337, 264, 2141, 7098, 490, 552, 11, 293, 300, 576, 2089, 385, 281, 483, 264, 9317, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07294966810840671, "compression_ratio": 1.7041198501872659, "no_speech_prob": 0.01993466168642044}, {"id": 122, "seek": 99100, "start": 991.0, "end": 995.0, "text": " But there is no programmatic way of doing this in the TPM.", "tokens": [50364, 583, 456, 307, 572, 1461, 25915, 636, 295, 884, 341, 294, 264, 314, 18819, 13, 50564], "temperature": 0.0, "avg_logprob": -0.0718842537506767, "compression_ratio": 1.7767441860465116, "no_speech_prob": 0.05490415543317795}, {"id": 123, "seek": 99100, "start": 995.0, "end": 1002.0, "text": " So the stated play of this is that unfortunately the TPM is really, really hard to use in program.", "tokens": [50564, 407, 264, 11323, 862, 295, 341, 307, 300, 7015, 264, 314, 18819, 307, 534, 11, 534, 1152, 281, 764, 294, 1461, 13, 50914], "temperature": 0.0, "avg_logprob": -0.0718842537506767, "compression_ratio": 1.7767441860465116, "no_speech_prob": 0.05490415543317795}, {"id": 124, "seek": 99100, "start": 1002.0, "end": 1012.0, "text": " So the way we try and enable these key systems for everybody to use is we try and actually enable them in the crypto systems.", "tokens": [50914, 407, 264, 636, 321, 853, 293, 9528, 613, 2141, 3652, 337, 2201, 281, 764, 307, 321, 853, 293, 767, 9528, 552, 294, 264, 17240, 3652, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0718842537506767, "compression_ratio": 1.7767441860465116, "no_speech_prob": 0.05490415543317795}, {"id": 125, "seek": 99100, "start": 1012.0, "end": 1018.0, "text": " The TPM actually has a slight disagreement over the library standard you should use to program it.", "tokens": [51414, 440, 314, 18819, 767, 575, 257, 4036, 38947, 670, 264, 6405, 3832, 291, 820, 764, 281, 1461, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.0718842537506767, "compression_ratio": 1.7767441860465116, "no_speech_prob": 0.05490415543317795}, {"id": 126, "seek": 101800, "start": 1018.0, "end": 1025.0, "text": " This is all technical, none of you need to know about this, but there are two implementations, one from Intel and one from IBM,", "tokens": [50364, 639, 307, 439, 6191, 11, 6022, 295, 291, 643, 281, 458, 466, 341, 11, 457, 456, 366, 732, 4445, 763, 11, 472, 490, 19762, 293, 472, 490, 23487, 11, 50714], "temperature": 0.0, "avg_logprob": -0.07868222892284393, "compression_ratio": 1.60546875, "no_speech_prob": 0.2254355102777481}, {"id": 127, "seek": 101800, "start": 1025.0, "end": 1032.0, "text": " conforming to two completely separate specifications that are both legitimately published by the TCG for no readily apparent reason,", "tokens": [50714, 18975, 278, 281, 732, 2584, 4994, 29448, 300, 366, 1293, 44431, 6572, 538, 264, 34150, 38, 337, 572, 26336, 18335, 1778, 11, 51064], "temperature": 0.0, "avg_logprob": -0.07868222892284393, "compression_ratio": 1.60546875, "no_speech_prob": 0.2254355102777481}, {"id": 128, "seek": 101800, "start": 1032.0, "end": 1035.0, "text": " and therefore look completely different to program.", "tokens": [51064, 293, 4412, 574, 2584, 819, 281, 1461, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07868222892284393, "compression_ratio": 1.60546875, "no_speech_prob": 0.2254355102777481}, {"id": 129, "seek": 101800, "start": 1035.0, "end": 1038.0, "text": " And God knows why this is.", "tokens": [51214, 400, 1265, 3255, 983, 341, 307, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07868222892284393, "compression_ratio": 1.60546875, "no_speech_prob": 0.2254355102777481}, {"id": 130, "seek": 101800, "start": 1038.0, "end": 1044.0, "text": " But the key to enabling TPMs for key storage is just to make it simple.", "tokens": [51364, 583, 264, 2141, 281, 23148, 314, 18819, 82, 337, 2141, 6725, 307, 445, 281, 652, 309, 2199, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07868222892284393, "compression_ratio": 1.60546875, "no_speech_prob": 0.2254355102777481}, {"id": 131, "seek": 104400, "start": 1044.0, "end": 1049.0, "text": " And that means that it needs really to be an integral part of the cryptography system that you use.", "tokens": [50364, 400, 300, 1355, 300, 309, 2203, 534, 281, 312, 364, 11573, 644, 295, 264, 9844, 5820, 1185, 300, 291, 764, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08854573444255347, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.051831360906362534}, {"id": 132, "seek": 104400, "start": 1049.0, "end": 1056.0, "text": " So GPG, if you use it, needs to, as an integral part of GPG, just use TPMs.", "tokens": [50614, 407, 26039, 38, 11, 498, 291, 764, 309, 11, 2203, 281, 11, 382, 364, 11573, 644, 295, 26039, 38, 11, 445, 764, 314, 18819, 82, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08854573444255347, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.051831360906362534}, {"id": 133, "seek": 104400, "start": 1056.0, "end": 1063.0, "text": " Open SSL, if that's your crypto system, needs as an integral part of that to use TPMs.", "tokens": [50964, 7238, 12238, 43, 11, 498, 300, 311, 428, 17240, 1185, 11, 2203, 382, 364, 11573, 644, 295, 300, 281, 764, 314, 18819, 82, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08854573444255347, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.051831360906362534}, {"id": 134, "seek": 104400, "start": 1063.0, "end": 1071.0, "text": " And that's where everything would stay, except now there's a new added wrinkle in TPM security.", "tokens": [51314, 400, 300, 311, 689, 1203, 576, 1754, 11, 3993, 586, 456, 311, 257, 777, 3869, 928, 14095, 294, 314, 18819, 3825, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08854573444255347, "compression_ratio": 1.7129186602870814, "no_speech_prob": 0.051831360906362534}, {"id": 135, "seek": 107100, "start": 1071.0, "end": 1077.0, "text": " So the TPM is usually attached to the bus, a bus in my laptop.", "tokens": [50364, 407, 264, 314, 18819, 307, 2673, 8570, 281, 264, 1255, 11, 257, 1255, 294, 452, 10732, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07908402657022282, "compression_ratio": 1.6866359447004609, "no_speech_prob": 0.05910591036081314}, {"id": 136, "seek": 107100, "start": 1077.0, "end": 1083.0, "text": " For most Intel laptops, it's attached to something called the LPC bus, the low pin count bus.", "tokens": [50664, 1171, 881, 19762, 27642, 11, 309, 311, 8570, 281, 746, 1219, 264, 441, 12986, 1255, 11, 264, 2295, 5447, 1207, 1255, 13, 50964], "temperature": 0.0, "avg_logprob": -0.07908402657022282, "compression_ratio": 1.6866359447004609, "no_speech_prob": 0.05910591036081314}, {"id": 137, "seek": 107100, "start": 1083.0, "end": 1087.0, "text": " And this bus, unfortunately, is actually pretty easy to snoop.", "tokens": [50964, 400, 341, 1255, 11, 7015, 11, 307, 767, 1238, 1858, 281, 43287, 404, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07908402657022282, "compression_ratio": 1.6866359447004609, "no_speech_prob": 0.05910591036081314}, {"id": 138, "seek": 107100, "start": 1087.0, "end": 1098.0, "text": " And if you can snoop the bus and you can snoop TPM transactions on it, I can actually intercept all of the commands that are flowing over the TPM.", "tokens": [51164, 400, 498, 291, 393, 43287, 404, 264, 1255, 293, 291, 393, 43287, 404, 314, 18819, 16856, 322, 309, 11, 286, 393, 767, 24700, 439, 295, 264, 16901, 300, 366, 13974, 670, 264, 314, 18819, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07908402657022282, "compression_ratio": 1.6866359447004609, "no_speech_prob": 0.05910591036081314}, {"id": 139, "seek": 109800, "start": 1098.0, "end": 1105.0, "text": " So for instance, if I'm wrapping my private key, the private key material has to go over this bus to the TPM, somebody could intercept it.", "tokens": [50364, 407, 337, 5197, 11, 498, 286, 478, 21993, 452, 4551, 2141, 11, 264, 4551, 2141, 2527, 575, 281, 352, 670, 341, 1255, 281, 264, 314, 18819, 11, 2618, 727, 24700, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.07869810399001206, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.017622841522097588}, {"id": 140, "seek": 109800, "start": 1105.0, "end": 1114.0, "text": " If I'm not using HMAC-based passwords, the password goes in the clear over this bus, the authority for the key, you could intercept it.", "tokens": [50714, 759, 286, 478, 406, 1228, 389, 44, 4378, 12, 6032, 33149, 11, 264, 11524, 1709, 294, 264, 1850, 670, 341, 1255, 11, 264, 8281, 337, 264, 2141, 11, 291, 727, 24700, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07869810399001206, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.017622841522097588}, {"id": 141, "seek": 109800, "start": 1114.0, "end": 1119.0, "text": " And there is actually an existing attack that does this, it's called TPM Genie.", "tokens": [51164, 400, 456, 307, 767, 364, 6741, 2690, 300, 775, 341, 11, 309, 311, 1219, 314, 18819, 3632, 414, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07869810399001206, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.017622841522097588}, {"id": 142, "seek": 109800, "start": 1119.0, "end": 1127.0, "text": " The guys at the National Security Lab in Canada actually constructed a dongle that you can easily attach to a laptop without actually really opening it up.", "tokens": [51414, 440, 1074, 412, 264, 4862, 11164, 10137, 294, 6309, 767, 17083, 257, 500, 22631, 300, 291, 393, 3612, 5085, 281, 257, 10732, 1553, 767, 534, 5193, 309, 493, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07869810399001206, "compression_ratio": 1.7171717171717171, "no_speech_prob": 0.017622841522097588}, {"id": 143, "seek": 112700, "start": 1127.0, "end": 1131.0, "text": " And just extract all of the TPM traffic.", "tokens": [50364, 400, 445, 8947, 439, 295, 264, 314, 18819, 6419, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06420885998269786, "compression_ratio": 1.5646551724137931, "no_speech_prob": 0.05390263721346855}, {"id": 144, "seek": 112700, "start": 1131.0, "end": 1141.0, "text": " There is also a theory that you can actually program another device on the LPC bus, like keyboard or the mouse, simply to reflect the commands back and also do the snooping for you.", "tokens": [50564, 821, 307, 611, 257, 5261, 300, 291, 393, 767, 1461, 1071, 4302, 322, 264, 441, 12986, 1255, 11, 411, 10186, 420, 264, 9719, 11, 2935, 281, 5031, 264, 16901, 646, 293, 611, 360, 264, 43287, 26125, 337, 291, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06420885998269786, "compression_ratio": 1.5646551724137931, "no_speech_prob": 0.05390263721346855}, {"id": 145, "seek": 112700, "start": 1141.0, "end": 1146.0, "text": " So there is a theory that this TPM Genie attack could also be a remote infiltration attack.", "tokens": [51064, 407, 456, 307, 257, 5261, 300, 341, 314, 18819, 3632, 414, 2690, 727, 611, 312, 257, 8607, 29085, 2405, 2690, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06420885998269786, "compression_ratio": 1.5646551724137931, "no_speech_prob": 0.05390263721346855}, {"id": 146, "seek": 112700, "start": 1146.0, "end": 1149.0, "text": " It doesn't have to be an evil made local attack.", "tokens": [51314, 467, 1177, 380, 362, 281, 312, 364, 6724, 1027, 2654, 2690, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06420885998269786, "compression_ratio": 1.5646551724137931, "no_speech_prob": 0.05390263721346855}, {"id": 147, "seek": 114900, "start": 1149.0, "end": 1159.0, "text": " But the upshot is, nobody uses a TPM nowadays without actually running security on the bus itself, the TPM talks to the laptop on.", "tokens": [50364, 583, 264, 493, 18402, 307, 11, 5079, 4960, 257, 314, 18819, 13434, 1553, 767, 2614, 3825, 322, 264, 1255, 2564, 11, 264, 314, 18819, 6686, 281, 264, 10732, 322, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11330938992434986, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.4277730882167816}, {"id": 148, "seek": 114900, "start": 1159.0, "end": 1162.0, "text": " So all data and transit now has to be encrypted.", "tokens": [50864, 407, 439, 1412, 293, 17976, 586, 575, 281, 312, 36663, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11330938992434986, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.4277730882167816}, {"id": 149, "seek": 114900, "start": 1162.0, "end": 1170.0, "text": " And this makes TPMs go from sort of complicated to use to being excruciating extremely complicated to use.", "tokens": [51014, 400, 341, 1669, 314, 18819, 82, 352, 490, 1333, 295, 6179, 281, 764, 281, 885, 1624, 894, 537, 990, 4664, 6179, 281, 764, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11330938992434986, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.4277730882167816}, {"id": 150, "seek": 117000, "start": 1170.0, "end": 1180.0, "text": " Because now you have to use something called a TPM session, which effectively is sort of like an ECDH encryption stream between the application and you.", "tokens": [50364, 1436, 586, 291, 362, 281, 764, 746, 1219, 257, 314, 18819, 5481, 11, 597, 8659, 307, 1333, 295, 411, 364, 19081, 35, 39, 29575, 4309, 1296, 264, 3861, 293, 291, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07862196383268936, "compression_ratio": 1.6537102473498233, "no_speech_prob": 0.8136457800865173}, {"id": 151, "seek": 117000, "start": 1180.0, "end": 1184.0, "text": " And you in the room do not want to know how to do this.", "tokens": [50864, 400, 291, 294, 264, 1808, 360, 406, 528, 281, 458, 577, 281, 360, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07862196383268936, "compression_ratio": 1.6537102473498233, "no_speech_prob": 0.8136457800865173}, {"id": 152, "seek": 117000, "start": 1184.0, "end": 1191.0, "text": " I've actually written this code from scratch for the Linux kernel because right at the moment the Linux kernel doesn't do this.", "tokens": [51064, 286, 600, 767, 3720, 341, 3089, 490, 8459, 337, 264, 18734, 28256, 570, 558, 412, 264, 1623, 264, 18734, 28256, 1177, 380, 360, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07862196383268936, "compression_ratio": 1.6537102473498233, "no_speech_prob": 0.8136457800865173}, {"id": 153, "seek": 117000, "start": 1191.0, "end": 1193.0, "text": " And at some point we're going to get a problem because of this.", "tokens": [51414, 400, 412, 512, 935, 321, 434, 516, 281, 483, 257, 1154, 570, 295, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07862196383268936, "compression_ratio": 1.6537102473498233, "no_speech_prob": 0.8136457800865173}, {"id": 154, "seek": 117000, "start": 1193.0, "end": 1195.0, "text": " So we need to be doing this encryption.", "tokens": [51514, 407, 321, 643, 281, 312, 884, 341, 29575, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07862196383268936, "compression_ratio": 1.6537102473498233, "no_speech_prob": 0.8136457800865173}, {"id": 155, "seek": 117000, "start": 1195.0, "end": 1197.0, "text": " It really is horrible code.", "tokens": [51614, 467, 534, 307, 9263, 3089, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07862196383268936, "compression_ratio": 1.6537102473498233, "no_speech_prob": 0.8136457800865173}, {"id": 156, "seek": 119700, "start": 1197.0, "end": 1200.0, "text": " Nobody in there should actually have to do this.", "tokens": [50364, 9297, 294, 456, 820, 767, 362, 281, 360, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07004782583861224, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06864730268716812}, {"id": 157, "seek": 119700, "start": 1200.0, "end": 1203.0, "text": " This is why all TPM coders are reluctant coders.", "tokens": [50514, 639, 307, 983, 439, 314, 18819, 17656, 433, 366, 33677, 17656, 433, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07004782583861224, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06864730268716812}, {"id": 158, "seek": 119700, "start": 1203.0, "end": 1207.0, "text": " So I do this so you don't have to.", "tokens": [50664, 407, 286, 360, 341, 370, 291, 500, 380, 362, 281, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07004782583861224, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06864730268716812}, {"id": 159, "seek": 119700, "start": 1207.0, "end": 1214.0, "text": " And for added sophistication, these sessions once we have them can actually be used to implement key policy.", "tokens": [50864, 400, 337, 3869, 15572, 399, 11, 613, 11081, 1564, 321, 362, 552, 393, 767, 312, 1143, 281, 4445, 2141, 3897, 13, 51214], "temperature": 0.0, "avg_logprob": -0.07004782583861224, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06864730268716812}, {"id": 160, "seek": 119700, "start": 1214.0, "end": 1221.0, "text": " Key policy is useful because it can say things like, unless you booted this exact kernel version, do not release this key.", "tokens": [51214, 12759, 3897, 307, 4420, 570, 309, 393, 584, 721, 411, 11, 5969, 291, 11450, 292, 341, 1900, 28256, 3037, 11, 360, 406, 4374, 341, 2141, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07004782583861224, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06864730268716812}, {"id": 161, "seek": 119700, "start": 1221.0, "end": 1224.0, "text": " Do not sign anything with this GPG key.", "tokens": [51564, 1144, 406, 1465, 1340, 365, 341, 26039, 38, 2141, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07004782583861224, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06864730268716812}, {"id": 162, "seek": 119700, "start": 1224.0, "end": 1226.0, "text": " Do not use this key.", "tokens": [51714, 1144, 406, 764, 341, 2141, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07004782583861224, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.06864730268716812}, {"id": 163, "seek": 122600, "start": 1226.0, "end": 1230.0, "text": " So key policy is something that I'll come on to a bit later.", "tokens": [50364, 407, 2141, 3897, 307, 746, 300, 286, 603, 808, 322, 281, 257, 857, 1780, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08143753475613064, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0027525932528078556}, {"id": 164, "seek": 122600, "start": 1230.0, "end": 1233.0, "text": " But sessions make using a TPM way more complicated.", "tokens": [50564, 583, 11081, 652, 1228, 257, 314, 18819, 636, 544, 6179, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08143753475613064, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0027525932528078556}, {"id": 165, "seek": 122600, "start": 1233.0, "end": 1242.0, "text": " It's all complexity you hopefully don't need to know anything about because the more complex and difficult it is, the more reluctant everybody is to use it.", "tokens": [50714, 467, 311, 439, 14024, 291, 4696, 500, 380, 643, 281, 458, 1340, 466, 570, 264, 544, 3997, 293, 2252, 309, 307, 11, 264, 544, 33677, 2201, 307, 281, 764, 309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.08143753475613064, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0027525932528078556}, {"id": 166, "seek": 122600, "start": 1242.0, "end": 1246.0, "text": " So let's get on to crypto system enabling.", "tokens": [51164, 407, 718, 311, 483, 322, 281, 17240, 1185, 23148, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08143753475613064, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0027525932528078556}, {"id": 167, "seek": 122600, "start": 1246.0, "end": 1250.0, "text": " Existing crypto systems mostly use password protected keys.", "tokens": [51364, 2111, 468, 278, 17240, 3652, 5240, 764, 11524, 10594, 9317, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08143753475613064, "compression_ratio": 1.5564853556485356, "no_speech_prob": 0.0027525932528078556}, {"id": 168, "seek": 125000, "start": 1250.0, "end": 1259.0, "text": " You've all seen them in open SSH and GPG that if you cap the key file, the private key file, it's usually just a password encrypted key of some sort.", "tokens": [50364, 509, 600, 439, 1612, 552, 294, 1269, 12238, 39, 293, 26039, 38, 300, 498, 291, 1410, 264, 2141, 3991, 11, 264, 4551, 2141, 3991, 11, 309, 311, 2673, 445, 257, 11524, 36663, 2141, 295, 512, 1333, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11056310077046239, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.19669029116630554}, {"id": 169, "seek": 125000, "start": 1259.0, "end": 1260.0, "text": " Easy.", "tokens": [50814, 16002, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11056310077046239, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.19669029116630554}, {"id": 170, "seek": 125000, "start": 1260.0, "end": 1264.0, "text": " TPM keys also require something called an authority.", "tokens": [50864, 314, 18819, 9317, 611, 3651, 746, 1219, 364, 8281, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11056310077046239, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.19669029116630554}, {"id": 171, "seek": 125000, "start": 1264.0, "end": 1267.0, "text": " I mean, you can actually tell TPM not to use an authority.", "tokens": [51064, 286, 914, 11, 291, 393, 767, 980, 314, 18819, 406, 281, 764, 364, 8281, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11056310077046239, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.19669029116630554}, {"id": 172, "seek": 125000, "start": 1267.0, "end": 1271.0, "text": " You can just use it without effectively non too factor like a lot of USB keys.", "tokens": [51214, 509, 393, 445, 764, 309, 1553, 8659, 2107, 886, 5952, 411, 257, 688, 295, 10109, 9317, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11056310077046239, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.19669029116630554}, {"id": 173, "seek": 125000, "start": 1271.0, "end": 1275.0, "text": " But for the best use case, you've actually got a key authority.", "tokens": [51414, 583, 337, 264, 1151, 764, 1389, 11, 291, 600, 767, 658, 257, 2141, 8281, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11056310077046239, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.19669029116630554}, {"id": 174, "seek": 125000, "start": 1275.0, "end": 1279.0, "text": " And it's basically a secret you just proved to the TPM, you know.", "tokens": [51614, 400, 309, 311, 1936, 257, 4054, 291, 445, 14617, 281, 264, 314, 18819, 11, 291, 458, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11056310077046239, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.19669029116630554}, {"id": 175, "seek": 127900, "start": 1279.0, "end": 1284.0, "text": " If you do it over an HMAC session, you do an HMAC proof.", "tokens": [50364, 759, 291, 360, 309, 670, 364, 389, 44, 4378, 5481, 11, 291, 360, 364, 389, 44, 4378, 8177, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10590685193783769, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006653591059148312}, {"id": 176, "seek": 127900, "start": 1284.0, "end": 1287.0, "text": " It's effectively a challenge proof that you know the password.", "tokens": [50614, 467, 311, 8659, 257, 3430, 8177, 300, 291, 458, 264, 11524, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10590685193783769, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006653591059148312}, {"id": 177, "seek": 127900, "start": 1287.0, "end": 1291.0, "text": " Password itself doesn't flow over the bus in the clear.", "tokens": [50764, 10319, 7462, 2564, 1177, 380, 3095, 670, 264, 1255, 294, 264, 1850, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10590685193783769, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006653591059148312}, {"id": 178, "seek": 127900, "start": 1291.0, "end": 1298.0, "text": " And the key files contain a TPM key blobs and the password can just be used as the key authority.", "tokens": [50964, 400, 264, 2141, 7098, 5304, 257, 314, 18819, 2141, 1749, 929, 293, 264, 11524, 393, 445, 312, 1143, 382, 264, 2141, 8281, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10590685193783769, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006653591059148312}, {"id": 179, "seek": 127900, "start": 1298.0, "end": 1300.0, "text": " This is all very easy.", "tokens": [51314, 639, 307, 439, 588, 1858, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10590685193783769, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006653591059148312}, {"id": 180, "seek": 127900, "start": 1300.0, "end": 1304.0, "text": " The problem is the key file format needs standardizing.", "tokens": [51414, 440, 1154, 307, 264, 2141, 3991, 7877, 2203, 3832, 3319, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10590685193783769, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006653591059148312}, {"id": 181, "seek": 127900, "start": 1304.0, "end": 1306.0, "text": " We have loads of crypto systems.", "tokens": [51614, 492, 362, 12668, 295, 17240, 3652, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10590685193783769, "compression_ratio": 1.610878661087866, "no_speech_prob": 0.006653591059148312}, {"id": 182, "seek": 130600, "start": 1306.0, "end": 1311.0, "text": " One of the early successes of cryptography is that pretty much everybody uses the open SSL key format,", "tokens": [50364, 1485, 295, 264, 2440, 26101, 295, 9844, 5820, 307, 300, 1238, 709, 2201, 4960, 264, 1269, 12238, 43, 2141, 7877, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07546768350116277, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.008537635207176208}, {"id": 183, "seek": 130600, "start": 1311.0, "end": 1316.0, "text": " which if you've seen it, it's that PEM file format, which is really useful.", "tokens": [50614, 597, 498, 291, 600, 1612, 309, 11, 309, 311, 300, 430, 6683, 3991, 7877, 11, 597, 307, 534, 4420, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07546768350116277, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.008537635207176208}, {"id": 184, "seek": 130600, "start": 1316.0, "end": 1320.0, "text": " So in order to get interoperability in the TPM ecosystem,", "tokens": [50864, 407, 294, 1668, 281, 483, 728, 7192, 2310, 294, 264, 314, 18819, 11311, 11, 51064], "temperature": 0.0, "avg_logprob": -0.07546768350116277, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.008537635207176208}, {"id": 185, "seek": 130600, "start": 1320.0, "end": 1327.0, "text": " I've actually had to spend a long time trying to force people to standardize on one particular way of using TPM keys,", "tokens": [51064, 286, 600, 767, 632, 281, 3496, 257, 938, 565, 1382, 281, 3464, 561, 281, 3832, 1125, 322, 472, 1729, 636, 295, 1228, 314, 18819, 9317, 11, 51414], "temperature": 0.0, "avg_logprob": -0.07546768350116277, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.008537635207176208}, {"id": 186, "seek": 130600, "start": 1327.0, "end": 1329.0, "text": " one way of writing them.", "tokens": [51414, 472, 636, 295, 3579, 552, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07546768350116277, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.008537635207176208}, {"id": 187, "seek": 130600, "start": 1329.0, "end": 1335.0, "text": " And pretty much over the last seven years, everybody has actually agreed to do this.", "tokens": [51514, 400, 1238, 709, 670, 264, 1036, 3407, 924, 11, 2201, 575, 767, 9166, 281, 360, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07546768350116277, "compression_ratio": 1.6453900709219857, "no_speech_prob": 0.008537635207176208}, {"id": 188, "seek": 133500, "start": 1335.0, "end": 1339.0, "text": " Well, an IBM who can't agree on anything over the TPM have agreed to do this.", "tokens": [50364, 1042, 11, 364, 23487, 567, 393, 380, 3986, 322, 1340, 670, 264, 314, 18819, 362, 9166, 281, 360, 341, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12053688918009843, "compression_ratio": 1.5450819672131149, "no_speech_prob": 0.018462199717760086}, {"id": 189, "seek": 133500, "start": 1339.0, "end": 1346.0, "text": " And so we actually have, oh, well, apart from system D, who's a late comer to the TPM consumer of space,", "tokens": [50564, 400, 370, 321, 767, 362, 11, 1954, 11, 731, 11, 4936, 490, 1185, 413, 11, 567, 311, 257, 3469, 16510, 281, 264, 314, 18819, 9711, 295, 1901, 11, 50914], "temperature": 0.0, "avg_logprob": -0.12053688918009843, "compression_ratio": 1.5450819672131149, "no_speech_prob": 0.018462199717760086}, {"id": 190, "seek": 133500, "start": 1346.0, "end": 1349.0, "text": " everything else uses a standard key format.", "tokens": [50914, 1203, 1646, 4960, 257, 3832, 2141, 7877, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12053688918009843, "compression_ratio": 1.5450819672131149, "no_speech_prob": 0.018462199717760086}, {"id": 191, "seek": 133500, "start": 1349.0, "end": 1352.0, "text": " And that key format is currently standardized on my website,", "tokens": [51064, 400, 300, 2141, 7877, 307, 4362, 31677, 322, 452, 3144, 11, 51214], "temperature": 0.0, "avg_logprob": -0.12053688918009843, "compression_ratio": 1.5450819672131149, "no_speech_prob": 0.018462199717760086}, {"id": 192, "seek": 133500, "start": 1352.0, "end": 1360.0, "text": " but ultimately I'm hoping to make it an RFC so that it will just be part of the industry.", "tokens": [51214, 457, 6284, 286, 478, 7159, 281, 652, 309, 364, 497, 18671, 370, 300, 309, 486, 445, 312, 644, 295, 264, 3518, 13, 51614], "temperature": 0.0, "avg_logprob": -0.12053688918009843, "compression_ratio": 1.5450819672131149, "no_speech_prob": 0.018462199717760086}, {"id": 193, "seek": 136000, "start": 1360.0, "end": 1366.0, "text": " And so then, as long as the crypto system recognizes the key file, everything should just work.", "tokens": [50364, 400, 370, 550, 11, 382, 938, 382, 264, 17240, 1185, 26564, 264, 2141, 3991, 11, 1203, 820, 445, 589, 13, 50664], "temperature": 0.0, "avg_logprob": -0.09598792832473228, "compression_ratio": 1.7153558052434457, "no_speech_prob": 0.07217130064964294}, {"id": 194, "seek": 136000, "start": 1366.0, "end": 1371.0, "text": " You can use a TPM based key file in exactly the same place as you just used a private key file.", "tokens": [50664, 509, 393, 764, 257, 314, 18819, 2361, 2141, 3991, 294, 2293, 264, 912, 1081, 382, 291, 445, 1143, 257, 4551, 2141, 3991, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09598792832473228, "compression_ratio": 1.7153558052434457, "no_speech_prob": 0.07217130064964294}, {"id": 195, "seek": 136000, "start": 1371.0, "end": 1373.0, "text": " Everything should just work through the TPM.", "tokens": [50914, 5471, 820, 445, 589, 807, 264, 314, 18819, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09598792832473228, "compression_ratio": 1.7153558052434457, "no_speech_prob": 0.07217130064964294}, {"id": 196, "seek": 136000, "start": 1373.0, "end": 1378.0, "text": " All your cryptography operations become naturally secure, which is useful property.", "tokens": [51014, 1057, 428, 9844, 5820, 7705, 1813, 8195, 7144, 11, 597, 307, 4420, 4707, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09598792832473228, "compression_ratio": 1.7153558052434457, "no_speech_prob": 0.07217130064964294}, {"id": 197, "seek": 136000, "start": 1378.0, "end": 1380.0, "text": " And you don't need to know anything about the TPM.", "tokens": [51264, 400, 291, 500, 380, 643, 281, 458, 1340, 466, 264, 314, 18819, 13, 51364], "temperature": 0.0, "avg_logprob": -0.09598792832473228, "compression_ratio": 1.7153558052434457, "no_speech_prob": 0.07217130064964294}, {"id": 198, "seek": 136000, "start": 1380.0, "end": 1387.0, "text": " All you need to do is know how to do a one time conversion of your key, and that's it.", "tokens": [51364, 1057, 291, 643, 281, 360, 307, 458, 577, 281, 360, 257, 472, 565, 14298, 295, 428, 2141, 11, 293, 300, 311, 309, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09598792832473228, "compression_ratio": 1.7153558052434457, "no_speech_prob": 0.07217130064964294}, {"id": 199, "seek": 138700, "start": 1388.0, "end": 1391.0, "text": " And obviously you need some discipline around key backup.", "tokens": [50414, 400, 2745, 291, 643, 512, 13635, 926, 2141, 14807, 13, 50564], "temperature": 0.0, "avg_logprob": -0.04840637370944023, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.0158245712518692}, {"id": 200, "seek": 138700, "start": 1391.0, "end": 1398.0, "text": " As I said, if you convert your key and remove the original, you have no way of separating that key from that laptop.", "tokens": [50564, 1018, 286, 848, 11, 498, 291, 7620, 428, 2141, 293, 4159, 264, 3380, 11, 291, 362, 572, 636, 295, 29279, 300, 2141, 490, 300, 10732, 13, 50914], "temperature": 0.0, "avg_logprob": -0.04840637370944023, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.0158245712518692}, {"id": 201, "seek": 138700, "start": 1398.0, "end": 1403.0, "text": " Now, lots of keys are ephemeral, so perhaps that's the way you should use some of your keys.", "tokens": [50914, 823, 11, 3195, 295, 9317, 366, 308, 41245, 2790, 11, 370, 4317, 300, 311, 264, 636, 291, 820, 764, 512, 295, 428, 9317, 13, 51164], "temperature": 0.0, "avg_logprob": -0.04840637370944023, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.0158245712518692}, {"id": 202, "seek": 138700, "start": 1403.0, "end": 1407.0, "text": " But some keys represent your identity and should survive the laptop.", "tokens": [51164, 583, 512, 9317, 2906, 428, 6575, 293, 820, 7867, 264, 10732, 13, 51364], "temperature": 0.0, "avg_logprob": -0.04840637370944023, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.0158245712518692}, {"id": 203, "seek": 138700, "start": 1407.0, "end": 1411.0, "text": " So you need to be careful knowing which key is which and how you should use it.", "tokens": [51364, 407, 291, 643, 281, 312, 5026, 5276, 597, 2141, 307, 597, 293, 577, 291, 820, 764, 309, 13, 51564], "temperature": 0.0, "avg_logprob": -0.04840637370944023, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.0158245712518692}, {"id": 204, "seek": 138700, "start": 1411.0, "end": 1413.0, "text": " So some discipline around this.", "tokens": [51564, 407, 512, 13635, 926, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.04840637370944023, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.0158245712518692}, {"id": 205, "seek": 138700, "start": 1413.0, "end": 1414.0, "text": " The advantages are easy.", "tokens": [51664, 440, 14906, 366, 1858, 13, 51714], "temperature": 0.0, "avg_logprob": -0.04840637370944023, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.0158245712518692}, {"id": 206, "seek": 138700, "start": 1414.0, "end": 1416.0, "text": " You only need to trust the TPM.", "tokens": [51714, 509, 787, 643, 281, 3361, 264, 314, 18819, 13, 51814], "temperature": 0.0, "avg_logprob": -0.04840637370944023, "compression_ratio": 1.7971530249110321, "no_speech_prob": 0.0158245712518692}, {"id": 207, "seek": 141600, "start": 1416.0, "end": 1420.0, "text": " TPMs have been manufactured by a lot of countries all over the world.", "tokens": [50364, 314, 18819, 82, 362, 668, 25738, 538, 257, 688, 295, 3517, 439, 670, 264, 1002, 13, 50564], "temperature": 0.0, "avg_logprob": -0.07783671898570488, "compression_ratio": 1.6622073578595318, "no_speech_prob": 0.06675097346305847}, {"id": 208, "seek": 141600, "start": 1420.0, "end": 1422.0, "text": " Israel is now a current one.", "tokens": [50564, 5674, 307, 586, 257, 2190, 472, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07783671898570488, "compression_ratio": 1.6622073578595318, "no_speech_prob": 0.06675097346305847}, {"id": 209, "seek": 141600, "start": 1422.0, "end": 1429.0, "text": " There have been allegations the NSA put a back door in it, but currently, if you remember two talks ago,", "tokens": [50664, 821, 362, 668, 29259, 264, 47299, 829, 257, 646, 2853, 294, 309, 11, 457, 4362, 11, 498, 291, 1604, 732, 6686, 2057, 11, 51014], "temperature": 0.0, "avg_logprob": -0.07783671898570488, "compression_ratio": 1.6622073578595318, "no_speech_prob": 0.06675097346305847}, {"id": 210, "seek": 141600, "start": 1429.0, "end": 1431.0, "text": " the guy was talking about reproducible bills.", "tokens": [51014, 264, 2146, 390, 1417, 466, 11408, 32128, 12433, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07783671898570488, "compression_ratio": 1.6622073578595318, "no_speech_prob": 0.06675097346305847}, {"id": 211, "seek": 141600, "start": 1431.0, "end": 1438.0, "text": " We actually now have a standard software model for a TPM that manufacturers are supposed to provably conform to.", "tokens": [51114, 492, 767, 586, 362, 257, 3832, 4722, 2316, 337, 257, 314, 18819, 300, 18455, 366, 3442, 281, 1439, 1188, 18975, 281, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07783671898570488, "compression_ratio": 1.6622073578595318, "no_speech_prob": 0.06675097346305847}, {"id": 212, "seek": 141600, "start": 1438.0, "end": 1442.0, "text": " So we should have proof that there are no back doors on behalf of the NSA.", "tokens": [51464, 407, 321, 820, 362, 8177, 300, 456, 366, 572, 646, 8077, 322, 9490, 295, 264, 47299, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07783671898570488, "compression_ratio": 1.6622073578595318, "no_speech_prob": 0.06675097346305847}, {"id": 213, "seek": 141600, "start": 1442.0, "end": 1445.0, "text": " Of course, they could be listening on the bus or something.", "tokens": [51664, 2720, 1164, 11, 436, 727, 312, 4764, 322, 264, 1255, 420, 746, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07783671898570488, "compression_ratio": 1.6622073578595318, "no_speech_prob": 0.06675097346305847}, {"id": 214, "seek": 144500, "start": 1445.0, "end": 1450.0, "text": " And the great thing is, even if you take away my private key file,", "tokens": [50364, 400, 264, 869, 551, 307, 11, 754, 498, 291, 747, 1314, 452, 4551, 2141, 3991, 11, 50614], "temperature": 0.0, "avg_logprob": -0.059306654155763805, "compression_ratio": 1.640625, "no_speech_prob": 0.02611268311738968}, {"id": 215, "seek": 144500, "start": 1450.0, "end": 1454.0, "text": " you can't extract the key from it without being in possession of my laptop.", "tokens": [50614, 291, 393, 380, 8947, 264, 2141, 490, 309, 1553, 885, 294, 20935, 295, 452, 10732, 13, 50814], "temperature": 0.0, "avg_logprob": -0.059306654155763805, "compression_ratio": 1.640625, "no_speech_prob": 0.02611268311738968}, {"id": 216, "seek": 144500, "start": 1454.0, "end": 1457.0, "text": " Everybody when I used to make this statement said, prove it.", "tokens": [50814, 7646, 562, 286, 1143, 281, 652, 341, 5629, 848, 11, 7081, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.059306654155763805, "compression_ratio": 1.640625, "no_speech_prob": 0.02611268311738968}, {"id": 217, "seek": 144500, "start": 1457.0, "end": 1461.0, "text": " So there is an SSH private key.", "tokens": [50964, 407, 456, 307, 364, 12238, 39, 4551, 2141, 13, 51164], "temperature": 0.0, "avg_logprob": -0.059306654155763805, "compression_ratio": 1.640625, "no_speech_prob": 0.02611268311738968}, {"id": 218, "seek": 144500, "start": 1461.0, "end": 1465.0, "text": " I've helpfully removed the password from it, so it has no password.", "tokens": [51164, 286, 600, 854, 2277, 7261, 264, 11524, 490, 309, 11, 370, 309, 575, 572, 11524, 13, 51364], "temperature": 0.0, "avg_logprob": -0.059306654155763805, "compression_ratio": 1.640625, "no_speech_prob": 0.02611268311738968}, {"id": 219, "seek": 144500, "start": 1465.0, "end": 1467.0, "text": " It's my TPM key.", "tokens": [51364, 467, 311, 452, 314, 18819, 2141, 13, 51464], "temperature": 0.0, "avg_logprob": -0.059306654155763805, "compression_ratio": 1.640625, "no_speech_prob": 0.02611268311738968}, {"id": 220, "seek": 144500, "start": 1467.0, "end": 1471.0, "text": " If you actually scan that QR code, you will get the private key.", "tokens": [51464, 759, 291, 767, 11049, 300, 32784, 3089, 11, 291, 486, 483, 264, 4551, 2141, 13, 51664], "temperature": 0.0, "avg_logprob": -0.059306654155763805, "compression_ratio": 1.640625, "no_speech_prob": 0.02611268311738968}, {"id": 221, "seek": 144500, "start": 1471.0, "end": 1474.0, "text": " And anybody can actually see this.", "tokens": [51664, 400, 4472, 393, 767, 536, 341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.059306654155763805, "compression_ratio": 1.640625, "no_speech_prob": 0.02611268311738968}, {"id": 222, "seek": 147400, "start": 1474.0, "end": 1479.0, "text": " You can't do this with an ordinary private key because I'd be giving away with my secrets.", "tokens": [50364, 509, 393, 380, 360, 341, 365, 364, 10547, 4551, 2141, 570, 286, 1116, 312, 2902, 1314, 365, 452, 14093, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07617220767708711, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.009552349336445332}, {"id": 223, "seek": 147400, "start": 1479.0, "end": 1482.0, "text": " But I can do this with a TPM key.", "tokens": [50614, 583, 286, 393, 360, 341, 365, 257, 314, 18819, 2141, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07617220767708711, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.009552349336445332}, {"id": 224, "seek": 147400, "start": 1482.0, "end": 1489.0, "text": " And just as a precaution for those of you figured out that this key would be usable if you got hold of the laptop that produced it,", "tokens": [50764, 400, 445, 382, 257, 25651, 1448, 337, 729, 295, 291, 8932, 484, 300, 341, 2141, 576, 312, 29975, 498, 291, 658, 1797, 295, 264, 10732, 300, 7126, 309, 11, 51114], "temperature": 0.0, "avg_logprob": -0.07617220767708711, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.009552349336445332}, {"id": 225, "seek": 147400, "start": 1489.0, "end": 1492.0, "text": " it wasn't produced by this laptop sitting on the desk.", "tokens": [51114, 309, 2067, 380, 7126, 538, 341, 10732, 3798, 322, 264, 10026, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07617220767708711, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.009552349336445332}, {"id": 226, "seek": 147400, "start": 1492.0, "end": 1494.0, "text": " It was produced by a laptop sitting back home.", "tokens": [51264, 467, 390, 7126, 538, 257, 10732, 3798, 646, 1280, 13, 51364], "temperature": 0.0, "avg_logprob": -0.07617220767708711, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.009552349336445332}, {"id": 227, "seek": 147400, "start": 1494.0, "end": 1497.0, "text": " So don't mug me late at night to try and get this.", "tokens": [51364, 407, 500, 380, 23610, 385, 3469, 412, 1818, 281, 853, 293, 483, 341, 13, 51514], "temperature": 0.0, "avg_logprob": -0.07617220767708711, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.009552349336445332}, {"id": 228, "seek": 147400, "start": 1497.0, "end": 1501.0, "text": " But this is the SSH key that I use for logging into kernel.org.", "tokens": [51514, 583, 341, 307, 264, 12238, 39, 2141, 300, 286, 764, 337, 27991, 666, 28256, 13, 4646, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07617220767708711, "compression_ratio": 1.7014388489208634, "no_speech_prob": 0.009552349336445332}, {"id": 229, "seek": 150100, "start": 1501.0, "end": 1511.0, "text": " And I'm now just publishing the secret part of that key so confident and I that the TPM will protect those secrets.", "tokens": [50364, 400, 286, 478, 586, 445, 17832, 264, 4054, 644, 295, 300, 2141, 370, 6679, 293, 286, 300, 264, 314, 18819, 486, 2371, 729, 14093, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07090497493743897, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.020119866356253624}, {"id": 230, "seek": 150100, "start": 1511.0, "end": 1516.0, "text": " So apart from conversion to TPM format, there is no change to the workflow.", "tokens": [50864, 407, 4936, 490, 14298, 281, 314, 18819, 7877, 11, 456, 307, 572, 1319, 281, 264, 20993, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07090497493743897, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.020119866356253624}, {"id": 231, "seek": 150100, "start": 1516.0, "end": 1523.0, "text": " So this is hopefully what makes it simple for all of you to actually use TPM keys in your everyday life.", "tokens": [51114, 407, 341, 307, 4696, 437, 1669, 309, 2199, 337, 439, 295, 291, 281, 767, 764, 314, 18819, 9317, 294, 428, 7429, 993, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07090497493743897, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.020119866356253624}, {"id": 232, "seek": 150100, "start": 1523.0, "end": 1529.0, "text": " The disadvantages are, as I said, the key is tied to a physical TPM, which is part of your laptop.", "tokens": [51464, 440, 37431, 366, 11, 382, 286, 848, 11, 264, 2141, 307, 9601, 281, 257, 4001, 314, 18819, 11, 597, 307, 644, 295, 428, 10732, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07090497493743897, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.020119866356253624}, {"id": 233, "seek": 152900, "start": 1529.0, "end": 1533.0, "text": " When your laptop is retired or dies, that key is no longer accessible.", "tokens": [50364, 1133, 428, 10732, 307, 16776, 420, 2714, 11, 300, 2141, 307, 572, 2854, 9515, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09518685774369673, "compression_ratio": 1.6305220883534137, "no_speech_prob": 0.009360423311591148}, {"id": 234, "seek": 152900, "start": 1533.0, "end": 1537.0, "text": " You can no longer use it.", "tokens": [50564, 509, 393, 572, 2854, 764, 309, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09518685774369673, "compression_ratio": 1.6305220883534137, "no_speech_prob": 0.009360423311591148}, {"id": 235, "seek": 152900, "start": 1537.0, "end": 1543.0, "text": " The keys all need to be reconverted or duplicated, therefore, when you change laptop, if it's a long-lived key.", "tokens": [50764, 440, 9317, 439, 643, 281, 312, 9993, 18537, 420, 1581, 564, 3587, 11, 4412, 11, 562, 291, 1319, 10732, 11, 498, 309, 311, 257, 938, 12, 46554, 2141, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09518685774369673, "compression_ratio": 1.6305220883534137, "no_speech_prob": 0.009360423311591148}, {"id": 236, "seek": 152900, "start": 1543.0, "end": 1547.0, "text": " And the TPM is slow. It can't process hundreds of keys.", "tokens": [51064, 400, 264, 314, 18819, 307, 2964, 13, 467, 393, 380, 1399, 6779, 295, 9317, 13, 51264], "temperature": 0.0, "avg_logprob": -0.09518685774369673, "compression_ratio": 1.6305220883534137, "no_speech_prob": 0.009360423311591148}, {"id": 237, "seek": 152900, "start": 1547.0, "end": 1552.0, "text": " This is the reason why the TPM has a key ceiling operation,", "tokens": [51264, 639, 307, 264, 1778, 983, 264, 314, 18819, 575, 257, 2141, 13655, 6916, 11, 51514], "temperature": 0.0, "avg_logprob": -0.09518685774369673, "compression_ratio": 1.6305220883534137, "no_speech_prob": 0.009360423311591148}, {"id": 238, "seek": 152900, "start": 1552.0, "end": 1558.0, "text": " because TPM is way too slow to use for symmetric encryption like disk encryption.", "tokens": [51514, 570, 314, 18819, 307, 636, 886, 2964, 281, 764, 337, 32330, 29575, 411, 12355, 29575, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09518685774369673, "compression_ratio": 1.6305220883534137, "no_speech_prob": 0.009360423311591148}, {"id": 239, "seek": 155800, "start": 1558.0, "end": 1563.0, "text": " So the way you use disk encryption with a TPM is the key is actually sealed to the TPM.", "tokens": [50364, 407, 264, 636, 291, 764, 12355, 29575, 365, 257, 314, 18819, 307, 264, 2141, 307, 767, 21514, 281, 264, 314, 18819, 13, 50614], "temperature": 0.0, "avg_logprob": -0.060076132541945, "compression_ratio": 1.7773584905660378, "no_speech_prob": 0.0059427316300570965}, {"id": 240, "seek": 155800, "start": 1563.0, "end": 1569.0, "text": " But if the TPM agrees and you provide the right password and all the policy satisfies,", "tokens": [50614, 583, 498, 264, 314, 18819, 26383, 293, 291, 2893, 264, 558, 11524, 293, 439, 264, 3897, 44271, 11, 50914], "temperature": 0.0, "avg_logprob": -0.060076132541945, "compression_ratio": 1.7773584905660378, "no_speech_prob": 0.0059427316300570965}, {"id": 241, "seek": 155800, "start": 1569.0, "end": 1572.0, "text": " it will actually release that key into the kernel, into the open,", "tokens": [50914, 309, 486, 767, 4374, 300, 2141, 666, 264, 28256, 11, 666, 264, 1269, 11, 51064], "temperature": 0.0, "avg_logprob": -0.060076132541945, "compression_ratio": 1.7773584905660378, "no_speech_prob": 0.0059427316300570965}, {"id": 242, "seek": 155800, "start": 1572.0, "end": 1577.0, "text": " where it can then actually be used by the main CPU for symmetric cryptography.", "tokens": [51064, 689, 309, 393, 550, 767, 312, 1143, 538, 264, 2135, 13199, 337, 32330, 9844, 5820, 13, 51314], "temperature": 0.0, "avg_logprob": -0.060076132541945, "compression_ratio": 1.7773584905660378, "no_speech_prob": 0.0059427316300570965}, {"id": 243, "seek": 155800, "start": 1577.0, "end": 1583.0, "text": " But for asymmetric keys for elliptic curve and RSA, the TPM itself is doing the key operations.", "tokens": [51314, 583, 337, 37277, 17475, 9317, 337, 8284, 22439, 299, 7605, 293, 497, 8886, 11, 264, 314, 18819, 2564, 307, 884, 264, 2141, 7705, 13, 51614], "temperature": 0.0, "avg_logprob": -0.060076132541945, "compression_ratio": 1.7773584905660378, "no_speech_prob": 0.0059427316300570965}, {"id": 244, "seek": 155800, "start": 1583.0, "end": 1587.0, "text": " The private part of the key is never actually revealed.", "tokens": [51614, 440, 4551, 644, 295, 264, 2141, 307, 1128, 767, 9599, 13, 51814], "temperature": 0.0, "avg_logprob": -0.060076132541945, "compression_ratio": 1.7773584905660378, "no_speech_prob": 0.0059427316300570965}, {"id": 245, "seek": 158700, "start": 1587.0, "end": 1592.0, "text": " So the current status is that for open SSL1,", "tokens": [50364, 407, 264, 2190, 6558, 307, 300, 337, 1269, 12238, 43, 16, 11, 50614], "temperature": 0.0, "avg_logprob": -0.07455894864838698, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.008186743594706059}, {"id": 246, "seek": 158700, "start": 1592.0, "end": 1597.0, "text": " the only way of using external crypto systems was something called an open SSL engine.", "tokens": [50614, 264, 787, 636, 295, 1228, 8320, 17240, 3652, 390, 746, 1219, 364, 1269, 12238, 43, 2848, 13, 50864], "temperature": 0.0, "avg_logprob": -0.07455894864838698, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.008186743594706059}, {"id": 247, "seek": 158700, "start": 1597.0, "end": 1602.0, "text": " And fortunately, we now have two of these for the TPM.", "tokens": [50864, 400, 25511, 11, 321, 586, 362, 732, 295, 613, 337, 264, 314, 18819, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07455894864838698, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.008186743594706059}, {"id": 248, "seek": 158700, "start": 1602.0, "end": 1606.0, "text": " So this is one I wrote, the top one, the open SSL2 TPM engine.", "tokens": [51114, 407, 341, 307, 472, 286, 4114, 11, 264, 1192, 472, 11, 264, 1269, 12238, 43, 17, 314, 18819, 2848, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07455894864838698, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.008186743594706059}, {"id": 249, "seek": 158700, "start": 1606.0, "end": 1611.0, "text": " This is one Intel guys wrote to go with the Intel TSS, which is the TPM2 TSS engine.", "tokens": [51314, 639, 307, 472, 19762, 1074, 4114, 281, 352, 365, 264, 19762, 314, 21929, 11, 597, 307, 264, 314, 18819, 17, 314, 21929, 2848, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07455894864838698, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.008186743594706059}, {"id": 250, "seek": 158700, "start": 1611.0, "end": 1616.0, "text": " Both of those are fairly good and fully functional as open SSL engines.", "tokens": [51564, 6767, 295, 729, 366, 6457, 665, 293, 4498, 11745, 382, 1269, 12238, 43, 12982, 13, 51814], "temperature": 0.0, "avg_logprob": -0.07455894864838698, "compression_ratio": 1.698744769874477, "no_speech_prob": 0.008186743594706059}, {"id": 251, "seek": 161600, "start": 1617.0, "end": 1622.0, "text": " For open SSL3, there is a problem in that they are trying to deprecate engines.", "tokens": [50414, 1171, 1269, 12238, 43, 18, 11, 456, 307, 257, 1154, 294, 300, 436, 366, 1382, 281, 1367, 13867, 473, 12982, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07871179995329483, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.011455578729510307}, {"id": 252, "seek": 161600, "start": 1622.0, "end": 1625.0, "text": " Now, right at the moment, we're on open SSL...", "tokens": [50664, 823, 11, 558, 412, 264, 1623, 11, 321, 434, 322, 1269, 12238, 43, 485, 50814], "temperature": 0.0, "avg_logprob": -0.07871179995329483, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.011455578729510307}, {"id": 253, "seek": 161600, "start": 1625.0, "end": 1630.0, "text": " So when open SSL3 was coming up, they promised us point blank", "tokens": [50814, 407, 562, 1269, 12238, 43, 18, 390, 1348, 493, 11, 436, 10768, 505, 935, 8247, 51064], "temperature": 0.0, "avg_logprob": -0.07871179995329483, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.011455578729510307}, {"id": 254, "seek": 161600, "start": 1630.0, "end": 1634.0, "text": " that if we hadn't converted our engines, they wouldn't work with open SSL3 full stop.", "tokens": [51064, 300, 498, 321, 8782, 380, 16424, 527, 12982, 11, 436, 2759, 380, 589, 365, 1269, 12238, 43, 18, 1577, 1590, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07871179995329483, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.011455578729510307}, {"id": 255, "seek": 161600, "start": 1634.0, "end": 1638.0, "text": " They admitted when open SSL3.0 was released, this was a lie.", "tokens": [51264, 814, 14920, 562, 1269, 12238, 43, 18, 13, 15, 390, 4736, 11, 341, 390, 257, 4544, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07871179995329483, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.011455578729510307}, {"id": 256, "seek": 161600, "start": 1638.0, "end": 1642.0, "text": " And so open SSL3.0 still works with engines.", "tokens": [51464, 400, 370, 1269, 12238, 43, 18, 13, 15, 920, 1985, 365, 12982, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07871179995329483, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.011455578729510307}, {"id": 257, "seek": 164200, "start": 1642.0, "end": 1647.0, "text": " They've just released open SSL3.1, which amazingly enough still works with engines.", "tokens": [50364, 814, 600, 445, 4736, 1269, 12238, 43, 18, 13, 16, 11, 597, 31762, 1547, 920, 1985, 365, 12982, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08179772910425219, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.010169816203415394}, {"id": 258, "seek": 164200, "start": 1647.0, "end": 1653.0, "text": " So the reason for this is because open SSL themselves internally uses engines", "tokens": [50614, 407, 264, 1778, 337, 341, 307, 570, 1269, 12238, 43, 2969, 19501, 4960, 12982, 50914], "temperature": 0.0, "avg_logprob": -0.08179772910425219, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.010169816203415394}, {"id": 259, "seek": 164200, "start": 1653.0, "end": 1656.0, "text": " and they're having a bit of difficulty deprecating their internal engines,", "tokens": [50914, 293, 436, 434, 1419, 257, 857, 295, 10360, 1367, 13867, 990, 641, 6920, 12982, 11, 51064], "temperature": 0.0, "avg_logprob": -0.08179772910425219, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.010169816203415394}, {"id": 260, "seek": 164200, "start": 1656.0, "end": 1659.0, "text": " and obviously they can't pull engine support until they can do that.", "tokens": [51064, 293, 2745, 436, 393, 380, 2235, 2848, 1406, 1826, 436, 393, 360, 300, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08179772910425219, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.010169816203415394}, {"id": 261, "seek": 164200, "start": 1659.0, "end": 1662.0, "text": " So the engines will continue to work for a while.", "tokens": [51214, 407, 264, 12982, 486, 2354, 281, 589, 337, 257, 1339, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08179772910425219, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.010169816203415394}, {"id": 262, "seek": 164200, "start": 1662.0, "end": 1667.0, "text": " But there is a new mechanism, and it's by new, I mean this was excruciatingly", "tokens": [51364, 583, 456, 307, 257, 777, 7513, 11, 293, 309, 311, 538, 777, 11, 286, 914, 341, 390, 1624, 894, 537, 990, 356, 51614], "temperature": 0.0, "avg_logprob": -0.08179772910425219, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.010169816203415394}, {"id": 263, "seek": 164200, "start": 1667.0, "end": 1670.0, "text": " and completely different from engine code.", "tokens": [51614, 293, 2584, 819, 490, 2848, 3089, 13, 51764], "temperature": 0.0, "avg_logprob": -0.08179772910425219, "compression_ratio": 1.676056338028169, "no_speech_prob": 0.010169816203415394}, {"id": 264, "seek": 167000, "start": 1670.0, "end": 1675.0, "text": " So I actually had to rewrite the entirety of the engine code to work with the provider.", "tokens": [50364, 407, 286, 767, 632, 281, 28132, 264, 31557, 295, 264, 2848, 3089, 281, 589, 365, 264, 12398, 13, 50614], "temperature": 0.0, "avg_logprob": -0.07000725819514347, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.09379006922245026}, {"id": 265, "seek": 167000, "start": 1675.0, "end": 1678.0, "text": " And then I did a little blog post about it, so if you're in the same position", "tokens": [50614, 400, 550, 286, 630, 257, 707, 6968, 2183, 466, 309, 11, 370, 498, 291, 434, 294, 264, 912, 2535, 50764], "temperature": 0.0, "avg_logprob": -0.07000725819514347, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.09379006922245026}, {"id": 266, "seek": 167000, "start": 1678.0, "end": 1683.0, "text": " and have to convert an engine to a provider, I've got a detailed description of how to do it.", "tokens": [50764, 293, 362, 281, 7620, 364, 2848, 281, 257, 12398, 11, 286, 600, 658, 257, 9942, 3855, 295, 577, 281, 360, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07000725819514347, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.09379006922245026}, {"id": 267, "seek": 167000, "start": 1683.0, "end": 1686.0, "text": " It's not something I would wish on anybody, but it's finally been done.", "tokens": [51014, 467, 311, 406, 746, 286, 576, 3172, 322, 4472, 11, 457, 309, 311, 2721, 668, 1096, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07000725819514347, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.09379006922245026}, {"id": 268, "seek": 167000, "start": 1686.0, "end": 1691.0, "text": " And we do have, even though it only says open SSLTPM2 engine", "tokens": [51164, 400, 321, 360, 362, 11, 754, 1673, 309, 787, 1619, 1269, 12238, 43, 16804, 44, 17, 2848, 51414], "temperature": 0.0, "avg_logprob": -0.07000725819514347, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.09379006922245026}, {"id": 269, "seek": 167000, "start": 1691.0, "end": 1693.0, "text": " because that's the name I chose for the project,", "tokens": [51414, 570, 300, 311, 264, 1315, 286, 5111, 337, 264, 1716, 11, 51514], "temperature": 0.0, "avg_logprob": -0.07000725819514347, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.09379006922245026}, {"id": 270, "seek": 167000, "start": 1693.0, "end": 1695.0, "text": " before I knew it would have to become provider.", "tokens": [51514, 949, 286, 2586, 309, 576, 362, 281, 1813, 12398, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07000725819514347, "compression_ratio": 1.6576271186440679, "no_speech_prob": 0.09379006922245026}, {"id": 271, "seek": 169500, "start": 1695.0, "end": 1701.0, "text": " So it's actually the same code that was in the previous engine is the core code is still there.", "tokens": [50364, 407, 309, 311, 767, 264, 912, 3089, 300, 390, 294, 264, 3894, 2848, 307, 264, 4965, 3089, 307, 920, 456, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10507900961514177, "compression_ratio": 1.6374045801526718, "no_speech_prob": 0.05674421414732933}, {"id": 272, "seek": 169500, "start": 1701.0, "end": 1705.0, "text": " I just separated it up, and I did a provider wrapper around it", "tokens": [50664, 286, 445, 12005, 309, 493, 11, 293, 286, 630, 257, 12398, 46906, 926, 309, 50864], "temperature": 0.0, "avg_logprob": -0.10507900961514177, "compression_ratio": 1.6374045801526718, "no_speech_prob": 0.05674421414732933}, {"id": 273, "seek": 169500, "start": 1705.0, "end": 1710.0, "text": " because the TPM code goes through a lot of tests and has to be provably correct.", "tokens": [50864, 570, 264, 314, 18819, 3089, 1709, 807, 257, 688, 295, 6921, 293, 575, 281, 312, 1439, 1188, 3006, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10507900961514177, "compression_ratio": 1.6374045801526718, "no_speech_prob": 0.05674421414732933}, {"id": 274, "seek": 169500, "start": 1710.0, "end": 1714.0, "text": " The last thing I wanted to do was rewrite all TPM code as well.", "tokens": [51114, 440, 1036, 551, 286, 1415, 281, 360, 390, 28132, 439, 314, 18819, 3089, 382, 731, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10507900961514177, "compression_ratio": 1.6374045801526718, "no_speech_prob": 0.05674421414732933}, {"id": 275, "seek": 169500, "start": 1714.0, "end": 1720.0, "text": " My TPM system comes with Create TPM2 key.", "tokens": [51314, 1222, 314, 18819, 1185, 1487, 365, 20248, 314, 18819, 17, 2141, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10507900961514177, "compression_ratio": 1.6374045801526718, "no_speech_prob": 0.05674421414732933}, {"id": 276, "seek": 169500, "start": 1720.0, "end": 1724.0, "text": " The Intel one comes with a Create key as well, but I've forgotten what it's called.", "tokens": [51614, 440, 19762, 472, 1487, 365, 257, 20248, 2141, 382, 731, 11, 457, 286, 600, 11832, 437, 309, 311, 1219, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10507900961514177, "compression_ratio": 1.6374045801526718, "no_speech_prob": 0.05674421414732933}, {"id": 277, "seek": 172400, "start": 1724.0, "end": 1729.0, "text": " This can also be used to convert ordinary keys to TPM-based keys,", "tokens": [50364, 639, 393, 611, 312, 1143, 281, 7620, 10547, 9317, 281, 314, 18819, 12, 6032, 9317, 11, 50614], "temperature": 0.0, "avg_logprob": -0.0978300306532118, "compression_ratio": 1.6, "no_speech_prob": 0.008041036315262318}, {"id": 278, "seek": 172400, "start": 1729.0, "end": 1734.0, "text": " so it can be used to wrap effectively keys for the TPM.", "tokens": [50614, 370, 309, 393, 312, 1143, 281, 7019, 8659, 9317, 337, 264, 314, 18819, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0978300306532118, "compression_ratio": 1.6, "no_speech_prob": 0.008041036315262318}, {"id": 279, "seek": 172400, "start": 1734.0, "end": 1736.0, "text": " Elliptic curve issues.", "tokens": [50864, 8353, 22439, 299, 7605, 2663, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0978300306532118, "compression_ratio": 1.6, "no_speech_prob": 0.008041036315262318}, {"id": 280, "seek": 172400, "start": 1736.0, "end": 1742.0, "text": " So TPM enabling works just fine, but the way that elliptic curves were programmed in the TPM,", "tokens": [50964, 407, 314, 18819, 23148, 1985, 445, 2489, 11, 457, 264, 636, 300, 8284, 22439, 299, 19490, 645, 31092, 294, 264, 314, 18819, 11, 51264], "temperature": 0.0, "avg_logprob": -0.0978300306532118, "compression_ratio": 1.6, "no_speech_prob": 0.008041036315262318}, {"id": 281, "seek": 172400, "start": 1742.0, "end": 1745.0, "text": " they didn't actually do the generic parameterized curves.", "tokens": [51264, 436, 994, 380, 767, 360, 264, 19577, 13075, 1602, 19490, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0978300306532118, "compression_ratio": 1.6, "no_speech_prob": 0.008041036315262318}, {"id": 282, "seek": 172400, "start": 1745.0, "end": 1748.0, "text": " They did specific named curves.", "tokens": [51414, 814, 630, 2685, 4926, 19490, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0978300306532118, "compression_ratio": 1.6, "no_speech_prob": 0.008041036315262318}, {"id": 283, "seek": 174800, "start": 1748.0, "end": 1754.0, "text": " This means that the only way you get to use elliptic curves with the TPM is if the curve is known to the TPM.", "tokens": [50364, 639, 1355, 300, 264, 787, 636, 291, 483, 281, 764, 8284, 22439, 299, 19490, 365, 264, 314, 18819, 307, 498, 264, 7605, 307, 2570, 281, 264, 314, 18819, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1336142303597214, "compression_ratio": 1.7322834645669292, "no_speech_prob": 0.03823915496468544}, {"id": 284, "seek": 174800, "start": 1754.0, "end": 1758.0, "text": " And in fact, there are only really three mandated...", "tokens": [50664, 400, 294, 1186, 11, 456, 366, 787, 534, 1045, 47563, 485, 50864], "temperature": 0.0, "avg_logprob": -0.1336142303597214, "compression_ratio": 1.7322834645669292, "no_speech_prob": 0.03823915496468544}, {"id": 285, "seek": 174800, "start": 1758.0, "end": 1764.0, "text": " Well, there's technically four because there's a Chinese curve called the SM something or other", "tokens": [50864, 1042, 11, 456, 311, 12120, 1451, 570, 456, 311, 257, 4649, 7605, 1219, 264, 13115, 746, 420, 661, 51164], "temperature": 0.0, "avg_logprob": -0.1336142303597214, "compression_ratio": 1.7322834645669292, "no_speech_prob": 0.03823915496468544}, {"id": 286, "seek": 174800, "start": 1764.0, "end": 1767.0, "text": " that's also mandated in the TPM, but nobody trusts the Chinese.", "tokens": [51164, 300, 311, 611, 47563, 294, 264, 314, 18819, 11, 457, 5079, 45358, 264, 4649, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1336142303597214, "compression_ratio": 1.7322834645669292, "no_speech_prob": 0.03823915496468544}, {"id": 287, "seek": 174800, "start": 1767.0, "end": 1774.0, "text": " So realistically, it's the NIST curves, and the Burrito-Nerring curve, the BN curve, is not something you should use.", "tokens": [51314, 407, 40734, 11, 309, 311, 264, 426, 19756, 19490, 11, 293, 264, 7031, 17492, 12, 45, 260, 2937, 7605, 11, 264, 363, 45, 7605, 11, 307, 406, 746, 291, 820, 764, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1336142303597214, "compression_ratio": 1.7322834645669292, "no_speech_prob": 0.03823915496468544}, {"id": 288, "seek": 177400, "start": 1774.0, "end": 1778.0, "text": " It was invented for direct anonymous attestation.", "tokens": [50364, 467, 390, 14479, 337, 2047, 24932, 951, 377, 399, 13, 50564], "temperature": 0.0, "avg_logprob": -0.089106735975846, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.013127317652106285}, {"id": 289, "seek": 177400, "start": 1778.0, "end": 1782.0, "text": " It doesn't have as good security properties as the NIST curves,", "tokens": [50564, 467, 1177, 380, 362, 382, 665, 3825, 7221, 382, 264, 426, 19756, 19490, 11, 50764], "temperature": 0.0, "avg_logprob": -0.089106735975846, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.013127317652106285}, {"id": 290, "seek": 177400, "start": 1782.0, "end": 1787.0, "text": " so realistically, you're down to only one elliptic curve you can actually use with the TPM.", "tokens": [50764, 370, 40734, 11, 291, 434, 760, 281, 787, 472, 8284, 22439, 299, 7605, 291, 393, 767, 764, 365, 264, 314, 18819, 13, 51014], "temperature": 0.0, "avg_logprob": -0.089106735975846, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.013127317652106285}, {"id": 291, "seek": 177400, "start": 1787.0, "end": 1793.0, "text": " And the algorithms supports only ECDSA and ECDH,", "tokens": [51014, 400, 264, 14642, 9346, 787, 19081, 35, 8886, 293, 19081, 35, 39, 11, 51314], "temperature": 0.0, "avg_logprob": -0.089106735975846, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.013127317652106285}, {"id": 292, "seek": 177400, "start": 1793.0, "end": 1799.0, "text": " and this will be important because if you create a new GPG key, chances are it's told you", "tokens": [51314, 293, 341, 486, 312, 1021, 570, 498, 291, 1884, 257, 777, 26039, 38, 2141, 11, 10486, 366, 309, 311, 1907, 291, 51614], "temperature": 0.0, "avg_logprob": -0.089106735975846, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.013127317652106285}, {"id": 293, "seek": 179900, "start": 1799.0, "end": 1804.0, "text": " to use a Bernstein 25519 curve, which is not part of the TPM,", "tokens": [50364, 281, 764, 257, 10781, 9089, 3552, 20, 3405, 7605, 11, 597, 307, 406, 644, 295, 264, 314, 18819, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1141791961811207, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.5418623685836792}, {"id": 294, "seek": 179900, "start": 1804.0, "end": 1809.0, "text": " and it's actually not on the TCG radar for a very unfortunate reason.", "tokens": [50614, 293, 309, 311, 767, 406, 322, 264, 34150, 38, 16544, 337, 257, 588, 17843, 1778, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1141791961811207, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.5418623685836792}, {"id": 295, "seek": 179900, "start": 1809.0, "end": 1816.0, "text": " The 25519 is an Edwards curve, and Bernstein decided that the Edwards curve would have separate signature", "tokens": [50864, 440, 3552, 20, 3405, 307, 364, 35836, 7605, 11, 293, 10781, 9089, 3047, 300, 264, 35836, 7605, 576, 362, 4994, 13397, 51214], "temperature": 0.0, "avg_logprob": -0.1141791961811207, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.5418623685836792}, {"id": 296, "seek": 179900, "start": 1816.0, "end": 1821.0, "text": " and separate Diffie-Hellman algorithms, and that means that the algorithms themselves,", "tokens": [51214, 293, 4994, 413, 3661, 414, 12, 39, 898, 1601, 14642, 11, 293, 300, 1355, 300, 264, 14642, 2969, 11, 51464], "temperature": 0.0, "avg_logprob": -0.1141791961811207, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.5418623685836792}, {"id": 297, "seek": 179900, "start": 1821.0, "end": 1828.0, "text": " if for all agile cryptography in the TPM, are not present, which is a bit unfortunate.", "tokens": [51464, 498, 337, 439, 30072, 9844, 5820, 294, 264, 314, 18819, 11, 366, 406, 1974, 11, 597, 307, 257, 857, 17843, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1141791961811207, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.5418623685836792}, {"id": 298, "seek": 182800, "start": 1828.0, "end": 1834.0, "text": " So don't wait, don't hold your breath waiting for 25519 to become a TPM standard curve.", "tokens": [50364, 407, 500, 380, 1699, 11, 500, 380, 1797, 428, 6045, 3806, 337, 3552, 20, 3405, 281, 1813, 257, 314, 18819, 3832, 7605, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07695717437594544, "compression_ratio": 1.4875, "no_speech_prob": 0.003131425241008401}, {"id": 299, "seek": 182800, "start": 1834.0, "end": 1836.0, "text": " Chances are it's not going to be.", "tokens": [50664, 761, 2676, 366, 309, 311, 406, 516, 281, 312, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07695717437594544, "compression_ratio": 1.4875, "no_speech_prob": 0.003131425241008401}, {"id": 300, "seek": 182800, "start": 1836.0, "end": 1842.0, "text": " If you want to use the TPM with elliptic curves, you're going to have to embrace the NIST curves.", "tokens": [50764, 759, 291, 528, 281, 764, 264, 314, 18819, 365, 8284, 22439, 299, 19490, 11, 291, 434, 516, 281, 362, 281, 14038, 264, 426, 19756, 19490, 13, 51064], "temperature": 0.0, "avg_logprob": -0.07695717437594544, "compression_ratio": 1.4875, "no_speech_prob": 0.003131425241008401}, {"id": 301, "seek": 182800, "start": 1844.0, "end": 1850.0, "text": " The other problem when I said all this is simple is actually an open SSL complexity.", "tokens": [51164, 440, 661, 1154, 562, 286, 848, 439, 341, 307, 2199, 307, 767, 364, 1269, 12238, 43, 14024, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07695717437594544, "compression_ratio": 1.4875, "no_speech_prob": 0.003131425241008401}, {"id": 302, "seek": 182800, "start": 1850.0, "end": 1855.0, "text": " Open SSL has a special API to load engine key files.", "tokens": [51464, 7238, 12238, 43, 575, 257, 2121, 9362, 281, 3677, 2848, 2141, 7098, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07695717437594544, "compression_ratio": 1.4875, "no_speech_prob": 0.003131425241008401}, {"id": 303, "seek": 185500, "start": 1855.0, "end": 1860.0, "text": " If you don't have this in your program, it won't load engine key files.", "tokens": [50364, 759, 291, 500, 380, 362, 341, 294, 428, 1461, 11, 309, 1582, 380, 3677, 2848, 2141, 7098, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08038096654982795, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.005125000141561031}, {"id": 304, "seek": 185500, "start": 1860.0, "end": 1867.0, "text": " And the problem was that pretty much no consumers of open SSL code, you know, open SSH, open VPN,", "tokens": [50614, 400, 264, 1154, 390, 300, 1238, 709, 572, 11883, 295, 1269, 12238, 43, 3089, 11, 291, 458, 11, 1269, 12238, 39, 11, 1269, 24512, 11, 50964], "temperature": 0.0, "avg_logprob": -0.08038096654982795, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.005125000141561031}, {"id": 305, "seek": 185500, "start": 1867.0, "end": 1872.0, "text": " all of the ones that are based on open SSL had this API sitting in there.", "tokens": [50964, 439, 295, 264, 2306, 300, 366, 2361, 322, 1269, 12238, 43, 632, 341, 9362, 3798, 294, 456, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08038096654982795, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.005125000141561031}, {"id": 306, "seek": 185500, "start": 1872.0, "end": 1878.0, "text": " So I can present a TPM key file all I like to these programs, they won't recognize it,", "tokens": [51214, 407, 286, 393, 1974, 257, 314, 18819, 2141, 3991, 439, 286, 411, 281, 613, 4268, 11, 436, 1582, 380, 5521, 309, 11, 51514], "temperature": 0.0, "avg_logprob": -0.08038096654982795, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.005125000141561031}, {"id": 307, "seek": 185500, "start": 1878.0, "end": 1880.0, "text": " because they're not using the correct load routine.", "tokens": [51514, 570, 436, 434, 406, 1228, 264, 3006, 3677, 9927, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08038096654982795, "compression_ratio": 1.6050420168067228, "no_speech_prob": 0.005125000141561031}, {"id": 308, "seek": 188000, "start": 1881.0, "end": 1888.0, "text": " This annoyingly stupid problem has been fixed in open SSL 3, but it was basically a complete drag on the ecosystem", "tokens": [50414, 639, 11304, 356, 6631, 1154, 575, 668, 6806, 294, 1269, 12238, 43, 805, 11, 457, 309, 390, 1936, 257, 3566, 5286, 322, 264, 11311, 50764], "temperature": 0.0, "avg_logprob": -0.10088471646578807, "compression_ratio": 1.625, "no_speech_prob": 0.04990052431821823}, {"id": 309, "seek": 188000, "start": 1888.0, "end": 1894.0, "text": " for a long time because it's the barrier to TPM enabling is not the fact that I've written the engine,", "tokens": [50764, 337, 257, 938, 565, 570, 309, 311, 264, 13357, 281, 314, 18819, 23148, 307, 406, 264, 1186, 300, 286, 600, 3720, 264, 2848, 11, 51064], "temperature": 0.0, "avg_logprob": -0.10088471646578807, "compression_ratio": 1.625, "no_speech_prob": 0.04990052431821823}, {"id": 310, "seek": 188000, "start": 1894.0, "end": 1899.0, "text": " because that didn't take me very long, it's the fact that pretty much no code out there actually knows how to use", "tokens": [51064, 570, 300, 994, 380, 747, 385, 588, 938, 11, 309, 311, 264, 1186, 300, 1238, 709, 572, 3089, 484, 456, 767, 3255, 577, 281, 764, 51314], "temperature": 0.0, "avg_logprob": -0.10088471646578807, "compression_ratio": 1.625, "no_speech_prob": 0.04990052431821823}, {"id": 311, "seek": 188000, "start": 1899.0, "end": 1903.0, "text": " an engine with a key file because of this API.", "tokens": [51314, 364, 2848, 365, 257, 2141, 3991, 570, 295, 341, 9362, 13, 51514], "temperature": 0.0, "avg_logprob": -0.10088471646578807, "compression_ratio": 1.625, "no_speech_prob": 0.04990052431821823}, {"id": 312, "seek": 188000, "start": 1903.0, "end": 1906.0, "text": " Because the open SSL consumers always forget this.", "tokens": [51514, 1436, 264, 1269, 12238, 43, 11883, 1009, 2870, 341, 13, 51664], "temperature": 0.0, "avg_logprob": -0.10088471646578807, "compression_ratio": 1.625, "no_speech_prob": 0.04990052431821823}, {"id": 313, "seek": 190600, "start": 1906.0, "end": 1912.0, "text": " Open SSL is sort of like an API explosion, which I mean, so the fewer APIs you have to know,", "tokens": [50364, 7238, 12238, 43, 307, 1333, 295, 411, 364, 9362, 15673, 11, 597, 286, 914, 11, 370, 264, 13366, 21445, 291, 362, 281, 458, 11, 50664], "temperature": 0.0, "avg_logprob": -0.12716019595110858, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.014084129594266415}, {"id": 314, "seek": 190600, "start": 1912.0, "end": 1917.0, "text": " the easier you find it program, which is why everybody always forgets the engine APIs.", "tokens": [50664, 264, 3571, 291, 915, 309, 1461, 11, 597, 307, 983, 2201, 1009, 2870, 82, 264, 2848, 21445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12716019595110858, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.014084129594266415}, {"id": 315, "seek": 190600, "start": 1917.0, "end": 1925.0, "text": " But it is only a couple of extra lines in the code, so I have actually successfully enabled it in things like open VPN.", "tokens": [50914, 583, 309, 307, 787, 257, 1916, 295, 2857, 3876, 294, 264, 3089, 11, 370, 286, 362, 767, 10727, 15172, 309, 294, 721, 411, 1269, 24512, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12716019595110858, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.014084129594266415}, {"id": 316, "seek": 190600, "start": 1925.0, "end": 1932.0, "text": " It's actually been using, so what it does is it just, for no good reason, when you go to the open SSL command line,", "tokens": [51314, 467, 311, 767, 668, 1228, 11, 370, 437, 309, 775, 307, 309, 445, 11, 337, 572, 665, 1778, 11, 562, 291, 352, 281, 264, 1269, 12238, 43, 5622, 1622, 11, 51664], "temperature": 0.0, "avg_logprob": -0.12716019595110858, "compression_ratio": 1.6023166023166022, "no_speech_prob": 0.014084129594266415}, {"id": 317, "seek": 193200, "start": 1932.0, "end": 1937.0, "text": " you have to name the key type. You've seen the inform DER, inform PAM.", "tokens": [50364, 291, 362, 281, 1315, 264, 2141, 2010, 13, 509, 600, 1612, 264, 1356, 413, 1598, 11, 1356, 430, 2865, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09244098514318466, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.15194498002529144}, {"id": 318, "seek": 193200, "start": 1937.0, "end": 1940.0, "text": " There's also actually an inform engine for everything else.", "tokens": [50614, 821, 311, 611, 767, 364, 1356, 2848, 337, 1203, 1646, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09244098514318466, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.15194498002529144}, {"id": 319, "seek": 193200, "start": 1940.0, "end": 1943.0, "text": " But nobody in their right mind would program that.", "tokens": [50764, 583, 5079, 294, 641, 558, 1575, 576, 1461, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09244098514318466, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.15194498002529144}, {"id": 320, "seek": 193200, "start": 1943.0, "end": 1948.0, "text": " All you do is you try the DER loader first, then you try the PAM loader, and then you should try the engine loader.", "tokens": [50914, 1057, 291, 360, 307, 291, 853, 264, 413, 1598, 3677, 260, 700, 11, 550, 291, 853, 264, 430, 2865, 3677, 260, 11, 293, 550, 291, 820, 853, 264, 2848, 3677, 260, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09244098514318466, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.15194498002529144}, {"id": 321, "seek": 193200, "start": 1948.0, "end": 1953.0, "text": " But everybody forgets to try the engine loader after the DER and the PAM loader.", "tokens": [51164, 583, 2201, 2870, 82, 281, 853, 264, 2848, 3677, 260, 934, 264, 413, 1598, 293, 264, 430, 2865, 3677, 260, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09244098514318466, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.15194498002529144}, {"id": 322, "seek": 193200, "start": 1953.0, "end": 1958.0, "text": " So I put the code into open VPN, and it's been in there since 2.5.", "tokens": [51414, 407, 286, 829, 264, 3089, 666, 1269, 24512, 11, 293, 309, 311, 668, 294, 456, 1670, 568, 13, 20, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09244098514318466, "compression_ratio": 1.7248062015503876, "no_speech_prob": 0.15194498002529144}, {"id": 323, "seek": 195800, "start": 1958.0, "end": 1964.0, "text": " Unfortunately, we had a dispute over the licensing, so it got removed again in 2.67.", "tokens": [50364, 8590, 11, 321, 632, 257, 25379, 670, 264, 29759, 11, 370, 309, 658, 7261, 797, 294, 568, 13, 22452, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06513108096076446, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.15915393829345703}, {"id": 324, "seek": 195800, "start": 1964.0, "end": 1971.0, "text": " This was over a statement about Apache and open SSL being compatible at the binary level.", "tokens": [50664, 639, 390, 670, 257, 5629, 466, 46597, 293, 1269, 12238, 43, 885, 18218, 412, 264, 17434, 1496, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06513108096076446, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.15915393829345703}, {"id": 325, "seek": 195800, "start": 1971.0, "end": 1977.0, "text": " You don't need to go into it, but these things happen even to the best intentioned people, unfortunately.", "tokens": [51014, 509, 500, 380, 643, 281, 352, 666, 309, 11, 457, 613, 721, 1051, 754, 281, 264, 1151, 7789, 292, 561, 11, 7015, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06513108096076446, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.15915393829345703}, {"id": 326, "seek": 195800, "start": 1977.0, "end": 1984.0, "text": " The good news is that if you compile open VPN with open SSL 3, it just works, because all of this is fixed in open SSL 3.", "tokens": [51314, 440, 665, 2583, 307, 300, 498, 291, 31413, 1269, 24512, 365, 1269, 12238, 43, 805, 11, 309, 445, 1985, 11, 570, 439, 295, 341, 307, 6806, 294, 1269, 12238, 43, 805, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06513108096076446, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.15915393829345703}, {"id": 327, "seek": 198400, "start": 1984.0, "end": 1997.0, "text": " So hopefully, open SSL 3 will also rescue me from trying to enable engine loading in all of the other open SSL consumer programs that I want to use this with.", "tokens": [50364, 407, 4696, 11, 1269, 12238, 43, 805, 486, 611, 13283, 385, 490, 1382, 281, 9528, 2848, 15114, 294, 439, 295, 264, 661, 1269, 12238, 43, 9711, 4268, 300, 286, 528, 281, 764, 341, 365, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06631043222215441, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.13031233847141266}, {"id": 328, "seek": 198400, "start": 1997.0, "end": 2002.0, "text": " Open SSH was converted to use engine keys. I have a patch for it.", "tokens": [51014, 7238, 12238, 39, 390, 16424, 281, 764, 2848, 9317, 13, 286, 362, 257, 9972, 337, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06631043222215441, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.13031233847141266}, {"id": 329, "seek": 198400, "start": 2002.0, "end": 2012.0, "text": " But because Libre SSL does not use engines, the open SSH people seem to be philosophically opposed to anything to do with engine keys.", "tokens": [51264, 583, 570, 15834, 265, 12238, 43, 775, 406, 764, 12982, 11, 264, 1269, 12238, 39, 561, 1643, 281, 312, 14529, 984, 8851, 281, 1340, 281, 360, 365, 2848, 9317, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06631043222215441, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.13031233847141266}, {"id": 330, "seek": 201200, "start": 2012.0, "end": 2021.0, "text": " And there's another wrinkle for open SSH. The problem is the way open SSH feeds keys into the agent is actually done by the primes.", "tokens": [50364, 400, 456, 311, 1071, 928, 14095, 337, 1269, 12238, 39, 13, 440, 1154, 307, 264, 636, 1269, 12238, 39, 23712, 9317, 666, 264, 9461, 307, 767, 1096, 538, 264, 582, 1532, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06197250973094593, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.2330220341682434}, {"id": 331, "seek": 201200, "start": 2021.0, "end": 2028.0, "text": " And as you know, for a TPM key, it won't release the primes to you. You can only use the engine key through the TPM.", "tokens": [50814, 400, 382, 291, 458, 11, 337, 257, 314, 18819, 2141, 11, 309, 1582, 380, 4374, 264, 582, 1532, 281, 291, 13, 509, 393, 787, 764, 264, 2848, 2141, 807, 264, 314, 18819, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06197250973094593, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.2330220341682434}, {"id": 332, "seek": 201200, "start": 2028.0, "end": 2031.0, "text": " You can't see what the source prime numbers are.", "tokens": [51164, 509, 393, 380, 536, 437, 264, 4009, 5835, 3547, 366, 13, 51314], "temperature": 0.0, "avg_logprob": -0.06197250973094593, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.2330220341682434}, {"id": 333, "seek": 201200, "start": 2031.0, "end": 2038.0, "text": " So the way that the SSH communicates with its agent is actually incompatible with the way engine keys work.", "tokens": [51314, 407, 264, 636, 300, 264, 12238, 39, 3363, 1024, 365, 1080, 9461, 307, 767, 40393, 267, 964, 365, 264, 636, 2848, 9317, 589, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06197250973094593, "compression_ratio": 1.7161016949152543, "no_speech_prob": 0.2330220341682434}, {"id": 334, "seek": 203800, "start": 2038.0, "end": 2046.0, "text": " Compatibility is easy. Making it compatible is easy. There's just an engine extension to open SSH which says, I'm not going to use primes.", "tokens": [50364, 6620, 267, 2841, 307, 1858, 13, 14595, 309, 18218, 307, 1858, 13, 821, 311, 445, 364, 2848, 10320, 281, 1269, 12238, 39, 597, 1619, 11, 286, 478, 406, 516, 281, 764, 582, 1532, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09044745541358179, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.05876082554459572}, {"id": 335, "seek": 203800, "start": 2046.0, "end": 2051.0, "text": " I'm just going to tell you where the key file is located. Agent, pick up the key file, don't use the primes.", "tokens": [50764, 286, 478, 445, 516, 281, 980, 291, 689, 264, 2141, 3991, 307, 6870, 13, 27174, 11, 1888, 493, 264, 2141, 3991, 11, 500, 380, 764, 264, 582, 1532, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09044745541358179, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.05876082554459572}, {"id": 336, "seek": 203800, "start": 2051.0, "end": 2055.0, "text": " Which was, I mean, it was about a 20 line patch. It's fairly easy.", "tokens": [51014, 3013, 390, 11, 286, 914, 11, 309, 390, 466, 257, 945, 1622, 9972, 13, 467, 311, 6457, 1858, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09044745541358179, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.05876082554459572}, {"id": 337, "seek": 203800, "start": 2055.0, "end": 2059.0, "text": " But like I said, open SSH philosophically opposed to this.", "tokens": [51214, 583, 411, 286, 848, 11, 1269, 12238, 39, 14529, 984, 8851, 281, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09044745541358179, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.05876082554459572}, {"id": 338, "seek": 203800, "start": 2059.0, "end": 2064.0, "text": " So I still have to patch open SSH to get all of my open SSH keys to work.", "tokens": [51414, 407, 286, 920, 362, 281, 9972, 1269, 12238, 39, 281, 483, 439, 295, 452, 1269, 12238, 39, 9317, 281, 589, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09044745541358179, "compression_ratio": 1.6867924528301887, "no_speech_prob": 0.05876082554459572}, {"id": 339, "seek": 206400, "start": 2065.0, "end": 2075.0, "text": " For open SSL 3, this problem is mostly fixed because the file provider now understands how to load keys from any other provider.", "tokens": [50414, 1171, 1269, 12238, 43, 805, 11, 341, 1154, 307, 5240, 6806, 570, 264, 3991, 12398, 586, 15146, 577, 281, 3677, 9317, 490, 604, 661, 12398, 13, 50914], "temperature": 0.0, "avg_logprob": -0.07151929778282089, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.020009983330965042}, {"id": 340, "seek": 206400, "start": 2075.0, "end": 2079.0, "text": " It will actually query all the providers and say, do you recognize this key?", "tokens": [50914, 467, 486, 767, 14581, 439, 264, 11330, 293, 584, 11, 360, 291, 5521, 341, 2141, 30, 51114], "temperature": 0.0, "avg_logprob": -0.07151929778282089, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.020009983330965042}, {"id": 341, "seek": 206400, "start": 2079.0, "end": 2083.0, "text": " And if one of them says yes, it will load the key successfully, which is really useful.", "tokens": [51114, 400, 498, 472, 295, 552, 1619, 2086, 11, 309, 486, 3677, 264, 2141, 10727, 11, 597, 307, 534, 4420, 13, 51314], "temperature": 0.0, "avg_logprob": -0.07151929778282089, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.020009983330965042}, {"id": 342, "seek": 206400, "start": 2083.0, "end": 2089.0, "text": " It gets me out of all the engine stuff. Doesn't solve the open SSH problem because it's trying to pass in prime.", "tokens": [51314, 467, 2170, 385, 484, 295, 439, 264, 2848, 1507, 13, 12955, 380, 5039, 264, 1269, 12238, 39, 1154, 570, 309, 311, 1382, 281, 1320, 294, 5835, 13, 51614], "temperature": 0.0, "avg_logprob": -0.07151929778282089, "compression_ratio": 1.6111111111111112, "no_speech_prob": 0.020009983330965042}, {"id": 343, "seek": 208900, "start": 2089.0, "end": 2095.0, "text": " So in an unpatched open SSH, you will still get an error because it can't extract primes from the key.", "tokens": [50364, 407, 294, 364, 20994, 24102, 1269, 12238, 39, 11, 291, 486, 920, 483, 364, 6713, 570, 309, 393, 380, 8947, 582, 1532, 490, 264, 2141, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13431672082431073, "compression_ratio": 1.3703703703703705, "no_speech_prob": 0.10308542847633362}, {"id": 344, "seek": 208900, "start": 2095.0, "end": 2097.0, "text": " Unfortunately.", "tokens": [50664, 8590, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13431672082431073, "compression_ratio": 1.3703703703703705, "no_speech_prob": 0.10308542847633362}, {"id": 345, "seek": 208900, "start": 2098.0, "end": 2103.0, "text": " So you don't need separate key loading routines. Everything should just work. This is brilliant.", "tokens": [50814, 407, 291, 500, 380, 643, 4994, 2141, 15114, 33827, 13, 5471, 820, 445, 589, 13, 639, 307, 10248, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13431672082431073, "compression_ratio": 1.3703703703703705, "no_speech_prob": 0.10308542847633362}, {"id": 346, "seek": 208900, "start": 2107.0, "end": 2110.0, "text": " The one real success story I have is GNU PG.", "tokens": [51264, 440, 472, 957, 2245, 1657, 286, 362, 307, 46411, 52, 40975, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13431672082431073, "compression_ratio": 1.3703703703703705, "no_speech_prob": 0.10308542847633362}, {"id": 347, "seek": 211000, "start": 2110.0, "end": 2119.0, "text": " So it actually, way, way back in 2018, I had a conversation at FOSDAM with Werner Almsberger, who does GPG.", "tokens": [50364, 407, 309, 767, 11, 636, 11, 636, 646, 294, 6096, 11, 286, 632, 257, 3761, 412, 479, 4367, 35, 2865, 365, 14255, 1193, 967, 2592, 42226, 11, 567, 775, 26039, 38, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15081388760456996, "compression_ratio": 1.5271317829457365, "no_speech_prob": 0.5254258513450623}, {"id": 348, "seek": 211000, "start": 2119.0, "end": 2126.0, "text": " And we agreed that we, I would code the GPG to use TPM keys and he would take the code.", "tokens": [50814, 400, 321, 9166, 300, 321, 11, 286, 576, 3089, 264, 26039, 38, 281, 764, 314, 18819, 9317, 293, 415, 576, 747, 264, 3089, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15081388760456996, "compression_ratio": 1.5271317829457365, "no_speech_prob": 0.5254258513450623}, {"id": 349, "seek": 211000, "start": 2126.0, "end": 2131.0, "text": " And it was, again, it was another problem because GPG doesn't use any known crypto system.", "tokens": [51164, 400, 309, 390, 11, 797, 11, 309, 390, 1071, 1154, 570, 26039, 38, 1177, 380, 764, 604, 2570, 17240, 1185, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15081388760456996, "compression_ratio": 1.5271317829457365, "no_speech_prob": 0.5254258513450623}, {"id": 350, "seek": 211000, "start": 2131.0, "end": 2137.0, "text": " It uses G-crypt, which is a very unusual cryptography library that I also wouldn't want to wish on anybody.", "tokens": [51414, 467, 4960, 460, 12, 46555, 662, 11, 597, 307, 257, 588, 10901, 9844, 5820, 6405, 300, 286, 611, 2759, 380, 528, 281, 3172, 322, 4472, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15081388760456996, "compression_ratio": 1.5271317829457365, "no_speech_prob": 0.5254258513450623}, {"id": 351, "seek": 213700, "start": 2137.0, "end": 2144.0, "text": " But I was keen to get GPG supporting TPM keys because I use it on my laptop as well.", "tokens": [50364, 583, 286, 390, 20297, 281, 483, 26039, 38, 7231, 314, 18819, 9317, 570, 286, 764, 309, 322, 452, 10732, 382, 731, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1215887944632714, "compression_ratio": 1.50199203187251, "no_speech_prob": 0.05484095215797424}, {"id": 352, "seek": 213700, "start": 2144.0, "end": 2150.0, "text": " So since version 2.3, it has supported them and version 2.3 is pretty old. It's a few revisions back.", "tokens": [50714, 407, 1670, 3037, 568, 13, 18, 11, 309, 575, 8104, 552, 293, 3037, 568, 13, 18, 307, 1238, 1331, 13, 467, 311, 257, 1326, 3698, 4252, 646, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1215887944632714, "compression_ratio": 1.50199203187251, "no_speech_prob": 0.05484095215797424}, {"id": 353, "seek": 213700, "start": 2150.0, "end": 2155.0, "text": " The main problem is that very few, even the bleeding edge distributions have this.", "tokens": [51014, 440, 2135, 1154, 307, 300, 588, 1326, 11, 754, 264, 19312, 4691, 37870, 362, 341, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1215887944632714, "compression_ratio": 1.50199203187251, "no_speech_prob": 0.05484095215797424}, {"id": 354, "seek": 213700, "start": 2155.0, "end": 2158.0, "text": " Debbie and, Debbie in testing is still on 2240.", "tokens": [51264, 35834, 293, 11, 35834, 294, 4997, 307, 920, 322, 5853, 5254, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1215887944632714, "compression_ratio": 1.50199203187251, "no_speech_prob": 0.05484095215797424}, {"id": 355, "seek": 213700, "start": 2158.0, "end": 2164.0, "text": " I think Fedora is just about moving to open SSH to GPG 2.4.", "tokens": [51414, 286, 519, 7772, 3252, 307, 445, 466, 2684, 281, 1269, 12238, 39, 281, 26039, 38, 568, 13, 19, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1215887944632714, "compression_ratio": 1.50199203187251, "no_speech_prob": 0.05484095215797424}, {"id": 356, "seek": 216400, "start": 2164.0, "end": 2173.0, "text": " Fortunately, OpenSUSA, which is the distribution I'm currently running, has been using GPG 2.3 and then 2.4 for the past few years.", "tokens": [50364, 20652, 11, 7238, 50, 3447, 32, 11, 597, 307, 264, 7316, 286, 478, 4362, 2614, 11, 575, 668, 1228, 26039, 38, 568, 13, 18, 293, 550, 568, 13, 19, 337, 264, 1791, 1326, 924, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10568395944742057, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.06565733999013901}, {"id": 357, "seek": 216400, "start": 2173.0, "end": 2178.0, "text": " So that's why I don't have the problem that you would have if you tried to use this.", "tokens": [50814, 407, 300, 311, 983, 286, 500, 380, 362, 264, 1154, 300, 291, 576, 362, 498, 291, 3031, 281, 764, 341, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10568395944742057, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.06565733999013901}, {"id": 358, "seek": 216400, "start": 2178.0, "end": 2185.0, "text": " And key conversion is very easy. You just do GPG edit key, my key. You switch to the private key.", "tokens": [51064, 400, 2141, 14298, 307, 588, 1858, 13, 509, 445, 360, 26039, 38, 8129, 2141, 11, 452, 2141, 13, 509, 3679, 281, 264, 4551, 2141, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10568395944742057, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.06565733999013901}, {"id": 359, "seek": 216400, "start": 2185.0, "end": 2188.0, "text": " You select the private key and you type key to TPM.", "tokens": [51414, 509, 3048, 264, 4551, 2141, 293, 291, 2010, 2141, 281, 314, 18819, 13, 51564], "temperature": 0.0, "avg_logprob": -0.10568395944742057, "compression_ratio": 1.5443037974683544, "no_speech_prob": 0.06565733999013901}, {"id": 360, "seek": 218800, "start": 2189.0, "end": 2192.0, "text": " Remember, this command is irreversible.", "tokens": [50414, 5459, 11, 341, 5622, 307, 16014, 840, 964, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11045812677454066, "compression_ratio": 1.5461847389558232, "no_speech_prob": 0.6294835209846497}, {"id": 361, "seek": 218800, "start": 2192.0, "end": 2200.0, "text": " Once, and it's not like the standard GPG thing is when you exit, it will ask you, do you really want to do this?", "tokens": [50564, 3443, 11, 293, 309, 311, 406, 411, 264, 3832, 26039, 38, 551, 307, 562, 291, 11043, 11, 309, 486, 1029, 291, 11, 360, 291, 534, 528, 281, 360, 341, 30, 50964], "temperature": 0.0, "avg_logprob": -0.11045812677454066, "compression_ratio": 1.5461847389558232, "no_speech_prob": 0.6294835209846497}, {"id": 362, "seek": 218800, "start": 2200.0, "end": 2204.0, "text": " Each TPM is instantaneous. It will do it immediately.", "tokens": [50964, 6947, 314, 18819, 307, 45596, 13, 467, 486, 360, 309, 4258, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11045812677454066, "compression_ratio": 1.5461847389558232, "no_speech_prob": 0.6294835209846497}, {"id": 363, "seek": 218800, "start": 2204.0, "end": 2209.0, "text": " So if you don't have a backup of your GPG keys, you've lost them because it will delete the old key file.", "tokens": [51164, 407, 498, 291, 500, 380, 362, 257, 14807, 295, 428, 26039, 38, 9317, 11, 291, 600, 2731, 552, 570, 309, 486, 12097, 264, 1331, 2141, 3991, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11045812677454066, "compression_ratio": 1.5461847389558232, "no_speech_prob": 0.6294835209846497}, {"id": 364, "seek": 218800, "start": 2209.0, "end": 2214.0, "text": " So just be aware of that. But other than that, it's all fairly seamless.", "tokens": [51414, 407, 445, 312, 3650, 295, 300, 13, 583, 661, 813, 300, 11, 309, 311, 439, 6457, 28677, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11045812677454066, "compression_ratio": 1.5461847389558232, "no_speech_prob": 0.6294835209846497}, {"id": 365, "seek": 221400, "start": 2214.0, "end": 2223.0, "text": " And other TPM supporting utilities are things like GNU TLS actually got it from OpenConnect, OpenConnect's for Cisco VPNs,", "tokens": [50364, 400, 661, 314, 18819, 7231, 30482, 366, 721, 411, 46411, 52, 314, 19198, 767, 658, 309, 490, 7238, 9838, 1569, 11, 7238, 9838, 1569, 311, 337, 38528, 24512, 82, 11, 50814], "temperature": 0.0, "avg_logprob": -0.15042308769603768, "compression_ratio": 1.5477178423236515, "no_speech_prob": 0.12256273627281189}, {"id": 366, "seek": 221400, "start": 2223.0, "end": 2229.0, "text": " SB sign tools is for secure boot, EFI tools is another secure boot thing.", "tokens": [50814, 26944, 1465, 3873, 307, 337, 7144, 11450, 11, 462, 38568, 3873, 307, 1071, 7144, 11450, 551, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15042308769603768, "compression_ratio": 1.5477178423236515, "no_speech_prob": 0.12256273627281189}, {"id": 367, "seek": 221400, "start": 2229.0, "end": 2243.0, "text": " Oh, PKCS11 export is the way I'm hoping finally to get OpenSSH to do this because there's a guy from Red Hat called Jacob Yellen who's actually doing PKCS11 support in OpenSSH.", "tokens": [51114, 876, 11, 49475, 26283, 5348, 10725, 307, 264, 636, 286, 478, 7159, 2721, 281, 483, 7238, 21929, 39, 281, 360, 341, 570, 456, 311, 257, 2146, 490, 4477, 15867, 1219, 14117, 835, 19191, 567, 311, 767, 884, 49475, 26283, 5348, 1406, 294, 7238, 21929, 39, 13, 51814], "temperature": 0.0, "avg_logprob": -0.15042308769603768, "compression_ratio": 1.5477178423236515, "no_speech_prob": 0.12256273627281189}, {"id": 368, "seek": 224300, "start": 2243.0, "end": 2253.0, "text": " And so the PKCS11 export is actually just a program that takes an OpenSSH key and exports it as a PKCS11 key,", "tokens": [50364, 400, 370, 264, 49475, 26283, 5348, 10725, 307, 767, 445, 257, 1461, 300, 2516, 364, 7238, 21929, 39, 2141, 293, 31428, 309, 382, 257, 49475, 26283, 5348, 2141, 11, 50864], "temperature": 0.0, "avg_logprob": -0.04585950573285421, "compression_ratio": 1.4939024390243902, "no_speech_prob": 0.03135504946112633}, {"id": 369, "seek": 224300, "start": 2253.0, "end": 2257.0, "text": " but it knows how to do it with any engine key or any provider key.", "tokens": [50864, 457, 309, 3255, 577, 281, 360, 309, 365, 604, 2848, 2141, 420, 604, 12398, 2141, 13, 51064], "temperature": 0.0, "avg_logprob": -0.04585950573285421, "compression_ratio": 1.4939024390243902, "no_speech_prob": 0.03135504946112633}, {"id": 370, "seek": 224300, "start": 2257.0, "end": 2265.0, "text": " So I can use this to actually export my OpenSSL keys as PKCS11 keys.", "tokens": [51064, 407, 286, 393, 764, 341, 281, 767, 10725, 452, 7238, 21929, 43, 9317, 382, 49475, 26283, 5348, 9317, 13, 51464], "temperature": 0.0, "avg_logprob": -0.04585950573285421, "compression_ratio": 1.4939024390243902, "no_speech_prob": 0.03135504946112633}, {"id": 371, "seek": 226500, "start": 2265.0, "end": 2274.0, "text": " It's also useful if you have Firefox because Firefox resolutely refuses to understand the basic OpenSSL key format.", "tokens": [50364, 467, 311, 611, 4420, 498, 291, 362, 46613, 570, 46613, 725, 2553, 33222, 281, 1223, 264, 3875, 7238, 21929, 43, 2141, 7877, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06314914520472696, "compression_ratio": 1.5515463917525774, "no_speech_prob": 0.7008024454116821}, {"id": 372, "seek": 226500, "start": 2274.0, "end": 2281.0, "text": " It insists you have to use the Netscape system key format, which nobody uses, but it also understands PKCS11.", "tokens": [50814, 467, 50137, 291, 362, 281, 764, 264, 426, 1385, 4747, 1185, 2141, 7877, 11, 597, 5079, 4960, 11, 457, 309, 611, 15146, 49475, 26283, 5348, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06314914520472696, "compression_ratio": 1.5515463917525774, "no_speech_prob": 0.7008024454116821}, {"id": 373, "seek": 226500, "start": 2281.0, "end": 2288.0, "text": " So this is the way I also use client certificate keys with Firefox as well.", "tokens": [51164, 407, 341, 307, 264, 636, 286, 611, 764, 6423, 15953, 9317, 365, 46613, 382, 731, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06314914520472696, "compression_ratio": 1.5515463917525774, "no_speech_prob": 0.7008024454116821}, {"id": 374, "seek": 228800, "start": 2288.0, "end": 2298.0, "text": " TPM key policies. So since TPM 2.0, it's actually supported a rich policy language based on things like PCR values,", "tokens": [50364, 314, 18819, 2141, 7657, 13, 407, 1670, 314, 18819, 568, 13, 15, 11, 309, 311, 767, 8104, 257, 4593, 3897, 2856, 2361, 322, 721, 411, 44022, 4190, 11, 50864], "temperature": 0.0, "avg_logprob": -0.15039598205943167, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.2276071310043335}, {"id": 375, "seek": 228800, "start": 2298.0, "end": 2308.0, "text": " which are measured boot parameters, what have you, object secrets, it includes ands and aurs, which means you can build elaborate policy chains.", "tokens": [50864, 597, 366, 12690, 11450, 9834, 11, 437, 362, 291, 11, 2657, 14093, 11, 309, 5974, 293, 82, 293, 257, 2156, 11, 597, 1355, 291, 393, 1322, 20945, 3897, 12626, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15039598205943167, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.2276071310043335}, {"id": 376, "seek": 228800, "start": 2308.0, "end": 2311.0, "text": " So with TPM 1.2, the policy was a single statement.", "tokens": [51364, 407, 365, 314, 18819, 502, 13, 17, 11, 264, 3897, 390, 257, 2167, 5629, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15039598205943167, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.2276071310043335}, {"id": 377, "seek": 231100, "start": 2311.0, "end": 2320.0, "text": " With TPM 2.0, the policy can be a chain of statements, and that can be this and this and this or this and this and this and this or this and so on and so forth.", "tokens": [50364, 2022, 314, 18819, 568, 13, 15, 11, 264, 3897, 393, 312, 257, 5021, 295, 12363, 11, 293, 300, 393, 312, 341, 293, 341, 293, 341, 420, 341, 293, 341, 293, 341, 293, 341, 420, 341, 293, 370, 322, 293, 370, 5220, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07293952012262425, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.3858513832092285}, {"id": 378, "seek": 231100, "start": 2320.0, "end": 2324.0, "text": " So you can build a very, very rich policy around how this key should be used.", "tokens": [50814, 407, 291, 393, 1322, 257, 588, 11, 588, 4593, 3897, 926, 577, 341, 2141, 820, 312, 1143, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07293952012262425, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.3858513832092285}, {"id": 379, "seek": 231100, "start": 2324.0, "end": 2329.0, "text": " I wouldn't advise you to because it's sort of difficult to use, but you can do it.", "tokens": [51014, 286, 2759, 380, 18312, 291, 281, 570, 309, 311, 1333, 295, 2252, 281, 764, 11, 457, 291, 393, 360, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07293952012262425, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.3858513832092285}, {"id": 380, "seek": 231100, "start": 2329.0, "end": 2333.0, "text": " And policy is described to the key by a single hash value.", "tokens": [51264, 400, 3897, 307, 7619, 281, 264, 2141, 538, 257, 2167, 22019, 2158, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07293952012262425, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.3858513832092285}, {"id": 381, "seek": 231100, "start": 2333.0, "end": 2337.0, "text": " So the way you construct policy is you use a session register.", "tokens": [51464, 407, 264, 636, 291, 7690, 3897, 307, 291, 764, 257, 5481, 7280, 13, 51664], "temperature": 0.0, "avg_logprob": -0.07293952012262425, "compression_ratio": 1.7935222672064777, "no_speech_prob": 0.3858513832092285}, {"id": 382, "seek": 233700, "start": 2337.0, "end": 2347.0, "text": " You have to execute all the policy statements in sequence, and if you've done it correctly, the hash value in that register matches the one in the key file and everything just works.", "tokens": [50364, 509, 362, 281, 14483, 439, 264, 3897, 12363, 294, 8310, 11, 293, 498, 291, 600, 1096, 309, 8944, 11, 264, 22019, 2158, 294, 300, 7280, 10676, 264, 472, 294, 264, 2141, 3991, 293, 1203, 445, 1985, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06886015832424164, "compression_ratio": 1.960431654676259, "no_speech_prob": 0.11734528839588165}, {"id": 383, "seek": 233700, "start": 2347.0, "end": 2353.0, "text": " The problem is that if you look at a key file, the policy is just a single hash.", "tokens": [50864, 440, 1154, 307, 300, 498, 291, 574, 412, 257, 2141, 3991, 11, 264, 3897, 307, 445, 257, 2167, 22019, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06886015832424164, "compression_ratio": 1.960431654676259, "no_speech_prob": 0.11734528839588165}, {"id": 384, "seek": 233700, "start": 2353.0, "end": 2357.0, "text": " You can't go from the hash to the statements that were used to create the policy.", "tokens": [51164, 509, 393, 380, 352, 490, 264, 22019, 281, 264, 12363, 300, 645, 1143, 281, 1884, 264, 3897, 13, 51364], "temperature": 0.0, "avg_logprob": -0.06886015832424164, "compression_ratio": 1.960431654676259, "no_speech_prob": 0.11734528839588165}, {"id": 385, "seek": 233700, "start": 2357.0, "end": 2366.0, "text": " So one of the things you have to do, one of the things the key file format does for you, is it actually stores all of the policy statements in a way that actually allow you to reconstruct the policy.", "tokens": [51364, 407, 472, 295, 264, 721, 291, 362, 281, 360, 11, 472, 295, 264, 721, 264, 2141, 3991, 7877, 775, 337, 291, 11, 307, 309, 767, 9512, 439, 295, 264, 3897, 12363, 294, 257, 636, 300, 767, 2089, 291, 281, 31499, 264, 3897, 13, 51814], "temperature": 0.0, "avg_logprob": -0.06886015832424164, "compression_ratio": 1.960431654676259, "no_speech_prob": 0.11734528839588165}, {"id": 386, "seek": 236600, "start": 2367.0, "end": 2372.0, "text": " So as long as you're using the standard key file format, the policy will always follow your keys.", "tokens": [50414, 407, 382, 938, 382, 291, 434, 1228, 264, 3832, 2141, 3991, 7877, 11, 264, 3897, 486, 1009, 1524, 428, 9317, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07164665104187641, "compression_ratio": 1.6437246963562753, "no_speech_prob": 0.0883033499121666}, {"id": 387, "seek": 236600, "start": 2372.0, "end": 2384.0, "text": " And the reason you need to do this is because if you forget which policy goes with which key, you suddenly get a combinatoric explosion of trying to figure out all the policies sort of I have lying around.", "tokens": [50664, 400, 264, 1778, 291, 643, 281, 360, 341, 307, 570, 498, 291, 2870, 597, 3897, 1709, 365, 597, 2141, 11, 291, 5800, 483, 257, 2512, 31927, 299, 15673, 295, 1382, 281, 2573, 484, 439, 264, 7657, 1333, 295, 286, 362, 8493, 926, 13, 51264], "temperature": 0.0, "avg_logprob": -0.07164665104187641, "compression_ratio": 1.6437246963562753, "no_speech_prob": 0.0883033499121666}, {"id": 388, "seek": 236600, "start": 2384.0, "end": 2389.0, "text": " Do they match this hash? How long is it actually going to take me to get up to this hash and match it?", "tokens": [51264, 1144, 436, 2995, 341, 22019, 30, 1012, 938, 307, 309, 767, 516, 281, 747, 385, 281, 483, 493, 281, 341, 22019, 293, 2995, 309, 30, 51514], "temperature": 0.0, "avg_logprob": -0.07164665104187641, "compression_ratio": 1.6437246963562753, "no_speech_prob": 0.0883033499121666}, {"id": 389, "seek": 238900, "start": 2390.0, "end": 2394.0, "text": " Yeah, I have to know how to execute the statements.", "tokens": [50414, 865, 11, 286, 362, 281, 458, 577, 281, 14483, 264, 12363, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09506775508417148, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.1419399082660675}, {"id": 390, "seek": 238900, "start": 2394.0, "end": 2400.0, "text": " And like I said, standardizing the file format meant that we could standardize the way the policy is presented.", "tokens": [50614, 400, 411, 286, 848, 11, 3832, 3319, 264, 3991, 7877, 4140, 300, 321, 727, 3832, 1125, 264, 636, 264, 3897, 307, 8212, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09506775508417148, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.1419399082660675}, {"id": 391, "seek": 238900, "start": 2400.0, "end": 2404.0, "text": " So all you have to know how to do now is to construct the policy.", "tokens": [50914, 407, 439, 291, 362, 281, 458, 577, 281, 360, 586, 307, 281, 7690, 264, 3897, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09506775508417148, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.1419399082660675}, {"id": 392, "seek": 238900, "start": 2404.0, "end": 2408.0, "text": " You don't need to know the mechanics of how it's done on the back end. We'll just do it for you.", "tokens": [51114, 509, 500, 380, 643, 281, 458, 264, 12939, 295, 577, 309, 311, 1096, 322, 264, 646, 917, 13, 492, 603, 445, 360, 309, 337, 291, 13, 51314], "temperature": 0.0, "avg_logprob": -0.09506775508417148, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.1419399082660675}, {"id": 393, "seek": 238900, "start": 2410.0, "end": 2415.0, "text": " One of the useful things about policy is that as you saw, policy was a hash.", "tokens": [51414, 1485, 295, 264, 4420, 721, 466, 3897, 307, 300, 382, 291, 1866, 11, 3897, 390, 257, 22019, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09506775508417148, "compression_ratio": 1.6932773109243697, "no_speech_prob": 0.1419399082660675}, {"id": 394, "seek": 241500, "start": 2415.0, "end": 2419.0, "text": " If that hash is tied to the key, it can't be changed once the key is created.", "tokens": [50364, 759, 300, 22019, 307, 9601, 281, 264, 2141, 11, 309, 393, 380, 312, 3105, 1564, 264, 2141, 307, 2942, 13, 50564], "temperature": 0.0, "avg_logprob": -0.11215871810913086, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.20597781240940094}, {"id": 395, "seek": 241500, "start": 2419.0, "end": 2424.0, "text": " But the TPM has quite a few mechanisms that allow you to add policy after the fact.", "tokens": [50564, 583, 264, 314, 18819, 575, 1596, 257, 1326, 15902, 300, 2089, 291, 281, 909, 3897, 934, 264, 1186, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11215871810913086, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.20597781240940094}, {"id": 396, "seek": 241500, "start": 2424.0, "end": 2428.0, "text": " And the most standard mechanism for doing this is something called policy signing.", "tokens": [50814, 400, 264, 881, 3832, 7513, 337, 884, 341, 307, 746, 1219, 3897, 13393, 13, 51014], "temperature": 0.0, "avg_logprob": -0.11215871810913086, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.20597781240940094}, {"id": 397, "seek": 241500, "start": 2428.0, "end": 2439.0, "text": " So the usual way that the TPM works is that and policy is constructed just by a hash extension, which is the same way TPM's work, TPM PCR's work.", "tokens": [51014, 407, 264, 7713, 636, 300, 264, 314, 18819, 1985, 307, 300, 293, 3897, 307, 17083, 445, 538, 257, 22019, 10320, 11, 597, 307, 264, 912, 636, 314, 18819, 311, 589, 11, 314, 18819, 44022, 311, 589, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11215871810913086, "compression_ratio": 1.6455696202531647, "no_speech_prob": 0.20597781240940094}, {"id": 398, "seek": 243900, "start": 2439.0, "end": 2448.0, "text": " So you put a hash in there, you put it side by side with the original value that was in the register, you hash it again, that becomes the new value, and you keep building up like this.", "tokens": [50364, 407, 291, 829, 257, 22019, 294, 456, 11, 291, 829, 309, 1252, 538, 1252, 365, 264, 3380, 2158, 300, 390, 294, 264, 7280, 11, 291, 22019, 309, 797, 11, 300, 3643, 264, 777, 2158, 11, 293, 291, 1066, 2390, 493, 411, 341, 13, 50814], "temperature": 0.0, "avg_logprob": -0.07992487614697749, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.25301453471183777}, {"id": 399, "seek": 243900, "start": 2448.0, "end": 2457.0, "text": " If the TPM sees a signed policy statement, it will actually throw that hash value away and start using the one from the signed policy,", "tokens": [50814, 759, 264, 314, 18819, 8194, 257, 8175, 3897, 5629, 11, 309, 486, 767, 3507, 300, 22019, 2158, 1314, 293, 722, 1228, 264, 472, 490, 264, 8175, 3897, 11, 51264], "temperature": 0.0, "avg_logprob": -0.07992487614697749, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.25301453471183777}, {"id": 400, "seek": 243900, "start": 2457.0, "end": 2466.0, "text": " which effectively means you can use policy signing to replace any policy on the key, which is interesting and useful.", "tokens": [51264, 597, 8659, 1355, 291, 393, 764, 3897, 13393, 281, 7406, 604, 3897, 322, 264, 2141, 11, 597, 307, 1880, 293, 4420, 13, 51714], "temperature": 0.0, "avg_logprob": -0.07992487614697749, "compression_ratio": 1.7550200803212852, "no_speech_prob": 0.25301453471183777}, {"id": 401, "seek": 246600, "start": 2466.0, "end": 2469.0, "text": " And it means the key can be updated if you change PCR values.", "tokens": [50364, 400, 309, 1355, 264, 2141, 393, 312, 10588, 498, 291, 1319, 44022, 4190, 13, 50514], "temperature": 0.0, "avg_logprob": -0.0829442604300902, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.40256965160369873}, {"id": 402, "seek": 246600, "start": 2469.0, "end": 2479.0, "text": " So now, if you boot a standard Linux kernel, it will actually hash the command line, the initial RAM disk, and the kernel all into PCR9.", "tokens": [50514, 407, 586, 11, 498, 291, 11450, 257, 3832, 18734, 28256, 11, 309, 486, 767, 22019, 264, 5622, 1622, 11, 264, 5883, 14561, 12355, 11, 293, 264, 28256, 439, 666, 44022, 24, 13, 51014], "temperature": 0.0, "avg_logprob": -0.0829442604300902, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.40256965160369873}, {"id": 403, "seek": 246600, "start": 2479.0, "end": 2490.0, "text": " And this means that I can lock my key to only unlocking, not only if it's the kernel version I know, but it has to be booted with the correct initial RAM disk and the correct command line,", "tokens": [51014, 400, 341, 1355, 300, 286, 393, 4017, 452, 2141, 281, 787, 49620, 11, 406, 787, 498, 309, 311, 264, 28256, 3037, 286, 458, 11, 457, 309, 575, 281, 312, 11450, 292, 365, 264, 3006, 5883, 14561, 12355, 293, 264, 3006, 5622, 1622, 11, 51564], "temperature": 0.0, "avg_logprob": -0.0829442604300902, "compression_ratio": 1.7048458149779735, "no_speech_prob": 0.40256965160369873}, {"id": 404, "seek": 249000, "start": 2490.0, "end": 2498.0, "text": " which is another really useful feature, and if I upgrade my kernel, the PCR values will change, but I can calculate what they should be.", "tokens": [50364, 597, 307, 1071, 534, 4420, 4111, 11, 293, 498, 286, 11484, 452, 28256, 11, 264, 44022, 4190, 486, 1319, 11, 457, 286, 393, 8873, 437, 436, 820, 312, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08553748264491001, "compression_ratio": 1.7392996108949417, "no_speech_prob": 0.8198123574256897}, {"id": 405, "seek": 249000, "start": 2498.0, "end": 2502.0, "text": " I just add another signed policy to the key that says use this.", "tokens": [50764, 286, 445, 909, 1071, 8175, 3897, 281, 264, 2141, 300, 1619, 764, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08553748264491001, "compression_ratio": 1.7392996108949417, "no_speech_prob": 0.8198123574256897}, {"id": 406, "seek": 249000, "start": 2502.0, "end": 2508.0, "text": " And I can also delete signed policies from the key, but beware, deleting a signed policy does not revoke the policy.", "tokens": [50964, 400, 286, 393, 611, 12097, 8175, 7657, 490, 264, 2141, 11, 457, 312, 3039, 11, 48946, 257, 8175, 3897, 775, 406, 3698, 2949, 264, 3897, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08553748264491001, "compression_ratio": 1.7392996108949417, "no_speech_prob": 0.8198123574256897}, {"id": 407, "seek": 249000, "start": 2508.0, "end": 2517.0, "text": " If somebody else comes across the old policy, they can still use it, signature will still match. It just removes it from the key.", "tokens": [51264, 759, 2618, 1646, 1487, 2108, 264, 1331, 3897, 11, 436, 393, 920, 764, 309, 11, 13397, 486, 920, 2995, 13, 467, 445, 30445, 309, 490, 264, 2141, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08553748264491001, "compression_ratio": 1.7392996108949417, "no_speech_prob": 0.8198123574256897}, {"id": 408, "seek": 251700, "start": 2517.0, "end": 2524.0, "text": " And all statements, and indeed signed policy statements, are all processed effectively as fragment chains.", "tokens": [50364, 400, 439, 12363, 11, 293, 6451, 8175, 3897, 12363, 11, 366, 439, 18846, 8659, 382, 26424, 12626, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11301137360048966, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.11715269088745117}, {"id": 409, "seek": 251700, "start": 2524.0, "end": 2531.0, "text": " And the same mechanism can actually be used to execute multiple signed policies, and it will keep trying until one fits.", "tokens": [50714, 400, 264, 912, 7513, 393, 767, 312, 1143, 281, 14483, 3866, 8175, 7657, 11, 293, 309, 486, 1066, 1382, 1826, 472, 9001, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11301137360048966, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.11715269088745117}, {"id": 410, "seek": 251700, "start": 2531.0, "end": 2538.0, "text": " At this particular time, I was going to try and do a demo. I think I have two minutes left.", "tokens": [51064, 1711, 341, 1729, 565, 11, 286, 390, 516, 281, 853, 293, 360, 257, 10723, 13, 286, 519, 286, 362, 732, 2077, 1411, 13, 51414], "temperature": 0.0, "avg_logprob": -0.11301137360048966, "compression_ratio": 1.6030150753768844, "no_speech_prob": 0.11715269088745117}, {"id": 411, "seek": 254700, "start": 2548.0, "end": 2552.0, "text": " Well, let's see if we can do that. Come here.", "tokens": [50414, 1042, 11, 718, 311, 536, 498, 321, 393, 360, 300, 13, 2492, 510, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15816828056618018, "compression_ratio": 1.025974025974026, "no_speech_prob": 0.35338693857192993}, {"id": 412, "seek": 254700, "start": 2570.0, "end": 2573.0, "text": " Actually, let's make that bigger.", "tokens": [51514, 5135, 11, 718, 311, 652, 300, 3801, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15816828056618018, "compression_ratio": 1.025974025974026, "no_speech_prob": 0.35338693857192993}, {"id": 413, "seek": 257700, "start": 2577.0, "end": 2589.0, "text": " So everybody can just about see that.", "tokens": [50364, 407, 2201, 393, 445, 466, 536, 300, 13, 50964], "temperature": 0.0, "avg_logprob": -0.2591684913635254, "compression_ratio": 1.0128205128205128, "no_speech_prob": 0.017725836485624313}, {"id": 414, "seek": 257700, "start": 2589.0, "end": 2596.0, "text": " First of all, I should just edit the key.", "tokens": [50964, 2386, 295, 439, 11, 286, 820, 445, 8129, 264, 2141, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2591684913635254, "compression_ratio": 1.0128205128205128, "no_speech_prob": 0.017725836485624313}, {"id": 415, "seek": 259600, "start": 2596.0, "end": 2615.0, "text": " So this is my GPG secret key. If you go up here, what you see is that a lot of my non-revoked or expired keys are actually TPM protected.", "tokens": [50364, 407, 341, 307, 452, 26039, 38, 4054, 2141, 13, 759, 291, 352, 493, 510, 11, 437, 291, 536, 307, 300, 257, 688, 295, 452, 2107, 12, 40382, 9511, 420, 36587, 9317, 366, 767, 314, 18819, 10594, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10528583079576492, "compression_ratio": 1.3653846153846154, "no_speech_prob": 0.008169208653271198}, {"id": 416, "seek": 259600, "start": 2615.0, "end": 2623.0, "text": " So I'm using all of my GPG keys in my TPM, which is a very useful property.", "tokens": [51314, 407, 286, 478, 1228, 439, 295, 452, 26039, 38, 9317, 294, 452, 314, 18819, 11, 597, 307, 257, 588, 4420, 4707, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10528583079576492, "compression_ratio": 1.3653846153846154, "no_speech_prob": 0.008169208653271198}, {"id": 417, "seek": 262600, "start": 2627.0, "end": 2633.0, "text": " Let's see. I've got about two minutes left. So let's just...", "tokens": [50414, 961, 311, 536, 13, 286, 600, 658, 466, 732, 2077, 1411, 13, 407, 718, 311, 445, 485, 50714], "temperature": 0.0, "avg_logprob": -0.17279963223439343, "compression_ratio": 1.3615384615384616, "no_speech_prob": 0.014938938431441784}, {"id": 418, "seek": 262600, "start": 2643.0, "end": 2650.0, "text": " So what I've done is I've just moved my actual key directory out of the way, and I'm just going to create a new key.", "tokens": [51214, 407, 437, 286, 600, 1096, 307, 286, 600, 445, 4259, 452, 3539, 2141, 21120, 484, 295, 264, 636, 11, 293, 286, 478, 445, 516, 281, 1884, 257, 777, 2141, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17279963223439343, "compression_ratio": 1.3615384615384616, "no_speech_prob": 0.014938938431441784}, {"id": 419, "seek": 265000, "start": 2651.0, "end": 2656.0, "text": " So this is the way you generate keys quickly.", "tokens": [50414, 407, 341, 307, 264, 636, 291, 8460, 9317, 2661, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1591573537782181, "compression_ratio": 1.2300884955752212, "no_speech_prob": 0.008656329475343227}, {"id": 420, "seek": 265000, "start": 2667.0, "end": 2674.0, "text": " And this P256 is the way you tell it to. The very secure passphrase I'm going to use is test.", "tokens": [51214, 400, 341, 430, 6074, 21, 307, 264, 636, 291, 980, 309, 281, 13, 440, 588, 7144, 1320, 44598, 651, 286, 478, 516, 281, 764, 307, 1500, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1591573537782181, "compression_ratio": 1.2300884955752212, "no_speech_prob": 0.008656329475343227}, {"id": 421, "seek": 267400, "start": 2674.0, "end": 2678.0, "text": " Yep. So this is...", "tokens": [50364, 7010, 13, 407, 341, 307, 485, 50564], "temperature": 0.0, "avg_logprob": -0.20682959653893296, "compression_ratio": 1.2033898305084745, "no_speech_prob": 0.0065321228466928005}, {"id": 422, "seek": 267400, "start": 2681.0, "end": 2683.0, "text": " Oh, for God's sake.", "tokens": [50714, 876, 11, 337, 1265, 311, 9717, 13, 50814], "temperature": 0.0, "avg_logprob": -0.20682959653893296, "compression_ratio": 1.2033898305084745, "no_speech_prob": 0.0065321228466928005}, {"id": 423, "seek": 267400, "start": 2685.0, "end": 2692.0, "text": " Okay, let's not do a demo. Let's just go straight on to questions. I already showed you I had TPM keys.", "tokens": [50914, 1033, 11, 718, 311, 406, 360, 257, 10723, 13, 961, 311, 445, 352, 2997, 322, 281, 1651, 13, 286, 1217, 4712, 291, 286, 632, 314, 18819, 9317, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20682959653893296, "compression_ratio": 1.2033898305084745, "no_speech_prob": 0.0065321228466928005}, {"id": 424, "seek": 269200, "start": 2692.0, "end": 2697.0, "text": " So five minutes left. Any questions?", "tokens": [50364, 407, 1732, 2077, 1411, 13, 2639, 1651, 30, 50614], "temperature": 0.0, "avg_logprob": -0.44959449768066406, "compression_ratio": 1.175257731958763, "no_speech_prob": 0.03557143360376358}, {"id": 425, "seek": 269200, "start": 2708.0, "end": 2713.0, "text": " Hi. It's not so much a question. It's more a comment, because you put system.", "tokens": [51164, 2421, 13, 467, 311, 406, 370, 709, 257, 1168, 13, 467, 311, 544, 257, 2871, 11, 570, 291, 829, 1185, 13, 51414], "temperature": 0.0, "avg_logprob": -0.44959449768066406, "compression_ratio": 1.175257731958763, "no_speech_prob": 0.03557143360376358}, {"id": 426, "seek": 271300, "start": 2713.0, "end": 2719.0, "text": " We're not using any non-standard format that we came up with. We're just using", "tokens": [50364, 492, 434, 406, 1228, 604, 2107, 12, 1115, 515, 7877, 300, 321, 1361, 493, 365, 13, 492, 434, 445, 1228, 50664], "temperature": 0.0, "avg_logprob": -0.2097979998979412, "compression_ratio": 1.612099644128114, "no_speech_prob": 0.5920998454093933}, {"id": 427, "seek": 271300, "start": 2719.0, "end": 2726.0, "text": " civilization that the Intel stack suggests us to use. So we didn't really add anything on top of that.", "tokens": [50664, 18036, 300, 264, 19762, 8630, 13409, 505, 281, 764, 13, 407, 321, 994, 380, 534, 909, 1340, 322, 1192, 295, 300, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2097979998979412, "compression_ratio": 1.612099644128114, "no_speech_prob": 0.5920998454093933}, {"id": 428, "seek": 271300, "start": 2726.0, "end": 2732.0, "text": " So, I mean, your specification, great. We have no problem at all. We're supporting this, but it's also very, very new.", "tokens": [51014, 407, 11, 286, 914, 11, 428, 31256, 11, 869, 13, 492, 362, 572, 1154, 412, 439, 13, 492, 434, 7231, 341, 11, 457, 309, 311, 611, 588, 11, 588, 777, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2097979998979412, "compression_ratio": 1.612099644128114, "no_speech_prob": 0.5920998454093933}, {"id": 429, "seek": 271300, "start": 2732.0, "end": 2740.0, "text": " And it doesn't even support the stuff that we need. Like we, for example, use policy authorize.nv, which allows you to store policy hash in an nv index.", "tokens": [51314, 400, 309, 1177, 380, 754, 1406, 264, 1507, 300, 321, 643, 13, 1743, 321, 11, 337, 1365, 11, 764, 3897, 3793, 1125, 13, 77, 85, 11, 597, 4045, 291, 281, 3531, 3897, 22019, 294, 364, 297, 85, 8186, 13, 51714], "temperature": 0.0, "avg_logprob": -0.2097979998979412, "compression_ratio": 1.612099644128114, "no_speech_prob": 0.5920998454093933}, {"id": 430, "seek": 274000, "start": 2740.0, "end": 2749.0, "text": " It's what we built everything on. And if your spec can't color that yet, then it's also not really in the position yet to be used for this kind of stuff.", "tokens": [50364, 467, 311, 437, 321, 3094, 1203, 322, 13, 400, 498, 428, 1608, 393, 380, 2017, 300, 1939, 11, 550, 309, 311, 611, 406, 534, 294, 264, 2535, 1939, 281, 312, 1143, 337, 341, 733, 295, 1507, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13519754233183684, "compression_ratio": 1.618320610687023, "no_speech_prob": 0.20234039425849915}, {"id": 431, "seek": 274000, "start": 2749.0, "end": 2756.0, "text": " But in general, I'm not opposed at all. Like you seem to insinuating that we did our own thing and didn't want to play balls, anyone else.", "tokens": [50814, 583, 294, 2674, 11, 286, 478, 406, 8851, 412, 439, 13, 1743, 291, 1643, 281, 1028, 259, 32438, 300, 321, 630, 527, 1065, 551, 293, 994, 380, 528, 281, 862, 9803, 11, 2878, 1646, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13519754233183684, "compression_ratio": 1.618320610687023, "no_speech_prob": 0.20234039425849915}, {"id": 432, "seek": 274000, "start": 2756.0, "end": 2763.0, "text": " That's just garbage. You totally find supporting anything that people can agree on. This is not an area you want to be pioneers in.", "tokens": [51164, 663, 311, 445, 14150, 13, 509, 3879, 915, 7231, 1340, 300, 561, 393, 3986, 322, 13, 639, 307, 406, 364, 1859, 291, 528, 281, 312, 47381, 294, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13519754233183684, "compression_ratio": 1.618320610687023, "no_speech_prob": 0.20234039425849915}, {"id": 433, "seek": 276300, "start": 2763.0, "end": 2773.0, "text": " We want that some people do the work for us and then we just move to that. That's entirely fine. But yeah, make sure, though, that the functionality that people need,", "tokens": [50364, 492, 528, 300, 512, 561, 360, 264, 589, 337, 505, 293, 550, 321, 445, 1286, 281, 300, 13, 663, 311, 7696, 2489, 13, 583, 1338, 11, 652, 988, 11, 1673, 11, 300, 264, 14980, 300, 561, 643, 11, 50864], "temperature": 0.0, "avg_logprob": -0.21083180409557414, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.59003084897995}, {"id": 434, "seek": 276300, "start": 2773.0, "end": 2779.0, "text": " in this case, like for system-y stuff, that at least, like, looking through the spec, I just did that on my phone.", "tokens": [50864, 294, 341, 1389, 11, 411, 337, 1185, 12, 88, 1507, 11, 300, 412, 1935, 11, 411, 11, 1237, 807, 264, 1608, 11, 286, 445, 630, 300, 322, 452, 2593, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21083180409557414, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.59003084897995}, {"id": 435, "seek": 276300, "start": 2779.0, "end": 2785.0, "text": " Maybe I've missed something, but it just doesn't cover the stuff that we need, which is policy authorize.nv, for example.", "tokens": [51164, 2704, 286, 600, 6721, 746, 11, 457, 309, 445, 1177, 380, 2060, 264, 1507, 300, 321, 643, 11, 597, 307, 3897, 3793, 1125, 13, 77, 85, 11, 337, 1365, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21083180409557414, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.59003084897995}, {"id": 436, "seek": 278500, "start": 2785.0, "end": 2795.0, "text": " But actually, it only covers everything other than the exceptional commands. Policy authorize.nv is an actually exceptional command, so it's already technically covered by the spec that's there.", "tokens": [50364, 583, 767, 11, 309, 787, 10538, 1203, 661, 813, 264, 19279, 16901, 13, 21708, 3793, 1125, 13, 77, 85, 307, 364, 767, 19279, 5622, 11, 370, 309, 311, 1217, 12120, 5343, 538, 264, 1608, 300, 311, 456, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15178825341018976, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.35838159918785095}, {"id": 437, "seek": 278500, "start": 2795.0, "end": 2801.0, "text": " Signed policy is an exception command. So this is technical to do with the way the spec works.", "tokens": [50864, 13515, 292, 3897, 307, 364, 11183, 5622, 13, 407, 341, 307, 6191, 281, 360, 365, 264, 636, 264, 1608, 1985, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15178825341018976, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.35838159918785095}, {"id": 438, "seek": 278500, "start": 2801.0, "end": 2808.0, "text": " Well, you have to, like, it's the same thing as the assigned stuff because you just store it in the nv. But anyway, this is very technical.", "tokens": [51164, 1042, 11, 291, 362, 281, 11, 411, 11, 309, 311, 264, 912, 551, 382, 264, 13279, 1507, 570, 291, 445, 3531, 309, 294, 264, 297, 85, 13, 583, 4033, 11, 341, 307, 588, 6191, 13, 51514], "temperature": 0.0, "avg_logprob": -0.15178825341018976, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.35838159918785095}, {"id": 439, "seek": 280800, "start": 2808.0, "end": 2821.0, "text": " Like, looking through the spec, it's just not covering. All I'm saying is, you know, we're not the problem. Like, we're fine with supporting anything, but maybe putting our stuff on the slides, not the West Wing, to start getting the discussion going.", "tokens": [50364, 1743, 11, 1237, 807, 264, 1608, 11, 309, 311, 445, 406, 10322, 13, 1057, 286, 478, 1566, 307, 11, 291, 458, 11, 321, 434, 406, 264, 1154, 13, 1743, 11, 321, 434, 2489, 365, 7231, 1340, 11, 457, 1310, 3372, 527, 1507, 322, 264, 9788, 11, 406, 264, 4055, 28785, 11, 281, 722, 1242, 264, 5017, 516, 13, 51014], "temperature": 0.0, "avg_logprob": -0.22579431061697477, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.6466197371482849}, {"id": 440, "seek": 280800, "start": 2821.0, "end": 2831.0, "text": " No, just use the point there. I thought I had everything standardized on this key format and system D came along and wasn't. That was all the sliders there to do.", "tokens": [51014, 883, 11, 445, 764, 264, 935, 456, 13, 286, 1194, 286, 632, 1203, 31677, 322, 341, 2141, 7877, 293, 1185, 413, 1361, 2051, 293, 2067, 380, 13, 663, 390, 439, 264, 1061, 6936, 456, 281, 360, 13, 51514], "temperature": 0.0, "avg_logprob": -0.22579431061697477, "compression_ratio": 1.6235294117647059, "no_speech_prob": 0.6466197371482849}, {"id": 441, "seek": 283100, "start": 2831.0, "end": 2842.0, "text": " There's no real difficulty transferring keys from one format to another. And also, the standard is ASN1. I know there are a lot of people who hate ASN1 want to use JSON instead.", "tokens": [50364, 821, 311, 572, 957, 10360, 31437, 9317, 490, 472, 7877, 281, 1071, 13, 400, 611, 11, 264, 3832, 307, 7469, 45, 16, 13, 286, 458, 456, 366, 257, 688, 295, 561, 567, 4700, 7469, 45, 16, 528, 281, 764, 31828, 2602, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17546944088406033, "compression_ratio": 1.469298245614035, "no_speech_prob": 0.6088935732841492}, {"id": 442, "seek": 283100, "start": 2842.0, "end": 2855.0, "text": " We use TPM2B stuff that the Intel stack gives us. But again, if you add it to the Intel stack, we're happy to use it. We just consume the APIs as a provider.", "tokens": [50914, 492, 764, 314, 18819, 17, 33, 1507, 300, 264, 19762, 8630, 2709, 505, 13, 583, 797, 11, 498, 291, 909, 309, 281, 264, 19762, 8630, 11, 321, 434, 2055, 281, 764, 309, 13, 492, 445, 14732, 264, 21445, 382, 257, 12398, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17546944088406033, "compression_ratio": 1.469298245614035, "no_speech_prob": 0.6088935732841492}, {"id": 443, "seek": 285500, "start": 2855.0, "end": 2862.0, "text": " We do not see our position in a role in innovating that. We just want to use libraries that work for us. And if the libraries don't support it, they don't.", "tokens": [50364, 492, 360, 406, 536, 527, 2535, 294, 257, 3090, 294, 5083, 990, 300, 13, 492, 445, 528, 281, 764, 15148, 300, 589, 337, 505, 13, 400, 498, 264, 15148, 500, 380, 1406, 309, 11, 436, 500, 380, 13, 50714], "temperature": 0.0, "avg_logprob": -0.158042612210126, "compression_ratio": 1.5168539325842696, "no_speech_prob": 0.46274447441101074}, {"id": 444, "seek": 285500, "start": 2862.0, "end": 2869.0, "text": " So it's already in the Intel stack. The Intel engine stack generates keys of this format.", "tokens": [50714, 407, 309, 311, 1217, 294, 264, 19762, 8630, 13, 440, 19762, 2848, 8630, 23815, 9317, 295, 341, 7877, 13, 51064], "temperature": 0.0, "avg_logprob": -0.158042612210126, "compression_ratio": 1.5168539325842696, "no_speech_prob": 0.46274447441101074}, {"id": 445, "seek": 285500, "start": 2869.0, "end": 2871.0, "text": " And which layer is that?", "tokens": [51064, 400, 597, 4583, 307, 300, 30, 51164], "temperature": 0.0, "avg_logprob": -0.158042612210126, "compression_ratio": 1.5168539325842696, "no_speech_prob": 0.46274447441101074}, {"id": 446, "seek": 287100, "start": 2871.0, "end": 2885.0, "text": " I think it's the create TPM. It's not a TSS layer. It's the actual Intel rotor TPM engine that was on the slides. That TPM engine also uses this key format because it's designed to be used for open-source.", "tokens": [50364, 286, 519, 309, 311, 264, 1884, 314, 18819, 13, 467, 311, 406, 257, 314, 21929, 4583, 13, 467, 311, 264, 3539, 19762, 26847, 314, 18819, 2848, 300, 390, 322, 264, 9788, 13, 663, 314, 18819, 2848, 611, 4960, 341, 2141, 7877, 570, 309, 311, 4761, 281, 312, 1143, 337, 1269, 12, 41676, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1960903685769917, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.2910505533218384}, {"id": 447, "seek": 287100, "start": 2885.0, "end": 2892.0, "text": " We did it in the library, right? Like in the TSS library. The key conversion sits outside.", "tokens": [51064, 492, 630, 309, 294, 264, 6405, 11, 558, 30, 1743, 294, 264, 314, 21929, 6405, 13, 440, 2141, 14298, 12696, 2380, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1960903685769917, "compression_ratio": 1.5336787564766838, "no_speech_prob": 0.2910505533218384}, {"id": 448, "seek": 289200, "start": 2892.0, "end": 2898.0, "text": " I would like to invite you to get together in a deaf room place.", "tokens": [50364, 286, 576, 411, 281, 7980, 291, 281, 483, 1214, 294, 257, 15559, 1808, 1081, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3620589120047433, "compression_ratio": 1.025974025974026, "no_speech_prob": 0.25851690769195557}, {"id": 449, "seek": 289200, "start": 2906.0, "end": 2908.0, "text": " Thank you.", "tokens": [51064, 1044, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.3620589120047433, "compression_ratio": 1.025974025974026, "no_speech_prob": 0.25851690769195557}, {"id": 450, "seek": 289200, "start": 2910.0, "end": 2912.0, "text": " Hi.", "tokens": [51264, 2421, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3620589120047433, "compression_ratio": 1.025974025974026, "no_speech_prob": 0.25851690769195557}, {"id": 451, "seek": 291200, "start": 2913.0, "end": 2936.0, "text": " We still, okay. So thank you for the talk. My question was, since the policies are only treated as hashes, does it mean that you could eventually, regardless of practicality, find another policy set that produces the same result and use an alternative policy set to update access to the key?", "tokens": [50414, 492, 920, 11, 1392, 13, 407, 1309, 291, 337, 264, 751, 13, 1222, 1168, 390, 11, 1670, 264, 7657, 366, 787, 8668, 382, 575, 8076, 11, 775, 309, 914, 300, 291, 727, 4728, 11, 10060, 295, 8496, 507, 11, 915, 1071, 3897, 992, 300, 14725, 264, 912, 1874, 293, 764, 364, 8535, 3897, 992, 281, 5623, 2105, 281, 264, 2141, 30, 51564], "temperature": 0.0, "avg_logprob": -0.14779271345872144, "compression_ratio": 1.515625, "no_speech_prob": 0.08591070771217346}, {"id": 452, "seek": 293600, "start": 2937.0, "end": 2951.0, "text": " So the question was, could I get two policies that produce the same hash? The actual question you're asking me is, can I induce a hash collision with SHA256? And the answer to that is no.", "tokens": [50414, 407, 264, 1168, 390, 11, 727, 286, 483, 732, 7657, 300, 5258, 264, 912, 22019, 30, 440, 3539, 1168, 291, 434, 3365, 385, 307, 11, 393, 286, 41263, 257, 22019, 24644, 365, 38820, 6074, 21, 30, 400, 264, 1867, 281, 300, 307, 572, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10735236605008443, "compression_ratio": 1.3357142857142856, "no_speech_prob": 0.24564912915229797}, {"id": 453, "seek": 295100, "start": 2951.0, "end": 2966.0, "text": " And the reason that two policies can't produce the same hash is because they've been very careful to actually use the input values that go into the hash that mean if the policy is different, the value in the statement is different, so the hash value always has to be different.", "tokens": [50364, 400, 264, 1778, 300, 732, 7657, 393, 380, 5258, 264, 912, 22019, 307, 570, 436, 600, 668, 588, 5026, 281, 767, 764, 264, 4846, 4190, 300, 352, 666, 264, 22019, 300, 914, 498, 264, 3897, 307, 819, 11, 264, 2158, 294, 264, 5629, 307, 819, 11, 370, 264, 22019, 2158, 1009, 575, 281, 312, 819, 13, 51114], "temperature": 0.0, "avg_logprob": -0.07915488015050473, "compression_ratio": 1.805084745762712, "no_speech_prob": 0.5845754146575928}, {"id": 454, "seek": 295100, "start": 2966.0, "end": 2975.0, "text": " So the chances of getting a policy hash collision are exactly the same as they would be if getting a SHA256 hash collision or whatever hash you use.", "tokens": [51114, 407, 264, 10486, 295, 1242, 257, 3897, 22019, 24644, 366, 2293, 264, 912, 382, 436, 576, 312, 498, 1242, 257, 38820, 6074, 21, 22019, 24644, 420, 2035, 22019, 291, 764, 13, 51564], "temperature": 0.0, "avg_logprob": -0.07915488015050473, "compression_ratio": 1.805084745762712, "no_speech_prob": 0.5845754146575928}, {"id": 455, "seek": 298100, "start": 2981.0, "end": 2991.0, "text": " Is there any reason to use, if you're on Linux, to use either IBM or Intel Stack versus just in kernel TPM resource manager?", "tokens": [50364, 1119, 456, 604, 1778, 281, 764, 11, 498, 291, 434, 322, 18734, 11, 281, 764, 2139, 23487, 420, 19762, 37649, 5717, 445, 294, 28256, 314, 18819, 7684, 6598, 30, 50864], "temperature": 0.0, "avg_logprob": -0.18472279924334903, "compression_ratio": 1.1481481481481481, "no_speech_prob": 0.40266838669776917}, {"id": 456, "seek": 299100, "start": 2991.0, "end": 3005.0, "text": " So if you're a consumer and you're not programming with TPM, there is no reason whatsoever to prefer one stack or the other. They all work equally well. There are no security problems with either of them.", "tokens": [50364, 407, 498, 291, 434, 257, 9711, 293, 291, 434, 406, 9410, 365, 314, 18819, 11, 456, 307, 572, 1778, 17076, 281, 4382, 472, 8630, 420, 264, 661, 13, 814, 439, 589, 12309, 731, 13, 821, 366, 572, 3825, 2740, 365, 2139, 295, 552, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06858907720094086, "compression_ratio": 1.6653386454183268, "no_speech_prob": 0.4139748811721802}, {"id": 457, "seek": 299100, "start": 3005.0, "end": 3018.0, "text": " When correctly programmed, they will set up sessions and do everything right. Intel does have one problem in that the Intel code also has an engine sitting in it, but that engine doesn't actually use TPM security.", "tokens": [51064, 1133, 8944, 31092, 11, 436, 486, 992, 493, 11081, 293, 360, 1203, 558, 13, 19762, 775, 362, 472, 1154, 294, 300, 264, 19762, 3089, 611, 575, 364, 2848, 3798, 294, 309, 11, 457, 300, 2848, 1177, 380, 767, 764, 314, 18819, 3825, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06858907720094086, "compression_ratio": 1.6653386454183268, "no_speech_prob": 0.4139748811721802}, {"id": 458, "seek": 301800, "start": 3018.0, "end": 3025.0, "text": " So that's the one piece of the Intel stack that's wrong, but the IBM stack doesn't include an engine. I mean my engine is separate from the IBM stack.", "tokens": [50364, 407, 300, 311, 264, 472, 2522, 295, 264, 19762, 8630, 300, 311, 2085, 11, 457, 264, 23487, 8630, 1177, 380, 4090, 364, 2848, 13, 286, 914, 452, 2848, 307, 4994, 490, 264, 23487, 8630, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10805729986394494, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.2579696476459503}, {"id": 459, "seek": 301800, "start": 3025.0, "end": 3037.0, "text": " Well, resource management just works. So you're leading to the problem where the Intel TSS encourages people to contact safe sessions, right? This is the problem.", "tokens": [50714, 1042, 11, 7684, 4592, 445, 1985, 13, 407, 291, 434, 5775, 281, 264, 1154, 689, 264, 19762, 314, 21929, 28071, 561, 281, 3385, 3273, 11081, 11, 558, 30, 639, 307, 264, 1154, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10805729986394494, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.2579696476459503}, {"id": 460, "seek": 301800, "start": 3037.0, "end": 3046.0, "text": " And the kernel resource manager doesn't expect people to do that, so it doesn't do a technical operation called regapping, right?", "tokens": [51314, 400, 264, 28256, 7684, 6598, 1177, 380, 2066, 561, 281, 360, 300, 11, 370, 309, 1177, 380, 360, 257, 6191, 6916, 1219, 1121, 10534, 11, 558, 30, 51764], "temperature": 0.0, "avg_logprob": -0.10805729986394494, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.2579696476459503}, {"id": 461, "seek": 304600, "start": 3046.0, "end": 3055.0, "text": " The reason it doesn't do it is because I wrote that resource manager and I never had a reason to use it for regapping, so it just doesn't do it.", "tokens": [50364, 440, 1778, 309, 1177, 380, 360, 309, 307, 570, 286, 4114, 300, 7684, 6598, 293, 286, 1128, 632, 257, 1778, 281, 764, 309, 337, 1121, 10534, 11, 370, 309, 445, 1177, 380, 360, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.06737712877137321, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.11701244860887527}, {"id": 462, "seek": 304600, "start": 3055.0, "end": 3064.0, "text": " I've already told the Intel people that if they want to use it like this, the kernel would be perfectly happy to accept patches to do de-gapping, and they're fairly easy to write.", "tokens": [50814, 286, 600, 1217, 1907, 264, 19762, 561, 300, 498, 436, 528, 281, 764, 309, 411, 341, 11, 264, 28256, 576, 312, 6239, 2055, 281, 3241, 26531, 281, 360, 368, 12, 70, 10534, 11, 293, 436, 434, 6457, 1858, 281, 2464, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06737712877137321, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.11701244860887527}, {"id": 463, "seek": 304600, "start": 3064.0, "end": 3071.0, "text": " There is actually, and we're getting onto kernel stuff, a point at which the kernel itself may need to do de-gapping.", "tokens": [51264, 821, 307, 767, 11, 293, 321, 434, 1242, 3911, 28256, 1507, 11, 257, 935, 412, 597, 264, 28256, 2564, 815, 643, 281, 360, 368, 12, 70, 10534, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06737712877137321, "compression_ratio": 1.753968253968254, "no_speech_prob": 0.11701244860887527}, {"id": 464, "seek": 307100, "start": 3071.0, "end": 3077.0, "text": " One of the things that we're looking at is trying to use a permanent session within the kernel for certain key operations.", "tokens": [50364, 1485, 295, 264, 721, 300, 321, 434, 1237, 412, 307, 1382, 281, 764, 257, 10996, 5481, 1951, 264, 28256, 337, 1629, 2141, 7705, 13, 50664], "temperature": 0.0, "avg_logprob": -0.0707280493190146, "compression_ratio": 1.6948529411764706, "no_speech_prob": 0.6833966970443726}, {"id": 465, "seek": 307100, "start": 3077.0, "end": 3083.0, "text": " If we do that, that session will be context saved, then we will have to do de-gapping and everything will just work.", "tokens": [50664, 759, 321, 360, 300, 11, 300, 5481, 486, 312, 4319, 6624, 11, 550, 321, 486, 362, 281, 360, 368, 12, 70, 10534, 293, 1203, 486, 445, 589, 13, 50964], "temperature": 0.0, "avg_logprob": -0.0707280493190146, "compression_ratio": 1.6948529411764706, "no_speech_prob": 0.6833966970443726}, {"id": 466, "seek": 307100, "start": 3083.0, "end": 3089.0, "text": " The problem is that the kernel coding is just in time. I'm the person doing it, and I haven't got around to it yet.", "tokens": [50964, 440, 1154, 307, 300, 264, 28256, 17720, 307, 445, 294, 565, 13, 286, 478, 264, 954, 884, 309, 11, 293, 286, 2378, 380, 658, 926, 281, 309, 1939, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0707280493190146, "compression_ratio": 1.6948529411764706, "no_speech_prob": 0.6833966970443726}, {"id": 467, "seek": 307100, "start": 3089.0, "end": 3097.0, "text": " So if you want to use the Intel TSS with saved sessions, then you need to use the ABMRD resource manager.", "tokens": [51264, 407, 498, 291, 528, 281, 764, 264, 19762, 314, 21929, 365, 6624, 11081, 11, 550, 291, 643, 281, 764, 264, 13838, 21173, 35, 7684, 6598, 13, 51664], "temperature": 0.0, "avg_logprob": -0.0707280493190146, "compression_ratio": 1.6948529411764706, "no_speech_prob": 0.6833966970443726}, {"id": 468, "seek": 309700, "start": 3097.0, "end": 3102.0, "text": " If you want to use saved sessions, everything just works.", "tokens": [50364, 759, 291, 528, 281, 764, 6624, 11081, 11, 1203, 445, 1985, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15712140156672552, "compression_ratio": 1.0795454545454546, "no_speech_prob": 0.1801927387714386}, {"id": 469, "seek": 309700, "start": 3102.0, "end": 3105.0, "text": " Many, many thanks for the great talk.", "tokens": [50614, 5126, 11, 867, 3231, 337, 264, 869, 751, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15712140156672552, "compression_ratio": 1.0795454545454546, "no_speech_prob": 0.1801927387714386}], "language": "en"}