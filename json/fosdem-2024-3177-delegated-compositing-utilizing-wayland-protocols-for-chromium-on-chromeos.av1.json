{"text": " So, hello everyone. My name is Maxim. I'm a browser engineer from EGALIA and today we are going to talk about the delegated compositing utilizing Willem protocols for Chromium on ChromoS. And here's our today's agenda. So first we talk about the goals and the motivations of the project, why we have Willem on ChromoS and why it's in Chromium. Then I will talk a little bit about what lacrosse is. Also I will need to cover a little bit about the Chromium display compositor to give you some of the ideas, why, how it works and why we actually needed the delegated compositing there. Then about the delegated compositing itself, the Willem protocols and a big picture of what we actually have. So Chromium and Willem on ChromoS. So there are quite a few vendors who are shipping ChromoS on their devices and as soon as the devices become, well, they are aging, right? So they are not receiving the updates. That results in having them with the old browser and so on. So in order to improve that and improve the maintainability of the devices, it was decided to split the Chrome browser from the ChromoS system itself because they are tied together. And that would also make it possible to receive them the browser updates. But how is it possible to do that? So the idea was to decouple the browser, as I said, from the operating system itself. That was called the lacrosse project. And the ChromoS itself, it has a system UI and the window manager called Ash. And yeah, Chrome was tied to that operating system. And at this point, there was also a Willem implementation already in ChromoS and it was decided to use Willem. So basically in 2015, if I'm not mistaken, the ChromoS received an own Willem's version of the implementation called Exosphere. It's currently used by ARC to run 100 apps on the ChromoS and also Crestini to run Linux apps. And in about 2016, we started to port Chromium to Willem and on Linux, you can use Chromium with Headless, X11 and Willem. So it was kind of a natural choice to employ that implementation and have a browser running them. And basically Willem is used for graphics and the wind handlings with stable protocols employed and also with some custom extensions employed. And for the high level features like file picking, Cross API is used. Well, it's basically Google's implementation called Moja IPC. This is similar to Win32 and Cocoa. But what is Lacrosse? So Lacrosse is a project to decouple the Chrome browser from the Chrome OS window manager called Ash from the System UI. So on this box, on the green box, you see the Chrome OS operating system. And on the yellow box, you can see the Lacrosse browser, which using Welland backend through the Ozone layer. The Ozone layer is basically an abstraction in the Chromium browser, which allows you to implement on backend. And as a sent on Linux, it's X11, Headless and Welland. And it's switchable in the runtime. For the ChromoS itself, it runs on the DRAM, but you can also use like X11 and run ChromoS emulator on your Linux device. So the Lacrosse is using Welland to communicate with Exo, which is in built in the Chrome OS, which actually forwards the input devices and has some graphics communication there. But there was a problem. So this split resulted in performance and resource cost. But why and how to mitigate that? To understand why it was causing a problem, we need to switch to the Chromium display compositor and understand a little bit how actually Chromium draws frames. So as you may know, Chromium has multi-architecture, multi-process architecture. So we have a GPU process or this service process. And also we have clients, which are the render process, the browser process. There's also this video client, which sends the video frames. So basically, we call them the frame things. And basically, the way how it works is that if we are talking about this GPU acceleration and the GPU rasterization, the way how it works is that, for example, if we take the render process, it prepares paint operations for the compositor frame. Then when we are preparing the final compositor frame, we submit those paint operations to ski on the GPU process. That is called the GPU rasterization. And we prepare textures. And these textures basically represent tiles if we divide the whole window to the tiles. So those represent tiles. And the compositor frames, they have references to the tiles, including some frame data like masks, filters, clipping, and other stuff. And on the right side, you can see the vService process or simply GPU process. It represents clients as surfaces. And each of the surfaces has own compositor frame. So we need to aggregate all the surfaces into a single compositor frame and do the final compositing. So this is a high-level picture, high-level overview of how it was working before the delegated compositing. So Lacrosse was aggregating the quads that would end up creating a final surface. And that final surface was, of course, represented by Zingobuffer. It was sent over Weyland to Exo. Then in the Ashcromb site, Ashcromb you can call HromoS, it was like maybe getting some other frames from other windows, I don't know, some system settings if you open that one. And it was doing the compositing once again in this step. So that resulted in double compositing and bigel resources overhead. But how to fix that? And the solution to that was to use the delegated compositing. So basically, we left the aggregation step, we created our final compositor frame, but the quads that we got, which are basically the textures, all of them must have been sent over Weyland protocol to Ash for the final compositing. And of course, I need to say, basically, this is about serializing the HromoS compositor frame, sending over a couple of IPCs through Weyland to Ash. And basically, it was at this stage, deserializing the data that it received, and it basically created, must have been creating the same kind of browser frame for the final compositing. And in order to achieve that, a couple of, well, at first I was thinking that there's actually more things we implemented, like some custom things. But in the end, it wasn't that much. So Weyland subsurface, that is standard, right? Each quad and, well, let's say we were sending quads as overlays, they were represented by own surface. Of course, Weyland buffers and explicit synchronization protocol, because we want the job to be asynchronous. And the main thing is surface augmenter, right? Because we wanted to have this data to be sent from Hromo, Hromo browser, basically, the compositor frame, with this additional information like rounder corners, clipping, also pixel precision, this is one of the important things. And we needed to make our own protocol extending the Weyland surface. Also we used, in the beginning, we used our own protocol for the single color buffers, but as soon as in the upstream, there is now, right now, a single pixel buffer protocol, we just employ that one, so that we don't need to create a real buffer. At first, when nothing was there, we were just clearing a buffer to a certain color, but that's not really efficient. Yeah, why we also needed to pass this kind of round-end corner and clipping information? And the reason to that one is basically because when Hromo sends, it thrusterizes the quads to the textures, those do not have any masks, right? So when we do the final compositing step, we apply those mask filters and so on and send them to Skiya, which does the final picture for us. And for the pixel precision, the problem is that Hromo basically works with the pixels, and as long as Weyland uses deeps, it resulted in some pixels losses. And when it was compositing the quads together, we could see some of the glitches. For that, to overcome that, we actually added some additional stuff to the surface segmenter and started to pass this information using VLFixed, basically, which allows us to use some floating wallets. It was also required to update the VP port, this destination, and some of the other stuff, like setting trust form, setting trusted damage, because when we, for example, change the order of the Weyland subsurface, this Z-order, at some point, we don't need to recalculate the damage or do we need to recalculate that? So basically, all that is managed with this additional fact. And there can be some other stuff, but I would say that was the most important one. And so this is the big picture how everything is implemented. So we have, like, on the top, Lacros viz process and the Lacros browser. So Lacros viz is basically preparing the frame with the quads and sends over the Weyland to the ashram, which then creates the same compositor frame as Lacros would have if it wasn't delegating but was compositing itself. Prepares the final frame, prepares the overlay and sends it to the DRM and that's it. You have the final frame with the system UI and the browser content as well. That's it. Questions? No, go ahead. Yes? Well, I can just repeat the question. Okay, so the question was whether the GTK and QT can also benefit from that. Do you mean the Chromium browser or you mean itself? No, just regular apps using GTK or QT. Yeah, I think so. Basically, if it's possible to have the double compositing, it is possible. We had to use some additional protocols because as long as Chromo is a really closed environment, we can do whatever is possible, whatever is convenient for us. But I think that is possible for the GTK and get this improvement of the performance as well because if the Weyland compositor can do that, why not? Yeah, basically in similar direction, but the Chromium on a regular Linux Weyland compositor, I mean, that would benefit from such features as well. I mean, there is double compositing again. So, have you looked at getting up to or generic protocols to manage that? So, now you have custom protocols, right? But for it to work on a regular Linux Uniday, yeah, a generic protocol. Do you look at doing that? So the question is basically about if Chromium Linux can benefit from the same implementation and whether we considered creating some generic protocol and upstream that. Well, if we get back to this pixel precision and the rounding corners, for the pixel precision, if the browser doesn't work in some custom scale, it's one, right? So it's fine, we don't need this kind of protocol. But for the rounded corners, well, probably we could do something like do this processing on the Chromium side, but it's not very efficient, right? Well, it should be possible, but creating a protocol and upstreaming that, it will take some quite some time. I personally did not thought about that, but it's an interesting concept for the future, of course. I mean, especially for embedded, it can also help if you, I'm guessing part of the subsurface is offered, for example, the video in the browser. If the compositor on the embedded device can then put that video on the plane, the rest is not branded, then you can benefit from these kind of things much more easily. Yes, of course. Do you delegate all the compositing and the compositor can decide what to put on the plane? Well, at least we can submit this video frame as an overlay. If I'm not mistaken, there was a, from somebody doing this, this forwarding Chromium, if I'm not mistaken, I actually saw this by the patches. I think that landed from the problem later. Yeah, probably, probably, yes. I didn't pay attention to that. I was busy with the Chromium itself. Yeah. Yes. What's the granularity of these subsurances? Like, how many would you expect to have on a regular webpage? Are we talking like almost every screen element or is it the more hard to think? Are you compared to like CIL? Well, if you just take a normal page, right? So, the question is how many subsurances we are going to have, I mean, how the page is itself like divided, whether we are going to have each, for the each element, sub-sub-surface or it's kind of done in other way. Well, basically, if you imagine a page, right, as a simple page, there are no additional textures and so on, we can split the page to the tiles, like there will be, I don't know how many, maybe six tiles, something like that. So, basically, this is how much you are going to send. But if you take like, for example, motion mark, right, there are some tests, like images tests, it can create hundreds of those textures. Then we are starting to send all of them over the pipe. But there is a limit for the IPC. So, we have to limit this, the number of quads that we are able to send. And if I'm not mistaken, it's limited right now to 50. Because after this while you, it just doesn't make sense to do any delegation. It's kind of become too expensive in terms of, I mean, there will be too many subsurances. If we could like squash this together, that would definitely help. Because it seems like it wasn't like a use case that was thought when the wheel and was designed. So, any other questions? Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 11.4, "text": " So, hello everyone.", "tokens": [50364, 407, 11, 7751, 1518, 13, 50934], "temperature": 0.0, "avg_logprob": -0.3791772380019679, "compression_ratio": 1.329268292682927, "no_speech_prob": 0.46180060505867004}, {"id": 1, "seek": 0, "start": 11.4, "end": 12.4, "text": " My name is Maxim.", "tokens": [50934, 1222, 1315, 307, 29076, 13, 50984], "temperature": 0.0, "avg_logprob": -0.3791772380019679, "compression_ratio": 1.329268292682927, "no_speech_prob": 0.46180060505867004}, {"id": 2, "seek": 0, "start": 12.4, "end": 18.52, "text": " I'm a browser engineer from EGALIA and today we are going to talk about the delegated compositing", "tokens": [50984, 286, 478, 257, 11185, 11403, 490, 462, 38, 3427, 6914, 293, 965, 321, 366, 516, 281, 751, 466, 264, 15824, 770, 10199, 1748, 51290], "temperature": 0.0, "avg_logprob": -0.3791772380019679, "compression_ratio": 1.329268292682927, "no_speech_prob": 0.46180060505867004}, {"id": 3, "seek": 0, "start": 18.52, "end": 24.2, "text": " utilizing Willem protocols for Chromium on ChromoS.", "tokens": [51290, 26775, 3099, 443, 20618, 337, 1721, 298, 2197, 322, 1721, 13395, 50, 13, 51574], "temperature": 0.0, "avg_logprob": -0.3791772380019679, "compression_ratio": 1.329268292682927, "no_speech_prob": 0.46180060505867004}, {"id": 4, "seek": 0, "start": 24.2, "end": 26.400000000000002, "text": " And here's our today's agenda.", "tokens": [51574, 400, 510, 311, 527, 965, 311, 9829, 13, 51684], "temperature": 0.0, "avg_logprob": -0.3791772380019679, "compression_ratio": 1.329268292682927, "no_speech_prob": 0.46180060505867004}, {"id": 5, "seek": 2640, "start": 26.4, "end": 32.0, "text": " So first we talk about the goals and the motivations of the project, why we have Willem", "tokens": [50364, 407, 700, 321, 751, 466, 264, 5493, 293, 264, 39034, 295, 264, 1716, 11, 983, 321, 362, 3099, 443, 50644], "temperature": 0.0, "avg_logprob": -0.19952937534877233, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.13830149173736572}, {"id": 6, "seek": 2640, "start": 32.0, "end": 35.48, "text": " on ChromoS and why it's in Chromium.", "tokens": [50644, 322, 1721, 13395, 50, 293, 983, 309, 311, 294, 1721, 298, 2197, 13, 50818], "temperature": 0.0, "avg_logprob": -0.19952937534877233, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.13830149173736572}, {"id": 7, "seek": 2640, "start": 35.48, "end": 39.12, "text": " Then I will talk a little bit about what lacrosse is.", "tokens": [50818, 1396, 286, 486, 751, 257, 707, 857, 466, 437, 28027, 2635, 405, 307, 13, 51000], "temperature": 0.0, "avg_logprob": -0.19952937534877233, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.13830149173736572}, {"id": 8, "seek": 2640, "start": 39.12, "end": 44.84, "text": " Also I will need to cover a little bit about the Chromium display compositor to give you", "tokens": [51000, 2743, 286, 486, 643, 281, 2060, 257, 707, 857, 466, 264, 1721, 298, 2197, 4674, 10199, 3029, 281, 976, 291, 51286], "temperature": 0.0, "avg_logprob": -0.19952937534877233, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.13830149173736572}, {"id": 9, "seek": 2640, "start": 44.84, "end": 50.92, "text": " some of the ideas, why, how it works and why we actually needed the delegated compositing", "tokens": [51286, 512, 295, 264, 3487, 11, 983, 11, 577, 309, 1985, 293, 983, 321, 767, 2978, 264, 15824, 770, 10199, 1748, 51590], "temperature": 0.0, "avg_logprob": -0.19952937534877233, "compression_ratio": 1.6839622641509433, "no_speech_prob": 0.13830149173736572}, {"id": 10, "seek": 5092, "start": 50.92, "end": 51.92, "text": " there.", "tokens": [50364, 456, 13, 50414], "temperature": 0.0, "avg_logprob": -0.19728877980221984, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.052422892302274704}, {"id": 11, "seek": 5092, "start": 51.92, "end": 58.64, "text": " Then about the delegated compositing itself, the Willem protocols and a big picture of", "tokens": [50414, 1396, 466, 264, 15824, 770, 10199, 1748, 2564, 11, 264, 3099, 443, 20618, 293, 257, 955, 3036, 295, 50750], "temperature": 0.0, "avg_logprob": -0.19728877980221984, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.052422892302274704}, {"id": 12, "seek": 5092, "start": 58.64, "end": 61.72, "text": " what we actually have.", "tokens": [50750, 437, 321, 767, 362, 13, 50904], "temperature": 0.0, "avg_logprob": -0.19728877980221984, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.052422892302274704}, {"id": 13, "seek": 5092, "start": 61.72, "end": 66.0, "text": " So Chromium and Willem on ChromoS.", "tokens": [50904, 407, 1721, 298, 2197, 293, 3099, 443, 322, 1721, 13395, 50, 13, 51118], "temperature": 0.0, "avg_logprob": -0.19728877980221984, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.052422892302274704}, {"id": 14, "seek": 5092, "start": 66.0, "end": 72.4, "text": " So there are quite a few vendors who are shipping ChromoS on their devices and as soon as the", "tokens": [51118, 407, 456, 366, 1596, 257, 1326, 22056, 567, 366, 14122, 1721, 13395, 50, 322, 641, 5759, 293, 382, 2321, 382, 264, 51438], "temperature": 0.0, "avg_logprob": -0.19728877980221984, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.052422892302274704}, {"id": 15, "seek": 5092, "start": 72.4, "end": 75.68, "text": " devices become, well, they are aging, right?", "tokens": [51438, 5759, 1813, 11, 731, 11, 436, 366, 19090, 11, 558, 30, 51602], "temperature": 0.0, "avg_logprob": -0.19728877980221984, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.052422892302274704}, {"id": 16, "seek": 5092, "start": 75.68, "end": 79.6, "text": " So they are not receiving the updates.", "tokens": [51602, 407, 436, 366, 406, 10040, 264, 9205, 13, 51798], "temperature": 0.0, "avg_logprob": -0.19728877980221984, "compression_ratio": 1.5893719806763285, "no_speech_prob": 0.052422892302274704}, {"id": 17, "seek": 7960, "start": 79.6, "end": 86.0, "text": " That results in having them with the old browser and so on.", "tokens": [50364, 663, 3542, 294, 1419, 552, 365, 264, 1331, 11185, 293, 370, 322, 13, 50684], "temperature": 0.0, "avg_logprob": -0.12331210999261766, "compression_ratio": 1.674641148325359, "no_speech_prob": 0.19754476845264435}, {"id": 18, "seek": 7960, "start": 86.0, "end": 91.36, "text": " So in order to improve that and improve the maintainability of the devices, it was decided", "tokens": [50684, 407, 294, 1668, 281, 3470, 300, 293, 3470, 264, 6909, 2310, 295, 264, 5759, 11, 309, 390, 3047, 50952], "temperature": 0.0, "avg_logprob": -0.12331210999261766, "compression_ratio": 1.674641148325359, "no_speech_prob": 0.19754476845264435}, {"id": 19, "seek": 7960, "start": 91.36, "end": 97.75999999999999, "text": " to split the Chrome browser from the ChromoS system itself because they are tied together.", "tokens": [50952, 281, 7472, 264, 15327, 11185, 490, 264, 1721, 13395, 50, 1185, 2564, 570, 436, 366, 9601, 1214, 13, 51272], "temperature": 0.0, "avg_logprob": -0.12331210999261766, "compression_ratio": 1.674641148325359, "no_speech_prob": 0.19754476845264435}, {"id": 20, "seek": 7960, "start": 97.75999999999999, "end": 104.88, "text": " And that would also make it possible to receive them the browser updates.", "tokens": [51272, 400, 300, 576, 611, 652, 309, 1944, 281, 4774, 552, 264, 11185, 9205, 13, 51628], "temperature": 0.0, "avg_logprob": -0.12331210999261766, "compression_ratio": 1.674641148325359, "no_speech_prob": 0.19754476845264435}, {"id": 21, "seek": 7960, "start": 104.88, "end": 107.16, "text": " But how is it possible to do that?", "tokens": [51628, 583, 577, 307, 309, 1944, 281, 360, 300, 30, 51742], "temperature": 0.0, "avg_logprob": -0.12331210999261766, "compression_ratio": 1.674641148325359, "no_speech_prob": 0.19754476845264435}, {"id": 22, "seek": 10716, "start": 107.16, "end": 112.72, "text": " So the idea was to decouple the browser, as I said, from the operating system itself.", "tokens": [50364, 407, 264, 1558, 390, 281, 979, 263, 781, 264, 11185, 11, 382, 286, 848, 11, 490, 264, 7447, 1185, 2564, 13, 50642], "temperature": 0.0, "avg_logprob": -0.14455204010009765, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.017756564542651176}, {"id": 23, "seek": 10716, "start": 112.72, "end": 115.24, "text": " That was called the lacrosse project.", "tokens": [50642, 663, 390, 1219, 264, 28027, 2635, 405, 1716, 13, 50768], "temperature": 0.0, "avg_logprob": -0.14455204010009765, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.017756564542651176}, {"id": 24, "seek": 10716, "start": 115.24, "end": 121.12, "text": " And the ChromoS itself, it has a system UI and the window manager called Ash.", "tokens": [50768, 400, 264, 1721, 13395, 50, 2564, 11, 309, 575, 257, 1185, 15682, 293, 264, 4910, 6598, 1219, 10279, 13, 51062], "temperature": 0.0, "avg_logprob": -0.14455204010009765, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.017756564542651176}, {"id": 25, "seek": 10716, "start": 121.12, "end": 125.75999999999999, "text": " And yeah, Chrome was tied to that operating system.", "tokens": [51062, 400, 1338, 11, 15327, 390, 9601, 281, 300, 7447, 1185, 13, 51294], "temperature": 0.0, "avg_logprob": -0.14455204010009765, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.017756564542651176}, {"id": 26, "seek": 10716, "start": 125.75999999999999, "end": 131.28, "text": " And at this point, there was also a Willem implementation already in ChromoS and it was", "tokens": [51294, 400, 412, 341, 935, 11, 456, 390, 611, 257, 3099, 443, 11420, 1217, 294, 1721, 13395, 50, 293, 309, 390, 51570], "temperature": 0.0, "avg_logprob": -0.14455204010009765, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.017756564542651176}, {"id": 27, "seek": 10716, "start": 131.28, "end": 133.48, "text": " decided to use Willem.", "tokens": [51570, 3047, 281, 764, 3099, 443, 13, 51680], "temperature": 0.0, "avg_logprob": -0.14455204010009765, "compression_ratio": 1.7009345794392523, "no_speech_prob": 0.017756564542651176}, {"id": 28, "seek": 13348, "start": 133.48, "end": 140.48, "text": " So basically in 2015, if I'm not mistaken, the ChromoS received an own Willem's", "tokens": [50364, 407, 1936, 294, 7546, 11, 498, 286, 478, 406, 21333, 11, 264, 1721, 13395, 50, 4613, 364, 1065, 3099, 443, 311, 50714], "temperature": 0.0, "avg_logprob": -0.2697497036146081, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.043330542743206024}, {"id": 29, "seek": 13348, "start": 140.48, "end": 144.0, "text": " version of the implementation called Exosphere.", "tokens": [50714, 3037, 295, 264, 11420, 1219, 2111, 44877, 13, 50890], "temperature": 0.0, "avg_logprob": -0.2697497036146081, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.043330542743206024}, {"id": 30, "seek": 13348, "start": 144.0, "end": 150.39999999999998, "text": " It's currently used by ARC to run 100 apps on the ChromoS and also Crestini to run Linux", "tokens": [50890, 467, 311, 4362, 1143, 538, 8943, 34, 281, 1190, 2319, 7733, 322, 264, 1721, 13395, 50, 293, 611, 383, 4149, 3812, 281, 1190, 18734, 51210], "temperature": 0.0, "avg_logprob": -0.2697497036146081, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.043330542743206024}, {"id": 31, "seek": 13348, "start": 150.39999999999998, "end": 151.92, "text": " apps.", "tokens": [51210, 7733, 13, 51286], "temperature": 0.0, "avg_logprob": -0.2697497036146081, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.043330542743206024}, {"id": 32, "seek": 13348, "start": 151.92, "end": 160.88, "text": " And in about 2016, we started to port Chromium to Willem and on Linux, you can use Chromium", "tokens": [51286, 400, 294, 466, 6549, 11, 321, 1409, 281, 2436, 1721, 298, 2197, 281, 3099, 443, 293, 322, 18734, 11, 291, 393, 764, 1721, 298, 2197, 51734], "temperature": 0.0, "avg_logprob": -0.2697497036146081, "compression_ratio": 1.4881516587677726, "no_speech_prob": 0.043330542743206024}, {"id": 33, "seek": 16088, "start": 160.88, "end": 164.24, "text": " with Headless, X11 and Willem.", "tokens": [50364, 365, 11398, 1832, 11, 1783, 5348, 293, 3099, 443, 13, 50532], "temperature": 0.0, "avg_logprob": -0.2532942438700113, "compression_ratio": 1.5291479820627802, "no_speech_prob": 0.04651843383908272}, {"id": 34, "seek": 16088, "start": 164.24, "end": 171.84, "text": " So it was kind of a natural choice to employ that implementation and have a browser running", "tokens": [50532, 407, 309, 390, 733, 295, 257, 3303, 3922, 281, 3188, 300, 11420, 293, 362, 257, 11185, 2614, 50912], "temperature": 0.0, "avg_logprob": -0.2532942438700113, "compression_ratio": 1.5291479820627802, "no_speech_prob": 0.04651843383908272}, {"id": 35, "seek": 16088, "start": 171.84, "end": 173.84, "text": " them.", "tokens": [50912, 552, 13, 51012], "temperature": 0.0, "avg_logprob": -0.2532942438700113, "compression_ratio": 1.5291479820627802, "no_speech_prob": 0.04651843383908272}, {"id": 36, "seek": 16088, "start": 173.84, "end": 178.84, "text": " And basically Willem is used for graphics and the wind handlings with stable protocols", "tokens": [51012, 400, 1936, 3099, 443, 307, 1143, 337, 11837, 293, 264, 2468, 1011, 20823, 365, 8351, 20618, 51262], "temperature": 0.0, "avg_logprob": -0.2532942438700113, "compression_ratio": 1.5291479820627802, "no_speech_prob": 0.04651843383908272}, {"id": 37, "seek": 16088, "start": 178.84, "end": 184.0, "text": " employed and also with some custom extensions employed.", "tokens": [51262, 20115, 293, 611, 365, 512, 2375, 25129, 20115, 13, 51520], "temperature": 0.0, "avg_logprob": -0.2532942438700113, "compression_ratio": 1.5291479820627802, "no_speech_prob": 0.04651843383908272}, {"id": 38, "seek": 16088, "start": 184.0, "end": 189.4, "text": " And for the high level features like file picking, Cross API is used.", "tokens": [51520, 400, 337, 264, 1090, 1496, 4122, 411, 3991, 8867, 11, 11623, 9362, 307, 1143, 13, 51790], "temperature": 0.0, "avg_logprob": -0.2532942438700113, "compression_ratio": 1.5291479820627802, "no_speech_prob": 0.04651843383908272}, {"id": 39, "seek": 18940, "start": 189.4, "end": 193.8, "text": " Well, it's basically Google's implementation called Moja IPC.", "tokens": [50364, 1042, 11, 309, 311, 1936, 3329, 311, 11420, 1219, 3335, 2938, 8671, 34, 13, 50584], "temperature": 0.0, "avg_logprob": -0.2076525370279948, "compression_ratio": 1.5096153846153846, "no_speech_prob": 0.18692556023597717}, {"id": 40, "seek": 18940, "start": 193.8, "end": 199.08, "text": " This is similar to Win32 and Cocoa.", "tokens": [50584, 639, 307, 2531, 281, 10427, 11440, 293, 29787, 64, 13, 50848], "temperature": 0.0, "avg_logprob": -0.2076525370279948, "compression_ratio": 1.5096153846153846, "no_speech_prob": 0.18692556023597717}, {"id": 41, "seek": 18940, "start": 199.08, "end": 201.08, "text": " But what is Lacrosse?", "tokens": [50848, 583, 437, 307, 40113, 2635, 405, 30, 50948], "temperature": 0.0, "avg_logprob": -0.2076525370279948, "compression_ratio": 1.5096153846153846, "no_speech_prob": 0.18692556023597717}, {"id": 42, "seek": 18940, "start": 201.08, "end": 207.04000000000002, "text": " So Lacrosse is a project to decouple the Chrome browser from the Chrome OS window manager", "tokens": [50948, 407, 40113, 2635, 405, 307, 257, 1716, 281, 979, 263, 781, 264, 15327, 11185, 490, 264, 15327, 12731, 4910, 6598, 51246], "temperature": 0.0, "avg_logprob": -0.2076525370279948, "compression_ratio": 1.5096153846153846, "no_speech_prob": 0.18692556023597717}, {"id": 43, "seek": 18940, "start": 207.04000000000002, "end": 209.44, "text": " called Ash from the System UI.", "tokens": [51246, 1219, 10279, 490, 264, 8910, 15682, 13, 51366], "temperature": 0.0, "avg_logprob": -0.2076525370279948, "compression_ratio": 1.5096153846153846, "no_speech_prob": 0.18692556023597717}, {"id": 44, "seek": 18940, "start": 209.44, "end": 215.0, "text": " So on this box, on the green box, you see the Chrome OS operating system.", "tokens": [51366, 407, 322, 341, 2424, 11, 322, 264, 3092, 2424, 11, 291, 536, 264, 15327, 12731, 7447, 1185, 13, 51644], "temperature": 0.0, "avg_logprob": -0.2076525370279948, "compression_ratio": 1.5096153846153846, "no_speech_prob": 0.18692556023597717}, {"id": 45, "seek": 21500, "start": 215.0, "end": 220.64, "text": " And on the yellow box, you can see the Lacrosse browser, which using Welland backend through", "tokens": [50364, 400, 322, 264, 5566, 2424, 11, 291, 393, 536, 264, 40113, 2635, 405, 11185, 11, 597, 1228, 1042, 474, 38087, 807, 50646], "temperature": 0.0, "avg_logprob": -0.24435948924858028, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.39819252490997314}, {"id": 46, "seek": 21500, "start": 220.64, "end": 221.88, "text": " the Ozone layer.", "tokens": [50646, 264, 422, 16896, 4583, 13, 50708], "temperature": 0.0, "avg_logprob": -0.24435948924858028, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.39819252490997314}, {"id": 47, "seek": 21500, "start": 221.88, "end": 227.44, "text": " The Ozone layer is basically an abstraction in the Chromium browser, which allows you", "tokens": [50708, 440, 422, 16896, 4583, 307, 1936, 364, 37765, 294, 264, 1721, 298, 2197, 11185, 11, 597, 4045, 291, 50986], "temperature": 0.0, "avg_logprob": -0.24435948924858028, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.39819252490997314}, {"id": 48, "seek": 21500, "start": 227.44, "end": 229.04, "text": " to implement on backend.", "tokens": [50986, 281, 4445, 322, 38087, 13, 51066], "temperature": 0.0, "avg_logprob": -0.24435948924858028, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.39819252490997314}, {"id": 49, "seek": 21500, "start": 229.04, "end": 232.52, "text": " And as a sent on Linux, it's X11, Headless and Welland.", "tokens": [51066, 400, 382, 257, 2279, 322, 18734, 11, 309, 311, 1783, 5348, 11, 11398, 1832, 293, 1042, 474, 13, 51240], "temperature": 0.0, "avg_logprob": -0.24435948924858028, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.39819252490997314}, {"id": 50, "seek": 21500, "start": 232.52, "end": 235.28, "text": " And it's switchable in the runtime.", "tokens": [51240, 400, 309, 311, 3679, 712, 294, 264, 34474, 13, 51378], "temperature": 0.0, "avg_logprob": -0.24435948924858028, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.39819252490997314}, {"id": 51, "seek": 21500, "start": 235.28, "end": 243.2, "text": " For the ChromoS itself, it runs on the DRAM, but you can also use like X11 and run ChromoS", "tokens": [51378, 1171, 264, 1721, 13395, 50, 2564, 11, 309, 6676, 322, 264, 12118, 2865, 11, 457, 291, 393, 611, 764, 411, 1783, 5348, 293, 1190, 1721, 13395, 50, 51774], "temperature": 0.0, "avg_logprob": -0.24435948924858028, "compression_ratio": 1.6448979591836734, "no_speech_prob": 0.39819252490997314}, {"id": 52, "seek": 24320, "start": 243.2, "end": 246.35999999999999, "text": " emulator on your Linux device.", "tokens": [50364, 846, 16381, 322, 428, 18734, 4302, 13, 50522], "temperature": 0.0, "avg_logprob": -0.1974208645704316, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.09551257640123367}, {"id": 53, "seek": 24320, "start": 246.35999999999999, "end": 251.72, "text": " So the Lacrosse is using Welland to communicate with Exo, which is in built in the Chrome", "tokens": [50522, 407, 264, 40113, 2635, 405, 307, 1228, 1042, 474, 281, 7890, 365, 2111, 78, 11, 597, 307, 294, 3094, 294, 264, 15327, 50790], "temperature": 0.0, "avg_logprob": -0.1974208645704316, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.09551257640123367}, {"id": 54, "seek": 24320, "start": 251.72, "end": 260.36, "text": " OS, which actually forwards the input devices and has some graphics communication there.", "tokens": [50790, 12731, 11, 597, 767, 30126, 264, 4846, 5759, 293, 575, 512, 11837, 6101, 456, 13, 51222], "temperature": 0.0, "avg_logprob": -0.1974208645704316, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.09551257640123367}, {"id": 55, "seek": 24320, "start": 260.36, "end": 262.28, "text": " But there was a problem.", "tokens": [51222, 583, 456, 390, 257, 1154, 13, 51318], "temperature": 0.0, "avg_logprob": -0.1974208645704316, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.09551257640123367}, {"id": 56, "seek": 24320, "start": 262.28, "end": 266.44, "text": " So this split resulted in performance and resource cost.", "tokens": [51318, 407, 341, 7472, 18753, 294, 3389, 293, 7684, 2063, 13, 51526], "temperature": 0.0, "avg_logprob": -0.1974208645704316, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.09551257640123367}, {"id": 57, "seek": 24320, "start": 266.44, "end": 270.84, "text": " But why and how to mitigate that?", "tokens": [51526, 583, 983, 293, 577, 281, 27336, 300, 30, 51746], "temperature": 0.0, "avg_logprob": -0.1974208645704316, "compression_ratio": 1.5476190476190477, "no_speech_prob": 0.09551257640123367}, {"id": 58, "seek": 27084, "start": 271.28, "end": 276.96, "text": " To understand why it was causing a problem, we need to switch to the Chromium display", "tokens": [50386, 1407, 1223, 983, 309, 390, 9853, 257, 1154, 11, 321, 643, 281, 3679, 281, 264, 1721, 298, 2197, 4674, 50670], "temperature": 0.0, "avg_logprob": -0.1766815687480726, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.026751063764095306}, {"id": 59, "seek": 27084, "start": 276.96, "end": 285.15999999999997, "text": " compositor and understand a little bit how actually Chromium draws frames.", "tokens": [50670, 10199, 3029, 293, 1223, 257, 707, 857, 577, 767, 1721, 298, 2197, 20045, 12083, 13, 51080], "temperature": 0.0, "avg_logprob": -0.1766815687480726, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.026751063764095306}, {"id": 60, "seek": 27084, "start": 285.15999999999997, "end": 292.79999999999995, "text": " So as you may know, Chromium has multi-architecture, multi-process architecture.", "tokens": [51080, 407, 382, 291, 815, 458, 11, 1721, 298, 2197, 575, 4825, 12, 1178, 5739, 540, 11, 4825, 12, 41075, 9482, 13, 51462], "temperature": 0.0, "avg_logprob": -0.1766815687480726, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.026751063764095306}, {"id": 61, "seek": 27084, "start": 292.79999999999995, "end": 296.79999999999995, "text": " So we have a GPU process or this service process.", "tokens": [51462, 407, 321, 362, 257, 18407, 1399, 420, 341, 2643, 1399, 13, 51662], "temperature": 0.0, "avg_logprob": -0.1766815687480726, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.026751063764095306}, {"id": 62, "seek": 29680, "start": 296.8, "end": 302.28000000000003, "text": " And also we have clients, which are the render process, the browser process.", "tokens": [50364, 400, 611, 321, 362, 6982, 11, 597, 366, 264, 15529, 1399, 11, 264, 11185, 1399, 13, 50638], "temperature": 0.0, "avg_logprob": -0.18340327134772913, "compression_ratio": 1.5872093023255813, "no_speech_prob": 0.010424347594380379}, {"id": 63, "seek": 29680, "start": 302.28000000000003, "end": 308.08, "text": " There's also this video client, which sends the video frames.", "tokens": [50638, 821, 311, 611, 341, 960, 6423, 11, 597, 14790, 264, 960, 12083, 13, 50928], "temperature": 0.0, "avg_logprob": -0.18340327134772913, "compression_ratio": 1.5872093023255813, "no_speech_prob": 0.010424347594380379}, {"id": 64, "seek": 29680, "start": 308.08, "end": 313.40000000000003, "text": " So basically, we call them the frame things.", "tokens": [50928, 407, 1936, 11, 321, 818, 552, 264, 3920, 721, 13, 51194], "temperature": 0.0, "avg_logprob": -0.18340327134772913, "compression_ratio": 1.5872093023255813, "no_speech_prob": 0.010424347594380379}, {"id": 65, "seek": 29680, "start": 313.40000000000003, "end": 322.68, "text": " And basically, the way how it works is that if we are talking about this GPU acceleration", "tokens": [51194, 400, 1936, 11, 264, 636, 577, 309, 1985, 307, 300, 498, 321, 366, 1417, 466, 341, 18407, 17162, 51658], "temperature": 0.0, "avg_logprob": -0.18340327134772913, "compression_ratio": 1.5872093023255813, "no_speech_prob": 0.010424347594380379}, {"id": 66, "seek": 32268, "start": 322.68, "end": 327.72, "text": " and the GPU rasterization, the way how it works is that, for example, if we take the", "tokens": [50364, 293, 264, 18407, 367, 1727, 2144, 11, 264, 636, 577, 309, 1985, 307, 300, 11, 337, 1365, 11, 498, 321, 747, 264, 50616], "temperature": 0.0, "avg_logprob": -0.1837616516993596, "compression_ratio": 1.8189655172413792, "no_speech_prob": 0.12621302902698517}, {"id": 67, "seek": 32268, "start": 327.72, "end": 333.04, "text": " render process, it prepares paint operations for the compositor frame.", "tokens": [50616, 15529, 1399, 11, 309, 39418, 4225, 7705, 337, 264, 10199, 3029, 3920, 13, 50882], "temperature": 0.0, "avg_logprob": -0.1837616516993596, "compression_ratio": 1.8189655172413792, "no_speech_prob": 0.12621302902698517}, {"id": 68, "seek": 32268, "start": 333.04, "end": 339.4, "text": " Then when we are preparing the final compositor frame, we submit those paint operations to", "tokens": [50882, 1396, 562, 321, 366, 10075, 264, 2572, 10199, 3029, 3920, 11, 321, 10315, 729, 4225, 7705, 281, 51200], "temperature": 0.0, "avg_logprob": -0.1837616516993596, "compression_ratio": 1.8189655172413792, "no_speech_prob": 0.12621302902698517}, {"id": 69, "seek": 32268, "start": 339.4, "end": 341.56, "text": " ski on the GPU process.", "tokens": [51200, 14274, 322, 264, 18407, 1399, 13, 51308], "temperature": 0.0, "avg_logprob": -0.1837616516993596, "compression_ratio": 1.8189655172413792, "no_speech_prob": 0.12621302902698517}, {"id": 70, "seek": 32268, "start": 341.56, "end": 343.6, "text": " That is called the GPU rasterization.", "tokens": [51308, 663, 307, 1219, 264, 18407, 367, 1727, 2144, 13, 51410], "temperature": 0.0, "avg_logprob": -0.1837616516993596, "compression_ratio": 1.8189655172413792, "no_speech_prob": 0.12621302902698517}, {"id": 71, "seek": 32268, "start": 343.6, "end": 345.72, "text": " And we prepare textures.", "tokens": [51410, 400, 321, 5940, 24501, 13, 51516], "temperature": 0.0, "avg_logprob": -0.1837616516993596, "compression_ratio": 1.8189655172413792, "no_speech_prob": 0.12621302902698517}, {"id": 72, "seek": 32268, "start": 345.72, "end": 352.64, "text": " And these textures basically represent tiles if we divide the whole window to the tiles.", "tokens": [51516, 400, 613, 24501, 1936, 2906, 21982, 498, 321, 9845, 264, 1379, 4910, 281, 264, 21982, 13, 51862], "temperature": 0.0, "avg_logprob": -0.1837616516993596, "compression_ratio": 1.8189655172413792, "no_speech_prob": 0.12621302902698517}, {"id": 73, "seek": 35264, "start": 352.64, "end": 354.71999999999997, "text": " So those represent tiles.", "tokens": [50364, 407, 729, 2906, 21982, 13, 50468], "temperature": 0.0, "avg_logprob": -0.1932318813829537, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0057459729723632336}, {"id": 74, "seek": 35264, "start": 354.71999999999997, "end": 360.84, "text": " And the compositor frames, they have references to the tiles, including some frame data like", "tokens": [50468, 400, 264, 10199, 3029, 12083, 11, 436, 362, 15400, 281, 264, 21982, 11, 3009, 512, 3920, 1412, 411, 50774], "temperature": 0.0, "avg_logprob": -0.1932318813829537, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0057459729723632336}, {"id": 75, "seek": 35264, "start": 360.84, "end": 365.88, "text": " masks, filters, clipping, and other stuff.", "tokens": [50774, 11830, 11, 15995, 11, 49320, 11, 293, 661, 1507, 13, 51026], "temperature": 0.0, "avg_logprob": -0.1932318813829537, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0057459729723632336}, {"id": 76, "seek": 35264, "start": 365.88, "end": 371.59999999999997, "text": " And on the right side, you can see the vService process or simply GPU process.", "tokens": [51026, 400, 322, 264, 558, 1252, 11, 291, 393, 536, 264, 371, 50, 25006, 1399, 420, 2935, 18407, 1399, 13, 51312], "temperature": 0.0, "avg_logprob": -0.1932318813829537, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0057459729723632336}, {"id": 77, "seek": 35264, "start": 371.59999999999997, "end": 374.24, "text": " It represents clients as surfaces.", "tokens": [51312, 467, 8855, 6982, 382, 16130, 13, 51444], "temperature": 0.0, "avg_logprob": -0.1932318813829537, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0057459729723632336}, {"id": 78, "seek": 35264, "start": 374.24, "end": 377.2, "text": " And each of the surfaces has own compositor frame.", "tokens": [51444, 400, 1184, 295, 264, 16130, 575, 1065, 10199, 3029, 3920, 13, 51592], "temperature": 0.0, "avg_logprob": -0.1932318813829537, "compression_ratio": 1.6218905472636815, "no_speech_prob": 0.0057459729723632336}, {"id": 79, "seek": 37720, "start": 377.2, "end": 384.44, "text": " So we need to aggregate all the surfaces into a single compositor frame and do the final", "tokens": [50364, 407, 321, 643, 281, 26118, 439, 264, 16130, 666, 257, 2167, 10199, 3029, 3920, 293, 360, 264, 2572, 50726], "temperature": 0.0, "avg_logprob": -0.14296006537103034, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.003099959809333086}, {"id": 80, "seek": 37720, "start": 384.44, "end": 388.15999999999997, "text": " compositing.", "tokens": [50726, 10199, 1748, 13, 50912], "temperature": 0.0, "avg_logprob": -0.14296006537103034, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.003099959809333086}, {"id": 81, "seek": 37720, "start": 388.15999999999997, "end": 394.0, "text": " So this is a high-level picture, high-level overview of how it was working before the delegated", "tokens": [50912, 407, 341, 307, 257, 1090, 12, 12418, 3036, 11, 1090, 12, 12418, 12492, 295, 577, 309, 390, 1364, 949, 264, 15824, 770, 51204], "temperature": 0.0, "avg_logprob": -0.14296006537103034, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.003099959809333086}, {"id": 82, "seek": 37720, "start": 394.0, "end": 395.0, "text": " compositing.", "tokens": [51204, 10199, 1748, 13, 51254], "temperature": 0.0, "avg_logprob": -0.14296006537103034, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.003099959809333086}, {"id": 83, "seek": 37720, "start": 395.0, "end": 401.84, "text": " So Lacrosse was aggregating the quads that would end up creating a final surface.", "tokens": [51254, 407, 40113, 2635, 405, 390, 16743, 990, 264, 421, 5834, 300, 576, 917, 493, 4084, 257, 2572, 3753, 13, 51596], "temperature": 0.0, "avg_logprob": -0.14296006537103034, "compression_ratio": 1.6781609195402298, "no_speech_prob": 0.003099959809333086}, {"id": 84, "seek": 40184, "start": 401.84, "end": 406.47999999999996, "text": " And that final surface was, of course, represented by Zingobuffer.", "tokens": [50364, 400, 300, 2572, 3753, 390, 11, 295, 1164, 11, 10379, 538, 1176, 278, 996, 1245, 260, 13, 50596], "temperature": 0.0, "avg_logprob": -0.259110333968182, "compression_ratio": 1.5022421524663676, "no_speech_prob": 0.17450562119483948}, {"id": 85, "seek": 40184, "start": 406.47999999999996, "end": 410.4, "text": " It was sent over Weyland to Exo.", "tokens": [50596, 467, 390, 2279, 670, 492, 88, 1661, 281, 2111, 78, 13, 50792], "temperature": 0.0, "avg_logprob": -0.259110333968182, "compression_ratio": 1.5022421524663676, "no_speech_prob": 0.17450562119483948}, {"id": 86, "seek": 40184, "start": 410.4, "end": 418.71999999999997, "text": " Then in the Ashcromb site, Ashcromb you can call HromoS, it was like maybe getting some", "tokens": [50792, 1396, 294, 264, 10279, 10757, 3548, 3621, 11, 10279, 10757, 3548, 291, 393, 818, 389, 4397, 78, 50, 11, 309, 390, 411, 1310, 1242, 512, 51208], "temperature": 0.0, "avg_logprob": -0.259110333968182, "compression_ratio": 1.5022421524663676, "no_speech_prob": 0.17450562119483948}, {"id": 87, "seek": 40184, "start": 418.71999999999997, "end": 425.44, "text": " other frames from other windows, I don't know, some system settings if you open that one.", "tokens": [51208, 661, 12083, 490, 661, 9309, 11, 286, 500, 380, 458, 11, 512, 1185, 6257, 498, 291, 1269, 300, 472, 13, 51544], "temperature": 0.0, "avg_logprob": -0.259110333968182, "compression_ratio": 1.5022421524663676, "no_speech_prob": 0.17450562119483948}, {"id": 88, "seek": 40184, "start": 425.44, "end": 431.0, "text": " And it was doing the compositing once again in this step.", "tokens": [51544, 400, 309, 390, 884, 264, 10199, 1748, 1564, 797, 294, 341, 1823, 13, 51822], "temperature": 0.0, "avg_logprob": -0.259110333968182, "compression_ratio": 1.5022421524663676, "no_speech_prob": 0.17450562119483948}, {"id": 89, "seek": 43100, "start": 431.0, "end": 437.28, "text": " So that resulted in double compositing and bigel resources overhead.", "tokens": [50364, 407, 300, 18753, 294, 3834, 10199, 1748, 293, 955, 338, 3593, 19922, 13, 50678], "temperature": 0.0, "avg_logprob": -0.1581452801114037, "compression_ratio": 1.64, "no_speech_prob": 0.00908301305025816}, {"id": 90, "seek": 43100, "start": 437.28, "end": 439.72, "text": " But how to fix that?", "tokens": [50678, 583, 577, 281, 3191, 300, 30, 50800], "temperature": 0.0, "avg_logprob": -0.1581452801114037, "compression_ratio": 1.64, "no_speech_prob": 0.00908301305025816}, {"id": 91, "seek": 43100, "start": 439.72, "end": 443.2, "text": " And the solution to that was to use the delegated compositing.", "tokens": [50800, 400, 264, 3827, 281, 300, 390, 281, 764, 264, 15824, 770, 10199, 1748, 13, 50974], "temperature": 0.0, "avg_logprob": -0.1581452801114037, "compression_ratio": 1.64, "no_speech_prob": 0.00908301305025816}, {"id": 92, "seek": 43100, "start": 443.2, "end": 450.28, "text": " So basically, we left the aggregation step, we created our final compositor frame, but", "tokens": [50974, 407, 1936, 11, 321, 1411, 264, 16743, 399, 1823, 11, 321, 2942, 527, 2572, 10199, 3029, 3920, 11, 457, 51328], "temperature": 0.0, "avg_logprob": -0.1581452801114037, "compression_ratio": 1.64, "no_speech_prob": 0.00908301305025816}, {"id": 93, "seek": 43100, "start": 450.28, "end": 457.52, "text": " the quads that we got, which are basically the textures, all of them must have been sent", "tokens": [51328, 264, 421, 5834, 300, 321, 658, 11, 597, 366, 1936, 264, 24501, 11, 439, 295, 552, 1633, 362, 668, 2279, 51690], "temperature": 0.0, "avg_logprob": -0.1581452801114037, "compression_ratio": 1.64, "no_speech_prob": 0.00908301305025816}, {"id": 94, "seek": 45752, "start": 457.52, "end": 465.32, "text": " over Weyland protocol to Ash for the final compositing.", "tokens": [50364, 670, 492, 88, 1661, 10336, 281, 10279, 337, 264, 2572, 10199, 1748, 13, 50754], "temperature": 0.0, "avg_logprob": -0.21945751508076985, "compression_ratio": 1.3666666666666667, "no_speech_prob": 0.02710479125380516}, {"id": 95, "seek": 45752, "start": 465.32, "end": 473.62, "text": " And of course, I need to say, basically, this is about serializing the HromoS compositor", "tokens": [50754, 400, 295, 1164, 11, 286, 643, 281, 584, 11, 1936, 11, 341, 307, 466, 17436, 3319, 264, 389, 4397, 78, 50, 10199, 3029, 51169], "temperature": 0.0, "avg_logprob": -0.21945751508076985, "compression_ratio": 1.3666666666666667, "no_speech_prob": 0.02710479125380516}, {"id": 96, "seek": 45752, "start": 473.62, "end": 479.12, "text": " frame, sending over a couple of IPCs through Weyland to Ash.", "tokens": [51169, 3920, 11, 7750, 670, 257, 1916, 295, 8671, 33290, 807, 492, 88, 1661, 281, 10279, 13, 51444], "temperature": 0.0, "avg_logprob": -0.21945751508076985, "compression_ratio": 1.3666666666666667, "no_speech_prob": 0.02710479125380516}, {"id": 97, "seek": 47912, "start": 479.12, "end": 488.84000000000003, "text": " And basically, it was at this stage, deserializing the data that it received, and it basically", "tokens": [50364, 400, 1936, 11, 309, 390, 412, 341, 3233, 11, 730, 260, 831, 3319, 264, 1412, 300, 309, 4613, 11, 293, 309, 1936, 50850], "temperature": 0.0, "avg_logprob": -0.1573972563812698, "compression_ratio": 1.5397727272727273, "no_speech_prob": 0.01849726401269436}, {"id": 98, "seek": 47912, "start": 488.84000000000003, "end": 497.8, "text": " created, must have been creating the same kind of browser frame for the final compositing.", "tokens": [50850, 2942, 11, 1633, 362, 668, 4084, 264, 912, 733, 295, 11185, 3920, 337, 264, 2572, 10199, 1748, 13, 51298], "temperature": 0.0, "avg_logprob": -0.1573972563812698, "compression_ratio": 1.5397727272727273, "no_speech_prob": 0.01849726401269436}, {"id": 99, "seek": 47912, "start": 497.8, "end": 503.8, "text": " And in order to achieve that, a couple of, well, at first I was thinking that there's", "tokens": [51298, 400, 294, 1668, 281, 4584, 300, 11, 257, 1916, 295, 11, 731, 11, 412, 700, 286, 390, 1953, 300, 456, 311, 51598], "temperature": 0.0, "avg_logprob": -0.1573972563812698, "compression_ratio": 1.5397727272727273, "no_speech_prob": 0.01849726401269436}, {"id": 100, "seek": 50380, "start": 503.8, "end": 508.44, "text": " actually more things we implemented, like some custom things.", "tokens": [50364, 767, 544, 721, 321, 12270, 11, 411, 512, 2375, 721, 13, 50596], "temperature": 0.0, "avg_logprob": -0.20295075007847377, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.06925859302282333}, {"id": 101, "seek": 50380, "start": 508.44, "end": 511.64, "text": " But in the end, it wasn't that much.", "tokens": [50596, 583, 294, 264, 917, 11, 309, 2067, 380, 300, 709, 13, 50756], "temperature": 0.0, "avg_logprob": -0.20295075007847377, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.06925859302282333}, {"id": 102, "seek": 50380, "start": 511.64, "end": 515.0, "text": " So Weyland subsurface, that is standard, right?", "tokens": [50756, 407, 492, 88, 1661, 2090, 374, 2868, 11, 300, 307, 3832, 11, 558, 30, 50924], "temperature": 0.0, "avg_logprob": -0.20295075007847377, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.06925859302282333}, {"id": 103, "seek": 50380, "start": 515.0, "end": 521.76, "text": " Each quad and, well, let's say we were sending quads as overlays, they were represented by", "tokens": [50924, 6947, 10787, 293, 11, 731, 11, 718, 311, 584, 321, 645, 7750, 421, 5834, 382, 15986, 3772, 11, 436, 645, 10379, 538, 51262], "temperature": 0.0, "avg_logprob": -0.20295075007847377, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.06925859302282333}, {"id": 104, "seek": 50380, "start": 521.76, "end": 523.32, "text": " own surface.", "tokens": [51262, 1065, 3753, 13, 51340], "temperature": 0.0, "avg_logprob": -0.20295075007847377, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.06925859302282333}, {"id": 105, "seek": 50380, "start": 523.32, "end": 530.48, "text": " Of course, Weyland buffers and explicit synchronization protocol, because we want the job to be asynchronous.", "tokens": [51340, 2720, 1164, 11, 492, 88, 1661, 9204, 433, 293, 13691, 19331, 2144, 10336, 11, 570, 321, 528, 264, 1691, 281, 312, 49174, 13, 51698], "temperature": 0.0, "avg_logprob": -0.20295075007847377, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.06925859302282333}, {"id": 106, "seek": 53048, "start": 530.48, "end": 536.76, "text": " And the main thing is surface augmenter, right?", "tokens": [50364, 400, 264, 2135, 551, 307, 3753, 29919, 260, 11, 558, 30, 50678], "temperature": 0.0, "avg_logprob": -0.23571833758287028, "compression_ratio": 1.4946236559139785, "no_speech_prob": 0.030977975577116013}, {"id": 107, "seek": 53048, "start": 536.76, "end": 545.84, "text": " Because we wanted to have this data to be sent from Hromo, Hromo browser, basically,", "tokens": [50678, 1436, 321, 1415, 281, 362, 341, 1412, 281, 312, 2279, 490, 389, 4397, 78, 11, 389, 4397, 78, 11185, 11, 1936, 11, 51132], "temperature": 0.0, "avg_logprob": -0.23571833758287028, "compression_ratio": 1.4946236559139785, "no_speech_prob": 0.030977975577116013}, {"id": 108, "seek": 53048, "start": 545.84, "end": 551.52, "text": " the compositor frame, with this additional information like rounder corners, clipping,", "tokens": [51132, 264, 10199, 3029, 3920, 11, 365, 341, 4497, 1589, 411, 3098, 260, 12413, 11, 49320, 11, 51416], "temperature": 0.0, "avg_logprob": -0.23571833758287028, "compression_ratio": 1.4946236559139785, "no_speech_prob": 0.030977975577116013}, {"id": 109, "seek": 53048, "start": 551.52, "end": 555.2, "text": " also pixel precision, this is one of the important things.", "tokens": [51416, 611, 19261, 18356, 11, 341, 307, 472, 295, 264, 1021, 721, 13, 51600], "temperature": 0.0, "avg_logprob": -0.23571833758287028, "compression_ratio": 1.4946236559139785, "no_speech_prob": 0.030977975577116013}, {"id": 110, "seek": 55520, "start": 555.2, "end": 561.2, "text": " And we needed to make our own protocol extending the Weyland surface.", "tokens": [50364, 400, 321, 2978, 281, 652, 527, 1065, 10336, 24360, 264, 492, 88, 1661, 3753, 13, 50664], "temperature": 0.0, "avg_logprob": -0.18044285547165645, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.067361019551754}, {"id": 111, "seek": 55520, "start": 561.2, "end": 568.2800000000001, "text": " Also we used, in the beginning, we used our own protocol for the single color buffers,", "tokens": [50664, 2743, 321, 1143, 11, 294, 264, 2863, 11, 321, 1143, 527, 1065, 10336, 337, 264, 2167, 2017, 9204, 433, 11, 51018], "temperature": 0.0, "avg_logprob": -0.18044285547165645, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.067361019551754}, {"id": 112, "seek": 55520, "start": 568.2800000000001, "end": 574.44, "text": " but as soon as in the upstream, there is now, right now, a single pixel buffer protocol,", "tokens": [51018, 457, 382, 2321, 382, 294, 264, 33915, 11, 456, 307, 586, 11, 558, 586, 11, 257, 2167, 19261, 21762, 10336, 11, 51326], "temperature": 0.0, "avg_logprob": -0.18044285547165645, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.067361019551754}, {"id": 113, "seek": 55520, "start": 574.44, "end": 580.12, "text": " we just employ that one, so that we don't need to create a real buffer.", "tokens": [51326, 321, 445, 3188, 300, 472, 11, 370, 300, 321, 500, 380, 643, 281, 1884, 257, 957, 21762, 13, 51610], "temperature": 0.0, "avg_logprob": -0.18044285547165645, "compression_ratio": 1.6861702127659575, "no_speech_prob": 0.067361019551754}, {"id": 114, "seek": 58012, "start": 580.12, "end": 588.68, "text": " At first, when nothing was there, we were just clearing a buffer to a certain color,", "tokens": [50364, 1711, 700, 11, 562, 1825, 390, 456, 11, 321, 645, 445, 23937, 257, 21762, 281, 257, 1629, 2017, 11, 50792], "temperature": 0.0, "avg_logprob": -0.20528370993477957, "compression_ratio": 1.4825870646766168, "no_speech_prob": 0.028484664857387543}, {"id": 115, "seek": 58012, "start": 588.68, "end": 591.36, "text": " but that's not really efficient.", "tokens": [50792, 457, 300, 311, 406, 534, 7148, 13, 50926], "temperature": 0.0, "avg_logprob": -0.20528370993477957, "compression_ratio": 1.4825870646766168, "no_speech_prob": 0.028484664857387543}, {"id": 116, "seek": 58012, "start": 591.36, "end": 599.0, "text": " Yeah, why we also needed to pass this kind of round-end corner and clipping information?", "tokens": [50926, 865, 11, 983, 321, 611, 2978, 281, 1320, 341, 733, 295, 3098, 12, 521, 4538, 293, 49320, 1589, 30, 51308], "temperature": 0.0, "avg_logprob": -0.20528370993477957, "compression_ratio": 1.4825870646766168, "no_speech_prob": 0.028484664857387543}, {"id": 117, "seek": 58012, "start": 599.0, "end": 607.84, "text": " And the reason to that one is basically because when Hromo sends, it thrusterizes the quads", "tokens": [51308, 400, 264, 1778, 281, 300, 472, 307, 1936, 570, 562, 389, 4397, 78, 14790, 11, 309, 739, 8393, 5660, 264, 421, 5834, 51750], "temperature": 0.0, "avg_logprob": -0.20528370993477957, "compression_ratio": 1.4825870646766168, "no_speech_prob": 0.028484664857387543}, {"id": 118, "seek": 60784, "start": 607.84, "end": 611.76, "text": " to the textures, those do not have any masks, right?", "tokens": [50364, 281, 264, 24501, 11, 729, 360, 406, 362, 604, 11830, 11, 558, 30, 50560], "temperature": 0.0, "avg_logprob": -0.1672927454898232, "compression_ratio": 1.5524861878453038, "no_speech_prob": 0.012924998998641968}, {"id": 119, "seek": 60784, "start": 611.76, "end": 620.4, "text": " So when we do the final compositing step, we apply those mask filters and so on and send", "tokens": [50560, 407, 562, 321, 360, 264, 2572, 10199, 1748, 1823, 11, 321, 3079, 729, 6094, 15995, 293, 370, 322, 293, 2845, 50992], "temperature": 0.0, "avg_logprob": -0.1672927454898232, "compression_ratio": 1.5524861878453038, "no_speech_prob": 0.012924998998641968}, {"id": 120, "seek": 60784, "start": 620.4, "end": 625.52, "text": " them to Skiya, which does the final picture for us.", "tokens": [50992, 552, 281, 318, 2984, 3016, 11, 597, 775, 264, 2572, 3036, 337, 505, 13, 51248], "temperature": 0.0, "avg_logprob": -0.1672927454898232, "compression_ratio": 1.5524861878453038, "no_speech_prob": 0.012924998998641968}, {"id": 121, "seek": 60784, "start": 625.52, "end": 634.2800000000001, "text": " And for the pixel precision, the problem is that Hromo basically works with the pixels,", "tokens": [51248, 400, 337, 264, 19261, 18356, 11, 264, 1154, 307, 300, 389, 4397, 78, 1936, 1985, 365, 264, 18668, 11, 51686], "temperature": 0.0, "avg_logprob": -0.1672927454898232, "compression_ratio": 1.5524861878453038, "no_speech_prob": 0.012924998998641968}, {"id": 122, "seek": 63428, "start": 634.28, "end": 641.24, "text": " and as long as Weyland uses deeps, it resulted in some pixels losses.", "tokens": [50364, 293, 382, 938, 382, 492, 88, 1661, 4960, 2452, 82, 11, 309, 18753, 294, 512, 18668, 15352, 13, 50712], "temperature": 0.0, "avg_logprob": -0.19182779648724724, "compression_ratio": 1.5395348837209302, "no_speech_prob": 0.03258323296904564}, {"id": 123, "seek": 63428, "start": 641.24, "end": 647.9599999999999, "text": " And when it was compositing the quads together, we could see some of the glitches.", "tokens": [50712, 400, 562, 309, 390, 10199, 1748, 264, 421, 5834, 1214, 11, 321, 727, 536, 512, 295, 264, 23552, 279, 13, 51048], "temperature": 0.0, "avg_logprob": -0.19182779648724724, "compression_ratio": 1.5395348837209302, "no_speech_prob": 0.03258323296904564}, {"id": 124, "seek": 63428, "start": 647.9599999999999, "end": 656.4399999999999, "text": " For that, to overcome that, we actually added some additional stuff to the surface segmenter", "tokens": [51048, 1171, 300, 11, 281, 10473, 300, 11, 321, 767, 3869, 512, 4497, 1507, 281, 264, 3753, 9469, 260, 51472], "temperature": 0.0, "avg_logprob": -0.19182779648724724, "compression_ratio": 1.5395348837209302, "no_speech_prob": 0.03258323296904564}, {"id": 125, "seek": 63428, "start": 656.4399999999999, "end": 663.4, "text": " and started to pass this information using VLFixed, basically, which allows us to use", "tokens": [51472, 293, 1409, 281, 1320, 341, 1589, 1228, 691, 43, 37, 40303, 11, 1936, 11, 597, 4045, 505, 281, 764, 51820], "temperature": 0.0, "avg_logprob": -0.19182779648724724, "compression_ratio": 1.5395348837209302, "no_speech_prob": 0.03258323296904564}, {"id": 126, "seek": 66340, "start": 663.4, "end": 665.16, "text": " some floating wallets.", "tokens": [50364, 512, 12607, 2929, 1385, 13, 50452], "temperature": 0.0, "avg_logprob": -0.2661119302113851, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.10267867892980576}, {"id": 127, "seek": 66340, "start": 665.16, "end": 672.92, "text": " It was also required to update the VP port, this destination, and some of the other stuff,", "tokens": [50452, 467, 390, 611, 4739, 281, 5623, 264, 35812, 2436, 11, 341, 12236, 11, 293, 512, 295, 264, 661, 1507, 11, 50840], "temperature": 0.0, "avg_logprob": -0.2661119302113851, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.10267867892980576}, {"id": 128, "seek": 66340, "start": 672.92, "end": 680.16, "text": " like setting trust form, setting trusted damage, because when we, for example, change the order", "tokens": [50840, 411, 3287, 3361, 1254, 11, 3287, 16034, 4344, 11, 570, 562, 321, 11, 337, 1365, 11, 1319, 264, 1668, 51202], "temperature": 0.0, "avg_logprob": -0.2661119302113851, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.10267867892980576}, {"id": 129, "seek": 66340, "start": 680.16, "end": 688.48, "text": " of the Weyland subsurface, this Z-order, at some point, we don't need to recalculate the", "tokens": [51202, 295, 264, 492, 88, 1661, 2090, 374, 2868, 11, 341, 1176, 12, 4687, 11, 412, 512, 935, 11, 321, 500, 380, 643, 281, 850, 304, 2444, 473, 264, 51618], "temperature": 0.0, "avg_logprob": -0.2661119302113851, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.10267867892980576}, {"id": 130, "seek": 66340, "start": 688.48, "end": 691.0799999999999, "text": " damage or do we need to recalculate that?", "tokens": [51618, 4344, 420, 360, 321, 643, 281, 850, 304, 2444, 473, 300, 30, 51748], "temperature": 0.0, "avg_logprob": -0.2661119302113851, "compression_ratio": 1.6504854368932038, "no_speech_prob": 0.10267867892980576}, {"id": 131, "seek": 69108, "start": 691.08, "end": 696.2800000000001, "text": " So basically, all that is managed with this additional fact.", "tokens": [50364, 407, 1936, 11, 439, 300, 307, 6453, 365, 341, 4497, 1186, 13, 50624], "temperature": 0.0, "avg_logprob": -0.19333747915319494, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.06777141988277435}, {"id": 132, "seek": 69108, "start": 696.2800000000001, "end": 702.5200000000001, "text": " And there can be some other stuff, but I would say that was the most important one.", "tokens": [50624, 400, 456, 393, 312, 512, 661, 1507, 11, 457, 286, 576, 584, 300, 390, 264, 881, 1021, 472, 13, 50936], "temperature": 0.0, "avg_logprob": -0.19333747915319494, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.06777141988277435}, {"id": 133, "seek": 69108, "start": 702.5200000000001, "end": 708.24, "text": " And so this is the big picture how everything is implemented.", "tokens": [50936, 400, 370, 341, 307, 264, 955, 3036, 577, 1203, 307, 12270, 13, 51222], "temperature": 0.0, "avg_logprob": -0.19333747915319494, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.06777141988277435}, {"id": 134, "seek": 69108, "start": 708.24, "end": 713.96, "text": " So we have, like, on the top, Lacros viz process and the Lacros browser.", "tokens": [51222, 407, 321, 362, 11, 411, 11, 322, 264, 1192, 11, 40113, 2635, 371, 590, 1399, 293, 264, 40113, 2635, 11185, 13, 51508], "temperature": 0.0, "avg_logprob": -0.19333747915319494, "compression_ratio": 1.508108108108108, "no_speech_prob": 0.06777141988277435}, {"id": 135, "seek": 71396, "start": 713.96, "end": 721.64, "text": " So Lacros viz is basically preparing the frame with the quads and sends over the Weyland", "tokens": [50364, 407, 40113, 2635, 371, 590, 307, 1936, 10075, 264, 3920, 365, 264, 421, 5834, 293, 14790, 670, 264, 492, 88, 1661, 50748], "temperature": 0.0, "avg_logprob": -0.16001594634283156, "compression_ratio": 1.6594594594594594, "no_speech_prob": 0.163621187210083}, {"id": 136, "seek": 71396, "start": 721.64, "end": 730.9200000000001, "text": " to the ashram, which then creates the same compositor frame as Lacros would have if it", "tokens": [50748, 281, 264, 382, 1703, 335, 11, 597, 550, 7829, 264, 912, 10199, 3029, 3920, 382, 40113, 2635, 576, 362, 498, 309, 51212], "temperature": 0.0, "avg_logprob": -0.16001594634283156, "compression_ratio": 1.6594594594594594, "no_speech_prob": 0.163621187210083}, {"id": 137, "seek": 71396, "start": 730.9200000000001, "end": 736.12, "text": " wasn't delegating but was compositing itself.", "tokens": [51212, 2067, 380, 15824, 990, 457, 390, 10199, 1748, 2564, 13, 51472], "temperature": 0.0, "avg_logprob": -0.16001594634283156, "compression_ratio": 1.6594594594594594, "no_speech_prob": 0.163621187210083}, {"id": 138, "seek": 71396, "start": 736.12, "end": 741.24, "text": " Prepares the final frame, prepares the overlay and sends it to the DRM and that's it.", "tokens": [51472, 6001, 4306, 495, 264, 2572, 3920, 11, 39418, 264, 31741, 293, 14790, 309, 281, 264, 12118, 44, 293, 300, 311, 309, 13, 51728], "temperature": 0.0, "avg_logprob": -0.16001594634283156, "compression_ratio": 1.6594594594594594, "no_speech_prob": 0.163621187210083}, {"id": 139, "seek": 74124, "start": 741.24, "end": 751.04, "text": " You have the final frame with the system UI and the browser content as well.", "tokens": [50364, 509, 362, 264, 2572, 3920, 365, 264, 1185, 15682, 293, 264, 11185, 2701, 382, 731, 13, 50854], "temperature": 0.0, "avg_logprob": -0.44204684001643485, "compression_ratio": 1.1142857142857143, "no_speech_prob": 0.47150373458862305}, {"id": 140, "seek": 74124, "start": 751.04, "end": 753.04, "text": " That's it.", "tokens": [50854, 663, 311, 309, 13, 50954], "temperature": 0.0, "avg_logprob": -0.44204684001643485, "compression_ratio": 1.1142857142857143, "no_speech_prob": 0.47150373458862305}, {"id": 141, "seek": 74124, "start": 753.04, "end": 754.04, "text": " Questions?", "tokens": [50954, 27738, 30, 51004], "temperature": 0.0, "avg_logprob": -0.44204684001643485, "compression_ratio": 1.1142857142857143, "no_speech_prob": 0.47150373458862305}, {"id": 142, "seek": 74124, "start": 754.04, "end": 757.04, "text": " No, go ahead.", "tokens": [51004, 883, 11, 352, 2286, 13, 51154], "temperature": 0.0, "avg_logprob": -0.44204684001643485, "compression_ratio": 1.1142857142857143, "no_speech_prob": 0.47150373458862305}, {"id": 143, "seek": 74124, "start": 757.04, "end": 758.04, "text": " Yes?", "tokens": [51154, 1079, 30, 51204], "temperature": 0.0, "avg_logprob": -0.44204684001643485, "compression_ratio": 1.1142857142857143, "no_speech_prob": 0.47150373458862305}, {"id": 144, "seek": 75804, "start": 758.04, "end": 781.8399999999999, "text": " Well, I can just repeat the question.", "tokens": [50364, 1042, 11, 286, 393, 445, 7149, 264, 1168, 13, 51554], "temperature": 0.0, "avg_logprob": -0.8163074346689078, "compression_ratio": 0.8222222222222222, "no_speech_prob": 0.08834606409072876}, {"id": 145, "seek": 78184, "start": 781.84, "end": 793.52, "text": " Okay, so the question was whether the GTK and QT can also benefit from that.", "tokens": [50364, 1033, 11, 370, 264, 1168, 390, 1968, 264, 17530, 42, 293, 1249, 51, 393, 611, 5121, 490, 300, 13, 50948], "temperature": 0.0, "avg_logprob": -0.4258896067172666, "compression_ratio": 1.3936170212765957, "no_speech_prob": 0.330708384513855}, {"id": 146, "seek": 78184, "start": 793.52, "end": 797.1600000000001, "text": " Do you mean the Chromium browser or you mean itself?", "tokens": [50948, 1144, 291, 914, 264, 1721, 298, 2197, 11185, 420, 291, 914, 2564, 30, 51130], "temperature": 0.0, "avg_logprob": -0.4258896067172666, "compression_ratio": 1.3936170212765957, "no_speech_prob": 0.330708384513855}, {"id": 147, "seek": 78184, "start": 797.1600000000001, "end": 803.84, "text": " No, just regular apps using GTK or QT.", "tokens": [51130, 883, 11, 445, 3890, 7733, 1228, 17530, 42, 420, 1249, 51, 13, 51464], "temperature": 0.0, "avg_logprob": -0.4258896067172666, "compression_ratio": 1.3936170212765957, "no_speech_prob": 0.330708384513855}, {"id": 148, "seek": 78184, "start": 803.84, "end": 805.72, "text": " Yeah, I think so.", "tokens": [51464, 865, 11, 286, 519, 370, 13, 51558], "temperature": 0.0, "avg_logprob": -0.4258896067172666, "compression_ratio": 1.3936170212765957, "no_speech_prob": 0.330708384513855}, {"id": 149, "seek": 78184, "start": 805.72, "end": 809.2800000000001, "text": " Basically, if it's possible to have the double compositing, it is possible.", "tokens": [51558, 8537, 11, 498, 309, 311, 1944, 281, 362, 264, 3834, 10199, 1748, 11, 309, 307, 1944, 13, 51736], "temperature": 0.0, "avg_logprob": -0.4258896067172666, "compression_ratio": 1.3936170212765957, "no_speech_prob": 0.330708384513855}, {"id": 150, "seek": 80928, "start": 809.76, "end": 819.4, "text": " We had to use some additional protocols because as long as Chromo is a really closed environment,", "tokens": [50388, 492, 632, 281, 764, 512, 4497, 20618, 570, 382, 938, 382, 1721, 13395, 307, 257, 534, 5395, 2823, 11, 50870], "temperature": 0.0, "avg_logprob": -0.2993086262753135, "compression_ratio": 1.5606060606060606, "no_speech_prob": 0.2747160792350769}, {"id": 151, "seek": 80928, "start": 819.4, "end": 824.4399999999999, "text": " we can do whatever is possible, whatever is convenient for us.", "tokens": [50870, 321, 393, 360, 2035, 307, 1944, 11, 2035, 307, 10851, 337, 505, 13, 51122], "temperature": 0.0, "avg_logprob": -0.2993086262753135, "compression_ratio": 1.5606060606060606, "no_speech_prob": 0.2747160792350769}, {"id": 152, "seek": 80928, "start": 824.4399999999999, "end": 832.36, "text": " But I think that is possible for the GTK and get this improvement of the performance as", "tokens": [51122, 583, 286, 519, 300, 307, 1944, 337, 264, 17530, 42, 293, 483, 341, 10444, 295, 264, 3389, 382, 51518], "temperature": 0.0, "avg_logprob": -0.2993086262753135, "compression_ratio": 1.5606060606060606, "no_speech_prob": 0.2747160792350769}, {"id": 153, "seek": 80928, "start": 832.36, "end": 836.4, "text": " well because if the Weyland compositor can do that, why not?", "tokens": [51518, 731, 570, 498, 264, 492, 88, 1661, 10199, 3029, 393, 360, 300, 11, 983, 406, 30, 51720], "temperature": 0.0, "avg_logprob": -0.2993086262753135, "compression_ratio": 1.5606060606060606, "no_speech_prob": 0.2747160792350769}, {"id": 154, "seek": 83640, "start": 837.4, "end": 843.92, "text": " Yeah, basically in similar direction, but the Chromium on a regular Linux Weyland compositor,", "tokens": [50414, 865, 11, 1936, 294, 2531, 3513, 11, 457, 264, 1721, 298, 2197, 322, 257, 3890, 18734, 492, 88, 1661, 10199, 3029, 11, 50740], "temperature": 0.0, "avg_logprob": -0.34978661886075646, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.028355050832033157}, {"id": 155, "seek": 83640, "start": 843.92, "end": 849.72, "text": " I mean, that would benefit from such features as well.", "tokens": [50740, 286, 914, 11, 300, 576, 5121, 490, 1270, 4122, 382, 731, 13, 51030], "temperature": 0.0, "avg_logprob": -0.34978661886075646, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.028355050832033157}, {"id": 156, "seek": 83640, "start": 849.72, "end": 852.16, "text": " I mean, there is double compositing again.", "tokens": [51030, 286, 914, 11, 456, 307, 3834, 10199, 1748, 797, 13, 51152], "temperature": 0.0, "avg_logprob": -0.34978661886075646, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.028355050832033157}, {"id": 157, "seek": 83640, "start": 852.16, "end": 859.48, "text": " So, have you looked at getting up to or generic protocols to manage that?", "tokens": [51152, 407, 11, 362, 291, 2956, 412, 1242, 493, 281, 420, 19577, 20618, 281, 3067, 300, 30, 51518], "temperature": 0.0, "avg_logprob": -0.34978661886075646, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.028355050832033157}, {"id": 158, "seek": 83640, "start": 859.48, "end": 862.88, "text": " So, now you have custom protocols, right?", "tokens": [51518, 407, 11, 586, 291, 362, 2375, 20618, 11, 558, 30, 51688], "temperature": 0.0, "avg_logprob": -0.34978661886075646, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.028355050832033157}, {"id": 159, "seek": 86288, "start": 862.88, "end": 868.2, "text": " But for it to work on a regular Linux Uniday, yeah, a generic protocol.", "tokens": [50364, 583, 337, 309, 281, 589, 322, 257, 3890, 18734, 1156, 327, 320, 11, 1338, 11, 257, 19577, 10336, 13, 50630], "temperature": 0.0, "avg_logprob": -0.35903035677396333, "compression_ratio": 1.46448087431694, "no_speech_prob": 0.013942399993538857}, {"id": 160, "seek": 86288, "start": 868.2, "end": 870.04, "text": " Do you look at doing that?", "tokens": [50630, 1144, 291, 574, 412, 884, 300, 30, 50722], "temperature": 0.0, "avg_logprob": -0.35903035677396333, "compression_ratio": 1.46448087431694, "no_speech_prob": 0.013942399993538857}, {"id": 161, "seek": 86288, "start": 870.04, "end": 876.68, "text": " So the question is basically about if Chromium Linux can benefit from the same implementation", "tokens": [50722, 407, 264, 1168, 307, 1936, 466, 498, 1721, 298, 2197, 18734, 393, 5121, 490, 264, 912, 11420, 51054], "temperature": 0.0, "avg_logprob": -0.35903035677396333, "compression_ratio": 1.46448087431694, "no_speech_prob": 0.013942399993538857}, {"id": 162, "seek": 86288, "start": 876.68, "end": 885.64, "text": " and whether we considered creating some generic protocol and upstream that.", "tokens": [51054, 293, 1968, 321, 4888, 4084, 512, 19577, 10336, 293, 33915, 300, 13, 51502], "temperature": 0.0, "avg_logprob": -0.35903035677396333, "compression_ratio": 1.46448087431694, "no_speech_prob": 0.013942399993538857}, {"id": 163, "seek": 88564, "start": 885.64, "end": 899.16, "text": " Well, if we get back to this pixel precision and the rounding corners, for the pixel precision,", "tokens": [50364, 1042, 11, 498, 321, 483, 646, 281, 341, 19261, 18356, 293, 264, 48237, 12413, 11, 337, 264, 19261, 18356, 11, 51040], "temperature": 0.0, "avg_logprob": -0.2245136842889301, "compression_ratio": 1.4589041095890412, "no_speech_prob": 0.014211396686732769}, {"id": 164, "seek": 88564, "start": 899.16, "end": 904.84, "text": " if the browser doesn't work in some custom scale, it's one, right?", "tokens": [51040, 498, 264, 11185, 1177, 380, 589, 294, 512, 2375, 4373, 11, 309, 311, 472, 11, 558, 30, 51324], "temperature": 0.0, "avg_logprob": -0.2245136842889301, "compression_ratio": 1.4589041095890412, "no_speech_prob": 0.014211396686732769}, {"id": 165, "seek": 88564, "start": 904.84, "end": 907.6, "text": " So it's fine, we don't need this kind of protocol.", "tokens": [51324, 407, 309, 311, 2489, 11, 321, 500, 380, 643, 341, 733, 295, 10336, 13, 51462], "temperature": 0.0, "avg_logprob": -0.2245136842889301, "compression_ratio": 1.4589041095890412, "no_speech_prob": 0.014211396686732769}, {"id": 166, "seek": 90760, "start": 907.6, "end": 915.36, "text": " But for the rounded corners, well, probably we could do something like do this processing", "tokens": [50364, 583, 337, 264, 23382, 12413, 11, 731, 11, 1391, 321, 727, 360, 746, 411, 360, 341, 9007, 50752], "temperature": 0.0, "avg_logprob": -0.22753730861619972, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.02760537900030613}, {"id": 167, "seek": 90760, "start": 915.36, "end": 919.36, "text": " on the Chromium side, but it's not very efficient, right?", "tokens": [50752, 322, 264, 1721, 298, 2197, 1252, 11, 457, 309, 311, 406, 588, 7148, 11, 558, 30, 50952], "temperature": 0.0, "avg_logprob": -0.22753730861619972, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.02760537900030613}, {"id": 168, "seek": 90760, "start": 919.36, "end": 927.88, "text": " Well, it should be possible, but creating a protocol and upstreaming that, it will take", "tokens": [50952, 1042, 11, 309, 820, 312, 1944, 11, 457, 4084, 257, 10336, 293, 33915, 278, 300, 11, 309, 486, 747, 51378], "temperature": 0.0, "avg_logprob": -0.22753730861619972, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.02760537900030613}, {"id": 169, "seek": 90760, "start": 927.88, "end": 930.16, "text": " some quite some time.", "tokens": [51378, 512, 1596, 512, 565, 13, 51492], "temperature": 0.0, "avg_logprob": -0.22753730861619972, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.02760537900030613}, {"id": 170, "seek": 90760, "start": 930.16, "end": 936.6, "text": " I personally did not thought about that, but it's an interesting concept for the future,", "tokens": [51492, 286, 5665, 630, 406, 1194, 466, 300, 11, 457, 309, 311, 364, 1880, 3410, 337, 264, 2027, 11, 51814], "temperature": 0.0, "avg_logprob": -0.22753730861619972, "compression_ratio": 1.5871559633027523, "no_speech_prob": 0.02760537900030613}, {"id": 171, "seek": 93660, "start": 936.6, "end": 937.6, "text": " of course.", "tokens": [50364, 295, 1164, 13, 50414], "temperature": 0.0, "avg_logprob": -0.31416880699896044, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.19671066105365753}, {"id": 172, "seek": 93660, "start": 937.6, "end": 944.24, "text": " I mean, especially for embedded, it can also help if you, I'm guessing part of the subsurface", "tokens": [50414, 286, 914, 11, 2318, 337, 16741, 11, 309, 393, 611, 854, 498, 291, 11, 286, 478, 17939, 644, 295, 264, 2090, 374, 2868, 50746], "temperature": 0.0, "avg_logprob": -0.31416880699896044, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.19671066105365753}, {"id": 173, "seek": 93660, "start": 944.24, "end": 948.52, "text": " is offered, for example, the video in the browser.", "tokens": [50746, 307, 8059, 11, 337, 1365, 11, 264, 960, 294, 264, 11185, 13, 50960], "temperature": 0.0, "avg_logprob": -0.31416880699896044, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.19671066105365753}, {"id": 174, "seek": 93660, "start": 948.52, "end": 956.9200000000001, "text": " If the compositor on the embedded device can then put that video on the plane, the rest", "tokens": [50960, 759, 264, 10199, 3029, 322, 264, 16741, 4302, 393, 550, 829, 300, 960, 322, 264, 5720, 11, 264, 1472, 51380], "temperature": 0.0, "avg_logprob": -0.31416880699896044, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.19671066105365753}, {"id": 175, "seek": 93660, "start": 956.9200000000001, "end": 961.08, "text": " is not branded, then you can benefit from these kind of things much more easily.", "tokens": [51380, 307, 406, 38510, 11, 550, 291, 393, 5121, 490, 613, 733, 295, 721, 709, 544, 3612, 13, 51588], "temperature": 0.0, "avg_logprob": -0.31416880699896044, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.19671066105365753}, {"id": 176, "seek": 93660, "start": 961.08, "end": 962.08, "text": " Yes, of course.", "tokens": [51588, 1079, 11, 295, 1164, 13, 51638], "temperature": 0.0, "avg_logprob": -0.31416880699896044, "compression_ratio": 1.619047619047619, "no_speech_prob": 0.19671066105365753}, {"id": 177, "seek": 96208, "start": 962.08, "end": 967.24, "text": " Do you delegate all the compositing and the compositor can decide what to put on the plane?", "tokens": [50364, 1144, 291, 40999, 439, 264, 10199, 1748, 293, 264, 10199, 3029, 393, 4536, 437, 281, 829, 322, 264, 5720, 30, 50622], "temperature": 0.0, "avg_logprob": -0.43677022197459003, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.037726741284132004}, {"id": 178, "seek": 96208, "start": 967.24, "end": 972.1600000000001, "text": " Well, at least we can submit this video frame as an overlay.", "tokens": [50622, 1042, 11, 412, 1935, 321, 393, 10315, 341, 960, 3920, 382, 364, 31741, 13, 50868], "temperature": 0.0, "avg_logprob": -0.43677022197459003, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.037726741284132004}, {"id": 179, "seek": 96208, "start": 972.1600000000001, "end": 980.9200000000001, "text": " If I'm not mistaken, there was a, from somebody doing this, this forwarding Chromium, if I'm", "tokens": [50868, 759, 286, 478, 406, 21333, 11, 456, 390, 257, 11, 490, 2618, 884, 341, 11, 341, 2128, 278, 1721, 298, 2197, 11, 498, 286, 478, 51306], "temperature": 0.0, "avg_logprob": -0.43677022197459003, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.037726741284132004}, {"id": 180, "seek": 96208, "start": 980.9200000000001, "end": 983.6, "text": " not mistaken, I actually saw this by the patches.", "tokens": [51306, 406, 21333, 11, 286, 767, 1866, 341, 538, 264, 26531, 13, 51440], "temperature": 0.0, "avg_logprob": -0.43677022197459003, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.037726741284132004}, {"id": 181, "seek": 96208, "start": 983.6, "end": 988.0, "text": " I think that landed from the problem later.", "tokens": [51440, 286, 519, 300, 15336, 490, 264, 1154, 1780, 13, 51660], "temperature": 0.0, "avg_logprob": -0.43677022197459003, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.037726741284132004}, {"id": 182, "seek": 96208, "start": 988.0, "end": 989.76, "text": " Yeah, probably, probably, yes.", "tokens": [51660, 865, 11, 1391, 11, 1391, 11, 2086, 13, 51748], "temperature": 0.0, "avg_logprob": -0.43677022197459003, "compression_ratio": 1.6591928251121075, "no_speech_prob": 0.037726741284132004}, {"id": 183, "seek": 98976, "start": 989.88, "end": 991.68, "text": " I didn't pay attention to that.", "tokens": [50370, 286, 994, 380, 1689, 3202, 281, 300, 13, 50460], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 184, "seek": 98976, "start": 991.68, "end": 993.48, "text": " I was busy with the Chromium itself.", "tokens": [50460, 286, 390, 5856, 365, 264, 1721, 298, 2197, 2564, 13, 50550], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 185, "seek": 98976, "start": 993.48, "end": 994.48, "text": " Yeah.", "tokens": [50550, 865, 13, 50600], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 186, "seek": 98976, "start": 994.48, "end": 995.48, "text": " Yes.", "tokens": [50600, 1079, 13, 50650], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 187, "seek": 98976, "start": 995.48, "end": 998.48, "text": " What's the granularity of these subsurances?", "tokens": [50650, 708, 311, 264, 39962, 507, 295, 613, 2090, 374, 2676, 30, 50800], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 188, "seek": 98976, "start": 998.48, "end": 1003.48, "text": " Like, how many would you expect to have on a regular webpage?", "tokens": [50800, 1743, 11, 577, 867, 576, 291, 2066, 281, 362, 322, 257, 3890, 37852, 30, 51050], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 189, "seek": 98976, "start": 1003.48, "end": 1011.48, "text": " Are we talking like almost every screen element or is it the more hard to think?", "tokens": [51050, 2014, 321, 1417, 411, 1920, 633, 2568, 4478, 420, 307, 309, 264, 544, 1152, 281, 519, 30, 51450], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 190, "seek": 98976, "start": 1011.48, "end": 1014.48, "text": " Are you compared to like CIL?", "tokens": [51450, 2014, 291, 5347, 281, 411, 383, 4620, 30, 51600], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 191, "seek": 98976, "start": 1014.48, "end": 1018.48, "text": " Well, if you just take a normal page, right?", "tokens": [51600, 1042, 11, 498, 291, 445, 747, 257, 2710, 3028, 11, 558, 30, 51800], "temperature": 0.0, "avg_logprob": -0.49254311048067534, "compression_ratio": 1.4741379310344827, "no_speech_prob": 0.07866566628217697}, {"id": 192, "seek": 101848, "start": 1019.2, "end": 1025.52, "text": " So, the question is how many subsurances we are going to have, I mean, how the page is", "tokens": [50400, 407, 11, 264, 1168, 307, 577, 867, 2090, 374, 2676, 321, 366, 516, 281, 362, 11, 286, 914, 11, 577, 264, 3028, 307, 50716], "temperature": 0.0, "avg_logprob": -0.2943677354132992, "compression_ratio": 1.5751295336787565, "no_speech_prob": 0.0030506534967571497}, {"id": 193, "seek": 101848, "start": 1025.52, "end": 1033.04, "text": " itself like divided, whether we are going to have each, for the each element, sub-sub-surface", "tokens": [50716, 2564, 411, 6666, 11, 1968, 321, 366, 516, 281, 362, 1184, 11, 337, 264, 1184, 4478, 11, 1422, 12, 30131, 12, 36054, 2868, 51092], "temperature": 0.0, "avg_logprob": -0.2943677354132992, "compression_ratio": 1.5751295336787565, "no_speech_prob": 0.0030506534967571497}, {"id": 194, "seek": 101848, "start": 1033.04, "end": 1036.2, "text": " or it's kind of done in other way.", "tokens": [51092, 420, 309, 311, 733, 295, 1096, 294, 661, 636, 13, 51250], "temperature": 0.0, "avg_logprob": -0.2943677354132992, "compression_ratio": 1.5751295336787565, "no_speech_prob": 0.0030506534967571497}, {"id": 195, "seek": 101848, "start": 1036.2, "end": 1045.16, "text": " Well, basically, if you imagine a page, right, as a simple page, there are no additional", "tokens": [51250, 1042, 11, 1936, 11, 498, 291, 3811, 257, 3028, 11, 558, 11, 382, 257, 2199, 3028, 11, 456, 366, 572, 4497, 51698], "temperature": 0.0, "avg_logprob": -0.2943677354132992, "compression_ratio": 1.5751295336787565, "no_speech_prob": 0.0030506534967571497}, {"id": 196, "seek": 104516, "start": 1045.2, "end": 1050.72, "text": " textures and so on, we can split the page to the tiles, like there will be, I don't", "tokens": [50366, 24501, 293, 370, 322, 11, 321, 393, 7472, 264, 3028, 281, 264, 21982, 11, 411, 456, 486, 312, 11, 286, 500, 380, 50642], "temperature": 0.0, "avg_logprob": -0.23052348120737884, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.035050421953201294}, {"id": 197, "seek": 104516, "start": 1050.72, "end": 1054.76, "text": " know how many, maybe six tiles, something like that.", "tokens": [50642, 458, 577, 867, 11, 1310, 2309, 21982, 11, 746, 411, 300, 13, 50844], "temperature": 0.0, "avg_logprob": -0.23052348120737884, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.035050421953201294}, {"id": 198, "seek": 104516, "start": 1054.76, "end": 1057.68, "text": " So, basically, this is how much you are going to send.", "tokens": [50844, 407, 11, 1936, 11, 341, 307, 577, 709, 291, 366, 516, 281, 2845, 13, 50990], "temperature": 0.0, "avg_logprob": -0.23052348120737884, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.035050421953201294}, {"id": 199, "seek": 104516, "start": 1057.68, "end": 1063.68, "text": " But if you take like, for example, motion mark, right, there are some tests, like images", "tokens": [50990, 583, 498, 291, 747, 411, 11, 337, 1365, 11, 5394, 1491, 11, 558, 11, 456, 366, 512, 6921, 11, 411, 5267, 51290], "temperature": 0.0, "avg_logprob": -0.23052348120737884, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.035050421953201294}, {"id": 200, "seek": 104516, "start": 1063.68, "end": 1068.0400000000002, "text": " tests, it can create hundreds of those textures.", "tokens": [51290, 6921, 11, 309, 393, 1884, 6779, 295, 729, 24501, 13, 51508], "temperature": 0.0, "avg_logprob": -0.23052348120737884, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.035050421953201294}, {"id": 201, "seek": 104516, "start": 1068.0400000000002, "end": 1072.4, "text": " Then we are starting to send all of them over the pipe.", "tokens": [51508, 1396, 321, 366, 2891, 281, 2845, 439, 295, 552, 670, 264, 11240, 13, 51726], "temperature": 0.0, "avg_logprob": -0.23052348120737884, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.035050421953201294}, {"id": 202, "seek": 104516, "start": 1072.4, "end": 1073.88, "text": " But there is a limit for the IPC.", "tokens": [51726, 583, 456, 307, 257, 4948, 337, 264, 8671, 34, 13, 51800], "temperature": 0.0, "avg_logprob": -0.23052348120737884, "compression_ratio": 1.6626984126984128, "no_speech_prob": 0.035050421953201294}, {"id": 203, "seek": 107388, "start": 1074.0800000000002, "end": 1078.4, "text": " So, we have to limit this, the number of quads that we are able to send.", "tokens": [50374, 407, 11, 321, 362, 281, 4948, 341, 11, 264, 1230, 295, 421, 5834, 300, 321, 366, 1075, 281, 2845, 13, 50590], "temperature": 0.0, "avg_logprob": -0.19671211242675782, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.01272803544998169}, {"id": 204, "seek": 107388, "start": 1078.4, "end": 1082.48, "text": " And if I'm not mistaken, it's limited right now to 50.", "tokens": [50590, 400, 498, 286, 478, 406, 21333, 11, 309, 311, 5567, 558, 586, 281, 2625, 13, 50794], "temperature": 0.0, "avg_logprob": -0.19671211242675782, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.01272803544998169}, {"id": 205, "seek": 107388, "start": 1082.48, "end": 1088.0400000000002, "text": " Because after this while you, it just doesn't make sense to do any delegation.", "tokens": [50794, 1436, 934, 341, 1339, 291, 11, 309, 445, 1177, 380, 652, 2020, 281, 360, 604, 36602, 13, 51072], "temperature": 0.0, "avg_logprob": -0.19671211242675782, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.01272803544998169}, {"id": 206, "seek": 107388, "start": 1088.0400000000002, "end": 1093.48, "text": " It's kind of become too expensive in terms of, I mean, there will be too many subsurances.", "tokens": [51072, 467, 311, 733, 295, 1813, 886, 5124, 294, 2115, 295, 11, 286, 914, 11, 456, 486, 312, 886, 867, 2090, 374, 2676, 13, 51344], "temperature": 0.0, "avg_logprob": -0.19671211242675782, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.01272803544998169}, {"id": 207, "seek": 107388, "start": 1093.48, "end": 1098.3200000000002, "text": " If we could like squash this together, that would definitely help.", "tokens": [51344, 759, 321, 727, 411, 30725, 341, 1214, 11, 300, 576, 2138, 854, 13, 51586], "temperature": 0.0, "avg_logprob": -0.19671211242675782, "compression_ratio": 1.5294117647058822, "no_speech_prob": 0.01272803544998169}, {"id": 208, "seek": 109832, "start": 1098.32, "end": 1103.12, "text": " Because it seems like it wasn't like a use case that was thought when the", "tokens": [50364, 1436, 309, 2544, 411, 309, 2067, 380, 411, 257, 764, 1389, 300, 390, 1194, 562, 264, 50604], "temperature": 0.0, "avg_logprob": -0.4726265149238782, "compression_ratio": 1.2547169811320755, "no_speech_prob": 0.009677181020379066}, {"id": 209, "seek": 109832, "start": 1103.12, "end": 1105.24, "text": " wheel and was designed.", "tokens": [50604, 5589, 293, 390, 4761, 13, 50710], "temperature": 0.0, "avg_logprob": -0.4726265149238782, "compression_ratio": 1.2547169811320755, "no_speech_prob": 0.009677181020379066}, {"id": 210, "seek": 109832, "start": 1108.4399999999998, "end": 1109.6, "text": " So, any other questions?", "tokens": [50870, 407, 11, 604, 661, 1651, 30, 50928], "temperature": 0.0, "avg_logprob": -0.4726265149238782, "compression_ratio": 1.2547169811320755, "no_speech_prob": 0.009677181020379066}, {"id": 211, "seek": 109832, "start": 1112.32, "end": 1112.72, "text": " Thank you.", "tokens": [51064, 1044, 291, 13, 51084], "temperature": 0.0, "avg_logprob": -0.4726265149238782, "compression_ratio": 1.2547169811320755, "no_speech_prob": 0.009677181020379066}], "language": "en"}