{"text": " All right. We are now going to get ready for the last talk of the NixOS Dev Room this year. We have on stage Julien and Kami, who are going to talk about an attended encrypted file system boots on NixOS, which everyone who encrypts their hard drives knows about that program of not being able to reboot remotely. So give them a round of applause. Thank you very much. So I'm Julien Malka and this is Kami Mondeau and we are both old students of Ecole Normale Superior and we did this during our studies a few months ago. So we are going to talk about Clevis and Tong on NixOS and I have to say and to thank NLNet for funding this new feature in NixOS. So the plan is we are going to motivate why it's interesting to have full disk encryption and remote servers. We are going to present Clevis, which is the automated encryption framework, given EAPDES view of the Tong protocol and then talk about our implementation and show you a demo. So full disk encryption of remote servers, of course, it looks like a good idea, like critical data or even non-critical data should be protected by full disk encryption nowadays. Problem is often more difficult to do it on servers because when you have full disk encryption you need to basically input your passphrase at boot and this requires physical intervention so it's a bit painful to reboot servers. One solution that is often used is spawning a SH server in Itardi. This way you can instead of having physical intervention you can just SH to your server and input your key and unlock your root partition and continue booting. But this still requires synchrony new intervention so if your server reboots for some reason that it was not planned and you are not awake or doing anything else your server actually doesn't reboot. So that's why I think this kind of solution is interesting. Okay, so before Julian dives in the Macalum-Rallye protocol we are going to present the Clevis automated encryption framework. So it's a project developed by the team Latchset which is basically just a big set of batch scripts wrapping around Jose which is the core encryption system and it's a pluggable framework for automated decryption. So there's the notion of PINs which is central is a plugin that implement automated decryption and to encrypt some data with Clevis, well you just have to do Clevis encrypt and then you write the PIN you want to use, the config, your plain text message and then you get a ciphered text in the format GWE. So the first kind of PIN you can use is TPM 2.0 PIN. So I don't know exactly how works the encryption using TPM but basically the, well Clevis first Jose first generates a key and then this key is used to encrypt the message and then this key is itself encrypted and using the key generated by the TPM and it will be decrypted the same way when Clevis needs to decrypt the message. So that's very useful if you require TPM 2.0 and not 1.2 for that to work and then the most useful kind of PIN is the TANG PIN which was designed by the same team of developers and so it's a server implementation providing services without the need for an X-Crow. So basically you do Clevis encrypt TANG and you precise the URL of your TANG server and this will encrypt your message using the protocol that Julien will describe to you later. And then there's Shamir secret sharing which is a combination of the, it's a way to break down a secret into multiple pieces and so there's the notion of threshold here it's T and its value is 2 and so you basically make a combination in your configuration of multiple PINs, the previous examples being TPM and TANG and here you see there's three PINs, one TPM and two TANG servers and the threshold is 2 so you have to have two working PINs in order to decrypt your secrets. Obviously at the encryption time you need a whole three PINs to be up. So Julien was explaining. Thank you Kami. I'm going to try to explain a bit how the TANG protocol works which might be, I'll try to explain it as simple as possible but this is extra extra for you. So basically the TANG protocol looks like the Diffielman key exchange. The Diffielman key exchange is something used to get a shared symmetric key between two actors on an unsecured channel and the idea is not that complicated. The idea is that you need to imagine that we have a mathematical operation star that is really, that is easy to compute so if I get two numbers A and B I can compute A star B but on the other hand super difficult to reverse so if I get C which is A star B it's very difficult to get A and B. And the idea is that we have also J which is a public parameter and the idea is that we have a server and the client that each generates a secret SNC and then they send their secret star J and then they both on their sides multiply by whatever they receive from the other side. So at the end on both sides they get C, JS and SJC which is the same thing so they get a shared key that they can use to encrypt their messages and talk with each other but somebody listening here cannot do the separation of these operations so it doesn't get any information. If the math is a little bit too abstract you can imagine this with paint. We have J which is the common paint then you have secret paints on each side they do the mixing of paints and they get each a color and from this color it's very difficult to find which paints were used to do the mixing then they send both their paints and add their secret to whatever they receive and they get a shared color which is like an analogy for the shared key. This is the if the Diffie-Eleman protocol used on the internet to devise a shared symmetric key to discuss with somebody and the Tongue protocol is derived from this so there is two sides of this. The first side is like the provisioning so it looks like Diffie-Eleman, they both generate the secret, the server sends J times its secret and the client sends nothing. The client computes what should be the shared key but doesn't send its secret to the server and so he divides the key, encodes whatever message he wants to encode with this key and then throws the key away. So at this point the client has an encrypted message, ciphertext but doesn't know how to decrypt it because it throws the key away. When he wants to decrypt it will do this. So it will generate a new secret E and send to the server J E plus J C. The server will take this and multiply by its secret and send it back to the client. At this point the client does this mathematical operation so whatever received minus J S E and this gives it another key that it used to decode the message. And here you have the math of why this works. So if we go Y minus J S E is X S minus J S E. X was J E plus J C so J E plus J C S and if you compute this it gives you J E S plus J C S minus J S E which gives J C S which is K. So with this manipulation it can find the original key again and decrypt the message. So what does it give us? So let's say an attacker gain access to the client. As I said at this point the client discarded the key only as a ciphertext cannot decrypt so you gain access to the client cannot do anything. Take access to the tongue server. Tongue server doesn't receive any information at no point in this protocol so you have access of the tongue server you cannot get the secret. And if you intercept all messages here and here because of what I said like the Diffiel Man assumption it is very hard to reverse these operations you also get no information. So basically the only way for an attacker to have the secret would be to get access of the client and the server at the same time or to be on the local network where you have your tongue server. That's the principle of how it works. Let's talk about the Nixxas implementation now. Okay thank you Julien for the theory. Now we're going to dive in the Nixxas implementation. You'll see that it's really simple. So if you have your Nixxas laptop with you you can do it live. If you don't well maybe install Nixxas. And so first you have to deploy your tongue module. So it was added by a Jeff Proch. Who is here by the way? And you can enable it with simply with services.tongue that's enabled. Then there's only one parameter really important is the IP address is allow which is critical because it defines the subnet that you trust because every machine on this subnet will have access to your tongue server. And if someone gets your secret.jw using only tongue well it can decipher it. So you put a network that you trust. Then you don't forget to open the firewall as I did a lot of time. So you can change the port. This is the default port in the Nixxas module but you can put it on port 80 if you want. So now you have your tongue server. Then the Clevis module it was packaged inside the init.rd already existed as a Clevis as an Insignix packages. So basically it works in init.rd both system dstage1 and scripted init.rd. So what it does is before decrypting the root partition well it tries to do Clevis decrypt with the secret.jwe which was put inside your init.rd secret. And if it succeeds then it pipes the value to decrypt the root partition and if it fails it falls back and interactive unlocking. So how now how to use it? First you have to generate the secret. So it's really easy you just type in your secret and you pipe it. Be careful because if you have a you will most certainly not have a return carriage inside your secret so you have to add a dash n when you pipe to Clevis. And then you write your Clevis configuration as we showed earlier. Then when you have your secret you can put it in your etc. in xy folder or in your flake and then you write this line which is booted in the Clevis devices. Then you put here the name of the device inside your file system dot slash root partition configuration. So it has to be the same name. And then well this works only if your root partition is encrypted using one of these three methods. The client has also a tpm 2.0 device and what we require. So first you type in your secret in a secret way so it goes to the secret environment variable. Then we state the config that we wrote previously in JSON format for Clevis. So you can see a threshold of 2 for a quick but just. Then you can pipe your secret to Clevis and creep the secret sharing and with the configuration that you use. Snow in post. So this means that the tongue servers have been reached so that's why you actually have to choose the sign in keys. Both tongue servers. So now you have your secret. You can try and decrypt it. Your secret works. And now you have to modify your configuration. So first thing because we're using the tpm you have to add the canal module. So I added both but I think you can probably just add one if you know which one. Then you add the boot in the configuration. So it has to map. So it had to match the file system configuration. Then you can rebuild. And while we're rebuild we can turn off one of the tongue sockets. So the tongue one server. And yes because we defined in the threshold that just one of two is required. Then we reboot and we see that it's not a reachable error communicating but it's still boots very quickly. Then it's locked out partition right. So it works but then you turn off the second tongue server just to check that. And then you can see that there are two errors for both tongue servers. And so there's an error reading the passphrase. And now you have to type in your password so if you didn't set up an open SSH server while you're basically you have to reboot your machine from a. Okay. So what's left to do? Well you can add more pins to match your needs. So one useful one would be Yubiki. And then if you have like an exotic encryption solution maybe you can try and use them with Clevis for instance Veracript or I don't know whatever. So there's many other solutions to use. So feel free to contribute and thank you very much for your attention. We don't have a mic so shout the question and repeat it if you have a question. Question was in case where the tongue servers are down can you still SSH to input your password or are you just out of luck? And the answer is I expected to work correctly with the existing SSH server and it's already featured so you have to configure it to do that but it's possible. There is none apart from the fact that Clevis is just fancy wrappers around like the same calls that the system the crypton world features are doing to the TPM. I don't know which one was first. So yes the question was can you put the maybe the configuration. The question was about the configuration and so the threshold was set to two but we asked for the TPM to be live to be available and only one of the two tongue servers so it was very quick but there's actually a combination of pins so there's first the TPM then inside the SSS configuration there's another SSS pin with the threshold of one so this threshold applied to the TPM and the SSS with two tongues and the threshold of one so I guess it's okay. Can you repeat it? Yes how does encryption key management work with the FS as it supports only one passphrase. The answer to this it's the same passphrase that you encode in a Clevis secret so what it does it will first try to decrypt the Clevis secret and if the decryption succeeds then it will use this key as the encryption for the FS otherwise it will ask you to input it like interactively. So I guess the answer to this question is currently there is only one key phrase that is either in your brain or encoded in a Clevis secret. Yes. Do you know of any possibility to have an encrypted kernel and init.org so like a bootloader we use the TPM to decrypt the kernel and init.org? I do not know about this no I don't I mean as you described it it maybe it's possible but I do not know of any implementation of this kind of things. I guess you need something to decrypt your kernel anyway if you're going to have encrypted kernel what is going to decrypt it? Yes okay then systemdboot becomes the kernel I don't know. I think that's pushing it a little bit why would you think you want your kernel to be secret it's like if you're thinking about secrets you want to put in init.org that's something different and we have so currently in XS we have an encrypted init.org secrets but there is also a new features coming into systemdboot and then learn something. So we have an encrypted system init.org secrets encrypted via the TPM and systemdcrypt what's the name? Credential systemd credential sorry that's maybe what's more what you want. Yes. Yeah I agree so the remark was it's sometimes good not to have like a kernel unencrypted because then an attacker reading your boot partition would know exactly which version of the kernel you're using and maybe target some specific vulnerabilities. Thank you for the remark. Okay so the remark was you can use a Kexec to load basically any other kernel that you might have decrypted from the first kernel so that you can still have some kind of encrypted kernel. Thank you. Yes. Should I use the same time server for multiple hosts or set up a different host or set up a different time server for other because any host could decrypt I guess. Well as long as your tank server is in a secure network that you control the access and you have exclusive access or that you have also set up a TPM on your servers but as long as your network is secure I'd say that the protocol implies that Tanks servers have not access to anything except their own signing key so you can use as many that's what's cool about the Macalum real real protocol is that you can use as many clients as you want the message doesn't even leave the clients when it's encrypted and the key using for encryption also doesn't leave the client so well they have the key. Okay so the question was if malicious host reaches your private subnet and gets access to what the client or the. Well if they get access to the GW secret yes well then they can if they have access to the tank server and the GW then they can decrypt so that's why you have to either well put your tank server on something that you control very much or well encrypt your GW token when you put it on your flake or whatever it should not be clear. Okay so the question was what happens if your tank server is down is down during the reboot of the server. Well as you saw well depending on your configuration if you have a lower threshold well it would print an error communicating with the tank server first but then it could depending on your configuration still boot or not if you only have set up one tank server it won't boot and then fall back to interactive unlocking. And if I may add something you may like configure a system so that it after like it times out trying to unlock your your repartition after some while and reboots and then start again and if it was a transient failure of tank server then you might be saved by that. We can do one short question. So there we have some documentation on the next menu. This is sorry this is a merge and available in the next and stable right now it's not in 23.11 and you have you have some documentation in the unstable manual. Thank you. So. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.8, "text": " All right.", "tokens": [50364, 1057, 558, 13, 51054], "temperature": 0.0, "avg_logprob": -0.4071710623946844, "compression_ratio": 1.3157894736842106, "no_speech_prob": 0.46300366520881653}, {"id": 1, "seek": 0, "start": 13.8, "end": 21.12, "text": " We are now going to get ready for the last talk of the NixOS Dev Room this year.", "tokens": [51054, 492, 366, 586, 516, 281, 483, 1919, 337, 264, 1036, 751, 295, 264, 426, 970, 4367, 9096, 19190, 341, 1064, 13, 51420], "temperature": 0.0, "avg_logprob": -0.4071710623946844, "compression_ratio": 1.3157894736842106, "no_speech_prob": 0.46300366520881653}, {"id": 2, "seek": 0, "start": 21.12, "end": 29.400000000000002, "text": " We have on stage Julien and Kami, who are going to talk about an attended encrypted", "tokens": [51420, 492, 362, 322, 3233, 7174, 1053, 293, 591, 4526, 11, 567, 366, 516, 281, 751, 466, 364, 15990, 36663, 51834], "temperature": 0.0, "avg_logprob": -0.4071710623946844, "compression_ratio": 1.3157894736842106, "no_speech_prob": 0.46300366520881653}, {"id": 3, "seek": 2940, "start": 29.4, "end": 34.96, "text": " file system boots on NixOS, which everyone who encrypts their hard drives knows about", "tokens": [50364, 3991, 1185, 15194, 322, 426, 970, 4367, 11, 597, 1518, 567, 17972, 39280, 641, 1152, 11754, 3255, 466, 50642], "temperature": 0.0, "avg_logprob": -0.3048680305480957, "compression_ratio": 1.4029850746268657, "no_speech_prob": 0.04864734411239624}, {"id": 4, "seek": 2940, "start": 34.96, "end": 38.8, "text": " that program of not being able to reboot remotely.", "tokens": [50642, 300, 1461, 295, 406, 885, 1075, 281, 33818, 20824, 13, 50834], "temperature": 0.0, "avg_logprob": -0.3048680305480957, "compression_ratio": 1.4029850746268657, "no_speech_prob": 0.04864734411239624}, {"id": 5, "seek": 2940, "start": 38.8, "end": 46.239999999999995, "text": " So give them a round of applause.", "tokens": [50834, 407, 976, 552, 257, 3098, 295, 9969, 13, 51206], "temperature": 0.0, "avg_logprob": -0.3048680305480957, "compression_ratio": 1.4029850746268657, "no_speech_prob": 0.04864734411239624}, {"id": 6, "seek": 2940, "start": 46.239999999999995, "end": 47.72, "text": " Thank you very much.", "tokens": [51206, 1044, 291, 588, 709, 13, 51280], "temperature": 0.0, "avg_logprob": -0.3048680305480957, "compression_ratio": 1.4029850746268657, "no_speech_prob": 0.04864734411239624}, {"id": 7, "seek": 2940, "start": 47.72, "end": 55.4, "text": " So I'm Julien Malka and this is Kami Mondeau and we are both old students of Ecole Normale", "tokens": [51280, 407, 286, 478, 7174, 1053, 376, 667, 64, 293, 341, 307, 591, 4526, 376, 7259, 1459, 293, 321, 366, 1293, 1331, 1731, 295, 462, 27247, 8702, 1220, 51664], "temperature": 0.0, "avg_logprob": -0.3048680305480957, "compression_ratio": 1.4029850746268657, "no_speech_prob": 0.04864734411239624}, {"id": 8, "seek": 5540, "start": 55.4, "end": 59.32, "text": " Superior and we did this during our studies a few months ago.", "tokens": [50364, 48953, 293, 321, 630, 341, 1830, 527, 5313, 257, 1326, 2493, 2057, 13, 50560], "temperature": 0.0, "avg_logprob": -0.26850896562848775, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.057244278490543365}, {"id": 9, "seek": 5540, "start": 59.32, "end": 65.56, "text": " So we are going to talk about Clevis and Tong on NixOS and I have to say and to thank NLNet", "tokens": [50560, 407, 321, 366, 516, 281, 751, 466, 8834, 4938, 293, 26946, 322, 426, 970, 4367, 293, 286, 362, 281, 584, 293, 281, 1309, 426, 43, 31890, 50872], "temperature": 0.0, "avg_logprob": -0.26850896562848775, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.057244278490543365}, {"id": 10, "seek": 5540, "start": 65.56, "end": 71.64, "text": " for funding this new feature in NixOS.", "tokens": [50872, 337, 6137, 341, 777, 4111, 294, 426, 970, 4367, 13, 51176], "temperature": 0.0, "avg_logprob": -0.26850896562848775, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.057244278490543365}, {"id": 11, "seek": 5540, "start": 71.64, "end": 77.36, "text": " So the plan is we are going to motivate why it's interesting to have full disk encryption", "tokens": [51176, 407, 264, 1393, 307, 321, 366, 516, 281, 28497, 983, 309, 311, 1880, 281, 362, 1577, 12355, 29575, 51462], "temperature": 0.0, "avg_logprob": -0.26850896562848775, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.057244278490543365}, {"id": 12, "seek": 5540, "start": 77.36, "end": 78.84, "text": " and remote servers.", "tokens": [51462, 293, 8607, 15909, 13, 51536], "temperature": 0.0, "avg_logprob": -0.26850896562848775, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.057244278490543365}, {"id": 13, "seek": 5540, "start": 78.84, "end": 84.28, "text": " We are going to present Clevis, which is the automated encryption framework, given EAPDES", "tokens": [51536, 492, 366, 516, 281, 1974, 8834, 4938, 11, 597, 307, 264, 18473, 29575, 8388, 11, 2212, 462, 4715, 35, 2358, 51808], "temperature": 0.0, "avg_logprob": -0.26850896562848775, "compression_ratio": 1.6198347107438016, "no_speech_prob": 0.057244278490543365}, {"id": 14, "seek": 8428, "start": 84.28, "end": 90.92, "text": " view of the Tong protocol and then talk about our implementation and show you a demo.", "tokens": [50364, 1910, 295, 264, 26946, 10336, 293, 550, 751, 466, 527, 11420, 293, 855, 291, 257, 10723, 13, 50696], "temperature": 0.0, "avg_logprob": -0.14798107853642217, "compression_ratio": 1.7061611374407584, "no_speech_prob": 0.0706123486161232}, {"id": 15, "seek": 8428, "start": 90.92, "end": 97.92, "text": " So full disk encryption of remote servers, of course, it looks like a good idea, like", "tokens": [50696, 407, 1577, 12355, 29575, 295, 8607, 15909, 11, 295, 1164, 11, 309, 1542, 411, 257, 665, 1558, 11, 411, 51046], "temperature": 0.0, "avg_logprob": -0.14798107853642217, "compression_ratio": 1.7061611374407584, "no_speech_prob": 0.0706123486161232}, {"id": 16, "seek": 8428, "start": 97.92, "end": 104.16, "text": " critical data or even non-critical data should be protected by full disk encryption nowadays.", "tokens": [51046, 4924, 1412, 420, 754, 2107, 12, 32255, 804, 1412, 820, 312, 10594, 538, 1577, 12355, 29575, 13434, 13, 51358], "temperature": 0.0, "avg_logprob": -0.14798107853642217, "compression_ratio": 1.7061611374407584, "no_speech_prob": 0.0706123486161232}, {"id": 17, "seek": 8428, "start": 104.16, "end": 112.04, "text": " Problem is often more difficult to do it on servers because when you have full disk encryption", "tokens": [51358, 11676, 307, 2049, 544, 2252, 281, 360, 309, 322, 15909, 570, 562, 291, 362, 1577, 12355, 29575, 51752], "temperature": 0.0, "avg_logprob": -0.14798107853642217, "compression_ratio": 1.7061611374407584, "no_speech_prob": 0.0706123486161232}, {"id": 18, "seek": 11204, "start": 112.04, "end": 119.84, "text": " you need to basically input your passphrase at boot and this requires physical intervention", "tokens": [50364, 291, 643, 281, 1936, 4846, 428, 1320, 44598, 651, 412, 11450, 293, 341, 7029, 4001, 13176, 50754], "temperature": 0.0, "avg_logprob": -0.250505424681164, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.028928756713867188}, {"id": 19, "seek": 11204, "start": 119.84, "end": 123.88000000000001, "text": " so it's a bit painful to reboot servers.", "tokens": [50754, 370, 309, 311, 257, 857, 11697, 281, 33818, 15909, 13, 50956], "temperature": 0.0, "avg_logprob": -0.250505424681164, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.028928756713867188}, {"id": 20, "seek": 11204, "start": 123.88000000000001, "end": 128.92000000000002, "text": " One solution that is often used is spawning a SH server in Itardi.", "tokens": [50956, 1485, 3827, 300, 307, 2049, 1143, 307, 637, 35880, 257, 7405, 7154, 294, 467, 38126, 13, 51208], "temperature": 0.0, "avg_logprob": -0.250505424681164, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.028928756713867188}, {"id": 21, "seek": 11204, "start": 128.92000000000002, "end": 134.4, "text": " This way you can instead of having physical intervention you can just SH to your server", "tokens": [51208, 639, 636, 291, 393, 2602, 295, 1419, 4001, 13176, 291, 393, 445, 7405, 281, 428, 7154, 51482], "temperature": 0.0, "avg_logprob": -0.250505424681164, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.028928756713867188}, {"id": 22, "seek": 11204, "start": 134.4, "end": 140.48000000000002, "text": " and input your key and unlock your root partition and continue booting.", "tokens": [51482, 293, 4846, 428, 2141, 293, 11634, 428, 5593, 24808, 293, 2354, 11450, 278, 13, 51786], "temperature": 0.0, "avg_logprob": -0.250505424681164, "compression_ratio": 1.6933962264150944, "no_speech_prob": 0.028928756713867188}, {"id": 23, "seek": 14048, "start": 140.48, "end": 145.92, "text": " But this still requires synchrony new intervention so if your server reboots for some reason", "tokens": [50364, 583, 341, 920, 7029, 19331, 88, 777, 13176, 370, 498, 428, 7154, 26802, 1971, 337, 512, 1778, 50636], "temperature": 0.0, "avg_logprob": -0.3165871843378595, "compression_ratio": 1.565040650406504, "no_speech_prob": 0.013785206712782383}, {"id": 24, "seek": 14048, "start": 145.92, "end": 151.2, "text": " that it was not planned and you are not awake or doing anything else your server actually", "tokens": [50636, 300, 309, 390, 406, 8589, 293, 291, 366, 406, 15994, 420, 884, 1340, 1646, 428, 7154, 767, 50900], "temperature": 0.0, "avg_logprob": -0.3165871843378595, "compression_ratio": 1.565040650406504, "no_speech_prob": 0.013785206712782383}, {"id": 25, "seek": 14048, "start": 151.2, "end": 152.76, "text": " doesn't reboot.", "tokens": [50900, 1177, 380, 33818, 13, 50978], "temperature": 0.0, "avg_logprob": -0.3165871843378595, "compression_ratio": 1.565040650406504, "no_speech_prob": 0.013785206712782383}, {"id": 26, "seek": 14048, "start": 152.76, "end": 158.35999999999999, "text": " So that's why I think this kind of solution is interesting.", "tokens": [50978, 407, 300, 311, 983, 286, 519, 341, 733, 295, 3827, 307, 1880, 13, 51258], "temperature": 0.0, "avg_logprob": -0.3165871843378595, "compression_ratio": 1.565040650406504, "no_speech_prob": 0.013785206712782383}, {"id": 27, "seek": 14048, "start": 158.35999999999999, "end": 166.95999999999998, "text": " Okay, so before Julian dives in the Macalum-Rallye protocol we are going to present the Clevis", "tokens": [51258, 1033, 11, 370, 949, 25151, 274, 1539, 294, 264, 5707, 304, 449, 12, 49, 379, 68, 10336, 321, 366, 516, 281, 1974, 264, 8834, 4938, 51688], "temperature": 0.0, "avg_logprob": -0.3165871843378595, "compression_ratio": 1.565040650406504, "no_speech_prob": 0.013785206712782383}, {"id": 28, "seek": 14048, "start": 166.95999999999998, "end": 169.12, "text": " automated encryption framework.", "tokens": [51688, 18473, 29575, 8388, 13, 51796], "temperature": 0.0, "avg_logprob": -0.3165871843378595, "compression_ratio": 1.565040650406504, "no_speech_prob": 0.013785206712782383}, {"id": 29, "seek": 16912, "start": 169.12, "end": 176.4, "text": " So it's a project developed by the team Latchset which is basically just a big set of batch", "tokens": [50364, 407, 309, 311, 257, 1716, 4743, 538, 264, 1469, 441, 852, 3854, 597, 307, 1936, 445, 257, 955, 992, 295, 15245, 50728], "temperature": 0.0, "avg_logprob": -0.23017036140739144, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.04579317569732666}, {"id": 30, "seek": 16912, "start": 176.4, "end": 184.56, "text": " scripts wrapping around Jose which is the core encryption system and it's a pluggable", "tokens": [50728, 23294, 21993, 926, 508, 541, 597, 307, 264, 4965, 29575, 1185, 293, 309, 311, 257, 499, 3562, 712, 51136], "temperature": 0.0, "avg_logprob": -0.23017036140739144, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.04579317569732666}, {"id": 31, "seek": 16912, "start": 184.56, "end": 188.8, "text": " framework for automated decryption.", "tokens": [51136, 8388, 337, 18473, 979, 627, 1695, 13, 51348], "temperature": 0.0, "avg_logprob": -0.23017036140739144, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.04579317569732666}, {"id": 32, "seek": 16912, "start": 188.8, "end": 195.48000000000002, "text": " So there's the notion of PINs which is central is a plugin that implement automated decryption", "tokens": [51348, 407, 456, 311, 264, 10710, 295, 430, 1464, 82, 597, 307, 5777, 307, 257, 23407, 300, 4445, 18473, 979, 627, 1695, 51682], "temperature": 0.0, "avg_logprob": -0.23017036140739144, "compression_ratio": 1.6041666666666667, "no_speech_prob": 0.04579317569732666}, {"id": 33, "seek": 19548, "start": 195.72, "end": 201.6, "text": " and to encrypt some data with Clevis, well you just have to do Clevis encrypt and then", "tokens": [50376, 293, 281, 17972, 662, 512, 1412, 365, 8834, 4938, 11, 731, 291, 445, 362, 281, 360, 8834, 4938, 17972, 662, 293, 550, 50670], "temperature": 0.0, "avg_logprob": -0.22621430546404367, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.25084245204925537}, {"id": 34, "seek": 19548, "start": 201.6, "end": 208.67999999999998, "text": " you write the PIN you want to use, the config, your plain text message and then you get a", "tokens": [50670, 291, 2464, 264, 430, 1464, 291, 528, 281, 764, 11, 264, 6662, 11, 428, 11121, 2487, 3636, 293, 550, 291, 483, 257, 51024], "temperature": 0.0, "avg_logprob": -0.22621430546404367, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.25084245204925537}, {"id": 35, "seek": 19548, "start": 208.67999999999998, "end": 214.44, "text": " ciphered text in the format GWE.", "tokens": [51024, 269, 21240, 292, 2487, 294, 264, 7877, 460, 37937, 13, 51312], "temperature": 0.0, "avg_logprob": -0.22621430546404367, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.25084245204925537}, {"id": 36, "seek": 19548, "start": 214.44, "end": 220.35999999999999, "text": " So the first kind of PIN you can use is TPM 2.0 PIN.", "tokens": [51312, 407, 264, 700, 733, 295, 430, 1464, 291, 393, 764, 307, 314, 18819, 568, 13, 15, 430, 1464, 13, 51608], "temperature": 0.0, "avg_logprob": -0.22621430546404367, "compression_ratio": 1.5057471264367817, "no_speech_prob": 0.25084245204925537}, {"id": 37, "seek": 22036, "start": 220.36, "end": 229.04000000000002, "text": " So I don't know exactly how works the encryption using TPM but basically the, well Clevis first", "tokens": [50364, 407, 286, 500, 380, 458, 2293, 577, 1985, 264, 29575, 1228, 314, 18819, 457, 1936, 264, 11, 731, 8834, 4938, 700, 50798], "temperature": 0.0, "avg_logprob": -0.1416703504674575, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.05216647684574127}, {"id": 38, "seek": 22036, "start": 229.04000000000002, "end": 235.92000000000002, "text": " Jose first generates a key and then this key is used to encrypt the message and then this", "tokens": [50798, 508, 541, 700, 23815, 257, 2141, 293, 550, 341, 2141, 307, 1143, 281, 17972, 662, 264, 3636, 293, 550, 341, 51142], "temperature": 0.0, "avg_logprob": -0.1416703504674575, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.05216647684574127}, {"id": 39, "seek": 22036, "start": 235.92000000000002, "end": 244.20000000000002, "text": " key is itself encrypted and using the key generated by the TPM and it will be decrypted", "tokens": [51142, 2141, 307, 2564, 36663, 293, 1228, 264, 2141, 10833, 538, 264, 314, 18819, 293, 309, 486, 312, 979, 627, 25383, 51556], "temperature": 0.0, "avg_logprob": -0.1416703504674575, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.05216647684574127}, {"id": 40, "seek": 22036, "start": 244.20000000000002, "end": 247.64000000000001, "text": " the same way when Clevis needs to decrypt the message.", "tokens": [51556, 264, 912, 636, 562, 8834, 4938, 2203, 281, 979, 627, 662, 264, 3636, 13, 51728], "temperature": 0.0, "avg_logprob": -0.1416703504674575, "compression_ratio": 1.7263157894736842, "no_speech_prob": 0.05216647684574127}, {"id": 41, "seek": 24764, "start": 247.64, "end": 258.4, "text": " So that's very useful if you require TPM 2.0 and not 1.2 for that to work and then the", "tokens": [50364, 407, 300, 311, 588, 4420, 498, 291, 3651, 314, 18819, 568, 13, 15, 293, 406, 502, 13, 17, 337, 300, 281, 589, 293, 550, 264, 50902], "temperature": 0.0, "avg_logprob": -0.2378426381986435, "compression_ratio": 1.398936170212766, "no_speech_prob": 0.03784685954451561}, {"id": 42, "seek": 24764, "start": 258.4, "end": 266.44, "text": " most useful kind of PIN is the TANG PIN which was designed by the same team of developers", "tokens": [50902, 881, 4420, 733, 295, 430, 1464, 307, 264, 314, 12419, 430, 1464, 597, 390, 4761, 538, 264, 912, 1469, 295, 8849, 51304], "temperature": 0.0, "avg_logprob": -0.2378426381986435, "compression_ratio": 1.398936170212766, "no_speech_prob": 0.03784685954451561}, {"id": 43, "seek": 24764, "start": 266.44, "end": 273.8, "text": " and so it's a server implementation providing services without the need for an X-Crow.", "tokens": [51304, 293, 370, 309, 311, 257, 7154, 11420, 6530, 3328, 1553, 264, 643, 337, 364, 1783, 12, 34, 1892, 13, 51672], "temperature": 0.0, "avg_logprob": -0.2378426381986435, "compression_ratio": 1.398936170212766, "no_speech_prob": 0.03784685954451561}, {"id": 44, "seek": 27380, "start": 273.8, "end": 281.96000000000004, "text": " So basically you do Clevis encrypt TANG and you precise the URL of your TANG server and", "tokens": [50364, 407, 1936, 291, 360, 8834, 4938, 17972, 662, 314, 12419, 293, 291, 13600, 264, 12905, 295, 428, 314, 12419, 7154, 293, 50772], "temperature": 0.0, "avg_logprob": -0.1981218422160429, "compression_ratio": 1.427807486631016, "no_speech_prob": 0.6032077670097351}, {"id": 45, "seek": 27380, "start": 281.96000000000004, "end": 291.12, "text": " this will encrypt your message using the protocol that Julien will describe to you later.", "tokens": [50772, 341, 486, 17972, 662, 428, 3636, 1228, 264, 10336, 300, 7174, 1053, 486, 6786, 281, 291, 1780, 13, 51230], "temperature": 0.0, "avg_logprob": -0.1981218422160429, "compression_ratio": 1.427807486631016, "no_speech_prob": 0.6032077670097351}, {"id": 46, "seek": 27380, "start": 291.12, "end": 298.6, "text": " And then there's Shamir secret sharing which is a combination of the, it's a way to break", "tokens": [51230, 400, 550, 456, 311, 42912, 347, 4054, 5414, 597, 307, 257, 6562, 295, 264, 11, 309, 311, 257, 636, 281, 1821, 51604], "temperature": 0.0, "avg_logprob": -0.1981218422160429, "compression_ratio": 1.427807486631016, "no_speech_prob": 0.6032077670097351}, {"id": 47, "seek": 29860, "start": 298.6, "end": 305.32000000000005, "text": " down a secret into multiple pieces and so there's the notion of threshold here it's", "tokens": [50364, 760, 257, 4054, 666, 3866, 3755, 293, 370, 456, 311, 264, 10710, 295, 14678, 510, 309, 311, 50700], "temperature": 0.0, "avg_logprob": -0.2862237900022476, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.34128543734550476}, {"id": 48, "seek": 29860, "start": 305.32000000000005, "end": 312.76000000000005, "text": " T and its value is 2 and so you basically make a combination in your configuration of", "tokens": [50700, 314, 293, 1080, 2158, 307, 568, 293, 370, 291, 1936, 652, 257, 6562, 294, 428, 11694, 295, 51072], "temperature": 0.0, "avg_logprob": -0.2862237900022476, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.34128543734550476}, {"id": 49, "seek": 29860, "start": 312.76000000000005, "end": 321.28000000000003, "text": " multiple PINs, the previous examples being TPM and TANG and here you see there's three", "tokens": [51072, 3866, 430, 1464, 82, 11, 264, 3894, 5110, 885, 314, 18819, 293, 314, 12419, 293, 510, 291, 536, 456, 311, 1045, 51498], "temperature": 0.0, "avg_logprob": -0.2862237900022476, "compression_ratio": 1.5058823529411764, "no_speech_prob": 0.34128543734550476}, {"id": 50, "seek": 32128, "start": 321.28, "end": 329.96, "text": " PINs, one TPM and two TANG servers and the threshold is 2 so you have to have two working", "tokens": [50364, 430, 1464, 82, 11, 472, 314, 18819, 293, 732, 314, 12419, 15909, 293, 264, 14678, 307, 568, 370, 291, 362, 281, 362, 732, 1364, 50798], "temperature": 0.0, "avg_logprob": -0.3122769507808962, "compression_ratio": 1.3719512195121952, "no_speech_prob": 0.4748275876045227}, {"id": 51, "seek": 32128, "start": 329.96, "end": 332.64, "text": " PINs in order to decrypt your secrets.", "tokens": [50798, 430, 1464, 82, 294, 1668, 281, 979, 627, 662, 428, 14093, 13, 50932], "temperature": 0.0, "avg_logprob": -0.3122769507808962, "compression_ratio": 1.3719512195121952, "no_speech_prob": 0.4748275876045227}, {"id": 52, "seek": 32128, "start": 332.64, "end": 341.11999999999995, "text": " Obviously at the encryption time you need a whole three PINs to be up.", "tokens": [50932, 7580, 412, 264, 29575, 565, 291, 643, 257, 1379, 1045, 430, 1464, 82, 281, 312, 493, 13, 51356], "temperature": 0.0, "avg_logprob": -0.3122769507808962, "compression_ratio": 1.3719512195121952, "no_speech_prob": 0.4748275876045227}, {"id": 53, "seek": 32128, "start": 341.11999999999995, "end": 343.64, "text": " So Julien was explaining.", "tokens": [51356, 407, 7174, 1053, 390, 13468, 13, 51482], "temperature": 0.0, "avg_logprob": -0.3122769507808962, "compression_ratio": 1.3719512195121952, "no_speech_prob": 0.4748275876045227}, {"id": 54, "seek": 34364, "start": 343.64, "end": 344.68, "text": " Thank you Kami.", "tokens": [50364, 1044, 291, 591, 4526, 13, 50416], "temperature": 0.0, "avg_logprob": -0.24567118813009822, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.32843467593193054}, {"id": 55, "seek": 34364, "start": 344.68, "end": 354.32, "text": " I'm going to try to explain a bit how the TANG protocol works which might be, I'll try", "tokens": [50416, 286, 478, 516, 281, 853, 281, 2903, 257, 857, 577, 264, 314, 12419, 10336, 1985, 597, 1062, 312, 11, 286, 603, 853, 50898], "temperature": 0.0, "avg_logprob": -0.24567118813009822, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.32843467593193054}, {"id": 56, "seek": 34364, "start": 354.32, "end": 360.52, "text": " to explain it as simple as possible but this is extra extra for you.", "tokens": [50898, 281, 2903, 309, 382, 2199, 382, 1944, 457, 341, 307, 2857, 2857, 337, 291, 13, 51208], "temperature": 0.0, "avg_logprob": -0.24567118813009822, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.32843467593193054}, {"id": 57, "seek": 34364, "start": 360.52, "end": 367.76, "text": " So basically the TANG protocol looks like the Diffielman key exchange.", "tokens": [51208, 407, 1936, 264, 314, 12419, 10336, 1542, 411, 264, 413, 3661, 1187, 1601, 2141, 7742, 13, 51570], "temperature": 0.0, "avg_logprob": -0.24567118813009822, "compression_ratio": 1.4578313253012047, "no_speech_prob": 0.32843467593193054}, {"id": 58, "seek": 36776, "start": 367.76, "end": 375.71999999999997, "text": " The Diffielman key exchange is something used to get a shared symmetric key between", "tokens": [50364, 440, 413, 3661, 1187, 1601, 2141, 7742, 307, 746, 1143, 281, 483, 257, 5507, 32330, 2141, 1296, 50762], "temperature": 0.0, "avg_logprob": -0.1872701762635031, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.06613572686910629}, {"id": 59, "seek": 36776, "start": 375.71999999999997, "end": 383.28, "text": " two actors on an unsecured channel and the idea is not that complicated.", "tokens": [50762, 732, 10037, 322, 364, 517, 8159, 3831, 2269, 293, 264, 1558, 307, 406, 300, 6179, 13, 51140], "temperature": 0.0, "avg_logprob": -0.1872701762635031, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.06613572686910629}, {"id": 60, "seek": 36776, "start": 383.28, "end": 388.0, "text": " The idea is that you need to imagine that we have a mathematical operation star that", "tokens": [51140, 440, 1558, 307, 300, 291, 643, 281, 3811, 300, 321, 362, 257, 18894, 6916, 3543, 300, 51376], "temperature": 0.0, "avg_logprob": -0.1872701762635031, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.06613572686910629}, {"id": 61, "seek": 36776, "start": 388.0, "end": 393.12, "text": " is really, that is easy to compute so if I get two numbers A and B I can compute A star", "tokens": [51376, 307, 534, 11, 300, 307, 1858, 281, 14722, 370, 498, 286, 483, 732, 3547, 316, 293, 363, 286, 393, 14722, 316, 3543, 51632], "temperature": 0.0, "avg_logprob": -0.1872701762635031, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.06613572686910629}, {"id": 62, "seek": 39312, "start": 393.12, "end": 400.48, "text": " B but on the other hand super difficult to reverse so if I get C which is A star B it's", "tokens": [50364, 363, 457, 322, 264, 661, 1011, 1687, 2252, 281, 9943, 370, 498, 286, 483, 383, 597, 307, 316, 3543, 363, 309, 311, 50732], "temperature": 0.0, "avg_logprob": -0.1869019099644252, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.2634723484516144}, {"id": 63, "seek": 39312, "start": 400.48, "end": 404.76, "text": " very difficult to get A and B.", "tokens": [50732, 588, 2252, 281, 483, 316, 293, 363, 13, 50946], "temperature": 0.0, "avg_logprob": -0.1869019099644252, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.2634723484516144}, {"id": 64, "seek": 39312, "start": 404.76, "end": 408.76, "text": " And the idea is that we have also J which is a public parameter and the idea is that", "tokens": [50946, 400, 264, 1558, 307, 300, 321, 362, 611, 508, 597, 307, 257, 1908, 13075, 293, 264, 1558, 307, 300, 51146], "temperature": 0.0, "avg_logprob": -0.1869019099644252, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.2634723484516144}, {"id": 65, "seek": 39312, "start": 408.76, "end": 415.2, "text": " we have a server and the client that each generates a secret SNC and then they send", "tokens": [51146, 321, 362, 257, 7154, 293, 264, 6423, 300, 1184, 23815, 257, 4054, 13955, 34, 293, 550, 436, 2845, 51468], "temperature": 0.0, "avg_logprob": -0.1869019099644252, "compression_ratio": 1.6686046511627908, "no_speech_prob": 0.2634723484516144}, {"id": 66, "seek": 41520, "start": 415.2, "end": 423.4, "text": " their secret star J and then they both on their sides multiply by whatever they receive", "tokens": [50364, 641, 4054, 3543, 508, 293, 550, 436, 1293, 322, 641, 4881, 12972, 538, 2035, 436, 4774, 50774], "temperature": 0.0, "avg_logprob": -0.17818444395718508, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.32429039478302}, {"id": 67, "seek": 41520, "start": 423.4, "end": 426.15999999999997, "text": " from the other side.", "tokens": [50774, 490, 264, 661, 1252, 13, 50912], "temperature": 0.0, "avg_logprob": -0.17818444395718508, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.32429039478302}, {"id": 68, "seek": 41520, "start": 426.15999999999997, "end": 432.24, "text": " So at the end on both sides they get C, JS and SJC which is the same thing so they get", "tokens": [50912, 407, 412, 264, 917, 322, 1293, 4881, 436, 483, 383, 11, 33063, 293, 44883, 34, 597, 307, 264, 912, 551, 370, 436, 483, 51216], "temperature": 0.0, "avg_logprob": -0.17818444395718508, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.32429039478302}, {"id": 69, "seek": 41520, "start": 432.24, "end": 438.96, "text": " a shared key that they can use to encrypt their messages and talk with each other but somebody", "tokens": [51216, 257, 5507, 2141, 300, 436, 393, 764, 281, 17972, 662, 641, 7897, 293, 751, 365, 1184, 661, 457, 2618, 51552], "temperature": 0.0, "avg_logprob": -0.17818444395718508, "compression_ratio": 1.5934065934065933, "no_speech_prob": 0.32429039478302}, {"id": 70, "seek": 43896, "start": 438.96, "end": 446.15999999999997, "text": " listening here cannot do the separation of these operations so it doesn't get any information.", "tokens": [50364, 4764, 510, 2644, 360, 264, 14634, 295, 613, 7705, 370, 309, 1177, 380, 483, 604, 1589, 13, 50724], "temperature": 0.0, "avg_logprob": -0.20337729454040526, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.13708560168743134}, {"id": 71, "seek": 43896, "start": 446.15999999999997, "end": 451.56, "text": " If the math is a little bit too abstract you can imagine this with paint.", "tokens": [50724, 759, 264, 5221, 307, 257, 707, 857, 886, 12649, 291, 393, 3811, 341, 365, 4225, 13, 50994], "temperature": 0.0, "avg_logprob": -0.20337729454040526, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.13708560168743134}, {"id": 72, "seek": 43896, "start": 451.56, "end": 459.24, "text": " We have J which is the common paint then you have secret paints on each side they do the", "tokens": [50994, 492, 362, 508, 597, 307, 264, 2689, 4225, 550, 291, 362, 4054, 28076, 322, 1184, 1252, 436, 360, 264, 51378], "temperature": 0.0, "avg_logprob": -0.20337729454040526, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.13708560168743134}, {"id": 73, "seek": 43896, "start": 459.24, "end": 463.67999999999995, "text": " mixing of paints and they get each a color and from this color it's very difficult to", "tokens": [51378, 11983, 295, 28076, 293, 436, 483, 1184, 257, 2017, 293, 490, 341, 2017, 309, 311, 588, 2252, 281, 51600], "temperature": 0.0, "avg_logprob": -0.20337729454040526, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.13708560168743134}, {"id": 74, "seek": 46368, "start": 463.68, "end": 472.24, "text": " find which paints were used to do the mixing then they send both their paints and add their", "tokens": [50364, 915, 597, 28076, 645, 1143, 281, 360, 264, 11983, 550, 436, 2845, 1293, 641, 28076, 293, 909, 641, 50792], "temperature": 0.0, "avg_logprob": -0.2959342788863968, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0557352714240551}, {"id": 75, "seek": 46368, "start": 472.24, "end": 478.48, "text": " secret to whatever they receive and they get a shared color which is like an analogy for", "tokens": [50792, 4054, 281, 2035, 436, 4774, 293, 436, 483, 257, 5507, 2017, 597, 307, 411, 364, 21663, 337, 51104], "temperature": 0.0, "avg_logprob": -0.2959342788863968, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0557352714240551}, {"id": 76, "seek": 46368, "start": 478.48, "end": 479.48, "text": " the shared key.", "tokens": [51104, 264, 5507, 2141, 13, 51154], "temperature": 0.0, "avg_logprob": -0.2959342788863968, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0557352714240551}, {"id": 77, "seek": 46368, "start": 479.48, "end": 485.84000000000003, "text": " This is the if the Diffie-Eleman protocol used on the internet to devise a shared symmetric", "tokens": [51154, 639, 307, 264, 498, 264, 413, 3661, 414, 12, 36, 306, 1601, 10336, 1143, 322, 264, 4705, 281, 1905, 908, 257, 5507, 32330, 51472], "temperature": 0.0, "avg_logprob": -0.2959342788863968, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0557352714240551}, {"id": 78, "seek": 46368, "start": 485.84000000000003, "end": 491.44, "text": " key to discuss with somebody and the Tongue protocol is derived from this so there is", "tokens": [51472, 2141, 281, 2248, 365, 2618, 293, 264, 26946, 622, 10336, 307, 18949, 490, 341, 370, 456, 307, 51752], "temperature": 0.0, "avg_logprob": -0.2959342788863968, "compression_ratio": 1.7314814814814814, "no_speech_prob": 0.0557352714240551}, {"id": 79, "seek": 49144, "start": 491.44, "end": 495.12, "text": " two sides of this.", "tokens": [50364, 732, 4881, 295, 341, 13, 50548], "temperature": 0.0, "avg_logprob": -0.24482203031841077, "compression_ratio": 1.7358490566037736, "no_speech_prob": 0.023345861583948135}, {"id": 80, "seek": 49144, "start": 495.12, "end": 501.28, "text": " The first side is like the provisioning so it looks like Diffie-Eleman, they both generate", "tokens": [50548, 440, 700, 1252, 307, 411, 264, 17225, 278, 370, 309, 1542, 411, 413, 3661, 414, 12, 36, 306, 1601, 11, 436, 1293, 8460, 50856], "temperature": 0.0, "avg_logprob": -0.24482203031841077, "compression_ratio": 1.7358490566037736, "no_speech_prob": 0.023345861583948135}, {"id": 81, "seek": 49144, "start": 501.28, "end": 507.64, "text": " the secret, the server sends J times its secret and the client sends nothing.", "tokens": [50856, 264, 4054, 11, 264, 7154, 14790, 508, 1413, 1080, 4054, 293, 264, 6423, 14790, 1825, 13, 51174], "temperature": 0.0, "avg_logprob": -0.24482203031841077, "compression_ratio": 1.7358490566037736, "no_speech_prob": 0.023345861583948135}, {"id": 82, "seek": 49144, "start": 507.64, "end": 514.96, "text": " The client computes what should be the shared key but doesn't send its secret to the server", "tokens": [51174, 440, 6423, 715, 1819, 437, 820, 312, 264, 5507, 2141, 457, 1177, 380, 2845, 1080, 4054, 281, 264, 7154, 51540], "temperature": 0.0, "avg_logprob": -0.24482203031841077, "compression_ratio": 1.7358490566037736, "no_speech_prob": 0.023345861583948135}, {"id": 83, "seek": 49144, "start": 514.96, "end": 520.0, "text": " and so he divides the key, encodes whatever message he wants to encode with this key and", "tokens": [51540, 293, 370, 415, 41347, 264, 2141, 11, 2058, 4789, 2035, 3636, 415, 2738, 281, 2058, 1429, 365, 341, 2141, 293, 51792], "temperature": 0.0, "avg_logprob": -0.24482203031841077, "compression_ratio": 1.7358490566037736, "no_speech_prob": 0.023345861583948135}, {"id": 84, "seek": 52000, "start": 520.0, "end": 521.6, "text": " then throws the key away.", "tokens": [50364, 550, 19251, 264, 2141, 1314, 13, 50444], "temperature": 0.0, "avg_logprob": -0.23333919525146485, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.021501444280147552}, {"id": 85, "seek": 52000, "start": 521.6, "end": 528.92, "text": " So at this point the client has an encrypted message, ciphertext but doesn't know how to", "tokens": [50444, 407, 412, 341, 935, 264, 6423, 575, 364, 36663, 3636, 11, 269, 21240, 25111, 457, 1177, 380, 458, 577, 281, 50810], "temperature": 0.0, "avg_logprob": -0.23333919525146485, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.021501444280147552}, {"id": 86, "seek": 52000, "start": 528.92, "end": 532.68, "text": " decrypt it because it throws the key away.", "tokens": [50810, 979, 627, 662, 309, 570, 309, 19251, 264, 2141, 1314, 13, 50998], "temperature": 0.0, "avg_logprob": -0.23333919525146485, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.021501444280147552}, {"id": 87, "seek": 52000, "start": 532.68, "end": 535.16, "text": " When he wants to decrypt it will do this.", "tokens": [50998, 1133, 415, 2738, 281, 979, 627, 662, 309, 486, 360, 341, 13, 51122], "temperature": 0.0, "avg_logprob": -0.23333919525146485, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.021501444280147552}, {"id": 88, "seek": 52000, "start": 535.16, "end": 542.36, "text": " So it will generate a new secret E and send to the server J E plus J C. The server will", "tokens": [51122, 407, 309, 486, 8460, 257, 777, 4054, 462, 293, 2845, 281, 264, 7154, 508, 462, 1804, 508, 383, 13, 440, 7154, 486, 51482], "temperature": 0.0, "avg_logprob": -0.23333919525146485, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.021501444280147552}, {"id": 89, "seek": 52000, "start": 542.36, "end": 547.04, "text": " take this and multiply by its secret and send it back to the client.", "tokens": [51482, 747, 341, 293, 12972, 538, 1080, 4054, 293, 2845, 309, 646, 281, 264, 6423, 13, 51716], "temperature": 0.0, "avg_logprob": -0.23333919525146485, "compression_ratio": 1.7365853658536585, "no_speech_prob": 0.021501444280147552}, {"id": 90, "seek": 54704, "start": 547.04, "end": 556.8399999999999, "text": " At this point the client does this mathematical operation so whatever received minus J S E", "tokens": [50364, 1711, 341, 935, 264, 6423, 775, 341, 18894, 6916, 370, 2035, 4613, 3175, 508, 318, 462, 50854], "temperature": 0.0, "avg_logprob": -0.27174072265625, "compression_ratio": 1.4326241134751774, "no_speech_prob": 0.006230222061276436}, {"id": 91, "seek": 54704, "start": 556.8399999999999, "end": 561.16, "text": " and this gives it another key that it used to decode the message.", "tokens": [50854, 293, 341, 2709, 309, 1071, 2141, 300, 309, 1143, 281, 979, 1429, 264, 3636, 13, 51070], "temperature": 0.0, "avg_logprob": -0.27174072265625, "compression_ratio": 1.4326241134751774, "no_speech_prob": 0.006230222061276436}, {"id": 92, "seek": 54704, "start": 561.16, "end": 563.92, "text": " And here you have the math of why this works.", "tokens": [51070, 400, 510, 291, 362, 264, 5221, 295, 983, 341, 1985, 13, 51208], "temperature": 0.0, "avg_logprob": -0.27174072265625, "compression_ratio": 1.4326241134751774, "no_speech_prob": 0.006230222061276436}, {"id": 93, "seek": 56392, "start": 563.92, "end": 579.04, "text": " So if we go Y minus J S E is X S minus J S E. X was J E plus J C so J E plus J C S", "tokens": [50364, 407, 498, 321, 352, 398, 3175, 508, 318, 462, 307, 1783, 318, 3175, 508, 318, 462, 13, 1783, 390, 508, 462, 1804, 508, 383, 370, 508, 462, 1804, 508, 383, 318, 51120], "temperature": 0.0, "avg_logprob": -0.14431549186137185, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.03589372709393501}, {"id": 94, "seek": 56392, "start": 579.04, "end": 587.4, "text": " and if you compute this it gives you J E S plus J C S minus J S E which gives J C S", "tokens": [51120, 293, 498, 291, 14722, 341, 309, 2709, 291, 508, 462, 318, 1804, 508, 383, 318, 3175, 508, 318, 462, 597, 2709, 508, 383, 318, 51538], "temperature": 0.0, "avg_logprob": -0.14431549186137185, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.03589372709393501}, {"id": 95, "seek": 56392, "start": 587.4, "end": 588.64, "text": " which is K.", "tokens": [51538, 597, 307, 591, 13, 51600], "temperature": 0.0, "avg_logprob": -0.14431549186137185, "compression_ratio": 1.6181818181818182, "no_speech_prob": 0.03589372709393501}, {"id": 96, "seek": 58864, "start": 588.64, "end": 599.24, "text": " So with this manipulation it can find the original key again and decrypt the message.", "tokens": [50364, 407, 365, 341, 26475, 309, 393, 915, 264, 3380, 2141, 797, 293, 979, 627, 662, 264, 3636, 13, 50894], "temperature": 0.0, "avg_logprob": -0.14201954264699676, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.02446143515408039}, {"id": 97, "seek": 58864, "start": 599.24, "end": 602.68, "text": " So what does it give us?", "tokens": [50894, 407, 437, 775, 309, 976, 505, 30, 51066], "temperature": 0.0, "avg_logprob": -0.14201954264699676, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.02446143515408039}, {"id": 98, "seek": 58864, "start": 602.68, "end": 606.08, "text": " So let's say an attacker gain access to the client.", "tokens": [51066, 407, 718, 311, 584, 364, 35871, 6052, 2105, 281, 264, 6423, 13, 51236], "temperature": 0.0, "avg_logprob": -0.14201954264699676, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.02446143515408039}, {"id": 99, "seek": 58864, "start": 606.08, "end": 610.96, "text": " As I said at this point the client discarded the key only as a ciphertext cannot decrypt", "tokens": [51236, 1018, 286, 848, 412, 341, 935, 264, 6423, 45469, 264, 2141, 787, 382, 257, 269, 21240, 25111, 2644, 979, 627, 662, 51480], "temperature": 0.0, "avg_logprob": -0.14201954264699676, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.02446143515408039}, {"id": 100, "seek": 58864, "start": 610.96, "end": 617.24, "text": " so you gain access to the client cannot do anything.", "tokens": [51480, 370, 291, 6052, 2105, 281, 264, 6423, 2644, 360, 1340, 13, 51794], "temperature": 0.0, "avg_logprob": -0.14201954264699676, "compression_ratio": 1.6795580110497237, "no_speech_prob": 0.02446143515408039}, {"id": 101, "seek": 61724, "start": 617.24, "end": 621.4, "text": " Take access to the tongue server.", "tokens": [50364, 3664, 2105, 281, 264, 10601, 7154, 13, 50572], "temperature": 0.0, "avg_logprob": -0.2529314458370209, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.05809785798192024}, {"id": 102, "seek": 61724, "start": 621.4, "end": 627.6800000000001, "text": " Tongue server doesn't receive any information at no point in this protocol so you have access", "tokens": [50572, 26946, 622, 7154, 1177, 380, 4774, 604, 1589, 412, 572, 935, 294, 341, 10336, 370, 291, 362, 2105, 50886], "temperature": 0.0, "avg_logprob": -0.2529314458370209, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.05809785798192024}, {"id": 103, "seek": 61724, "start": 627.6800000000001, "end": 634.52, "text": " of the tongue server you cannot get the secret.", "tokens": [50886, 295, 264, 10601, 7154, 291, 2644, 483, 264, 4054, 13, 51228], "temperature": 0.0, "avg_logprob": -0.2529314458370209, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.05809785798192024}, {"id": 104, "seek": 61724, "start": 634.52, "end": 641.32, "text": " And if you intercept all messages here and here because of what I said like the Diffiel", "tokens": [51228, 400, 498, 291, 24700, 439, 7897, 510, 293, 510, 570, 295, 437, 286, 848, 411, 264, 413, 3661, 1187, 51568], "temperature": 0.0, "avg_logprob": -0.2529314458370209, "compression_ratio": 1.5380116959064327, "no_speech_prob": 0.05809785798192024}, {"id": 105, "seek": 64132, "start": 641.32, "end": 647.32, "text": " Man assumption it is very hard to reverse these operations you also get no information.", "tokens": [50364, 2458, 15302, 309, 307, 588, 1152, 281, 9943, 613, 7705, 291, 611, 483, 572, 1589, 13, 50664], "temperature": 0.0, "avg_logprob": -0.24232820842577063, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.28907954692840576}, {"id": 106, "seek": 64132, "start": 647.32, "end": 654.4000000000001, "text": " So basically the only way for an attacker to have the secret would be to get access", "tokens": [50664, 407, 1936, 264, 787, 636, 337, 364, 35871, 281, 362, 264, 4054, 576, 312, 281, 483, 2105, 51018], "temperature": 0.0, "avg_logprob": -0.24232820842577063, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.28907954692840576}, {"id": 107, "seek": 64132, "start": 654.4000000000001, "end": 660.72, "text": " of the client and the server at the same time or to be on the local network where you have", "tokens": [51018, 295, 264, 6423, 293, 264, 7154, 412, 264, 912, 565, 420, 281, 312, 322, 264, 2654, 3209, 689, 291, 362, 51334], "temperature": 0.0, "avg_logprob": -0.24232820842577063, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.28907954692840576}, {"id": 108, "seek": 64132, "start": 660.72, "end": 662.6800000000001, "text": " your tongue server.", "tokens": [51334, 428, 10601, 7154, 13, 51432], "temperature": 0.0, "avg_logprob": -0.24232820842577063, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.28907954692840576}, {"id": 109, "seek": 64132, "start": 662.6800000000001, "end": 666.0, "text": " That's the principle of how it works.", "tokens": [51432, 663, 311, 264, 8665, 295, 577, 309, 1985, 13, 51598], "temperature": 0.0, "avg_logprob": -0.24232820842577063, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.28907954692840576}, {"id": 110, "seek": 64132, "start": 666.0, "end": 668.2, "text": " Let's talk about the Nixxas implementation now.", "tokens": [51598, 961, 311, 751, 466, 264, 426, 970, 87, 296, 11420, 586, 13, 51708], "temperature": 0.0, "avg_logprob": -0.24232820842577063, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.28907954692840576}, {"id": 111, "seek": 66820, "start": 668.2, "end": 671.96, "text": " Okay thank you Julien for the theory.", "tokens": [50364, 1033, 1309, 291, 7174, 1053, 337, 264, 5261, 13, 50552], "temperature": 0.0, "avg_logprob": -0.2608790397644043, "compression_ratio": 1.5201793721973094, "no_speech_prob": 0.12860772013664246}, {"id": 112, "seek": 66820, "start": 671.96, "end": 676.76, "text": " Now we're going to dive in the Nixxas implementation.", "tokens": [50552, 823, 321, 434, 516, 281, 9192, 294, 264, 426, 970, 87, 296, 11420, 13, 50792], "temperature": 0.0, "avg_logprob": -0.2608790397644043, "compression_ratio": 1.5201793721973094, "no_speech_prob": 0.12860772013664246}, {"id": 113, "seek": 66820, "start": 676.76, "end": 679.08, "text": " You'll see that it's really simple.", "tokens": [50792, 509, 603, 536, 300, 309, 311, 534, 2199, 13, 50908], "temperature": 0.0, "avg_logprob": -0.2608790397644043, "compression_ratio": 1.5201793721973094, "no_speech_prob": 0.12860772013664246}, {"id": 114, "seek": 66820, "start": 679.08, "end": 683.5200000000001, "text": " So if you have your Nixxas laptop with you you can do it live.", "tokens": [50908, 407, 498, 291, 362, 428, 426, 970, 87, 296, 10732, 365, 291, 291, 393, 360, 309, 1621, 13, 51130], "temperature": 0.0, "avg_logprob": -0.2608790397644043, "compression_ratio": 1.5201793721973094, "no_speech_prob": 0.12860772013664246}, {"id": 115, "seek": 66820, "start": 683.5200000000001, "end": 687.0400000000001, "text": " If you don't well maybe install Nixxas.", "tokens": [51130, 759, 291, 500, 380, 731, 1310, 3625, 426, 970, 87, 296, 13, 51306], "temperature": 0.0, "avg_logprob": -0.2608790397644043, "compression_ratio": 1.5201793721973094, "no_speech_prob": 0.12860772013664246}, {"id": 116, "seek": 66820, "start": 687.0400000000001, "end": 691.5200000000001, "text": " And so first you have to deploy your tongue module.", "tokens": [51306, 400, 370, 700, 291, 362, 281, 7274, 428, 10601, 10088, 13, 51530], "temperature": 0.0, "avg_logprob": -0.2608790397644043, "compression_ratio": 1.5201793721973094, "no_speech_prob": 0.12860772013664246}, {"id": 117, "seek": 66820, "start": 691.5200000000001, "end": 694.44, "text": " So it was added by a Jeff Proch.", "tokens": [51530, 407, 309, 390, 3869, 538, 257, 7506, 1705, 339, 13, 51676], "temperature": 0.0, "avg_logprob": -0.2608790397644043, "compression_ratio": 1.5201793721973094, "no_speech_prob": 0.12860772013664246}, {"id": 118, "seek": 66820, "start": 694.44, "end": 697.0, "text": " Who is here by the way?", "tokens": [51676, 2102, 307, 510, 538, 264, 636, 30, 51804], "temperature": 0.0, "avg_logprob": -0.2608790397644043, "compression_ratio": 1.5201793721973094, "no_speech_prob": 0.12860772013664246}, {"id": 119, "seek": 69700, "start": 697.0, "end": 703.24, "text": " And you can enable it with simply with services.tongue that's enabled.", "tokens": [50364, 400, 291, 393, 9528, 309, 365, 2935, 365, 3328, 13, 83, 556, 622, 300, 311, 15172, 13, 50676], "temperature": 0.0, "avg_logprob": -0.2418360990636489, "compression_ratio": 1.5628415300546448, "no_speech_prob": 0.10513950139284134}, {"id": 120, "seek": 69700, "start": 703.24, "end": 710.4, "text": " Then there's only one parameter really important is the IP address is allow which is critical", "tokens": [50676, 1396, 456, 311, 787, 472, 13075, 534, 1021, 307, 264, 8671, 2985, 307, 2089, 597, 307, 4924, 51034], "temperature": 0.0, "avg_logprob": -0.2418360990636489, "compression_ratio": 1.5628415300546448, "no_speech_prob": 0.10513950139284134}, {"id": 121, "seek": 69700, "start": 710.4, "end": 717.2, "text": " because it defines the subnet that you trust because every machine on this subnet will", "tokens": [51034, 570, 309, 23122, 264, 1422, 7129, 300, 291, 3361, 570, 633, 3479, 322, 341, 1422, 7129, 486, 51374], "temperature": 0.0, "avg_logprob": -0.2418360990636489, "compression_ratio": 1.5628415300546448, "no_speech_prob": 0.10513950139284134}, {"id": 122, "seek": 69700, "start": 717.2, "end": 719.04, "text": " have access to your tongue server.", "tokens": [51374, 362, 2105, 281, 428, 10601, 7154, 13, 51466], "temperature": 0.0, "avg_logprob": -0.2418360990636489, "compression_ratio": 1.5628415300546448, "no_speech_prob": 0.10513950139284134}, {"id": 123, "seek": 71904, "start": 719.04, "end": 729.76, "text": " And if someone gets your secret.jw using only tongue well it can decipher it.", "tokens": [50364, 400, 498, 1580, 2170, 428, 4054, 13, 73, 86, 1228, 787, 10601, 731, 309, 393, 49859, 309, 13, 50900], "temperature": 0.0, "avg_logprob": -0.1535458729184907, "compression_ratio": 1.5204081632653061, "no_speech_prob": 0.08629477024078369}, {"id": 124, "seek": 71904, "start": 729.76, "end": 732.5999999999999, "text": " So you put a network that you trust.", "tokens": [50900, 407, 291, 829, 257, 3209, 300, 291, 3361, 13, 51042], "temperature": 0.0, "avg_logprob": -0.1535458729184907, "compression_ratio": 1.5204081632653061, "no_speech_prob": 0.08629477024078369}, {"id": 125, "seek": 71904, "start": 732.5999999999999, "end": 737.12, "text": " Then you don't forget to open the firewall as I did a lot of time.", "tokens": [51042, 1396, 291, 500, 380, 2870, 281, 1269, 264, 36109, 382, 286, 630, 257, 688, 295, 565, 13, 51268], "temperature": 0.0, "avg_logprob": -0.1535458729184907, "compression_ratio": 1.5204081632653061, "no_speech_prob": 0.08629477024078369}, {"id": 126, "seek": 71904, "start": 737.12, "end": 739.5999999999999, "text": " So you can change the port.", "tokens": [51268, 407, 291, 393, 1319, 264, 2436, 13, 51392], "temperature": 0.0, "avg_logprob": -0.1535458729184907, "compression_ratio": 1.5204081632653061, "no_speech_prob": 0.08629477024078369}, {"id": 127, "seek": 71904, "start": 739.5999999999999, "end": 745.5999999999999, "text": " This is the default port in the Nixxas module but you can put it on port 80 if you want.", "tokens": [51392, 639, 307, 264, 7576, 2436, 294, 264, 426, 970, 87, 296, 10088, 457, 291, 393, 829, 309, 322, 2436, 4688, 498, 291, 528, 13, 51692], "temperature": 0.0, "avg_logprob": -0.1535458729184907, "compression_ratio": 1.5204081632653061, "no_speech_prob": 0.08629477024078369}, {"id": 128, "seek": 74560, "start": 745.6, "end": 750.0400000000001, "text": " So now you have your tongue server.", "tokens": [50364, 407, 586, 291, 362, 428, 10601, 7154, 13, 50586], "temperature": 0.0, "avg_logprob": -0.39421188831329346, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.06532718241214752}, {"id": 129, "seek": 74560, "start": 750.0400000000001, "end": 758.4, "text": " Then the Clevis module it was packaged inside the init.rd already existed as a Clevis as", "tokens": [50586, 1396, 264, 8834, 4938, 10088, 309, 390, 38162, 1854, 264, 3157, 13, 7800, 1217, 13135, 382, 257, 8834, 4938, 382, 51004], "temperature": 0.0, "avg_logprob": -0.39421188831329346, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.06532718241214752}, {"id": 130, "seek": 74560, "start": 758.4, "end": 761.48, "text": " an Insignix packages.", "tokens": [51004, 364, 9442, 788, 970, 17401, 13, 51158], "temperature": 0.0, "avg_logprob": -0.39421188831329346, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.06532718241214752}, {"id": 131, "seek": 74560, "start": 761.48, "end": 772.48, "text": " So basically it works in init.rd both system dstage1 and scripted init.rd.", "tokens": [51158, 407, 1936, 309, 1985, 294, 3157, 13, 7800, 1293, 1185, 274, 17882, 16, 293, 5755, 292, 3157, 13, 7800, 13, 51708], "temperature": 0.0, "avg_logprob": -0.39421188831329346, "compression_ratio": 1.4539473684210527, "no_speech_prob": 0.06532718241214752}, {"id": 132, "seek": 77248, "start": 772.48, "end": 783.64, "text": " So what it does is before decrypting the root partition well it tries to do Clevis decrypt", "tokens": [50364, 407, 437, 309, 775, 307, 949, 979, 627, 662, 278, 264, 5593, 24808, 731, 309, 9898, 281, 360, 8834, 4938, 979, 627, 662, 50922], "temperature": 0.0, "avg_logprob": -0.2017931439983311, "compression_ratio": 1.6066666666666667, "no_speech_prob": 0.28629523515701294}, {"id": 133, "seek": 77248, "start": 783.64, "end": 791.76, "text": " with the secret.jwe which was put inside your init.rd secret.", "tokens": [50922, 365, 264, 4054, 13, 73, 826, 597, 390, 829, 1854, 428, 3157, 13, 7800, 4054, 13, 51328], "temperature": 0.0, "avg_logprob": -0.2017931439983311, "compression_ratio": 1.6066666666666667, "no_speech_prob": 0.28629523515701294}, {"id": 134, "seek": 77248, "start": 791.76, "end": 799.9200000000001, "text": " And if it succeeds then it pipes the value to decrypt the root partition and if it fails", "tokens": [51328, 400, 498, 309, 49263, 550, 309, 21882, 264, 2158, 281, 979, 627, 662, 264, 5593, 24808, 293, 498, 309, 18199, 51736], "temperature": 0.0, "avg_logprob": -0.2017931439983311, "compression_ratio": 1.6066666666666667, "no_speech_prob": 0.28629523515701294}, {"id": 135, "seek": 79992, "start": 799.92, "end": 805.88, "text": " it falls back and interactive unlocking.", "tokens": [50364, 309, 8804, 646, 293, 15141, 49620, 13, 50662], "temperature": 0.0, "avg_logprob": -0.2516221232797908, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.06265435367822647}, {"id": 136, "seek": 79992, "start": 805.88, "end": 808.5999999999999, "text": " So how now how to use it?", "tokens": [50662, 407, 577, 586, 577, 281, 764, 309, 30, 50798], "temperature": 0.0, "avg_logprob": -0.2516221232797908, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.06265435367822647}, {"id": 137, "seek": 79992, "start": 808.5999999999999, "end": 810.8, "text": " First you have to generate the secret.", "tokens": [50798, 2386, 291, 362, 281, 8460, 264, 4054, 13, 50908], "temperature": 0.0, "avg_logprob": -0.2516221232797908, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.06265435367822647}, {"id": 138, "seek": 79992, "start": 810.8, "end": 816.16, "text": " So it's really easy you just type in your secret and you pipe it.", "tokens": [50908, 407, 309, 311, 534, 1858, 291, 445, 2010, 294, 428, 4054, 293, 291, 11240, 309, 13, 51176], "temperature": 0.0, "avg_logprob": -0.2516221232797908, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.06265435367822647}, {"id": 139, "seek": 79992, "start": 816.16, "end": 823.64, "text": " Be careful because if you have a you will most certainly not have a return carriage inside", "tokens": [51176, 879, 5026, 570, 498, 291, 362, 257, 291, 486, 881, 3297, 406, 362, 257, 2736, 31811, 1854, 51550], "temperature": 0.0, "avg_logprob": -0.2516221232797908, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.06265435367822647}, {"id": 140, "seek": 79992, "start": 823.64, "end": 829.48, "text": " your secret so you have to add a dash n when you pipe to Clevis.", "tokens": [51550, 428, 4054, 370, 291, 362, 281, 909, 257, 8240, 297, 562, 291, 11240, 281, 8834, 4938, 13, 51842], "temperature": 0.0, "avg_logprob": -0.2516221232797908, "compression_ratio": 1.6515151515151516, "no_speech_prob": 0.06265435367822647}, {"id": 141, "seek": 82948, "start": 829.48, "end": 836.84, "text": " And then you write your Clevis configuration as we showed earlier.", "tokens": [50364, 400, 550, 291, 2464, 428, 8834, 4938, 11694, 382, 321, 4712, 3071, 13, 50732], "temperature": 0.0, "avg_logprob": -0.33178232978372013, "compression_ratio": 1.7172774869109948, "no_speech_prob": 0.05248335748910904}, {"id": 142, "seek": 82948, "start": 836.84, "end": 841.0, "text": " Then when you have your secret you can put it in your etc.", "tokens": [50732, 1396, 562, 291, 362, 428, 4054, 291, 393, 829, 309, 294, 428, 5183, 13, 50940], "temperature": 0.0, "avg_logprob": -0.33178232978372013, "compression_ratio": 1.7172774869109948, "no_speech_prob": 0.05248335748910904}, {"id": 143, "seek": 82948, "start": 841.0, "end": 846.6800000000001, "text": " in xy folder or in your flake and then you write this line which is booted in the Clevis", "tokens": [50940, 294, 2031, 88, 10820, 420, 294, 428, 932, 619, 293, 550, 291, 2464, 341, 1622, 597, 307, 11450, 292, 294, 264, 8834, 4938, 51224], "temperature": 0.0, "avg_logprob": -0.33178232978372013, "compression_ratio": 1.7172774869109948, "no_speech_prob": 0.05248335748910904}, {"id": 144, "seek": 82948, "start": 846.6800000000001, "end": 847.96, "text": " devices.", "tokens": [51224, 5759, 13, 51288], "temperature": 0.0, "avg_logprob": -0.33178232978372013, "compression_ratio": 1.7172774869109948, "no_speech_prob": 0.05248335748910904}, {"id": 145, "seek": 82948, "start": 847.96, "end": 855.8000000000001, "text": " Then you put here the name of the device inside your file system dot slash root partition", "tokens": [51288, 1396, 291, 829, 510, 264, 1315, 295, 264, 4302, 1854, 428, 3991, 1185, 5893, 17330, 5593, 24808, 51680], "temperature": 0.0, "avg_logprob": -0.33178232978372013, "compression_ratio": 1.7172774869109948, "no_speech_prob": 0.05248335748910904}, {"id": 146, "seek": 82948, "start": 855.8000000000001, "end": 857.96, "text": " configuration.", "tokens": [51680, 11694, 13, 51788], "temperature": 0.0, "avg_logprob": -0.33178232978372013, "compression_ratio": 1.7172774869109948, "no_speech_prob": 0.05248335748910904}, {"id": 147, "seek": 85796, "start": 857.96, "end": 860.6, "text": " So it has to be the same name.", "tokens": [50364, 407, 309, 575, 281, 312, 264, 912, 1315, 13, 50496], "temperature": 0.0, "avg_logprob": -0.27396256583077566, "compression_ratio": 1.2264150943396226, "no_speech_prob": 0.6471331119537354}, {"id": 148, "seek": 85796, "start": 860.6, "end": 868.84, "text": " And then well this works only if your root partition is encrypted using one of these", "tokens": [50496, 400, 550, 731, 341, 1985, 787, 498, 428, 5593, 24808, 307, 36663, 1228, 472, 295, 613, 50908], "temperature": 0.0, "avg_logprob": -0.27396256583077566, "compression_ratio": 1.2264150943396226, "no_speech_prob": 0.6471331119537354}, {"id": 149, "seek": 85796, "start": 868.84, "end": 872.44, "text": " three methods.", "tokens": [50908, 1045, 7150, 13, 51088], "temperature": 0.0, "avg_logprob": -0.27396256583077566, "compression_ratio": 1.2264150943396226, "no_speech_prob": 0.6471331119537354}, {"id": 150, "seek": 91796, "start": 917.96, "end": 927.96, "text": " The client has also a tpm 2.0 device and what we require.", "tokens": [50364, 440, 6423, 575, 611, 257, 256, 14395, 568, 13, 15, 4302, 293, 437, 321, 3651, 13, 50864], "temperature": 0.0, "avg_logprob": -0.22992029190063476, "compression_ratio": 1.4110429447852761, "no_speech_prob": 0.08564704656600952}, {"id": 151, "seek": 91796, "start": 927.96, "end": 937.1600000000001, "text": " So first you type in your secret in a secret way so it goes to the secret environment variable.", "tokens": [50864, 407, 700, 291, 2010, 294, 428, 4054, 294, 257, 4054, 636, 370, 309, 1709, 281, 264, 4054, 2823, 7006, 13, 51324], "temperature": 0.0, "avg_logprob": -0.22992029190063476, "compression_ratio": 1.4110429447852761, "no_speech_prob": 0.08564704656600952}, {"id": 152, "seek": 91796, "start": 937.1600000000001, "end": 943.24, "text": " Then we state the config that we wrote previously in JSON format for Clevis.", "tokens": [51324, 1396, 321, 1785, 264, 6662, 300, 321, 4114, 8046, 294, 31828, 7877, 337, 8834, 4938, 13, 51628], "temperature": 0.0, "avg_logprob": -0.22992029190063476, "compression_ratio": 1.4110429447852761, "no_speech_prob": 0.08564704656600952}, {"id": 153, "seek": 94324, "start": 943.24, "end": 955.32, "text": " So you can see a threshold of 2 for a quick but just.", "tokens": [50364, 407, 291, 393, 536, 257, 14678, 295, 568, 337, 257, 1702, 457, 445, 13, 50968], "temperature": 0.0, "avg_logprob": -0.4091919597826506, "compression_ratio": 1.3185840707964602, "no_speech_prob": 0.6672590374946594}, {"id": 154, "seek": 94324, "start": 955.32, "end": 964.76, "text": " Then you can pipe your secret to Clevis and creep the secret sharing and with the configuration", "tokens": [50968, 1396, 291, 393, 11240, 428, 4054, 281, 8834, 4938, 293, 9626, 264, 4054, 5414, 293, 365, 264, 11694, 51440], "temperature": 0.0, "avg_logprob": -0.4091919597826506, "compression_ratio": 1.3185840707964602, "no_speech_prob": 0.6672590374946594}, {"id": 155, "seek": 96476, "start": 964.76, "end": 969.24, "text": " that you use.", "tokens": [50364, 300, 291, 764, 13, 50588], "temperature": 0.0, "avg_logprob": -0.3658471387975356, "compression_ratio": 1.5034013605442176, "no_speech_prob": 0.19584304094314575}, {"id": 156, "seek": 96476, "start": 969.24, "end": 974.8, "text": " Snow in post.", "tokens": [50588, 14827, 294, 2183, 13, 50866], "temperature": 0.0, "avg_logprob": -0.3658471387975356, "compression_ratio": 1.5034013605442176, "no_speech_prob": 0.19584304094314575}, {"id": 157, "seek": 96476, "start": 974.8, "end": 978.52, "text": " So this means that the tongue servers have been reached so that's why you actually have", "tokens": [50866, 407, 341, 1355, 300, 264, 10601, 15909, 362, 668, 6488, 370, 300, 311, 983, 291, 767, 362, 51052], "temperature": 0.0, "avg_logprob": -0.3658471387975356, "compression_ratio": 1.5034013605442176, "no_speech_prob": 0.19584304094314575}, {"id": 158, "seek": 96476, "start": 978.52, "end": 981.0, "text": " to choose the sign in keys.", "tokens": [51052, 281, 2826, 264, 1465, 294, 9317, 13, 51176], "temperature": 0.0, "avg_logprob": -0.3658471387975356, "compression_ratio": 1.5034013605442176, "no_speech_prob": 0.19584304094314575}, {"id": 159, "seek": 96476, "start": 981.0, "end": 982.92, "text": " Both tongue servers.", "tokens": [51176, 6767, 10601, 15909, 13, 51272], "temperature": 0.0, "avg_logprob": -0.3658471387975356, "compression_ratio": 1.5034013605442176, "no_speech_prob": 0.19584304094314575}, {"id": 160, "seek": 96476, "start": 982.92, "end": 984.92, "text": " So now you have your secret.", "tokens": [51272, 407, 586, 291, 362, 428, 4054, 13, 51372], "temperature": 0.0, "avg_logprob": -0.3658471387975356, "compression_ratio": 1.5034013605442176, "no_speech_prob": 0.19584304094314575}, {"id": 161, "seek": 96476, "start": 984.92, "end": 989.64, "text": " You can try and decrypt it.", "tokens": [51372, 509, 393, 853, 293, 979, 627, 662, 309, 13, 51608], "temperature": 0.0, "avg_logprob": -0.3658471387975356, "compression_ratio": 1.5034013605442176, "no_speech_prob": 0.19584304094314575}, {"id": 162, "seek": 98964, "start": 989.64, "end": 995.36, "text": " Your secret works.", "tokens": [50364, 2260, 4054, 1985, 13, 50650], "temperature": 0.0, "avg_logprob": -0.227287426800795, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.1413353830575943}, {"id": 163, "seek": 98964, "start": 995.36, "end": 999.68, "text": " And now you have to modify your configuration.", "tokens": [50650, 400, 586, 291, 362, 281, 16927, 428, 11694, 13, 50866], "temperature": 0.0, "avg_logprob": -0.227287426800795, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.1413353830575943}, {"id": 164, "seek": 98964, "start": 999.68, "end": 1005.48, "text": " So first thing because we're using the tpm you have to add the canal module.", "tokens": [50866, 407, 700, 551, 570, 321, 434, 1228, 264, 256, 14395, 291, 362, 281, 909, 264, 9911, 10088, 13, 51156], "temperature": 0.0, "avg_logprob": -0.227287426800795, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.1413353830575943}, {"id": 165, "seek": 98964, "start": 1005.48, "end": 1014.2, "text": " So I added both but I think you can probably just add one if you know which one.", "tokens": [51156, 407, 286, 3869, 1293, 457, 286, 519, 291, 393, 1391, 445, 909, 472, 498, 291, 458, 597, 472, 13, 51592], "temperature": 0.0, "avg_logprob": -0.227287426800795, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.1413353830575943}, {"id": 166, "seek": 98964, "start": 1014.2, "end": 1017.76, "text": " Then you add the boot in the configuration.", "tokens": [51592, 1396, 291, 909, 264, 11450, 294, 264, 11694, 13, 51770], "temperature": 0.0, "avg_logprob": -0.227287426800795, "compression_ratio": 1.5798816568047338, "no_speech_prob": 0.1413353830575943}, {"id": 167, "seek": 101776, "start": 1017.76, "end": 1030.48, "text": " So it has to map.", "tokens": [50364, 407, 309, 575, 281, 4471, 13, 51000], "temperature": 0.0, "avg_logprob": -0.29591912236706963, "compression_ratio": 1.141025641025641, "no_speech_prob": 0.079242043197155}, {"id": 168, "seek": 101776, "start": 1030.48, "end": 1036.48, "text": " So it had to match the file system configuration.", "tokens": [51000, 407, 309, 632, 281, 2995, 264, 3991, 1185, 11694, 13, 51300], "temperature": 0.0, "avg_logprob": -0.29591912236706963, "compression_ratio": 1.141025641025641, "no_speech_prob": 0.079242043197155}, {"id": 169, "seek": 101776, "start": 1036.48, "end": 1041.16, "text": " Then you can rebuild.", "tokens": [51300, 1396, 291, 393, 16877, 13, 51534], "temperature": 0.0, "avg_logprob": -0.29591912236706963, "compression_ratio": 1.141025641025641, "no_speech_prob": 0.079242043197155}, {"id": 170, "seek": 104116, "start": 1041.16, "end": 1047.0400000000002, "text": " And while we're rebuild we can turn off one of the tongue sockets.", "tokens": [50364, 400, 1339, 321, 434, 16877, 321, 393, 1261, 766, 472, 295, 264, 10601, 370, 11984, 13, 50658], "temperature": 0.0, "avg_logprob": -0.4321347431964185, "compression_ratio": 1.575, "no_speech_prob": 0.22341877222061157}, {"id": 171, "seek": 104116, "start": 1047.0400000000002, "end": 1049.0800000000002, "text": " So the tongue one server.", "tokens": [50658, 407, 264, 10601, 472, 7154, 13, 50760], "temperature": 0.0, "avg_logprob": -0.4321347431964185, "compression_ratio": 1.575, "no_speech_prob": 0.22341877222061157}, {"id": 172, "seek": 104116, "start": 1049.0800000000002, "end": 1058.0400000000002, "text": " And yes because we defined in the threshold that just one of two is required.", "tokens": [50760, 400, 2086, 570, 321, 7642, 294, 264, 14678, 300, 445, 472, 295, 732, 307, 4739, 13, 51208], "temperature": 0.0, "avg_logprob": -0.4321347431964185, "compression_ratio": 1.575, "no_speech_prob": 0.22341877222061157}, {"id": 173, "seek": 104116, "start": 1058.0400000000002, "end": 1064.4, "text": " Then we reboot and we see that it's not a reachable error communicating but it's still", "tokens": [51208, 1396, 321, 33818, 293, 321, 536, 300, 309, 311, 406, 257, 2524, 712, 6713, 17559, 457, 309, 311, 920, 51526], "temperature": 0.0, "avg_logprob": -0.4321347431964185, "compression_ratio": 1.575, "no_speech_prob": 0.22341877222061157}, {"id": 174, "seek": 104116, "start": 1064.4, "end": 1066.88, "text": " boots very quickly.", "tokens": [51526, 15194, 588, 2661, 13, 51650], "temperature": 0.0, "avg_logprob": -0.4321347431964185, "compression_ratio": 1.575, "no_speech_prob": 0.22341877222061157}, {"id": 175, "seek": 104116, "start": 1066.88, "end": 1069.92, "text": " Then it's locked out partition right.", "tokens": [51650, 1396, 309, 311, 9376, 484, 24808, 558, 13, 51802], "temperature": 0.0, "avg_logprob": -0.4321347431964185, "compression_ratio": 1.575, "no_speech_prob": 0.22341877222061157}, {"id": 176, "seek": 106992, "start": 1069.92, "end": 1084.24, "text": " So it works but then you turn off the second tongue server just to check that.", "tokens": [50364, 407, 309, 1985, 457, 550, 291, 1261, 766, 264, 1150, 10601, 7154, 445, 281, 1520, 300, 13, 51080], "temperature": 0.0, "avg_logprob": -0.23184727986653647, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.026578908786177635}, {"id": 177, "seek": 106992, "start": 1084.24, "end": 1088.76, "text": " And then you can see that there are two errors for both tongue servers.", "tokens": [51080, 400, 550, 291, 393, 536, 300, 456, 366, 732, 13603, 337, 1293, 10601, 15909, 13, 51306], "temperature": 0.0, "avg_logprob": -0.23184727986653647, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.026578908786177635}, {"id": 178, "seek": 106992, "start": 1088.76, "end": 1092.04, "text": " And so there's an error reading the passphrase.", "tokens": [51306, 400, 370, 456, 311, 364, 6713, 3760, 264, 1320, 44598, 651, 13, 51470], "temperature": 0.0, "avg_logprob": -0.23184727986653647, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.026578908786177635}, {"id": 179, "seek": 106992, "start": 1092.04, "end": 1096.68, "text": " And now you have to type in your password so if you didn't set up an open SSH server", "tokens": [51470, 400, 586, 291, 362, 281, 2010, 294, 428, 11524, 370, 498, 291, 994, 380, 992, 493, 364, 1269, 12238, 39, 7154, 51702], "temperature": 0.0, "avg_logprob": -0.23184727986653647, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.026578908786177635}, {"id": 180, "seek": 109668, "start": 1096.68, "end": 1110.2, "text": " while you're basically you have to reboot your machine from a.", "tokens": [50364, 1339, 291, 434, 1936, 291, 362, 281, 33818, 428, 3479, 490, 257, 13, 51040], "temperature": 0.0, "avg_logprob": -0.42904427268288353, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.2843901515007019}, {"id": 181, "seek": 109668, "start": 1110.2, "end": 1111.3600000000001, "text": " Okay.", "tokens": [51040, 1033, 13, 51098], "temperature": 0.0, "avg_logprob": -0.42904427268288353, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.2843901515007019}, {"id": 182, "seek": 109668, "start": 1111.3600000000001, "end": 1113.48, "text": " So what's left to do?", "tokens": [51098, 407, 437, 311, 1411, 281, 360, 30, 51204], "temperature": 0.0, "avg_logprob": -0.42904427268288353, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.2843901515007019}, {"id": 183, "seek": 109668, "start": 1113.48, "end": 1118.52, "text": " Well you can add more pins to match your needs.", "tokens": [51204, 1042, 291, 393, 909, 544, 16392, 281, 2995, 428, 2203, 13, 51456], "temperature": 0.0, "avg_logprob": -0.42904427268288353, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.2843901515007019}, {"id": 184, "seek": 109668, "start": 1118.52, "end": 1123.4, "text": " So one useful one would be Yubiki.", "tokens": [51456, 407, 472, 4420, 472, 576, 312, 398, 836, 9850, 13, 51700], "temperature": 0.0, "avg_logprob": -0.42904427268288353, "compression_ratio": 1.300751879699248, "no_speech_prob": 0.2843901515007019}, {"id": 185, "seek": 112340, "start": 1123.4, "end": 1130.68, "text": " And then if you have like an exotic encryption solution maybe you can try and use them with", "tokens": [50364, 400, 550, 498, 291, 362, 411, 364, 27063, 29575, 3827, 1310, 291, 393, 853, 293, 764, 552, 365, 50728], "temperature": 0.0, "avg_logprob": -0.32748719417687616, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.2599274516105652}, {"id": 186, "seek": 112340, "start": 1130.68, "end": 1135.3600000000001, "text": " Clevis for instance Veracript or I don't know whatever.", "tokens": [50728, 8834, 4938, 337, 5197, 4281, 326, 470, 662, 420, 286, 500, 380, 458, 2035, 13, 50962], "temperature": 0.0, "avg_logprob": -0.32748719417687616, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.2599274516105652}, {"id": 187, "seek": 112340, "start": 1135.3600000000001, "end": 1139.76, "text": " So there's many other solutions to use.", "tokens": [50962, 407, 456, 311, 867, 661, 6547, 281, 764, 13, 51182], "temperature": 0.0, "avg_logprob": -0.32748719417687616, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.2599274516105652}, {"id": 188, "seek": 112340, "start": 1139.76, "end": 1143.16, "text": " So feel free to contribute and thank you very much for your attention.", "tokens": [51182, 407, 841, 1737, 281, 10586, 293, 1309, 291, 588, 709, 337, 428, 3202, 13, 51352], "temperature": 0.0, "avg_logprob": -0.32748719417687616, "compression_ratio": 1.4827586206896552, "no_speech_prob": 0.2599274516105652}, {"id": 189, "seek": 114316, "start": 1143.16, "end": 1156.8400000000001, "text": " We don't have a mic so shout the question and repeat it if you have a question.", "tokens": [50364, 492, 500, 380, 362, 257, 3123, 370, 8043, 264, 1168, 293, 7149, 309, 498, 291, 362, 257, 1168, 13, 51048], "temperature": 0.0, "avg_logprob": -0.5138461900793988, "compression_ratio": 1.1126760563380282, "no_speech_prob": 0.8752471208572388}, {"id": 190, "seek": 115684, "start": 1156.84, "end": 1183.56, "text": " Question was in case where the tongue servers are down can you still SSH to input your password", "tokens": [50364, 14464, 390, 294, 1389, 689, 264, 10601, 15909, 366, 760, 393, 291, 920, 12238, 39, 281, 4846, 428, 11524, 51700], "temperature": 0.0, "avg_logprob": -0.3622209300165591, "compression_ratio": 1.144578313253012, "no_speech_prob": 0.1289854198694229}, {"id": 191, "seek": 118356, "start": 1183.56, "end": 1186.76, "text": " or are you just out of luck?", "tokens": [50364, 420, 366, 291, 445, 484, 295, 3668, 30, 50524], "temperature": 0.0, "avg_logprob": -0.4030199339895537, "compression_ratio": 1.1415094339622642, "no_speech_prob": 0.649127185344696}, {"id": 192, "seek": 118356, "start": 1186.76, "end": 1196.2, "text": " And the answer is I expected to work correctly with the existing SSH server and it's already", "tokens": [50524, 400, 264, 1867, 307, 286, 5176, 281, 589, 8944, 365, 264, 6741, 12238, 39, 7154, 293, 309, 311, 1217, 50996], "temperature": 0.0, "avg_logprob": -0.4030199339895537, "compression_ratio": 1.1415094339622642, "no_speech_prob": 0.649127185344696}, {"id": 193, "seek": 119620, "start": 1196.2, "end": 1214.24, "text": " featured so you have to configure it to do that but it's possible.", "tokens": [50364, 13822, 370, 291, 362, 281, 22162, 309, 281, 360, 300, 457, 309, 311, 1944, 13, 51266], "temperature": 0.0, "avg_logprob": -0.25647430419921874, "compression_ratio": 1.2892561983471074, "no_speech_prob": 0.28592589497566223}, {"id": 194, "seek": 119620, "start": 1214.24, "end": 1221.72, "text": " There is none apart from the fact that Clevis is just fancy wrappers around like the same", "tokens": [51266, 821, 307, 6022, 4936, 490, 264, 1186, 300, 8834, 4938, 307, 445, 10247, 7843, 15226, 926, 411, 264, 912, 51640], "temperature": 0.0, "avg_logprob": -0.25647430419921874, "compression_ratio": 1.2892561983471074, "no_speech_prob": 0.28592589497566223}, {"id": 195, "seek": 122172, "start": 1221.72, "end": 1229.44, "text": " calls that the system the crypton world features are doing to the TPM.", "tokens": [50364, 5498, 300, 264, 1185, 264, 9844, 266, 1002, 4122, 366, 884, 281, 264, 314, 18819, 13, 50750], "temperature": 0.0, "avg_logprob": -0.4968638212784477, "compression_ratio": 1.310077519379845, "no_speech_prob": 0.5357897877693176}, {"id": 196, "seek": 122172, "start": 1229.44, "end": 1245.04, "text": " I don't know which one was first.", "tokens": [50750, 286, 500, 380, 458, 597, 472, 390, 700, 13, 51530], "temperature": 0.0, "avg_logprob": -0.4968638212784477, "compression_ratio": 1.310077519379845, "no_speech_prob": 0.5357897877693176}, {"id": 197, "seek": 122172, "start": 1245.04, "end": 1250.72, "text": " So yes the question was can you put the maybe the configuration.", "tokens": [51530, 407, 2086, 264, 1168, 390, 393, 291, 829, 264, 1310, 264, 11694, 13, 51814], "temperature": 0.0, "avg_logprob": -0.4968638212784477, "compression_ratio": 1.310077519379845, "no_speech_prob": 0.5357897877693176}, {"id": 198, "seek": 125072, "start": 1251.72, "end": 1260.72, "text": " The question was about the configuration and so the threshold was set to two but we asked", "tokens": [50414, 440, 1168, 390, 466, 264, 11694, 293, 370, 264, 14678, 390, 992, 281, 732, 457, 321, 2351, 50864], "temperature": 0.0, "avg_logprob": -0.316142331636869, "compression_ratio": 1.5857988165680474, "no_speech_prob": 0.472017765045166}, {"id": 199, "seek": 125072, "start": 1260.72, "end": 1267.84, "text": " for the TPM to be live to be available and only one of the two tongue servers so it was", "tokens": [50864, 337, 264, 314, 18819, 281, 312, 1621, 281, 312, 2435, 293, 787, 472, 295, 264, 732, 10601, 15909, 370, 309, 390, 51220], "temperature": 0.0, "avg_logprob": -0.316142331636869, "compression_ratio": 1.5857988165680474, "no_speech_prob": 0.472017765045166}, {"id": 200, "seek": 125072, "start": 1267.84, "end": 1275.68, "text": " very quick but there's actually a combination of pins so there's first the TPM then inside", "tokens": [51220, 588, 1702, 457, 456, 311, 767, 257, 6562, 295, 16392, 370, 456, 311, 700, 264, 314, 18819, 550, 1854, 51612], "temperature": 0.0, "avg_logprob": -0.316142331636869, "compression_ratio": 1.5857988165680474, "no_speech_prob": 0.472017765045166}, {"id": 201, "seek": 127568, "start": 1275.68, "end": 1282.04, "text": " the SSS configuration there's another SSS pin with the threshold of one so this threshold", "tokens": [50364, 264, 12238, 50, 11694, 456, 311, 1071, 12238, 50, 5447, 365, 264, 14678, 295, 472, 370, 341, 14678, 50682], "temperature": 0.0, "avg_logprob": -0.26730988423029584, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.2590009272098541}, {"id": 202, "seek": 127568, "start": 1282.04, "end": 1289.64, "text": " applied to the TPM and the SSS with two tongues and the threshold of one so I guess it's okay.", "tokens": [50682, 6456, 281, 264, 314, 18819, 293, 264, 12238, 50, 365, 732, 37490, 293, 264, 14678, 295, 472, 370, 286, 2041, 309, 311, 1392, 13, 51062], "temperature": 0.0, "avg_logprob": -0.26730988423029584, "compression_ratio": 1.5081967213114753, "no_speech_prob": 0.2590009272098541}, {"id": 203, "seek": 128964, "start": 1289.64, "end": 1309.64, "text": " Can you repeat it?", "tokens": [50364, 1664, 291, 7149, 309, 30, 51364], "temperature": 0.0, "avg_logprob": -0.5390729904174805, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.16417516767978668}, {"id": 204, "seek": 128964, "start": 1309.64, "end": 1317.76, "text": " Yes how does encryption key management work with the FS as it supports only one passphrase.", "tokens": [51364, 1079, 577, 775, 29575, 2141, 4592, 589, 365, 264, 41138, 382, 309, 9346, 787, 472, 1320, 44598, 651, 13, 51770], "temperature": 0.0, "avg_logprob": -0.5390729904174805, "compression_ratio": 1.1111111111111112, "no_speech_prob": 0.16417516767978668}, {"id": 205, "seek": 131776, "start": 1317.8799999999999, "end": 1324.8799999999999, "text": " The answer to this it's the same passphrase that you encode in a Clevis secret so what it does", "tokens": [50370, 440, 1867, 281, 341, 309, 311, 264, 912, 1320, 44598, 651, 300, 291, 2058, 1429, 294, 257, 8834, 4938, 4054, 370, 437, 309, 775, 50720], "temperature": 0.0, "avg_logprob": -0.26632593790690107, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.060688503086566925}, {"id": 206, "seek": 131776, "start": 1324.8799999999999, "end": 1334.36, "text": " it will first try to decrypt the Clevis secret and if the decryption succeeds then it will use", "tokens": [50720, 309, 486, 700, 853, 281, 979, 627, 662, 264, 8834, 4938, 4054, 293, 498, 264, 979, 627, 1695, 49263, 550, 309, 486, 764, 51194], "temperature": 0.0, "avg_logprob": -0.26632593790690107, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.060688503086566925}, {"id": 207, "seek": 131776, "start": 1334.36, "end": 1343.36, "text": " this key as the encryption for the FS otherwise it will ask you to input it like interactively.", "tokens": [51194, 341, 2141, 382, 264, 29575, 337, 264, 41138, 5911, 309, 486, 1029, 291, 281, 4846, 309, 411, 4648, 3413, 13, 51644], "temperature": 0.0, "avg_logprob": -0.26632593790690107, "compression_ratio": 1.6379310344827587, "no_speech_prob": 0.060688503086566925}, {"id": 208, "seek": 134336, "start": 1343.9599999999998, "end": 1351.28, "text": " So I guess the answer to this question is currently there is only one key phrase that is either in", "tokens": [50394, 407, 286, 2041, 264, 1867, 281, 341, 1168, 307, 4362, 456, 307, 787, 472, 2141, 9535, 300, 307, 2139, 294, 50760], "temperature": 0.0, "avg_logprob": -0.345126748085022, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04404358193278313}, {"id": 209, "seek": 134336, "start": 1351.28, "end": 1354.36, "text": " your brain or encoded in a Clevis secret.", "tokens": [50760, 428, 3567, 420, 2058, 12340, 294, 257, 8834, 4938, 4054, 13, 50914], "temperature": 0.0, "avg_logprob": -0.345126748085022, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04404358193278313}, {"id": 210, "seek": 134336, "start": 1354.36, "end": 1355.36, "text": " Yes.", "tokens": [50914, 1079, 13, 50964], "temperature": 0.0, "avg_logprob": -0.345126748085022, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04404358193278313}, {"id": 211, "seek": 134336, "start": 1355.36, "end": 1366.36, "text": " Do you know of any possibility to have an encrypted kernel and init.org so like a bootloader we use the TPM to decrypt the kernel and init.org?", "tokens": [50964, 1144, 291, 458, 295, 604, 7959, 281, 362, 364, 36663, 28256, 293, 3157, 13, 4646, 370, 411, 257, 11450, 2907, 260, 321, 764, 264, 314, 18819, 281, 979, 627, 662, 264, 28256, 293, 3157, 13, 4646, 30, 51514], "temperature": 0.0, "avg_logprob": -0.345126748085022, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.04404358193278313}, {"id": 212, "seek": 136636, "start": 1367.36, "end": 1380.36, "text": " I do not know about this no I don't I mean as you described it it maybe it's possible but I do not know of any implementation of this kind of things.", "tokens": [50414, 286, 360, 406, 458, 466, 341, 572, 286, 500, 380, 286, 914, 382, 291, 7619, 309, 309, 1310, 309, 311, 1944, 457, 286, 360, 406, 458, 295, 604, 11420, 295, 341, 733, 295, 721, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2108175815680088, "compression_ratio": 1.3545454545454545, "no_speech_prob": 0.2540152072906494}, {"id": 213, "seek": 138036, "start": 1380.36, "end": 1404.36, "text": " I guess you need something to decrypt your kernel anyway if you're going to have encrypted kernel what is going to decrypt it?", "tokens": [50364, 286, 2041, 291, 643, 746, 281, 979, 627, 662, 428, 28256, 4033, 498, 291, 434, 516, 281, 362, 36663, 28256, 437, 307, 516, 281, 979, 627, 662, 309, 30, 51564], "temperature": 0.0, "avg_logprob": -0.21894099495627664, "compression_ratio": 1.3695652173913044, "no_speech_prob": 0.067589171230793}, {"id": 214, "seek": 140436, "start": 1405.36, "end": 1410.36, "text": " Yes okay then systemdboot becomes the kernel I don't know.", "tokens": [50414, 1079, 1392, 550, 1185, 67, 1763, 310, 3643, 264, 28256, 286, 500, 380, 458, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3195945338199013, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.046095289289951324}, {"id": 215, "seek": 140436, "start": 1413.36, "end": 1433.36, "text": " I think that's pushing it a little bit why would you think you want your kernel to be secret it's like if you're thinking about secrets you want to put in init.org that's something different and we have so currently in XS we have an encrypted init.org secrets but there is also a new features coming into systemdboot and then learn something.", "tokens": [50814, 286, 519, 300, 311, 7380, 309, 257, 707, 857, 983, 576, 291, 519, 291, 528, 428, 28256, 281, 312, 4054, 309, 311, 411, 498, 291, 434, 1953, 466, 14093, 291, 528, 281, 829, 294, 3157, 13, 4646, 300, 311, 746, 819, 293, 321, 362, 370, 4362, 294, 1783, 50, 321, 362, 364, 36663, 3157, 13, 4646, 14093, 457, 456, 307, 611, 257, 777, 4122, 1348, 666, 1185, 67, 1763, 310, 293, 550, 1466, 746, 13, 51814], "temperature": 0.0, "avg_logprob": -0.3195945338199013, "compression_ratio": 1.7434782608695651, "no_speech_prob": 0.046095289289951324}, {"id": 216, "seek": 143436, "start": 1434.36, "end": 1445.36, "text": " So we have an encrypted system init.org secrets encrypted via the TPM and systemdcrypt what's the name?", "tokens": [50364, 407, 321, 362, 364, 36663, 1185, 3157, 13, 4646, 14093, 36663, 5766, 264, 314, 18819, 293, 1185, 67, 46555, 662, 437, 311, 264, 1315, 30, 50914], "temperature": 0.0, "avg_logprob": -0.44523437350404027, "compression_ratio": 1.4838709677419355, "no_speech_prob": 0.15048520267009735}, {"id": 217, "seek": 143436, "start": 1445.36, "end": 1449.36, "text": " Credential systemd credential sorry that's maybe what's more what you want.", "tokens": [50914, 47560, 2549, 1185, 67, 3864, 2549, 2597, 300, 311, 1310, 437, 311, 544, 437, 291, 528, 13, 51114], "temperature": 0.0, "avg_logprob": -0.44523437350404027, "compression_ratio": 1.4838709677419355, "no_speech_prob": 0.15048520267009735}, {"id": 218, "seek": 143436, "start": 1455.36, "end": 1456.36, "text": " Yes.", "tokens": [51414, 1079, 13, 51464], "temperature": 0.0, "avg_logprob": -0.44523437350404027, "compression_ratio": 1.4838709677419355, "no_speech_prob": 0.15048520267009735}, {"id": 219, "seek": 146436, "start": 1464.36, "end": 1484.36, "text": " Yeah I agree so the remark was it's sometimes good not to have like a kernel unencrypted because then an attacker reading your boot partition would know exactly which version of the kernel you're using and maybe target some specific vulnerabilities.", "tokens": [50364, 865, 286, 3986, 370, 264, 7942, 390, 309, 311, 2171, 665, 406, 281, 362, 411, 257, 28256, 517, 22660, 627, 25383, 570, 550, 364, 35871, 3760, 428, 11450, 24808, 576, 458, 2293, 597, 3037, 295, 264, 28256, 291, 434, 1228, 293, 1310, 3779, 512, 2685, 37633, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18033004629200902, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.09212429076433182}, {"id": 220, "seek": 146436, "start": 1484.36, "end": 1486.36, "text": " Thank you for the remark.", "tokens": [51364, 1044, 291, 337, 264, 7942, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18033004629200902, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.09212429076433182}, {"id": 221, "seek": 149436, "start": 1494.36, "end": 1515.36, "text": " Okay so the remark was you can use a Kexec to load basically any other kernel that you might have decrypted from the first kernel so that you can still have some kind of encrypted kernel.", "tokens": [50364, 1033, 370, 264, 7942, 390, 291, 393, 764, 257, 591, 3121, 3045, 281, 3677, 1936, 604, 661, 28256, 300, 291, 1062, 362, 979, 627, 25383, 490, 264, 700, 28256, 370, 300, 291, 393, 920, 362, 512, 733, 295, 36663, 28256, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18959525779441552, "compression_ratio": 1.4926470588235294, "no_speech_prob": 0.05425473675131798}, {"id": 222, "seek": 149436, "start": 1515.36, "end": 1516.36, "text": " Thank you.", "tokens": [51414, 1044, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18959525779441552, "compression_ratio": 1.4926470588235294, "no_speech_prob": 0.05425473675131798}, {"id": 223, "seek": 149436, "start": 1520.36, "end": 1521.36, "text": " Yes.", "tokens": [51664, 1079, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18959525779441552, "compression_ratio": 1.4926470588235294, "no_speech_prob": 0.05425473675131798}, {"id": 224, "seek": 152136, "start": 1522.36, "end": 1536.36, "text": " Should I use the same time server for multiple hosts or set up a different host or set up a different time server for other because any host could decrypt I guess.", "tokens": [50414, 6454, 286, 764, 264, 912, 565, 7154, 337, 3866, 21573, 420, 992, 493, 257, 819, 3975, 420, 992, 493, 257, 819, 565, 7154, 337, 661, 570, 604, 3975, 727, 979, 627, 662, 286, 2041, 13, 51114], "temperature": 0.0, "avg_logprob": -0.43687174870417667, "compression_ratio": 1.5233644859813085, "no_speech_prob": 0.028472963720560074}, {"id": 225, "seek": 153636, "start": 1536.36, "end": 1556.36, "text": " Well as long as your tank server is in a secure network that you control the access and you have exclusive access or that you have also set up a TPM on your servers but as long as your network is secure I'd say that the protocol implies that", "tokens": [50364, 1042, 382, 938, 382, 428, 5466, 7154, 307, 294, 257, 7144, 3209, 300, 291, 1969, 264, 2105, 293, 291, 362, 13005, 2105, 420, 300, 291, 362, 611, 992, 493, 257, 314, 18819, 322, 428, 15909, 457, 382, 938, 382, 428, 3209, 307, 7144, 286, 1116, 584, 300, 264, 10336, 18779, 300, 51364], "temperature": 0.0, "avg_logprob": -0.1360076297413219, "compression_ratio": 1.6174496644295302, "no_speech_prob": 0.12073089182376862}, {"id": 226, "seek": 155636, "start": 1556.36, "end": 1578.36, "text": " Tanks servers have not access to anything except their own signing key so you can use as many that's what's cool about the Macalum real real protocol is that you can use as many clients as you want the message doesn't even leave the clients when it's encrypted and the key using for encryption also doesn't leave the client so well they have the key.", "tokens": [50414, 314, 14592, 15909, 362, 406, 2105, 281, 1340, 3993, 641, 1065, 13393, 2141, 370, 291, 393, 764, 382, 867, 300, 311, 437, 311, 1627, 466, 264, 5707, 304, 449, 957, 957, 10336, 307, 300, 291, 393, 764, 382, 867, 6982, 382, 291, 528, 264, 3636, 1177, 380, 754, 1856, 264, 6982, 562, 309, 311, 36663, 293, 264, 2141, 1228, 337, 29575, 611, 1177, 380, 1856, 264, 6423, 370, 731, 436, 362, 264, 2141, 13, 51464], "temperature": 0.0, "avg_logprob": -0.23776215392273742, "compression_ratio": 1.7676767676767677, "no_speech_prob": 0.3164834678173065}, {"id": 227, "seek": 158636, "start": 1587.36, "end": 1601.36, "text": " Okay so the question was if malicious host reaches your private subnet and gets access to what the client or the.", "tokens": [50414, 1033, 370, 264, 1168, 390, 498, 33496, 3975, 14235, 428, 4551, 1422, 7129, 293, 2170, 2105, 281, 437, 264, 6423, 420, 264, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3081483134516963, "compression_ratio": 1.202127659574468, "no_speech_prob": 0.12758585810661316}, {"id": 228, "seek": 160136, "start": 1601.36, "end": 1630.36, "text": " Well if they get access to the GW secret yes well then they can if they have access to the tank server and the GW then they can decrypt so that's why you have to either well put your tank server on something that you control very much or well encrypt your GW token when you put it on your flake or whatever it should not be clear.", "tokens": [50414, 1042, 498, 436, 483, 2105, 281, 264, 460, 54, 4054, 2086, 731, 550, 436, 393, 498, 436, 362, 2105, 281, 264, 5466, 7154, 293, 264, 36704, 550, 436, 393, 979, 627, 662, 370, 300, 311, 983, 291, 362, 281, 2139, 731, 829, 428, 5466, 7154, 322, 746, 300, 291, 1969, 588, 709, 420, 731, 17972, 662, 428, 36704, 14862, 562, 291, 829, 309, 322, 428, 932, 619, 420, 2035, 309, 820, 406, 312, 1850, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2700965098845653, "compression_ratio": 1.8435754189944134, "no_speech_prob": 0.21506209671497345}, {"id": 229, "seek": 163136, "start": 1631.36, "end": 1647.36, "text": " Okay so the question was what happens if your tank server is down is down during the reboot of the server.", "tokens": [50364, 1033, 370, 264, 1168, 390, 437, 2314, 498, 428, 5466, 7154, 307, 760, 307, 760, 1830, 264, 33818, 295, 264, 7154, 13, 51164], "temperature": 0.0, "avg_logprob": -0.3244190582862267, "compression_ratio": 1.2325581395348837, "no_speech_prob": 0.05710452422499657}, {"id": 230, "seek": 164736, "start": 1647.36, "end": 1670.36, "text": " Well as you saw well depending on your configuration if you have a lower threshold well it would print an error communicating with the tank server first but then it could depending on your configuration still boot or not if you only have set up one tank server it won't boot and then fall back to interactive unlocking.", "tokens": [50364, 1042, 382, 291, 1866, 731, 5413, 322, 428, 11694, 498, 291, 362, 257, 3126, 14678, 731, 309, 576, 4482, 364, 6713, 17559, 365, 264, 5466, 7154, 700, 457, 550, 309, 727, 5413, 322, 428, 11694, 920, 11450, 420, 406, 498, 291, 787, 362, 992, 493, 472, 5466, 7154, 309, 1582, 380, 11450, 293, 550, 2100, 646, 281, 15141, 49620, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1813509166240692, "compression_ratio": 1.7624309392265194, "no_speech_prob": 0.3475200831890106}, {"id": 231, "seek": 167036, "start": 1671.36, "end": 1688.36, "text": " And if I may add something you may like configure a system so that it after like it times out trying to unlock your your repartition after some while and reboots and then start again and if it was a transient failure of tank server then you might be saved by that.", "tokens": [50414, 400, 498, 286, 815, 909, 746, 291, 815, 411, 22162, 257, 1185, 370, 300, 309, 934, 411, 309, 1413, 484, 1382, 281, 11634, 428, 428, 1085, 446, 849, 934, 512, 1339, 293, 26802, 1971, 293, 550, 722, 797, 293, 498, 309, 390, 257, 41998, 7763, 295, 5466, 7154, 550, 291, 1062, 312, 6624, 538, 300, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14675289041855755, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.3760691285133362}, {"id": 232, "seek": 167036, "start": 1691.36, "end": 1693.36, "text": " We can do one short question.", "tokens": [51414, 492, 393, 360, 472, 2099, 1168, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14675289041855755, "compression_ratio": 1.5555555555555556, "no_speech_prob": 0.3760691285133362}, {"id": 233, "seek": 170036, "start": 1700.36, "end": 1717.36, "text": " So there we have some documentation on the next menu. This is sorry this is a merge and available in the next and stable right now it's not in 23.11 and you have you have some documentation in the unstable manual.", "tokens": [50364, 407, 456, 321, 362, 512, 14333, 322, 264, 958, 6510, 13, 639, 307, 2597, 341, 307, 257, 22183, 293, 2435, 294, 264, 958, 293, 8351, 558, 586, 309, 311, 406, 294, 6673, 13, 5348, 293, 291, 362, 291, 362, 512, 14333, 294, 264, 23742, 9688, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3232573476330987, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.06571792811155319}, {"id": 234, "seek": 170036, "start": 1719.36, "end": 1720.36, "text": " Thank you.", "tokens": [51314, 1044, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3232573476330987, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.06571792811155319}, {"id": 235, "seek": 170036, "start": 1727.36, "end": 1728.36, "text": " So.", "tokens": [51714, 407, 13, 51764], "temperature": 0.0, "avg_logprob": -0.3232573476330987, "compression_ratio": 1.6170212765957446, "no_speech_prob": 0.06571792811155319}, {"id": 236, "seek": 173036, "start": 1730.36, "end": 1731.36, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.5327407121658325, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.915246844291687}], "language": "en"}