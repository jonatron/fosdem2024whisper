{"text": " I'm Dan, I work on systemd and I also maintain the maker side tool which is a sister tool of systemd and I work in my day job at the Linux user space team at MATA. So specifically why do we want to do this? Systemd is a pretty low level user space project so running its integration test is not as trivial as it is for a regular project. So specifically we want to make sure that we don't accidentally break the host machine which when you're running something like systemd becomes rather easy. We also want to minimize the requirements that are needed to run the systemd integration test so that regardless of which machine you actually run them on or regardless of which machine you're hacking on you can still run the tests. This is especially important for new contributors because at the moment the barrier for writing a new integration test is pretty high and we want to make that lower. We don't want any host system details to leak into the integration tests so currently that actually happens quite a bit and it means that you often get a failure for example on a CI machine that you can't reproduce locally. And when that happens it's usually a huge pain to figure out what's going wrong and how to fix it. So we want to try and make these tests more reproducible regardless of the machine that they're running on so that we avoid issues like this. We want to be able to paralyze them as much as possible and again the isolation from the host helps here because it allows you to run more instances of tests without having to fear that they are fighting over the same resources that might be leaking in from the host. We want to make them easy to run of course like I said for new contributors and we also want to make them easy to write. So before I go further with the integration test I'll give a little overview of MakeOSI. MakeOSI is basically system deals tool to hack on systemd. So because systemd is such a low level user space project you can't just build it from source and then run it especially not if you're working on the in-it system itself because you're very likely already running a systemd on your laptop and you can't simply replace it with another one. And even if you could if you write a book and it crushes systemd then your laptop is certainly unusable. So we need another solution and specifically we need to run it in a virtual machine so that if something goes wrong and it crashes you can simply kill the virtual machine and it's like nothing ever happened. And this is where we use MakeOSI. So we use it to build a Linux image that contains systemd compiled from source and installed into the image along with all the other packages from your Linux distribution that you would need for development. If you can then boot in QMU and do whatever testing you need shut down the machine and then you can submit your patch. So it does a few things but the primary thing it does is it simply runs your distribution package manager to install whatever packages are needed and then runs various tools to configure the image. Most of them coming from systemd but also a few from Linux itself. It builds an environment where it's necessary, it generates a unified kernel image if you wanted to and then it packages it all up and then boots it in QMU. And so we can generate a few different archives but the most important ones are probably the disk images and just a plane directory. So what does this look like if you want to build an arch Linux distribution image and install systemd and Linux and then enable autologon that's how you do it. And this will build that and then boot into it with QMU. So you eventually end up in a root shell in a virtual machine with systemd installed. You don't need root privileges for any of this which is another thing we want to do with the integration test. Currently you need root privileges so if more files are written they're owned by your root user in your home directory which means that you run into weird issues when you try to delete files and stuff like that. So we want to try and do it all without even root privileges. You can figure out how to go aside it's like a systemd project so we do the usual unit file stuff. You can conditionally include stuff with a match section. They only apply something to the Fedora distribution for example. So we already use this for hacking and we don't use this for the integration test. So we use macOSI for manual testing which is not exactly great but the automated testing still runs outside of macOSI. So this is because the integration test existed before macOSI was there and the way this was implemented was they still wanted of course that you could run in a virtual machine. But instead of assembling the virtual machine from distribution packages the implementation decided to use the files from the host. So similarly to the first generation tools like Dracood which is where the approach came from they pick various files from the host when building the integration test image and then that becomes the image and there in the image you run the test. The problem is that this is completely independent from macOSI so we have two very different environments one for hacking and then another for running the integration test which isn't great. Even if you manage to do a set of two manual testing inside macOSI you then have to somehow translate that to the existing integration test which is very hard sometimes. We have a custom test runner using make so it's all implemented with make and bash and shell scripts. We don't really use any off the shelf tooling here so it can get very nasty. The tests themselves so this is one part that does work well. The tests themselves that run inside the image are implemented as systems. So what do you get this? Start the image and then we pull in the system unit and the system unit executes the test. If the unit succeeds then it has succeeded and then the test failed. Of course all the test specific dependencies have to be added to the image so this ends up being like I think it's like a two or three thousand line bash file now which is responsible for making sure all the dependencies get picked up from the host file system and then put into the image. So it's very complex and I don't think anyone fully understands it. Any customization that you want to do to these test images also requires writing a lot of bash which again is very hard and for new contributors especially to figure out how to do. As you can see to run a test roughly this is what you currently do. So as I said the files gets picked up from the host for the current images but of course we do need to lay the system to build from source. So you build system from source of the host as well and then what the three thousand line bash file does is it basically takes files from those takes files from the build directory combines them and you end up with this franken image. That contains God knows who what. Half system the build from source half from the host and that's where the image runs in and as you can imagine figuring out what's going on in this environment can be rather complicated. What do we want to do instead. So we want to reuse as much as our existing tooling as possible so one make OSI which are already used for the environment and then the other part is system these build system which is a mess on which already has targets test targets which will execute the tests. This is primarily intended or the I guess the primary goal for this was actually unit tests for C or C++ projects where the test macro and in mess on simply execute the unit test. But there's nothing really specific about it that says it can only be used for unit tests since all it does is really just run a command and check whether it returns zero or non zero exit status. So it's perfectly possible to just have running integration test as well. So I wanted to make use of that so that we can simply add a mess on sweet that's specifically for the integration tests and then running them is exactly the same as running the unit test. So you make things more similar and it will generally we hope lower the barrier for running the integration tests for new newcomers to system. We want to make sure that all the tests reuse the same image. So currently the image gets rebuilt quite often for individual tests which makes the whole thing a lot slower. We want to get to a point where we can ideally reuse the same image even the same one that we use for hacking for the integration tests as well. So we can make use of caching and we avoid having to rebuild the image. And the customization instead of writing whole pile of bash you can just reuse all the settings that may go as I provides to customize the image. And we hope that running an integration test would look roughly like this. So a proof of concept PR is already available on the system the GitHub repo where we more or less have it like this so that an integration test can be executed simply by running mess on test. Specifying the individual test if you want to run one or specify the entire suite if you want to run all of them. Mess on supports running tests in parallel so we want to make use of that as well to be able to run multiple integration tests in parallel. Of course since these tests are quite heavy because they spawn a virtual machine we can do as much parallelization as we would with unit tests but we can probably still run more than one. So how do we run an integration test in a virtual machine with system? There are a few interesting things about running a test in a virtual machine that can make it interesting to get the results out. So for example if mess on runs a unit test then the process simply exits with its exit status either zero or nonzero where nonzero means that the integration test has failed. But if you're running an integration test in a virtual machine when that integration test unit fails in the virtual machine that doesn't mean that your virtual machine is suddenly going to exit with exactly the same exit status. And you're not able to use that without some effort to determine if the test failed or not. You need to somehow get the exit status of the test out of the virtual machine and to the host so that it can be interpreted by mess on. So the way we do this in system D is by using what's called in the AFV socket family. This is a socket family that like TCP or the UDP sockets or the unit sockets but this is specifically intended for inter virtual machine communication. So you can assign a virtual machine and AFV socket device and it has a connection ID which identifies the virtual machine. And then you can bind two ports on that in the virtual machine and you can connect to it from the host. So we use this by for passing data from the guest to those. So system D as this as the notify protocol which you can is basically it can send messages about its status over a socket. And we extended this with support for AFV so that we can send information about the virtual machine to the host if someone is listening. We can we the most basic use case of this is to tell the host system when the machine is finished booting. So we send ready equals one then but it turns out that we can also just simply send access status equals whatever the exit status is. And that's how you can get an access status out of the VM. So this is then this is the access status of system D. So how do we make this access status of system D the access status of our integration test. Well we have two different unit settings for this and success action equals exit or and failure action equals exit. And what these two settings tell is that when this unit exits system D should also exit and specifically with the exit status of that service. So this gives us a way to pipe the exit status from the integration test to system D which then exits with the same. It sends it over VSOC to make or say which is listening it reads the exit status and make or sign in exits with that exit status. So you get this whole flow of data through to the host and to just be able to exit with the same exit status in make or sign. Of course just getting the exit status isn't really sufficient. If you had to do that could ask just by looking at this exit status you'd have a pretty bad experience. So you also need the logs ideally. So because we run on a serial console the serial console is already displayed so you get those automatically. But we also wanted a way to be able to get the system D journal from the virtual machine off the virtual machine and to the host. Normally you would just mount the disk image after the virtual machine has finished executing and get the journal out that way. But remember that we wanted to be able to support running these integration tests without needing root privileges. And if you don't have root privileges then you can't mount any file system in Linux. So we can mount the disk image anymore after the integration after the virtual machine has shut down. So we need to get the logs out while the virtual machine is running. How do we do this? Well again with AFVSOC. In the next version of system D most likely we're going to add another forwarding mode to system D-journally so that it can forward its logs over an AFVSOC socket. So again you can have something listening on the host on AFVSOC, configure journal D to send its logs over this AFVSOC. And then simply store them on the host instead of in the virtual machine itself. Or do both because having the logs in the virtual machine available as well can be useful for debugging. So to listen on the host we have this little program which is system D-journal remote. You can configure to listen on any address. This can also be on Unix socket sort of stuff. And it will simply store the logs to the directory that you specify. So once it's done you simply run journal code, you specify the directory that the logs are stored in and you will get the logs of the virtual machine. You can access them, you can read them, you can debug what's going on. Or you can just simply store whatever CI system that you're running the tests in. Then of course we need to be able to debug any failing tests. So the test might be started. It started via the serial console. But when Maston is running a test it doesn't give you interactive access to the serial console. So we need to have a way to be able to get into the VM without needing the serial console. So the regular solution for this is SSH of course. So we want to provide SSH access to the VM. But we don't want to tie this to the network of the VM. Because let's say we might be testing very specific networking access network tests. This might involve multiple VMs and they might need a very particular networking setup. And it doesn't mean that this network setup might not allow for access to the VM via SSH. So we want to use a different protocol. And again we can just use AFV so for this. So this just emerged. It will be in the next release of system. But when system D started with an AFVSock device it can now detect this during early boot via a new generator. And it will bind port 22 on the AFVSock family to a socket unit. Which will start SSHD when connected to. So this allows you to use SSHD with VSOCK. So you can connect to the connection ID of the virtual machine on the host using SSH. And you will get an SSH session in the VM without needing to configure the network. To provision your public key we use system decredentials which can be provided using SMBIOS. To the VM to provision your SSH public key into the VM in the correct location. In .ssh slash authorized keys. So that you don't need to do anything like you don't need to enter a password or anything. So just SSH it will do the usual key cryptography or key authentication. And you just get your root shell in the VM and you can debug whatever you want. To make this nice to use on the host we can drop in an SSH config file that configures a proxy command for SSH. So we take ownership then of the Unix and the VSOCK host name prefixes. So you can do SSH VSOCK slash the connection ID of the virtual machine to get an SSH session into that virtual machine. So this is what we're going to try and use to be able to debug any tests that are going wrong. That was all I had to say. I'll put a link to the project and go take a look. We want to use this for the integration test but make our size of course useful for a lot of other things as well. If you need for building Linux images please take a look. I'm always happy to add new features or you can join the Matrix channel which is linked in the written and ask new questions. And I'll be happy to answer them. Thank you for listening.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 14.16, "text": " I'm Dan, I work on systemd and I also maintain the maker side tool which is a sister tool", "tokens": [50364, 286, 478, 3394, 11, 286, 589, 322, 1185, 67, 293, 286, 611, 6909, 264, 17127, 1252, 2290, 597, 307, 257, 4892, 2290, 51072], "temperature": 0.0, "avg_logprob": -0.3943610191345215, "compression_ratio": 1.3825503355704698, "no_speech_prob": 0.2624644935131073}, {"id": 1, "seek": 0, "start": 14.16, "end": 21.2, "text": " of systemd and I work in my day job at the Linux user space team at MATA.", "tokens": [51072, 295, 1185, 67, 293, 286, 589, 294, 452, 786, 1691, 412, 264, 18734, 4195, 1901, 1469, 412, 5904, 32, 13, 51424], "temperature": 0.0, "avg_logprob": -0.3943610191345215, "compression_ratio": 1.3825503355704698, "no_speech_prob": 0.2624644935131073}, {"id": 2, "seek": 0, "start": 21.2, "end": 23.8, "text": " So specifically why do we want to do this?", "tokens": [51424, 407, 4682, 983, 360, 321, 528, 281, 360, 341, 30, 51554], "temperature": 0.0, "avg_logprob": -0.3943610191345215, "compression_ratio": 1.3825503355704698, "no_speech_prob": 0.2624644935131073}, {"id": 3, "seek": 2380, "start": 23.8, "end": 33.8, "text": " Systemd is a pretty low level user space project so running its integration test is not as trivial as it is for a regular project.", "tokens": [50364, 8910, 67, 307, 257, 1238, 2295, 1496, 4195, 1901, 1716, 370, 2614, 1080, 10980, 1500, 307, 406, 382, 26703, 382, 309, 307, 337, 257, 3890, 1716, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18020708664603854, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.666359007358551}, {"id": 4, "seek": 2380, "start": 33.8, "end": 42.8, "text": " So specifically we want to make sure that we don't accidentally break the host machine which when you're running something like systemd becomes rather easy.", "tokens": [50864, 407, 4682, 321, 528, 281, 652, 988, 300, 321, 500, 380, 15715, 1821, 264, 3975, 3479, 597, 562, 291, 434, 2614, 746, 411, 1185, 67, 3643, 2831, 1858, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18020708664603854, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.666359007358551}, {"id": 5, "seek": 2380, "start": 42.8, "end": 50.8, "text": " We also want to minimize the requirements that are needed to run the systemd integration test so that regardless of which machine you actually run them on", "tokens": [51314, 492, 611, 528, 281, 17522, 264, 7728, 300, 366, 2978, 281, 1190, 264, 1185, 67, 10980, 1500, 370, 300, 10060, 295, 597, 3479, 291, 767, 1190, 552, 322, 51714], "temperature": 0.0, "avg_logprob": -0.18020708664603854, "compression_ratio": 1.7401574803149606, "no_speech_prob": 0.666359007358551}, {"id": 6, "seek": 5080, "start": 50.8, "end": 55.8, "text": " or regardless of which machine you're hacking on you can still run the tests.", "tokens": [50364, 420, 10060, 295, 597, 3479, 291, 434, 31422, 322, 291, 393, 920, 1190, 264, 6921, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11479141274277045, "compression_ratio": 1.667857142857143, "no_speech_prob": 0.042563546448946}, {"id": 7, "seek": 5080, "start": 55.8, "end": 65.8, "text": " This is especially important for new contributors because at the moment the barrier for writing a new integration test is pretty high and we want to make that lower.", "tokens": [50614, 639, 307, 2318, 1021, 337, 777, 45627, 570, 412, 264, 1623, 264, 13357, 337, 3579, 257, 777, 10980, 1500, 307, 1238, 1090, 293, 321, 528, 281, 652, 300, 3126, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11479141274277045, "compression_ratio": 1.667857142857143, "no_speech_prob": 0.042563546448946}, {"id": 8, "seek": 5080, "start": 65.8, "end": 79.8, "text": " We don't want any host system details to leak into the integration tests so currently that actually happens quite a bit and it means that you often get a failure for example on a CI machine that you can't reproduce locally.", "tokens": [51114, 492, 500, 380, 528, 604, 3975, 1185, 4365, 281, 17143, 666, 264, 10980, 6921, 370, 4362, 300, 767, 2314, 1596, 257, 857, 293, 309, 1355, 300, 291, 2049, 483, 257, 7763, 337, 1365, 322, 257, 37777, 3479, 300, 291, 393, 380, 29501, 16143, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11479141274277045, "compression_ratio": 1.667857142857143, "no_speech_prob": 0.042563546448946}, {"id": 9, "seek": 7980, "start": 79.8, "end": 84.8, "text": " And when that happens it's usually a huge pain to figure out what's going wrong and how to fix it.", "tokens": [50364, 400, 562, 300, 2314, 309, 311, 2673, 257, 2603, 1822, 281, 2573, 484, 437, 311, 516, 2085, 293, 577, 281, 3191, 309, 13, 50614], "temperature": 0.0, "avg_logprob": -0.05823450172896934, "compression_ratio": 1.7577854671280277, "no_speech_prob": 0.10149683058261871}, {"id": 10, "seek": 7980, "start": 84.8, "end": 90.8, "text": " So we want to try and make these tests more reproducible regardless of the machine that they're running on so that we avoid issues like this.", "tokens": [50614, 407, 321, 528, 281, 853, 293, 652, 613, 6921, 544, 11408, 32128, 10060, 295, 264, 3479, 300, 436, 434, 2614, 322, 370, 300, 321, 5042, 2663, 411, 341, 13, 50914], "temperature": 0.0, "avg_logprob": -0.05823450172896934, "compression_ratio": 1.7577854671280277, "no_speech_prob": 0.10149683058261871}, {"id": 11, "seek": 7980, "start": 90.8, "end": 106.8, "text": " We want to be able to paralyze them as much as possible and again the isolation from the host helps here because it allows you to run more instances of tests without having to fear that they are fighting over the same resources that might be leaking in from the host.", "tokens": [50914, 492, 528, 281, 312, 1075, 281, 32645, 1381, 552, 382, 709, 382, 1944, 293, 797, 264, 16001, 490, 264, 3975, 3665, 510, 570, 309, 4045, 291, 281, 1190, 544, 14519, 295, 6921, 1553, 1419, 281, 4240, 300, 436, 366, 5237, 670, 264, 912, 3593, 300, 1062, 312, 32856, 294, 490, 264, 3975, 13, 51714], "temperature": 0.0, "avg_logprob": -0.05823450172896934, "compression_ratio": 1.7577854671280277, "no_speech_prob": 0.10149683058261871}, {"id": 12, "seek": 10680, "start": 107.8, "end": 114.8, "text": " We want to make them easy to run of course like I said for new contributors and we also want to make them easy to write.", "tokens": [50414, 492, 528, 281, 652, 552, 1858, 281, 1190, 295, 1164, 411, 286, 848, 337, 777, 45627, 293, 321, 611, 528, 281, 652, 552, 1858, 281, 2464, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16611631365789883, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.026543114334344864}, {"id": 13, "seek": 10680, "start": 114.8, "end": 119.8, "text": " So before I go further with the integration test I'll give a little overview of MakeOSI.", "tokens": [50764, 407, 949, 286, 352, 3052, 365, 264, 10980, 1500, 286, 603, 976, 257, 707, 12492, 295, 4387, 4367, 40, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16611631365789883, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.026543114334344864}, {"id": 14, "seek": 10680, "start": 119.8, "end": 125.8, "text": " MakeOSI is basically system deals tool to hack on systemd.", "tokens": [51014, 4387, 4367, 40, 307, 1936, 1185, 11215, 2290, 281, 10339, 322, 1185, 67, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16611631365789883, "compression_ratio": 1.558139534883721, "no_speech_prob": 0.026543114334344864}, {"id": 15, "seek": 12580, "start": 125.8, "end": 143.8, "text": " So because systemd is such a low level user space project you can't just build it from source and then run it especially not if you're working on the in-it system itself because you're very likely already running a systemd on your laptop and you can't simply replace it with another one.", "tokens": [50364, 407, 570, 1185, 67, 307, 1270, 257, 2295, 1496, 4195, 1901, 1716, 291, 393, 380, 445, 1322, 309, 490, 4009, 293, 550, 1190, 309, 2318, 406, 498, 291, 434, 1364, 322, 264, 294, 12, 270, 1185, 2564, 570, 291, 434, 588, 3700, 1217, 2614, 257, 1185, 67, 322, 428, 10732, 293, 291, 393, 380, 2935, 7406, 309, 365, 1071, 472, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1829669239756825, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.364101380109787}, {"id": 16, "seek": 12580, "start": 143.8, "end": 149.8, "text": " And even if you could if you write a book and it crushes systemd then your laptop is certainly unusable.", "tokens": [51264, 400, 754, 498, 291, 727, 498, 291, 2464, 257, 1446, 293, 309, 10321, 279, 1185, 67, 550, 428, 10732, 307, 3297, 10054, 712, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1829669239756825, "compression_ratio": 1.6896551724137931, "no_speech_prob": 0.364101380109787}, {"id": 17, "seek": 14980, "start": 149.8, "end": 161.8, "text": " So we need another solution and specifically we need to run it in a virtual machine so that if something goes wrong and it crashes you can simply kill the virtual machine and it's like nothing ever happened.", "tokens": [50364, 407, 321, 643, 1071, 3827, 293, 4682, 321, 643, 281, 1190, 309, 294, 257, 6374, 3479, 370, 300, 498, 746, 1709, 2085, 293, 309, 28642, 291, 393, 2935, 1961, 264, 6374, 3479, 293, 309, 311, 411, 1825, 1562, 2011, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06465620299180348, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.05120139196515083}, {"id": 18, "seek": 14980, "start": 161.8, "end": 163.8, "text": " And this is where we use MakeOSI.", "tokens": [50964, 400, 341, 307, 689, 321, 764, 4387, 4367, 40, 13, 51064], "temperature": 0.0, "avg_logprob": -0.06465620299180348, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.05120139196515083}, {"id": 19, "seek": 14980, "start": 163.8, "end": 174.8, "text": " So we use it to build a Linux image that contains systemd compiled from source and installed into the image along with all the other packages from your Linux distribution that you would need for development.", "tokens": [51064, 407, 321, 764, 309, 281, 1322, 257, 18734, 3256, 300, 8306, 1185, 67, 36548, 490, 4009, 293, 8899, 666, 264, 3256, 2051, 365, 439, 264, 661, 17401, 490, 428, 18734, 7316, 300, 291, 576, 643, 337, 3250, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06465620299180348, "compression_ratio": 1.6816479400749065, "no_speech_prob": 0.05120139196515083}, {"id": 20, "seek": 17480, "start": 174.8, "end": 183.8, "text": " If you can then boot in QMU and do whatever testing you need shut down the machine and then you can submit your patch.", "tokens": [50364, 759, 291, 393, 550, 11450, 294, 1249, 44, 52, 293, 360, 2035, 4997, 291, 643, 5309, 760, 264, 3479, 293, 550, 291, 393, 10315, 428, 9972, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13999090638271597, "compression_ratio": 1.6798245614035088, "no_speech_prob": 0.16059233248233795}, {"id": 21, "seek": 17480, "start": 183.8, "end": 194.8, "text": " So it does a few things but the primary thing it does is it simply runs your distribution package manager to install whatever packages are needed and then runs various tools to configure the image.", "tokens": [50814, 407, 309, 775, 257, 1326, 721, 457, 264, 6194, 551, 309, 775, 307, 309, 2935, 6676, 428, 7316, 7372, 6598, 281, 3625, 2035, 17401, 366, 2978, 293, 550, 6676, 3683, 3873, 281, 22162, 264, 3256, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13999090638271597, "compression_ratio": 1.6798245614035088, "no_speech_prob": 0.16059233248233795}, {"id": 22, "seek": 17480, "start": 194.8, "end": 199.8, "text": " Most of them coming from systemd but also a few from Linux itself.", "tokens": [51364, 4534, 295, 552, 1348, 490, 1185, 67, 457, 611, 257, 1326, 490, 18734, 2564, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13999090638271597, "compression_ratio": 1.6798245614035088, "no_speech_prob": 0.16059233248233795}, {"id": 23, "seek": 19980, "start": 199.8, "end": 209.8, "text": " It builds an environment where it's necessary, it generates a unified kernel image if you wanted to and then it packages it all up and then boots it in QMU.", "tokens": [50364, 467, 15182, 364, 2823, 689, 309, 311, 4818, 11, 309, 23815, 257, 26787, 28256, 3256, 498, 291, 1415, 281, 293, 550, 309, 17401, 309, 439, 493, 293, 550, 15194, 309, 294, 1249, 44, 52, 13, 50864], "temperature": 0.0, "avg_logprob": -0.23523147178418707, "compression_ratio": 1.4744897959183674, "no_speech_prob": 0.14927585422992706}, {"id": 24, "seek": 19980, "start": 209.8, "end": 217.8, "text": " And so we can generate a few different archives but the most important ones are probably the disk images and just a plane directory.", "tokens": [50864, 400, 370, 321, 393, 8460, 257, 1326, 819, 25607, 457, 264, 881, 1021, 2306, 366, 1391, 264, 12355, 5267, 293, 445, 257, 5720, 21120, 13, 51264], "temperature": 0.0, "avg_logprob": -0.23523147178418707, "compression_ratio": 1.4744897959183674, "no_speech_prob": 0.14927585422992706}, {"id": 25, "seek": 21780, "start": 218.8, "end": 229.8, "text": " So what does this look like if you want to build an arch Linux distribution image and install systemd and Linux and then enable autologon that's how you do it.", "tokens": [50414, 407, 437, 775, 341, 574, 411, 498, 291, 528, 281, 1322, 364, 3912, 18734, 7316, 3256, 293, 3625, 1185, 67, 293, 18734, 293, 550, 9528, 1476, 1132, 266, 300, 311, 577, 291, 360, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14046210991708855, "compression_ratio": 1.5647668393782384, "no_speech_prob": 0.10869801789522171}, {"id": 26, "seek": 21780, "start": 229.8, "end": 233.8, "text": " And this will build that and then boot into it with QMU.", "tokens": [50964, 400, 341, 486, 1322, 300, 293, 550, 11450, 666, 309, 365, 1249, 44, 52, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14046210991708855, "compression_ratio": 1.5647668393782384, "no_speech_prob": 0.10869801789522171}, {"id": 27, "seek": 21780, "start": 233.8, "end": 240.8, "text": " So you eventually end up in a root shell in a virtual machine with systemd installed.", "tokens": [51164, 407, 291, 4728, 917, 493, 294, 257, 5593, 8720, 294, 257, 6374, 3479, 365, 1185, 67, 8899, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14046210991708855, "compression_ratio": 1.5647668393782384, "no_speech_prob": 0.10869801789522171}, {"id": 28, "seek": 24080, "start": 240.8, "end": 245.8, "text": " You don't need root privileges for any of this which is another thing we want to do with the integration test.", "tokens": [50364, 509, 500, 380, 643, 5593, 32588, 337, 604, 295, 341, 597, 307, 1071, 551, 321, 528, 281, 360, 365, 264, 10980, 1500, 13, 50614], "temperature": 0.0, "avg_logprob": -0.15747780459267752, "compression_ratio": 1.775735294117647, "no_speech_prob": 0.06538879126310349}, {"id": 29, "seek": 24080, "start": 245.8, "end": 255.8, "text": " Currently you need root privileges so if more files are written they're owned by your root user in your home directory which means that you run into weird issues when you try to delete files and stuff like that.", "tokens": [50614, 19964, 291, 643, 5593, 32588, 370, 498, 544, 7098, 366, 3720, 436, 434, 11684, 538, 428, 5593, 4195, 294, 428, 1280, 21120, 597, 1355, 300, 291, 1190, 666, 3657, 2663, 562, 291, 853, 281, 12097, 7098, 293, 1507, 411, 300, 13, 51114], "temperature": 0.0, "avg_logprob": -0.15747780459267752, "compression_ratio": 1.775735294117647, "no_speech_prob": 0.06538879126310349}, {"id": 30, "seek": 24080, "start": 255.8, "end": 259.8, "text": " So we want to try and do it all without even root privileges.", "tokens": [51114, 407, 321, 528, 281, 853, 293, 360, 309, 439, 1553, 754, 5593, 32588, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15747780459267752, "compression_ratio": 1.775735294117647, "no_speech_prob": 0.06538879126310349}, {"id": 31, "seek": 24080, "start": 259.8, "end": 265.8, "text": " You can figure out how to go aside it's like a systemd project so we do the usual unit file stuff.", "tokens": [51314, 509, 393, 2573, 484, 577, 281, 352, 7359, 309, 311, 411, 257, 1185, 67, 1716, 370, 321, 360, 264, 7713, 4985, 3991, 1507, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15747780459267752, "compression_ratio": 1.775735294117647, "no_speech_prob": 0.06538879126310349}, {"id": 32, "seek": 26580, "start": 266.8, "end": 269.8, "text": " You can conditionally include stuff with a match section.", "tokens": [50414, 509, 393, 4188, 379, 4090, 1507, 365, 257, 2995, 3541, 13, 50564], "temperature": 0.0, "avg_logprob": -0.20125807724989853, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.006994732189923525}, {"id": 33, "seek": 26580, "start": 269.8, "end": 273.8, "text": " They only apply something to the Fedora distribution for example.", "tokens": [50564, 814, 787, 3079, 746, 281, 264, 7772, 3252, 7316, 337, 1365, 13, 50764], "temperature": 0.0, "avg_logprob": -0.20125807724989853, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.006994732189923525}, {"id": 34, "seek": 26580, "start": 275.8, "end": 280.8, "text": " So we already use this for hacking and we don't use this for the integration test.", "tokens": [50864, 407, 321, 1217, 764, 341, 337, 31422, 293, 321, 500, 380, 764, 341, 337, 264, 10980, 1500, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20125807724989853, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.006994732189923525}, {"id": 35, "seek": 26580, "start": 280.8, "end": 291.8, "text": " So we use macOSI for manual testing which is not exactly great but the automated testing still runs outside of macOSI.", "tokens": [51114, 407, 321, 764, 7912, 4367, 40, 337, 9688, 4997, 597, 307, 406, 2293, 869, 457, 264, 18473, 4997, 920, 6676, 2380, 295, 7912, 4367, 40, 13, 51664], "temperature": 0.0, "avg_logprob": -0.20125807724989853, "compression_ratio": 1.5931372549019607, "no_speech_prob": 0.006994732189923525}, {"id": 36, "seek": 29180, "start": 291.8, "end": 306.8, "text": " So this is because the integration test existed before macOSI was there and the way this was implemented was they still wanted of course that you could run in a virtual machine.", "tokens": [50364, 407, 341, 307, 570, 264, 10980, 1500, 13135, 949, 7912, 4367, 40, 390, 456, 293, 264, 636, 341, 390, 12270, 390, 436, 920, 1415, 295, 1164, 300, 291, 727, 1190, 294, 257, 6374, 3479, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1377847117762412, "compression_ratio": 1.6524064171122994, "no_speech_prob": 0.007773260585963726}, {"id": 37, "seek": 29180, "start": 306.8, "end": 315.8, "text": " But instead of assembling the virtual machine from distribution packages the implementation decided to use the files from the host.", "tokens": [51114, 583, 2602, 295, 43867, 264, 6374, 3479, 490, 7316, 17401, 264, 11420, 3047, 281, 764, 264, 7098, 490, 264, 3975, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1377847117762412, "compression_ratio": 1.6524064171122994, "no_speech_prob": 0.007773260585963726}, {"id": 38, "seek": 31580, "start": 316.8, "end": 331.8, "text": " So similarly to the first generation tools like Dracood which is where the approach came from they pick various files from the host when building the integration test image and then that becomes the image and there in the image you run the test.", "tokens": [50414, 407, 14138, 281, 264, 700, 5125, 3873, 411, 2491, 326, 1816, 597, 307, 689, 264, 3109, 1361, 490, 436, 1888, 3683, 7098, 490, 264, 3975, 562, 2390, 264, 10980, 1500, 3256, 293, 550, 300, 3643, 264, 3256, 293, 456, 294, 264, 3256, 291, 1190, 264, 1500, 13, 51164], "temperature": 0.0, "avg_logprob": -0.19059937650507147, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.05422862991690636}, {"id": 39, "seek": 31580, "start": 331.8, "end": 342.8, "text": " The problem is that this is completely independent from macOSI so we have two very different environments one for hacking and then another for running the integration test which isn't great.", "tokens": [51164, 440, 1154, 307, 300, 341, 307, 2584, 6695, 490, 7912, 4367, 40, 370, 321, 362, 732, 588, 819, 12388, 472, 337, 31422, 293, 550, 1071, 337, 2614, 264, 10980, 1500, 597, 1943, 380, 869, 13, 51714], "temperature": 0.0, "avg_logprob": -0.19059937650507147, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.05422862991690636}, {"id": 40, "seek": 34280, "start": 343.8, "end": 355.8, "text": " Even if you manage to do a set of two manual testing inside macOSI you then have to somehow translate that to the existing integration test which is very hard sometimes.", "tokens": [50414, 2754, 498, 291, 3067, 281, 360, 257, 992, 295, 732, 9688, 4997, 1854, 7912, 4367, 40, 291, 550, 362, 281, 6063, 13799, 300, 281, 264, 6741, 10980, 1500, 597, 307, 588, 1152, 2171, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13006085525324315, "compression_ratio": 1.6036866359447004, "no_speech_prob": 0.014319236390292645}, {"id": 41, "seek": 34280, "start": 355.8, "end": 362.8, "text": " We have a custom test runner using make so it's all implemented with make and bash and shell scripts.", "tokens": [51014, 492, 362, 257, 2375, 1500, 24376, 1228, 652, 370, 309, 311, 439, 12270, 365, 652, 293, 46183, 293, 8720, 23294, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13006085525324315, "compression_ratio": 1.6036866359447004, "no_speech_prob": 0.014319236390292645}, {"id": 42, "seek": 34280, "start": 362.8, "end": 367.8, "text": " We don't really use any off the shelf tooling here so it can get very nasty.", "tokens": [51364, 492, 500, 380, 534, 764, 604, 766, 264, 15222, 46593, 510, 370, 309, 393, 483, 588, 17923, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13006085525324315, "compression_ratio": 1.6036866359447004, "no_speech_prob": 0.014319236390292645}, {"id": 43, "seek": 36780, "start": 368.8, "end": 372.8, "text": " The tests themselves so this is one part that does work well.", "tokens": [50414, 440, 6921, 2969, 370, 341, 307, 472, 644, 300, 775, 589, 731, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2432508106473126, "compression_ratio": 1.8238636363636365, "no_speech_prob": 0.02871263027191162}, {"id": 44, "seek": 36780, "start": 372.8, "end": 377.8, "text": " The tests themselves that run inside the image are implemented as systems.", "tokens": [50614, 440, 6921, 2969, 300, 1190, 1854, 264, 3256, 366, 12270, 382, 3652, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2432508106473126, "compression_ratio": 1.8238636363636365, "no_speech_prob": 0.02871263027191162}, {"id": 45, "seek": 36780, "start": 377.8, "end": 380.8, "text": " So what do you get this?", "tokens": [50864, 407, 437, 360, 291, 483, 341, 30, 51014], "temperature": 0.0, "avg_logprob": -0.2432508106473126, "compression_ratio": 1.8238636363636365, "no_speech_prob": 0.02871263027191162}, {"id": 46, "seek": 36780, "start": 380.8, "end": 386.8, "text": " Start the image and then we pull in the system unit and the system unit executes the test.", "tokens": [51014, 6481, 264, 3256, 293, 550, 321, 2235, 294, 264, 1185, 4985, 293, 264, 1185, 4985, 4454, 1819, 264, 1500, 13, 51314], "temperature": 0.0, "avg_logprob": -0.2432508106473126, "compression_ratio": 1.8238636363636365, "no_speech_prob": 0.02871263027191162}, {"id": 47, "seek": 36780, "start": 386.8, "end": 392.8, "text": " If the unit succeeds then it has succeeded and then the test failed.", "tokens": [51314, 759, 264, 4985, 49263, 550, 309, 575, 20263, 293, 550, 264, 1500, 7612, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2432508106473126, "compression_ratio": 1.8238636363636365, "no_speech_prob": 0.02871263027191162}, {"id": 48, "seek": 39280, "start": 393.8, "end": 408.8, "text": " Of course all the test specific dependencies have to be added to the image so this ends up being like I think it's like a two or three thousand line bash file now which is responsible for making sure all the dependencies get picked up from the host file system and then put into the image.", "tokens": [50414, 2720, 1164, 439, 264, 1500, 2685, 36606, 362, 281, 312, 3869, 281, 264, 3256, 370, 341, 5314, 493, 885, 411, 286, 519, 309, 311, 411, 257, 732, 420, 1045, 4714, 1622, 46183, 3991, 586, 597, 307, 6250, 337, 1455, 988, 439, 264, 36606, 483, 6183, 493, 490, 264, 3975, 3991, 1185, 293, 550, 829, 666, 264, 3256, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14350161974943137, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.015061208978295326}, {"id": 49, "seek": 39280, "start": 408.8, "end": 412.8, "text": " So it's very complex and I don't think anyone fully understands it.", "tokens": [51164, 407, 309, 311, 588, 3997, 293, 286, 500, 380, 519, 2878, 4498, 15146, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14350161974943137, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.015061208978295326}, {"id": 50, "seek": 41280, "start": 413.8, "end": 423.8, "text": " Any customization that you want to do to these test images also requires writing a lot of bash which again is very hard and for new contributors especially to figure out how to do.", "tokens": [50414, 2639, 39387, 300, 291, 528, 281, 360, 281, 613, 1500, 5267, 611, 7029, 3579, 257, 688, 295, 46183, 597, 797, 307, 588, 1152, 293, 337, 777, 45627, 2318, 281, 2573, 484, 577, 281, 360, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14309976365831162, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.12655635178089142}, {"id": 51, "seek": 41280, "start": 423.8, "end": 429.8, "text": " As you can see to run a test roughly this is what you currently do.", "tokens": [50914, 1018, 291, 393, 536, 281, 1190, 257, 1500, 9810, 341, 307, 437, 291, 4362, 360, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14309976365831162, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.12655635178089142}, {"id": 52, "seek": 41280, "start": 432.8, "end": 439.8, "text": " So as I said the files gets picked up from the host for the current images but of course we do need to lay the system to build from source.", "tokens": [51364, 407, 382, 286, 848, 264, 7098, 2170, 6183, 493, 490, 264, 3975, 337, 264, 2190, 5267, 457, 295, 1164, 321, 360, 643, 281, 2360, 264, 1185, 281, 1322, 490, 4009, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14309976365831162, "compression_ratio": 1.6234309623430963, "no_speech_prob": 0.12655635178089142}, {"id": 53, "seek": 43980, "start": 440.8, "end": 452.8, "text": " So you build system from source of the host as well and then what the three thousand line bash file does is it basically takes files from those takes files from the build directory combines them and you end up with this franken image.", "tokens": [50414, 407, 291, 1322, 1185, 490, 4009, 295, 264, 3975, 382, 731, 293, 550, 437, 264, 1045, 4714, 1622, 46183, 3991, 775, 307, 309, 1936, 2516, 7098, 490, 729, 2516, 7098, 490, 264, 1322, 21120, 29520, 552, 293, 291, 917, 493, 365, 341, 10455, 268, 3256, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2398502703794499, "compression_ratio": 1.8055555555555556, "no_speech_prob": 0.08043045550584793}, {"id": 54, "seek": 43980, "start": 452.8, "end": 457.8, "text": " That contains God knows who what.", "tokens": [51014, 663, 8306, 1265, 3255, 567, 437, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2398502703794499, "compression_ratio": 1.8055555555555556, "no_speech_prob": 0.08043045550584793}, {"id": 55, "seek": 43980, "start": 457.8, "end": 468.8, "text": " Half system the build from source half from the host and that's where the image runs in and as you can imagine figuring out what's going on in this environment can be rather complicated.", "tokens": [51264, 15917, 1185, 264, 1322, 490, 4009, 1922, 490, 264, 3975, 293, 300, 311, 689, 264, 3256, 6676, 294, 293, 382, 291, 393, 3811, 15213, 484, 437, 311, 516, 322, 294, 341, 2823, 393, 312, 2831, 6179, 13, 51814], "temperature": 0.0, "avg_logprob": -0.2398502703794499, "compression_ratio": 1.8055555555555556, "no_speech_prob": 0.08043045550584793}, {"id": 56, "seek": 46980, "start": 469.8, "end": 471.8, "text": " What do we want to do instead.", "tokens": [50364, 708, 360, 321, 528, 281, 360, 2602, 13, 50464], "temperature": 0.0, "avg_logprob": -0.22018280896273526, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.007087230682373047}, {"id": 57, "seek": 46980, "start": 471.8, "end": 490.8, "text": " So we want to reuse as much as our existing tooling as possible so one make OSI which are already used for the environment and then the other part is system these build system which is a mess on which already has targets test targets which will execute the tests.", "tokens": [50464, 407, 321, 528, 281, 26225, 382, 709, 382, 527, 6741, 46593, 382, 1944, 370, 472, 652, 12731, 40, 597, 366, 1217, 1143, 337, 264, 2823, 293, 550, 264, 661, 644, 307, 1185, 613, 1322, 1185, 597, 307, 257, 2082, 322, 597, 1217, 575, 12911, 1500, 12911, 597, 486, 14483, 264, 6921, 13, 51414], "temperature": 0.0, "avg_logprob": -0.22018280896273526, "compression_ratio": 1.6333333333333333, "no_speech_prob": 0.007087230682373047}, {"id": 58, "seek": 49080, "start": 491.8, "end": 506.8, "text": " This is primarily intended or the I guess the primary goal for this was actually unit tests for C or C++ projects where the test macro and in mess on simply execute the unit test.", "tokens": [50414, 639, 307, 10029, 10226, 420, 264, 286, 2041, 264, 6194, 3387, 337, 341, 390, 767, 4985, 6921, 337, 383, 420, 383, 25472, 4455, 689, 264, 1500, 18887, 293, 294, 2082, 322, 2935, 14483, 264, 4985, 1500, 13, 51164], "temperature": 0.0, "avg_logprob": -0.224527221128165, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.10327441990375519}, {"id": 59, "seek": 49080, "start": 506.8, "end": 517.8, "text": " But there's nothing really specific about it that says it can only be used for unit tests since all it does is really just run a command and check whether it returns zero or non zero exit status.", "tokens": [51164, 583, 456, 311, 1825, 534, 2685, 466, 309, 300, 1619, 309, 393, 787, 312, 1143, 337, 4985, 6921, 1670, 439, 309, 775, 307, 534, 445, 1190, 257, 5622, 293, 1520, 1968, 309, 11247, 4018, 420, 2107, 4018, 11043, 6558, 13, 51714], "temperature": 0.0, "avg_logprob": -0.224527221128165, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.10327441990375519}, {"id": 60, "seek": 51780, "start": 517.8, "end": 520.8, "text": " So it's perfectly possible to just have running integration test as well.", "tokens": [50364, 407, 309, 311, 6239, 1944, 281, 445, 362, 2614, 10980, 1500, 382, 731, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2159539352763783, "compression_ratio": 1.7797356828193833, "no_speech_prob": 0.02618839405477047}, {"id": 61, "seek": 51780, "start": 520.8, "end": 531.8, "text": " So I wanted to make use of that so that we can simply add a mess on sweet that's specifically for the integration tests and then running them is exactly the same as running the unit test.", "tokens": [50514, 407, 286, 1415, 281, 652, 764, 295, 300, 370, 300, 321, 393, 2935, 909, 257, 2082, 322, 3844, 300, 311, 4682, 337, 264, 10980, 6921, 293, 550, 2614, 552, 307, 2293, 264, 912, 382, 2614, 264, 4985, 1500, 13, 51064], "temperature": 0.0, "avg_logprob": -0.2159539352763783, "compression_ratio": 1.7797356828193833, "no_speech_prob": 0.02618839405477047}, {"id": 62, "seek": 51780, "start": 531.8, "end": 541.8, "text": " So you make things more similar and it will generally we hope lower the barrier for running the integration tests for new newcomers to system.", "tokens": [51064, 407, 291, 652, 721, 544, 2531, 293, 309, 486, 5101, 321, 1454, 3126, 264, 13357, 337, 2614, 264, 10980, 6921, 337, 777, 40014, 433, 281, 1185, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2159539352763783, "compression_ratio": 1.7797356828193833, "no_speech_prob": 0.02618839405477047}, {"id": 63, "seek": 54180, "start": 542.8, "end": 545.8, "text": " We want to make sure that all the tests reuse the same image.", "tokens": [50414, 492, 528, 281, 652, 988, 300, 439, 264, 6921, 26225, 264, 912, 3256, 13, 50564], "temperature": 0.0, "avg_logprob": -0.08518706715625265, "compression_ratio": 1.8177570093457944, "no_speech_prob": 0.04350331425666809}, {"id": 64, "seek": 54180, "start": 545.8, "end": 552.8, "text": " So currently the image gets rebuilt quite often for individual tests which makes the whole thing a lot slower.", "tokens": [50564, 407, 4362, 264, 3256, 2170, 38532, 1596, 2049, 337, 2609, 6921, 597, 1669, 264, 1379, 551, 257, 688, 14009, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08518706715625265, "compression_ratio": 1.8177570093457944, "no_speech_prob": 0.04350331425666809}, {"id": 65, "seek": 54180, "start": 552.8, "end": 561.8, "text": " We want to get to a point where we can ideally reuse the same image even the same one that we use for hacking for the integration tests as well.", "tokens": [50914, 492, 528, 281, 483, 281, 257, 935, 689, 321, 393, 22915, 26225, 264, 912, 3256, 754, 264, 912, 472, 300, 321, 764, 337, 31422, 337, 264, 10980, 6921, 382, 731, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08518706715625265, "compression_ratio": 1.8177570093457944, "no_speech_prob": 0.04350331425666809}, {"id": 66, "seek": 54180, "start": 561.8, "end": 565.8, "text": " So we can make use of caching and we avoid having to rebuild the image.", "tokens": [51364, 407, 321, 393, 652, 764, 295, 269, 2834, 293, 321, 5042, 1419, 281, 16877, 264, 3256, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08518706715625265, "compression_ratio": 1.8177570093457944, "no_speech_prob": 0.04350331425666809}, {"id": 67, "seek": 56580, "start": 566.8, "end": 575.8, "text": " And the customization instead of writing whole pile of bash you can just reuse all the settings that may go as I provides to customize the image.", "tokens": [50414, 400, 264, 39387, 2602, 295, 3579, 1379, 14375, 295, 46183, 291, 393, 445, 26225, 439, 264, 6257, 300, 815, 352, 382, 286, 6417, 281, 19734, 264, 3256, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18350354741128644, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.017248528078198433}, {"id": 68, "seek": 56580, "start": 575.8, "end": 580.8, "text": " And we hope that running an integration test would look roughly like this.", "tokens": [50864, 400, 321, 1454, 300, 2614, 364, 10980, 1500, 576, 574, 9810, 411, 341, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18350354741128644, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.017248528078198433}, {"id": 69, "seek": 56580, "start": 580.8, "end": 591.8, "text": " So a proof of concept PR is already available on the system the GitHub repo where we more or less have it like this so that an integration test can be executed simply by running mess on test.", "tokens": [51114, 407, 257, 8177, 295, 3410, 11568, 307, 1217, 2435, 322, 264, 1185, 264, 23331, 49040, 689, 321, 544, 420, 1570, 362, 309, 411, 341, 370, 300, 364, 10980, 1500, 393, 312, 17577, 2935, 538, 2614, 2082, 322, 1500, 13, 51664], "temperature": 0.0, "avg_logprob": -0.18350354741128644, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.017248528078198433}, {"id": 70, "seek": 59180, "start": 591.8, "end": 598.8, "text": " Specifying the individual test if you want to run one or specify the entire suite if you want to run all of them.", "tokens": [50364, 20484, 5489, 264, 2609, 1500, 498, 291, 528, 281, 1190, 472, 420, 16500, 264, 2302, 14205, 498, 291, 528, 281, 1190, 439, 295, 552, 13, 50714], "temperature": 0.0, "avg_logprob": -0.09316060980971978, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.009089657105505466}, {"id": 71, "seek": 59180, "start": 598.8, "end": 606.8, "text": " Mess on supports running tests in parallel so we want to make use of that as well to be able to run multiple integration tests in parallel.", "tokens": [50714, 9847, 322, 9346, 2614, 6921, 294, 8952, 370, 321, 528, 281, 652, 764, 295, 300, 382, 731, 281, 312, 1075, 281, 1190, 3866, 10980, 6921, 294, 8952, 13, 51114], "temperature": 0.0, "avg_logprob": -0.09316060980971978, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.009089657105505466}, {"id": 72, "seek": 59180, "start": 606.8, "end": 617.8, "text": " Of course since these tests are quite heavy because they spawn a virtual machine we can do as much parallelization as we would with unit tests but we can probably still run more than one.", "tokens": [51114, 2720, 1164, 1670, 613, 6921, 366, 1596, 4676, 570, 436, 17088, 257, 6374, 3479, 321, 393, 360, 382, 709, 8952, 2144, 382, 321, 576, 365, 4985, 6921, 457, 321, 393, 1391, 920, 1190, 544, 813, 472, 13, 51664], "temperature": 0.0, "avg_logprob": -0.09316060980971978, "compression_ratio": 1.7926829268292683, "no_speech_prob": 0.009089657105505466}, {"id": 73, "seek": 61780, "start": 617.8, "end": 624.8, "text": " So how do we run an integration test in a virtual machine with system?", "tokens": [50364, 407, 577, 360, 321, 1190, 364, 10980, 1500, 294, 257, 6374, 3479, 365, 1185, 30, 50714], "temperature": 0.0, "avg_logprob": -0.11639445661062217, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.006175375543534756}, {"id": 74, "seek": 61780, "start": 624.8, "end": 632.8, "text": " There are a few interesting things about running a test in a virtual machine that can make it interesting to get the results out.", "tokens": [50714, 821, 366, 257, 1326, 1880, 721, 466, 2614, 257, 1500, 294, 257, 6374, 3479, 300, 393, 652, 309, 1880, 281, 483, 264, 3542, 484, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11639445661062217, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.006175375543534756}, {"id": 75, "seek": 61780, "start": 632.8, "end": 642.8, "text": " So for example if mess on runs a unit test then the process simply exits with its exit status either zero or nonzero where nonzero means that the integration test has failed.", "tokens": [51114, 407, 337, 1365, 498, 2082, 322, 6676, 257, 4985, 1500, 550, 264, 1399, 2935, 44183, 365, 1080, 11043, 6558, 2139, 4018, 420, 2107, 32226, 689, 2107, 32226, 1355, 300, 264, 10980, 1500, 575, 7612, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11639445661062217, "compression_ratio": 1.7857142857142858, "no_speech_prob": 0.006175375543534756}, {"id": 76, "seek": 64280, "start": 643.8, "end": 660.8, "text": " But if you're running an integration test in a virtual machine when that integration test unit fails in the virtual machine that doesn't mean that your virtual machine is suddenly going to exit with exactly the same exit status.", "tokens": [50414, 583, 498, 291, 434, 2614, 364, 10980, 1500, 294, 257, 6374, 3479, 562, 300, 10980, 1500, 4985, 18199, 294, 264, 6374, 3479, 300, 1177, 380, 914, 300, 428, 6374, 3479, 307, 5800, 516, 281, 11043, 365, 2293, 264, 912, 11043, 6558, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10980044392978444, "compression_ratio": 1.839080459770115, "no_speech_prob": 0.18857692182064056}, {"id": 77, "seek": 64280, "start": 660.8, "end": 667.8, "text": " And you're not able to use that without some effort to determine if the test failed or not.", "tokens": [51264, 400, 291, 434, 406, 1075, 281, 764, 300, 1553, 512, 4630, 281, 6997, 498, 264, 1500, 7612, 420, 406, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10980044392978444, "compression_ratio": 1.839080459770115, "no_speech_prob": 0.18857692182064056}, {"id": 78, "seek": 66780, "start": 667.8, "end": 677.8, "text": " You need to somehow get the exit status of the test out of the virtual machine and to the host so that it can be interpreted by mess on.", "tokens": [50364, 509, 643, 281, 6063, 483, 264, 11043, 6558, 295, 264, 1500, 484, 295, 264, 6374, 3479, 293, 281, 264, 3975, 370, 300, 309, 393, 312, 26749, 538, 2082, 322, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11044961081610785, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.07686246931552887}, {"id": 79, "seek": 66780, "start": 677.8, "end": 684.8, "text": " So the way we do this in system D is by using what's called in the AFV socket family.", "tokens": [50864, 407, 264, 636, 321, 360, 341, 294, 1185, 413, 307, 538, 1228, 437, 311, 1219, 294, 264, 20389, 53, 19741, 1605, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11044961081610785, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.07686246931552887}, {"id": 80, "seek": 66780, "start": 684.8, "end": 695.8, "text": " This is a socket family that like TCP or the UDP sockets or the unit sockets but this is specifically intended for inter virtual machine communication.", "tokens": [51214, 639, 307, 257, 19741, 1605, 300, 411, 48965, 420, 264, 624, 11373, 370, 11984, 420, 264, 4985, 370, 11984, 457, 341, 307, 4682, 10226, 337, 728, 6374, 3479, 6101, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11044961081610785, "compression_ratio": 1.6696428571428572, "no_speech_prob": 0.07686246931552887}, {"id": 81, "seek": 69580, "start": 695.8, "end": 703.8, "text": " So you can assign a virtual machine and AFV socket device and it has a connection ID which identifies the virtual machine.", "tokens": [50364, 407, 291, 393, 6269, 257, 6374, 3479, 293, 20389, 53, 19741, 4302, 293, 309, 575, 257, 4984, 7348, 597, 34597, 264, 6374, 3479, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15593474844227667, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.01478908397257328}, {"id": 82, "seek": 69580, "start": 703.8, "end": 709.8, "text": " And then you can bind two ports on that in the virtual machine and you can connect to it from the host.", "tokens": [50764, 400, 550, 291, 393, 14786, 732, 18160, 322, 300, 294, 264, 6374, 3479, 293, 291, 393, 1745, 281, 309, 490, 264, 3975, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15593474844227667, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.01478908397257328}, {"id": 83, "seek": 69580, "start": 709.8, "end": 714.8, "text": " So we use this by for passing data from the guest to those.", "tokens": [51064, 407, 321, 764, 341, 538, 337, 8437, 1412, 490, 264, 8341, 281, 729, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15593474844227667, "compression_ratio": 1.6823529411764706, "no_speech_prob": 0.01478908397257328}, {"id": 84, "seek": 71480, "start": 715.8, "end": 724.8, "text": " So system D as this as the notify protocol which you can is basically it can send messages about its status over a socket.", "tokens": [50414, 407, 1185, 413, 382, 341, 382, 264, 36560, 10336, 597, 291, 393, 307, 1936, 309, 393, 2845, 7897, 466, 1080, 6558, 670, 257, 19741, 13, 50864], "temperature": 0.0, "avg_logprob": -0.15494824591137113, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.2754680812358856}, {"id": 85, "seek": 71480, "start": 724.8, "end": 732.8, "text": " And we extended this with support for AFV so that we can send information about the virtual machine to the host if someone is listening.", "tokens": [50864, 400, 321, 10913, 341, 365, 1406, 337, 20389, 53, 370, 300, 321, 393, 2845, 1589, 466, 264, 6374, 3479, 281, 264, 3975, 498, 1580, 307, 4764, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15494824591137113, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.2754680812358856}, {"id": 86, "seek": 71480, "start": 732.8, "end": 740.8, "text": " We can we the most basic use case of this is to tell the host system when the machine is finished booting.", "tokens": [51264, 492, 393, 321, 264, 881, 3875, 764, 1389, 295, 341, 307, 281, 980, 264, 3975, 1185, 562, 264, 3479, 307, 4335, 11450, 278, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15494824591137113, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.2754680812358856}, {"id": 87, "seek": 74080, "start": 740.8, "end": 747.8, "text": " So we send ready equals one then but it turns out that we can also just simply send access status equals whatever the exit status is.", "tokens": [50364, 407, 321, 2845, 1919, 6915, 472, 550, 457, 309, 4523, 484, 300, 321, 393, 611, 445, 2935, 2845, 2105, 6558, 6915, 2035, 264, 11043, 6558, 307, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12886749695394642, "compression_ratio": 1.9782608695652173, "no_speech_prob": 0.06520198285579681}, {"id": 88, "seek": 74080, "start": 747.8, "end": 750.8, "text": " And that's how you can get an access status out of the VM.", "tokens": [50714, 400, 300, 311, 577, 291, 393, 483, 364, 2105, 6558, 484, 295, 264, 18038, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12886749695394642, "compression_ratio": 1.9782608695652173, "no_speech_prob": 0.06520198285579681}, {"id": 89, "seek": 74080, "start": 750.8, "end": 754.8, "text": " So this is then this is the access status of system D.", "tokens": [50864, 407, 341, 307, 550, 341, 307, 264, 2105, 6558, 295, 1185, 413, 13, 51064], "temperature": 0.0, "avg_logprob": -0.12886749695394642, "compression_ratio": 1.9782608695652173, "no_speech_prob": 0.06520198285579681}, {"id": 90, "seek": 74080, "start": 754.8, "end": 759.8, "text": " So how do we make this access status of system D the access status of our integration test.", "tokens": [51064, 407, 577, 360, 321, 652, 341, 2105, 6558, 295, 1185, 413, 264, 2105, 6558, 295, 527, 10980, 1500, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12886749695394642, "compression_ratio": 1.9782608695652173, "no_speech_prob": 0.06520198285579681}, {"id": 91, "seek": 74080, "start": 759.8, "end": 766.8, "text": " Well we have two different unit settings for this and success action equals exit or and failure action equals exit.", "tokens": [51314, 1042, 321, 362, 732, 819, 4985, 6257, 337, 341, 293, 2245, 3069, 6915, 11043, 420, 293, 7763, 3069, 6915, 11043, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12886749695394642, "compression_ratio": 1.9782608695652173, "no_speech_prob": 0.06520198285579681}, {"id": 92, "seek": 76680, "start": 766.8, "end": 775.8, "text": " And what these two settings tell is that when this unit exits system D should also exit and specifically with the exit status of that service.", "tokens": [50364, 400, 437, 613, 732, 6257, 980, 307, 300, 562, 341, 4985, 44183, 1185, 413, 820, 611, 11043, 293, 4682, 365, 264, 11043, 6558, 295, 300, 2643, 13, 50814], "temperature": 0.0, "avg_logprob": -0.17640789879692925, "compression_ratio": 1.792626728110599, "no_speech_prob": 0.014153588563203812}, {"id": 93, "seek": 76680, "start": 775.8, "end": 783.8, "text": " So this gives us a way to pipe the exit status from the integration test to system D which then exits with the same.", "tokens": [50814, 407, 341, 2709, 505, 257, 636, 281, 11240, 264, 11043, 6558, 490, 264, 10980, 1500, 281, 1185, 413, 597, 550, 44183, 365, 264, 912, 13, 51214], "temperature": 0.0, "avg_logprob": -0.17640789879692925, "compression_ratio": 1.792626728110599, "no_speech_prob": 0.014153588563203812}, {"id": 94, "seek": 76680, "start": 783.8, "end": 790.8, "text": " It sends it over VSOC to make or say which is listening it reads the exit status and make or sign in exits with that exit status.", "tokens": [51214, 467, 14790, 309, 670, 691, 17188, 34, 281, 652, 420, 584, 597, 307, 4764, 309, 15700, 264, 11043, 6558, 293, 652, 420, 1465, 294, 44183, 365, 300, 11043, 6558, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17640789879692925, "compression_ratio": 1.792626728110599, "no_speech_prob": 0.014153588563203812}, {"id": 95, "seek": 79080, "start": 790.8, "end": 801.8, "text": " So you get this whole flow of data through to the host and to just be able to exit with the same exit status in make or sign.", "tokens": [50364, 407, 291, 483, 341, 1379, 3095, 295, 1412, 807, 281, 264, 3975, 293, 281, 445, 312, 1075, 281, 11043, 365, 264, 912, 11043, 6558, 294, 652, 420, 1465, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1795549625303687, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.02073761634528637}, {"id": 96, "seek": 79080, "start": 801.8, "end": 805.8, "text": " Of course just getting the exit status isn't really sufficient.", "tokens": [50914, 2720, 1164, 445, 1242, 264, 11043, 6558, 1943, 380, 534, 11563, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1795549625303687, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.02073761634528637}, {"id": 97, "seek": 79080, "start": 805.8, "end": 810.8, "text": " If you had to do that could ask just by looking at this exit status you'd have a pretty bad experience.", "tokens": [51114, 759, 291, 632, 281, 360, 300, 727, 1029, 445, 538, 1237, 412, 341, 11043, 6558, 291, 1116, 362, 257, 1238, 1578, 1752, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1795549625303687, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.02073761634528637}, {"id": 98, "seek": 79080, "start": 810.8, "end": 812.8, "text": " So you also need the logs ideally.", "tokens": [51364, 407, 291, 611, 643, 264, 20820, 22915, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1795549625303687, "compression_ratio": 1.6318407960199004, "no_speech_prob": 0.02073761634528637}, {"id": 99, "seek": 81280, "start": 813.8, "end": 821.8, "text": " So because we run on a serial console the serial console is already displayed so you get those automatically.", "tokens": [50414, 407, 570, 321, 1190, 322, 257, 17436, 11076, 264, 17436, 11076, 307, 1217, 16372, 370, 291, 483, 729, 6772, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11381448673296578, "compression_ratio": 1.7644230769230769, "no_speech_prob": 0.24218837916851044}, {"id": 100, "seek": 81280, "start": 821.8, "end": 830.8, "text": " But we also wanted a way to be able to get the system D journal from the virtual machine off the virtual machine and to the host.", "tokens": [50814, 583, 321, 611, 1415, 257, 636, 281, 312, 1075, 281, 483, 264, 1185, 413, 6708, 490, 264, 6374, 3479, 766, 264, 6374, 3479, 293, 281, 264, 3975, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11381448673296578, "compression_ratio": 1.7644230769230769, "no_speech_prob": 0.24218837916851044}, {"id": 101, "seek": 81280, "start": 830.8, "end": 838.8, "text": " Normally you would just mount the disk image after the virtual machine has finished executing and get the journal out that way.", "tokens": [51264, 17424, 291, 576, 445, 3746, 264, 12355, 3256, 934, 264, 6374, 3479, 575, 4335, 32368, 293, 483, 264, 6708, 484, 300, 636, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11381448673296578, "compression_ratio": 1.7644230769230769, "no_speech_prob": 0.24218837916851044}, {"id": 102, "seek": 83880, "start": 838.8, "end": 843.8, "text": " But remember that we wanted to be able to support running these integration tests without needing root privileges.", "tokens": [50364, 583, 1604, 300, 321, 1415, 281, 312, 1075, 281, 1406, 2614, 613, 10980, 6921, 1553, 18006, 5593, 32588, 13, 50614], "temperature": 0.0, "avg_logprob": -0.0993185821844607, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.008232008665800095}, {"id": 103, "seek": 83880, "start": 843.8, "end": 848.8, "text": " And if you don't have root privileges then you can't mount any file system in Linux.", "tokens": [50614, 400, 498, 291, 500, 380, 362, 5593, 32588, 550, 291, 393, 380, 3746, 604, 3991, 1185, 294, 18734, 13, 50864], "temperature": 0.0, "avg_logprob": -0.0993185821844607, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.008232008665800095}, {"id": 104, "seek": 83880, "start": 848.8, "end": 856.8, "text": " So we can mount the disk image anymore after the integration after the virtual machine has shut down.", "tokens": [50864, 407, 321, 393, 3746, 264, 12355, 3256, 3602, 934, 264, 10980, 934, 264, 6374, 3479, 575, 5309, 760, 13, 51264], "temperature": 0.0, "avg_logprob": -0.0993185821844607, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.008232008665800095}, {"id": 105, "seek": 83880, "start": 856.8, "end": 859.8, "text": " So we need to get the logs out while the virtual machine is running.", "tokens": [51264, 407, 321, 643, 281, 483, 264, 20820, 484, 1339, 264, 6374, 3479, 307, 2614, 13, 51414], "temperature": 0.0, "avg_logprob": -0.0993185821844607, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.008232008665800095}, {"id": 106, "seek": 83880, "start": 859.8, "end": 862.8, "text": " How do we do this? Well again with AFVSOC.", "tokens": [51414, 1012, 360, 321, 360, 341, 30, 1042, 797, 365, 20389, 53, 17188, 34, 13, 51564], "temperature": 0.0, "avg_logprob": -0.0993185821844607, "compression_ratio": 1.6857142857142857, "no_speech_prob": 0.008232008665800095}, {"id": 107, "seek": 86280, "start": 862.8, "end": 873.8, "text": " In the next version of system D most likely we're going to add another forwarding mode to system D-journally so that it can forward its logs over an AFVSOC socket.", "tokens": [50364, 682, 264, 958, 3037, 295, 1185, 413, 881, 3700, 321, 434, 516, 281, 909, 1071, 2128, 278, 4391, 281, 1185, 413, 12, 8696, 77, 379, 370, 300, 309, 393, 2128, 1080, 20820, 670, 364, 20389, 53, 17188, 34, 19741, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1448561891596368, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.01651918701827526}, {"id": 108, "seek": 86280, "start": 873.8, "end": 882.8, "text": " So again you can have something listening on the host on AFVSOC, configure journal D to send its logs over this AFVSOC.", "tokens": [50914, 407, 797, 291, 393, 362, 746, 4764, 322, 264, 3975, 322, 20389, 53, 17188, 34, 11, 22162, 6708, 413, 281, 2845, 1080, 20820, 670, 341, 20389, 53, 17188, 34, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1448561891596368, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.01651918701827526}, {"id": 109, "seek": 86280, "start": 882.8, "end": 888.8, "text": " And then simply store them on the host instead of in the virtual machine itself.", "tokens": [51364, 400, 550, 2935, 3531, 552, 322, 264, 3975, 2602, 295, 294, 264, 6374, 3479, 2564, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1448561891596368, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.01651918701827526}, {"id": 110, "seek": 88880, "start": 888.8, "end": 893.8, "text": " Or do both because having the logs in the virtual machine available as well can be useful for debugging.", "tokens": [50364, 1610, 360, 1293, 570, 1419, 264, 20820, 294, 264, 6374, 3479, 2435, 382, 731, 393, 312, 4420, 337, 45592, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16985481086818652, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.0684918537735939}, {"id": 111, "seek": 88880, "start": 893.8, "end": 899.8, "text": " So to listen on the host we have this little program which is system D-journal remote.", "tokens": [50614, 407, 281, 2140, 322, 264, 3975, 321, 362, 341, 707, 1461, 597, 307, 1185, 413, 12, 8696, 4660, 8607, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16985481086818652, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.0684918537735939}, {"id": 112, "seek": 88880, "start": 899.8, "end": 902.8, "text": " You can configure to listen on any address.", "tokens": [50914, 509, 393, 22162, 281, 2140, 322, 604, 2985, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16985481086818652, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.0684918537735939}, {"id": 113, "seek": 88880, "start": 902.8, "end": 905.8, "text": " This can also be on Unix socket sort of stuff.", "tokens": [51064, 639, 393, 611, 312, 322, 1156, 970, 19741, 1333, 295, 1507, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16985481086818652, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.0684918537735939}, {"id": 114, "seek": 88880, "start": 905.8, "end": 913.8, "text": " And it will simply store the logs to the directory that you specify.", "tokens": [51214, 400, 309, 486, 2935, 3531, 264, 20820, 281, 264, 21120, 300, 291, 16500, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16985481086818652, "compression_ratio": 1.5260869565217392, "no_speech_prob": 0.0684918537735939}, {"id": 115, "seek": 91380, "start": 913.8, "end": 920.8, "text": " So once it's done you simply run journal code, you specify the directory that the logs are stored in and you will get the logs of the virtual machine.", "tokens": [50364, 407, 1564, 309, 311, 1096, 291, 2935, 1190, 6708, 3089, 11, 291, 16500, 264, 21120, 300, 264, 20820, 366, 12187, 294, 293, 291, 486, 483, 264, 20820, 295, 264, 6374, 3479, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12184488884756499, "compression_ratio": 1.72, "no_speech_prob": 0.017839137464761734}, {"id": 116, "seek": 91380, "start": 920.8, "end": 923.8, "text": " You can access them, you can read them, you can debug what's going on.", "tokens": [50714, 509, 393, 2105, 552, 11, 291, 393, 1401, 552, 11, 291, 393, 24083, 437, 311, 516, 322, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12184488884756499, "compression_ratio": 1.72, "no_speech_prob": 0.017839137464761734}, {"id": 117, "seek": 91380, "start": 923.8, "end": 930.8, "text": " Or you can just simply store whatever CI system that you're running the tests in.", "tokens": [50864, 1610, 291, 393, 445, 2935, 3531, 2035, 37777, 1185, 300, 291, 434, 2614, 264, 6921, 294, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12184488884756499, "compression_ratio": 1.72, "no_speech_prob": 0.017839137464761734}, {"id": 118, "seek": 91380, "start": 930.8, "end": 933.8, "text": " Then of course we need to be able to debug any failing tests.", "tokens": [51214, 1396, 295, 1164, 321, 643, 281, 312, 1075, 281, 24083, 604, 18223, 6921, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12184488884756499, "compression_ratio": 1.72, "no_speech_prob": 0.017839137464761734}, {"id": 119, "seek": 91380, "start": 933.8, "end": 939.8, "text": " So the test might be started. It started via the serial console.", "tokens": [51364, 407, 264, 1500, 1062, 312, 1409, 13, 467, 1409, 5766, 264, 17436, 11076, 13, 51664], "temperature": 0.0, "avg_logprob": -0.12184488884756499, "compression_ratio": 1.72, "no_speech_prob": 0.017839137464761734}, {"id": 120, "seek": 93980, "start": 939.8, "end": 947.8, "text": " But when Maston is running a test it doesn't give you interactive access to the serial console.", "tokens": [50364, 583, 562, 376, 525, 266, 307, 2614, 257, 1500, 309, 1177, 380, 976, 291, 15141, 2105, 281, 264, 17436, 11076, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1122477541687668, "compression_ratio": 1.702020202020202, "no_speech_prob": 0.00849942583590746}, {"id": 121, "seek": 93980, "start": 947.8, "end": 953.8, "text": " So we need to have a way to be able to get into the VM without needing the serial console.", "tokens": [50764, 407, 321, 643, 281, 362, 257, 636, 281, 312, 1075, 281, 483, 666, 264, 18038, 1553, 18006, 264, 17436, 11076, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1122477541687668, "compression_ratio": 1.702020202020202, "no_speech_prob": 0.00849942583590746}, {"id": 122, "seek": 93980, "start": 953.8, "end": 957.8, "text": " So the regular solution for this is SSH of course.", "tokens": [51064, 407, 264, 3890, 3827, 337, 341, 307, 12238, 39, 295, 1164, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1122477541687668, "compression_ratio": 1.702020202020202, "no_speech_prob": 0.00849942583590746}, {"id": 123, "seek": 93980, "start": 957.8, "end": 960.8, "text": " So we want to provide SSH access to the VM.", "tokens": [51264, 407, 321, 528, 281, 2893, 12238, 39, 2105, 281, 264, 18038, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1122477541687668, "compression_ratio": 1.702020202020202, "no_speech_prob": 0.00849942583590746}, {"id": 124, "seek": 93980, "start": 960.8, "end": 965.8, "text": " But we don't want to tie this to the network of the VM.", "tokens": [51414, 583, 321, 500, 380, 528, 281, 7582, 341, 281, 264, 3209, 295, 264, 18038, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1122477541687668, "compression_ratio": 1.702020202020202, "no_speech_prob": 0.00849942583590746}, {"id": 125, "seek": 96580, "start": 965.8, "end": 970.8, "text": " Because let's say we might be testing very specific networking access network tests.", "tokens": [50364, 1436, 718, 311, 584, 321, 1062, 312, 4997, 588, 2685, 17985, 2105, 3209, 6921, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12420475716684379, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.011602161452174187}, {"id": 126, "seek": 96580, "start": 970.8, "end": 975.8, "text": " This might involve multiple VMs and they might need a very particular networking setup.", "tokens": [50614, 639, 1062, 9494, 3866, 18038, 82, 293, 436, 1062, 643, 257, 588, 1729, 17985, 8657, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12420475716684379, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.011602161452174187}, {"id": 127, "seek": 96580, "start": 975.8, "end": 984.8, "text": " And it doesn't mean that this network setup might not allow for access to the VM via SSH.", "tokens": [50864, 400, 309, 1177, 380, 914, 300, 341, 3209, 8657, 1062, 406, 2089, 337, 2105, 281, 264, 18038, 5766, 12238, 39, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12420475716684379, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.011602161452174187}, {"id": 128, "seek": 96580, "start": 984.8, "end": 986.8, "text": " So we want to use a different protocol.", "tokens": [51314, 407, 321, 528, 281, 764, 257, 819, 10336, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12420475716684379, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.011602161452174187}, {"id": 129, "seek": 96580, "start": 986.8, "end": 989.8, "text": " And again we can just use AFV so for this.", "tokens": [51414, 400, 797, 321, 393, 445, 764, 20389, 53, 370, 337, 341, 13, 51564], "temperature": 0.0, "avg_logprob": -0.12420475716684379, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.011602161452174187}, {"id": 130, "seek": 96580, "start": 989.8, "end": 993.8, "text": " So this just emerged. It will be in the next release of system.", "tokens": [51564, 407, 341, 445, 20178, 13, 467, 486, 312, 294, 264, 958, 4374, 295, 1185, 13, 51764], "temperature": 0.0, "avg_logprob": -0.12420475716684379, "compression_ratio": 1.6558704453441295, "no_speech_prob": 0.011602161452174187}, {"id": 131, "seek": 99380, "start": 993.8, "end": 1003.8, "text": " But when system D started with an AFVSock device it can now detect this during early boot via a new generator.", "tokens": [50364, 583, 562, 1185, 413, 1409, 365, 364, 20389, 53, 50, 1560, 4302, 309, 393, 586, 5531, 341, 1830, 2440, 11450, 5766, 257, 777, 19265, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11744336287180583, "compression_ratio": 1.5401785714285714, "no_speech_prob": 0.01197135541588068}, {"id": 132, "seek": 99380, "start": 1003.8, "end": 1009.8, "text": " And it will bind port 22 on the AFVSock family to a socket unit.", "tokens": [50864, 400, 309, 486, 14786, 2436, 5853, 322, 264, 20389, 53, 50, 1560, 1605, 281, 257, 19741, 4985, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11744336287180583, "compression_ratio": 1.5401785714285714, "no_speech_prob": 0.01197135541588068}, {"id": 133, "seek": 99380, "start": 1009.8, "end": 1013.8, "text": " Which will start SSHD when connected to.", "tokens": [51164, 3013, 486, 722, 12238, 22859, 562, 4582, 281, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11744336287180583, "compression_ratio": 1.5401785714285714, "no_speech_prob": 0.01197135541588068}, {"id": 134, "seek": 99380, "start": 1013.8, "end": 1016.8, "text": " So this allows you to use SSHD with VSOCK.", "tokens": [51364, 407, 341, 4045, 291, 281, 764, 12238, 22859, 365, 691, 17188, 9419, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11744336287180583, "compression_ratio": 1.5401785714285714, "no_speech_prob": 0.01197135541588068}, {"id": 135, "seek": 99380, "start": 1016.8, "end": 1022.8, "text": " So you can connect to the connection ID of the virtual machine on the host using SSH.", "tokens": [51514, 407, 291, 393, 1745, 281, 264, 4984, 7348, 295, 264, 6374, 3479, 322, 264, 3975, 1228, 12238, 39, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11744336287180583, "compression_ratio": 1.5401785714285714, "no_speech_prob": 0.01197135541588068}, {"id": 136, "seek": 102280, "start": 1022.8, "end": 1028.8, "text": " And you will get an SSH session in the VM without needing to configure the network.", "tokens": [50364, 400, 291, 486, 483, 364, 12238, 39, 5481, 294, 264, 18038, 1553, 18006, 281, 22162, 264, 3209, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1589221273149763, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.01802065409719944}, {"id": 137, "seek": 102280, "start": 1028.8, "end": 1036.8, "text": " To provision your public key we use system decredentials which can be provided using SMBIOS.", "tokens": [50664, 1407, 17225, 428, 1908, 2141, 321, 764, 1185, 979, 986, 2549, 82, 597, 393, 312, 5649, 1228, 13115, 11291, 4367, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1589221273149763, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.01802065409719944}, {"id": 138, "seek": 102280, "start": 1036.8, "end": 1042.8, "text": " To the VM to provision your SSH public key into the VM in the correct location.", "tokens": [51064, 1407, 264, 18038, 281, 17225, 428, 12238, 39, 1908, 2141, 666, 264, 18038, 294, 264, 3006, 4914, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1589221273149763, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.01802065409719944}, {"id": 139, "seek": 102280, "start": 1042.8, "end": 1045.8, "text": " In .ssh slash authorized keys.", "tokens": [51364, 682, 2411, 82, 2716, 17330, 28312, 9317, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1589221273149763, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.01802065409719944}, {"id": 140, "seek": 102280, "start": 1045.8, "end": 1049.8, "text": " So that you don't need to do anything like you don't need to enter a password or anything.", "tokens": [51514, 407, 300, 291, 500, 380, 643, 281, 360, 1340, 411, 291, 500, 380, 643, 281, 3242, 257, 11524, 420, 1340, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1589221273149763, "compression_ratio": 1.6725663716814159, "no_speech_prob": 0.01802065409719944}, {"id": 141, "seek": 104980, "start": 1049.8, "end": 1056.8, "text": " So just SSH it will do the usual key cryptography or key authentication.", "tokens": [50364, 407, 445, 12238, 39, 309, 486, 360, 264, 7713, 2141, 9844, 5820, 420, 2141, 26643, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1477850819682027, "compression_ratio": 1.5412844036697249, "no_speech_prob": 0.04150622710585594}, {"id": 142, "seek": 104980, "start": 1056.8, "end": 1061.8, "text": " And you just get your root shell in the VM and you can debug whatever you want.", "tokens": [50714, 400, 291, 445, 483, 428, 5593, 8720, 294, 264, 18038, 293, 291, 393, 24083, 2035, 291, 528, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1477850819682027, "compression_ratio": 1.5412844036697249, "no_speech_prob": 0.04150622710585594}, {"id": 143, "seek": 104980, "start": 1061.8, "end": 1069.8, "text": " To make this nice to use on the host we can drop in an SSH config file that configures a proxy command for SSH.", "tokens": [50964, 1407, 652, 341, 1481, 281, 764, 322, 264, 3975, 321, 393, 3270, 294, 364, 12238, 39, 6662, 3991, 300, 6662, 1303, 257, 29690, 5622, 337, 12238, 39, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1477850819682027, "compression_ratio": 1.5412844036697249, "no_speech_prob": 0.04150622710585594}, {"id": 144, "seek": 104980, "start": 1069.8, "end": 1075.8, "text": " So we take ownership then of the Unix and the VSOCK host name prefixes.", "tokens": [51364, 407, 321, 747, 15279, 550, 295, 264, 1156, 970, 293, 264, 691, 17188, 9419, 3975, 1315, 18417, 36005, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1477850819682027, "compression_ratio": 1.5412844036697249, "no_speech_prob": 0.04150622710585594}, {"id": 145, "seek": 107580, "start": 1075.8, "end": 1083.8, "text": " So you can do SSH VSOCK slash the connection ID of the virtual machine to get an SSH session into that virtual machine.", "tokens": [50364, 407, 291, 393, 360, 12238, 39, 691, 17188, 9419, 17330, 264, 4984, 7348, 295, 264, 6374, 3479, 281, 483, 364, 12238, 39, 5481, 666, 300, 6374, 3479, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13767113224152597, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.009955055080354214}, {"id": 146, "seek": 107580, "start": 1083.8, "end": 1090.8, "text": " So this is what we're going to try and use to be able to debug any tests that are going wrong.", "tokens": [50764, 407, 341, 307, 437, 321, 434, 516, 281, 853, 293, 764, 281, 312, 1075, 281, 24083, 604, 6921, 300, 366, 516, 2085, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13767113224152597, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.009955055080354214}, {"id": 147, "seek": 107580, "start": 1090.8, "end": 1093.8, "text": " That was all I had to say.", "tokens": [51114, 663, 390, 439, 286, 632, 281, 584, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13767113224152597, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.009955055080354214}, {"id": 148, "seek": 107580, "start": 1093.8, "end": 1096.8, "text": " I'll put a link to the project and go take a look.", "tokens": [51264, 286, 603, 829, 257, 2113, 281, 264, 1716, 293, 352, 747, 257, 574, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13767113224152597, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.009955055080354214}, {"id": 149, "seek": 107580, "start": 1096.8, "end": 1101.8, "text": " We want to use this for the integration test but make our size of course useful for a lot of other things as well.", "tokens": [51414, 492, 528, 281, 764, 341, 337, 264, 10980, 1500, 457, 652, 527, 2744, 295, 1164, 4420, 337, 257, 688, 295, 661, 721, 382, 731, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13767113224152597, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.009955055080354214}, {"id": 150, "seek": 107580, "start": 1101.8, "end": 1104.8, "text": " If you need for building Linux images please take a look.", "tokens": [51664, 759, 291, 643, 337, 2390, 18734, 5267, 1767, 747, 257, 574, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13767113224152597, "compression_ratio": 1.6726618705035972, "no_speech_prob": 0.009955055080354214}, {"id": 151, "seek": 110480, "start": 1104.8, "end": 1111.8, "text": " I'm always happy to add new features or you can join the Matrix channel which is linked in the written and ask new questions.", "tokens": [50364, 286, 478, 1009, 2055, 281, 909, 777, 4122, 420, 291, 393, 3917, 264, 36274, 2269, 597, 307, 9408, 294, 264, 3720, 293, 1029, 777, 1651, 13, 50714], "temperature": 0.0, "avg_logprob": -0.175024539866346, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.055893197655677795}, {"id": 152, "seek": 110480, "start": 1111.8, "end": 1113.8, "text": " And I'll be happy to answer them.", "tokens": [50714, 400, 286, 603, 312, 2055, 281, 1867, 552, 13, 50814], "temperature": 0.0, "avg_logprob": -0.175024539866346, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.055893197655677795}, {"id": 153, "seek": 110480, "start": 1113.8, "end": 1115.8, "text": " Thank you for listening.", "tokens": [50814, 1044, 291, 337, 4764, 13, 50914], "temperature": 0.0, "avg_logprob": -0.175024539866346, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.055893197655677795}], "language": "en"}