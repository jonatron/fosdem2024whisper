{"text": " Okay, let's get started. So hello and welcome to Backtracy and the quest for prettier Ruby backtraces. So who am I to be here today? My name is Yvon Zhe and I'm currently a senior software engineer at Datadog. I've been in love with Ruby since I started using it professionally around 10 years ago. And I am a really big fan of going into an exploring language run times like C-Ruby, J-Ruby, Truffle Ruby, Java VM and others. And I've been attending FOSDEM every year since 2017, but this is my first time speaking, so I'm excited. So I also- Yes, pray for the cable. I'm also excited to play about concurrency, application performance and making tools that help us kind of look at our apps in different ways and new ways and try to uncover new insights about performance by looking at them in a different way. So that's how I ended up working on this thing, the Datadog profiler for Ruby. So if you're curious, come talk to me about Ruby Performance. I like to talk a lot about that. So, but for today, what we're going to talk about is what's the backtrace? How can we get one? Then how does the Ruby stack work in reality? Then we'll talk a bit about the backtracy gem, this is not good. I will be talking about accessing the internal VM APIs to do some of the weird things that the backtracy gem does. Then we'll play with backtracing in action and then we will talk about maybe a new feature in Ruby 3.4 which is having class names in backtraces. So what's a backtrace? How to get one? If you're a Ruby developer, you probably know what the backtrace is, but quick reminder, it's mostly like a trail of what methods were called and are still waiting to return at some given point in the app. And it's also called like a stack trace in some languages because it represents what's on the thread stack. So backtrace, stacktrace is usually kind of the same thing. And okay, if we have this A that we call A, that calls B and then raises an exception and then you get a backtrace. So we probably see this way too often and maybe you have some nightmares when you see this, but hopefully it will help you figure out your issues in your app. So there's multiple ways of getting a backtrace in Ruby. One of them is rescuing an exception. And an interesting thing is that actually the backtrace gets set on the exception when the exception is raised, not when it's created. Because you can create an exception but not raise it immediately. And so the backtrace only gets set when you raise it. And you can get a backtrace by just getting a thread and asking for it. Or you can use the color API, which is part of kernel. So it's part of every Ruby object, so it just can type color and you will get the stack trace of the method that called U. So you might have noticed that were backtrace and backtrace locations. The methods that end with locations return an array of these location objects that includes absolute path, base level, level, etc. So basically it gives you a nice domain object to represent the stack trace. Whereas the other method just kind of represents, just to return you the strings that Ruby prints. So that's the difference. There's also some Ruby VMC APIs to getting a backtrace. A few ones for different kind of use cases. And actually these two at the top will come back to this in a bit. So talking about the stack itself, how does the Ruby stack work under the cover specifically for the C Ruby runtime? So the idea is that a Ruby thread usually has two stacks. One is the Ruby stack that we usually see on our application and the other is the native stack. So the stack that the VM, which is a program built in C, has. And we can actually look at both of them in a really weird way, which is let's crash Ruby. And this thing is a weird thing. So I'm telling Ruby to send a segmentation fault to itself, which will crash Ruby. And then when we crash Ruby, what we get is this thing, which is the output of the Ruby crash handler, which includes a lot of nice things. So if you ever get the crash in Ruby, please do include this when reporting bugs. It's really useful. And the first thing it shows is it shows the Ruby stack. So here on the bottom, we see, okay, we have this each that represents our each on our code. Then we have the block, then collect, then the block, then the call to kill. So probably not a big surprise. One thing that is interesting, and you can see there at the top, is that Ruby actually, at least this Ruby version that I'm using, uses C methods to implement each collect and kill. And so you see that internally Ruby is actually keeping track of that and knows that there are C methods for that. This is not very good. And this is actually the native stack, which is also printed in that whole big thing. So please ignore the lot of text. The thing that you're caring about is this column in the middle, which is the names of the C functions that the Ruby VM is actually using. And you can actually, if you squint hard and ignore a few of them, you can see our app here. So we can see each showing up. We can see each showing up. And then we can see the block, the call to yield. Then we can see the collect showing up, RBE array collect. Then we can see yield. And then we can see kill. So we can see all of our methods. And you can additionally see these two methods, which are the Ruby code itself that we're writing. And those methods are RBVM exec and VM exec core is the Ruby VM actually executing the byte code, the Ruby byte code for our application, which is kind of the glue code that is between the other functions that you see there. And then at the top you see the code for the VM to handle a crash. So this is the two stacks. So let's focus on the Ruby stack and kind of ignore the native stack mostly. So how is it represented inside the VM? So inside the VM there are a bunch of structures in memory that represent the stack, so how do they look? And so hang on, I will show three slides of C code and then we can come back to actual Ruby code. Please don't kind of like stab your eyes out or something. So yes, when it shows up, there's a in VM core, it's like a VM header where a lot of the internal Ruby interesting things are. And there's like this RB thread struct that includes a bunch of things. And this is what Ruby holds for a thread. And inside that we have this RB execution context thing, which keeps a pointer to this other structure with this RB execution context which has a few more things on the thread that were separated for reasons. And inside here we actually see the size of the stack and the information about the stack. And then we have this array of RB control frame T elements. And this is a pointer into an array that then has these entries, the RB control frame struct. So basically these entries are what represent a stack frame in the VM. So if you see five lines in your stack frame, there will be five of this. And you see that there are some things in here, like if you're wanting to see IC which is the instruction sequence. So this is like the Ruby byte codes for that method or block or whatever that's getting executed. You see like self, the object on each which was called. You actually see like JIT return which was added to support YJIT and the other JIT so that they use that. And there's a few more things that we'll ignore. But yeah, this is how the Ruby VM represents the information that's on the stack internally. So whenever a method gets called, a frame is pushed to represent this new method that got called. So there's this VM push frame method that, like the interesting part is here on the right, which is like, we're setting it up. We say, we have the self object. Like there's some things that we want to care to track. So that adds one more onto the stack. And you would not be surprised if I told you that this stack gets popped and there is a VM pop frame method that actually function in C. That actually takes care of this. So fine, this is kind of what you might be expecting. So let's talk a bit about the backtracing gem. Yes, maybe this is good. I'm doing timing. So the backtracing gem is this really weird gem that I create. And let me tell you why I created it. I created it because of something like this. So if I show you this, main, print stacks, new initialized times, block initialized backtrace. If you squint at it a bit, maybe you can speculate on what's going on. But it's kind of hard for you to get a lay of the land and understand what's this weird example thing doing without looking at the source code. You need to be looking at the source code and then it makes perfect sense. It's here, it's here, it's here. But if you're not looking at source code, it doesn't make a lot of sense. So this is something I was thinking of. Like can we actually improve stack traces and give you more information so that you can read the stack trace and get more information without actually going to one or more files. Because this could be across ten files and you would have to follow along. So actually this is the code, you don't have to read it very much. The interesting thing is that we have this method print stacks that gets called here that creates an instance of print stacks that then initialize and then inside there's the times and then we print the backtrace. But I've shown you the code. So the idea is that Ruby what you saw was printed with the Ruby backtrace. And with the backtrace.jm you can instead get this. You get the class names. You get like a dot on print, hello, Fosdem and here you can see like the namespace. So here you see that like we're calling you on the class and then this is like an instance method. And then we're calling integer times and then we're having a block inside initialize and then backtrace location. This is kind of the thing I wanted to experiment with. Maybe it won't look exactly like this, maybe it will look different. But try to get more context so that you can look at it and you will go like, I think I see what's going on even without opening up your editor and maybe navigating to the ten different files. So this is what I mean about prettier backtraces. I wanted to experiment with adding more things, things such as like class and module names, things such as like show a dot or a hashtag if the method is or like an instance or a class to be able to quickly distinguish that. Maybe distinguish like singleton methods, so methods that you define on a specific object versus just like a regular method from that class so that you can see this is a weird thing that showed up on this object. Maybe that's relevant. You could distinguish refinement, which is this weird thing, which is like methods that show up based on like some context thing. You could maybe show method arguments, maybe that's useful sometimes for you to distinguish between a few of your methods. Maybe even show C function names or like file names and line numbers. Because one thing you might have realized is that I shown you that array and the collect and whatever methods are implemented with C code. But you never see the C file and the C line where they are implemented in your backtrace. So if you want to actually follow that into the VM and understand what's going on or maybe you just are working on a Ruby native gem, you actually don't see that information, Ruby hides it and doesn't even keep it. Another thing is like maybe even have some visibility into the native sex and what might be going there because you might be debugging like this postgres or my SQL driver which is going into C code. So how far did I get? Well, I got this working, this working, this working, this working. This is not, I haven't tried it yet. This is a really awful hack, so let's say maybe. And this is not working yet. So I'm still kind of experimenting with how far we can get. So a question is like how does backtrace work? So the TLDR is basically I've shown you how things get stored inside Ruby. So we basically just like go in there and get what we need out of Ruby without Ruby really having any APIs to do this thing, which is fun. So but these are internal VM APIs. So they are like in private headers and they are not available to gem. So how does this work? How can we access this information? And this is like the cool thing about like that this prototype allowed me to play with. So let's talk a bit about accessing Ruby VM internal APIs. So what's the backdoor? There's actually two different backdoors for accessing this VM internal C headers in C Ruby. One is the hidden Mjith header. So you might have heard about the Mjith experimental JIT compiler. So from Ruby 2.6 and 2.3.2 it was a part of Ruby. And it actually generated some C code and then compiled it. And that C code actually needed a header with some of the internal things. And so what the Ruby developer did was very silently, they went into this folder which is like a weird name and they created this RBM JIT header which is nobody supposed to use. And put that information there. So we can actually search this information from there and then use it. So yes, it's great just for the private use of the Mjith compiler. And if you import this, it's like weird working with it and a bunch of things doesn't work very well. Because it was not supposed to be used by anyone other than the Mjith compiler. But it includes like a copy of all the things we're looking at so we can make it work. Backdoor number two, which is like one of my weirdest backdoors, which is the device Ruby course of gem. So the idea is since the Ruby VM doesn't have any of the headers it needs. Thank you. This gem actually just kind of copypites all of the Ruby headers. So it has a folder and it has like some folders for every Ruby release and then kind of someone just copypites every header in there for every release and then release the new version of the gem. It's very crude, it works for all Ruby. So 3.3, now that's Mjith is gone in 3.2. And it also works like as far back as like Ruby to one or two zero. But yeah, you could do something like that. So the backdoor is like once we know what's the shape of these VM internal structures we can access them in backtracing. And if you remember this slide where I said I'll come back to this one, RB profile frames and RB profile thread frames, now is the time. So what I did in backtracing is that I started by copypasting RB profile frames into the backtracing code, just going into the Ruby VM like copypaste. And obviously when you copypaste from like an open source project, make sure you understand what's the license and if you can do that, you can do that with Ruby. And so I did this. It's fine, but make sure to like have the copyright headers and all that information. And then I added a bunch of features to experiment with it and get all of the things I was talking about. And actually, it was really interesting, this approach was really, I found it a really great way of prototyping something without having to depend on a custom build of the Ruby VM. Because I actually started by modifying the Ruby VM, but then I have a Ruby VM that works only for me and that features only for me. Instead, if I do this, I can tell you gem install backtracing and you can get it as well. So it's like an interesting approach to like playing with something that you would otherwise not play, but be careful. So obviously there's a lot of small details to get right. I am glossing over a ton of things needed to kind of get this weird thing. So for instance, you might want to access some VM internal structure, but you might not know exactly how to access it. So sometimes you need to kind of go read the Ruby API very carefully and see, this object that Ruby hands me actually internally has a pointer to the other thing, which has a pointer to the other thing, which eventually is what I want. So sometimes you need to do a bit of squinting at Ruby and understanding like how are you going to get access to this information. Like in some cases, like the copy pasted code also called other private VM internal APIs that are not exposed by the VM. So when I copy pasted, I compile it and then I try to run it. It doesn't work because those APIs aren't there. They aren't visible to gems. So again, like a lot of details here. Sometimes you just copy paste more and you keep copy pasting until it works. Sometimes you need to re-implement some things yourself because it's easier than you look at it as like okay, I don't need all of the things. But you need to play it a bit with it until you understand how you get it to work. But it has some really cool side effects. So for one, I was able to get this to work as far back as Ruby 2.3 with a lot of conditional compilation things in C. And even as I've done some experiments, even as far back as Ruby 2.1, so I think you could do this. And it was kind of cool because this includes back porting of RbProform frames features. So I copy pasted from Ruby 3 version and actually they have added a few features and some bug fixes and whatever. And so by copy pasting this and then using it on Ruby 2.3, I was actually having features that were not present in Ruby 2.3 from the modern version of the code, which was really cool. I also did not do it alone thanks to KJ from Zendesk that did a lot of work on Backtracing. And so let's quickly take a look at, interesting. Is it one full color? I don't know. So let's take a look at how we can use Backtracing. So you can go on the website, you can install the gem. As I said, it's the magic of doing this thing in this weird way, is that it works for you, for everyone, just install. It has this API which is Backtracing Locations, which gives you an array of locations, which is Backtracing's version of Ruby's location. So you get a lot of nice methods with the different things that Backtracing got, but Backtracing has a lot more things, and I will show you in a bit. Then you also get color locations, like Ruby, you get just for the colors of this current thread. And some use cases you can do with this. So you can obviously probe what information is there and you can implement your own printer. So there's a lot of information about the different names of the methods. And for this very simple example, actually they have all the same names, but sometimes Ruby has these notions of different names. So you can access all of them, you can access the objects that this was called on, you can access the class, a bunch of things. So you can use this, and then you can implement your own printer. That imprints a very nice stack trace. You can obviously use this to just get the pretty stack trace. So by default, Backtracing prints exactly as Ruby does, but if you call fancy to S, you get the one with the class names and a few other fancy things. And you can also call this weird Backtracing gem from C code, it has a bunch of APIs. And in particular, it has a special low overhead API for profilers and tools like that. So if you're interested in building something like that, you can use Backtracing to get the stacks and not have to care about. And actually one gem that's using Backtracing is this Ruby mem profiler that was created by KJ and I helped a bit as well. And so it's like an open source gem by Zendesk, which uses the Backtracing API to build a flame graph of memory so you can investigate memory usage and memory leaks and reduce the memory footprint of your application or even fix memory leaks. So we actually, me and KJ, we gave a talk at RubyKaigi about this thing called Hunting Production Memory Leaks with HIP sampling. So if you're curious, check that talk out. So some other use cases that we've been playing with on Backtracing. So you can actually access native function debug info. There's actually a lot to be said about how you get debug info from native libraries on Linux and different OSes and debug symbols and warf and whatever. I will not go into much into that because that's a nightmare. But I have a working prototype which actually you can see for each. You can see, okay, each belongs to Array. But you can also see it's implemented in this libruby.so object. You can see I'm using Ruby 3.1. And you can see that the C function name is rbarrayeach. And then in the future, we could even get more of the bug information, assuming it's still available and see the file name, the line number, etc. And allow you to smoothly go from Ruby code to C code as if, yeah. And theoretically, this native information doesn't have to just be C. So if you have a Ruby gem that is built in Rust and the Rust binding would have the correct debug information, you could go directly from your Stacktrace to, it's this Rust line. So it's really nice to, that's why I'm looking into having this information. Another idea that I have that I still haven't experimented, I haven't tried really hard to do it, which is, could we build a Backtrace Stacktrace for exception? So that when you have an exception in your app, you get the nicer objects which Backtrace provides you and you can get the full information. I haven't tried it yet, want to do it. So, just kind of a recap. What did I learn from all of this experimentation and playing? One thing is that the Ruby VM itself is very interesting and I would say surprisingly approachable. So my prior C experience was university projects and really, really tiny personal stuff. So I would not classify as a C developer ever. And I like everyone that goes to uni, I just kind of listed C in my CV because I did it at this one or two courses. But really, I was not a C developer and I still could follow along a lot of stuff. And especially if you go there and you add a printf and you start playing, changing the code a bit, it's like, you see things happening. It's really interesting. And also the power of having a working prototype to show off a crazy idea. And this had really two side effects that I was kind of hoping for, but didn't quite expect it would happen. One is that we actually at Datadog ended up using a similar approach for the Datadog Ruby Rufaller. And with Backtrace, I kind of proved to the team, I was like, yep, it works, I've got it working. This is one thing we could do if we wanted to. And the other thing is that the Ruby Core team also kind of liked the show class names in Stack Traces thing. And this kind of started an interesting discussion. And this leads us to the final item, which is class names in Backtraces coming soon in Ruby 3.4. Question mark. So actually in the Ruby issue tracker, this is now being discussed. This number 19117 include the method owner in Backtraces, not just the method name. This was opened by Jean-Bossier, had this proposal after we were discussing this at RubyKaigi. And then Mame implemented like it has a working prototype for this that it has a PR for Ruby. And actually if you just build it, it works. Like as kind of what we were saying, now you get this information of like the full class and you see that this is an instance method and you see like the dot on the class method. So we had this extra information for developers to just out of the box. Obviously this is still being discussed. So if you like this idea, you want to see this in Ruby 3.4 and use it in your app. Just try it out, go and leave feedback on this issue. And that was kind of it that I have had to tell you. So yeah, email if you want to talk to me, a knox on whatever they call the social network, my blog. I have a few other talks and here like yes, go get feedback because Ruby developers are actually calling for feedback in that ticket. And I actually, thanks to my employer, they developed for allowing me to work on these things. And I actually, if you're interested in coming work on the data about Ruby Jam, ping me because we are hiring right now for the Ruby Jam. And it's really different kind of Ruby that we do. Yeah, questions? Hello. Yeah. I think you mostly answered it but the class shown in the trace, Yeah. 3, 4, and 3, 4 and backtracing, it is the owner of the method. Like we can statically, because in J-Bruity the only way we get the piled backtrace is by cramming a bunch of data into the class name or the file name or whatever it's on the JVM's trace. Yeah. I can't make that dynamic. Once I set that stone to the method, it's going to stay that way. But if it's the method owner, then at the point where I can pile it, I can just throw that extra information in there and pull it out. I think that's right. Yeah, I believe the disimplementation is exactly the method owner. I think in backtrace, yeah, I experimented with having both, but it's much harder. And I think part of the discussion going on in the ticket is also, what about dynamically defined stuff and whatever? So I think the implementation is like, oh, when it gets, and I think, yeah. In some cases, it might not show, because it's kind of hard to get this information even in CRuby and expose it in a very efficient way. But in a lot of cases, it's like a regular method on a regular class and it gets it. So yeah. More of a product question instead of a technical one. Yes. You say it came from the, you wanted to have access to what was being called. Yeah. Is that something you personally, or is that something that was shared across the team and then something related to that? Essentially, I'm not working with anything compared to that. Yeah. Will I get something out of it myself? I have a small company. I think so. And then I really, so my other background other than Ruby is Java. And in a Java backtrace, you usually get the class and the method. And I've always found it easier to, in a lot of cases, easier to think about. Like, oh, this is the class and this isn't the method on my class. Then just like the method names. Obviously, in Ruby, if you have a very well-structured code base, you know that app flash foo flash dot rb is going to be foo bar. Like, you know. But sometimes code is not actually that simple. There are like, so near parts of the application. So that's the part where I feel like this kind of thing comes in handy. And I kind of missed it from Java. And I had worked with Java tools and I was thinking like, I want this thing from Java. Can I have it? The, actually, other thing I can add is that because for methods in the Ruby VM, right now, Ruby never shows you, like, where array is in the VM. It kind of, it kind of blames you. I can show it very quickly. If I go back to the way, way, way, way beginning, you can kind of see this here. So this thing, have you noticed that Ruby is lying there and there and there? Is Kiehl defined in line three? Is Collect defined in line three? Is it defined in line three? No. So when you have a C func, like a C API or native API being called from Ruby, Ruby lies and just basically decides, it's the caller. So that's the thing. And actually, at some point, I had to debug this really weird case where Ruby was calling inspect and I really didn't understand it. And I had a bunch of like, new inspect, new inspect, new inspect going into the VM. And I really didn't understand it. And I actually got out backtracing to just get that stack trace. And I understood that it was like this weird case when you have a no methods error on like some Ruby version, Ruby will actually call inspect on your objects. And in some cases, it will, after calling inspect, it will throw the inspect away. Which was like, I was like, why is, whatever. But sometimes, like it gives you a lot more viewing, a lot more context if you know exactly where the methods are getting called and the classes. So here you would see process skill, et cetera. So it's much clearer in my opinion. Yeah. Did you try to apply the same approach on heap dumps? Apparently, you're just inspecting the internal C structures. So at least theoretically, it should be possible to inspect the heap dumps. Yes. So like, I'm not, it's been a while since I've looked at the JSON output of heap dump. So I'm not sure if it has this information, but it could. And actually, even if it doesn't have it, I don't think actually you don't need to go as far as backtracing and accessing the internal stuff. Because you can do like objects.pac.each to implement your own heap dump. And when you do have xpac.each, you have access to the objects where things are defined. I was talking about the dump files. The JSON file, yeah. I mean, not the JSONs that you can get from. I mean like a crash, like a heap dump of a crash of the VM. Yeah, yeah, it could. It's the same thing. Like the structures are there. So you could do this. Like you could even do like a GDB script or whatever debugger script that accesses the same things and reads it. And actually just one thing, if you ever heard of the RbSpy profiler, which is like built by Julie Evans originally, like RbSpy is kind of doing the same from, but from the outside the process. It's like, it's a rough process that it's like reading Ruby memory, reading those things and then showing information. So I actually at some point tried to prototype this in RbSpy and then I just got bored and did something else. Yes. If we want to start looking into the C code of the VM, is there a documentation or somewhere we can start to not reading all of the code? Yes. There is. There is actually a really nice repository that I think is like there is like a, I think it was built by I'm going to say Koichi, like one of the core Ruby developers that have like a nice introduction to the VM. I don't know exactly the name of the repo, but like email me and I have that in my bookmarks and I will send it to you because it exists. Actually, it might, like let me quickly do something. Maybe there's a... A challenge. Yeah, it's that thing. Exactly. Ruby Act Challenge. And I think in the backtracy repo, there's actually some links at the bottom and it might be there because I included in the repository a bunch of links of interesting things I found to read this information. And so if you go to the GitHub repo, the bottom, it might be there, but yes, it's Ruby Act Challenge. So Google it, you probably find it. Thank you. Thanks, everyone. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.72, "text": " Okay, let's get started.", "tokens": [50364, 1033, 11, 718, 311, 483, 1409, 13, 51050], "temperature": 0.0, "avg_logprob": -0.3743858043964092, "compression_ratio": 1.3144654088050314, "no_speech_prob": 0.3175021708011627}, {"id": 1, "seek": 0, "start": 13.72, "end": 19.48, "text": " So hello and welcome to Backtracy and the quest for prettier Ruby backtraces.", "tokens": [51050, 407, 7751, 293, 2928, 281, 5833, 6903, 2551, 293, 264, 866, 337, 36825, 19907, 646, 6903, 2116, 13, 51338], "temperature": 0.0, "avg_logprob": -0.3743858043964092, "compression_ratio": 1.3144654088050314, "no_speech_prob": 0.3175021708011627}, {"id": 2, "seek": 0, "start": 19.48, "end": 21.84, "text": " So who am I to be here today?", "tokens": [51338, 407, 567, 669, 286, 281, 312, 510, 965, 30, 51456], "temperature": 0.0, "avg_logprob": -0.3743858043964092, "compression_ratio": 1.3144654088050314, "no_speech_prob": 0.3175021708011627}, {"id": 3, "seek": 0, "start": 21.84, "end": 26.8, "text": " My name is Yvon Zhe and I'm currently a senior software engineer at Datadog.", "tokens": [51456, 1222, 1315, 307, 398, 85, 266, 1176, 675, 293, 286, 478, 4362, 257, 7965, 4722, 11403, 412, 9315, 345, 664, 13, 51704], "temperature": 0.0, "avg_logprob": -0.3743858043964092, "compression_ratio": 1.3144654088050314, "no_speech_prob": 0.3175021708011627}, {"id": 4, "seek": 2680, "start": 26.8, "end": 32.2, "text": " I've been in love with Ruby since I started using it professionally around 10 years ago.", "tokens": [50364, 286, 600, 668, 294, 959, 365, 19907, 1670, 286, 1409, 1228, 309, 27941, 926, 1266, 924, 2057, 13, 50634], "temperature": 0.0, "avg_logprob": -0.29094928325992997, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.08651354908943176}, {"id": 5, "seek": 2680, "start": 32.2, "end": 38.120000000000005, "text": " And I am a really big fan of going into an exploring language run times like C-Ruby,", "tokens": [50634, 400, 286, 669, 257, 534, 955, 3429, 295, 516, 666, 364, 12736, 2856, 1190, 1413, 411, 383, 12, 49, 836, 88, 11, 50930], "temperature": 0.0, "avg_logprob": -0.29094928325992997, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.08651354908943176}, {"id": 6, "seek": 2680, "start": 38.120000000000005, "end": 41.64, "text": " J-Ruby, Truffle Ruby, Java VM and others.", "tokens": [50930, 508, 12, 49, 836, 88, 11, 21388, 602, 306, 19907, 11, 10745, 18038, 293, 2357, 13, 51106], "temperature": 0.0, "avg_logprob": -0.29094928325992997, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.08651354908943176}, {"id": 7, "seek": 2680, "start": 41.64, "end": 44.72, "text": " And I've been attending FOSDEM every year since 2017, but", "tokens": [51106, 400, 286, 600, 668, 15862, 479, 4367, 35, 6683, 633, 1064, 1670, 6591, 11, 457, 51260], "temperature": 0.0, "avg_logprob": -0.29094928325992997, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.08651354908943176}, {"id": 8, "seek": 2680, "start": 44.72, "end": 47.56, "text": " this is my first time speaking, so I'm excited.", "tokens": [51260, 341, 307, 452, 700, 565, 4124, 11, 370, 286, 478, 2919, 13, 51402], "temperature": 0.0, "avg_logprob": -0.29094928325992997, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.08651354908943176}, {"id": 9, "seek": 2680, "start": 47.56, "end": 49.0, "text": " So I also-", "tokens": [51402, 407, 286, 611, 12, 51474], "temperature": 0.0, "avg_logprob": -0.29094928325992997, "compression_ratio": 1.4497816593886463, "no_speech_prob": 0.08651354908943176}, {"id": 10, "seek": 4900, "start": 49.0, "end": 57.0, "text": " Yes, pray for the cable.", "tokens": [50364, 1079, 11, 3690, 337, 264, 8220, 13, 50764], "temperature": 0.0, "avg_logprob": -0.19714671167834052, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.062176238745450974}, {"id": 11, "seek": 4900, "start": 57.0, "end": 62.2, "text": " I'm also excited to play about concurrency, application performance and", "tokens": [50764, 286, 478, 611, 2919, 281, 862, 466, 23702, 10457, 11, 3861, 3389, 293, 51024], "temperature": 0.0, "avg_logprob": -0.19714671167834052, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.062176238745450974}, {"id": 12, "seek": 4900, "start": 62.2, "end": 66.96000000000001, "text": " making tools that help us kind of look at our apps in different ways and", "tokens": [51024, 1455, 3873, 300, 854, 505, 733, 295, 574, 412, 527, 7733, 294, 819, 2098, 293, 51262], "temperature": 0.0, "avg_logprob": -0.19714671167834052, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.062176238745450974}, {"id": 13, "seek": 4900, "start": 66.96000000000001, "end": 72.44, "text": " new ways and try to uncover new insights about performance by looking at them in a different way.", "tokens": [51262, 777, 2098, 293, 853, 281, 21694, 777, 14310, 466, 3389, 538, 1237, 412, 552, 294, 257, 819, 636, 13, 51536], "temperature": 0.0, "avg_logprob": -0.19714671167834052, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.062176238745450974}, {"id": 14, "seek": 4900, "start": 72.44, "end": 77.68, "text": " So that's how I ended up working on this thing, the Datadog profiler for Ruby.", "tokens": [51536, 407, 300, 311, 577, 286, 4590, 493, 1364, 322, 341, 551, 11, 264, 9315, 345, 664, 1740, 5441, 337, 19907, 13, 51798], "temperature": 0.0, "avg_logprob": -0.19714671167834052, "compression_ratio": 1.5727272727272728, "no_speech_prob": 0.062176238745450974}, {"id": 15, "seek": 7768, "start": 77.68, "end": 80.72000000000001, "text": " So if you're curious, come talk to me about Ruby Performance.", "tokens": [50364, 407, 498, 291, 434, 6369, 11, 808, 751, 281, 385, 466, 19907, 25047, 13, 50516], "temperature": 0.0, "avg_logprob": -0.1786601011418114, "compression_ratio": 1.6938775510204083, "no_speech_prob": 0.009917094372212887}, {"id": 16, "seek": 7768, "start": 80.72000000000001, "end": 83.2, "text": " I like to talk a lot about that.", "tokens": [50516, 286, 411, 281, 751, 257, 688, 466, 300, 13, 50640], "temperature": 0.0, "avg_logprob": -0.1786601011418114, "compression_ratio": 1.6938775510204083, "no_speech_prob": 0.009917094372212887}, {"id": 17, "seek": 7768, "start": 83.2, "end": 87.48, "text": " So, but for today, what we're going to talk about is what's the backtrace?", "tokens": [50640, 407, 11, 457, 337, 965, 11, 437, 321, 434, 516, 281, 751, 466, 307, 437, 311, 264, 646, 6903, 617, 30, 50854], "temperature": 0.0, "avg_logprob": -0.1786601011418114, "compression_ratio": 1.6938775510204083, "no_speech_prob": 0.009917094372212887}, {"id": 18, "seek": 7768, "start": 87.48, "end": 88.92, "text": " How can we get one?", "tokens": [50854, 1012, 393, 321, 483, 472, 30, 50926], "temperature": 0.0, "avg_logprob": -0.1786601011418114, "compression_ratio": 1.6938775510204083, "no_speech_prob": 0.009917094372212887}, {"id": 19, "seek": 7768, "start": 88.92, "end": 93.96000000000001, "text": " Then how does the Ruby stack work in reality?", "tokens": [50926, 1396, 577, 775, 264, 19907, 8630, 589, 294, 4103, 30, 51178], "temperature": 0.0, "avg_logprob": -0.1786601011418114, "compression_ratio": 1.6938775510204083, "no_speech_prob": 0.009917094372212887}, {"id": 20, "seek": 7768, "start": 93.96000000000001, "end": 97.60000000000001, "text": " Then we'll talk a bit about the backtracy gem, this is not good.", "tokens": [51178, 1396, 321, 603, 751, 257, 857, 466, 264, 646, 6903, 2551, 7173, 11, 341, 307, 406, 665, 13, 51360], "temperature": 0.0, "avg_logprob": -0.1786601011418114, "compression_ratio": 1.6938775510204083, "no_speech_prob": 0.009917094372212887}, {"id": 21, "seek": 7768, "start": 97.60000000000001, "end": 102.44000000000001, "text": " I will be talking about accessing the internal VM APIs to do some of", "tokens": [51360, 286, 486, 312, 1417, 466, 26440, 264, 6920, 18038, 21445, 281, 360, 512, 295, 51602], "temperature": 0.0, "avg_logprob": -0.1786601011418114, "compression_ratio": 1.6938775510204083, "no_speech_prob": 0.009917094372212887}, {"id": 22, "seek": 7768, "start": 102.44000000000001, "end": 105.32000000000001, "text": " the weird things that the backtracy gem does.", "tokens": [51602, 264, 3657, 721, 300, 264, 646, 6903, 2551, 7173, 775, 13, 51746], "temperature": 0.0, "avg_logprob": -0.1786601011418114, "compression_ratio": 1.6938775510204083, "no_speech_prob": 0.009917094372212887}, {"id": 23, "seek": 10532, "start": 105.32, "end": 110.67999999999999, "text": " Then we'll play with backtracing in action and then we will talk about maybe", "tokens": [50364, 1396, 321, 603, 862, 365, 646, 6903, 5615, 294, 3069, 293, 550, 321, 486, 751, 466, 1310, 50632], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 24, "seek": 10532, "start": 110.67999999999999, "end": 114.67999999999999, "text": " a new feature in Ruby 3.4 which is having class names in backtraces.", "tokens": [50632, 257, 777, 4111, 294, 19907, 805, 13, 19, 597, 307, 1419, 1508, 5288, 294, 646, 6903, 2116, 13, 50832], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 25, "seek": 10532, "start": 114.67999999999999, "end": 115.88, "text": " So what's a backtrace?", "tokens": [50832, 407, 437, 311, 257, 646, 6903, 617, 30, 50892], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 26, "seek": 10532, "start": 115.88, "end": 117.0, "text": " How to get one?", "tokens": [50892, 1012, 281, 483, 472, 30, 50948], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 27, "seek": 10532, "start": 117.0, "end": 120.24, "text": " If you're a Ruby developer, you probably know what the backtrace is, but", "tokens": [50948, 759, 291, 434, 257, 19907, 10754, 11, 291, 1391, 458, 437, 264, 646, 6903, 617, 307, 11, 457, 51110], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 28, "seek": 10532, "start": 120.24, "end": 125.28, "text": " quick reminder, it's mostly like a trail of what methods were called and", "tokens": [51110, 1702, 13548, 11, 309, 311, 5240, 411, 257, 9924, 295, 437, 7150, 645, 1219, 293, 51362], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 29, "seek": 10532, "start": 125.28, "end": 128.6, "text": " are still waiting to return at some given point in the app.", "tokens": [51362, 366, 920, 3806, 281, 2736, 412, 512, 2212, 935, 294, 264, 724, 13, 51528], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 30, "seek": 10532, "start": 128.6, "end": 131.95999999999998, "text": " And it's also called like a stack trace in some languages because it", "tokens": [51528, 400, 309, 311, 611, 1219, 411, 257, 8630, 13508, 294, 512, 8650, 570, 309, 51696], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 31, "seek": 10532, "start": 131.95999999999998, "end": 133.84, "text": " represents what's on the thread stack.", "tokens": [51696, 8855, 437, 311, 322, 264, 7207, 8630, 13, 51790], "temperature": 0.0, "avg_logprob": -0.17518273521872127, "compression_ratio": 1.6711409395973154, "no_speech_prob": 0.001423062290996313}, {"id": 32, "seek": 13384, "start": 133.84, "end": 137.36, "text": " So backtrace, stacktrace is usually kind of the same thing.", "tokens": [50364, 407, 646, 6903, 617, 11, 8630, 6903, 617, 307, 2673, 733, 295, 264, 912, 551, 13, 50540], "temperature": 0.0, "avg_logprob": -0.17320683423210592, "compression_ratio": 1.8381294964028776, "no_speech_prob": 0.0030443731229752302}, {"id": 33, "seek": 13384, "start": 137.36, "end": 142.76, "text": " And okay, if we have this A that we call A, that calls B and", "tokens": [50540, 400, 1392, 11, 498, 321, 362, 341, 316, 300, 321, 818, 316, 11, 300, 5498, 363, 293, 50810], "temperature": 0.0, "avg_logprob": -0.17320683423210592, "compression_ratio": 1.8381294964028776, "no_speech_prob": 0.0030443731229752302}, {"id": 34, "seek": 13384, "start": 142.76, "end": 145.04, "text": " then raises an exception and then you get a backtrace.", "tokens": [50810, 550, 19658, 364, 11183, 293, 550, 291, 483, 257, 646, 6903, 617, 13, 50924], "temperature": 0.0, "avg_logprob": -0.17320683423210592, "compression_ratio": 1.8381294964028776, "no_speech_prob": 0.0030443731229752302}, {"id": 35, "seek": 13384, "start": 145.04, "end": 149.48000000000002, "text": " So we probably see this way too often and maybe you have some nightmares when", "tokens": [50924, 407, 321, 1391, 536, 341, 636, 886, 2049, 293, 1310, 291, 362, 512, 36911, 562, 51146], "temperature": 0.0, "avg_logprob": -0.17320683423210592, "compression_ratio": 1.8381294964028776, "no_speech_prob": 0.0030443731229752302}, {"id": 36, "seek": 13384, "start": 149.48000000000002, "end": 153.68, "text": " you see this, but hopefully it will help you figure out your issues in your app.", "tokens": [51146, 291, 536, 341, 11, 457, 4696, 309, 486, 854, 291, 2573, 484, 428, 2663, 294, 428, 724, 13, 51356], "temperature": 0.0, "avg_logprob": -0.17320683423210592, "compression_ratio": 1.8381294964028776, "no_speech_prob": 0.0030443731229752302}, {"id": 37, "seek": 13384, "start": 153.68, "end": 156.64000000000001, "text": " So there's multiple ways of getting a backtrace in Ruby.", "tokens": [51356, 407, 456, 311, 3866, 2098, 295, 1242, 257, 646, 6903, 617, 294, 19907, 13, 51504], "temperature": 0.0, "avg_logprob": -0.17320683423210592, "compression_ratio": 1.8381294964028776, "no_speech_prob": 0.0030443731229752302}, {"id": 38, "seek": 13384, "start": 156.64000000000001, "end": 158.96, "text": " One of them is rescuing an exception.", "tokens": [51504, 1485, 295, 552, 307, 9610, 9635, 364, 11183, 13, 51620], "temperature": 0.0, "avg_logprob": -0.17320683423210592, "compression_ratio": 1.8381294964028776, "no_speech_prob": 0.0030443731229752302}, {"id": 39, "seek": 13384, "start": 158.96, "end": 162.84, "text": " And an interesting thing is that actually the backtrace gets set on the exception", "tokens": [51620, 400, 364, 1880, 551, 307, 300, 767, 264, 646, 6903, 617, 2170, 992, 322, 264, 11183, 51814], "temperature": 0.0, "avg_logprob": -0.17320683423210592, "compression_ratio": 1.8381294964028776, "no_speech_prob": 0.0030443731229752302}, {"id": 40, "seek": 16284, "start": 162.84, "end": 166.08, "text": " when the exception is raised, not when it's created.", "tokens": [50364, 562, 264, 11183, 307, 6005, 11, 406, 562, 309, 311, 2942, 13, 50526], "temperature": 0.0, "avg_logprob": -0.18300422152182214, "compression_ratio": 1.8125, "no_speech_prob": 0.003318247152492404}, {"id": 41, "seek": 16284, "start": 166.08, "end": 168.6, "text": " Because you can create an exception but not raise it immediately.", "tokens": [50526, 1436, 291, 393, 1884, 364, 11183, 457, 406, 5300, 309, 4258, 13, 50652], "temperature": 0.0, "avg_logprob": -0.18300422152182214, "compression_ratio": 1.8125, "no_speech_prob": 0.003318247152492404}, {"id": 42, "seek": 16284, "start": 168.6, "end": 172.32, "text": " And so the backtrace only gets set when you raise it.", "tokens": [50652, 400, 370, 264, 646, 6903, 617, 787, 2170, 992, 562, 291, 5300, 309, 13, 50838], "temperature": 0.0, "avg_logprob": -0.18300422152182214, "compression_ratio": 1.8125, "no_speech_prob": 0.003318247152492404}, {"id": 43, "seek": 16284, "start": 172.32, "end": 176.68, "text": " And you can get a backtrace by just getting a thread and asking for it.", "tokens": [50838, 400, 291, 393, 483, 257, 646, 6903, 617, 538, 445, 1242, 257, 7207, 293, 3365, 337, 309, 13, 51056], "temperature": 0.0, "avg_logprob": -0.18300422152182214, "compression_ratio": 1.8125, "no_speech_prob": 0.003318247152492404}, {"id": 44, "seek": 16284, "start": 176.68, "end": 180.76, "text": " Or you can use the color API, which is part of kernel.", "tokens": [51056, 1610, 291, 393, 764, 264, 2017, 9362, 11, 597, 307, 644, 295, 28256, 13, 51260], "temperature": 0.0, "avg_logprob": -0.18300422152182214, "compression_ratio": 1.8125, "no_speech_prob": 0.003318247152492404}, {"id": 45, "seek": 16284, "start": 180.76, "end": 184.0, "text": " So it's part of every Ruby object, so it just can type color and", "tokens": [51260, 407, 309, 311, 644, 295, 633, 19907, 2657, 11, 370, 309, 445, 393, 2010, 2017, 293, 51422], "temperature": 0.0, "avg_logprob": -0.18300422152182214, "compression_ratio": 1.8125, "no_speech_prob": 0.003318247152492404}, {"id": 46, "seek": 16284, "start": 184.0, "end": 187.08, "text": " you will get the stack trace of the method that called U.", "tokens": [51422, 291, 486, 483, 264, 8630, 13508, 295, 264, 3170, 300, 1219, 624, 13, 51576], "temperature": 0.0, "avg_logprob": -0.18300422152182214, "compression_ratio": 1.8125, "no_speech_prob": 0.003318247152492404}, {"id": 47, "seek": 16284, "start": 188.6, "end": 192.48000000000002, "text": " So you might have noticed that were backtrace and backtrace locations.", "tokens": [51652, 407, 291, 1062, 362, 5694, 300, 645, 646, 6903, 617, 293, 646, 6903, 617, 9253, 13, 51846], "temperature": 0.0, "avg_logprob": -0.18300422152182214, "compression_ratio": 1.8125, "no_speech_prob": 0.003318247152492404}, {"id": 48, "seek": 19248, "start": 193.23999999999998, "end": 199.72, "text": " The methods that end with locations return an array of these location objects that", "tokens": [50402, 440, 7150, 300, 917, 365, 9253, 2736, 364, 10225, 295, 613, 4914, 6565, 300, 50726], "temperature": 0.0, "avg_logprob": -0.28249807711000796, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.003836424322798848}, {"id": 49, "seek": 19248, "start": 199.72, "end": 203.35999999999999, "text": " includes absolute path, base level, level, etc.", "tokens": [50726, 5974, 8236, 3100, 11, 3096, 1496, 11, 1496, 11, 5183, 13, 50908], "temperature": 0.0, "avg_logprob": -0.28249807711000796, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.003836424322798848}, {"id": 50, "seek": 19248, "start": 203.35999999999999, "end": 207.6, "text": " So basically it gives you a nice domain object to represent the stack trace.", "tokens": [50908, 407, 1936, 309, 2709, 291, 257, 1481, 9274, 2657, 281, 2906, 264, 8630, 13508, 13, 51120], "temperature": 0.0, "avg_logprob": -0.28249807711000796, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.003836424322798848}, {"id": 51, "seek": 19248, "start": 207.6, "end": 209.88, "text": " Whereas the other method just kind of represents,", "tokens": [51120, 13813, 264, 661, 3170, 445, 733, 295, 8855, 11, 51234], "temperature": 0.0, "avg_logprob": -0.28249807711000796, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.003836424322798848}, {"id": 52, "seek": 19248, "start": 209.88, "end": 212.2, "text": " just to return you the strings that Ruby prints.", "tokens": [51234, 445, 281, 2736, 291, 264, 13985, 300, 19907, 22305, 13, 51350], "temperature": 0.0, "avg_logprob": -0.28249807711000796, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.003836424322798848}, {"id": 53, "seek": 19248, "start": 212.2, "end": 213.72, "text": " So that's the difference.", "tokens": [51350, 407, 300, 311, 264, 2649, 13, 51426], "temperature": 0.0, "avg_logprob": -0.28249807711000796, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.003836424322798848}, {"id": 54, "seek": 19248, "start": 213.72, "end": 217.32, "text": " There's also some Ruby VMC APIs to getting a backtrace.", "tokens": [51426, 821, 311, 611, 512, 19907, 18038, 34, 21445, 281, 1242, 257, 646, 6903, 617, 13, 51606], "temperature": 0.0, "avg_logprob": -0.28249807711000796, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.003836424322798848}, {"id": 55, "seek": 19248, "start": 217.32, "end": 221.2, "text": " A few ones for different kind of use cases.", "tokens": [51606, 316, 1326, 2306, 337, 819, 733, 295, 764, 3331, 13, 51800], "temperature": 0.0, "avg_logprob": -0.28249807711000796, "compression_ratio": 1.6809338521400778, "no_speech_prob": 0.003836424322798848}, {"id": 56, "seek": 22120, "start": 221.2, "end": 224.32, "text": " And actually these two at the top will come back to this in a bit.", "tokens": [50364, 400, 767, 613, 732, 412, 264, 1192, 486, 808, 646, 281, 341, 294, 257, 857, 13, 50520], "temperature": 0.0, "avg_logprob": -0.20087242126464844, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.0005014168564230204}, {"id": 57, "seek": 22120, "start": 225.51999999999998, "end": 227.67999999999998, "text": " So talking about the stack itself,", "tokens": [50580, 407, 1417, 466, 264, 8630, 2564, 11, 50688], "temperature": 0.0, "avg_logprob": -0.20087242126464844, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.0005014168564230204}, {"id": 58, "seek": 22120, "start": 227.67999999999998, "end": 233.2, "text": " how does the Ruby stack work under the cover specifically for the C Ruby runtime?", "tokens": [50688, 577, 775, 264, 19907, 8630, 589, 833, 264, 2060, 4682, 337, 264, 383, 19907, 34474, 30, 50964], "temperature": 0.0, "avg_logprob": -0.20087242126464844, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.0005014168564230204}, {"id": 59, "seek": 22120, "start": 233.2, "end": 237.35999999999999, "text": " So the idea is that a Ruby thread usually has two stacks.", "tokens": [50964, 407, 264, 1558, 307, 300, 257, 19907, 7207, 2673, 575, 732, 30792, 13, 51172], "temperature": 0.0, "avg_logprob": -0.20087242126464844, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.0005014168564230204}, {"id": 60, "seek": 22120, "start": 237.35999999999999, "end": 240.32, "text": " One is the Ruby stack that we usually see on our application and", "tokens": [51172, 1485, 307, 264, 19907, 8630, 300, 321, 2673, 536, 322, 527, 3861, 293, 51320], "temperature": 0.0, "avg_logprob": -0.20087242126464844, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.0005014168564230204}, {"id": 61, "seek": 22120, "start": 240.32, "end": 241.6, "text": " the other is the native stack.", "tokens": [51320, 264, 661, 307, 264, 8470, 8630, 13, 51384], "temperature": 0.0, "avg_logprob": -0.20087242126464844, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.0005014168564230204}, {"id": 62, "seek": 22120, "start": 241.6, "end": 248.35999999999999, "text": " So the stack that the VM, which is a program built in C, has.", "tokens": [51384, 407, 264, 8630, 300, 264, 18038, 11, 597, 307, 257, 1461, 3094, 294, 383, 11, 575, 13, 51722], "temperature": 0.0, "avg_logprob": -0.20087242126464844, "compression_ratio": 1.7124463519313304, "no_speech_prob": 0.0005014168564230204}, {"id": 63, "seek": 24836, "start": 248.36, "end": 252.28, "text": " And we can actually look at both of them in a really weird way,", "tokens": [50364, 400, 321, 393, 767, 574, 412, 1293, 295, 552, 294, 257, 534, 3657, 636, 11, 50560], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 64, "seek": 24836, "start": 252.28, "end": 254.48000000000002, "text": " which is let's crash Ruby.", "tokens": [50560, 597, 307, 718, 311, 8252, 19907, 13, 50670], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 65, "seek": 24836, "start": 254.48000000000002, "end": 256.24, "text": " And this thing is a weird thing.", "tokens": [50670, 400, 341, 551, 307, 257, 3657, 551, 13, 50758], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 66, "seek": 24836, "start": 256.24, "end": 262.24, "text": " So I'm telling Ruby to send a segmentation fault to itself, which will crash Ruby.", "tokens": [50758, 407, 286, 478, 3585, 19907, 281, 2845, 257, 9469, 399, 7441, 281, 2564, 11, 597, 486, 8252, 19907, 13, 51058], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 67, "seek": 24836, "start": 262.24, "end": 264.64, "text": " And then when we crash Ruby, what we get is this thing,", "tokens": [51058, 400, 550, 562, 321, 8252, 19907, 11, 437, 321, 483, 307, 341, 551, 11, 51178], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 68, "seek": 24836, "start": 264.64, "end": 268.84000000000003, "text": " which is the output of the Ruby crash handler, which includes a lot of nice things.", "tokens": [51178, 597, 307, 264, 5598, 295, 264, 19907, 8252, 41967, 11, 597, 5974, 257, 688, 295, 1481, 721, 13, 51388], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 69, "seek": 24836, "start": 268.84000000000003, "end": 272.84000000000003, "text": " So if you ever get the crash in Ruby, please do include this when reporting bugs.", "tokens": [51388, 407, 498, 291, 1562, 483, 264, 8252, 294, 19907, 11, 1767, 360, 4090, 341, 562, 10031, 15120, 13, 51588], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 70, "seek": 24836, "start": 272.84000000000003, "end": 274.24, "text": " It's really useful.", "tokens": [51588, 467, 311, 534, 4420, 13, 51658], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 71, "seek": 24836, "start": 274.24, "end": 276.76, "text": " And the first thing it shows is it shows the Ruby stack.", "tokens": [51658, 400, 264, 700, 551, 309, 3110, 307, 309, 3110, 264, 19907, 8630, 13, 51784], "temperature": 0.0, "avg_logprob": -0.14387864440026946, "compression_ratio": 1.9128787878787878, "no_speech_prob": 0.002284618327394128}, {"id": 72, "seek": 27676, "start": 276.76, "end": 282.2, "text": " So here on the bottom, we see, okay, we have this each that represents our", "tokens": [50364, 407, 510, 322, 264, 2767, 11, 321, 536, 11, 1392, 11, 321, 362, 341, 1184, 300, 8855, 527, 50636], "temperature": 0.0, "avg_logprob": -0.21620936433145824, "compression_ratio": 1.7644787644787645, "no_speech_prob": 0.0012619830667972565}, {"id": 73, "seek": 27676, "start": 282.2, "end": 283.2, "text": " each on our code.", "tokens": [50636, 1184, 322, 527, 3089, 13, 50686], "temperature": 0.0, "avg_logprob": -0.21620936433145824, "compression_ratio": 1.7644787644787645, "no_speech_prob": 0.0012619830667972565}, {"id": 74, "seek": 27676, "start": 283.2, "end": 288.84, "text": " Then we have the block, then collect, then the block, then the call to kill.", "tokens": [50686, 1396, 321, 362, 264, 3461, 11, 550, 2500, 11, 550, 264, 3461, 11, 550, 264, 818, 281, 1961, 13, 50968], "temperature": 0.0, "avg_logprob": -0.21620936433145824, "compression_ratio": 1.7644787644787645, "no_speech_prob": 0.0012619830667972565}, {"id": 75, "seek": 27676, "start": 288.84, "end": 291.48, "text": " So probably not a big surprise.", "tokens": [50968, 407, 1391, 406, 257, 955, 6365, 13, 51100], "temperature": 0.0, "avg_logprob": -0.21620936433145824, "compression_ratio": 1.7644787644787645, "no_speech_prob": 0.0012619830667972565}, {"id": 76, "seek": 27676, "start": 291.48, "end": 294.03999999999996, "text": " One thing that is interesting, and you can see there at the top,", "tokens": [51100, 1485, 551, 300, 307, 1880, 11, 293, 291, 393, 536, 456, 412, 264, 1192, 11, 51228], "temperature": 0.0, "avg_logprob": -0.21620936433145824, "compression_ratio": 1.7644787644787645, "no_speech_prob": 0.0012619830667972565}, {"id": 77, "seek": 27676, "start": 294.03999999999996, "end": 299.08, "text": " is that Ruby actually, at least this Ruby version that I'm using,", "tokens": [51228, 307, 300, 19907, 767, 11, 412, 1935, 341, 19907, 3037, 300, 286, 478, 1228, 11, 51480], "temperature": 0.0, "avg_logprob": -0.21620936433145824, "compression_ratio": 1.7644787644787645, "no_speech_prob": 0.0012619830667972565}, {"id": 78, "seek": 27676, "start": 299.08, "end": 303.52, "text": " uses C methods to implement each collect and kill.", "tokens": [51480, 4960, 383, 7150, 281, 4445, 1184, 2500, 293, 1961, 13, 51702], "temperature": 0.0, "avg_logprob": -0.21620936433145824, "compression_ratio": 1.7644787644787645, "no_speech_prob": 0.0012619830667972565}, {"id": 79, "seek": 27676, "start": 303.52, "end": 306.71999999999997, "text": " And so you see that internally Ruby is actually keeping track of that and", "tokens": [51702, 400, 370, 291, 536, 300, 19501, 19907, 307, 767, 5145, 2837, 295, 300, 293, 51862], "temperature": 0.0, "avg_logprob": -0.21620936433145824, "compression_ratio": 1.7644787644787645, "no_speech_prob": 0.0012619830667972565}, {"id": 80, "seek": 30672, "start": 306.72, "end": 308.68, "text": " knows that there are C methods for that.", "tokens": [50364, 3255, 300, 456, 366, 383, 7150, 337, 300, 13, 50462], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 81, "seek": 30672, "start": 308.68, "end": 309.44000000000005, "text": " This is not very good.", "tokens": [50462, 639, 307, 406, 588, 665, 13, 50500], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 82, "seek": 30672, "start": 311.64000000000004, "end": 314.32000000000005, "text": " And this is actually the native stack,", "tokens": [50610, 400, 341, 307, 767, 264, 8470, 8630, 11, 50744], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 83, "seek": 30672, "start": 314.32000000000005, "end": 316.20000000000005, "text": " which is also printed in that whole big thing.", "tokens": [50744, 597, 307, 611, 13567, 294, 300, 1379, 955, 551, 13, 50838], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 84, "seek": 30672, "start": 316.20000000000005, "end": 318.16, "text": " So please ignore the lot of text.", "tokens": [50838, 407, 1767, 11200, 264, 688, 295, 2487, 13, 50936], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 85, "seek": 30672, "start": 318.16, "end": 321.16, "text": " The thing that you're caring about is this column in the middle,", "tokens": [50936, 440, 551, 300, 291, 434, 15365, 466, 307, 341, 7738, 294, 264, 2808, 11, 51086], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 86, "seek": 30672, "start": 321.16, "end": 325.08000000000004, "text": " which is the names of the C functions that the Ruby VM is actually using.", "tokens": [51086, 597, 307, 264, 5288, 295, 264, 383, 6828, 300, 264, 19907, 18038, 307, 767, 1228, 13, 51282], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 87, "seek": 30672, "start": 325.08000000000004, "end": 327.64000000000004, "text": " And you can actually, if you squint hard and ignore a few of them,", "tokens": [51282, 400, 291, 393, 767, 11, 498, 291, 2339, 686, 1152, 293, 11200, 257, 1326, 295, 552, 11, 51410], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 88, "seek": 30672, "start": 327.64000000000004, "end": 329.52000000000004, "text": " you can see our app here.", "tokens": [51410, 291, 393, 536, 527, 724, 510, 13, 51504], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 89, "seek": 30672, "start": 329.52000000000004, "end": 331.20000000000005, "text": " So we can see each showing up.", "tokens": [51504, 407, 321, 393, 536, 1184, 4099, 493, 13, 51588], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 90, "seek": 30672, "start": 333.52000000000004, "end": 335.16, "text": " We can see each showing up.", "tokens": [51704, 492, 393, 536, 1184, 4099, 493, 13, 51786], "temperature": 0.0, "avg_logprob": -0.19076501077680447, "compression_ratio": 1.823076923076923, "no_speech_prob": 0.001802682294510305}, {"id": 91, "seek": 33516, "start": 335.16, "end": 337.56, "text": " And then we can see the block, the call to yield.", "tokens": [50364, 400, 550, 321, 393, 536, 264, 3461, 11, 264, 818, 281, 11257, 13, 50484], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 92, "seek": 33516, "start": 337.56, "end": 340.8, "text": " Then we can see the collect showing up, RBE array collect.", "tokens": [50484, 1396, 321, 393, 536, 264, 2500, 4099, 493, 11, 497, 10207, 10225, 2500, 13, 50646], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 93, "seek": 33516, "start": 340.8, "end": 342.08000000000004, "text": " Then we can see yield.", "tokens": [50646, 1396, 321, 393, 536, 11257, 13, 50710], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 94, "seek": 33516, "start": 342.08000000000004, "end": 343.40000000000003, "text": " And then we can see kill.", "tokens": [50710, 400, 550, 321, 393, 536, 1961, 13, 50776], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 95, "seek": 33516, "start": 343.40000000000003, "end": 345.24, "text": " So we can see all of our methods.", "tokens": [50776, 407, 321, 393, 536, 439, 295, 527, 7150, 13, 50868], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 96, "seek": 33516, "start": 345.24, "end": 350.28000000000003, "text": " And you can additionally see these two methods, which are the Ruby code itself", "tokens": [50868, 400, 291, 393, 43181, 536, 613, 732, 7150, 11, 597, 366, 264, 19907, 3089, 2564, 51120], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 97, "seek": 33516, "start": 350.28000000000003, "end": 351.64000000000004, "text": " that we're writing.", "tokens": [51120, 300, 321, 434, 3579, 13, 51188], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 98, "seek": 33516, "start": 351.64000000000004, "end": 356.56, "text": " And those methods are RBVM exec and VM exec core is the Ruby VM actually", "tokens": [51188, 400, 729, 7150, 366, 497, 33, 53, 44, 4454, 293, 18038, 4454, 4965, 307, 264, 19907, 18038, 767, 51434], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 99, "seek": 33516, "start": 356.56, "end": 359.68, "text": " executing the byte code, the Ruby byte code for our application,", "tokens": [51434, 32368, 264, 40846, 3089, 11, 264, 19907, 40846, 3089, 337, 527, 3861, 11, 51590], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 100, "seek": 33516, "start": 359.68, "end": 363.56, "text": " which is kind of the glue code that is between the other functions that you see", "tokens": [51590, 597, 307, 733, 295, 264, 8998, 3089, 300, 307, 1296, 264, 661, 6828, 300, 291, 536, 51784], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 101, "seek": 33516, "start": 363.56, "end": 364.72, "text": " there.", "tokens": [51784, 456, 13, 51842], "temperature": 0.0, "avg_logprob": -0.20372433729574713, "compression_ratio": 1.9807692307692308, "no_speech_prob": 0.0047062234953045845}, {"id": 102, "seek": 36472, "start": 364.72, "end": 367.8, "text": " And then at the top you see the code for the VM to handle a crash.", "tokens": [50364, 400, 550, 412, 264, 1192, 291, 536, 264, 3089, 337, 264, 18038, 281, 4813, 257, 8252, 13, 50518], "temperature": 0.0, "avg_logprob": -0.15263578995414404, "compression_ratio": 1.6967213114754098, "no_speech_prob": 0.002906140638515353}, {"id": 103, "seek": 36472, "start": 368.92, "end": 372.08000000000004, "text": " So this is the two stacks.", "tokens": [50574, 407, 341, 307, 264, 732, 30792, 13, 50732], "temperature": 0.0, "avg_logprob": -0.15263578995414404, "compression_ratio": 1.6967213114754098, "no_speech_prob": 0.002906140638515353}, {"id": 104, "seek": 36472, "start": 372.08000000000004, "end": 376.48, "text": " So let's focus on the Ruby stack and kind of ignore the native stack mostly.", "tokens": [50732, 407, 718, 311, 1879, 322, 264, 19907, 8630, 293, 733, 295, 11200, 264, 8470, 8630, 5240, 13, 50952], "temperature": 0.0, "avg_logprob": -0.15263578995414404, "compression_ratio": 1.6967213114754098, "no_speech_prob": 0.002906140638515353}, {"id": 105, "seek": 36472, "start": 376.48, "end": 378.72, "text": " So how is it represented inside the VM?", "tokens": [50952, 407, 577, 307, 309, 10379, 1854, 264, 18038, 30, 51064], "temperature": 0.0, "avg_logprob": -0.15263578995414404, "compression_ratio": 1.6967213114754098, "no_speech_prob": 0.002906140638515353}, {"id": 106, "seek": 36472, "start": 378.72, "end": 383.36, "text": " So inside the VM there are a bunch of structures in memory that represent", "tokens": [51064, 407, 1854, 264, 18038, 456, 366, 257, 3840, 295, 9227, 294, 4675, 300, 2906, 51296], "temperature": 0.0, "avg_logprob": -0.15263578995414404, "compression_ratio": 1.6967213114754098, "no_speech_prob": 0.002906140638515353}, {"id": 107, "seek": 36472, "start": 383.36, "end": 385.28000000000003, "text": " the stack, so how do they look?", "tokens": [51296, 264, 8630, 11, 370, 577, 360, 436, 574, 30, 51392], "temperature": 0.0, "avg_logprob": -0.15263578995414404, "compression_ratio": 1.6967213114754098, "no_speech_prob": 0.002906140638515353}, {"id": 108, "seek": 36472, "start": 385.28000000000003, "end": 388.12, "text": " And so hang on, I will show three slides of C code and", "tokens": [51392, 400, 370, 3967, 322, 11, 286, 486, 855, 1045, 9788, 295, 383, 3089, 293, 51534], "temperature": 0.0, "avg_logprob": -0.15263578995414404, "compression_ratio": 1.6967213114754098, "no_speech_prob": 0.002906140638515353}, {"id": 109, "seek": 36472, "start": 388.12, "end": 390.72, "text": " then we can come back to actual Ruby code.", "tokens": [51534, 550, 321, 393, 808, 646, 281, 3539, 19907, 3089, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15263578995414404, "compression_ratio": 1.6967213114754098, "no_speech_prob": 0.002906140638515353}, {"id": 110, "seek": 39072, "start": 390.72, "end": 395.24, "text": " Please don't kind of like stab your eyes out or something.", "tokens": [50364, 2555, 500, 380, 733, 295, 411, 16343, 428, 2575, 484, 420, 746, 13, 50590], "temperature": 0.0, "avg_logprob": -0.20582889210094105, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.02457538992166519}, {"id": 111, "seek": 39072, "start": 396.64000000000004, "end": 401.68, "text": " So yes, when it shows up, there's a in VM core, it's like a VM header where", "tokens": [50660, 407, 2086, 11, 562, 309, 3110, 493, 11, 456, 311, 257, 294, 18038, 4965, 11, 309, 311, 411, 257, 18038, 23117, 689, 50912], "temperature": 0.0, "avg_logprob": -0.20582889210094105, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.02457538992166519}, {"id": 112, "seek": 39072, "start": 401.68, "end": 404.28000000000003, "text": " a lot of the internal Ruby interesting things are.", "tokens": [50912, 257, 688, 295, 264, 6920, 19907, 1880, 721, 366, 13, 51042], "temperature": 0.0, "avg_logprob": -0.20582889210094105, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.02457538992166519}, {"id": 113, "seek": 39072, "start": 404.28000000000003, "end": 407.72, "text": " And there's like this RB thread struct that includes a bunch of things.", "tokens": [51042, 400, 456, 311, 411, 341, 40302, 7207, 6594, 300, 5974, 257, 3840, 295, 721, 13, 51214], "temperature": 0.0, "avg_logprob": -0.20582889210094105, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.02457538992166519}, {"id": 114, "seek": 39072, "start": 407.72, "end": 410.24, "text": " And this is what Ruby holds for a thread.", "tokens": [51214, 400, 341, 307, 437, 19907, 9190, 337, 257, 7207, 13, 51340], "temperature": 0.0, "avg_logprob": -0.20582889210094105, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.02457538992166519}, {"id": 115, "seek": 39072, "start": 410.24, "end": 413.68, "text": " And inside that we have this RB execution context thing,", "tokens": [51340, 400, 1854, 300, 321, 362, 341, 40302, 15058, 4319, 551, 11, 51512], "temperature": 0.0, "avg_logprob": -0.20582889210094105, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.02457538992166519}, {"id": 116, "seek": 39072, "start": 413.68, "end": 418.08000000000004, "text": " which keeps a pointer to this other structure with this RB execution context", "tokens": [51512, 597, 5965, 257, 23918, 281, 341, 661, 3877, 365, 341, 40302, 15058, 4319, 51732], "temperature": 0.0, "avg_logprob": -0.20582889210094105, "compression_ratio": 1.7459677419354838, "no_speech_prob": 0.02457538992166519}, {"id": 117, "seek": 41808, "start": 418.84, "end": 423.4, "text": " which has a few more things on the thread that were separated for reasons.", "tokens": [50402, 597, 575, 257, 1326, 544, 721, 322, 264, 7207, 300, 645, 12005, 337, 4112, 13, 50630], "temperature": 0.0, "avg_logprob": -0.1793305458278831, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.018723120912909508}, {"id": 118, "seek": 41808, "start": 423.4, "end": 427.52, "text": " And inside here we actually see the size of the stack and", "tokens": [50630, 400, 1854, 510, 321, 767, 536, 264, 2744, 295, 264, 8630, 293, 50836], "temperature": 0.0, "avg_logprob": -0.1793305458278831, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.018723120912909508}, {"id": 119, "seek": 41808, "start": 427.52, "end": 429.28, "text": " the information about the stack.", "tokens": [50836, 264, 1589, 466, 264, 8630, 13, 50924], "temperature": 0.0, "avg_logprob": -0.1793305458278831, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.018723120912909508}, {"id": 120, "seek": 41808, "start": 429.28, "end": 433.36, "text": " And then we have this array of RB control frame T elements.", "tokens": [50924, 400, 550, 321, 362, 341, 10225, 295, 40302, 1969, 3920, 314, 4959, 13, 51128], "temperature": 0.0, "avg_logprob": -0.1793305458278831, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.018723120912909508}, {"id": 121, "seek": 41808, "start": 433.36, "end": 437.96, "text": " And this is a pointer into an array that then has these entries,", "tokens": [51128, 400, 341, 307, 257, 23918, 666, 364, 10225, 300, 550, 575, 613, 23041, 11, 51358], "temperature": 0.0, "avg_logprob": -0.1793305458278831, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.018723120912909508}, {"id": 122, "seek": 41808, "start": 437.96, "end": 440.4, "text": " the RB control frame struct.", "tokens": [51358, 264, 40302, 1969, 3920, 6594, 13, 51480], "temperature": 0.0, "avg_logprob": -0.1793305458278831, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.018723120912909508}, {"id": 123, "seek": 41808, "start": 440.4, "end": 444.2, "text": " So basically these entries are what represent a stack frame in the VM.", "tokens": [51480, 407, 1936, 613, 23041, 366, 437, 2906, 257, 8630, 3920, 294, 264, 18038, 13, 51670], "temperature": 0.0, "avg_logprob": -0.1793305458278831, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.018723120912909508}, {"id": 124, "seek": 41808, "start": 444.2, "end": 447.64, "text": " So if you see five lines in your stack frame,", "tokens": [51670, 407, 498, 291, 536, 1732, 3876, 294, 428, 8630, 3920, 11, 51842], "temperature": 0.0, "avg_logprob": -0.1793305458278831, "compression_ratio": 1.794238683127572, "no_speech_prob": 0.018723120912909508}, {"id": 125, "seek": 44764, "start": 447.64, "end": 449.44, "text": " there will be five of this.", "tokens": [50364, 456, 486, 312, 1732, 295, 341, 13, 50454], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 126, "seek": 44764, "start": 449.44, "end": 452.47999999999996, "text": " And you see that there are some things in here, like if you're wanting to see", "tokens": [50454, 400, 291, 536, 300, 456, 366, 512, 721, 294, 510, 11, 411, 498, 291, 434, 7935, 281, 536, 50606], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 127, "seek": 44764, "start": 452.47999999999996, "end": 454.52, "text": " IC which is the instruction sequence.", "tokens": [50606, 14360, 597, 307, 264, 10951, 8310, 13, 50708], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 128, "seek": 44764, "start": 454.52, "end": 458.12, "text": " So this is like the Ruby byte codes for that method or block or", "tokens": [50708, 407, 341, 307, 411, 264, 19907, 40846, 14211, 337, 300, 3170, 420, 3461, 420, 50888], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 129, "seek": 44764, "start": 458.12, "end": 459.44, "text": " whatever that's getting executed.", "tokens": [50888, 2035, 300, 311, 1242, 17577, 13, 50954], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 130, "seek": 44764, "start": 459.44, "end": 462.2, "text": " You see like self, the object on each which was called.", "tokens": [50954, 509, 536, 411, 2698, 11, 264, 2657, 322, 1184, 597, 390, 1219, 13, 51092], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 131, "seek": 44764, "start": 462.2, "end": 465.56, "text": " You actually see like JIT return which was added to support YJIT and", "tokens": [51092, 509, 767, 536, 411, 508, 3927, 2736, 597, 390, 3869, 281, 1406, 398, 41, 3927, 293, 51260], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 132, "seek": 44764, "start": 465.56, "end": 467.96, "text": " the other JIT so that they use that.", "tokens": [51260, 264, 661, 508, 3927, 370, 300, 436, 764, 300, 13, 51380], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 133, "seek": 44764, "start": 467.96, "end": 469.91999999999996, "text": " And there's a few more things that we'll ignore.", "tokens": [51380, 400, 456, 311, 257, 1326, 544, 721, 300, 321, 603, 11200, 13, 51478], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 134, "seek": 44764, "start": 469.91999999999996, "end": 473.59999999999997, "text": " But yeah, this is how the Ruby VM represents the information that's on", "tokens": [51478, 583, 1338, 11, 341, 307, 577, 264, 19907, 18038, 8855, 264, 1589, 300, 311, 322, 51662], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 135, "seek": 44764, "start": 473.59999999999997, "end": 475.36, "text": " the stack internally.", "tokens": [51662, 264, 8630, 19501, 13, 51750], "temperature": 0.0, "avg_logprob": -0.23633630308386397, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.0012054755352437496}, {"id": 136, "seek": 47536, "start": 475.36, "end": 480.08000000000004, "text": " So whenever a method gets called, a frame is pushed to represent this new", "tokens": [50364, 407, 5699, 257, 3170, 2170, 1219, 11, 257, 3920, 307, 9152, 281, 2906, 341, 777, 50600], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 137, "seek": 47536, "start": 480.08000000000004, "end": 481.40000000000003, "text": " method that got called.", "tokens": [50600, 3170, 300, 658, 1219, 13, 50666], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 138, "seek": 47536, "start": 481.40000000000003, "end": 486.0, "text": " So there's this VM push frame method that, like the interesting part is here", "tokens": [50666, 407, 456, 311, 341, 18038, 2944, 3920, 3170, 300, 11, 411, 264, 1880, 644, 307, 510, 50896], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 139, "seek": 47536, "start": 486.0, "end": 488.2, "text": " on the right, which is like, we're setting it up.", "tokens": [50896, 322, 264, 558, 11, 597, 307, 411, 11, 321, 434, 3287, 309, 493, 13, 51006], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 140, "seek": 47536, "start": 488.2, "end": 490.04, "text": " We say, we have the self object.", "tokens": [51006, 492, 584, 11, 321, 362, 264, 2698, 2657, 13, 51098], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 141, "seek": 47536, "start": 490.04, "end": 493.08000000000004, "text": " Like there's some things that we want to care to track.", "tokens": [51098, 1743, 456, 311, 512, 721, 300, 321, 528, 281, 1127, 281, 2837, 13, 51250], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 142, "seek": 47536, "start": 493.08000000000004, "end": 495.36, "text": " So that adds one more onto the stack.", "tokens": [51250, 407, 300, 10860, 472, 544, 3911, 264, 8630, 13, 51364], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 143, "seek": 47536, "start": 495.36, "end": 499.28000000000003, "text": " And you would not be surprised if I told you that this stack gets popped and", "tokens": [51364, 400, 291, 576, 406, 312, 6100, 498, 286, 1907, 291, 300, 341, 8630, 2170, 21545, 293, 51560], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 144, "seek": 47536, "start": 499.28000000000003, "end": 503.44, "text": " there is a VM pop frame method that actually function in C.", "tokens": [51560, 456, 307, 257, 18038, 1665, 3920, 3170, 300, 767, 2445, 294, 383, 13, 51768], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 145, "seek": 47536, "start": 503.44, "end": 504.64, "text": " That actually takes care of this.", "tokens": [51768, 663, 767, 2516, 1127, 295, 341, 13, 51828], "temperature": 0.0, "avg_logprob": -0.22342804009965855, "compression_ratio": 1.8, "no_speech_prob": 0.0002819737419486046}, {"id": 146, "seek": 50464, "start": 504.64, "end": 508.88, "text": " So fine, this is kind of what you might be expecting.", "tokens": [50364, 407, 2489, 11, 341, 307, 733, 295, 437, 291, 1062, 312, 9650, 13, 50576], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 147, "seek": 50464, "start": 508.88, "end": 512.52, "text": " So let's talk a bit about the backtracing gem.", "tokens": [50576, 407, 718, 311, 751, 257, 857, 466, 264, 646, 6903, 5615, 7173, 13, 50758], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 148, "seek": 50464, "start": 512.52, "end": 514.6, "text": " Yes, maybe this is good.", "tokens": [50758, 1079, 11, 1310, 341, 307, 665, 13, 50862], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 149, "seek": 50464, "start": 514.6, "end": 515.68, "text": " I'm doing timing.", "tokens": [50862, 286, 478, 884, 10822, 13, 50916], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 150, "seek": 50464, "start": 516.96, "end": 521.0, "text": " So the backtracing gem is this really weird gem that I create.", "tokens": [50980, 407, 264, 646, 6903, 5615, 7173, 307, 341, 534, 3657, 7173, 300, 286, 1884, 13, 51182], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 151, "seek": 50464, "start": 521.0, "end": 524.12, "text": " And let me tell you why I created it.", "tokens": [51182, 400, 718, 385, 980, 291, 983, 286, 2942, 309, 13, 51338], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 152, "seek": 50464, "start": 524.12, "end": 526.72, "text": " I created it because of something like this.", "tokens": [51338, 286, 2942, 309, 570, 295, 746, 411, 341, 13, 51468], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 153, "seek": 50464, "start": 526.72, "end": 530.68, "text": " So if I show you this, main, print stacks, new initialized times,", "tokens": [51468, 407, 498, 286, 855, 291, 341, 11, 2135, 11, 4482, 30792, 11, 777, 5883, 1602, 1413, 11, 51666], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 154, "seek": 50464, "start": 530.68, "end": 532.92, "text": " block initialized backtrace.", "tokens": [51666, 3461, 5883, 1602, 646, 6903, 617, 13, 51778], "temperature": 0.0, "avg_logprob": -0.24013733041697535, "compression_ratio": 1.7066666666666668, "no_speech_prob": 0.0004811206308659166}, {"id": 155, "seek": 53292, "start": 532.92, "end": 536.4, "text": " If you squint at it a bit, maybe you can speculate on what's going on.", "tokens": [50364, 759, 291, 2339, 686, 412, 309, 257, 857, 11, 1310, 291, 393, 40775, 322, 437, 311, 516, 322, 13, 50538], "temperature": 0.0, "avg_logprob": -0.1812201991225734, "compression_ratio": 1.79182156133829, "no_speech_prob": 0.0008289356483146548}, {"id": 156, "seek": 53292, "start": 536.4, "end": 540.04, "text": " But it's kind of hard for you to get a lay of the land and", "tokens": [50538, 583, 309, 311, 733, 295, 1152, 337, 291, 281, 483, 257, 2360, 295, 264, 2117, 293, 50720], "temperature": 0.0, "avg_logprob": -0.1812201991225734, "compression_ratio": 1.79182156133829, "no_speech_prob": 0.0008289356483146548}, {"id": 157, "seek": 53292, "start": 540.04, "end": 545.0799999999999, "text": " understand what's this weird example thing doing without looking at the source code.", "tokens": [50720, 1223, 437, 311, 341, 3657, 1365, 551, 884, 1553, 1237, 412, 264, 4009, 3089, 13, 50972], "temperature": 0.0, "avg_logprob": -0.1812201991225734, "compression_ratio": 1.79182156133829, "no_speech_prob": 0.0008289356483146548}, {"id": 158, "seek": 53292, "start": 545.0799999999999, "end": 547.56, "text": " You need to be looking at the source code and then it makes perfect sense.", "tokens": [50972, 509, 643, 281, 312, 1237, 412, 264, 4009, 3089, 293, 550, 309, 1669, 2176, 2020, 13, 51096], "temperature": 0.0, "avg_logprob": -0.1812201991225734, "compression_ratio": 1.79182156133829, "no_speech_prob": 0.0008289356483146548}, {"id": 159, "seek": 53292, "start": 547.56, "end": 548.76, "text": " It's here, it's here, it's here.", "tokens": [51096, 467, 311, 510, 11, 309, 311, 510, 11, 309, 311, 510, 13, 51156], "temperature": 0.0, "avg_logprob": -0.1812201991225734, "compression_ratio": 1.79182156133829, "no_speech_prob": 0.0008289356483146548}, {"id": 160, "seek": 53292, "start": 548.76, "end": 551.7199999999999, "text": " But if you're not looking at source code, it doesn't make a lot of sense.", "tokens": [51156, 583, 498, 291, 434, 406, 1237, 412, 4009, 3089, 11, 309, 1177, 380, 652, 257, 688, 295, 2020, 13, 51304], "temperature": 0.0, "avg_logprob": -0.1812201991225734, "compression_ratio": 1.79182156133829, "no_speech_prob": 0.0008289356483146548}, {"id": 161, "seek": 53292, "start": 551.7199999999999, "end": 553.8399999999999, "text": " So this is something I was thinking of.", "tokens": [51304, 407, 341, 307, 746, 286, 390, 1953, 295, 13, 51410], "temperature": 0.0, "avg_logprob": -0.1812201991225734, "compression_ratio": 1.79182156133829, "no_speech_prob": 0.0008289356483146548}, {"id": 162, "seek": 53292, "start": 553.8399999999999, "end": 558.1999999999999, "text": " Like can we actually improve stack traces and", "tokens": [51410, 1743, 393, 321, 767, 3470, 8630, 26076, 293, 51628], "temperature": 0.0, "avg_logprob": -0.1812201991225734, "compression_ratio": 1.79182156133829, "no_speech_prob": 0.0008289356483146548}, {"id": 163, "seek": 55820, "start": 558.2, "end": 562.12, "text": " give you more information so that you can read the stack trace and", "tokens": [50364, 976, 291, 544, 1589, 370, 300, 291, 393, 1401, 264, 8630, 13508, 293, 50560], "temperature": 0.0, "avg_logprob": -0.18832318115234375, "compression_ratio": 1.8597122302158273, "no_speech_prob": 0.010307169519364834}, {"id": 164, "seek": 55820, "start": 562.12, "end": 565.44, "text": " get more information without actually going to one or more files.", "tokens": [50560, 483, 544, 1589, 1553, 767, 516, 281, 472, 420, 544, 7098, 13, 50726], "temperature": 0.0, "avg_logprob": -0.18832318115234375, "compression_ratio": 1.8597122302158273, "no_speech_prob": 0.010307169519364834}, {"id": 165, "seek": 55820, "start": 565.44, "end": 569.76, "text": " Because this could be across ten files and you would have to follow along.", "tokens": [50726, 1436, 341, 727, 312, 2108, 2064, 7098, 293, 291, 576, 362, 281, 1524, 2051, 13, 50942], "temperature": 0.0, "avg_logprob": -0.18832318115234375, "compression_ratio": 1.8597122302158273, "no_speech_prob": 0.010307169519364834}, {"id": 166, "seek": 55820, "start": 569.76, "end": 572.48, "text": " So actually this is the code, you don't have to read it very much.", "tokens": [50942, 407, 767, 341, 307, 264, 3089, 11, 291, 500, 380, 362, 281, 1401, 309, 588, 709, 13, 51078], "temperature": 0.0, "avg_logprob": -0.18832318115234375, "compression_ratio": 1.8597122302158273, "no_speech_prob": 0.010307169519364834}, {"id": 167, "seek": 55820, "start": 572.48, "end": 576.6, "text": " The interesting thing is that we have this method print stacks that gets called here", "tokens": [51078, 440, 1880, 551, 307, 300, 321, 362, 341, 3170, 4482, 30792, 300, 2170, 1219, 510, 51284], "temperature": 0.0, "avg_logprob": -0.18832318115234375, "compression_ratio": 1.8597122302158273, "no_speech_prob": 0.010307169519364834}, {"id": 168, "seek": 55820, "start": 576.6, "end": 579.6, "text": " that creates an instance of print stacks that then initialize and", "tokens": [51284, 300, 7829, 364, 5197, 295, 4482, 30792, 300, 550, 5883, 1125, 293, 51434], "temperature": 0.0, "avg_logprob": -0.18832318115234375, "compression_ratio": 1.8597122302158273, "no_speech_prob": 0.010307169519364834}, {"id": 169, "seek": 55820, "start": 579.6, "end": 583.32, "text": " then inside there's the times and then we print the backtrace.", "tokens": [51434, 550, 1854, 456, 311, 264, 1413, 293, 550, 321, 4482, 264, 646, 6903, 617, 13, 51620], "temperature": 0.0, "avg_logprob": -0.18832318115234375, "compression_ratio": 1.8597122302158273, "no_speech_prob": 0.010307169519364834}, {"id": 170, "seek": 55820, "start": 583.32, "end": 585.32, "text": " But I've shown you the code.", "tokens": [51620, 583, 286, 600, 4898, 291, 264, 3089, 13, 51720], "temperature": 0.0, "avg_logprob": -0.18832318115234375, "compression_ratio": 1.8597122302158273, "no_speech_prob": 0.010307169519364834}, {"id": 171, "seek": 58532, "start": 585.32, "end": 590.6, "text": " So the idea is that Ruby what you saw was printed with the Ruby backtrace.", "tokens": [50364, 407, 264, 1558, 307, 300, 19907, 437, 291, 1866, 390, 13567, 365, 264, 19907, 646, 6903, 617, 13, 50628], "temperature": 0.0, "avg_logprob": -0.2613212343246218, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.0020079745445400476}, {"id": 172, "seek": 58532, "start": 590.6, "end": 593.72, "text": " And with the backtrace.jm you can instead get this.", "tokens": [50628, 400, 365, 264, 646, 6903, 617, 13, 73, 76, 291, 393, 2602, 483, 341, 13, 50784], "temperature": 0.0, "avg_logprob": -0.2613212343246218, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.0020079745445400476}, {"id": 173, "seek": 58532, "start": 593.72, "end": 596.32, "text": " You get the class names.", "tokens": [50784, 509, 483, 264, 1508, 5288, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2613212343246218, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.0020079745445400476}, {"id": 174, "seek": 58532, "start": 596.32, "end": 601.12, "text": " You get like a dot on print, hello, Fosdem and here you can see like the namespace.", "tokens": [50914, 509, 483, 411, 257, 5893, 322, 4482, 11, 7751, 11, 479, 329, 10730, 293, 510, 291, 393, 536, 411, 264, 5288, 17940, 13, 51154], "temperature": 0.0, "avg_logprob": -0.2613212343246218, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.0020079745445400476}, {"id": 175, "seek": 58532, "start": 601.12, "end": 604.12, "text": " So here you see that like we're calling you on the class and", "tokens": [51154, 407, 510, 291, 536, 300, 411, 321, 434, 5141, 291, 322, 264, 1508, 293, 51304], "temperature": 0.0, "avg_logprob": -0.2613212343246218, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.0020079745445400476}, {"id": 176, "seek": 58532, "start": 604.12, "end": 606.08, "text": " then this is like an instance method.", "tokens": [51304, 550, 341, 307, 411, 364, 5197, 3170, 13, 51402], "temperature": 0.0, "avg_logprob": -0.2613212343246218, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.0020079745445400476}, {"id": 177, "seek": 58532, "start": 606.08, "end": 608.08, "text": " And then we're calling integer times and", "tokens": [51402, 400, 550, 321, 434, 5141, 24922, 1413, 293, 51502], "temperature": 0.0, "avg_logprob": -0.2613212343246218, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.0020079745445400476}, {"id": 178, "seek": 58532, "start": 608.08, "end": 611.6800000000001, "text": " then we're having a block inside initialize and then backtrace location.", "tokens": [51502, 550, 321, 434, 1419, 257, 3461, 1854, 5883, 1125, 293, 550, 646, 6903, 617, 4914, 13, 51682], "temperature": 0.0, "avg_logprob": -0.2613212343246218, "compression_ratio": 1.9145299145299146, "no_speech_prob": 0.0020079745445400476}, {"id": 179, "seek": 61168, "start": 612.3199999999999, "end": 615.12, "text": " This is kind of the thing I wanted to experiment with.", "tokens": [50396, 639, 307, 733, 295, 264, 551, 286, 1415, 281, 5120, 365, 13, 50536], "temperature": 0.0, "avg_logprob": -0.20988733118230646, "compression_ratio": 1.8216783216783217, "no_speech_prob": 0.010000890120863914}, {"id": 180, "seek": 61168, "start": 615.12, "end": 618.3199999999999, "text": " Maybe it won't look exactly like this, maybe it will look different.", "tokens": [50536, 2704, 309, 1582, 380, 574, 2293, 411, 341, 11, 1310, 309, 486, 574, 819, 13, 50696], "temperature": 0.0, "avg_logprob": -0.20988733118230646, "compression_ratio": 1.8216783216783217, "no_speech_prob": 0.010000890120863914}, {"id": 181, "seek": 61168, "start": 618.3199999999999, "end": 622.2399999999999, "text": " But try to get more context so that you can look at it and you will go like,", "tokens": [50696, 583, 853, 281, 483, 544, 4319, 370, 300, 291, 393, 574, 412, 309, 293, 291, 486, 352, 411, 11, 50892], "temperature": 0.0, "avg_logprob": -0.20988733118230646, "compression_ratio": 1.8216783216783217, "no_speech_prob": 0.010000890120863914}, {"id": 182, "seek": 61168, "start": 622.2399999999999, "end": 625.68, "text": " I think I see what's going on even without opening up your editor and", "tokens": [50892, 286, 519, 286, 536, 437, 311, 516, 322, 754, 1553, 5193, 493, 428, 9839, 293, 51064], "temperature": 0.0, "avg_logprob": -0.20988733118230646, "compression_ratio": 1.8216783216783217, "no_speech_prob": 0.010000890120863914}, {"id": 183, "seek": 61168, "start": 625.68, "end": 628.5999999999999, "text": " maybe navigating to the ten different files.", "tokens": [51064, 1310, 32054, 281, 264, 2064, 819, 7098, 13, 51210], "temperature": 0.0, "avg_logprob": -0.20988733118230646, "compression_ratio": 1.8216783216783217, "no_speech_prob": 0.010000890120863914}, {"id": 184, "seek": 61168, "start": 628.5999999999999, "end": 631.2399999999999, "text": " So this is what I mean about prettier backtraces.", "tokens": [51210, 407, 341, 307, 437, 286, 914, 466, 36825, 646, 6903, 2116, 13, 51342], "temperature": 0.0, "avg_logprob": -0.20988733118230646, "compression_ratio": 1.8216783216783217, "no_speech_prob": 0.010000890120863914}, {"id": 185, "seek": 61168, "start": 631.2399999999999, "end": 635.64, "text": " I wanted to experiment with adding more things, things such as like class and", "tokens": [51342, 286, 1415, 281, 5120, 365, 5127, 544, 721, 11, 721, 1270, 382, 411, 1508, 293, 51562], "temperature": 0.0, "avg_logprob": -0.20988733118230646, "compression_ratio": 1.8216783216783217, "no_speech_prob": 0.010000890120863914}, {"id": 186, "seek": 61168, "start": 635.64, "end": 640.8, "text": " module names, things such as like show a dot or a hashtag if the method is or", "tokens": [51562, 10088, 5288, 11, 721, 1270, 382, 411, 855, 257, 5893, 420, 257, 20379, 498, 264, 3170, 307, 420, 51820], "temperature": 0.0, "avg_logprob": -0.20988733118230646, "compression_ratio": 1.8216783216783217, "no_speech_prob": 0.010000890120863914}, {"id": 187, "seek": 64080, "start": 640.8, "end": 644.4799999999999, "text": " like an instance or a class to be able to quickly distinguish that.", "tokens": [50364, 411, 364, 5197, 420, 257, 1508, 281, 312, 1075, 281, 2661, 20206, 300, 13, 50548], "temperature": 0.0, "avg_logprob": -0.20521757158182435, "compression_ratio": 1.9312977099236641, "no_speech_prob": 0.002546854317188263}, {"id": 188, "seek": 64080, "start": 644.4799999999999, "end": 649.16, "text": " Maybe distinguish like singleton methods, so methods that you define on a specific", "tokens": [50548, 2704, 20206, 411, 1522, 14806, 7150, 11, 370, 7150, 300, 291, 6964, 322, 257, 2685, 50782], "temperature": 0.0, "avg_logprob": -0.20521757158182435, "compression_ratio": 1.9312977099236641, "no_speech_prob": 0.002546854317188263}, {"id": 189, "seek": 64080, "start": 649.16, "end": 652.28, "text": " object versus just like a regular method from that class so", "tokens": [50782, 2657, 5717, 445, 411, 257, 3890, 3170, 490, 300, 1508, 370, 50938], "temperature": 0.0, "avg_logprob": -0.20521757158182435, "compression_ratio": 1.9312977099236641, "no_speech_prob": 0.002546854317188263}, {"id": 190, "seek": 64080, "start": 652.28, "end": 655.24, "text": " that you can see this is a weird thing that showed up on this object.", "tokens": [50938, 300, 291, 393, 536, 341, 307, 257, 3657, 551, 300, 4712, 493, 322, 341, 2657, 13, 51086], "temperature": 0.0, "avg_logprob": -0.20521757158182435, "compression_ratio": 1.9312977099236641, "no_speech_prob": 0.002546854317188263}, {"id": 191, "seek": 64080, "start": 655.24, "end": 657.16, "text": " Maybe that's relevant.", "tokens": [51086, 2704, 300, 311, 7340, 13, 51182], "temperature": 0.0, "avg_logprob": -0.20521757158182435, "compression_ratio": 1.9312977099236641, "no_speech_prob": 0.002546854317188263}, {"id": 192, "seek": 64080, "start": 657.16, "end": 660.76, "text": " You could distinguish refinement, which is this weird thing,", "tokens": [51182, 509, 727, 20206, 1895, 30229, 11, 597, 307, 341, 3657, 551, 11, 51362], "temperature": 0.0, "avg_logprob": -0.20521757158182435, "compression_ratio": 1.9312977099236641, "no_speech_prob": 0.002546854317188263}, {"id": 193, "seek": 64080, "start": 660.76, "end": 665.4399999999999, "text": " which is like methods that show up based on like some context thing.", "tokens": [51362, 597, 307, 411, 7150, 300, 855, 493, 2361, 322, 411, 512, 4319, 551, 13, 51596], "temperature": 0.0, "avg_logprob": -0.20521757158182435, "compression_ratio": 1.9312977099236641, "no_speech_prob": 0.002546854317188263}, {"id": 194, "seek": 64080, "start": 665.4399999999999, "end": 669.88, "text": " You could maybe show method arguments, maybe that's useful sometimes for", "tokens": [51596, 509, 727, 1310, 855, 3170, 12869, 11, 1310, 300, 311, 4420, 2171, 337, 51818], "temperature": 0.0, "avg_logprob": -0.20521757158182435, "compression_ratio": 1.9312977099236641, "no_speech_prob": 0.002546854317188263}, {"id": 195, "seek": 66988, "start": 669.88, "end": 673.08, "text": " you to distinguish between a few of your methods.", "tokens": [50364, 291, 281, 20206, 1296, 257, 1326, 295, 428, 7150, 13, 50524], "temperature": 0.0, "avg_logprob": -0.15546682325460143, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.0017518004169687629}, {"id": 196, "seek": 66988, "start": 673.08, "end": 677.52, "text": " Maybe even show C function names or like file names and line numbers.", "tokens": [50524, 2704, 754, 855, 383, 2445, 5288, 420, 411, 3991, 5288, 293, 1622, 3547, 13, 50746], "temperature": 0.0, "avg_logprob": -0.15546682325460143, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.0017518004169687629}, {"id": 197, "seek": 66988, "start": 677.52, "end": 683.4399999999999, "text": " Because one thing you might have realized is that I shown you that array and", "tokens": [50746, 1436, 472, 551, 291, 1062, 362, 5334, 307, 300, 286, 4898, 291, 300, 10225, 293, 51042], "temperature": 0.0, "avg_logprob": -0.15546682325460143, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.0017518004169687629}, {"id": 198, "seek": 66988, "start": 683.4399999999999, "end": 686.68, "text": " the collect and whatever methods are implemented with C code.", "tokens": [51042, 264, 2500, 293, 2035, 7150, 366, 12270, 365, 383, 3089, 13, 51204], "temperature": 0.0, "avg_logprob": -0.15546682325460143, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.0017518004169687629}, {"id": 199, "seek": 66988, "start": 686.68, "end": 689.16, "text": " But you never see the C file and", "tokens": [51204, 583, 291, 1128, 536, 264, 383, 3991, 293, 51328], "temperature": 0.0, "avg_logprob": -0.15546682325460143, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.0017518004169687629}, {"id": 200, "seek": 66988, "start": 689.16, "end": 691.52, "text": " the C line where they are implemented in your backtrace.", "tokens": [51328, 264, 383, 1622, 689, 436, 366, 12270, 294, 428, 646, 6903, 617, 13, 51446], "temperature": 0.0, "avg_logprob": -0.15546682325460143, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.0017518004169687629}, {"id": 201, "seek": 66988, "start": 691.52, "end": 694.48, "text": " So if you want to actually follow that into the VM and", "tokens": [51446, 407, 498, 291, 528, 281, 767, 1524, 300, 666, 264, 18038, 293, 51594], "temperature": 0.0, "avg_logprob": -0.15546682325460143, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.0017518004169687629}, {"id": 202, "seek": 66988, "start": 694.48, "end": 698.48, "text": " understand what's going on or maybe you just are working on a Ruby native gem,", "tokens": [51594, 1223, 437, 311, 516, 322, 420, 1310, 291, 445, 366, 1364, 322, 257, 19907, 8470, 7173, 11, 51794], "temperature": 0.0, "avg_logprob": -0.15546682325460143, "compression_ratio": 1.7153024911032029, "no_speech_prob": 0.0017518004169687629}, {"id": 203, "seek": 69848, "start": 698.48, "end": 703.28, "text": " you actually don't see that information, Ruby hides it and doesn't even keep it.", "tokens": [50364, 291, 767, 500, 380, 536, 300, 1589, 11, 19907, 35953, 309, 293, 1177, 380, 754, 1066, 309, 13, 50604], "temperature": 0.0, "avg_logprob": -0.18103973201063814, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.004644885193556547}, {"id": 204, "seek": 69848, "start": 703.28, "end": 707.84, "text": " Another thing is like maybe even have some visibility into the native sex and", "tokens": [50604, 3996, 551, 307, 411, 1310, 754, 362, 512, 19883, 666, 264, 8470, 3260, 293, 50832], "temperature": 0.0, "avg_logprob": -0.18103973201063814, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.004644885193556547}, {"id": 205, "seek": 69848, "start": 707.84, "end": 712.5600000000001, "text": " what might be going there because you might be debugging like this postgres or", "tokens": [50832, 437, 1062, 312, 516, 456, 570, 291, 1062, 312, 45592, 411, 341, 2183, 45189, 420, 51068], "temperature": 0.0, "avg_logprob": -0.18103973201063814, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.004644885193556547}, {"id": 206, "seek": 69848, "start": 712.5600000000001, "end": 715.76, "text": " my SQL driver which is going into C code.", "tokens": [51068, 452, 19200, 6787, 597, 307, 516, 666, 383, 3089, 13, 51228], "temperature": 0.0, "avg_logprob": -0.18103973201063814, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.004644885193556547}, {"id": 207, "seek": 69848, "start": 715.76, "end": 718.4, "text": " So how far did I get?", "tokens": [51228, 407, 577, 1400, 630, 286, 483, 30, 51360], "temperature": 0.0, "avg_logprob": -0.18103973201063814, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.004644885193556547}, {"id": 208, "seek": 69848, "start": 718.4, "end": 722.52, "text": " Well, I got this working, this working, this working, this working.", "tokens": [51360, 1042, 11, 286, 658, 341, 1364, 11, 341, 1364, 11, 341, 1364, 11, 341, 1364, 13, 51566], "temperature": 0.0, "avg_logprob": -0.18103973201063814, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.004644885193556547}, {"id": 209, "seek": 69848, "start": 722.52, "end": 724.6800000000001, "text": " This is not, I haven't tried it yet.", "tokens": [51566, 639, 307, 406, 11, 286, 2378, 380, 3031, 309, 1939, 13, 51674], "temperature": 0.0, "avg_logprob": -0.18103973201063814, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.004644885193556547}, {"id": 210, "seek": 69848, "start": 724.6800000000001, "end": 727.84, "text": " This is a really awful hack, so let's say maybe.", "tokens": [51674, 639, 307, 257, 534, 11232, 10339, 11, 370, 718, 311, 584, 1310, 13, 51832], "temperature": 0.0, "avg_logprob": -0.18103973201063814, "compression_ratio": 1.7105263157894737, "no_speech_prob": 0.004644885193556547}, {"id": 211, "seek": 72784, "start": 727.84, "end": 728.96, "text": " And this is not working yet.", "tokens": [50364, 400, 341, 307, 406, 1364, 1939, 13, 50420], "temperature": 0.0, "avg_logprob": -0.23514576866513207, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.0010396877769380808}, {"id": 212, "seek": 72784, "start": 728.96, "end": 733.24, "text": " So I'm still kind of experimenting with how far we can get.", "tokens": [50420, 407, 286, 478, 920, 733, 295, 29070, 365, 577, 1400, 321, 393, 483, 13, 50634], "temperature": 0.0, "avg_logprob": -0.23514576866513207, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.0010396877769380808}, {"id": 213, "seek": 72784, "start": 733.24, "end": 736.08, "text": " So a question is like how does backtrace work?", "tokens": [50634, 407, 257, 1168, 307, 411, 577, 775, 646, 6903, 617, 589, 30, 50776], "temperature": 0.0, "avg_logprob": -0.23514576866513207, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.0010396877769380808}, {"id": 214, "seek": 72784, "start": 737.48, "end": 744.32, "text": " So the TLDR is basically I've shown you how things get stored inside Ruby.", "tokens": [50846, 407, 264, 40277, 9301, 307, 1936, 286, 600, 4898, 291, 577, 721, 483, 12187, 1854, 19907, 13, 51188], "temperature": 0.0, "avg_logprob": -0.23514576866513207, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.0010396877769380808}, {"id": 215, "seek": 72784, "start": 744.32, "end": 748.6, "text": " So we basically just like go in there and get what we need out of Ruby without", "tokens": [51188, 407, 321, 1936, 445, 411, 352, 294, 456, 293, 483, 437, 321, 643, 484, 295, 19907, 1553, 51402], "temperature": 0.0, "avg_logprob": -0.23514576866513207, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.0010396877769380808}, {"id": 216, "seek": 72784, "start": 748.6, "end": 753.24, "text": " Ruby really having any APIs to do this thing, which is fun.", "tokens": [51402, 19907, 534, 1419, 604, 21445, 281, 360, 341, 551, 11, 597, 307, 1019, 13, 51634], "temperature": 0.0, "avg_logprob": -0.23514576866513207, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.0010396877769380808}, {"id": 217, "seek": 72784, "start": 753.24, "end": 756.2, "text": " So but these are internal VM APIs.", "tokens": [51634, 407, 457, 613, 366, 6920, 18038, 21445, 13, 51782], "temperature": 0.0, "avg_logprob": -0.23514576866513207, "compression_ratio": 1.5737704918032787, "no_speech_prob": 0.0010396877769380808}, {"id": 218, "seek": 75620, "start": 756.2, "end": 761.2800000000001, "text": " So they are like in private headers and they are not available to gem.", "tokens": [50364, 407, 436, 366, 411, 294, 4551, 45101, 293, 436, 366, 406, 2435, 281, 7173, 13, 50618], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 219, "seek": 75620, "start": 761.2800000000001, "end": 763.8000000000001, "text": " So how does this work?", "tokens": [50618, 407, 577, 775, 341, 589, 30, 50744], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 220, "seek": 75620, "start": 763.8000000000001, "end": 765.24, "text": " How can we access this information?", "tokens": [50744, 1012, 393, 321, 2105, 341, 1589, 30, 50816], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 221, "seek": 75620, "start": 765.24, "end": 770.12, "text": " And this is like the cool thing about like that this prototype allowed me to play with.", "tokens": [50816, 400, 341, 307, 411, 264, 1627, 551, 466, 411, 300, 341, 19475, 4350, 385, 281, 862, 365, 13, 51060], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 222, "seek": 75620, "start": 770.12, "end": 773.84, "text": " So let's talk a bit about accessing Ruby VM internal APIs.", "tokens": [51060, 407, 718, 311, 751, 257, 857, 466, 26440, 19907, 18038, 6920, 21445, 13, 51246], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 223, "seek": 75620, "start": 775.08, "end": 777.6, "text": " So what's the backdoor?", "tokens": [51308, 407, 437, 311, 264, 646, 10441, 30, 51434], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 224, "seek": 75620, "start": 777.6, "end": 779.96, "text": " There's actually two different backdoors for", "tokens": [51434, 821, 311, 767, 732, 819, 646, 18716, 337, 51552], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 225, "seek": 75620, "start": 779.96, "end": 783.36, "text": " accessing this VM internal C headers in C Ruby.", "tokens": [51552, 26440, 341, 18038, 6920, 383, 45101, 294, 383, 19907, 13, 51722], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 226, "seek": 75620, "start": 783.36, "end": 785.1600000000001, "text": " One is the hidden Mjith header.", "tokens": [51722, 1485, 307, 264, 7633, 376, 73, 355, 23117, 13, 51812], "temperature": 0.0, "avg_logprob": -0.24357324785890833, "compression_ratio": 1.6798418972332017, "no_speech_prob": 0.0010208238381892443}, {"id": 227, "seek": 78516, "start": 785.16, "end": 789.3199999999999, "text": " So you might have heard about the Mjith experimental JIT compiler.", "tokens": [50364, 407, 291, 1062, 362, 2198, 466, 264, 376, 73, 355, 17069, 508, 3927, 31958, 13, 50572], "temperature": 0.0, "avg_logprob": -0.20216938732116202, "compression_ratio": 1.658273381294964, "no_speech_prob": 0.003154905280098319}, {"id": 228, "seek": 78516, "start": 789.3199999999999, "end": 792.92, "text": " So from Ruby 2.6 and 2.3.2 it was a part of Ruby.", "tokens": [50572, 407, 490, 19907, 568, 13, 21, 293, 568, 13, 18, 13, 17, 309, 390, 257, 644, 295, 19907, 13, 50752], "temperature": 0.0, "avg_logprob": -0.20216938732116202, "compression_ratio": 1.658273381294964, "no_speech_prob": 0.003154905280098319}, {"id": 229, "seek": 78516, "start": 792.92, "end": 796.28, "text": " And it actually generated some C code and then compiled it.", "tokens": [50752, 400, 309, 767, 10833, 512, 383, 3089, 293, 550, 36548, 309, 13, 50920], "temperature": 0.0, "avg_logprob": -0.20216938732116202, "compression_ratio": 1.658273381294964, "no_speech_prob": 0.003154905280098319}, {"id": 230, "seek": 78516, "start": 796.28, "end": 799.8399999999999, "text": " And that C code actually needed a header with some of the internal things.", "tokens": [50920, 400, 300, 383, 3089, 767, 2978, 257, 23117, 365, 512, 295, 264, 6920, 721, 13, 51098], "temperature": 0.0, "avg_logprob": -0.20216938732116202, "compression_ratio": 1.658273381294964, "no_speech_prob": 0.003154905280098319}, {"id": 231, "seek": 78516, "start": 799.8399999999999, "end": 804.0, "text": " And so what the Ruby developer did was very silently,", "tokens": [51098, 400, 370, 437, 264, 19907, 10754, 630, 390, 588, 40087, 11, 51306], "temperature": 0.0, "avg_logprob": -0.20216938732116202, "compression_ratio": 1.658273381294964, "no_speech_prob": 0.003154905280098319}, {"id": 232, "seek": 78516, "start": 804.0, "end": 807.24, "text": " they went into this folder which is like a weird name and", "tokens": [51306, 436, 1437, 666, 341, 10820, 597, 307, 411, 257, 3657, 1315, 293, 51468], "temperature": 0.0, "avg_logprob": -0.20216938732116202, "compression_ratio": 1.658273381294964, "no_speech_prob": 0.003154905280098319}, {"id": 233, "seek": 78516, "start": 807.24, "end": 811.1999999999999, "text": " they created this RBM JIT header which is nobody supposed to use.", "tokens": [51468, 436, 2942, 341, 497, 18345, 508, 3927, 23117, 597, 307, 5079, 3442, 281, 764, 13, 51666], "temperature": 0.0, "avg_logprob": -0.20216938732116202, "compression_ratio": 1.658273381294964, "no_speech_prob": 0.003154905280098319}, {"id": 234, "seek": 78516, "start": 811.1999999999999, "end": 813.9599999999999, "text": " And put that information there.", "tokens": [51666, 400, 829, 300, 1589, 456, 13, 51804], "temperature": 0.0, "avg_logprob": -0.20216938732116202, "compression_ratio": 1.658273381294964, "no_speech_prob": 0.003154905280098319}, {"id": 235, "seek": 81396, "start": 813.96, "end": 816.96, "text": " So we can actually search this information from there and then use it.", "tokens": [50364, 407, 321, 393, 767, 3164, 341, 1589, 490, 456, 293, 550, 764, 309, 13, 50514], "temperature": 0.0, "avg_logprob": -0.22232872900301523, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002971476409584284}, {"id": 236, "seek": 81396, "start": 818.1600000000001, "end": 821.64, "text": " So yes, it's great just for the private use of the Mjith compiler.", "tokens": [50574, 407, 2086, 11, 309, 311, 869, 445, 337, 264, 4551, 764, 295, 264, 376, 73, 355, 31958, 13, 50748], "temperature": 0.0, "avg_logprob": -0.22232872900301523, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002971476409584284}, {"id": 237, "seek": 81396, "start": 821.64, "end": 825.1600000000001, "text": " And if you import this, it's like weird working with it and", "tokens": [50748, 400, 498, 291, 974, 341, 11, 309, 311, 411, 3657, 1364, 365, 309, 293, 50924], "temperature": 0.0, "avg_logprob": -0.22232872900301523, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002971476409584284}, {"id": 238, "seek": 81396, "start": 825.1600000000001, "end": 827.36, "text": " a bunch of things doesn't work very well.", "tokens": [50924, 257, 3840, 295, 721, 1177, 380, 589, 588, 731, 13, 51034], "temperature": 0.0, "avg_logprob": -0.22232872900301523, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002971476409584284}, {"id": 239, "seek": 81396, "start": 827.36, "end": 831.4000000000001, "text": " Because it was not supposed to be used by anyone other than the Mjith compiler.", "tokens": [51034, 1436, 309, 390, 406, 3442, 281, 312, 1143, 538, 2878, 661, 813, 264, 376, 73, 355, 31958, 13, 51236], "temperature": 0.0, "avg_logprob": -0.22232872900301523, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002971476409584284}, {"id": 240, "seek": 81396, "start": 831.4000000000001, "end": 836.1600000000001, "text": " But it includes like a copy of all the things we're looking at so we can make it work.", "tokens": [51236, 583, 309, 5974, 411, 257, 5055, 295, 439, 264, 721, 321, 434, 1237, 412, 370, 321, 393, 652, 309, 589, 13, 51474], "temperature": 0.0, "avg_logprob": -0.22232872900301523, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002971476409584284}, {"id": 241, "seek": 81396, "start": 836.1600000000001, "end": 839.72, "text": " Backdoor number two, which is like one of my weirdest backdoors,", "tokens": [51474, 5833, 10441, 1230, 732, 11, 597, 307, 411, 472, 295, 452, 44807, 646, 18716, 11, 51652], "temperature": 0.0, "avg_logprob": -0.22232872900301523, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002971476409584284}, {"id": 242, "seek": 81396, "start": 839.72, "end": 842.6800000000001, "text": " which is the device Ruby course of gem.", "tokens": [51652, 597, 307, 264, 4302, 19907, 1164, 295, 7173, 13, 51800], "temperature": 0.0, "avg_logprob": -0.22232872900301523, "compression_ratio": 1.7380952380952381, "no_speech_prob": 0.002971476409584284}, {"id": 243, "seek": 84268, "start": 842.68, "end": 847.8399999999999, "text": " So the idea is since the Ruby VM doesn't have any of the headers it needs.", "tokens": [50364, 407, 264, 1558, 307, 1670, 264, 19907, 18038, 1177, 380, 362, 604, 295, 264, 45101, 309, 2203, 13, 50622], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 244, "seek": 84268, "start": 847.8399999999999, "end": 849.0799999999999, "text": " Thank you.", "tokens": [50622, 1044, 291, 13, 50684], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 245, "seek": 84268, "start": 849.0799999999999, "end": 852.0, "text": " This gem actually just kind of copypites all of the Ruby headers.", "tokens": [50684, 639, 7173, 767, 445, 733, 295, 5055, 79, 3324, 439, 295, 264, 19907, 45101, 13, 50830], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 246, "seek": 84268, "start": 852.0, "end": 856.28, "text": " So it has a folder and it has like some folders for every Ruby release and", "tokens": [50830, 407, 309, 575, 257, 10820, 293, 309, 575, 411, 512, 31082, 337, 633, 19907, 4374, 293, 51044], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 247, "seek": 84268, "start": 856.28, "end": 860.28, "text": " then kind of someone just copypites every header in there for every release and", "tokens": [51044, 550, 733, 295, 1580, 445, 5055, 79, 3324, 633, 23117, 294, 456, 337, 633, 4374, 293, 51244], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 248, "seek": 84268, "start": 860.28, "end": 862.1999999999999, "text": " then release the new version of the gem.", "tokens": [51244, 550, 4374, 264, 777, 3037, 295, 264, 7173, 13, 51340], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 249, "seek": 84268, "start": 862.1999999999999, "end": 864.56, "text": " It's very crude, it works for all Ruby.", "tokens": [51340, 467, 311, 588, 30796, 11, 309, 1985, 337, 439, 19907, 13, 51458], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 250, "seek": 84268, "start": 864.56, "end": 867.56, "text": " So 3.3, now that's Mjith is gone in 3.2.", "tokens": [51458, 407, 805, 13, 18, 11, 586, 300, 311, 376, 73, 355, 307, 2780, 294, 805, 13, 17, 13, 51608], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 251, "seek": 84268, "start": 867.56, "end": 871.16, "text": " And it also works like as far back as like Ruby to one or two zero.", "tokens": [51608, 400, 309, 611, 1985, 411, 382, 1400, 646, 382, 411, 19907, 281, 472, 420, 732, 4018, 13, 51788], "temperature": 0.0, "avg_logprob": -0.21227752578842057, "compression_ratio": 1.8235294117647058, "no_speech_prob": 0.0017465222626924515}, {"id": 252, "seek": 87116, "start": 871.16, "end": 873.48, "text": " But yeah, you could do something like that.", "tokens": [50364, 583, 1338, 11, 291, 727, 360, 746, 411, 300, 13, 50480], "temperature": 0.0, "avg_logprob": -0.22516969412811533, "compression_ratio": 1.765625, "no_speech_prob": 0.0012541282922029495}, {"id": 253, "seek": 87116, "start": 873.48, "end": 877.4399999999999, "text": " So the backdoor is like once we know what's the shape of these VM internal", "tokens": [50480, 407, 264, 646, 10441, 307, 411, 1564, 321, 458, 437, 311, 264, 3909, 295, 613, 18038, 6920, 50678], "temperature": 0.0, "avg_logprob": -0.22516969412811533, "compression_ratio": 1.765625, "no_speech_prob": 0.0012541282922029495}, {"id": 254, "seek": 87116, "start": 877.4399999999999, "end": 880.04, "text": " structures we can access them in backtracing.", "tokens": [50678, 9227, 321, 393, 2105, 552, 294, 646, 6903, 5615, 13, 50808], "temperature": 0.0, "avg_logprob": -0.22516969412811533, "compression_ratio": 1.765625, "no_speech_prob": 0.0012541282922029495}, {"id": 255, "seek": 87116, "start": 880.04, "end": 883.4399999999999, "text": " And if you remember this slide where I said I'll come back to this one,", "tokens": [50808, 400, 498, 291, 1604, 341, 4137, 689, 286, 848, 286, 603, 808, 646, 281, 341, 472, 11, 50978], "temperature": 0.0, "avg_logprob": -0.22516969412811533, "compression_ratio": 1.765625, "no_speech_prob": 0.0012541282922029495}, {"id": 256, "seek": 87116, "start": 883.4399999999999, "end": 887.4, "text": " RB profile frames and RB profile thread frames, now is the time.", "tokens": [50978, 40302, 7964, 12083, 293, 40302, 7964, 7207, 12083, 11, 586, 307, 264, 565, 13, 51176], "temperature": 0.0, "avg_logprob": -0.22516969412811533, "compression_ratio": 1.765625, "no_speech_prob": 0.0012541282922029495}, {"id": 257, "seek": 87116, "start": 887.4, "end": 891.88, "text": " So what I did in backtracing is that I started by copypasting", "tokens": [51176, 407, 437, 286, 630, 294, 646, 6903, 5615, 307, 300, 286, 1409, 538, 5055, 79, 30587, 51400], "temperature": 0.0, "avg_logprob": -0.22516969412811533, "compression_ratio": 1.765625, "no_speech_prob": 0.0012541282922029495}, {"id": 258, "seek": 87116, "start": 891.88, "end": 897.4399999999999, "text": " RB profile frames into the backtracing code, just going into the Ruby VM like copypaste.", "tokens": [51400, 40302, 7964, 12083, 666, 264, 646, 6903, 5615, 3089, 11, 445, 516, 666, 264, 19907, 18038, 411, 5055, 79, 9079, 13, 51678], "temperature": 0.0, "avg_logprob": -0.22516969412811533, "compression_ratio": 1.765625, "no_speech_prob": 0.0012541282922029495}, {"id": 259, "seek": 89744, "start": 897.44, "end": 901.36, "text": " And obviously when you copypaste from like an open source project,", "tokens": [50364, 400, 2745, 562, 291, 5055, 79, 9079, 490, 411, 364, 1269, 4009, 1716, 11, 50560], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 260, "seek": 89744, "start": 901.36, "end": 905.2800000000001, "text": " make sure you understand what's the license and if you can do that,", "tokens": [50560, 652, 988, 291, 1223, 437, 311, 264, 10476, 293, 498, 291, 393, 360, 300, 11, 50756], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 261, "seek": 89744, "start": 905.2800000000001, "end": 906.6800000000001, "text": " you can do that with Ruby.", "tokens": [50756, 291, 393, 360, 300, 365, 19907, 13, 50826], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 262, "seek": 89744, "start": 906.6800000000001, "end": 908.6400000000001, "text": " And so I did this.", "tokens": [50826, 400, 370, 286, 630, 341, 13, 50924], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 263, "seek": 89744, "start": 908.6400000000001, "end": 912.24, "text": " It's fine, but make sure to like have the copyright headers and", "tokens": [50924, 467, 311, 2489, 11, 457, 652, 988, 281, 411, 362, 264, 17996, 45101, 293, 51104], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 264, "seek": 89744, "start": 912.24, "end": 913.72, "text": " all that information.", "tokens": [51104, 439, 300, 1589, 13, 51178], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 265, "seek": 89744, "start": 913.72, "end": 917.0400000000001, "text": " And then I added a bunch of features to experiment with it and", "tokens": [51178, 400, 550, 286, 3869, 257, 3840, 295, 4122, 281, 5120, 365, 309, 293, 51344], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 266, "seek": 89744, "start": 917.0400000000001, "end": 919.48, "text": " get all of the things I was talking about.", "tokens": [51344, 483, 439, 295, 264, 721, 286, 390, 1417, 466, 13, 51466], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 267, "seek": 89744, "start": 919.48, "end": 925.0, "text": " And actually, it was really interesting, this approach was really,", "tokens": [51466, 400, 767, 11, 309, 390, 534, 1880, 11, 341, 3109, 390, 534, 11, 51742], "temperature": 0.0, "avg_logprob": -0.20420501972066946, "compression_ratio": 1.7015503875968991, "no_speech_prob": 0.004394334740936756}, {"id": 268, "seek": 92500, "start": 925.0, "end": 928.64, "text": " I found it a really great way of prototyping something without having to", "tokens": [50364, 286, 1352, 309, 257, 534, 869, 636, 295, 46219, 3381, 746, 1553, 1419, 281, 50546], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 269, "seek": 92500, "start": 928.64, "end": 931.48, "text": " depend on a custom build of the Ruby VM.", "tokens": [50546, 5672, 322, 257, 2375, 1322, 295, 264, 19907, 18038, 13, 50688], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 270, "seek": 92500, "start": 931.48, "end": 934.52, "text": " Because I actually started by modifying the Ruby VM, but", "tokens": [50688, 1436, 286, 767, 1409, 538, 42626, 264, 19907, 18038, 11, 457, 50840], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 271, "seek": 92500, "start": 934.52, "end": 939.04, "text": " then I have a Ruby VM that works only for me and that features only for me.", "tokens": [50840, 550, 286, 362, 257, 19907, 18038, 300, 1985, 787, 337, 385, 293, 300, 4122, 787, 337, 385, 13, 51066], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 272, "seek": 92500, "start": 939.04, "end": 942.08, "text": " Instead, if I do this, I can tell you gem install backtracing and", "tokens": [51066, 7156, 11, 498, 286, 360, 341, 11, 286, 393, 980, 291, 7173, 3625, 646, 6903, 5615, 293, 51218], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 273, "seek": 92500, "start": 942.08, "end": 943.0, "text": " you can get it as well.", "tokens": [51218, 291, 393, 483, 309, 382, 731, 13, 51264], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 274, "seek": 92500, "start": 943.0, "end": 947.44, "text": " So it's like an interesting approach to like playing with something that", "tokens": [51264, 407, 309, 311, 411, 364, 1880, 3109, 281, 411, 2433, 365, 746, 300, 51486], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 275, "seek": 92500, "start": 947.44, "end": 950.36, "text": " you would otherwise not play, but be careful.", "tokens": [51486, 291, 576, 5911, 406, 862, 11, 457, 312, 5026, 13, 51632], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 276, "seek": 92500, "start": 950.36, "end": 953.88, "text": " So obviously there's a lot of small details to get right.", "tokens": [51632, 407, 2745, 456, 311, 257, 688, 295, 1359, 4365, 281, 483, 558, 13, 51808], "temperature": 0.0, "avg_logprob": -0.16680026233644413, "compression_ratio": 1.71, "no_speech_prob": 0.0035859430208802223}, {"id": 277, "seek": 95388, "start": 953.88, "end": 957.96, "text": " I am glossing over a ton of things needed to kind of get this weird thing.", "tokens": [50364, 286, 669, 19574, 278, 670, 257, 2952, 295, 721, 2978, 281, 733, 295, 483, 341, 3657, 551, 13, 50568], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 278, "seek": 95388, "start": 957.96, "end": 961.72, "text": " So for instance, you might want to access some VM internal structure, but", "tokens": [50568, 407, 337, 5197, 11, 291, 1062, 528, 281, 2105, 512, 18038, 6920, 3877, 11, 457, 50756], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 279, "seek": 95388, "start": 961.72, "end": 964.4, "text": " you might not know exactly how to access it.", "tokens": [50756, 291, 1062, 406, 458, 2293, 577, 281, 2105, 309, 13, 50890], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 280, "seek": 95388, "start": 964.4, "end": 968.08, "text": " So sometimes you need to kind of go read the Ruby API very carefully and", "tokens": [50890, 407, 2171, 291, 643, 281, 733, 295, 352, 1401, 264, 19907, 9362, 588, 7500, 293, 51074], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 281, "seek": 95388, "start": 968.08, "end": 972.0, "text": " see, this object that Ruby hands me actually internally has a pointer to", "tokens": [51074, 536, 11, 341, 2657, 300, 19907, 2377, 385, 767, 19501, 575, 257, 23918, 281, 51270], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 282, "seek": 95388, "start": 972.0, "end": 975.12, "text": " the other thing, which has a pointer to the other thing, which eventually is what", "tokens": [51270, 264, 661, 551, 11, 597, 575, 257, 23918, 281, 264, 661, 551, 11, 597, 4728, 307, 437, 51426], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 283, "seek": 95388, "start": 975.12, "end": 975.48, "text": " I want.", "tokens": [51426, 286, 528, 13, 51444], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 284, "seek": 95388, "start": 975.48, "end": 978.76, "text": " So sometimes you need to do a bit of squinting at Ruby and", "tokens": [51444, 407, 2171, 291, 643, 281, 360, 257, 857, 295, 2339, 686, 278, 412, 19907, 293, 51608], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 285, "seek": 95388, "start": 978.76, "end": 981.44, "text": " understanding like how are you going to get access to this information.", "tokens": [51608, 3701, 411, 577, 366, 291, 516, 281, 483, 2105, 281, 341, 1589, 13, 51742], "temperature": 0.0, "avg_logprob": -0.16566708428519114, "compression_ratio": 1.9377162629757785, "no_speech_prob": 0.003873441368341446}, {"id": 286, "seek": 98144, "start": 982.44, "end": 987.5600000000001, "text": " Like in some cases, like the copy pasted code also called other private VM", "tokens": [50414, 1743, 294, 512, 3331, 11, 411, 264, 5055, 1791, 292, 3089, 611, 1219, 661, 4551, 18038, 50670], "temperature": 0.0, "avg_logprob": -0.23181521306272412, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.004110272508114576}, {"id": 287, "seek": 98144, "start": 987.5600000000001, "end": 990.72, "text": " internal APIs that are not exposed by the VM.", "tokens": [50670, 6920, 21445, 300, 366, 406, 9495, 538, 264, 18038, 13, 50828], "temperature": 0.0, "avg_logprob": -0.23181521306272412, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.004110272508114576}, {"id": 288, "seek": 98144, "start": 990.72, "end": 993.8800000000001, "text": " So when I copy pasted, I compile it and then I try to run it.", "tokens": [50828, 407, 562, 286, 5055, 1791, 292, 11, 286, 31413, 309, 293, 550, 286, 853, 281, 1190, 309, 13, 50986], "temperature": 0.0, "avg_logprob": -0.23181521306272412, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.004110272508114576}, {"id": 289, "seek": 98144, "start": 993.8800000000001, "end": 996.1600000000001, "text": " It doesn't work because those APIs aren't there.", "tokens": [50986, 467, 1177, 380, 589, 570, 729, 21445, 3212, 380, 456, 13, 51100], "temperature": 0.0, "avg_logprob": -0.23181521306272412, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.004110272508114576}, {"id": 290, "seek": 98144, "start": 996.1600000000001, "end": 998.2, "text": " They aren't visible to gems.", "tokens": [51100, 814, 3212, 380, 8974, 281, 29296, 13, 51202], "temperature": 0.0, "avg_logprob": -0.23181521306272412, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.004110272508114576}, {"id": 291, "seek": 98144, "start": 998.2, "end": 1001.6400000000001, "text": " So again, like a lot of details here.", "tokens": [51202, 407, 797, 11, 411, 257, 688, 295, 4365, 510, 13, 51374], "temperature": 0.0, "avg_logprob": -0.23181521306272412, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.004110272508114576}, {"id": 292, "seek": 98144, "start": 1001.6400000000001, "end": 1005.48, "text": " Sometimes you just copy paste more and you keep copy pasting until it works.", "tokens": [51374, 4803, 291, 445, 5055, 9163, 544, 293, 291, 1066, 5055, 1791, 278, 1826, 309, 1985, 13, 51566], "temperature": 0.0, "avg_logprob": -0.23181521306272412, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.004110272508114576}, {"id": 293, "seek": 98144, "start": 1005.48, "end": 1009.0, "text": " Sometimes you need to re-implement some things yourself because it's easier than", "tokens": [51566, 4803, 291, 643, 281, 319, 12, 332, 43704, 512, 721, 1803, 570, 309, 311, 3571, 813, 51742], "temperature": 0.0, "avg_logprob": -0.23181521306272412, "compression_ratio": 1.7014925373134329, "no_speech_prob": 0.004110272508114576}, {"id": 294, "seek": 100900, "start": 1009.0, "end": 1012.52, "text": " you look at it as like okay, I don't need all of the things.", "tokens": [50364, 291, 574, 412, 309, 382, 411, 1392, 11, 286, 500, 380, 643, 439, 295, 264, 721, 13, 50540], "temperature": 0.0, "avg_logprob": -0.23290645542429456, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.007326111663132906}, {"id": 295, "seek": 100900, "start": 1012.52, "end": 1017.88, "text": " But you need to play it a bit with it until you understand how you get it to work.", "tokens": [50540, 583, 291, 643, 281, 862, 309, 257, 857, 365, 309, 1826, 291, 1223, 577, 291, 483, 309, 281, 589, 13, 50808], "temperature": 0.0, "avg_logprob": -0.23290645542429456, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.007326111663132906}, {"id": 296, "seek": 100900, "start": 1017.88, "end": 1020.04, "text": " But it has some really cool side effects.", "tokens": [50808, 583, 309, 575, 512, 534, 1627, 1252, 5065, 13, 50916], "temperature": 0.0, "avg_logprob": -0.23290645542429456, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.007326111663132906}, {"id": 297, "seek": 100900, "start": 1020.04, "end": 1025.0, "text": " So for one, I was able to get this to work as far back as Ruby 2.3 with a lot of", "tokens": [50916, 407, 337, 472, 11, 286, 390, 1075, 281, 483, 341, 281, 589, 382, 1400, 646, 382, 19907, 568, 13, 18, 365, 257, 688, 295, 51164], "temperature": 0.0, "avg_logprob": -0.23290645542429456, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.007326111663132906}, {"id": 298, "seek": 100900, "start": 1025.0, "end": 1028.16, "text": " conditional compilation things in C.", "tokens": [51164, 27708, 40261, 721, 294, 383, 13, 51322], "temperature": 0.0, "avg_logprob": -0.23290645542429456, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.007326111663132906}, {"id": 299, "seek": 100900, "start": 1028.16, "end": 1032.08, "text": " And even as I've done some experiments, even as far back as Ruby 2.1,", "tokens": [51322, 400, 754, 382, 286, 600, 1096, 512, 12050, 11, 754, 382, 1400, 646, 382, 19907, 568, 13, 16, 11, 51518], "temperature": 0.0, "avg_logprob": -0.23290645542429456, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.007326111663132906}, {"id": 300, "seek": 100900, "start": 1032.08, "end": 1033.88, "text": " so I think you could do this.", "tokens": [51518, 370, 286, 519, 291, 727, 360, 341, 13, 51608], "temperature": 0.0, "avg_logprob": -0.23290645542429456, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.007326111663132906}, {"id": 301, "seek": 100900, "start": 1033.88, "end": 1037.64, "text": " And it was kind of cool because this includes back porting of", "tokens": [51608, 400, 309, 390, 733, 295, 1627, 570, 341, 5974, 646, 2436, 278, 295, 51796], "temperature": 0.0, "avg_logprob": -0.23290645542429456, "compression_ratio": 1.690909090909091, "no_speech_prob": 0.007326111663132906}, {"id": 302, "seek": 103764, "start": 1037.64, "end": 1039.5600000000002, "text": " RbProform frames features.", "tokens": [50364, 497, 65, 12681, 837, 12083, 4122, 13, 50460], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 303, "seek": 103764, "start": 1039.5600000000002, "end": 1044.16, "text": " So I copy pasted from Ruby 3 version and actually they have added a few features and", "tokens": [50460, 407, 286, 5055, 1791, 292, 490, 19907, 805, 3037, 293, 767, 436, 362, 3869, 257, 1326, 4122, 293, 50690], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 304, "seek": 103764, "start": 1044.16, "end": 1045.96, "text": " some bug fixes and whatever.", "tokens": [50690, 512, 7426, 32539, 293, 2035, 13, 50780], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 305, "seek": 103764, "start": 1045.96, "end": 1049.0, "text": " And so by copy pasting this and then using it on Ruby 2.3,", "tokens": [50780, 400, 370, 538, 5055, 1791, 278, 341, 293, 550, 1228, 309, 322, 19907, 568, 13, 18, 11, 50932], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 306, "seek": 103764, "start": 1049.0, "end": 1054.24, "text": " I was actually having features that were not present in Ruby 2.3 from the modern", "tokens": [50932, 286, 390, 767, 1419, 4122, 300, 645, 406, 1974, 294, 19907, 568, 13, 18, 490, 264, 4363, 51194], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 307, "seek": 103764, "start": 1054.24, "end": 1056.72, "text": " version of the code, which was really cool.", "tokens": [51194, 3037, 295, 264, 3089, 11, 597, 390, 534, 1627, 13, 51318], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 308, "seek": 103764, "start": 1056.72, "end": 1061.0800000000002, "text": " I also did not do it alone thanks to KJ from Zendesk that did a lot of work on", "tokens": [51318, 286, 611, 630, 406, 360, 309, 3312, 3231, 281, 591, 41, 490, 1176, 34533, 74, 300, 630, 257, 688, 295, 589, 322, 51536], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 309, "seek": 103764, "start": 1061.0800000000002, "end": 1062.16, "text": " Backtracing.", "tokens": [51536, 5833, 6903, 5615, 13, 51590], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 310, "seek": 103764, "start": 1062.16, "end": 1064.96, "text": " And so let's quickly take a look at, interesting.", "tokens": [51590, 400, 370, 718, 311, 2661, 747, 257, 574, 412, 11, 1880, 13, 51730], "temperature": 0.0, "avg_logprob": -0.27752344231856496, "compression_ratio": 1.7195571955719557, "no_speech_prob": 0.005607755854725838}, {"id": 311, "seek": 106496, "start": 1065.96, "end": 1067.68, "text": " Is it one full color?", "tokens": [50414, 1119, 309, 472, 1577, 2017, 30, 50500], "temperature": 0.0, "avg_logprob": -0.2995125770568848, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.004245280288159847}, {"id": 312, "seek": 106496, "start": 1067.68, "end": 1068.8400000000001, "text": " I don't know.", "tokens": [50500, 286, 500, 380, 458, 13, 50558], "temperature": 0.0, "avg_logprob": -0.2995125770568848, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.004245280288159847}, {"id": 313, "seek": 106496, "start": 1068.8400000000001, "end": 1072.04, "text": " So let's take a look at how we can use Backtracing.", "tokens": [50558, 407, 718, 311, 747, 257, 574, 412, 577, 321, 393, 764, 5833, 6903, 5615, 13, 50718], "temperature": 0.0, "avg_logprob": -0.2995125770568848, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.004245280288159847}, {"id": 314, "seek": 106496, "start": 1072.04, "end": 1075.16, "text": " So you can go on the website, you can install the gem.", "tokens": [50718, 407, 291, 393, 352, 322, 264, 3144, 11, 291, 393, 3625, 264, 7173, 13, 50874], "temperature": 0.0, "avg_logprob": -0.2995125770568848, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.004245280288159847}, {"id": 315, "seek": 106496, "start": 1075.16, "end": 1078.3600000000001, "text": " As I said, it's the magic of doing this thing in this weird way,", "tokens": [50874, 1018, 286, 848, 11, 309, 311, 264, 5585, 295, 884, 341, 551, 294, 341, 3657, 636, 11, 51034], "temperature": 0.0, "avg_logprob": -0.2995125770568848, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.004245280288159847}, {"id": 316, "seek": 106496, "start": 1078.3600000000001, "end": 1081.8, "text": " is that it works for you, for everyone, just install.", "tokens": [51034, 307, 300, 309, 1985, 337, 291, 11, 337, 1518, 11, 445, 3625, 13, 51206], "temperature": 0.0, "avg_logprob": -0.2995125770568848, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.004245280288159847}, {"id": 317, "seek": 106496, "start": 1081.8, "end": 1087.0, "text": " It has this API which is Backtracing Locations, which gives you an array of", "tokens": [51206, 467, 575, 341, 9362, 597, 307, 5833, 6903, 5615, 12859, 763, 11, 597, 2709, 291, 364, 10225, 295, 51466], "temperature": 0.0, "avg_logprob": -0.2995125770568848, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.004245280288159847}, {"id": 318, "seek": 106496, "start": 1087.0, "end": 1090.76, "text": " locations, which is Backtracing's version of Ruby's location.", "tokens": [51466, 9253, 11, 597, 307, 5833, 6903, 5615, 311, 3037, 295, 19907, 311, 4914, 13, 51654], "temperature": 0.0, "avg_logprob": -0.2995125770568848, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.004245280288159847}, {"id": 319, "seek": 109076, "start": 1091.08, "end": 1095.48, "text": " So you get a lot of nice methods with the different things that Backtracing got,", "tokens": [50380, 407, 291, 483, 257, 688, 295, 1481, 7150, 365, 264, 819, 721, 300, 5833, 6903, 5615, 658, 11, 50600], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 320, "seek": 109076, "start": 1095.48, "end": 1099.24, "text": " but Backtracing has a lot more things, and I will show you in a bit.", "tokens": [50600, 457, 5833, 6903, 5615, 575, 257, 688, 544, 721, 11, 293, 286, 486, 855, 291, 294, 257, 857, 13, 50788], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 321, "seek": 109076, "start": 1099.24, "end": 1101.8799999999999, "text": " Then you also get color locations, like Ruby,", "tokens": [50788, 1396, 291, 611, 483, 2017, 9253, 11, 411, 19907, 11, 50920], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 322, "seek": 109076, "start": 1101.8799999999999, "end": 1105.36, "text": " you get just for the colors of this current thread.", "tokens": [50920, 291, 483, 445, 337, 264, 4577, 295, 341, 2190, 7207, 13, 51094], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 323, "seek": 109076, "start": 1105.36, "end": 1107.08, "text": " And some use cases you can do with this.", "tokens": [51094, 400, 512, 764, 3331, 291, 393, 360, 365, 341, 13, 51180], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 324, "seek": 109076, "start": 1107.08, "end": 1111.0, "text": " So you can obviously probe what information is there and", "tokens": [51180, 407, 291, 393, 2745, 22715, 437, 1589, 307, 456, 293, 51376], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 325, "seek": 109076, "start": 1111.0, "end": 1112.28, "text": " you can implement your own printer.", "tokens": [51376, 291, 393, 4445, 428, 1065, 16671, 13, 51440], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 326, "seek": 109076, "start": 1112.28, "end": 1116.56, "text": " So there's a lot of information about the different names of the methods.", "tokens": [51440, 407, 456, 311, 257, 688, 295, 1589, 466, 264, 819, 5288, 295, 264, 7150, 13, 51654], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 327, "seek": 109076, "start": 1116.56, "end": 1119.96, "text": " And for this very simple example, actually they have all the same names,", "tokens": [51654, 400, 337, 341, 588, 2199, 1365, 11, 767, 436, 362, 439, 264, 912, 5288, 11, 51824], "temperature": 0.0, "avg_logprob": -0.16903648376464844, "compression_ratio": 1.8461538461538463, "no_speech_prob": 0.04289964213967323}, {"id": 328, "seek": 111996, "start": 1119.96, "end": 1124.32, "text": " but sometimes Ruby has these notions of different names.", "tokens": [50364, 457, 2171, 19907, 575, 613, 35799, 295, 819, 5288, 13, 50582], "temperature": 0.0, "avg_logprob": -0.18634505583861163, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.0020130539778620005}, {"id": 329, "seek": 111996, "start": 1124.32, "end": 1128.88, "text": " So you can access all of them, you can access the objects that this was called on,", "tokens": [50582, 407, 291, 393, 2105, 439, 295, 552, 11, 291, 393, 2105, 264, 6565, 300, 341, 390, 1219, 322, 11, 50810], "temperature": 0.0, "avg_logprob": -0.18634505583861163, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.0020130539778620005}, {"id": 330, "seek": 111996, "start": 1128.88, "end": 1130.52, "text": " you can access the class, a bunch of things.", "tokens": [50810, 291, 393, 2105, 264, 1508, 11, 257, 3840, 295, 721, 13, 50892], "temperature": 0.0, "avg_logprob": -0.18634505583861163, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.0020130539778620005}, {"id": 331, "seek": 111996, "start": 1130.52, "end": 1134.08, "text": " So you can use this, and then you can implement your own printer.", "tokens": [50892, 407, 291, 393, 764, 341, 11, 293, 550, 291, 393, 4445, 428, 1065, 16671, 13, 51070], "temperature": 0.0, "avg_logprob": -0.18634505583861163, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.0020130539778620005}, {"id": 332, "seek": 111996, "start": 1134.08, "end": 1137.04, "text": " That imprints a very nice stack trace.", "tokens": [51070, 663, 704, 47523, 257, 588, 1481, 8630, 13508, 13, 51218], "temperature": 0.0, "avg_logprob": -0.18634505583861163, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.0020130539778620005}, {"id": 333, "seek": 111996, "start": 1138.32, "end": 1141.72, "text": " You can obviously use this to just get the pretty stack trace.", "tokens": [51282, 509, 393, 2745, 764, 341, 281, 445, 483, 264, 1238, 8630, 13508, 13, 51452], "temperature": 0.0, "avg_logprob": -0.18634505583861163, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.0020130539778620005}, {"id": 334, "seek": 111996, "start": 1141.72, "end": 1145.76, "text": " So by default, Backtracing prints exactly as Ruby does, but", "tokens": [51452, 407, 538, 7576, 11, 5833, 6903, 5615, 22305, 2293, 382, 19907, 775, 11, 457, 51654], "temperature": 0.0, "avg_logprob": -0.18634505583861163, "compression_ratio": 1.7991266375545851, "no_speech_prob": 0.0020130539778620005}, {"id": 335, "seek": 114576, "start": 1145.76, "end": 1151.36, "text": " if you call fancy to S, you get the one with the class names and a few other fancy things.", "tokens": [50364, 498, 291, 818, 10247, 281, 318, 11, 291, 483, 264, 472, 365, 264, 1508, 5288, 293, 257, 1326, 661, 10247, 721, 13, 50644], "temperature": 0.0, "avg_logprob": -0.22122823038408834, "compression_ratio": 1.7604562737642586, "no_speech_prob": 0.0014530293410643935}, {"id": 336, "seek": 114576, "start": 1151.36, "end": 1156.16, "text": " And you can also call this weird Backtracing gem from C code, it has a bunch of APIs.", "tokens": [50644, 400, 291, 393, 611, 818, 341, 3657, 5833, 6903, 5615, 7173, 490, 383, 3089, 11, 309, 575, 257, 3840, 295, 21445, 13, 50884], "temperature": 0.0, "avg_logprob": -0.22122823038408834, "compression_ratio": 1.7604562737642586, "no_speech_prob": 0.0014530293410643935}, {"id": 337, "seek": 114576, "start": 1156.16, "end": 1159.44, "text": " And in particular, it has a special low overhead API for", "tokens": [50884, 400, 294, 1729, 11, 309, 575, 257, 2121, 2295, 19922, 9362, 337, 51048], "temperature": 0.0, "avg_logprob": -0.22122823038408834, "compression_ratio": 1.7604562737642586, "no_speech_prob": 0.0014530293410643935}, {"id": 338, "seek": 114576, "start": 1159.44, "end": 1161.64, "text": " profilers and tools like that.", "tokens": [51048, 1740, 388, 433, 293, 3873, 411, 300, 13, 51158], "temperature": 0.0, "avg_logprob": -0.22122823038408834, "compression_ratio": 1.7604562737642586, "no_speech_prob": 0.0014530293410643935}, {"id": 339, "seek": 114576, "start": 1161.64, "end": 1163.8, "text": " So if you're interested in building something like that,", "tokens": [51158, 407, 498, 291, 434, 3102, 294, 2390, 746, 411, 300, 11, 51266], "temperature": 0.0, "avg_logprob": -0.22122823038408834, "compression_ratio": 1.7604562737642586, "no_speech_prob": 0.0014530293410643935}, {"id": 340, "seek": 114576, "start": 1163.8, "end": 1168.32, "text": " you can use Backtracing to get the stacks and not have to care about.", "tokens": [51266, 291, 393, 764, 5833, 6903, 5615, 281, 483, 264, 30792, 293, 406, 362, 281, 1127, 466, 13, 51492], "temperature": 0.0, "avg_logprob": -0.22122823038408834, "compression_ratio": 1.7604562737642586, "no_speech_prob": 0.0014530293410643935}, {"id": 341, "seek": 114576, "start": 1168.32, "end": 1173.28, "text": " And actually one gem that's using Backtracing is this Ruby mem profiler", "tokens": [51492, 400, 767, 472, 7173, 300, 311, 1228, 5833, 6903, 5615, 307, 341, 19907, 1334, 1740, 5441, 51740], "temperature": 0.0, "avg_logprob": -0.22122823038408834, "compression_ratio": 1.7604562737642586, "no_speech_prob": 0.0014530293410643935}, {"id": 342, "seek": 117328, "start": 1173.28, "end": 1177.52, "text": " that was created by KJ and I helped a bit as well.", "tokens": [50364, 300, 390, 2942, 538, 591, 41, 293, 286, 4254, 257, 857, 382, 731, 13, 50576], "temperature": 0.0, "avg_logprob": -0.29937560959617693, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.006089039612561464}, {"id": 343, "seek": 117328, "start": 1177.52, "end": 1182.04, "text": " And so it's like an open source gem by Zendesk, which uses the Backtracing", "tokens": [50576, 400, 370, 309, 311, 411, 364, 1269, 4009, 7173, 538, 1176, 34533, 74, 11, 597, 4960, 264, 5833, 6903, 5615, 50802], "temperature": 0.0, "avg_logprob": -0.29937560959617693, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.006089039612561464}, {"id": 344, "seek": 117328, "start": 1182.04, "end": 1185.68, "text": " API to build a flame graph of memory so", "tokens": [50802, 9362, 281, 1322, 257, 13287, 4295, 295, 4675, 370, 50984], "temperature": 0.0, "avg_logprob": -0.29937560959617693, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.006089039612561464}, {"id": 345, "seek": 117328, "start": 1185.68, "end": 1189.24, "text": " you can investigate memory usage and memory leaks and", "tokens": [50984, 291, 393, 15013, 4675, 14924, 293, 4675, 28885, 293, 51162], "temperature": 0.0, "avg_logprob": -0.29937560959617693, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.006089039612561464}, {"id": 346, "seek": 117328, "start": 1189.24, "end": 1193.28, "text": " reduce the memory footprint of your application or even fix memory leaks.", "tokens": [51162, 5407, 264, 4675, 24222, 295, 428, 3861, 420, 754, 3191, 4675, 28885, 13, 51364], "temperature": 0.0, "avg_logprob": -0.29937560959617693, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.006089039612561464}, {"id": 347, "seek": 117328, "start": 1193.28, "end": 1197.96, "text": " So we actually, me and KJ, we gave a talk at RubyKaigi about this thing called", "tokens": [51364, 407, 321, 767, 11, 385, 293, 591, 41, 11, 321, 2729, 257, 751, 412, 19907, 42, 64, 19789, 466, 341, 551, 1219, 51598], "temperature": 0.0, "avg_logprob": -0.29937560959617693, "compression_ratio": 1.5308641975308641, "no_speech_prob": 0.006089039612561464}, {"id": 348, "seek": 119796, "start": 1197.96, "end": 1200.48, "text": " Hunting Production Memory Leaks with HIP sampling.", "tokens": [50364, 44793, 30088, 38203, 1456, 5461, 365, 389, 9139, 21179, 13, 50490], "temperature": 0.0, "avg_logprob": -0.2712188335733676, "compression_ratio": 1.5977859778597785, "no_speech_prob": 0.005981566850095987}, {"id": 349, "seek": 119796, "start": 1200.48, "end": 1202.24, "text": " So if you're curious, check that talk out.", "tokens": [50490, 407, 498, 291, 434, 6369, 11, 1520, 300, 751, 484, 13, 50578], "temperature": 0.0, "avg_logprob": -0.2712188335733676, "compression_ratio": 1.5977859778597785, "no_speech_prob": 0.005981566850095987}, {"id": 350, "seek": 119796, "start": 1203.56, "end": 1208.6000000000001, "text": " So some other use cases that we've been playing with on Backtracing.", "tokens": [50644, 407, 512, 661, 764, 3331, 300, 321, 600, 668, 2433, 365, 322, 5833, 6903, 5615, 13, 50896], "temperature": 0.0, "avg_logprob": -0.2712188335733676, "compression_ratio": 1.5977859778597785, "no_speech_prob": 0.005981566850095987}, {"id": 351, "seek": 119796, "start": 1208.6000000000001, "end": 1213.56, "text": " So you can actually access native function debug info.", "tokens": [50896, 407, 291, 393, 767, 2105, 8470, 2445, 24083, 13614, 13, 51144], "temperature": 0.0, "avg_logprob": -0.2712188335733676, "compression_ratio": 1.5977859778597785, "no_speech_prob": 0.005981566850095987}, {"id": 352, "seek": 119796, "start": 1213.56, "end": 1218.2, "text": " There's actually a lot to be said about how you get debug info from native libraries on", "tokens": [51144, 821, 311, 767, 257, 688, 281, 312, 848, 466, 577, 291, 483, 24083, 13614, 490, 8470, 15148, 322, 51376], "temperature": 0.0, "avg_logprob": -0.2712188335733676, "compression_ratio": 1.5977859778597785, "no_speech_prob": 0.005981566850095987}, {"id": 353, "seek": 119796, "start": 1218.2, "end": 1221.76, "text": " Linux and different OSes and debug symbols and warf and whatever.", "tokens": [51376, 18734, 293, 819, 12731, 279, 293, 24083, 16944, 293, 1516, 69, 293, 2035, 13, 51554], "temperature": 0.0, "avg_logprob": -0.2712188335733676, "compression_ratio": 1.5977859778597785, "no_speech_prob": 0.005981566850095987}, {"id": 354, "seek": 119796, "start": 1221.76, "end": 1225.8400000000001, "text": " I will not go into much into that because that's a nightmare.", "tokens": [51554, 286, 486, 406, 352, 666, 709, 666, 300, 570, 300, 311, 257, 18724, 13, 51758], "temperature": 0.0, "avg_logprob": -0.2712188335733676, "compression_ratio": 1.5977859778597785, "no_speech_prob": 0.005981566850095987}, {"id": 355, "seek": 122584, "start": 1225.84, "end": 1230.56, "text": " But I have a working prototype which actually you can see for each.", "tokens": [50364, 583, 286, 362, 257, 1364, 19475, 597, 767, 291, 393, 536, 337, 1184, 13, 50600], "temperature": 0.0, "avg_logprob": -0.218954874464303, "compression_ratio": 1.603921568627451, "no_speech_prob": 0.00994995329529047}, {"id": 356, "seek": 122584, "start": 1230.56, "end": 1232.8, "text": " You can see, okay, each belongs to Array.", "tokens": [50600, 509, 393, 536, 11, 1392, 11, 1184, 12953, 281, 1587, 3458, 13, 50712], "temperature": 0.0, "avg_logprob": -0.218954874464303, "compression_ratio": 1.603921568627451, "no_speech_prob": 0.00994995329529047}, {"id": 357, "seek": 122584, "start": 1232.8, "end": 1236.76, "text": " But you can also see it's implemented in this libruby.so object.", "tokens": [50712, 583, 291, 393, 611, 536, 309, 311, 12270, 294, 341, 22854, 81, 836, 88, 13, 539, 2657, 13, 50910], "temperature": 0.0, "avg_logprob": -0.218954874464303, "compression_ratio": 1.603921568627451, "no_speech_prob": 0.00994995329529047}, {"id": 358, "seek": 122584, "start": 1236.76, "end": 1239.32, "text": " You can see I'm using Ruby 3.1.", "tokens": [50910, 509, 393, 536, 286, 478, 1228, 19907, 805, 13, 16, 13, 51038], "temperature": 0.0, "avg_logprob": -0.218954874464303, "compression_ratio": 1.603921568627451, "no_speech_prob": 0.00994995329529047}, {"id": 359, "seek": 122584, "start": 1239.32, "end": 1243.24, "text": " And you can see that the C function name is rbarrayeach.", "tokens": [51038, 400, 291, 393, 536, 300, 264, 383, 2445, 1315, 307, 367, 65, 2284, 320, 68, 608, 13, 51234], "temperature": 0.0, "avg_logprob": -0.218954874464303, "compression_ratio": 1.603921568627451, "no_speech_prob": 0.00994995329529047}, {"id": 360, "seek": 122584, "start": 1243.24, "end": 1247.24, "text": " And then in the future, we could even get more of the bug information,", "tokens": [51234, 400, 550, 294, 264, 2027, 11, 321, 727, 754, 483, 544, 295, 264, 7426, 1589, 11, 51434], "temperature": 0.0, "avg_logprob": -0.218954874464303, "compression_ratio": 1.603921568627451, "no_speech_prob": 0.00994995329529047}, {"id": 361, "seek": 122584, "start": 1247.24, "end": 1253.28, "text": " assuming it's still available and see the file name, the line number, etc.", "tokens": [51434, 11926, 309, 311, 920, 2435, 293, 536, 264, 3991, 1315, 11, 264, 1622, 1230, 11, 5183, 13, 51736], "temperature": 0.0, "avg_logprob": -0.218954874464303, "compression_ratio": 1.603921568627451, "no_speech_prob": 0.00994995329529047}, {"id": 362, "seek": 125328, "start": 1253.28, "end": 1259.0, "text": " And allow you to smoothly go from Ruby code to C code as if, yeah.", "tokens": [50364, 400, 2089, 291, 281, 19565, 352, 490, 19907, 3089, 281, 383, 3089, 382, 498, 11, 1338, 13, 50650], "temperature": 0.0, "avg_logprob": -0.18245551545741195, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0034094583243131638}, {"id": 363, "seek": 125328, "start": 1259.0, "end": 1262.8799999999999, "text": " And theoretically, this native information doesn't have to just be C.", "tokens": [50650, 400, 29400, 11, 341, 8470, 1589, 1177, 380, 362, 281, 445, 312, 383, 13, 50844], "temperature": 0.0, "avg_logprob": -0.18245551545741195, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0034094583243131638}, {"id": 364, "seek": 125328, "start": 1262.8799999999999, "end": 1265.72, "text": " So if you have a Ruby gem that is built in Rust and", "tokens": [50844, 407, 498, 291, 362, 257, 19907, 7173, 300, 307, 3094, 294, 34952, 293, 50986], "temperature": 0.0, "avg_logprob": -0.18245551545741195, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0034094583243131638}, {"id": 365, "seek": 125328, "start": 1265.72, "end": 1268.52, "text": " the Rust binding would have the correct debug information,", "tokens": [50986, 264, 34952, 17359, 576, 362, 264, 3006, 24083, 1589, 11, 51126], "temperature": 0.0, "avg_logprob": -0.18245551545741195, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0034094583243131638}, {"id": 366, "seek": 125328, "start": 1268.52, "end": 1272.36, "text": " you could go directly from your Stacktrace to, it's this Rust line.", "tokens": [51126, 291, 727, 352, 3838, 490, 428, 37649, 6903, 617, 281, 11, 309, 311, 341, 34952, 1622, 13, 51318], "temperature": 0.0, "avg_logprob": -0.18245551545741195, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0034094583243131638}, {"id": 367, "seek": 125328, "start": 1272.36, "end": 1276.3999999999999, "text": " So it's really nice to, that's why I'm looking into having this information.", "tokens": [51318, 407, 309, 311, 534, 1481, 281, 11, 300, 311, 983, 286, 478, 1237, 666, 1419, 341, 1589, 13, 51520], "temperature": 0.0, "avg_logprob": -0.18245551545741195, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0034094583243131638}, {"id": 368, "seek": 125328, "start": 1277.72, "end": 1281.3999999999999, "text": " Another idea that I have that I still haven't experimented,", "tokens": [51586, 3996, 1558, 300, 286, 362, 300, 286, 920, 2378, 380, 5120, 292, 11, 51770], "temperature": 0.0, "avg_logprob": -0.18245551545741195, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.0034094583243131638}, {"id": 369, "seek": 128140, "start": 1281.4, "end": 1284.0800000000002, "text": " I haven't tried really hard to do it, which is,", "tokens": [50364, 286, 2378, 380, 3031, 534, 1152, 281, 360, 309, 11, 597, 307, 11, 50498], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 370, "seek": 128140, "start": 1284.0800000000002, "end": 1287.1200000000001, "text": " could we build a Backtrace Stacktrace for exception?", "tokens": [50498, 727, 321, 1322, 257, 5833, 6903, 617, 37649, 6903, 617, 337, 11183, 30, 50650], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 371, "seek": 128140, "start": 1287.1200000000001, "end": 1291.64, "text": " So that when you have an exception in your app, you get the nicer objects", "tokens": [50650, 407, 300, 562, 291, 362, 364, 11183, 294, 428, 724, 11, 291, 483, 264, 22842, 6565, 50876], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 372, "seek": 128140, "start": 1291.64, "end": 1294.72, "text": " which Backtrace provides you and you can get the full information.", "tokens": [50876, 597, 5833, 6903, 617, 6417, 291, 293, 291, 393, 483, 264, 1577, 1589, 13, 51030], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 373, "seek": 128140, "start": 1296.3200000000002, "end": 1298.5600000000002, "text": " I haven't tried it yet, want to do it.", "tokens": [51110, 286, 2378, 380, 3031, 309, 1939, 11, 528, 281, 360, 309, 13, 51222], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 374, "seek": 128140, "start": 1298.5600000000002, "end": 1300.44, "text": " So, just kind of a recap.", "tokens": [51222, 407, 11, 445, 733, 295, 257, 20928, 13, 51316], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 375, "seek": 128140, "start": 1300.44, "end": 1304.4, "text": " What did I learn from all of this experimentation and playing?", "tokens": [51316, 708, 630, 286, 1466, 490, 439, 295, 341, 37142, 293, 2433, 30, 51514], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 376, "seek": 128140, "start": 1304.4, "end": 1307.8400000000001, "text": " One thing is that the Ruby VM itself is very interesting and", "tokens": [51514, 1485, 551, 307, 300, 264, 19907, 18038, 2564, 307, 588, 1880, 293, 51686], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 377, "seek": 128140, "start": 1307.8400000000001, "end": 1310.2, "text": " I would say surprisingly approachable.", "tokens": [51686, 286, 576, 584, 17600, 3109, 712, 13, 51804], "temperature": 0.0, "avg_logprob": -0.22886702770323264, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.003068363294005394}, {"id": 378, "seek": 131020, "start": 1310.2, "end": 1314.3600000000001, "text": " So my prior C experience was university projects and", "tokens": [50364, 407, 452, 4059, 383, 1752, 390, 5454, 4455, 293, 50572], "temperature": 0.0, "avg_logprob": -0.2227635005163768, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.0008548745536245406}, {"id": 379, "seek": 131020, "start": 1314.3600000000001, "end": 1316.44, "text": " really, really tiny personal stuff.", "tokens": [50572, 534, 11, 534, 5870, 2973, 1507, 13, 50676], "temperature": 0.0, "avg_logprob": -0.2227635005163768, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.0008548745536245406}, {"id": 380, "seek": 131020, "start": 1316.44, "end": 1320.04, "text": " So I would not classify as a C developer ever.", "tokens": [50676, 407, 286, 576, 406, 33872, 382, 257, 383, 10754, 1562, 13, 50856], "temperature": 0.0, "avg_logprob": -0.2227635005163768, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.0008548745536245406}, {"id": 381, "seek": 131020, "start": 1321.48, "end": 1325.92, "text": " And I like everyone that goes to uni, I just kind of listed C in my CV", "tokens": [50928, 400, 286, 411, 1518, 300, 1709, 281, 36435, 11, 286, 445, 733, 295, 10052, 383, 294, 452, 22995, 51150], "temperature": 0.0, "avg_logprob": -0.2227635005163768, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.0008548745536245406}, {"id": 382, "seek": 131020, "start": 1325.92, "end": 1328.16, "text": " because I did it at this one or two courses.", "tokens": [51150, 570, 286, 630, 309, 412, 341, 472, 420, 732, 7712, 13, 51262], "temperature": 0.0, "avg_logprob": -0.2227635005163768, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.0008548745536245406}, {"id": 383, "seek": 131020, "start": 1328.16, "end": 1332.96, "text": " But really, I was not a C developer and I still could follow along a lot of stuff.", "tokens": [51262, 583, 534, 11, 286, 390, 406, 257, 383, 10754, 293, 286, 920, 727, 1524, 2051, 257, 688, 295, 1507, 13, 51502], "temperature": 0.0, "avg_logprob": -0.2227635005163768, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.0008548745536245406}, {"id": 384, "seek": 131020, "start": 1332.96, "end": 1336.1200000000001, "text": " And especially if you go there and you add a printf and", "tokens": [51502, 400, 2318, 498, 291, 352, 456, 293, 291, 909, 257, 4482, 69, 293, 51660], "temperature": 0.0, "avg_logprob": -0.2227635005163768, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.0008548745536245406}, {"id": 385, "seek": 131020, "start": 1336.1200000000001, "end": 1339.92, "text": " you start playing, changing the code a bit, it's like, you see things happening.", "tokens": [51660, 291, 722, 2433, 11, 4473, 264, 3089, 257, 857, 11, 309, 311, 411, 11, 291, 536, 721, 2737, 13, 51850], "temperature": 0.0, "avg_logprob": -0.2227635005163768, "compression_ratio": 1.658450704225352, "no_speech_prob": 0.0008548745536245406}, {"id": 386, "seek": 133992, "start": 1339.92, "end": 1341.94, "text": " It's really interesting.", "tokens": [50364, 467, 311, 534, 1880, 13, 50465], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 387, "seek": 133992, "start": 1341.94, "end": 1347.5600000000002, "text": " And also the power of having a working prototype to show off a crazy idea.", "tokens": [50465, 400, 611, 264, 1347, 295, 1419, 257, 1364, 19475, 281, 855, 766, 257, 3219, 1558, 13, 50746], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 388, "seek": 133992, "start": 1347.5600000000002, "end": 1353.0800000000002, "text": " And this had really two side effects that I was kind of hoping for,", "tokens": [50746, 400, 341, 632, 534, 732, 1252, 5065, 300, 286, 390, 733, 295, 7159, 337, 11, 51022], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 389, "seek": 133992, "start": 1353.0800000000002, "end": 1355.28, "text": " but didn't quite expect it would happen.", "tokens": [51022, 457, 994, 380, 1596, 2066, 309, 576, 1051, 13, 51132], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 390, "seek": 133992, "start": 1355.28, "end": 1359.16, "text": " One is that we actually at Datadog ended up using a similar approach for", "tokens": [51132, 1485, 307, 300, 321, 767, 412, 9315, 345, 664, 4590, 493, 1228, 257, 2531, 3109, 337, 51326], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 391, "seek": 133992, "start": 1359.16, "end": 1360.68, "text": " the Datadog Ruby Rufaller.", "tokens": [51326, 264, 9315, 345, 664, 19907, 497, 2947, 22414, 13, 51402], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 392, "seek": 133992, "start": 1360.68, "end": 1363.8400000000001, "text": " And with Backtrace, I kind of proved to the team,", "tokens": [51402, 400, 365, 5833, 6903, 617, 11, 286, 733, 295, 14617, 281, 264, 1469, 11, 51560], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 393, "seek": 133992, "start": 1363.8400000000001, "end": 1365.96, "text": " I was like, yep, it works, I've got it working.", "tokens": [51560, 286, 390, 411, 11, 18633, 11, 309, 1985, 11, 286, 600, 658, 309, 1364, 13, 51666], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 394, "seek": 133992, "start": 1365.96, "end": 1368.76, "text": " This is one thing we could do if we wanted to.", "tokens": [51666, 639, 307, 472, 551, 321, 727, 360, 498, 321, 1415, 281, 13, 51806], "temperature": 0.0, "avg_logprob": -0.26177570838054626, "compression_ratio": 1.6236559139784945, "no_speech_prob": 0.0022779747378081083}, {"id": 395, "seek": 136876, "start": 1368.76, "end": 1372.16, "text": " And the other thing is that the Ruby Core team also kind of liked the show class", "tokens": [50364, 400, 264, 661, 551, 307, 300, 264, 19907, 14798, 1469, 611, 733, 295, 4501, 264, 855, 1508, 50534], "temperature": 0.0, "avg_logprob": -0.22294826001192616, "compression_ratio": 1.7137096774193548, "no_speech_prob": 0.0018666937248781323}, {"id": 396, "seek": 136876, "start": 1372.16, "end": 1374.24, "text": " names in Stack Traces thing.", "tokens": [50534, 5288, 294, 37649, 1765, 2116, 551, 13, 50638], "temperature": 0.0, "avg_logprob": -0.22294826001192616, "compression_ratio": 1.7137096774193548, "no_speech_prob": 0.0018666937248781323}, {"id": 397, "seek": 136876, "start": 1374.24, "end": 1377.72, "text": " And this kind of started an interesting discussion.", "tokens": [50638, 400, 341, 733, 295, 1409, 364, 1880, 5017, 13, 50812], "temperature": 0.0, "avg_logprob": -0.22294826001192616, "compression_ratio": 1.7137096774193548, "no_speech_prob": 0.0018666937248781323}, {"id": 398, "seek": 136876, "start": 1377.72, "end": 1381.8, "text": " And this leads us to the final item, which is class names in Backtraces", "tokens": [50812, 400, 341, 6689, 505, 281, 264, 2572, 3174, 11, 597, 307, 1508, 5288, 294, 5833, 6903, 2116, 51016], "temperature": 0.0, "avg_logprob": -0.22294826001192616, "compression_ratio": 1.7137096774193548, "no_speech_prob": 0.0018666937248781323}, {"id": 399, "seek": 136876, "start": 1381.8, "end": 1383.8799999999999, "text": " coming soon in Ruby 3.4.", "tokens": [51016, 1348, 2321, 294, 19907, 805, 13, 19, 13, 51120], "temperature": 0.0, "avg_logprob": -0.22294826001192616, "compression_ratio": 1.7137096774193548, "no_speech_prob": 0.0018666937248781323}, {"id": 400, "seek": 136876, "start": 1383.8799999999999, "end": 1385.16, "text": " Question mark.", "tokens": [51120, 14464, 1491, 13, 51184], "temperature": 0.0, "avg_logprob": -0.22294826001192616, "compression_ratio": 1.7137096774193548, "no_speech_prob": 0.0018666937248781323}, {"id": 401, "seek": 136876, "start": 1385.16, "end": 1389.32, "text": " So actually in the Ruby issue tracker, this is now being discussed.", "tokens": [51184, 407, 767, 294, 264, 19907, 2734, 37516, 11, 341, 307, 586, 885, 7152, 13, 51392], "temperature": 0.0, "avg_logprob": -0.22294826001192616, "compression_ratio": 1.7137096774193548, "no_speech_prob": 0.0018666937248781323}, {"id": 402, "seek": 136876, "start": 1389.32, "end": 1394.72, "text": " This number 19117 include the method owner in Backtraces, not just the method name.", "tokens": [51392, 639, 1230, 1294, 5348, 22, 4090, 264, 3170, 7289, 294, 5833, 6903, 2116, 11, 406, 445, 264, 3170, 1315, 13, 51662], "temperature": 0.0, "avg_logprob": -0.22294826001192616, "compression_ratio": 1.7137096774193548, "no_speech_prob": 0.0018666937248781323}, {"id": 403, "seek": 139472, "start": 1394.72, "end": 1400.44, "text": " This was opened by Jean-Bossier, had this proposal after we were discussing this at", "tokens": [50364, 639, 390, 5625, 538, 13854, 12, 33, 772, 811, 11, 632, 341, 11494, 934, 321, 645, 10850, 341, 412, 50650], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 404, "seek": 139472, "start": 1400.44, "end": 1401.6000000000001, "text": " RubyKaigi.", "tokens": [50650, 19907, 42, 64, 19789, 13, 50708], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 405, "seek": 139472, "start": 1401.6000000000001, "end": 1405.2, "text": " And then Mame implemented like it has a working prototype for", "tokens": [50708, 400, 550, 376, 529, 12270, 411, 309, 575, 257, 1364, 19475, 337, 50888], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 406, "seek": 139472, "start": 1405.2, "end": 1407.76, "text": " this that it has a PR for Ruby.", "tokens": [50888, 341, 300, 309, 575, 257, 11568, 337, 19907, 13, 51016], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 407, "seek": 139472, "start": 1407.76, "end": 1409.88, "text": " And actually if you just build it, it works.", "tokens": [51016, 400, 767, 498, 291, 445, 1322, 309, 11, 309, 1985, 13, 51122], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 408, "seek": 139472, "start": 1409.88, "end": 1414.64, "text": " Like as kind of what we were saying, now you get this information of like the full", "tokens": [51122, 1743, 382, 733, 295, 437, 321, 645, 1566, 11, 586, 291, 483, 341, 1589, 295, 411, 264, 1577, 51360], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 409, "seek": 139472, "start": 1414.64, "end": 1417.96, "text": " class and you see that this is an instance method and you see like the dot on", "tokens": [51360, 1508, 293, 291, 536, 300, 341, 307, 364, 5197, 3170, 293, 291, 536, 411, 264, 5893, 322, 51526], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 410, "seek": 139472, "start": 1417.96, "end": 1419.04, "text": " the class method.", "tokens": [51526, 264, 1508, 3170, 13, 51580], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 411, "seek": 139472, "start": 1419.04, "end": 1421.92, "text": " So we had this extra information for", "tokens": [51580, 407, 321, 632, 341, 2857, 1589, 337, 51724], "temperature": 0.0, "avg_logprob": -0.29025771969654524, "compression_ratio": 1.7403100775193798, "no_speech_prob": 0.012959595769643784}, {"id": 412, "seek": 142192, "start": 1421.92, "end": 1426.0, "text": " developers to just out of the box.", "tokens": [50364, 8849, 281, 445, 484, 295, 264, 2424, 13, 50568], "temperature": 0.0, "avg_logprob": -0.24211580325395632, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.03220225125551224}, {"id": 413, "seek": 142192, "start": 1426.0, "end": 1427.64, "text": " Obviously this is still being discussed.", "tokens": [50568, 7580, 341, 307, 920, 885, 7152, 13, 50650], "temperature": 0.0, "avg_logprob": -0.24211580325395632, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.03220225125551224}, {"id": 414, "seek": 142192, "start": 1427.64, "end": 1432.16, "text": " So if you like this idea, you want to see this in Ruby 3.4 and use it in your app.", "tokens": [50650, 407, 498, 291, 411, 341, 1558, 11, 291, 528, 281, 536, 341, 294, 19907, 805, 13, 19, 293, 764, 309, 294, 428, 724, 13, 50876], "temperature": 0.0, "avg_logprob": -0.24211580325395632, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.03220225125551224}, {"id": 415, "seek": 142192, "start": 1432.16, "end": 1436.48, "text": " Just try it out, go and leave feedback on this issue.", "tokens": [50876, 1449, 853, 309, 484, 11, 352, 293, 1856, 5824, 322, 341, 2734, 13, 51092], "temperature": 0.0, "avg_logprob": -0.24211580325395632, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.03220225125551224}, {"id": 416, "seek": 142192, "start": 1436.48, "end": 1440.2, "text": " And that was kind of it that I have had to tell you.", "tokens": [51092, 400, 300, 390, 733, 295, 309, 300, 286, 362, 632, 281, 980, 291, 13, 51278], "temperature": 0.0, "avg_logprob": -0.24211580325395632, "compression_ratio": 1.456043956043956, "no_speech_prob": 0.03220225125551224}, {"id": 417, "seek": 144020, "start": 1440.2, "end": 1449.6000000000001, "text": " So yeah, email if you want to talk to me,", "tokens": [50364, 407, 1338, 11, 3796, 498, 291, 528, 281, 751, 281, 385, 11, 50834], "temperature": 0.0, "avg_logprob": -0.4369734211971885, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.3321782946586609}, {"id": 418, "seek": 144020, "start": 1449.6000000000001, "end": 1453.3600000000001, "text": " a knox on whatever they call the social network, my blog.", "tokens": [50834, 257, 444, 5230, 322, 2035, 436, 818, 264, 2093, 3209, 11, 452, 6968, 13, 51022], "temperature": 0.0, "avg_logprob": -0.4369734211971885, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.3321782946586609}, {"id": 419, "seek": 144020, "start": 1453.3600000000001, "end": 1460.52, "text": " I have a few other talks and here like yes, go get feedback because Ruby developers are", "tokens": [51022, 286, 362, 257, 1326, 661, 6686, 293, 510, 411, 2086, 11, 352, 483, 5824, 570, 19907, 8849, 366, 51380], "temperature": 0.0, "avg_logprob": -0.4369734211971885, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.3321782946586609}, {"id": 420, "seek": 144020, "start": 1460.52, "end": 1464.3600000000001, "text": " actually calling for feedback in that ticket.", "tokens": [51380, 767, 5141, 337, 5824, 294, 300, 10550, 13, 51572], "temperature": 0.0, "avg_logprob": -0.4369734211971885, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.3321782946586609}, {"id": 421, "seek": 144020, "start": 1464.3600000000001, "end": 1467.16, "text": " And I actually, thanks to my employer, they developed for", "tokens": [51572, 400, 286, 767, 11, 3231, 281, 452, 16205, 11, 436, 4743, 337, 51712], "temperature": 0.0, "avg_logprob": -0.4369734211971885, "compression_ratio": 1.5315789473684212, "no_speech_prob": 0.3321782946586609}, {"id": 422, "seek": 146716, "start": 1467.24, "end": 1468.88, "text": " allowing me to work on these things.", "tokens": [50368, 8293, 385, 281, 589, 322, 613, 721, 13, 50450], "temperature": 0.0, "avg_logprob": -0.3724479406652316, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.02255478873848915}, {"id": 423, "seek": 146716, "start": 1468.88, "end": 1473.52, "text": " And I actually, if you're interested in coming work on the data about Ruby Jam,", "tokens": [50450, 400, 286, 767, 11, 498, 291, 434, 3102, 294, 1348, 589, 322, 264, 1412, 466, 19907, 10372, 11, 50682], "temperature": 0.0, "avg_logprob": -0.3724479406652316, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.02255478873848915}, {"id": 424, "seek": 146716, "start": 1473.52, "end": 1476.88, "text": " ping me because we are hiring right now for the Ruby Jam.", "tokens": [50682, 26151, 385, 570, 321, 366, 15335, 558, 586, 337, 264, 19907, 10372, 13, 50850], "temperature": 0.0, "avg_logprob": -0.3724479406652316, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.02255478873848915}, {"id": 425, "seek": 146716, "start": 1476.88, "end": 1479.4, "text": " And it's really different kind of Ruby that we do.", "tokens": [50850, 400, 309, 311, 534, 819, 733, 295, 19907, 300, 321, 360, 13, 50976], "temperature": 0.0, "avg_logprob": -0.3724479406652316, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.02255478873848915}, {"id": 426, "seek": 146716, "start": 1480.8400000000001, "end": 1481.52, "text": " Yeah, questions?", "tokens": [51048, 865, 11, 1651, 30, 51082], "temperature": 0.0, "avg_logprob": -0.3724479406652316, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.02255478873848915}, {"id": 427, "seek": 146716, "start": 1483.76, "end": 1484.28, "text": " Hello.", "tokens": [51194, 2425, 13, 51220], "temperature": 0.0, "avg_logprob": -0.3724479406652316, "compression_ratio": 1.447674418604651, "no_speech_prob": 0.02255478873848915}, {"id": 428, "seek": 148428, "start": 1484.28, "end": 1487.28, "text": " Yeah.", "tokens": [50364, 865, 13, 50514], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 429, "seek": 148428, "start": 1487.28, "end": 1490.6, "text": " I think you mostly answered it but the class shown in the trace,", "tokens": [50514, 286, 519, 291, 5240, 10103, 309, 457, 264, 1508, 4898, 294, 264, 13508, 11, 50680], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 430, "seek": 148428, "start": 1490.6, "end": 1491.42, "text": " Yeah.", "tokens": [50680, 865, 13, 50721], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 431, "seek": 148428, "start": 1491.42, "end": 1495.28, "text": " 3, 4, and 3, 4 and backtracing, it is the owner of the method.", "tokens": [50721, 805, 11, 1017, 11, 293, 805, 11, 1017, 293, 646, 6903, 5615, 11, 309, 307, 264, 7289, 295, 264, 3170, 13, 50914], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 432, "seek": 148428, "start": 1495.28, "end": 1502.48, "text": " Like we can statically, because in J-Bruity the only way we get the piled backtrace is", "tokens": [50914, 1743, 321, 393, 2219, 984, 11, 570, 294, 508, 12, 33, 894, 507, 264, 787, 636, 321, 483, 264, 6429, 292, 646, 6903, 617, 307, 51274], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 433, "seek": 148428, "start": 1502.48, "end": 1508.04, "text": " by cramming a bunch of data into the class name or the file name or whatever it's on", "tokens": [51274, 538, 941, 335, 2810, 257, 3840, 295, 1412, 666, 264, 1508, 1315, 420, 264, 3991, 1315, 420, 2035, 309, 311, 322, 51552], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 434, "seek": 148428, "start": 1508.04, "end": 1509.04, "text": " the JVM's trace.", "tokens": [51552, 264, 508, 53, 44, 311, 13508, 13, 51602], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 435, "seek": 148428, "start": 1509.04, "end": 1510.04, "text": " Yeah.", "tokens": [51602, 865, 13, 51652], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 436, "seek": 148428, "start": 1510.04, "end": 1511.04, "text": " I can't make that dynamic.", "tokens": [51652, 286, 393, 380, 652, 300, 8546, 13, 51702], "temperature": 0.4, "avg_logprob": -0.624259822624774, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.07311438769102097}, {"id": 437, "seek": 151104, "start": 1511.04, "end": 1515.04, "text": " Once I set that stone to the method, it's going to stay that way.", "tokens": [50364, 3443, 286, 992, 300, 7581, 281, 264, 3170, 11, 309, 311, 516, 281, 1754, 300, 636, 13, 50564], "temperature": 0.0, "avg_logprob": -0.25850121060708414, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.003815921489149332}, {"id": 438, "seek": 151104, "start": 1515.04, "end": 1518.8, "text": " But if it's the method owner, then at the point where I can pile it,", "tokens": [50564, 583, 498, 309, 311, 264, 3170, 7289, 11, 550, 412, 264, 935, 689, 286, 393, 14375, 309, 11, 50752], "temperature": 0.0, "avg_logprob": -0.25850121060708414, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.003815921489149332}, {"id": 439, "seek": 151104, "start": 1518.8, "end": 1521.8, "text": " I can just throw that extra information in there and pull it out.", "tokens": [50752, 286, 393, 445, 3507, 300, 2857, 1589, 294, 456, 293, 2235, 309, 484, 13, 50902], "temperature": 0.0, "avg_logprob": -0.25850121060708414, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.003815921489149332}, {"id": 440, "seek": 151104, "start": 1521.8, "end": 1522.8, "text": " I think that's right.", "tokens": [50902, 286, 519, 300, 311, 558, 13, 50952], "temperature": 0.0, "avg_logprob": -0.25850121060708414, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.003815921489149332}, {"id": 441, "seek": 151104, "start": 1522.8, "end": 1526.6, "text": " Yeah, I believe the disimplementation is exactly the method owner.", "tokens": [50952, 865, 11, 286, 1697, 264, 717, 332, 781, 19631, 307, 2293, 264, 3170, 7289, 13, 51142], "temperature": 0.0, "avg_logprob": -0.25850121060708414, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.003815921489149332}, {"id": 442, "seek": 151104, "start": 1526.6, "end": 1530.96, "text": " I think in backtrace, yeah, I experimented with having both, but it's much harder.", "tokens": [51142, 286, 519, 294, 646, 6903, 617, 11, 1338, 11, 286, 5120, 292, 365, 1419, 1293, 11, 457, 309, 311, 709, 6081, 13, 51360], "temperature": 0.0, "avg_logprob": -0.25850121060708414, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.003815921489149332}, {"id": 443, "seek": 151104, "start": 1530.96, "end": 1534.48, "text": " And I think part of the discussion going on in the ticket is also,", "tokens": [51360, 400, 286, 519, 644, 295, 264, 5017, 516, 322, 294, 264, 10550, 307, 611, 11, 51536], "temperature": 0.0, "avg_logprob": -0.25850121060708414, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.003815921489149332}, {"id": 444, "seek": 151104, "start": 1534.48, "end": 1538.1599999999999, "text": " what about dynamically defined stuff and whatever?", "tokens": [51536, 437, 466, 43492, 7642, 1507, 293, 2035, 30, 51720], "temperature": 0.0, "avg_logprob": -0.25850121060708414, "compression_ratio": 1.7314487632508835, "no_speech_prob": 0.003815921489149332}, {"id": 445, "seek": 153816, "start": 1538.28, "end": 1544.4, "text": " So I think the implementation is like, oh, when it gets, and I think, yeah.", "tokens": [50370, 407, 286, 519, 264, 11420, 307, 411, 11, 1954, 11, 562, 309, 2170, 11, 293, 286, 519, 11, 1338, 13, 50676], "temperature": 0.0, "avg_logprob": -0.24025638972487406, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.007606730330735445}, {"id": 446, "seek": 153816, "start": 1544.4, "end": 1549.1200000000001, "text": " In some cases, it might not show, because it's kind of hard to get this information", "tokens": [50676, 682, 512, 3331, 11, 309, 1062, 406, 855, 11, 570, 309, 311, 733, 295, 1152, 281, 483, 341, 1589, 50912], "temperature": 0.0, "avg_logprob": -0.24025638972487406, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.007606730330735445}, {"id": 447, "seek": 153816, "start": 1549.1200000000001, "end": 1553.48, "text": " even in CRuby and expose it in a very efficient way.", "tokens": [50912, 754, 294, 14123, 836, 88, 293, 19219, 309, 294, 257, 588, 7148, 636, 13, 51130], "temperature": 0.0, "avg_logprob": -0.24025638972487406, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.007606730330735445}, {"id": 448, "seek": 153816, "start": 1553.48, "end": 1557.5600000000002, "text": " But in a lot of cases, it's like a regular method on a regular class and it gets it.", "tokens": [51130, 583, 294, 257, 688, 295, 3331, 11, 309, 311, 411, 257, 3890, 3170, 322, 257, 3890, 1508, 293, 309, 2170, 309, 13, 51334], "temperature": 0.0, "avg_logprob": -0.24025638972487406, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.007606730330735445}, {"id": 449, "seek": 153816, "start": 1557.5600000000002, "end": 1558.5600000000002, "text": " So yeah.", "tokens": [51334, 407, 1338, 13, 51384], "temperature": 0.0, "avg_logprob": -0.24025638972487406, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.007606730330735445}, {"id": 450, "seek": 153816, "start": 1558.5600000000002, "end": 1563.5600000000002, "text": " More of a product question instead of a technical one.", "tokens": [51384, 5048, 295, 257, 1674, 1168, 2602, 295, 257, 6191, 472, 13, 51634], "temperature": 0.0, "avg_logprob": -0.24025638972487406, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.007606730330735445}, {"id": 451, "seek": 153816, "start": 1563.5600000000002, "end": 1564.5600000000002, "text": " Yes.", "tokens": [51634, 1079, 13, 51684], "temperature": 0.0, "avg_logprob": -0.24025638972487406, "compression_ratio": 1.5775862068965518, "no_speech_prob": 0.007606730330735445}, {"id": 452, "seek": 156456, "start": 1564.56, "end": 1570.56, "text": " You say it came from the, you wanted to have access to what was being called.", "tokens": [50364, 509, 584, 309, 1361, 490, 264, 11, 291, 1415, 281, 362, 2105, 281, 437, 390, 885, 1219, 13, 50664], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 453, "seek": 156456, "start": 1570.56, "end": 1571.56, "text": " Yeah.", "tokens": [50664, 865, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 454, "seek": 156456, "start": 1571.56, "end": 1576.56, "text": " Is that something you personally, or is that something that was shared across the team", "tokens": [50714, 1119, 300, 746, 291, 5665, 11, 420, 307, 300, 746, 300, 390, 5507, 2108, 264, 1469, 50964], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 455, "seek": 156456, "start": 1576.56, "end": 1579.56, "text": " and then something related to that?", "tokens": [50964, 293, 550, 746, 4077, 281, 300, 30, 51114], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 456, "seek": 156456, "start": 1579.56, "end": 1583.56, "text": " Essentially, I'm not working with anything compared to that.", "tokens": [51114, 23596, 11, 286, 478, 406, 1364, 365, 1340, 5347, 281, 300, 13, 51314], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 457, "seek": 156456, "start": 1583.56, "end": 1584.56, "text": " Yeah.", "tokens": [51314, 865, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 458, "seek": 156456, "start": 1584.56, "end": 1586.56, "text": " Will I get something out of it myself?", "tokens": [51364, 3099, 286, 483, 746, 484, 295, 309, 2059, 30, 51464], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 459, "seek": 156456, "start": 1586.56, "end": 1588.56, "text": " I have a small company.", "tokens": [51464, 286, 362, 257, 1359, 2237, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 460, "seek": 156456, "start": 1588.56, "end": 1589.56, "text": " I think so.", "tokens": [51564, 286, 519, 370, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3034374912579854, "compression_ratio": 1.697560975609756, "no_speech_prob": 0.14682824909687042}, {"id": 461, "seek": 158956, "start": 1589.56, "end": 1595.56, "text": " And then I really, so my other background other than Ruby is Java.", "tokens": [50364, 400, 550, 286, 534, 11, 370, 452, 661, 3678, 661, 813, 19907, 307, 10745, 13, 50664], "temperature": 0.0, "avg_logprob": -0.16144597941431507, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.024278784170746803}, {"id": 462, "seek": 158956, "start": 1595.56, "end": 1600.56, "text": " And in a Java backtrace, you usually get the class and the method.", "tokens": [50664, 400, 294, 257, 10745, 646, 6903, 617, 11, 291, 2673, 483, 264, 1508, 293, 264, 3170, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16144597941431507, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.024278784170746803}, {"id": 463, "seek": 158956, "start": 1600.56, "end": 1605.56, "text": " And I've always found it easier to, in a lot of cases, easier to think about.", "tokens": [50914, 400, 286, 600, 1009, 1352, 309, 3571, 281, 11, 294, 257, 688, 295, 3331, 11, 3571, 281, 519, 466, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16144597941431507, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.024278784170746803}, {"id": 464, "seek": 158956, "start": 1605.56, "end": 1608.56, "text": " Like, oh, this is the class and this isn't the method on my class.", "tokens": [51164, 1743, 11, 1954, 11, 341, 307, 264, 1508, 293, 341, 1943, 380, 264, 3170, 322, 452, 1508, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16144597941431507, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.024278784170746803}, {"id": 465, "seek": 158956, "start": 1608.56, "end": 1610.56, "text": " Then just like the method names.", "tokens": [51314, 1396, 445, 411, 264, 3170, 5288, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16144597941431507, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.024278784170746803}, {"id": 466, "seek": 158956, "start": 1610.56, "end": 1618.56, "text": " Obviously, in Ruby, if you have a very well-structured code base, you know that app flash foo flash", "tokens": [51414, 7580, 11, 294, 19907, 11, 498, 291, 362, 257, 588, 731, 12, 372, 46847, 3089, 3096, 11, 291, 458, 300, 724, 7319, 726, 78, 7319, 51814], "temperature": 0.0, "avg_logprob": -0.16144597941431507, "compression_ratio": 1.6983471074380165, "no_speech_prob": 0.024278784170746803}, {"id": 467, "seek": 161856, "start": 1618.56, "end": 1620.56, "text": " dot rb is going to be foo bar.", "tokens": [50364, 5893, 367, 65, 307, 516, 281, 312, 726, 78, 2159, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 468, "seek": 161856, "start": 1620.56, "end": 1621.56, "text": " Like, you know.", "tokens": [50464, 1743, 11, 291, 458, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 469, "seek": 161856, "start": 1621.56, "end": 1625.56, "text": " But sometimes code is not actually that simple.", "tokens": [50514, 583, 2171, 3089, 307, 406, 767, 300, 2199, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 470, "seek": 161856, "start": 1625.56, "end": 1627.56, "text": " There are like, so near parts of the application.", "tokens": [50714, 821, 366, 411, 11, 370, 2651, 3166, 295, 264, 3861, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 471, "seek": 161856, "start": 1627.56, "end": 1631.56, "text": " So that's the part where I feel like this kind of thing comes in handy.", "tokens": [50814, 407, 300, 311, 264, 644, 689, 286, 841, 411, 341, 733, 295, 551, 1487, 294, 13239, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 472, "seek": 161856, "start": 1631.56, "end": 1633.56, "text": " And I kind of missed it from Java.", "tokens": [51014, 400, 286, 733, 295, 6721, 309, 490, 10745, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 473, "seek": 161856, "start": 1633.56, "end": 1637.56, "text": " And I had worked with Java tools and I was thinking like, I want this thing from Java.", "tokens": [51114, 400, 286, 632, 2732, 365, 10745, 3873, 293, 286, 390, 1953, 411, 11, 286, 528, 341, 551, 490, 10745, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 474, "seek": 161856, "start": 1637.56, "end": 1639.56, "text": " Can I have it?", "tokens": [51314, 1664, 286, 362, 309, 30, 51414], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 475, "seek": 161856, "start": 1639.56, "end": 1646.56, "text": " The, actually, other thing I can add is that because for methods in the Ruby VM, right now,", "tokens": [51414, 440, 11, 767, 11, 661, 551, 286, 393, 909, 307, 300, 570, 337, 7150, 294, 264, 19907, 18038, 11, 558, 586, 11, 51764], "temperature": 0.0, "avg_logprob": -0.1522275348042333, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.03460896387696266}, {"id": 476, "seek": 164656, "start": 1646.56, "end": 1650.56, "text": " Ruby never shows you, like, where array is in the VM.", "tokens": [50364, 19907, 1128, 3110, 291, 11, 411, 11, 689, 10225, 307, 294, 264, 18038, 13, 50564], "temperature": 0.0, "avg_logprob": -0.16942497721889563, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0014031220925971866}, {"id": 477, "seek": 164656, "start": 1650.56, "end": 1653.56, "text": " It kind of, it kind of blames you.", "tokens": [50564, 467, 733, 295, 11, 309, 733, 295, 888, 1632, 291, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16942497721889563, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0014031220925971866}, {"id": 478, "seek": 164656, "start": 1653.56, "end": 1656.56, "text": " I can show it very quickly.", "tokens": [50714, 286, 393, 855, 309, 588, 2661, 13, 50864], "temperature": 0.0, "avg_logprob": -0.16942497721889563, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0014031220925971866}, {"id": 479, "seek": 164656, "start": 1656.56, "end": 1664.56, "text": " If I go back to the way, way, way, way beginning, you can kind of see this here.", "tokens": [50864, 759, 286, 352, 646, 281, 264, 636, 11, 636, 11, 636, 11, 636, 2863, 11, 291, 393, 733, 295, 536, 341, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.16942497721889563, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0014031220925971866}, {"id": 480, "seek": 164656, "start": 1664.56, "end": 1671.56, "text": " So this thing, have you noticed that Ruby is lying there and there and there?", "tokens": [51264, 407, 341, 551, 11, 362, 291, 5694, 300, 19907, 307, 8493, 456, 293, 456, 293, 456, 30, 51614], "temperature": 0.0, "avg_logprob": -0.16942497721889563, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0014031220925971866}, {"id": 481, "seek": 164656, "start": 1671.56, "end": 1673.56, "text": " Is Kiehl defined in line three?", "tokens": [51614, 1119, 591, 414, 22950, 7642, 294, 1622, 1045, 30, 51714], "temperature": 0.0, "avg_logprob": -0.16942497721889563, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0014031220925971866}, {"id": 482, "seek": 164656, "start": 1673.56, "end": 1674.56, "text": " Is Collect defined in line three?", "tokens": [51714, 1119, 4586, 557, 7642, 294, 1622, 1045, 30, 51764], "temperature": 0.0, "avg_logprob": -0.16942497721889563, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0014031220925971866}, {"id": 483, "seek": 164656, "start": 1674.56, "end": 1675.56, "text": " Is it defined in line three?", "tokens": [51764, 1119, 309, 7642, 294, 1622, 1045, 30, 51814], "temperature": 0.0, "avg_logprob": -0.16942497721889563, "compression_ratio": 1.8226600985221675, "no_speech_prob": 0.0014031220925971866}, {"id": 484, "seek": 167556, "start": 1675.56, "end": 1676.56, "text": " No.", "tokens": [50364, 883, 13, 50414], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 485, "seek": 167556, "start": 1676.56, "end": 1682.56, "text": " So when you have a C func, like a C API or native API being called from Ruby,", "tokens": [50414, 407, 562, 291, 362, 257, 383, 1019, 66, 11, 411, 257, 383, 9362, 420, 8470, 9362, 885, 1219, 490, 19907, 11, 50714], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 486, "seek": 167556, "start": 1682.56, "end": 1686.56, "text": " Ruby lies and just basically decides, it's the caller.", "tokens": [50714, 19907, 9134, 293, 445, 1936, 14898, 11, 309, 311, 264, 48324, 13, 50914], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 487, "seek": 167556, "start": 1686.56, "end": 1687.56, "text": " So that's the thing.", "tokens": [50914, 407, 300, 311, 264, 551, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 488, "seek": 167556, "start": 1687.56, "end": 1693.56, "text": " And actually, at some point, I had to debug this really weird case where Ruby was calling inspect", "tokens": [50964, 400, 767, 11, 412, 512, 935, 11, 286, 632, 281, 24083, 341, 534, 3657, 1389, 689, 19907, 390, 5141, 15018, 51264], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 489, "seek": 167556, "start": 1693.56, "end": 1695.56, "text": " and I really didn't understand it.", "tokens": [51264, 293, 286, 534, 994, 380, 1223, 309, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 490, "seek": 167556, "start": 1695.56, "end": 1699.56, "text": " And I had a bunch of like, new inspect, new inspect, new inspect going into the VM.", "tokens": [51364, 400, 286, 632, 257, 3840, 295, 411, 11, 777, 15018, 11, 777, 15018, 11, 777, 15018, 516, 666, 264, 18038, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 491, "seek": 167556, "start": 1699.56, "end": 1701.56, "text": " And I really didn't understand it.", "tokens": [51564, 400, 286, 534, 994, 380, 1223, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 492, "seek": 167556, "start": 1701.56, "end": 1704.56, "text": " And I actually got out backtracing to just get that stack trace.", "tokens": [51664, 400, 286, 767, 658, 484, 646, 6903, 5615, 281, 445, 483, 300, 8630, 13508, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14061967950118215, "compression_ratio": 1.8661417322834646, "no_speech_prob": 0.030180009081959724}, {"id": 493, "seek": 170456, "start": 1704.56, "end": 1709.56, "text": " And I understood that it was like this weird case when you have a no methods error on like", "tokens": [50364, 400, 286, 7320, 300, 309, 390, 411, 341, 3657, 1389, 562, 291, 362, 257, 572, 7150, 6713, 322, 411, 50614], "temperature": 0.0, "avg_logprob": -0.15468821249717524, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.014450190588831902}, {"id": 494, "seek": 170456, "start": 1709.56, "end": 1713.56, "text": " some Ruby version, Ruby will actually call inspect on your objects.", "tokens": [50614, 512, 19907, 3037, 11, 19907, 486, 767, 818, 15018, 322, 428, 6565, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15468821249717524, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.014450190588831902}, {"id": 495, "seek": 170456, "start": 1713.56, "end": 1718.56, "text": " And in some cases, it will, after calling inspect, it will throw the inspect away.", "tokens": [50814, 400, 294, 512, 3331, 11, 309, 486, 11, 934, 5141, 15018, 11, 309, 486, 3507, 264, 15018, 1314, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15468821249717524, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.014450190588831902}, {"id": 496, "seek": 170456, "start": 1718.56, "end": 1721.56, "text": " Which was like, I was like, why is, whatever.", "tokens": [51064, 3013, 390, 411, 11, 286, 390, 411, 11, 983, 307, 11, 2035, 13, 51214], "temperature": 0.0, "avg_logprob": -0.15468821249717524, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.014450190588831902}, {"id": 497, "seek": 170456, "start": 1721.56, "end": 1726.56, "text": " But sometimes, like it gives you a lot more viewing, a lot more context if you know exactly", "tokens": [51214, 583, 2171, 11, 411, 309, 2709, 291, 257, 688, 544, 17480, 11, 257, 688, 544, 4319, 498, 291, 458, 2293, 51464], "temperature": 0.0, "avg_logprob": -0.15468821249717524, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.014450190588831902}, {"id": 498, "seek": 170456, "start": 1726.56, "end": 1729.56, "text": " where the methods are getting called and the classes.", "tokens": [51464, 689, 264, 7150, 366, 1242, 1219, 293, 264, 5359, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15468821249717524, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.014450190588831902}, {"id": 499, "seek": 170456, "start": 1729.56, "end": 1731.56, "text": " So here you would see process skill, et cetera.", "tokens": [51614, 407, 510, 291, 576, 536, 1399, 5389, 11, 1030, 11458, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15468821249717524, "compression_ratio": 1.7302158273381294, "no_speech_prob": 0.014450190588831902}, {"id": 500, "seek": 173156, "start": 1731.56, "end": 1734.56, "text": " So it's much clearer in my opinion.", "tokens": [50364, 407, 309, 311, 709, 26131, 294, 452, 4800, 13, 50514], "temperature": 0.0, "avg_logprob": -0.17305021887426977, "compression_ratio": 1.563265306122449, "no_speech_prob": 0.019140150398015976}, {"id": 501, "seek": 173156, "start": 1734.56, "end": 1735.56, "text": " Yeah.", "tokens": [50514, 865, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17305021887426977, "compression_ratio": 1.563265306122449, "no_speech_prob": 0.019140150398015976}, {"id": 502, "seek": 173156, "start": 1735.56, "end": 1740.56, "text": " Did you try to apply the same approach on heap dumps?", "tokens": [50564, 2589, 291, 853, 281, 3079, 264, 912, 3109, 322, 33591, 11430, 82, 30, 50814], "temperature": 0.0, "avg_logprob": -0.17305021887426977, "compression_ratio": 1.563265306122449, "no_speech_prob": 0.019140150398015976}, {"id": 503, "seek": 173156, "start": 1740.56, "end": 1745.56, "text": " Apparently, you're just inspecting the internal C structures.", "tokens": [50814, 16755, 11, 291, 434, 445, 15018, 278, 264, 6920, 383, 9227, 13, 51064], "temperature": 0.0, "avg_logprob": -0.17305021887426977, "compression_ratio": 1.563265306122449, "no_speech_prob": 0.019140150398015976}, {"id": 504, "seek": 173156, "start": 1745.56, "end": 1749.56, "text": " So at least theoretically, it should be possible to inspect the heap dumps.", "tokens": [51064, 407, 412, 1935, 29400, 11, 309, 820, 312, 1944, 281, 15018, 264, 33591, 11430, 82, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17305021887426977, "compression_ratio": 1.563265306122449, "no_speech_prob": 0.019140150398015976}, {"id": 505, "seek": 173156, "start": 1749.56, "end": 1750.56, "text": " Yes.", "tokens": [51264, 1079, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17305021887426977, "compression_ratio": 1.563265306122449, "no_speech_prob": 0.019140150398015976}, {"id": 506, "seek": 173156, "start": 1750.56, "end": 1756.56, "text": " So like, I'm not, it's been a while since I've looked at the JSON output of heap dump.", "tokens": [51314, 407, 411, 11, 286, 478, 406, 11, 309, 311, 668, 257, 1339, 1670, 286, 600, 2956, 412, 264, 31828, 5598, 295, 33591, 11430, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17305021887426977, "compression_ratio": 1.563265306122449, "no_speech_prob": 0.019140150398015976}, {"id": 507, "seek": 173156, "start": 1756.56, "end": 1759.56, "text": " So I'm not sure if it has this information, but it could.", "tokens": [51614, 407, 286, 478, 406, 988, 498, 309, 575, 341, 1589, 11, 457, 309, 727, 13, 51764], "temperature": 0.0, "avg_logprob": -0.17305021887426977, "compression_ratio": 1.563265306122449, "no_speech_prob": 0.019140150398015976}, {"id": 508, "seek": 175956, "start": 1759.56, "end": 1764.56, "text": " And actually, even if it doesn't have it, I don't think actually you don't need to go", "tokens": [50364, 400, 767, 11, 754, 498, 309, 1177, 380, 362, 309, 11, 286, 500, 380, 519, 767, 291, 500, 380, 643, 281, 352, 50614], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 509, "seek": 175956, "start": 1764.56, "end": 1766.56, "text": " as far as backtracing and accessing the internal stuff.", "tokens": [50614, 382, 1400, 382, 646, 6903, 5615, 293, 26440, 264, 6920, 1507, 13, 50714], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 510, "seek": 175956, "start": 1766.56, "end": 1770.56, "text": " Because you can do like objects.pac.each to implement your own heap dump.", "tokens": [50714, 1436, 291, 393, 360, 411, 6565, 13, 79, 326, 13, 68, 608, 281, 4445, 428, 1065, 33591, 11430, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 511, "seek": 175956, "start": 1770.56, "end": 1775.56, "text": " And when you do have xpac.each, you have access to the objects where things are defined.", "tokens": [50914, 400, 562, 291, 360, 362, 2031, 79, 326, 13, 68, 608, 11, 291, 362, 2105, 281, 264, 6565, 689, 721, 366, 7642, 13, 51164], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 512, "seek": 175956, "start": 1775.56, "end": 1778.56, "text": " I was talking about the dump files.", "tokens": [51164, 286, 390, 1417, 466, 264, 11430, 7098, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 513, "seek": 175956, "start": 1778.56, "end": 1780.56, "text": " The JSON file, yeah.", "tokens": [51314, 440, 31828, 3991, 11, 1338, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 514, "seek": 175956, "start": 1780.56, "end": 1783.56, "text": " I mean, not the JSONs that you can get from.", "tokens": [51414, 286, 914, 11, 406, 264, 31828, 82, 300, 291, 393, 483, 490, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 515, "seek": 175956, "start": 1783.56, "end": 1786.56, "text": " I mean like a crash, like a heap dump of a crash of the VM.", "tokens": [51564, 286, 914, 411, 257, 8252, 11, 411, 257, 33591, 11430, 295, 257, 8252, 295, 264, 18038, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 516, "seek": 175956, "start": 1786.56, "end": 1787.56, "text": " Yeah, yeah, it could.", "tokens": [51714, 865, 11, 1338, 11, 309, 727, 13, 51764], "temperature": 0.0, "avg_logprob": -0.18613466275792542, "compression_ratio": 1.7428571428571429, "no_speech_prob": 0.031798046082258224}, {"id": 517, "seek": 178756, "start": 1787.56, "end": 1788.56, "text": " It's the same thing.", "tokens": [50364, 467, 311, 264, 912, 551, 13, 50414], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 518, "seek": 178756, "start": 1788.56, "end": 1789.56, "text": " Like the structures are there.", "tokens": [50414, 1743, 264, 9227, 366, 456, 13, 50464], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 519, "seek": 178756, "start": 1789.56, "end": 1790.56, "text": " So you could do this.", "tokens": [50464, 407, 291, 727, 360, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 520, "seek": 178756, "start": 1790.56, "end": 1795.56, "text": " Like you could even do like a GDB script or whatever debugger script that accesses the same things", "tokens": [50514, 1743, 291, 727, 754, 360, 411, 257, 460, 27735, 5755, 420, 2035, 24083, 1321, 5755, 300, 2105, 279, 264, 912, 721, 50764], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 521, "seek": 178756, "start": 1795.56, "end": 1796.56, "text": " and reads it.", "tokens": [50764, 293, 15700, 309, 13, 50814], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 522, "seek": 178756, "start": 1796.56, "end": 1802.56, "text": " And actually just one thing, if you ever heard of the RbSpy profiler, which is like built by Julie Evans", "tokens": [50814, 400, 767, 445, 472, 551, 11, 498, 291, 1562, 2198, 295, 264, 497, 65, 50, 8200, 1740, 5441, 11, 597, 307, 411, 3094, 538, 18794, 30055, 51114], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 523, "seek": 178756, "start": 1802.56, "end": 1807.56, "text": " originally, like RbSpy is kind of doing the same from, but from the outside the process.", "tokens": [51114, 7993, 11, 411, 497, 65, 50, 8200, 307, 733, 295, 884, 264, 912, 490, 11, 457, 490, 264, 2380, 264, 1399, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 524, "seek": 178756, "start": 1807.56, "end": 1811.56, "text": " It's like, it's a rough process that it's like reading Ruby memory, reading those things", "tokens": [51364, 467, 311, 411, 11, 309, 311, 257, 5903, 1399, 300, 309, 311, 411, 3760, 19907, 4675, 11, 3760, 729, 721, 51564], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 525, "seek": 178756, "start": 1811.56, "end": 1812.56, "text": " and then showing information.", "tokens": [51564, 293, 550, 4099, 1589, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15807583752800436, "compression_ratio": 1.7821428571428573, "no_speech_prob": 0.06710751354694366}, {"id": 526, "seek": 181256, "start": 1812.56, "end": 1818.56, "text": " So I actually at some point tried to prototype this in RbSpy and then I just got bored and did something else.", "tokens": [50364, 407, 286, 767, 412, 512, 935, 3031, 281, 19475, 341, 294, 497, 65, 50, 8200, 293, 550, 286, 445, 658, 13521, 293, 630, 746, 1646, 13, 50664], "temperature": 0.0, "avg_logprob": -0.21422151999898476, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.06132418289780617}, {"id": 527, "seek": 181256, "start": 1818.56, "end": 1819.56, "text": " Yes.", "tokens": [50664, 1079, 13, 50714], "temperature": 0.0, "avg_logprob": -0.21422151999898476, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.06132418289780617}, {"id": 528, "seek": 181256, "start": 1819.56, "end": 1831.56, "text": " If we want to start looking into the C code of the VM, is there a documentation or somewhere we can start to not reading all of the code?", "tokens": [50714, 759, 321, 528, 281, 722, 1237, 666, 264, 383, 3089, 295, 264, 18038, 11, 307, 456, 257, 14333, 420, 4079, 321, 393, 722, 281, 406, 3760, 439, 295, 264, 3089, 30, 51314], "temperature": 0.0, "avg_logprob": -0.21422151999898476, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.06132418289780617}, {"id": 529, "seek": 181256, "start": 1831.56, "end": 1833.56, "text": " Yes.", "tokens": [51314, 1079, 13, 51414], "temperature": 0.0, "avg_logprob": -0.21422151999898476, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.06132418289780617}, {"id": 530, "seek": 181256, "start": 1833.56, "end": 1834.56, "text": " There is.", "tokens": [51414, 821, 307, 13, 51464], "temperature": 0.0, "avg_logprob": -0.21422151999898476, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.06132418289780617}, {"id": 531, "seek": 181256, "start": 1834.56, "end": 1841.56, "text": " There is actually a really nice repository that I think is like there is like a, I think it was built by", "tokens": [51464, 821, 307, 767, 257, 534, 1481, 25841, 300, 286, 519, 307, 411, 456, 307, 411, 257, 11, 286, 519, 309, 390, 3094, 538, 51814], "temperature": 0.0, "avg_logprob": -0.21422151999898476, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.06132418289780617}, {"id": 532, "seek": 184156, "start": 1842.56, "end": 1850.56, "text": " I'm going to say Koichi, like one of the core Ruby developers that have like a nice introduction to the VM.", "tokens": [50414, 286, 478, 516, 281, 584, 10509, 18543, 11, 411, 472, 295, 264, 4965, 19907, 8849, 300, 362, 411, 257, 1481, 9339, 281, 264, 18038, 13, 50814], "temperature": 0.0, "avg_logprob": -0.24352439533580433, "compression_ratio": 1.569672131147541, "no_speech_prob": 0.023665092885494232}, {"id": 533, "seek": 184156, "start": 1850.56, "end": 1858.56, "text": " I don't know exactly the name of the repo, but like email me and I have that in my bookmarks and I will send it to you because it exists.", "tokens": [50814, 286, 500, 380, 458, 2293, 264, 1315, 295, 264, 49040, 11, 457, 411, 3796, 385, 293, 286, 362, 300, 294, 452, 1446, 37307, 293, 286, 486, 2845, 309, 281, 291, 570, 309, 8198, 13, 51214], "temperature": 0.0, "avg_logprob": -0.24352439533580433, "compression_ratio": 1.569672131147541, "no_speech_prob": 0.023665092885494232}, {"id": 534, "seek": 184156, "start": 1858.56, "end": 1862.56, "text": " Actually, it might, like let me quickly do something.", "tokens": [51214, 5135, 11, 309, 1062, 11, 411, 718, 385, 2661, 360, 746, 13, 51414], "temperature": 0.0, "avg_logprob": -0.24352439533580433, "compression_ratio": 1.569672131147541, "no_speech_prob": 0.023665092885494232}, {"id": 535, "seek": 184156, "start": 1862.56, "end": 1864.56, "text": " Maybe there's a...", "tokens": [51414, 2704, 456, 311, 257, 485, 51514], "temperature": 0.0, "avg_logprob": -0.24352439533580433, "compression_ratio": 1.569672131147541, "no_speech_prob": 0.023665092885494232}, {"id": 536, "seek": 184156, "start": 1864.56, "end": 1866.56, "text": " A challenge.", "tokens": [51514, 316, 3430, 13, 51614], "temperature": 0.0, "avg_logprob": -0.24352439533580433, "compression_ratio": 1.569672131147541, "no_speech_prob": 0.023665092885494232}, {"id": 537, "seek": 184156, "start": 1866.56, "end": 1867.56, "text": " Yeah, it's that thing.", "tokens": [51614, 865, 11, 309, 311, 300, 551, 13, 51664], "temperature": 0.0, "avg_logprob": -0.24352439533580433, "compression_ratio": 1.569672131147541, "no_speech_prob": 0.023665092885494232}, {"id": 538, "seek": 184156, "start": 1867.56, "end": 1868.56, "text": " Exactly.", "tokens": [51664, 7587, 13, 51714], "temperature": 0.0, "avg_logprob": -0.24352439533580433, "compression_ratio": 1.569672131147541, "no_speech_prob": 0.023665092885494232}, {"id": 539, "seek": 184156, "start": 1868.56, "end": 1869.56, "text": " Ruby Act Challenge.", "tokens": [51714, 19907, 3251, 17517, 13, 51764], "temperature": 0.0, "avg_logprob": -0.24352439533580433, "compression_ratio": 1.569672131147541, "no_speech_prob": 0.023665092885494232}, {"id": 540, "seek": 186956, "start": 1869.56, "end": 1877.56, "text": " And I think in the backtracy repo, there's actually some links at the bottom and it might be there because I included in the repository a bunch of links of", "tokens": [50364, 400, 286, 519, 294, 264, 646, 6903, 2551, 49040, 11, 456, 311, 767, 512, 6123, 412, 264, 2767, 293, 309, 1062, 312, 456, 570, 286, 5556, 294, 264, 25841, 257, 3840, 295, 6123, 295, 50764], "temperature": 0.0, "avg_logprob": -0.15675718307495118, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.05703749135136604}, {"id": 541, "seek": 186956, "start": 1877.56, "end": 1880.56, "text": " interesting things I found to read this information.", "tokens": [50764, 1880, 721, 286, 1352, 281, 1401, 341, 1589, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15675718307495118, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.05703749135136604}, {"id": 542, "seek": 186956, "start": 1880.56, "end": 1885.56, "text": " And so if you go to the GitHub repo, the bottom, it might be there, but yes, it's Ruby Act Challenge.", "tokens": [50914, 400, 370, 498, 291, 352, 281, 264, 23331, 49040, 11, 264, 2767, 11, 309, 1062, 312, 456, 11, 457, 2086, 11, 309, 311, 19907, 3251, 17517, 13, 51164], "temperature": 0.0, "avg_logprob": -0.15675718307495118, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.05703749135136604}, {"id": 543, "seek": 186956, "start": 1885.56, "end": 1887.56, "text": " So Google it, you probably find it.", "tokens": [51164, 407, 3329, 309, 11, 291, 1391, 915, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15675718307495118, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.05703749135136604}, {"id": 544, "seek": 186956, "start": 1887.56, "end": 1889.56, "text": " Thank you.", "tokens": [51264, 1044, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15675718307495118, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.05703749135136604}, {"id": 545, "seek": 186956, "start": 1889.56, "end": 1890.56, "text": " Thanks, everyone.", "tokens": [51364, 2561, 11, 1518, 13, 51414], "temperature": 0.0, "avg_logprob": -0.15675718307495118, "compression_ratio": 1.6304347826086956, "no_speech_prob": 0.05703749135136604}, {"id": 546, "seek": 189056, "start": 1890.56, "end": 1891.56, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.40835118293762207, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.6817574501037598}], "language": "en"}