{"text": " Okay, hello everyone. We are here to present Mambo, a dynamic binary modification tool, and what's the better way to start the presentation than with a demo. So we are going to see a fairly complex application running on risk five within our system. So let's see it. So we are going to use it to learn something about the running binary. So here it is. Okay, so this is not our tool. So this is just an image viewer of Linux, and we generated this picture with one of these fancy AI tools so we can kind of promote our talk on LinkedIn. But what's really happening is that this image viewer is running under our tool that runs on risk five, and then we use it to find some information about the binary. So here we have a very simple tool that counts the number of threads that the application was used so we can see we have eight threads. So the application run under our tool on risk five, and then we can see that we have eight threads. Okay, but thanks for your first. I'm Igor. This is Alistair, and we are here from the University of Manchester. And as I said, we are going to talk about Mambo, which is a binary modification tool for risk architectures. Okay, but thanks. But okay, has anyone knows here what the dynamic binary modification is, or heard the term in the first place? Raise your hands if you did. Okay, wow. Okay, a few people. That's good. But you may haven't heard the term, but I'm pretty sure if you did any development, you used those frameworks. So the examples of the very known open source tools that do dynamic binary modification are Valgrind and KMU. So I'm pretty sure you use Valgrind and one of these tools, which is called Memcheck. And most of you probably are in the risk five room use KMU. So both Valgrind and KMU are dynamic binary modification framework, and they have a various tool built on top of that. So this is what Mambo is. Okay, but let's break down this term a bit. So what do I mean by dynamic binary modification? So dynamic is working at the runtime. So while the binary is running, the tool is working. Binary, we are working on the natively compiled code. So we don't need a source code, we just take a binary that was already compiled, and we can analyze it. And modification means that we can alter the application in a specific way. So we can add extra functionality, we can remove functionality, we can swap functionality. So there are two terms that are related to that. There is also dynamic binary instrumentation and translation. So instrumentation is basically a subset of modification. We just insert new functionality into the binary. So for example, if I want to do some sort of profiling, I can input some sort of counters into the running binary. And then translation is kind of an overlapping term. I can swap one, I say to another, so we could do it by modifying the binary, or there are more specialized tools that do the translation. So you are probably familiar with the Apple Rosetta, which translates now Intel to ARM when you got your new MacBook, but there is also the KMU also can act as a translator and usually use like that because they can translate one architecture to another. But now, so very few uses of the tools. So you can do program analysis, you can do error detection. So I'm pretty sure most of you are familiar with that use case, and there is a dynamic translation. OK, but now the question is why would you like to use Mambo if there are other tools? So the Mambo has been specifically optimized for risk 5, ARM, risk 5 64, ARM 32 and ARM 64. So in the stock, we are focusing on the ARM, on the risk 5, but we also have the version of the tool that can run on ARM. And the tool features low overhead, and to our knowledge, this is the only at the moment available DBM tools that has been optimized for risk 5. And the tool itself is fairly low in complexity, so if you would like to dive into the database, is around 20,000 line of code. So if you want to learn how it works, or if you want to modify the internals, the entry bar is not that high. And then it has a simple plugin API that allows you to write the architecture agnostic plugins. So you can write the plugin for risk 5 and later on you can deploy it on ARM if you would like. But it's worth to say it is not a toy. So we showed it before in the video that we can run fairly complex applications, so it's a full GUI tool from the ship with Inux. It could run stuff like GIMP or library office as well. So the tool itself is not a toy. OK, and if you are interested what the numbers would be roughly, so we evaluated it on the spec benchmark, so don't worry about too much about numbers. If you want, we can point you to the paper or we can talk about it later. But the idea is for like, FP benchmark, which is more like data processing. We get around 6% overhead if we just run the tool. We just run a framework without an extra tool built on top of it. And it's around 30% when we do more general purpose computing. So the baseline then, if you have no plugins enabled when you just run the tool under, if you run the binary on the RL tool, you get around 30% overhead. OK, so that was the brief introduction of what the dynamic binary modification is. And I'm going to briefly talk about how Mambo works internally. So I'm going to mention a few details, so it's useful if you would like to, I don't know, contribute to the internal of the tools that may help you. But the focus of the talk will be more the developer side, so I'm just going to talk about it as well. But I would like to just highlight a few bits and pieces so you will understand how Mambo works. OK, so this is the simplified diagram, and I'm going to talk you through the more important bits of that. So the instrumentation plugin API, so this is the part that Alistair is going to talk in much detail about, and I'm going to cover everything else. OK, so first of all, the first component is the elf loader. So if you run any binary on Linux, it has to be first loaded into memory, and then we can run it. So in case if we use our framework, so if we use Mambo, then the Mambo itself is loaded by Linux using its default loader, and then Mambo itself has to load the application, which we call a hosted application. So the Mambo has a custom build loader inside of it, which takes the application and loads it alongside the Mambo, so it can interact with it, it can modify it, and it can run it. So that's the first element. The second element is instruction and decoder. So while we execute the application, we have to modify some of the instruction. We have to know what instruction we are copying and scanning and modifying, so this is what the instruction and decoder and decoder does. So you may be familiar with the custom project, which is like a fully fledged assembler. This is a very simple module that basically takes a text specification of the instruction and what the fields it has and uses some rubbish scripts to generate the C functions to encode any code fields, and this is what Mambo uses because it's fairly simple and low overhead, and that's something that we want inside the tool that runs dynamically. Okay, and now the two most important parts of Mambo, it will be a code scanner and the dispatcher and the code cache. So let me maybe first talk about what the code cache is. So we have our Mambo, and the Mambo uses the loader to load the binary into a memory. And now we want to run this binary, but we also want to modify it. So if we just load the binary and run it, then it will run as it would be before. So that's why where the code cache comes in. So this is not the instruction cache that we have hardware. This is just allocated space in memory that we call the code cache. And now the Mambo scanner will copy the instruction from the binary that we loaded into memory into the code cache. And in the process of copying those instructions, we can introduce any functionality, we can remove some instructions, we can replace some instructions. So the scanner is responsible for copying instructions from the binary that we loaded into the code cache. And then the code cache is what will actually execute on the processor. And then we have a dispatcher, which is responsible for actually running the code. So the scanner will copy a basic block, and then it will say, I finished copying a basic block. Now I go to the dispatcher and dispatcher will start the basic block, and it will actually natively execute it on a RISC-5 processor. And then when we finish the basic block, the control will return back to Mambo to scan the other basic block, and then again we'll go back to the dispatcher and dispatcher will execute the next basic block, and it will have this back and forth. And if the code is ready to the code cache, we don't have to scan it so we can directly execute another basic block without scanning. So this is very simplified. If we did it that way, it would be very, very slow. So there is a number of optimizations there. So for Mambo to stay in the code cache as long as possible. So it does scan things ahead of time and tries to guess what would be the next thing it jumps to and then if it can do it, then it can stay within the code cache. Otherwise it has to go back to the scanner and back to the dispatcher if it doesn't know what the next basic block is. Okay, and this is what I was talking about. So when we execute the application, we have a single process with two binaries in it and two contexts. So there is a Mambo context that scans instruction, and then the dispatcher changes from the Mambo context into the application context. So it will save the state of the Mambo, jump to the code cache, execute the code cache as long as it can, and then if it cannot find the next target in the code cache, it will go back to Mambo. So it will save the application state, restore the state of Mambo, and then the scanner will kick in and then it will go back and forth. So this is like a principle of it, of how it works. Okay, so the dispatcher and the scanner are like the two main elements in Mambo that allow us to do the modification and execute the code. And the last thing is the kernel interaction. So on top of just executing the application, the framework itself has to interact with the Linux kernel, so we have to handle and pass signals and handle and pass system calls. So this is important because for signals, if there is a signal coming from the operating system, it will first hit our framework, so it will first hit Mambo. But if you don't want Mambo to handle the signals, in many cases you want to pass it to the application because the application may have a handler installed to handle this signal. And in the same way, if there is a system call, so if the hosted binary is doing a system call, for example, let's say a thread creation, Mambo needs to know that it created a thread because it has to track every thread that gets created. So the Mambo has to learn first what was the system call and only then it can pass it to the Linux kernel. So that's also, I talked briefly about the architecture of Mambo, so we had the L flow there, we had the instruction encoder and encoder, two main elements, one free management scanner, dispatcher and the code cache, and then we had a bit about the handling signals and system calls. So that's, if you are going to just use Mambo to write your plugins and the tools probably you don't have to know all of that, it may help to know how Mambo works. And if you want to contribute to the internals of it, that hopefully will give you some rough idea how the system works. But now the bit probably people are more interested in is how we can write our own plugins, our own tools within our framework. And for that I will pass the microphone to Alistair. Hi, so yes, I will talk to you about the API, this is how you take Mambo and you build your own tool on top of it. So this is where it actually gets really useful. So we've mentioned use cases but it's worth repeating. We're talking about things like code analysis so you can build a control flow graph, you can generate new functionality, you can instrument code, you can analyze it, you can re-implement library functions, you can patch library functions, you can do all sorts because you can modify this running binary. So Mambo's API exposes events, so it's event driven. So you as the user of this API define functions which you register as callbacks on these events. And when one of these events is encountered Mambo will trigger the callback and execute the function that you registered to it. So there are two categories of events, there's hosted application, runtime events. So these are events that happen to the hosted application as it's being executed in the code cache. So here we're talking things like system calls, thread creation and we have Mambo scan time events so these happen as Mambo is scanning instructions from the loaded elf into the code cache. So this is something like pre-instruction, post-instruction, you can do stuff with these callbacks. So as I was mentioning pre-instruction, post-instruction, this kind of gives you an idea, you can insert something before and after an instruction, before and after a basic block, before and after a thread. So you can see it can be very, very fine grained or it can be at a high level of abstraction and of course before and after an application runs. So taking all of this, you see a slightly chopped off diagram there but it kind of gives you an idea of the order in which these callbacks will be executed. So at the very highest level, at the very start you have the initialization function which is where you set up a plugin and then you'll have pre-thread so that's quite high level, pre-basic block, you also have pre-function and so it kind of gets narrower and narrower and then it kind of expands out after these things have executed. So this is something that's important to bear in mind. So how do you actually use Mambo's API? I'm going to talk to you about the following things. So the functions that you'll need to register your callbacks, the functions that perform code analysis, the functions that perform instrumentation, so how you actually emit code into the code cache and then there are various helper functions which you can use. So the first thing you need to do is initialize your plugin and this is done in the plugin constructor function and there are two main things that you do here. You create a Mambo context which is a global data structure which holds the current state of Mambo and also the application that's being executed by Mambo and pretty much all of Mambo's helper functions will use this context to get for instance the current instruction that you're looking at. And this is also where you'll register callbacks. So for instance here we have Mambo register pre-instruction callback. So before an instruction is actually scanned into the code cache something that you register here will execute. And to register callbacks it follows this signature so you have Mambo register then you have an event time so that's pre or post something happening then you have the event so this can be Mambo pre-instruction callback. So it's quite easy to remember that way. So you've registered your callback so let's say we're building a plugin that counts the number of branches that are executed. So you've registered a pre-instruction callback. So now Mambo's scanning things and your pre-instruction callback has executed. So one of the first things you're going to want to do is use a code analysis function. You're going to want to know which instruction am I looking at. So you have things like Mambo get branch type, Mambo get condition which would for instance give you the condition of the branch that you're looking at if it's a conditional branch. So these give you information that you can use and choose to act on. So the function signature of these analysis functions follows Mambo action so that would be get set is and then the information. So Mambo get function type, Mambo get branch type even relating back to our example would get you the type of the branch that you're looking at. So bringing all of this together into a simplified plugin we have the constructor where we initialize context and we register a pre-instruction callback and when that's executed we get the branch type and then based on what type of branch it is we do something. It's also worth pointing out that the branch types that we're looking at here are generic so that's how it is portable between architectures. So you've found out you're looking at a branch. Now you're going to actually want to emit instrumentation. So this is instructions that you can put into the code cache to do something. So for instance we have emit64 counter increments so this is how you can tell Mambo to emit the instructions that you need to increment a counter. You can emit pushes, you can emit pops, you can set registers so you can do all sorts of things and there are two main types. You have emit instructions so that would be for example emit increment so that's more portable because we implement the backend tell Mambo which instructions to emit into the code cache for that. And then we have the more architecture dependent ones which are emit risk five instructions so this is when you know exactly what you are trying to achieve with the plugin. Let's say you need to emit an arithmetic instruction. You can do that until Mambo emit this arithmetic instruction. The only drawback to this is that it's riskier doing that. You have to make sure that you save and restore registers and that kind of thing which we do for you in the safer generic ones. And then finally you have additional helper functions so for instance Mambo will expose a hash table which is really useful for when you're instrumenting code and you have lots of data to associate with different addresses. So we have hash tables, we have Mambo allocator so these will help you to write your plugin. And then finally it can be very difficult to get your head around this. It took me a while to fully understand it and that is the difference between scan time and run time. So when we talk about scan time we talk about something that happens once when Mambo is scanning something and run time is when that scanned code is executing in the code cache and the reason this difference matters is if you are for instance counting the number of branches that are executed at scan time you need to emit instructions into the code cache to increment a counter so that when that code is executing you get the actual number of instructions, times that instruction is executed. Okay so it's time for an example. The code I'm about to show you can find on the Mambo repository in the plugins directory and it's time for a live demo. So I will be running Vim under Mambo on risk 5 to show you the source code of the branch counter plugin which is something that you can run and is in the Mambo repository and whilst running Vim I will also have enabled the branch counter plugin so you can see it in action. Sounds very convoluted I know. Okay so here we run Mambo and I don't know how well you can actually see that but... Command shift plus. Oh command shift. Hooray. Do we need more or? Bigger. Oh bigger. Even bigger. I'm trying to call it that wrong. Okay yeah. Okay so we start with the constructor function which is where we set up Mambo's context and we're registering four callbacks so we have a pre-instruction callback, we have a pre-thread callback, a post-thread callback and an exit callback and the order that these will actually be executed in will go pre-thread, pre-instruction, post-thread and then exit. So I'll start with the pre-thread. So in the... Let's hear some more. Oh yeah yeah yeah. In the pre-thread handler we're initializing the counters for that thread so we have a direct branch counter, indirect branch counter and return branch counter. The reason why we have this per thread is because each thread has its own code cache and therefore its own numbers of branches that we'll be executing which is why for each thread that we create we initialize its own set of counters. And then we have a pre-instruction callback. So for each instruction that's executed we're checking if this is a branch, we're getting the branch type and then for each of the types of branches, the return branch, the direct branch and the indirect branch we select the correct counter for that thread and we then emit a counter increment into the code cache so that the correct counter will be incremented. Okay so at this point Vim is running away, running away and when we close it the post-thread handler will first be executed and this will say okay so this thread is terminating let's take this thread count for each type of branch and add it to the global total and it does that atomically and then finally we have, oh yeah the exit handler which just says okay this application has now terminated let's print out the global totals which are composed of the individual threads. Since Vim is a single threaded application we'll get one thread and one total which you can see there. Okay and now I'll quickly talk to you about some lessons that we learned from porting Mantlot to risk 5 because it was originally written for ARM so there are differences that we had to take into consideration. So the first thing was the range of branches. So for conditional branches and direct jumps they have a range of branches and they have a range of branches. So for conditional branches and direct jumps they have quite a limited range which is less of an issue on ARM because they have a much longer range. Why this matters is because in a compiled binary obviously the offsets will be fine because that's how it was compiled. When you take that code and you put it into a code cache it's done as it's needed and so the ordering of that code may be different and therefore the offsets may be different and exceed the offsets of the original binary. And so we may have to replace these instructions with instructions that have a longer range. So with a conditional branch we may have to insert an additional jump instruction that is triggered when the branch condition is true to extend the range of that branch. And same for a direct jump it may need to be replaced with instructions that first load the address into a register and then take a register jump. We also have load reserve and store conditional. You can only have a limited number of instructions between these two instructions and you can't also have a limited number of instructions between loads and stores in between otherwise the lock will fail. This matters in dynamic binary modification because we can insert additional instructions so we have to place limits on what you can do with atomic instructions in plugins and with other optimizations implemented we have to be mindful of this limitation. And finally we have the thread pointer register X4. There isn't a dedicated register in the general register file on ARM that does this. And so when we create a new thread Mambo will save and restore the context by saving and restoring all registers. We need to make sure that the thread pointer actually points to the newly allocated thread local storage otherwise there will be a world of pain which we found out. Okay so in terms of road map where we take it from here we of course want to foster our open source community. We really welcome collaborations and contributions not only plugins but also any contributions to the main internals of Mambo. As part of this we are currently in the process of improving documentation and also developing more tools to kind of give people a flavor of what's possible. So for instance we're currently porting Mambo's Memchecker from ARM to RISC 5. We also are trying our very best to keep up with all of the new RISC 5 and also ARM extensions that keep appearing. We also have various research projects ongoing that make use of Mambo. And probably goes without saying since this is a talk at FOSTEM but Mambo is open source on GitHub with an Apache 2.0 license so definitely check it out. And we'd like to thank our sponsors. So yeah any questions? Yeah. Oh yeah yeah. So you're asking how do we handle pointers when we scan code from the binary into the code cache. Those pointers are still pointing into the binary. So we actually in the scanner we have instructions like that specifically. So for instance if we take a branch instruction the first time that branch instruction is executed it will point to Mambo's dispatcher which will perform a lookup. We then have optimizations which will replace that branch instruction with a direct branch to the next basic block. And the same for loads and stores. We update these to point to the new location. So basic block is a single pointer. Oh sorry. Yeah I'll repeat the question. So what is a basic block? A basic block is a single entry single exit point. So you essentially ends when there's a branch to somewhere else. At the back. Yeah so in a general case. Oh I keep doing this. So how often is the load reserve store conditional an issue. We find it's not that much of an issue. Most applications won't have an issue with it. It becomes more of an issue when you have plugins that do something in between. So for instance if you're counting a specific type of instruction that may occur between these two instructions and you emit stuff into the code cache you may end up exceeding this 16 instruction limit. You mentioned translation early in your presentation. Does Mambo support running ARM on the RISC-5 machine and vice versa? So does Mambo support translation? Not currently. You need to be on that architecture. What happens if I try to run a just-in-time compiler under a Mambo? What happens with a just-in-time compiler? I'm not sure. So the Mambo is designed to support self-modifying code. So basically what it does, you have some code in the code cache and just in time compiler recompile it so basically the cache will be flushed and then it will re-scan it again. So it carries some performance penalty but it will react to the things like that and it will re-scan the code and put the new version into the code cache. So it does support self-modifying code. It should be. Hopefully. This isn't tested on RISC-5 because most browsers don't seem to be ported. Any other questions? So what do we interested in about RISC-5 applications from plugins? We're interested in building tools that kind of perform things like memory checking, data race detectors, that kind of thing. So tools that are very useful to people developing software on RISC-5 to kind of help them do that. So just out of it, so we haven't mentioned it on the slides but we also have some research. That was for R but done on the architectural simulation, so kind of code design of accelerators and CPUs on the SOC system. So there's some stuff going on but yeah. So at the moment I think for RISC-5 the biggest push was to get the base system to work and now we are exploring on RISC-5 what we can actually do with the system. Any other questions? Does it update sections that refer to pieces of code like jump tables, different things between basic blocks? So the question is about does MAMBO support the jump tables? How does it do? So we do not rewrite any of the sections of the original binary so basically MAMBO works in a way on demand. So we have a jump that uses a jump table. MAMBO will try to remember the most recent jumps but then if you miss it you have to go back to the scanner, scan the code again and then go to the dispatcher. So we are going to use the addresses that are already there and then we are going to keep the translation of some addresses in the code cache but none of them. But we are not going to rewrite the actual jump tables in the data section of the binary. Any more questions? Okay so the question is about the data-raised detector and whether we could implement some sort of stepping back within MAMBO. So the data detection is in the early stages but you will not have such a verbose functionality as RR or GDB replay or whatever but what you can do in the very easy way when you scan the basic blocks. So you would have to probably have some sort of we don't have functionality to detect the data-raised. But let's say in the general case if you want to inspect what's happening you can introduce a trap instruction into the code cache and then you can run under GDB and then you will trap the instruction and you can inspect what's in the basic block after the translation and you could try to look what was in there before the translation. So you can do some sort of things in the manual but there is no automated way to replay and go back in time. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.32, "text": " Okay, hello everyone.", "tokens": [50364, 1033, 11, 7751, 1518, 13, 50830], "temperature": 0.0, "avg_logprob": -0.2690771920340402, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.2197708785533905}, {"id": 1, "seek": 0, "start": 9.32, "end": 14.88, "text": " We are here to present Mambo, a dynamic binary modification tool, and what's the better way", "tokens": [50830, 492, 366, 510, 281, 1974, 19899, 1763, 11, 257, 8546, 17434, 26747, 2290, 11, 293, 437, 311, 264, 1101, 636, 51108], "temperature": 0.0, "avg_logprob": -0.2690771920340402, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.2197708785533905}, {"id": 2, "seek": 0, "start": 14.88, "end": 17.32, "text": " to start the presentation than with a demo.", "tokens": [51108, 281, 722, 264, 5860, 813, 365, 257, 10723, 13, 51230], "temperature": 0.0, "avg_logprob": -0.2690771920340402, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.2197708785533905}, {"id": 3, "seek": 0, "start": 17.32, "end": 24.04, "text": " So we are going to see a fairly complex application running on risk five within our system.", "tokens": [51230, 407, 321, 366, 516, 281, 536, 257, 6457, 3997, 3861, 2614, 322, 3148, 1732, 1951, 527, 1185, 13, 51566], "temperature": 0.0, "avg_logprob": -0.2690771920340402, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.2197708785533905}, {"id": 4, "seek": 0, "start": 24.04, "end": 25.04, "text": " So let's see it.", "tokens": [51566, 407, 718, 311, 536, 309, 13, 51616], "temperature": 0.0, "avg_logprob": -0.2690771920340402, "compression_ratio": 1.4943820224719102, "no_speech_prob": 0.2197708785533905}, {"id": 5, "seek": 2504, "start": 25.04, "end": 30.56, "text": " So we are going to use it to learn something about the running binary.", "tokens": [50364, 407, 321, 366, 516, 281, 764, 309, 281, 1466, 746, 466, 264, 2614, 17434, 13, 50640], "temperature": 0.0, "avg_logprob": -0.2376412930695907, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.07378274202346802}, {"id": 6, "seek": 2504, "start": 30.56, "end": 32.04, "text": " So here it is.", "tokens": [50640, 407, 510, 309, 307, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2376412930695907, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.07378274202346802}, {"id": 7, "seek": 2504, "start": 32.04, "end": 35.04, "text": " Okay, so this is not our tool.", "tokens": [50714, 1033, 11, 370, 341, 307, 406, 527, 2290, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2376412930695907, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.07378274202346802}, {"id": 8, "seek": 2504, "start": 35.04, "end": 40.44, "text": " So this is just an image viewer of Linux, and we generated this picture with one of these", "tokens": [50864, 407, 341, 307, 445, 364, 3256, 16767, 295, 18734, 11, 293, 321, 10833, 341, 3036, 365, 472, 295, 613, 51134], "temperature": 0.0, "avg_logprob": -0.2376412930695907, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.07378274202346802}, {"id": 9, "seek": 2504, "start": 40.44, "end": 45.0, "text": " fancy AI tools so we can kind of promote our talk on LinkedIn.", "tokens": [51134, 10247, 7318, 3873, 370, 321, 393, 733, 295, 9773, 527, 751, 322, 20657, 13, 51362], "temperature": 0.0, "avg_logprob": -0.2376412930695907, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.07378274202346802}, {"id": 10, "seek": 2504, "start": 45.0, "end": 50.36, "text": " But what's really happening is that this image viewer is running under our tool that", "tokens": [51362, 583, 437, 311, 534, 2737, 307, 300, 341, 3256, 16767, 307, 2614, 833, 527, 2290, 300, 51630], "temperature": 0.0, "avg_logprob": -0.2376412930695907, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.07378274202346802}, {"id": 11, "seek": 5036, "start": 50.36, "end": 55.56, "text": " runs on risk five, and then we use it to find some information about the binary.", "tokens": [50364, 6676, 322, 3148, 1732, 11, 293, 550, 321, 764, 309, 281, 915, 512, 1589, 466, 264, 17434, 13, 50624], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 12, "seek": 5036, "start": 55.56, "end": 59.72, "text": " So here we have a very simple tool that counts the number of threads that the application", "tokens": [50624, 407, 510, 321, 362, 257, 588, 2199, 2290, 300, 14893, 264, 1230, 295, 19314, 300, 264, 3861, 50832], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 13, "seek": 5036, "start": 59.72, "end": 62.8, "text": " was used so we can see we have eight threads.", "tokens": [50832, 390, 1143, 370, 321, 393, 536, 321, 362, 3180, 19314, 13, 50986], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 14, "seek": 5036, "start": 62.8, "end": 66.72, "text": " So the application run under our tool on risk five, and then we can see that we have", "tokens": [50986, 407, 264, 3861, 1190, 833, 527, 2290, 322, 3148, 1732, 11, 293, 550, 321, 393, 536, 300, 321, 362, 51182], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 15, "seek": 5036, "start": 66.72, "end": 67.72, "text": " eight threads.", "tokens": [51182, 3180, 19314, 13, 51232], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 16, "seek": 5036, "start": 67.72, "end": 69.28, "text": " Okay, but thanks for your first.", "tokens": [51232, 1033, 11, 457, 3231, 337, 428, 700, 13, 51310], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 17, "seek": 5036, "start": 69.28, "end": 70.28, "text": " I'm Igor.", "tokens": [51310, 286, 478, 40356, 13, 51360], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 18, "seek": 5036, "start": 70.28, "end": 74.12, "text": " This is Alistair, and we are here from the University of Manchester.", "tokens": [51360, 639, 307, 967, 468, 1246, 11, 293, 321, 366, 510, 490, 264, 3535, 295, 27180, 13, 51552], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 19, "seek": 5036, "start": 74.12, "end": 77.92, "text": " And as I said, we are going to talk about Mambo, which is a binary modification tool", "tokens": [51552, 400, 382, 286, 848, 11, 321, 366, 516, 281, 751, 466, 19899, 1763, 11, 597, 307, 257, 17434, 26747, 2290, 51742], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 20, "seek": 5036, "start": 77.92, "end": 79.44, "text": " for risk architectures.", "tokens": [51742, 337, 3148, 6331, 1303, 13, 51818], "temperature": 0.0, "avg_logprob": -0.21050095724892784, "compression_ratio": 1.8453608247422681, "no_speech_prob": 0.07460711151361465}, {"id": 21, "seek": 7944, "start": 79.44, "end": 81.67999999999999, "text": " Okay, but thanks.", "tokens": [50364, 1033, 11, 457, 3231, 13, 50476], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 22, "seek": 7944, "start": 81.67999999999999, "end": 86.28, "text": " But okay, has anyone knows here what the dynamic binary modification is, or heard the term", "tokens": [50476, 583, 1392, 11, 575, 2878, 3255, 510, 437, 264, 8546, 17434, 26747, 307, 11, 420, 2198, 264, 1433, 50706], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 23, "seek": 7944, "start": 86.28, "end": 87.28, "text": " in the first place?", "tokens": [50706, 294, 264, 700, 1081, 30, 50756], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 24, "seek": 7944, "start": 87.28, "end": 89.28, "text": " Raise your hands if you did.", "tokens": [50756, 30062, 428, 2377, 498, 291, 630, 13, 50856], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 25, "seek": 7944, "start": 89.28, "end": 90.28, "text": " Okay, wow.", "tokens": [50856, 1033, 11, 6076, 13, 50906], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 26, "seek": 7944, "start": 90.28, "end": 91.28, "text": " Okay, a few people.", "tokens": [50906, 1033, 11, 257, 1326, 561, 13, 50956], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 27, "seek": 7944, "start": 91.28, "end": 92.28, "text": " That's good.", "tokens": [50956, 663, 311, 665, 13, 51006], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 28, "seek": 7944, "start": 92.28, "end": 97.4, "text": " But you may haven't heard the term, but I'm pretty sure if you did any development, you", "tokens": [51006, 583, 291, 815, 2378, 380, 2198, 264, 1433, 11, 457, 286, 478, 1238, 988, 498, 291, 630, 604, 3250, 11, 291, 51262], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 29, "seek": 7944, "start": 97.4, "end": 99.44, "text": " used those frameworks.", "tokens": [51262, 1143, 729, 29834, 13, 51364], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 30, "seek": 7944, "start": 99.44, "end": 104.75999999999999, "text": " So the examples of the very known open source tools that do dynamic binary modification", "tokens": [51364, 407, 264, 5110, 295, 264, 588, 2570, 1269, 4009, 3873, 300, 360, 8546, 17434, 26747, 51630], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 31, "seek": 7944, "start": 104.75999999999999, "end": 107.08, "text": " are Valgrind and KMU.", "tokens": [51630, 366, 7188, 861, 471, 293, 591, 44, 52, 13, 51746], "temperature": 0.0, "avg_logprob": -0.22774724491306994, "compression_ratio": 1.6614173228346456, "no_speech_prob": 0.031636469066143036}, {"id": 32, "seek": 10708, "start": 107.08, "end": 111.96, "text": " So I'm pretty sure you use Valgrind and one of these tools, which is called Memcheck.", "tokens": [50364, 407, 286, 478, 1238, 988, 291, 764, 7188, 861, 471, 293, 472, 295, 613, 3873, 11, 597, 307, 1219, 8731, 15723, 13, 50608], "temperature": 0.0, "avg_logprob": -0.24055364110448338, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07644867897033691}, {"id": 33, "seek": 10708, "start": 111.96, "end": 114.84, "text": " And most of you probably are in the risk five room use KMU.", "tokens": [50608, 400, 881, 295, 291, 1391, 366, 294, 264, 3148, 1732, 1808, 764, 591, 44, 52, 13, 50752], "temperature": 0.0, "avg_logprob": -0.24055364110448338, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07644867897033691}, {"id": 34, "seek": 10708, "start": 114.84, "end": 123.56, "text": " So both Valgrind and KMU are dynamic binary modification framework, and they have a various", "tokens": [50752, 407, 1293, 7188, 861, 471, 293, 591, 44, 52, 366, 8546, 17434, 26747, 8388, 11, 293, 436, 362, 257, 3683, 51188], "temperature": 0.0, "avg_logprob": -0.24055364110448338, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07644867897033691}, {"id": 35, "seek": 10708, "start": 123.56, "end": 125.03999999999999, "text": " tool built on top of that.", "tokens": [51188, 2290, 3094, 322, 1192, 295, 300, 13, 51262], "temperature": 0.0, "avg_logprob": -0.24055364110448338, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07644867897033691}, {"id": 36, "seek": 10708, "start": 125.03999999999999, "end": 126.84, "text": " So this is what Mambo is.", "tokens": [51262, 407, 341, 307, 437, 19899, 1763, 307, 13, 51352], "temperature": 0.0, "avg_logprob": -0.24055364110448338, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07644867897033691}, {"id": 37, "seek": 10708, "start": 126.84, "end": 129.6, "text": " Okay, but let's break down this term a bit.", "tokens": [51352, 1033, 11, 457, 718, 311, 1821, 760, 341, 1433, 257, 857, 13, 51490], "temperature": 0.0, "avg_logprob": -0.24055364110448338, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07644867897033691}, {"id": 38, "seek": 10708, "start": 129.6, "end": 134.76, "text": " So what do I mean by dynamic binary modification?", "tokens": [51490, 407, 437, 360, 286, 914, 538, 8546, 17434, 26747, 30, 51748], "temperature": 0.0, "avg_logprob": -0.24055364110448338, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.07644867897033691}, {"id": 39, "seek": 13476, "start": 134.76, "end": 137.23999999999998, "text": " So dynamic is working at the runtime.", "tokens": [50364, 407, 8546, 307, 1364, 412, 264, 34474, 13, 50488], "temperature": 0.0, "avg_logprob": -0.1620509745710987, "compression_ratio": 1.886178861788618, "no_speech_prob": 0.022803885862231255}, {"id": 40, "seek": 13476, "start": 137.23999999999998, "end": 141.48, "text": " So while the binary is running, the tool is working.", "tokens": [50488, 407, 1339, 264, 17434, 307, 2614, 11, 264, 2290, 307, 1364, 13, 50700], "temperature": 0.0, "avg_logprob": -0.1620509745710987, "compression_ratio": 1.886178861788618, "no_speech_prob": 0.022803885862231255}, {"id": 41, "seek": 13476, "start": 141.48, "end": 144.51999999999998, "text": " Binary, we are working on the natively compiled code.", "tokens": [50700, 363, 4066, 11, 321, 366, 1364, 322, 264, 8470, 356, 36548, 3089, 13, 50852], "temperature": 0.0, "avg_logprob": -0.1620509745710987, "compression_ratio": 1.886178861788618, "no_speech_prob": 0.022803885862231255}, {"id": 42, "seek": 13476, "start": 144.51999999999998, "end": 148.23999999999998, "text": " So we don't need a source code, we just take a binary that was already compiled, and we", "tokens": [50852, 407, 321, 500, 380, 643, 257, 4009, 3089, 11, 321, 445, 747, 257, 17434, 300, 390, 1217, 36548, 11, 293, 321, 51038], "temperature": 0.0, "avg_logprob": -0.1620509745710987, "compression_ratio": 1.886178861788618, "no_speech_prob": 0.022803885862231255}, {"id": 43, "seek": 13476, "start": 148.23999999999998, "end": 149.23999999999998, "text": " can analyze it.", "tokens": [51038, 393, 12477, 309, 13, 51088], "temperature": 0.0, "avg_logprob": -0.1620509745710987, "compression_ratio": 1.886178861788618, "no_speech_prob": 0.022803885862231255}, {"id": 44, "seek": 13476, "start": 149.23999999999998, "end": 153.39999999999998, "text": " And modification means that we can alter the application in a specific way.", "tokens": [51088, 400, 26747, 1355, 300, 321, 393, 11337, 264, 3861, 294, 257, 2685, 636, 13, 51296], "temperature": 0.0, "avg_logprob": -0.1620509745710987, "compression_ratio": 1.886178861788618, "no_speech_prob": 0.022803885862231255}, {"id": 45, "seek": 13476, "start": 153.39999999999998, "end": 159.07999999999998, "text": " So we can add extra functionality, we can remove functionality, we can swap functionality.", "tokens": [51296, 407, 321, 393, 909, 2857, 14980, 11, 321, 393, 4159, 14980, 11, 321, 393, 18135, 14980, 13, 51580], "temperature": 0.0, "avg_logprob": -0.1620509745710987, "compression_ratio": 1.886178861788618, "no_speech_prob": 0.022803885862231255}, {"id": 46, "seek": 13476, "start": 159.07999999999998, "end": 162.23999999999998, "text": " So there are two terms that are related to that.", "tokens": [51580, 407, 456, 366, 732, 2115, 300, 366, 4077, 281, 300, 13, 51738], "temperature": 0.0, "avg_logprob": -0.1620509745710987, "compression_ratio": 1.886178861788618, "no_speech_prob": 0.022803885862231255}, {"id": 47, "seek": 16224, "start": 162.24, "end": 165.76000000000002, "text": " There is also dynamic binary instrumentation and translation.", "tokens": [50364, 821, 307, 611, 8546, 17434, 7198, 399, 293, 12853, 13, 50540], "temperature": 0.0, "avg_logprob": -0.16123842985733697, "compression_ratio": 1.7992424242424243, "no_speech_prob": 0.08880908787250519}, {"id": 48, "seek": 16224, "start": 165.76000000000002, "end": 168.8, "text": " So instrumentation is basically a subset of modification.", "tokens": [50540, 407, 7198, 399, 307, 1936, 257, 25993, 295, 26747, 13, 50692], "temperature": 0.0, "avg_logprob": -0.16123842985733697, "compression_ratio": 1.7992424242424243, "no_speech_prob": 0.08880908787250519}, {"id": 49, "seek": 16224, "start": 168.8, "end": 171.72, "text": " We just insert new functionality into the binary.", "tokens": [50692, 492, 445, 8969, 777, 14980, 666, 264, 17434, 13, 50838], "temperature": 0.0, "avg_logprob": -0.16123842985733697, "compression_ratio": 1.7992424242424243, "no_speech_prob": 0.08880908787250519}, {"id": 50, "seek": 16224, "start": 171.72, "end": 177.04000000000002, "text": " So for example, if I want to do some sort of profiling, I can input some sort of counters", "tokens": [50838, 407, 337, 1365, 11, 498, 286, 528, 281, 360, 512, 1333, 295, 1740, 4883, 11, 286, 393, 4846, 512, 1333, 295, 39338, 51104], "temperature": 0.0, "avg_logprob": -0.16123842985733697, "compression_ratio": 1.7992424242424243, "no_speech_prob": 0.08880908787250519}, {"id": 51, "seek": 16224, "start": 177.04000000000002, "end": 178.84, "text": " into the running binary.", "tokens": [51104, 666, 264, 2614, 17434, 13, 51194], "temperature": 0.0, "avg_logprob": -0.16123842985733697, "compression_ratio": 1.7992424242424243, "no_speech_prob": 0.08880908787250519}, {"id": 52, "seek": 16224, "start": 178.84, "end": 181.60000000000002, "text": " And then translation is kind of an overlapping term.", "tokens": [51194, 400, 550, 12853, 307, 733, 295, 364, 33535, 1433, 13, 51332], "temperature": 0.0, "avg_logprob": -0.16123842985733697, "compression_ratio": 1.7992424242424243, "no_speech_prob": 0.08880908787250519}, {"id": 53, "seek": 16224, "start": 181.60000000000002, "end": 187.04000000000002, "text": " I can swap one, I say to another, so we could do it by modifying the binary, or there are", "tokens": [51332, 286, 393, 18135, 472, 11, 286, 584, 281, 1071, 11, 370, 321, 727, 360, 309, 538, 42626, 264, 17434, 11, 420, 456, 366, 51604], "temperature": 0.0, "avg_logprob": -0.16123842985733697, "compression_ratio": 1.7992424242424243, "no_speech_prob": 0.08880908787250519}, {"id": 54, "seek": 16224, "start": 187.04000000000002, "end": 189.92000000000002, "text": " more specialized tools that do the translation.", "tokens": [51604, 544, 19813, 3873, 300, 360, 264, 12853, 13, 51748], "temperature": 0.0, "avg_logprob": -0.16123842985733697, "compression_ratio": 1.7992424242424243, "no_speech_prob": 0.08880908787250519}, {"id": 55, "seek": 18992, "start": 189.92, "end": 194.2, "text": " So you are probably familiar with the Apple Rosetta, which translates now Intel to ARM", "tokens": [50364, 407, 291, 366, 1391, 4963, 365, 264, 6373, 11144, 16593, 11, 597, 28468, 586, 19762, 281, 45209, 50578], "temperature": 0.0, "avg_logprob": -0.24210903100800096, "compression_ratio": 1.700374531835206, "no_speech_prob": 0.030167361721396446}, {"id": 56, "seek": 18992, "start": 194.2, "end": 199.64, "text": " when you got your new MacBook, but there is also the KMU also can act as a translator", "tokens": [50578, 562, 291, 658, 428, 777, 31737, 11, 457, 456, 307, 611, 264, 591, 44, 52, 611, 393, 605, 382, 257, 35223, 50850], "temperature": 0.0, "avg_logprob": -0.24210903100800096, "compression_ratio": 1.700374531835206, "no_speech_prob": 0.030167361721396446}, {"id": 57, "seek": 18992, "start": 199.64, "end": 205.04, "text": " and usually use like that because they can translate one architecture to another.", "tokens": [50850, 293, 2673, 764, 411, 300, 570, 436, 393, 13799, 472, 9482, 281, 1071, 13, 51120], "temperature": 0.0, "avg_logprob": -0.24210903100800096, "compression_ratio": 1.700374531835206, "no_speech_prob": 0.030167361721396446}, {"id": 58, "seek": 18992, "start": 205.04, "end": 208.0, "text": " But now, so very few uses of the tools.", "tokens": [51120, 583, 586, 11, 370, 588, 1326, 4960, 295, 264, 3873, 13, 51268], "temperature": 0.0, "avg_logprob": -0.24210903100800096, "compression_ratio": 1.700374531835206, "no_speech_prob": 0.030167361721396446}, {"id": 59, "seek": 18992, "start": 208.0, "end": 211.44, "text": " So you can do program analysis, you can do error detection.", "tokens": [51268, 407, 291, 393, 360, 1461, 5215, 11, 291, 393, 360, 6713, 17784, 13, 51440], "temperature": 0.0, "avg_logprob": -0.24210903100800096, "compression_ratio": 1.700374531835206, "no_speech_prob": 0.030167361721396446}, {"id": 60, "seek": 18992, "start": 211.44, "end": 215.67999999999998, "text": " So I'm pretty sure most of you are familiar with that use case, and there is a dynamic", "tokens": [51440, 407, 286, 478, 1238, 988, 881, 295, 291, 366, 4963, 365, 300, 764, 1389, 11, 293, 456, 307, 257, 8546, 51652], "temperature": 0.0, "avg_logprob": -0.24210903100800096, "compression_ratio": 1.700374531835206, "no_speech_prob": 0.030167361721396446}, {"id": 61, "seek": 18992, "start": 215.67999999999998, "end": 216.67999999999998, "text": " translation.", "tokens": [51652, 12853, 13, 51702], "temperature": 0.0, "avg_logprob": -0.24210903100800096, "compression_ratio": 1.700374531835206, "no_speech_prob": 0.030167361721396446}, {"id": 62, "seek": 21668, "start": 217.68, "end": 222.24, "text": " OK, but now the question is why would you like to use Mambo if there are other tools?", "tokens": [50414, 2264, 11, 457, 586, 264, 1168, 307, 983, 576, 291, 411, 281, 764, 19899, 1763, 498, 456, 366, 661, 3873, 30, 50642], "temperature": 0.0, "avg_logprob": -0.23498075658624823, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.013195295818150043}, {"id": 63, "seek": 21668, "start": 222.24, "end": 228.6, "text": " So the Mambo has been specifically optimized for risk 5, ARM, risk 5 64, ARM 32 and ARM", "tokens": [50642, 407, 264, 19899, 1763, 575, 668, 4682, 26941, 337, 3148, 1025, 11, 45209, 11, 3148, 1025, 12145, 11, 45209, 8858, 293, 45209, 50960], "temperature": 0.0, "avg_logprob": -0.23498075658624823, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.013195295818150043}, {"id": 64, "seek": 21668, "start": 228.6, "end": 229.6, "text": " 64.", "tokens": [50960, 12145, 13, 51010], "temperature": 0.0, "avg_logprob": -0.23498075658624823, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.013195295818150043}, {"id": 65, "seek": 21668, "start": 229.6, "end": 234.12, "text": " So in the stock, we are focusing on the ARM, on the risk 5, but we also have the version", "tokens": [51010, 407, 294, 264, 4127, 11, 321, 366, 8416, 322, 264, 45209, 11, 322, 264, 3148, 1025, 11, 457, 321, 611, 362, 264, 3037, 51236], "temperature": 0.0, "avg_logprob": -0.23498075658624823, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.013195295818150043}, {"id": 66, "seek": 21668, "start": 234.12, "end": 237.28, "text": " of the tool that can run on ARM.", "tokens": [51236, 295, 264, 2290, 300, 393, 1190, 322, 45209, 13, 51394], "temperature": 0.0, "avg_logprob": -0.23498075658624823, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.013195295818150043}, {"id": 67, "seek": 21668, "start": 237.28, "end": 242.0, "text": " And the tool features low overhead, and to our knowledge, this is the only at the moment", "tokens": [51394, 400, 264, 2290, 4122, 2295, 19922, 11, 293, 281, 527, 3601, 11, 341, 307, 264, 787, 412, 264, 1623, 51630], "temperature": 0.0, "avg_logprob": -0.23498075658624823, "compression_ratio": 1.5967078189300412, "no_speech_prob": 0.013195295818150043}, {"id": 68, "seek": 24200, "start": 242.0, "end": 247.04, "text": " available DBM tools that has been optimized for risk 5.", "tokens": [50364, 2435, 413, 18345, 3873, 300, 575, 668, 26941, 337, 3148, 1025, 13, 50616], "temperature": 0.0, "avg_logprob": -0.17260413133461056, "compression_ratio": 1.7446043165467626, "no_speech_prob": 0.055922575294971466}, {"id": 69, "seek": 24200, "start": 247.04, "end": 251.32, "text": " And the tool itself is fairly low in complexity, so if you would like to dive into the database,", "tokens": [50616, 400, 264, 2290, 2564, 307, 6457, 2295, 294, 14024, 11, 370, 498, 291, 576, 411, 281, 9192, 666, 264, 8149, 11, 50830], "temperature": 0.0, "avg_logprob": -0.17260413133461056, "compression_ratio": 1.7446043165467626, "no_speech_prob": 0.055922575294971466}, {"id": 70, "seek": 24200, "start": 251.32, "end": 253.6, "text": " is around 20,000 line of code.", "tokens": [50830, 307, 926, 945, 11, 1360, 1622, 295, 3089, 13, 50944], "temperature": 0.0, "avg_logprob": -0.17260413133461056, "compression_ratio": 1.7446043165467626, "no_speech_prob": 0.055922575294971466}, {"id": 71, "seek": 24200, "start": 253.6, "end": 258.8, "text": " So if you want to learn how it works, or if you want to modify the internals, the entry", "tokens": [50944, 407, 498, 291, 528, 281, 1466, 577, 309, 1985, 11, 420, 498, 291, 528, 281, 16927, 264, 2154, 1124, 11, 264, 8729, 51204], "temperature": 0.0, "avg_logprob": -0.17260413133461056, "compression_ratio": 1.7446043165467626, "no_speech_prob": 0.055922575294971466}, {"id": 72, "seek": 24200, "start": 258.8, "end": 260.52, "text": " bar is not that high.", "tokens": [51204, 2159, 307, 406, 300, 1090, 13, 51290], "temperature": 0.0, "avg_logprob": -0.17260413133461056, "compression_ratio": 1.7446043165467626, "no_speech_prob": 0.055922575294971466}, {"id": 73, "seek": 24200, "start": 260.52, "end": 265.96, "text": " And then it has a simple plugin API that allows you to write the architecture agnostic plugins.", "tokens": [51290, 400, 550, 309, 575, 257, 2199, 23407, 9362, 300, 4045, 291, 281, 2464, 264, 9482, 623, 77, 19634, 33759, 13, 51562], "temperature": 0.0, "avg_logprob": -0.17260413133461056, "compression_ratio": 1.7446043165467626, "no_speech_prob": 0.055922575294971466}, {"id": 74, "seek": 24200, "start": 265.96, "end": 270.32, "text": " So you can write the plugin for risk 5 and later on you can deploy it on ARM if you", "tokens": [51562, 407, 291, 393, 2464, 264, 23407, 337, 3148, 1025, 293, 1780, 322, 291, 393, 7274, 309, 322, 45209, 498, 291, 51780], "temperature": 0.0, "avg_logprob": -0.17260413133461056, "compression_ratio": 1.7446043165467626, "no_speech_prob": 0.055922575294971466}, {"id": 75, "seek": 24200, "start": 270.32, "end": 271.32, "text": " would like.", "tokens": [51780, 576, 411, 13, 51830], "temperature": 0.0, "avg_logprob": -0.17260413133461056, "compression_ratio": 1.7446043165467626, "no_speech_prob": 0.055922575294971466}, {"id": 76, "seek": 27132, "start": 271.68, "end": 273.92, "text": " But it's worth to say it is not a toy.", "tokens": [50382, 583, 309, 311, 3163, 281, 584, 309, 307, 406, 257, 12058, 13, 50494], "temperature": 0.0, "avg_logprob": -0.30718400374702787, "compression_ratio": 1.573076923076923, "no_speech_prob": 0.05539127439260483}, {"id": 77, "seek": 27132, "start": 273.92, "end": 279.36, "text": " So we showed it before in the video that we can run fairly complex applications, so it's", "tokens": [50494, 407, 321, 4712, 309, 949, 294, 264, 960, 300, 321, 393, 1190, 6457, 3997, 5821, 11, 370, 309, 311, 50766], "temperature": 0.0, "avg_logprob": -0.30718400374702787, "compression_ratio": 1.573076923076923, "no_speech_prob": 0.05539127439260483}, {"id": 78, "seek": 27132, "start": 279.36, "end": 283.56, "text": " a full GUI tool from the ship with Inux.", "tokens": [50766, 257, 1577, 17917, 40, 2290, 490, 264, 5374, 365, 682, 2449, 13, 50976], "temperature": 0.0, "avg_logprob": -0.30718400374702787, "compression_ratio": 1.573076923076923, "no_speech_prob": 0.05539127439260483}, {"id": 79, "seek": 27132, "start": 283.56, "end": 286.92, "text": " It could run stuff like GIMP or library office as well.", "tokens": [50976, 467, 727, 1190, 1507, 411, 460, 6324, 47, 420, 6405, 3398, 382, 731, 13, 51144], "temperature": 0.0, "avg_logprob": -0.30718400374702787, "compression_ratio": 1.573076923076923, "no_speech_prob": 0.05539127439260483}, {"id": 80, "seek": 27132, "start": 286.92, "end": 289.6, "text": " So the tool itself is not a toy.", "tokens": [51144, 407, 264, 2290, 2564, 307, 406, 257, 12058, 13, 51278], "temperature": 0.0, "avg_logprob": -0.30718400374702787, "compression_ratio": 1.573076923076923, "no_speech_prob": 0.05539127439260483}, {"id": 81, "seek": 27132, "start": 289.6, "end": 295.32, "text": " OK, and if you are interested what the numbers would be roughly, so we evaluated it on the", "tokens": [51278, 2264, 11, 293, 498, 291, 366, 3102, 437, 264, 3547, 576, 312, 9810, 11, 370, 321, 25509, 309, 322, 264, 51564], "temperature": 0.0, "avg_logprob": -0.30718400374702787, "compression_ratio": 1.573076923076923, "no_speech_prob": 0.05539127439260483}, {"id": 82, "seek": 27132, "start": 295.32, "end": 297.84, "text": " spec benchmark, so don't worry about too much about numbers.", "tokens": [51564, 1608, 18927, 11, 370, 500, 380, 3292, 466, 886, 709, 466, 3547, 13, 51690], "temperature": 0.0, "avg_logprob": -0.30718400374702787, "compression_ratio": 1.573076923076923, "no_speech_prob": 0.05539127439260483}, {"id": 83, "seek": 29784, "start": 297.88, "end": 300.56, "text": " If you want, we can point you to the paper or we can talk about it later.", "tokens": [50366, 759, 291, 528, 11, 321, 393, 935, 291, 281, 264, 3035, 420, 321, 393, 751, 466, 309, 1780, 13, 50500], "temperature": 0.0, "avg_logprob": -0.3316896453158546, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.1763235330581665}, {"id": 84, "seek": 29784, "start": 300.56, "end": 307.03999999999996, "text": " But the idea is for like, FP benchmark, which is more like data processing.", "tokens": [50500, 583, 264, 1558, 307, 337, 411, 11, 36655, 18927, 11, 597, 307, 544, 411, 1412, 9007, 13, 50824], "temperature": 0.0, "avg_logprob": -0.3316896453158546, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.1763235330581665}, {"id": 85, "seek": 29784, "start": 307.03999999999996, "end": 310.64, "text": " We get around 6% overhead if we just run the tool.", "tokens": [50824, 492, 483, 926, 1386, 4, 19922, 498, 321, 445, 1190, 264, 2290, 13, 51004], "temperature": 0.0, "avg_logprob": -0.3316896453158546, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.1763235330581665}, {"id": 86, "seek": 29784, "start": 310.64, "end": 314.0, "text": " We just run a framework without an extra tool built on top of it.", "tokens": [51004, 492, 445, 1190, 257, 8388, 1553, 364, 2857, 2290, 3094, 322, 1192, 295, 309, 13, 51172], "temperature": 0.0, "avg_logprob": -0.3316896453158546, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.1763235330581665}, {"id": 87, "seek": 29784, "start": 314.0, "end": 317.0, "text": " And it's around 30% when we do more general purpose computing.", "tokens": [51172, 400, 309, 311, 926, 2217, 4, 562, 321, 360, 544, 2674, 4334, 15866, 13, 51322], "temperature": 0.0, "avg_logprob": -0.3316896453158546, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.1763235330581665}, {"id": 88, "seek": 29784, "start": 317.0, "end": 323.64, "text": " So the baseline then, if you have no plugins enabled when you just run the tool under, if", "tokens": [51322, 407, 264, 20518, 550, 11, 498, 291, 362, 572, 33759, 15172, 562, 291, 445, 1190, 264, 2290, 833, 11, 498, 51654], "temperature": 0.0, "avg_logprob": -0.3316896453158546, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.1763235330581665}, {"id": 89, "seek": 29784, "start": 323.64, "end": 326.96, "text": " you run the binary on the RL tool, you get around 30% overhead.", "tokens": [51654, 291, 1190, 264, 17434, 322, 264, 497, 43, 2290, 11, 291, 483, 926, 2217, 4, 19922, 13, 51820], "temperature": 0.0, "avg_logprob": -0.3316896453158546, "compression_ratio": 1.7007042253521127, "no_speech_prob": 0.1763235330581665}, {"id": 90, "seek": 32696, "start": 327.08, "end": 332.68, "text": " OK, so that was the brief introduction of what the dynamic binary modification is.", "tokens": [50370, 2264, 11, 370, 300, 390, 264, 5353, 9339, 295, 437, 264, 8546, 17434, 26747, 307, 13, 50650], "temperature": 0.0, "avg_logprob": -0.223027695057004, "compression_ratio": 1.7615658362989324, "no_speech_prob": 0.010143972933292389}, {"id": 91, "seek": 32696, "start": 332.68, "end": 338.2, "text": " And I'm going to briefly talk about how Mambo works internally.", "tokens": [50650, 400, 286, 478, 516, 281, 10515, 751, 466, 577, 19899, 1763, 1985, 19501, 13, 50926], "temperature": 0.0, "avg_logprob": -0.223027695057004, "compression_ratio": 1.7615658362989324, "no_speech_prob": 0.010143972933292389}, {"id": 92, "seek": 32696, "start": 338.2, "end": 342.47999999999996, "text": " So I'm going to mention a few details, so it's useful if you would like to, I don't know,", "tokens": [50926, 407, 286, 478, 516, 281, 2152, 257, 1326, 4365, 11, 370, 309, 311, 4420, 498, 291, 576, 411, 281, 11, 286, 500, 380, 458, 11, 51140], "temperature": 0.0, "avg_logprob": -0.223027695057004, "compression_ratio": 1.7615658362989324, "no_speech_prob": 0.010143972933292389}, {"id": 93, "seek": 32696, "start": 342.47999999999996, "end": 345.67999999999995, "text": " contribute to the internal of the tools that may help you.", "tokens": [51140, 10586, 281, 264, 6920, 295, 264, 3873, 300, 815, 854, 291, 13, 51300], "temperature": 0.0, "avg_logprob": -0.223027695057004, "compression_ratio": 1.7615658362989324, "no_speech_prob": 0.010143972933292389}, {"id": 94, "seek": 32696, "start": 345.67999999999995, "end": 349.84, "text": " But the focus of the talk will be more the developer side, so I'm just going to talk", "tokens": [51300, 583, 264, 1879, 295, 264, 751, 486, 312, 544, 264, 10754, 1252, 11, 370, 286, 478, 445, 516, 281, 751, 51508], "temperature": 0.0, "avg_logprob": -0.223027695057004, "compression_ratio": 1.7615658362989324, "no_speech_prob": 0.010143972933292389}, {"id": 95, "seek": 32696, "start": 349.84, "end": 350.47999999999996, "text": " about it as well.", "tokens": [51508, 466, 309, 382, 731, 13, 51540], "temperature": 0.0, "avg_logprob": -0.223027695057004, "compression_ratio": 1.7615658362989324, "no_speech_prob": 0.010143972933292389}, {"id": 96, "seek": 32696, "start": 350.47999999999996, "end": 356.28, "text": " But I would like to just highlight a few bits and pieces so you will understand how Mambo works.", "tokens": [51540, 583, 286, 576, 411, 281, 445, 5078, 257, 1326, 9239, 293, 3755, 370, 291, 486, 1223, 577, 19899, 1763, 1985, 13, 51830], "temperature": 0.0, "avg_logprob": -0.223027695057004, "compression_ratio": 1.7615658362989324, "no_speech_prob": 0.010143972933292389}, {"id": 97, "seek": 35628, "start": 356.28, "end": 364.03999999999996, "text": " OK, so this is the simplified diagram, and I'm going to talk you through the more important", "tokens": [50364, 2264, 11, 370, 341, 307, 264, 26335, 10686, 11, 293, 286, 478, 516, 281, 751, 291, 807, 264, 544, 1021, 50752], "temperature": 0.0, "avg_logprob": -0.18204783564028532, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00660172151401639}, {"id": 98, "seek": 35628, "start": 364.03999999999996, "end": 365.0, "text": " bits of that.", "tokens": [50752, 9239, 295, 300, 13, 50800], "temperature": 0.0, "avg_logprob": -0.18204783564028532, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00660172151401639}, {"id": 99, "seek": 35628, "start": 365.0, "end": 370.15999999999997, "text": " So the instrumentation plugin API, so this is the part that Alistair is going to talk", "tokens": [50800, 407, 264, 7198, 399, 23407, 9362, 11, 370, 341, 307, 264, 644, 300, 967, 468, 1246, 307, 516, 281, 751, 51058], "temperature": 0.0, "avg_logprob": -0.18204783564028532, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00660172151401639}, {"id": 100, "seek": 35628, "start": 370.15999999999997, "end": 374.28, "text": " in much detail about, and I'm going to cover everything else.", "tokens": [51058, 294, 709, 2607, 466, 11, 293, 286, 478, 516, 281, 2060, 1203, 1646, 13, 51264], "temperature": 0.0, "avg_logprob": -0.18204783564028532, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00660172151401639}, {"id": 101, "seek": 35628, "start": 374.28, "end": 378.91999999999996, "text": " OK, so first of all, the first component is the elf loader.", "tokens": [51264, 2264, 11, 370, 700, 295, 439, 11, 264, 700, 6542, 307, 264, 35565, 3677, 260, 13, 51496], "temperature": 0.0, "avg_logprob": -0.18204783564028532, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00660172151401639}, {"id": 102, "seek": 35628, "start": 378.91999999999996, "end": 384.71999999999997, "text": " So if you run any binary on Linux, it has to be first loaded into memory, and then we", "tokens": [51496, 407, 498, 291, 1190, 604, 17434, 322, 18734, 11, 309, 575, 281, 312, 700, 13210, 666, 4675, 11, 293, 550, 321, 51786], "temperature": 0.0, "avg_logprob": -0.18204783564028532, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00660172151401639}, {"id": 103, "seek": 35628, "start": 384.71999999999997, "end": 385.76, "text": " can run it.", "tokens": [51786, 393, 1190, 309, 13, 51838], "temperature": 0.0, "avg_logprob": -0.18204783564028532, "compression_ratio": 1.691358024691358, "no_speech_prob": 0.00660172151401639}, {"id": 104, "seek": 38576, "start": 385.76, "end": 391.59999999999997, "text": " So in case if we use our framework, so if we use Mambo, then the Mambo itself is loaded", "tokens": [50364, 407, 294, 1389, 498, 321, 764, 527, 8388, 11, 370, 498, 321, 764, 19899, 1763, 11, 550, 264, 19899, 1763, 2564, 307, 13210, 50656], "temperature": 0.0, "avg_logprob": -0.18482989501953126, "compression_ratio": 1.8979591836734695, "no_speech_prob": 0.009983344003558159}, {"id": 105, "seek": 38576, "start": 391.59999999999997, "end": 397.08, "text": " by Linux using its default loader, and then Mambo itself has to load the application,", "tokens": [50656, 538, 18734, 1228, 1080, 7576, 3677, 260, 11, 293, 550, 19899, 1763, 2564, 575, 281, 3677, 264, 3861, 11, 50930], "temperature": 0.0, "avg_logprob": -0.18482989501953126, "compression_ratio": 1.8979591836734695, "no_speech_prob": 0.009983344003558159}, {"id": 106, "seek": 38576, "start": 397.08, "end": 398.48, "text": " which we call a hosted application.", "tokens": [50930, 597, 321, 818, 257, 19204, 3861, 13, 51000], "temperature": 0.0, "avg_logprob": -0.18482989501953126, "compression_ratio": 1.8979591836734695, "no_speech_prob": 0.009983344003558159}, {"id": 107, "seek": 38576, "start": 398.48, "end": 405.59999999999997, "text": " So the Mambo has a custom build loader inside of it, which takes the application and loads", "tokens": [51000, 407, 264, 19899, 1763, 575, 257, 2375, 1322, 3677, 260, 1854, 295, 309, 11, 597, 2516, 264, 3861, 293, 12668, 51356], "temperature": 0.0, "avg_logprob": -0.18482989501953126, "compression_ratio": 1.8979591836734695, "no_speech_prob": 0.009983344003558159}, {"id": 108, "seek": 38576, "start": 405.59999999999997, "end": 411.28, "text": " it alongside the Mambo, so it can interact with it, it can modify it, and it can run it.", "tokens": [51356, 309, 12385, 264, 19899, 1763, 11, 370, 309, 393, 4648, 365, 309, 11, 309, 393, 16927, 309, 11, 293, 309, 393, 1190, 309, 13, 51640], "temperature": 0.0, "avg_logprob": -0.18482989501953126, "compression_ratio": 1.8979591836734695, "no_speech_prob": 0.009983344003558159}, {"id": 109, "seek": 38576, "start": 411.28, "end": 412.28, "text": " So that's the first element.", "tokens": [51640, 407, 300, 311, 264, 700, 4478, 13, 51690], "temperature": 0.0, "avg_logprob": -0.18482989501953126, "compression_ratio": 1.8979591836734695, "no_speech_prob": 0.009983344003558159}, {"id": 110, "seek": 38576, "start": 412.28, "end": 415.64, "text": " The second element is instruction and decoder.", "tokens": [51690, 440, 1150, 4478, 307, 10951, 293, 979, 19866, 13, 51858], "temperature": 0.0, "avg_logprob": -0.18482989501953126, "compression_ratio": 1.8979591836734695, "no_speech_prob": 0.009983344003558159}, {"id": 111, "seek": 41564, "start": 415.64, "end": 421.03999999999996, "text": " So while we execute the application, we have to modify some of the instruction.", "tokens": [50364, 407, 1339, 321, 14483, 264, 3861, 11, 321, 362, 281, 16927, 512, 295, 264, 10951, 13, 50634], "temperature": 0.0, "avg_logprob": -0.1778177743429666, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.02854294516146183}, {"id": 112, "seek": 41564, "start": 421.03999999999996, "end": 426.71999999999997, "text": " We have to know what instruction we are copying and scanning and modifying, so this is what", "tokens": [50634, 492, 362, 281, 458, 437, 10951, 321, 366, 27976, 293, 27019, 293, 42626, 11, 370, 341, 307, 437, 50918], "temperature": 0.0, "avg_logprob": -0.1778177743429666, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.02854294516146183}, {"id": 113, "seek": 41564, "start": 426.71999999999997, "end": 429.8, "text": " the instruction and decoder and decoder does.", "tokens": [50918, 264, 10951, 293, 979, 19866, 293, 979, 19866, 775, 13, 51072], "temperature": 0.0, "avg_logprob": -0.1778177743429666, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.02854294516146183}, {"id": 114, "seek": 41564, "start": 429.8, "end": 434.68, "text": " So you may be familiar with the custom project, which is like a fully fledged assembler.", "tokens": [51072, 407, 291, 815, 312, 4963, 365, 264, 2375, 1716, 11, 597, 307, 411, 257, 4498, 24114, 3004, 8438, 1918, 13, 51316], "temperature": 0.0, "avg_logprob": -0.1778177743429666, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.02854294516146183}, {"id": 115, "seek": 41564, "start": 434.68, "end": 443.32, "text": " This is a very simple module that basically takes a text specification of the instruction", "tokens": [51316, 639, 307, 257, 588, 2199, 10088, 300, 1936, 2516, 257, 2487, 31256, 295, 264, 10951, 51748], "temperature": 0.0, "avg_logprob": -0.1778177743429666, "compression_ratio": 1.7444933920704846, "no_speech_prob": 0.02854294516146183}, {"id": 116, "seek": 44332, "start": 443.44, "end": 448.44, "text": " and what the fields it has and uses some rubbish scripts to generate the C functions to encode", "tokens": [50370, 293, 437, 264, 7909, 309, 575, 293, 4960, 512, 29978, 23294, 281, 8460, 264, 383, 6828, 281, 2058, 1429, 50620], "temperature": 0.0, "avg_logprob": -0.26111696384571215, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.04464641958475113}, {"id": 117, "seek": 44332, "start": 448.44, "end": 452.28, "text": " any code fields, and this is what Mambo uses because it's fairly simple and low overhead,", "tokens": [50620, 604, 3089, 7909, 11, 293, 341, 307, 437, 19899, 1763, 4960, 570, 309, 311, 6457, 2199, 293, 2295, 19922, 11, 50812], "temperature": 0.0, "avg_logprob": -0.26111696384571215, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.04464641958475113}, {"id": 118, "seek": 44332, "start": 452.28, "end": 456.32, "text": " and that's something that we want inside the tool that runs dynamically.", "tokens": [50812, 293, 300, 311, 746, 300, 321, 528, 1854, 264, 2290, 300, 6676, 43492, 13, 51014], "temperature": 0.0, "avg_logprob": -0.26111696384571215, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.04464641958475113}, {"id": 119, "seek": 44332, "start": 456.32, "end": 463.15999999999997, "text": " Okay, and now the two most important parts of Mambo, it will be a code scanner and the", "tokens": [51014, 1033, 11, 293, 586, 264, 732, 881, 1021, 3166, 295, 19899, 1763, 11, 309, 486, 312, 257, 3089, 30211, 293, 264, 51356], "temperature": 0.0, "avg_logprob": -0.26111696384571215, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.04464641958475113}, {"id": 120, "seek": 44332, "start": 463.15999999999997, "end": 465.88, "text": " dispatcher and the code cache.", "tokens": [51356, 36729, 260, 293, 264, 3089, 19459, 13, 51492], "temperature": 0.0, "avg_logprob": -0.26111696384571215, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.04464641958475113}, {"id": 121, "seek": 44332, "start": 465.88, "end": 469.28, "text": " So let me maybe first talk about what the code cache is.", "tokens": [51492, 407, 718, 385, 1310, 700, 751, 466, 437, 264, 3089, 19459, 307, 13, 51662], "temperature": 0.0, "avg_logprob": -0.26111696384571215, "compression_ratio": 1.7142857142857142, "no_speech_prob": 0.04464641958475113}, {"id": 122, "seek": 46928, "start": 469.28, "end": 475.84, "text": " So we have our Mambo, and the Mambo uses the loader to load the binary into a memory.", "tokens": [50364, 407, 321, 362, 527, 19899, 1763, 11, 293, 264, 19899, 1763, 4960, 264, 3677, 260, 281, 3677, 264, 17434, 666, 257, 4675, 13, 50692], "temperature": 0.0, "avg_logprob": -0.12252585093180339, "compression_ratio": 1.992063492063492, "no_speech_prob": 0.013246817514300346}, {"id": 123, "seek": 46928, "start": 475.84, "end": 479.15999999999997, "text": " And now we want to run this binary, but we also want to modify it.", "tokens": [50692, 400, 586, 321, 528, 281, 1190, 341, 17434, 11, 457, 321, 611, 528, 281, 16927, 309, 13, 50858], "temperature": 0.0, "avg_logprob": -0.12252585093180339, "compression_ratio": 1.992063492063492, "no_speech_prob": 0.013246817514300346}, {"id": 124, "seek": 46928, "start": 479.15999999999997, "end": 485.11999999999995, "text": " So if we just load the binary and run it, then it will run as it would be before.", "tokens": [50858, 407, 498, 321, 445, 3677, 264, 17434, 293, 1190, 309, 11, 550, 309, 486, 1190, 382, 309, 576, 312, 949, 13, 51156], "temperature": 0.0, "avg_logprob": -0.12252585093180339, "compression_ratio": 1.992063492063492, "no_speech_prob": 0.013246817514300346}, {"id": 125, "seek": 46928, "start": 485.11999999999995, "end": 487.64, "text": " So that's why where the code cache comes in.", "tokens": [51156, 407, 300, 311, 983, 689, 264, 3089, 19459, 1487, 294, 13, 51282], "temperature": 0.0, "avg_logprob": -0.12252585093180339, "compression_ratio": 1.992063492063492, "no_speech_prob": 0.013246817514300346}, {"id": 126, "seek": 46928, "start": 487.64, "end": 489.71999999999997, "text": " So this is not the instruction cache that we have hardware.", "tokens": [51282, 407, 341, 307, 406, 264, 10951, 19459, 300, 321, 362, 8837, 13, 51386], "temperature": 0.0, "avg_logprob": -0.12252585093180339, "compression_ratio": 1.992063492063492, "no_speech_prob": 0.013246817514300346}, {"id": 127, "seek": 46928, "start": 489.71999999999997, "end": 493.44, "text": " This is just allocated space in memory that we call the code cache.", "tokens": [51386, 639, 307, 445, 29772, 1901, 294, 4675, 300, 321, 818, 264, 3089, 19459, 13, 51572], "temperature": 0.0, "avg_logprob": -0.12252585093180339, "compression_ratio": 1.992063492063492, "no_speech_prob": 0.013246817514300346}, {"id": 128, "seek": 46928, "start": 493.44, "end": 498.67999999999995, "text": " And now the Mambo scanner will copy the instruction from the binary that we loaded into memory", "tokens": [51572, 400, 586, 264, 19899, 1763, 30211, 486, 5055, 264, 10951, 490, 264, 17434, 300, 321, 13210, 666, 4675, 51834], "temperature": 0.0, "avg_logprob": -0.12252585093180339, "compression_ratio": 1.992063492063492, "no_speech_prob": 0.013246817514300346}, {"id": 129, "seek": 49868, "start": 498.72, "end": 500.32, "text": " into the code cache.", "tokens": [50366, 666, 264, 3089, 19459, 13, 50446], "temperature": 0.0, "avg_logprob": -0.13840071035891163, "compression_ratio": 2.0913461538461537, "no_speech_prob": 0.016821101307868958}, {"id": 130, "seek": 49868, "start": 500.32, "end": 505.0, "text": " And in the process of copying those instructions, we can introduce any functionality, we can", "tokens": [50446, 400, 294, 264, 1399, 295, 27976, 729, 9415, 11, 321, 393, 5366, 604, 14980, 11, 321, 393, 50680], "temperature": 0.0, "avg_logprob": -0.13840071035891163, "compression_ratio": 2.0913461538461537, "no_speech_prob": 0.016821101307868958}, {"id": 131, "seek": 49868, "start": 505.0, "end": 508.0, "text": " remove some instructions, we can replace some instructions.", "tokens": [50680, 4159, 512, 9415, 11, 321, 393, 7406, 512, 9415, 13, 50830], "temperature": 0.0, "avg_logprob": -0.13840071035891163, "compression_ratio": 2.0913461538461537, "no_speech_prob": 0.016821101307868958}, {"id": 132, "seek": 49868, "start": 508.0, "end": 512.16, "text": " So the scanner is responsible for copying instructions from the binary that we loaded", "tokens": [50830, 407, 264, 30211, 307, 6250, 337, 27976, 9415, 490, 264, 17434, 300, 321, 13210, 51038], "temperature": 0.0, "avg_logprob": -0.13840071035891163, "compression_ratio": 2.0913461538461537, "no_speech_prob": 0.016821101307868958}, {"id": 133, "seek": 49868, "start": 512.16, "end": 513.32, "text": " into the code cache.", "tokens": [51038, 666, 264, 3089, 19459, 13, 51096], "temperature": 0.0, "avg_logprob": -0.13840071035891163, "compression_ratio": 2.0913461538461537, "no_speech_prob": 0.016821101307868958}, {"id": 134, "seek": 49868, "start": 513.32, "end": 519.48, "text": " And then the code cache is what will actually execute on the processor.", "tokens": [51096, 400, 550, 264, 3089, 19459, 307, 437, 486, 767, 14483, 322, 264, 15321, 13, 51404], "temperature": 0.0, "avg_logprob": -0.13840071035891163, "compression_ratio": 2.0913461538461537, "no_speech_prob": 0.016821101307868958}, {"id": 135, "seek": 49868, "start": 519.48, "end": 525.96, "text": " And then we have a dispatcher, which is responsible for actually running the code.", "tokens": [51404, 400, 550, 321, 362, 257, 36729, 260, 11, 597, 307, 6250, 337, 767, 2614, 264, 3089, 13, 51728], "temperature": 0.0, "avg_logprob": -0.13840071035891163, "compression_ratio": 2.0913461538461537, "no_speech_prob": 0.016821101307868958}, {"id": 136, "seek": 52596, "start": 525.96, "end": 530.8000000000001, "text": " So the scanner will copy a basic block, and then it will say, I finished copying a basic", "tokens": [50364, 407, 264, 30211, 486, 5055, 257, 3875, 3461, 11, 293, 550, 309, 486, 584, 11, 286, 4335, 27976, 257, 3875, 50606], "temperature": 0.0, "avg_logprob": -0.180968505859375, "compression_ratio": 2.069868995633188, "no_speech_prob": 0.06452038884162903}, {"id": 137, "seek": 52596, "start": 530.8000000000001, "end": 531.8000000000001, "text": " block.", "tokens": [50606, 3461, 13, 50656], "temperature": 0.0, "avg_logprob": -0.180968505859375, "compression_ratio": 2.069868995633188, "no_speech_prob": 0.06452038884162903}, {"id": 138, "seek": 52596, "start": 531.8000000000001, "end": 535.6, "text": " Now I go to the dispatcher and dispatcher will start the basic block, and it will actually", "tokens": [50656, 823, 286, 352, 281, 264, 36729, 260, 293, 36729, 260, 486, 722, 264, 3875, 3461, 11, 293, 309, 486, 767, 50846], "temperature": 0.0, "avg_logprob": -0.180968505859375, "compression_ratio": 2.069868995633188, "no_speech_prob": 0.06452038884162903}, {"id": 139, "seek": 52596, "start": 535.6, "end": 541.1600000000001, "text": " natively execute it on a RISC-5 processor.", "tokens": [50846, 8470, 356, 14483, 309, 322, 257, 497, 2343, 34, 12, 20, 15321, 13, 51124], "temperature": 0.0, "avg_logprob": -0.180968505859375, "compression_ratio": 2.069868995633188, "no_speech_prob": 0.06452038884162903}, {"id": 140, "seek": 52596, "start": 541.1600000000001, "end": 545.88, "text": " And then when we finish the basic block, the control will return back to Mambo to scan", "tokens": [51124, 400, 550, 562, 321, 2413, 264, 3875, 3461, 11, 264, 1969, 486, 2736, 646, 281, 19899, 1763, 281, 11049, 51360], "temperature": 0.0, "avg_logprob": -0.180968505859375, "compression_ratio": 2.069868995633188, "no_speech_prob": 0.06452038884162903}, {"id": 141, "seek": 52596, "start": 545.88, "end": 549.6, "text": " the other basic block, and then again we'll go back to the dispatcher and dispatcher will", "tokens": [51360, 264, 661, 3875, 3461, 11, 293, 550, 797, 321, 603, 352, 646, 281, 264, 36729, 260, 293, 36729, 260, 486, 51546], "temperature": 0.0, "avg_logprob": -0.180968505859375, "compression_ratio": 2.069868995633188, "no_speech_prob": 0.06452038884162903}, {"id": 142, "seek": 52596, "start": 549.6, "end": 553.8000000000001, "text": " execute the next basic block, and it will have this back and forth.", "tokens": [51546, 14483, 264, 958, 3875, 3461, 11, 293, 309, 486, 362, 341, 646, 293, 5220, 13, 51756], "temperature": 0.0, "avg_logprob": -0.180968505859375, "compression_ratio": 2.069868995633188, "no_speech_prob": 0.06452038884162903}, {"id": 143, "seek": 55380, "start": 553.8, "end": 557.7199999999999, "text": " And if the code is ready to the code cache, we don't have to scan it so we can directly", "tokens": [50364, 400, 498, 264, 3089, 307, 1919, 281, 264, 3089, 19459, 11, 321, 500, 380, 362, 281, 11049, 309, 370, 321, 393, 3838, 50560], "temperature": 0.0, "avg_logprob": -0.21880489087286797, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.14394967257976532}, {"id": 144, "seek": 55380, "start": 557.7199999999999, "end": 560.3199999999999, "text": " execute another basic block without scanning.", "tokens": [50560, 14483, 1071, 3875, 3461, 1553, 27019, 13, 50690], "temperature": 0.0, "avg_logprob": -0.21880489087286797, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.14394967257976532}, {"id": 145, "seek": 55380, "start": 560.3199999999999, "end": 562.3599999999999, "text": " So this is very simplified.", "tokens": [50690, 407, 341, 307, 588, 26335, 13, 50792], "temperature": 0.0, "avg_logprob": -0.21880489087286797, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.14394967257976532}, {"id": 146, "seek": 55380, "start": 562.3599999999999, "end": 564.4399999999999, "text": " If we did it that way, it would be very, very slow.", "tokens": [50792, 759, 321, 630, 309, 300, 636, 11, 309, 576, 312, 588, 11, 588, 2964, 13, 50896], "temperature": 0.0, "avg_logprob": -0.21880489087286797, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.14394967257976532}, {"id": 147, "seek": 55380, "start": 564.4399999999999, "end": 567.3599999999999, "text": " So there is a number of optimizations there.", "tokens": [50896, 407, 456, 307, 257, 1230, 295, 5028, 14455, 456, 13, 51042], "temperature": 0.0, "avg_logprob": -0.21880489087286797, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.14394967257976532}, {"id": 148, "seek": 55380, "start": 567.3599999999999, "end": 570.68, "text": " So for Mambo to stay in the code cache as long as possible.", "tokens": [51042, 407, 337, 19899, 1763, 281, 1754, 294, 264, 3089, 19459, 382, 938, 382, 1944, 13, 51208], "temperature": 0.0, "avg_logprob": -0.21880489087286797, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.14394967257976532}, {"id": 149, "seek": 55380, "start": 570.68, "end": 577.4399999999999, "text": " So it does scan things ahead of time and tries to guess what would be the next thing it jumps", "tokens": [51208, 407, 309, 775, 11049, 721, 2286, 295, 565, 293, 9898, 281, 2041, 437, 576, 312, 264, 958, 551, 309, 16704, 51546], "temperature": 0.0, "avg_logprob": -0.21880489087286797, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.14394967257976532}, {"id": 150, "seek": 55380, "start": 577.4399999999999, "end": 582.3199999999999, "text": " to and then if it can do it, then it can stay within the code cache.", "tokens": [51546, 281, 293, 550, 498, 309, 393, 360, 309, 11, 550, 309, 393, 1754, 1951, 264, 3089, 19459, 13, 51790], "temperature": 0.0, "avg_logprob": -0.21880489087286797, "compression_ratio": 1.7749077490774907, "no_speech_prob": 0.14394967257976532}, {"id": 151, "seek": 58232, "start": 582.32, "end": 585.84, "text": " Otherwise it has to go back to the scanner and back to the dispatcher if it doesn't know", "tokens": [50364, 10328, 309, 575, 281, 352, 646, 281, 264, 30211, 293, 646, 281, 264, 36729, 260, 498, 309, 1177, 380, 458, 50540], "temperature": 0.0, "avg_logprob": -0.18784112778920975, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.05493493750691414}, {"id": 152, "seek": 58232, "start": 585.84, "end": 588.24, "text": " what the next basic block is.", "tokens": [50540, 437, 264, 958, 3875, 3461, 307, 13, 50660], "temperature": 0.0, "avg_logprob": -0.18784112778920975, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.05493493750691414}, {"id": 153, "seek": 58232, "start": 588.24, "end": 590.24, "text": " Okay, and this is what I was talking about.", "tokens": [50660, 1033, 11, 293, 341, 307, 437, 286, 390, 1417, 466, 13, 50760], "temperature": 0.0, "avg_logprob": -0.18784112778920975, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.05493493750691414}, {"id": 154, "seek": 58232, "start": 590.24, "end": 595.24, "text": " So when we execute the application, we have a single process with two binaries in it and", "tokens": [50760, 407, 562, 321, 14483, 264, 3861, 11, 321, 362, 257, 2167, 1399, 365, 732, 5171, 4889, 294, 309, 293, 51010], "temperature": 0.0, "avg_logprob": -0.18784112778920975, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.05493493750691414}, {"id": 155, "seek": 58232, "start": 595.24, "end": 596.24, "text": " two contexts.", "tokens": [51010, 732, 30628, 13, 51060], "temperature": 0.0, "avg_logprob": -0.18784112778920975, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.05493493750691414}, {"id": 156, "seek": 58232, "start": 596.24, "end": 601.8000000000001, "text": " So there is a Mambo context that scans instruction, and then the dispatcher changes from the Mambo", "tokens": [51060, 407, 456, 307, 257, 19899, 1763, 4319, 300, 35116, 10951, 11, 293, 550, 264, 36729, 260, 2962, 490, 264, 19899, 1763, 51338], "temperature": 0.0, "avg_logprob": -0.18784112778920975, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.05493493750691414}, {"id": 157, "seek": 58232, "start": 601.8000000000001, "end": 603.6400000000001, "text": " context into the application context.", "tokens": [51338, 4319, 666, 264, 3861, 4319, 13, 51430], "temperature": 0.0, "avg_logprob": -0.18784112778920975, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.05493493750691414}, {"id": 158, "seek": 58232, "start": 603.6400000000001, "end": 609.5200000000001, "text": " So it will save the state of the Mambo, jump to the code cache, execute the code cache", "tokens": [51430, 407, 309, 486, 3155, 264, 1785, 295, 264, 19899, 1763, 11, 3012, 281, 264, 3089, 19459, 11, 14483, 264, 3089, 19459, 51724], "temperature": 0.0, "avg_logprob": -0.18784112778920975, "compression_ratio": 1.866412213740458, "no_speech_prob": 0.05493493750691414}, {"id": 159, "seek": 60952, "start": 609.52, "end": 614.48, "text": " as long as it can, and then if it cannot find the next target in the code cache, it will", "tokens": [50364, 382, 938, 382, 309, 393, 11, 293, 550, 498, 309, 2644, 915, 264, 958, 3779, 294, 264, 3089, 19459, 11, 309, 486, 50612], "temperature": 0.0, "avg_logprob": -0.15529244687376903, "compression_ratio": 1.8389830508474576, "no_speech_prob": 0.011465095914900303}, {"id": 160, "seek": 60952, "start": 614.48, "end": 615.48, "text": " go back to Mambo.", "tokens": [50612, 352, 646, 281, 19899, 1763, 13, 50662], "temperature": 0.0, "avg_logprob": -0.15529244687376903, "compression_ratio": 1.8389830508474576, "no_speech_prob": 0.011465095914900303}, {"id": 161, "seek": 60952, "start": 615.48, "end": 619.76, "text": " So it will save the application state, restore the state of Mambo, and then the scanner will", "tokens": [50662, 407, 309, 486, 3155, 264, 3861, 1785, 11, 15227, 264, 1785, 295, 19899, 1763, 11, 293, 550, 264, 30211, 486, 50876], "temperature": 0.0, "avg_logprob": -0.15529244687376903, "compression_ratio": 1.8389830508474576, "no_speech_prob": 0.011465095914900303}, {"id": 162, "seek": 60952, "start": 619.76, "end": 621.4399999999999, "text": " kick in and then it will go back and forth.", "tokens": [50876, 4437, 294, 293, 550, 309, 486, 352, 646, 293, 5220, 13, 50960], "temperature": 0.0, "avg_logprob": -0.15529244687376903, "compression_ratio": 1.8389830508474576, "no_speech_prob": 0.011465095914900303}, {"id": 163, "seek": 60952, "start": 621.4399999999999, "end": 626.88, "text": " So this is like a principle of it, of how it works.", "tokens": [50960, 407, 341, 307, 411, 257, 8665, 295, 309, 11, 295, 577, 309, 1985, 13, 51232], "temperature": 0.0, "avg_logprob": -0.15529244687376903, "compression_ratio": 1.8389830508474576, "no_speech_prob": 0.011465095914900303}, {"id": 164, "seek": 60952, "start": 626.88, "end": 633.4399999999999, "text": " Okay, so the dispatcher and the scanner are like the two main elements in Mambo that allow", "tokens": [51232, 1033, 11, 370, 264, 36729, 260, 293, 264, 30211, 366, 411, 264, 732, 2135, 4959, 294, 19899, 1763, 300, 2089, 51560], "temperature": 0.0, "avg_logprob": -0.15529244687376903, "compression_ratio": 1.8389830508474576, "no_speech_prob": 0.011465095914900303}, {"id": 165, "seek": 60952, "start": 633.4399999999999, "end": 639.24, "text": " us to do the modification and execute the code.", "tokens": [51560, 505, 281, 360, 264, 26747, 293, 14483, 264, 3089, 13, 51850], "temperature": 0.0, "avg_logprob": -0.15529244687376903, "compression_ratio": 1.8389830508474576, "no_speech_prob": 0.011465095914900303}, {"id": 166, "seek": 63924, "start": 639.24, "end": 641.52, "text": " And the last thing is the kernel interaction.", "tokens": [50364, 400, 264, 1036, 551, 307, 264, 28256, 9285, 13, 50478], "temperature": 0.0, "avg_logprob": -0.1830667985224091, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.07973475754261017}, {"id": 167, "seek": 63924, "start": 641.52, "end": 649.4, "text": " So on top of just executing the application, the framework itself has to interact with the", "tokens": [50478, 407, 322, 1192, 295, 445, 32368, 264, 3861, 11, 264, 8388, 2564, 575, 281, 4648, 365, 264, 50872], "temperature": 0.0, "avg_logprob": -0.1830667985224091, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.07973475754261017}, {"id": 168, "seek": 63924, "start": 649.4, "end": 655.5600000000001, "text": " Linux kernel, so we have to handle and pass signals and handle and pass system calls.", "tokens": [50872, 18734, 28256, 11, 370, 321, 362, 281, 4813, 293, 1320, 12354, 293, 4813, 293, 1320, 1185, 5498, 13, 51180], "temperature": 0.0, "avg_logprob": -0.1830667985224091, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.07973475754261017}, {"id": 169, "seek": 63924, "start": 655.5600000000001, "end": 659.36, "text": " So this is important because for signals, if there is a signal coming from the operating", "tokens": [51180, 407, 341, 307, 1021, 570, 337, 12354, 11, 498, 456, 307, 257, 6358, 1348, 490, 264, 7447, 51370], "temperature": 0.0, "avg_logprob": -0.1830667985224091, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.07973475754261017}, {"id": 170, "seek": 63924, "start": 659.36, "end": 664.48, "text": " system, it will first hit our framework, so it will first hit Mambo.", "tokens": [51370, 1185, 11, 309, 486, 700, 2045, 527, 8388, 11, 370, 309, 486, 700, 2045, 19899, 1763, 13, 51626], "temperature": 0.0, "avg_logprob": -0.1830667985224091, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.07973475754261017}, {"id": 171, "seek": 63924, "start": 664.48, "end": 667.64, "text": " But if you don't want Mambo to handle the signals, in many cases you want to pass it", "tokens": [51626, 583, 498, 291, 500, 380, 528, 19899, 1763, 281, 4813, 264, 12354, 11, 294, 867, 3331, 291, 528, 281, 1320, 309, 51784], "temperature": 0.0, "avg_logprob": -0.1830667985224091, "compression_ratio": 1.8379446640316206, "no_speech_prob": 0.07973475754261017}, {"id": 172, "seek": 66764, "start": 667.64, "end": 671.48, "text": " to the application because the application may have a handler installed to handle this", "tokens": [50364, 281, 264, 3861, 570, 264, 3861, 815, 362, 257, 41967, 8899, 281, 4813, 341, 50556], "temperature": 0.0, "avg_logprob": -0.22014846120561873, "compression_ratio": 1.8106995884773662, "no_speech_prob": 0.07926838099956512}, {"id": 173, "seek": 66764, "start": 671.48, "end": 672.96, "text": " signal.", "tokens": [50556, 6358, 13, 50630], "temperature": 0.0, "avg_logprob": -0.22014846120561873, "compression_ratio": 1.8106995884773662, "no_speech_prob": 0.07926838099956512}, {"id": 174, "seek": 66764, "start": 672.96, "end": 678.04, "text": " And in the same way, if there is a system call, so if the hosted binary is doing a system", "tokens": [50630, 400, 294, 264, 912, 636, 11, 498, 456, 307, 257, 1185, 818, 11, 370, 498, 264, 19204, 17434, 307, 884, 257, 1185, 50884], "temperature": 0.0, "avg_logprob": -0.22014846120561873, "compression_ratio": 1.8106995884773662, "no_speech_prob": 0.07926838099956512}, {"id": 175, "seek": 66764, "start": 678.04, "end": 682.92, "text": " call, for example, let's say a thread creation, Mambo needs to know that it created a thread", "tokens": [50884, 818, 11, 337, 1365, 11, 718, 311, 584, 257, 7207, 8016, 11, 19899, 1763, 2203, 281, 458, 300, 309, 2942, 257, 7207, 51128], "temperature": 0.0, "avg_logprob": -0.22014846120561873, "compression_ratio": 1.8106995884773662, "no_speech_prob": 0.07926838099956512}, {"id": 176, "seek": 66764, "start": 682.92, "end": 686.4399999999999, "text": " because it has to track every thread that gets created.", "tokens": [51128, 570, 309, 575, 281, 2837, 633, 7207, 300, 2170, 2942, 13, 51304], "temperature": 0.0, "avg_logprob": -0.22014846120561873, "compression_ratio": 1.8106995884773662, "no_speech_prob": 0.07926838099956512}, {"id": 177, "seek": 66764, "start": 686.4399999999999, "end": 690.72, "text": " So the Mambo has to learn first what was the system call and only then it can pass it to", "tokens": [51304, 407, 264, 19899, 1763, 575, 281, 1466, 700, 437, 390, 264, 1185, 818, 293, 787, 550, 309, 393, 1320, 309, 281, 51518], "temperature": 0.0, "avg_logprob": -0.22014846120561873, "compression_ratio": 1.8106995884773662, "no_speech_prob": 0.07926838099956512}, {"id": 178, "seek": 66764, "start": 690.72, "end": 693.72, "text": " the Linux kernel.", "tokens": [51518, 264, 18734, 28256, 13, 51668], "temperature": 0.0, "avg_logprob": -0.22014846120561873, "compression_ratio": 1.8106995884773662, "no_speech_prob": 0.07926838099956512}, {"id": 179, "seek": 69372, "start": 694.6800000000001, "end": 699.44, "text": " So that's also, I talked briefly about the architecture of Mambo, so we had the L flow", "tokens": [50412, 407, 300, 311, 611, 11, 286, 2825, 10515, 466, 264, 9482, 295, 19899, 1763, 11, 370, 321, 632, 264, 441, 3095, 50650], "temperature": 0.0, "avg_logprob": -0.27722184132721467, "compression_ratio": 1.7192307692307693, "no_speech_prob": 0.12415999919176102}, {"id": 180, "seek": 69372, "start": 699.44, "end": 703.1600000000001, "text": " there, we had the instruction encoder and encoder, two main elements, one free management", "tokens": [50650, 456, 11, 321, 632, 264, 10951, 2058, 19866, 293, 2058, 19866, 11, 732, 2135, 4959, 11, 472, 1737, 4592, 50836], "temperature": 0.0, "avg_logprob": -0.27722184132721467, "compression_ratio": 1.7192307692307693, "no_speech_prob": 0.12415999919176102}, {"id": 181, "seek": 69372, "start": 703.1600000000001, "end": 707.76, "text": " scanner, dispatcher and the code cache, and then we had a bit about the handling signals", "tokens": [50836, 30211, 11, 36729, 260, 293, 264, 3089, 19459, 11, 293, 550, 321, 632, 257, 857, 466, 264, 13175, 12354, 51066], "temperature": 0.0, "avg_logprob": -0.27722184132721467, "compression_ratio": 1.7192307692307693, "no_speech_prob": 0.12415999919176102}, {"id": 182, "seek": 69372, "start": 707.76, "end": 709.0400000000001, "text": " and system calls.", "tokens": [51066, 293, 1185, 5498, 13, 51130], "temperature": 0.0, "avg_logprob": -0.27722184132721467, "compression_ratio": 1.7192307692307693, "no_speech_prob": 0.12415999919176102}, {"id": 183, "seek": 69372, "start": 709.0400000000001, "end": 713.52, "text": " So that's, if you are going to just use Mambo to write your plugins and the tools probably", "tokens": [51130, 407, 300, 311, 11, 498, 291, 366, 516, 281, 445, 764, 19899, 1763, 281, 2464, 428, 33759, 293, 264, 3873, 1391, 51354], "temperature": 0.0, "avg_logprob": -0.27722184132721467, "compression_ratio": 1.7192307692307693, "no_speech_prob": 0.12415999919176102}, {"id": 184, "seek": 69372, "start": 713.52, "end": 718.9200000000001, "text": " you don't have to know all of that, it may help to know how Mambo works.", "tokens": [51354, 291, 500, 380, 362, 281, 458, 439, 295, 300, 11, 309, 815, 854, 281, 458, 577, 19899, 1763, 1985, 13, 51624], "temperature": 0.0, "avg_logprob": -0.27722184132721467, "compression_ratio": 1.7192307692307693, "no_speech_prob": 0.12415999919176102}, {"id": 185, "seek": 71892, "start": 718.92, "end": 725.4, "text": " And if you want to contribute to the internals of it, that hopefully will give you some rough", "tokens": [50364, 400, 498, 291, 528, 281, 10586, 281, 264, 2154, 1124, 295, 309, 11, 300, 4696, 486, 976, 291, 512, 5903, 50688], "temperature": 0.0, "avg_logprob": -0.2670709961339047, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.08123571425676346}, {"id": 186, "seek": 71892, "start": 725.4, "end": 728.4, "text": " idea how the system works.", "tokens": [50688, 1558, 577, 264, 1185, 1985, 13, 50838], "temperature": 0.0, "avg_logprob": -0.2670709961339047, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.08123571425676346}, {"id": 187, "seek": 71892, "start": 728.4, "end": 735.24, "text": " But now the bit probably people are more interested in is how we can write our own plugins, our", "tokens": [50838, 583, 586, 264, 857, 1391, 561, 366, 544, 3102, 294, 307, 577, 321, 393, 2464, 527, 1065, 33759, 11, 527, 51180], "temperature": 0.0, "avg_logprob": -0.2670709961339047, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.08123571425676346}, {"id": 188, "seek": 71892, "start": 735.24, "end": 737.24, "text": " own tools within our framework.", "tokens": [51180, 1065, 3873, 1951, 527, 8388, 13, 51280], "temperature": 0.0, "avg_logprob": -0.2670709961339047, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.08123571425676346}, {"id": 189, "seek": 71892, "start": 737.24, "end": 740.24, "text": " And for that I will pass the microphone to Alistair.", "tokens": [51280, 400, 337, 300, 286, 486, 1320, 264, 10952, 281, 967, 468, 1246, 13, 51430], "temperature": 0.0, "avg_logprob": -0.2670709961339047, "compression_ratio": 1.5435897435897437, "no_speech_prob": 0.08123571425676346}, {"id": 190, "seek": 74892, "start": 749.92, "end": 758.4399999999999, "text": " Hi, so yes, I will talk to you about the API, this is how you take Mambo and you build", "tokens": [50414, 2421, 11, 370, 2086, 11, 286, 486, 751, 281, 291, 466, 264, 9362, 11, 341, 307, 577, 291, 747, 19899, 1763, 293, 291, 1322, 50840], "temperature": 0.0, "avg_logprob": -0.1576732567378453, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.1249656081199646}, {"id": 191, "seek": 74892, "start": 758.4399999999999, "end": 761.4, "text": " your own tool on top of it.", "tokens": [50840, 428, 1065, 2290, 322, 1192, 295, 309, 13, 50988], "temperature": 0.0, "avg_logprob": -0.1576732567378453, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.1249656081199646}, {"id": 192, "seek": 74892, "start": 761.4, "end": 764.92, "text": " So this is where it actually gets really useful.", "tokens": [50988, 407, 341, 307, 689, 309, 767, 2170, 534, 4420, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1576732567378453, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.1249656081199646}, {"id": 193, "seek": 74892, "start": 764.92, "end": 771.36, "text": " So we've mentioned use cases but it's worth repeating.", "tokens": [51164, 407, 321, 600, 2835, 764, 3331, 457, 309, 311, 3163, 18617, 13, 51486], "temperature": 0.0, "avg_logprob": -0.1576732567378453, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.1249656081199646}, {"id": 194, "seek": 74892, "start": 771.36, "end": 777.4, "text": " We're talking about things like code analysis so you can build a control flow graph, you", "tokens": [51486, 492, 434, 1417, 466, 721, 411, 3089, 5215, 370, 291, 393, 1322, 257, 1969, 3095, 4295, 11, 291, 51788], "temperature": 0.0, "avg_logprob": -0.1576732567378453, "compression_ratio": 1.5123152709359606, "no_speech_prob": 0.1249656081199646}, {"id": 195, "seek": 77740, "start": 777.4, "end": 784.52, "text": " can generate new functionality, you can instrument code, you can analyze it, you can re-implement", "tokens": [50364, 393, 8460, 777, 14980, 11, 291, 393, 7198, 3089, 11, 291, 393, 12477, 309, 11, 291, 393, 319, 12, 332, 43704, 50720], "temperature": 0.0, "avg_logprob": -0.13553856400882497, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.008354822173714638}, {"id": 196, "seek": 77740, "start": 784.52, "end": 789.0799999999999, "text": " library functions, you can patch library functions, you can do all sorts because you can modify", "tokens": [50720, 6405, 6828, 11, 291, 393, 9972, 6405, 6828, 11, 291, 393, 360, 439, 7527, 570, 291, 393, 16927, 50948], "temperature": 0.0, "avg_logprob": -0.13553856400882497, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.008354822173714638}, {"id": 197, "seek": 77740, "start": 789.0799999999999, "end": 792.92, "text": " this running binary.", "tokens": [50948, 341, 2614, 17434, 13, 51140], "temperature": 0.0, "avg_logprob": -0.13553856400882497, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.008354822173714638}, {"id": 198, "seek": 77740, "start": 792.92, "end": 801.16, "text": " So Mambo's API exposes events, so it's event driven.", "tokens": [51140, 407, 19899, 1763, 311, 9362, 1278, 4201, 3931, 11, 370, 309, 311, 2280, 9555, 13, 51552], "temperature": 0.0, "avg_logprob": -0.13553856400882497, "compression_ratio": 1.6481481481481481, "no_speech_prob": 0.008354822173714638}, {"id": 199, "seek": 80116, "start": 801.16, "end": 809.68, "text": " So you as the user of this API define functions which you register as callbacks on these events.", "tokens": [50364, 407, 291, 382, 264, 4195, 295, 341, 9362, 6964, 6828, 597, 291, 7280, 382, 818, 17758, 322, 613, 3931, 13, 50790], "temperature": 0.0, "avg_logprob": -0.14215678109063043, "compression_ratio": 1.7633928571428572, "no_speech_prob": 0.2352069467306137}, {"id": 200, "seek": 80116, "start": 809.68, "end": 814.36, "text": " And when one of these events is encountered Mambo will trigger the callback and execute", "tokens": [50790, 400, 562, 472, 295, 613, 3931, 307, 20381, 19899, 1763, 486, 7875, 264, 818, 3207, 293, 14483, 51024], "temperature": 0.0, "avg_logprob": -0.14215678109063043, "compression_ratio": 1.7633928571428572, "no_speech_prob": 0.2352069467306137}, {"id": 201, "seek": 80116, "start": 814.36, "end": 817.0, "text": " the function that you registered to it.", "tokens": [51024, 264, 2445, 300, 291, 13968, 281, 309, 13, 51156], "temperature": 0.0, "avg_logprob": -0.14215678109063043, "compression_ratio": 1.7633928571428572, "no_speech_prob": 0.2352069467306137}, {"id": 202, "seek": 80116, "start": 817.0, "end": 822.36, "text": " So there are two categories of events, there's hosted application, runtime events.", "tokens": [51156, 407, 456, 366, 732, 10479, 295, 3931, 11, 456, 311, 19204, 3861, 11, 34474, 3931, 13, 51424], "temperature": 0.0, "avg_logprob": -0.14215678109063043, "compression_ratio": 1.7633928571428572, "no_speech_prob": 0.2352069467306137}, {"id": 203, "seek": 80116, "start": 822.36, "end": 828.52, "text": " So these are events that happen to the hosted application as it's being executed in the", "tokens": [51424, 407, 613, 366, 3931, 300, 1051, 281, 264, 19204, 3861, 382, 309, 311, 885, 17577, 294, 264, 51732], "temperature": 0.0, "avg_logprob": -0.14215678109063043, "compression_ratio": 1.7633928571428572, "no_speech_prob": 0.2352069467306137}, {"id": 204, "seek": 82852, "start": 828.52, "end": 829.6, "text": " code cache.", "tokens": [50364, 3089, 19459, 13, 50418], "temperature": 0.0, "avg_logprob": -0.1769458553459071, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.16644179821014404}, {"id": 205, "seek": 82852, "start": 829.6, "end": 835.8, "text": " So here we're talking things like system calls, thread creation and we have Mambo scan time", "tokens": [50418, 407, 510, 321, 434, 1417, 721, 411, 1185, 5498, 11, 7207, 8016, 293, 321, 362, 19899, 1763, 11049, 565, 50728], "temperature": 0.0, "avg_logprob": -0.1769458553459071, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.16644179821014404}, {"id": 206, "seek": 82852, "start": 835.8, "end": 841.68, "text": " events so these happen as Mambo is scanning instructions from the loaded elf into the", "tokens": [50728, 3931, 370, 613, 1051, 382, 19899, 1763, 307, 27019, 9415, 490, 264, 13210, 35565, 666, 264, 51022], "temperature": 0.0, "avg_logprob": -0.1769458553459071, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.16644179821014404}, {"id": 207, "seek": 82852, "start": 841.68, "end": 843.28, "text": " code cache.", "tokens": [51022, 3089, 19459, 13, 51102], "temperature": 0.0, "avg_logprob": -0.1769458553459071, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.16644179821014404}, {"id": 208, "seek": 82852, "start": 843.28, "end": 850.64, "text": " So this is something like pre-instruction, post-instruction, you can do stuff with these", "tokens": [51102, 407, 341, 307, 746, 411, 659, 12, 13911, 3826, 11, 2183, 12, 13911, 3826, 11, 291, 393, 360, 1507, 365, 613, 51470], "temperature": 0.0, "avg_logprob": -0.1769458553459071, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.16644179821014404}, {"id": 209, "seek": 82852, "start": 850.64, "end": 854.28, "text": " callbacks.", "tokens": [51470, 818, 17758, 13, 51652], "temperature": 0.0, "avg_logprob": -0.1769458553459071, "compression_ratio": 1.6629834254143647, "no_speech_prob": 0.16644179821014404}, {"id": 210, "seek": 85428, "start": 854.28, "end": 859.64, "text": " So as I was mentioning pre-instruction, post-instruction, this kind of gives you an idea, you can insert", "tokens": [50364, 407, 382, 286, 390, 18315, 659, 12, 13911, 3826, 11, 2183, 12, 13911, 3826, 11, 341, 733, 295, 2709, 291, 364, 1558, 11, 291, 393, 8969, 50632], "temperature": 0.0, "avg_logprob": -0.14113565591665414, "compression_ratio": 1.8670212765957446, "no_speech_prob": 0.0556301586329937}, {"id": 211, "seek": 85428, "start": 859.64, "end": 866.12, "text": " something before and after an instruction, before and after a basic block, before and", "tokens": [50632, 746, 949, 293, 934, 364, 10951, 11, 949, 293, 934, 257, 3875, 3461, 11, 949, 293, 50956], "temperature": 0.0, "avg_logprob": -0.14113565591665414, "compression_ratio": 1.8670212765957446, "no_speech_prob": 0.0556301586329937}, {"id": 212, "seek": 85428, "start": 866.12, "end": 867.4, "text": " after a thread.", "tokens": [50956, 934, 257, 7207, 13, 51020], "temperature": 0.0, "avg_logprob": -0.14113565591665414, "compression_ratio": 1.8670212765957446, "no_speech_prob": 0.0556301586329937}, {"id": 213, "seek": 85428, "start": 867.4, "end": 874.12, "text": " So you can see it can be very, very fine grained or it can be at a high level of abstraction", "tokens": [51020, 407, 291, 393, 536, 309, 393, 312, 588, 11, 588, 2489, 1295, 2001, 420, 309, 393, 312, 412, 257, 1090, 1496, 295, 37765, 51356], "temperature": 0.0, "avg_logprob": -0.14113565591665414, "compression_ratio": 1.8670212765957446, "no_speech_prob": 0.0556301586329937}, {"id": 214, "seek": 85428, "start": 874.12, "end": 876.92, "text": " and of course before and after an application runs.", "tokens": [51356, 293, 295, 1164, 949, 293, 934, 364, 3861, 6676, 13, 51496], "temperature": 0.0, "avg_logprob": -0.14113565591665414, "compression_ratio": 1.8670212765957446, "no_speech_prob": 0.0556301586329937}, {"id": 215, "seek": 87692, "start": 876.92, "end": 884.12, "text": " So taking all of this, you see a slightly chopped off diagram there but it kind of gives", "tokens": [50364, 407, 1940, 439, 295, 341, 11, 291, 536, 257, 4748, 16497, 766, 10686, 456, 457, 309, 733, 295, 2709, 50724], "temperature": 0.0, "avg_logprob": -0.13478976559926228, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0706632062792778}, {"id": 216, "seek": 87692, "start": 884.12, "end": 889.12, "text": " you an idea of the order in which these callbacks will be executed.", "tokens": [50724, 291, 364, 1558, 295, 264, 1668, 294, 597, 613, 818, 17758, 486, 312, 17577, 13, 50974], "temperature": 0.0, "avg_logprob": -0.13478976559926228, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0706632062792778}, {"id": 217, "seek": 87692, "start": 889.12, "end": 894.56, "text": " So at the very highest level, at the very start you have the initialization function", "tokens": [50974, 407, 412, 264, 588, 6343, 1496, 11, 412, 264, 588, 722, 291, 362, 264, 5883, 2144, 2445, 51246], "temperature": 0.0, "avg_logprob": -0.13478976559926228, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0706632062792778}, {"id": 218, "seek": 87692, "start": 894.56, "end": 900.68, "text": " which is where you set up a plugin and then you'll have pre-thread so that's quite high", "tokens": [51246, 597, 307, 689, 291, 992, 493, 257, 23407, 293, 550, 291, 603, 362, 659, 12, 392, 2538, 370, 300, 311, 1596, 1090, 51552], "temperature": 0.0, "avg_logprob": -0.13478976559926228, "compression_ratio": 1.5970873786407767, "no_speech_prob": 0.0706632062792778}, {"id": 219, "seek": 90068, "start": 900.68, "end": 908.2399999999999, "text": " level, pre-basic block, you also have pre-function and so it kind of gets narrower and narrower", "tokens": [50364, 1496, 11, 659, 12, 16342, 299, 3461, 11, 291, 611, 362, 659, 12, 22845, 293, 370, 309, 733, 295, 2170, 46751, 293, 46751, 50742], "temperature": 0.0, "avg_logprob": -0.14000497381371188, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.40710097551345825}, {"id": 220, "seek": 90068, "start": 908.2399999999999, "end": 912.3599999999999, "text": " and then it kind of expands out after these things have executed.", "tokens": [50742, 293, 550, 309, 733, 295, 33706, 484, 934, 613, 721, 362, 17577, 13, 50948], "temperature": 0.0, "avg_logprob": -0.14000497381371188, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.40710097551345825}, {"id": 221, "seek": 90068, "start": 912.3599999999999, "end": 918.16, "text": " So this is something that's important to bear in mind.", "tokens": [50948, 407, 341, 307, 746, 300, 311, 1021, 281, 6155, 294, 1575, 13, 51238], "temperature": 0.0, "avg_logprob": -0.14000497381371188, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.40710097551345825}, {"id": 222, "seek": 90068, "start": 918.16, "end": 922.68, "text": " So how do you actually use Mambo's API?", "tokens": [51238, 407, 577, 360, 291, 767, 764, 19899, 1763, 311, 9362, 30, 51464], "temperature": 0.0, "avg_logprob": -0.14000497381371188, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.40710097551345825}, {"id": 223, "seek": 90068, "start": 922.68, "end": 925.52, "text": " I'm going to talk to you about the following things.", "tokens": [51464, 286, 478, 516, 281, 751, 281, 291, 466, 264, 3480, 721, 13, 51606], "temperature": 0.0, "avg_logprob": -0.14000497381371188, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.40710097551345825}, {"id": 224, "seek": 92552, "start": 925.52, "end": 931.96, "text": " So the functions that you'll need to register your callbacks, the functions that perform", "tokens": [50364, 407, 264, 6828, 300, 291, 603, 643, 281, 7280, 428, 818, 17758, 11, 264, 6828, 300, 2042, 50686], "temperature": 0.0, "avg_logprob": -0.13408652438393123, "compression_ratio": 1.828125, "no_speech_prob": 0.01197491679340601}, {"id": 225, "seek": 92552, "start": 931.96, "end": 939.12, "text": " code analysis, the functions that perform instrumentation, so how you actually emit code into the code", "tokens": [50686, 3089, 5215, 11, 264, 6828, 300, 2042, 7198, 399, 11, 370, 577, 291, 767, 32084, 3089, 666, 264, 3089, 51044], "temperature": 0.0, "avg_logprob": -0.13408652438393123, "compression_ratio": 1.828125, "no_speech_prob": 0.01197491679340601}, {"id": 226, "seek": 92552, "start": 939.12, "end": 945.3199999999999, "text": " cache and then there are various helper functions which you can use.", "tokens": [51044, 19459, 293, 550, 456, 366, 3683, 36133, 6828, 597, 291, 393, 764, 13, 51354], "temperature": 0.0, "avg_logprob": -0.13408652438393123, "compression_ratio": 1.828125, "no_speech_prob": 0.01197491679340601}, {"id": 227, "seek": 92552, "start": 945.3199999999999, "end": 950.12, "text": " So the first thing you need to do is initialize your plugin and this is done in the plugin", "tokens": [51354, 407, 264, 700, 551, 291, 643, 281, 360, 307, 5883, 1125, 428, 23407, 293, 341, 307, 1096, 294, 264, 23407, 51594], "temperature": 0.0, "avg_logprob": -0.13408652438393123, "compression_ratio": 1.828125, "no_speech_prob": 0.01197491679340601}, {"id": 228, "seek": 95012, "start": 950.12, "end": 954.4, "text": " constructor function and there are two main things that you do here.", "tokens": [50364, 47479, 2445, 293, 456, 366, 732, 2135, 721, 300, 291, 360, 510, 13, 50578], "temperature": 0.0, "avg_logprob": -0.14107095189841398, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.19845998287200928}, {"id": 229, "seek": 95012, "start": 954.4, "end": 961.44, "text": " You create a Mambo context which is a global data structure which holds the current state", "tokens": [50578, 509, 1884, 257, 19899, 1763, 4319, 597, 307, 257, 4338, 1412, 3877, 597, 9190, 264, 2190, 1785, 50930], "temperature": 0.0, "avg_logprob": -0.14107095189841398, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.19845998287200928}, {"id": 230, "seek": 95012, "start": 961.44, "end": 969.8, "text": " of Mambo and also the application that's being executed by Mambo and pretty much all of Mambo's", "tokens": [50930, 295, 19899, 1763, 293, 611, 264, 3861, 300, 311, 885, 17577, 538, 19899, 1763, 293, 1238, 709, 439, 295, 19899, 1763, 311, 51348], "temperature": 0.0, "avg_logprob": -0.14107095189841398, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.19845998287200928}, {"id": 231, "seek": 95012, "start": 969.8, "end": 975.96, "text": " helper functions will use this context to get for instance the current instruction that", "tokens": [51348, 36133, 6828, 486, 764, 341, 4319, 281, 483, 337, 5197, 264, 2190, 10951, 300, 51656], "temperature": 0.0, "avg_logprob": -0.14107095189841398, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.19845998287200928}, {"id": 232, "seek": 95012, "start": 975.96, "end": 978.72, "text": " you're looking at.", "tokens": [51656, 291, 434, 1237, 412, 13, 51794], "temperature": 0.0, "avg_logprob": -0.14107095189841398, "compression_ratio": 1.7109004739336493, "no_speech_prob": 0.19845998287200928}, {"id": 233, "seek": 97872, "start": 978.72, "end": 981.48, "text": " And this is also where you'll register callbacks.", "tokens": [50364, 400, 341, 307, 611, 689, 291, 603, 7280, 818, 17758, 13, 50502], "temperature": 0.0, "avg_logprob": -0.18134908552293655, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.007222047075629234}, {"id": 234, "seek": 97872, "start": 981.48, "end": 986.36, "text": " So for instance here we have Mambo register pre-instruction callback.", "tokens": [50502, 407, 337, 5197, 510, 321, 362, 19899, 1763, 7280, 659, 12, 13911, 3826, 818, 3207, 13, 50746], "temperature": 0.0, "avg_logprob": -0.18134908552293655, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.007222047075629234}, {"id": 235, "seek": 97872, "start": 986.36, "end": 992.88, "text": " So before an instruction is actually scanned into the code cache something that you register", "tokens": [50746, 407, 949, 364, 10951, 307, 767, 45089, 666, 264, 3089, 19459, 746, 300, 291, 7280, 51072], "temperature": 0.0, "avg_logprob": -0.18134908552293655, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.007222047075629234}, {"id": 236, "seek": 97872, "start": 992.88, "end": 997.8000000000001, "text": " here will execute.", "tokens": [51072, 510, 486, 14483, 13, 51318], "temperature": 0.0, "avg_logprob": -0.18134908552293655, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.007222047075629234}, {"id": 237, "seek": 97872, "start": 997.8000000000001, "end": 1006.36, "text": " And to register callbacks it follows this signature so you have Mambo register then you have an", "tokens": [51318, 400, 281, 7280, 818, 17758, 309, 10002, 341, 13397, 370, 291, 362, 19899, 1763, 7280, 550, 291, 362, 364, 51746], "temperature": 0.0, "avg_logprob": -0.18134908552293655, "compression_ratio": 1.7580645161290323, "no_speech_prob": 0.007222047075629234}, {"id": 238, "seek": 100636, "start": 1006.36, "end": 1010.96, "text": " event time so that's pre or post something happening then you have the event so this", "tokens": [50364, 2280, 565, 370, 300, 311, 659, 420, 2183, 746, 2737, 550, 291, 362, 264, 2280, 370, 341, 50594], "temperature": 0.0, "avg_logprob": -0.14492165247599284, "compression_ratio": 1.7564766839378239, "no_speech_prob": 0.004827697295695543}, {"id": 239, "seek": 100636, "start": 1010.96, "end": 1015.16, "text": " can be Mambo pre-instruction callback.", "tokens": [50594, 393, 312, 19899, 1763, 659, 12, 13911, 3826, 818, 3207, 13, 50804], "temperature": 0.0, "avg_logprob": -0.14492165247599284, "compression_ratio": 1.7564766839378239, "no_speech_prob": 0.004827697295695543}, {"id": 240, "seek": 100636, "start": 1015.16, "end": 1021.2, "text": " So it's quite easy to remember that way.", "tokens": [50804, 407, 309, 311, 1596, 1858, 281, 1604, 300, 636, 13, 51106], "temperature": 0.0, "avg_logprob": -0.14492165247599284, "compression_ratio": 1.7564766839378239, "no_speech_prob": 0.004827697295695543}, {"id": 241, "seek": 100636, "start": 1021.2, "end": 1026.2, "text": " So you've registered your callback so let's say we're building a plugin that counts the", "tokens": [51106, 407, 291, 600, 13968, 428, 818, 3207, 370, 718, 311, 584, 321, 434, 2390, 257, 23407, 300, 14893, 264, 51356], "temperature": 0.0, "avg_logprob": -0.14492165247599284, "compression_ratio": 1.7564766839378239, "no_speech_prob": 0.004827697295695543}, {"id": 242, "seek": 100636, "start": 1026.2, "end": 1028.6, "text": " number of branches that are executed.", "tokens": [51356, 1230, 295, 14770, 300, 366, 17577, 13, 51476], "temperature": 0.0, "avg_logprob": -0.14492165247599284, "compression_ratio": 1.7564766839378239, "no_speech_prob": 0.004827697295695543}, {"id": 243, "seek": 100636, "start": 1028.6, "end": 1034.4, "text": " So you've registered a pre-instruction callback.", "tokens": [51476, 407, 291, 600, 13968, 257, 659, 12, 13911, 3826, 818, 3207, 13, 51766], "temperature": 0.0, "avg_logprob": -0.14492165247599284, "compression_ratio": 1.7564766839378239, "no_speech_prob": 0.004827697295695543}, {"id": 244, "seek": 103440, "start": 1034.4, "end": 1039.72, "text": " So now Mambo's scanning things and your pre-instruction callback has executed.", "tokens": [50364, 407, 586, 19899, 1763, 311, 27019, 721, 293, 428, 659, 12, 13911, 3826, 818, 3207, 575, 17577, 13, 50630], "temperature": 0.0, "avg_logprob": -0.11927413005454868, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.141681507229805}, {"id": 245, "seek": 103440, "start": 1039.72, "end": 1043.2800000000002, "text": " So one of the first things you're going to want to do is use a code analysis function.", "tokens": [50630, 407, 472, 295, 264, 700, 721, 291, 434, 516, 281, 528, 281, 360, 307, 764, 257, 3089, 5215, 2445, 13, 50808], "temperature": 0.0, "avg_logprob": -0.11927413005454868, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.141681507229805}, {"id": 246, "seek": 103440, "start": 1043.2800000000002, "end": 1048.3200000000002, "text": " You're going to want to know which instruction am I looking at.", "tokens": [50808, 509, 434, 516, 281, 528, 281, 458, 597, 10951, 669, 286, 1237, 412, 13, 51060], "temperature": 0.0, "avg_logprob": -0.11927413005454868, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.141681507229805}, {"id": 247, "seek": 103440, "start": 1048.3200000000002, "end": 1054.2800000000002, "text": " So you have things like Mambo get branch type, Mambo get condition which would for instance", "tokens": [51060, 407, 291, 362, 721, 411, 19899, 1763, 483, 9819, 2010, 11, 19899, 1763, 483, 4188, 597, 576, 337, 5197, 51358], "temperature": 0.0, "avg_logprob": -0.11927413005454868, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.141681507229805}, {"id": 248, "seek": 103440, "start": 1054.2800000000002, "end": 1060.24, "text": " give you the condition of the branch that you're looking at if it's a conditional branch.", "tokens": [51358, 976, 291, 264, 4188, 295, 264, 9819, 300, 291, 434, 1237, 412, 498, 309, 311, 257, 27708, 9819, 13, 51656], "temperature": 0.0, "avg_logprob": -0.11927413005454868, "compression_ratio": 1.8348214285714286, "no_speech_prob": 0.141681507229805}, {"id": 249, "seek": 106024, "start": 1060.24, "end": 1067.0, "text": " So these give you information that you can use and choose to act on.", "tokens": [50364, 407, 613, 976, 291, 1589, 300, 291, 393, 764, 293, 2826, 281, 605, 322, 13, 50702], "temperature": 0.0, "avg_logprob": -0.12073610810672536, "compression_ratio": 1.688235294117647, "no_speech_prob": 0.017530130222439766}, {"id": 250, "seek": 106024, "start": 1067.0, "end": 1074.68, "text": " So the function signature of these analysis functions follows Mambo action so that would", "tokens": [50702, 407, 264, 2445, 13397, 295, 613, 5215, 6828, 10002, 19899, 1763, 3069, 370, 300, 576, 51086], "temperature": 0.0, "avg_logprob": -0.12073610810672536, "compression_ratio": 1.688235294117647, "no_speech_prob": 0.017530130222439766}, {"id": 251, "seek": 106024, "start": 1074.68, "end": 1079.84, "text": " be get set is and then the information.", "tokens": [51086, 312, 483, 992, 307, 293, 550, 264, 1589, 13, 51344], "temperature": 0.0, "avg_logprob": -0.12073610810672536, "compression_ratio": 1.688235294117647, "no_speech_prob": 0.017530130222439766}, {"id": 252, "seek": 106024, "start": 1079.84, "end": 1088.88, "text": " So Mambo get function type, Mambo get branch type even relating back to our example would", "tokens": [51344, 407, 19899, 1763, 483, 2445, 2010, 11, 19899, 1763, 483, 9819, 2010, 754, 23968, 646, 281, 527, 1365, 576, 51796], "temperature": 0.0, "avg_logprob": -0.12073610810672536, "compression_ratio": 1.688235294117647, "no_speech_prob": 0.017530130222439766}, {"id": 253, "seek": 108888, "start": 1088.88, "end": 1092.2, "text": " get you the type of the branch that you're looking at.", "tokens": [50364, 483, 291, 264, 2010, 295, 264, 9819, 300, 291, 434, 1237, 412, 13, 50530], "temperature": 0.0, "avg_logprob": -0.11737922827402751, "compression_ratio": 1.7964601769911503, "no_speech_prob": 0.020168254151940346}, {"id": 254, "seek": 108888, "start": 1092.2, "end": 1099.6000000000001, "text": " So bringing all of this together into a simplified plugin we have the constructor where we initialize", "tokens": [50530, 407, 5062, 439, 295, 341, 1214, 666, 257, 26335, 23407, 321, 362, 264, 47479, 689, 321, 5883, 1125, 50900], "temperature": 0.0, "avg_logprob": -0.11737922827402751, "compression_ratio": 1.7964601769911503, "no_speech_prob": 0.020168254151940346}, {"id": 255, "seek": 108888, "start": 1099.6000000000001, "end": 1106.8400000000001, "text": " context and we register a pre-instruction callback and when that's executed we get the", "tokens": [50900, 4319, 293, 321, 7280, 257, 659, 12, 13911, 3826, 818, 3207, 293, 562, 300, 311, 17577, 321, 483, 264, 51262], "temperature": 0.0, "avg_logprob": -0.11737922827402751, "compression_ratio": 1.7964601769911503, "no_speech_prob": 0.020168254151940346}, {"id": 256, "seek": 108888, "start": 1106.8400000000001, "end": 1111.88, "text": " branch type and then based on what type of branch it is we do something.", "tokens": [51262, 9819, 2010, 293, 550, 2361, 322, 437, 2010, 295, 9819, 309, 307, 321, 360, 746, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11737922827402751, "compression_ratio": 1.7964601769911503, "no_speech_prob": 0.020168254151940346}, {"id": 257, "seek": 108888, "start": 1111.88, "end": 1117.44, "text": " It's also worth pointing out that the branch types that we're looking at here are generic", "tokens": [51514, 467, 311, 611, 3163, 12166, 484, 300, 264, 9819, 3467, 300, 321, 434, 1237, 412, 510, 366, 19577, 51792], "temperature": 0.0, "avg_logprob": -0.11737922827402751, "compression_ratio": 1.7964601769911503, "no_speech_prob": 0.020168254151940346}, {"id": 258, "seek": 111744, "start": 1117.48, "end": 1126.4, "text": " so that's how it is portable between architectures.", "tokens": [50366, 370, 300, 311, 577, 309, 307, 21800, 1296, 6331, 1303, 13, 50812], "temperature": 0.0, "avg_logprob": -0.1961230777558826, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.06349087506532669}, {"id": 259, "seek": 111744, "start": 1126.4, "end": 1130.0, "text": " So you've found out you're looking at a branch.", "tokens": [50812, 407, 291, 600, 1352, 484, 291, 434, 1237, 412, 257, 9819, 13, 50992], "temperature": 0.0, "avg_logprob": -0.1961230777558826, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.06349087506532669}, {"id": 260, "seek": 111744, "start": 1130.0, "end": 1133.0800000000002, "text": " Now you're going to actually want to emit instrumentation.", "tokens": [50992, 823, 291, 434, 516, 281, 767, 528, 281, 32084, 7198, 399, 13, 51146], "temperature": 0.0, "avg_logprob": -0.1961230777558826, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.06349087506532669}, {"id": 261, "seek": 111744, "start": 1133.0800000000002, "end": 1137.88, "text": " So this is instructions that you can put into the code cache to do something.", "tokens": [51146, 407, 341, 307, 9415, 300, 291, 393, 829, 666, 264, 3089, 19459, 281, 360, 746, 13, 51386], "temperature": 0.0, "avg_logprob": -0.1961230777558826, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.06349087506532669}, {"id": 262, "seek": 111744, "start": 1137.88, "end": 1143.92, "text": " So for instance we have emit64 counter increments so this is how you can tell Mambo to emit", "tokens": [51386, 407, 337, 5197, 321, 362, 32084, 19395, 5682, 1946, 1117, 370, 341, 307, 577, 291, 393, 980, 19899, 1763, 281, 32084, 51688], "temperature": 0.0, "avg_logprob": -0.1961230777558826, "compression_ratio": 1.607843137254902, "no_speech_prob": 0.06349087506532669}, {"id": 263, "seek": 114392, "start": 1143.92, "end": 1148.48, "text": " the instructions that you need to increment a counter.", "tokens": [50364, 264, 9415, 300, 291, 643, 281, 26200, 257, 5682, 13, 50592], "temperature": 0.0, "avg_logprob": -0.1523392524248288, "compression_ratio": 1.755, "no_speech_prob": 0.031531717628240585}, {"id": 264, "seek": 114392, "start": 1148.48, "end": 1153.44, "text": " You can emit pushes, you can emit pops, you can set registers so you can do all sorts", "tokens": [50592, 509, 393, 32084, 21020, 11, 291, 393, 32084, 16795, 11, 291, 393, 992, 38351, 370, 291, 393, 360, 439, 7527, 50840], "temperature": 0.0, "avg_logprob": -0.1523392524248288, "compression_ratio": 1.755, "no_speech_prob": 0.031531717628240585}, {"id": 265, "seek": 114392, "start": 1153.44, "end": 1157.0, "text": " of things and there are two main types.", "tokens": [50840, 295, 721, 293, 456, 366, 732, 2135, 3467, 13, 51018], "temperature": 0.0, "avg_logprob": -0.1523392524248288, "compression_ratio": 1.755, "no_speech_prob": 0.031531717628240585}, {"id": 266, "seek": 114392, "start": 1157.0, "end": 1165.0800000000002, "text": " You have emit instructions so that would be for example emit increment so that's more", "tokens": [51018, 509, 362, 32084, 9415, 370, 300, 576, 312, 337, 1365, 32084, 26200, 370, 300, 311, 544, 51422], "temperature": 0.0, "avg_logprob": -0.1523392524248288, "compression_ratio": 1.755, "no_speech_prob": 0.031531717628240585}, {"id": 267, "seek": 114392, "start": 1165.0800000000002, "end": 1172.3600000000001, "text": " portable because we implement the backend tell Mambo which instructions to emit into", "tokens": [51422, 21800, 570, 321, 4445, 264, 38087, 980, 19899, 1763, 597, 9415, 281, 32084, 666, 51786], "temperature": 0.0, "avg_logprob": -0.1523392524248288, "compression_ratio": 1.755, "no_speech_prob": 0.031531717628240585}, {"id": 268, "seek": 117236, "start": 1172.36, "end": 1182.84, "text": " the code cache for that.", "tokens": [50364, 264, 3089, 19459, 337, 300, 13, 50888], "temperature": 0.0, "avg_logprob": -0.19804744197897714, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.0029271862003952265}, {"id": 269, "seek": 117236, "start": 1182.84, "end": 1187.6799999999998, "text": " And then we have the more architecture dependent ones which are emit risk five instructions", "tokens": [50888, 400, 550, 321, 362, 264, 544, 9482, 12334, 2306, 597, 366, 32084, 3148, 1732, 9415, 51130], "temperature": 0.0, "avg_logprob": -0.19804744197897714, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.0029271862003952265}, {"id": 270, "seek": 117236, "start": 1187.6799999999998, "end": 1193.08, "text": " so this is when you know exactly what you are trying to achieve with the plugin.", "tokens": [51130, 370, 341, 307, 562, 291, 458, 2293, 437, 291, 366, 1382, 281, 4584, 365, 264, 23407, 13, 51400], "temperature": 0.0, "avg_logprob": -0.19804744197897714, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.0029271862003952265}, {"id": 271, "seek": 117236, "start": 1193.08, "end": 1197.4399999999998, "text": " Let's say you need to emit an arithmetic instruction.", "tokens": [51400, 961, 311, 584, 291, 643, 281, 32084, 364, 42973, 10951, 13, 51618], "temperature": 0.0, "avg_logprob": -0.19804744197897714, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.0029271862003952265}, {"id": 272, "seek": 117236, "start": 1197.4399999999998, "end": 1202.1599999999999, "text": " You can do that until Mambo emit this arithmetic instruction.", "tokens": [51618, 509, 393, 360, 300, 1826, 19899, 1763, 32084, 341, 42973, 10951, 13, 51854], "temperature": 0.0, "avg_logprob": -0.19804744197897714, "compression_ratio": 1.6302083333333333, "no_speech_prob": 0.0029271862003952265}, {"id": 273, "seek": 120216, "start": 1202.16, "end": 1206.8400000000001, "text": " The only drawback to this is that it's riskier doing that.", "tokens": [50364, 440, 787, 2642, 3207, 281, 341, 307, 300, 309, 311, 3148, 811, 884, 300, 13, 50598], "temperature": 0.0, "avg_logprob": -0.12051274310583356, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.013703420758247375}, {"id": 274, "seek": 120216, "start": 1206.8400000000001, "end": 1211.8400000000001, "text": " You have to make sure that you save and restore registers and that kind of thing which we", "tokens": [50598, 509, 362, 281, 652, 988, 300, 291, 3155, 293, 15227, 38351, 293, 300, 733, 295, 551, 597, 321, 50848], "temperature": 0.0, "avg_logprob": -0.12051274310583356, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.013703420758247375}, {"id": 275, "seek": 120216, "start": 1211.8400000000001, "end": 1218.3600000000001, "text": " do for you in the safer generic ones.", "tokens": [50848, 360, 337, 291, 294, 264, 15856, 19577, 2306, 13, 51174], "temperature": 0.0, "avg_logprob": -0.12051274310583356, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.013703420758247375}, {"id": 276, "seek": 120216, "start": 1218.3600000000001, "end": 1224.0800000000002, "text": " And then finally you have additional helper functions so for instance Mambo will expose", "tokens": [51174, 400, 550, 2721, 291, 362, 4497, 36133, 6828, 370, 337, 5197, 19899, 1763, 486, 19219, 51460], "temperature": 0.0, "avg_logprob": -0.12051274310583356, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.013703420758247375}, {"id": 277, "seek": 120216, "start": 1224.0800000000002, "end": 1229.72, "text": " a hash table which is really useful for when you're instrumenting code and you have lots", "tokens": [51460, 257, 22019, 3199, 597, 307, 534, 4420, 337, 562, 291, 434, 7198, 278, 3089, 293, 291, 362, 3195, 51742], "temperature": 0.0, "avg_logprob": -0.12051274310583356, "compression_ratio": 1.6205357142857142, "no_speech_prob": 0.013703420758247375}, {"id": 278, "seek": 122972, "start": 1229.72, "end": 1233.28, "text": " of data to associate with different addresses.", "tokens": [50364, 295, 1412, 281, 14644, 365, 819, 16862, 13, 50542], "temperature": 0.0, "avg_logprob": -0.13695869690332657, "compression_ratio": 1.5678391959798994, "no_speech_prob": 0.19158534705638885}, {"id": 279, "seek": 122972, "start": 1233.28, "end": 1243.48, "text": " So we have hash tables, we have Mambo allocator so these will help you to write your plugin.", "tokens": [50542, 407, 321, 362, 22019, 8020, 11, 321, 362, 19899, 1763, 12660, 1639, 370, 613, 486, 854, 291, 281, 2464, 428, 23407, 13, 51052], "temperature": 0.0, "avg_logprob": -0.13695869690332657, "compression_ratio": 1.5678391959798994, "no_speech_prob": 0.19158534705638885}, {"id": 280, "seek": 122972, "start": 1243.48, "end": 1250.28, "text": " And then finally it can be very difficult to get your head around this.", "tokens": [51052, 400, 550, 2721, 309, 393, 312, 588, 2252, 281, 483, 428, 1378, 926, 341, 13, 51392], "temperature": 0.0, "avg_logprob": -0.13695869690332657, "compression_ratio": 1.5678391959798994, "no_speech_prob": 0.19158534705638885}, {"id": 281, "seek": 122972, "start": 1250.28, "end": 1256.4, "text": " It took me a while to fully understand it and that is the difference between scan time", "tokens": [51392, 467, 1890, 385, 257, 1339, 281, 4498, 1223, 309, 293, 300, 307, 264, 2649, 1296, 11049, 565, 51698], "temperature": 0.0, "avg_logprob": -0.13695869690332657, "compression_ratio": 1.5678391959798994, "no_speech_prob": 0.19158534705638885}, {"id": 282, "seek": 122972, "start": 1256.4, "end": 1257.4, "text": " and run time.", "tokens": [51698, 293, 1190, 565, 13, 51748], "temperature": 0.0, "avg_logprob": -0.13695869690332657, "compression_ratio": 1.5678391959798994, "no_speech_prob": 0.19158534705638885}, {"id": 283, "seek": 125740, "start": 1257.64, "end": 1262.2800000000002, "text": " So when we talk about scan time we talk about something that happens once when Mambo is", "tokens": [50376, 407, 562, 321, 751, 466, 11049, 565, 321, 751, 466, 746, 300, 2314, 1564, 562, 19899, 1763, 307, 50608], "temperature": 0.0, "avg_logprob": -0.11476768493652344, "compression_ratio": 1.8368421052631578, "no_speech_prob": 0.004500917159020901}, {"id": 284, "seek": 125740, "start": 1262.2800000000002, "end": 1269.64, "text": " scanning something and run time is when that scanned code is executing in the code cache", "tokens": [50608, 27019, 746, 293, 1190, 565, 307, 562, 300, 45089, 3089, 307, 32368, 294, 264, 3089, 19459, 50976], "temperature": 0.0, "avg_logprob": -0.11476768493652344, "compression_ratio": 1.8368421052631578, "no_speech_prob": 0.004500917159020901}, {"id": 285, "seek": 125740, "start": 1269.64, "end": 1275.4, "text": " and the reason this difference matters is if you are for instance counting the number", "tokens": [50976, 293, 264, 1778, 341, 2649, 7001, 307, 498, 291, 366, 337, 5197, 13251, 264, 1230, 51264], "temperature": 0.0, "avg_logprob": -0.11476768493652344, "compression_ratio": 1.8368421052631578, "no_speech_prob": 0.004500917159020901}, {"id": 286, "seek": 125740, "start": 1275.4, "end": 1282.24, "text": " of branches that are executed at scan time you need to emit instructions into the code", "tokens": [51264, 295, 14770, 300, 366, 17577, 412, 11049, 565, 291, 643, 281, 32084, 9415, 666, 264, 3089, 51606], "temperature": 0.0, "avg_logprob": -0.11476768493652344, "compression_ratio": 1.8368421052631578, "no_speech_prob": 0.004500917159020901}, {"id": 287, "seek": 128224, "start": 1282.28, "end": 1288.64, "text": " cache to increment a counter so that when that code is executing you get the actual", "tokens": [50366, 19459, 281, 26200, 257, 5682, 370, 300, 562, 300, 3089, 307, 32368, 291, 483, 264, 3539, 50684], "temperature": 0.0, "avg_logprob": -0.2606760915120443, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.020069904625415802}, {"id": 288, "seek": 128224, "start": 1288.64, "end": 1292.24, "text": " number of instructions, times that instruction is executed.", "tokens": [50684, 1230, 295, 9415, 11, 1413, 300, 10951, 307, 17577, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2606760915120443, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.020069904625415802}, {"id": 289, "seek": 128224, "start": 1296.24, "end": 1299.84, "text": " Okay so it's time for an example.", "tokens": [51064, 1033, 370, 309, 311, 565, 337, 364, 1365, 13, 51244], "temperature": 0.0, "avg_logprob": -0.2606760915120443, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.020069904625415802}, {"id": 290, "seek": 128224, "start": 1299.84, "end": 1304.88, "text": " The code I'm about to show you can find on the Mambo repository in the plugins directory", "tokens": [51244, 440, 3089, 286, 478, 466, 281, 855, 291, 393, 915, 322, 264, 19899, 1763, 25841, 294, 264, 33759, 21120, 51496], "temperature": 0.0, "avg_logprob": -0.2606760915120443, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.020069904625415802}, {"id": 291, "seek": 128224, "start": 1304.88, "end": 1309.36, "text": " and it's time for a live demo.", "tokens": [51496, 293, 309, 311, 565, 337, 257, 1621, 10723, 13, 51720], "temperature": 0.0, "avg_logprob": -0.2606760915120443, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.020069904625415802}, {"id": 292, "seek": 130936, "start": 1309.4799999999998, "end": 1319.6, "text": " So I will be running Vim under Mambo on risk 5 to show you the source code of the branch", "tokens": [50370, 407, 286, 486, 312, 2614, 691, 332, 833, 19899, 1763, 322, 3148, 1025, 281, 855, 291, 264, 4009, 3089, 295, 264, 9819, 50876], "temperature": 0.0, "avg_logprob": -0.25318493843078616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002839952940121293}, {"id": 293, "seek": 130936, "start": 1319.6, "end": 1326.3999999999999, "text": " counter plugin which is something that you can run and is in the Mambo repository and", "tokens": [50876, 5682, 23407, 597, 307, 746, 300, 291, 393, 1190, 293, 307, 294, 264, 19899, 1763, 25841, 293, 51216], "temperature": 0.0, "avg_logprob": -0.25318493843078616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002839952940121293}, {"id": 294, "seek": 130936, "start": 1326.3999999999999, "end": 1332.4399999999998, "text": " whilst running Vim I will also have enabled the branch counter plugin so you can see it", "tokens": [51216, 18534, 2614, 691, 332, 286, 486, 611, 362, 15172, 264, 9819, 5682, 23407, 370, 291, 393, 536, 309, 51518], "temperature": 0.0, "avg_logprob": -0.25318493843078616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002839952940121293}, {"id": 295, "seek": 130936, "start": 1332.4399999999998, "end": 1333.4399999999998, "text": " in action.", "tokens": [51518, 294, 3069, 13, 51568], "temperature": 0.0, "avg_logprob": -0.25318493843078616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002839952940121293}, {"id": 296, "seek": 130936, "start": 1333.4399999999998, "end": 1336.4399999999998, "text": " Sounds very convoluted I know.", "tokens": [51568, 14576, 588, 3754, 2308, 292, 286, 458, 13, 51718], "temperature": 0.0, "avg_logprob": -0.25318493843078616, "compression_ratio": 1.6432432432432433, "no_speech_prob": 0.002839952940121293}, {"id": 297, "seek": 133644, "start": 1336.52, "end": 1348.52, "text": " Okay so here we run Mambo and I don't know how well you can actually see that but...", "tokens": [50368, 1033, 370, 510, 321, 1190, 19899, 1763, 293, 286, 500, 380, 458, 577, 731, 291, 393, 767, 536, 300, 457, 485, 50968], "temperature": 0.0, "avg_logprob": -0.4795991860184015, "compression_ratio": 1.2396694214876034, "no_speech_prob": 0.06231382116675377}, {"id": 298, "seek": 133644, "start": 1355.52, "end": 1357.52, "text": " Command shift plus.", "tokens": [51318, 17901, 5513, 1804, 13, 51418], "temperature": 0.0, "avg_logprob": -0.4795991860184015, "compression_ratio": 1.2396694214876034, "no_speech_prob": 0.06231382116675377}, {"id": 299, "seek": 133644, "start": 1357.52, "end": 1359.52, "text": " Oh command shift.", "tokens": [51418, 876, 5622, 5513, 13, 51518], "temperature": 0.0, "avg_logprob": -0.4795991860184015, "compression_ratio": 1.2396694214876034, "no_speech_prob": 0.06231382116675377}, {"id": 300, "seek": 133644, "start": 1361.52, "end": 1363.52, "text": " Hooray.", "tokens": [51618, 3631, 284, 320, 13, 51718], "temperature": 0.0, "avg_logprob": -0.4795991860184015, "compression_ratio": 1.2396694214876034, "no_speech_prob": 0.06231382116675377}, {"id": 301, "seek": 133644, "start": 1363.52, "end": 1365.52, "text": " Do we need more or?", "tokens": [51718, 1144, 321, 643, 544, 420, 30, 51818], "temperature": 0.0, "avg_logprob": -0.4795991860184015, "compression_ratio": 1.2396694214876034, "no_speech_prob": 0.06231382116675377}, {"id": 302, "seek": 136552, "start": 1365.6, "end": 1367.6, "text": " Bigger.", "tokens": [50368, 5429, 1321, 13, 50468], "temperature": 0.0, "avg_logprob": -0.49337375525272253, "compression_ratio": 1.0857142857142856, "no_speech_prob": 0.09100482612848282}, {"id": 303, "seek": 136552, "start": 1369.6, "end": 1371.6, "text": " Oh bigger.", "tokens": [50568, 876, 3801, 13, 50668], "temperature": 0.0, "avg_logprob": -0.49337375525272253, "compression_ratio": 1.0857142857142856, "no_speech_prob": 0.09100482612848282}, {"id": 304, "seek": 136552, "start": 1378.6, "end": 1380.6, "text": " Even bigger.", "tokens": [51018, 2754, 3801, 13, 51118], "temperature": 0.0, "avg_logprob": -0.49337375525272253, "compression_ratio": 1.0857142857142856, "no_speech_prob": 0.09100482612848282}, {"id": 305, "seek": 136552, "start": 1381.6, "end": 1383.6, "text": " I'm trying to call it that wrong.", "tokens": [51168, 286, 478, 1382, 281, 818, 309, 300, 2085, 13, 51268], "temperature": 0.0, "avg_logprob": -0.49337375525272253, "compression_ratio": 1.0857142857142856, "no_speech_prob": 0.09100482612848282}, {"id": 306, "seek": 136552, "start": 1383.6, "end": 1385.6, "text": " Okay yeah.", "tokens": [51268, 1033, 1338, 13, 51368], "temperature": 0.0, "avg_logprob": -0.49337375525272253, "compression_ratio": 1.0857142857142856, "no_speech_prob": 0.09100482612848282}, {"id": 307, "seek": 138560, "start": 1385.6799999999998, "end": 1400.6799999999998, "text": " Okay so we start with the constructor function which is where we set up Mambo's context", "tokens": [50368, 1033, 370, 321, 722, 365, 264, 47479, 2445, 597, 307, 689, 321, 992, 493, 19899, 1763, 311, 4319, 51118], "temperature": 0.0, "avg_logprob": -0.14085733386832225, "compression_ratio": 1.730263157894737, "no_speech_prob": 0.0024916029069572687}, {"id": 308, "seek": 138560, "start": 1400.6799999999998, "end": 1406.6799999999998, "text": " and we're registering four callbacks so we have a pre-instruction callback, we have a", "tokens": [51118, 293, 321, 434, 47329, 1451, 818, 17758, 370, 321, 362, 257, 659, 12, 13911, 3826, 818, 3207, 11, 321, 362, 257, 51418], "temperature": 0.0, "avg_logprob": -0.14085733386832225, "compression_ratio": 1.730263157894737, "no_speech_prob": 0.0024916029069572687}, {"id": 309, "seek": 138560, "start": 1406.6799999999998, "end": 1413.6799999999998, "text": " pre-thread callback, a post-thread callback and an exit callback and the order that these", "tokens": [51418, 659, 12, 392, 2538, 818, 3207, 11, 257, 2183, 12, 392, 2538, 818, 3207, 293, 364, 11043, 818, 3207, 293, 264, 1668, 300, 613, 51768], "temperature": 0.0, "avg_logprob": -0.14085733386832225, "compression_ratio": 1.730263157894737, "no_speech_prob": 0.0024916029069572687}, {"id": 310, "seek": 141368, "start": 1413.76, "end": 1420.76, "text": " will actually be executed in will go pre-thread, pre-instruction, post-thread and then exit.", "tokens": [50368, 486, 767, 312, 17577, 294, 486, 352, 659, 12, 392, 2538, 11, 659, 12, 13911, 3826, 11, 2183, 12, 392, 2538, 293, 550, 11043, 13, 50718], "temperature": 0.0, "avg_logprob": -0.20709676591176834, "compression_ratio": 1.3923076923076922, "no_speech_prob": 0.009330354630947113}, {"id": 311, "seek": 141368, "start": 1420.76, "end": 1422.76, "text": " So I'll start with the pre-thread.", "tokens": [50718, 407, 286, 603, 722, 365, 264, 659, 12, 392, 2538, 13, 50818], "temperature": 0.0, "avg_logprob": -0.20709676591176834, "compression_ratio": 1.3923076923076922, "no_speech_prob": 0.009330354630947113}, {"id": 312, "seek": 141368, "start": 1425.76, "end": 1427.76, "text": " So in the...", "tokens": [50968, 407, 294, 264, 485, 51068], "temperature": 0.0, "avg_logprob": -0.20709676591176834, "compression_ratio": 1.3923076923076922, "no_speech_prob": 0.009330354630947113}, {"id": 313, "seek": 141368, "start": 1429.76, "end": 1431.76, "text": " Let's hear some more.", "tokens": [51168, 961, 311, 1568, 512, 544, 13, 51268], "temperature": 0.0, "avg_logprob": -0.20709676591176834, "compression_ratio": 1.3923076923076922, "no_speech_prob": 0.009330354630947113}, {"id": 314, "seek": 141368, "start": 1436.76, "end": 1438.76, "text": " Oh yeah yeah yeah.", "tokens": [51518, 876, 1338, 1338, 1338, 13, 51618], "temperature": 0.0, "avg_logprob": -0.20709676591176834, "compression_ratio": 1.3923076923076922, "no_speech_prob": 0.009330354630947113}, {"id": 315, "seek": 143876, "start": 1438.84, "end": 1445.84, "text": " In the pre-thread handler we're initializing the counters for that thread so we have a", "tokens": [50368, 682, 264, 659, 12, 392, 2538, 41967, 321, 434, 5883, 3319, 264, 39338, 337, 300, 7207, 370, 321, 362, 257, 50718], "temperature": 0.0, "avg_logprob": -0.12300961895992882, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.13382592797279358}, {"id": 316, "seek": 143876, "start": 1445.84, "end": 1449.84, "text": " direct branch counter, indirect branch counter and return branch counter.", "tokens": [50718, 2047, 9819, 5682, 11, 19523, 9819, 5682, 293, 2736, 9819, 5682, 13, 50918], "temperature": 0.0, "avg_logprob": -0.12300961895992882, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.13382592797279358}, {"id": 317, "seek": 143876, "start": 1449.84, "end": 1455.84, "text": " The reason why we have this per thread is because each thread has its own code cache", "tokens": [50918, 440, 1778, 983, 321, 362, 341, 680, 7207, 307, 570, 1184, 7207, 575, 1080, 1065, 3089, 19459, 51218], "temperature": 0.0, "avg_logprob": -0.12300961895992882, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.13382592797279358}, {"id": 318, "seek": 143876, "start": 1455.84, "end": 1461.84, "text": " and therefore its own numbers of branches that we'll be executing which is why for each", "tokens": [51218, 293, 4412, 1080, 1065, 3547, 295, 14770, 300, 321, 603, 312, 32368, 597, 307, 983, 337, 1184, 51518], "temperature": 0.0, "avg_logprob": -0.12300961895992882, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.13382592797279358}, {"id": 319, "seek": 146184, "start": 1461.9199999999998, "end": 1465.9199999999998, "text": " thread that we create we initialize its own set of counters.", "tokens": [50368, 7207, 300, 321, 1884, 321, 5883, 1125, 1080, 1065, 992, 295, 39338, 13, 50568], "temperature": 0.0, "avg_logprob": -0.1327515190297907, "compression_ratio": 1.7920792079207921, "no_speech_prob": 0.021149208769202232}, {"id": 320, "seek": 146184, "start": 1465.9199999999998, "end": 1472.9199999999998, "text": " And then we have a pre-instruction callback.", "tokens": [50568, 400, 550, 321, 362, 257, 659, 12, 13911, 3826, 818, 3207, 13, 50918], "temperature": 0.0, "avg_logprob": -0.1327515190297907, "compression_ratio": 1.7920792079207921, "no_speech_prob": 0.021149208769202232}, {"id": 321, "seek": 146184, "start": 1473.9199999999998, "end": 1479.9199999999998, "text": " So for each instruction that's executed we're checking if this is a branch, we're getting", "tokens": [50968, 407, 337, 1184, 10951, 300, 311, 17577, 321, 434, 8568, 498, 341, 307, 257, 9819, 11, 321, 434, 1242, 51268], "temperature": 0.0, "avg_logprob": -0.1327515190297907, "compression_ratio": 1.7920792079207921, "no_speech_prob": 0.021149208769202232}, {"id": 322, "seek": 146184, "start": 1479.9199999999998, "end": 1485.9199999999998, "text": " the branch type and then for each of the types of branches, the return branch, the", "tokens": [51268, 264, 9819, 2010, 293, 550, 337, 1184, 295, 264, 3467, 295, 14770, 11, 264, 2736, 9819, 11, 264, 51568], "temperature": 0.0, "avg_logprob": -0.1327515190297907, "compression_ratio": 1.7920792079207921, "no_speech_prob": 0.021149208769202232}, {"id": 323, "seek": 146184, "start": 1485.9199999999998, "end": 1490.9199999999998, "text": " direct branch and the indirect branch we select the correct counter for that thread", "tokens": [51568, 2047, 9819, 293, 264, 19523, 9819, 321, 3048, 264, 3006, 5682, 337, 300, 7207, 51818], "temperature": 0.0, "avg_logprob": -0.1327515190297907, "compression_ratio": 1.7920792079207921, "no_speech_prob": 0.021149208769202232}, {"id": 324, "seek": 149092, "start": 1491.0, "end": 1497.0, "text": " and we then emit a counter increment into the code cache so that the correct counter", "tokens": [50368, 293, 321, 550, 32084, 257, 5682, 26200, 666, 264, 3089, 19459, 370, 300, 264, 3006, 5682, 50668], "temperature": 0.0, "avg_logprob": -0.1845689614613851, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.0032851407304406166}, {"id": 325, "seek": 149092, "start": 1497.0, "end": 1499.0, "text": " will be incremented.", "tokens": [50668, 486, 312, 1946, 14684, 13, 50768], "temperature": 0.0, "avg_logprob": -0.1845689614613851, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.0032851407304406166}, {"id": 326, "seek": 149092, "start": 1500.0, "end": 1506.0, "text": " Okay so at this point Vim is running away, running away and when we close it the post-thread", "tokens": [50818, 1033, 370, 412, 341, 935, 691, 332, 307, 2614, 1314, 11, 2614, 1314, 293, 562, 321, 1998, 309, 264, 2183, 12, 392, 2538, 51118], "temperature": 0.0, "avg_logprob": -0.1845689614613851, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.0032851407304406166}, {"id": 327, "seek": 149092, "start": 1511.0, "end": 1518.0, "text": " handler will first be executed and this will say okay so this thread is terminating let's", "tokens": [51368, 41967, 486, 700, 312, 17577, 293, 341, 486, 584, 1392, 370, 341, 7207, 307, 1433, 8205, 718, 311, 51718], "temperature": 0.0, "avg_logprob": -0.1845689614613851, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.0032851407304406166}, {"id": 328, "seek": 151800, "start": 1518.28, "end": 1525.28, "text": " take this thread count for each type of branch and add it to the global total and it does", "tokens": [50378, 747, 341, 7207, 1207, 337, 1184, 2010, 295, 9819, 293, 909, 309, 281, 264, 4338, 3217, 293, 309, 775, 50728], "temperature": 0.0, "avg_logprob": -0.1924607476522756, "compression_ratio": 1.4274193548387097, "no_speech_prob": 0.001742360182106495}, {"id": 329, "seek": 151800, "start": 1528.68, "end": 1535.68, "text": " that atomically and then finally we have, oh yeah the exit handler which just says okay", "tokens": [50898, 300, 12018, 984, 293, 550, 2721, 321, 362, 11, 1954, 1338, 264, 11043, 41967, 597, 445, 1619, 1392, 51248], "temperature": 0.0, "avg_logprob": -0.1924607476522756, "compression_ratio": 1.4274193548387097, "no_speech_prob": 0.001742360182106495}, {"id": 330, "seek": 153568, "start": 1535.68, "end": 1542.68, "text": " this application has now terminated let's print out the global totals which are composed", "tokens": [50364, 341, 3861, 575, 586, 1433, 5410, 718, 311, 4482, 484, 264, 4338, 1993, 1124, 597, 366, 18204, 50714], "temperature": 0.0, "avg_logprob": -0.23704301393949068, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.005381749011576176}, {"id": 331, "seek": 153568, "start": 1542.68, "end": 1549.68, "text": " of the individual threads. Since Vim is a single threaded application we'll get one thread", "tokens": [50714, 295, 264, 2609, 19314, 13, 4162, 691, 332, 307, 257, 2167, 47493, 3861, 321, 603, 483, 472, 7207, 51064], "temperature": 0.0, "avg_logprob": -0.23704301393949068, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.005381749011576176}, {"id": 332, "seek": 153568, "start": 1552.68, "end": 1559.68, "text": " and one total which you can see there.", "tokens": [51214, 293, 472, 3217, 597, 291, 393, 536, 456, 13, 51564], "temperature": 0.0, "avg_logprob": -0.23704301393949068, "compression_ratio": 1.5138888888888888, "no_speech_prob": 0.005381749011576176}, {"id": 333, "seek": 155968, "start": 1560.68, "end": 1565.68, "text": " Okay and now I'll quickly talk to you about some lessons that we learned from porting", "tokens": [50414, 1033, 293, 586, 286, 603, 2661, 751, 281, 291, 466, 512, 8820, 300, 321, 3264, 490, 2436, 278, 50664], "temperature": 0.0, "avg_logprob": -0.36839770093376256, "compression_ratio": 1.6342592592592593, "no_speech_prob": 0.005470259115099907}, {"id": 334, "seek": 155968, "start": 1565.68, "end": 1571.68, "text": " Mantlot to risk 5 because it was originally written for ARM so there are differences that", "tokens": [50664, 32829, 75, 310, 281, 3148, 1025, 570, 309, 390, 7993, 3720, 337, 45209, 370, 456, 366, 7300, 300, 50964], "temperature": 0.0, "avg_logprob": -0.36839770093376256, "compression_ratio": 1.6342592592592593, "no_speech_prob": 0.005470259115099907}, {"id": 335, "seek": 155968, "start": 1571.68, "end": 1578.68, "text": " we had to take into consideration. So the first thing was the range of branches. So for", "tokens": [50964, 321, 632, 281, 747, 666, 12381, 13, 407, 264, 700, 551, 390, 264, 3613, 295, 14770, 13, 407, 337, 51314], "temperature": 0.0, "avg_logprob": -0.36839770093376256, "compression_ratio": 1.6342592592592593, "no_speech_prob": 0.005470259115099907}, {"id": 336, "seek": 155968, "start": 1579.68, "end": 1585.68, "text": " conditional branches and direct jumps they have a range of branches and they have a range", "tokens": [51364, 27708, 14770, 293, 2047, 16704, 436, 362, 257, 3613, 295, 14770, 293, 436, 362, 257, 3613, 51664], "temperature": 0.0, "avg_logprob": -0.36839770093376256, "compression_ratio": 1.6342592592592593, "no_speech_prob": 0.005470259115099907}, {"id": 337, "seek": 158568, "start": 1586.68, "end": 1591.68, "text": " of branches. So for conditional branches and direct jumps they have quite a limited range", "tokens": [50414, 295, 14770, 13, 407, 337, 27708, 14770, 293, 2047, 16704, 436, 362, 1596, 257, 5567, 3613, 50664], "temperature": 0.0, "avg_logprob": -0.12050728517420152, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.0124851418659091}, {"id": 338, "seek": 158568, "start": 1592.68, "end": 1598.68, "text": " which is less of an issue on ARM because they have a much longer range. Why this matters", "tokens": [50714, 597, 307, 1570, 295, 364, 2734, 322, 45209, 570, 436, 362, 257, 709, 2854, 3613, 13, 1545, 341, 7001, 51014], "temperature": 0.0, "avg_logprob": -0.12050728517420152, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.0124851418659091}, {"id": 339, "seek": 158568, "start": 1599.68, "end": 1604.68, "text": " is because in a compiled binary obviously the offsets will be fine because that's how it", "tokens": [51064, 307, 570, 294, 257, 36548, 17434, 2745, 264, 39457, 1385, 486, 312, 2489, 570, 300, 311, 577, 309, 51314], "temperature": 0.0, "avg_logprob": -0.12050728517420152, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.0124851418659091}, {"id": 340, "seek": 158568, "start": 1604.68, "end": 1609.68, "text": " was compiled. When you take that code and you put it into a code cache it's done as it's", "tokens": [51314, 390, 36548, 13, 1133, 291, 747, 300, 3089, 293, 291, 829, 309, 666, 257, 3089, 19459, 309, 311, 1096, 382, 309, 311, 51564], "temperature": 0.0, "avg_logprob": -0.12050728517420152, "compression_ratio": 1.6330275229357798, "no_speech_prob": 0.0124851418659091}, {"id": 341, "seek": 160968, "start": 1609.68, "end": 1614.68, "text": " needed and so the ordering of that code may be different and therefore the offsets may be", "tokens": [50364, 2978, 293, 370, 264, 21739, 295, 300, 3089, 815, 312, 819, 293, 4412, 264, 39457, 1385, 815, 312, 50614], "temperature": 0.0, "avg_logprob": -0.11950195891947686, "compression_ratio": 1.9427083333333333, "no_speech_prob": 0.032732244580984116}, {"id": 342, "seek": 160968, "start": 1614.68, "end": 1620.68, "text": " different and exceed the offsets of the original binary. And so we may have to replace these", "tokens": [50614, 819, 293, 14048, 264, 39457, 1385, 295, 264, 3380, 17434, 13, 400, 370, 321, 815, 362, 281, 7406, 613, 50914], "temperature": 0.0, "avg_logprob": -0.11950195891947686, "compression_ratio": 1.9427083333333333, "no_speech_prob": 0.032732244580984116}, {"id": 343, "seek": 160968, "start": 1623.68, "end": 1629.68, "text": " instructions with instructions that have a longer range. So with a conditional branch we may", "tokens": [51064, 9415, 365, 9415, 300, 362, 257, 2854, 3613, 13, 407, 365, 257, 27708, 9819, 321, 815, 51364], "temperature": 0.0, "avg_logprob": -0.11950195891947686, "compression_ratio": 1.9427083333333333, "no_speech_prob": 0.032732244580984116}, {"id": 344, "seek": 160968, "start": 1629.68, "end": 1636.68, "text": " have to insert an additional jump instruction that is triggered when the branch condition is true", "tokens": [51364, 362, 281, 8969, 364, 4497, 3012, 10951, 300, 307, 21710, 562, 264, 9819, 4188, 307, 2074, 51714], "temperature": 0.0, "avg_logprob": -0.11950195891947686, "compression_ratio": 1.9427083333333333, "no_speech_prob": 0.032732244580984116}, {"id": 345, "seek": 163668, "start": 1637.68, "end": 1643.68, "text": " to extend the range of that branch. And same for a direct jump it may need to be replaced with", "tokens": [50414, 281, 10101, 264, 3613, 295, 300, 9819, 13, 400, 912, 337, 257, 2047, 3012, 309, 815, 643, 281, 312, 10772, 365, 50714], "temperature": 0.0, "avg_logprob": -0.1450791540025156, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0036571857053786516}, {"id": 346, "seek": 163668, "start": 1644.68, "end": 1650.68, "text": " instructions that first load the address into a register and then take a register jump. We also", "tokens": [50764, 9415, 300, 700, 3677, 264, 2985, 666, 257, 7280, 293, 550, 747, 257, 7280, 3012, 13, 492, 611, 51064], "temperature": 0.0, "avg_logprob": -0.1450791540025156, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0036571857053786516}, {"id": 347, "seek": 163668, "start": 1651.68, "end": 1656.68, "text": " have load reserve and store conditional. You can only have a limited number of instructions", "tokens": [51114, 362, 3677, 17824, 293, 3531, 27708, 13, 509, 393, 787, 362, 257, 5567, 1230, 295, 9415, 51364], "temperature": 0.0, "avg_logprob": -0.1450791540025156, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0036571857053786516}, {"id": 348, "seek": 163668, "start": 1658.68, "end": 1664.68, "text": " between these two instructions and you can't also have a limited number of instructions", "tokens": [51464, 1296, 613, 732, 9415, 293, 291, 393, 380, 611, 362, 257, 5567, 1230, 295, 9415, 51764], "temperature": 0.0, "avg_logprob": -0.1450791540025156, "compression_ratio": 1.8592964824120604, "no_speech_prob": 0.0036571857053786516}, {"id": 349, "seek": 166668, "start": 1666.68, "end": 1672.68, "text": " between loads and stores in between otherwise the lock will fail. This matters in dynamic binary", "tokens": [50364, 1296, 12668, 293, 9512, 294, 1296, 5911, 264, 4017, 486, 3061, 13, 639, 7001, 294, 8546, 17434, 50664], "temperature": 0.0, "avg_logprob": -0.15776281992594401, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.0036152370739728212}, {"id": 350, "seek": 166668, "start": 1673.68, "end": 1678.68, "text": " modification because we can insert additional instructions so we have to place limits on", "tokens": [50714, 26747, 570, 321, 393, 8969, 4497, 9415, 370, 321, 362, 281, 1081, 10406, 322, 50964], "temperature": 0.0, "avg_logprob": -0.15776281992594401, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.0036152370739728212}, {"id": 351, "seek": 166668, "start": 1679.68, "end": 1684.68, "text": " what you can do with atomic instructions in plugins and with other optimizations implemented", "tokens": [51014, 437, 291, 393, 360, 365, 22275, 9415, 294, 33759, 293, 365, 661, 5028, 14455, 12270, 51264], "temperature": 0.0, "avg_logprob": -0.15776281992594401, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.0036152370739728212}, {"id": 352, "seek": 166668, "start": 1685.68, "end": 1691.68, "text": " we have to be mindful of this limitation. And finally we have the thread pointer register X4.", "tokens": [51314, 321, 362, 281, 312, 14618, 295, 341, 27432, 13, 400, 2721, 321, 362, 264, 7207, 23918, 7280, 1783, 19, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15776281992594401, "compression_ratio": 1.6607142857142858, "no_speech_prob": 0.0036152370739728212}, {"id": 353, "seek": 169668, "start": 1696.68, "end": 1703.68, "text": " There isn't a dedicated register in the general register file on ARM that does this. And so when", "tokens": [50364, 821, 1943, 380, 257, 8374, 7280, 294, 264, 2674, 7280, 3991, 322, 45209, 300, 775, 341, 13, 400, 370, 562, 50714], "temperature": 0.0, "avg_logprob": -0.1239993168757512, "compression_ratio": 1.6298342541436464, "no_speech_prob": 0.011998564936220646}, {"id": 354, "seek": 169668, "start": 1704.68, "end": 1711.68, "text": " we create a new thread Mambo will save and restore the context by saving and restoring all registers.", "tokens": [50764, 321, 1884, 257, 777, 7207, 19899, 1763, 486, 3155, 293, 15227, 264, 4319, 538, 6816, 293, 36349, 439, 38351, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1239993168757512, "compression_ratio": 1.6298342541436464, "no_speech_prob": 0.011998564936220646}, {"id": 355, "seek": 169668, "start": 1713.68, "end": 1720.68, "text": " We need to make sure that the thread pointer actually points to the newly allocated thread local", "tokens": [51214, 492, 643, 281, 652, 988, 300, 264, 7207, 23918, 767, 2793, 281, 264, 15109, 29772, 7207, 2654, 51564], "temperature": 0.0, "avg_logprob": -0.1239993168757512, "compression_ratio": 1.6298342541436464, "no_speech_prob": 0.011998564936220646}, {"id": 356, "seek": 172068, "start": 1721.68, "end": 1726.68, "text": " storage otherwise there will be a world of pain which we found out.", "tokens": [50414, 6725, 5911, 456, 486, 312, 257, 1002, 295, 1822, 597, 321, 1352, 484, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14569011227837925, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.016158947721123695}, {"id": 357, "seek": 172068, "start": 1729.68, "end": 1736.68, "text": " Okay so in terms of road map where we take it from here we of course want to foster our open source", "tokens": [50814, 1033, 370, 294, 2115, 295, 3060, 4471, 689, 321, 747, 309, 490, 510, 321, 295, 1164, 528, 281, 17114, 527, 1269, 4009, 51164], "temperature": 0.0, "avg_logprob": -0.14569011227837925, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.016158947721123695}, {"id": 358, "seek": 172068, "start": 1737.68, "end": 1743.68, "text": " community. We really welcome collaborations and contributions not only plugins but also any", "tokens": [51214, 1768, 13, 492, 534, 2928, 36908, 293, 15725, 406, 787, 33759, 457, 611, 604, 51514], "temperature": 0.0, "avg_logprob": -0.14569011227837925, "compression_ratio": 1.4971098265895955, "no_speech_prob": 0.016158947721123695}, {"id": 359, "seek": 174368, "start": 1744.68, "end": 1751.68, "text": " contributions to the main internals of Mambo. As part of this we are currently in the process of", "tokens": [50414, 15725, 281, 264, 2135, 2154, 1124, 295, 19899, 1763, 13, 1018, 644, 295, 341, 321, 366, 4362, 294, 264, 1399, 295, 50764], "temperature": 0.0, "avg_logprob": -0.14920467219940603, "compression_ratio": 1.47, "no_speech_prob": 0.11497925221920013}, {"id": 360, "seek": 174368, "start": 1752.68, "end": 1757.68, "text": " improving documentation and also developing more tools to kind of give people a flavor of what's", "tokens": [50814, 11470, 14333, 293, 611, 6416, 544, 3873, 281, 733, 295, 976, 561, 257, 6813, 295, 437, 311, 51064], "temperature": 0.0, "avg_logprob": -0.14920467219940603, "compression_ratio": 1.47, "no_speech_prob": 0.11497925221920013}, {"id": 361, "seek": 174368, "start": 1758.68, "end": 1767.68, "text": " possible. So for instance we're currently porting Mambo's Memchecker from ARM to RISC 5. We also are", "tokens": [51114, 1944, 13, 407, 337, 5197, 321, 434, 4362, 2436, 278, 19899, 1763, 311, 8731, 1876, 9178, 490, 45209, 281, 497, 2343, 34, 1025, 13, 492, 611, 366, 51564], "temperature": 0.0, "avg_logprob": -0.14920467219940603, "compression_ratio": 1.47, "no_speech_prob": 0.11497925221920013}, {"id": 362, "seek": 176768, "start": 1768.68, "end": 1775.68, "text": " trying our very best to keep up with all of the new RISC 5 and also ARM extensions that keep", "tokens": [50414, 1382, 527, 588, 1151, 281, 1066, 493, 365, 439, 295, 264, 777, 497, 2343, 34, 1025, 293, 611, 45209, 25129, 300, 1066, 50764], "temperature": 0.0, "avg_logprob": -0.1676392873128255, "compression_ratio": 1.4313725490196079, "no_speech_prob": 0.011342550627887249}, {"id": 363, "seek": 176768, "start": 1776.68, "end": 1784.68, "text": " appearing. We also have various research projects ongoing that make use of Mambo. And probably goes", "tokens": [50814, 19870, 13, 492, 611, 362, 3683, 2132, 4455, 10452, 300, 652, 764, 295, 19899, 1763, 13, 400, 1391, 1709, 51214], "temperature": 0.0, "avg_logprob": -0.1676392873128255, "compression_ratio": 1.4313725490196079, "no_speech_prob": 0.011342550627887249}, {"id": 364, "seek": 176768, "start": 1788.68, "end": 1794.68, "text": " without saying since this is a talk at FOSTEM but Mambo is open source on GitHub with an Apache 2.0", "tokens": [51414, 1553, 1566, 1670, 341, 307, 257, 751, 412, 479, 4367, 51, 6683, 457, 19899, 1763, 307, 1269, 4009, 322, 23331, 365, 364, 46597, 568, 13, 15, 51714], "temperature": 0.0, "avg_logprob": -0.1676392873128255, "compression_ratio": 1.4313725490196079, "no_speech_prob": 0.011342550627887249}, {"id": 365, "seek": 179468, "start": 1794.68, "end": 1804.68, "text": " license so definitely check it out. And we'd like to thank our sponsors. So yeah any questions?", "tokens": [50414, 10476, 370, 2138, 1520, 309, 484, 13, 400, 321, 1116, 411, 281, 1309, 527, 22593, 13, 407, 1338, 604, 1651, 30, 50864], "temperature": 0.0, "avg_logprob": -0.19267892837524414, "compression_ratio": 1.0919540229885059, "no_speech_prob": 0.019933728501200676}, {"id": 366, "seek": 182468, "start": 1824.68, "end": 1844.68, "text": " Yeah. Oh yeah yeah. So you're asking how do we handle pointers when we scan code from the binary", "tokens": [50364, 865, 13, 876, 1338, 1338, 13, 407, 291, 434, 3365, 577, 360, 321, 4813, 44548, 562, 321, 11049, 3089, 490, 264, 17434, 51364], "temperature": 0.0, "avg_logprob": -0.238128662109375, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.3619980216026306}, {"id": 367, "seek": 182468, "start": 1845.68, "end": 1853.68, "text": " into the code cache. Those pointers are still pointing into the binary. So we actually in the scanner", "tokens": [51414, 666, 264, 3089, 19459, 13, 3950, 44548, 366, 920, 12166, 666, 264, 17434, 13, 407, 321, 767, 294, 264, 30211, 51814], "temperature": 0.0, "avg_logprob": -0.238128662109375, "compression_ratio": 1.4887218045112782, "no_speech_prob": 0.3619980216026306}, {"id": 368, "seek": 185468, "start": 1854.68, "end": 1862.68, "text": " we have instructions like that specifically. So for instance if we take a branch instruction the first", "tokens": [50364, 321, 362, 9415, 411, 300, 4682, 13, 407, 337, 5197, 498, 321, 747, 257, 9819, 10951, 264, 700, 50764], "temperature": 0.0, "avg_logprob": -0.21535612831653003, "compression_ratio": 1.7473684210526317, "no_speech_prob": 0.020331671461462975}, {"id": 369, "seek": 185468, "start": 1863.68, "end": 1869.68, "text": " time that branch instruction is executed it will point to Mambo's dispatcher which will perform a lookup. We then", "tokens": [50814, 565, 300, 9819, 10951, 307, 17577, 309, 486, 935, 281, 19899, 1763, 311, 36729, 260, 597, 486, 2042, 257, 574, 1010, 13, 492, 550, 51114], "temperature": 0.0, "avg_logprob": -0.21535612831653003, "compression_ratio": 1.7473684210526317, "no_speech_prob": 0.020331671461462975}, {"id": 370, "seek": 185468, "start": 1870.68, "end": 1876.68, "text": " have optimizations which will replace that branch instruction with a direct branch to the next basic block. And the", "tokens": [51164, 362, 5028, 14455, 597, 486, 7406, 300, 9819, 10951, 365, 257, 2047, 9819, 281, 264, 958, 3875, 3461, 13, 400, 264, 51464], "temperature": 0.0, "avg_logprob": -0.21535612831653003, "compression_ratio": 1.7473684210526317, "no_speech_prob": 0.020331671461462975}, {"id": 371, "seek": 187668, "start": 1876.68, "end": 1882.68, "text": " same for loads and stores. We update these to point to the new location.", "tokens": [50364, 912, 337, 12668, 293, 9512, 13, 492, 5623, 613, 281, 935, 281, 264, 777, 4914, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15506102176422767, "compression_ratio": 1.3565891472868217, "no_speech_prob": 0.17499518394470215}, {"id": 372, "seek": 187668, "start": 1893.68, "end": 1900.68, "text": " So basic block is a single pointer. Oh sorry. Yeah I'll repeat the question. So what is a basic block?", "tokens": [51214, 407, 3875, 3461, 307, 257, 2167, 23918, 13, 876, 2597, 13, 865, 286, 603, 7149, 264, 1168, 13, 407, 437, 307, 257, 3875, 3461, 30, 51564], "temperature": 0.0, "avg_logprob": -0.15506102176422767, "compression_ratio": 1.3565891472868217, "no_speech_prob": 0.17499518394470215}, {"id": 373, "seek": 190068, "start": 1900.68, "end": 1909.68, "text": " A basic block is a single entry single exit point. So you essentially ends when there's a branch to somewhere else.", "tokens": [50364, 316, 3875, 3461, 307, 257, 2167, 8729, 2167, 11043, 935, 13, 407, 291, 4476, 5314, 562, 456, 311, 257, 9819, 281, 4079, 1646, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1658458709716797, "compression_ratio": 1.2190476190476192, "no_speech_prob": 0.12771321833133698}, {"id": 374, "seek": 190068, "start": 1912.68, "end": 1913.68, "text": " At the back.", "tokens": [50964, 1711, 264, 646, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1658458709716797, "compression_ratio": 1.2190476190476192, "no_speech_prob": 0.12771321833133698}, {"id": 375, "seek": 193068, "start": 1931.68, "end": 1943.68, "text": " Yeah so in a general case. Oh I keep doing this. So how often is the load reserve store conditional an issue. We find it's", "tokens": [50414, 865, 370, 294, 257, 2674, 1389, 13, 876, 286, 1066, 884, 341, 13, 407, 577, 2049, 307, 264, 3677, 17824, 3531, 27708, 364, 2734, 13, 492, 915, 309, 311, 51014], "temperature": 0.0, "avg_logprob": -0.13455190814909387, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.07368301600217819}, {"id": 376, "seek": 193068, "start": 1944.68, "end": 1955.68, "text": " not that much of an issue. Most applications won't have an issue with it. It becomes more of an issue when you have", "tokens": [51064, 406, 300, 709, 295, 364, 2734, 13, 4534, 5821, 1582, 380, 362, 364, 2734, 365, 309, 13, 467, 3643, 544, 295, 364, 2734, 562, 291, 362, 51614], "temperature": 0.0, "avg_logprob": -0.13455190814909387, "compression_ratio": 1.4782608695652173, "no_speech_prob": 0.07368301600217819}, {"id": 377, "seek": 195568, "start": 1955.68, "end": 1963.68, "text": " plugins that do something in between. So for instance if you're counting a specific type of instruction that may occur", "tokens": [50364, 33759, 300, 360, 746, 294, 1296, 13, 407, 337, 5197, 498, 291, 434, 13251, 257, 2685, 2010, 295, 10951, 300, 815, 5160, 50764], "temperature": 0.0, "avg_logprob": -0.18128576034154648, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.11156875640153885}, {"id": 378, "seek": 195568, "start": 1964.68, "end": 1972.68, "text": " between these two instructions and you emit stuff into the code cache you may end up exceeding this 16 instruction limit.", "tokens": [50814, 1296, 613, 732, 9415, 293, 291, 32084, 1507, 666, 264, 3089, 19459, 291, 815, 917, 493, 14048, 278, 341, 3165, 10951, 4948, 13, 51214], "temperature": 0.0, "avg_logprob": -0.18128576034154648, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.11156875640153885}, {"id": 379, "seek": 195568, "start": 1975.68, "end": 1984.68, "text": " You mentioned translation early in your presentation. Does Mambo support running ARM on the RISC-5 machine and vice versa?", "tokens": [51364, 509, 2835, 12853, 2440, 294, 428, 5860, 13, 4402, 19899, 1763, 1406, 2614, 45209, 322, 264, 497, 2343, 34, 12, 20, 3479, 293, 11964, 25650, 30, 51814], "temperature": 0.0, "avg_logprob": -0.18128576034154648, "compression_ratio": 1.5446808510638297, "no_speech_prob": 0.11156875640153885}, {"id": 380, "seek": 198568, "start": 1985.68, "end": 1993.68, "text": " So does Mambo support translation? Not currently. You need to be on that architecture.", "tokens": [50364, 407, 775, 19899, 1763, 1406, 12853, 30, 1726, 4362, 13, 509, 643, 281, 312, 322, 300, 9482, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16864115292908716, "compression_ratio": 1.4551724137931035, "no_speech_prob": 0.011998265981674194}, {"id": 381, "seek": 198568, "start": 1995.68, "end": 1999.68, "text": " What happens if I try to run a just-in-time compiler under a Mambo?", "tokens": [50864, 708, 2314, 498, 286, 853, 281, 1190, 257, 445, 12, 259, 12, 3766, 31958, 833, 257, 19899, 1763, 30, 51064], "temperature": 0.0, "avg_logprob": -0.16864115292908716, "compression_ratio": 1.4551724137931035, "no_speech_prob": 0.011998265981674194}, {"id": 382, "seek": 198568, "start": 2000.68, "end": 2004.68, "text": " What happens with a just-in-time compiler? I'm not sure.", "tokens": [51114, 708, 2314, 365, 257, 445, 12, 259, 12, 3766, 31958, 30, 286, 478, 406, 988, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16864115292908716, "compression_ratio": 1.4551724137931035, "no_speech_prob": 0.011998265981674194}, {"id": 383, "seek": 200468, "start": 2005.68, "end": 2012.68, "text": " So the Mambo is designed to support self-modifying code. So basically what it does, you have some code in the code cache", "tokens": [50414, 407, 264, 19899, 1763, 307, 4761, 281, 1406, 2698, 12, 8014, 5489, 3089, 13, 407, 1936, 437, 309, 775, 11, 291, 362, 512, 3089, 294, 264, 3089, 19459, 50764], "temperature": 0.0, "avg_logprob": -0.18625966433821053, "compression_ratio": 1.879668049792531, "no_speech_prob": 0.06504476815462112}, {"id": 384, "seek": 200468, "start": 2013.68, "end": 2017.68, "text": " and just in time compiler recompile it so basically the cache will be flushed and then it will re-scan it again.", "tokens": [50814, 293, 445, 294, 565, 31958, 48000, 794, 309, 370, 1936, 264, 19459, 486, 312, 19568, 292, 293, 550, 309, 486, 319, 12, 4417, 282, 309, 797, 13, 51014], "temperature": 0.0, "avg_logprob": -0.18625966433821053, "compression_ratio": 1.879668049792531, "no_speech_prob": 0.06504476815462112}, {"id": 385, "seek": 200468, "start": 2018.68, "end": 2023.68, "text": " So it carries some performance penalty but it will react to the things like that and it will re-scan the code and put the new", "tokens": [51064, 407, 309, 16402, 512, 3389, 16263, 457, 309, 486, 4515, 281, 264, 721, 411, 300, 293, 309, 486, 319, 12, 4417, 282, 264, 3089, 293, 829, 264, 777, 51314], "temperature": 0.0, "avg_logprob": -0.18625966433821053, "compression_ratio": 1.879668049792531, "no_speech_prob": 0.06504476815462112}, {"id": 386, "seek": 200468, "start": 2024.68, "end": 2026.68, "text": " version into the code cache. So it does support self-modifying code.", "tokens": [51364, 3037, 666, 264, 3089, 19459, 13, 407, 309, 775, 1406, 2698, 12, 8014, 5489, 3089, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18625966433821053, "compression_ratio": 1.879668049792531, "no_speech_prob": 0.06504476815462112}, {"id": 387, "seek": 200468, "start": 2029.68, "end": 2032.68, "text": " It should be. Hopefully.", "tokens": [51614, 467, 820, 312, 13, 10429, 13, 51764], "temperature": 0.0, "avg_logprob": -0.18625966433821053, "compression_ratio": 1.879668049792531, "no_speech_prob": 0.06504476815462112}, {"id": 388, "seek": 203468, "start": 2034.68, "end": 2038.68, "text": " This isn't tested on RISC-5 because most browsers don't seem to be ported.", "tokens": [50364, 639, 1943, 380, 8246, 322, 497, 2343, 34, 12, 20, 570, 881, 36069, 500, 380, 1643, 281, 312, 2436, 292, 13, 50564], "temperature": 0.0, "avg_logprob": -0.15472809473673502, "compression_ratio": 1.043956043956044, "no_speech_prob": 0.023951394483447075}, {"id": 389, "seek": 203468, "start": 2046.68, "end": 2047.68, "text": " Any other questions?", "tokens": [50964, 2639, 661, 1651, 30, 51014], "temperature": 0.0, "avg_logprob": -0.15472809473673502, "compression_ratio": 1.043956043956044, "no_speech_prob": 0.023951394483447075}, {"id": 390, "seek": 206468, "start": 2065.68, "end": 2070.68, "text": " So what do we interested in about RISC-5 applications from plugins?", "tokens": [50414, 407, 437, 360, 321, 3102, 294, 466, 497, 2343, 34, 12, 20, 5821, 490, 33759, 30, 50664], "temperature": 0.0, "avg_logprob": -0.1552012860774994, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.0859658494591713}, {"id": 391, "seek": 206468, "start": 2072.68, "end": 2080.68, "text": " We're interested in building tools that kind of perform things like memory checking,", "tokens": [50764, 492, 434, 3102, 294, 2390, 3873, 300, 733, 295, 2042, 721, 411, 4675, 8568, 11, 51164], "temperature": 0.0, "avg_logprob": -0.1552012860774994, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.0859658494591713}, {"id": 392, "seek": 206468, "start": 2083.68, "end": 2091.68, "text": " data race detectors, that kind of thing. So tools that are very useful to people developing software on RISC-5", "tokens": [51314, 1412, 4569, 46866, 11, 300, 733, 295, 551, 13, 407, 3873, 300, 366, 588, 4420, 281, 561, 6416, 4722, 322, 497, 2343, 34, 12, 20, 51714], "temperature": 0.0, "avg_logprob": -0.1552012860774994, "compression_ratio": 1.5290697674418605, "no_speech_prob": 0.0859658494591713}, {"id": 393, "seek": 209168, "start": 2091.68, "end": 2093.68, "text": " to kind of help them do that.", "tokens": [50364, 281, 733, 295, 854, 552, 360, 300, 13, 50464], "temperature": 0.0, "avg_logprob": -0.20985204866617033, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.027213046327233315}, {"id": 394, "seek": 209168, "start": 2097.68, "end": 2101.68, "text": " So just out of it, so we haven't mentioned it on the slides but we also have some research.", "tokens": [50664, 407, 445, 484, 295, 309, 11, 370, 321, 2378, 380, 2835, 309, 322, 264, 9788, 457, 321, 611, 362, 512, 2132, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20985204866617033, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.027213046327233315}, {"id": 395, "seek": 209168, "start": 2102.68, "end": 2109.68, "text": " That was for R but done on the architectural simulation, so kind of code design of accelerators and CPUs on the SOC system.", "tokens": [50914, 663, 390, 337, 497, 457, 1096, 322, 264, 26621, 16575, 11, 370, 733, 295, 3089, 1715, 295, 10172, 3391, 293, 13199, 82, 322, 264, 10621, 34, 1185, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20985204866617033, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.027213046327233315}, {"id": 396, "seek": 209168, "start": 2110.68, "end": 2117.68, "text": " So there's some stuff going on but yeah. So at the moment I think for RISC-5 the biggest push was to get the base system to work", "tokens": [51314, 407, 456, 311, 512, 1507, 516, 322, 457, 1338, 13, 407, 412, 264, 1623, 286, 519, 337, 497, 2343, 34, 12, 20, 264, 3880, 2944, 390, 281, 483, 264, 3096, 1185, 281, 589, 51664], "temperature": 0.0, "avg_logprob": -0.20985204866617033, "compression_ratio": 1.5914893617021277, "no_speech_prob": 0.027213046327233315}, {"id": 397, "seek": 211768, "start": 2117.68, "end": 2120.68, "text": " and now we are exploring on RISC-5 what we can actually do with the system.", "tokens": [50364, 293, 586, 321, 366, 12736, 322, 497, 2343, 34, 12, 20, 437, 321, 393, 767, 360, 365, 264, 1185, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12228138446807861, "compression_ratio": 1.054945054945055, "no_speech_prob": 0.077060267329216}, {"id": 398, "seek": 211768, "start": 2123.68, "end": 2124.68, "text": " Any other questions?", "tokens": [50664, 2639, 661, 1651, 30, 50714], "temperature": 0.0, "avg_logprob": -0.12228138446807861, "compression_ratio": 1.054945054945055, "no_speech_prob": 0.077060267329216}, {"id": 399, "seek": 212468, "start": 2125.68, "end": 2134.68, "text": " Does it update sections that refer to pieces of code like jump tables, different things between basic blocks?", "tokens": [50414, 4402, 309, 5623, 10863, 300, 2864, 281, 3755, 295, 3089, 411, 3012, 8020, 11, 819, 721, 1296, 3875, 8474, 30, 50864], "temperature": 0.0, "avg_logprob": -0.4033482021755642, "compression_ratio": 1.3478260869565217, "no_speech_prob": 0.042426228523254395}, {"id": 400, "seek": 212468, "start": 2144.68, "end": 2148.68, "text": " So the question is about does MAMBO support the jump tables? How does it do?", "tokens": [51364, 407, 264, 1168, 307, 466, 775, 376, 2865, 15893, 1406, 264, 3012, 8020, 30, 1012, 775, 309, 360, 30, 51564], "temperature": 0.0, "avg_logprob": -0.4033482021755642, "compression_ratio": 1.3478260869565217, "no_speech_prob": 0.042426228523254395}, {"id": 401, "seek": 214868, "start": 2149.68, "end": 2157.68, "text": " So we do not rewrite any of the sections of the original binary so basically MAMBO works in a way on demand.", "tokens": [50414, 407, 321, 360, 406, 28132, 604, 295, 264, 10863, 295, 264, 3380, 17434, 370, 1936, 376, 2865, 15893, 1985, 294, 257, 636, 322, 4733, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1672793844471807, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.15036609768867493}, {"id": 402, "seek": 214868, "start": 2158.68, "end": 2168.68, "text": " So we have a jump that uses a jump table. MAMBO will try to remember the most recent jumps but then if you miss it you have to go back to the scanner, scan the code again and then go to the dispatcher.", "tokens": [50864, 407, 321, 362, 257, 3012, 300, 4960, 257, 3012, 3199, 13, 376, 2865, 15893, 486, 853, 281, 1604, 264, 881, 5162, 16704, 457, 550, 498, 291, 1713, 309, 291, 362, 281, 352, 646, 281, 264, 30211, 11, 11049, 264, 3089, 797, 293, 550, 352, 281, 264, 36729, 260, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1672793844471807, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.15036609768867493}, {"id": 403, "seek": 214868, "start": 2169.68, "end": 2176.68, "text": " So we are going to use the addresses that are already there and then we are going to keep the translation of some addresses in the code cache but none of them.", "tokens": [51414, 407, 321, 366, 516, 281, 764, 264, 16862, 300, 366, 1217, 456, 293, 550, 321, 366, 516, 281, 1066, 264, 12853, 295, 512, 16862, 294, 264, 3089, 19459, 457, 6022, 295, 552, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1672793844471807, "compression_ratio": 1.8076923076923077, "no_speech_prob": 0.15036609768867493}, {"id": 404, "seek": 217668, "start": 2177.68, "end": 2182.68, "text": " But we are not going to rewrite the actual jump tables in the data section of the binary.", "tokens": [50414, 583, 321, 366, 406, 516, 281, 28132, 264, 3539, 3012, 8020, 294, 264, 1412, 3541, 295, 264, 17434, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07634548630033221, "compression_ratio": 1.184782608695652, "no_speech_prob": 0.028270768001675606}, {"id": 405, "seek": 217668, "start": 2186.68, "end": 2187.68, "text": " Any more questions?", "tokens": [50864, 2639, 544, 1651, 30, 50914], "temperature": 0.0, "avg_logprob": -0.07634548630033221, "compression_ratio": 1.184782608695652, "no_speech_prob": 0.028270768001675606}, {"id": 406, "seek": 220668, "start": 2206.68, "end": 2225.68, "text": " Okay so the question is about the data-raised detector and whether we could implement some sort of stepping back within MAMBO.", "tokens": [50364, 1033, 370, 264, 1168, 307, 466, 264, 1412, 12, 424, 2640, 25712, 293, 1968, 321, 727, 4445, 512, 1333, 295, 16821, 646, 1951, 376, 2865, 15893, 13, 51314], "temperature": 0.0, "avg_logprob": -0.29031412063106415, "compression_ratio": 1.1666666666666667, "no_speech_prob": 0.03392301872372627}, {"id": 407, "seek": 222568, "start": 2226.68, "end": 2243.68, "text": " So the data detection is in the early stages but you will not have such a verbose functionality as RR or GDB replay or whatever but what you can do in the very easy way when you scan the basic blocks.", "tokens": [50414, 407, 264, 1412, 17784, 307, 294, 264, 2440, 10232, 457, 291, 486, 406, 362, 1270, 257, 9595, 541, 14980, 382, 497, 49, 420, 460, 27735, 23836, 420, 2035, 457, 437, 291, 393, 360, 294, 264, 588, 1858, 636, 562, 291, 11049, 264, 3875, 8474, 13, 51264], "temperature": 0.0, "avg_logprob": -0.22635965089540225, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.2444506585597992}, {"id": 408, "seek": 222568, "start": 2244.68, "end": 2248.68, "text": " So you would have to probably have some sort of we don't have functionality to detect the data-raised.", "tokens": [51314, 407, 291, 576, 362, 281, 1391, 362, 512, 1333, 295, 321, 500, 380, 362, 14980, 281, 5531, 264, 1412, 12, 424, 2640, 13, 51514], "temperature": 0.0, "avg_logprob": -0.22635965089540225, "compression_ratio": 1.6117021276595744, "no_speech_prob": 0.2444506585597992}, {"id": 409, "seek": 224868, "start": 2249.68, "end": 2264.68, "text": " But let's say in the general case if you want to inspect what's happening you can introduce a trap instruction into the code cache and then you can run under GDB and then you will trap the instruction and you can inspect what's in the basic block after the translation and you could try to look what was in there before the translation.", "tokens": [50414, 583, 718, 311, 584, 294, 264, 2674, 1389, 498, 291, 528, 281, 15018, 437, 311, 2737, 291, 393, 5366, 257, 11487, 10951, 666, 264, 3089, 19459, 293, 550, 291, 393, 1190, 833, 460, 27735, 293, 550, 291, 486, 11487, 264, 10951, 293, 291, 393, 15018, 437, 311, 294, 264, 3875, 3461, 934, 264, 12853, 293, 291, 727, 853, 281, 574, 437, 390, 294, 456, 949, 264, 12853, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12970671990905144, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.20318818092346191}, {"id": 410, "seek": 224868, "start": 2265.68, "end": 2270.68, "text": " So you can do some sort of things in the manual but there is no automated way to replay and go back in time.", "tokens": [51214, 407, 291, 393, 360, 512, 1333, 295, 721, 294, 264, 9688, 457, 456, 307, 572, 18473, 636, 281, 23836, 293, 352, 646, 294, 565, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12970671990905144, "compression_ratio": 1.8697478991596639, "no_speech_prob": 0.20318818092346191}, {"id": 411, "seek": 227068, "start": 2270.68, "end": 2271.68, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.6542998949686686, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.2173660397529602}], "language": "en"}