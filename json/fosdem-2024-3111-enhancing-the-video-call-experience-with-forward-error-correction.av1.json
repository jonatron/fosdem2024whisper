{"text": " So good morning. I am Flor Arl\u00e9 and I am here with my colleague Jean Monnier to present you a way to announce the video call experience by using the flexible forward error correction. We work in the Bell Dawn Communication Company. This company has developed the LIN phone product that is a soft phone open source to make some video and audio calls. And it works on several platforms. So today I will explain to you how we implement the forward error correction for our video calls. The first way we choose to use the flexible FEC scheme, I will explain to you how it is described in the RFC 8627, how it has been developed in our products and I will show you some results. So at first let's talk about the forward error correction. If you see this real schematic way to represent a video call, you have at first two people who share a video call. On the center side you have a device that captures the video. The signal is encoded here by a video encoder that transforms the signal into frames. And those frames are split into packets that will be sent to the receiver through video stream on the network. On the receiver side the packets are collected and decoded and the frames are recovered back and the signal is displayed and the receiver can see the video. In the case of the video call we are in a real time context. So we work on the RTP retight transport protocol that describes how you can send video or audio with the internet. This protocol describes the format of the RTP packets and it is more regalable than the UDP because for example you don't have latency problem that is adapted for real time communication. Unfortunately in the real world you have problems, you can experiment problems with your network so the traffic may be high, you can have a low bandwidth and sometimes you lose packets during the transmission. So the receiver doesn't collect all the packets, the signal is not complete and you see that your video can freeze and it is really annoying for everyone. To overcome that you can use a strategy to recover your lost packets. For the forward error correction you will recover the lost packets by using the next packet and also a run-down-see information that is sent at the same time than the video stream. With this way you can recover your full video and have a nice video call. We choose to use the flexible scheme for our project. So when you detect loss in your receiver, the receiver side, you have several strategies that you can apply. You can ask to send the packet again but you will have to wait to get the packet. You can primitively decide to send twice the video stream but it is really costly. Or you can try to recover the packets with what you have at the time. The forward error corrections allow you to recover the lost packets by using the run-down-see information and the other packets. There are several algorithms, for example the low density parity check codes and there is the flexible forward error correction. That is the method that we choose because it is really simple. It is based on the combination of the packets with an exclusive XOR operation and it is free. There is no patterns. It is a recent standard. It has been for example developed in the web RTC. So we can be interoperable with it. The standard is described in the RFC 8627. It describes, this document describes fully how an FTP stream can be protected with flexible FEC. It gives the format for the repair packet that will be sent to carry the run-down-see information and it proposes the codes to generate those packets and to decode to reconstruct the lost packets. This RFC is applicable to all media, not only video but also video, text and application. So now we will explain you how it works as described in this RFC document. So at first when you have a video stream you send the packets within an FTP session with a source RTP stream. Your packets are here represented by the squares. They have a unique sequence number that increase with time. And when you want to make a flexible FEC you add another run-down-see RTP stream and you don't change the source stream. So it is backward compatible. The principle is simply to take a set of source packets, combine them with your XO with a priority FEC encoder and generate a repair packet here. So for example this one is called R5, R4. Why using XO operation? It is because of a nice property of this operation that makes you able to recover one of the packets if you have all the other. So you can encode a packet and decode a missing packet. At the receiver side when you detect a loss, for example here the packet S4 has been lost, you can get it back by applying your exclusive OR over S6, S5 and the repair packet R4. And then this new packet can be sent to the stream here. To operate your flexible FEC you can choose several parameters. You have to decide what is the length of your repair window. It is a duration interval that allows you to buffer your source packets to be sure that you have enough source packets to make the recovery. And you have to decide which packet you will combine with which one within a protection pattern. So now we present you several protection patterns. If you represent your source packets like a block here from S1 to SdL with L columns and D lines you can make a first way to protect that is a row protection, a one-dimensional non-interleave protection where the XOR is applied on the rows. So here you generate D repair packets that protects a set of source packets of length L. Another way is to combine them by columns. So here you have L repair packets that protects the source packets with depth D. So now I will show you how you can recover the source packets with this combination. So here you have an example with row protection and here with column protection. Because you have random losses in your transmission you can apply the XOR to recover the lost packets here with the row application of the XOR and here with the columns. But in some cases it will be more difficult because if you have burst in your transmission it means that you will lose a consecutive source packet. You won't be able to recover because you can't have both packets here and here you will recover the columns that have only one loss but not the columns that have more than one loss. To overcome this problem you can make a two-dimensional protection. Here you have simply the combination of row protection and column protection and it generates L plus D repair packets. In this case you have in the RFC an iterative algorithm to recover the lost packets. So here I show you two examples with long burst here and here with random loss. The algorithm starts like this. You repair at first all the rows that can be repaired. Then you apply the XOR on the columns and you repeat so the rows, the columns until you can't repair any more any packets. Here you can see that the burst has been fully resolved. All the packets have been recovered but sometimes you don't have chains and you can't recover some patterns that are connected like a cycle here. So in this case you can do much more with the flexible efficiency. But this two-dimensional protection is really efficient for bursts. But sadly it has a cost because you have to send a lot of repair packets. You can measure the impact on the width that you will need with this term the overhead. It is a ratio between the number of bytes of the repair packets that you sent over the number of bytes of the protected source packets. Usually the repair packets are bigger than the source packets but if you suppose that all the source packets are approximately the same size, the overhead will be 1 over L for the row protection, 1 over D for the column protection and 1 over L plus 1 over D for the two-dimensional protection. For example here are the values of the overhead with increasing values of L and D on increasing protection level. You see that the overhead increases very fast. The RFC describes also what are the formats of the packets. So first you have your source packets with the LTP convention with an LTP header and a LTP payload. And you will generate your repair packets that are also LTP packets with a header and a payload. But within this payload you will carry two kinds of information. The first one is written in the FERC header. It's information about how to identify which source packets are protected. And in the repair payload you will have the result of the XOR operation between the payloads of the source packets. When you apply the XOR between the payload here you have to be sure that your source packets have the same length. So sometimes you will need to add zeros at the end of your payload in order to have the same length for all packets. A single repair packet will carry all the information needed to recover the source packets. It says the size of the source packet protected and which is the configuration of the protection. For example, here when you have R1 and you see that in the FEC header you read L is positive and D is zero. You know that you have a raw protection and the sequence number of the source packets that are protected comes from S1 to SN plus L minus 1 with the consecutive values. If L is positive but D is equal to 1 you also have a raw protection but you are inside a two-dimensional pattern. So you know that you will collect several repair packets that protect rows and then you will have a set of repair packets that protect the columns. And when L is positive and D is more than 1 you have the column FEC protection and the repair packets that are protected are interleaved. So from SN to SN plus D minus 1 times L and it can be the column of the two-dimensional FEC block protection but it also can be a single column protection in one dimension. This method has been implemented in our project NINFON. We decided to use four sets of L and D parameters. It comes from one-dimensional very low protection to high protection with three and three. Ideally we want to have two-dimensional parity protection but it has a cost because you have to send a lot of data. So we decided to adapt our protection to the loss rate that is measured in the transmission and also to the network capabilities. The repair window is 200 milliseconds. It is long enough to collect all the repair packets for any values of L and D and it doesn't cause any delay in the video. The RFC has been implemented in C and C++ in our LINFON SDK. All the elements of the FEC stream are written in the library ORTP and in our streaming engine for video and audio we added a way to manage the video quality with the flexible FEC. For many months about our strategy for the video quality, our rule is to make the best possible use to use the bandwidth but sometimes you don't know the bandwidth at the beginning of the call. It can change during the call and you have all events to manage. We want an optimal video setting so the best definition betrayed and firm rates but most important we don't want freeze in the video. So we decided to prioritize the packet protection before having high encoding setting. To have an adaptability to the network events we make periodic control of several values so we measure regularly the available bandwidth, the loss rate and the bandwidth that is dedicated to FEC. For example in this graph you can see that we propose to have low FEC protection when you have low bandwidth and to enable high level of FEC only when the loss rate is very high but if you have a lot of bandwidth you can have full FEC protection it is not a problem. And finally when you have congestions it means that you have too much packets and the transmission stops. You disable immediately the FEC because it is not your tool and it will make the things worse. So now we will show you some video with flexible FEC activated. So here you have a video, so we simulate a video call with a moving pattern. In the first window here there is 6% of packet losses and we do no protection so you can see that the video is really bad. It is a very very bad case, 6% is really a lot of losses. In this window we have enabled the FEC with a one dimensional row protection with L is equal to 5. You see that the video moves a little more but they are still freezing. In the last window it is a two dimensional FEC protection with a high level, 3 L is equal to 3 and D is equal to 3. And you can see that here the video is perfectly fluent so we have recovered all the lost information here. We have measured the recovery rate here with several values of FEC protection and you see that it increases very fast. So the flexible FEC is really interesting to recover the lost packets and the effects are really obvious. Another example here, this time we have simulated a transmission with loss and burst so we lose consecutive packets so it is a very bad situation. This time you can see that the performance of the FEC reconstruction decreases a little but they are still interesting. In the two dimensional parity protection you can see now some phrases but it is still much more fluent than the initial video. So we can make some conclusions about flexible FEC. It is a simple and resilient way to improve the resiliency to the packet loss in video transmission. It is based on the fact that you send redundant information on a dedicated stream. It is adaptable to the level and the event of your network and it works with a short delay because you don't have to wait that the sender sends you back the missing information. And the exclusive operation is really efficient and rapid. But you have to keep in mind that you will need a significant bandwidth so in some cases it is not indicated. The RFC 8627 gives a complete description of the flexible FEC scheme and it is clever because it is also backward compatible with the RTP protocol. And we show that it gives a real improvement in the video quality. So we decided to release it this year in the video calls of the Linfuan project and we want to in future work add it to the video conference and the audio stream. So thank you for your attention and we will be happy to answer any questions. Thank you. The question is about the size of the source packet. And in fact you are right, it is an issue that we have to deal with. The source packets doesn't have the same size. And for the encoding you have to pad the payload to make the XOR operation. And the thing is that when you combine them to build your repair packet you will have very high, very big repair packets and your overheads will be increasing a lot because of few big source packets. So that is a problem that you have to deal with. So you can change the size of the source packet if possible to make the more equal sizes. But you have to adapt the overheads to decide to have, you have to measure your overheads to check that the repair packets are not too big compared to the source packets and to decide to reduce the FEC protection in order to keep an overhead reasonable. But yes you have to take care of the real size of your source packets. I don't know if it answers your question. Thank you. Yes? Then you always have this fixed delay of 200 milliseconds, right? On the repair window? Yes. So we have a fixed value here. The question is do we have a fixed duration for the repair window of 200 milliseconds? Or it can be changed? The fixed delay. The question is the video output is put on the screen 200 milliseconds after the respective video break has arrived, right? Yes, the 200 milliseconds is a delay that you had before displaying your video. Yes? I'm sorry. Okay. Yes, that's the, in fact yes. Yes? So when you assemble in the stream and rows and columns, I know the second one is reversed. Is that right? No, it's not reversed. In fact, sorry, it was maybe not clear in the representation. You have, okay. This one? Yes. The draw comes back to here. So you read those one, then those one, and then those one. The second question, do you have any examples of an STP line describing how this is expected? Those ones. You have an example of an STP packet that contains a line that describes how this is established. The question is, is it mandatory to signal? So when the stream is a setup on the signaling layer, you have no flyer, I'm guessing, you still use STP and this would exist as a line in the STP to describe how it's established. Yes. The question is to know if during the call exchange, we signal the use of this protocol into the STP right. I'm not sure. There is a. Yes, okay. Signaling. That's the answer. Okay. Yes. So what you described seems very similar to RAID 5 with disk drives. So when you join drives in RAID, you have an eight blocks and then you have one drive block which contains a pad bit for each of the blocks. But there's also RAID 6 which has not one but two pad blocks. Could that be applicable to your skin here? So you have a line of five packets and then you have not one but two redundancy packets which could help you recover the line between two packets of lost. Okay. So the question is about what happens if we lose repair packets for example or if we. Could that skin be improved with having two pallet packets but one? Not one packet but two. Yes, it may be it's always a trade-off between what you what bond with you have and what you decide to send to improve the protection. There is a other way to other protection pattern described in the RFC. For example, you can decide to protect small very specific source packets by using for example a flexible mask. So you can have maybe here in this example decide to protect some packets twice and some other once or not at all. Yes, it can be an improvement to prioritize the most important packets in your stream. And there is other schemes. One pair is one pair two block one. Yes, there is other parity codes. Honestly, I have to try to tell you which one can be better. I don't know. Probably one of the problems if you apply too much protection is that you're also going to a lot of overhead. So at one point if you're in a lossy network, you send more data to try to recover from more loss, you end up in this spinning spiral that doesn't make things better. So finding the balances is where the black magic is usually. Well, thanks Flo. Well, no, it's okay. Oh, there's one more question. Please go ahead, we have some time. Maybe regarding exactly what you said, how do you know that you don't make it worse? Yes, in fact, we had the problem. So at some point we sent more information in the written on stream than simply sending the video stream twice. In that case, we control the overhead periodically. And when it goes above, for example, 1.9, you reduce the FEC protection. It's not always indicated. So it's a decision that you have to make. We have established empirical rules to manage that. Yes? I want to ask you about the masking of your gold right now. Yes? The slide is right now there. You have said that you can protect the specific package. Yes, like you protect a group of packets. Yes? That's for example in video conversations for you. For example, the push and the step or that X2, 6, 4, and you protect, for example, the key frames do be interpolated instead of, isn't it? Yes, so the question is if you can protect, for example, the key frames of the video conference. Yes, it's a way to choose which packet you want to protect. If you don't want to protect everything, but mainly the key frame, it's a good approach. Or you can make the one-dimensional, two-dimensional only protection, only when you have the packets of the key frame. Okay. So the receiver size. Is it right like all your key frames are on one column and you just protect them? Yes, but you, so the key frames are not necessarily in the same rows or the same columns, but you can change the values of D and L whenever you want. On the receiver side, the receiver just read what it has in the FEC header. You see the value of D, the value of L, and it adapts the configuration to recover the lost packets. Okay, so you can modify that value dynamically during the... Yes, you can dynamically modify the protection configuration. And it's very powerful. Yes. How do you measure the network's bandwidth, for example? Because without provoking the network with high load, right? Yes, how do we measure the available bandwidth? We have estimator in our program that tries to measure the... If I remember, the time delay between the reception of packets and try to establish the bit rate. And we see if there is congestion, if there is congestion occurs or not. But it's based on estimation. We have to deal with that. Yes, the idea of the algorithm that we use is to measure the regularity of the packet at the receiver side. And when it changes, we can deduce that the bandwidth is more... is close to be saturated. This is more or less the way that we use. So do you use RTCP for this configuration? Yes, and we also use RTCP feedback as well in order to measure... packet losses from the receiver side. But it's a bit different than just bandwidth. For the bandwidth, it's really the regularity of the receiver side, which is a measure. Thanks, Bois. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.0, "text": " So good morning.", "tokens": [50364, 407, 665, 2446, 13, 50664], "temperature": 0.0, "avg_logprob": -0.4457052130448191, "compression_ratio": 1.3257142857142856, "no_speech_prob": 0.07155035436153412}, {"id": 1, "seek": 0, "start": 6.0, "end": 13.36, "text": " I am Flor Arl\u00e9 and I am here with my colleague Jean Monnier to present you a way to announce", "tokens": [50664, 286, 669, 8328, 1587, 29728, 293, 286, 669, 510, 365, 452, 13532, 13854, 4713, 19165, 281, 1974, 291, 257, 636, 281, 7478, 51032], "temperature": 0.0, "avg_logprob": -0.4457052130448191, "compression_ratio": 1.3257142857142856, "no_speech_prob": 0.07155035436153412}, {"id": 2, "seek": 0, "start": 13.36, "end": 23.62, "text": " the video call experience by using the flexible forward error correction.", "tokens": [51032, 264, 960, 818, 1752, 538, 1228, 264, 11358, 2128, 6713, 19984, 13, 51545], "temperature": 0.0, "avg_logprob": -0.4457052130448191, "compression_ratio": 1.3257142857142856, "no_speech_prob": 0.07155035436153412}, {"id": 3, "seek": 0, "start": 23.62, "end": 27.400000000000002, "text": " We work in the Bell Dawn Communication Company.", "tokens": [51545, 492, 589, 294, 264, 11485, 26001, 34930, 13918, 13, 51734], "temperature": 0.0, "avg_logprob": -0.4457052130448191, "compression_ratio": 1.3257142857142856, "no_speech_prob": 0.07155035436153412}, {"id": 4, "seek": 2740, "start": 27.4, "end": 39.56, "text": " This company has developed the LIN phone product that is a soft phone open source to make some", "tokens": [50364, 639, 2237, 575, 4743, 264, 441, 1464, 2593, 1674, 300, 307, 257, 2787, 2593, 1269, 4009, 281, 652, 512, 50972], "temperature": 0.0, "avg_logprob": -0.32029118076447516, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.008446404710412025}, {"id": 5, "seek": 2740, "start": 39.56, "end": 43.4, "text": " video and audio calls.", "tokens": [50972, 960, 293, 6278, 5498, 13, 51164], "temperature": 0.0, "avg_logprob": -0.32029118076447516, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.008446404710412025}, {"id": 6, "seek": 2740, "start": 43.4, "end": 48.72, "text": " And it works on several platforms.", "tokens": [51164, 400, 309, 1985, 322, 2940, 9473, 13, 51430], "temperature": 0.0, "avg_logprob": -0.32029118076447516, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.008446404710412025}, {"id": 7, "seek": 2740, "start": 48.72, "end": 55.36, "text": " So today I will explain to you how we implement the forward error correction for our video", "tokens": [51430, 407, 965, 286, 486, 2903, 281, 291, 577, 321, 4445, 264, 2128, 6713, 19984, 337, 527, 960, 51762], "temperature": 0.0, "avg_logprob": -0.32029118076447516, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.008446404710412025}, {"id": 8, "seek": 2740, "start": 55.36, "end": 56.36, "text": " calls.", "tokens": [51762, 5498, 13, 51812], "temperature": 0.0, "avg_logprob": -0.32029118076447516, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.008446404710412025}, {"id": 9, "seek": 5636, "start": 56.36, "end": 64.32, "text": " The first way we choose to use the flexible FEC scheme, I will explain to you how it is", "tokens": [50364, 440, 700, 636, 321, 2826, 281, 764, 264, 11358, 479, 8140, 12232, 11, 286, 486, 2903, 281, 291, 577, 309, 307, 50762], "temperature": 0.0, "avg_logprob": -0.26949398553193504, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.001228736829943955}, {"id": 10, "seek": 5636, "start": 64.32, "end": 74.6, "text": " described in the RFC 8627, how it has been developed in our products and I will show", "tokens": [50762, 7619, 294, 264, 497, 18671, 26687, 10076, 11, 577, 309, 575, 668, 4743, 294, 527, 3383, 293, 286, 486, 855, 51276], "temperature": 0.0, "avg_logprob": -0.26949398553193504, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.001228736829943955}, {"id": 11, "seek": 5636, "start": 74.6, "end": 78.76, "text": " you some results.", "tokens": [51276, 291, 512, 3542, 13, 51484], "temperature": 0.0, "avg_logprob": -0.26949398553193504, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.001228736829943955}, {"id": 12, "seek": 5636, "start": 78.76, "end": 83.56, "text": " So at first let's talk about the forward error correction.", "tokens": [51484, 407, 412, 700, 718, 311, 751, 466, 264, 2128, 6713, 19984, 13, 51724], "temperature": 0.0, "avg_logprob": -0.26949398553193504, "compression_ratio": 1.4147727272727273, "no_speech_prob": 0.001228736829943955}, {"id": 13, "seek": 8356, "start": 83.56, "end": 94.0, "text": " If you see this real schematic way to represent a video call, you have at first two people", "tokens": [50364, 759, 291, 536, 341, 957, 44739, 636, 281, 2906, 257, 960, 818, 11, 291, 362, 412, 700, 732, 561, 50886], "temperature": 0.0, "avg_logprob": -0.19999543103304776, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.002419751137495041}, {"id": 14, "seek": 8356, "start": 94.0, "end": 96.8, "text": " who share a video call.", "tokens": [50886, 567, 2073, 257, 960, 818, 13, 51026], "temperature": 0.0, "avg_logprob": -0.19999543103304776, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.002419751137495041}, {"id": 15, "seek": 8356, "start": 96.8, "end": 102.92, "text": " On the center side you have a device that captures the video.", "tokens": [51026, 1282, 264, 3056, 1252, 291, 362, 257, 4302, 300, 27986, 264, 960, 13, 51332], "temperature": 0.0, "avg_logprob": -0.19999543103304776, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.002419751137495041}, {"id": 16, "seek": 8356, "start": 102.92, "end": 111.80000000000001, "text": " The signal is encoded here by a video encoder that transforms the signal into frames.", "tokens": [51332, 440, 6358, 307, 2058, 12340, 510, 538, 257, 960, 2058, 19866, 300, 35592, 264, 6358, 666, 12083, 13, 51776], "temperature": 0.0, "avg_logprob": -0.19999543103304776, "compression_ratio": 1.5975609756097562, "no_speech_prob": 0.002419751137495041}, {"id": 17, "seek": 11180, "start": 111.8, "end": 119.67999999999999, "text": " And those frames are split into packets that will be sent to the receiver through video", "tokens": [50364, 400, 729, 12083, 366, 7472, 666, 30364, 300, 486, 312, 2279, 281, 264, 20086, 807, 960, 50758], "temperature": 0.0, "avg_logprob": -0.14815797962126184, "compression_ratio": 1.7006369426751593, "no_speech_prob": 0.03706002235412598}, {"id": 18, "seek": 11180, "start": 119.67999999999999, "end": 122.88, "text": " stream on the network.", "tokens": [50758, 4309, 322, 264, 3209, 13, 50918], "temperature": 0.0, "avg_logprob": -0.14815797962126184, "compression_ratio": 1.7006369426751593, "no_speech_prob": 0.03706002235412598}, {"id": 19, "seek": 11180, "start": 122.88, "end": 129.88, "text": " On the receiver side the packets are collected and decoded and the frames are recovered back", "tokens": [50918, 1282, 264, 20086, 1252, 264, 30364, 366, 11087, 293, 979, 12340, 293, 264, 12083, 366, 19542, 646, 51268], "temperature": 0.0, "avg_logprob": -0.14815797962126184, "compression_ratio": 1.7006369426751593, "no_speech_prob": 0.03706002235412598}, {"id": 20, "seek": 11180, "start": 129.88, "end": 136.2, "text": " and the signal is displayed and the receiver can see the video.", "tokens": [51268, 293, 264, 6358, 307, 16372, 293, 264, 20086, 393, 536, 264, 960, 13, 51584], "temperature": 0.0, "avg_logprob": -0.14815797962126184, "compression_ratio": 1.7006369426751593, "no_speech_prob": 0.03706002235412598}, {"id": 21, "seek": 13620, "start": 136.2, "end": 141.48, "text": " In the case of the video call we are in a real time context.", "tokens": [50364, 682, 264, 1389, 295, 264, 960, 818, 321, 366, 294, 257, 957, 565, 4319, 13, 50628], "temperature": 0.0, "avg_logprob": -0.2875918203325414, "compression_ratio": 1.5508982035928143, "no_speech_prob": 0.17448943853378296}, {"id": 22, "seek": 13620, "start": 141.48, "end": 152.6, "text": " So we work on the RTP retight transport protocol that describes how you can send video or audio", "tokens": [50628, 407, 321, 589, 322, 264, 497, 16804, 1533, 397, 5495, 10336, 300, 15626, 577, 291, 393, 2845, 960, 420, 6278, 51184], "temperature": 0.0, "avg_logprob": -0.2875918203325414, "compression_ratio": 1.5508982035928143, "no_speech_prob": 0.17448943853378296}, {"id": 23, "seek": 13620, "start": 152.6, "end": 155.23999999999998, "text": " with the internet.", "tokens": [51184, 365, 264, 4705, 13, 51316], "temperature": 0.0, "avg_logprob": -0.2875918203325414, "compression_ratio": 1.5508982035928143, "no_speech_prob": 0.17448943853378296}, {"id": 24, "seek": 13620, "start": 155.23999999999998, "end": 162.83999999999997, "text": " This protocol describes the format of the RTP packets and it is more regalable than", "tokens": [51316, 639, 10336, 15626, 264, 7877, 295, 264, 497, 16804, 30364, 293, 309, 307, 544, 1121, 304, 712, 813, 51696], "temperature": 0.0, "avg_logprob": -0.2875918203325414, "compression_ratio": 1.5508982035928143, "no_speech_prob": 0.17448943853378296}, {"id": 25, "seek": 16284, "start": 162.84, "end": 168.76, "text": " the UDP because for example you don't have latency problem that is adapted for real time", "tokens": [50364, 264, 624, 11373, 570, 337, 1365, 291, 500, 380, 362, 27043, 1154, 300, 307, 20871, 337, 957, 565, 50660], "temperature": 0.0, "avg_logprob": -0.23188729338593536, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.05436704680323601}, {"id": 26, "seek": 16284, "start": 168.76, "end": 171.36, "text": " communication.", "tokens": [50660, 6101, 13, 50790], "temperature": 0.0, "avg_logprob": -0.23188729338593536, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.05436704680323601}, {"id": 27, "seek": 16284, "start": 171.36, "end": 177.64000000000001, "text": " Unfortunately in the real world you have problems, you can experiment problems with your network", "tokens": [50790, 8590, 294, 264, 957, 1002, 291, 362, 2740, 11, 291, 393, 5120, 2740, 365, 428, 3209, 51104], "temperature": 0.0, "avg_logprob": -0.23188729338593536, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.05436704680323601}, {"id": 28, "seek": 16284, "start": 177.64000000000001, "end": 184.2, "text": " so the traffic may be high, you can have a low bandwidth and sometimes you lose packets", "tokens": [51104, 370, 264, 6419, 815, 312, 1090, 11, 291, 393, 362, 257, 2295, 23647, 293, 2171, 291, 3624, 30364, 51432], "temperature": 0.0, "avg_logprob": -0.23188729338593536, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.05436704680323601}, {"id": 29, "seek": 16284, "start": 184.2, "end": 185.84, "text": " during the transmission.", "tokens": [51432, 1830, 264, 11574, 13, 51514], "temperature": 0.0, "avg_logprob": -0.23188729338593536, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.05436704680323601}, {"id": 30, "seek": 16284, "start": 185.84, "end": 192.8, "text": " So the receiver doesn't collect all the packets, the signal is not complete and you see that", "tokens": [51514, 407, 264, 20086, 1177, 380, 2500, 439, 264, 30364, 11, 264, 6358, 307, 406, 3566, 293, 291, 536, 300, 51862], "temperature": 0.0, "avg_logprob": -0.23188729338593536, "compression_ratio": 1.6639344262295082, "no_speech_prob": 0.05436704680323601}, {"id": 31, "seek": 19280, "start": 192.8, "end": 198.0, "text": " your video can freeze and it is really annoying for everyone.", "tokens": [50364, 428, 960, 393, 15959, 293, 309, 307, 534, 11304, 337, 1518, 13, 50624], "temperature": 0.0, "avg_logprob": -0.22696675618489584, "compression_ratio": 1.6335078534031413, "no_speech_prob": 0.002546520670875907}, {"id": 32, "seek": 19280, "start": 198.0, "end": 205.52, "text": " To overcome that you can use a strategy to recover your lost packets.", "tokens": [50624, 1407, 10473, 300, 291, 393, 764, 257, 5206, 281, 8114, 428, 2731, 30364, 13, 51000], "temperature": 0.0, "avg_logprob": -0.22696675618489584, "compression_ratio": 1.6335078534031413, "no_speech_prob": 0.002546520670875907}, {"id": 33, "seek": 19280, "start": 205.52, "end": 211.72000000000003, "text": " For the forward error correction you will recover the lost packets by using the next", "tokens": [51000, 1171, 264, 2128, 6713, 19984, 291, 486, 8114, 264, 2731, 30364, 538, 1228, 264, 958, 51310], "temperature": 0.0, "avg_logprob": -0.22696675618489584, "compression_ratio": 1.6335078534031413, "no_speech_prob": 0.002546520670875907}, {"id": 34, "seek": 19280, "start": 211.72000000000003, "end": 218.56, "text": " packet and also a run-down-see information that is sent at the same time than the video", "tokens": [51310, 20300, 293, 611, 257, 1190, 12, 5093, 12, 17109, 1589, 300, 307, 2279, 412, 264, 912, 565, 813, 264, 960, 51652], "temperature": 0.0, "avg_logprob": -0.22696675618489584, "compression_ratio": 1.6335078534031413, "no_speech_prob": 0.002546520670875907}, {"id": 35, "seek": 19280, "start": 218.56, "end": 220.28, "text": " stream.", "tokens": [51652, 4309, 13, 51738], "temperature": 0.0, "avg_logprob": -0.22696675618489584, "compression_ratio": 1.6335078534031413, "no_speech_prob": 0.002546520670875907}, {"id": 36, "seek": 22028, "start": 220.28, "end": 228.68, "text": " With this way you can recover your full video and have a nice video call.", "tokens": [50364, 2022, 341, 636, 291, 393, 8114, 428, 1577, 960, 293, 362, 257, 1481, 960, 818, 13, 50784], "temperature": 0.0, "avg_logprob": -0.13774664402008058, "compression_ratio": 1.6476683937823835, "no_speech_prob": 0.018746627494692802}, {"id": 37, "seek": 22028, "start": 228.68, "end": 234.2, "text": " We choose to use the flexible scheme for our project.", "tokens": [50784, 492, 2826, 281, 764, 264, 11358, 12232, 337, 527, 1716, 13, 51060], "temperature": 0.0, "avg_logprob": -0.13774664402008058, "compression_ratio": 1.6476683937823835, "no_speech_prob": 0.018746627494692802}, {"id": 38, "seek": 22028, "start": 234.2, "end": 240.28, "text": " So when you detect loss in your receiver, the receiver side, you have several strategies", "tokens": [51060, 407, 562, 291, 5531, 4470, 294, 428, 20086, 11, 264, 20086, 1252, 11, 291, 362, 2940, 9029, 51364], "temperature": 0.0, "avg_logprob": -0.13774664402008058, "compression_ratio": 1.6476683937823835, "no_speech_prob": 0.018746627494692802}, {"id": 39, "seek": 22028, "start": 240.28, "end": 241.72, "text": " that you can apply.", "tokens": [51364, 300, 291, 393, 3079, 13, 51436], "temperature": 0.0, "avg_logprob": -0.13774664402008058, "compression_ratio": 1.6476683937823835, "no_speech_prob": 0.018746627494692802}, {"id": 40, "seek": 22028, "start": 241.72, "end": 247.92000000000002, "text": " You can ask to send the packet again but you will have to wait to get the packet.", "tokens": [51436, 509, 393, 1029, 281, 2845, 264, 20300, 797, 457, 291, 486, 362, 281, 1699, 281, 483, 264, 20300, 13, 51746], "temperature": 0.0, "avg_logprob": -0.13774664402008058, "compression_ratio": 1.6476683937823835, "no_speech_prob": 0.018746627494692802}, {"id": 41, "seek": 24792, "start": 247.92, "end": 254.39999999999998, "text": " You can primitively decide to send twice the video stream but it is really costly.", "tokens": [50364, 509, 393, 28540, 356, 4536, 281, 2845, 6091, 264, 960, 4309, 457, 309, 307, 534, 28328, 13, 50688], "temperature": 0.0, "avg_logprob": -0.18543640585506663, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.012061404064297676}, {"id": 42, "seek": 24792, "start": 254.39999999999998, "end": 260.0, "text": " Or you can try to recover the packets with what you have at the time.", "tokens": [50688, 1610, 291, 393, 853, 281, 8114, 264, 30364, 365, 437, 291, 362, 412, 264, 565, 13, 50968], "temperature": 0.0, "avg_logprob": -0.18543640585506663, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.012061404064297676}, {"id": 43, "seek": 24792, "start": 260.0, "end": 265.56, "text": " The forward error corrections allow you to recover the lost packets by using the run-down-see", "tokens": [50968, 440, 2128, 6713, 36406, 2089, 291, 281, 8114, 264, 2731, 30364, 538, 1228, 264, 1190, 12, 5093, 12, 17109, 51246], "temperature": 0.0, "avg_logprob": -0.18543640585506663, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.012061404064297676}, {"id": 44, "seek": 24792, "start": 265.56, "end": 268.91999999999996, "text": " information and the other packets.", "tokens": [51246, 1589, 293, 264, 661, 30364, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18543640585506663, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.012061404064297676}, {"id": 45, "seek": 24792, "start": 268.91999999999996, "end": 276.44, "text": " There are several algorithms, for example the low density parity check codes and there", "tokens": [51414, 821, 366, 2940, 14642, 11, 337, 1365, 264, 2295, 10305, 44747, 1520, 14211, 293, 456, 51790], "temperature": 0.0, "avg_logprob": -0.18543640585506663, "compression_ratio": 1.6576576576576576, "no_speech_prob": 0.012061404064297676}, {"id": 46, "seek": 27644, "start": 276.44, "end": 280.04, "text": " is the flexible forward error correction.", "tokens": [50364, 307, 264, 11358, 2128, 6713, 19984, 13, 50544], "temperature": 0.0, "avg_logprob": -0.26484290322104653, "compression_ratio": 1.5761904761904761, "no_speech_prob": 0.012321336194872856}, {"id": 47, "seek": 27644, "start": 280.04, "end": 283.48, "text": " That is the method that we choose because it is really simple.", "tokens": [50544, 663, 307, 264, 3170, 300, 321, 2826, 570, 309, 307, 534, 2199, 13, 50716], "temperature": 0.0, "avg_logprob": -0.26484290322104653, "compression_ratio": 1.5761904761904761, "no_speech_prob": 0.012321336194872856}, {"id": 48, "seek": 27644, "start": 283.48, "end": 291.88, "text": " It is based on the combination of the packets with an exclusive XOR operation and it is", "tokens": [50716, 467, 307, 2361, 322, 264, 6562, 295, 264, 30364, 365, 364, 13005, 1783, 2483, 6916, 293, 309, 307, 51136], "temperature": 0.0, "avg_logprob": -0.26484290322104653, "compression_ratio": 1.5761904761904761, "no_speech_prob": 0.012321336194872856}, {"id": 49, "seek": 27644, "start": 291.88, "end": 292.88, "text": " free.", "tokens": [51136, 1737, 13, 51186], "temperature": 0.0, "avg_logprob": -0.26484290322104653, "compression_ratio": 1.5761904761904761, "no_speech_prob": 0.012321336194872856}, {"id": 50, "seek": 27644, "start": 292.88, "end": 293.88, "text": " There is no patterns.", "tokens": [51186, 821, 307, 572, 8294, 13, 51236], "temperature": 0.0, "avg_logprob": -0.26484290322104653, "compression_ratio": 1.5761904761904761, "no_speech_prob": 0.012321336194872856}, {"id": 51, "seek": 27644, "start": 293.88, "end": 296.15999999999997, "text": " It is a recent standard.", "tokens": [51236, 467, 307, 257, 5162, 3832, 13, 51350], "temperature": 0.0, "avg_logprob": -0.26484290322104653, "compression_ratio": 1.5761904761904761, "no_speech_prob": 0.012321336194872856}, {"id": 52, "seek": 27644, "start": 296.15999999999997, "end": 300.4, "text": " It has been for example developed in the web RTC.", "tokens": [51350, 467, 575, 668, 337, 1365, 4743, 294, 264, 3670, 497, 18238, 13, 51562], "temperature": 0.0, "avg_logprob": -0.26484290322104653, "compression_ratio": 1.5761904761904761, "no_speech_prob": 0.012321336194872856}, {"id": 53, "seek": 27644, "start": 300.4, "end": 306.0, "text": " So we can be interoperable with it.", "tokens": [51562, 407, 321, 393, 312, 728, 7192, 712, 365, 309, 13, 51842], "temperature": 0.0, "avg_logprob": -0.26484290322104653, "compression_ratio": 1.5761904761904761, "no_speech_prob": 0.012321336194872856}, {"id": 54, "seek": 30600, "start": 306.56, "end": 311.12, "text": " The standard is described in the RFC 8627.", "tokens": [50392, 440, 3832, 307, 7619, 294, 264, 497, 18671, 26687, 10076, 13, 50620], "temperature": 0.0, "avg_logprob": -0.25727386474609376, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.011467835865914822}, {"id": 55, "seek": 30600, "start": 311.12, "end": 317.0, "text": " It describes, this document describes fully how an FTP stream can be protected with flexible", "tokens": [50620, 467, 15626, 11, 341, 4166, 15626, 4498, 577, 364, 479, 16804, 4309, 393, 312, 10594, 365, 11358, 50914], "temperature": 0.0, "avg_logprob": -0.25727386474609376, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.011467835865914822}, {"id": 56, "seek": 30600, "start": 317.0, "end": 319.0, "text": " FEC.", "tokens": [50914, 479, 8140, 13, 51014], "temperature": 0.0, "avg_logprob": -0.25727386474609376, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.011467835865914822}, {"id": 57, "seek": 30600, "start": 319.0, "end": 324.72, "text": " It gives the format for the repair packet that will be sent to carry the run-down-see", "tokens": [51014, 467, 2709, 264, 7877, 337, 264, 10535, 20300, 300, 486, 312, 2279, 281, 3985, 264, 1190, 12, 5093, 12, 17109, 51300], "temperature": 0.0, "avg_logprob": -0.25727386474609376, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.011467835865914822}, {"id": 58, "seek": 30600, "start": 324.72, "end": 334.24, "text": " information and it proposes the codes to generate those packets and to decode to reconstruct", "tokens": [51300, 1589, 293, 309, 2365, 4201, 264, 14211, 281, 8460, 729, 30364, 293, 281, 979, 1429, 281, 31499, 51776], "temperature": 0.0, "avg_logprob": -0.25727386474609376, "compression_ratio": 1.5263157894736843, "no_speech_prob": 0.011467835865914822}, {"id": 59, "seek": 33424, "start": 334.24, "end": 336.52, "text": " the lost packets.", "tokens": [50364, 264, 2731, 30364, 13, 50478], "temperature": 0.0, "avg_logprob": -0.2309282987545698, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.0041001406498253345}, {"id": 60, "seek": 33424, "start": 336.52, "end": 344.36, "text": " This RFC is applicable to all media, not only video but also video, text and application.", "tokens": [50478, 639, 497, 18671, 307, 21142, 281, 439, 3021, 11, 406, 787, 960, 457, 611, 960, 11, 2487, 293, 3861, 13, 50870], "temperature": 0.0, "avg_logprob": -0.2309282987545698, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.0041001406498253345}, {"id": 61, "seek": 33424, "start": 344.36, "end": 352.0, "text": " So now we will explain you how it works as described in this RFC document.", "tokens": [50870, 407, 586, 321, 486, 2903, 291, 577, 309, 1985, 382, 7619, 294, 341, 497, 18671, 4166, 13, 51252], "temperature": 0.0, "avg_logprob": -0.2309282987545698, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.0041001406498253345}, {"id": 62, "seek": 33424, "start": 352.0, "end": 360.76, "text": " So at first when you have a video stream you send the packets within an FTP session with", "tokens": [51252, 407, 412, 700, 562, 291, 362, 257, 960, 4309, 291, 2845, 264, 30364, 1951, 364, 479, 16804, 5481, 365, 51690], "temperature": 0.0, "avg_logprob": -0.2309282987545698, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.0041001406498253345}, {"id": 63, "seek": 33424, "start": 360.76, "end": 363.32, "text": " a source RTP stream.", "tokens": [51690, 257, 4009, 497, 16804, 4309, 13, 51818], "temperature": 0.0, "avg_logprob": -0.2309282987545698, "compression_ratio": 1.553191489361702, "no_speech_prob": 0.0041001406498253345}, {"id": 64, "seek": 36332, "start": 363.32, "end": 367.68, "text": " Your packets are here represented by the squares.", "tokens": [50364, 2260, 30364, 366, 510, 10379, 538, 264, 19368, 13, 50582], "temperature": 0.0, "avg_logprob": -0.172300563139074, "compression_ratio": 1.4054054054054055, "no_speech_prob": 0.001351717277429998}, {"id": 65, "seek": 36332, "start": 367.68, "end": 372.68, "text": " They have a unique sequence number that increase with time.", "tokens": [50582, 814, 362, 257, 3845, 8310, 1230, 300, 3488, 365, 565, 13, 50832], "temperature": 0.0, "avg_logprob": -0.172300563139074, "compression_ratio": 1.4054054054054055, "no_speech_prob": 0.001351717277429998}, {"id": 66, "seek": 36332, "start": 372.68, "end": 380.4, "text": " And when you want to make a flexible FEC you add another run-down-see RTP stream and you", "tokens": [50832, 400, 562, 291, 528, 281, 652, 257, 11358, 479, 8140, 291, 909, 1071, 1190, 12, 5093, 12, 17109, 497, 16804, 4309, 293, 291, 51218], "temperature": 0.0, "avg_logprob": -0.172300563139074, "compression_ratio": 1.4054054054054055, "no_speech_prob": 0.001351717277429998}, {"id": 67, "seek": 36332, "start": 380.4, "end": 382.36, "text": " don't change the source stream.", "tokens": [51218, 500, 380, 1319, 264, 4009, 4309, 13, 51316], "temperature": 0.0, "avg_logprob": -0.172300563139074, "compression_ratio": 1.4054054054054055, "no_speech_prob": 0.001351717277429998}, {"id": 68, "seek": 36332, "start": 382.36, "end": 386.4, "text": " So it is backward compatible.", "tokens": [51316, 407, 309, 307, 23897, 18218, 13, 51518], "temperature": 0.0, "avg_logprob": -0.172300563139074, "compression_ratio": 1.4054054054054055, "no_speech_prob": 0.001351717277429998}, {"id": 69, "seek": 38640, "start": 386.4, "end": 393.35999999999996, "text": " The principle is simply to take a set of source packets, combine them with your XO with a", "tokens": [50364, 440, 8665, 307, 2935, 281, 747, 257, 992, 295, 4009, 30364, 11, 10432, 552, 365, 428, 1783, 46, 365, 257, 50712], "temperature": 0.0, "avg_logprob": -0.2160262363712962, "compression_ratio": 1.4829268292682927, "no_speech_prob": 0.032775502651929855}, {"id": 70, "seek": 38640, "start": 393.35999999999996, "end": 398.79999999999995, "text": " priority FEC encoder and generate a repair packet here.", "tokens": [50712, 9365, 479, 8140, 2058, 19866, 293, 8460, 257, 10535, 20300, 510, 13, 50984], "temperature": 0.0, "avg_logprob": -0.2160262363712962, "compression_ratio": 1.4829268292682927, "no_speech_prob": 0.032775502651929855}, {"id": 71, "seek": 38640, "start": 398.79999999999995, "end": 403.4, "text": " So for example this one is called R5, R4.", "tokens": [50984, 407, 337, 1365, 341, 472, 307, 1219, 497, 20, 11, 497, 19, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2160262363712962, "compression_ratio": 1.4829268292682927, "no_speech_prob": 0.032775502651929855}, {"id": 72, "seek": 38640, "start": 403.4, "end": 406.71999999999997, "text": " Why using XO operation?", "tokens": [51214, 1545, 1228, 1783, 46, 6916, 30, 51380], "temperature": 0.0, "avg_logprob": -0.2160262363712962, "compression_ratio": 1.4829268292682927, "no_speech_prob": 0.032775502651929855}, {"id": 73, "seek": 38640, "start": 406.71999999999997, "end": 416.35999999999996, "text": " It is because of a nice property of this operation that makes you able to recover one of the", "tokens": [51380, 467, 307, 570, 295, 257, 1481, 4707, 295, 341, 6916, 300, 1669, 291, 1075, 281, 8114, 472, 295, 264, 51862], "temperature": 0.0, "avg_logprob": -0.2160262363712962, "compression_ratio": 1.4829268292682927, "no_speech_prob": 0.032775502651929855}, {"id": 74, "seek": 41636, "start": 416.36, "end": 420.48, "text": " packets if you have all the other.", "tokens": [50364, 30364, 498, 291, 362, 439, 264, 661, 13, 50570], "temperature": 0.0, "avg_logprob": -0.1732353787673147, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.005425842013210058}, {"id": 75, "seek": 41636, "start": 420.48, "end": 425.96000000000004, "text": " So you can encode a packet and decode a missing packet.", "tokens": [50570, 407, 291, 393, 2058, 1429, 257, 20300, 293, 979, 1429, 257, 5361, 20300, 13, 50844], "temperature": 0.0, "avg_logprob": -0.1732353787673147, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.005425842013210058}, {"id": 76, "seek": 41636, "start": 425.96000000000004, "end": 435.2, "text": " At the receiver side when you detect a loss, for example here the packet S4 has been lost,", "tokens": [50844, 1711, 264, 20086, 1252, 562, 291, 5531, 257, 4470, 11, 337, 1365, 510, 264, 20300, 318, 19, 575, 668, 2731, 11, 51306], "temperature": 0.0, "avg_logprob": -0.1732353787673147, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.005425842013210058}, {"id": 77, "seek": 41636, "start": 435.2, "end": 445.48, "text": " you can get it back by applying your exclusive OR over S6, S5 and the repair packet R4.", "tokens": [51306, 291, 393, 483, 309, 646, 538, 9275, 428, 13005, 19654, 670, 318, 21, 11, 318, 20, 293, 264, 10535, 20300, 497, 19, 13, 51820], "temperature": 0.0, "avg_logprob": -0.1732353787673147, "compression_ratio": 1.5549132947976878, "no_speech_prob": 0.005425842013210058}, {"id": 78, "seek": 44548, "start": 445.48, "end": 455.48, "text": " And then this new packet can be sent to the stream here.", "tokens": [50364, 400, 550, 341, 777, 20300, 393, 312, 2279, 281, 264, 4309, 510, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1497561821570763, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0018948885845020413}, {"id": 79, "seek": 44548, "start": 455.48, "end": 460.04, "text": " To operate your flexible FEC you can choose several parameters.", "tokens": [50864, 1407, 9651, 428, 11358, 479, 8140, 291, 393, 2826, 2940, 9834, 13, 51092], "temperature": 0.0, "avg_logprob": -0.1497561821570763, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0018948885845020413}, {"id": 80, "seek": 44548, "start": 460.04, "end": 464.16, "text": " You have to decide what is the length of your repair window.", "tokens": [51092, 509, 362, 281, 4536, 437, 307, 264, 4641, 295, 428, 10535, 4910, 13, 51298], "temperature": 0.0, "avg_logprob": -0.1497561821570763, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0018948885845020413}, {"id": 81, "seek": 44548, "start": 464.16, "end": 471.96000000000004, "text": " It is a duration interval that allows you to buffer your source packets to be sure that", "tokens": [51298, 467, 307, 257, 16365, 15035, 300, 4045, 291, 281, 21762, 428, 4009, 30364, 281, 312, 988, 300, 51688], "temperature": 0.0, "avg_logprob": -0.1497561821570763, "compression_ratio": 1.478021978021978, "no_speech_prob": 0.0018948885845020413}, {"id": 82, "seek": 47196, "start": 471.96, "end": 475.88, "text": " you have enough source packets to make the recovery.", "tokens": [50364, 291, 362, 1547, 4009, 30364, 281, 652, 264, 8597, 13, 50560], "temperature": 0.0, "avg_logprob": -0.2110599020253057, "compression_ratio": 1.6569767441860466, "no_speech_prob": 0.018970342352986336}, {"id": 83, "seek": 47196, "start": 475.88, "end": 482.59999999999997, "text": " And you have to decide which packet you will combine with which one within a protection", "tokens": [50560, 400, 291, 362, 281, 4536, 597, 20300, 291, 486, 10432, 365, 597, 472, 1951, 257, 6334, 50896], "temperature": 0.0, "avg_logprob": -0.2110599020253057, "compression_ratio": 1.6569767441860466, "no_speech_prob": 0.018970342352986336}, {"id": 84, "seek": 47196, "start": 482.59999999999997, "end": 484.52, "text": " pattern.", "tokens": [50896, 5102, 13, 50992], "temperature": 0.0, "avg_logprob": -0.2110599020253057, "compression_ratio": 1.6569767441860466, "no_speech_prob": 0.018970342352986336}, {"id": 85, "seek": 47196, "start": 484.52, "end": 488.28, "text": " So now we present you several protection patterns.", "tokens": [50992, 407, 586, 321, 1974, 291, 2940, 6334, 8294, 13, 51180], "temperature": 0.0, "avg_logprob": -0.2110599020253057, "compression_ratio": 1.6569767441860466, "no_speech_prob": 0.018970342352986336}, {"id": 86, "seek": 47196, "start": 488.28, "end": 499.2, "text": " If you represent your source packets like a block here from S1 to SdL with L columns", "tokens": [51180, 759, 291, 2906, 428, 4009, 30364, 411, 257, 3461, 510, 490, 318, 16, 281, 318, 67, 43, 365, 441, 13766, 51726], "temperature": 0.0, "avg_logprob": -0.2110599020253057, "compression_ratio": 1.6569767441860466, "no_speech_prob": 0.018970342352986336}, {"id": 87, "seek": 49920, "start": 499.2, "end": 506.8, "text": " and D lines you can make a first way to protect that is a row protection, a one-dimensional", "tokens": [50364, 293, 413, 3876, 291, 393, 652, 257, 700, 636, 281, 2371, 300, 307, 257, 5386, 6334, 11, 257, 472, 12, 18759, 50744], "temperature": 0.0, "avg_logprob": -0.224339974893106, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.020780440419912338}, {"id": 88, "seek": 49920, "start": 506.8, "end": 512.16, "text": " non-interleave protection where the XOR is applied on the rows.", "tokens": [50744, 2107, 12, 5106, 306, 946, 6334, 689, 264, 1783, 2483, 307, 6456, 322, 264, 13241, 13, 51012], "temperature": 0.0, "avg_logprob": -0.224339974893106, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.020780440419912338}, {"id": 89, "seek": 49920, "start": 512.16, "end": 519.92, "text": " So here you generate D repair packets that protects a set of source packets of length", "tokens": [51012, 407, 510, 291, 8460, 413, 10535, 30364, 300, 22583, 257, 992, 295, 4009, 30364, 295, 4641, 51400], "temperature": 0.0, "avg_logprob": -0.224339974893106, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.020780440419912338}, {"id": 90, "seek": 49920, "start": 519.92, "end": 525.56, "text": " L. Another way is to combine them by columns.", "tokens": [51400, 441, 13, 3996, 636, 307, 281, 10432, 552, 538, 13766, 13, 51682], "temperature": 0.0, "avg_logprob": -0.224339974893106, "compression_ratio": 1.5105263157894737, "no_speech_prob": 0.020780440419912338}, {"id": 91, "seek": 52556, "start": 525.56, "end": 534.28, "text": " So here you have L repair packets that protects the source packets with depth D.", "tokens": [50364, 407, 510, 291, 362, 441, 10535, 30364, 300, 22583, 264, 4009, 30364, 365, 7161, 413, 13, 50800], "temperature": 0.0, "avg_logprob": -0.1419322660991124, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.009874892421066761}, {"id": 92, "seek": 52556, "start": 534.28, "end": 541.56, "text": " So now I will show you how you can recover the source packets with this combination.", "tokens": [50800, 407, 586, 286, 486, 855, 291, 577, 291, 393, 8114, 264, 4009, 30364, 365, 341, 6562, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1419322660991124, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.009874892421066761}, {"id": 93, "seek": 52556, "start": 541.56, "end": 548.8399999999999, "text": " So here you have an example with row protection and here with column protection.", "tokens": [51164, 407, 510, 291, 362, 364, 1365, 365, 5386, 6334, 293, 510, 365, 7738, 6334, 13, 51528], "temperature": 0.0, "avg_logprob": -0.1419322660991124, "compression_ratio": 1.7083333333333333, "no_speech_prob": 0.009874892421066761}, {"id": 94, "seek": 54884, "start": 548.84, "end": 557.1600000000001, "text": " Because you have random losses in your transmission you can apply the XOR to recover the lost", "tokens": [50364, 1436, 291, 362, 4974, 15352, 294, 428, 11574, 291, 393, 3079, 264, 1783, 2483, 281, 8114, 264, 2731, 50780], "temperature": 0.0, "avg_logprob": -0.17942530579037136, "compression_ratio": 1.7228260869565217, "no_speech_prob": 0.028394626453518867}, {"id": 95, "seek": 54884, "start": 557.1600000000001, "end": 563.1600000000001, "text": " packets here with the row application of the XOR and here with the columns.", "tokens": [50780, 30364, 510, 365, 264, 5386, 3861, 295, 264, 1783, 2483, 293, 510, 365, 264, 13766, 13, 51080], "temperature": 0.0, "avg_logprob": -0.17942530579037136, "compression_ratio": 1.7228260869565217, "no_speech_prob": 0.028394626453518867}, {"id": 96, "seek": 54884, "start": 563.1600000000001, "end": 567.96, "text": " But in some cases it will be more difficult because if you have burst in your transmission", "tokens": [51080, 583, 294, 512, 3331, 309, 486, 312, 544, 2252, 570, 498, 291, 362, 12712, 294, 428, 11574, 51320], "temperature": 0.0, "avg_logprob": -0.17942530579037136, "compression_ratio": 1.7228260869565217, "no_speech_prob": 0.028394626453518867}, {"id": 97, "seek": 54884, "start": 567.96, "end": 572.12, "text": " it means that you will lose a consecutive source packet.", "tokens": [51320, 309, 1355, 300, 291, 486, 3624, 257, 30497, 4009, 20300, 13, 51528], "temperature": 0.0, "avg_logprob": -0.17942530579037136, "compression_ratio": 1.7228260869565217, "no_speech_prob": 0.028394626453518867}, {"id": 98, "seek": 57212, "start": 572.12, "end": 580.2, "text": " You won't be able to recover because you can't have both packets here and here you", "tokens": [50364, 509, 1582, 380, 312, 1075, 281, 8114, 570, 291, 393, 380, 362, 1293, 30364, 510, 293, 510, 291, 50768], "temperature": 0.0, "avg_logprob": -0.16497351573063776, "compression_ratio": 1.7864583333333333, "no_speech_prob": 0.004459799733012915}, {"id": 99, "seek": 57212, "start": 580.2, "end": 585.76, "text": " will recover the columns that have only one loss but not the columns that have more than", "tokens": [50768, 486, 8114, 264, 13766, 300, 362, 787, 472, 4470, 457, 406, 264, 13766, 300, 362, 544, 813, 51046], "temperature": 0.0, "avg_logprob": -0.16497351573063776, "compression_ratio": 1.7864583333333333, "no_speech_prob": 0.004459799733012915}, {"id": 100, "seek": 57212, "start": 585.76, "end": 586.76, "text": " one loss.", "tokens": [51046, 472, 4470, 13, 51096], "temperature": 0.0, "avg_logprob": -0.16497351573063776, "compression_ratio": 1.7864583333333333, "no_speech_prob": 0.004459799733012915}, {"id": 101, "seek": 57212, "start": 586.76, "end": 592.72, "text": " To overcome this problem you can make a two-dimensional protection.", "tokens": [51096, 1407, 10473, 341, 1154, 291, 393, 652, 257, 732, 12, 18759, 6334, 13, 51394], "temperature": 0.0, "avg_logprob": -0.16497351573063776, "compression_ratio": 1.7864583333333333, "no_speech_prob": 0.004459799733012915}, {"id": 102, "seek": 57212, "start": 592.72, "end": 599.5600000000001, "text": " Here you have simply the combination of row protection and column protection and it generates", "tokens": [51394, 1692, 291, 362, 2935, 264, 6562, 295, 5386, 6334, 293, 7738, 6334, 293, 309, 23815, 51736], "temperature": 0.0, "avg_logprob": -0.16497351573063776, "compression_ratio": 1.7864583333333333, "no_speech_prob": 0.004459799733012915}, {"id": 103, "seek": 59956, "start": 600.3599999999999, "end": 604.04, "text": " L plus D repair packets.", "tokens": [50404, 441, 1804, 413, 10535, 30364, 13, 50588], "temperature": 0.0, "avg_logprob": -0.17332572407192653, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.002394053153693676}, {"id": 104, "seek": 59956, "start": 604.04, "end": 612.1999999999999, "text": " In this case you have in the RFC an iterative algorithm to recover the lost packets.", "tokens": [50588, 682, 341, 1389, 291, 362, 294, 264, 497, 18671, 364, 17138, 1166, 9284, 281, 8114, 264, 2731, 30364, 13, 50996], "temperature": 0.0, "avg_logprob": -0.17332572407192653, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.002394053153693676}, {"id": 105, "seek": 59956, "start": 612.1999999999999, "end": 621.1199999999999, "text": " So here I show you two examples with long burst here and here with random loss.", "tokens": [50996, 407, 510, 286, 855, 291, 732, 5110, 365, 938, 12712, 510, 293, 510, 365, 4974, 4470, 13, 51442], "temperature": 0.0, "avg_logprob": -0.17332572407192653, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.002394053153693676}, {"id": 106, "seek": 59956, "start": 621.1199999999999, "end": 623.76, "text": " The algorithm starts like this.", "tokens": [51442, 440, 9284, 3719, 411, 341, 13, 51574], "temperature": 0.0, "avg_logprob": -0.17332572407192653, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.002394053153693676}, {"id": 107, "seek": 59956, "start": 623.76, "end": 628.68, "text": " You repair at first all the rows that can be repaired.", "tokens": [51574, 509, 10535, 412, 700, 439, 264, 13241, 300, 393, 312, 36551, 13, 51820], "temperature": 0.0, "avg_logprob": -0.17332572407192653, "compression_ratio": 1.550561797752809, "no_speech_prob": 0.002394053153693676}, {"id": 108, "seek": 62868, "start": 628.8, "end": 637.4, "text": " Then you apply the XOR on the columns and you repeat so the rows, the columns until you", "tokens": [50370, 1396, 291, 3079, 264, 1783, 2483, 322, 264, 13766, 293, 291, 7149, 370, 264, 13241, 11, 264, 13766, 1826, 291, 50800], "temperature": 0.0, "avg_logprob": -0.2347259381238152, "compression_ratio": 1.625, "no_speech_prob": 0.0008989968337118626}, {"id": 109, "seek": 62868, "start": 637.4, "end": 642.1999999999999, "text": " can't repair any more any packets.", "tokens": [50800, 393, 380, 10535, 604, 544, 604, 30364, 13, 51040], "temperature": 0.0, "avg_logprob": -0.2347259381238152, "compression_ratio": 1.625, "no_speech_prob": 0.0008989968337118626}, {"id": 110, "seek": 62868, "start": 642.1999999999999, "end": 646.8399999999999, "text": " Here you can see that the burst has been fully resolved.", "tokens": [51040, 1692, 291, 393, 536, 300, 264, 12712, 575, 668, 4498, 20772, 13, 51272], "temperature": 0.0, "avg_logprob": -0.2347259381238152, "compression_ratio": 1.625, "no_speech_prob": 0.0008989968337118626}, {"id": 111, "seek": 62868, "start": 646.8399999999999, "end": 653.9599999999999, "text": " All the packets have been recovered but sometimes you don't have chains and you can't recover", "tokens": [51272, 1057, 264, 30364, 362, 668, 19542, 457, 2171, 291, 500, 380, 362, 12626, 293, 291, 393, 380, 8114, 51628], "temperature": 0.0, "avg_logprob": -0.2347259381238152, "compression_ratio": 1.625, "no_speech_prob": 0.0008989968337118626}, {"id": 112, "seek": 65396, "start": 653.96, "end": 660.4000000000001, "text": " some patterns that are connected like a cycle here.", "tokens": [50364, 512, 8294, 300, 366, 4582, 411, 257, 6586, 510, 13, 50686], "temperature": 0.0, "avg_logprob": -0.1814753668648856, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.001293521374464035}, {"id": 113, "seek": 65396, "start": 660.4000000000001, "end": 665.08, "text": " So in this case you can do much more with the flexible efficiency.", "tokens": [50686, 407, 294, 341, 1389, 291, 393, 360, 709, 544, 365, 264, 11358, 10493, 13, 50920], "temperature": 0.0, "avg_logprob": -0.1814753668648856, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.001293521374464035}, {"id": 114, "seek": 65396, "start": 665.08, "end": 671.32, "text": " But this two-dimensional protection is really efficient for bursts.", "tokens": [50920, 583, 341, 732, 12, 18759, 6334, 307, 534, 7148, 337, 41663, 13, 51232], "temperature": 0.0, "avg_logprob": -0.1814753668648856, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.001293521374464035}, {"id": 115, "seek": 65396, "start": 671.32, "end": 676.52, "text": " But sadly it has a cost because you have to send a lot of repair packets.", "tokens": [51232, 583, 22023, 309, 575, 257, 2063, 570, 291, 362, 281, 2845, 257, 688, 295, 10535, 30364, 13, 51492], "temperature": 0.0, "avg_logprob": -0.1814753668648856, "compression_ratio": 1.4857142857142858, "no_speech_prob": 0.001293521374464035}, {"id": 116, "seek": 67652, "start": 676.52, "end": 683.96, "text": " You can measure the impact on the width that you will need with this term the overhead.", "tokens": [50364, 509, 393, 3481, 264, 2712, 322, 264, 11402, 300, 291, 486, 643, 365, 341, 1433, 264, 19922, 13, 50736], "temperature": 0.0, "avg_logprob": -0.17370862639352178, "compression_ratio": 1.9362745098039216, "no_speech_prob": 0.024887848645448685}, {"id": 117, "seek": 67652, "start": 683.96, "end": 689.24, "text": " It is a ratio between the number of bytes of the repair packets that you sent over the", "tokens": [50736, 467, 307, 257, 8509, 1296, 264, 1230, 295, 36088, 295, 264, 10535, 30364, 300, 291, 2279, 670, 264, 51000], "temperature": 0.0, "avg_logprob": -0.17370862639352178, "compression_ratio": 1.9362745098039216, "no_speech_prob": 0.024887848645448685}, {"id": 118, "seek": 67652, "start": 689.24, "end": 692.76, "text": " number of bytes of the protected source packets.", "tokens": [51000, 1230, 295, 36088, 295, 264, 10594, 4009, 30364, 13, 51176], "temperature": 0.0, "avg_logprob": -0.17370862639352178, "compression_ratio": 1.9362745098039216, "no_speech_prob": 0.024887848645448685}, {"id": 119, "seek": 67652, "start": 692.76, "end": 698.36, "text": " Usually the repair packets are bigger than the source packets but if you suppose that", "tokens": [51176, 11419, 264, 10535, 30364, 366, 3801, 813, 264, 4009, 30364, 457, 498, 291, 7297, 300, 51456], "temperature": 0.0, "avg_logprob": -0.17370862639352178, "compression_ratio": 1.9362745098039216, "no_speech_prob": 0.024887848645448685}, {"id": 120, "seek": 67652, "start": 698.36, "end": 705.3199999999999, "text": " all the source packets are approximately the same size, the overhead will be 1 over L", "tokens": [51456, 439, 264, 4009, 30364, 366, 10447, 264, 912, 2744, 11, 264, 19922, 486, 312, 502, 670, 441, 51804], "temperature": 0.0, "avg_logprob": -0.17370862639352178, "compression_ratio": 1.9362745098039216, "no_speech_prob": 0.024887848645448685}, {"id": 121, "seek": 70532, "start": 705.32, "end": 712.6800000000001, "text": " for the row protection, 1 over D for the column protection and 1 over L plus 1 over D for", "tokens": [50364, 337, 264, 5386, 6334, 11, 502, 670, 413, 337, 264, 7738, 6334, 293, 502, 670, 441, 1804, 502, 670, 413, 337, 50732], "temperature": 0.0, "avg_logprob": -0.2024312088454979, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0007983132381923497}, {"id": 122, "seek": 70532, "start": 712.6800000000001, "end": 715.96, "text": " the two-dimensional protection.", "tokens": [50732, 264, 732, 12, 18759, 6334, 13, 50896], "temperature": 0.0, "avg_logprob": -0.2024312088454979, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0007983132381923497}, {"id": 123, "seek": 70532, "start": 715.96, "end": 724.24, "text": " For example here are the values of the overhead with increasing values of L and D on increasing", "tokens": [50896, 1171, 1365, 510, 366, 264, 4190, 295, 264, 19922, 365, 5662, 4190, 295, 441, 293, 413, 322, 5662, 51310], "temperature": 0.0, "avg_logprob": -0.2024312088454979, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0007983132381923497}, {"id": 124, "seek": 70532, "start": 724.24, "end": 725.6800000000001, "text": " protection level.", "tokens": [51310, 6334, 1496, 13, 51382], "temperature": 0.0, "avg_logprob": -0.2024312088454979, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0007983132381923497}, {"id": 125, "seek": 70532, "start": 725.6800000000001, "end": 731.24, "text": " You see that the overhead increases very fast.", "tokens": [51382, 509, 536, 300, 264, 19922, 8637, 588, 2370, 13, 51660], "temperature": 0.0, "avg_logprob": -0.2024312088454979, "compression_ratio": 1.7735849056603774, "no_speech_prob": 0.0007983132381923497}, {"id": 126, "seek": 73124, "start": 731.24, "end": 736.6, "text": " The RFC describes also what are the formats of the packets.", "tokens": [50364, 440, 497, 18671, 15626, 611, 437, 366, 264, 25879, 295, 264, 30364, 13, 50632], "temperature": 0.0, "avg_logprob": -0.2000139980781369, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.08517728000879288}, {"id": 127, "seek": 73124, "start": 736.6, "end": 744.52, "text": " So first you have your source packets with the LTP convention with an LTP header and", "tokens": [50632, 407, 700, 291, 362, 428, 4009, 30364, 365, 264, 441, 16804, 10286, 365, 364, 441, 16804, 23117, 293, 51028], "temperature": 0.0, "avg_logprob": -0.2000139980781369, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.08517728000879288}, {"id": 128, "seek": 73124, "start": 744.52, "end": 746.8, "text": " a LTP payload.", "tokens": [51028, 257, 441, 16804, 30918, 13, 51142], "temperature": 0.0, "avg_logprob": -0.2000139980781369, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.08517728000879288}, {"id": 129, "seek": 73124, "start": 746.8, "end": 753.08, "text": " And you will generate your repair packets that are also LTP packets with a header and", "tokens": [51142, 400, 291, 486, 8460, 428, 10535, 30364, 300, 366, 611, 441, 16804, 30364, 365, 257, 23117, 293, 51456], "temperature": 0.0, "avg_logprob": -0.2000139980781369, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.08517728000879288}, {"id": 130, "seek": 73124, "start": 753.08, "end": 754.08, "text": " a payload.", "tokens": [51456, 257, 30918, 13, 51506], "temperature": 0.0, "avg_logprob": -0.2000139980781369, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.08517728000879288}, {"id": 131, "seek": 73124, "start": 754.08, "end": 758.96, "text": " But within this payload you will carry two kinds of information.", "tokens": [51506, 583, 1951, 341, 30918, 291, 486, 3985, 732, 3685, 295, 1589, 13, 51750], "temperature": 0.0, "avg_logprob": -0.2000139980781369, "compression_ratio": 1.7258064516129032, "no_speech_prob": 0.08517728000879288}, {"id": 132, "seek": 75896, "start": 758.96, "end": 761.8000000000001, "text": " The first one is written in the FERC header.", "tokens": [50364, 440, 700, 472, 307, 3720, 294, 264, 47882, 34, 23117, 13, 50506], "temperature": 0.0, "avg_logprob": -0.19812918818274208, "compression_ratio": 1.7156862745098038, "no_speech_prob": 0.003401299938559532}, {"id": 133, "seek": 75896, "start": 761.8000000000001, "end": 767.9200000000001, "text": " It's information about how to identify which source packets are protected.", "tokens": [50506, 467, 311, 1589, 466, 577, 281, 5876, 597, 4009, 30364, 366, 10594, 13, 50812], "temperature": 0.0, "avg_logprob": -0.19812918818274208, "compression_ratio": 1.7156862745098038, "no_speech_prob": 0.003401299938559532}, {"id": 134, "seek": 75896, "start": 767.9200000000001, "end": 775.0, "text": " And in the repair payload you will have the result of the XOR operation between the payloads", "tokens": [50812, 400, 294, 264, 10535, 30918, 291, 486, 362, 264, 1874, 295, 264, 1783, 2483, 6916, 1296, 264, 30918, 82, 51166], "temperature": 0.0, "avg_logprob": -0.19812918818274208, "compression_ratio": 1.7156862745098038, "no_speech_prob": 0.003401299938559532}, {"id": 135, "seek": 75896, "start": 775.0, "end": 777.08, "text": " of the source packets.", "tokens": [51166, 295, 264, 4009, 30364, 13, 51270], "temperature": 0.0, "avg_logprob": -0.19812918818274208, "compression_ratio": 1.7156862745098038, "no_speech_prob": 0.003401299938559532}, {"id": 136, "seek": 75896, "start": 777.08, "end": 783.4000000000001, "text": " When you apply the XOR between the payload here you have to be sure that your source", "tokens": [51270, 1133, 291, 3079, 264, 1783, 2483, 1296, 264, 30918, 510, 291, 362, 281, 312, 988, 300, 428, 4009, 51586], "temperature": 0.0, "avg_logprob": -0.19812918818274208, "compression_ratio": 1.7156862745098038, "no_speech_prob": 0.003401299938559532}, {"id": 137, "seek": 75896, "start": 783.4000000000001, "end": 784.8000000000001, "text": " packets have the same length.", "tokens": [51586, 30364, 362, 264, 912, 4641, 13, 51656], "temperature": 0.0, "avg_logprob": -0.19812918818274208, "compression_ratio": 1.7156862745098038, "no_speech_prob": 0.003401299938559532}, {"id": 138, "seek": 78480, "start": 784.8, "end": 792.4, "text": " So sometimes you will need to add zeros at the end of your payload in order to have the", "tokens": [50364, 407, 2171, 291, 486, 643, 281, 909, 35193, 412, 264, 917, 295, 428, 30918, 294, 1668, 281, 362, 264, 50744], "temperature": 0.0, "avg_logprob": -0.19073283154031503, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.010092396289110184}, {"id": 139, "seek": 78480, "start": 792.4, "end": 796.4, "text": " same length for all packets.", "tokens": [50744, 912, 4641, 337, 439, 30364, 13, 50944], "temperature": 0.0, "avg_logprob": -0.19073283154031503, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.010092396289110184}, {"id": 140, "seek": 78480, "start": 796.4, "end": 803.4399999999999, "text": " A single repair packet will carry all the information needed to recover the source packets.", "tokens": [50944, 316, 2167, 10535, 20300, 486, 3985, 439, 264, 1589, 2978, 281, 8114, 264, 4009, 30364, 13, 51296], "temperature": 0.0, "avg_logprob": -0.19073283154031503, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.010092396289110184}, {"id": 141, "seek": 78480, "start": 803.4399999999999, "end": 809.92, "text": " It says the size of the source packet protected and which is the configuration of the protection.", "tokens": [51296, 467, 1619, 264, 2744, 295, 264, 4009, 20300, 10594, 293, 597, 307, 264, 11694, 295, 264, 6334, 13, 51620], "temperature": 0.0, "avg_logprob": -0.19073283154031503, "compression_ratio": 1.6906077348066297, "no_speech_prob": 0.010092396289110184}, {"id": 142, "seek": 80992, "start": 809.92, "end": 817.56, "text": " For example, here when you have R1 and you see that in the FEC header you read L is positive", "tokens": [50364, 1171, 1365, 11, 510, 562, 291, 362, 497, 16, 293, 291, 536, 300, 294, 264, 479, 8140, 23117, 291, 1401, 441, 307, 3353, 50746], "temperature": 0.0, "avg_logprob": -0.18329185909695095, "compression_ratio": 1.4759358288770053, "no_speech_prob": 0.04274091497063637}, {"id": 143, "seek": 80992, "start": 817.56, "end": 819.3199999999999, "text": " and D is zero.", "tokens": [50746, 293, 413, 307, 4018, 13, 50834], "temperature": 0.0, "avg_logprob": -0.18329185909695095, "compression_ratio": 1.4759358288770053, "no_speech_prob": 0.04274091497063637}, {"id": 144, "seek": 80992, "start": 819.3199999999999, "end": 826.1999999999999, "text": " You know that you have a raw protection and the sequence number of the source packets", "tokens": [50834, 509, 458, 300, 291, 362, 257, 8936, 6334, 293, 264, 8310, 1230, 295, 264, 4009, 30364, 51178], "temperature": 0.0, "avg_logprob": -0.18329185909695095, "compression_ratio": 1.4759358288770053, "no_speech_prob": 0.04274091497063637}, {"id": 145, "seek": 80992, "start": 826.1999999999999, "end": 834.8, "text": " that are protected comes from S1 to SN plus L minus 1 with the consecutive values.", "tokens": [51178, 300, 366, 10594, 1487, 490, 318, 16, 281, 13955, 1804, 441, 3175, 502, 365, 264, 30497, 4190, 13, 51608], "temperature": 0.0, "avg_logprob": -0.18329185909695095, "compression_ratio": 1.4759358288770053, "no_speech_prob": 0.04274091497063637}, {"id": 146, "seek": 83480, "start": 834.8, "end": 841.24, "text": " If L is positive but D is equal to 1 you also have a raw protection but you are inside", "tokens": [50364, 759, 441, 307, 3353, 457, 413, 307, 2681, 281, 502, 291, 611, 362, 257, 8936, 6334, 457, 291, 366, 1854, 50686], "temperature": 0.0, "avg_logprob": -0.18214251274286314, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.0757501944899559}, {"id": 147, "seek": 83480, "start": 841.24, "end": 843.12, "text": " a two-dimensional pattern.", "tokens": [50686, 257, 732, 12, 18759, 5102, 13, 50780], "temperature": 0.0, "avg_logprob": -0.18214251274286314, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.0757501944899559}, {"id": 148, "seek": 83480, "start": 843.12, "end": 849.16, "text": " So you know that you will collect several repair packets that protect rows and then", "tokens": [50780, 407, 291, 458, 300, 291, 486, 2500, 2940, 10535, 30364, 300, 2371, 13241, 293, 550, 51082], "temperature": 0.0, "avg_logprob": -0.18214251274286314, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.0757501944899559}, {"id": 149, "seek": 83480, "start": 849.16, "end": 853.8399999999999, "text": " you will have a set of repair packets that protect the columns.", "tokens": [51082, 291, 486, 362, 257, 992, 295, 10535, 30364, 300, 2371, 264, 13766, 13, 51316], "temperature": 0.0, "avg_logprob": -0.18214251274286314, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.0757501944899559}, {"id": 150, "seek": 83480, "start": 853.8399999999999, "end": 861.0799999999999, "text": " And when L is positive and D is more than 1 you have the column FEC protection and the", "tokens": [51316, 400, 562, 441, 307, 3353, 293, 413, 307, 544, 813, 502, 291, 362, 264, 7738, 479, 8140, 6334, 293, 264, 51678], "temperature": 0.0, "avg_logprob": -0.18214251274286314, "compression_ratio": 1.7938144329896908, "no_speech_prob": 0.0757501944899559}, {"id": 151, "seek": 86108, "start": 861.08, "end": 864.96, "text": " repair packets that are protected are interleaved.", "tokens": [50364, 10535, 30364, 300, 366, 10594, 366, 728, 306, 12865, 13, 50558], "temperature": 0.0, "avg_logprob": -0.2218790890877707, "compression_ratio": 1.4866666666666666, "no_speech_prob": 0.0018480857834219933}, {"id": 152, "seek": 86108, "start": 864.96, "end": 875.32, "text": " So from SN to SN plus D minus 1 times L and it can be the column of the two-dimensional", "tokens": [50558, 407, 490, 13955, 281, 13955, 1804, 413, 3175, 502, 1413, 441, 293, 309, 393, 312, 264, 7738, 295, 264, 732, 12, 18759, 51076], "temperature": 0.0, "avg_logprob": -0.2218790890877707, "compression_ratio": 1.4866666666666666, "no_speech_prob": 0.0018480857834219933}, {"id": 153, "seek": 86108, "start": 875.32, "end": 886.1600000000001, "text": " FEC block protection but it also can be a single column protection in one dimension.", "tokens": [51076, 479, 8140, 3461, 6334, 457, 309, 611, 393, 312, 257, 2167, 7738, 6334, 294, 472, 10139, 13, 51618], "temperature": 0.0, "avg_logprob": -0.2218790890877707, "compression_ratio": 1.4866666666666666, "no_speech_prob": 0.0018480857834219933}, {"id": 154, "seek": 88616, "start": 886.16, "end": 892.6, "text": " This method has been implemented in our project NINFON.", "tokens": [50364, 639, 3170, 575, 668, 12270, 294, 527, 1716, 426, 1464, 37, 1928, 13, 50686], "temperature": 0.0, "avg_logprob": -0.22464814867292132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.021374212577939034}, {"id": 155, "seek": 88616, "start": 892.6, "end": 899.1999999999999, "text": " We decided to use four sets of L and D parameters.", "tokens": [50686, 492, 3047, 281, 764, 1451, 6352, 295, 441, 293, 413, 9834, 13, 51016], "temperature": 0.0, "avg_logprob": -0.22464814867292132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.021374212577939034}, {"id": 156, "seek": 88616, "start": 899.1999999999999, "end": 906.48, "text": " It comes from one-dimensional very low protection to high protection with three and three.", "tokens": [51016, 467, 1487, 490, 472, 12, 18759, 588, 2295, 6334, 281, 1090, 6334, 365, 1045, 293, 1045, 13, 51380], "temperature": 0.0, "avg_logprob": -0.22464814867292132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.021374212577939034}, {"id": 157, "seek": 88616, "start": 906.48, "end": 914.16, "text": " Ideally we want to have two-dimensional parity protection but it has a cost because you have", "tokens": [51380, 40817, 321, 528, 281, 362, 732, 12, 18759, 44747, 6334, 457, 309, 575, 257, 2063, 570, 291, 362, 51764], "temperature": 0.0, "avg_logprob": -0.22464814867292132, "compression_ratio": 1.5343915343915344, "no_speech_prob": 0.021374212577939034}, {"id": 158, "seek": 91416, "start": 914.16, "end": 917.68, "text": " to send a lot of data.", "tokens": [50364, 281, 2845, 257, 688, 295, 1412, 13, 50540], "temperature": 0.0, "avg_logprob": -0.17535049814573475, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.015202765353024006}, {"id": 159, "seek": 91416, "start": 917.68, "end": 924.68, "text": " So we decided to adapt our protection to the loss rate that is measured in the transmission", "tokens": [50540, 407, 321, 3047, 281, 6231, 527, 6334, 281, 264, 4470, 3314, 300, 307, 12690, 294, 264, 11574, 50890], "temperature": 0.0, "avg_logprob": -0.17535049814573475, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.015202765353024006}, {"id": 160, "seek": 91416, "start": 924.68, "end": 928.16, "text": " and also to the network capabilities.", "tokens": [50890, 293, 611, 281, 264, 3209, 10862, 13, 51064], "temperature": 0.0, "avg_logprob": -0.17535049814573475, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.015202765353024006}, {"id": 161, "seek": 91416, "start": 928.16, "end": 933.36, "text": " The repair window is 200 milliseconds.", "tokens": [51064, 440, 10535, 4910, 307, 2331, 34184, 13, 51324], "temperature": 0.0, "avg_logprob": -0.17535049814573475, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.015202765353024006}, {"id": 162, "seek": 91416, "start": 933.36, "end": 940.4, "text": " It is long enough to collect all the repair packets for any values of L and D and it doesn't", "tokens": [51324, 467, 307, 938, 1547, 281, 2500, 439, 264, 10535, 30364, 337, 604, 4190, 295, 441, 293, 413, 293, 309, 1177, 380, 51676], "temperature": 0.0, "avg_logprob": -0.17535049814573475, "compression_ratio": 1.5026455026455026, "no_speech_prob": 0.015202765353024006}, {"id": 163, "seek": 94040, "start": 940.4, "end": 944.4399999999999, "text": " cause any delay in the video.", "tokens": [50364, 3082, 604, 8577, 294, 264, 960, 13, 50566], "temperature": 0.0, "avg_logprob": -0.198740234375, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.12365598231554031}, {"id": 164, "seek": 94040, "start": 944.4399999999999, "end": 950.84, "text": " The RFC has been implemented in C and C++ in our LINFON SDK.", "tokens": [50566, 440, 497, 18671, 575, 668, 12270, 294, 383, 293, 383, 25472, 294, 527, 441, 1464, 37, 1928, 37135, 13, 50886], "temperature": 0.0, "avg_logprob": -0.198740234375, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.12365598231554031}, {"id": 165, "seek": 94040, "start": 950.84, "end": 958.3199999999999, "text": " All the elements of the FEC stream are written in the library ORTP and in our streaming engine", "tokens": [50886, 1057, 264, 4959, 295, 264, 479, 8140, 4309, 366, 3720, 294, 264, 6405, 19654, 16804, 293, 294, 527, 11791, 2848, 51260], "temperature": 0.0, "avg_logprob": -0.198740234375, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.12365598231554031}, {"id": 166, "seek": 94040, "start": 958.3199999999999, "end": 969.84, "text": " for video and audio we added a way to manage the video quality with the flexible FEC.", "tokens": [51260, 337, 960, 293, 6278, 321, 3869, 257, 636, 281, 3067, 264, 960, 3125, 365, 264, 11358, 479, 8140, 13, 51836], "temperature": 0.0, "avg_logprob": -0.198740234375, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.12365598231554031}, {"id": 167, "seek": 96984, "start": 970.2800000000001, "end": 975.32, "text": " For many months about our strategy for the video quality, our rule is to make the best", "tokens": [50386, 1171, 867, 2493, 466, 527, 5206, 337, 264, 960, 3125, 11, 527, 4978, 307, 281, 652, 264, 1151, 50638], "temperature": 0.0, "avg_logprob": -0.22891883439915153, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.1876124143600464}, {"id": 168, "seek": 96984, "start": 975.32, "end": 980.6800000000001, "text": " possible use to use the bandwidth but sometimes you don't know the bandwidth at the beginning", "tokens": [50638, 1944, 764, 281, 764, 264, 23647, 457, 2171, 291, 500, 380, 458, 264, 23647, 412, 264, 2863, 50906], "temperature": 0.0, "avg_logprob": -0.22891883439915153, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.1876124143600464}, {"id": 169, "seek": 96984, "start": 980.6800000000001, "end": 981.6800000000001, "text": " of the call.", "tokens": [50906, 295, 264, 818, 13, 50956], "temperature": 0.0, "avg_logprob": -0.22891883439915153, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.1876124143600464}, {"id": 170, "seek": 96984, "start": 981.6800000000001, "end": 986.64, "text": " It can change during the call and you have all events to manage.", "tokens": [50956, 467, 393, 1319, 1830, 264, 818, 293, 291, 362, 439, 3931, 281, 3067, 13, 51204], "temperature": 0.0, "avg_logprob": -0.22891883439915153, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.1876124143600464}, {"id": 171, "seek": 96984, "start": 986.64, "end": 993.24, "text": " We want an optimal video setting so the best definition betrayed and firm rates but most", "tokens": [51204, 492, 528, 364, 16252, 960, 3287, 370, 264, 1151, 7123, 29515, 293, 6174, 6846, 457, 881, 51534], "temperature": 0.0, "avg_logprob": -0.22891883439915153, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.1876124143600464}, {"id": 172, "seek": 96984, "start": 993.24, "end": 995.88, "text": " important we don't want freeze in the video.", "tokens": [51534, 1021, 321, 500, 380, 528, 15959, 294, 264, 960, 13, 51666], "temperature": 0.0, "avg_logprob": -0.22891883439915153, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.1876124143600464}, {"id": 173, "seek": 99588, "start": 995.88, "end": 1004.72, "text": " So we decided to prioritize the packet protection before having high encoding setting.", "tokens": [50364, 407, 321, 3047, 281, 25164, 264, 20300, 6334, 949, 1419, 1090, 43430, 3287, 13, 50806], "temperature": 0.0, "avg_logprob": -0.2114463086988105, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.0016635276842862368}, {"id": 174, "seek": 99588, "start": 1004.72, "end": 1012.4, "text": " To have an adaptability to the network events we make periodic control of several values", "tokens": [50806, 1407, 362, 364, 6231, 2310, 281, 264, 3209, 3931, 321, 652, 27790, 1969, 295, 2940, 4190, 51190], "temperature": 0.0, "avg_logprob": -0.2114463086988105, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.0016635276842862368}, {"id": 175, "seek": 99588, "start": 1012.4, "end": 1020.32, "text": " so we measure regularly the available bandwidth, the loss rate and the bandwidth that is dedicated", "tokens": [51190, 370, 321, 3481, 11672, 264, 2435, 23647, 11, 264, 4470, 3314, 293, 264, 23647, 300, 307, 8374, 51586], "temperature": 0.0, "avg_logprob": -0.2114463086988105, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.0016635276842862368}, {"id": 176, "seek": 99588, "start": 1020.32, "end": 1023.24, "text": " to FEC.", "tokens": [51586, 281, 479, 8140, 13, 51732], "temperature": 0.0, "avg_logprob": -0.2114463086988105, "compression_ratio": 1.4842105263157894, "no_speech_prob": 0.0016635276842862368}, {"id": 177, "seek": 102324, "start": 1023.24, "end": 1032.4, "text": " For example in this graph you can see that we propose to have low FEC protection when", "tokens": [50364, 1171, 1365, 294, 341, 4295, 291, 393, 536, 300, 321, 17421, 281, 362, 2295, 479, 8140, 6334, 562, 50822], "temperature": 0.0, "avg_logprob": -0.1597791216266689, "compression_ratio": 1.6729559748427674, "no_speech_prob": 0.0033257806207984686}, {"id": 178, "seek": 102324, "start": 1032.4, "end": 1040.04, "text": " you have low bandwidth and to enable high level of FEC only when the loss rate is very", "tokens": [50822, 291, 362, 2295, 23647, 293, 281, 9528, 1090, 1496, 295, 479, 8140, 787, 562, 264, 4470, 3314, 307, 588, 51204], "temperature": 0.0, "avg_logprob": -0.1597791216266689, "compression_ratio": 1.6729559748427674, "no_speech_prob": 0.0033257806207984686}, {"id": 179, "seek": 102324, "start": 1040.04, "end": 1049.88, "text": " high but if you have a lot of bandwidth you can have full FEC protection it is not a problem.", "tokens": [51204, 1090, 457, 498, 291, 362, 257, 688, 295, 23647, 291, 393, 362, 1577, 479, 8140, 6334, 309, 307, 406, 257, 1154, 13, 51696], "temperature": 0.0, "avg_logprob": -0.1597791216266689, "compression_ratio": 1.6729559748427674, "no_speech_prob": 0.0033257806207984686}, {"id": 180, "seek": 104988, "start": 1049.88, "end": 1055.64, "text": " And finally when you have congestions it means that you have too much packets and the transmission", "tokens": [50364, 400, 2721, 562, 291, 362, 31871, 626, 309, 1355, 300, 291, 362, 886, 709, 30364, 293, 264, 11574, 50652], "temperature": 0.0, "avg_logprob": -0.3022002306851474, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.0050340862944722176}, {"id": 181, "seek": 104988, "start": 1055.64, "end": 1057.92, "text": " stops.", "tokens": [50652, 10094, 13, 50766], "temperature": 0.0, "avg_logprob": -0.3022002306851474, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.0050340862944722176}, {"id": 182, "seek": 104988, "start": 1057.92, "end": 1064.8400000000001, "text": " You disable immediately the FEC because it is not your tool and it will make the things", "tokens": [50766, 509, 28362, 4258, 264, 479, 8140, 570, 309, 307, 406, 428, 2290, 293, 309, 486, 652, 264, 721, 51112], "temperature": 0.0, "avg_logprob": -0.3022002306851474, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.0050340862944722176}, {"id": 183, "seek": 104988, "start": 1064.8400000000001, "end": 1068.4, "text": " worse.", "tokens": [51112, 5324, 13, 51290], "temperature": 0.0, "avg_logprob": -0.3022002306851474, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.0050340862944722176}, {"id": 184, "seek": 104988, "start": 1068.4, "end": 1076.24, "text": " So now we will show you some video with flexible FEC activated.", "tokens": [51290, 407, 586, 321, 486, 855, 291, 512, 960, 365, 11358, 479, 8140, 18157, 13, 51682], "temperature": 0.0, "avg_logprob": -0.3022002306851474, "compression_ratio": 1.4748603351955307, "no_speech_prob": 0.0050340862944722176}, {"id": 185, "seek": 107624, "start": 1076.24, "end": 1083.2, "text": " So here you have a video, so we simulate a video call with a moving pattern.", "tokens": [50364, 407, 510, 291, 362, 257, 960, 11, 370, 321, 27817, 257, 960, 818, 365, 257, 2684, 5102, 13, 50712], "temperature": 0.0, "avg_logprob": -0.19394866734334867, "compression_ratio": 1.5575757575757576, "no_speech_prob": 0.030538208782672882}, {"id": 186, "seek": 107624, "start": 1083.2, "end": 1090.96, "text": " In the first window here there is 6% of packet losses and we do no protection so you can", "tokens": [50712, 682, 264, 700, 4910, 510, 456, 307, 1386, 4, 295, 20300, 15352, 293, 321, 360, 572, 6334, 370, 291, 393, 51100], "temperature": 0.0, "avg_logprob": -0.19394866734334867, "compression_ratio": 1.5575757575757576, "no_speech_prob": 0.030538208782672882}, {"id": 187, "seek": 107624, "start": 1090.96, "end": 1093.76, "text": " see that the video is really bad.", "tokens": [51100, 536, 300, 264, 960, 307, 534, 1578, 13, 51240], "temperature": 0.0, "avg_logprob": -0.19394866734334867, "compression_ratio": 1.5575757575757576, "no_speech_prob": 0.030538208782672882}, {"id": 188, "seek": 107624, "start": 1093.76, "end": 1101.4, "text": " It is a very very bad case, 6% is really a lot of losses.", "tokens": [51240, 467, 307, 257, 588, 588, 1578, 1389, 11, 1386, 4, 307, 534, 257, 688, 295, 15352, 13, 51622], "temperature": 0.0, "avg_logprob": -0.19394866734334867, "compression_ratio": 1.5575757575757576, "no_speech_prob": 0.030538208782672882}, {"id": 189, "seek": 110140, "start": 1101.4, "end": 1108.3200000000002, "text": " In this window we have enabled the FEC with a one dimensional row protection with L is", "tokens": [50364, 682, 341, 4910, 321, 362, 15172, 264, 479, 8140, 365, 257, 472, 18795, 5386, 6334, 365, 441, 307, 50710], "temperature": 0.0, "avg_logprob": -0.20318321228027345, "compression_ratio": 1.7244444444444444, "no_speech_prob": 0.05255454033613205}, {"id": 190, "seek": 110140, "start": 1108.3200000000002, "end": 1109.8000000000002, "text": " equal to 5.", "tokens": [50710, 2681, 281, 1025, 13, 50784], "temperature": 0.0, "avg_logprob": -0.20318321228027345, "compression_ratio": 1.7244444444444444, "no_speech_prob": 0.05255454033613205}, {"id": 191, "seek": 110140, "start": 1109.8000000000002, "end": 1115.44, "text": " You see that the video moves a little more but they are still freezing.", "tokens": [50784, 509, 536, 300, 264, 960, 6067, 257, 707, 544, 457, 436, 366, 920, 20200, 13, 51066], "temperature": 0.0, "avg_logprob": -0.20318321228027345, "compression_ratio": 1.7244444444444444, "no_speech_prob": 0.05255454033613205}, {"id": 192, "seek": 110140, "start": 1115.44, "end": 1122.68, "text": " In the last window it is a two dimensional FEC protection with a high level, 3 L is equal", "tokens": [51066, 682, 264, 1036, 4910, 309, 307, 257, 732, 18795, 479, 8140, 6334, 365, 257, 1090, 1496, 11, 805, 441, 307, 2681, 51428], "temperature": 0.0, "avg_logprob": -0.20318321228027345, "compression_ratio": 1.7244444444444444, "no_speech_prob": 0.05255454033613205}, {"id": 193, "seek": 110140, "start": 1122.68, "end": 1125.2800000000002, "text": " to 3 and D is equal to 3.", "tokens": [51428, 281, 805, 293, 413, 307, 2681, 281, 805, 13, 51558], "temperature": 0.0, "avg_logprob": -0.20318321228027345, "compression_ratio": 1.7244444444444444, "no_speech_prob": 0.05255454033613205}, {"id": 194, "seek": 110140, "start": 1125.2800000000002, "end": 1131.24, "text": " And you can see that here the video is perfectly fluent so we have recovered all the lost information", "tokens": [51558, 400, 291, 393, 536, 300, 510, 264, 960, 307, 6239, 40799, 370, 321, 362, 19542, 439, 264, 2731, 1589, 51856], "temperature": 0.0, "avg_logprob": -0.20318321228027345, "compression_ratio": 1.7244444444444444, "no_speech_prob": 0.05255454033613205}, {"id": 195, "seek": 113124, "start": 1131.24, "end": 1134.08, "text": " here.", "tokens": [50364, 510, 13, 50506], "temperature": 0.0, "avg_logprob": -0.2510767652277361, "compression_ratio": 1.464968152866242, "no_speech_prob": 0.0028489294927567244}, {"id": 196, "seek": 113124, "start": 1134.08, "end": 1144.16, "text": " We have measured the recovery rate here with several values of FEC protection and you see", "tokens": [50506, 492, 362, 12690, 264, 8597, 3314, 510, 365, 2940, 4190, 295, 479, 8140, 6334, 293, 291, 536, 51010], "temperature": 0.0, "avg_logprob": -0.2510767652277361, "compression_ratio": 1.464968152866242, "no_speech_prob": 0.0028489294927567244}, {"id": 197, "seek": 113124, "start": 1144.16, "end": 1146.4, "text": " that it increases very fast.", "tokens": [51010, 300, 309, 8637, 588, 2370, 13, 51122], "temperature": 0.0, "avg_logprob": -0.2510767652277361, "compression_ratio": 1.464968152866242, "no_speech_prob": 0.0028489294927567244}, {"id": 198, "seek": 113124, "start": 1146.4, "end": 1152.24, "text": " So the flexible FEC is really interesting to recover the lost packets and the effects", "tokens": [51122, 407, 264, 11358, 479, 8140, 307, 534, 1880, 281, 8114, 264, 2731, 30364, 293, 264, 5065, 51414], "temperature": 0.0, "avg_logprob": -0.2510767652277361, "compression_ratio": 1.464968152866242, "no_speech_prob": 0.0028489294927567244}, {"id": 199, "seek": 113124, "start": 1152.24, "end": 1155.84, "text": " are really obvious.", "tokens": [51414, 366, 534, 6322, 13, 51594], "temperature": 0.0, "avg_logprob": -0.2510767652277361, "compression_ratio": 1.464968152866242, "no_speech_prob": 0.0028489294927567244}, {"id": 200, "seek": 115584, "start": 1155.84, "end": 1163.0, "text": " Another example here, this time we have simulated a transmission with loss and burst so we", "tokens": [50364, 3996, 1365, 510, 11, 341, 565, 321, 362, 41713, 257, 11574, 365, 4470, 293, 12712, 370, 321, 50722], "temperature": 0.0, "avg_logprob": -0.18162094751993815, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.010461190715432167}, {"id": 201, "seek": 115584, "start": 1163.0, "end": 1169.76, "text": " lose consecutive packets so it is a very bad situation.", "tokens": [50722, 3624, 30497, 30364, 370, 309, 307, 257, 588, 1578, 2590, 13, 51060], "temperature": 0.0, "avg_logprob": -0.18162094751993815, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.010461190715432167}, {"id": 202, "seek": 115584, "start": 1169.76, "end": 1175.3999999999999, "text": " This time you can see that the performance of the FEC reconstruction decreases a little", "tokens": [51060, 639, 565, 291, 393, 536, 300, 264, 3389, 295, 264, 479, 8140, 31565, 24108, 257, 707, 51342], "temperature": 0.0, "avg_logprob": -0.18162094751993815, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.010461190715432167}, {"id": 203, "seek": 115584, "start": 1175.3999999999999, "end": 1177.72, "text": " but they are still interesting.", "tokens": [51342, 457, 436, 366, 920, 1880, 13, 51458], "temperature": 0.0, "avg_logprob": -0.18162094751993815, "compression_ratio": 1.4615384615384615, "no_speech_prob": 0.010461190715432167}, {"id": 204, "seek": 117772, "start": 1177.72, "end": 1185.92, "text": " In the two dimensional parity protection you can see now some phrases but it is still", "tokens": [50364, 682, 264, 732, 18795, 44747, 6334, 291, 393, 536, 586, 512, 20312, 457, 309, 307, 920, 50774], "temperature": 0.0, "avg_logprob": -0.19415278868241745, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.038006190210580826}, {"id": 205, "seek": 117772, "start": 1185.92, "end": 1192.52, "text": " much more fluent than the initial video.", "tokens": [50774, 709, 544, 40799, 813, 264, 5883, 960, 13, 51104], "temperature": 0.0, "avg_logprob": -0.19415278868241745, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.038006190210580826}, {"id": 206, "seek": 117772, "start": 1192.52, "end": 1197.6000000000001, "text": " So we can make some conclusions about flexible FEC.", "tokens": [51104, 407, 321, 393, 652, 512, 22865, 466, 11358, 479, 8140, 13, 51358], "temperature": 0.0, "avg_logprob": -0.19415278868241745, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.038006190210580826}, {"id": 207, "seek": 117772, "start": 1197.6000000000001, "end": 1204.4, "text": " It is a simple and resilient way to improve the resiliency to the packet loss in video", "tokens": [51358, 467, 307, 257, 2199, 293, 23699, 636, 281, 3470, 264, 48712, 281, 264, 20300, 4470, 294, 960, 51698], "temperature": 0.0, "avg_logprob": -0.19415278868241745, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.038006190210580826}, {"id": 208, "seek": 117772, "start": 1204.4, "end": 1207.4, "text": " transmission.", "tokens": [51698, 11574, 13, 51848], "temperature": 0.0, "avg_logprob": -0.19415278868241745, "compression_ratio": 1.5245901639344261, "no_speech_prob": 0.038006190210580826}, {"id": 209, "seek": 120740, "start": 1207.4, "end": 1215.2, "text": " It is based on the fact that you send redundant information on a dedicated stream.", "tokens": [50364, 467, 307, 2361, 322, 264, 1186, 300, 291, 2845, 40997, 1589, 322, 257, 8374, 4309, 13, 50754], "temperature": 0.0, "avg_logprob": -0.23728490644885647, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.01307509746402502}, {"id": 210, "seek": 120740, "start": 1215.2, "end": 1222.44, "text": " It is adaptable to the level and the event of your network and it works with a short", "tokens": [50754, 467, 307, 6231, 712, 281, 264, 1496, 293, 264, 2280, 295, 428, 3209, 293, 309, 1985, 365, 257, 2099, 51116], "temperature": 0.0, "avg_logprob": -0.23728490644885647, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.01307509746402502}, {"id": 211, "seek": 120740, "start": 1222.44, "end": 1229.8400000000001, "text": " delay because you don't have to wait that the sender sends you back the missing information.", "tokens": [51116, 8577, 570, 291, 500, 380, 362, 281, 1699, 300, 264, 2845, 260, 14790, 291, 646, 264, 5361, 1589, 13, 51486], "temperature": 0.0, "avg_logprob": -0.23728490644885647, "compression_ratio": 1.5662650602409638, "no_speech_prob": 0.01307509746402502}, {"id": 212, "seek": 122984, "start": 1229.84, "end": 1237.6, "text": " And the exclusive operation is really efficient and rapid.", "tokens": [50364, 400, 264, 13005, 6916, 307, 534, 7148, 293, 7558, 13, 50752], "temperature": 0.0, "avg_logprob": -0.25317590467391476, "compression_ratio": 1.3879781420765027, "no_speech_prob": 0.20683564245700836}, {"id": 213, "seek": 122984, "start": 1237.6, "end": 1243.08, "text": " But you have to keep in mind that you will need a significant bandwidth so in some cases", "tokens": [50752, 583, 291, 362, 281, 1066, 294, 1575, 300, 291, 486, 643, 257, 4776, 23647, 370, 294, 512, 3331, 51026], "temperature": 0.0, "avg_logprob": -0.25317590467391476, "compression_ratio": 1.3879781420765027, "no_speech_prob": 0.20683564245700836}, {"id": 214, "seek": 122984, "start": 1243.08, "end": 1246.48, "text": " it is not indicated.", "tokens": [51026, 309, 307, 406, 16176, 13, 51196], "temperature": 0.0, "avg_logprob": -0.25317590467391476, "compression_ratio": 1.3879781420765027, "no_speech_prob": 0.20683564245700836}, {"id": 215, "seek": 122984, "start": 1246.48, "end": 1254.76, "text": " The RFC 8627 gives a complete description of the flexible FEC scheme and it is clever", "tokens": [51196, 440, 497, 18671, 26687, 10076, 2709, 257, 3566, 3855, 295, 264, 11358, 479, 8140, 12232, 293, 309, 307, 13494, 51610], "temperature": 0.0, "avg_logprob": -0.25317590467391476, "compression_ratio": 1.3879781420765027, "no_speech_prob": 0.20683564245700836}, {"id": 216, "seek": 125476, "start": 1254.76, "end": 1261.56, "text": " because it is also backward compatible with the RTP protocol.", "tokens": [50364, 570, 309, 307, 611, 23897, 18218, 365, 264, 497, 16804, 10336, 13, 50704], "temperature": 0.0, "avg_logprob": -0.22012191348605686, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.0779583752155304}, {"id": 217, "seek": 125476, "start": 1261.56, "end": 1267.24, "text": " And we show that it gives a real improvement in the video quality.", "tokens": [50704, 400, 321, 855, 300, 309, 2709, 257, 957, 10444, 294, 264, 960, 3125, 13, 50988], "temperature": 0.0, "avg_logprob": -0.22012191348605686, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.0779583752155304}, {"id": 218, "seek": 125476, "start": 1267.24, "end": 1273.76, "text": " So we decided to release it this year in the video calls of the Linfuan project and we", "tokens": [50988, 407, 321, 3047, 281, 4374, 309, 341, 1064, 294, 264, 960, 5498, 295, 264, 9355, 69, 6139, 1716, 293, 321, 51314], "temperature": 0.0, "avg_logprob": -0.22012191348605686, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.0779583752155304}, {"id": 219, "seek": 125476, "start": 1273.76, "end": 1282.8799999999999, "text": " want to in future work add it to the video conference and the audio stream.", "tokens": [51314, 528, 281, 294, 2027, 589, 909, 309, 281, 264, 960, 7586, 293, 264, 6278, 4309, 13, 51770], "temperature": 0.0, "avg_logprob": -0.22012191348605686, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.0779583752155304}, {"id": 220, "seek": 128288, "start": 1282.88, "end": 1289.88, "text": " So thank you for your attention and we will be happy to answer any questions.", "tokens": [50364, 407, 1309, 291, 337, 428, 3202, 293, 321, 486, 312, 2055, 281, 1867, 604, 1651, 13, 50714], "temperature": 0.0, "avg_logprob": -0.49537067413330077, "compression_ratio": 1.0405405405405406, "no_speech_prob": 0.3495190441608429}, {"id": 221, "seek": 128988, "start": 1289.88, "end": 1311.88, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.5612675666809082, "compression_ratio": 0.9692307692307692, "no_speech_prob": 0.4561312794685364}, {"id": 222, "seek": 128988, "start": 1311.88, "end": 1314.8000000000002, "text": " The question is about the size of the source packet.", "tokens": [51464, 440, 1168, 307, 466, 264, 2744, 295, 264, 4009, 20300, 13, 51610], "temperature": 0.0, "avg_logprob": -0.5612675666809082, "compression_ratio": 0.9692307692307692, "no_speech_prob": 0.4561312794685364}, {"id": 223, "seek": 131480, "start": 1314.8, "end": 1319.96, "text": " And in fact you are right, it is an issue that we have to deal with.", "tokens": [50364, 400, 294, 1186, 291, 366, 558, 11, 309, 307, 364, 2734, 300, 321, 362, 281, 2028, 365, 13, 50622], "temperature": 0.0, "avg_logprob": -0.2497172093653417, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.4321766793727875}, {"id": 224, "seek": 131480, "start": 1319.96, "end": 1323.8799999999999, "text": " The source packets doesn't have the same size.", "tokens": [50622, 440, 4009, 30364, 1177, 380, 362, 264, 912, 2744, 13, 50818], "temperature": 0.0, "avg_logprob": -0.2497172093653417, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.4321766793727875}, {"id": 225, "seek": 131480, "start": 1323.8799999999999, "end": 1330.52, "text": " And for the encoding you have to pad the payload to make the XOR operation.", "tokens": [50818, 400, 337, 264, 43430, 291, 362, 281, 6887, 264, 30918, 281, 652, 264, 1783, 2483, 6916, 13, 51150], "temperature": 0.0, "avg_logprob": -0.2497172093653417, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.4321766793727875}, {"id": 226, "seek": 131480, "start": 1330.52, "end": 1337.36, "text": " And the thing is that when you combine them to build your repair packet you will have", "tokens": [51150, 400, 264, 551, 307, 300, 562, 291, 10432, 552, 281, 1322, 428, 10535, 20300, 291, 486, 362, 51492], "temperature": 0.0, "avg_logprob": -0.2497172093653417, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.4321766793727875}, {"id": 227, "seek": 131480, "start": 1337.36, "end": 1343.1599999999999, "text": " very high, very big repair packets and your overheads will be increasing a lot because", "tokens": [51492, 588, 1090, 11, 588, 955, 10535, 30364, 293, 428, 19922, 82, 486, 312, 5662, 257, 688, 570, 51782], "temperature": 0.0, "avg_logprob": -0.2497172093653417, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.4321766793727875}, {"id": 228, "seek": 134316, "start": 1343.16, "end": 1345.0400000000002, "text": " of few big source packets.", "tokens": [50364, 295, 1326, 955, 4009, 30364, 13, 50458], "temperature": 0.0, "avg_logprob": -0.23029027983199718, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.14279288053512573}, {"id": 229, "seek": 134316, "start": 1345.0400000000002, "end": 1349.5600000000002, "text": " So that is a problem that you have to deal with.", "tokens": [50458, 407, 300, 307, 257, 1154, 300, 291, 362, 281, 2028, 365, 13, 50684], "temperature": 0.0, "avg_logprob": -0.23029027983199718, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.14279288053512573}, {"id": 230, "seek": 134316, "start": 1349.5600000000002, "end": 1358.76, "text": " So you can change the size of the source packet if possible to make the more equal sizes.", "tokens": [50684, 407, 291, 393, 1319, 264, 2744, 295, 264, 4009, 20300, 498, 1944, 281, 652, 264, 544, 2681, 11602, 13, 51144], "temperature": 0.0, "avg_logprob": -0.23029027983199718, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.14279288053512573}, {"id": 231, "seek": 134316, "start": 1358.76, "end": 1364.6000000000001, "text": " But you have to adapt the overheads to decide to have, you have to measure your overheads", "tokens": [51144, 583, 291, 362, 281, 6231, 264, 19922, 82, 281, 4536, 281, 362, 11, 291, 362, 281, 3481, 428, 19922, 82, 51436], "temperature": 0.0, "avg_logprob": -0.23029027983199718, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.14279288053512573}, {"id": 232, "seek": 134316, "start": 1364.6000000000001, "end": 1372.3600000000001, "text": " to check that the repair packets are not too big compared to the source packets and to", "tokens": [51436, 281, 1520, 300, 264, 10535, 30364, 366, 406, 886, 955, 5347, 281, 264, 4009, 30364, 293, 281, 51824], "temperature": 0.0, "avg_logprob": -0.23029027983199718, "compression_ratio": 1.8387096774193548, "no_speech_prob": 0.14279288053512573}, {"id": 233, "seek": 137236, "start": 1372.36, "end": 1382.04, "text": " decide to reduce the FEC protection in order to keep an overhead reasonable.", "tokens": [50364, 4536, 281, 5407, 264, 479, 8140, 6334, 294, 1668, 281, 1066, 364, 19922, 10585, 13, 50848], "temperature": 0.0, "avg_logprob": -0.3069803632538894, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.08614987879991531}, {"id": 234, "seek": 137236, "start": 1382.04, "end": 1388.4799999999998, "text": " But yes you have to take care of the real size of your source packets.", "tokens": [50848, 583, 2086, 291, 362, 281, 747, 1127, 295, 264, 957, 2744, 295, 428, 4009, 30364, 13, 51170], "temperature": 0.0, "avg_logprob": -0.3069803632538894, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.08614987879991531}, {"id": 235, "seek": 137236, "start": 1388.4799999999998, "end": 1391.24, "text": " I don't know if it answers your question.", "tokens": [51170, 286, 500, 380, 458, 498, 309, 6338, 428, 1168, 13, 51308], "temperature": 0.0, "avg_logprob": -0.3069803632538894, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.08614987879991531}, {"id": 236, "seek": 137236, "start": 1391.24, "end": 1392.24, "text": " Thank you.", "tokens": [51308, 1044, 291, 13, 51358], "temperature": 0.0, "avg_logprob": -0.3069803632538894, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.08614987879991531}, {"id": 237, "seek": 137236, "start": 1392.24, "end": 1393.24, "text": " Yes?", "tokens": [51358, 1079, 30, 51408], "temperature": 0.0, "avg_logprob": -0.3069803632538894, "compression_ratio": 1.3486842105263157, "no_speech_prob": 0.08614987879991531}, {"id": 238, "seek": 139324, "start": 1393.24, "end": 1404.6, "text": " Then you always have this fixed delay of 200 milliseconds, right?", "tokens": [50364, 1396, 291, 1009, 362, 341, 6806, 8577, 295, 2331, 34184, 11, 558, 30, 50932], "temperature": 0.0, "avg_logprob": -0.33577833282813596, "compression_ratio": 1.7947368421052632, "no_speech_prob": 0.09999800473451614}, {"id": 239, "seek": 139324, "start": 1404.6, "end": 1405.6, "text": " On the repair window?", "tokens": [50932, 1282, 264, 10535, 4910, 30, 50982], "temperature": 0.0, "avg_logprob": -0.33577833282813596, "compression_ratio": 1.7947368421052632, "no_speech_prob": 0.09999800473451614}, {"id": 240, "seek": 139324, "start": 1405.6, "end": 1406.6, "text": " Yes.", "tokens": [50982, 1079, 13, 51032], "temperature": 0.0, "avg_logprob": -0.33577833282813596, "compression_ratio": 1.7947368421052632, "no_speech_prob": 0.09999800473451614}, {"id": 241, "seek": 139324, "start": 1406.6, "end": 1407.6, "text": " So we have a fixed value here.", "tokens": [51032, 407, 321, 362, 257, 6806, 2158, 510, 13, 51082], "temperature": 0.0, "avg_logprob": -0.33577833282813596, "compression_ratio": 1.7947368421052632, "no_speech_prob": 0.09999800473451614}, {"id": 242, "seek": 139324, "start": 1407.6, "end": 1414.1200000000001, "text": " The question is do we have a fixed duration for the repair window of 200 milliseconds?", "tokens": [51082, 440, 1168, 307, 360, 321, 362, 257, 6806, 16365, 337, 264, 10535, 4910, 295, 2331, 34184, 30, 51408], "temperature": 0.0, "avg_logprob": -0.33577833282813596, "compression_ratio": 1.7947368421052632, "no_speech_prob": 0.09999800473451614}, {"id": 243, "seek": 139324, "start": 1414.1200000000001, "end": 1415.1200000000001, "text": " Or it can be changed?", "tokens": [51408, 1610, 309, 393, 312, 3105, 30, 51458], "temperature": 0.0, "avg_logprob": -0.33577833282813596, "compression_ratio": 1.7947368421052632, "no_speech_prob": 0.09999800473451614}, {"id": 244, "seek": 139324, "start": 1415.1200000000001, "end": 1416.1200000000001, "text": " The fixed delay.", "tokens": [51458, 440, 6806, 8577, 13, 51508], "temperature": 0.0, "avg_logprob": -0.33577833282813596, "compression_ratio": 1.7947368421052632, "no_speech_prob": 0.09999800473451614}, {"id": 245, "seek": 139324, "start": 1416.1200000000001, "end": 1417.1200000000001, "text": " The question is the video output is put on the screen 200 milliseconds after the respective", "tokens": [51508, 440, 1168, 307, 264, 960, 5598, 307, 829, 322, 264, 2568, 2331, 34184, 934, 264, 23649, 51558], "temperature": 0.0, "avg_logprob": -0.33577833282813596, "compression_ratio": 1.7947368421052632, "no_speech_prob": 0.09999800473451614}, {"id": 246, "seek": 141712, "start": 1417.12, "end": 1424.12, "text": " video break has arrived, right?", "tokens": [50364, 960, 1821, 575, 6678, 11, 558, 30, 50714], "temperature": 0.0, "avg_logprob": -0.4649727432816117, "compression_ratio": 1.4364640883977902, "no_speech_prob": 0.042537182569503784}, {"id": 247, "seek": 141712, "start": 1424.12, "end": 1432.08, "text": " Yes, the 200 milliseconds is a delay that you had before displaying your video.", "tokens": [50714, 1079, 11, 264, 2331, 34184, 307, 257, 8577, 300, 291, 632, 949, 36834, 428, 960, 13, 51112], "temperature": 0.0, "avg_logprob": -0.4649727432816117, "compression_ratio": 1.4364640883977902, "no_speech_prob": 0.042537182569503784}, {"id": 248, "seek": 141712, "start": 1432.08, "end": 1433.08, "text": " Yes?", "tokens": [51112, 1079, 30, 51162], "temperature": 0.0, "avg_logprob": -0.4649727432816117, "compression_ratio": 1.4364640883977902, "no_speech_prob": 0.042537182569503784}, {"id": 249, "seek": 141712, "start": 1433.08, "end": 1434.08, "text": " I'm sorry.", "tokens": [51162, 286, 478, 2597, 13, 51212], "temperature": 0.0, "avg_logprob": -0.4649727432816117, "compression_ratio": 1.4364640883977902, "no_speech_prob": 0.042537182569503784}, {"id": 250, "seek": 141712, "start": 1434.08, "end": 1435.08, "text": " Okay.", "tokens": [51212, 1033, 13, 51262], "temperature": 0.0, "avg_logprob": -0.4649727432816117, "compression_ratio": 1.4364640883977902, "no_speech_prob": 0.042537182569503784}, {"id": 251, "seek": 141712, "start": 1435.08, "end": 1437.08, "text": " Yes, that's the, in fact yes.", "tokens": [51262, 1079, 11, 300, 311, 264, 11, 294, 1186, 2086, 13, 51362], "temperature": 0.0, "avg_logprob": -0.4649727432816117, "compression_ratio": 1.4364640883977902, "no_speech_prob": 0.042537182569503784}, {"id": 252, "seek": 141712, "start": 1437.08, "end": 1438.08, "text": " Yes?", "tokens": [51362, 1079, 30, 51412], "temperature": 0.0, "avg_logprob": -0.4649727432816117, "compression_ratio": 1.4364640883977902, "no_speech_prob": 0.042537182569503784}, {"id": 253, "seek": 141712, "start": 1438.08, "end": 1446.08, "text": " So when you assemble in the stream and rows and columns, I know the second one is reversed.", "tokens": [51412, 407, 562, 291, 22364, 294, 264, 4309, 293, 13241, 293, 13766, 11, 286, 458, 264, 1150, 472, 307, 30563, 13, 51812], "temperature": 0.0, "avg_logprob": -0.4649727432816117, "compression_ratio": 1.4364640883977902, "no_speech_prob": 0.042537182569503784}, {"id": 254, "seek": 144608, "start": 1446.08, "end": 1447.08, "text": " Is that right?", "tokens": [50364, 1119, 300, 558, 30, 50414], "temperature": 0.0, "avg_logprob": -0.3326721700032552, "compression_ratio": 1.4437086092715232, "no_speech_prob": 0.01571572571992874}, {"id": 255, "seek": 144608, "start": 1447.08, "end": 1448.08, "text": " No, it's not reversed.", "tokens": [50414, 883, 11, 309, 311, 406, 30563, 13, 50464], "temperature": 0.0, "avg_logprob": -0.3326721700032552, "compression_ratio": 1.4437086092715232, "no_speech_prob": 0.01571572571992874}, {"id": 256, "seek": 144608, "start": 1448.08, "end": 1459.28, "text": " In fact, sorry, it was maybe not clear in the representation.", "tokens": [50464, 682, 1186, 11, 2597, 11, 309, 390, 1310, 406, 1850, 294, 264, 10290, 13, 51024], "temperature": 0.0, "avg_logprob": -0.3326721700032552, "compression_ratio": 1.4437086092715232, "no_speech_prob": 0.01571572571992874}, {"id": 257, "seek": 144608, "start": 1459.28, "end": 1465.28, "text": " You have, okay.", "tokens": [51024, 509, 362, 11, 1392, 13, 51324], "temperature": 0.0, "avg_logprob": -0.3326721700032552, "compression_ratio": 1.4437086092715232, "no_speech_prob": 0.01571572571992874}, {"id": 258, "seek": 144608, "start": 1465.28, "end": 1466.28, "text": " This one?", "tokens": [51324, 639, 472, 30, 51374], "temperature": 0.0, "avg_logprob": -0.3326721700032552, "compression_ratio": 1.4437086092715232, "no_speech_prob": 0.01571572571992874}, {"id": 259, "seek": 144608, "start": 1466.28, "end": 1467.28, "text": " Yes.", "tokens": [51374, 1079, 13, 51424], "temperature": 0.0, "avg_logprob": -0.3326721700032552, "compression_ratio": 1.4437086092715232, "no_speech_prob": 0.01571572571992874}, {"id": 260, "seek": 144608, "start": 1467.28, "end": 1470.3999999999999, "text": " The draw comes back to here.", "tokens": [51424, 440, 2642, 1487, 646, 281, 510, 13, 51580], "temperature": 0.0, "avg_logprob": -0.3326721700032552, "compression_ratio": 1.4437086092715232, "no_speech_prob": 0.01571572571992874}, {"id": 261, "seek": 144608, "start": 1470.3999999999999, "end": 1474.28, "text": " So you read those one, then those one, and then those one.", "tokens": [51580, 407, 291, 1401, 729, 472, 11, 550, 729, 472, 11, 293, 550, 729, 472, 13, 51774], "temperature": 0.0, "avg_logprob": -0.3326721700032552, "compression_ratio": 1.4437086092715232, "no_speech_prob": 0.01571572571992874}, {"id": 262, "seek": 147428, "start": 1474.28, "end": 1481.28, "text": " The second question, do you have any examples of an STP line describing how this is expected?", "tokens": [50364, 440, 1150, 1168, 11, 360, 291, 362, 604, 5110, 295, 364, 4904, 47, 1622, 16141, 577, 341, 307, 5176, 30, 50714], "temperature": 0.0, "avg_logprob": -0.4880276159806685, "compression_ratio": 1.625, "no_speech_prob": 0.4202782213687897}, {"id": 263, "seek": 147428, "start": 1481.28, "end": 1482.28, "text": " Those ones.", "tokens": [50714, 3950, 2306, 13, 50764], "temperature": 0.0, "avg_logprob": -0.4880276159806685, "compression_ratio": 1.625, "no_speech_prob": 0.4202782213687897}, {"id": 264, "seek": 147428, "start": 1482.28, "end": 1491.28, "text": " You have an example of an STP packet that contains a line that describes how this is established.", "tokens": [50764, 509, 362, 364, 1365, 295, 364, 4904, 47, 20300, 300, 8306, 257, 1622, 300, 15626, 577, 341, 307, 7545, 13, 51214], "temperature": 0.0, "avg_logprob": -0.4880276159806685, "compression_ratio": 1.625, "no_speech_prob": 0.4202782213687897}, {"id": 265, "seek": 147428, "start": 1491.28, "end": 1496.28, "text": " The question is, is it mandatory to signal?", "tokens": [51214, 440, 1168, 307, 11, 307, 309, 22173, 281, 6358, 30, 51464], "temperature": 0.0, "avg_logprob": -0.4880276159806685, "compression_ratio": 1.625, "no_speech_prob": 0.4202782213687897}, {"id": 266, "seek": 147428, "start": 1496.28, "end": 1503.28, "text": " So when the stream is a setup on the signaling layer, you have no flyer, I'm guessing, you", "tokens": [51464, 407, 562, 264, 4309, 307, 257, 8657, 322, 264, 38639, 4583, 11, 291, 362, 572, 3603, 260, 11, 286, 478, 17939, 11, 291, 51814], "temperature": 0.0, "avg_logprob": -0.4880276159806685, "compression_ratio": 1.625, "no_speech_prob": 0.4202782213687897}, {"id": 267, "seek": 150328, "start": 1503.28, "end": 1508.28, "text": " still use STP and this would exist as a line in the STP to describe how it's established.", "tokens": [50364, 920, 764, 4904, 47, 293, 341, 576, 2514, 382, 257, 1622, 294, 264, 4904, 47, 281, 6786, 577, 309, 311, 7545, 13, 50614], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 268, "seek": 150328, "start": 1508.28, "end": 1509.28, "text": " Yes.", "tokens": [50614, 1079, 13, 50664], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 269, "seek": 150328, "start": 1509.28, "end": 1518.28, "text": " The question is to know if during the call exchange, we signal the use of this protocol", "tokens": [50664, 440, 1168, 307, 281, 458, 498, 1830, 264, 818, 7742, 11, 321, 6358, 264, 764, 295, 341, 10336, 51114], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 270, "seek": 150328, "start": 1518.28, "end": 1521.28, "text": " into the STP right.", "tokens": [51114, 666, 264, 4904, 47, 558, 13, 51264], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 271, "seek": 150328, "start": 1521.28, "end": 1523.28, "text": " I'm not sure.", "tokens": [51264, 286, 478, 406, 988, 13, 51364], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 272, "seek": 150328, "start": 1523.28, "end": 1524.28, "text": " There is a.", "tokens": [51364, 821, 307, 257, 13, 51414], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 273, "seek": 150328, "start": 1524.28, "end": 1525.28, "text": " Yes, okay.", "tokens": [51414, 1079, 11, 1392, 13, 51464], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 274, "seek": 150328, "start": 1525.28, "end": 1526.28, "text": " Signaling.", "tokens": [51464, 13515, 4270, 13, 51514], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 275, "seek": 150328, "start": 1526.28, "end": 1527.28, "text": " That's the answer.", "tokens": [51514, 663, 311, 264, 1867, 13, 51564], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 276, "seek": 150328, "start": 1527.28, "end": 1528.28, "text": " Okay.", "tokens": [51564, 1033, 13, 51614], "temperature": 0.0, "avg_logprob": -0.25555339936287175, "compression_ratio": 1.4945652173913044, "no_speech_prob": 0.21878494322299957}, {"id": 277, "seek": 152828, "start": 1528.28, "end": 1529.28, "text": " Yes.", "tokens": [50364, 1079, 13, 50414], "temperature": 0.0, "avg_logprob": -0.3187416288587782, "compression_ratio": 1.3361344537815125, "no_speech_prob": 0.12385242432355881}, {"id": 278, "seek": 152828, "start": 1529.28, "end": 1543.28, "text": " So what you described seems very similar to RAID 5 with disk drives.", "tokens": [50414, 407, 437, 291, 7619, 2544, 588, 2531, 281, 14626, 2777, 1025, 365, 12355, 11754, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3187416288587782, "compression_ratio": 1.3361344537815125, "no_speech_prob": 0.12385242432355881}, {"id": 279, "seek": 152828, "start": 1543.28, "end": 1550.28, "text": " So when you join drives in RAID, you have an eight blocks and then you have one drive", "tokens": [51114, 407, 562, 291, 3917, 11754, 294, 14626, 2777, 11, 291, 362, 364, 3180, 8474, 293, 550, 291, 362, 472, 3332, 51464], "temperature": 0.0, "avg_logprob": -0.3187416288587782, "compression_ratio": 1.3361344537815125, "no_speech_prob": 0.12385242432355881}, {"id": 280, "seek": 155028, "start": 1550.28, "end": 1557.28, "text": " block which contains a pad bit for each of the blocks.", "tokens": [50364, 3461, 597, 8306, 257, 6887, 857, 337, 1184, 295, 264, 8474, 13, 50714], "temperature": 0.0, "avg_logprob": -0.20556630510272403, "compression_ratio": 1.5403726708074534, "no_speech_prob": 0.5763909220695496}, {"id": 281, "seek": 155028, "start": 1557.28, "end": 1564.28, "text": " But there's also RAID 6 which has not one but two pad blocks.", "tokens": [50714, 583, 456, 311, 611, 14626, 2777, 1386, 597, 575, 406, 472, 457, 732, 6887, 8474, 13, 51064], "temperature": 0.0, "avg_logprob": -0.20556630510272403, "compression_ratio": 1.5403726708074534, "no_speech_prob": 0.5763909220695496}, {"id": 282, "seek": 155028, "start": 1564.28, "end": 1568.28, "text": " Could that be applicable to your skin here?", "tokens": [51064, 7497, 300, 312, 21142, 281, 428, 3178, 510, 30, 51264], "temperature": 0.0, "avg_logprob": -0.20556630510272403, "compression_ratio": 1.5403726708074534, "no_speech_prob": 0.5763909220695496}, {"id": 283, "seek": 155028, "start": 1568.28, "end": 1576.28, "text": " So you have a line of five packets and then you have not one but two redundancy packets", "tokens": [51264, 407, 291, 362, 257, 1622, 295, 1732, 30364, 293, 550, 291, 362, 406, 472, 457, 732, 27830, 6717, 30364, 51664], "temperature": 0.0, "avg_logprob": -0.20556630510272403, "compression_ratio": 1.5403726708074534, "no_speech_prob": 0.5763909220695496}, {"id": 284, "seek": 157628, "start": 1576.28, "end": 1583.28, "text": " which could help you recover the line between two packets of lost.", "tokens": [50364, 597, 727, 854, 291, 8114, 264, 1622, 1296, 732, 30364, 295, 2731, 13, 50714], "temperature": 0.0, "avg_logprob": -0.31117982130784255, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.011126050725579262}, {"id": 285, "seek": 157628, "start": 1583.28, "end": 1584.28, "text": " Okay.", "tokens": [50714, 1033, 13, 50764], "temperature": 0.0, "avg_logprob": -0.31117982130784255, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.011126050725579262}, {"id": 286, "seek": 157628, "start": 1584.28, "end": 1591.28, "text": " So the question is about what happens if we lose repair packets for example or if we.", "tokens": [50764, 407, 264, 1168, 307, 466, 437, 2314, 498, 321, 3624, 10535, 30364, 337, 1365, 420, 498, 321, 13, 51114], "temperature": 0.0, "avg_logprob": -0.31117982130784255, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.011126050725579262}, {"id": 287, "seek": 157628, "start": 1591.28, "end": 1597.28, "text": " Could that skin be improved with having two pallet packets but one?", "tokens": [51114, 7497, 300, 3178, 312, 9689, 365, 1419, 732, 24075, 302, 30364, 457, 472, 30, 51414], "temperature": 0.0, "avg_logprob": -0.31117982130784255, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.011126050725579262}, {"id": 288, "seek": 157628, "start": 1597.28, "end": 1599.28, "text": " Not one packet but two.", "tokens": [51414, 1726, 472, 20300, 457, 732, 13, 51514], "temperature": 0.0, "avg_logprob": -0.31117982130784255, "compression_ratio": 1.5060240963855422, "no_speech_prob": 0.011126050725579262}, {"id": 289, "seek": 159928, "start": 1599.28, "end": 1605.28, "text": " Yes, it may be it's always a trade-off between what you what bond with you have and what", "tokens": [50364, 1079, 11, 309, 815, 312, 309, 311, 1009, 257, 4923, 12, 4506, 1296, 437, 291, 437, 6086, 365, 291, 362, 293, 437, 50664], "temperature": 0.0, "avg_logprob": -0.21533203125, "compression_ratio": 1.5449735449735449, "no_speech_prob": 0.011998871341347694}, {"id": 290, "seek": 159928, "start": 1605.28, "end": 1609.28, "text": " you decide to send to improve the protection.", "tokens": [50664, 291, 4536, 281, 2845, 281, 3470, 264, 6334, 13, 50864], "temperature": 0.0, "avg_logprob": -0.21533203125, "compression_ratio": 1.5449735449735449, "no_speech_prob": 0.011998871341347694}, {"id": 291, "seek": 159928, "start": 1609.28, "end": 1615.28, "text": " There is a other way to other protection pattern described in the RFC.", "tokens": [50864, 821, 307, 257, 661, 636, 281, 661, 6334, 5102, 7619, 294, 264, 497, 18671, 13, 51164], "temperature": 0.0, "avg_logprob": -0.21533203125, "compression_ratio": 1.5449735449735449, "no_speech_prob": 0.011998871341347694}, {"id": 292, "seek": 159928, "start": 1615.28, "end": 1622.28, "text": " For example, you can decide to protect small very specific source packets by using for", "tokens": [51164, 1171, 1365, 11, 291, 393, 4536, 281, 2371, 1359, 588, 2685, 4009, 30364, 538, 1228, 337, 51514], "temperature": 0.0, "avg_logprob": -0.21533203125, "compression_ratio": 1.5449735449735449, "no_speech_prob": 0.011998871341347694}, {"id": 293, "seek": 162228, "start": 1622.28, "end": 1625.28, "text": " example a flexible mask.", "tokens": [50364, 1365, 257, 11358, 6094, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2513055419921875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0073670027777552605}, {"id": 294, "seek": 162228, "start": 1625.28, "end": 1632.28, "text": " So you can have maybe here in this example decide to protect some packets twice and some", "tokens": [50514, 407, 291, 393, 362, 1310, 510, 294, 341, 1365, 4536, 281, 2371, 512, 30364, 6091, 293, 512, 50864], "temperature": 0.0, "avg_logprob": -0.2513055419921875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0073670027777552605}, {"id": 295, "seek": 162228, "start": 1632.28, "end": 1635.28, "text": " other once or not at all.", "tokens": [50864, 661, 1564, 420, 406, 412, 439, 13, 51014], "temperature": 0.0, "avg_logprob": -0.2513055419921875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0073670027777552605}, {"id": 296, "seek": 162228, "start": 1635.28, "end": 1644.28, "text": " Yes, it can be an improvement to prioritize the most important packets in your stream.", "tokens": [51014, 1079, 11, 309, 393, 312, 364, 10444, 281, 25164, 264, 881, 1021, 30364, 294, 428, 4309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2513055419921875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0073670027777552605}, {"id": 297, "seek": 162228, "start": 1644.28, "end": 1646.28, "text": " And there is other schemes.", "tokens": [51464, 400, 456, 307, 661, 26954, 13, 51564], "temperature": 0.0, "avg_logprob": -0.2513055419921875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0073670027777552605}, {"id": 298, "seek": 162228, "start": 1646.28, "end": 1648.28, "text": " One pair is one pair two block one.", "tokens": [51564, 1485, 6119, 307, 472, 6119, 732, 3461, 472, 13, 51664], "temperature": 0.0, "avg_logprob": -0.2513055419921875, "compression_ratio": 1.5591397849462365, "no_speech_prob": 0.0073670027777552605}, {"id": 299, "seek": 164828, "start": 1648.28, "end": 1653.28, "text": " Yes, there is other parity codes.", "tokens": [50364, 1079, 11, 456, 307, 661, 44747, 14211, 13, 50614], "temperature": 0.0, "avg_logprob": -0.172308075294066, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.02771260403096676}, {"id": 300, "seek": 164828, "start": 1653.28, "end": 1660.28, "text": " Honestly, I have to try to tell you which one can be better.", "tokens": [50614, 6625, 377, 356, 11, 286, 362, 281, 853, 281, 980, 291, 597, 472, 393, 312, 1101, 13, 50964], "temperature": 0.0, "avg_logprob": -0.172308075294066, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.02771260403096676}, {"id": 301, "seek": 164828, "start": 1660.28, "end": 1665.28, "text": " I don't know.", "tokens": [50964, 286, 500, 380, 458, 13, 51214], "temperature": 0.0, "avg_logprob": -0.172308075294066, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.02771260403096676}, {"id": 302, "seek": 164828, "start": 1665.28, "end": 1670.28, "text": " Probably one of the problems if you apply too much protection is that you're also going", "tokens": [51214, 9210, 472, 295, 264, 2740, 498, 291, 3079, 886, 709, 6334, 307, 300, 291, 434, 611, 516, 51464], "temperature": 0.0, "avg_logprob": -0.172308075294066, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.02771260403096676}, {"id": 303, "seek": 164828, "start": 1670.28, "end": 1671.28, "text": " to a lot of overhead.", "tokens": [51464, 281, 257, 688, 295, 19922, 13, 51514], "temperature": 0.0, "avg_logprob": -0.172308075294066, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.02771260403096676}, {"id": 304, "seek": 164828, "start": 1671.28, "end": 1676.28, "text": " So at one point if you're in a lossy network, you send more data to try to recover from", "tokens": [51514, 407, 412, 472, 935, 498, 291, 434, 294, 257, 4470, 88, 3209, 11, 291, 2845, 544, 1412, 281, 853, 281, 8114, 490, 51764], "temperature": 0.0, "avg_logprob": -0.172308075294066, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.02771260403096676}, {"id": 305, "seek": 167628, "start": 1676.28, "end": 1681.28, "text": " more loss, you end up in this spinning spiral that doesn't make things better.", "tokens": [50364, 544, 4470, 11, 291, 917, 493, 294, 341, 15640, 25165, 300, 1177, 380, 652, 721, 1101, 13, 50614], "temperature": 0.0, "avg_logprob": -0.19202923324872861, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.02036564238369465}, {"id": 306, "seek": 167628, "start": 1681.28, "end": 1688.28, "text": " So finding the balances is where the black magic is usually.", "tokens": [50614, 407, 5006, 264, 33993, 307, 689, 264, 2211, 5585, 307, 2673, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19202923324872861, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.02036564238369465}, {"id": 307, "seek": 167628, "start": 1688.28, "end": 1689.28, "text": " Well, thanks Flo.", "tokens": [50964, 1042, 11, 3231, 15153, 13, 51014], "temperature": 0.0, "avg_logprob": -0.19202923324872861, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.02036564238369465}, {"id": 308, "seek": 167628, "start": 1689.28, "end": 1690.28, "text": " Well, no, it's okay.", "tokens": [51014, 1042, 11, 572, 11, 309, 311, 1392, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19202923324872861, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.02036564238369465}, {"id": 309, "seek": 167628, "start": 1690.28, "end": 1691.28, "text": " Oh, there's one more question.", "tokens": [51064, 876, 11, 456, 311, 472, 544, 1168, 13, 51114], "temperature": 0.0, "avg_logprob": -0.19202923324872861, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.02036564238369465}, {"id": 310, "seek": 167628, "start": 1691.28, "end": 1692.28, "text": " Please go ahead, we have some time.", "tokens": [51114, 2555, 352, 2286, 11, 321, 362, 512, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.19202923324872861, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.02036564238369465}, {"id": 311, "seek": 167628, "start": 1692.28, "end": 1697.28, "text": " Maybe regarding exactly what you said, how do you know that you don't make it worse?", "tokens": [51164, 2704, 8595, 2293, 437, 291, 848, 11, 577, 360, 291, 458, 300, 291, 500, 380, 652, 309, 5324, 30, 51414], "temperature": 0.0, "avg_logprob": -0.19202923324872861, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.02036564238369465}, {"id": 312, "seek": 167628, "start": 1697.28, "end": 1700.28, "text": " Yes, in fact, we had the problem.", "tokens": [51414, 1079, 11, 294, 1186, 11, 321, 632, 264, 1154, 13, 51564], "temperature": 0.0, "avg_logprob": -0.19202923324872861, "compression_ratio": 1.5423728813559323, "no_speech_prob": 0.02036564238369465}, {"id": 313, "seek": 170028, "start": 1700.28, "end": 1707.28, "text": " So at some point we sent more information in the written on stream than simply sending", "tokens": [50364, 407, 412, 512, 935, 321, 2279, 544, 1589, 294, 264, 3720, 322, 4309, 813, 2935, 7750, 50714], "temperature": 0.0, "avg_logprob": -0.1569364129043207, "compression_ratio": 1.4685990338164252, "no_speech_prob": 0.013459223322570324}, {"id": 314, "seek": 170028, "start": 1707.28, "end": 1709.28, "text": " the video stream twice.", "tokens": [50714, 264, 960, 4309, 6091, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1569364129043207, "compression_ratio": 1.4685990338164252, "no_speech_prob": 0.013459223322570324}, {"id": 315, "seek": 170028, "start": 1709.28, "end": 1716.28, "text": " In that case, we control the overhead periodically.", "tokens": [50814, 682, 300, 1389, 11, 321, 1969, 264, 19922, 38916, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1569364129043207, "compression_ratio": 1.4685990338164252, "no_speech_prob": 0.013459223322570324}, {"id": 316, "seek": 170028, "start": 1716.28, "end": 1723.28, "text": " And when it goes above, for example, 1.9, you reduce the FEC protection.", "tokens": [51164, 400, 562, 309, 1709, 3673, 11, 337, 1365, 11, 502, 13, 24, 11, 291, 5407, 264, 479, 8140, 6334, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1569364129043207, "compression_ratio": 1.4685990338164252, "no_speech_prob": 0.013459223322570324}, {"id": 317, "seek": 170028, "start": 1723.28, "end": 1725.28, "text": " It's not always indicated.", "tokens": [51514, 467, 311, 406, 1009, 16176, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1569364129043207, "compression_ratio": 1.4685990338164252, "no_speech_prob": 0.013459223322570324}, {"id": 318, "seek": 170028, "start": 1725.28, "end": 1729.28, "text": " So it's a decision that you have to make.", "tokens": [51614, 407, 309, 311, 257, 3537, 300, 291, 362, 281, 652, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1569364129043207, "compression_ratio": 1.4685990338164252, "no_speech_prob": 0.013459223322570324}, {"id": 319, "seek": 172928, "start": 1729.28, "end": 1734.28, "text": " We have established empirical rules to manage that.", "tokens": [50364, 492, 362, 7545, 31886, 4474, 281, 3067, 300, 13, 50614], "temperature": 0.0, "avg_logprob": -0.3548817952473958, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.06775607913732529}, {"id": 320, "seek": 172928, "start": 1734.28, "end": 1735.28, "text": " Yes?", "tokens": [50614, 1079, 30, 50664], "temperature": 0.0, "avg_logprob": -0.3548817952473958, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.06775607913732529}, {"id": 321, "seek": 172928, "start": 1735.28, "end": 1740.28, "text": " I want to ask you about the masking of your gold right now.", "tokens": [50664, 286, 528, 281, 1029, 291, 466, 264, 31226, 295, 428, 3821, 558, 586, 13, 50914], "temperature": 0.0, "avg_logprob": -0.3548817952473958, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.06775607913732529}, {"id": 322, "seek": 172928, "start": 1740.28, "end": 1741.28, "text": " Yes?", "tokens": [50914, 1079, 30, 50964], "temperature": 0.0, "avg_logprob": -0.3548817952473958, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.06775607913732529}, {"id": 323, "seek": 172928, "start": 1741.28, "end": 1744.28, "text": " The slide is right now there.", "tokens": [50964, 440, 4137, 307, 558, 586, 456, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3548817952473958, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.06775607913732529}, {"id": 324, "seek": 172928, "start": 1744.28, "end": 1748.28, "text": " You have said that you can protect the specific package.", "tokens": [51114, 509, 362, 848, 300, 291, 393, 2371, 264, 2685, 7372, 13, 51314], "temperature": 0.0, "avg_logprob": -0.3548817952473958, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.06775607913732529}, {"id": 325, "seek": 172928, "start": 1748.28, "end": 1750.28, "text": " Yes, like you protect a group of packets.", "tokens": [51314, 1079, 11, 411, 291, 2371, 257, 1594, 295, 30364, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3548817952473958, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.06775607913732529}, {"id": 326, "seek": 172928, "start": 1750.28, "end": 1751.28, "text": " Yes?", "tokens": [51414, 1079, 30, 51464], "temperature": 0.0, "avg_logprob": -0.3548817952473958, "compression_ratio": 1.5454545454545454, "no_speech_prob": 0.06775607913732529}, {"id": 327, "seek": 175128, "start": 1751.28, "end": 1754.28, "text": " That's for example in video conversations for you.", "tokens": [50364, 663, 311, 337, 1365, 294, 960, 7315, 337, 291, 13, 50514], "temperature": 0.0, "avg_logprob": -0.43510971855871455, "compression_ratio": 1.7213930348258706, "no_speech_prob": 0.09645598381757736}, {"id": 328, "seek": 175128, "start": 1754.28, "end": 1763.28, "text": " For example, the push and the step or that X2, 6, 4, and you protect, for example, the", "tokens": [50514, 1171, 1365, 11, 264, 2944, 293, 264, 1823, 420, 300, 1783, 17, 11, 1386, 11, 1017, 11, 293, 291, 2371, 11, 337, 1365, 11, 264, 50964], "temperature": 0.0, "avg_logprob": -0.43510971855871455, "compression_ratio": 1.7213930348258706, "no_speech_prob": 0.09645598381757736}, {"id": 329, "seek": 175128, "start": 1763.28, "end": 1769.28, "text": " key frames do be interpolated instead of, isn't it?", "tokens": [50964, 2141, 12083, 360, 312, 44902, 770, 2602, 295, 11, 1943, 380, 309, 30, 51264], "temperature": 0.0, "avg_logprob": -0.43510971855871455, "compression_ratio": 1.7213930348258706, "no_speech_prob": 0.09645598381757736}, {"id": 330, "seek": 175128, "start": 1769.28, "end": 1775.28, "text": " Yes, so the question is if you can protect, for example, the key frames of the video conference.", "tokens": [51264, 1079, 11, 370, 264, 1168, 307, 498, 291, 393, 2371, 11, 337, 1365, 11, 264, 2141, 12083, 295, 264, 960, 7586, 13, 51564], "temperature": 0.0, "avg_logprob": -0.43510971855871455, "compression_ratio": 1.7213930348258706, "no_speech_prob": 0.09645598381757736}, {"id": 331, "seek": 175128, "start": 1775.28, "end": 1778.28, "text": " Yes, it's a way to choose which packet you want to protect.", "tokens": [51564, 1079, 11, 309, 311, 257, 636, 281, 2826, 597, 20300, 291, 528, 281, 2371, 13, 51714], "temperature": 0.0, "avg_logprob": -0.43510971855871455, "compression_ratio": 1.7213930348258706, "no_speech_prob": 0.09645598381757736}, {"id": 332, "seek": 177828, "start": 1778.28, "end": 1785.28, "text": " If you don't want to protect everything, but mainly the key frame, it's a good approach.", "tokens": [50364, 759, 291, 500, 380, 528, 281, 2371, 1203, 11, 457, 8704, 264, 2141, 3920, 11, 309, 311, 257, 665, 3109, 13, 50714], "temperature": 0.0, "avg_logprob": -0.20241483052571616, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.019579637795686722}, {"id": 333, "seek": 177828, "start": 1785.28, "end": 1792.28, "text": " Or you can make the one-dimensional, two-dimensional only protection, only when you have the packets", "tokens": [50714, 1610, 291, 393, 652, 264, 472, 12, 18759, 11, 732, 12, 18759, 787, 6334, 11, 787, 562, 291, 362, 264, 30364, 51064], "temperature": 0.0, "avg_logprob": -0.20241483052571616, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.019579637795686722}, {"id": 334, "seek": 177828, "start": 1792.28, "end": 1794.28, "text": " of the key frame.", "tokens": [51064, 295, 264, 2141, 3920, 13, 51164], "temperature": 0.0, "avg_logprob": -0.20241483052571616, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.019579637795686722}, {"id": 335, "seek": 177828, "start": 1794.28, "end": 1795.28, "text": " Okay.", "tokens": [51164, 1033, 13, 51214], "temperature": 0.0, "avg_logprob": -0.20241483052571616, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.019579637795686722}, {"id": 336, "seek": 177828, "start": 1795.28, "end": 1796.28, "text": " So the receiver size.", "tokens": [51214, 407, 264, 20086, 2744, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20241483052571616, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.019579637795686722}, {"id": 337, "seek": 177828, "start": 1796.28, "end": 1800.28, "text": " Is it right like all your key frames are on one column and you just protect them?", "tokens": [51264, 1119, 309, 558, 411, 439, 428, 2141, 12083, 366, 322, 472, 7738, 293, 291, 445, 2371, 552, 30, 51464], "temperature": 0.0, "avg_logprob": -0.20241483052571616, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.019579637795686722}, {"id": 338, "seek": 177828, "start": 1800.28, "end": 1807.28, "text": " Yes, but you, so the key frames are not necessarily in the same rows or the same columns, but you", "tokens": [51464, 1079, 11, 457, 291, 11, 370, 264, 2141, 12083, 366, 406, 4725, 294, 264, 912, 13241, 420, 264, 912, 13766, 11, 457, 291, 51814], "temperature": 0.0, "avg_logprob": -0.20241483052571616, "compression_ratio": 1.7659574468085106, "no_speech_prob": 0.019579637795686722}, {"id": 339, "seek": 180728, "start": 1807.28, "end": 1811.28, "text": " can change the values of D and L whenever you want.", "tokens": [50364, 393, 1319, 264, 4190, 295, 413, 293, 441, 5699, 291, 528, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13936937939036975, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.012555120512843132}, {"id": 340, "seek": 180728, "start": 1811.28, "end": 1818.28, "text": " On the receiver side, the receiver just read what it has in the FEC header.", "tokens": [50564, 1282, 264, 20086, 1252, 11, 264, 20086, 445, 1401, 437, 309, 575, 294, 264, 479, 8140, 23117, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13936937939036975, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.012555120512843132}, {"id": 341, "seek": 180728, "start": 1818.28, "end": 1826.28, "text": " You see the value of D, the value of L, and it adapts the configuration to recover the lost packets.", "tokens": [50914, 509, 536, 264, 2158, 295, 413, 11, 264, 2158, 295, 441, 11, 293, 309, 23169, 1373, 264, 11694, 281, 8114, 264, 2731, 30364, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13936937939036975, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.012555120512843132}, {"id": 342, "seek": 180728, "start": 1826.28, "end": 1830.28, "text": " Okay, so you can modify that value dynamically during the...", "tokens": [51314, 1033, 11, 370, 291, 393, 16927, 300, 2158, 43492, 1830, 264, 485, 51514], "temperature": 0.0, "avg_logprob": -0.13936937939036975, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.012555120512843132}, {"id": 343, "seek": 180728, "start": 1830.28, "end": 1836.28, "text": " Yes, you can dynamically modify the protection configuration.", "tokens": [51514, 1079, 11, 291, 393, 43492, 16927, 264, 6334, 11694, 13, 51814], "temperature": 0.0, "avg_logprob": -0.13936937939036975, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.012555120512843132}, {"id": 344, "seek": 183628, "start": 1836.28, "end": 1841.28, "text": " And it's very powerful.", "tokens": [50364, 400, 309, 311, 588, 4005, 13, 50614], "temperature": 0.0, "avg_logprob": -0.2090403945357711, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.0071203080005943775}, {"id": 345, "seek": 183628, "start": 1841.28, "end": 1842.28, "text": " Yes.", "tokens": [50614, 1079, 13, 50664], "temperature": 0.0, "avg_logprob": -0.2090403945357711, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.0071203080005943775}, {"id": 346, "seek": 183628, "start": 1842.28, "end": 1847.28, "text": " How do you measure the network's bandwidth, for example?", "tokens": [50664, 1012, 360, 291, 3481, 264, 3209, 311, 23647, 11, 337, 1365, 30, 50914], "temperature": 0.0, "avg_logprob": -0.2090403945357711, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.0071203080005943775}, {"id": 347, "seek": 183628, "start": 1847.28, "end": 1851.28, "text": " Because without provoking the network with high load, right?", "tokens": [50914, 1436, 1553, 1439, 5953, 264, 3209, 365, 1090, 3677, 11, 558, 30, 51114], "temperature": 0.0, "avg_logprob": -0.2090403945357711, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.0071203080005943775}, {"id": 348, "seek": 183628, "start": 1851.28, "end": 1854.28, "text": " Yes, how do we measure the available bandwidth?", "tokens": [51114, 1079, 11, 577, 360, 321, 3481, 264, 2435, 23647, 30, 51264], "temperature": 0.0, "avg_logprob": -0.2090403945357711, "compression_ratio": 1.39568345323741, "no_speech_prob": 0.0071203080005943775}, {"id": 349, "seek": 185428, "start": 1854.28, "end": 1865.28, "text": " We have estimator in our program that tries to measure the...", "tokens": [50364, 492, 362, 8017, 1639, 294, 527, 1461, 300, 9898, 281, 3481, 264, 485, 50914], "temperature": 0.0, "avg_logprob": -0.21575632962313565, "compression_ratio": 1.5321637426900585, "no_speech_prob": 0.03104119747877121}, {"id": 350, "seek": 185428, "start": 1865.28, "end": 1875.28, "text": " If I remember, the time delay between the reception of packets and try to establish the bit rate.", "tokens": [50914, 759, 286, 1604, 11, 264, 565, 8577, 1296, 264, 21682, 295, 30364, 293, 853, 281, 8327, 264, 857, 3314, 13, 51414], "temperature": 0.0, "avg_logprob": -0.21575632962313565, "compression_ratio": 1.5321637426900585, "no_speech_prob": 0.03104119747877121}, {"id": 351, "seek": 185428, "start": 1875.28, "end": 1880.28, "text": " And we see if there is congestion, if there is congestion occurs or not.", "tokens": [51414, 400, 321, 536, 498, 456, 307, 40816, 11, 498, 456, 307, 40816, 11843, 420, 406, 13, 51664], "temperature": 0.0, "avg_logprob": -0.21575632962313565, "compression_ratio": 1.5321637426900585, "no_speech_prob": 0.03104119747877121}, {"id": 352, "seek": 185428, "start": 1880.28, "end": 1883.28, "text": " But it's based on estimation.", "tokens": [51664, 583, 309, 311, 2361, 322, 35701, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21575632962313565, "compression_ratio": 1.5321637426900585, "no_speech_prob": 0.03104119747877121}, {"id": 353, "seek": 188328, "start": 1883.28, "end": 1886.28, "text": " We have to deal with that.", "tokens": [50364, 492, 362, 281, 2028, 365, 300, 13, 50514], "temperature": 0.0, "avg_logprob": -0.12760864685629017, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0204083863645792}, {"id": 354, "seek": 188328, "start": 1886.28, "end": 1893.28, "text": " Yes, the idea of the algorithm that we use is to measure the regularity of the packet at the receiver side.", "tokens": [50514, 1079, 11, 264, 1558, 295, 264, 9284, 300, 321, 764, 307, 281, 3481, 264, 3890, 507, 295, 264, 20300, 412, 264, 20086, 1252, 13, 50864], "temperature": 0.0, "avg_logprob": -0.12760864685629017, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0204083863645792}, {"id": 355, "seek": 188328, "start": 1893.28, "end": 1898.28, "text": " And when it changes, we can deduce that the bandwidth is more...", "tokens": [50864, 400, 562, 309, 2962, 11, 321, 393, 4172, 4176, 300, 264, 23647, 307, 544, 485, 51114], "temperature": 0.0, "avg_logprob": -0.12760864685629017, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0204083863645792}, {"id": 356, "seek": 188328, "start": 1898.28, "end": 1900.28, "text": " is close to be saturated.", "tokens": [51114, 307, 1998, 281, 312, 25408, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12760864685629017, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0204083863645792}, {"id": 357, "seek": 188328, "start": 1900.28, "end": 1904.28, "text": " This is more or less the way that we use.", "tokens": [51214, 639, 307, 544, 420, 1570, 264, 636, 300, 321, 764, 13, 51414], "temperature": 0.0, "avg_logprob": -0.12760864685629017, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0204083863645792}, {"id": 358, "seek": 188328, "start": 1904.28, "end": 1907.28, "text": " So do you use RTCP for this configuration?", "tokens": [51414, 407, 360, 291, 764, 497, 18238, 47, 337, 341, 11694, 30, 51564], "temperature": 0.0, "avg_logprob": -0.12760864685629017, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0204083863645792}, {"id": 359, "seek": 188328, "start": 1907.28, "end": 1912.28, "text": " Yes, and we also use RTCP feedback as well in order to measure...", "tokens": [51564, 1079, 11, 293, 321, 611, 764, 497, 18238, 47, 5824, 382, 731, 294, 1668, 281, 3481, 485, 51814], "temperature": 0.0, "avg_logprob": -0.12760864685629017, "compression_ratio": 1.6563876651982379, "no_speech_prob": 0.0204083863645792}, {"id": 360, "seek": 191228, "start": 1912.28, "end": 1916.28, "text": " packet losses from the receiver side.", "tokens": [50364, 20300, 15352, 490, 264, 20086, 1252, 13, 50564], "temperature": 0.0, "avg_logprob": -0.142417916229793, "compression_ratio": 1.4306569343065694, "no_speech_prob": 0.012351908721029758}, {"id": 361, "seek": 191228, "start": 1916.28, "end": 1920.28, "text": " But it's a bit different than just bandwidth.", "tokens": [50564, 583, 309, 311, 257, 857, 819, 813, 445, 23647, 13, 50764], "temperature": 0.0, "avg_logprob": -0.142417916229793, "compression_ratio": 1.4306569343065694, "no_speech_prob": 0.012351908721029758}, {"id": 362, "seek": 191228, "start": 1920.28, "end": 1926.28, "text": " For the bandwidth, it's really the regularity of the receiver side, which is a measure.", "tokens": [50764, 1171, 264, 23647, 11, 309, 311, 534, 264, 3890, 507, 295, 264, 20086, 1252, 11, 597, 307, 257, 3481, 13, 51064], "temperature": 0.0, "avg_logprob": -0.142417916229793, "compression_ratio": 1.4306569343065694, "no_speech_prob": 0.012351908721029758}, {"id": 363, "seek": 191228, "start": 1935.28, "end": 1936.28, "text": " Thanks, Bois.", "tokens": [51514, 2561, 11, 3286, 271, 13, 51564], "temperature": 0.0, "avg_logprob": -0.142417916229793, "compression_ratio": 1.4306569343065694, "no_speech_prob": 0.012351908721029758}, {"id": 364, "seek": 191228, "start": 1936.28, "end": 1937.28, "text": " Thank you.", "tokens": [51564, 1044, 291, 13, 51614], "temperature": 0.0, "avg_logprob": -0.142417916229793, "compression_ratio": 1.4306569343065694, "no_speech_prob": 0.012351908721029758}, {"id": 365, "seek": 194228, "start": 1942.28, "end": 1943.28, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50414], "temperature": 0.0, "avg_logprob": -0.6021044651667277, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9928187727928162}], "language": "en"}