{"text": " So our next speaker is Leo, who is a developer at Dino, and he's going to talk about how to create a JavaScript runtime with Rust. Big round of applause for Leo. Hello, I'm Leo. As I was just introduced, I work at Dino, and I do various Rust. At Dino we do a lot of Rust, and we create a JavaScript runtime, but we want other people to be able to use it as well and make their own stuff with it. So we will explain internals and how you can make a small JavaScript runtime by yourself. But first, what does Dino? Many people still don't know, so better explain. It's a JavaScript runtime similar to Node, maybe similar to Bonn if you've heard of Bonn, it focuses on security, web compatibility, typescript out of the box support, and just a lot of built-in tools like a formator, lint, dock generation. We also have compiling for single executable, and a bunch of other tools. We are also not 100% fully Node compatible, but we're getting closer and closer by the day, and it's getting quite well. And what matters to this presentation is the modular code base. We have a lot of building blocks that can be used individually to build your own JavaScript runtime just with these Rust crates or Rust libraries to make your own one. Without too much effort, actually, we simplified this a lot. Yes, so first off we need to explain the internal structure of Dino, which is everything is built on Dino Core. Dino Core is a layer above V8, which is the JavaScript engine that powers all the Chrome and Vowsers. And Dino Core is just a small wrapper around it that simplifies a lot of the utilities around it and makes it a bit more friendly to use. It's not always easy to directly use V8 by itself. And on top of that, we have various other functionality that's built on top of that. That's extensions. Extensions are individual libraries that can be used by themselves to implement individual APIs and functionality. For example, a specific web API, like let's say fetch or a fetch of variations on individual extension. We have HTTP server, KV, root loads. Basically everything is individual building blocks that can be not copied and pasted, but imported and just used without too much hassle. Like usually to add an extension is like three lines of code and then suddenly you have a massive amount of more APIs that you can just use. Then we have Dino Runtime, which is a library that is built on top of a bunch of extensions that adds a bit more capability to it, including permission system, which relates back to us being a secure runtime. We have various permission-based functionality and flags. And also another additional feature would be the fact that we do some definitions of various global scopes and the Dino namespace itself. And also web workers are only implemented in the Dino Runtime grade because it's just not possible to have it as an extension just because it needs to interrupt with the extensions themselves. And then we have the CLI, which is what we compile and what people use. And that's not great. Yeah. And CLI includes the TypeScript support, a bunch of other, like all the tools of the CLI, like the lint, the formator, et cetera. And also then we have the compile supplement, as I mentioned before, that has a compiler single executable and testing infrastructure, benchmarking infrastructure, and dock generation. We have a fully static HML dock generator that you can just use and will always give a relatively clean output. But what will we build today? We will build a JavaScript runtime that can compile TypeScript, has a functionality to make a HTTP request, a console.log, some files to migrations like read and write, and deleting a file, I think, as well. And it's all in less than 20, 30 lines of Rust and JavaScript. We will connect Rangias just because this will be a relatively technical topic, so there's going to be a lot of code. So you want. First let's explain extensions more in depth. Extensions have various fields and options that can be set. Arps, which I will explain in a moment, basically the Clif Rust functions that can be used in JavaScript, so you can just write a Rust function and that will then be callable out of JavaScript. ESM is the ES module, so you can use ES modules, import static imports, and dynamic imports. Work as well, I believe. Maybe not. JavaScript files are just scripts, so not ESM. To include it, all works differently under the hood, so we have these two separate options. And then depth is declarations of other extensions. This extension depends on. This is not necessarily needed. It's more of a safety harness. Just it makes sure that you actually initiated the extensions in the right order so you don't actually forget to initiate an extension that another extension relies on and then everything floats and then you don't know what's happening. And there's some other relevant, less relevant options like config. JS, as I mentioned, above is ravelly use nowadays. And then lazy loaded ESM state, and I'm not going to go into depth. It's just config lets you configure some options to a specific extension. If you want to have some special state, you can use the state option. lazy loaded ESM lets you lazy load extension code, but that's nothing that we're going to go into depth for you to look at this in this talk. And then ops. So ops are these functions that you can declare in Rust that then are used in JavaScript. You can just call it like a normal function in JavaScript. And it uses this up to macro. I hope that's not too problematic of an explanation that what a macro is. I hope everyone knows here. Not your problem. And then basically you define arguments and return types with these special macro attributes like the string or this string. And basically it infers then the right type to map it from JavaScript to Rust. And vice versa, depending on the attributes. And yeah, you just write a normal Rust function like for example in that we just use tokyo which is tokyo is the async executor that we use in Dino and most of the Rust ecosystem uses it and then we just read the string, we read the content of a file of the path specified and we just return it. And we return everything in ops as a result which is either an error or an acceptable value because you might want to throw an error for example and that just handles it under the hood tool. So you just return an error. There's other various types that can be specified in ops. We have some more ambiguous types like V8 value which is just a generic JavaScript value. You can pass that in, you can manually match and do some more specific handling if you need some weird function that does based on different types, something which usually we try to avoid. Rather have separate functions that do more specific things. But then we also have Boolean, I supported numbers, strings, as there, array buffers are supported as well. And yeah, you can return and accept array buffers and it all handles under hood without issue. It's all been simplified as much as possible to make it as user friendly or developer friendly as possible. So it's really easy to just create your own functionality without too much difficulty. There is also this async is defined up top. It makes sure that the function is actually async and that it does need to use async functionality when you define something as async. And if you don't do anything async, it will usually then error out during compile time. So because async, it's just more complication under the hood that makes it less performant to some degree. Then here comes the code. So for this example, we're gonna have to find a few ops or cross function clarifications that make the code from JavaScript. And we have read file, write file, fetch, set time out, and remove file. So in the read file, as we just saw, we read the file from the path given and return that with write file. We can get, we specify a path and the content both as a string and write that to file to disk. And we return nothing as per the empty type. And then the fetch one, which might be the most interesting out of all of these, is basically uses request, which is a rust grade for doing HTTP requests. That I guess if we wanna compare to something in the JavaScript ecosystem would be similar to Axios, I think. It's very similar, maybe not similar in API, but similar in functionality and simplicity. And yeah, we may just do a fetch request and get the content of the body via the text method and then just return the content. And then we have a set time out, which just puts the current thread to sleep. And for the specified duration, it's passed by the user via this function. And remove file, just remove file, this is given in the path. However, we use a whole system called v8snapshots and it's gonna be part, I apologize because it's a very complex topic. Not many people really know what it is or even how it works. But to very simplify, it's let's take the current state of the JavaScript execution and you can store it in a file and resume it later. That's the simplest way to explain it. It's not exactly like that, but for simplicity's sake, let's stay to that. So we need a build script because we first need to do some setup. So first we initialize our extension. We call it Vangias as we said earlier. And we have this ESM entry point, I did not mention that earlier. But basically, let's you specify the entry point that runtime will use when starting up. And we specify our files. We have this ESM option and we have this JavaScript file, which we'll see just in a second. And we have some path defined. We want to get the path of the current build script location, some more specific Rust shenanigans. But we get this path and we join it with this Vangias snapshot. It could be any path, just we need a common location where this build script outputs something that we can then retrieve during runtime. Now comes the fun part, which is this create snapshot utility function that we have made that does all the snapshotting logic under the hood, tries to simplify it as much as possible. And you have a few options, most of them can be completely ignored. The only two important, three important ones are the manifest there. We cannot infer this automatically. So we have users to always set this value to be this and micro call to the target manifest directory. The snapshot path is the variable we defined earlier for the where the output of the snapshot will be. And then we have extensions, which is the extension we created earlier above. And we just want to initiate the JavaScript code. We don't have just initiate ESM file, it's initiate ops and ESM. Here we have not defined ops because this is just doing the build script. We do not care about ops at this point in time. They will come into play in a moment. First, we also want to support TypeScript. And this is just a small snippet of the code. There's some more boilerplate that is not necessarily interesting. It's just getting the path of the file and the media type of the current file just to be sure that we actually transpile JavaScript and TypeScript to JavaScript and that file types are all correct. But for that we use this AST create, which is basically a wrapper around SWC. SWC is a Rust create a library that basically implements TypeScripting as per TypeScripts wants and needs since there's no real specification because TypeScript. But it takes some options, the specifier, which has created a path or the name of the file that we want to transpile, the source code. So the text info, we just create this structure from the code that we got earlier from this V2 string at the top from the path that was specified by this function. And some boilerplate, this media type that I just talked about. And then we just call Transfile and magically we get the Transfile TypeScript as a JavaScript. And we can just use it. And then we have to code and we just create a structure of module source, which is how it internally is represented and we just return it. And this is all in trade, I guess the best way if you're familiar with TypeScript is like an interface and we implement this trade and it has a few methods but only one method is really necessary and it is a load method, which is what this is it. There's a few more lines both above but again, that's just for media type and some smaller error handling that is not really out of too much interest for this scenario or for the simplicity. Then we have our, this is in the actual main script where we get the snapshot that we created earlier during the build script and include it into the binary itself. And then we have access to this runtime snapshot and we will use it later on. And then we have the extensions, we initiate again, but this time just with the ops that we defined earlier. And this time we don't need the yes modules because we defined them earlier and snapshot attempt so they're part of the runtime snapshot from above. And it seems I forgot a slide. I can quickly hopefully fix it. This is not well prepared and I apologize. I hope this, let's do it the easy way. This is the JavaScript file with the internals defined. And basically we input the inner core as a JavaScript as a JavaScript module that you can import. If you use the inner core that has some utility some functionalities again just like the Rust version. Just this is for interropping between the Rust and the JavaScript. And we have the structure to score into ops. Ops again is, this is an object that can be used to access the functions that we defined earlier as we see over here that I hope it's big enough actually. Can the people in the back read it? Wonderful. Is this big enough? Wait, then let's, okay. Just to quickly reiterate we have this input of the inner core and instruction to this ops object which is just down below here used to call this op read file which is the one we defined in the Rust file earlier. And all under the hood it converts the values to the correct type matching in the Rust. And then whatever it's returned from this op read file which will be a file content we then just return it from this function that we defined in this object constant. Over here above we also have the console definition which is, uses code of print which is a utility defined in the inner core again, a few more helpful tools. And we just get all the arguments and just use this arts to match it but we then define the part which will be just stringifies and joins all the values. We don't need anything too complex for this example and then just prints it to the console. And then we have the same forever which just sets at the end the true value which is for if it's an error or not. So above it's false and then below it's true. Then further down we have the other function definitions which are read file, write file, move file, fetch, maybe just all wrapper functions around these ops. Technically this async was not needed. So one of the side part whatever and then we have the set timeout which calls the set timeout and then calls the callback. So it's relatively identical to the web API that we know. And it's assigned this to global disk which is the global namespace and also we assign to the global disk also the console and we define a runjs function object which is the object we defined above with all these extra small functionalities. To go back to here, we defined this extension again and the runtime snapshot and then we have basically all the building blocks ready now we just need to actually use it. And for that we need the runtime. This is again a bit more complex but basically we define a function that takes a file path. The file path is the JavaScript file we want to execute with the user's code that they pass. We have some utilities in Unicode that resolves the path against the current directory and gives you a model specifier out because that's what internally it's used. The module loader is what is used to resolve a module and any imports in it from this user specified file and we have our TS module loader. This is the TypeScript transpiler that we built earlier that is just the structure that we defined but I did not show that because we've boilerplate. Startup snapshot is the snapshot that we got from earlier from the setup and then the extension we need to initiate the ops that are defined so that the Dino Core and the JavaScript file that we designed can actually access these functions and load them up. And we don't care about any of the other options and then we have the actual usage which is this load main module. The load main module, it loads the main module of the entry point. Let's say if you run Dino run test.ts it will, that would be the main module and then it will work through the entire module graph which is basically all the imports one by one on the recursively. And this is async, a lot of this operation async because ES modules are inherently async and yeah we evaluate the module so we basically run it and get if there was any output and then we want to run the event loop because there's going to be multiple pulls let's say with async functions you've got to do multiple async calls perhaps or just stuff. We have some options that are not of interest. We have Dino Core includes inspector, utilities and pump via message loop which is again not much interest at some point or another. We just await this event loop running and return value of this result that we were calling earlier so we just then get out of this run.js function we get the result which hopefully will be okay and there's not going to be any errors but there might always be some error. A user might have to find incorrect variable names or have invalid syntax or something like that. And then we can do a small demo where we, I hope this is going to be big enough again. That's definitely not. We have this example.js file. Here we just call the set timeout that we defined earlier in the global scope and then just come out and this can then just be, kind of make this bigger. No. So life demos never go perfectly well but hopefully this should be working. So we then just do congo run and we want to specify this input file which we called examples.js. And hopefully this will work. It first needs to compile and yep it prints the weight and then the hello world that we call here. Now this is just a set timeout that's not as interesting as for example fetch. So I mean we could just console log the fetch output so it would be run.js because we defined this global variable earlier as run.js in this run.js down here and then we want to call fetch. I think we could fetch HTTP example.com and since this is async we want to await it and again let's run this and hopefully we'll get an unreadable wall of text of HTML output from example.com. It's usually not that long and yes we did a fetch request to a remote server. And we had the file system operations so I could just call await runjs.readfile and let's read for example this file itself. And then my terminal quickly. And hopefully it should just print the same output because we're reading self file yep and it reads and then the deleting and writing of files will work as well. We're not going to go too depth into that. It's relatively self explanatory and yeah that's pretty much it. I know I went a bit fast. I hope people don't have questions. There's a QR code for the actual repository where we have this so if people are interested to check it out but also we always are trying to improve the ecosystem and common problems of the JavaScript ecosystem and we actually have had problems with the dependency ecosystem of JavaScript and NPM and we decided that someone needs to solve this and as such we also created a new general purpose JavaScript registry that will work in any runtime. This has been announced a few days ago by Ryan Moindepf and you can join the waitlist at the QR code or the URL. That's it. Are there any questions? Time for one or two questions. Yeah. Let's see that I hate this. Inside the Docker container. I have this input queue of jobs where I send the script that I want to run and then just execute it and the output is from it. Is there any downside as long as I am only sending one single script that it needs to execute? No. I don't see any issue with that whatsoever. It should just work. Again, I'm not too familiar with Docker though but that seems like a relatively normal thing to do. Any other questions? What have been your biggest challenges in writing this run project? This project has been going on since it was announced in 2018 and we have written our internals many times. For example, extensions were called other things multiple times in the past. We renamed and restructured not entire structure of the code base but it was just multiple rewrites just to be able to have more capability but also performance wise improvements. Overall, it has been a challenge but it was something we could always figure out. Rust itself has never been an issue. It's always been relatively good to use. It's not perfect. No programming language is perfect but previously Dino was initially started as a Go project but we switched quickly to Rust for performance benefits as well. I hope that answers the question. Anything else? Yes? Yes? Yes? Is it? On this one? Yes. Okay. This could technically have been just accepting U64 directly. This should actually have been U64 directly and just been passed and not casted but that was probably just some oversight while writing this code. We casted it because it was from Melissa, except only U64 but this is just oversight. I have one more question. Yes? How does the performance on the custom run times or extensions compare to the foreign functions in the past? I'm not too familiar with FFI but we have optimized both FFI and these extensions a lot more but extensions inherently are going to be more performance because it's not a foreign function. These ops, I guess if you really look at them foreign functions, since it's calling Rust functions out of JavaScript, there is some plumbing but these have been optimized so much over multiple years that I would say like sync functions are basically maybe not no cost but close to no cost. Sync functions have overhead due to...", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.8, "text": " So our next speaker is Leo, who is a developer at Dino, and he's going to talk about how", "tokens": [50364, 407, 527, 958, 8145, 307, 19344, 11, 567, 307, 257, 10754, 412, 413, 2982, 11, 293, 415, 311, 516, 281, 751, 466, 577, 51054], "temperature": 0.0, "avg_logprob": -0.4083849674946553, "compression_ratio": 1.423529411764706, "no_speech_prob": 0.30590492486953735}, {"id": 1, "seek": 0, "start": 13.8, "end": 17.92, "text": " to create a JavaScript runtime with Rust.", "tokens": [51054, 281, 1884, 257, 15778, 34474, 365, 34952, 13, 51260], "temperature": 0.0, "avg_logprob": -0.4083849674946553, "compression_ratio": 1.423529411764706, "no_speech_prob": 0.30590492486953735}, {"id": 2, "seek": 0, "start": 17.92, "end": 21.36, "text": " Big round of applause for Leo.", "tokens": [51260, 5429, 3098, 295, 9969, 337, 19344, 13, 51432], "temperature": 0.0, "avg_logprob": -0.4083849674946553, "compression_ratio": 1.423529411764706, "no_speech_prob": 0.30590492486953735}, {"id": 3, "seek": 0, "start": 21.36, "end": 25.92, "text": " Hello, I'm Leo.", "tokens": [51432, 2425, 11, 286, 478, 19344, 13, 51660], "temperature": 0.0, "avg_logprob": -0.4083849674946553, "compression_ratio": 1.423529411764706, "no_speech_prob": 0.30590492486953735}, {"id": 4, "seek": 0, "start": 25.92, "end": 29.52, "text": " As I was just introduced, I work at Dino, and I do various Rust.", "tokens": [51660, 1018, 286, 390, 445, 7268, 11, 286, 589, 412, 413, 2982, 11, 293, 286, 360, 3683, 34952, 13, 51840], "temperature": 0.0, "avg_logprob": -0.4083849674946553, "compression_ratio": 1.423529411764706, "no_speech_prob": 0.30590492486953735}, {"id": 5, "seek": 2952, "start": 29.52, "end": 34.12, "text": " At Dino we do a lot of Rust, and we create a JavaScript runtime, but we want other people", "tokens": [50364, 1711, 413, 2982, 321, 360, 257, 688, 295, 34952, 11, 293, 321, 1884, 257, 15778, 34474, 11, 457, 321, 528, 661, 561, 50594], "temperature": 0.0, "avg_logprob": -0.21925843728555217, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0074004908092319965}, {"id": 6, "seek": 2952, "start": 34.12, "end": 37.64, "text": " to be able to use it as well and make their own stuff with it.", "tokens": [50594, 281, 312, 1075, 281, 764, 309, 382, 731, 293, 652, 641, 1065, 1507, 365, 309, 13, 50770], "temperature": 0.0, "avg_logprob": -0.21925843728555217, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0074004908092319965}, {"id": 7, "seek": 2952, "start": 37.64, "end": 46.879999999999995, "text": " So we will explain internals and how you can make a small JavaScript runtime by yourself.", "tokens": [50770, 407, 321, 486, 2903, 2154, 1124, 293, 577, 291, 393, 652, 257, 1359, 15778, 34474, 538, 1803, 13, 51232], "temperature": 0.0, "avg_logprob": -0.21925843728555217, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0074004908092319965}, {"id": 8, "seek": 2952, "start": 46.879999999999995, "end": 48.760000000000005, "text": " But first, what does Dino?", "tokens": [51232, 583, 700, 11, 437, 775, 413, 2982, 30, 51326], "temperature": 0.0, "avg_logprob": -0.21925843728555217, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0074004908092319965}, {"id": 9, "seek": 2952, "start": 48.760000000000005, "end": 52.36, "text": " Many people still don't know, so better explain.", "tokens": [51326, 5126, 561, 920, 500, 380, 458, 11, 370, 1101, 2903, 13, 51506], "temperature": 0.0, "avg_logprob": -0.21925843728555217, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0074004908092319965}, {"id": 10, "seek": 2952, "start": 52.36, "end": 57.16, "text": " It's a JavaScript runtime similar to Node, maybe similar to Bonn if you've heard of Bonn,", "tokens": [51506, 467, 311, 257, 15778, 34474, 2531, 281, 38640, 11, 1310, 2531, 281, 7368, 77, 498, 291, 600, 2198, 295, 7368, 77, 11, 51746], "temperature": 0.0, "avg_logprob": -0.21925843728555217, "compression_ratio": 1.6585365853658536, "no_speech_prob": 0.0074004908092319965}, {"id": 11, "seek": 5716, "start": 57.16, "end": 63.279999999999994, "text": " it focuses on security, web compatibility, typescript out of the box support, and just", "tokens": [50364, 309, 16109, 322, 3825, 11, 3670, 34237, 11, 3467, 5944, 484, 295, 264, 2424, 1406, 11, 293, 445, 50670], "temperature": 0.0, "avg_logprob": -0.21839270190657856, "compression_ratio": 1.59765625, "no_speech_prob": 0.016440320760011673}, {"id": 12, "seek": 5716, "start": 63.279999999999994, "end": 68.24, "text": " a lot of built-in tools like a formator, lint, dock generation.", "tokens": [50670, 257, 688, 295, 3094, 12, 259, 3873, 411, 257, 1254, 1639, 11, 287, 686, 11, 20929, 5125, 13, 50918], "temperature": 0.0, "avg_logprob": -0.21839270190657856, "compression_ratio": 1.59765625, "no_speech_prob": 0.016440320760011673}, {"id": 13, "seek": 5716, "start": 68.24, "end": 73.36, "text": " We also have compiling for single executable, and a bunch of other tools.", "tokens": [50918, 492, 611, 362, 715, 4883, 337, 2167, 7568, 712, 11, 293, 257, 3840, 295, 661, 3873, 13, 51174], "temperature": 0.0, "avg_logprob": -0.21839270190657856, "compression_ratio": 1.59765625, "no_speech_prob": 0.016440320760011673}, {"id": 14, "seek": 5716, "start": 73.36, "end": 78.67999999999999, "text": " We are also not 100% fully Node compatible, but we're getting closer and closer by the", "tokens": [51174, 492, 366, 611, 406, 2319, 4, 4498, 38640, 18218, 11, 457, 321, 434, 1242, 4966, 293, 4966, 538, 264, 51440], "temperature": 0.0, "avg_logprob": -0.21839270190657856, "compression_ratio": 1.59765625, "no_speech_prob": 0.016440320760011673}, {"id": 15, "seek": 5716, "start": 78.67999999999999, "end": 81.64, "text": " day, and it's getting quite well.", "tokens": [51440, 786, 11, 293, 309, 311, 1242, 1596, 731, 13, 51588], "temperature": 0.0, "avg_logprob": -0.21839270190657856, "compression_ratio": 1.59765625, "no_speech_prob": 0.016440320760011673}, {"id": 16, "seek": 5716, "start": 81.64, "end": 85.6, "text": " And what matters to this presentation is the modular code base.", "tokens": [51588, 400, 437, 7001, 281, 341, 5860, 307, 264, 31111, 3089, 3096, 13, 51786], "temperature": 0.0, "avg_logprob": -0.21839270190657856, "compression_ratio": 1.59765625, "no_speech_prob": 0.016440320760011673}, {"id": 17, "seek": 8560, "start": 85.6, "end": 90.32, "text": " We have a lot of building blocks that can be used individually to build your own JavaScript", "tokens": [50364, 492, 362, 257, 688, 295, 2390, 8474, 300, 393, 312, 1143, 16652, 281, 1322, 428, 1065, 15778, 50600], "temperature": 0.0, "avg_logprob": -0.24165192104521252, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.008752522058784962}, {"id": 18, "seek": 8560, "start": 90.32, "end": 96.47999999999999, "text": " runtime just with these Rust crates or Rust libraries to make your own one.", "tokens": [50600, 34474, 445, 365, 613, 34952, 941, 1024, 420, 34952, 15148, 281, 652, 428, 1065, 472, 13, 50908], "temperature": 0.0, "avg_logprob": -0.24165192104521252, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.008752522058784962}, {"id": 19, "seek": 8560, "start": 96.47999999999999, "end": 102.6, "text": " Without too much effort, actually, we simplified this a lot.", "tokens": [50908, 9129, 886, 709, 4630, 11, 767, 11, 321, 26335, 341, 257, 688, 13, 51214], "temperature": 0.0, "avg_logprob": -0.24165192104521252, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.008752522058784962}, {"id": 20, "seek": 8560, "start": 102.6, "end": 108.0, "text": " Yes, so first off we need to explain the internal structure of Dino, which is everything is", "tokens": [51214, 1079, 11, 370, 700, 766, 321, 643, 281, 2903, 264, 6920, 3877, 295, 413, 2982, 11, 597, 307, 1203, 307, 51484], "temperature": 0.0, "avg_logprob": -0.24165192104521252, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.008752522058784962}, {"id": 21, "seek": 8560, "start": 108.0, "end": 109.0, "text": " built on Dino Core.", "tokens": [51484, 3094, 322, 413, 2982, 14798, 13, 51534], "temperature": 0.0, "avg_logprob": -0.24165192104521252, "compression_ratio": 1.5246636771300448, "no_speech_prob": 0.008752522058784962}, {"id": 22, "seek": 10900, "start": 109.0, "end": 118.68, "text": " Dino Core is a layer above V8, which is the JavaScript engine that powers all the Chrome", "tokens": [50364, 413, 2982, 14798, 307, 257, 4583, 3673, 691, 23, 11, 597, 307, 264, 15778, 2848, 300, 8674, 439, 264, 15327, 50848], "temperature": 0.0, "avg_logprob": -0.2836478364233877, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.026453904807567596}, {"id": 23, "seek": 10900, "start": 118.68, "end": 119.68, "text": " and Vowsers.", "tokens": [50848, 293, 691, 1509, 433, 13, 50898], "temperature": 0.0, "avg_logprob": -0.2836478364233877, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.026453904807567596}, {"id": 24, "seek": 10900, "start": 119.68, "end": 126.08, "text": " And Dino Core is just a small wrapper around it that simplifies a lot of the utilities around", "tokens": [50898, 400, 413, 2982, 14798, 307, 445, 257, 1359, 46906, 926, 309, 300, 6883, 11221, 257, 688, 295, 264, 30482, 926, 51218], "temperature": 0.0, "avg_logprob": -0.2836478364233877, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.026453904807567596}, {"id": 25, "seek": 10900, "start": 126.08, "end": 128.84, "text": " it and makes it a bit more friendly to use.", "tokens": [51218, 309, 293, 1669, 309, 257, 857, 544, 9208, 281, 764, 13, 51356], "temperature": 0.0, "avg_logprob": -0.2836478364233877, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.026453904807567596}, {"id": 26, "seek": 10900, "start": 128.84, "end": 132.76, "text": " It's not always easy to directly use V8 by itself.", "tokens": [51356, 467, 311, 406, 1009, 1858, 281, 3838, 764, 691, 23, 538, 2564, 13, 51552], "temperature": 0.0, "avg_logprob": -0.2836478364233877, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.026453904807567596}, {"id": 27, "seek": 10900, "start": 132.76, "end": 137.08, "text": " And on top of that, we have various other functionality that's built on top of that.", "tokens": [51552, 400, 322, 1192, 295, 300, 11, 321, 362, 3683, 661, 14980, 300, 311, 3094, 322, 1192, 295, 300, 13, 51768], "temperature": 0.0, "avg_logprob": -0.2836478364233877, "compression_ratio": 1.6025641025641026, "no_speech_prob": 0.026453904807567596}, {"id": 28, "seek": 13708, "start": 137.08, "end": 139.4, "text": " That's extensions.", "tokens": [50364, 663, 311, 25129, 13, 50480], "temperature": 0.0, "avg_logprob": -0.4211277063342108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.01673688367009163}, {"id": 29, "seek": 13708, "start": 139.4, "end": 148.56, "text": " Extensions are individual libraries that can be used by themselves to implement individual", "tokens": [50480, 9881, 8302, 366, 2609, 15148, 300, 393, 312, 1143, 538, 2969, 281, 4445, 2609, 50938], "temperature": 0.0, "avg_logprob": -0.4211277063342108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.01673688367009163}, {"id": 30, "seek": 13708, "start": 148.56, "end": 150.48000000000002, "text": " APIs and functionality.", "tokens": [50938, 21445, 293, 14980, 13, 51034], "temperature": 0.0, "avg_logprob": -0.4211277063342108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.01673688367009163}, {"id": 31, "seek": 13708, "start": 150.48000000000002, "end": 157.76000000000002, "text": " For example, a specific web API, like let's say fetch or a fetch of variations on individual", "tokens": [51034, 1171, 1365, 11, 257, 2685, 3670, 9362, 11, 411, 718, 311, 584, 23673, 420, 257, 23673, 295, 17840, 322, 2609, 51398], "temperature": 0.0, "avg_logprob": -0.4211277063342108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.01673688367009163}, {"id": 32, "seek": 13708, "start": 157.76000000000002, "end": 158.76000000000002, "text": " extension.", "tokens": [51398, 10320, 13, 51448], "temperature": 0.0, "avg_logprob": -0.4211277063342108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.01673688367009163}, {"id": 33, "seek": 13708, "start": 158.76000000000002, "end": 166.32000000000002, "text": " We have HTTP server, KV, root loads.", "tokens": [51448, 492, 362, 33283, 7154, 11, 591, 53, 11, 5593, 12668, 13, 51826], "temperature": 0.0, "avg_logprob": -0.4211277063342108, "compression_ratio": 1.4891304347826086, "no_speech_prob": 0.01673688367009163}, {"id": 34, "seek": 16632, "start": 167.32, "end": 171.48, "text": " Basically everything is individual building blocks that can be not copied and pasted,", "tokens": [50414, 8537, 1203, 307, 2609, 2390, 8474, 300, 393, 312, 406, 25365, 293, 1791, 292, 11, 50622], "temperature": 0.0, "avg_logprob": -0.25989663199092566, "compression_ratio": 1.5879828326180256, "no_speech_prob": 0.0015341403195634484}, {"id": 35, "seek": 16632, "start": 171.48, "end": 175.23999999999998, "text": " but imported and just used without too much hassle.", "tokens": [50622, 457, 25524, 293, 445, 1143, 1553, 886, 709, 39526, 13, 50810], "temperature": 0.0, "avg_logprob": -0.25989663199092566, "compression_ratio": 1.5879828326180256, "no_speech_prob": 0.0015341403195634484}, {"id": 36, "seek": 16632, "start": 175.23999999999998, "end": 179.68, "text": " Like usually to add an extension is like three lines of code and then suddenly you have a", "tokens": [50810, 1743, 2673, 281, 909, 364, 10320, 307, 411, 1045, 3876, 295, 3089, 293, 550, 5800, 291, 362, 257, 51032], "temperature": 0.0, "avg_logprob": -0.25989663199092566, "compression_ratio": 1.5879828326180256, "no_speech_prob": 0.0015341403195634484}, {"id": 37, "seek": 16632, "start": 179.68, "end": 182.56, "text": " massive amount of more APIs that you can just use.", "tokens": [51032, 5994, 2372, 295, 544, 21445, 300, 291, 393, 445, 764, 13, 51176], "temperature": 0.0, "avg_logprob": -0.25989663199092566, "compression_ratio": 1.5879828326180256, "no_speech_prob": 0.0015341403195634484}, {"id": 38, "seek": 16632, "start": 182.56, "end": 191.72, "text": " Then we have Dino Runtime, which is a library that is built on top of a bunch of extensions", "tokens": [51176, 1396, 321, 362, 413, 2982, 497, 2760, 1312, 11, 597, 307, 257, 6405, 300, 307, 3094, 322, 1192, 295, 257, 3840, 295, 25129, 51634], "temperature": 0.0, "avg_logprob": -0.25989663199092566, "compression_ratio": 1.5879828326180256, "no_speech_prob": 0.0015341403195634484}, {"id": 39, "seek": 19172, "start": 191.72, "end": 197.6, "text": " that adds a bit more capability to it, including permission system, which relates back to us", "tokens": [50364, 300, 10860, 257, 857, 544, 13759, 281, 309, 11, 3009, 11226, 1185, 11, 597, 16155, 646, 281, 505, 50658], "temperature": 0.0, "avg_logprob": -0.16485166549682617, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0006840525311417878}, {"id": 40, "seek": 19172, "start": 197.6, "end": 198.88, "text": " being a secure runtime.", "tokens": [50658, 885, 257, 7144, 34474, 13, 50722], "temperature": 0.0, "avg_logprob": -0.16485166549682617, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0006840525311417878}, {"id": 41, "seek": 19172, "start": 198.88, "end": 203.44, "text": " We have various permission-based functionality and flags.", "tokens": [50722, 492, 362, 3683, 11226, 12, 6032, 14980, 293, 23265, 13, 50950], "temperature": 0.0, "avg_logprob": -0.16485166549682617, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0006840525311417878}, {"id": 42, "seek": 19172, "start": 203.44, "end": 212.72, "text": " And also another additional feature would be the fact that we do some definitions of", "tokens": [50950, 400, 611, 1071, 4497, 4111, 576, 312, 264, 1186, 300, 321, 360, 512, 21988, 295, 51414], "temperature": 0.0, "avg_logprob": -0.16485166549682617, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0006840525311417878}, {"id": 43, "seek": 19172, "start": 212.72, "end": 217.64, "text": " various global scopes and the Dino namespace itself.", "tokens": [51414, 3683, 4338, 795, 30545, 293, 264, 413, 2982, 5288, 17940, 2564, 13, 51660], "temperature": 0.0, "avg_logprob": -0.16485166549682617, "compression_ratio": 1.5369458128078817, "no_speech_prob": 0.0006840525311417878}, {"id": 44, "seek": 21764, "start": 217.64, "end": 223.11999999999998, "text": " And also web workers are only implemented in the Dino Runtime grade because it's just", "tokens": [50364, 400, 611, 3670, 5600, 366, 787, 12270, 294, 264, 413, 2982, 497, 2760, 1312, 7204, 570, 309, 311, 445, 50638], "temperature": 0.0, "avg_logprob": -0.28920539855957034, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.001401911024004221}, {"id": 45, "seek": 21764, "start": 223.11999999999998, "end": 227.88, "text": " not possible to have it as an extension just because it needs to interrupt with the extensions", "tokens": [50638, 406, 1944, 281, 362, 309, 382, 364, 10320, 445, 570, 309, 2203, 281, 12729, 365, 264, 25129, 50876], "temperature": 0.0, "avg_logprob": -0.28920539855957034, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.001401911024004221}, {"id": 46, "seek": 21764, "start": 227.88, "end": 228.88, "text": " themselves.", "tokens": [50876, 2969, 13, 50926], "temperature": 0.0, "avg_logprob": -0.28920539855957034, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.001401911024004221}, {"id": 47, "seek": 21764, "start": 228.88, "end": 232.95999999999998, "text": " And then we have the CLI, which is what we compile and what people use.", "tokens": [50926, 400, 550, 321, 362, 264, 12855, 40, 11, 597, 307, 437, 321, 31413, 293, 437, 561, 764, 13, 51130], "temperature": 0.0, "avg_logprob": -0.28920539855957034, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.001401911024004221}, {"id": 48, "seek": 21764, "start": 232.95999999999998, "end": 234.76, "text": " And that's not great.", "tokens": [51130, 400, 300, 311, 406, 869, 13, 51220], "temperature": 0.0, "avg_logprob": -0.28920539855957034, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.001401911024004221}, {"id": 49, "seek": 21764, "start": 234.76, "end": 235.92, "text": " Yeah.", "tokens": [51220, 865, 13, 51278], "temperature": 0.0, "avg_logprob": -0.28920539855957034, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.001401911024004221}, {"id": 50, "seek": 21764, "start": 235.92, "end": 244.23999999999998, "text": " And CLI includes the TypeScript support, a bunch of other, like all the tools of the", "tokens": [51278, 400, 12855, 40, 5974, 264, 15576, 14237, 1406, 11, 257, 3840, 295, 661, 11, 411, 439, 264, 3873, 295, 264, 51694], "temperature": 0.0, "avg_logprob": -0.28920539855957034, "compression_ratio": 1.590717299578059, "no_speech_prob": 0.001401911024004221}, {"id": 51, "seek": 24424, "start": 244.24, "end": 247.92000000000002, "text": " CLI, like the lint, the formator, et cetera.", "tokens": [50364, 12855, 40, 11, 411, 264, 287, 686, 11, 264, 1254, 1639, 11, 1030, 11458, 13, 50548], "temperature": 0.0, "avg_logprob": -0.2755548825827978, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.018452420830726624}, {"id": 52, "seek": 24424, "start": 247.92000000000002, "end": 253.92000000000002, "text": " And also then we have the compile supplement, as I mentioned before, that has a compiler", "tokens": [50548, 400, 611, 550, 321, 362, 264, 31413, 15436, 11, 382, 286, 2835, 949, 11, 300, 575, 257, 31958, 50848], "temperature": 0.0, "avg_logprob": -0.2755548825827978, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.018452420830726624}, {"id": 53, "seek": 24424, "start": 253.92000000000002, "end": 260.76, "text": " single executable and testing infrastructure, benchmarking infrastructure, and dock generation.", "tokens": [50848, 2167, 7568, 712, 293, 4997, 6896, 11, 18927, 278, 6896, 11, 293, 20929, 5125, 13, 51190], "temperature": 0.0, "avg_logprob": -0.2755548825827978, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.018452420830726624}, {"id": 54, "seek": 24424, "start": 260.76, "end": 266.36, "text": " We have a fully static HML dock generator that you can just use and will always give", "tokens": [51190, 492, 362, 257, 4498, 13437, 389, 44, 43, 20929, 19265, 300, 291, 393, 445, 764, 293, 486, 1009, 976, 51470], "temperature": 0.0, "avg_logprob": -0.2755548825827978, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.018452420830726624}, {"id": 55, "seek": 24424, "start": 266.36, "end": 271.68, "text": " a relatively clean output.", "tokens": [51470, 257, 7226, 2541, 5598, 13, 51736], "temperature": 0.0, "avg_logprob": -0.2755548825827978, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.018452420830726624}, {"id": 56, "seek": 24424, "start": 271.68, "end": 273.52, "text": " But what will we build today?", "tokens": [51736, 583, 437, 486, 321, 1322, 965, 30, 51828], "temperature": 0.0, "avg_logprob": -0.2755548825827978, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.018452420830726624}, {"id": 57, "seek": 27352, "start": 274.15999999999997, "end": 278.47999999999996, "text": " We will build a JavaScript runtime that can compile TypeScript, has a functionality to", "tokens": [50396, 492, 486, 1322, 257, 15778, 34474, 300, 393, 31413, 15576, 14237, 11, 575, 257, 14980, 281, 50612], "temperature": 0.0, "avg_logprob": -0.29191930477435774, "compression_ratio": 1.515625, "no_speech_prob": 0.006162606179714203}, {"id": 58, "seek": 27352, "start": 278.47999999999996, "end": 284.71999999999997, "text": " make a HTTP request, a console.log, some files to migrations like read and write, and deleting", "tokens": [50612, 652, 257, 33283, 5308, 11, 257, 11076, 13, 4987, 11, 512, 7098, 281, 6186, 12154, 411, 1401, 293, 2464, 11, 293, 48946, 50924], "temperature": 0.0, "avg_logprob": -0.29191930477435774, "compression_ratio": 1.515625, "no_speech_prob": 0.006162606179714203}, {"id": 59, "seek": 27352, "start": 284.71999999999997, "end": 286.56, "text": " a file, I think, as well.", "tokens": [50924, 257, 3991, 11, 286, 519, 11, 382, 731, 13, 51016], "temperature": 0.0, "avg_logprob": -0.29191930477435774, "compression_ratio": 1.515625, "no_speech_prob": 0.006162606179714203}, {"id": 60, "seek": 27352, "start": 286.56, "end": 292.15999999999997, "text": " And it's all in less than 20, 30 lines of Rust and JavaScript.", "tokens": [51016, 400, 309, 311, 439, 294, 1570, 813, 945, 11, 2217, 3876, 295, 34952, 293, 15778, 13, 51296], "temperature": 0.0, "avg_logprob": -0.29191930477435774, "compression_ratio": 1.515625, "no_speech_prob": 0.006162606179714203}, {"id": 61, "seek": 27352, "start": 292.15999999999997, "end": 299.35999999999996, "text": " We will connect Rangias just because this will be a relatively technical topic, so there's", "tokens": [51296, 492, 486, 1745, 497, 656, 4609, 445, 570, 341, 486, 312, 257, 7226, 6191, 4829, 11, 370, 456, 311, 51656], "temperature": 0.0, "avg_logprob": -0.29191930477435774, "compression_ratio": 1.515625, "no_speech_prob": 0.006162606179714203}, {"id": 62, "seek": 27352, "start": 299.35999999999996, "end": 301.12, "text": " going to be a lot of code.", "tokens": [51656, 516, 281, 312, 257, 688, 295, 3089, 13, 51744], "temperature": 0.0, "avg_logprob": -0.29191930477435774, "compression_ratio": 1.515625, "no_speech_prob": 0.006162606179714203}, {"id": 63, "seek": 30112, "start": 301.12, "end": 304.36, "text": " So you want.", "tokens": [50364, 407, 291, 528, 13, 50526], "temperature": 0.0, "avg_logprob": -0.340762028327355, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.001312306965701282}, {"id": 64, "seek": 30112, "start": 304.36, "end": 307.48, "text": " First let's explain extensions more in depth.", "tokens": [50526, 2386, 718, 311, 2903, 25129, 544, 294, 7161, 13, 50682], "temperature": 0.0, "avg_logprob": -0.340762028327355, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.001312306965701282}, {"id": 65, "seek": 30112, "start": 307.48, "end": 312.2, "text": " Extensions have various fields and options that can be set.", "tokens": [50682, 9881, 8302, 362, 3683, 7909, 293, 3956, 300, 393, 312, 992, 13, 50918], "temperature": 0.0, "avg_logprob": -0.340762028327355, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.001312306965701282}, {"id": 66, "seek": 30112, "start": 312.2, "end": 317.6, "text": " Arps, which I will explain in a moment, basically the Clif Rust functions that can be used in", "tokens": [50918, 1587, 1878, 11, 597, 286, 486, 2903, 294, 257, 1623, 11, 1936, 264, 2033, 351, 34952, 6828, 300, 393, 312, 1143, 294, 51188], "temperature": 0.0, "avg_logprob": -0.340762028327355, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.001312306965701282}, {"id": 67, "seek": 30112, "start": 317.6, "end": 322.84000000000003, "text": " JavaScript, so you can just write a Rust function and that will then be callable out of JavaScript.", "tokens": [51188, 15778, 11, 370, 291, 393, 445, 2464, 257, 34952, 2445, 293, 300, 486, 550, 312, 818, 712, 484, 295, 15778, 13, 51450], "temperature": 0.0, "avg_logprob": -0.340762028327355, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.001312306965701282}, {"id": 68, "seek": 30112, "start": 322.84000000000003, "end": 330.84000000000003, "text": " ESM is the ES module, so you can use ES modules, import static imports, and dynamic imports.", "tokens": [51450, 12564, 44, 307, 264, 12564, 10088, 11, 370, 291, 393, 764, 12564, 16679, 11, 974, 13437, 41596, 11, 293, 8546, 41596, 13, 51850], "temperature": 0.0, "avg_logprob": -0.340762028327355, "compression_ratio": 1.7456896551724137, "no_speech_prob": 0.001312306965701282}, {"id": 69, "seek": 33084, "start": 331.79999999999995, "end": 333.56, "text": " Work as well, I believe.", "tokens": [50412, 6603, 382, 731, 11, 286, 1697, 13, 50500], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 70, "seek": 33084, "start": 333.56, "end": 335.35999999999996, "text": " Maybe not.", "tokens": [50500, 2704, 406, 13, 50590], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 71, "seek": 33084, "start": 335.35999999999996, "end": 338.76, "text": " JavaScript files are just scripts, so not ESM.", "tokens": [50590, 15778, 7098, 366, 445, 23294, 11, 370, 406, 12564, 44, 13, 50760], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 72, "seek": 33084, "start": 338.76, "end": 344.08, "text": " To include it, all works differently under the hood, so we have these two separate options.", "tokens": [50760, 1407, 4090, 309, 11, 439, 1985, 7614, 833, 264, 13376, 11, 370, 321, 362, 613, 732, 4994, 3956, 13, 51026], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 73, "seek": 33084, "start": 344.08, "end": 346.88, "text": " And then depth is declarations of other extensions.", "tokens": [51026, 400, 550, 7161, 307, 16694, 763, 295, 661, 25129, 13, 51166], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 74, "seek": 33084, "start": 346.88, "end": 348.59999999999997, "text": " This extension depends on.", "tokens": [51166, 639, 10320, 5946, 322, 13, 51252], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 75, "seek": 33084, "start": 348.59999999999997, "end": 351.67999999999995, "text": " This is not necessarily needed.", "tokens": [51252, 639, 307, 406, 4725, 2978, 13, 51406], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 76, "seek": 33084, "start": 351.67999999999995, "end": 354.55999999999995, "text": " It's more of a safety harness.", "tokens": [51406, 467, 311, 544, 295, 257, 4514, 19700, 13, 51550], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 77, "seek": 33084, "start": 354.55999999999995, "end": 359.91999999999996, "text": " Just it makes sure that you actually initiated the extensions in the right order so you don't", "tokens": [51550, 1449, 309, 1669, 988, 300, 291, 767, 28578, 264, 25129, 294, 264, 558, 1668, 370, 291, 500, 380, 51818], "temperature": 0.0, "avg_logprob": -0.22809117753929067, "compression_ratio": 1.5708812260536398, "no_speech_prob": 0.0016641924157738686}, {"id": 78, "seek": 35992, "start": 359.96000000000004, "end": 365.36, "text": " actually forget to initiate an extension that another extension relies on and then everything", "tokens": [50366, 767, 2870, 281, 31574, 364, 10320, 300, 1071, 10320, 30910, 322, 293, 550, 1203, 50636], "temperature": 0.0, "avg_logprob": -0.3389966570097825, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.002302023349329829}, {"id": 79, "seek": 35992, "start": 365.36, "end": 368.16, "text": " floats and then you don't know what's happening.", "tokens": [50636, 37878, 293, 550, 291, 500, 380, 458, 437, 311, 2737, 13, 50776], "temperature": 0.0, "avg_logprob": -0.3389966570097825, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.002302023349329829}, {"id": 80, "seek": 35992, "start": 368.16, "end": 371.68, "text": " And there's some other relevant, less relevant options like config.", "tokens": [50776, 400, 456, 311, 512, 661, 7340, 11, 1570, 7340, 3956, 411, 6662, 13, 50952], "temperature": 0.0, "avg_logprob": -0.3389966570097825, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.002302023349329829}, {"id": 81, "seek": 35992, "start": 371.68, "end": 376.20000000000005, "text": " JS, as I mentioned, above is ravelly use nowadays.", "tokens": [50952, 33063, 11, 382, 286, 2835, 11, 3673, 307, 367, 946, 13020, 764, 13434, 13, 51178], "temperature": 0.0, "avg_logprob": -0.3389966570097825, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.002302023349329829}, {"id": 82, "seek": 35992, "start": 376.20000000000005, "end": 379.88, "text": " And then lazy loaded ESM state, and I'm not going to go into depth.", "tokens": [51178, 400, 550, 14847, 13210, 12564, 44, 1785, 11, 293, 286, 478, 406, 516, 281, 352, 666, 7161, 13, 51362], "temperature": 0.0, "avg_logprob": -0.3389966570097825, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.002302023349329829}, {"id": 83, "seek": 35992, "start": 379.88, "end": 384.44, "text": " It's just config lets you configure some options to a specific extension.", "tokens": [51362, 467, 311, 445, 6662, 6653, 291, 22162, 512, 3956, 281, 257, 2685, 10320, 13, 51590], "temperature": 0.0, "avg_logprob": -0.3389966570097825, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.002302023349329829}, {"id": 84, "seek": 35992, "start": 384.44, "end": 389.52000000000004, "text": " If you want to have some special state, you can use the state option.", "tokens": [51590, 759, 291, 528, 281, 362, 512, 2121, 1785, 11, 291, 393, 764, 264, 1785, 3614, 13, 51844], "temperature": 0.0, "avg_logprob": -0.3389966570097825, "compression_ratio": 1.7326007326007327, "no_speech_prob": 0.002302023349329829}, {"id": 85, "seek": 38952, "start": 389.59999999999997, "end": 394.64, "text": " lazy loaded ESM lets you lazy load extension code, but that's nothing that we're going", "tokens": [50368, 14847, 13210, 12564, 44, 6653, 291, 14847, 3677, 10320, 3089, 11, 457, 300, 311, 1825, 300, 321, 434, 516, 50620], "temperature": 0.0, "avg_logprob": -0.3038231891134511, "compression_ratio": 1.703125, "no_speech_prob": 0.0010785323102027178}, {"id": 86, "seek": 38952, "start": 394.64, "end": 398.71999999999997, "text": " to go into depth for you to look at this in this talk.", "tokens": [50620, 281, 352, 666, 7161, 337, 291, 281, 574, 412, 341, 294, 341, 751, 13, 50824], "temperature": 0.0, "avg_logprob": -0.3038231891134511, "compression_ratio": 1.703125, "no_speech_prob": 0.0010785323102027178}, {"id": 87, "seek": 38952, "start": 398.71999999999997, "end": 399.91999999999996, "text": " And then ops.", "tokens": [50824, 400, 550, 44663, 13, 50884], "temperature": 0.0, "avg_logprob": -0.3038231891134511, "compression_ratio": 1.703125, "no_speech_prob": 0.0010785323102027178}, {"id": 88, "seek": 38952, "start": 399.91999999999996, "end": 405.91999999999996, "text": " So ops are these functions that you can declare in Rust that then are used in JavaScript.", "tokens": [50884, 407, 44663, 366, 613, 6828, 300, 291, 393, 19710, 294, 34952, 300, 550, 366, 1143, 294, 15778, 13, 51184], "temperature": 0.0, "avg_logprob": -0.3038231891134511, "compression_ratio": 1.703125, "no_speech_prob": 0.0010785323102027178}, {"id": 89, "seek": 38952, "start": 405.91999999999996, "end": 409.64, "text": " You can just call it like a normal function in JavaScript.", "tokens": [51184, 509, 393, 445, 818, 309, 411, 257, 2710, 2445, 294, 15778, 13, 51370], "temperature": 0.0, "avg_logprob": -0.3038231891134511, "compression_ratio": 1.703125, "no_speech_prob": 0.0010785323102027178}, {"id": 90, "seek": 38952, "start": 409.64, "end": 411.44, "text": " And it uses this up to macro.", "tokens": [51370, 400, 309, 4960, 341, 493, 281, 18887, 13, 51460], "temperature": 0.0, "avg_logprob": -0.3038231891134511, "compression_ratio": 1.703125, "no_speech_prob": 0.0010785323102027178}, {"id": 91, "seek": 38952, "start": 411.44, "end": 415.4, "text": " I hope that's not too problematic of an explanation that what a macro is.", "tokens": [51460, 286, 1454, 300, 311, 406, 886, 19011, 295, 364, 10835, 300, 437, 257, 18887, 307, 13, 51658], "temperature": 0.0, "avg_logprob": -0.3038231891134511, "compression_ratio": 1.703125, "no_speech_prob": 0.0010785323102027178}, {"id": 92, "seek": 38952, "start": 415.4, "end": 416.88, "text": " I hope everyone knows here.", "tokens": [51658, 286, 1454, 1518, 3255, 510, 13, 51732], "temperature": 0.0, "avg_logprob": -0.3038231891134511, "compression_ratio": 1.703125, "no_speech_prob": 0.0010785323102027178}, {"id": 93, "seek": 41688, "start": 417.24, "end": 419.24, "text": " Not your problem.", "tokens": [50382, 1726, 428, 1154, 13, 50482], "temperature": 0.0, "avg_logprob": -0.32321061283709057, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.001282291254028678}, {"id": 94, "seek": 41688, "start": 419.24, "end": 423.04, "text": " And then basically you define arguments and return types with these special", "tokens": [50482, 400, 550, 1936, 291, 6964, 12869, 293, 2736, 3467, 365, 613, 2121, 50672], "temperature": 0.0, "avg_logprob": -0.32321061283709057, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.001282291254028678}, {"id": 95, "seek": 41688, "start": 423.04, "end": 426.28, "text": " macro attributes like the string or this string.", "tokens": [50672, 18887, 17212, 411, 264, 6798, 420, 341, 6798, 13, 50834], "temperature": 0.0, "avg_logprob": -0.32321061283709057, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.001282291254028678}, {"id": 96, "seek": 41688, "start": 426.28, "end": 434.24, "text": " And basically it infers then the right type to map it from JavaScript to Rust.", "tokens": [50834, 400, 1936, 309, 1536, 433, 550, 264, 558, 2010, 281, 4471, 309, 490, 15778, 281, 34952, 13, 51232], "temperature": 0.0, "avg_logprob": -0.32321061283709057, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.001282291254028678}, {"id": 97, "seek": 41688, "start": 434.24, "end": 437.04, "text": " And vice versa, depending on the attributes.", "tokens": [51232, 400, 11964, 25650, 11, 5413, 322, 264, 17212, 13, 51372], "temperature": 0.0, "avg_logprob": -0.32321061283709057, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.001282291254028678}, {"id": 98, "seek": 41688, "start": 438.2, "end": 442.71999999999997, "text": " And yeah, you just write a normal Rust function like for example in that we just use", "tokens": [51430, 400, 1338, 11, 291, 445, 2464, 257, 2710, 34952, 2445, 411, 337, 1365, 294, 300, 321, 445, 764, 51656], "temperature": 0.0, "avg_logprob": -0.32321061283709057, "compression_ratio": 1.6325581395348838, "no_speech_prob": 0.001282291254028678}, {"id": 99, "seek": 44272, "start": 442.72, "end": 448.48, "text": " tokyo which is tokyo is the async executor that we use in Dino and most of the", "tokens": [50364, 281, 4133, 78, 597, 307, 281, 4133, 78, 307, 264, 382, 34015, 7568, 284, 300, 321, 764, 294, 413, 2982, 293, 881, 295, 264, 50652], "temperature": 0.0, "avg_logprob": -0.27551378522600445, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.003682551672682166}, {"id": 100, "seek": 44272, "start": 448.48, "end": 454.28000000000003, "text": " Rust ecosystem uses it and then we just read the string, we read the content of", "tokens": [50652, 34952, 11311, 4960, 309, 293, 550, 321, 445, 1401, 264, 6798, 11, 321, 1401, 264, 2701, 295, 50942], "temperature": 0.0, "avg_logprob": -0.27551378522600445, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.003682551672682166}, {"id": 101, "seek": 44272, "start": 454.28000000000003, "end": 458.08000000000004, "text": " a file of the path specified and we just return it.", "tokens": [50942, 257, 3991, 295, 264, 3100, 22206, 293, 321, 445, 2736, 309, 13, 51132], "temperature": 0.0, "avg_logprob": -0.27551378522600445, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.003682551672682166}, {"id": 102, "seek": 44272, "start": 458.08000000000004, "end": 463.68, "text": " And we return everything in ops as a result which is either an error or", "tokens": [51132, 400, 321, 2736, 1203, 294, 44663, 382, 257, 1874, 597, 307, 2139, 364, 6713, 420, 51412], "temperature": 0.0, "avg_logprob": -0.27551378522600445, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.003682551672682166}, {"id": 103, "seek": 44272, "start": 463.68, "end": 468.56, "text": " an acceptable value because you might want to throw an error for example and", "tokens": [51412, 364, 15513, 2158, 570, 291, 1062, 528, 281, 3507, 364, 6713, 337, 1365, 293, 51656], "temperature": 0.0, "avg_logprob": -0.27551378522600445, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.003682551672682166}, {"id": 104, "seek": 44272, "start": 468.56, "end": 470.48, "text": " that just handles it under the hood tool.", "tokens": [51656, 300, 445, 18722, 309, 833, 264, 13376, 2290, 13, 51752], "temperature": 0.0, "avg_logprob": -0.27551378522600445, "compression_ratio": 1.728448275862069, "no_speech_prob": 0.003682551672682166}, {"id": 105, "seek": 47048, "start": 470.52000000000004, "end": 472.6, "text": " So you just return an error.", "tokens": [50366, 407, 291, 445, 2736, 364, 6713, 13, 50470], "temperature": 0.0, "avg_logprob": -0.23917976080202588, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.00011044213169952855}, {"id": 106, "seek": 47048, "start": 472.6, "end": 475.92, "text": " There's other various types that can be specified in ops.", "tokens": [50470, 821, 311, 661, 3683, 3467, 300, 393, 312, 22206, 294, 44663, 13, 50636], "temperature": 0.0, "avg_logprob": -0.23917976080202588, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.00011044213169952855}, {"id": 107, "seek": 47048, "start": 475.92, "end": 482.36, "text": " We have some more ambiguous types like V8 value which is just a generic", "tokens": [50636, 492, 362, 512, 544, 39465, 3467, 411, 691, 23, 2158, 597, 307, 445, 257, 19577, 50958], "temperature": 0.0, "avg_logprob": -0.23917976080202588, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.00011044213169952855}, {"id": 108, "seek": 47048, "start": 482.36, "end": 484.04, "text": " JavaScript value.", "tokens": [50958, 15778, 2158, 13, 51042], "temperature": 0.0, "avg_logprob": -0.23917976080202588, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.00011044213169952855}, {"id": 109, "seek": 47048, "start": 484.04, "end": 486.56, "text": " You can pass that in, you can manually match and", "tokens": [51042, 509, 393, 1320, 300, 294, 11, 291, 393, 16945, 2995, 293, 51168], "temperature": 0.0, "avg_logprob": -0.23917976080202588, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.00011044213169952855}, {"id": 110, "seek": 47048, "start": 486.56, "end": 489.6, "text": " do some more specific handling if you need some weird", "tokens": [51168, 360, 512, 544, 2685, 13175, 498, 291, 643, 512, 3657, 51320], "temperature": 0.0, "avg_logprob": -0.23917976080202588, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.00011044213169952855}, {"id": 111, "seek": 47048, "start": 491.92, "end": 497.04, "text": " function that does based on different types, something which usually we try to avoid.", "tokens": [51436, 2445, 300, 775, 2361, 322, 819, 3467, 11, 746, 597, 2673, 321, 853, 281, 5042, 13, 51692], "temperature": 0.0, "avg_logprob": -0.23917976080202588, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.00011044213169952855}, {"id": 112, "seek": 47048, "start": 497.04, "end": 500.24, "text": " Rather have separate functions that do more specific things.", "tokens": [51692, 16571, 362, 4994, 6828, 300, 360, 544, 2685, 721, 13, 51852], "temperature": 0.0, "avg_logprob": -0.23917976080202588, "compression_ratio": 1.697211155378486, "no_speech_prob": 0.00011044213169952855}, {"id": 113, "seek": 50024, "start": 500.24, "end": 505.52, "text": " But then we also have Boolean, I supported numbers, strings,", "tokens": [50364, 583, 550, 321, 611, 362, 23351, 28499, 11, 286, 8104, 3547, 11, 13985, 11, 50628], "temperature": 0.0, "avg_logprob": -0.2818104028701782, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006324048736132681}, {"id": 114, "seek": 50024, "start": 505.52, "end": 508.44, "text": " as there, array buffers are supported as well.", "tokens": [50628, 382, 456, 11, 10225, 9204, 433, 366, 8104, 382, 731, 13, 50774], "temperature": 0.0, "avg_logprob": -0.2818104028701782, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006324048736132681}, {"id": 115, "seek": 50024, "start": 508.44, "end": 513.32, "text": " And yeah, you can return and accept array buffers and", "tokens": [50774, 400, 1338, 11, 291, 393, 2736, 293, 3241, 10225, 9204, 433, 293, 51018], "temperature": 0.0, "avg_logprob": -0.2818104028701782, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006324048736132681}, {"id": 116, "seek": 50024, "start": 513.32, "end": 516.0, "text": " it all handles under hood without issue.", "tokens": [51018, 309, 439, 18722, 833, 13376, 1553, 2734, 13, 51152], "temperature": 0.0, "avg_logprob": -0.2818104028701782, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006324048736132681}, {"id": 117, "seek": 50024, "start": 516.0, "end": 523.12, "text": " It's all been simplified as much as possible to make it as user friendly or", "tokens": [51152, 467, 311, 439, 668, 26335, 382, 709, 382, 1944, 281, 652, 309, 382, 4195, 9208, 420, 51508], "temperature": 0.0, "avg_logprob": -0.2818104028701782, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006324048736132681}, {"id": 118, "seek": 50024, "start": 523.12, "end": 524.96, "text": " developer friendly as possible.", "tokens": [51508, 10754, 9208, 382, 1944, 13, 51600], "temperature": 0.0, "avg_logprob": -0.2818104028701782, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006324048736132681}, {"id": 119, "seek": 50024, "start": 524.96, "end": 529.5600000000001, "text": " So it's really easy to just create your own functionality without too much", "tokens": [51600, 407, 309, 311, 534, 1858, 281, 445, 1884, 428, 1065, 14980, 1553, 886, 709, 51830], "temperature": 0.0, "avg_logprob": -0.2818104028701782, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0006324048736132681}, {"id": 120, "seek": 52956, "start": 529.56, "end": 530.68, "text": " difficulty.", "tokens": [50364, 10360, 13, 50420], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 121, "seek": 52956, "start": 530.68, "end": 533.1199999999999, "text": " There is also this async is defined up top.", "tokens": [50420, 821, 307, 611, 341, 382, 34015, 307, 7642, 493, 1192, 13, 50542], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 122, "seek": 52956, "start": 533.1199999999999, "end": 535.4799999999999, "text": " It makes sure that the function is actually async and", "tokens": [50542, 467, 1669, 988, 300, 264, 2445, 307, 767, 382, 34015, 293, 50660], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 123, "seek": 52956, "start": 535.4799999999999, "end": 541.4799999999999, "text": " that it does need to use async functionality when you define something as async.", "tokens": [50660, 300, 309, 775, 643, 281, 764, 382, 34015, 14980, 562, 291, 6964, 746, 382, 382, 34015, 13, 50960], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 124, "seek": 52956, "start": 541.4799999999999, "end": 545.92, "text": " And if you don't do anything async, it will usually then error out during", "tokens": [50960, 400, 498, 291, 500, 380, 360, 1340, 382, 34015, 11, 309, 486, 2673, 550, 6713, 484, 1830, 51182], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 125, "seek": 52956, "start": 545.92, "end": 546.9599999999999, "text": " compile time.", "tokens": [51182, 31413, 565, 13, 51234], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 126, "seek": 52956, "start": 546.9599999999999, "end": 552.4799999999999, "text": " So because async, it's just more complication under the hood that makes", "tokens": [51234, 407, 570, 382, 34015, 11, 309, 311, 445, 544, 1209, 8758, 833, 264, 13376, 300, 1669, 51510], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 127, "seek": 52956, "start": 552.4799999999999, "end": 554.2399999999999, "text": " it less performant to some degree.", "tokens": [51510, 309, 1570, 2042, 394, 281, 512, 4314, 13, 51598], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 128, "seek": 52956, "start": 556.3199999999999, "end": 558.7199999999999, "text": " Then here comes the code.", "tokens": [51702, 1396, 510, 1487, 264, 3089, 13, 51822], "temperature": 0.0, "avg_logprob": -0.2197239334518845, "compression_ratio": 1.7053941908713692, "no_speech_prob": 0.0023836479522287846}, {"id": 129, "seek": 55872, "start": 558.72, "end": 564.0400000000001, "text": " So for this example, we're gonna have to find a few ops or", "tokens": [50364, 407, 337, 341, 1365, 11, 321, 434, 799, 362, 281, 915, 257, 1326, 44663, 420, 50630], "temperature": 0.0, "avg_logprob": -0.34877739330329516, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0008066492155194283}, {"id": 130, "seek": 55872, "start": 564.0400000000001, "end": 567.2, "text": " cross function clarifications that make the code from JavaScript.", "tokens": [50630, 3278, 2445, 6093, 7833, 300, 652, 264, 3089, 490, 15778, 13, 50788], "temperature": 0.0, "avg_logprob": -0.34877739330329516, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0008066492155194283}, {"id": 131, "seek": 55872, "start": 567.2, "end": 573.48, "text": " And we have read file, write file, fetch, set time out, and remove file.", "tokens": [50788, 400, 321, 362, 1401, 3991, 11, 2464, 3991, 11, 23673, 11, 992, 565, 484, 11, 293, 4159, 3991, 13, 51102], "temperature": 0.0, "avg_logprob": -0.34877739330329516, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0008066492155194283}, {"id": 132, "seek": 55872, "start": 573.48, "end": 579.2, "text": " So in the read file, as we just saw, we read the file from the path given and", "tokens": [51102, 407, 294, 264, 1401, 3991, 11, 382, 321, 445, 1866, 11, 321, 1401, 264, 3991, 490, 264, 3100, 2212, 293, 51388], "temperature": 0.0, "avg_logprob": -0.34877739330329516, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0008066492155194283}, {"id": 133, "seek": 55872, "start": 579.2, "end": 582.6800000000001, "text": " return that with write file.", "tokens": [51388, 2736, 300, 365, 2464, 3991, 13, 51562], "temperature": 0.0, "avg_logprob": -0.34877739330329516, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0008066492155194283}, {"id": 134, "seek": 55872, "start": 582.6800000000001, "end": 587.88, "text": " We can get, we specify a path and the content both as a string and", "tokens": [51562, 492, 393, 483, 11, 321, 16500, 257, 3100, 293, 264, 2701, 1293, 382, 257, 6798, 293, 51822], "temperature": 0.0, "avg_logprob": -0.34877739330329516, "compression_ratio": 1.663677130044843, "no_speech_prob": 0.0008066492155194283}, {"id": 135, "seek": 58788, "start": 587.88, "end": 590.52, "text": " write that to file to disk.", "tokens": [50364, 2464, 300, 281, 3991, 281, 12355, 13, 50496], "temperature": 0.0, "avg_logprob": -0.3342042462579135, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.0015184018993750215}, {"id": 136, "seek": 58788, "start": 590.52, "end": 595.64, "text": " And we return nothing as per the empty type.", "tokens": [50496, 400, 321, 2736, 1825, 382, 680, 264, 6707, 2010, 13, 50752], "temperature": 0.0, "avg_logprob": -0.3342042462579135, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.0015184018993750215}, {"id": 137, "seek": 58788, "start": 595.64, "end": 600.16, "text": " And then the fetch one, which might be the most interesting out of all of these,", "tokens": [50752, 400, 550, 264, 23673, 472, 11, 597, 1062, 312, 264, 881, 1880, 484, 295, 439, 295, 613, 11, 50978], "temperature": 0.0, "avg_logprob": -0.3342042462579135, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.0015184018993750215}, {"id": 138, "seek": 58788, "start": 600.16, "end": 606.56, "text": " is basically uses request, which is a rust grade for doing HTTP requests.", "tokens": [50978, 307, 1936, 4960, 5308, 11, 597, 307, 257, 15259, 7204, 337, 884, 33283, 12475, 13, 51298], "temperature": 0.0, "avg_logprob": -0.3342042462579135, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.0015184018993750215}, {"id": 139, "seek": 58788, "start": 606.56, "end": 611.6, "text": " That I guess if we wanna compare to something in the JavaScript ecosystem", "tokens": [51298, 663, 286, 2041, 498, 321, 1948, 6794, 281, 746, 294, 264, 15778, 11311, 51550], "temperature": 0.0, "avg_logprob": -0.3342042462579135, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.0015184018993750215}, {"id": 140, "seek": 58788, "start": 611.6, "end": 616.84, "text": " would be similar to Axios, I think.", "tokens": [51550, 576, 312, 2531, 281, 20118, 2717, 11, 286, 519, 13, 51812], "temperature": 0.0, "avg_logprob": -0.3342042462579135, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.0015184018993750215}, {"id": 141, "seek": 61684, "start": 616.84, "end": 621.12, "text": " It's very similar, maybe not similar in API, but similar in functionality and", "tokens": [50364, 467, 311, 588, 2531, 11, 1310, 406, 2531, 294, 9362, 11, 457, 2531, 294, 14980, 293, 50578], "temperature": 0.0, "avg_logprob": -0.26156374748716965, "compression_ratio": 1.7004608294930876, "no_speech_prob": 9.294871415477246e-05}, {"id": 142, "seek": 61684, "start": 621.12, "end": 622.4, "text": " simplicity.", "tokens": [50578, 25632, 13, 50642], "temperature": 0.0, "avg_logprob": -0.26156374748716965, "compression_ratio": 1.7004608294930876, "no_speech_prob": 9.294871415477246e-05}, {"id": 143, "seek": 61684, "start": 622.4, "end": 626.08, "text": " And yeah, we may just do a fetch request and", "tokens": [50642, 400, 1338, 11, 321, 815, 445, 360, 257, 23673, 5308, 293, 50826], "temperature": 0.0, "avg_logprob": -0.26156374748716965, "compression_ratio": 1.7004608294930876, "no_speech_prob": 9.294871415477246e-05}, {"id": 144, "seek": 61684, "start": 626.08, "end": 630.88, "text": " get the content of the body via the text method and then just return the content.", "tokens": [50826, 483, 264, 2701, 295, 264, 1772, 5766, 264, 2487, 3170, 293, 550, 445, 2736, 264, 2701, 13, 51066], "temperature": 0.0, "avg_logprob": -0.26156374748716965, "compression_ratio": 1.7004608294930876, "no_speech_prob": 9.294871415477246e-05}, {"id": 145, "seek": 61684, "start": 630.88, "end": 635.84, "text": " And then we have a set time out, which just puts the current thread to sleep.", "tokens": [51066, 400, 550, 321, 362, 257, 992, 565, 484, 11, 597, 445, 8137, 264, 2190, 7207, 281, 2817, 13, 51314], "temperature": 0.0, "avg_logprob": -0.26156374748716965, "compression_ratio": 1.7004608294930876, "no_speech_prob": 9.294871415477246e-05}, {"id": 146, "seek": 61684, "start": 635.84, "end": 643.1600000000001, "text": " And for the specified duration, it's passed by the user via this function.", "tokens": [51314, 400, 337, 264, 22206, 16365, 11, 309, 311, 4678, 538, 264, 4195, 5766, 341, 2445, 13, 51680], "temperature": 0.0, "avg_logprob": -0.26156374748716965, "compression_ratio": 1.7004608294930876, "no_speech_prob": 9.294871415477246e-05}, {"id": 147, "seek": 64316, "start": 643.16, "end": 647.0799999999999, "text": " And remove file, just remove file, this is given in the path.", "tokens": [50364, 400, 4159, 3991, 11, 445, 4159, 3991, 11, 341, 307, 2212, 294, 264, 3100, 13, 50560], "temperature": 0.0, "avg_logprob": -0.3543317290558212, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.00026877745403908193}, {"id": 148, "seek": 64316, "start": 653.0, "end": 658.76, "text": " However, we use a whole system called v8snapshots and it's gonna be part,", "tokens": [50856, 2908, 11, 321, 764, 257, 1379, 1185, 1219, 371, 23, 18860, 2382, 27495, 293, 309, 311, 799, 312, 644, 11, 51144], "temperature": 0.0, "avg_logprob": -0.3543317290558212, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.00026877745403908193}, {"id": 149, "seek": 64316, "start": 658.76, "end": 661.36, "text": " I apologize because it's a very complex topic.", "tokens": [51144, 286, 12328, 570, 309, 311, 257, 588, 3997, 4829, 13, 51274], "temperature": 0.0, "avg_logprob": -0.3543317290558212, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.00026877745403908193}, {"id": 150, "seek": 64316, "start": 661.36, "end": 665.8, "text": " Not many people really know what it is or even how it works.", "tokens": [51274, 1726, 867, 561, 534, 458, 437, 309, 307, 420, 754, 577, 309, 1985, 13, 51496], "temperature": 0.0, "avg_logprob": -0.3543317290558212, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.00026877745403908193}, {"id": 151, "seek": 64316, "start": 665.8, "end": 670.92, "text": " But to very simplify, it's let's take the current state of the JavaScript", "tokens": [51496, 583, 281, 588, 20460, 11, 309, 311, 718, 311, 747, 264, 2190, 1785, 295, 264, 15778, 51752], "temperature": 0.0, "avg_logprob": -0.3543317290558212, "compression_ratio": 1.488262910798122, "no_speech_prob": 0.00026877745403908193}, {"id": 152, "seek": 67092, "start": 670.92, "end": 678.04, "text": " execution and you can store it in a file and resume it later.", "tokens": [50364, 15058, 293, 291, 393, 3531, 309, 294, 257, 3991, 293, 15358, 309, 1780, 13, 50720], "temperature": 0.0, "avg_logprob": -0.23392168680826822, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.0017224012408405542}, {"id": 153, "seek": 67092, "start": 678.04, "end": 680.9599999999999, "text": " That's the simplest way to explain it.", "tokens": [50720, 663, 311, 264, 22811, 636, 281, 2903, 309, 13, 50866], "temperature": 0.0, "avg_logprob": -0.23392168680826822, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.0017224012408405542}, {"id": 154, "seek": 67092, "start": 680.9599999999999, "end": 685.4799999999999, "text": " It's not exactly like that, but for simplicity's sake, let's stay to that.", "tokens": [50866, 467, 311, 406, 2293, 411, 300, 11, 457, 337, 25632, 311, 9717, 11, 718, 311, 1754, 281, 300, 13, 51092], "temperature": 0.0, "avg_logprob": -0.23392168680826822, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.0017224012408405542}, {"id": 155, "seek": 67092, "start": 687.12, "end": 693.3199999999999, "text": " So we need a build script because we first need to do some setup.", "tokens": [51174, 407, 321, 643, 257, 1322, 5755, 570, 321, 700, 643, 281, 360, 512, 8657, 13, 51484], "temperature": 0.0, "avg_logprob": -0.23392168680826822, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.0017224012408405542}, {"id": 156, "seek": 67092, "start": 693.3199999999999, "end": 695.52, "text": " So first we initialize our extension.", "tokens": [51484, 407, 700, 321, 5883, 1125, 527, 10320, 13, 51594], "temperature": 0.0, "avg_logprob": -0.23392168680826822, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.0017224012408405542}, {"id": 157, "seek": 67092, "start": 695.52, "end": 697.8, "text": " We call it Vangias as we said earlier.", "tokens": [51594, 492, 818, 309, 691, 656, 4609, 382, 321, 848, 3071, 13, 51708], "temperature": 0.0, "avg_logprob": -0.23392168680826822, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.0017224012408405542}, {"id": 158, "seek": 67092, "start": 697.8, "end": 700.8399999999999, "text": " And we have this ESM entry point, I did not mention that earlier.", "tokens": [51708, 400, 321, 362, 341, 12564, 44, 8729, 935, 11, 286, 630, 406, 2152, 300, 3071, 13, 51860], "temperature": 0.0, "avg_logprob": -0.23392168680826822, "compression_ratio": 1.5673469387755101, "no_speech_prob": 0.0017224012408405542}, {"id": 159, "seek": 70084, "start": 700.84, "end": 707.96, "text": " But basically, let's you specify the entry point that runtime will use when starting up.", "tokens": [50364, 583, 1936, 11, 718, 311, 291, 16500, 264, 8729, 935, 300, 34474, 486, 764, 562, 2891, 493, 13, 50720], "temperature": 0.0, "avg_logprob": -0.22433927324083117, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.0007744164322502911}, {"id": 160, "seek": 70084, "start": 707.96, "end": 709.88, "text": " And we specify our files.", "tokens": [50720, 400, 321, 16500, 527, 7098, 13, 50816], "temperature": 0.0, "avg_logprob": -0.22433927324083117, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.0007744164322502911}, {"id": 161, "seek": 70084, "start": 709.88, "end": 713.88, "text": " We have this ESM option and we have this JavaScript file,", "tokens": [50816, 492, 362, 341, 12564, 44, 3614, 293, 321, 362, 341, 15778, 3991, 11, 51016], "temperature": 0.0, "avg_logprob": -0.22433927324083117, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.0007744164322502911}, {"id": 162, "seek": 70084, "start": 713.88, "end": 716.0, "text": " which we'll see just in a second.", "tokens": [51016, 597, 321, 603, 536, 445, 294, 257, 1150, 13, 51122], "temperature": 0.0, "avg_logprob": -0.22433927324083117, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.0007744164322502911}, {"id": 163, "seek": 70084, "start": 716.0, "end": 720.0, "text": " And we have some path defined.", "tokens": [51122, 400, 321, 362, 512, 3100, 7642, 13, 51322], "temperature": 0.0, "avg_logprob": -0.22433927324083117, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.0007744164322502911}, {"id": 164, "seek": 70084, "start": 720.0, "end": 724.32, "text": " We want to get the path of the current build script location,", "tokens": [51322, 492, 528, 281, 483, 264, 3100, 295, 264, 2190, 1322, 5755, 4914, 11, 51538], "temperature": 0.0, "avg_logprob": -0.22433927324083117, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.0007744164322502911}, {"id": 165, "seek": 70084, "start": 724.32, "end": 727.5600000000001, "text": " some more specific Rust shenanigans.", "tokens": [51538, 512, 544, 2685, 34952, 402, 45008, 49088, 13, 51700], "temperature": 0.0, "avg_logprob": -0.22433927324083117, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.0007744164322502911}, {"id": 166, "seek": 72756, "start": 727.56, "end": 731.3199999999999, "text": " But we get this path and we join it with this Vangias snapshot.", "tokens": [50364, 583, 321, 483, 341, 3100, 293, 321, 3917, 309, 365, 341, 691, 656, 4609, 30163, 13, 50552], "temperature": 0.0, "avg_logprob": -0.19119501980868253, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.0005517255631275475}, {"id": 167, "seek": 72756, "start": 731.3199999999999, "end": 736.56, "text": " It could be any path, just we need a common location where this build script", "tokens": [50552, 467, 727, 312, 604, 3100, 11, 445, 321, 643, 257, 2689, 4914, 689, 341, 1322, 5755, 50814], "temperature": 0.0, "avg_logprob": -0.19119501980868253, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.0005517255631275475}, {"id": 168, "seek": 72756, "start": 736.56, "end": 740.68, "text": " outputs something that we can then retrieve during runtime.", "tokens": [50814, 23930, 746, 300, 321, 393, 550, 30254, 1830, 34474, 13, 51020], "temperature": 0.0, "avg_logprob": -0.19119501980868253, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.0005517255631275475}, {"id": 169, "seek": 72756, "start": 740.68, "end": 746.5999999999999, "text": " Now comes the fun part, which is this create snapshot utility function that we have made", "tokens": [51020, 823, 1487, 264, 1019, 644, 11, 597, 307, 341, 1884, 30163, 14877, 2445, 300, 321, 362, 1027, 51316], "temperature": 0.0, "avg_logprob": -0.19119501980868253, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.0005517255631275475}, {"id": 170, "seek": 72756, "start": 746.5999999999999, "end": 750.0799999999999, "text": " that does all the snapshotting logic under the hood,", "tokens": [51316, 300, 775, 439, 264, 30163, 783, 9952, 833, 264, 13376, 11, 51490], "temperature": 0.0, "avg_logprob": -0.19119501980868253, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.0005517255631275475}, {"id": 171, "seek": 72756, "start": 750.0799999999999, "end": 752.16, "text": " tries to simplify it as much as possible.", "tokens": [51490, 9898, 281, 20460, 309, 382, 709, 382, 1944, 13, 51594], "temperature": 0.0, "avg_logprob": -0.19119501980868253, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.0005517255631275475}, {"id": 172, "seek": 72756, "start": 752.16, "end": 757.04, "text": " And you have a few options, most of them can be completely ignored.", "tokens": [51594, 400, 291, 362, 257, 1326, 3956, 11, 881, 295, 552, 393, 312, 2584, 19735, 13, 51838], "temperature": 0.0, "avg_logprob": -0.19119501980868253, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.0005517255631275475}, {"id": 173, "seek": 75704, "start": 757.04, "end": 762.0799999999999, "text": " The only two important, three important ones are the manifest there.", "tokens": [50364, 440, 787, 732, 1021, 11, 1045, 1021, 2306, 366, 264, 10067, 456, 13, 50616], "temperature": 0.0, "avg_logprob": -0.28984395573648175, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0011671261163428426}, {"id": 174, "seek": 75704, "start": 762.0799999999999, "end": 763.5999999999999, "text": " We cannot infer this automatically.", "tokens": [50616, 492, 2644, 13596, 341, 6772, 13, 50692], "temperature": 0.0, "avg_logprob": -0.28984395573648175, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0011671261163428426}, {"id": 175, "seek": 75704, "start": 763.5999999999999, "end": 767.4399999999999, "text": " So we have users to always set this value to be this and", "tokens": [50692, 407, 321, 362, 5022, 281, 1009, 992, 341, 2158, 281, 312, 341, 293, 50884], "temperature": 0.0, "avg_logprob": -0.28984395573648175, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0011671261163428426}, {"id": 176, "seek": 75704, "start": 767.4399999999999, "end": 769.5999999999999, "text": " micro call to the target manifest directory.", "tokens": [50884, 4532, 818, 281, 264, 3779, 10067, 21120, 13, 50992], "temperature": 0.0, "avg_logprob": -0.28984395573648175, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0011671261163428426}, {"id": 177, "seek": 75704, "start": 771.4399999999999, "end": 776.24, "text": " The snapshot path is the variable we defined earlier for the where the output of the snapshot will be.", "tokens": [51084, 440, 30163, 3100, 307, 264, 7006, 321, 7642, 3071, 337, 264, 689, 264, 5598, 295, 264, 30163, 486, 312, 13, 51324], "temperature": 0.0, "avg_logprob": -0.28984395573648175, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0011671261163428426}, {"id": 178, "seek": 75704, "start": 776.24, "end": 782.52, "text": " And then we have extensions, which is the extension we created earlier above.", "tokens": [51324, 400, 550, 321, 362, 25129, 11, 597, 307, 264, 10320, 321, 2942, 3071, 3673, 13, 51638], "temperature": 0.0, "avg_logprob": -0.28984395573648175, "compression_ratio": 1.7432432432432432, "no_speech_prob": 0.0011671261163428426}, {"id": 179, "seek": 78252, "start": 782.52, "end": 787.1999999999999, "text": " And we just want to initiate the JavaScript code.", "tokens": [50364, 400, 321, 445, 528, 281, 31574, 264, 15778, 3089, 13, 50598], "temperature": 0.0, "avg_logprob": -0.2396511564067766, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.0014987176982685924}, {"id": 180, "seek": 78252, "start": 787.1999999999999, "end": 791.6, "text": " We don't have just initiate ESM file, it's initiate ops and ESM.", "tokens": [50598, 492, 500, 380, 362, 445, 31574, 12564, 44, 3991, 11, 309, 311, 31574, 44663, 293, 12564, 44, 13, 50818], "temperature": 0.0, "avg_logprob": -0.2396511564067766, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.0014987176982685924}, {"id": 181, "seek": 78252, "start": 791.6, "end": 795.24, "text": " Here we have not defined ops because this is just doing the build script.", "tokens": [50818, 1692, 321, 362, 406, 7642, 44663, 570, 341, 307, 445, 884, 264, 1322, 5755, 13, 51000], "temperature": 0.0, "avg_logprob": -0.2396511564067766, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.0014987176982685924}, {"id": 182, "seek": 78252, "start": 795.24, "end": 798.0, "text": " We do not care about ops at this point in time.", "tokens": [51000, 492, 360, 406, 1127, 466, 44663, 412, 341, 935, 294, 565, 13, 51138], "temperature": 0.0, "avg_logprob": -0.2396511564067766, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.0014987176982685924}, {"id": 183, "seek": 78252, "start": 799.12, "end": 800.8, "text": " They will come into play in a moment.", "tokens": [51194, 814, 486, 808, 666, 862, 294, 257, 1623, 13, 51278], "temperature": 0.0, "avg_logprob": -0.2396511564067766, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.0014987176982685924}, {"id": 184, "seek": 78252, "start": 803.3199999999999, "end": 806.12, "text": " First, we also want to support TypeScript.", "tokens": [51404, 2386, 11, 321, 611, 528, 281, 1406, 15576, 14237, 13, 51544], "temperature": 0.0, "avg_logprob": -0.2396511564067766, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.0014987176982685924}, {"id": 185, "seek": 78252, "start": 807.64, "end": 810.48, "text": " And this is just a small snippet of the code.", "tokens": [51620, 400, 341, 307, 445, 257, 1359, 35623, 302, 295, 264, 3089, 13, 51762], "temperature": 0.0, "avg_logprob": -0.2396511564067766, "compression_ratio": 1.6425339366515836, "no_speech_prob": 0.0014987176982685924}, {"id": 186, "seek": 81048, "start": 810.6, "end": 815.8000000000001, "text": " There's some more boilerplate that is not necessarily interesting.", "tokens": [50370, 821, 311, 512, 544, 39228, 37008, 300, 307, 406, 4725, 1880, 13, 50630], "temperature": 0.0, "avg_logprob": -0.32010317423257484, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.0005944030708633363}, {"id": 187, "seek": 81048, "start": 815.8000000000001, "end": 818.84, "text": " It's just getting the path of the file and", "tokens": [50630, 467, 311, 445, 1242, 264, 3100, 295, 264, 3991, 293, 50782], "temperature": 0.0, "avg_logprob": -0.32010317423257484, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.0005944030708633363}, {"id": 188, "seek": 81048, "start": 821.28, "end": 826.44, "text": " the media type of the current file just to be sure that we actually transpile JavaScript and", "tokens": [50904, 264, 3021, 2010, 295, 264, 2190, 3991, 445, 281, 312, 988, 300, 321, 767, 7132, 794, 15778, 293, 51162], "temperature": 0.0, "avg_logprob": -0.32010317423257484, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.0005944030708633363}, {"id": 189, "seek": 81048, "start": 826.44, "end": 830.08, "text": " TypeScript to JavaScript and that file types are all correct.", "tokens": [51162, 15576, 14237, 281, 15778, 293, 300, 3991, 3467, 366, 439, 3006, 13, 51344], "temperature": 0.0, "avg_logprob": -0.32010317423257484, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.0005944030708633363}, {"id": 190, "seek": 81048, "start": 830.08, "end": 837.28, "text": " But for that we use this AST create, which is basically a wrapper around SWC.", "tokens": [51344, 583, 337, 300, 321, 764, 341, 7469, 51, 1884, 11, 597, 307, 1936, 257, 46906, 926, 20346, 34, 13, 51704], "temperature": 0.0, "avg_logprob": -0.32010317423257484, "compression_ratio": 1.6056338028169015, "no_speech_prob": 0.0005944030708633363}, {"id": 191, "seek": 83728, "start": 837.28, "end": 845.0799999999999, "text": " SWC is a Rust create a library that basically implements TypeScripting as per TypeScripts", "tokens": [50364, 20346, 34, 307, 257, 34952, 1884, 257, 6405, 300, 1936, 704, 17988, 15576, 14237, 278, 382, 680, 15576, 14237, 82, 50754], "temperature": 0.0, "avg_logprob": -0.4150584572239926, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.001358920824714005}, {"id": 192, "seek": 83728, "start": 845.0799999999999, "end": 849.88, "text": " wants and needs since there's no real specification because TypeScript.", "tokens": [50754, 2738, 293, 2203, 1670, 456, 311, 572, 957, 31256, 570, 15576, 14237, 13, 50994], "temperature": 0.0, "avg_logprob": -0.4150584572239926, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.001358920824714005}, {"id": 193, "seek": 83728, "start": 851.68, "end": 856.64, "text": " But it takes some options, the specifier, which has created a path or", "tokens": [51084, 583, 309, 2516, 512, 3956, 11, 264, 1608, 9902, 11, 597, 575, 2942, 257, 3100, 420, 51332], "temperature": 0.0, "avg_logprob": -0.4150584572239926, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.001358920824714005}, {"id": 194, "seek": 83728, "start": 856.64, "end": 861.48, "text": " the name of the file that we want to transpile, the source code.", "tokens": [51332, 264, 1315, 295, 264, 3991, 300, 321, 528, 281, 7132, 794, 11, 264, 4009, 3089, 13, 51574], "temperature": 0.0, "avg_logprob": -0.4150584572239926, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.001358920824714005}, {"id": 195, "seek": 83728, "start": 861.48, "end": 866.9599999999999, "text": " So the text info, we just create this structure from the code that we got earlier from", "tokens": [51574, 407, 264, 2487, 13614, 11, 321, 445, 1884, 341, 3877, 490, 264, 3089, 300, 321, 658, 3071, 490, 51848], "temperature": 0.0, "avg_logprob": -0.4150584572239926, "compression_ratio": 1.658008658008658, "no_speech_prob": 0.001358920824714005}, {"id": 196, "seek": 86696, "start": 866.96, "end": 872.0400000000001, "text": " this V2 string at the top from the path that was specified by this function.", "tokens": [50364, 341, 691, 17, 6798, 412, 264, 1192, 490, 264, 3100, 300, 390, 22206, 538, 341, 2445, 13, 50618], "temperature": 0.0, "avg_logprob": -0.2844431793805465, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.0008938010432757437}, {"id": 197, "seek": 86696, "start": 872.0400000000001, "end": 877.4000000000001, "text": " And some boilerplate, this media type that I just talked about.", "tokens": [50618, 400, 512, 39228, 37008, 11, 341, 3021, 2010, 300, 286, 445, 2825, 466, 13, 50886], "temperature": 0.0, "avg_logprob": -0.2844431793805465, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.0008938010432757437}, {"id": 198, "seek": 86696, "start": 877.4000000000001, "end": 883.48, "text": " And then we just call Transfile and magically we get the Transfile TypeScript as a JavaScript.", "tokens": [50886, 400, 550, 321, 445, 818, 6531, 69, 794, 293, 39763, 321, 483, 264, 6531, 69, 794, 15576, 14237, 382, 257, 15778, 13, 51190], "temperature": 0.0, "avg_logprob": -0.2844431793805465, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.0008938010432757437}, {"id": 199, "seek": 86696, "start": 883.48, "end": 884.9200000000001, "text": " And we can just use it.", "tokens": [51190, 400, 321, 393, 445, 764, 309, 13, 51262], "temperature": 0.0, "avg_logprob": -0.2844431793805465, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.0008938010432757437}, {"id": 200, "seek": 86696, "start": 884.9200000000001, "end": 889.0, "text": " And then we have to code and we just create a structure of module source,", "tokens": [51262, 400, 550, 321, 362, 281, 3089, 293, 321, 445, 1884, 257, 3877, 295, 10088, 4009, 11, 51466], "temperature": 0.0, "avg_logprob": -0.2844431793805465, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.0008938010432757437}, {"id": 201, "seek": 86696, "start": 889.0, "end": 893.64, "text": " which is how it internally is represented and we just return it.", "tokens": [51466, 597, 307, 577, 309, 19501, 307, 10379, 293, 321, 445, 2736, 309, 13, 51698], "temperature": 0.0, "avg_logprob": -0.2844431793805465, "compression_ratio": 1.6936170212765957, "no_speech_prob": 0.0008938010432757437}, {"id": 202, "seek": 89364, "start": 893.64, "end": 901.12, "text": " And this is all in trade, I guess the best way if you're familiar with TypeScript is", "tokens": [50364, 400, 341, 307, 439, 294, 4923, 11, 286, 2041, 264, 1151, 636, 498, 291, 434, 4963, 365, 15576, 14237, 307, 50738], "temperature": 0.0, "avg_logprob": -0.2912202507558495, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0006656635086983442}, {"id": 203, "seek": 89364, "start": 901.12, "end": 907.12, "text": " like an interface and we implement this trade and it has a few methods but", "tokens": [50738, 411, 364, 9226, 293, 321, 4445, 341, 4923, 293, 309, 575, 257, 1326, 7150, 457, 51038], "temperature": 0.0, "avg_logprob": -0.2912202507558495, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0006656635086983442}, {"id": 204, "seek": 89364, "start": 907.12, "end": 910.52, "text": " only one method is really necessary and it is a load method,", "tokens": [51038, 787, 472, 3170, 307, 534, 4818, 293, 309, 307, 257, 3677, 3170, 11, 51208], "temperature": 0.0, "avg_logprob": -0.2912202507558495, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0006656635086983442}, {"id": 205, "seek": 89364, "start": 910.52, "end": 913.6, "text": " which is what this is it.", "tokens": [51208, 597, 307, 437, 341, 307, 309, 13, 51362], "temperature": 0.0, "avg_logprob": -0.2912202507558495, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0006656635086983442}, {"id": 206, "seek": 89364, "start": 913.6, "end": 916.68, "text": " There's a few more lines both above but again, that's just for", "tokens": [51362, 821, 311, 257, 1326, 544, 3876, 1293, 3673, 457, 797, 11, 300, 311, 445, 337, 51516], "temperature": 0.0, "avg_logprob": -0.2912202507558495, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0006656635086983442}, {"id": 207, "seek": 89364, "start": 916.68, "end": 923.12, "text": " media type and some smaller error handling that is not really out of too much", "tokens": [51516, 3021, 2010, 293, 512, 4356, 6713, 13175, 300, 307, 406, 534, 484, 295, 886, 709, 51838], "temperature": 0.0, "avg_logprob": -0.2912202507558495, "compression_ratio": 1.6260504201680672, "no_speech_prob": 0.0006656635086983442}, {"id": 208, "seek": 92312, "start": 923.12, "end": 927.6, "text": " interest for this scenario or for the simplicity.", "tokens": [50364, 1179, 337, 341, 9005, 420, 337, 264, 25632, 13, 50588], "temperature": 0.0, "avg_logprob": -0.3170996679775957, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.007200982421636581}, {"id": 209, "seek": 92312, "start": 927.6, "end": 939.24, "text": " Then we have our, this is in the actual main script where we get the snapshot that we created", "tokens": [50588, 1396, 321, 362, 527, 11, 341, 307, 294, 264, 3539, 2135, 5755, 689, 321, 483, 264, 30163, 300, 321, 2942, 51170], "temperature": 0.0, "avg_logprob": -0.3170996679775957, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.007200982421636581}, {"id": 210, "seek": 92312, "start": 939.24, "end": 943.68, "text": " earlier during the build script and include it into the binary itself.", "tokens": [51170, 3071, 1830, 264, 1322, 5755, 293, 4090, 309, 666, 264, 17434, 2564, 13, 51392], "temperature": 0.0, "avg_logprob": -0.3170996679775957, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.007200982421636581}, {"id": 211, "seek": 92312, "start": 943.68, "end": 950.04, "text": " And then we have access to this runtime snapshot and we will use it later on.", "tokens": [51392, 400, 550, 321, 362, 2105, 281, 341, 34474, 30163, 293, 321, 486, 764, 309, 1780, 322, 13, 51710], "temperature": 0.0, "avg_logprob": -0.3170996679775957, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.007200982421636581}, {"id": 212, "seek": 95004, "start": 950.04, "end": 955.7199999999999, "text": " And then we have the extensions, we initiate again, but this time just with the ops that", "tokens": [50364, 400, 550, 321, 362, 264, 25129, 11, 321, 31574, 797, 11, 457, 341, 565, 445, 365, 264, 44663, 300, 50648], "temperature": 0.0, "avg_logprob": -0.3960183696982301, "compression_ratio": 1.6, "no_speech_prob": 0.005349521525204182}, {"id": 213, "seek": 95004, "start": 955.7199999999999, "end": 957.4, "text": " we defined earlier.", "tokens": [50648, 321, 7642, 3071, 13, 50732], "temperature": 0.0, "avg_logprob": -0.3960183696982301, "compression_ratio": 1.6, "no_speech_prob": 0.005349521525204182}, {"id": 214, "seek": 95004, "start": 957.4, "end": 961.76, "text": " And this time we don't need the yes modules because we defined them earlier and", "tokens": [50732, 400, 341, 565, 321, 500, 380, 643, 264, 2086, 16679, 570, 321, 7642, 552, 3071, 293, 50950], "temperature": 0.0, "avg_logprob": -0.3960183696982301, "compression_ratio": 1.6, "no_speech_prob": 0.005349521525204182}, {"id": 215, "seek": 95004, "start": 961.76, "end": 966.1999999999999, "text": " snapshot attempt so they're part of the runtime snapshot from above.", "tokens": [50950, 30163, 5217, 370, 436, 434, 644, 295, 264, 34474, 30163, 490, 3673, 13, 51172], "temperature": 0.0, "avg_logprob": -0.3960183696982301, "compression_ratio": 1.6, "no_speech_prob": 0.005349521525204182}, {"id": 216, "seek": 95004, "start": 966.1999999999999, "end": 973.16, "text": " And it seems I forgot a slide.", "tokens": [51172, 400, 309, 2544, 286, 5298, 257, 4137, 13, 51520], "temperature": 0.0, "avg_logprob": -0.3960183696982301, "compression_ratio": 1.6, "no_speech_prob": 0.005349521525204182}, {"id": 217, "seek": 95004, "start": 973.16, "end": 979.88, "text": " I can quickly hopefully fix it.", "tokens": [51520, 286, 393, 2661, 4696, 3191, 309, 13, 51856], "temperature": 0.0, "avg_logprob": -0.3960183696982301, "compression_ratio": 1.6, "no_speech_prob": 0.005349521525204182}, {"id": 218, "seek": 97988, "start": 979.88, "end": 984.92, "text": " This is not well prepared and I apologize.", "tokens": [50364, 639, 307, 406, 731, 4927, 293, 286, 12328, 13, 50616], "temperature": 0.0, "avg_logprob": -0.4400125503540039, "compression_ratio": 1.2232142857142858, "no_speech_prob": 0.00549701415002346}, {"id": 219, "seek": 97988, "start": 984.92, "end": 1002.36, "text": " I hope this, let's do it the easy way.", "tokens": [50616, 286, 1454, 341, 11, 718, 311, 360, 309, 264, 1858, 636, 13, 51488], "temperature": 0.0, "avg_logprob": -0.4400125503540039, "compression_ratio": 1.2232142857142858, "no_speech_prob": 0.00549701415002346}, {"id": 220, "seek": 97988, "start": 1002.36, "end": 1006.36, "text": " This is the JavaScript file with the internals defined.", "tokens": [51488, 639, 307, 264, 15778, 3991, 365, 264, 2154, 1124, 7642, 13, 51688], "temperature": 0.0, "avg_logprob": -0.4400125503540039, "compression_ratio": 1.2232142857142858, "no_speech_prob": 0.00549701415002346}, {"id": 221, "seek": 100636, "start": 1006.36, "end": 1011.92, "text": " And basically we input the inner core as a JavaScript as a JavaScript module that you", "tokens": [50364, 400, 1936, 321, 4846, 264, 7284, 4965, 382, 257, 15778, 382, 257, 15778, 10088, 300, 291, 50642], "temperature": 0.0, "avg_logprob": -0.3267791054465554, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.12546885013580322}, {"id": 222, "seek": 100636, "start": 1011.92, "end": 1012.92, "text": " can import.", "tokens": [50642, 393, 974, 13, 50692], "temperature": 0.0, "avg_logprob": -0.3267791054465554, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.12546885013580322}, {"id": 223, "seek": 100636, "start": 1012.92, "end": 1017.96, "text": " If you use the inner core that has some utility some functionalities again just like the Rust", "tokens": [50692, 759, 291, 764, 264, 7284, 4965, 300, 575, 512, 14877, 512, 11745, 1088, 797, 445, 411, 264, 34952, 50944], "temperature": 0.0, "avg_logprob": -0.3267791054465554, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.12546885013580322}, {"id": 224, "seek": 100636, "start": 1017.96, "end": 1018.96, "text": " version.", "tokens": [50944, 3037, 13, 50994], "temperature": 0.0, "avg_logprob": -0.3267791054465554, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.12546885013580322}, {"id": 225, "seek": 100636, "start": 1018.96, "end": 1023.4, "text": " Just this is for interropping between the Rust and the JavaScript.", "tokens": [50994, 1449, 341, 307, 337, 728, 340, 3759, 1296, 264, 34952, 293, 264, 15778, 13, 51216], "temperature": 0.0, "avg_logprob": -0.3267791054465554, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.12546885013580322}, {"id": 226, "seek": 100636, "start": 1023.4, "end": 1027.84, "text": " And we have the structure to score into ops.", "tokens": [51216, 400, 321, 362, 264, 3877, 281, 6175, 666, 44663, 13, 51438], "temperature": 0.0, "avg_logprob": -0.3267791054465554, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.12546885013580322}, {"id": 227, "seek": 100636, "start": 1027.84, "end": 1033.64, "text": " Ops again is, this is an object that can be used to access the functions that we defined", "tokens": [51438, 422, 1878, 797, 307, 11, 341, 307, 364, 2657, 300, 393, 312, 1143, 281, 2105, 264, 6828, 300, 321, 7642, 51728], "temperature": 0.0, "avg_logprob": -0.3267791054465554, "compression_ratio": 1.7510917030567685, "no_speech_prob": 0.12546885013580322}, {"id": 228, "seek": 103364, "start": 1033.64, "end": 1038.68, "text": " earlier as we see over here that I hope it's big enough actually.", "tokens": [50364, 3071, 382, 321, 536, 670, 510, 300, 286, 1454, 309, 311, 955, 1547, 767, 13, 50616], "temperature": 0.0, "avg_logprob": -0.45917472286500793, "compression_ratio": 1.4464285714285714, "no_speech_prob": 0.14039787650108337}, {"id": 229, "seek": 103364, "start": 1038.68, "end": 1042.16, "text": " Can the people in the back read it?", "tokens": [50616, 1664, 264, 561, 294, 264, 646, 1401, 309, 30, 50790], "temperature": 0.0, "avg_logprob": -0.45917472286500793, "compression_ratio": 1.4464285714285714, "no_speech_prob": 0.14039787650108337}, {"id": 230, "seek": 103364, "start": 1042.16, "end": 1043.16, "text": " Wonderful.", "tokens": [50790, 22768, 13, 50840], "temperature": 0.0, "avg_logprob": -0.45917472286500793, "compression_ratio": 1.4464285714285714, "no_speech_prob": 0.14039787650108337}, {"id": 231, "seek": 103364, "start": 1043.16, "end": 1046.16, "text": " Is this big enough?", "tokens": [50840, 1119, 341, 955, 1547, 30, 50990], "temperature": 0.0, "avg_logprob": -0.45917472286500793, "compression_ratio": 1.4464285714285714, "no_speech_prob": 0.14039787650108337}, {"id": 232, "seek": 103364, "start": 1046.16, "end": 1058.76, "text": " Wait, then let's, okay.", "tokens": [50990, 3802, 11, 550, 718, 311, 11, 1392, 13, 51620], "temperature": 0.0, "avg_logprob": -0.45917472286500793, "compression_ratio": 1.4464285714285714, "no_speech_prob": 0.14039787650108337}, {"id": 233, "seek": 103364, "start": 1058.76, "end": 1063.3200000000002, "text": " Just to quickly reiterate we have this input of the inner core and instruction to this", "tokens": [51620, 1449, 281, 2661, 33528, 321, 362, 341, 4846, 295, 264, 7284, 4965, 293, 10951, 281, 341, 51848], "temperature": 0.0, "avg_logprob": -0.45917472286500793, "compression_ratio": 1.4464285714285714, "no_speech_prob": 0.14039787650108337}, {"id": 234, "seek": 106332, "start": 1063.32, "end": 1068.04, "text": " ops object which is just down below here used to call this op read file which is the", "tokens": [50364, 44663, 2657, 597, 307, 445, 760, 2507, 510, 1143, 281, 818, 341, 999, 1401, 3991, 597, 307, 264, 50600], "temperature": 0.0, "avg_logprob": -0.2060715470995222, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.014024845324456692}, {"id": 235, "seek": 106332, "start": 1068.04, "end": 1071.9199999999998, "text": " one we defined in the Rust file earlier.", "tokens": [50600, 472, 321, 7642, 294, 264, 34952, 3991, 3071, 13, 50794], "temperature": 0.0, "avg_logprob": -0.2060715470995222, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.014024845324456692}, {"id": 236, "seek": 106332, "start": 1071.9199999999998, "end": 1076.48, "text": " And all under the hood it converts the values to the correct type matching in the Rust.", "tokens": [50794, 400, 439, 833, 264, 13376, 309, 38874, 264, 4190, 281, 264, 3006, 2010, 14324, 294, 264, 34952, 13, 51022], "temperature": 0.0, "avg_logprob": -0.2060715470995222, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.014024845324456692}, {"id": 237, "seek": 106332, "start": 1076.48, "end": 1082.08, "text": " And then whatever it's returned from this op read file which will be a file content we", "tokens": [51022, 400, 550, 2035, 309, 311, 8752, 490, 341, 999, 1401, 3991, 597, 486, 312, 257, 3991, 2701, 321, 51302], "temperature": 0.0, "avg_logprob": -0.2060715470995222, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.014024845324456692}, {"id": 238, "seek": 106332, "start": 1082.08, "end": 1086.84, "text": " then just return it from this function that we defined in this object constant.", "tokens": [51302, 550, 445, 2736, 309, 490, 341, 2445, 300, 321, 7642, 294, 341, 2657, 5754, 13, 51540], "temperature": 0.0, "avg_logprob": -0.2060715470995222, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.014024845324456692}, {"id": 239, "seek": 106332, "start": 1086.84, "end": 1092.76, "text": " Over here above we also have the console definition which is, uses code of print which is a utility", "tokens": [51540, 4886, 510, 3673, 321, 611, 362, 264, 11076, 7123, 597, 307, 11, 4960, 3089, 295, 4482, 597, 307, 257, 14877, 51836], "temperature": 0.0, "avg_logprob": -0.2060715470995222, "compression_ratio": 1.9047619047619047, "no_speech_prob": 0.014024845324456692}, {"id": 240, "seek": 109276, "start": 1092.76, "end": 1097.56, "text": " defined in the inner core again, a few more helpful tools.", "tokens": [50364, 7642, 294, 264, 7284, 4965, 797, 11, 257, 1326, 544, 4961, 3873, 13, 50604], "temperature": 0.0, "avg_logprob": -0.3008410930633545, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.02657865546643734}, {"id": 241, "seek": 109276, "start": 1097.56, "end": 1103.52, "text": " And we just get all the arguments and just use this arts to match it but we then define", "tokens": [50604, 400, 321, 445, 483, 439, 264, 12869, 293, 445, 764, 341, 8609, 281, 2995, 309, 457, 321, 550, 6964, 50902], "temperature": 0.0, "avg_logprob": -0.3008410930633545, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.02657865546643734}, {"id": 242, "seek": 109276, "start": 1103.52, "end": 1107.76, "text": " the part which will be just stringifies and joins all the values.", "tokens": [50902, 264, 644, 597, 486, 312, 445, 6798, 11221, 293, 24397, 439, 264, 4190, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3008410930633545, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.02657865546643734}, {"id": 243, "seek": 109276, "start": 1107.76, "end": 1112.8799999999999, "text": " We don't need anything too complex for this example and then just prints it to the console.", "tokens": [51114, 492, 500, 380, 643, 1340, 886, 3997, 337, 341, 1365, 293, 550, 445, 22305, 309, 281, 264, 11076, 13, 51370], "temperature": 0.0, "avg_logprob": -0.3008410930633545, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.02657865546643734}, {"id": 244, "seek": 109276, "start": 1112.8799999999999, "end": 1117.92, "text": " And then we have the same forever which just sets at the end the true value which is for", "tokens": [51370, 400, 550, 321, 362, 264, 912, 5680, 597, 445, 6352, 412, 264, 917, 264, 2074, 2158, 597, 307, 337, 51622], "temperature": 0.0, "avg_logprob": -0.3008410930633545, "compression_ratio": 1.7236842105263157, "no_speech_prob": 0.02657865546643734}, {"id": 245, "seek": 111792, "start": 1117.92, "end": 1125.24, "text": " if it's an error or not.", "tokens": [50364, 498, 309, 311, 364, 6713, 420, 406, 13, 50730], "temperature": 0.0, "avg_logprob": -0.3501038887131382, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.01350220013409853}, {"id": 246, "seek": 111792, "start": 1125.24, "end": 1130.5600000000002, "text": " So above it's false and then below it's true.", "tokens": [50730, 407, 3673, 309, 311, 7908, 293, 550, 2507, 309, 311, 2074, 13, 50996], "temperature": 0.0, "avg_logprob": -0.3501038887131382, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.01350220013409853}, {"id": 247, "seek": 111792, "start": 1130.5600000000002, "end": 1135.76, "text": " Then further down we have the other function definitions which are read file, write file,", "tokens": [50996, 1396, 3052, 760, 321, 362, 264, 661, 2445, 21988, 597, 366, 1401, 3991, 11, 2464, 3991, 11, 51256], "temperature": 0.0, "avg_logprob": -0.3501038887131382, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.01350220013409853}, {"id": 248, "seek": 111792, "start": 1135.76, "end": 1142.48, "text": " move file, fetch, maybe just all wrapper functions around these ops.", "tokens": [51256, 1286, 3991, 11, 23673, 11, 1310, 445, 439, 46906, 6828, 926, 613, 44663, 13, 51592], "temperature": 0.0, "avg_logprob": -0.3501038887131382, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.01350220013409853}, {"id": 249, "seek": 111792, "start": 1142.48, "end": 1144.0, "text": " Technically this async was not needed.", "tokens": [51592, 42494, 341, 382, 34015, 390, 406, 2978, 13, 51668], "temperature": 0.0, "avg_logprob": -0.3501038887131382, "compression_ratio": 1.5402298850574712, "no_speech_prob": 0.01350220013409853}, {"id": 250, "seek": 114400, "start": 1144.0, "end": 1149.92, "text": " So one of the side part whatever and then we have the set timeout which calls the set", "tokens": [50364, 407, 472, 295, 264, 1252, 644, 2035, 293, 550, 321, 362, 264, 992, 565, 346, 597, 5498, 264, 992, 50660], "temperature": 0.0, "avg_logprob": -0.3873368166805653, "compression_ratio": 1.778894472361809, "no_speech_prob": 0.0472673624753952}, {"id": 251, "seek": 114400, "start": 1149.92, "end": 1152.0, "text": " timeout and then calls the callback.", "tokens": [50660, 565, 346, 293, 550, 5498, 264, 818, 3207, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3873368166805653, "compression_ratio": 1.778894472361809, "no_speech_prob": 0.0472673624753952}, {"id": 252, "seek": 114400, "start": 1152.0, "end": 1156.56, "text": " So it's relatively identical to the web API that we know.", "tokens": [50764, 407, 309, 311, 7226, 14800, 281, 264, 3670, 9362, 300, 321, 458, 13, 50992], "temperature": 0.0, "avg_logprob": -0.3873368166805653, "compression_ratio": 1.778894472361809, "no_speech_prob": 0.0472673624753952}, {"id": 253, "seek": 114400, "start": 1156.56, "end": 1161.84, "text": " And it's assigned this to global disk which is the global namespace and also we assign", "tokens": [50992, 400, 309, 311, 13279, 341, 281, 4338, 12355, 597, 307, 264, 4338, 5288, 17940, 293, 611, 321, 6269, 51256], "temperature": 0.0, "avg_logprob": -0.3873368166805653, "compression_ratio": 1.778894472361809, "no_speech_prob": 0.0472673624753952}, {"id": 254, "seek": 114400, "start": 1161.84, "end": 1167.0, "text": " to the global disk also the console and we define a runjs function object which is the", "tokens": [51256, 281, 264, 4338, 12355, 611, 264, 11076, 293, 321, 6964, 257, 1190, 25530, 2445, 2657, 597, 307, 264, 51514], "temperature": 0.0, "avg_logprob": -0.3873368166805653, "compression_ratio": 1.778894472361809, "no_speech_prob": 0.0472673624753952}, {"id": 255, "seek": 116700, "start": 1167.0, "end": 1175.6, "text": " object we defined above with all these extra small functionalities.", "tokens": [50364, 2657, 321, 7642, 3673, 365, 439, 613, 2857, 1359, 11745, 1088, 13, 50794], "temperature": 0.0, "avg_logprob": -0.22713017463684082, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.14468319714069366}, {"id": 256, "seek": 116700, "start": 1175.6, "end": 1186.92, "text": " To go back to here, we defined this extension again and the runtime snapshot and then we", "tokens": [50794, 1407, 352, 646, 281, 510, 11, 321, 7642, 341, 10320, 797, 293, 264, 34474, 30163, 293, 550, 321, 51360], "temperature": 0.0, "avg_logprob": -0.22713017463684082, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.14468319714069366}, {"id": 257, "seek": 116700, "start": 1186.92, "end": 1191.68, "text": " have basically all the building blocks ready now we just need to actually use it.", "tokens": [51360, 362, 1936, 439, 264, 2390, 8474, 1919, 586, 321, 445, 643, 281, 767, 764, 309, 13, 51598], "temperature": 0.0, "avg_logprob": -0.22713017463684082, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.14468319714069366}, {"id": 258, "seek": 116700, "start": 1191.68, "end": 1193.44, "text": " And for that we need the runtime.", "tokens": [51598, 400, 337, 300, 321, 643, 264, 34474, 13, 51686], "temperature": 0.0, "avg_logprob": -0.22713017463684082, "compression_ratio": 1.5542857142857143, "no_speech_prob": 0.14468319714069366}, {"id": 259, "seek": 119344, "start": 1193.44, "end": 1201.44, "text": " This is again a bit more complex but basically we define a function that takes a file path.", "tokens": [50364, 639, 307, 797, 257, 857, 544, 3997, 457, 1936, 321, 6964, 257, 2445, 300, 2516, 257, 3991, 3100, 13, 50764], "temperature": 0.0, "avg_logprob": -0.26220460779526655, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.04582017660140991}, {"id": 260, "seek": 119344, "start": 1201.44, "end": 1206.64, "text": " The file path is the JavaScript file we want to execute with the user's code that they", "tokens": [50764, 440, 3991, 3100, 307, 264, 15778, 3991, 321, 528, 281, 14483, 365, 264, 4195, 311, 3089, 300, 436, 51024], "temperature": 0.0, "avg_logprob": -0.26220460779526655, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.04582017660140991}, {"id": 261, "seek": 119344, "start": 1206.64, "end": 1209.4, "text": " pass.", "tokens": [51024, 1320, 13, 51162], "temperature": 0.0, "avg_logprob": -0.26220460779526655, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.04582017660140991}, {"id": 262, "seek": 119344, "start": 1209.4, "end": 1214.92, "text": " We have some utilities in Unicode that resolves the path against the current directory and", "tokens": [51162, 492, 362, 512, 30482, 294, 1156, 299, 1429, 300, 7923, 977, 264, 3100, 1970, 264, 2190, 21120, 293, 51438], "temperature": 0.0, "avg_logprob": -0.26220460779526655, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.04582017660140991}, {"id": 263, "seek": 119344, "start": 1214.92, "end": 1221.0, "text": " gives you a model specifier out because that's what internally it's used.", "tokens": [51438, 2709, 291, 257, 2316, 1608, 9902, 484, 570, 300, 311, 437, 19501, 309, 311, 1143, 13, 51742], "temperature": 0.0, "avg_logprob": -0.26220460779526655, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.04582017660140991}, {"id": 264, "seek": 122100, "start": 1221.08, "end": 1227.6, "text": " The module loader is what is used to resolve a module and any imports in it from this user", "tokens": [50368, 440, 10088, 3677, 260, 307, 437, 307, 1143, 281, 14151, 257, 10088, 293, 604, 41596, 294, 309, 490, 341, 4195, 50694], "temperature": 0.0, "avg_logprob": -0.26817605806433636, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.04265277087688446}, {"id": 265, "seek": 122100, "start": 1227.6, "end": 1230.52, "text": " specified file and we have our TS module loader.", "tokens": [50694, 22206, 3991, 293, 321, 362, 527, 37645, 10088, 3677, 260, 13, 50840], "temperature": 0.0, "avg_logprob": -0.26817605806433636, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.04265277087688446}, {"id": 266, "seek": 122100, "start": 1230.52, "end": 1237.8, "text": " This is the TypeScript transpiler that we built earlier that is just the structure that", "tokens": [50840, 639, 307, 264, 15576, 14237, 7132, 5441, 300, 321, 3094, 3071, 300, 307, 445, 264, 3877, 300, 51204], "temperature": 0.0, "avg_logprob": -0.26817605806433636, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.04265277087688446}, {"id": 267, "seek": 122100, "start": 1237.8, "end": 1242.52, "text": " we defined but I did not show that because we've boilerplate.", "tokens": [51204, 321, 7642, 457, 286, 630, 406, 855, 300, 570, 321, 600, 39228, 37008, 13, 51440], "temperature": 0.0, "avg_logprob": -0.26817605806433636, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.04265277087688446}, {"id": 268, "seek": 122100, "start": 1242.52, "end": 1247.12, "text": " Startup snapshot is the snapshot that we got from earlier from the setup and then the extension", "tokens": [51440, 6481, 1010, 30163, 307, 264, 30163, 300, 321, 658, 490, 3071, 490, 264, 8657, 293, 550, 264, 10320, 51670], "temperature": 0.0, "avg_logprob": -0.26817605806433636, "compression_ratio": 1.742081447963801, "no_speech_prob": 0.04265277087688446}, {"id": 269, "seek": 124712, "start": 1247.1999999999998, "end": 1255.32, "text": " we need to initiate the ops that are defined so that the Dino Core and the JavaScript file", "tokens": [50368, 321, 643, 281, 31574, 264, 44663, 300, 366, 7642, 370, 300, 264, 413, 2982, 14798, 293, 264, 15778, 3991, 50774], "temperature": 0.0, "avg_logprob": -0.2251300811767578, "compression_ratio": 1.715, "no_speech_prob": 0.0065494682639837265}, {"id": 270, "seek": 124712, "start": 1255.32, "end": 1259.1999999999998, "text": " that we designed can actually access these functions and load them up.", "tokens": [50774, 300, 321, 4761, 393, 767, 2105, 613, 6828, 293, 3677, 552, 493, 13, 50968], "temperature": 0.0, "avg_logprob": -0.2251300811767578, "compression_ratio": 1.715, "no_speech_prob": 0.0065494682639837265}, {"id": 271, "seek": 124712, "start": 1259.1999999999998, "end": 1264.2399999999998, "text": " And we don't care about any of the other options and then we have the actual usage which is", "tokens": [50968, 400, 321, 500, 380, 1127, 466, 604, 295, 264, 661, 3956, 293, 550, 321, 362, 264, 3539, 14924, 597, 307, 51220], "temperature": 0.0, "avg_logprob": -0.2251300811767578, "compression_ratio": 1.715, "no_speech_prob": 0.0065494682639837265}, {"id": 272, "seek": 124712, "start": 1264.2399999999998, "end": 1266.36, "text": " this load main module.", "tokens": [51220, 341, 3677, 2135, 10088, 13, 51326], "temperature": 0.0, "avg_logprob": -0.2251300811767578, "compression_ratio": 1.715, "no_speech_prob": 0.0065494682639837265}, {"id": 273, "seek": 124712, "start": 1266.36, "end": 1270.4399999999998, "text": " The load main module, it loads the main module of the entry point.", "tokens": [51326, 440, 3677, 2135, 10088, 11, 309, 12668, 264, 2135, 10088, 295, 264, 8729, 935, 13, 51530], "temperature": 0.0, "avg_logprob": -0.2251300811767578, "compression_ratio": 1.715, "no_speech_prob": 0.0065494682639837265}, {"id": 274, "seek": 127044, "start": 1270.44, "end": 1277.44, "text": " Let's say if you run Dino run test.ts it will, that would be the main module and then it", "tokens": [50364, 961, 311, 584, 498, 291, 1190, 413, 2982, 1190, 1500, 13, 1373, 309, 486, 11, 300, 576, 312, 264, 2135, 10088, 293, 550, 309, 50714], "temperature": 0.0, "avg_logprob": -0.292376975218455, "compression_ratio": 1.6491228070175439, "no_speech_prob": 0.08656282722949982}, {"id": 275, "seek": 127044, "start": 1277.44, "end": 1282.92, "text": " will work through the entire module graph which is basically all the imports one by one on", "tokens": [50714, 486, 589, 807, 264, 2302, 10088, 4295, 597, 307, 1936, 439, 264, 41596, 472, 538, 472, 322, 50988], "temperature": 0.0, "avg_logprob": -0.292376975218455, "compression_ratio": 1.6491228070175439, "no_speech_prob": 0.08656282722949982}, {"id": 276, "seek": 127044, "start": 1282.92, "end": 1285.04, "text": " the recursively.", "tokens": [50988, 264, 20560, 3413, 13, 51094], "temperature": 0.0, "avg_logprob": -0.292376975218455, "compression_ratio": 1.6491228070175439, "no_speech_prob": 0.08656282722949982}, {"id": 277, "seek": 127044, "start": 1285.04, "end": 1291.68, "text": " And this is async, a lot of this operation async because ES modules are inherently async", "tokens": [51094, 400, 341, 307, 382, 34015, 11, 257, 688, 295, 341, 6916, 382, 34015, 570, 12564, 16679, 366, 27993, 382, 34015, 51426], "temperature": 0.0, "avg_logprob": -0.292376975218455, "compression_ratio": 1.6491228070175439, "no_speech_prob": 0.08656282722949982}, {"id": 278, "seek": 127044, "start": 1291.68, "end": 1300.24, "text": " and yeah we evaluate the module so we basically run it and get if there was any output and", "tokens": [51426, 293, 1338, 321, 13059, 264, 10088, 370, 321, 1936, 1190, 309, 293, 483, 498, 456, 390, 604, 5598, 293, 51854], "temperature": 0.0, "avg_logprob": -0.292376975218455, "compression_ratio": 1.6491228070175439, "no_speech_prob": 0.08656282722949982}, {"id": 279, "seek": 130024, "start": 1300.24, "end": 1308.04, "text": " then we want to run the event loop because there's going to be multiple pulls let's say", "tokens": [50364, 550, 321, 528, 281, 1190, 264, 2280, 6367, 570, 456, 311, 516, 281, 312, 3866, 16982, 718, 311, 584, 50754], "temperature": 0.0, "avg_logprob": -0.278005173627068, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.002115634735673666}, {"id": 280, "seek": 130024, "start": 1308.04, "end": 1313.0, "text": " with async functions you've got to do multiple async calls perhaps or just stuff.", "tokens": [50754, 365, 382, 34015, 6828, 291, 600, 658, 281, 360, 3866, 382, 34015, 5498, 4317, 420, 445, 1507, 13, 51002], "temperature": 0.0, "avg_logprob": -0.278005173627068, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.002115634735673666}, {"id": 281, "seek": 130024, "start": 1313.0, "end": 1317.1200000000001, "text": " We have some options that are not of interest.", "tokens": [51002, 492, 362, 512, 3956, 300, 366, 406, 295, 1179, 13, 51208], "temperature": 0.0, "avg_logprob": -0.278005173627068, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.002115634735673666}, {"id": 282, "seek": 130024, "start": 1317.1200000000001, "end": 1327.84, "text": " We have Dino Core includes inspector, utilities and pump via message loop which is again not", "tokens": [51208, 492, 362, 413, 2982, 14798, 5974, 34564, 11, 30482, 293, 5889, 5766, 3636, 6367, 597, 307, 797, 406, 51744], "temperature": 0.0, "avg_logprob": -0.278005173627068, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.002115634735673666}, {"id": 283, "seek": 130024, "start": 1327.84, "end": 1330.08, "text": " much interest at some point or another.", "tokens": [51744, 709, 1179, 412, 512, 935, 420, 1071, 13, 51856], "temperature": 0.0, "avg_logprob": -0.278005173627068, "compression_ratio": 1.6009174311926606, "no_speech_prob": 0.002115634735673666}, {"id": 284, "seek": 133008, "start": 1330.08, "end": 1337.76, "text": " We just await this event loop running and return value of this result that we were calling", "tokens": [50364, 492, 445, 19670, 341, 2280, 6367, 2614, 293, 2736, 2158, 295, 341, 1874, 300, 321, 645, 5141, 50748], "temperature": 0.0, "avg_logprob": -0.22181927880575492, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.0026524404529482126}, {"id": 285, "seek": 133008, "start": 1337.76, "end": 1346.08, "text": " earlier so we just then get out of this run.js function we get the result which hopefully", "tokens": [50748, 3071, 370, 321, 445, 550, 483, 484, 295, 341, 1190, 13, 25530, 2445, 321, 483, 264, 1874, 597, 4696, 51164], "temperature": 0.0, "avg_logprob": -0.22181927880575492, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.0026524404529482126}, {"id": 286, "seek": 133008, "start": 1346.08, "end": 1350.9199999999998, "text": " will be okay and there's not going to be any errors but there might always be some error.", "tokens": [51164, 486, 312, 1392, 293, 456, 311, 406, 516, 281, 312, 604, 13603, 457, 456, 1062, 1009, 312, 512, 6713, 13, 51406], "temperature": 0.0, "avg_logprob": -0.22181927880575492, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.0026524404529482126}, {"id": 287, "seek": 133008, "start": 1350.9199999999998, "end": 1357.28, "text": " A user might have to find incorrect variable names or have invalid syntax or something", "tokens": [51406, 316, 4195, 1062, 362, 281, 915, 18424, 7006, 5288, 420, 362, 34702, 28431, 420, 746, 51724], "temperature": 0.0, "avg_logprob": -0.22181927880575492, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.0026524404529482126}, {"id": 288, "seek": 133008, "start": 1357.28, "end": 1359.3999999999999, "text": " like that.", "tokens": [51724, 411, 300, 13, 51830], "temperature": 0.0, "avg_logprob": -0.22181927880575492, "compression_ratio": 1.6355555555555557, "no_speech_prob": 0.0026524404529482126}, {"id": 289, "seek": 135940, "start": 1359.4, "end": 1375.2, "text": " And then we can do a small demo where we, I hope this is going to be big enough again.", "tokens": [50364, 400, 550, 321, 393, 360, 257, 1359, 10723, 689, 321, 11, 286, 1454, 341, 307, 516, 281, 312, 955, 1547, 797, 13, 51154], "temperature": 0.0, "avg_logprob": -0.24273213886079334, "compression_ratio": 1.4125, "no_speech_prob": 0.01030975952744484}, {"id": 290, "seek": 135940, "start": 1375.2, "end": 1378.1200000000001, "text": " That's definitely not.", "tokens": [51154, 663, 311, 2138, 406, 13, 51300], "temperature": 0.0, "avg_logprob": -0.24273213886079334, "compression_ratio": 1.4125, "no_speech_prob": 0.01030975952744484}, {"id": 291, "seek": 135940, "start": 1378.1200000000001, "end": 1382.8000000000002, "text": " We have this example.js file.", "tokens": [51300, 492, 362, 341, 1365, 13, 25530, 3991, 13, 51534], "temperature": 0.0, "avg_logprob": -0.24273213886079334, "compression_ratio": 1.4125, "no_speech_prob": 0.01030975952744484}, {"id": 292, "seek": 135940, "start": 1382.8000000000002, "end": 1388.5600000000002, "text": " Here we just call the set timeout that we defined earlier in the global scope and then", "tokens": [51534, 1692, 321, 445, 818, 264, 992, 565, 346, 300, 321, 7642, 3071, 294, 264, 4338, 11923, 293, 550, 51822], "temperature": 0.0, "avg_logprob": -0.24273213886079334, "compression_ratio": 1.4125, "no_speech_prob": 0.01030975952744484}, {"id": 293, "seek": 138856, "start": 1388.56, "end": 1399.52, "text": " just come out and this can then just be, kind of make this bigger.", "tokens": [50364, 445, 808, 484, 293, 341, 393, 550, 445, 312, 11, 733, 295, 652, 341, 3801, 13, 50912], "temperature": 0.0, "avg_logprob": -0.4230347633361816, "compression_ratio": 1.2586206896551724, "no_speech_prob": 0.1104956716299057}, {"id": 294, "seek": 138856, "start": 1399.52, "end": 1402.2, "text": " No.", "tokens": [50912, 883, 13, 51046], "temperature": 0.0, "avg_logprob": -0.4230347633361816, "compression_ratio": 1.2586206896551724, "no_speech_prob": 0.1104956716299057}, {"id": 295, "seek": 138856, "start": 1402.2, "end": 1416.84, "text": " So life demos never go perfectly well but hopefully this should be working.", "tokens": [51046, 407, 993, 33788, 1128, 352, 6239, 731, 457, 4696, 341, 820, 312, 1364, 13, 51778], "temperature": 0.0, "avg_logprob": -0.4230347633361816, "compression_ratio": 1.2586206896551724, "no_speech_prob": 0.1104956716299057}, {"id": 296, "seek": 141684, "start": 1416.84, "end": 1423.3999999999999, "text": " So we then just do congo run and we want to specify this input file which we called", "tokens": [50364, 407, 321, 550, 445, 360, 416, 1571, 1190, 293, 321, 528, 281, 16500, 341, 4846, 3991, 597, 321, 1219, 50692], "temperature": 0.0, "avg_logprob": -0.31422504301994075, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.05386244133114815}, {"id": 297, "seek": 141684, "start": 1423.3999999999999, "end": 1424.3999999999999, "text": " examples.js.", "tokens": [50692, 5110, 13, 25530, 13, 50742], "temperature": 0.0, "avg_logprob": -0.31422504301994075, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.05386244133114815}, {"id": 298, "seek": 141684, "start": 1424.3999999999999, "end": 1431.36, "text": " And hopefully this will work.", "tokens": [50742, 400, 4696, 341, 486, 589, 13, 51090], "temperature": 0.0, "avg_logprob": -0.31422504301994075, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.05386244133114815}, {"id": 299, "seek": 141684, "start": 1431.36, "end": 1442.72, "text": " It first needs to compile and yep it prints the weight and then the hello world that we", "tokens": [51090, 467, 700, 2203, 281, 31413, 293, 18633, 309, 22305, 264, 3364, 293, 550, 264, 7751, 1002, 300, 321, 51658], "temperature": 0.0, "avg_logprob": -0.31422504301994075, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.05386244133114815}, {"id": 300, "seek": 141684, "start": 1442.72, "end": 1443.72, "text": " call here.", "tokens": [51658, 818, 510, 13, 51708], "temperature": 0.0, "avg_logprob": -0.31422504301994075, "compression_ratio": 1.4705882352941178, "no_speech_prob": 0.05386244133114815}, {"id": 301, "seek": 144372, "start": 1443.72, "end": 1448.0, "text": " Now this is just a set timeout that's not as interesting as for example fetch.", "tokens": [50364, 823, 341, 307, 445, 257, 992, 565, 346, 300, 311, 406, 382, 1880, 382, 337, 1365, 23673, 13, 50578], "temperature": 0.0, "avg_logprob": -0.19135316212972006, "compression_ratio": 1.5491329479768785, "no_speech_prob": 0.05958448722958565}, {"id": 302, "seek": 144372, "start": 1448.0, "end": 1456.24, "text": " So I mean we could just console log the fetch output so it would be run.js because we defined", "tokens": [50578, 407, 286, 914, 321, 727, 445, 11076, 3565, 264, 23673, 5598, 370, 309, 576, 312, 1190, 13, 25530, 570, 321, 7642, 50990], "temperature": 0.0, "avg_logprob": -0.19135316212972006, "compression_ratio": 1.5491329479768785, "no_speech_prob": 0.05958448722958565}, {"id": 303, "seek": 144372, "start": 1456.24, "end": 1464.44, "text": " this global variable earlier as run.js in this run.js down here and then we want to", "tokens": [50990, 341, 4338, 7006, 3071, 382, 1190, 13, 25530, 294, 341, 1190, 13, 25530, 760, 510, 293, 550, 321, 528, 281, 51400], "temperature": 0.0, "avg_logprob": -0.19135316212972006, "compression_ratio": 1.5491329479768785, "no_speech_prob": 0.05958448722958565}, {"id": 304, "seek": 144372, "start": 1464.44, "end": 1467.04, "text": " call fetch.", "tokens": [51400, 818, 23673, 13, 51530], "temperature": 0.0, "avg_logprob": -0.19135316212972006, "compression_ratio": 1.5491329479768785, "no_speech_prob": 0.05958448722958565}, {"id": 305, "seek": 146704, "start": 1467.04, "end": 1478.04, "text": " I think we could fetch HTTP example.com and since this is async we want to await it and", "tokens": [50364, 286, 519, 321, 727, 23673, 33283, 1365, 13, 1112, 293, 1670, 341, 307, 382, 34015, 321, 528, 281, 19670, 309, 293, 50914], "temperature": 0.0, "avg_logprob": -0.28772346393482107, "compression_ratio": 1.4594594594594594, "no_speech_prob": 0.012455301359295845}, {"id": 306, "seek": 146704, "start": 1478.04, "end": 1484.8799999999999, "text": " again let's run this and hopefully we'll get an unreadable wall of text of HTML output", "tokens": [50914, 797, 718, 311, 1190, 341, 293, 4696, 321, 603, 483, 364, 517, 2538, 712, 2929, 295, 2487, 295, 17995, 5598, 51256], "temperature": 0.0, "avg_logprob": -0.28772346393482107, "compression_ratio": 1.4594594594594594, "no_speech_prob": 0.012455301359295845}, {"id": 307, "seek": 146704, "start": 1484.8799999999999, "end": 1485.8799999999999, "text": " from example.com.", "tokens": [51256, 490, 1365, 13, 1112, 13, 51306], "temperature": 0.0, "avg_logprob": -0.28772346393482107, "compression_ratio": 1.4594594594594594, "no_speech_prob": 0.012455301359295845}, {"id": 308, "seek": 146704, "start": 1485.8799999999999, "end": 1495.36, "text": " It's usually not that long and yes we did a fetch request to a remote server.", "tokens": [51306, 467, 311, 2673, 406, 300, 938, 293, 2086, 321, 630, 257, 23673, 5308, 281, 257, 8607, 7154, 13, 51780], "temperature": 0.0, "avg_logprob": -0.28772346393482107, "compression_ratio": 1.4594594594594594, "no_speech_prob": 0.012455301359295845}, {"id": 309, "seek": 149536, "start": 1495.36, "end": 1511.6399999999999, "text": " And we had the file system operations so I could just call await runjs.readfile and", "tokens": [50364, 400, 321, 632, 264, 3991, 1185, 7705, 370, 286, 727, 445, 818, 19670, 1190, 25530, 13, 2538, 69, 794, 293, 51178], "temperature": 0.0, "avg_logprob": -0.2714735740839049, "compression_ratio": 1.2833333333333334, "no_speech_prob": 0.15411482751369476}, {"id": 310, "seek": 149536, "start": 1511.6399999999999, "end": 1515.9599999999998, "text": " let's read for example this file itself.", "tokens": [51178, 718, 311, 1401, 337, 1365, 341, 3991, 2564, 13, 51394], "temperature": 0.0, "avg_logprob": -0.2714735740839049, "compression_ratio": 1.2833333333333334, "no_speech_prob": 0.15411482751369476}, {"id": 311, "seek": 149536, "start": 1515.9599999999998, "end": 1523.3999999999999, "text": " And then my terminal quickly.", "tokens": [51394, 400, 550, 452, 14709, 2661, 13, 51766], "temperature": 0.0, "avg_logprob": -0.2714735740839049, "compression_ratio": 1.2833333333333334, "no_speech_prob": 0.15411482751369476}, {"id": 312, "seek": 152340, "start": 1523.4, "end": 1527.72, "text": " And hopefully it should just print the same output because we're reading self file yep", "tokens": [50364, 400, 4696, 309, 820, 445, 4482, 264, 912, 5598, 570, 321, 434, 3760, 2698, 3991, 18633, 50580], "temperature": 0.0, "avg_logprob": -0.24326324462890625, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.27786919474601746}, {"id": 313, "seek": 152340, "start": 1527.72, "end": 1532.3200000000002, "text": " and it reads and then the deleting and writing of files will work as well.", "tokens": [50580, 293, 309, 15700, 293, 550, 264, 48946, 293, 3579, 295, 7098, 486, 589, 382, 731, 13, 50810], "temperature": 0.0, "avg_logprob": -0.24326324462890625, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.27786919474601746}, {"id": 314, "seek": 152340, "start": 1532.3200000000002, "end": 1534.4, "text": " We're not going to go too depth into that.", "tokens": [50810, 492, 434, 406, 516, 281, 352, 886, 7161, 666, 300, 13, 50914], "temperature": 0.0, "avg_logprob": -0.24326324462890625, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.27786919474601746}, {"id": 315, "seek": 152340, "start": 1534.4, "end": 1542.24, "text": " It's relatively self explanatory and yeah that's pretty much it.", "tokens": [50914, 467, 311, 7226, 2698, 9045, 4745, 293, 1338, 300, 311, 1238, 709, 309, 13, 51306], "temperature": 0.0, "avg_logprob": -0.24326324462890625, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.27786919474601746}, {"id": 316, "seek": 152340, "start": 1542.24, "end": 1543.68, "text": " I know I went a bit fast.", "tokens": [51306, 286, 458, 286, 1437, 257, 857, 2370, 13, 51378], "temperature": 0.0, "avg_logprob": -0.24326324462890625, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.27786919474601746}, {"id": 317, "seek": 152340, "start": 1543.68, "end": 1545.6000000000001, "text": " I hope people don't have questions.", "tokens": [51378, 286, 1454, 561, 500, 380, 362, 1651, 13, 51474], "temperature": 0.0, "avg_logprob": -0.24326324462890625, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.27786919474601746}, {"id": 318, "seek": 152340, "start": 1545.6000000000001, "end": 1549.96, "text": " There's a QR code for the actual repository where we have this so if people are interested", "tokens": [51474, 821, 311, 257, 32784, 3089, 337, 264, 3539, 25841, 689, 321, 362, 341, 370, 498, 561, 366, 3102, 51692], "temperature": 0.0, "avg_logprob": -0.24326324462890625, "compression_ratio": 1.623076923076923, "no_speech_prob": 0.27786919474601746}, {"id": 319, "seek": 154996, "start": 1549.96, "end": 1555.76, "text": " to check it out but also we always are trying to improve the ecosystem and common problems", "tokens": [50364, 281, 1520, 309, 484, 457, 611, 321, 1009, 366, 1382, 281, 3470, 264, 11311, 293, 2689, 2740, 50654], "temperature": 0.0, "avg_logprob": -0.20761618743071686, "compression_ratio": 1.6889952153110048, "no_speech_prob": 0.18516124784946442}, {"id": 320, "seek": 154996, "start": 1555.76, "end": 1564.4, "text": " of the JavaScript ecosystem and we actually have had problems with the dependency ecosystem", "tokens": [50654, 295, 264, 15778, 11311, 293, 321, 767, 362, 632, 2740, 365, 264, 33621, 11311, 51086], "temperature": 0.0, "avg_logprob": -0.20761618743071686, "compression_ratio": 1.6889952153110048, "no_speech_prob": 0.18516124784946442}, {"id": 321, "seek": 154996, "start": 1564.4, "end": 1569.28, "text": " of JavaScript and NPM and we decided that someone needs to solve this and as such we", "tokens": [51086, 295, 15778, 293, 426, 18819, 293, 321, 3047, 300, 1580, 2203, 281, 5039, 341, 293, 382, 1270, 321, 51330], "temperature": 0.0, "avg_logprob": -0.20761618743071686, "compression_ratio": 1.6889952153110048, "no_speech_prob": 0.18516124784946442}, {"id": 322, "seek": 154996, "start": 1569.28, "end": 1575.32, "text": " also created a new general purpose JavaScript registry that will work in any runtime.", "tokens": [51330, 611, 2942, 257, 777, 2674, 4334, 15778, 36468, 300, 486, 589, 294, 604, 34474, 13, 51632], "temperature": 0.0, "avg_logprob": -0.20761618743071686, "compression_ratio": 1.6889952153110048, "no_speech_prob": 0.18516124784946442}, {"id": 323, "seek": 157532, "start": 1575.32, "end": 1580.96, "text": " This has been announced a few days ago by Ryan Moindepf and you can join the waitlist", "tokens": [50364, 639, 575, 668, 7548, 257, 1326, 1708, 2057, 538, 9116, 3335, 471, 595, 69, 293, 291, 393, 3917, 264, 1699, 8264, 50646], "temperature": 0.0, "avg_logprob": -0.28292771636462605, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.50362628698349}, {"id": 324, "seek": 157532, "start": 1580.96, "end": 1585.12, "text": " at the QR code or the URL.", "tokens": [50646, 412, 264, 32784, 3089, 420, 264, 12905, 13, 50854], "temperature": 0.0, "avg_logprob": -0.28292771636462605, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.50362628698349}, {"id": 325, "seek": 157532, "start": 1585.12, "end": 1586.12, "text": " That's it.", "tokens": [50854, 663, 311, 309, 13, 50904], "temperature": 0.0, "avg_logprob": -0.28292771636462605, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.50362628698349}, {"id": 326, "seek": 157532, "start": 1586.12, "end": 1587.12, "text": " Are there any questions?", "tokens": [50904, 2014, 456, 604, 1651, 30, 50954], "temperature": 0.0, "avg_logprob": -0.28292771636462605, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.50362628698349}, {"id": 327, "seek": 157532, "start": 1587.12, "end": 1588.12, "text": " Time for one or two questions.", "tokens": [50954, 6161, 337, 472, 420, 732, 1651, 13, 51004], "temperature": 0.0, "avg_logprob": -0.28292771636462605, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.50362628698349}, {"id": 328, "seek": 157532, "start": 1588.12, "end": 1589.12, "text": " Yeah.", "tokens": [51004, 865, 13, 51054], "temperature": 0.0, "avg_logprob": -0.28292771636462605, "compression_ratio": 1.330935251798561, "no_speech_prob": 0.50362628698349}, {"id": 329, "seek": 158912, "start": 1589.12, "end": 1604.12, "text": " Let's see that I hate this.", "tokens": [50364, 961, 311, 536, 300, 286, 4700, 341, 13, 51114], "temperature": 0.0, "avg_logprob": -0.8372101416954627, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.21812181174755096}, {"id": 330, "seek": 158912, "start": 1604.12, "end": 1605.3999999999999, "text": " Inside the Docker container.", "tokens": [51114, 15123, 264, 33772, 10129, 13, 51178], "temperature": 0.0, "avg_logprob": -0.8372101416954627, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.21812181174755096}, {"id": 331, "seek": 158912, "start": 1605.3999999999999, "end": 1612.32, "text": " I have this input queue of jobs where I send the script that I want to run and then just", "tokens": [51178, 286, 362, 341, 4846, 18639, 295, 4782, 689, 286, 2845, 264, 5755, 300, 286, 528, 281, 1190, 293, 550, 445, 51524], "temperature": 0.0, "avg_logprob": -0.8372101416954627, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.21812181174755096}, {"id": 332, "seek": 158912, "start": 1612.32, "end": 1615.12, "text": " execute it and the output is from it.", "tokens": [51524, 14483, 309, 293, 264, 5598, 307, 490, 309, 13, 51664], "temperature": 0.0, "avg_logprob": -0.8372101416954627, "compression_ratio": 1.4186046511627908, "no_speech_prob": 0.21812181174755096}, {"id": 333, "seek": 161512, "start": 1615.12, "end": 1622.12, "text": " Is there any downside as long as I am only sending one single script that it needs to", "tokens": [50364, 1119, 456, 604, 25060, 382, 938, 382, 286, 669, 787, 7750, 472, 2167, 5755, 300, 309, 2203, 281, 50714], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 334, "seek": 161512, "start": 1622.12, "end": 1623.12, "text": " execute?", "tokens": [50714, 14483, 30, 50764], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 335, "seek": 161512, "start": 1623.12, "end": 1624.12, "text": " No.", "tokens": [50764, 883, 13, 50814], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 336, "seek": 161512, "start": 1624.12, "end": 1625.12, "text": " I don't see any issue with that whatsoever.", "tokens": [50814, 286, 500, 380, 536, 604, 2734, 365, 300, 17076, 13, 50864], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 337, "seek": 161512, "start": 1625.12, "end": 1626.12, "text": " It should just work.", "tokens": [50864, 467, 820, 445, 589, 13, 50914], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 338, "seek": 161512, "start": 1626.12, "end": 1631.6, "text": " Again, I'm not too familiar with Docker though but that seems like a relatively normal thing", "tokens": [50914, 3764, 11, 286, 478, 406, 886, 4963, 365, 33772, 1673, 457, 300, 2544, 411, 257, 7226, 2710, 551, 51188], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 339, "seek": 161512, "start": 1631.6, "end": 1633.6, "text": " to do.", "tokens": [51188, 281, 360, 13, 51288], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 340, "seek": 161512, "start": 1633.6, "end": 1634.6, "text": " Any other questions?", "tokens": [51288, 2639, 661, 1651, 30, 51338], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 341, "seek": 161512, "start": 1634.6, "end": 1644.7199999999998, "text": " What have been your biggest challenges in writing this run project?", "tokens": [51338, 708, 362, 668, 428, 3880, 4759, 294, 3579, 341, 1190, 1716, 30, 51844], "temperature": 0.0, "avg_logprob": -0.31610515269827333, "compression_ratio": 1.4915254237288136, "no_speech_prob": 0.38603731989860535}, {"id": 342, "seek": 164472, "start": 1645.72, "end": 1652.16, "text": " This project has been going on since it was announced in 2018 and we have written our", "tokens": [50414, 639, 1716, 575, 668, 516, 322, 1670, 309, 390, 7548, 294, 6096, 293, 321, 362, 3720, 527, 50736], "temperature": 0.0, "avg_logprob": -0.216349927390494, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.5218201279640198}, {"id": 343, "seek": 164472, "start": 1652.16, "end": 1654.0, "text": " internals many times.", "tokens": [50736, 2154, 1124, 867, 1413, 13, 50828], "temperature": 0.0, "avg_logprob": -0.216349927390494, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.5218201279640198}, {"id": 344, "seek": 164472, "start": 1654.0, "end": 1658.16, "text": " For example, extensions were called other things multiple times in the past.", "tokens": [50828, 1171, 1365, 11, 25129, 645, 1219, 661, 721, 3866, 1413, 294, 264, 1791, 13, 51036], "temperature": 0.0, "avg_logprob": -0.216349927390494, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.5218201279640198}, {"id": 345, "seek": 164472, "start": 1658.16, "end": 1666.16, "text": " We renamed and restructured not entire structure of the code base but it was just multiple", "tokens": [51036, 492, 40949, 293, 1472, 46847, 406, 2302, 3877, 295, 264, 3089, 3096, 457, 309, 390, 445, 3866, 51436], "temperature": 0.0, "avg_logprob": -0.216349927390494, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.5218201279640198}, {"id": 346, "seek": 164472, "start": 1666.16, "end": 1672.16, "text": " rewrites just to be able to have more capability but also performance wise improvements.", "tokens": [51436, 319, 86, 30931, 445, 281, 312, 1075, 281, 362, 544, 13759, 457, 611, 3389, 10829, 13797, 13, 51736], "temperature": 0.0, "avg_logprob": -0.216349927390494, "compression_ratio": 1.5895196506550218, "no_speech_prob": 0.5218201279640198}, {"id": 347, "seek": 167216, "start": 1672.6000000000001, "end": 1679.8000000000002, "text": " Overall, it has been a challenge but it was something we could always figure out.", "tokens": [50386, 18420, 11, 309, 575, 668, 257, 3430, 457, 309, 390, 746, 321, 727, 1009, 2573, 484, 13, 50746], "temperature": 0.0, "avg_logprob": -0.22947396172417533, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.03431793674826622}, {"id": 348, "seek": 167216, "start": 1679.8000000000002, "end": 1681.0800000000002, "text": " Rust itself has never been an issue.", "tokens": [50746, 34952, 2564, 575, 1128, 668, 364, 2734, 13, 50810], "temperature": 0.0, "avg_logprob": -0.22947396172417533, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.03431793674826622}, {"id": 349, "seek": 167216, "start": 1681.0800000000002, "end": 1684.96, "text": " It's always been relatively good to use.", "tokens": [50810, 467, 311, 1009, 668, 7226, 665, 281, 764, 13, 51004], "temperature": 0.0, "avg_logprob": -0.22947396172417533, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.03431793674826622}, {"id": 350, "seek": 167216, "start": 1684.96, "end": 1685.96, "text": " It's not perfect.", "tokens": [51004, 467, 311, 406, 2176, 13, 51054], "temperature": 0.0, "avg_logprob": -0.22947396172417533, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.03431793674826622}, {"id": 351, "seek": 167216, "start": 1685.96, "end": 1692.16, "text": " No programming language is perfect but previously Dino was initially started as a Go project", "tokens": [51054, 883, 9410, 2856, 307, 2176, 457, 8046, 413, 2982, 390, 9105, 1409, 382, 257, 1037, 1716, 51364], "temperature": 0.0, "avg_logprob": -0.22947396172417533, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.03431793674826622}, {"id": 352, "seek": 167216, "start": 1692.16, "end": 1698.48, "text": " but we switched quickly to Rust for performance benefits as well.", "tokens": [51364, 457, 321, 16858, 2661, 281, 34952, 337, 3389, 5311, 382, 731, 13, 51680], "temperature": 0.0, "avg_logprob": -0.22947396172417533, "compression_ratio": 1.5627906976744186, "no_speech_prob": 0.03431793674826622}, {"id": 353, "seek": 169848, "start": 1698.48, "end": 1707.28, "text": " I hope that answers the question.", "tokens": [50364, 286, 1454, 300, 6338, 264, 1168, 13, 50804], "temperature": 0.0, "avg_logprob": -0.4279824495315552, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.14959000051021576}, {"id": 354, "seek": 169848, "start": 1707.28, "end": 1708.28, "text": " Anything else?", "tokens": [50804, 11998, 1646, 30, 50854], "temperature": 0.0, "avg_logprob": -0.4279824495315552, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.14959000051021576}, {"id": 355, "seek": 169848, "start": 1708.28, "end": 1709.28, "text": " Yes?", "tokens": [50854, 1079, 30, 50904], "temperature": 0.0, "avg_logprob": -0.4279824495315552, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.14959000051021576}, {"id": 356, "seek": 169848, "start": 1709.28, "end": 1710.28, "text": " Yes?", "tokens": [50904, 1079, 30, 50954], "temperature": 0.0, "avg_logprob": -0.4279824495315552, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.14959000051021576}, {"id": 357, "seek": 171028, "start": 1710.28, "end": 1727.8799999999999, "text": " Yes?", "tokens": [50364, 1079, 30, 51244], "temperature": 0.0, "avg_logprob": -0.6359123229980469, "compression_ratio": 0.813953488372093, "no_speech_prob": 0.2084440439939499}, {"id": 358, "seek": 171028, "start": 1727.8799999999999, "end": 1730.8, "text": " Is it?", "tokens": [51244, 1119, 309, 30, 51390], "temperature": 0.0, "avg_logprob": -0.6359123229980469, "compression_ratio": 0.813953488372093, "no_speech_prob": 0.2084440439939499}, {"id": 359, "seek": 171028, "start": 1730.8, "end": 1731.8, "text": " On this one?", "tokens": [51390, 1282, 341, 472, 30, 51440], "temperature": 0.0, "avg_logprob": -0.6359123229980469, "compression_ratio": 0.813953488372093, "no_speech_prob": 0.2084440439939499}, {"id": 360, "seek": 171028, "start": 1731.8, "end": 1732.8, "text": " Yes.", "tokens": [51440, 1079, 13, 51490], "temperature": 0.0, "avg_logprob": -0.6359123229980469, "compression_ratio": 0.813953488372093, "no_speech_prob": 0.2084440439939499}, {"id": 361, "seek": 171028, "start": 1732.8, "end": 1733.8, "text": " Okay.", "tokens": [51490, 1033, 13, 51540], "temperature": 0.0, "avg_logprob": -0.6359123229980469, "compression_ratio": 0.813953488372093, "no_speech_prob": 0.2084440439939499}, {"id": 362, "seek": 173380, "start": 1733.8, "end": 1751.32, "text": " This could technically have been just accepting U64 directly.", "tokens": [50364, 639, 727, 12120, 362, 668, 445, 17391, 624, 19395, 3838, 13, 51240], "temperature": 0.0, "avg_logprob": -0.3306061562071455, "compression_ratio": 1.5182481751824817, "no_speech_prob": 0.09540548920631409}, {"id": 363, "seek": 173380, "start": 1751.32, "end": 1756.8, "text": " This should actually have been U64 directly and just been passed and not casted but that", "tokens": [51240, 639, 820, 767, 362, 668, 624, 19395, 3838, 293, 445, 668, 4678, 293, 406, 4193, 292, 457, 300, 51514], "temperature": 0.0, "avg_logprob": -0.3306061562071455, "compression_ratio": 1.5182481751824817, "no_speech_prob": 0.09540548920631409}, {"id": 364, "seek": 173380, "start": 1756.8, "end": 1759.76, "text": " was probably just some oversight while writing this code.", "tokens": [51514, 390, 1391, 445, 512, 29146, 1339, 3579, 341, 3089, 13, 51662], "temperature": 0.0, "avg_logprob": -0.3306061562071455, "compression_ratio": 1.5182481751824817, "no_speech_prob": 0.09540548920631409}, {"id": 365, "seek": 175976, "start": 1760.12, "end": 1766.32, "text": " We casted it because it was from Melissa, except only U64 but this is just oversight.", "tokens": [50382, 492, 4193, 292, 309, 570, 309, 390, 490, 22844, 11, 3993, 787, 624, 19395, 457, 341, 307, 445, 29146, 13, 50692], "temperature": 0.0, "avg_logprob": -0.47973604900080985, "compression_ratio": 1.455813953488372, "no_speech_prob": 0.4274515211582184}, {"id": 366, "seek": 175976, "start": 1766.32, "end": 1769.76, "text": " I have one more question.", "tokens": [50692, 286, 362, 472, 544, 1168, 13, 50864], "temperature": 0.0, "avg_logprob": -0.47973604900080985, "compression_ratio": 1.455813953488372, "no_speech_prob": 0.4274515211582184}, {"id": 367, "seek": 175976, "start": 1769.76, "end": 1770.76, "text": " Yes?", "tokens": [50864, 1079, 30, 50914], "temperature": 0.0, "avg_logprob": -0.47973604900080985, "compression_ratio": 1.455813953488372, "no_speech_prob": 0.4274515211582184}, {"id": 368, "seek": 175976, "start": 1770.76, "end": 1776.76, "text": " How does the performance on the custom run times or extensions compare to the foreign", "tokens": [50914, 1012, 775, 264, 3389, 322, 264, 2375, 1190, 1413, 420, 25129, 6794, 281, 264, 5329, 51214], "temperature": 0.0, "avg_logprob": -0.47973604900080985, "compression_ratio": 1.455813953488372, "no_speech_prob": 0.4274515211582184}, {"id": 369, "seek": 175976, "start": 1776.76, "end": 1778.76, "text": " functions in the past?", "tokens": [51214, 6828, 294, 264, 1791, 30, 51314], "temperature": 0.0, "avg_logprob": -0.47973604900080985, "compression_ratio": 1.455813953488372, "no_speech_prob": 0.4274515211582184}, {"id": 370, "seek": 175976, "start": 1778.76, "end": 1788.32, "text": " I'm not too familiar with FFI but we have optimized both FFI and these extensions a lot", "tokens": [51314, 286, 478, 406, 886, 4963, 365, 479, 38568, 457, 321, 362, 26941, 1293, 479, 38568, 293, 613, 25129, 257, 688, 51792], "temperature": 0.0, "avg_logprob": -0.47973604900080985, "compression_ratio": 1.455813953488372, "no_speech_prob": 0.4274515211582184}, {"id": 371, "seek": 178832, "start": 1788.32, "end": 1792.8799999999999, "text": " more but extensions inherently are going to be more performance because it's not a", "tokens": [50364, 544, 457, 25129, 27993, 366, 516, 281, 312, 544, 3389, 570, 309, 311, 406, 257, 50592], "temperature": 0.0, "avg_logprob": -0.2685562948162636, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.3245829641819}, {"id": 372, "seek": 178832, "start": 1792.8799999999999, "end": 1795.52, "text": " foreign function.", "tokens": [50592, 5329, 2445, 13, 50724], "temperature": 0.0, "avg_logprob": -0.2685562948162636, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.3245829641819}, {"id": 373, "seek": 178832, "start": 1795.52, "end": 1800.3799999999999, "text": " These ops, I guess if you really look at them foreign functions, since it's calling", "tokens": [50724, 1981, 44663, 11, 286, 2041, 498, 291, 534, 574, 412, 552, 5329, 6828, 11, 1670, 309, 311, 5141, 50967], "temperature": 0.0, "avg_logprob": -0.2685562948162636, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.3245829641819}, {"id": 374, "seek": 178832, "start": 1800.3799999999999, "end": 1805.9199999999998, "text": " Rust functions out of JavaScript, there is some plumbing but these have been optimized", "tokens": [50967, 34952, 6828, 484, 295, 15778, 11, 456, 307, 512, 39993, 457, 613, 362, 668, 26941, 51244], "temperature": 0.0, "avg_logprob": -0.2685562948162636, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.3245829641819}, {"id": 375, "seek": 178832, "start": 1805.9199999999998, "end": 1811.9199999999998, "text": " so much over multiple years that I would say like sync functions are basically maybe not", "tokens": [51244, 370, 709, 670, 3866, 924, 300, 286, 576, 584, 411, 20271, 6828, 366, 1936, 1310, 406, 51544], "temperature": 0.0, "avg_logprob": -0.2685562948162636, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.3245829641819}, {"id": 376, "seek": 178832, "start": 1811.9199999999998, "end": 1815.48, "text": " no cost but close to no cost.", "tokens": [51544, 572, 2063, 457, 1998, 281, 572, 2063, 13, 51722], "temperature": 0.0, "avg_logprob": -0.2685562948162636, "compression_ratio": 1.6182572614107884, "no_speech_prob": 0.3245829641819}, {"id": 377, "seek": 181548, "start": 1815.48, "end": 1818.16, "text": " Sync functions have overhead due to...", "tokens": [50372, 26155, 66, 6828, 362, 19922, 3462, 281, 485, 50498], "temperature": 0.0, "avg_logprob": -0.8287464488636364, "compression_ratio": 0.8260869565217391, "no_speech_prob": 0.8781924247741699}], "language": "en"}