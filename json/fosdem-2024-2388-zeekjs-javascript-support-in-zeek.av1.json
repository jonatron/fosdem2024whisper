{"text": " Hello. If you can hear me well. Thanks. My name is Arne. I work for a company called Corelight. I work on the seek project. Quick information, who of you is using seek? Anyone? Three, maybe. I want to talk about JavaScript support in seek. But first, if you, well, there are not many people that have maybe heard of seek. It's a passive network security monitor. It's existence, well, a long time, 95, was development started. It's open source and BST. It was called Bro until 2018. Bro isn't really a name that you should use for a project anymore. So it was changed. And if you look at it from a high level, you sort of feed it packets at the bottom, either from a live network traffic, like live interface or from a PCAP file. And what you get out at the top is sort of a set of logs that describes what kind of activity is in your network traffic. If you look under the hood, there are a few more details. So it's an event-driven system. It has a custom scripting language. We have some, we call it broker. It's a messaging interface to talk between separate processes. Yeah. To give you a flavor of the logs that were at the top, sort of, those are single entries for single connections. So on the right-hand side, there's the con log, which is the most central log. And, well, there's the identifying five-tuple. We also support IPv6, but that's an IPv4 example. The service field indicates what kind of protocols Seek was able to discover within that connection. And then the bottom is sort of statistical information, like packet counts and duration. On the left-hand side, you see more protocol-specific log, in this case the quick log, which has been recently added. And for example, there's the, so you can see the server name in the client protocol. And if Seek is able to decrypt the initial packet of a quick connection, it forwards the crypto payload to the TLS analyzer, which can then extract that kind of information, and we put it in a log field as you see. That is sort of the data that you would push to elastic search or Splunk and then do your analysis there. That's sort of not Seek jobs, we just produce logs. Okay. It's a fairly old system. It has a custom scripting language, and it looks sort of, that's just a sketch. It's not actually going to work like this, but it sketches how the quick log entries created. So there are two event handlers, one for initial packets, so whenever there's an initial packet, that event is raised, and we create a info record, which represents the quick log entry in the end. And then there's another event that is the SSL extension server name that is raised whenever there's an SNI extension in the client Hello. And you can handle it and basically enrich that quick log entry with the server name or with the first name. That's just a heuristic here. The bottom is a sort of log write call where we actually then produce that JSON entry. So yeah, but it might look a bit unusual in the beginning. It's a fairly powerful language that has some network domain specific features that also allow you to write detections with Seek and sort of build advanced analysis also within that scripting language. What's not so great is sort of interaction with the outside world that log write, for example, is the thin layer above the whole C++ logging framework. So that is not implemented in Seek script, but then you have to do that in C++. And usually any extension that you want to do, you have to resort to writing a plugin in C++. Yeah, we do have so if you don't go to C++ route, we do have support for asynchronous HTTP requests. And if you look a bit under the hood, then the thing is spawning is read and it's launching for writing stuff into temp directory and into a file still and then it reads them and gives them back to the script. So it's a really scary implementation of an HTTP request. So the idea was to, well, why don't we use a language that maybe does provide all that stuff and sort of has a rich ecosystem and has is well known as well. And particularly the Node.js, because of the libraries and the NPM system, so that there was sort of the idea. And as a twist, we are doing this as a plugin and not by patching Seek source code base. We just want to build something external to add support to Seek to also use JavaScript. So quickly about plugins. They're basically shared libraries that seek loads at startup and within that plugin you can access Seek's C++ API or also hook into certain execution paths. For example, whenever a new connection is, so new connection state is created, you can implement the hook set up analyzer tree and attach something to that connection usually analyzers, a protocol analyzer we would say. They also really made components where basically implemented against an interface. There's no component for a whole scripting language, so we sort of resort to the first two to implement the JavaScript support. Okay. So that top hopefully doesn't look too unfamiliar if you have some JavaScript. There's an event object on the left that is called Seek, sort of a global object. There's a well known on function where you register that an additional function for a certain event in M. So that that looks more usual problem in the Seek script example. And as an addition, there's the there's the HDT module from our HDPS module from Node and there's also an example how you could put how you could post the connection you had the end those SSR server names mentioned before to an HDP endpoint just from within Seek script. So we want to get there. And the first step is to, as you prevent Seek from interpreting .js files as Seek script, which it would do with default. And you can implement hook load file and basically check if the if the file name that Seek is attempting to load is ending with .js and return one basically says well don't bother about it I'm taking over and we are stashing away those JavaScript files. And that works for files in the command line or also those with directives loaded. So the add load directive. Step two is sort of to initialize the whole JavaScript engine, sort of the V8 engine and the Node.js environment. There's documentation about that. There's a link here. This is sort of a sketch. It's a bit complicated but I have good documentation about it. What is happening at that point is also that we are loading the JavaScript files and so the top level Seek on calls are actually executed. So we need to provide this Seek on call already. So I'll say this is just step three. I need to slow down a bit. Just for myself. So step three is the call to Seek on is basically getting an event handler name and listener function. And with that event handler name we can use C++ APIs to look at the event handler object which is a Seek specific object representing that, well, belonging to that event name. From that we can get a script function which usually has a list of bodies and each of the bodies contains a statement list and then there are further statements. So usually the script execution is interpreted. So it just runs down all those statements and executes them. What the plugin can do is add another body into that list of bodies and provide the custom statement subclass which when executed really just calls into JavaScript and executes a V8 function. So when this first happened it was really exciting. You see a hello printer from Seek and a hello printer from console. It was nice to get done. What was not so nice is that you need to map types between those two languages. So there's different types on the Seek side and JavaScript has other types. For example the address or subnet type on the Seek side we currently just mapped to strings in readable form. It's not the most performant but it was nice to have Jason stringify and have IP addresses like that. I'm not going to talk much more about this. The last step was to integrate both of the IO loops. Seek has its own IO loop that is KQ based and Node.js has also an IO loop which is libUV based. Usually the Seek IO loop is blocking on an event call waiting for a packet to be served or a block of packets or a timer has expired or something else happening and an act on it. What the plugin can do is register something called an IO source and in the case of libUV the plugin takes the backend file descriptor of the libUV IO loop and installs it into the Seek IO loop which means that whenever something has to be done on the Node.js side like a client is connecting on a listening socket then the backend file descriptor of the libUV loop becomes ready and the Seek IO loop is waking up. Recognizing this is Node.js file descriptor that became ready. I need to transfer control over to that loop and the plugin runs the Node.js loop non-blocking until there's nothing left to be done and control is then transferred over back to Seek. Yeah, that was the most tricky part of the whole plugin. I didn't talk much about the picture before, the architecture, but where I would position that is sort of, it's not completely technical to correct, but if we have extended the event engine a bit with Node.js event engine down there and then also the Seek script language, so we have extended everything with being able to also use JavaScript instead of the Seek script language. As a summary, I find it really impressive that we could do that without actually patching Seek. Everything was in place to pull this off which is testament to how Seek was built over the years really. We're not going to replace the Seek scripts that are existing with JavaScript, that is not sort of the plan. The integrations you wanted to build or maybe just wanted to have proof of concepts of things that you previously needed to quickly use C++ and find some C++ library to do whatever. You can now tap into NPR ecosystem or JavaScript and try it with that. That plugin is sort of coming with Seek 6.0 by default, so if you have LIT node installed and you compile Seek it will just be supported really. And our container images also have it built in by default as well. Any questions about that? Any questions? Hi, Armin. Have you evaluated the performance of this? Does it impact performance a lot? I would say it runs slower than just Seek and interpreted scripting, mostly because we need to translate between those two types. I would also currently position it to not necessarily run JavaScript in the packet path unless you are really adventurous. We have also Seek processes like the proxy and the manager that don't do packet processing. They have a lot more cycles there. If you run JavaScript there and do sort of pulling in IOC information, that's one use case, that you can do in a node that is not in the packet path. We would be interested in performance numbers. Thanks. Have you explored other languages as well, apart from JavaScript? Not explored, I sort of have in my mind as a proof of concept Python, but JavaScript was sort of asynchronous, it's non-blocking. That's a paradigm there and that's what we needed as a replacement for Seek script. Thanks. Any more questions? Thank you very much.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 5.0, "text": " Hello.", "tokens": [50364, 2425, 13, 50614], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 1, "seek": 0, "start": 5.0, "end": 13.0, "text": " If you can hear me well.", "tokens": [50614, 759, 291, 393, 1568, 385, 731, 13, 51014], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 2, "seek": 0, "start": 13.0, "end": 14.0, "text": " Thanks.", "tokens": [51014, 2561, 13, 51064], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 3, "seek": 0, "start": 14.0, "end": 15.0, "text": " My name is Arne.", "tokens": [51064, 1222, 1315, 307, 1587, 716, 13, 51114], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 4, "seek": 0, "start": 15.0, "end": 17.0, "text": " I work for a company called Corelight.", "tokens": [51114, 286, 589, 337, 257, 2237, 1219, 14798, 2764, 13, 51214], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 5, "seek": 0, "start": 17.0, "end": 19.0, "text": " I work on the seek project.", "tokens": [51214, 286, 589, 322, 264, 8075, 1716, 13, 51314], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 6, "seek": 0, "start": 19.0, "end": 22.0, "text": " Quick information, who of you is using seek?", "tokens": [51314, 12101, 1589, 11, 567, 295, 291, 307, 1228, 8075, 30, 51464], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 7, "seek": 0, "start": 22.0, "end": 23.0, "text": " Anyone?", "tokens": [51464, 14643, 30, 51514], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 8, "seek": 0, "start": 23.0, "end": 25.0, "text": " Three, maybe.", "tokens": [51514, 6244, 11, 1310, 13, 51614], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 9, "seek": 0, "start": 25.0, "end": 29.0, "text": " I want to talk about JavaScript support in seek.", "tokens": [51614, 286, 528, 281, 751, 466, 15778, 1406, 294, 8075, 13, 51814], "temperature": 0.0, "avg_logprob": -0.4067315466610002, "compression_ratio": 1.3657142857142857, "no_speech_prob": 0.19349701702594757}, {"id": 10, "seek": 2900, "start": 29.0, "end": 34.0, "text": " But first, if you, well, there are not many people that have maybe heard of seek.", "tokens": [50364, 583, 700, 11, 498, 291, 11, 731, 11, 456, 366, 406, 867, 561, 300, 362, 1310, 2198, 295, 8075, 13, 50614], "temperature": 0.0, "avg_logprob": -0.17838861174502615, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.027085568755865097}, {"id": 11, "seek": 2900, "start": 34.0, "end": 37.0, "text": " It's a passive network security monitor.", "tokens": [50614, 467, 311, 257, 14975, 3209, 3825, 6002, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17838861174502615, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.027085568755865097}, {"id": 12, "seek": 2900, "start": 37.0, "end": 43.0, "text": " It's existence, well, a long time, 95, was development started.", "tokens": [50764, 467, 311, 9123, 11, 731, 11, 257, 938, 565, 11, 13420, 11, 390, 3250, 1409, 13, 51064], "temperature": 0.0, "avg_logprob": -0.17838861174502615, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.027085568755865097}, {"id": 13, "seek": 2900, "start": 43.0, "end": 45.0, "text": " It's open source and BST.", "tokens": [51064, 467, 311, 1269, 4009, 293, 363, 6840, 13, 51164], "temperature": 0.0, "avg_logprob": -0.17838861174502615, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.027085568755865097}, {"id": 14, "seek": 2900, "start": 45.0, "end": 47.0, "text": " It was called Bro until 2018.", "tokens": [51164, 467, 390, 1219, 5425, 1826, 6096, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17838861174502615, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.027085568755865097}, {"id": 15, "seek": 2900, "start": 47.0, "end": 51.0, "text": " Bro isn't really a name that you should use for a project anymore.", "tokens": [51264, 5425, 1943, 380, 534, 257, 1315, 300, 291, 820, 764, 337, 257, 1716, 3602, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17838861174502615, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.027085568755865097}, {"id": 16, "seek": 2900, "start": 51.0, "end": 53.0, "text": " So it was changed.", "tokens": [51464, 407, 309, 390, 3105, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17838861174502615, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.027085568755865097}, {"id": 17, "seek": 2900, "start": 53.0, "end": 58.0, "text": " And if you look at it from a high level, you sort of feed it packets at the bottom,", "tokens": [51564, 400, 498, 291, 574, 412, 309, 490, 257, 1090, 1496, 11, 291, 1333, 295, 3154, 309, 30364, 412, 264, 2767, 11, 51814], "temperature": 0.0, "avg_logprob": -0.17838861174502615, "compression_ratio": 1.5488721804511278, "no_speech_prob": 0.027085568755865097}, {"id": 18, "seek": 5800, "start": 58.0, "end": 63.0, "text": " either from a live network traffic, like live interface or from a PCAP file.", "tokens": [50364, 2139, 490, 257, 1621, 3209, 6419, 11, 411, 1621, 9226, 420, 490, 257, 6465, 4715, 3991, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12790368913530228, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0038996245712041855}, {"id": 19, "seek": 5800, "start": 63.0, "end": 71.0, "text": " And what you get out at the top is sort of a set of logs that describes what kind of activity is in your network traffic.", "tokens": [50614, 400, 437, 291, 483, 484, 412, 264, 1192, 307, 1333, 295, 257, 992, 295, 20820, 300, 15626, 437, 733, 295, 5191, 307, 294, 428, 3209, 6419, 13, 51014], "temperature": 0.0, "avg_logprob": -0.12790368913530228, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0038996245712041855}, {"id": 20, "seek": 5800, "start": 71.0, "end": 75.0, "text": " If you look under the hood, there are a few more details.", "tokens": [51014, 759, 291, 574, 833, 264, 13376, 11, 456, 366, 257, 1326, 544, 4365, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12790368913530228, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0038996245712041855}, {"id": 21, "seek": 5800, "start": 75.0, "end": 76.0, "text": " So it's an event-driven system.", "tokens": [51214, 407, 309, 311, 364, 2280, 12, 25456, 1185, 13, 51264], "temperature": 0.0, "avg_logprob": -0.12790368913530228, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0038996245712041855}, {"id": 22, "seek": 5800, "start": 76.0, "end": 78.0, "text": " It has a custom scripting language.", "tokens": [51264, 467, 575, 257, 2375, 5755, 278, 2856, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12790368913530228, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0038996245712041855}, {"id": 23, "seek": 5800, "start": 78.0, "end": 81.0, "text": " We have some, we call it broker.", "tokens": [51364, 492, 362, 512, 11, 321, 818, 309, 26502, 13, 51514], "temperature": 0.0, "avg_logprob": -0.12790368913530228, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0038996245712041855}, {"id": 24, "seek": 5800, "start": 81.0, "end": 85.0, "text": " It's a messaging interface to talk between separate processes.", "tokens": [51514, 467, 311, 257, 21812, 9226, 281, 751, 1296, 4994, 7555, 13, 51714], "temperature": 0.0, "avg_logprob": -0.12790368913530228, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.0038996245712041855}, {"id": 25, "seek": 8500, "start": 86.0, "end": 88.0, "text": " Yeah.", "tokens": [50414, 865, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14949012896336547, "compression_ratio": 1.5674603174603174, "no_speech_prob": 0.003999877255409956}, {"id": 26, "seek": 8500, "start": 88.0, "end": 95.0, "text": " To give you a flavor of the logs that were at the top, sort of, those are single entries for single connections.", "tokens": [50514, 1407, 976, 291, 257, 6813, 295, 264, 20820, 300, 645, 412, 264, 1192, 11, 1333, 295, 11, 729, 366, 2167, 23041, 337, 2167, 9271, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14949012896336547, "compression_ratio": 1.5674603174603174, "no_speech_prob": 0.003999877255409956}, {"id": 27, "seek": 8500, "start": 95.0, "end": 99.0, "text": " So on the right-hand side, there's the con log, which is the most central log.", "tokens": [50864, 407, 322, 264, 558, 12, 5543, 1252, 11, 456, 311, 264, 416, 3565, 11, 597, 307, 264, 881, 5777, 3565, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14949012896336547, "compression_ratio": 1.5674603174603174, "no_speech_prob": 0.003999877255409956}, {"id": 28, "seek": 8500, "start": 99.0, "end": 102.0, "text": " And, well, there's the identifying five-tuple.", "tokens": [51064, 400, 11, 731, 11, 456, 311, 264, 16696, 1732, 12, 9179, 781, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14949012896336547, "compression_ratio": 1.5674603174603174, "no_speech_prob": 0.003999877255409956}, {"id": 29, "seek": 8500, "start": 102.0, "end": 106.0, "text": " We also support IPv6, but that's an IPv4 example.", "tokens": [51214, 492, 611, 1406, 8671, 85, 21, 11, 457, 300, 311, 364, 8671, 85, 19, 1365, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14949012896336547, "compression_ratio": 1.5674603174603174, "no_speech_prob": 0.003999877255409956}, {"id": 30, "seek": 8500, "start": 106.0, "end": 112.0, "text": " The service field indicates what kind of protocols Seek was able to discover within that connection.", "tokens": [51414, 440, 2643, 2519, 16203, 437, 733, 295, 20618, 1100, 916, 390, 1075, 281, 4411, 1951, 300, 4984, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14949012896336547, "compression_ratio": 1.5674603174603174, "no_speech_prob": 0.003999877255409956}, {"id": 31, "seek": 11200, "start": 112.0, "end": 117.0, "text": " And then the bottom is sort of statistical information, like packet counts and duration.", "tokens": [50364, 400, 550, 264, 2767, 307, 1333, 295, 22820, 1589, 11, 411, 20300, 14893, 293, 16365, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1362703305024367, "compression_ratio": 1.606177606177606, "no_speech_prob": 0.0016180542297661304}, {"id": 32, "seek": 11200, "start": 117.0, "end": 124.0, "text": " On the left-hand side, you see more protocol-specific log, in this case the quick log, which has been recently added.", "tokens": [50614, 1282, 264, 1411, 12, 5543, 1252, 11, 291, 536, 544, 10336, 12, 29258, 3565, 11, 294, 341, 1389, 264, 1702, 3565, 11, 597, 575, 668, 3938, 3869, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1362703305024367, "compression_ratio": 1.606177606177606, "no_speech_prob": 0.0016180542297661304}, {"id": 33, "seek": 11200, "start": 124.0, "end": 129.0, "text": " And for example, there's the, so you can see the server name in the client protocol.", "tokens": [50964, 400, 337, 1365, 11, 456, 311, 264, 11, 370, 291, 393, 536, 264, 7154, 1315, 294, 264, 6423, 10336, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1362703305024367, "compression_ratio": 1.606177606177606, "no_speech_prob": 0.0016180542297661304}, {"id": 34, "seek": 11200, "start": 129.0, "end": 137.0, "text": " And if Seek is able to decrypt the initial packet of a quick connection, it forwards the crypto payload to the TLS analyzer,", "tokens": [51214, 400, 498, 1100, 916, 307, 1075, 281, 979, 627, 662, 264, 5883, 20300, 295, 257, 1702, 4984, 11, 309, 30126, 264, 17240, 30918, 281, 264, 314, 19198, 6459, 4527, 11, 51614], "temperature": 0.0, "avg_logprob": -0.1362703305024367, "compression_ratio": 1.606177606177606, "no_speech_prob": 0.0016180542297661304}, {"id": 35, "seek": 13700, "start": 137.0, "end": 142.0, "text": " which can then extract that kind of information, and we put it in a log field as you see.", "tokens": [50364, 597, 393, 550, 8947, 300, 733, 295, 1589, 11, 293, 321, 829, 309, 294, 257, 3565, 2519, 382, 291, 536, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14036984947638784, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0008545676246285439}, {"id": 36, "seek": 13700, "start": 142.0, "end": 147.0, "text": " That is sort of the data that you would push to elastic search or Splunk and then do your analysis there.", "tokens": [50614, 663, 307, 1333, 295, 264, 1412, 300, 291, 576, 2944, 281, 17115, 3164, 420, 19788, 3197, 293, 550, 360, 428, 5215, 456, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14036984947638784, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0008545676246285439}, {"id": 37, "seek": 13700, "start": 147.0, "end": 150.0, "text": " That's sort of not Seek jobs, we just produce logs.", "tokens": [50864, 663, 311, 1333, 295, 406, 1100, 916, 4782, 11, 321, 445, 5258, 20820, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14036984947638784, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0008545676246285439}, {"id": 38, "seek": 13700, "start": 150.0, "end": 153.0, "text": " Okay.", "tokens": [51014, 1033, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14036984947638784, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0008545676246285439}, {"id": 39, "seek": 13700, "start": 153.0, "end": 155.0, "text": " It's a fairly old system.", "tokens": [51164, 467, 311, 257, 6457, 1331, 1185, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14036984947638784, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0008545676246285439}, {"id": 40, "seek": 13700, "start": 155.0, "end": 159.0, "text": " It has a custom scripting language, and it looks sort of, that's just a sketch.", "tokens": [51264, 467, 575, 257, 2375, 5755, 278, 2856, 11, 293, 309, 1542, 1333, 295, 11, 300, 311, 445, 257, 12325, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14036984947638784, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0008545676246285439}, {"id": 41, "seek": 13700, "start": 159.0, "end": 165.0, "text": " It's not actually going to work like this, but it sketches how the quick log entries created.", "tokens": [51464, 467, 311, 406, 767, 516, 281, 589, 411, 341, 11, 457, 309, 34547, 577, 264, 1702, 3565, 23041, 2942, 13, 51764], "temperature": 0.0, "avg_logprob": -0.14036984947638784, "compression_ratio": 1.6532846715328466, "no_speech_prob": 0.0008545676246285439}, {"id": 42, "seek": 16500, "start": 165.0, "end": 171.0, "text": " So there are two event handlers, one for initial packets, so whenever there's an initial packet, that event is raised,", "tokens": [50364, 407, 456, 366, 732, 2280, 1011, 11977, 11, 472, 337, 5883, 30364, 11, 370, 5699, 456, 311, 364, 5883, 20300, 11, 300, 2280, 307, 6005, 11, 50664], "temperature": 0.0, "avg_logprob": -0.15056450885275136, "compression_ratio": 1.8735177865612649, "no_speech_prob": 0.0017731275875121355}, {"id": 43, "seek": 16500, "start": 171.0, "end": 178.0, "text": " and we create a info record, which represents the quick log entry in the end.", "tokens": [50664, 293, 321, 1884, 257, 13614, 2136, 11, 597, 8855, 264, 1702, 3565, 8729, 294, 264, 917, 13, 51014], "temperature": 0.0, "avg_logprob": -0.15056450885275136, "compression_ratio": 1.8735177865612649, "no_speech_prob": 0.0017731275875121355}, {"id": 44, "seek": 16500, "start": 178.0, "end": 185.0, "text": " And then there's another event that is the SSL extension server name that is raised whenever there's an SNI extension in the client Hello.", "tokens": [51014, 400, 550, 456, 311, 1071, 2280, 300, 307, 264, 12238, 43, 10320, 7154, 1315, 300, 307, 6005, 5699, 456, 311, 364, 13955, 40, 10320, 294, 264, 6423, 2425, 13, 51364], "temperature": 0.0, "avg_logprob": -0.15056450885275136, "compression_ratio": 1.8735177865612649, "no_speech_prob": 0.0017731275875121355}, {"id": 45, "seek": 16500, "start": 185.0, "end": 190.0, "text": " And you can handle it and basically enrich that quick log entry with the server name or with the first name.", "tokens": [51364, 400, 291, 393, 4813, 309, 293, 1936, 18849, 300, 1702, 3565, 8729, 365, 264, 7154, 1315, 420, 365, 264, 700, 1315, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15056450885275136, "compression_ratio": 1.8735177865612649, "no_speech_prob": 0.0017731275875121355}, {"id": 46, "seek": 16500, "start": 190.0, "end": 192.0, "text": " That's just a heuristic here.", "tokens": [51614, 663, 311, 445, 257, 415, 374, 3142, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15056450885275136, "compression_ratio": 1.8735177865612649, "no_speech_prob": 0.0017731275875121355}, {"id": 47, "seek": 19200, "start": 192.0, "end": 199.0, "text": " The bottom is a sort of log write call where we actually then produce that JSON entry.", "tokens": [50364, 440, 2767, 307, 257, 1333, 295, 3565, 2464, 818, 689, 321, 767, 550, 5258, 300, 31828, 8729, 13, 50714], "temperature": 0.0, "avg_logprob": -0.15031123470950436, "compression_ratio": 1.5219298245614035, "no_speech_prob": 0.0007297699339687824}, {"id": 48, "seek": 19200, "start": 199.0, "end": 203.0, "text": " So yeah, but it might look a bit unusual in the beginning.", "tokens": [50714, 407, 1338, 11, 457, 309, 1062, 574, 257, 857, 10901, 294, 264, 2863, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15031123470950436, "compression_ratio": 1.5219298245614035, "no_speech_prob": 0.0007297699339687824}, {"id": 49, "seek": 19200, "start": 203.0, "end": 217.0, "text": " It's a fairly powerful language that has some network domain specific features that also allow you to write detections with Seek and sort of build advanced analysis also within that scripting language.", "tokens": [50914, 467, 311, 257, 6457, 4005, 2856, 300, 575, 512, 3209, 9274, 2685, 4122, 300, 611, 2089, 291, 281, 2464, 5531, 626, 365, 1100, 916, 293, 1333, 295, 1322, 7339, 5215, 611, 1951, 300, 5755, 278, 2856, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15031123470950436, "compression_ratio": 1.5219298245614035, "no_speech_prob": 0.0007297699339687824}, {"id": 50, "seek": 21700, "start": 217.0, "end": 229.0, "text": " What's not so great is sort of interaction with the outside world that log write, for example, is the thin layer above the whole C++ logging framework.", "tokens": [50364, 708, 311, 406, 370, 869, 307, 1333, 295, 9285, 365, 264, 2380, 1002, 300, 3565, 2464, 11, 337, 1365, 11, 307, 264, 5862, 4583, 3673, 264, 1379, 383, 25472, 27991, 8388, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1390728663249188, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.0022824364714324474}, {"id": 51, "seek": 21700, "start": 229.0, "end": 233.0, "text": " So that is not implemented in Seek script, but then you have to do that in C++.", "tokens": [50964, 407, 300, 307, 406, 12270, 294, 1100, 916, 5755, 11, 457, 550, 291, 362, 281, 360, 300, 294, 383, 25472, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1390728663249188, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.0022824364714324474}, {"id": 52, "seek": 21700, "start": 233.0, "end": 240.0, "text": " And usually any extension that you want to do, you have to resort to writing a plugin in C++.", "tokens": [51164, 400, 2673, 604, 10320, 300, 291, 528, 281, 360, 11, 291, 362, 281, 19606, 281, 3579, 257, 23407, 294, 383, 25472, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1390728663249188, "compression_ratio": 1.5776699029126213, "no_speech_prob": 0.0022824364714324474}, {"id": 53, "seek": 24000, "start": 240.0, "end": 247.0, "text": " Yeah, we do have so if you don't go to C++ route, we do have support for asynchronous HTTP requests.", "tokens": [50364, 865, 11, 321, 360, 362, 370, 498, 291, 500, 380, 352, 281, 383, 25472, 7955, 11, 321, 360, 362, 1406, 337, 49174, 33283, 12475, 13, 50714], "temperature": 0.0, "avg_logprob": -0.20761232061700508, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0043080453760921955}, {"id": 54, "seek": 24000, "start": 247.0, "end": 259.0, "text": " And if you look a bit under the hood, then the thing is spawning is read and it's launching for writing stuff into temp directory and into a file still and then it reads them and gives them back to the script.", "tokens": [50714, 400, 498, 291, 574, 257, 857, 833, 264, 13376, 11, 550, 264, 551, 307, 637, 35880, 307, 1401, 293, 309, 311, 18354, 337, 3579, 1507, 666, 18274, 21120, 293, 666, 257, 3991, 920, 293, 550, 309, 15700, 552, 293, 2709, 552, 646, 281, 264, 5755, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20761232061700508, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0043080453760921955}, {"id": 55, "seek": 24000, "start": 259.0, "end": 263.0, "text": " So it's a really scary implementation of an HTTP request.", "tokens": [51314, 407, 309, 311, 257, 534, 6958, 11420, 295, 364, 33283, 5308, 13, 51514], "temperature": 0.0, "avg_logprob": -0.20761232061700508, "compression_ratio": 1.6211453744493391, "no_speech_prob": 0.0043080453760921955}, {"id": 56, "seek": 26300, "start": 263.0, "end": 275.0, "text": " So the idea was to, well, why don't we use a language that maybe does provide all that stuff and sort of has a rich ecosystem and has is well known as well.", "tokens": [50364, 407, 264, 1558, 390, 281, 11, 731, 11, 983, 500, 380, 321, 764, 257, 2856, 300, 1310, 775, 2893, 439, 300, 1507, 293, 1333, 295, 575, 257, 4593, 11311, 293, 575, 307, 731, 2570, 382, 731, 13, 50964], "temperature": 0.0, "avg_logprob": -0.24025994452877322, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.00881208572536707}, {"id": 57, "seek": 26300, "start": 275.0, "end": 282.0, "text": " And particularly the Node.js, because of the libraries and the NPM system, so that there was sort of the idea.", "tokens": [50964, 400, 4098, 264, 38640, 13, 25530, 11, 570, 295, 264, 15148, 293, 264, 426, 18819, 1185, 11, 370, 300, 456, 390, 1333, 295, 264, 1558, 13, 51314], "temperature": 0.0, "avg_logprob": -0.24025994452877322, "compression_ratio": 1.5170454545454546, "no_speech_prob": 0.00881208572536707}, {"id": 58, "seek": 28200, "start": 282.0, "end": 289.0, "text": " And as a twist, we are doing this as a plugin and not by patching Seek source code base.", "tokens": [50364, 400, 382, 257, 8203, 11, 321, 366, 884, 341, 382, 257, 23407, 293, 406, 538, 9972, 278, 1100, 916, 4009, 3089, 3096, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1878939572502585, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.09119202941656113}, {"id": 59, "seek": 28200, "start": 289.0, "end": 295.0, "text": " We just want to build something external to add support to Seek to also use JavaScript.", "tokens": [50714, 492, 445, 528, 281, 1322, 746, 8320, 281, 909, 1406, 281, 1100, 916, 281, 611, 764, 15778, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1878939572502585, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.09119202941656113}, {"id": 60, "seek": 28200, "start": 295.0, "end": 309.0, "text": " So quickly about plugins. They're basically shared libraries that seek loads at startup and within that plugin you can access Seek's C++ API or also hook into certain execution paths.", "tokens": [51014, 407, 2661, 466, 33759, 13, 814, 434, 1936, 5507, 15148, 300, 8075, 12668, 412, 18578, 293, 1951, 300, 23407, 291, 393, 2105, 1100, 916, 311, 383, 25472, 9362, 420, 611, 6328, 666, 1629, 15058, 14518, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1878939572502585, "compression_ratio": 1.5254237288135593, "no_speech_prob": 0.09119202941656113}, {"id": 61, "seek": 30900, "start": 309.0, "end": 325.0, "text": " For example, whenever a new connection is, so new connection state is created, you can implement the hook set up analyzer tree and attach something to that connection usually analyzers, a protocol analyzer we would say.", "tokens": [50364, 1171, 1365, 11, 5699, 257, 777, 4984, 307, 11, 370, 777, 4984, 1785, 307, 2942, 11, 291, 393, 4445, 264, 6328, 992, 493, 6459, 4527, 4230, 293, 5085, 746, 281, 300, 4984, 2673, 6459, 41698, 11, 257, 10336, 6459, 4527, 321, 576, 584, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2962189316749573, "compression_ratio": 1.5642857142857143, "no_speech_prob": 0.003519106889143586}, {"id": 62, "seek": 32500, "start": 325.0, "end": 339.0, "text": " They also really made components where basically implemented against an interface. There's no component for a whole scripting language, so we sort of resort to the first two to implement the JavaScript support.", "tokens": [50364, 814, 611, 534, 1027, 6677, 689, 1936, 12270, 1970, 364, 9226, 13, 821, 311, 572, 6542, 337, 257, 1379, 5755, 278, 2856, 11, 370, 321, 1333, 295, 19606, 281, 264, 700, 732, 281, 4445, 264, 15778, 1406, 13, 51064], "temperature": 0.0, "avg_logprob": -0.274785622306492, "compression_ratio": 1.4304635761589404, "no_speech_prob": 0.020844968035817146}, {"id": 63, "seek": 32500, "start": 339.0, "end": 343.0, "text": " Okay.", "tokens": [51064, 1033, 13, 51264], "temperature": 0.0, "avg_logprob": -0.274785622306492, "compression_ratio": 1.4304635761589404, "no_speech_prob": 0.020844968035817146}, {"id": 64, "seek": 34300, "start": 343.0, "end": 354.0, "text": " So that top hopefully doesn't look too unfamiliar if you have some JavaScript. There's an event object on the left that is called Seek, sort of a global object.", "tokens": [50364, 407, 300, 1192, 4696, 1177, 380, 574, 886, 29415, 498, 291, 362, 512, 15778, 13, 821, 311, 364, 2280, 2657, 322, 264, 1411, 300, 307, 1219, 1100, 916, 11, 1333, 295, 257, 4338, 2657, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2854585145649157, "compression_ratio": 1.5660377358490567, "no_speech_prob": 0.003455112688243389}, {"id": 65, "seek": 34300, "start": 354.0, "end": 364.0, "text": " There's a well known on function where you register that an additional function for a certain event in M. So that that looks more usual problem in the Seek script example.", "tokens": [50914, 821, 311, 257, 731, 2570, 322, 2445, 689, 291, 7280, 300, 364, 4497, 2445, 337, 257, 1629, 2280, 294, 376, 13, 407, 300, 300, 1542, 544, 7713, 1154, 294, 264, 1100, 916, 5755, 1365, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2854585145649157, "compression_ratio": 1.5660377358490567, "no_speech_prob": 0.003455112688243389}, {"id": 66, "seek": 36400, "start": 364.0, "end": 383.0, "text": " And as an addition, there's the there's the HDT module from our HDPS module from Node and there's also an example how you could put how you could post the connection you had the end those SSR server names mentioned before to an HDP endpoint just from within Seek script.", "tokens": [50364, 400, 382, 364, 4500, 11, 456, 311, 264, 456, 311, 264, 12149, 51, 10088, 490, 527, 12149, 6273, 10088, 490, 38640, 293, 456, 311, 611, 364, 1365, 577, 291, 727, 829, 577, 291, 727, 2183, 264, 4984, 291, 632, 264, 917, 729, 12238, 49, 7154, 5288, 2835, 949, 281, 364, 12149, 47, 35795, 445, 490, 1951, 1100, 916, 5755, 13, 51314], "temperature": 0.0, "avg_logprob": -0.31885814666748047, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.027402428910136223}, {"id": 67, "seek": 38300, "start": 383.0, "end": 396.0, "text": " So we want to get there. And the first step is to, as you prevent Seek from interpreting .js files as Seek script, which it would do with default.", "tokens": [50364, 407, 321, 528, 281, 483, 456, 13, 400, 264, 700, 1823, 307, 281, 11, 382, 291, 4871, 1100, 916, 490, 37395, 2411, 25530, 7098, 382, 1100, 916, 5755, 11, 597, 309, 576, 360, 365, 7576, 13, 51014], "temperature": 0.0, "avg_logprob": -0.20362008747301605, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.0287461094558239}, {"id": 68, "seek": 38300, "start": 396.0, "end": 411.0, "text": " And you can implement hook load file and basically check if the if the file name that Seek is attempting to load is ending with .js and return one basically says well don't bother about it I'm taking over and we are stashing away those JavaScript files.", "tokens": [51014, 400, 291, 393, 4445, 6328, 3677, 3991, 293, 1936, 1520, 498, 264, 498, 264, 3991, 1315, 300, 1100, 916, 307, 22001, 281, 3677, 307, 8121, 365, 2411, 25530, 293, 2736, 472, 1936, 1619, 731, 500, 380, 8677, 466, 309, 286, 478, 1940, 670, 293, 321, 366, 342, 11077, 1314, 729, 15778, 7098, 13, 51764], "temperature": 0.0, "avg_logprob": -0.20362008747301605, "compression_ratio": 1.6326530612244898, "no_speech_prob": 0.0287461094558239}, {"id": 69, "seek": 41100, "start": 411.0, "end": 420.0, "text": " And that works for files in the command line or also those with directives loaded. So the add load directive.", "tokens": [50364, 400, 300, 1985, 337, 7098, 294, 264, 5622, 1622, 420, 611, 729, 365, 2047, 1539, 13210, 13, 407, 264, 909, 3677, 45444, 13, 50814], "temperature": 0.0, "avg_logprob": -0.27175225438298406, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.010284020565450191}, {"id": 70, "seek": 41100, "start": 420.0, "end": 431.0, "text": " Step two is sort of to initialize the whole JavaScript engine, sort of the V8 engine and the Node.js environment. There's documentation about that. There's a link here. This is sort of a sketch.", "tokens": [50814, 5470, 732, 307, 1333, 295, 281, 5883, 1125, 264, 1379, 15778, 2848, 11, 1333, 295, 264, 691, 23, 2848, 293, 264, 38640, 13, 25530, 2823, 13, 821, 311, 14333, 466, 300, 13, 821, 311, 257, 2113, 510, 13, 639, 307, 1333, 295, 257, 12325, 13, 51364], "temperature": 0.0, "avg_logprob": -0.27175225438298406, "compression_ratio": 1.5916230366492146, "no_speech_prob": 0.010284020565450191}, {"id": 71, "seek": 43100, "start": 431.0, "end": 443.0, "text": " It's a bit complicated but I have good documentation about it. What is happening at that point is also that we are loading the JavaScript files and so the top level Seek on calls are actually executed.", "tokens": [50364, 467, 311, 257, 857, 6179, 457, 286, 362, 665, 14333, 466, 309, 13, 708, 307, 2737, 412, 300, 935, 307, 611, 300, 321, 366, 15114, 264, 15778, 7098, 293, 370, 264, 1192, 1496, 1100, 916, 322, 5498, 366, 767, 17577, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14504829351452814, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.013194547966122627}, {"id": 72, "seek": 43100, "start": 443.0, "end": 452.0, "text": " So we need to provide this Seek on call already. So I'll say this is just step three.", "tokens": [50964, 407, 321, 643, 281, 2893, 341, 1100, 916, 322, 818, 1217, 13, 407, 286, 603, 584, 341, 307, 445, 1823, 1045, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14504829351452814, "compression_ratio": 1.5185185185185186, "no_speech_prob": 0.013194547966122627}, {"id": 73, "seek": 45200, "start": 452.0, "end": 464.0, "text": " I need to slow down a bit. Just for myself. So step three is the call to Seek on is basically getting an event handler name and listener function.", "tokens": [50364, 286, 643, 281, 2964, 760, 257, 857, 13, 1449, 337, 2059, 13, 407, 1823, 1045, 307, 264, 818, 281, 1100, 916, 322, 307, 1936, 1242, 364, 2280, 41967, 1315, 293, 31569, 2445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.18243482238367983, "compression_ratio": 1.6180904522613064, "no_speech_prob": 0.02749069221317768}, {"id": 74, "seek": 45200, "start": 464.0, "end": 475.0, "text": " And with that event handler name we can use C++ APIs to look at the event handler object which is a Seek specific object representing that, well, belonging to that event name.", "tokens": [50964, 400, 365, 300, 2280, 41967, 1315, 321, 393, 764, 383, 25472, 21445, 281, 574, 412, 264, 2280, 41967, 2657, 597, 307, 257, 1100, 916, 2685, 2657, 13460, 300, 11, 731, 11, 22957, 281, 300, 2280, 1315, 13, 51514], "temperature": 0.0, "avg_logprob": -0.18243482238367983, "compression_ratio": 1.6180904522613064, "no_speech_prob": 0.02749069221317768}, {"id": 75, "seek": 47500, "start": 475.0, "end": 484.0, "text": " From that we can get a script function which usually has a list of bodies and each of the bodies contains a statement list and then there are further statements.", "tokens": [50364, 3358, 300, 321, 393, 483, 257, 5755, 2445, 597, 2673, 575, 257, 1329, 295, 7510, 293, 1184, 295, 264, 7510, 8306, 257, 5629, 1329, 293, 550, 456, 366, 3052, 12363, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11896590528817012, "compression_ratio": 1.656441717791411, "no_speech_prob": 0.02327936515212059}, {"id": 76, "seek": 47500, "start": 484.0, "end": 492.0, "text": " So usually the script execution is interpreted. So it just runs down all those statements and executes them.", "tokens": [50814, 407, 2673, 264, 5755, 15058, 307, 26749, 13, 407, 309, 445, 6676, 760, 439, 729, 12363, 293, 4454, 1819, 552, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11896590528817012, "compression_ratio": 1.656441717791411, "no_speech_prob": 0.02327936515212059}, {"id": 77, "seek": 49200, "start": 492.0, "end": 507.0, "text": " What the plugin can do is add another body into that list of bodies and provide the custom statement subclass which when executed really just calls into JavaScript and executes a V8 function.", "tokens": [50364, 708, 264, 23407, 393, 360, 307, 909, 1071, 1772, 666, 300, 1329, 295, 7510, 293, 2893, 264, 2375, 5629, 1422, 11665, 597, 562, 17577, 534, 445, 5498, 666, 15778, 293, 4454, 1819, 257, 691, 23, 2445, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1864606913398294, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.011286290362477303}, {"id": 78, "seek": 49200, "start": 507.0, "end": 515.0, "text": " So when this first happened it was really exciting. You see a hello printer from Seek and a hello printer from console.", "tokens": [51114, 407, 562, 341, 700, 2011, 309, 390, 534, 4670, 13, 509, 536, 257, 7751, 16671, 490, 1100, 916, 293, 257, 7751, 16671, 490, 11076, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1864606913398294, "compression_ratio": 1.5628140703517588, "no_speech_prob": 0.011286290362477303}, {"id": 79, "seek": 51500, "start": 515.0, "end": 523.0, "text": " It was nice to get done. What was not so nice is that you need to map types between those two languages.", "tokens": [50364, 467, 390, 1481, 281, 483, 1096, 13, 708, 390, 406, 370, 1481, 307, 300, 291, 643, 281, 4471, 3467, 1296, 729, 732, 8650, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14661936692788569, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.02588775008916855}, {"id": 80, "seek": 51500, "start": 523.0, "end": 530.0, "text": " So there's different types on the Seek side and JavaScript has other types.", "tokens": [50764, 407, 456, 311, 819, 3467, 322, 264, 1100, 916, 1252, 293, 15778, 575, 661, 3467, 13, 51114], "temperature": 0.0, "avg_logprob": -0.14661936692788569, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.02588775008916855}, {"id": 81, "seek": 51500, "start": 530.0, "end": 537.0, "text": " For example the address or subnet type on the Seek side we currently just mapped to strings in readable form.", "tokens": [51114, 1171, 1365, 264, 2985, 420, 1422, 7129, 2010, 322, 264, 1100, 916, 1252, 321, 4362, 445, 33318, 281, 13985, 294, 49857, 1254, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14661936692788569, "compression_ratio": 1.5846994535519126, "no_speech_prob": 0.02588775008916855}, {"id": 82, "seek": 53700, "start": 537.0, "end": 545.0, "text": " It's not the most performant but it was nice to have Jason stringify and have IP addresses like that.", "tokens": [50364, 467, 311, 406, 264, 881, 2042, 394, 457, 309, 390, 1481, 281, 362, 11181, 6798, 2505, 293, 362, 8671, 16862, 411, 300, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1876203559693836, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.01341167837381363}, {"id": 83, "seek": 53700, "start": 545.0, "end": 549.0, "text": " I'm not going to talk much more about this.", "tokens": [50764, 286, 478, 406, 516, 281, 751, 709, 544, 466, 341, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1876203559693836, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.01341167837381363}, {"id": 84, "seek": 53700, "start": 549.0, "end": 556.0, "text": " The last step was to integrate both of the IO loops.", "tokens": [50964, 440, 1036, 1823, 390, 281, 13365, 1293, 295, 264, 39839, 16121, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1876203559693836, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.01341167837381363}, {"id": 85, "seek": 53700, "start": 556.0, "end": 564.0, "text": " Seek has its own IO loop that is KQ based and Node.js has also an IO loop which is libUV based.", "tokens": [51314, 1100, 916, 575, 1080, 1065, 39839, 6367, 300, 307, 591, 48, 2361, 293, 38640, 13, 25530, 575, 611, 364, 39839, 6367, 597, 307, 22854, 52, 53, 2361, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1876203559693836, "compression_ratio": 1.5076923076923077, "no_speech_prob": 0.01341167837381363}, {"id": 86, "seek": 56400, "start": 564.0, "end": 576.0, "text": " Usually the Seek IO loop is blocking on an event call waiting for a packet to be served or a block of packets or a timer has expired or something else happening and an act on it.", "tokens": [50364, 11419, 264, 1100, 916, 39839, 6367, 307, 17776, 322, 364, 2280, 818, 3806, 337, 257, 20300, 281, 312, 7584, 420, 257, 3461, 295, 30364, 420, 257, 19247, 575, 36587, 420, 746, 1646, 2737, 293, 364, 605, 322, 309, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17619752883911133, "compression_ratio": 1.67, "no_speech_prob": 0.00224590627476573}, {"id": 87, "seek": 56400, "start": 576.0, "end": 589.0, "text": " What the plugin can do is register something called an IO source and in the case of libUV the plugin takes the backend file descriptor of the libUV IO loop", "tokens": [50964, 708, 264, 23407, 393, 360, 307, 7280, 746, 1219, 364, 39839, 4009, 293, 294, 264, 1389, 295, 22854, 52, 53, 264, 23407, 2516, 264, 38087, 3991, 31280, 284, 295, 264, 22854, 52, 53, 39839, 6367, 51614], "temperature": 0.0, "avg_logprob": -0.17619752883911133, "compression_ratio": 1.67, "no_speech_prob": 0.00224590627476573}, {"id": 88, "seek": 58900, "start": 589.0, "end": 599.0, "text": " and installs it into the Seek IO loop which means that whenever something has to be done on the Node.js side like a client is connecting on a listening socket", "tokens": [50364, 293, 3625, 82, 309, 666, 264, 1100, 916, 39839, 6367, 597, 1355, 300, 5699, 746, 575, 281, 312, 1096, 322, 264, 38640, 13, 25530, 1252, 411, 257, 6423, 307, 11015, 322, 257, 4764, 19741, 50864], "temperature": 0.0, "avg_logprob": -0.1683727741241455, "compression_ratio": 1.6377551020408163, "no_speech_prob": 0.08303060382604599}, {"id": 89, "seek": 58900, "start": 599.0, "end": 607.0, "text": " then the backend file descriptor of the libUV loop becomes ready and the Seek IO loop is waking up.", "tokens": [50864, 550, 264, 38087, 3991, 31280, 284, 295, 264, 22854, 52, 53, 6367, 3643, 1919, 293, 264, 1100, 916, 39839, 6367, 307, 20447, 493, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1683727741241455, "compression_ratio": 1.6377551020408163, "no_speech_prob": 0.08303060382604599}, {"id": 90, "seek": 58900, "start": 607.0, "end": 614.0, "text": " Recognizing this is Node.js file descriptor that became ready.", "tokens": [51264, 44682, 3319, 341, 307, 38640, 13, 25530, 3991, 31280, 284, 300, 3062, 1919, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1683727741241455, "compression_ratio": 1.6377551020408163, "no_speech_prob": 0.08303060382604599}, {"id": 91, "seek": 61400, "start": 614.0, "end": 629.0, "text": " I need to transfer control over to that loop and the plugin runs the Node.js loop non-blocking until there's nothing left to be done and control is then transferred over back to Seek.", "tokens": [50364, 286, 643, 281, 5003, 1969, 670, 281, 300, 6367, 293, 264, 23407, 6676, 264, 38640, 13, 25530, 6367, 2107, 12, 28830, 278, 1826, 456, 311, 1825, 1411, 281, 312, 1096, 293, 1969, 307, 550, 15809, 670, 646, 281, 1100, 916, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17058051427205403, "compression_ratio": 1.5286624203821657, "no_speech_prob": 0.007129788864403963}, {"id": 92, "seek": 61400, "start": 629.0, "end": 636.0, "text": " Yeah, that was the most tricky part of the whole plugin.", "tokens": [51114, 865, 11, 300, 390, 264, 881, 12414, 644, 295, 264, 1379, 23407, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17058051427205403, "compression_ratio": 1.5286624203821657, "no_speech_prob": 0.007129788864403963}, {"id": 93, "seek": 63600, "start": 636.0, "end": 646.0, "text": " I didn't talk much about the picture before, the architecture, but where I would position that is sort of, it's not completely technical to correct,", "tokens": [50364, 286, 994, 380, 751, 709, 466, 264, 3036, 949, 11, 264, 9482, 11, 457, 689, 286, 576, 2535, 300, 307, 1333, 295, 11, 309, 311, 406, 2584, 6191, 281, 3006, 11, 50864], "temperature": 0.0, "avg_logprob": -0.21119680858793713, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.015369253233075142}, {"id": 94, "seek": 63600, "start": 646.0, "end": 664.0, "text": " but if we have extended the event engine a bit with Node.js event engine down there and then also the Seek script language, so we have extended everything with being able to also use JavaScript instead of the Seek script language.", "tokens": [50864, 457, 498, 321, 362, 10913, 264, 2280, 2848, 257, 857, 365, 38640, 13, 25530, 2280, 2848, 760, 456, 293, 550, 611, 264, 1100, 916, 5755, 2856, 11, 370, 321, 362, 10913, 1203, 365, 885, 1075, 281, 611, 764, 15778, 2602, 295, 264, 1100, 916, 5755, 2856, 13, 51764], "temperature": 0.0, "avg_logprob": -0.21119680858793713, "compression_ratio": 1.6995515695067265, "no_speech_prob": 0.015369253233075142}, {"id": 95, "seek": 66400, "start": 664.0, "end": 674.0, "text": " As a summary, I find it really impressive that we could do that without actually patching Seek.", "tokens": [50364, 1018, 257, 12691, 11, 286, 915, 309, 534, 8992, 300, 321, 727, 360, 300, 1553, 767, 9972, 278, 1100, 916, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14382222493489583, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.018216975033283234}, {"id": 96, "seek": 66400, "start": 674.0, "end": 682.0, "text": " Everything was in place to pull this off which is testament to how Seek was built over the years really.", "tokens": [50864, 5471, 390, 294, 1081, 281, 2235, 341, 766, 597, 307, 35499, 281, 577, 1100, 916, 390, 3094, 670, 264, 924, 534, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14382222493489583, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.018216975033283234}, {"id": 97, "seek": 66400, "start": 682.0, "end": 689.0, "text": " We're not going to replace the Seek scripts that are existing with JavaScript, that is not sort of the plan.", "tokens": [51264, 492, 434, 406, 516, 281, 7406, 264, 1100, 916, 23294, 300, 366, 6741, 365, 15778, 11, 300, 307, 406, 1333, 295, 264, 1393, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14382222493489583, "compression_ratio": 1.5527638190954773, "no_speech_prob": 0.018216975033283234}, {"id": 98, "seek": 68900, "start": 689.0, "end": 702.0, "text": " The integrations you wanted to build or maybe just wanted to have proof of concepts of things that you previously needed to quickly use C++ and find some C++ library to do whatever.", "tokens": [50364, 440, 3572, 763, 291, 1415, 281, 1322, 420, 1310, 445, 1415, 281, 362, 8177, 295, 10392, 295, 721, 300, 291, 8046, 2978, 281, 2661, 764, 383, 25472, 293, 915, 512, 383, 25472, 6405, 281, 360, 2035, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17165877455371922, "compression_ratio": 1.4078212290502794, "no_speech_prob": 0.003072995226830244}, {"id": 99, "seek": 68900, "start": 702.0, "end": 711.0, "text": " You can now tap into NPR ecosystem or JavaScript and try it with that.", "tokens": [51014, 509, 393, 586, 5119, 666, 426, 15958, 11311, 420, 15778, 293, 853, 309, 365, 300, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17165877455371922, "compression_ratio": 1.4078212290502794, "no_speech_prob": 0.003072995226830244}, {"id": 100, "seek": 71100, "start": 711.0, "end": 720.0, "text": " That plugin is sort of coming with Seek 6.0 by default, so if you have LIT node installed and you compile Seek it will just be supported really.", "tokens": [50364, 663, 23407, 307, 1333, 295, 1348, 365, 1100, 916, 1386, 13, 15, 538, 7576, 11, 370, 498, 291, 362, 441, 3927, 9984, 8899, 293, 291, 31413, 1100, 916, 309, 486, 445, 312, 8104, 534, 13, 50814], "temperature": 0.0, "avg_logprob": -0.19150398623558781, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.06153425946831703}, {"id": 101, "seek": 71100, "start": 720.0, "end": 725.0, "text": " And our container images also have it built in by default as well.", "tokens": [50814, 400, 527, 10129, 5267, 611, 362, 309, 3094, 294, 538, 7576, 382, 731, 13, 51064], "temperature": 0.0, "avg_logprob": -0.19150398623558781, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.06153425946831703}, {"id": 102, "seek": 71100, "start": 725.0, "end": 728.0, "text": " Any questions about that?", "tokens": [51064, 2639, 1651, 466, 300, 30, 51214], "temperature": 0.0, "avg_logprob": -0.19150398623558781, "compression_ratio": 1.4107142857142858, "no_speech_prob": 0.06153425946831703}, {"id": 103, "seek": 72800, "start": 728.0, "end": 752.0, "text": " Any questions?", "tokens": [50364, 2639, 1651, 30, 51564], "temperature": 0.0, "avg_logprob": -0.467970677784511, "compression_ratio": 0.7575757575757576, "no_speech_prob": 0.1888798624277115}, {"id": 104, "seek": 72800, "start": 752.0, "end": 754.0, "text": " Hi, Armin.", "tokens": [51564, 2421, 11, 1587, 2367, 13, 51664], "temperature": 0.0, "avg_logprob": -0.467970677784511, "compression_ratio": 0.7575757575757576, "no_speech_prob": 0.1888798624277115}, {"id": 105, "seek": 75400, "start": 754.0, "end": 763.0, "text": " Have you evaluated the performance of this? Does it impact performance a lot?", "tokens": [50364, 3560, 291, 25509, 264, 3389, 295, 341, 30, 4402, 309, 2712, 3389, 257, 688, 30, 50814], "temperature": 0.0, "avg_logprob": -0.23656731463493186, "compression_ratio": 1.389261744966443, "no_speech_prob": 0.1766112744808197}, {"id": 106, "seek": 75400, "start": 763.0, "end": 777.0, "text": " I would say it runs slower than just Seek and interpreted scripting, mostly because we need to translate between those two types.", "tokens": [50814, 286, 576, 584, 309, 6676, 14009, 813, 445, 1100, 916, 293, 26749, 5755, 278, 11, 5240, 570, 321, 643, 281, 13799, 1296, 729, 732, 3467, 13, 51514], "temperature": 0.0, "avg_logprob": -0.23656731463493186, "compression_ratio": 1.389261744966443, "no_speech_prob": 0.1766112744808197}, {"id": 107, "seek": 77700, "start": 777.0, "end": 785.0, "text": " I would also currently position it to not necessarily run JavaScript in the packet path unless you are really adventurous.", "tokens": [50364, 286, 576, 611, 4362, 2535, 309, 281, 406, 4725, 1190, 15778, 294, 264, 20300, 3100, 5969, 291, 366, 534, 46163, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1682440893990653, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.11079864203929901}, {"id": 108, "seek": 77700, "start": 785.0, "end": 792.0, "text": " We have also Seek processes like the proxy and the manager that don't do packet processing.", "tokens": [50764, 492, 362, 611, 1100, 916, 7555, 411, 264, 29690, 293, 264, 6598, 300, 500, 380, 360, 20300, 9007, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1682440893990653, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.11079864203929901}, {"id": 109, "seek": 77700, "start": 792.0, "end": 794.0, "text": " They have a lot more cycles there.", "tokens": [51114, 814, 362, 257, 688, 544, 17796, 456, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1682440893990653, "compression_ratio": 1.4821428571428572, "no_speech_prob": 0.11079864203929901}, {"id": 110, "seek": 79400, "start": 794.0, "end": 810.0, "text": " If you run JavaScript there and do sort of pulling in IOC information, that's one use case, that you can do in a node that is not in the packet path.", "tokens": [50364, 759, 291, 1190, 15778, 456, 293, 360, 1333, 295, 8407, 294, 286, 30087, 1589, 11, 300, 311, 472, 764, 1389, 11, 300, 291, 393, 360, 294, 257, 9984, 300, 307, 406, 294, 264, 20300, 3100, 13, 51164], "temperature": 0.0, "avg_logprob": -0.22586356892305262, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.2822772264480591}, {"id": 111, "seek": 79400, "start": 810.0, "end": 813.0, "text": " We would be interested in performance numbers.", "tokens": [51164, 492, 576, 312, 3102, 294, 3389, 3547, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22586356892305262, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.2822772264480591}, {"id": 112, "seek": 79400, "start": 813.0, "end": 815.0, "text": " Thanks.", "tokens": [51314, 2561, 13, 51414], "temperature": 0.0, "avg_logprob": -0.22586356892305262, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.2822772264480591}, {"id": 113, "seek": 79400, "start": 815.0, "end": 820.0, "text": " Have you explored other languages as well, apart from JavaScript?", "tokens": [51414, 3560, 291, 24016, 661, 8650, 382, 731, 11, 4936, 490, 15778, 30, 51664], "temperature": 0.0, "avg_logprob": -0.22586356892305262, "compression_ratio": 1.4361702127659575, "no_speech_prob": 0.2822772264480591}, {"id": 114, "seek": 82000, "start": 820.0, "end": 830.0, "text": " Not explored, I sort of have in my mind as a proof of concept Python, but JavaScript was sort of asynchronous, it's non-blocking.", "tokens": [50364, 1726, 24016, 11, 286, 1333, 295, 362, 294, 452, 1575, 382, 257, 8177, 295, 3410, 15329, 11, 457, 15778, 390, 1333, 295, 49174, 11, 309, 311, 2107, 12, 28830, 278, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2686301144686612, "compression_ratio": 1.353932584269663, "no_speech_prob": 0.09421426802873611}, {"id": 115, "seek": 82000, "start": 830.0, "end": 836.0, "text": " That's a paradigm there and that's what we needed as a replacement for Seek script.", "tokens": [50864, 663, 311, 257, 24709, 456, 293, 300, 311, 437, 321, 2978, 382, 257, 14419, 337, 1100, 916, 5755, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2686301144686612, "compression_ratio": 1.353932584269663, "no_speech_prob": 0.09421426802873611}, {"id": 116, "seek": 82000, "start": 836.0, "end": 838.0, "text": " Thanks.", "tokens": [51164, 2561, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2686301144686612, "compression_ratio": 1.353932584269663, "no_speech_prob": 0.09421426802873611}, {"id": 117, "seek": 82000, "start": 838.0, "end": 844.0, "text": " Any more questions?", "tokens": [51264, 2639, 544, 1651, 30, 51564], "temperature": 0.0, "avg_logprob": -0.2686301144686612, "compression_ratio": 1.353932584269663, "no_speech_prob": 0.09421426802873611}, {"id": 118, "seek": 84400, "start": 844.0, "end": 846.0, "text": " Thank you very much.", "tokens": [50364, 1044, 291, 588, 709, 13, 50464], "temperature": 0.0, "avg_logprob": -0.17561060190200806, "compression_ratio": 0.7142857142857143, "no_speech_prob": 0.15609051287174225}], "language": "en"}