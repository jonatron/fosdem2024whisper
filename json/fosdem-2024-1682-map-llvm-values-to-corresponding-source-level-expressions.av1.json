{"text": " Yeah, it's done. Yeah, well, we're about to start, so meet your Euro. Yeah, really. You're already on it? Really? I don't think so. Already on it? Yeah. You think it's on it, right? Yeah. It's on where do you want it? Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Thank you. Hi, everybody. My name is Shivam and I work for KDAB and I also work this summer, Google Summer of Code with LLVM, working on this project, this mapping LLVM values to the corresponding source level expressions. And, but why? So the challenge of understanding the compiler optimizations. So, so compilers are basically performing different sorts of optimizations and it's not always possible that it's going to be optimized or basically vectorized. So, we basically our motivation was vectorization for the first because we wanted to include those optimization remarks in for the vectorization part. So, our motivation was vectorization. So, it's not always possible. So, your compiler can always vectorize your code. So, there's some sort of data dependencies there where that's why your compilers cannot actually vectorize all the time. So, on that cases you have to emit a good remarks and I'll let you know what currently clang actually generates as a remark. So, understanding why and how these optimization occurs is not always straightforward. Even the authors or vectorizer don't know what's going on if the vectorization didn't happen. So, consider this example. So, you can see there is a data dependencies between A of i and A of i plus 3. So, this loop clang will not be not able to vectorize this code. Okay. So, see this remark that produced with the clang which is that loop not vectorize. You can use pragma loop distribute. So, you can compile the tries to distribute the loop and it might be able to vectorize in some sense. But, just see the remarks. It's not clear that what actually gone wrong here and where's the data dependency. It's not telling you that where's the data dependency actually was and so you can improve the code itself. Right. So, it just that remarks and you can see this not actually clear. Right. So, it's a bit unclear and if you can have such this remarks nothing much just two expressions are the dependent source and the dependence destination for example. So, you know that okay there is a data dependencies between two to these two locations and so if you are aware of the code so you are going to modify your code and you might be able to modify in the way so you know that it will be possible for the compiler to vectorize now. So, you can modify the code by looking at this these expressions for example. So, yeah so it's going to surely enhance the remarks include the exact so if it includes the exact source and destination of the dependencies within the error for example and it will pinpoint the lines of those dependencies and let's look at the impact of these enhanced remarks so it would be clarity for the developers so they can quickly look where the dependencies are actually occurring and so they can improve their code and probably make it vectorizable and efficiency in the terms of that they can save time and improve efficiency by reducing the need for the deep debugging that where was the actual data dependencies so you can just look at the optimization remarks and you get the quite a lot of information that okay there is the data dependencies between two load and stores. So, let's look at the approach that we took for solve this problem or this project so approach was very simple to just utilize the debug information that available into the intermediate representation right so to recreate the variable and the function names lost during the optimization so the optimizations are actually a problem in our case because we currently don't know how to build those for example instructions that's lost into the optimization for example so if you see a multiplier if you see a MUL instruction in the IR so compiler might optimize that into shift left so the MUL was the original information that was actually available in the source code but right now we have shift left so we just lose the context that what was the actual source level information so that's still a problem for us and we have different approach for that but we didn't see to be so we see that it was not much a performance good so it was very bad so we wanted to clone the module so we have so we can look that what's happened after each optimizations so we can have the clone of the original IR and we can see that what's going on after every pass of optimization or every implementation passes so if you look at the different transformation pass and you have to look over that what's the thing that gets changed and anything that you have stored that okay there was the original instruction as MUL but right now it gets changed to shift left so you see that okay the MUL gets changed to shift left so you have to cache the expressions basically to reload the things in a new way so if there is no need for that so we will proceed after it so let's see how to utilize that information that available in the IR so LLVM uses a small set of infernsic functions if you are aware of so those are provided for the debug information so they contains different metadata so they have different arguments so these infernsic functions are named prefixed by this LLVM.debug and these things helps you to track the variables through the optimizations and code generation so if you look in the IR so if you dump your IR with the dash G symbol so you will get to know about the LLVM.debug.value or .declare so those contains everything related to the source level things so they contains the metadata information and the metadata are there for that so they can give you a lot more information about what was actually in the source so for example like variable names so when you trace the metadata so you can get the variable name from the actual source so for us these two infernsic functions were very important the debug.declare and the debug.value and let's try to understand a bit so if you can see the I is allocated and just below it you can see the call to the infernsic function which is .debug.declare and these you can see the three arguments in the infernsic function the first represents the first will always represent the address of the variable the second metadata always pointing to the for example you can see the DI local variable so which contains this is a metadata node and it contains the variable name so what was the actual name so you can see the actual name was I in the actual source expression so you can when you trace back the information so you can retrieve the name so these are these infernsic functions so the second can really help us a lot and the second was actually the source just the source information like name and the third argument is DI expression and generally DI expression is useful as a complex expression so you have expressions like for example int a is equals to b plus c a DI expression can hold that stuffs yeah and yeah so debug declare is used for that and the second is debug.value so .value is very similar to it it's just that when I is gets updated when a value is updated so debug value can up and so everything goes in the debug value for the same so we now have enough information to at least give a try to build the source expressions and only if the code is compiled with the debug info on so it's compiled using the dash g symbol so we use the we are infernsic as a bridge so our focus was on memory access and vectorization as I said so importance of the memory access pattern is so we really want this project for vectorization at first and then we also have a plan to give it a push into the debugger so debuggers can utilize this information to provide better remarks but the main goal initially was the vectorization pass vectorization is a transformation pass so a transformation pass can always query an analysis pass and what our work is our work was an analysis pass so this vectorization pass in LLVM can always query the analysis pass this transformation pass okay so project contribution is actually that we have we have built an analysis pass that can generate these mappings and provides a better remarks for the case of vectorization or any other things that requires it let's look at the implementation detail so for us the point of interest is load and store instruction because of the vectorization because we want to analyze the memory access patterns to actually emit in the vectorization so which is useful for the remark and for example just take a look at this C code and if you compile this with clag or to dash g and if you emit the LLVM just for showing you that what's going on so I think it should be visible so you can see the call to in intrinsic functions debug.7 so we can build these expressions from them so as I said so if you look these were the first is to multiply n1 but and we compile it with the optimization on so the multiply instruction gone away and it just updated by shift lift operator okay so that's why you can see the shift lift operator here and not multiply so that's a problem so that's a problem of accuracy of the expressions because we still not have a good plan of how to accurately generate the expressions because a lot many times these things gone away because of the optimizations on and it's always been a hard problem of how to actually debug in the case of when optimizations are actually gone so it's a classic problem which we still have to look so you can see the we can build these expressions from the instructions so yeah you can see this from example that computing the equivalent source expressions of interest will involve walking through the LLVM IR and using the information that provided in the debug in forensics so even though our current interest is load and store but we still have to build for every instructions because those load and store can contain any sort of an instruction when you trace back to them it's maybe any binary instruction it contains gap instructions so it might be contain any instructions and we have to we still have to build for them too and as I said that optimizations make it impossible to recover the original source expressions so as you see that for example the 2 into N1 is optimized to N1 left shift 1 so which is recovering the original expression may not be possible every time so let's look at how we proceed it's just a basic algorithm that I just want to go through so we started by traversing the IR so we have we started with the traversing the IR we identify the operations that were there for example load and store source or main so current interest is load and store instructions so specifically look for those instructions in the IR and then trace those operands it might be any other instructions it might be inside any metadata so we can retrieve any information like name and utilizing those metadata information building the source expressions and then we reconstruct the expressions with all the information that we get so that's a bit all but just look at the current state so it's still not yet upstream to LLVM the PR is here so what I need from you or anyone you have experience or anyone you have active in that zone of optimizations or for example analysis passes or transformation passes in LLVM so I do like you to have a look at the patch if you have some experience try to review the code as well and give some feedback so we can proceed with much detail because it's still it's still a new analysis and still need a lot of work for struct as well so as I mentioned we need more review on the patch and some active work from me as well and if any of you interested please reach out and as I said the struct pose a unique challenge to when we try to build the expression for struct for example it was not quite easy it was very difficult to build the expression for struct because they pose a unique challenge if you see them in the intermediate representation it's very weird to look at them because I don't know how they actually gets there in the IR how they represent it it's not as simple as the giving expressions for an array so struct is still a problem accurate source level expression in case of optimization it's still a problem and there isn't always one to one mapping between the source code and IR so if you see that we still don't know what to do in these cases if you see there's a pointer and the PTR 0 so IR can generate the same code for these two patterns and we don't know which have to pick so that's still a problem one solution for this was that debug information also contain the information about the file so there is a DI file in the debug info so what was actually we were discussing is so we have still information about the file path so what we can do is we can actually open the file and just go on that line and retrieve the information what was the actual ground truth just look at that second thing was fall back and anything because we don't know what was there so just fall back to any of them so but the DI file was actually quite easy but it's not good performance wise if you see open the file and just retrieving just going on that line and retrieving that so it's not good performance wise so yeah that's it for the talk and thank you for listening and if you are interested in letting knowing more about this project and the algorithm please reach out to me on mail or for example discord so yeah thank you any questions yes why do you need to rebuild the entire sequence of expressions for each of the values why not the specific value of the value it is what the dependencies and the production line from the file just like after a year ago can you just free us the question so you know like when you admit after marks there's a tool called the operator that just put everything in line so between that and what you have here it seems that you know you would get excellent results in terms of debubbability if you just did what the operator does plus you specify which of the values are causing the dependence that what you said and what the reason for the failed optimization okay so the question is basically about using opt viewer right yeah I was just admitting a more limited view as you have here and not trying to reconstruct everything so we still not reconstructing everything for example so we still we still not focusing on creating whole I at or just mapping whole I at the expressions we still focusing on those loads and stores as I said so we still focusing on that right yeah yes yes yes yeah so we we still we still picking up the load and stores so if we see that is there any gap instructions because gap instruction actually contains a chain of instructions so so but we still have to build the loop for loads and stores and opt viewer still not good at emitting those remarks it's still very abstract in that sense if I remember it correctly so I'm not sure how to go with opt viewer but we still making it for load and stores and tracing back the information yeah yep yeah yes nope nope not sure but one thing I can guess that so basically opening a file is not something which is very good performance wise and and just choosing and just going on that line down because you can see that there could be a multiple lines of code in code base so you have to go on that particular line so it would need it would need it would be very bad in performance was I think okay and there is no and there is no theory about if it would be more beneficial to tell the programmer the error that or the sub optimal choice that you made was between line 27 28 compared to generating some arbitrary complex expression that might not be representative of what the program originally wrote I'm not sure okay okay yeah I think it would be fine then if you if you're choosing for emitting a remarks then then you know that this is not good performance right so if you want to look at the performance if you want to look at the actual correct remarks so you have to going deep in the performance thing then yeah then it would be possible and we have also we also talking about preserving the metadata in LVM as they go through but but in LVM metadata is designed in a way so we can drop we can drop at any time so we still cannot preserve the metadata information so it's still a challenge this lot move what going on on this side so yeah yeah yeah okay yeah thank you yeah okay thank you for joining when you leave make sure to take everything yeah yeah yeah yeah", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.0, "text": " Yeah, it's done.", "tokens": [50364, 865, 11, 309, 311, 1096, 13, 50464], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 1, "seek": 0, "start": 2.0, "end": 7.0, "text": " Yeah, well, we're about to start, so meet your Euro.", "tokens": [50464, 865, 11, 731, 11, 321, 434, 466, 281, 722, 11, 370, 1677, 428, 3010, 13, 50714], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 2, "seek": 0, "start": 7.0, "end": 8.0, "text": " Yeah, really.", "tokens": [50714, 865, 11, 534, 13, 50764], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 3, "seek": 0, "start": 8.0, "end": 9.0, "text": " You're already on it?", "tokens": [50764, 509, 434, 1217, 322, 309, 30, 50814], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 4, "seek": 0, "start": 9.0, "end": 10.0, "text": " Really?", "tokens": [50814, 4083, 30, 50864], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 5, "seek": 0, "start": 10.0, "end": 11.0, "text": " I don't think so.", "tokens": [50864, 286, 500, 380, 519, 370, 13, 50914], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 6, "seek": 0, "start": 11.0, "end": 12.0, "text": " Already on it?", "tokens": [50914, 23741, 322, 309, 30, 50964], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 7, "seek": 0, "start": 12.0, "end": 13.0, "text": " Yeah.", "tokens": [50964, 865, 13, 51014], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 8, "seek": 0, "start": 13.0, "end": 14.0, "text": " You think it's on it, right?", "tokens": [51014, 509, 519, 309, 311, 322, 309, 11, 558, 30, 51064], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 9, "seek": 0, "start": 14.0, "end": 15.0, "text": " Yeah.", "tokens": [51064, 865, 13, 51114], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 10, "seek": 0, "start": 15.0, "end": 16.0, "text": " It's on where do you want it?", "tokens": [51114, 467, 311, 322, 689, 360, 291, 528, 309, 30, 51164], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 11, "seek": 0, "start": 16.0, "end": 17.0, "text": " Thank you.", "tokens": [51164, 1044, 291, 13, 51214], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 12, "seek": 0, "start": 17.0, "end": 18.0, "text": " Thank you.", "tokens": [51214, 1044, 291, 13, 51264], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 13, "seek": 0, "start": 18.0, "end": 19.0, "text": " Thank you.", "tokens": [51264, 1044, 291, 13, 51314], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 14, "seek": 0, "start": 19.0, "end": 20.0, "text": " Thank you.", "tokens": [51314, 1044, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 15, "seek": 0, "start": 20.0, "end": 21.0, "text": " Thank you.", "tokens": [51364, 1044, 291, 13, 51414], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 16, "seek": 0, "start": 21.0, "end": 22.0, "text": " Thank you.", "tokens": [51414, 1044, 291, 13, 51464], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 17, "seek": 0, "start": 22.0, "end": 23.0, "text": " Thank you.", "tokens": [51464, 1044, 291, 13, 51514], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 18, "seek": 0, "start": 23.0, "end": 24.0, "text": " Thank you.", "tokens": [51514, 1044, 291, 13, 51564], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 19, "seek": 0, "start": 24.0, "end": 25.0, "text": " Thank you.", "tokens": [51564, 1044, 291, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 20, "seek": 0, "start": 25.0, "end": 26.0, "text": " Thank you.", "tokens": [51614, 1044, 291, 13, 51664], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 21, "seek": 0, "start": 26.0, "end": 27.0, "text": " Thank you.", "tokens": [51664, 1044, 291, 13, 51714], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 22, "seek": 0, "start": 27.0, "end": 28.0, "text": " Thank you.", "tokens": [51714, 1044, 291, 13, 51764], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 23, "seek": 0, "start": 28.0, "end": 29.0, "text": " Thank you.", "tokens": [51764, 1044, 291, 13, 51814], "temperature": 0.0, "avg_logprob": -0.3711299400825005, "compression_ratio": 2.3529411764705883, "no_speech_prob": 0.5995503664016724}, {"id": 24, "seek": 2900, "start": 29.0, "end": 30.0, "text": " Hi, everybody.", "tokens": [50364, 2421, 11, 2201, 13, 50414], "temperature": 0.0, "avg_logprob": -0.2369245774675124, "compression_ratio": 1.5495867768595042, "no_speech_prob": 0.09220118820667267}, {"id": 25, "seek": 2900, "start": 30.0, "end": 38.0, "text": " My name is Shivam and I work for KDAB and I also work this summer, Google Summer of Code", "tokens": [50414, 1222, 1315, 307, 47839, 335, 293, 286, 589, 337, 591, 7509, 33, 293, 286, 611, 589, 341, 4266, 11, 3329, 16161, 295, 15549, 50814], "temperature": 0.0, "avg_logprob": -0.2369245774675124, "compression_ratio": 1.5495867768595042, "no_speech_prob": 0.09220118820667267}, {"id": 26, "seek": 2900, "start": 38.0, "end": 44.0, "text": " with LLVM, working on this project, this mapping LLVM values to the corresponding source level", "tokens": [50814, 365, 441, 43, 53, 44, 11, 1364, 322, 341, 1716, 11, 341, 18350, 441, 43, 53, 44, 4190, 281, 264, 11760, 4009, 1496, 51114], "temperature": 0.0, "avg_logprob": -0.2369245774675124, "compression_ratio": 1.5495867768595042, "no_speech_prob": 0.09220118820667267}, {"id": 27, "seek": 2900, "start": 44.0, "end": 45.0, "text": " expressions.", "tokens": [51114, 15277, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2369245774675124, "compression_ratio": 1.5495867768595042, "no_speech_prob": 0.09220118820667267}, {"id": 28, "seek": 2900, "start": 45.0, "end": 47.0, "text": " And, but why?", "tokens": [51164, 400, 11, 457, 983, 30, 51264], "temperature": 0.0, "avg_logprob": -0.2369245774675124, "compression_ratio": 1.5495867768595042, "no_speech_prob": 0.09220118820667267}, {"id": 29, "seek": 2900, "start": 47.0, "end": 51.0, "text": " So the challenge of understanding the compiler optimizations.", "tokens": [51264, 407, 264, 3430, 295, 3701, 264, 31958, 5028, 14455, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2369245774675124, "compression_ratio": 1.5495867768595042, "no_speech_prob": 0.09220118820667267}, {"id": 30, "seek": 2900, "start": 51.0, "end": 58.0, "text": " So, so compilers are basically performing different sorts of optimizations and it's not", "tokens": [51464, 407, 11, 370, 715, 388, 433, 366, 1936, 10205, 819, 7527, 295, 5028, 14455, 293, 309, 311, 406, 51814], "temperature": 0.0, "avg_logprob": -0.2369245774675124, "compression_ratio": 1.5495867768595042, "no_speech_prob": 0.09220118820667267}, {"id": 31, "seek": 5800, "start": 58.0, "end": 63.0, "text": " always possible that it's going to be optimized or basically vectorized.", "tokens": [50364, 1009, 1944, 300, 309, 311, 516, 281, 312, 26941, 420, 1936, 8062, 1602, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1912320681980678, "compression_ratio": 2.0625, "no_speech_prob": 0.013201788999140263}, {"id": 32, "seek": 5800, "start": 63.0, "end": 69.0, "text": " So, we basically our motivation was vectorization for the first because we wanted to include", "tokens": [50614, 407, 11, 321, 1936, 527, 12335, 390, 8062, 2144, 337, 264, 700, 570, 321, 1415, 281, 4090, 50914], "temperature": 0.0, "avg_logprob": -0.1912320681980678, "compression_ratio": 2.0625, "no_speech_prob": 0.013201788999140263}, {"id": 33, "seek": 5800, "start": 69.0, "end": 73.0, "text": " those optimization remarks in for the vectorization part.", "tokens": [50914, 729, 19618, 19151, 294, 337, 264, 8062, 2144, 644, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1912320681980678, "compression_ratio": 2.0625, "no_speech_prob": 0.013201788999140263}, {"id": 34, "seek": 5800, "start": 73.0, "end": 75.0, "text": " So, our motivation was vectorization.", "tokens": [51114, 407, 11, 527, 12335, 390, 8062, 2144, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1912320681980678, "compression_ratio": 2.0625, "no_speech_prob": 0.013201788999140263}, {"id": 35, "seek": 5800, "start": 75.0, "end": 76.0, "text": " So, it's not always possible.", "tokens": [51214, 407, 11, 309, 311, 406, 1009, 1944, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1912320681980678, "compression_ratio": 2.0625, "no_speech_prob": 0.013201788999140263}, {"id": 36, "seek": 5800, "start": 76.0, "end": 79.0, "text": " So, your compiler can always vectorize your code.", "tokens": [51264, 407, 11, 428, 31958, 393, 1009, 8062, 1125, 428, 3089, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1912320681980678, "compression_ratio": 2.0625, "no_speech_prob": 0.013201788999140263}, {"id": 37, "seek": 5800, "start": 79.0, "end": 84.0, "text": " So, there's some sort of data dependencies there where that's why your compilers cannot", "tokens": [51414, 407, 11, 456, 311, 512, 1333, 295, 1412, 36606, 456, 689, 300, 311, 983, 428, 715, 388, 433, 2644, 51664], "temperature": 0.0, "avg_logprob": -0.1912320681980678, "compression_ratio": 2.0625, "no_speech_prob": 0.013201788999140263}, {"id": 38, "seek": 5800, "start": 84.0, "end": 86.0, "text": " actually vectorize all the time.", "tokens": [51664, 767, 8062, 1125, 439, 264, 565, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1912320681980678, "compression_ratio": 2.0625, "no_speech_prob": 0.013201788999140263}, {"id": 39, "seek": 8600, "start": 86.0, "end": 93.0, "text": " So, on that cases you have to emit a good remarks and I'll let you know what currently", "tokens": [50364, 407, 11, 322, 300, 3331, 291, 362, 281, 32084, 257, 665, 19151, 293, 286, 603, 718, 291, 458, 437, 4362, 50714], "temperature": 0.0, "avg_logprob": -0.11184260356857116, "compression_ratio": 1.544186046511628, "no_speech_prob": 0.012980022467672825}, {"id": 40, "seek": 8600, "start": 93.0, "end": 95.0, "text": " clang actually generates as a remark.", "tokens": [50714, 596, 656, 767, 23815, 382, 257, 7942, 13, 50814], "temperature": 0.0, "avg_logprob": -0.11184260356857116, "compression_ratio": 1.544186046511628, "no_speech_prob": 0.012980022467672825}, {"id": 41, "seek": 8600, "start": 95.0, "end": 101.0, "text": " So, understanding why and how these optimization occurs is not always straightforward.", "tokens": [50814, 407, 11, 3701, 983, 293, 577, 613, 19618, 11843, 307, 406, 1009, 15325, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11184260356857116, "compression_ratio": 1.544186046511628, "no_speech_prob": 0.012980022467672825}, {"id": 42, "seek": 8600, "start": 101.0, "end": 107.0, "text": " Even the authors or vectorizer don't know what's going on if the vectorization didn't", "tokens": [51114, 2754, 264, 16552, 420, 8062, 6545, 500, 380, 458, 437, 311, 516, 322, 498, 264, 8062, 2144, 994, 380, 51414], "temperature": 0.0, "avg_logprob": -0.11184260356857116, "compression_ratio": 1.544186046511628, "no_speech_prob": 0.012980022467672825}, {"id": 43, "seek": 8600, "start": 107.0, "end": 108.0, "text": " happen.", "tokens": [51414, 1051, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11184260356857116, "compression_ratio": 1.544186046511628, "no_speech_prob": 0.012980022467672825}, {"id": 44, "seek": 8600, "start": 108.0, "end": 110.0, "text": " So, consider this example.", "tokens": [51464, 407, 11, 1949, 341, 1365, 13, 51564], "temperature": 0.0, "avg_logprob": -0.11184260356857116, "compression_ratio": 1.544186046511628, "no_speech_prob": 0.012980022467672825}, {"id": 45, "seek": 11000, "start": 110.0, "end": 116.0, "text": " So, you can see there is a data dependencies between A of i and A of i plus 3.", "tokens": [50364, 407, 11, 291, 393, 536, 456, 307, 257, 1412, 36606, 1296, 316, 295, 741, 293, 316, 295, 741, 1804, 805, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1696046973174473, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.023301534354686737}, {"id": 46, "seek": 11000, "start": 116.0, "end": 121.0, "text": " So, this loop clang will not be not able to vectorize this code.", "tokens": [50664, 407, 11, 341, 6367, 596, 656, 486, 406, 312, 406, 1075, 281, 8062, 1125, 341, 3089, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1696046973174473, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.023301534354686737}, {"id": 47, "seek": 11000, "start": 121.0, "end": 122.0, "text": " Okay.", "tokens": [50914, 1033, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1696046973174473, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.023301534354686737}, {"id": 48, "seek": 11000, "start": 122.0, "end": 129.0, "text": " So, see this remark that produced with the clang which is that loop not vectorize.", "tokens": [50964, 407, 11, 536, 341, 7942, 300, 7126, 365, 264, 596, 656, 597, 307, 300, 6367, 406, 8062, 1125, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1696046973174473, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.023301534354686737}, {"id": 49, "seek": 11000, "start": 129.0, "end": 131.0, "text": " You can use pragma loop distribute.", "tokens": [51314, 509, 393, 764, 33394, 1696, 6367, 20594, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1696046973174473, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.023301534354686737}, {"id": 50, "seek": 11000, "start": 131.0, "end": 136.0, "text": " So, you can compile the tries to distribute the loop and it might be able to vectorize", "tokens": [51414, 407, 11, 291, 393, 31413, 264, 9898, 281, 20594, 264, 6367, 293, 309, 1062, 312, 1075, 281, 8062, 1125, 51664], "temperature": 0.0, "avg_logprob": -0.1696046973174473, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.023301534354686737}, {"id": 51, "seek": 11000, "start": 136.0, "end": 137.0, "text": " in some sense.", "tokens": [51664, 294, 512, 2020, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1696046973174473, "compression_ratio": 1.7209302325581395, "no_speech_prob": 0.023301534354686737}, {"id": 52, "seek": 13700, "start": 137.0, "end": 139.0, "text": " But, just see the remarks.", "tokens": [50364, 583, 11, 445, 536, 264, 19151, 13, 50464], "temperature": 0.0, "avg_logprob": -0.13810897567897168, "compression_ratio": 1.8708133971291867, "no_speech_prob": 0.011143147014081478}, {"id": 53, "seek": 13700, "start": 139.0, "end": 144.0, "text": " It's not clear that what actually gone wrong here and where's the data dependency.", "tokens": [50464, 467, 311, 406, 1850, 300, 437, 767, 2780, 2085, 510, 293, 689, 311, 264, 1412, 33621, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13810897567897168, "compression_ratio": 1.8708133971291867, "no_speech_prob": 0.011143147014081478}, {"id": 54, "seek": 13700, "start": 144.0, "end": 149.0, "text": " It's not telling you that where's the data dependency actually was and so you can improve", "tokens": [50714, 467, 311, 406, 3585, 291, 300, 689, 311, 264, 1412, 33621, 767, 390, 293, 370, 291, 393, 3470, 50964], "temperature": 0.0, "avg_logprob": -0.13810897567897168, "compression_ratio": 1.8708133971291867, "no_speech_prob": 0.011143147014081478}, {"id": 55, "seek": 13700, "start": 149.0, "end": 150.0, "text": " the code itself.", "tokens": [50964, 264, 3089, 2564, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13810897567897168, "compression_ratio": 1.8708133971291867, "no_speech_prob": 0.011143147014081478}, {"id": 56, "seek": 13700, "start": 150.0, "end": 151.0, "text": " Right.", "tokens": [51014, 1779, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13810897567897168, "compression_ratio": 1.8708133971291867, "no_speech_prob": 0.011143147014081478}, {"id": 57, "seek": 13700, "start": 151.0, "end": 156.0, "text": " So, it just that remarks and you can see this not actually clear.", "tokens": [51064, 407, 11, 309, 445, 300, 19151, 293, 291, 393, 536, 341, 406, 767, 1850, 13, 51314], "temperature": 0.0, "avg_logprob": -0.13810897567897168, "compression_ratio": 1.8708133971291867, "no_speech_prob": 0.011143147014081478}, {"id": 58, "seek": 13700, "start": 156.0, "end": 157.0, "text": " Right.", "tokens": [51314, 1779, 13, 51364], "temperature": 0.0, "avg_logprob": -0.13810897567897168, "compression_ratio": 1.8708133971291867, "no_speech_prob": 0.011143147014081478}, {"id": 59, "seek": 13700, "start": 157.0, "end": 166.0, "text": " So, it's a bit unclear and if you can have such this remarks nothing much just two expressions", "tokens": [51364, 407, 11, 309, 311, 257, 857, 25636, 293, 498, 291, 393, 362, 1270, 341, 19151, 1825, 709, 445, 732, 15277, 51814], "temperature": 0.0, "avg_logprob": -0.13810897567897168, "compression_ratio": 1.8708133971291867, "no_speech_prob": 0.011143147014081478}, {"id": 60, "seek": 16600, "start": 166.0, "end": 169.0, "text": " are the dependent source and the dependence destination for example.", "tokens": [50364, 366, 264, 12334, 4009, 293, 264, 31704, 12236, 337, 1365, 13, 50514], "temperature": 0.0, "avg_logprob": -0.19096100684439782, "compression_ratio": 1.8711111111111112, "no_speech_prob": 0.1636161059141159}, {"id": 61, "seek": 16600, "start": 169.0, "end": 176.0, "text": " So, you know that okay there is a data dependencies between two to these two locations and so", "tokens": [50514, 407, 11, 291, 458, 300, 1392, 456, 307, 257, 1412, 36606, 1296, 732, 281, 613, 732, 9253, 293, 370, 50864], "temperature": 0.0, "avg_logprob": -0.19096100684439782, "compression_ratio": 1.8711111111111112, "no_speech_prob": 0.1636161059141159}, {"id": 62, "seek": 16600, "start": 176.0, "end": 180.0, "text": " if you are aware of the code so you are going to modify your code and you might be able", "tokens": [50864, 498, 291, 366, 3650, 295, 264, 3089, 370, 291, 366, 516, 281, 16927, 428, 3089, 293, 291, 1062, 312, 1075, 51064], "temperature": 0.0, "avg_logprob": -0.19096100684439782, "compression_ratio": 1.8711111111111112, "no_speech_prob": 0.1636161059141159}, {"id": 63, "seek": 16600, "start": 180.0, "end": 186.0, "text": " to modify in the way so you know that it will be possible for the compiler to vectorize", "tokens": [51064, 281, 16927, 294, 264, 636, 370, 291, 458, 300, 309, 486, 312, 1944, 337, 264, 31958, 281, 8062, 1125, 51364], "temperature": 0.0, "avg_logprob": -0.19096100684439782, "compression_ratio": 1.8711111111111112, "no_speech_prob": 0.1636161059141159}, {"id": 64, "seek": 16600, "start": 186.0, "end": 187.0, "text": " now.", "tokens": [51364, 586, 13, 51414], "temperature": 0.0, "avg_logprob": -0.19096100684439782, "compression_ratio": 1.8711111111111112, "no_speech_prob": 0.1636161059141159}, {"id": 65, "seek": 16600, "start": 187.0, "end": 192.0, "text": " So, you can modify the code by looking at this these expressions for example.", "tokens": [51414, 407, 11, 291, 393, 16927, 264, 3089, 538, 1237, 412, 341, 613, 15277, 337, 1365, 13, 51664], "temperature": 0.0, "avg_logprob": -0.19096100684439782, "compression_ratio": 1.8711111111111112, "no_speech_prob": 0.1636161059141159}, {"id": 66, "seek": 19200, "start": 193.0, "end": 200.0, "text": " So, yeah so it's going to surely enhance the remarks include the exact so if it includes", "tokens": [50414, 407, 11, 1338, 370, 309, 311, 516, 281, 11468, 11985, 264, 19151, 4090, 264, 1900, 370, 498, 309, 5974, 50764], "temperature": 0.0, "avg_logprob": -0.1364306547702887, "compression_ratio": 1.8217821782178218, "no_speech_prob": 0.028322871774435043}, {"id": 67, "seek": 19200, "start": 200.0, "end": 206.0, "text": " the exact source and destination of the dependencies within the error for example and it will pinpoint", "tokens": [50764, 264, 1900, 4009, 293, 12236, 295, 264, 36606, 1951, 264, 6713, 337, 1365, 293, 309, 486, 40837, 51064], "temperature": 0.0, "avg_logprob": -0.1364306547702887, "compression_ratio": 1.8217821782178218, "no_speech_prob": 0.028322871774435043}, {"id": 68, "seek": 19200, "start": 206.0, "end": 214.0, "text": " the lines of those dependencies and let's look at the impact of these enhanced remarks", "tokens": [51064, 264, 3876, 295, 729, 36606, 293, 718, 311, 574, 412, 264, 2712, 295, 613, 21191, 19151, 51464], "temperature": 0.0, "avg_logprob": -0.1364306547702887, "compression_ratio": 1.8217821782178218, "no_speech_prob": 0.028322871774435043}, {"id": 69, "seek": 19200, "start": 214.0, "end": 219.0, "text": " so it would be clarity for the developers so they can quickly look where the dependencies", "tokens": [51464, 370, 309, 576, 312, 16992, 337, 264, 8849, 370, 436, 393, 2661, 574, 689, 264, 36606, 51714], "temperature": 0.0, "avg_logprob": -0.1364306547702887, "compression_ratio": 1.8217821782178218, "no_speech_prob": 0.028322871774435043}, {"id": 70, "seek": 21900, "start": 219.0, "end": 229.0, "text": " are actually occurring and so they can improve their code and probably make it vectorizable", "tokens": [50364, 366, 767, 18386, 293, 370, 436, 393, 3470, 641, 3089, 293, 1391, 652, 309, 8062, 22395, 50864], "temperature": 0.0, "avg_logprob": -0.07981836473619616, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.019966430962085724}, {"id": 71, "seek": 21900, "start": 229.0, "end": 234.0, "text": " and efficiency in the terms of that they can save time and improve efficiency by reducing", "tokens": [50864, 293, 10493, 294, 264, 2115, 295, 300, 436, 393, 3155, 565, 293, 3470, 10493, 538, 12245, 51114], "temperature": 0.0, "avg_logprob": -0.07981836473619616, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.019966430962085724}, {"id": 72, "seek": 21900, "start": 234.0, "end": 239.0, "text": " the need for the deep debugging that where was the actual data dependencies so you can", "tokens": [51114, 264, 643, 337, 264, 2452, 45592, 300, 689, 390, 264, 3539, 1412, 36606, 370, 291, 393, 51364], "temperature": 0.0, "avg_logprob": -0.07981836473619616, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.019966430962085724}, {"id": 73, "seek": 21900, "start": 239.0, "end": 244.0, "text": " just look at the optimization remarks and you get the quite a lot of information that", "tokens": [51364, 445, 574, 412, 264, 19618, 19151, 293, 291, 483, 264, 1596, 257, 688, 295, 1589, 300, 51614], "temperature": 0.0, "avg_logprob": -0.07981836473619616, "compression_ratio": 1.7524752475247525, "no_speech_prob": 0.019966430962085724}, {"id": 74, "seek": 24400, "start": 244.0, "end": 249.0, "text": " okay there is the data dependencies between two load and stores.", "tokens": [50364, 1392, 456, 307, 264, 1412, 36606, 1296, 732, 3677, 293, 9512, 13, 50614], "temperature": 0.0, "avg_logprob": -0.14967201067053754, "compression_ratio": 1.6372549019607843, "no_speech_prob": 0.02423166111111641}, {"id": 75, "seek": 24400, "start": 249.0, "end": 257.0, "text": " So, let's look at the approach that we took for solve this problem or this project so", "tokens": [50614, 407, 11, 718, 311, 574, 412, 264, 3109, 300, 321, 1890, 337, 5039, 341, 1154, 420, 341, 1716, 370, 51014], "temperature": 0.0, "avg_logprob": -0.14967201067053754, "compression_ratio": 1.6372549019607843, "no_speech_prob": 0.02423166111111641}, {"id": 76, "seek": 24400, "start": 257.0, "end": 263.0, "text": " approach was very simple to just utilize the debug information that available into the", "tokens": [51014, 3109, 390, 588, 2199, 281, 445, 16117, 264, 24083, 1589, 300, 2435, 666, 264, 51314], "temperature": 0.0, "avg_logprob": -0.14967201067053754, "compression_ratio": 1.6372549019607843, "no_speech_prob": 0.02423166111111641}, {"id": 77, "seek": 24400, "start": 263.0, "end": 269.0, "text": " intermediate representation right so to recreate the variable and the function names lost during", "tokens": [51314, 19376, 10290, 558, 370, 281, 25833, 264, 7006, 293, 264, 2445, 5288, 2731, 1830, 51614], "temperature": 0.0, "avg_logprob": -0.14967201067053754, "compression_ratio": 1.6372549019607843, "no_speech_prob": 0.02423166111111641}, {"id": 78, "seek": 26900, "start": 269.0, "end": 276.0, "text": " the optimization so the optimizations are actually a problem in our case because we", "tokens": [50364, 264, 19618, 370, 264, 5028, 14455, 366, 767, 257, 1154, 294, 527, 1389, 570, 321, 50714], "temperature": 0.0, "avg_logprob": -0.13224136055289926, "compression_ratio": 1.765, "no_speech_prob": 0.030892539769411087}, {"id": 79, "seek": 26900, "start": 276.0, "end": 284.0, "text": " currently don't know how to build those for example instructions that's lost into the", "tokens": [50714, 4362, 500, 380, 458, 577, 281, 1322, 729, 337, 1365, 9415, 300, 311, 2731, 666, 264, 51114], "temperature": 0.0, "avg_logprob": -0.13224136055289926, "compression_ratio": 1.765, "no_speech_prob": 0.030892539769411087}, {"id": 80, "seek": 26900, "start": 284.0, "end": 290.0, "text": " optimization for example so if you see a multiplier if you see a MUL instruction in the IR so", "tokens": [51114, 19618, 337, 1365, 370, 498, 291, 536, 257, 44106, 498, 291, 536, 257, 376, 10253, 10951, 294, 264, 16486, 370, 51414], "temperature": 0.0, "avg_logprob": -0.13224136055289926, "compression_ratio": 1.765, "no_speech_prob": 0.030892539769411087}, {"id": 81, "seek": 26900, "start": 290.0, "end": 298.0, "text": " compiler might optimize that into shift left so the MUL was the original information that", "tokens": [51414, 31958, 1062, 19719, 300, 666, 5513, 1411, 370, 264, 376, 10253, 390, 264, 3380, 1589, 300, 51814], "temperature": 0.0, "avg_logprob": -0.13224136055289926, "compression_ratio": 1.765, "no_speech_prob": 0.030892539769411087}, {"id": 82, "seek": 29800, "start": 298.0, "end": 303.0, "text": " was actually available in the source code but right now we have shift left so we just", "tokens": [50364, 390, 767, 2435, 294, 264, 4009, 3089, 457, 558, 586, 321, 362, 5513, 1411, 370, 321, 445, 50614], "temperature": 0.0, "avg_logprob": -0.08483465124921101, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.029127907007932663}, {"id": 83, "seek": 29800, "start": 303.0, "end": 307.0, "text": " lose the context that what was the actual source level information so that's still a", "tokens": [50614, 3624, 264, 4319, 300, 437, 390, 264, 3539, 4009, 1496, 1589, 370, 300, 311, 920, 257, 50814], "temperature": 0.0, "avg_logprob": -0.08483465124921101, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.029127907007932663}, {"id": 84, "seek": 29800, "start": 307.0, "end": 315.0, "text": " problem for us and we have different approach for that but we didn't see to be so we see", "tokens": [50814, 1154, 337, 505, 293, 321, 362, 819, 3109, 337, 300, 457, 321, 994, 380, 536, 281, 312, 370, 321, 536, 51214], "temperature": 0.0, "avg_logprob": -0.08483465124921101, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.029127907007932663}, {"id": 85, "seek": 29800, "start": 315.0, "end": 324.0, "text": " that it was not much a performance good so it was very bad so we wanted to clone the", "tokens": [51214, 300, 309, 390, 406, 709, 257, 3389, 665, 370, 309, 390, 588, 1578, 370, 321, 1415, 281, 26506, 264, 51664], "temperature": 0.0, "avg_logprob": -0.08483465124921101, "compression_ratio": 1.728643216080402, "no_speech_prob": 0.029127907007932663}, {"id": 86, "seek": 32400, "start": 324.0, "end": 332.0, "text": " module so we have so we can look that what's happened after each optimizations so we can", "tokens": [50364, 10088, 370, 321, 362, 370, 321, 393, 574, 300, 437, 311, 2011, 934, 1184, 5028, 14455, 370, 321, 393, 50764], "temperature": 0.0, "avg_logprob": -0.12705212831497192, "compression_ratio": 1.8941798941798942, "no_speech_prob": 0.16074292361736298}, {"id": 87, "seek": 32400, "start": 332.0, "end": 340.0, "text": " have the clone of the original IR and we can see that what's going on after every pass", "tokens": [50764, 362, 264, 26506, 295, 264, 3380, 16486, 293, 321, 393, 536, 300, 437, 311, 516, 322, 934, 633, 1320, 51164], "temperature": 0.0, "avg_logprob": -0.12705212831497192, "compression_ratio": 1.8941798941798942, "no_speech_prob": 0.16074292361736298}, {"id": 88, "seek": 32400, "start": 340.0, "end": 346.0, "text": " of optimization or every implementation passes so if you look at the different transformation", "tokens": [51164, 295, 19618, 420, 633, 11420, 11335, 370, 498, 291, 574, 412, 264, 819, 9887, 51464], "temperature": 0.0, "avg_logprob": -0.12705212831497192, "compression_ratio": 1.8941798941798942, "no_speech_prob": 0.16074292361736298}, {"id": 89, "seek": 32400, "start": 346.0, "end": 353.0, "text": " pass and you have to look over that what's the thing that gets changed and anything that", "tokens": [51464, 1320, 293, 291, 362, 281, 574, 670, 300, 437, 311, 264, 551, 300, 2170, 3105, 293, 1340, 300, 51814], "temperature": 0.0, "avg_logprob": -0.12705212831497192, "compression_ratio": 1.8941798941798942, "no_speech_prob": 0.16074292361736298}, {"id": 90, "seek": 35300, "start": 353.0, "end": 358.0, "text": " you have stored that okay there was the original instruction as MUL but right now it gets", "tokens": [50364, 291, 362, 12187, 300, 1392, 456, 390, 264, 3380, 10951, 382, 376, 10253, 457, 558, 586, 309, 2170, 50614], "temperature": 0.0, "avg_logprob": -0.07511116209484282, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.04315199330449104}, {"id": 91, "seek": 35300, "start": 358.0, "end": 364.0, "text": " changed to shift left so you see that okay the MUL gets changed to shift left so you", "tokens": [50614, 3105, 281, 5513, 1411, 370, 291, 536, 300, 1392, 264, 376, 10253, 2170, 3105, 281, 5513, 1411, 370, 291, 50914], "temperature": 0.0, "avg_logprob": -0.07511116209484282, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.04315199330449104}, {"id": 92, "seek": 35300, "start": 364.0, "end": 371.0, "text": " have to cache the expressions basically to reload the things in a new way so if there is", "tokens": [50914, 362, 281, 19459, 264, 15277, 1936, 281, 25628, 264, 721, 294, 257, 777, 636, 370, 498, 456, 307, 51264], "temperature": 0.0, "avg_logprob": -0.07511116209484282, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.04315199330449104}, {"id": 93, "seek": 35300, "start": 371.0, "end": 380.0, "text": " no need for that so we will proceed after it so let's see how to utilize that information", "tokens": [51264, 572, 643, 337, 300, 370, 321, 486, 8991, 934, 309, 370, 718, 311, 536, 577, 281, 16117, 300, 1589, 51714], "temperature": 0.0, "avg_logprob": -0.07511116209484282, "compression_ratio": 1.7475247524752475, "no_speech_prob": 0.04315199330449104}, {"id": 94, "seek": 38000, "start": 380.0, "end": 387.0, "text": " that available in the IR so LLVM uses a small set of infernsic functions if you are aware of so", "tokens": [50364, 300, 2435, 294, 264, 16486, 370, 441, 43, 53, 44, 4960, 257, 1359, 992, 295, 13596, 3695, 299, 6828, 498, 291, 366, 3650, 295, 370, 50714], "temperature": 0.0, "avg_logprob": -0.14410266323366028, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.17279691994190216}, {"id": 95, "seek": 38000, "start": 387.0, "end": 395.0, "text": " those are provided for the debug information so they contains different metadata so they have", "tokens": [50714, 729, 366, 5649, 337, 264, 24083, 1589, 370, 436, 8306, 819, 26603, 370, 436, 362, 51114], "temperature": 0.0, "avg_logprob": -0.14410266323366028, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.17279691994190216}, {"id": 96, "seek": 38000, "start": 395.0, "end": 405.0, "text": " different arguments so these infernsic functions are named prefixed by this LLVM.debug", "tokens": [51114, 819, 12869, 370, 613, 13596, 3695, 299, 6828, 366, 4926, 18417, 40303, 538, 341, 441, 43, 53, 44, 13, 1479, 44455, 51614], "temperature": 0.0, "avg_logprob": -0.14410266323366028, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.17279691994190216}, {"id": 97, "seek": 40500, "start": 405.0, "end": 411.0, "text": " and these things helps you to track the variables through the optimizations and code", "tokens": [50364, 293, 613, 721, 3665, 291, 281, 2837, 264, 9102, 807, 264, 5028, 14455, 293, 3089, 50664], "temperature": 0.0, "avg_logprob": -0.13407277525140998, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.18247465789318085}, {"id": 98, "seek": 40500, "start": 411.0, "end": 418.0, "text": " generation so if you look in the IR so if you dump your IR with the dash G symbol so you will", "tokens": [50664, 5125, 370, 498, 291, 574, 294, 264, 16486, 370, 498, 291, 11430, 428, 16486, 365, 264, 8240, 460, 5986, 370, 291, 486, 51014], "temperature": 0.0, "avg_logprob": -0.13407277525140998, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.18247465789318085}, {"id": 99, "seek": 40500, "start": 418.0, "end": 426.0, "text": " get to know about the LLVM.debug.value or .declare so those contains everything related to the", "tokens": [51014, 483, 281, 458, 466, 264, 441, 43, 53, 44, 13, 1479, 44455, 13, 29155, 420, 2411, 1479, 3474, 543, 370, 729, 8306, 1203, 4077, 281, 264, 51414], "temperature": 0.0, "avg_logprob": -0.13407277525140998, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.18247465789318085}, {"id": 100, "seek": 40500, "start": 426.0, "end": 432.0, "text": " source level things so they contains the metadata information and the metadata are there for that", "tokens": [51414, 4009, 1496, 721, 370, 436, 8306, 264, 26603, 1589, 293, 264, 26603, 366, 456, 337, 300, 51714], "temperature": 0.0, "avg_logprob": -0.13407277525140998, "compression_ratio": 1.6711711711711712, "no_speech_prob": 0.18247465789318085}, {"id": 101, "seek": 43200, "start": 432.0, "end": 439.0, "text": " so they can give you a lot more information about what was actually in the source so for example", "tokens": [50364, 370, 436, 393, 976, 291, 257, 688, 544, 1589, 466, 437, 390, 767, 294, 264, 4009, 370, 337, 1365, 50714], "temperature": 0.0, "avg_logprob": -0.10147129467555455, "compression_ratio": 1.7102272727272727, "no_speech_prob": 0.01906008832156658}, {"id": 102, "seek": 43200, "start": 439.0, "end": 445.0, "text": " like variable names so when you trace the metadata so you can get the variable name from the actual source", "tokens": [50714, 411, 7006, 5288, 370, 562, 291, 13508, 264, 26603, 370, 291, 393, 483, 264, 7006, 1315, 490, 264, 3539, 4009, 51014], "temperature": 0.0, "avg_logprob": -0.10147129467555455, "compression_ratio": 1.7102272727272727, "no_speech_prob": 0.01906008832156658}, {"id": 103, "seek": 43200, "start": 445.0, "end": 455.0, "text": " so for us these two infernsic functions were very important the debug.declare and the debug.value", "tokens": [51014, 370, 337, 505, 613, 732, 13596, 3695, 299, 6828, 645, 588, 1021, 264, 24083, 13, 1479, 3474, 543, 293, 264, 24083, 13, 29155, 51514], "temperature": 0.0, "avg_logprob": -0.10147129467555455, "compression_ratio": 1.7102272727272727, "no_speech_prob": 0.01906008832156658}, {"id": 104, "seek": 45500, "start": 456.0, "end": 468.0, "text": " and let's try to understand a bit so if you can see the I is allocated and just below it you can see", "tokens": [50414, 293, 718, 311, 853, 281, 1223, 257, 857, 370, 498, 291, 393, 536, 264, 286, 307, 29772, 293, 445, 2507, 309, 291, 393, 536, 51014], "temperature": 0.0, "avg_logprob": -0.10909100582725123, "compression_ratio": 1.811764705882353, "no_speech_prob": 0.13680799305438995}, {"id": 105, "seek": 45500, "start": 468.0, "end": 475.0, "text": " the call to the infernsic function which is .debug.declare and these you can see the three arguments", "tokens": [51014, 264, 818, 281, 264, 13596, 3695, 299, 2445, 597, 307, 2411, 1479, 44455, 13, 1479, 3474, 543, 293, 613, 291, 393, 536, 264, 1045, 12869, 51364], "temperature": 0.0, "avg_logprob": -0.10909100582725123, "compression_ratio": 1.811764705882353, "no_speech_prob": 0.13680799305438995}, {"id": 106, "seek": 45500, "start": 475.0, "end": 483.0, "text": " in the infernsic function the first represents the first will always represent the address of the variable", "tokens": [51364, 294, 264, 13596, 3695, 299, 2445, 264, 700, 8855, 264, 700, 486, 1009, 2906, 264, 2985, 295, 264, 7006, 51764], "temperature": 0.0, "avg_logprob": -0.10909100582725123, "compression_ratio": 1.811764705882353, "no_speech_prob": 0.13680799305438995}, {"id": 107, "seek": 48300, "start": 483.0, "end": 490.0, "text": " the second metadata always pointing to the for example you can see the DI local variable", "tokens": [50364, 264, 1150, 26603, 1009, 12166, 281, 264, 337, 1365, 291, 393, 536, 264, 11953, 2654, 7006, 50714], "temperature": 0.0, "avg_logprob": -0.135453431003065, "compression_ratio": 1.9789473684210526, "no_speech_prob": 0.02473461627960205}, {"id": 108, "seek": 48300, "start": 490.0, "end": 496.0, "text": " so which contains this is a metadata node and it contains the variable name so what was the actual name", "tokens": [50714, 370, 597, 8306, 341, 307, 257, 26603, 9984, 293, 309, 8306, 264, 7006, 1315, 370, 437, 390, 264, 3539, 1315, 51014], "temperature": 0.0, "avg_logprob": -0.135453431003065, "compression_ratio": 1.9789473684210526, "no_speech_prob": 0.02473461627960205}, {"id": 109, "seek": 48300, "start": 496.0, "end": 501.0, "text": " so you can see the actual name was I in the actual source expression so you can when you", "tokens": [51014, 370, 291, 393, 536, 264, 3539, 1315, 390, 286, 294, 264, 3539, 4009, 6114, 370, 291, 393, 562, 291, 51264], "temperature": 0.0, "avg_logprob": -0.135453431003065, "compression_ratio": 1.9789473684210526, "no_speech_prob": 0.02473461627960205}, {"id": 110, "seek": 48300, "start": 501.0, "end": 509.0, "text": " trace back the information so you can retrieve the name so these are these infernsic functions", "tokens": [51264, 13508, 646, 264, 1589, 370, 291, 393, 30254, 264, 1315, 370, 613, 366, 613, 13596, 3695, 299, 6828, 51664], "temperature": 0.0, "avg_logprob": -0.135453431003065, "compression_ratio": 1.9789473684210526, "no_speech_prob": 0.02473461627960205}, {"id": 111, "seek": 50900, "start": 509.0, "end": 516.0, "text": " so the second can really help us a lot and the second was actually the source just the source", "tokens": [50364, 370, 264, 1150, 393, 534, 854, 505, 257, 688, 293, 264, 1150, 390, 767, 264, 4009, 445, 264, 4009, 50714], "temperature": 0.0, "avg_logprob": -0.19369408392137097, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.1434488445520401}, {"id": 112, "seek": 50900, "start": 516.0, "end": 523.0, "text": " information like name and the third argument is DI expression and generally DI expression is useful", "tokens": [50714, 1589, 411, 1315, 293, 264, 2636, 6770, 307, 11953, 6114, 293, 5101, 11953, 6114, 307, 4420, 51064], "temperature": 0.0, "avg_logprob": -0.19369408392137097, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.1434488445520401}, {"id": 113, "seek": 50900, "start": 523.0, "end": 530.0, "text": " as a complex expression so you have expressions like for example int a is equals to b plus c", "tokens": [51064, 382, 257, 3997, 6114, 370, 291, 362, 15277, 411, 337, 1365, 560, 257, 307, 6915, 281, 272, 1804, 269, 51414], "temperature": 0.0, "avg_logprob": -0.19369408392137097, "compression_ratio": 1.7654320987654322, "no_speech_prob": 0.1434488445520401}, {"id": 114, "seek": 53000, "start": 531.0, "end": 540.0, "text": " a DI expression can hold that stuffs yeah and yeah so debug declare is used for that and the second", "tokens": [50414, 257, 11953, 6114, 393, 1797, 300, 48719, 1338, 293, 1338, 370, 24083, 19710, 307, 1143, 337, 300, 293, 264, 1150, 50864], "temperature": 0.0, "avg_logprob": -0.17648730959211076, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.11679784953594208}, {"id": 115, "seek": 53000, "start": 540.0, "end": 548.0, "text": " is debug.value so .value is very similar to it it's just that when I is gets updated when a value is updated", "tokens": [50864, 307, 24083, 13, 29155, 370, 2411, 29155, 307, 588, 2531, 281, 309, 309, 311, 445, 300, 562, 286, 307, 2170, 10588, 562, 257, 2158, 307, 10588, 51264], "temperature": 0.0, "avg_logprob": -0.17648730959211076, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.11679784953594208}, {"id": 116, "seek": 53000, "start": 548.0, "end": 555.0, "text": " so debug value can up and so everything goes in the debug value for the same", "tokens": [51264, 370, 24083, 2158, 393, 493, 293, 370, 1203, 1709, 294, 264, 24083, 2158, 337, 264, 912, 51614], "temperature": 0.0, "avg_logprob": -0.17648730959211076, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.11679784953594208}, {"id": 117, "seek": 55500, "start": 556.0, "end": 564.0, "text": " so we now have enough information to at least give a try to build the source expressions and only if the code is", "tokens": [50414, 370, 321, 586, 362, 1547, 1589, 281, 412, 1935, 976, 257, 853, 281, 1322, 264, 4009, 15277, 293, 787, 498, 264, 3089, 307, 50814], "temperature": 0.0, "avg_logprob": -0.23684251812142385, "compression_ratio": 1.576086956521739, "no_speech_prob": 0.004463762976229191}, {"id": 118, "seek": 55500, "start": 564.0, "end": 570.0, "text": " compiled with the debug info on so it's compiled using the dash g symbol", "tokens": [50814, 36548, 365, 264, 24083, 13614, 322, 370, 309, 311, 36548, 1228, 264, 8240, 290, 5986, 51114], "temperature": 0.0, "avg_logprob": -0.23684251812142385, "compression_ratio": 1.576086956521739, "no_speech_prob": 0.004463762976229191}, {"id": 119, "seek": 55500, "start": 572.0, "end": 581.0, "text": " so we use the we are infernsic as a bridge so our focus was on memory access and vectorization as I said", "tokens": [51214, 370, 321, 764, 264, 321, 366, 13596, 3695, 299, 382, 257, 7283, 370, 527, 1879, 390, 322, 4675, 2105, 293, 8062, 2144, 382, 286, 848, 51664], "temperature": 0.0, "avg_logprob": -0.23684251812142385, "compression_ratio": 1.576086956521739, "no_speech_prob": 0.004463762976229191}, {"id": 120, "seek": 58100, "start": 582.0, "end": 592.0, "text": " so importance of the memory access pattern is so we really want this project for vectorization at first", "tokens": [50414, 370, 7379, 295, 264, 4675, 2105, 5102, 307, 370, 321, 534, 528, 341, 1716, 337, 8062, 2144, 412, 700, 50914], "temperature": 0.0, "avg_logprob": -0.11367412656545639, "compression_ratio": 1.6534090909090908, "no_speech_prob": 0.026067452505230904}, {"id": 121, "seek": 58100, "start": 592.0, "end": 600.0, "text": " and then we also have a plan to give it a push into the debugger so debuggers can utilize this information", "tokens": [50914, 293, 550, 321, 611, 362, 257, 1393, 281, 976, 309, 257, 2944, 666, 264, 24083, 1321, 370, 24083, 9458, 393, 16117, 341, 1589, 51314], "temperature": 0.0, "avg_logprob": -0.11367412656545639, "compression_ratio": 1.6534090909090908, "no_speech_prob": 0.026067452505230904}, {"id": 122, "seek": 58100, "start": 600.0, "end": 609.0, "text": " to provide better remarks but the main goal initially was the vectorization pass", "tokens": [51314, 281, 2893, 1101, 19151, 457, 264, 2135, 3387, 9105, 390, 264, 8062, 2144, 1320, 51764], "temperature": 0.0, "avg_logprob": -0.11367412656545639, "compression_ratio": 1.6534090909090908, "no_speech_prob": 0.026067452505230904}, {"id": 123, "seek": 60900, "start": 610.0, "end": 616.0, "text": " vectorization is a transformation pass so a transformation pass can always query an analysis pass", "tokens": [50414, 8062, 2144, 307, 257, 9887, 1320, 370, 257, 9887, 1320, 393, 1009, 14581, 364, 5215, 1320, 50714], "temperature": 0.0, "avg_logprob": -0.16265386434701773, "compression_ratio": 2.060810810810811, "no_speech_prob": 0.0047448487021028996}, {"id": 124, "seek": 60900, "start": 616.0, "end": 624.0, "text": " and what our work is our work was an analysis pass so this vectorization pass in LLVM can always query the", "tokens": [50714, 293, 437, 527, 589, 307, 527, 589, 390, 364, 5215, 1320, 370, 341, 8062, 2144, 1320, 294, 441, 43, 53, 44, 393, 1009, 14581, 264, 51114], "temperature": 0.0, "avg_logprob": -0.16265386434701773, "compression_ratio": 2.060810810810811, "no_speech_prob": 0.0047448487021028996}, {"id": 125, "seek": 60900, "start": 626.0, "end": 635.0, "text": " analysis pass this transformation pass okay so project contribution is actually that we have we have", "tokens": [51214, 5215, 1320, 341, 9887, 1320, 1392, 370, 1716, 13150, 307, 767, 300, 321, 362, 321, 362, 51664], "temperature": 0.0, "avg_logprob": -0.16265386434701773, "compression_ratio": 2.060810810810811, "no_speech_prob": 0.0047448487021028996}, {"id": 126, "seek": 63500, "start": 635.0, "end": 645.0, "text": " built an analysis pass that can generate these mappings and provides a better remarks for the case of", "tokens": [50364, 3094, 364, 5215, 1320, 300, 393, 8460, 613, 463, 28968, 293, 6417, 257, 1101, 19151, 337, 264, 1389, 295, 50864], "temperature": 0.0, "avg_logprob": -0.1385831356048584, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.01234909426420927}, {"id": 127, "seek": 63500, "start": 645.0, "end": 653.0, "text": " vectorization or any other things that requires it let's look at the implementation detail", "tokens": [50864, 8062, 2144, 420, 604, 661, 721, 300, 7029, 309, 718, 311, 574, 412, 264, 11420, 2607, 51264], "temperature": 0.0, "avg_logprob": -0.1385831356048584, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.01234909426420927}, {"id": 128, "seek": 63500, "start": 655.0, "end": 660.0, "text": " so for us the point of interest is load and store instruction because of the vectorization", "tokens": [51364, 370, 337, 505, 264, 935, 295, 1179, 307, 3677, 293, 3531, 10951, 570, 295, 264, 8062, 2144, 51614], "temperature": 0.0, "avg_logprob": -0.1385831356048584, "compression_ratio": 1.6453488372093024, "no_speech_prob": 0.01234909426420927}, {"id": 129, "seek": 66000, "start": 661.0, "end": 668.0, "text": " because we want to analyze the memory access patterns to actually emit in the vectorization so which is useful for the remark", "tokens": [50414, 570, 321, 528, 281, 12477, 264, 4675, 2105, 8294, 281, 767, 32084, 294, 264, 8062, 2144, 370, 597, 307, 4420, 337, 264, 7942, 50764], "temperature": 0.0, "avg_logprob": -0.22273942290759477, "compression_ratio": 1.5030674846625767, "no_speech_prob": 0.014931897632777691}, {"id": 130, "seek": 66000, "start": 669.0, "end": 682.0, "text": " and for example just take a look at this C code and if you compile this with clag or to dash g and if you emit the LLVM", "tokens": [50814, 293, 337, 1365, 445, 747, 257, 574, 412, 341, 383, 3089, 293, 498, 291, 31413, 341, 365, 596, 559, 420, 281, 8240, 290, 293, 498, 291, 32084, 264, 441, 43, 53, 44, 51464], "temperature": 0.0, "avg_logprob": -0.22273942290759477, "compression_ratio": 1.5030674846625767, "no_speech_prob": 0.014931897632777691}, {"id": 131, "seek": 68200, "start": 682.0, "end": 692.0, "text": " just for showing you that what's going on so I think it should be visible so you can see the call to", "tokens": [50364, 445, 337, 4099, 291, 300, 437, 311, 516, 322, 370, 286, 519, 309, 820, 312, 8974, 370, 291, 393, 536, 264, 818, 281, 50864], "temperature": 0.0, "avg_logprob": -0.1739160789633697, "compression_ratio": 1.4557823129251701, "no_speech_prob": 0.07764313369989395}, {"id": 132, "seek": 68200, "start": 692.0, "end": 703.0, "text": " in intrinsic functions debug.7 so we can build these expressions from them so as I said so if you look these were", "tokens": [50864, 294, 35698, 6828, 24083, 13, 22, 370, 321, 393, 1322, 613, 15277, 490, 552, 370, 382, 286, 848, 370, 498, 291, 574, 613, 645, 51414], "temperature": 0.0, "avg_logprob": -0.1739160789633697, "compression_ratio": 1.4557823129251701, "no_speech_prob": 0.07764313369989395}, {"id": 133, "seek": 70300, "start": 703.0, "end": 718.0, "text": " the first is to multiply n1 but and we compile it with the optimization on so the multiply instruction gone away and it just updated by", "tokens": [50364, 264, 700, 307, 281, 12972, 297, 16, 457, 293, 321, 31413, 309, 365, 264, 19618, 322, 370, 264, 12972, 10951, 2780, 1314, 293, 309, 445, 10588, 538, 51114], "temperature": 0.0, "avg_logprob": -0.21062541007995605, "compression_ratio": 1.7124183006535947, "no_speech_prob": 0.03277335315942764}, {"id": 134, "seek": 70300, "start": 718.0, "end": 732.0, "text": " shift lift operator okay so that's why you can see the shift lift operator here and not multiply so that's a problem so that's", "tokens": [51114, 5513, 5533, 12973, 1392, 370, 300, 311, 983, 291, 393, 536, 264, 5513, 5533, 12973, 510, 293, 406, 12972, 370, 300, 311, 257, 1154, 370, 300, 311, 51814], "temperature": 0.0, "avg_logprob": -0.21062541007995605, "compression_ratio": 1.7124183006535947, "no_speech_prob": 0.03277335315942764}, {"id": 135, "seek": 73200, "start": 732.0, "end": 739.0, "text": " a problem of accuracy of the expressions because we still not have a good plan of how to accurately generate the expressions", "tokens": [50364, 257, 1154, 295, 14170, 295, 264, 15277, 570, 321, 920, 406, 362, 257, 665, 1393, 295, 577, 281, 20095, 8460, 264, 15277, 50714], "temperature": 0.0, "avg_logprob": -0.13273545433493222, "compression_ratio": 1.9306930693069306, "no_speech_prob": 0.014032656326889992}, {"id": 136, "seek": 73200, "start": 739.0, "end": 750.0, "text": " because a lot many times these things gone away because of the optimizations on and it's always been a hard problem of how to actually debug", "tokens": [50714, 570, 257, 688, 867, 1413, 613, 721, 2780, 1314, 570, 295, 264, 5028, 14455, 322, 293, 309, 311, 1009, 668, 257, 1152, 1154, 295, 577, 281, 767, 24083, 51264], "temperature": 0.0, "avg_logprob": -0.13273545433493222, "compression_ratio": 1.9306930693069306, "no_speech_prob": 0.014032656326889992}, {"id": 137, "seek": 73200, "start": 750.0, "end": 758.0, "text": " in the case of when optimizations are actually gone so it's a classic problem which we still have to look so you can see the", "tokens": [51264, 294, 264, 1389, 295, 562, 5028, 14455, 366, 767, 2780, 370, 309, 311, 257, 7230, 1154, 597, 321, 920, 362, 281, 574, 370, 291, 393, 536, 264, 51664], "temperature": 0.0, "avg_logprob": -0.13273545433493222, "compression_ratio": 1.9306930693069306, "no_speech_prob": 0.014032656326889992}, {"id": 138, "seek": 75800, "start": 759.0, "end": 770.0, "text": " we can build these expressions from the instructions so yeah you can see this from example that computing the equivalent source expressions", "tokens": [50414, 321, 393, 1322, 613, 15277, 490, 264, 9415, 370, 1338, 291, 393, 536, 341, 490, 1365, 300, 15866, 264, 10344, 4009, 15277, 50964], "temperature": 0.0, "avg_logprob": -0.19121573521540716, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.015399222262203693}, {"id": 139, "seek": 75800, "start": 770.0, "end": 778.0, "text": " of interest will involve walking through the LLVM IR and using the information that provided in the debug in forensics", "tokens": [50964, 295, 1179, 486, 9494, 4494, 807, 264, 441, 43, 53, 44, 16486, 293, 1228, 264, 1589, 300, 5649, 294, 264, 24083, 294, 32034, 1167, 51364], "temperature": 0.0, "avg_logprob": -0.19121573521540716, "compression_ratio": 1.5636363636363637, "no_speech_prob": 0.015399222262203693}, {"id": 140, "seek": 77800, "start": 779.0, "end": 789.0, "text": " so even though our current interest is load and store but we still have to build for every instructions because those load and store", "tokens": [50414, 370, 754, 1673, 527, 2190, 1179, 307, 3677, 293, 3531, 457, 321, 920, 362, 281, 1322, 337, 633, 9415, 570, 729, 3677, 293, 3531, 50914], "temperature": 0.0, "avg_logprob": -0.18349125700176888, "compression_ratio": 1.7124183006535947, "no_speech_prob": 0.05254359543323517}, {"id": 141, "seek": 77800, "start": 789.0, "end": 797.0, "text": " can contain any sort of an instruction when you trace back to them it's maybe any binary instruction it contains gap instructions", "tokens": [50914, 393, 5304, 604, 1333, 295, 364, 10951, 562, 291, 13508, 646, 281, 552, 309, 311, 1310, 604, 17434, 10951, 309, 8306, 7417, 9415, 51314], "temperature": 0.0, "avg_logprob": -0.18349125700176888, "compression_ratio": 1.7124183006535947, "no_speech_prob": 0.05254359543323517}, {"id": 142, "seek": 79700, "start": 798.0, "end": 809.0, "text": " so it might be contain any instructions and we have to we still have to build for them too and as I said that optimizations", "tokens": [50414, 370, 309, 1062, 312, 5304, 604, 9415, 293, 321, 362, 281, 321, 920, 362, 281, 1322, 337, 552, 886, 293, 382, 286, 848, 300, 5028, 14455, 50964], "temperature": 0.0, "avg_logprob": -0.17949972481563173, "compression_ratio": 1.546583850931677, "no_speech_prob": 0.03250342980027199}, {"id": 143, "seek": 79700, "start": 809.0, "end": 818.0, "text": " make it impossible to recover the original source expressions so as you see that for example the 2 into N1 is optimized to N1", "tokens": [50964, 652, 309, 6243, 281, 8114, 264, 3380, 4009, 15277, 370, 382, 291, 536, 300, 337, 1365, 264, 568, 666, 426, 16, 307, 26941, 281, 426, 16, 51414], "temperature": 0.0, "avg_logprob": -0.17949972481563173, "compression_ratio": 1.546583850931677, "no_speech_prob": 0.03250342980027199}, {"id": 144, "seek": 81800, "start": 818.0, "end": 824.0, "text": " left shift 1 so which is recovering the original expression may not be possible every time", "tokens": [50364, 1411, 5513, 502, 370, 597, 307, 29180, 264, 3380, 6114, 815, 406, 312, 1944, 633, 565, 50664], "temperature": 0.0, "avg_logprob": -0.14255192405299136, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.03558913245797157}, {"id": 145, "seek": 81800, "start": 827.0, "end": 835.0, "text": " so let's look at how we proceed it's just a basic algorithm that I just want to go through so we started by traversing the IR", "tokens": [50814, 370, 718, 311, 574, 412, 577, 321, 8991, 309, 311, 445, 257, 3875, 9284, 300, 286, 445, 528, 281, 352, 807, 370, 321, 1409, 538, 23149, 278, 264, 16486, 51214], "temperature": 0.0, "avg_logprob": -0.14255192405299136, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.03558913245797157}, {"id": 146, "seek": 81800, "start": 835.0, "end": 844.0, "text": " so we have we started with the traversing the IR we identify the operations that were there for example load and store", "tokens": [51214, 370, 321, 362, 321, 1409, 365, 264, 23149, 278, 264, 16486, 321, 5876, 264, 7705, 300, 645, 456, 337, 1365, 3677, 293, 3531, 51664], "temperature": 0.0, "avg_logprob": -0.14255192405299136, "compression_ratio": 1.6502463054187193, "no_speech_prob": 0.03558913245797157}, {"id": 147, "seek": 84400, "start": 844.0, "end": 851.0, "text": " source or main so current interest is load and store instructions so specifically look for those instructions in the IR", "tokens": [50364, 4009, 420, 2135, 370, 2190, 1179, 307, 3677, 293, 3531, 9415, 370, 4682, 574, 337, 729, 9415, 294, 264, 16486, 50714], "temperature": 0.0, "avg_logprob": -0.16330558666284534, "compression_ratio": 1.9081632653061225, "no_speech_prob": 0.01562676392495632}, {"id": 148, "seek": 84400, "start": 851.0, "end": 861.0, "text": " and then trace those operands it might be any other instructions it might be inside any metadata so we can retrieve any information like name", "tokens": [50714, 293, 550, 13508, 729, 2208, 2967, 309, 1062, 312, 604, 661, 9415, 309, 1062, 312, 1854, 604, 26603, 370, 321, 393, 30254, 604, 1589, 411, 1315, 51214], "temperature": 0.0, "avg_logprob": -0.16330558666284534, "compression_ratio": 1.9081632653061225, "no_speech_prob": 0.01562676392495632}, {"id": 149, "seek": 84400, "start": 861.0, "end": 872.0, "text": " and utilizing those metadata information building the source expressions and then we reconstruct the expressions", "tokens": [51214, 293, 26775, 729, 26603, 1589, 2390, 264, 4009, 15277, 293, 550, 321, 31499, 264, 15277, 51764], "temperature": 0.0, "avg_logprob": -0.16330558666284534, "compression_ratio": 1.9081632653061225, "no_speech_prob": 0.01562676392495632}, {"id": 150, "seek": 87200, "start": 872.0, "end": 885.0, "text": " with all the information that we get so that's a bit all but just look at the current state so it's still not yet upstream to LLVM", "tokens": [50364, 365, 439, 264, 1589, 300, 321, 483, 370, 300, 311, 257, 857, 439, 457, 445, 574, 412, 264, 2190, 1785, 370, 309, 311, 920, 406, 1939, 33915, 281, 441, 43, 53, 44, 51014], "temperature": 0.0, "avg_logprob": -0.12824362516403198, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.02058391459286213}, {"id": 151, "seek": 87200, "start": 885.0, "end": 894.0, "text": " the PR is here so what I need from you or anyone you have experience or anyone you have active in that zone of optimizations", "tokens": [51014, 264, 11568, 307, 510, 370, 437, 286, 643, 490, 291, 420, 2878, 291, 362, 1752, 420, 2878, 291, 362, 4967, 294, 300, 6668, 295, 5028, 14455, 51464], "temperature": 0.0, "avg_logprob": -0.12824362516403198, "compression_ratio": 1.5644171779141105, "no_speech_prob": 0.02058391459286213}, {"id": 152, "seek": 89400, "start": 894.0, "end": 906.0, "text": " or for example analysis passes or transformation passes in LLVM so I do like you to have a look at the patch if you have some experience try to review the code as well", "tokens": [50364, 420, 337, 1365, 5215, 11335, 420, 9887, 11335, 294, 441, 43, 53, 44, 370, 286, 360, 411, 291, 281, 362, 257, 574, 412, 264, 9972, 498, 291, 362, 512, 1752, 853, 281, 3131, 264, 3089, 382, 731, 50964], "temperature": 0.0, "avg_logprob": -0.1269180679321289, "compression_ratio": 1.6224489795918366, "no_speech_prob": 0.21086759865283966}, {"id": 153, "seek": 89400, "start": 906.0, "end": 920.0, "text": " and give some feedback so we can proceed with much detail because it's still it's still a new analysis and still need a lot of work for struct as well", "tokens": [50964, 293, 976, 512, 5824, 370, 321, 393, 8991, 365, 709, 2607, 570, 309, 311, 920, 309, 311, 920, 257, 777, 5215, 293, 920, 643, 257, 688, 295, 589, 337, 6594, 382, 731, 51664], "temperature": 0.0, "avg_logprob": -0.1269180679321289, "compression_ratio": 1.6224489795918366, "no_speech_prob": 0.21086759865283966}, {"id": 154, "seek": 92000, "start": 920.0, "end": 929.0, "text": " so as I mentioned we need more review on the patch and some active work from me as well and if any of you interested please reach out", "tokens": [50364, 370, 382, 286, 2835, 321, 643, 544, 3131, 322, 264, 9972, 293, 512, 4967, 589, 490, 385, 382, 731, 293, 498, 604, 295, 291, 3102, 1767, 2524, 484, 50814], "temperature": 0.0, "avg_logprob": -0.08421368982600069, "compression_ratio": 1.8681818181818182, "no_speech_prob": 0.3918151557445526}, {"id": 155, "seek": 92000, "start": 929.0, "end": 939.0, "text": " and as I said the struct pose a unique challenge to when we try to build the expression for struct for example it was not quite easy", "tokens": [50814, 293, 382, 286, 848, 264, 6594, 10774, 257, 3845, 3430, 281, 562, 321, 853, 281, 1322, 264, 6114, 337, 6594, 337, 1365, 309, 390, 406, 1596, 1858, 51314], "temperature": 0.0, "avg_logprob": -0.08421368982600069, "compression_ratio": 1.8681818181818182, "no_speech_prob": 0.3918151557445526}, {"id": 156, "seek": 92000, "start": 939.0, "end": 947.0, "text": " it was very difficult to build the expression for struct because they pose a unique challenge if you see them in the intermediate representation", "tokens": [51314, 309, 390, 588, 2252, 281, 1322, 264, 6114, 337, 6594, 570, 436, 10774, 257, 3845, 3430, 498, 291, 536, 552, 294, 264, 19376, 10290, 51714], "temperature": 0.0, "avg_logprob": -0.08421368982600069, "compression_ratio": 1.8681818181818182, "no_speech_prob": 0.3918151557445526}, {"id": 157, "seek": 94700, "start": 947.0, "end": 960.0, "text": " it's very weird to look at them because I don't know how they actually gets there in the IR how they represent it it's not as simple as the giving expressions for an array", "tokens": [50364, 309, 311, 588, 3657, 281, 574, 412, 552, 570, 286, 500, 380, 458, 577, 436, 767, 2170, 456, 294, 264, 16486, 577, 436, 2906, 309, 309, 311, 406, 382, 2199, 382, 264, 2902, 15277, 337, 364, 10225, 51014], "temperature": 0.0, "avg_logprob": -0.12915258283738967, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.23114702105522156}, {"id": 158, "seek": 94700, "start": 960.0, "end": 971.0, "text": " so struct is still a problem accurate source level expression in case of optimization it's still a problem and there isn't always one to one mapping between the source code and IR", "tokens": [51014, 370, 6594, 307, 920, 257, 1154, 8559, 4009, 1496, 6114, 294, 1389, 295, 19618, 309, 311, 920, 257, 1154, 293, 456, 1943, 380, 1009, 472, 281, 472, 18350, 1296, 264, 4009, 3089, 293, 16486, 51564], "temperature": 0.0, "avg_logprob": -0.12915258283738967, "compression_ratio": 1.6794258373205742, "no_speech_prob": 0.23114702105522156}, {"id": 159, "seek": 97100, "start": 971.0, "end": 984.0, "text": " so if you see that we still don't know what to do in these cases if you see there's a pointer and the PTR 0 so IR can generate the same code for these two patterns", "tokens": [50364, 370, 498, 291, 536, 300, 321, 920, 500, 380, 458, 437, 281, 360, 294, 613, 3331, 498, 291, 536, 456, 311, 257, 23918, 293, 264, 430, 25936, 1958, 370, 16486, 393, 8460, 264, 912, 3089, 337, 613, 732, 8294, 51014], "temperature": 0.0, "avg_logprob": -0.09592320124308268, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.4347498118877411}, {"id": 160, "seek": 97100, "start": 984.0, "end": 998.0, "text": " and we don't know which have to pick so that's still a problem one solution for this was that debug information also contain the information about the file", "tokens": [51014, 293, 321, 500, 380, 458, 597, 362, 281, 1888, 370, 300, 311, 920, 257, 1154, 472, 3827, 337, 341, 390, 300, 24083, 1589, 611, 5304, 264, 1589, 466, 264, 3991, 51714], "temperature": 0.0, "avg_logprob": -0.09592320124308268, "compression_ratio": 1.7058823529411764, "no_speech_prob": 0.4347498118877411}, {"id": 161, "seek": 99800, "start": 998.0, "end": 1010.0, "text": " so there is a DI file in the debug info so what was actually we were discussing is so we have still information about the file path", "tokens": [50364, 370, 456, 307, 257, 11953, 3991, 294, 264, 24083, 13614, 370, 437, 390, 767, 321, 645, 10850, 307, 370, 321, 362, 920, 1589, 466, 264, 3991, 3100, 50964], "temperature": 0.0, "avg_logprob": -0.08009530580960787, "compression_ratio": 1.7607361963190185, "no_speech_prob": 0.2869749665260315}, {"id": 162, "seek": 99800, "start": 1010.0, "end": 1020.0, "text": " so what we can do is we can actually open the file and just go on that line and retrieve the information what was the actual ground truth just look at that", "tokens": [50964, 370, 437, 321, 393, 360, 307, 321, 393, 767, 1269, 264, 3991, 293, 445, 352, 322, 300, 1622, 293, 30254, 264, 1589, 437, 390, 264, 3539, 2727, 3494, 445, 574, 412, 300, 51464], "temperature": 0.0, "avg_logprob": -0.08009530580960787, "compression_ratio": 1.7607361963190185, "no_speech_prob": 0.2869749665260315}, {"id": 163, "seek": 102000, "start": 1020.0, "end": 1028.0, "text": " second thing was fall back and anything because we don't know what was there so just fall back to any of them", "tokens": [50364, 1150, 551, 390, 2100, 646, 293, 1340, 570, 321, 500, 380, 458, 437, 390, 456, 370, 445, 2100, 646, 281, 604, 295, 552, 50764], "temperature": 0.0, "avg_logprob": -0.09490466117858887, "compression_ratio": 1.652694610778443, "no_speech_prob": 0.34019234776496887}, {"id": 164, "seek": 102000, "start": 1028.0, "end": 1040.0, "text": " so but the DI file was actually quite easy but it's not good performance wise if you see open the file and just retrieving just going on that line and retrieving that", "tokens": [50764, 370, 457, 264, 11953, 3991, 390, 767, 1596, 1858, 457, 309, 311, 406, 665, 3389, 10829, 498, 291, 536, 1269, 264, 3991, 293, 445, 19817, 798, 445, 516, 322, 300, 1622, 293, 19817, 798, 300, 51364], "temperature": 0.0, "avg_logprob": -0.09490466117858887, "compression_ratio": 1.652694610778443, "no_speech_prob": 0.34019234776496887}, {"id": 165, "seek": 104000, "start": 1040.0, "end": 1048.0, "text": " so it's not good performance wise so yeah that's it for the talk and thank you for listening and if you are interested in letting", "tokens": [50364, 370, 309, 311, 406, 665, 3389, 10829, 370, 1338, 300, 311, 309, 337, 264, 751, 293, 1309, 291, 337, 4764, 293, 498, 291, 366, 3102, 294, 8295, 50764], "temperature": 0.0, "avg_logprob": -0.16408436638968332, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.614288866519928}, {"id": 166, "seek": 104000, "start": 1048.0, "end": 1058.0, "text": " knowing more about this project and the algorithm please reach out to me on mail or for example discord so yeah thank you", "tokens": [50764, 5276, 544, 466, 341, 1716, 293, 264, 9284, 1767, 2524, 484, 281, 385, 322, 10071, 420, 337, 1365, 32989, 370, 1338, 1309, 291, 51264], "temperature": 0.0, "avg_logprob": -0.16408436638968332, "compression_ratio": 1.608974358974359, "no_speech_prob": 0.614288866519928}, {"id": 167, "seek": 105800, "start": 1058.0, "end": 1062.0, "text": " any questions", "tokens": [50364, 604, 1651, 50564], "temperature": 0.0, "avg_logprob": -0.6154574950536092, "compression_ratio": 0.6190476190476191, "no_speech_prob": 0.7484723329544067}, {"id": 168, "seek": 106200, "start": 1062.0, "end": 1065.0, "text": " yes", "tokens": [50364, 2086, 50514], "temperature": 0.0, "avg_logprob": -0.8959086418151856, "compression_ratio": 0.2727272727272727, "no_speech_prob": 0.48279187083244324}, {"id": 169, "seek": 106500, "start": 1065.0, "end": 1076.0, "text": " why do you need to rebuild the entire sequence of expressions for each of the values", "tokens": [50364, 983, 360, 291, 643, 281, 16877, 264, 2302, 8310, 295, 15277, 337, 1184, 295, 264, 4190, 50914], "temperature": 0.0, "avg_logprob": -0.5101384949265865, "compression_ratio": 1.6405228758169934, "no_speech_prob": 0.2379959374666214}, {"id": 170, "seek": 106500, "start": 1076.0, "end": 1087.0, "text": " why not the specific value of the value it is what the dependencies and the production line from the file just like after a year ago", "tokens": [50914, 983, 406, 264, 2685, 2158, 295, 264, 2158, 309, 307, 437, 264, 36606, 293, 264, 4265, 1622, 490, 264, 3991, 445, 411, 934, 257, 1064, 2057, 51464], "temperature": 0.0, "avg_logprob": -0.5101384949265865, "compression_ratio": 1.6405228758169934, "no_speech_prob": 0.2379959374666214}, {"id": 171, "seek": 106500, "start": 1087.0, "end": 1090.0, "text": " can you just free us the question", "tokens": [51464, 393, 291, 445, 1737, 505, 264, 1168, 51614], "temperature": 0.0, "avg_logprob": -0.5101384949265865, "compression_ratio": 1.6405228758169934, "no_speech_prob": 0.2379959374666214}, {"id": 172, "seek": 109000, "start": 1090.0, "end": 1099.0, "text": " so you know like when you admit after marks there's a tool called the operator that just put everything in line", "tokens": [50364, 370, 291, 458, 411, 562, 291, 9796, 934, 10640, 456, 311, 257, 2290, 1219, 264, 12973, 300, 445, 829, 1203, 294, 1622, 50814], "temperature": 0.0, "avg_logprob": -0.38313324725041625, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.6241590976715088}, {"id": 173, "seek": 109000, "start": 1099.0, "end": 1114.0, "text": " so between that and what you have here it seems that you know you would get excellent results in terms of debubbability if you just did what the operator does", "tokens": [50814, 370, 1296, 300, 293, 437, 291, 362, 510, 309, 2544, 300, 291, 458, 291, 576, 483, 7103, 3542, 294, 2115, 295, 3001, 836, 65, 2310, 498, 291, 445, 630, 437, 264, 12973, 775, 51564], "temperature": 0.0, "avg_logprob": -0.38313324725041625, "compression_ratio": 1.6071428571428572, "no_speech_prob": 0.6241590976715088}, {"id": 174, "seek": 111400, "start": 1114.0, "end": 1127.0, "text": " plus you specify which of the values are causing the dependence that what you said and what the reason for the failed optimization", "tokens": [50364, 1804, 291, 16500, 597, 295, 264, 4190, 366, 9853, 264, 31704, 300, 437, 291, 848, 293, 437, 264, 1778, 337, 264, 7612, 19618, 51014], "temperature": 0.0, "avg_logprob": -0.33821362354716317, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.04594385623931885}, {"id": 175, "seek": 111400, "start": 1127.0, "end": 1134.0, "text": " okay so the question is basically about using opt viewer right", "tokens": [51014, 1392, 370, 264, 1168, 307, 1936, 466, 1228, 2427, 16767, 558, 51364], "temperature": 0.0, "avg_logprob": -0.33821362354716317, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.04594385623931885}, {"id": 176, "seek": 111400, "start": 1134.0, "end": 1141.0, "text": " yeah I was just admitting a more limited view as you have here and not trying to reconstruct everything", "tokens": [51364, 1338, 286, 390, 445, 44056, 257, 544, 5567, 1910, 382, 291, 362, 510, 293, 406, 1382, 281, 31499, 1203, 51714], "temperature": 0.0, "avg_logprob": -0.33821362354716317, "compression_ratio": 1.588235294117647, "no_speech_prob": 0.04594385623931885}, {"id": 177, "seek": 114100, "start": 1141.0, "end": 1152.0, "text": " so we still not reconstructing everything for example so we still we still not focusing on creating whole I at or just mapping whole I at the expressions", "tokens": [50364, 370, 321, 920, 406, 31499, 278, 1203, 337, 1365, 370, 321, 920, 321, 920, 406, 8416, 322, 4084, 1379, 286, 412, 420, 445, 18350, 1379, 286, 412, 264, 15277, 50914], "temperature": 0.0, "avg_logprob": -0.20424943600060805, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.16195997595787048}, {"id": 178, "seek": 114100, "start": 1152.0, "end": 1160.0, "text": " we still focusing on those loads and stores as I said so we still focusing on that right", "tokens": [50914, 321, 920, 8416, 322, 729, 12668, 293, 9512, 382, 286, 848, 370, 321, 920, 8416, 322, 300, 558, 51314], "temperature": 0.0, "avg_logprob": -0.20424943600060805, "compression_ratio": 1.8333333333333333, "no_speech_prob": 0.16195997595787048}, {"id": 179, "seek": 116000, "start": 1160.0, "end": 1173.0, "text": " yeah yes yes yes", "tokens": [50364, 1338, 2086, 2086, 2086, 51014], "temperature": 0.0, "avg_logprob": -0.24914375940958658, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.1555270403623581}, {"id": 180, "seek": 116000, "start": 1173.0, "end": 1182.0, "text": " yeah so we we still we still picking up the load and stores so if we see that is there any gap instructions because gap instruction actually contains a chain of instructions", "tokens": [51014, 1338, 370, 321, 321, 920, 321, 920, 8867, 493, 264, 3677, 293, 9512, 370, 498, 321, 536, 300, 307, 456, 604, 7417, 9415, 570, 7417, 10951, 767, 8306, 257, 5021, 295, 9415, 51464], "temperature": 0.0, "avg_logprob": -0.24914375940958658, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.1555270403623581}, {"id": 181, "seek": 118200, "start": 1182.0, "end": 1197.0, "text": " so so but we still have to build the loop for loads and stores and opt viewer still not good at emitting those remarks it's still very abstract in that sense if I remember it correctly", "tokens": [50364, 370, 370, 457, 321, 920, 362, 281, 1322, 264, 6367, 337, 12668, 293, 9512, 293, 2427, 16767, 920, 406, 665, 412, 846, 2414, 729, 19151, 309, 311, 920, 588, 12649, 294, 300, 2020, 498, 286, 1604, 309, 8944, 51114], "temperature": 0.0, "avg_logprob": -0.21812519128771796, "compression_ratio": 1.7257142857142858, "no_speech_prob": 0.5955641865730286}, {"id": 182, "seek": 118200, "start": 1197.0, "end": 1207.0, "text": " so I'm not sure how to go with opt viewer but we still making it for load and stores and tracing back the information", "tokens": [51114, 370, 286, 478, 406, 988, 577, 281, 352, 365, 2427, 16767, 457, 321, 920, 1455, 309, 337, 3677, 293, 9512, 293, 25262, 646, 264, 1589, 51614], "temperature": 0.0, "avg_logprob": -0.21812519128771796, "compression_ratio": 1.7257142857142858, "no_speech_prob": 0.5955641865730286}, {"id": 183, "seek": 120700, "start": 1207.0, "end": 1214.0, "text": " yeah yep", "tokens": [50364, 1338, 18633, 50714], "temperature": 0.0, "avg_logprob": -0.7943024635314941, "compression_ratio": 1.0, "no_speech_prob": 0.5485008955001831}, {"id": 184, "seek": 120700, "start": 1214.0, "end": 1223.0, "text": " yeah yes", "tokens": [50714, 1338, 2086, 51164], "temperature": 0.0, "avg_logprob": -0.7943024635314941, "compression_ratio": 1.0, "no_speech_prob": 0.5485008955001831}, {"id": 185, "seek": 120700, "start": 1223.0, "end": 1226.0, "text": " nope", "tokens": [51164, 23444, 51314], "temperature": 0.0, "avg_logprob": -0.7943024635314941, "compression_ratio": 1.0, "no_speech_prob": 0.5485008955001831}, {"id": 186, "seek": 120700, "start": 1226.0, "end": 1231.0, "text": " nope", "tokens": [51314, 23444, 51564], "temperature": 0.0, "avg_logprob": -0.7943024635314941, "compression_ratio": 1.0, "no_speech_prob": 0.5485008955001831}, {"id": 187, "seek": 123100, "start": 1231.0, "end": 1251.0, "text": " not sure but one thing I can guess that so basically opening a file is not something which is very good performance wise and and just choosing and just going on that line down because you can see that there could be a multiple lines of code in code base", "tokens": [50364, 406, 988, 457, 472, 551, 286, 393, 2041, 300, 370, 1936, 5193, 257, 3991, 307, 406, 746, 597, 307, 588, 665, 3389, 10829, 293, 293, 445, 10875, 293, 445, 516, 322, 300, 1622, 760, 570, 291, 393, 536, 300, 456, 727, 312, 257, 3866, 3876, 295, 3089, 294, 3089, 3096, 51364], "temperature": 0.0, "avg_logprob": -0.2015172287269875, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.2301403284072876}, {"id": 188, "seek": 125100, "start": 1251.0, "end": 1261.0, "text": " so you have to go on that particular line so it would need it would need it would be very bad in performance was I think", "tokens": [50364, 370, 291, 362, 281, 352, 322, 300, 1729, 1622, 370, 309, 576, 643, 309, 576, 643, 309, 576, 312, 588, 1578, 294, 3389, 390, 286, 519, 50864], "temperature": 0.0, "avg_logprob": -0.24583539095791904, "compression_ratio": 1.3736263736263736, "no_speech_prob": 0.4464495778083801}, {"id": 189, "seek": 125100, "start": 1261.0, "end": 1263.0, "text": " okay", "tokens": [50864, 1392, 50964], "temperature": 0.0, "avg_logprob": -0.24583539095791904, "compression_ratio": 1.3736263736263736, "no_speech_prob": 0.4464495778083801}, {"id": 190, "seek": 126300, "start": 1263.0, "end": 1287.0, "text": " and there is no and there is no theory about if it would be more beneficial to tell the programmer the error that or the sub optimal choice that you made was between line 27 28 compared to generating some arbitrary complex expression that might not be representative of what the program originally wrote", "tokens": [50364, 293, 456, 307, 572, 293, 456, 307, 572, 5261, 466, 498, 309, 576, 312, 544, 14072, 281, 980, 264, 32116, 264, 6713, 300, 420, 264, 1422, 16252, 3922, 300, 291, 1027, 390, 1296, 1622, 7634, 7562, 5347, 281, 17746, 512, 23211, 3997, 6114, 300, 1062, 406, 312, 12424, 295, 437, 264, 1461, 7993, 4114, 51564], "temperature": 0.0, "avg_logprob": -0.2159494367139093, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.106817826628685}, {"id": 191, "seek": 128700, "start": 1287.0, "end": 1294.0, "text": " I'm not sure", "tokens": [50364, 286, 478, 406, 988, 50714], "temperature": 0.0, "avg_logprob": -0.5815888813563755, "compression_ratio": 0.8461538461538461, "no_speech_prob": 0.2144971340894699}, {"id": 192, "seek": 128700, "start": 1294.0, "end": 1301.0, "text": " okay", "tokens": [50714, 1392, 51064], "temperature": 0.0, "avg_logprob": -0.5815888813563755, "compression_ratio": 0.8461538461538461, "no_speech_prob": 0.2144971340894699}, {"id": 193, "seek": 128700, "start": 1301.0, "end": 1305.0, "text": " okay", "tokens": [51064, 1392, 51264], "temperature": 0.0, "avg_logprob": -0.5815888813563755, "compression_ratio": 0.8461538461538461, "no_speech_prob": 0.2144971340894699}, {"id": 194, "seek": 130500, "start": 1305.0, "end": 1324.0, "text": " yeah I think it would be fine then if you if you're choosing for emitting a remarks then then you know that this is not good performance right so if you want to look at the performance if you want to look at the actual correct remarks so you have to going deep in the performance", "tokens": [50364, 1338, 286, 519, 309, 576, 312, 2489, 550, 498, 291, 498, 291, 434, 10875, 337, 846, 2414, 257, 19151, 550, 550, 291, 458, 300, 341, 307, 406, 665, 3389, 558, 370, 498, 291, 528, 281, 574, 412, 264, 3389, 498, 291, 528, 281, 574, 412, 264, 3539, 3006, 19151, 370, 291, 362, 281, 516, 2452, 294, 264, 3389, 51314], "temperature": 0.0, "avg_logprob": -0.19643460550615865, "compression_ratio": 1.8116883116883118, "no_speech_prob": 0.25962385535240173}, {"id": 195, "seek": 132400, "start": 1324.0, "end": 1343.0, "text": " thing then yeah then it would be possible and we have also we also talking about preserving the metadata in LVM as they go through but but in LVM metadata is designed in a way so we can drop we can drop at any time so we still cannot preserve the metadata information", "tokens": [50364, 551, 550, 1338, 550, 309, 576, 312, 1944, 293, 321, 362, 611, 321, 611, 1417, 466, 33173, 264, 26603, 294, 441, 53, 44, 382, 436, 352, 807, 457, 457, 294, 441, 53, 44, 26603, 307, 4761, 294, 257, 636, 370, 321, 393, 3270, 321, 393, 3270, 412, 604, 565, 370, 321, 920, 2644, 15665, 264, 26603, 1589, 51314], "temperature": 0.0, "avg_logprob": -0.2408214330673218, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.4606070816516876}, {"id": 196, "seek": 132400, "start": 1343.0, "end": 1352.0, "text": " so it's still a challenge this lot move what going on on this side so yeah", "tokens": [51314, 370, 309, 311, 920, 257, 3430, 341, 688, 1286, 437, 516, 322, 322, 341, 1252, 370, 1338, 51764], "temperature": 0.0, "avg_logprob": -0.2408214330673218, "compression_ratio": 1.7628865979381443, "no_speech_prob": 0.4606070816516876}, {"id": 197, "seek": 138200, "start": 1382.0, "end": 1388.0, "text": " yeah", "tokens": [50364, 1338, 50664], "temperature": 0.0, "avg_logprob": -0.8280257119072808, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.5354897975921631}, {"id": 198, "seek": 138200, "start": 1388.0, "end": 1392.0, "text": " yeah", "tokens": [50664, 1338, 50864], "temperature": 0.0, "avg_logprob": -0.8280257119072808, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.5354897975921631}, {"id": 199, "seek": 138200, "start": 1392.0, "end": 1398.0, "text": " okay", "tokens": [50864, 1392, 51164], "temperature": 0.0, "avg_logprob": -0.8280257119072808, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.5354897975921631}, {"id": 200, "seek": 138200, "start": 1398.0, "end": 1401.0, "text": " yeah", "tokens": [51164, 1338, 51314], "temperature": 0.0, "avg_logprob": -0.8280257119072808, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.5354897975921631}, {"id": 201, "seek": 138200, "start": 1401.0, "end": 1403.0, "text": " thank you", "tokens": [51314, 1309, 291, 51414], "temperature": 0.0, "avg_logprob": -0.8280257119072808, "compression_ratio": 0.9666666666666667, "no_speech_prob": 0.5354897975921631}, {"id": 202, "seek": 140300, "start": 1403.0, "end": 1406.0, "text": " yeah", "tokens": [50364, 1338, 50514], "temperature": 0.0, "avg_logprob": -0.7060754776000977, "compression_ratio": 1.2162162162162162, "no_speech_prob": 0.21892264485359192}, {"id": 203, "seek": 140300, "start": 1406.0, "end": 1413.0, "text": " okay", "tokens": [50514, 1392, 50864], "temperature": 0.0, "avg_logprob": -0.7060754776000977, "compression_ratio": 1.2162162162162162, "no_speech_prob": 0.21892264485359192}, {"id": 204, "seek": 140300, "start": 1413.0, "end": 1418.0, "text": " thank you for joining when you leave make sure to take everything", "tokens": [50864, 1309, 291, 337, 5549, 562, 291, 1856, 652, 988, 281, 747, 1203, 51114], "temperature": 0.0, "avg_logprob": -0.7060754776000977, "compression_ratio": 1.2162162162162162, "no_speech_prob": 0.21892264485359192}, {"id": 205, "seek": 140300, "start": 1418.0, "end": 1423.0, "text": " yeah", "tokens": [51114, 1338, 51364], "temperature": 0.0, "avg_logprob": -0.7060754776000977, "compression_ratio": 1.2162162162162162, "no_speech_prob": 0.21892264485359192}, {"id": 206, "seek": 140300, "start": 1423.0, "end": 1427.0, "text": " yeah", "tokens": [51364, 1338, 51564], "temperature": 0.0, "avg_logprob": -0.7060754776000977, "compression_ratio": 1.2162162162162162, "no_speech_prob": 0.21892264485359192}, {"id": 207, "seek": 140300, "start": 1427.0, "end": 1431.0, "text": " yeah", "tokens": [51564, 1338, 51764], "temperature": 0.0, "avg_logprob": -0.7060754776000977, "compression_ratio": 1.2162162162162162, "no_speech_prob": 0.21892264485359192}, {"id": 208, "seek": 143300, "start": 1433.0, "end": 1436.0, "text": " yeah", "tokens": [50364, 1338, 50514], "temperature": 0.0, "avg_logprob": -0.557690441608429, "compression_ratio": 0.3333333333333333, "no_speech_prob": 0.30679333209991455}], "language": "en"}