{"text": " Alright, thank you, thank you Theo for all the organization. I want to thank my employer Instacart for sending me here and thank you everybody here for coming to this talk. Quick survey, how many people have written some code in Rocko before? Oh good. How many people use it kind of regularly? Okay. How many people write bash scripts? Okay, excellent. So my name is Brian Duggan, I'm a logistics engineer at Instacart. We do grocery delivery. I would like to say basically everything is a race condition for us. I'm also a Rocko module author and I like to write scripts in Rocko. So this is a brief outline of the talk. First some motivation. What am I talking about? I'm going to go over concurrency in Rocko, just a basic overview. And then I'll show you some tricks for migrating some stuff from bash to Rocko, how things look in bash and how the same thing would look in Rocko, and then how using some of the concurrency primitives can help your problem solving abilities. Okay. So a few words about scripting. I tried to enumerate some of the characteristics of what we call scripting. So I'm really talking about shell scripting. And I think when I'm writing a shell script it's usually something to solve. I'm going to do something pretty quickly. I don't want very many dependencies. It should be easy to understand. And it should be pretty reliable because has anybody had the experience of writing a script and it lasts for several years when you thought it was going to last for a few minutes? Okay, yes. Good. All right. We are together. Okay. So another thing that I've noticed a lot about shell scripts is they're supposed to be pretty simple. You know, you basically run some commands. Maybe you check their exit status. Maybe you have a little bit of control flow in your scripts. If you're fancy you might write a PID file and use the file system to do atomic write and rename so you get some guarantees that you don't have two of the same copy of your script running at the same time. For the most part they look like this though, right? They're basically like this sort of standard procedural flow. You have some decisions. You go forwards. You don't usually see, if you're really fancy you might use trap to capture some signals. You might try to time out some commands. Has anybody used time out by the way? I just learned about it recently. You might have some progress indicators. You don't usually see things like async await or event loops or message queues or definitely not threads, definitely not mutexes or shared memory or anything like that. With scripts we assume that we don't really need real programming. We're just doing something simple. We want to get it done. There's this idea that the world is just not that complicated. I think in reality the world actually is that complicated. This is how I vision our scripts are on the right where we have this vision of this like perfect linear world where things are well organized, running one after another. But in reality the world is kind of a mess. As a wise man once said earlier today, minimizing concurrent code leads to crappy programs. Let's talk about Raku. For a deeper dive about the implementation of concurrency in Raku, I recommend that you watch Jonathan Worthingson's talk many years ago about parallelism, asynchronic and concurrency in Raku. He gives some really good definitions of those three words. I'm just going to say the definitions without going into too much detail. But parallelism is the idea of choosing to do multiple things at once. Asynchrony is reacting to things that will happen. Concurrency is competition to access and mutate some shared resource. Raku has great support for those. Being a multi-paradigm language, it doesn't impose any particular strategy on you for dealing with concurrency. We've had some conversations earlier today about Elixir, which has the actor model. There's a go track where you have a lot of threads running at the same time. Many languages have different models of concurrency, and Raku tries not to be too dogmatic and lets you do whatever you want. You have to deal with race conditions yourself. If you want to get started writing some Raku and experimenting with concurrency, instead of say hello and say world, you can just put the word start in front of say hello. What that does is it schedules the execution of that statement on another thread. Congratulations, you've just made a race condition. The output from this program is not deterministic. You might get hello world, you might get world hello if world runs before the second thread runs, or you might just get world if the second thread doesn't have a chance to start before the program exits. You can experiment and find out for yourself why other languages impose these models and it's to manage things like this. The simplest thing is you say, okay, I want to avoid this race condition. The easiest thing to do is you can just add the word await. We heard earlier about async await. There's no async, there's just await. Wait until it finishes, wait until the promise finishes before going on to the next statement. There are a number of high level, so the documentation of concurrency in Raku breaks it down as follows. You have these high level APIs, you have low level APIs, and then there are also some other built in event sources that are not mentioned on the concurrency page. The high level APIs basically have promises, which are what we just saw, where you're scheduling some execution and it's going to finish at some point in the future. You have channels, which are basically one to one message queues between different threads of execution. You have supplies, which are one to many message queues. Then you also have this nice thing called proc async, which is a great way to deal with external processes. We're going to see a little bit more of that today since this talk is mostly about scripting, where you're managing external processes. There are also low level APIs. If you want to deal with threads, you can. If you want to deal with locks, then congratulations, you have access to the kernel's implementation of mutex, which may be hardware implementations even. We also have atomic types and atomic operators. Again, these are sometimes implemented even at the hardware level. You can even use the scheduler if you want to change the concurrency paradigm that you're using by writing another scheduler that implements the strategy for scheduling, for queuing different threads. I'm going to go through some of the different built in event sources and do some very practical examples. Some things you might see in your scripts, file system changes. All these things are built into the core. TCP or UDC sockets, of course time changing provides a great event stream. IOPype lets you watch different Unix pipes and respond based on incoming data. I'll also talk a little bit about parallel execution with race and hyper and phasers. Let's do a quick trip from bash to racu. Easiest way to go. Take your bash script in front of every line, put the word shell, and congratulations, you have now ported your bash script to racu. Shell is built in and even better than that, there is an entire language for quoting. You don't have to deal with all of the horribleness of trying to escape your quotes when you're having subcommands and they all have quotes for all of their different arguments. Probably the most interesting one is the one at the top, the two angle brackets. This is sort of like a lot of languages have a way of taking words separated by white space and turning them into an array. That's what this does except if you have something in quotes, that becomes its own element. Starting echo, starting database dump in quotes makes an array with two elements. The first one is echo and the second one is starting database dump. Those get passed then as an array to the shell command. There's some extra fancy stuff going on there behind the scenes. Here's a little script that starts your database dump. One of the goals of racu is that easy things should be easy and hard things should be possible, as Larry has said. Of course, you don't have to say shell echo. You can use the word say to print things to the screen. Say starting database dump, run your shell command. Here we have our first little glimpse of asynchrony with this thing where I'm saying say now minus init now. What this does is pretty clever. What's happening here is init is a phaser and this runs during the initialization phase of your racu program. Anybody use go here? Go programmers? Go has something similar. Go has something called deferred execution. You might use it in a go program to say, hey, when you're exiting the subroutine, don't forget to execute this database transaction, something like that. There are a lot of phasers. Basically, you can use those to schedule code. I don't know about you, but one of the most annoying things is having a script that starts doing something and then you sit there waiting and watching and nothing is happening on the screen. I like to have at least a clock saying how much time has passed. For something like a database dump, if you do it a lot, then you'll know and then you could even turn it into a progress bar. Then you'll be able to estimate how much time something is going to take. We can do this easily with a supply. We make a supply, we call supply.interval1. This makes a clock that gives us a new value every one second. Then we make a tap on the supply by saying my dollar timer equals clock.tap. Then the code there.say is saying what the argument is to the tap. Basically it'll say 1, 2, 3, 4, 5. Then that's running on a separate thread. While PGDump is running, you're seeing time go by. That's really nice. Then there's some other nice built-ins to make it even a little bit prettier. Since we want to have a script that doesn't have a lot of external dependencies, you can use the very clever polymod, one of my favorite methods, which basically does a sequence of mod and div operations and turns your seconds into minutes and seconds. Then you can format it and then you have a nice little clock. Then you might say, hey, that's so great. I want to do this on all my shell commands. I always want to see a little clock. Well, guess what? You can use, so in Python they're called decorators. In Raku, it's the wrap command. Basically we can say shell.wrap. Then basically this will call our timer before we call call same to do the original shell command. Then it'll close it and then it'll say done. Now you've got your nice script that you just copied and pasted and added shell to the beginning of them. Now all of your commands have a little clock saying how long they're going to take. Let's talk quickly about timeouts. This is the timeout command in bash. You can give it an argument that's the number of seconds. Timeout 1 and then in this example we're doing a DNS call. We're looking up example.com. So we say timeout1hostexample.com and if it fails then the exit code is nonzero. So otherwise we say DNS seems okay. The way we do that in Raku is with a promise, actually a couple of promises, one that expires after a second and then another one that does whatever you're doing. And then you make a third promise which resolves when either one of those two finishes first. So we could say promise, we await promise.anyof and then start shell host command and then start sleep 1. So we do those two things in separate threads. Whichever one finishes first we'll know if we timed out. It doesn't quite work though because shell is going to fork something off and when you fork something even if your Raku program exits it's going to keep going. So there is a better way to do that and that is to use proc async instead of shell so that you don't have this sort of tree of processes. So we say timeout equals promise.in1. My dollar proc is a proc async new host example.com and then you await either any of proc.start which finishes when the process finishes or dollar timeout and then you can call proc.kill if timeout is true. Okay so I'm going to do a few more examples here to show you how to build up how we use some of these other primitives to help you think about problem solving concurrently. So supply.tap another way of saying that these are exactly the same. Instead of saying supply.tap you can say start, react, whenever, supply which is a lot of words. Start in a new thread, react makes another like a reactor or an event loop and then whenever it says hey let's make a tap on this supply. So let's watch a directory for changes. Whenever anything changes in there we're going to turn our markdown file into hdml. Dollar star cwd is the current path. You can call watch and then you can grep for certain files and then call md to hdml whenever one of them changes. I have a few more examples quickly. The slides will be available for you to look at more slowly if I run out of time. So let's look at ping. Ping is great. One of the things that sadly is missing from ping is that it prints all these nice statistics at the end but it doesn't print the median. What if you want the median ping time? You only have the min, max and the average. Well let's compute it by watching the output of ping and then keeping track of the output and then printing it at the end. And so here you can see what's really nice about the react whenever construct is that you can have a whole bunch of whenever inside your react. So we have a little leave phaser which is going to kill the process when we exit. We have our process which is going to do the ping and then whenever there's a timeout we're done. Whenever we get a line we parse it and then we add it to this lines array. Whenever we get a signal, so signal makes a stream that when signals are sent to the process you can also finish and then we can compute the median at the end. So can we make it even fancier and ping multiple hosts at the same time with our program? So let's see if we can make something that looks kind of like this. Multi-ping, where multi-ping gets a list of hosts and then it makes this little bar graph by watching the output of ping and then you can sort of see like which one of these hosts is responding more quickly at the same time. This is a really short program to write and basically what you do is you start a loop using a channel. And so this runs in a separate process. Whenever the channel.receive is going to block, whenever it receives something you take that something and you print it out to the screen and then you basically start your processes. There are a few sort of nice things here, nice features of Raku that make this even a little bit easier. So this little percent is a way of constructing a hash and what's kind of cool is that constructing a hash looks exactly the same way as destructuring. If you've programmed in JavaScript, you know they have this really nice argument destructuring syntax and it's equivalent to the construction syntax. So you can basically make these channels that communicate between threads and you can send structured data in between them. And you can also have type checking and things like that and so it's really nice. And that's your output. Similarly if we wanted to dump a whole bunch of MySQL or Postgres databases at the same time, if we don't care about the output it's even easier. And the way we can do that is by using a statement prefix called race which basically says take this loop and run the body of the loop concurrently. And you can give a parameter of the batch, the number to run concurrently and the degree of concurrency. And then in a few lines of code we've made PG multidump which can dump several databases at once. Okay so in conclusion we've seen some examples of tracking progress of a command, timing out a command, using asynchronous techniques to respond to file system events, using asynchronous techniques to respond to lines emitted from a command, instant parallelism, we saw some locks and for further reading there's stuff on the ecosystem and also the Rocky documentation about concurrency is excellent. So that's it, thank you. I think we may be out of time, I don't know if we have time for a question. One question. Or multiple questions at the same time. I'll take your one question. You get an example of watching a file system event and kicking off a process based on that. Yes. Sorry I don't have a word I need here but is there a sort of a program paradigm or capability for testing whether something has finished being written to before you start off your file system? If the file is really big then the file appearing might not have been finished and it's written yet and you kicked off something to convert to HTML before it's done so. Yes so it does get, I think I know where you're going with this especially because if you're using an editor then it's not that there's a single event where the file changes and it'll often be the editor will be doing a write and rename or it'll start writing and so you want to be careful about that. So there are some things to do that. You can throttle your supplies is one thing. If you're spawning a process you can say proc.ready and that will tell you when it's ready so that before you start sending things to it. And then basically it's hooking into the notification API for the file system so any events from the file system there's going to be a file changed, file renamed and then you, so the limit is only whatever the file system provides. Yeah sure. All right thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 9.8, "text": " Alright, thank you, thank you Theo for all the organization.", "tokens": [50364, 2798, 11, 1309, 291, 11, 1309, 291, 42519, 337, 439, 264, 4475, 13, 50854], "temperature": 0.0, "avg_logprob": -0.33249399138659963, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.19566719233989716}, {"id": 1, "seek": 0, "start": 9.8, "end": 16.56, "text": " I want to thank my employer Instacart for sending me here and thank you everybody here for coming", "tokens": [50854, 286, 528, 281, 1309, 452, 16205, 2730, 326, 446, 337, 7750, 385, 510, 293, 1309, 291, 2201, 510, 337, 1348, 51192], "temperature": 0.0, "avg_logprob": -0.33249399138659963, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.19566719233989716}, {"id": 2, "seek": 0, "start": 16.56, "end": 17.56, "text": " to this talk.", "tokens": [51192, 281, 341, 751, 13, 51242], "temperature": 0.0, "avg_logprob": -0.33249399138659963, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.19566719233989716}, {"id": 3, "seek": 0, "start": 17.56, "end": 22.0, "text": " Quick survey, how many people have written some code in Rocko before?", "tokens": [51242, 12101, 8984, 11, 577, 867, 561, 362, 3720, 512, 3089, 294, 6922, 78, 949, 30, 51464], "temperature": 0.0, "avg_logprob": -0.33249399138659963, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.19566719233989716}, {"id": 4, "seek": 0, "start": 22.0, "end": 23.0, "text": " Oh good.", "tokens": [51464, 876, 665, 13, 51514], "temperature": 0.0, "avg_logprob": -0.33249399138659963, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.19566719233989716}, {"id": 5, "seek": 0, "start": 23.0, "end": 25.72, "text": " How many people use it kind of regularly?", "tokens": [51514, 1012, 867, 561, 764, 309, 733, 295, 11672, 30, 51650], "temperature": 0.0, "avg_logprob": -0.33249399138659963, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.19566719233989716}, {"id": 6, "seek": 0, "start": 25.72, "end": 26.72, "text": " Okay.", "tokens": [51650, 1033, 13, 51700], "temperature": 0.0, "avg_logprob": -0.33249399138659963, "compression_ratio": 1.517766497461929, "no_speech_prob": 0.19566719233989716}, {"id": 7, "seek": 2672, "start": 26.72, "end": 30.08, "text": " How many people write bash scripts?", "tokens": [50364, 1012, 867, 561, 2464, 46183, 23294, 30, 50532], "temperature": 0.0, "avg_logprob": -0.26035773152052755, "compression_ratio": 1.4763948497854078, "no_speech_prob": 0.004597763996571302}, {"id": 8, "seek": 2672, "start": 30.08, "end": 34.44, "text": " Okay, excellent.", "tokens": [50532, 1033, 11, 7103, 13, 50750], "temperature": 0.0, "avg_logprob": -0.26035773152052755, "compression_ratio": 1.4763948497854078, "no_speech_prob": 0.004597763996571302}, {"id": 9, "seek": 2672, "start": 34.44, "end": 38.76, "text": " So my name is Brian Duggan, I'm a logistics engineer at Instacart.", "tokens": [50750, 407, 452, 1315, 307, 10765, 413, 697, 1275, 11, 286, 478, 257, 27420, 11403, 412, 2730, 326, 446, 13, 50966], "temperature": 0.0, "avg_logprob": -0.26035773152052755, "compression_ratio": 1.4763948497854078, "no_speech_prob": 0.004597763996571302}, {"id": 10, "seek": 2672, "start": 38.76, "end": 40.239999999999995, "text": " We do grocery delivery.", "tokens": [50966, 492, 360, 14410, 8982, 13, 51040], "temperature": 0.0, "avg_logprob": -0.26035773152052755, "compression_ratio": 1.4763948497854078, "no_speech_prob": 0.004597763996571302}, {"id": 11, "seek": 2672, "start": 40.239999999999995, "end": 45.68, "text": " I would like to say basically everything is a race condition for us.", "tokens": [51040, 286, 576, 411, 281, 584, 1936, 1203, 307, 257, 4569, 4188, 337, 505, 13, 51312], "temperature": 0.0, "avg_logprob": -0.26035773152052755, "compression_ratio": 1.4763948497854078, "no_speech_prob": 0.004597763996571302}, {"id": 12, "seek": 2672, "start": 45.68, "end": 52.32, "text": " I'm also a Rocko module author and I like to write scripts in Rocko.", "tokens": [51312, 286, 478, 611, 257, 6922, 78, 10088, 3793, 293, 286, 411, 281, 2464, 23294, 294, 6922, 78, 13, 51644], "temperature": 0.0, "avg_logprob": -0.26035773152052755, "compression_ratio": 1.4763948497854078, "no_speech_prob": 0.004597763996571302}, {"id": 13, "seek": 2672, "start": 52.32, "end": 54.16, "text": " So this is a brief outline of the talk.", "tokens": [51644, 407, 341, 307, 257, 5353, 16387, 295, 264, 751, 13, 51736], "temperature": 0.0, "avg_logprob": -0.26035773152052755, "compression_ratio": 1.4763948497854078, "no_speech_prob": 0.004597763996571302}, {"id": 14, "seek": 2672, "start": 54.16, "end": 55.16, "text": " First some motivation.", "tokens": [51736, 2386, 512, 12335, 13, 51786], "temperature": 0.0, "avg_logprob": -0.26035773152052755, "compression_ratio": 1.4763948497854078, "no_speech_prob": 0.004597763996571302}, {"id": 15, "seek": 5516, "start": 55.16, "end": 57.12, "text": " What am I talking about?", "tokens": [50364, 708, 669, 286, 1417, 466, 30, 50462], "temperature": 0.0, "avg_logprob": -0.21976891430941495, "compression_ratio": 1.6243902439024391, "no_speech_prob": 0.0028404886834323406}, {"id": 16, "seek": 5516, "start": 57.12, "end": 62.68, "text": " I'm going to go over concurrency in Rocko, just a basic overview.", "tokens": [50462, 286, 478, 516, 281, 352, 670, 23702, 10457, 294, 6922, 78, 11, 445, 257, 3875, 12492, 13, 50740], "temperature": 0.0, "avg_logprob": -0.21976891430941495, "compression_ratio": 1.6243902439024391, "no_speech_prob": 0.0028404886834323406}, {"id": 17, "seek": 5516, "start": 62.68, "end": 67.84, "text": " And then I'll show you some tricks for migrating some stuff from bash to Rocko, how things", "tokens": [50740, 400, 550, 286, 603, 855, 291, 512, 11733, 337, 6186, 8754, 512, 1507, 490, 46183, 281, 6922, 78, 11, 577, 721, 50998], "temperature": 0.0, "avg_logprob": -0.21976891430941495, "compression_ratio": 1.6243902439024391, "no_speech_prob": 0.0028404886834323406}, {"id": 18, "seek": 5516, "start": 67.84, "end": 73.47999999999999, "text": " look in bash and how the same thing would look in Rocko, and then how using some of the concurrency", "tokens": [50998, 574, 294, 46183, 293, 577, 264, 912, 551, 576, 574, 294, 6922, 78, 11, 293, 550, 577, 1228, 512, 295, 264, 23702, 10457, 51280], "temperature": 0.0, "avg_logprob": -0.21976891430941495, "compression_ratio": 1.6243902439024391, "no_speech_prob": 0.0028404886834323406}, {"id": 19, "seek": 5516, "start": 73.47999999999999, "end": 79.88, "text": " primitives can help your problem solving abilities.", "tokens": [51280, 2886, 38970, 393, 854, 428, 1154, 12606, 11582, 13, 51600], "temperature": 0.0, "avg_logprob": -0.21976891430941495, "compression_ratio": 1.6243902439024391, "no_speech_prob": 0.0028404886834323406}, {"id": 20, "seek": 7988, "start": 80.39999999999999, "end": 82.75999999999999, "text": " Okay.", "tokens": [50390, 1033, 13, 50508], "temperature": 0.0, "avg_logprob": -0.24004914363225302, "compression_ratio": 1.6682692307692308, "no_speech_prob": 0.042033422738313675}, {"id": 21, "seek": 7988, "start": 82.75999999999999, "end": 85.75999999999999, "text": " So a few words about scripting.", "tokens": [50508, 407, 257, 1326, 2283, 466, 5755, 278, 13, 50658], "temperature": 0.0, "avg_logprob": -0.24004914363225302, "compression_ratio": 1.6682692307692308, "no_speech_prob": 0.042033422738313675}, {"id": 22, "seek": 7988, "start": 85.75999999999999, "end": 90.56, "text": " I tried to enumerate some of the characteristics of what we call scripting.", "tokens": [50658, 286, 3031, 281, 465, 15583, 473, 512, 295, 264, 10891, 295, 437, 321, 818, 5755, 278, 13, 50898], "temperature": 0.0, "avg_logprob": -0.24004914363225302, "compression_ratio": 1.6682692307692308, "no_speech_prob": 0.042033422738313675}, {"id": 23, "seek": 7988, "start": 90.56, "end": 93.56, "text": " So I'm really talking about shell scripting.", "tokens": [50898, 407, 286, 478, 534, 1417, 466, 8720, 5755, 278, 13, 51048], "temperature": 0.0, "avg_logprob": -0.24004914363225302, "compression_ratio": 1.6682692307692308, "no_speech_prob": 0.042033422738313675}, {"id": 24, "seek": 7988, "start": 93.56, "end": 97.8, "text": " And I think when I'm writing a shell script it's usually something to solve.", "tokens": [51048, 400, 286, 519, 562, 286, 478, 3579, 257, 8720, 5755, 309, 311, 2673, 746, 281, 5039, 13, 51260], "temperature": 0.0, "avg_logprob": -0.24004914363225302, "compression_ratio": 1.6682692307692308, "no_speech_prob": 0.042033422738313675}, {"id": 25, "seek": 7988, "start": 97.8, "end": 99.56, "text": " I'm going to do something pretty quickly.", "tokens": [51260, 286, 478, 516, 281, 360, 746, 1238, 2661, 13, 51348], "temperature": 0.0, "avg_logprob": -0.24004914363225302, "compression_ratio": 1.6682692307692308, "no_speech_prob": 0.042033422738313675}, {"id": 26, "seek": 7988, "start": 99.56, "end": 102.88, "text": " I don't want very many dependencies.", "tokens": [51348, 286, 500, 380, 528, 588, 867, 36606, 13, 51514], "temperature": 0.0, "avg_logprob": -0.24004914363225302, "compression_ratio": 1.6682692307692308, "no_speech_prob": 0.042033422738313675}, {"id": 27, "seek": 7988, "start": 102.88, "end": 105.16, "text": " It should be easy to understand.", "tokens": [51514, 467, 820, 312, 1858, 281, 1223, 13, 51628], "temperature": 0.0, "avg_logprob": -0.24004914363225302, "compression_ratio": 1.6682692307692308, "no_speech_prob": 0.042033422738313675}, {"id": 28, "seek": 10516, "start": 105.84, "end": 110.28, "text": " And it should be pretty reliable because has anybody had the experience of writing a script", "tokens": [50398, 400, 309, 820, 312, 1238, 12924, 570, 575, 4472, 632, 264, 1752, 295, 3579, 257, 5755, 50620], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 29, "seek": 10516, "start": 110.28, "end": 114.08, "text": " and it lasts for several years when you thought it was going to last for a few minutes?", "tokens": [50620, 293, 309, 20669, 337, 2940, 924, 562, 291, 1194, 309, 390, 516, 281, 1036, 337, 257, 1326, 2077, 30, 50810], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 30, "seek": 10516, "start": 114.08, "end": 115.08, "text": " Okay, yes.", "tokens": [50810, 1033, 11, 2086, 13, 50860], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 31, "seek": 10516, "start": 115.08, "end": 116.08, "text": " Good.", "tokens": [50860, 2205, 13, 50910], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 32, "seek": 10516, "start": 116.08, "end": 117.08, "text": " All right.", "tokens": [50910, 1057, 558, 13, 50960], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 33, "seek": 10516, "start": 117.08, "end": 118.08, "text": " We are together.", "tokens": [50960, 492, 366, 1214, 13, 51010], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 34, "seek": 10516, "start": 118.08, "end": 119.08, "text": " Okay.", "tokens": [51010, 1033, 13, 51060], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 35, "seek": 10516, "start": 119.08, "end": 123.56, "text": " So another thing that I've noticed a lot about shell scripts is they're supposed to be", "tokens": [51060, 407, 1071, 551, 300, 286, 600, 5694, 257, 688, 466, 8720, 23294, 307, 436, 434, 3442, 281, 312, 51284], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 36, "seek": 10516, "start": 123.56, "end": 125.6, "text": " pretty simple.", "tokens": [51284, 1238, 2199, 13, 51386], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 37, "seek": 10516, "start": 125.6, "end": 127.52, "text": " You know, you basically run some commands.", "tokens": [51386, 509, 458, 11, 291, 1936, 1190, 512, 16901, 13, 51482], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 38, "seek": 10516, "start": 127.52, "end": 130.12, "text": " Maybe you check their exit status.", "tokens": [51482, 2704, 291, 1520, 641, 11043, 6558, 13, 51612], "temperature": 0.0, "avg_logprob": -0.19960339864095053, "compression_ratio": 1.5355805243445693, "no_speech_prob": 0.016644543036818504}, {"id": 39, "seek": 13012, "start": 130.12, "end": 135.56, "text": " Maybe you have a little bit of control flow in your scripts.", "tokens": [50364, 2704, 291, 362, 257, 707, 857, 295, 1969, 3095, 294, 428, 23294, 13, 50636], "temperature": 0.0, "avg_logprob": -0.20422627510280783, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.04809688776731491}, {"id": 40, "seek": 13012, "start": 135.56, "end": 141.76, "text": " If you're fancy you might write a PID file and use the file system to do atomic write", "tokens": [50636, 759, 291, 434, 10247, 291, 1062, 2464, 257, 430, 2777, 3991, 293, 764, 264, 3991, 1185, 281, 360, 22275, 2464, 50946], "temperature": 0.0, "avg_logprob": -0.20422627510280783, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.04809688776731491}, {"id": 41, "seek": 13012, "start": 141.76, "end": 147.52, "text": " and rename so you get some guarantees that you don't have two of the same copy of your", "tokens": [50946, 293, 36741, 370, 291, 483, 512, 32567, 300, 291, 500, 380, 362, 732, 295, 264, 912, 5055, 295, 428, 51234], "temperature": 0.0, "avg_logprob": -0.20422627510280783, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.04809688776731491}, {"id": 42, "seek": 13012, "start": 147.52, "end": 150.48000000000002, "text": " script running at the same time.", "tokens": [51234, 5755, 2614, 412, 264, 912, 565, 13, 51382], "temperature": 0.0, "avg_logprob": -0.20422627510280783, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.04809688776731491}, {"id": 43, "seek": 13012, "start": 150.48000000000002, "end": 152.64000000000001, "text": " For the most part they look like this though, right?", "tokens": [51382, 1171, 264, 881, 644, 436, 574, 411, 341, 1673, 11, 558, 30, 51490], "temperature": 0.0, "avg_logprob": -0.20422627510280783, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.04809688776731491}, {"id": 44, "seek": 13012, "start": 152.64000000000001, "end": 157.44, "text": " They're basically like this sort of standard procedural flow.", "tokens": [51490, 814, 434, 1936, 411, 341, 1333, 295, 3832, 43951, 3095, 13, 51730], "temperature": 0.0, "avg_logprob": -0.20422627510280783, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.04809688776731491}, {"id": 45, "seek": 13012, "start": 157.44, "end": 158.56, "text": " You have some decisions.", "tokens": [51730, 509, 362, 512, 5327, 13, 51786], "temperature": 0.0, "avg_logprob": -0.20422627510280783, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.04809688776731491}, {"id": 46, "seek": 13012, "start": 158.56, "end": 159.72, "text": " You go forwards.", "tokens": [51786, 509, 352, 30126, 13, 51844], "temperature": 0.0, "avg_logprob": -0.20422627510280783, "compression_ratio": 1.6588235294117648, "no_speech_prob": 0.04809688776731491}, {"id": 47, "seek": 15972, "start": 159.72, "end": 167.08, "text": " You don't usually see, if you're really fancy you might use trap to capture some signals.", "tokens": [50364, 509, 500, 380, 2673, 536, 11, 498, 291, 434, 534, 10247, 291, 1062, 764, 11487, 281, 7983, 512, 12354, 13, 50732], "temperature": 0.0, "avg_logprob": -0.18055945003733914, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0006460195872932673}, {"id": 48, "seek": 15972, "start": 167.08, "end": 169.44, "text": " You might try to time out some commands.", "tokens": [50732, 509, 1062, 853, 281, 565, 484, 512, 16901, 13, 50850], "temperature": 0.0, "avg_logprob": -0.18055945003733914, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0006460195872932673}, {"id": 49, "seek": 15972, "start": 169.44, "end": 171.12, "text": " Has anybody used time out by the way?", "tokens": [50850, 8646, 4472, 1143, 565, 484, 538, 264, 636, 30, 50934], "temperature": 0.0, "avg_logprob": -0.18055945003733914, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0006460195872932673}, {"id": 50, "seek": 15972, "start": 171.12, "end": 174.32, "text": " I just learned about it recently.", "tokens": [50934, 286, 445, 3264, 466, 309, 3938, 13, 51094], "temperature": 0.0, "avg_logprob": -0.18055945003733914, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0006460195872932673}, {"id": 51, "seek": 15972, "start": 174.32, "end": 175.88, "text": " You might have some progress indicators.", "tokens": [51094, 509, 1062, 362, 512, 4205, 22176, 13, 51172], "temperature": 0.0, "avg_logprob": -0.18055945003733914, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0006460195872932673}, {"id": 52, "seek": 15972, "start": 175.88, "end": 181.16, "text": " You don't usually see things like async await or event loops or message queues or definitely", "tokens": [51172, 509, 500, 380, 2673, 536, 721, 411, 382, 34015, 19670, 420, 2280, 16121, 420, 3636, 631, 1247, 420, 2138, 51436], "temperature": 0.0, "avg_logprob": -0.18055945003733914, "compression_ratio": 1.6231884057971016, "no_speech_prob": 0.0006460195872932673}, {"id": 53, "seek": 18116, "start": 181.16, "end": 190.88, "text": " not threads, definitely not mutexes or shared memory or anything like that.", "tokens": [50364, 406, 19314, 11, 2138, 406, 24523, 47047, 420, 5507, 4675, 420, 1340, 411, 300, 13, 50850], "temperature": 0.0, "avg_logprob": -0.18951317071914672, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.6143470406532288}, {"id": 54, "seek": 18116, "start": 190.88, "end": 195.92, "text": " With scripts we assume that we don't really need real programming.", "tokens": [50850, 2022, 23294, 321, 6552, 300, 321, 500, 380, 534, 643, 957, 9410, 13, 51102], "temperature": 0.0, "avg_logprob": -0.18951317071914672, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.6143470406532288}, {"id": 55, "seek": 18116, "start": 195.92, "end": 197.44, "text": " We're just doing something simple.", "tokens": [51102, 492, 434, 445, 884, 746, 2199, 13, 51178], "temperature": 0.0, "avg_logprob": -0.18951317071914672, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.6143470406532288}, {"id": 56, "seek": 18116, "start": 197.44, "end": 201.04, "text": " We want to get it done.", "tokens": [51178, 492, 528, 281, 483, 309, 1096, 13, 51358], "temperature": 0.0, "avg_logprob": -0.18951317071914672, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.6143470406532288}, {"id": 57, "seek": 18116, "start": 201.04, "end": 205.2, "text": " There's this idea that the world is just not that complicated.", "tokens": [51358, 821, 311, 341, 1558, 300, 264, 1002, 307, 445, 406, 300, 6179, 13, 51566], "temperature": 0.0, "avg_logprob": -0.18951317071914672, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.6143470406532288}, {"id": 58, "seek": 18116, "start": 205.2, "end": 210.72, "text": " I think in reality the world actually is that complicated.", "tokens": [51566, 286, 519, 294, 4103, 264, 1002, 767, 307, 300, 6179, 13, 51842], "temperature": 0.0, "avg_logprob": -0.18951317071914672, "compression_ratio": 1.6395939086294415, "no_speech_prob": 0.6143470406532288}, {"id": 59, "seek": 21072, "start": 210.72, "end": 215.84, "text": " This is how I vision our scripts are on the right where we have this vision of this like", "tokens": [50364, 639, 307, 577, 286, 5201, 527, 23294, 366, 322, 264, 558, 689, 321, 362, 341, 5201, 295, 341, 411, 50620], "temperature": 0.0, "avg_logprob": -0.24250454969809088, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.010976515710353851}, {"id": 60, "seek": 21072, "start": 215.84, "end": 222.88, "text": " perfect linear world where things are well organized, running one after another.", "tokens": [50620, 2176, 8213, 1002, 689, 721, 366, 731, 9983, 11, 2614, 472, 934, 1071, 13, 50972], "temperature": 0.0, "avg_logprob": -0.24250454969809088, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.010976515710353851}, {"id": 61, "seek": 21072, "start": 222.88, "end": 228.56, "text": " But in reality the world is kind of a mess.", "tokens": [50972, 583, 294, 4103, 264, 1002, 307, 733, 295, 257, 2082, 13, 51256], "temperature": 0.0, "avg_logprob": -0.24250454969809088, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.010976515710353851}, {"id": 62, "seek": 21072, "start": 228.56, "end": 237.16, "text": " As a wise man once said earlier today, minimizing concurrent code leads to crappy programs.", "tokens": [51256, 1018, 257, 10829, 587, 1564, 848, 3071, 965, 11, 46608, 37702, 3089, 6689, 281, 36531, 4268, 13, 51686], "temperature": 0.0, "avg_logprob": -0.24250454969809088, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.010976515710353851}, {"id": 63, "seek": 23716, "start": 237.16, "end": 242.16, "text": " Let's talk about Raku.", "tokens": [50364, 961, 311, 751, 466, 497, 15803, 13, 50614], "temperature": 0.0, "avg_logprob": -0.20840221561797678, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.22991414368152618}, {"id": 64, "seek": 23716, "start": 242.16, "end": 248.6, "text": " For a deeper dive about the implementation of concurrency in Raku, I recommend that you", "tokens": [50614, 1171, 257, 7731, 9192, 466, 264, 11420, 295, 23702, 10457, 294, 497, 15803, 11, 286, 2748, 300, 291, 50936], "temperature": 0.0, "avg_logprob": -0.20840221561797678, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.22991414368152618}, {"id": 65, "seek": 23716, "start": 248.6, "end": 257.12, "text": " watch Jonathan Worthingson's talk many years ago about parallelism, asynchronic and concurrency", "tokens": [50936, 1159, 15471, 26363, 825, 3015, 311, 751, 867, 924, 2057, 466, 8952, 1434, 11, 382, 2534, 339, 10011, 293, 23702, 10457, 51362], "temperature": 0.0, "avg_logprob": -0.20840221561797678, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.22991414368152618}, {"id": 66, "seek": 23716, "start": 257.12, "end": 258.2, "text": " in Raku.", "tokens": [51362, 294, 497, 15803, 13, 51416], "temperature": 0.0, "avg_logprob": -0.20840221561797678, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.22991414368152618}, {"id": 67, "seek": 23716, "start": 258.2, "end": 261.48, "text": " He gives some really good definitions of those three words.", "tokens": [51416, 634, 2709, 512, 534, 665, 21988, 295, 729, 1045, 2283, 13, 51580], "temperature": 0.0, "avg_logprob": -0.20840221561797678, "compression_ratio": 1.4864864864864864, "no_speech_prob": 0.22991414368152618}, {"id": 68, "seek": 26148, "start": 261.6, "end": 266.68, "text": " I'm just going to say the definitions without going into too much detail.", "tokens": [50370, 286, 478, 445, 516, 281, 584, 264, 21988, 1553, 516, 666, 886, 709, 2607, 13, 50624], "temperature": 0.0, "avg_logprob": -0.23123575357290416, "compression_ratio": 1.5406976744186047, "no_speech_prob": 0.013622140511870384}, {"id": 69, "seek": 26148, "start": 266.68, "end": 274.04, "text": " But parallelism is the idea of choosing to do multiple things at once.", "tokens": [50624, 583, 8952, 1434, 307, 264, 1558, 295, 10875, 281, 360, 3866, 721, 412, 1564, 13, 50992], "temperature": 0.0, "avg_logprob": -0.23123575357290416, "compression_ratio": 1.5406976744186047, "no_speech_prob": 0.013622140511870384}, {"id": 70, "seek": 26148, "start": 274.04, "end": 278.44, "text": " Asynchrony is reacting to things that will happen.", "tokens": [50992, 1018, 36420, 88, 307, 25817, 281, 721, 300, 486, 1051, 13, 51212], "temperature": 0.0, "avg_logprob": -0.23123575357290416, "compression_ratio": 1.5406976744186047, "no_speech_prob": 0.013622140511870384}, {"id": 71, "seek": 26148, "start": 278.44, "end": 284.24, "text": " Concurrency is competition to access and mutate some shared resource.", "tokens": [51212, 2656, 14112, 10457, 307, 6211, 281, 2105, 293, 5839, 473, 512, 5507, 7684, 13, 51502], "temperature": 0.0, "avg_logprob": -0.23123575357290416, "compression_ratio": 1.5406976744186047, "no_speech_prob": 0.013622140511870384}, {"id": 72, "seek": 28424, "start": 284.36, "end": 289.6, "text": " Raku has great support for those.", "tokens": [50370, 497, 15803, 575, 869, 1406, 337, 729, 13, 50632], "temperature": 0.0, "avg_logprob": -0.15478235536867435, "compression_ratio": 1.5766423357664234, "no_speech_prob": 0.47843411564826965}, {"id": 73, "seek": 28424, "start": 289.6, "end": 295.32, "text": " Being a multi-paradigm language, it doesn't impose any particular strategy on you for", "tokens": [50632, 8891, 257, 4825, 12, 2181, 345, 20181, 2856, 11, 309, 1177, 380, 26952, 604, 1729, 5206, 322, 291, 337, 50918], "temperature": 0.0, "avg_logprob": -0.15478235536867435, "compression_ratio": 1.5766423357664234, "no_speech_prob": 0.47843411564826965}, {"id": 74, "seek": 28424, "start": 295.32, "end": 296.8, "text": " dealing with concurrency.", "tokens": [50918, 6260, 365, 23702, 10457, 13, 50992], "temperature": 0.0, "avg_logprob": -0.15478235536867435, "compression_ratio": 1.5766423357664234, "no_speech_prob": 0.47843411564826965}, {"id": 75, "seek": 28424, "start": 296.8, "end": 301.44, "text": " We've had some conversations earlier today about Elixir, which has the actor model.", "tokens": [50992, 492, 600, 632, 512, 7315, 3071, 965, 466, 2699, 970, 347, 11, 597, 575, 264, 8747, 2316, 13, 51224], "temperature": 0.0, "avg_logprob": -0.15478235536867435, "compression_ratio": 1.5766423357664234, "no_speech_prob": 0.47843411564826965}, {"id": 76, "seek": 28424, "start": 301.44, "end": 305.92, "text": " There's a go track where you have a lot of threads running at the same time.", "tokens": [51224, 821, 311, 257, 352, 2837, 689, 291, 362, 257, 688, 295, 19314, 2614, 412, 264, 912, 565, 13, 51448], "temperature": 0.0, "avg_logprob": -0.15478235536867435, "compression_ratio": 1.5766423357664234, "no_speech_prob": 0.47843411564826965}, {"id": 77, "seek": 28424, "start": 305.92, "end": 311.04, "text": " Many languages have different models of concurrency, and Raku tries not to be too dogmatic and", "tokens": [51448, 5126, 8650, 362, 819, 5245, 295, 23702, 10457, 11, 293, 497, 15803, 9898, 406, 281, 312, 886, 3000, 25915, 293, 51704], "temperature": 0.0, "avg_logprob": -0.15478235536867435, "compression_ratio": 1.5766423357664234, "no_speech_prob": 0.47843411564826965}, {"id": 78, "seek": 28424, "start": 311.04, "end": 313.88, "text": " lets you do whatever you want.", "tokens": [51704, 6653, 291, 360, 2035, 291, 528, 13, 51846], "temperature": 0.0, "avg_logprob": -0.15478235536867435, "compression_ratio": 1.5766423357664234, "no_speech_prob": 0.47843411564826965}, {"id": 79, "seek": 31388, "start": 313.88, "end": 316.84, "text": " You have to deal with race conditions yourself.", "tokens": [50364, 509, 362, 281, 2028, 365, 4569, 4487, 1803, 13, 50512], "temperature": 0.0, "avg_logprob": -0.1501325707686575, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0755620226264}, {"id": 80, "seek": 31388, "start": 316.84, "end": 321.52, "text": " If you want to get started writing some Raku and experimenting with concurrency, instead", "tokens": [50512, 759, 291, 528, 281, 483, 1409, 3579, 512, 497, 15803, 293, 29070, 365, 23702, 10457, 11, 2602, 50746], "temperature": 0.0, "avg_logprob": -0.1501325707686575, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0755620226264}, {"id": 81, "seek": 31388, "start": 321.52, "end": 326.96, "text": " of say hello and say world, you can just put the word start in front of say hello.", "tokens": [50746, 295, 584, 7751, 293, 584, 1002, 11, 291, 393, 445, 829, 264, 1349, 722, 294, 1868, 295, 584, 7751, 13, 51018], "temperature": 0.0, "avg_logprob": -0.1501325707686575, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0755620226264}, {"id": 82, "seek": 31388, "start": 326.96, "end": 333.96, "text": " What that does is it schedules the execution of that statement on another thread.", "tokens": [51018, 708, 300, 775, 307, 309, 28078, 264, 15058, 295, 300, 5629, 322, 1071, 7207, 13, 51368], "temperature": 0.0, "avg_logprob": -0.1501325707686575, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0755620226264}, {"id": 83, "seek": 31388, "start": 333.96, "end": 338.08, "text": " Congratulations, you've just made a race condition.", "tokens": [51368, 9694, 11, 291, 600, 445, 1027, 257, 4569, 4188, 13, 51574], "temperature": 0.0, "avg_logprob": -0.1501325707686575, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0755620226264}, {"id": 84, "seek": 31388, "start": 338.08, "end": 341.44, "text": " The output from this program is not deterministic.", "tokens": [51574, 440, 5598, 490, 341, 1461, 307, 406, 15957, 3142, 13, 51742], "temperature": 0.0, "avg_logprob": -0.1501325707686575, "compression_ratio": 1.6356275303643724, "no_speech_prob": 0.0755620226264}, {"id": 85, "seek": 34144, "start": 341.52, "end": 346.96, "text": " You might get hello world, you might get world hello if world runs before the second", "tokens": [50368, 509, 1062, 483, 7751, 1002, 11, 291, 1062, 483, 1002, 7751, 498, 1002, 6676, 949, 264, 1150, 50640], "temperature": 0.0, "avg_logprob": -0.1883181163242885, "compression_ratio": 1.836, "no_speech_prob": 0.009110858663916588}, {"id": 86, "seek": 34144, "start": 346.96, "end": 351.68, "text": " thread runs, or you might just get world if the second thread doesn't have a chance to", "tokens": [50640, 7207, 6676, 11, 420, 291, 1062, 445, 483, 1002, 498, 264, 1150, 7207, 1177, 380, 362, 257, 2931, 281, 50876], "temperature": 0.0, "avg_logprob": -0.1883181163242885, "compression_ratio": 1.836, "no_speech_prob": 0.009110858663916588}, {"id": 87, "seek": 34144, "start": 351.68, "end": 354.72, "text": " start before the program exits.", "tokens": [50876, 722, 949, 264, 1461, 44183, 13, 51028], "temperature": 0.0, "avg_logprob": -0.1883181163242885, "compression_ratio": 1.836, "no_speech_prob": 0.009110858663916588}, {"id": 88, "seek": 34144, "start": 354.72, "end": 359.76, "text": " You can experiment and find out for yourself why other languages impose these models and", "tokens": [51028, 509, 393, 5120, 293, 915, 484, 337, 1803, 983, 661, 8650, 26952, 613, 5245, 293, 51280], "temperature": 0.0, "avg_logprob": -0.1883181163242885, "compression_ratio": 1.836, "no_speech_prob": 0.009110858663916588}, {"id": 89, "seek": 34144, "start": 359.76, "end": 363.28, "text": " it's to manage things like this.", "tokens": [51280, 309, 311, 281, 3067, 721, 411, 341, 13, 51456], "temperature": 0.0, "avg_logprob": -0.1883181163242885, "compression_ratio": 1.836, "no_speech_prob": 0.009110858663916588}, {"id": 90, "seek": 34144, "start": 363.28, "end": 367.36, "text": " The simplest thing is you say, okay, I want to avoid this race condition.", "tokens": [51456, 440, 22811, 551, 307, 291, 584, 11, 1392, 11, 286, 528, 281, 5042, 341, 4569, 4188, 13, 51660], "temperature": 0.0, "avg_logprob": -0.1883181163242885, "compression_ratio": 1.836, "no_speech_prob": 0.009110858663916588}, {"id": 91, "seek": 34144, "start": 367.36, "end": 371.28, "text": " The easiest thing to do is you can just add the word await.", "tokens": [51660, 440, 12889, 551, 281, 360, 307, 291, 393, 445, 909, 264, 1349, 19670, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1883181163242885, "compression_ratio": 1.836, "no_speech_prob": 0.009110858663916588}, {"id": 92, "seek": 37128, "start": 371.28, "end": 373.28, "text": " We heard earlier about async await.", "tokens": [50364, 492, 2198, 3071, 466, 382, 34015, 19670, 13, 50464], "temperature": 0.0, "avg_logprob": -0.19151903235394022, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0030252074357122183}, {"id": 93, "seek": 37128, "start": 373.28, "end": 375.67999999999995, "text": " There's no async, there's just await.", "tokens": [50464, 821, 311, 572, 382, 34015, 11, 456, 311, 445, 19670, 13, 50584], "temperature": 0.0, "avg_logprob": -0.19151903235394022, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0030252074357122183}, {"id": 94, "seek": 37128, "start": 375.67999999999995, "end": 384.84, "text": " Wait until it finishes, wait until the promise finishes before going on to the next statement.", "tokens": [50584, 3802, 1826, 309, 23615, 11, 1699, 1826, 264, 6228, 23615, 949, 516, 322, 281, 264, 958, 5629, 13, 51042], "temperature": 0.0, "avg_logprob": -0.19151903235394022, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0030252074357122183}, {"id": 95, "seek": 37128, "start": 384.84, "end": 392.35999999999996, "text": " There are a number of high level, so the documentation of concurrency in Raku breaks it down as follows.", "tokens": [51042, 821, 366, 257, 1230, 295, 1090, 1496, 11, 370, 264, 14333, 295, 23702, 10457, 294, 497, 15803, 9857, 309, 760, 382, 10002, 13, 51418], "temperature": 0.0, "avg_logprob": -0.19151903235394022, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0030252074357122183}, {"id": 96, "seek": 37128, "start": 392.35999999999996, "end": 398.2, "text": " You have these high level APIs, you have low level APIs, and then there are also some other", "tokens": [51418, 509, 362, 613, 1090, 1496, 21445, 11, 291, 362, 2295, 1496, 21445, 11, 293, 550, 456, 366, 611, 512, 661, 51710], "temperature": 0.0, "avg_logprob": -0.19151903235394022, "compression_ratio": 1.6590909090909092, "no_speech_prob": 0.0030252074357122183}, {"id": 97, "seek": 39820, "start": 398.59999999999997, "end": 403.12, "text": " built in event sources that are not mentioned on the concurrency page.", "tokens": [50384, 3094, 294, 2280, 7139, 300, 366, 406, 2835, 322, 264, 23702, 10457, 3028, 13, 50610], "temperature": 0.0, "avg_logprob": -0.18770739657819763, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.009261119179427624}, {"id": 98, "seek": 39820, "start": 403.12, "end": 407.52, "text": " The high level APIs basically have promises, which are what we just saw, where you're", "tokens": [50610, 440, 1090, 1496, 21445, 1936, 362, 16403, 11, 597, 366, 437, 321, 445, 1866, 11, 689, 291, 434, 50830], "temperature": 0.0, "avg_logprob": -0.18770739657819763, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.009261119179427624}, {"id": 99, "seek": 39820, "start": 407.52, "end": 412.15999999999997, "text": " scheduling some execution and it's going to finish at some point in the future.", "tokens": [50830, 29055, 512, 15058, 293, 309, 311, 516, 281, 2413, 412, 512, 935, 294, 264, 2027, 13, 51062], "temperature": 0.0, "avg_logprob": -0.18770739657819763, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.009261119179427624}, {"id": 100, "seek": 39820, "start": 412.15999999999997, "end": 417.48, "text": " You have channels, which are basically one to one message queues between different threads", "tokens": [51062, 509, 362, 9235, 11, 597, 366, 1936, 472, 281, 472, 3636, 631, 1247, 1296, 819, 19314, 51328], "temperature": 0.0, "avg_logprob": -0.18770739657819763, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.009261119179427624}, {"id": 101, "seek": 39820, "start": 417.48, "end": 419.08, "text": " of execution.", "tokens": [51328, 295, 15058, 13, 51408], "temperature": 0.0, "avg_logprob": -0.18770739657819763, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.009261119179427624}, {"id": 102, "seek": 39820, "start": 419.08, "end": 422.0, "text": " You have supplies, which are one to many message queues.", "tokens": [51408, 509, 362, 11768, 11, 597, 366, 472, 281, 867, 3636, 631, 1247, 13, 51554], "temperature": 0.0, "avg_logprob": -0.18770739657819763, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.009261119179427624}, {"id": 103, "seek": 39820, "start": 422.0, "end": 425.64, "text": " Then you also have this nice thing called proc async, which is a great way to deal with", "tokens": [51554, 1396, 291, 611, 362, 341, 1481, 551, 1219, 9510, 382, 34015, 11, 597, 307, 257, 869, 636, 281, 2028, 365, 51736], "temperature": 0.0, "avg_logprob": -0.18770739657819763, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.009261119179427624}, {"id": 104, "seek": 39820, "start": 425.64, "end": 426.64, "text": " external processes.", "tokens": [51736, 8320, 7555, 13, 51786], "temperature": 0.0, "avg_logprob": -0.18770739657819763, "compression_ratio": 1.7630662020905923, "no_speech_prob": 0.009261119179427624}, {"id": 105, "seek": 42664, "start": 427.32, "end": 430.91999999999996, "text": " We're going to see a little bit more of that today since this talk is mostly about scripting,", "tokens": [50398, 492, 434, 516, 281, 536, 257, 707, 857, 544, 295, 300, 965, 1670, 341, 751, 307, 5240, 466, 5755, 278, 11, 50578], "temperature": 0.0, "avg_logprob": -0.19305793911803001, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.007572196889668703}, {"id": 106, "seek": 42664, "start": 430.91999999999996, "end": 434.64, "text": " where you're managing external processes.", "tokens": [50578, 689, 291, 434, 11642, 8320, 7555, 13, 50764], "temperature": 0.0, "avg_logprob": -0.19305793911803001, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.007572196889668703}, {"id": 107, "seek": 42664, "start": 434.64, "end": 436.36, "text": " There are also low level APIs.", "tokens": [50764, 821, 366, 611, 2295, 1496, 21445, 13, 50850], "temperature": 0.0, "avg_logprob": -0.19305793911803001, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.007572196889668703}, {"id": 108, "seek": 42664, "start": 436.36, "end": 438.71999999999997, "text": " If you want to deal with threads, you can.", "tokens": [50850, 759, 291, 528, 281, 2028, 365, 19314, 11, 291, 393, 13, 50968], "temperature": 0.0, "avg_logprob": -0.19305793911803001, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.007572196889668703}, {"id": 109, "seek": 42664, "start": 438.71999999999997, "end": 445.59999999999997, "text": " If you want to deal with locks, then congratulations, you have access to the kernel's implementation", "tokens": [50968, 759, 291, 528, 281, 2028, 365, 20703, 11, 550, 13568, 11, 291, 362, 2105, 281, 264, 28256, 311, 11420, 51312], "temperature": 0.0, "avg_logprob": -0.19305793911803001, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.007572196889668703}, {"id": 110, "seek": 42664, "start": 445.59999999999997, "end": 451.08, "text": " of mutex, which may be hardware implementations even.", "tokens": [51312, 295, 24523, 87, 11, 597, 815, 312, 8837, 4445, 763, 754, 13, 51586], "temperature": 0.0, "avg_logprob": -0.19305793911803001, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.007572196889668703}, {"id": 111, "seek": 42664, "start": 451.08, "end": 455.28, "text": " We also have atomic types and atomic operators.", "tokens": [51586, 492, 611, 362, 22275, 3467, 293, 22275, 19077, 13, 51796], "temperature": 0.0, "avg_logprob": -0.19305793911803001, "compression_ratio": 1.6747967479674797, "no_speech_prob": 0.007572196889668703}, {"id": 112, "seek": 45528, "start": 455.76, "end": 460.23999999999995, "text": " Again, these are sometimes implemented even at the hardware level.", "tokens": [50388, 3764, 11, 613, 366, 2171, 12270, 754, 412, 264, 8837, 1496, 13, 50612], "temperature": 0.0, "avg_logprob": -0.16697311401367188, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00014881078095640987}, {"id": 113, "seek": 45528, "start": 460.23999999999995, "end": 467.08, "text": " You can even use the scheduler if you want to change the concurrency paradigm that you're", "tokens": [50612, 509, 393, 754, 764, 264, 12000, 260, 498, 291, 528, 281, 1319, 264, 23702, 10457, 24709, 300, 291, 434, 50954], "temperature": 0.0, "avg_logprob": -0.16697311401367188, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00014881078095640987}, {"id": 114, "seek": 45528, "start": 467.08, "end": 476.64, "text": " using by writing another scheduler that implements the strategy for scheduling, for queuing different", "tokens": [50954, 1228, 538, 3579, 1071, 12000, 260, 300, 704, 17988, 264, 5206, 337, 29055, 11, 337, 631, 9635, 819, 51432], "temperature": 0.0, "avg_logprob": -0.16697311401367188, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00014881078095640987}, {"id": 115, "seek": 45528, "start": 476.64, "end": 477.64, "text": " threads.", "tokens": [51432, 19314, 13, 51482], "temperature": 0.0, "avg_logprob": -0.16697311401367188, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00014881078095640987}, {"id": 116, "seek": 45528, "start": 477.64, "end": 483.15999999999997, "text": " I'm going to go through some of the different built in event sources and do some very practical", "tokens": [51482, 286, 478, 516, 281, 352, 807, 512, 295, 264, 819, 3094, 294, 2280, 7139, 293, 360, 512, 588, 8496, 51758], "temperature": 0.0, "avg_logprob": -0.16697311401367188, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00014881078095640987}, {"id": 117, "seek": 45528, "start": 483.15999999999997, "end": 484.44, "text": " examples.", "tokens": [51758, 5110, 13, 51822], "temperature": 0.0, "avg_logprob": -0.16697311401367188, "compression_ratio": 1.6577777777777778, "no_speech_prob": 0.00014881078095640987}, {"id": 118, "seek": 48444, "start": 484.44, "end": 488.24, "text": " Some things you might see in your scripts, file system changes.", "tokens": [50364, 2188, 721, 291, 1062, 536, 294, 428, 23294, 11, 3991, 1185, 2962, 13, 50554], "temperature": 0.0, "avg_logprob": -0.30327116359363904, "compression_ratio": 1.48068669527897, "no_speech_prob": 0.0032719802111387253}, {"id": 119, "seek": 48444, "start": 488.24, "end": 489.88, "text": " All these things are built into the core.", "tokens": [50554, 1057, 613, 721, 366, 3094, 666, 264, 4965, 13, 50636], "temperature": 0.0, "avg_logprob": -0.30327116359363904, "compression_ratio": 1.48068669527897, "no_speech_prob": 0.0032719802111387253}, {"id": 120, "seek": 48444, "start": 489.88, "end": 496.04, "text": " TCP or UDC sockets, of course time changing provides a great event stream.", "tokens": [50636, 48965, 420, 624, 25619, 370, 11984, 11, 295, 1164, 565, 4473, 6417, 257, 869, 2280, 4309, 13, 50944], "temperature": 0.0, "avg_logprob": -0.30327116359363904, "compression_ratio": 1.48068669527897, "no_speech_prob": 0.0032719802111387253}, {"id": 121, "seek": 48444, "start": 496.04, "end": 503.88, "text": " IOPype lets you watch different Unix pipes and respond based on incoming data.", "tokens": [50944, 286, 12059, 88, 494, 6653, 291, 1159, 819, 1156, 970, 21882, 293, 4196, 2361, 322, 22341, 1412, 13, 51336], "temperature": 0.0, "avg_logprob": -0.30327116359363904, "compression_ratio": 1.48068669527897, "no_speech_prob": 0.0032719802111387253}, {"id": 122, "seek": 48444, "start": 503.88, "end": 509.12, "text": " I'll also talk a little bit about parallel execution with race and hyper and phasers.", "tokens": [51336, 286, 603, 611, 751, 257, 707, 857, 466, 8952, 15058, 365, 4569, 293, 9848, 293, 903, 296, 433, 13, 51598], "temperature": 0.0, "avg_logprob": -0.30327116359363904, "compression_ratio": 1.48068669527897, "no_speech_prob": 0.0032719802111387253}, {"id": 123, "seek": 50912, "start": 510.12, "end": 518.08, "text": " Let's do a quick trip from bash to racu.", "tokens": [50414, 961, 311, 360, 257, 1702, 4931, 490, 46183, 281, 4129, 84, 13, 50812], "temperature": 0.0, "avg_logprob": -0.25141346760285205, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.001597559661604464}, {"id": 124, "seek": 50912, "start": 518.08, "end": 519.4, "text": " Easiest way to go.", "tokens": [50812, 46879, 6495, 636, 281, 352, 13, 50878], "temperature": 0.0, "avg_logprob": -0.25141346760285205, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.001597559661604464}, {"id": 125, "seek": 50912, "start": 519.4, "end": 524.92, "text": " Take your bash script in front of every line, put the word shell, and congratulations, you", "tokens": [50878, 3664, 428, 46183, 5755, 294, 1868, 295, 633, 1622, 11, 829, 264, 1349, 8720, 11, 293, 13568, 11, 291, 51154], "temperature": 0.0, "avg_logprob": -0.25141346760285205, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.001597559661604464}, {"id": 126, "seek": 50912, "start": 524.92, "end": 531.6, "text": " have now ported your bash script to racu.", "tokens": [51154, 362, 586, 2436, 292, 428, 46183, 5755, 281, 4129, 84, 13, 51488], "temperature": 0.0, "avg_logprob": -0.25141346760285205, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.001597559661604464}, {"id": 127, "seek": 50912, "start": 531.6, "end": 539.08, "text": " Shell is built in and even better than that, there is an entire language for quoting.", "tokens": [51488, 22863, 307, 3094, 294, 293, 754, 1101, 813, 300, 11, 456, 307, 364, 2302, 2856, 337, 41552, 13, 51862], "temperature": 0.0, "avg_logprob": -0.25141346760285205, "compression_ratio": 1.5108695652173914, "no_speech_prob": 0.001597559661604464}, {"id": 128, "seek": 53908, "start": 539.08, "end": 543.88, "text": " You don't have to deal with all of the horribleness of trying to escape your quotes when you're", "tokens": [50364, 509, 500, 380, 362, 281, 2028, 365, 439, 295, 264, 2569, 2024, 45887, 295, 1382, 281, 7615, 428, 19963, 562, 291, 434, 50604], "temperature": 0.0, "avg_logprob": -0.15886517574912623, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.012805148959159851}, {"id": 129, "seek": 53908, "start": 543.88, "end": 550.84, "text": " having subcommands and they all have quotes for all of their different arguments.", "tokens": [50604, 1419, 1422, 13278, 2967, 293, 436, 439, 362, 19963, 337, 439, 295, 641, 819, 12869, 13, 50952], "temperature": 0.0, "avg_logprob": -0.15886517574912623, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.012805148959159851}, {"id": 130, "seek": 53908, "start": 550.84, "end": 554.2, "text": " Probably the most interesting one is the one at the top, the two angle brackets.", "tokens": [50952, 9210, 264, 881, 1880, 472, 307, 264, 472, 412, 264, 1192, 11, 264, 732, 5802, 26179, 13, 51120], "temperature": 0.0, "avg_logprob": -0.15886517574912623, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.012805148959159851}, {"id": 131, "seek": 53908, "start": 554.2, "end": 559.32, "text": " This is sort of like a lot of languages have a way of taking words separated by white space", "tokens": [51120, 639, 307, 1333, 295, 411, 257, 688, 295, 8650, 362, 257, 636, 295, 1940, 2283, 12005, 538, 2418, 1901, 51376], "temperature": 0.0, "avg_logprob": -0.15886517574912623, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.012805148959159851}, {"id": 132, "seek": 53908, "start": 559.32, "end": 561.48, "text": " and turning them into an array.", "tokens": [51376, 293, 6246, 552, 666, 364, 10225, 13, 51484], "temperature": 0.0, "avg_logprob": -0.15886517574912623, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.012805148959159851}, {"id": 133, "seek": 53908, "start": 561.48, "end": 568.5600000000001, "text": " That's what this does except if you have something in quotes, that becomes its own element.", "tokens": [51484, 663, 311, 437, 341, 775, 3993, 498, 291, 362, 746, 294, 19963, 11, 300, 3643, 1080, 1065, 4478, 13, 51838], "temperature": 0.0, "avg_logprob": -0.15886517574912623, "compression_ratio": 1.711191335740072, "no_speech_prob": 0.012805148959159851}, {"id": 134, "seek": 56856, "start": 568.56, "end": 572.88, "text": " Starting echo, starting database dump in quotes makes an array with two elements.", "tokens": [50364, 16217, 14300, 11, 2891, 8149, 11430, 294, 19963, 1669, 364, 10225, 365, 732, 4959, 13, 50580], "temperature": 0.0, "avg_logprob": -0.18917016983032225, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.008057611994445324}, {"id": 135, "seek": 56856, "start": 572.88, "end": 576.28, "text": " The first one is echo and the second one is starting database dump.", "tokens": [50580, 440, 700, 472, 307, 14300, 293, 264, 1150, 472, 307, 2891, 8149, 11430, 13, 50750], "temperature": 0.0, "avg_logprob": -0.18917016983032225, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.008057611994445324}, {"id": 136, "seek": 56856, "start": 576.28, "end": 581.1199999999999, "text": " Those get passed then as an array to the shell command.", "tokens": [50750, 3950, 483, 4678, 550, 382, 364, 10225, 281, 264, 8720, 5622, 13, 50992], "temperature": 0.0, "avg_logprob": -0.18917016983032225, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.008057611994445324}, {"id": 137, "seek": 56856, "start": 581.1199999999999, "end": 583.9599999999999, "text": " There's some extra fancy stuff going on there behind the scenes.", "tokens": [50992, 821, 311, 512, 2857, 10247, 1507, 516, 322, 456, 2261, 264, 8026, 13, 51134], "temperature": 0.0, "avg_logprob": -0.18917016983032225, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.008057611994445324}, {"id": 138, "seek": 56856, "start": 583.9599999999999, "end": 590.4399999999999, "text": " Here's a little script that starts your database dump.", "tokens": [51134, 1692, 311, 257, 707, 5755, 300, 3719, 428, 8149, 11430, 13, 51458], "temperature": 0.0, "avg_logprob": -0.18917016983032225, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.008057611994445324}, {"id": 139, "seek": 56856, "start": 590.4399999999999, "end": 596.8399999999999, "text": " One of the goals of racu is that easy things should be easy and hard things should be possible,", "tokens": [51458, 1485, 295, 264, 5493, 295, 4129, 84, 307, 300, 1858, 721, 820, 312, 1858, 293, 1152, 721, 820, 312, 1944, 11, 51778], "temperature": 0.0, "avg_logprob": -0.18917016983032225, "compression_ratio": 1.8146551724137931, "no_speech_prob": 0.008057611994445324}, {"id": 140, "seek": 59684, "start": 596.84, "end": 597.84, "text": " as Larry has said.", "tokens": [50364, 382, 18145, 575, 848, 13, 50414], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 141, "seek": 59684, "start": 597.84, "end": 601.36, "text": " Of course, you don't have to say shell echo.", "tokens": [50414, 2720, 1164, 11, 291, 500, 380, 362, 281, 584, 8720, 14300, 13, 50590], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 142, "seek": 59684, "start": 601.36, "end": 605.52, "text": " You can use the word say to print things to the screen.", "tokens": [50590, 509, 393, 764, 264, 1349, 584, 281, 4482, 721, 281, 264, 2568, 13, 50798], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 143, "seek": 59684, "start": 605.52, "end": 609.48, "text": " Say starting database dump, run your shell command.", "tokens": [50798, 6463, 2891, 8149, 11430, 11, 1190, 428, 8720, 5622, 13, 50996], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 144, "seek": 59684, "start": 609.48, "end": 614.36, "text": " Here we have our first little glimpse of asynchrony with this thing where I'm saying say now minus", "tokens": [50996, 1692, 321, 362, 527, 700, 707, 25838, 295, 382, 2534, 339, 2044, 88, 365, 341, 551, 689, 286, 478, 1566, 584, 586, 3175, 51240], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 145, "seek": 59684, "start": 614.36, "end": 615.96, "text": " init now.", "tokens": [51240, 3157, 586, 13, 51320], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 146, "seek": 59684, "start": 615.96, "end": 618.5600000000001, "text": " What this does is pretty clever.", "tokens": [51320, 708, 341, 775, 307, 1238, 13494, 13, 51450], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 147, "seek": 59684, "start": 618.5600000000001, "end": 624.5600000000001, "text": " What's happening here is init is a phaser and this runs during the initialization phase", "tokens": [51450, 708, 311, 2737, 510, 307, 3157, 307, 257, 903, 17756, 293, 341, 6676, 1830, 264, 5883, 2144, 5574, 51750], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 148, "seek": 59684, "start": 624.5600000000001, "end": 626.8000000000001, "text": " of your racu program.", "tokens": [51750, 295, 428, 4129, 84, 1461, 13, 51862], "temperature": 0.0, "avg_logprob": -0.22989026909200555, "compression_ratio": 1.626923076923077, "no_speech_prob": 0.11907263845205307}, {"id": 149, "seek": 62680, "start": 627.0, "end": 628.12, "text": " Anybody use go here?", "tokens": [50374, 19082, 764, 352, 510, 30, 50430], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 150, "seek": 62680, "start": 628.12, "end": 629.12, "text": " Go programmers?", "tokens": [50430, 1037, 41504, 30, 50480], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 151, "seek": 62680, "start": 629.12, "end": 631.76, "text": " Go has something similar.", "tokens": [50480, 1037, 575, 746, 2531, 13, 50612], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 152, "seek": 62680, "start": 631.76, "end": 635.16, "text": " Go has something called deferred execution.", "tokens": [50612, 1037, 575, 746, 1219, 25704, 986, 15058, 13, 50782], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 153, "seek": 62680, "start": 635.16, "end": 639.64, "text": " You might use it in a go program to say, hey, when you're exiting the subroutine, don't", "tokens": [50782, 509, 1062, 764, 309, 294, 257, 352, 1461, 281, 584, 11, 4177, 11, 562, 291, 434, 48868, 264, 1422, 81, 45075, 11, 500, 380, 51006], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 154, "seek": 62680, "start": 639.64, "end": 643.8399999999999, "text": " forget to execute this database transaction, something like that.", "tokens": [51006, 2870, 281, 14483, 341, 8149, 14425, 11, 746, 411, 300, 13, 51216], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 155, "seek": 62680, "start": 643.8399999999999, "end": 645.88, "text": " There are a lot of phasers.", "tokens": [51216, 821, 366, 257, 688, 295, 903, 296, 433, 13, 51318], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 156, "seek": 62680, "start": 645.88, "end": 651.3199999999999, "text": " Basically, you can use those to schedule code.", "tokens": [51318, 8537, 11, 291, 393, 764, 729, 281, 7567, 3089, 13, 51590], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 157, "seek": 62680, "start": 651.3199999999999, "end": 655.04, "text": " I don't know about you, but one of the most annoying things is having a script that starts", "tokens": [51590, 286, 500, 380, 458, 466, 291, 11, 457, 472, 295, 264, 881, 11304, 721, 307, 1419, 257, 5755, 300, 3719, 51776], "temperature": 0.0, "avg_logprob": -0.23896683402683425, "compression_ratio": 1.6447876447876448, "no_speech_prob": 0.00628648791462183}, {"id": 158, "seek": 65504, "start": 655.0799999999999, "end": 659.8, "text": " doing something and then you sit there waiting and watching and nothing is happening on the", "tokens": [50366, 884, 746, 293, 550, 291, 1394, 456, 3806, 293, 1976, 293, 1825, 307, 2737, 322, 264, 50602], "temperature": 0.0, "avg_logprob": -0.17980735842921153, "compression_ratio": 1.7658730158730158, "no_speech_prob": 0.005552975926548243}, {"id": 159, "seek": 65504, "start": 659.8, "end": 661.28, "text": " screen.", "tokens": [50602, 2568, 13, 50676], "temperature": 0.0, "avg_logprob": -0.17980735842921153, "compression_ratio": 1.7658730158730158, "no_speech_prob": 0.005552975926548243}, {"id": 160, "seek": 65504, "start": 661.28, "end": 666.92, "text": " I like to have at least a clock saying how much time has passed.", "tokens": [50676, 286, 411, 281, 362, 412, 1935, 257, 7830, 1566, 577, 709, 565, 575, 4678, 13, 50958], "temperature": 0.0, "avg_logprob": -0.17980735842921153, "compression_ratio": 1.7658730158730158, "no_speech_prob": 0.005552975926548243}, {"id": 161, "seek": 65504, "start": 666.92, "end": 671.1999999999999, "text": " For something like a database dump, if you do it a lot, then you'll know and then you", "tokens": [50958, 1171, 746, 411, 257, 8149, 11430, 11, 498, 291, 360, 309, 257, 688, 11, 550, 291, 603, 458, 293, 550, 291, 51172], "temperature": 0.0, "avg_logprob": -0.17980735842921153, "compression_ratio": 1.7658730158730158, "no_speech_prob": 0.005552975926548243}, {"id": 162, "seek": 65504, "start": 671.1999999999999, "end": 673.0799999999999, "text": " could even turn it into a progress bar.", "tokens": [51172, 727, 754, 1261, 309, 666, 257, 4205, 2159, 13, 51266], "temperature": 0.0, "avg_logprob": -0.17980735842921153, "compression_ratio": 1.7658730158730158, "no_speech_prob": 0.005552975926548243}, {"id": 163, "seek": 65504, "start": 673.0799999999999, "end": 678.16, "text": " Then you'll be able to estimate how much time something is going to take.", "tokens": [51266, 1396, 291, 603, 312, 1075, 281, 12539, 577, 709, 565, 746, 307, 516, 281, 747, 13, 51520], "temperature": 0.0, "avg_logprob": -0.17980735842921153, "compression_ratio": 1.7658730158730158, "no_speech_prob": 0.005552975926548243}, {"id": 164, "seek": 65504, "start": 678.16, "end": 680.76, "text": " We can do this easily with a supply.", "tokens": [51520, 492, 393, 360, 341, 3612, 365, 257, 5847, 13, 51650], "temperature": 0.0, "avg_logprob": -0.17980735842921153, "compression_ratio": 1.7658730158730158, "no_speech_prob": 0.005552975926548243}, {"id": 165, "seek": 65504, "start": 680.76, "end": 684.0799999999999, "text": " We make a supply, we call supply.interval1.", "tokens": [51650, 492, 652, 257, 5847, 11, 321, 818, 5847, 13, 5106, 3337, 16, 13, 51816], "temperature": 0.0, "avg_logprob": -0.17980735842921153, "compression_ratio": 1.7658730158730158, "no_speech_prob": 0.005552975926548243}, {"id": 166, "seek": 68408, "start": 684.12, "end": 691.0400000000001, "text": " This makes a clock that gives us a new value every one second.", "tokens": [50366, 639, 1669, 257, 7830, 300, 2709, 505, 257, 777, 2158, 633, 472, 1150, 13, 50712], "temperature": 0.0, "avg_logprob": -0.22917922337849936, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.014496173709630966}, {"id": 167, "seek": 68408, "start": 691.0400000000001, "end": 697.9200000000001, "text": " Then we make a tap on the supply by saying my dollar timer equals clock.tap.", "tokens": [50712, 1396, 321, 652, 257, 5119, 322, 264, 5847, 538, 1566, 452, 7241, 19247, 6915, 7830, 13, 83, 569, 13, 51056], "temperature": 0.0, "avg_logprob": -0.22917922337849936, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.014496173709630966}, {"id": 168, "seek": 68408, "start": 697.9200000000001, "end": 706.88, "text": " Then the code there.say is saying what the argument is to the tap.", "tokens": [51056, 1396, 264, 3089, 456, 13, 21664, 307, 1566, 437, 264, 6770, 307, 281, 264, 5119, 13, 51504], "temperature": 0.0, "avg_logprob": -0.22917922337849936, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.014496173709630966}, {"id": 169, "seek": 68408, "start": 706.88, "end": 710.8000000000001, "text": " Basically it'll say 1, 2, 3, 4, 5.", "tokens": [51504, 8537, 309, 603, 584, 502, 11, 568, 11, 805, 11, 1017, 11, 1025, 13, 51700], "temperature": 0.0, "avg_logprob": -0.22917922337849936, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.014496173709630966}, {"id": 170, "seek": 68408, "start": 710.8000000000001, "end": 713.24, "text": " Then that's running on a separate thread.", "tokens": [51700, 1396, 300, 311, 2614, 322, 257, 4994, 7207, 13, 51822], "temperature": 0.0, "avg_logprob": -0.22917922337849936, "compression_ratio": 1.4894736842105263, "no_speech_prob": 0.014496173709630966}, {"id": 171, "seek": 71324, "start": 713.24, "end": 717.6, "text": " While PGDump is running, you're seeing time go by.", "tokens": [50364, 3987, 40975, 35, 1420, 307, 2614, 11, 291, 434, 2577, 565, 352, 538, 13, 50582], "temperature": 0.0, "avg_logprob": -0.1928255417767693, "compression_ratio": 1.572549019607843, "no_speech_prob": 0.002471719868481159}, {"id": 172, "seek": 71324, "start": 717.6, "end": 720.36, "text": " That's really nice.", "tokens": [50582, 663, 311, 534, 1481, 13, 50720], "temperature": 0.0, "avg_logprob": -0.1928255417767693, "compression_ratio": 1.572549019607843, "no_speech_prob": 0.002471719868481159}, {"id": 173, "seek": 71324, "start": 720.36, "end": 725.04, "text": " Then there's some other nice built-ins to make it even a little bit prettier.", "tokens": [50720, 1396, 456, 311, 512, 661, 1481, 3094, 12, 1292, 281, 652, 309, 754, 257, 707, 857, 36825, 13, 50954], "temperature": 0.0, "avg_logprob": -0.1928255417767693, "compression_ratio": 1.572549019607843, "no_speech_prob": 0.002471719868481159}, {"id": 174, "seek": 71324, "start": 725.04, "end": 728.52, "text": " Since we want to have a script that doesn't have a lot of external dependencies, you can", "tokens": [50954, 4162, 321, 528, 281, 362, 257, 5755, 300, 1177, 380, 362, 257, 688, 295, 8320, 36606, 11, 291, 393, 51128], "temperature": 0.0, "avg_logprob": -0.1928255417767693, "compression_ratio": 1.572549019607843, "no_speech_prob": 0.002471719868481159}, {"id": 175, "seek": 71324, "start": 728.52, "end": 735.32, "text": " use the very clever polymod, one of my favorite methods, which basically does a sequence of", "tokens": [51128, 764, 264, 588, 13494, 6754, 8014, 11, 472, 295, 452, 2954, 7150, 11, 597, 1936, 775, 257, 8310, 295, 51468], "temperature": 0.0, "avg_logprob": -0.1928255417767693, "compression_ratio": 1.572549019607843, "no_speech_prob": 0.002471719868481159}, {"id": 176, "seek": 71324, "start": 735.32, "end": 741.16, "text": " mod and div operations and turns your seconds into minutes and seconds.", "tokens": [51468, 1072, 293, 3414, 7705, 293, 4523, 428, 3949, 666, 2077, 293, 3949, 13, 51760], "temperature": 0.0, "avg_logprob": -0.1928255417767693, "compression_ratio": 1.572549019607843, "no_speech_prob": 0.002471719868481159}, {"id": 177, "seek": 74116, "start": 741.16, "end": 748.4, "text": " Then you can format it and then you have a nice little clock.", "tokens": [50364, 1396, 291, 393, 7877, 309, 293, 550, 291, 362, 257, 1481, 707, 7830, 13, 50726], "temperature": 0.0, "avg_logprob": -0.2650505292533648, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.0005702729686163366}, {"id": 178, "seek": 74116, "start": 748.4, "end": 749.8, "text": " Then you might say, hey, that's so great.", "tokens": [50726, 1396, 291, 1062, 584, 11, 4177, 11, 300, 311, 370, 869, 13, 50796], "temperature": 0.0, "avg_logprob": -0.2650505292533648, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.0005702729686163366}, {"id": 179, "seek": 74116, "start": 749.8, "end": 751.8, "text": " I want to do this on all my shell commands.", "tokens": [50796, 286, 528, 281, 360, 341, 322, 439, 452, 8720, 16901, 13, 50896], "temperature": 0.0, "avg_logprob": -0.2650505292533648, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.0005702729686163366}, {"id": 180, "seek": 74116, "start": 751.8, "end": 753.56, "text": " I always want to see a little clock.", "tokens": [50896, 286, 1009, 528, 281, 536, 257, 707, 7830, 13, 50984], "temperature": 0.0, "avg_logprob": -0.2650505292533648, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.0005702729686163366}, {"id": 181, "seek": 74116, "start": 753.56, "end": 755.36, "text": " Well, guess what?", "tokens": [50984, 1042, 11, 2041, 437, 30, 51074], "temperature": 0.0, "avg_logprob": -0.2650505292533648, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.0005702729686163366}, {"id": 182, "seek": 74116, "start": 755.36, "end": 759.4399999999999, "text": " You can use, so in Python they're called decorators.", "tokens": [51074, 509, 393, 764, 11, 370, 294, 15329, 436, 434, 1219, 7919, 3391, 13, 51278], "temperature": 0.0, "avg_logprob": -0.2650505292533648, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.0005702729686163366}, {"id": 183, "seek": 74116, "start": 759.4399999999999, "end": 762.8, "text": " In Raku, it's the wrap command.", "tokens": [51278, 682, 497, 15803, 11, 309, 311, 264, 7019, 5622, 13, 51446], "temperature": 0.0, "avg_logprob": -0.2650505292533648, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.0005702729686163366}, {"id": 184, "seek": 74116, "start": 762.8, "end": 764.9599999999999, "text": " Basically we can say shell.wrap.", "tokens": [51446, 8537, 321, 393, 584, 8720, 13, 86, 4007, 13, 51554], "temperature": 0.0, "avg_logprob": -0.2650505292533648, "compression_ratio": 1.5686274509803921, "no_speech_prob": 0.0005702729686163366}, {"id": 185, "seek": 76496, "start": 764.96, "end": 772.08, "text": " Then basically this will call our timer before we call call same to do the original shell", "tokens": [50364, 1396, 1936, 341, 486, 818, 527, 19247, 949, 321, 818, 818, 912, 281, 360, 264, 3380, 8720, 50720], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 186, "seek": 76496, "start": 772.08, "end": 773.08, "text": " command.", "tokens": [50720, 5622, 13, 50770], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 187, "seek": 76496, "start": 773.08, "end": 775.9200000000001, "text": " Then it'll close it and then it'll say done.", "tokens": [50770, 1396, 309, 603, 1998, 309, 293, 550, 309, 603, 584, 1096, 13, 50912], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 188, "seek": 76496, "start": 775.9200000000001, "end": 779.8000000000001, "text": " Now you've got your nice script that you just copied and pasted and added shell to the beginning", "tokens": [50912, 823, 291, 600, 658, 428, 1481, 5755, 300, 291, 445, 25365, 293, 1791, 292, 293, 3869, 8720, 281, 264, 2863, 51106], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 189, "seek": 76496, "start": 779.8000000000001, "end": 780.8000000000001, "text": " of them.", "tokens": [51106, 295, 552, 13, 51156], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 190, "seek": 76496, "start": 780.8000000000001, "end": 787.2800000000001, "text": " Now all of your commands have a little clock saying how long they're going to take.", "tokens": [51156, 823, 439, 295, 428, 16901, 362, 257, 707, 7830, 1566, 577, 938, 436, 434, 516, 281, 747, 13, 51480], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 191, "seek": 76496, "start": 787.2800000000001, "end": 789.96, "text": " Let's talk quickly about timeouts.", "tokens": [51480, 961, 311, 751, 2661, 466, 565, 7711, 13, 51614], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 192, "seek": 76496, "start": 789.96, "end": 791.36, "text": " This is the timeout command in bash.", "tokens": [51614, 639, 307, 264, 565, 346, 5622, 294, 46183, 13, 51684], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 193, "seek": 76496, "start": 791.36, "end": 793.8000000000001, "text": " You can give it an argument that's the number of seconds.", "tokens": [51684, 509, 393, 976, 309, 364, 6770, 300, 311, 264, 1230, 295, 3949, 13, 51806], "temperature": 0.0, "avg_logprob": -0.17787827038374104, "compression_ratio": 1.7406015037593985, "no_speech_prob": 0.0154185825958848}, {"id": 194, "seek": 79380, "start": 793.8, "end": 797.92, "text": " Timeout 1 and then in this example we're doing a DNS call.", "tokens": [50364, 6161, 346, 502, 293, 550, 294, 341, 1365, 321, 434, 884, 257, 35153, 818, 13, 50570], "temperature": 0.0, "avg_logprob": -0.25103295524165314, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.1345701366662979}, {"id": 195, "seek": 79380, "start": 797.92, "end": 800.0, "text": " We're looking up example.com.", "tokens": [50570, 492, 434, 1237, 493, 1365, 13, 1112, 13, 50674], "temperature": 0.0, "avg_logprob": -0.25103295524165314, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.1345701366662979}, {"id": 196, "seek": 79380, "start": 800.0, "end": 806.88, "text": " So we say timeout1hostexample.com and if it fails then the exit code is nonzero.", "tokens": [50674, 407, 321, 584, 565, 346, 16, 6037, 3121, 335, 781, 13, 1112, 293, 498, 309, 18199, 550, 264, 11043, 3089, 307, 2107, 32226, 13, 51018], "temperature": 0.0, "avg_logprob": -0.25103295524165314, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.1345701366662979}, {"id": 197, "seek": 79380, "start": 806.88, "end": 810.04, "text": " So otherwise we say DNS seems okay.", "tokens": [51018, 407, 5911, 321, 584, 35153, 2544, 1392, 13, 51176], "temperature": 0.0, "avg_logprob": -0.25103295524165314, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.1345701366662979}, {"id": 198, "seek": 79380, "start": 810.04, "end": 814.76, "text": " The way we do that in Raku is with a promise, actually a couple of promises, one that expires", "tokens": [51176, 440, 636, 321, 360, 300, 294, 497, 15803, 307, 365, 257, 6228, 11, 767, 257, 1916, 295, 16403, 11, 472, 300, 1278, 3145, 51412], "temperature": 0.0, "avg_logprob": -0.25103295524165314, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.1345701366662979}, {"id": 199, "seek": 79380, "start": 814.76, "end": 818.68, "text": " after a second and then another one that does whatever you're doing.", "tokens": [51412, 934, 257, 1150, 293, 550, 1071, 472, 300, 775, 2035, 291, 434, 884, 13, 51608], "temperature": 0.0, "avg_logprob": -0.25103295524165314, "compression_ratio": 1.6428571428571428, "no_speech_prob": 0.1345701366662979}, {"id": 200, "seek": 81868, "start": 818.68, "end": 824.12, "text": " And then you make a third promise which resolves when either one of those two finishes first.", "tokens": [50364, 400, 550, 291, 652, 257, 2636, 6228, 597, 7923, 977, 562, 2139, 472, 295, 729, 732, 23615, 700, 13, 50636], "temperature": 0.0, "avg_logprob": -0.17506594450577445, "compression_ratio": 1.80859375, "no_speech_prob": 0.18697185814380646}, {"id": 201, "seek": 81868, "start": 824.12, "end": 830.7199999999999, "text": " So we could say promise, we await promise.anyof and then start shell host command and then", "tokens": [50636, 407, 321, 727, 584, 6228, 11, 321, 19670, 6228, 13, 1325, 2670, 293, 550, 722, 8720, 3975, 5622, 293, 550, 50966], "temperature": 0.0, "avg_logprob": -0.17506594450577445, "compression_ratio": 1.80859375, "no_speech_prob": 0.18697185814380646}, {"id": 202, "seek": 81868, "start": 830.7199999999999, "end": 832.52, "text": " start sleep 1.", "tokens": [50966, 722, 2817, 502, 13, 51056], "temperature": 0.0, "avg_logprob": -0.17506594450577445, "compression_ratio": 1.80859375, "no_speech_prob": 0.18697185814380646}, {"id": 203, "seek": 81868, "start": 832.52, "end": 834.68, "text": " So we do those two things in separate threads.", "tokens": [51056, 407, 321, 360, 729, 732, 721, 294, 4994, 19314, 13, 51164], "temperature": 0.0, "avg_logprob": -0.17506594450577445, "compression_ratio": 1.80859375, "no_speech_prob": 0.18697185814380646}, {"id": 204, "seek": 81868, "start": 834.68, "end": 837.5999999999999, "text": " Whichever one finishes first we'll know if we timed out.", "tokens": [51164, 3013, 1054, 472, 23615, 700, 321, 603, 458, 498, 321, 44696, 484, 13, 51310], "temperature": 0.0, "avg_logprob": -0.17506594450577445, "compression_ratio": 1.80859375, "no_speech_prob": 0.18697185814380646}, {"id": 205, "seek": 81868, "start": 837.5999999999999, "end": 841.88, "text": " It doesn't quite work though because shell is going to fork something off and when you", "tokens": [51310, 467, 1177, 380, 1596, 589, 1673, 570, 8720, 307, 516, 281, 17716, 746, 766, 293, 562, 291, 51524], "temperature": 0.0, "avg_logprob": -0.17506594450577445, "compression_ratio": 1.80859375, "no_speech_prob": 0.18697185814380646}, {"id": 206, "seek": 81868, "start": 841.88, "end": 846.28, "text": " fork something even if your Raku program exits it's going to keep going.", "tokens": [51524, 17716, 746, 754, 498, 428, 497, 15803, 1461, 44183, 309, 311, 516, 281, 1066, 516, 13, 51744], "temperature": 0.0, "avg_logprob": -0.17506594450577445, "compression_ratio": 1.80859375, "no_speech_prob": 0.18697185814380646}, {"id": 207, "seek": 84628, "start": 846.28, "end": 853.12, "text": " So there is a better way to do that and that is to use proc async instead of shell so that", "tokens": [50364, 407, 456, 307, 257, 1101, 636, 281, 360, 300, 293, 300, 307, 281, 764, 9510, 382, 34015, 2602, 295, 8720, 370, 300, 50706], "temperature": 0.0, "avg_logprob": -0.18435169495258136, "compression_ratio": 1.7320574162679425, "no_speech_prob": 0.0017543939175084233}, {"id": 208, "seek": 84628, "start": 853.12, "end": 857.28, "text": " you don't have this sort of tree of processes.", "tokens": [50706, 291, 500, 380, 362, 341, 1333, 295, 4230, 295, 7555, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18435169495258136, "compression_ratio": 1.7320574162679425, "no_speech_prob": 0.0017543939175084233}, {"id": 209, "seek": 84628, "start": 857.28, "end": 860.76, "text": " So we say timeout equals promise.in1.", "tokens": [50914, 407, 321, 584, 565, 346, 6915, 6228, 13, 259, 16, 13, 51088], "temperature": 0.0, "avg_logprob": -0.18435169495258136, "compression_ratio": 1.7320574162679425, "no_speech_prob": 0.0017543939175084233}, {"id": 210, "seek": 84628, "start": 860.76, "end": 867.52, "text": " My dollar proc is a proc async new host example.com and then you await either any of proc.start", "tokens": [51088, 1222, 7241, 9510, 307, 257, 9510, 382, 34015, 777, 3975, 1365, 13, 1112, 293, 550, 291, 19670, 2139, 604, 295, 9510, 13, 24419, 51426], "temperature": 0.0, "avg_logprob": -0.18435169495258136, "compression_ratio": 1.7320574162679425, "no_speech_prob": 0.0017543939175084233}, {"id": 211, "seek": 84628, "start": 867.52, "end": 873.28, "text": " which finishes when the process finishes or dollar timeout and then you can call proc.kill", "tokens": [51426, 597, 23615, 562, 264, 1399, 23615, 420, 7241, 565, 346, 293, 550, 291, 393, 818, 9510, 13, 34213, 51714], "temperature": 0.0, "avg_logprob": -0.18435169495258136, "compression_ratio": 1.7320574162679425, "no_speech_prob": 0.0017543939175084233}, {"id": 212, "seek": 87328, "start": 873.4, "end": 876.8, "text": " if timeout is true.", "tokens": [50370, 498, 565, 346, 307, 2074, 13, 50540], "temperature": 0.0, "avg_logprob": -0.1704839005762217, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.1580178439617157}, {"id": 213, "seek": 87328, "start": 876.8, "end": 882.4399999999999, "text": " Okay so I'm going to do a few more examples here to show you how to build up how we use", "tokens": [50540, 1033, 370, 286, 478, 516, 281, 360, 257, 1326, 544, 5110, 510, 281, 855, 291, 577, 281, 1322, 493, 577, 321, 764, 50822], "temperature": 0.0, "avg_logprob": -0.1704839005762217, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.1580178439617157}, {"id": 214, "seek": 87328, "start": 882.4399999999999, "end": 887.28, "text": " some of these other primitives to help you think about problem solving concurrently.", "tokens": [50822, 512, 295, 613, 661, 2886, 38970, 281, 854, 291, 519, 466, 1154, 12606, 37702, 356, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1704839005762217, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.1580178439617157}, {"id": 215, "seek": 87328, "start": 887.28, "end": 892.48, "text": " So supply.tap another way of saying that these are exactly the same.", "tokens": [51064, 407, 5847, 13, 83, 569, 1071, 636, 295, 1566, 300, 613, 366, 2293, 264, 912, 13, 51324], "temperature": 0.0, "avg_logprob": -0.1704839005762217, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.1580178439617157}, {"id": 216, "seek": 87328, "start": 892.48, "end": 898.0799999999999, "text": " Instead of saying supply.tap you can say start, react, whenever, supply which is a lot of", "tokens": [51324, 7156, 295, 1566, 5847, 13, 83, 569, 291, 393, 584, 722, 11, 4515, 11, 5699, 11, 5847, 597, 307, 257, 688, 295, 51604], "temperature": 0.0, "avg_logprob": -0.1704839005762217, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.1580178439617157}, {"id": 217, "seek": 87328, "start": 898.0799999999999, "end": 899.0799999999999, "text": " words.", "tokens": [51604, 2283, 13, 51654], "temperature": 0.0, "avg_logprob": -0.1704839005762217, "compression_ratio": 1.6199095022624435, "no_speech_prob": 0.1580178439617157}, {"id": 218, "seek": 89908, "start": 899.2800000000001, "end": 905.32, "text": " Start in a new thread, react makes another like a reactor or an event loop and then whenever", "tokens": [50374, 6481, 294, 257, 777, 7207, 11, 4515, 1669, 1071, 411, 257, 20628, 420, 364, 2280, 6367, 293, 550, 5699, 50676], "temperature": 0.0, "avg_logprob": -0.2936477422714233, "compression_ratio": 1.528205128205128, "no_speech_prob": 0.020323334261775017}, {"id": 219, "seek": 89908, "start": 905.32, "end": 911.32, "text": " it says hey let's make a tap on this supply.", "tokens": [50676, 309, 1619, 4177, 718, 311, 652, 257, 5119, 322, 341, 5847, 13, 50976], "temperature": 0.0, "avg_logprob": -0.2936477422714233, "compression_ratio": 1.528205128205128, "no_speech_prob": 0.020323334261775017}, {"id": 220, "seek": 89908, "start": 911.32, "end": 914.1600000000001, "text": " So let's watch a directory for changes.", "tokens": [50976, 407, 718, 311, 1159, 257, 21120, 337, 2962, 13, 51118], "temperature": 0.0, "avg_logprob": -0.2936477422714233, "compression_ratio": 1.528205128205128, "no_speech_prob": 0.020323334261775017}, {"id": 221, "seek": 89908, "start": 914.1600000000001, "end": 919.64, "text": " Whenever anything changes in there we're going to turn our markdown file into hdml.", "tokens": [51118, 14159, 1340, 2962, 294, 456, 321, 434, 516, 281, 1261, 527, 1491, 5093, 3991, 666, 276, 67, 15480, 13, 51392], "temperature": 0.0, "avg_logprob": -0.2936477422714233, "compression_ratio": 1.528205128205128, "no_speech_prob": 0.020323334261775017}, {"id": 222, "seek": 89908, "start": 919.64, "end": 924.12, "text": " Dollar star cwd is the current path.", "tokens": [51392, 32370, 3543, 269, 43778, 307, 264, 2190, 3100, 13, 51616], "temperature": 0.0, "avg_logprob": -0.2936477422714233, "compression_ratio": 1.528205128205128, "no_speech_prob": 0.020323334261775017}, {"id": 223, "seek": 92412, "start": 924.16, "end": 931.88, "text": " You can call watch and then you can grep for certain files and then call md to hdml whenever", "tokens": [50366, 509, 393, 818, 1159, 293, 550, 291, 393, 6066, 79, 337, 1629, 7098, 293, 550, 818, 275, 67, 281, 276, 67, 15480, 5699, 50752], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 224, "seek": 92412, "start": 931.88, "end": 932.88, "text": " one of them changes.", "tokens": [50752, 472, 295, 552, 2962, 13, 50802], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 225, "seek": 92412, "start": 932.88, "end": 935.64, "text": " I have a few more examples quickly.", "tokens": [50802, 286, 362, 257, 1326, 544, 5110, 2661, 13, 50940], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 226, "seek": 92412, "start": 935.64, "end": 940.84, "text": " The slides will be available for you to look at more slowly if I run out of time.", "tokens": [50940, 440, 9788, 486, 312, 2435, 337, 291, 281, 574, 412, 544, 5692, 498, 286, 1190, 484, 295, 565, 13, 51200], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 227, "seek": 92412, "start": 940.84, "end": 942.88, "text": " So let's look at ping.", "tokens": [51200, 407, 718, 311, 574, 412, 26151, 13, 51302], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 228, "seek": 92412, "start": 942.88, "end": 943.96, "text": " Ping is great.", "tokens": [51302, 33645, 307, 869, 13, 51356], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 229, "seek": 92412, "start": 943.96, "end": 948.4, "text": " One of the things that sadly is missing from ping is that it prints all these nice statistics", "tokens": [51356, 1485, 295, 264, 721, 300, 22023, 307, 5361, 490, 26151, 307, 300, 309, 22305, 439, 613, 1481, 12523, 51578], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 230, "seek": 92412, "start": 948.4, "end": 950.52, "text": " at the end but it doesn't print the median.", "tokens": [51578, 412, 264, 917, 457, 309, 1177, 380, 4482, 264, 26779, 13, 51684], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 231, "seek": 92412, "start": 950.52, "end": 952.12, "text": " What if you want the median ping time?", "tokens": [51684, 708, 498, 291, 528, 264, 26779, 26151, 565, 30, 51764], "temperature": 0.0, "avg_logprob": -0.14857489062893775, "compression_ratio": 1.6830188679245284, "no_speech_prob": 0.016649741679430008}, {"id": 232, "seek": 95212, "start": 952.12, "end": 954.68, "text": " You only have the min, max and the average.", "tokens": [50364, 509, 787, 362, 264, 923, 11, 11469, 293, 264, 4274, 13, 50492], "temperature": 0.0, "avg_logprob": -0.15640269915262858, "compression_ratio": 1.859922178988327, "no_speech_prob": 0.043327853083610535}, {"id": 233, "seek": 95212, "start": 954.68, "end": 959.16, "text": " Well let's compute it by watching the output of ping and then keeping track of the output", "tokens": [50492, 1042, 718, 311, 14722, 309, 538, 1976, 264, 5598, 295, 26151, 293, 550, 5145, 2837, 295, 264, 5598, 50716], "temperature": 0.0, "avg_logprob": -0.15640269915262858, "compression_ratio": 1.859922178988327, "no_speech_prob": 0.043327853083610535}, {"id": 234, "seek": 95212, "start": 959.16, "end": 961.5600000000001, "text": " and then printing it at the end.", "tokens": [50716, 293, 550, 14699, 309, 412, 264, 917, 13, 50836], "temperature": 0.0, "avg_logprob": -0.15640269915262858, "compression_ratio": 1.859922178988327, "no_speech_prob": 0.043327853083610535}, {"id": 235, "seek": 95212, "start": 961.5600000000001, "end": 965.6, "text": " And so here you can see what's really nice about the react whenever construct is that", "tokens": [50836, 400, 370, 510, 291, 393, 536, 437, 311, 534, 1481, 466, 264, 4515, 5699, 7690, 307, 300, 51038], "temperature": 0.0, "avg_logprob": -0.15640269915262858, "compression_ratio": 1.859922178988327, "no_speech_prob": 0.043327853083610535}, {"id": 236, "seek": 95212, "start": 965.6, "end": 969.5600000000001, "text": " you can have a whole bunch of whenever inside your react.", "tokens": [51038, 291, 393, 362, 257, 1379, 3840, 295, 5699, 1854, 428, 4515, 13, 51236], "temperature": 0.0, "avg_logprob": -0.15640269915262858, "compression_ratio": 1.859922178988327, "no_speech_prob": 0.043327853083610535}, {"id": 237, "seek": 95212, "start": 969.5600000000001, "end": 974.5600000000001, "text": " So we have a little leave phaser which is going to kill the process when we exit.", "tokens": [51236, 407, 321, 362, 257, 707, 1856, 903, 17756, 597, 307, 516, 281, 1961, 264, 1399, 562, 321, 11043, 13, 51486], "temperature": 0.0, "avg_logprob": -0.15640269915262858, "compression_ratio": 1.859922178988327, "no_speech_prob": 0.043327853083610535}, {"id": 238, "seek": 95212, "start": 974.5600000000001, "end": 979.5600000000001, "text": " We have our process which is going to do the ping and then whenever there's a timeout", "tokens": [51486, 492, 362, 527, 1399, 597, 307, 516, 281, 360, 264, 26151, 293, 550, 5699, 456, 311, 257, 565, 346, 51736], "temperature": 0.0, "avg_logprob": -0.15640269915262858, "compression_ratio": 1.859922178988327, "no_speech_prob": 0.043327853083610535}, {"id": 239, "seek": 97956, "start": 979.56, "end": 981.7199999999999, "text": " we're done.", "tokens": [50364, 321, 434, 1096, 13, 50472], "temperature": 0.0, "avg_logprob": -0.14474668286063455, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0035923554096370935}, {"id": 240, "seek": 97956, "start": 981.7199999999999, "end": 986.0799999999999, "text": " Whenever we get a line we parse it and then we add it to this lines array.", "tokens": [50472, 14159, 321, 483, 257, 1622, 321, 48377, 309, 293, 550, 321, 909, 309, 281, 341, 3876, 10225, 13, 50690], "temperature": 0.0, "avg_logprob": -0.14474668286063455, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0035923554096370935}, {"id": 241, "seek": 97956, "start": 986.0799999999999, "end": 990.3599999999999, "text": " Whenever we get a signal, so signal makes a stream that when signals are sent to the", "tokens": [50690, 14159, 321, 483, 257, 6358, 11, 370, 6358, 1669, 257, 4309, 300, 562, 12354, 366, 2279, 281, 264, 50904], "temperature": 0.0, "avg_logprob": -0.14474668286063455, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0035923554096370935}, {"id": 242, "seek": 97956, "start": 990.3599999999999, "end": 997.64, "text": " process you can also finish and then we can compute the median at the end.", "tokens": [50904, 1399, 291, 393, 611, 2413, 293, 550, 321, 393, 14722, 264, 26779, 412, 264, 917, 13, 51268], "temperature": 0.0, "avg_logprob": -0.14474668286063455, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0035923554096370935}, {"id": 243, "seek": 97956, "start": 997.64, "end": 1005.88, "text": " So can we make it even fancier and ping multiple hosts at the same time with our program?", "tokens": [51268, 407, 393, 321, 652, 309, 754, 3429, 27674, 293, 26151, 3866, 21573, 412, 264, 912, 565, 365, 527, 1461, 30, 51680], "temperature": 0.0, "avg_logprob": -0.14474668286063455, "compression_ratio": 1.696969696969697, "no_speech_prob": 0.0035923554096370935}, {"id": 244, "seek": 100588, "start": 1005.88, "end": 1009.2, "text": " So let's see if we can make something that looks kind of like this.", "tokens": [50364, 407, 718, 311, 536, 498, 321, 393, 652, 746, 300, 1542, 733, 295, 411, 341, 13, 50530], "temperature": 0.0, "avg_logprob": -0.1679962703159877, "compression_ratio": 1.6795366795366795, "no_speech_prob": 0.09525379538536072}, {"id": 245, "seek": 100588, "start": 1009.2, "end": 1015.0, "text": " Multi-ping, where multi-ping gets a list of hosts and then it makes this little bar graph", "tokens": [50530, 29238, 12, 3381, 11, 689, 4825, 12, 3381, 2170, 257, 1329, 295, 21573, 293, 550, 309, 1669, 341, 707, 2159, 4295, 50820], "temperature": 0.0, "avg_logprob": -0.1679962703159877, "compression_ratio": 1.6795366795366795, "no_speech_prob": 0.09525379538536072}, {"id": 246, "seek": 100588, "start": 1015.0, "end": 1019.76, "text": " by watching the output of ping and then you can sort of see like which one of these hosts", "tokens": [50820, 538, 1976, 264, 5598, 295, 26151, 293, 550, 291, 393, 1333, 295, 536, 411, 597, 472, 295, 613, 21573, 51058], "temperature": 0.0, "avg_logprob": -0.1679962703159877, "compression_ratio": 1.6795366795366795, "no_speech_prob": 0.09525379538536072}, {"id": 247, "seek": 100588, "start": 1019.76, "end": 1024.6, "text": " is responding more quickly at the same time.", "tokens": [51058, 307, 16670, 544, 2661, 412, 264, 912, 565, 13, 51300], "temperature": 0.0, "avg_logprob": -0.1679962703159877, "compression_ratio": 1.6795366795366795, "no_speech_prob": 0.09525379538536072}, {"id": 248, "seek": 100588, "start": 1024.6, "end": 1030.92, "text": " This is a really short program to write and basically what you do is you start a loop using", "tokens": [51300, 639, 307, 257, 534, 2099, 1461, 281, 2464, 293, 1936, 437, 291, 360, 307, 291, 722, 257, 6367, 1228, 51616], "temperature": 0.0, "avg_logprob": -0.1679962703159877, "compression_ratio": 1.6795366795366795, "no_speech_prob": 0.09525379538536072}, {"id": 249, "seek": 100588, "start": 1030.92, "end": 1032.64, "text": " a channel.", "tokens": [51616, 257, 2269, 13, 51702], "temperature": 0.0, "avg_logprob": -0.1679962703159877, "compression_ratio": 1.6795366795366795, "no_speech_prob": 0.09525379538536072}, {"id": 250, "seek": 100588, "start": 1032.64, "end": 1035.16, "text": " And so this runs in a separate process.", "tokens": [51702, 400, 370, 341, 6676, 294, 257, 4994, 1399, 13, 51828], "temperature": 0.0, "avg_logprob": -0.1679962703159877, "compression_ratio": 1.6795366795366795, "no_speech_prob": 0.09525379538536072}, {"id": 251, "seek": 103516, "start": 1035.16, "end": 1040.6000000000001, "text": " Whenever the channel.receive is going to block, whenever it receives something you take that", "tokens": [50364, 14159, 264, 2269, 13, 44209, 488, 307, 516, 281, 3461, 11, 5699, 309, 20717, 746, 291, 747, 300, 50636], "temperature": 0.0, "avg_logprob": -0.14076712891295717, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.025939522311091423}, {"id": 252, "seek": 103516, "start": 1040.6000000000001, "end": 1049.92, "text": " something and you print it out to the screen and then you basically start your processes.", "tokens": [50636, 746, 293, 291, 4482, 309, 484, 281, 264, 2568, 293, 550, 291, 1936, 722, 428, 7555, 13, 51102], "temperature": 0.0, "avg_logprob": -0.14076712891295717, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.025939522311091423}, {"id": 253, "seek": 103516, "start": 1049.92, "end": 1054.8400000000001, "text": " There are a few sort of nice things here, nice features of Raku that make this even a little", "tokens": [51102, 821, 366, 257, 1326, 1333, 295, 1481, 721, 510, 11, 1481, 4122, 295, 497, 15803, 300, 652, 341, 754, 257, 707, 51348], "temperature": 0.0, "avg_logprob": -0.14076712891295717, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.025939522311091423}, {"id": 254, "seek": 103516, "start": 1054.8400000000001, "end": 1056.24, "text": " bit easier.", "tokens": [51348, 857, 3571, 13, 51418], "temperature": 0.0, "avg_logprob": -0.14076712891295717, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.025939522311091423}, {"id": 255, "seek": 103516, "start": 1056.24, "end": 1062.16, "text": " So this little percent is a way of constructing a hash and what's kind of cool is that constructing", "tokens": [51418, 407, 341, 707, 3043, 307, 257, 636, 295, 39969, 257, 22019, 293, 437, 311, 733, 295, 1627, 307, 300, 39969, 51714], "temperature": 0.0, "avg_logprob": -0.14076712891295717, "compression_ratio": 1.7276785714285714, "no_speech_prob": 0.025939522311091423}, {"id": 256, "seek": 106216, "start": 1062.16, "end": 1066.5600000000002, "text": " a hash looks exactly the same way as destructuring.", "tokens": [50364, 257, 22019, 1542, 2293, 264, 912, 636, 382, 2677, 1757, 1345, 13, 50584], "temperature": 0.0, "avg_logprob": -0.15464845978387512, "compression_ratio": 1.7309236947791165, "no_speech_prob": 0.08622787892818451}, {"id": 257, "seek": 106216, "start": 1066.5600000000002, "end": 1070.76, "text": " If you've programmed in JavaScript, you know they have this really nice argument destructuring", "tokens": [50584, 759, 291, 600, 31092, 294, 15778, 11, 291, 458, 436, 362, 341, 534, 1481, 6770, 2677, 1757, 1345, 50794], "temperature": 0.0, "avg_logprob": -0.15464845978387512, "compression_ratio": 1.7309236947791165, "no_speech_prob": 0.08622787892818451}, {"id": 258, "seek": 106216, "start": 1070.76, "end": 1075.3600000000001, "text": " syntax and it's equivalent to the construction syntax.", "tokens": [50794, 28431, 293, 309, 311, 10344, 281, 264, 6435, 28431, 13, 51024], "temperature": 0.0, "avg_logprob": -0.15464845978387512, "compression_ratio": 1.7309236947791165, "no_speech_prob": 0.08622787892818451}, {"id": 259, "seek": 106216, "start": 1075.3600000000001, "end": 1078.68, "text": " So you can basically make these channels that communicate between threads and you can send", "tokens": [51024, 407, 291, 393, 1936, 652, 613, 9235, 300, 7890, 1296, 19314, 293, 291, 393, 2845, 51190], "temperature": 0.0, "avg_logprob": -0.15464845978387512, "compression_ratio": 1.7309236947791165, "no_speech_prob": 0.08622787892818451}, {"id": 260, "seek": 106216, "start": 1078.68, "end": 1080.48, "text": " structured data in between them.", "tokens": [51190, 18519, 1412, 294, 1296, 552, 13, 51280], "temperature": 0.0, "avg_logprob": -0.15464845978387512, "compression_ratio": 1.7309236947791165, "no_speech_prob": 0.08622787892818451}, {"id": 261, "seek": 106216, "start": 1080.48, "end": 1086.52, "text": " And you can also have type checking and things like that and so it's really nice.", "tokens": [51280, 400, 291, 393, 611, 362, 2010, 8568, 293, 721, 411, 300, 293, 370, 309, 311, 534, 1481, 13, 51582], "temperature": 0.0, "avg_logprob": -0.15464845978387512, "compression_ratio": 1.7309236947791165, "no_speech_prob": 0.08622787892818451}, {"id": 262, "seek": 106216, "start": 1086.52, "end": 1088.44, "text": " And that's your output.", "tokens": [51582, 400, 300, 311, 428, 5598, 13, 51678], "temperature": 0.0, "avg_logprob": -0.15464845978387512, "compression_ratio": 1.7309236947791165, "no_speech_prob": 0.08622787892818451}, {"id": 263, "seek": 108844, "start": 1088.88, "end": 1093.04, "text": " Similarly if we wanted to dump a whole bunch of MySQL or Postgres databases at the same", "tokens": [50386, 13157, 498, 321, 1415, 281, 11430, 257, 1379, 3840, 295, 1222, 39934, 420, 10223, 45189, 22380, 412, 264, 912, 50594], "temperature": 0.0, "avg_logprob": -0.16882006327311197, "compression_ratio": 1.5826446280991735, "no_speech_prob": 0.16209517419338226}, {"id": 264, "seek": 108844, "start": 1093.04, "end": 1098.8, "text": " time, if we don't care about the output it's even easier.", "tokens": [50594, 565, 11, 498, 321, 500, 380, 1127, 466, 264, 5598, 309, 311, 754, 3571, 13, 50882], "temperature": 0.0, "avg_logprob": -0.16882006327311197, "compression_ratio": 1.5826446280991735, "no_speech_prob": 0.16209517419338226}, {"id": 265, "seek": 108844, "start": 1098.8, "end": 1104.1200000000001, "text": " And the way we can do that is by using a statement prefix called race which basically says take", "tokens": [50882, 400, 264, 636, 321, 393, 360, 300, 307, 538, 1228, 257, 5629, 46969, 1219, 4569, 597, 1936, 1619, 747, 51148], "temperature": 0.0, "avg_logprob": -0.16882006327311197, "compression_ratio": 1.5826446280991735, "no_speech_prob": 0.16209517419338226}, {"id": 266, "seek": 108844, "start": 1104.1200000000001, "end": 1111.2, "text": " this loop and run the body of the loop concurrently.", "tokens": [51148, 341, 6367, 293, 1190, 264, 1772, 295, 264, 6367, 37702, 356, 13, 51502], "temperature": 0.0, "avg_logprob": -0.16882006327311197, "compression_ratio": 1.5826446280991735, "no_speech_prob": 0.16209517419338226}, {"id": 267, "seek": 108844, "start": 1111.2, "end": 1114.48, "text": " And you can give a parameter of the batch, the number to run concurrently and the degree", "tokens": [51502, 400, 291, 393, 976, 257, 13075, 295, 264, 15245, 11, 264, 1230, 281, 1190, 37702, 356, 293, 264, 4314, 51666], "temperature": 0.0, "avg_logprob": -0.16882006327311197, "compression_ratio": 1.5826446280991735, "no_speech_prob": 0.16209517419338226}, {"id": 268, "seek": 111448, "start": 1114.48, "end": 1116.6, "text": " of concurrency.", "tokens": [50364, 295, 23702, 10457, 13, 50470], "temperature": 0.0, "avg_logprob": -0.17745401571085165, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.015177925117313862}, {"id": 269, "seek": 111448, "start": 1116.6, "end": 1122.96, "text": " And then in a few lines of code we've made PG multidump which can dump several databases", "tokens": [50470, 400, 550, 294, 257, 1326, 3876, 295, 3089, 321, 600, 1027, 40975, 2120, 327, 1420, 597, 393, 11430, 2940, 22380, 50788], "temperature": 0.0, "avg_logprob": -0.17745401571085165, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.015177925117313862}, {"id": 270, "seek": 111448, "start": 1122.96, "end": 1124.96, "text": " at once.", "tokens": [50788, 412, 1564, 13, 50888], "temperature": 0.0, "avg_logprob": -0.17745401571085165, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.015177925117313862}, {"id": 271, "seek": 111448, "start": 1124.96, "end": 1129.92, "text": " Okay so in conclusion we've seen some examples of tracking progress of a command, timing", "tokens": [50888, 1033, 370, 294, 10063, 321, 600, 1612, 512, 5110, 295, 11603, 4205, 295, 257, 5622, 11, 10822, 51136], "temperature": 0.0, "avg_logprob": -0.17745401571085165, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.015177925117313862}, {"id": 272, "seek": 111448, "start": 1129.92, "end": 1134.68, "text": " out a command, using asynchronous techniques to respond to file system events, using asynchronous", "tokens": [51136, 484, 257, 5622, 11, 1228, 49174, 7512, 281, 4196, 281, 3991, 1185, 3931, 11, 1228, 49174, 51374], "temperature": 0.0, "avg_logprob": -0.17745401571085165, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.015177925117313862}, {"id": 273, "seek": 111448, "start": 1134.68, "end": 1139.76, "text": " techniques to respond to lines emitted from a command, instant parallelism, we saw some", "tokens": [51374, 7512, 281, 4196, 281, 3876, 44897, 490, 257, 5622, 11, 9836, 8952, 1434, 11, 321, 1866, 512, 51628], "temperature": 0.0, "avg_logprob": -0.17745401571085165, "compression_ratio": 1.755656108597285, "no_speech_prob": 0.015177925117313862}, {"id": 274, "seek": 113976, "start": 1139.76, "end": 1145.8799999999999, "text": " locks and for further reading there's stuff on the ecosystem and also the Rocky documentation", "tokens": [50364, 20703, 293, 337, 3052, 3760, 456, 311, 1507, 322, 264, 11311, 293, 611, 264, 26916, 14333, 50670], "temperature": 0.0, "avg_logprob": -0.3202138198049445, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.1005696952342987}, {"id": 275, "seek": 113976, "start": 1145.8799999999999, "end": 1148.16, "text": " about concurrency is excellent.", "tokens": [50670, 466, 23702, 10457, 307, 7103, 13, 50784], "temperature": 0.0, "avg_logprob": -0.3202138198049445, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.1005696952342987}, {"id": 276, "seek": 113976, "start": 1148.16, "end": 1151.16, "text": " So that's it, thank you.", "tokens": [50784, 407, 300, 311, 309, 11, 1309, 291, 13, 50934], "temperature": 0.0, "avg_logprob": -0.3202138198049445, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.1005696952342987}, {"id": 277, "seek": 113976, "start": 1151.16, "end": 1159.72, "text": " I think we may be out of time, I don't know if we have time for a question.", "tokens": [50934, 286, 519, 321, 815, 312, 484, 295, 565, 11, 286, 500, 380, 458, 498, 321, 362, 565, 337, 257, 1168, 13, 51362], "temperature": 0.0, "avg_logprob": -0.3202138198049445, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.1005696952342987}, {"id": 278, "seek": 113976, "start": 1159.72, "end": 1162.2, "text": " One question.", "tokens": [51362, 1485, 1168, 13, 51486], "temperature": 0.0, "avg_logprob": -0.3202138198049445, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.1005696952342987}, {"id": 279, "seek": 113976, "start": 1162.2, "end": 1164.2, "text": " Or multiple questions at the same time.", "tokens": [51486, 1610, 3866, 1651, 412, 264, 912, 565, 13, 51586], "temperature": 0.0, "avg_logprob": -0.3202138198049445, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.1005696952342987}, {"id": 280, "seek": 116420, "start": 1164.2, "end": 1171.2, "text": " I'll take your one question.", "tokens": [50364, 286, 603, 747, 428, 472, 1168, 13, 50714], "temperature": 0.0, "avg_logprob": -0.463380126953125, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.4595201909542084}, {"id": 281, "seek": 116420, "start": 1171.2, "end": 1180.2, "text": " You get an example of watching a file system event and kicking off a process based on that.", "tokens": [50714, 509, 483, 364, 1365, 295, 1976, 257, 3991, 1185, 2280, 293, 19137, 766, 257, 1399, 2361, 322, 300, 13, 51164], "temperature": 0.0, "avg_logprob": -0.463380126953125, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.4595201909542084}, {"id": 282, "seek": 116420, "start": 1180.2, "end": 1181.2, "text": " Yes.", "tokens": [51164, 1079, 13, 51214], "temperature": 0.0, "avg_logprob": -0.463380126953125, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.4595201909542084}, {"id": 283, "seek": 116420, "start": 1181.2, "end": 1182.2, "text": " Sorry I don't have a word I need here but is there a sort of a program paradigm or capability", "tokens": [51214, 4919, 286, 500, 380, 362, 257, 1349, 286, 643, 510, 457, 307, 456, 257, 1333, 295, 257, 1461, 24709, 420, 13759, 51264], "temperature": 0.0, "avg_logprob": -0.463380126953125, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.4595201909542084}, {"id": 284, "seek": 116420, "start": 1182.2, "end": 1187.2, "text": " for testing whether something has finished being written to before you start off your", "tokens": [51264, 337, 4997, 1968, 746, 575, 4335, 885, 3720, 281, 949, 291, 722, 766, 428, 51514], "temperature": 0.0, "avg_logprob": -0.463380126953125, "compression_ratio": 1.5326633165829147, "no_speech_prob": 0.4595201909542084}, {"id": 285, "seek": 118720, "start": 1187.2, "end": 1188.2, "text": " file system?", "tokens": [50364, 3991, 1185, 30, 50414], "temperature": 0.0, "avg_logprob": -0.34279570146040483, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.46335363388061523}, {"id": 286, "seek": 118720, "start": 1188.2, "end": 1197.2, "text": " If the file is really big then the file appearing might not have been finished and it's written", "tokens": [50414, 759, 264, 3991, 307, 534, 955, 550, 264, 3991, 19870, 1062, 406, 362, 668, 4335, 293, 309, 311, 3720, 50864], "temperature": 0.0, "avg_logprob": -0.34279570146040483, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.46335363388061523}, {"id": 287, "seek": 118720, "start": 1197.2, "end": 1202.2, "text": " yet and you kicked off something to convert to HTML before it's done so.", "tokens": [50864, 1939, 293, 291, 14609, 766, 746, 281, 7620, 281, 17995, 949, 309, 311, 1096, 370, 13, 51114], "temperature": 0.0, "avg_logprob": -0.34279570146040483, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.46335363388061523}, {"id": 288, "seek": 118720, "start": 1202.2, "end": 1206.8, "text": " Yes so it does get, I think I know where you're going with this especially because if you're", "tokens": [51114, 1079, 370, 309, 775, 483, 11, 286, 519, 286, 458, 689, 291, 434, 516, 365, 341, 2318, 570, 498, 291, 434, 51344], "temperature": 0.0, "avg_logprob": -0.34279570146040483, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.46335363388061523}, {"id": 289, "seek": 118720, "start": 1206.8, "end": 1212.2, "text": " using an editor then it's not that there's a single event where the file changes and", "tokens": [51344, 1228, 364, 9839, 550, 309, 311, 406, 300, 456, 311, 257, 2167, 2280, 689, 264, 3991, 2962, 293, 51614], "temperature": 0.0, "avg_logprob": -0.34279570146040483, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.46335363388061523}, {"id": 290, "seek": 118720, "start": 1212.2, "end": 1216.96, "text": " it'll often be the editor will be doing a write and rename or it'll start writing and", "tokens": [51614, 309, 603, 2049, 312, 264, 9839, 486, 312, 884, 257, 2464, 293, 36741, 420, 309, 603, 722, 3579, 293, 51852], "temperature": 0.0, "avg_logprob": -0.34279570146040483, "compression_ratio": 1.7115384615384615, "no_speech_prob": 0.46335363388061523}, {"id": 291, "seek": 121696, "start": 1216.96, "end": 1218.4, "text": " so you want to be careful about that.", "tokens": [50364, 370, 291, 528, 281, 312, 5026, 466, 300, 13, 50436], "temperature": 0.0, "avg_logprob": -0.1678173127381698, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.03952135145664215}, {"id": 292, "seek": 121696, "start": 1218.4, "end": 1221.48, "text": " So there are some things to do that.", "tokens": [50436, 407, 456, 366, 512, 721, 281, 360, 300, 13, 50590], "temperature": 0.0, "avg_logprob": -0.1678173127381698, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.03952135145664215}, {"id": 293, "seek": 121696, "start": 1221.48, "end": 1224.68, "text": " You can throttle your supplies is one thing.", "tokens": [50590, 509, 393, 24235, 428, 11768, 307, 472, 551, 13, 50750], "temperature": 0.0, "avg_logprob": -0.1678173127381698, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.03952135145664215}, {"id": 294, "seek": 121696, "start": 1224.68, "end": 1228.6000000000001, "text": " If you're spawning a process you can say proc.ready and that will tell you when it's", "tokens": [50750, 759, 291, 434, 637, 35880, 257, 1399, 291, 393, 584, 9510, 13, 1201, 293, 300, 486, 980, 291, 562, 309, 311, 50946], "temperature": 0.0, "avg_logprob": -0.1678173127381698, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.03952135145664215}, {"id": 295, "seek": 121696, "start": 1228.6000000000001, "end": 1232.6000000000001, "text": " ready so that before you start sending things to it.", "tokens": [50946, 1919, 370, 300, 949, 291, 722, 7750, 721, 281, 309, 13, 51146], "temperature": 0.0, "avg_logprob": -0.1678173127381698, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.03952135145664215}, {"id": 296, "seek": 121696, "start": 1232.6000000000001, "end": 1241.44, "text": " And then basically it's hooking into the notification API for the file system so any events from", "tokens": [51146, 400, 550, 1936, 309, 311, 1106, 5953, 666, 264, 11554, 9362, 337, 264, 3991, 1185, 370, 604, 3931, 490, 51588], "temperature": 0.0, "avg_logprob": -0.1678173127381698, "compression_ratio": 1.631336405529954, "no_speech_prob": 0.03952135145664215}, {"id": 297, "seek": 124144, "start": 1241.44, "end": 1248.16, "text": " the file system there's going to be a file changed, file renamed and then you, so the", "tokens": [50364, 264, 3991, 1185, 456, 311, 516, 281, 312, 257, 3991, 3105, 11, 3991, 40949, 293, 550, 291, 11, 370, 264, 50700], "temperature": 0.0, "avg_logprob": -0.394239384195079, "compression_ratio": 1.360655737704918, "no_speech_prob": 0.6097920536994934}, {"id": 298, "seek": 124144, "start": 1248.16, "end": 1250.3200000000002, "text": " limit is only whatever the file system provides.", "tokens": [50700, 4948, 307, 787, 2035, 264, 3991, 1185, 6417, 13, 50808], "temperature": 0.0, "avg_logprob": -0.394239384195079, "compression_ratio": 1.360655737704918, "no_speech_prob": 0.6097920536994934}, {"id": 299, "seek": 124144, "start": 1250.3200000000002, "end": 1251.3200000000002, "text": " Yeah sure.", "tokens": [50808, 865, 988, 13, 50858], "temperature": 0.0, "avg_logprob": -0.394239384195079, "compression_ratio": 1.360655737704918, "no_speech_prob": 0.6097920536994934}, {"id": 300, "seek": 124144, "start": 1251.3200000000002, "end": 1254.16, "text": " All right thank you.", "tokens": [50858, 1057, 558, 1309, 291, 13, 51000], "temperature": 0.0, "avg_logprob": -0.394239384195079, "compression_ratio": 1.360655737704918, "no_speech_prob": 0.6097920536994934}], "language": "en"}