{"text": " Hi everyone, my name is Dorian Dabasi and I work at Red Hat. I currently work on enabling the audio stack and other features in the automotive team. And today I'll be talking about the Piperia Audio Backend in QEMO. So just a brief overview about what Piperia is. Piperia is a multimedia service for handling booths audio and video. But in this presentation I'll be focusing on the implementation that was done in QEMO and I will also focus on its use cases in the embedded platforms. So for a start, what's the QEMO's audio backing? It's a software component that's responsible for managing the audio streams and also providing audio functionality to the emulated platform and in our case QEMO. And it's also responsible for handling the audio imputes and the outputs on your virtual machine that's running on QEMO. The Piperia Audio Backend, it provides an interface that would allow the sharing of these audio streams from the guest operating system to your host using the Piperia native APIs and libraries. So how does it work? Here this is an illustration of what the stack looked like. First we have the application that's running in the guest is sending the audio data to Piperia through MMFD and DM above and we have the Piperia Daemon that's communicating with the session manager and it's also responsible for handling the media routing and in charge of talking and talking to the AOSA driver on the guest channel. And in QEMO you can see that we have the emulated sound card driver which could either be AC97 GOS or Intel HDA. It's providing the audio software emulation and then like any other host application that's running in your host user space, QEMO with the native Piperia Backend would be playing these audio streams to the host Piperia Daemon directly. So now it's playing those audio streams to the Piperia Daemon in the host user space but it's not going through any of the post audio compatibility layer or in the case of maybe AOSA, the AOSA plugin. So the Piperia Daemon process would now handle the media routing to the corresponding libraries like AOSA library and routed to the sound driver that's in the host channel. So after many iterations of the patches, the Piperia Audio Backend was merged in QEMO in May 2023 and it was added to the QEMO version 8.1 release and currently it supports Piperia version 0.36 although there's been a latest release in Piperia which is a Piperia 1.0 release and that's like a huge milestone for Piperia. So after the QEMO 8.1 release there was some improvements that were made to the backend thanks to McHundry and Volca for their support while optimizing this backend. QEMO, it has a number of audio backends and you can find the latest audio backend which is Piperia among the list of available audio drivers. So depending on your architecture, the Audio Dev Help option should show you the list of audio drivers and you can see Piperia there. The Piperia Audio Backend, it uses similar structures like the other audio backends although the difference is that it's being implemented with the Piperia native C libraries. So these are the Piperia Audio Backend properties that can be configured on your command line. So first we have the Audio Dev command and we specify the Piperia backend that we want to use and also specify the ID of the Piperia backend and then you can specify the name of the Piperia backend, the stream name and the latency for the output stream and you could also specify the same for your input stream depending on the latency that you want. So this is a description of what the QAPI schema looks like for the Piperia Audio Backend. You can see the name there which is the Piperia Key Target Object and it's used to specify the target object to link to although it's not necessary if you do not specify an object name to set. And for the stream name, this parameter is a stream media name that is being used when you're creating a new stream and if you don't set a stream name, it should use the ID of the Piperia backend which is a PW sound. For the latency, in order to set your desired latency, you could set anyone that you want although the default latency is 46 milliseconds for Piperia Audio Backend. So there are other parameters like the mixing engine, the frequency, the channels and the formats. These parameters are common to the other audio backends like Paul Sodu, Jack and Ausa. But one thing to note is that in QEMU, it currently supports just one channel or two channels. That's money or stereo setup. So you can configure either one or two channels and in Piperia, when you're using a single channel, the content of your buffer is basically S1 samples, S2, S3 and each of the samples would be the buffer samples. Now when you have two channels, the format would be expecting the buffer to be like one sample on the left and one sample on the right and like continuously like that. So each of the samples that's the one on the left would be going to the left speakers and then the samples on your right would be going to the right speakers. So in the case of two channels, the sum of the samples would be the sum of the left samples and the right samples which is the stride. And then the buffer size there, it's specified in microseconds just in case you want to configure a buffer size. And the default format that can be used is S16, although the Piperia Audio Backend has a range of formats that it supports. And for frequency, you could set a default frequency of 44.1 milliseconds. So to use the Piperia Audio Backend, you need an audio device and this audio device is an emulated sound card. It's a legacy PCI device that's been plugged directly into the PCI ExpressRid bus. So this is an example of how the audio device is being configured in the command line. So first we have the device option which we're specifying an Intel HD device and we'll specify a codec option like HD Duplex for streams from your host speakers and your host microphone. And maybe if you wanted to only allow access to just your speakers, you could use the HD output option or if you just want access only to your microphone, you could use the HD microphone option. So here you can see that when specifying the sound card device to use, I used the ID that was specified in the Piperia Backend. That's you telling the sound card device to use the Piperia Backend. So this is how the properties of the Intel HD Audio Device are being declared inside the code. You can look up how the properties of the other devices like GOS and AC97 are being declared inside the code. So Quemo allows you to configure multiple audio backends and this is very useful in embedded platform development. So let's say for example that I'm emulating an infotainment system using Quemo and I want to configure a stream only for notifications on the mono channel and then I want to configure another stream only for music on two channels. This multiple audio backend configuration, it will allow you to specify different parameters for each of the created stream. So this is a visual representation of what the backend would look like with two Piperia Audio Backends. So you can see that each node in the guest is representing a created stream and you can see that the nodes which are the colored boxes and you can also see the host speaker nodes. So for playback, the output ports of the Quemo node which is on the right, the output ports for the Quemo node which is on the right, I've been routed to the speaker nodes on the host and then the input ports that's coming from the host microphone, I've been routed to the input ports on the guest. So this is also very useful when maybe you want to isolate the audio that's coming from different processes that are running in your guest. So now we'll take a technical deep dive into how the Piperia Audio Backend works. So what happens in playback? For playback, we first activate the stream and using this Piperia Streamset Active API call, it will set the stream mode into streaming and then next we call the buffer get free function. This function is used to know in advance the available number of bytes for writing data to the buffer and this also improves the playback latency by a factor of two. And later I will show you some latency measurements. So next what we want to do is to lock the tread loop because I'm using the tread loop mechanism and this mechanism ensures that we are doing the Piperia API calls only from one single tread at a time. So you don't want to be accessing this Piperia resources from multiple threads because it could cause a risk condition. So next what we want to do is to get the number of bytes that are available for writing data to the buffer. How we get this value is that we subtract the number of bytes that are actually inside the ring buffer from the effective Piperia Backend buffer size. And to get these bytes that are inside the ring buffer, we use the sparring buffer get rights index API call. So now what we do next is to use the sparring buffer write data to actually do a mem copy of buffer data from the source audio device to a temporary buffer with the index being the offset and then we update the write pointer. So here at this point there is the possibility of buffer on the run sometime occurring and although this happens in very rare cases, this is like a situation where the audio buffer levels has dropped below a certain threshold and it sometimes cause audio distortion or stuttering and like we cannot really guarantee that okay this guest would be producing the audio samples fast enough. So in Piperia we had a robust solution to fix this issue which was to handle this buffer on the runs by plain silence. You can look up the code on how we handle the buffer on the runs. So next what we do is to get a buffer that can be filled for the playback stream and then we copy this audio data from the temporary buffer to the Piperia buffer using the sparring buffer read data API call. Although I'm just giving you a summary of what the sparring buffer read data API call does but it does much more than that. And then next we queue the buffer for playback and this continue to happen in a loop until all the buffers have been played. So for the capture side what happens? It's more or less the opposite of what's happened in the Piperia backend and in this case like it's kind of similar but not because it's the opposite. So in this case what we do first is that we like activate the stream and then we use the buffer get refunction to know in advance the available number of bytes that we can write and then we use the tread loop lock again to ensure that we're just doing the API calls from one single tread at a time. But the difference here is that this time around instead of using the sparring buffer write data API call we're using the sparring buffer read data call and this time we're doing a mem copy of buffer data from the temporary buffer to the source audio device. So with the index being the offset we would update the read pointer afterwards. Then what we want to do next is to get a buffer that can be consumed for the capture streams and then we copy the audio data from the Piperia buffer to the source audio device using the sparring buffer write data API call. Next we queue the buffer for capture and then this continues in a loop until all the buffers are being consumed for capture. So as regards to the volume controls in order to be able to adjust your volumes through the virtual machine to be effective on the host we use the Piperia volume control API calls and this volume control code would allow for purpose synchronization of the volume changes that are made on the guests to be effective on the host. So when this volume changes have been applied on the node output monitor parts of the guests it will synchronize with the host. So for Piperia I use the Piperia stream set control API call and this is used to set the effective volume. Although one thing to note in Quemo was that it had volume levels of 0 to 255 and in the back end because the Piperia API has volume levels from a floating range of 0 to 1 where 0 is the silence and 1 is representing without attenuation I had to do a linear conversion of these levels so did a linear conversion of 255 levels to Piperia floats in range of 0 to 1. So regarding the features of the Piperia back end these features are not like the features of Piperia in general it's not only limited to its design to handle multimedia processing on the Linux but it also transcends to applications that have been built with the Piperia C API of which a use case now is the Piperia audio back end in Quemo. So on into the Piperia low latency features the Piperia back end has been developed to significantly reduce the latency in many ways and one of the ways is by setting the Piperia keynote latency property and we set it in the back end to be 75% of the time period for faster updates and the other way in which we reduced latency was to use the buffer get free function which improved the latency by a factor of 2. And I think to note about the latency is that the Piperia back end latency is mostly determined by a combination of the buffer size and the sample rate of the back end and this is usually called the quantum. So another feature of the audio back end is that it's providing a reduced footprint and also reduced dependencies in comparison to the other audio back ends that we have in Quemo and for the native Piperia back end we get to benefit from Piperia features such as the less CPU usage and the memory as well. So here I made some benchmarkings of the round triple latencies for the different audio back ends and all these latencies were being measured with a jack Iodili and a loopback cable. So listed here are the round triple latencies as reported by jack Iodili and the sample rate of the device that I used is set to 44.1 kilohertz. So as you can see there, yeah, I have to agree that jack is like topping the charts in low latency as expected but that's not my focus. You can see that the low latency that Piperia offers is quite low and then next we have the pulse audio and SDL competing with each other. So about debugging, while I was working on this audio back end, the GDB was very useful because in case you want to examine the state like registers and memory and you want to maybe set break points and watch points you could use it and you could also leverage the Quemos internal tracing infrastructure. So I added a couple of Piperia audio back end trace events that you can use. So these trace events you can configure it on the command line and example of these trace events is the Piperia writes trace events. When you set it, it will show you the length of bytes that's to be written to the buffer. It will also show you the available number of bytes that can be written. And one thing to note here with Quemos is that this, when if you use this, if you enable this Piperia write trace event, it produces a lot of outputs given that we are copying bytes every millisecond. So you should expect to have a very big log file in case you want to enable those trace events. And then there is the other tool that is very handy, the Piperia debug login. You can use it to set different debug levels from 0 to 5 and these levels would help you to see and have control of the behavior of the Piperia back end or if you were maybe using like debugging your own Piperia application. So here I added some helpful links. The first one which is my blog about the Piperia back end and its usage in Quemo. The next one was Get Hoffman's blog about the sound configuration changes that were made in Quemo. And then we also have like the Quemo invocation that's in case maybe you want to see and know how to use these audio back ends or maybe some other audio back ends, you could look up the Quemo invocation and how to use it. Then I also added the Piperia's wiki page on performance measurements. So it includes scripts that you could use to measure the latency in the different audio back ends like Piperia, Paul, Sodja and Jack. And you could also use it to measure the context switches and the CPU cycles, etc. So at this point here I would like to give a shout out to Intema and the Piperia maintainer who assisted me while I was working on this back end. Thank you. Do you have any questions? Any questions? Questions? What was? Oh yeah. I'm not curious what applications you tested with the incubators. So you're asking what applications in Quemo that I tested with this and how they behave. Okay, you could test a couple of applications that's like trying to play audio which maybe you're watching YouTube on your guest. But I mostly use the loopback cable and the Jack Iodili tool to measure latency. At least that's very effective because you could use it to measure like the CPU cycles as well. The latency and you could also measure other like features that you're interested in. Any other questions? Thank you very much. Thank you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.8, "text": " Hi everyone, my name is Dorian Dabasi and I work at Red Hat.", "tokens": [50364, 2421, 1518, 11, 452, 1315, 307, 13643, 952, 413, 455, 8483, 293, 286, 589, 412, 4477, 15867, 13, 50904], "temperature": 0.0, "avg_logprob": -0.355157644852348, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.336306631565094}, {"id": 1, "seek": 0, "start": 10.8, "end": 16.12, "text": " I currently work on enabling the audio stack and other features in the automotive team.", "tokens": [50904, 286, 4362, 589, 322, 23148, 264, 6278, 8630, 293, 661, 4122, 294, 264, 32866, 1469, 13, 51170], "temperature": 0.0, "avg_logprob": -0.355157644852348, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.336306631565094}, {"id": 2, "seek": 0, "start": 16.12, "end": 20.68, "text": " And today I'll be talking about the Piperia Audio Backend in QEMO.", "tokens": [51170, 400, 965, 286, 603, 312, 1417, 466, 264, 430, 15402, 654, 25706, 5833, 521, 294, 1249, 6683, 46, 13, 51398], "temperature": 0.0, "avg_logprob": -0.355157644852348, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.336306631565094}, {"id": 3, "seek": 0, "start": 20.68, "end": 23.76, "text": " So just a brief overview about what Piperia is.", "tokens": [51398, 407, 445, 257, 5353, 12492, 466, 437, 430, 15402, 654, 307, 13, 51552], "temperature": 0.0, "avg_logprob": -0.355157644852348, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.336306631565094}, {"id": 4, "seek": 0, "start": 23.76, "end": 28.240000000000002, "text": " Piperia is a multimedia service for handling booths audio and video.", "tokens": [51552, 430, 15402, 654, 307, 257, 49202, 2643, 337, 13175, 20912, 82, 6278, 293, 960, 13, 51776], "temperature": 0.0, "avg_logprob": -0.355157644852348, "compression_ratio": 1.5159817351598173, "no_speech_prob": 0.336306631565094}, {"id": 5, "seek": 2824, "start": 28.24, "end": 34.199999999999996, "text": " But in this presentation I'll be focusing on the implementation that was done in QEMO", "tokens": [50364, 583, 294, 341, 5860, 286, 603, 312, 8416, 322, 264, 11420, 300, 390, 1096, 294, 1249, 6683, 46, 50662], "temperature": 0.0, "avg_logprob": -0.20130935245090062, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.01614849455654621}, {"id": 6, "seek": 2824, "start": 34.199999999999996, "end": 40.879999999999995, "text": " and I will also focus on its use cases in the embedded platforms.", "tokens": [50662, 293, 286, 486, 611, 1879, 322, 1080, 764, 3331, 294, 264, 16741, 9473, 13, 50996], "temperature": 0.0, "avg_logprob": -0.20130935245090062, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.01614849455654621}, {"id": 7, "seek": 2824, "start": 40.879999999999995, "end": 44.16, "text": " So for a start, what's the QEMO's audio backing?", "tokens": [50996, 407, 337, 257, 722, 11, 437, 311, 264, 1249, 6683, 46, 311, 6278, 19373, 30, 51160], "temperature": 0.0, "avg_logprob": -0.20130935245090062, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.01614849455654621}, {"id": 8, "seek": 2824, "start": 44.16, "end": 49.599999999999994, "text": " It's a software component that's responsible for managing the audio streams and also providing", "tokens": [51160, 467, 311, 257, 4722, 6542, 300, 311, 6250, 337, 11642, 264, 6278, 15842, 293, 611, 6530, 51432], "temperature": 0.0, "avg_logprob": -0.20130935245090062, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.01614849455654621}, {"id": 9, "seek": 2824, "start": 49.599999999999994, "end": 54.64, "text": " audio functionality to the emulated platform and in our case QEMO.", "tokens": [51432, 6278, 14980, 281, 264, 846, 6987, 3663, 293, 294, 527, 1389, 1249, 6683, 46, 13, 51684], "temperature": 0.0, "avg_logprob": -0.20130935245090062, "compression_ratio": 1.6088888888888888, "no_speech_prob": 0.01614849455654621}, {"id": 10, "seek": 5464, "start": 54.64, "end": 59.44, "text": " And it's also responsible for handling the audio imputes and the outputs on your virtual", "tokens": [50364, 400, 309, 311, 611, 6250, 337, 13175, 264, 6278, 704, 1819, 293, 264, 23930, 322, 428, 6374, 50604], "temperature": 0.0, "avg_logprob": -0.19708949387675584, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.00881632138043642}, {"id": 11, "seek": 5464, "start": 59.44, "end": 62.32, "text": " machine that's running on QEMO.", "tokens": [50604, 3479, 300, 311, 2614, 322, 1249, 6683, 46, 13, 50748], "temperature": 0.0, "avg_logprob": -0.19708949387675584, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.00881632138043642}, {"id": 12, "seek": 5464, "start": 62.32, "end": 67.2, "text": " The Piperia Audio Backend, it provides an interface that would allow the sharing of these audio", "tokens": [50748, 440, 430, 15402, 654, 25706, 5833, 521, 11, 309, 6417, 364, 9226, 300, 576, 2089, 264, 5414, 295, 613, 6278, 50992], "temperature": 0.0, "avg_logprob": -0.19708949387675584, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.00881632138043642}, {"id": 13, "seek": 5464, "start": 67.2, "end": 72.64, "text": " streams from the guest operating system to your host using the Piperia native APIs and", "tokens": [50992, 15842, 490, 264, 8341, 7447, 1185, 281, 428, 3975, 1228, 264, 430, 15402, 654, 8470, 21445, 293, 51264], "temperature": 0.0, "avg_logprob": -0.19708949387675584, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.00881632138043642}, {"id": 14, "seek": 5464, "start": 72.64, "end": 74.52, "text": " libraries.", "tokens": [51264, 15148, 13, 51358], "temperature": 0.0, "avg_logprob": -0.19708949387675584, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.00881632138043642}, {"id": 15, "seek": 5464, "start": 74.52, "end": 78.08, "text": " So how does it work?", "tokens": [51358, 407, 577, 775, 309, 589, 30, 51536], "temperature": 0.0, "avg_logprob": -0.19708949387675584, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.00881632138043642}, {"id": 16, "seek": 5464, "start": 78.08, "end": 81.8, "text": " Here this is an illustration of what the stack looked like.", "tokens": [51536, 1692, 341, 307, 364, 22645, 295, 437, 264, 8630, 2956, 411, 13, 51722], "temperature": 0.0, "avg_logprob": -0.19708949387675584, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.00881632138043642}, {"id": 17, "seek": 8180, "start": 81.8, "end": 85.67999999999999, "text": " First we have the application that's running in the guest is sending the audio data to", "tokens": [50364, 2386, 321, 362, 264, 3861, 300, 311, 2614, 294, 264, 8341, 307, 7750, 264, 6278, 1412, 281, 50558], "temperature": 0.0, "avg_logprob": -0.2479968880707363, "compression_ratio": 1.708, "no_speech_prob": 0.0729084238409996}, {"id": 18, "seek": 8180, "start": 85.67999999999999, "end": 92.75999999999999, "text": " Piperia through MMFD and DM above and we have the Piperia Daemon that's communicating with", "tokens": [50558, 430, 15402, 654, 807, 34191, 37, 35, 293, 15322, 3673, 293, 321, 362, 264, 430, 15402, 654, 3933, 36228, 300, 311, 17559, 365, 50912], "temperature": 0.0, "avg_logprob": -0.2479968880707363, "compression_ratio": 1.708, "no_speech_prob": 0.0729084238409996}, {"id": 19, "seek": 8180, "start": 92.75999999999999, "end": 97.28, "text": " the session manager and it's also responsible for handling the media routing and in charge", "tokens": [50912, 264, 5481, 6598, 293, 309, 311, 611, 6250, 337, 13175, 264, 3021, 32722, 293, 294, 4602, 51138], "temperature": 0.0, "avg_logprob": -0.2479968880707363, "compression_ratio": 1.708, "no_speech_prob": 0.0729084238409996}, {"id": 20, "seek": 8180, "start": 97.28, "end": 101.84, "text": " of talking and talking to the AOSA driver on the guest channel.", "tokens": [51138, 295, 1417, 293, 1417, 281, 264, 316, 4367, 32, 6787, 322, 264, 8341, 2269, 13, 51366], "temperature": 0.0, "avg_logprob": -0.2479968880707363, "compression_ratio": 1.708, "no_speech_prob": 0.0729084238409996}, {"id": 21, "seek": 8180, "start": 101.84, "end": 108.2, "text": " And in QEMO you can see that we have the emulated sound card driver which could either be AC97", "tokens": [51366, 400, 294, 1249, 6683, 46, 291, 393, 536, 300, 321, 362, 264, 846, 6987, 1626, 2920, 6787, 597, 727, 2139, 312, 8157, 23247, 51684], "temperature": 0.0, "avg_logprob": -0.2479968880707363, "compression_ratio": 1.708, "no_speech_prob": 0.0729084238409996}, {"id": 22, "seek": 10820, "start": 108.2, "end": 110.52, "text": " GOS or Intel HDA.", "tokens": [50364, 460, 4367, 420, 19762, 389, 7509, 13, 50480], "temperature": 0.0, "avg_logprob": -0.16631186880716464, "compression_ratio": 1.7461538461538462, "no_speech_prob": 0.03989074379205704}, {"id": 23, "seek": 10820, "start": 110.52, "end": 116.28, "text": " It's providing the audio software emulation and then like any other host application that's", "tokens": [50480, 467, 311, 6530, 264, 6278, 4722, 846, 2776, 293, 550, 411, 604, 661, 3975, 3861, 300, 311, 50768], "temperature": 0.0, "avg_logprob": -0.16631186880716464, "compression_ratio": 1.7461538461538462, "no_speech_prob": 0.03989074379205704}, {"id": 24, "seek": 10820, "start": 116.28, "end": 121.36, "text": " running in your host user space, QEMO with the native Piperia Backend would be playing", "tokens": [50768, 2614, 294, 428, 3975, 4195, 1901, 11, 1249, 6683, 46, 365, 264, 8470, 430, 15402, 654, 5833, 521, 576, 312, 2433, 51022], "temperature": 0.0, "avg_logprob": -0.16631186880716464, "compression_ratio": 1.7461538461538462, "no_speech_prob": 0.03989074379205704}, {"id": 25, "seek": 10820, "start": 121.36, "end": 125.64, "text": " these audio streams to the host Piperia Daemon directly.", "tokens": [51022, 613, 6278, 15842, 281, 264, 3975, 430, 15402, 654, 3933, 36228, 3838, 13, 51236], "temperature": 0.0, "avg_logprob": -0.16631186880716464, "compression_ratio": 1.7461538461538462, "no_speech_prob": 0.03989074379205704}, {"id": 26, "seek": 10820, "start": 125.64, "end": 129.8, "text": " So now it's playing those audio streams to the Piperia Daemon in the host user space", "tokens": [51236, 407, 586, 309, 311, 2433, 729, 6278, 15842, 281, 264, 430, 15402, 654, 3933, 36228, 294, 264, 3975, 4195, 1901, 51444], "temperature": 0.0, "avg_logprob": -0.16631186880716464, "compression_ratio": 1.7461538461538462, "no_speech_prob": 0.03989074379205704}, {"id": 27, "seek": 10820, "start": 129.8, "end": 134.44, "text": " but it's not going through any of the post audio compatibility layer or in the case of", "tokens": [51444, 457, 309, 311, 406, 516, 807, 604, 295, 264, 2183, 6278, 34237, 4583, 420, 294, 264, 1389, 295, 51676], "temperature": 0.0, "avg_logprob": -0.16631186880716464, "compression_ratio": 1.7461538461538462, "no_speech_prob": 0.03989074379205704}, {"id": 28, "seek": 10820, "start": 134.44, "end": 138.0, "text": " maybe AOSA, the AOSA plugin.", "tokens": [51676, 1310, 316, 4367, 32, 11, 264, 316, 4367, 32, 23407, 13, 51854], "temperature": 0.0, "avg_logprob": -0.16631186880716464, "compression_ratio": 1.7461538461538462, "no_speech_prob": 0.03989074379205704}, {"id": 29, "seek": 13800, "start": 138.0, "end": 145.32, "text": " So the Piperia Daemon process would now handle the media routing to the corresponding libraries", "tokens": [50364, 407, 264, 430, 15402, 654, 3933, 36228, 1399, 576, 586, 4813, 264, 3021, 32722, 281, 264, 11760, 15148, 50730], "temperature": 0.0, "avg_logprob": -0.12207179123096251, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.002110941568389535}, {"id": 30, "seek": 13800, "start": 145.32, "end": 153.12, "text": " like AOSA library and routed to the sound driver that's in the host channel.", "tokens": [50730, 411, 316, 4367, 32, 6405, 293, 4020, 292, 281, 264, 1626, 6787, 300, 311, 294, 264, 3975, 2269, 13, 51120], "temperature": 0.0, "avg_logprob": -0.12207179123096251, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.002110941568389535}, {"id": 31, "seek": 13800, "start": 153.12, "end": 159.72, "text": " So after many iterations of the patches, the Piperia Audio Backend was merged in QEMO", "tokens": [51120, 407, 934, 867, 36540, 295, 264, 26531, 11, 264, 430, 15402, 654, 25706, 5833, 521, 390, 36427, 294, 1249, 6683, 46, 51450], "temperature": 0.0, "avg_logprob": -0.12207179123096251, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.002110941568389535}, {"id": 32, "seek": 13800, "start": 159.72, "end": 166.44, "text": " in May 2023 and it was added to the QEMO version 8.1 release and currently it supports", "tokens": [51450, 294, 1891, 44377, 293, 309, 390, 3869, 281, 264, 1249, 6683, 46, 3037, 1649, 13, 16, 4374, 293, 4362, 309, 9346, 51786], "temperature": 0.0, "avg_logprob": -0.12207179123096251, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.002110941568389535}, {"id": 33, "seek": 16644, "start": 166.44, "end": 173.28, "text": " Piperia version 0.36 although there's been a latest release in Piperia which is a Piperia", "tokens": [50364, 430, 15402, 654, 3037, 1958, 13, 11309, 4878, 456, 311, 668, 257, 6792, 4374, 294, 430, 15402, 654, 597, 307, 257, 430, 15402, 654, 50706], "temperature": 0.0, "avg_logprob": -0.27390021839361084, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.027010109275579453}, {"id": 34, "seek": 16644, "start": 173.28, "end": 178.8, "text": " 1.0 release and that's like a huge milestone for Piperia.", "tokens": [50706, 502, 13, 15, 4374, 293, 300, 311, 411, 257, 2603, 28048, 337, 430, 15402, 654, 13, 50982], "temperature": 0.0, "avg_logprob": -0.27390021839361084, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.027010109275579453}, {"id": 35, "seek": 16644, "start": 178.8, "end": 184.76, "text": " So after the QEMO 8.1 release there was some improvements that were made to the backend", "tokens": [50982, 407, 934, 264, 1249, 6683, 46, 1649, 13, 16, 4374, 456, 390, 512, 13797, 300, 645, 1027, 281, 264, 38087, 51280], "temperature": 0.0, "avg_logprob": -0.27390021839361084, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.027010109275579453}, {"id": 36, "seek": 16644, "start": 184.76, "end": 191.12, "text": " thanks to McHundry and Volca for their support while optimizing this backend.", "tokens": [51280, 3231, 281, 4050, 39, 997, 627, 293, 8911, 496, 337, 641, 1406, 1339, 40425, 341, 38087, 13, 51598], "temperature": 0.0, "avg_logprob": -0.27390021839361084, "compression_ratio": 1.5048076923076923, "no_speech_prob": 0.027010109275579453}, {"id": 37, "seek": 19112, "start": 192.12, "end": 198.48000000000002, "text": " QEMO, it has a number of audio backends and you can find the latest audio backend which", "tokens": [50414, 1249, 6683, 46, 11, 309, 575, 257, 1230, 295, 6278, 646, 2581, 293, 291, 393, 915, 264, 6792, 6278, 38087, 597, 50732], "temperature": 0.0, "avg_logprob": -0.15084363066631815, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.006444190628826618}, {"id": 38, "seek": 19112, "start": 198.48000000000002, "end": 201.76, "text": " is Piperia among the list of available audio drivers.", "tokens": [50732, 307, 430, 15402, 654, 3654, 264, 1329, 295, 2435, 6278, 11590, 13, 50896], "temperature": 0.0, "avg_logprob": -0.15084363066631815, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.006444190628826618}, {"id": 39, "seek": 19112, "start": 201.76, "end": 206.56, "text": " So depending on your architecture, the Audio Dev Help option should show you the list of", "tokens": [50896, 407, 5413, 322, 428, 9482, 11, 264, 25706, 9096, 10773, 3614, 820, 855, 291, 264, 1329, 295, 51136], "temperature": 0.0, "avg_logprob": -0.15084363066631815, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.006444190628826618}, {"id": 40, "seek": 19112, "start": 206.56, "end": 209.4, "text": " audio drivers and you can see Piperia there.", "tokens": [51136, 6278, 11590, 293, 291, 393, 536, 430, 15402, 654, 456, 13, 51278], "temperature": 0.0, "avg_logprob": -0.15084363066631815, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.006444190628826618}, {"id": 41, "seek": 19112, "start": 209.4, "end": 214.88, "text": " The Piperia Audio Backend, it uses similar structures like the other audio backends although", "tokens": [51278, 440, 430, 15402, 654, 25706, 5833, 521, 11, 309, 4960, 2531, 9227, 411, 264, 661, 6278, 646, 2581, 4878, 51552], "temperature": 0.0, "avg_logprob": -0.15084363066631815, "compression_ratio": 1.7692307692307692, "no_speech_prob": 0.006444190628826618}, {"id": 42, "seek": 21488, "start": 214.88, "end": 223.16, "text": " the difference is that it's being implemented with the Piperia native C libraries.", "tokens": [50364, 264, 2649, 307, 300, 309, 311, 885, 12270, 365, 264, 430, 15402, 654, 8470, 383, 15148, 13, 50778], "temperature": 0.0, "avg_logprob": -0.10256483388501544, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.011135738343000412}, {"id": 43, "seek": 21488, "start": 223.16, "end": 229.48, "text": " So these are the Piperia Audio Backend properties that can be configured on your command line.", "tokens": [50778, 407, 613, 366, 264, 430, 15402, 654, 25706, 5833, 521, 7221, 300, 393, 312, 30538, 322, 428, 5622, 1622, 13, 51094], "temperature": 0.0, "avg_logprob": -0.10256483388501544, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.011135738343000412}, {"id": 44, "seek": 21488, "start": 229.48, "end": 237.24, "text": " So first we have the Audio Dev command and we specify the Piperia backend that we want", "tokens": [51094, 407, 700, 321, 362, 264, 25706, 9096, 5622, 293, 321, 16500, 264, 430, 15402, 654, 38087, 300, 321, 528, 51482], "temperature": 0.0, "avg_logprob": -0.10256483388501544, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.011135738343000412}, {"id": 45, "seek": 21488, "start": 237.24, "end": 244.16, "text": " to use and also specify the ID of the Piperia backend and then you can specify the name", "tokens": [51482, 281, 764, 293, 611, 16500, 264, 7348, 295, 264, 430, 15402, 654, 38087, 293, 550, 291, 393, 16500, 264, 1315, 51828], "temperature": 0.0, "avg_logprob": -0.10256483388501544, "compression_ratio": 1.7777777777777777, "no_speech_prob": 0.011135738343000412}, {"id": 46, "seek": 24416, "start": 244.16, "end": 249.72, "text": " of the Piperia backend, the stream name and the latency for the output stream and you", "tokens": [50364, 295, 264, 430, 15402, 654, 38087, 11, 264, 4309, 1315, 293, 264, 27043, 337, 264, 5598, 4309, 293, 291, 50642], "temperature": 0.0, "avg_logprob": -0.12100130427967418, "compression_ratio": 1.784, "no_speech_prob": 0.002626309869810939}, {"id": 47, "seek": 24416, "start": 249.72, "end": 255.51999999999998, "text": " could also specify the same for your input stream depending on the latency that you want.", "tokens": [50642, 727, 611, 16500, 264, 912, 337, 428, 4846, 4309, 5413, 322, 264, 27043, 300, 291, 528, 13, 50932], "temperature": 0.0, "avg_logprob": -0.12100130427967418, "compression_ratio": 1.784, "no_speech_prob": 0.002626309869810939}, {"id": 48, "seek": 24416, "start": 255.51999999999998, "end": 261.15999999999997, "text": " So this is a description of what the QAPI schema looks like for the Piperia Audio Backend.", "tokens": [50932, 407, 341, 307, 257, 3855, 295, 437, 264, 1249, 4715, 40, 34078, 1542, 411, 337, 264, 430, 15402, 654, 25706, 5833, 521, 13, 51214], "temperature": 0.0, "avg_logprob": -0.12100130427967418, "compression_ratio": 1.784, "no_speech_prob": 0.002626309869810939}, {"id": 49, "seek": 24416, "start": 261.15999999999997, "end": 267.4, "text": " You can see the name there which is the Piperia Key Target Object and it's used to specify", "tokens": [51214, 509, 393, 536, 264, 1315, 456, 597, 307, 264, 430, 15402, 654, 12759, 24586, 24753, 293, 309, 311, 1143, 281, 16500, 51526], "temperature": 0.0, "avg_logprob": -0.12100130427967418, "compression_ratio": 1.784, "no_speech_prob": 0.002626309869810939}, {"id": 50, "seek": 24416, "start": 267.4, "end": 272.36, "text": " the target object to link to although it's not necessary if you do not specify an object", "tokens": [51526, 264, 3779, 2657, 281, 2113, 281, 4878, 309, 311, 406, 4818, 498, 291, 360, 406, 16500, 364, 2657, 51774], "temperature": 0.0, "avg_logprob": -0.12100130427967418, "compression_ratio": 1.784, "no_speech_prob": 0.002626309869810939}, {"id": 51, "seek": 27236, "start": 272.36, "end": 274.36, "text": " name to set.", "tokens": [50364, 1315, 281, 992, 13, 50464], "temperature": 0.0, "avg_logprob": -0.19088395127972352, "compression_ratio": 1.6982758620689655, "no_speech_prob": 0.03527778014540672}, {"id": 52, "seek": 27236, "start": 274.36, "end": 278.72, "text": " And for the stream name, this parameter is a stream media name that is being used when", "tokens": [50464, 400, 337, 264, 4309, 1315, 11, 341, 13075, 307, 257, 4309, 3021, 1315, 300, 307, 885, 1143, 562, 50682], "temperature": 0.0, "avg_logprob": -0.19088395127972352, "compression_ratio": 1.6982758620689655, "no_speech_prob": 0.03527778014540672}, {"id": 53, "seek": 27236, "start": 278.72, "end": 284.8, "text": " you're creating a new stream and if you don't set a stream name, it should use the ID of", "tokens": [50682, 291, 434, 4084, 257, 777, 4309, 293, 498, 291, 500, 380, 992, 257, 4309, 1315, 11, 309, 820, 764, 264, 7348, 295, 50986], "temperature": 0.0, "avg_logprob": -0.19088395127972352, "compression_ratio": 1.6982758620689655, "no_speech_prob": 0.03527778014540672}, {"id": 54, "seek": 27236, "start": 284.8, "end": 287.96000000000004, "text": " the Piperia backend which is a PW sound.", "tokens": [50986, 264, 430, 15402, 654, 38087, 597, 307, 257, 46375, 1626, 13, 51144], "temperature": 0.0, "avg_logprob": -0.19088395127972352, "compression_ratio": 1.6982758620689655, "no_speech_prob": 0.03527778014540672}, {"id": 55, "seek": 27236, "start": 287.96000000000004, "end": 294.36, "text": " For the latency, in order to set your desired latency, you could set anyone that you want", "tokens": [51144, 1171, 264, 27043, 11, 294, 1668, 281, 992, 428, 14721, 27043, 11, 291, 727, 992, 2878, 300, 291, 528, 51464], "temperature": 0.0, "avg_logprob": -0.19088395127972352, "compression_ratio": 1.6982758620689655, "no_speech_prob": 0.03527778014540672}, {"id": 56, "seek": 27236, "start": 294.36, "end": 301.40000000000003, "text": " although the default latency is 46 milliseconds for Piperia Audio Backend.", "tokens": [51464, 4878, 264, 7576, 27043, 307, 17835, 34184, 337, 430, 15402, 654, 25706, 5833, 521, 13, 51816], "temperature": 0.0, "avg_logprob": -0.19088395127972352, "compression_ratio": 1.6982758620689655, "no_speech_prob": 0.03527778014540672}, {"id": 57, "seek": 30140, "start": 301.4, "end": 305.96, "text": " So there are other parameters like the mixing engine, the frequency, the channels and the", "tokens": [50364, 407, 456, 366, 661, 9834, 411, 264, 11983, 2848, 11, 264, 7893, 11, 264, 9235, 293, 264, 50592], "temperature": 0.0, "avg_logprob": -0.29435542878650484, "compression_ratio": 1.6434426229508197, "no_speech_prob": 0.028911232948303223}, {"id": 58, "seek": 30140, "start": 305.96, "end": 306.96, "text": " formats.", "tokens": [50592, 25879, 13, 50642], "temperature": 0.0, "avg_logprob": -0.29435542878650484, "compression_ratio": 1.6434426229508197, "no_speech_prob": 0.028911232948303223}, {"id": 59, "seek": 30140, "start": 306.96, "end": 312.79999999999995, "text": " These parameters are common to the other audio backends like Paul Sodu, Jack and Ausa.", "tokens": [50642, 1981, 9834, 366, 2689, 281, 264, 661, 6278, 646, 2581, 411, 4552, 42059, 84, 11, 4718, 293, 316, 20318, 13, 50934], "temperature": 0.0, "avg_logprob": -0.29435542878650484, "compression_ratio": 1.6434426229508197, "no_speech_prob": 0.028911232948303223}, {"id": 60, "seek": 30140, "start": 312.79999999999995, "end": 320.47999999999996, "text": " But one thing to note is that in QEMU, it currently supports just one channel or two", "tokens": [50934, 583, 472, 551, 281, 3637, 307, 300, 294, 1249, 6683, 52, 11, 309, 4362, 9346, 445, 472, 2269, 420, 732, 51318], "temperature": 0.0, "avg_logprob": -0.29435542878650484, "compression_ratio": 1.6434426229508197, "no_speech_prob": 0.028911232948303223}, {"id": 61, "seek": 30140, "start": 320.47999999999996, "end": 321.47999999999996, "text": " channels.", "tokens": [51318, 9235, 13, 51368], "temperature": 0.0, "avg_logprob": -0.29435542878650484, "compression_ratio": 1.6434426229508197, "no_speech_prob": 0.028911232948303223}, {"id": 62, "seek": 30140, "start": 321.47999999999996, "end": 322.84, "text": " That's money or stereo setup.", "tokens": [51368, 663, 311, 1460, 420, 29029, 8657, 13, 51436], "temperature": 0.0, "avg_logprob": -0.29435542878650484, "compression_ratio": 1.6434426229508197, "no_speech_prob": 0.028911232948303223}, {"id": 63, "seek": 30140, "start": 322.84, "end": 327.4, "text": " So you can configure either one or two channels and in Piperia, when you're using a single", "tokens": [51436, 407, 291, 393, 22162, 2139, 472, 420, 732, 9235, 293, 294, 430, 15402, 654, 11, 562, 291, 434, 1228, 257, 2167, 51664], "temperature": 0.0, "avg_logprob": -0.29435542878650484, "compression_ratio": 1.6434426229508197, "no_speech_prob": 0.028911232948303223}, {"id": 64, "seek": 32740, "start": 327.4, "end": 336.28, "text": " channel, the content of your buffer is basically S1 samples, S2, S3 and each of the samples", "tokens": [50364, 2269, 11, 264, 2701, 295, 428, 21762, 307, 1936, 318, 16, 10938, 11, 318, 17, 11, 318, 18, 293, 1184, 295, 264, 10938, 50808], "temperature": 0.0, "avg_logprob": -0.11717924820749383, "compression_ratio": 1.89, "no_speech_prob": 0.16905130445957184}, {"id": 65, "seek": 32740, "start": 336.28, "end": 339.44, "text": " would be the buffer samples.", "tokens": [50808, 576, 312, 264, 21762, 10938, 13, 50966], "temperature": 0.0, "avg_logprob": -0.11717924820749383, "compression_ratio": 1.89, "no_speech_prob": 0.16905130445957184}, {"id": 66, "seek": 32740, "start": 339.44, "end": 345.0, "text": " Now when you have two channels, the format would be expecting the buffer to be like one", "tokens": [50966, 823, 562, 291, 362, 732, 9235, 11, 264, 7877, 576, 312, 9650, 264, 21762, 281, 312, 411, 472, 51244], "temperature": 0.0, "avg_logprob": -0.11717924820749383, "compression_ratio": 1.89, "no_speech_prob": 0.16905130445957184}, {"id": 67, "seek": 32740, "start": 345.0, "end": 349.56, "text": " sample on the left and one sample on the right and like continuously like that.", "tokens": [51244, 6889, 322, 264, 1411, 293, 472, 6889, 322, 264, 558, 293, 411, 15684, 411, 300, 13, 51472], "temperature": 0.0, "avg_logprob": -0.11717924820749383, "compression_ratio": 1.89, "no_speech_prob": 0.16905130445957184}, {"id": 68, "seek": 32740, "start": 349.56, "end": 355.35999999999996, "text": " So each of the samples that's the one on the left would be going to the left speakers and", "tokens": [51472, 407, 1184, 295, 264, 10938, 300, 311, 264, 472, 322, 264, 1411, 576, 312, 516, 281, 264, 1411, 9518, 293, 51762], "temperature": 0.0, "avg_logprob": -0.11717924820749383, "compression_ratio": 1.89, "no_speech_prob": 0.16905130445957184}, {"id": 69, "seek": 35536, "start": 355.36, "end": 358.2, "text": " then the samples on your right would be going to the right speakers.", "tokens": [50364, 550, 264, 10938, 322, 428, 558, 576, 312, 516, 281, 264, 558, 9518, 13, 50506], "temperature": 0.0, "avg_logprob": -0.13759332739788552, "compression_ratio": 1.7813765182186234, "no_speech_prob": 0.004507521167397499}, {"id": 70, "seek": 35536, "start": 358.2, "end": 365.48, "text": " So in the case of two channels, the sum of the samples would be the sum of the left samples", "tokens": [50506, 407, 294, 264, 1389, 295, 732, 9235, 11, 264, 2408, 295, 264, 10938, 576, 312, 264, 2408, 295, 264, 1411, 10938, 50870], "temperature": 0.0, "avg_logprob": -0.13759332739788552, "compression_ratio": 1.7813765182186234, "no_speech_prob": 0.004507521167397499}, {"id": 71, "seek": 35536, "start": 365.48, "end": 368.52000000000004, "text": " and the right samples which is the stride.", "tokens": [50870, 293, 264, 558, 10938, 597, 307, 264, 1056, 482, 13, 51022], "temperature": 0.0, "avg_logprob": -0.13759332739788552, "compression_ratio": 1.7813765182186234, "no_speech_prob": 0.004507521167397499}, {"id": 72, "seek": 35536, "start": 368.52000000000004, "end": 373.8, "text": " And then the buffer size there, it's specified in microseconds just in case you want to configure", "tokens": [51022, 400, 550, 264, 21762, 2744, 456, 11, 309, 311, 22206, 294, 3123, 37841, 28750, 445, 294, 1389, 291, 528, 281, 22162, 51286], "temperature": 0.0, "avg_logprob": -0.13759332739788552, "compression_ratio": 1.7813765182186234, "no_speech_prob": 0.004507521167397499}, {"id": 73, "seek": 35536, "start": 373.8, "end": 375.68, "text": " a buffer size.", "tokens": [51286, 257, 21762, 2744, 13, 51380], "temperature": 0.0, "avg_logprob": -0.13759332739788552, "compression_ratio": 1.7813765182186234, "no_speech_prob": 0.004507521167397499}, {"id": 74, "seek": 35536, "start": 375.68, "end": 380.8, "text": " And the default format that can be used is S16, although the Piperia Audio Backend has", "tokens": [51380, 400, 264, 7576, 7877, 300, 393, 312, 1143, 307, 318, 6866, 11, 4878, 264, 430, 15402, 654, 25706, 5833, 521, 575, 51636], "temperature": 0.0, "avg_logprob": -0.13759332739788552, "compression_ratio": 1.7813765182186234, "no_speech_prob": 0.004507521167397499}, {"id": 75, "seek": 35536, "start": 380.8, "end": 383.8, "text": " a range of formats that it supports.", "tokens": [51636, 257, 3613, 295, 25879, 300, 309, 9346, 13, 51786], "temperature": 0.0, "avg_logprob": -0.13759332739788552, "compression_ratio": 1.7813765182186234, "no_speech_prob": 0.004507521167397499}, {"id": 76, "seek": 38380, "start": 383.8, "end": 390.08, "text": " And for frequency, you could set a default frequency of 44.1 milliseconds.", "tokens": [50364, 400, 337, 7893, 11, 291, 727, 992, 257, 7576, 7893, 295, 16408, 13, 16, 34184, 13, 50678], "temperature": 0.0, "avg_logprob": -0.1570227602694897, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.004942790139466524}, {"id": 77, "seek": 38380, "start": 390.08, "end": 397.92, "text": " So to use the Piperia Audio Backend, you need an audio device and this audio device is an", "tokens": [50678, 407, 281, 764, 264, 430, 15402, 654, 25706, 5833, 521, 11, 291, 643, 364, 6278, 4302, 293, 341, 6278, 4302, 307, 364, 51070], "temperature": 0.0, "avg_logprob": -0.1570227602694897, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.004942790139466524}, {"id": 78, "seek": 38380, "start": 397.92, "end": 399.72, "text": " emulated sound card.", "tokens": [51070, 846, 6987, 1626, 2920, 13, 51160], "temperature": 0.0, "avg_logprob": -0.1570227602694897, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.004942790139466524}, {"id": 79, "seek": 38380, "start": 399.72, "end": 405.48, "text": " It's a legacy PCI device that's been plugged directly into the PCI ExpressRid bus.", "tokens": [51160, 467, 311, 257, 11711, 6465, 40, 4302, 300, 311, 668, 25679, 3838, 666, 264, 6465, 40, 20212, 49, 327, 1255, 13, 51448], "temperature": 0.0, "avg_logprob": -0.1570227602694897, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.004942790139466524}, {"id": 80, "seek": 38380, "start": 405.48, "end": 411.42, "text": " So this is an example of how the audio device is being configured in the command line.", "tokens": [51448, 407, 341, 307, 364, 1365, 295, 577, 264, 6278, 4302, 307, 885, 30538, 294, 264, 5622, 1622, 13, 51745], "temperature": 0.0, "avg_logprob": -0.1570227602694897, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.004942790139466524}, {"id": 81, "seek": 41142, "start": 411.42, "end": 418.02000000000004, "text": " So first we have the device option which we're specifying an Intel HD device and we'll specify", "tokens": [50364, 407, 700, 321, 362, 264, 4302, 3614, 597, 321, 434, 1608, 5489, 364, 19762, 12149, 4302, 293, 321, 603, 16500, 50694], "temperature": 0.0, "avg_logprob": -0.225954765497252, "compression_ratio": 1.7745098039215685, "no_speech_prob": 0.0040955133736133575}, {"id": 82, "seek": 41142, "start": 418.02000000000004, "end": 426.14000000000004, "text": " a codec option like HD Duplex for streams from your host speakers and your host microphone.", "tokens": [50694, 257, 3089, 66, 3614, 411, 12149, 5153, 18945, 337, 15842, 490, 428, 3975, 9518, 293, 428, 3975, 10952, 13, 51100], "temperature": 0.0, "avg_logprob": -0.225954765497252, "compression_ratio": 1.7745098039215685, "no_speech_prob": 0.0040955133736133575}, {"id": 83, "seek": 41142, "start": 426.14000000000004, "end": 432.62, "text": " And maybe if you wanted to only allow access to just your speakers, you could use the HD", "tokens": [51100, 400, 1310, 498, 291, 1415, 281, 787, 2089, 2105, 281, 445, 428, 9518, 11, 291, 727, 764, 264, 12149, 51424], "temperature": 0.0, "avg_logprob": -0.225954765497252, "compression_ratio": 1.7745098039215685, "no_speech_prob": 0.0040955133736133575}, {"id": 84, "seek": 41142, "start": 432.62, "end": 439.58000000000004, "text": " output option or if you just want access only to your microphone, you could use the HD", "tokens": [51424, 5598, 3614, 420, 498, 291, 445, 528, 2105, 787, 281, 428, 10952, 11, 291, 727, 764, 264, 12149, 51772], "temperature": 0.0, "avg_logprob": -0.225954765497252, "compression_ratio": 1.7745098039215685, "no_speech_prob": 0.0040955133736133575}, {"id": 85, "seek": 43958, "start": 439.7, "end": 441.14, "text": " microphone option.", "tokens": [50370, 10952, 3614, 13, 50442], "temperature": 0.0, "avg_logprob": -0.1920581999279204, "compression_ratio": 1.8073394495412844, "no_speech_prob": 0.015057899989187717}, {"id": 86, "seek": 43958, "start": 441.14, "end": 447.62, "text": " So here you can see that when specifying the sound card device to use, I used the ID that", "tokens": [50442, 407, 510, 291, 393, 536, 300, 562, 1608, 5489, 264, 1626, 2920, 4302, 281, 764, 11, 286, 1143, 264, 7348, 300, 50766], "temperature": 0.0, "avg_logprob": -0.1920581999279204, "compression_ratio": 1.8073394495412844, "no_speech_prob": 0.015057899989187717}, {"id": 87, "seek": 43958, "start": 447.62, "end": 449.7, "text": " was specified in the Piperia Backend.", "tokens": [50766, 390, 22206, 294, 264, 430, 15402, 654, 5833, 521, 13, 50870], "temperature": 0.0, "avg_logprob": -0.1920581999279204, "compression_ratio": 1.8073394495412844, "no_speech_prob": 0.015057899989187717}, {"id": 88, "seek": 43958, "start": 449.7, "end": 454.82, "text": " That's you telling the sound card device to use the Piperia Backend.", "tokens": [50870, 663, 311, 291, 3585, 264, 1626, 2920, 4302, 281, 764, 264, 430, 15402, 654, 5833, 521, 13, 51126], "temperature": 0.0, "avg_logprob": -0.1920581999279204, "compression_ratio": 1.8073394495412844, "no_speech_prob": 0.015057899989187717}, {"id": 89, "seek": 43958, "start": 454.82, "end": 459.18, "text": " So this is how the properties of the Intel HD Audio Device are being declared inside", "tokens": [51126, 407, 341, 307, 577, 264, 7221, 295, 264, 19762, 12149, 25706, 50140, 366, 885, 15489, 1854, 51344], "temperature": 0.0, "avg_logprob": -0.1920581999279204, "compression_ratio": 1.8073394495412844, "no_speech_prob": 0.015057899989187717}, {"id": 90, "seek": 43958, "start": 459.18, "end": 460.26, "text": " the code.", "tokens": [51344, 264, 3089, 13, 51398], "temperature": 0.0, "avg_logprob": -0.1920581999279204, "compression_ratio": 1.8073394495412844, "no_speech_prob": 0.015057899989187717}, {"id": 91, "seek": 43958, "start": 460.26, "end": 465.46, "text": " You can look up how the properties of the other devices like GOS and AC97 are being", "tokens": [51398, 509, 393, 574, 493, 577, 264, 7221, 295, 264, 661, 5759, 411, 460, 4367, 293, 8157, 23247, 366, 885, 51658], "temperature": 0.0, "avg_logprob": -0.1920581999279204, "compression_ratio": 1.8073394495412844, "no_speech_prob": 0.015057899989187717}, {"id": 92, "seek": 46546, "start": 465.46, "end": 473.58, "text": " declared inside the code.", "tokens": [50364, 15489, 1854, 264, 3089, 13, 50770], "temperature": 0.0, "avg_logprob": -0.18798604378333458, "compression_ratio": 1.6119402985074627, "no_speech_prob": 0.007100092247128487}, {"id": 93, "seek": 46546, "start": 473.58, "end": 479.94, "text": " So Quemo allows you to configure multiple audio backends and this is very useful in embedded", "tokens": [50770, 407, 2326, 36221, 4045, 291, 281, 22162, 3866, 6278, 646, 2581, 293, 341, 307, 588, 4420, 294, 16741, 51088], "temperature": 0.0, "avg_logprob": -0.18798604378333458, "compression_ratio": 1.6119402985074627, "no_speech_prob": 0.007100092247128487}, {"id": 94, "seek": 46546, "start": 479.94, "end": 481.82, "text": " platform development.", "tokens": [51088, 3663, 3250, 13, 51182], "temperature": 0.0, "avg_logprob": -0.18798604378333458, "compression_ratio": 1.6119402985074627, "no_speech_prob": 0.007100092247128487}, {"id": 95, "seek": 46546, "start": 481.82, "end": 487.34, "text": " So let's say for example that I'm emulating an infotainment system using Quemo and I want", "tokens": [51182, 407, 718, 311, 584, 337, 1365, 300, 286, 478, 846, 12162, 364, 1536, 310, 491, 518, 1185, 1228, 2326, 36221, 293, 286, 528, 51458], "temperature": 0.0, "avg_logprob": -0.18798604378333458, "compression_ratio": 1.6119402985074627, "no_speech_prob": 0.007100092247128487}, {"id": 96, "seek": 46546, "start": 487.34, "end": 492.17999999999995, "text": " to configure a stream only for notifications on the mono channel and then I want to configure", "tokens": [51458, 281, 22162, 257, 4309, 787, 337, 13426, 322, 264, 35624, 2269, 293, 550, 286, 528, 281, 22162, 51700], "temperature": 0.0, "avg_logprob": -0.18798604378333458, "compression_ratio": 1.6119402985074627, "no_speech_prob": 0.007100092247128487}, {"id": 97, "seek": 49218, "start": 492.3, "end": 496.1, "text": " another stream only for music on two channels.", "tokens": [50370, 1071, 4309, 787, 337, 1318, 322, 732, 9235, 13, 50560], "temperature": 0.0, "avg_logprob": -0.17218698519412604, "compression_ratio": 1.75, "no_speech_prob": 0.03597892448306084}, {"id": 98, "seek": 49218, "start": 496.1, "end": 500.7, "text": " This multiple audio backend configuration, it will allow you to specify different parameters", "tokens": [50560, 639, 3866, 6278, 646, 521, 11694, 11, 309, 486, 2089, 291, 281, 16500, 819, 9834, 50790], "temperature": 0.0, "avg_logprob": -0.17218698519412604, "compression_ratio": 1.75, "no_speech_prob": 0.03597892448306084}, {"id": 99, "seek": 49218, "start": 500.7, "end": 502.98, "text": " for each of the created stream.", "tokens": [50790, 337, 1184, 295, 264, 2942, 4309, 13, 50904], "temperature": 0.0, "avg_logprob": -0.17218698519412604, "compression_ratio": 1.75, "no_speech_prob": 0.03597892448306084}, {"id": 100, "seek": 49218, "start": 502.98, "end": 507.26, "text": " So this is a visual representation of what the backend would look like with two Piperia", "tokens": [50904, 407, 341, 307, 257, 5056, 10290, 295, 437, 264, 646, 521, 576, 574, 411, 365, 732, 430, 15402, 654, 51118], "temperature": 0.0, "avg_logprob": -0.17218698519412604, "compression_ratio": 1.75, "no_speech_prob": 0.03597892448306084}, {"id": 101, "seek": 49218, "start": 507.26, "end": 508.74, "text": " Audio Backends.", "tokens": [51118, 25706, 5833, 2581, 13, 51192], "temperature": 0.0, "avg_logprob": -0.17218698519412604, "compression_ratio": 1.75, "no_speech_prob": 0.03597892448306084}, {"id": 102, "seek": 49218, "start": 508.74, "end": 514.02, "text": " So you can see that each node in the guest is representing a created stream and you can", "tokens": [51192, 407, 291, 393, 536, 300, 1184, 9984, 294, 264, 8341, 307, 13460, 257, 2942, 4309, 293, 291, 393, 51456], "temperature": 0.0, "avg_logprob": -0.17218698519412604, "compression_ratio": 1.75, "no_speech_prob": 0.03597892448306084}, {"id": 103, "seek": 49218, "start": 514.02, "end": 520.94, "text": " see that the nodes which are the colored boxes and you can also see the host speaker nodes.", "tokens": [51456, 536, 300, 264, 13891, 597, 366, 264, 14332, 9002, 293, 291, 393, 611, 536, 264, 3975, 8145, 13891, 13, 51802], "temperature": 0.0, "avg_logprob": -0.17218698519412604, "compression_ratio": 1.75, "no_speech_prob": 0.03597892448306084}, {"id": 104, "seek": 52094, "start": 520.94, "end": 527.0600000000001, "text": " So for playback, the output ports of the Quemo node which is on the right, the output", "tokens": [50364, 407, 337, 37223, 11, 264, 5598, 18160, 295, 264, 2326, 36221, 9984, 597, 307, 322, 264, 558, 11, 264, 5598, 50670], "temperature": 0.0, "avg_logprob": -0.1744582717483108, "compression_ratio": 2.0277777777777777, "no_speech_prob": 0.05725286528468132}, {"id": 105, "seek": 52094, "start": 527.0600000000001, "end": 531.5400000000001, "text": " ports for the Quemo node which is on the right, I've been routed to the speaker nodes", "tokens": [50670, 18160, 337, 264, 2326, 36221, 9984, 597, 307, 322, 264, 558, 11, 286, 600, 668, 4020, 292, 281, 264, 8145, 13891, 50894], "temperature": 0.0, "avg_logprob": -0.1744582717483108, "compression_ratio": 2.0277777777777777, "no_speech_prob": 0.05725286528468132}, {"id": 106, "seek": 52094, "start": 531.5400000000001, "end": 536.9000000000001, "text": " on the host and then the input ports that's coming from the host microphone, I've been", "tokens": [50894, 322, 264, 3975, 293, 550, 264, 4846, 18160, 300, 311, 1348, 490, 264, 3975, 10952, 11, 286, 600, 668, 51162], "temperature": 0.0, "avg_logprob": -0.1744582717483108, "compression_ratio": 2.0277777777777777, "no_speech_prob": 0.05725286528468132}, {"id": 107, "seek": 52094, "start": 536.9000000000001, "end": 540.1800000000001, "text": " routed to the input ports on the guest.", "tokens": [51162, 4020, 292, 281, 264, 4846, 18160, 322, 264, 8341, 13, 51326], "temperature": 0.0, "avg_logprob": -0.1744582717483108, "compression_ratio": 2.0277777777777777, "no_speech_prob": 0.05725286528468132}, {"id": 108, "seek": 52094, "start": 540.1800000000001, "end": 545.1, "text": " So this is also very useful when maybe you want to isolate the audio that's coming from", "tokens": [51326, 407, 341, 307, 611, 588, 4420, 562, 1310, 291, 528, 281, 25660, 264, 6278, 300, 311, 1348, 490, 51572], "temperature": 0.0, "avg_logprob": -0.1744582717483108, "compression_ratio": 2.0277777777777777, "no_speech_prob": 0.05725286528468132}, {"id": 109, "seek": 52094, "start": 545.1, "end": 549.9000000000001, "text": " different processes that are running in your guest.", "tokens": [51572, 819, 7555, 300, 366, 2614, 294, 428, 8341, 13, 51812], "temperature": 0.0, "avg_logprob": -0.1744582717483108, "compression_ratio": 2.0277777777777777, "no_speech_prob": 0.05725286528468132}, {"id": 110, "seek": 54990, "start": 549.9399999999999, "end": 556.26, "text": " So now we'll take a technical deep dive into how the Piperia Audio Backend works.", "tokens": [50366, 407, 586, 321, 603, 747, 257, 6191, 2452, 9192, 666, 577, 264, 430, 15402, 654, 25706, 5833, 521, 1985, 13, 50682], "temperature": 0.0, "avg_logprob": -0.20116338476670526, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.003804669715464115}, {"id": 111, "seek": 54990, "start": 556.26, "end": 558.42, "text": " So what happens in playback?", "tokens": [50682, 407, 437, 2314, 294, 37223, 30, 50790], "temperature": 0.0, "avg_logprob": -0.20116338476670526, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.003804669715464115}, {"id": 112, "seek": 54990, "start": 558.42, "end": 564.06, "text": " For playback, we first activate the stream and using this Piperia Streamset Active API", "tokens": [50790, 1171, 37223, 11, 321, 700, 13615, 264, 4309, 293, 1228, 341, 430, 15402, 654, 24904, 3854, 26635, 9362, 51072], "temperature": 0.0, "avg_logprob": -0.20116338476670526, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.003804669715464115}, {"id": 113, "seek": 54990, "start": 564.06, "end": 569.26, "text": " call, it will set the stream mode into streaming and then next we call the buffer get free", "tokens": [51072, 818, 11, 309, 486, 992, 264, 4309, 4391, 666, 11791, 293, 550, 958, 321, 818, 264, 21762, 483, 1737, 51332], "temperature": 0.0, "avg_logprob": -0.20116338476670526, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.003804669715464115}, {"id": 114, "seek": 54990, "start": 569.26, "end": 570.26, "text": " function.", "tokens": [51332, 2445, 13, 51382], "temperature": 0.0, "avg_logprob": -0.20116338476670526, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.003804669715464115}, {"id": 115, "seek": 54990, "start": 570.26, "end": 573.9399999999999, "text": " This function is used to know in advance the available number of bytes for writing data", "tokens": [51382, 639, 2445, 307, 1143, 281, 458, 294, 7295, 264, 2435, 1230, 295, 36088, 337, 3579, 1412, 51566], "temperature": 0.0, "avg_logprob": -0.20116338476670526, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.003804669715464115}, {"id": 116, "seek": 54990, "start": 573.9399999999999, "end": 579.78, "text": " to the buffer and this also improves the playback latency by a factor of two.", "tokens": [51566, 281, 264, 21762, 293, 341, 611, 24771, 264, 37223, 27043, 538, 257, 5952, 295, 732, 13, 51858], "temperature": 0.0, "avg_logprob": -0.20116338476670526, "compression_ratio": 1.6630824372759856, "no_speech_prob": 0.003804669715464115}, {"id": 117, "seek": 57978, "start": 579.98, "end": 583.6999999999999, "text": " And later I will show you some latency measurements.", "tokens": [50374, 400, 1780, 286, 486, 855, 291, 512, 27043, 15383, 13, 50560], "temperature": 0.0, "avg_logprob": -0.1914902687072754, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.002717000897973776}, {"id": 118, "seek": 57978, "start": 583.6999999999999, "end": 587.42, "text": " So next what we want to do is to lock the tread loop because I'm using the tread loop", "tokens": [50560, 407, 958, 437, 321, 528, 281, 360, 307, 281, 4017, 264, 28286, 6367, 570, 286, 478, 1228, 264, 28286, 6367, 50746], "temperature": 0.0, "avg_logprob": -0.1914902687072754, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.002717000897973776}, {"id": 119, "seek": 57978, "start": 587.42, "end": 592.8199999999999, "text": " mechanism and this mechanism ensures that we are doing the Piperia API calls only from", "tokens": [50746, 7513, 293, 341, 7513, 28111, 300, 321, 366, 884, 264, 430, 15402, 654, 9362, 5498, 787, 490, 51016], "temperature": 0.0, "avg_logprob": -0.1914902687072754, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.002717000897973776}, {"id": 120, "seek": 57978, "start": 592.8199999999999, "end": 594.6999999999999, "text": " one single tread at a time.", "tokens": [51016, 472, 2167, 28286, 412, 257, 565, 13, 51110], "temperature": 0.0, "avg_logprob": -0.1914902687072754, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.002717000897973776}, {"id": 121, "seek": 57978, "start": 594.6999999999999, "end": 598.5799999999999, "text": " So you don't want to be accessing this Piperia resources from multiple threads because it", "tokens": [51110, 407, 291, 500, 380, 528, 281, 312, 26440, 341, 430, 15402, 654, 3593, 490, 3866, 19314, 570, 309, 51304], "temperature": 0.0, "avg_logprob": -0.1914902687072754, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.002717000897973776}, {"id": 122, "seek": 57978, "start": 598.5799999999999, "end": 601.98, "text": " could cause a risk condition.", "tokens": [51304, 727, 3082, 257, 3148, 4188, 13, 51474], "temperature": 0.0, "avg_logprob": -0.1914902687072754, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.002717000897973776}, {"id": 123, "seek": 57978, "start": 601.98, "end": 607.66, "text": " So next what we want to do is to get the number of bytes that are available for writing data", "tokens": [51474, 407, 958, 437, 321, 528, 281, 360, 307, 281, 483, 264, 1230, 295, 36088, 300, 366, 2435, 337, 3579, 1412, 51758], "temperature": 0.0, "avg_logprob": -0.1914902687072754, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.002717000897973776}, {"id": 124, "seek": 57978, "start": 607.66, "end": 609.26, "text": " to the buffer.", "tokens": [51758, 281, 264, 21762, 13, 51838], "temperature": 0.0, "avg_logprob": -0.1914902687072754, "compression_ratio": 1.8358778625954197, "no_speech_prob": 0.002717000897973776}, {"id": 125, "seek": 60926, "start": 609.26, "end": 613.02, "text": " How we get this value is that we subtract the number of bytes that are actually inside", "tokens": [50364, 1012, 321, 483, 341, 2158, 307, 300, 321, 16390, 264, 1230, 295, 36088, 300, 366, 767, 1854, 50552], "temperature": 0.0, "avg_logprob": -0.1176921196703641, "compression_ratio": 1.8836206896551724, "no_speech_prob": 0.006314209196716547}, {"id": 126, "seek": 60926, "start": 613.02, "end": 617.66, "text": " the ring buffer from the effective Piperia Backend buffer size.", "tokens": [50552, 264, 4875, 21762, 490, 264, 4942, 430, 15402, 654, 5833, 521, 21762, 2744, 13, 50784], "temperature": 0.0, "avg_logprob": -0.1176921196703641, "compression_ratio": 1.8836206896551724, "no_speech_prob": 0.006314209196716547}, {"id": 127, "seek": 60926, "start": 617.66, "end": 622.3, "text": " And to get these bytes that are inside the ring buffer, we use the sparring buffer get", "tokens": [50784, 400, 281, 483, 613, 36088, 300, 366, 1854, 264, 4875, 21762, 11, 321, 764, 264, 637, 18285, 21762, 483, 51016], "temperature": 0.0, "avg_logprob": -0.1176921196703641, "compression_ratio": 1.8836206896551724, "no_speech_prob": 0.006314209196716547}, {"id": 128, "seek": 60926, "start": 622.3, "end": 625.42, "text": " rights index API call.", "tokens": [51016, 4601, 8186, 9362, 818, 13, 51172], "temperature": 0.0, "avg_logprob": -0.1176921196703641, "compression_ratio": 1.8836206896551724, "no_speech_prob": 0.006314209196716547}, {"id": 129, "seek": 60926, "start": 625.42, "end": 633.02, "text": " So now what we do next is to use the sparring buffer write data to actually do a mem copy", "tokens": [51172, 407, 586, 437, 321, 360, 958, 307, 281, 764, 264, 637, 18285, 21762, 2464, 1412, 281, 767, 360, 257, 1334, 5055, 51552], "temperature": 0.0, "avg_logprob": -0.1176921196703641, "compression_ratio": 1.8836206896551724, "no_speech_prob": 0.006314209196716547}, {"id": 130, "seek": 60926, "start": 633.02, "end": 638.54, "text": " of buffer data from the source audio device to a temporary buffer with the index being", "tokens": [51552, 295, 21762, 1412, 490, 264, 4009, 6278, 4302, 281, 257, 13413, 21762, 365, 264, 8186, 885, 51828], "temperature": 0.0, "avg_logprob": -0.1176921196703641, "compression_ratio": 1.8836206896551724, "no_speech_prob": 0.006314209196716547}, {"id": 131, "seek": 63854, "start": 638.54, "end": 642.6999999999999, "text": " the offset and then we update the write pointer.", "tokens": [50364, 264, 18687, 293, 550, 321, 5623, 264, 2464, 23918, 13, 50572], "temperature": 0.0, "avg_logprob": -0.195790772796959, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.008009806275367737}, {"id": 132, "seek": 63854, "start": 642.6999999999999, "end": 648.02, "text": " So here at this point there is the possibility of buffer on the run sometime occurring and", "tokens": [50572, 407, 510, 412, 341, 935, 456, 307, 264, 7959, 295, 21762, 322, 264, 1190, 15053, 18386, 293, 50838], "temperature": 0.0, "avg_logprob": -0.195790772796959, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.008009806275367737}, {"id": 133, "seek": 63854, "start": 648.02, "end": 653.42, "text": " although this happens in very rare cases, this is like a situation where the audio buffer", "tokens": [50838, 4878, 341, 2314, 294, 588, 5892, 3331, 11, 341, 307, 411, 257, 2590, 689, 264, 6278, 21762, 51108], "temperature": 0.0, "avg_logprob": -0.195790772796959, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.008009806275367737}, {"id": 134, "seek": 63854, "start": 653.42, "end": 658.62, "text": " levels has dropped below a certain threshold and it sometimes cause audio distortion or", "tokens": [51108, 4358, 575, 8119, 2507, 257, 1629, 14678, 293, 309, 2171, 3082, 6278, 28426, 420, 51368], "temperature": 0.0, "avg_logprob": -0.195790772796959, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.008009806275367737}, {"id": 135, "seek": 63854, "start": 658.62, "end": 664.0999999999999, "text": " stuttering and like we cannot really guarantee that okay this guest would be producing the", "tokens": [51368, 342, 32224, 293, 411, 321, 2644, 534, 10815, 300, 1392, 341, 8341, 576, 312, 10501, 264, 51642], "temperature": 0.0, "avg_logprob": -0.195790772796959, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.008009806275367737}, {"id": 136, "seek": 63854, "start": 664.0999999999999, "end": 666.02, "text": " audio samples fast enough.", "tokens": [51642, 6278, 10938, 2370, 1547, 13, 51738], "temperature": 0.0, "avg_logprob": -0.195790772796959, "compression_ratio": 1.7261904761904763, "no_speech_prob": 0.008009806275367737}, {"id": 137, "seek": 66602, "start": 666.02, "end": 672.22, "text": " So in Piperia we had a robust solution to fix this issue which was to handle this buffer", "tokens": [50364, 407, 294, 430, 15402, 654, 321, 632, 257, 13956, 3827, 281, 3191, 341, 2734, 597, 390, 281, 4813, 341, 21762, 50674], "temperature": 0.0, "avg_logprob": -0.1465721784853468, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.0032647952903062105}, {"id": 138, "seek": 66602, "start": 672.22, "end": 674.5799999999999, "text": " on the runs by plain silence.", "tokens": [50674, 322, 264, 6676, 538, 11121, 12239, 13, 50792], "temperature": 0.0, "avg_logprob": -0.1465721784853468, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.0032647952903062105}, {"id": 139, "seek": 66602, "start": 674.5799999999999, "end": 680.02, "text": " You can look up the code on how we handle the buffer on the runs.", "tokens": [50792, 509, 393, 574, 493, 264, 3089, 322, 577, 321, 4813, 264, 21762, 322, 264, 6676, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1465721784853468, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.0032647952903062105}, {"id": 140, "seek": 66602, "start": 680.02, "end": 685.62, "text": " So next what we do is to get a buffer that can be filled for the playback stream and", "tokens": [51064, 407, 958, 437, 321, 360, 307, 281, 483, 257, 21762, 300, 393, 312, 6412, 337, 264, 37223, 4309, 293, 51344], "temperature": 0.0, "avg_logprob": -0.1465721784853468, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.0032647952903062105}, {"id": 141, "seek": 66602, "start": 685.62, "end": 690.62, "text": " then we copy this audio data from the temporary buffer to the Piperia buffer using the sparring", "tokens": [51344, 550, 321, 5055, 341, 6278, 1412, 490, 264, 13413, 21762, 281, 264, 430, 15402, 654, 21762, 1228, 264, 637, 18285, 51594], "temperature": 0.0, "avg_logprob": -0.1465721784853468, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.0032647952903062105}, {"id": 142, "seek": 66602, "start": 690.62, "end": 692.42, "text": " buffer read data API call.", "tokens": [51594, 21762, 1401, 1412, 9362, 818, 13, 51684], "temperature": 0.0, "avg_logprob": -0.1465721784853468, "compression_ratio": 1.7345132743362832, "no_speech_prob": 0.0032647952903062105}, {"id": 143, "seek": 69242, "start": 692.8199999999999, "end": 696.8199999999999, "text": " Although I'm just giving you a summary of what the sparring buffer read data API call", "tokens": [50384, 5780, 286, 478, 445, 2902, 291, 257, 12691, 295, 437, 264, 637, 18285, 21762, 1401, 1412, 9362, 818, 50584], "temperature": 0.0, "avg_logprob": -0.18767342818410773, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.01583152823150158}, {"id": 144, "seek": 69242, "start": 696.8199999999999, "end": 700.78, "text": " does but it does much more than that.", "tokens": [50584, 775, 457, 309, 775, 709, 544, 813, 300, 13, 50782], "temperature": 0.0, "avg_logprob": -0.18767342818410773, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.01583152823150158}, {"id": 145, "seek": 69242, "start": 700.78, "end": 706.6999999999999, "text": " And then next we queue the buffer for playback and this continue to happen in a loop until", "tokens": [50782, 400, 550, 958, 321, 18639, 264, 21762, 337, 37223, 293, 341, 2354, 281, 1051, 294, 257, 6367, 1826, 51078], "temperature": 0.0, "avg_logprob": -0.18767342818410773, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.01583152823150158}, {"id": 146, "seek": 69242, "start": 706.6999999999999, "end": 711.42, "text": " all the buffers have been played.", "tokens": [51078, 439, 264, 9204, 433, 362, 668, 3737, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18767342818410773, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.01583152823150158}, {"id": 147, "seek": 69242, "start": 711.42, "end": 714.54, "text": " So for the capture side what happens?", "tokens": [51314, 407, 337, 264, 7983, 1252, 437, 2314, 30, 51470], "temperature": 0.0, "avg_logprob": -0.18767342818410773, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.01583152823150158}, {"id": 148, "seek": 69242, "start": 714.54, "end": 720.62, "text": " It's more or less the opposite of what's happened in the Piperia backend and in this", "tokens": [51470, 467, 311, 544, 420, 1570, 264, 6182, 295, 437, 311, 2011, 294, 264, 430, 15402, 654, 38087, 293, 294, 341, 51774], "temperature": 0.0, "avg_logprob": -0.18767342818410773, "compression_ratio": 1.6200873362445414, "no_speech_prob": 0.01583152823150158}, {"id": 149, "seek": 72062, "start": 720.7, "end": 724.78, "text": " case like it's kind of similar but not because it's the opposite.", "tokens": [50368, 1389, 411, 309, 311, 733, 295, 2531, 457, 406, 570, 309, 311, 264, 6182, 13, 50572], "temperature": 0.0, "avg_logprob": -0.14122675974434667, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.004667287226766348}, {"id": 150, "seek": 72062, "start": 724.78, "end": 729.9, "text": " So in this case what we do first is that we like activate the stream and then we use the", "tokens": [50572, 407, 294, 341, 1389, 437, 321, 360, 700, 307, 300, 321, 411, 13615, 264, 4309, 293, 550, 321, 764, 264, 50828], "temperature": 0.0, "avg_logprob": -0.14122675974434667, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.004667287226766348}, {"id": 151, "seek": 72062, "start": 729.9, "end": 735.66, "text": " buffer get refunction to know in advance the available number of bytes that we can write", "tokens": [50828, 21762, 483, 1895, 32627, 281, 458, 294, 7295, 264, 2435, 1230, 295, 36088, 300, 321, 393, 2464, 51116], "temperature": 0.0, "avg_logprob": -0.14122675974434667, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.004667287226766348}, {"id": 152, "seek": 72062, "start": 735.66, "end": 740.66, "text": " and then we use the tread loop lock again to ensure that we're just doing the API calls", "tokens": [51116, 293, 550, 321, 764, 264, 28286, 6367, 4017, 797, 281, 5586, 300, 321, 434, 445, 884, 264, 9362, 5498, 51366], "temperature": 0.0, "avg_logprob": -0.14122675974434667, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.004667287226766348}, {"id": 153, "seek": 72062, "start": 740.66, "end": 744.58, "text": " from one single tread at a time.", "tokens": [51366, 490, 472, 2167, 28286, 412, 257, 565, 13, 51562], "temperature": 0.0, "avg_logprob": -0.14122675974434667, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.004667287226766348}, {"id": 154, "seek": 72062, "start": 744.58, "end": 749.3, "text": " But the difference here is that this time around instead of using the sparring buffer", "tokens": [51562, 583, 264, 2649, 510, 307, 300, 341, 565, 926, 2602, 295, 1228, 264, 637, 18285, 21762, 51798], "temperature": 0.0, "avg_logprob": -0.14122675974434667, "compression_ratio": 1.7647058823529411, "no_speech_prob": 0.004667287226766348}, {"id": 155, "seek": 74930, "start": 749.3, "end": 753.9399999999999, "text": " write data API call we're using the sparring buffer read data call and this time we're", "tokens": [50364, 2464, 1412, 9362, 818, 321, 434, 1228, 264, 637, 18285, 21762, 1401, 1412, 818, 293, 341, 565, 321, 434, 50596], "temperature": 0.0, "avg_logprob": -0.130948714839602, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.009322530589997768}, {"id": 156, "seek": 74930, "start": 753.9399999999999, "end": 759.3399999999999, "text": " doing a mem copy of buffer data from the temporary buffer to the source audio device.", "tokens": [50596, 884, 257, 1334, 5055, 295, 21762, 1412, 490, 264, 13413, 21762, 281, 264, 4009, 6278, 4302, 13, 50866], "temperature": 0.0, "avg_logprob": -0.130948714839602, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.009322530589997768}, {"id": 157, "seek": 74930, "start": 759.3399999999999, "end": 765.78, "text": " So with the index being the offset we would update the read pointer afterwards.", "tokens": [50866, 407, 365, 264, 8186, 885, 264, 18687, 321, 576, 5623, 264, 1401, 23918, 10543, 13, 51188], "temperature": 0.0, "avg_logprob": -0.130948714839602, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.009322530589997768}, {"id": 158, "seek": 74930, "start": 765.78, "end": 771.06, "text": " Then what we want to do next is to get a buffer that can be consumed for the capture streams", "tokens": [51188, 1396, 437, 321, 528, 281, 360, 958, 307, 281, 483, 257, 21762, 300, 393, 312, 21226, 337, 264, 7983, 15842, 51452], "temperature": 0.0, "avg_logprob": -0.130948714839602, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.009322530589997768}, {"id": 159, "seek": 74930, "start": 771.06, "end": 776.5799999999999, "text": " and then we copy the audio data from the Piperia buffer to the source audio device using the", "tokens": [51452, 293, 550, 321, 5055, 264, 6278, 1412, 490, 264, 430, 15402, 654, 21762, 281, 264, 4009, 6278, 4302, 1228, 264, 51728], "temperature": 0.0, "avg_logprob": -0.130948714839602, "compression_ratio": 1.8481012658227849, "no_speech_prob": 0.009322530589997768}, {"id": 160, "seek": 77658, "start": 776.6600000000001, "end": 783.1800000000001, "text": " sparring buffer write data API call.", "tokens": [50368, 637, 18285, 21762, 2464, 1412, 9362, 818, 13, 50694], "temperature": 0.0, "avg_logprob": -0.20305248948394275, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.0038635870441794395}, {"id": 161, "seek": 77658, "start": 783.1800000000001, "end": 788.94, "text": " Next we queue the buffer for capture and then this continues in a loop until all the buffers", "tokens": [50694, 3087, 321, 18639, 264, 21762, 337, 7983, 293, 550, 341, 6515, 294, 257, 6367, 1826, 439, 264, 9204, 433, 50982], "temperature": 0.0, "avg_logprob": -0.20305248948394275, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.0038635870441794395}, {"id": 162, "seek": 77658, "start": 788.94, "end": 794.9000000000001, "text": " are being consumed for capture.", "tokens": [50982, 366, 885, 21226, 337, 7983, 13, 51280], "temperature": 0.0, "avg_logprob": -0.20305248948394275, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.0038635870441794395}, {"id": 163, "seek": 77658, "start": 794.9000000000001, "end": 801.0200000000001, "text": " So as regards to the volume controls in order to be able to adjust your volumes through the", "tokens": [51280, 407, 382, 14258, 281, 264, 5523, 9003, 294, 1668, 281, 312, 1075, 281, 4369, 428, 22219, 807, 264, 51586], "temperature": 0.0, "avg_logprob": -0.20305248948394275, "compression_ratio": 1.5333333333333334, "no_speech_prob": 0.0038635870441794395}, {"id": 164, "seek": 80102, "start": 801.02, "end": 807.38, "text": " virtual machine to be effective on the host we use the Piperia volume control API calls", "tokens": [50364, 6374, 3479, 281, 312, 4942, 322, 264, 3975, 321, 764, 264, 430, 15402, 654, 5523, 1969, 9362, 5498, 50682], "temperature": 0.0, "avg_logprob": -0.2000671492682563, "compression_ratio": 1.9911894273127753, "no_speech_prob": 0.04143320396542549}, {"id": 165, "seek": 80102, "start": 807.38, "end": 813.38, "text": " and this volume control code would allow for purpose synchronization of the volume changes", "tokens": [50682, 293, 341, 5523, 1969, 3089, 576, 2089, 337, 4334, 19331, 2144, 295, 264, 5523, 2962, 50982], "temperature": 0.0, "avg_logprob": -0.2000671492682563, "compression_ratio": 1.9911894273127753, "no_speech_prob": 0.04143320396542549}, {"id": 166, "seek": 80102, "start": 813.38, "end": 816.5799999999999, "text": " that are made on the guests to be effective on the host.", "tokens": [50982, 300, 366, 1027, 322, 264, 9804, 281, 312, 4942, 322, 264, 3975, 13, 51142], "temperature": 0.0, "avg_logprob": -0.2000671492682563, "compression_ratio": 1.9911894273127753, "no_speech_prob": 0.04143320396542549}, {"id": 167, "seek": 80102, "start": 816.5799999999999, "end": 821.98, "text": " So when this volume changes have been applied on the node output monitor parts of the guests", "tokens": [51142, 407, 562, 341, 5523, 2962, 362, 668, 6456, 322, 264, 9984, 5598, 6002, 3166, 295, 264, 9804, 51412], "temperature": 0.0, "avg_logprob": -0.2000671492682563, "compression_ratio": 1.9911894273127753, "no_speech_prob": 0.04143320396542549}, {"id": 168, "seek": 80102, "start": 821.98, "end": 824.74, "text": " it will synchronize with the host.", "tokens": [51412, 309, 486, 19331, 1125, 365, 264, 3975, 13, 51550], "temperature": 0.0, "avg_logprob": -0.2000671492682563, "compression_ratio": 1.9911894273127753, "no_speech_prob": 0.04143320396542549}, {"id": 169, "seek": 80102, "start": 824.74, "end": 830.42, "text": " So for Piperia I use the Piperia stream set control API call and this is used to set the", "tokens": [51550, 407, 337, 430, 15402, 654, 286, 764, 264, 430, 15402, 654, 4309, 992, 1969, 9362, 818, 293, 341, 307, 1143, 281, 992, 264, 51834], "temperature": 0.0, "avg_logprob": -0.2000671492682563, "compression_ratio": 1.9911894273127753, "no_speech_prob": 0.04143320396542549}, {"id": 170, "seek": 83042, "start": 830.42, "end": 832.14, "text": " effective volume.", "tokens": [50364, 4942, 5523, 13, 50450], "temperature": 0.0, "avg_logprob": -0.2262125788508235, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.009125660173594952}, {"id": 171, "seek": 83042, "start": 832.14, "end": 838.74, "text": " Although one thing to note in Quemo was that it had volume levels of 0 to 255 and in the", "tokens": [50450, 5780, 472, 551, 281, 3637, 294, 2326, 36221, 390, 300, 309, 632, 5523, 4358, 295, 1958, 281, 3552, 20, 293, 294, 264, 50780], "temperature": 0.0, "avg_logprob": -0.2262125788508235, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.009125660173594952}, {"id": 172, "seek": 83042, "start": 838.74, "end": 846.5, "text": " back end because the Piperia API has volume levels from a floating range of 0 to 1 where", "tokens": [50780, 646, 917, 570, 264, 430, 15402, 654, 9362, 575, 5523, 4358, 490, 257, 12607, 3613, 295, 1958, 281, 502, 689, 51168], "temperature": 0.0, "avg_logprob": -0.2262125788508235, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.009125660173594952}, {"id": 173, "seek": 83042, "start": 846.5, "end": 852.4599999999999, "text": " 0 is the silence and 1 is representing without attenuation I had to do a linear conversion", "tokens": [51168, 1958, 307, 264, 12239, 293, 502, 307, 13460, 1553, 951, 268, 16073, 286, 632, 281, 360, 257, 8213, 14298, 51466], "temperature": 0.0, "avg_logprob": -0.2262125788508235, "compression_ratio": 1.5376344086021505, "no_speech_prob": 0.009125660173594952}, {"id": 174, "seek": 85246, "start": 852.46, "end": 860.82, "text": " of these levels so did a linear conversion of 255 levels to Piperia floats in range of", "tokens": [50364, 295, 613, 4358, 370, 630, 257, 8213, 14298, 295, 3552, 20, 4358, 281, 430, 15402, 654, 37878, 294, 3613, 295, 50782], "temperature": 0.0, "avg_logprob": -0.17017051737795594, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.06135409697890282}, {"id": 175, "seek": 85246, "start": 860.82, "end": 865.14, "text": " 0 to 1.", "tokens": [50782, 1958, 281, 502, 13, 50998], "temperature": 0.0, "avg_logprob": -0.17017051737795594, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.06135409697890282}, {"id": 176, "seek": 85246, "start": 865.14, "end": 870.5, "text": " So regarding the features of the Piperia back end these features are not like the features", "tokens": [50998, 407, 8595, 264, 4122, 295, 264, 430, 15402, 654, 646, 917, 613, 4122, 366, 406, 411, 264, 4122, 51266], "temperature": 0.0, "avg_logprob": -0.17017051737795594, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.06135409697890282}, {"id": 177, "seek": 85246, "start": 870.5, "end": 876.3000000000001, "text": " of Piperia in general it's not only limited to its design to handle multimedia processing", "tokens": [51266, 295, 430, 15402, 654, 294, 2674, 309, 311, 406, 787, 5567, 281, 1080, 1715, 281, 4813, 49202, 9007, 51556], "temperature": 0.0, "avg_logprob": -0.17017051737795594, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.06135409697890282}, {"id": 178, "seek": 85246, "start": 876.3000000000001, "end": 882.14, "text": " on the Linux but it also transcends to applications that have been built with the Piperia C API", "tokens": [51556, 322, 264, 18734, 457, 309, 611, 43800, 2581, 281, 5821, 300, 362, 668, 3094, 365, 264, 430, 15402, 654, 383, 9362, 51848], "temperature": 0.0, "avg_logprob": -0.17017051737795594, "compression_ratio": 1.6415929203539823, "no_speech_prob": 0.06135409697890282}, {"id": 179, "seek": 88214, "start": 882.14, "end": 886.78, "text": " of which a use case now is the Piperia audio back end in Quemo.", "tokens": [50364, 295, 597, 257, 764, 1389, 586, 307, 264, 430, 15402, 654, 6278, 646, 917, 294, 2326, 36221, 13, 50596], "temperature": 0.0, "avg_logprob": -0.20695168944610948, "compression_ratio": 1.71875, "no_speech_prob": 0.050137486308813095}, {"id": 180, "seek": 88214, "start": 886.78, "end": 893.34, "text": " So on into the Piperia low latency features the Piperia back end has been developed to", "tokens": [50596, 407, 322, 666, 264, 430, 15402, 654, 2295, 27043, 4122, 264, 430, 15402, 654, 646, 917, 575, 668, 4743, 281, 50924], "temperature": 0.0, "avg_logprob": -0.20695168944610948, "compression_ratio": 1.71875, "no_speech_prob": 0.050137486308813095}, {"id": 181, "seek": 88214, "start": 893.34, "end": 899.58, "text": " significantly reduce the latency in many ways and one of the ways is by setting the Piperia", "tokens": [50924, 10591, 5407, 264, 27043, 294, 867, 2098, 293, 472, 295, 264, 2098, 307, 538, 3287, 264, 430, 15402, 654, 51236], "temperature": 0.0, "avg_logprob": -0.20695168944610948, "compression_ratio": 1.71875, "no_speech_prob": 0.050137486308813095}, {"id": 182, "seek": 88214, "start": 899.58, "end": 905.9, "text": " keynote latency property and we set it in the back end to be 75% of the time period for", "tokens": [51236, 33896, 27043, 4707, 293, 321, 992, 309, 294, 264, 646, 917, 281, 312, 9562, 4, 295, 264, 565, 2896, 337, 51552], "temperature": 0.0, "avg_logprob": -0.20695168944610948, "compression_ratio": 1.71875, "no_speech_prob": 0.050137486308813095}, {"id": 183, "seek": 90590, "start": 905.9, "end": 913.4399999999999, "text": " faster updates and the other way in which we reduced latency was to use the buffer get", "tokens": [50364, 4663, 9205, 293, 264, 661, 636, 294, 597, 321, 9212, 27043, 390, 281, 764, 264, 21762, 483, 50741], "temperature": 0.0, "avg_logprob": -0.19345281237647646, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.06304249167442322}, {"id": 184, "seek": 90590, "start": 913.4399999999999, "end": 918.98, "text": " free function which improved the latency by a factor of 2.", "tokens": [50741, 1737, 2445, 597, 9689, 264, 27043, 538, 257, 5952, 295, 568, 13, 51018], "temperature": 0.0, "avg_logprob": -0.19345281237647646, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.06304249167442322}, {"id": 185, "seek": 90590, "start": 918.98, "end": 924.98, "text": " And I think to note about the latency is that the Piperia back end latency is mostly determined", "tokens": [51018, 400, 286, 519, 281, 3637, 466, 264, 27043, 307, 300, 264, 430, 15402, 654, 646, 917, 27043, 307, 5240, 9540, 51318], "temperature": 0.0, "avg_logprob": -0.19345281237647646, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.06304249167442322}, {"id": 186, "seek": 90590, "start": 924.98, "end": 930.5799999999999, "text": " by a combination of the buffer size and the sample rate of the back end and this is usually", "tokens": [51318, 538, 257, 6562, 295, 264, 21762, 2744, 293, 264, 6889, 3314, 295, 264, 646, 917, 293, 341, 307, 2673, 51598], "temperature": 0.0, "avg_logprob": -0.19345281237647646, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.06304249167442322}, {"id": 187, "seek": 90590, "start": 930.5799999999999, "end": 933.8199999999999, "text": " called the quantum.", "tokens": [51598, 1219, 264, 13018, 13, 51760], "temperature": 0.0, "avg_logprob": -0.19345281237647646, "compression_ratio": 1.7135922330097086, "no_speech_prob": 0.06304249167442322}, {"id": 188, "seek": 93382, "start": 933.82, "end": 941.5, "text": " So another feature of the audio back end is that it's providing a reduced footprint and", "tokens": [50364, 407, 1071, 4111, 295, 264, 6278, 646, 917, 307, 300, 309, 311, 6530, 257, 9212, 24222, 293, 50748], "temperature": 0.0, "avg_logprob": -0.14815449070286107, "compression_ratio": 1.6310160427807487, "no_speech_prob": 0.002121578436344862}, {"id": 189, "seek": 93382, "start": 941.5, "end": 946.74, "text": " also reduced dependencies in comparison to the other audio back ends that we have in", "tokens": [50748, 611, 9212, 36606, 294, 9660, 281, 264, 661, 6278, 646, 5314, 300, 321, 362, 294, 51010], "temperature": 0.0, "avg_logprob": -0.14815449070286107, "compression_ratio": 1.6310160427807487, "no_speech_prob": 0.002121578436344862}, {"id": 190, "seek": 93382, "start": 946.74, "end": 953.74, "text": " Quemo and for the native Piperia back end we get to benefit from Piperia features such", "tokens": [51010, 2326, 36221, 293, 337, 264, 8470, 430, 15402, 654, 646, 917, 321, 483, 281, 5121, 490, 430, 15402, 654, 4122, 1270, 51360], "temperature": 0.0, "avg_logprob": -0.14815449070286107, "compression_ratio": 1.6310160427807487, "no_speech_prob": 0.002121578436344862}, {"id": 191, "seek": 93382, "start": 953.74, "end": 961.1800000000001, "text": " as the less CPU usage and the memory as well.", "tokens": [51360, 382, 264, 1570, 13199, 14924, 293, 264, 4675, 382, 731, 13, 51732], "temperature": 0.0, "avg_logprob": -0.14815449070286107, "compression_ratio": 1.6310160427807487, "no_speech_prob": 0.002121578436344862}, {"id": 192, "seek": 96118, "start": 961.18, "end": 966.2199999999999, "text": " So here I made some benchmarkings of the round triple latencies for the different audio back", "tokens": [50364, 407, 510, 286, 1027, 512, 18927, 1109, 295, 264, 3098, 15508, 4465, 6464, 337, 264, 819, 6278, 646, 50616], "temperature": 0.0, "avg_logprob": -0.22881460189819336, "compression_ratio": 1.7416666666666667, "no_speech_prob": 0.08138425648212433}, {"id": 193, "seek": 96118, "start": 966.2199999999999, "end": 972.5, "text": " ends and all these latencies were being measured with a jack Iodili and a loopback cable.", "tokens": [50616, 5314, 293, 439, 613, 4465, 6464, 645, 885, 12690, 365, 257, 7109, 286, 378, 2312, 293, 257, 6367, 3207, 8220, 13, 50930], "temperature": 0.0, "avg_logprob": -0.22881460189819336, "compression_ratio": 1.7416666666666667, "no_speech_prob": 0.08138425648212433}, {"id": 194, "seek": 96118, "start": 972.5, "end": 978.3, "text": " So listed here are the round triple latencies as reported by jack Iodili and the sample", "tokens": [50930, 407, 10052, 510, 366, 264, 3098, 15508, 4465, 6464, 382, 7055, 538, 7109, 286, 378, 2312, 293, 264, 6889, 51220], "temperature": 0.0, "avg_logprob": -0.22881460189819336, "compression_ratio": 1.7416666666666667, "no_speech_prob": 0.08138425648212433}, {"id": 195, "seek": 96118, "start": 978.3, "end": 983.7399999999999, "text": " rate of the device that I used is set to 44.1 kilohertz.", "tokens": [51220, 3314, 295, 264, 4302, 300, 286, 1143, 307, 992, 281, 16408, 13, 16, 21112, 35655, 13, 51492], "temperature": 0.0, "avg_logprob": -0.22881460189819336, "compression_ratio": 1.7416666666666667, "no_speech_prob": 0.08138425648212433}, {"id": 196, "seek": 96118, "start": 983.7399999999999, "end": 989.5799999999999, "text": " So as you can see there, yeah, I have to agree that jack is like topping the charts in low", "tokens": [51492, 407, 382, 291, 393, 536, 456, 11, 1338, 11, 286, 362, 281, 3986, 300, 7109, 307, 411, 36676, 264, 17767, 294, 2295, 51784], "temperature": 0.0, "avg_logprob": -0.22881460189819336, "compression_ratio": 1.7416666666666667, "no_speech_prob": 0.08138425648212433}, {"id": 197, "seek": 98958, "start": 989.6600000000001, "end": 992.82, "text": " latency as expected but that's not my focus.", "tokens": [50368, 27043, 382, 5176, 457, 300, 311, 406, 452, 1879, 13, 50526], "temperature": 0.0, "avg_logprob": -0.16037675024757922, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.009036477655172348}, {"id": 198, "seek": 98958, "start": 992.82, "end": 1000.46, "text": " You can see that the low latency that Piperia offers is quite low and then next we have", "tokens": [50526, 509, 393, 536, 300, 264, 2295, 27043, 300, 430, 15402, 654, 7736, 307, 1596, 2295, 293, 550, 958, 321, 362, 50908], "temperature": 0.0, "avg_logprob": -0.16037675024757922, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.009036477655172348}, {"id": 199, "seek": 98958, "start": 1000.46, "end": 1007.82, "text": " the pulse audio and SDL competing with each other.", "tokens": [50908, 264, 17709, 6278, 293, 14638, 43, 15439, 365, 1184, 661, 13, 51276], "temperature": 0.0, "avg_logprob": -0.16037675024757922, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.009036477655172348}, {"id": 200, "seek": 98958, "start": 1007.82, "end": 1014.7, "text": " So about debugging, while I was working on this audio back end, the GDB was very useful", "tokens": [51276, 407, 466, 45592, 11, 1339, 286, 390, 1364, 322, 341, 6278, 646, 917, 11, 264, 460, 27735, 390, 588, 4420, 51620], "temperature": 0.0, "avg_logprob": -0.16037675024757922, "compression_ratio": 1.418848167539267, "no_speech_prob": 0.009036477655172348}, {"id": 201, "seek": 101470, "start": 1014.7, "end": 1020.22, "text": " because in case you want to examine the state like registers and memory and you want to", "tokens": [50364, 570, 294, 1389, 291, 528, 281, 17496, 264, 1785, 411, 38351, 293, 4675, 293, 291, 528, 281, 50640], "temperature": 0.0, "avg_logprob": -0.16226402282714844, "compression_ratio": 1.8521739130434782, "no_speech_prob": 0.005672832485288382}, {"id": 202, "seek": 101470, "start": 1020.22, "end": 1024.8600000000001, "text": " maybe set break points and watch points you could use it and you could also leverage the", "tokens": [50640, 1310, 992, 1821, 2793, 293, 1159, 2793, 291, 727, 764, 309, 293, 291, 727, 611, 13982, 264, 50872], "temperature": 0.0, "avg_logprob": -0.16226402282714844, "compression_ratio": 1.8521739130434782, "no_speech_prob": 0.005672832485288382}, {"id": 203, "seek": 101470, "start": 1024.8600000000001, "end": 1027.82, "text": " Quemos internal tracing infrastructure.", "tokens": [50872, 2326, 4485, 6920, 25262, 6896, 13, 51020], "temperature": 0.0, "avg_logprob": -0.16226402282714844, "compression_ratio": 1.8521739130434782, "no_speech_prob": 0.005672832485288382}, {"id": 204, "seek": 101470, "start": 1027.82, "end": 1032.66, "text": " So I added a couple of Piperia audio back end trace events that you can use.", "tokens": [51020, 407, 286, 3869, 257, 1916, 295, 430, 15402, 654, 6278, 646, 917, 13508, 3931, 300, 291, 393, 764, 13, 51262], "temperature": 0.0, "avg_logprob": -0.16226402282714844, "compression_ratio": 1.8521739130434782, "no_speech_prob": 0.005672832485288382}, {"id": 205, "seek": 101470, "start": 1032.66, "end": 1036.94, "text": " So these trace events you can configure it on the command line and example of these trace", "tokens": [51262, 407, 613, 13508, 3931, 291, 393, 22162, 309, 322, 264, 5622, 1622, 293, 1365, 295, 613, 13508, 51476], "temperature": 0.0, "avg_logprob": -0.16226402282714844, "compression_ratio": 1.8521739130434782, "no_speech_prob": 0.005672832485288382}, {"id": 206, "seek": 101470, "start": 1036.94, "end": 1040.5, "text": " events is the Piperia writes trace events.", "tokens": [51476, 3931, 307, 264, 430, 15402, 654, 13657, 13508, 3931, 13, 51654], "temperature": 0.0, "avg_logprob": -0.16226402282714844, "compression_ratio": 1.8521739130434782, "no_speech_prob": 0.005672832485288382}, {"id": 207, "seek": 104050, "start": 1040.5, "end": 1045.54, "text": " When you set it, it will show you the length of bytes that's to be written to the buffer.", "tokens": [50364, 1133, 291, 992, 309, 11, 309, 486, 855, 291, 264, 4641, 295, 36088, 300, 311, 281, 312, 3720, 281, 264, 21762, 13, 50616], "temperature": 0.0, "avg_logprob": -0.20194751421610516, "compression_ratio": 1.7722007722007722, "no_speech_prob": 0.017139211297035217}, {"id": 208, "seek": 104050, "start": 1045.54, "end": 1050.02, "text": " It will also show you the available number of bytes that can be written.", "tokens": [50616, 467, 486, 611, 855, 291, 264, 2435, 1230, 295, 36088, 300, 393, 312, 3720, 13, 50840], "temperature": 0.0, "avg_logprob": -0.20194751421610516, "compression_ratio": 1.7722007722007722, "no_speech_prob": 0.017139211297035217}, {"id": 209, "seek": 104050, "start": 1050.02, "end": 1055.14, "text": " And one thing to note here with Quemos is that this, when if you use this, if you enable", "tokens": [50840, 400, 472, 551, 281, 3637, 510, 365, 2326, 4485, 307, 300, 341, 11, 562, 498, 291, 764, 341, 11, 498, 291, 9528, 51096], "temperature": 0.0, "avg_logprob": -0.20194751421610516, "compression_ratio": 1.7722007722007722, "no_speech_prob": 0.017139211297035217}, {"id": 210, "seek": 104050, "start": 1055.14, "end": 1060.1, "text": " this Piperia write trace event, it produces a lot of outputs given that we are copying", "tokens": [51096, 341, 430, 15402, 654, 2464, 13508, 2280, 11, 309, 14725, 257, 688, 295, 23930, 2212, 300, 321, 366, 27976, 51344], "temperature": 0.0, "avg_logprob": -0.20194751421610516, "compression_ratio": 1.7722007722007722, "no_speech_prob": 0.017139211297035217}, {"id": 211, "seek": 104050, "start": 1060.1, "end": 1061.98, "text": " bytes every millisecond.", "tokens": [51344, 36088, 633, 27940, 18882, 13, 51438], "temperature": 0.0, "avg_logprob": -0.20194751421610516, "compression_ratio": 1.7722007722007722, "no_speech_prob": 0.017139211297035217}, {"id": 212, "seek": 104050, "start": 1061.98, "end": 1066.02, "text": " So you should expect to have a very big log file in case you want to enable those trace", "tokens": [51438, 407, 291, 820, 2066, 281, 362, 257, 588, 955, 3565, 3991, 294, 1389, 291, 528, 281, 9528, 729, 13508, 51640], "temperature": 0.0, "avg_logprob": -0.20194751421610516, "compression_ratio": 1.7722007722007722, "no_speech_prob": 0.017139211297035217}, {"id": 213, "seek": 104050, "start": 1066.02, "end": 1067.38, "text": " events.", "tokens": [51640, 3931, 13, 51708], "temperature": 0.0, "avg_logprob": -0.20194751421610516, "compression_ratio": 1.7722007722007722, "no_speech_prob": 0.017139211297035217}, {"id": 214, "seek": 106738, "start": 1067.38, "end": 1072.7800000000002, "text": " And then there is the other tool that is very handy, the Piperia debug login.", "tokens": [50364, 400, 550, 456, 307, 264, 661, 2290, 300, 307, 588, 13239, 11, 264, 430, 15402, 654, 24083, 24276, 13, 50634], "temperature": 0.0, "avg_logprob": -0.1657195524735884, "compression_ratio": 1.6018957345971565, "no_speech_prob": 0.014512020163238049}, {"id": 215, "seek": 106738, "start": 1072.7800000000002, "end": 1078.0600000000002, "text": " You can use it to set different debug levels from 0 to 5 and these levels would help you", "tokens": [50634, 509, 393, 764, 309, 281, 992, 819, 24083, 4358, 490, 1958, 281, 1025, 293, 613, 4358, 576, 854, 291, 50898], "temperature": 0.0, "avg_logprob": -0.1657195524735884, "compression_ratio": 1.6018957345971565, "no_speech_prob": 0.014512020163238049}, {"id": 216, "seek": 106738, "start": 1078.0600000000002, "end": 1084.5800000000002, "text": " to see and have control of the behavior of the Piperia back end or if you were maybe", "tokens": [50898, 281, 536, 293, 362, 1969, 295, 264, 5223, 295, 264, 430, 15402, 654, 646, 917, 420, 498, 291, 645, 1310, 51224], "temperature": 0.0, "avg_logprob": -0.1657195524735884, "compression_ratio": 1.6018957345971565, "no_speech_prob": 0.014512020163238049}, {"id": 217, "seek": 106738, "start": 1084.5800000000002, "end": 1091.18, "text": " using like debugging your own Piperia application.", "tokens": [51224, 1228, 411, 45592, 428, 1065, 430, 15402, 654, 3861, 13, 51554], "temperature": 0.0, "avg_logprob": -0.1657195524735884, "compression_ratio": 1.6018957345971565, "no_speech_prob": 0.014512020163238049}, {"id": 218, "seek": 106738, "start": 1091.18, "end": 1094.5400000000002, "text": " So here I added some helpful links.", "tokens": [51554, 407, 510, 286, 3869, 512, 4961, 6123, 13, 51722], "temperature": 0.0, "avg_logprob": -0.1657195524735884, "compression_ratio": 1.6018957345971565, "no_speech_prob": 0.014512020163238049}, {"id": 219, "seek": 109454, "start": 1094.54, "end": 1100.34, "text": " The first one which is my blog about the Piperia back end and its usage in Quemo.", "tokens": [50364, 440, 700, 472, 597, 307, 452, 6968, 466, 264, 430, 15402, 654, 646, 917, 293, 1080, 14924, 294, 2326, 36221, 13, 50654], "temperature": 0.0, "avg_logprob": -0.17449304792616102, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.1686711609363556}, {"id": 220, "seek": 109454, "start": 1100.34, "end": 1105.3, "text": " The next one was Get Hoffman's blog about the sound configuration changes that were", "tokens": [50654, 440, 958, 472, 390, 3240, 29135, 1601, 311, 6968, 466, 264, 1626, 11694, 2962, 300, 645, 50902], "temperature": 0.0, "avg_logprob": -0.17449304792616102, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.1686711609363556}, {"id": 221, "seek": 109454, "start": 1105.3, "end": 1107.18, "text": " made in Quemo.", "tokens": [50902, 1027, 294, 2326, 36221, 13, 50996], "temperature": 0.0, "avg_logprob": -0.17449304792616102, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.1686711609363556}, {"id": 222, "seek": 109454, "start": 1107.18, "end": 1112.18, "text": " And then we also have like the Quemo invocation that's in case maybe you want to see and know", "tokens": [50996, 400, 550, 321, 611, 362, 411, 264, 2326, 36221, 1048, 27943, 300, 311, 294, 1389, 1310, 291, 528, 281, 536, 293, 458, 51246], "temperature": 0.0, "avg_logprob": -0.17449304792616102, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.1686711609363556}, {"id": 223, "seek": 109454, "start": 1112.18, "end": 1115.82, "text": " how to use these audio back ends or maybe some other audio back ends, you could look", "tokens": [51246, 577, 281, 764, 613, 6278, 646, 5314, 420, 1310, 512, 661, 6278, 646, 5314, 11, 291, 727, 574, 51428], "temperature": 0.0, "avg_logprob": -0.17449304792616102, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.1686711609363556}, {"id": 224, "seek": 109454, "start": 1115.82, "end": 1119.46, "text": " up the Quemo invocation and how to use it.", "tokens": [51428, 493, 264, 2326, 36221, 1048, 27943, 293, 577, 281, 764, 309, 13, 51610], "temperature": 0.0, "avg_logprob": -0.17449304792616102, "compression_ratio": 1.7866666666666666, "no_speech_prob": 0.1686711609363556}, {"id": 225, "seek": 111946, "start": 1120.02, "end": 1125.06, "text": " Then I also added the Piperia's wiki page on performance measurements.", "tokens": [50392, 1396, 286, 611, 3869, 264, 430, 15402, 654, 311, 261, 9850, 3028, 322, 3389, 15383, 13, 50644], "temperature": 0.0, "avg_logprob": -0.254950109154287, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.07842324674129486}, {"id": 226, "seek": 111946, "start": 1125.06, "end": 1130.22, "text": " So it includes scripts that you could use to measure the latency in the different audio", "tokens": [50644, 407, 309, 5974, 23294, 300, 291, 727, 764, 281, 3481, 264, 27043, 294, 264, 819, 6278, 50902], "temperature": 0.0, "avg_logprob": -0.254950109154287, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.07842324674129486}, {"id": 227, "seek": 111946, "start": 1130.22, "end": 1133.74, "text": " back ends like Piperia, Paul, Sodja and Jack.", "tokens": [50902, 646, 5314, 411, 430, 15402, 654, 11, 4552, 11, 42059, 2938, 293, 4718, 13, 51078], "temperature": 0.0, "avg_logprob": -0.254950109154287, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.07842324674129486}, {"id": 228, "seek": 111946, "start": 1133.74, "end": 1139.3400000000001, "text": " And you could also use it to measure the context switches and the CPU cycles, etc.", "tokens": [51078, 400, 291, 727, 611, 764, 309, 281, 3481, 264, 4319, 19458, 293, 264, 13199, 17796, 11, 5183, 13, 51358], "temperature": 0.0, "avg_logprob": -0.254950109154287, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.07842324674129486}, {"id": 229, "seek": 111946, "start": 1139.3400000000001, "end": 1144.18, "text": " So at this point here I would like to give a shout out to Intema and the Piperia maintainer", "tokens": [51358, 407, 412, 341, 935, 510, 286, 576, 411, 281, 976, 257, 8043, 484, 281, 5681, 5619, 293, 264, 430, 15402, 654, 6909, 260, 51600], "temperature": 0.0, "avg_logprob": -0.254950109154287, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.07842324674129486}, {"id": 230, "seek": 114418, "start": 1144.18, "end": 1149.74, "text": " who assisted me while I was working on this back end.", "tokens": [50364, 567, 30291, 385, 1339, 286, 390, 1364, 322, 341, 646, 917, 13, 50642], "temperature": 0.0, "avg_logprob": -0.475183367729187, "compression_ratio": 1.2830188679245282, "no_speech_prob": 0.0588560551404953}, {"id": 231, "seek": 114418, "start": 1149.74, "end": 1150.74, "text": " Thank you.", "tokens": [50642, 1044, 291, 13, 50692], "temperature": 0.0, "avg_logprob": -0.475183367729187, "compression_ratio": 1.2830188679245282, "no_speech_prob": 0.0588560551404953}, {"id": 232, "seek": 114418, "start": 1150.74, "end": 1152.74, "text": " Do you have any questions?", "tokens": [50692, 1144, 291, 362, 604, 1651, 30, 50792], "temperature": 0.0, "avg_logprob": -0.475183367729187, "compression_ratio": 1.2830188679245282, "no_speech_prob": 0.0588560551404953}, {"id": 233, "seek": 114418, "start": 1152.74, "end": 1153.74, "text": " Any questions?", "tokens": [50792, 2639, 1651, 30, 50842], "temperature": 0.0, "avg_logprob": -0.475183367729187, "compression_ratio": 1.2830188679245282, "no_speech_prob": 0.0588560551404953}, {"id": 234, "seek": 114418, "start": 1153.74, "end": 1154.74, "text": " Questions?", "tokens": [50842, 27738, 30, 50892], "temperature": 0.0, "avg_logprob": -0.475183367729187, "compression_ratio": 1.2830188679245282, "no_speech_prob": 0.0588560551404953}, {"id": 235, "seek": 114418, "start": 1154.74, "end": 1155.74, "text": " What was?", "tokens": [50892, 708, 390, 30, 50942], "temperature": 0.0, "avg_logprob": -0.475183367729187, "compression_ratio": 1.2830188679245282, "no_speech_prob": 0.0588560551404953}, {"id": 236, "seek": 114418, "start": 1155.74, "end": 1156.74, "text": " Oh yeah.", "tokens": [50942, 876, 1338, 13, 50992], "temperature": 0.0, "avg_logprob": -0.475183367729187, "compression_ratio": 1.2830188679245282, "no_speech_prob": 0.0588560551404953}, {"id": 237, "seek": 115674, "start": 1156.74, "end": 1181.74, "text": " I'm not curious what applications you tested with the incubators.", "tokens": [50364, 286, 478, 406, 6369, 437, 5821, 291, 8246, 365, 264, 33345, 3391, 13, 51614], "temperature": 0.0, "avg_logprob": -0.9268189037547392, "compression_ratio": 0.9558823529411765, "no_speech_prob": 0.06474382430315018}, {"id": 238, "seek": 118174, "start": 1181.74, "end": 1186.7, "text": " So you're asking what applications in Quemo that I tested with this and how they behave.", "tokens": [50364, 407, 291, 434, 3365, 437, 5821, 294, 2326, 36221, 300, 286, 8246, 365, 341, 293, 577, 436, 15158, 13, 50612], "temperature": 0.0, "avg_logprob": -0.29835499999343706, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.5517346858978271}, {"id": 239, "seek": 118174, "start": 1186.7, "end": 1192.1, "text": " Okay, you could test a couple of applications that's like trying to play audio which maybe", "tokens": [50612, 1033, 11, 291, 727, 1500, 257, 1916, 295, 5821, 300, 311, 411, 1382, 281, 862, 6278, 597, 1310, 50882], "temperature": 0.0, "avg_logprob": -0.29835499999343706, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.5517346858978271}, {"id": 240, "seek": 118174, "start": 1192.1, "end": 1195.9, "text": " you're watching YouTube on your guest.", "tokens": [50882, 291, 434, 1976, 3088, 322, 428, 8341, 13, 51072], "temperature": 0.0, "avg_logprob": -0.29835499999343706, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.5517346858978271}, {"id": 241, "seek": 118174, "start": 1195.9, "end": 1202.58, "text": " But I mostly use the loopback cable and the Jack Iodili tool to measure latency.", "tokens": [51072, 583, 286, 5240, 764, 264, 6367, 3207, 8220, 293, 264, 4718, 286, 378, 2312, 2290, 281, 3481, 27043, 13, 51406], "temperature": 0.0, "avg_logprob": -0.29835499999343706, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.5517346858978271}, {"id": 242, "seek": 118174, "start": 1202.58, "end": 1206.3, "text": " At least that's very effective because you could use it to measure like the CPU cycles", "tokens": [51406, 1711, 1935, 300, 311, 588, 4942, 570, 291, 727, 764, 309, 281, 3481, 411, 264, 13199, 17796, 51592], "temperature": 0.0, "avg_logprob": -0.29835499999343706, "compression_ratio": 1.6150627615062763, "no_speech_prob": 0.5517346858978271}, {"id": 243, "seek": 120630, "start": 1206.3, "end": 1207.3, "text": " as well.", "tokens": [50364, 382, 731, 13, 50414], "temperature": 0.4, "avg_logprob": -0.6499557089298329, "compression_ratio": 1.373913043478261, "no_speech_prob": 0.09886164963245392}, {"id": 244, "seek": 120630, "start": 1207.3, "end": 1213.3, "text": " The latency and you could also measure other like features that you're interested in.", "tokens": [50414, 440, 27043, 293, 291, 727, 611, 3481, 661, 411, 4122, 300, 291, 434, 3102, 294, 13, 50714], "temperature": 0.4, "avg_logprob": -0.6499557089298329, "compression_ratio": 1.373913043478261, "no_speech_prob": 0.09886164963245392}, {"id": 245, "seek": 120630, "start": 1213.3, "end": 1217.1399999999999, "text": " Any other questions?", "tokens": [50714, 2639, 661, 1651, 30, 50906], "temperature": 0.4, "avg_logprob": -0.6499557089298329, "compression_ratio": 1.373913043478261, "no_speech_prob": 0.09886164963245392}, {"id": 246, "seek": 120630, "start": 1217.1399999999999, "end": 1221.44, "text": " Thank you very much.", "tokens": [50906, 1044, 291, 588, 709, 13, 51121], "temperature": 0.4, "avg_logprob": -0.6499557089298329, "compression_ratio": 1.373913043478261, "no_speech_prob": 0.09886164963245392}, {"id": 247, "seek": 120630, "start": 1221.44, "end": 1222.94, "text": " Thank you.", "tokens": [51121, 1044, 291, 13, 51196], "temperature": 0.4, "avg_logprob": -0.6499557089298329, "compression_ratio": 1.373913043478261, "no_speech_prob": 0.09886164963245392}, {"id": 248, "seek": 120630, "start": 1222.94, "end": 1224.0, "text": " Thank you.", "tokens": [51196, 1044, 291, 13, 51249], "temperature": 0.4, "avg_logprob": -0.6499557089298329, "compression_ratio": 1.373913043478261, "no_speech_prob": 0.09886164963245392}], "language": "en"}