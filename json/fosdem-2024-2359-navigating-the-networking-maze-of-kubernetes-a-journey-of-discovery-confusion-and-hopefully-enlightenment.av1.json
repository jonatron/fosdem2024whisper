{"text": " My name is Antonio, I'm a Kubernetes maintainer and working in SIG Network, STL and SIG testing. And my interest here is to show a bit more about the problems that Kubernetes has internally and why something like multi-network are not easy to implement. So Kubernetes started as a container orchestrator platform, right? Excuse me. Hey. Okay, you shut up the light on the top. What is the light? On that one. I think it's there. This one? This one? Okay, I must say to break it down. It's like the meme with the two buttons, right? Which one? And sweaty now. The tableau? Tableau? Let's go with tableau. Okay, okay, okay, good. The tableau. Well, this is the thing. In Kubernetes started as an orchestrator and now it's a big thing and everybody wants to do Kubernetes. And this comic is the best example, right? People just want to throw everything in Kubernetes and magically start to happen. But that doesn't work this way, right? In order to absorb all these new problems to me, right? Kubernetes, what it does is it implemented a plugable architecture. Instead of being everything hard called, we try to define interfaces, APIs. You can see it's here, right? It's common these days to build your custom resource or you can have the CSI to implement your driver and your storage. But you see that something is missing here, right? You don't see CNI. Since Docker seems to be in 1.22, Kubernetes doesn't have any networking capabilities. So all the network is behind the CRI API. So it's left to the containers. And if you went to the DAG multi-network meeting like one hour ago, you can see that the people that implement network plugins has to do a lot of diagnostics with annotations and JSON embedding and all these other things. This is something that we want to solve. But before we go there, is how Kubernetes work is just you have a control plane and then you have all these worker nodes that have resources and you run POS, right? Everything is controlled through the API. Kubernetes at the end is you have a REST API, you define the API and you define the behaviors. And these behaviors are asserted by the E2E test. So when people implement something, they can run the E2E test and validate that they are API. They are implementation match the APIs. With this, you achieve a consistency across the ecosystem, right? A lot of people think, oh, Kubernetes use a lot of IP tables. And that's a big lie because IP tables and Q-proxies and implementation detail, right? The API services. But you can implement the same without IP tables. You can use eBPF, user space, XDP, sockets, whatever. The important thing is you implement the API, you run our E2E test that defines how this should behave, and the user will have the same behavior, independently of what it has behind the scenes. So when we move to the network, you need to think that Kubernetes was created as an application orchestration, right? So it was not created as an infrastructure as a service. And then these consequences, you have three APIs for the network, three primitives that we can say, right? The nodes that are the VMs that run in an infrastructure that can be assumed as a node network. The node network here is not an IP network, right? It's an abstraction, say, it's everything that is connected there. So all the VMs are in a node network. All the pods are in a pod network, right? The pods has this requirement, that's the Kubernetes requirement. Every pod has to be able to talk with another pod without an app. And this is important because this allows all the applications to talk with each other. And pods need to communicate. Pod needs to discover, right? And then we want to hard call all the APIs everywhere. We need to create a set of pods and then expose these pods. And for that, you have services, right? So simplifying, obviously simplifying everything, you can find these three networks in a Kubernetes cluster. If we go one by one, the first network is the node network, right? This is you have a bare metal cluster or a cloud provider, you run your machine, and you have a virtual machine. So this is a virtual machine or a server, right? It has resources, it has interfaces, it has whatever. So the way that this work is for the network side is you have two fields, right? One of the fields is the status. The status is the one that holds the addresses. Something discovers when you start the node, the cube let, that's the component of Kubernetes that runs in the node. It starts to discover all this VM, all this machine, and start to populate these fields, right? All these fields, right? So you have all the addresses. The first thing, okay, let me start back. The first thing that the cube let us is to register the object. So this creates the API object. As we say before, Kubernetes is about API semantics. So once you've registered the object, things start to move. And one of the things is it starts to check for conditions. How much memory, what IP addresses, because this information is going to be needed by other APIs or by other controllers. In addition to this, there are the bootstrapping of the VM is complicated in the sense that it can be controlled by the cube let, or it can be controlled by an external cloud provider. Then the addresses and some of the information that you can be in the API can be populated by this other controller. In addition to this, you also have a field that's a reminiscence from the past that is the POSSIDER. Contrary to what most people think, the POSSIDER is an informative field. So the CNI network plug-in or whatever can use it or may not use it. So in theory, a lot of plug-ins use it, but it doesn't mean that because you have POSSIDER in the spec, you are going to have this SIDER assigned to your POSSIDER. This is one of the problems when you develop APIs and commit these mistakes. This leads to the users and generate confusion. We talked about the node unit initialization first. When the node starts, and we talked about the CNI not being part of Kubernetes. When the node starts, the first thing that you need to do is to check if the network is ready. Because you cannot create POSSIDER, the POSSIDER cannot get IP addresses. So for that, there are two container runtime calls. There is one container runtime call that is network ready. This goes through the CNI API to the container runtime. And the container runtime right now, cryo and container D, the only thing that it does is to check if there is a CNI config file. Just that. You can fake the file and it's going to say that the network is ready. Moving from the nodes to the POSSIDER. This is one of the most tricky parts. The POSSIDER is the minimal unit of work in Kubernetes. So the POSSIDER is created and lives in a network, is able to reach other POSSIDER networks, but this presents a security problem for people. So what we created is the network policy API. That means that you are able to define relations between the POSSIDER. This POSSIDER can talk with each other, this POSSIDER can talk with each other. This is a high level. So what happens when you create a POSSIDER is that a user creates a POSSIDER or a deployment. A deployment is a composition of the POSSIDER API. So this is going to create an object called POD in the API server. The controller, the scheduler is going to see, okay, there is a POD created, but it doesn't have a node assigned. So I'm going to assign this POD to this node because it has resources, whatever constraints that you put there. Then it assigns a node to the POD spec. And the QLED that is watching this POD object and got this POD assigned gets the POD and starts working on it. It starts to create the POD. That's the so-called declarative thing. And how the QLED starts to create the POD is via the CRI API. So it starts to build the CRI API as a JRPC service that is used to communicate between the QLED and the container runtime. So the first thing that it does is to call this RampotSambos call. And in this RampotSambos call, you have networking parameters like DNS, config, PORMAP, hostname. When this goes to the container runtime, as I said before, CRI and containerD, UC and I, but this is not mandatory. You need to create the NegoName space and to create the Nego, right? And once you create that, it goes back and the QLED keeps working. After that, you get the POD IPs from the status response, right? So that's the only thing that the QLED and Kubernetes know about the network. Create a POD and receive the IPs. And this is the big problem that we have right now to start to model multi-network and this other complex network of policies, right? So we cover the nodes, we cover the PODs, and now we need to cover the discovery, right? We have everything running, everything is fine, but we need to implement applications. For that, we created the service API. For the service API, what you do is you are able to define to expose a set of PODs by selecting. To say, okay, I want this POD that implement a web server to be exposed through DNS or through a load balancer, right? So for services, there are like five types of services. One is the cluster IP service. The cluster IP service is kind of a load balancer. You define the set of PODs that you want to expose and you expose via cluster IP, virtual IP and virtual POD. It's just a full forwarding. You have a whole set of options to modify the behavior, but basically that's only that. For node port, this is a way, so right now you have the applications and you need to expose them externally. And for that, you have the node port. The node port is the typical form mapping that we do in our routers to expose something in one internal server, right? You get the IP of the node, a port in the range that doesn't collision with other things in the host, and you expose internally. And then you have the load balancer services. This is different. What it does is it creates the service and waits for external controller to populate a load balancer that is able to send traffic to the PODs inside the cluster. You also have ways to expose the services with DNS. That's the headless service. So basically what it does is it creates a new record, a record that as Bakken has the PODs, right? As the A answers. The way that the Kubernetes service work is when you have a service object with a selector, right? And there is a controller that is watching the PODs. When the QLED creates the PODs, the QLED updates the POD status and the IPs. And so when the POD is ready, this controller is to see, I have a POD that matches this selector of the service, so I need to start to create an important slide for this service. And then when you have the service and the important slides, the proxy implementation, like you proceed, is able to define in the data plane the for load balancer, right? So you have this cluster IP, this virtual IP, this virtual POD, and you have these Bakken. It's just installing rules. One of the most tricky things with services is to do termination, graceful termination, because this, you saw the service type load balancer, the problem is that you need to coordinate synchronally three parts of infrastructure. So the POD has a state. The POD can run, start being creating, start running, and start deleting. But there's some time that you want to do rolling updates. And for that, what you want is, I want to run my new version, but people is still hitting my endpoint. I don't want to lose any package. So for that, you establish a grace period. And this grace period is related to the endpoint slides. And this is used by load balancers to implement serial downtime. So in a common state, you start updating the POD. The POD is still able, you see the run line, is still able to receive traffic at that point because it's terminating. So it's going to be able to answer. But the health check starts failing. So the moment that they start failing, the load balancers start to move this endpoint out of rotation. So the new traffic is only going to the new PODs. Once the new POD is removed and replaced by the new one, the health check starts succeeding again. And it can start to receive new traffic on the new application. As I said before, Kubernetes defines some APIs and others are defined by composition. So you can have a load for load balancer on top of service. There is this ingress API that allows you to use the service of a game and define another layer of abstraction with the seven primitives as HTTP. So you could say this path this way and this path this other way. These APIs were created in the region for some things that are no longer or we carry over some of the problems. Okay, thanks. So as evolution, we have Gateway API that's the new API that has standardized. And the other problem is that Kubernetes itself is portable and all the things that you can see there is the network. So the same thing that you run a POD, you may be running a webhook that interferes when you create the POD with the API call and all this stuff. So this is one of the other problematic. We need to be backwards compatible and support everything. If you want to be more interested in see what is going on, we have a public dashboard so you can read the caption what is going next. Okay, sorry. Sorry, we are behind schedule so no questions. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.0, "text": " My name is Antonio, I'm a Kubernetes maintainer and working in SIG Network, STL and SIG testing.", "tokens": [50364, 1222, 1315, 307, 22527, 11, 286, 478, 257, 23145, 6909, 260, 293, 1364, 294, 318, 10489, 12640, 11, 4904, 43, 293, 318, 10489, 4997, 13, 51014], "temperature": 0.0, "avg_logprob": -0.33430948853492737, "compression_ratio": 1.4457142857142857, "no_speech_prob": 0.3890446722507477}, {"id": 1, "seek": 0, "start": 13.0, "end": 19.56, "text": " And my interest here is to show a bit more about the problems that Kubernetes has internally", "tokens": [51014, 400, 452, 1179, 510, 307, 281, 855, 257, 857, 544, 466, 264, 2740, 300, 23145, 575, 19501, 51342], "temperature": 0.0, "avg_logprob": -0.33430948853492737, "compression_ratio": 1.4457142857142857, "no_speech_prob": 0.3890446722507477}, {"id": 2, "seek": 0, "start": 19.56, "end": 25.240000000000002, "text": " and why something like multi-network are not easy to implement.", "tokens": [51342, 293, 983, 746, 411, 4825, 12, 7129, 1902, 366, 406, 1858, 281, 4445, 13, 51626], "temperature": 0.0, "avg_logprob": -0.33430948853492737, "compression_ratio": 1.4457142857142857, "no_speech_prob": 0.3890446722507477}, {"id": 3, "seek": 2524, "start": 25.24, "end": 31.24, "text": " So Kubernetes started as a container orchestrator platform, right?", "tokens": [50364, 407, 23145, 1409, 382, 257, 10129, 14161, 19802, 3663, 11, 558, 30, 50664], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 4, "seek": 2524, "start": 31.24, "end": 32.239999999999995, "text": " Excuse me.", "tokens": [50664, 11359, 385, 13, 50714], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 5, "seek": 2524, "start": 32.239999999999995, "end": 33.239999999999995, "text": " Hey.", "tokens": [50714, 1911, 13, 50764], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 6, "seek": 2524, "start": 33.239999999999995, "end": 35.239999999999995, "text": " Okay, you shut up the light on the top.", "tokens": [50764, 1033, 11, 291, 5309, 493, 264, 1442, 322, 264, 1192, 13, 50864], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 7, "seek": 2524, "start": 35.239999999999995, "end": 37.239999999999995, "text": " What is the light?", "tokens": [50864, 708, 307, 264, 1442, 30, 50964], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 8, "seek": 2524, "start": 37.239999999999995, "end": 39.239999999999995, "text": " On that one.", "tokens": [50964, 1282, 300, 472, 13, 51064], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 9, "seek": 2524, "start": 39.239999999999995, "end": 41.239999999999995, "text": " I think it's there.", "tokens": [51064, 286, 519, 309, 311, 456, 13, 51164], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 10, "seek": 2524, "start": 41.239999999999995, "end": 43.239999999999995, "text": " This one?", "tokens": [51164, 639, 472, 30, 51264], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 11, "seek": 2524, "start": 43.239999999999995, "end": 45.239999999999995, "text": " This one?", "tokens": [51264, 639, 472, 30, 51364], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 12, "seek": 2524, "start": 45.239999999999995, "end": 50.239999999999995, "text": " Okay, I must say to break it down.", "tokens": [51364, 1033, 11, 286, 1633, 584, 281, 1821, 309, 760, 13, 51614], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 13, "seek": 2524, "start": 50.239999999999995, "end": 53.239999999999995, "text": " It's like the meme with the two buttons, right?", "tokens": [51614, 467, 311, 411, 264, 21701, 365, 264, 732, 9905, 11, 558, 30, 51764], "temperature": 0.0, "avg_logprob": -0.429104293020148, "compression_ratio": 1.4972972972972973, "no_speech_prob": 0.14681097865104675}, {"id": 14, "seek": 5324, "start": 53.24, "end": 54.24, "text": " Which one?", "tokens": [50364, 3013, 472, 30, 50414], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 15, "seek": 5324, "start": 54.24, "end": 55.24, "text": " And sweaty now.", "tokens": [50414, 400, 36044, 586, 13, 50464], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 16, "seek": 5324, "start": 55.24, "end": 56.24, "text": " The tableau?", "tokens": [50464, 440, 3199, 1459, 30, 50514], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 17, "seek": 5324, "start": 56.24, "end": 57.24, "text": " Tableau?", "tokens": [50514, 25535, 1459, 30, 50564], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 18, "seek": 5324, "start": 57.24, "end": 58.24, "text": " Let's go with tableau.", "tokens": [50564, 961, 311, 352, 365, 3199, 1459, 13, 50614], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 19, "seek": 5324, "start": 58.24, "end": 59.24, "text": " Okay, okay, okay, good.", "tokens": [50614, 1033, 11, 1392, 11, 1392, 11, 665, 13, 50664], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 20, "seek": 5324, "start": 59.24, "end": 60.24, "text": " The tableau.", "tokens": [50664, 440, 3199, 1459, 13, 50714], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 21, "seek": 5324, "start": 60.24, "end": 65.24000000000001, "text": " Well, this is the thing.", "tokens": [50714, 1042, 11, 341, 307, 264, 551, 13, 50964], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 22, "seek": 5324, "start": 65.24000000000001, "end": 72.24000000000001, "text": " In Kubernetes started as an orchestrator and now it's a big thing and everybody wants to do Kubernetes.", "tokens": [50964, 682, 23145, 1409, 382, 364, 14161, 19802, 293, 586, 309, 311, 257, 955, 551, 293, 2201, 2738, 281, 360, 23145, 13, 51314], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 23, "seek": 5324, "start": 72.24000000000001, "end": 74.24000000000001, "text": " And this comic is the best example, right?", "tokens": [51314, 400, 341, 13900, 307, 264, 1151, 1365, 11, 558, 30, 51414], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 24, "seek": 5324, "start": 74.24000000000001, "end": 79.24000000000001, "text": " People just want to throw everything in Kubernetes and magically start to happen.", "tokens": [51414, 3432, 445, 528, 281, 3507, 1203, 294, 23145, 293, 39763, 722, 281, 1051, 13, 51664], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 25, "seek": 5324, "start": 79.24000000000001, "end": 82.24000000000001, "text": " But that doesn't work this way, right?", "tokens": [51664, 583, 300, 1177, 380, 589, 341, 636, 11, 558, 30, 51814], "temperature": 0.0, "avg_logprob": -0.22967478854597106, "compression_ratio": 1.684873949579832, "no_speech_prob": 0.02039753645658493}, {"id": 26, "seek": 8224, "start": 82.24, "end": 85.24, "text": " In order to absorb all these new problems to me, right?", "tokens": [50364, 682, 1668, 281, 15631, 439, 613, 777, 2740, 281, 385, 11, 558, 30, 50514], "temperature": 0.0, "avg_logprob": -0.1594658247921445, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.039751142263412476}, {"id": 27, "seek": 8224, "start": 85.24, "end": 89.24, "text": " Kubernetes, what it does is it implemented a plugable architecture.", "tokens": [50514, 23145, 11, 437, 309, 775, 307, 309, 12270, 257, 5452, 712, 9482, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1594658247921445, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.039751142263412476}, {"id": 28, "seek": 8224, "start": 89.24, "end": 94.24, "text": " Instead of being everything hard called, we try to define interfaces, APIs.", "tokens": [50714, 7156, 295, 885, 1203, 1152, 1219, 11, 321, 853, 281, 6964, 28416, 11, 21445, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1594658247921445, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.039751142263412476}, {"id": 29, "seek": 8224, "start": 94.24, "end": 96.24, "text": " You can see it's here, right?", "tokens": [50964, 509, 393, 536, 309, 311, 510, 11, 558, 30, 51064], "temperature": 0.0, "avg_logprob": -0.1594658247921445, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.039751142263412476}, {"id": 30, "seek": 8224, "start": 96.24, "end": 104.24, "text": " It's common these days to build your custom resource or you can have the CSI to implement your driver and your storage.", "tokens": [51064, 467, 311, 2689, 613, 1708, 281, 1322, 428, 2375, 7684, 420, 291, 393, 362, 264, 9460, 40, 281, 4445, 428, 6787, 293, 428, 6725, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1594658247921445, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.039751142263412476}, {"id": 31, "seek": 8224, "start": 104.24, "end": 107.24, "text": " But you see that something is missing here, right?", "tokens": [51464, 583, 291, 536, 300, 746, 307, 5361, 510, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.1594658247921445, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.039751142263412476}, {"id": 32, "seek": 8224, "start": 107.24, "end": 108.24, "text": " You don't see CNI.", "tokens": [51614, 509, 500, 380, 536, 14589, 40, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1594658247921445, "compression_ratio": 1.6115384615384616, "no_speech_prob": 0.039751142263412476}, {"id": 33, "seek": 10824, "start": 108.24, "end": 114.24, "text": " Since Docker seems to be in 1.22, Kubernetes doesn't have any networking capabilities.", "tokens": [50364, 4162, 33772, 2544, 281, 312, 294, 502, 13, 7490, 11, 23145, 1177, 380, 362, 604, 17985, 10862, 13, 50664], "temperature": 0.0, "avg_logprob": -0.18742992721985433, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.021961594000458717}, {"id": 34, "seek": 10824, "start": 114.24, "end": 118.24, "text": " So all the network is behind the CRI API.", "tokens": [50664, 407, 439, 264, 3209, 307, 2261, 264, 14123, 40, 9362, 13, 50864], "temperature": 0.0, "avg_logprob": -0.18742992721985433, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.021961594000458717}, {"id": 35, "seek": 10824, "start": 118.24, "end": 119.24, "text": " So it's left to the containers.", "tokens": [50864, 407, 309, 311, 1411, 281, 264, 17089, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18742992721985433, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.021961594000458717}, {"id": 36, "seek": 10824, "start": 119.24, "end": 132.24, "text": " And if you went to the DAG multi-network meeting like one hour ago, you can see that the people that implement network plugins has to do a lot of diagnostics with annotations and JSON embedding and all these other things.", "tokens": [50914, 400, 498, 291, 1437, 281, 264, 9578, 38, 4825, 12, 7129, 1902, 3440, 411, 472, 1773, 2057, 11, 291, 393, 536, 300, 264, 561, 300, 4445, 3209, 33759, 575, 281, 360, 257, 688, 295, 43215, 1167, 365, 25339, 763, 293, 31828, 12240, 3584, 293, 439, 613, 661, 721, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18742992721985433, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.021961594000458717}, {"id": 37, "seek": 10824, "start": 132.24, "end": 135.24, "text": " This is something that we want to solve.", "tokens": [51564, 639, 307, 746, 300, 321, 528, 281, 5039, 13, 51714], "temperature": 0.0, "avg_logprob": -0.18742992721985433, "compression_ratio": 1.5666666666666667, "no_speech_prob": 0.021961594000458717}, {"id": 38, "seek": 13524, "start": 135.24, "end": 146.24, "text": " But before we go there, is how Kubernetes work is just you have a control plane and then you have all these worker nodes that have resources and you run POS, right?", "tokens": [50364, 583, 949, 321, 352, 456, 11, 307, 577, 23145, 589, 307, 445, 291, 362, 257, 1969, 5720, 293, 550, 291, 362, 439, 613, 11346, 13891, 300, 362, 3593, 293, 291, 1190, 430, 4367, 11, 558, 30, 50914], "temperature": 0.0, "avg_logprob": -0.1385897397994995, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.014427166432142258}, {"id": 39, "seek": 13524, "start": 146.24, "end": 149.24, "text": " Everything is controlled through the API.", "tokens": [50914, 5471, 307, 10164, 807, 264, 9362, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1385897397994995, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.014427166432142258}, {"id": 40, "seek": 13524, "start": 149.24, "end": 154.24, "text": " Kubernetes at the end is you have a REST API, you define the API and you define the behaviors.", "tokens": [51064, 23145, 412, 264, 917, 307, 291, 362, 257, 497, 14497, 9362, 11, 291, 6964, 264, 9362, 293, 291, 6964, 264, 15501, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1385897397994995, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.014427166432142258}, {"id": 41, "seek": 13524, "start": 154.24, "end": 159.24, "text": " And these behaviors are asserted by the E2E test.", "tokens": [51314, 400, 613, 15501, 366, 19810, 292, 538, 264, 462, 17, 36, 1500, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1385897397994995, "compression_ratio": 1.6714285714285715, "no_speech_prob": 0.014427166432142258}, {"id": 42, "seek": 15924, "start": 159.24, "end": 166.24, "text": " So when people implement something, they can run the E2E test and validate that they are API.", "tokens": [50364, 407, 562, 561, 4445, 746, 11, 436, 393, 1190, 264, 462, 17, 36, 1500, 293, 29562, 300, 436, 366, 9362, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16214075794926397, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.07994002103805542}, {"id": 43, "seek": 15924, "start": 166.24, "end": 170.24, "text": " They are implementation match the APIs.", "tokens": [50714, 814, 366, 11420, 2995, 264, 21445, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16214075794926397, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.07994002103805542}, {"id": 44, "seek": 15924, "start": 170.24, "end": 174.24, "text": " With this, you achieve a consistency across the ecosystem, right?", "tokens": [50914, 2022, 341, 11, 291, 4584, 257, 14416, 2108, 264, 11311, 11, 558, 30, 51114], "temperature": 0.0, "avg_logprob": -0.16214075794926397, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.07994002103805542}, {"id": 45, "seek": 15924, "start": 174.24, "end": 178.24, "text": " A lot of people think, oh, Kubernetes use a lot of IP tables.", "tokens": [51114, 316, 688, 295, 561, 519, 11, 1954, 11, 23145, 764, 257, 688, 295, 8671, 8020, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16214075794926397, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.07994002103805542}, {"id": 46, "seek": 15924, "start": 178.24, "end": 183.24, "text": " And that's a big lie because IP tables and Q-proxies and implementation detail, right?", "tokens": [51314, 400, 300, 311, 257, 955, 4544, 570, 8671, 8020, 293, 1249, 12, 4318, 87, 530, 293, 11420, 2607, 11, 558, 30, 51564], "temperature": 0.0, "avg_logprob": -0.16214075794926397, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.07994002103805542}, {"id": 47, "seek": 15924, "start": 183.24, "end": 184.24, "text": " The API services.", "tokens": [51564, 440, 9362, 3328, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16214075794926397, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.07994002103805542}, {"id": 48, "seek": 15924, "start": 184.24, "end": 187.24, "text": " But you can implement the same without IP tables.", "tokens": [51614, 583, 291, 393, 4445, 264, 912, 1553, 8671, 8020, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16214075794926397, "compression_ratio": 1.6706827309236947, "no_speech_prob": 0.07994002103805542}, {"id": 49, "seek": 18724, "start": 187.24, "end": 191.24, "text": " You can use eBPF, user space, XDP, sockets, whatever.", "tokens": [50364, 509, 393, 764, 308, 33, 47, 37, 11, 4195, 1901, 11, 1783, 11373, 11, 370, 11984, 11, 2035, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17093569167116854, "compression_ratio": 1.5145228215767634, "no_speech_prob": 0.00783149991184473}, {"id": 50, "seek": 18724, "start": 191.24, "end": 200.24, "text": " The important thing is you implement the API, you run our E2E test that defines how this should behave, and the user will have the same behavior,", "tokens": [50564, 440, 1021, 551, 307, 291, 4445, 264, 9362, 11, 291, 1190, 527, 462, 17, 36, 1500, 300, 23122, 577, 341, 820, 15158, 11, 293, 264, 4195, 486, 362, 264, 912, 5223, 11, 51014], "temperature": 0.0, "avg_logprob": -0.17093569167116854, "compression_ratio": 1.5145228215767634, "no_speech_prob": 0.00783149991184473}, {"id": 51, "seek": 18724, "start": 200.24, "end": 205.24, "text": " independently of what it has behind the scenes.", "tokens": [51014, 21761, 295, 437, 309, 575, 2261, 264, 8026, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17093569167116854, "compression_ratio": 1.5145228215767634, "no_speech_prob": 0.00783149991184473}, {"id": 52, "seek": 18724, "start": 205.24, "end": 213.24, "text": " So when we move to the network, you need to think that Kubernetes was created as an application orchestration, right?", "tokens": [51264, 407, 562, 321, 1286, 281, 264, 3209, 11, 291, 643, 281, 519, 300, 23145, 390, 2942, 382, 364, 3861, 14161, 2405, 11, 558, 30, 51664], "temperature": 0.0, "avg_logprob": -0.17093569167116854, "compression_ratio": 1.5145228215767634, "no_speech_prob": 0.00783149991184473}, {"id": 53, "seek": 21324, "start": 213.24, "end": 217.24, "text": " So it was not created as an infrastructure as a service.", "tokens": [50364, 407, 309, 390, 406, 2942, 382, 364, 6896, 382, 257, 2643, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1468602418899536, "compression_ratio": 1.5696969696969696, "no_speech_prob": 0.017095191404223442}, {"id": 54, "seek": 21324, "start": 217.24, "end": 229.24, "text": " And then these consequences, you have three APIs for the network, three primitives that we can say, right?", "tokens": [50564, 400, 550, 613, 10098, 11, 291, 362, 1045, 21445, 337, 264, 3209, 11, 1045, 2886, 38970, 300, 321, 393, 584, 11, 558, 30, 51164], "temperature": 0.0, "avg_logprob": -0.1468602418899536, "compression_ratio": 1.5696969696969696, "no_speech_prob": 0.017095191404223442}, {"id": 55, "seek": 21324, "start": 229.24, "end": 237.24, "text": " The nodes that are the VMs that run in an infrastructure that can be assumed as a node network.", "tokens": [51164, 440, 13891, 300, 366, 264, 18038, 82, 300, 1190, 294, 364, 6896, 300, 393, 312, 15895, 382, 257, 9984, 3209, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1468602418899536, "compression_ratio": 1.5696969696969696, "no_speech_prob": 0.017095191404223442}, {"id": 56, "seek": 23724, "start": 237.24, "end": 239.24, "text": " The node network here is not an IP network, right?", "tokens": [50364, 440, 9984, 3209, 510, 307, 406, 364, 8671, 3209, 11, 558, 30, 50464], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 57, "seek": 23724, "start": 239.24, "end": 243.24, "text": " It's an abstraction, say, it's everything that is connected there.", "tokens": [50464, 467, 311, 364, 37765, 11, 584, 11, 309, 311, 1203, 300, 307, 4582, 456, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 58, "seek": 23724, "start": 243.24, "end": 246.24, "text": " So all the VMs are in a node network.", "tokens": [50664, 407, 439, 264, 18038, 82, 366, 294, 257, 9984, 3209, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 59, "seek": 23724, "start": 246.24, "end": 249.24, "text": " All the pods are in a pod network, right?", "tokens": [50814, 1057, 264, 31925, 366, 294, 257, 2497, 3209, 11, 558, 30, 50964], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 60, "seek": 23724, "start": 249.24, "end": 253.24, "text": " The pods has this requirement, that's the Kubernetes requirement.", "tokens": [50964, 440, 31925, 575, 341, 11695, 11, 300, 311, 264, 23145, 11695, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 61, "seek": 23724, "start": 253.24, "end": 256.24, "text": " Every pod has to be able to talk with another pod without an app.", "tokens": [51164, 2048, 2497, 575, 281, 312, 1075, 281, 751, 365, 1071, 2497, 1553, 364, 724, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 62, "seek": 23724, "start": 256.24, "end": 261.24, "text": " And this is important because this allows all the applications to talk with each other.", "tokens": [51314, 400, 341, 307, 1021, 570, 341, 4045, 439, 264, 5821, 281, 751, 365, 1184, 661, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 63, "seek": 23724, "start": 261.24, "end": 263.24, "text": " And pods need to communicate.", "tokens": [51564, 400, 31925, 643, 281, 7890, 13, 51664], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 64, "seek": 23724, "start": 263.24, "end": 266.24, "text": " Pod needs to discover, right?", "tokens": [51664, 12646, 2203, 281, 4411, 11, 558, 30, 51814], "temperature": 0.0, "avg_logprob": -0.14476889038085938, "compression_ratio": 1.8275862068965518, "no_speech_prob": 0.20933929085731506}, {"id": 65, "seek": 26624, "start": 266.24, "end": 268.24, "text": " And then we want to hard call all the APIs everywhere.", "tokens": [50364, 400, 550, 321, 528, 281, 1152, 818, 439, 264, 21445, 5315, 13, 50464], "temperature": 0.0, "avg_logprob": -0.16221180983952113, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.012264518067240715}, {"id": 66, "seek": 26624, "start": 268.24, "end": 272.24, "text": " We need to create a set of pods and then expose these pods.", "tokens": [50464, 492, 643, 281, 1884, 257, 992, 295, 31925, 293, 550, 19219, 613, 31925, 13, 50664], "temperature": 0.0, "avg_logprob": -0.16221180983952113, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.012264518067240715}, {"id": 67, "seek": 26624, "start": 272.24, "end": 275.24, "text": " And for that, you have services, right?", "tokens": [50664, 400, 337, 300, 11, 291, 362, 3328, 11, 558, 30, 50814], "temperature": 0.0, "avg_logprob": -0.16221180983952113, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.012264518067240715}, {"id": 68, "seek": 26624, "start": 275.24, "end": 283.24, "text": " So simplifying, obviously simplifying everything, you can find these three networks in a Kubernetes cluster.", "tokens": [50814, 407, 6883, 5489, 11, 2745, 6883, 5489, 1203, 11, 291, 393, 915, 613, 1045, 9590, 294, 257, 23145, 13630, 13, 51214], "temperature": 0.0, "avg_logprob": -0.16221180983952113, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.012264518067240715}, {"id": 69, "seek": 26624, "start": 283.24, "end": 287.24, "text": " If we go one by one, the first network is the node network, right?", "tokens": [51214, 759, 321, 352, 472, 538, 472, 11, 264, 700, 3209, 307, 264, 9984, 3209, 11, 558, 30, 51414], "temperature": 0.0, "avg_logprob": -0.16221180983952113, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.012264518067240715}, {"id": 70, "seek": 26624, "start": 287.24, "end": 295.24, "text": " This is you have a bare metal cluster or a cloud provider, you run your machine, and you have a virtual machine.", "tokens": [51414, 639, 307, 291, 362, 257, 6949, 5760, 13630, 420, 257, 4588, 12398, 11, 291, 1190, 428, 3479, 11, 293, 291, 362, 257, 6374, 3479, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16221180983952113, "compression_ratio": 1.7170542635658914, "no_speech_prob": 0.012264518067240715}, {"id": 71, "seek": 29524, "start": 295.24, "end": 298.24, "text": " So this is a virtual machine or a server, right?", "tokens": [50364, 407, 341, 307, 257, 6374, 3479, 420, 257, 7154, 11, 558, 30, 50514], "temperature": 0.0, "avg_logprob": -0.11366034999038234, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.02494879812002182}, {"id": 72, "seek": 29524, "start": 298.24, "end": 302.24, "text": " It has resources, it has interfaces, it has whatever.", "tokens": [50514, 467, 575, 3593, 11, 309, 575, 28416, 11, 309, 575, 2035, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11366034999038234, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.02494879812002182}, {"id": 73, "seek": 29524, "start": 302.24, "end": 308.24, "text": " So the way that this work is for the network side is you have two fields, right?", "tokens": [50714, 407, 264, 636, 300, 341, 589, 307, 337, 264, 3209, 1252, 307, 291, 362, 732, 7909, 11, 558, 30, 51014], "temperature": 0.0, "avg_logprob": -0.11366034999038234, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.02494879812002182}, {"id": 74, "seek": 29524, "start": 308.24, "end": 313.24, "text": " One of the fields is the status.", "tokens": [51014, 1485, 295, 264, 7909, 307, 264, 6558, 13, 51264], "temperature": 0.0, "avg_logprob": -0.11366034999038234, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.02494879812002182}, {"id": 75, "seek": 29524, "start": 313.24, "end": 315.24, "text": " The status is the one that holds the addresses.", "tokens": [51264, 440, 6558, 307, 264, 472, 300, 9190, 264, 16862, 13, 51364], "temperature": 0.0, "avg_logprob": -0.11366034999038234, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.02494879812002182}, {"id": 76, "seek": 29524, "start": 315.24, "end": 322.24, "text": " Something discovers when you start the node, the cube let, that's the component of Kubernetes that runs in the node.", "tokens": [51364, 6595, 44522, 562, 291, 722, 264, 9984, 11, 264, 13728, 718, 11, 300, 311, 264, 6542, 295, 23145, 300, 6676, 294, 264, 9984, 13, 51714], "temperature": 0.0, "avg_logprob": -0.11366034999038234, "compression_ratio": 1.7162162162162162, "no_speech_prob": 0.02494879812002182}, {"id": 77, "seek": 32224, "start": 322.24, "end": 329.24, "text": " It starts to discover all this VM, all this machine, and start to populate these fields, right?", "tokens": [50364, 467, 3719, 281, 4411, 439, 341, 18038, 11, 439, 341, 3479, 11, 293, 722, 281, 1665, 5256, 613, 7909, 11, 558, 30, 50714], "temperature": 0.0, "avg_logprob": -0.17316780090332032, "compression_ratio": 1.7478260869565216, "no_speech_prob": 0.02816198393702507}, {"id": 78, "seek": 32224, "start": 329.24, "end": 330.24, "text": " All these fields, right?", "tokens": [50714, 1057, 613, 7909, 11, 558, 30, 50764], "temperature": 0.0, "avg_logprob": -0.17316780090332032, "compression_ratio": 1.7478260869565216, "no_speech_prob": 0.02816198393702507}, {"id": 79, "seek": 32224, "start": 330.24, "end": 333.24, "text": " So you have all the addresses.", "tokens": [50764, 407, 291, 362, 439, 264, 16862, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17316780090332032, "compression_ratio": 1.7478260869565216, "no_speech_prob": 0.02816198393702507}, {"id": 80, "seek": 32224, "start": 333.24, "end": 335.24, "text": " The first thing, okay, let me start back.", "tokens": [50914, 440, 700, 551, 11, 1392, 11, 718, 385, 722, 646, 13, 51014], "temperature": 0.0, "avg_logprob": -0.17316780090332032, "compression_ratio": 1.7478260869565216, "no_speech_prob": 0.02816198393702507}, {"id": 81, "seek": 32224, "start": 335.24, "end": 338.24, "text": " The first thing that the cube let us is to register the object.", "tokens": [51014, 440, 700, 551, 300, 264, 13728, 718, 505, 307, 281, 7280, 264, 2657, 13, 51164], "temperature": 0.0, "avg_logprob": -0.17316780090332032, "compression_ratio": 1.7478260869565216, "no_speech_prob": 0.02816198393702507}, {"id": 82, "seek": 32224, "start": 338.24, "end": 340.24, "text": " So this creates the API object.", "tokens": [51164, 407, 341, 7829, 264, 9362, 2657, 13, 51264], "temperature": 0.0, "avg_logprob": -0.17316780090332032, "compression_ratio": 1.7478260869565216, "no_speech_prob": 0.02816198393702507}, {"id": 83, "seek": 32224, "start": 340.24, "end": 344.24, "text": " As we say before, Kubernetes is about API semantics.", "tokens": [51264, 1018, 321, 584, 949, 11, 23145, 307, 466, 9362, 4361, 45298, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17316780090332032, "compression_ratio": 1.7478260869565216, "no_speech_prob": 0.02816198393702507}, {"id": 84, "seek": 32224, "start": 344.24, "end": 348.24, "text": " So once you've registered the object, things start to move.", "tokens": [51464, 407, 1564, 291, 600, 13968, 264, 2657, 11, 721, 722, 281, 1286, 13, 51664], "temperature": 0.0, "avg_logprob": -0.17316780090332032, "compression_ratio": 1.7478260869565216, "no_speech_prob": 0.02816198393702507}, {"id": 85, "seek": 34824, "start": 348.24, "end": 352.24, "text": " And one of the things is it starts to check for conditions.", "tokens": [50364, 400, 472, 295, 264, 721, 307, 309, 3719, 281, 1520, 337, 4487, 13, 50564], "temperature": 0.0, "avg_logprob": -0.15679735424874844, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.01758645288646221}, {"id": 86, "seek": 34824, "start": 352.24, "end": 359.24, "text": " How much memory, what IP addresses, because this information is going to be needed by other APIs or by other controllers.", "tokens": [50564, 1012, 709, 4675, 11, 437, 8671, 16862, 11, 570, 341, 1589, 307, 516, 281, 312, 2978, 538, 661, 21445, 420, 538, 661, 26903, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15679735424874844, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.01758645288646221}, {"id": 87, "seek": 34824, "start": 359.24, "end": 369.24, "text": " In addition to this, there are the bootstrapping of the VM is complicated in the sense that it can be controlled by the cube let,", "tokens": [50914, 682, 4500, 281, 341, 11, 456, 366, 264, 11450, 19639, 3759, 295, 264, 18038, 307, 6179, 294, 264, 2020, 300, 309, 393, 312, 10164, 538, 264, 13728, 718, 11, 51414], "temperature": 0.0, "avg_logprob": -0.15679735424874844, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.01758645288646221}, {"id": 88, "seek": 34824, "start": 369.24, "end": 372.24, "text": " or it can be controlled by an external cloud provider.", "tokens": [51414, 420, 309, 393, 312, 10164, 538, 364, 8320, 4588, 12398, 13, 51564], "temperature": 0.0, "avg_logprob": -0.15679735424874844, "compression_ratio": 1.6636363636363636, "no_speech_prob": 0.01758645288646221}, {"id": 89, "seek": 37224, "start": 372.24, "end": 383.24, "text": " Then the addresses and some of the information that you can be in the API can be populated by this other controller.", "tokens": [50364, 1396, 264, 16862, 293, 512, 295, 264, 1589, 300, 291, 393, 312, 294, 264, 9362, 393, 312, 32998, 538, 341, 661, 10561, 13, 50914], "temperature": 0.0, "avg_logprob": -0.17328290939331054, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.038306403905153275}, {"id": 90, "seek": 37224, "start": 383.24, "end": 391.24, "text": " In addition to this, you also have a field that's a reminiscence from the past that is the POSSIDER.", "tokens": [50914, 682, 4500, 281, 341, 11, 291, 611, 362, 257, 2519, 300, 311, 257, 890, 259, 5606, 655, 490, 264, 1791, 300, 307, 264, 430, 4367, 50, 2777, 1598, 13, 51314], "temperature": 0.0, "avg_logprob": -0.17328290939331054, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.038306403905153275}, {"id": 91, "seek": 37224, "start": 391.24, "end": 396.24, "text": " Contrary to what most people think, the POSSIDER is an informative field.", "tokens": [51314, 4839, 81, 822, 281, 437, 881, 561, 519, 11, 264, 430, 4367, 50, 2777, 1598, 307, 364, 27759, 2519, 13, 51564], "temperature": 0.0, "avg_logprob": -0.17328290939331054, "compression_ratio": 1.547872340425532, "no_speech_prob": 0.038306403905153275}, {"id": 92, "seek": 39624, "start": 396.24, "end": 402.24, "text": " So the CNI network plug-in or whatever can use it or may not use it.", "tokens": [50364, 407, 264, 14589, 40, 3209, 5452, 12, 259, 420, 2035, 393, 764, 309, 420, 815, 406, 764, 309, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14619287160726693, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.1138162761926651}, {"id": 93, "seek": 39624, "start": 402.24, "end": 409.24, "text": " So in theory, a lot of plug-ins use it, but it doesn't mean that because you have POSSIDER in the spec,", "tokens": [50664, 407, 294, 5261, 11, 257, 688, 295, 5452, 12, 1292, 764, 309, 11, 457, 309, 1177, 380, 914, 300, 570, 291, 362, 430, 4367, 50, 2777, 1598, 294, 264, 1608, 11, 51014], "temperature": 0.0, "avg_logprob": -0.14619287160726693, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.1138162761926651}, {"id": 94, "seek": 39624, "start": 409.24, "end": 413.24, "text": " you are going to have this SIDER assigned to your POSSIDER.", "tokens": [51014, 291, 366, 516, 281, 362, 341, 318, 2777, 1598, 13279, 281, 428, 430, 4367, 50, 2777, 1598, 13, 51214], "temperature": 0.0, "avg_logprob": -0.14619287160726693, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.1138162761926651}, {"id": 95, "seek": 39624, "start": 413.24, "end": 420.24, "text": " This is one of the problems when you develop APIs and commit these mistakes.", "tokens": [51214, 639, 307, 472, 295, 264, 2740, 562, 291, 1499, 21445, 293, 5599, 613, 8038, 13, 51564], "temperature": 0.0, "avg_logprob": -0.14619287160726693, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.1138162761926651}, {"id": 96, "seek": 39624, "start": 420.24, "end": 425.24, "text": " This leads to the users and generate confusion.", "tokens": [51564, 639, 6689, 281, 264, 5022, 293, 8460, 15075, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14619287160726693, "compression_ratio": 1.5726872246696035, "no_speech_prob": 0.1138162761926651}, {"id": 97, "seek": 42524, "start": 425.24, "end": 430.24, "text": " We talked about the node unit initialization first.", "tokens": [50364, 492, 2825, 466, 264, 9984, 4985, 5883, 2144, 700, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1902652455267505, "compression_ratio": 1.8026315789473684, "no_speech_prob": 0.06242502108216286}, {"id": 98, "seek": 42524, "start": 430.24, "end": 435.24, "text": " When the node starts, and we talked about the CNI not being part of Kubernetes.", "tokens": [50614, 1133, 264, 9984, 3719, 11, 293, 321, 2825, 466, 264, 14589, 40, 406, 885, 644, 295, 23145, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1902652455267505, "compression_ratio": 1.8026315789473684, "no_speech_prob": 0.06242502108216286}, {"id": 99, "seek": 42524, "start": 435.24, "end": 440.24, "text": " When the node starts, the first thing that you need to do is to check if the network is ready.", "tokens": [50864, 1133, 264, 9984, 3719, 11, 264, 700, 551, 300, 291, 643, 281, 360, 307, 281, 1520, 498, 264, 3209, 307, 1919, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1902652455267505, "compression_ratio": 1.8026315789473684, "no_speech_prob": 0.06242502108216286}, {"id": 100, "seek": 42524, "start": 440.24, "end": 445.24, "text": " Because you cannot create POSSIDER, the POSSIDER cannot get IP addresses.", "tokens": [51114, 1436, 291, 2644, 1884, 430, 4367, 50, 2777, 1598, 11, 264, 430, 4367, 50, 2777, 1598, 2644, 483, 8671, 16862, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1902652455267505, "compression_ratio": 1.8026315789473684, "no_speech_prob": 0.06242502108216286}, {"id": 101, "seek": 42524, "start": 445.24, "end": 448.24, "text": " So for that, there are two container runtime calls.", "tokens": [51364, 407, 337, 300, 11, 456, 366, 732, 10129, 34474, 5498, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1902652455267505, "compression_ratio": 1.8026315789473684, "no_speech_prob": 0.06242502108216286}, {"id": 102, "seek": 42524, "start": 448.24, "end": 451.24, "text": " There is one container runtime call that is network ready.", "tokens": [51514, 821, 307, 472, 10129, 34474, 818, 300, 307, 3209, 1919, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1902652455267505, "compression_ratio": 1.8026315789473684, "no_speech_prob": 0.06242502108216286}, {"id": 103, "seek": 45124, "start": 451.24, "end": 455.24, "text": " This goes through the CNI API to the container runtime.", "tokens": [50364, 639, 1709, 807, 264, 14589, 40, 9362, 281, 264, 10129, 34474, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1562982163987718, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.018410075455904007}, {"id": 104, "seek": 45124, "start": 455.24, "end": 462.24, "text": " And the container runtime right now, cryo and container D, the only thing that it does is to check if there is a CNI config file.", "tokens": [50564, 400, 264, 10129, 34474, 558, 586, 11, 3305, 78, 293, 10129, 413, 11, 264, 787, 551, 300, 309, 775, 307, 281, 1520, 498, 456, 307, 257, 14589, 40, 6662, 3991, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1562982163987718, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.018410075455904007}, {"id": 105, "seek": 45124, "start": 462.24, "end": 468.24, "text": " Just that. You can fake the file and it's going to say that the network is ready.", "tokens": [50914, 1449, 300, 13, 509, 393, 7592, 264, 3991, 293, 309, 311, 516, 281, 584, 300, 264, 3209, 307, 1919, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1562982163987718, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.018410075455904007}, {"id": 106, "seek": 45124, "start": 468.24, "end": 474.24, "text": " Moving from the nodes to the POSSIDER. This is one of the most tricky parts.", "tokens": [51214, 14242, 490, 264, 13891, 281, 264, 430, 4367, 50, 2777, 1598, 13, 639, 307, 472, 295, 264, 881, 12414, 3166, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1562982163987718, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.018410075455904007}, {"id": 107, "seek": 45124, "start": 474.24, "end": 479.24, "text": " The POSSIDER is the minimal unit of work in Kubernetes.", "tokens": [51514, 440, 430, 4367, 50, 2777, 1598, 307, 264, 13206, 4985, 295, 589, 294, 23145, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1562982163987718, "compression_ratio": 1.639344262295082, "no_speech_prob": 0.018410075455904007}, {"id": 108, "seek": 47924, "start": 479.24, "end": 485.24, "text": " So the POSSIDER is created and lives in a network, is able to reach other POSSIDER networks,", "tokens": [50364, 407, 264, 430, 4367, 50, 2777, 1598, 307, 2942, 293, 2909, 294, 257, 3209, 11, 307, 1075, 281, 2524, 661, 430, 4367, 50, 2777, 1598, 9590, 11, 50664], "temperature": 0.0, "avg_logprob": -0.14812498934128704, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.02967699058353901}, {"id": 109, "seek": 47924, "start": 485.24, "end": 488.24, "text": " but this presents a security problem for people.", "tokens": [50664, 457, 341, 13533, 257, 3825, 1154, 337, 561, 13, 50814], "temperature": 0.0, "avg_logprob": -0.14812498934128704, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.02967699058353901}, {"id": 110, "seek": 47924, "start": 488.24, "end": 491.24, "text": " So what we created is the network policy API.", "tokens": [50814, 407, 437, 321, 2942, 307, 264, 3209, 3897, 9362, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14812498934128704, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.02967699058353901}, {"id": 111, "seek": 47924, "start": 491.24, "end": 495.24, "text": " That means that you are able to define relations between the POSSIDER.", "tokens": [50964, 663, 1355, 300, 291, 366, 1075, 281, 6964, 2299, 1296, 264, 430, 4367, 50, 2777, 1598, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14812498934128704, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.02967699058353901}, {"id": 112, "seek": 47924, "start": 495.24, "end": 498.24, "text": " This POSSIDER can talk with each other, this POSSIDER can talk with each other.", "tokens": [51164, 639, 430, 4367, 50, 2777, 1598, 393, 751, 365, 1184, 661, 11, 341, 430, 4367, 50, 2777, 1598, 393, 751, 365, 1184, 661, 13, 51314], "temperature": 0.0, "avg_logprob": -0.14812498934128704, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.02967699058353901}, {"id": 113, "seek": 47924, "start": 498.24, "end": 500.24, "text": " This is a high level.", "tokens": [51314, 639, 307, 257, 1090, 1496, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14812498934128704, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.02967699058353901}, {"id": 114, "seek": 47924, "start": 500.24, "end": 506.24, "text": " So what happens when you create a POSSIDER is that a user creates a POSSIDER or a deployment.", "tokens": [51414, 407, 437, 2314, 562, 291, 1884, 257, 430, 4367, 50, 2777, 1598, 307, 300, 257, 4195, 7829, 257, 430, 4367, 50, 2777, 1598, 420, 257, 19317, 13, 51714], "temperature": 0.0, "avg_logprob": -0.14812498934128704, "compression_ratio": 1.8916666666666666, "no_speech_prob": 0.02967699058353901}, {"id": 115, "seek": 50624, "start": 506.24, "end": 509.24, "text": " A deployment is a composition of the POSSIDER API.", "tokens": [50364, 316, 19317, 307, 257, 12686, 295, 264, 430, 4367, 50, 2777, 1598, 9362, 13, 50514], "temperature": 0.0, "avg_logprob": -0.16255284246997298, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.031057342886924744}, {"id": 116, "seek": 50624, "start": 509.24, "end": 514.24, "text": " So this is going to create an object called POD in the API server.", "tokens": [50514, 407, 341, 307, 516, 281, 1884, 364, 2657, 1219, 430, 14632, 294, 264, 9362, 7154, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16255284246997298, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.031057342886924744}, {"id": 117, "seek": 50624, "start": 514.24, "end": 522.24, "text": " The controller, the scheduler is going to see, okay, there is a POD created, but it doesn't have a node assigned.", "tokens": [50764, 440, 10561, 11, 264, 12000, 260, 307, 516, 281, 536, 11, 1392, 11, 456, 307, 257, 430, 14632, 2942, 11, 457, 309, 1177, 380, 362, 257, 9984, 13279, 13, 51164], "temperature": 0.0, "avg_logprob": -0.16255284246997298, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.031057342886924744}, {"id": 118, "seek": 50624, "start": 522.24, "end": 528.24, "text": " So I'm going to assign this POD to this node because it has resources, whatever constraints that you put there.", "tokens": [51164, 407, 286, 478, 516, 281, 6269, 341, 430, 14632, 281, 341, 9984, 570, 309, 575, 3593, 11, 2035, 18491, 300, 291, 829, 456, 13, 51464], "temperature": 0.0, "avg_logprob": -0.16255284246997298, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.031057342886924744}, {"id": 119, "seek": 50624, "start": 528.24, "end": 532.24, "text": " Then it assigns a node to the POD spec.", "tokens": [51464, 1396, 309, 6269, 82, 257, 9984, 281, 264, 430, 14632, 1608, 13, 51664], "temperature": 0.0, "avg_logprob": -0.16255284246997298, "compression_ratio": 1.6297872340425532, "no_speech_prob": 0.031057342886924744}, {"id": 120, "seek": 53224, "start": 532.24, "end": 539.24, "text": " And the QLED that is watching this POD object and got this POD assigned gets the POD and starts working on it.", "tokens": [50364, 400, 264, 1249, 23459, 300, 307, 1976, 341, 430, 14632, 2657, 293, 658, 341, 430, 14632, 13279, 2170, 264, 430, 14632, 293, 3719, 1364, 322, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1711109968332144, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.03748613968491554}, {"id": 121, "seek": 53224, "start": 539.24, "end": 541.24, "text": " It starts to create the POD.", "tokens": [50714, 467, 3719, 281, 1884, 264, 430, 14632, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1711109968332144, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.03748613968491554}, {"id": 122, "seek": 53224, "start": 541.24, "end": 544.24, "text": " That's the so-called declarative thing.", "tokens": [50814, 663, 311, 264, 370, 12, 11880, 16694, 1166, 551, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1711109968332144, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.03748613968491554}, {"id": 123, "seek": 53224, "start": 544.24, "end": 548.24, "text": " And how the QLED starts to create the POD is via the CRI API.", "tokens": [50964, 400, 577, 264, 1249, 23459, 3719, 281, 1884, 264, 430, 14632, 307, 5766, 264, 14123, 40, 9362, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1711109968332144, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.03748613968491554}, {"id": 124, "seek": 53224, "start": 548.24, "end": 556.24, "text": " So it starts to build the CRI API as a JRPC service that is used to communicate between the QLED and the container runtime.", "tokens": [51164, 407, 309, 3719, 281, 1322, 264, 14123, 40, 9362, 382, 257, 508, 28516, 34, 2643, 300, 307, 1143, 281, 7890, 1296, 264, 1249, 23459, 293, 264, 10129, 34474, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1711109968332144, "compression_ratio": 1.721698113207547, "no_speech_prob": 0.03748613968491554}, {"id": 125, "seek": 55624, "start": 556.24, "end": 562.24, "text": " So the first thing that it does is to call this RampotSambos call.", "tokens": [50364, 407, 264, 700, 551, 300, 309, 775, 307, 281, 818, 341, 497, 1215, 310, 50, 2173, 329, 818, 13, 50664], "temperature": 0.0, "avg_logprob": -0.21376691988813198, "compression_ratio": 1.6507936507936507, "no_speech_prob": 0.1670866459608078}, {"id": 126, "seek": 55624, "start": 562.24, "end": 569.24, "text": " And in this RampotSambos call, you have networking parameters like DNS, config, PORMAP, hostname.", "tokens": [50664, 400, 294, 341, 497, 1215, 310, 50, 2173, 329, 818, 11, 291, 362, 17985, 9834, 411, 35153, 11, 6662, 11, 430, 2483, 44, 4715, 11, 3975, 16344, 13, 51014], "temperature": 0.0, "avg_logprob": -0.21376691988813198, "compression_ratio": 1.6507936507936507, "no_speech_prob": 0.1670866459608078}, {"id": 127, "seek": 55624, "start": 569.24, "end": 576.24, "text": " When this goes to the container runtime, as I said before, CRI and containerD, UC and I, but this is not mandatory.", "tokens": [51014, 1133, 341, 1709, 281, 264, 10129, 34474, 11, 382, 286, 848, 949, 11, 14123, 40, 293, 10129, 35, 11, 14079, 293, 286, 11, 457, 341, 307, 406, 22173, 13, 51364], "temperature": 0.0, "avg_logprob": -0.21376691988813198, "compression_ratio": 1.6507936507936507, "no_speech_prob": 0.1670866459608078}, {"id": 128, "seek": 55624, "start": 576.24, "end": 581.24, "text": " You need to create the NegoName space and to create the Nego, right?", "tokens": [51364, 509, 643, 281, 1884, 264, 426, 6308, 45, 529, 1901, 293, 281, 1884, 264, 426, 6308, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.21376691988813198, "compression_ratio": 1.6507936507936507, "no_speech_prob": 0.1670866459608078}, {"id": 129, "seek": 55624, "start": 581.24, "end": 585.24, "text": " And once you create that, it goes back and the QLED keeps working.", "tokens": [51614, 400, 1564, 291, 1884, 300, 11, 309, 1709, 646, 293, 264, 1249, 23459, 5965, 1364, 13, 51814], "temperature": 0.0, "avg_logprob": -0.21376691988813198, "compression_ratio": 1.6507936507936507, "no_speech_prob": 0.1670866459608078}, {"id": 130, "seek": 58524, "start": 585.24, "end": 592.24, "text": " After that, you get the POD IPs from the status response, right?", "tokens": [50364, 2381, 300, 11, 291, 483, 264, 430, 14632, 8671, 82, 490, 264, 6558, 4134, 11, 558, 30, 50714], "temperature": 0.0, "avg_logprob": -0.10822603243206619, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.02262949012219906}, {"id": 131, "seek": 58524, "start": 592.24, "end": 597.24, "text": " So that's the only thing that the QLED and Kubernetes know about the network.", "tokens": [50714, 407, 300, 311, 264, 787, 551, 300, 264, 1249, 23459, 293, 23145, 458, 466, 264, 3209, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10822603243206619, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.02262949012219906}, {"id": 132, "seek": 58524, "start": 597.24, "end": 600.24, "text": " Create a POD and receive the IPs.", "tokens": [50964, 20248, 257, 430, 14632, 293, 4774, 264, 8671, 82, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10822603243206619, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.02262949012219906}, {"id": 133, "seek": 58524, "start": 600.24, "end": 608.24, "text": " And this is the big problem that we have right now to start to model multi-network and this other complex network of policies, right?", "tokens": [51114, 400, 341, 307, 264, 955, 1154, 300, 321, 362, 558, 586, 281, 722, 281, 2316, 4825, 12, 7129, 1902, 293, 341, 661, 3997, 3209, 295, 7657, 11, 558, 30, 51514], "temperature": 0.0, "avg_logprob": -0.10822603243206619, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.02262949012219906}, {"id": 134, "seek": 58524, "start": 608.24, "end": 614.24, "text": " So we cover the nodes, we cover the PODs, and now we need to cover the discovery, right?", "tokens": [51514, 407, 321, 2060, 264, 13891, 11, 321, 2060, 264, 430, 14632, 82, 11, 293, 586, 321, 643, 281, 2060, 264, 12114, 11, 558, 30, 51814], "temperature": 0.0, "avg_logprob": -0.10822603243206619, "compression_ratio": 1.6906779661016949, "no_speech_prob": 0.02262949012219906}, {"id": 135, "seek": 61424, "start": 614.24, "end": 619.24, "text": " We have everything running, everything is fine, but we need to implement applications.", "tokens": [50364, 492, 362, 1203, 2614, 11, 1203, 307, 2489, 11, 457, 321, 643, 281, 4445, 5821, 13, 50614], "temperature": 0.0, "avg_logprob": -0.12233569113056311, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.023063912987709045}, {"id": 136, "seek": 61424, "start": 619.24, "end": 621.24, "text": " For that, we created the service API.", "tokens": [50614, 1171, 300, 11, 321, 2942, 264, 2643, 9362, 13, 50714], "temperature": 0.0, "avg_logprob": -0.12233569113056311, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.023063912987709045}, {"id": 137, "seek": 61424, "start": 621.24, "end": 629.24, "text": " For the service API, what you do is you are able to define to expose a set of PODs by selecting.", "tokens": [50714, 1171, 264, 2643, 9362, 11, 437, 291, 360, 307, 291, 366, 1075, 281, 6964, 281, 19219, 257, 992, 295, 430, 14632, 82, 538, 18182, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12233569113056311, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.023063912987709045}, {"id": 138, "seek": 61424, "start": 629.24, "end": 640.24, "text": " To say, okay, I want this POD that implement a web server to be exposed through DNS or through a load balancer, right?", "tokens": [51114, 1407, 584, 11, 1392, 11, 286, 528, 341, 430, 14632, 300, 4445, 257, 3670, 7154, 281, 312, 9495, 807, 35153, 420, 807, 257, 3677, 3119, 28347, 11, 558, 30, 51664], "temperature": 0.0, "avg_logprob": -0.12233569113056311, "compression_ratio": 1.5813953488372092, "no_speech_prob": 0.023063912987709045}, {"id": 139, "seek": 64024, "start": 640.24, "end": 645.24, "text": " So for services, there are like five types of services.", "tokens": [50364, 407, 337, 3328, 11, 456, 366, 411, 1732, 3467, 295, 3328, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16390908366501933, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.00960602704435587}, {"id": 140, "seek": 64024, "start": 645.24, "end": 647.24, "text": " One is the cluster IP service.", "tokens": [50614, 1485, 307, 264, 13630, 8671, 2643, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16390908366501933, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.00960602704435587}, {"id": 141, "seek": 64024, "start": 647.24, "end": 651.24, "text": " The cluster IP service is kind of a load balancer.", "tokens": [50714, 440, 13630, 8671, 2643, 307, 733, 295, 257, 3677, 3119, 28347, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16390908366501933, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.00960602704435587}, {"id": 142, "seek": 64024, "start": 651.24, "end": 661.24, "text": " You define the set of PODs that you want to expose and you expose via cluster IP, virtual IP and virtual POD.", "tokens": [50914, 509, 6964, 264, 992, 295, 430, 14632, 82, 300, 291, 528, 281, 19219, 293, 291, 19219, 5766, 13630, 8671, 11, 6374, 8671, 293, 6374, 430, 14632, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16390908366501933, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.00960602704435587}, {"id": 143, "seek": 64024, "start": 661.24, "end": 663.24, "text": " It's just a full forwarding.", "tokens": [51414, 467, 311, 445, 257, 1577, 2128, 278, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16390908366501933, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.00960602704435587}, {"id": 144, "seek": 64024, "start": 663.24, "end": 669.24, "text": " You have a whole set of options to modify the behavior, but basically that's only that.", "tokens": [51514, 509, 362, 257, 1379, 992, 295, 3956, 281, 16927, 264, 5223, 11, 457, 1936, 300, 311, 787, 300, 13, 51814], "temperature": 0.0, "avg_logprob": -0.16390908366501933, "compression_ratio": 1.6545454545454545, "no_speech_prob": 0.00960602704435587}, {"id": 145, "seek": 66924, "start": 669.24, "end": 678.24, "text": " For node port, this is a way, so right now you have the applications and you need to expose them externally.", "tokens": [50364, 1171, 9984, 2436, 11, 341, 307, 257, 636, 11, 370, 558, 586, 291, 362, 264, 5821, 293, 291, 643, 281, 19219, 552, 40899, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12140157271404656, "compression_ratio": 1.7280701754385965, "no_speech_prob": 0.012083546258509159}, {"id": 146, "seek": 66924, "start": 678.24, "end": 680.24, "text": " And for that, you have the node port.", "tokens": [50814, 400, 337, 300, 11, 291, 362, 264, 9984, 2436, 13, 50914], "temperature": 0.0, "avg_logprob": -0.12140157271404656, "compression_ratio": 1.7280701754385965, "no_speech_prob": 0.012083546258509159}, {"id": 147, "seek": 66924, "start": 680.24, "end": 687.24, "text": " The node port is the typical form mapping that we do in our routers to expose something in one internal server, right?", "tokens": [50914, 440, 9984, 2436, 307, 264, 7476, 1254, 18350, 300, 321, 360, 294, 527, 4020, 433, 281, 19219, 746, 294, 472, 6920, 7154, 11, 558, 30, 51264], "temperature": 0.0, "avg_logprob": -0.12140157271404656, "compression_ratio": 1.7280701754385965, "no_speech_prob": 0.012083546258509159}, {"id": 148, "seek": 66924, "start": 687.24, "end": 698.24, "text": " You get the IP of the node, a port in the range that doesn't collision with other things in the host, and you expose internally.", "tokens": [51264, 509, 483, 264, 8671, 295, 264, 9984, 11, 257, 2436, 294, 264, 3613, 300, 1177, 380, 24644, 365, 661, 721, 294, 264, 3975, 11, 293, 291, 19219, 19501, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12140157271404656, "compression_ratio": 1.7280701754385965, "no_speech_prob": 0.012083546258509159}, {"id": 149, "seek": 69824, "start": 698.24, "end": 701.24, "text": " And then you have the load balancer services.", "tokens": [50364, 400, 550, 291, 362, 264, 3677, 3119, 28347, 3328, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10810172406932976, "compression_ratio": 1.5743589743589743, "no_speech_prob": 0.014878015965223312}, {"id": 150, "seek": 69824, "start": 701.24, "end": 702.24, "text": " This is different.", "tokens": [50514, 639, 307, 819, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10810172406932976, "compression_ratio": 1.5743589743589743, "no_speech_prob": 0.014878015965223312}, {"id": 151, "seek": 69824, "start": 702.24, "end": 712.24, "text": " What it does is it creates the service and waits for external controller to populate a load balancer that is able to send traffic to the PODs inside the cluster.", "tokens": [50564, 708, 309, 775, 307, 309, 7829, 264, 2643, 293, 40597, 337, 8320, 10561, 281, 1665, 5256, 257, 3677, 3119, 28347, 300, 307, 1075, 281, 2845, 6419, 281, 264, 430, 14632, 82, 1854, 264, 13630, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10810172406932976, "compression_ratio": 1.5743589743589743, "no_speech_prob": 0.014878015965223312}, {"id": 152, "seek": 69824, "start": 712.24, "end": 715.24, "text": " You also have ways to expose the services with DNS.", "tokens": [51064, 509, 611, 362, 2098, 281, 19219, 264, 3328, 365, 35153, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10810172406932976, "compression_ratio": 1.5743589743589743, "no_speech_prob": 0.014878015965223312}, {"id": 153, "seek": 69824, "start": 715.24, "end": 717.24, "text": " That's the headless service.", "tokens": [51214, 663, 311, 264, 1378, 1832, 2643, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10810172406932976, "compression_ratio": 1.5743589743589743, "no_speech_prob": 0.014878015965223312}, {"id": 154, "seek": 71724, "start": 717.24, "end": 725.24, "text": " So basically what it does is it creates a new record, a record that as Bakken has the PODs, right?", "tokens": [50364, 407, 1936, 437, 309, 775, 307, 309, 7829, 257, 777, 2136, 11, 257, 2136, 300, 382, 12063, 2653, 575, 264, 430, 14632, 82, 11, 558, 30, 50764], "temperature": 0.0, "avg_logprob": -0.1386673355102539, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.09235791116952896}, {"id": 155, "seek": 71724, "start": 725.24, "end": 728.24, "text": " As the A answers.", "tokens": [50764, 1018, 264, 316, 6338, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1386673355102539, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.09235791116952896}, {"id": 156, "seek": 71724, "start": 728.24, "end": 736.24, "text": " The way that the Kubernetes service work is when you have a service object with a selector, right?", "tokens": [50914, 440, 636, 300, 264, 23145, 2643, 589, 307, 562, 291, 362, 257, 2643, 2657, 365, 257, 23264, 1672, 11, 558, 30, 51314], "temperature": 0.0, "avg_logprob": -0.1386673355102539, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.09235791116952896}, {"id": 157, "seek": 71724, "start": 736.24, "end": 740.24, "text": " And there is a controller that is watching the PODs.", "tokens": [51314, 400, 456, 307, 257, 10561, 300, 307, 1976, 264, 430, 14632, 82, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1386673355102539, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.09235791116952896}, {"id": 158, "seek": 71724, "start": 740.24, "end": 746.24, "text": " When the QLED creates the PODs, the QLED updates the POD status and the IPs.", "tokens": [51514, 1133, 264, 1249, 23459, 7829, 264, 430, 14632, 82, 11, 264, 1249, 23459, 9205, 264, 430, 14632, 6558, 293, 264, 8671, 82, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1386673355102539, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.09235791116952896}, {"id": 159, "seek": 74624, "start": 746.24, "end": 758.24, "text": " And so when the POD is ready, this controller is to see, I have a POD that matches this selector of the service, so I need to start to create an important slide for this service.", "tokens": [50364, 400, 370, 562, 264, 430, 14632, 307, 1919, 11, 341, 10561, 307, 281, 536, 11, 286, 362, 257, 430, 14632, 300, 10676, 341, 23264, 1672, 295, 264, 2643, 11, 370, 286, 643, 281, 722, 281, 1884, 364, 1021, 4137, 337, 341, 2643, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19375578936408547, "compression_ratio": 1.661904761904762, "no_speech_prob": 0.02160208858549595}, {"id": 160, "seek": 74624, "start": 758.24, "end": 771.24, "text": " And then when you have the service and the important slides, the proxy implementation, like you proceed, is able to define in the data plane the for load balancer, right?", "tokens": [50964, 400, 550, 562, 291, 362, 264, 2643, 293, 264, 1021, 9788, 11, 264, 29690, 11420, 11, 411, 291, 8991, 11, 307, 1075, 281, 6964, 294, 264, 1412, 5720, 264, 337, 3677, 3119, 28347, 11, 558, 30, 51614], "temperature": 0.0, "avg_logprob": -0.19375578936408547, "compression_ratio": 1.661904761904762, "no_speech_prob": 0.02160208858549595}, {"id": 161, "seek": 77124, "start": 771.24, "end": 776.24, "text": " So you have this cluster IP, this virtual IP, this virtual POD, and you have these Bakken.", "tokens": [50364, 407, 291, 362, 341, 13630, 8671, 11, 341, 6374, 8671, 11, 341, 6374, 430, 14632, 11, 293, 291, 362, 613, 12063, 2653, 13, 50614], "temperature": 0.0, "avg_logprob": -0.20988742603975183, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.09116572141647339}, {"id": 162, "seek": 77124, "start": 776.24, "end": 779.24, "text": " It's just installing rules.", "tokens": [50614, 467, 311, 445, 20762, 4474, 13, 50764], "temperature": 0.0, "avg_logprob": -0.20988742603975183, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.09116572141647339}, {"id": 163, "seek": 77124, "start": 779.24, "end": 786.24, "text": " One of the most tricky things with services is to do termination, graceful termination, because this, you saw the service type load balancer,", "tokens": [50764, 1485, 295, 264, 881, 12414, 721, 365, 3328, 307, 281, 360, 1433, 2486, 11, 10042, 906, 1433, 2486, 11, 570, 341, 11, 291, 1866, 264, 2643, 2010, 3677, 3119, 28347, 11, 51114], "temperature": 0.0, "avg_logprob": -0.20988742603975183, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.09116572141647339}, {"id": 164, "seek": 77124, "start": 786.24, "end": 794.24, "text": " the problem is that you need to coordinate synchronally three parts of infrastructure.", "tokens": [51114, 264, 1154, 307, 300, 291, 643, 281, 15670, 19331, 379, 1045, 3166, 295, 6896, 13, 51514], "temperature": 0.0, "avg_logprob": -0.20988742603975183, "compression_ratio": 1.613953488372093, "no_speech_prob": 0.09116572141647339}, {"id": 165, "seek": 79424, "start": 794.24, "end": 797.24, "text": " So the POD has a state.", "tokens": [50364, 407, 264, 430, 14632, 575, 257, 1785, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1557993927001953, "compression_ratio": 1.7218045112781954, "no_speech_prob": 0.12197882682085037}, {"id": 166, "seek": 79424, "start": 797.24, "end": 802.24, "text": " The POD can run, start being creating, start running, and start deleting.", "tokens": [50514, 440, 430, 14632, 393, 1190, 11, 722, 885, 4084, 11, 722, 2614, 11, 293, 722, 48946, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1557993927001953, "compression_ratio": 1.7218045112781954, "no_speech_prob": 0.12197882682085037}, {"id": 167, "seek": 79424, "start": 802.24, "end": 805.24, "text": " But there's some time that you want to do rolling updates.", "tokens": [50764, 583, 456, 311, 512, 565, 300, 291, 528, 281, 360, 9439, 9205, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1557993927001953, "compression_ratio": 1.7218045112781954, "no_speech_prob": 0.12197882682085037}, {"id": 168, "seek": 79424, "start": 805.24, "end": 811.24, "text": " And for that, what you want is, I want to run my new version, but people is still hitting my endpoint.", "tokens": [50914, 400, 337, 300, 11, 437, 291, 528, 307, 11, 286, 528, 281, 1190, 452, 777, 3037, 11, 457, 561, 307, 920, 8850, 452, 35795, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1557993927001953, "compression_ratio": 1.7218045112781954, "no_speech_prob": 0.12197882682085037}, {"id": 169, "seek": 79424, "start": 811.24, "end": 813.24, "text": " I don't want to lose any package.", "tokens": [51214, 286, 500, 380, 528, 281, 3624, 604, 7372, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1557993927001953, "compression_ratio": 1.7218045112781954, "no_speech_prob": 0.12197882682085037}, {"id": 170, "seek": 79424, "start": 813.24, "end": 815.24, "text": " So for that, you establish a grace period.", "tokens": [51314, 407, 337, 300, 11, 291, 8327, 257, 10042, 2896, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1557993927001953, "compression_ratio": 1.7218045112781954, "no_speech_prob": 0.12197882682085037}, {"id": 171, "seek": 79424, "start": 815.24, "end": 818.24, "text": " And this grace period is related to the endpoint slides.", "tokens": [51414, 400, 341, 10042, 2896, 307, 4077, 281, 264, 35795, 9788, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1557993927001953, "compression_ratio": 1.7218045112781954, "no_speech_prob": 0.12197882682085037}, {"id": 172, "seek": 79424, "start": 818.24, "end": 822.24, "text": " And this is used by load balancers to implement serial downtime.", "tokens": [51564, 400, 341, 307, 1143, 538, 3677, 3119, 4463, 433, 281, 4445, 17436, 49648, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1557993927001953, "compression_ratio": 1.7218045112781954, "no_speech_prob": 0.12197882682085037}, {"id": 173, "seek": 82224, "start": 822.24, "end": 826.24, "text": " So in a common state, you start updating the POD.", "tokens": [50364, 407, 294, 257, 2689, 1785, 11, 291, 722, 25113, 264, 430, 14632, 13, 50564], "temperature": 0.0, "avg_logprob": -0.1347485383351644, "compression_ratio": 1.7863636363636364, "no_speech_prob": 0.03536546975374222}, {"id": 174, "seek": 82224, "start": 826.24, "end": 832.24, "text": " The POD is still able, you see the run line, is still able to receive traffic at that point because it's terminating.", "tokens": [50564, 440, 430, 14632, 307, 920, 1075, 11, 291, 536, 264, 1190, 1622, 11, 307, 920, 1075, 281, 4774, 6419, 412, 300, 935, 570, 309, 311, 1433, 8205, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1347485383351644, "compression_ratio": 1.7863636363636364, "no_speech_prob": 0.03536546975374222}, {"id": 175, "seek": 82224, "start": 832.24, "end": 834.24, "text": " So it's going to be able to answer.", "tokens": [50864, 407, 309, 311, 516, 281, 312, 1075, 281, 1867, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1347485383351644, "compression_ratio": 1.7863636363636364, "no_speech_prob": 0.03536546975374222}, {"id": 176, "seek": 82224, "start": 834.24, "end": 836.24, "text": " But the health check starts failing.", "tokens": [50964, 583, 264, 1585, 1520, 3719, 18223, 13, 51064], "temperature": 0.0, "avg_logprob": -0.1347485383351644, "compression_ratio": 1.7863636363636364, "no_speech_prob": 0.03536546975374222}, {"id": 177, "seek": 82224, "start": 836.24, "end": 842.24, "text": " So the moment that they start failing, the load balancers start to move this endpoint out of rotation.", "tokens": [51064, 407, 264, 1623, 300, 436, 722, 18223, 11, 264, 3677, 3119, 4463, 433, 722, 281, 1286, 341, 35795, 484, 295, 12447, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1347485383351644, "compression_ratio": 1.7863636363636364, "no_speech_prob": 0.03536546975374222}, {"id": 178, "seek": 82224, "start": 842.24, "end": 846.24, "text": " So the new traffic is only going to the new PODs.", "tokens": [51364, 407, 264, 777, 6419, 307, 787, 516, 281, 264, 777, 430, 14632, 82, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1347485383351644, "compression_ratio": 1.7863636363636364, "no_speech_prob": 0.03536546975374222}, {"id": 179, "seek": 84624, "start": 846.24, "end": 854.24, "text": " Once the new POD is removed and replaced by the new one, the health check starts succeeding again.", "tokens": [50364, 3443, 264, 777, 430, 14632, 307, 7261, 293, 10772, 538, 264, 777, 472, 11, 264, 1585, 1520, 3719, 47912, 797, 13, 50764], "temperature": 0.0, "avg_logprob": -0.19687779744466147, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.013210439123213291}, {"id": 180, "seek": 84624, "start": 854.24, "end": 858.24, "text": " And it can start to receive new traffic on the new application.", "tokens": [50764, 400, 309, 393, 722, 281, 4774, 777, 6419, 322, 264, 777, 3861, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19687779744466147, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.013210439123213291}, {"id": 181, "seek": 84624, "start": 858.24, "end": 864.24, "text": " As I said before, Kubernetes defines some APIs and others are defined by composition.", "tokens": [50964, 1018, 286, 848, 949, 11, 23145, 23122, 512, 21445, 293, 2357, 366, 7642, 538, 12686, 13, 51264], "temperature": 0.0, "avg_logprob": -0.19687779744466147, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.013210439123213291}, {"id": 182, "seek": 84624, "start": 864.24, "end": 868.24, "text": " So you can have a load for load balancer on top of service.", "tokens": [51264, 407, 291, 393, 362, 257, 3677, 337, 3677, 3119, 28347, 322, 1192, 295, 2643, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19687779744466147, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.013210439123213291}, {"id": 183, "seek": 84624, "start": 868.24, "end": 873.24, "text": " There is this ingress API that allows you to use the service of a game", "tokens": [51464, 821, 307, 341, 3957, 735, 9362, 300, 4045, 291, 281, 764, 264, 2643, 295, 257, 1216, 51714], "temperature": 0.0, "avg_logprob": -0.19687779744466147, "compression_ratio": 1.6127659574468085, "no_speech_prob": 0.013210439123213291}, {"id": 184, "seek": 87324, "start": 873.24, "end": 879.24, "text": " and define another layer of abstraction with the seven primitives as HTTP.", "tokens": [50364, 293, 6964, 1071, 4583, 295, 37765, 365, 264, 3407, 2886, 38970, 382, 33283, 13, 50664], "temperature": 0.0, "avg_logprob": -0.20342804403866038, "compression_ratio": 1.5753424657534247, "no_speech_prob": 0.01302832830697298}, {"id": 185, "seek": 87324, "start": 879.24, "end": 883.24, "text": " So you could say this path this way and this path this other way.", "tokens": [50664, 407, 291, 727, 584, 341, 3100, 341, 636, 293, 341, 3100, 341, 661, 636, 13, 50864], "temperature": 0.0, "avg_logprob": -0.20342804403866038, "compression_ratio": 1.5753424657534247, "no_speech_prob": 0.01302832830697298}, {"id": 186, "seek": 87324, "start": 883.24, "end": 893.24, "text": " These APIs were created in the region for some things that are no longer or we carry over some of the problems.", "tokens": [50864, 1981, 21445, 645, 2942, 294, 264, 4458, 337, 512, 721, 300, 366, 572, 2854, 420, 321, 3985, 670, 512, 295, 264, 2740, 13, 51364], "temperature": 0.0, "avg_logprob": -0.20342804403866038, "compression_ratio": 1.5753424657534247, "no_speech_prob": 0.01302832830697298}, {"id": 187, "seek": 87324, "start": 893.24, "end": 894.24, "text": " Okay, thanks.", "tokens": [51364, 1033, 11, 3231, 13, 51414], "temperature": 0.0, "avg_logprob": -0.20342804403866038, "compression_ratio": 1.5753424657534247, "no_speech_prob": 0.01302832830697298}, {"id": 188, "seek": 87324, "start": 894.24, "end": 899.24, "text": " So as evolution, we have Gateway API that's the new API that has standardized.", "tokens": [51414, 407, 382, 9303, 11, 321, 362, 48394, 9362, 300, 311, 264, 777, 9362, 300, 575, 31677, 13, 51664], "temperature": 0.0, "avg_logprob": -0.20342804403866038, "compression_ratio": 1.5753424657534247, "no_speech_prob": 0.01302832830697298}, {"id": 189, "seek": 89924, "start": 899.24, "end": 909.24, "text": " And the other problem is that Kubernetes itself is portable and all the things that you can see there is the network.", "tokens": [50364, 400, 264, 661, 1154, 307, 300, 23145, 2564, 307, 21800, 293, 439, 264, 721, 300, 291, 393, 536, 456, 307, 264, 3209, 13, 50864], "temperature": 0.0, "avg_logprob": -0.14681632867020167, "compression_ratio": 1.6759259259259258, "no_speech_prob": 0.03469577431678772}, {"id": 190, "seek": 89924, "start": 909.24, "end": 917.24, "text": " So the same thing that you run a POD, you may be running a webhook that interferes when you create the POD with the API call and all this stuff.", "tokens": [50864, 407, 264, 912, 551, 300, 291, 1190, 257, 430, 14632, 11, 291, 815, 312, 2614, 257, 3670, 71, 1212, 300, 25799, 279, 562, 291, 1884, 264, 430, 14632, 365, 264, 9362, 818, 293, 439, 341, 1507, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14681632867020167, "compression_ratio": 1.6759259259259258, "no_speech_prob": 0.03469577431678772}, {"id": 191, "seek": 89924, "start": 917.24, "end": 921.24, "text": " So this is one of the other problematic.", "tokens": [51264, 407, 341, 307, 472, 295, 264, 661, 19011, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14681632867020167, "compression_ratio": 1.6759259259259258, "no_speech_prob": 0.03469577431678772}, {"id": 192, "seek": 89924, "start": 921.24, "end": 924.24, "text": " We need to be backwards compatible and support everything.", "tokens": [51464, 492, 643, 281, 312, 12204, 18218, 293, 1406, 1203, 13, 51614], "temperature": 0.0, "avg_logprob": -0.14681632867020167, "compression_ratio": 1.6759259259259258, "no_speech_prob": 0.03469577431678772}, {"id": 193, "seek": 92424, "start": 924.24, "end": 932.24, "text": " If you want to be more interested in see what is going on, we have a public dashboard so you can read the caption what is going next.", "tokens": [50364, 759, 291, 528, 281, 312, 544, 3102, 294, 536, 437, 307, 516, 322, 11, 321, 362, 257, 1908, 18342, 370, 291, 393, 1401, 264, 31974, 437, 307, 516, 958, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2407655341952455, "compression_ratio": 1.3884892086330936, "no_speech_prob": 0.06715138256549835}, {"id": 194, "seek": 92424, "start": 932.24, "end": 934.24, "text": " Okay, sorry.", "tokens": [50764, 1033, 11, 2597, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2407655341952455, "compression_ratio": 1.3884892086330936, "no_speech_prob": 0.06715138256549835}, {"id": 195, "seek": 92424, "start": 943.24, "end": 946.24, "text": " Sorry, we are behind schedule so no questions.", "tokens": [51314, 4919, 11, 321, 366, 2261, 7567, 370, 572, 1651, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2407655341952455, "compression_ratio": 1.3884892086330936, "no_speech_prob": 0.06715138256549835}, {"id": 196, "seek": 95424, "start": 954.24, "end": 956.24, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.6830800374348959, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9610481858253479}], "language": "en"}