{"text": " Real-time processing. A very brief background. So I'm Sylvain, Fox 4 Golf Kilo Radio, this is my amateur radio call sign. Very briefly about myself, for those who don't know me yet. I'm the founder of a small company in France, doing SDR. The name is SDR Technologies. I'm the most important here to introduce the story about GPU, and it is the next lines. So I was working for ONERA, the French Aerospace and, well, military, I would say affiliated to the Ministry of Defense Research Lab. And that explains how this started, and I will come back to this in a slide. So very briefly, the outline of the talk will be that I will explain the motivation and then try to explain the approach I took when I tested this GPU and why it came, why I had the idea to use this for DDC. And you will see, and I tried to take a few minutes to explain the background, not of the code, because it's on GitHub and you can read it, and I'm quite sure you will improve it a lot, no doubt. But just to explain for those who are not yet, who are not familiar with GPU, and why it can be useful, and what kind of things you can do with it as long as you take the time to write code in this. So very briefly, the story started a while ago when I was working at ONERA where we have radars, and I just took some pictures that you may have seen already. One is the Nostradamus, it's an HF over the horizon radar, and the other one is Grav, very famous. So these two radars were designed and operated in not my team because I was not leading the team, but in the team I was working in. One of the key problems here is that you have a lot of channels. One antenna is one channel, means that you gather a huge amount of data. And one of the key problems is how do you process this data in real time. And at that time, in my, don't remember exactly the year, NVIDIA released the Tegrar K1, which was very small stuff, but looking promising, sorry, in particular for embedded systems. So my boss said, can you have a look at this and tell us if that can bring anything to the game. And just to make also the story very short, the answer was yes, it's useful, and that made my decision to leave the research team and found my company. So yes, the quick answer is yes, it works. Okay, so now let's go back to more serious things. This is from the leaflet, I would say, from the Tegrar K1 at that time. They were promising something like 326 gigaflops, oh, five watts, 99 euros for the deathboard. You say, who? Does this really work? And that was the idea. That was the idea was to test this if that can be used for software-defined radio. I'm assuming here that most of you have a very brief and very quick idea of what a GPU is, so I will just take a few seconds to explain. I'm just realizing that if I move to the screen, nobody will see from the remote, I guess. Yeah, okay, I'll try. Sorry. So just to explain the model, this architecture has two things inside. You have the ARM ARM processor, this GPU, this is the four cores, this one, and you have the CUDA cores, 192 cores next to it. And the good thing is that they share the same memory. Okay, if you have a PC, you have your core, whatever you want, and in one of the slots you have the GPU cards, and they have to transmit, they have to share data through the PCI bus. In this one, it's a bus, it's kind of PCI bus, but you will see that the performances are much more interesting. The second thing is that one core does one symbol operation at a time. So in this very simple example, I'm adding AC is equal to A plus B, and the code is just saying for each CPU, each CUDA core, take A, take B, make the sum, and store in C. That's pretty simple. So the key point here is that there are three things. One is push the data, the second is push the code, then run the code, and fetch the results. Keep in mind that you have to push the data, and this costs a lot, of course. So coming back to our SDR and DSP, what are the things that may need power? Well, just examples. The one I will elaborate this morning is the DDC, digital down converter, but you have many others, like I have not yet, and I will not describe this morning, I have not yet investigated so much. Feel free to take a seat, no worries. Interpolation, decimation, clock recovery, synchronization, pattern detection, and so on and so on. One of the key issues here is that some algorithms are extremely difficult to run in parallel while others, it's much simpler. And some of them just don't work in parallel easily. So in this example, let's focus on something simple, which is multiband DDC. So we'll assume that we have a white band signal coming from a white band SDR, whatever it is. I took DHF example. So here, for example, we have a receiver that is transferring to the memory. To the stuff, the device, a 50 mega samples per second bandwidth. And we want to extract from this small subbands. OK, so I took examples of DHF bands, one at 7 megs, another one at 14 megs, and so on. That's just examples. The core thing is how do we extract the subbands from the single white band signal? So for one channel, it's pretty easy. And that's the classical stuff. This is a DDC. So you basically translate the frequency and then you make some low pass filtering. And then you throw away all the samples you don't need. That's very classical. I have not invented anything here. And I guess you all know by heart what is a low pass filter, but just take a few seconds to remind how it works. On one hand, you have the input, the samples coming from the SDR. On the other hand, you have the filter you want to apply for the low pass filtering. And you make a convolution, basically some modifications and additions, and you retrieve the output. OK. Now let's look a bit more in my example. How many taps do we really have? So for this example, let's assume that we have a 50 megahertz, so 50 mega samples per second bandwidth incoming. And we want three kilohertz just to extract the audio. This is a fully digital system. So at the end, we want audio, plain old voice, someone speaking. And we assume that three kilohertz is enough. There's a lot of different approaches to estimate exactly, to estimate as accurately as possible the number of taps we need. I saw many, I tried to find an example. I saw plenty and pages from you, Marcus. Many of, I was going to copy and paste some of yours to avoid questions. No, I'm joking, of course. Well, there's many ways to estimate the number of taps. And one of the approaches is this, I don't remember, yes, the Iris approximation, sorry. And so if you do the calculation, you arrive at 50,500 taps. OK. 50,500, so what? So what? Now let's go back to this stuff. So to do the convolution with 50,500 taps here, you need to do this 50,500 times for each sample. It means that to get one value out of the FIR filter, the Lopez filter, you need to take 50,500 inputs, 50,500 coefficients, do the multiplications, do the sum. And you have one sample. And you have to do this for every incoming sample. That begins to be a huge amount of processing. Of course, if you have, you have all experienced many low cost SDR applications running on low cost PCs and they do this in real time. So how do they do it? Of course, there are tricks. One of the most, the easiest one is to divide by two instead of going straight from 50 megs to 3 kilohertz, which is nice, but probably not the best one. You do this step by step by dividing by two. So you take the first band, apply a half band filter, so you have less, you have the half of samples and you repeat this several times. That's very interesting because each time you remove a lot of samples and if you do this clearly, you can have 50% of the coefficients that are zero if you compute the fear in a good way. So that removes you a lot of computation. Of course, yes, but this is not ideal because you will hardly be able to reuse the computation you've made for the other channels. You will reduce a lot the throughput, the number of calculations you need for one of the channels, but then the next one you will want to reuse some of the calculation you've made and that's not easy. So at the end, this doesn't work so good. So, so can this stuff help? So I just put two examples here. On the top you have the Jetson XAVNX. I know that in an open source conference promoting a brand like NVDA is probably not the best idea, but just to make the story short, I have no sponsoring from NVDA. Okay, so just to be figures and facts, the first one is the XAVNX, so it's roughly 500 euros, roughly. And this one has 384 cores and the next in line is the NVDA 800, which is not the same price, 20,000 roughly, and has 6,912 cores. Okay, the interesting thing is the two FFT benchmarks are put below it. So if you look at the Jetson XAVNX to perform an FFT of, sorry, I'll say it this way, 2 power 19, which is quite a lot. So it's 310 microseconds. That's quite a lot. But of course, if you look at the most expensive one, you have 170 microseconds for 2 power 23, which is a huge FFT. A huge FFT. You can do this with an FPGA, but to get those size, it's becoming fun and extremely tricky to do it. Okay, so and for the XAVNX, you see that if you go up to the power of 2 at the power of 23, it's 7 milliseconds. That's a huge number. It's quite fast. So how can we use this? Of course, if you look back to your DSP lessons, that's pretty simple, in fact. A convolution can be, I mean, applying an FIR to a signal is just making a convolution. And the convolution, you can use the FFT. That's pretty simple. I mean, that's pretty known. You take the input signal, you do the FFT, you take your filter, you do the FFT here, and then you make a product of the two vectors. There is a bug. It's FFT minus 1. There is a bug here. Inverse FFT. And you get your output. So basically, you do FFT, FFT multiplication, inverse FFT, and you have your output. That is for one single block. Okay? That's quite good. It works well. But this is for a steady signal, not a stream. So if you want to do this for a stream, there is an improved version of this algorithm, which is called the overlap save or overlap hat. I use the overlap save, which is basically sliding a window, sliding blocks, moving the input, doing the computation, and so on and so on and repeat this. The key point here is that you use always the same filter. So you can compute the FFT of the filter once and keep it. And the input, you will see, can be reused several times. So basically, if you do this in the GPU, the performances are quite interesting. And this is what I did. And this is what I'm going to show you here. So the idea is, this is the architecture of the code I'm proposing. You receive the samples from the SDR. You do a first FFT. So you push the samples into the GPU RAM. Okay? Then your code does a first FFT or the incoming block. You assume that you've done previously at the init the FFT for the several filters you want to apply. So here in this example, I have two. You do the connexer product, modifications for both FFT, the reverse FFT, and the decimation. And you're done. There is one trick. I will come back to it in a few slides. So basically, it means that, sorry, if I go back to this slide, excuse me, you do this FFT in fact only once. You reuse it for the different channels you want. You have done the FFT for the filters once. So in practice for each new incoming block of samples, you have to do one FFT here, modifications, FFT minus one, and decimation. And that can be quite fast. All this doesn't need data to move from the GPU memory to the main CPU memory. But that's quite fast in fact. Then one trick and why I have ended with using the CUDA and proprietary API and the NVDA stuff. I've heard from guys in this room that you can now do this in OpenCL. I have not tested, to be honest. One of the trick is that if you don't pay attention to the scheduling, the different channels will be the different codes will run in series, in sequence, FFT and so on and so on. So you will have to wait for the last block of sequence of operations to be finished before you can retrieve all the samples. And you wait, you may end up waiting quite a lot. But if you use this trick just to compile option, switch, then the scheduling inside the GPU is different. And then everything run in parallel. And the difference is quite large, quite big, to be honest. The difference is much faster this way. One last thing is that if we only do what I proposed, then you miss the frequency shifting. There is a problem, the output frequency is not a good one. So you need to apply the NCO to shift in frequency the signal. And of course it's much more efficient to do this at the end because you have less samples. So it's much faster. You do the shifts at the very end and you just use the fact that you have some aliasing. So the code compensates for the aliasing and that's the frequency shift at the very end. Just look at the code. That's easier this way. So what am I proposing this morning? So you have in GitHub a lib, an example. That's a code that is quite old from me, but it works. And the key thing is that you have to allocate maximum number of channels you will use in the beginning, basically because it will allocate in the GPU the RAM for the different operations. Then the code is thread safe. That is to say that you can add, remove, shift, replace, change the number of channels you use, the size of the channels and so on in real time. This is CUDA based. I know that maybe OpenCL could do something that I have not tested. And I have only tested this with NVDA GPUs. So just to give an example of what you can get with this. So I just benchmarked this with two different architectures, the one I had, but I'm sure that I will receive tons of PR to add new figures in the tables on GitHub for sure. So practically speaking on my machine at home, it's a well, average PC with a GT RTX 2060 with one single channel. So throughput is just a bench test code where it's just pushing data to the GPU, making the computation and retrieving the samples. So with one channel, it's roughly 600 mega-samples per second. With two channels, 530. OK. Just as a baseline for comparison with the Jetson XADI-NX, depending on the FST size, that changes quite a lot. And you can reach up to 156 mega-samples per second with two channels. One channel, sorry. And 117 with two channels. The filters were 7200 taps. Excuse me, that's average. You can change this in the code. I'm checking the time because I know Mark will kick me out soon. So just to come to the, just one of the interesting things is that if you look at the figures here, you see that the GPU is roughly 80% used. The PCI is 36%. So there's room for improvements. And if you look at the CPU, one core is 100% and the others are relaxed. So it means that maybe there's room for much faster, in fact, because we are far from overloading the machine. And in fact, if you look in detail, where is the bottleneck? It appears that the bottleneck is the memory copy. The synchronization between copying the memory from host to device, wasting for the threads to start, waiting for the kernels to stop. All this synchronization takes a lot of time. And if you start to plot this in time, NVGA comes with the tool. I don't remember the name, where you can see the different threads in time, how they work. And you clearly see that there's, the bottlenecks come from the synchronization from the host and so there's room for improvement, for sure. So if you want to tune this, you will see that the, of course, the size of the FFT used has a strong impact on the performances. But that really depends on the performances of the GPU you're using. As I said, moving the data from host to GPU is extremely expensive. In the example I was doing, copy from host to device in complex float, I could use complex ints, raw data from the SDR, and there is in the code one example where you can convert the ints 16 to float directly, so it's cheaper. I mean, the amount of data you would copy from the host to the device is much smaller. And I was using LibUSB in real life. I mean, not in the example, but in real life. So it's also very expensive. LibUSB is far from optimized, from optimal, I would say, more than optimized. And of course, one of the important things is that the CPU, as it's not, well, that's the different cores of room for other things. It means that you can do other tasks like paint and eye spectrum on the screen, like send emails, like listen to music, whatever you want. I think that's all thoughts. Thank you very much. I didn't want to spend too much time. And I'll be happy to reply to questions if you have any. Thank you very much. Yes. Yes, please. You said you did the frequency shift at the very end after this, and is it possible to already do at least a significant part of the frequency shift by just offsetting the FFTs? That's what I do. I rotate the FFT. I rotate, yes. But then you have a reminder, because if you do this, you have the shift you perform is an integral fraction of the incoming. So you need a post fine tune. And that's exactly this. Yeah, you're right. That's what I'm doing. Yes? You didn't see an IIR, FIR, or CIC filter? Just FIR. Yeah, because it's just FFT and Chronicle products. That was the simplest approach. Thank you. Yeah? Was there any attempt to match this into the radio? Not yet, to be honest. I'm not good enough in the radio. I had a discussion with Jean-Michel, a side discussion, and there's a plan to do it. The point, I mean, I was not able to do it for them. I don't have enough practice in C-Blocks, so I said, OK, let's do this with the guys who know. So we will come with a proposal. Yes, that's the idea. Typically, the idea would be to have something, if we can do it, that would permit to have messages to change, to add, and remove channels, or tune the channels in radio directly. Because one of the points is that you need to allocate to define how many channels you want to use. So depending on the applications, you might need different numbers of channels. That's why I wasn't able to do it. Any other question? From the audience? Yes? Just a small question. You used a single precision floating point. Very good question, in fact. Single except this one, the frequency shift. Because in CUDA, the sine and cost functions are nightmare. They produce a lot of noise. So in the code, it's written, double precision, don't touch this. Because otherwise, the noise is going up very quickly. Anything else? OK, thank you very much. So there's more folks pressing in. So if I can ask you to give a little bit more space. You didn't need to kick me out. That's quite fine. Bonjour. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.0, "text": " Real-time processing.", "tokens": [50364, 8467, 12, 3766, 9007, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2640832457879577, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.3420618772506714}, {"id": 1, "seek": 0, "start": 7.0, "end": 10.0, "text": " A very brief background.", "tokens": [50714, 316, 588, 5353, 3678, 13, 50864], "temperature": 0.0, "avg_logprob": -0.2640832457879577, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.3420618772506714}, {"id": 2, "seek": 0, "start": 10.0, "end": 12.0, "text": " So I'm Sylvain, Fox 4 Golf Kilo Radio,", "tokens": [50864, 407, 286, 478, 3902, 14574, 491, 11, 11388, 1017, 30176, 591, 10720, 17296, 11, 50964], "temperature": 0.0, "avg_logprob": -0.2640832457879577, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.3420618772506714}, {"id": 3, "seek": 0, "start": 12.0, "end": 15.0, "text": " this is my amateur radio call sign.", "tokens": [50964, 341, 307, 452, 29339, 6477, 818, 1465, 13, 51114], "temperature": 0.0, "avg_logprob": -0.2640832457879577, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.3420618772506714}, {"id": 4, "seek": 0, "start": 15.0, "end": 18.0, "text": " Very briefly about myself, for those who don't know me yet.", "tokens": [51114, 4372, 10515, 466, 2059, 11, 337, 729, 567, 500, 380, 458, 385, 1939, 13, 51264], "temperature": 0.0, "avg_logprob": -0.2640832457879577, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.3420618772506714}, {"id": 5, "seek": 0, "start": 18.0, "end": 22.0, "text": " I'm the founder of a small company in France, doing SDR.", "tokens": [51264, 286, 478, 264, 14917, 295, 257, 1359, 2237, 294, 6190, 11, 884, 318, 9301, 13, 51464], "temperature": 0.0, "avg_logprob": -0.2640832457879577, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.3420618772506714}, {"id": 6, "seek": 0, "start": 22.0, "end": 25.0, "text": " The name is SDR Technologies.", "tokens": [51464, 440, 1315, 307, 318, 9301, 46993, 13, 51614], "temperature": 0.0, "avg_logprob": -0.2640832457879577, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.3420618772506714}, {"id": 7, "seek": 0, "start": 25.0, "end": 29.0, "text": " I'm the most important here to introduce the story about GPU,", "tokens": [51614, 286, 478, 264, 881, 1021, 510, 281, 5366, 264, 1657, 466, 18407, 11, 51814], "temperature": 0.0, "avg_logprob": -0.2640832457879577, "compression_ratio": 1.434782608695652, "no_speech_prob": 0.3420618772506714}, {"id": 8, "seek": 2900, "start": 29.0, "end": 31.0, "text": " and it is the next lines.", "tokens": [50364, 293, 309, 307, 264, 958, 3876, 13, 50464], "temperature": 0.0, "avg_logprob": -0.1878330683944249, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.07977179437875748}, {"id": 9, "seek": 2900, "start": 31.0, "end": 37.0, "text": " So I was working for ONERA, the French Aerospace and, well, military,", "tokens": [50464, 407, 286, 390, 1364, 337, 9299, 1598, 32, 11, 264, 5522, 32459, 35682, 293, 11, 731, 11, 4632, 11, 50764], "temperature": 0.0, "avg_logprob": -0.1878330683944249, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.07977179437875748}, {"id": 10, "seek": 2900, "start": 37.0, "end": 41.0, "text": " I would say affiliated to the Ministry of Defense Research Lab.", "tokens": [50764, 286, 576, 584, 42174, 281, 264, 19720, 295, 17410, 10303, 10137, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1878330683944249, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.07977179437875748}, {"id": 11, "seek": 2900, "start": 41.0, "end": 46.0, "text": " And that explains how this started, and I will come back to this in a slide.", "tokens": [50964, 400, 300, 13948, 577, 341, 1409, 11, 293, 286, 486, 808, 646, 281, 341, 294, 257, 4137, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1878330683944249, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.07977179437875748}, {"id": 12, "seek": 2900, "start": 46.0, "end": 52.0, "text": " So very briefly, the outline of the talk will be that I will explain the motivation", "tokens": [51214, 407, 588, 10515, 11, 264, 16387, 295, 264, 751, 486, 312, 300, 286, 486, 2903, 264, 12335, 51514], "temperature": 0.0, "avg_logprob": -0.1878330683944249, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.07977179437875748}, {"id": 13, "seek": 2900, "start": 52.0, "end": 58.0, "text": " and then try to explain the approach I took when I tested this GPU", "tokens": [51514, 293, 550, 853, 281, 2903, 264, 3109, 286, 1890, 562, 286, 8246, 341, 18407, 51814], "temperature": 0.0, "avg_logprob": -0.1878330683944249, "compression_ratio": 1.5731707317073171, "no_speech_prob": 0.07977179437875748}, {"id": 14, "seek": 5800, "start": 58.0, "end": 62.0, "text": " and why it came, why I had the idea to use this for DDC.", "tokens": [50364, 293, 983, 309, 1361, 11, 983, 286, 632, 264, 1558, 281, 764, 341, 337, 413, 25619, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13859217270560886, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.08195371925830841}, {"id": 15, "seek": 5800, "start": 62.0, "end": 67.0, "text": " And you will see, and I tried to take a few minutes to explain the background,", "tokens": [50564, 400, 291, 486, 536, 11, 293, 286, 3031, 281, 747, 257, 1326, 2077, 281, 2903, 264, 3678, 11, 50814], "temperature": 0.0, "avg_logprob": -0.13859217270560886, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.08195371925830841}, {"id": 16, "seek": 5800, "start": 67.0, "end": 70.0, "text": " not of the code, because it's on GitHub and you can read it,", "tokens": [50814, 406, 295, 264, 3089, 11, 570, 309, 311, 322, 23331, 293, 291, 393, 1401, 309, 11, 50964], "temperature": 0.0, "avg_logprob": -0.13859217270560886, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.08195371925830841}, {"id": 17, "seek": 5800, "start": 70.0, "end": 73.0, "text": " and I'm quite sure you will improve it a lot, no doubt.", "tokens": [50964, 293, 286, 478, 1596, 988, 291, 486, 3470, 309, 257, 688, 11, 572, 6385, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13859217270560886, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.08195371925830841}, {"id": 18, "seek": 5800, "start": 73.0, "end": 77.0, "text": " But just to explain for those who are not yet, who are not familiar with GPU,", "tokens": [51114, 583, 445, 281, 2903, 337, 729, 567, 366, 406, 1939, 11, 567, 366, 406, 4963, 365, 18407, 11, 51314], "temperature": 0.0, "avg_logprob": -0.13859217270560886, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.08195371925830841}, {"id": 19, "seek": 5800, "start": 77.0, "end": 85.0, "text": " and why it can be useful, and what kind of things you can do with it", "tokens": [51314, 293, 983, 309, 393, 312, 4420, 11, 293, 437, 733, 295, 721, 291, 393, 360, 365, 309, 51714], "temperature": 0.0, "avg_logprob": -0.13859217270560886, "compression_ratio": 1.6556016597510372, "no_speech_prob": 0.08195371925830841}, {"id": 20, "seek": 8500, "start": 85.0, "end": 88.0, "text": " as long as you take the time to write code in this.", "tokens": [50364, 382, 938, 382, 291, 747, 264, 565, 281, 2464, 3089, 294, 341, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10159016418457031, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.41508135199546814}, {"id": 21, "seek": 8500, "start": 88.0, "end": 92.0, "text": " So very briefly, the story started a while ago when I was working at ONERA", "tokens": [50514, 407, 588, 10515, 11, 264, 1657, 1409, 257, 1339, 2057, 562, 286, 390, 1364, 412, 9299, 1598, 32, 50714], "temperature": 0.0, "avg_logprob": -0.10159016418457031, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.41508135199546814}, {"id": 22, "seek": 8500, "start": 92.0, "end": 97.0, "text": " where we have radars, and I just took some pictures that you may have seen already.", "tokens": [50714, 689, 321, 362, 2843, 685, 11, 293, 286, 445, 1890, 512, 5242, 300, 291, 815, 362, 1612, 1217, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10159016418457031, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.41508135199546814}, {"id": 23, "seek": 8500, "start": 97.0, "end": 101.0, "text": " One is the Nostradamus, it's an HF over the horizon radar,", "tokens": [50964, 1485, 307, 264, 426, 555, 6206, 45897, 11, 309, 311, 364, 389, 37, 670, 264, 18046, 16544, 11, 51164], "temperature": 0.0, "avg_logprob": -0.10159016418457031, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.41508135199546814}, {"id": 24, "seek": 8500, "start": 101.0, "end": 104.0, "text": " and the other one is Grav, very famous.", "tokens": [51164, 293, 264, 661, 472, 307, 8985, 85, 11, 588, 4618, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10159016418457031, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.41508135199546814}, {"id": 25, "seek": 8500, "start": 104.0, "end": 108.0, "text": " So these two radars were designed and operated in not my team", "tokens": [51314, 407, 613, 732, 2843, 685, 645, 4761, 293, 20826, 294, 406, 452, 1469, 51514], "temperature": 0.0, "avg_logprob": -0.10159016418457031, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.41508135199546814}, {"id": 26, "seek": 8500, "start": 108.0, "end": 112.0, "text": " because I was not leading the team, but in the team I was working in.", "tokens": [51514, 570, 286, 390, 406, 5775, 264, 1469, 11, 457, 294, 264, 1469, 286, 390, 1364, 294, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10159016418457031, "compression_ratio": 1.6394052044609666, "no_speech_prob": 0.41508135199546814}, {"id": 27, "seek": 11200, "start": 112.0, "end": 115.0, "text": " One of the key problems here is that you have a lot of channels.", "tokens": [50364, 1485, 295, 264, 2141, 2740, 510, 307, 300, 291, 362, 257, 688, 295, 9235, 13, 50514], "temperature": 0.0, "avg_logprob": -0.19781402305320459, "compression_ratio": 1.5887096774193548, "no_speech_prob": 0.5406490564346313}, {"id": 28, "seek": 11200, "start": 115.0, "end": 117.0, "text": " One antenna is one channel,", "tokens": [50514, 1485, 24573, 307, 472, 2269, 11, 50614], "temperature": 0.0, "avg_logprob": -0.19781402305320459, "compression_ratio": 1.5887096774193548, "no_speech_prob": 0.5406490564346313}, {"id": 29, "seek": 11200, "start": 117.0, "end": 120.0, "text": " means that you gather a huge amount of data.", "tokens": [50614, 1355, 300, 291, 5448, 257, 2603, 2372, 295, 1412, 13, 50764], "temperature": 0.0, "avg_logprob": -0.19781402305320459, "compression_ratio": 1.5887096774193548, "no_speech_prob": 0.5406490564346313}, {"id": 30, "seek": 11200, "start": 120.0, "end": 124.0, "text": " And one of the key problems is how do you process this data in real time.", "tokens": [50764, 400, 472, 295, 264, 2141, 2740, 307, 577, 360, 291, 1399, 341, 1412, 294, 957, 565, 13, 50964], "temperature": 0.0, "avg_logprob": -0.19781402305320459, "compression_ratio": 1.5887096774193548, "no_speech_prob": 0.5406490564346313}, {"id": 31, "seek": 11200, "start": 124.0, "end": 128.0, "text": " And at that time, in my, don't remember exactly the year,", "tokens": [50964, 400, 412, 300, 565, 11, 294, 452, 11, 500, 380, 1604, 2293, 264, 1064, 11, 51164], "temperature": 0.0, "avg_logprob": -0.19781402305320459, "compression_ratio": 1.5887096774193548, "no_speech_prob": 0.5406490564346313}, {"id": 32, "seek": 11200, "start": 128.0, "end": 133.0, "text": " NVIDIA released the Tegrar K1, which was very small stuff,", "tokens": [51164, 426, 3958, 6914, 4736, 264, 1989, 861, 289, 591, 16, 11, 597, 390, 588, 1359, 1507, 11, 51414], "temperature": 0.0, "avg_logprob": -0.19781402305320459, "compression_ratio": 1.5887096774193548, "no_speech_prob": 0.5406490564346313}, {"id": 33, "seek": 11200, "start": 133.0, "end": 139.0, "text": " but looking promising, sorry, in particular for embedded systems.", "tokens": [51414, 457, 1237, 20257, 11, 2597, 11, 294, 1729, 337, 16741, 3652, 13, 51714], "temperature": 0.0, "avg_logprob": -0.19781402305320459, "compression_ratio": 1.5887096774193548, "no_speech_prob": 0.5406490564346313}, {"id": 34, "seek": 13900, "start": 139.0, "end": 143.0, "text": " So my boss said, can you have a look at this", "tokens": [50364, 407, 452, 5741, 848, 11, 393, 291, 362, 257, 574, 412, 341, 50564], "temperature": 0.0, "avg_logprob": -0.08551730323083621, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.023291220888495445}, {"id": 35, "seek": 13900, "start": 143.0, "end": 147.0, "text": " and tell us if that can bring anything to the game.", "tokens": [50564, 293, 980, 505, 498, 300, 393, 1565, 1340, 281, 264, 1216, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08551730323083621, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.023291220888495445}, {"id": 36, "seek": 13900, "start": 147.0, "end": 152.0, "text": " And just to make also the story very short, the answer was yes, it's useful,", "tokens": [50764, 400, 445, 281, 652, 611, 264, 1657, 588, 2099, 11, 264, 1867, 390, 2086, 11, 309, 311, 4420, 11, 51014], "temperature": 0.0, "avg_logprob": -0.08551730323083621, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.023291220888495445}, {"id": 37, "seek": 13900, "start": 152.0, "end": 157.0, "text": " and that made my decision to leave the research team and found my company.", "tokens": [51014, 293, 300, 1027, 452, 3537, 281, 1856, 264, 2132, 1469, 293, 1352, 452, 2237, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08551730323083621, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.023291220888495445}, {"id": 38, "seek": 13900, "start": 157.0, "end": 161.0, "text": " So yes, the quick answer is yes, it works.", "tokens": [51264, 407, 2086, 11, 264, 1702, 1867, 307, 2086, 11, 309, 1985, 13, 51464], "temperature": 0.0, "avg_logprob": -0.08551730323083621, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.023291220888495445}, {"id": 39, "seek": 13900, "start": 161.0, "end": 164.0, "text": " Okay, so now let's go back to more serious things.", "tokens": [51464, 1033, 11, 370, 586, 718, 311, 352, 646, 281, 544, 3156, 721, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08551730323083621, "compression_ratio": 1.5688073394495412, "no_speech_prob": 0.023291220888495445}, {"id": 40, "seek": 16400, "start": 164.0, "end": 169.0, "text": " This is from the leaflet, I would say, from the Tegrar K1 at that time.", "tokens": [50364, 639, 307, 490, 264, 10871, 2631, 11, 286, 576, 584, 11, 490, 264, 1989, 861, 289, 591, 16, 412, 300, 565, 13, 50614], "temperature": 0.0, "avg_logprob": -0.20220073576896422, "compression_ratio": 1.5, "no_speech_prob": 0.0461922213435173}, {"id": 41, "seek": 16400, "start": 169.0, "end": 179.0, "text": " They were promising something like 326 gigaflops, oh, five watts, 99 euros for the deathboard.", "tokens": [50614, 814, 645, 20257, 746, 411, 8858, 21, 8741, 2792, 75, 3370, 11, 1954, 11, 1732, 31247, 11, 11803, 14160, 337, 264, 2966, 3787, 13, 51114], "temperature": 0.0, "avg_logprob": -0.20220073576896422, "compression_ratio": 1.5, "no_speech_prob": 0.0461922213435173}, {"id": 42, "seek": 16400, "start": 179.0, "end": 182.0, "text": " You say, who? Does this really work?", "tokens": [51114, 509, 584, 11, 567, 30, 4402, 341, 534, 589, 30, 51264], "temperature": 0.0, "avg_logprob": -0.20220073576896422, "compression_ratio": 1.5, "no_speech_prob": 0.0461922213435173}, {"id": 43, "seek": 16400, "start": 182.0, "end": 184.0, "text": " And that was the idea.", "tokens": [51264, 400, 300, 390, 264, 1558, 13, 51364], "temperature": 0.0, "avg_logprob": -0.20220073576896422, "compression_ratio": 1.5, "no_speech_prob": 0.0461922213435173}, {"id": 44, "seek": 16400, "start": 184.0, "end": 190.0, "text": " That was the idea was to test this if that can be used for software-defined radio.", "tokens": [51364, 663, 390, 264, 1558, 390, 281, 1500, 341, 498, 300, 393, 312, 1143, 337, 4722, 12, 37716, 6477, 13, 51664], "temperature": 0.0, "avg_logprob": -0.20220073576896422, "compression_ratio": 1.5, "no_speech_prob": 0.0461922213435173}, {"id": 45, "seek": 19000, "start": 191.0, "end": 196.0, "text": " I'm assuming here that most of you have a very brief and very quick idea of what a GPU is,", "tokens": [50414, 286, 478, 11926, 510, 300, 881, 295, 291, 362, 257, 588, 5353, 293, 588, 1702, 1558, 295, 437, 257, 18407, 307, 11, 50664], "temperature": 0.0, "avg_logprob": -0.11162569234659384, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.008511927910149097}, {"id": 46, "seek": 19000, "start": 196.0, "end": 200.0, "text": " so I will just take a few seconds to explain.", "tokens": [50664, 370, 286, 486, 445, 747, 257, 1326, 3949, 281, 2903, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11162569234659384, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.008511927910149097}, {"id": 47, "seek": 19000, "start": 200.0, "end": 205.0, "text": " I'm just realizing that if I move to the screen, nobody will see from the remote, I guess.", "tokens": [50864, 286, 478, 445, 16734, 300, 498, 286, 1286, 281, 264, 2568, 11, 5079, 486, 536, 490, 264, 8607, 11, 286, 2041, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11162569234659384, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.008511927910149097}, {"id": 48, "seek": 19000, "start": 205.0, "end": 209.0, "text": " Yeah, okay, I'll try. Sorry.", "tokens": [51114, 865, 11, 1392, 11, 286, 603, 853, 13, 4919, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11162569234659384, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.008511927910149097}, {"id": 49, "seek": 19000, "start": 209.0, "end": 215.0, "text": " So just to explain the model, this architecture has two things inside.", "tokens": [51314, 407, 445, 281, 2903, 264, 2316, 11, 341, 9482, 575, 732, 721, 1854, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11162569234659384, "compression_ratio": 1.4931506849315068, "no_speech_prob": 0.008511927910149097}, {"id": 50, "seek": 21500, "start": 215.0, "end": 220.0, "text": " You have the ARM ARM processor, this GPU, this is the four cores, this one,", "tokens": [50364, 509, 362, 264, 45209, 45209, 15321, 11, 341, 18407, 11, 341, 307, 264, 1451, 24826, 11, 341, 472, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1294584814107643, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.0896763876080513}, {"id": 51, "seek": 21500, "start": 220.0, "end": 226.0, "text": " and you have the CUDA cores, 192 cores next to it.", "tokens": [50614, 293, 291, 362, 264, 29777, 7509, 24826, 11, 1294, 17, 24826, 958, 281, 309, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1294584814107643, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.0896763876080513}, {"id": 52, "seek": 21500, "start": 226.0, "end": 230.0, "text": " And the good thing is that they share the same memory.", "tokens": [50914, 400, 264, 665, 551, 307, 300, 436, 2073, 264, 912, 4675, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1294584814107643, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.0896763876080513}, {"id": 53, "seek": 21500, "start": 230.0, "end": 236.0, "text": " Okay, if you have a PC, you have your core, whatever you want,", "tokens": [51114, 1033, 11, 498, 291, 362, 257, 6465, 11, 291, 362, 428, 4965, 11, 2035, 291, 528, 11, 51414], "temperature": 0.0, "avg_logprob": -0.1294584814107643, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.0896763876080513}, {"id": 54, "seek": 21500, "start": 236.0, "end": 239.0, "text": " and in one of the slots you have the GPU cards,", "tokens": [51414, 293, 294, 472, 295, 264, 24266, 291, 362, 264, 18407, 5632, 11, 51564], "temperature": 0.0, "avg_logprob": -0.1294584814107643, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.0896763876080513}, {"id": 55, "seek": 21500, "start": 239.0, "end": 243.0, "text": " and they have to transmit, they have to share data through the PCI bus.", "tokens": [51564, 293, 436, 362, 281, 17831, 11, 436, 362, 281, 2073, 1412, 807, 264, 6465, 40, 1255, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1294584814107643, "compression_ratio": 1.7333333333333334, "no_speech_prob": 0.0896763876080513}, {"id": 56, "seek": 24300, "start": 243.0, "end": 246.0, "text": " In this one, it's a bus, it's kind of PCI bus,", "tokens": [50364, 682, 341, 472, 11, 309, 311, 257, 1255, 11, 309, 311, 733, 295, 6465, 40, 1255, 11, 50514], "temperature": 0.0, "avg_logprob": -0.1035866997458718, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002000265521928668}, {"id": 57, "seek": 24300, "start": 246.0, "end": 249.0, "text": " but you will see that the performances are much more interesting.", "tokens": [50514, 457, 291, 486, 536, 300, 264, 16087, 366, 709, 544, 1880, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1035866997458718, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002000265521928668}, {"id": 58, "seek": 24300, "start": 249.0, "end": 253.0, "text": " The second thing is that one core does one symbol operation at a time.", "tokens": [50664, 440, 1150, 551, 307, 300, 472, 4965, 775, 472, 5986, 6916, 412, 257, 565, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1035866997458718, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002000265521928668}, {"id": 59, "seek": 24300, "start": 253.0, "end": 260.0, "text": " So in this very simple example, I'm adding AC is equal to A plus B,", "tokens": [50864, 407, 294, 341, 588, 2199, 1365, 11, 286, 478, 5127, 8157, 307, 2681, 281, 316, 1804, 363, 11, 51214], "temperature": 0.0, "avg_logprob": -0.1035866997458718, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002000265521928668}, {"id": 60, "seek": 24300, "start": 260.0, "end": 267.0, "text": " and the code is just saying for each CPU, each CUDA core, take A, take B,", "tokens": [51214, 293, 264, 3089, 307, 445, 1566, 337, 1184, 13199, 11, 1184, 29777, 7509, 4965, 11, 747, 316, 11, 747, 363, 11, 51564], "temperature": 0.0, "avg_logprob": -0.1035866997458718, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002000265521928668}, {"id": 61, "seek": 24300, "start": 267.0, "end": 270.0, "text": " make the sum, and store in C. That's pretty simple.", "tokens": [51564, 652, 264, 2408, 11, 293, 3531, 294, 383, 13, 663, 311, 1238, 2199, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1035866997458718, "compression_ratio": 1.584033613445378, "no_speech_prob": 0.002000265521928668}, {"id": 62, "seek": 27300, "start": 274.0, "end": 277.0, "text": " So the key point here is that there are three things.", "tokens": [50414, 407, 264, 2141, 935, 510, 307, 300, 456, 366, 1045, 721, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09387206016702855, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.005021403077989817}, {"id": 63, "seek": 27300, "start": 277.0, "end": 282.0, "text": " One is push the data, the second is push the code, then run the code,", "tokens": [50564, 1485, 307, 2944, 264, 1412, 11, 264, 1150, 307, 2944, 264, 3089, 11, 550, 1190, 264, 3089, 11, 50814], "temperature": 0.0, "avg_logprob": -0.09387206016702855, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.005021403077989817}, {"id": 64, "seek": 27300, "start": 282.0, "end": 284.0, "text": " and fetch the results.", "tokens": [50814, 293, 23673, 264, 3542, 13, 50914], "temperature": 0.0, "avg_logprob": -0.09387206016702855, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.005021403077989817}, {"id": 65, "seek": 27300, "start": 284.0, "end": 289.0, "text": " Keep in mind that you have to push the data, and this costs a lot, of course.", "tokens": [50914, 5527, 294, 1575, 300, 291, 362, 281, 2944, 264, 1412, 11, 293, 341, 5497, 257, 688, 11, 295, 1164, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09387206016702855, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.005021403077989817}, {"id": 66, "seek": 27300, "start": 289.0, "end": 296.0, "text": " So coming back to our SDR and DSP, what are the things that may need power?", "tokens": [51164, 407, 1348, 646, 281, 527, 318, 9301, 293, 15816, 47, 11, 437, 366, 264, 721, 300, 815, 643, 1347, 30, 51514], "temperature": 0.0, "avg_logprob": -0.09387206016702855, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.005021403077989817}, {"id": 67, "seek": 27300, "start": 296.0, "end": 298.0, "text": " Well, just examples.", "tokens": [51514, 1042, 11, 445, 5110, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09387206016702855, "compression_ratio": 1.621212121212121, "no_speech_prob": 0.005021403077989817}, {"id": 68, "seek": 29800, "start": 299.0, "end": 304.0, "text": " The one I will elaborate this morning is the DDC, digital down converter,", "tokens": [50414, 440, 472, 286, 486, 20945, 341, 2446, 307, 264, 413, 25619, 11, 4562, 760, 33905, 11, 50664], "temperature": 0.0, "avg_logprob": -0.13926917259846258, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.023241646587848663}, {"id": 69, "seek": 29800, "start": 304.0, "end": 310.0, "text": " but you have many others, like I have not yet, and I will not describe this morning,", "tokens": [50664, 457, 291, 362, 867, 2357, 11, 411, 286, 362, 406, 1939, 11, 293, 286, 486, 406, 6786, 341, 2446, 11, 50964], "temperature": 0.0, "avg_logprob": -0.13926917259846258, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.023241646587848663}, {"id": 70, "seek": 29800, "start": 310.0, "end": 312.0, "text": " I have not yet investigated so much.", "tokens": [50964, 286, 362, 406, 1939, 30070, 370, 709, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13926917259846258, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.023241646587848663}, {"id": 71, "seek": 29800, "start": 312.0, "end": 314.0, "text": " Feel free to take a seat, no worries.", "tokens": [51064, 14113, 1737, 281, 747, 257, 6121, 11, 572, 16340, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13926917259846258, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.023241646587848663}, {"id": 72, "seek": 29800, "start": 316.0, "end": 321.0, "text": " Interpolation, decimation, clock recovery, synchronization, pattern detection, and so on and so on.", "tokens": [51264, 5751, 12892, 399, 11, 979, 332, 399, 11, 7830, 8597, 11, 19331, 2144, 11, 5102, 17784, 11, 293, 370, 322, 293, 370, 322, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13926917259846258, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.023241646587848663}, {"id": 73, "seek": 29800, "start": 321.0, "end": 327.0, "text": " One of the key issues here is that some algorithms are extremely difficult to run in parallel", "tokens": [51514, 1485, 295, 264, 2141, 2663, 510, 307, 300, 512, 14642, 366, 4664, 2252, 281, 1190, 294, 8952, 51814], "temperature": 0.0, "avg_logprob": -0.13926917259846258, "compression_ratio": 1.6486486486486487, "no_speech_prob": 0.023241646587848663}, {"id": 74, "seek": 32700, "start": 327.0, "end": 330.0, "text": " while others, it's much simpler.", "tokens": [50364, 1339, 2357, 11, 309, 311, 709, 18587, 13, 50514], "temperature": 0.0, "avg_logprob": -0.14020366668701173, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0036453353241086006}, {"id": 75, "seek": 32700, "start": 331.0, "end": 334.0, "text": " And some of them just don't work in parallel easily.", "tokens": [50564, 400, 512, 295, 552, 445, 500, 380, 589, 294, 8952, 3612, 13, 50714], "temperature": 0.0, "avg_logprob": -0.14020366668701173, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0036453353241086006}, {"id": 76, "seek": 32700, "start": 335.0, "end": 341.0, "text": " So in this example, let's focus on something simple, which is multiband DDC.", "tokens": [50764, 407, 294, 341, 1365, 11, 718, 311, 1879, 322, 746, 2199, 11, 597, 307, 2120, 897, 474, 413, 25619, 13, 51064], "temperature": 0.0, "avg_logprob": -0.14020366668701173, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0036453353241086006}, {"id": 77, "seek": 32700, "start": 341.0, "end": 347.0, "text": " So we'll assume that we have a white band signal coming from a white band SDR, whatever it is.", "tokens": [51064, 407, 321, 603, 6552, 300, 321, 362, 257, 2418, 4116, 6358, 1348, 490, 257, 2418, 4116, 318, 9301, 11, 2035, 309, 307, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14020366668701173, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0036453353241086006}, {"id": 78, "seek": 32700, "start": 347.0, "end": 349.0, "text": " I took DHF example.", "tokens": [51364, 286, 1890, 28606, 37, 1365, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14020366668701173, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0036453353241086006}, {"id": 79, "seek": 32700, "start": 349.0, "end": 356.0, "text": " So here, for example, we have a receiver that is transferring to the memory.", "tokens": [51464, 407, 510, 11, 337, 1365, 11, 321, 362, 257, 20086, 300, 307, 31437, 281, 264, 4675, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14020366668701173, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.0036453353241086006}, {"id": 80, "seek": 35600, "start": 357.0, "end": 363.0, "text": " To the stuff, the device, a 50 mega samples per second bandwidth.", "tokens": [50414, 1407, 264, 1507, 11, 264, 4302, 11, 257, 2625, 17986, 10938, 680, 1150, 23647, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16337545802084247, "compression_ratio": 1.5198019801980198, "no_speech_prob": 0.005080363713204861}, {"id": 81, "seek": 35600, "start": 364.0, "end": 367.0, "text": " And we want to extract from this small subbands.", "tokens": [50764, 400, 321, 528, 281, 8947, 490, 341, 1359, 1422, 30014, 13, 50914], "temperature": 0.0, "avg_logprob": -0.16337545802084247, "compression_ratio": 1.5198019801980198, "no_speech_prob": 0.005080363713204861}, {"id": 82, "seek": 35600, "start": 368.0, "end": 375.0, "text": " OK, so I took examples of DHF bands, one at 7 megs, another one at 14 megs, and so on.", "tokens": [50964, 2264, 11, 370, 286, 1890, 5110, 295, 28606, 37, 13543, 11, 472, 412, 1614, 10816, 82, 11, 1071, 472, 412, 3499, 10816, 82, 11, 293, 370, 322, 13, 51314], "temperature": 0.0, "avg_logprob": -0.16337545802084247, "compression_ratio": 1.5198019801980198, "no_speech_prob": 0.005080363713204861}, {"id": 83, "seek": 35600, "start": 375.0, "end": 376.0, "text": " That's just examples.", "tokens": [51314, 663, 311, 445, 5110, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16337545802084247, "compression_ratio": 1.5198019801980198, "no_speech_prob": 0.005080363713204861}, {"id": 84, "seek": 35600, "start": 376.0, "end": 382.0, "text": " The core thing is how do we extract the subbands from the single white band signal?", "tokens": [51364, 440, 4965, 551, 307, 577, 360, 321, 8947, 264, 1422, 30014, 490, 264, 2167, 2418, 4116, 6358, 30, 51664], "temperature": 0.0, "avg_logprob": -0.16337545802084247, "compression_ratio": 1.5198019801980198, "no_speech_prob": 0.005080363713204861}, {"id": 85, "seek": 38200, "start": 383.0, "end": 386.0, "text": " So for one channel, it's pretty easy.", "tokens": [50414, 407, 337, 472, 2269, 11, 309, 311, 1238, 1858, 13, 50564], "temperature": 0.0, "avg_logprob": -0.10756195033038105, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0007327806670218706}, {"id": 86, "seek": 38200, "start": 386.0, "end": 387.0, "text": " And that's the classical stuff.", "tokens": [50564, 400, 300, 311, 264, 13735, 1507, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10756195033038105, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0007327806670218706}, {"id": 87, "seek": 38200, "start": 387.0, "end": 388.0, "text": " This is a DDC.", "tokens": [50614, 639, 307, 257, 413, 25619, 13, 50664], "temperature": 0.0, "avg_logprob": -0.10756195033038105, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0007327806670218706}, {"id": 88, "seek": 38200, "start": 388.0, "end": 393.0, "text": " So you basically translate the frequency and then you make some low pass filtering.", "tokens": [50664, 407, 291, 1936, 13799, 264, 7893, 293, 550, 291, 652, 512, 2295, 1320, 30822, 13, 50914], "temperature": 0.0, "avg_logprob": -0.10756195033038105, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0007327806670218706}, {"id": 89, "seek": 38200, "start": 393.0, "end": 396.0, "text": " And then you throw away all the samples you don't need.", "tokens": [50914, 400, 550, 291, 3507, 1314, 439, 264, 10938, 291, 500, 380, 643, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10756195033038105, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0007327806670218706}, {"id": 90, "seek": 38200, "start": 396.0, "end": 397.0, "text": " That's very classical.", "tokens": [51064, 663, 311, 588, 13735, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10756195033038105, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0007327806670218706}, {"id": 91, "seek": 38200, "start": 397.0, "end": 399.0, "text": " I have not invented anything here.", "tokens": [51114, 286, 362, 406, 14479, 1340, 510, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10756195033038105, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0007327806670218706}, {"id": 92, "seek": 38200, "start": 402.0, "end": 409.0, "text": " And I guess you all know by heart what is a low pass filter, but just take a few seconds to remind how it works.", "tokens": [51364, 400, 286, 2041, 291, 439, 458, 538, 1917, 437, 307, 257, 2295, 1320, 6608, 11, 457, 445, 747, 257, 1326, 3949, 281, 4160, 577, 309, 1985, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10756195033038105, "compression_ratio": 1.6188524590163935, "no_speech_prob": 0.0007327806670218706}, {"id": 93, "seek": 40900, "start": 409.0, "end": 413.0, "text": " On one hand, you have the input, the samples coming from the SDR.", "tokens": [50364, 1282, 472, 1011, 11, 291, 362, 264, 4846, 11, 264, 10938, 1348, 490, 264, 318, 9301, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12507783640985903, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.0007542290259152651}, {"id": 94, "seek": 40900, "start": 413.0, "end": 417.0, "text": " On the other hand, you have the filter you want to apply for the low pass filtering.", "tokens": [50564, 1282, 264, 661, 1011, 11, 291, 362, 264, 6608, 291, 528, 281, 3079, 337, 264, 2295, 1320, 30822, 13, 50764], "temperature": 0.0, "avg_logprob": -0.12507783640985903, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.0007542290259152651}, {"id": 95, "seek": 40900, "start": 417.0, "end": 424.0, "text": " And you make a convolution, basically some modifications and additions, and you retrieve the output.", "tokens": [50764, 400, 291, 652, 257, 45216, 11, 1936, 512, 26881, 293, 35113, 11, 293, 291, 30254, 264, 5598, 13, 51114], "temperature": 0.0, "avg_logprob": -0.12507783640985903, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.0007542290259152651}, {"id": 96, "seek": 40900, "start": 424.0, "end": 425.0, "text": " OK.", "tokens": [51114, 2264, 13, 51164], "temperature": 0.0, "avg_logprob": -0.12507783640985903, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.0007542290259152651}, {"id": 97, "seek": 40900, "start": 426.0, "end": 429.0, "text": " Now let's look a bit more in my example.", "tokens": [51214, 823, 718, 311, 574, 257, 857, 544, 294, 452, 1365, 13, 51364], "temperature": 0.0, "avg_logprob": -0.12507783640985903, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.0007542290259152651}, {"id": 98, "seek": 40900, "start": 429.0, "end": 431.0, "text": " How many taps do we really have?", "tokens": [51364, 1012, 867, 42536, 360, 321, 534, 362, 30, 51464], "temperature": 0.0, "avg_logprob": -0.12507783640985903, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.0007542290259152651}, {"id": 99, "seek": 40900, "start": 431.0, "end": 438.0, "text": " So for this example, let's assume that we have a 50 megahertz, so 50 mega samples per second bandwidth incoming.", "tokens": [51464, 407, 337, 341, 1365, 11, 718, 311, 6552, 300, 321, 362, 257, 2625, 17986, 35655, 11, 370, 2625, 17986, 10938, 680, 1150, 23647, 22341, 13, 51814], "temperature": 0.0, "avg_logprob": -0.12507783640985903, "compression_ratio": 1.6679245283018869, "no_speech_prob": 0.0007542290259152651}, {"id": 100, "seek": 43900, "start": 439.0, "end": 442.0, "text": " And we want three kilohertz just to extract the audio.", "tokens": [50364, 400, 321, 528, 1045, 21112, 35655, 445, 281, 8947, 264, 6278, 13, 50514], "temperature": 0.0, "avg_logprob": -0.1025449015059561, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.009488844312727451}, {"id": 101, "seek": 43900, "start": 442.0, "end": 444.0, "text": " This is a fully digital system.", "tokens": [50514, 639, 307, 257, 4498, 4562, 1185, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1025449015059561, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.009488844312727451}, {"id": 102, "seek": 43900, "start": 444.0, "end": 449.0, "text": " So at the end, we want audio, plain old voice, someone speaking.", "tokens": [50614, 407, 412, 264, 917, 11, 321, 528, 6278, 11, 11121, 1331, 3177, 11, 1580, 4124, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1025449015059561, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.009488844312727451}, {"id": 103, "seek": 43900, "start": 449.0, "end": 452.0, "text": " And we assume that three kilohertz is enough.", "tokens": [50864, 400, 321, 6552, 300, 1045, 21112, 35655, 307, 1547, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1025449015059561, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.009488844312727451}, {"id": 104, "seek": 43900, "start": 452.0, "end": 460.0, "text": " There's a lot of different approaches to estimate exactly, to estimate as accurately as possible the number of taps we need.", "tokens": [51014, 821, 311, 257, 688, 295, 819, 11587, 281, 12539, 2293, 11, 281, 12539, 382, 20095, 382, 1944, 264, 1230, 295, 42536, 321, 643, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1025449015059561, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.009488844312727451}, {"id": 105, "seek": 43900, "start": 460.0, "end": 462.0, "text": " I saw many, I tried to find an example.", "tokens": [51414, 286, 1866, 867, 11, 286, 3031, 281, 915, 364, 1365, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1025449015059561, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.009488844312727451}, {"id": 106, "seek": 43900, "start": 462.0, "end": 465.0, "text": " I saw plenty and pages from you, Marcus.", "tokens": [51514, 286, 1866, 7140, 293, 7183, 490, 291, 11, 26574, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1025449015059561, "compression_ratio": 1.6055776892430278, "no_speech_prob": 0.009488844312727451}, {"id": 107, "seek": 46500, "start": 466.0, "end": 470.0, "text": " Many of, I was going to copy and paste some of yours to avoid questions.", "tokens": [50414, 5126, 295, 11, 286, 390, 516, 281, 5055, 293, 9163, 512, 295, 6342, 281, 5042, 1651, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18661259242466519, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.004086655098944902}, {"id": 108, "seek": 46500, "start": 470.0, "end": 473.0, "text": " No, I'm joking, of course.", "tokens": [50614, 883, 11, 286, 478, 17396, 11, 295, 1164, 13, 50764], "temperature": 0.0, "avg_logprob": -0.18661259242466519, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.004086655098944902}, {"id": 109, "seek": 46500, "start": 473.0, "end": 476.0, "text": " Well, there's many ways to estimate the number of taps.", "tokens": [50764, 1042, 11, 456, 311, 867, 2098, 281, 12539, 264, 1230, 295, 42536, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18661259242466519, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.004086655098944902}, {"id": 110, "seek": 46500, "start": 476.0, "end": 484.0, "text": " And one of the approaches is this, I don't remember, yes, the Iris approximation, sorry.", "tokens": [50914, 400, 472, 295, 264, 11587, 307, 341, 11, 286, 500, 380, 1604, 11, 2086, 11, 264, 40789, 28023, 11, 2597, 13, 51314], "temperature": 0.0, "avg_logprob": -0.18661259242466519, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.004086655098944902}, {"id": 111, "seek": 46500, "start": 484.0, "end": 489.0, "text": " And so if you do the calculation, you arrive at 50,500 taps.", "tokens": [51314, 400, 370, 498, 291, 360, 264, 17108, 11, 291, 8881, 412, 2625, 11, 7526, 42536, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18661259242466519, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.004086655098944902}, {"id": 112, "seek": 46500, "start": 489.0, "end": 490.0, "text": " OK.", "tokens": [51564, 2264, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18661259242466519, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.004086655098944902}, {"id": 113, "seek": 46500, "start": 490.0, "end": 492.0, "text": " 50,500, so what?", "tokens": [51614, 2625, 11, 7526, 11, 370, 437, 30, 51714], "temperature": 0.0, "avg_logprob": -0.18661259242466519, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.004086655098944902}, {"id": 114, "seek": 46500, "start": 493.0, "end": 494.0, "text": " So what?", "tokens": [51764, 407, 437, 30, 51814], "temperature": 0.0, "avg_logprob": -0.18661259242466519, "compression_ratio": 1.543778801843318, "no_speech_prob": 0.004086655098944902}, {"id": 115, "seek": 49500, "start": 495.0, "end": 498.0, "text": " Now let's go back to this stuff.", "tokens": [50364, 823, 718, 311, 352, 646, 281, 341, 1507, 13, 50514], "temperature": 0.0, "avg_logprob": -0.13253164291381836, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.002981022000312805}, {"id": 116, "seek": 49500, "start": 498.0, "end": 509.0, "text": " So to do the convolution with 50,500 taps here, you need to do this 50,500 times for each sample.", "tokens": [50514, 407, 281, 360, 264, 45216, 365, 2625, 11, 7526, 42536, 510, 11, 291, 643, 281, 360, 341, 2625, 11, 7526, 1413, 337, 1184, 6889, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13253164291381836, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.002981022000312805}, {"id": 117, "seek": 49500, "start": 509.0, "end": 522.0, "text": " It means that to get one value out of the FIR filter, the Lopez filter, you need to take 50,500 inputs, 50,500 coefficients, do the multiplications, do the sum.", "tokens": [51064, 467, 1355, 300, 281, 483, 472, 2158, 484, 295, 264, 41538, 6608, 11, 264, 36077, 6608, 11, 291, 643, 281, 747, 2625, 11, 7526, 15743, 11, 2625, 11, 7526, 31994, 11, 360, 264, 17596, 763, 11, 360, 264, 2408, 13, 51714], "temperature": 0.0, "avg_logprob": -0.13253164291381836, "compression_ratio": 1.572972972972973, "no_speech_prob": 0.002981022000312805}, {"id": 118, "seek": 52200, "start": 522.0, "end": 523.0, "text": " And you have one sample.", "tokens": [50364, 400, 291, 362, 472, 6889, 13, 50414], "temperature": 0.0, "avg_logprob": -0.12156951006721048, "compression_ratio": 1.5958549222797926, "no_speech_prob": 0.006822654977440834}, {"id": 119, "seek": 52200, "start": 523.0, "end": 526.0, "text": " And you have to do this for every incoming sample.", "tokens": [50414, 400, 291, 362, 281, 360, 341, 337, 633, 22341, 6889, 13, 50564], "temperature": 0.0, "avg_logprob": -0.12156951006721048, "compression_ratio": 1.5958549222797926, "no_speech_prob": 0.006822654977440834}, {"id": 120, "seek": 52200, "start": 526.0, "end": 531.0, "text": " That begins to be a huge amount of processing.", "tokens": [50564, 663, 7338, 281, 312, 257, 2603, 2372, 295, 9007, 13, 50814], "temperature": 0.0, "avg_logprob": -0.12156951006721048, "compression_ratio": 1.5958549222797926, "no_speech_prob": 0.006822654977440834}, {"id": 121, "seek": 52200, "start": 531.0, "end": 541.0, "text": " Of course, if you have, you have all experienced many low cost SDR applications running on low cost PCs and they do this in real time.", "tokens": [50814, 2720, 1164, 11, 498, 291, 362, 11, 291, 362, 439, 6751, 867, 2295, 2063, 318, 9301, 5821, 2614, 322, 2295, 2063, 46913, 293, 436, 360, 341, 294, 957, 565, 13, 51314], "temperature": 0.0, "avg_logprob": -0.12156951006721048, "compression_ratio": 1.5958549222797926, "no_speech_prob": 0.006822654977440834}, {"id": 122, "seek": 52200, "start": 541.0, "end": 542.0, "text": " So how do they do it?", "tokens": [51314, 407, 577, 360, 436, 360, 309, 30, 51364], "temperature": 0.0, "avg_logprob": -0.12156951006721048, "compression_ratio": 1.5958549222797926, "no_speech_prob": 0.006822654977440834}, {"id": 123, "seek": 52200, "start": 542.0, "end": 544.0, "text": " Of course, there are tricks.", "tokens": [51364, 2720, 1164, 11, 456, 366, 11733, 13, 51464], "temperature": 0.0, "avg_logprob": -0.12156951006721048, "compression_ratio": 1.5958549222797926, "no_speech_prob": 0.006822654977440834}, {"id": 124, "seek": 54400, "start": 544.0, "end": 554.0, "text": " One of the most, the easiest one is to divide by two instead of going straight from 50 megs to 3 kilohertz, which is nice, but probably not the best one.", "tokens": [50364, 1485, 295, 264, 881, 11, 264, 12889, 472, 307, 281, 9845, 538, 732, 2602, 295, 516, 2997, 490, 2625, 10816, 82, 281, 805, 21112, 35655, 11, 597, 307, 1481, 11, 457, 1391, 406, 264, 1151, 472, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13434093299953417, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.04943050071597099}, {"id": 125, "seek": 54400, "start": 554.0, "end": 557.0, "text": " You do this step by step by dividing by two.", "tokens": [50864, 509, 360, 341, 1823, 538, 1823, 538, 26764, 538, 732, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13434093299953417, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.04943050071597099}, {"id": 126, "seek": 54400, "start": 557.0, "end": 565.0, "text": " So you take the first band, apply a half band filter, so you have less, you have the half of samples and you repeat this several times.", "tokens": [51014, 407, 291, 747, 264, 700, 4116, 11, 3079, 257, 1922, 4116, 6608, 11, 370, 291, 362, 1570, 11, 291, 362, 264, 1922, 295, 10938, 293, 291, 7149, 341, 2940, 1413, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13434093299953417, "compression_ratio": 1.5904761904761904, "no_speech_prob": 0.04943050071597099}, {"id": 127, "seek": 56500, "start": 565.0, "end": 579.0, "text": " That's very interesting because each time you remove a lot of samples and if you do this clearly, you can have 50% of the coefficients that are zero if you compute the fear in a good way.", "tokens": [50364, 663, 311, 588, 1880, 570, 1184, 565, 291, 4159, 257, 688, 295, 10938, 293, 498, 291, 360, 341, 4448, 11, 291, 393, 362, 2625, 4, 295, 264, 31994, 300, 366, 4018, 498, 291, 14722, 264, 4240, 294, 257, 665, 636, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11456078152323879, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.11359266191720963}, {"id": 128, "seek": 56500, "start": 579.0, "end": 582.0, "text": " So that removes you a lot of computation.", "tokens": [51064, 407, 300, 30445, 291, 257, 688, 295, 24903, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11456078152323879, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.11359266191720963}, {"id": 129, "seek": 56500, "start": 582.0, "end": 591.0, "text": " Of course, yes, but this is not ideal because you will hardly be able to reuse the computation you've made for the other channels.", "tokens": [51214, 2720, 1164, 11, 2086, 11, 457, 341, 307, 406, 7157, 570, 291, 486, 13572, 312, 1075, 281, 26225, 264, 24903, 291, 600, 1027, 337, 264, 661, 9235, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11456078152323879, "compression_ratio": 1.6216216216216217, "no_speech_prob": 0.11359266191720963}, {"id": 130, "seek": 59100, "start": 591.0, "end": 604.0, "text": " You will reduce a lot the throughput, the number of calculations you need for one of the channels, but then the next one you will want to reuse some of the calculation you've made and that's not easy.", "tokens": [50364, 509, 486, 5407, 257, 688, 264, 44629, 11, 264, 1230, 295, 20448, 291, 643, 337, 472, 295, 264, 9235, 11, 457, 550, 264, 958, 472, 291, 486, 528, 281, 26225, 512, 295, 264, 17108, 291, 600, 1027, 293, 300, 311, 406, 1858, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13692738976277097, "compression_ratio": 1.560693641618497, "no_speech_prob": 0.04632042348384857}, {"id": 131, "seek": 59100, "start": 604.0, "end": 608.0, "text": " So at the end, this doesn't work so good.", "tokens": [51014, 407, 412, 264, 917, 11, 341, 1177, 380, 589, 370, 665, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13692738976277097, "compression_ratio": 1.560693641618497, "no_speech_prob": 0.04632042348384857}, {"id": 132, "seek": 59100, "start": 608.0, "end": 612.0, "text": " So, so can this stuff help?", "tokens": [51214, 407, 11, 370, 393, 341, 1507, 854, 30, 51414], "temperature": 0.0, "avg_logprob": -0.13692738976277097, "compression_ratio": 1.560693641618497, "no_speech_prob": 0.04632042348384857}, {"id": 133, "seek": 61200, "start": 612.0, "end": 615.0, "text": " So I just put two examples here.", "tokens": [50364, 407, 286, 445, 829, 732, 5110, 510, 13, 50514], "temperature": 0.0, "avg_logprob": -0.184653377532959, "compression_ratio": 1.480349344978166, "no_speech_prob": 0.3710874915122986}, {"id": 134, "seek": 61200, "start": 615.0, "end": 618.0, "text": " On the top you have the Jetson XAVNX.", "tokens": [50514, 1282, 264, 1192, 291, 362, 264, 508, 1385, 266, 1783, 32, 53, 45, 55, 13, 50664], "temperature": 0.0, "avg_logprob": -0.184653377532959, "compression_ratio": 1.480349344978166, "no_speech_prob": 0.3710874915122986}, {"id": 135, "seek": 61200, "start": 618.0, "end": 629.0, "text": " I know that in an open source conference promoting a brand like NVDA is probably not the best idea, but just to make the story short, I have no sponsoring from NVDA.", "tokens": [50664, 286, 458, 300, 294, 364, 1269, 4009, 7586, 16383, 257, 3360, 411, 46512, 7509, 307, 1391, 406, 264, 1151, 1558, 11, 457, 445, 281, 652, 264, 1657, 2099, 11, 286, 362, 572, 30311, 490, 46512, 7509, 13, 51214], "temperature": 0.0, "avg_logprob": -0.184653377532959, "compression_ratio": 1.480349344978166, "no_speech_prob": 0.3710874915122986}, {"id": 136, "seek": 61200, "start": 629.0, "end": 638.0, "text": " Okay, so just to be figures and facts, the first one is the XAVNX, so it's roughly 500 euros, roughly.", "tokens": [51214, 1033, 11, 370, 445, 281, 312, 9624, 293, 9130, 11, 264, 700, 472, 307, 264, 1783, 32, 53, 45, 55, 11, 370, 309, 311, 9810, 5923, 14160, 11, 9810, 13, 51664], "temperature": 0.0, "avg_logprob": -0.184653377532959, "compression_ratio": 1.480349344978166, "no_speech_prob": 0.3710874915122986}, {"id": 137, "seek": 63800, "start": 638.0, "end": 651.0, "text": " And this one has 384 cores and the next in line is the NVDA 800, which is not the same price, 20,000 roughly, and has 6,912 cores.", "tokens": [50364, 400, 341, 472, 575, 12843, 19, 24826, 293, 264, 958, 294, 1622, 307, 264, 46512, 7509, 13083, 11, 597, 307, 406, 264, 912, 3218, 11, 945, 11, 1360, 9810, 11, 293, 575, 1386, 11, 24, 4762, 24826, 13, 51014], "temperature": 0.0, "avg_logprob": -0.14245526930865118, "compression_ratio": 1.412280701754386, "no_speech_prob": 0.03915528580546379}, {"id": 138, "seek": 63800, "start": 651.0, "end": 656.0, "text": " Okay, the interesting thing is the two FFT benchmarks are put below it.", "tokens": [51014, 1033, 11, 264, 1880, 551, 307, 264, 732, 479, 25469, 43751, 366, 829, 2507, 309, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14245526930865118, "compression_ratio": 1.412280701754386, "no_speech_prob": 0.03915528580546379}, {"id": 139, "seek": 63800, "start": 656.0, "end": 667.0, "text": " So if you look at the Jetson XAVNX to perform an FFT of, sorry, I'll say it this way, 2 power 19, which is quite a lot.", "tokens": [51264, 407, 498, 291, 574, 412, 264, 508, 1385, 266, 1783, 32, 53, 45, 55, 281, 2042, 364, 479, 25469, 295, 11, 2597, 11, 286, 603, 584, 309, 341, 636, 11, 568, 1347, 1294, 11, 597, 307, 1596, 257, 688, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14245526930865118, "compression_ratio": 1.412280701754386, "no_speech_prob": 0.03915528580546379}, {"id": 140, "seek": 66700, "start": 667.0, "end": 670.0, "text": " So it's 310 microseconds.", "tokens": [50364, 407, 309, 311, 805, 3279, 3123, 37841, 28750, 13, 50514], "temperature": 0.0, "avg_logprob": -0.10880174529686402, "compression_ratio": 1.4081632653061225, "no_speech_prob": 0.028491446748375893}, {"id": 141, "seek": 66700, "start": 670.0, "end": 672.0, "text": " That's quite a lot.", "tokens": [50514, 663, 311, 1596, 257, 688, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10880174529686402, "compression_ratio": 1.4081632653061225, "no_speech_prob": 0.028491446748375893}, {"id": 142, "seek": 66700, "start": 672.0, "end": 685.0, "text": " But of course, if you look at the most expensive one, you have 170 microseconds for 2 power 23, which is a huge FFT.", "tokens": [50614, 583, 295, 1164, 11, 498, 291, 574, 412, 264, 881, 5124, 472, 11, 291, 362, 27228, 3123, 37841, 28750, 337, 568, 1347, 6673, 11, 597, 307, 257, 2603, 479, 25469, 13, 51264], "temperature": 0.0, "avg_logprob": -0.10880174529686402, "compression_ratio": 1.4081632653061225, "no_speech_prob": 0.028491446748375893}, {"id": 143, "seek": 66700, "start": 685.0, "end": 686.0, "text": " A huge FFT.", "tokens": [51264, 316, 2603, 479, 25469, 13, 51314], "temperature": 0.0, "avg_logprob": -0.10880174529686402, "compression_ratio": 1.4081632653061225, "no_speech_prob": 0.028491446748375893}, {"id": 144, "seek": 66700, "start": 686.0, "end": 695.0, "text": " You can do this with an FPGA, but to get those size, it's becoming fun and extremely tricky to do it.", "tokens": [51314, 509, 393, 360, 341, 365, 364, 36655, 12570, 11, 457, 281, 483, 729, 2744, 11, 309, 311, 5617, 1019, 293, 4664, 12414, 281, 360, 309, 13, 51764], "temperature": 0.0, "avg_logprob": -0.10880174529686402, "compression_ratio": 1.4081632653061225, "no_speech_prob": 0.028491446748375893}, {"id": 145, "seek": 69500, "start": 695.0, "end": 705.0, "text": " Okay, so and for the XAVNX, you see that if you go up to the power of 2 at the power of 23, it's 7 milliseconds.", "tokens": [50364, 1033, 11, 370, 293, 337, 264, 1783, 32, 53, 45, 55, 11, 291, 536, 300, 498, 291, 352, 493, 281, 264, 1347, 295, 568, 412, 264, 1347, 295, 6673, 11, 309, 311, 1614, 34184, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10804126459524171, "compression_ratio": 1.4721030042918455, "no_speech_prob": 0.01071710605174303}, {"id": 146, "seek": 69500, "start": 705.0, "end": 707.0, "text": " That's a huge number.", "tokens": [50864, 663, 311, 257, 2603, 1230, 13, 50964], "temperature": 0.0, "avg_logprob": -0.10804126459524171, "compression_ratio": 1.4721030042918455, "no_speech_prob": 0.01071710605174303}, {"id": 147, "seek": 69500, "start": 707.0, "end": 709.0, "text": " It's quite fast.", "tokens": [50964, 467, 311, 1596, 2370, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10804126459524171, "compression_ratio": 1.4721030042918455, "no_speech_prob": 0.01071710605174303}, {"id": 148, "seek": 69500, "start": 709.0, "end": 712.0, "text": " So how can we use this?", "tokens": [51064, 407, 577, 393, 321, 764, 341, 30, 51214], "temperature": 0.0, "avg_logprob": -0.10804126459524171, "compression_ratio": 1.4721030042918455, "no_speech_prob": 0.01071710605174303}, {"id": 149, "seek": 69500, "start": 712.0, "end": 717.0, "text": " Of course, if you look back to your DSP lessons, that's pretty simple, in fact.", "tokens": [51214, 2720, 1164, 11, 498, 291, 574, 646, 281, 428, 15816, 47, 8820, 11, 300, 311, 1238, 2199, 11, 294, 1186, 13, 51464], "temperature": 0.0, "avg_logprob": -0.10804126459524171, "compression_ratio": 1.4721030042918455, "no_speech_prob": 0.01071710605174303}, {"id": 150, "seek": 69500, "start": 717.0, "end": 724.0, "text": " A convolution can be, I mean, applying an FIR to a signal is just making a convolution.", "tokens": [51464, 316, 45216, 393, 312, 11, 286, 914, 11, 9275, 364, 479, 7740, 281, 257, 6358, 307, 445, 1455, 257, 45216, 13, 51814], "temperature": 0.0, "avg_logprob": -0.10804126459524171, "compression_ratio": 1.4721030042918455, "no_speech_prob": 0.01071710605174303}, {"id": 151, "seek": 72400, "start": 724.0, "end": 726.0, "text": " And the convolution, you can use the FFT.", "tokens": [50364, 400, 264, 45216, 11, 291, 393, 764, 264, 479, 25469, 13, 50464], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 152, "seek": 72400, "start": 726.0, "end": 727.0, "text": " That's pretty simple.", "tokens": [50464, 663, 311, 1238, 2199, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 153, "seek": 72400, "start": 727.0, "end": 729.0, "text": " I mean, that's pretty known.", "tokens": [50514, 286, 914, 11, 300, 311, 1238, 2570, 13, 50614], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 154, "seek": 72400, "start": 729.0, "end": 741.0, "text": " You take the input signal, you do the FFT, you take your filter, you do the FFT here, and then you make a product of the two vectors.", "tokens": [50614, 509, 747, 264, 4846, 6358, 11, 291, 360, 264, 479, 25469, 11, 291, 747, 428, 6608, 11, 291, 360, 264, 479, 25469, 510, 11, 293, 550, 291, 652, 257, 1674, 295, 264, 732, 18875, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 155, "seek": 72400, "start": 741.0, "end": 742.0, "text": " There is a bug.", "tokens": [51214, 821, 307, 257, 7426, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 156, "seek": 72400, "start": 742.0, "end": 743.0, "text": " It's FFT minus 1.", "tokens": [51264, 467, 311, 479, 25469, 3175, 502, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 157, "seek": 72400, "start": 743.0, "end": 744.0, "text": " There is a bug here.", "tokens": [51314, 821, 307, 257, 7426, 510, 13, 51364], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 158, "seek": 72400, "start": 744.0, "end": 745.0, "text": " Inverse FFT.", "tokens": [51364, 682, 4308, 479, 25469, 13, 51414], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 159, "seek": 72400, "start": 745.0, "end": 748.0, "text": " And you get your output.", "tokens": [51414, 400, 291, 483, 428, 5598, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08681316728945132, "compression_ratio": 1.696808510638298, "no_speech_prob": 0.01109375897794962}, {"id": 160, "seek": 74800, "start": 748.0, "end": 754.0, "text": " So basically, you do FFT, FFT multiplication, inverse FFT, and you have your output.", "tokens": [50364, 407, 1936, 11, 291, 360, 479, 25469, 11, 479, 25469, 27290, 11, 17340, 479, 25469, 11, 293, 291, 362, 428, 5598, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1065279615336451, "compression_ratio": 1.66, "no_speech_prob": 0.008353726007044315}, {"id": 161, "seek": 74800, "start": 754.0, "end": 756.0, "text": " That is for one single block.", "tokens": [50664, 663, 307, 337, 472, 2167, 3461, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1065279615336451, "compression_ratio": 1.66, "no_speech_prob": 0.008353726007044315}, {"id": 162, "seek": 74800, "start": 756.0, "end": 757.0, "text": " Okay?", "tokens": [50764, 1033, 30, 50814], "temperature": 0.0, "avg_logprob": -0.1065279615336451, "compression_ratio": 1.66, "no_speech_prob": 0.008353726007044315}, {"id": 163, "seek": 74800, "start": 757.0, "end": 758.0, "text": " That's quite good.", "tokens": [50814, 663, 311, 1596, 665, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1065279615336451, "compression_ratio": 1.66, "no_speech_prob": 0.008353726007044315}, {"id": 164, "seek": 74800, "start": 758.0, "end": 761.0, "text": " It works well.", "tokens": [50864, 467, 1985, 731, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1065279615336451, "compression_ratio": 1.66, "no_speech_prob": 0.008353726007044315}, {"id": 165, "seek": 74800, "start": 761.0, "end": 764.0, "text": " But this is for a steady signal, not a stream.", "tokens": [51014, 583, 341, 307, 337, 257, 13211, 6358, 11, 406, 257, 4309, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1065279615336451, "compression_ratio": 1.66, "no_speech_prob": 0.008353726007044315}, {"id": 166, "seek": 74800, "start": 764.0, "end": 772.0, "text": " So if you want to do this for a stream, there is an improved version of this algorithm, which is called the overlap save or overlap hat.", "tokens": [51164, 407, 498, 291, 528, 281, 360, 341, 337, 257, 4309, 11, 456, 307, 364, 9689, 3037, 295, 341, 9284, 11, 597, 307, 1219, 264, 19959, 3155, 420, 19959, 2385, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1065279615336451, "compression_ratio": 1.66, "no_speech_prob": 0.008353726007044315}, {"id": 167, "seek": 74800, "start": 772.0, "end": 777.0, "text": " I use the overlap save, which is basically sliding a window, sliding blocks,", "tokens": [51564, 286, 764, 264, 19959, 3155, 11, 597, 307, 1936, 21169, 257, 4910, 11, 21169, 8474, 11, 51814], "temperature": 0.0, "avg_logprob": -0.1065279615336451, "compression_ratio": 1.66, "no_speech_prob": 0.008353726007044315}, {"id": 168, "seek": 77700, "start": 777.0, "end": 781.0, "text": " moving the input, doing the computation, and so on and so on and repeat this.", "tokens": [50364, 2684, 264, 4846, 11, 884, 264, 24903, 11, 293, 370, 322, 293, 370, 322, 293, 7149, 341, 13, 50564], "temperature": 0.0, "avg_logprob": -0.06097577947430906, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.018134674057364464}, {"id": 169, "seek": 77700, "start": 781.0, "end": 785.0, "text": " The key point here is that you use always the same filter.", "tokens": [50564, 440, 2141, 935, 510, 307, 300, 291, 764, 1009, 264, 912, 6608, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06097577947430906, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.018134674057364464}, {"id": 170, "seek": 77700, "start": 785.0, "end": 790.0, "text": " So you can compute the FFT of the filter once and keep it.", "tokens": [50764, 407, 291, 393, 14722, 264, 479, 25469, 295, 264, 6608, 1564, 293, 1066, 309, 13, 51014], "temperature": 0.0, "avg_logprob": -0.06097577947430906, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.018134674057364464}, {"id": 171, "seek": 77700, "start": 790.0, "end": 794.0, "text": " And the input, you will see, can be reused several times.", "tokens": [51014, 400, 264, 4846, 11, 291, 486, 536, 11, 393, 312, 319, 4717, 2940, 1413, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06097577947430906, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.018134674057364464}, {"id": 172, "seek": 77700, "start": 794.0, "end": 800.0, "text": " So basically, if you do this in the GPU, the performances are quite interesting.", "tokens": [51214, 407, 1936, 11, 498, 291, 360, 341, 294, 264, 18407, 11, 264, 16087, 366, 1596, 1880, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06097577947430906, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.018134674057364464}, {"id": 173, "seek": 77700, "start": 800.0, "end": 801.0, "text": " And this is what I did.", "tokens": [51514, 400, 341, 307, 437, 286, 630, 13, 51564], "temperature": 0.0, "avg_logprob": -0.06097577947430906, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.018134674057364464}, {"id": 174, "seek": 77700, "start": 801.0, "end": 804.0, "text": " And this is what I'm going to show you here.", "tokens": [51564, 400, 341, 307, 437, 286, 478, 516, 281, 855, 291, 510, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06097577947430906, "compression_ratio": 1.7148936170212765, "no_speech_prob": 0.018134674057364464}, {"id": 175, "seek": 80400, "start": 804.0, "end": 809.0, "text": " So the idea is, this is the architecture of the code I'm proposing.", "tokens": [50364, 407, 264, 1558, 307, 11, 341, 307, 264, 9482, 295, 264, 3089, 286, 478, 29939, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11206673238879052, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.002953985473141074}, {"id": 176, "seek": 80400, "start": 809.0, "end": 812.0, "text": " You receive the samples from the SDR.", "tokens": [50614, 509, 4774, 264, 10938, 490, 264, 318, 9301, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11206673238879052, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.002953985473141074}, {"id": 177, "seek": 80400, "start": 812.0, "end": 815.0, "text": " You do a first FFT.", "tokens": [50764, 509, 360, 257, 700, 479, 25469, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11206673238879052, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.002953985473141074}, {"id": 178, "seek": 80400, "start": 815.0, "end": 818.0, "text": " So you push the samples into the GPU RAM.", "tokens": [50914, 407, 291, 2944, 264, 10938, 666, 264, 18407, 14561, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11206673238879052, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.002953985473141074}, {"id": 179, "seek": 80400, "start": 818.0, "end": 819.0, "text": " Okay?", "tokens": [51064, 1033, 30, 51114], "temperature": 0.0, "avg_logprob": -0.11206673238879052, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.002953985473141074}, {"id": 180, "seek": 80400, "start": 819.0, "end": 823.0, "text": " Then your code does a first FFT or the incoming block.", "tokens": [51114, 1396, 428, 3089, 775, 257, 700, 479, 25469, 420, 264, 22341, 3461, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11206673238879052, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.002953985473141074}, {"id": 181, "seek": 80400, "start": 823.0, "end": 829.0, "text": " You assume that you've done previously at the init the FFT for the several filters you want to apply.", "tokens": [51314, 509, 6552, 300, 291, 600, 1096, 8046, 412, 264, 3157, 264, 479, 25469, 337, 264, 2940, 15995, 291, 528, 281, 3079, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11206673238879052, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.002953985473141074}, {"id": 182, "seek": 80400, "start": 829.0, "end": 832.0, "text": " So here in this example, I have two.", "tokens": [51614, 407, 510, 294, 341, 1365, 11, 286, 362, 732, 13, 51764], "temperature": 0.0, "avg_logprob": -0.11206673238879052, "compression_ratio": 1.5887445887445888, "no_speech_prob": 0.002953985473141074}, {"id": 183, "seek": 83200, "start": 832.0, "end": 841.0, "text": " You do the connexer product, modifications for both FFT, the reverse FFT, and the decimation.", "tokens": [50364, 509, 360, 264, 416, 716, 87, 260, 1674, 11, 26881, 337, 1293, 479, 25469, 11, 264, 9943, 479, 25469, 11, 293, 264, 979, 332, 399, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13537090264477777, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.003950553014874458}, {"id": 184, "seek": 83200, "start": 841.0, "end": 845.0, "text": " And you're done.", "tokens": [50814, 400, 291, 434, 1096, 13, 51014], "temperature": 0.0, "avg_logprob": -0.13537090264477777, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.003950553014874458}, {"id": 185, "seek": 83200, "start": 845.0, "end": 846.0, "text": " There is one trick.", "tokens": [51014, 821, 307, 472, 4282, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13537090264477777, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.003950553014874458}, {"id": 186, "seek": 83200, "start": 846.0, "end": 848.0, "text": " I will come back to it in a few slides.", "tokens": [51064, 286, 486, 808, 646, 281, 309, 294, 257, 1326, 9788, 13, 51164], "temperature": 0.0, "avg_logprob": -0.13537090264477777, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.003950553014874458}, {"id": 187, "seek": 83200, "start": 848.0, "end": 853.0, "text": " So basically, it means that, sorry, if I go back to this slide, excuse me,", "tokens": [51164, 407, 1936, 11, 309, 1355, 300, 11, 2597, 11, 498, 286, 352, 646, 281, 341, 4137, 11, 8960, 385, 11, 51414], "temperature": 0.0, "avg_logprob": -0.13537090264477777, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.003950553014874458}, {"id": 188, "seek": 83200, "start": 853.0, "end": 855.0, "text": " you do this FFT in fact only once.", "tokens": [51414, 291, 360, 341, 479, 25469, 294, 1186, 787, 1564, 13, 51514], "temperature": 0.0, "avg_logprob": -0.13537090264477777, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.003950553014874458}, {"id": 189, "seek": 83200, "start": 855.0, "end": 858.0, "text": " You reuse it for the different channels you want.", "tokens": [51514, 509, 26225, 309, 337, 264, 819, 9235, 291, 528, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13537090264477777, "compression_ratio": 1.5207373271889402, "no_speech_prob": 0.003950553014874458}, {"id": 190, "seek": 85800, "start": 858.0, "end": 862.0, "text": " You have done the FFT for the filters once.", "tokens": [50364, 509, 362, 1096, 264, 479, 25469, 337, 264, 15995, 1564, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09211859919808128, "compression_ratio": 1.5245098039215685, "no_speech_prob": 0.007583270780742168}, {"id": 191, "seek": 85800, "start": 862.0, "end": 872.0, "text": " So in practice for each new incoming block of samples, you have to do one FFT here, modifications, FFT minus one, and decimation.", "tokens": [50564, 407, 294, 3124, 337, 1184, 777, 22341, 3461, 295, 10938, 11, 291, 362, 281, 360, 472, 479, 25469, 510, 11, 26881, 11, 479, 25469, 3175, 472, 11, 293, 979, 332, 399, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09211859919808128, "compression_ratio": 1.5245098039215685, "no_speech_prob": 0.007583270780742168}, {"id": 192, "seek": 85800, "start": 872.0, "end": 874.0, "text": " And that can be quite fast.", "tokens": [51064, 400, 300, 393, 312, 1596, 2370, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09211859919808128, "compression_ratio": 1.5245098039215685, "no_speech_prob": 0.007583270780742168}, {"id": 193, "seek": 85800, "start": 874.0, "end": 880.0, "text": " All this doesn't need data to move from the GPU memory to the main CPU memory.", "tokens": [51164, 1057, 341, 1177, 380, 643, 1412, 281, 1286, 490, 264, 18407, 4675, 281, 264, 2135, 13199, 4675, 13, 51464], "temperature": 0.0, "avg_logprob": -0.09211859919808128, "compression_ratio": 1.5245098039215685, "no_speech_prob": 0.007583270780742168}, {"id": 194, "seek": 85800, "start": 880.0, "end": 883.0, "text": " But that's quite fast in fact.", "tokens": [51464, 583, 300, 311, 1596, 2370, 294, 1186, 13, 51614], "temperature": 0.0, "avg_logprob": -0.09211859919808128, "compression_ratio": 1.5245098039215685, "no_speech_prob": 0.007583270780742168}, {"id": 195, "seek": 88300, "start": 883.0, "end": 893.0, "text": " Then one trick and why I have ended with using the CUDA and proprietary API and the NVDA stuff.", "tokens": [50364, 1396, 472, 4282, 293, 983, 286, 362, 4590, 365, 1228, 264, 29777, 7509, 293, 38992, 9362, 293, 264, 46512, 7509, 1507, 13, 50864], "temperature": 0.0, "avg_logprob": -0.10401468650967467, "compression_ratio": 1.575, "no_speech_prob": 0.027925433591008186}, {"id": 196, "seek": 88300, "start": 893.0, "end": 897.0, "text": " I've heard from guys in this room that you can now do this in OpenCL.", "tokens": [50864, 286, 600, 2198, 490, 1074, 294, 341, 1808, 300, 291, 393, 586, 360, 341, 294, 7238, 22458, 13, 51064], "temperature": 0.0, "avg_logprob": -0.10401468650967467, "compression_ratio": 1.575, "no_speech_prob": 0.027925433591008186}, {"id": 197, "seek": 88300, "start": 897.0, "end": 899.0, "text": " I have not tested, to be honest.", "tokens": [51064, 286, 362, 406, 8246, 11, 281, 312, 3245, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10401468650967467, "compression_ratio": 1.575, "no_speech_prob": 0.027925433591008186}, {"id": 198, "seek": 88300, "start": 899.0, "end": 902.0, "text": " One of the trick is that if you don't pay attention to the scheduling,", "tokens": [51164, 1485, 295, 264, 4282, 307, 300, 498, 291, 500, 380, 1689, 3202, 281, 264, 29055, 11, 51314], "temperature": 0.0, "avg_logprob": -0.10401468650967467, "compression_ratio": 1.575, "no_speech_prob": 0.027925433591008186}, {"id": 199, "seek": 88300, "start": 902.0, "end": 908.0, "text": " the different channels will be the different codes will run in series, in sequence, FFT and so on and so on.", "tokens": [51314, 264, 819, 9235, 486, 312, 264, 819, 14211, 486, 1190, 294, 2638, 11, 294, 8310, 11, 479, 25469, 293, 370, 322, 293, 370, 322, 13, 51614], "temperature": 0.0, "avg_logprob": -0.10401468650967467, "compression_ratio": 1.575, "no_speech_prob": 0.027925433591008186}, {"id": 200, "seek": 90800, "start": 908.0, "end": 917.0, "text": " So you will have to wait for the last block of sequence of operations to be finished before you can retrieve all the samples.", "tokens": [50364, 407, 291, 486, 362, 281, 1699, 337, 264, 1036, 3461, 295, 8310, 295, 7705, 281, 312, 4335, 949, 291, 393, 30254, 439, 264, 10938, 13, 50814], "temperature": 0.0, "avg_logprob": -0.16081715655583206, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.04381862282752991}, {"id": 201, "seek": 90800, "start": 917.0, "end": 921.0, "text": " And you wait, you may end up waiting quite a lot.", "tokens": [50814, 400, 291, 1699, 11, 291, 815, 917, 493, 3806, 1596, 257, 688, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16081715655583206, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.04381862282752991}, {"id": 202, "seek": 90800, "start": 921.0, "end": 929.0, "text": " But if you use this trick just to compile option, switch, then the scheduling inside the GPU is different.", "tokens": [51014, 583, 498, 291, 764, 341, 4282, 445, 281, 31413, 3614, 11, 3679, 11, 550, 264, 29055, 1854, 264, 18407, 307, 819, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16081715655583206, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.04381862282752991}, {"id": 203, "seek": 90800, "start": 929.0, "end": 931.0, "text": " And then everything run in parallel.", "tokens": [51414, 400, 550, 1203, 1190, 294, 8952, 13, 51514], "temperature": 0.0, "avg_logprob": -0.16081715655583206, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.04381862282752991}, {"id": 204, "seek": 90800, "start": 931.0, "end": 935.0, "text": " And the difference is quite large, quite big, to be honest.", "tokens": [51514, 400, 264, 2649, 307, 1596, 2416, 11, 1596, 955, 11, 281, 312, 3245, 13, 51714], "temperature": 0.0, "avg_logprob": -0.16081715655583206, "compression_ratio": 1.6196581196581197, "no_speech_prob": 0.04381862282752991}, {"id": 205, "seek": 93500, "start": 935.0, "end": 938.0, "text": " The difference is much faster this way.", "tokens": [50364, 440, 2649, 307, 709, 4663, 341, 636, 13, 50514], "temperature": 0.2, "avg_logprob": -0.13953723907470703, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.02993902750313282}, {"id": 206, "seek": 93500, "start": 938.0, "end": 946.0, "text": " One last thing is that if we only do what I proposed, then you miss the frequency shifting.", "tokens": [50514, 1485, 1036, 551, 307, 300, 498, 321, 787, 360, 437, 286, 10348, 11, 550, 291, 1713, 264, 7893, 17573, 13, 50914], "temperature": 0.2, "avg_logprob": -0.13953723907470703, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.02993902750313282}, {"id": 207, "seek": 93500, "start": 946.0, "end": 949.0, "text": " There is a problem, the output frequency is not a good one.", "tokens": [50914, 821, 307, 257, 1154, 11, 264, 5598, 7893, 307, 406, 257, 665, 472, 13, 51064], "temperature": 0.2, "avg_logprob": -0.13953723907470703, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.02993902750313282}, {"id": 208, "seek": 93500, "start": 949.0, "end": 954.0, "text": " So you need to apply the NCO to shift in frequency the signal.", "tokens": [51064, 407, 291, 643, 281, 3079, 264, 426, 12322, 281, 5513, 294, 7893, 264, 6358, 13, 51314], "temperature": 0.2, "avg_logprob": -0.13953723907470703, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.02993902750313282}, {"id": 209, "seek": 93500, "start": 954.0, "end": 958.0, "text": " And of course it's much more efficient to do this at the end because you have less samples.", "tokens": [51314, 400, 295, 1164, 309, 311, 709, 544, 7148, 281, 360, 341, 412, 264, 917, 570, 291, 362, 1570, 10938, 13, 51514], "temperature": 0.2, "avg_logprob": -0.13953723907470703, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.02993902750313282}, {"id": 210, "seek": 93500, "start": 958.0, "end": 960.0, "text": " So it's much faster.", "tokens": [51514, 407, 309, 311, 709, 4663, 13, 51614], "temperature": 0.2, "avg_logprob": -0.13953723907470703, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.02993902750313282}, {"id": 211, "seek": 93500, "start": 960.0, "end": 964.0, "text": " You do the shifts at the very end and you just use the fact that you have some aliasing.", "tokens": [51614, 509, 360, 264, 19201, 412, 264, 588, 917, 293, 291, 445, 764, 264, 1186, 300, 291, 362, 512, 10198, 3349, 13, 51814], "temperature": 0.2, "avg_logprob": -0.13953723907470703, "compression_ratio": 1.7078651685393258, "no_speech_prob": 0.02993902750313282}, {"id": 212, "seek": 96400, "start": 964.0, "end": 970.0, "text": " So the code compensates for the aliasing and that's the frequency shift at the very end.", "tokens": [50364, 407, 264, 3089, 11598, 1024, 337, 264, 10198, 3349, 293, 300, 311, 264, 7893, 5513, 412, 264, 588, 917, 13, 50664], "temperature": 0.0, "avg_logprob": -0.11666788638216778, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.011762167327105999}, {"id": 213, "seek": 96400, "start": 970.0, "end": 972.0, "text": " Just look at the code.", "tokens": [50664, 1449, 574, 412, 264, 3089, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11666788638216778, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.011762167327105999}, {"id": 214, "seek": 96400, "start": 972.0, "end": 975.0, "text": " That's easier this way.", "tokens": [50764, 663, 311, 3571, 341, 636, 13, 50914], "temperature": 0.0, "avg_logprob": -0.11666788638216778, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.011762167327105999}, {"id": 215, "seek": 96400, "start": 975.0, "end": 977.0, "text": " So what am I proposing this morning?", "tokens": [50914, 407, 437, 669, 286, 29939, 341, 2446, 30, 51014], "temperature": 0.0, "avg_logprob": -0.11666788638216778, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.011762167327105999}, {"id": 216, "seek": 96400, "start": 977.0, "end": 981.0, "text": " So you have in GitHub a lib, an example.", "tokens": [51014, 407, 291, 362, 294, 23331, 257, 22854, 11, 364, 1365, 13, 51214], "temperature": 0.0, "avg_logprob": -0.11666788638216778, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.011762167327105999}, {"id": 217, "seek": 96400, "start": 981.0, "end": 986.0, "text": " That's a code that is quite old from me, but it works.", "tokens": [51214, 663, 311, 257, 3089, 300, 307, 1596, 1331, 490, 385, 11, 457, 309, 1985, 13, 51464], "temperature": 0.0, "avg_logprob": -0.11666788638216778, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.011762167327105999}, {"id": 218, "seek": 96400, "start": 986.0, "end": 993.0, "text": " And the key thing is that you have to allocate maximum number of channels you will use in the beginning,", "tokens": [51464, 400, 264, 2141, 551, 307, 300, 291, 362, 281, 35713, 6674, 1230, 295, 9235, 291, 486, 764, 294, 264, 2863, 11, 51814], "temperature": 0.0, "avg_logprob": -0.11666788638216778, "compression_ratio": 1.5805084745762712, "no_speech_prob": 0.011762167327105999}, {"id": 219, "seek": 99300, "start": 993.0, "end": 999.0, "text": " basically because it will allocate in the GPU the RAM for the different operations.", "tokens": [50364, 1936, 570, 309, 486, 35713, 294, 264, 18407, 264, 14561, 337, 264, 819, 7705, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1098090358402418, "compression_ratio": 1.5309734513274336, "no_speech_prob": 0.016181251034140587}, {"id": 220, "seek": 99300, "start": 999.0, "end": 1001.0, "text": " Then the code is thread safe.", "tokens": [50664, 1396, 264, 3089, 307, 7207, 3273, 13, 50764], "temperature": 0.0, "avg_logprob": -0.1098090358402418, "compression_ratio": 1.5309734513274336, "no_speech_prob": 0.016181251034140587}, {"id": 221, "seek": 99300, "start": 1001.0, "end": 1007.0, "text": " That is to say that you can add, remove, shift, replace, change the number of channels you use,", "tokens": [50764, 663, 307, 281, 584, 300, 291, 393, 909, 11, 4159, 11, 5513, 11, 7406, 11, 1319, 264, 1230, 295, 9235, 291, 764, 11, 51064], "temperature": 0.0, "avg_logprob": -0.1098090358402418, "compression_ratio": 1.5309734513274336, "no_speech_prob": 0.016181251034140587}, {"id": 222, "seek": 99300, "start": 1007.0, "end": 1011.0, "text": " the size of the channels and so on in real time.", "tokens": [51064, 264, 2744, 295, 264, 9235, 293, 370, 322, 294, 957, 565, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1098090358402418, "compression_ratio": 1.5309734513274336, "no_speech_prob": 0.016181251034140587}, {"id": 223, "seek": 99300, "start": 1011.0, "end": 1013.0, "text": " This is CUDA based.", "tokens": [51264, 639, 307, 29777, 7509, 2361, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1098090358402418, "compression_ratio": 1.5309734513274336, "no_speech_prob": 0.016181251034140587}, {"id": 224, "seek": 99300, "start": 1013.0, "end": 1017.0, "text": " I know that maybe OpenCL could do something that I have not tested.", "tokens": [51364, 286, 458, 300, 1310, 7238, 22458, 727, 360, 746, 300, 286, 362, 406, 8246, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1098090358402418, "compression_ratio": 1.5309734513274336, "no_speech_prob": 0.016181251034140587}, {"id": 225, "seek": 101700, "start": 1017.0, "end": 1024.0, "text": " And I have only tested this with NVDA GPUs.", "tokens": [50364, 400, 286, 362, 787, 8246, 341, 365, 46512, 7509, 18407, 82, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13208951448139392, "compression_ratio": 1.4345549738219896, "no_speech_prob": 0.004498980473726988}, {"id": 226, "seek": 101700, "start": 1024.0, "end": 1027.0, "text": " So just to give an example of what you can get with this.", "tokens": [50714, 407, 445, 281, 976, 364, 1365, 295, 437, 291, 393, 483, 365, 341, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13208951448139392, "compression_ratio": 1.4345549738219896, "no_speech_prob": 0.004498980473726988}, {"id": 227, "seek": 101700, "start": 1027.0, "end": 1031.0, "text": " So I just benchmarked this with two different architectures, the one I had,", "tokens": [50864, 407, 286, 445, 18927, 292, 341, 365, 732, 819, 6331, 1303, 11, 264, 472, 286, 632, 11, 51064], "temperature": 0.0, "avg_logprob": -0.13208951448139392, "compression_ratio": 1.4345549738219896, "no_speech_prob": 0.004498980473726988}, {"id": 228, "seek": 101700, "start": 1031.0, "end": 1038.0, "text": " but I'm sure that I will receive tons of PR to add new figures in the tables on GitHub for sure.", "tokens": [51064, 457, 286, 478, 988, 300, 286, 486, 4774, 9131, 295, 11568, 281, 909, 777, 9624, 294, 264, 8020, 322, 23331, 337, 988, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13208951448139392, "compression_ratio": 1.4345549738219896, "no_speech_prob": 0.004498980473726988}, {"id": 229, "seek": 103800, "start": 1038.0, "end": 1042.0, "text": " So practically speaking on my machine at home, it's a well,", "tokens": [50364, 407, 15667, 4124, 322, 452, 3479, 412, 1280, 11, 309, 311, 257, 731, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1735484193011028, "compression_ratio": 1.4855769230769231, "no_speech_prob": 0.03623778373003006}, {"id": 230, "seek": 103800, "start": 1042.0, "end": 1049.0, "text": " average PC with a GT RTX 2060 with one single channel.", "tokens": [50564, 4274, 6465, 365, 257, 17530, 44573, 945, 4550, 365, 472, 2167, 2269, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1735484193011028, "compression_ratio": 1.4855769230769231, "no_speech_prob": 0.03623778373003006}, {"id": 231, "seek": 103800, "start": 1049.0, "end": 1056.0, "text": " So throughput is just a bench test code where it's just pushing data to the GPU,", "tokens": [50914, 407, 44629, 307, 445, 257, 10638, 1500, 3089, 689, 309, 311, 445, 7380, 1412, 281, 264, 18407, 11, 51264], "temperature": 0.0, "avg_logprob": -0.1735484193011028, "compression_ratio": 1.4855769230769231, "no_speech_prob": 0.03623778373003006}, {"id": 232, "seek": 103800, "start": 1056.0, "end": 1059.0, "text": " making the computation and retrieving the samples.", "tokens": [51264, 1455, 264, 24903, 293, 19817, 798, 264, 10938, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1735484193011028, "compression_ratio": 1.4855769230769231, "no_speech_prob": 0.03623778373003006}, {"id": 233, "seek": 103800, "start": 1059.0, "end": 1064.0, "text": " So with one channel, it's roughly 600 mega-samples per second.", "tokens": [51414, 407, 365, 472, 2269, 11, 309, 311, 9810, 11849, 17986, 12, 19988, 2622, 680, 1150, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1735484193011028, "compression_ratio": 1.4855769230769231, "no_speech_prob": 0.03623778373003006}, {"id": 234, "seek": 106400, "start": 1064.0, "end": 1068.0, "text": " With two channels, 530.", "tokens": [50364, 2022, 732, 9235, 11, 1025, 3446, 13, 50564], "temperature": 0.0, "avg_logprob": -0.18852466760679734, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.0289447121322155}, {"id": 235, "seek": 106400, "start": 1068.0, "end": 1069.0, "text": " OK.", "tokens": [50564, 2264, 13, 50614], "temperature": 0.0, "avg_logprob": -0.18852466760679734, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.0289447121322155}, {"id": 236, "seek": 106400, "start": 1069.0, "end": 1075.0, "text": " Just as a baseline for comparison with the Jetson XADI-NX,", "tokens": [50614, 1449, 382, 257, 20518, 337, 9660, 365, 264, 508, 1385, 266, 1783, 32, 3085, 12, 45, 55, 11, 50914], "temperature": 0.0, "avg_logprob": -0.18852466760679734, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.0289447121322155}, {"id": 237, "seek": 106400, "start": 1075.0, "end": 1079.0, "text": " depending on the FST size, that changes quite a lot.", "tokens": [50914, 5413, 322, 264, 479, 6840, 2744, 11, 300, 2962, 1596, 257, 688, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18852466760679734, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.0289447121322155}, {"id": 238, "seek": 106400, "start": 1079.0, "end": 1085.0, "text": " And you can reach up to 156 mega-samples per second with two channels.", "tokens": [51114, 400, 291, 393, 2524, 493, 281, 2119, 21, 17986, 12, 19988, 2622, 680, 1150, 365, 732, 9235, 13, 51414], "temperature": 0.0, "avg_logprob": -0.18852466760679734, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.0289447121322155}, {"id": 239, "seek": 106400, "start": 1085.0, "end": 1086.0, "text": " One channel, sorry.", "tokens": [51414, 1485, 2269, 11, 2597, 13, 51464], "temperature": 0.0, "avg_logprob": -0.18852466760679734, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.0289447121322155}, {"id": 240, "seek": 106400, "start": 1086.0, "end": 1089.0, "text": " And 117 with two channels.", "tokens": [51464, 400, 2975, 22, 365, 732, 9235, 13, 51614], "temperature": 0.0, "avg_logprob": -0.18852466760679734, "compression_ratio": 1.4357541899441342, "no_speech_prob": 0.0289447121322155}, {"id": 241, "seek": 108900, "start": 1089.0, "end": 1093.0, "text": " The filters were 7200 taps.", "tokens": [50364, 440, 15995, 645, 1614, 7629, 42536, 13, 50564], "temperature": 0.0, "avg_logprob": -0.13366192643360425, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.08242208510637283}, {"id": 242, "seek": 108900, "start": 1093.0, "end": 1095.0, "text": " Excuse me, that's average.", "tokens": [50564, 11359, 385, 11, 300, 311, 4274, 13, 50664], "temperature": 0.0, "avg_logprob": -0.13366192643360425, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.08242208510637283}, {"id": 243, "seek": 108900, "start": 1095.0, "end": 1097.0, "text": " You can change this in the code.", "tokens": [50664, 509, 393, 1319, 341, 294, 264, 3089, 13, 50764], "temperature": 0.0, "avg_logprob": -0.13366192643360425, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.08242208510637283}, {"id": 244, "seek": 108900, "start": 1097.0, "end": 1103.0, "text": " I'm checking the time because I know Mark will kick me out soon.", "tokens": [50764, 286, 478, 8568, 264, 565, 570, 286, 458, 3934, 486, 4437, 385, 484, 2321, 13, 51064], "temperature": 0.0, "avg_logprob": -0.13366192643360425, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.08242208510637283}, {"id": 245, "seek": 108900, "start": 1103.0, "end": 1109.0, "text": " So just to come to the, just one of the interesting things is that", "tokens": [51064, 407, 445, 281, 808, 281, 264, 11, 445, 472, 295, 264, 1880, 721, 307, 300, 51364], "temperature": 0.0, "avg_logprob": -0.13366192643360425, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.08242208510637283}, {"id": 246, "seek": 108900, "start": 1109.0, "end": 1115.0, "text": " if you look at the figures here, you see that the GPU is roughly 80% used.", "tokens": [51364, 498, 291, 574, 412, 264, 9624, 510, 11, 291, 536, 300, 264, 18407, 307, 9810, 4688, 4, 1143, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13366192643360425, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.08242208510637283}, {"id": 247, "seek": 108900, "start": 1115.0, "end": 1117.0, "text": " The PCI is 36%.", "tokens": [51664, 440, 6465, 40, 307, 8652, 6856, 51764], "temperature": 0.0, "avg_logprob": -0.13366192643360425, "compression_ratio": 1.4090909090909092, "no_speech_prob": 0.08242208510637283}, {"id": 248, "seek": 111700, "start": 1117.0, "end": 1119.0, "text": " So there's room for improvements.", "tokens": [50364, 407, 456, 311, 1808, 337, 13797, 13, 50464], "temperature": 0.0, "avg_logprob": -0.09355138382821712, "compression_ratio": 1.6473029045643153, "no_speech_prob": 0.006648850627243519}, {"id": 249, "seek": 111700, "start": 1119.0, "end": 1125.0, "text": " And if you look at the CPU, one core is 100% and the others are relaxed.", "tokens": [50464, 400, 498, 291, 574, 412, 264, 13199, 11, 472, 4965, 307, 2319, 4, 293, 264, 2357, 366, 14628, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09355138382821712, "compression_ratio": 1.6473029045643153, "no_speech_prob": 0.006648850627243519}, {"id": 250, "seek": 111700, "start": 1125.0, "end": 1128.0, "text": " So it means that maybe there's room for much faster, in fact,", "tokens": [50764, 407, 309, 1355, 300, 1310, 456, 311, 1808, 337, 709, 4663, 11, 294, 1186, 11, 50914], "temperature": 0.0, "avg_logprob": -0.09355138382821712, "compression_ratio": 1.6473029045643153, "no_speech_prob": 0.006648850627243519}, {"id": 251, "seek": 111700, "start": 1128.0, "end": 1130.0, "text": " because we are far from overloading the machine.", "tokens": [50914, 570, 321, 366, 1400, 490, 28777, 278, 264, 3479, 13, 51014], "temperature": 0.0, "avg_logprob": -0.09355138382821712, "compression_ratio": 1.6473029045643153, "no_speech_prob": 0.006648850627243519}, {"id": 252, "seek": 111700, "start": 1130.0, "end": 1135.0, "text": " And in fact, if you look in detail, where is the bottleneck?", "tokens": [51014, 400, 294, 1186, 11, 498, 291, 574, 294, 2607, 11, 689, 307, 264, 44641, 547, 30, 51264], "temperature": 0.0, "avg_logprob": -0.09355138382821712, "compression_ratio": 1.6473029045643153, "no_speech_prob": 0.006648850627243519}, {"id": 253, "seek": 111700, "start": 1135.0, "end": 1138.0, "text": " It appears that the bottleneck is the memory copy.", "tokens": [51264, 467, 7038, 300, 264, 44641, 547, 307, 264, 4675, 5055, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09355138382821712, "compression_ratio": 1.6473029045643153, "no_speech_prob": 0.006648850627243519}, {"id": 254, "seek": 111700, "start": 1138.0, "end": 1142.0, "text": " The synchronization between copying the memory from host to device,", "tokens": [51414, 440, 19331, 2144, 1296, 27976, 264, 4675, 490, 3975, 281, 4302, 11, 51614], "temperature": 0.0, "avg_logprob": -0.09355138382821712, "compression_ratio": 1.6473029045643153, "no_speech_prob": 0.006648850627243519}, {"id": 255, "seek": 114200, "start": 1142.0, "end": 1147.0, "text": " wasting for the threads to start, waiting for the kernels to stop.", "tokens": [50364, 20457, 337, 264, 19314, 281, 722, 11, 3806, 337, 264, 23434, 1625, 281, 1590, 13, 50614], "temperature": 0.0, "avg_logprob": -0.1759441650665558, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.03261037543416023}, {"id": 256, "seek": 114200, "start": 1147.0, "end": 1149.0, "text": " All this synchronization takes a lot of time.", "tokens": [50614, 1057, 341, 19331, 2144, 2516, 257, 688, 295, 565, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1759441650665558, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.03261037543416023}, {"id": 257, "seek": 114200, "start": 1149.0, "end": 1151.0, "text": " And if you start to plot this in time,", "tokens": [50714, 400, 498, 291, 722, 281, 7542, 341, 294, 565, 11, 50814], "temperature": 0.0, "avg_logprob": -0.1759441650665558, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.03261037543416023}, {"id": 258, "seek": 114200, "start": 1151.0, "end": 1153.0, "text": " NVGA comes with the tool.", "tokens": [50814, 46512, 12570, 1487, 365, 264, 2290, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1759441650665558, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.03261037543416023}, {"id": 259, "seek": 114200, "start": 1153.0, "end": 1156.0, "text": " I don't remember the name, where you can see the different threads", "tokens": [50914, 286, 500, 380, 1604, 264, 1315, 11, 689, 291, 393, 536, 264, 819, 19314, 51064], "temperature": 0.0, "avg_logprob": -0.1759441650665558, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.03261037543416023}, {"id": 260, "seek": 114200, "start": 1156.0, "end": 1157.0, "text": " in time, how they work.", "tokens": [51064, 294, 565, 11, 577, 436, 589, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1759441650665558, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.03261037543416023}, {"id": 261, "seek": 114200, "start": 1157.0, "end": 1161.0, "text": " And you clearly see that there's, the bottlenecks come from the synchronization", "tokens": [51114, 400, 291, 4448, 536, 300, 456, 311, 11, 264, 44641, 2761, 808, 490, 264, 19331, 2144, 51314], "temperature": 0.0, "avg_logprob": -0.1759441650665558, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.03261037543416023}, {"id": 262, "seek": 114200, "start": 1161.0, "end": 1169.0, "text": " from the host and so there's room for improvement, for sure.", "tokens": [51314, 490, 264, 3975, 293, 370, 456, 311, 1808, 337, 10444, 11, 337, 988, 13, 51714], "temperature": 0.0, "avg_logprob": -0.1759441650665558, "compression_ratio": 1.7553648068669527, "no_speech_prob": 0.03261037543416023}, {"id": 263, "seek": 116900, "start": 1169.0, "end": 1174.0, "text": " So if you want to tune this, you will see that the, of course,", "tokens": [50364, 407, 498, 291, 528, 281, 10864, 341, 11, 291, 486, 536, 300, 264, 11, 295, 1164, 11, 50614], "temperature": 0.0, "avg_logprob": -0.1289318384749166, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.01591450348496437}, {"id": 264, "seek": 116900, "start": 1174.0, "end": 1180.0, "text": " the size of the FFT used has a strong impact on the performances.", "tokens": [50614, 264, 2744, 295, 264, 479, 25469, 1143, 575, 257, 2068, 2712, 322, 264, 16087, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1289318384749166, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.01591450348496437}, {"id": 265, "seek": 116900, "start": 1180.0, "end": 1185.0, "text": " But that really depends on the performances of the GPU you're using.", "tokens": [50914, 583, 300, 534, 5946, 322, 264, 16087, 295, 264, 18407, 291, 434, 1228, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1289318384749166, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.01591450348496437}, {"id": 266, "seek": 116900, "start": 1185.0, "end": 1190.0, "text": " As I said, moving the data from host to GPU is extremely expensive.", "tokens": [51164, 1018, 286, 848, 11, 2684, 264, 1412, 490, 3975, 281, 18407, 307, 4664, 5124, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1289318384749166, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.01591450348496437}, {"id": 267, "seek": 116900, "start": 1190.0, "end": 1198.0, "text": " In the example I was doing, copy from host to device in complex float,", "tokens": [51414, 682, 264, 1365, 286, 390, 884, 11, 5055, 490, 3975, 281, 4302, 294, 3997, 15706, 11, 51814], "temperature": 0.0, "avg_logprob": -0.1289318384749166, "compression_ratio": 1.5774647887323943, "no_speech_prob": 0.01591450348496437}, {"id": 268, "seek": 119800, "start": 1198.0, "end": 1202.0, "text": " I could use complex ints, raw data from the SDR,", "tokens": [50364, 286, 727, 764, 3997, 560, 82, 11, 8936, 1412, 490, 264, 318, 9301, 11, 50564], "temperature": 0.0, "avg_logprob": -0.1365932788489, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.02658115141093731}, {"id": 269, "seek": 119800, "start": 1202.0, "end": 1208.0, "text": " and there is in the code one example where you can convert the ints 16 to float", "tokens": [50564, 293, 456, 307, 294, 264, 3089, 472, 1365, 689, 291, 393, 7620, 264, 560, 82, 3165, 281, 15706, 50864], "temperature": 0.0, "avg_logprob": -0.1365932788489, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.02658115141093731}, {"id": 270, "seek": 119800, "start": 1208.0, "end": 1210.0, "text": " directly, so it's cheaper.", "tokens": [50864, 3838, 11, 370, 309, 311, 12284, 13, 50964], "temperature": 0.0, "avg_logprob": -0.1365932788489, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.02658115141093731}, {"id": 271, "seek": 119800, "start": 1210.0, "end": 1217.0, "text": " I mean, the amount of data you would copy from the host to the device is much smaller.", "tokens": [50964, 286, 914, 11, 264, 2372, 295, 1412, 291, 576, 5055, 490, 264, 3975, 281, 264, 4302, 307, 709, 4356, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1365932788489, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.02658115141093731}, {"id": 272, "seek": 119800, "start": 1217.0, "end": 1220.0, "text": " And I was using LibUSB in real life.", "tokens": [51314, 400, 286, 390, 1228, 15834, 3447, 33, 294, 957, 993, 13, 51464], "temperature": 0.0, "avg_logprob": -0.1365932788489, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.02658115141093731}, {"id": 273, "seek": 119800, "start": 1220.0, "end": 1222.0, "text": " I mean, not in the example, but in real life.", "tokens": [51464, 286, 914, 11, 406, 294, 264, 1365, 11, 457, 294, 957, 993, 13, 51564], "temperature": 0.0, "avg_logprob": -0.1365932788489, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.02658115141093731}, {"id": 274, "seek": 119800, "start": 1222.0, "end": 1224.0, "text": " So it's also very expensive.", "tokens": [51564, 407, 309, 311, 611, 588, 5124, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1365932788489, "compression_ratio": 1.5945945945945945, "no_speech_prob": 0.02658115141093731}, {"id": 275, "seek": 122400, "start": 1224.0, "end": 1229.0, "text": " LibUSB is far from optimized, from optimal, I would say, more than optimized.", "tokens": [50364, 15834, 3447, 33, 307, 1400, 490, 26941, 11, 490, 16252, 11, 286, 576, 584, 11, 544, 813, 26941, 13, 50614], "temperature": 0.0, "avg_logprob": -0.16142768485873354, "compression_ratio": 1.597457627118644, "no_speech_prob": 0.08864064514636993}, {"id": 276, "seek": 122400, "start": 1229.0, "end": 1234.0, "text": " And of course, one of the important things is that the CPU, as it's not,", "tokens": [50614, 400, 295, 1164, 11, 472, 295, 264, 1021, 721, 307, 300, 264, 13199, 11, 382, 309, 311, 406, 11, 50864], "temperature": 0.0, "avg_logprob": -0.16142768485873354, "compression_ratio": 1.597457627118644, "no_speech_prob": 0.08864064514636993}, {"id": 277, "seek": 122400, "start": 1234.0, "end": 1239.0, "text": " well, that's the different cores of room for other things.", "tokens": [50864, 731, 11, 300, 311, 264, 819, 24826, 295, 1808, 337, 661, 721, 13, 51114], "temperature": 0.0, "avg_logprob": -0.16142768485873354, "compression_ratio": 1.597457627118644, "no_speech_prob": 0.08864064514636993}, {"id": 278, "seek": 122400, "start": 1239.0, "end": 1244.0, "text": " It means that you can do other tasks like paint and eye spectrum on the screen,", "tokens": [51114, 467, 1355, 300, 291, 393, 360, 661, 9608, 411, 4225, 293, 3313, 11143, 322, 264, 2568, 11, 51364], "temperature": 0.0, "avg_logprob": -0.16142768485873354, "compression_ratio": 1.597457627118644, "no_speech_prob": 0.08864064514636993}, {"id": 279, "seek": 122400, "start": 1244.0, "end": 1249.0, "text": " like send emails, like listen to music, whatever you want.", "tokens": [51364, 411, 2845, 12524, 11, 411, 2140, 281, 1318, 11, 2035, 291, 528, 13, 51614], "temperature": 0.0, "avg_logprob": -0.16142768485873354, "compression_ratio": 1.597457627118644, "no_speech_prob": 0.08864064514636993}, {"id": 280, "seek": 122400, "start": 1249.0, "end": 1252.0, "text": " I think that's all thoughts.", "tokens": [51614, 286, 519, 300, 311, 439, 4598, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16142768485873354, "compression_ratio": 1.597457627118644, "no_speech_prob": 0.08864064514636993}, {"id": 281, "seek": 125200, "start": 1252.0, "end": 1253.0, "text": " Thank you very much.", "tokens": [50364, 1044, 291, 588, 709, 13, 50414], "temperature": 0.0, "avg_logprob": -0.2010443860834295, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.033075932413339615}, {"id": 282, "seek": 125200, "start": 1253.0, "end": 1255.0, "text": " I didn't want to spend too much time.", "tokens": [50414, 286, 994, 380, 528, 281, 3496, 886, 709, 565, 13, 50514], "temperature": 0.0, "avg_logprob": -0.2010443860834295, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.033075932413339615}, {"id": 283, "seek": 125200, "start": 1255.0, "end": 1259.0, "text": " And I'll be happy to reply to questions if you have any.", "tokens": [50514, 400, 286, 603, 312, 2055, 281, 16972, 281, 1651, 498, 291, 362, 604, 13, 50714], "temperature": 0.0, "avg_logprob": -0.2010443860834295, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.033075932413339615}, {"id": 284, "seek": 125200, "start": 1259.0, "end": 1260.0, "text": " Thank you very much.", "tokens": [50714, 1044, 291, 588, 709, 13, 50764], "temperature": 0.0, "avg_logprob": -0.2010443860834295, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.033075932413339615}, {"id": 285, "seek": 125200, "start": 1260.0, "end": 1268.0, "text": " Yes.", "tokens": [50764, 1079, 13, 51164], "temperature": 0.0, "avg_logprob": -0.2010443860834295, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.033075932413339615}, {"id": 286, "seek": 125200, "start": 1268.0, "end": 1269.0, "text": " Yes, please.", "tokens": [51164, 1079, 11, 1767, 13, 51214], "temperature": 0.0, "avg_logprob": -0.2010443860834295, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.033075932413339615}, {"id": 287, "seek": 125200, "start": 1269.0, "end": 1274.0, "text": " You said you did the frequency shift at the very end after this,", "tokens": [51214, 509, 848, 291, 630, 264, 7893, 5513, 412, 264, 588, 917, 934, 341, 11, 51464], "temperature": 0.0, "avg_logprob": -0.2010443860834295, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.033075932413339615}, {"id": 288, "seek": 125200, "start": 1274.0, "end": 1279.0, "text": " and is it possible to already do at least a significant part of the frequency shift", "tokens": [51464, 293, 307, 309, 1944, 281, 1217, 360, 412, 1935, 257, 4776, 644, 295, 264, 7893, 5513, 51714], "temperature": 0.0, "avg_logprob": -0.2010443860834295, "compression_ratio": 1.6378378378378378, "no_speech_prob": 0.033075932413339615}, {"id": 289, "seek": 127900, "start": 1279.0, "end": 1282.0, "text": " by just offsetting the FFTs?", "tokens": [50364, 538, 445, 18687, 783, 264, 479, 25469, 82, 30, 50514], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 290, "seek": 127900, "start": 1282.0, "end": 1283.0, "text": " That's what I do.", "tokens": [50514, 663, 311, 437, 286, 360, 13, 50564], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 291, "seek": 127900, "start": 1283.0, "end": 1285.0, "text": " I rotate the FFT.", "tokens": [50564, 286, 13121, 264, 479, 25469, 13, 50664], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 292, "seek": 127900, "start": 1285.0, "end": 1287.0, "text": " I rotate, yes.", "tokens": [50664, 286, 13121, 11, 2086, 13, 50764], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 293, "seek": 127900, "start": 1287.0, "end": 1290.0, "text": " But then you have a reminder, because if you do this,", "tokens": [50764, 583, 550, 291, 362, 257, 13548, 11, 570, 498, 291, 360, 341, 11, 50914], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 294, "seek": 127900, "start": 1290.0, "end": 1295.0, "text": " you have the shift you perform is an integral fraction of the incoming.", "tokens": [50914, 291, 362, 264, 5513, 291, 2042, 307, 364, 11573, 14135, 295, 264, 22341, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 295, "seek": 127900, "start": 1295.0, "end": 1299.0, "text": " So you need a post fine tune.", "tokens": [51164, 407, 291, 643, 257, 2183, 2489, 10864, 13, 51364], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 296, "seek": 127900, "start": 1299.0, "end": 1300.0, "text": " And that's exactly this.", "tokens": [51364, 400, 300, 311, 2293, 341, 13, 51414], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 297, "seek": 127900, "start": 1300.0, "end": 1301.0, "text": " Yeah, you're right.", "tokens": [51414, 865, 11, 291, 434, 558, 13, 51464], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 298, "seek": 127900, "start": 1301.0, "end": 1302.0, "text": " That's what I'm doing.", "tokens": [51464, 663, 311, 437, 286, 478, 884, 13, 51514], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 299, "seek": 127900, "start": 1302.0, "end": 1303.0, "text": " Yes?", "tokens": [51514, 1079, 30, 51564], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 300, "seek": 127900, "start": 1303.0, "end": 1307.0, "text": " You didn't see an IIR, FIR, or CIC filter?", "tokens": [51564, 509, 994, 380, 536, 364, 6351, 49, 11, 41538, 11, 420, 383, 2532, 6608, 30, 51764], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 301, "seek": 127900, "start": 1307.0, "end": 1308.0, "text": " Just FIR.", "tokens": [51764, 1449, 41538, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14165322482585907, "compression_ratio": 1.5560344827586208, "no_speech_prob": 0.052375007420778275}, {"id": 302, "seek": 130800, "start": 1308.0, "end": 1312.0, "text": " Yeah, because it's just FFT and Chronicle products.", "tokens": [50364, 865, 11, 570, 309, 311, 445, 479, 25469, 293, 34038, 3520, 3383, 13, 50564], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 303, "seek": 130800, "start": 1312.0, "end": 1316.0, "text": " That was the simplest approach.", "tokens": [50564, 663, 390, 264, 22811, 3109, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 304, "seek": 130800, "start": 1316.0, "end": 1317.0, "text": " Thank you.", "tokens": [50764, 1044, 291, 13, 50814], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 305, "seek": 130800, "start": 1317.0, "end": 1318.0, "text": " Yeah?", "tokens": [50814, 865, 30, 50864], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 306, "seek": 130800, "start": 1318.0, "end": 1322.0, "text": " Was there any attempt to match this into the radio?", "tokens": [50864, 3027, 456, 604, 5217, 281, 2995, 341, 666, 264, 6477, 30, 51064], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 307, "seek": 130800, "start": 1322.0, "end": 1323.0, "text": " Not yet, to be honest.", "tokens": [51064, 1726, 1939, 11, 281, 312, 3245, 13, 51114], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 308, "seek": 130800, "start": 1323.0, "end": 1325.0, "text": " I'm not good enough in the radio.", "tokens": [51114, 286, 478, 406, 665, 1547, 294, 264, 6477, 13, 51214], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 309, "seek": 130800, "start": 1325.0, "end": 1328.0, "text": " I had a discussion with Jean-Michel, a side discussion,", "tokens": [51214, 286, 632, 257, 5017, 365, 13854, 12, 18462, 338, 11, 257, 1252, 5017, 11, 51364], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 310, "seek": 130800, "start": 1328.0, "end": 1330.0, "text": " and there's a plan to do it.", "tokens": [51364, 293, 456, 311, 257, 1393, 281, 360, 309, 13, 51464], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 311, "seek": 130800, "start": 1330.0, "end": 1335.0, "text": " The point, I mean, I was not able to do it for them.", "tokens": [51464, 440, 935, 11, 286, 914, 11, 286, 390, 406, 1075, 281, 360, 309, 337, 552, 13, 51714], "temperature": 0.0, "avg_logprob": -0.17030048370361328, "compression_ratio": 1.5021645021645023, "no_speech_prob": 0.017327789217233658}, {"id": 312, "seek": 133500, "start": 1335.0, "end": 1339.0, "text": " I don't have enough practice in C-Blocks, so I said,", "tokens": [50364, 286, 500, 380, 362, 1547, 3124, 294, 383, 12, 33, 34896, 11, 370, 286, 848, 11, 50564], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 313, "seek": 133500, "start": 1339.0, "end": 1342.0, "text": " OK, let's do this with the guys who know.", "tokens": [50564, 2264, 11, 718, 311, 360, 341, 365, 264, 1074, 567, 458, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 314, "seek": 133500, "start": 1342.0, "end": 1344.0, "text": " So we will come with a proposal.", "tokens": [50714, 407, 321, 486, 808, 365, 257, 11494, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 315, "seek": 133500, "start": 1344.0, "end": 1346.0, "text": " Yes, that's the idea.", "tokens": [50814, 1079, 11, 300, 311, 264, 1558, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 316, "seek": 133500, "start": 1346.0, "end": 1349.0, "text": " Typically, the idea would be to have something, if we can do it,", "tokens": [50914, 23129, 11, 264, 1558, 576, 312, 281, 362, 746, 11, 498, 321, 393, 360, 309, 11, 51064], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 317, "seek": 133500, "start": 1349.0, "end": 1353.0, "text": " that would permit to have messages to change, to add, and remove channels,", "tokens": [51064, 300, 576, 13423, 281, 362, 7897, 281, 1319, 11, 281, 909, 11, 293, 4159, 9235, 11, 51264], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 318, "seek": 133500, "start": 1353.0, "end": 1356.0, "text": " or tune the channels in radio directly.", "tokens": [51264, 420, 10864, 264, 9235, 294, 6477, 3838, 13, 51414], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 319, "seek": 133500, "start": 1356.0, "end": 1358.0, "text": " Because one of the points is that you need to allocate", "tokens": [51414, 1436, 472, 295, 264, 2793, 307, 300, 291, 643, 281, 35713, 51514], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 320, "seek": 133500, "start": 1358.0, "end": 1361.0, "text": " to define how many channels you want to use.", "tokens": [51514, 281, 6964, 577, 867, 9235, 291, 528, 281, 764, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 321, "seek": 133500, "start": 1361.0, "end": 1364.0, "text": " So depending on the applications, you might need different numbers", "tokens": [51664, 407, 5413, 322, 264, 5821, 11, 291, 1062, 643, 819, 3547, 51814], "temperature": 0.0, "avg_logprob": -0.13866513662964758, "compression_ratio": 1.6756756756756757, "no_speech_prob": 0.045239292085170746}, {"id": 322, "seek": 136400, "start": 1364.0, "end": 1365.0, "text": " of channels.", "tokens": [50364, 295, 9235, 13, 50414], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 323, "seek": 136400, "start": 1365.0, "end": 1367.0, "text": " That's why I wasn't able to do it.", "tokens": [50414, 663, 311, 983, 286, 2067, 380, 1075, 281, 360, 309, 13, 50514], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 324, "seek": 136400, "start": 1367.0, "end": 1369.0, "text": " Any other question?", "tokens": [50514, 2639, 661, 1168, 30, 50614], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 325, "seek": 136400, "start": 1369.0, "end": 1370.0, "text": " From the audience?", "tokens": [50614, 3358, 264, 4034, 30, 50664], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 326, "seek": 136400, "start": 1370.0, "end": 1371.0, "text": " Yes?", "tokens": [50664, 1079, 30, 50714], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 327, "seek": 136400, "start": 1371.0, "end": 1372.0, "text": " Just a small question.", "tokens": [50714, 1449, 257, 1359, 1168, 13, 50764], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 328, "seek": 136400, "start": 1372.0, "end": 1374.0, "text": " You used a single precision floating point.", "tokens": [50764, 509, 1143, 257, 2167, 18356, 12607, 935, 13, 50864], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 329, "seek": 136400, "start": 1374.0, "end": 1377.0, "text": " Very good question, in fact.", "tokens": [50864, 4372, 665, 1168, 11, 294, 1186, 13, 51014], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 330, "seek": 136400, "start": 1377.0, "end": 1380.0, "text": " Single except this one, the frequency shift.", "tokens": [51014, 31248, 3993, 341, 472, 11, 264, 7893, 5513, 13, 51164], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 331, "seek": 136400, "start": 1380.0, "end": 1384.0, "text": " Because in CUDA, the sine and cost functions are nightmare.", "tokens": [51164, 1436, 294, 29777, 7509, 11, 264, 18609, 293, 2063, 6828, 366, 18724, 13, 51364], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 332, "seek": 136400, "start": 1384.0, "end": 1386.0, "text": " They produce a lot of noise.", "tokens": [51364, 814, 5258, 257, 688, 295, 5658, 13, 51464], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 333, "seek": 136400, "start": 1386.0, "end": 1391.0, "text": " So in the code, it's written, double precision, don't touch this.", "tokens": [51464, 407, 294, 264, 3089, 11, 309, 311, 3720, 11, 3834, 18356, 11, 500, 380, 2557, 341, 13, 51714], "temperature": 0.0, "avg_logprob": -0.19979166162425074, "compression_ratio": 1.548, "no_speech_prob": 0.013396896421909332}, {"id": 334, "seek": 139100, "start": 1391.0, "end": 1395.0, "text": " Because otherwise, the noise is going up very quickly.", "tokens": [50364, 1436, 5911, 11, 264, 5658, 307, 516, 493, 588, 2661, 13, 50564], "temperature": 0.0, "avg_logprob": -0.5221775748512961, "compression_ratio": 1.318840579710145, "no_speech_prob": 0.018118133768439293}, {"id": 335, "seek": 139100, "start": 1395.0, "end": 1398.0, "text": " Anything else?", "tokens": [50564, 11998, 1646, 30, 50714], "temperature": 0.0, "avg_logprob": -0.5221775748512961, "compression_ratio": 1.318840579710145, "no_speech_prob": 0.018118133768439293}, {"id": 336, "seek": 139100, "start": 1398.0, "end": 1400.0, "text": " OK, thank you very much.", "tokens": [50714, 2264, 11, 1309, 291, 588, 709, 13, 50814], "temperature": 0.0, "avg_logprob": -0.5221775748512961, "compression_ratio": 1.318840579710145, "no_speech_prob": 0.018118133768439293}, {"id": 337, "seek": 139100, "start": 1400.0, "end": 1406.0, "text": " So there's more folks pressing in.", "tokens": [50814, 407, 456, 311, 544, 4024, 12417, 294, 13, 51114], "temperature": 0.0, "avg_logprob": -0.5221775748512961, "compression_ratio": 1.318840579710145, "no_speech_prob": 0.018118133768439293}, {"id": 338, "seek": 139100, "start": 1406.0, "end": 1416.0, "text": " So if I can ask you to give a little bit more space.", "tokens": [51114, 407, 498, 286, 393, 1029, 291, 281, 976, 257, 707, 857, 544, 1901, 13, 51614], "temperature": 0.0, "avg_logprob": -0.5221775748512961, "compression_ratio": 1.318840579710145, "no_speech_prob": 0.018118133768439293}, {"id": 339, "seek": 141600, "start": 1416.0, "end": 1423.0, "text": " You didn't need to kick me out.", "tokens": [50364, 509, 994, 380, 643, 281, 4437, 385, 484, 13, 50714], "temperature": 0.0, "avg_logprob": -0.6206511207248854, "compression_ratio": 0.9076923076923077, "no_speech_prob": 0.291170597076416}, {"id": 340, "seek": 141600, "start": 1423.0, "end": 1425.0, "text": " That's quite fine.", "tokens": [50714, 663, 311, 1596, 2489, 13, 50814], "temperature": 0.0, "avg_logprob": -0.6206511207248854, "compression_ratio": 0.9076923076923077, "no_speech_prob": 0.291170597076416}, {"id": 341, "seek": 141600, "start": 1425.0, "end": 1427.0, "text": " Bonjour.", "tokens": [50814, 25431, 13, 50914], "temperature": 0.0, "avg_logprob": -0.6206511207248854, "compression_ratio": 0.9076923076923077, "no_speech_prob": 0.291170597076416}, {"id": 342, "seek": 150600, "start": 1506.0, "end": 1508.0, "text": " Thank you.", "tokens": [50364, 1044, 291, 13, 50464], "temperature": 0.0, "avg_logprob": -0.6851434707641602, "compression_ratio": 0.5555555555555556, "no_speech_prob": 0.9920238256454468}], "language": "en"}