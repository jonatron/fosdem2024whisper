{"text": " Hi everyone, hope I am audible to the larger crowd here, thank you. So I am Sreesha Gurduru, I am a self engineer working for Klyso and I am here to present an open source project called KORUS which is responsible for an effortless S3 petabyte migration slash replication. So let us talk about why data migration, like when do we come across a data migration scenario. So lot of the companies and organizations these days have private cloud clusters and hardware which has certain specifications, queue and it can come to end of life anytime like the vendor might stop supporting the existing hardware, there might be a new hardware coming up. So in that case either there are two options in front of us which is to augment the existing cluster with the new hardware. If the specifications and skew are similar to what we have now in the cluster or to build up, build a new brand new cluster all together and when we build a brand new cluster there is a high reason for data to be migrated between old production cluster and the new cluster so that you know the data continues to stay and the operations can happen smooth. This can be one of the main reasons for data migration. Let us talk a few woes or difficulties with data migration. When we are talking about migration of data we are not talking about few bytes or gigabytes, we are talking about petabytes of storage. We have lot of data being stored in our storage back ends these days and those have to be effortlessly migrated to the new clusters. So the challenges include syncing petabytes of data and the continuous monitoring that we have to do behind the scenes like we just pick up some tool like RClone in this case and RClone is a robust synchronization tool, copy tool. So when we just pick that up we just have to monitor or even if we run that in the background we keep monitoring the status of the replication and also the time consumed with that huge amount of data to be copied across the clusters. Obviously the tools that are used for the migration and continuous changes in the data. The existing cluster we just do not yet decommission it. We have an active operation happening on the cluster be it reads, writes, updates. So that also due to the continuous changes in the data we might see it a bit difficult to copy or migrate the data. Let me share one of our experiences with a customer where in the similar scenario they had their cluster end of life and then we built a brand news cluster for them and the data to be migrated was around 3 petabytes. So between the old and new clusters we picked up RClone as the data migration tool. Migration let alone the data we had to migrate the metadata obviously and there was some issue with RClone where we could not copy the ACLs and the bucket policies for that particular bucket and then we had to tweak around and then we eventually got it to working and then that was a bit of difficult task for us. Indeed it is a Herculean task. So this experiment, this encounters with our experiences led to a tool called KORUS which is an open source tool which is a data application software which is capable of synchronizing S3 data as of today S3 data between multiple cloud storage back ends. Let me present you some of the problem statements for our tool. How to migrate S3 vendor data with reduced downtime? So I would not say there would not be any downtime but with reduced downtime and the cluster being operational at the same time and also the data being copied to the new cluster. And how to back up S3 data to another S3 in a different region or a different vendor? Here we might not have the same back end, we might be using storages from different providers like Amazon, Google, Minayo and we might have our own private clusters. So it is vendor agnostic. Like the initial goals of KORUS was to have a vendor agnostic solution. Like it should be able to support multiple back ends and with a pluggable architecture that means the components in KORUS are loosely coupled. Like if I see that one of the layer can be better, it can be replaced with another tool which is more performant and more efficient, I should be able to replace it. And then benchmarking of course before we add in any component we benchmark that tool efficiently so that it will be compatible with all of our, the entire project. The focus on correctness. So the data which is present in the source and the back ends, the following back ends we ensure that the data is correct and in sync with all the storage back ends. And then migrating big bucket under the load without downtime or with reduced downtime. So there are two things here, there can be multiple buckets with small amounts of data and those buckets are easy to be copied because it just takes couple of minutes. But there is a scenario where a bucket, one bucket has huge amount of data and lot of clients might be writing to one bucket and that bucket has to be migrated. So that is a bit of concern. So overview of chorus is there is one main storage and remaining can be configured as the follower back ends. And the users start by inputting the storage credentials in the configuration. And once the configuration is started and configured the chorus S3 API can be used instead of the storage backend API. Like if you are using AWS, if you are using Google, Minio, every backend has its own API. Instead of using that you can use one backend, one chorus API to communicate with multiple back ends because they are all S3 based. And chorus proxies request to the main storage and then eventually the storage is copied to the followers in the backend. All the existing data is replicated. For example when we introduce chorus into our ecosystem we might already have clusters with certain amount of data which has to be copied to different back ends that we configure later. So the existing data can be configured in the background using this tool. The data replication can be configured, paused, resumed, there are different life cycles for that particular request, the status. You can just stop, start, resume at any time you want and the management can be done using a web UI or a CLI. So the features of chorus include routing and replication per bucket. You can configure where to route or the request and where to replicate a bucket. And then again the same using you can pause and resume anytime. And then synchronize object or metadata. So just not the storage, you can also copy the ACLs, bucket policies, tags and everything using the same tool. And then as I spoke earlier migrate existing data in the background, track replication lag. So as of today we might have one set of configuration and the data must be copying to the source. To the back end, to the follower back ends, we can always track the replication and we can improve with the configuration options. We can start to rate limit, we can increase the number of workers. So we can do that. And chorus exposes Prometheus metrics. So we have the entire logging thing and the metrics are sent to Prometheus and the logs are in JSON format. Easy to read. Proxy and Grafana form the monitoring stack. You can visualize the data of how the bucket is being replicated and at what stage it is using the visualization stack. Let me briefly talk about the architecture of this entire chorus. Chorus is structured around two main web services. One is the proxy and the other is the worker. So initially the request comes to the proxy. We are talking about a flow where the routing policy is there. So initially the request comes to the proxy and based on the routing policy, if the bucket has to go to the main storage, which is configured to be Minayo here. So the request comes to the main storage and the request goes back to the proxy and then eventually to the user. That is one of the flows. The second flow is where the replication scenario is established. Again the request comes to the proxy and then there is an event or task created in Redis based on the replication policy. Like it knows what is the main storage and which storage should the replication be done to. In this case it is Ceph for example. And then the chorus worker reads the requests or tasks from the cache and then that routes the request to the, reads from the main storage and replicates to the back end. The chorus worker is accessible using WebBY and CLI. So this is an overview of the entire flow based on different scenarios. So chorus also has an initial migration feature like as I told the replication can happen in the background. So initially when the replication is happening in the background, all the buckets are listed from the main storage and then the objects within particular bucket are listed and then the number of tasks based on the objects are created and it is ensured that every object is copied to the follower back end using a particular task. So the worker processes tasks in the background copying the data to the follower back ends. Here these are the main components of chorus proxy worker admin UI and Redis. So proxy and worker are written in Golang and admin is written in view or the entire deployment is done in a containerized fashion on Kubernetes pods. Let us talk something about the resource requirements for different components in chorus. For Redis the scaling is done using Redis cluster and the persistence is ensured using Redis AOF and Redis database and fault tolerance in case of Redis data loss we can always restart the bucket replication because the state is maintained and memory consumption if there are around 1 million objects that are to be migrated then it can approximately take 1 million tasks in the queue then approximately 700 MB. This is all based on our benchmarking it can change with different scenarios and Redis is assumed to take less CPU and it can be between 100 and 1000 requests per second. So coming to the proxy it is stateless, it consumes less memory and less CPU but high network because proxy is the kind of brain it takes in the requests and it routes the request accordingly based on replication or the actual routing hence it also needs high network. Coming to the worker it is again stateless it takes in high memory and high network but less CPU because worker is the one that routes the reads request from the cache and routes request to the back ends based on the replication policy. So worker instance network and memory consumption can be rate limited in the configuration like in the day when there is huge amount of request coming to our clusters we can just stop the migration activity for a minute like or we can rate limited to do it at a lesser rate and then eventually you can increase it when the bandwidth is high. So yeah so what are our next steps for chorus we want to perform more load tests in case of larger buckets more data and efficient time consumption and then resource optimization at various component level like Redis how can we make it better and workers we want to make the logic more functional and then the API cost. So the routing policy alternatives since we have multiple storage packets what we want to do is to route based on object size for example if there is one GB of file you can configure it to be written to a particular storage packet and then if there is small number of files you can configure it for one back end based on the quota and lot of other parameters and load balance read request for replicated data. Now that we have multiple storage back ends in our hand we can always make an efficient use of each back end we can load balance the requests like for example if main storage is busy in taking writes since the storage is data is being copied to the follower back ends we can always route the read request to any of the back end which is idle so that logic and so every storage back end is providing a bucket notification and event log so we can subscribe to those events instead of querying the proxy every time and overloading it instead we can use proxy to really write data and migrate data so we can use that proxy instead or to keep polling for the bucket information and then there is we are planning on having a Swift API compatibility as of today we have a robust S3 API compatibility but we are planning to have open stack Swift integration and then life cycle policy the API parameters for different back ends is different so we just want to have good life cycle policy it is being tested and when a bucket is created with a particular life cycle policy in one storage the similar should be replicated to the other back ends as well without loss of any configuration for policy. Use cases the further use cases that we see for chorus are active transparent proxy post migration to speak briefly about active proxy migration so that means if the source and destination are completely copied and if we want to stop using the source anymore so once the data is moved we should be able to switch the proxy to the to another back end to make it a main storage instead of configuring it in the configuration file. Robust backup service so if we have two to DCs two sites then we want to synchronize data between both sites in both directions so the simple setup is to synchronize data between prod and the backup site so we want to make this tool efficient enough to be robust backup service like we can ensure that during disaster recovery even if the primary goes down we can simply do all the operations from the other back ends that are available by switching the storage back ends based on the based on how they are configured. So any questions regarding chorus and its implementation? One question regarding versioning so if you do replication from a source to a destination and the source has versioning enabled and there's a couple of versions how does this integrate into the chorus? So the question is basically about object versioning so if an object version is configured in the source how do we replicate it right? So for example in object versioning those are also defined as objects in a hidden bucket right so that bucket will eventually also be copied with the metadata so the object which you create initially before the first object it will have metadata and you configure versioning on it and there is a hidden bucket where all the versions go and we can restore it to that version anytime so the entire data is copied to the other back end as well with the metadata so that's how we can ensure. Yes I'm picking also about backup use case. Did chorus manage object log? Can you repeat that for me? Did chorus manage object log? Object log. Object log. Yes. Lock. Lock. Yes. I'm sorry I couldn't get that. Maybe I'm not so much acquainted with that scenario but can you just elaborate about what do you mean by object locking? It's a warm technology just the object is in right one time and also it cannot be modified. Okay. Read only. Read only. Read only. It's like a malware protection. The ransomware thing. That was one of our features that we want to implement so the question is more about when an object is locked or when there is an attack on the data. So yeah the ransomware thing is in one of our discussions where so actively the back end will be exposed more instead of the main storage so the warm or whatever that is introduced it will be in the back end and then we I mean that's just in discussions we are not yet there to implement but please feel free to post your question in GitHub. You can raise an issue. You can start a discussion in GitHub and then we can definitely take that as a feature with more details. These are the resources. We have open source the back end and then you can definitely reach out to us on GitHub and then this is a GitHub link for the chorus project. I'm sure chorus is more than I cannot speak about chorus so much in this 30 minutes but definitely it's a more efficient tool and it has a lot of capabilities to be acting as an orchestration layer for multiple back ends. Like we need not just use we can use one API to talk to multiple different types of back ends with different vendors. So yeah we are looking forward for more improvements more features and you can always talk to us on GitHub and then we can definitely improve this project together. Thank you so much for this opportunity. Can I get a correct answer? While you're migrating you want to implement a load balancing feature. Yeah. So you need to be in state of all the objects that you already migrated and that you still have to migrate to make an informed decision where you should go. So do you already have like a database or how do you know? Yeah we are going to do yeah to make the load balancing so that you the request is sent to the correct. Yeah so you can like a faster cluster you can go to the new cluster. Exactly. It's time to be more mature to add a presentation for the code but it didn't get in 30 minutes. Yeah I got it. It was like down how to restore it. Yeah sure sure. But it's still like it's really new we have some people there casting we're talking to start. Thank you. Very nice. At the moment we just need to connect both. Yeah that would be great. And we can set up the next speaker.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 13.72, "text": " Hi everyone, hope I am audible to the larger crowd here, thank you.", "tokens": [50364, 2421, 1518, 11, 1454, 286, 669, 41317, 281, 264, 4833, 6919, 510, 11, 1309, 291, 13, 51050], "temperature": 0.0, "avg_logprob": -0.31597388131277904, "compression_ratio": 1.3728813559322033, "no_speech_prob": 0.32724830508232117}, {"id": 1, "seek": 0, "start": 13.72, "end": 20.84, "text": " So I am Sreesha Gurduru, I am a self engineer working for Klyso and I am here to present", "tokens": [51050, 407, 286, 669, 318, 265, 279, 1641, 460, 10752, 8739, 11, 286, 669, 257, 2698, 11403, 1364, 337, 591, 356, 539, 293, 286, 669, 510, 281, 1974, 51406], "temperature": 0.0, "avg_logprob": -0.31597388131277904, "compression_ratio": 1.3728813559322033, "no_speech_prob": 0.32724830508232117}, {"id": 2, "seek": 0, "start": 20.84, "end": 29.240000000000002, "text": " an open source project called KORUS which is responsible for an effortless S3 petabyte", "tokens": [51406, 364, 1269, 4009, 1716, 1219, 591, 2483, 3447, 597, 307, 6250, 337, 364, 4630, 1832, 318, 18, 3817, 34529, 51826], "temperature": 0.0, "avg_logprob": -0.31597388131277904, "compression_ratio": 1.3728813559322033, "no_speech_prob": 0.32724830508232117}, {"id": 3, "seek": 2924, "start": 29.24, "end": 35.12, "text": " migration slash replication.", "tokens": [50364, 17011, 17330, 39911, 13, 50658], "temperature": 0.0, "avg_logprob": -0.22256296331232245, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.0750490128993988}, {"id": 4, "seek": 2924, "start": 35.12, "end": 42.92, "text": " So let us talk about why data migration, like when do we come across a data migration scenario.", "tokens": [50658, 407, 718, 505, 751, 466, 983, 1412, 17011, 11, 411, 562, 360, 321, 808, 2108, 257, 1412, 17011, 9005, 13, 51048], "temperature": 0.0, "avg_logprob": -0.22256296331232245, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.0750490128993988}, {"id": 5, "seek": 2924, "start": 42.92, "end": 51.84, "text": " So lot of the companies and organizations these days have private cloud clusters and hardware", "tokens": [51048, 407, 688, 295, 264, 3431, 293, 6150, 613, 1708, 362, 4551, 4588, 23313, 293, 8837, 51494], "temperature": 0.0, "avg_logprob": -0.22256296331232245, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.0750490128993988}, {"id": 6, "seek": 2924, "start": 51.84, "end": 58.480000000000004, "text": " which has certain specifications, queue and it can come to end of life anytime like the", "tokens": [51494, 597, 575, 1629, 29448, 11, 18639, 293, 309, 393, 808, 281, 917, 295, 993, 13038, 411, 264, 51826], "temperature": 0.0, "avg_logprob": -0.22256296331232245, "compression_ratio": 1.627659574468085, "no_speech_prob": 0.0750490128993988}, {"id": 7, "seek": 5848, "start": 58.48, "end": 63.279999999999994, "text": " vendor might stop supporting the existing hardware, there might be a new hardware coming", "tokens": [50364, 24321, 1062, 1590, 7231, 264, 6741, 8837, 11, 456, 1062, 312, 257, 777, 8837, 1348, 50604], "temperature": 0.0, "avg_logprob": -0.20277396668779088, "compression_ratio": 1.8904761904761904, "no_speech_prob": 0.007877683266997337}, {"id": 8, "seek": 5848, "start": 63.279999999999994, "end": 64.36, "text": " up.", "tokens": [50604, 493, 13, 50658], "temperature": 0.0, "avg_logprob": -0.20277396668779088, "compression_ratio": 1.8904761904761904, "no_speech_prob": 0.007877683266997337}, {"id": 9, "seek": 5848, "start": 64.36, "end": 71.02, "text": " So in that case either there are two options in front of us which is to augment the existing", "tokens": [50658, 407, 294, 300, 1389, 2139, 456, 366, 732, 3956, 294, 1868, 295, 505, 597, 307, 281, 29919, 264, 6741, 50991], "temperature": 0.0, "avg_logprob": -0.20277396668779088, "compression_ratio": 1.8904761904761904, "no_speech_prob": 0.007877683266997337}, {"id": 10, "seek": 5848, "start": 71.02, "end": 73.96, "text": " cluster with the new hardware.", "tokens": [50991, 13630, 365, 264, 777, 8837, 13, 51138], "temperature": 0.0, "avg_logprob": -0.20277396668779088, "compression_ratio": 1.8904761904761904, "no_speech_prob": 0.007877683266997337}, {"id": 11, "seek": 5848, "start": 73.96, "end": 79.56, "text": " If the specifications and skew are similar to what we have now in the cluster or to build", "tokens": [51138, 759, 264, 29448, 293, 8756, 86, 366, 2531, 281, 437, 321, 362, 586, 294, 264, 13630, 420, 281, 1322, 51418], "temperature": 0.0, "avg_logprob": -0.20277396668779088, "compression_ratio": 1.8904761904761904, "no_speech_prob": 0.007877683266997337}, {"id": 12, "seek": 5848, "start": 79.56, "end": 85.56, "text": " up, build a new brand new cluster all together and when we build a brand new cluster there", "tokens": [51418, 493, 11, 1322, 257, 777, 3360, 777, 13630, 439, 1214, 293, 562, 321, 1322, 257, 3360, 777, 13630, 456, 51718], "temperature": 0.0, "avg_logprob": -0.20277396668779088, "compression_ratio": 1.8904761904761904, "no_speech_prob": 0.007877683266997337}, {"id": 13, "seek": 8556, "start": 85.56, "end": 91.34, "text": " is a high reason for data to be migrated between old production cluster and the new", "tokens": [50364, 307, 257, 1090, 1778, 337, 1412, 281, 312, 48329, 1296, 1331, 4265, 13630, 293, 264, 777, 50653], "temperature": 0.0, "avg_logprob": -0.17598621411757034, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.007334119640290737}, {"id": 14, "seek": 8556, "start": 91.34, "end": 99.84, "text": " cluster so that you know the data continues to stay and the operations can happen smooth.", "tokens": [50653, 13630, 370, 300, 291, 458, 264, 1412, 6515, 281, 1754, 293, 264, 7705, 393, 1051, 5508, 13, 51078], "temperature": 0.0, "avg_logprob": -0.17598621411757034, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.007334119640290737}, {"id": 15, "seek": 8556, "start": 99.84, "end": 102.88, "text": " This can be one of the main reasons for data migration.", "tokens": [51078, 639, 393, 312, 472, 295, 264, 2135, 4112, 337, 1412, 17011, 13, 51230], "temperature": 0.0, "avg_logprob": -0.17598621411757034, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.007334119640290737}, {"id": 16, "seek": 8556, "start": 102.88, "end": 108.64, "text": " Let us talk a few woes or difficulties with data migration.", "tokens": [51230, 961, 505, 751, 257, 1326, 6020, 279, 420, 14399, 365, 1412, 17011, 13, 51518], "temperature": 0.0, "avg_logprob": -0.17598621411757034, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.007334119640290737}, {"id": 17, "seek": 8556, "start": 108.64, "end": 115.24000000000001, "text": " When we are talking about migration of data we are not talking about few bytes or gigabytes,", "tokens": [51518, 1133, 321, 366, 1417, 466, 17011, 295, 1412, 321, 366, 406, 1417, 466, 1326, 36088, 420, 42741, 11, 51848], "temperature": 0.0, "avg_logprob": -0.17598621411757034, "compression_ratio": 1.7934272300469483, "no_speech_prob": 0.007334119640290737}, {"id": 18, "seek": 11524, "start": 115.24, "end": 117.92, "text": " we are talking about petabytes of storage.", "tokens": [50364, 321, 366, 1417, 466, 3817, 24538, 295, 6725, 13, 50498], "temperature": 0.0, "avg_logprob": -0.175454128356207, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.032024528831243515}, {"id": 19, "seek": 11524, "start": 117.92, "end": 122.83999999999999, "text": " We have lot of data being stored in our storage back ends these days and those have to be", "tokens": [50498, 492, 362, 688, 295, 1412, 885, 12187, 294, 527, 6725, 646, 5314, 613, 1708, 293, 729, 362, 281, 312, 50744], "temperature": 0.0, "avg_logprob": -0.175454128356207, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.032024528831243515}, {"id": 20, "seek": 11524, "start": 122.83999999999999, "end": 127.16, "text": " effortlessly migrated to the new clusters.", "tokens": [50744, 4630, 12048, 48329, 281, 264, 777, 23313, 13, 50960], "temperature": 0.0, "avg_logprob": -0.175454128356207, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.032024528831243515}, {"id": 21, "seek": 11524, "start": 127.16, "end": 133.56, "text": " So the challenges include syncing petabytes of data and the continuous monitoring that", "tokens": [50960, 407, 264, 4759, 4090, 5451, 2175, 3817, 24538, 295, 1412, 293, 264, 10957, 11028, 300, 51280], "temperature": 0.0, "avg_logprob": -0.175454128356207, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.032024528831243515}, {"id": 22, "seek": 11524, "start": 133.56, "end": 140.24, "text": " we have to do behind the scenes like we just pick up some tool like RClone in this case", "tokens": [51280, 321, 362, 281, 360, 2261, 264, 8026, 411, 321, 445, 1888, 493, 512, 2290, 411, 497, 9966, 546, 294, 341, 1389, 51614], "temperature": 0.0, "avg_logprob": -0.175454128356207, "compression_ratio": 1.650943396226415, "no_speech_prob": 0.032024528831243515}, {"id": 23, "seek": 14024, "start": 140.76000000000002, "end": 145.76000000000002, "text": " and RClone is a robust synchronization tool, copy tool.", "tokens": [50390, 293, 497, 9966, 546, 307, 257, 13956, 19331, 2144, 2290, 11, 5055, 2290, 13, 50640], "temperature": 0.0, "avg_logprob": -0.13018983133723228, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.017149828374385834}, {"id": 24, "seek": 14024, "start": 145.76000000000002, "end": 151.44, "text": " So when we just pick that up we just have to monitor or even if we run that in the background", "tokens": [50640, 407, 562, 321, 445, 1888, 300, 493, 321, 445, 362, 281, 6002, 420, 754, 498, 321, 1190, 300, 294, 264, 3678, 50924], "temperature": 0.0, "avg_logprob": -0.13018983133723228, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.017149828374385834}, {"id": 25, "seek": 14024, "start": 151.44, "end": 157.48000000000002, "text": " we keep monitoring the status of the replication and also the time consumed with that huge amount", "tokens": [50924, 321, 1066, 11028, 264, 6558, 295, 264, 39911, 293, 611, 264, 565, 21226, 365, 300, 2603, 2372, 51226], "temperature": 0.0, "avg_logprob": -0.13018983133723228, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.017149828374385834}, {"id": 26, "seek": 14024, "start": 157.48000000000002, "end": 161.44, "text": " of data to be copied across the clusters.", "tokens": [51226, 295, 1412, 281, 312, 25365, 2108, 264, 23313, 13, 51424], "temperature": 0.0, "avg_logprob": -0.13018983133723228, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.017149828374385834}, {"id": 27, "seek": 14024, "start": 161.44, "end": 168.60000000000002, "text": " Obviously the tools that are used for the migration and continuous changes in the data.", "tokens": [51424, 7580, 264, 3873, 300, 366, 1143, 337, 264, 17011, 293, 10957, 2962, 294, 264, 1412, 13, 51782], "temperature": 0.0, "avg_logprob": -0.13018983133723228, "compression_ratio": 1.6535087719298245, "no_speech_prob": 0.017149828374385834}, {"id": 28, "seek": 16860, "start": 168.6, "end": 171.84, "text": " The existing cluster we just do not yet decommission it.", "tokens": [50364, 440, 6741, 13630, 321, 445, 360, 406, 1939, 979, 1204, 3106, 309, 13, 50526], "temperature": 0.0, "avg_logprob": -0.16384502778570337, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0009840201819315553}, {"id": 29, "seek": 16860, "start": 171.84, "end": 178.28, "text": " We have an active operation happening on the cluster be it reads, writes, updates.", "tokens": [50526, 492, 362, 364, 4967, 6916, 2737, 322, 264, 13630, 312, 309, 15700, 11, 13657, 11, 9205, 13, 50848], "temperature": 0.0, "avg_logprob": -0.16384502778570337, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0009840201819315553}, {"id": 30, "seek": 16860, "start": 178.28, "end": 184.12, "text": " So that also due to the continuous changes in the data we might see it a bit difficult", "tokens": [50848, 407, 300, 611, 3462, 281, 264, 10957, 2962, 294, 264, 1412, 321, 1062, 536, 309, 257, 857, 2252, 51140], "temperature": 0.0, "avg_logprob": -0.16384502778570337, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0009840201819315553}, {"id": 31, "seek": 16860, "start": 184.12, "end": 186.84, "text": " to copy or migrate the data.", "tokens": [51140, 281, 5055, 420, 31821, 264, 1412, 13, 51276], "temperature": 0.0, "avg_logprob": -0.16384502778570337, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0009840201819315553}, {"id": 32, "seek": 16860, "start": 186.84, "end": 194.34, "text": " Let me share one of our experiences with a customer where in the similar scenario they", "tokens": [51276, 961, 385, 2073, 472, 295, 527, 5235, 365, 257, 5474, 689, 294, 264, 2531, 9005, 436, 51651], "temperature": 0.0, "avg_logprob": -0.16384502778570337, "compression_ratio": 1.5833333333333333, "no_speech_prob": 0.0009840201819315553}, {"id": 33, "seek": 19434, "start": 194.42000000000002, "end": 201.42000000000002, "text": " had their cluster end of life and then we built a brand news cluster for them and the", "tokens": [50368, 632, 641, 13630, 917, 295, 993, 293, 550, 321, 3094, 257, 3360, 2583, 13630, 337, 552, 293, 264, 50718], "temperature": 0.0, "avg_logprob": -0.21352785986823006, "compression_ratio": 1.7257142857142858, "no_speech_prob": 0.001923358766362071}, {"id": 34, "seek": 19434, "start": 201.42000000000002, "end": 206.06, "text": " data to be migrated was around 3 petabytes.", "tokens": [50718, 1412, 281, 312, 48329, 390, 926, 805, 3817, 24538, 13, 50950], "temperature": 0.0, "avg_logprob": -0.21352785986823006, "compression_ratio": 1.7257142857142858, "no_speech_prob": 0.001923358766362071}, {"id": 35, "seek": 19434, "start": 206.06, "end": 212.06, "text": " So between the old and new clusters we picked up RClone as the data migration tool.", "tokens": [50950, 407, 1296, 264, 1331, 293, 777, 23313, 321, 6183, 493, 497, 9966, 546, 382, 264, 1412, 17011, 2290, 13, 51250], "temperature": 0.0, "avg_logprob": -0.21352785986823006, "compression_ratio": 1.7257142857142858, "no_speech_prob": 0.001923358766362071}, {"id": 36, "seek": 19434, "start": 212.06, "end": 219.06, "text": " Migration let alone the data we had to migrate the metadata obviously and there was some", "tokens": [51250, 18951, 2405, 718, 3312, 264, 1412, 321, 632, 281, 31821, 264, 26603, 2745, 293, 456, 390, 512, 51600], "temperature": 0.0, "avg_logprob": -0.21352785986823006, "compression_ratio": 1.7257142857142858, "no_speech_prob": 0.001923358766362071}, {"id": 37, "seek": 21906, "start": 219.86, "end": 226.06, "text": " issue with RClone where we could not copy the ACLs and the bucket policies for that", "tokens": [50404, 2734, 365, 497, 9966, 546, 689, 321, 727, 406, 5055, 264, 43873, 82, 293, 264, 13058, 7657, 337, 300, 50714], "temperature": 0.0, "avg_logprob": -0.21678573435003107, "compression_ratio": 1.5825688073394495, "no_speech_prob": 0.004063836764544249}, {"id": 38, "seek": 21906, "start": 226.06, "end": 233.06, "text": " particular bucket and then we had to tweak around and then we eventually got it to working", "tokens": [50714, 1729, 13058, 293, 550, 321, 632, 281, 29879, 926, 293, 550, 321, 4728, 658, 309, 281, 1364, 51064], "temperature": 0.0, "avg_logprob": -0.21678573435003107, "compression_ratio": 1.5825688073394495, "no_speech_prob": 0.004063836764544249}, {"id": 39, "seek": 21906, "start": 233.06, "end": 237.5, "text": " and then that was a bit of difficult task for us.", "tokens": [51064, 293, 550, 300, 390, 257, 857, 295, 2252, 5633, 337, 505, 13, 51286], "temperature": 0.0, "avg_logprob": -0.21678573435003107, "compression_ratio": 1.5825688073394495, "no_speech_prob": 0.004063836764544249}, {"id": 40, "seek": 21906, "start": 237.5, "end": 238.9, "text": " Indeed it is a Herculean task.", "tokens": [51286, 15061, 309, 307, 257, 389, 2869, 2271, 282, 5633, 13, 51356], "temperature": 0.0, "avg_logprob": -0.21678573435003107, "compression_ratio": 1.5825688073394495, "no_speech_prob": 0.004063836764544249}, {"id": 41, "seek": 21906, "start": 238.9, "end": 245.9, "text": " So this experiment, this encounters with our experiences led to a tool called KORUS which", "tokens": [51356, 407, 341, 5120, 11, 341, 26310, 365, 527, 5235, 4684, 281, 257, 2290, 1219, 591, 2483, 3447, 597, 51706], "temperature": 0.0, "avg_logprob": -0.21678573435003107, "compression_ratio": 1.5825688073394495, "no_speech_prob": 0.004063836764544249}, {"id": 42, "seek": 24590, "start": 246.02, "end": 253.02, "text": " is an open source tool which is a data application software which is capable of synchronizing", "tokens": [50370, 307, 364, 1269, 4009, 2290, 597, 307, 257, 1412, 3861, 4722, 597, 307, 8189, 295, 19331, 3319, 50720], "temperature": 0.0, "avg_logprob": -0.19619686923809906, "compression_ratio": 1.4893617021276595, "no_speech_prob": 0.0030609017703682184}, {"id": 43, "seek": 24590, "start": 254.94, "end": 263.06, "text": " S3 data as of today S3 data between multiple cloud storage back ends.", "tokens": [50816, 318, 18, 1412, 382, 295, 965, 318, 18, 1412, 1296, 3866, 4588, 6725, 646, 5314, 13, 51222], "temperature": 0.0, "avg_logprob": -0.19619686923809906, "compression_ratio": 1.4893617021276595, "no_speech_prob": 0.0030609017703682184}, {"id": 44, "seek": 24590, "start": 263.06, "end": 268.7, "text": " Let me present you some of the problem statements for our tool.", "tokens": [51222, 961, 385, 1974, 291, 512, 295, 264, 1154, 12363, 337, 527, 2290, 13, 51504], "temperature": 0.0, "avg_logprob": -0.19619686923809906, "compression_ratio": 1.4893617021276595, "no_speech_prob": 0.0030609017703682184}, {"id": 45, "seek": 24590, "start": 268.7, "end": 272.9, "text": " How to migrate S3 vendor data with reduced downtime?", "tokens": [51504, 1012, 281, 31821, 318, 18, 24321, 1412, 365, 9212, 49648, 30, 51714], "temperature": 0.0, "avg_logprob": -0.19619686923809906, "compression_ratio": 1.4893617021276595, "no_speech_prob": 0.0030609017703682184}, {"id": 46, "seek": 27290, "start": 272.9, "end": 279.29999999999995, "text": " So I would not say there would not be any downtime but with reduced downtime and the", "tokens": [50364, 407, 286, 576, 406, 584, 456, 576, 406, 312, 604, 49648, 457, 365, 9212, 49648, 293, 264, 50684], "temperature": 0.0, "avg_logprob": -0.1855858550674614, "compression_ratio": 1.7378640776699028, "no_speech_prob": 0.0111251100897789}, {"id": 47, "seek": 27290, "start": 279.29999999999995, "end": 283.73999999999995, "text": " cluster being operational at the same time and also the data being copied to the new", "tokens": [50684, 13630, 885, 16607, 412, 264, 912, 565, 293, 611, 264, 1412, 885, 25365, 281, 264, 777, 50906], "temperature": 0.0, "avg_logprob": -0.1855858550674614, "compression_ratio": 1.7378640776699028, "no_speech_prob": 0.0111251100897789}, {"id": 48, "seek": 27290, "start": 283.73999999999995, "end": 285.65999999999997, "text": " cluster.", "tokens": [50906, 13630, 13, 51002], "temperature": 0.0, "avg_logprob": -0.1855858550674614, "compression_ratio": 1.7378640776699028, "no_speech_prob": 0.0111251100897789}, {"id": 49, "seek": 27290, "start": 285.65999999999997, "end": 292.82, "text": " And how to back up S3 data to another S3 in a different region or a different vendor?", "tokens": [51002, 400, 577, 281, 646, 493, 318, 18, 1412, 281, 1071, 318, 18, 294, 257, 819, 4458, 420, 257, 819, 24321, 30, 51360], "temperature": 0.0, "avg_logprob": -0.1855858550674614, "compression_ratio": 1.7378640776699028, "no_speech_prob": 0.0111251100897789}, {"id": 50, "seek": 27290, "start": 292.82, "end": 299.82, "text": " Here we might not have the same back end, we might be using storages from different providers", "tokens": [51360, 1692, 321, 1062, 406, 362, 264, 912, 646, 917, 11, 321, 1062, 312, 1228, 5967, 1660, 490, 819, 11330, 51710], "temperature": 0.0, "avg_logprob": -0.1855858550674614, "compression_ratio": 1.7378640776699028, "no_speech_prob": 0.0111251100897789}, {"id": 51, "seek": 29982, "start": 300.82, "end": 307.18, "text": " like Amazon, Google, Minayo and we might have our own private clusters.", "tokens": [50414, 411, 6795, 11, 3329, 11, 2829, 48947, 293, 321, 1062, 362, 527, 1065, 4551, 23313, 13, 50732], "temperature": 0.0, "avg_logprob": -0.22194850875670652, "compression_ratio": 1.5, "no_speech_prob": 0.0060898009687662125}, {"id": 52, "seek": 29982, "start": 307.18, "end": 310.94, "text": " So it is vendor agnostic.", "tokens": [50732, 407, 309, 307, 24321, 623, 77, 19634, 13, 50920], "temperature": 0.0, "avg_logprob": -0.22194850875670652, "compression_ratio": 1.5, "no_speech_prob": 0.0060898009687662125}, {"id": 53, "seek": 29982, "start": 310.94, "end": 316.94, "text": " Like the initial goals of KORUS was to have a vendor agnostic solution.", "tokens": [50920, 1743, 264, 5883, 5493, 295, 591, 2483, 3447, 390, 281, 362, 257, 24321, 623, 77, 19634, 3827, 13, 51220], "temperature": 0.0, "avg_logprob": -0.22194850875670652, "compression_ratio": 1.5, "no_speech_prob": 0.0060898009687662125}, {"id": 54, "seek": 29982, "start": 316.94, "end": 323.18, "text": " Like it should be able to support multiple back ends and with a pluggable architecture", "tokens": [51220, 1743, 309, 820, 312, 1075, 281, 1406, 3866, 646, 5314, 293, 365, 257, 499, 3562, 712, 9482, 51532], "temperature": 0.0, "avg_logprob": -0.22194850875670652, "compression_ratio": 1.5, "no_speech_prob": 0.0060898009687662125}, {"id": 55, "seek": 29982, "start": 323.18, "end": 327.53999999999996, "text": " that means the components in KORUS are loosely coupled.", "tokens": [51532, 300, 1355, 264, 6677, 294, 591, 2483, 3447, 366, 37966, 29482, 13, 51750], "temperature": 0.0, "avg_logprob": -0.22194850875670652, "compression_ratio": 1.5, "no_speech_prob": 0.0060898009687662125}, {"id": 56, "seek": 32754, "start": 327.62, "end": 334.3, "text": " Like if I see that one of the layer can be better, it can be replaced with another tool", "tokens": [50368, 1743, 498, 286, 536, 300, 472, 295, 264, 4583, 393, 312, 1101, 11, 309, 393, 312, 10772, 365, 1071, 2290, 50702], "temperature": 0.0, "avg_logprob": -0.19698752479991694, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.007338991854339838}, {"id": 57, "seek": 32754, "start": 334.3, "end": 340.74, "text": " which is more performant and more efficient, I should be able to replace it.", "tokens": [50702, 597, 307, 544, 2042, 394, 293, 544, 7148, 11, 286, 820, 312, 1075, 281, 7406, 309, 13, 51024], "temperature": 0.0, "avg_logprob": -0.19698752479991694, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.007338991854339838}, {"id": 58, "seek": 32754, "start": 340.74, "end": 346.14000000000004, "text": " And then benchmarking of course before we add in any component we benchmark that tool", "tokens": [51024, 400, 550, 18927, 278, 295, 1164, 949, 321, 909, 294, 604, 6542, 321, 18927, 300, 2290, 51294], "temperature": 0.0, "avg_logprob": -0.19698752479991694, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.007338991854339838}, {"id": 59, "seek": 32754, "start": 346.14000000000004, "end": 352.70000000000005, "text": " efficiently so that it will be compatible with all of our, the entire project.", "tokens": [51294, 19621, 370, 300, 309, 486, 312, 18218, 365, 439, 295, 527, 11, 264, 2302, 1716, 13, 51622], "temperature": 0.0, "avg_logprob": -0.19698752479991694, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.007338991854339838}, {"id": 60, "seek": 32754, "start": 352.70000000000005, "end": 355.18, "text": " The focus on correctness.", "tokens": [51622, 440, 1879, 322, 3006, 1287, 13, 51746], "temperature": 0.0, "avg_logprob": -0.19698752479991694, "compression_ratio": 1.628440366972477, "no_speech_prob": 0.007338991854339838}, {"id": 61, "seek": 35518, "start": 355.22, "end": 361.22, "text": " So the data which is present in the source and the back ends, the following back ends", "tokens": [50366, 407, 264, 1412, 597, 307, 1974, 294, 264, 4009, 293, 264, 646, 5314, 11, 264, 3480, 646, 5314, 50666], "temperature": 0.0, "avg_logprob": -0.15213921131231847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.002744109369814396}, {"id": 62, "seek": 35518, "start": 361.22, "end": 368.22, "text": " we ensure that the data is correct and in sync with all the storage back ends.", "tokens": [50666, 321, 5586, 300, 264, 1412, 307, 3006, 293, 294, 20271, 365, 439, 264, 6725, 646, 5314, 13, 51016], "temperature": 0.0, "avg_logprob": -0.15213921131231847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.002744109369814396}, {"id": 63, "seek": 35518, "start": 368.22, "end": 374.14, "text": " And then migrating big bucket under the load without downtime or with reduced downtime.", "tokens": [51016, 400, 550, 6186, 8754, 955, 13058, 833, 264, 3677, 1553, 49648, 420, 365, 9212, 49648, 13, 51312], "temperature": 0.0, "avg_logprob": -0.15213921131231847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.002744109369814396}, {"id": 64, "seek": 35518, "start": 374.14, "end": 379.58, "text": " So there are two things here, there can be multiple buckets with small amounts of data", "tokens": [51312, 407, 456, 366, 732, 721, 510, 11, 456, 393, 312, 3866, 32191, 365, 1359, 11663, 295, 1412, 51584], "temperature": 0.0, "avg_logprob": -0.15213921131231847, "compression_ratio": 1.7384615384615385, "no_speech_prob": 0.002744109369814396}, {"id": 65, "seek": 37958, "start": 379.58, "end": 385.09999999999997, "text": " and those buckets are easy to be copied because it just takes couple of minutes.", "tokens": [50364, 293, 729, 32191, 366, 1858, 281, 312, 25365, 570, 309, 445, 2516, 1916, 295, 2077, 13, 50640], "temperature": 0.0, "avg_logprob": -0.13176532352671905, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.004392196424305439}, {"id": 66, "seek": 37958, "start": 385.09999999999997, "end": 392.7, "text": " But there is a scenario where a bucket, one bucket has huge amount of data and lot of", "tokens": [50640, 583, 456, 307, 257, 9005, 689, 257, 13058, 11, 472, 13058, 575, 2603, 2372, 295, 1412, 293, 688, 295, 51020], "temperature": 0.0, "avg_logprob": -0.13176532352671905, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.004392196424305439}, {"id": 67, "seek": 37958, "start": 392.7, "end": 398.41999999999996, "text": " clients might be writing to one bucket and that bucket has to be migrated.", "tokens": [51020, 6982, 1062, 312, 3579, 281, 472, 13058, 293, 300, 13058, 575, 281, 312, 48329, 13, 51306], "temperature": 0.0, "avg_logprob": -0.13176532352671905, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.004392196424305439}, {"id": 68, "seek": 37958, "start": 398.41999999999996, "end": 402.53999999999996, "text": " So that is a bit of concern.", "tokens": [51306, 407, 300, 307, 257, 857, 295, 3136, 13, 51512], "temperature": 0.0, "avg_logprob": -0.13176532352671905, "compression_ratio": 1.6167664670658684, "no_speech_prob": 0.004392196424305439}, {"id": 69, "seek": 40254, "start": 402.54, "end": 412.58000000000004, "text": " So overview of chorus is there is one main storage and remaining can be configured as", "tokens": [50364, 407, 12492, 295, 22632, 307, 456, 307, 472, 2135, 6725, 293, 8877, 393, 312, 30538, 382, 50866], "temperature": 0.0, "avg_logprob": -0.19862639904022217, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0041318656876683235}, {"id": 70, "seek": 40254, "start": 412.58000000000004, "end": 415.5, "text": " the follower back ends.", "tokens": [50866, 264, 35413, 646, 5314, 13, 51012], "temperature": 0.0, "avg_logprob": -0.19862639904022217, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0041318656876683235}, {"id": 71, "seek": 40254, "start": 415.5, "end": 420.94, "text": " And the users start by inputting the storage credentials in the configuration.", "tokens": [51012, 400, 264, 5022, 722, 538, 4846, 783, 264, 6725, 27404, 294, 264, 11694, 13, 51284], "temperature": 0.0, "avg_logprob": -0.19862639904022217, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0041318656876683235}, {"id": 72, "seek": 40254, "start": 420.94, "end": 430.22, "text": " And once the configuration is started and configured the chorus S3 API can be used instead of the", "tokens": [51284, 400, 1564, 264, 11694, 307, 1409, 293, 30538, 264, 22632, 318, 18, 9362, 393, 312, 1143, 2602, 295, 264, 51748], "temperature": 0.0, "avg_logprob": -0.19862639904022217, "compression_ratio": 1.6436781609195403, "no_speech_prob": 0.0041318656876683235}, {"id": 73, "seek": 43022, "start": 430.22, "end": 431.94000000000005, "text": " storage backend API.", "tokens": [50364, 6725, 38087, 9362, 13, 50450], "temperature": 0.0, "avg_logprob": -0.23115299058997113, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.007932214997708797}, {"id": 74, "seek": 43022, "start": 431.94000000000005, "end": 438.38000000000005, "text": " Like if you are using AWS, if you are using Google, Minio, every backend has its own API.", "tokens": [50450, 1743, 498, 291, 366, 1228, 17650, 11, 498, 291, 366, 1228, 3329, 11, 2829, 1004, 11, 633, 38087, 575, 1080, 1065, 9362, 13, 50772], "temperature": 0.0, "avg_logprob": -0.23115299058997113, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.007932214997708797}, {"id": 75, "seek": 43022, "start": 438.38000000000005, "end": 443.3, "text": " Instead of using that you can use one backend, one chorus API to communicate with multiple", "tokens": [50772, 7156, 295, 1228, 300, 291, 393, 764, 472, 38087, 11, 472, 22632, 9362, 281, 7890, 365, 3866, 51018], "temperature": 0.0, "avg_logprob": -0.23115299058997113, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.007932214997708797}, {"id": 76, "seek": 43022, "start": 443.3, "end": 446.82000000000005, "text": " back ends because they are all S3 based.", "tokens": [51018, 646, 5314, 570, 436, 366, 439, 318, 18, 2361, 13, 51194], "temperature": 0.0, "avg_logprob": -0.23115299058997113, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.007932214997708797}, {"id": 77, "seek": 43022, "start": 446.82000000000005, "end": 455.38000000000005, "text": " And chorus proxies request to the main storage and then eventually the storage is copied to", "tokens": [51194, 400, 22632, 447, 87, 530, 5308, 281, 264, 2135, 6725, 293, 550, 4728, 264, 6725, 307, 25365, 281, 51622], "temperature": 0.0, "avg_logprob": -0.23115299058997113, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.007932214997708797}, {"id": 78, "seek": 43022, "start": 455.38000000000005, "end": 458.78000000000003, "text": " the followers in the backend.", "tokens": [51622, 264, 13071, 294, 264, 38087, 13, 51792], "temperature": 0.0, "avg_logprob": -0.23115299058997113, "compression_ratio": 1.6396396396396395, "no_speech_prob": 0.007932214997708797}, {"id": 79, "seek": 45878, "start": 458.78, "end": 461.09999999999997, "text": " All the existing data is replicated.", "tokens": [50364, 1057, 264, 6741, 1412, 307, 46365, 13, 50480], "temperature": 0.0, "avg_logprob": -0.18162594845420435, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.05707478150725365}, {"id": 80, "seek": 45878, "start": 461.09999999999997, "end": 468.17999999999995, "text": " For example when we introduce chorus into our ecosystem we might already have clusters", "tokens": [50480, 1171, 1365, 562, 321, 5366, 22632, 666, 527, 11311, 321, 1062, 1217, 362, 23313, 50834], "temperature": 0.0, "avg_logprob": -0.18162594845420435, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.05707478150725365}, {"id": 81, "seek": 45878, "start": 468.17999999999995, "end": 472.46, "text": " with certain amount of data which has to be copied to different back ends that we configure", "tokens": [50834, 365, 1629, 2372, 295, 1412, 597, 575, 281, 312, 25365, 281, 819, 646, 5314, 300, 321, 22162, 51048], "temperature": 0.0, "avg_logprob": -0.18162594845420435, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.05707478150725365}, {"id": 82, "seek": 45878, "start": 472.46, "end": 473.46, "text": " later.", "tokens": [51048, 1780, 13, 51098], "temperature": 0.0, "avg_logprob": -0.18162594845420435, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.05707478150725365}, {"id": 83, "seek": 45878, "start": 473.46, "end": 478.38, "text": " So the existing data can be configured in the background using this tool.", "tokens": [51098, 407, 264, 6741, 1412, 393, 312, 30538, 294, 264, 3678, 1228, 341, 2290, 13, 51344], "temperature": 0.0, "avg_logprob": -0.18162594845420435, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.05707478150725365}, {"id": 84, "seek": 45878, "start": 478.38, "end": 483.14, "text": " The data replication can be configured, paused, resumed, there are different life cycles for", "tokens": [51344, 440, 1412, 39911, 393, 312, 30538, 11, 46860, 11, 725, 28189, 11, 456, 366, 819, 993, 17796, 337, 51582], "temperature": 0.0, "avg_logprob": -0.18162594845420435, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.05707478150725365}, {"id": 85, "seek": 45878, "start": 483.14, "end": 485.82, "text": " that particular request, the status.", "tokens": [51582, 300, 1729, 5308, 11, 264, 6558, 13, 51716], "temperature": 0.0, "avg_logprob": -0.18162594845420435, "compression_ratio": 1.7108433734939759, "no_speech_prob": 0.05707478150725365}, {"id": 86, "seek": 48582, "start": 485.82, "end": 492.78, "text": " You can just stop, start, resume at any time you want and the management can be done using", "tokens": [50364, 509, 393, 445, 1590, 11, 722, 11, 15358, 412, 604, 565, 291, 528, 293, 264, 4592, 393, 312, 1096, 1228, 50712], "temperature": 0.0, "avg_logprob": -0.11959183577335242, "compression_ratio": 1.4942528735632183, "no_speech_prob": 0.02670856937766075}, {"id": 87, "seek": 48582, "start": 492.78, "end": 498.7, "text": " a web UI or a CLI.", "tokens": [50712, 257, 3670, 15682, 420, 257, 12855, 40, 13, 51008], "temperature": 0.0, "avg_logprob": -0.11959183577335242, "compression_ratio": 1.4942528735632183, "no_speech_prob": 0.02670856937766075}, {"id": 88, "seek": 48582, "start": 498.7, "end": 504.7, "text": " So the features of chorus include routing and replication per bucket.", "tokens": [51008, 407, 264, 4122, 295, 22632, 4090, 32722, 293, 39911, 680, 13058, 13, 51308], "temperature": 0.0, "avg_logprob": -0.11959183577335242, "compression_ratio": 1.4942528735632183, "no_speech_prob": 0.02670856937766075}, {"id": 89, "seek": 48582, "start": 504.7, "end": 512.5, "text": " You can configure where to route or the request and where to replicate a bucket.", "tokens": [51308, 509, 393, 22162, 689, 281, 7955, 420, 264, 5308, 293, 689, 281, 25356, 257, 13058, 13, 51698], "temperature": 0.0, "avg_logprob": -0.11959183577335242, "compression_ratio": 1.4942528735632183, "no_speech_prob": 0.02670856937766075}, {"id": 90, "seek": 51250, "start": 512.5, "end": 517.82, "text": " And then again the same using you can pause and resume anytime.", "tokens": [50364, 400, 550, 797, 264, 912, 1228, 291, 393, 10465, 293, 15358, 13038, 13, 50630], "temperature": 0.0, "avg_logprob": -0.19677066802978516, "compression_ratio": 1.653061224489796, "no_speech_prob": 0.17696282267570496}, {"id": 91, "seek": 51250, "start": 517.82, "end": 521.58, "text": " And then synchronize object or metadata.", "tokens": [50630, 400, 550, 19331, 1125, 2657, 420, 26603, 13, 50818], "temperature": 0.0, "avg_logprob": -0.19677066802978516, "compression_ratio": 1.653061224489796, "no_speech_prob": 0.17696282267570496}, {"id": 92, "seek": 51250, "start": 521.58, "end": 528.62, "text": " So just not the storage, you can also copy the ACLs, bucket policies, tags and everything", "tokens": [50818, 407, 445, 406, 264, 6725, 11, 291, 393, 611, 5055, 264, 43873, 82, 11, 13058, 7657, 11, 18632, 293, 1203, 51170], "temperature": 0.0, "avg_logprob": -0.19677066802978516, "compression_ratio": 1.653061224489796, "no_speech_prob": 0.17696282267570496}, {"id": 93, "seek": 51250, "start": 528.62, "end": 530.82, "text": " using the same tool.", "tokens": [51170, 1228, 264, 912, 2290, 13, 51280], "temperature": 0.0, "avg_logprob": -0.19677066802978516, "compression_ratio": 1.653061224489796, "no_speech_prob": 0.17696282267570496}, {"id": 94, "seek": 51250, "start": 530.82, "end": 537.38, "text": " And then as I spoke earlier migrate existing data in the background, track replication lag.", "tokens": [51280, 400, 550, 382, 286, 7179, 3071, 31821, 6741, 1412, 294, 264, 3678, 11, 2837, 39911, 8953, 13, 51608], "temperature": 0.0, "avg_logprob": -0.19677066802978516, "compression_ratio": 1.653061224489796, "no_speech_prob": 0.17696282267570496}, {"id": 95, "seek": 51250, "start": 537.38, "end": 542.46, "text": " So as of today we might have one set of configuration and the data must be copying to the source.", "tokens": [51608, 407, 382, 295, 965, 321, 1062, 362, 472, 992, 295, 11694, 293, 264, 1412, 1633, 312, 27976, 281, 264, 4009, 13, 51862], "temperature": 0.0, "avg_logprob": -0.19677066802978516, "compression_ratio": 1.653061224489796, "no_speech_prob": 0.17696282267570496}, {"id": 96, "seek": 54246, "start": 542.46, "end": 548.4200000000001, "text": " To the back end, to the follower back ends, we can always track the replication and we", "tokens": [50364, 1407, 264, 646, 917, 11, 281, 264, 35413, 646, 5314, 11, 321, 393, 1009, 2837, 264, 39911, 293, 321, 50662], "temperature": 0.0, "avg_logprob": -0.21356821995155484, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.0163862481713295}, {"id": 97, "seek": 54246, "start": 548.4200000000001, "end": 551.02, "text": " can improve with the configuration options.", "tokens": [50662, 393, 3470, 365, 264, 11694, 3956, 13, 50792], "temperature": 0.0, "avg_logprob": -0.21356821995155484, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.0163862481713295}, {"id": 98, "seek": 54246, "start": 551.02, "end": 556.3000000000001, "text": " We can start to rate limit, we can increase the number of workers.", "tokens": [50792, 492, 393, 722, 281, 3314, 4948, 11, 321, 393, 3488, 264, 1230, 295, 5600, 13, 51056], "temperature": 0.0, "avg_logprob": -0.21356821995155484, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.0163862481713295}, {"id": 99, "seek": 54246, "start": 556.3000000000001, "end": 558.22, "text": " So we can do that.", "tokens": [51056, 407, 321, 393, 360, 300, 13, 51152], "temperature": 0.0, "avg_logprob": -0.21356821995155484, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.0163862481713295}, {"id": 100, "seek": 54246, "start": 558.22, "end": 561.0600000000001, "text": " And chorus exposes Prometheus metrics.", "tokens": [51152, 400, 22632, 1278, 4201, 2114, 649, 42209, 16367, 13, 51294], "temperature": 0.0, "avg_logprob": -0.21356821995155484, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.0163862481713295}, {"id": 101, "seek": 54246, "start": 561.0600000000001, "end": 567.6600000000001, "text": " So we have the entire logging thing and the metrics are sent to Prometheus and the logs", "tokens": [51294, 407, 321, 362, 264, 2302, 27991, 551, 293, 264, 16367, 366, 2279, 281, 2114, 649, 42209, 293, 264, 20820, 51624], "temperature": 0.0, "avg_logprob": -0.21356821995155484, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.0163862481713295}, {"id": 102, "seek": 54246, "start": 567.6600000000001, "end": 569.34, "text": " are in JSON format.", "tokens": [51624, 366, 294, 31828, 7877, 13, 51708], "temperature": 0.0, "avg_logprob": -0.21356821995155484, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.0163862481713295}, {"id": 103, "seek": 54246, "start": 569.34, "end": 570.94, "text": " Easy to read.", "tokens": [51708, 16002, 281, 1401, 13, 51788], "temperature": 0.0, "avg_logprob": -0.21356821995155484, "compression_ratio": 1.6905829596412556, "no_speech_prob": 0.0163862481713295}, {"id": 104, "seek": 57094, "start": 570.94, "end": 574.0200000000001, "text": " Proxy and Grafana form the monitoring stack.", "tokens": [50364, 1705, 12876, 293, 8985, 69, 2095, 1254, 264, 11028, 8630, 13, 50518], "temperature": 0.0, "avg_logprob": -0.17372582269751508, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.06262747198343277}, {"id": 105, "seek": 57094, "start": 574.0200000000001, "end": 579.3800000000001, "text": " You can visualize the data of how the bucket is being replicated and at what stage it is", "tokens": [50518, 509, 393, 23273, 264, 1412, 295, 577, 264, 13058, 307, 885, 46365, 293, 412, 437, 3233, 309, 307, 50786], "temperature": 0.0, "avg_logprob": -0.17372582269751508, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.06262747198343277}, {"id": 106, "seek": 57094, "start": 579.3800000000001, "end": 583.58, "text": " using the visualization stack.", "tokens": [50786, 1228, 264, 25801, 8630, 13, 50996], "temperature": 0.0, "avg_logprob": -0.17372582269751508, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.06262747198343277}, {"id": 107, "seek": 57094, "start": 583.58, "end": 588.7800000000001, "text": " Let me briefly talk about the architecture of this entire chorus.", "tokens": [50996, 961, 385, 10515, 751, 466, 264, 9482, 295, 341, 2302, 22632, 13, 51256], "temperature": 0.0, "avg_logprob": -0.17372582269751508, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.06262747198343277}, {"id": 108, "seek": 57094, "start": 588.7800000000001, "end": 591.6600000000001, "text": " Chorus is structured around two main web services.", "tokens": [51256, 761, 26867, 307, 18519, 926, 732, 2135, 3670, 3328, 13, 51400], "temperature": 0.0, "avg_logprob": -0.17372582269751508, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.06262747198343277}, {"id": 109, "seek": 57094, "start": 591.6600000000001, "end": 594.98, "text": " One is the proxy and the other is the worker.", "tokens": [51400, 1485, 307, 264, 29690, 293, 264, 661, 307, 264, 11346, 13, 51566], "temperature": 0.0, "avg_logprob": -0.17372582269751508, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.06262747198343277}, {"id": 110, "seek": 57094, "start": 594.98, "end": 597.62, "text": " So initially the request comes to the proxy.", "tokens": [51566, 407, 9105, 264, 5308, 1487, 281, 264, 29690, 13, 51698], "temperature": 0.0, "avg_logprob": -0.17372582269751508, "compression_ratio": 1.631578947368421, "no_speech_prob": 0.06262747198343277}, {"id": 111, "seek": 59762, "start": 597.7, "end": 602.66, "text": " We are talking about a flow where the routing policy is there.", "tokens": [50368, 492, 366, 1417, 466, 257, 3095, 689, 264, 32722, 3897, 307, 456, 13, 50616], "temperature": 0.0, "avg_logprob": -0.13832091248553732, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.03721712902188301}, {"id": 112, "seek": 59762, "start": 602.66, "end": 607.38, "text": " So initially the request comes to the proxy and based on the routing policy, if the bucket", "tokens": [50616, 407, 9105, 264, 5308, 1487, 281, 264, 29690, 293, 2361, 322, 264, 32722, 3897, 11, 498, 264, 13058, 50852], "temperature": 0.0, "avg_logprob": -0.13832091248553732, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.03721712902188301}, {"id": 113, "seek": 59762, "start": 607.38, "end": 612.58, "text": " has to go to the main storage, which is configured to be Minayo here.", "tokens": [50852, 575, 281, 352, 281, 264, 2135, 6725, 11, 597, 307, 30538, 281, 312, 2829, 48947, 510, 13, 51112], "temperature": 0.0, "avg_logprob": -0.13832091248553732, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.03721712902188301}, {"id": 114, "seek": 59762, "start": 612.58, "end": 618.9, "text": " So the request comes to the main storage and the request goes back to the proxy and then", "tokens": [51112, 407, 264, 5308, 1487, 281, 264, 2135, 6725, 293, 264, 5308, 1709, 646, 281, 264, 29690, 293, 550, 51428], "temperature": 0.0, "avg_logprob": -0.13832091248553732, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.03721712902188301}, {"id": 115, "seek": 59762, "start": 618.9, "end": 620.18, "text": " eventually to the user.", "tokens": [51428, 4728, 281, 264, 4195, 13, 51492], "temperature": 0.0, "avg_logprob": -0.13832091248553732, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.03721712902188301}, {"id": 116, "seek": 59762, "start": 620.18, "end": 622.42, "text": " That is one of the flows.", "tokens": [51492, 663, 307, 472, 295, 264, 12867, 13, 51604], "temperature": 0.0, "avg_logprob": -0.13832091248553732, "compression_ratio": 1.8756476683937824, "no_speech_prob": 0.03721712902188301}, {"id": 117, "seek": 62242, "start": 622.42, "end": 628.6999999999999, "text": " The second flow is where the replication scenario is established.", "tokens": [50364, 440, 1150, 3095, 307, 689, 264, 39911, 9005, 307, 7545, 13, 50678], "temperature": 0.0, "avg_logprob": -0.18037322804897646, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.003357400419190526}, {"id": 118, "seek": 62242, "start": 628.6999999999999, "end": 635.78, "text": " Again the request comes to the proxy and then there is an event or task created in Redis", "tokens": [50678, 3764, 264, 5308, 1487, 281, 264, 29690, 293, 550, 456, 307, 364, 2280, 420, 5633, 2942, 294, 4477, 271, 51032], "temperature": 0.0, "avg_logprob": -0.18037322804897646, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.003357400419190526}, {"id": 119, "seek": 62242, "start": 635.78, "end": 638.54, "text": " based on the replication policy.", "tokens": [51032, 2361, 322, 264, 39911, 3897, 13, 51170], "temperature": 0.0, "avg_logprob": -0.18037322804897646, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.003357400419190526}, {"id": 120, "seek": 62242, "start": 638.54, "end": 645.26, "text": " Like it knows what is the main storage and which storage should the replication be done", "tokens": [51170, 1743, 309, 3255, 437, 307, 264, 2135, 6725, 293, 597, 6725, 820, 264, 39911, 312, 1096, 51506], "temperature": 0.0, "avg_logprob": -0.18037322804897646, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.003357400419190526}, {"id": 121, "seek": 62242, "start": 645.26, "end": 646.26, "text": " to.", "tokens": [51506, 281, 13, 51556], "temperature": 0.0, "avg_logprob": -0.18037322804897646, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.003357400419190526}, {"id": 122, "seek": 62242, "start": 646.26, "end": 649.02, "text": " In this case it is Ceph for example.", "tokens": [51556, 682, 341, 1389, 309, 307, 383, 595, 71, 337, 1365, 13, 51694], "temperature": 0.0, "avg_logprob": -0.18037322804897646, "compression_ratio": 1.6122448979591837, "no_speech_prob": 0.003357400419190526}, {"id": 123, "seek": 64902, "start": 649.02, "end": 655.5799999999999, "text": " And then the chorus worker reads the requests or tasks from the cache and then that routes", "tokens": [50364, 400, 550, 264, 22632, 11346, 15700, 264, 12475, 420, 9608, 490, 264, 19459, 293, 550, 300, 18242, 50692], "temperature": 0.0, "avg_logprob": -0.14264239205254448, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.006887650117278099}, {"id": 124, "seek": 64902, "start": 655.5799999999999, "end": 662.18, "text": " the request to the, reads from the main storage and replicates to the back end.", "tokens": [50692, 264, 5308, 281, 264, 11, 15700, 490, 264, 2135, 6725, 293, 3248, 299, 1024, 281, 264, 646, 917, 13, 51022], "temperature": 0.0, "avg_logprob": -0.14264239205254448, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.006887650117278099}, {"id": 125, "seek": 64902, "start": 662.18, "end": 667.02, "text": " The chorus worker is accessible using WebBY and CLI.", "tokens": [51022, 440, 22632, 11346, 307, 9515, 1228, 9573, 16688, 293, 12855, 40, 13, 51264], "temperature": 0.0, "avg_logprob": -0.14264239205254448, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.006887650117278099}, {"id": 126, "seek": 64902, "start": 667.02, "end": 675.78, "text": " So this is an overview of the entire flow based on different scenarios.", "tokens": [51264, 407, 341, 307, 364, 12492, 295, 264, 2302, 3095, 2361, 322, 819, 15077, 13, 51702], "temperature": 0.0, "avg_logprob": -0.14264239205254448, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.006887650117278099}, {"id": 127, "seek": 67578, "start": 675.78, "end": 682.62, "text": " So chorus also has an initial migration feature like as I told the replication can happen", "tokens": [50364, 407, 22632, 611, 575, 364, 5883, 17011, 4111, 411, 382, 286, 1907, 264, 39911, 393, 1051, 50706], "temperature": 0.0, "avg_logprob": -0.1307575320020134, "compression_ratio": 1.8712871287128714, "no_speech_prob": 0.05812141299247742}, {"id": 128, "seek": 67578, "start": 682.62, "end": 684.26, "text": " in the background.", "tokens": [50706, 294, 264, 3678, 13, 50788], "temperature": 0.0, "avg_logprob": -0.1307575320020134, "compression_ratio": 1.8712871287128714, "no_speech_prob": 0.05812141299247742}, {"id": 129, "seek": 67578, "start": 684.26, "end": 689.9399999999999, "text": " So initially when the replication is happening in the background, all the buckets are listed", "tokens": [50788, 407, 9105, 562, 264, 39911, 307, 2737, 294, 264, 3678, 11, 439, 264, 32191, 366, 10052, 51072], "temperature": 0.0, "avg_logprob": -0.1307575320020134, "compression_ratio": 1.8712871287128714, "no_speech_prob": 0.05812141299247742}, {"id": 130, "seek": 67578, "start": 689.9399999999999, "end": 696.74, "text": " from the main storage and then the objects within particular bucket are listed and then", "tokens": [51072, 490, 264, 2135, 6725, 293, 550, 264, 6565, 1951, 1729, 13058, 366, 10052, 293, 550, 51412], "temperature": 0.0, "avg_logprob": -0.1307575320020134, "compression_ratio": 1.8712871287128714, "no_speech_prob": 0.05812141299247742}, {"id": 131, "seek": 67578, "start": 696.74, "end": 702.78, "text": " the number of tasks based on the objects are created and it is ensured that every object", "tokens": [51412, 264, 1230, 295, 9608, 2361, 322, 264, 6565, 366, 2942, 293, 309, 307, 3489, 3831, 300, 633, 2657, 51714], "temperature": 0.0, "avg_logprob": -0.1307575320020134, "compression_ratio": 1.8712871287128714, "no_speech_prob": 0.05812141299247742}, {"id": 132, "seek": 70278, "start": 702.78, "end": 710.3399999999999, "text": " is copied to the follower back end using a particular task.", "tokens": [50364, 307, 25365, 281, 264, 35413, 646, 917, 1228, 257, 1729, 5633, 13, 50742], "temperature": 0.0, "avg_logprob": -0.1487048257072017, "compression_ratio": 1.5578231292517006, "no_speech_prob": 0.012990286573767662}, {"id": 133, "seek": 70278, "start": 710.3399999999999, "end": 718.42, "text": " So the worker processes tasks in the background copying the data to the follower back ends.", "tokens": [50742, 407, 264, 11346, 7555, 9608, 294, 264, 3678, 27976, 264, 1412, 281, 264, 35413, 646, 5314, 13, 51146], "temperature": 0.0, "avg_logprob": -0.1487048257072017, "compression_ratio": 1.5578231292517006, "no_speech_prob": 0.012990286573767662}, {"id": 134, "seek": 70278, "start": 718.42, "end": 726.98, "text": " Here these are the main components of chorus proxy worker admin UI and Redis.", "tokens": [51146, 1692, 613, 366, 264, 2135, 6677, 295, 22632, 29690, 11346, 24236, 15682, 293, 4477, 271, 13, 51574], "temperature": 0.0, "avg_logprob": -0.1487048257072017, "compression_ratio": 1.5578231292517006, "no_speech_prob": 0.012990286573767662}, {"id": 135, "seek": 72698, "start": 726.98, "end": 734.78, "text": " So proxy and worker are written in Golang and admin is written in view or the entire", "tokens": [50364, 407, 29690, 293, 11346, 366, 3720, 294, 36319, 656, 293, 24236, 307, 3720, 294, 1910, 420, 264, 2302, 50754], "temperature": 0.0, "avg_logprob": -0.15130317211151123, "compression_ratio": 1.5645933014354068, "no_speech_prob": 0.006548376753926277}, {"id": 136, "seek": 72698, "start": 734.78, "end": 742.86, "text": " deployment is done in a containerized fashion on Kubernetes pods.", "tokens": [50754, 19317, 307, 1096, 294, 257, 10129, 1602, 6700, 322, 23145, 31925, 13, 51158], "temperature": 0.0, "avg_logprob": -0.15130317211151123, "compression_ratio": 1.5645933014354068, "no_speech_prob": 0.006548376753926277}, {"id": 137, "seek": 72698, "start": 742.86, "end": 749.1800000000001, "text": " Let us talk something about the resource requirements for different components in chorus.", "tokens": [51158, 961, 505, 751, 746, 466, 264, 7684, 7728, 337, 819, 6677, 294, 22632, 13, 51474], "temperature": 0.0, "avg_logprob": -0.15130317211151123, "compression_ratio": 1.5645933014354068, "no_speech_prob": 0.006548376753926277}, {"id": 138, "seek": 72698, "start": 749.1800000000001, "end": 756.26, "text": " For Redis the scaling is done using Redis cluster and the persistence is ensured using", "tokens": [51474, 1171, 4477, 271, 264, 21589, 307, 1096, 1228, 4477, 271, 13630, 293, 264, 37617, 307, 3489, 3831, 1228, 51828], "temperature": 0.0, "avg_logprob": -0.15130317211151123, "compression_ratio": 1.5645933014354068, "no_speech_prob": 0.006548376753926277}, {"id": 139, "seek": 75626, "start": 757.26, "end": 766.66, "text": " Redis AOF and Redis database and fault tolerance in case of Redis data loss we can always restart", "tokens": [50414, 4477, 271, 40684, 37, 293, 4477, 271, 8149, 293, 7441, 23368, 294, 1389, 295, 4477, 271, 1412, 4470, 321, 393, 1009, 21022, 50884], "temperature": 0.0, "avg_logprob": -0.23789323386499436, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.1227288693189621}, {"id": 140, "seek": 75626, "start": 766.66, "end": 772.86, "text": " the bucket replication because the state is maintained and memory consumption if there", "tokens": [50884, 264, 13058, 39911, 570, 264, 1785, 307, 17578, 293, 4675, 12126, 498, 456, 51194], "temperature": 0.0, "avg_logprob": -0.23789323386499436, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.1227288693189621}, {"id": 141, "seek": 75626, "start": 772.86, "end": 779.7, "text": " are around 1 million objects that are to be migrated then it can approximately take 1", "tokens": [51194, 366, 926, 502, 2459, 6565, 300, 366, 281, 312, 48329, 550, 309, 393, 10447, 747, 502, 51536], "temperature": 0.0, "avg_logprob": -0.23789323386499436, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.1227288693189621}, {"id": 142, "seek": 77970, "start": 780.1400000000001, "end": 787.0600000000001, "text": " million tasks in the queue then approximately 700 MB.", "tokens": [50386, 2459, 9608, 294, 264, 18639, 550, 10447, 15204, 28866, 13, 50732], "temperature": 0.0, "avg_logprob": -0.2412557601928711, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.19271354377269745}, {"id": 143, "seek": 77970, "start": 787.0600000000001, "end": 792.7800000000001, "text": " This is all based on our benchmarking it can change with different scenarios and Redis", "tokens": [50732, 639, 307, 439, 2361, 322, 527, 18927, 278, 309, 393, 1319, 365, 819, 15077, 293, 4477, 271, 51018], "temperature": 0.0, "avg_logprob": -0.2412557601928711, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.19271354377269745}, {"id": 144, "seek": 77970, "start": 792.7800000000001, "end": 801.86, "text": " is assumed to take less CPU and it can be between 100 and 1000 requests per second.", "tokens": [51018, 307, 15895, 281, 747, 1570, 13199, 293, 309, 393, 312, 1296, 2319, 293, 9714, 12475, 680, 1150, 13, 51472], "temperature": 0.0, "avg_logprob": -0.2412557601928711, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.19271354377269745}, {"id": 145, "seek": 77970, "start": 801.86, "end": 808.58, "text": " So coming to the proxy it is stateless, it consumes less memory and less CPU but high", "tokens": [51472, 407, 1348, 281, 264, 29690, 309, 307, 2219, 4272, 11, 309, 48823, 1570, 4675, 293, 1570, 13199, 457, 1090, 51808], "temperature": 0.0, "avg_logprob": -0.2412557601928711, "compression_ratio": 1.4832535885167464, "no_speech_prob": 0.19271354377269745}, {"id": 146, "seek": 80858, "start": 808.58, "end": 816.6600000000001, "text": " network because proxy is the kind of brain it takes in the requests and it routes the", "tokens": [50364, 3209, 570, 29690, 307, 264, 733, 295, 3567, 309, 2516, 294, 264, 12475, 293, 309, 18242, 264, 50768], "temperature": 0.0, "avg_logprob": -0.1724770461456685, "compression_ratio": 1.7969543147208122, "no_speech_prob": 0.013379053212702274}, {"id": 147, "seek": 80858, "start": 816.6600000000001, "end": 823.98, "text": " request accordingly based on replication or the actual routing hence it also needs high", "tokens": [50768, 5308, 19717, 2361, 322, 39911, 420, 264, 3539, 32722, 16678, 309, 611, 2203, 1090, 51134], "temperature": 0.0, "avg_logprob": -0.1724770461456685, "compression_ratio": 1.7969543147208122, "no_speech_prob": 0.013379053212702274}, {"id": 148, "seek": 80858, "start": 823.98, "end": 824.98, "text": " network.", "tokens": [51134, 3209, 13, 51184], "temperature": 0.0, "avg_logprob": -0.1724770461456685, "compression_ratio": 1.7969543147208122, "no_speech_prob": 0.013379053212702274}, {"id": 149, "seek": 80858, "start": 824.98, "end": 830.5, "text": " Coming to the worker it is again stateless it takes in high memory and high network", "tokens": [51184, 12473, 281, 264, 11346, 309, 307, 797, 2219, 4272, 309, 2516, 294, 1090, 4675, 293, 1090, 3209, 51460], "temperature": 0.0, "avg_logprob": -0.1724770461456685, "compression_ratio": 1.7969543147208122, "no_speech_prob": 0.013379053212702274}, {"id": 150, "seek": 80858, "start": 830.5, "end": 836.7800000000001, "text": " but less CPU because worker is the one that routes the reads request from the cache and", "tokens": [51460, 457, 1570, 13199, 570, 11346, 307, 264, 472, 300, 18242, 264, 15700, 5308, 490, 264, 19459, 293, 51774], "temperature": 0.0, "avg_logprob": -0.1724770461456685, "compression_ratio": 1.7969543147208122, "no_speech_prob": 0.013379053212702274}, {"id": 151, "seek": 83678, "start": 836.8199999999999, "end": 841.5, "text": " routes request to the back ends based on the replication policy.", "tokens": [50366, 18242, 5308, 281, 264, 646, 5314, 2361, 322, 264, 39911, 3897, 13, 50600], "temperature": 0.0, "avg_logprob": -0.1467991777368494, "compression_ratio": 1.6732673267326732, "no_speech_prob": 0.011317341588437557}, {"id": 152, "seek": 83678, "start": 841.5, "end": 848.1, "text": " So worker instance network and memory consumption can be rate limited in the configuration like", "tokens": [50600, 407, 11346, 5197, 3209, 293, 4675, 12126, 393, 312, 3314, 5567, 294, 264, 11694, 411, 50930], "temperature": 0.0, "avg_logprob": -0.1467991777368494, "compression_ratio": 1.6732673267326732, "no_speech_prob": 0.011317341588437557}, {"id": 153, "seek": 83678, "start": 848.1, "end": 853.26, "text": " in the day when there is huge amount of request coming to our clusters we can just stop the", "tokens": [50930, 294, 264, 786, 562, 456, 307, 2603, 2372, 295, 5308, 1348, 281, 527, 23313, 321, 393, 445, 1590, 264, 51188], "temperature": 0.0, "avg_logprob": -0.1467991777368494, "compression_ratio": 1.6732673267326732, "no_speech_prob": 0.011317341588437557}, {"id": 154, "seek": 83678, "start": 853.26, "end": 861.14, "text": " migration activity for a minute like or we can rate limited to do it at a lesser rate", "tokens": [51188, 17011, 5191, 337, 257, 3456, 411, 420, 321, 393, 3314, 5567, 281, 360, 309, 412, 257, 22043, 3314, 51582], "temperature": 0.0, "avg_logprob": -0.1467991777368494, "compression_ratio": 1.6732673267326732, "no_speech_prob": 0.011317341588437557}, {"id": 155, "seek": 86114, "start": 861.14, "end": 865.62, "text": " and then eventually you can increase it when the bandwidth is high.", "tokens": [50364, 293, 550, 4728, 291, 393, 3488, 309, 562, 264, 23647, 307, 1090, 13, 50588], "temperature": 0.0, "avg_logprob": -0.18205544683668348, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0062827374786138535}, {"id": 156, "seek": 86114, "start": 865.62, "end": 875.14, "text": " So yeah so what are our next steps for chorus we want to perform more load tests in case", "tokens": [50588, 407, 1338, 370, 437, 366, 527, 958, 4439, 337, 22632, 321, 528, 281, 2042, 544, 3677, 6921, 294, 1389, 51064], "temperature": 0.0, "avg_logprob": -0.18205544683668348, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0062827374786138535}, {"id": 157, "seek": 86114, "start": 875.14, "end": 883.26, "text": " of larger buckets more data and efficient time consumption and then resource optimization", "tokens": [51064, 295, 4833, 32191, 544, 1412, 293, 7148, 565, 12126, 293, 550, 7684, 19618, 51470], "temperature": 0.0, "avg_logprob": -0.18205544683668348, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0062827374786138535}, {"id": 158, "seek": 86114, "start": 883.26, "end": 889.54, "text": " at various component level like Redis how can we make it better and workers we want", "tokens": [51470, 412, 3683, 6542, 1496, 411, 4477, 271, 577, 393, 321, 652, 309, 1101, 293, 5600, 321, 528, 51784], "temperature": 0.0, "avg_logprob": -0.18205544683668348, "compression_ratio": 1.5789473684210527, "no_speech_prob": 0.0062827374786138535}, {"id": 159, "seek": 88954, "start": 889.54, "end": 896.3399999999999, "text": " to make the logic more functional and then the API cost.", "tokens": [50364, 281, 652, 264, 9952, 544, 11745, 293, 550, 264, 9362, 2063, 13, 50704], "temperature": 0.0, "avg_logprob": -0.14333061377207437, "compression_ratio": 1.57, "no_speech_prob": 0.014696291647851467}, {"id": 160, "seek": 88954, "start": 896.3399999999999, "end": 904.42, "text": " So the routing policy alternatives since we have multiple storage packets what we want", "tokens": [50704, 407, 264, 32722, 3897, 20478, 1670, 321, 362, 3866, 6725, 30364, 437, 321, 528, 51108], "temperature": 0.0, "avg_logprob": -0.14333061377207437, "compression_ratio": 1.57, "no_speech_prob": 0.014696291647851467}, {"id": 161, "seek": 88954, "start": 904.42, "end": 911.38, "text": " to do is to route based on object size for example if there is one GB of file you can", "tokens": [51108, 281, 360, 307, 281, 7955, 2361, 322, 2657, 2744, 337, 1365, 498, 456, 307, 472, 26809, 295, 3991, 291, 393, 51456], "temperature": 0.0, "avg_logprob": -0.14333061377207437, "compression_ratio": 1.57, "no_speech_prob": 0.014696291647851467}, {"id": 162, "seek": 88954, "start": 911.38, "end": 917.26, "text": " configure it to be written to a particular storage packet and then if there is small", "tokens": [51456, 22162, 309, 281, 312, 3720, 281, 257, 1729, 6725, 20300, 293, 550, 498, 456, 307, 1359, 51750], "temperature": 0.0, "avg_logprob": -0.14333061377207437, "compression_ratio": 1.57, "no_speech_prob": 0.014696291647851467}, {"id": 163, "seek": 91726, "start": 917.3, "end": 921.98, "text": " number of files you can configure it for one back end based on the quota and lot of other", "tokens": [50366, 1230, 295, 7098, 291, 393, 22162, 309, 337, 472, 646, 917, 2361, 322, 264, 45171, 293, 688, 295, 661, 50600], "temperature": 0.0, "avg_logprob": -0.1610682839932649, "compression_ratio": 1.7768240343347639, "no_speech_prob": 0.008182688616216183}, {"id": 164, "seek": 91726, "start": 921.98, "end": 927.86, "text": " parameters and load balance read request for replicated data.", "tokens": [50600, 9834, 293, 3677, 4772, 1401, 5308, 337, 46365, 1412, 13, 50894], "temperature": 0.0, "avg_logprob": -0.1610682839932649, "compression_ratio": 1.7768240343347639, "no_speech_prob": 0.008182688616216183}, {"id": 165, "seek": 91726, "start": 927.86, "end": 932.86, "text": " Now that we have multiple storage back ends in our hand we can always make an efficient", "tokens": [50894, 823, 300, 321, 362, 3866, 6725, 646, 5314, 294, 527, 1011, 321, 393, 1009, 652, 364, 7148, 51144], "temperature": 0.0, "avg_logprob": -0.1610682839932649, "compression_ratio": 1.7768240343347639, "no_speech_prob": 0.008182688616216183}, {"id": 166, "seek": 91726, "start": 932.86, "end": 939.86, "text": " use of each back end we can load balance the requests like for example if main storage", "tokens": [51144, 764, 295, 1184, 646, 917, 321, 393, 3677, 4772, 264, 12475, 411, 337, 1365, 498, 2135, 6725, 51494], "temperature": 0.0, "avg_logprob": -0.1610682839932649, "compression_ratio": 1.7768240343347639, "no_speech_prob": 0.008182688616216183}, {"id": 167, "seek": 91726, "start": 939.86, "end": 946.14, "text": " is busy in taking writes since the storage is data is being copied to the follower back", "tokens": [51494, 307, 5856, 294, 1940, 13657, 1670, 264, 6725, 307, 1412, 307, 885, 25365, 281, 264, 35413, 646, 51808], "temperature": 0.0, "avg_logprob": -0.1610682839932649, "compression_ratio": 1.7768240343347639, "no_speech_prob": 0.008182688616216183}, {"id": 168, "seek": 94614, "start": 946.14, "end": 950.9, "text": " ends we can always route the read request to any of the back end which is idle so that", "tokens": [50364, 5314, 321, 393, 1009, 7955, 264, 1401, 5308, 281, 604, 295, 264, 646, 917, 597, 307, 30650, 370, 300, 50602], "temperature": 0.0, "avg_logprob": -0.16817968122420773, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.01822146587073803}, {"id": 169, "seek": 94614, "start": 950.9, "end": 962.6999999999999, "text": " logic and so every storage back end is providing a bucket notification and event log so we", "tokens": [50602, 9952, 293, 370, 633, 6725, 646, 917, 307, 6530, 257, 13058, 11554, 293, 2280, 3565, 370, 321, 51192], "temperature": 0.0, "avg_logprob": -0.16817968122420773, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.01822146587073803}, {"id": 170, "seek": 94614, "start": 962.6999999999999, "end": 968.26, "text": " can subscribe to those events instead of querying the proxy every time and overloading it instead", "tokens": [51192, 393, 3022, 281, 729, 3931, 2602, 295, 7083, 1840, 264, 29690, 633, 565, 293, 28777, 278, 309, 2602, 51470], "temperature": 0.0, "avg_logprob": -0.16817968122420773, "compression_ratio": 1.6566265060240963, "no_speech_prob": 0.01822146587073803}, {"id": 171, "seek": 96826, "start": 968.26, "end": 976.86, "text": " we can use proxy to really write data and migrate data so we can use that proxy instead", "tokens": [50364, 321, 393, 764, 29690, 281, 534, 2464, 1412, 293, 31821, 1412, 370, 321, 393, 764, 300, 29690, 2602, 50794], "temperature": 0.0, "avg_logprob": -0.14091799259185792, "compression_ratio": 1.7452830188679245, "no_speech_prob": 0.15184421837329865}, {"id": 172, "seek": 96826, "start": 976.86, "end": 983.26, "text": " or to keep polling for the bucket information and then there is we are planning on having", "tokens": [50794, 420, 281, 1066, 29518, 337, 264, 13058, 1589, 293, 550, 456, 307, 321, 366, 5038, 322, 1419, 51114], "temperature": 0.0, "avg_logprob": -0.14091799259185792, "compression_ratio": 1.7452830188679245, "no_speech_prob": 0.15184421837329865}, {"id": 173, "seek": 96826, "start": 983.26, "end": 990.06, "text": " a Swift API compatibility as of today we have a robust S3 API compatibility but we are planning", "tokens": [51114, 257, 25539, 9362, 34237, 382, 295, 965, 321, 362, 257, 13956, 318, 18, 9362, 34237, 457, 321, 366, 5038, 51454], "temperature": 0.0, "avg_logprob": -0.14091799259185792, "compression_ratio": 1.7452830188679245, "no_speech_prob": 0.15184421837329865}, {"id": 174, "seek": 96826, "start": 990.06, "end": 997.9, "text": " to have open stack Swift integration and then life cycle policy the API parameters for different", "tokens": [51454, 281, 362, 1269, 8630, 25539, 10980, 293, 550, 993, 6586, 3897, 264, 9362, 9834, 337, 819, 51846], "temperature": 0.0, "avg_logprob": -0.14091799259185792, "compression_ratio": 1.7452830188679245, "no_speech_prob": 0.15184421837329865}, {"id": 175, "seek": 99790, "start": 997.9, "end": 1004.66, "text": " back ends is different so we just want to have good life cycle policy it is being tested", "tokens": [50364, 646, 5314, 307, 819, 370, 321, 445, 528, 281, 362, 665, 993, 6586, 3897, 309, 307, 885, 8246, 50702], "temperature": 0.0, "avg_logprob": -0.20377083430214535, "compression_ratio": 1.6162790697674418, "no_speech_prob": 0.12701253592967987}, {"id": 176, "seek": 99790, "start": 1004.66, "end": 1010.3, "text": " and when a bucket is created with a particular life cycle policy in one storage the similar", "tokens": [50702, 293, 562, 257, 13058, 307, 2942, 365, 257, 1729, 993, 6586, 3897, 294, 472, 6725, 264, 2531, 50984], "temperature": 0.0, "avg_logprob": -0.20377083430214535, "compression_ratio": 1.6162790697674418, "no_speech_prob": 0.12701253592967987}, {"id": 177, "seek": 99790, "start": 1010.3, "end": 1017.1, "text": " should be replicated to the other back ends as well without loss of any configuration", "tokens": [50984, 820, 312, 46365, 281, 264, 661, 646, 5314, 382, 731, 1553, 4470, 295, 604, 11694, 51324], "temperature": 0.0, "avg_logprob": -0.20377083430214535, "compression_ratio": 1.6162790697674418, "no_speech_prob": 0.12701253592967987}, {"id": 178, "seek": 99790, "start": 1017.1, "end": 1022.6999999999999, "text": " for policy.", "tokens": [51324, 337, 3897, 13, 51604], "temperature": 0.0, "avg_logprob": -0.20377083430214535, "compression_ratio": 1.6162790697674418, "no_speech_prob": 0.12701253592967987}, {"id": 179, "seek": 102270, "start": 1022.7, "end": 1027.9, "text": " Use cases the further use cases that we see for chorus are active transparent proxy post", "tokens": [50364, 8278, 3331, 264, 3052, 764, 3331, 300, 321, 536, 337, 22632, 366, 4967, 12737, 29690, 2183, 50624], "temperature": 0.0, "avg_logprob": -0.17810006575150925, "compression_ratio": 1.7586206896551724, "no_speech_prob": 0.5713374018669128}, {"id": 180, "seek": 102270, "start": 1027.9, "end": 1036.66, "text": " migration to speak briefly about active proxy migration so that means if the source and", "tokens": [50624, 17011, 281, 1710, 10515, 466, 4967, 29690, 17011, 370, 300, 1355, 498, 264, 4009, 293, 51062], "temperature": 0.0, "avg_logprob": -0.17810006575150925, "compression_ratio": 1.7586206896551724, "no_speech_prob": 0.5713374018669128}, {"id": 181, "seek": 102270, "start": 1036.66, "end": 1042.5800000000002, "text": " destination are completely copied and if we want to stop using the source anymore so once", "tokens": [51062, 12236, 366, 2584, 25365, 293, 498, 321, 528, 281, 1590, 1228, 264, 4009, 3602, 370, 1564, 51358], "temperature": 0.0, "avg_logprob": -0.17810006575150925, "compression_ratio": 1.7586206896551724, "no_speech_prob": 0.5713374018669128}, {"id": 182, "seek": 102270, "start": 1042.5800000000002, "end": 1048.82, "text": " the data is moved we should be able to switch the proxy to the to another back end to make", "tokens": [51358, 264, 1412, 307, 4259, 321, 820, 312, 1075, 281, 3679, 264, 29690, 281, 264, 281, 1071, 646, 917, 281, 652, 51670], "temperature": 0.0, "avg_logprob": -0.17810006575150925, "compression_ratio": 1.7586206896551724, "no_speech_prob": 0.5713374018669128}, {"id": 183, "seek": 104882, "start": 1048.82, "end": 1055.8999999999999, "text": " it a main storage instead of configuring it in the configuration file.", "tokens": [50364, 309, 257, 2135, 6725, 2602, 295, 6662, 1345, 309, 294, 264, 11694, 3991, 13, 50718], "temperature": 0.0, "avg_logprob": -0.2053074958996895, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.37254491448402405}, {"id": 184, "seek": 104882, "start": 1055.8999999999999, "end": 1061.86, "text": " Robust backup service so if we have two to DCs two sites then we want to synchronize", "tokens": [50718, 5424, 381, 14807, 2643, 370, 498, 321, 362, 732, 281, 9114, 82, 732, 7533, 550, 321, 528, 281, 19331, 1125, 51016], "temperature": 0.0, "avg_logprob": -0.2053074958996895, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.37254491448402405}, {"id": 185, "seek": 104882, "start": 1061.86, "end": 1070.1, "text": " data between both sites in both directions so the simple setup is to synchronize data", "tokens": [51016, 1412, 1296, 1293, 7533, 294, 1293, 11095, 370, 264, 2199, 8657, 307, 281, 19331, 1125, 1412, 51428], "temperature": 0.0, "avg_logprob": -0.2053074958996895, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.37254491448402405}, {"id": 186, "seek": 104882, "start": 1070.1, "end": 1078.06, "text": " between prod and the backup site so we want to make this tool efficient enough to be robust", "tokens": [51428, 1296, 15792, 293, 264, 14807, 3621, 370, 321, 528, 281, 652, 341, 2290, 7148, 1547, 281, 312, 13956, 51826], "temperature": 0.0, "avg_logprob": -0.2053074958996895, "compression_ratio": 1.7253886010362693, "no_speech_prob": 0.37254491448402405}, {"id": 187, "seek": 107806, "start": 1078.06, "end": 1082.78, "text": " backup service like we can ensure that during disaster recovery even if the primary goes", "tokens": [50364, 14807, 2643, 411, 321, 393, 5586, 300, 1830, 11293, 8597, 754, 498, 264, 6194, 1709, 50600], "temperature": 0.0, "avg_logprob": -0.23004601218483664, "compression_ratio": 1.5888324873096447, "no_speech_prob": 0.19118057191371918}, {"id": 188, "seek": 107806, "start": 1082.78, "end": 1087.8999999999999, "text": " down we can simply do all the operations from the other back ends that are available by", "tokens": [50600, 760, 321, 393, 2935, 360, 439, 264, 7705, 490, 264, 661, 646, 5314, 300, 366, 2435, 538, 50856], "temperature": 0.0, "avg_logprob": -0.23004601218483664, "compression_ratio": 1.5888324873096447, "no_speech_prob": 0.19118057191371918}, {"id": 189, "seek": 107806, "start": 1087.8999999999999, "end": 1096.3, "text": " switching the storage back ends based on the based on how they are configured.", "tokens": [50856, 16493, 264, 6725, 646, 5314, 2361, 322, 264, 2361, 322, 577, 436, 366, 30538, 13, 51276], "temperature": 0.0, "avg_logprob": -0.23004601218483664, "compression_ratio": 1.5888324873096447, "no_speech_prob": 0.19118057191371918}, {"id": 190, "seek": 107806, "start": 1096.3, "end": 1103.34, "text": " So any questions regarding chorus and its implementation?", "tokens": [51276, 407, 604, 1651, 8595, 22632, 293, 1080, 11420, 30, 51628], "temperature": 0.0, "avg_logprob": -0.23004601218483664, "compression_ratio": 1.5888324873096447, "no_speech_prob": 0.19118057191371918}, {"id": 191, "seek": 110334, "start": 1103.34, "end": 1110.86, "text": " One question regarding versioning so if you do replication from a source to a destination", "tokens": [50364, 1485, 1168, 8595, 3037, 278, 370, 498, 291, 360, 39911, 490, 257, 4009, 281, 257, 12236, 50740], "temperature": 0.0, "avg_logprob": -0.31184032559394836, "compression_ratio": 1.748502994011976, "no_speech_prob": 0.034560125321149826}, {"id": 192, "seek": 110334, "start": 1110.86, "end": 1116.98, "text": " and the source has versioning enabled and there's a couple of versions how does this", "tokens": [50740, 293, 264, 4009, 575, 3037, 278, 15172, 293, 456, 311, 257, 1916, 295, 9606, 577, 775, 341, 51046], "temperature": 0.0, "avg_logprob": -0.31184032559394836, "compression_ratio": 1.748502994011976, "no_speech_prob": 0.034560125321149826}, {"id": 193, "seek": 110334, "start": 1116.98, "end": 1119.58, "text": " integrate into the chorus?", "tokens": [51046, 13365, 666, 264, 22632, 30, 51176], "temperature": 0.0, "avg_logprob": -0.31184032559394836, "compression_ratio": 1.748502994011976, "no_speech_prob": 0.034560125321149826}, {"id": 194, "seek": 110334, "start": 1119.58, "end": 1126.06, "text": " So the question is basically about object versioning so if an object version is configured", "tokens": [51176, 407, 264, 1168, 307, 1936, 466, 2657, 3037, 278, 370, 498, 364, 2657, 3037, 307, 30538, 51500], "temperature": 0.0, "avg_logprob": -0.31184032559394836, "compression_ratio": 1.748502994011976, "no_speech_prob": 0.034560125321149826}, {"id": 195, "seek": 112606, "start": 1126.06, "end": 1129.26, "text": " in the source how do we replicate it right?", "tokens": [50364, 294, 264, 4009, 577, 360, 321, 25356, 309, 558, 30, 50524], "temperature": 0.0, "avg_logprob": -0.18189352208917792, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.5527942776679993}, {"id": 196, "seek": 112606, "start": 1129.26, "end": 1137.5, "text": " So for example in object versioning those are also defined as objects in a hidden bucket", "tokens": [50524, 407, 337, 1365, 294, 2657, 3037, 278, 729, 366, 611, 7642, 382, 6565, 294, 257, 7633, 13058, 50936], "temperature": 0.0, "avg_logprob": -0.18189352208917792, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.5527942776679993}, {"id": 197, "seek": 112606, "start": 1137.5, "end": 1145.3799999999999, "text": " right so that bucket will eventually also be copied with the metadata so the object", "tokens": [50936, 558, 370, 300, 13058, 486, 4728, 611, 312, 25365, 365, 264, 26603, 370, 264, 2657, 51330], "temperature": 0.0, "avg_logprob": -0.18189352208917792, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.5527942776679993}, {"id": 198, "seek": 112606, "start": 1145.3799999999999, "end": 1151.34, "text": " which you create initially before the first object it will have metadata and you configure", "tokens": [51330, 597, 291, 1884, 9105, 949, 264, 700, 2657, 309, 486, 362, 26603, 293, 291, 22162, 51628], "temperature": 0.0, "avg_logprob": -0.18189352208917792, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.5527942776679993}, {"id": 199, "seek": 112606, "start": 1151.34, "end": 1155.8999999999999, "text": " versioning on it and there is a hidden bucket where all the versions go and we can restore", "tokens": [51628, 3037, 278, 322, 309, 293, 456, 307, 257, 7633, 13058, 689, 439, 264, 9606, 352, 293, 321, 393, 15227, 51856], "temperature": 0.0, "avg_logprob": -0.18189352208917792, "compression_ratio": 1.8256880733944953, "no_speech_prob": 0.5527942776679993}, {"id": 200, "seek": 115590, "start": 1156.74, "end": 1160.74, "text": " it to that version anytime so the entire data is copied to the other back end as well with", "tokens": [50406, 309, 281, 300, 3037, 13038, 370, 264, 2302, 1412, 307, 25365, 281, 264, 661, 646, 917, 382, 731, 365, 50606], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 201, "seek": 115590, "start": 1160.74, "end": 1163.74, "text": " the metadata so that's how we can ensure.", "tokens": [50606, 264, 26603, 370, 300, 311, 577, 321, 393, 5586, 13, 50756], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 202, "seek": 115590, "start": 1163.74, "end": 1169.74, "text": " Yes I'm picking also about backup use case.", "tokens": [50756, 1079, 286, 478, 8867, 611, 466, 14807, 764, 1389, 13, 51056], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 203, "seek": 115590, "start": 1169.74, "end": 1174.14, "text": " Did chorus manage object log?", "tokens": [51056, 2589, 22632, 3067, 2657, 3565, 30, 51276], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 204, "seek": 115590, "start": 1174.14, "end": 1175.14, "text": " Can you repeat that for me?", "tokens": [51276, 1664, 291, 7149, 300, 337, 385, 30, 51326], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 205, "seek": 115590, "start": 1175.14, "end": 1178.8200000000002, "text": " Did chorus manage object log?", "tokens": [51326, 2589, 22632, 3067, 2657, 3565, 30, 51510], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 206, "seek": 115590, "start": 1178.8200000000002, "end": 1179.8200000000002, "text": " Object log.", "tokens": [51510, 24753, 3565, 13, 51560], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 207, "seek": 115590, "start": 1179.8200000000002, "end": 1180.8200000000002, "text": " Object log.", "tokens": [51560, 24753, 3565, 13, 51610], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 208, "seek": 115590, "start": 1180.8200000000002, "end": 1181.8200000000002, "text": " Yes.", "tokens": [51610, 1079, 13, 51660], "temperature": 0.0, "avg_logprob": -0.43434662042662153, "compression_ratio": 1.6368715083798884, "no_speech_prob": 0.03614402562379837}, {"id": 209, "seek": 118182, "start": 1181.82, "end": 1182.82, "text": " Lock.", "tokens": [50364, 16736, 13, 50414], "temperature": 0.0, "avg_logprob": -0.3553647107856218, "compression_ratio": 1.2110091743119267, "no_speech_prob": 0.060874540358781815}, {"id": 210, "seek": 118182, "start": 1182.82, "end": 1183.82, "text": " Lock.", "tokens": [50414, 16736, 13, 50464], "temperature": 0.0, "avg_logprob": -0.3553647107856218, "compression_ratio": 1.2110091743119267, "no_speech_prob": 0.060874540358781815}, {"id": 211, "seek": 118182, "start": 1183.82, "end": 1184.82, "text": " Yes.", "tokens": [50464, 1079, 13, 50514], "temperature": 0.0, "avg_logprob": -0.3553647107856218, "compression_ratio": 1.2110091743119267, "no_speech_prob": 0.060874540358781815}, {"id": 212, "seek": 118182, "start": 1184.82, "end": 1199.6599999999999, "text": " I'm sorry I couldn't get that.", "tokens": [50514, 286, 478, 2597, 286, 2809, 380, 483, 300, 13, 51256], "temperature": 0.0, "avg_logprob": -0.3553647107856218, "compression_ratio": 1.2110091743119267, "no_speech_prob": 0.060874540358781815}, {"id": 213, "seek": 118182, "start": 1199.6599999999999, "end": 1207.1799999999998, "text": " Maybe I'm not so much acquainted with that scenario but can you just elaborate about", "tokens": [51256, 2704, 286, 478, 406, 370, 709, 50224, 365, 300, 9005, 457, 393, 291, 445, 20945, 466, 51632], "temperature": 0.0, "avg_logprob": -0.3553647107856218, "compression_ratio": 1.2110091743119267, "no_speech_prob": 0.060874540358781815}, {"id": 214, "seek": 120718, "start": 1207.18, "end": 1209.74, "text": " what do you mean by object locking?", "tokens": [50364, 437, 360, 291, 914, 538, 2657, 23954, 30, 50492], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 215, "seek": 120718, "start": 1209.74, "end": 1221.78, "text": " It's a warm technology just the object is in right one time and also it cannot be modified.", "tokens": [50492, 467, 311, 257, 4561, 2899, 445, 264, 2657, 307, 294, 558, 472, 565, 293, 611, 309, 2644, 312, 15873, 13, 51094], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 216, "seek": 120718, "start": 1221.78, "end": 1222.78, "text": " Okay.", "tokens": [51094, 1033, 13, 51144], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 217, "seek": 120718, "start": 1222.78, "end": 1223.78, "text": " Read only.", "tokens": [51144, 17604, 787, 13, 51194], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 218, "seek": 120718, "start": 1223.78, "end": 1224.78, "text": " Read only.", "tokens": [51194, 17604, 787, 13, 51244], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 219, "seek": 120718, "start": 1224.78, "end": 1225.78, "text": " Read only.", "tokens": [51244, 17604, 787, 13, 51294], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 220, "seek": 120718, "start": 1225.78, "end": 1227.98, "text": " It's like a malware protection.", "tokens": [51294, 467, 311, 411, 257, 40747, 6334, 13, 51404], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 221, "seek": 120718, "start": 1227.98, "end": 1230.5, "text": " The ransomware thing.", "tokens": [51404, 440, 38279, 3039, 551, 13, 51530], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 222, "seek": 120718, "start": 1230.5, "end": 1236.5, "text": " That was one of our features that we want to implement so the question is more about when", "tokens": [51530, 663, 390, 472, 295, 527, 4122, 300, 321, 528, 281, 4445, 370, 264, 1168, 307, 544, 466, 562, 51830], "temperature": 0.0, "avg_logprob": -0.34585642010978096, "compression_ratio": 1.5577889447236182, "no_speech_prob": 0.40356388688087463}, {"id": 223, "seek": 123650, "start": 1236.5, "end": 1242.3, "text": " an object is locked or when there is an attack on the data.", "tokens": [50364, 364, 2657, 307, 9376, 420, 562, 456, 307, 364, 2690, 322, 264, 1412, 13, 50654], "temperature": 0.0, "avg_logprob": -0.19387898445129395, "compression_ratio": 1.6734693877551021, "no_speech_prob": 0.004897132981568575}, {"id": 224, "seek": 123650, "start": 1242.3, "end": 1250.78, "text": " So yeah the ransomware thing is in one of our discussions where so actively the back", "tokens": [50654, 407, 1338, 264, 38279, 3039, 551, 307, 294, 472, 295, 527, 11088, 689, 370, 13022, 264, 646, 51078], "temperature": 0.0, "avg_logprob": -0.19387898445129395, "compression_ratio": 1.6734693877551021, "no_speech_prob": 0.004897132981568575}, {"id": 225, "seek": 123650, "start": 1250.78, "end": 1258.1, "text": " end will be exposed more instead of the main storage so the warm or whatever that is introduced", "tokens": [51078, 917, 486, 312, 9495, 544, 2602, 295, 264, 2135, 6725, 370, 264, 4561, 420, 2035, 300, 307, 7268, 51444], "temperature": 0.0, "avg_logprob": -0.19387898445129395, "compression_ratio": 1.6734693877551021, "no_speech_prob": 0.004897132981568575}, {"id": 226, "seek": 123650, "start": 1258.1, "end": 1264.86, "text": " it will be in the back end and then we I mean that's just in discussions we are not yet", "tokens": [51444, 309, 486, 312, 294, 264, 646, 917, 293, 550, 321, 286, 914, 300, 311, 445, 294, 11088, 321, 366, 406, 1939, 51782], "temperature": 0.0, "avg_logprob": -0.19387898445129395, "compression_ratio": 1.6734693877551021, "no_speech_prob": 0.004897132981568575}, {"id": 227, "seek": 126486, "start": 1264.86, "end": 1271.02, "text": " there to implement but please feel free to post your question in GitHub.", "tokens": [50364, 456, 281, 4445, 457, 1767, 841, 1737, 281, 2183, 428, 1168, 294, 23331, 13, 50672], "temperature": 0.0, "avg_logprob": -0.21694041521121293, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1705479770898819}, {"id": 228, "seek": 126486, "start": 1271.02, "end": 1272.62, "text": " You can raise an issue.", "tokens": [50672, 509, 393, 5300, 364, 2734, 13, 50752], "temperature": 0.0, "avg_logprob": -0.21694041521121293, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1705479770898819}, {"id": 229, "seek": 126486, "start": 1272.62, "end": 1278.3, "text": " You can start a discussion in GitHub and then we can definitely take that as a feature with", "tokens": [50752, 509, 393, 722, 257, 5017, 294, 23331, 293, 550, 321, 393, 2138, 747, 300, 382, 257, 4111, 365, 51036], "temperature": 0.0, "avg_logprob": -0.21694041521121293, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1705479770898819}, {"id": 230, "seek": 126486, "start": 1278.3, "end": 1283.8999999999999, "text": " more details.", "tokens": [51036, 544, 4365, 13, 51316], "temperature": 0.0, "avg_logprob": -0.21694041521121293, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1705479770898819}, {"id": 231, "seek": 126486, "start": 1283.8999999999999, "end": 1285.6999999999998, "text": " These are the resources.", "tokens": [51316, 1981, 366, 264, 3593, 13, 51406], "temperature": 0.0, "avg_logprob": -0.21694041521121293, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1705479770898819}, {"id": 232, "seek": 126486, "start": 1285.6999999999998, "end": 1293.6999999999998, "text": " We have open source the back end and then you can definitely reach out to us on GitHub", "tokens": [51406, 492, 362, 1269, 4009, 264, 646, 917, 293, 550, 291, 393, 2138, 2524, 484, 281, 505, 322, 23331, 51806], "temperature": 0.0, "avg_logprob": -0.21694041521121293, "compression_ratio": 1.6526315789473685, "no_speech_prob": 0.1705479770898819}, {"id": 233, "seek": 129370, "start": 1293.94, "end": 1298.3400000000001, "text": " and then this is a GitHub link for the chorus project.", "tokens": [50376, 293, 550, 341, 307, 257, 23331, 2113, 337, 264, 22632, 1716, 13, 50596], "temperature": 0.0, "avg_logprob": -0.19887379805246988, "compression_ratio": 1.6147540983606556, "no_speech_prob": 0.10343809425830841}, {"id": 234, "seek": 129370, "start": 1298.3400000000001, "end": 1304.42, "text": " I'm sure chorus is more than I cannot speak about chorus so much in this 30 minutes but", "tokens": [50596, 286, 478, 988, 22632, 307, 544, 813, 286, 2644, 1710, 466, 22632, 370, 709, 294, 341, 2217, 2077, 457, 50900], "temperature": 0.0, "avg_logprob": -0.19887379805246988, "compression_ratio": 1.6147540983606556, "no_speech_prob": 0.10343809425830841}, {"id": 235, "seek": 129370, "start": 1304.42, "end": 1312.38, "text": " definitely it's a more efficient tool and it has a lot of capabilities to be acting", "tokens": [50900, 2138, 309, 311, 257, 544, 7148, 2290, 293, 309, 575, 257, 688, 295, 10862, 281, 312, 6577, 51298], "temperature": 0.0, "avg_logprob": -0.19887379805246988, "compression_ratio": 1.6147540983606556, "no_speech_prob": 0.10343809425830841}, {"id": 236, "seek": 129370, "start": 1312.38, "end": 1315.78, "text": " as an orchestration layer for multiple back ends.", "tokens": [51298, 382, 364, 14161, 2405, 4583, 337, 3866, 646, 5314, 13, 51468], "temperature": 0.0, "avg_logprob": -0.19887379805246988, "compression_ratio": 1.6147540983606556, "no_speech_prob": 0.10343809425830841}, {"id": 237, "seek": 129370, "start": 1315.78, "end": 1321.06, "text": " Like we need not just use we can use one API to talk to multiple different types of back", "tokens": [51468, 1743, 321, 643, 406, 445, 764, 321, 393, 764, 472, 9362, 281, 751, 281, 3866, 819, 3467, 295, 646, 51732], "temperature": 0.0, "avg_logprob": -0.19887379805246988, "compression_ratio": 1.6147540983606556, "no_speech_prob": 0.10343809425830841}, {"id": 238, "seek": 129370, "start": 1321.06, "end": 1323.02, "text": " ends with different vendors.", "tokens": [51732, 5314, 365, 819, 22056, 13, 51830], "temperature": 0.0, "avg_logprob": -0.19887379805246988, "compression_ratio": 1.6147540983606556, "no_speech_prob": 0.10343809425830841}, {"id": 239, "seek": 132302, "start": 1323.06, "end": 1332.66, "text": " So yeah we are looking forward for more improvements more features and you can always talk to us", "tokens": [50366, 407, 1338, 321, 366, 1237, 2128, 337, 544, 13797, 544, 4122, 293, 291, 393, 1009, 751, 281, 505, 50846], "temperature": 0.0, "avg_logprob": -0.2969930860731337, "compression_ratio": 1.4068965517241379, "no_speech_prob": 0.009814116172492504}, {"id": 240, "seek": 132302, "start": 1332.66, "end": 1340.3799999999999, "text": " on GitHub and then we can definitely improve this project together.", "tokens": [50846, 322, 23331, 293, 550, 321, 393, 2138, 3470, 341, 1716, 1214, 13, 51232], "temperature": 0.0, "avg_logprob": -0.2969930860731337, "compression_ratio": 1.4068965517241379, "no_speech_prob": 0.009814116172492504}, {"id": 241, "seek": 132302, "start": 1340.3799999999999, "end": 1342.82, "text": " Thank you so much for this opportunity.", "tokens": [51232, 1044, 291, 370, 709, 337, 341, 2650, 13, 51354], "temperature": 0.0, "avg_logprob": -0.2969930860731337, "compression_ratio": 1.4068965517241379, "no_speech_prob": 0.009814116172492504}, {"id": 242, "seek": 135302, "start": 1353.02, "end": 1358.02, "text": " Can I get a correct answer?", "tokens": [50364, 1664, 286, 483, 257, 3006, 1867, 30, 50614], "temperature": 0.0, "avg_logprob": -0.5368303046169052, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.5443454384803772}, {"id": 243, "seek": 135302, "start": 1358.02, "end": 1363.02, "text": " While you're migrating you want to implement a load balancing feature.", "tokens": [50614, 3987, 291, 434, 6186, 8754, 291, 528, 281, 4445, 257, 3677, 22495, 4111, 13, 50864], "temperature": 0.0, "avg_logprob": -0.5368303046169052, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.5443454384803772}, {"id": 244, "seek": 135302, "start": 1363.02, "end": 1364.02, "text": " Yeah.", "tokens": [50864, 865, 13, 50914], "temperature": 0.0, "avg_logprob": -0.5368303046169052, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.5443454384803772}, {"id": 245, "seek": 135302, "start": 1364.02, "end": 1371.02, "text": " So you need to be in state of all the objects that you already migrated and that you still", "tokens": [50914, 407, 291, 643, 281, 312, 294, 1785, 295, 439, 264, 6565, 300, 291, 1217, 48329, 293, 300, 291, 920, 51264], "temperature": 0.0, "avg_logprob": -0.5368303046169052, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.5443454384803772}, {"id": 246, "seek": 135302, "start": 1371.02, "end": 1374.02, "text": " have to migrate to make an informed decision where you should go.", "tokens": [51264, 362, 281, 31821, 281, 652, 364, 11740, 3537, 689, 291, 820, 352, 13, 51414], "temperature": 0.0, "avg_logprob": -0.5368303046169052, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.5443454384803772}, {"id": 247, "seek": 135302, "start": 1374.02, "end": 1377.02, "text": " So do you already have like a database or how do you know?", "tokens": [51414, 407, 360, 291, 1217, 362, 411, 257, 8149, 420, 577, 360, 291, 458, 30, 51564], "temperature": 0.0, "avg_logprob": -0.5368303046169052, "compression_ratio": 1.6080402010050252, "no_speech_prob": 0.5443454384803772}, {"id": 248, "seek": 137702, "start": 1377.02, "end": 1382.02, "text": " Yeah we are going to do yeah to make the load balancing so that you the request is sent", "tokens": [50364, 865, 321, 366, 516, 281, 360, 1338, 281, 652, 264, 3677, 22495, 370, 300, 291, 264, 5308, 307, 2279, 50614], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 249, "seek": 137702, "start": 1382.02, "end": 1383.02, "text": " to the correct.", "tokens": [50614, 281, 264, 3006, 13, 50664], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 250, "seek": 137702, "start": 1383.02, "end": 1387.02, "text": " Yeah so you can like a faster cluster you can go to the new cluster.", "tokens": [50664, 865, 370, 291, 393, 411, 257, 4663, 13630, 291, 393, 352, 281, 264, 777, 13630, 13, 50864], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 251, "seek": 137702, "start": 1387.02, "end": 1388.02, "text": " Exactly.", "tokens": [50864, 7587, 13, 50914], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 252, "seek": 137702, "start": 1388.02, "end": 1393.02, "text": " It's time to be more mature to add a presentation for the code but it didn't get in 30 minutes.", "tokens": [50914, 467, 311, 565, 281, 312, 544, 14442, 281, 909, 257, 5860, 337, 264, 3089, 457, 309, 994, 380, 483, 294, 2217, 2077, 13, 51164], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 253, "seek": 137702, "start": 1393.02, "end": 1394.02, "text": " Yeah I got it.", "tokens": [51164, 865, 286, 658, 309, 13, 51214], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 254, "seek": 137702, "start": 1394.02, "end": 1396.02, "text": " It was like down how to restore it.", "tokens": [51214, 467, 390, 411, 760, 577, 281, 15227, 309, 13, 51314], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 255, "seek": 137702, "start": 1396.02, "end": 1397.02, "text": " Yeah sure sure.", "tokens": [51314, 865, 988, 988, 13, 51364], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 256, "seek": 137702, "start": 1397.02, "end": 1400.02, "text": " But it's still like it's really new we have some people there casting we're talking to", "tokens": [51364, 583, 309, 311, 920, 411, 309, 311, 534, 777, 321, 362, 512, 561, 456, 17301, 321, 434, 1417, 281, 51514], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 257, "seek": 137702, "start": 1400.02, "end": 1401.02, "text": " start.", "tokens": [51514, 722, 13, 51564], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 258, "seek": 137702, "start": 1401.02, "end": 1402.02, "text": " Thank you.", "tokens": [51564, 1044, 291, 13, 51614], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 259, "seek": 137702, "start": 1402.02, "end": 1403.02, "text": " Very nice.", "tokens": [51614, 4372, 1481, 13, 51664], "temperature": 0.0, "avg_logprob": -0.4094384935167101, "compression_ratio": 1.6788321167883211, "no_speech_prob": 0.5458554029464722}, {"id": 260, "seek": 140302, "start": 1403.02, "end": 1408.02, "text": " At the moment we just need to connect both.", "tokens": [50364, 1711, 264, 1623, 321, 445, 643, 281, 1745, 1293, 13, 50614], "temperature": 0.0, "avg_logprob": -0.43569937348365784, "compression_ratio": 1.1797752808988764, "no_speech_prob": 0.8149811029434204}, {"id": 261, "seek": 140302, "start": 1408.02, "end": 1410.02, "text": " Yeah that would be great.", "tokens": [50614, 865, 300, 576, 312, 869, 13, 50714], "temperature": 0.0, "avg_logprob": -0.43569937348365784, "compression_ratio": 1.1797752808988764, "no_speech_prob": 0.8149811029434204}, {"id": 262, "seek": 140302, "start": 1410.02, "end": 1412.02, "text": " And we can set up the next speaker.", "tokens": [50714, 400, 321, 393, 992, 493, 264, 958, 8145, 13, 50814], "temperature": 0.0, "avg_logprob": -0.43569937348365784, "compression_ratio": 1.1797752808988764, "no_speech_prob": 0.8149811029434204}], "language": "en"}