{"text": " So, our next speaker is Antoine Perret, which is one of our local superstars. He's the CTO of Rosa, which is a super nice company in the health sector. Maybe he will tell us more about it. And he's going to talk about the heart of JavaScript, which is the JavaScript event loop. Background of applause for Antoine. Alright, so you probably, everyone here probably heard that sentence, right? Do not block the even loop. Okay, and you might have heard or read on the internet that you should prefer asynchronous code over synchronous code. So, question for you is, do you believe that as long as you're using asynchronous code, you're safe and you will never block the even loop? Who believes that async helps you get there? No one. Okay, okay, that is good, that is good. So, today we're going to look at this and we're going to ask is the question, hey, what does that mean not blocking the even loop? What does that mean not using synchronous APIs and whether or not using asynchronous API help us stay safe? So, I'm the co-founder and CTO of Rosa and Rosa is building a patient application. We want to help people live healthier for longer. And when you look at the kind of applications that we build, part of Rosa can be labeled as CPU intensive or there are some parts of our applications where we do some heavy computation. Okay, so we have a calendar application, we have registries that are deployed at hospitals, etc. And when you think about the kind of computation that we do, yes, sometimes you have to compute recurring appointments, so occurrences of recurring appointments. Sometimes we do have to compute hashes to store passwords securely. Sometimes we do have to parse large files such as iCal. And sometimes, of course, we do the diffing because we have the schedule of a health professional. We have a list of appointments and we want to know when that health professional is available. So today we're going to talk about the event loop. We are going to talk about how not to block the event loop and the questions that are that we are going to ask ourselves, does it scale? What does what if traffic does 3x, 10x and is there a possibility to have a denial of service? Because as soon as you block the event loop, you have a possibility to have a denial of service. So why was not created? What is the event loop? And then that is this of how we can hash secrets using B-crypt, thread pools to the rescue and what are the metrics of the event loop? That's on the agenda for today. All right, if you look at one of the first talk of Ryan Dahl, the author of Node.js, he's talking about non-blocking I.O. And he's comparing the situation in which you will query for a database and you will have a blocking I.O. system and then he compares that to the Node.js implementation where you have non-blocking I.O. And the reason why he wants to build that is because most of web applications are I.O. bound. They spend most of their time waiting for an external server to answer. They spend most of their time waiting for database to answer. So when you have a server in which you have blocking I.O., what you do is that you create for each connection, you will create a thread, meaning that you will have a memory overhead because each time you create a thread, you will have memory associated to that. And so you can't scale because each time you need to handle a connection, you need more memory. So the solution to that problem is to create an event loop. But as soon as you start to use an event loop, then you require non-blocking I.O. OK? So Node.js is born because most web apps are I.O. bound and because the CPU and I.O. live in two different scales of time. OK? So the CPU and the Jigga-Earths with the Jigga-Earths frequency means that the cycle of the CPU takes one nanosecond. And you have to compare that to a roundtrip between, say, California and the Netherlands, which will take approximately 150 milliseconds. But that is kind of tough to create a mental model around that. So let's make it easier. OK? So we are developers. We all love to drink coffee. OK? We also love some shows to watch some shows on Netflix. OK? So making yourself a coffee is like an operational CPU such as a new text lock or a lock. It is taking 25 seconds. OK? Making yourself a coffee takes 25 seconds. Looking at a Netflix episode will be something like 40, 50, an hour-ish, will last for an hour approximately. That is the world in which a CPU lives. Now, if you compare that to the world of I.O., it is the equivalent of taking a five-week vacation. Or it is the equivalent of studying for five years at university. So the danger zone is when you take your CPU and you bring it to with you on vacation. So basically, the danger is when you block your main thread because you're performing a CPU-intensive operation while Node.js was designed with the idea that you would drink coffee and not go on vacation. Keep those figures in mind for the rest of the talk. What the heck is the event loop? Who is familiar with this representation? Good. Philip Provertz gave an excellent talk about this 10 years ago. And you can play with that tool on the Internet. It's getting a bit old, but it's still really, really good. OK? So let's have a quick look at what it does. So here what you see is that you have code that you wrote. OK? And we'll see what happens when JavaScript executes that code. It's quite simple. We have a set timeout with a five-second delay. And we have a console.log. So obviously, we all know that welcome for them will be first, printed to the console, and that after close to five seconds, because that is not a guarantee, we'll see powered by BEJS. OK? Let's play that video if it works, and the video can't be loaded. It's not a problem. OK? So basically what the video shows is it takes that block, puts it on the stack. When it's executed, because we have a set timeout, it will put the timer and play the five-second timer in the web API part. After, during that time, console.log for each one after the other. And you can also picture, have a mental model around the fact that in the end, there might be even several loops. OK? Multiple phases, timer, spending callback, ideally prepared, pulling, where we all know JS is going to ask the OS, hey, do you have any connection, network connection for me? Is any file, has any file being read? OK? And when you understand the different phases, you can answer questions such as this one, promise.resolve.then console.log promise versus process.nextStick, console.log nextStick, which one will be executed first? Well, it depends on where it will be picked up from at the level of the even loop, what phase of the even loop is involved. Node.js architecture is inherently multi-threaded. OK? So we all heard that JavaScript is single-threaded. What we mean by that is we have one single thread to execute your JavaScript code. But it doesn't mean that Node.js on its own is single-threaded. OK, how many threads or how many processes do we have in a Node.js application typically? One, two, three, three, anyone? Four, what about five-ish? Five-ish is a good number. OK, five-ish is a good number. Well, you have a thread for the main even loop, for the main stack. You can have threads or processes for the garbage collection. You will have libv, and then libv also takes care of handles a pool of four worker threads. OK, so you have at least five-ish processes or threads when you run your Node.js application. All right, that is a bit too complex for today. OK, and so we're going to simplify, and I've grouped different, I would say, parts of that architecture into blocks or squares of the same color. So we're going to look at the orange square. It's going to be the main stack together with the run on the same thread as the even loop in red. Then we're going to have one single queue. OK, we're not going to distinguish between micro task and task. And then everything else is going to be called Node.js API and will be assembled together. So that is what we are going to work with today. OK, good. So prefer asynchronous code over synchronous code. Let's first look at what it means when we use core modules, and then we're going to look at what it means when we use MPM modules that we can download from the internet. OK, so FS module reading a file. When you use the asynchronous API, read file with a callback, it is non-blocking. When you use the read file sync, it will be blocking. What is the difference? Well, the difference is that in one case, the sync version of it will run on the main thread, while the async version of it will be run on one of the worker thread, of one of the worker of the thread pool. It doesn't mean that at the OS level, reading the file will be non-blocking, but from the perspective of Node.js, it is non-blocking because it doesn't block the even loop of the main or the main thread. So the sentence, prefer a synchronous API over synchronous API, is absolutely relevant and true in the context of a core module, because it will run the code of the async version into a worker thread. But what about a pure JavaScript library? How does that work? To answer this question, we are going to use the example of Bcrypt. Bcrypt is a way to create a hash to securely store its secrets. And it is interesting because that operation can be quite intensive in terms of CPU, depending on the number of cycles that you will perform or how secure you want that secret to be. If you go on NPM, you will see that there are multiple implementations of Bcrypt, and there is one pure JavaScript implementation known as Bcrypt.js, and there is one C++ implementation which is known as Bcrypt. And so here it is interesting because both have sync and async APIs, and then we can compare what happens with the pure JavaScript implementation and what happens with the C++ implementation. So let's look at the pure JavaScript implementation. Hash sync versus hash, it is basically the same syntax as the FS module, right? And what we are going to do is to imagine that we have two servers that receive five requests. And the five requests that they receive is you take your CPU on a five-year study at ULB to obtain a degree, so you perform a super intensive operation, and then four requests that are basically quite fast, you just watch the Netflix episode. Okay, and we are going to compare what happens in both cases. Now, the trick is that Bcrypt is a smart and well implemented library. And the Bcrypt asynchronous API is implemented in a way that when it has to compute a large hash, when it has to compute a long operation, instead of doing all of it at once, it will chunk, it will split it into two smaller chunks. Okay, good. So synchronous on the left is synchronous on the right, and then we look at those five requests, the big one and the four faster one. So at some point, the endpoint with the hash computation is called, and we put on the stack the computation of the hash. Synchronous parts, we have that big square, blue square, that needs to be performed, and you see that as the computation goes, then the green is going to fill in the blue square to show progress. Okay, because on the asynchronous part, we have a chunk, that is a smaller square. At some point, the second request, the first red request, the first episode that you're watching, is reaching your server. And what happens is it has a callback, it has operations to be performed, and it will be queued. And notice that in the case of the asynchronous API, we're quite close to be done with the first chunk. The first chunk is done, and then the script will schedule the second chunk to be run. What it means is the stack will be empty, it will use Node APIs to schedule the next chunk, and then the Node APIs will push another callback to compute the second chunk. So we go on, and now you see that on the synchronous API, we continue to move forward with the computation, and on the asynchronous one, we are executing the callback one. Continue, same here, at some point the stack is empty, because the stack is empty, the event loop is picking the next task, put it on the stack, and we continue to perform the compilation. As each chunk is done, or the callback is executed for one of those red requests, when the stack is empty, we pick up the next task in the queue, and we go on, and we go on, and we go on. In blue, and then only you have callback one, callback two, callback three, callback four. While in the case of the async API, you chunk it, and because of that, you can't do anything. You chunk it, and because you chunk the work, then in between those chunks, your server can handle other requests. Now if you start to draw some lines and analyze the response time, so the point of view of the user, this is what it looks like, and then you have that kind of chart, where you can see the duration of the first blue, the big request, the duration of each of those red requests. In the first part, what you have is that each red request is delayed by the entire long compilation. On the b-crypt async part, on the bottom part, then it is delayed by at most one chunk. That's why you have smaller timing for the red request. What will happen if you do the same exercise with the native C++ implementation? Because it is a native implementation, because you can use the async API, it will behave the same way as the core module of FS, and it will be executed on a worker thread. If it's executed on a worker thread, here's what the timings might look like. You basically have a timing that corresponds to exactly the combination that needs to be done for the red request, and there's no delay at all. There's a small difference between the C++ and the JavaScript implementation. The C++ implementation will be faster, but here what matters is the fact that the code runs either on main thread, or in a worker thread. It's not important to compare the speed of the C++ or the JavaScript implementation in that case. Sometimes you do have to take your CPU on a vacation. Sometimes you do have to do a heavy combination. What if you do not have a native implementation, or you do to have a slow application? Well, if you really have no other choice than to take some vacation, my advice is be sure to have a pool. Be sure to take your swimsuit with you, because it is possible with libraries such as Piscina, Swimming Pool in Italian, to create pools in which you can have threads that can execute JavaScript code. The API is quite straightforward, and in the end what it means is that instead of having one stack to execute your JavaScript and then a set of other threads to execute native code, you can create other tracks, all the threads in which JavaScript code will be executed. For example, say you create two pools, you can create one pool with four threads to compute, for example, B-Crypt hashes, and you can create a second pool to compute recurring events. And in that case, what it means is that when your code will be pushed to the main JavaScript thread, the main thread is going to communicate with the pool and say, hey, execute and do that computation for me. And then the pool will distribute that computation among the different threads that it creates. So here is what it looks like when you use a pool. It's quite efficient, it's quite nice. Is it a silver bullet? Well, no, there are several things you need to take into account. You need to choose the number of threads wisely. You need to determine when you use a pool and make an analysis. You need to be sure that the machine on which you run your application has enough cores, because in some situations it can be counterproductive to create too many threads and have too many processes running. And of course, you will have to monitor and check the memory usage. All right, how do you know when you need to create a thread pool? For that, you need to measure how the event loop is behaving. You need to measure the health of your event loop. And one of those metrics is, for example, the event loop delay. Another one is the max CPU time, and there are tools to help you get there. I strongly recommend Dr.JS with ClinicJS. It will give you such a nice graph and show you when you have a delay in your event loop, when your event loop is blocked. Measuring that yourself is not complex. That is all you need to measure on your server or in your node application. The delay of your event loop. What you basically do is you set an interval with a one second delay. So every second you will execute the callback with a set immediate, and you will compare the time at which you plan it and the time at which it is actually executed. And that, the time difference between those two, the start and the end, will give you the delay in your event loop. Time to wrap up. So do not block the event loop. And what you really mean by that, it is not about async versus sync. It is more about not performing CPU intensive task on the main thread. Okay, so that is what you have to remember. As long as you do not execute CPU intensive task on the main thread, your application will be fast and smooth. So here is a couple of advice. And have some coffee, drink as much coffee as you want. Enjoy the show. Take some time off from time to time. And thank you for them and you will be for having us today. Are there any questions? One question there. You have to speak up. How does PCNAS react compared to Node cluster API? So the question is how does PCNAS differ from the Node cluster API? So my understanding is that the Node cluster API basically means that you are going to have multiple instances of the same application. Okay, why PCNAS, one instance of your application will have multiple threads.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 16.16, "text": " So, our next speaker is Antoine Perret, which is one of our local superstars.", "tokens": [50364, 407, 11, 527, 958, 8145, 307, 5130, 44454, 3026, 1505, 11, 597, 307, 472, 295, 527, 2654, 29423, 685, 13, 51172], "temperature": 0.0, "avg_logprob": -0.2665155104228428, "compression_ratio": 1.3428571428571427, "no_speech_prob": 0.5850332379341125}, {"id": 1, "seek": 0, "start": 16.16, "end": 24.2, "text": " He's the CTO of Rosa, which is a super nice company in the health sector.", "tokens": [51172, 634, 311, 264, 383, 15427, 295, 30572, 11, 597, 307, 257, 1687, 1481, 2237, 294, 264, 1585, 6977, 13, 51574], "temperature": 0.0, "avg_logprob": -0.2665155104228428, "compression_ratio": 1.3428571428571427, "no_speech_prob": 0.5850332379341125}, {"id": 2, "seek": 0, "start": 24.2, "end": 25.92, "text": " Maybe he will tell us more about it.", "tokens": [51574, 2704, 415, 486, 980, 505, 544, 466, 309, 13, 51660], "temperature": 0.0, "avg_logprob": -0.2665155104228428, "compression_ratio": 1.3428571428571427, "no_speech_prob": 0.5850332379341125}, {"id": 3, "seek": 2592, "start": 25.92, "end": 33.28, "text": " And he's going to talk about the heart of JavaScript, which is the JavaScript event loop.", "tokens": [50364, 400, 415, 311, 516, 281, 751, 466, 264, 1917, 295, 15778, 11, 597, 307, 264, 15778, 2280, 6367, 13, 50732], "temperature": 0.0, "avg_logprob": -0.3644321375879748, "compression_ratio": 1.4375, "no_speech_prob": 0.08436842262744904}, {"id": 4, "seek": 2592, "start": 33.28, "end": 40.32, "text": " Background of applause for Antoine.", "tokens": [50732, 36904, 295, 9969, 337, 5130, 44454, 13, 51084], "temperature": 0.0, "avg_logprob": -0.3644321375879748, "compression_ratio": 1.4375, "no_speech_prob": 0.08436842262744904}, {"id": 5, "seek": 2592, "start": 40.32, "end": 48.28, "text": " Alright, so you probably, everyone here probably heard that sentence, right?", "tokens": [51084, 2798, 11, 370, 291, 1391, 11, 1518, 510, 1391, 2198, 300, 8174, 11, 558, 30, 51482], "temperature": 0.0, "avg_logprob": -0.3644321375879748, "compression_ratio": 1.4375, "no_speech_prob": 0.08436842262744904}, {"id": 6, "seek": 2592, "start": 48.28, "end": 50.64, "text": " Do not block the even loop.", "tokens": [51482, 1144, 406, 3461, 264, 754, 6367, 13, 51600], "temperature": 0.0, "avg_logprob": -0.3644321375879748, "compression_ratio": 1.4375, "no_speech_prob": 0.08436842262744904}, {"id": 7, "seek": 5064, "start": 50.64, "end": 58.72, "text": " Okay, and you might have heard or read on the internet that you should prefer asynchronous code over synchronous code.", "tokens": [50364, 1033, 11, 293, 291, 1062, 362, 2198, 420, 1401, 322, 264, 4705, 300, 291, 820, 4382, 49174, 3089, 670, 44743, 3089, 13, 50768], "temperature": 0.0, "avg_logprob": -0.22227467547406207, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.12615543603897095}, {"id": 8, "seek": 5064, "start": 58.72, "end": 68.76, "text": " So, question for you is, do you believe that as long as you're using asynchronous code, you're safe and you will never block the even loop?", "tokens": [50768, 407, 11, 1168, 337, 291, 307, 11, 360, 291, 1697, 300, 382, 938, 382, 291, 434, 1228, 49174, 3089, 11, 291, 434, 3273, 293, 291, 486, 1128, 3461, 264, 754, 6367, 30, 51270], "temperature": 0.0, "avg_logprob": -0.22227467547406207, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.12615543603897095}, {"id": 9, "seek": 5064, "start": 68.76, "end": 73.12, "text": " Who believes that async helps you get there?", "tokens": [51270, 2102, 12307, 300, 382, 34015, 3665, 291, 483, 456, 30, 51488], "temperature": 0.0, "avg_logprob": -0.22227467547406207, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.12615543603897095}, {"id": 10, "seek": 5064, "start": 73.12, "end": 74.0, "text": " No one.", "tokens": [51488, 883, 472, 13, 51532], "temperature": 0.0, "avg_logprob": -0.22227467547406207, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.12615543603897095}, {"id": 11, "seek": 5064, "start": 74.0, "end": 76.84, "text": " Okay, okay, that is good, that is good.", "tokens": [51532, 1033, 11, 1392, 11, 300, 307, 665, 11, 300, 307, 665, 13, 51674], "temperature": 0.0, "avg_logprob": -0.22227467547406207, "compression_ratio": 1.7376237623762376, "no_speech_prob": 0.12615543603897095}, {"id": 12, "seek": 7684, "start": 76.84, "end": 84.68, "text": " So, today we're going to look at this and we're going to ask is the question, hey, what does that mean not blocking the even loop?", "tokens": [50364, 407, 11, 965, 321, 434, 516, 281, 574, 412, 341, 293, 321, 434, 516, 281, 1029, 307, 264, 1168, 11, 4177, 11, 437, 775, 300, 914, 406, 17776, 264, 754, 6367, 30, 50756], "temperature": 0.0, "avg_logprob": -0.15637997658021988, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.0022044694051146507}, {"id": 13, "seek": 7684, "start": 84.68, "end": 94.84, "text": " What does that mean not using synchronous APIs and whether or not using asynchronous API help us stay safe?", "tokens": [50756, 708, 775, 300, 914, 406, 1228, 44743, 21445, 293, 1968, 420, 406, 1228, 49174, 9362, 854, 505, 1754, 3273, 30, 51264], "temperature": 0.0, "avg_logprob": -0.15637997658021988, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.0022044694051146507}, {"id": 14, "seek": 7684, "start": 94.84, "end": 100.64, "text": " So, I'm the co-founder and CTO of Rosa and Rosa is building a patient application.", "tokens": [51264, 407, 11, 286, 478, 264, 598, 12, 33348, 293, 383, 15427, 295, 30572, 293, 30572, 307, 2390, 257, 4537, 3861, 13, 51554], "temperature": 0.0, "avg_logprob": -0.15637997658021988, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.0022044694051146507}, {"id": 15, "seek": 7684, "start": 100.64, "end": 104.68, "text": " We want to help people live healthier for longer.", "tokens": [51554, 492, 528, 281, 854, 561, 1621, 19580, 337, 2854, 13, 51756], "temperature": 0.0, "avg_logprob": -0.15637997658021988, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.0022044694051146507}, {"id": 16, "seek": 10468, "start": 104.68, "end": 119.92, "text": " And when you look at the kind of applications that we build, part of Rosa can be labeled as CPU intensive or there are some parts of our applications where we do some heavy computation.", "tokens": [50364, 400, 562, 291, 574, 412, 264, 733, 295, 5821, 300, 321, 1322, 11, 644, 295, 30572, 393, 312, 21335, 382, 13199, 18957, 420, 456, 366, 512, 3166, 295, 527, 5821, 689, 321, 360, 512, 4676, 24903, 13, 51126], "temperature": 0.0, "avg_logprob": -0.15482448041439056, "compression_ratio": 1.5754189944134078, "no_speech_prob": 0.017333388328552246}, {"id": 17, "seek": 10468, "start": 119.92, "end": 127.32000000000001, "text": " Okay, so we have a calendar application, we have registries that are deployed at hospitals, etc.", "tokens": [51126, 1033, 11, 370, 321, 362, 257, 12183, 3861, 11, 321, 362, 11376, 2244, 300, 366, 17826, 412, 13014, 11, 5183, 13, 51496], "temperature": 0.0, "avg_logprob": -0.15482448041439056, "compression_ratio": 1.5754189944134078, "no_speech_prob": 0.017333388328552246}, {"id": 18, "seek": 12732, "start": 127.32, "end": 136.04, "text": " And when you think about the kind of computation that we do, yes, sometimes you have to compute recurring appointments, so occurrences of recurring appointments.", "tokens": [50364, 400, 562, 291, 519, 466, 264, 733, 295, 24903, 300, 321, 360, 11, 2086, 11, 2171, 291, 362, 281, 14722, 32279, 25084, 11, 370, 5160, 38983, 295, 32279, 25084, 13, 50800], "temperature": 0.0, "avg_logprob": -0.17448504217739763, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.6867493987083435}, {"id": 19, "seek": 12732, "start": 136.04, "end": 141.64, "text": " Sometimes we do have to compute hashes to store passwords securely.", "tokens": [50800, 4803, 321, 360, 362, 281, 14722, 575, 8076, 281, 3531, 33149, 38348, 13, 51080], "temperature": 0.0, "avg_logprob": -0.17448504217739763, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.6867493987083435}, {"id": 20, "seek": 12732, "start": 141.64, "end": 147.16, "text": " Sometimes we do have to parse large files such as iCal.", "tokens": [51080, 4803, 321, 360, 362, 281, 48377, 2416, 7098, 1270, 382, 741, 31279, 13, 51356], "temperature": 0.0, "avg_logprob": -0.17448504217739763, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.6867493987083435}, {"id": 21, "seek": 12732, "start": 147.16, "end": 153.16, "text": " And sometimes, of course, we do the diffing because we have the schedule of a health professional.", "tokens": [51356, 400, 2171, 11, 295, 1164, 11, 321, 360, 264, 7593, 278, 570, 321, 362, 264, 7567, 295, 257, 1585, 4843, 13, 51656], "temperature": 0.0, "avg_logprob": -0.17448504217739763, "compression_ratio": 1.819905213270142, "no_speech_prob": 0.6867493987083435}, {"id": 22, "seek": 15316, "start": 153.16, "end": 159.72, "text": " We have a list of appointments and we want to know when that health professional is available.", "tokens": [50364, 492, 362, 257, 1329, 295, 25084, 293, 321, 528, 281, 458, 562, 300, 1585, 4843, 307, 2435, 13, 50692], "temperature": 0.0, "avg_logprob": -0.19776908300256216, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.0960337221622467}, {"id": 23, "seek": 15316, "start": 159.72, "end": 162.24, "text": " So today we're going to talk about the event loop.", "tokens": [50692, 407, 965, 321, 434, 516, 281, 751, 466, 264, 2280, 6367, 13, 50818], "temperature": 0.0, "avg_logprob": -0.19776908300256216, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.0960337221622467}, {"id": 24, "seek": 15316, "start": 162.24, "end": 169.2, "text": " We are going to talk about how not to block the event loop and the questions that are that we are going to ask ourselves, does it scale?", "tokens": [50818, 492, 366, 516, 281, 751, 466, 577, 406, 281, 3461, 264, 2280, 6367, 293, 264, 1651, 300, 366, 300, 321, 366, 516, 281, 1029, 4175, 11, 775, 309, 4373, 30, 51166], "temperature": 0.0, "avg_logprob": -0.19776908300256216, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.0960337221622467}, {"id": 25, "seek": 15316, "start": 169.2, "end": 176.76, "text": " What does what if traffic does 3x, 10x and is there a possibility to have a denial of service?", "tokens": [51166, 708, 775, 437, 498, 6419, 775, 805, 87, 11, 1266, 87, 293, 307, 456, 257, 7959, 281, 362, 257, 28754, 295, 2643, 30, 51544], "temperature": 0.0, "avg_logprob": -0.19776908300256216, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.0960337221622467}, {"id": 26, "seek": 17676, "start": 176.76, "end": 184.28, "text": " Because as soon as you block the event loop, you have a possibility to have a denial of service.", "tokens": [50364, 1436, 382, 2321, 382, 291, 3461, 264, 2280, 6367, 11, 291, 362, 257, 7959, 281, 362, 257, 28754, 295, 2643, 13, 50740], "temperature": 0.0, "avg_logprob": -0.20622126824032944, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0155869135633111}, {"id": 27, "seek": 17676, "start": 184.28, "end": 186.0, "text": " So why was not created?", "tokens": [50740, 407, 983, 390, 406, 2942, 30, 50826], "temperature": 0.0, "avg_logprob": -0.20622126824032944, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0155869135633111}, {"id": 28, "seek": 17676, "start": 186.0, "end": 187.35999999999999, "text": " What is the event loop?", "tokens": [50826, 708, 307, 264, 2280, 6367, 30, 50894], "temperature": 0.0, "avg_logprob": -0.20622126824032944, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0155869135633111}, {"id": 29, "seek": 17676, "start": 187.35999999999999, "end": 192.12, "text": " And then that is this of how we can hash secrets using B-crypt,", "tokens": [50894, 400, 550, 300, 307, 341, 295, 577, 321, 393, 22019, 14093, 1228, 363, 12, 46555, 662, 11, 51132], "temperature": 0.0, "avg_logprob": -0.20622126824032944, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0155869135633111}, {"id": 30, "seek": 17676, "start": 192.12, "end": 195.64, "text": " thread pools to the rescue and what are the metrics of the event loop?", "tokens": [51132, 7207, 28688, 281, 264, 13283, 293, 437, 366, 264, 16367, 295, 264, 2280, 6367, 30, 51308], "temperature": 0.0, "avg_logprob": -0.20622126824032944, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0155869135633111}, {"id": 31, "seek": 17676, "start": 195.64, "end": 198.76, "text": " That's on the agenda for today.", "tokens": [51308, 663, 311, 322, 264, 9829, 337, 965, 13, 51464], "temperature": 0.0, "avg_logprob": -0.20622126824032944, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0155869135633111}, {"id": 32, "seek": 17676, "start": 198.76, "end": 204.68, "text": " All right, if you look at one of the first talk of Ryan Dahl, the author of Node.js,", "tokens": [51464, 1057, 558, 11, 498, 291, 574, 412, 472, 295, 264, 700, 751, 295, 9116, 413, 10722, 11, 264, 3793, 295, 38640, 13, 25530, 11, 51760], "temperature": 0.0, "avg_logprob": -0.20622126824032944, "compression_ratio": 1.6296296296296295, "no_speech_prob": 0.0155869135633111}, {"id": 33, "seek": 20468, "start": 204.68, "end": 208.64000000000001, "text": " he's talking about non-blocking I.O.", "tokens": [50364, 415, 311, 1417, 466, 2107, 12, 28830, 278, 286, 13, 46, 13, 50562], "temperature": 0.0, "avg_logprob": -0.14135389013604804, "compression_ratio": 1.6767676767676767, "no_speech_prob": 0.028803063556551933}, {"id": 34, "seek": 20468, "start": 208.64000000000001, "end": 218.4, "text": " And he's comparing the situation in which you will query for a database and you will have a blocking I.O. system", "tokens": [50562, 400, 415, 311, 15763, 264, 2590, 294, 597, 291, 486, 14581, 337, 257, 8149, 293, 291, 486, 362, 257, 17776, 286, 13, 46, 13, 1185, 51050], "temperature": 0.0, "avg_logprob": -0.14135389013604804, "compression_ratio": 1.6767676767676767, "no_speech_prob": 0.028803063556551933}, {"id": 35, "seek": 20468, "start": 218.4, "end": 223.76000000000002, "text": " and then he compares that to the Node.js implementation where you have non-blocking I.O.", "tokens": [51050, 293, 550, 415, 38334, 300, 281, 264, 38640, 13, 25530, 11420, 689, 291, 362, 2107, 12, 28830, 278, 286, 13, 46, 13, 51318], "temperature": 0.0, "avg_logprob": -0.14135389013604804, "compression_ratio": 1.6767676767676767, "no_speech_prob": 0.028803063556551933}, {"id": 36, "seek": 20468, "start": 223.76000000000002, "end": 230.60000000000002, "text": " And the reason why he wants to build that is because most of web applications are I.O. bound.", "tokens": [51318, 400, 264, 1778, 983, 415, 2738, 281, 1322, 300, 307, 570, 881, 295, 3670, 5821, 366, 286, 13, 46, 13, 5472, 13, 51660], "temperature": 0.0, "avg_logprob": -0.14135389013604804, "compression_ratio": 1.6767676767676767, "no_speech_prob": 0.028803063556551933}, {"id": 37, "seek": 23060, "start": 230.64, "end": 235.04, "text": " They spend most of their time waiting for an external server to answer.", "tokens": [50366, 814, 3496, 881, 295, 641, 565, 3806, 337, 364, 8320, 7154, 281, 1867, 13, 50586], "temperature": 0.0, "avg_logprob": -0.1725303771648001, "compression_ratio": 1.9554455445544554, "no_speech_prob": 0.004464387893676758}, {"id": 38, "seek": 23060, "start": 235.04, "end": 240.0, "text": " They spend most of their time waiting for database to answer.", "tokens": [50586, 814, 3496, 881, 295, 641, 565, 3806, 337, 8149, 281, 1867, 13, 50834], "temperature": 0.0, "avg_logprob": -0.1725303771648001, "compression_ratio": 1.9554455445544554, "no_speech_prob": 0.004464387893676758}, {"id": 39, "seek": 23060, "start": 240.0, "end": 247.51999999999998, "text": " So when you have a server in which you have blocking I.O., what you do is that you create for each connection,", "tokens": [50834, 407, 562, 291, 362, 257, 7154, 294, 597, 291, 362, 17776, 286, 13, 46, 7933, 437, 291, 360, 307, 300, 291, 1884, 337, 1184, 4984, 11, 51210], "temperature": 0.0, "avg_logprob": -0.1725303771648001, "compression_ratio": 1.9554455445544554, "no_speech_prob": 0.004464387893676758}, {"id": 40, "seek": 23060, "start": 247.51999999999998, "end": 253.35999999999999, "text": " you will create a thread, meaning that you will have a memory overhead because each time you create a thread,", "tokens": [51210, 291, 486, 1884, 257, 7207, 11, 3620, 300, 291, 486, 362, 257, 4675, 19922, 570, 1184, 565, 291, 1884, 257, 7207, 11, 51502], "temperature": 0.0, "avg_logprob": -0.1725303771648001, "compression_ratio": 1.9554455445544554, "no_speech_prob": 0.004464387893676758}, {"id": 41, "seek": 23060, "start": 253.35999999999999, "end": 255.51999999999998, "text": " you will have memory associated to that.", "tokens": [51502, 291, 486, 362, 4675, 6615, 281, 300, 13, 51610], "temperature": 0.0, "avg_logprob": -0.1725303771648001, "compression_ratio": 1.9554455445544554, "no_speech_prob": 0.004464387893676758}, {"id": 42, "seek": 25552, "start": 255.52, "end": 263.36, "text": " And so you can't scale because each time you need to handle a connection, you need more memory.", "tokens": [50364, 400, 370, 291, 393, 380, 4373, 570, 1184, 565, 291, 643, 281, 4813, 257, 4984, 11, 291, 643, 544, 4675, 13, 50756], "temperature": 0.0, "avg_logprob": -0.1484074592590332, "compression_ratio": 1.5598086124401913, "no_speech_prob": 0.0003853956295643002}, {"id": 43, "seek": 25552, "start": 263.36, "end": 266.28000000000003, "text": " So the solution to that problem is to create an event loop.", "tokens": [50756, 407, 264, 3827, 281, 300, 1154, 307, 281, 1884, 364, 2280, 6367, 13, 50902], "temperature": 0.0, "avg_logprob": -0.1484074592590332, "compression_ratio": 1.5598086124401913, "no_speech_prob": 0.0003853956295643002}, {"id": 44, "seek": 25552, "start": 266.28000000000003, "end": 272.12, "text": " But as soon as you start to use an event loop, then you require non-blocking I.O.", "tokens": [50902, 583, 382, 2321, 382, 291, 722, 281, 764, 364, 2280, 6367, 11, 550, 291, 3651, 2107, 12, 28830, 278, 286, 13, 46, 13, 51194], "temperature": 0.0, "avg_logprob": -0.1484074592590332, "compression_ratio": 1.5598086124401913, "no_speech_prob": 0.0003853956295643002}, {"id": 45, "seek": 25552, "start": 272.12, "end": 276.2, "text": " OK?", "tokens": [51194, 2264, 30, 51398], "temperature": 0.0, "avg_logprob": -0.1484074592590332, "compression_ratio": 1.5598086124401913, "no_speech_prob": 0.0003853956295643002}, {"id": 46, "seek": 25552, "start": 276.2, "end": 283.64, "text": " So Node.js is born because most web apps are I.O. bound and because the CPU and I.O.", "tokens": [51398, 407, 38640, 13, 25530, 307, 4232, 570, 881, 3670, 7733, 366, 286, 13, 46, 13, 5472, 293, 570, 264, 13199, 293, 286, 13, 46, 13, 51770], "temperature": 0.0, "avg_logprob": -0.1484074592590332, "compression_ratio": 1.5598086124401913, "no_speech_prob": 0.0003853956295643002}, {"id": 47, "seek": 28364, "start": 283.71999999999997, "end": 287.59999999999997, "text": " live in two different scales of time.", "tokens": [50368, 1621, 294, 732, 819, 17408, 295, 565, 13, 50562], "temperature": 0.0, "avg_logprob": -0.2619361682813995, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.0019248038297519088}, {"id": 48, "seek": 28364, "start": 287.59999999999997, "end": 296.03999999999996, "text": " OK? So the CPU and the Jigga-Earths with the Jigga-Earths frequency means that the cycle of the CPU takes one nanosecond.", "tokens": [50562, 2264, 30, 407, 264, 13199, 293, 264, 508, 328, 3680, 12, 36, 18352, 82, 365, 264, 508, 328, 3680, 12, 36, 18352, 82, 7893, 1355, 300, 264, 6586, 295, 264, 13199, 2516, 472, 14067, 541, 18882, 13, 50984], "temperature": 0.0, "avg_logprob": -0.2619361682813995, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.0019248038297519088}, {"id": 49, "seek": 28364, "start": 296.03999999999996, "end": 301.96, "text": " And you have to compare that to a roundtrip between, say, California and the Netherlands,", "tokens": [50984, 400, 291, 362, 281, 6794, 300, 281, 257, 3098, 83, 8400, 1296, 11, 584, 11, 5384, 293, 264, 20873, 11, 51280], "temperature": 0.0, "avg_logprob": -0.2619361682813995, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.0019248038297519088}, {"id": 50, "seek": 28364, "start": 301.96, "end": 306.4, "text": " which will take approximately 150 milliseconds.", "tokens": [51280, 597, 486, 747, 10447, 8451, 34184, 13, 51502], "temperature": 0.0, "avg_logprob": -0.2619361682813995, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.0019248038297519088}, {"id": 51, "seek": 28364, "start": 306.4, "end": 311.36, "text": " But that is kind of tough to create a mental model around that.", "tokens": [51502, 583, 300, 307, 733, 295, 4930, 281, 1884, 257, 4973, 2316, 926, 300, 13, 51750], "temperature": 0.0, "avg_logprob": -0.2619361682813995, "compression_ratio": 1.5296610169491525, "no_speech_prob": 0.0019248038297519088}, {"id": 52, "seek": 31136, "start": 311.36, "end": 313.88, "text": " So let's make it easier.", "tokens": [50364, 407, 718, 311, 652, 309, 3571, 13, 50490], "temperature": 0.0, "avg_logprob": -0.18918418884277344, "compression_ratio": 1.622340425531915, "no_speech_prob": 0.0012769929599016905}, {"id": 53, "seek": 31136, "start": 313.88, "end": 315.6, "text": " OK? So we are developers.", "tokens": [50490, 2264, 30, 407, 321, 366, 8849, 13, 50576], "temperature": 0.0, "avg_logprob": -0.18918418884277344, "compression_ratio": 1.622340425531915, "no_speech_prob": 0.0012769929599016905}, {"id": 54, "seek": 31136, "start": 315.6, "end": 317.76, "text": " We all love to drink coffee.", "tokens": [50576, 492, 439, 959, 281, 2822, 4982, 13, 50684], "temperature": 0.0, "avg_logprob": -0.18918418884277344, "compression_ratio": 1.622340425531915, "no_speech_prob": 0.0012769929599016905}, {"id": 55, "seek": 31136, "start": 317.76, "end": 323.6, "text": " OK? We also love some shows to watch some shows on Netflix.", "tokens": [50684, 2264, 30, 492, 611, 959, 512, 3110, 281, 1159, 512, 3110, 322, 12778, 13, 50976], "temperature": 0.0, "avg_logprob": -0.18918418884277344, "compression_ratio": 1.622340425531915, "no_speech_prob": 0.0012769929599016905}, {"id": 56, "seek": 31136, "start": 323.6, "end": 330.56, "text": " OK? So making yourself a coffee is like an operational CPU such as a new text lock or a lock.", "tokens": [50976, 2264, 30, 407, 1455, 1803, 257, 4982, 307, 411, 364, 16607, 13199, 1270, 382, 257, 777, 2487, 4017, 420, 257, 4017, 13, 51324], "temperature": 0.0, "avg_logprob": -0.18918418884277344, "compression_ratio": 1.622340425531915, "no_speech_prob": 0.0012769929599016905}, {"id": 57, "seek": 31136, "start": 330.56, "end": 333.24, "text": " It is taking 25 seconds.", "tokens": [51324, 467, 307, 1940, 3552, 3949, 13, 51458], "temperature": 0.0, "avg_logprob": -0.18918418884277344, "compression_ratio": 1.622340425531915, "no_speech_prob": 0.0012769929599016905}, {"id": 58, "seek": 31136, "start": 333.24, "end": 336.52000000000004, "text": " OK? Making yourself a coffee takes 25 seconds.", "tokens": [51458, 2264, 30, 14595, 1803, 257, 4982, 2516, 3552, 3949, 13, 51622], "temperature": 0.0, "avg_logprob": -0.18918418884277344, "compression_ratio": 1.622340425531915, "no_speech_prob": 0.0012769929599016905}, {"id": 59, "seek": 33652, "start": 336.56, "end": 343.96, "text": " Looking at a Netflix episode will be something like 40, 50, an hour-ish,", "tokens": [50366, 11053, 412, 257, 12778, 3500, 486, 312, 746, 411, 3356, 11, 2625, 11, 364, 1773, 12, 742, 11, 50736], "temperature": 0.0, "avg_logprob": -0.14870886369185013, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.008432712405920029}, {"id": 60, "seek": 33652, "start": 343.96, "end": 346.76, "text": " will last for an hour approximately.", "tokens": [50736, 486, 1036, 337, 364, 1773, 10447, 13, 50876], "temperature": 0.0, "avg_logprob": -0.14870886369185013, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.008432712405920029}, {"id": 61, "seek": 33652, "start": 346.76, "end": 351.96, "text": " That is the world in which a CPU lives.", "tokens": [50876, 663, 307, 264, 1002, 294, 597, 257, 13199, 2909, 13, 51136], "temperature": 0.0, "avg_logprob": -0.14870886369185013, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.008432712405920029}, {"id": 62, "seek": 33652, "start": 351.96, "end": 355.2, "text": " Now, if you compare that to the world of I.O.,", "tokens": [51136, 823, 11, 498, 291, 6794, 300, 281, 264, 1002, 295, 286, 13, 46, 7933, 51298], "temperature": 0.0, "avg_logprob": -0.14870886369185013, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.008432712405920029}, {"id": 63, "seek": 33652, "start": 355.2, "end": 359.47999999999996, "text": " it is the equivalent of taking a five-week vacation.", "tokens": [51298, 309, 307, 264, 10344, 295, 1940, 257, 1732, 12, 23188, 12830, 13, 51512], "temperature": 0.0, "avg_logprob": -0.14870886369185013, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.008432712405920029}, {"id": 64, "seek": 33652, "start": 359.47999999999996, "end": 365.24, "text": " Or it is the equivalent of studying for five years at university.", "tokens": [51512, 1610, 309, 307, 264, 10344, 295, 7601, 337, 1732, 924, 412, 5454, 13, 51800], "temperature": 0.0, "avg_logprob": -0.14870886369185013, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.008432712405920029}, {"id": 65, "seek": 36524, "start": 365.28000000000003, "end": 373.72, "text": " So the danger zone is when you take your CPU and you bring it to with you on vacation.", "tokens": [50366, 407, 264, 4330, 6668, 307, 562, 291, 747, 428, 13199, 293, 291, 1565, 309, 281, 365, 291, 322, 12830, 13, 50788], "temperature": 0.0, "avg_logprob": -0.1177805412647336, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.011251857504248619}, {"id": 66, "seek": 36524, "start": 373.72, "end": 377.52, "text": " So basically, the danger is when you block your main thread", "tokens": [50788, 407, 1936, 11, 264, 4330, 307, 562, 291, 3461, 428, 2135, 7207, 50978], "temperature": 0.0, "avg_logprob": -0.1177805412647336, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.011251857504248619}, {"id": 67, "seek": 36524, "start": 377.52, "end": 381.12, "text": " because you're performing a CPU-intensive operation", "tokens": [50978, 570, 291, 434, 10205, 257, 13199, 12, 686, 2953, 6916, 51158], "temperature": 0.0, "avg_logprob": -0.1177805412647336, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.011251857504248619}, {"id": 68, "seek": 36524, "start": 381.12, "end": 389.04, "text": " while Node.js was designed with the idea that you would drink coffee and not go on vacation.", "tokens": [51158, 1339, 38640, 13, 25530, 390, 4761, 365, 264, 1558, 300, 291, 576, 2822, 4982, 293, 406, 352, 322, 12830, 13, 51554], "temperature": 0.0, "avg_logprob": -0.1177805412647336, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.011251857504248619}, {"id": 69, "seek": 36524, "start": 389.04, "end": 393.92, "text": " Keep those figures in mind for the rest of the talk.", "tokens": [51554, 5527, 729, 9624, 294, 1575, 337, 264, 1472, 295, 264, 751, 13, 51798], "temperature": 0.0, "avg_logprob": -0.1177805412647336, "compression_ratio": 1.6074766355140186, "no_speech_prob": 0.011251857504248619}, {"id": 70, "seek": 39392, "start": 393.92, "end": 395.72, "text": " What the heck is the event loop?", "tokens": [50364, 708, 264, 12872, 307, 264, 2280, 6367, 30, 50454], "temperature": 0.0, "avg_logprob": -0.1852652593092485, "compression_ratio": 1.4265402843601895, "no_speech_prob": 0.00867202877998352}, {"id": 71, "seek": 39392, "start": 395.72, "end": 400.28000000000003, "text": " Who is familiar with this representation?", "tokens": [50454, 2102, 307, 4963, 365, 341, 10290, 30, 50682], "temperature": 0.0, "avg_logprob": -0.1852652593092485, "compression_ratio": 1.4265402843601895, "no_speech_prob": 0.00867202877998352}, {"id": 72, "seek": 39392, "start": 400.28000000000003, "end": 402.40000000000003, "text": " Good.", "tokens": [50682, 2205, 13, 50788], "temperature": 0.0, "avg_logprob": -0.1852652593092485, "compression_ratio": 1.4265402843601895, "no_speech_prob": 0.00867202877998352}, {"id": 73, "seek": 39392, "start": 402.40000000000003, "end": 407.88, "text": " Philip Provertz gave an excellent talk about this 10 years ago.", "tokens": [50788, 21144, 1705, 3281, 89, 2729, 364, 7103, 751, 466, 341, 1266, 924, 2057, 13, 51062], "temperature": 0.0, "avg_logprob": -0.1852652593092485, "compression_ratio": 1.4265402843601895, "no_speech_prob": 0.00867202877998352}, {"id": 74, "seek": 39392, "start": 407.88, "end": 411.6, "text": " And you can play with that tool on the Internet.", "tokens": [51062, 400, 291, 393, 862, 365, 300, 2290, 322, 264, 7703, 13, 51248], "temperature": 0.0, "avg_logprob": -0.1852652593092485, "compression_ratio": 1.4265402843601895, "no_speech_prob": 0.00867202877998352}, {"id": 75, "seek": 39392, "start": 411.6, "end": 415.8, "text": " It's getting a bit old, but it's still really, really good.", "tokens": [51248, 467, 311, 1242, 257, 857, 1331, 11, 457, 309, 311, 920, 534, 11, 534, 665, 13, 51458], "temperature": 0.0, "avg_logprob": -0.1852652593092485, "compression_ratio": 1.4265402843601895, "no_speech_prob": 0.00867202877998352}, {"id": 76, "seek": 39392, "start": 415.8, "end": 419.96000000000004, "text": " OK? So let's have a quick look at what it does.", "tokens": [51458, 2264, 30, 407, 718, 311, 362, 257, 1702, 574, 412, 437, 309, 775, 13, 51666], "temperature": 0.0, "avg_logprob": -0.1852652593092485, "compression_ratio": 1.4265402843601895, "no_speech_prob": 0.00867202877998352}, {"id": 77, "seek": 41996, "start": 419.96, "end": 425.56, "text": " So here what you see is that you have code that you wrote.", "tokens": [50364, 407, 510, 437, 291, 536, 307, 300, 291, 362, 3089, 300, 291, 4114, 13, 50644], "temperature": 0.0, "avg_logprob": -0.17139981717479472, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003320534247905016}, {"id": 78, "seek": 41996, "start": 425.56, "end": 431.0, "text": " OK? And we'll see what happens when JavaScript executes that code.", "tokens": [50644, 2264, 30, 400, 321, 603, 536, 437, 2314, 562, 15778, 4454, 1819, 300, 3089, 13, 50916], "temperature": 0.0, "avg_logprob": -0.17139981717479472, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003320534247905016}, {"id": 79, "seek": 41996, "start": 431.0, "end": 432.52, "text": " It's quite simple.", "tokens": [50916, 467, 311, 1596, 2199, 13, 50992], "temperature": 0.0, "avg_logprob": -0.17139981717479472, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003320534247905016}, {"id": 80, "seek": 41996, "start": 432.52, "end": 436.35999999999996, "text": " We have a set timeout with a five-second delay.", "tokens": [50992, 492, 362, 257, 992, 565, 346, 365, 257, 1732, 12, 27375, 8577, 13, 51184], "temperature": 0.0, "avg_logprob": -0.17139981717479472, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003320534247905016}, {"id": 81, "seek": 41996, "start": 436.35999999999996, "end": 438.52, "text": " And we have a console.log.", "tokens": [51184, 400, 321, 362, 257, 11076, 13, 4987, 13, 51292], "temperature": 0.0, "avg_logprob": -0.17139981717479472, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003320534247905016}, {"id": 82, "seek": 41996, "start": 438.52, "end": 442.67999999999995, "text": " So obviously, we all know that welcome for them will be first,", "tokens": [51292, 407, 2745, 11, 321, 439, 458, 300, 2928, 337, 552, 486, 312, 700, 11, 51500], "temperature": 0.0, "avg_logprob": -0.17139981717479472, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003320534247905016}, {"id": 83, "seek": 41996, "start": 442.67999999999995, "end": 447.2, "text": " printed to the console, and that after close to five seconds,", "tokens": [51500, 13567, 281, 264, 11076, 11, 293, 300, 934, 1998, 281, 1732, 3949, 11, 51726], "temperature": 0.0, "avg_logprob": -0.17139981717479472, "compression_ratio": 1.5925925925925926, "no_speech_prob": 0.003320534247905016}, {"id": 84, "seek": 44720, "start": 447.2, "end": 451.88, "text": " because that is not a guarantee, we'll see powered by BEJS.", "tokens": [50364, 570, 300, 307, 406, 257, 10815, 11, 321, 603, 536, 17786, 538, 13513, 41, 50, 13, 50598], "temperature": 0.0, "avg_logprob": -0.15658337215207657, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.005885793827474117}, {"id": 85, "seek": 44720, "start": 451.88, "end": 458.56, "text": " OK? Let's play that video if it works, and the video can't be loaded.", "tokens": [50598, 2264, 30, 961, 311, 862, 300, 960, 498, 309, 1985, 11, 293, 264, 960, 393, 380, 312, 13210, 13, 50932], "temperature": 0.0, "avg_logprob": -0.15658337215207657, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.005885793827474117}, {"id": 86, "seek": 44720, "start": 458.56, "end": 459.84, "text": " It's not a problem. OK?", "tokens": [50932, 467, 311, 406, 257, 1154, 13, 2264, 30, 50996], "temperature": 0.0, "avg_logprob": -0.15658337215207657, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.005885793827474117}, {"id": 87, "seek": 44720, "start": 459.84, "end": 466.44, "text": " So basically what the video shows is it takes that block, puts it on the stack.", "tokens": [50996, 407, 1936, 437, 264, 960, 3110, 307, 309, 2516, 300, 3461, 11, 8137, 309, 322, 264, 8630, 13, 51326], "temperature": 0.0, "avg_logprob": -0.15658337215207657, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.005885793827474117}, {"id": 88, "seek": 44720, "start": 466.44, "end": 469.03999999999996, "text": " When it's executed, because we have a set timeout,", "tokens": [51326, 1133, 309, 311, 17577, 11, 570, 321, 362, 257, 992, 565, 346, 11, 51456], "temperature": 0.0, "avg_logprob": -0.15658337215207657, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.005885793827474117}, {"id": 89, "seek": 44720, "start": 469.03999999999996, "end": 476.84, "text": " it will put the timer and play the five-second timer in the web API part.", "tokens": [51456, 309, 486, 829, 264, 19247, 293, 862, 264, 1732, 12, 27375, 19247, 294, 264, 3670, 9362, 644, 13, 51846], "temperature": 0.0, "avg_logprob": -0.15658337215207657, "compression_ratio": 1.5565217391304347, "no_speech_prob": 0.005885793827474117}, {"id": 90, "seek": 47684, "start": 476.88, "end": 483.96, "text": " After, during that time, console.log for each one after the other.", "tokens": [50366, 2381, 11, 1830, 300, 565, 11, 11076, 13, 4987, 337, 1184, 472, 934, 264, 661, 13, 50720], "temperature": 0.0, "avg_logprob": -0.2323183218638102, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.0012237747432664037}, {"id": 91, "seek": 47684, "start": 483.96, "end": 487.88, "text": " And you can also picture, have a mental model around the fact that in the end,", "tokens": [50720, 400, 291, 393, 611, 3036, 11, 362, 257, 4973, 2316, 926, 264, 1186, 300, 294, 264, 917, 11, 50916], "temperature": 0.0, "avg_logprob": -0.2323183218638102, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.0012237747432664037}, {"id": 92, "seek": 47684, "start": 487.88, "end": 493.96, "text": " there might be even several loops. OK?", "tokens": [50916, 456, 1062, 312, 754, 2940, 16121, 13, 2264, 30, 51220], "temperature": 0.0, "avg_logprob": -0.2323183218638102, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.0012237747432664037}, {"id": 93, "seek": 47684, "start": 493.96, "end": 499.03999999999996, "text": " Multiple phases, timer, spending callback, ideally prepared, pulling,", "tokens": [51220, 40056, 18764, 11, 19247, 11, 6434, 818, 3207, 11, 22915, 4927, 11, 8407, 11, 51474], "temperature": 0.0, "avg_logprob": -0.2323183218638102, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.0012237747432664037}, {"id": 94, "seek": 47684, "start": 499.03999999999996, "end": 502.12, "text": " where we all know JS is going to ask the OS,", "tokens": [51474, 689, 321, 439, 458, 33063, 307, 516, 281, 1029, 264, 12731, 11, 51628], "temperature": 0.0, "avg_logprob": -0.2323183218638102, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.0012237747432664037}, {"id": 95, "seek": 47684, "start": 502.12, "end": 505.12, "text": " hey, do you have any connection, network connection for me?", "tokens": [51628, 4177, 11, 360, 291, 362, 604, 4984, 11, 3209, 4984, 337, 385, 30, 51778], "temperature": 0.0, "avg_logprob": -0.2323183218638102, "compression_ratio": 1.5341880341880343, "no_speech_prob": 0.0012237747432664037}, {"id": 96, "seek": 50512, "start": 505.12, "end": 511.6, "text": " Is any file, has any file being read? OK?", "tokens": [50364, 1119, 604, 3991, 11, 575, 604, 3991, 885, 1401, 30, 2264, 30, 50688], "temperature": 0.0, "avg_logprob": -0.2084925046531103, "compression_ratio": 1.5821596244131455, "no_speech_prob": 0.0015625774394720793}, {"id": 97, "seek": 50512, "start": 511.6, "end": 517.0, "text": " And when you understand the different phases, you can answer questions such as this one,", "tokens": [50688, 400, 562, 291, 1223, 264, 819, 18764, 11, 291, 393, 1867, 1651, 1270, 382, 341, 472, 11, 50958], "temperature": 0.0, "avg_logprob": -0.2084925046531103, "compression_ratio": 1.5821596244131455, "no_speech_prob": 0.0015625774394720793}, {"id": 98, "seek": 50512, "start": 517.0, "end": 522.8, "text": " promise.resolve.then console.log promise versus process.nextStick,", "tokens": [50958, 6228, 13, 495, 37361, 13, 19096, 11076, 13, 4987, 6228, 5717, 1399, 13, 716, 734, 4520, 618, 11, 51248], "temperature": 0.0, "avg_logprob": -0.2084925046531103, "compression_ratio": 1.5821596244131455, "no_speech_prob": 0.0015625774394720793}, {"id": 99, "seek": 50512, "start": 522.8, "end": 526.36, "text": " console.log nextStick, which one will be executed first?", "tokens": [51248, 11076, 13, 4987, 958, 4520, 618, 11, 597, 472, 486, 312, 17577, 700, 30, 51426], "temperature": 0.0, "avg_logprob": -0.2084925046531103, "compression_ratio": 1.5821596244131455, "no_speech_prob": 0.0015625774394720793}, {"id": 100, "seek": 50512, "start": 526.36, "end": 531.64, "text": " Well, it depends on where it will be picked up from at the level of the even loop,", "tokens": [51426, 1042, 11, 309, 5946, 322, 689, 309, 486, 312, 6183, 493, 490, 412, 264, 1496, 295, 264, 754, 6367, 11, 51690], "temperature": 0.0, "avg_logprob": -0.2084925046531103, "compression_ratio": 1.5821596244131455, "no_speech_prob": 0.0015625774394720793}, {"id": 101, "seek": 53164, "start": 531.64, "end": 535.3199999999999, "text": " what phase of the even loop is involved.", "tokens": [50364, 437, 5574, 295, 264, 754, 6367, 307, 3288, 13, 50548], "temperature": 0.0, "avg_logprob": -0.15796525137765066, "compression_ratio": 1.5978260869565217, "no_speech_prob": 0.004185380879789591}, {"id": 102, "seek": 53164, "start": 535.3199999999999, "end": 540.4, "text": " Node.js architecture is inherently multi-threaded.", "tokens": [50548, 38640, 13, 25530, 9482, 307, 27993, 4825, 12, 392, 2538, 292, 13, 50802], "temperature": 0.0, "avg_logprob": -0.15796525137765066, "compression_ratio": 1.5978260869565217, "no_speech_prob": 0.004185380879789591}, {"id": 103, "seek": 53164, "start": 540.4, "end": 544.16, "text": " OK? So we all heard that JavaScript is single-threaded.", "tokens": [50802, 2264, 30, 407, 321, 439, 2198, 300, 15778, 307, 2167, 12, 392, 2538, 292, 13, 50990], "temperature": 0.0, "avg_logprob": -0.15796525137765066, "compression_ratio": 1.5978260869565217, "no_speech_prob": 0.004185380879789591}, {"id": 104, "seek": 53164, "start": 544.16, "end": 551.3199999999999, "text": " What we mean by that is we have one single thread to execute your JavaScript code.", "tokens": [50990, 708, 321, 914, 538, 300, 307, 321, 362, 472, 2167, 7207, 281, 14483, 428, 15778, 3089, 13, 51348], "temperature": 0.0, "avg_logprob": -0.15796525137765066, "compression_ratio": 1.5978260869565217, "no_speech_prob": 0.004185380879789591}, {"id": 105, "seek": 53164, "start": 551.3199999999999, "end": 556.96, "text": " But it doesn't mean that Node.js on its own is single-threaded.", "tokens": [51348, 583, 309, 1177, 380, 914, 300, 38640, 13, 25530, 322, 1080, 1065, 307, 2167, 12, 392, 2538, 292, 13, 51630], "temperature": 0.0, "avg_logprob": -0.15796525137765066, "compression_ratio": 1.5978260869565217, "no_speech_prob": 0.004185380879789591}, {"id": 106, "seek": 55696, "start": 556.96, "end": 562.08, "text": " OK, how many threads or how many processes do we have in a Node.js application typically?", "tokens": [50364, 2264, 11, 577, 867, 19314, 420, 577, 867, 7555, 360, 321, 362, 294, 257, 38640, 13, 25530, 3861, 5850, 30, 50620], "temperature": 0.0, "avg_logprob": -0.21366170995375688, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.004003032110631466}, {"id": 107, "seek": 55696, "start": 562.08, "end": 570.0, "text": " One, two, three, three, anyone?", "tokens": [50620, 1485, 11, 732, 11, 1045, 11, 1045, 11, 2878, 30, 51016], "temperature": 0.0, "avg_logprob": -0.21366170995375688, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.004003032110631466}, {"id": 108, "seek": 55696, "start": 570.0, "end": 575.2800000000001, "text": " Four, what about five-ish?", "tokens": [51016, 7451, 11, 437, 466, 1732, 12, 742, 30, 51280], "temperature": 0.0, "avg_logprob": -0.21366170995375688, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.004003032110631466}, {"id": 109, "seek": 55696, "start": 575.2800000000001, "end": 580.2800000000001, "text": " Five-ish is a good number. OK, five-ish is a good number.", "tokens": [51280, 9436, 12, 742, 307, 257, 665, 1230, 13, 2264, 11, 1732, 12, 742, 307, 257, 665, 1230, 13, 51530], "temperature": 0.0, "avg_logprob": -0.21366170995375688, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.004003032110631466}, {"id": 110, "seek": 55696, "start": 580.2800000000001, "end": 585.76, "text": " Well, you have a thread for the main even loop, for the main stack.", "tokens": [51530, 1042, 11, 291, 362, 257, 7207, 337, 264, 2135, 754, 6367, 11, 337, 264, 2135, 8630, 13, 51804], "temperature": 0.0, "avg_logprob": -0.21366170995375688, "compression_ratio": 1.6023391812865497, "no_speech_prob": 0.004003032110631466}, {"id": 111, "seek": 58576, "start": 585.76, "end": 590.2, "text": " You can have threads or processes for the garbage collection.", "tokens": [50364, 509, 393, 362, 19314, 420, 7555, 337, 264, 14150, 5765, 13, 50586], "temperature": 0.0, "avg_logprob": -0.18689361175933442, "compression_ratio": 1.528497409326425, "no_speech_prob": 0.002146713202819228}, {"id": 112, "seek": 58576, "start": 590.2, "end": 600.16, "text": " You will have libv, and then libv also takes care of handles a pool of four worker threads.", "tokens": [50586, 509, 486, 362, 22854, 85, 11, 293, 550, 22854, 85, 611, 2516, 1127, 295, 18722, 257, 7005, 295, 1451, 11346, 19314, 13, 51084], "temperature": 0.0, "avg_logprob": -0.18689361175933442, "compression_ratio": 1.528497409326425, "no_speech_prob": 0.002146713202819228}, {"id": 113, "seek": 58576, "start": 600.16, "end": 611.8, "text": " OK, so you have at least five-ish processes or threads when you run your Node.js application.", "tokens": [51084, 2264, 11, 370, 291, 362, 412, 1935, 1732, 12, 742, 7555, 420, 19314, 562, 291, 1190, 428, 38640, 13, 25530, 3861, 13, 51666], "temperature": 0.0, "avg_logprob": -0.18689361175933442, "compression_ratio": 1.528497409326425, "no_speech_prob": 0.002146713202819228}, {"id": 114, "seek": 58576, "start": 611.8, "end": 614.88, "text": " All right, that is a bit too complex for today.", "tokens": [51666, 1057, 558, 11, 300, 307, 257, 857, 886, 3997, 337, 965, 13, 51820], "temperature": 0.0, "avg_logprob": -0.18689361175933442, "compression_ratio": 1.528497409326425, "no_speech_prob": 0.002146713202819228}, {"id": 115, "seek": 61488, "start": 615.0, "end": 624.8, "text": " OK, and so we're going to simplify, and I've grouped different, I would say, parts of that architecture into blocks or squares of the same color.", "tokens": [50370, 2264, 11, 293, 370, 321, 434, 516, 281, 20460, 11, 293, 286, 600, 41877, 819, 11, 286, 576, 584, 11, 3166, 295, 300, 9482, 666, 8474, 420, 19368, 295, 264, 912, 2017, 13, 50860], "temperature": 0.0, "avg_logprob": -0.15748311015008723, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.005135948304086924}, {"id": 116, "seek": 61488, "start": 624.8, "end": 628.48, "text": " So we're going to look at the orange square.", "tokens": [50860, 407, 321, 434, 516, 281, 574, 412, 264, 7671, 3732, 13, 51044], "temperature": 0.0, "avg_logprob": -0.15748311015008723, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.005135948304086924}, {"id": 117, "seek": 61488, "start": 628.48, "end": 635.52, "text": " It's going to be the main stack together with the run on the same thread as the even loop in red.", "tokens": [51044, 467, 311, 516, 281, 312, 264, 2135, 8630, 1214, 365, 264, 1190, 322, 264, 912, 7207, 382, 264, 754, 6367, 294, 2182, 13, 51396], "temperature": 0.0, "avg_logprob": -0.15748311015008723, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.005135948304086924}, {"id": 118, "seek": 61488, "start": 635.52, "end": 637.76, "text": " Then we're going to have one single queue.", "tokens": [51396, 1396, 321, 434, 516, 281, 362, 472, 2167, 18639, 13, 51508], "temperature": 0.0, "avg_logprob": -0.15748311015008723, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.005135948304086924}, {"id": 119, "seek": 61488, "start": 637.76, "end": 641.28, "text": " OK, we're not going to distinguish between micro task and task.", "tokens": [51508, 2264, 11, 321, 434, 406, 516, 281, 20206, 1296, 4532, 5633, 293, 5633, 13, 51684], "temperature": 0.0, "avg_logprob": -0.15748311015008723, "compression_ratio": 1.6952789699570816, "no_speech_prob": 0.005135948304086924}, {"id": 120, "seek": 64128, "start": 641.28, "end": 648.3199999999999, "text": " And then everything else is going to be called Node.js API and will be assembled together.", "tokens": [50364, 400, 550, 1203, 1646, 307, 516, 281, 312, 1219, 38640, 13, 25530, 9362, 293, 486, 312, 24204, 1214, 13, 50716], "temperature": 0.0, "avg_logprob": -0.18127824258113254, "compression_ratio": 1.4606741573033708, "no_speech_prob": 0.00045811859308741987}, {"id": 121, "seek": 64128, "start": 648.3199999999999, "end": 652.6, "text": " So that is what we are going to work with today.", "tokens": [50716, 407, 300, 307, 437, 321, 366, 516, 281, 589, 365, 965, 13, 50930], "temperature": 0.0, "avg_logprob": -0.18127824258113254, "compression_ratio": 1.4606741573033708, "no_speech_prob": 0.00045811859308741987}, {"id": 122, "seek": 64128, "start": 652.6, "end": 656.76, "text": " OK, good.", "tokens": [50930, 2264, 11, 665, 13, 51138], "temperature": 0.0, "avg_logprob": -0.18127824258113254, "compression_ratio": 1.4606741573033708, "no_speech_prob": 0.00045811859308741987}, {"id": 123, "seek": 64128, "start": 656.76, "end": 661.28, "text": " So prefer asynchronous code over synchronous code.", "tokens": [51138, 407, 4382, 49174, 3089, 670, 44743, 3089, 13, 51364], "temperature": 0.0, "avg_logprob": -0.18127824258113254, "compression_ratio": 1.4606741573033708, "no_speech_prob": 0.00045811859308741987}, {"id": 124, "seek": 64128, "start": 661.28, "end": 666.0799999999999, "text": " Let's first look at what it means when we use core modules,", "tokens": [51364, 961, 311, 700, 574, 412, 437, 309, 1355, 562, 321, 764, 4965, 16679, 11, 51604], "temperature": 0.0, "avg_logprob": -0.18127824258113254, "compression_ratio": 1.4606741573033708, "no_speech_prob": 0.00045811859308741987}, {"id": 125, "seek": 66608, "start": 666.08, "end": 674.2, "text": " and then we're going to look at what it means when we use MPM modules that we can download from the internet.", "tokens": [50364, 293, 550, 321, 434, 516, 281, 574, 412, 437, 309, 1355, 562, 321, 764, 14146, 44, 16679, 300, 321, 393, 5484, 490, 264, 4705, 13, 50770], "temperature": 0.0, "avg_logprob": -0.15122973498176126, "compression_ratio": 1.5729166666666667, "no_speech_prob": 0.0015211364952847362}, {"id": 126, "seek": 66608, "start": 674.2, "end": 678.76, "text": " OK, so FS module reading a file.", "tokens": [50770, 2264, 11, 370, 41138, 10088, 3760, 257, 3991, 13, 50998], "temperature": 0.0, "avg_logprob": -0.15122973498176126, "compression_ratio": 1.5729166666666667, "no_speech_prob": 0.0015211364952847362}, {"id": 127, "seek": 66608, "start": 678.76, "end": 686.1600000000001, "text": " When you use the asynchronous API, read file with a callback, it is non-blocking.", "tokens": [50998, 1133, 291, 764, 264, 49174, 9362, 11, 1401, 3991, 365, 257, 818, 3207, 11, 309, 307, 2107, 12, 28830, 278, 13, 51368], "temperature": 0.0, "avg_logprob": -0.15122973498176126, "compression_ratio": 1.5729166666666667, "no_speech_prob": 0.0015211364952847362}, {"id": 128, "seek": 66608, "start": 686.1600000000001, "end": 691.08, "text": " When you use the read file sync, it will be blocking.", "tokens": [51368, 1133, 291, 764, 264, 1401, 3991, 20271, 11, 309, 486, 312, 17776, 13, 51614], "temperature": 0.0, "avg_logprob": -0.15122973498176126, "compression_ratio": 1.5729166666666667, "no_speech_prob": 0.0015211364952847362}, {"id": 129, "seek": 66608, "start": 691.08, "end": 692.6400000000001, "text": " What is the difference?", "tokens": [51614, 708, 307, 264, 2649, 30, 51692], "temperature": 0.0, "avg_logprob": -0.15122973498176126, "compression_ratio": 1.5729166666666667, "no_speech_prob": 0.0015211364952847362}, {"id": 130, "seek": 69264, "start": 692.64, "end": 700.16, "text": " Well, the difference is that in one case, the sync version of it will run on the main thread,", "tokens": [50364, 1042, 11, 264, 2649, 307, 300, 294, 472, 1389, 11, 264, 20271, 3037, 295, 309, 486, 1190, 322, 264, 2135, 7207, 11, 50740], "temperature": 0.0, "avg_logprob": -0.13245625929398971, "compression_ratio": 1.9023255813953488, "no_speech_prob": 0.001223995117470622}, {"id": 131, "seek": 69264, "start": 700.16, "end": 708.16, "text": " while the async version of it will be run on one of the worker thread, of one of the worker of the thread pool.", "tokens": [50740, 1339, 264, 382, 34015, 3037, 295, 309, 486, 312, 1190, 322, 472, 295, 264, 11346, 7207, 11, 295, 472, 295, 264, 11346, 295, 264, 7207, 7005, 13, 51140], "temperature": 0.0, "avg_logprob": -0.13245625929398971, "compression_ratio": 1.9023255813953488, "no_speech_prob": 0.001223995117470622}, {"id": 132, "seek": 69264, "start": 708.16, "end": 713.1999999999999, "text": " It doesn't mean that at the OS level, reading the file will be non-blocking,", "tokens": [51140, 467, 1177, 380, 914, 300, 412, 264, 12731, 1496, 11, 3760, 264, 3991, 486, 312, 2107, 12, 28830, 278, 11, 51392], "temperature": 0.0, "avg_logprob": -0.13245625929398971, "compression_ratio": 1.9023255813953488, "no_speech_prob": 0.001223995117470622}, {"id": 133, "seek": 69264, "start": 713.1999999999999, "end": 721.76, "text": " but from the perspective of Node.js, it is non-blocking because it doesn't block the even loop of the main or the main thread.", "tokens": [51392, 457, 490, 264, 4585, 295, 38640, 13, 25530, 11, 309, 307, 2107, 12, 28830, 278, 570, 309, 1177, 380, 3461, 264, 754, 6367, 295, 264, 2135, 420, 264, 2135, 7207, 13, 51820], "temperature": 0.0, "avg_logprob": -0.13245625929398971, "compression_ratio": 1.9023255813953488, "no_speech_prob": 0.001223995117470622}, {"id": 134, "seek": 72176, "start": 721.76, "end": 727.52, "text": " So the sentence, prefer a synchronous API over synchronous API,", "tokens": [50364, 407, 264, 8174, 11, 4382, 257, 44743, 9362, 670, 44743, 9362, 11, 50652], "temperature": 0.0, "avg_logprob": -0.16934199631214142, "compression_ratio": 1.4636871508379887, "no_speech_prob": 0.0004723199817817658}, {"id": 135, "seek": 72176, "start": 727.52, "end": 732.0, "text": " is absolutely relevant and true in the context of a core module,", "tokens": [50652, 307, 3122, 7340, 293, 2074, 294, 264, 4319, 295, 257, 4965, 10088, 11, 50876], "temperature": 0.0, "avg_logprob": -0.16934199631214142, "compression_ratio": 1.4636871508379887, "no_speech_prob": 0.0004723199817817658}, {"id": 136, "seek": 72176, "start": 732.0, "end": 740.3199999999999, "text": " because it will run the code of the async version into a worker thread.", "tokens": [50876, 570, 309, 486, 1190, 264, 3089, 295, 264, 382, 34015, 3037, 666, 257, 11346, 7207, 13, 51292], "temperature": 0.0, "avg_logprob": -0.16934199631214142, "compression_ratio": 1.4636871508379887, "no_speech_prob": 0.0004723199817817658}, {"id": 137, "seek": 72176, "start": 740.3199999999999, "end": 745.8, "text": " But what about a pure JavaScript library? How does that work?", "tokens": [51292, 583, 437, 466, 257, 6075, 15778, 6405, 30, 1012, 775, 300, 589, 30, 51566], "temperature": 0.0, "avg_logprob": -0.16934199631214142, "compression_ratio": 1.4636871508379887, "no_speech_prob": 0.0004723199817817658}, {"id": 138, "seek": 74580, "start": 745.8399999999999, "end": 751.56, "text": " To answer this question, we are going to use the example of Bcrypt.", "tokens": [50366, 1407, 1867, 341, 1168, 11, 321, 366, 516, 281, 764, 264, 1365, 295, 363, 46555, 662, 13, 50652], "temperature": 0.0, "avg_logprob": -0.14357755698409735, "compression_ratio": 1.65, "no_speech_prob": 0.007932364009320736}, {"id": 139, "seek": 74580, "start": 751.56, "end": 758.04, "text": " Bcrypt is a way to create a hash to securely store its secrets.", "tokens": [50652, 363, 46555, 662, 307, 257, 636, 281, 1884, 257, 22019, 281, 38348, 3531, 1080, 14093, 13, 50976], "temperature": 0.0, "avg_logprob": -0.14357755698409735, "compression_ratio": 1.65, "no_speech_prob": 0.007932364009320736}, {"id": 140, "seek": 74580, "start": 758.04, "end": 762.5999999999999, "text": " And it is interesting because that operation can be quite intensive in terms of CPU,", "tokens": [50976, 400, 309, 307, 1880, 570, 300, 6916, 393, 312, 1596, 18957, 294, 2115, 295, 13199, 11, 51204], "temperature": 0.0, "avg_logprob": -0.14357755698409735, "compression_ratio": 1.65, "no_speech_prob": 0.007932364009320736}, {"id": 141, "seek": 74580, "start": 762.5999999999999, "end": 769.4, "text": " depending on the number of cycles that you will perform or how secure you want that secret to be.", "tokens": [51204, 5413, 322, 264, 1230, 295, 17796, 300, 291, 486, 2042, 420, 577, 7144, 291, 528, 300, 4054, 281, 312, 13, 51544], "temperature": 0.0, "avg_logprob": -0.14357755698409735, "compression_ratio": 1.65, "no_speech_prob": 0.007932364009320736}, {"id": 142, "seek": 74580, "start": 769.4, "end": 774.3199999999999, "text": " If you go on NPM, you will see that there are multiple implementations of Bcrypt,", "tokens": [51544, 759, 291, 352, 322, 426, 18819, 11, 291, 486, 536, 300, 456, 366, 3866, 4445, 763, 295, 363, 46555, 662, 11, 51790], "temperature": 0.0, "avg_logprob": -0.14357755698409735, "compression_ratio": 1.65, "no_speech_prob": 0.007932364009320736}, {"id": 143, "seek": 77432, "start": 774.32, "end": 778.6, "text": " and there is one pure JavaScript implementation known as Bcrypt.js,", "tokens": [50364, 293, 456, 307, 472, 6075, 15778, 11420, 2570, 382, 363, 46555, 662, 13, 25530, 11, 50578], "temperature": 0.0, "avg_logprob": -0.17482469020745692, "compression_ratio": 1.969325153374233, "no_speech_prob": 0.005052969325333834}, {"id": 144, "seek": 77432, "start": 778.6, "end": 782.6400000000001, "text": " and there is one C++ implementation which is known as Bcrypt.", "tokens": [50578, 293, 456, 307, 472, 383, 25472, 11420, 597, 307, 2570, 382, 363, 46555, 662, 13, 50780], "temperature": 0.0, "avg_logprob": -0.17482469020745692, "compression_ratio": 1.969325153374233, "no_speech_prob": 0.005052969325333834}, {"id": 145, "seek": 77432, "start": 782.6400000000001, "end": 788.44, "text": " And so here it is interesting because both have sync and async APIs,", "tokens": [50780, 400, 370, 510, 309, 307, 1880, 570, 1293, 362, 20271, 293, 382, 34015, 21445, 11, 51070], "temperature": 0.0, "avg_logprob": -0.17482469020745692, "compression_ratio": 1.969325153374233, "no_speech_prob": 0.005052969325333834}, {"id": 146, "seek": 77432, "start": 788.44, "end": 793.2800000000001, "text": " and then we can compare what happens with the pure JavaScript implementation", "tokens": [51070, 293, 550, 321, 393, 6794, 437, 2314, 365, 264, 6075, 15778, 11420, 51312], "temperature": 0.0, "avg_logprob": -0.17482469020745692, "compression_ratio": 1.969325153374233, "no_speech_prob": 0.005052969325333834}, {"id": 147, "seek": 77432, "start": 793.2800000000001, "end": 798.1600000000001, "text": " and what happens with the C++ implementation.", "tokens": [51312, 293, 437, 2314, 365, 264, 383, 25472, 11420, 13, 51556], "temperature": 0.0, "avg_logprob": -0.17482469020745692, "compression_ratio": 1.969325153374233, "no_speech_prob": 0.005052969325333834}, {"id": 148, "seek": 79816, "start": 798.16, "end": 805.7199999999999, "text": " So let's look at the pure JavaScript implementation.", "tokens": [50364, 407, 718, 311, 574, 412, 264, 6075, 15778, 11420, 13, 50742], "temperature": 0.0, "avg_logprob": -0.2690807751246861, "compression_ratio": 1.3841463414634145, "no_speech_prob": 0.0012628238182514906}, {"id": 149, "seek": 79816, "start": 805.7199999999999, "end": 814.3199999999999, "text": " Hash sync versus hash, it is basically the same syntax as the FS module, right?", "tokens": [50742, 30775, 20271, 5717, 22019, 11, 309, 307, 1936, 264, 912, 28431, 382, 264, 41138, 10088, 11, 558, 30, 51172], "temperature": 0.0, "avg_logprob": -0.2690807751246861, "compression_ratio": 1.3841463414634145, "no_speech_prob": 0.0012628238182514906}, {"id": 150, "seek": 79816, "start": 814.3199999999999, "end": 822.0, "text": " And what we are going to do is to imagine that we have two servers that receive five requests.", "tokens": [51172, 400, 437, 321, 366, 516, 281, 360, 307, 281, 3811, 300, 321, 362, 732, 15909, 300, 4774, 1732, 12475, 13, 51556], "temperature": 0.0, "avg_logprob": -0.2690807751246861, "compression_ratio": 1.3841463414634145, "no_speech_prob": 0.0012628238182514906}, {"id": 151, "seek": 82200, "start": 822.0, "end": 831.28, "text": " And the five requests that they receive is you take your CPU on a five-year study at ULB to obtain a degree,", "tokens": [50364, 400, 264, 1732, 12475, 300, 436, 4774, 307, 291, 747, 428, 13199, 322, 257, 1732, 12, 5294, 2979, 412, 624, 43, 33, 281, 12701, 257, 4314, 11, 50828], "temperature": 0.0, "avg_logprob": -0.19278147346095034, "compression_ratio": 1.52, "no_speech_prob": 0.0031162721570581198}, {"id": 152, "seek": 82200, "start": 831.28, "end": 835.36, "text": " so you perform a super intensive operation,", "tokens": [50828, 370, 291, 2042, 257, 1687, 18957, 6916, 11, 51032], "temperature": 0.0, "avg_logprob": -0.19278147346095034, "compression_ratio": 1.52, "no_speech_prob": 0.0031162721570581198}, {"id": 153, "seek": 82200, "start": 835.36, "end": 842.56, "text": " and then four requests that are basically quite fast, you just watch the Netflix episode.", "tokens": [51032, 293, 550, 1451, 12475, 300, 366, 1936, 1596, 2370, 11, 291, 445, 1159, 264, 12778, 3500, 13, 51392], "temperature": 0.0, "avg_logprob": -0.19278147346095034, "compression_ratio": 1.52, "no_speech_prob": 0.0031162721570581198}, {"id": 154, "seek": 82200, "start": 842.56, "end": 848.72, "text": " Okay, and we are going to compare what happens in both cases.", "tokens": [51392, 1033, 11, 293, 321, 366, 516, 281, 6794, 437, 2314, 294, 1293, 3331, 13, 51700], "temperature": 0.0, "avg_logprob": -0.19278147346095034, "compression_ratio": 1.52, "no_speech_prob": 0.0031162721570581198}, {"id": 155, "seek": 84872, "start": 848.8000000000001, "end": 857.36, "text": " Now, the trick is that Bcrypt is a smart and well implemented library.", "tokens": [50368, 823, 11, 264, 4282, 307, 300, 363, 46555, 662, 307, 257, 4069, 293, 731, 12270, 6405, 13, 50796], "temperature": 0.0, "avg_logprob": -0.16421337127685548, "compression_ratio": 1.6593406593406594, "no_speech_prob": 0.003063544165343046}, {"id": 156, "seek": 84872, "start": 857.36, "end": 865.6, "text": " And the Bcrypt asynchronous API is implemented in a way that when it has to compute a large hash,", "tokens": [50796, 400, 264, 363, 46555, 662, 49174, 9362, 307, 12270, 294, 257, 636, 300, 562, 309, 575, 281, 14722, 257, 2416, 22019, 11, 51208], "temperature": 0.0, "avg_logprob": -0.16421337127685548, "compression_ratio": 1.6593406593406594, "no_speech_prob": 0.003063544165343046}, {"id": 157, "seek": 84872, "start": 865.6, "end": 871.4, "text": " when it has to compute a long operation, instead of doing all of it at once,", "tokens": [51208, 562, 309, 575, 281, 14722, 257, 938, 6916, 11, 2602, 295, 884, 439, 295, 309, 412, 1564, 11, 51498], "temperature": 0.0, "avg_logprob": -0.16421337127685548, "compression_ratio": 1.6593406593406594, "no_speech_prob": 0.003063544165343046}, {"id": 158, "seek": 84872, "start": 871.4, "end": 876.24, "text": " it will chunk, it will split it into two smaller chunks.", "tokens": [51498, 309, 486, 16635, 11, 309, 486, 7472, 309, 666, 732, 4356, 24004, 13, 51740], "temperature": 0.0, "avg_logprob": -0.16421337127685548, "compression_ratio": 1.6593406593406594, "no_speech_prob": 0.003063544165343046}, {"id": 159, "seek": 87624, "start": 876.24, "end": 879.76, "text": " Okay, good.", "tokens": [50364, 1033, 11, 665, 13, 50540], "temperature": 0.0, "avg_logprob": -0.18691730499267578, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.000635241623967886}, {"id": 160, "seek": 87624, "start": 879.76, "end": 884.8, "text": " So synchronous on the left is synchronous on the right,", "tokens": [50540, 407, 44743, 322, 264, 1411, 307, 44743, 322, 264, 558, 11, 50792], "temperature": 0.0, "avg_logprob": -0.18691730499267578, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.000635241623967886}, {"id": 161, "seek": 87624, "start": 884.8, "end": 891.84, "text": " and then we look at those five requests, the big one and the four faster one.", "tokens": [50792, 293, 550, 321, 574, 412, 729, 1732, 12475, 11, 264, 955, 472, 293, 264, 1451, 4663, 472, 13, 51144], "temperature": 0.0, "avg_logprob": -0.18691730499267578, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.000635241623967886}, {"id": 162, "seek": 87624, "start": 891.84, "end": 898.0, "text": " So at some point, the endpoint with the hash computation is called,", "tokens": [51144, 407, 412, 512, 935, 11, 264, 35795, 365, 264, 22019, 24903, 307, 1219, 11, 51452], "temperature": 0.0, "avg_logprob": -0.18691730499267578, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.000635241623967886}, {"id": 163, "seek": 87624, "start": 898.0, "end": 901.36, "text": " and we put on the stack the computation of the hash.", "tokens": [51452, 293, 321, 829, 322, 264, 8630, 264, 24903, 295, 264, 22019, 13, 51620], "temperature": 0.0, "avg_logprob": -0.18691730499267578, "compression_ratio": 1.6835443037974684, "no_speech_prob": 0.000635241623967886}, {"id": 164, "seek": 90136, "start": 901.44, "end": 908.08, "text": " Synchronous parts, we have that big square, blue square, that needs to be performed,", "tokens": [50368, 26155, 14613, 563, 3166, 11, 321, 362, 300, 955, 3732, 11, 3344, 3732, 11, 300, 2203, 281, 312, 10332, 11, 50700], "temperature": 0.0, "avg_logprob": -0.16977112913784914, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0006867988267913461}, {"id": 165, "seek": 90136, "start": 908.08, "end": 919.04, "text": " and you see that as the computation goes, then the green is going to fill in the blue square", "tokens": [50700, 293, 291, 536, 300, 382, 264, 24903, 1709, 11, 550, 264, 3092, 307, 516, 281, 2836, 294, 264, 3344, 3732, 51248], "temperature": 0.0, "avg_logprob": -0.16977112913784914, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0006867988267913461}, {"id": 166, "seek": 90136, "start": 919.04, "end": 921.04, "text": " to show progress.", "tokens": [51248, 281, 855, 4205, 13, 51348], "temperature": 0.0, "avg_logprob": -0.16977112913784914, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0006867988267913461}, {"id": 167, "seek": 90136, "start": 921.04, "end": 926.64, "text": " Okay, because on the asynchronous part, we have a chunk, that is a smaller square.", "tokens": [51348, 1033, 11, 570, 322, 264, 49174, 644, 11, 321, 362, 257, 16635, 11, 300, 307, 257, 4356, 3732, 13, 51628], "temperature": 0.0, "avg_logprob": -0.16977112913784914, "compression_ratio": 1.6547619047619047, "no_speech_prob": 0.0006867988267913461}, {"id": 168, "seek": 92664, "start": 927.28, "end": 934.16, "text": " At some point, the second request, the first red request, the first episode that you're watching,", "tokens": [50396, 1711, 512, 935, 11, 264, 1150, 5308, 11, 264, 700, 2182, 5308, 11, 264, 700, 3500, 300, 291, 434, 1976, 11, 50740], "temperature": 0.0, "avg_logprob": -0.23773211743458209, "compression_ratio": 1.6313131313131313, "no_speech_prob": 0.0009841390419751406}, {"id": 169, "seek": 92664, "start": 934.16, "end": 936.16, "text": " is reaching your server.", "tokens": [50740, 307, 9906, 428, 7154, 13, 50840], "temperature": 0.0, "avg_logprob": -0.23773211743458209, "compression_ratio": 1.6313131313131313, "no_speech_prob": 0.0009841390419751406}, {"id": 170, "seek": 92664, "start": 936.16, "end": 942.56, "text": " And what happens is it has a callback, it has operations to be performed, and it will be queued.", "tokens": [50840, 400, 437, 2314, 307, 309, 575, 257, 818, 3207, 11, 309, 575, 7705, 281, 312, 10332, 11, 293, 309, 486, 312, 631, 5827, 13, 51160], "temperature": 0.0, "avg_logprob": -0.23773211743458209, "compression_ratio": 1.6313131313131313, "no_speech_prob": 0.0009841390419751406}, {"id": 171, "seek": 92664, "start": 944.56, "end": 953.36, "text": " And notice that in the case of the asynchronous API, we're quite close to be done with the first chunk.", "tokens": [51260, 400, 3449, 300, 294, 264, 1389, 295, 264, 49174, 9362, 11, 321, 434, 1596, 1998, 281, 312, 1096, 365, 264, 700, 16635, 13, 51700], "temperature": 0.0, "avg_logprob": -0.23773211743458209, "compression_ratio": 1.6313131313131313, "no_speech_prob": 0.0009841390419751406}, {"id": 172, "seek": 95336, "start": 954.08, "end": 962.08, "text": " The first chunk is done, and then the script will schedule the second chunk to be run.", "tokens": [50400, 440, 700, 16635, 307, 1096, 11, 293, 550, 264, 5755, 486, 7567, 264, 1150, 16635, 281, 312, 1190, 13, 50800], "temperature": 0.0, "avg_logprob": -0.2638915479183197, "compression_ratio": 1.6580645161290322, "no_speech_prob": 0.003009210107848048}, {"id": 173, "seek": 95336, "start": 962.08, "end": 970.08, "text": " What it means is the stack will be empty, it will use Node APIs to schedule the next chunk,", "tokens": [50800, 708, 309, 1355, 307, 264, 8630, 486, 312, 6707, 11, 309, 486, 764, 38640, 21445, 281, 7567, 264, 958, 16635, 11, 51200], "temperature": 0.0, "avg_logprob": -0.2638915479183197, "compression_ratio": 1.6580645161290322, "no_speech_prob": 0.003009210107848048}, {"id": 174, "seek": 95336, "start": 970.08, "end": 976.08, "text": " and then the Node APIs will push another callback to compute the second chunk.", "tokens": [51200, 293, 550, 264, 38640, 21445, 486, 2944, 1071, 818, 3207, 281, 14722, 264, 1150, 16635, 13, 51500], "temperature": 0.0, "avg_logprob": -0.2638915479183197, "compression_ratio": 1.6580645161290322, "no_speech_prob": 0.003009210107848048}, {"id": 175, "seek": 97608, "start": 976.8000000000001, "end": 984.8000000000001, "text": " So we go on, and now you see that on the synchronous API, we continue to move forward with the computation,", "tokens": [50400, 407, 321, 352, 322, 11, 293, 586, 291, 536, 300, 322, 264, 44743, 9362, 11, 321, 2354, 281, 1286, 2128, 365, 264, 24903, 11, 50800], "temperature": 0.0, "avg_logprob": -0.19629923502604166, "compression_ratio": 1.7475728155339805, "no_speech_prob": 0.0014303545467555523}, {"id": 176, "seek": 97608, "start": 984.8000000000001, "end": 988.8000000000001, "text": " and on the asynchronous one, we are executing the callback one.", "tokens": [50800, 293, 322, 264, 49174, 472, 11, 321, 366, 32368, 264, 818, 3207, 472, 13, 51000], "temperature": 0.0, "avg_logprob": -0.19629923502604166, "compression_ratio": 1.7475728155339805, "no_speech_prob": 0.0014303545467555523}, {"id": 177, "seek": 97608, "start": 990.8000000000001, "end": 995.84, "text": " Continue, same here, at some point the stack is empty, because the stack is empty,", "tokens": [51100, 24472, 11, 912, 510, 11, 412, 512, 935, 264, 8630, 307, 6707, 11, 570, 264, 8630, 307, 6707, 11, 51352], "temperature": 0.0, "avg_logprob": -0.19629923502604166, "compression_ratio": 1.7475728155339805, "no_speech_prob": 0.0014303545467555523}, {"id": 178, "seek": 97608, "start": 995.84, "end": 1002.32, "text": " the event loop is picking the next task, put it on the stack, and we continue to perform the compilation.", "tokens": [51352, 264, 2280, 6367, 307, 8867, 264, 958, 5633, 11, 829, 309, 322, 264, 8630, 11, 293, 321, 2354, 281, 2042, 264, 40261, 13, 51676], "temperature": 0.0, "avg_logprob": -0.19629923502604166, "compression_ratio": 1.7475728155339805, "no_speech_prob": 0.0014303545467555523}, {"id": 179, "seek": 100232, "start": 1003.0400000000001, "end": 1011.0400000000001, "text": " As each chunk is done, or the callback is executed for one of those red requests,", "tokens": [50400, 1018, 1184, 16635, 307, 1096, 11, 420, 264, 818, 3207, 307, 17577, 337, 472, 295, 729, 2182, 12475, 11, 50800], "temperature": 0.0, "avg_logprob": -0.24847305367846007, "compression_ratio": 1.86, "no_speech_prob": 0.0023125167936086655}, {"id": 180, "seek": 100232, "start": 1011.0400000000001, "end": 1017.0400000000001, "text": " when the stack is empty, we pick up the next task in the queue, and we go on, and we go on, and we go on.", "tokens": [50800, 562, 264, 8630, 307, 6707, 11, 321, 1888, 493, 264, 958, 5633, 294, 264, 18639, 11, 293, 321, 352, 322, 11, 293, 321, 352, 322, 11, 293, 321, 352, 322, 13, 51100], "temperature": 0.0, "avg_logprob": -0.24847305367846007, "compression_ratio": 1.86, "no_speech_prob": 0.0023125167936086655}, {"id": 181, "seek": 100232, "start": 1017.0400000000001, "end": 1023.0400000000001, "text": " In blue, and then only you have callback one, callback two, callback three, callback four.", "tokens": [51100, 682, 3344, 11, 293, 550, 787, 291, 362, 818, 3207, 472, 11, 818, 3207, 732, 11, 818, 3207, 1045, 11, 818, 3207, 1451, 13, 51400], "temperature": 0.0, "avg_logprob": -0.24847305367846007, "compression_ratio": 1.86, "no_speech_prob": 0.0023125167936086655}, {"id": 182, "seek": 100232, "start": 1023.0400000000001, "end": 1031.04, "text": " While in the case of the async API, you chunk it, and because of that, you can't do anything.", "tokens": [51400, 3987, 294, 264, 1389, 295, 264, 382, 34015, 9362, 11, 291, 16635, 309, 11, 293, 570, 295, 300, 11, 291, 393, 380, 360, 1340, 13, 51800], "temperature": 0.0, "avg_logprob": -0.24847305367846007, "compression_ratio": 1.86, "no_speech_prob": 0.0023125167936086655}, {"id": 183, "seek": 103104, "start": 1031.76, "end": 1039.76, "text": " You chunk it, and because you chunk the work, then in between those chunks, your server can handle other requests.", "tokens": [50400, 509, 16635, 309, 11, 293, 570, 291, 16635, 264, 589, 11, 550, 294, 1296, 729, 24004, 11, 428, 7154, 393, 4813, 661, 12475, 13, 50800], "temperature": 0.0, "avg_logprob": -0.14894728782849434, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0012813509674742818}, {"id": 184, "seek": 103104, "start": 1041.76, "end": 1049.76, "text": " Now if you start to draw some lines and analyze the response time, so the point of view of the user,", "tokens": [50900, 823, 498, 291, 722, 281, 2642, 512, 3876, 293, 12477, 264, 4134, 565, 11, 370, 264, 935, 295, 1910, 295, 264, 4195, 11, 51300], "temperature": 0.0, "avg_logprob": -0.14894728782849434, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0012813509674742818}, {"id": 185, "seek": 103104, "start": 1049.76, "end": 1057.76, "text": " this is what it looks like, and then you have that kind of chart, where you can see the duration of", "tokens": [51300, 341, 307, 437, 309, 1542, 411, 11, 293, 550, 291, 362, 300, 733, 295, 6927, 11, 689, 291, 393, 536, 264, 16365, 295, 51700], "temperature": 0.0, "avg_logprob": -0.14894728782849434, "compression_ratio": 1.5909090909090908, "no_speech_prob": 0.0012813509674742818}, {"id": 186, "seek": 105776, "start": 1057.84, "end": 1066.96, "text": " the first blue, the big request, the duration of each of those red requests.", "tokens": [50368, 264, 700, 3344, 11, 264, 955, 5308, 11, 264, 16365, 295, 1184, 295, 729, 2182, 12475, 13, 50824], "temperature": 0.0, "avg_logprob": -0.16281660036607223, "compression_ratio": 1.4508196721311475, "no_speech_prob": 0.002903885906562209}, {"id": 187, "seek": 105776, "start": 1068.48, "end": 1079.2, "text": " In the first part, what you have is that each red request is delayed by the entire long compilation.", "tokens": [50900, 682, 264, 700, 644, 11, 437, 291, 362, 307, 300, 1184, 2182, 5308, 307, 20268, 538, 264, 2302, 938, 40261, 13, 51436], "temperature": 0.0, "avg_logprob": -0.16281660036607223, "compression_ratio": 1.4508196721311475, "no_speech_prob": 0.002903885906562209}, {"id": 188, "seek": 107920, "start": 1079.92, "end": 1087.92, "text": " On the b-crypt async part, on the bottom part, then it is delayed by at most one chunk.", "tokens": [50400, 1282, 264, 272, 12, 46555, 662, 382, 34015, 644, 11, 322, 264, 2767, 644, 11, 550, 309, 307, 20268, 538, 412, 881, 472, 16635, 13, 50800], "temperature": 0.0, "avg_logprob": -0.22565027143134445, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.009254693984985352}, {"id": 189, "seek": 107920, "start": 1089.1200000000001, "end": 1093.1200000000001, "text": " That's why you have smaller timing for the red request.", "tokens": [50860, 663, 311, 983, 291, 362, 4356, 10822, 337, 264, 2182, 5308, 13, 51060], "temperature": 0.0, "avg_logprob": -0.22565027143134445, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.009254693984985352}, {"id": 190, "seek": 107920, "start": 1095.1200000000001, "end": 1101.1200000000001, "text": " What will happen if you do the same exercise with the native C++ implementation?", "tokens": [51160, 708, 486, 1051, 498, 291, 360, 264, 912, 5380, 365, 264, 8470, 383, 25472, 11420, 30, 51460], "temperature": 0.0, "avg_logprob": -0.22565027143134445, "compression_ratio": 1.391304347826087, "no_speech_prob": 0.009254693984985352}, {"id": 191, "seek": 110112, "start": 1101.28, "end": 1111.28, "text": " Because it is a native implementation, because you can use the async API, it will behave the same way as the core module of FS,", "tokens": [50372, 1436, 309, 307, 257, 8470, 11420, 11, 570, 291, 393, 764, 264, 382, 34015, 9362, 11, 309, 486, 15158, 264, 912, 636, 382, 264, 4965, 10088, 295, 41138, 11, 50872], "temperature": 0.0, "avg_logprob": -0.20489702802715878, "compression_ratio": 1.5276073619631902, "no_speech_prob": 0.0016993358731269836}, {"id": 192, "seek": 110112, "start": 1111.28, "end": 1117.28, "text": " and it will be executed on a worker thread.", "tokens": [50872, 293, 309, 486, 312, 17577, 322, 257, 11346, 7207, 13, 51172], "temperature": 0.0, "avg_logprob": -0.20489702802715878, "compression_ratio": 1.5276073619631902, "no_speech_prob": 0.0016993358731269836}, {"id": 193, "seek": 110112, "start": 1117.28, "end": 1123.28, "text": " If it's executed on a worker thread, here's what the timings might look like.", "tokens": [51172, 759, 309, 311, 17577, 322, 257, 11346, 7207, 11, 510, 311, 437, 264, 524, 1109, 1062, 574, 411, 13, 51472], "temperature": 0.0, "avg_logprob": -0.20489702802715878, "compression_ratio": 1.5276073619631902, "no_speech_prob": 0.0016993358731269836}, {"id": 194, "seek": 112328, "start": 1123.44, "end": 1131.44, "text": " You basically have a timing that corresponds to exactly the combination that needs to be done for the red request,", "tokens": [50372, 509, 1936, 362, 257, 10822, 300, 23249, 281, 2293, 264, 6562, 300, 2203, 281, 312, 1096, 337, 264, 2182, 5308, 11, 50772], "temperature": 0.0, "avg_logprob": -0.15626181565321884, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.002215164015069604}, {"id": 195, "seek": 112328, "start": 1131.44, "end": 1133.44, "text": " and there's no delay at all.", "tokens": [50772, 293, 456, 311, 572, 8577, 412, 439, 13, 50872], "temperature": 0.0, "avg_logprob": -0.15626181565321884, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.002215164015069604}, {"id": 196, "seek": 112328, "start": 1137.44, "end": 1143.44, "text": " There's a small difference between the C++ and the JavaScript implementation.", "tokens": [51072, 821, 311, 257, 1359, 2649, 1296, 264, 383, 25472, 293, 264, 15778, 11420, 13, 51372], "temperature": 0.0, "avg_logprob": -0.15626181565321884, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.002215164015069604}, {"id": 197, "seek": 112328, "start": 1143.44, "end": 1153.2, "text": " The C++ implementation will be faster, but here what matters is the fact that the code runs either on main thread,", "tokens": [51372, 440, 383, 25472, 11420, 486, 312, 4663, 11, 457, 510, 437, 7001, 307, 264, 1186, 300, 264, 3089, 6676, 2139, 322, 2135, 7207, 11, 51860], "temperature": 0.0, "avg_logprob": -0.15626181565321884, "compression_ratio": 1.6153846153846154, "no_speech_prob": 0.002215164015069604}, {"id": 198, "seek": 115320, "start": 1153.3600000000001, "end": 1155.3600000000001, "text": " or in a worker thread.", "tokens": [50372, 420, 294, 257, 11346, 7207, 13, 50472], "temperature": 0.0, "avg_logprob": -0.15142978766025642, "compression_ratio": 1.7032967032967032, "no_speech_prob": 0.0005700539913959801}, {"id": 199, "seek": 115320, "start": 1155.3600000000001, "end": 1161.3600000000001, "text": " It's not important to compare the speed of the C++ or the JavaScript implementation in that case.", "tokens": [50472, 467, 311, 406, 1021, 281, 6794, 264, 3073, 295, 264, 383, 25472, 420, 264, 15778, 11420, 294, 300, 1389, 13, 50772], "temperature": 0.0, "avg_logprob": -0.15142978766025642, "compression_ratio": 1.7032967032967032, "no_speech_prob": 0.0005700539913959801}, {"id": 200, "seek": 115320, "start": 1163.3600000000001, "end": 1169.3600000000001, "text": " Sometimes you do have to take your CPU on a vacation.", "tokens": [50872, 4803, 291, 360, 362, 281, 747, 428, 13199, 322, 257, 12830, 13, 51172], "temperature": 0.0, "avg_logprob": -0.15142978766025642, "compression_ratio": 1.7032967032967032, "no_speech_prob": 0.0005700539913959801}, {"id": 201, "seek": 115320, "start": 1169.3600000000001, "end": 1173.3600000000001, "text": " Sometimes you do have to do a heavy combination.", "tokens": [51172, 4803, 291, 360, 362, 281, 360, 257, 4676, 6562, 13, 51372], "temperature": 0.0, "avg_logprob": -0.15142978766025642, "compression_ratio": 1.7032967032967032, "no_speech_prob": 0.0005700539913959801}, {"id": 202, "seek": 115320, "start": 1173.3600000000001, "end": 1181.3600000000001, "text": " What if you do not have a native implementation, or you do to have a slow application?", "tokens": [51372, 708, 498, 291, 360, 406, 362, 257, 8470, 11420, 11, 420, 291, 360, 281, 362, 257, 2964, 3861, 30, 51772], "temperature": 0.0, "avg_logprob": -0.15142978766025642, "compression_ratio": 1.7032967032967032, "no_speech_prob": 0.0005700539913959801}, {"id": 203, "seek": 118320, "start": 1183.3600000000001, "end": 1187.3600000000001, "text": " Well, if you really have no other choice than to take some vacation,", "tokens": [50372, 1042, 11, 498, 291, 534, 362, 572, 661, 3922, 813, 281, 747, 512, 12830, 11, 50572], "temperature": 0.0, "avg_logprob": -0.16706210374832153, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.002007994567975402}, {"id": 204, "seek": 118320, "start": 1187.3600000000001, "end": 1190.56, "text": " my advice is be sure to have a pool.", "tokens": [50572, 452, 5192, 307, 312, 988, 281, 362, 257, 7005, 13, 50732], "temperature": 0.0, "avg_logprob": -0.16706210374832153, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.002007994567975402}, {"id": 205, "seek": 118320, "start": 1190.56, "end": 1192.56, "text": " Be sure to take your swimsuit with you,", "tokens": [50732, 879, 988, 281, 747, 428, 42357, 1983, 365, 291, 11, 50832], "temperature": 0.0, "avg_logprob": -0.16706210374832153, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.002007994567975402}, {"id": 206, "seek": 118320, "start": 1194.56, "end": 1198.96, "text": " because it is possible with libraries such as Piscina,", "tokens": [50932, 570, 309, 307, 1944, 365, 15148, 1270, 382, 430, 5606, 1426, 11, 51152], "temperature": 0.0, "avg_logprob": -0.16706210374832153, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.002007994567975402}, {"id": 207, "seek": 118320, "start": 1200.24, "end": 1209.3600000000001, "text": " Swimming Pool in Italian, to create pools in which you can have threads that can execute JavaScript code.", "tokens": [51216, 3926, 40471, 46188, 294, 10003, 11, 281, 1884, 28688, 294, 597, 291, 393, 362, 19314, 300, 393, 14483, 15778, 3089, 13, 51672], "temperature": 0.0, "avg_logprob": -0.16706210374832153, "compression_ratio": 1.5223880597014925, "no_speech_prob": 0.002007994567975402}, {"id": 208, "seek": 120936, "start": 1209.76, "end": 1217.76, "text": " The API is quite straightforward, and in the end what it means is that instead of having", "tokens": [50384, 440, 9362, 307, 1596, 15325, 11, 293, 294, 264, 917, 437, 309, 1355, 307, 300, 2602, 295, 1419, 50784], "temperature": 0.0, "avg_logprob": -0.291866021078141, "compression_ratio": 1.5823529411764705, "no_speech_prob": 0.0013020852347835898}, {"id": 209, "seek": 120936, "start": 1218.9599999999998, "end": 1226.9599999999998, "text": " one stack to execute your JavaScript and then a set of other threads to execute native code,", "tokens": [50844, 472, 8630, 281, 14483, 428, 15778, 293, 550, 257, 992, 295, 661, 19314, 281, 14483, 8470, 3089, 11, 51244], "temperature": 0.0, "avg_logprob": -0.291866021078141, "compression_ratio": 1.5823529411764705, "no_speech_prob": 0.0013020852347835898}, {"id": 210, "seek": 120936, "start": 1226.9599999999998, "end": 1234.9599999999998, "text": " you can create other tracks, all the threads in which JavaScript code will be executed.", "tokens": [51244, 291, 393, 1884, 661, 10218, 11, 439, 264, 19314, 294, 597, 15778, 3089, 486, 312, 17577, 13, 51644], "temperature": 0.0, "avg_logprob": -0.291866021078141, "compression_ratio": 1.5823529411764705, "no_speech_prob": 0.0013020852347835898}, {"id": 211, "seek": 123496, "start": 1235.3600000000001, "end": 1243.3600000000001, "text": " For example, say you create two pools, you can create one pool with four threads to compute,", "tokens": [50384, 1171, 1365, 11, 584, 291, 1884, 732, 28688, 11, 291, 393, 1884, 472, 7005, 365, 1451, 19314, 281, 14722, 11, 50784], "temperature": 0.0, "avg_logprob": -0.26292970735732824, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0025874641723930836}, {"id": 212, "seek": 123496, "start": 1243.3600000000001, "end": 1249.3600000000001, "text": " for example, B-Crypt hashes, and you can create a second pool to compute recurring events.", "tokens": [50784, 337, 1365, 11, 363, 12, 34, 627, 662, 575, 8076, 11, 293, 291, 393, 1884, 257, 1150, 7005, 281, 14722, 32279, 3931, 13, 51084], "temperature": 0.0, "avg_logprob": -0.26292970735732824, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0025874641723930836}, {"id": 213, "seek": 123496, "start": 1251.3600000000001, "end": 1259.3600000000001, "text": " And in that case, what it means is that when your code will be pushed to the main JavaScript thread,", "tokens": [51184, 400, 294, 300, 1389, 11, 437, 309, 1355, 307, 300, 562, 428, 3089, 486, 312, 9152, 281, 264, 2135, 15778, 7207, 11, 51584], "temperature": 0.0, "avg_logprob": -0.26292970735732824, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.0025874641723930836}, {"id": 214, "seek": 125936, "start": 1260.24, "end": 1267.76, "text": " the main thread is going to communicate with the pool and say,", "tokens": [50408, 264, 2135, 7207, 307, 516, 281, 7890, 365, 264, 7005, 293, 584, 11, 50784], "temperature": 0.0, "avg_logprob": -0.11462843127366973, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.0009682501549832523}, {"id": 215, "seek": 125936, "start": 1267.76, "end": 1270.4799999999998, "text": " hey, execute and do that computation for me.", "tokens": [50784, 4177, 11, 14483, 293, 360, 300, 24903, 337, 385, 13, 50920], "temperature": 0.0, "avg_logprob": -0.11462843127366973, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.0009682501549832523}, {"id": 216, "seek": 125936, "start": 1270.4799999999998, "end": 1276.08, "text": " And then the pool will distribute that computation among the different threads that it creates.", "tokens": [50920, 400, 550, 264, 7005, 486, 20594, 300, 24903, 3654, 264, 819, 19314, 300, 309, 7829, 13, 51200], "temperature": 0.0, "avg_logprob": -0.11462843127366973, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.0009682501549832523}, {"id": 217, "seek": 125936, "start": 1279.84, "end": 1282.24, "text": " So here is what it looks like when you use a pool.", "tokens": [51388, 407, 510, 307, 437, 309, 1542, 411, 562, 291, 764, 257, 7005, 13, 51508], "temperature": 0.0, "avg_logprob": -0.11462843127366973, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.0009682501549832523}, {"id": 218, "seek": 125936, "start": 1283.36, "end": 1285.84, "text": " It's quite efficient, it's quite nice.", "tokens": [51564, 467, 311, 1596, 7148, 11, 309, 311, 1596, 1481, 13, 51688], "temperature": 0.0, "avg_logprob": -0.11462843127366973, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.0009682501549832523}, {"id": 219, "seek": 125936, "start": 1285.84, "end": 1287.12, "text": " Is it a silver bullet?", "tokens": [51688, 1119, 309, 257, 8753, 11632, 30, 51752], "temperature": 0.0, "avg_logprob": -0.11462843127366973, "compression_ratio": 1.5879396984924623, "no_speech_prob": 0.0009682501549832523}, {"id": 220, "seek": 128712, "start": 1288.08, "end": 1290.8799999999999, "text": " Well, no, there are several things you need to take into account.", "tokens": [50412, 1042, 11, 572, 11, 456, 366, 2940, 721, 291, 643, 281, 747, 666, 2696, 13, 50552], "temperature": 0.0, "avg_logprob": -0.11999224532734264, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005107477772980928}, {"id": 221, "seek": 128712, "start": 1292.0, "end": 1295.12, "text": " You need to choose the number of threads wisely.", "tokens": [50608, 509, 643, 281, 2826, 264, 1230, 295, 19314, 37632, 13, 50764], "temperature": 0.0, "avg_logprob": -0.11999224532734264, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005107477772980928}, {"id": 222, "seek": 128712, "start": 1296.7199999999998, "end": 1301.36, "text": " You need to determine when you use a pool and make an analysis.", "tokens": [50844, 509, 643, 281, 6997, 562, 291, 764, 257, 7005, 293, 652, 364, 5215, 13, 51076], "temperature": 0.0, "avg_logprob": -0.11999224532734264, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005107477772980928}, {"id": 223, "seek": 128712, "start": 1303.52, "end": 1308.3999999999999, "text": " You need to be sure that the machine on which you run your application has enough cores,", "tokens": [51184, 509, 643, 281, 312, 988, 300, 264, 3479, 322, 597, 291, 1190, 428, 3861, 575, 1547, 24826, 11, 51428], "temperature": 0.0, "avg_logprob": -0.11999224532734264, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005107477772980928}, {"id": 224, "seek": 128712, "start": 1309.28, "end": 1315.52, "text": " because in some situations it can be counterproductive to create too many threads and have too many", "tokens": [51472, 570, 294, 512, 6851, 309, 393, 312, 5682, 14314, 20221, 281, 1884, 886, 867, 19314, 293, 362, 886, 867, 51784], "temperature": 0.0, "avg_logprob": -0.11999224532734264, "compression_ratio": 1.7311320754716981, "no_speech_prob": 0.0005107477772980928}, {"id": 225, "seek": 131552, "start": 1316.08, "end": 1317.2, "text": " processes running.", "tokens": [50392, 7555, 2614, 13, 50448], "temperature": 0.0, "avg_logprob": -0.09791043671694669, "compression_ratio": 1.6616161616161615, "no_speech_prob": 0.0017913096817210317}, {"id": 226, "seek": 131552, "start": 1317.2, "end": 1322.24, "text": " And of course, you will have to monitor and check the memory usage.", "tokens": [50448, 400, 295, 1164, 11, 291, 486, 362, 281, 6002, 293, 1520, 264, 4675, 14924, 13, 50700], "temperature": 0.0, "avg_logprob": -0.09791043671694669, "compression_ratio": 1.6616161616161615, "no_speech_prob": 0.0017913096817210317}, {"id": 227, "seek": 131552, "start": 1324.24, "end": 1329.2, "text": " All right, how do you know when you need to create a thread pool?", "tokens": [50800, 1057, 558, 11, 577, 360, 291, 458, 562, 291, 643, 281, 1884, 257, 7207, 7005, 30, 51048], "temperature": 0.0, "avg_logprob": -0.09791043671694669, "compression_ratio": 1.6616161616161615, "no_speech_prob": 0.0017913096817210317}, {"id": 228, "seek": 131552, "start": 1330.16, "end": 1333.28, "text": " For that, you need to measure how the event loop is behaving.", "tokens": [51096, 1171, 300, 11, 291, 643, 281, 3481, 577, 264, 2280, 6367, 307, 35263, 13, 51252], "temperature": 0.0, "avg_logprob": -0.09791043671694669, "compression_ratio": 1.6616161616161615, "no_speech_prob": 0.0017913096817210317}, {"id": 229, "seek": 131552, "start": 1333.28, "end": 1336.4, "text": " You need to measure the health of your event loop.", "tokens": [51252, 509, 643, 281, 3481, 264, 1585, 295, 428, 2280, 6367, 13, 51408], "temperature": 0.0, "avg_logprob": -0.09791043671694669, "compression_ratio": 1.6616161616161615, "no_speech_prob": 0.0017913096817210317}, {"id": 230, "seek": 131552, "start": 1336.4, "end": 1340.16, "text": " And one of those metrics is, for example, the event loop delay.", "tokens": [51408, 400, 472, 295, 729, 16367, 307, 11, 337, 1365, 11, 264, 2280, 6367, 8577, 13, 51596], "temperature": 0.0, "avg_logprob": -0.09791043671694669, "compression_ratio": 1.6616161616161615, "no_speech_prob": 0.0017913096817210317}, {"id": 231, "seek": 134016, "start": 1340.16, "end": 1346.48, "text": " Another one is the max CPU time, and there are tools to help you get there.", "tokens": [50364, 3996, 472, 307, 264, 11469, 13199, 565, 11, 293, 456, 366, 3873, 281, 854, 291, 483, 456, 13, 50680], "temperature": 0.0, "avg_logprob": -0.1449000040690104, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.0007203951245173812}, {"id": 232, "seek": 134016, "start": 1346.48, "end": 1350.0800000000002, "text": " I strongly recommend Dr.JS with ClinicJS.", "tokens": [50680, 286, 10613, 2748, 2491, 13, 41, 50, 365, 37918, 41, 50, 13, 50860], "temperature": 0.0, "avg_logprob": -0.1449000040690104, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.0007203951245173812}, {"id": 233, "seek": 134016, "start": 1350.0800000000002, "end": 1356.72, "text": " It will give you such a nice graph and show you when you have a delay in your event loop,", "tokens": [50860, 467, 486, 976, 291, 1270, 257, 1481, 4295, 293, 855, 291, 562, 291, 362, 257, 8577, 294, 428, 2280, 6367, 11, 51192], "temperature": 0.0, "avg_logprob": -0.1449000040690104, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.0007203951245173812}, {"id": 234, "seek": 134016, "start": 1356.72, "end": 1358.0800000000002, "text": " when your event loop is blocked.", "tokens": [51192, 562, 428, 2280, 6367, 307, 15470, 13, 51260], "temperature": 0.0, "avg_logprob": -0.1449000040690104, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.0007203951245173812}, {"id": 235, "seek": 134016, "start": 1360.48, "end": 1363.1200000000001, "text": " Measuring that yourself is not complex.", "tokens": [51380, 1923, 296, 1345, 300, 1803, 307, 406, 3997, 13, 51512], "temperature": 0.0, "avg_logprob": -0.1449000040690104, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.0007203951245173812}, {"id": 236, "seek": 134016, "start": 1364.24, "end": 1369.8400000000001, "text": " That is all you need to measure on your server or in your node application.", "tokens": [51568, 663, 307, 439, 291, 643, 281, 3481, 322, 428, 7154, 420, 294, 428, 9984, 3861, 13, 51848], "temperature": 0.0, "avg_logprob": -0.1449000040690104, "compression_ratio": 1.575221238938053, "no_speech_prob": 0.0007203951245173812}, {"id": 237, "seek": 137016, "start": 1370.4, "end": 1372.48, "text": " The delay of your event loop.", "tokens": [50376, 440, 8577, 295, 428, 2280, 6367, 13, 50480], "temperature": 0.0, "avg_logprob": -0.11888055006663005, "compression_ratio": 1.8405797101449275, "no_speech_prob": 0.003530381713062525}, {"id": 238, "seek": 137016, "start": 1373.1200000000001, "end": 1377.3600000000001, "text": " What you basically do is you set an interval with a one second delay.", "tokens": [50512, 708, 291, 1936, 360, 307, 291, 992, 364, 15035, 365, 257, 472, 1150, 8577, 13, 50724], "temperature": 0.0, "avg_logprob": -0.11888055006663005, "compression_ratio": 1.8405797101449275, "no_speech_prob": 0.003530381713062525}, {"id": 239, "seek": 137016, "start": 1377.3600000000001, "end": 1385.1200000000001, "text": " So every second you will execute the callback with a set immediate,", "tokens": [50724, 407, 633, 1150, 291, 486, 14483, 264, 818, 3207, 365, 257, 992, 11629, 11, 51112], "temperature": 0.0, "avg_logprob": -0.11888055006663005, "compression_ratio": 1.8405797101449275, "no_speech_prob": 0.003530381713062525}, {"id": 240, "seek": 137016, "start": 1385.1200000000001, "end": 1391.0400000000002, "text": " and you will compare the time at which you plan it and the time at which it is actually executed.", "tokens": [51112, 293, 291, 486, 6794, 264, 565, 412, 597, 291, 1393, 309, 293, 264, 565, 412, 597, 309, 307, 767, 17577, 13, 51408], "temperature": 0.0, "avg_logprob": -0.11888055006663005, "compression_ratio": 1.8405797101449275, "no_speech_prob": 0.003530381713062525}, {"id": 241, "seek": 137016, "start": 1391.92, "end": 1395.1200000000001, "text": " And that, the time difference between those two, the start and the end,", "tokens": [51452, 400, 300, 11, 264, 565, 2649, 1296, 729, 732, 11, 264, 722, 293, 264, 917, 11, 51612], "temperature": 0.0, "avg_logprob": -0.11888055006663005, "compression_ratio": 1.8405797101449275, "no_speech_prob": 0.003530381713062525}, {"id": 242, "seek": 137016, "start": 1395.1200000000001, "end": 1397.6000000000001, "text": " will give you the delay in your event loop.", "tokens": [51612, 486, 976, 291, 264, 8577, 294, 428, 2280, 6367, 13, 51736], "temperature": 0.0, "avg_logprob": -0.11888055006663005, "compression_ratio": 1.8405797101449275, "no_speech_prob": 0.003530381713062525}, {"id": 243, "seek": 140016, "start": 1401.1200000000001, "end": 1402.3200000000002, "text": " Time to wrap up.", "tokens": [50412, 6161, 281, 7019, 493, 13, 50472], "temperature": 0.0, "avg_logprob": -0.10522397021029858, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0003568266110960394}, {"id": 244, "seek": 140016, "start": 1402.3200000000002, "end": 1404.0800000000002, "text": " So do not block the event loop.", "tokens": [50472, 407, 360, 406, 3461, 264, 2280, 6367, 13, 50560], "temperature": 0.0, "avg_logprob": -0.10522397021029858, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0003568266110960394}, {"id": 245, "seek": 140016, "start": 1404.8000000000002, "end": 1409.44, "text": " And what you really mean by that, it is not about async versus sync.", "tokens": [50596, 400, 437, 291, 534, 914, 538, 300, 11, 309, 307, 406, 466, 382, 34015, 5717, 20271, 13, 50828], "temperature": 0.0, "avg_logprob": -0.10522397021029858, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0003568266110960394}, {"id": 246, "seek": 140016, "start": 1410.0800000000002, "end": 1415.3600000000001, "text": " It is more about not performing CPU intensive task on the main thread.", "tokens": [50860, 467, 307, 544, 466, 406, 10205, 13199, 18957, 5633, 322, 264, 2135, 7207, 13, 51124], "temperature": 0.0, "avg_logprob": -0.10522397021029858, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0003568266110960394}, {"id": 247, "seek": 140016, "start": 1416.3200000000002, "end": 1418.4, "text": " Okay, so that is what you have to remember.", "tokens": [51172, 1033, 11, 370, 300, 307, 437, 291, 362, 281, 1604, 13, 51276], "temperature": 0.0, "avg_logprob": -0.10522397021029858, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0003568266110960394}, {"id": 248, "seek": 140016, "start": 1418.4, "end": 1423.1200000000001, "text": " As long as you do not execute CPU intensive task on the main thread,", "tokens": [51276, 1018, 938, 382, 291, 360, 406, 14483, 13199, 18957, 5633, 322, 264, 2135, 7207, 11, 51512], "temperature": 0.0, "avg_logprob": -0.10522397021029858, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0003568266110960394}, {"id": 249, "seek": 140016, "start": 1423.1200000000001, "end": 1425.68, "text": " your application will be fast and smooth.", "tokens": [51512, 428, 3861, 486, 312, 2370, 293, 5508, 13, 51640], "temperature": 0.0, "avg_logprob": -0.10522397021029858, "compression_ratio": 1.6411483253588517, "no_speech_prob": 0.0003568266110960394}, {"id": 250, "seek": 142568, "start": 1425.8400000000001, "end": 1430.24, "text": " So here is a couple of advice.", "tokens": [50372, 407, 510, 307, 257, 1916, 295, 5192, 13, 50592], "temperature": 0.0, "avg_logprob": -0.24083138957168115, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.003512506140395999}, {"id": 251, "seek": 142568, "start": 1431.04, "end": 1434.5600000000002, "text": " And have some coffee, drink as much coffee as you want.", "tokens": [50632, 400, 362, 512, 4982, 11, 2822, 382, 709, 4982, 382, 291, 528, 13, 50808], "temperature": 0.0, "avg_logprob": -0.24083138957168115, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.003512506140395999}, {"id": 252, "seek": 142568, "start": 1434.5600000000002, "end": 1435.44, "text": " Enjoy the show.", "tokens": [50808, 15411, 264, 855, 13, 50852], "temperature": 0.0, "avg_logprob": -0.24083138957168115, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.003512506140395999}, {"id": 253, "seek": 142568, "start": 1436.0800000000002, "end": 1438.16, "text": " Take some time off from time to time.", "tokens": [50884, 3664, 512, 565, 766, 490, 565, 281, 565, 13, 50988], "temperature": 0.0, "avg_logprob": -0.24083138957168115, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.003512506140395999}, {"id": 254, "seek": 142568, "start": 1438.16, "end": 1441.6000000000001, "text": " And thank you for them and you will be for having us today.", "tokens": [50988, 400, 1309, 291, 337, 552, 293, 291, 486, 312, 337, 1419, 505, 965, 13, 51160], "temperature": 0.0, "avg_logprob": -0.24083138957168115, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.003512506140395999}, {"id": 255, "seek": 142568, "start": 1452.64, "end": 1453.76, "text": " Are there any questions?", "tokens": [51712, 2014, 456, 604, 1651, 30, 51768], "temperature": 0.0, "avg_logprob": -0.24083138957168115, "compression_ratio": 1.4423076923076923, "no_speech_prob": 0.003512506140395999}, {"id": 256, "seek": 145568, "start": 1456.16, "end": 1461.76, "text": " One question there.", "tokens": [50388, 1485, 1168, 456, 13, 50668], "temperature": 0.0, "avg_logprob": -0.5513728260993958, "compression_ratio": 0.8367346938775511, "no_speech_prob": 0.005048103630542755}, {"id": 257, "seek": 145568, "start": 1468.96, "end": 1470.0, "text": " You have to speak up.", "tokens": [51028, 509, 362, 281, 1710, 493, 13, 51080], "temperature": 0.0, "avg_logprob": -0.5513728260993958, "compression_ratio": 0.8367346938775511, "no_speech_prob": 0.005048103630542755}, {"id": 258, "seek": 147000, "start": 1470.0, "end": 1475.28, "text": " How does PCNAS react compared to Node cluster API?", "tokens": [50364, 1012, 775, 6465, 45, 3160, 4515, 5347, 281, 38640, 13630, 9362, 30, 50628], "temperature": 0.0, "avg_logprob": -0.32673094349522747, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.04764176905155182}, {"id": 259, "seek": 147000, "start": 1480.08, "end": 1486.08, "text": " So the question is how does PCNAS differ from the Node cluster API?", "tokens": [50868, 407, 264, 1168, 307, 577, 775, 6465, 45, 3160, 743, 490, 264, 38640, 13630, 9362, 30, 51168], "temperature": 0.0, "avg_logprob": -0.32673094349522747, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.04764176905155182}, {"id": 260, "seek": 147000, "start": 1486.08, "end": 1492.8, "text": " So my understanding is that the Node cluster API basically means that you are going to have", "tokens": [51168, 407, 452, 3701, 307, 300, 264, 38640, 13630, 9362, 1936, 1355, 300, 291, 366, 516, 281, 362, 51504], "temperature": 0.0, "avg_logprob": -0.32673094349522747, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.04764176905155182}, {"id": 261, "seek": 147000, "start": 1492.8, "end": 1496.24, "text": " multiple instances of the same application.", "tokens": [51504, 3866, 14519, 295, 264, 912, 3861, 13, 51676], "temperature": 0.0, "avg_logprob": -0.32673094349522747, "compression_ratio": 1.6075949367088607, "no_speech_prob": 0.04764176905155182}, {"id": 262, "seek": 149624, "start": 1496.24, "end": 1503.1200000000001, "text": " Okay, why PCNAS, one instance of your application will have multiple threads.", "tokens": [50404, 1033, 11, 983, 6465, 45, 3160, 11, 472, 5197, 295, 428, 3861, 486, 362, 3866, 19314, 13, 50708], "temperature": 0.0, "avg_logprob": -0.23772861957550048, "compression_ratio": 0.9625, "no_speech_prob": 0.031138336285948753}], "language": "en"}