WEBVTT

00:00.000 --> 00:07.000
Please welcome Rob Esimione.

00:07.000 --> 00:10.000
Thank you. Simon. Simon. Simon.

00:10.000 --> 00:16.000
Okay. Is it working? Yes, I think we're all good to go. Okay.

00:16.000 --> 00:24.000
Hello. Welcome. Thank you for coming. My name is Simeon Vincent. I'm a developer relations engineer working on Firefox add-ons.

00:24.000 --> 00:34.000
Who are you? I'm Rob Hul. I'm working on the web extensions team at Firefox on extension APIs that can be used to build extensions.

00:34.000 --> 00:46.000
Today we're going to be talking a bit about building cross browser extensions in 2024 manifestv3, cross browser web extensions, all that good stuff.

00:46.000 --> 01:02.000
In case you're somehow not familiar with extensions, they're personally one of my favorite aspects of the web platform. Web extensions are little programs essentially that allow you to customize how the browser looks and feels.

01:02.000 --> 01:17.000
A couple of examples. Tree style tabs will add a tree of pages as you browse the web on the left side or I guess in the sidebar.

01:17.000 --> 01:29.000
You block origin probably needs no introduction with this crowd. So it is a content blocker or a content blocker that allows you to block pieces of functionality on web pages.

01:29.000 --> 01:52.000
And Dark Reader as I kind of contrast to some of these other things allows you to have your preferences. Like if you prefer using dark mode, Dark Reader will enable that on websites, even if the websites don't support or the website author didn't create a dark theme for your ideal website.

01:53.000 --> 02:09.000
Web extensions are cross browser extension model originally developed by Chrome and now all browsers are aligning around this particular approach to designing extensions.

02:09.000 --> 02:24.000
Over the years there have been a bunch of different ways that browsers have tried to provide ways of customizing or personalizing the browser experience. And the web extension model is particularly interesting because it is built using web technologies.

02:24.000 --> 02:35.000
It's built on top of the web platform itself. So when you customize your browser using a web extension, the author was using HTML, JavaScript and CSS to build that experience.

02:36.000 --> 02:59.000
Web extensions as a cross browser thing originally started with Firefox, building a new extension platform based on Chromium. And since then Safari has adopted it and it's before Edge adopted Chromium as its base, they also adopted the web extension model.

03:00.000 --> 03:17.000
So this is, while it's not like a standard in the W3C or other standard group, it is a cross browser effort. All of us are working together in the web extension community group in the W3C.

03:17.000 --> 03:25.000
And in addition to browsers, the community is also involved providing feedback and helping evolve and enhance the extension platform.

03:25.000 --> 03:43.000
So today we're going to take a closer look at how to build some extensions with a mindset towards maximum compatibility with current browsers with new form factors like Firefox for Android.

03:44.000 --> 03:56.000
You're now able to have your web extensions available on your mobile phone. And how to kind of maximize compatibility as you build out a new browser extension.

03:57.000 --> 04:10.000
Okay, so as the first demonstration, we are going to show how to modify a website. That's a very common task. Most extensions that are just starting out want to enhance a website in some way.

04:11.000 --> 04:25.000
So this is a very simple extension. This consists of two files. A manifest or JSON file that declares some metadata such as a name and version of extension.

04:25.000 --> 04:31.000
Not very important for the rest of this talk. Something about the manifest version which will be more significant as we see later.

04:31.000 --> 04:38.000
And the context scripts entry that declares which file should run and where. In this case, it declares to run on every side.

04:38.000 --> 04:48.000
The exact demo doesn't really matter. In this case, we are just going to register a click handler on the document that shows a dialogue when you click it.

04:49.000 --> 04:52.000
And now we're going to try a live demo.

04:57.000 --> 05:00.000
So first, oh, can you connect your Android phone?

05:00.000 --> 05:01.000
Oh, yes.

05:01.000 --> 05:06.000
Okay, while he's connecting his Android phone, I'm going to type the comment.

05:07.000 --> 05:15.000
So there's a WebEx tool that is a program that allows you to run or build extensions very easily.

05:15.000 --> 05:24.000
It takes care of looking up the location of the browser bindings and packaging the extension and launch it without effort.

05:24.000 --> 05:31.000
So WebEx run is the common to run extension in the current directory. T is target.

05:31.000 --> 05:35.000
In this case, we are starting at Firefox and red.

05:35.000 --> 05:38.000
And then let's see. Does it do anything?

05:38.000 --> 05:41.000
Okay, so yeah, I'll show that later.

05:41.000 --> 05:44.000
Okay, well, I'm at it.

05:44.000 --> 05:49.000
I'm just starting to clean copy in background.

05:49.000 --> 05:53.000
So this is a Firefox for Android.

05:53.000 --> 05:57.000
Currently showing something.

05:57.000 --> 06:03.000
And I ran the comment before it showed that some parameters were missing.

06:03.000 --> 06:09.000
In this case, we need to select which device is being used.

06:09.000 --> 06:11.000
And then it still doesn't work.

06:11.000 --> 06:17.000
Those on Firefox for Android on Android device are multiple Firefox for Android applications.

06:17.000 --> 06:21.000
The IDs are listed there for convenience.

06:21.000 --> 06:23.000
In this case, I'm going to select nightly.

06:23.000 --> 06:28.000
So the Phoenix is the code name for nightly and Firefox 10 for the release version.

06:28.000 --> 06:34.000
There are more things such as pet and even non Firefox builds.

06:34.000 --> 06:37.000
Okay, I launched it.

06:37.000 --> 06:40.000
There's a request to install extension.

06:40.000 --> 06:46.000
I click somewhere and I get a dialogue as expected.

06:46.000 --> 06:57.000
So now I'm going to repeat the same for desktop just to see how easy it is.

06:57.000 --> 06:59.000
I could type Firefox desktop.

06:59.000 --> 07:05.000
By default, it launches Firefox desktop because initially that is the goal of that X.

07:05.000 --> 07:09.000
Later, we expanded it to older browsers.

07:09.000 --> 07:13.000
Example.com.

07:13.000 --> 07:15.000
Typos.

07:15.000 --> 07:22.000
It works again.

07:22.000 --> 07:29.000
And for completeness also Chromium.

07:29.000 --> 07:33.000
Example.com.

07:33.000 --> 07:36.000
And it works.

07:36.000 --> 07:40.000
It takes the load the menu at this point.

07:40.000 --> 07:42.000
Yes.

07:42.000 --> 07:44.000
Okay.

07:44.000 --> 07:49.000
I'm going to back to the slide for a bit.

07:49.000 --> 07:50.000
Okay.

07:50.000 --> 07:53.000
And now to the demo.

07:53.000 --> 08:02.000
So as you can see from the extension management page.

08:02.000 --> 08:05.000
It's possible to load it manually.

08:05.000 --> 08:11.000
Just for the sake of demonstration, I'm going to remove extension that were installed by the tool.

08:11.000 --> 08:13.000
Oh, okay.

08:13.000 --> 08:15.000
Sorry about that.

08:15.000 --> 08:18.000
I'm going to manually load extension.

08:18.000 --> 08:21.000
There was the original one we loaded.

08:21.000 --> 08:22.000
Manifest.

08:22.000 --> 08:25.000
All files are there.

08:25.000 --> 08:28.000
And notice that there's some error.

08:28.000 --> 08:32.000
So if you increase the size, I'll just pop in.

08:32.000 --> 08:34.000
Go ahead.

08:34.000 --> 08:36.000
Explain the spectrum.

08:36.000 --> 08:41.000
So at the moment, Chrome has formally dropped support for Manifest v2.

08:41.000 --> 08:45.000
Or that's not quite, it's deprecated support for Manifest v2.

08:45.000 --> 08:50.000
So it's no longer possible to publish a new extension in the Chrome Web Store using Manifest v2.

08:50.000 --> 08:54.000
And in fact, it's been about a year since it was supported.

08:54.000 --> 08:58.000
In over the course of the remainder of this talk, we're going to be focusing specifically on Manifest v3.

08:58.000 --> 09:02.000
Because if you're building a new extension, you have to use it.

09:02.000 --> 09:06.000
And as you clearly see this Chrome, it can still load Manifest v2 extensions.

09:06.000 --> 09:10.000
And of this year, they will start experimenting to turn off Manifest v2 support.

09:10.000 --> 09:15.000
At which point it's not possible to load Manifest v2 extension in Chrome any longer.

09:15.000 --> 09:17.000
Firefox still continues to support Manifest v2.

09:17.000 --> 09:19.000
It hasn't deprecated Manifest v2 yet.

09:19.000 --> 09:23.000
So again, just load extension Firefox just fine.

09:23.000 --> 09:30.000
I think it's also worth noting that Firefox does not yet have a deprecation timeline for Manifest v2 either.

09:30.000 --> 09:36.000
Whereas Chrome has a kind of end of life timeline formally announced and is coming in the next six months.

09:36.000 --> 09:42.000
So the way to fix this would be to switch to Manifest v3.

09:42.000 --> 09:44.000
The question is how to do that.

09:44.000 --> 09:47.000
So like you see, there's an error here.

09:47.000 --> 09:50.000
There was the original code that we started with.

09:50.000 --> 09:52.000
Manifest v2 was mentioned there.

09:52.000 --> 09:58.000
So we have to do Manifest v3 and then we try again.

09:58.000 --> 10:05.000
Just for the sake of, since I've opened anyway, I'm loading Manifest v3 extension.

10:05.000 --> 10:08.000
Okay. And this was the Manifest v2 one.

10:08.000 --> 10:11.000
I'm removing it since I don't care about it.

10:11.000 --> 10:14.000
This Manifest v3.

10:14.000 --> 10:17.000
Okay. There was an old example, the new one.

10:17.000 --> 10:22.000
Again.

10:22.000 --> 10:26.000
If I view this page, there's still some errors here.

10:26.000 --> 10:28.000
I'll get to that later.

10:28.000 --> 10:30.000
Yeah.

10:30.000 --> 10:35.000
The next part of extension model that is very important are host missions.

10:35.000 --> 10:39.000
In a previous example, we ran the extension on all websites.

10:39.000 --> 10:46.000
We requested to do so on our website and we bumped the extension Manifest v3 and it still worked in Chrome.

10:46.000 --> 10:49.000
What it didn't show yet is how to run extension on Firefox.

10:49.000 --> 10:52.000
Well, I did show how to, but not that I did so.

10:52.000 --> 10:54.000
So let's try again.

10:54.000 --> 11:03.000
As Rob does this up, one of the notable differences between in Firefox's support for Manifest v3 is

11:03.000 --> 11:07.000
host permissions are limited by default.

11:07.000 --> 11:15.000
We want to encourage developers to go in the direction of giving users more control over where and when

11:15.000 --> 11:17.000
extensions run.

11:17.000 --> 11:27.000
So by default, the set of hosts that the extension declares aren't granted by default.

11:27.000 --> 11:28.000
Thanks.

11:28.000 --> 11:32.000
So at this time Manifest v3 extensions do not get the permissions unlike Chrome.

11:32.000 --> 11:36.000
That's a common source of confusion for extension developers.

11:36.000 --> 11:40.000
And as you just saw, I launched Firefox again with a Manifest v3 extension.

11:40.000 --> 11:42.000
You click around, nothing happens.

11:42.000 --> 11:48.000
What you do see is that there is built-in extension UI in Firefox to control permissions.

11:48.000 --> 11:58.000
So if you enable permission from this point and load it again, it will work.

11:58.000 --> 12:01.000
And so that is the built-in UI in Firefox.

12:01.000 --> 12:05.000
Chrome has similar UI to disable it.

12:05.000 --> 12:10.000
So even if you currently think that your extension works in Chrome, it may not if, for example,

12:10.000 --> 12:17.000
the user has disabled it or maybe sometime in the far future Chrome has also followed a similar approach.

12:17.000 --> 12:21.000
It's also worth noting, even though we only show Firefox and Chrome here in today's presentation,

12:21.000 --> 12:25.000
that Safari has also something special for host permissions.

12:25.000 --> 12:28.000
In fact, all host permissions are disabled by default.

12:28.000 --> 12:33.000
Safari takes the most strictest approach to host permissions for privacy reasons,

12:33.000 --> 12:40.000
meaning that you have to explicitly interact with the browser UI to allow the extension to run on the page.

12:40.000 --> 12:45.000
In a previous slide, I showed built-in browser UI to do so.

12:45.000 --> 12:53.000
Now I'm going to show how to do it in your own extension with the right context to convince the user to give you those permissions.

12:53.000 --> 12:57.000
To do so, in the Manifest v3 declared options UI page,

12:57.000 --> 13:03.000
in this very simple extract of the options page, I show a label.

13:03.000 --> 13:05.000
This is just a very simple explanation.

13:05.000 --> 13:08.000
In reality, you may convince the user that they will win something.

13:08.000 --> 13:11.000
I mean that they will get some useful functionality.

13:11.000 --> 13:13.000
Please do not mislead the user.

13:13.000 --> 13:19.000
And for the sake of this example, a checkbox to send the permissions.

13:19.000 --> 13:24.000
For the demonstration, I'll be very to the point.

13:24.000 --> 13:27.000
Check in the checkbox will give extra to example.com.

13:27.000 --> 13:32.000
In your own extension, you may use a more descriptive, non-technical description.

13:32.000 --> 13:36.000
And finally, I load the options.js file.

13:36.000 --> 13:40.000
In options.js file, I declare the permission that I want to request.

13:40.000 --> 13:45.000
The permission follows the format that's shown on the screen.

13:45.000 --> 13:50.000
The origins key of the object to declare list of match patterns,

13:50.000 --> 13:53.000
which you saw before in the Manifest file.

13:53.000 --> 13:59.000
Match patterns are the common way in extensions to define on which host an extension operates.

13:59.000 --> 14:04.000
In this case, in this context, with permissions, the path is ignored.

14:04.000 --> 14:07.000
Because when you request access to example.com, it doesn't really matter

14:07.000 --> 14:12.000
whether it's example.com slash favicon or example.com slash index.

14:12.000 --> 14:16.000
It's also worth noting the scheme in this case.

14:16.000 --> 14:19.000
The wild cards are a little special in the way that they work.

14:19.000 --> 14:21.000
They're not, you know, general glob patterns.

14:21.000 --> 14:25.000
Scheme, the asterisk here specifically means HTTP and HTTPS.

14:25.000 --> 14:27.000
It doesn't include filed URLs.

14:27.000 --> 14:33.000
And the asterisk in the domain or in the host section,

14:33.000 --> 14:35.000
it can only be a prefix.

14:35.000 --> 14:41.000
It can't pattern match on the top level domain or in the middle of a pattern.

14:41.000 --> 14:44.000
So it can only specify subdomains.

14:44.000 --> 14:51.000
And in this case, asterisk. includes both subdomains and example.com.

14:51.000 --> 14:53.000
Thank you.

14:56.000 --> 14:58.000
Okay. So the UI was very simple.

14:58.000 --> 15:03.000
We had a checkbox and a label that you can click that triggers the checkbox.

15:03.000 --> 15:09.000
To start with, we will first make sure that the checkbox reflects the actual state of the permissions that you have.

15:09.000 --> 15:14.000
So you will request, well, check the permissions that you have and update a checkbox state.

15:14.000 --> 15:15.000
Very useful.

15:15.000 --> 15:21.000
Now you need to make sure that when the checkbox is ticked, that the permissions are actually granted.

15:21.000 --> 15:24.000
To do so, we introduce a change listener.

15:24.000 --> 15:28.000
A change listener is as fired when the checkbox state changes.

15:28.000 --> 15:32.000
When the checkbox itself is checked, so that means that the user checked the checkbox,

15:32.000 --> 15:36.000
we want to make sure that permissions are granted if they have not been granted yet.

15:36.000 --> 15:39.000
So we use the permissions.request API to do so.

15:39.000 --> 15:50.000
And if somehow the user dismisses the permission request, we uncheck the checkbox to make sure that the UI is consistent with what actually happened.

15:50.000 --> 15:53.000
To remove the permission, we do something similar.

15:53.000 --> 16:01.000
You'll notice that in this case, I'm using try catch because Chrome has something special about it, which we'll explain a few minutes later.

16:02.000 --> 16:08.000
And finally, also note that I use permissions.onEdit and permission.onRemoveTheVentListeners here.

16:08.000 --> 16:15.000
These are triggered when the permission change, not just by the checkbox here, but also if you use built in browser UI,

16:15.000 --> 16:18.000
or simply have opened the tab in a different page.

16:18.000 --> 16:25.000
It's a very common mistake of extensive developers to not account for changes in other tabs or other external factors.

16:25.000 --> 16:33.000
So make sure that if you have some UI or settings page, synchronize it with your other potential external triggers.

16:35.000 --> 16:37.000
I'm going to demonstrate it.

16:37.000 --> 16:39.000
Oh, just a bonus tip.

16:39.000 --> 16:45.000
So in the demo here, we all, well, clearly you can see that the browser is using dark theme.

16:45.000 --> 16:51.000
By default, the web page and Accenture page include that use a white, well, a light theme,

16:51.000 --> 16:57.000
which is one simple trick, adding a made and named call scheme with content dark is and light.

16:57.000 --> 17:03.000
You can automatically get the dark theme support for your extension page.

17:03.000 --> 17:09.000
Even if you don't develop any extensions, take away this tip for your own web applications.

17:09.000 --> 17:14.000
With very little effort, you can get dark theme support automatically without any extra extensions.

17:14.000 --> 17:17.000
I actually learned about this from Rob earlier today.

17:17.000 --> 17:27.000
Right. So if you click on the check box, you'll see that permission request comes up and then you can choose to allow or disallow.

17:27.000 --> 17:29.000
Will you continue?

17:29.000 --> 17:31.000
Did you also want to show it on Android?

17:31.000 --> 17:33.000
Oh, yes. Thank you.

17:33.000 --> 17:35.000
So on Android, the flow is also similar.

17:35.000 --> 17:39.000
You find the settings page as you can see through these arrows.

17:39.000 --> 17:44.000
And then you can also grant the permission to similar UI.

17:44.000 --> 17:46.000
I could do a live demo, which is for the sake of time.

17:46.000 --> 17:49.000
I'm just going to the screenshots.

17:49.000 --> 17:54.000
If people are following this later, the slides are also published later with screenshot included.

17:54.000 --> 17:57.000
So you don't have to watch the whole video recording.

17:57.000 --> 18:00.000
So this is the Chrome page.

18:00.000 --> 18:04.000
Okay, that was the special part with Chrome that I'm going to show now.

18:20.000 --> 18:24.000
So I can do this too by recycling real但.

18:24.000 --> 18:34.320
So previously I said there was some try catch to handle some error in Chrome.

18:34.320 --> 18:42.000
The reason for that is, I just wanted to make it bigger.

18:42.000 --> 18:43.160
Okay, yeah, it's bigger.

18:43.160 --> 18:44.160
Thank you.

18:44.160 --> 18:50.040
If you click here you'll see that nothing happens for some strange reason.

18:50.040 --> 18:57.760
The reason for that is that in Firefox you can always, the user can always toggle permission

18:57.760 --> 18:59.960
and extension can do the same.

18:59.960 --> 19:04.680
In Chrome an error occurs when you try to remove permission that is declared in the

19:04.680 --> 19:05.680
counter scripts.

19:05.680 --> 19:12.400
Because the extension claims that it's required permission and Chrome refuses to remove it.

19:12.400 --> 19:20.240
You can still trigger the same flow by using the side axis control that I mentioned before.

19:20.240 --> 19:23.520
So there's the built-in UI from Chrome to control axis.

19:23.520 --> 19:26.920
There are several ways including on click.

19:26.920 --> 19:31.040
So now I try again and I see the checkbox is unchecked.

19:31.040 --> 19:35.640
I can check it, permission request appears, approve it.

19:35.640 --> 19:39.400
Okay now I'm locked in the jail.

19:39.400 --> 19:45.160
But the important thing there is, again, the permissions can be revoked outside of your

19:45.160 --> 19:48.000
extensions flow and you might not otherwise have signals to it.

19:48.000 --> 19:51.920
So it is critical to subscribe to those events and make sure that you're reacting to them

19:51.920 --> 19:55.320
appropriately.

19:55.320 --> 20:04.240
Right, so in this example that we looked at so far, we've statically declared our content

20:04.240 --> 20:10.280
scripts and had them automatically run on the page and then respond to the invocation

20:10.280 --> 20:11.800
on click.

20:11.800 --> 20:20.560
But if we really want to embrace user control, user privacy, it is best to react to a user's

20:20.560 --> 20:24.680
invocation of the extension and then perform the work that you need to do rather than always

20:24.680 --> 20:28.840
statically injecting and potentially having access to sensitive information that you don't

20:28.840 --> 20:30.520
actually want.

20:30.520 --> 20:33.920
So both as a user, you're protecting your own data, as a developer, you're respecting

20:33.920 --> 20:38.640
the user and making sure you don't have access to content you don't need.

20:38.640 --> 20:46.880
So the pattern that we want to encourage is that kind of in-context reaction and we do

20:46.880 --> 20:51.360
that through a special permission called ActiveTab.

20:51.360 --> 20:55.760
So in this demo, we're going to be using the ActiveTab permission to detect when we're

20:55.760 --> 20:59.680
in vote and then get temporary access to the page and then we're going to be using the

20:59.680 --> 21:04.000
scripting permission to execute the script in context.

21:04.000 --> 21:08.920
And we're going to be doing that using the extensions action icon, the thing that appears

21:08.920 --> 21:14.760
in the toolbar that identifies your extension.

21:14.760 --> 21:19.840
It's also worth noting that declaring action in this file is necessary.

21:19.840 --> 21:22.080
If you don't, you can't actually use that API.

21:22.080 --> 21:26.840
So it's kind of an implicit permission.

21:26.840 --> 21:30.920
In this demo, we're going to be targeting specifically Firefox.

21:30.920 --> 21:33.080
So we're going to start with a scripts array.

21:33.080 --> 21:34.480
This is kind of the more traditional approach.

21:34.480 --> 21:42.240
It uses a background page, an event page in order to run the script.

21:42.240 --> 21:44.520
We are going to be targeting Chrome in just a little bit.

21:44.520 --> 21:50.360
So we're going to kind of ahead of time polyfill the browser namespace.

21:50.360 --> 21:56.720
The Chrome version of the extension platform uses the global Chrome and Firefox when it

21:56.720 --> 22:00.640
implemented the web extension APIs.

22:00.640 --> 22:03.440
It used the namespace browser.

22:03.440 --> 22:08.280
And the big difference between the two is that browser supports promises and Chrome historically

22:08.280 --> 22:09.280
did not.

22:09.280 --> 22:12.160
It does in manifestv3.

22:12.160 --> 22:15.400
So we're using this quick polyfill.

22:15.400 --> 22:22.040
If you are targeting manifestv2, you'll need a larger, more extensive polyfill.

22:22.040 --> 22:26.920
So as described, when the user clicks the action, we will execute a script.

22:26.920 --> 22:32.360
We will inject on the current tab, and we're just going to alert.

22:32.360 --> 22:34.000
We're going to skip over that for time.

22:34.000 --> 22:35.000
Skip the demo.

22:35.000 --> 22:36.800
Yeah, skip the demo.

22:36.800 --> 22:37.800
You get the idea.

22:37.800 --> 22:40.600
It works.

22:40.600 --> 22:47.640
So when we target Chrome, we're going to actually need to use a different entry point into the

22:47.640 --> 22:49.120
background context.

22:49.120 --> 22:50.640
We previously used scripts.

22:50.640 --> 22:52.960
That's what was used with pages.

22:52.960 --> 22:54.400
Chrome no longer supports background pages.

22:54.400 --> 22:56.200
It only supports a service worker.

22:56.200 --> 23:00.680
So we need to declare a different entry point.

23:00.680 --> 23:03.960
Again, you believe me that it works.

23:03.960 --> 23:07.640
The important thing now is we have two different entry points.

23:07.640 --> 23:11.000
And ideally, as an extension developer, you don't want to deal with having a bunch of

23:11.000 --> 23:14.040
different files in special configuration per browser.

23:14.040 --> 23:20.440
So in very recent versions of Chrome and Firefox, it's possible to declare both strips

23:20.440 --> 23:24.360
and service worker in the same manifest file.

23:24.360 --> 23:30.840
But because this is so recent, we don't want users with older versions of Firefox or Chrome

23:30.840 --> 23:37.840
to get these updates without, and have the extension fail to load and run.

23:37.840 --> 23:41.020
So we're going to add some guards to our manifest here.

23:41.020 --> 23:42.880
We have four Firefox.

23:42.880 --> 23:48.200
We have the gecko and gecko Android keys and the strict min version.

23:48.200 --> 23:52.000
It just coincidentally in both browsers is version 121.

23:52.000 --> 23:54.680
There's no association beyond that.

23:54.680 --> 24:03.800
And critically in Firefox, the ID field is required when uploading a manifest v3 extension

24:03.800 --> 24:06.040
to AMO.

24:06.040 --> 24:10.320
And then in Chrome, we target, again, 121.

24:11.320 --> 24:13.560
And that all works as expected.

24:13.560 --> 24:17.560
Wonderful.

24:17.560 --> 24:23.240
Over here, I want to highlight that scripts is an array.

24:23.240 --> 24:25.640
So it's possible to declare multiple files.

24:25.640 --> 24:30.960
And so you can have libraries or chunk your application up into different pieces in order

24:30.960 --> 24:35.040
to better organize your code, whereas service worker is a single entry point.

24:35.040 --> 24:40.640
So it's possible to achieve this multi-file loading thing with a slight tweak.

24:40.640 --> 24:46.040
In this case, we can use like a service worker JS file as your entry point.

24:46.040 --> 24:51.560
And then in that file, we're just going to use import scripts, which is special to worker

24:51.560 --> 24:52.560
contexts.

24:52.560 --> 24:57.400
It will synchronously import these scripts and execute them.

24:57.400 --> 25:03.120
So we can achieve the same result with, again, a single manifest file and a slight tweak

25:03.120 --> 25:06.960
to how we load service workers.

25:06.960 --> 25:08.720
We are going to skip this part.

25:08.720 --> 25:13.520
Basically another way to get the same functionality without the background script, if you care

25:13.520 --> 25:18.640
about cross-platform stability, but without dropping support for older versions, you

25:18.640 --> 25:23.960
can get rid of the background script and use a pop-up that opens when the button is clicked

25:23.960 --> 25:27.920
and close the pop-up.

25:27.920 --> 25:31.200
So let's talk about short-lived background context.

25:31.200 --> 25:36.640
In manifestv3, one of the major changes to the extension platform is in the past we had

25:36.640 --> 25:42.280
persistent background pages, and that's no longer an option for constraints outside of

25:42.280 --> 25:44.360
the browser's control.

25:44.360 --> 25:53.400
In order to be able to run everywhere and run efficiently, we necessarily limit when

25:53.400 --> 25:59.640
an extension, we terminate idle extensions background contexts.

25:59.760 --> 26:02.640
That has some important consequences for how you design and build your extension.

26:02.640 --> 26:10.240
So we're going to very quickly skip towards the end because of time.

26:10.240 --> 26:13.360
We have prepared, like, for over an hour, I guess, a presentation.

26:13.360 --> 26:20.400
So if this kind of interests you, you can look up the slides from the FOSTEM link.

26:20.400 --> 26:21.920
The speaker notes are also included.

26:21.920 --> 26:25.280
We don't see them here, but we make sure that the slides are understandable even without

26:25.280 --> 26:27.280
the video.

26:27.280 --> 26:29.320
Yes.

26:29.320 --> 26:34.640
It's also, I think, worth noting we're planning to expand on this and do, like, a webinar

26:34.640 --> 26:41.720
later to share some of this content and explore it with less time constraint.

26:41.720 --> 26:48.640
So hopefully we'll see you tuning into one of those sessions and answer some questions

26:48.640 --> 26:50.960
from you all about building browser extensions.

26:59.320 --> 27:00.320
Thank you.

27:00.320 --> 27:01.320
Bye.

