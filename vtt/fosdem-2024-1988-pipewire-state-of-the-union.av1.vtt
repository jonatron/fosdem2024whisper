WEBVTT

00:00.000 --> 00:15.160
Alright, okay. My name is Swim Taimans, I work for Red Hat and I started writing pipewires

00:15.160 --> 00:23.680
some seven years ago, I don't know anymore, way too long. I gave a talk about pipewires

00:23.680 --> 00:30.680
last year, so basically it's a follow-up on that, a little bit of things that happened in the last year.

00:30.680 --> 00:38.680
For those who don't know what pipewires is, it's basically a multimedia sharing and processing engine.

00:38.680 --> 00:47.680
So pipewire was originally built to send video frames from Wayland to applications because screen sharing

00:47.680 --> 00:55.680
in Wayland was completely unimplemented in anything, so there needed to be some way of funneling those frames around.

00:55.680 --> 01:04.680
It went to a whole bunch of iterations to make that happen. It started with G-streamers, some custom implementation,

01:04.680 --> 01:12.680
and then version 0.2, which is something that sort of worked, and then it sort of devolved into an audio framework

01:12.680 --> 01:17.680
because people think pipewire is for audio, but it's actually more for video.

01:17.680 --> 01:22.680
So it devolved into an audio framework and here we are now.

01:22.680 --> 01:32.680
So basically the core of pipewire is to link applications and hardware into a graph.

01:32.680 --> 01:37.680
It's very similar to what G-streamers does, you make a graph of processing elements.

01:37.680 --> 01:48.680
In pipewire's case, this is distributed, so it's an IPC mechanism to funnel multimedia around between apps, devices, and so on.

01:48.680 --> 01:58.680
So there's a whole bunch of multimedia that you can funnel around, cameras, screen sharing, but also audio.

01:58.680 --> 02:03.680
So pipewire tries to implement all of the APIs to make that possible.

02:03.680 --> 02:14.680
So there is support for Video for Linux, there is support for Bluetooth, there is a compatibility server for Pulse Audio apps,

02:14.680 --> 02:19.680
for audio, a compatibility library for Jack applications.

02:19.680 --> 02:32.680
So you get all of these things here, all sides covered, and you can also run Jack next to it, but in essence, it funnels data around.

02:32.680 --> 02:41.680
It's built in the same principle as G-streamers, so it doesn't exactly know what data is, it just funnels it around.

02:41.680 --> 02:45.680
And it does so very efficiently or try to.

02:45.680 --> 02:48.680
So that's basically where it is now.

02:48.680 --> 03:00.680
We managed to build a whole bunch of stuff on it and replace Pulse Audio and the Jack Demon in most test-tops now with pipewire.

03:00.680 --> 03:06.680
So 1.0 was released last year, so that was a major milestone.

03:06.680 --> 03:08.680
Very happy about that.

03:08.680 --> 03:22.680
So for that to happen, I wanted to have at least as good latency as Jack server so that we could actually replace pro-audio use cases with pipewire

03:22.680 --> 03:26.680
without having to sacrifice latency or performance.

03:27.680 --> 03:35.680
So that took a while, but it eventually worked and now we are on par with Jack regarding latency,

03:35.680 --> 03:46.680
and it's using quite a bit less CPU for large buffers, and it's getting almost a little bit better than Jack for very small buffers.

03:46.680 --> 03:48.680
So that's pretty good.

03:49.680 --> 03:54.680
One of the reasons for that is Jack is more efficient even at lower buffer sizes,

03:54.680 --> 04:01.680
but pipewire is more optimized in its conversion and funneling samples around.

04:01.680 --> 04:04.680
So that's the compromise, I guess.

04:04.680 --> 04:09.680
So compared to last year as well, we have now support for NETCHAC with Opus.

04:09.680 --> 04:12.680
I think it was a question last year, why don't you have that?

04:12.680 --> 04:14.680
Well, now it is there.

04:14.680 --> 04:18.680
So you can actually NETCHAC between Jack and pipewire.

04:18.680 --> 04:20.680
They're compatible.

04:20.680 --> 04:26.680
One thing that doesn't exactly work very well is firewire devices.

04:26.680 --> 04:29.680
The problem is that I don't have a firewire device.

04:29.680 --> 04:34.680
You can't really buy them anymore, so somebody needs to send me something.

04:34.680 --> 04:40.680
They are like â‚¬1,000, you can maybe buy, I don't know.

04:40.680 --> 04:46.680
It's also professional audio, so you need cables to connect.

04:46.680 --> 04:49.680
It's just not a plug and so on.

04:49.680 --> 04:55.680
So that's a little bit of a back home yet.

04:55.680 --> 05:01.680
What else are we working on right now for AES?

05:01.680 --> 05:03.680
It's basically RTP.

05:03.680 --> 05:13.680
It's used for various hardware, professional hardware, that does audio over TCP and IP.

05:13.680 --> 05:18.680
So you can interface with Dolmete devices and so on.

05:18.680 --> 05:21.680
It requires like a shared clock with PTP and all of that.

05:21.680 --> 05:24.680
So we have worked that in pipewire.

05:24.680 --> 05:29.680
You can run the graphs with PTP clocks, it syncs and all of that.

05:29.680 --> 05:31.680
So people are testing that.

05:31.680 --> 05:38.680
Very specialized hardware, I don't really have any of these things.

05:38.680 --> 05:46.680
On the other end, we are now past the audio stage and now we are going back to the video.

05:46.680 --> 05:54.680
Because last year, some things fell into place to make that possible.

05:54.680 --> 05:58.680
For example, video modifier support was added.

05:58.680 --> 06:00.680
It requires a multi-step negotiation.

06:00.680 --> 06:02.680
I have these modifiers, do you support that?

06:02.680 --> 06:03.680
No, I do.

06:03.680 --> 06:06.680
I do all but then what video formats and what resolutions.

06:06.680 --> 06:16.680
And you need to go back and forth to arrive at the video format that the compositor in this case and Gstreamer, for example,

06:16.680 --> 06:24.680
or any other application like OBS, to get the most efficient video frames negotiated.

06:24.680 --> 06:28.680
We also added support for compressed audio formats.

06:28.680 --> 06:38.680
So for Bluetooth, we are still tracking, it's a draft, low energy audio.

06:38.680 --> 06:47.680
There is development in Blues, which is the D-Bus service that runs and there are all the connections with devices.

06:47.680 --> 06:57.680
And it exposes a D-Bus API that an audio server such as PipeWire could use to talk to the Bluetooth devices.

06:57.680 --> 07:05.680
So there is development there and we are trying to track that and match it to make that work.

07:05.680 --> 07:11.680
Some small things that were added that we don't actually know what to use it for.

07:11.680 --> 07:17.680
Interesting things that are happening is the video support.

07:17.680 --> 07:21.680
So I hope this year this will continue going forward.

07:21.680 --> 07:31.680
So we added video support in Firefox, so that means that instead of Firefox going directly to the video for Linux device with IOCTLs,

07:31.680 --> 07:38.680
which is not so nice in sandboxes, but which also doesn't work with newer cameras,

07:38.680 --> 07:41.680
because newer cameras, they need much more setup.

07:41.680 --> 07:46.680
They need to control setup media controls and all of that.

07:46.680 --> 07:54.680
So there is a new library called Lib Camera that also handles these new kind of cameras that you are supposed to use.

07:54.680 --> 08:01.680
So instead of porting Firefox over to Lib Camera, it's better to port it over to PipeWire,

08:01.680 --> 08:11.680
because then you get all these cameras that are new, but you can also do some other things like send video frames between applications into Firefox.

08:11.680 --> 08:23.680
I was going to try to demonstrate that, but the video support in OBS is still a pending patch to make that happen, maybe next year.

08:23.680 --> 08:26.680
So there is also camera support there.

08:26.680 --> 08:36.680
So in OBS, it's an application for making screencasts and YouTube videos and stuff like that.

08:36.680 --> 08:41.680
So you can compose some things and try to demonstrate that.

08:41.680 --> 08:44.680
There is also a thing called virtual camera.

08:44.680 --> 08:51.680
So OBS can export its scene, and it looks like a camera that PipeWire makes,

08:51.680 --> 09:02.680
and then you can actually consume that feed into Firefox, and you can start chaining just like you would chain audio processing elements, but then with video.

09:02.680 --> 09:07.680
So that's hopefully something that we will try to make work this year.

09:07.680 --> 09:13.680
There's some more work needed to get that going.

09:13.680 --> 09:20.680
So we are bug fixing small improvements, because there is nothing really to be done on audio that we know it should work.

09:20.680 --> 09:33.680
And all the remaining problems are, in my opinion, I don't know yet, driver issues, timers that don't work so well, unpredictable delays in drivers.

09:33.680 --> 09:39.680
So I think the work needs to be done somewhere else.

09:39.680 --> 09:43.680
No immediate plans to fix there.

09:43.680 --> 09:46.680
So all the work goes into the video side of things.

09:46.680 --> 09:48.680
So video routing.

09:48.680 --> 09:56.680
So we're working on video converters so that we can convert between formats.

09:56.680 --> 10:04.680
Like if you want to implement certain shaders that work on one format and not on others, this should be made possible.

10:04.680 --> 10:12.680
Also processing filters with Vulkan shaders or processors.

10:12.680 --> 10:26.680
So here, so now that Firefox and OBS use pipe wire for the cameras, we need to start thinking, okay, this is now going to work in flat packs without having to open the whole socket.

10:26.680 --> 10:37.680
But then we can also start adding security, like the pop-ups, do you want to allow this camera, yes or no, or take away access to the camera if you don't want it anymore.

10:38.680 --> 10:43.680
So there's some talks about that to make that better.

10:43.680 --> 10:45.680
This is in-planet currently with the portal.

10:45.680 --> 10:52.680
But there are other use cases, like for example, we don't have any access control for audio in browsers at all.

10:52.680 --> 10:59.680
But that is something that we'll hopefully flesh out this year.

10:59.680 --> 11:02.680
Another thing, explicit sync support.

11:02.680 --> 11:17.680
Again, if you do the video processing, it's better to delay or like to queue up as much work in the GPU as you can and then have GPU itself synchronize all the buffers waiting for rendering and stuff like that.

11:17.680 --> 11:31.680
So explicit sync would transfer buffers and also file descriptor with it that you can use to wait for completion of the buffer data actually.

11:32.680 --> 11:35.680
So that's also something that we want to try to do.

11:37.680 --> 11:42.680
And then tooling and docs, the things we continue doing.

11:42.680 --> 11:46.680
So I was going to show you a little bit what it looks like the video.

11:46.680 --> 11:49.680
Everybody knows the audio.

11:49.680 --> 11:55.680
Also a little bit of tools here, I don't know if you know any of these things.

11:55.680 --> 11:57.680
So there's like a top thing.

11:57.680 --> 11:59.680
This is interesting.

11:59.680 --> 12:03.680
It doesn't do anything because there's nothing going on.

12:03.680 --> 12:08.680
But you can also get these things like a draw view.

12:08.680 --> 12:14.680
I'm showing how now because then you can see the cameras as well as a device.

12:14.680 --> 12:30.680
So if you, I don't know, let's see if this is going to do anything.

12:30.680 --> 12:35.680
Probably does, but there's no, it's going to the HDMI.

12:35.680 --> 12:39.680
Anyway, you can see, maybe it comes on the feet.

12:39.680 --> 12:41.680
I don't know.

12:45.680 --> 12:49.680
So you can have like a little look what's going on here.

12:49.680 --> 12:53.680
In this is a tree view of the graph basically.

12:53.680 --> 13:01.680
So you have like the audio driver is iterating and pulling in samples from another tool, PA Play.

13:01.680 --> 13:05.680
You can also see this as a graph view.

13:05.680 --> 13:16.680
And all of these things, you can link them together to other things.

13:16.680 --> 13:20.680
So right, so each of these devices and nodes are in a graph.

13:20.680 --> 13:22.680
You can visualize the graph.

13:22.680 --> 13:27.680
You can change the links between these things and do all these things.

13:27.680 --> 13:34.680
So for example, for OBS, this kind of what it is.

13:34.680 --> 13:38.680
Well, I made a very stupid scene, but you can make some interesting things.

13:38.680 --> 13:40.680
I don't know.

13:40.680 --> 13:43.680
You can put some backgrounds there and place yourself there.

13:43.680 --> 13:47.680
So this is using a screen sharing from one of my windows.

13:47.680 --> 13:57.680
I think the terminal, but it could be anything using pipe wire and also the capture, which is a new thing using pipe wire.

13:57.680 --> 14:04.680
And also these things here, the microphones, they are still a bit pulsed audio.

14:04.680 --> 14:07.680
You can look in the graph here.

14:07.680 --> 14:11.680
That's becoming a bit more complicated.

14:11.680 --> 14:15.680
But you can see these green, these yellow boxes here light up.

14:15.680 --> 14:18.680
So you'll see that hopefully a bit more.

14:18.680 --> 14:26.680
So you know Shell, that's the screencast stream that sends video to this one.

14:26.680 --> 14:29.680
That's the camera from OBS.

14:29.680 --> 14:37.680
Yeah.

14:37.680 --> 14:42.680
So I was going to show some Firefox things, but there is no export button here.

14:42.680 --> 14:51.680
So normally in OBS, you can now do so start streaming and send all of that to, I don't know, one of the hundreds destinations that are supported.

14:51.680 --> 15:02.680
But you can also start a new camera, a virtual camera, and then you could consume that camera or this composition in other pipe wire apps.

15:02.680 --> 15:13.680
So if we enable all these pipe wire apps and we make them as efficient as possible with all of the video modifiers and all of the tools that we get from Vulkan.

15:13.680 --> 15:16.680
Yeah.

15:16.680 --> 15:23.680
We should be a step closer to the ultimate goal.

15:23.680 --> 15:25.680
Yep.

15:25.680 --> 15:27.680
Some other thing that's interesting.

15:27.680 --> 15:34.680
I haven't shown that yet, which is basically called filter chain.

15:34.680 --> 15:36.680
So you can do this.

15:36.680 --> 15:40.680
You can make a small little file.

15:40.680 --> 15:46.680
Wait, let me see where I put that again.

15:46.680 --> 15:49.680
Yeah, this one.

15:49.680 --> 15:51.680
Yeah, it's a conflict file.

15:51.680 --> 15:57.680
It's not very easily, but I can imagine GUIs that generate these things, but nobody has written any of them.

15:57.680 --> 16:04.680
But you can basically make a little graph of lots of plugins and LV2 plugins.

16:04.680 --> 16:11.680
And you can link them together and then you can tell pipe wire to make a new sync of that.

16:11.680 --> 16:14.680
That's the input for applications to use.

16:14.680 --> 16:17.680
And then that is the output of this filter.

16:17.680 --> 16:21.680
So this is something that does again.

16:21.680 --> 16:33.680
And you can just then I'll use some debug here.

16:33.680 --> 16:40.680
Okay.

16:40.680 --> 16:44.680
You can run this graph.

16:44.680 --> 16:51.680
And if all goes well, you should also see new sync here.

16:51.680 --> 16:54.680
So this is this new thing that appears.

16:54.680 --> 16:58.680
So you can just stop this program again and take away the sync.

16:58.680 --> 17:02.680
So this is interesting.

17:02.680 --> 17:04.680
And did I quit?

17:04.680 --> 17:09.680
I can do it again.

17:09.680 --> 17:16.680
And so here is this new volume sync.

17:16.680 --> 17:21.680
So you can just on the fly create and remove devices if you want.

17:21.680 --> 17:24.680
It's a bit like pulse audio with loading modules.

17:24.680 --> 17:29.680
But in pipe wires case, you don't actually all need to load them into one demon.

17:29.680 --> 17:39.680
You can have separate programs starting and stopping them as they go.

17:39.680 --> 17:56.680
So for this filter chain, for example, that's used on for like implementing like sound correction for speakers and all of that.

17:56.680 --> 17:59.680
We haven't done any of these things on desktop yet.

17:59.680 --> 18:02.680
Also, maybe something we can do.

18:02.680 --> 18:13.680
Like for example, on Apple, you get the sound of of apples are so great because they do a lot of filtering to make the frequency match speakers and all of that.

18:13.680 --> 18:21.680
So if you don't have that, it sounds very thin and a lot of laptops, they need some extra processing to make them sound great.

18:21.680 --> 18:24.680
Sometimes why they sound a lot better on Windows.

18:24.680 --> 18:26.680
We don't do any of these things yet.

18:26.680 --> 18:35.680
So that's also something that we can do with these filters.

18:35.680 --> 18:36.680
All right.

18:36.680 --> 18:44.680
Something else that that I don't mention here because it's actually another project, which is the session manager.

18:44.680 --> 18:48.680
I've shown this.

18:48.680 --> 18:52.680
One big component in all of this is a session manager.

18:52.680 --> 18:56.680
We use wire plumber normally.

18:56.680 --> 19:03.680
So that one is kind of orchestrating all of the things that happen in the graph, the devices that appear.

19:03.680 --> 19:12.680
If a player comes where it's going to be linked, how it's going to be linked, is it going to do a mixing down mixing or is it going to need some filters before it does that.

19:12.680 --> 19:17.680
So all of these rules are external to pipe wire in in a session manager.

19:17.680 --> 19:20.680
So a lot of work is also happening there.

19:20.680 --> 19:25.680
It's a separate project.

19:25.680 --> 19:32.680
But yeah, there's, for example, a version five coming out where all of the conflict files are rewritten in a different way.

19:32.680 --> 19:37.680
So that's also a change or interesting things that are going to happen.

19:37.680 --> 19:46.680
For the pipe wire demon itself, I think it's kind of that's what it is.

19:46.680 --> 19:49.680
No new plans.

19:49.680 --> 19:52.680
Okay.

19:52.680 --> 19:53.680
Yep.

19:53.680 --> 19:54.680
So the usual.

19:54.680 --> 19:57.680
Yeah, we worked a lot on our documentation too.

19:57.680 --> 19:59.680
There's a lot more stuff there.

19:59.680 --> 20:04.680
Also the weekend as a whole lot of stuff.

20:04.680 --> 20:13.680
It's a bit difficult to organize all of these things, of course, and it's why am I.

20:13.680 --> 20:15.680
This is weird.

20:15.680 --> 20:17.680
I didn't start the browser.

20:17.680 --> 20:18.680
Well, I could do that.

20:18.680 --> 20:25.680
I guess.

20:25.680 --> 20:28.680
We got tons of information on the week.

20:28.680 --> 20:32.680
All of the stuff should normally be documented somewhere or another.

20:32.680 --> 20:35.680
So a few.

20:35.680 --> 20:41.680
Problem is that it's so, so much configuration and so much options that people get lost.

20:41.680 --> 20:44.680
I tried to do some simple guides.

20:44.680 --> 20:51.680
How do I enable multiple sample rates and you literally have make this file put that in it.

20:51.680 --> 20:53.680
That's it.

20:53.680 --> 20:56.680
So.

20:56.680 --> 20:59.680
All right.

20:59.680 --> 21:01.680
And get up.

21:01.680 --> 21:02.680
That's where we are.

21:02.680 --> 21:03.680
So yeah.

21:03.680 --> 21:04.680
Questions.

21:04.680 --> 21:11.680
Yes.

21:11.680 --> 21:16.680
Speaking of docs, I was looking at them just the other week.

21:16.680 --> 21:28.680
I assume you have the ability to use your own event loop manager rather than the basic tutorial, which says create this one of pipe wires.

21:28.680 --> 21:29.680
Yeah.

21:29.680 --> 21:34.680
So the question is, can you use your own event manager or do you have to use the pipe wire one?

21:34.680 --> 21:36.680
You can use your own one.

21:36.680 --> 21:46.680
The pipe wire one, you can make it and then you can get the file descriptor from it and add that to your own, to your own loop.

21:46.680 --> 21:48.680
So for example, no shell does that.

21:48.680 --> 21:52.680
It uses the G main loop.

21:52.680 --> 21:56.680
KD as well.

21:56.680 --> 22:05.680
Is there something or do you know some project which hooks in speech recognition into the audio part and creates subtitles on fly?

22:05.680 --> 22:07.680
What they're in the stream.

22:07.680 --> 22:14.680
The question is, is there an application that hooks in the audio stream and generates subtitles on the fly?

22:14.680 --> 22:17.680
No, but it's a great project.

22:17.680 --> 22:19.680
I think.

22:19.680 --> 22:25.680
Yeah.

22:25.680 --> 22:29.680
There's also the case, for example, of keywords.

22:29.680 --> 22:35.680
So listening for keywords like, hey, Google, okay, Google or something like that, or I don't know.

22:35.680 --> 22:40.680
Hello, Gnom.

22:40.680 --> 22:41.680
Yes.

22:41.680 --> 22:49.680
When you talked about consuming the virtual camera, would you be able to send those sources to multiple destinations?

22:49.680 --> 22:54.680
Yes, so the question is, does a camera can be sent to multiple destinations?

22:54.680 --> 22:55.680
Yes.

22:55.680 --> 23:03.680
So there can be multiple consumers from one camera in pipe wire.

23:03.680 --> 23:08.680
I can actually show that.

23:08.680 --> 23:10.680
Just to show what's going on.

23:10.680 --> 23:11.680
How am I going to do that?

23:11.680 --> 23:15.680
I can, for example, start OBS.

23:15.680 --> 23:17.680
So that's one using the camera.

23:17.680 --> 23:23.680
And there's also, let's say, I think there's an example here.

23:23.680 --> 23:30.680
It's in build.

23:30.680 --> 23:33.680
Build.

23:33.680 --> 23:35.680
Examples.

23:35.680 --> 23:37.680
I think it's called video play.

23:37.680 --> 23:40.680
Other way around.

23:40.680 --> 23:48.680
No.

23:48.680 --> 23:56.680
The thing is, of course, the second one has to have the same resolution of the first one.

23:56.680 --> 24:00.680
There's no conversion going on immediately.

24:00.680 --> 24:08.680
There's a way to reorganize the negotiation and all of that, but that is a GAM policy for wire plumber, I think.

24:08.680 --> 24:10.680
So that's,

24:10.680 --> 24:11.680
I think,

24:11.680 --> 24:14.680
it's not immediately implemented.

24:14.680 --> 24:16.680
Yeah.

24:16.680 --> 24:20.680
I was curious about the,

24:20.680 --> 24:22.680
the work capacity.

24:22.680 --> 24:25.680
I know that there is an AES-627 plan.

24:25.680 --> 24:31.680
And I also was wondering if it was the same thing for video, maybe a SIMPTP or an NDI or things like that.

24:31.680 --> 24:36.680
So the question is, RTP or network support for video?

24:36.680 --> 24:39.680
Completely unimplemented.

24:39.680 --> 24:40.680
At all.

24:40.680 --> 24:43.680
So only done for audio.

24:43.680 --> 24:46.680
Yep.

24:46.680 --> 24:47.680
No.

24:47.680 --> 24:57.680
The current stage, like, is it just, do you have, you've been involved with people who are using the AES-727 communication?

24:57.680 --> 24:59.680
Yeah, I know people are testing it.

24:59.680 --> 25:04.680
There's an issues page about the state of it.

25:04.680 --> 25:07.680
So I'll have to look it up what it is exactly.

25:07.680 --> 25:11.680
But you can find it if you look for AES in the issues.

25:11.680 --> 25:21.680
You find it on all of the hardware that people test with things they have, the tweets they have to do, and then we try to all, so that's ongoing.

25:21.680 --> 25:23.680
I have to go over here.

25:23.680 --> 25:24.680
Yeah.

25:24.680 --> 25:25.680
Yeah.

25:25.680 --> 25:34.680
Thank you for making it because I switched to hardware like two years ago and it was just a very pleasant experience because it just worked.

25:34.680 --> 25:36.680
Yeah.

25:36.680 --> 25:51.680
And I've also been using it in music related stuff and all the places Jack for me as well.

25:51.680 --> 25:52.680
Yeah, it's great.

25:52.680 --> 25:53.680
Cool.

25:53.680 --> 25:55.680
That was the plan.

25:55.680 --> 26:03.680
It wasn't the, if I have to repeat the question, it wasn't the question, it was just praise.

26:03.680 --> 26:06.680
Yeah, we have more questions.

26:06.680 --> 26:08.680
I have two questions.

26:08.680 --> 26:11.680
The first one is for the wire plumber.

26:11.680 --> 26:16.680
Does it have a ground using the place or it's just a direct command line?

26:16.680 --> 26:17.680
Command line.

26:17.680 --> 26:19.680
So the question is wire plumber.

26:19.680 --> 26:20.680
Does it have a GUI?

26:20.680 --> 26:21.680
No.

26:21.680 --> 26:22.680
No GUI.

26:22.680 --> 26:27.680
So you can, for example, have several applications and all the sources you can.

