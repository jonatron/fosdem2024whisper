WEBVTT

00:00.000 --> 00:07.000
Thank you very much.

00:07.000 --> 00:09.000
Thank you very much.

00:09.000 --> 00:12.000
And now let's get going with the next one.

00:12.000 --> 00:16.000
Decade of JDK updates in OpenJDK.

00:16.000 --> 00:24.000
Technically it's more than a decade now because we started doing JDK updates in OpenJDK a long, long time ago.

00:24.000 --> 00:29.000
But we'll just stick with the title.

00:29.000 --> 00:36.000
Don't take anything I say here as, I don't know, serious investment device or anything like that.

00:36.000 --> 00:39.000
Just saying I'm talking about code.

00:39.000 --> 00:43.000
So we have 10 years in less than 30 minutes.

00:43.000 --> 00:46.000
Let's go with the prehistory.

00:46.000 --> 00:52.000
We started doing updates in OpenJDK with the OpenJDK 6 project back in 2007.

00:52.000 --> 00:56.000
So, Sun, microsystems, some of you may know it.

00:56.000 --> 01:02.000
OpenSourced Java under OpenJDK back in 2006 for the first parts.

01:02.000 --> 01:05.000
That was the compiler and hotspot.

01:05.000 --> 01:11.000
And then delivered the rest in 2007 in May.

01:11.000 --> 01:18.000
But the rest at the time, well, let me show you.

01:18.000 --> 01:24.000
It was announced to OpenSource in November of 2006.

01:24.000 --> 01:28.000
But then we released Java 6 in December of 2006.

01:28.000 --> 01:32.000
And so, like I said, Sun opened Source the compiler and hotspot.

01:32.000 --> 01:35.000
But there is a lot more to the JDK than the compiler and hotspot.

01:35.000 --> 01:37.000
There's like all the libraries and stuff like that.

01:37.000 --> 01:40.000
And so that wasn't open source until May.

01:40.000 --> 01:42.000
And so Java 6 was released.

01:42.000 --> 01:45.000
But it wasn't open source yet.

01:45.000 --> 01:50.000
Instead, what Sun had released at the time was the in-development version of Java 7.

01:51.000 --> 01:54.000
And of course, it had changes that were different from Java 6

01:54.000 --> 01:57.000
because it's going on for a while developing.

01:57.000 --> 02:01.000
And so, we looked at that.

02:01.000 --> 02:04.000
And in particular, Joe Darcy from Oracle looked at that and said,

02:04.000 --> 02:06.000
this is a problem, let's fix it.

02:06.000 --> 02:11.000
So, he took the code from OpenJDK 7, the development version,

02:11.000 --> 02:16.000
and cut it down again, pare down to the Java 6 specification,

02:16.000 --> 02:22.000
and created the OpenJDK 6 project in 2007 that was based off OpenJDK 7,

02:22.000 --> 02:29.000
which leads us to this wonderful little crazy diagram of how OpenJDK 7 was born.

02:29.000 --> 02:32.000
You know, Java 6, there is builds and stuff,

02:32.000 --> 02:35.000
and then Java 7 development starts, and then 10 builds in,

02:35.000 --> 02:40.000
OpenJDK 7 happens, and then again, like, builds happen and happen and happen,

02:40.000 --> 02:42.000
like 20 of them and all of a sudden.

02:42.000 --> 02:44.000
Oh, yeah, OpenJDK 6, let's do that.

02:44.000 --> 02:45.000
That's a good idea.

02:45.000 --> 02:50.000
And so, we did that, and we did that quite successfully.

02:50.000 --> 02:56.000
For many, many years, Joe Darcy was the project lead for OpenJDK 6.

02:56.000 --> 03:08.000
He then got adopted by distributions, went into Debian, Gen2, Fedora, Red Hat,

03:08.000 --> 03:11.000
Oracle, you know, I guess, whatever else is there.

03:11.000 --> 03:17.000
And so, that was the first time we actually started doing updates for OpenJDK,

03:17.000 --> 03:21.000
for release in the community led by Joe Darcy,

03:21.000 --> 03:26.000
who's been from Oracle, for several years until 2011.

03:26.000 --> 03:34.000
At that time, we then started to, we then shipped JDK 11,

03:34.000 --> 03:37.000
and so Joe then moved on to do other things.

03:37.000 --> 03:41.000
Kelly O'Hare from Oracle took over for a few more years,

03:41.000 --> 03:49.000
and then in 2013, I think, that was the time when Java 6 reached the end of public updates.

03:49.000 --> 03:54.000
And so, at that time, it was also the end of the road for the Oracle maintainers

03:54.000 --> 03:58.000
of OpenJDK 6 in the OpenJDK community,

03:58.000 --> 04:04.000
because once we were done publishing public updates of the Oracle J-Ri,

04:04.000 --> 04:12.000
we were also done, of course, contributing to the open source version of the Java 6 documentation.

04:12.000 --> 04:14.000
And so, what happens next?

04:14.000 --> 04:20.000
Well, people who were using OpenJDK 6 were wondering what's going to happen.

04:20.000 --> 04:25.000
Will you be, I don't know, making us all pay tons of money to get Open Source fixes?

04:25.000 --> 04:30.000
Well, what we did was actually to create a process to have transitions between

04:30.000 --> 04:34.000
maintainers in the open source projects in OpenJDK.

04:34.000 --> 04:39.000
So, just as we transitioned from Joe to Kelly in 2011,

04:39.000 --> 04:44.000
once Kelly stepped down, once we were done contributing to OpenJDK 6,

04:44.000 --> 04:50.000
we then asked in the community, hey, so we're good, we've achieved what we set out to do.

04:50.000 --> 04:56.000
Is there somebody else in the community who has an interest and capability,

04:56.000 --> 05:02.000
very important bit, to maintain OpenJDK 6 project further?

05:02.000 --> 05:10.000
And as often, somebody appeared over there, that's Andrew, and said, yes, let me do it.

05:10.000 --> 05:15.000
And so, we worked with Andrew a bit, and it took over for a couple of years,

05:15.000 --> 05:22.000
and did this job until 2016, and then Andrew was also done maintaining OpenJDK 6

05:22.000 --> 05:28.000
as the lead maintainer as Project Lead, and said, all right, transition time.

05:28.000 --> 05:32.000
Is there anybody else who's willing to take over OpenJDK 6 updates and maintain them going forward?

05:32.000 --> 05:36.000
And then again, somebody else popped up, it was Andrew Brign.

05:36.000 --> 05:43.000
I don't think he's here from Azul, and he kept OpenJDK 6 alive for, I think, three or even,

05:43.000 --> 05:45.000
about three more years.

05:45.000 --> 05:52.000
And so, that means beyond the lifespan of OpenJDK 6, and it was initially sort of planned,

05:52.000 --> 05:56.000
it got extended by the community for a couple more years, actually,

05:56.000 --> 05:59.000
going through different maintainer changes along the way.

05:59.000 --> 06:04.000
And this is something that I think is quite unique to how OpenJDK does things.

06:04.000 --> 06:10.000
In most open source communities, changing maintainers is something that only happens when you get hit by a bus,

06:10.000 --> 06:12.000
or burn out, or whatever you do.

06:12.000 --> 06:16.000
We try to plan for these things, because sharing this possibility makes people grow.

06:16.000 --> 06:23.000
And so, putting people in these leadership roles, actually, it gives them opportunity to just grow personally,

06:23.000 --> 06:28.000
but also to actually do things differently, and maybe even better along the way.

06:28.000 --> 06:35.000
And so, to show you a bit of that, when Java 7 came out,

06:35.000 --> 06:41.000
we decided to actually make OpenJDK the reference limitation for Java.

06:41.000 --> 06:45.000
The platform. So, the specification has a reference limitation,

06:45.000 --> 06:49.000
and before Java 6, there was the Oracle Java 6 limitation.

06:49.000 --> 06:56.000
For Java 7, that's when we started doing the representation as the OpenJDK reference binary.

06:56.000 --> 07:06.000
So, that was good, because it meant that the reference limitation and the ship is OpenJDK 7 was the same thing.

07:06.000 --> 07:14.000
It also meant that, as with 6, with its complicated history of pushing things back and forward while they're different,

07:14.000 --> 07:20.000
and with all these costs that come with that, we could actually start from scratch with 7,

07:20.000 --> 07:27.000
and just do the updates of Oracle Java 7 and OpenJDK simultaneously from the same code base.

07:27.000 --> 07:38.000
So, we could actually not just move to OpenJDK as the official one-time reference limitation for Java 7.

07:38.000 --> 07:45.000
We could actually have a JDK 7 updates project where we developed the JDK 7 updates in the Open,

07:45.000 --> 07:52.000
in the OpenJDK community, and then use those as the basis to deliver the Oracle JDK updates in our case,

07:52.000 --> 07:56.000
or I don't know, Fedora updates or whatever else people did with that.

07:56.000 --> 08:02.000
So, that was a project I started in 2011.

08:02.000 --> 08:10.000
So, basically, I took over from Joe, and we did a few things differently.

08:10.000 --> 08:17.000
So, one of the things we did was we created a new project, which was different from the JDK release project itself,

08:17.000 --> 08:25.000
to be able to develop updates along with their own processes, because update releases are quite different from a JDK release.

08:25.000 --> 08:34.000
Back in the days, as I said before, two to four years for JDK release, big, large projects that have actually culminated in one deliverable.

08:34.000 --> 08:38.000
JDK updates more of a meat grinder.

08:38.000 --> 08:42.000
So, we have a three-monthly release cycle, basically.

08:42.000 --> 08:46.000
We have four CPU updates, critical patch updates per year.

08:46.000 --> 08:50.000
So, that's quite different from releasing like once every few years.

08:50.000 --> 08:53.000
This requires a very different process to accomplish.

08:53.000 --> 09:03.000
And so, that's what we then did, which we changed things quite a bit to make them work both for OpenJDK releases in the community,

09:03.000 --> 09:07.000
but also on the Oracle side of things, so that the Oracle JDK deliver,

09:07.000 --> 09:18.000
deliver could actually benefit from this process, from this code, from contributions, and actually keep contributing back to this model.

09:18.000 --> 09:22.000
And so, we did this, again, for a couple of years.

09:22.000 --> 09:30.000
So, I was the project lead for OpenJDK 7 updates for four years,

09:31.000 --> 09:37.000
and we introduced the concept of a maintainer team, so it wasn't just me doing stuff.

09:37.000 --> 09:47.000
It was a team of four or five people, including Sean Coffey, who is somewhere around here, and Rob McKenna from Oracle.

09:47.000 --> 09:58.000
And we did this for four years, and then again, JDK 7 from Oracle came to its end of public updates, as expected.

09:59.000 --> 10:02.000
And we said, guys, we're done here.

10:02.000 --> 10:08.000
It's just somebody else who would be willing to pick up the work on the updates we've done with the processes we've defined,

10:08.000 --> 10:11.000
and to take this further, if they wish so.

10:11.000 --> 10:17.000
And then somebody was capable of doing that, who has the community scale license and so on and so on,

10:17.000 --> 10:19.000
experience delivering JDK updates.

10:19.000 --> 10:22.000
And again, Andrew Haley appeared.

10:23.000 --> 10:29.000
So, he wasn't completely, I guess, wasted from maintaining OpenJDK 6,

10:29.000 --> 10:35.000
but he embraced the challenge to maintain OpenJDK 7 for a few more years.

10:35.000 --> 10:37.000
So, he did that.

10:37.000 --> 10:43.000
Whereas, in 2020, Andrew was then done and also passed on the torch.

10:43.000 --> 10:47.000
The same thing, as on the main list.

10:47.000 --> 10:53.000
And Andrew Brigham stepped up again and did OpenJDK 7 updates for a bit longer.

10:53.000 --> 11:06.000
And I put the final act to both OpenJDK 6 and OpenJDK 7 updates by doing the votes to actually archive the projects last year.

11:06.000 --> 11:12.000
So, there won't be any more updates to those, because they were basically at that point completely done.

11:12.000 --> 11:19.000
But it shows that we have a model that actually works in distributing responsibility for updates development,

11:19.000 --> 11:27.000
and that actually works in delivering something that's very rare across most open source communities.

11:27.000 --> 11:31.000
Long term maintained versions.

11:31.000 --> 11:41.000
So, and what we do at Oracle, when we were done with 7, we focused on 8, of course, on 8 updates.

11:41.000 --> 11:49.000
So, whenever a new project is created, there is basically a new update train just coming along.

11:49.000 --> 11:53.000
And as I mentioned, Sean was one of the maintainers for OpenJDK 7 updates.

11:53.000 --> 11:58.000
For OpenJDK 8 updates, Sean become the project lead.

11:58.000 --> 12:05.000
So, again, new possibilities, new set of eyes, look at the processes, new set of improvements to make to the process.

12:05.000 --> 12:08.000
And he did.

12:08.000 --> 12:14.000
And so, 8 was, as many of you probably know, a pretty big and significant release.

12:14.000 --> 12:21.000
Not just because of LAMDUS, but also because a lot of people used 8, and probably still use 8.

12:21.000 --> 12:25.000
And we kept adding features in the update project to 8.

12:25.000 --> 12:32.000
So, in 8 Update 20, we added a bunch of features in the VM, and the new port, 8 Update 40,

12:32.000 --> 12:40.000
we added a whole slew of VM features and a bunch of other stuff, Java FX stuff, whatever.

12:40.000 --> 12:42.000
Web views in 8 Update 60.

12:42.000 --> 12:48.000
Every six months, we used to pull in a lot of stuff in the JIDK8 updates project.

12:48.000 --> 12:50.000
And this is the thing that I mentioned before.

12:50.000 --> 13:00.000
That's a lot of work, and maybe it's too much work, because it leads to something that looks a bit like this.

13:00.000 --> 13:03.000
Like a beached whale a bit of a release.

13:03.000 --> 13:07.000
So, you start with the GA, and then you have this huge hump of features.

13:07.000 --> 13:09.000
You just, just one more feature to add.

13:09.000 --> 13:11.000
Just one little more feature to add.

13:11.000 --> 13:13.000
This is one more thing.

13:13.000 --> 13:19.000
And then eventually, after a few years, you know, the whale gets thinner, and at the end, just before you leave,

13:19.000 --> 13:24.000
there's just all these other leftover fixes you want to throw in as the big tail rips down.

13:25.000 --> 13:30.000
And, you know, that can work, but it's very, very stressful over time.

13:30.000 --> 13:38.000
And so, as you see here, every six months, in features, that's probably a good idea.

13:38.000 --> 13:40.000
We should do it for real releases, right?

13:40.000 --> 13:43.000
So, that's what we did for GA's.

13:43.000 --> 13:45.000
And for 8, we all did the same thing.

13:45.000 --> 13:47.000
We transitioned.

13:47.000 --> 13:49.000
Sean was a project lead for a couple of years.

13:50.000 --> 13:59.000
And then, 2019, Oracle's Java 8 went through the end of the public office process.

13:59.000 --> 14:04.000
And again, Sean asked on the list, again, is it Andrew Haley?

14:04.000 --> 14:06.000
Yes, it is.

14:06.000 --> 14:11.000
Andrew Haley stepped up again and became the open dedicated update project lead.

14:11.000 --> 14:16.000
So, that's how it carried on continued, right, for a while.

14:17.000 --> 14:23.000
And now we get to the modern times, which is a wonderful movie with Charlie Chaplin, I think.

14:23.000 --> 14:26.000
But also, what we do in the J.D.C. Update Project.

14:26.000 --> 14:31.000
So, with the modern times, as I said, we have now released every six months,

14:31.000 --> 14:38.000
so we can't really afford to maintain each one of those as the Oracle updates team forever.

14:38.000 --> 14:42.000
Because there is no such thing as the end of the public updates anymore, anyway.

14:43.000 --> 14:49.000
So, what we do, and Rob McKenna is now the project lead for the Update Project,

14:49.000 --> 14:56.000
we have a single project that just does all the updates for J.D.C. Versions after 9.

14:56.000 --> 15:00.000
And in this project, there are repositories for each different update train,

15:00.000 --> 15:05.000
like J.D.C. 11U or J.D.C. 21U or J.D.C. 17U.

15:05.000 --> 15:08.000
And these repositories have repository leads.

15:09.000 --> 15:15.000
And so, at Oracle, we lead the development of the updates for the first six months,

15:15.000 --> 15:22.000
and then we predictably step down, and as somebody else to carry the maintenance burden forward,

15:22.000 --> 15:26.000
if they so wish to do, and are capable of doing so.

15:28.000 --> 15:34.000
And so, the funny thing is, of course, that's not always the case, right?

15:34.000 --> 15:39.000
So, for 9, of course, Rob was a project lead for six months,

15:39.000 --> 15:42.000
and then nobody stepped up, obviously.

15:42.000 --> 15:47.000
Same for 10, and then for 11, hey, Andrew Haley stepped up,

15:47.000 --> 15:52.000
and became the 11 Updates repository lead, and has been so ever since, I think.

15:52.000 --> 15:55.000
Then the same for 12, nobody stepped up.

15:55.000 --> 16:01.000
For 13, then, not an LTS release, but an Azure MTS release,

16:01.000 --> 16:07.000
and the Uranus Terenco stepped up, and was the repository lead for a while,

16:07.000 --> 16:12.000
and then, as we'll stop doing that, and that was the end of J.D.C. 13 Updates,

16:12.000 --> 16:13.000
that's also archived.

16:13.000 --> 16:17.000
The same for 15, but you also stepped up, and then for 17,

16:17.000 --> 16:22.000
the LTS release Andrew stepped up, and still is active, I think.

16:22.000 --> 16:24.000
It's not correct when you said it in I believe.

16:24.000 --> 16:25.000
Oh, yeah, sorry.

16:25.000 --> 16:28.000
I'll fix it, we'll fix it in the post.

16:29.000 --> 16:32.000
Yeah, this lasts from like two years ago, sorry.

16:32.000 --> 16:36.000
I think it's more real, so we'll do 25 for those.

16:36.000 --> 16:43.000
And then for 21, 17 over there is the repository lead.

16:43.000 --> 16:46.000
So we have this model that's, I think, quite unique in the open source world,

16:46.000 --> 16:50.000
but I think works really, really well, because it's on one hand predictable,

16:50.000 --> 16:53.000
you know, when the subcontainer steps down.

16:53.000 --> 16:56.000
On the other hand, it allows others to actually step in,

16:56.000 --> 17:02.000
and continue to maintain a release for as long as they actually feel it's necessary for them.

17:02.000 --> 17:06.000
And that's not easy to pull off.

17:06.000 --> 17:11.000
And as part of that, we also have people who have been working to improve the documentation

17:11.000 --> 17:13.000
on continuity of the updates.

17:13.000 --> 17:22.000
So for example, in our wiki, we have some nice explanations of what it takes to actually

17:22.000 --> 17:26.000
get you fixed into an updates release train.

17:26.000 --> 17:29.000
And one of the funny things, and why I like to talk about process so much,

17:29.000 --> 17:35.000
is that if you set up the playing field right, good things just follow.

17:35.000 --> 17:41.000
And setting the playing field right here has been to actually process-wise get the fixes,

17:41.000 --> 17:48.000
not to happen in the updates project first, but to get them to happen on the feature release first

17:48.000 --> 17:51.000
in the JDK tree itself, where the action is.

17:51.000 --> 17:58.000
And only when they come in there, ready for that, to backport them to the corresponding update release

17:58.000 --> 18:00.000
that they're relevant for.

18:00.000 --> 18:08.000
And this avoids a whole lot of complications around, for example, only having fixes coming in to say 11,

18:08.000 --> 18:11.000
but then as we'll discover, you need them on 17 later.

18:11.000 --> 18:15.000
It just means you take what goes into 22 these days,

18:15.000 --> 18:24.000
and then pull it back to 21, 17, 11, or 8 as applicable.

18:24.000 --> 18:28.000
And that looks a bit complex in ASCII.

18:28.000 --> 18:30.000
That's because it is.

18:30.000 --> 18:34.000
And like I said, because we have a release every three months,

18:34.000 --> 18:39.000
the JDK update project is not the project you usually start out with,

18:39.000 --> 18:41.000
if you try to come up with the open JDK.

18:41.000 --> 18:42.000
It's a meat grinder.

18:42.000 --> 18:45.000
This is basically where the sausage gets made.

18:45.000 --> 18:48.000
And sausage making is never pleasant to watch.

18:48.000 --> 18:52.000
But if you do it right, the results can be very tasty.

18:52.000 --> 18:56.000
Even vegetarian sausages, so no worries.

18:56.000 --> 19:01.000
So, and just as an example how we do it,

19:01.000 --> 19:05.000
we go to GitHub, you can see the pull requests for the updates projects,

19:05.000 --> 19:11.000
and then they'll have corresponding tags on them that explain where they go.

19:11.000 --> 19:16.000
For example, this one has in its title the bug ID.

19:16.000 --> 19:21.000
If you go to the bug ID, you'll find in JIRA and open JDK,

19:21.000 --> 19:23.000
it has a bunch of labels to it.

19:23.000 --> 19:28.000
And the labels actually say for which releases this particular project,

19:28.000 --> 19:30.000
this particular fix is destined.

19:30.000 --> 19:37.000
So for example, this one was supposed to go into 17, into 8, and into 11.

19:37.000 --> 19:40.000
It was requested, and then the maintainer said, yes.

19:40.000 --> 19:44.000
He also said no when the field changes viscose.

19:44.000 --> 19:54.000
So with that, I'll say thank you for helping us make JDK better and working updates.

19:54.000 --> 19:59.000
I would encourage you to come and join us with the open JDK and do stuff with us.

19:59.000 --> 20:04.000
For that, I'll leave you to the other talks.

20:04.000 --> 20:06.000
Thank you.

