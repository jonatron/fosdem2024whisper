WEBVTT

00:00.000 --> 00:13.520
It's time for our first actual talk of the day, which is by a very frequent speaker

00:13.520 --> 00:18.920
who I didn't have to look up the introduction of, because every time I look at his talk,

00:18.920 --> 00:22.480
it's like, wow, I learned something very deep about Go.

00:22.480 --> 00:24.480
So, small applause.

00:24.480 --> 00:26.480
Okay, just...

00:26.480 --> 00:32.480
Hello, everybody.

00:32.480 --> 00:37.480
Well, I'm going to talk about the secret life of a Go routine.

00:37.480 --> 00:43.480
This comes from my interest about how Go works internally,

00:43.480 --> 00:47.480
and I was investigating how the Go routine works internally.

00:47.480 --> 00:53.480
So, when I started investigating it, my idea of how Go routines were created

00:53.480 --> 00:55.480
and all that stuff was something like this.

00:55.480 --> 01:03.480
A caring mother with a baby in her arms, taking care of that beautiful, full of joy baby.

01:03.480 --> 01:06.480
It wasn't like that, okay?

01:06.480 --> 01:11.480
I started digging into the code and I realized that it's more like this.

01:11.480 --> 01:14.480
And necromancer racing the deads.

01:14.480 --> 01:17.480
I was like, why? There's a reason for that.

01:17.480 --> 01:22.480
But before that, I'm going to talk about something more general, that is the Go scheduler.

01:22.480 --> 01:28.480
For understanding how the Go routine works, we need to understand how the scheduler works

01:28.480 --> 01:32.480
and how it is shaped.

01:32.480 --> 01:37.480
So, let's start with the different pieces of the Go scheduler.

01:37.480 --> 01:43.480
One of them is the P extract that is the representation of a virtual CPU.

01:43.480 --> 01:50.480
Whenever you say Go Max Prox, what you are saying is the number of pieces that the scheduler has.

01:50.480 --> 01:55.480
And a processor, as I said, is a virtual representation of the CPU.

01:55.480 --> 01:59.480
It can have a status that can be either running, c-scrolling, or g-stop.

01:59.480 --> 02:03.480
It has associated the current M.

02:03.480 --> 02:06.480
We are going to see what an M is in a moment.

02:06.480 --> 02:12.480
Then it has, each processor has a queue of Go routines that needs to be executed.

02:12.480 --> 02:15.480
And a list of free Go routines.

02:15.480 --> 02:18.480
We are going to see what free Go routines are later.

02:18.480 --> 02:21.480
And, of course, other metadata.

02:21.480 --> 02:26.480
This is a very shallow explanation of the scheduler.

02:26.480 --> 02:28.480
This is an over simplification.

02:28.480 --> 02:30.480
Of course, it's more complex than that.

02:30.480 --> 02:33.480
But, well, a lot of other metadata inside the PS track.

02:33.480 --> 02:35.480
Let's talk about the M.

02:35.480 --> 02:40.480
The M is the self-representation of an operating system thread.

02:40.480 --> 02:44.480
It's what is executing your code in the CPU.

02:44.480 --> 02:50.480
And it has associated normally the current Go routine that is running in this M, in this machine.

02:50.480 --> 02:57.480
And the current processor that is associated to this M, that can be null, actually.

02:57.480 --> 03:04.480
There are some cases where the M is not associated to a processor.

03:04.480 --> 03:06.480
But, in general, they are associated.

03:06.480 --> 03:09.480
And other metadata.

03:09.480 --> 03:15.480
Let's talk about, let me, let's talk about the scheduler itself.

03:15.480 --> 03:20.480
On top of all these M's and P's, there's a struct that is called a schedule.

03:20.480 --> 03:27.480
That is, it has all the, it has a list of all the, all the idle M's,

03:27.480 --> 03:29.480
all the M's that are not doing any work,

03:29.480 --> 03:34.480
all the idle P's, processors that have not, that are not doing any work.

03:34.480 --> 03:44.480
All the, at least of global runnable Go routines, a queue of work that is not associated to any specific processor for now.

03:44.480 --> 03:48.480
And a list of global free Go routines.

03:48.480 --> 03:50.480
Okay.

03:50.480 --> 03:54.480
And the start of our show, the Go routine.

03:54.480 --> 03:57.480
There's a struct that is called GStrug.

03:57.480 --> 04:00.480
That struct is, represents a Go routine.

04:00.480 --> 04:10.480
And a Go routine is composed by, in a lot of the stuff, but mainly you have a stack that is a two kilobytes chunk of memory.

04:10.480 --> 04:18.480
The program counter that is similar to the program counter in a thread that is pointing to the next, well, to the current instruction that is executing.

04:18.480 --> 04:22.480
The status of the Go routine that can be running, waiting, runnable.

04:22.480 --> 04:25.480
There's a lot of different statuses.

04:25.480 --> 04:31.480
The current M that is associated to this Go routine is being executed right now.

04:31.480 --> 04:32.480
And the wait reason.

04:32.480 --> 04:37.480
The wait reason is if the Go routine is waiting, they have to be waiting for something.

04:37.480 --> 04:39.480
They have to be a reason for waiting.

04:39.480 --> 04:41.480
And that's the way reason.

04:41.480 --> 04:43.480
There's a lot of other metadata.

04:43.480 --> 04:46.480
But let's take a look at the whole picture.

04:46.480 --> 04:57.480
As I said, we have the scheduler at the top left with a list of free Go routines, a list of runnable Go routines, a list of either processors, either machines.

04:57.480 --> 05:05.480
And we have running processors with running Go routines associated with machines and all that stuff.

05:05.480 --> 05:15.480
Also, another interesting thing is that at global level in the runtime, as global variables, we have a list of all the M's, a list of all the P's,

05:15.480 --> 05:17.480
and a list of all the Go routines.

05:17.480 --> 05:22.480
That really are three global variables in the runtime.

05:22.480 --> 05:27.480
Okay, but how Go routines are created?

05:27.480 --> 05:35.480
This is where the necromancer raising the dead's metaphor comes into place.

05:35.480 --> 05:44.480
Because whenever you create a Go routine with just Peggy's, you create a spawn a new Go routine and start running things on that.

05:44.480 --> 05:46.480
But that's not what is happening.

05:46.480 --> 05:52.480
There's two ways of creating a Go routine.

05:52.480 --> 06:01.480
One option is to create it from scratch and the other option is to reuse all Go routine that is no longer working.

06:01.480 --> 06:05.480
So this is what is happening.

06:05.480 --> 06:11.480
Whenever a Go routine finish, it's changed the state to dead.

06:11.480 --> 06:16.480
So all that free Go routines, actually they are dead Go routines.

06:16.480 --> 06:21.480
So whenever you need a new Go routine, you can reuse one of them.

06:21.480 --> 06:32.480
Or the other option, if there's no free Go routine or dead Go routine to reuse, you create a new Go routine full of life, you kill it, and then you raise that from the dead.

06:32.480 --> 06:34.480
So that's the process.

06:34.480 --> 06:37.480
And actually that is how it works in the source code.

06:37.480 --> 06:42.480
It was shocking for me and it was a funny way of representing this.

06:42.480 --> 06:44.480
So let's see an example of that.

06:44.480 --> 06:50.480
Imagine that I have this Go routine here that wants to create a new Go routine.

06:50.480 --> 07:03.480
What it's going to do is pick one of the free Go routines in the free list and raise that from the dead, convert that into a runnable, put that in the queue of the runnable Go routines of the processor,

07:03.480 --> 07:12.480
and call the scheduler and the scheduler is going to, well, and the scheduler is going to eventually execute that Go routine.

07:12.480 --> 07:19.480
Another option is this Go routine here wants to run a new Go routine, spawn a new Go routine, but there's nothing in the free list of the processor.

07:19.480 --> 07:33.480
So it's going to go to the global free list of the scheduler and pick a chunk of them, move them to the processor, and then pick one of them and raise that from the dead and add it to the queue.

07:33.480 --> 07:40.480
And finally you have the option of this one is it wants to create a new Go routine, but there's nothing in the global queue.

07:40.480 --> 07:44.480
So what it's going to do is create a new Go routine.

07:44.480 --> 07:52.480
It's going to kill it and then it's going to raise that from the dead and put in the queue and all that stuff.

07:52.480 --> 07:55.480
So that's how Go routines are created.

07:55.480 --> 08:01.480
Let's see how Go routines, how is the life of a Go routine.

08:01.480 --> 08:13.480
A Go routine can go through a lot of different states, can go to runable to running, from running to waiting, from waiting to runable, from running to preempted, from preempted to waiting.

08:13.480 --> 08:15.480
There's a lot of stuff.

08:15.480 --> 08:20.480
Let's see how, let's see all these transitions one by one.

08:20.480 --> 08:23.480
From runable to running.

08:24.480 --> 08:33.480
That happens when you for example have a Go routine have finished the job or a Go routine start waiting for something.

08:33.480 --> 08:35.480
So it's going to call the scheduler.

08:35.480 --> 08:39.480
So the scheduler is going to try to find another Go routine to execute.

08:39.480 --> 08:47.480
The first thing that is going to do is try to find a Go routine in the local processor, in the runable list of the local processor.

08:47.480 --> 09:03.480
If there's nothing, it's going to go to the global runable queue and it's going to take some of that, it's going to move that work into the processor, it's going to schedule one of that Go routines to be executed.

09:03.480 --> 09:08.480
Then if there's nothing in the global queue, it's going to go to the net pool.

09:08.480 --> 09:16.480
The net pool is this system that allows Go to do IO work in an efficient way.

09:16.480 --> 09:25.480
And what it does is do the IO work and whenever it's finished, it gets the Go routine runable again.

09:25.480 --> 09:31.480
But sometimes what we do is we need to find work to do.

09:31.480 --> 09:37.480
So we go to the net pool and check if something is already done and start executing that.

09:37.480 --> 09:43.480
If there's nothing in the net pool, we are going to steal work from other processors.

09:43.480 --> 09:51.480
And if not, we are going to help the garbage collector in the marked face.

09:51.480 --> 10:04.480
Well, once we have found a Go routine in all the process, we are going to mark that as running and we are going to assign the machine, the operating system thread to that Go routine.

10:04.480 --> 10:09.480
We are going to mark that as running and we are going to start executing the code.

10:09.480 --> 10:15.480
Another option is running, well, another change is running to waiting.

10:15.480 --> 10:25.480
One of the interesting part of this is it's exemplifies how Go routines are cooperative entities.

10:25.480 --> 10:30.480
So they cooperate to give you the sensation of concurrency.

10:30.480 --> 10:37.480
So the Go routine, when the Go routine needs to wait for something, is the own Go routine who parks itself.

10:37.480 --> 10:53.480
Whenever I have to write to a channel, for example, if the channel is not buffered and I have to wait for something, what I'm going to do as a Go routine is park myself, stop myself, check my state to waiting, set the wait reason,

10:53.480 --> 11:01.480
detach myself from the operating system thread and run the scheduler.

11:01.480 --> 11:12.480
It's the Go routine that is marking itself as waiting, the one that is calling the scheduler to schedule the new Go routine.

11:12.480 --> 11:19.480
So the scheduler is going to find another task and it's going to start running that.

11:19.480 --> 11:22.480
So what are the reasons why we can wait?

11:22.480 --> 11:31.480
If you go to the Go source code, and actually there's in the bottom right corner, I usually put some references to the Go source code,

11:31.480 --> 11:41.480
but well, if you go to that point in the Go source code, you are going to see the wait reasons and that's the least of all the wait reasons.

11:41.480 --> 11:45.480
There's no more, there's no less. That's all the wait reasons.

11:45.480 --> 11:47.480
Don't pay too much attention to that.

11:47.480 --> 11:50.480
I'm going to summarize that. If you want to take a look, you can go.

11:50.480 --> 11:56.480
But the summary is you have GC reasons, garbage collector reasons,

11:56.480 --> 12:01.480
mutex reasons, semaphore reasons, channel reasons, sleep reasons, and other reasons.

12:01.480 --> 12:09.480
That's mainly why the garbage, why the Go routines waits for something.

12:09.480 --> 12:15.480
Okay, from running to Cisco and to running or runable again.

12:15.480 --> 12:25.480
Well, the Cisco is an interesting part. The Cisco is basically calling the operating system to do something and that can be fast or can be slow.

12:25.480 --> 12:30.480
And for some Cisco, it's kind of obvious, but for some Cisco, it's not so obvious.

12:30.480 --> 12:43.480
So what it does is whenever you enter in a Cisco, whenever you try to execute a Cisco, it's going to detach from the processor

12:43.480 --> 12:50.480
and it's going to detect if the Cisco is slow or fast.

12:50.480 --> 12:56.480
And if it's a fast Cisco, it's going to finish the Cisco and go back directly to running.

12:56.480 --> 13:04.480
But if the Cisco is slow, it's going to just stay in Cisco state

13:04.480 --> 13:07.480
and it's going to detach the processor.

13:07.480 --> 13:14.480
Well, it's going to keep the processor detached so the processor can select another Go routine to execute

13:14.480 --> 13:25.480
and it's going to finish the Cisco eventually and whenever it finish, it's going to move the Go routine to runable again

13:25.480 --> 13:30.480
and then queue that in a processor and all that stuff.

13:30.480 --> 13:36.480
The other thing that is interesting is the copy stack status.

13:36.480 --> 13:43.480
Whenever a Go routine needs to grow the stack because it needs more space for the function parameters

13:43.480 --> 13:54.480
or for the local variables of the function execution, it's passed through this process that it's going to move from running to copy stack.

13:54.480 --> 14:05.480
It's going to reserve the double of the current stack size in memory, copy over all the information from one place to another

14:05.480 --> 14:14.480
and change the pointers and then it's going to move back from copy stack to running again.

14:14.480 --> 14:22.480
From waiting to runable, this is a very interesting case because, again, as I said, Go routines are cooperative.

14:22.480 --> 14:33.480
So normally, a Go routine, it's changed from waiting to runable whenever other Go routine calls go ready.

14:33.480 --> 14:42.480
Whenever other Go routines say to my Go routine that it's ready to keep executing, we are going to see examples of that later.

14:42.480 --> 14:53.480
So whenever Go ready is called, for example, if a Go routine is sending something to a channel and some other Go routine is waiting,

14:53.480 --> 15:01.480
it's going to wake up that Go routine, it's going to mark us ready that Go routine.

15:01.480 --> 15:12.480
Then it's going to mark us ready, it's going to add that to the queue of the processor and try to get a processor to execute that.

15:12.480 --> 15:22.480
Another way is when you reactivate a list of Go routines that happens, for example, when the garbage collector have to reactivate some of the Go routines

15:22.480 --> 15:38.480
and then the garbage collector are waiting for the garbage collector phase, for the mark phase, and when that's finished, it's going to wake up a list of Go routines.

15:38.480 --> 15:43.480
Another case, it's when there's a case where it doesn't need to wait.

15:43.480 --> 15:51.480
Imagine that you say, hey, I'm going to wait for X, but that X is already fulfilled, so I'm going to go back to runable directly.

15:51.480 --> 16:06.480
Another thing is when you are trying to find a Go routine to execute the scheduler, you check the scheduler, sorry, you check the net pool,

16:06.480 --> 16:16.480
and the net pool sometimes has these Go routines that in theory they are waiting, but the data is already there or the job is already done.

16:16.480 --> 16:22.480
So it just moved that app from waiting to runable.

16:22.480 --> 16:29.480
Okay, from running to preempt to waiting or runable.

16:29.480 --> 16:37.480
Go has a preemptive garbage collector, has a preemptive runtime,

16:37.480 --> 16:52.480
and what it does is when a Go routine is executing for too much time, the system monitor is going to detect that and it's going to send a signal to the operating system thread that is executing the Go routine.

16:52.480 --> 17:06.480
That signal is going to mark the Go routine as preempt, so it's going to be moved from running to preempt, and eventually the Go routine itself is going to find the time for moving from preempt to waiting.

17:06.480 --> 17:17.480
And after the next garbage collector scan, it's going to move from waiting to runable again.

17:17.480 --> 17:24.480
So again, this is the whole life cycle, runable, running, syscall, waiting, preempt, govistak.

17:24.480 --> 17:30.480
Now all these states should be more obvious or more clear to everybody.

17:30.480 --> 17:39.480
There are some other kind of similar states of parallel states related to garbage collector.

17:39.480 --> 17:50.480
This is again a bit of a simplification, but this is in general what is the kind of state that you have in the Go routines.

17:50.480 --> 17:52.480
So let's see some examples.

17:52.480 --> 17:56.480
Imagine that you have a channel and you want to send data to that channel.

17:56.480 --> 18:04.480
The channel is not buffered, and there's nobody else waiting for that.

18:04.480 --> 18:11.480
So I try to send the data and because nobody's waiting, I'm going to need to wait for that.

18:11.480 --> 18:23.480
So I'm going to park myself, the Go routine is going to park itself, it's going to add itself to a list of Go routines that is inside the extract of the channel, and it's going to wait there.

18:23.480 --> 18:30.480
So it's there, it's waiting, and eventually another Go routine comes to read from the channel.

18:30.480 --> 18:47.480
What it's going to do is go there, read the data directly from the memory of the other Go routine, and then when it has the data, it's going to call Go ready on that Go routine saying this Go routine is already prepared to keep going.

18:47.480 --> 19:00.480
It's going to, and that's going to end in this state, and eventually the scheduler is going to select that Go routine to be run and everything is going to keep going.

19:00.480 --> 19:16.480
Yeah, this is the whole picture, trying to send the data, waiting inside the channel, getting the data from the other side, and the other Go routine is the one that is responsible of waking up the Go routine that was waiting in the channel.

19:16.480 --> 19:25.480
Let's see another example. Let's talk about the wake groups. For example, I can create a wake group and add three in this case. This is a very common pattern.

19:25.480 --> 19:37.480
And then I just found three Go routines that are going to do certain work in parallel. Then I'm going to wait at that point, maybe one Go routine is already running, maybe not, doesn't matter.

19:37.480 --> 19:46.480
So I call wait, so I'm now waiting. The Go routines keep going, maybe some of them are executed, maybe some of them have finished already, doesn't matter.

19:46.480 --> 20:04.480
Some of them finish and are there. And the last one, the last one is going to call done, the last done, and it's going to see that, hey, the wake group is already zero, so I'm going to call ready on the list of Go routines that are waiting for this wake group.

20:05.480 --> 20:20.480
So that end up with this situation where that's a runnable Go routine that is going to eventually be executed by the, well, that is going to be a schedule by the scheduler, and that's it.

20:20.480 --> 20:22.480
Again, the whole picture here.

20:23.480 --> 20:48.480
Okay, let's talk about how Go routines die. There's a Go routine normally dies when it finished the work. Basically, whenever there's nothing else to execute, it's going to change the state to that, it's going to set most of the data to the zero value, it's going to disconnect the Go routine from the end,

20:49.480 --> 20:57.480
add the Go routine to the free list of the processor, the dead Go routine to the free list of the processor, and call the scheduler to find anything else to execute.

20:59.480 --> 21:12.480
So, yeah, the whole life of the Go routine. Again, if you see this is the scenario where the Go routines are doing things. If I did my job correctly, you now should understand this better.

21:13.480 --> 21:21.480
And also this should sound familiar to. So let me finish with a couple things.

21:22.480 --> 21:32.480
One of them is I want to thanks Laura Pareja, the one that did all the illustrations for this talk. All the illustrations are creative common by.

21:33.480 --> 21:41.480
And you can see the webpage of Laura Pareja. So you can reuse it that do whatever you want with all that images.

21:42.480 --> 21:53.480
Also, I want to, I have a gift from MatterMos that is my company, they're the company that I work for. I have some stickers. I going to left out the stickers there, like Margie said.

21:53.480 --> 21:58.480
So that's exactly right there.

21:59.480 --> 22:02.480
So feel free to pick as many as you want.

22:02.480 --> 22:10.480
But I don't know if, well, I also have some pins too, but they are going to fly probably.

22:13.480 --> 22:15.480
Another thing is what is missing.

22:16.480 --> 22:24.480
I haven't talked about certain things because in the sake of simplicity, I try to avoid getting too much into the details.

22:25.480 --> 22:31.480
One of the things that I removed from the equation and have a lot to do with Go routines is garbage collector.

22:32.480 --> 22:44.480
I ignore the garbage collector entirely and it's a big chunk of how the scheduler interacts and how the Go routines are moving from one stage to another and all that stuff.

22:45.480 --> 22:55.480
The net pool, I mentioned the net pool, but I haven't entered into the details. There's very good talks about the garbage collector and the net pool out there.

22:56.480 --> 23:03.480
I know SIGO. Also, SIGO have certain implications with the Go routines also, but I have ignored them.

23:04.480 --> 23:12.480
The mark assist phase that is kind of important is a relevant part of things that Go routine does, assisting the garbage collector in the mark phase.

23:12.480 --> 23:18.480
This is the monitor that I have mentioned, but I haven't talked in detail about that.

23:19.480 --> 23:23.480
But again, there's talks around system monitor out there.

23:24.480 --> 23:33.480
One of the main references is the Go source code. I totally recommend you to go there and explore it.

23:33.480 --> 23:39.480
There's an illustrated text of Go runtime scheduler that is a YouTube video there.

23:40.480 --> 23:51.480
There's a series of posts from Argonel Labs about the Go scheduler. It's from 2018, so it's not super up today, but the general patterns are still there.

23:52.480 --> 24:04.480
Well, I hope this talk, after this talk, you have a better understanding of how the Go routines work, how the Go routines change from one state to another and all that stuff.

24:05.480 --> 24:16.480
But I want, what is more important to me, I want to encourage you to go there and explore the Go source code because it's a great source of information.

24:16.480 --> 24:20.480
There's a lot of super cool stuff there.

24:23.480 --> 24:32.480
And well, and depending on a combination of your passion about learning and your taste in movies, this can be more exciting than a zombie movie.

24:33.480 --> 24:34.480
So thank you.

24:34.480 --> 24:46.480
If you want to keep in touch with me, feel free to contact me.

24:47.480 --> 24:54.480
And the other thing, if you want to have a follow up session, then try this.

24:55.480 --> 24:59.480
If you want to have a follow up session, asking questions or whatever, feel free to join there.

25:00.480 --> 25:01.480
If you're leaving.

25:04.480 --> 25:05.480
Thank you.

