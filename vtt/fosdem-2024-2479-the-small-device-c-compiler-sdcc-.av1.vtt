WEBVTT

00:00.000 --> 00:12.840
So, welcome to the small device C compiler.

00:12.840 --> 00:19.520
Talks about such short, so I'll try to fit in just a basic stuff.

00:19.520 --> 00:23.760
I'll start with a quick introduction on what the small device C compiler is.

00:23.760 --> 00:33.320
Then I talk about the architectures we target and then just a little bit of what the future

00:33.320 --> 00:36.440
hopefully brings for the small device C compiler.

00:36.440 --> 00:43.320
Okay, so STCC is, as the name says, C compiler.

00:43.320 --> 00:51.200
It tries to support C standards, in particular either C19, 99, 11 and 23.

00:51.200 --> 00:56.680
It's nearly always used as a free-standing implementation.

00:56.680 --> 01:04.880
The only exception I know of is that FASIX, an operating system for some 8-bit systems

01:04.880 --> 01:08.200
use it as a part of a hosted implementation.

01:08.200 --> 01:13.240
Now, those familiar with the C standard know that in a free-standing implementation, you

01:13.240 --> 01:16.720
are more restricted in particular in features from the standard library set.

01:16.720 --> 01:21.840
You can use course, well, on your device there's no file system, there's no point in

01:21.840 --> 01:27.640
using any standard library functions trying to open read or write files.

01:27.640 --> 01:33.120
There are some supporting tools, apart from the compiler itself, in particular SM plus,

01:33.120 --> 01:39.480
a linker and a simulator.

01:39.480 --> 01:44.440
The simulators are usually kind of cycle accurate.

01:44.440 --> 01:51.120
We mostly use them for our regression testing internally, but they are also usable by end

01:51.120 --> 01:55.720
users who want to run their programs on a simulator rather than on real hardware.

01:55.720 --> 01:57.920
It works on many house systems.

01:57.920 --> 02:07.280
Most popular would be Linux and Windows, but it works fine on free BSD and so on.

02:07.280 --> 02:13.440
We target various 8-bit architectures, probably more than any other compiler does, and we have

02:13.440 --> 02:18.800
some unusual optimizations that do make sense on these targets where you really have very

02:18.800 --> 02:24.920
little memory and where both optimizing for code size and for memory use are very important

02:24.920 --> 02:28.960
and often more important than optimizing for speed.

02:28.960 --> 02:36.680
Our user base consists mostly of developers targeting embedded systems.

02:36.680 --> 02:44.000
I guess they make about two-thirds of SDCC users, and the rest are retro gaming and

02:44.000 --> 02:50.560
retro computing enthusiasts because we also support various older 8-bit architectures.

02:50.560 --> 02:56.560
They're similar enough to modern 8-bit microcontrollers that it makes sense to have them all in the

02:56.560 --> 03:00.760
same compiler and many high-level optimizations can be shared.

03:00.760 --> 03:08.680
But I believe that the user base in the end benefits of having both these groups represented

03:08.680 --> 03:14.600
cause sometimes one group or the other is more eager to try some new feature, which of course

03:14.600 --> 03:20.400
helps us finding all the bugs in corner cases and iron out everything, while then more conservative

03:20.400 --> 03:27.880
users that want to wait for longer than getting in a more polished state.

03:27.880 --> 03:33.680
Our latest release was at the end of January, which is very recently, typically we do one

03:33.680 --> 03:38.440
release per year.

03:38.440 --> 03:43.200
So the project is hosted at SourceForge.

03:43.200 --> 03:45.240
We have our issue trackers there.

03:45.240 --> 03:48.120
We have mailing lists for communication.

03:48.120 --> 03:53.080
The users have version repository.

03:53.080 --> 03:57.600
The user weekly for some documentation outside the manual.

03:57.600 --> 04:04.600
And we have a compile farm for nightly regression testing, which means every night on many different

04:04.600 --> 04:10.160
host systems, both in terms of operating system and underlying architecture.

04:10.160 --> 04:16.520
The latest SDCC from Drunk is built and then runs all the regression tests, meaning compiling

04:16.520 --> 04:21.280
a lot of tests, running them on the simulators to see if the results are what they should

04:21.280 --> 04:22.280
be.

04:22.280 --> 04:28.440
There's something between 10,000 or 20,000 tests that are executed that way and also

04:28.440 --> 04:33.720
incorporates a large part of the GCC test suite.

04:33.720 --> 04:38.720
A quick comparison to more known compilers.

04:38.720 --> 04:44.800
We don't see ourselves as a competitor to GCC or LLVM, so the versus up there is just

04:44.800 --> 04:46.400
for a comparison.

04:46.400 --> 04:52.000
Now we specialize in targets that are hard to support in GCC and LLVM.

04:52.000 --> 04:57.560
For GCC or LLVM, you typically want some risk like architecture, many registers, uniform

04:57.560 --> 04:58.560
instructions set.

04:58.560 --> 05:03.080
Then you can use a tritine style register allocator and that's efficient and everything

05:03.080 --> 05:04.320
is nice.

05:04.320 --> 05:08.200
The typical 8-bit architecture is not like that.

05:08.200 --> 05:13.000
If you want to get into the compiler, there's a compiler developer, our learning curve tends

05:13.000 --> 05:14.760
to be less deep than GCC.

05:14.760 --> 05:22.680
Our internal interfaces tend to be more stable than LLVM, which for some people is also a

05:22.680 --> 05:26.120
nice feature.

05:26.120 --> 05:30.120
Talking about the recent release, our main improvements were definitely in the last

05:30.120 --> 05:35.440
two years in standard compliance, in particular ISOC23 support.

05:35.440 --> 05:40.800
This was partially funded as a project by the prototype fund from the German Ministry

05:40.800 --> 05:47.880
of Education and Research and improvements and optimizations, in particular generalized

05:47.880 --> 05:52.120
constant propagation to allow us to narrow variables.

05:52.120 --> 05:57.120
If people use an int as a loop counter, that's typically a waste of memory in an 8-bit target

05:57.120 --> 06:02.520
if that loop doesn't really need the 16-bit that an int has on those targets.

06:02.520 --> 06:08.800
The work in optimizations was partially founded by an LNET via the NGI-0 initiative.

06:08.800 --> 06:16.720
We also got two new parts, namely one for the WDC6502 and one for the SCR800.

06:16.720 --> 06:23.760
One is the MOS6500 derivative and the other is the SET80 derivative.

06:23.760 --> 06:28.040
Let's get to the parts.

06:28.040 --> 06:35.560
The STM8 part is our best one because we generate really good code for the STM8.

06:35.560 --> 06:37.880
It's currently the most advanced part.

06:37.880 --> 06:41.320
It has all the bells, whistles and great features.

06:41.320 --> 06:44.720
We do very well compared to the non-free compilers.

06:44.720 --> 06:49.920
Unfortunately, recently this architecture has become not recommended for new devices.

06:49.920 --> 06:54.560
The manufacturer tries to move their customers to arm.

06:54.560 --> 07:01.400
But just to illustrate how we do versus three other compilers, which are all non-free, in

07:01.400 --> 07:07.360
terms of benchmark scores, we generate the fastest code essentially, except for WEDSTONE,

07:07.360 --> 07:09.360
which is a floating-point benchmark.

07:09.360 --> 07:11.720
We didn't put as much emphasis on it.

07:11.720 --> 07:19.440
And we also generate reasonably small code also for all of these benchmarks here.

07:19.440 --> 07:24.040
This is with the current release in January versus the current versions of these non-free

07:24.040 --> 07:27.040
compilers.

07:27.040 --> 07:31.480
Now our oldest part is for the 8051 and its derivatives.

07:31.480 --> 07:35.720
That's an ancient microcontroller architecture that Intel introduced long, long ago and abandoned

07:35.720 --> 07:37.120
long, long ago.

07:37.120 --> 07:41.160
And there are still many dozens of manufacturers that make compatible devices.

07:41.160 --> 07:44.360
It's a very, very popular common microcontroller architecture.

07:44.360 --> 07:46.680
It's not as nice as STM8.

07:46.680 --> 07:49.800
It was the first supported architecture in STCC.

07:49.800 --> 07:56.560
But in the recent years, it has fallen a bit behind new features that got added for other

07:56.560 --> 08:02.400
architectures, didn't always get added to 8051.

08:02.400 --> 08:08.240
And also many devices made by different manufacturers are also often slightly different, in particular

08:08.240 --> 08:14.880
new features like additional data pointer registers, which are used in different ways.

08:14.880 --> 08:17.480
We have support for the HTC rate and ST rate.

08:17.480 --> 08:21.560
It's current microcontroller architecture by NXP.

08:21.560 --> 08:26.760
The problem is there's not really much of a free open source community around this architecture.

08:26.760 --> 08:31.040
There's individual bits here and there that someone wrote some free software for it.

08:31.040 --> 08:36.800
But in general, it seems a typical sentiment by developers of ST08 programs as well.

08:36.800 --> 08:41.680
We get the, at no monetary cost, we get the development environment for the manufacturer.

08:41.680 --> 08:43.600
Why should we try something else?

08:43.600 --> 08:50.320
And sometimes they complain a bit if the manufacturer drops the part for an older device.

08:50.440 --> 08:59.520
As per DOC, a Taiwanese company that makes billions of microcontrollers each year that are not

08:59.520 --> 09:05.000
that expensive, they were not really meant to be programmed in C.

09:05.000 --> 09:11.600
But we still managed to support them, at least three of the four subarchitectures that exist

09:11.600 --> 09:14.120
we already support.

09:14.120 --> 09:16.480
The largest one, the PDK says, not yet supported.

09:16.480 --> 09:21.360
One thing interesting about these is that they have hardware multishrating support,

09:21.360 --> 09:22.920
which we currently don't support.

09:22.920 --> 09:30.320
What we can do is write a C program, run it on one core and then the other cores run a sampler software.

09:32.920 --> 09:34.400
There's microchip pick.

09:34.400 --> 09:38.960
Those used to be very popular because they were cheap.

09:38.960 --> 09:45.640
The ports are currently un-maintained, but we still get sometimes contributions from users with patches.

09:45.680 --> 09:47.840
It's not like they're completely abandoned.

09:47.840 --> 09:52.320
Maybe sometime a maintainer will step out of these user contributions.

09:56.160 --> 10:01.680
Okay, now we get to the architectures relevant to the retro computing people.

10:01.680 --> 10:07.160
These are a large number of Z80 derived architectures.

10:07.160 --> 10:13.480
The SM83 might be known to most people here as a CPU from the Game Boy,

10:13.520 --> 10:18.680
even though it's also found in some other Japanese appliances and TV remotes.

10:18.680 --> 10:26.680
And then we have the MOS 6502 and its derivatives, which don't even fit on the line anymore.

10:26.680 --> 10:32.280
They're found in old embedded systems, especially those R2K to R3K, those other rabbits.

10:32.280 --> 10:41.880
They were very early IoT devices because they are kind of enhanced Z80 with ethernet or Wi-Fi on support on the chip.

10:43.800 --> 10:48.600
But these architectures are relevant to the retro computing community,

10:48.600 --> 10:53.760
which often doesn't use SDCs directly, but instead via downstream projects.

10:53.760 --> 11:03.560
They package SDCC together with libraries for certain devices that use these things like video game consoles or historic computer systems.

11:03.560 --> 11:14.560
Now, what will the future look like for SDCC?

11:14.560 --> 11:23.040
We're definitely facing a problem at the moment because the SDM8, the architecture for which we're doing really great,

11:23.040 --> 11:29.560
and those rabbit devices that I mentioned on the retro computing side,

11:29.560 --> 11:33.560
are both not recommended for new devices anymore.

11:33.560 --> 11:44.560
Meaning that the architectures for which we really, the architectures where we really do great as a compiler are about to be phased out.

11:44.560 --> 11:50.560
We will keep supporting them, probably unlike many of those commercial compilers.

11:50.560 --> 11:56.560
I mean two of the three commercial compilers for the SDM8 haven't even seen any update for the last two years.

11:56.560 --> 12:06.560
But to stay relevant for current embedded systems, we need to try something else.

12:06.560 --> 12:17.560
And basically this is the idea. The main thing is putting the focus on the MCS-51, the 80-51 again.

12:17.560 --> 12:21.560
It's an ancient architecture. It's not exactly the nicest architecture.

12:21.560 --> 12:29.560
But due to the large number of hardware vendors, it's not likely to die any time soon.

12:29.560 --> 12:36.560
And looking at the reasons why users choose non-free compilers versus SDCC for the 80-51,

12:36.560 --> 12:45.560
the main reason is definitely that the main non-free compiler for this architecture can optimize better for code size.

12:45.560 --> 12:52.560
So this slide about the future is basically a very rough outline for plans for the next two years.

12:52.560 --> 13:00.560
And generating better code in the MCS-51 port is definitely something that we want to do.

13:00.560 --> 13:06.560
We will look a little bit into the SDM8, but due to the lack of community behind it,

13:06.560 --> 13:08.560
there's probably not that much that can be done.

13:08.560 --> 13:18.560
We still try to keep the SDM8 up to the other ports feature-wise, even if maybe not optimization-wise and code generation-wise.

13:18.560 --> 13:27.560
For the PDORC things, it would be nice to be able to support the multishrating better and also support the one remaining subarchitecture.

13:27.560 --> 13:37.560
And then there's this F8 thing, which is basically a very early project to maybe come up with our own architecture.

13:37.560 --> 13:46.560
I've worked on the compiler for a long, long time and very often there was a feeling this could have been done a little bit better in this architecture,

13:46.560 --> 13:53.560
or that could have been done a bit better, it would have made it a much better target for C compilers.

13:53.560 --> 13:58.560
The SDM8, for example, is a really good architecture.

13:58.560 --> 14:01.560
It has things like stack pointer relative addressing modes.

14:01.560 --> 14:07.560
That's one, something that you really want for local variables in C because then you want them on the stacks,

14:07.560 --> 14:11.560
so you have full re-entrance, C standard compliance, everything.

14:11.560 --> 14:13.560
But it has very few registers.

14:13.560 --> 14:18.560
The SDM8 has more registers, but the stack access is a little bit less efficient,

14:18.560 --> 14:23.560
because you have to set up a frame pointer, it goes through index registers and so on.

14:24.560 --> 14:35.560
The dog things have great multithreading, but they don't have the necessary instruction to support good C standard atomics to communicate between the cores.

14:35.560 --> 14:44.560
And out of all those lessons basically learned from other architectures, the F8 is kind of a project to come up with an architecture that,

14:45.560 --> 14:53.560
to say that somebody should become, if it succeeds, something for the 8-bit world,

14:53.560 --> 14:58.560
something like risk 5 is for the rest of the world, and to see that the time is up. Questions?

15:15.560 --> 15:19.560
Thanks for the talk.

15:19.560 --> 15:23.560
Can you maybe give some hints about the internals of the compiler?

15:23.560 --> 15:25.560
The internals of the compiler, okay.

15:25.560 --> 15:29.560
We have a classic Lexiac, sorry, you didn't front-end.

15:29.560 --> 15:33.560
Yeah, I just want to say if you are using an intermediate representation and maybe also the simulator,

15:33.560 --> 15:40.560
does the simulator, since it has to support many architectural uses on intermediate representation, I would be curious about that.

15:40.560 --> 15:44.560
Okay, so the front-end is a classic Lexiac parser.

15:44.560 --> 15:55.560
We have an abstract syntax tree that gets converted into the i-code, which is basically a free address code.

15:55.560 --> 16:00.560
This then gets annotated with some extra information, such as the register allocation,

16:00.560 --> 16:08.560
and then in the individual back-ends, this i-code gets transformed into a sampler code.

16:09.560 --> 16:16.560
The sampler code then goes through a P-Pole optimizer, and that gets unwritten out to the linker.

16:16.560 --> 16:22.560
The simulators, well, that's not my area of expertise.

16:22.560 --> 16:27.560
Daniel Drotos is definitely doing most of the work on that part.

16:27.560 --> 16:30.560
They're written in C++.

16:30.560 --> 16:34.560
They're using the classes and stuff to abstract things away,

16:34.560 --> 16:40.560
but I don't think there's any intermediate representation in the simulator because they need to be fast.

16:40.560 --> 16:47.560
We want to run tens of thousands of tests for every architecture that we support every night,

16:47.560 --> 16:52.560
so performance is definitely a goal for the simulators.

17:05.560 --> 17:18.560
You mentioned code size as one of the areas where STCC lacks behind the proprietary compilers from the vendors.

17:18.560 --> 17:27.560
What kind of factor are we talking about, and are you doing regular statistics about the code size of STCC,

17:27.560 --> 17:30.560
like in terms of different versions and so on?

17:30.560 --> 17:37.560
Yes, we are tracking this throughout work. We have graphs, and we are not lacking in codes that in general compare to other compilers.

17:37.560 --> 17:40.560
I mean, we're doing okay for the STM-8.

17:40.560 --> 17:50.560
Resonance can generate smaller code, but resonance is in every other way the worst compiler for the STM-8 around these days.

17:50.560 --> 17:53.560
I mean, they don't even support C90, and the code is very slow.

17:53.560 --> 18:00.560
It's specifically for the 8051 backend that we, Kyle, generate more compact code.

18:09.560 --> 18:17.560
I need to just to preface my question, saying that I only experienced STCC through the downstream projects,

18:18.560 --> 18:23.560
and I began actually using it in great part thanks to your talk a couple of years ago.

18:23.560 --> 18:32.560
But I have noticed that the compilation step takes a lot longer than other compilers would.

18:32.560 --> 18:37.560
I suppose it's optimizing and evaluating. Why so?

18:37.560 --> 18:43.560
And what would help it? More faster disk, more RAM, faster processor?

18:43.560 --> 18:46.560
What would help the completion time stop a bit?

18:47.560 --> 18:52.560
This depends on the backend. Most backends use what we call the new register allocator,

18:52.560 --> 19:00.560
which definitely was the key to being able to compete this well with other compilers

19:00.560 --> 19:04.560
in generating faster code and also being competitive in code size.

19:04.560 --> 19:11.560
8051 does not yet, but for the C80, this register allocator is used.

19:12.560 --> 19:17.560
It has a parameter, maxEloxPlanout,

19:24.560 --> 19:30.560
that you can set to tell the register allocator how many different possibilities

19:30.560 --> 19:34.560
to consider at each node of an internal representation.

19:34.560 --> 19:36.560
The default value is 3000.

19:37.560 --> 19:42.560
If you set it lower, you get less optimization, lower RAM usage, faster compilation,

19:42.560 --> 19:48.560
but there's people that set the thing to a million and let their program

19:48.560 --> 19:51.560
that in the end fits into 8 kilobytes compile for half an hour,

19:51.560 --> 19:56.560
but they really want it optimized as well as it's possible.

19:56.560 --> 19:59.560
So yes, the most of the compilation time is spent in the register allocator

19:59.560 --> 20:04.560
and the people optimizer, and for the parts that have the new register allocator,

20:04.560 --> 20:08.560
definitely the register allocator, typically more than the people optimizer.

20:08.560 --> 20:12.560
And one interesting thing is this can become provably optimal.

20:12.560 --> 20:21.560
If you also add F-Verbus ASM, you get comments in the sampler that tell you

20:21.560 --> 20:25.560
once if the register allocator found a provably optimal assignment.

20:25.560 --> 20:28.560
Per function.

20:29.560 --> 20:33.560
Okay, I think that's what we have time for for the questions.

20:33.560 --> 20:40.560
So just wanted to say I wish you thank you very much for the fascinating talk on the palace.

