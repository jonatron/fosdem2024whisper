WEBVTT

00:00.000 --> 00:07.600
So, hi.

00:07.600 --> 00:13.000
Welcome to live coding music with microblocks and microcontrollers.

00:13.000 --> 00:16.880
This is Bernardo Mavosa.

00:16.880 --> 00:19.240
I come from Barcelona.

00:19.240 --> 00:27.720
And I work as a Snap and Microblocks Developer at SAP together in the same company with Jan

00:27.720 --> 00:32.080
Sanyadga and together in the same project with a lot of people here in the room, like

00:32.080 --> 00:40.080
John who is the creator of microblocks and so many other things, like Turgut, like Cathy,

00:40.080 --> 00:44.480
and of course Jan Sanyadga who also contributed to microblocks.

00:44.480 --> 00:48.920
For the purpose of this talk, I never mentioned this, but for the purpose of this talk I will

00:48.920 --> 00:51.240
mention I am an ex musician.

00:51.240 --> 00:59.640
I used to play in a reggae band for a bunch of years and recently I got into making music

00:59.640 --> 01:02.320
again with microcontrollers.

01:02.320 --> 01:09.200
So, I guess that makes me a musician again, but I don't know, you'll have to judge after

01:09.200 --> 01:11.320
this.

01:11.320 --> 01:12.480
And you can find me here.

01:12.480 --> 01:14.880
So that's who I am.

01:15.000 --> 01:22.640
And next I guess I should talk about what microblocks is in case you didn't attend.

01:22.640 --> 01:25.640
John, Cathy and Turgut spoke yesterday.

01:25.640 --> 01:31.320
So microblocks is a, well, first of all you can find all about it here, but I'll brief

01:31.320 --> 01:32.320
you in.

01:32.320 --> 01:37.160
So it's visual blocks in the same way that Scratch and Snap are.

01:37.160 --> 01:42.600
And I mentioned these two languages because these are the closest relatives.

01:42.640 --> 01:46.200
The blocks are one thing, what's behind the blocks is a different thing.

01:46.200 --> 01:48.600
The blocks is how we present the code.

01:48.600 --> 01:52.760
But what's most important about these three languages is that they are live, they are

01:52.760 --> 01:56.000
parallel.

01:56.000 --> 01:59.800
And that's usually not mentioned when we talk about blog space programming.

01:59.800 --> 02:02.440
We put them in the same back.

02:02.440 --> 02:05.440
But that would be like putting all text-based languages in the same back, right?

02:05.440 --> 02:10.480
They're languages that are interpreted, others that are compiled.

02:10.480 --> 02:14.840
So yeah, it's like Scratch and Snap, but for microcontrollers.

02:14.840 --> 02:19.440
These are small computer-like devices.

02:19.440 --> 02:20.800
It's a live language.

02:20.800 --> 02:25.840
It's an autonomous language that means that the code runs actually inside of the microcontroller

02:25.840 --> 02:31.560
and you can unplug it at any time and the code will keep on running.

02:31.560 --> 02:35.400
And it's a parallel language, meaning you can have multiple threats running at the same

02:35.400 --> 02:38.040
time inside of the microcontroller.

02:38.080 --> 02:42.800
And it's a portable language, meaning that you can run the exact same code in several

02:42.800 --> 02:47.360
different microcontrollers, even of different architectures.

02:47.360 --> 02:53.800
We even have versions of what we call the MicroLogs Virtual Machine running on the browser.

02:53.800 --> 02:58.400
So it's a very portable piece of code.

02:58.400 --> 03:03.680
And since the talk is about live coding music with microcontrollers, I thought I should talk

03:03.720 --> 03:10.040
a little bit about what live coding is in the context of making music.

03:10.040 --> 03:13.600
Live coding is programming things in real time, right?

03:13.600 --> 03:20.520
Well in the case of music, music and digital media, because there are people who make visuals

03:20.520 --> 03:29.320
live with programming, it's programming digital media live in real time for an audience, like you.

03:30.320 --> 03:39.040
So you may ask, okay, but how does one make music with a microcontroller?

03:39.040 --> 03:41.560
And the answer is, well, it's easy.

03:41.560 --> 03:44.240
You just generate signals, right?

03:44.240 --> 03:54.120
A microcontroller can generate square waves, can generate sine waves, and your answer obviously

03:54.120 --> 03:55.560
will be, yeah, okay.

03:55.560 --> 03:56.560
But what about music?

03:56.560 --> 03:57.560
Like it's 2024.

03:57.680 --> 04:02.600
Like what about actual music I want to dance to?

04:02.600 --> 04:08.160
And yeah, so the idea we had in that regard is let's use devices that already know how

04:08.160 --> 04:11.920
to make music and let's interface with them, okay?

04:11.920 --> 04:14.800
So reducing media for that.

04:14.800 --> 04:20.440
And without further ado, I will try to make some music for you today.

04:20.440 --> 04:23.800
I wanted to explain what I was doing as I was making the music.

04:23.800 --> 04:29.400
I'm not sure this is going to work, because I have a pretty sketchy setup where I connected

04:29.400 --> 04:36.200
my synthesizer to this thing here that's beaming audio to the back there, and then I don't

04:36.200 --> 04:40.120
know if I'll be able to do the two things at the same time.

04:40.120 --> 04:42.960
And I don't know if I'll be able to hold my microphone either.

04:42.960 --> 04:45.120
I'm really good at it.

04:45.120 --> 04:46.120
Maybe, yeah.

04:50.280 --> 04:51.880
Let me try if it works first.

04:52.880 --> 04:54.880
That's a bit too loud, is it?

04:54.880 --> 04:55.880
Is it good?

04:55.880 --> 04:56.880
Yeah, okay.

05:01.880 --> 05:09.800
Okay, so the first thing you need when you make music is obviously a little bit of a drum

05:09.800 --> 05:10.800
bit.

05:10.800 --> 05:17.320
So what I'm going to do is forever I'm going to wait until the next whole note.

05:17.320 --> 05:22.600
I apologize a bit for those of you who don't have any notions about music, but this will

05:22.600 --> 05:24.280
kind of make sense.

05:24.280 --> 05:26.280
I will wait until the next...

05:28.280 --> 05:29.280
Oh yeah.

05:31.280 --> 05:32.520
Is that good?

05:32.520 --> 05:36.840
I won't be able to fit as much music in it.

05:36.840 --> 05:38.560
And then I'll play some drum.

05:38.560 --> 05:42.400
Let's say I'll play a bass drum.

05:42.400 --> 05:43.400
And for how long?

05:43.400 --> 05:45.400
Well, for a quarter note.

05:45.400 --> 05:47.400
And we'll keep it a little bit.

05:49.400 --> 05:51.400
There we go.

05:53.400 --> 05:55.400
That's not enough for dancing.

05:55.400 --> 05:58.400
I mean, you have to be...

06:01.400 --> 06:08.400
Then at the next half note, I'm going to play a snare.

06:10.400 --> 06:13.400
Okay, so what do we need next?

06:13.400 --> 06:15.400
We need some bass.

06:17.400 --> 06:19.400
So we'll pretty much do the same thing.

06:21.400 --> 06:27.400
After every whole note, we'll arpeggiate...

06:27.400 --> 06:34.400
Let's say we'll arpeggiate a major chord, because I'm feeling happy.

06:34.400 --> 06:36.400
And we'll do it at...

06:37.400 --> 06:40.400
Yeah, we'll do it at the default configuration.

06:41.400 --> 06:45.400
And of course, this is going to sound not like I wanted to.

06:46.400 --> 06:47.400
No.

06:47.400 --> 06:54.400
So what I'll do is I'll select a different instrument for this MIDI channel.

06:54.400 --> 06:56.400
MIDI is organized in channels.

06:56.400 --> 07:00.400
And I'll select the bass number one, for example.

07:00.400 --> 07:02.400
Let's see what this sounds like.

07:03.400 --> 07:07.400
This is a bass, but it's a bit too high-pitched.

07:07.400 --> 07:10.400
So let's bring it down a bunch of octaves.

07:11.400 --> 07:12.400
Much better.

07:12.400 --> 07:14.400
But of course, it's got lower pitched.

07:14.400 --> 07:21.400
It also got lower volume, so I'll make it loud, as bass should always be.

07:24.400 --> 07:26.400
No, but bass is indispensable.

07:27.400 --> 07:29.400
Let's get a different bass.

07:29.400 --> 07:38.400
These are all the same bass.

07:41.400 --> 07:43.400
Okay, so we'll leave it at that.

07:44.400 --> 07:45.400
What else do we need?

07:45.400 --> 07:53.400
Well, we can already dance a little bit to this, but it'd be interesting to, you know, get some chords going on.

07:53.400 --> 07:56.400
So we'll basically use the same thing.

07:58.400 --> 08:01.400
And instead of arpeggiating, we're going to play...

08:03.400 --> 08:16.400
Let's say we'll use the major chord on channel two, where we'll obviously select a different instrument.

08:17.400 --> 08:19.400
Yeah, it should be good.

08:20.400 --> 08:22.400
Let's see how it sounds.

08:23.400 --> 08:24.400
Okay.

08:26.400 --> 08:34.400
You have to understand this is my set of instruments that I collected from different synthesizers and sound funds.

08:34.400 --> 08:40.400
So what I call a piano is not what you might think of as a piano, but this is my favorite piano.

08:40.400 --> 08:44.400
And I want this to play for a quarter note again.

08:44.400 --> 08:46.400
Not as loud.

08:46.400 --> 08:48.400
Piano is in the background.

08:48.400 --> 08:57.400
That's okay, but a little boring. Let's go three-step sounds up.

09:19.400 --> 09:24.400
Okay, so you can see a little bit how this works.

09:24.400 --> 09:29.400
I usually faster explain it at this point.

09:30.400 --> 09:32.400
It's starting to become a little boring.

09:32.400 --> 09:33.400
So...

09:35.400 --> 09:37.400
Can I start the voice down?

09:49.400 --> 09:54.400
It's a little bit of a volume up there.

09:57.400 --> 09:59.400
So at this point it starts to become a little boring.

09:59.400 --> 10:03.400
And you can choose two things when you're doing live coding and then it becomes boring.

10:03.400 --> 10:07.400
One is you will raise it and start the sound.

10:07.400 --> 10:11.400
The other way is to start to shuffle things around.

10:11.400 --> 10:17.400
And the other way is to add the audio stuff that was going on.

10:18.400 --> 10:20.400
No bass lines.

10:23.400 --> 10:27.400
I will add one more thing and then I'll start with what we have on screen.

10:27.400 --> 10:30.400
I'm sorry, but I will have to make it a little bit smarter.

10:30.400 --> 10:34.400
Because I don't want to be a little bit more boring.

10:35.400 --> 10:40.400
And what I'll do is I'll make another...

10:48.400 --> 10:50.400
...

11:03.400 --> 11:05.400
...

11:11.400 --> 11:13.400
...

11:19.400 --> 11:21.400
Can you not hear?

11:23.400 --> 11:26.400
We can change the order of our bass line or we can...

11:26.400 --> 11:28.400
...

11:33.400 --> 11:35.400
...

11:48.400 --> 11:50.400
...

11:55.400 --> 11:57.400
...

12:13.400 --> 12:16.400
Okay, thanks to top it off.

12:16.400 --> 12:21.400
I guess that will be the end of the improvisation.

12:21.400 --> 12:26.400
We will improvise over a steel that might work.

12:29.400 --> 12:31.400
A major steel.

12:31.400 --> 12:36.400
And we will do one channel with a steel and we will decide what we want.

12:36.400 --> 12:40.400
We will put a new steel in there.

12:40.400 --> 12:43.400
And I'll do that in the next video.

12:44.400 --> 12:46.400
Not every...

13:05.400 --> 13:10.400
Okay, as you can see the soundfont that I'm using is kind of a retro one.

13:10.400 --> 13:14.400
But the next thing I'll do is using the external synthesizer.

13:14.400 --> 13:16.400
I can change the soundfont.

13:20.400 --> 13:22.400
Any point.

13:29.400 --> 13:33.400
And of course I'll also set up my instruments again after the chorus.

13:41.400 --> 13:43.400
...

13:56.400 --> 13:59.400
As a disclaimer, okay, thank you.

14:02.400 --> 14:07.400
As a disclaimer, I had no idea what I was going to play today before I jumped on it.

14:08.400 --> 14:10.400
That's...

14:10.400 --> 14:12.400
I don't know, maybe a temerity.

14:12.400 --> 14:14.400
But that's how some people like to do it.

14:14.400 --> 14:19.400
Other people will prepare a session and have ideas in their mind.

14:19.400 --> 14:27.400
Okay, to be honest, I tried to prepare, but I realized I didn't have any way to output sound from my synthesizer.

14:27.400 --> 14:31.400
So I was in my hotel room and I realized I couldn't prepare.

14:31.400 --> 14:33.400
So...

14:33.400 --> 14:35.400
But I wanted to do it like that.

14:36.400 --> 14:39.400
That's pretty much it for this part.

14:41.400 --> 14:44.400
Oh, I forgot to say it's like it's 2024.

14:44.400 --> 14:51.400
So if you like this and if you'd like to try it out yourselves,

14:51.400 --> 14:57.400
I wrote a little activity in our Learn website where...

14:57.400 --> 15:00.400
If I can find it, yeah.

15:00.400 --> 15:08.400
Where I explain in quite a level of detail how this works,

15:08.400 --> 15:14.400
what kind of device you need, both in terms of what microcontroller and what synthesizers.

15:14.400 --> 15:22.400
If you already have some old synthesizer keyboard that has a MIDI input,

15:22.400 --> 15:26.400
that's the device you should use before buying anything.

15:26.400 --> 15:31.400
There are things that are quite cheap. You don't have to get a 2000 euro synthesizer.

15:31.400 --> 15:44.400
You can get this 80 euro little board hacked together by this independent hacker somewhere that sells them on their website.

15:44.400 --> 15:49.400
And I explained how to find these weird devices in here.

15:49.400 --> 15:54.400
There's of course a connection that you will have to do from your microcontroller to your synthesizer

15:54.400 --> 15:58.400
to get it to receive MIDI and make music.

15:58.400 --> 16:01.400
And I explained what MIDI is all about.

16:01.400 --> 16:10.400
I explained what the blogs in our three music production libraries are all about.

16:10.400 --> 16:16.400
You may have noticed we have these three libraries here, MIDI, Rhythm and Scales and Chords.

16:16.400 --> 16:22.400
Basically the MIDI one is the low level one, the one that talks to the synthesizer

16:22.400 --> 16:27.400
and abstracts all the MIDI messages and so on.

16:27.400 --> 16:35.400
So it knows how to produce MIDI messages that ask a synthesizer to make this note for that channel

16:35.400 --> 16:40.400
and change this instrument. There's a lot more MIDI things that you can do here.

16:40.400 --> 16:50.400
Rhythm is how we are abstracting the notion of dividing time into equal measures and fractions of those measures

16:50.400 --> 16:54.400
and also synchronizing different threads that are doing that.

16:54.400 --> 17:05.400
So this and this can sound constantly synchronized.

17:05.400 --> 17:14.400
Because otherwise if you didn't use this, if you just used a weight block, which might be your first approach...

17:14.400 --> 17:18.400
Thank you.

17:18.400 --> 17:25.400
So your first approach might be, do you actually need this weight until next thing?

17:25.400 --> 17:31.400
And you may want to do it like this.

17:35.400 --> 17:43.400
But can you feel how it's not in sync? And it will get worse.

17:43.400 --> 17:45.400
It gets worse in time.

17:45.400 --> 17:53.400
So we certainly need a way to synchronize all these scripts very tightly.

17:53.400 --> 18:00.400
Because the human ear is very, very good at detecting even slight deviations in tempo.

18:00.400 --> 18:16.400
And well, we explain how to make a simple song and how to make a simple trump pattern, I guess I can.

18:16.400 --> 18:26.400
We're talking about melodies and chords.

18:26.400 --> 18:37.400
Can I lower the volume globally? No, I can't.

18:37.400 --> 18:40.400
Okay, how to make arpeggios, etc. etc.

18:40.400 --> 18:51.400
And we end up with something similar to what you've heard today, which is a trump pattern, a bass line.

18:51.400 --> 19:05.400
Oh, where is it? Here it is.

19:05.400 --> 19:11.400
So by the end of this lesson you'll be producing this piece of music with very few blocks.

19:11.400 --> 19:16.400
One thing that I haven't used this time is random.

19:16.400 --> 19:24.400
Random is really great at adding variation to your music to make it sound less monotone.

19:24.400 --> 19:29.400
And how am I with time? I'm way too early.

19:29.400 --> 19:31.400
Can you show Greg the music in the mic?

19:31.400 --> 19:36.400
Yes. No.

19:36.400 --> 19:46.400
If you have a normal operating system slash a window system at all, you can drag this stuff into your micro blocks window.

19:46.400 --> 19:54.400
And it will load the blocks that are embedded in the image because we are serializing them into the PNG metadata.

19:54.400 --> 20:00.400
But I use weird window manager that doesn't know what windows are.

20:00.400 --> 20:02.400
So I can't show you that.

20:02.400 --> 20:05.400
Then how can you help?

20:05.400 --> 20:09.400
One of the things that we need most help with is translations.

20:09.400 --> 20:16.400
And translations, we welcome one-time things like, hey, this is my language, I will translate your idea.

20:16.400 --> 20:23.400
I didn't show that, but the idea is translated into several languages that includes the blocks.

20:23.400 --> 20:28.400
So if I select a different language, now all the code is in that language.

20:28.400 --> 20:34.400
So that's great for localization.

20:34.400 --> 20:42.400
And we welcome this one-time translations, but we welcome even more some kind of commitment as to, I will be the maintainer for this language.

20:42.400 --> 20:46.400
And when you make a change, I will also update the language file.

20:46.400 --> 20:51.400
Translations are pretty easy to do on micro blocks.

20:51.400 --> 20:54.400
And if anyone is interested, I can show later how that works.

20:54.400 --> 20:56.400
We also need help with writing activities.

20:56.400 --> 21:01.400
We have this learn page that I showed before.

21:01.400 --> 21:07.400
And in here we have a bunch of activities.

21:07.400 --> 21:15.400
You can filter by language, by the micro controller board that you have, by components.

21:15.400 --> 21:24.400
Let's say you are running some class and you want to teach about, I don't know, how servers work.

21:24.400 --> 21:27.400
So here's the activities that involve servers.

21:27.400 --> 21:31.400
You can filter by level, topics, et cetera.

21:31.400 --> 21:41.400
We welcome people to write their own activities or to translate activities that we already have into your languages.

21:41.400 --> 21:44.400
We also welcome donations.

21:44.400 --> 21:50.400
Micro blocks is a project under the wing of the software freedom conservancy.

21:50.400 --> 22:03.400
And even though we don't need that money ourselves to live because we have jobs, we use that money for things like buying hardware for workshops.

22:03.400 --> 22:09.400
We use that money for things like paying a web developer to make nice websites.

22:09.400 --> 22:12.400
This is obviously not done by an engineer.

22:12.400 --> 22:16.400
I hope you can tell.

22:16.400 --> 22:20.400
Money is always good, especially if it's recurring.

22:20.400 --> 22:29.400
And lastly, you can help by using it and giving us feedback and spreading the word.

22:29.400 --> 22:36.400
Any questions? I know I'm very early. I expected to take much longer.

22:36.400 --> 22:40.400
Do you have a few examples that you could share with people?

22:40.400 --> 22:43.400
I don't know if it's good.

22:43.400 --> 22:50.400
So can you hold?

22:50.400 --> 22:55.400
I don't know if I have it in this computer actually.

22:55.400 --> 23:01.400
But, but, but...

23:01.400 --> 23:22.400
Okay, here's a sample. It's a very short sample. I think it's just one minute of a bunch of snippets of songs that I made a while ago.

23:22.400 --> 23:27.400
And I will stop them and explain a little bit what they're about.

23:27.400 --> 23:37.400
So this was the first one that I made when I started playing with MIDI and realized that this thing was actually possible, because I didn't know if it was possible.

23:37.400 --> 23:48.400
This whole thing came as a request from two members of the live coding community in Barcelona and a good friend of mine who is a professor at a local university.

23:48.400 --> 23:55.400
They came to me asking if we could do live coding with our languages with Snap or MicroBlocks.

23:55.400 --> 24:02.400
And I started working on... I thought, you know, music needs to be really tied. These are educational languages.

24:02.400 --> 24:08.400
We don't even care about things being in sync or being, you know, very time sensitive.

24:08.400 --> 24:15.400
So I thought, I said, I don't think we can make music, but we can definitely make visualizations.

24:15.400 --> 24:22.400
And I started working on that with Snap, and we actually can make very nice visualizations with Snap.

24:22.400 --> 24:30.400
And then I thought, well, microcontrollers are actually very tight time-wise. They are very fast machines and they have nothing to do.

24:30.400 --> 24:34.400
It's not like an operating system where things are going on all over the place.

24:34.400 --> 24:37.400
In a microcontroller, there's just, you know, the code that you put in it.

24:37.400 --> 24:42.400
So it should be possible. And then I started experimenting and that seemed to work.

24:42.400 --> 24:50.400
And recently I've started experimenting, trying to do the same thing with Snap, and I realized it's actually pretty tight and it might be possible to do it too.

24:50.400 --> 25:00.400
But that's not for this talk. And so the first thing I did, remember I said I used to be a reggae musician, was to make some reggae music.

25:00.400 --> 25:08.400
And that was sort of my... Then I tried to make some jazzy tunes with different time signatures.

25:08.400 --> 25:14.400
This is sort of a Latin rock, three-four time signature as well.

25:19.400 --> 25:22.400
Then this is... You tell me.

25:27.400 --> 25:33.400
Then I actually explored the signal generation thing that I was talking about in the beginning.

25:34.400 --> 25:40.400
And mixing it... I started experimenting mixing the sounds that you can generate with a microcontroller by itself.

25:40.400 --> 25:54.400
Like you plug in wires into the digital pins of your thing and you mix them together with a passive mixer into a 3.5 jack, like an audio output.

25:54.400 --> 25:56.400
And see what you can make with that.

25:56.400 --> 26:01.400
And also mix that with the sound of an actual synthesizer and see what comes out of it.

26:01.400 --> 26:06.400
And this is an example of... Not this.

26:13.400 --> 26:15.400
So this is a mixture of...

26:22.400 --> 26:24.400
This is my attempt at free jazz.

26:27.400 --> 26:31.400
This is nice. I think I have to show that. I don't have it here.

26:31.400 --> 26:37.400
So this is a synthesizer that has the chip of my first computer inside.

26:37.400 --> 26:42.400
It's a YM... Someone here knows the number, I'm sure.

26:42.400 --> 26:49.400
It's the sound chip of some computers like the Amstrad CPC and the MSX in my case.

26:50.400 --> 26:56.400
And someone has made a synthesizer that uses that very chip, the actual chip, not an emulation or anything.

26:56.400 --> 27:00.400
You open it and you talk and it's that old chip in there. And it sounds like this.

27:04.400 --> 27:10.400
This is only chip tunes using only the sounds that microcontroller can generate. Sorry.

27:11.400 --> 27:20.400
So the whole thing, the drum pattern, the bass line, the chords, everything is generated just with the microcontroller.

27:20.400 --> 27:27.400
These are square waves and noise that is attenuated to make things like snare drums and hi-hats and things like that.

27:27.400 --> 27:32.400
Again, this is only generated with a microcontroller.

27:35.400 --> 27:37.400
I don't know what this is.

27:40.400 --> 27:41.400
And that's it.

27:41.400 --> 27:45.400
So you're saying that section was just the microcontroller not sending it out to me?

27:45.400 --> 27:46.400
Just the microcontroller.

27:46.400 --> 27:51.400
So, I think that's the only chip that I can use to make a microcontroller.

27:51.400 --> 27:55.400
So you're saying that section was just the microcontroller not sending it out to me?

27:55.400 --> 27:56.400
Just the microcontroller.

27:56.400 --> 28:03.400
So, yeah, if you're interested in that, I didn't show that because I thought it, well, I didn't bring my passive mixer either.

28:03.400 --> 28:12.400
But, oh, sorry, let me go back to a language someone else understands.

28:15.400 --> 28:17.400
There's the chip tune library here.

28:18.400 --> 28:21.400
And I can't show you how that sounds because I don't have the pins connected.

28:21.400 --> 28:31.400
But this is going to generate sounds just with your microcontroller just by generating signals.

28:31.400 --> 28:35.400
And it's actually pretty interesting to see how this works.

28:36.400 --> 28:50.400
If you look at this, it's actually just setting a digital pin on and off at a particular interval and in a particular pattern.

28:50.400 --> 28:59.400
And that generates a kick drum that's very loud and like it sounds like a hardcore techno kick drum.

29:00.400 --> 29:02.400
Tom's are generated in the same way.

29:02.400 --> 29:10.400
And then on boards that have a DAC that's a digital analog converter, you can generate noise.

29:10.400 --> 29:15.400
And by attenuating that noise, you can generate things like snare drums or hi-hats.

29:15.400 --> 29:20.400
And the way you do that, they look very much the same.

29:20.400 --> 29:25.400
You just fade some noise for a couple of milliseconds, right?

29:25.400 --> 29:26.400
So you generate noise.

29:26.400 --> 29:28.400
Noise is just right.

29:28.400 --> 29:31.400
If you attenuate that in a certain pattern, you get...

29:33.400 --> 29:38.400
And that can be a hi-hat or can be a snare depending on a bunch of parameters, right?

29:38.400 --> 29:44.400
And that's how they used to make music for these old 8-bit computers back in the day.

29:44.400 --> 29:47.400
So it's really nice that...

29:47.400 --> 29:54.400
As Jan and Yalga were saying before, we're doing this also to explore things that we don't exactly understand.

29:54.400 --> 30:00.400
And I've had so much fun understanding how my old computer generated all this magic music.

30:00.400 --> 30:05.400
And there's also the square wave chords library that you can use.

30:07.400 --> 30:09.400
That will play a chord.

30:09.400 --> 30:16.400
You need to connect three different pins because a chord is a minimum of three notes at the same time.

30:16.400 --> 30:20.400
And this will generate different notes in each pin in sync.

30:21.400 --> 30:24.400
Okay. So any more questions?

30:42.400 --> 30:48.400
So the question is whether I looked into also receiving MIDI data into the microcontroller.

30:48.400 --> 30:50.400
No, I haven't looked into it.

30:50.400 --> 30:53.400
But we've talked about it with John several times.

30:53.400 --> 30:56.400
It would be really interesting to do the opposite.

30:59.400 --> 31:06.400
Today I'm using an Arduino Dway just because it has a lot of memory.

31:06.400 --> 31:08.400
And so I can...

31:10.400 --> 31:11.400
How do I explain this?

31:11.400 --> 31:17.400
So micro-box is constantly synchronizing the code that you see on the screen with the code that's inside of the board, right?

31:17.400 --> 31:21.400
So what you're seeing here is a window to what the board has inside, right?

31:23.400 --> 31:26.400
That synchronization takes a little bit of time, of course.

31:26.400 --> 31:32.400
And on boards that have a slower memory, this can be noticed when you're making music.

31:32.400 --> 31:35.400
And this board has a very, very fast memory.

31:35.400 --> 31:40.400
And also it has a lot of memory, so you won't run out of memory while you're life-coding and changing the code constantly.

31:41.400 --> 31:49.400
And so you won't force the VM to reorganize the memory every, I don't know, N-cycles, right?

31:49.400 --> 31:54.400
So you can life-code for two hours and you won't get any glitches.

31:54.400 --> 31:56.400
But any microcontroller will do.

31:59.400 --> 32:04.400
Yes, yes, the memory is a little bit slow, so you'll get slight glitches.

32:05.400 --> 32:08.400
But yeah, but any will do.

32:11.400 --> 32:14.400
So, software synthesizers?

32:14.400 --> 32:17.400
Yes, you can use software synthesizers.

32:17.400 --> 32:20.400
The question was whether you can use software synthesizers.

32:20.400 --> 32:22.400
The answer is yes.

32:23.400 --> 32:26.400
John implemented Web... sorry, what maybe not...

32:26.400 --> 32:33.400
USB MIDI for microcontrollers that support USB host, is that right?

32:33.400 --> 32:34.400
Yeah, yeah.

32:34.400 --> 32:43.400
So, in the MIDI library, there's a block that you usually don't need to use if you're using hardware MIDI...

32:43.400 --> 32:53.400
sorry, hardware serial and regular, like serial MIDI, that lets you choose on which pin to emit your MIDI,

32:53.400 --> 32:55.400
and it also lets you select USB.

32:56.400 --> 33:04.400
And it actually uses the same USB line to program the board and send back MIDI to the computer.

33:04.400 --> 33:06.400
And that works really well.

33:08.400 --> 33:13.400
It has to be a microcontroller that has a USB...

33:13.400 --> 33:14.400
Yeah.

33:15.400 --> 33:21.400
I think I'm hinting at that in the article that I linked to.

33:22.400 --> 33:25.400
I would make one question about the aspect of your...

33:25.400 --> 33:26.400
Do we do the previewing?

33:26.400 --> 33:27.400
Yes, sure.

33:27.400 --> 33:33.400
So, it's at learn.microblocks.fun, and it's currently...

33:33.400 --> 33:38.400
since it's the last one that we wrote, it's currently the first one.

33:38.400 --> 33:43.400
And it's going to be the first one for a while, because it takes time to write these things.

33:43.400 --> 33:44.400
Okay.

33:58.400 --> 34:01.400
So, the question is, I mentioned something about sound fonts.

34:01.400 --> 34:07.400
Sound fonts are a format for someone that knows more about this, is going to correct me.

34:07.400 --> 34:12.400
But they are a format for virtual instruments and virtual synthesizers.

34:12.400 --> 34:15.400
And they consist of a collection of samples.

34:15.400 --> 34:17.400
Those are like sound files.

34:17.400 --> 34:22.400
And then a collection of transformations that you do to these samples,

34:22.400 --> 34:26.400
and those in turn get turned into instruments.

34:26.400 --> 34:33.400
So, for example, you might record this and turn that into a drum kick, right?

34:33.400 --> 34:38.400
And sound fonts are a format that's really old, but has been used forever.

34:38.400 --> 34:39.400
It works great.

34:39.400 --> 34:43.400
It's a format that many virtual synthesizers, software synthesizers use.

34:43.400 --> 34:50.400
And what I'm doing here is I'm using a board that was developed by...

34:50.400 --> 34:52.400
I forgot the name.

34:52.400 --> 34:54.400
But it uses sound fonts.

34:54.400 --> 34:58.400
So, it uses a Raspberry Pi compute module inside.

34:58.400 --> 35:00.400
And you can load sound fonts into it.

35:00.400 --> 35:02.400
And of course, in sound fonts are an open format.

35:02.400 --> 35:06.400
You can edit them and modify your instruments and create your own.

35:06.400 --> 35:11.400
So, you would see a Raspberry Pi left a software synthesizer inside the sound?

35:11.400 --> 35:12.400
Yes.

35:12.400 --> 35:13.400
Yeah.

35:13.400 --> 35:16.400
But it's a nicely packaged one.

35:16.400 --> 35:28.400
So, it's actually a synthesizer that has the Raspberry Pi compute module as the power house.

35:28.400 --> 35:35.400
But it's actually a standalone synthesizer that you can plug your MIDI in and you have your sound output.

35:35.400 --> 35:39.400
What microcontroller did you program in the download?

35:39.400 --> 35:41.400
Didn't I say it was a duet?

35:41.400 --> 35:43.400
An Arduino duet.

35:51.400 --> 35:57.400
So, how many MIDI synthesizers have you recently bought?

35:57.400 --> 35:59.400
Too many.

35:59.400 --> 36:01.400
Yeah.

36:01.400 --> 36:03.400
I have to give you a word of warning.

36:03.400 --> 36:05.400
If you try this, it's very addictive.

36:05.400 --> 36:09.400
Especially in this day and age where you can find very cheap synthesizers and you're like,

36:09.400 --> 36:11.400
come on, it's really cheap.

36:11.400 --> 36:13.400
I can afford another one.

36:13.400 --> 36:15.400
So, I think I have eight now.

36:15.400 --> 36:21.400
And one is actually flying from the UK to Barcelona as we speak.

36:21.400 --> 36:23.400
Yeah, it's very addictive.

36:27.400 --> 36:35.400
So, the first sound that we've got is the drone that's just on the plane.

36:35.400 --> 36:37.400
Yep.

36:37.400 --> 36:41.400
So, that actually comes from the synthesizer itself.

36:41.400 --> 36:43.400
Can you hold?

36:43.400 --> 36:46.400
Let me connect this back.

36:50.400 --> 36:55.400
So, general MIDI is a very funny protocol.

36:55.400 --> 37:07.400
So, I think someone sat down at some point and decided which 127 instruments were the most representative of the instruments that humans use all over the world.

37:07.400 --> 37:12.400
And they decided that they needed eight slots reserved to sound effects.

37:12.400 --> 37:18.400
And that these sound effects would be gunshots, waves, birds.

37:18.400 --> 37:21.400
So, I don't know how that happened.

37:21.400 --> 37:25.400
I think it's a good thing of eight instruments that I would like to have instead of those.

37:25.400 --> 37:27.400
But at least the birds are nice.

37:27.400 --> 37:35.400
And the way you play those is you select instrument sound effects.

37:35.400 --> 37:39.400
I forgot which one it is.

37:39.400 --> 37:41.400
Is this on?

37:43.400 --> 37:45.400
Oh, of course I have my...

37:52.400 --> 37:58.400
So, and the answer is also each synthesizer will either adhere to general MIDI or not.

37:58.400 --> 38:05.400
So, some will play different things where you expect them not to be.

38:05.400 --> 38:10.400
So, this is like a fret sound.

38:10.400 --> 38:20.400
Sound effect number two is like a flute sound.

38:20.400 --> 38:23.400
There's the waves.

38:26.400 --> 38:28.400
There's the birds.

38:28.400 --> 38:31.400
And I believe... I was not kidding.

38:31.400 --> 38:35.400
There's gunshots.

38:35.400 --> 38:38.400
They make us nice percussion.

38:38.400 --> 38:46.400
So, how about triggering samples?

38:46.400 --> 38:48.400
Yes.

38:50.400 --> 38:54.400
I think some samplers will work with MIDI notes.

38:54.400 --> 38:56.400
So, that will work.

38:56.400 --> 39:00.400
Also, you can trigger sequencers with this thing.

39:00.400 --> 39:04.400
We have to start playing and stop playing and continue playing blocks.

39:04.400 --> 39:09.400
But if there's something that you are missing in the library,

39:09.400 --> 39:12.400
these are all built with microblocks themselves.

39:12.400 --> 39:14.400
It's all built with blocks.

39:14.400 --> 39:21.400
So, for instance, say your sampler uses a special MIDI message that's not standard.

39:21.400 --> 39:24.400
You could look at how this block is made.

39:24.400 --> 39:26.400
You show the block definition.

39:26.400 --> 39:32.400
And you see it's actually using two different instances of this set MIDI note.

39:32.400 --> 39:35.400
It sets it on, it waits for the duration,

39:35.400 --> 39:39.400
minus the time it takes for the message to travel, and then it sets it off.

39:39.400 --> 39:41.400
So, how does this work?

39:41.400 --> 39:43.400
Let's look at the block definition.

39:43.400 --> 39:44.400
So, it depends.

39:44.400 --> 39:48.400
If you're sending me a list, then I'll send the list of notes all at once,

39:48.400 --> 39:50.400
so you can make chords.

39:50.400 --> 39:53.400
Otherwise, I'll send a MIDI command.

39:53.400 --> 39:56.400
And how does the MIDI command work?

39:56.400 --> 39:59.400
Well, the MIDI command is sending stuff over the serial port.

39:59.400 --> 40:03.400
And if you know the format of your special MIDI message,

40:03.400 --> 40:09.400
you can just send stuff over the serial port, and that will work.

40:15.400 --> 40:16.400
Okay.

40:20.400 --> 40:22.400
If that's all, thank you very much.

40:22.400 --> 40:24.400
And you can follow the project.

40:24.400 --> 40:25.400
Thank you.

40:25.400 --> 40:26.400
Thank you.

40:26.400 --> 40:27.400
Thank you.

40:27.400 --> 40:28.400
Thank you.

40:28.400 --> 40:29.400
Thank you.

40:29.400 --> 40:30.400
Thank you.

40:30.400 --> 40:31.400
Thank you.

40:31.400 --> 40:33.400
You can follow the project and myself in MasterDun.

40:33.400 --> 40:34.400
How did that happen?

