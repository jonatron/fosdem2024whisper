WEBVTT

00:00.000 --> 00:07.000
Then let's start. We would like to talk about Dora-Arres, which is a project to create a

00:11.640 --> 00:18.640
modern data flow framework for robotic applications. The idea of a data flow framework is that

00:19.520 --> 00:24.560
you split your applications into lots of small nodes that each perform some operation on

00:24.560 --> 00:30.320
the data, and then you can send the data by message passing to the next node, and this

00:30.320 --> 00:37.320
way you get a very isolated architecture. If one component goes down, for example, then

00:38.120 --> 00:43.880
the other components can keep on running, so you have very reliable architecture. For

00:43.880 --> 00:50.680
example, on the right in this example we have a webcam node that generates images, and these

00:50.720 --> 00:57.720
pictures are sent both to a plot node and an object detection node. The object detection

00:57.720 --> 01:04.000
uses an object detection algorithm to detect common objects in the image, and if it detects

01:04.000 --> 01:08.920
any it sends a bounding box to the plot node as well. The plot node can then combine the

01:08.920 --> 01:15.920
two and draw a rectangle around the detected objects in the image and print it out on the

01:16.920 --> 01:23.920
display or something. One nice feature of this design is that you can also split your data flow

01:24.960 --> 01:30.160
across multiple machines. For example, if you have an embedded system that has limited

01:30.160 --> 01:35.560
processing power, you can offload heavy computations to a remote machine and use the network for

01:35.560 --> 01:42.240
sending back the process data. Also, you have these nice boundaries, so by observing all

01:42.280 --> 01:46.960
the messages that are sent you can get a pretty good idea of what your system is doing. You

01:46.960 --> 01:52.480
have also, for example, the option to lock all the messages and try to replay them later

01:52.480 --> 01:59.480
on a debug system to debug issues. The most popular frameworks that implement this pattern

02:00.840 --> 02:07.840
are ROS and ROS2. They are both CNC++ based and have unfortunately quite a complex build

02:08.840 --> 02:15.840
system which can be a bit intimidating to beginners, but they are quite mature and widely used in

02:15.960 --> 02:22.960
both research and industry. The motivation for Dora was that we want to make the creation

02:25.040 --> 02:30.360
of robotic applications simple and fast, and we want to focus on modern languages like

02:30.360 --> 02:35.520
ROS and Python, but we still want to keep supporting CNC++. We also have plans to support

02:35.560 --> 02:41.760
WebAssembly in the future to have even more isolation between components. For the build

02:41.760 --> 02:45.480
system we try to keep things as simple as possible and to use the build system of the

02:45.480 --> 02:50.000
different languages when possible. So, for example, if you are writing one node in ROS,

02:50.000 --> 02:55.320
then you should just use the CrateZero dependency and run a cargo build command without any

02:55.320 --> 03:02.320
additional project specific tooling. And also we want to make it easy to integrate with

03:02.440 --> 03:09.040
latest technologies such as Python, AI models that you should be able to just use without

03:09.040 --> 03:16.040
much setup. For the general design we decided to make each node a separate process to benefit

03:16.520 --> 03:21.920
from the isolation and fairness guarantees of the operating system and to give authors

03:21.920 --> 03:28.920
of nodes a lot of flexibility because you have full control over the process so you

03:28.920 --> 03:35.240
can access devices or include some libraries that you need and so on. And the nodes communicate

03:35.240 --> 03:40.200
by sending messages as we said. So, for this we decided to use a declarative approach.

03:40.200 --> 03:44.080
We have a YAML file that lists all the outputs and inputs and how they map to each other

03:44.080 --> 03:51.080
so you have like a single crown of truth how your data flow graph is laid out. One feature

03:51.840 --> 03:58.120
that we are quite proud of is the zero copy implementation that is transparently added

03:58.120 --> 04:02.560
whenever the sender and receiver are on the same machine. So in this case we use chat

04:02.560 --> 04:08.680
memory to pass the message contents and we encode the messages using the Apache Arrow

04:08.680 --> 04:15.680
data format which allows us to access the data and process the data without any copying

04:18.760 --> 04:25.760
as well. So for example, on the right we could have a Rust node that sends some data to a

04:25.920 --> 04:32.920
Python node, the Python node in its Python runtime does some processing using NumPy for

04:33.640 --> 04:39.280
example and using this Apache Arrow format, all of that is possible without any serialization

04:39.280 --> 04:45.400
or copying of the data which is quite nice and also results in a quite nice performance.

04:45.400 --> 04:51.240
So here we see the latency of a Python node in Rust 2 compared with Dora and we see that

04:51.240 --> 04:55.840
for large messages the latency is much better because we don't need to copy the data or

04:55.840 --> 05:02.840
serialize the data at all. We also for compatibility try to create a Rust 2 bridge to allow the

05:05.720 --> 05:11.920
step by step migration of existing Rust 2 applications and also to use the existing

05:11.920 --> 05:17.960
Rust 2 tooling which is quite mature for our Dora nodes because we don't have that kind

05:17.960 --> 05:23.040
of tooling yet. For the implementation we decided to do the interfacing at the DDS level,

05:23.040 --> 05:29.040
so at the middleware level, so we don't link to the Rust 2 libraries but instead we have

05:29.720 --> 05:36.720
our own DDS implementation and this way the build process stays simple and we don't need

05:36.920 --> 05:42.920
to complicate things but we still are able to auto generate bindings for Rust in C++

05:42.920 --> 05:49.200
because we pass the message definition files of Rust 2 and we also have automatic type

05:49.200 --> 05:54.280
conversions between the Rust 2 message types, the error data types and the native Rust or

05:54.280 --> 05:57.280
Python types.

05:57.280 --> 06:03.960
Yeah and lastly, so we have two more features, one is open telemetry, so it's for everything

06:03.960 --> 06:10.080
that is metadata, we don't want you to learn a new way of logging your logs, tracing your

06:10.120 --> 06:14.360
traces and having metrics, so we're using open telemetry which is an open format that

06:14.360 --> 06:20.480
is available on many languages, C++ Rust and it can connect to many back end as well,

06:20.480 --> 06:25.280
so if you're already using some promissory graphana you can just use Dora and use your

06:25.280 --> 06:30.520
back end really quickly and have all your data coming in and there's also a lot of applications

06:30.520 --> 06:36.320
that use this open telemetry such as website, servers and so you could have your Dora data

06:36.360 --> 06:40.360
at the same time as your other application data.

06:40.360 --> 06:47.360
So that's really useful and then we have also a hot reloading feature that helps us basically

06:49.880 --> 06:54.840
reload our application without having to reset the robots, this thing can take a bit of time

06:54.840 --> 07:00.400
and sometimes there's some calibration so we found it really useful to be able to change

07:00.400 --> 07:05.840
the code, change the logic without having to reset the robot and now that we can generate

07:05.880 --> 07:11.880
code with generative AI with chargeability as you probably tried out or mistral AI on

07:11.880 --> 07:18.880
a local machine, it's really useful and actually it's very simple to code, you can use, you

07:18.880 --> 07:25.040
just have to check your state and if the state doesn't change, if it's compatible you can

07:25.040 --> 07:30.600
just swap state and it works, so yeah I'm going to do a quick demo because I think it's

07:30.600 --> 07:35.520
probably easier for you to understand, so I have a robot, I have a microphone, I have

07:35.600 --> 07:39.200
a speaker, I'm going to use whisper as a node to convert my speech to text and then I'm

07:39.200 --> 07:44.000
going to use an LLM to change the text to code and using the hot reloading feature it's

07:44.000 --> 07:50.000
able to directly change the behavior of the robot and then I have two webcams just so

07:50.000 --> 07:54.760
that everyone can see and then I have additional node but I'll let you go into detail later

07:54.760 --> 07:59.200
because I don't have too much time, so this is kind of an overview of what is happening

07:59.200 --> 08:06.200
underneath and yeah let's do a quick demo, so I'm going to start my graph instead of

08:07.320 --> 08:11.680
my computer and fortunately I can't share my screen because somehow my event is not working

08:11.680 --> 08:18.680
with the HDMI so I'm just going to use my microphone to try to work with the robot, so let's say

08:18.880 --> 08:25.880
I have a robot here, I'm going to say okay, can you set the rotation to 50 and so now whisper

08:26.080 --> 08:33.080
is going to convert what I said to code and then the code is going to be hot reloaded

08:34.840 --> 08:40.720
in the robot in real time hopefully, so the first thing is takes a bit of time but it

08:40.720 --> 08:46.800
should get there at some point, I'm just going to try again, can you change the rotation

08:46.800 --> 08:53.800
to 50 please, just give me one sec and normally it should move, there is no problem, so I

08:55.880 --> 09:02.880
go and so this is just code, right, it's not something that I've pre-implemented, it's

09:07.200 --> 09:12.800
not and we can, if people want to have a look, we can have a look deep behind the back and

09:12.800 --> 09:16.280
talk about it, I can make him move but the table is really small so maybe I can just

09:16.280 --> 09:23.280
try something very small, yeah, can you set the variable x to 1, so yeah, okay he didn't

09:24.280 --> 09:31.280
understand, he didn't understand the Bible, so yeah, can you set the x variable to 1,

09:35.120 --> 09:40.120
okay, the node should move, yeah, so you can really, you have all the control, you can

09:40.120 --> 09:45.120
make him move, rotate, thing, just going to hope it's not going too far but hopefully

09:45.120 --> 09:51.120
it should be okay, yeah, and yeah, so this is like really simple logic, it's just changing

09:51.520 --> 09:56.480
one variable but I can also use charge-pt which is way more powerful to generate way

09:56.480 --> 10:02.440
more complicated code, okay, so this is kind of, if you already used charge-pt before,

10:02.440 --> 10:08.240
you will see that it's not always reliable, so it should work but it's not a promise,

10:08.240 --> 10:13.080
right, and I'm sorry if it doesn't work and I probably have to do some debugging of the

10:13.080 --> 10:20.080
code that charge-pt generate but let's say I say, can you set the rotation according

10:20.240 --> 10:27.240
to bounding boxes, so you can't probably see but I'm running an object detection on

10:31.440 --> 10:35.040
my computer and so he's able to get bounding boxes, you've probably already seen demo

10:35.040 --> 10:40.040
with deep learning and pie torch and things like that and so it's actually very simple,

10:40.040 --> 10:47.040
right, if you look into details of many demos and so it's actually very simple to get bounding

10:48.000 --> 10:52.760
boxes, so I'm getting the webcam, I'm sending it to object detection and then I'm plotting

10:52.760 --> 10:56.360
it on my computer but I'm also sending it to the planning which is the thing that is

10:56.360 --> 11:03.360
controlling the robot and so then, so charge-ptd has to link this bounding box to a rotation

11:03.400 --> 11:08.200
axis which is actually quite complicated because the rotation is in angles and then

11:08.200 --> 11:13.520
only what he has is bounding boxes with x, y on a, like an image frame, right, so it's

11:13.560 --> 11:19.680
probably like 20 pixel left, 20 pixel right and so he has to generate this code but normally

11:19.680 --> 11:25.200
it should work and so charge-pt takes about 30 seconds to one minute, maybe more depending

11:25.200 --> 11:31.560
on the file length because it's per token right and so now it's still like talking

11:31.560 --> 11:38.560
with charge-pt I think and now it's finished so it should be able to move, I'm just going

11:38.720 --> 11:45.220
to log it, I'm sorry if I take a bit of time and, alright, so there was a bit of an issue,

11:45.220 --> 11:52.220
the true value of an array is complicated so, alright, just give me one sec, center

11:53.200 --> 12:00.200
x ratio, center x, center x, okay and then I'm going to put a zero here and normally

12:00.200 --> 12:07.200
it should work, is it moving? Oh yeah, okay, so now he should move according to what he

12:07.920 --> 12:14.520
sees, so if I'm here maybe he's going to move like here, okay, yeah and now it should stop

12:14.520 --> 12:21.520
moving, yeah, it's like doing some PID stuff, right, like kind of like brewing so, and

12:21.680 --> 12:26.640
so if I move here, he's going to move from here, yeah and so this is the whole logic

12:26.640 --> 12:32.320
it was charge-pt, I didn't code anything, I'm probably too lazy to code this thing but

12:32.320 --> 12:39.320
yeah, but you can see the idea so if, yeah, that's kind of where we are now and, yeah,

12:40.720 --> 12:44.920
time's up, okay, so here's the feature we have and if you have any features you can

12:44.920 --> 12:49.480
let us know and we'll try our best to make it happen, sometimes it doesn't happen but

12:49.480 --> 12:57.480
we'll try our best and yeah, so well, thanks for listening, yeah, thanks for having us,

12:57.480 --> 13:04.480
thanks.

13:04.480 --> 13:11.480
I have any questions?

13:15.520 --> 13:19.520
Hi, it was very interesting, when you showed the graph of the latency with ROS2 versus

13:19.520 --> 13:22.900
Dora, do you know what middleware you were using to compare against, because obviously

13:22.900 --> 13:27.400
ROS2 has a whole bunch of different middlewares that you can use some of shared memory, some

13:27.440 --> 13:30.440
over the loop back, do you know which one it was?

13:30.440 --> 13:33.440
I think it was default DDS.

13:33.440 --> 13:35.440
Yeah, it was default DDS.

13:35.440 --> 13:36.440
Or TPS or?

13:36.440 --> 13:41.320
Now I can't remember exactly the details but we tried to use the exact, like, tutorial

13:41.320 --> 13:47.200
version of ROS2 and in Python you can't do like shared memory things so like, we tried

13:47.200 --> 13:51.400
to use MW isorox thing with Python but it didn't really work out, yeah.

13:51.400 --> 13:58.400
And on real time stuff, do you have bindings for say POSIX, Tread Priority setting and other

13:58.400 --> 14:00.400
real time integrations or is that still in the Python?

14:00.400 --> 14:05.400
Yeah, that's probably things that we can improve but actually there's a lot of time spent on

14:05.400 --> 14:12.400
serialization, copying and so this is where we think that the biggest difference is, yeah.

14:12.400 --> 14:17.400
But we can definitely look more into detail into the benchmark if you're interested, yeah.

14:17.400 --> 14:20.400
I'll take up one over there.

14:20.400 --> 14:24.400
Right, I'll give you some problems.

14:24.400 --> 14:29.400
Oh yeah, it's moving because of bounding boxes, yeah, if you see.

14:29.400 --> 14:41.400
Hello, I'm curious why you chose to have an, over here, an explicit definition of all the kind of topics of communication.

14:42.400 --> 14:49.400
Like why use that instead of kind of the raw style just publish and subscribe without, blindly publish and blindly

14:49.400 --> 14:51.400
subscribe?

14:51.400 --> 14:54.400
Do you want to answer?

14:54.400 --> 14:58.400
Okay, okay.

14:58.400 --> 15:03.400
Yeah, I think it was just to have additional insight at the beginning directly.

15:03.400 --> 15:10.400
We also plan, I think if we go to the road again, we also plan this dynamic data flow feature again

15:10.400 --> 15:17.400
because in some cases it's quite useful to add nodes at runtime but for like getting started it was useful to be able to

15:17.400 --> 15:23.400
generate a graph of the whole thing and yeah, so.

15:23.400 --> 15:25.400
Okay, one more question.

15:25.400 --> 15:29.400
There was a guy over here, yeah.

15:29.400 --> 15:31.400
Hi, sorry, very interesting.

15:31.400 --> 15:38.400
Maybe I missed it but how do you communicate across different computers which networking provider are using?

15:38.400 --> 15:44.400
Right, so there's an SDK and so basically you can send messages with a protocol buffer and there's a small computer and it's

15:44.400 --> 15:49.400
interesting and the video stream is using H.264.

15:49.400 --> 15:56.400
Yeah, so I was talking about like Protobuf but just like what is like, I don't know, DDS for raws, then now they are moving to senior

15:56.400 --> 16:00.400
or what are you, how are you sending the messages actually?

16:00.400 --> 16:05.400
Okay, so now I'm just using the SDK of the robot for communicating, yeah, so it's very simple.

16:05.400 --> 16:11.400
In the future if we have remote machine we can use TCP and maybe Xeno type of thing for Dora itself.

16:11.400 --> 16:13.400
Okay, so Dora now it's only one computer.

16:13.400 --> 16:15.400
Now it's kind of one computer.

16:15.400 --> 16:20.400
Yeah, we have like basic TCP support for remote machines but nothing too optimized.

16:20.400 --> 16:26.400
Yeah, but it's definitely something we want to do.

16:26.400 --> 16:29.400
May I ask another one?

16:29.400 --> 16:40.400
Yeah, so have you tried R2R like the another raws Rust binding which is also like using the raws C library but wrapped and it doesn't

16:40.400 --> 16:48.400
use all the complicated, the amend and what not, cash is building with cargo which I agree it's a good advantage.

16:48.400 --> 16:52.400
So maybe it's interesting to check that library also.

16:52.400 --> 16:57.400
Yeah, absolutely, yeah, we definitely look into the raws thing and there's many clients.

16:57.400 --> 17:07.400
We're actually working on the raws to bridge as well and so we are using the Rust client from like an unofficial raws client that enables you to not use the

17:07.400 --> 17:11.400
complex like raws to build system and still use raws to.

17:11.400 --> 17:14.400
So this is how things are.

17:14.400 --> 17:18.400
Okay, so the robots are ticking over.

17:18.400 --> 17:20.400
Okay, thank you very much.

17:27.400 --> 17:30.400
Thank you.

