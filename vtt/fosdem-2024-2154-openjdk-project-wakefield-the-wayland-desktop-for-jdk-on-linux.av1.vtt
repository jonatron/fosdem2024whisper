WEBVTT

00:00.000 --> 00:12.720
Hello. Hi. Everyone, please take a seat. We're about to, well, we are starting. This session

00:12.720 --> 00:19.020
is OpenJDK Project Weight Field, the Whalen desktop for JDK on Linux. It's going to be

00:19.020 --> 00:22.680
a bit of a show here because we have three of us, so we're going to swap over. There's

00:22.680 --> 00:29.160
only two mics. We'll do our best. Very quick intro and then I'll turn it over. So I'm

00:29.280 --> 00:37.000
Phil Race. I work at Oracle. I'm the lead for the client libraries on OpenJDK. Next to

00:37.000 --> 00:42.400
me is Alexei Ushakov. He actually used to work in the Java 2D group at Sun a long time

00:42.400 --> 00:49.520
ago, but these days he works at JetBrains. And there's Nils DeGraf, who's a product manager

00:49.520 --> 00:55.440
or product owner, product, whatever, at Red Hat in the desktop group. And so he is going

00:55.440 --> 00:59.520
to do our first session. I'll hand it over to Nils.

00:59.520 --> 01:02.800
Okay. That's good. Maybe I should.

01:02.800 --> 01:04.080
You should. I should.

01:04.080 --> 01:06.280
This is going to be very interesting to do.

01:06.280 --> 01:12.040
Yes. I did not sign up for some dancing, but it's fine. The first, quickly about structure,

01:12.040 --> 01:17.200
we're first going to quickly explain what Whalen is and then explain how OpenJDK, then

01:17.200 --> 01:21.920
it tries to work on it and the whole weight field project. And then finally we have an

01:21.960 --> 01:27.040
actual demo and some explanation by Alexei. So quickly for Whalen, because we don't have

01:27.040 --> 01:33.560
that much time. So a bit closer. Okay. That should be better. First of all, what is Whalen?

01:33.560 --> 01:38.520
What is X11, for example, that it tries to replace? So it's about displaying. So rendering

01:38.520 --> 01:42.200
things into a, let's say, a matrix of pixels, something called, which sometimes called a

01:42.200 --> 01:45.640
frame buffer. And you usually try to get that on a stream, but maybe also try to stream

01:45.640 --> 01:50.800
that somewhere over the internet. And why do we need something fancy around that? It's

01:50.840 --> 01:53.680
because once you have multiple applications trying to render something, you want to have

01:53.680 --> 01:57.880
something like some kind of decisions around, okay, do we put them next to each other on

01:57.880 --> 02:02.640
top of each other or that kind of thing? So basically window management or tiling or whatever

02:02.640 --> 02:06.320
you want. And that's where a display server comes in. And you talk a display protocol

02:06.320 --> 02:11.480
between the apps and a display server. And it's usually also very related to input management,

02:11.480 --> 02:14.800
because, you know, if you have typing something, you want to go to your browser, for example,

02:14.800 --> 02:18.200
and you don't want to type your browser in some key logger application or something.

02:18.200 --> 02:24.640
So quickly about X11, which is, let's say, the old thing. So X11 started from the white.

02:24.640 --> 02:29.040
So we have the X11 server, which you start up normally using something like startX, which

02:29.040 --> 02:33.240
is going to listen to a socket, usually based on the display name, usually something like

02:33.240 --> 02:39.280
zero. And then each of your applications, I mean, imagine those two top applications

02:39.280 --> 02:44.160
being your browser or your file manager. And then they will actually say they will also

02:44.160 --> 02:49.360
connect to that socket. Sometimes if you have to do a display equals variable for the environment,

02:49.360 --> 02:53.320
and that's when which kind of socket it will try to listen to. So it will define the server.

02:53.320 --> 02:58.000
Now you're going to say something like, OK, now please X11 server, can you create me a

02:58.000 --> 03:02.600
new window? So X create window or something with this window, with this width and height.

03:02.600 --> 03:05.800
And then you can do your fancy things that you normally would expect to be able to do

03:05.800 --> 03:11.200
from a window manager. Now, that whole logic of should we be doing tiling or should we

03:11.280 --> 03:15.560
be doing overlapping windows and so on. That's usually what another X11 client, which is

03:15.560 --> 03:19.360
then usually the window manager comes in. And that actually helps in setting all the

03:19.360 --> 03:25.360
logic, let's say. So that's how the usual thing in X11 goes. Now X11, a very oversimplified.

03:25.360 --> 03:30.800
X11 is old. It's from the 80s. Now being old is not necessarily a problem. But it is older

03:30.800 --> 03:36.000
than, for example, Java and Linux. But one of the things is that it made a lot of assumptions

03:36.000 --> 03:39.600
that don't necessarily hold anymore and that are baked into the core protocol. For example,

03:39.680 --> 03:43.680
it talks about a root window, which we, once you have multiple monitors, you can still try

03:43.680 --> 03:47.280
to have like one big frame buffer that spans all of those monitors. But if you have multiple

03:47.280 --> 03:52.600
TPI, you can do trouble. Once you have GPUs get complexer and complexer, there's overlay

03:52.600 --> 03:56.840
planes and you want to do fancy stuff with that for performance reasons and battery reasons.

03:56.840 --> 04:01.560
There's security. X11 allows you to screen share anything and do input sniffing and snooping

04:01.560 --> 04:06.240
and spoofing without any kind of consent of notification. There's a dev room about Linux

04:06.240 --> 04:10.880
on mobile. I do not want a device that actually could do all of that with my private data.

04:10.880 --> 04:15.280
And there's also new UX paradigms like HDR, tiling window monitors and so on that actually

04:15.280 --> 04:20.880
make it be a bit harder, especially HDR. It's very hard to do, for example, in X11. So at some

04:20.880 --> 04:26.320
point people got together to create a new display protocol, which is that Wayland. So it's very

04:26.320 --> 04:30.160
minimal, but really, really minimal. It really tries to make sure it does not fall into the trap

04:30.160 --> 04:34.560
of making assumptions again. It goes to just say, okay, we have clients that want to send

04:34.880 --> 04:40.800
something rendered to a server, a compositor, let's say, and then we can then extend things over.

04:40.800 --> 04:44.880
So it doesn't even have a concept of top level windows, for example. You actually need an extension

04:44.880 --> 04:49.200
for that. It's called the XZG shell. If you ever want to look it up, it's very fancy. And some

04:49.200 --> 04:52.320
things you just don't want to have that in the display protocol anymore. For example, screen

04:52.320 --> 04:55.760
sharing is also related to videos. So we said, okay, let's try to put that out of the protocol,

04:55.760 --> 05:00.320
the core protocol and something with portals. But I will explain what portals are later.

05:00.320 --> 05:04.400
So what does a typical Wayland session look like? It's again, we start from the right. So we have

05:04.400 --> 05:08.400
the Wayland compositor, which you start. That's going to be, for example, with GNOME. It's going

05:08.400 --> 05:14.720
to be GNOME shell with KDE Billy Quinn. This way it will be something else. And then you will start

05:14.720 --> 05:19.280
a Wayland socket, which you can again listen to. You will talk to Wayland protocol. And a Wayland

05:19.280 --> 05:23.680
client will say, okay, please create me a surface. And then using that extension, for example,

05:23.680 --> 05:28.240
the protocol extension using XZG shell, you will then have something where you can say,

05:28.240 --> 05:32.000
I want to create a top level window and I want to do it this size. You can do positioning

05:32.000 --> 05:36.320
Wayland. Always fun. There's a lot of reasons for that. And for example, another Wayland client

05:36.320 --> 05:42.960
can be X Wayland, which is its own X11 server. So actually, inside your Wayland session, let's say,

05:42.960 --> 05:47.120
you can actually also then create multiple X11 clients, which will talk the whole X11 protocol

05:47.120 --> 05:55.600
and X Wayland to the translation to Wayland itself in the best way possible. And I did lie a little

05:55.680 --> 05:59.440
bit that this is not, or I did say that there's not everything yet. So there are some things that

05:59.440 --> 06:04.000
we don't want to put into a display protocol anymore. We want to do that in the portals. So we

06:04.000 --> 06:08.400
did something that that's new with Flatpak and snaps and all these containerization fancy methods.

06:08.400 --> 06:13.600
We want to make sure that there's some kind of permission thing, let's say that allows you,

06:13.600 --> 06:18.000
for example, I want to do screen sharing, let the user choose if that's okay or not. And then

06:18.000 --> 06:22.080
the deepest interface within a Flatpak, you can access that. And then, for example, go to Pipe

06:22.080 --> 06:26.480
Wire and other components which do not necessarily need to live in the compositor. You will go to

06:26.480 --> 06:32.800
those and then we can go to the next step, which is how portals can be maybe implemented, or,

06:32.800 --> 06:37.120
you know, how this can be used from within Wakefield. And I think that's going to be the part where

06:38.320 --> 06:41.520
Philip is going to come in. Okay.

06:42.400 --> 06:58.800
So Neil's described what Wayland is. And today, what we now have is a project to be able to support

06:58.800 --> 07:06.000
that Wayland compositing desktop from openJDK. And what's it all about really? Well,

07:06.960 --> 07:14.800
JDK is clearly a platform. It's not just an application and it abstracts away that

07:14.800 --> 07:21.920
underlying platform. So we're not going to be exposing anything about Wayland. Today, on Linux,

07:21.920 --> 07:27.520
it happens to be an X11 client. It's basically an X application at a, you know, crude level.

07:27.840 --> 07:37.520
But to be able to support that Wayland desktop, we need to make some changes in JDK.

07:38.880 --> 07:43.600
Some of the policies that Wayland has that Neil's touched on around security

07:45.360 --> 07:52.960
and things like that mean that the things that just are supposed to work in JDK won't work,

07:53.520 --> 07:57.120
even if we're trying to be that X going by that X Wayland

07:58.080 --> 08:04.240
product client that Neil showed on his diagram, right, which is what we call X compatibility

08:04.240 --> 08:12.560
mode. So that's the Wayland's compatibility mode for X11 applications. And although we don't even

08:12.560 --> 08:18.400
work in that today, even if we make it, even if we start to work in that, is that really the long

08:18.400 --> 08:24.080
term solution that we want, what we really would like is to maybe, you know, be a full on Wayland

08:24.080 --> 08:34.960
native client. So Open JDK project Wakefield, there's a URL there, has started a couple of years ago.

08:36.480 --> 08:44.720
And there are people from Red Hat, JetBrains, and Oracle who are working on this. We have a repo

08:44.800 --> 08:54.480
at the standard kind of in the standard format for Open JDK project repos. And what are our goals?

08:54.480 --> 09:00.800
Well, first off, we're going to try to support that compatibility mode properly. So we'll have a

09:00.800 --> 09:07.680
fully concomit, conformant JDK, and everything works as well as it can do, as well as it should do

09:08.240 --> 09:14.960
on the Wayland, when you're running on a Wayland desktop, but we'll be talking the X11 protocol.

09:15.520 --> 09:20.320
You know, we don't talk about it here, but, you know, most people will see that these days, if you

09:20.320 --> 09:25.760
log into a, you know, Linux desktop, they, and if you pay enough attention, there's an opportunity

09:25.760 --> 09:32.000
to switch between pure X.org and the Wayland desktop, which supports that compatibility mode.

09:32.560 --> 09:38.720
And right now, JDK only supports the X.org. So the longer term goal, as I just touched on, is that

09:38.720 --> 09:45.680
we want to be able to support native Wayland. So the X11 compatibility mode is some touch

09:45.680 --> 09:51.600
things that I'm going to touch on, but the much bigger thing is that native Wayland port.

09:53.440 --> 09:58.240
And there's a list of, there's a list here I won't read out of the different kinds of things

09:58.320 --> 10:05.680
that we need to deal with in making all of this work. And some of what we need to do

10:06.400 --> 10:12.480
for the native Wayland port is really just starting to emerge in the latest versions of GNOME.

10:13.120 --> 10:20.160
So it's not, this doesn't, this work is not intended for some, you know, older versions of Linux.

10:20.160 --> 10:25.120
This is something that you'll want to, or have to use on upcoming versions of Linux.

10:25.520 --> 10:36.480
And yeah, the policies of security that Wayland enforces, I think is the right word,

10:37.280 --> 10:43.040
are going to be some of the drivers for the things that we need to change.

10:45.920 --> 10:54.160
For example, the issues include, one of the most important things is we have an API that lets you

10:54.160 --> 10:58.960
capture screen pixels. And capturing the screen is, you know, Neil's touch on is something that

10:58.960 --> 11:04.960
Wayland very early on, I think, and is very clear about, doesn't like people to be able to do for

11:04.960 --> 11:12.480
privacy reasons. But AWT has expected to be able to do that forever. We expect to be able to do

11:12.480 --> 11:19.280
things for, like move the mouse, grab the pointer. We want to put our windows where we want to put

11:19.360 --> 11:26.320
our windows. Wayland will say, no, that's kind of our job. And you can't actually find out where

11:26.320 --> 11:35.280
windows are on the screen. Also in the X-Wayland compositing, in the X-Wayland mode, it's, there's

11:35.280 --> 11:43.600
the high DPI support is not complete. So in some of those things that I described above,

11:43.600 --> 11:47.760
Soundlight, they're things that you'd only need maybe for a test framework, but these are actually

11:47.760 --> 11:54.880
part of our standard APIs. And these, not many applications use them, but we have to be able

11:54.880 --> 12:00.480
to support it. And there's a bunch of bug level fixes that we've found we need to do as well.

12:01.120 --> 12:06.240
And we actually, you know, as the project went on, we actually found some bugs that were on the

12:06.960 --> 12:12.880
Wayland side as well. And there's a whole bunch of, all of these things that are described in

12:12.880 --> 12:19.440
detail at that URL, which I obviously, I'm not going to read out for you. So where are we now?

12:21.520 --> 12:28.320
JDK 21 pretty much did all of the work. We got the spec changes in that we needed. And

12:29.920 --> 12:36.320
there is a complete new implementation of the robot screen capture that was done almost entirely,

12:36.320 --> 12:42.160
well actually entirely by Alexander Zaginsev. It's using the screencast portal and pipe wire.

12:42.880 --> 12:49.840
And it, so the first time somebody tries to do a screen capture, there's a manual process of saying,

12:49.840 --> 12:56.000
yes, that's fine. And then after that, it's okay forever in theory. And there are some

12:56.000 --> 13:03.440
follow-up fixes going into JDK 22. We basically, if you have a desktop with GNOME 42, we should be good.

13:04.640 --> 13:10.560
And that will probably mean that we'll be able to, vendors will be able to officially support

13:11.360 --> 13:18.960
running on the Wayland desktop. In this compatibility mode with 22, which should ship in a month.

13:19.680 --> 13:26.480
And that's when we shift real focus to the pure Wayland toolkit. But there's, you know,

13:26.480 --> 13:33.040
what's involved a bit more about that. Complete new toolkit spans all of AWT in the window

13:33.040 --> 13:39.200
management and the rendering side. So all of these things here, creating windows, configuring windows,

13:39.680 --> 13:45.280
the management of everything, integration of the desktop, how you render to the surface. We can't

13:45.280 --> 13:54.640
use X11, open GL, sorry, XGL really. Or X render, which we, an X11 and X render is the default way

13:54.640 --> 14:01.600
we do everything on Linux today. Desktop integration, all of these different things I'm listening here

14:01.600 --> 14:08.160
need to be redone. When I was trying to describe it to somebody who's sort of more of a VM person,

14:08.160 --> 14:20.480
it's like, well, we need a new JIT and we need a new GC. And so that's the kind of scope of the work.

14:21.440 --> 14:27.520
So how would you do this? Well, I mean, a lot of GTK4 makes it fairly easy for a lot of applications

14:27.520 --> 14:33.920
to just, you know, port over because it deals with all of that, hides it from you. And then,

14:33.920 --> 14:38.320
you know, you would, Wayland, one of the things, it doesn't have a window manager, so

14:39.200 --> 14:46.320
it's client side decoration. It's all client side. And GTK would do that for you. And everything,

14:46.320 --> 14:50.160
I think, there, it sounds like it'd be easy to get a lot of things up and running, but it brings in a

14:50.160 --> 14:59.920
lot of baggage. If you do an LEDD or something on a running GTK4 process, you'll be paging through

14:59.920 --> 15:07.120
it for a while. And, but really, the, one of the problems was it's just really hard to get the

15:07.120 --> 15:12.000
level of management of when you render to the surface in the way that we need to with GTK4.

15:13.440 --> 15:19.520
There's more work with using the low level LibWayland, which is basically the equivalent of LibX11.

15:21.440 --> 15:28.720
But, you know, we've generally, when we've tried to do something with, in the JDK, like the most,

15:29.280 --> 15:35.680
the last example was we were doing a pipeline for Mac OS for their new

15:38.640 --> 15:45.200
rendering engine. And they have, like, a high level toolkit that's intended for applications,

15:45.200 --> 15:49.360
but we needed to use the lower level one. And it just sort of works out that way,

15:49.360 --> 15:53.440
seems, every time. But anyway, there's some new challenges that Wayland

15:54.000 --> 16:03.120
brings that, native Wayland brings that aren't necessarily there, that aren't there in the

16:03.120 --> 16:12.800
X compatibility mode. We need a new library Lib, EI, or A, however people pronounce it.

16:12.800 --> 16:18.640
That's just prototyping in GNOME 45. Well, it's the API, I believe, is final, but, you know,

16:18.720 --> 16:25.200
I think it's the first time it's been out there. That inability to layout windows that I touched on,

16:25.840 --> 16:31.120
it has some oddities like splash screens come up in the top left-hand corner of the screen.

16:33.280 --> 16:42.560
And, you know, that's not great from my perspective. So there is a, so there is a,

16:42.560 --> 16:51.280
already a toolkit in process and Alexi is actually going to be showing you that right now.

16:52.080 --> 17:06.560
And it's called WLToolkit. So, hand over to Alexi. Okay. Okay. Yeah. We use a separate thread for

17:06.560 --> 17:21.280
event handling in our prototype called WLToolkit. And actual handlers of Wayland events are

17:21.920 --> 17:30.960
dispatched on event dispatch thread. So, on Wayland rendering happens on client side. So, the client

17:31.200 --> 17:41.520
need to notify the compositor about the region that should be updated. So, we need to have a complete

17:41.520 --> 17:54.000
frame content and then submit it to the Wayland. That's required some changes in AWT and swing code

17:54.560 --> 17:58.160
to make sure that all the content is ready for submitting.

18:00.560 --> 18:11.920
Also, we use software rendering for our toolkit. Actually, software rendering was the only option

18:11.920 --> 18:20.480
in early ages of Java platform for swing applications. But since then, the situation has changed and now

18:21.440 --> 18:28.400
Java platform provides hardware acceleration for all major desktop platforms. Surprisingly,

18:29.360 --> 18:39.040
in current WLToolkit implementation, we have sometimes better performance than in X2 kit

18:39.680 --> 18:49.840
in X11 compatibility mode. So, for example, if you know a swing mark benchmark, it shows about

18:50.800 --> 19:03.360
40% better performance than in X2 kit. So, it's quite enough for desktop applications. So, we can use it

19:03.360 --> 19:11.520
now. However, there are some areas where we still have lower performance. For example,

19:11.520 --> 19:17.920
in current implementation, we have about three times worse performance comparing with the

19:18.720 --> 19:27.600
hardware-executed X2 kit. So, yeah, of course, modern desktop applications

19:28.320 --> 19:40.240
need rich text capabilities, including our IDs. So, we're going to work on this and

19:41.040 --> 19:48.320
improve the performance of front rendering. Our current plan is to use Vulkan as a hardware

19:48.320 --> 19:58.480
acceleration with our WLToolkit. And let's see our demos. So, let's try to run them. It's quite

19:58.480 --> 20:07.680
unexpected resolution here. Here, you can see a special aw.toolkit.name property, a standard

20:07.680 --> 20:16.240
property that is set to WLToolkit to enable this toolkit for us. And that's run, as swing said.

20:16.240 --> 20:24.400
Oh, yeah. It looks like it fit the screen. Okay. You may notice that here we have

20:26.400 --> 20:32.480
unusual controls, actually, if you'll mention that. It's because Wayland, in this core part,

20:32.480 --> 20:38.880
doesn't provide client-side decorations. So, these controls were rendered by ours,

20:38.880 --> 20:49.680
so in WLToolkit. Okay. And let's see how it works, actually. So, here is frames. So, buttons.

20:50.480 --> 20:59.760
So, we have some animated curve here. Some combo boxes, dialogues. Okay.

21:00.000 --> 21:15.040
And some checkboxes working. Some more dialogues here. So, progress bar demo.

21:16.320 --> 21:25.840
Scrollable image here in scroll pane. And sliders. Yeah, here we have split pane.

21:26.480 --> 21:36.560
Tabot pane with some animated images here. Tables. Yeah, they work quite well. And tooltips.

21:36.560 --> 21:45.440
Yeah. And tree with expanded nodes. So, as you can see, all the controls are properly rendered here.

21:45.440 --> 21:51.040
And then I would like to show one more standard demo, at least demos bundled with

21:51.680 --> 22:02.560
platform for many years to show. Swing UI from work capabilities. It's Java 2D demo. It shows some

22:02.560 --> 22:09.360
advanced graphics. So, we can see here curve rendering. Actually, it's not full speed, so we can

22:10.160 --> 22:17.440
reduce the delay and see how it works actually quite well. Yeah. So, we have many different things

22:17.440 --> 22:28.160
here. Some clipping, color conversions, compositing rules, font rendering, image ops. So, it's some

22:28.160 --> 22:35.840
conversions for images. Some stroking capabilities. Here's a mix it. Yeah, demo with different

22:36.720 --> 22:44.160
primitives, paint modes. We have also here path rendering and transformations. So,

22:44.880 --> 22:50.640
as you can see, performance is quite acceptable. Now, we'll try because of the resolution to

22:50.640 --> 22:59.440
launch real-world application. Community version of IntelliJ IDEA. Yeah. Probably, it would be...

23:00.640 --> 23:04.640
Wow. Yes, it works. Yeah.

23:05.280 --> 23:14.160
And here we also see that we use the same property at little kid.name,

23:15.600 --> 23:23.040
that in special property file that we use for IDs. Yeah, here we can see actual

23:23.040 --> 23:29.200
well and implementation here. So, it's the constructor. It's quite difficult to see something.

23:29.200 --> 23:34.880
And here is the separate thread that I mentioned that handles well and events.

23:36.720 --> 23:47.200
Okay, that's it. Thanks for listening. Any questions if we have time? We have a minute.

23:49.440 --> 23:50.320
So, any questions?

23:50.320 --> 24:05.920
So, what is missing for... I'm repeating the question. You showed IntelliJ working, so what is

24:05.920 --> 24:14.480
missing? It was in details. We have Piki users and there are some stuff that in some corner cases

24:14.480 --> 24:20.240
that it's not working well, but it's generally workable. So, we have some users who

24:22.800 --> 24:28.800
gave us feedback about the quality. So, yeah. But we still need to polish it.

24:30.080 --> 24:36.720
Yeah, that... If it wasn't completely clear, right, you can try this for yourself. The project

24:36.800 --> 24:46.480
that I actually... Didn't you have a slide showing the branch? So, you just can check out that branch

24:47.360 --> 24:57.280
from the Wakefield repository and build it yourself and try it. Yep. Yes, over there.

25:00.080 --> 25:06.640
It does it work with JavaFX? No, this is at this point, this is implementing within JD

25:06.720 --> 25:12.480
K. JavaFX is like a separate toolkit entirely and we have to repeat this exercise for that.

25:14.000 --> 25:15.840
Unfortunately. Yes, over there.

25:22.960 --> 25:23.840
Sorry, feedback.

25:26.080 --> 25:29.040
Did we fix bugs in Whalen? No, we reported them to...

25:29.760 --> 25:37.200
We had friends at Red Hat. So, we've had some calls and some of the developers, a couple of the

25:37.200 --> 25:42.640
developers who kind of work on the desktop and even on Whalen directly there and will say,

25:42.640 --> 25:48.880
yeah, I file a bug here or yeah, I think it is. So, we've reported bugs and they've been fixed. Yes.

25:50.880 --> 25:56.560
Yes. Any plans to support fractional scaling? Any plans to support fractional scaling? My

25:56.560 --> 26:03.200
recollection is that Whalen itself fundamentally decided not to support fractional scaling.

26:03.200 --> 26:06.080
There's an extension? There's a... Of course, there's an extension.

26:09.840 --> 26:14.800
So, yeah, there's a protocol extension to do fractional scaling and if the

26:15.680 --> 26:20.560
WR2 gets wants to implement that, it can do that normally. But it should work. It should

26:20.560 --> 26:24.720
definitely already with the native Whalen mode, it should already be better with

26:24.720 --> 26:31.440
then the whole blurriness sometimes gets an excapable. Yeah. The one thing about that though

26:31.440 --> 26:37.040
is just generally, I mean, with fractional scaling, we don't have to deal with fractional

26:37.040 --> 26:42.480
scaling on Mac because that's always multiple. With the Windows look and feel, we are still

26:42.480 --> 26:48.720
sorting out bugs trying to make that work. So, we would undoubtedly find a whole bunch of new bugs

26:48.720 --> 26:54.640
with the GTK look and feel when we started doing that. So, it's not just a simple matter of saying,

26:54.640 --> 27:03.280
oh, yes, you know, there'll be a mess to be sorted out that's separate from the Whalen project.

27:03.280 --> 27:07.200
I think we're probably out of time. Yeah.

