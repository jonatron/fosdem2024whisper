WEBVTT

00:00.000 --> 00:12.400
So, hello. This is where I get an email later from

00:12.400 --> 00:16.520
FOSDEM where should we cut the feed and start a new one.

00:16.520 --> 00:22.600
So this is where we will cut. I'm going to do a talk about making

00:22.600 --> 00:26.360
Ansible playbooks to configure Singlesign on for popular,

00:26.360 --> 00:30.400
popular open source applications. Yeah, I got that right.

00:30.400 --> 00:33.160
So, who am I? My name is Jerome Betten.

00:33.160 --> 00:37.800
Jeroen Barton, if you do it pronomously, correct in Dutch.

00:37.800 --> 00:41.400
Let's see what else there is. Oh yeah, if you're English and you want to know how you

00:41.400 --> 00:47.240
pronounce that, you just read this out loud and it should work.

00:47.240 --> 00:55.080
I do open source stuff. One of my recent projects is Chateau IT,

00:55.080 --> 01:01.320
which has a slide on its own. I wrote 12 books and I got a couple more in

01:01.320 --> 01:09.040
beta. I've got three girls and my wife had two girls so we married and there you go,

01:09.040 --> 01:13.360
five girls. I used to be a volunteer firefighter, did some

01:13.360 --> 01:20.480
scouting stuff. I do training and I hack a lot when I can.

01:20.520 --> 01:25.080
So what do I do? In this case, I do open source consultancy.

01:25.080 --> 01:30.480
One of the things I do is Chateau IT and in Chateau IT, we do training.

01:30.480 --> 01:38.520
One thing is the Bernard Prevention training so that's not so much IT, little, no IT actually,

01:38.520 --> 01:46.480
but it's for a technical crowd. And it's in Dutch but why the Chateau?

01:46.480 --> 01:49.280
Because I'm going to do that in the center of France.

01:49.280 --> 01:52.480
Anybody here from France? Okay.

01:52.480 --> 01:57.480
I have a little longevity in the center of France.

01:57.480 --> 02:00.480
We have a lot of it. Okay.

02:00.480 --> 02:06.480
XOIT, I retrained people to IT. I did that a couple of times before.

02:06.480 --> 02:13.480
I retrained a sailor into a programmer, C++ and I retrained somebody who had been selling

02:13.480 --> 02:19.480
suitcases at a warehouse for training years and he is now very, very, very happy working

02:19.480 --> 02:23.480
in the IT, starting in a help desk position.

02:23.480 --> 02:28.480
But he's happy because he's working with computers and he used to do that for his hobby

02:28.480 --> 02:36.480
and I helped him out on that. And those are, well, training for the really good IT guys

02:37.480 --> 02:45.480
and training for bosses management to explain technical stuff if they need that.

02:45.480 --> 02:48.480
But no commercial. Okay.

02:48.480 --> 02:52.480
Another project I do is LibrePlan which is a web-based project management.

02:52.480 --> 02:56.480
It's in Java. It's extremely cool. Have a look at it.

02:56.480 --> 03:03.480
And it's, I think I can safely say is about the best project planner that's out there in the world.

03:04.480 --> 03:08.480
For one minor detail, I'm about ten years behind in making a package.

03:08.480 --> 03:13.480
Full disclosure. But I'm going to do that next month or the month after that.

03:13.480 --> 03:18.480
So it will happen this time. Apologies.

03:18.480 --> 03:22.480
Is there somebody here from England? UK?

03:22.480 --> 03:25.480
Oh, that's good. Oh, there is.

03:25.480 --> 03:30.480
Apologies in that case because I speak English words but I don't speak English.

03:30.480 --> 03:37.480
Okay. Because I once found this translation guide that says when the British say with all due respect

03:37.480 --> 03:42.480
and what they mean is I think you're wrong but what I think, oh, he respects me.

03:42.480 --> 03:45.480
Oh, that's good. We've got a nice vibe going on.

03:45.480 --> 03:51.480
Because we take in Dutch if it's English and any other language, we take things, everything literally.

03:51.480 --> 03:56.480
Which sometimes lead to awkward situations.

03:57.480 --> 04:00.480
Okay. The project is short.

04:00.480 --> 04:05.480
I was hired to be a general manager at an IT company.

04:05.480 --> 04:12.480
I learned two things. One, I shouldn't be a general manager of an IT company.

04:12.480 --> 04:17.480
That's somebody else's job. Should be.

04:17.480 --> 04:23.480
But it was an IT company without IT landscape.

04:23.480 --> 04:27.480
There was nothing there. Well, almost nothing.

04:27.480 --> 04:30.480
Which is weird, especially for an IT company.

04:30.480 --> 04:37.480
So I started with the Proxmox Virtualization Server.

04:37.480 --> 04:41.480
I installed free by LDOP. I installed some applications.

04:41.480 --> 04:48.480
You know, XWiki for the wiki. If somebody doesn't have a wiki, look at XWiki because I think it's the best.

04:48.480 --> 04:52.480
Zebix Monitoring, Jenkins, SnacksCloud, GitLab, Odo.

04:52.480 --> 04:59.480
Odo is ERP from Belgium. If you haven't heard of it, look at it. It's awesome.

04:59.480 --> 05:06.480
CMD-Build is a completely customizable configuration management database.

05:06.480 --> 05:12.480
So if you haven't heard of it because not a lot of people have, look at that as well.

05:13.480 --> 05:22.480
Because you can really tune the data model of your own business into CMD-Build.

05:22.480 --> 05:29.480
And then put data into it with rest interfaces and connect it to other systems.

05:29.480 --> 05:35.480
Okay. And I got a question. How to upgrade this landscape?

05:35.480 --> 05:43.480
So I did this with LDOP authentication and somebody said, yeah, is there any way we can make this better?

05:43.480 --> 05:53.480
I said, well, you could switch to single sign-on. That would be an improvement over every single time entering your credentials.

05:53.480 --> 05:56.480
Oh, yeah, sure. Go ahead. Make it happen.

05:56.480 --> 06:02.480
So I was sponsored heavily by the owner of this company.

06:02.480 --> 06:09.480
By the way, it was Onstein in Breda in the Netherlands. And they are an Odo consultancy club.

06:09.480 --> 06:15.480
So, showing the Netherlands, thinking about ERP implementation. Have a look at Onstein.

06:15.480 --> 06:19.480
And they will gladly help you out.

06:19.480 --> 06:26.480
So I promote to make everything single sign-on. And that's where our venture starts.

06:26.480 --> 06:34.480
Basic lingo is that you need to know for single sign-on is the application that uses it is SP, the service provider,

06:34.480 --> 06:37.480
because it provides a service.

06:37.480 --> 06:46.480
And the application that does the identification is the identity provider, IDP.

06:46.480 --> 06:50.480
So you have to know SP and you have to know IDP.

06:50.480 --> 06:54.480
If you understand that, we're almost there.

06:54.480 --> 07:05.480
In our case, I used Keycloak, which is a very popular open source project with very nice features.

07:05.480 --> 07:13.480
It's a Red Hat project. And they used to have Red Hat identity server, which was based on Keycloak.

07:13.480 --> 07:20.480
And Keycloak became so popular, so now it's Red Hat's packaged version of Keycloak.

07:20.480 --> 07:25.480
Because Keycloak is more popular, which makes sense.

07:25.480 --> 07:33.480
ACS is Assertion Consumer Service URL. That's the service provider sign-in URL.

07:33.480 --> 07:39.480
So any application has an ACS, if you can single sign on to it.

07:39.480 --> 07:46.480
And you need to know that URL because you need to configure that at the IDP, the identity provider.

07:46.480 --> 07:55.480
Of course, you need Ansible, the. And who doesn't know what Ansible is?

07:55.480 --> 08:00.480
Okay, so Ansible, and I'm always getting slapped in the face.

08:00.480 --> 08:02.480
Oh, you know. Oh, you know. Okay, okay.

08:02.480 --> 08:04.480
Maybe somebody is watching.

08:04.480 --> 08:07.480
Maybe somebody who is watching. Okay, so Ansible.

08:07.480 --> 08:11.480
And I'm being slapped if I say this, but I keep saying it.

08:11.480 --> 08:20.480
It's a sort of a recipe language because I shouldn't use recipes because recipes term is claimed by.

08:20.480 --> 08:23.480
Chef. Thank you.

08:23.480 --> 08:29.480
But for the layman, and I'm a dumb guy, so I use the word recipes.

08:30.480 --> 08:34.480
Because you simply say, oh, now I want this computer to have this package installed.

08:34.480 --> 08:40.480
Now I want this configuration file to have that line added or deleted or changed.

08:40.480 --> 08:47.480
So you have all those very easy to read steps, and you make a recipe that you can send to a server,

08:47.480 --> 08:51.480
and then those steps are being done on that server.

08:52.480 --> 09:02.480
And it uses some JSON stuff, and anybody here who's a fanboy of JavaScript?

09:02.480 --> 09:09.480
Okay, because I think the JavaScript is a bad language, but JSON is very cool.

09:09.480 --> 09:14.480
Oh, that sounds like somebody who differs.

09:14.480 --> 09:17.480
Okay, basic single-cell no-process flow.

09:17.480 --> 09:22.480
The user clicks login on an application, application X.

09:22.480 --> 09:28.480
The browser of the user is then redirected to the identity provider, in our case Keycloak.

09:28.480 --> 09:33.480
The user is presented with a login widget by Keycloak.

09:33.480 --> 09:38.480
User logs in successfully, hopefully, or gets an error in the night message.

09:38.480 --> 09:43.480
If not yet 2FA configured, but set as mandatory,

09:43.480 --> 09:47.480
he gets 2FA setup dialog, all done in Keycloak.

09:47.480 --> 09:51.480
So it's very easy to enable 2FA for users.

09:51.480 --> 09:57.480
So you should, because that's today almost mandatory in a secure environment.

09:57.480 --> 10:01.480
Then the browser of the user is redirected back to the service provider

10:01.480 --> 10:04.480
with some credentials proving he has successfully logged in,

10:04.480 --> 10:09.480
and you get the application and you can do your stuff.

10:09.480 --> 10:17.480
Now, if you then, every other application is also redirected through Keycloak,

10:17.480 --> 10:23.480
but he says, oh, but you already have logged in, and you're immediately transferred back to your application.

10:23.480 --> 10:27.480
So it's single-signal. Any questions so far?

10:27.480 --> 10:30.480
Okay, cool.

10:30.480 --> 10:32.480
That's what I just said.

10:32.480 --> 10:38.480
The setup, user IDs are held in this case in free by LDOP, Keycloak for Web as a zone.

10:38.480 --> 10:44.480
Syncs with free EPA, so the LDOP is synchronized with Keycloak.

10:44.480 --> 10:49.480
Well, Keycloak gets the request and then sends it to LDOP for verification,

10:49.480 --> 10:58.480
gets back the signal, yeah, everything is okay, and then continues with the identity process.

10:58.480 --> 11:05.480
And the Keycloak server has a client definition for every application.

11:05.480 --> 11:11.480
So you can also read here client configuration, sorry, application configuration.

11:11.480 --> 11:16.480
But in Keycloak lingo, it's a client definition.

11:16.480 --> 11:24.480
And so it's not every user that logs in is not a client.

11:24.480 --> 11:27.480
No, the application is the client.

11:27.480 --> 11:30.480
So I started with this.

11:30.480 --> 11:37.480
The first application, X-Wiki, configuring it, writing Ansible, 20 minutes done.

11:37.480 --> 11:42.480
And I thought, what could possibly go wrong, right?

11:42.480 --> 11:48.480
Because, you know, I've only got, what is it, 8, 9, 10 applications to hook up,

11:48.480 --> 11:50.480
20 minutes for the first.

11:50.480 --> 11:53.480
Man, this is a breeze in three days, I'm done.

11:53.480 --> 11:56.480
So about a year later...

11:57.480 --> 11:59.480
It's...

11:59.480 --> 12:00.480
Sorry, what?

12:00.480 --> 12:01.480
Your certificates expire.

12:01.480 --> 12:07.480
Yeah, my certificates, no, no, almost probably, but I'm very bad at certificates.

12:07.480 --> 12:11.480
Internally, in a land, the lifetime, you know, I make it, I don't know,

12:11.480 --> 12:14.480
sometimes 10 years, I don't care.

12:14.480 --> 12:18.480
It's internally, so...

12:18.480 --> 12:20.480
Anyway, this was a walk in the park.

12:20.480 --> 12:22.480
It was based on good documentation.

12:22.480 --> 12:26.480
Do you know that there are developers who don't document their stuff?

12:26.480 --> 12:27.480
No.

12:27.480 --> 12:29.480
No, yeah, they don't, they don't.

12:29.480 --> 12:33.480
Some of them is really awful.

12:33.480 --> 12:37.480
Anyway, I added another application, etc., etc., etc.

12:37.480 --> 12:42.480
So this is what the client list looks like.

12:42.480 --> 12:45.480
And here you have...

12:45.480 --> 12:47.480
I made...

12:47.480 --> 12:52.480
This was my bad sense of humor.

12:52.480 --> 13:01.480
I made the key cloak server internally AD as host name,

13:01.480 --> 13:06.480
because that's what everybody from the outside would expect, right?

13:06.480 --> 13:08.480
And CMDB is here.

13:08.480 --> 13:10.480
Yeah.

13:10.480 --> 13:13.480
Okay, let's have a look at the program flow.

13:13.480 --> 13:19.480
And with program flow, I mean the Ansible playbook, my recipe.

13:19.480 --> 13:22.480
So there are two valuable files.

13:22.480 --> 13:24.480
One is global and the other one is encrypted,

13:24.480 --> 13:30.480
because, of course, to make a client definition on the key cloak server,

13:30.480 --> 13:33.480
you have to know the admin credentials of the key cloak server.

13:33.480 --> 13:37.480
So that's, of course, in an encrypted vault.

13:37.480 --> 13:41.480
And if you don't, you're a bad IT guy.

13:41.480 --> 13:44.480
Playbook works on the application VM.

13:44.480 --> 13:50.480
So I have made for every application a single playbook,

13:50.480 --> 13:52.480
because that's easy.

13:52.480 --> 13:56.480
You only, if you want to change something,

13:56.480 --> 14:02.480
you just look at that one playbook, sometimes two, couldn't be helped,

14:02.480 --> 14:05.480
because everything there is in a logical order,

14:05.480 --> 14:07.480
should be.

14:07.480 --> 14:14.480
And it's directed to the application virtual machine.

14:14.480 --> 14:18.480
And then the application virtual machine will connect to key cloak,

14:18.480 --> 14:23.480
do some magic, and configure its own,

14:23.480 --> 14:27.480
and then at some point, hopefully, it's done.

14:27.480 --> 14:32.480
So the playbook retrieves key cloak endpoints info via the host.

14:32.480 --> 14:35.480
Checks if key cloak client definition exists,

14:35.480 --> 14:40.480
and if it exists, it will delete it, because we have a playbook.

14:40.480 --> 14:42.480
And I can trial and error the hell out of it,

14:42.480 --> 14:44.480
and just delete the former client configuration,

14:44.480 --> 14:49.480
create a new one, and then configure that.

14:49.480 --> 14:52.480
So, yeah, it just deletes it.

14:52.480 --> 14:56.480
It fills a client definition template, that's in JSON,

14:56.480 --> 14:59.480
and that's a JSON file,

14:59.480 --> 15:02.480
uploads that to key cloak,

15:02.480 --> 15:06.480
with some keys that it has created, and some variables,

15:06.480 --> 15:12.480
and then, yeah,

15:12.480 --> 15:19.480
and then the client definition is created on key cloak.

15:19.480 --> 15:22.480
He checks, of course, if the client conversion is created successfully,

15:22.480 --> 15:27.480
if there was no error, and if not, okay, it downloads a shared secret,

15:27.480 --> 15:30.480
if relevant, if you use OpenIDC,

15:30.480 --> 15:34.480
because there are two ways to authenticate single send-on.

15:34.480 --> 15:40.480
One is OpenIDC, and the other one is SAML.

15:40.480 --> 15:46.480
So I have both in the set of recipes.

15:46.480 --> 15:52.480
So it's either OpenIDC or it's SAML.

15:52.480 --> 15:56.480
And Ansible leaves you with a configured application, if you're lucky.

15:56.480 --> 16:00.480
It even installs the application,

16:00.480 --> 16:04.480
and I need to start talking very quickly.

16:04.480 --> 16:06.480
Normally, I do this in an hour, now I have 30 minutes,

16:06.480 --> 16:10.480
so that's a problem, a slight problem.

16:10.480 --> 16:14.480
And at the end of the playbook, it displays remaining tasks,

16:14.480 --> 16:18.480
as in, look, you are the admin guy, this is the user credential,

16:18.480 --> 16:21.480
this is the password for the application I just installed.

16:21.480 --> 16:25.480
Now you need to go to this menu, this sub-menu,

16:25.480 --> 16:30.480
that you have to click this button, or you have to enter this string,

16:30.480 --> 16:32.480
if I couldn't do that remotely.

16:32.480 --> 16:35.480
For instance, if you install Jenkins single sign-on,

16:35.480 --> 16:39.480
you can do that using Ansible,

16:39.480 --> 16:41.480
but then it's a chicken and egg problem,

16:41.480 --> 16:45.480
because vanilla Jenkins doesn't support the REST API.

16:45.480 --> 16:51.480
You have to install a plugin, which I don't in my playbook.

16:51.480 --> 16:58.480
So, anyway, trust me, it should be easy.

16:58.480 --> 17:01.480
This is a very small print, but basically,

17:01.480 --> 17:04.480
these are all the steps that you do in the playbook.

17:04.480 --> 17:07.480
And since I have five-fifty minutes left,

17:07.480 --> 17:13.480
and the slides will be online, and there is a repository,

17:13.480 --> 17:17.480
every application also has a wiki page with extra notes,

17:17.480 --> 17:20.480
there are comments in the playbook,

17:20.480 --> 17:23.480
so, and if it doesn't work out, send me a message.

17:23.480 --> 17:26.480
That's how open source works, right?

17:26.480 --> 17:30.480
There's some tricks that I had to use,

17:30.480 --> 17:36.480
so this is a sort of condensed JSON stuff,

17:36.480 --> 17:40.480
so here you have your application-specific ACS,

17:40.480 --> 17:44.480
so that's where the key clock has to redirect you to,

17:44.480 --> 17:49.480
in this case, Zabix, to get you logged in,

17:49.480 --> 17:55.480
and you have several ID fields in JSON,

17:55.480 --> 17:58.480
and the ID is a random UUID.

17:58.480 --> 18:02.480
So, look up Community General Random String,

18:02.480 --> 18:06.480
and it's 20 to UUID, done.

18:06.480 --> 18:08.480
So, it's just a random string,

18:08.480 --> 18:11.480
and it changes every time you run this.

18:11.480 --> 18:15.480
You have to define the algorithm,

18:15.480 --> 18:19.480
the certificates which are generated,

18:19.480 --> 18:22.480
are placed in this variable,

18:22.480 --> 18:30.480
and then send this JSON file to key clock.

18:30.480 --> 18:36.480
Some of those applications need protocol mappers.

18:36.480 --> 18:40.480
In this case, the Zabix user protocol mapper,

18:40.480 --> 18:45.480
because it's SAML and Zabix expects the return thing to say,

18:45.480 --> 18:49.480
oh, yeah, Zabix user needs to have this email address,

18:49.480 --> 18:54.480
and you have to, that has to match on the email

18:54.480 --> 19:00.480
between Zabix user and key clock LDAP.

19:00.480 --> 19:07.480
Yeah, oh, yeah, and SAML's multi-valued roles false.

19:07.480 --> 19:11.480
It's now about a year ago that I did this talk for the first time,

19:11.480 --> 19:14.480
so don't use key clock 18,

19:14.480 --> 19:17.480
because you can set it to true or false.

19:17.480 --> 19:20.480
It will always be true, which means it doesn't work.

19:20.480 --> 19:23.480
That takes you a couple of days to figure out,

19:23.480 --> 19:32.480
but it was changed and the bug was smashed, whatever,

19:32.480 --> 19:34.480
after 18.

19:34.480 --> 19:39.480
Okay, so once you have a working synchthonal setup,

19:39.480 --> 19:41.480
use...

19:46.480 --> 19:48.480
Yeah, we're doing it again.

19:49.480 --> 19:54.480
This is if you start out for the first time with an application,

19:54.480 --> 20:00.480
and you don't have my playbooks,

20:00.480 --> 20:03.480
and you know a little bit about synchthonal,

20:03.480 --> 20:06.480
and you get it to work,

20:06.480 --> 20:11.480
then you need to have the client configuration of key clock,

20:11.480 --> 20:14.480
and there is a very simple script

20:14.480 --> 20:17.480
that will just give you the whole list of client configurations,

20:17.480 --> 20:21.480
and you copy-paste that one entry out of it,

20:21.480 --> 20:26.480
pipe it through JQ, replace settings with variables.

20:26.480 --> 20:29.480
There's even, I put in here, a very small div

20:29.480 --> 20:33.480
to compare two JSON strings,

20:33.480 --> 20:37.480
because he will order the fields and then do a div,

20:37.480 --> 20:40.480
so it's very easy to use.

20:40.480 --> 20:43.480
And why do I tell you this?

20:43.480 --> 20:46.480
Because I want you to do some work.

20:46.480 --> 20:48.480
Anyway, gotcha.

20:48.480 --> 20:51.480
Everything was better when you used HTTPS,

20:51.480 --> 20:57.480
because synchthonal and HTTP should work,

20:57.480 --> 20:59.480
but often doesn't.

20:59.480 --> 21:03.480
So just default in your head,

21:03.480 --> 21:05.480
make everything's HTTPS.

21:05.480 --> 21:08.480
Don't think it will be easier if I don't,

21:08.480 --> 21:10.480
because it won't.

21:10.480 --> 21:12.480
That's one.

21:12.480 --> 21:15.480
Tomcat expects an SSL keystore to have the password,

21:15.480 --> 21:17.480
change it.

21:17.480 --> 21:22.480
Don't change it, make that the password.

21:22.480 --> 21:26.480
It's, and maybe somebody else knows the other way,

21:26.480 --> 21:29.480
but that's my experience.

21:29.480 --> 21:32.480
Some application developers can't read.

21:32.480 --> 21:35.480
If the standard says optional,

21:35.480 --> 21:38.480
that is not the same as mandatory.

21:38.480 --> 21:42.480
So you look at stuff, you think this should work,

21:42.480 --> 21:45.480
it doesn't, why shouldn't it?

21:45.480 --> 21:48.480
And you start looking at it and debugging it

21:48.480 --> 21:51.480
and trial and error, recipe and delete client,

21:51.480 --> 21:53.480
make a new client, and at some points,

21:53.480 --> 21:55.480
oh, this is mandatory for them.

21:55.480 --> 21:57.480
The standard says optional.

21:57.480 --> 22:03.480
This developer, shit for brains, made it mandatory.

22:04.480 --> 22:08.480
And some applications are very badly documented,

22:08.480 --> 22:11.480
which is probably not a surprise,

22:11.480 --> 22:14.480
because that's basically our day job, right?

22:14.480 --> 22:18.480
Oh, yeah.

22:18.480 --> 22:21.480
And adding the free EPA keycloak user ID sync,

22:21.480 --> 22:23.480
midway was not a smart idea.

22:23.480 --> 22:26.480
I could just start from the beginning.

22:26.480 --> 22:30.480
So if you're thinking about using LDAP and keycloak,

22:30.480 --> 22:34.480
start with that and after that, do the recipes

22:34.480 --> 22:38.480
and don't do, oh, keycloak, oh, yeah, that works.

22:38.480 --> 22:40.480
I probably should sync to LDAP

22:40.480 --> 22:43.480
because you can start all over again.

22:43.480 --> 22:46.480
And to me, Ansible can solve just about any problem.

22:46.480 --> 22:48.480
Well, in IT, right?

22:48.480 --> 22:52.480
So not like world hunger or world peace.

22:52.480 --> 22:54.480
It's a little ambitious.

22:54.480 --> 22:59.480
And do not use keycloak 18 unless you like long searches.

23:00.480 --> 23:02.480
And walks in the park.

23:02.480 --> 23:06.480
Okay, so your job, if you choose to accept it.

23:09.480 --> 23:13.480
Because I have a repository.

23:13.480 --> 23:16.480
Add applications and build this further.

23:16.480 --> 23:20.480
The most, well, what I think are the most popular,

23:20.480 --> 23:23.480
but probably you think what's he talking about.

23:23.480 --> 23:25.480
This application is way more popular.

23:26.480 --> 23:30.480
I forked this, so I forked this from the one-stein repo

23:30.480 --> 23:32.480
that I made for one-stein, of course.

23:32.480 --> 23:37.480
But of this, I'm 100% sure I can always accept pull requests.

23:37.480 --> 23:38.480
Right?

23:38.480 --> 23:40.480
So I don't want to diss them.

23:40.480 --> 23:45.480
I'm very grateful for all the time they invested basically in me

23:45.480 --> 23:47.480
to make this happen.

23:49.480 --> 23:54.480
And yeah, that's simply because it's a very nice open source company.

23:56.480 --> 24:00.480
And if you have an application that you want to hook up using SAML,

24:00.480 --> 24:05.480
start with the ZappX Playbook, copy it, change it,

24:05.480 --> 24:10.480
because you know your application, I hope.

24:10.480 --> 24:13.480
Or you have got something running and configured,

24:13.480 --> 24:15.480
and you know how it works.

24:15.480 --> 24:20.480
Please adjust the Playbook and send a pull request to me

24:20.480 --> 24:21.480
for OpenID Connect.

24:21.480 --> 24:26.480
Start with the X-Wiki Playbook, because it's OpenID Connect-based.

24:26.480 --> 24:32.480
And every application is documented in the wiki on my repository.

24:35.480 --> 24:41.480
So it should be relatively easy if you know a little Ansible.

24:41.480 --> 24:45.480
And Ansible starts with the Playbook that does a ping and says,

24:45.480 --> 24:49.480
Pongbeck, if you have done that, you can do this.

24:50.480 --> 24:51.480
Yeah, sort of.

24:51.480 --> 24:55.480
Yeah, it's not that complicated.

24:55.480 --> 24:59.480
It was complicated for me because I had to do ten applications

24:59.480 --> 25:03.480
and some were severely badly documented.

25:05.480 --> 25:09.480
So Tui can tune to work in config, send me a pull request,

25:09.480 --> 25:11.480
and well, within the time.

25:11.480 --> 25:13.480
Are there any questions?

25:14.480 --> 25:15.480
Yes.

25:15.480 --> 25:19.480
Thank you so much.

25:19.480 --> 25:23.480
In the middle of the presentation, I mentioned that you use variables

25:23.480 --> 25:25.480
to grab those variables from a vault.

25:25.480 --> 25:29.480
I recommend grabbing them from a vault.

25:29.480 --> 25:32.480
We did the same.

25:32.480 --> 25:37.480
And now we have a couple of some applications consuming.

25:37.480 --> 25:41.480
So at the end, they are a volume of some hundreds of variables

25:41.480 --> 25:45.480
that you can't solve all over the directory.

25:45.480 --> 25:51.480
And then suddenly it became very slow and running the Ansible Playbook.

25:51.480 --> 25:53.480
We can really, really slow.

25:53.480 --> 25:55.480
And that's a constant and easy solution to that.

25:55.480 --> 25:56.480
Right?

25:56.480 --> 26:00.480
There are variables, not long-gauge series, but simple variables

26:00.480 --> 26:04.480
that increase the speed incredibly.

26:04.480 --> 26:09.480
OK, so to repeat the question, you have the experience

26:09.480 --> 26:13.480
that you have playbooks with in a vault a lot of variables

26:13.480 --> 26:15.480
and it becomes slow.

26:15.480 --> 26:24.480
And the suggestion by the kind server over there is to don't use large dictionaries.

26:24.480 --> 26:26.480
Or use fact caching.

26:26.480 --> 26:28.480
Or use what?

26:28.480 --> 26:29.480
Fact caching.

26:29.480 --> 26:30.480
Fact caching.

26:30.480 --> 26:31.480
Yeah.

26:31.480 --> 26:33.480
Or that.

26:33.480 --> 26:39.480
So, well, I had a very simple vault simply with the credentials of the keycloak server.

26:39.480 --> 26:45.480
That is basically just about it, which is, of course, two variables in a file.

26:45.480 --> 26:49.480
I did the password on my command line, of course, not in a repository.

26:49.480 --> 26:51.480
The.

26:51.480 --> 26:57.480
So my command line was simply look at that file for the password.

26:57.480 --> 27:02.480
And this is my vault file and do this keyboard with this host file.

27:03.480 --> 27:04.480
Yeah, sure.

27:04.480 --> 27:05.480
Welcome.

27:05.480 --> 27:08.480
Yes, kind server.

27:08.480 --> 27:14.480
You seem to be interfacing with a keycloak in a kind of like the wrong way.

27:14.480 --> 27:20.480
Because have you considered using the Antopole Community Keycloak module?

27:20.480 --> 27:21.480
No.

27:21.480 --> 27:25.480
There are actually very extensive keycloak modules.

27:25.480 --> 27:26.480
Yeah.

27:26.480 --> 27:27.480
They can configure keycloak.

27:27.480 --> 27:37.480
Well, the Ansible, there are some things about Ansible that I really love and some things

27:37.480 --> 27:42.480
about Ansible that I don't love.

27:42.480 --> 27:48.480
For one, I understand that because of the popularity, you need to start working with collections

27:48.480 --> 27:54.480
to split stuff and separate.

27:54.480 --> 27:55.480
What's the word for that?

27:55.480 --> 27:56.480
Accountability now?

27:56.480 --> 27:59.480
Separation of concerns.

27:59.480 --> 28:09.480
My goal was to make a set of playbooks that's very easy to read and a single playbook for

28:09.480 --> 28:10.480
a single task.

28:10.480 --> 28:20.480
So I don't use roles and all the subject directory, mumble jumble that comes with it.

28:20.480 --> 28:26.480
Now, a single file with a couple of steps that everybody can read also to understand how

28:26.480 --> 28:30.480
this stuff works and make it and configure it once.

28:30.480 --> 28:32.480
And yes, there are a lot of collections.

28:32.480 --> 28:41.480
There are a lot of excellent Ansible playbooks that are spread around the Internet Universe

28:41.480 --> 28:43.480
that gather information.

28:43.480 --> 28:47.480
You can even do a Kubernetes install.

28:47.480 --> 28:51.480
But that's a repository on its own.

28:51.480 --> 28:55.480
And I wanted to keep things simple, the KISS principle.

28:55.480 --> 29:00.480
Sure, but in Ansible, one of the objectives would be idempotency.

29:00.480 --> 29:02.480
And you start with deleting your client.

29:02.480 --> 29:06.480
So basically, you come to the idempotency tool.

29:06.480 --> 29:08.480
Will you confirm your client every single time?

29:08.480 --> 29:09.480
Yeah, I do.

29:09.480 --> 29:10.480
Yeah.

29:10.480 --> 29:14.480
You know that?

29:14.480 --> 29:15.480
What can I say?

29:15.480 --> 29:17.480
It's a design decision.

29:17.480 --> 29:24.480
And yeah, that's basically it.

29:24.480 --> 29:26.480
Sure, thanks.

29:26.480 --> 29:32.480
What about use cases when you have the IDP and the SP in different network segments?

29:32.480 --> 29:38.480
Think about your key flow needs to be in LAN because your customers need to be protected

29:38.480 --> 29:41.480
because they don't have proper security updates to key flow.

29:41.480 --> 29:42.480
Yeah, right.

29:42.480 --> 29:49.480
But they want their kitlab public or the other way around or their service.

29:49.480 --> 29:51.480
Usually, service is not in the open.

29:51.480 --> 29:52.480
Okay, yeah.

29:52.480 --> 29:59.480
So the service provider server needs to be able to connect to the key flow server during

29:59.480 --> 30:03.480
deployment of this playbook but also in production.

30:03.480 --> 30:06.480
And where they are, I don't know.

30:06.480 --> 30:07.480
I don't care.

30:07.480 --> 30:09.480
I'm just asking from the Ansible side to connect to them.

30:09.480 --> 30:14.480
I mean, like for the workflow, how do you deal with customers that have those requirements?

30:14.480 --> 30:16.480
What requirements would it be then?

30:16.480 --> 30:21.480
Not to run an unpatched key flow in public because your kitlab runs in public.

30:21.480 --> 30:25.480
Oh, yeah, but you can.

30:25.480 --> 30:29.480
No, I wouldn't do that.

30:29.480 --> 30:30.480
So, time's up.

30:30.480 --> 30:32.480
Thanks so much for your attention.

30:32.480 --> 30:34.480
And have a nice day.

30:34.480 --> 30:35.480
Thank you.

30:35.480 --> 30:36.480
Thank you.

