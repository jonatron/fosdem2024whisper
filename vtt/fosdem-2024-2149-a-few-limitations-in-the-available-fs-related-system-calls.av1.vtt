WEBVTT

00:00.000 --> 00:25.320
Okay. Ready for almost our last talk. Again, this is the kernel development room. Nobody

00:25.320 --> 00:31.040
got lost, hopefully, here. Our next talk is by Nick about limitations in the available

00:31.040 --> 00:32.320
file system calls.

00:55.320 --> 01:11.680
Okay. Now it works. Okay. Great. Thank you. Okay. So, hello. Thanks for having me here.

01:11.680 --> 01:17.840
Nick, I work at FORF. It's a research center in Greece, and I mainly do prototype bring-up.

01:17.840 --> 01:22.960
So, they give me boards and chips, and I make them boot Linux. We mostly work on RISC-5

01:22.960 --> 01:26.720
prototypes these days, and this is one of the projects I'm working on with the teams

01:26.720 --> 01:32.440
to bring RISC-5 to the cloud server region. So, I've played with the kernel. I have some

01:32.440 --> 01:37.240
driver experience. I've contributed here and there, but I'm totally clueless when it comes

01:37.240 --> 01:44.360
to file systems. So, while working on this project, I wanted to take a backup of my home

01:44.360 --> 01:48.840
folder, and I wanted to preserve as much as possible. And also, I had another use case

01:48.840 --> 01:53.640
when I wanted to take a backup of a really large media library we have in our radio

01:53.640 --> 01:59.200
station, our open source radio station in Crete, in the university. So, I tried, I was

01:59.200 --> 02:05.800
looking at the available programs out there like copy, r-sync, and stuff, and I sort of

02:05.800 --> 02:11.400
wondered what would it take to implement such a thing with the current APIs available in

02:11.400 --> 02:18.040
the kernel. And so, let's begin with what it takes, what it means to copy a file. First,

02:18.040 --> 02:25.120
you have to preserve the file data. You need to do this in an efficient way, and you do

02:25.120 --> 02:31.080
not want the files to be larger when you copy them to the destination, or you want to be

02:31.080 --> 02:36.680
also space and time efficient. And you also need to preserve file metadata, and file metadata

02:36.680 --> 02:41.480
is, again, the permission bits, like retry, execute for group and users and others, the

02:41.480 --> 02:47.680
ownership, like a user and group IDs, the timestamps, and there are some old school attributes

02:47.720 --> 02:54.880
which basically 32-bit mask used for tracking some attributes that were used to be file system

02:54.880 --> 03:01.080
specific, and then you have the extended attributes, which is a list of key value pairs that you

03:01.080 --> 03:07.800
can use. So, let's see what we have to the available API we have for that. For copying

03:07.800 --> 03:13.960
data, okay, you can, we have the naive approach, you can just open the source and destination,

03:14.000 --> 03:18.640
read from one copy to write to the other, and then close them, but this is not very efficient

03:18.640 --> 03:24.240
because you have to copy data to user space from kernel and then copy them back. So, you

03:24.240 --> 03:29.680
have send file, which is a more efficient way of doing this. This is a system called

03:29.680 --> 03:35.560
that's, so read, write, it's the most portable way, everyone has this. Send file is Linux

03:35.560 --> 03:40.960
and free BSD. So, what you do with send file is you have to file descriptors, and then you

03:40.960 --> 03:44.240
give them to the kernel, and kernel does the copying for you, so you don't have to read,

03:44.240 --> 03:49.600
move stuff to the user space and back. And then we have a new system called that's Linux only,

03:49.600 --> 03:54.040
and it's supposed to be the most efficient of all. It's called copy file range, and it's,

03:54.040 --> 04:00.800
it, it's the goal of the system called is to also take into account file system optimizations like

04:00.800 --> 04:05.920
copy and write, like, refling, like for example, when you want to copy two files on a server,

04:05.920 --> 04:10.720
on an NFS server, then the, instead of bringing them to the client, do the copy and send them back,

04:10.800 --> 04:16.960
you tell the server to do it for you. So, this new system called is, aims to do all sorts of

04:16.960 --> 04:25.760
optimizations for you, and from what I've read, they also want to do optimizations at the block

04:25.760 --> 04:32.080
level. For example, NVMe has this operation where you tell the controller to copy blocks for you,

04:32.080 --> 04:37.840
instead of doing it from the CPU. So, they aim to take advantage of these things as well,

04:37.840 --> 04:44.400
and this aims to be the new API for copying files. It doesn't work across file systems, it works,

04:44.400 --> 04:51.760
it has some limitations on how, where you can use them, but it's pretty cool. And it's, when we

04:51.760 --> 04:56.080
copy files, we not only want to copy the data, we only also want to preserve the holes, because I

04:56.080 --> 05:01.280
mentioned we want to be efficient in space as well. So, what this, this is, is some files that,

05:01.280 --> 05:07.040
for example, you have a large set of zeros, instead of storing them in the disk, you just truncate

05:07.040 --> 05:12.880
the file, and the file system driver will bring you back zeros, but you won't, you won't waste any,

05:12.880 --> 05:17.840
any space on the disk for that. And you have a L6 system call for that, so you seek for the next

05:17.840 --> 05:23.920
chunk, and then for the next hole, and you truncate. So, you want this, you want to do this for

05:23.920 --> 05:32.880
preserving holes, and not have the file growing when you move it. So, that's for preserving data.

05:32.880 --> 05:39.920
How do we preserve metadata? Okay, you have CHMOD for the permission bits, it's a, you have,

05:39.920 --> 05:46.400
you can have CHMOD, or the family of system calls, and you have CHMOD at, which takes an

05:46.400 --> 05:51.440
opath descriptor, which is very useful, I'm going to come back to that. You can use CHMOD for the

05:51.440 --> 05:59.040
ownership, and you have UTIM and S for ATIM and MTIM. So, two of the timestamps we have

05:59.920 --> 06:07.200
for the old style 32-bit attributes, there is an IOCTL, which is not portable. This is a set of

06:07.200 --> 06:12.960
FS flags, that some of them are file system specific, so it's not that you can preserve them

06:12.960 --> 06:17.920
while copying from one file system to the other, it won't make any sense to have the same flags,

06:18.800 --> 06:23.040
some, some of these flags do not make any sense for other file systems. There are some flags that

06:23.040 --> 06:28.240
are common between all file systems, like the immune, the immutable flag, or the append flag,

06:28.240 --> 06:33.840
which tells you that you are only able to append to this file, or that the immutable flag tells

06:33.840 --> 06:37.360
you that you are not able to do anything with it, even the root cannot do anything with it.

06:37.360 --> 06:41.520
Pretty useful for backups, for example, when you take the backup, you can mark the file as immutable,

06:41.520 --> 06:46.160
and then if some, for some reason, someone's doing RF minus RF, it will not delete the file,

06:46.160 --> 06:52.480
it will not be able to change it. So, but the IOCTL is not portable, it's a hackish way of doing it,

06:52.480 --> 06:57.280
it's a long way of doing it, so now we have the extended attributes, which is a better API

06:57.360 --> 07:03.120
for having attributes to the, adding attributes to the files, and this is used for all sorts of things.

07:04.240 --> 07:13.040
It's used for storing capabilities, it's used for security modules like SELinux, AppArmors, Mac,

07:14.560 --> 07:21.440
you can use it for access control lists, X4 uses this to store data in the iNode,

07:22.160 --> 07:28.800
it's crazy, I mean it's a huge list of extended attributes out there, there is even a configuration

07:28.800 --> 07:33.680
file where it gives you like a filter on which attributes you can preserve between file system

07:33.680 --> 07:40.000
and stuff, and honestly there is not a central place where you can get documentation on this,

07:40.000 --> 07:49.520
you have to look, find your way around it, so this is the way of preserving extended attributes, so

07:50.000 --> 07:59.120
let's see some problems so far. So, copy file range, as the man page says, may expand

07:59.120 --> 08:05.280
whole holes on sparse files, so this system called that's meant to be, you know, the whole

08:05.280 --> 08:12.960
source of optimizations when copying, like taking into account various file system and block level,

08:12.960 --> 08:21.520
even block level optimizations will expand holes, so you need, you can use this for copying chunks

08:21.520 --> 08:27.360
of files because you need to copy a chunk, do truncate and then the next chunk, so you cannot

08:27.360 --> 08:35.360
use it like to copy the whole file and forget about it, this also makes it, this both the

08:35.360 --> 08:40.560
instant file and copy file range, there are no IO hearing ops for that, so for example,

08:40.560 --> 08:47.040
if I want to copy a whole directory and I could do a batch of system calls in IO hearing for every

08:47.040 --> 08:52.160
file and then let the kernel copy the directory and come back when it finishes, I cannot do that,

08:52.160 --> 08:58.480
we have IO, you have IO hearing ops for read and write and the others, and even we even have IO

08:59.200 --> 09:04.400
hearing ops for the extended attribute system calls, but not for sent file or copy range, if copy

09:04.400 --> 09:11.280
file range didn't expand the holes and we could have an IO hearing op for copy file range, it could

09:11.280 --> 09:18.320
be great because we could just put it there and it will copy, it would be much better for, you

09:18.320 --> 09:23.120
know, copying batch of files, we would have to do system calls all the time for seeking and truncating

09:24.720 --> 09:31.360
and I mean it's meant to be the optimal solution, the other problem is that the opath descriptors,

09:31.360 --> 09:39.360
the op variants of these system calls, they take, instead of having the whole path string,

09:40.000 --> 09:46.160
you give a descriptor which is an opath descriptors which describes points to the directory, let's say,

09:46.160 --> 09:53.520
to the path, this is very useful because you don't have to, so you don't have to carry the

09:53.520 --> 09:59.280
string of the path all the time and it's more safe for multi-threading because for example,

09:59.360 --> 10:05.520
if you change directory while you're doing stuff, things will be messed up, so it's better to use

10:05.520 --> 10:11.920
opath file descriptors, opath descriptors, you get those from open app, you get from open,

10:11.920 --> 10:16.400
open gives you these types of descriptors that are very useful, but we don't have ad system

10:16.400 --> 10:22.800
calls for extended attributes, so we do have for everything else, but there are no ad variants

10:22.800 --> 10:28.240
for the extended attribute system calls, which it's a bit messy because you can use this for the

10:28.240 --> 10:35.440
rest of your process, like for copying files, for changing, for u-times, for changing the timestamps,

10:35.440 --> 10:39.920
but not for chmod, for cho, but we don't have it for extended attributes.

10:42.000 --> 10:46.320
You mean with opath file descriptors? Yes, I think that doesn't work, but we do have

10:46.320 --> 10:50.800
fsetx, adderat, and fgetx, adderat. We don't have it at, no.

10:51.440 --> 10:57.760
I mean you can't look up, yes they only operate on a specific fd, but I mean...

10:58.560 --> 11:04.480
No, no, no, for example, for chmod and cho, in u-times, then you all have ad variants,

11:04.480 --> 11:10.720
you can use opath descriptors. We don't have ad variants, sure, but I should probably...

11:10.720 --> 11:17.280
Yeah, you can do some tricks with proc self and get file descriptors from there and resolve the

11:17.280 --> 11:23.360
path, but it would make much more sense to have ad variants for those system calls as well.

11:24.560 --> 11:31.600
We didn't have chmod ad, but that got fixed on 6.6 with the chmod.2 system call, so now this is

11:31.600 --> 11:37.840
covered, and something else that's weird is that the u-times and ad allows an empty path flag,

11:37.840 --> 11:41.360
but it's not in the man page, so we need to update the man page for that.

11:41.920 --> 11:48.560
So that's one thing, it would be great if we had system call variants for the extended attributes.

11:49.280 --> 11:55.520
It would also make sense instead of having to use ioctl for the old school attributes to have a

11:55.520 --> 12:02.000
more portable way of playing with them, so maybe if we could use, if we could wrap them around an

12:02.000 --> 12:08.720
extended attribute, it would be better, I guess, because we wouldn't have to resort to ioctl,

12:08.720 --> 12:15.280
we could have a portable, like have one attribute for immutable, one flag, or one attribute for no

12:15.280 --> 12:22.080
dump that map to the old school bitmux, so that we have one API for all attributes, the old ones

12:22.080 --> 12:28.160
and the new ones, which is portable and not ioctl, and by the way with ioctl you cannot use

12:28.160 --> 12:34.400
opath descriptor, so that would be better. Another thing that I told you about before is that for

12:34.400 --> 12:40.160
the extended attributes, I couldn't really find documentation in one place, I had to look over

12:40.160 --> 12:45.120
the place and there are some of them that are not documented in the kernel, they're documented elsewhere,

12:45.840 --> 12:50.400
so it would be great if we had documentation for all the extended attributes the kernel

12:50.400 --> 12:55.360
understands and the permissions required for accessing them, because there are, for example,

12:55.360 --> 13:00.320
security and trusted namespaces that you can only access when you have the DAC admin and going,

13:00.320 --> 13:07.440
this is the next part, and you have some others that you need for security capabilities, you

13:07.440 --> 13:11.520
need setcap, for example, so it would be great if we had documentation for all the extended

13:11.520 --> 13:18.720
attributes out there and how you can set them, what do they do, so in terms of capabilities,

13:19.360 --> 13:25.520
when you do a backup, you probably need a couple of accurate search so that you can read the

13:25.520 --> 13:31.040
source hierarchy without being the owner of the files that you're copying, if you want to make copy

13:31.680 --> 13:38.880
special files like devices, you probably need cup and k-node, chown for doing, for changing the

13:38.880 --> 13:48.080
ownership after you've copied the file, you probably want, you want for again cup of owner to be able

13:48.080 --> 13:55.040
to set the timestamps and most of the extended attributes in order to set the immutable and the

13:55.200 --> 13:59.600
append attribute, the old style attribute, you need the Linux immutable capability,

14:01.200 --> 14:05.520
so what I want to point out here is that this is a bit inconsistent, for example, we have

14:06.400 --> 14:11.360
a capability for one attribute for the append and the immutable, and then we have another capability

14:11.360 --> 14:18.720
for the capabilities for an extended attribute, and then for two families of extended attributes,

14:18.720 --> 14:23.440
we have Capsis admin, which is an overkill, we don't want to use Capsis admin, so it would be,

14:24.400 --> 14:31.680
it would be nice if we discuss this a bit, like how should we arrange capabilities, how should we,

14:32.240 --> 14:36.720
how should we, maybe we should introduce more capabilities or review how these are being used,

14:37.600 --> 14:43.600
obviously we cannot, I mean break backwards compatibility, but it would be nice if we had that,

14:43.600 --> 14:50.400
I mean this goes also into discussion regarding documentation, like we could have a documentation

14:50.400 --> 14:54.720
or what you could do with this attribute, which capability you need to play with it,

14:55.520 --> 15:00.560
and what it does, so it would be, it would be helpful to have that, and then we could discuss

15:00.560 --> 15:05.600
how we could break Cic admin or how other capabilities we could introduce for maybe other

15:06.880 --> 15:15.440
special attributes, like for, I don't know, ACLs or something. So another discussion,

15:15.440 --> 15:20.080
when do backup file, let's say that we have done already a backup, and now we want to update it,

15:21.360 --> 15:26.800
first thing you do is like you check modification times, okay, you can see with them, with them time

15:26.800 --> 15:31.680
from one and the other, and make sure that if they're not the same, then the contents of the file

15:31.680 --> 15:39.680
have changed. M time only tracks the modification of the contents of the file, if you changed

15:39.680 --> 15:43.680
anything related to metadata, if you changed permissions, if you added an extended attribute

15:43.680 --> 15:50.240
or replaced an extended attribute, then you, M time will not catch this, C time will catch this,

15:50.240 --> 15:57.840
which is the last change attribute, but unfortunately you cannot preserve C time, so when you copy

15:57.840 --> 16:04.240
the file for the first time, the creation time, the change time on the backup, it wouldn't be the

16:04.240 --> 16:10.640
same as the source, so when the source C time changes, you cannot compare it with a backup.

16:14.480 --> 16:21.280
So it would be useful, and so maybe it changed a bit later, maybe, I don't know,

16:22.080 --> 16:26.000
you cannot compare them because they are in a different system, different time zones, I don't

16:26.000 --> 16:34.320
know, and you have no control over that. So if metadata changes in a file, you have to read

16:34.320 --> 16:39.280
them all and compare them by hand, so for example, if I add an extended attribute, I have to read

16:39.280 --> 16:43.200
all the extended attributes of the source, all the extended attributes of the target,

16:43.200 --> 16:48.320
and then see if something changed, because I cannot rely on C time, because I cannot preserve C time.

16:50.960 --> 16:58.800
So some tools, I mean, are synced, checks for M time, and if you want to be more safe, it uses

16:58.800 --> 17:06.160
CRC, CRC is unreliable, it's not secure, it says for security, but you can make your way through,

17:06.160 --> 17:10.960
you can change the file and preserve the checksum by adding some extra stuff afterwards.

17:11.760 --> 17:17.760
Shall be better, both these approaches are not nice because you need to read the whole file

17:18.400 --> 17:24.800
both on the source and the target and compare. We could use measurements from IMA, but we cannot

17:24.800 --> 17:30.400
expose those, we cannot transfer them through NFS, so if we are copying files from the NFS,

17:30.400 --> 17:35.680
NFS server and copying them locally, you cannot get the measurements on the server.

17:35.680 --> 17:39.840
There were some discussion around this, there were some patches, they were rejected,

17:40.400 --> 17:45.680
because I don't know there were some licensing issues, like IMA's, GPL, and NFS is different,

17:45.680 --> 17:51.680
they couldn't standardize this, so they could do an RFC call, whatever. So if we have measurements,

17:51.680 --> 17:57.200
we cannot expose them, I mean, even if I, like, so if we had, we could, I could at least compare them

17:57.200 --> 18:03.680
and make sure that the file contents were the same or changed, because M time is not reliable,

18:03.680 --> 18:08.160
I mean, if someone changes the file, they can reset M time, and I may not take a backup of it and

18:08.160 --> 18:20.240
leave any secure copy there. So we have a problem there, and I suggest that one approach to this

18:20.240 --> 18:27.680
problem, okay, obviously if we could expose IMA measurements through NFS, that would be the most

18:27.680 --> 18:34.480
appropriate way, because we could have, like, secure trusted hashes that we could use, but

18:34.560 --> 18:42.560
one way of doing it is if we could preserve C time, if we could preserve C time, when we copied

18:42.560 --> 18:48.000
the time, the file for the first time, we could have the same C time on the backup and the source,

18:48.000 --> 18:54.080
so if the C time changed in the source, we would, we could check it with the backup, we would know

18:54.080 --> 18:59.520
that something changed not only in the contents, like in the case of M time, but also in metadata,

18:59.520 --> 19:05.120
so we could use this to skip the file if something didn't change, instead of having to

19:05.120 --> 19:10.480
check all the metadata and compare and then skip, and also because when M time changes,

19:10.480 --> 19:16.800
C time also changes, if someone tampered with M time, if someone tampered with the data and then

19:16.800 --> 19:24.640
reset M time, because C time would change, we could also catch this. There is no API for doing that,

19:24.640 --> 19:29.120
and the reason is, there are various reasons, but the most obvious one is, like, there's a

19:29.120 --> 19:34.960
chicken and egg issue, like when you set the C time, because the C time tracks the changes of,

19:34.960 --> 19:40.320
any change you do to the I, no, it would need to update itself, so it will change the C time again,

19:41.200 --> 19:47.360
so if you set it in the past, for example, and when you do the change then it would need to be

19:47.360 --> 19:55.600
updated to indicate that it changes itself, so there's, I mean, semantically it's a bit of an issue,

19:56.560 --> 20:05.440
it's not another issue that when the C time is in a remote system and you try to change it

20:05.440 --> 20:11.760
locally, it wouldn't work, if you give the command, let's say, to change it, it wouldn't work, because

20:11.760 --> 20:21.440
on NFS the server tracks C time differently, so it's not that easy, and there is this discussion

20:21.520 --> 20:26.800
about C time, okay, C time currently is only maintained by the kernel, there is no API not

20:26.800 --> 20:32.720
even for the root, and there is this notion that this could be used for forensics, like for tracking,

20:34.400 --> 20:43.200
like malicious modifications to the file, but if someone is privileged then it can do other

20:43.200 --> 20:48.080
things as well, it can change C time by modifying the system time, which already, there are already

20:48.800 --> 20:54.880
programs out there that do this for you, or you can just open the file system, change the date on

20:54.880 --> 20:58.400
the file system and come back, and you can even do this without crashing the whole thing, because

20:58.400 --> 21:07.680
now we have FS freeze, and I tried it, it works, so I believe that since this is currently, it's

21:07.680 --> 21:14.160
doable, people can't tamper with C time, privileged users, I suggest that we have an API for doing

21:14.160 --> 21:21.920
this in the proper way, not in a hackish way, and maybe with a new capability for that,

21:21.920 --> 21:25.280
it's the same way that we have a capability for immutable, let's have another capability for

21:25.280 --> 21:29.200
C time, and I don't know, change U time, and so my introduction, another system call for that.

21:31.360 --> 21:38.720
I was thinking of birth time or creation time, like should I preserve that as well,

21:38.720 --> 21:45.840
and I didn't really find a use case for it, there are programs that already create, remove the file

21:45.840 --> 21:52.240
and create a new one, like Vi does, so this timestamp doesn't say much, but there were

21:52.240 --> 22:02.960
some discussions like this, there is a Windows, like in Samba, there are similar timestamps

22:02.960 --> 22:07.840
for another operating system that tell you where the file was created in the first place,

22:09.120 --> 22:15.120
and yes, that's why they added this, maybe we could have, instead of trying to preserve this,

22:15.120 --> 22:21.120
which is an immutable timestamp, maybe we could have like a common standardized extended

22:21.120 --> 22:26.000
attribute that we could carry around, I don't know, we could obviously have timestamp inside

22:26.000 --> 22:33.200
the file, but not all file formats support this, and then final, how do we back up encrypted files?

22:33.760 --> 22:40.720
So with eCryptFS, you could just copy everything as is, because the metadata and everything needed

22:40.720 --> 22:46.640
to decrypt the file is in the file itself, and then you also copy the configuration like the

22:46.640 --> 22:53.680
eCryptFS, which contains the wrapped key and stuff, but if you encrypted the files with Fscript,

22:53.680 --> 23:01.200
which is the new way of doing things, you cannot back them up, you could use, you could figure

23:01.200 --> 23:09.600
out if a file or a directory is encrypted, you cannot figure this out for a sim link, because

23:10.480 --> 23:17.600
in order to take this, you need to do an IOCTL, so IOCTLs don't operate on no path descriptors,

23:18.640 --> 23:23.840
and currently there is no API to copy, to back up files encrypted with Fscript,

23:24.720 --> 23:29.280
the only way of doing is to decrypt them first, and copy them and then re-crypt them,

23:29.280 --> 23:32.960
but this beats the purpose of having them in an encrypted form in the first place, if in order

23:32.960 --> 23:37.280
to do a back up, I need to re- decrypt them then, there is a window of opportunity there for an

23:37.280 --> 23:45.360
attacker. So that's all, that's a summary of what I'd like to discuss or what the issues I found,

23:46.320 --> 23:52.160
again, I'm not a file system expert, I don't know what would it take to do these changes in the

23:52.160 --> 23:58.320
kernel, I've only seen this from a user perspective, and that's it, thank you.

23:59.520 --> 24:10.480
Can you go back to the original slide, so tracking C time and M time changes, this is something that

24:11.520 --> 24:17.360
Jeff Layton has worked on in the context of NFS, because they also want to track changes to files,

24:17.360 --> 24:24.880
they have a need for this internally to NFS itself, I'm not completely sure how it works,

24:24.880 --> 24:29.440
but we do have internally something which is called the iversion, which is the i-note version,

24:29.440 --> 24:34.960
but we haven't really exposed this to user space, and the idea is that you get an updated iversion

24:34.960 --> 24:41.120
every time, for example a data or metadata change occurs, so that could be thought about exposing

24:41.120 --> 24:46.880
this to user space, but we weren't quite sure if we can have a consistent definition across

24:46.880 --> 24:52.960
all file systems for this, but anyway you should probably talk to him about this specific stuff,

24:52.960 --> 25:01.920
I think someone proposed listset get x-adder at system calls a while ago, and no one was really

25:01.920 --> 25:07.280
opposed to adding those, though I kind of questioned the value of them a little bit,

25:08.480 --> 25:14.320
my main gripe with them had been that the original proposal made it so that you can use

25:14.320 --> 25:20.640
opaf file descriptors to set x-adders, which I think is just opaf file descriptors are limited,

25:20.640 --> 25:26.800
and if we add ever more functionality to them, that you for example can set x-adders to an opaf

25:26.800 --> 25:30.400
file descriptor, at some point defeats the purpose of having an opaf file descriptor.

25:32.480 --> 25:37.120
It's for consistency, I mean you have it for the rest of it, you have it for ch-mode, for ch-own,

25:37.120 --> 25:41.120
for u-time and so, it makes sense to also have it for x-hub, right?

25:41.120 --> 25:46.720
Yeah sure, as I said I'm not really opposed to it, just a bit weird, because in a way that the

25:46.720 --> 25:53.040
thing that I don't quite understand yet is if you have open-at or open-at2, and you have a file

25:53.040 --> 25:56.960
descriptor, a starting point file descriptor, and then you want to back up, I don't know,

25:56.960 --> 26:01.280
you want to extend the attributes further down the tree, then you could do an open-at,

26:01.280 --> 26:04.960
open this file, and then pass that to fget get x-adder.

26:04.960 --> 26:09.600
Well if there are workarounds there you can also go from proc-self and get the descriptor and resolve it.

26:09.600 --> 26:12.320
Yeah and the thing is, the thing is what I'm saying is like a lot of these,

26:13.120 --> 26:17.520
a lot of the newer stuff that we have in open-at2 which have lookup restrictions where you can,

26:17.520 --> 26:21.840
for example, don't cross into another file system, known and so on, all of that stuff is not available

26:21.840 --> 26:27.440
with, for fset x-adder and get x-adder and so on. But anyway, I'm not opposed to adding this,

26:28.240 --> 26:37.520
if it's useful it would probably be easy to do. Yeah, I don't quite remember the IOC get set flags,

26:37.600 --> 26:42.720
this is not exposed in static sets, I assume everything that we have in IOC get flags.

26:43.680 --> 26:49.520
I don't remember, so the statics will tell you, because you also have an IOCPL for determining

26:49.520 --> 26:55.680
if it's encrypted or not, which you cannot use or see or on Syslinks, Asimlinks because you cannot

26:55.680 --> 27:03.040
use it. For the immutable, I don't remember, it has the, I remember that the immutable and they're

27:03.040 --> 27:07.760
not damp, they are reported, are part of the statics, so you could get them with statics,

27:07.760 --> 27:13.760
but how do you set them? You cannot set them in another way other than the IOCPL. So I was,

27:14.480 --> 27:20.240
I thought that since we already have the x-adder interface for setting attributes, maybe we could

27:20.240 --> 27:24.880
map those old attributes to some new extended attributes that set them through this way, so

27:24.880 --> 27:29.760
that we have a common API for all of them instead of resorting to IOCPL and use these flag...

27:30.400 --> 27:33.520
We probably need to talk about this a bit more because I don't understand what you mean by

27:33.520 --> 27:40.560
mapping those two x-adders, but in general the x-adder interfaces, they're somewhat broken,

27:41.200 --> 27:47.200
the complete API is somewhat broken, like if you, for example, if you set 1000 or 20,000 extended

27:47.200 --> 27:51.760
attributes on a file, then LIST X-Adder won't even return them to you anymore, because it will tell

27:51.760 --> 27:58.560
you, oh, it's limited to, I don't know, 64 kilobytes or less, and if you go over that, you can't list

27:58.560 --> 28:07.840
them anymore, like the whole API is fucked, so I mean... Yes, but yeah, it's used for everything,

28:07.840 --> 28:14.080
okay? I agree with you. It's even used for inline data, okay? X4 uses extended attributes to store

28:14.080 --> 28:20.720
data in the, I know it itself, so yeah, I get it, but I need to preserve them, I need to preserve

28:20.720 --> 28:26.720
both of them, so since this is what has come up with, let's at least, I don't know, at least bridge

28:26.720 --> 28:31.360
the gap between the old one and the new one, I mean, in the same way I have immutable and

28:31.360 --> 28:37.040
append, and I have to do the IOCTL, just give me a standardized extended attribute to do this,

28:37.040 --> 28:44.080
so that I only have to use one API, and not, because with the IOCTL, you can, you should also mask

28:44.080 --> 28:51.280
the flags that are not file system specific when you do it, and with the extended attributes, you can...

28:51.280 --> 28:57.840
You should or you can? You should. When you read the flags, you mask those that are file

28:57.840 --> 29:03.280
system specific, so that when you preserve them, you do not try to set a flag to a file system that

29:03.280 --> 29:10.000
doesn't make sense of that file system, so yeah, it's a mess, so if we had a extended attribute

29:10.000 --> 29:16.880
for wrapping this, we could, for example, get an error in this case, or it should be, we had, we had

29:16.880 --> 29:20.960
one API for the whole thing, which to me, it would look much cleaner.

29:24.800 --> 29:31.280
I don't know what would it take for copy file range or send, that's, or for send file to become an

29:31.280 --> 29:38.080
IO during op. That probably, I just sent a patch to Yen, so I'm pretty sure he's happy to take this.

29:40.400 --> 29:45.120
And I don't know what, if we had this flag, because config file range has a flags attribute

29:45.120 --> 29:50.320
that's not being used right now, it's just empty, so if we had the flag there for, you know, preserving

29:50.320 --> 29:54.240
holes, that would be great, because I wouldn't have to do all this back and forth to determine where

29:54.240 --> 30:00.640
the hole is and preserve them. That would be great, I guess. I don't, I guess, I, I, I, I, I, I, I, I, I,

30:00.640 --> 30:06.160
I, I, I, I haven't seen the code, I don't know what would it take, that's why I wanted some feedback

30:06.160 --> 30:10.640
on this, like, if this would break things, this would be too much to ask, I don't know.

30:15.120 --> 30:19.280
So, um,

30:27.280 --> 30:33.600
yeah, that's a approach, yeah, that's a good approach. It looks to me that this will be a lot easier

30:33.600 --> 30:44.000
if there was some sort of generic, uh, API to dump, uh, tree, our SAP tree in the file system,

30:44.000 --> 30:48.000
any file system implements that on its own, and then you get something generic,

30:48.960 --> 30:54.080
and then there's something to restore that. So, with Hal, let's say, a system called that would

30:54.080 --> 31:00.480
do the whole thing. Yeah, exactly. Because the file system knows better. Yes, but, I mean, they tried,

31:00.480 --> 31:05.040
they are already trying to doing that, at least that's what I understood from the documentation,

31:05.040 --> 31:10.960
with, um, uh, with the copy file range, at least for the data stuff. Yeah, but just for the data,

31:10.960 --> 31:16.320
what I mean is you, it doesn't have the holes, but, so you say we could have, like,

31:16.320 --> 31:21.360
something similar for the, for the whole attribute thing. Yeah, you give it a directory, and then

31:21.360 --> 31:28.000
it, it passes from that, the entire file system, and gives you something with all the attributes,

31:28.000 --> 31:32.960
holes, and whatever the file system supports, and then you can re-import that into another

31:32.960 --> 31:39.680
file system, and maybe you add some filter to it so that it doesn't give you something that it

31:39.680 --> 31:46.640
doesn't support in the other files that you want, or whatever. Currently, this filter is in a config

31:46.640 --> 31:53.360
file on ETC, and user space needs to be... Yeah, but it's user space-based. There is not a registry

31:53.360 --> 31:57.760
for all these attributes. That's one of the problems, right? I don't even know how many there are.

31:59.360 --> 32:08.080
And the other thing is, perhaps, it will make more sense to, instead of doing APIs like copy

32:08.800 --> 32:15.840
file range, to use the splice concept and implement it for pipes and sockets as well.

32:15.840 --> 32:23.760
Send file does this internally. So, the previous one, send file, it uses, internally, it uses splice

32:23.760 --> 32:31.680
for doing this in Kendo space. But it doesn't support the same kind of, like, going over holes and

32:31.680 --> 32:37.440
that sort of thing. Yeah, you still need to come back, but that's why I was saying that, since the

32:37.440 --> 32:43.280
new API is meant to be called file range, and it has a flag attribute there that we can use, maybe

32:43.280 --> 32:47.120
we could introduce a flag for this. That would make more sense, because send file is already being

32:47.120 --> 32:58.880
used, and it would break things we want to be about. Sorry, we're out of time. Okay? Thank you, everyone.

