WEBVTT

00:00.000 --> 00:12.300
Alright, hi, my name is Joshua Watt and I'm going to talk to you today about our migration

00:12.300 --> 00:16.120
to SPDX-3 from SPDX-2 in the Yachter project.

00:16.120 --> 00:19.480
I have a lot to get through so I'm going to go really fast.

00:19.480 --> 00:21.360
Alright, so a little bit about me.

00:21.360 --> 00:26.960
I've been working at Garmin since 2009, making primarily embedded Linux systems that run

00:26.960 --> 00:28.120
on boats.

00:28.120 --> 00:30.120
So that's exciting.

00:30.120 --> 00:34.320
We've been using Open Embedded in the Yachter project since about 2016 to do that.

00:34.320 --> 00:37.760
I remember the Open Embedded Technical Steering Committee and there's all the different ways

00:37.760 --> 00:40.280
you can contact me if you're interested in doing that.

00:40.280 --> 00:46.960
So I primarily work embedded and do some of the SPDX stuff on the side.

00:46.960 --> 00:50.640
If you're not familiar with Open Embedded in the Yachter project, Open Embedded is a

00:50.640 --> 00:58.560
community-driven project primarily focused on generating software for embedded systems.

00:58.560 --> 01:03.960
Open Embedded itself provides the core layers and build system that you use to build embedded

01:03.960 --> 01:05.520
systems.

01:05.520 --> 01:09.040
And then there's also the Yachter project which is a Linux foundation project.

01:09.040 --> 01:12.880
It provides a reference distribution built on top of Open Embedded.

01:12.880 --> 01:17.040
It also runs a whole bunch of QA tests to make sure that the project is high quality,

01:17.040 --> 01:20.840
which is a really schedule, provides funding and writes really good documentation.

01:20.840 --> 01:24.320
So if you're ever confused about the difference between the two, that kind of summarizes it

01:24.320 --> 01:25.320
a little bit.

01:25.320 --> 01:30.040
So I'm going to give you a very, very brief overview of how Yachter works.

01:30.040 --> 01:33.440
I do not have time to go into this in depth.

01:33.440 --> 01:36.920
I have a bunch of video, other talks I've given about this.

01:36.920 --> 01:39.080
So if you're curious, you can see those.

01:39.080 --> 01:41.040
It'll go into much more detail.

01:41.040 --> 01:44.520
I don't just don't have time right now.

01:44.880 --> 01:49.400
Basically the way that it works is when users want to build some thing for an embedded

01:49.400 --> 01:53.520
system or not exclusively embedded, but you can do other stuff too.

01:53.520 --> 01:56.440
They basically have source code that they want to use.

01:56.440 --> 01:58.640
They have some metadata that says how to build that source code.

01:58.640 --> 02:00.800
They've got some policy information.

02:00.800 --> 02:04.080
They shovel this all into this magical tool we call BitBake that does a whole bunch of

02:04.080 --> 02:07.760
stuff for them, compiles things, configures things like that.

02:07.760 --> 02:10.440
It spits out this thing we call a target image.

02:10.440 --> 02:12.920
You put that on your widget and profit, right?

02:13.880 --> 02:19.240
In a very high level, this is what the build flow sort of looks like.

02:19.240 --> 02:23.160
The important thing to note here is that we're building all of the native tools, which we then

02:23.160 --> 02:26.080
use to build all of whatever goes on your actual target.

02:26.080 --> 02:30.320
So we have a very comprehensive supply chain actually just built into the way that embedded

02:30.320 --> 02:32.320
builds in the first place.

02:32.320 --> 02:36.520
The way that we generate SPDX when we're doing this is as we go through this process, we're

02:36.520 --> 02:40.120
actually generating these SPDX documents at each step along the way.

02:40.240 --> 02:44.560
And then at the end, we have this final SPDX deliverable, which basically is just all of

02:44.560 --> 02:47.600
these documents combined together, and that describes whatever target image you built.

02:49.600 --> 02:53.280
This is what our SPDX 2 model looks like today.

02:53.280 --> 02:56.240
It's pretty complex and pretty comprehensive.

02:56.240 --> 03:00.520
We have a lot of really interesting things in here that I don't really have time to get into.

03:00.520 --> 03:04.560
But you can see that we're generating a lot of relationships and things like that that are really useful.

03:06.080 --> 03:09.720
So a couple of problems we ran into with SPDX 2.

03:09.720 --> 03:16.280
One of them is that in SPDX, we have this concept of the recipe element.

03:16.280 --> 03:24.360
And it's a little bit strange because it's not actually describing a thing that exists, per se.

03:24.360 --> 03:27.800
It's really describing a process that happened, which is we built software.

03:27.800 --> 03:35.080
SPDX 2 doesn't have a really great way of describing that because it only has a concept of really packages, not a process.

03:35.080 --> 03:40.040
SPDX 3 has made this much better by adding a concept of a build element,

03:40.040 --> 03:44.840
which describes something, a process that happened at a given point in time.

03:44.840 --> 03:47.240
And so we've transitioned to using that.

03:47.240 --> 03:50.000
And this is kind of what the build element looks like in SPDX 3.

03:50.000 --> 03:55.920
So you can describe the inputs and the outputs of the build element, so

03:55.920 --> 03:59.440
the things it took in and the things it's spitting out.

03:59.440 --> 04:03.800
And then you can also have sort of more abstract dependencies between build elements

04:03.800 --> 04:08.000
themselves, if you can say like this step depends on this step.

04:08.000 --> 04:13.040
The other way to show dependencies is the outputs of one step might be the inputs of another step, right?

04:13.040 --> 04:18.520
And so builds are really useful for describing how data has flowed through your system and

04:18.520 --> 04:21.200
sort of tracking how they've been changed and things like that.

04:23.000 --> 04:24.000
Yeah, just like that, right?

04:24.000 --> 04:28.120
So that build element could have inputs that were the outputs of another build element.

04:29.400 --> 04:31.640
You can also do nested builds, and this is really useful for

04:31.640 --> 04:36.720
us because we have a top level command called bitbake that the user actually invokes.

04:36.720 --> 04:42.320
But then that's actually gonna go and do a whole bunch of hundreds of individual build steps.

04:42.320 --> 04:46.880
And so we can actually track that by using this ancestor of relationship in

04:46.880 --> 04:51.560
SPDX 3 to say these builds were invoked as a sub build or

04:51.560 --> 04:56.400
whatever you wanna call it of the parent bitbake command that the actual user typed in.

04:58.360 --> 05:01.560
There's a couple of other information that's associated with a build.

05:01.560 --> 05:06.000
So there's host information so you can say exactly where a build was done.

05:06.000 --> 05:08.240
Like it was done on this VM or done on this machine.

05:08.240 --> 05:10.640
If you have a complete SPDX document that describes that,

05:10.640 --> 05:12.680
you can actually link that in there with this.

05:12.680 --> 05:17.000
You can also say who invoked the build using two relationships.

05:17.000 --> 05:21.240
So there's invoked by, which is the user or agent that actually did the build.

05:21.240 --> 05:26.160
And then there's delegated to, which is the user or agent that wanted the build done.

05:26.160 --> 05:30.600
So this would be the difference between like if you click the build button in

05:30.600 --> 05:34.760
GitHub or whatever, the user that wanted the build done is the person who clicked

05:34.760 --> 05:37.600
the button, the agent that actually did it was GitHub.

05:37.600 --> 05:40.280
So you can track both of those things, which is really useful.

05:42.920 --> 05:47.720
Another problem that we had, particularly with the way that we generate our documents,

05:47.720 --> 05:52.560
was that the SPDX IDs and SPDX 2 are really only valid within the context of

05:52.560 --> 05:55.120
a document, which is fine.

05:56.120 --> 05:59.720
But that means that you can only reference an SPDX ID and

05:59.720 --> 06:04.520
SPDX 2 by referencing the document that contains it and

06:04.520 --> 06:06.120
then the ID within that document.

06:08.120 --> 06:12.040
And then also when you reference a document, you have to include is checksum.

06:12.040 --> 06:14.800
And I completely understand why it was done this way.

06:14.800 --> 06:16.480
It makes a lot of sense.

06:16.480 --> 06:19.680
But it's really hard when you're doing things like us, like we were doing,

06:19.680 --> 06:23.360
where we're generating all of these documents as we go along in the build.

06:23.360 --> 06:27.320
Because when you have to reference a document and include is checksum,

06:27.320 --> 06:29.880
you can't ever go back and change a document you've done before.

06:29.880 --> 06:32.920
Because if you do that, you have completely invalidated everything,

06:32.920 --> 06:34.920
all of your links, all of your SPDX IDs.

06:34.920 --> 06:39.080
If you ever change any document you've done before, they're no longer valid.

06:40.360 --> 06:43.040
In the wider ecosystem, I understand why that's done, but

06:43.040 --> 06:47.720
that was really hard for us and made it hard.

06:47.720 --> 06:53.240
And so because of that,

06:53.240 --> 06:55.760
it's also very difficult to merge documents together.

06:55.760 --> 06:56.720
It's not impossible.

06:56.720 --> 07:00.320
It's just really difficult because the SPDX IDs are scoped to the document that

07:00.320 --> 07:02.040
they're contained in.

07:02.040 --> 07:03.720
And so if you're merging documents together,

07:03.720 --> 07:06.320
there might be duplicates and conclusions and then you have to go find all of them

07:06.320 --> 07:07.400
and fix them.

07:07.400 --> 07:10.720
So we just kind of gave up and stuck all of our documents that we produced in a

07:10.720 --> 07:14.840
tar ball and called it good cuz we just couldn't figure out a better way to do it.

07:14.840 --> 07:15.840
I did that.

07:16.800 --> 07:23.480
SPDX fixes this by using a linked data where objects can basically have a globally

07:23.480 --> 07:24.360
unique ID.

07:24.360 --> 07:27.800
It can be referenced from anywhere.

07:27.800 --> 07:31.480
It's actually mandatory if the element can be referenced cuz there's no other way to

07:31.480 --> 07:32.480
reference it.

07:32.480 --> 07:37.240
And this makes it a lot easier cuz you don't have to worry about the conflicts of IDs.

07:37.240 --> 07:41.200
You can just say, I'm gonna reference this ID and it exists somewhere.

07:41.200 --> 07:45.800
And that makes it way easier for us to not have to actually try to figure out

07:45.800 --> 07:46.520
stuff out.

07:48.280 --> 07:52.000
And that also makes merging a lot easier because the IDs aren't namespace so

07:52.000 --> 07:53.400
they're unique.

07:53.400 --> 07:58.000
And so with SPDX3, we can actually generate a single JSON LD document at the end that

07:58.000 --> 08:01.120
is the entire document instead of having to do it with the tar ball.

08:02.600 --> 08:07.080
The third problem we had with SPDX2 that will hopefully be a lot better here is the

08:07.080 --> 08:10.120
validation was really hard because for some reason we're putting all our documents in

08:10.120 --> 08:11.400
a tar ball.

08:11.400 --> 08:15.600
People don't know how to pull in a tar ball full of SPDX documents to validate it.

08:15.800 --> 08:17.280
And also the data was just huge.

08:17.280 --> 08:21.920
So a lot of the especially early validation tools for SPDX2 just couldn't handle the

08:21.920 --> 08:23.560
sheer amount of data we were producing.

08:24.520 --> 08:28.640
For like a root file system image that we would generate, there was 100 megabytes of

08:28.640 --> 08:30.760
data for an embedded system.

08:30.760 --> 08:34.400
We were generating 150 to 200 megabytes of SPDX.

08:34.400 --> 08:36.880
So there was more SPDX data than actual data.

08:38.640 --> 08:41.200
Yeah, turns out compilers are really good at compressing things.

08:42.200 --> 08:49.200
Yeah, so we had to hand validate most of our SPDX output, at least parts of it, just to

08:49.200 --> 08:50.200
see if it was all.

08:50.200 --> 08:55.560
SPDX3 actually has a formal shackle model which helps a ton with this because there are tools

08:55.560 --> 08:58.600
that will just take in a shackle model and take in your document and say this is valid

08:58.600 --> 08:59.600
or not.

08:59.600 --> 09:04.320
I don't think it covers like 100% of the things, but it's miles better than what we

09:04.320 --> 09:05.320
had for SPDX2.

09:05.320 --> 09:09.520
And as a bonus for this, we're working on a process to automatically generate language

09:09.520 --> 09:14.520
code bitings from that shackle model to make it easier for people to write tools and stuff.

09:16.520 --> 09:18.920
Another problem we had was the CV and vulnerability tracking.

09:18.920 --> 09:23.560
SPDX2 didn't really have a mechanism for saying how vulnerabilities have been addressed.

09:23.560 --> 09:29.240
So we were tracking the things we built, like their CPE, but then we were also patching

09:29.240 --> 09:33.240
things for the users and there wasn't a way to express that in SPDX2.

09:33.960 --> 09:39.040
We did it in SPDX2, but it was very specific of the way we did it.

09:39.040 --> 09:42.120
The only way you would have known is if you had known, oh, this came from the OctoProject

09:42.120 --> 09:45.840
or the OctoEA generated us, but I can look in these special annotations and figure out

09:45.840 --> 09:46.840
that this was patched.

09:46.840 --> 09:48.960
It wasn't standardized at all.

09:48.960 --> 09:52.560
SPDX3 has VEX compliant encoding for vulnerabilities.

09:52.560 --> 09:57.560
So you can actually say, yeah, we know the CVE applies, but we also already fixed it for

09:57.560 --> 09:58.560
you.

09:58.560 --> 09:59.560
So yeah, it's great.

09:59.560 --> 10:01.880
It's really complex for the SPDX3.

10:01.880 --> 10:03.360
VEX reporting is very powerful.

10:03.360 --> 10:06.840
It's kind of what it looks like very quickly.

10:06.840 --> 10:10.240
All right, so where we are today?

10:10.240 --> 10:12.360
So this is what our SPDX3 model looks like today.

10:12.360 --> 10:13.960
I'm sorry, I have a lot.

10:13.960 --> 10:15.760
This is what it looks like today.

10:15.760 --> 10:19.360
I did provide the link there if you want to go look at it.

10:19.360 --> 10:20.400
It's in a different format.

10:20.400 --> 10:22.080
It's actually very similar to the SPDX2.

10:22.080 --> 10:27.200
If you dig down, we're doing a lot of the exact same relationships just better and more

10:27.200 --> 10:29.440
precisely, which is really nice.

10:29.440 --> 10:31.880
Yeah, there's that link there you can look at.

10:31.880 --> 10:34.520
I will publish my slides.

10:34.520 --> 10:36.720
There are, it's not a free lunch.

10:36.720 --> 10:41.840
There are a couple problems that we've seen on the horizon with SPDX3.

10:41.840 --> 10:48.720
The big one is we have very strict requirements on we can't be pulling in any external dependencies

10:48.720 --> 10:51.800
to process our SPDX documents.

10:51.800 --> 10:54.880
I don't think we're unique in that situation.

10:55.000 --> 11:02.360
So how are people going to successfully, how do you successfully interchange SPDX data

11:02.360 --> 11:05.720
in a very minimal dependency way?

11:05.720 --> 11:09.840
And that's kind of my main concern because what I'd really like to do is not only generate

11:09.840 --> 11:14.560
our own SPDX documents, but also make our build process link in documents from upstream

11:14.560 --> 11:16.440
sources.

11:16.440 --> 11:21.840
And the only way I can do that with no dependencies is if there's a standardized way of interchanging

11:21.840 --> 11:23.040
SPDX documents.

11:23.040 --> 11:24.560
So I really, really want that.

11:24.560 --> 11:27.000
And that's kind of where that at context comes from.

11:27.000 --> 11:28.840
I don't like context in my documents.

11:28.840 --> 11:30.240
Just no, no, no context.

11:30.240 --> 11:32.560
I just want everything there.

11:32.560 --> 11:34.520
But we're talking about that.

11:34.520 --> 11:38.920
So my closing thoughts is SPDX3 is, it has a much higher ceiling.

11:38.920 --> 11:44.720
Right now we're just doing the same things that we were doing with SPDX2, but it, there

11:44.720 --> 11:50.680
is a lot more that we will be able to do with SPDX3 just looking at the things that we

11:50.680 --> 11:56.360
could, will be able to do that were just basically would have been impossible with SPDX2 and

11:56.360 --> 11:57.600
linking documents together.

11:57.600 --> 11:59.100
So much easier.

11:59.100 --> 12:00.500
So much happier with that.

12:00.500 --> 12:04.080
No one likes tar balls full of text files.

12:04.080 --> 12:07.240
Other talks, this is other talks I've been getting about SBOM generation, open embedded.

12:07.240 --> 12:09.040
It goes into way more detail.

12:09.040 --> 12:11.200
Check it out if you're interested.

12:11.200 --> 12:12.200
Any questions?

12:12.200 --> 12:13.200
No.

12:13.200 --> 12:14.200
Yeah, no, no.

12:14.200 --> 12:15.200
Cool.

12:15.200 --> 12:16.200
I'm here.

