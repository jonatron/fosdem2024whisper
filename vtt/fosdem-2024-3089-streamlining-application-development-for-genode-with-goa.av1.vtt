WEBVTT

00:00.000 --> 00:17.400
Okay, my name is Johannes, I'm from Genote Labs, and I want to show you a tool for developing

00:17.400 --> 00:19.720
applications for Genote.

00:19.720 --> 00:29.720
So I think Genote has been present in the micro-conadero room every year, I think, since

00:29.720 --> 00:33.240
a couple of years.

00:33.240 --> 00:40.720
So I don't think it needs much of an introduction, but I have a short introduction here.

00:40.720 --> 00:47.880
And I'm just irritated because my slides aren't complete on my laptop, and it's okay.

00:47.880 --> 00:49.880
Okay, on the presenter.

00:49.880 --> 00:57.800
Okay, so the Genote OS framework has a component-based operating system, it supports different micro-conaderoes.

00:57.800 --> 01:03.200
So I would actually like to switch contacts after a lot of Unicernel talks today.

01:03.200 --> 01:11.880
We're talking about micro-conaderoes here, but I'm not going into technical details since

01:11.880 --> 01:17.000
it's the last talk, and since we actually want to look at how we can develop applications

01:17.000 --> 01:18.000
for Genote.

01:18.000 --> 01:23.560
Yeah, it quarterly releases since 2008.

01:23.560 --> 01:30.640
And in addition to the framework, we have a showcase that's this GALT OS that's based

01:30.640 --> 01:36.320
on Genote that we at Genote Labs actually use as a daily driver.

01:36.320 --> 01:45.920
So I'm actually running it on the system right now, so you see a control interface here.

01:45.920 --> 01:50.080
I will demo it later on.

01:50.080 --> 01:54.040
So back to my slides here.

01:54.040 --> 01:59.880
The GALT OS release roughly twice a year.

01:59.880 --> 02:03.160
So what was the motivation behind GOA?

02:03.160 --> 02:05.080
The tour I'm presenting here.

02:05.080 --> 02:11.480
So the Genote build system, it's very useful and efficient and robust for developing on

02:11.480 --> 02:13.840
the framework.

02:13.840 --> 02:19.000
But it can be a little bit cumbersome for our development, so we have to do a lot of

02:19.000 --> 02:21.960
things and there's kind of a learning curve.

02:21.960 --> 02:28.400
So if you occasionally get into Genote and want to try some applications, then it can

02:28.400 --> 02:31.120
be a little bit off-putting.

02:31.120 --> 02:37.000
So GOA, the name is from GOAL, but reached a little bit sooner.

02:37.000 --> 02:43.080
It was started by Norman who's sitting in front of me in 2019 as a site project.

02:43.080 --> 02:47.320
And last year we moved it under the umbrella of Genote Labs.

02:47.320 --> 02:53.280
And since then it has seen quite a few additions and features.

02:53.280 --> 03:02.960
And as already mentioned, its intention is to streamline the development of individual

03:02.960 --> 03:07.720
applications for Genote.

03:07.720 --> 03:12.960
Before I go into that, I have to tell you something about how applications are deployed

03:12.960 --> 03:14.560
on Genote.

03:14.560 --> 03:21.400
So the package management is made up the way that each user manages its own depot.

03:21.400 --> 03:25.760
And depot contains different types of archives.

03:25.760 --> 03:34.520
So for instance there are API archives which contain header files to use a library.

03:34.520 --> 03:39.920
And then there are source archives which contain the source code, obviously.

03:39.920 --> 03:45.120
And then there are the binary archives which contain the compiled binary architecture,

03:45.120 --> 03:50.440
specific binary corresponding to a particular source archive.

03:50.440 --> 03:57.280
And then we have such things as raw data archives which contain just raw data architecture

03:57.280 --> 04:00.400
independent, so no binaries.

04:00.400 --> 04:06.400
And then we have package archives which contain the runtime information.

04:06.400 --> 04:12.200
So the information you need to actually start up an application scenario.

04:12.200 --> 04:21.120
And it also contains a list of the required source, raw, and package archives.

04:21.120 --> 04:29.520
And then we also have an index which is a list of users, packages, or package archives

04:29.520 --> 04:35.760
that can then be used to, or can be deployed to, in scope you will see later on in the

04:35.760 --> 04:43.400
demo how the index is used to actually install applications on the system.

04:43.400 --> 04:49.600
And the archives are simply placed in corresponding sub-directives according to the names listed

04:49.600 --> 04:51.200
here.

04:51.200 --> 04:57.040
And now I want you to keep in mind that a Goal project basically resembles the structure

04:57.040 --> 04:59.640
of these people.

04:59.640 --> 05:07.080
I'll get back to that in a couple of slides and show you.

05:07.080 --> 05:09.640
So what's the actual workflow?

05:09.640 --> 05:15.480
So here's the very simplified application workflow with Goal.

05:15.480 --> 05:23.400
So first you import, or you may want to import third-party software.

05:23.400 --> 05:27.960
First import the source code and maybe also patch it.

05:27.960 --> 05:34.000
Then you want to build it using the build system that comes with this third-party software.

05:34.000 --> 05:37.560
So just reusing a commodity build system.

05:37.560 --> 05:44.800
Then you want to test or run it on your development machine or another machine.

05:44.800 --> 05:53.280
And if this works well, then you actually want to export and publish it so that other

05:54.160 --> 05:57.280
users can run it.

05:57.280 --> 06:03.000
So Goal now is a command line tool which basically has commands for all of these stages shown

06:03.000 --> 06:04.000
here.

06:04.000 --> 06:10.400
And here I will walk through these wide away.

06:10.400 --> 06:19.160
So when it comes to importing third-party source code, in order to make this Goal import

06:19.160 --> 06:22.440
run, we require some files.

06:22.440 --> 06:30.360
So first of all there's an import file which actually describes what you want to download

06:30.360 --> 06:32.240
or what you want to import.

06:32.240 --> 06:38.040
And this then actually populates the source or raw sub-directory.

06:38.040 --> 06:43.480
Here's a brief example.

06:43.480 --> 06:50.480
So this import file is basically a makefile syntax which defines a couple of variables,

06:51.040 --> 06:55.440
license and version, and then what you actually want to download.

06:55.440 --> 07:00.720
And there can be a list of the syntax.

07:00.720 --> 07:02.640
It has a name and a type.

07:02.640 --> 07:05.760
Here the name is Calc and the type is an archive.

07:05.760 --> 07:08.040
So a table.

07:08.040 --> 07:10.160
And there are other types supported.

07:10.160 --> 07:17.160
You can download from Git repository, SVN, or a single file.

07:17.160 --> 07:26.160
And then you specify the URL for the archive to the char or for Git it would be the revision.

07:26.160 --> 07:29.480
And you also define in which directory it goes.

07:29.480 --> 07:33.520
So it can be the source directory or the raw directory.

07:33.520 --> 07:36.000
And you are also able to patch this here.

07:36.000 --> 07:40.440
I haven't shown this, but it's all documented in the intro documentation.

07:40.440 --> 07:42.920
So just type Goal help import.

07:42.920 --> 07:49.920
And you get a man page style help which should clarify how to use it.

07:52.640 --> 07:59.640
Next step after having the import we would build the code.

07:59.640 --> 08:03.360
So Goal build just builds the code which is present in the source directory,

08:03.360 --> 08:09.360
whether it's imported or whether you wrote it on your own.

08:09.920 --> 08:15.280
What you also need is you need two files, a used API file and an artifact file.

08:15.280 --> 08:23.240
So the used API just says which APIs or which API archives you depend on

08:23.240 --> 08:31.040
and the artifact file names the build artifacts that you want to include in your binary archive.

08:31.040 --> 08:33.840
We have a couple of supported build systems here.

08:33.840 --> 08:38.680
So just plain can you make or CMake or autoconfcumake.

08:39.000 --> 08:45.480
We also have some Rust support with cargo and it's extensible so that you can add your own build system

08:45.480 --> 08:49.960
and this list will probably grow in the future.

08:49.960 --> 08:55.600
And there's also a couple of other files which you see on the right.

08:55.600 --> 09:03.600
So like configure arcs or make arcs by which you can control or add some flags that you need for building.

09:03.600 --> 09:10.600
So the next step would be to test run the scenario.

09:11.600 --> 09:15.600
For this we have two more files that we need.

09:15.600 --> 09:19.600
So there's an archives file and the runtime file.

09:21.600 --> 09:28.600
You can actually have in a Goal project a multiple runtime scenario.

09:28.600 --> 09:32.600
So there's a sub directory structure that you see on the right.

09:34.600 --> 09:40.600
And then archive file lists the archives, the depot archives you depend on.

09:40.600 --> 09:47.600
And the runtime I won't go into detail but it specifies how the...

09:49.600 --> 09:51.600
It specifies the runtime scenario.

09:52.600 --> 09:57.600
What I want to go into more details is supported targets.

09:57.600 --> 10:12.600
So by default you can run the software and the host system which leverages the fact that the denote executables are binary compatible with all the supported kernels that we have.

10:12.600 --> 10:23.600
And part of this is also the Linux kernel so you actually can run the denote system on top of your host system, your Linux system on which you are developing.

10:23.600 --> 10:29.600
And then the component is just pop up as Linux processes.

10:29.600 --> 10:33.600
And a very new target is the Sculptarget.

10:33.600 --> 10:47.600
So we have implemented a method to synchronize all the required files via HTTP server to running Sculptarget system.

10:47.600 --> 10:54.600
And thereby remotely run your application and test run your application on the system.

10:54.600 --> 10:57.600
So let's have a look at that.

10:59.600 --> 11:01.600
Here's my Linux VM.

11:04.600 --> 11:08.600
I think the font is big enough, right?

11:08.600 --> 11:20.600
So here I have a project that's a calculator app imported from the Lumre UI toolkit which was formerly known as the Hubo2 Touch UI toolkit.

11:20.600 --> 11:27.600
And let's have a look what's in the directory there.

11:28.600 --> 11:32.600
First of all there's the import file which I'm interested in.

11:32.600 --> 11:39.600
So I don't have any source code here so I need to first import it.

11:39.600 --> 11:50.600
But since Goal takes care of doing the import step before the build happens, I can just try Goal build.

11:50.600 --> 12:01.600
It downloads everything needed and then builds the application.

12:01.600 --> 12:11.600
So what I have then is IFDSource directory which is popped up.

12:11.600 --> 12:15.600
So the source code is imported into the source directory.

12:15.600 --> 12:19.600
Next I can type Goal.

12:19.600 --> 12:22.600
My G is actually a bit...

12:22.600 --> 12:24.600
Okay, Goal run.

12:24.600 --> 12:33.600
Now I see the window opening and now I have the calculator up here.

12:33.600 --> 12:41.600
So as I said before all the components are now running as Linux processes.

12:41.600 --> 12:49.600
And as you see it's pretty slow because there's no GPU acceleration in this scenario.

12:49.600 --> 12:57.600
So it's barely usable for actual debugging in this case.

12:57.600 --> 13:07.600
But what I can do is I can also run this on my scope system that I'm using here to present.

13:07.600 --> 13:11.600
So let's switch to that.

13:11.600 --> 13:20.600
For this we have a Goal testbed here which we have available in the sculpt images as presets.

13:20.600 --> 13:25.600
I cannot do this right now because my VM would then turn off.

13:25.600 --> 13:33.600
But I have a launcher here so I just launch this testbed.

13:33.600 --> 13:41.600
And then I add the argument sculpts.

13:41.600 --> 13:47.600
What I haven't mentioned here, this tool has bash completion.

13:47.600 --> 13:53.600
So I can actually spear some typing.

13:53.600 --> 13:59.600
Okay, let's switch over and at some point...

13:59.600 --> 14:02.600
I'll show you.

14:02.600 --> 14:13.600
It still needs to sync the files via the HTTP put to the HTTP server that's running in this Goal testbed subsystem.

14:13.600 --> 14:19.600
And now here we have the calculator.

14:19.600 --> 14:26.600
And all the log output I still see on my host computer.

14:26.600 --> 14:34.600
So it's quite useful for development and testing.

14:34.600 --> 14:40.600
Alright, so let's say now we have everything working.

14:40.600 --> 14:42.600
Next step would be to publish it.

14:42.600 --> 14:47.600
So exporting, I'll leave it...

14:47.600 --> 14:51.600
So export just assembles the poor archive.

14:51.600 --> 14:58.600
And publishing then means that we make a signed tar archive out of that.

14:58.600 --> 15:04.600
What we need for that is for each of those runtime scenarios that we have,

15:04.600 --> 15:08.600
or for the runtime scenario that we want to publish, we need to readme.

15:08.600 --> 15:12.600
And we also need to license file and diversion file.

15:12.600 --> 15:17.600
And yeah, that's basically it.

15:17.600 --> 15:20.600
I'll just show you this in the demo.

15:20.600 --> 15:27.600
So let's have a look at my version.

15:27.600 --> 15:31.600
So I want to publish a new version of this.

15:31.600 --> 15:38.600
And what I'm doing is we have a helper command here.

15:38.600 --> 15:46.600
I can just bump the version and see it's updated.

15:46.600 --> 15:51.600
Oh no.

15:51.600 --> 15:54.600
Oh no, it's updated. It's just the same thing.

15:54.600 --> 16:00.600
So it was the third of January and now it's the third of February.

16:00.600 --> 16:03.600
I can actually do this multiple times.

16:03.600 --> 16:10.600
So it just depends on some letter to the end of the version.

16:10.600 --> 16:18.600
Okay, then I go into another folder where I'm managing my index.

16:18.600 --> 16:22.600
And what I want to do is I want to add this into my index.

16:22.600 --> 16:31.600
So the index is just some x and l file here.

16:31.600 --> 16:34.600
So I'm adding this here.

16:34.600 --> 16:39.600
I'll calculate that.

16:39.600 --> 16:47.600
And now I say publish.

16:47.600 --> 16:56.600
And since I already have an index file, I have to specify that I want to overwrite that.

16:56.600 --> 17:02.600
And wait for a moment.

17:02.600 --> 17:08.600
So it says it exported the calculator app with the current version.

17:08.600 --> 17:14.600
And now the index, I need to put in my password.

17:14.600 --> 17:16.600
Alright, that's it.

17:16.600 --> 17:26.600
And now it's published only on, and it's present as an archive on my laptop or NVM.

17:26.600 --> 17:36.600
And I still need to sync this with the web server, which I'm doing right now.

17:36.600 --> 17:45.600
Which can take a bit depending on the network.

17:45.600 --> 17:53.600
Alright, all is done.

17:53.600 --> 18:04.600
And now in my control system, or control UI here, I first need to enable my user depot,

18:04.600 --> 18:07.600
fetching the current index.

18:07.600 --> 18:16.600
And now I'm able to, there it was, there.

18:16.600 --> 18:20.600
I install it.

18:20.600 --> 18:22.600
Okay, downloadable.

18:22.600 --> 18:27.600
Then I have to, when installing the app, I need to root the services.

18:27.600 --> 18:32.600
So it needs a GUI service, which I wrote to the window manager.

18:32.600 --> 18:41.600
Then I need something for the GPU acceleration, another thing for GPU, system clock,

18:41.600 --> 18:50.600
and also something here, and edit.

18:50.600 --> 18:53.600
Alright, there it is.

18:53.600 --> 18:58.600
Okay, we calculate again.

18:58.600 --> 19:05.600
Alright.

19:05.600 --> 19:18.600
So the process of all of this, or the development work, is documented on our community blog,

19:18.600 --> 19:20.600
which is called genodians.

19:20.600 --> 19:29.600
Genodians.org, so there you find user stories about the development and how to use things.

19:29.600 --> 19:35.600
Also, as you see in the screenshot, how to use this GUI testbed, I just showed,

19:35.600 --> 19:39.600
and what was involved in porting the calculator that I just showed.

19:39.600 --> 19:43.600
And yeah, more interesting things.

19:43.600 --> 19:50.600
Also the very bare basic tutorials, which go into more details of using GUI.

19:50.600 --> 19:54.600
And with this, I want to thank you.

19:54.600 --> 19:59.600
And to get started, just clone it and have fun.

19:59.600 --> 20:06.600
Thank you.

20:06.600 --> 20:17.600
We can allow one single question, I think.

20:17.600 --> 20:20.600
So thank you for this token demo.

20:20.600 --> 20:25.600
It reminds me of the BSD port system, of course.

20:25.600 --> 20:27.600
I have a question.

20:27.600 --> 20:31.600
Did you pick the calculator because it doesn't do anything fancy like saving files,

20:31.600 --> 20:40.600
and if it had, what kind of patches do you usually need to sort of a real world application to genode?

20:40.600 --> 20:52.600
The calculator, I used it because there are other simple scenarios with not many additional libraries needed.

20:52.600 --> 20:58.600
And on the other hand, it uses the Ubuntu UI toolkit.

20:58.600 --> 21:04.600
So there's all these cute stuff already in use by that.

21:04.600 --> 21:14.600
But it's mainly used because it's a GUI application and it has a narrow scope in porting efforts.

21:14.600 --> 21:17.600
So I don't have to show too much details.

21:17.600 --> 21:19.600
So that's the reason for that.

21:19.600 --> 21:24.600
Yeah, we have more complex ports, actually.

21:24.600 --> 21:28.600
So we have a LIN phone port quite recently.

21:28.600 --> 21:33.600
So yeah, there are more complex ports already available.

21:33.600 --> 21:37.600
So as you see here, there are also these projects repositories to check out.

21:37.600 --> 21:41.600
It's on the one hand the GUI playground from Norman,

21:41.600 --> 21:46.600
and then from me and a few colleagues, the GUI projects repositories on GitHub,

21:46.600 --> 21:55.600
where you find ports of wirecrack, doom, chocolate doom, and things like that.

21:55.600 --> 21:59.600
So there's a lot of things you can play around with.

21:59.600 --> 22:04.600
Thank you, Johannes, for the talk. One more time.

22:04.600 --> 22:15.600
What I forgot, we also have some takeaways here.

22:15.600 --> 22:22.600
So we have these books, the main genome manual with all the concepts, the genome foundations,

22:22.600 --> 22:27.600
and then a documentation of how to call genome to other platforms,

22:27.600 --> 22:33.600
including peripherals and all the heart and fan system.

22:33.600 --> 22:36.600
Thanks, so don't hesitate to take it.

22:36.600 --> 22:41.600
And I would like to thank everybody, the speakers, the participants, the audience,

22:41.600 --> 22:47.600
for participating in this year's microkernel and component-based West Dev Room.

22:47.600 --> 22:51.600
And hopefully see you next year again. Bye-bye.

