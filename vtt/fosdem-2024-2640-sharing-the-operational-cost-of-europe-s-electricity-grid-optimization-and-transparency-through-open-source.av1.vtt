WEBVTT

00:00.000 --> 00:12.560
Hello everyone, I'm Peter Mitri, I'm a software developer at RTE, the French TSO.

00:12.560 --> 00:17.720
So today I'm going to speak to you about two open source tools to software that help us

00:17.720 --> 00:24.760
optimize and share the operational cost of the European grid.

00:24.760 --> 00:28.320
The first part of the presentation I will focus on optimization.

00:28.320 --> 00:33.640
So I will talk about what we call the regional operational security coordination and remedial

00:33.640 --> 00:35.560
action optimization.

00:35.560 --> 00:39.920
In this part I will introduce the open source software which is called OpenROW.

00:39.920 --> 00:46.080
In the second part I will talk about cost sharing through flow decomposition and in

00:46.080 --> 00:50.560
this part I will talk about the open source software which is called flow decomposition.

00:50.560 --> 00:54.600
I try to keep as much time as possible in the end for questions.

00:54.600 --> 00:59.880
So yeah, I hope you have some questions.

00:59.880 --> 01:01.560
Great.

01:01.560 --> 01:07.000
So let's talk about first of all why we need to optimize the grid.

01:07.000 --> 01:11.200
So I understood that many of you work in the energy sector but some don't.

01:11.200 --> 01:16.960
So we talked a lot about congestion management in the previous presentation.

01:16.960 --> 01:21.640
So here I'm going to try to set the scene and explain what a congestion is.

01:21.640 --> 01:29.840
So as you may know electrical equipments in the grid have physical limits.

01:29.840 --> 01:33.600
Outside of these limits the equipment is not safe to operate.

01:33.600 --> 01:38.760
So for example a power line which transports electricity from point A to point B has a

01:38.760 --> 01:39.880
thermal limit.

01:39.880 --> 01:45.680
If we exceed this limit, if we transport too much power on this line, the line may heat

01:45.680 --> 01:50.580
up, it may deform, it may even catch fire and of course it's pretty dangerous.

01:50.580 --> 01:55.940
So to help set the scene, imagine here that you have a small grid or a small part of the

01:55.940 --> 01:58.980
grid which is represented in three nodes.

01:58.980 --> 02:05.580
So the nodes would be like sites where consumers and producers are connected to the network.

02:05.580 --> 02:11.620
And between these nodes you have power lines which are in black here.

02:11.620 --> 02:15.820
And let's imagine that you have most of power production on the left side and most of power

02:15.820 --> 02:17.980
consumption on the right side.

02:17.980 --> 02:22.980
So most of the power will flow from the left to the right.

02:22.980 --> 02:28.820
Let's say that we have a consumption increase on the node here to the right.

02:28.820 --> 02:34.220
Then of course the flow will increase from the left to the right and depending on the

02:34.220 --> 02:37.420
network's topology it may very well be asymmetrical.

02:37.420 --> 02:42.500
So we may have more increase of the flow on the bottom part here.

02:42.500 --> 02:47.380
And we may find that the flow, the new flow that is on the line here exceeds its limit.

02:47.380 --> 02:51.700
So this is what we call a congestion.

02:51.700 --> 02:56.940
Of course there's not just the question of consumption and production, there is also

02:56.940 --> 03:02.340
some accidents that can happen in the grid and that can lead to congestions.

03:02.340 --> 03:04.380
So here you have an example.

03:04.380 --> 03:09.940
If we lose the line that transports electricity from here to here, then most of the power will

03:09.940 --> 03:17.740
flow through this line and this can lead to congestion on the upper line.

03:17.740 --> 03:26.580
As a TSO, RTE has the responsibility to be robust to all eventual incidents on the network.

03:26.580 --> 03:30.980
So we have to do something about these congestions.

03:30.980 --> 03:32.980
So what can we do?

03:32.980 --> 03:35.980
Fortunately we have what we call remedial actions.

03:35.980 --> 03:40.220
So these are actions on the network that can serve one of two purposes.

03:40.220 --> 03:44.380
The first purpose would be to redirect the flows on the lines.

03:44.380 --> 03:50.460
So for those of you who work in the electricity sector, you may know them as topological actions,

03:50.460 --> 03:53.020
HVDC actions or phase shift transformers.

03:53.020 --> 03:57.660
I'll talk about them in an example in the slide that follows this one.

03:57.660 --> 04:02.140
There's also another type of remedial actions which acts on the injections.

04:02.140 --> 04:05.860
We call that either redispatching or counter trading.

04:05.860 --> 04:11.860
These are actions that will change the power production plan of the producers.

04:11.860 --> 04:18.540
In general, the first part of remedial actions which redirect the flows are called non-costly

04:18.540 --> 04:22.340
because the only cost to operate them is the aging of the equipment.

04:22.340 --> 04:27.580
The TSO has power over these remedial actions.

04:27.580 --> 04:33.020
And the second type of remedial actions is costly because when we ask consumers or producers

04:33.020 --> 04:40.780
to change their injections, we pay them for their service.

04:40.780 --> 04:44.500
So to help set the scene, this is an example of non-costly remedial actions.

04:44.500 --> 04:49.740
So here in the example above, we have the base case where no remedial actions applied.

04:49.740 --> 04:54.940
So let's say that you have a congestion in the line here.

04:54.940 --> 04:58.420
One first type of remedial actions is the topological action.

04:58.420 --> 05:03.100
So let's say that you can split this node here into two nodes.

05:03.100 --> 05:07.980
This will make the power flow equal on both lines, this one and this one.

05:07.980 --> 05:12.180
And then it will relieve this line here and then we would have relieved the overload or

05:12.180 --> 05:14.820
the congestion on the network.

05:14.820 --> 05:17.780
Another type of remedial action is the phase shift transformer.

05:17.780 --> 05:23.980
So let's say that we equip the line here with a phase shift transformer.

05:23.980 --> 05:29.940
This kind of equipment is able to shift the phase of the current on the line and so act

05:29.940 --> 05:44.140
on the active power flow and so it can relieve the congestion on the line.

05:44.140 --> 05:48.620
The second type, in the second family of remedial actions, which are costly remedial actions,

05:48.620 --> 05:51.740
this is maybe actually easier to understand.

05:51.740 --> 05:58.380
What we can easily do is to call a producer which is on this node, a power plant, and ask

05:58.380 --> 06:04.500
them to decrease their production and ask a power plant that is here to increase their

06:04.500 --> 06:05.500
production.

06:05.500 --> 06:10.540
So naturally this makes the power production closer to the consumption site and it reduces

06:10.540 --> 06:16.380
the overall flows on the network and by consequence it relieves the congestion on the line.

06:16.380 --> 06:25.940
The key difference here is that power plants 1 and 2 get paid for their balancing service.

06:25.940 --> 06:33.500
The fact is that Europe's electricity grid is highly matched, interconnected and synchronous.

06:33.500 --> 06:39.300
So for example if you have an incident in France it is instantly measured in Romania.

06:39.300 --> 06:44.180
Thus the security of the network is no longer a national one, it's a European one, it's

06:44.180 --> 06:46.300
a global one.

06:46.300 --> 06:54.340
So TSOs have to conduct coordinated computations to ensure that the European network is secure.

06:54.340 --> 07:01.460
This is why the Acer, the Agency for Cooperation of Energy Regulators, imposes on TSOs to conduct

07:01.460 --> 07:05.380
what we call the regional operational security coordination.

07:05.380 --> 07:11.660
So in this process TSOs must choose the best remedial actions on the European scale to

07:11.660 --> 07:17.460
implement in the network in order to ensure that it is secure.

07:17.460 --> 07:21.460
Of course it's a large escape problem so we can hardly do it by hand.

07:21.460 --> 07:29.940
That's why we need an automatic tool which is called the RAU or the remedial action optimizer.

07:29.940 --> 07:35.420
The RAU will have to choose the most optimal remedial actions in a given perimeter and it

07:35.420 --> 07:44.700
also has to do so by minimizing costs that are imposed by cost remedial actions.

07:44.700 --> 07:48.140
So using an open source RAU has many benefits.

07:48.140 --> 07:53.420
First of all transparency because we are in a European perimeter.

07:53.420 --> 07:57.340
So what better way to be transparent about what the RAU does and which cost remedial

07:57.340 --> 08:01.220
actions it selects than to put its code in open source.

08:01.220 --> 08:03.900
Given of course that it's well documented.

08:03.900 --> 08:09.340
It also serves the purpose of coordination because this way when we put a tool in open

08:09.340 --> 08:14.820
source different TSOs from different countries and different vendors from different countries

08:14.820 --> 08:17.060
can cooperate more easily.

08:17.060 --> 08:23.420
It also serves robustness, interoperability, it also serves reusability and time to market

08:23.420 --> 08:30.220
because when a tool is used in many business contexts it becomes more versatile, it becomes

08:30.220 --> 08:37.140
more robust and it becomes quicker to deploy.

08:37.140 --> 08:43.620
At RTE we have developed an open source remedial action optimizer called the possible open

08:43.620 --> 08:46.060
RAU.

08:46.060 --> 08:50.740
So for those of you who may be know it it was called FARAO in the past.

08:50.740 --> 08:57.700
The journey started in 2019 but two weeks ago we made the move to possible open RAU

08:57.980 --> 09:03.700
and we did this because we wanted to join the Linux Foundation energy adventure because

09:03.700 --> 09:10.700
LFE provides a clear governance for which all contributors accept to abide and it also

09:11.660 --> 09:19.660
provides a clear methodology to work more efficiently and in better intelligence.

09:19.660 --> 09:25.820
Open RAU is actually used internally at RTE but also in many European processes.

09:25.820 --> 09:30.220
So I talked about regional operations security coordination or ROSC.

09:30.220 --> 09:34.900
Open RAU is being implemented for the SWE region here which covers France, Spain and

09:34.900 --> 09:37.100
Portugal.

09:37.100 --> 09:43.060
It is already in operation for another process which is called capacity calculation on the

09:43.060 --> 09:49.620
Italy North region and on the Co region which is actually the largest region in Europe to

09:49.620 --> 09:52.540
conduct the coordinated computations.

09:52.620 --> 09:55.620
It covers around a dozen countries.

09:55.620 --> 10:01.220
A few words about what our RAU can do.

10:01.220 --> 10:05.260
So it's an optimizer so of course it has to have an objective function.

10:05.260 --> 10:12.580
It can either minimize the worst congestion or remove all congestion in the network.

10:12.580 --> 10:16.980
About congestion we can model flow congestion and we can optimize flow congestion.

10:16.980 --> 10:19.940
So this is the example I talked about in the previous slides.

10:19.940 --> 10:25.860
We can also model voltage magnitude constraints and voltage angle constraints but for now

10:25.860 --> 10:27.180
the RAU cannot optimize them.

10:27.180 --> 10:30.940
It can only monitor them.

10:30.940 --> 10:36.780
For immediate actions we can optimize phase shift transformers in a given range.

10:36.780 --> 10:42.580
So the RAU if you give it a range of possible tap positions for the phase shift transformer

10:42.580 --> 10:48.340
it will choose the most optimal one that reduces congestions over the whole network.

10:48.340 --> 10:53.620
You can optimize an HVDC set point so it can change the set point of the HVDC to reduce

10:53.620 --> 10:56.980
constraints.

10:56.980 --> 11:01.900
It can also choose to activate or not activate some topological actions.

11:01.900 --> 11:06.860
For example closing a switch or opening a switch.

11:06.860 --> 11:11.300
It can optimize a subset of redispatching remedial actions so actually a redispatching remedial

11:11.300 --> 11:16.300
actions are pretty complex and actually an open RAU would just have a subset with strong

11:16.300 --> 11:18.660
limitations.

11:18.660 --> 11:25.420
Also it can optimize a subset of shunt compensator actions and it can for now only model counter

11:25.420 --> 11:31.620
trading remedial actions but we do not support optimizing them in the RAU.

11:31.620 --> 11:37.500
So of course like I said open RAU is used in the multiplicity of business context so

11:37.500 --> 11:39.020
it is very versatile.

11:39.020 --> 11:44.740
It has a lot of ways you can use it by changing the input data or by changing its parameters

11:44.740 --> 11:50.260
so if you need more information you can look on our website for all the ways it can be

11:50.260 --> 11:58.460
used.

11:58.460 --> 12:05.380
Under the hood the open RAU software is licensed under Mozilla public license 2.0.

12:05.380 --> 12:12.140
It's hosted on GitHub and the code is written in Java 17 so we use JUnit for unit testing

12:12.140 --> 12:15.300
of course we use Mavin for dependency management.

12:15.300 --> 12:25.060
We monitor the quality of the code on Sonoma cloud and we're pretty happy with our figures.

12:25.060 --> 12:34.420
We publish the code on OSS Sonotype and we rely closely on the possible library to be

12:34.420 --> 12:40.540
able to model the network and to simulate it in particular to use sensitivity computations

12:40.540 --> 12:43.820
and load flow computations.

12:43.820 --> 12:48.020
We also this specificity of the RAU we also use Google OR tools.

12:48.020 --> 12:56.580
I don't know if you know it but it's an open source modelization library for linear problems

12:56.580 --> 13:01.620
developed in open source by Google and through it we can support a multiplicity of linear

13:01.620 --> 13:02.980
solvers.

13:02.980 --> 13:08.820
For now for example we have skip which is an open source solver also CBC but also we

13:08.820 --> 13:14.940
can support express GROB Cplex which are commercial ones.

13:14.940 --> 13:20.940
As a side note we tested that open RAU is compatible with Docker Jenkins Kubernetes and Cucumber

13:20.940 --> 13:25.660
testing.

13:25.660 --> 13:32.660
So in conclusion I'd be more than happy for you to participate in our RAU adventure either

13:32.660 --> 13:38.620
by using it and giving feedback or by contributing to the project.

13:38.620 --> 13:42.860
So the best way to join the adventure would be to join the possible Slack team and then

13:42.860 --> 13:45.580
to join the RAU channel.

13:45.580 --> 13:50.020
And there is also a quick tutorial on Java if you want to play around with the RAU on

13:50.020 --> 13:52.580
our website.

13:52.580 --> 13:58.220
And if you want to know what the future of the RAU looks like the roadmap is updated

13:58.220 --> 14:08.660
once per month and it is discussed during the possible TSC which you are free to join.

14:08.660 --> 14:16.860
I'm moving on to the next subject which is decomposition and cost sharing.

14:16.860 --> 14:20.140
So I'm going to set the scene with a small example here.

14:20.140 --> 14:23.180
Imagine that you have three zones.

14:23.180 --> 14:31.420
Let's say there are three countries A, B and C. Imagine that you have big bow production

14:31.420 --> 14:37.940
in the north of A and big power consumption in the south of A. Then naturally you'd expect

14:37.940 --> 14:44.380
the power to flow from north to south so from producer to consumer but in reality it's not

14:44.380 --> 14:46.500
so simple.

14:46.500 --> 14:51.700
Any part of this commercial exchange, the power that is sold to the consumer, only

14:51.700 --> 14:57.540
part of it will transit through the internal lines of zone A and the other part will go

14:57.540 --> 15:03.740
through zone B then to zone C and then to zone A to the consumer.

15:03.740 --> 15:10.020
So of course the consumer got the power they needed but some of the power went through

15:10.020 --> 15:12.660
zones B and C.

15:12.660 --> 15:15.500
We call these loop flows or polluting flows.

15:15.500 --> 15:23.900
So the commercial exchange is simply the sum of internal flows plus loop flows.

15:23.900 --> 15:29.260
And we say that they are polluting because they transit through zones in which they are

15:29.260 --> 15:31.100
not consumed.

15:31.100 --> 15:38.580
So as you can imagine more loop flows in the polluted zone means more loads on the zone's

15:38.580 --> 15:39.700
internal grid.

15:39.700 --> 15:47.780
It means eventually more remedial actions to implement possibly costly and this leads

15:47.780 --> 15:50.460
to more costs for dispatching and counter trading.

15:50.460 --> 15:56.620
So in the core region alone we have up to 3.7 billion euros per year of dispatching and

15:56.620 --> 16:00.100
counter trading.

16:00.100 --> 16:02.820
And of course loop flows are a reality.

16:02.820 --> 16:05.100
They are a consequence of the topology of the network.

16:05.100 --> 16:06.620
We can do nothing about them.

16:06.620 --> 16:07.940
We cannot eliminate them.

16:07.940 --> 16:13.940
However we can compute them and we can better share costs when we know where they come from.

16:13.940 --> 16:24.380
So the Acer again the European regulator defined a clear methodology of computing loop flows

16:24.380 --> 16:29.420
in the core region and this methodology is followed by a methodology to better share

16:29.420 --> 16:32.980
costs between TSOs.

16:32.980 --> 16:39.380
Of course using an open source tool has all benefits here and most of all transparency

16:39.380 --> 16:46.340
because when you talk about sharing costs we talk about TSOs having to share the bills

16:46.340 --> 16:51.740
and being transparent is very important.

16:51.740 --> 16:56.100
At RT we developed a tool which is called possible flow decomposition.

16:56.100 --> 17:02.460
It follows the Acer methodology so you have the documentation for it here.

17:02.460 --> 17:08.740
And it has both a Java and a Python API.

17:08.740 --> 17:14.140
Under the hood it's almost the same as the row so MPL 2.0.

17:14.140 --> 17:17.300
It's developed in Java.

17:17.300 --> 17:18.300
It uses Mavin.

17:18.300 --> 17:19.380
It's hosted on GitHub.

17:19.380 --> 17:27.380
It uses a lot of computations thanks to possible for load flow computations.

17:27.380 --> 17:36.740
And most importantly it's already supported in our PyPossible API.

17:36.740 --> 17:37.740
That's it from me.

17:37.740 --> 17:50.740
Do you have any questions?

17:50.740 --> 17:53.300
So maybe I wasn't paying enough attention.

17:53.300 --> 17:59.340
Can you, so the purpose of your system is to allow you if something happens like whatever

17:59.340 --> 18:05.260
that thing on the Pyrenees a couple of years ago for the whole system to react appropriately.

18:05.260 --> 18:07.540
But you were showing that you're doing subsets to the computations.

18:07.540 --> 18:09.020
I didn't understand in an emergency.

18:09.020 --> 18:11.540
Presumably everyone needs to do something right at the same time.

18:11.540 --> 18:12.540
The whole network.

18:12.540 --> 18:14.620
However far the effect propagates.

18:14.620 --> 18:15.620
So what was happening there?

18:15.620 --> 18:19.140
What happens in an emergency versus whatever you were showing on the screen with doing

18:19.140 --> 18:25.420
computations of various regions?

18:25.420 --> 18:33.780
This is not really an engine that is supposed to help decision making in real time.

18:33.780 --> 18:37.940
It's supposed to be used as an optimizer for the grid.

18:37.940 --> 18:44.900
For example, in the regional operations security coordination, TSOs have like a photo of the

18:44.900 --> 18:47.300
grid in the day ahead.

18:47.300 --> 18:51.700
So 24 hours before real time.

18:51.700 --> 18:55.700
We merge the whole grid models of different TSOs.

18:55.700 --> 18:59.740
We conduct load flows and then we see if there are any congestions.

18:59.740 --> 19:04.780
If there are any congestions, then we run a remedial action optimization.

19:04.780 --> 19:10.100
The optimizer with us, okay, I found these non-costly remedial actions and these costly

19:10.100 --> 19:13.740
remedial actions that will make the network secure.

19:13.740 --> 19:14.940
24 hours ahead.

19:14.940 --> 19:16.100
24 hours ahead.

19:16.100 --> 19:21.420
24 hours during the day, but it's not supposed to tell the operator which remedial action

19:21.420 --> 19:23.700
to choose.

19:23.700 --> 19:27.820
This is another, this is really apart from balancing.

19:27.820 --> 19:34.460
And if you, if we go back to the example where I showed balancing, something that resembles

19:34.460 --> 19:42.940
balancing, what we should do here is every time we change production somewhere, we have

19:42.940 --> 19:48.420
to, so if we decrease the production here, we have to increase the production here because

19:48.420 --> 19:57.020
the TSOs do, anyway, when we handle congestions, we cannot change the balance of the network.

19:57.020 --> 20:07.020
So the balance between demand and offer is handled in another process.

20:07.020 --> 20:16.540
Hello, I have a question about how much resolution you need to see into each of the grids in

20:16.540 --> 20:17.820
order to actually make some of this.

20:17.820 --> 20:22.340
Could you talk a little bit about the visibility that's required at the TSO level or beneath

20:22.340 --> 20:27.460
it, for example?

20:27.460 --> 20:28.940
Depends on the process.

20:28.940 --> 20:39.620
So in the regional security coordination, we look at high level voltage, so 200 kilovolts

20:39.620 --> 20:41.620
and 400 kilovolts.

20:41.620 --> 20:49.820
And basically all big production hubs are on this voltage level, but this is a really

20:49.820 --> 20:57.940
generic remedial action optimizer, so we can generalize it to whichever resolution we need.

20:57.940 --> 21:12.940
Any other questions?

21:12.940 --> 21:18.700
Is there some ideas to change the software for real-time congestion management, like

21:18.700 --> 21:21.940
for DSOs or for other systems?

21:21.940 --> 21:34.540
Yes, some experimentation is underway for balancing in order to be able to find creative

21:34.540 --> 21:37.540
remedial actions in real-time.

21:37.540 --> 21:54.300
So for now it's not an operation, but it's being experimented.

21:54.300 --> 21:56.780
So my question is about impact.

21:56.780 --> 22:02.020
Have you noticed that over European TSOs are using your software as well?

22:02.020 --> 22:12.700
Is that the goal in the end to share among different TSOs as the Europeans can?

22:12.700 --> 22:17.140
For now we are the only TSO using the RAL internally.

22:17.140 --> 22:27.380
However, here it is Coriso, which is the computation coordinator that is using OpenRAL for these

22:27.380 --> 22:29.220
three regions.

22:29.220 --> 22:36.700
And also the idea of joining the possible project is to be able to develop a Python

22:36.700 --> 22:49.580
API pretty quickly and to be able to have more users in different TSOs.

22:49.580 --> 22:56.420
What kind of algorithm is used in OpenRAL?

22:56.420 --> 22:59.540
We have an optimization algorithm, so a linear optimization algorithm.

22:59.540 --> 23:01.820
I have a few slides in the appendix for this.

23:01.820 --> 23:03.300
We can talk about it later if you want.

23:03.300 --> 23:11.420
But basically it's a search tree in which we optimize the topological actions and inside

23:11.420 --> 23:17.940
after every topological optimization we run a linear program to optimize linear remedial

23:17.940 --> 23:18.940
actions.

23:18.940 --> 23:25.300
These are remedial actions that have a linear effect on flows, for example, PSTs and HVDCs.

23:25.300 --> 23:40.700
How do you test it?

23:40.700 --> 23:53.540
How do you ensure that there isn't a bug that affects all OpenRAL instances running simultaneously?

23:53.540 --> 24:00.820
With this, if it answers your question.

24:00.820 --> 24:05.500
We have a lot of input files and expected output files.

24:05.500 --> 24:12.900
And with this stack, with Docker, Jenkins and Cucumber, Cucumber is a framework for functional

24:12.900 --> 24:13.940
testing.

24:13.940 --> 24:18.580
So you write scenarios in a Gherkin language.

24:18.580 --> 24:22.620
You say, for example, given this input file for the RAL, then I expect that there is no

24:22.620 --> 24:26.620
congestion at the end and that this remedial action is activated.

24:26.620 --> 24:29.060
You write it in a very natural language.

24:29.060 --> 24:33.820
And of course there is code to run these things.

24:33.820 --> 24:41.140
And then we put that in a Docker and in Jenkins and we run this every night upon almost 500

24:41.140 --> 24:42.140
scenarios.

24:42.140 --> 24:48.220
And every night we are sure that our main branch on GitHub is still solid.

