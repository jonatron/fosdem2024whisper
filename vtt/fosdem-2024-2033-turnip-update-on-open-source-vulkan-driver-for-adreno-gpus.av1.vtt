WEBVTT

00:00.000 --> 00:05.000
Hello everyone, thanks for coming here.

00:08.960 --> 00:12.100
I'm Danilo, I've been working on Tornip Driver

00:12.100 --> 00:14.620
for three years in Igelya.

00:15.560 --> 00:18.640
And I want to give a status update,

00:18.640 --> 00:20.720
what we have achieved so far,

00:21.640 --> 00:23.800
and what's coming for us.

00:24.680 --> 00:29.680
Let's start with the new hardware we support.

00:32.360 --> 00:34.560
We now support a lot of hardware.

00:36.120 --> 00:41.120
And recently we started support at 700 series,

00:41.480 --> 00:43.360
Adreno GPUs.

00:43.360 --> 00:48.360
We already merged Adreno 730 and 740,

00:48.840 --> 00:53.560
and the merge request for the most recent,

00:53.560 --> 00:56.920
Adreno GPU 750 is being on review.

00:58.240 --> 01:03.240
There are a lot of changes between Adreno generations

01:04.240 --> 01:07.240
with four mostly performance reasons.

01:07.240 --> 01:09.720
There are registers changed,

01:09.720 --> 01:12.600
and many new performance features out there.

01:15.360 --> 01:20.360
We also currently implemented only direct rendering

01:21.360 --> 01:24.240
and not tile based rendering.

01:24.240 --> 01:26.280
Adreno GPUs are a bit weird

01:26.280 --> 01:28.120
because they support two modes,

01:28.120 --> 01:31.440
tiling and direct rendering,

01:31.440 --> 01:34.920
which is the same that desktop GPUs support.

01:37.680 --> 01:39.760
But tile based rendering is still

01:39.760 --> 01:41.280
working progress for now.

01:42.560 --> 01:46.320
We also support a lot of, almost all,

01:46.320 --> 01:50.040
600 series GPUs, but there are some variants

01:50.040 --> 01:51.880
out there we don't support.

01:53.880 --> 01:58.680
There are five sub generations of 600 series.

01:58.680 --> 01:59.920
We support all of them.

02:01.360 --> 02:06.000
So to add a new one, new variant of the GPU,

02:06.000 --> 02:10.240
we just need to change some registers there.

02:15.320 --> 02:18.580
As for our features and extensions,

02:19.580 --> 02:24.380
we now support Falcon 1.3

02:25.660 --> 02:29.340
and a lot of extensions with it.

02:31.260 --> 02:35.460
Most interesting one for us was dynamic rendering.

02:35.460 --> 02:39.060
It's rather simple for desktop GPUs

02:39.060 --> 02:43.060
because they don't care about render passes boundaries,

02:43.060 --> 02:44.940
mostly don't care about them.

02:44.940 --> 02:49.940
But for tiled rendering for mobile GPUs, it's a big deal.

02:50.540 --> 02:53.340
We have to stitch together the render passes,

02:53.340 --> 02:57.260
sometimes even at the submission time.

02:57.260 --> 03:00.100
It could be really nasty.

03:00.100 --> 03:02.860
Like the code is bodily readable for it.

03:06.060 --> 03:10.340
And we have all extensions implemented for DxVK,

03:10.980 --> 03:15.140
D3D Proton and for Zinc supported.

03:15.140 --> 03:16.500
So it's great.

03:21.420 --> 03:25.540
While we do not claim Falcon 1.3 conformance,

03:25.540 --> 03:27.700
we do regularly test

03:29.540 --> 03:30.380
Vulkan CTS.

03:32.260 --> 03:36.700
We test a lot of game traces, we test games,

03:37.700 --> 03:41.220
but with games it feels like a vacuum all game right now

03:41.220 --> 03:46.220
because there are not a lot of real users out there.

03:46.500 --> 03:50.060
And we don't have a proper CI with game traces,

03:50.060 --> 03:51.340
like Radvid does.

03:55.540 --> 03:59.420
Another big changes we've done are in pipelines.

04:00.420 --> 04:05.420
Our GPU has some unique way of dealing with pipelines

04:07.180 --> 04:12.180
and with all the new pipeline related extensions,

04:12.180 --> 04:16.900
we have to rewrite them every time in some way.

04:16.900 --> 04:21.900
But thanks to Conor, Conorabot, our pipelines are healthy.

04:22.900 --> 04:27.900
We've done a lot of IRC optimizations,

04:28.580 --> 04:30.780
which is our backend compiler.

04:31.780 --> 04:35.580
They add up a lot with time passing.

04:36.860 --> 04:40.700
And we've done a lot of work in debug tooling

04:41.700 --> 04:46.700
because we have to reverse engineer GPU.

04:47.700 --> 04:52.700
We deal a lot of with unknown registers, unknown instructions,

04:57.740 --> 05:00.980
so we have to be able to quickly understand

05:00.980 --> 05:03.100
what's going on right there.

05:03.100 --> 05:07.700
So I want to spend some time on these debug tools

05:07.700 --> 05:09.180
we've implemented so far.

05:10.580 --> 05:15.580
I gave a more in-depth talk last XDC.

05:15.580 --> 05:18.060
You could find it at this link.

05:20.740 --> 05:24.260
So what's our debug tool?

05:24.260 --> 05:29.260
We have GPU breadcrumbs like in Google flight,

05:30.340 --> 05:33.340
graphics flight recorder.

05:33.340 --> 05:36.780
We have ability to reply common streams.

05:36.780 --> 05:41.780
We have ability to edit common streams.

05:41.980 --> 05:44.700
We can print for GPU memory.

05:44.700 --> 05:48.980
We could print from shader assembly in these common streams.

05:48.980 --> 05:52.700
And we could debug register reading

05:52.700 --> 05:54.980
of undefined state from registers.

05:56.980 --> 05:59.700
I'll describe each of these feature

05:59.700 --> 06:01.380
a bit more in the following slides.

06:05.620 --> 06:09.580
Why we even need our own GPU breadcrumbs?

06:09.580 --> 06:14.140
There is already a solution for this at Vulkan API level.

06:14.140 --> 06:18.460
It called graphics flight recorder from Google.

06:19.820 --> 06:23.260
It already could tell you where Hank occurs

06:23.260 --> 06:26.300
at which command, but there are two issues with that.

06:27.300 --> 06:31.220
It's two cores because for example,

06:31.220 --> 06:36.220
the start of the render pass could translate into like 10s

06:36.220 --> 06:39.820
or 20 bleeds at the worst case

06:39.820 --> 06:41.780
and each of them may hang.

06:41.780 --> 06:46.780
So API level tooling could be like not great at this.

06:51.020 --> 06:55.260
And what's really prompted me to create

06:57.660 --> 07:01.260
the breadcrumbs to implement breadcrumbs in our driver

07:01.260 --> 07:04.180
is debugging of unrecoverable hanks.

07:04.180 --> 07:07.860
When your computer or board just completely hangs,

07:07.860 --> 07:09.900
you cannot do anything, writes to disk

07:09.900 --> 07:12.140
doesn't come through.

07:14.140 --> 07:17.740
Like graphics flight recorder doesn't work with it.

07:17.740 --> 07:22.740
And to make it work, you need some new Vulkan extension

07:22.740 --> 07:23.580
and so on.

07:23.580 --> 07:28.140
It was much easier to deal with in the driver itself

07:28.140 --> 07:31.860
by doing all the things synchronously.

07:33.540 --> 07:36.020
And it worked rather great.

07:37.020 --> 07:41.340
But this tool is currently is not used too much

07:41.340 --> 07:45.340
due to the tooling I will talk about now.

07:48.620 --> 07:53.620
Okay, let's say you cannot even reproduce the bugs.

07:54.620 --> 07:58.580
Some bugs are random hanks occurring

07:58.580 --> 08:01.700
in different parts of the game and so on.

08:01.700 --> 08:04.780
So the easy way to reproduce them

08:04.780 --> 08:08.700
is just to record all comments submitted to the GPU

08:08.700 --> 08:10.340
and then replace them back.

08:11.220 --> 08:14.820
I mean, for most hanks and issues works great

08:14.820 --> 08:17.820
for reproducing them.

08:17.820 --> 08:21.420
There are a few caveats like it's necessary

08:21.420 --> 08:24.140
to record all buffer objects submitted

08:24.140 --> 08:28.060
and there could be a lot for some triple A game.

08:29.420 --> 08:33.900
So it works mostly for one frame or two frames.

08:34.980 --> 08:38.780
And not all issues are reproducible this way.

08:38.780 --> 08:42.260
There are some that are too finicky for this.

08:43.740 --> 08:47.260
But most of them are reproducible, so it's good enough.

08:49.580 --> 08:54.580
But it's not enough to just be able to replay the trace

08:55.060 --> 08:58.860
and see a hank in the mask.

09:00.420 --> 09:03.620
You have to have a way to narrow it down.

09:04.580 --> 09:08.020
So what we implemented is a simple way

09:08.020 --> 09:10.020
to edit the common stream.

09:10.020 --> 09:14.860
So we could decompile some submit to the GPU

09:14.860 --> 09:17.980
into very trivial packets.

09:17.980 --> 09:22.980
Like there are packet names only in comments right there

09:26.500 --> 09:27.620
besides some of them.

09:28.620 --> 09:33.620
It's really easy to do for probably any GPU

09:34.020 --> 09:39.020
and even in this form, it's very powerful

09:39.180 --> 09:41.740
because you could bisect the trace

09:41.740 --> 09:44.740
and find the exact comment which hanks

09:44.740 --> 09:49.740
even if you have like the comment.

09:52.500 --> 09:55.540
Even if it's impossible to determine from any other way

09:56.540 --> 09:58.940
how to deal with it.

10:00.100 --> 10:03.420
So you could edit some part of the packet

10:03.420 --> 10:06.500
and see if it helps.

10:06.500 --> 10:11.020
If it solves the hank, you could like deal with it

10:11.020 --> 10:12.700
as with ordinary code.

10:17.700 --> 10:20.340
What if the issue is inside the shader itself?

10:21.660 --> 10:24.720
We already could compile the shaders from assembly.

10:25.900 --> 10:28.860
So with this replay tool, we could add ability

10:28.860 --> 10:32.460
to just print some registers from the shader.

10:32.460 --> 10:36.140
And the most trivial print is good enough.

10:36.140 --> 10:41.140
So our print takes temporary registers for address

10:42.700 --> 10:47.700
and so on and registers to print.

10:49.380 --> 10:51.460
And print them.

10:51.460 --> 10:53.700
Like it increments global counter

10:53.700 --> 10:56.020
and tries to global storage and replay tool

10:56.020 --> 10:59.320
just reads from it and prints the registers.

10:59.320 --> 11:03.060
It's trivial and it was incredibly useful

11:03.060 --> 11:05.020
in reverse engineering and hardware.

11:05.980 --> 11:08.540
You get the trace from proprietary driver,

11:08.540 --> 11:13.620
you decompile it, you edit the shader to print something

11:13.620 --> 11:16.380
and you see the values and what's going on.

11:16.380 --> 11:18.120
It's incredibly useful.

11:18.520 --> 11:23.520
And the last tool in our tooling is the way to debug

11:28.120 --> 11:31.360
undefined registers, stale registers.

11:33.280 --> 11:37.040
A lot of issues are due to reading of

11:38.600 --> 11:40.520
like run value from the registers.

11:40.520 --> 11:42.360
Some state is not immediate.

11:43.680 --> 11:47.800
Even games have issues of not emitting some state

11:47.800 --> 11:48.640
and so on.

11:50.520 --> 11:52.520
A simple solution, at least for us,

11:52.520 --> 11:55.240
it was writing

11:57.960 --> 12:02.520
run values to all the registers

12:03.760 --> 12:06.100
and seeing what's breaks.

12:07.700 --> 12:09.240
And it mostly works.

12:09.240 --> 12:12.760
It's not that trivial because there are at least registers

12:12.760 --> 12:15.400
which are written at the start of command buffers

12:15.400 --> 12:17.080
and never touched again.

12:17.080 --> 12:20.480
And there are registers written in each,

12:22.080 --> 12:26.200
like in the render pass, like registers set

12:26.200 --> 12:27.760
that are set by pipelines.

12:29.360 --> 12:32.980
So we divided the registers into two categories.

12:32.980 --> 12:37.360
The ones that are set at the start of command buffer

12:37.360 --> 12:42.360
and the ones that should be stomped before each bleed

12:42.860 --> 12:46.320
and render pass.

12:47.960 --> 12:52.720
Again, there are some other caveats

12:52.720 --> 12:57.480
but it helped us quite a lot in debugging various issues

12:57.480 --> 12:59.680
when we implement new features.

12:59.680 --> 13:02.960
Let's forget about some weird registers.

13:03.960 --> 13:04.960
Okay.

13:09.840 --> 13:13.360
What are the real users of our driver at the moment?

13:13.360 --> 13:14.760
Like where you could see it.

13:17.480 --> 13:20.520
At the moment they are emulators on Android.

13:21.600 --> 13:22.440
Why?

13:22.440 --> 13:26.600
Because proprietary drivers are terrible on Android.

13:26.600 --> 13:31.320
Not due to their code but due to update policy

13:31.360 --> 13:32.900
of proprietary drivers there.

13:32.900 --> 13:36.600
They are not updated at all.

13:36.600 --> 13:41.480
So users are stuck with their terrible,

13:41.480 --> 13:44.240
many years outdated drivers.

13:46.600 --> 13:50.360
And with many issues, these drivers have many issues.

13:50.360 --> 13:53.600
They don't have necessary extensions.

13:53.600 --> 13:55.660
Like it's bad, it's really bad.

13:56.660 --> 14:01.660
And emulators need new features.

14:02.260 --> 14:04.820
They need for drivers to work.

14:04.820 --> 14:06.520
They push drivers to the limit.

14:09.540 --> 14:13.900
So if, so they, like for example,

14:13.900 --> 14:18.900
you now is able to load our driver, Chornip,

14:20.100 --> 14:22.420
and use it instead of proprietary driver.

14:22.420 --> 14:25.300
And it works rather well for them.

14:25.300 --> 14:28.900
And I remember some other emulators

14:28.900 --> 14:32.660
use the same technique to deal with issues

14:32.660 --> 14:33.980
in proprietary driver.

14:36.380 --> 14:38.180
Let's see an example.

14:39.460 --> 14:43.300
Here is some Zelda game running on Android

14:43.300 --> 14:46.980
on Adreno 650 with our driver.

14:50.180 --> 14:52.340
It's running rather great,

14:52.340 --> 14:57.340
even if it's a previous generation of Adreno.

14:57.340 --> 15:02.340
Like FPS is nice, runs correctly, it's great.

15:05.460 --> 15:10.460
So proprietary driver is a bit weird to say the least.

15:11.740 --> 15:15.960
Like maybe it works with the most recent one

15:15.960 --> 15:17.060
but it's hard to tell.

15:17.060 --> 15:18.540
Drivers are not updated.

15:18.540 --> 15:21.700
It's hard for users to update them and so on.

15:21.700 --> 15:23.260
So there are lots of issues

15:23.260 --> 15:26.780
and probably they don't test with these games.

15:29.100 --> 15:31.420
Okay, fair enough.

15:31.420 --> 15:34.040
We also don't really test these games.

15:35.300 --> 15:39.900
But the developers of at least Yuzu

15:39.900 --> 15:44.460
are willing to implement some debug tooling

15:44.460 --> 15:47.220
like recording the games, the game traces

15:47.220 --> 15:50.060
for us to easy to debug them.

15:50.060 --> 15:54.100
Because it's not that easy to launch a game

15:54.100 --> 15:58.380
without having the switch itself.

15:58.380 --> 15:59.460
Like it's not legal.

16:03.980 --> 16:06.620
Okay, earlier I said that Tornip implements

16:06.620 --> 16:11.620
all the features for DXVK and VKD3D Proton.

16:13.540 --> 16:15.500
So can we run desktop games?

16:15.500 --> 16:17.700
Yes, we can run desktop games.

16:17.700 --> 16:22.700
Here you see laptop X, X13S running cyberpunk.

16:28.060 --> 16:32.380
It runs via a lot of layers.

16:32.380 --> 16:37.380
Like you need FAC simulator to translate X64 assembly

16:38.980 --> 16:41.900
into IRM 64 assembly.

16:41.900 --> 16:46.020
You need Vine for Windows compatibility.

16:46.020 --> 16:49.340
You need VKD3D Proton and so on.

16:49.340 --> 16:50.720
There are lots of layers.

16:52.060 --> 16:56.380
So we mostly test game traces, not games themselves.

16:56.380 --> 16:59.740
We test games, but mostly traces

16:59.740 --> 17:01.960
because they are easier to deal with.

17:03.060 --> 17:05.660
But we will test games more soon.

17:13.060 --> 17:14.780
So what is the future for us?

17:16.540 --> 17:21.460
We need to support tile based rendering on 700 series

17:21.460 --> 17:25.700
because it would maybe not give a lot of performance boost

17:25.700 --> 17:30.700
for desktop games, but it would lower power consumption

17:32.900 --> 17:36.000
and help probably on Android for the games.

17:37.620 --> 17:40.180
Mark Collins, my teammate is working on it.

17:42.020 --> 17:45.540
And I hope we will see it merged soon.

17:45.540 --> 17:46.900
It would be great.

17:46.900 --> 17:49.340
And then we need to squeeze even more performance.

17:49.340 --> 17:51.340
There are lots of performance features

17:51.340 --> 17:52.820
we need to implement there.

17:54.700 --> 17:59.700
So even if we will not come to proprietary driver performance,

18:00.940 --> 18:04.220
we expect to be somewhere near it.

18:04.220 --> 18:05.540
At least we hope for this.

18:06.440 --> 18:07.280
I hope.

18:08.580 --> 18:10.220
And in the distant future,

18:11.140 --> 18:13.900
we want to implement ray tracing

18:13.940 --> 18:17.980
because at least like,

18:17.980 --> 18:22.340
740 should be able to support Rayquery.

18:23.260 --> 18:28.260
And 750 probably could support ray tracing pipelines.

18:31.860 --> 18:35.140
I hope we implement this someday.

18:35.140 --> 18:39.020
And maybe we would be able to implement my shaders.

18:39.020 --> 18:40.020
That would be cool.

18:44.900 --> 18:48.980
Okay, another exciting development, not from us.

18:48.980 --> 18:51.340
It's not a Galeas project,

18:51.340 --> 18:54.400
but an easy way to run desktop games on Android.

18:56.220 --> 19:00.300
There is a work in progress project called Kasha.

19:00.300 --> 19:05.300
It's worked upon by one of my teammates, again, Mark Collins

19:09.120 --> 19:11.280
and some other people out there.

19:12.280 --> 19:15.360
It's an amalgamation of Vine,

19:15.360 --> 19:20.040
DXVK, VKD3D and FaxCore on Android.

19:21.920 --> 19:25.960
And I hope Jornip would have a first party support there.

19:25.960 --> 19:28.780
So it would be all bundled together

19:28.780 --> 19:30.480
and work together as one.

19:33.120 --> 19:37.440
Or you may say that people already

19:37.440 --> 19:39.600
are running desktop games on Android.

19:39.600 --> 19:43.840
Like here you see some person running Assassin's Creed

19:43.840 --> 19:45.320
on their device.

19:45.320 --> 19:46.880
Like it runs.

19:48.360 --> 19:49.760
Yes, that's true.

19:49.760 --> 19:51.720
There is project.

19:51.720 --> 19:54.940
There are several projects probably for this.

19:56.440 --> 19:58.880
It is done with Thermux.

19:58.880 --> 20:03.880
It's, I mean, I'm not sure exactly what it is.

20:06.440 --> 20:08.840
But it's even more unholy amalgamation

20:08.840 --> 20:10.520
of projects.

20:11.520 --> 20:13.960
It runs, it's really cool.

20:13.960 --> 20:16.480
But there are some performance issues,

20:16.480 --> 20:21.040
some issues with how all these moving scenes are

20:24.320 --> 20:25.760
are stuck together.

20:25.760 --> 20:30.360
But like people running games, desktop games on Android,

20:30.360 --> 20:31.480
that's super cool.

20:34.280 --> 20:37.120
Okay, that's all from me.

20:38.120 --> 20:42.560
For today, so you have some questions, suggestions.

20:46.440 --> 20:47.760
So you said you...

20:47.760 --> 20:50.200
Mike, Mike, no, okay.

20:51.320 --> 20:54.120
So you said you could use this on Android

20:54.120 --> 20:56.960
to replace the proprietary devices.

20:56.960 --> 20:58.440
Yes, you could use...

20:58.440 --> 21:00.320
So does that, okay,

21:00.320 --> 21:03.600
does it meet the root device or custom kernel?

21:04.600 --> 21:05.720
There are two cases.

21:05.800 --> 21:07.960
If you want to replace

21:09.960 --> 21:13.160
proprietary driver for the whole system,

21:13.160 --> 21:14.440
you need the root.

21:14.440 --> 21:16.920
You cannot change system libraries without root.

21:18.240 --> 21:22.040
But if you want to use a tournip for emulator,

21:23.840 --> 21:26.040
if emulator supports this,

21:26.040 --> 21:31.040
it could just load the shared library, packaged for it.

21:31.960 --> 21:35.520
So, and Google Play allows emulators

21:35.520 --> 21:38.200
to use custom drivers, they asked for it.

21:38.200 --> 21:41.760
And Google Play allowed it for this case.

21:44.320 --> 21:49.080
And the loaded driver talks to the proprietary kernel driver.

21:49.080 --> 21:52.160
Yeah, there is proprietary kernel driver, KGSL,

21:52.160 --> 21:53.720
it's a downstream driver.

21:53.720 --> 21:58.720
So we have backends for several kernel interfaces.

21:59.720 --> 22:00.840
That's right.

22:04.600 --> 22:05.760
Anyone else then?

22:11.920 --> 22:15.680
Sorry, will you recall the one with the upstream

22:15.680 --> 22:17.640
for doing all the kernel?

22:19.440 --> 22:21.040
Could you repeat the question, sorry?

22:21.040 --> 22:24.360
How would your implementation interact

22:24.360 --> 22:28.360
with the upstream kernel driver for the seven access?

22:29.720 --> 22:32.400
Do you go as fast as you can?

22:32.400 --> 22:37.400
We develop a Mesa for 700 series on MSM, on upstream.

22:41.320 --> 22:43.240
Not exactly on upstream MSM,

22:43.240 --> 22:46.480
because we have some custom changes to make it work.

22:46.480 --> 22:51.480
Not all of them are upstreamed, at least for 750 GPU.

22:51.760 --> 22:56.760
But it will be all upstream, we need it upstreamed.

22:57.600 --> 22:58.440
It would be there.

22:59.720 --> 23:02.800
But the kernel is not done by us,

23:02.800 --> 23:04.760
so we don't have much control.

23:05.960 --> 23:07.480
It's other people working on it.

23:13.200 --> 23:14.920
Okay, I guess that's all.

23:14.920 --> 23:15.760
Thank you.

23:15.760 --> 23:16.600
Thank you.

23:16.600 --> 23:17.440
Thank you.

23:17.440 --> 23:18.280
Thank you.

23:18.280 --> 23:19.120
Thank you.

23:19.120 --> 23:19.960
Thank you.

23:19.960 --> 23:20.800
Thank you.

