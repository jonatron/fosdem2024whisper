WEBVTT

00:00.000 --> 00:20.000
All right, everyone. Welcome to the next session. Just the usual housekeeping. If you're leaving a little bit early, these chairs are fairly long, so don't do exactly that.

00:21.000 --> 00:30.000
There's going to be some good sessions here, and we'll have some time for questions at the end. So let's get started.

00:30.000 --> 00:40.000
Right. Thank you. Hi, everyone. I'm super excited to be here with you today to talk about FlatCut, to talk about releasing Linux based OS.

00:40.000 --> 00:49.000
And I hope you will learn new things. I hope you discover things. And yeah, if you have any questions, I'll be around for the rest of the day.

00:49.000 --> 00:54.000
And I'll be available at the end of this presentation to answer your questions.

00:55.000 --> 01:05.000
Before going further, I will quickly introduce myself. So my name is Mathieu. I work as a software engineer inside Microsoft.

01:05.000 --> 01:13.000
I'm mainly involved and principally involved in the FlatCut development and every features regarding FlatCut.

01:13.000 --> 01:21.000
So for example, I'm involved in the cluster API fields. I'm involved in testing the operating system, building the operating system.

01:21.000 --> 01:32.000
And what's matter today is releasing the operating system. If you are here at this talk, I assume it's because you have maybe some knowledge about FlatCut.

01:32.000 --> 01:38.000
You're already a user of FlatCut. You just want to discover and you're curious about this operating system.

01:38.000 --> 01:48.000
So let's have a quick look of what is FlatCut. So FlatCut is a Linux based operating system. It's designed to run containers.

01:48.000 --> 01:53.000
So you only have the bare minimum in your operating system to run containers.

01:53.000 --> 02:03.000
The goal is to have the less package you ship in the operating system, the less surface attack you have on your operating system.

02:03.000 --> 02:14.000
So that's the point of having this. This operating system benefits from automatic updates, which means once you've deployed your instance of FlatCut,

02:14.000 --> 02:21.000
it will get automatic updates from the release server and each release is done every two weeks approximately.

02:21.000 --> 02:25.000
So you can be sure to have a new version of FlatCut every two weeks.

02:25.000 --> 02:34.000
And finally, this system is immutable, which means SlashUSR is in read-only mode. You can't write anything in SlashUSR.

02:34.000 --> 02:41.000
You can't install any package. There is no package manager. There is no APT or whatever.

02:41.000 --> 02:47.000
So that's a few difference from a day-to-day operating system.

02:47.000 --> 02:50.000
FlatCut is already designed to run containers and nothing more.

02:51.000 --> 02:58.000
So the question is, well, just to show you inside the box, so I tried to write something on SlashUSR.

02:58.000 --> 03:01.000
It doesn't work because it's read-only. That's normal, even in pseudo.

03:01.000 --> 03:08.000
And try to use the package manager, the command.phone for each one of them, because that's the goal.

03:08.000 --> 03:13.000
The idea is that you have to trust the maintainers and what they ship inside the US.

03:13.000 --> 03:20.000
And if you need something more, you can ask yourself or you can ask to the maintainers or the communities,

03:20.000 --> 03:23.000
or you can try to find a way to install these packages.

03:25.000 --> 03:30.000
How do we maintain the system? Because you can't update yourself the package.

03:30.000 --> 03:35.000
You can't install any package, so you have to trust the maintainers and the community.

03:35.000 --> 03:42.000
So on GitHub, so this is the QR code on the GitHub repository, which leads to this list of packages.

03:42.000 --> 03:50.000
Basically, we are security-driven, which means each time there is a new CVE, a new issue with one of the packages shipped by FlatCut,

03:50.000 --> 03:55.000
we track it into this repository and we update the package.

03:55.000 --> 04:02.000
So for example, last week we've got the RunC and Docker CVE that has been made public last week.

04:02.000 --> 04:09.000
So it's already tracked, and when we will release the next FlatCut, so I hope this week,

04:09.000 --> 04:12.000
you should get this update closed.

04:12.000 --> 04:19.000
So the packages are updated by the security-driven base and also by a community-driven base,

04:19.000 --> 04:25.000
which means if one of you wants to add a new package to FlatCut, you can just open an issue.

04:25.000 --> 04:28.000
Hey, I'd like to have this package or this package into FlatCut.

04:28.000 --> 04:35.000
Is that possible? And if it's relevant for the community, if people are okay to have this new package into FlatCut,

04:35.000 --> 04:41.000
there is some chance that this package is being included in the next FlatCut release.

04:41.000 --> 04:49.000
Most of the time we try to challenge people to say, can you use Docker Image instead of using this package,

04:49.000 --> 04:56.000
or can you use just the binary that you will download from the boot of the instance to get your software.

04:56.000 --> 05:03.000
So we try to challenge always in the same goal is to have the less package into the operating system,

05:03.000 --> 05:09.000
because the less package you have, the less vulnerabilities you have in your operating system.

05:09.000 --> 05:16.000
If you want to know what's going on in the next FlatCut release, you can join the Office Hours,

05:16.000 --> 05:24.000
so this is done publicly every month. The next one is on February, and during the Office Hours,

05:24.000 --> 05:30.000
we just check the FlatCut release boards and we check which new package will be included in the next release,

05:30.000 --> 05:39.000
so you can give your opinion, you can give your input of which package should be prioritized or not for the next release.

05:39.000 --> 05:46.000
That's always a great time to discuss between the maintainers and the community about the content of the next release.

05:46.000 --> 05:51.000
So that's the release board that's available and public on GitHub.

05:51.000 --> 06:00.000
And of course we ship new packages and package updates, but also the bug fixes and new changes and new features into the operating system.

06:00.000 --> 06:08.000
Now we are ready to release, but before releasing, I would like to demystify a bit the FlatCut release number,

06:08.000 --> 06:14.000
because this is something we've seen quite some time that people are getting confused with the FlatCut version number.

06:14.000 --> 06:22.000
So this is a FlatCut version number, and the idea is like Semver versioning, but not really.

06:22.000 --> 06:28.000
For example, the first digit, the 3760, it's the days since the first CoreOS release,

06:28.000 --> 06:39.000
because FlatCut is a friendly fork of CoreOS initially, so 3,000 days, it's almost 10 years, so it was 10 years since the last release.

06:39.000 --> 06:47.000
Then the second digit is the promotion level, so are we talking about alpha release, beta release, table release or LTS?

06:47.000 --> 06:52.000
And finally we have the patch or the maintenance level, which is the last digit.

06:52.000 --> 06:58.000
So if you have a zero, it means it's a new major release because there is no patch yet done for this release number.

06:58.000 --> 07:04.000
So based on this, we can play a small game and try to identify which is who is who.

07:04.000 --> 07:14.000
So for example, the first 37602.0 is a new major stable, because you have the zero at the end, which means it's a major release.

07:14.000 --> 07:23.000
We have the two, which means stable, and we have the first digit that is just showed how many days since the first CoreOS release.

07:23.000 --> 07:33.000
But based on this, who is able to find what is the third, so 3,850.0.0.0, what is it?

07:33.000 --> 07:35.000
Is it an alpha release?

07:35.000 --> 07:36.000
Yeah.

07:36.000 --> 07:38.000
Is it a patch release?

07:38.000 --> 07:39.000
No.

07:39.000 --> 07:41.000
No, so it's a new major alpha.

07:41.000 --> 07:48.000
And the last one, so with all the freeze, 3,0,3,3.3.18, what does it mean?

07:48.000 --> 07:51.000
LTS.

07:51.000 --> 07:53.000
LTS, yeah.

07:53.000 --> 07:57.000
And it's really old LTS because there is a bunch of patch releases.

07:57.000 --> 08:01.000
So patch releases means basically kernel updates.

08:01.000 --> 08:12.000
Each time there is a kernel update for the LTS, for example, we just update the kernel, the CA certifications, and critical security issues like OpenSSL, but that's it.

08:12.000 --> 08:20.000
But yeah, for the LTS, most of the time it's just kernel patch release, so that's why you have a big number for the LTS.

08:20.000 --> 08:23.000
So I mentioned alpha, beta, stable.

08:23.000 --> 08:27.000
How does it look like across the time?

08:27.000 --> 08:33.000
So we have a new major that is done every two weeks.

08:33.000 --> 08:38.000
Then from time to time, we decide to promote that alpha to a beta.

08:38.000 --> 08:42.000
So that's why we have one that happens to this example.

08:42.000 --> 08:48.000
And then after a few times, this beta version becomes a stable one.

08:48.000 --> 08:53.000
And eventually it will become an LTS one.

08:53.000 --> 09:04.000
So that's quite interesting because you, as a user, if you run stable flat-card release, it means it has already been in beta a few months before landing into stable.

09:04.000 --> 09:15.000
So that's why also we encourage people to run beta nodes into their workloads, like so they can identify if there are any issues with their workload before it gets into stable.

09:16.000 --> 09:19.000
Yeah, so that's the release cycle.

09:19.000 --> 09:23.000
Now, what's the release process and how does it work?

09:23.000 --> 09:26.000
So most of the time it's done in four days.

09:26.000 --> 09:31.000
We never release on a Friday because it's a well-known rule that we don't want to break at flat-card neither.

09:31.000 --> 09:38.000
But basically on Monday, we start to build the new flat-card releases.

09:38.000 --> 09:44.000
So we kick off the builds for the new alpha, new beta, new stable, and normally the new LTS.

09:44.000 --> 09:46.000
So this is done on Monday.

09:46.000 --> 09:50.000
And on Tuesday, we check the status of the builds.

09:50.000 --> 09:52.000
Is the CI OK?

09:52.000 --> 09:56.000
Is the image been successfully?

09:56.000 --> 10:00.000
So yeah, we have a checklist of things to see and to check.

10:00.000 --> 10:06.000
And we start drafting and preparing the release nodes because that's quite important when you have a new release.

10:06.000 --> 10:13.000
It's to communicate to people that there is something new and that would be interesting to know what's inside this new release.

10:13.000 --> 10:18.000
So yeah, on Tuesday, we start drafting the release node and Wednesday, we have the go-no-go meeting.

10:18.000 --> 10:28.000
So this is a meeting done publicly on Matrix Channel where we discuss about should we actually go forward with the release.

10:28.000 --> 10:32.000
Are we in a good shape of a release and can we move forward?

10:32.000 --> 10:34.000
So this is the go-no-go meeting.

10:34.000 --> 10:38.000
So basically, we just check is everything green in the CI.

10:38.000 --> 10:44.000
Are the release nodes correctly prepared and everything is good on the CI?

10:44.000 --> 10:48.000
And yeah, we decide to go or not to go with the release.

10:48.000 --> 10:55.000
Then we have the actual release, which means we are going to take the new images to publish them on the release servers of flat-card

10:55.000 --> 11:01.000
and to generate the new payload because as I said, flat-card is going to get automatic updates.

11:01.000 --> 11:07.000
So we need to generate the payloads to get them downloaded by the current running instance.

11:07.000 --> 11:09.000
And then we have the announcement.

11:09.000 --> 11:13.000
As I said, it's important to communicate to people that there is a new flat-card release.

11:13.000 --> 11:21.000
And on Thursday, we have the marketplace release because flat-card is supported on multiple vendors.

11:21.000 --> 11:24.000
So we have the AWS, GCP, Azure.

11:24.000 --> 11:28.000
So we want to publish flat-card images on this marketplace.

11:28.000 --> 11:42.000
If we check the release process for Monday, so one of the flat-card engineers will start the build and he will publish the links.

11:42.000 --> 11:47.000
Then on Tuesday, we start to preparing the release nodes.

11:47.000 --> 11:51.000
So this is, for example, for the last table and there is some nodes.

11:51.000 --> 11:55.000
For example, there is Flakitest with Calico C&I on Digital Ocean.

11:55.000 --> 12:00.000
So we try to identify is it our fault because of the test framework?

12:00.000 --> 12:03.000
Is it something really critical?

12:03.000 --> 12:11.000
So sometimes we have to stop the release because we have an issue with the new kernel that has been identified with the test framework.

12:11.000 --> 12:16.000
So this is the kind of nodes we can take during the release process.

12:16.000 --> 12:20.000
And after that, we have the Go No Go meeting.

12:20.000 --> 12:30.000
As I said, it's done on metrics and everyone, contributors and maintainers are invited to say Go or No Go for the release.

12:30.000 --> 12:36.000
So it's a ping into all channels across all numbers.

12:36.000 --> 12:45.000
And yeah, so people can give feedback on the release status and we decide to move forward with the release.

12:46.000 --> 12:49.000
And when it's done, we actually have the release.

12:49.000 --> 12:56.000
It's available. It's on the public website and we communicate on Slack, on metrics, on Mastodon.

12:56.000 --> 13:04.000
But there is a new release available and please update and give feedback on the release.

13:04.000 --> 13:06.000
And finally, we have the Marketplace update.

13:06.000 --> 13:11.000
So this is an example with AWS update on the Marketplace.

13:11.000 --> 13:18.000
So what's interesting with this process is that the community is involved at each point and always.

13:18.000 --> 13:22.000
So nothing is done in secret or whatever.

13:22.000 --> 13:28.000
Every time you can give your input, every time you can see what's the status of the release,

13:28.000 --> 13:34.000
are we close to have the release to be done or are we far to have the release to be done?

13:34.000 --> 13:42.000
So for example, the checklist of all the best items are on public GitHub issues.

13:42.000 --> 13:46.000
So you can easily see where are we during the release process.

13:46.000 --> 13:50.000
The release notes are drafted on a HackMD document.

13:50.000 --> 13:56.000
So you can browse the release notes and start to write and send some comments on it.

13:56.000 --> 13:59.000
And the public discussion are always on metrics.

13:59.000 --> 14:02.000
So regarding flat-car release process, it's always on metrics,

14:02.000 --> 14:07.000
but also for the public discussion of flat-car development.

14:07.000 --> 14:11.000
So every decision regarding flat-car is done publicly on metrics.

14:11.000 --> 14:14.000
So there is no, as I said, secret discussion.

14:14.000 --> 14:19.000
The only thing that is still secret is the build for now

14:19.000 --> 14:24.000
because we still have some credentials for the various cloud providers.

14:24.000 --> 14:28.000
So ideally, we would like to have it in writtenly on Jenkins,

14:28.000 --> 14:33.000
and people can just see the logs of the build and see how things are going on.

14:33.000 --> 14:35.000
But it's not done yet.

14:35.000 --> 14:41.000
What we've done is that now if you open a pre-request against flat-car repository,

14:41.000 --> 14:43.000
it will start the build on GitHub action.

14:43.000 --> 14:48.000
So you can see your logs and you can see if something goes wrong, if the CI is OK.

14:48.000 --> 14:52.000
So it just build a QMU image and run the test on the QMU image.

14:52.000 --> 14:56.000
But for the release itself, it still relies on Jenkins,

14:56.000 --> 15:01.000
but eventually, we'd go public using GitHub actions.

15:01.000 --> 15:06.000
And I think that we'll close the talk.

15:06.000 --> 15:10.000
So if you have any questions, I'll be around with some flat-car teams, remember,

15:10.000 --> 15:12.000
for the end of the day.

15:12.000 --> 15:16.000
And thanks for your attention for this Sunday afternoon session.

15:23.000 --> 15:26.000
All right. Nice break-up question. Great.

15:32.000 --> 15:40.000
What's the elevator pitch for using flat-car above Fedora's offering or micro-OS from Sousa?

15:40.000 --> 15:47.000
Well, micro-OS and over-operating systems are quite similar,

15:47.000 --> 15:52.000
but flat-car has some multi-vendors, for example,

15:52.000 --> 15:58.000
or you can use it on premise, on bare metal, on different cloud providers.

15:58.000 --> 16:05.000
Also, you have new features that we try to merge into the flat-car operating system,

16:05.000 --> 16:09.000
for example, system DCS-X or other things that we try to leverage.

16:09.000 --> 16:14.000
And also, there is this, we try to do things upstream first.

16:14.000 --> 16:18.000
We got this talk about upstream versus downstream before that,

16:18.000 --> 16:21.000
but that's the idea. We try to go upstream first.

16:21.000 --> 16:26.000
So each time there is a new feature, we try to first implement it upstream

16:26.000 --> 16:28.000
before trying to solve it downstream.

16:28.000 --> 16:31.000
So we try to be more on the community side

16:31.000 --> 16:36.000
and try to fix the things on the upstream and not really on the downstream.

16:36.000 --> 16:42.000
And then speaking of fundamental differences, for example, with micro-OS,

16:42.000 --> 16:46.000
you don't have the same mechanism to provision the instance.

16:46.000 --> 16:51.000
For example, with flat-car, we use intensively ignition or afterburn,

16:51.000 --> 16:55.000
which is not yet available or experimental on micro-OS.

16:55.000 --> 16:58.000
So this is the kind of difference you can see.

16:58.000 --> 17:04.000
And if I recall correctly, I'm not sure if micro-OS is using REST 3,

17:04.000 --> 17:07.000
but this is the kind of functional features.

17:07.000 --> 17:12.000
You can see the difference, but in Vienna, it's the same purpose of operating system

17:12.000 --> 17:15.000
is just to give the user an operating system to run containers.

17:15.000 --> 17:16.000
That's it.

17:16.000 --> 17:20.000
So as it's open source, you have the choice of which solution you want to use.

17:20.000 --> 17:23.000
Thanks, Moomo.

17:23.000 --> 17:25.000
Feel free to comment this.

17:25.000 --> 17:32.000
How much has changed or has it been noticeable since Microsoft took over or the acquisition?

17:32.000 --> 17:34.000
Thanks for asking the question.

17:34.000 --> 17:41.000
So for the short story, Flatcar was developed initially by Kinfolk,

17:41.000 --> 17:45.000
which was a company that has been acquired by Microsoft two or three years ago.

17:45.000 --> 17:49.000
And I'd say it didn't change a thing for now for the development.

17:49.000 --> 17:53.000
The governance has always been on the community side, community-driven.

17:53.000 --> 18:00.000
And I'd say it's even better in a way because now we can totally be dedicated

18:00.000 --> 18:04.000
to this operating system and to the support of the operating system.

18:04.000 --> 18:08.000
And recently, like a few months ago, six months, something like that,

18:08.000 --> 18:11.000
we started to look into a CNCF incubation.

18:11.000 --> 18:16.000
So basically, we would like to have Flatcar find a new home at CNCF.

18:16.000 --> 18:22.000
So there is an open issue on the CNCF tracker so you can see the status of the incubation proposal.

18:22.000 --> 18:25.000
But in terms of governance, nothing's changed,

18:25.000 --> 18:32.000
and we're still dedicated for users to get the best Flatcar experience on any cloud providers.

18:32.000 --> 18:33.000
Thank you.

18:33.000 --> 18:34.000
Over the question?

18:34.000 --> 18:35.000
Yeah.

18:35.000 --> 18:39.000
Matthew, thanks for the talk and for the distribution, the idea, everything.

18:39.000 --> 18:45.000
So I'm not familiar with the project, so I'm attending just to understand what's going on.

18:45.000 --> 18:47.000
So everything is a container, right?

18:47.000 --> 18:49.000
All tools and everything are running as a container.

18:49.000 --> 18:55.000
But I'm curious how the kernel is booted or the NITRZ is done.

18:55.000 --> 18:59.000
So, yes, that part is a container or not?

18:59.000 --> 19:00.000
I don't think so.

19:00.000 --> 19:03.000
So Flatcar is not running inside a container.

19:03.000 --> 19:07.000
Flatcar is an operating system, like Ubuntu, like Debian, like whatever.

19:07.000 --> 19:10.000
It's designed to run container work loads.

19:10.000 --> 19:12.000
So you have the very minimum to run container work loads.

19:12.000 --> 19:16.000
You have a container one time, you have the kernel modules that face well.

19:16.000 --> 19:19.000
So in the end, it's like any over Linux distribution.

19:19.000 --> 19:25.000
You have your kernel, you have the boot process, you have the NITROM FS, and then after you have the user space.

19:25.000 --> 19:32.000
Yeah, so if I understand correctly, the stuff that's supposed to be previously managed in containers,

19:32.000 --> 19:37.000
in traditional packages, is now containers, right?

19:37.000 --> 19:44.000
But if a new version of a kernel is released, then how that's distributed, let's say.

19:44.000 --> 19:50.000
So if you have a new version of a software, how it's distributed on the operating system, that's the question.

19:50.000 --> 19:53.000
Yeah, you just wait for the new Flatcar release, because it's immutable.

19:53.000 --> 20:00.000
So if there is a new open SSL version, for example, you have to wait for the next Flatcar release to ship that new open SSL version.

20:00.000 --> 20:02.000
Like so you get the update.

20:02.000 --> 20:08.000
So that's like pulled from the Internet. It's not like in a format of a package, right?

20:08.000 --> 20:09.000
Sorry, come again?

20:09.000 --> 20:14.000
Is that in a format of a package of its pulled from the Internet straight?

20:14.000 --> 20:18.000
Yeah, it's not in the form, Flatcar is based on GN2 Linux.

20:18.000 --> 20:27.000
So the Flatcar itself, when you build it, you take the source from the value repository using GN2 mechanism, then you build the package.

20:27.000 --> 20:32.000
Then once the package is built, it is included into the image, which is the new Flatcar.

20:32.000 --> 20:36.000
Then the new Flatcar is released, and this is how you benefit from the software update.

20:36.000 --> 20:38.000
Okay.

20:38.000 --> 20:45.000
So I think my question is also, let's say not only technical, but more on the political side.

20:45.000 --> 20:51.000
So history is that this is a folk of CoroS, where Ken Falk started this, right?

20:51.000 --> 20:58.000
Then it was brought by Microsoft, but Microsoft has its own, the CBL Mariner.

20:58.000 --> 21:07.000
So how does this fit and what is, let's say, this is a cloud based, let's say, the essential client that you have.

21:07.000 --> 21:12.000
That this OS has to be used in cloud, right?

21:12.000 --> 21:15.000
Yeah, thanks for the question.

21:15.000 --> 21:21.000
So CBL Mariner is dedicated to run on Azure, while Flatcar is dedicated to run everywhere.

21:21.000 --> 21:26.000
And it's not monetary to run Flatcar on a cloud provider.

21:26.000 --> 21:32.000
So as I said, you can run your own Flatcar image on Raspberry Pi, on ARM64 at home if you want to.

21:32.000 --> 21:38.000
Or if you have your own, I don't know, Proxmox, we have some people that use Proxmox to run Flatcar.

21:38.000 --> 21:43.000
So yeah, Flatcar is really multi vendors and multi architectures.

21:43.000 --> 21:50.000
And so while CBL Mariner is really dedicated to Azure and nothing else at the moment.

21:54.000 --> 21:56.000
Hi.

21:56.000 --> 22:00.000
So in my previous role, we used Flatcar quite a bit for a while.

22:00.000 --> 22:08.000
But then we ran into kind of some trouble with AI and especially around things like we're trying to use like Infiniband.

22:08.000 --> 22:12.000
And we were actually kind of running into, I think, getting everything set up with Flatcar.

22:12.000 --> 22:20.000
Are you all kind of working more towards like AI workloads and making those easier to run on Flatcar?

22:20.000 --> 22:23.000
So I'm not at all AI expert.

22:23.000 --> 22:28.000
Maybe Remy, behind you, is a Flatcar member.

22:28.000 --> 22:34.000
I'm also a Flatcar maintainer and I've been looking at NVIDIA and GPU support in the past.

22:34.000 --> 22:37.000
And we want to get better at that.

22:37.000 --> 22:43.000
It would be great if someone from the community would also help because I have limited cycles.

22:43.000 --> 22:48.000
But it's something I and we care about, right?

22:53.000 --> 22:54.000
Just one last question.

22:54.000 --> 22:56.000
No one else has any?

22:56.000 --> 22:59.000
Do you support different container runtimes?

22:59.000 --> 23:03.000
So at the moment, we only ship the current container D.

23:03.000 --> 23:18.000
But basically, in a non-official way, you can use Podman using SystemDCX, which is a system D feature which allows you to mount overlay FS images on the base system.

23:18.000 --> 23:22.000
So yeah, with Podman, we ship a system DCX in an unofficial way.

23:22.000 --> 23:29.000
So you can just pull this Podman extension and load it on the system and have Podman up and running.

23:29.000 --> 23:32.000
There is some tracking issue to have this out of the box, of course.

23:32.000 --> 23:37.000
Like so you don't need to provisioning and to pull Podman's system extension.

23:37.000 --> 23:42.000
But yeah, ideally, we should be able to say, OK, if you want container D and Docker,

23:42.000 --> 23:46.000
or if you just want Podman, use this configuration and not this one.

23:46.000 --> 23:48.000
But yeah, you can use Podman.

23:48.000 --> 23:52.000
Actually, I did some experiments, there are things with it and it works.

23:52.000 --> 23:54.000
Cool, thank you.

23:54.000 --> 23:59.000
All right, I think we have time for one final question if someone's up for it.

24:02.000 --> 24:04.000
All right, looks like there's no question. Thank you very much.

24:04.000 --> 24:05.000
Thank you.

24:16.000 --> 24:18.000
Thank you.

24:46.000 --> 24:48.000
Thank you.

