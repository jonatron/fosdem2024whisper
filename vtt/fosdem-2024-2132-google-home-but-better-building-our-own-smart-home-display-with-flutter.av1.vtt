WEBVTT

00:00.000 --> 00:13.880
So, welcome for the second time. Thanks for staying this long with me last talk today,

00:13.880 --> 00:22.240
named Google Home, but better. Starting really good. Just a second. So, even though it's

00:22.240 --> 00:30.520
a short talk, just really quick, a little agenda for today, what you can expect. A

00:30.520 --> 00:35.840
bulk section, really brief about me, why am I talking about this, why should you listen

00:35.840 --> 00:43.480
to me talking about Flutter. The hardware used in this project, of course, that's one

00:43.480 --> 00:48.400
of the interesting parts, but no really big surprises there. It's just what you would

00:48.400 --> 00:56.080
all expect. Then we get to the software part one, the embedded Flutter part, and part two,

00:56.080 --> 01:02.000
the implementation. And I think this is for most of you, this will be the most interesting

01:02.000 --> 01:13.560
parts of this talk. So, first about me. Hi there, I'm Moritz. Yeah, a few years ago,

01:13.560 --> 01:19.800
when I was 15, 16, I started out with embedded development. Back then it was all hobbies.

01:19.800 --> 01:28.920
I started out with an 8051 Derivate. I think it was an Infinion XC878. I started developing

01:28.920 --> 01:36.680
in C. Back then I wanted to mainly build everything around music, high-fee, loudspeakers, equalizers,

01:36.680 --> 01:42.800
digital sound processors, and so on. Following through college, I worked as a why we created

01:42.800 --> 01:48.080
Snap Embedded. That's what we're doing there. Also, co-organizing the Flutter Munich meetup.

01:48.080 --> 01:53.520
So if you ever want to come over or speak in Munich about Flutter, just feel free to

01:53.520 --> 02:04.480
hit me up. So, I left Embedded. Now I'm back at Embedded. Why? And this is maybe really

02:04.480 --> 02:11.360
short clip showcasing why I'm back at Embedded user interfaces, because this is still stuff

02:11.440 --> 02:17.760
we get today in new projects. And it's still sometimes you get a new coffee machine state

02:17.760 --> 02:22.160
of the art with a touchscreen and you use the touchscreen and you're like, oh no, God,

02:22.160 --> 02:28.960
why did you build this? So, yeah, I don't want to build any more of those things. I run, I

02:28.960 --> 02:36.640
want to build the UI like of the one today's talk is about. I think this, I hope this looks

02:36.640 --> 02:43.200
a little better than the things you saw before. That's the user interface of the Google Home

02:43.200 --> 02:49.680
replica we built or I built that I normally wanted to present here, but sadly there was,

02:49.680 --> 02:55.280
it would have been hard to set it up in five minutes, get it here on the table, so we'll

02:55.280 --> 02:59.200
rather stick with the presentation. Also, it would have been unfair for all the people online.

03:00.480 --> 03:03.840
But nevertheless, I have picture of everything. We're going through that now.

03:04.720 --> 03:10.560
So, the hardware. Yeah, as I said, not much more as you would imagine,

03:11.760 --> 03:18.800
Raspberry Pi 4. It's still model 4B, 4GB of RAM, that's enough. 2GB of RAM with a desktop

03:18.800 --> 03:24.080
environment and Flutter, yeah, wouldn't recommend that on a Raspberry Pi. Of course, the Raspberry

03:24.080 --> 03:29.440
Pi 5 would work. It would just be more expensive and it would run just as good.

03:30.000 --> 03:37.680
A little thing we have in here, what deals with the but better part with the Google Home or

03:37.680 --> 03:44.160
Smart Home devices in general, we can't add whatever we want hardware and as we will not be

03:44.160 --> 03:51.840
adding a voice command service on this device, I thought about what would be cooler. Voice commands

03:51.840 --> 03:57.760
would are already out there and what do we need to see? What is the most interesting thing and

03:57.760 --> 04:04.640
that's for a lot of people, I guess, interacting with custom hardware. Therefore, we integrated an

04:04.640 --> 04:13.120
air sensor there, the Pimoroni SCD41 measures CO2 temperature and humidity, connects to the

04:13.120 --> 04:21.440
Raspberry Pi with I2C and it comes that is also very handy with a ready Python library that's

04:21.520 --> 04:29.200
known to be working with the Raspberry Pi. The touchscreen is just some WaveShare 11 inch IPS

04:29.200 --> 04:35.200
panel, capacitive touch, USB, HDMI, really nothing too special. Those touch screens just got really

04:35.200 --> 04:42.320
good in the last years using them. Yeah, at least with the Raspberry Pi OS or so, just works out of

04:42.320 --> 04:51.680
the box, it's fine, nothing to worry anymore about. Then for the last part, yeah, with Smart Home,

04:51.680 --> 04:57.920
what most people think about is turning light bulbs, plugs on and off and for Smart Home projects or

04:57.920 --> 05:03.520
whenever you want to do projects on your own, devices that come in really, really handy are those

05:03.520 --> 05:10.000
Shelly bulbs and Shelly plugs because they just come in with a built-in web server and you just

05:10.000 --> 05:15.600
have a REST API, connect them through your Wi-Fi, they come with an app, super easy and yeah, you

05:15.600 --> 05:21.920
have a REST API where you just can interact and it on, off, change the colors, it couldn't get much

05:21.920 --> 05:31.280
easier. So, all together without a whole bunch of cables, that then looks like this. So, now that we

05:31.280 --> 05:36.960
have the hardware part together, now comes the interesting, the next part, the embedded flutter

05:36.960 --> 05:44.240
part and as the talk earlier already pointed out, there's not just flutter to run on embedded devices.

05:44.240 --> 05:50.000
If you Google it, if you want to start out with it, you will find a few repositories all dealing with

05:50.000 --> 05:56.720
flutter and embedded devices. We just saw one, in fact in the last talk, it was using flutter Pi,

05:56.720 --> 06:05.840
so what's with that? Why are there different options? Is this not flutter or well, it is flutter, but

06:06.720 --> 06:13.840
to understand this, we may have to, yeah, next slide, we may have to look at the Linux

06:13.840 --> 06:20.720
embedded that flutter uses. The main difference, those custom embedders have, the custom embedder

06:20.720 --> 06:27.200
connects or the embedders connect the flutter engine with the targeted platform and the main

06:27.200 --> 06:33.200
difference we have with those custom embedders, which I have, let's see if this works, here on the right

06:33.200 --> 06:46.640
side, fancy, I wasn't prepared for that. So, the main thing you can see is here, something's missing.

06:47.920 --> 06:55.360
Flutter for Linux just heavily depends on GTK and GTK, in fact GTK 2, which is getting a pain

06:55.360 --> 07:03.440
right now for flutter itself. So, what most of those, or what all of those libraries have in common,

07:03.440 --> 07:09.760
we don't really need those GTK parts that flutter uses anyway in embedded hardware. We don't have

07:09.760 --> 07:14.960
tabs, we normally don't have windows, we don't need all of that stuff, so they just get rid of it,

07:16.000 --> 07:22.560
and which sadly isn't that easy in the Linux, in the, let's call it vanilla, flutter,

07:22.560 --> 07:33.200
embedded, but they get rid of it, so you can use flutter on custom hardware without GTK and GTK,

07:33.200 --> 07:38.560
and that means you can use flutter, for example, with Wayland, with a custom embedder, as the

07:39.360 --> 07:46.000
talk before already pointed out, which is not possible right now with the, let's call it flutter on

07:46.000 --> 07:51.520
embedded projects, especially if you want to go in a really industrial style, but we're getting there.

07:52.320 --> 07:57.200
Also, a big part that's missing right now is tutorials on how tools are still, there's not

07:57.200 --> 08:03.600
so many out there, just Google it, it's, yeah, there's not much out there, but I'm sure we will

08:03.600 --> 08:10.400
get through this within this year, or at least maybe the next year, and then flutter will also

08:10.400 --> 08:17.040
definitely become available to startups, to smaller, medium-sized companies, there will be tools,

08:17.120 --> 08:24.240
software as a services around that, and flutter will get more mature, I think we don't know it,

08:24.240 --> 08:28.560
but I guess that flutter will get more mature in the embedded world in the next one to two years.

08:29.360 --> 08:36.640
But, so if we want to do a project right now, where we just want to try out how flutter on

08:36.640 --> 08:43.520
embedded devices works, at least for this project, when we use a Raspberry Pi, we have Raspberry Pi OS,

08:43.520 --> 08:49.200
we can just use flutter as it is, we can build for Linux there, it will work just fine.

08:49.200 --> 08:55.920
The newest Raspberry Pi OS changed to, I think it changed to using Wayland, I haven't tried it yet,

08:55.920 --> 09:04.560
but apparently it works alright. Flutter needs to do something about GTK2 anyway, so maybe it will

09:04.560 --> 09:11.360
be possible with the just normal flutter to build something suitable for Wayland and direct rendering

09:11.360 --> 09:16.800
as well in the future. For right now, if you're doing a hobby project, if you just want to try

09:16.800 --> 09:23.120
something out with a Raspberry Pi, just go with flutter as it is, it's fine. If you want to go

09:23.120 --> 09:27.440
with, if you want to use direct rendering, if you want to go with Wayland, if you want to get

09:27.440 --> 09:34.080
something into production grade, then you have to look at flutter Pi, Toyota's, IVI Home Screen,

09:34.080 --> 09:42.240
or the one from Sony, whereas the Toyota thing really is amazing and is moving forward at a

09:42.240 --> 09:50.000
really fast pace. So enough to this generic talk about flutter, what about the implementation

09:50.000 --> 09:56.640
for this project right now? I want to go through it in a few steps and yeah, the first part or the

09:56.640 --> 10:00.800
first part that we need to integrate for this project to work is connect to Raspberry Pi to the

10:00.800 --> 10:06.400
touchscreen. What do we do for that? We use the Raspberry Pi Installer, Installer Raspberry Pi OS,

10:06.400 --> 10:11.680
it just works out of the box. Thanks to a lot of guys that are also here. That's really, really easy.

10:12.480 --> 10:19.520
Then we need to get flutter running. For that, we wrote a tool, I just said it with Snap Embedded,

10:19.520 --> 10:26.560
we're doing open source projects around that. We basically built a tool in the end, there's a

10:26.560 --> 10:33.440
repo with the link called Snap CLI which allows you to, from your host machine, set up a Raspberry Pi

10:33.440 --> 10:38.640
that's connected in the same network as you are. It'll connect over SSH, it will install flutter,

10:38.640 --> 10:44.640
all the stuff you need, and it will set it up as a custom debug device so that you can just run the

10:44.640 --> 10:52.800
code and debug out of VS code on Linux, Mac, Windows, and the code will compile and everything

10:52.800 --> 10:58.160
will run in real time with hot reload working with the Dart tools on your Raspberry Pi. If you

10:58.160 --> 11:02.720
want to just develop on Raspberry Pi, that's already really easy and straightforward. Even the

11:02.720 --> 11:08.080
Dart DevTools work, all of that is already there. Just, yeah, no cross compilation, we don't want

11:08.080 --> 11:15.760
to get in that direction yet. The next part is, yeah, it's rather uninteresting. Here you can

11:15.760 --> 11:20.400
see a little bit of Dart, that code won't run, I cut out everything that looked ugly.

11:21.360 --> 11:29.360
So that's just basically a get request. You connect the bulb and the plugs with your flutter or

11:29.360 --> 11:38.080
Dart application, run this function to get the bulb status, set the bulb status, or to set the

11:38.080 --> 11:45.440
bulb color. The more interesting part, I guess, and what I wanted to point out, which will also

11:46.080 --> 11:52.240
explain how you would integrate a voice assistant to with a flutter application on the Raspberry Pi,

11:52.240 --> 12:00.080
is how do we connect this sensor that's connected to the I2C bus with our flutter application.

12:01.920 --> 12:07.760
We would have a different approach, or we do have different approaches that we could use here.

12:07.760 --> 12:14.000
We could do a Dart implementation of everything directly to the I2C bus. We could go through

12:14.000 --> 12:20.480
the data sheets of the sensor, implement everything by ourselves, all the commands

12:20.480 --> 12:29.120
do it all by ourselves. We could run up an MQTT prokure on the Raspberry Pi. We could then connect

12:29.120 --> 12:37.520
the sensor to this on the prokure, subscribe the flutter application on the MQTT prokure,

12:37.520 --> 12:43.360
because MQTT is one of those plugins that work with most of the custom embedders, so that really

12:43.360 --> 12:50.960
works out of the box. So that would be possible to take. We could, of course, here, I use Python,

12:50.960 --> 12:58.640
but we could use a Python backend, just make another REST API on this device and talk to it

12:58.640 --> 13:07.120
locally, I think, in a lot of embedded projects. It's done that way. Or we use Dboss. We have the

13:07.840 --> 13:14.320
Dboss running on Raspberry Pi OS. We have the Dboss running on most Linux systems, and we can just

13:14.320 --> 13:20.320
clip on the session bus for this purpose. The plugins are also already there. And

13:21.840 --> 13:26.640
for this example, this is what we did, because connecting Flutter application with

13:27.680 --> 13:33.200
whatever else process is running on the machine, you can just use Dboss. We can just use the

13:33.200 --> 13:38.720
Python example library that was already shipped with the sensor, of course. I mean,

13:39.440 --> 13:46.400
we don't want to do work twice. So we can connect whatever we want right now with packages plugins

13:46.400 --> 13:49.680
that are already available. Resources, thank you very much.

13:58.880 --> 13:59.760
Two minutes.

