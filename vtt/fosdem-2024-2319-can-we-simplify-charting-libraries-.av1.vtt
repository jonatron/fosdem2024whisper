WEBVTT

00:00.000 --> 00:19.080
Alexander has been a React developer since 2018 and he likes creating UI that is nice.

00:19.080 --> 00:23.280
And he's going to talk about how we can simplify charting libraries.

00:23.280 --> 00:25.280
So big round of applause for Alexander.

00:30.280 --> 00:34.280
Okay, so thank you very much everyone for joining.

00:34.280 --> 00:39.280
To give you a bit of context about what we will talk today, I'm currently working at the MUI,

00:39.280 --> 00:43.280
which if you don't know is providing a user interface component.

00:43.280 --> 00:46.280
You might know us because of this library.

00:46.280 --> 00:52.280
And a very kind of a tradition each year you ask a user what can we do for you, what can we improve.

00:53.280 --> 01:01.280
And the community is quite creative, which led to other libraries, for example, a base, which is a headless library.

01:01.280 --> 01:03.280
But they are very creative.

01:03.280 --> 01:07.280
For example, Toolpad is a no-code application we are trying to build.

01:07.280 --> 01:12.280
And then there is the team I'm working in, which is MUIX.

01:12.280 --> 01:20.280
And we create the most complex components, for example, a data grid, a date-time picker,

01:20.280 --> 01:23.280
which are a bit more complex than a button and select.

01:23.280 --> 01:26.280
And a year ago, we decided to start the chart sephor.

01:26.280 --> 01:34.280
And this talk is about how we proceed, what we found, explored, and our current conclusion.

01:34.280 --> 01:40.280
So from the question we asked to user, what they wanted is a nice documentation.

01:40.280 --> 01:44.280
That's the main stuff they complain about a chart library.

01:44.280 --> 01:48.280
And having a developer experience that match what we do usually, for example, for the data grid.

01:48.280 --> 01:51.280
So we'll see together if this is possible.

01:51.280 --> 02:00.280
Okay, so I started with just thinking, having a dream, what would be the perfect user developer experience I would want.

02:00.280 --> 02:03.280
So for me, the best one is you have a wrapper.

02:03.280 --> 02:08.280
You provide him information about what he needs to know, what is my size.

02:08.280 --> 02:13.280
And each time you want to add an element, just add a React element in it.

02:13.280 --> 02:15.280
It seems pretty basic.

02:15.280 --> 02:16.280
It should be okay.

02:16.280 --> 02:19.280
Up to the time you add more data.

02:19.280 --> 02:29.280
When you add more data, it overflows and it totally makes sense just because the x-axis will need to communicate with the plotting to say, hey, stop after 10.

02:29.280 --> 02:34.280
But if you put larger data, you have another overflow issue.

02:34.280 --> 02:38.280
And just because your line plot needs to communicate with a y-axis.

02:38.280 --> 02:47.280
So I started my journey with a dream and I ended up with an issue because components need to communicate in all of our direction.

02:47.280 --> 02:51.280
And that is just one example, but it's the main issue of charts.

02:51.280 --> 02:53.280
Data management is a pain.

02:53.280 --> 02:56.280
There is a second one, which is customization.

02:56.280 --> 03:00.280
Here you can see for a button, we kind of all agree about what it can be.

03:00.280 --> 03:05.280
You can customize a bit the color, does a background have a color or not.

03:05.280 --> 03:08.280
The most complex stuff you can do is adding icons.

03:08.280 --> 03:12.280
Most of the time it's at the beginning or at the end.

03:12.280 --> 03:15.280
But for charts, you have much more elements.

03:15.280 --> 03:22.280
And the creativity of designer and mathematician is endless about how you can add annotation to it.

03:22.280 --> 03:25.280
So we need much more flexibility.

03:25.280 --> 03:33.280
And currently, all our developer experience strategies does not allow to do that.

03:33.280 --> 03:35.280
So we have two main issues.

03:35.280 --> 03:37.280
It's time to have a look in the past.

03:37.280 --> 03:41.280
This library exists since more than 10 years, so they have a lot of experience to share with us.

03:41.280 --> 03:48.280
And it's a pleasure to work in open source, so that you can have a look at why they made a decision and how the code is working.

03:48.280 --> 03:50.280
So let's start with rich arts.

03:50.280 --> 03:52.280
As you can see, it's a composition.

03:52.280 --> 03:55.280
We'll just say at the beginning that composition is a pain.

03:55.280 --> 03:58.280
So how did they solve this data management issue?

03:59.280 --> 04:03.280
Basically, you have a wrapper, so the line chart.

04:03.280 --> 04:05.280
And he says he looks at his children.

04:05.280 --> 04:07.280
So children is just an array of components.

04:07.280 --> 04:10.280
And he says, OK, which one is an axis?

04:10.280 --> 04:17.280
And I will extract all the data from its props to know from which point to which one I can display stuff.

04:17.280 --> 04:20.280
Does the same with all the elements that are plotting data.

04:20.280 --> 04:23.280
So here, line, mark, areas, and stuff like that.

04:23.280 --> 04:31.280
And then you do a kind of an aggregation to render the components with the correct properties.

04:31.280 --> 04:35.280
The file that makes that is 1000 lines.

04:35.280 --> 04:37.280
It's very hard to read.

04:37.280 --> 04:40.280
I assume it might be hard to maintain too.

04:40.280 --> 04:47.280
And when you want to add your custom components, you don't really know where the information comes from,

04:47.280 --> 04:51.280
because there is this black magic aggregation that will provide you some data.

04:51.280 --> 04:54.280
And to the bug, it's a bit of a mess.

04:54.280 --> 04:57.280
But it allows a lot of flexibility.

04:57.280 --> 05:01.280
On the other side, you have a much simpler approach.

05:01.280 --> 05:03.280
It's a single component.

05:03.280 --> 05:05.280
So for example, you want to line, you do responsive line.

05:05.280 --> 05:07.280
And you provide data.

05:07.280 --> 05:11.280
You can configure all the axes look like and configure the tooltip, et cetera.

05:11.280 --> 05:16.280
Each element has its props and a lot of options.

05:16.280 --> 05:20.280
So as I said, it's very straightforward.

05:20.280 --> 05:23.280
So one chart is equal to one data.

05:23.280 --> 05:27.280
So that will change according to your user, plus a set of options.

05:27.280 --> 05:30.280
But you get two main issues.

05:30.280 --> 05:35.280
For example, mixing charts does not really make sense, because you have two single components.

05:35.280 --> 05:39.280
You cannot overlap them in an easy way.

05:39.280 --> 05:43.280
And you cannot modify the features, because it's a single component.

05:43.280 --> 05:45.280
You have a finite set of options.

05:45.280 --> 05:47.280
And the option is not available.

05:47.280 --> 05:51.280
You can go inside the source code to update it.

05:51.280 --> 05:56.280
For example, supporting different axes for the left and the right.

05:56.280 --> 05:59.280
So having multiple axes for line charts is not supported.

05:59.280 --> 06:04.280
And except modifying the source code, you cannot do that in Nivo.

06:04.280 --> 06:07.280
So very nice if you want a simple chart.

06:07.280 --> 06:16.280
But if you, once you go into a wall, there is no option.

06:16.280 --> 06:19.280
So for the charts, it's a pure Ligava script.

06:19.280 --> 06:24.280
So as you can see, you select an HTML element, for example, main, and you run the code.

06:24.280 --> 06:27.280
Of course, all the complexity is hidden here.

06:27.280 --> 06:33.280
And to give you a bit of flavor, they kind of fixed the issue we've seen just before.

06:33.280 --> 06:35.280
The series can be multiple types.

06:35.280 --> 06:38.280
So you can mix a line chart, a bar chart.

06:38.280 --> 06:41.280
You can even put a pie chart in the middle of a line chart.

06:41.280 --> 06:42.280
It does not make sense.

06:42.280 --> 06:45.280
But for the software, it's okay.

06:45.280 --> 06:49.280
And it's an old software, so there is a lot of options.

06:49.280 --> 06:53.280
So you can do most of the customization you want.

06:53.280 --> 06:56.280
Due to time, I will just skip this.

06:56.280 --> 07:01.280
So basically, this is all the pipeline for rendering a chart.

07:01.280 --> 07:05.280
And the main issue I see with each chart is this one.

07:05.280 --> 07:08.280
The only stuff you have access is still the option object.

07:08.280 --> 07:10.280
So basically, you can provide the data.

07:10.280 --> 07:11.280
You can customize the option.

07:11.280 --> 07:14.280
But as soon as you want to render a custom element,

07:14.280 --> 07:19.280
you know if you've tried to render SVG just using strings,

07:19.280 --> 07:25.280
it does not make a lot of sense, or you need to have the components.

07:25.280 --> 07:28.280
So, now, save time. Nice.

07:28.280 --> 07:31.280
Just to resume, so we have these two solutions, basically,

07:31.280 --> 07:33.280
single components or composition.

07:33.280 --> 07:38.280
And as we've seen, data sharing with composition is a nightmare.

07:38.280 --> 07:44.280
And you can work around, but you get into the black magic stuff.

07:44.280 --> 07:47.280
And for the developer experience, it's not good.

07:47.280 --> 07:50.280
And for adding elements, you need composition,

07:50.280 --> 07:54.280
because as soon as you get to view these options,

07:54.280 --> 07:59.280
you don't know how to insert something, for example, in a Nivo as an array

07:59.280 --> 08:03.280
that allows you to reorder the grid, the axis, the plotting.

08:03.280 --> 08:05.280
But you know that when you reach the state,

08:05.280 --> 08:08.280
when you need to pass an array to order your elements,

08:08.280 --> 08:11.280
you will be quickly limited.

08:11.280 --> 08:15.280
So, it's time to go to the proposal.

08:15.280 --> 08:18.280
So, basically, we started with a single component.

08:18.280 --> 08:21.280
So, it looks a bit like a Nivo.

08:21.280 --> 08:22.280
You want a line chart.

08:22.280 --> 08:26.280
You say line chart, and you provide data and options.

08:26.280 --> 08:29.280
But behind the hood, it's composition.

08:29.280 --> 08:31.280
So, you have a like for a rich art.

08:31.280 --> 08:35.280
You have a wrapper and all the rendering components.

08:35.280 --> 08:39.280
If you look closely, you might see that the way props are passed

08:39.280 --> 08:43.280
are not exactly the same as for rich arts, and there is a reason.

08:43.280 --> 08:48.280
Basically, all the data that need to be shared and aggregated,

08:48.280 --> 08:53.280
so the axis, the series, and so on, are passed to the container.

08:53.280 --> 08:57.280
The reason is basically that we want to do this aggregation stuff

08:57.280 --> 09:00.280
in a need and way to say, okay, you're using our components,

09:00.280 --> 09:04.280
trust us about all the axis and the series need to interact.

09:04.280 --> 09:06.280
You don't need to take care about that stuff.

09:06.280 --> 09:08.280
We'll do it for you.

09:08.280 --> 09:12.280
And then it's passed to providers, so a series provider.

09:12.280 --> 09:16.280
But take care about knowing what is a bar, a bar series,

09:16.280 --> 09:18.280
what is a line series, what is a pie series.

09:18.280 --> 09:21.280
Same for the axis and interaction provider.

09:21.280 --> 09:24.280
For example, we'll say to you, the series with this idea

09:24.280 --> 09:26.280
is currently highlighted by the most.

09:26.280 --> 09:28.280
So, displaying accordingly.

09:29.280 --> 09:31.280
So now we can create the rendering part.

09:31.280 --> 09:34.280
So, for example, the bar plot, we'll call the series provider

09:34.280 --> 09:37.280
and say, okay, give me the data about the series.

09:37.280 --> 09:40.280
If there is none in Render.0, if there is some,

09:40.280 --> 09:44.280
he asks to the axis provider, okay, I have this bar with a value of 24.

09:44.280 --> 09:48.280
Can you say me which have a coordinate I should associate to this value?

09:48.280 --> 09:53.280
So, he renders the rectangle, and he will communicate with the interaction provider

09:53.280 --> 09:57.280
to know if the bar needs to be fade out, highlighted,

09:57.280 --> 09:59.280
or just in a normal state.

09:59.280 --> 10:02.280
With the same logic, you can create whatever you want.

10:02.280 --> 10:05.280
So, other kind of series, other kind of components.

10:05.280 --> 10:08.280
So, for example, we created the axis, legend to tip the basics one.

10:08.280 --> 10:13.280
For the little story, the reference line has been created by a user,

10:13.280 --> 10:16.280
just using the provider because it was a bar so.

10:16.280 --> 10:18.280
And of course, you can create your own ones,

10:18.280 --> 10:22.280
and that's the main success of this approach.

10:22.280 --> 10:25.280
So, as a conclusion, a single component.

10:25.280 --> 10:29.280
For us, it was a need because most of the time, for example,

10:29.280 --> 10:32.280
you just want to put a sparkline.

10:32.280 --> 10:36.280
You want to put a bar chart in your application very quickly.

10:36.280 --> 10:38.280
So, you say bar charts.

10:38.280 --> 10:43.280
You get few options, but just what you need to get the correct bar chart,

10:43.280 --> 10:46.280
and you don't have to care about all this internal stuff,

10:46.280 --> 10:49.280
about all components communicate together.

10:49.280 --> 10:52.280
But as soon as you want to do something very custom,

10:52.280 --> 10:56.280
and the charts are part of the earth of your business model,

10:56.280 --> 11:00.280
you want it to be as the designer implemented it,

11:00.280 --> 11:02.280
or display very specific stuff.

11:02.280 --> 11:04.280
So, you need composition.

11:04.280 --> 11:09.280
The main failure of this experiment was the configuration feeling.

11:09.280 --> 11:12.280
I wanted absolutely to avoid this aspect of,

11:12.280 --> 11:15.280
I give you a bunch of options, deal with it.

11:15.280 --> 11:18.280
It's not possible because there is so much interaction

11:18.280 --> 11:20.280
between the axis and the series,

11:20.280 --> 11:25.280
but you cannot split them into the options where they are needed.

11:25.280 --> 11:28.280
For example, axis in axis and series in the series.

11:28.280 --> 11:32.280
You need to get them all together to do the computation.

11:32.280 --> 11:35.280
You get this feeling, but okay.

11:35.280 --> 11:39.280
And the success is to empower developers to create their own subcomponents.

11:39.280 --> 11:43.280
And that is something I've never seen before,

11:43.280 --> 11:47.280
except if you go very low level on how to make charts.

11:47.280 --> 11:51.280
And to give you a flavor about how easy it is.

11:51.280 --> 11:54.280
Okay.

11:54.280 --> 11:56.280
So, this is a line chart.

11:56.280 --> 12:00.280
And there is a custom component in the middle, this horizontal line,

12:00.280 --> 12:04.280
that shows you for your most position what is the value on the left and on the right.

12:04.280 --> 12:06.280
So, this component is not very useful,

12:06.280 --> 12:11.280
but it demonstrates interaction and axis management.

12:11.280 --> 12:14.280
And so, to create it, you need two stuff.

12:14.280 --> 12:18.280
First, the bounding box in red, the most position.

12:18.280 --> 12:20.280
That's easy stuff.

12:20.280 --> 12:22.280
And then you want what we call a scale.

12:22.280 --> 12:27.280
If you use D3, it's the same object that allows you to convert the value to a coordinate.

12:27.280 --> 12:32.280
And what will interest us is the coordinate to the value.

12:32.280 --> 12:34.280
So, let's start coding it.

12:34.280 --> 12:36.280
I promise it will be very quick.

12:36.280 --> 12:42.280
Use drawing area is calling the provider that retains.

12:42.280 --> 12:44.280
Where do you plot the data?

12:44.280 --> 12:47.280
So, you get just the bounding box.

12:47.280 --> 12:53.280
And you use Y scale, provided the idea of your scale.

12:53.280 --> 12:55.280
And it returns you the D3 scale.

12:55.280 --> 12:56.280
Very easy.

12:56.280 --> 12:57.280
And that's all.

12:57.280 --> 12:58.280
That's all you need.

12:58.280 --> 13:00.280
After, it's boring stuff.

13:00.280 --> 13:01.280
You save a state.

13:01.280 --> 13:07.280
And you do your use effect to almost move stuff like that.

13:07.280 --> 13:12.280
If you store null, just because you are outside of the SVG of the drawing area,

13:12.280 --> 13:14.280
so you're under nothing.

13:14.280 --> 13:16.280
Otherwise, you're under a path.

13:16.280 --> 13:19.280
So, quickly.

13:19.280 --> 13:22.280
You go from the left at the most position.

13:22.280 --> 13:24.280
So, single point.

13:24.280 --> 13:26.280
And you draw a line of the wave.

13:26.280 --> 13:29.280
So, that's come from the drawing area.

13:29.280 --> 13:37.280
And then you just have to use the axis scale invert to get the value from the coordinate.

13:37.280 --> 13:38.280
You display it.

13:38.280 --> 13:39.280
And that's all.

13:39.280 --> 13:43.280
So, you've created a component that is completely custom.

13:43.280 --> 13:45.280
And that interacts with your chart.

13:45.280 --> 13:53.280
And you can reuse it into any other kind of charts you build with us.

13:53.280 --> 13:56.280
Thank you very much for your attention.

13:56.280 --> 14:02.280
Thank you.

14:02.280 --> 14:08.280
Most of the time, people don't know, but there is an option on to force them to send a feedback about talks.

14:08.280 --> 14:10.280
If you have some, please don't hesitate.

14:10.280 --> 14:15.280
Otherwise, there are my contacts for later.

14:15.280 --> 14:16.280
Are there any questions?

14:16.280 --> 14:22.280
We have a few minutes for some questions.

14:22.280 --> 14:31.280
Yes.

14:31.280 --> 14:35.280
You mean rendering a custom?

14:35.280 --> 14:40.280
Can we use a render props to render custom sub-elements?

14:40.280 --> 14:47.280
But the issue is, for example, with SVG, you end up with the order of your components,

14:47.280 --> 14:50.280
impact which one is overflowing which one.

14:50.280 --> 14:55.280
And so the question is, where do you render this element?

14:55.280 --> 15:02.280
So, for example, this line, you can imagine that you put it on top of a line chart

15:02.280 --> 15:05.280
and below the mark plot of the line chart.

15:05.280 --> 15:13.280
And so you need to get access to the GSX level.

15:13.280 --> 15:26.280
How do you go from simple mode to complex?

15:26.280 --> 15:35.280
You can go from one component and if you need more advanced stuff, you can compose.

15:35.280 --> 15:42.280
There is a single component for all the basic charts, so line, bar, pie, and the scatter.

15:42.280 --> 15:48.280
And if you want, for example, to compose a bar chart with a line chart, you need to recreate it.

15:48.280 --> 15:51.280
So we provide all the basic stuff.

15:51.280 --> 15:58.280
So basically, if you open in GitHub, the line chart.tsx, you will see a chart container,

15:58.280 --> 16:04.280
different plotting, the access, and basically that's also you get five or between five

16:04.280 --> 16:11.280
and 10 components to create your own one.

16:11.280 --> 16:16.280
How do you use the rest of MI as financing?

16:16.280 --> 16:19.280
It's kind of standalone.

16:19.280 --> 16:29.280
We reuse the theme mostly to be linked with, for example, the tooltip so that it gets the same color as the background

16:29.280 --> 16:31.280
of your application.

16:31.280 --> 16:35.280
But otherwise, it's SVG, so there is not that much in common.

16:35.280 --> 16:37.280
There is no button, for example.

16:37.280 --> 16:38.280
There is no select.

16:39.280 --> 16:42.280
We don't really need those user interfaces.

16:42.280 --> 16:48.280
It's more of a theming and the way components are styled, for example.

16:48.280 --> 16:55.280
You set that it follows the same developer experience or you can override the styling.

16:56.280 --> 17:10.280
How do we create a reaction between what you have in the data pool?

17:10.280 --> 17:12.280
How is the performance?

17:12.280 --> 17:14.280
Have you checked how it behaves?

17:14.280 --> 17:20.280
Because how we have to prevent this is with reaction between real reaction and real data

17:21.280 --> 17:24.280
and real data.

17:24.280 --> 17:29.280
Have you seen how this affects whether we have a lot of points?

17:29.280 --> 17:33.280
No, we did not try mostly because we are currently using SVG.

17:33.280 --> 17:42.280
And so we know that there is at least a wall that is waiting for us at a certain level just the time to render the SVG.

17:42.280 --> 17:44.280
So we did not care that much.

17:44.280 --> 17:47.280
It's part of the next year roadmap.

17:50.280 --> 17:54.280
Thank you all for close for ads on.

