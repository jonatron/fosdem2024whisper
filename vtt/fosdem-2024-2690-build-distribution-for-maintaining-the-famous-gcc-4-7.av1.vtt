WEBVTT

00:00.000 --> 00:12.000
That's great to see so many people interested in GCC from more than 10 years ago.

00:12.000 --> 00:16.000
Okay, let's get started.

00:16.000 --> 00:21.000
So we are taking a step in time by more than 10 years, I think.

00:21.000 --> 00:23.000
Yes, almost, yeah.

00:23.000 --> 00:38.000
Okay, so Oliver Reiche is going to talk about the maintenance of GCC 4.7 and the reason for that is that GCC 4.7 has a special property which I'm sure you will talk about quickly.

00:38.000 --> 00:45.000
Exactly. So, hello everybody, my name is Oliver Reiche. I'm working for the Huawei Research Center in Munich.

00:45.000 --> 00:51.000
And yeah, I would like to talk about a built distribution for maintaining the famous GCC 4.7.

00:51.000 --> 00:54.000
So, and I would like to start with dissecting the title a little bit.

00:54.000 --> 00:59.000
So, first of all, what is the famous GCC 4.7 and what is it famous for?

00:59.000 --> 01:04.000
And then also talk a little bit about what do we mean by the term built distribution?

01:04.000 --> 01:13.000
Then I will show a little bit of patches that we applied to that GCC version and show a little bit about a bootstrap process before I wrap up the talk.

01:13.000 --> 01:24.000
All right, so GCC 4.7. Well, there is a movement that's called bootstrapable builds and this movement strives for building all software from source.

01:24.000 --> 01:33.000
And of course, you have to start somewhere. So, in practice, you usually start with a minimal set of binaries that you need to start the bootstrap process.

01:33.000 --> 01:45.000
And then at some point you bootstrap your C compiler and at some point you want now to bootstrap your C++ compiler and then you might ask yourself, how do I build a C++ compiler without a C++ compiler?

01:45.000 --> 01:49.000
Because most modern C++ compilers are actually written in C++.

01:49.000 --> 01:53.000
So, this is exactly where GCC 4.7 comes into play.

01:53.000 --> 02:02.000
It's a key role for the bootstrapable builds movement because it's the last GCC version that can only be compiled, that can be compiled with only a C compiler.

02:02.000 --> 02:12.000
So, if you want to enter the realm of C++ and everything that is beyond in this bootstrapping process, you will need this version of GCC.

02:12.000 --> 02:17.000
So, and it's also about software preservation because, yeah, it's a quite old code base.

02:17.000 --> 02:23.000
It does not run out of the box with modern compilers. It does not run out of the box of modern systems.

02:23.000 --> 02:28.000
Modern systems and modern compilers use by default usually the C11 standard.

02:28.000 --> 02:36.000
Also, this code base has some issues with that and GCC 4.7 does not build reproducibly in all scenarios.

02:36.000 --> 02:39.000
I will come to that a little later.

02:39.000 --> 02:43.000
So, the next thing is from the title, build distribution.

02:43.000 --> 02:47.000
I mean, this is like a very fuzzy task that we term that we invented.

02:47.000 --> 02:49.000
So, what do we mean by that?

02:49.000 --> 02:53.000
So, we have actually a project that's called Bootstrapable Toolchain.

02:53.000 --> 02:56.000
There's a little bit of advertisement here on the right side.

02:56.000 --> 03:02.000
You can build this project using our very own open source build system that's called JustBuild.

03:02.000 --> 03:09.000
And if you use this project, you can Bootstrap the latest compilers and latest build tools with it.

03:09.000 --> 03:15.000
And all you need, of course, our build system and reduced binary seed.

03:15.000 --> 03:24.000
We need the core utility being installed. We need a POSIX compliant shell and some C compiler with a working C standard library.

03:24.000 --> 03:27.000
So, even the tiny CC will work.

03:27.000 --> 03:32.000
And what we do is all of those two chains here are actually built from source.

03:32.000 --> 03:40.000
So, we didn't reinvent the wheel. We used the existing build descriptions for GCC Make or CMake for Clang.

03:40.000 --> 03:49.000
And our build system basically takes care of orchestrating the build and calling those foreign build systems.

03:49.000 --> 03:54.000
And yeah, you might have noticed, Make and CMake are not part of our initial binary seed.

03:54.000 --> 03:57.000
So, we have to Bootstrap those first.

03:57.000 --> 04:00.000
This is also what our build system takes care of in this project.

04:00.000 --> 04:13.000
And so, what we do basically is we do on-demand Bootstrap of all the necessary tools during this process to make sure that we have everything that we need in the next steps to do Bootstrapping of the next tool chains.

04:14.000 --> 04:24.000
And by doing so, we basically unfold the minimal Linux distribution on the fly that is barely enough to just build the tool chains that we are actually interested in.

04:24.000 --> 04:30.000
And yeah, this minimal Linux distribution is what we're referring to as the build distribution.

04:30.000 --> 04:37.000
All right, next I would like to talk a little bit about what patches did we apply to patch up GCC 4.7.

04:37.000 --> 04:41.000
Well, most of them are actually maintenance patches and backports.

04:41.000 --> 04:48.000
So, from newer GCC versions, so in the square brackets you see the GCC versions where we backported those commits from.

04:48.000 --> 04:52.000
So, in the PDF those are clickable links, brings you directly to GitHub.

04:52.000 --> 04:59.000
And yeah, just to mention a few, so the largest commit was the general Muzzle support.

04:59.000 --> 05:02.000
And yeah, this is just an example here.

05:02.000 --> 05:04.000
Of course, the commit is much longer.

05:05.000 --> 05:12.000
This introduced the entire macro infrastructure that is actually necessary for GCC to work with Muzzle.

05:12.000 --> 05:17.000
Another interesting commit was the actual linker support for Muzzle.

05:17.000 --> 05:27.000
So, it adds this magic string here which is the hard coded path where GCC expects the program interpreter to be located.

05:28.000 --> 05:35.000
But much more interestingly though is how did we patch up reproducibility for GCC 4.7.

05:35.000 --> 05:45.000
Well, if you use our build system or any other modern build system as a build orchestrator, they usually build in isolation.

05:45.000 --> 05:54.000
So, all of the stuff that runs in the action, so the make command, the make binary, everything that is needed to get the job done,

05:54.000 --> 05:57.000
is actually located in an isolated directory.

05:57.000 --> 06:01.000
It could be a temporary directory at a seemingly random path.

06:01.000 --> 06:04.000
It could also be located in the user's home directory.

06:04.000 --> 06:09.000
And there's a problem, for instance, yeah, those two binaries you heard about it today already,

06:09.000 --> 06:14.000
and CC1, the C compiler, and CC1 plus the C plus plus compiler, they contain checksums.

06:14.000 --> 06:18.000
And those checksums are computed from many things,

06:18.000 --> 06:23.000
and parts of that are the path of the linker that was actually used.

06:23.000 --> 06:29.000
And because we built in isolation, the linker is also located in this temporary isolated directory,

06:29.000 --> 06:33.000
and that path is seemingly random and finds its way in the final checksum.

06:33.000 --> 06:40.000
And the other problem is that the relevant object files for linking those binaries are also hashed to compute this checksum.

06:40.000 --> 06:46.000
And well, the object files contain debug information and therefore also contain somehow the build directory.

06:46.000 --> 06:52.000
So, we needed to patch that as well in order to compute a reproducible checksum

06:52.000 --> 06:55.000
that is independent of the build directory.

06:55.000 --> 06:58.000
So, which is actually fairly simple.

06:58.000 --> 07:02.000
So, we just made sure that the linker, we know the linker, we control the linker,

07:02.000 --> 07:05.000
so it's actually not necessary to hash the full path.

07:05.000 --> 07:10.000
So, we just stripped the path by some constants and replace it with some constant string.

07:10.000 --> 07:16.000
And of course, we copy the objects that are relevant during the process to some temporary directories,

07:16.000 --> 07:21.000
stripped them from any debug information using strip for target, of course,

07:21.000 --> 07:25.000
and then use those hashed those to compute the final checksum.

07:25.000 --> 07:32.000
So, at the end what we get, we still have a meaningful checksum that somehow represents how those binaries were built,

07:32.000 --> 07:38.000
while still being reproducible in the sense of being independent of the build directory.

07:38.000 --> 07:44.000
And all of those patches that I just showed will then be automatically applied during our bootstrap process.

07:44.000 --> 07:47.000
So, what is the process? How does it look like?

07:47.000 --> 07:54.000
So, we have actually multiple stages to, until we end up with the modern compilers that we actually want to build,

07:54.000 --> 07:58.000
because of time limitations I will only go into details of the very first stage.

07:58.000 --> 08:02.000
So, we start off with just having core utils, a shell and some C compiler.

08:02.000 --> 08:07.000
And the very first thing that we do is we bootstrap certain parts of busybox,

08:07.000 --> 08:14.000
because it includes very important tools that the auto tools and the auto config scripts later will need.

08:14.000 --> 08:17.000
And we only restrict to those very specific parts.

08:17.000 --> 08:23.000
So, grab find, say it for instance, and of course we need patch for patching GCC later.

08:23.000 --> 08:27.000
And with those tools at hand now, we can now bootstrap make.

08:27.000 --> 08:30.000
Make can be built with make, of course, but they also have a bootstrap path.

08:30.000 --> 08:34.000
Luckily for us, there's a shell script and with a little bit of magic,

08:34.000 --> 08:39.000
we end up getting the make binary and now we have make build system available.

08:39.000 --> 08:42.000
And then together with those tools and the make build system,

08:42.000 --> 08:51.000
we can bootstrap the archiver from the bin utils sources and then we also have an archiver available for producing static libraries.

08:51.000 --> 08:55.000
Okay, now we can do the first real build.

08:55.000 --> 09:00.000
So, we can build with those at hand, we can now build latest bin utils,

09:00.000 --> 09:07.000
the normal way it's meant to be built, configure and make, and then we can patch GCC and build GCC.

09:07.000 --> 09:12.000
If you're interested in running this on your machine, it should work on any x86-64-bit Linux system.

09:12.000 --> 09:16.000
You only have to install just build, clone this project and run this command.

09:16.000 --> 09:21.000
It should give you a working GCC 4.7 installation.

09:21.000 --> 09:24.000
Okay, so let me wrap up the talk.

09:24.000 --> 09:26.000
So, we tested that on many systems.

09:26.000 --> 09:30.000
It should work on any x86-64-bit Linux system.

09:30.000 --> 09:34.000
We also tried to test it on very different systems like NixOS,

09:34.000 --> 09:37.000
where actually everything is located at some custom path.

09:37.000 --> 09:43.000
We also tried very reduced images that only contain a tiny cc and a muslin libc.

09:43.000 --> 09:49.000
And with our project and together with our own build system,

09:49.000 --> 09:54.000
you can easily integrate, if you have a C++ project and use our build system,

09:54.000 --> 09:57.000
you can easily import this tool chain into your project.

09:57.000 --> 10:03.000
And then you can make the tool chain a committed dependency to your project,

10:03.000 --> 10:05.000
which has several advantages.

10:05.000 --> 10:07.000
Of course, it's easier to set up for the user.

10:07.000 --> 10:10.000
He doesn't need to have a certain C++ compiler installed.

10:10.000 --> 10:13.000
You can just clone your project, run build,

10:13.000 --> 10:19.000
and then the first thing that happens is the tool chain is being built.

10:19.000 --> 10:21.000
And don't worry about compile times.

10:21.000 --> 10:23.000
Of course, bootstrapping the tool chain takes a while,

10:23.000 --> 10:25.000
but this only needs to be done once.

10:25.000 --> 10:29.000
So the next time you build the tool chain is like a static part of your dependency chain

10:29.000 --> 10:33.000
that doesn't change, so it will come from cache.

10:33.000 --> 10:36.000
Of course, if the tool chain is committed to your project's history,

10:36.000 --> 10:38.000
also git bisects are easier.

10:38.000 --> 10:42.000
And we can even show, if you do it right,

10:42.000 --> 10:47.000
that you can predict the binary hashes of the binaries that your project produces.

10:47.000 --> 10:50.000
Because you have a very confined tool chain,

10:50.000 --> 10:52.000
you know exactly what the output should be.

10:52.000 --> 10:56.000
If you use the Moodle, Lib C, stripping, everything using static linking.

10:56.000 --> 11:01.000
We have a demo application showcasing that.

11:01.000 --> 11:05.000
We can predict binary hashes for this project

11:05.000 --> 11:09.000
that should run on every x86-64-bit lingo system.

11:09.000 --> 11:10.000
All right.

11:10.000 --> 11:14.000
Last thing, I would like to encourage everyone who's interested in that

11:14.000 --> 11:18.000
to just install just build and try those commands yourself.

11:18.000 --> 11:20.000
It will take about 30 minutes.

11:20.000 --> 11:22.000
If it doesn't work on your machine, please let us know,

11:22.000 --> 11:27.000
because this is super valuable information for us to make this process even more stable.

11:27.000 --> 11:28.000
All right. That's all.

11:28.000 --> 11:29.000
Thank you very much.

11:29.000 --> 11:30.000
Thank you.

11:30.000 --> 11:41.000
And we will allow for maybe three minutes of Q&A because we started late.

11:41.000 --> 11:46.000
And actually, I want to start with one question from the Matrix online channel

11:46.000 --> 11:49.000
because give them a chance to answer some of the questions.

11:49.000 --> 11:53.000
So Ismail Luceno asks if there is any collaboration with OpenBSD

11:53.000 --> 11:58.000
because they have been maintaining their own fork also of GCC 4.7, I guess,

11:58.000 --> 12:00.000
because of the C++.

12:00.000 --> 12:03.000
Okay. No, there's no collaboration.

12:03.000 --> 12:07.000
So the question was, is there any collaboration with OpenBSD?

12:07.000 --> 12:08.000
Yeah, very good.

12:08.000 --> 12:09.000
Okay.

12:09.000 --> 12:12.000
Because they maintain their own fork of GCC 4.7.

12:12.000 --> 12:14.000
No, there is not.

12:14.000 --> 12:16.000
This is actually a good question.

12:16.000 --> 12:18.000
I haven't heard about that before.

12:18.000 --> 12:22.000
So this is already valuable input for us.

12:22.000 --> 12:23.000
Okay.

12:23.000 --> 12:25.000
Got a question?

12:25.000 --> 12:33.000
Is this partly in the timing for things like bootstrapping for trusting trust at a time?

12:33.000 --> 12:40.000
What were your tries to avoid the possibility of your compiler to be supported?

12:40.000 --> 12:42.000
I didn't recognize it.

12:42.000 --> 12:43.000
Trusting?

12:43.000 --> 12:47.000
Trusting trusts, can you enrich your model to remember

12:47.000 --> 12:51.000
and then you should think of where you could support the compiler,

12:51.000 --> 12:59.000
you could insert an actor, compile it in such a way that you compile a source code

12:59.000 --> 13:04.000
and then recompile itself as high an actor and define the ring, but not present in the source code?

13:04.000 --> 13:05.000
Okay.

13:05.000 --> 13:06.000
Okay.

13:06.000 --> 13:10.000
It's pretty hard to repeat that question for me.

13:11.000 --> 13:13.000
I may be just in paraphrase.

13:13.000 --> 13:14.000
Yeah.

13:14.000 --> 13:15.000
Okay.

13:15.000 --> 13:20.000
So to ensure the question was whether this is security related.

13:20.000 --> 13:23.000
Yes, in some extent it is security related.

13:23.000 --> 13:32.000
So one idea is to have the possibility, if you build reproducibly in a way that you can say,

13:32.000 --> 13:37.000
okay, this source code compiles to this binary and will have this hash,

13:37.000 --> 13:40.000
pretty much independently of the system you're building on,

13:40.000 --> 13:42.000
of course there are some restrictions,

13:42.000 --> 13:47.000
that gives the opportunity to say, well, we can basically prove that this binary originates

13:47.000 --> 13:49.000
from that source code and that source code alone.

13:49.000 --> 13:52.000
That is actually also one of the motivations.

13:52.000 --> 13:53.000
Yes.

13:54.000 --> 13:56.000
It looks like typed up.

13:56.000 --> 13:57.000
How we got?

13:57.000 --> 13:58.000
One more question.

13:58.000 --> 13:59.000
One more.

13:59.000 --> 14:02.000
Do we have the next speaker in the room?

14:02.000 --> 14:04.000
Our guy finding.

14:08.000 --> 14:09.000
So, yeah.

14:09.000 --> 14:11.000
I was surprised that it's machine dependent.

14:11.000 --> 14:15.000
I wonder why different architectures aren't easily done.

14:16.000 --> 14:21.000
So the question was why it is machine dependent and different architectures weren't done.

14:21.000 --> 14:26.000
The reason is just we were focusing on x86, 64-bit Linux

14:26.000 --> 14:29.000
because it's the most widespread right now.

14:29.000 --> 14:34.000
And it's also quite of work to patching GCC up to make that happen.

14:34.000 --> 14:38.000
So we basically just not had the time to look into other architectures.

14:38.000 --> 14:40.000
But we already have it on our to-do list.

14:40.000 --> 14:43.000
We want to at least support ARM 64-bit.

14:43.000 --> 14:45.000
And then let's see where we come from there.

14:48.000 --> 14:49.000
All right.

14:51.000 --> 14:53.000
I guess we have to go.

14:53.000 --> 14:54.000
Yeah, then.

14:55.000 --> 14:59.000
So at the end of this process you get C++ compiler,

14:59.000 --> 15:01.000
but it is an older C++ compiler.

15:01.000 --> 15:02.000
Yes.

15:02.000 --> 15:06.000
I was just wondering like how many stepping stones are there to get to the latest?

15:06.000 --> 15:07.000
All right.

15:07.000 --> 15:11.000
So the question was that after the bootstrap process of stage zero,

15:11.000 --> 15:13.000
we just have GCC 4.7.

15:13.000 --> 15:18.000
This is a quite old compiler and what other steps are necessary to reach modern compilers.

15:18.000 --> 15:19.000
This is a very good question.

15:19.000 --> 15:20.000
Yes.

15:20.000 --> 15:23.000
So modern compilers usually need C++ 11 support.

15:23.000 --> 15:26.000
GCC 4.7 does not have that.

15:26.000 --> 15:31.000
And so the next stage, so stage one is actually bootstrapping GCC 10.2,

15:31.000 --> 15:38.000
which is to my knowledge the first one almost completely supporting C++ 11.

15:40.000 --> 15:41.000
4.8?

15:41.000 --> 15:42.000
Is it all right?

15:42.000 --> 15:43.000
Okay.

15:43.000 --> 15:46.000
So current GCC can still be bootstrapped with GCC 4.8.

15:46.000 --> 15:47.000
Oh, okay.

15:47.000 --> 15:48.000
Okay.

15:48.000 --> 15:50.000
But not that clear.

15:52.000 --> 15:55.000
Okay, but we definitely need one more step.

15:56.000 --> 16:02.000
And yeah, we got that covered currently with GCC 10.2 is the step stage one.

16:02.000 --> 16:04.000
And then from there we can go on.

16:04.000 --> 16:07.000
So don't need more than one step after 10 years.

16:07.000 --> 16:08.000
So is that okay?

16:08.000 --> 16:09.000
Yeah, exactly.

16:09.000 --> 16:10.000
Yeah.

16:10.000 --> 16:15.000
And I guess the advantage of picking a later GCC version is that we don't have as much

16:15.000 --> 16:18.000
patching for new back ends and configurations,

16:18.000 --> 16:21.000
and stuff like that because that's then all.

16:21.000 --> 16:24.000
And it looks shiny new.

16:24.000 --> 16:27.000
And it's still maintained, GCC 10.2.

16:27.000 --> 16:30.000
Yeah, and you would help these main things.

16:33.000 --> 16:34.000
You're the next.

16:34.000 --> 16:35.000
Okay.

16:35.000 --> 16:36.000
I hope that'll be the end.

16:36.000 --> 16:37.000
I'm sorry.

16:37.000 --> 16:38.000
Okay.

16:38.000 --> 16:39.000
Thank you, Arvid.

16:39.000 --> 16:40.000
Thank you, Arvid.

16:45.000 --> 16:46.000
Could you help me with this?

16:46.000 --> 16:47.000
Yeah.

16:47.000 --> 16:48.000
I'll cut it off.

16:48.000 --> 16:49.000
I'll see you there.

16:49.000 --> 16:50.000
Thanks.

16:54.000 --> 16:55.000
Thanks.

