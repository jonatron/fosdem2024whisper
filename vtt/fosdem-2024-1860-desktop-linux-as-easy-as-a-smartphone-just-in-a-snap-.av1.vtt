WEBVTT

00:00.000 --> 00:15.700
So, I'm Tiel Kampeta, leader of Open Printing, and by making a snap package of cups, I've

00:15.700 --> 00:21.460
learned snapping and done and made a lot of experience in snap.

00:21.460 --> 00:31.460
So, I got a snap enthusiast and I'm also working at Canonica and this way came up to giving

00:31.460 --> 00:37.700
also workshops in snap and so on and giving talks about snap.

00:37.700 --> 00:47.320
And here on the first step, I want to tell once what snap is and how it works and second

00:47.320 --> 00:55.680
about an old snap linux distribution Ubuntu Core and Ubuntu Core desktop and to show

00:55.680 --> 01:05.920
that snap gives you something a little bit like how smartphones work and so it makes it

01:05.920 --> 01:13.560
makes it very easy for the end user to maintain their system.

01:14.560 --> 01:20.560
So, what the hell are snaps and why should I use them?

01:20.560 --> 01:34.360
So, if you have an open source project, usually they develop some application and this application

01:34.360 --> 01:38.260
is published as its source code.

01:38.260 --> 01:44.260
For most users, it is much too difficult to download the source code and to compile it.

01:44.260 --> 01:48.660
Usually, they even do not have the compilers installed and do not know what they have to

01:48.660 --> 01:52.020
install to get the compilers.

01:52.020 --> 01:59.980
And so, there are other distributions, they fortunately make distro packages and naturally

01:59.980 --> 02:07.100
there are so many applications that the distributions do not cover everything so you cannot be sure

02:07.100 --> 02:14.460
that you actually get a distro package and also the distributions they make and update

02:14.460 --> 02:21.380
the distro packages until they release the distro version and after that for that distro

02:21.380 --> 02:27.900
version they do not make new versions of that package and so this is a little bit frustrating

02:27.900 --> 02:36.580
for users and this can easily turn users away and so this is a nightmare.

02:37.060 --> 02:39.060
A little bit.

02:39.060 --> 02:40.060
Yes.

02:40.060 --> 02:43.620
And so, there is a solution.

02:43.620 --> 02:52.780
It is when you have probably a smartphone and there you can easily download and install

02:52.780 --> 03:02.300
applications via the Google Play Store or the Apple App Store and you simply and it

03:02.300 --> 03:08.380
will be independent whether you have a Samsung, a Pixel or something else with all somewhat

03:08.380 --> 03:10.380
different Android versions.

03:10.380 --> 03:16.380
It is the same applications which you get from the Google Play Store.

03:16.380 --> 03:17.380
Yes.

03:17.380 --> 03:25.460
And so, and you know also Canonica, they have also created an operating system, Ubuntu Touch,

03:25.460 --> 03:27.860
a smartphone operating system.

03:27.860 --> 03:36.540
They are not doing this anymore but we have a UB port booth because the community continued

03:36.540 --> 03:40.660
and they learned from that.

03:40.660 --> 03:44.820
They did not throw everything or the experience away.

03:44.820 --> 03:53.020
They developed based on starting from the ideas of their click package format, a package

03:53.140 --> 04:01.900
format for computers for embedded and servers in the beginning but later also for desktop

04:01.900 --> 04:04.780
and that is Snap and Snap.

04:04.780 --> 04:10.660
We have a Snap Store and we can install applications on different distros, on different distro

04:10.660 --> 04:11.660
versions.

04:11.660 --> 04:20.980
We have a form of distro independent packaging for computers running Linux as IoT server or

04:20.980 --> 04:21.980
desktop.

04:22.980 --> 04:26.580
And by the way, Snap is 10 years old.

04:26.580 --> 04:33.060
It started in 2014.

04:33.060 --> 04:40.540
And so, we have a sandbox packaging which means every application is in the security

04:40.540 --> 04:48.820
capsule and one application cannot access the space of the other and cannot access the

04:48.820 --> 04:49.820
system.

04:50.660 --> 05:01.060
And it is operating system distribution independent because these snaps, they bring all the dependencies,

05:01.060 --> 05:06.020
the libraries you need and so, so you do not rely on the distribution where you install

05:06.020 --> 05:15.020
it and so, it installs on many different distributions like Ubuntu, Debian, Zoozer,

05:15.020 --> 05:18.020
Quartet, Windows or whatsoever.

05:18.020 --> 05:27.340
And your application, as I say, for the sandbox packaging, we have a security shell.

05:27.340 --> 05:38.540
This means every application is in a capsule made of up armors, sac comp and name spaces

05:38.540 --> 05:46.460
which prevents it from accessing the space of other applications, of other snaps or of

05:46.460 --> 05:49.740
the operating system.

05:49.740 --> 06:00.220
And you need, and you need for intercommunication, you need very well defined interfaces.

06:00.220 --> 06:05.860
You must define when you create a Snap which interfaces for the outside communication you

06:05.860 --> 06:11.540
want to use and only through these interfaces your Snap can communicate.

06:11.540 --> 06:19.620
For example, network Cups or Dnssd, Avahaya or so on.

06:19.620 --> 06:30.300
And so, it is very well defined what is, how the Snap, how the application in the Snap,

06:30.300 --> 06:34.220
the Snap application can communicate with the outside world.

06:34.220 --> 06:37.340
So this gives you security and privacy.

06:37.340 --> 06:45.060
And if there are interfaces which are dangerous, which can modify the outside system for example

06:45.060 --> 06:54.020
or read data which could be private, then these interfaces are considered dangerous

06:54.020 --> 06:59.540
and they can, and you can only put some, when you put such snaps which connect dangerous

06:59.540 --> 07:02.340
interfaces into the Snap Store.

07:02.340 --> 07:06.820
You must have to connect them by hand or you have, or you need a special permission of

07:06.820 --> 07:12.940
the Snap Store for those connecting automatically.

07:12.940 --> 07:16.660
And with this we can trust third party apps.

07:16.660 --> 07:24.100
We are not for a distribution, we are not needing any more that we can only trust our

07:24.100 --> 07:30.740
own distro maintainers and need everything packaged by our own distro maintainers.

07:30.740 --> 07:38.780
We can trust third party packages and so we can access a lot of different applications

07:38.780 --> 07:49.140
like with the Google Play Store and the smartphone.

07:49.140 --> 07:57.780
So and Snap has also some special features which perhaps other sandbox packaging methods

07:57.780 --> 07:59.940
not necessarily have.

07:59.940 --> 08:03.700
And the first thing is don't fear the diamonds.

08:03.700 --> 08:05.820
We are snapping them too.

08:05.820 --> 08:14.900
Snap allows packaging, diamonds and system applications.

08:14.900 --> 08:20.780
And also even what we will see later some kernel boot system desktop environment.

08:20.780 --> 08:23.180
You can snap everything.

08:23.180 --> 08:29.260
And one thing is also packaging can now move from distros to upstream which means instead

08:29.260 --> 08:36.140
of 10 distros all by themselves reinventing the wheel by packaging for themselves the

08:36.140 --> 08:40.740
upstream can package and test once and all distros can use it.

08:40.740 --> 08:50.420
And so employees of distro vendors can concentrate on the core distro.

08:50.420 --> 08:58.500
And we can also and we will also see how it goes into immutable distros all snap distros

08:58.500 --> 09:05.420
in our case all snap distros Ubuntu Core and a snap one can a little bit consider an immutable

09:05.420 --> 09:14.220
application because you have also the file system of the snap and which is also read

09:14.220 --> 09:15.220
only.

09:15.220 --> 09:18.580
And this we will see now.

09:18.580 --> 09:21.700
Now we look into what snap how snaps work.

09:21.700 --> 09:29.780
The snap core the snap file system the applications file system is a compressed GPG signed read

09:29.780 --> 09:35.340
only squash FS image which we simply mount we even do not uncompress it.

09:35.340 --> 09:42.020
Therefore we save a lot of memory, lot of storage and also memory.

09:42.020 --> 09:49.740
And it includes also the metadata of the snap and when we install the snap also a writable

09:49.740 --> 09:57.820
area of a for the file in the file system inside the capsule of the snap is defined.

09:57.820 --> 10:04.620
So that the application can write to somewhere.

10:04.620 --> 10:11.500
And we have five types of different snaps we have apps we have call us snaps we have which

10:11.500 --> 10:16.220
is the operating system call we have forget the snaps which is the boot system we have

10:16.220 --> 10:23.220
kernel snaps and we have desktop session snaps like Gnomok KDE or so.

10:23.220 --> 10:30.860
And we can and when they are updated we can handle binary diffs so that we can much more

10:30.860 --> 10:41.700
much more quickly we can have much quicker downloads.

10:41.700 --> 10:49.140
And they are available for most distros you can install snap D on many distros and they

10:49.140 --> 11:00.700
exist since 14.04 Ubuntu it is default already included snap D since Ubuntu 14.04 10 years.

11:01.540 --> 11:15.180
And as I said security we have the GPG signed read only file system for the application

11:15.180 --> 11:19.340
so it cannot be modified by any malware.

11:19.340 --> 11:30.660
And we have the confinement app armor sec comp and name spaces and the executables are called

11:31.620 --> 11:38.580
for the snap D snap confirm so that the security is enforced.

11:38.580 --> 11:47.020
And the snaps are route safe due to the encapsulation we can run an application as route but it

11:47.020 --> 11:53.100
cannot access it cannot modify anything in the environment because it's in the capsule.

11:53.100 --> 11:56.660
And so damon snaps the damon's one is good.

11:56.660 --> 12:01.980
And so we do not need any special users and special groups.

12:01.980 --> 12:08.700
And they are storage efficient due to the case that when we mount the immutable file

12:08.700 --> 12:14.900
system of them that this file system is not actually uncompressed.

12:14.900 --> 12:24.300
And we have also additional tricks so called content and once the course and the course

12:24.420 --> 12:30.740
that contains the core operating system lip GG lip and all the standard libraries.

12:30.740 --> 12:37.580
So this is mounted into the capsule office map to this course map so that the essential

12:37.580 --> 12:41.700
parts of the operating system system are available for the snap.

12:41.700 --> 12:46.660
And we have content provider snap for example for GNOME with all GNOME libraries for KDE

12:46.660 --> 12:53.340
with all KDE libraries so that this can be shared by the snaps too.

12:53.380 --> 13:00.340
And as I said safe interfaces and dangerous interfaces and interface between snaps or between

13:00.340 --> 13:07.060
the snap and the core system then the snap D snap is the providing snap.

13:07.060 --> 13:17.220
We have slots and plugs yes we have slots and plugs for connecting the snap for connecting

13:17.220 --> 13:24.100
between two snaps or between one snap and the system itself.

13:24.100 --> 13:32.500
And only due to and they are connected plug with slot and this gives a defined connection

13:32.500 --> 13:39.500
for communication to the outside of the snap and you get safe interfaces when you use a

13:39.500 --> 13:45.260
safe interface and upload your snap to the snap store and someone installs it this interface

13:45.300 --> 13:47.740
is connected automatically.

13:47.740 --> 13:53.580
And a dangerous interface when the user downloads a snap which uses a dangerous interface you

13:53.580 --> 14:00.900
usually have the user usually has to connect it by hand or the snap store has given special

14:00.900 --> 14:05.220
permission then this is also connected automatically.

14:05.500 --> 14:15.940
And now for the updating the updating is when you update the snap the new snap is downloaded

14:15.940 --> 14:19.260
and mounted but the old snap is not deleted.

14:19.260 --> 14:26.980
So and the new snap is in a new immutable file system so the new snap is installed and

14:26.980 --> 14:32.180
put in use and if you have any problems with it because the old snap always the previous

14:32.180 --> 14:37.060
one is not deleted you can easily step back.

14:37.060 --> 14:45.860
And so it's not a big problem when a new version introduces a bug and does not work you can

14:45.860 --> 14:50.900
easily step back to the previous one but the previous of the previous that is actually

14:50.900 --> 14:51.900
deleted.

14:52.180 --> 15:05.940
So and a snap started it is it was a part of for Ubuntu core for the Ubuntu core operating

15:05.940 --> 15:07.740
system by IoT.

15:07.740 --> 15:14.740
At Canonica we wanted to have an IoT operating system Ubuntu core and this we have created

15:14.740 --> 15:22.820
already back in 2014 as an immutable operating system with snap as the packaging format.

15:22.820 --> 15:28.300
This is the start of snap and the immutable operating system it has not only one single

15:28.300 --> 15:37.940
core as most others have it has some modules in the operating system itself.

15:37.940 --> 15:46.940
It has the kernel is one snap the gamut which is the boot system and the definition of partitioning

15:46.940 --> 15:48.700
and so on.

15:48.700 --> 15:54.420
This is also a snap and the core operating system these are the base libraries I mentioned

15:54.420 --> 16:04.020
already for the snaps Glib, Libc and whatever is a third snap and these three snaps give

16:04.100 --> 16:10.740
you the operating system which you can boot they come on one image but you can once installed

16:10.740 --> 16:17.780
you can update and replace them separately for example replacing the kernel by a gaming

16:17.780 --> 16:19.620
kernel or so.

16:19.620 --> 16:29.740
And these and onto these where once you have these three you install application snaps.

16:29.740 --> 16:38.140
These are the ones which I mentioned an application which is packaged as snap.

16:38.140 --> 16:46.620
So and this is the Ubuntu core operating system and the Ubuntu core and updates are also modular

16:46.620 --> 16:55.500
like with the application snaps when you update a snap of the Ubuntu core operating system

16:56.460 --> 17:03.500
for example the core snap then the new core snap is loaded and activated but the old

17:03.500 --> 17:10.900
one is not deleted so you can step back and if you update the kernel it can even step

17:10.900 --> 17:14.940
automatically back if the kernel does not succeed to boot.

17:14.940 --> 17:20.700
So when it hangs when it tries to boot and hang somewhere gives a kernel panic then it

17:20.700 --> 17:25.500
automatically steps back and reboots.

17:25.500 --> 17:31.340
So if there's a problem if you update into a bad kernel the boot simply takes longer

17:31.340 --> 17:36.860
and you are back in the old kernel.

17:36.860 --> 17:48.540
And now this Ubuntu core from 2014 in 2023 was extended to Ubuntu core desktop so we

17:48.620 --> 17:56.860
take the Ubuntu core and onto it we put a desktop by an additional snap which is the

17:56.860 --> 18:00.140
Ubuntu desktop session snap.

18:00.140 --> 18:03.020
It is currently at Canonica.

18:03.900 --> 18:04.940
Thank you.

18:04.940 --> 18:14.700
At Canonica it is a wayland with GNOME but as it's an exchangeable snaps for example

18:15.260 --> 18:25.660
Ubuntu 4 can snap KDE for example and all the other flavors can also contribute a desktop

18:25.660 --> 18:30.300
sessions snap and this way we get flavors of Ubuntu core desktop.

18:30.300 --> 18:38.380
And we have the application which this time can be desktop applications and it is distributed

18:38.380 --> 18:47.660
also as an image and usually with the base with gadget kernel and core system but in the

18:47.660 --> 18:55.100
image you have also the desktop session and some initial apps so that you have a complete

18:55.100 --> 18:57.740
desktop the user can start with.

18:57.740 --> 19:04.460
It's all in an image but once the image is installed as usual you can update and replace

19:04.460 --> 19:06.300
everything separately.

19:06.300 --> 19:13.020
A little bit like Lego pieces or like a framework laptop and software.

19:15.580 --> 19:26.380
And now you would think how do I do development on a system where everything is encapsulated

19:26.380 --> 19:27.500
and separated.

19:28.220 --> 19:35.500
What we do there we use LXD containers and do the development in an LXD container.

19:36.300 --> 19:45.180
And so we take an LXD container of operating system we want to develop under and inside

19:45.180 --> 19:54.140
this we compile we want all the tools and so on and test and so on so we do not need

19:54.140 --> 20:00.140
to snap our application which we are developing all the time to be able to test it.

20:01.100 --> 20:10.460
And so this and for this we have a graphical front and named workshop where you can easily

20:10.460 --> 20:17.820
choose which operating system not only Ubuntu but also Rated, R, Suze and whatever and so

20:17.820 --> 20:25.500
you can develop but it needs still some work for example that one can have a snapped IDE

20:26.300 --> 20:30.140
running natively but about working on the containers.

20:34.620 --> 20:42.380
And what we have yes what we have still to be done to make the system perfect and complete

20:42.380 --> 20:49.980
is once for gaming we need NVIDIA proprietary driver support this is still is still in the

20:49.980 --> 20:57.660
works and not not yet ready and for productivity we need to make the printer setup tools work

20:57.660 --> 21:05.580
with the new Cups 3.x what I have mentioned in my first talk today in the morning so that in

21:05.580 --> 21:14.460
as in Ubuntu Core desktop when Cups is encapsulated it cannot access to classic Cups drivers outside

21:14.460 --> 21:22.780
of Cups so it can only access to IPP printers and then we need to change the printer setup tools

21:23.660 --> 21:30.700
we also need to for productivity to introduce scanner applications so that we can add scanner

21:30.700 --> 21:39.340
drivers to Ubuntu Core desktop and we need to improve the development part so that we can have

21:39.660 --> 21:49.020
a snap of an IDE and then this snap can access the files and do the do the operations on the

21:49.020 --> 22:03.740
LXD containers in which we are developing and what still is missing is TPM full disk encryption

22:04.540 --> 22:15.660
needs still to be done and remote remote management of of of leads with canonical landscape is

22:17.820 --> 22:25.820
the secure and modular Ubuntu Core desktop is also an ideal distribution for for for companies who

22:25.820 --> 22:34.380
have many computers and want to have and want to have an easy maintenance of the systems so

22:37.020 --> 22:48.140
so remote remote maintaining is also an important part and then Active Directory login also for

22:48.140 --> 22:57.100
the enterprise desktop and the infrastructure to make it available as a distro that we make

22:57.660 --> 23:06.940
the ISOs that we have testing testing plans and testing scripting CI stable release tracks and

23:06.940 --> 23:17.820
documentation and so on but this is all planned for the next month at Canonica

23:17.820 --> 23:23.420
that these steps will be done so I think I'm also yes

23:27.660 --> 23:37.580
yes I yes I have it now yes that was it you can also see snapcraft.io there you find the snap

23:37.580 --> 23:45.020
there you find everything about snap there we have also a forum for questions and here

23:45.580 --> 23:51.900
are also some links and are there any questions we actually don't have time for questions

23:53.340 --> 23:57.260
that was that was it for you but thank you so much for your talk

24:03.580 --> 24:10.060
thank you and now we have a demo of Ubuntu Core desktop here behind that door

24:11.020 --> 24:20.220
and there you can if you have questions there are there is me there is Philip Kavish community

24:20.220 --> 24:28.380
maintain community manager of Canonica and there we can talk more about snap and Ubuntu Core desktop

24:28.380 --> 24:29.660
fantastic thank you so much

24:33.260 --> 24:37.260
thanks

24:40.060 --> 24:40.560
you

