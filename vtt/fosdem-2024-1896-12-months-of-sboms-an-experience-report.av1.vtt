WEBVTT

00:00.000 --> 00:29.640
Right, I'm live. I'm green. Right, welcome to the post-lunchtime slot. Okay,

00:29.640 --> 00:38.280
some of you know me because I was here last year and basically I want to say what we've

00:38.280 --> 00:44.880
done for 12 months with S-bombs and it came out as an idea is about change. So I'm going to

00:44.880 --> 00:50.480
take explain about change. Some of it is about my tooling that's changed but a lot of it is

00:50.480 --> 00:57.360
about observations. A bit about me. I'm from Manchester. That's where that B is. I get asked

00:57.360 --> 01:02.760
about where's that picture. So that is a security hub for innovators for startups in

01:02.760 --> 01:08.640
Manchester trying to grow the ecosystem in the north. There's more than just London about tech,

01:08.640 --> 01:16.520
please. Normally most weekends I'm running around muddy fields at this time of the year so I've

01:16.520 --> 01:22.560
had a weekend off running muddy fields. My background is mission critical systems. For 40 years I was

01:22.800 --> 01:27.080
delivering mission critical systems. Think about big complex systems. So what Nicole was

01:27.080 --> 01:31.360
saying was my bread and butter. Those are my, those are what I used to worry about. Now I'm going

01:31.360 --> 01:36.680
to start up and I'm known as Mr S-bomb in Manchester. Didn't know what S-bombs were 12

01:36.680 --> 01:43.080
months ago. They do now. It's all about a tool called CVEbin tool. So this has been presented a

01:43.080 --> 01:49.520
number of times and it's a binary scanner. It came from Intel and they wanted to understand what

01:49.600 --> 01:56.040
binaries were included in their deliverables and were they vulnerable. Common question. It's

01:56.040 --> 02:02.000
open source but one of the things we've done is become a Google Summer of Code project and each

02:02.000 --> 02:08.120
year we've added more features and I've been pushing the S-bomb world in there. So we added S-bombs,

02:08.120 --> 02:16.000
then we've added CVS, like Cizekirv. We've added EPSS this year. We do a very trivial triage. Let's

02:16.040 --> 02:22.120
say we might improve that with VEX, the world of VEX and it's got a thousand stars this week. It's

02:22.120 --> 02:28.600
very good. Open SSF best practice is interesting. I'm not going to work for Intel. It's a challenge

02:28.600 --> 02:33.200
sometimes in terms of do you have multiple maintainers and it's a challenge in open source when

02:33.200 --> 02:40.080
it's run by a commercial organization. So generally you see the reeds, calendar dates tend to trigger

02:40.080 --> 02:45.400
on GSOC. We found a little problem this week which is why we didn't release it this week but

02:45.440 --> 02:51.960
anyway it's very close to having a new version with all the EPSS stuff formally released. And then

02:51.960 --> 02:58.000
there's a tool that I write and I haven't got a thousand stars yet which is a Python generator and

02:58.000 --> 03:05.200
I take the installed Python and work out all the dependencies and work out all the bills. So think

03:05.200 --> 03:10.000
about Python. There's lots of direct dependency. What are those transitive dependencies? I'm

03:10.520 --> 03:18.680
agnostic to which version of S-bomb it is. I've always wanted to be Cyclone and SPDX. Initially I

03:18.680 --> 03:25.160
have written my own parsers and generators. I do want to migrate to the stable versions. It's all

03:25.160 --> 03:31.600
about time. But what I'm pleased about is there's a benchmark. We'll see then and it's the first one

03:31.600 --> 03:37.760
to get a benchmark score of 10 out of 10 which is but they'll tell you explain why you get 10 out

03:37.800 --> 03:46.280
of 10. It's quite hard because the ecosystem needs to play together. And this is what I do. Generally

03:46.280 --> 03:53.200
I just enrich it when I get the time and I've got a bit busy the last six months. So that's why

03:53.200 --> 04:00.400
I've stopped a bit. But anyway. So generally the sort of things we've been doing is adding more

04:00.440 --> 04:08.440
stuff into the package information using SPDX. So trying to get as many of the package attributes

04:08.440 --> 04:14.640
in to the S-bomb because you want enrichment. The more data you have the more usefulness it can be

04:14.640 --> 04:24.520
for the more use cases. That's hard because that data is not readily available. So what have we done?

04:24.520 --> 04:30.200
And this came out as a conversation, you know, a monthly open source meeting that we have and said

04:30.320 --> 04:34.320
it'll be nice to work out how much change do we have. And this is the S-bomb going to tell us what

04:34.320 --> 04:42.440
those changes are. So we put a get up action that runs about two o'clock in the morning. We clean the

04:42.440 --> 04:46.960
virtual environment, clean virtual environment, the bun two. And that's quite an important thing

04:46.960 --> 04:53.320
because that's going to come back later. We then install all the dependencies. And then we generate

04:53.320 --> 04:57.960
the S-bomb in the different forms. So whichever version is the latest flavor will generate. Do it.

04:58.400 --> 05:05.120
And 3.12 will become, I think, maybe this week, tomorrow. But generally we just

05:05.120 --> 05:15.200
ruin it for the supported versions of Python. So a little bit of a digression about Python

05:15.200 --> 05:21.800
dependencies. And it's probably if you went in Node or Java and things like that, you'll have,

05:22.160 --> 05:28.160
everything's got little quirks. The thing about Python is it tells you what the direct dependencies

05:28.160 --> 05:35.640
are. It can tell you a bit about the environment. So if you're working in Windows, you may have

05:35.640 --> 05:40.640
different dependencies than if you're working in another environment. But it says nothing about

05:40.640 --> 05:49.560
the transitive dependencies. How much is hidden? So let's look at the example. So this is quite,

05:49.720 --> 06:00.000
this is a subset of our requirements file. So at the top, you've got AIR at HTTP. It's got a

06:00.000 --> 06:04.760
constraint in the version saying the minimum version we require is 3.74. But it's also got

06:04.760 --> 06:10.000
optional requirements as well. So straight away you've got two potential two ways of installing

06:10.000 --> 06:18.760
AIR HTTP with or without that additional component. You look at beautiful soup, any version will do.

06:20.560 --> 06:27.600
And then you look at these down here, the import lib only installs it if Python version is less than

06:27.600 --> 06:34.400
3.10 and it's got a constraint and similarly the import lib resources again only if it's 3.9.

06:34.400 --> 06:41.320
Because the Python library changes a bit like the early system, the language ecosystem is part of

06:41.360 --> 06:51.320
your partnership. And you can see the number of dependencies gradually change over time as you

06:51.320 --> 06:58.480
add more features. But what you get, that's what you really have, that's the hidden, that's the

06:58.480 --> 07:04.960
iceberg. It looks quite like an iceberg actually. That's one of my tools. And the green are all

07:05.200 --> 07:15.520
the transitive dependencies. Look how deep that is. That was fascinating. Pictures has a thousand

07:15.520 --> 07:22.840
words, I think we all agree. That's not really, if you really zoomed in, I've had to put the license

07:22.840 --> 07:28.720
values as well. That's an interesting thing if you could do some analysis. But actually that's

07:28.800 --> 07:40.400
quite visually, that's quite, that's quite a Iotner. And we've only got 60 packages there. So what

07:40.400 --> 07:45.840
have I observed by looking at all the data we've collected? And I want to look at the context,

07:45.840 --> 07:51.400
the context, a bit about quality, a bit about velocity which was the original thing, what's

07:51.400 --> 07:58.160
about change and then other things that are analyzed that I've discovered. And generally this is all

07:58.240 --> 08:03.840
out of GitHub, so I wrote a little utility to download the file history. So I could then quickly

08:03.840 --> 08:09.280
analyze it locally. And I ended up writing a little tool called S-bomb trend which then created it

08:09.280 --> 08:13.520
into a JSON file so I could then play around with it to generate pretty pictures which you're

08:13.520 --> 08:22.000
going to see. So first thing, there's nothing in any of the S-bombs that tells you it's Python.

08:22.400 --> 08:31.360
Or which version of Python, or which environment of Python. Now maybe Python, maybe FBH theme might,

08:31.360 --> 08:37.520
but that's actually quite important because you're going to see in a minute the difference what that

08:37.520 --> 08:43.680
means. Because if you just get an S-bomb and you don't understand its context, how do you know

08:43.680 --> 08:49.040
where, what, whether this is a real representation of the environment you're using, pick up what we

08:49.040 --> 08:55.040
were saying on the previous one. Cyclone DX has usually defined properties which you could use.

08:56.240 --> 09:03.920
SPDX doesn't yet. You could do comments but it's a bit harder, yes. Yes, I'm sure you could, yeah.

09:04.560 --> 09:09.520
So I use Cyclone DX properties just to say language, language Python, language version,

09:09.520 --> 09:14.800
something. But I think that's quite an interesting thing. It's good as SPDX thea's doing that because

09:14.800 --> 09:22.640
I think we need that is quite an important thing. And this is what you get. If you plot all the

09:22.640 --> 09:30.960
different versions of S-bombs across the year, the higher versions of the older versions of Python,

09:30.960 --> 09:35.760
it stops at p7 in the middle of the year because we stopped supporting it, but you see a trend.

09:35.760 --> 09:40.400
So that's the requirements trend and you see it sort of follows it and then there's a few

09:40.400 --> 09:43.200
other bumps. We didn't change it, the outside world changed.

09:45.520 --> 09:52.720
And sometimes you see it drops and that's because a package ceases using a dependency.

09:56.720 --> 10:00.480
It wasn't obvious until I did the digging up, but that's what that was telling me. It's quite

10:00.480 --> 10:06.800
interesting. So the lower versions have least a bit of a letter of dependency. You can probably

10:06.800 --> 10:11.120
sort of see that with the requirements file, but the requirements file is lost in the S-bombs.

10:11.120 --> 10:22.480
It's not there. So there are differences. Transitive dependencies vary independently of your direct

10:22.480 --> 10:28.880
dependencies. I think you could probably see that, but actually it's quite interesting to see the

10:28.880 --> 10:35.760
evidence. And the later versions of Python have the least dependencies. So that's a good way of saying

10:35.760 --> 10:38.720
don't just update your packages, update your language versions as well.

10:44.320 --> 10:48.000
So let's look at quality of S-bombs and that could probably have a whole

10:48.000 --> 10:53.680
conversation about this and a cold conference about it. So I've just chosen four tools

10:55.520 --> 11:00.640
because they demonstrate four different things. So the SBDX1 which is does it conform to the

11:00.640 --> 11:09.280
NTIA minimum standard. Look at the scorecard which comes from eBay, not the open SNF,

11:09.280 --> 11:13.520
look at something called QS which is from Interlink and look at one from me because it had something

11:13.520 --> 11:21.120
else that I discovered on Friday which was really interesting. So first of all NTIA. We are no

11:21.120 --> 11:26.720
different from day one to day today. We're still the same because we still fail to get all the

11:26.720 --> 11:34.400
suppliers. I would like to see how many people can get that on a real project. You can get that

11:34.400 --> 11:44.240
from small projects but not for real life projects. I think we all recognise that. Then the eBay one,

11:44.240 --> 11:48.640
one of the things they were doing is they were looking at package IDs, goes back to 10 o'clock

11:48.640 --> 11:53.520
call about the pearls and stuff like that. I didn't have pearls at the start of the year.

11:54.480 --> 12:01.680
I don't know. So my score went up. Enrichment, messages enrichment. Good and licenses have

12:01.680 --> 12:11.520
probably got better as well. SPM QS. This is done by Interlink. I don't know where they came from

12:11.520 --> 12:16.320
the idea but they have a whole load of different things they're looking for like licenses. Do you

12:16.320 --> 12:22.320
have other licenses still supported or the deprecated licenses? Do you have checksums for

12:22.320 --> 12:29.040
your packages, etc? That was a target. How can I get a better score as a target I started?

12:30.000 --> 12:37.120
So we get to 9.6. If you go on their website, most of the excluding S-POMP Python are in the

12:37.120 --> 12:45.040
sevens and eights. A lot of the containers are sevens and eights. So I'm quite pleased I can get

12:45.040 --> 12:50.880
to that level. The reason it's not 10 is because of the supplier failings, same as the NTIA changes.

12:52.640 --> 12:59.440
And then I have a tool called an audit. The reason I put that generated this was could you use the S-POMP

12:59.440 --> 13:04.480
to drive policy? So if you wanted to say I've generated an S-POMP and I've got a license like a

13:04.480 --> 13:11.840
GPL and I don't want GPL in the things, can I have a allow list or deny list of licenses,

13:11.840 --> 13:17.120
for example? That was the use case I came up with. But I also do it and I use the latest version of

13:17.680 --> 13:22.800
the products was the other thing I wanted to try and check. So I was getting reasonable number

13:23.760 --> 13:28.080
and the number of checks increased because I had more packages.

13:30.160 --> 13:36.400
Well this is the interesting thing I found. Scan came from last weekend. I scanned it on Friday.

13:37.920 --> 13:45.440
I was expecting to get 100% all the files were latest versions. Four of them got updated last

13:45.440 --> 13:52.720
Tuesday, which is why the green ones so happy. But there were a couple that hadn't changed.

13:55.680 --> 13:59.600
That got me thinking. Why don't packages change?

14:02.160 --> 14:06.720
Pinning. The world of Python is probably not to pin.

14:06.800 --> 14:12.400
They're indirect dependencies. I've no control of those.

14:14.480 --> 14:19.120
And I haven't quite got to the bottom of finding out where the pinning is happening

14:19.120 --> 14:24.720
because they're not even on the direct, the first level of the direct level where they are.

14:25.440 --> 14:29.520
So that was the reason that was there because I did a scan, an S-POMP scan,

14:29.520 --> 14:35.120
and what I got a vulnerability on my RSA. And the reason was I'm using,

14:35.280 --> 14:39.840
not using the latest version of RSA. So that was a weird, that was the sort of,

14:42.320 --> 14:46.720
could you detect that? So that's something that I only just discovered this week,

14:46.720 --> 14:51.920
which I thought was really interesting to share. I mean just if I happen to have that tool.

14:54.400 --> 14:57.920
So NTIA is a good benchmark. It's hard.

15:00.560 --> 15:04.080
Accurate supplier information. I think we all know the challenges of that.

15:05.120 --> 15:08.720
But date of enrichment is good. Can you enrich your desk things? Look for that

15:09.840 --> 15:14.640
threshold. Look at that utopia moment where you get 10 out of 10 for your S-POMPs.

15:15.200 --> 15:18.800
Because the more information you have, the more useful that's going to be for all the different

15:18.800 --> 15:23.520
use cases people are going to use your S-POMPs for. And it is possible.

15:26.640 --> 15:31.200
So this was the original use case. What's changing? What we're changing? What's not changing? Who's

15:31.280 --> 15:43.040
changing what? So the first thing is, and these are all driven by Matplotlib. So they're in

15:43.840 --> 15:49.200
the trend tool. So if you want to play with these as examples you can do. The top is the

15:49.200 --> 15:54.160
number of packages. The red line is the number of changes on a week by week basis.

15:54.400 --> 16:04.880
Every week one package, at least one package changed. At least. Which is good, the ecosystem's live.

16:07.040 --> 16:14.480
Is. Yes. Yes. So but that, you know, it's not, you know, what are the triggers for those changes?

16:15.760 --> 16:19.520
Yeah, some of the, you know, you can see some of the spikes relate to when we, when we did an

16:19.520 --> 16:25.120
update of the requirements. So that's, you know, you can see that. But generally things are changing all

16:25.120 --> 16:32.880
the time. And I was trying to show how to change, what's the, what's the rate of change and things

16:32.880 --> 16:39.680
like that. So this, I came up with this, like, train, train, flat diagram. That is showing a steady,

16:39.680 --> 16:41.680
steady going like that means it's changing every week.

16:44.880 --> 16:49.040
Except for the holiday. What? Except for July and all that. Oh yes. Yeah. Well,

16:49.920 --> 16:55.120
I think we can understand why. Yes. Actually, that's, that's probably quite a thing. Look at time.

16:55.120 --> 16:58.320
Time's actually a driver as well. Does lots of things happen in Christmas? Does lots of things

16:58.320 --> 17:03.200
happen in holiday periods? Yes. Interesting. That's enough. More people work on Christmas.

17:03.840 --> 17:07.040
Yeah. Well, I think we've seen problems where people have released something on Christmas day. And

17:07.040 --> 17:10.880
it's, but yeah. Anyway, that's a really good observation. I haven't thought that. Well, it's good.

17:10.880 --> 17:15.120
So you can see these things. And these are just the ones that have changed more than five times

17:15.120 --> 17:20.880
in a year. Because, you know, that's what 20 odd packages, more than 20 odd packages.

17:22.320 --> 17:26.160
And then if I look at, well, okay, these are the ones that frequently changes.

17:27.760 --> 17:31.520
Quite a few of them are direct dependencies. Why are they changing? Most of them are feature

17:31.520 --> 17:39.200
features, not vulnerabilities. Yeah. But actually, you know, can you find them? And there's one,

17:39.200 --> 17:43.520
a lot that rich. Why did they change? And they actually removed and unmaintained package,

17:43.520 --> 17:45.680
which then got me on another little track, which you're going to see in a minute.

17:47.280 --> 17:52.160
So yeah. Security fixes aren't the drivers for many of these changes for features.

17:57.120 --> 18:02.000
And then if I looked at the direct dependencies, again, okay, they're going up. Some of them are

18:02.000 --> 18:09.440
changing a little bit slower. That's, the case is no longer used. So you've got, again, you're

18:09.440 --> 18:16.160
getting quite a rich picture of change, which then says, if I pinned, first of January or

18:16.160 --> 18:26.560
second of January, I've missed all these changes. A lot of changes. Which may be,

18:26.560 --> 18:30.800
the features may be performance improvements, et cetera. You know, you might want them for good

18:30.800 --> 18:38.000
reasons. And this is what's the ones that have only changed once, haven't changed essentially.

18:38.800 --> 18:43.360
And the red ones are the ones that haven't changed in, I just took two years as an arbitrary value.

18:44.160 --> 18:47.120
And you think, well, okay, there's 10 of them that have not changed in two years.

18:47.680 --> 18:52.800
Does that not start linking a belt? It says, is it maybe not unmaintained? Is it now an

18:52.800 --> 18:59.840
unmaintained package? Don't know what industries have in terms of looking at the health of an

18:59.840 --> 19:05.840
open source project. Are they looking for the, you know, is two years long enough? And it says,

19:05.920 --> 19:12.240
maybe we need to look at alternatives. Right at the top there is Tom Lee, which is now a standard

19:12.240 --> 19:18.080
library within Python 3.11. Till I did this, I hadn't, I've missed that. So I then raised a pull

19:18.080 --> 19:24.160
request to say, if it's 3.11, we want to use the standard, standard library, not the open source

19:24.160 --> 19:30.560
version. So again, on the probability that the language ecosystem libraries are going to be

19:30.560 --> 19:39.200
probably better maintained or have a greater need for being maintained than necessarily community.

19:40.560 --> 19:50.640
Right? So change happens. But we could be very careful of pinning because direct dependencies

19:51.440 --> 19:55.520
change frequently as well. So there's a pinning debate.

19:55.520 --> 20:03.200
Right. Let's look at data analysis. Let's look at the first thing is languages, licenses rather.

20:05.040 --> 20:12.800
I've tried to look at the SBDX license IDs. When I get the metadata, try and map it. And if it

20:12.800 --> 20:18.640
doesn't quite match, do I have some sort of a few rules to try and alias them? So is it Apache

20:18.640 --> 20:24.880
space 2? Well, it's Apache 2 type of thing. And Apache 2 is a really good example. People don't

20:24.880 --> 20:32.560
know how to write Apache 2 SBDX ID license IDs. Yes? Are you pulling this from, from PyPy?

20:32.560 --> 20:37.840
Some of these come from PyPy. Yes. Yes. PyPy is a disaster in terms of specific license. Right.

20:38.960 --> 20:44.400
You've peached into the converted here. As a community, we should be looking at this and fixing

20:44.400 --> 20:49.200
it because many of the packages that have got license failures have been updated in the last

20:49.280 --> 20:55.440
12 months. Probably because they've got features, but metadata doesn't really matter, does it?

20:57.280 --> 21:02.480
Metadata matters now in the world of S-bombs. Let's look after S-bombs

21:03.360 --> 21:11.280
metadata as much as the code and the tests. Told you I told you. Yeah. Yeah. Right. So I, so I

21:11.280 --> 21:16.160
summarise all the licenses and the things like that. And you see, again, you can probably quite

21:16.160 --> 21:20.960
quickly get a summary. Have you got a license problem? Okay. CVU and TIL is a GPL. Everything

21:20.960 --> 21:28.080
underneath that is okay, but you may be able to see quite quickly to see have you got a license

21:28.080 --> 21:34.240
compliance problem. The other thing is you can look at all the suppliers. Do you have a supplier

21:34.240 --> 21:40.160
that you really need to be loving and looking after? Because you're very dependent on your packages.

21:40.160 --> 21:45.360
This case, we've got 60 different providers, so it's not quite the obvious. But this could be a

21:45.360 --> 21:50.640
way of understanding who are your dependent suppliers that you need to be maybe getting closer to.

21:51.520 --> 21:56.400
Maybe supporting, maybe helping. And I'm thinking about the world of the enterprises as well,

21:56.400 --> 22:02.000
who might be needed, look, needed to do this. So again, but four of these packages have no

22:02.000 --> 22:04.880
suppliers. Three of them were updated. Why didn't they update the metadata?

22:05.440 --> 22:15.120
And then just a summary, I've got TIL that just differences two S-bombs,

22:15.840 --> 22:20.800
arbitrary format, don't matter that you can compare Cyclo and DX and SV8X. Just to see

22:20.800 --> 22:24.560
generally what's changed in the 12 months, well, there's 39 of the packages. I've had at least

22:24.560 --> 22:31.840
one version change. And we've lost two packages and we gained 11. So that's what 15% growth

22:32.320 --> 22:39.520
packages, number of packages that are dependent on. And then I did a scan. And that's the last one

22:39.520 --> 22:45.120
is I was expecting the last S-bomb to be as clean of vulnerabilities. The reason I've got one

22:45.120 --> 22:50.960
vulnerability is because of the RSA problem that we've heard too earlier. Potentially.

22:53.440 --> 22:59.760
So takeaways, I'm doing all right here. Right. Generate your S-bomb for each version of the

22:59.760 --> 23:07.280
supported environment you're doing. So if you're doing Python, 38 to 312, generate five S-bombs

23:07.280 --> 23:12.320
and also do it for Cyclo and DX and SVDX because the generations may have more,

23:12.320 --> 23:15.440
they may be different data, they may be enrichment between the two.

23:17.280 --> 23:24.080
Please as a community can we improve the metadata? We have all responsible to do that.

23:24.240 --> 23:32.160
Once you've got an S-bomb, that's the start of the fun. Start analyzing it, start using it, start

23:32.160 --> 23:38.640
reading it. It doesn't matter whether, you know, I'm sure many of you are quite familiar with

23:38.640 --> 23:43.760
reading JSON. Help the people around familiar with JSON. Look at the data, there's some

23:43.760 --> 23:49.280
documentation tools there you may find useful. This is the thing that we do when we install.

23:49.280 --> 23:53.680
We install with Python with this upgrade strategy, which is trying to make sure we're using the

23:53.680 --> 23:58.000
latest version of everything. But obviously that doesn't stop pinning.

24:00.720 --> 24:06.480
So it's interesting. I need to think a little bit more about that with Python teams. Keep your

24:06.480 --> 24:11.440
package up to date. I have a problem in my things because I just do pip install and they'll say,

24:11.440 --> 24:14.640
oh, I've got a beautiful soup. Yeah, that'll do. It's not the latest version, I'm sure.

24:15.200 --> 24:18.320
So just that's just be aware and use the latest version of Python.

24:19.040 --> 24:25.040
I have another tool called S-pom for files, which looks at the files so you can look at the change

24:25.040 --> 24:30.160
of files as well. That's a bigger thing. So it's just a thing. Could you start to see the amount

24:30.160 --> 24:35.040
of change in maybe one of your source trees and you repost, you know, or the test files changing,

24:35.040 --> 24:39.680
for example. And then obviously add vulnerability scanning as part of our generation.

24:41.040 --> 24:44.160
So this is what you all probably want. These are the list of other tools.

24:44.400 --> 24:49.040
The presentation is we'll be on the CVU in tool. There's a pool request in there. It just needs to

24:49.040 --> 24:57.360
be approved. Those are all the tools. I haven't written all of them. But if you want to follow me,

24:58.320 --> 25:02.320
that's me on LinkedIn. That's me on GitHub. And that's me in Manchester. Okay. Thank you very much.

25:14.320 --> 25:15.680
So on your list of

25:19.040 --> 25:27.360
increasing hidden dependencies, is it both a package or a package version?

25:30.160 --> 25:37.840
Okay, this is about the picture. Yeah. Yeah. Okay. So the picture that I showed,

25:37.840 --> 25:43.440
this is that showed the hierarchy of all the packages. They are all packages. They are Python

25:43.440 --> 25:49.440
packages. So if you have two different versions of the same package, they appear as one or?

25:49.440 --> 25:54.480
No, they would be pairs two if you had that. I've never seen that. Oh, okay. Yeah.

25:56.640 --> 26:03.360
Well, I would say that you live on an isolated island in Kingdom of South Africa. We are in the

26:03.360 --> 26:08.880
Union. And we have a presentation coming up. And I've got the divorce when you say that

26:08.960 --> 26:15.680
updates are driven by features. What do you see? Will that change in the future?

26:16.400 --> 26:22.960
Okay. The question there is, I mentioned the thing I said a lot of the updates appear to be

26:22.960 --> 26:27.200
driven by feature changes rather than security features. The question is, do you think that

26:27.200 --> 26:33.520
will change with things like the CLA? Probably. It depends.

26:34.480 --> 26:35.520
It depends. Yeah.

26:38.800 --> 26:39.520
There's no other one more.

26:52.480 --> 26:56.000
Okay. This is about the improving the metadata upstream.

26:57.120 --> 27:03.040
Probably the two things I would say is licenses to support the license compliance teams.

27:03.040 --> 27:07.600
And secondly, the supplier, because does that identify, do you know where you've got your

27:07.600 --> 27:14.800
software from? What can a large organization know that could sue the way it is? What can we do to

27:14.800 --> 27:20.480
help do that upstream? Use SKDX tags in your Python modules.

27:21.280 --> 27:24.640
Yeah. Yeah. You can do a public request.

27:27.120 --> 27:31.680
Yeah. I don't know. I mean, yeah. I think, recognize that there is a community out there. If you've

27:31.680 --> 27:37.040
got the effort, do it. Use it. Because, you know, we know the open source community is stretched

27:37.040 --> 27:43.520
because of volunteers. If the enterprise is taking value of it, can we use fully use your

27:43.520 --> 27:46.000
contribution? Because you're going to help many people.

27:48.320 --> 27:51.360
All right. Let's take time for me again.

