WEBVTT

00:00.000 --> 00:09.320
Okay, hello everyone.

00:09.320 --> 00:14.880
We are here to present Mambo, a dynamic binary modification tool, and what's the better way

00:14.880 --> 00:17.320
to start the presentation than with a demo.

00:17.320 --> 00:24.040
So we are going to see a fairly complex application running on risk five within our system.

00:24.040 --> 00:25.040
So let's see it.

00:25.040 --> 00:30.560
So we are going to use it to learn something about the running binary.

00:30.560 --> 00:32.040
So here it is.

00:32.040 --> 00:35.040
Okay, so this is not our tool.

00:35.040 --> 00:40.440
So this is just an image viewer of Linux, and we generated this picture with one of these

00:40.440 --> 00:45.000
fancy AI tools so we can kind of promote our talk on LinkedIn.

00:45.000 --> 00:50.360
But what's really happening is that this image viewer is running under our tool that

00:50.360 --> 00:55.560
runs on risk five, and then we use it to find some information about the binary.

00:55.560 --> 00:59.720
So here we have a very simple tool that counts the number of threads that the application

00:59.720 --> 01:02.800
was used so we can see we have eight threads.

01:02.800 --> 01:06.720
So the application run under our tool on risk five, and then we can see that we have

01:06.720 --> 01:07.720
eight threads.

01:07.720 --> 01:09.280
Okay, but thanks for your first.

01:09.280 --> 01:10.280
I'm Igor.

01:10.280 --> 01:14.120
This is Alistair, and we are here from the University of Manchester.

01:14.120 --> 01:17.920
And as I said, we are going to talk about Mambo, which is a binary modification tool

01:17.920 --> 01:19.440
for risk architectures.

01:19.440 --> 01:21.680
Okay, but thanks.

01:21.680 --> 01:26.280
But okay, has anyone knows here what the dynamic binary modification is, or heard the term

01:26.280 --> 01:27.280
in the first place?

01:27.280 --> 01:29.280
Raise your hands if you did.

01:29.280 --> 01:30.280
Okay, wow.

01:30.280 --> 01:31.280
Okay, a few people.

01:31.280 --> 01:32.280
That's good.

01:32.280 --> 01:37.400
But you may haven't heard the term, but I'm pretty sure if you did any development, you

01:37.400 --> 01:39.440
used those frameworks.

01:39.440 --> 01:44.760
So the examples of the very known open source tools that do dynamic binary modification

01:44.760 --> 01:47.080
are Valgrind and KMU.

01:47.080 --> 01:51.960
So I'm pretty sure you use Valgrind and one of these tools, which is called Memcheck.

01:51.960 --> 01:54.840
And most of you probably are in the risk five room use KMU.

01:54.840 --> 02:03.560
So both Valgrind and KMU are dynamic binary modification framework, and they have a various

02:03.560 --> 02:05.040
tool built on top of that.

02:05.040 --> 02:06.840
So this is what Mambo is.

02:06.840 --> 02:09.600
Okay, but let's break down this term a bit.

02:09.600 --> 02:14.760
So what do I mean by dynamic binary modification?

02:14.760 --> 02:17.240
So dynamic is working at the runtime.

02:17.240 --> 02:21.480
So while the binary is running, the tool is working.

02:21.480 --> 02:24.520
Binary, we are working on the natively compiled code.

02:24.520 --> 02:28.240
So we don't need a source code, we just take a binary that was already compiled, and we

02:28.240 --> 02:29.240
can analyze it.

02:29.240 --> 02:33.400
And modification means that we can alter the application in a specific way.

02:33.400 --> 02:39.080
So we can add extra functionality, we can remove functionality, we can swap functionality.

02:39.080 --> 02:42.240
So there are two terms that are related to that.

02:42.240 --> 02:45.760
There is also dynamic binary instrumentation and translation.

02:45.760 --> 02:48.800
So instrumentation is basically a subset of modification.

02:48.800 --> 02:51.720
We just insert new functionality into the binary.

02:51.720 --> 02:57.040
So for example, if I want to do some sort of profiling, I can input some sort of counters

02:57.040 --> 02:58.840
into the running binary.

02:58.840 --> 03:01.600
And then translation is kind of an overlapping term.

03:01.600 --> 03:07.040
I can swap one, I say to another, so we could do it by modifying the binary, or there are

03:07.040 --> 03:09.920
more specialized tools that do the translation.

03:09.920 --> 03:14.200
So you are probably familiar with the Apple Rosetta, which translates now Intel to ARM

03:14.200 --> 03:19.640
when you got your new MacBook, but there is also the KMU also can act as a translator

03:19.640 --> 03:25.040
and usually use like that because they can translate one architecture to another.

03:25.040 --> 03:28.000
But now, so very few uses of the tools.

03:28.000 --> 03:31.440
So you can do program analysis, you can do error detection.

03:31.440 --> 03:35.680
So I'm pretty sure most of you are familiar with that use case, and there is a dynamic

03:35.680 --> 03:36.680
translation.

03:37.680 --> 03:42.240
OK, but now the question is why would you like to use Mambo if there are other tools?

03:42.240 --> 03:48.600
So the Mambo has been specifically optimized for risk 5, ARM, risk 5 64, ARM 32 and ARM

03:48.600 --> 03:49.600
64.

03:49.600 --> 03:54.120
So in the stock, we are focusing on the ARM, on the risk 5, but we also have the version

03:54.120 --> 03:57.280
of the tool that can run on ARM.

03:57.280 --> 04:02.000
And the tool features low overhead, and to our knowledge, this is the only at the moment

04:02.000 --> 04:07.040
available DBM tools that has been optimized for risk 5.

04:07.040 --> 04:11.320
And the tool itself is fairly low in complexity, so if you would like to dive into the database,

04:11.320 --> 04:13.600
is around 20,000 line of code.

04:13.600 --> 04:18.800
So if you want to learn how it works, or if you want to modify the internals, the entry

04:18.800 --> 04:20.520
bar is not that high.

04:20.520 --> 04:25.960
And then it has a simple plugin API that allows you to write the architecture agnostic plugins.

04:25.960 --> 04:30.320
So you can write the plugin for risk 5 and later on you can deploy it on ARM if you

04:30.320 --> 04:31.320
would like.

04:31.680 --> 04:33.920
But it's worth to say it is not a toy.

04:33.920 --> 04:39.360
So we showed it before in the video that we can run fairly complex applications, so it's

04:39.360 --> 04:43.560
a full GUI tool from the ship with Inux.

04:43.560 --> 04:46.920
It could run stuff like GIMP or library office as well.

04:46.920 --> 04:49.600
So the tool itself is not a toy.

04:49.600 --> 04:55.320
OK, and if you are interested what the numbers would be roughly, so we evaluated it on the

04:55.320 --> 04:57.840
spec benchmark, so don't worry about too much about numbers.

04:57.880 --> 05:00.560
If you want, we can point you to the paper or we can talk about it later.

05:00.560 --> 05:07.040
But the idea is for like, FP benchmark, which is more like data processing.

05:07.040 --> 05:10.640
We get around 6% overhead if we just run the tool.

05:10.640 --> 05:14.000
We just run a framework without an extra tool built on top of it.

05:14.000 --> 05:17.000
And it's around 30% when we do more general purpose computing.

05:17.000 --> 05:23.640
So the baseline then, if you have no plugins enabled when you just run the tool under, if

05:23.640 --> 05:26.960
you run the binary on the RL tool, you get around 30% overhead.

05:27.080 --> 05:32.680
OK, so that was the brief introduction of what the dynamic binary modification is.

05:32.680 --> 05:38.200
And I'm going to briefly talk about how Mambo works internally.

05:38.200 --> 05:42.480
So I'm going to mention a few details, so it's useful if you would like to, I don't know,

05:42.480 --> 05:45.680
contribute to the internal of the tools that may help you.

05:45.680 --> 05:49.840
But the focus of the talk will be more the developer side, so I'm just going to talk

05:49.840 --> 05:50.480
about it as well.

05:50.480 --> 05:56.280
But I would like to just highlight a few bits and pieces so you will understand how Mambo works.

05:56.280 --> 06:04.040
OK, so this is the simplified diagram, and I'm going to talk you through the more important

06:04.040 --> 06:05.000
bits of that.

06:05.000 --> 06:10.160
So the instrumentation plugin API, so this is the part that Alistair is going to talk

06:10.160 --> 06:14.280
in much detail about, and I'm going to cover everything else.

06:14.280 --> 06:18.920
OK, so first of all, the first component is the elf loader.

06:18.920 --> 06:24.720
So if you run any binary on Linux, it has to be first loaded into memory, and then we

06:24.720 --> 06:25.760
can run it.

06:25.760 --> 06:31.600
So in case if we use our framework, so if we use Mambo, then the Mambo itself is loaded

06:31.600 --> 06:37.080
by Linux using its default loader, and then Mambo itself has to load the application,

06:37.080 --> 06:38.480
which we call a hosted application.

06:38.480 --> 06:45.600
So the Mambo has a custom build loader inside of it, which takes the application and loads

06:45.600 --> 06:51.280
it alongside the Mambo, so it can interact with it, it can modify it, and it can run it.

06:51.280 --> 06:52.280
So that's the first element.

06:52.280 --> 06:55.640
The second element is instruction and decoder.

06:55.640 --> 07:01.040
So while we execute the application, we have to modify some of the instruction.

07:01.040 --> 07:06.720
We have to know what instruction we are copying and scanning and modifying, so this is what

07:06.720 --> 07:09.800
the instruction and decoder and decoder does.

07:09.800 --> 07:14.680
So you may be familiar with the custom project, which is like a fully fledged assembler.

07:14.680 --> 07:23.320
This is a very simple module that basically takes a text specification of the instruction

07:23.440 --> 07:28.440
and what the fields it has and uses some rubbish scripts to generate the C functions to encode

07:28.440 --> 07:32.280
any code fields, and this is what Mambo uses because it's fairly simple and low overhead,

07:32.280 --> 07:36.320
and that's something that we want inside the tool that runs dynamically.

07:36.320 --> 07:43.160
Okay, and now the two most important parts of Mambo, it will be a code scanner and the

07:43.160 --> 07:45.880
dispatcher and the code cache.

07:45.880 --> 07:49.280
So let me maybe first talk about what the code cache is.

07:49.280 --> 07:55.840
So we have our Mambo, and the Mambo uses the loader to load the binary into a memory.

07:55.840 --> 07:59.160
And now we want to run this binary, but we also want to modify it.

07:59.160 --> 08:05.120
So if we just load the binary and run it, then it will run as it would be before.

08:05.120 --> 08:07.640
So that's why where the code cache comes in.

08:07.640 --> 08:09.720
So this is not the instruction cache that we have hardware.

08:09.720 --> 08:13.440
This is just allocated space in memory that we call the code cache.

08:13.440 --> 08:18.680
And now the Mambo scanner will copy the instruction from the binary that we loaded into memory

08:18.720 --> 08:20.320
into the code cache.

08:20.320 --> 08:25.000
And in the process of copying those instructions, we can introduce any functionality, we can

08:25.000 --> 08:28.000
remove some instructions, we can replace some instructions.

08:28.000 --> 08:32.160
So the scanner is responsible for copying instructions from the binary that we loaded

08:32.160 --> 08:33.320
into the code cache.

08:33.320 --> 08:39.480
And then the code cache is what will actually execute on the processor.

08:39.480 --> 08:45.960
And then we have a dispatcher, which is responsible for actually running the code.

08:45.960 --> 08:50.800
So the scanner will copy a basic block, and then it will say, I finished copying a basic

08:50.800 --> 08:51.800
block.

08:51.800 --> 08:55.600
Now I go to the dispatcher and dispatcher will start the basic block, and it will actually

08:55.600 --> 09:01.160
natively execute it on a RISC-5 processor.

09:01.160 --> 09:05.880
And then when we finish the basic block, the control will return back to Mambo to scan

09:05.880 --> 09:09.600
the other basic block, and then again we'll go back to the dispatcher and dispatcher will

09:09.600 --> 09:13.800
execute the next basic block, and it will have this back and forth.

09:13.800 --> 09:17.720
And if the code is ready to the code cache, we don't have to scan it so we can directly

09:17.720 --> 09:20.320
execute another basic block without scanning.

09:20.320 --> 09:22.360
So this is very simplified.

09:22.360 --> 09:24.440
If we did it that way, it would be very, very slow.

09:24.440 --> 09:27.360
So there is a number of optimizations there.

09:27.360 --> 09:30.680
So for Mambo to stay in the code cache as long as possible.

09:30.680 --> 09:37.440
So it does scan things ahead of time and tries to guess what would be the next thing it jumps

09:37.440 --> 09:42.320
to and then if it can do it, then it can stay within the code cache.

09:42.320 --> 09:45.840
Otherwise it has to go back to the scanner and back to the dispatcher if it doesn't know

09:45.840 --> 09:48.240
what the next basic block is.

09:48.240 --> 09:50.240
Okay, and this is what I was talking about.

09:50.240 --> 09:55.240
So when we execute the application, we have a single process with two binaries in it and

09:55.240 --> 09:56.240
two contexts.

09:56.240 --> 10:01.800
So there is a Mambo context that scans instruction, and then the dispatcher changes from the Mambo

10:01.800 --> 10:03.640
context into the application context.

10:03.640 --> 10:09.520
So it will save the state of the Mambo, jump to the code cache, execute the code cache

10:09.520 --> 10:14.480
as long as it can, and then if it cannot find the next target in the code cache, it will

10:14.480 --> 10:15.480
go back to Mambo.

10:15.480 --> 10:19.760
So it will save the application state, restore the state of Mambo, and then the scanner will

10:19.760 --> 10:21.440
kick in and then it will go back and forth.

10:21.440 --> 10:26.880
So this is like a principle of it, of how it works.

10:26.880 --> 10:33.440
Okay, so the dispatcher and the scanner are like the two main elements in Mambo that allow

10:33.440 --> 10:39.240
us to do the modification and execute the code.

10:39.240 --> 10:41.520
And the last thing is the kernel interaction.

10:41.520 --> 10:49.400
So on top of just executing the application, the framework itself has to interact with the

10:49.400 --> 10:55.560
Linux kernel, so we have to handle and pass signals and handle and pass system calls.

10:55.560 --> 10:59.360
So this is important because for signals, if there is a signal coming from the operating

10:59.360 --> 11:04.480
system, it will first hit our framework, so it will first hit Mambo.

11:04.480 --> 11:07.640
But if you don't want Mambo to handle the signals, in many cases you want to pass it

11:07.640 --> 11:11.480
to the application because the application may have a handler installed to handle this

11:11.480 --> 11:12.960
signal.

11:12.960 --> 11:18.040
And in the same way, if there is a system call, so if the hosted binary is doing a system

11:18.040 --> 11:22.920
call, for example, let's say a thread creation, Mambo needs to know that it created a thread

11:22.920 --> 11:26.440
because it has to track every thread that gets created.

11:26.440 --> 11:30.720
So the Mambo has to learn first what was the system call and only then it can pass it to

11:30.720 --> 11:33.720
the Linux kernel.

11:34.680 --> 11:39.440
So that's also, I talked briefly about the architecture of Mambo, so we had the L flow

11:39.440 --> 11:43.160
there, we had the instruction encoder and encoder, two main elements, one free management

11:43.160 --> 11:47.760
scanner, dispatcher and the code cache, and then we had a bit about the handling signals

11:47.760 --> 11:49.040
and system calls.

11:49.040 --> 11:53.520
So that's, if you are going to just use Mambo to write your plugins and the tools probably

11:53.520 --> 11:58.920
you don't have to know all of that, it may help to know how Mambo works.

11:58.920 --> 12:05.400
And if you want to contribute to the internals of it, that hopefully will give you some rough

12:05.400 --> 12:08.400
idea how the system works.

12:08.400 --> 12:15.240
But now the bit probably people are more interested in is how we can write our own plugins, our

12:15.240 --> 12:17.240
own tools within our framework.

12:17.240 --> 12:20.240
And for that I will pass the microphone to Alistair.

12:29.920 --> 12:38.440
Hi, so yes, I will talk to you about the API, this is how you take Mambo and you build

12:38.440 --> 12:41.400
your own tool on top of it.

12:41.400 --> 12:44.920
So this is where it actually gets really useful.

12:44.920 --> 12:51.360
So we've mentioned use cases but it's worth repeating.

12:51.360 --> 12:57.400
We're talking about things like code analysis so you can build a control flow graph, you

12:57.400 --> 13:04.520
can generate new functionality, you can instrument code, you can analyze it, you can re-implement

13:04.520 --> 13:09.080
library functions, you can patch library functions, you can do all sorts because you can modify

13:09.080 --> 13:12.920
this running binary.

13:12.920 --> 13:21.160
So Mambo's API exposes events, so it's event driven.

13:21.160 --> 13:29.680
So you as the user of this API define functions which you register as callbacks on these events.

13:29.680 --> 13:34.360
And when one of these events is encountered Mambo will trigger the callback and execute

13:34.360 --> 13:37.000
the function that you registered to it.

13:37.000 --> 13:42.360
So there are two categories of events, there's hosted application, runtime events.

13:42.360 --> 13:48.520
So these are events that happen to the hosted application as it's being executed in the

13:48.520 --> 13:49.600
code cache.

13:49.600 --> 13:55.800
So here we're talking things like system calls, thread creation and we have Mambo scan time

13:55.800 --> 14:01.680
events so these happen as Mambo is scanning instructions from the loaded elf into the

14:01.680 --> 14:03.280
code cache.

14:03.280 --> 14:10.640
So this is something like pre-instruction, post-instruction, you can do stuff with these

14:10.640 --> 14:14.280
callbacks.

14:14.280 --> 14:19.640
So as I was mentioning pre-instruction, post-instruction, this kind of gives you an idea, you can insert

14:19.640 --> 14:26.120
something before and after an instruction, before and after a basic block, before and

14:26.120 --> 14:27.400
after a thread.

14:27.400 --> 14:34.120
So you can see it can be very, very fine grained or it can be at a high level of abstraction

14:34.120 --> 14:36.920
and of course before and after an application runs.

14:36.920 --> 14:44.120
So taking all of this, you see a slightly chopped off diagram there but it kind of gives

14:44.120 --> 14:49.120
you an idea of the order in which these callbacks will be executed.

14:49.120 --> 14:54.560
So at the very highest level, at the very start you have the initialization function

14:54.560 --> 15:00.680
which is where you set up a plugin and then you'll have pre-thread so that's quite high

15:00.680 --> 15:08.240
level, pre-basic block, you also have pre-function and so it kind of gets narrower and narrower

15:08.240 --> 15:12.360
and then it kind of expands out after these things have executed.

15:12.360 --> 15:18.160
So this is something that's important to bear in mind.

15:18.160 --> 15:22.680
So how do you actually use Mambo's API?

15:22.680 --> 15:25.520
I'm going to talk to you about the following things.

15:25.520 --> 15:31.960
So the functions that you'll need to register your callbacks, the functions that perform

15:31.960 --> 15:39.120
code analysis, the functions that perform instrumentation, so how you actually emit code into the code

15:39.120 --> 15:45.320
cache and then there are various helper functions which you can use.

15:45.320 --> 15:50.120
So the first thing you need to do is initialize your plugin and this is done in the plugin

15:50.120 --> 15:54.400
constructor function and there are two main things that you do here.

15:54.400 --> 16:01.440
You create a Mambo context which is a global data structure which holds the current state

16:01.440 --> 16:09.800
of Mambo and also the application that's being executed by Mambo and pretty much all of Mambo's

16:09.800 --> 16:15.960
helper functions will use this context to get for instance the current instruction that

16:15.960 --> 16:18.720
you're looking at.

16:18.720 --> 16:21.480
And this is also where you'll register callbacks.

16:21.480 --> 16:26.360
So for instance here we have Mambo register pre-instruction callback.

16:26.360 --> 16:32.880
So before an instruction is actually scanned into the code cache something that you register

16:32.880 --> 16:37.800
here will execute.

16:37.800 --> 16:46.360
And to register callbacks it follows this signature so you have Mambo register then you have an

16:46.360 --> 16:50.960
event time so that's pre or post something happening then you have the event so this

16:50.960 --> 16:55.160
can be Mambo pre-instruction callback.

16:55.160 --> 17:01.200
So it's quite easy to remember that way.

17:01.200 --> 17:06.200
So you've registered your callback so let's say we're building a plugin that counts the

17:06.200 --> 17:08.600
number of branches that are executed.

17:08.600 --> 17:14.400
So you've registered a pre-instruction callback.

17:14.400 --> 17:19.720
So now Mambo's scanning things and your pre-instruction callback has executed.

17:19.720 --> 17:23.280
So one of the first things you're going to want to do is use a code analysis function.

17:23.280 --> 17:28.320
You're going to want to know which instruction am I looking at.

17:28.320 --> 17:34.280
So you have things like Mambo get branch type, Mambo get condition which would for instance

17:34.280 --> 17:40.240
give you the condition of the branch that you're looking at if it's a conditional branch.

17:40.240 --> 17:47.000
So these give you information that you can use and choose to act on.

17:47.000 --> 17:54.680
So the function signature of these analysis functions follows Mambo action so that would

17:54.680 --> 17:59.840
be get set is and then the information.

17:59.840 --> 18:08.880
So Mambo get function type, Mambo get branch type even relating back to our example would

18:08.880 --> 18:12.200
get you the type of the branch that you're looking at.

18:12.200 --> 18:19.600
So bringing all of this together into a simplified plugin we have the constructor where we initialize

18:19.600 --> 18:26.840
context and we register a pre-instruction callback and when that's executed we get the

18:26.840 --> 18:31.880
branch type and then based on what type of branch it is we do something.

18:31.880 --> 18:37.440
It's also worth pointing out that the branch types that we're looking at here are generic

18:37.480 --> 18:46.400
so that's how it is portable between architectures.

18:46.400 --> 18:50.000
So you've found out you're looking at a branch.

18:50.000 --> 18:53.080
Now you're going to actually want to emit instrumentation.

18:53.080 --> 18:57.880
So this is instructions that you can put into the code cache to do something.

18:57.880 --> 19:03.920
So for instance we have emit64 counter increments so this is how you can tell Mambo to emit

19:03.920 --> 19:08.480
the instructions that you need to increment a counter.

19:08.480 --> 19:13.440
You can emit pushes, you can emit pops, you can set registers so you can do all sorts

19:13.440 --> 19:17.000
of things and there are two main types.

19:17.000 --> 19:25.080
You have emit instructions so that would be for example emit increment so that's more

19:25.080 --> 19:32.360
portable because we implement the backend tell Mambo which instructions to emit into

19:32.360 --> 19:42.840
the code cache for that.

19:42.840 --> 19:47.680
And then we have the more architecture dependent ones which are emit risk five instructions

19:47.680 --> 19:53.080
so this is when you know exactly what you are trying to achieve with the plugin.

19:53.080 --> 19:57.440
Let's say you need to emit an arithmetic instruction.

19:57.440 --> 20:02.160
You can do that until Mambo emit this arithmetic instruction.

20:02.160 --> 20:06.840
The only drawback to this is that it's riskier doing that.

20:06.840 --> 20:11.840
You have to make sure that you save and restore registers and that kind of thing which we

20:11.840 --> 20:18.360
do for you in the safer generic ones.

20:18.360 --> 20:24.080
And then finally you have additional helper functions so for instance Mambo will expose

20:24.080 --> 20:29.720
a hash table which is really useful for when you're instrumenting code and you have lots

20:29.720 --> 20:33.280
of data to associate with different addresses.

20:33.280 --> 20:43.480
So we have hash tables, we have Mambo allocator so these will help you to write your plugin.

20:43.480 --> 20:50.280
And then finally it can be very difficult to get your head around this.

20:50.280 --> 20:56.400
It took me a while to fully understand it and that is the difference between scan time

20:56.400 --> 20:57.400
and run time.

20:57.640 --> 21:02.280
So when we talk about scan time we talk about something that happens once when Mambo is

21:02.280 --> 21:09.640
scanning something and run time is when that scanned code is executing in the code cache

21:09.640 --> 21:15.400
and the reason this difference matters is if you are for instance counting the number

21:15.400 --> 21:22.240
of branches that are executed at scan time you need to emit instructions into the code

21:22.280 --> 21:28.640
cache to increment a counter so that when that code is executing you get the actual

21:28.640 --> 21:32.240
number of instructions, times that instruction is executed.

21:36.240 --> 21:39.840
Okay so it's time for an example.

21:39.840 --> 21:44.880
The code I'm about to show you can find on the Mambo repository in the plugins directory

21:44.880 --> 21:49.360
and it's time for a live demo.

21:49.480 --> 21:59.600
So I will be running Vim under Mambo on risk 5 to show you the source code of the branch

21:59.600 --> 22:06.400
counter plugin which is something that you can run and is in the Mambo repository and

22:06.400 --> 22:12.440
whilst running Vim I will also have enabled the branch counter plugin so you can see it

22:12.440 --> 22:13.440
in action.

22:13.440 --> 22:16.440
Sounds very convoluted I know.

22:16.520 --> 22:28.520
Okay so here we run Mambo and I don't know how well you can actually see that but...

22:35.520 --> 22:37.520
Command shift plus.

22:37.520 --> 22:39.520
Oh command shift.

22:41.520 --> 22:43.520
Hooray.

22:43.520 --> 22:45.520
Do we need more or?

22:45.600 --> 22:47.600
Bigger.

22:49.600 --> 22:51.600
Oh bigger.

22:58.600 --> 23:00.600
Even bigger.

23:01.600 --> 23:03.600
I'm trying to call it that wrong.

23:03.600 --> 23:05.600
Okay yeah.

23:05.680 --> 23:20.680
Okay so we start with the constructor function which is where we set up Mambo's context

23:20.680 --> 23:26.680
and we're registering four callbacks so we have a pre-instruction callback, we have a

23:26.680 --> 23:33.680
pre-thread callback, a post-thread callback and an exit callback and the order that these

23:33.760 --> 23:40.760
will actually be executed in will go pre-thread, pre-instruction, post-thread and then exit.

23:40.760 --> 23:42.760
So I'll start with the pre-thread.

23:45.760 --> 23:47.760
So in the...

23:49.760 --> 23:51.760
Let's hear some more.

23:56.760 --> 23:58.760
Oh yeah yeah yeah.

23:58.840 --> 24:05.840
In the pre-thread handler we're initializing the counters for that thread so we have a

24:05.840 --> 24:09.840
direct branch counter, indirect branch counter and return branch counter.

24:09.840 --> 24:15.840
The reason why we have this per thread is because each thread has its own code cache

24:15.840 --> 24:21.840
and therefore its own numbers of branches that we'll be executing which is why for each

24:21.920 --> 24:25.920
thread that we create we initialize its own set of counters.

24:25.920 --> 24:32.920
And then we have a pre-instruction callback.

24:33.920 --> 24:39.920
So for each instruction that's executed we're checking if this is a branch, we're getting

24:39.920 --> 24:45.920
the branch type and then for each of the types of branches, the return branch, the

24:45.920 --> 24:50.920
direct branch and the indirect branch we select the correct counter for that thread

24:51.000 --> 24:57.000
and we then emit a counter increment into the code cache so that the correct counter

24:57.000 --> 24:59.000
will be incremented.

25:00.000 --> 25:06.000
Okay so at this point Vim is running away, running away and when we close it the post-thread

25:11.000 --> 25:18.000
handler will first be executed and this will say okay so this thread is terminating let's

25:18.280 --> 25:25.280
take this thread count for each type of branch and add it to the global total and it does

25:28.680 --> 25:35.680
that atomically and then finally we have, oh yeah the exit handler which just says okay

25:35.680 --> 25:42.680
this application has now terminated let's print out the global totals which are composed

25:42.680 --> 25:49.680
of the individual threads. Since Vim is a single threaded application we'll get one thread

25:52.680 --> 25:59.680
and one total which you can see there.

26:00.680 --> 26:05.680
Okay and now I'll quickly talk to you about some lessons that we learned from porting

26:05.680 --> 26:11.680
Mantlot to risk 5 because it was originally written for ARM so there are differences that

26:11.680 --> 26:18.680
we had to take into consideration. So the first thing was the range of branches. So for

26:19.680 --> 26:25.680
conditional branches and direct jumps they have a range of branches and they have a range

26:26.680 --> 26:31.680
of branches. So for conditional branches and direct jumps they have quite a limited range

26:32.680 --> 26:38.680
which is less of an issue on ARM because they have a much longer range. Why this matters

26:39.680 --> 26:44.680
is because in a compiled binary obviously the offsets will be fine because that's how it

26:44.680 --> 26:49.680
was compiled. When you take that code and you put it into a code cache it's done as it's

26:49.680 --> 26:54.680
needed and so the ordering of that code may be different and therefore the offsets may be

26:54.680 --> 27:00.680
different and exceed the offsets of the original binary. And so we may have to replace these

27:03.680 --> 27:09.680
instructions with instructions that have a longer range. So with a conditional branch we may

27:09.680 --> 27:16.680
have to insert an additional jump instruction that is triggered when the branch condition is true

27:17.680 --> 27:23.680
to extend the range of that branch. And same for a direct jump it may need to be replaced with

27:24.680 --> 27:30.680
instructions that first load the address into a register and then take a register jump. We also

27:31.680 --> 27:36.680
have load reserve and store conditional. You can only have a limited number of instructions

27:38.680 --> 27:44.680
between these two instructions and you can't also have a limited number of instructions

27:46.680 --> 27:52.680
between loads and stores in between otherwise the lock will fail. This matters in dynamic binary

27:53.680 --> 27:58.680
modification because we can insert additional instructions so we have to place limits on

27:59.680 --> 28:04.680
what you can do with atomic instructions in plugins and with other optimizations implemented

28:05.680 --> 28:11.680
we have to be mindful of this limitation. And finally we have the thread pointer register X4.

28:16.680 --> 28:23.680
There isn't a dedicated register in the general register file on ARM that does this. And so when

28:24.680 --> 28:31.680
we create a new thread Mambo will save and restore the context by saving and restoring all registers.

28:33.680 --> 28:40.680
We need to make sure that the thread pointer actually points to the newly allocated thread local

28:41.680 --> 28:46.680
storage otherwise there will be a world of pain which we found out.

28:49.680 --> 28:56.680
Okay so in terms of road map where we take it from here we of course want to foster our open source

28:57.680 --> 29:03.680
community. We really welcome collaborations and contributions not only plugins but also any

29:04.680 --> 29:11.680
contributions to the main internals of Mambo. As part of this we are currently in the process of

29:12.680 --> 29:17.680
improving documentation and also developing more tools to kind of give people a flavor of what's

29:18.680 --> 29:27.680
possible. So for instance we're currently porting Mambo's Memchecker from ARM to RISC 5. We also are

29:28.680 --> 29:35.680
trying our very best to keep up with all of the new RISC 5 and also ARM extensions that keep

29:36.680 --> 29:44.680
appearing. We also have various research projects ongoing that make use of Mambo. And probably goes

29:48.680 --> 29:54.680
without saying since this is a talk at FOSTEM but Mambo is open source on GitHub with an Apache 2.0

29:54.680 --> 30:04.680
license so definitely check it out. And we'd like to thank our sponsors. So yeah any questions?

30:24.680 --> 30:44.680
Yeah. Oh yeah yeah. So you're asking how do we handle pointers when we scan code from the binary

30:45.680 --> 30:53.680
into the code cache. Those pointers are still pointing into the binary. So we actually in the scanner

30:54.680 --> 31:02.680
we have instructions like that specifically. So for instance if we take a branch instruction the first

31:03.680 --> 31:09.680
time that branch instruction is executed it will point to Mambo's dispatcher which will perform a lookup. We then

31:10.680 --> 31:16.680
have optimizations which will replace that branch instruction with a direct branch to the next basic block. And the

31:16.680 --> 31:22.680
same for loads and stores. We update these to point to the new location.

31:33.680 --> 31:40.680
So basic block is a single pointer. Oh sorry. Yeah I'll repeat the question. So what is a basic block?

31:40.680 --> 31:49.680
A basic block is a single entry single exit point. So you essentially ends when there's a branch to somewhere else.

31:52.680 --> 31:53.680
At the back.

32:11.680 --> 32:23.680
Yeah so in a general case. Oh I keep doing this. So how often is the load reserve store conditional an issue. We find it's

32:24.680 --> 32:35.680
not that much of an issue. Most applications won't have an issue with it. It becomes more of an issue when you have

32:35.680 --> 32:43.680
plugins that do something in between. So for instance if you're counting a specific type of instruction that may occur

32:44.680 --> 32:52.680
between these two instructions and you emit stuff into the code cache you may end up exceeding this 16 instruction limit.

32:55.680 --> 33:04.680
You mentioned translation early in your presentation. Does Mambo support running ARM on the RISC-5 machine and vice versa?

33:05.680 --> 33:13.680
So does Mambo support translation? Not currently. You need to be on that architecture.

33:15.680 --> 33:19.680
What happens if I try to run a just-in-time compiler under a Mambo?

33:20.680 --> 33:24.680
What happens with a just-in-time compiler? I'm not sure.

33:25.680 --> 33:32.680
So the Mambo is designed to support self-modifying code. So basically what it does, you have some code in the code cache

33:33.680 --> 33:37.680
and just in time compiler recompile it so basically the cache will be flushed and then it will re-scan it again.

33:38.680 --> 33:43.680
So it carries some performance penalty but it will react to the things like that and it will re-scan the code and put the new

33:44.680 --> 33:46.680
version into the code cache. So it does support self-modifying code.

33:49.680 --> 33:52.680
It should be. Hopefully.

33:54.680 --> 33:58.680
This isn't tested on RISC-5 because most browsers don't seem to be ported.

34:06.680 --> 34:07.680
Any other questions?

34:25.680 --> 34:30.680
So what do we interested in about RISC-5 applications from plugins?

34:32.680 --> 34:40.680
We're interested in building tools that kind of perform things like memory checking,

34:43.680 --> 34:51.680
data race detectors, that kind of thing. So tools that are very useful to people developing software on RISC-5

34:51.680 --> 34:53.680
to kind of help them do that.

34:57.680 --> 35:01.680
So just out of it, so we haven't mentioned it on the slides but we also have some research.

35:02.680 --> 35:09.680
That was for R but done on the architectural simulation, so kind of code design of accelerators and CPUs on the SOC system.

35:10.680 --> 35:17.680
So there's some stuff going on but yeah. So at the moment I think for RISC-5 the biggest push was to get the base system to work

35:17.680 --> 35:20.680
and now we are exploring on RISC-5 what we can actually do with the system.

35:23.680 --> 35:24.680
Any other questions?

35:25.680 --> 35:34.680
Does it update sections that refer to pieces of code like jump tables, different things between basic blocks?

35:44.680 --> 35:48.680
So the question is about does MAMBO support the jump tables? How does it do?

35:49.680 --> 35:57.680
So we do not rewrite any of the sections of the original binary so basically MAMBO works in a way on demand.

35:58.680 --> 36:08.680
So we have a jump that uses a jump table. MAMBO will try to remember the most recent jumps but then if you miss it you have to go back to the scanner, scan the code again and then go to the dispatcher.

36:09.680 --> 36:16.680
So we are going to use the addresses that are already there and then we are going to keep the translation of some addresses in the code cache but none of them.

36:17.680 --> 36:22.680
But we are not going to rewrite the actual jump tables in the data section of the binary.

36:26.680 --> 36:27.680
Any more questions?

36:46.680 --> 37:05.680
Okay so the question is about the data-raised detector and whether we could implement some sort of stepping back within MAMBO.

37:06.680 --> 37:23.680
So the data detection is in the early stages but you will not have such a verbose functionality as RR or GDB replay or whatever but what you can do in the very easy way when you scan the basic blocks.

37:24.680 --> 37:28.680
So you would have to probably have some sort of we don't have functionality to detect the data-raised.

37:29.680 --> 37:44.680
But let's say in the general case if you want to inspect what's happening you can introduce a trap instruction into the code cache and then you can run under GDB and then you will trap the instruction and you can inspect what's in the basic block after the translation and you could try to look what was in there before the translation.

37:45.680 --> 37:50.680
So you can do some sort of things in the manual but there is no automated way to replay and go back in time.

37:50.680 --> 37:51.680
Thank you.

