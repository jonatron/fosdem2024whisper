WEBVTT

00:00.000 --> 00:07.000
Hi everyone.

00:07.000 --> 00:11.000
So today we're going to speak about Typhon, our software for

00:11.000 --> 00:13.000
Knicks-based continuous integration.

00:13.000 --> 00:15.000
Let's say, for the sake of the argument,

00:15.000 --> 00:21.000
watch your enthusiast, and you're asked to set up CI at work.

00:21.000 --> 00:22.000
So what do you do?

00:22.000 --> 00:25.000
You convince your boss to use Knicks, because that's great.

00:25.000 --> 00:32.000
And you install a header.

00:32.000 --> 00:35.000
It's the de facto software for CI with Knicks.

00:35.000 --> 00:42.000
So your job is fantastic using Knicks,

00:42.000 --> 00:46.000
but soon you realize that not everything is perfect,

00:46.000 --> 00:49.000
because first you need to install the thing.

00:49.000 --> 00:51.000
And it's not easy.

00:51.000 --> 00:53.000
It's a full.

00:53.000 --> 00:56.000
And so you want get upstate choices.

00:56.000 --> 00:59.000
Then you need to configure the plugins,

00:59.000 --> 01:01.000
and each time you change the configuration,

01:01.000 --> 01:04.000
you need to redeploy the thing.

01:04.000 --> 01:07.000
Also, it's hard, because when you want to change a plugin,

01:07.000 --> 01:10.000
you actually need to write a poll for scripts,

01:10.000 --> 01:13.000
and you need to redeploy it again.

01:13.000 --> 01:15.000
Last thing, when you want to do deployment,

01:15.000 --> 01:18.000
all you get is this rank command thing,

01:18.000 --> 01:21.000
which is a bit hard to use, and a super staple,

01:21.000 --> 01:23.000
which you don't really like.

01:23.000 --> 01:29.000
So you start to dream about something much more simple,

01:29.000 --> 01:31.000
something declarative maybe.

01:31.000 --> 01:34.000
Maybe you want your plugins to be defined,

01:34.000 --> 01:39.000
user defined basically, with Knicks maybe,

01:39.000 --> 01:42.000
and you would like some better deployment,

01:42.000 --> 01:44.000
more in line with Knicks philosophy,

01:44.000 --> 01:48.000
with declarativity and the productivity.

01:49.000 --> 01:51.000
Okay, so in this dream,

01:51.000 --> 01:54.000
how does it look like to configure CI for a project?

01:54.000 --> 01:57.000
Well, at first it looks a lot like it does in Hydra.

01:57.000 --> 02:01.000
You set up an attribute set of derivations

02:01.000 --> 02:03.000
which are going to constitute your jobs.

02:03.000 --> 02:07.000
But then you write a Knicks expression for your project

02:07.000 --> 02:09.000
that looks a lot like this one.

02:09.000 --> 02:12.000
So here the makeGitUpProject function takes all the information

02:12.000 --> 02:14.000
that needed for a GitHub workflow,

02:14.000 --> 02:16.000
with the repository, of course,

02:16.000 --> 02:18.000
some arbitrary deployment rules.

02:18.000 --> 02:20.000
And of course you're going to need secrets like

02:20.000 --> 02:24.000
GitHub tokens and SSH keys to set GitHub statuses

02:24.000 --> 02:26.000
and do remote deployment.

02:26.000 --> 02:30.000
This expression is fed to Typhoon through the Flake URL.

02:30.000 --> 02:32.000
And once Typhoon spawned your jobs,

02:32.000 --> 02:35.000
it's going to use the project expression to build actions.

02:35.000 --> 02:39.000
So actions are scripts, which are user defined and Knicks built.

02:39.000 --> 02:42.000
They are run in a sandbox and triggered by Typhoon

02:42.000 --> 02:45.000
on various occasions to provide features

02:45.000 --> 02:47.000
that will be provided by Hydra's plugins.

02:47.000 --> 02:52.000
For instance, the most important hooks triggered by Typhoon

02:52.000 --> 02:56.000
are before and after every job to set statuses, of course,

02:56.000 --> 02:59.000
or do any kind of deployment.

02:59.000 --> 03:02.000
In a little bit more detail, an action is sandboxed

03:02.000 --> 03:05.000
with only access to the store and to Internet.

03:05.000 --> 03:08.000
It does not have access to the local machine.

03:08.000 --> 03:10.000
So for instance, it does not have access to secrets

03:10.000 --> 03:12.000
for other projects.

03:12.000 --> 03:15.000
It takes JSON as input containing the decrypted secrets

03:15.000 --> 03:19.000
and of course contextual information about your job.

03:19.000 --> 03:23.000
And it outputs JSON to communicate with Typhoon.

03:23.000 --> 03:27.000
Thanks to actions, Typhoon is completely for diagnostic.

03:27.000 --> 03:30.000
Actually all the communication between Typhoon and the forge

03:30.000 --> 03:33.000
is done through actions, meaning Typhoon can fit

03:33.000 --> 03:35.000
a lot of different workflows.

03:35.000 --> 03:37.000
But how do you write actions?

03:37.000 --> 03:40.000
Well, of course, you use the Typhoon's Knicks library

03:40.000 --> 03:42.000
that lives in Typhoon's flake.

03:42.000 --> 03:45.000
It would be quite frugal at the beginning,

03:45.000 --> 03:49.000
but soon it would go to fit a lot of different forges

03:49.000 --> 03:52.000
and various kind of deployments.

03:52.000 --> 03:56.000
And the goal would be, of course, to have an ecosystem of actions

03:56.000 --> 03:59.000
like we do for GitHub actions, but much better

03:59.000 --> 04:03.000
and using Knicks instead of YAML.

04:03.000 --> 04:06.000
A few words about how you would code something like this.

04:06.000 --> 04:08.000
Of course, you would use Rust

04:08.000 --> 04:11.000
to get some like technologies like Actix and Dissol

04:11.000 --> 04:15.000
for the back end and a nice web app using Leptos.

04:15.000 --> 04:20.000
And so you would start coding and soon you would have a prototype.

04:20.000 --> 04:23.000
Soon the prototype would run CI for itself.

04:23.000 --> 04:27.000
So it would be time to present the project to the Knicks community

04:27.000 --> 04:30.000
at FOSDEM and tell people to try it.

04:30.000 --> 04:32.000
You would still want them though.

04:32.000 --> 04:33.000
It's still a prototype.

04:33.000 --> 04:36.000
Everything you talked about today is maybe not yet fully implemented,

04:36.000 --> 04:41.000
but still it's ready for beta and you're waiting for feedback

04:41.000 --> 04:45.000
for issues, a lot of issues, maybe a contribution

04:45.000 --> 04:47.000
even to the actions library.

04:47.000 --> 04:51.000
And all that would be left for you to do is to thank everyone

04:51.000 --> 04:53.000
for listening to you.

