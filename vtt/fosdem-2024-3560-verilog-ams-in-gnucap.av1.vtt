WEBVTT

00:00.000 --> 00:10.000
Welcome to Paul and Felix.

00:10.000 --> 00:13.000
Please start.

00:13.000 --> 00:19.000
They will be talking about the value of AMS in new cap.

00:19.000 --> 00:21.000
You can start. Thank you.

00:21.000 --> 00:26.000
Okay. I'm Al Davis and this is Felix over here.

00:26.000 --> 00:31.000
We're doing this presentation on Veralog AMS and GNU cap.

00:31.000 --> 00:33.000
So let's see what we have here.

00:33.000 --> 00:36.000
Okay. Here's an outline of the talk.

00:36.000 --> 00:39.000
I'm going to give about half and Felix will give about half.

00:39.000 --> 00:42.000
So we're going to kind of swap places midway through.

00:42.000 --> 00:44.000
The outline, what is GNU cap?

00:44.000 --> 00:46.000
Some history.

00:46.000 --> 00:51.000
All about the architecture of the program and the plug-ins.

00:51.000 --> 00:54.000
What is Veralog AMS?

00:54.000 --> 00:57.000
Something that some people, a lot of people need to know.

00:57.000 --> 01:00.000
Model gen is our model compiler that generates,

01:00.000 --> 01:05.000
essentially generates C++ models from Veralog.

01:05.000 --> 01:10.000
And we'll talk about some of the features,

01:10.000 --> 01:13.000
what we've worked on for the last year in a roadmap.

01:13.000 --> 01:16.000
First of all, what is GNU cap?

01:16.000 --> 01:20.000
Initially, the project started a whole bunch of years ago

01:20.000 --> 01:24.000
when I wanted to do circuit simulation on a Trash 80.

01:24.000 --> 01:26.000
You remember those?

01:26.000 --> 01:32.000
It's an 8-bit computer that I had a big 4K of memory in the thing

01:32.000 --> 01:34.000
and I thought I could do circuit simulation on it

01:34.000 --> 01:36.000
and that's what got me started on it.

01:36.000 --> 01:41.000
And one characteristic of the Trash 80 is that

01:41.000 --> 01:43.000
they're not big enough to run SPICE.

01:43.000 --> 01:48.000
And so, I mean, quite far from big enough actually.

01:48.000 --> 01:51.000
But anyway, that was the original intent.

01:51.000 --> 01:55.000
And ultimately, as the project developed,

01:55.000 --> 01:58.000
the goal was to go beyond SPICE,

01:58.000 --> 02:01.000
not just to re-implement SPICE, but to go past it.

02:01.000 --> 02:03.000
And we have in some ways.

02:03.000 --> 02:10.000
So, as it stands now, very much changed from the original Fortran.

02:10.000 --> 02:14.000
It has a very nice plug-in-based architecture,

02:14.000 --> 02:18.000
written in C++ modular, and it's written in such a way

02:18.000 --> 02:21.000
as to encourage public participation in the code

02:21.000 --> 02:24.000
because anybody can write, anybody can make a plug-in.

02:24.000 --> 02:28.000
And you don't have to necessarily wait like in many projects

02:28.000 --> 02:31.000
for the project supervisor to accept it.

02:31.000 --> 02:36.000
As soon as you make a plug-in, it's available.

02:36.000 --> 02:40.000
History, actually it was about 1980 that I got started.

02:40.000 --> 02:44.000
Al Circuit Simulator was a grad school project,

02:44.000 --> 02:46.000
and that was the first one that was,

02:46.000 --> 02:50.000
that was the version that was, really had some features in it.

02:50.000 --> 02:54.000
Released under GPL in 1992.

02:54.000 --> 02:57.000
GNU Cap in 2001, a GNU project.

02:57.000 --> 03:01.000
They treat us pretty well.

03:01.000 --> 03:07.000
And around 2008 to 2010, we re-architected the whole thing

03:07.000 --> 03:13.000
to use plug-ins as opposed to everything compiled into a big blob,

03:13.000 --> 03:19.000
which has, which makes a real big difference in collaborative development.

03:19.000 --> 03:29.000
Beyond Spice, GNU Cap is an early, an early mixed signal simulator.

03:29.000 --> 03:32.000
The emphasis is on mixed signal, mixed analog and digital,

03:32.000 --> 03:36.000
and even mixed different kinds of analog.

03:36.000 --> 03:42.000
And the idea of implicit mixed mode was really the terminology I used

03:42.000 --> 03:48.000
at the time for what they later came to call connect modules,

03:48.000 --> 03:54.000
which the VARILOG spec came about 10, 15 years later than this.

03:54.000 --> 04:00.000
Fast Spice, it's actually, in a way, the original fast spice

04:00.000 --> 04:05.000
in the sense that it, the algorithms will do partial solutions.

04:05.000 --> 04:08.000
And if you have a circuit that's only half active,

04:08.000 --> 04:12.000
it'll kind of push the inactive side out of the way

04:12.000 --> 04:14.000
and just simulate the half that's active,

04:14.000 --> 04:19.000
and you get some better speed that way than you would with a,

04:19.000 --> 04:22.000
let's say, the straight out spice algorithm.

04:22.000 --> 04:25.000
And if you don't look too deeply, it actually looks like the spice algorithm.

04:25.000 --> 04:27.000
You may not notice the difference.

04:27.000 --> 04:38.000
And another area that GNU Cap has done some work with the time step control.

04:38.000 --> 04:45.000
In spice, usually, most people will actually specify a time step.

04:45.000 --> 04:47.000
You don't have to do that in GNU Cap.

04:47.000 --> 04:50.000
It's smart enough to figure all that out.

04:50.000 --> 04:56.000
And so the transient analysis time stepping works a bit better.

04:57.000 --> 04:59.000
Mixed mode.

04:59.000 --> 05:02.000
Oh, yes, digital techniques for analog.

05:02.000 --> 05:11.000
What I mean here is that we use a matrix solver that actually only,

05:11.000 --> 05:14.000
that solves pieces of the matrix without doing the whole thing.

05:14.000 --> 05:17.000
Yet from a distance, it looks like it's solving the whole thing.

05:17.000 --> 05:22.000
But in practice, when you're doing circuit simulation,

05:22.000 --> 05:27.000
a lot of times, a lot of parts of the circuit are latent

05:27.000 --> 05:30.000
in the sense that there's really nothing happening there.

05:30.000 --> 05:35.000
And if there's nothing happening, there's no need to spend any CPU time computing it.

05:35.000 --> 05:43.000
And so GNU Cap uses cues and a variety of techniques

05:43.000 --> 05:46.000
that you normally only find in digital simulation.

05:46.000 --> 05:48.000
But we use it on the analog side.

05:48.000 --> 05:55.000
And if it fits your circuit, it can actually help a lot in terms of speed.

05:55.000 --> 05:59.000
If it doesn't fit your circuit, let me back this up a bit.

05:59.000 --> 06:01.000
Since I...

06:05.000 --> 06:07.000
Okay, here we go.

06:07.000 --> 06:13.000
If it doesn't fit your circuit, then essentially you have spice.

06:14.000 --> 06:16.000
But so we have...

06:16.000 --> 06:21.000
For the analog, we have an event queue like you have in digital simulation.

06:21.000 --> 06:26.000
We have a matrix solver that can solve only little pieces of the matrix

06:26.000 --> 06:29.000
when we don't need the whole thing.

06:29.000 --> 06:32.000
Low-rank partial matrix solver, that's what I mean.

06:32.000 --> 06:38.000
Low-rank means that, hey, I got a matrix of 10,000 nodes,

06:38.000 --> 06:41.000
but only 30 of the nodes actually need to be solved.

06:41.000 --> 06:43.000
We can do that.

06:43.000 --> 06:46.000
Where it actually incrementally updates the matrix,

06:46.000 --> 06:51.000
and then so that you make an incremental update to the previous matrix.

06:51.000 --> 06:54.000
It looks like you did the whole thing, but you didn't.

06:54.000 --> 06:58.000
It only needs to update the little piece.

06:58.000 --> 07:04.000
And this gives us better speed with full spice accuracy.

07:04.000 --> 07:10.000
The time step control in GNU Cap, transient analysis time step.

07:11.000 --> 07:14.000
The simulator actually picks a time step.

07:14.000 --> 07:20.000
It's actually more automatic in GNU Cap than in other simulators,

07:20.000 --> 07:23.000
in particular because we look at things like cross events.

07:23.000 --> 07:26.000
Now, a cross event is where your signal crosses a certain threshold.

07:26.000 --> 07:29.000
And spice doesn't get that at all.

07:29.000 --> 07:33.000
It doesn't do anything with cross events, but we do.

07:33.000 --> 07:38.000
And it actually helps a lot in terms of getting the correct time step control,

07:38.000 --> 07:46.000
particularly in control of a scary thing that's known as trapezoidal ringing.

07:46.000 --> 07:49.000
It really controls that pretty well.

07:49.000 --> 07:51.000
And then also getting started.

07:51.000 --> 07:56.000
What I mean by getting started there is getting the simulator started.

07:56.000 --> 07:59.000
Algorithms to how do you start this?

07:59.000 --> 08:03.000
What time step do you use right at the beginning before you have any information?

08:03.000 --> 08:06.000
We do that.

08:06.000 --> 08:12.000
The software architecture, it's in C++, a big emphasis on the plugins.

08:12.000 --> 08:19.000
The plugins are very much a part of the system that they're not optional.

08:19.000 --> 08:27.000
Everything is a plugin in GNU Cap, the simulation algorithms, the commands, the device models.

08:27.000 --> 08:34.000
GNU Cap analog simulator has no built-in device models at all.

08:34.000 --> 08:37.000
All device models are plugins.

08:37.000 --> 08:38.000
And I mean all.

08:38.000 --> 08:40.000
Even the resistor is a plugin.

08:40.000 --> 08:49.000
Even the, let's call it, submodels, a blob that you might want to use to make a model, those are plugins.

08:49.000 --> 08:55.000
So that as it starts out without any plugins, there are no models at all.

08:55.000 --> 09:02.000
So basically from the viewpoint of development, you want to do models, you're doing plugins.

09:03.000 --> 09:13.000
And I've heard accusations that in a plugin-based system it creates a hierarchy of developers that whether you're working on the plugin or not,

09:13.000 --> 09:19.000
no, if you're doing models, you're always working on plugins, even us.

09:20.000 --> 09:32.000
And so the program, so GNU Cap actually consists of a main program, a library, and plugins, and some utility programs.

09:32.000 --> 09:39.000
Utility programs like, well, one that we're going to talk about a bit a little later is the model compiler.

09:39.000 --> 09:47.000
Model compiler takes Veralog code and translates that into C++ code that we use as a plugin.

09:47.000 --> 09:55.000
And basically ultimately we're leading towards doing the whole language of Veralog AMS.

09:55.000 --> 10:03.000
The library, the GNU Cap library contains a, it's basic stuff that you need.

10:03.000 --> 10:05.000
It's not commands or anything like that.

10:05.000 --> 10:12.000
The library has things like the matrix solver, a circuit database, IO, has an expression evaluator.

10:12.000 --> 10:21.000
And these, this is just a library of functions you can call, databases that you can use to make plugins where the real work is done.

10:26.000 --> 10:33.000
And another bit about why on the plugins is that the plugins actually enforce modularity.

10:33.000 --> 10:38.000
Modularity is supposed to be one of those features of coding that you're supposed to do to make good code.

10:38.000 --> 10:48.000
If you violate modularity rules, the concept of the plugins don't work because they have to be, one model is independent of another.

10:48.000 --> 10:56.000
If I have a resistor model, I can't, it can't know anything about any of the other models other than through its, other than through its intended interface.

10:56.000 --> 11:07.000
So that you, you can't put in these random go-tos and come-from's or whatever you want to call them to get from spot to spot because it violates the plugin scheme.

11:07.000 --> 11:18.000
It just, so the, the coding rules tend to be very strict when you're using plugins because it's necessary for the plugins to work and it actually helps everybody to do that.

11:18.000 --> 11:33.000
So the idea of collaboration, one thing about the plugins is that in terms of somebody might make a plugin to do something and submit it and say, hey, I'd like you to, I'm going to do a pull request.

11:33.000 --> 11:37.000
I want you to put this into your product. I have this code.

11:37.000 --> 11:45.000
And, and, and my response is that we don't have to because you have a plugin, you put it out and it's available.

11:45.000 --> 11:52.000
And so you can have, you can have your caducap installed on your, on your Linux box.

11:52.000 --> 11:55.000
And let's say you installed it from the Debian package or something like that.

11:55.000 --> 12:13.000
And then you, you can essentially make your own custom version by, by, by twiddling with the plugins and, and, and do that in spite of the fact that you have the main, main installation through your library manager or through, through the,

12:13.000 --> 12:26.000
let's say you're in a university, the, the, the, the computer staff has installed it there and, and every student can have their own little twisted version to make models or whatever you want.

12:26.000 --> 12:38.000
And, and, oh yes, I, on quality, one thing about sometimes when people are making code to do something, the quality isn't all that great.

12:38.000 --> 12:46.000
And I look, and I look at that and say, you know, well, gee, I'd like to make this available to everybody, but, but with plugins, it's not a problem.

12:46.000 --> 12:50.000
We make it available and it's optional. If you want it, you use it. If you don't want it, you don't use it.

12:50.000 --> 12:56.000
So what we have is, it basically opens up who can participate.

12:56.000 --> 13:00.000
Okay. How are, what is, what is a plugin? How do they work?

13:00.000 --> 13:05.000
Basically the, well, first of all, they're dynamically loaded.

13:05.000 --> 13:10.000
They're DL open extensions. They just use the, the normal system called DL open.

13:10.000 --> 13:14.000
They're standard shared object models like libraries.

13:14.000 --> 13:21.000
And that's really, that's really the, the, the essence of how, of what they are.

13:22.000 --> 13:31.000
The, the, the basis is C++ derived classes like, let's say, let's say I have a, a type of plugin which is a device model.

13:31.000 --> 13:36.000
There's a base class that defines what a device, device model is, defines the interface.

13:36.000 --> 13:40.000
And I derive a class from that and I got my specific model.

13:40.000 --> 13:49.000
I got my MOSFET. I got my, my motor or whatever I'm going to make a model of.

13:49.000 --> 13:56.000
And, and I, I just loaded and through the C++ derived classes mechanism, they're hooked in.

13:56.000 --> 14:12.000
The dispatcher is a way of registering a plugin that, let's say I have a resistor and I, I, I have it, I've written this plugin for, for my own special kind of resistor.

14:12.000 --> 14:21.000
We have something called a dispatcher so that when you load the plugin with DL open, it registers itself with the dispatcher.

14:21.000 --> 14:24.000
And so now it can be found, it can be used.

14:24.000 --> 14:30.000
And, and it gives you a nice seamless interface of how, how you would use a plugin.

14:30.000 --> 14:32.000
Just as if they were built in.

14:32.000 --> 14:39.000
So in spite of the fact that all of this stuff is really external to the program, it looks like it's built in.

14:40.000 --> 14:42.000
Oh yes, wrappers.

14:42.000 --> 14:48.000
Well, sometimes we get code models, whatever that are written for something else.

14:48.000 --> 14:51.000
And I might have a different interface.

14:51.000 --> 14:57.000
Like for instance, we're talking, we're talking about device models here.

14:57.000 --> 15:02.000
We have device models of MOSFETs and transistors and stuff like that.

15:02.000 --> 15:04.000
Transmission lines.

15:04.000 --> 15:15.000
Suppose I have this old model for a, let's say it's a JFET and I look in the old Spice 3F5 code and I say, oh, here's a JFET model.

15:15.000 --> 15:29.000
The wrapper, we have a wrapper that wraps the, wraps the Spice model and makes it look like a GNU-CAP model so we can use it as a plugin.

15:29.000 --> 15:45.000
And so the result of that is that in, in addition to being able to use models that are compiled for GNU-CAP, we can use models that were designed for Spice 3F5, JSPICE,

15:45.000 --> 15:50.000
which is a special version of Spice designed for Josephson junctions and so on.

15:50.000 --> 15:54.000
And, and, and we can use models that are designed for NG SPICE.

15:54.000 --> 15:56.000
We can use them all as plugins.

15:57.000 --> 16:00.000
And through, through this concept of wrappers.

16:02.000 --> 16:04.000
Plugins, what? Okay.

16:04.000 --> 16:11.000
I, I've been talking mostly about devices as plugins, but also all of the commands are plugins too.

16:11.000 --> 16:14.000
The AC analysis is a plugin, the transient analysis.

16:14.000 --> 16:17.000
Right down to the source languages.

16:17.000 --> 16:22.000
Plugins determine the form, the input and output format, the input format.

16:22.000 --> 16:31.000
So that one, one way, one thing that might want in a circuit simulator might want to read Spice files, Spice, Spice input files.

16:31.000 --> 16:33.000
So we have a plugin that reads Spice input files.

16:33.000 --> 16:36.000
We have another plugin that reads Veralog files.

16:36.000 --> 16:45.000
And I probably shouldn't say it, but spec, because Spectre is a proprietary simulator from Cadence, but we can also read Spectre files.

16:45.000 --> 16:50.000
And to give you a path out of, out of Spectre, if you happen to have that.

16:51.000 --> 16:54.000
Jita is a schematic editor.

16:54.000 --> 17:00.000
We can read in the Jita files as an input and simulate from them.

17:00.000 --> 17:05.000
Quixator, the Quix project, which has been kind of dormant.

17:05.000 --> 17:09.000
We can read some of those files too.

17:09.000 --> 17:25.000
And so the idea is to be able to use the plugin mechanism to import from import, export from other code that wasn't necessarily designed for GNU Cap.

17:25.000 --> 17:27.000
We can use it.

17:27.000 --> 17:30.000
The idea is to facilitate sharing here.

17:30.000 --> 17:33.000
Source languages, measurements.

17:33.000 --> 17:36.000
There's some measurement plugins too.

17:36.000 --> 17:45.000
There's actually about 10 different types of plugins that work with GNU Cap to do various things.

17:45.000 --> 17:47.000
Plugins, wrappers. Okay.

17:47.000 --> 17:57.000
The wrappers, the idea of the wrappers is that like, like let's say I have this C model from that was written for Spice 3F5,

17:57.000 --> 18:02.000
which incidentally is the way Berkeley still distributes their B-SIM 3 models.

18:02.000 --> 18:07.000
And B-SIM 3, they're still on C.

18:07.000 --> 18:17.000
But anyway, anyway, we can, there's a lot of models that are there that may not be the latest version,

18:17.000 --> 18:21.000
but they're still available and still of interest for archival purposes.

18:21.000 --> 18:25.000
The idea is that sometimes you're working on something, I'm not going to say,

18:25.000 --> 18:27.000
well, I don't want to use the current version of the model.

18:27.000 --> 18:29.000
I want to use one that's four years old.

18:29.000 --> 18:38.000
And the four-year-old one, that four-year-old model is written in C, and we can read those C models and use them as plugins for GNU Cap.

18:38.000 --> 18:43.000
And not only that, but as we're going to be getting to a little later with the model compiler,

18:43.000 --> 18:53.000
the way we like to do it today is to write the models in Veralog, and we can do that too.

18:53.000 --> 19:01.000
Leading on to the model compiler, the model compiler generates C++ code from a model description.

19:01.000 --> 19:06.000
The model description, wow.

19:06.000 --> 19:08.000
Okay.

19:08.000 --> 19:13.000
The model description is, yes, it's time to turn it over to Felix.

19:13.000 --> 19:19.000
The model description is written in Veralog AMS, and so I'm going to turn it over to Felix,

19:19.000 --> 19:23.000
and he's going to tell you about the model compiler and the work we've done recently.

19:38.000 --> 19:49.000
Can you hear me?

19:49.000 --> 19:51.000
Test, whatever.

19:51.000 --> 19:57.000
So the model compiler, I just wait for a start sign.

19:57.000 --> 20:00.000
Test, test.

20:00.000 --> 20:01.000
All right.

20:01.000 --> 20:08.000
So, yeah, other than Al giving a basic generic instruction from the top and historical stuff,

20:08.000 --> 20:19.000
I'll introduce some of the work we did last year on that NLNet grant, which we have an extension for already.

20:19.000 --> 20:26.000
So one of our plans is generate code for other simulators, which happens to be on that slide.

20:26.000 --> 20:35.000
And the model gen, the previous one read some format that Al came up with, like, 20, 25, 30 years ago,

20:35.000 --> 20:43.000
before Veralog even existed, and that needed a little bump, and we do that now.

20:43.000 --> 20:47.000
Veralog AMS, some of you know it, maybe some of you don't.

20:47.000 --> 21:01.000
It's a long project, and it is a common denominator for a lot of stuff which started up as digital simulation and verification tool,

21:01.000 --> 21:05.000
and it's an industry standard now.

21:05.000 --> 21:20.000
And the AMS extension built on top of the previous stuff, adding the conservative flow and conservative and signal flow disciplines

21:20.000 --> 21:26.000
that otherwise are only known from SPICE simulation at that time.

21:26.000 --> 21:34.000
And former SPICE devs have thought about that in detail, and I think they did a good job with that standard.

21:34.000 --> 21:45.000
Yeah, there's no free implementation of that before the one we are working on now, I guess, and if I'm wrong, let me know.

21:45.000 --> 21:56.000
The features are a bit more tricky because it adds stuff that was available already in the digital Veralog, like hierarchical modeling.

21:57.000 --> 22:05.000
But like computational efficiency in analog mixed signal simulation doesn't make sense if you can't describe these networks,

22:05.000 --> 22:15.000
but the language itself has features that make these optimizations that we will need even possible.

22:15.000 --> 22:23.000
That way we get true mixed signal, that's something Al has already explained, and we head towards system level analog,

22:23.000 --> 22:27.000
but still with analog signals in them.

22:27.000 --> 22:39.000
The current implementations are centered around this Veralog A, which started with ADMS, which built a SPICE kind of front and for,

22:39.000 --> 22:48.000
or a SPICE targeting model compiler in around 2000, and this is the one we are actually trying to replace.

22:49.000 --> 22:56.000
In the meantime, there's OpenVAF, and it has a simplified SPICE interface that builds binary blobs that are now loaded into,

22:56.000 --> 23:05.000
I think, NG SPICE, maybe SICE, but it removes stuff from the SPICE interface that we would need rather than add stuff that we already have.

23:06.000 --> 23:23.000
So that's not what we want to do, and with that project in 23-24, we kind of took over or take over or overtake these developments in terms of features.

23:24.000 --> 23:35.000
Generally, the standard allows analog compact modeling, which is a great feed which Vladek has been putting much time into,

23:35.000 --> 23:42.000
and hence we do have Veralog A compact models, which we can now use without that work that wouldn't be possible,

23:42.000 --> 23:49.000
and a model compiler without models is a harder start probably.

23:49.000 --> 24:00.000
So beyond that Veralog A, that's the MS in Veralog AMS, L has been tinkering with these ideas since the early days.

24:00.000 --> 24:05.000
The standard document we currently have is from 2014.

24:05.000 --> 24:09.000
I think there will be an update at some point.

24:09.000 --> 24:17.000
Maybe we will have to do our own, but it's a pretty stable standard, and it's surprisingly stable,

24:18.000 --> 24:24.000
and it makes a lot of sense when you study it, and I had to because I had to implement it.

24:24.000 --> 24:36.000
This Veralog AMS Veralog was born in 2023, and we released the first master release last month,

24:36.000 --> 24:49.000
and we've got this funding for 2024 to add more stuff, and I will go through the features that we have by now,

24:49.000 --> 24:54.000
and that's the overtaking bit, so we do support hierarchy.

24:54.000 --> 25:00.000
We have Paramset, which is an essential component of the Veralog AMS standard.

25:00.000 --> 25:08.000
We can compile them. We do have Binning, which is available in SPICE as well,

25:08.000 --> 25:11.000
but it's much more difficult to use, and it's not standardized.

25:11.000 --> 25:19.000
We have compliant sources, like Veralog has different types of sources for voltages and flows and currents,

25:19.000 --> 25:27.000
and switching sources and whatnot, and making these compliant with the standard was a bit more work than anticipated.

25:27.000 --> 25:35.000
But anyway, we support tolerances. Different types of the system can follow different tolerances.

25:35.000 --> 25:40.000
You can have a temperature, and you can have a low voltage and a high voltage,

25:40.000 --> 25:45.000
and they all have different tolerances, and the standard and our implementation accounts for that.

25:45.000 --> 25:52.000
We add the time control to the model generator side rather than leaving it to the simulator,

25:52.000 --> 25:56.000
and the extensibility, I'll get to that.

25:56.000 --> 26:02.000
I think I said a lot, and I've got not so much time,

26:02.000 --> 26:07.000
so I'll just skip to the examples today, which I want to highlight, because they are important.

26:07.000 --> 26:14.000
The Compiled Paramset means, in addition to the module overloading you get with Paramset,

26:14.000 --> 26:21.000
you say, I've got a component, and I want to build a new one, and these are my parameter overloads.

26:21.000 --> 26:25.000
So you put in that Paramset statement into your netlist or your file,

26:25.000 --> 26:35.000
and that generates that new possibly simplified model, and we don't need to deal with model cards or the syntax anymore.

26:35.000 --> 26:42.000
For example, here we have ranges, and that gives us a way to bin,

26:42.000 --> 26:51.000
and a way to reuse code as well, because code reuse, why is this here?

26:51.000 --> 26:54.000
I forgot, but we will get to code reuse anyway.

26:54.000 --> 26:59.000
So the second phase of Paramset is the pruning.

26:59.000 --> 27:05.000
So you take your Paramset, you take your model, you combine the two before you compile.

27:05.000 --> 27:09.000
That way, structures in the model, here this is a simple capacitor model,

27:09.000 --> 27:16.000
I'm printing here, it has the describing equation, is this DDT statement stuff here in the else branch,

27:16.000 --> 27:21.000
but it has an if branch as well, and under some conditions it works differently.

27:21.000 --> 27:25.000
We want to get rid of that, because it interferes with performance,

27:25.000 --> 27:30.000
so we put in a Paramset that doesn't set the IC parameter,

27:30.000 --> 27:35.000
and so this condition is never satisfied, and it's just pruned,

27:35.000 --> 27:39.000
and that is the stuff we send to GCC to compile.

27:39.000 --> 27:44.000
Well, in the capacitor example it's very simple, it's one line,

27:44.000 --> 27:48.000
but imagine you have a million instances of some device,

27:48.000 --> 27:54.000
it could be a transistor model with lots of lines,

27:54.000 --> 28:00.000
and it computes the same constant value in each iteration of the simulation again and again,

28:00.000 --> 28:05.000
because you didn't prune it, the simulator doesn't know about anything

28:05.000 --> 28:08.000
because the compiler has compiled it all in.

28:08.000 --> 28:16.000
Well, that's a lot of work, and if you load pruned models, what do you get?

28:16.000 --> 28:23.000
It runs faster, surprise, and you get the same result because whether you pre-compute the additions,

28:23.000 --> 28:27.000
the exponentiation, the logs, whatever, it doesn't matter,

28:27.000 --> 28:34.000
but the model is simpler, and as a corollary, compilation time doesn't matter.

28:34.000 --> 28:41.000
You can take as much time to compile stuff as you want and optimize stuff.

28:41.000 --> 28:51.000
On hierarchy, yeah, so we have compact models with these relational statements here,

28:51.000 --> 28:56.000
and we have contribution statements, well, math statements,

28:56.000 --> 29:01.000
which you could replace by just adding sub-device instances.

29:01.000 --> 29:05.000
Well, we can do that, sure, but we can also mix them.

29:05.000 --> 29:08.000
You can have this and that, and you just put it into one box,

29:08.000 --> 29:12.000
and whatever you have, that's the code reuse maybe,

29:12.000 --> 29:16.000
you just reuse the resistor you already implemented and add some capacitor to it,

29:16.000 --> 29:22.000
and you get your low-pass filter, and you should reuse models because, well,

29:22.000 --> 29:26.000
reusing models, you don't need to compile them again,

29:26.000 --> 29:30.000
and you have a smaller memory footprint at runtime.

29:30.000 --> 29:40.000
You've got one diode for all your 1700,000 transistors in your net list.

29:40.000 --> 29:42.000
You need to validate them once.

29:42.000 --> 29:45.000
You don't need to validate every single implementation of a diode,

29:45.000 --> 29:53.000
and yeah, that's a quote from the LRM, and it is about the extensibility.

29:53.000 --> 29:59.000
The LRM explicitly says, we want to enable extensions,

29:59.000 --> 30:02.000
and that's how I implemented it.

30:02.000 --> 30:06.000
So you go and implement your own functions in the end,

30:06.000 --> 30:12.000
and same rules apply then for core team developer,

30:12.000 --> 30:17.000
so here's the roadmap, and maybe I better leave it.

30:17.000 --> 30:20.000
Shall I continue for two more minutes?

30:20.000 --> 30:23.000
Okay.

30:23.000 --> 30:31.000
The roadmap is we've got three sub-projects in the project that we have already got funding for,

30:31.000 --> 30:35.000
and we need to work on the analog part a bit,

30:35.000 --> 30:37.000
but also we add logic modeling,

30:37.000 --> 30:42.000
so that would kind of round up the whole package a bit.

30:42.000 --> 30:50.000
And on the simulator side, I mean we only have this simulator currently as a main target,

30:50.000 --> 30:55.000
and Discipline's Nature's Connect Semantics is something defined in the Verilog AMS standard.

30:55.000 --> 30:59.000
It tells about, or it defines how to model interconnects

30:59.000 --> 31:03.000
between digital parts and analog parts of the circuit,

31:03.000 --> 31:10.000
and the simulator needs to evaluate some rules to place these gadgets

31:10.000 --> 31:16.000
that do the transformation between the disciplines,

31:16.000 --> 31:19.000
following the rules from the standard.

31:19.000 --> 31:24.000
And the third package is also important,

31:24.000 --> 31:26.000
because nobody else does it,

31:26.000 --> 31:31.000
we need to be able to interoperate across the boundaries of tools.

31:31.000 --> 31:36.000
For example, we need to be able to store a net list and send it to somebody else

31:36.000 --> 31:39.000
to be able to make use of it.

31:39.000 --> 31:44.000
And this is something we need to define this year,

31:44.000 --> 31:50.000
and also we need to target other simulators with our model compiler.

31:50.000 --> 31:53.000
Currently it writes models that only run with GNUcap,

31:53.000 --> 31:58.000
it will run models that also run with NG-Spice when we are lucky.

31:58.000 --> 32:01.000
We shall see which one we will pick,

32:01.000 --> 32:04.000
and the device wrappers will also be extended,

32:04.000 --> 32:10.000
so we will add more of the current work that is happening in the field,

32:10.000 --> 32:16.000
like pushing the NG-Spice support to the current version, maybe.

32:19.000 --> 32:23.000
We have the plug-in interface, everyone can help,

32:23.000 --> 32:27.000
and we also want to see a wish list, really,

32:27.000 --> 32:30.000
because if I see something is needed, somebody says,

32:30.000 --> 32:33.000
oh, do generate, generate is great.

32:33.000 --> 32:36.000
Well, that triggers me to read about generate.

32:36.000 --> 32:38.000
The standard is so many hundred pages long,

32:38.000 --> 32:41.000
I don't know every single aspect of it,

32:41.000 --> 32:44.000
and if something is needed, that makes me look at it,

32:44.000 --> 32:49.000
and I know, oh, generate is now at the top of my to-do list, for example,

32:49.000 --> 32:54.000
or somebody says, oh, there are these Laplace filters,

32:54.000 --> 33:00.000
and they have a nice formulation or a nice way of specifying linear filtering.

33:00.000 --> 33:03.000
That made me curious, and I implemented them.

33:03.000 --> 33:07.000
They are not ready for release, but they will be out very soon,

33:07.000 --> 33:12.000
or somebody says, I don't know,

33:12.000 --> 33:16.000
give me an example, and I look at it and implement it,

33:16.000 --> 33:20.000
because it makes me curious, that's how it works.

33:20.000 --> 33:21.000
Thank you very much.

33:21.000 --> 33:28.000
Thank you for your time, and sorry for the additional time I took.

33:28.000 --> 33:31.000
Thank you, Mr. O.

33:31.000 --> 33:33.000
Thank you very much.

