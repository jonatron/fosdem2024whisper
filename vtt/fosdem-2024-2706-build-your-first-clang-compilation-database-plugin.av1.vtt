WEBVTT

00:00.000 --> 00:11.720
Okay.

00:11.720 --> 00:15.080
Okay. I'll begin.

00:15.080 --> 00:20.560
Now that's some oxygen.

00:20.560 --> 00:21.720
Back in the room. Okay.

00:21.720 --> 00:26.560
Hi. So, compilation databases.

00:26.560 --> 00:28.720
Going to talk a bit about that.

00:28.720 --> 00:30.320
Here's the motivation in examples.

00:30.320 --> 00:33.680
So, we have some really simple project structure here,

00:33.680 --> 00:35.760
your typical project, I don't know.

00:35.760 --> 00:38.000
And you have a file that you compiled,

00:38.000 --> 00:41.480
file A dot CPP, and here are some flags that you

00:41.480 --> 00:44.760
used to compile that file.

00:44.760 --> 00:46.360
Really simple, right?

00:46.360 --> 00:48.640
Now, the question that the compilation database

00:48.640 --> 00:51.280
kind of wants to answer is,

00:51.960 --> 00:54.440
which flags would you give

00:54.440 --> 00:56.680
your static analysis tool or whatever tool you're

00:56.680 --> 01:00.000
using for file A, for example,

01:00.000 --> 01:05.200
and also a bit more difficult to answer for file B, right?

01:05.200 --> 01:08.320
You really don't know which

01:08.320 --> 01:11.000
flags you should use just by looking at that.

01:11.000 --> 01:12.320
You as a human might know,

01:12.320 --> 01:16.880
but as a two-chain difficult to answer question.

01:17.040 --> 01:20.720
And that is where compilation database

01:20.720 --> 01:24.520
really comes into play.

01:25.200 --> 01:27.600
Mostly, you notice that when something doesn't work.

01:27.600 --> 01:29.840
So, you do some static analysis.

01:29.840 --> 01:33.400
So, I tend to use CMake,

01:33.400 --> 01:36.400
although I heard that there are not many fans around.

01:36.400 --> 01:39.200
It works for me.

01:39.200 --> 01:41.840
And Ninja, all of these, they can do that.

01:41.840 --> 01:45.560
Like I think for me, you need some script.

01:45.560 --> 01:48.040
If you don't, if you're built with

01:48.040 --> 01:50.600
systems, some AK stuff,

01:50.600 --> 01:53.880
you can still use beer or beer.

01:54.240 --> 01:56.400
Beer you can also use.

01:56.400 --> 01:59.960
Maybe it's better choice with Bear.

01:59.960 --> 02:02.960
You can do some LDP load magic,

02:02.960 --> 02:05.960
I think, and then intercept the course to your compiler

02:05.960 --> 02:08.720
and then write out the compilation database for you,

02:08.720 --> 02:11.720
even if your system doesn't support it at all.

02:11.720 --> 02:15.160
And also, Clang itself can kind of emit stuff

02:15.160 --> 02:19.480
that you can put in a compilation database with the dash mj flag.

02:19.840 --> 02:21.600
But on the other hand,

02:21.600 --> 02:23.840
if you do that, then you already have the flags, right?

02:23.840 --> 02:26.000
So, if you pass that flag to Clang,

02:26.000 --> 02:28.120
then you already have the flags.

02:28.120 --> 02:31.960
I don't really see a reason why you want to do that,

02:31.960 --> 02:34.520
like only for some with script situations.

02:34.520 --> 02:36.400
Now, the problem of course is you only have

02:36.400 --> 02:37.520
the four compiled files, right?

02:37.520 --> 02:40.480
For header files, you typically don't compile them.

02:40.480 --> 02:43.920
So, you don't have entries in the compilation database for you,

02:43.920 --> 02:46.400
header files or for some other auxiliary files or

02:46.400 --> 02:50.000
files that you didn't compile yet, stuff like that.

02:50.440 --> 02:53.760
The file that you probably all have seen is

02:53.760 --> 02:55.880
the compile commands JSON file, right?

02:55.880 --> 02:59.400
That lives somewhere in your build directory.

02:59.400 --> 03:01.640
It has entries like these.

03:01.640 --> 03:04.760
So, there's the build directory is one of,

03:04.760 --> 03:06.920
so there is one file right now in

03:06.920 --> 03:11.840
this compilation database that is in the compile commands JSON.

03:11.840 --> 03:13.880
The command is there.

03:13.880 --> 03:17.840
You have which file was actually compiled here,

03:17.840 --> 03:21.000
so the file a.cpp and which is the output file.

03:21.240 --> 03:23.600
So, in this case, it's the main file.

03:24.800 --> 03:28.400
So, this compile command is just one representation of

03:28.400 --> 03:34.240
the compilation database that lives on your hard drive.

03:34.240 --> 03:38.080
In Clang or better in Clang Tooling,

03:38.080 --> 03:40.520
this is where the compilation database

03:40.520 --> 03:42.240
struct lifts or I think it's a class,

03:42.240 --> 03:44.720
but it's slightly simplified.

03:44.720 --> 03:46.800
It's actually pretty simple.

03:46.800 --> 03:48.680
So, there are some methods for

03:48.760 --> 03:53.880
getting some compilation database.

03:53.880 --> 03:55.040
Some methods for loading them.

03:55.040 --> 03:57.040
So, you give it for example some direction and say,

03:57.040 --> 04:00.240
hey, give me the compilation database that corresponds to

04:00.240 --> 04:02.040
this directory or this file.

04:02.040 --> 04:05.120
Or you say, I have this directory.

04:05.120 --> 04:08.880
Please figure out which compilation database I should use.

04:09.880 --> 04:12.920
This is what Clang also internally uses.

04:13.920 --> 04:19.040
These are more interesting for us.

04:19.040 --> 04:23.520
There are two things that can give you

04:23.520 --> 04:25.680
so-called compile commands.

04:25.680 --> 04:28.440
You can either get all of them,

04:28.440 --> 04:29.920
all of them that are contained in

04:29.920 --> 04:33.720
your compilation database,

04:33.720 --> 04:35.840
like the files that you compiled,

04:35.840 --> 04:37.920
or you can ask it to give you

04:37.920 --> 04:42.440
compile commands for files

04:42.440 --> 04:46.280
that you want a compile command for.

04:46.760 --> 04:49.680
A compile command is also pretty simple.

04:49.680 --> 04:53.080
It's basically what you just saw in the JSON file.

04:53.080 --> 04:56.320
It's a directory, the file name.

04:56.760 --> 04:59.720
It has the output file name.

04:59.720 --> 05:04.480
It has the command line as a vector of string.

05:04.480 --> 05:08.120
It parsed already the command line into arguments,

05:08.120 --> 05:10.360
which is actually pretty interesting,

05:10.360 --> 05:12.240
because this is pretty fast.

05:12.240 --> 05:14.960
I started looking into this because ComptiB,

05:14.960 --> 05:20.080
which I previously used for doing this stuff,

05:20.080 --> 05:23.320
it was really, really slow in doing exactly this step,

05:23.320 --> 05:25.360
parsing this and escaping

05:25.360 --> 05:28.880
the bash arguments into a string.

05:28.880 --> 05:32.200
There's one thing that is called heuristic.

05:32.200 --> 05:34.200
Heuristic, that sounds promising.

05:34.400 --> 05:36.520
You use some heuristic to figure out

05:36.520 --> 05:39.920
some flags that you don't really know yet.

05:40.320 --> 05:45.880
What does Clang actually do to give you compile commands?

05:45.880 --> 05:49.520
There's this JSON compilation database,

05:49.520 --> 05:51.080
which is just a specialization of

05:51.080 --> 05:53.320
the normal one that we just saw.

05:53.320 --> 05:56.920
It can load the JSON compile commands,

05:56.920 --> 06:01.120
JSON file, and then it's a compilation database.

06:01.120 --> 06:04.160
It does some steps.

06:04.160 --> 06:06.400
First, it will do stuff like this here,

06:06.400 --> 06:12.400
expanding response files with just irrelevant here.

06:12.400 --> 06:15.720
But what it will also do is it will infer

06:15.720 --> 06:19.040
the missing compile commands,

06:19.040 --> 06:22.720
and then it will also infer the target and driver mode.

06:22.720 --> 06:25.600
What it also does is it loads

06:25.600 --> 06:28.640
some plug-ins which is not showing here.

06:28.640 --> 06:32.000
So what is actually the heuristic that is used by Clang?

06:32.000 --> 06:34.200
Because you may have noticed that you can

06:34.200 --> 06:40.040
open with ClangD,

06:40.040 --> 06:44.720
use some other toolings on a header file,

06:44.720 --> 06:46.100
and will not immediately break.

06:46.100 --> 06:50.120
It will try its best to figure out the flags that you're using.

06:50.120 --> 06:55.480
What it does is it has this interpolation compilation database.

06:55.880 --> 06:59.480
What it does, it finds the closest available file in

06:59.480 --> 07:01.480
your database that is already there,

07:01.480 --> 07:05.480
and then it awards points for path similarity.

07:05.480 --> 07:07.040
So it will use the base name.

07:07.040 --> 07:08.520
So for example, in my example here,

07:08.520 --> 07:13.480
this file a.cpp and file a.h,

07:13.480 --> 07:15.200
they have the same base name,

07:15.200 --> 07:16.520
so this is already a point.

07:16.520 --> 07:19.760
Then you have also in the local structure of your project,

07:19.760 --> 07:22.440
you have some path and it will match on that,

07:22.440 --> 07:25.400
and depending on how similar the path is,

07:25.900 --> 07:29.040
it will award points.

07:29.040 --> 07:31.120
Then if you still have a ties,

07:31.120 --> 07:35.640
then it will use the prefix links as a tie break.

07:35.640 --> 07:39.200
Then in the end, it will replace the file name,

07:39.200 --> 07:42.260
and also remove the output argument

07:42.260 --> 07:46.040
to for example, work with header files.

07:46.720 --> 07:49.680
So now if you use that,

07:49.680 --> 07:52.120
this is the situation where it gets frustrating,

07:52.120 --> 07:55.240
you apply that now and you get some weird flags.

07:55.640 --> 07:59.320
Some that you didn't expect and didn't work.

07:59.440 --> 08:05.920
What happened? We have this other directory down there,

08:05.920 --> 08:09.200
still in gray. Some files list in there,

08:09.200 --> 08:15.080
they match better than our obvious file a.cpp, bad luck.

08:15.080 --> 08:18.880
For me that in other,

08:18.880 --> 08:23.160
this is often a copy of LLVM and that matches a lot.

08:23.160 --> 08:25.400
For me that happens a lot.

08:25.400 --> 08:30.440
Good. So now we know what the problem is and what the solution might be.

08:31.280 --> 08:34.360
Let's start building our own CB.

08:34.360 --> 08:39.680
But first, I will tell you why you might not be doing this.

08:40.600 --> 08:43.040
If you are happy with the default,

08:43.040 --> 08:45.560
obviously, you don't need to put any effort in, right?

08:45.560 --> 08:47.080
It works for you. Perfect.

08:47.080 --> 08:49.760
If your structure is simple of your project,

08:49.760 --> 08:51.920
don't put any work into it.

08:51.920 --> 08:54.000
Also, if you cannot build your tools,

08:54.000 --> 08:57.360
like if you cannot build your Clang Clang D whatever,

08:57.360 --> 09:03.960
and you rely on some fixed version that you get from packages or something,

09:03.960 --> 09:07.680
also cannot use that because you have to link it.

09:08.080 --> 09:10.880
Also, if you're using Clang D,

09:10.880 --> 09:13.960
if you use Clang D,

09:14.360 --> 09:18.960
then chances might be that you can get around with

09:19.000 --> 09:22.720
modifying Clang D's very good configuration file.

09:22.720 --> 09:30.360
It is pretty simple, but you can get around in most of these problems.

09:30.360 --> 09:34.880
If you can just use some script or some hack, do that.

09:34.880 --> 09:39.120
I was telling our working student that I was going to give this talk and he was like,

09:39.120 --> 09:43.680
Pascal, what? I just use bash and replace that.

09:43.680 --> 09:44.920
Why would you do that?

09:44.920 --> 09:47.800
If you can do that, fine.

09:47.800 --> 09:50.680
But why would you want to do that?

09:50.680 --> 09:55.120
The number one reason I would say is you have way more information about

09:55.120 --> 09:57.880
your code base than anyone else.

09:57.880 --> 10:04.240
There are tons of discussions online in Clang related like

10:04.240 --> 10:06.800
bug triggers and so on where people come up and say,

10:06.800 --> 10:11.160
why don't we enhance the interpolation in this and this way?

10:11.160 --> 10:13.380
Then some other person comes along and says,

10:13.380 --> 10:17.660
yeah, we cannot do that because that wouldn't work for this and this cases.

10:17.660 --> 10:22.780
So you have all of the knowledge and you don't have to be very conservative.

10:22.780 --> 10:26.420
The people who write Clang D and Clang, they have to be.

10:27.180 --> 10:32.900
Also, as I said, it's I think a very nice step into working with tooling.

10:32.900 --> 10:37.260
Also, if you're doing something really unconventional,

10:37.260 --> 10:41.620
I don't know, some live building or some obscure compiler that you use,

10:41.820 --> 10:44.380
also might be worth looking at this.

10:44.380 --> 10:49.260
Okay, so let's build our own CDB and

10:49.260 --> 10:54.140
something that is a bit more advanced but that we can still now understand,

10:54.140 --> 10:56.060
even for the purpose of this demo.

10:57.860 --> 11:02.860
That also uses part of Clang D's infrastructure and

11:02.860 --> 11:05.340
is also somewhat useful, right?

11:05.340 --> 11:07.220
So we want something.

11:07.220 --> 11:09.860
What you could do is we could just use an include graph.

11:10.820 --> 11:16.180
So we have this like here, say A includes the header file and so on.

11:16.180 --> 11:21.020
And this is some useful information.

11:21.020 --> 11:22.900
We can generate this information.

11:22.900 --> 11:26.740
We also have some additional information, for example, that file A and

11:26.740 --> 11:28.580
file B live in the same direction.

11:28.580 --> 11:31.060
We did also simple information that we can just use.

11:32.180 --> 11:35.900
Best thing now is that Clang already has information about that and

11:35.900 --> 11:37.180
tools to give you to help you.

11:37.940 --> 11:40.140
Not going to go into all of these, but

11:40.140 --> 11:44.060
there is a nice scanning tool that scans for dependencies of file.

11:44.060 --> 11:46.940
You just keep it a file and say, hey, what are its dependencies?

11:46.940 --> 11:48.220
And it will give you a list.

11:48.220 --> 11:50.300
Like this is perfect.

11:50.300 --> 11:53.180
This gives you, that works with.

11:58.180 --> 12:01.300
So this tool, dependency scan is simple.

12:01.300 --> 12:05.300
But this is the part obviously where it could get very

12:06.300 --> 12:13.060
complicated and work intensive to find a good thing that does best the candidate.

12:13.060 --> 12:13.780
Right?

12:13.780 --> 12:17.740
I did this graph thing now, but you know code better.

12:19.740 --> 12:20.900
So that's basically it.

12:25.020 --> 12:28.060
So how you can use that?

12:28.060 --> 12:29.340
In Clang D, it's pretty simple.

12:29.340 --> 12:31.460
You can just use a compilation database plug-in,

12:31.460 --> 12:34.700
which is a very thin wrapper around this what we just saw.

12:34.700 --> 12:37.060
In Clang, you have to manually overwrite it.

12:37.060 --> 12:38.300
There are two ways to do that.

12:38.300 --> 12:42.340
Either you just change the code, just replace the class name, or

12:42.340 --> 12:45.620
you can do some linking, I will show you where.

12:45.620 --> 12:47.420
For the other tools, as far as I know,

12:49.820 --> 12:55.420
you have to do the same as with Clang D and replace it manually,

12:55.420 --> 12:56.620
which is a bit unfortunate.

12:56.620 --> 13:01.060
I think one can get it to work with all of the extra tools that are not Clang D.

13:02.060 --> 13:06.660
You can also add your own plug-in system.

13:08.260 --> 13:13.100
So compilation database plug-in is actually just this,

13:15.580 --> 13:20.940
which consists of this one method here that says load from directory.

13:22.780 --> 13:29.260
And you take this and we can build our own one.

13:29.260 --> 13:32.300
So we have our custom compilation database plug-in now.

13:32.300 --> 13:34.300
We have this load from directory.

13:34.300 --> 13:37.220
We append this well-known path, easy.

13:38.340 --> 13:42.100
And then we just instantiate our class and return it, done.

13:42.100 --> 13:43.500
Very simple.

13:43.500 --> 13:46.700
And there's one extra step that might be a bit tricky.

13:46.700 --> 13:51.580
You need to link that in, and for that you have to have this static variable created.

13:51.580 --> 13:55.540
The name is not very important, but you have to do that.

13:55.540 --> 13:59.820
And it uses an LLVM registry under the hood, pretty nice.

14:02.740 --> 14:06.540
Yeah, with Clang, I'll upload this slide so you can take a look.

14:06.540 --> 14:09.900
You have to modify either of these here, which is a bit tricky.

14:12.700 --> 14:17.540
So the better way would be to use the plug-in system if you have your own tools.

14:17.540 --> 14:22.700
Just directly taken from Clang D, this works for all the tools.

14:22.700 --> 14:26.460
And if you just want to set your compilation database, you have the default ones and

14:26.460 --> 14:28.500
you can override it with your own plug-in then.

14:31.460 --> 14:34.780
Okay, so there was a lot of code.

14:34.780 --> 14:37.700
I will upload this, of course.

14:37.700 --> 14:40.380
And there's also a demo project online if you want to take a look at that.

14:42.460 --> 14:44.900
If you are a beginner and you're just taking to,

14:44.900 --> 14:49.340
wanted to look into that, because I look at different LLVM code normally and

14:49.340 --> 14:51.060
not at this part of LLVM project.

14:52.020 --> 14:55.700
I had some nice experience with, actually with LLVMs.

14:55.700 --> 14:59.860
I just asked them, hey, I want to do this kind of stuff.

14:59.860 --> 15:01.340
Is there something in Clang?

15:01.340 --> 15:04.660
And it was like, yeah, yeah, which is nice.

15:04.660 --> 15:06.660
And also, don't reinvent the wheel.

15:06.660 --> 15:09.340
If you have Clang already at your hand, there is so

15:09.340 --> 15:12.020
much stuff in there that you can just use, right?

15:12.020 --> 15:13.700
Don't have to do this.

15:13.700 --> 15:16.340
And also, maybe you just don't need this and

15:16.340 --> 15:18.300
can get away with the configuration.

15:19.300 --> 15:23.580
Okay, so there's a demo project that is online right now.

15:23.580 --> 15:26.540
Can take a look at that if you are into Nix.

15:26.540 --> 15:27.980
You can just Nix build it.

15:27.980 --> 15:29.740
It should just work out of the box.

15:31.940 --> 15:37.980
And yeah, to conclude, the compilation database consists of

15:37.980 --> 15:41.540
compile commands, simple, that help your tools and your ID.

15:43.540 --> 15:46.540
For unknown files, we have to use heuristics.

15:46.540 --> 15:50.780
And when you want to customize this behavior of the heuristics,

15:50.780 --> 15:54.380
you have to have some sort of this plug-in.

15:55.900 --> 15:58.940
The easiest integration that you can find with ClangD,

15:58.940 --> 16:01.980
because there you just need to link in your own plug-in,

16:01.980 --> 16:02.780
like I just showed you.

16:03.980 --> 16:06.820
Okay, and last but not least, there are some resources,

16:06.820 --> 16:10.620
very good discussions about why you might do this and

16:10.620 --> 16:14.060
why it's not so easy as it seems when you first start.

16:15.340 --> 16:15.980
Okay, thank you.

16:17.300 --> 16:24.020
I think we have two minutes for question, Adeni.

16:24.020 --> 16:24.540
Yeah?

16:24.540 --> 16:28.420
So how often does the default heuristic fail?

16:28.420 --> 16:31.900
So how often do you need to put it in your own one?

16:31.900 --> 16:35.660
I think it's, so the question was, how often does that fail and

16:35.660 --> 16:36.980
how often do you need your own one?

16:39.660 --> 16:42.580
So for me, it depends highly on the code base.

16:42.580 --> 16:46.300
I have my simple hobby projects where it just works 100% of the time.

16:46.300 --> 16:47.140
I'm happy.

16:47.140 --> 16:52.700
But for example, at work, I have experiences where this is maybe

16:52.700 --> 16:54.540
in 10% of the cases where it works.

16:54.540 --> 16:57.060
And I create a new file and it immediately breaks.

16:57.060 --> 16:58.700
And so something like that would help.

17:00.980 --> 17:03.740
How does this interact with C++ modules?

17:03.740 --> 17:07.020
There with C++ modules, the question was how to stay in

17:07.020 --> 17:08.620
the action with modules.

17:08.620 --> 17:09.660
It gets way more involved.

17:11.380 --> 17:14.860
So for example, the scanning tool has a different mode for modules.

17:14.860 --> 17:19.140
I haven't, to be honest, I haven't looked into that because we're not using modules yet.

17:19.140 --> 17:22.340
But yeah, there's much more work to be done, I think, yes.

17:23.940 --> 17:24.460
Yeah?

17:24.460 --> 17:30.060
Just a little curiosity, what should the answer be if for example,

17:30.060 --> 17:34.740
header files included into different files which have incompatible flags?

17:34.740 --> 17:38.340
Yeah, the question was what should be the way to do,

17:38.340 --> 17:42.380
if some, what should be the way if two header files have incompatible flags?

17:43.380 --> 17:47.260
One header file with incompatible flags.

17:47.260 --> 17:48.180
I don't know.

17:48.180 --> 17:50.980
No one, this is the core question, the core problem here.

17:50.980 --> 17:52.420
No one really knows.

17:52.420 --> 17:55.060
And maybe you have the information for that, right?

17:55.060 --> 17:58.380
You have maybe some clever way of doing that.

17:58.380 --> 18:02.060
But generally, the people of ClangD, they cannot answer that for you.

18:06.060 --> 18:08.860
We should ask LLMs to tell us for that.

18:08.860 --> 18:11.140
Yeah, maybe not ask the LLMs for that.

18:13.380 --> 18:15.260
Okay, I think we are running out of time.

18:15.260 --> 18:16.300
Okay, thank you very much.

18:16.360 --> 18:18.040
Thank you.

18:18.040 --> 18:19.800
Thank you so much.

