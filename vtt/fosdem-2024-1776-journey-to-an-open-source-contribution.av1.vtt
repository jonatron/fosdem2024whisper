WEBVTT

00:00.000 --> 00:13.920
Next, we have Thierry with Journey to an open source contribution.

00:13.920 --> 00:15.840
Thank you.

00:15.840 --> 00:17.120
So thank you for coming.

00:17.120 --> 00:18.120
I'm Thierry Berger.

00:18.120 --> 00:23.720
I love open source and I'm here with you today to tell you about a few open source fixes

00:23.720 --> 00:26.600
or stories I've done.

00:26.600 --> 00:27.600
So follow me.

00:27.600 --> 00:29.240
Let's make things better.

00:29.240 --> 00:32.200
I don't know about you, but I have a dream.

00:32.200 --> 00:38.440
My dream is that different players from different backgrounds, okay, it's a problem technical,

00:38.440 --> 00:43.360
but yeah, with different backgrounds, with different interests, players could still be

00:43.360 --> 00:44.800
able to play together.

00:44.800 --> 00:49.760
So you can imagine an old grandmother playing her match three game, you can see the three

00:49.760 --> 00:54.600
candies, and she will be able to share it with her grandchild.

00:54.600 --> 00:57.000
Hey, I'm a grandchild.

00:57.000 --> 01:07.320
And that grandchild will be able to share that candy to another game, or like a pet's

01:07.320 --> 01:09.440
life simulator game, something.

01:09.440 --> 01:12.640
So even though they have different interests, they can play together.

01:12.640 --> 01:15.200
And it's awesome, so I'm very motivated in that pitch.

01:15.200 --> 01:20.440
So I started a hobby project by using the Bay V game engine, which is an open source

01:20.440 --> 01:22.600
game engine made in Rust.

01:22.600 --> 01:26.080
And the project was going smoothly until I hit a problem.

01:26.080 --> 01:30.720
I couldn't input an ad, and it's a big problem because I want my players authenticated.

01:30.720 --> 01:35.320
And yeah, every email address is AvanHAT, so that's a problem.

01:35.320 --> 01:37.920
So time to fix it.

01:37.920 --> 01:39.320
I have to tell you about my keyboard.

01:39.320 --> 01:42.120
I'm French, I'm using Azure keyboard.

01:42.120 --> 01:48.000
So that means I have to input ALT GRZN0 to input an ad.

01:48.000 --> 01:52.880
And actually, behind the scenes on Windows, it's actually equivalent to control and ALT

01:52.880 --> 01:54.520
and GRZN0.

01:54.520 --> 01:58.760
And that control mapping is pretty important because control can have a lot of capabilities.

01:58.760 --> 02:06.680
It can scroll with the mouse wheel, it can copy, cut-paste, it can move the cursor, it

02:06.680 --> 02:10.160
can scroll with mouse wheel and move the cursor with arrow keys.

02:10.160 --> 02:15.160
Well, anyway, it can do a lot of things, open the task manager and other stuff.

02:15.160 --> 02:21.880
So I opened an issue and the library I'm using, it says bevy edui, a bridge to edui, a UI

02:21.880 --> 02:22.880
library.

02:22.880 --> 02:23.880
Hold the term.

02:23.880 --> 02:26.480
But yeah, I opened that issue.

02:26.480 --> 02:28.640
It's actually scrolling, it's a very long discussion.

02:28.640 --> 02:32.080
You can see it now because I'm using a PDF, but yep.

02:32.080 --> 02:33.600
And eventually we landed on a fix.

02:33.600 --> 02:35.640
It was a very long discussion.

02:35.640 --> 02:40.920
And yeah, I think it's pretty important, pretty interesting when discussions are way longer

02:40.920 --> 02:44.400
than the actual fix because it really shows that communication, software development is

02:44.400 --> 02:47.280
very important.

02:47.280 --> 02:52.440
And yeah, so if you have a problem, just ask questions and eventually everything will

02:52.440 --> 02:54.400
progress.

02:54.400 --> 03:00.560
So now we fixed our at sign, we can progress, right?

03:00.560 --> 03:02.200
That password field was my next difficulty.

03:02.200 --> 03:04.120
I have to tell you a bit more about my project.

03:04.120 --> 03:06.280
I want to support one-time authentication.

03:06.280 --> 03:12.320
So when the user registers to the application, it sends an email to the user.

03:12.320 --> 03:16.880
The user copies that email from their email client and copies that into the application,

03:16.880 --> 03:18.640
into that password field.

03:18.640 --> 03:20.440
And then web.

03:20.440 --> 03:26.000
It was working fine on a native, but on web, it's a bit complicated.

03:26.000 --> 03:31.880
So bevy edui, I told you a little bit about that, uses AR board, which is a library to

03:31.880 --> 03:37.960
support clipboard, but it's mainly focusing on native clients.

03:37.960 --> 03:42.840
So it's a synchronous API and web, it's a problem because we cannot really block the

03:42.840 --> 03:45.040
browser as it would freeze the entire browser.

03:45.040 --> 03:46.320
So it's just not allowed.

03:46.320 --> 03:51.680
And AR board desires to say simple, so that means we cannot add web support to it.

03:51.680 --> 03:59.360
So bevy edui implemented the local only clipboard, which is handy to copy from inside our application

03:59.360 --> 04:03.760
into our application, but that's not enough for my use case because I want to copy from

04:03.760 --> 04:04.760
outside my application.

04:04.760 --> 04:08.480
So time to fix it.

04:08.480 --> 04:13.000
So to fix it, first I checked what were my options and how other projects were doing

04:13.000 --> 04:18.600
it, mainly eFrame, an official framework from e4egui.

04:18.600 --> 04:26.120
And I could quickly have something working by using the web sys create, create to interface

04:26.120 --> 04:28.360
with JavaScript.

04:28.360 --> 04:33.400
And I had the copy, cut and paste event going through JavaScript directly from the browser

04:33.400 --> 04:37.680
and bypassing all the bevy machinery, which is great.

04:37.680 --> 04:39.880
But then I had another problem.

04:39.880 --> 04:48.880
I noticed that on Mac web, the controller command was not very well implemented because

04:48.880 --> 04:58.520
on Mac user, they don't control A or control C, they command C and command V.

04:58.520 --> 05:03.560
So we don't want to support correctly command C and command V to paste and then control A

05:03.560 --> 05:08.800
to select all text that's inconsistent, so time to fix it.

05:08.800 --> 05:15.680
So I fixed that by using the user agent on web and to detect on which platform I was,

05:15.680 --> 05:19.560
so eventually all my controls were consistent.

05:19.560 --> 05:25.840
So at this point, my pull request is the state of my whole adventure is that I have a pull

05:25.840 --> 05:31.000
request waiting for fixing the clipboard and it's on review.

05:31.000 --> 05:33.160
It can be a lot complicated.

05:33.160 --> 05:36.160
We did see a lot of little devils in the details.

05:36.160 --> 05:39.560
So I let it sit.

05:39.560 --> 05:45.160
The main contributor of bevy eGUI is in Ukraine, so you can guess he has a lot of other stuff

05:45.160 --> 05:47.200
to do.

05:47.200 --> 05:54.840
So anyway, I can just target my branch and I can continue on my journey, right?

05:55.840 --> 05:58.840
What is it wrong again?

05:58.840 --> 06:00.840
Let's rewind a bit.

06:00.840 --> 06:07.400
We skipped a little bit that first fix we did about that add sign.

06:07.400 --> 06:16.440
The fix was mostly if it's control, it's not text, but if we are on Windows, it might

06:16.440 --> 06:19.400
be text, so we're running the condition.

06:19.400 --> 06:26.400
And then web, it will not work because it's a macro there.

06:26.400 --> 06:29.560
And it's on compilation time.

06:29.560 --> 06:34.760
And web, it will not equate to Windows.

06:34.760 --> 06:40.240
It's actually wasn't 32 unknown and rest for the text savvy.

06:40.240 --> 06:41.240
And so it's not working.

06:42.080 --> 06:48.720
So now that I've studied the subject more, I could have done the same check I was doing

06:48.720 --> 06:53.280
before with the user agent to detect the correct platform.

06:53.280 --> 06:54.480
And that would have fixed all my problems.

06:54.480 --> 07:02.080
But then I did that in another pull request to separate things and do things the correct

07:02.080 --> 07:03.880
way.

07:03.880 --> 07:09.600
And I was a bit confused, so I first tried to remove that and then I was like, oh, okay,

07:09.600 --> 07:10.600
what about alt code?

07:10.600 --> 07:14.480
If I remove that, I can input alt code because I'm French.

07:14.480 --> 07:16.480
Did I tell you that?

07:16.480 --> 07:22.160
And yeah, I'm French, so I like to input A, O, R, weird characters.

07:22.160 --> 07:27.160
So I removed that and then I was like, oh, well, there is another if right there, maybe

07:27.160 --> 07:28.440
it just would fix my problem.

07:28.440 --> 07:29.560
I don't know what I was thinking.

07:29.560 --> 07:34.600
I was like, it's an emoji with the exploding head.

07:34.600 --> 07:39.280
But yeah, I was like that and pretty telling.

07:39.280 --> 07:44.320
But anyway, so I decided I would have to step a little bit back.

07:44.320 --> 07:47.840
Mistakes happen.

07:47.840 --> 07:52.240
So I blanked that out before in a previous slide if you remember.

07:52.240 --> 08:00.040
Baby behind the scene is using Winnit, which is a backend library for handling windowing.

08:00.040 --> 08:06.120
It's basically a low level stuff to send raw inputs.

08:06.120 --> 08:13.680
So I noticed they had a lot of fixes related or not to my issues and I was like, ah, will

08:13.680 --> 08:17.960
I have to do all my fixes again?

08:17.960 --> 08:20.120
I wasn't too confident in it.

08:20.120 --> 08:24.720
So yeah, mistakes happen because I think I would have been able to fix that by using

08:24.720 --> 08:26.920
the user agent and call it a day.

08:26.920 --> 08:30.160
But anyway, I like rabbit holes.

08:30.160 --> 08:32.480
So I went to update Winnit update.

08:32.480 --> 08:34.600
Yeah, why not?

08:34.600 --> 08:42.200
So I knew it wouldn't be too easy to do because I had to track multiple main branches, multiple

08:42.200 --> 08:43.680
unstable dependencies.

08:43.680 --> 08:49.040
I had to track baby main branch and Winnit main branch, which had multiple commits every

08:49.040 --> 08:50.080
day.

08:50.080 --> 08:56.480
So I had to have a stronger plan than doing it in provision.

08:56.480 --> 09:00.240
Yeah, well, anyway.

09:00.240 --> 09:05.000
So I had to first update, make everything compile and work.

09:05.000 --> 09:11.320
And then after everything compiled works, I could update to the new Winnit goodies.

09:11.320 --> 09:16.440
Yeah, Winnit API and good stuff.

09:16.440 --> 09:20.880
So first, when doing a dependency update, check the documentation.

09:20.880 --> 09:22.560
But I was updating two main.

09:22.560 --> 09:25.240
So documentation is not really great.

09:25.240 --> 09:29.320
So that meant foraging through the source code, pull requests, chance logs, working

09:29.320 --> 09:35.360
with the server, and occasionally chatting with relevant experts.

09:35.360 --> 09:38.600
Winnit uses Element, which is a response from them.

09:38.600 --> 09:42.840
So yeah, thanks, Element.

09:42.840 --> 09:46.680
First, when I was ready, I rolled up my sleeve and dove into the code.

09:46.680 --> 09:50.400
And the first thing I did was updating a lot of NM names.

09:50.400 --> 09:54.600
And I'm thankful that most IDE support for search and replace.

09:54.600 --> 09:58.200
Yeah, VSCode, sorry.

09:59.200 --> 10:02.480
Then another task I did was update a lot of dependencies.

10:02.480 --> 10:04.840
As you can see, there was a bunch.

10:04.840 --> 10:09.840
And I like to focus on a particular one, row window handle.

10:09.840 --> 10:18.560
It's a create to provide a common interface to interface with the window.

10:18.560 --> 10:22.560
Most of the dependencies had updated to a new version.

10:22.560 --> 10:26.840
As you can see, version 0.6, actually.

10:26.840 --> 10:33.440
In Bevy, we use continuous integration testing and cargo deny, which helps us prevent from

10:33.440 --> 10:34.520
duplicate dependencies.

10:34.520 --> 10:42.040
So I had to have my whole stack targeting the same row window handle dependency.

10:42.040 --> 10:51.120
And WGPU, which is another low-level create for graphics, wasn't updated to that.

10:51.120 --> 10:55.160
And I felt adding yet another main branch would be too much of a time sink.

10:55.160 --> 11:00.240
So I had to use version 0.5 for row window handle.

11:00.240 --> 11:07.480
And it's quite interesting how it's supported by the whole row window handle ecosystem.

11:07.480 --> 11:15.240
You can just add a feature to most ecosystem crates to say, I want to support this particular

11:15.240 --> 11:18.400
version and everything will be consistent.

11:18.400 --> 11:22.200
I had to do a few pull requests to the dependencies.

11:22.200 --> 11:25.000
But everyone was very responsive.

11:26.000 --> 11:29.320
We eventually had something consistent.

11:29.320 --> 11:31.160
So now we can profit, right?

11:31.160 --> 11:35.280
And progress on my task.

11:35.280 --> 11:42.440
Not yet, because the WinIt update is pretty complex.

11:42.440 --> 11:48.120
It can impact a lot of architecture platforms and stuff.

11:48.120 --> 11:51.000
And I don't have every platform to test.

11:51.000 --> 11:52.480
And I have also limited time.

11:52.480 --> 11:55.960
So I reached out to the baby discord to help.

11:55.960 --> 11:58.440
Like, hey, my pull request is nearing completion.

11:58.440 --> 12:01.080
Can you help me review it and test it, please?

12:01.080 --> 12:03.400
So yeah, we caught a few bugs.

12:03.400 --> 12:06.720
So I'm very thankful for everyone who chained in.

12:06.720 --> 12:09.240
And eventually the WinIt update was merged.

12:09.240 --> 12:10.640
Yes.

12:10.640 --> 12:15.400
So now we can profit, right?

12:15.400 --> 12:19.320
When I'm doing anything, I like to focus on the objective now.

12:19.320 --> 12:22.200
So that meant taking a few shortcuts.

12:22.200 --> 12:25.080
I noted them all as faithfully as I could.

12:25.080 --> 12:29.160
If you check out the whole pull request and the WinIt

12:29.160 --> 12:31.080
follow up, there is a lot of things.

12:31.080 --> 12:32.520
But I didn't write it in one go.

12:32.520 --> 12:36.880
As I discovered then, I would write them for me, for readers,

12:36.880 --> 12:39.320
and for future readers, for afterwards.

12:42.160 --> 12:44.960
Yeah, so now I think I will step back a little bit from all

12:44.960 --> 12:47.840
this and go back to my use case.

12:47.840 --> 12:49.120
Let's remind a bit.

12:50.080 --> 12:52.560
We implemented, yeah, we did a lot of things.

12:52.560 --> 12:55.800
We implemented copy-paste via JavaScript events.

12:55.800 --> 13:01.920
We detected the platform using user agent.

13:01.920 --> 13:03.440
And we even updated WinIt.

13:03.440 --> 13:06.240
So whoa, that's a lot of things.

13:06.240 --> 13:08.640
So does it work yet?

13:08.640 --> 13:09.840
Not yet.

13:09.840 --> 13:13.440
But I'm very confident that we have everything

13:13.440 --> 13:15.880
in our disposition to make it work.

13:15.880 --> 13:18.840
So next time we talk, I will tell you

13:18.880 --> 13:22.440
how everything works perfectly.

13:22.440 --> 13:24.360
Thank you for your time.

13:24.360 --> 13:25.560
Everybody can help.

13:25.560 --> 13:30.240
And if you want to help Bevy come into our Discord chat

13:30.240 --> 13:33.680
or just come talk to me afterward,

13:33.680 --> 13:36.480
I have free Bevy stickers if you want.

13:36.480 --> 13:38.480
So yeah, just come and talk.

13:38.480 --> 13:39.480
Thank you.

13:39.480 --> 13:40.480
Thank you.

