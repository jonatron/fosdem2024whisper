WEBVTT

00:00.000 --> 00:14.320
So I will talk today about the project that I started last summer and that's TRX control

00:14.320 --> 00:16.920
or transceiver control.

00:16.920 --> 00:25.320
It's a, in my opinion, modern approach, client server approach about controlling amateur radio

00:25.320 --> 00:35.120
transceivers and other hardware devices like GPIO devices, rotators for antennas, relays

00:35.120 --> 00:44.040
and to integrate third party software systems like, for example, the DX cluster or SOTA cluster

00:44.040 --> 00:48.640
or querying the QRZ database.

00:48.640 --> 00:56.880
I tried some amount of my work time has gone into this project but let's start at the start.

00:56.880 --> 01:04.480
It started actually at the SSP Field Day last summer.

01:04.480 --> 01:15.040
We were contesting in Switzerland in our nice club station of Hotel Bravo 9 Alpha Golf.

01:15.040 --> 01:21.360
And we had this setup where there was always one operator and one helper.

01:21.360 --> 01:27.520
To the right you see Hotel Bravo 9 Echo Yankee Hotel, she sits here.

01:27.520 --> 01:33.480
And she was mostly taking notes about the call signs that we heard and I was operating

01:33.480 --> 01:35.240
the radio.

01:35.240 --> 01:43.760
So we had during this day lots of barbecues, talks and having quite some fun.

01:44.760 --> 01:48.480
We got ranked fourth out of seven stations.

01:48.480 --> 01:51.360
Always was not too bad.

01:51.360 --> 01:57.880
But that was where we had this idea that this setup was not so optimal for contesting.

01:57.880 --> 02:03.920
And we were, normally we do search and pounce.

02:03.920 --> 02:11.600
So you're listening to the frequencies and when you hear a station you pounce in, you

02:11.640 --> 02:17.040
try to make the contact or the other operating mode is you're running.

02:17.040 --> 02:26.160
So you're calling CQ, CQ, CQ, CQ, CQ until somebody replies and then you make the contact.

02:26.160 --> 02:33.280
And what we were thinking while discussing what we are doing here is why do we run or

02:33.280 --> 02:34.840
search and pounce?

02:34.840 --> 02:40.400
Wouldn't it make sense to search and run or pounce?

02:40.400 --> 02:42.840
So do it a bit different.

02:42.840 --> 02:44.840
And that's where we had this idea.

02:44.840 --> 02:50.600
If we had a central point where we could control the receivers then we could probably have

02:50.600 --> 02:55.040
one station that listens to the spectrum.

02:55.040 --> 03:03.480
And whenever it finds someone who is running, he taps on his touch screen and it will enter

03:03.480 --> 03:09.400
this frequency and operating mode into a waiting queue.

03:09.400 --> 03:18.680
So we have a search station that is just tuning the bands and enters heard stations into a

03:18.680 --> 03:19.680
queue.

03:19.680 --> 03:26.960
And then we have to run a pounce station that sees this waiting queue and can tap on a frequency

03:26.960 --> 03:33.720
and it will tune the transceiver to this frequency and he can try to operate this station.

03:33.720 --> 03:40.320
And of course the contest logging software in an ideal world would also be connected

03:40.320 --> 03:45.640
to this central system, this transceiver control.

03:45.640 --> 03:54.400
And when we have this we can also have a big display for bystanders with whom are we in

03:54.400 --> 04:03.240
QSO, on which frequency are we operating because when we are contesting we have a camper,

04:03.240 --> 04:08.640
a big camper and we always make this a little bit of happening so we have visitors coming

04:08.640 --> 04:16.160
by and we talk them into what we are doing here so such a display would be nice.

04:16.160 --> 04:24.280
So what we want to try out next time is a setup with multiple transceivers and with stations

04:24.280 --> 04:28.840
such as listen and stations that operate.

04:28.840 --> 04:37.720
So what we need at the very core of this system is something universal that can control our

04:37.720 --> 04:46.280
devices and we have transceivers, we have GPIO pins to control relays, the rotors of

04:46.280 --> 04:54.240
our antenna, we have a 20 meter mast and maybe antenna switches, maybe extensions or whatever

04:54.280 --> 05:01.680
so in the beginning I wanted this to be as universal as possible.

05:01.680 --> 05:13.160
So we have at the core something that is called TRXD, D for Demon and the number 8 that's

05:13.160 --> 05:20.800
the manual page where it's documented in Linux and we have various clients to the bottom

05:20.840 --> 05:25.680
that could be PCs, that could be whatever, that could be a mobile phone with an application

05:25.680 --> 05:32.880
with an app on it and we have the hardware, the relays, we have GPIOs, we have the antenna

05:32.880 --> 05:37.440
rotors and of course we have the transceivers.

05:37.440 --> 05:45.640
So the basic idea was to have a clearing house for controlling all these devices in a common

05:45.720 --> 05:53.400
language and most modern transceivers can be controlled by software but Jaisu uses his

05:53.400 --> 05:59.840
own system, Kenwood uses a different system and of course ICOM has another system too

05:59.840 --> 06:08.200
so you cannot use one system to control them all, you have to write something.

06:08.240 --> 06:20.440
So what we do here, this is a more schematic diagram, we want to have this demon that can

06:20.440 --> 06:28.280
be connected over TCP IP and then we can talk to this demon and instruct him in a common

06:28.280 --> 06:34.600
language what we want to do with that and that receiver and these commands shall be

06:34.640 --> 06:44.320
uniform for each transceiver so it is one of the jobs of the TRX control system to convert

06:44.320 --> 06:51.120
those common commands into the device specific commands needed for example to operate a

06:51.120 --> 06:58.520
Jaisu transceiver and we thought it would be nice if we could also connect to this system

06:58.560 --> 07:05.320
using web sockets that makes it super easy to contact it from JavaScript or from Flutter

07:05.320 --> 07:15.000
or from any other language system so basically playing sockets and web sockets and what you

07:15.000 --> 07:22.560
see on this diagram you see what TRX control is not, it is not a software with a user

07:22.600 --> 07:29.160
interface like Hamlet Delix or something like this, it is really meant as being the controlling

07:29.160 --> 07:41.120
part of or at the center of your Shack automation and not a client to operate the radios so the

07:41.120 --> 07:52.520
clients are not part of TRX control besides a few example clients. So TRXD accepts really

07:52.560 --> 07:59.880
requests from the clients and controls the devices and the interesting part or one interesting

07:59.880 --> 08:05.840
aspect changes in the operating system are detected and are sent to the clients if they

08:05.840 --> 08:12.840
wish so they can subscribe to events and then they will receive frequency changes or new DX

08:12.840 --> 08:19.560
cluster spots or whatever and we can do this for transceivers that are by themselves capable

08:19.600 --> 08:26.560
of sending status updates but we can also do it for all the transceivers that cannot do it like

08:26.560 --> 08:39.880
the YAESU FT817 by means of polling. So this really works nice with all the transceivers I have.

08:39.880 --> 08:48.240
So what are the goals? The main goal was to create something that is modular and extensible

08:49.000 --> 08:58.680
that is more of a solid framework than a complete program but something that can be easily extended

08:58.680 --> 09:08.560
by yourself. So it should be easy and it is easy to add new classes of devices like one day I

09:08.600 --> 09:19.720
decided to add GPIOs that was relatively easy and it should be very simple to add new drivers for

09:19.720 --> 09:25.920
new transceivers. Of course I don't own all the transceivers that are around there but if

09:25.920 --> 09:34.840
somebody has a certain transceiver it should be easy for him to add a driver for this transceiver.

09:35.800 --> 09:43.800
The system is designed to be extensible from the ground up and it has a complete documentation.

09:43.800 --> 09:52.680
So unlike other systems TRX control doesn't need a recompilation of the whole system if you add a

09:52.680 --> 10:01.720
new driver. That's because you see it on the right it has this big Lua logo so at the heart of TRX

10:01.800 --> 10:10.960
control is a lot of Lua which is a easy to learn and yet very powerful programming language.

10:10.960 --> 10:23.480
So that's what it is. An open software design that's extensible and that uses accepted standards

10:23.800 --> 10:32.960
like the web sockets like TCP IP IPv6 and programming like that are proven like Lua.

10:32.960 --> 10:45.200
So the core is written in C of TRX control and I didn't want to just use C for everything.

10:45.200 --> 10:52.040
So and I already integrated a lot of languages into C code in the past and I had a variety of

10:52.080 --> 11:01.320
choices which language to use. So I looked at Tickle, Pearl, Python, Java and so on and we had

11:01.320 --> 11:11.880
experience with all these languages but we looked carefully at which language to use from this choice

11:12.120 --> 11:25.400
and we came to Lua for very good reasons. Lua virtual machine is very very small.

11:25.400 --> 11:36.600
It's like 128 kilobytes of binary code and one Lua state uses approximately 64 kilobytes of memory.

11:37.080 --> 11:44.760
So even if you're writing a system that runs many many many Lua virtual machines in parallel

11:44.760 --> 11:55.800
it will not eat up a lot of money. Memory and if it doesn't need too much memory it doesn't

11:55.800 --> 12:03.240
need too much money for the computer and it can run on a Raspberry Pi. So writing those new drivers

12:03.320 --> 12:15.960
is done in an easy to master scripting language named Lua and as of today it supports, it's not

12:15.960 --> 12:23.400
complete this list, it's favor, more transceivers, it supports more YASL transceivers. I didn't update

12:23.400 --> 12:33.560
the list and ICOM and it supports, it will support the QDX from QRP Labs

12:35.320 --> 12:41.720
and probably Kenwood transceivers because they use the same protocol as the QDX does.

12:42.920 --> 12:49.480
So we're constantly working on adding new drivers. I had some American guy who added

12:49.560 --> 12:59.400
driver for some Rix and this is now very easy because these drivers written in Lua, they mostly

12:59.400 --> 13:07.400
describe these days what are the operating modes, what is the frequency range of the transceiver,

13:07.400 --> 13:15.880
what's the name of the transceiver and the protocol being used for YASL or for ICOM is factored out.

13:15.960 --> 13:23.640
So you describe your transceiver and probably that's all you have to do. If it's a new kind of

13:23.640 --> 13:30.840
transceiver then you have to write the protocol converter too. But this is technical and you can

13:31.560 --> 13:37.320
go have a look at GitHub, there's the code, it's all open source under the MIT license

13:38.280 --> 13:44.600
and we're here to help if you get stuck writing a new driver.

13:46.360 --> 13:54.600
So what about audio? Would it be nice if I could transport the audio as well so that maybe on my

13:54.600 --> 14:01.480
mobile device I can select my transceiver and then listen to the audio and remote control it.

14:02.440 --> 14:08.200
This is actually at the moment not part of the software but I think for audio processing we can

14:08.200 --> 14:16.600
use Pipewire on Linux and for the streaming maybe Pulse Audio. So I put a question mark there,

14:17.320 --> 14:23.240
I'm not so familiar with Pulse Audio but I think this could be a way and this will be some

14:23.240 --> 14:31.320
experimentation to be done in the next months. So that's what it is. It's a system to control

14:31.480 --> 14:43.560
your devices in a uniform language and maybe let's look at a few implementation details so how it's

14:43.560 --> 14:58.200
roughly done. It uses a multi-threaded approach so if there's a lot of things to do it will use

14:58.200 --> 15:07.880
all the CPU cores and it has asynchronous execution that means it can do a lot of things in parallel,

15:09.000 --> 15:17.960
it supports for the connection-wise IPv4 and more important IPv6 and of course TLS,

15:17.960 --> 15:28.360
transport layer security. The core is written in C because writing multi-threaded code correctly

15:28.360 --> 15:36.360
is not so easy as one might think. There's a lot of synchronization issues that could arise if you

15:36.360 --> 15:45.400
do it wrong so all the thread control and synchronization logic and everything and firing up of the

15:45.400 --> 15:54.120
Lua virtual machines and firing up of the various threads that comprise the whole system that's

15:54.120 --> 16:03.800
written in C and you can connect over IP and web sockets, I already mentioned that and the protocol

16:03.800 --> 16:13.480
is JSON based, JavaScript object notation so all you have to do is to compose a JSON message with

16:13.560 --> 16:24.360
a request for example set frequency to 14285000 hertz and send it to TRX control and route it to

16:24.360 --> 16:32.680
the transceiver you want. It has been developed for Linux and on Linux but it can be used funny

16:32.680 --> 16:41.960
enough on Windows 2 using Windows services for Linux which means it runs on Linux and of course

16:41.960 --> 16:47.480
it can be dockerized containerized, it can run in a docker container so you can run it basically

16:47.480 --> 16:59.000
on any system you want. It's developed in the open on GitHub and as I mentioned it's under the MIT license.

16:59.320 --> 17:14.120
So how does it look when you connect to the system? We have TRX-D which when everything is set up it

17:14.120 --> 17:22.840
will listen to connections from a client and when a client connects it will start a thread that's a

17:22.920 --> 17:31.720
socket handler that will communicate with the client and whenever it receives a message from the client

17:31.720 --> 17:39.560
it will send it to a dispatcher, this patcher looks where he has to route this message to, he will

17:39.560 --> 17:48.840
send it to a device controller for a hardware device which will talk to a driver, the blue part

17:48.840 --> 17:56.440
that's written in Lua and this driver will talk to the device to do whatever is required. It can also

17:56.440 --> 18:04.200
talk to extensions, I have written several extensions for example to query the QRZ database or to

18:05.560 --> 18:12.760
see cluster spots in real time so the idea is I see a cluster spot I can tap on this entry on

18:12.840 --> 18:19.880
touch screen it will tune my transceiver to this you can look up the call sign so on

18:20.840 --> 18:28.040
and then eventually the driver gives back a response in a device specific format which will

18:28.040 --> 18:35.960
convert it by the driver to an internal format and the dispatcher will finally send back to the

18:36.040 --> 18:47.160
client reply also in JSON format so all you have to understand in a client is JSON and the drivers

18:47.160 --> 18:55.160
will convert these uniform requests to the format that the transceiver uses like cut for Yezu or

18:55.160 --> 19:03.880
Kenwood or CIV for ICOM and the same thing is done with the return value they are converted from

19:03.880 --> 19:12.200
the device specific format into a generalized format and send back as JSON replies for example

19:12.200 --> 19:18.760
frequency in this system is always in hertz no matter what the transceiver uses many use like

19:19.400 --> 19:30.920
10 hertz steps but here a frequency is always in hertz it looks very similar in the web socket case

19:31.160 --> 19:39.320
when you listen for web socket connections there will be a web socket listener thread and when a

19:40.040 --> 19:50.440
client connects for example a browser with JavaScript then it will set up the almost the same

19:51.080 --> 19:58.600
the same scenario as it does for plain IP sockets it's just a little bit different the handling

19:59.320 --> 20:06.600
of web sockets they have underlying protocol and the framing protocol so they can detect when the

20:06.600 --> 20:14.120
other side goes out of business and they can automatically reconnect but otherwise it's the

20:14.120 --> 20:23.480
very same and each of these boxes they stand for a thread as I said it's multi-threaded so these

20:24.280 --> 20:31.960
things they all run in parallel it's not a this is not a sequence first it takes this then it calls

20:31.960 --> 20:38.520
a subroutine then it calls another subroutine but this is all in parallel on the machine

20:41.000 --> 20:44.280
so the hard part was to get the synchronization right

20:45.240 --> 20:53.880
yeah this is a these are few implementation details when you're

20:55.080 --> 21:03.880
want to dig deeper or see what it is there is a website of course the website has flyers we also

21:03.960 --> 21:13.880
have flyers at the amateur radio booth and of course there's github with lots of information

21:13.880 --> 21:22.200
and the complete source code of course I'm looking for people to support the project

21:23.560 --> 21:30.680
I'd be happy if Linux uses tested there's now ready made binary packages for almost any distribution

21:30.680 --> 21:39.240
that you can very easily install software to the developer could write drivers or new clients or

21:39.240 --> 21:46.440
extensions manufacturers dealers importers they could provide us with hardware they actually

21:46.440 --> 21:56.760
already did I got my icon this way and material support or whatever can always be helpful or

21:56.760 --> 22:04.120
buy us coffee and so far we've been supported by my company which

22:05.800 --> 22:18.760
shelled out a lot of working time and vice equipment and lixnet they supported us with the icon so

22:19.000 --> 22:26.760
this is how we developed we have a of course everything in git we develop on alma linux

22:27.320 --> 22:33.320
and when we push we push to github but not only we push to an internal git lab server as well to

22:34.120 --> 22:40.520
have a continuous integration and deployment pipeline so that we build the packages for all

22:40.920 --> 22:53.480
various linux distributions you find all that matters on torx-control.msys.ch

22:54.600 --> 23:03.160
there's a matrix room and there is a github project obviously and

23:04.120 --> 23:11.160
that's at the end of my presentation but that's not the end of what I wanted to say

23:12.680 --> 23:20.360
because I need to synchronize the screens

23:20.440 --> 23:34.120
during the development I got in contact with silver's area and during the last I think

23:34.120 --> 23:41.560
months I can say not weeks it's months already we just discussed a lot about various things

23:42.440 --> 23:53.880
SDR and he's obviously an SDR expert and with marcos too and so I learned a lot about

23:53.880 --> 24:01.160
software defined radio and doing this together with marcos and with sylvan so

24:02.280 --> 24:10.600
made me think about what could we do with SDR in terms of TRX control and there is a wiki on

24:11.240 --> 24:18.600
github where I put together the ideas what we could do so that in the future

24:19.560 --> 24:28.360
TRX control could also be an SDR system so this is where everything comes together

24:30.120 --> 24:37.640
so we need a few more threads if you're probably not as easy as it is listed here but

24:38.600 --> 24:45.960
one thread to gather the samples then each receiver will be a thread and then

24:47.240 --> 24:56.120
we could probably even attach whisper to a decoded audio signal to get the transcript of what's

24:57.160 --> 25:06.440
being said there in text so this is the future as you see I have plans with it and this

25:06.440 --> 25:13.880
means that's it thank you very much

