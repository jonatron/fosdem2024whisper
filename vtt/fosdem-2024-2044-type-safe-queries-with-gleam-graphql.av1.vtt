WEBVTT

00:00.000 --> 00:16.720
Hi everybody, I know you've heard it now, I think about four times about how the type

00:16.720 --> 00:18.840
safety and gleam is perfect.

00:18.840 --> 00:23.200
But guess what, we're doing it again for a fifth time in case you haven't heard it enough.

00:23.200 --> 00:27.720
But before we do that, I'll just introduce myself.

00:27.720 --> 00:32.840
My name is Harry Besto, I'm currently a student studying in the UK and looking to move on

00:32.840 --> 00:36.000
to university next year.

00:36.000 --> 00:40.720
I spoke here last year about gleam again and sort of helped start it off last year and

00:40.720 --> 00:45.880
at the moment I currently work with Felicia's Ventures on their research team.

00:45.880 --> 00:50.280
But while we get started, I know GraphQL isn't gleam, it isn't Erlang and it isn't Elixir,

00:50.280 --> 00:54.680
it's none of this stuff maybe you're here to see, but it is the perfect match to go

00:54.680 --> 01:00.000
with gleam as they both care about type safety and they care about how everything works correctly.

01:00.000 --> 01:03.440
In case people aren't familiar with GraphQL, I thought I'd just do a quick introduction

01:03.440 --> 01:06.440
to that so everybody can be on the same page for the rest of this.

01:06.440 --> 01:11.880
Here's an example type in GraphQL, it's a presentation, I thought that might be a fitting

01:11.880 --> 01:16.920
for today and we'll just imagine for a second that it's super simple, you only have a title,

01:16.920 --> 01:21.440
a set of speakers, in case you were lucky enough to have a friend, I don't.

01:21.480 --> 01:26.800
The amount of people who attend, whether it's one of the keynote ones and any speaker notes

01:26.800 --> 01:28.800
that people decide to give afterwards.

01:28.800 --> 01:31.160
So we'll break this down one by one really quick.

01:31.160 --> 01:34.200
The title's a string and it's not nullable.

01:34.200 --> 01:36.480
You have to have this as a string.

01:36.480 --> 01:41.000
The next one is an array of speakers where each speaker has to be there as well, that's

01:41.000 --> 01:43.480
what the estimation mark means.

01:43.480 --> 01:48.000
Integer that has to be there as well, a boolean that doesn't have to be there, it could be

01:48.040 --> 01:53.640
null, true or false, and then finally notes that also doesn't have to be there, just as

01:53.640 --> 01:56.960
a rough sort of guide for how GraphQL works.

01:56.960 --> 02:01.200
There's so much more to GraphQL that isn't actually fitting for this dev room and would

02:01.200 --> 02:04.960
go into so much more detail, so I think we'll just stick with this for now and we'll go

02:04.960 --> 02:06.960
from there.

02:06.960 --> 02:10.280
Before you end to using the two together, I'll just do the normal sort of introduction

02:10.280 --> 02:11.840
that everybody else has done to Gleam.

02:11.840 --> 02:17.920
It has type safe structs, the power of Erlang and JavaScript, and also a lovely friendly

02:17.920 --> 02:22.840
community who a lot of actually shown up this time here with the rest of their talks

02:22.840 --> 02:26.320
to persuade you as well to use it.

02:26.320 --> 02:30.240
So let's get to combining the two together.

02:30.240 --> 02:34.760
Here's what looks like very complicated Gleam code if you've never seen it before for a

02:34.760 --> 02:41.160
GraphQL request as well as sort of the request itself and then an object inside of it.

02:41.160 --> 02:45.000
We'll take for example that it could be a mutation or a query, which isn't too important

02:45.000 --> 02:49.600
for this, but it's just there anyway, and that you're requesting a list of objects potentially.

02:49.600 --> 02:54.360
Each object has a name, a set of arguments, and a set of fields that you're requesting

02:54.360 --> 02:58.920
where the field could be something as simple as just taking the name out of the presentation

02:58.920 --> 03:02.960
or as requesting subfields of the speakers that we saw earlier.

03:02.960 --> 03:07.880
Here's an example query that we're going to now use for the rest of this.

03:07.880 --> 03:12.320
The rest of the presentation is built around this query, so we're trying to query this

03:12.320 --> 03:13.760
presentation itself.

03:13.760 --> 03:21.080
We want the notes that I've supposedly written as well as my name and my email.

03:21.080 --> 03:25.160
This is what that looks like in Gleam, which looks absolutely awful for you guys.

03:25.160 --> 03:28.440
So we'll remove some of the stuff that isn't particularly important and we get left with

03:28.440 --> 03:34.600
this, which is just a simple function that would in reality take in the query as a string,

03:34.600 --> 03:39.240
actually pass it, and then would return something similar to this where we're saying it's not

03:39.320 --> 03:44.640
a mutation, we're requesting the presentation and the set of fields that were there before,

03:44.640 --> 03:48.560
and then the argument is that the title has to be that.

03:48.560 --> 03:51.280
But how on earth are we even going to use this?

03:51.280 --> 03:56.840
Everybody knows that GraphQL is normally queried over HTTP as its sort of baseline.

03:56.840 --> 04:01.400
Sometimes there's web sockets involved with subscriptions, and sometimes people go and

04:01.400 --> 04:03.880
do something a bit interesting with it.

04:03.880 --> 04:08.600
But for this example, we're going to use Wisp, which was actually written by Louis, and it

04:09.080 --> 04:14.720
I believe one of the only sort of higher level frameworks that Gleam has at the moment

04:14.720 --> 04:16.280
for HTTP.

04:16.280 --> 04:21.240
So I'll do a quick intro to this just to keep everything so everybody knows what they're

04:21.240 --> 04:22.240
doing.

04:22.240 --> 04:25.920
Wisp has some really nice functions in it for configuring logging, for getting the secret

04:25.920 --> 04:30.760
key for cookies and other hashing algorithms, and it builds on top of Mist, which is built

04:30.760 --> 04:37.280
by another one of the Gleam community, and just uses core underlying fundamentals for

04:37.280 --> 04:38.280
that.

04:38.280 --> 04:40.680
At the bottom, we're just telling it to sleep forever.

04:40.680 --> 04:43.360
So let's go through line by line and see what each thing does.

04:43.360 --> 04:45.600
This is super simple.

04:45.600 --> 04:50.360
It configures sane defaults, so info logging and all that sort of stuff, so you don't have

04:50.360 --> 04:54.800
to go over and do all of the annoying Erlang stuff.

04:54.800 --> 04:57.040
Then we generate a random string for this example.

04:57.040 --> 04:58.040
This isn't great.

04:58.040 --> 05:01.840
I guess you will have heard about it with Phoenix, Ruby on Rails, Laval, any of the

05:01.840 --> 05:02.840
other frameworks.

05:02.840 --> 05:06.360
You need to actually set a secret in real life, but for now we'll just ignore this as

05:06.440 --> 05:08.600
it's not particularly important.

05:08.600 --> 05:12.800
Then finally, we set up our handler, which is going to use this handle request function,

05:12.800 --> 05:17.360
which we'll get onto in a minute, as well as the secret, and then saying it's going

05:17.360 --> 05:19.320
to run on port 8000.

05:19.320 --> 05:24.760
Finally, the process does sleep forever is something I don't think you'd be used to

05:24.760 --> 05:29.080
in Erlang, but it's quite common in Gleam now, which is that you don't want the process

05:29.080 --> 05:30.400
just to terminate itself at the end.

05:30.400 --> 05:34.360
You want it to stay alive with the HTTP process running in the background.

05:35.360 --> 05:38.040
Let's get into the router.

05:38.040 --> 05:41.760
There's four imports we need just to start off, which is we need the request and response

05:41.760 --> 05:42.760
from Wisp.

05:42.760 --> 05:46.360
We need a string builder to actually send some stuff back.

05:46.360 --> 05:50.800
We need GraphQL Web, which is just sort of a, is nothing too big.

05:50.800 --> 05:55.200
It's just some boilerplate that's included with Wisp, and then also Gleam's HTTP for

05:55.200 --> 05:58.600
post for some filtering.

05:58.600 --> 06:00.000
Handle request is as simple as this.

06:00.000 --> 06:01.000
We're given a request.

06:01.000 --> 06:03.040
We have to return a response.

06:03.040 --> 06:08.720
We can do whatever we want to it, and as long as that we get the response out of the end,

06:08.720 --> 06:12.920
this, yeah, Wisp will handle returning it.

06:12.920 --> 06:13.920
Sorry.

06:13.920 --> 06:18.920
So in this case, we're using Gleam's powerful pattern matching to match on the tuple of

06:18.920 --> 06:21.520
the method and the path segments.

06:21.520 --> 06:26.920
That way, if you wanted to, you could have a get request to get info or health or sort

06:26.920 --> 06:28.880
of the UI as well be served.

06:28.880 --> 06:31.920
But in this case, we're just going to say everything else isn't found except for a

06:31.920 --> 06:34.440
post request to slash GraphQL.

06:34.440 --> 06:39.480
And then at the top, we have a use statement with web.middleware, which is something fairly

06:39.480 --> 06:41.600
new in Gleam but not super new.

06:41.600 --> 06:49.440
It's an abstraction for putting, for calling a function with a parameter passed into it.

06:49.440 --> 06:53.400
Before this, Gleam code was sort of nested functions on nested functions, which maybe

06:53.400 --> 06:55.040
wasn't the nicest to look at.

06:55.040 --> 06:59.360
This is sort of simplified that for quite a few things and is now used across everything

06:59.360 --> 07:05.160
from the standard library to libraries themselves to people's code.

07:05.160 --> 07:09.160
We have this GraphQL request function, which we actually need to do something with, but

07:09.160 --> 07:14.800
for now, we're just returning the string GraphQL response and sending that with 200 status

07:14.800 --> 07:15.800
code.

07:15.800 --> 07:21.360
So now if you were to send a post request to HTTP localhost 8000 slash GraphQL, you'd

07:21.360 --> 07:24.440
just get GraphQL response sent back to you.

07:24.440 --> 07:28.600
But you're thinking, that isn't what you came here to hear about, and it's absolutely useless.

07:28.640 --> 07:29.640
I agree.

07:29.640 --> 07:34.960
So let's go on to actually handling a GraphQL request and sending back some actually useful

07:34.960 --> 07:38.040
data.

07:38.040 --> 07:43.200
When we get the request in from GraphQL, it has the JSON structure of the query, the

07:43.200 --> 07:46.280
operation name, and then variables.

07:46.280 --> 07:50.480
The variables and operation name aren't important for this, but for a fully featured implementation

07:50.480 --> 07:51.480
they would be.

07:51.480 --> 07:57.520
Let's say you had a query that had loads of different requests inside of it, operations.

07:57.520 --> 08:01.360
You can then specify afterwards which one you want to use, and the variables that you

08:01.360 --> 08:05.600
pass stuff into those operations after the fact.

08:05.600 --> 08:12.600
Here we're using Gleam's decoder to decode into three, well, to decode three things into

08:12.600 --> 08:14.800
a custom type.

08:14.800 --> 08:18.840
The three doesn't mean anything like a tuple or an array like you might be used to.

08:18.840 --> 08:24.120
All it means is that the constructor of GraphQL full request has three arguments.

08:24.120 --> 08:30.120
So we're then saying the field query should be decoded as a string and put into the first

08:30.120 --> 08:31.640
field in the constructor.

08:31.640 --> 08:33.240
This is entirely type safe.

08:33.240 --> 08:37.760
I don't have anything on my slides about it, but let's say I jumbled up the order of these.

08:37.760 --> 08:41.520
It wouldn't match what the constructor should be, and as such you'd get a compile time error

08:41.520 --> 08:48.720
rather than ending up at the end of this talk going, why is my query looking like an object

08:48.720 --> 08:49.880
of variables?

08:49.880 --> 08:55.920
So I guess that's one point where Gleam's type safety comes back into being useful.

08:55.920 --> 09:00.800
The other part is that we can do something like this using the use statement again to

09:00.800 --> 09:03.480
say that the body has to be JSON.

09:03.480 --> 09:10.480
It's a case of we could handle all of this ourselves, but Wisp has a function for it.

09:10.480 --> 09:16.120
It requires that the content type's application JSON takes out the body and decodes it into

09:16.120 --> 09:21.440
a dynamic which goes back into Gleam's dynamic system, which allows you to break out of that

09:21.440 --> 09:26.120
box of type safety when you can't trust what you're getting in or you want to send something

09:26.120 --> 09:30.440
out in a way that's maybe less structured.

09:30.440 --> 09:35.120
When we want to then decode it, we have to, if we want to work with it, we can't just

09:35.120 --> 09:37.120
work with it in that dynamic form.

09:37.120 --> 09:41.440
It's not how Gleam wants to work, and it's going to make you could, but it would make

09:41.440 --> 09:44.600
your life so much harder than it needs to be.

09:44.600 --> 09:48.760
In real life, you should also be using result.try, handling this nicely and bubbling errors

09:48.760 --> 09:54.120
up, maybe with how Hailey spoke about where you could have your phantom types so you don't

09:54.120 --> 09:56.280
have to bubble it all the way back up.

09:56.280 --> 10:00.240
But for this short demonstration, I'm just unwrapping it, which will panic if somebody

10:00.240 --> 10:01.840
sends the wrong data.

10:01.840 --> 10:07.400
I'm unwrapping it with what is a bog standard QL request, which is underscore underscore

10:07.400 --> 10:11.160
type name, which just would in this case return query to you.

10:11.160 --> 10:16.840
It gives you nothing useful, but it means that the program isn't going to crash.

10:16.840 --> 10:22.000
Now that we have our body and we have the query inside of it, which we looked at earlier,

10:22.000 --> 10:23.880
we need to do something with it.

10:23.880 --> 10:28.960
So let's send it to that passing function that we saw at the very start and turn it

10:28.960 --> 10:34.200
from just being a generic string into something that's actually tangible and could be used

10:34.200 --> 10:36.640
by Gleam.

10:36.640 --> 10:39.800
But once we have that, how are we even going to resolve it?

10:39.800 --> 10:43.920
You have your query, you now have it as a Gleam type, but what does that even mean?

10:43.920 --> 10:47.720
You need to somehow get all of that speaker information back in a way that keeps your

10:47.720 --> 10:53.920
type safety, but also can be with the flexibility that GraphQL provides to people.

10:53.920 --> 10:55.720
So let's think about resolvers for a minute.

10:55.720 --> 11:00.960
We could go down this approach of having a type of the resolver where it has its key,

11:00.960 --> 11:06.200
for example, speaker.notes or just speaker, where you then have granularity over how far

11:06.200 --> 11:08.000
down you want to resolve each time.

11:08.000 --> 11:11.880
You want to resolve the whole object with one function or do you want an individual function

11:11.880 --> 11:13.720
for resolving each field?

11:13.720 --> 11:17.560
And then you have that function there, which gets the request as well as the variables

11:17.560 --> 11:22.880
and just returns a dynamic value, which can then be sent back to the client as Jason in

11:22.880 --> 11:24.640
this case.

11:24.640 --> 11:29.080
Being dynamic there, it will be much nicer to use a generic, but in the process of writing

11:29.080 --> 11:33.800
this talk, I couldn't figure out a nice way to allow you to have loads of different generics

11:33.800 --> 11:38.720
at once, which I think is something that is going to be worked on in the future maybe

11:38.720 --> 11:43.640
so that you can have a collection of generics that also are maybe like an interface type

11:43.640 --> 11:44.640
thing.

11:44.640 --> 11:50.240
Here's an example of how this could look, forgetting the presentation's notes, but there

11:50.240 --> 11:52.560
is one key problem that comes with this.

11:52.560 --> 11:54.960
Let's say you then have a list of these resolvers.

11:54.960 --> 12:00.880
How on earth do I find presentation.notes in a time that's actually suitable?

12:00.880 --> 12:04.800
The bigger notation for this is going to be o of n at best, or o of n at worst maybe,

12:04.800 --> 12:09.360
because you're going to have to go through all of them checking each one.

12:09.360 --> 12:15.040
So maps or lists, a hash map is going to be a thousand times better, maybe not actually

12:15.040 --> 12:18.880
a thousand times, don't quote me on that, but it is going to be significantly better

12:18.880 --> 12:22.120
than using this sort of list and sorting method.

12:22.120 --> 12:28.160
So let's switch it up and say that the resolver now isn't this custom type with a constructor

12:28.160 --> 12:33.360
and everything, it's now just a function that takes in a request, has those arguments

12:33.360 --> 12:36.680
passed in and still returns the dynamic.

12:36.680 --> 12:40.580
And now we can use this in a much simpler way, where we have a simple function that has

12:40.580 --> 12:44.760
resolve where it takes in a prefix, which will make a lot more sense in a minute.

12:44.760 --> 12:50.680
The HTTP request, the object itself we're trying to resolve, so we took the string,

12:50.680 --> 12:53.880
we pass it into this object and now we're going to resolve it.

12:53.880 --> 12:57.840
And then a dictionary of all the resolvers that were created when you wrote it.

12:57.840 --> 13:01.720
So you'd have your dictionary where you put in each of your resolvers, so you could have

13:01.720 --> 13:07.120
presentation.speakers, which resolves that whole array, as well as presentation.notes

13:07.120 --> 13:09.120
and any of the other fields that were there.

13:09.120 --> 13:13.920
Or you could even just have one resolver that resolves the entire presentation.

13:13.920 --> 13:17.280
Example of this is here, where you have your dictionary.

13:17.280 --> 13:21.600
We're just creating the dictionary from a list for simplicity, but this is the same as doing

13:21.600 --> 13:28.280
dictionary new and then inserting an element with that key and that value.

13:28.280 --> 13:35.560
Now that we have it, we can take our prefix, prefix it to the object.name and then try

13:35.560 --> 13:38.360
and see if we have that as a resolver.

13:38.360 --> 13:40.440
Of course you're thinking, how on earth is this going to work?

13:40.440 --> 13:44.040
Glean doesn't have an if statement, but we have something just as good, which is a case

13:44.040 --> 13:45.040
statement.

13:45.040 --> 13:49.960
We're going to say, if that resolver exists, try and just resolve using that.

13:49.960 --> 13:53.760
If it doesn't exist, we're going to check that there's fields.

13:53.760 --> 13:58.280
If there aren't fields, then we need to somehow handle this much nicer at the moment.

13:58.280 --> 14:00.240
It just returns that there was no resolver set.

14:00.240 --> 14:05.240
Then in reality, it should be erroring out properly and returning an error in the GraphQL

14:05.240 --> 14:06.480
standard way.

14:06.480 --> 14:10.960
And if there are fields, we then map each one, attempt to resolve it, and then we have this

14:10.960 --> 14:15.240
function at the bottom called combine results, which I'll come back to in a second.

14:15.240 --> 14:19.800
But you can see that the prefix actually ends up being the prefix that was passed in before

14:20.560 --> 14:22.320
and then the object's name then a dot.

14:22.320 --> 14:25.800
So as you go further down and into it, you get the dots.

14:25.800 --> 14:28.920
You still get the objects that were before added in.

14:28.920 --> 14:33.280
And then you can have your granularity that I've been speaking about of resolvers.

14:33.280 --> 14:37.240
The combine results just simply has the list of them piped in.

14:37.240 --> 14:42.280
It then folds the list into a dictionary and then it does dynamic.from to just turn that

14:42.280 --> 14:46.400
into that dynamic value to be returned at the end.

14:46.440 --> 14:50.720
So finally, I know it's been a lot, but let's finally put it all together into something

14:50.720 --> 14:51.720
actually useful.

14:51.720 --> 14:55.400
First, we need to resolve multiple things.

14:55.400 --> 14:59.640
When we got our request in, we could be requesting the presentation and a speaker separately

14:59.640 --> 15:01.600
and maybe an event separately.

15:01.600 --> 15:05.400
So we need to take each of those objects, go through the resolution process for them

15:05.400 --> 15:07.120
and get the values.

15:07.120 --> 15:09.640
So to do that, we call that function.

15:09.640 --> 15:14.760
Then we do, we say the responses after we've resolved them all, passing in the HTTP request,

15:14.760 --> 15:18.440
the past query, and your set of resolvers.

15:18.440 --> 15:22.720
And then this is what you finally end up with, the basic GraphQL request function in the

15:22.720 --> 15:24.640
start that just returned a string.

15:24.640 --> 15:30.880
Now it requires the JSON, unwraps the body, passes it, resolves everything, and then finally

15:30.880 --> 15:36.120
sends it as a HTML response, which probably should have been changed to JSON response.

15:36.120 --> 15:41.920
Small details there, and sends that back to the client.

15:41.920 --> 15:45.360
So yay, you might think we're finally finished.

15:45.360 --> 15:50.040
But in reality, we're actually missing so much from GraphQL that I wouldn't have even

15:50.040 --> 15:55.760
had time to discuss or make for this talk, such as proper error handling.

15:55.760 --> 16:00.640
When you return data from GraphQL, you should return data and errors separately.

16:00.640 --> 16:04.000
We don't even have the concept of an error here.

16:04.000 --> 16:08.040
Mutations at the moment, a mutation in the query, I just treated as the exact same thing.

16:08.040 --> 16:11.160
We should really have them as separate things that are resolved differently and handled

16:11.160 --> 16:12.160
differently.

16:12.160 --> 16:18.600
Subscriptions as well, that's using web sockets, and that's a whole nother layer of GraphQL

16:18.600 --> 16:23.240
that people, there's fairly, I guess, divisive opinions on how it should be implemented.

16:23.240 --> 16:25.000
So I didn't even touch that.

16:25.000 --> 16:29.240
But you might be thinking, overall, that's an absolute ton of work if you want to implement

16:29.240 --> 16:30.540
it yourself.

16:30.540 --> 16:33.600
So the goal with all of this is, let's make a package out of it.

16:33.600 --> 16:37.160
We'll have a green GraphQL package that you can just plug in, pass your resolvers, and

16:37.160 --> 16:44.360
it will pass and manage all of the query inside for you, similar to what Elixir has for Phoenix,

16:44.360 --> 16:49.280
as well as what Laval and the other major frameworks have, which makes it easier, which

16:49.280 --> 16:54.120
makes it super easy to use GraphQL and sometimes even easier than REST itself as it handles

16:54.120 --> 16:56.480
most of that abstraction for you.

16:56.480 --> 17:00.840
So thank you so much for listening as I ran through that really quickly.

17:00.840 --> 17:04.520
And if anybody has any questions, I think I have just enough time for a couple.

17:07.160 --> 17:09.160
Any questions?

17:09.160 --> 17:14.160
Thank you very much.

17:14.160 --> 17:27.160
So I know that GraphQL also has a schema, and I'm guessing from that API that you would

17:27.160 --> 17:29.160
write your schema alongside that.

17:29.160 --> 17:33.160
Do you have any thoughts on maybe generating some of that blue code from the schema, or

17:33.160 --> 17:36.160
maybe just the schema from the blue code?

17:36.160 --> 17:43.160
Yeah, when I first started, I thought, oh, the question was before I go, GraphQL has

17:43.160 --> 17:49.160
schemas, so is there any way for us to generate that code, either the code that I showed today

17:49.160 --> 17:51.160
or even the schema itself from Glean?

17:51.160 --> 17:56.160
And the answer to that is I looked at it when I started, and you could generate the schema

17:56.160 --> 18:02.160
from Glean and as such interpret some of this code, but long term I think the best bet would

18:02.160 --> 18:06.160
be sort of code generation similar to how it's done in JavaScript or TypeScript, where

18:06.160 --> 18:12.160
you either write your schema and then it generates some of the other Glean for you as well as

18:12.160 --> 18:19.160
a .graphql file, or you pass in a .graphql file to sort of a CLI, and it then spits out

18:19.160 --> 18:21.160
all of the boilerplate Glean you need.

18:21.160 --> 18:26.160
But yeah, schema validation is something else that sort of, I didn't really have time to

18:26.160 --> 18:29.160
do for this.

18:29.160 --> 18:33.160
Any other questions?

18:33.160 --> 18:35.160
Okay, thank you then.

