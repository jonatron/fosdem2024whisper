WEBVTT

00:00.000 --> 00:13.000
Hi everyone. Maybe before we get started, how many of you do know about ham radio? This

00:13.000 --> 00:18.440
is kind of the topic of the room I know, but still. Okay. And how many of you are ham

00:18.440 --> 00:26.440
radio licensed? Nice. Okay, good. I still have included a small introduction.

00:26.440 --> 00:39.440
Please put up your hands again. License operators, please. All right. So I still have a brief

00:39.440 --> 00:44.880
presentation and introduction to the topic for you. Your experience with ham radio might

00:44.880 --> 00:50.920
not be my experience, so I think this introduction is interesting. And then we will have a brief

00:50.920 --> 00:57.120
overview of what ham radio and open source means. Not everybody understands open source

00:57.120 --> 01:04.720
the same way, especially, I think, in ham radio community. You will see that open source

01:04.720 --> 01:12.120
in ham radio did face and does face a few obstacles. We will pinpoint a few of those.

01:12.120 --> 01:16.880
We will see the workarounds. And then finally, we will talk about M17, which is the project

01:16.880 --> 01:23.200
that I want to talk about today. So first, who am I? So I'm a research engineer at the

01:23.200 --> 01:30.520
University of Friage in Belgium. I do mainly embedded systems and RF. I'm a licensed ham

01:30.520 --> 01:37.280
radio operator for two years now, called Sine of kind of number four, my Oscar Delta. I joined

01:37.280 --> 01:46.800
M17 project one year ago, right after Fuzzdem. Wow. And yeah, I mostly do hardware design,

01:46.800 --> 01:50.160
some of which you can see on the table in front of you. We will go back to that later

01:50.160 --> 01:58.240
and work on firmware. Okay. Amateur radio, I think you, then almost everybody knows about

01:58.240 --> 02:05.400
this logo for ham radio. This is a technical hobby. This is the goal is to experiment,

02:05.400 --> 02:10.880
to play around, to have your hands dirty. It allows you to legally transmit uncertain

02:10.880 --> 02:16.160
frequencies, which are allocated to amateur radio operations, and which you cannot do

02:16.240 --> 02:22.960
if you don't have your license, of course. The hobby is extremely vast. So you have

02:22.960 --> 02:28.160
operators which will do what we call DX, which is reaching the furthest away on the globe

02:28.160 --> 02:35.520
using lowest power or specific modes, frequencies, whatever, which is called working demands.

02:35.520 --> 02:40.960
You have people which are dedicated in antennas, transceivers, reception, transmission, whatever.

02:41.200 --> 02:48.240
It's very, very, very vast. And I think most of you also know that the mainstream products

02:48.240 --> 02:53.360
come from just a few brands, ICOM, Yezu, Kenwood, and then that's pretty much it. And you have the

02:53.360 --> 02:59.680
Chinese brands, and usually your typical ham radio, Joe operator, or whatever, doesn't know about

02:59.680 --> 03:08.560
those Chinese brands. So open source in amateur radio, well, this is a bit controversial, a bit

03:08.640 --> 03:15.440
difficult to describe, but the ham spirits, which live in every one of us, have always been about

03:15.440 --> 03:20.320
sharing design, ideas, discoveries, the problems we encountered, and how we did solve them.

03:21.120 --> 03:28.160
You could call that open source knowledge, maybe, which is not to be confused with the fact that

03:28.160 --> 03:36.080
most digital voice protocols that we use have published specifications, which means that if you

03:37.040 --> 03:42.880
dig deep enough in whatever search engine you use, you will probably find specifications for

03:42.880 --> 03:49.120
those protocols. That does not mean they are free and open source, which is very important. And

03:49.120 --> 03:57.040
this is kind of the goal of this presentation. So, yeah. Some protocols are free available. Some

03:57.040 --> 04:04.880
of you know about a few of those. So AX25, which is a material adaptation of the X25 protocol.

04:06.080 --> 04:14.960
Which mainly works on VHF and UHF, so above 30 megahertz, which is not designed for voice,

04:14.960 --> 04:24.080
of course. It's digital, but mainly data bits, let's say. And DSTAR, which is what most of us

04:24.080 --> 04:32.000
could consider open source protocol for amateur radio. It is the first protocol really created

04:32.000 --> 04:38.960
for amateur radio usage. So it is designed from the ground up with amateur radio in mind.

04:38.960 --> 04:44.160
It is open specifications. So from the start, they decided to publish the specifications,

04:44.880 --> 04:49.360
mostly in Japanese. So this can be an obstacle. Maybe if you speak Japanese, it's easier for you.

04:49.360 --> 04:58.400
I don't know. YSF, Yezoo's proprietary mode. Specifications can be found online, but that's

04:58.400 --> 05:06.480
pretty much it. You have to have a Yezoo radio to do YSF. FT4, FT8, just an example of a few modes

05:06.480 --> 05:13.600
that are used. Very slow speed, very long range, very low power on HF. So very low frequencies.

05:14.480 --> 05:23.600
And this kind of illustrates a point I'm going to go to. The new app, of course, DMR, Tetra,

05:23.600 --> 05:30.160
P25, all those commercial protocols which have been adopted by amateur radio, which

05:30.160 --> 05:36.800
are not designed for amateur radio. The main thing is, and especially when you talk about

05:36.800 --> 05:44.240
FT4, FT5 and such protocols, there are many of them, those have only one closed source

05:44.240 --> 05:49.760
implementation. It's not easy to play around with it. You can just, okay, I'm downloading this,

05:50.320 --> 05:56.400
trying to modify this. Is it better? Is it worse? The way you play around is, okay, which power do

05:56.400 --> 06:02.480
I need to reach this country in this weather or whatever, which is not what is suitable to each

06:02.480 --> 06:11.280
and every one of us. So we will briefly take these stars as an example. So released by Japanese amateur

06:12.080 --> 06:25.120
radio club, JARL in Japan in 2001. It uses AMBE codec vocoder from DVSI. So very briefly, vocoder,

06:25.680 --> 06:30.560
you know that voice is very complex signal. You need a lot of bits to transmit the voice,

06:30.560 --> 06:36.880
but amateur radio protocols are slow speed, slow bit rate. So you do need to encode the voice into

06:36.880 --> 06:42.400
something which is manageable by those digital voice protocols. And the way it is done in the case

06:42.400 --> 06:50.000
of DSTAR is using the AMBE codec from DVSI. Specifications are publicly available, but

06:50.000 --> 06:58.320
there is no license tied to those specifications, which means you do not have to publish whenever you

06:58.320 --> 07:06.400
deviate from those specifications. And so it kind of de facto became ICOM's proprietary mode.

07:07.920 --> 07:13.680
It is called DSTAR, but it is not made to be interoperable with other DSTAR implementations,

07:13.680 --> 07:18.080
which by the way, there are not really many other DSTARs implementations.

07:21.440 --> 07:27.200
So yeah, main obstacles. First, manufacturers exploit the fact that specifications are not

07:27.280 --> 07:33.120
really licensed, and so they can find the trick around to lock down their environments.

07:37.920 --> 07:46.320
Main obstacle, second part is technical capabilities. Back in 2001, encoding voice in a microcontroller was

07:46.320 --> 07:54.960
not really feasible. That's why you needed an ASIC, so a dedicated chip on the board made by DVSI

07:54.960 --> 08:02.080
with their AMBE codec to be able to encode voice into bits manageable, but by the whatever digital

08:02.080 --> 08:08.080
voice protocol you wanted to use. So I'm not spitting at DVSI and AMBE all the way. There is

08:08.640 --> 08:14.240
a whole lot of technical reasons why this is that way, but I think it's good to understand

08:14.240 --> 08:21.520
where we come from and to see where we can go from there. So also another thing to notice

08:21.520 --> 08:29.680
DSTAR, YSF, DMR, P25, NXDN, whatever, almost all the digital voice protocols being amateur radio or

08:29.680 --> 08:38.480
even commercial protocols use AMBE, AMBE to plus basically AMBE and variants of it from DVSI.

08:39.120 --> 08:48.880
Basically one vocoder to rule them all. So how does one think are with closed source vocoder?

08:49.280 --> 08:58.240
You don't. At least not really. But hey, the vocoder is an integral part of the protocol, so

08:58.240 --> 09:05.440
how do you do? What do you do? Is it possible to have what we could consider fully fast protocol

09:05.440 --> 09:15.840
if the vocoder is not open source and if so how do you do it? Well, 2001 was, sorry to break it to

09:16.080 --> 09:23.840
you, but quite a few years ago. So solution came in 2010. Name is Kodak2.

09:25.200 --> 09:31.920
Release in 2010 by David Roe. I want to underline that this was not an easy task. It was the topic

09:31.920 --> 09:39.680
of a full PhD thesis. It self-relying on old works and algorithms and so on. So nobody woke up

09:39.760 --> 09:43.520
in the morning and said, hey, let's do an open source vocoder. It's going to be easy.

09:43.520 --> 09:51.280
That's not how it goes. It's fully open source, no patents, no industrial secrets. That's the point.

09:53.200 --> 09:59.680
And since 2001, computing power on the microcontrollers increased by quite a lot. I mean,

10:00.400 --> 10:05.040
8-bit peaks and 32-bits are microcontrollers are not the same thing.

10:07.760 --> 10:14.880
So this last brick, which was kind of the missing brick to have open source, fully open source

10:14.880 --> 10:22.320
protocols, allowed to the emergence of two main protocols. The first one is FreeDV, which is designed

10:22.320 --> 10:30.000
by the same David Roe. He's not alone, but he is one of the contributors of FreeDV, licensed under

10:30.000 --> 10:39.200
GPLV 2.1, using Kodak2 at lower bit rates because it's in HF, so low frequencies, narrow bandwidth.

10:39.200 --> 10:43.680
You can't transmit a lot of bits. So you just slow it down. You degrade the voice a bit more,

10:43.680 --> 10:49.360
but then you're able to do long range digital voice communications. And it's also used as the

10:49.360 --> 10:57.360
reference Kodak2 implementation. So again, just like I said about FT4, FT5 a few slides ago,

10:58.000 --> 11:02.880
you do something and then you provide your own implementation, except that this one is open source.

11:04.320 --> 11:11.040
And then KM17, GPLV 2 uses Kodak2 at the highest bit rate available.

11:12.800 --> 11:18.400
It fits in a standard FM bandwidth for VHF and up, so you can't really use that in HF. It's

11:18.400 --> 11:23.280
a bit too wide. You are going to annoy a few people published in 2019.

11:26.160 --> 11:32.800
So, M17 protocol has all the features you could expect from a digital protocol in amateur radio,

11:32.800 --> 11:37.920
which is that you have the packet mode, so you can use it to control a remote site, for example,

11:37.920 --> 11:43.520
using just sending commands. You have a stream mode, which is the mode which is used when you

11:43.520 --> 11:51.200
use digital voice. It supports AES encryption, which depending on where you live, you might or

11:51.200 --> 12:01.360
might not use it. I know I can't. It does have also the specifications for traffic over IP,

12:01.360 --> 12:07.760
which I think is a good thing. If you look back, main digital voice protocols do not have that. So,

12:08.720 --> 12:14.960
the community will kind of go, each one has its own way of doing it and different implementations,

12:14.960 --> 12:19.520
and then somebody comes, hey, I have an idea. Let's try to inter-connect this, and it's just

12:19.520 --> 12:27.520
one more break to a very tall and fragile wall. So, here we provide specifications for this,

12:27.520 --> 12:34.000
which I think will ease up, does ease up implementation and inter-operation. If you

12:34.000 --> 12:44.080
probably know about DMR, to use DMR, you need DMR ID, which is centralized. We don't. In this protocol,

12:44.080 --> 12:48.320
you only need a call sign, which if you can use the protocol, you most probably already have a call

12:48.320 --> 13:00.480
sign, so problem solved. And the specifications are open source and license under GPLv2, which means

13:00.560 --> 13:05.760
that if some big manufacturer says, hey, I like this new protocol, let's try to benefit from it,

13:05.760 --> 13:10.640
yeah, great. But if you modify it to make it incompatible with our specifications,

13:10.640 --> 13:16.320
we will force you to publish your specifications completely, and we will find a way to make sure

13:16.320 --> 13:20.960
that whatever we do next is going to be compatible with you. If you don't want to be compatible with

13:20.960 --> 13:31.440
us, we will be compatible with you. Okay, so this was the M17 protocol, but we should go beyond that.

13:32.080 --> 13:41.680
There is the whole M17 project thing. More than a protocol, getting rid of the proprietary

13:41.680 --> 13:51.200
vocoder allows a load of things. First thing is you can have it running on your computer.

13:51.200 --> 13:56.960
You don't have to pay for any license fee. You don't have to have any USB dongle that you have to

13:56.960 --> 14:02.560
plug into your computer so that my software has to go through the proprietary chip that you used,

14:03.120 --> 14:08.720
blah, blah, blah, blah. You can have software on your computer for Dstar, for example, but you need

14:08.720 --> 14:17.760
this USB key on your computer to have the license to use the codec. You can have it on your phone.

14:17.760 --> 14:22.800
Same thing, DroidStar, maybe some of you know about it, maybe not yet. This is a very small

14:22.800 --> 14:28.480
app that allows you to use digital voice protocols and connect through reflectors, so servers.

14:29.120 --> 14:38.640
M17 allows it to run straight out of the box. AMBE codec, there are online implementations,

14:39.360 --> 14:43.840
illegal implementations that allows you to use AMBE, but you have to find it, download it,

14:44.720 --> 14:50.480
and then it becomes very shady and it's a cat and mouse game between DVSI and amateur radio

14:50.480 --> 14:57.760
operators. You can have it for your radio, a lot about that in just 10 minutes, apparently.

14:59.440 --> 15:04.480
You can have it on reflectors. Dstar reflectors do need the same USB key that you would need on

15:04.480 --> 15:11.200
your computer to translate the voice between AMBE and whatever else you would use. Maybe a small note

15:11.920 --> 15:18.640
that if you have a Dstar reflector, which is from Dstar to Dstar, you do not need this key because

15:18.640 --> 15:24.560
you do not need to decode the voice and re-encode it. You can just pass the encoded bits around,

15:24.560 --> 15:28.560
but if you want to switch from something to something else, then you're stuck.

15:29.920 --> 15:34.240
So yeah, it's a whole ecosystem which was able to grow from the ground up because of

15:36.160 --> 15:44.720
the open sourceness of codec 2, including in this ecosystem module 17,

15:46.880 --> 15:52.720
so which is this board which is open source hardware, open source software, open source protocol,

15:52.800 --> 16:00.320
open source, almost everything you can wish for. Let me go in the frame of the camera maybe.

16:02.480 --> 16:09.520
So you have the board here which is the newest revision 0.99 because you never do the 1.0 in one

16:09.520 --> 16:15.840
go. And then the enclosure that goes around with it because having this on your computer is screaming

16:15.840 --> 16:20.880
for I want short circuit as soon as possible, so let's try to avoid it and put it in an enclosure.

16:22.720 --> 16:27.040
Difficult thing is yeah, when you have open source hardware making money out of it is difficult,

16:27.040 --> 16:37.520
but this exercise is intentionally left to the reader. Yeah, fully open source, affordable.

16:38.160 --> 16:46.240
50 euros about that. Try to find digital voice, modem, TNC, whatever for that price. I think you

16:46.240 --> 16:55.120
will come back to us. Open HD, another baby which is on its way not as advanced as module 17 yet,

16:56.320 --> 17:02.880
but it's aimed at being a fully open source portable radio. Basically if you can modulate it,

17:02.880 --> 17:09.040
we can send it. For now it's only working on the 70 centimeters band, 430 megahertz,

17:09.040 --> 17:17.440
and the 2.4 gigahertz. So for those of you who can see Qo100 in the sky, it does the upstream to Qo100.

17:18.560 --> 17:25.600
25 milliwatts. Hey, it's a prototype. Step by step please. With its 3D printed enclosure also open

17:25.600 --> 17:35.440
source and very quickly it relies on a deaf board developed by ST Microelectronics and the backside

17:35.440 --> 17:42.480
we did ourselves with the power supply, the FPGA, and the transceiver. FPGA, so you can see maybe a

17:42.480 --> 17:52.240
few asterisks on the screen. The FPGA tool chain is sadly not open source. You know maybe if you

17:52.240 --> 17:58.080
play with that that having open source FPGA is difficult. It is one of our goals, but usually

17:58.080 --> 18:03.760
they will provide IPs in their software and then say yeah, if you want to exploit it commercially,

18:03.760 --> 18:10.720
please talk to us before that. So always a bit difficult to deal with that. We have plans for

18:10.720 --> 18:17.040
the future though. We are starting the work to port it over OpenRTX, which you will know about in

18:17.680 --> 18:28.000
six minutes and a half. We want an open source FPGA, so quick note that maybe the FPGA is not

18:28.000 --> 18:33.200
open source, but it does not prevent you from building it yourself. Downloading the software

18:33.200 --> 18:40.960
which is free as in beer and you can rebuild the bitstream and upload it to the radio. So

18:40.960 --> 18:46.640
you can still tinker with it however you want, but it's not strictly speaking open source.

18:48.720 --> 18:54.320
We want five watt output. We want USB-C charging. Oh my god, I come here, please.

18:56.080 --> 19:02.560
So yeah, we have plans. We are not only pushing our protocol in it, but we just want to make

19:02.560 --> 19:06.560
products better and open source for the community. I think there is a big hole in

19:06.560 --> 19:15.120
the ham radio community with this and we are here to fill it. A very quick shout out to some very

19:15.120 --> 19:22.880
interesting projects close to M17, the open source primary code OpenRTX. WPSD, which is the hot spot

19:22.880 --> 19:29.520
software that you can use which supports M17 for, I don't know, a few years, a few months back,

19:29.520 --> 19:35.520
they started support, contrary to PyStar which supports M17 for, I don't know, 10 days.

19:36.560 --> 19:44.560
MMDVM, the hot spot hardware. So we rely on those to have hot spots which do M17 and there are

19:44.560 --> 19:52.560
much, much, much, much more things that revolve around this. Okay, so thank you for your attention.

19:53.120 --> 19:59.920
I hope you liked it. I hope it gave you some ideas and desire to join us, help us. We need

19:59.920 --> 20:06.320
devs, please. I know everybody does need devs. Check out our infobooth, ham radio infobooth in

20:06.320 --> 20:11.840
building AWU, but I think most of you already came and say hello, but if you did not, we are still

20:11.840 --> 20:14.640
here today. Okay, thank you very much, guys.

20:14.880 --> 20:16.880
Thank you.

20:22.320 --> 20:23.920
We have some time for questions.

20:27.600 --> 20:28.100
Yeah.

20:32.720 --> 20:35.440
For FSK with root-raised cosine filtering.

20:37.920 --> 20:42.000
So the the main chip that you would use is CC1200 from Texas Instruments.

20:42.960 --> 20:43.460
Yep.

20:51.920 --> 20:57.760
Using the packet radio port. Just like you would do for AX25, for example, your old TNC.

21:01.360 --> 21:07.120
So this module basically takes the sound from the microphone, processes it, encodes it using the

21:07.200 --> 21:13.680
Kodak 2 vocoder, does the protocol framing, baseband creation and processing and filtering.

21:13.680 --> 21:20.480
You have baseband output here, feed it to your radio, and then the output is for FSK modulation

21:20.480 --> 21:23.280
with 4M modules, for M17 protocol.

21:25.920 --> 21:29.360
But if you want more, come to our infobooth. Yeah.

21:29.360 --> 21:32.800
What FPGA type radio is in the chipboard?

21:32.800 --> 21:39.680
For now it's the latest, I forgot the one. It's not an i40 which has an open source toolchain

21:39.680 --> 21:46.640
available. We had some technical issues, we had some technical issues with the FPGA, so the one we

21:46.640 --> 21:56.960
use, yeah, is LATIS, CERTUS, something, I guess, but because for the transceiver we use, we needed

21:56.960 --> 21:59.120
LVDS pairs for the data transmission.

22:02.320 --> 22:04.880
64 MHz for the LVDS pair speed.

22:08.320 --> 22:08.820
Yep.

22:10.000 --> 22:13.120
You have been addressing some of the shortcomings of all the other

22:14.800 --> 22:22.160
modulation schemes and protocols, so letting aside that they are not all open source,

22:23.120 --> 22:32.000
but they have other shortcomings like on UHF, there's reflection and there's fading and many

22:32.000 --> 22:40.560
other things that you are experiencing outside the lab. Actually, are you also addressing these

22:40.560 --> 22:48.160
things with M17? I mean, is there a better quality of voice? Is there a better cope with

22:48.240 --> 22:51.280
fading and reflections and things like that?

22:51.280 --> 22:56.160
Okay, yeah, there are shortcomings indeed with many digital voice protocols.

22:58.320 --> 23:03.120
We are between a rock and a hard place. We use for-office-scale modulation scheme which

23:04.080 --> 23:09.280
basically does not allow you to overcome the multi-path problems, reflections and so on,

23:09.920 --> 23:16.080
so we are aware of this. We have to go step by step maybe. Specifications are open, you are free to

23:16.080 --> 23:22.000
fork them and I don't know, implement it in OFDM to avoid some problems that you might have with

23:22.000 --> 23:31.840
specific issues which is linked to the physical layer. And for the voice quality, some will say

23:31.840 --> 23:38.320
that Kodek 2 sounds better than AMBE, some will say that it's worse. It depends, really,

23:38.320 --> 23:42.240
but I think it's at least on par with the other protocols.

23:42.480 --> 23:46.240
Yeah?

23:46.240 --> 23:56.880
So that's a nice thing. For the Internet use cage of UHF, have you curves or measurements that say

23:57.440 --> 24:07.040
what isn't that as an R? I can still do whatever analog voice versus M17 and how much further

24:07.120 --> 24:08.800
can you get with like bursts?

24:10.640 --> 24:18.320
Yeah, so this basically boils down to, yeah, do we have any graphs, lines,

24:19.440 --> 24:25.120
explaining basically the difference between analog and digital? Well, this is a wider topic than just

24:25.120 --> 24:33.440
M17, but I agree that maybe having those comparisons might be a good idea to push force into those modes.

24:33.920 --> 24:38.160
But no, we don't have those curves at the moment, I believe.

24:41.920 --> 24:43.440
Many people I think could have, but yeah.

24:47.840 --> 24:49.600
Absolutely, question if I can. Yeah.

24:51.360 --> 24:56.080
Have you thought about interfacing that or, and I know I'm on your description, so I'm asking you

24:56.640 --> 25:04.080
to because one of the things I like as to experiment is that you can put other data on your channel,

25:04.800 --> 25:08.240
but on the current hardware you cannot interface with it.

25:08.240 --> 25:11.360
Okay, so can we send arbitrary data using module 17?

25:12.400 --> 25:18.560
Not yet. Everything is there for you to be able to do it. So the final net is openRTX.

25:18.640 --> 25:25.920
There is a USB-C port with data lines connected to the chip, so we use it for final updates.

25:26.480 --> 25:32.560
We use it for STDIO output for debugging basically, and yeah, you should be able,

25:33.120 --> 25:37.360
in the future it is planned, but Sylvano in a few minutes will talk about that, having

25:38.480 --> 25:41.840
communication channel between the computer and the board, and then from there you can send

25:41.840 --> 25:44.720
basically whatever you want. So yeah, it is feasible.

25:45.440 --> 25:47.440
Yeah.

25:47.440 --> 25:58.400
Have any large manufacturers shown interest in M17? Yes.

26:00.240 --> 26:05.760
We talked about, we talked with Kenwood, which would be interested in implementing M17,

26:05.760 --> 26:13.040
so I pinpoint back to the fact that specifications are licensed, GPLv2, so they cannot lock it down

26:13.040 --> 26:20.400
for their own use. We also have connect systems which showed an interest in our radios and Bowfing.

26:25.520 --> 26:37.760
With no more questions, and I see no hands rising. Big thank you again. Thank you very much.

