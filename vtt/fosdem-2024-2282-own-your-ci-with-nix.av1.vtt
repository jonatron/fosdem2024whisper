WEBVTT

00:00.000 --> 00:11.200
Okay, all right. Hello, everyone. Meet Bob. Bob's a software engineer and Bob just had

00:11.200 --> 00:18.400
the idea of a century for a new startup. That's Gray Cat. Gray Cat is a service that

00:18.400 --> 00:22.800
given the picture of a cat will reach in the same picture, but grayscale. Bob's really

00:22.800 --> 00:27.880
excited about that and just got some funding to start working on that. So Bob gets started.

00:28.480 --> 00:33.080
Chooses to write that in Rust because that's cool and trendy and use GitHub because that's the

00:33.080 --> 00:38.320
standard. And so just writes the initial Rust boilerplate, the initial boilerplate for having

00:38.320 --> 00:44.920
that built by GitHub Actions, then Git commit, Git push. The first TI runs green. That's wonderful.

00:44.920 --> 00:51.000
Champagne. Now Bob decides to do something useful with that code and so he pulls in image2,

00:51.000 --> 00:56.760
which is the Rust library, for doing image manipulations, uses that in the code, builds it.

00:56.760 --> 01:02.800
The build is just fine locally. Wonderful. Now Git commit, Git push. The TI runs. It's not green.

01:02.800 --> 01:11.040
It's complaining about some missing data files somewhere. Okay, so Bob, no big deal about

01:11.040 --> 01:16.200
the software engineers. He knows how to use Google. So he searches, finds out that actually this

01:16.200 --> 01:23.520
image2 library is mostly a wrapper around C++ library, which is OpenImage.io. And it turns out

01:23.560 --> 01:27.560
that Bob had that installed on his laptop, but the CI runners don't, which is why it's failing

01:27.560 --> 01:34.120
on the CI. But no big deal. Bob just tweaks a bit the CI config to install OpenImage.io before

01:34.120 --> 01:40.440
running the build. And now the CI is green. Wonderful. So fast forward one year later, Bob

01:40.440 --> 01:48.680
Crop has grown quite a bit and also did the tech stack of Graycat. It's getting a bit complex,

01:48.680 --> 01:52.960
but no big deal. I mean, it's just a matter of having the right CI config file to make sure that

01:52.960 --> 01:59.760
everything's gets installed. So the config file has grown a bit out of hand with 5,000 lines of

01:59.760 --> 02:05.400
code, but it's not real problem. People just treat it as happened only whenever they need a new piece

02:05.400 --> 02:09.880
of software. They just add that to the config file, add a few lines to install it. Generally forget

02:09.880 --> 02:14.680
to remove it if they don't need it anymore. But I mean, no big deal. It works, right? And I mean,

02:14.680 --> 02:18.920
it's not like anyone would want to maintain that because just the feedback loop of having to do a

02:18.960 --> 02:24.920
change, push, push, wait for the CI, get the results. Yeah, now. Okay, better keep it like that. It

02:24.920 --> 02:29.960
would need to move fast anyway. Because if some troubles, if we know them, like for instance,

02:29.960 --> 02:34.720
when GitHub decides to update the base image of the runners because given the complexity of the

02:34.720 --> 02:40.080
setup, obviously something's breaking here and there. No big deal. It takes a couple of days

02:40.080 --> 02:44.360
sometimes to fix, sometimes a bit more blocking, blocking things a bit. That's annoying, but I

02:44.440 --> 02:52.040
mean, have to move fast. No, one day big deal happens. Microsoft, it's now 2025. Microsoft is in a

02:52.040 --> 02:58.840
slightly difficult financial situation and decides that this GitHub action thing is actually, yeah,

02:58.840 --> 03:04.640
it's wasting money on that. So just decides to shut it down. Well, no, not such a big deal. I mean,

03:04.640 --> 03:09.680
it's not like Bobcops married to GitHub actions. They just have to migrate this little config file

03:09.720 --> 03:16.360
and use another CI provider. That's what they do. And three months after, they actually managed to

03:16.360 --> 03:22.520
migrate that to a new CI config by a new provider. But now by the time competition has caught up,

03:22.520 --> 03:29.840
Graycat is definitely beyond. Bobcops is leaking, bleeding money everywhere. And this is the end of

03:29.840 --> 03:39.120
the Graycat dream. So very sad story for Bob. But could you have avoided that? So there's a bunch

03:39.200 --> 03:44.400
of things that went wrong. You might have noticed. But most of these are just like natural

03:44.400 --> 03:50.360
consequences of we want to do things the quick, quickly as possible. And so we just, like, we

03:50.360 --> 03:55.160
can't take care of everything. But there's one practical choice that Bob did at the very beginning,

03:55.160 --> 04:00.840
which was what caused the ultimate failure. And that was just being stuck on one single service

04:00.840 --> 04:07.920
provider and being at its mercy. And Bob could have avoided that, hopefully. The first, like,

04:07.920 --> 04:13.200
the elephant in the room, if I may say, is just the blue whale docker, which would have given Bob a

04:13.200 --> 04:20.320
way to just have a, like, agnostic way of defining this CI environment that doesn't depend on GitHub.

04:20.320 --> 04:26.680
And Bob could just have written a docker file instead of the CI config file. So now some things

04:26.680 --> 04:32.520
that wouldn't have solved is that the feedback loop for a big docker file is not that much better

04:32.760 --> 04:38.480
than that of the official CI. Docker's layering is great for caching when you don't need to touch the

04:38.480 --> 04:44.080
latest lines of the docker file if you touch up things at the top. You're pretty much screwed up.

04:44.080 --> 04:49.840
The other thing it would also not have solved is that unless you're very, very careful, it's easy

04:49.840 --> 04:55.480
to just have lines here and there that might break at any time because upstream decides to change

04:55.520 --> 05:05.760
something. But, I mean, this is okay. The big thing, the big problem that Bob would still have is that

05:05.760 --> 05:12.040
the libopementimage.io issue we had at the beginning. I mean, Bob has his laptop, he's working on that.

05:12.040 --> 05:17.800
On his laptop, he has the code for the project. He has tool chains needed to build the project. Then

05:17.800 --> 05:23.200
the CI of the container has the same code for the project, checking for the same, from the same

05:23.280 --> 05:29.200
commit, also has tool chains to build it, but not exactly the same ones. They are provided by a different

05:29.200 --> 05:35.240
means, so obviously there's going to be some differences that might break things down on the line.

05:35.240 --> 05:40.000
If you're lucky, it breaks your build. If you're unlucky, your build still succeeds, but then the

05:40.000 --> 05:45.720
underlying something behaves slightly differently and you have absolutely no clue why. So what would

05:45.720 --> 05:51.160
have been nice would have been to just have Bob's laptop and whatever is running the code in the

05:51.240 --> 05:57.000
CI, use exactly the same tool chains. And there's an obvious solution to that, just ask Bob to do all

05:57.000 --> 06:03.400
his development on the Docker container. That is great. The thing that's not great here is that Bob's

06:03.400 --> 06:09.080
laptop doesn't only have tool chains encoded, also has his text editor, his config, his whole

06:09.080 --> 06:14.440
development environment fine-tuned for years to just make Bob as efficient and productive as can be.

06:15.080 --> 06:20.120
And if Bob has to develop in the container, he mostly can't access that easily. And now we get a

06:20.200 --> 06:27.080
very sad and angry Bob and a very efficient Bob. So now there's one bit of the infrastructure that

06:27.080 --> 06:32.280
I barely mentioned in passing, but not made much attention to. That bit is cargo, the rest package

06:32.280 --> 06:37.160
manager. And the reason why I haven't really talked about it much is not that it's not important.

06:37.160 --> 06:40.760
I mean, it's probably the most crucial part of the infrastructure because it's the thing that

06:40.760 --> 06:45.640
pulls in the bulk of the dependencies of Gray Cat. But the reason I didn't talk about it that much

06:45.640 --> 06:49.320
is that it just walked. I mean, I was talking about broken things because it's always funnier to

06:49.400 --> 06:57.000
talk about broken things. And cargo was not broken, not nothing. And the reason cargo just walked,

06:57.000 --> 07:01.640
I think it's like there's two reasons. The first one is that cargo has been very transparent of

07:01.640 --> 07:07.000
the role. In the CI, Renskago to provide the dependencies for the build, and that's fast enough

07:07.000 --> 07:12.920
for the CI that just walks fine. Bob on his machine runs cargo for that, and that's works that doesn't

07:12.920 --> 07:19.080
prevent him from using all the rest of his tooling. And so Bob is happy using that. And beyond that,

07:19.480 --> 07:25.400
cargo is also declarative. Like there's one file, two files, that exactly define the set of rest

07:25.400 --> 07:30.600
dependencies that your code has. And when Bob runs cargo on his laptop, cargo just reads that file

07:30.600 --> 07:36.120
and provides the exact environment needed. When the CI clones the project, Renskago, it reads that

07:36.120 --> 07:41.480
same file and provides exactly the same environment. And that's why it walks. Now, there's one thing

07:41.480 --> 07:50.360
that cargo doesn't do properly. And that thing is everything except rest packages. And yeah,

07:50.360 --> 07:55.560
that's a problem because like the, yeah, that's why we have this open image, your problem. And so

07:55.560 --> 07:59.800
it means that actually the declarative aspect of cargo is limited because it's declarative

08:00.360 --> 08:06.520
to some point. You really have to read the terms and conditions for that. And so at that point,

08:06.520 --> 08:11.880
like it would be great if only we could have something a bit like cargo, but more generic,

08:11.880 --> 08:19.320
you know, that would be so awesome if only such a tool could exist. Okay, so meet my friend, Nick.

08:20.280 --> 08:26.200
You can think of it, Nick, if you don't know about it in that context as something exactly like cargo

08:26.200 --> 08:33.880
or NPM or whatever you want, except that it's fully generic. So you can use it to package and provide

08:33.880 --> 08:38.040
your rest crates if you want, but you can also use it to provide the C libraries that your rest

08:38.040 --> 08:42.760
crates depend on. And the C compiler used to compile these C libraries and the mini server

08:42.760 --> 08:46.840
you're using to run the test or the PostgreSQL database you're using for your deployment server.

08:47.560 --> 08:53.000
And so really now like declarative is not just a vain word. It is fully declarative up to the

08:53.000 --> 09:01.080
lowest level you might want to think of. And so what could happen for Bob if he were using Nick's

09:01.080 --> 09:06.840
is that he has this laptop with everything set up and then he can just use Nick's to provide these

09:06.840 --> 09:13.160
tool chains. And because Nick's is transparent, it will it won't prevent Bob from still using his

09:13.160 --> 09:18.520
editor with his all his tools just on top have the required tool chains to build the code.

09:19.160 --> 09:26.040
And that makes a very, very happy Bob. And then the CI system can just use the same

09:26.040 --> 09:31.080
Nick's with the same Nick's config files to get the tool chain. And then the CI builds exactly

09:31.080 --> 09:36.440
the same thing as Bob on his laptop and the world is wonderful. So now assuming that,

09:37.240 --> 09:41.800
now I mean I'm not assuming Bob is convinced that Nick's is the great thing and probably you are too,

09:41.800 --> 09:47.800
right? And what would that look like in practice then for Bob to use Nick's? So Bob would essentially

09:47.800 --> 09:55.560
drop a shell.nix file at the root of his environment saying, hey, I want a shell. So calling the make

09:55.560 --> 10:02.520
shell function to get a deployment shell saying, I want in my shell this set of packages,

10:02.520 --> 10:09.640
cargo, rest, open image, whatever you want. And the little bit of magic here is this PKGS thing

10:09.640 --> 10:18.680
from which everything comes, which you import which points to Nick's package collection,

10:18.680 --> 10:24.600
big repository with recipes for all the packages that exist in Nick's, which you can. So I've hidden

10:24.600 --> 10:29.800
that, but you can import that in this Nick's package.nix file and pointing to a very specific

10:29.800 --> 10:34.840
commit of the Nick's package's repository which will pin down every single version of all your

10:34.840 --> 10:40.840
transitive dependencies. And now if Bob wants to use that, he can just run the Nick's shell command,

10:40.840 --> 10:46.520
be dropped into a new shell in which, for instance, cargo will be available at a path that is

10:46.520 --> 10:53.720
managed by Nick's. And once Bob exits the shell, no cargo anymore, that's what we wanted. But then,

10:53.720 --> 10:59.960
I mean, Docker also does that. The bit that Nick has in terms of transparency, the extra coolness,

11:00.600 --> 11:08.520
is that the shell doesn't tell anything about Vine, Bob's editor. But still, I mean,

11:08.520 --> 11:12.840
Bob can still access his Vine, install Globody on his laptop, even inside the shell,

11:14.520 --> 11:18.920
which is what you want for development because it's much, much, much nicer. And when Bob wants

11:18.920 --> 11:22.920
some extra guarantees that really his shell is complete, he's not just accidentally leaking

11:22.920 --> 11:27.240
things from his computer. You have an extra pure mod that you can use for building things with

11:27.240 --> 11:33.240
more guarantees. And so that's Bob's machine, but this talk about CI. So let's look at the CI side

11:33.240 --> 11:39.400
of things. On the CI, so Bob would still be using GitHub CI because that's the standard at that time.

11:39.400 --> 11:45.960
But then beyond the initial mandatory boilerplate to just fetch the repository and all that,

11:45.960 --> 11:51.160
there's only two things that Bob would need to have in his CI config file. The first one is install

11:51.160 --> 11:57.800
Nick's because it's not yet part of the default GitHub image. And the second one is render build

11:57.800 --> 12:04.040
within a Nick shell, a pure one because you really want to be strict at that point. And then if Bob

12:04.040 --> 12:11.720
needs to migrate, all he needs to do is on his new CI system install Nick's again and copy that

12:11.720 --> 12:17.640
exact Nick's shell command. And now Bob is fine. And we can all send great cat pictures over the

12:17.640 --> 12:26.440
internet. So this was like scratching the edge of the tip of the iceberg. We could go a bit

12:26.440 --> 12:31.160
much further, although I only had 15 minutes, so I won't cover all that. But the first thing we could

12:31.160 --> 12:35.560
do to go a bit further is to improve the pinning situation. I mentioned like I hand wave this,

12:35.560 --> 12:41.560
oh, you have this file that pins things down to a very specific version. There's ways to make that

12:41.560 --> 12:46.680
much nicer and using a proper log file like all modern package managers would do so that you have

12:46.680 --> 12:52.760
full control over when you want to upgrade. But it's also trivial to upgrade. More interestingly,

12:52.760 --> 12:57.880
you can also use Nick's a bit further and not only use it to provide you some development or

12:57.880 --> 13:03.000
some CI environment, but you can build your thing fully with Nick's, which gives you, I mean, first

13:03.000 --> 13:07.400
time extra guarantees that, oh, this is really the right thing I've built in the right environment,

13:07.400 --> 13:12.200
in the right set of dependencies. But more interestingly, now you can integrate that and

13:12.840 --> 13:18.040
use Nick's a bit further, for instance, to build OCI images on top of that with only a few extra

13:18.040 --> 13:23.880
lines of Nick's code, or use that to build AMIs for whichever cloud provider you want to use.

13:25.480 --> 13:30.360
At that point, you probably want to care about caching. Nick's is pretty great at caching things

13:30.360 --> 13:34.040
for that today. If you have a know-how build, it's really going to be a know-off and take you

13:34.040 --> 13:40.360
a few seconds rather than the whatever time it takes to build the project. And you can also get

13:40.360 --> 13:44.760
that cache to be distributed, meaning that your developers, if that's built on the CI,

13:44.760 --> 13:50.200
then your developers can just reuse the pre-built results, which makes their life quite nicer.

13:51.240 --> 13:56.520
And the last thing that could be done to go further is to use Nick's OS, which is a Nick's-based

13:56.520 --> 14:00.840
Linux distribution, which follows that same philosophy of being purely declarative,

14:01.480 --> 14:05.560
which means that you just have one config file that describes the whole system, and you just

14:05.560 --> 14:10.280
rebuild the system based on that, which is useful for deployment, because that's infrastructure

14:10.280 --> 14:16.440
at the core, but really down to the deepest level, not just scratched on top of something that existed

14:16.440 --> 14:21.400
before that and was never meant to be that way. And you can also use that for testing things further.

14:22.440 --> 14:29.640
There's in particular a really nice testing framework that allows you to always declaratively

14:29.640 --> 14:34.040
declare a whole network of virtual machines that you can spawn, rinse, comment on, and then just

14:34.040 --> 14:40.360
read the results. And that's really useful, whereas as soon as you start to want to test some

14:40.360 --> 14:47.800
weird multi-tenant applications. So all that I've been talking about, Bob, but maybe a few words

14:47.800 --> 14:53.320
about me, but you know who's talking to you. So I'm Theo Fan. I'm the leader of the Nick's Tech

14:53.320 --> 14:57.880
Group at TWIG, which is the open source program office of Modisk Create, and it's pretty big on

14:57.880 --> 15:03.000
Nick's, as you might have guessed. And I'm also a maintainer of Nick's and a member of the Foundation

15:03.000 --> 15:09.160
Board, the Nick's Foundation Board. And you can reach me in all these places, and more concretely,

15:09.160 --> 15:16.440
you can also meet me right here in the AW building where we have the Nick's West End. And that's all for me.

