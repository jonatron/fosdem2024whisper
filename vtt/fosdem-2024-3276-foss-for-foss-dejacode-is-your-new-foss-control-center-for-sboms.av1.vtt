WEBVTT

00:00.000 --> 00:16.000
All right, so hopefully there's a bit of a voice left after last night's excesses.

00:16.000 --> 00:17.520
And I think it's the same for everyone.

00:17.520 --> 00:19.380
So it's not my regular voice.

00:19.380 --> 00:21.320
Usually it's a bit higher.

00:21.320 --> 00:23.280
So thank you for joining me today.

00:23.280 --> 00:32.160
So I want to present a new tool called DejaCode, which is a tool that can help manage S-BOM.

00:32.160 --> 00:34.520
And we'll go through that.

00:34.520 --> 00:41.440
Agenda, quick word about me and the project at large.

00:41.440 --> 00:48.200
We'll show you some of the features of the tool and then I'll go to a demo.

00:48.200 --> 00:52.520
So about me, I like to think I'm on a mission to make it easier to reuse free and open source

00:52.520 --> 00:53.520
software.

00:53.520 --> 00:59.960
And that means removing any obstacles that are in the way with its license, security

00:59.960 --> 01:06.960
issues, and eventually in the future quality, sustainability are related.

01:06.960 --> 01:13.960
I lead this project called AboutCode, which has many subparts, including well-known scan

01:13.960 --> 01:17.080
code and also package URLs.

01:17.080 --> 01:21.000
I don't know how many of you know about this or have ever used it in any way, shape, or

01:21.000 --> 01:23.240
form, show of hand.

01:23.240 --> 01:24.240
Yeah!

01:24.240 --> 01:25.240
Great.

01:25.240 --> 01:28.880
So I'm speaking and preaching to the choir.

01:28.880 --> 01:32.000
And this is my technical advisor.

01:32.000 --> 01:35.760
It's a family rescue puppy.

01:35.760 --> 01:38.440
She's six years old.

01:38.440 --> 01:44.120
And he decided that he better spend his time on my keyboard, which is not easy.

01:44.120 --> 01:49.960
So sometimes if we're chatting and you see really like weird stuff going on, that must

01:50.080 --> 01:51.080
be.

01:51.080 --> 01:58.920
So AboutCode, it's open source tools, but also open data.

01:58.920 --> 02:01.600
And I think that makes a big difference.

02:01.600 --> 02:06.900
We're trying to focus on providing as much as possible low level primary tools to do

02:06.900 --> 02:11.880
scanning, origin detection, and provide volunteer data.

02:11.880 --> 02:14.760
I'm one of the original co-founders of SPDX.

02:15.520 --> 02:20.640
I also contribute to Scylindiax and I hope sometime we'll be able to bring the two together.

02:20.640 --> 02:25.440
I'm also co-founder of ClearDefine.

02:25.440 --> 02:29.040
And I try to contribute to many other tools.

02:29.040 --> 02:32.280
We're supported and blessed to be supported by quite a few of your companies.

02:32.280 --> 02:33.960
So that's awesome.

02:33.960 --> 02:39.720
And we have a company behind that just provides services to help sustain the work.

02:39.720 --> 02:47.120
Most of our work is about in fact sustaining the development of the tools.

02:47.120 --> 02:54.000
So the problem, just to frame it the way I like to think of it, is we now can develop

02:54.000 --> 02:58.120
software using components that we can assemble.

02:58.120 --> 03:06.960
It's going to be even worse or even better after the use of Generative AI.

03:07.960 --> 03:13.200
And it's very easy to forget where the codes come from.

03:13.200 --> 03:21.520
And we need to know where it's from, what's the license, security, and in the future other things.

03:21.520 --> 03:25.640
There's a big problem in software promotion and this is that there's been a huge amount

03:25.640 --> 03:32.080
of investment from VCs we're talking about in the range of about 1.5 billion fucking dollars.

03:32.080 --> 03:33.680
Right?

03:34.400 --> 03:39.640
All of this is to eventually milk and mine free and open source software.

03:39.640 --> 03:45.040
So you pretend to make it safer and easier to use for large corporates.

03:45.040 --> 03:48.960
I have nothing against that but I think we need as a community to come together to bring

03:48.960 --> 03:53.960
better tools and what I'm trying to do.

03:53.960 --> 03:59.000
So the about code stack, three components, three parts.

03:59.000 --> 04:04.320
One which is a bunch of low level tools that can find where the code comes from.

04:04.320 --> 04:05.320
That's the SCA tools.

04:05.320 --> 04:08.920
Management app, deja code that we're going to look at today.

04:08.920 --> 04:14.320
And three components in the knowledge base which is database of license which is built

04:14.320 --> 04:18.440
on top of SPDX for anything that doesn't go into SPDX.

04:18.440 --> 04:23.840
Which is the last I looked, the largest database of license, this side and this square ground

04:23.840 --> 04:25.240
of the galaxy.

04:25.240 --> 04:28.440
So it's not too shabby at least, open database.

04:28.480 --> 04:34.800
Database of package metadata, files and fingerprints and database of vulnerabilities.

04:34.800 --> 04:37.400
And just a word on the vulnerability side.

04:37.400 --> 04:42.520
I'm surprised because we're trying to get the data upstream from the source.

04:42.520 --> 04:46.160
And it's very clear that nobody did it in many case before.

04:46.160 --> 04:51.040
We want to ask the beyond people what's the license of your vulnerability data?

04:51.040 --> 04:52.480
Nobody ever asked.

04:52.480 --> 04:56.080
We want to ask the NGINX folks.

04:56.080 --> 05:02.280
What is the meaning of your advisory vulnerability range?

05:02.280 --> 05:04.080
It took us two months to understand.

05:04.080 --> 05:06.320
Back and forth with the NGINX metanus.

05:06.320 --> 05:09.200
Nobody ever had asked them.

05:09.200 --> 05:12.640
Last week we were in discussion with the folks from G-LiP-C.

05:12.640 --> 05:17.480
They became a CNA recently so they're allowed to assign TVs.

05:17.480 --> 05:19.080
They publish advisories.

05:19.080 --> 05:24.080
Obviously never anyone had asked them how to parse this stuff because we're the first

05:24.080 --> 05:27.720
and we're doing a back and forth so we're helping them also for the community at large,

05:27.720 --> 05:28.960
making this a bit easier to do.

05:31.000 --> 05:39.200
So I won't, I'll put the slide online and I won't go into all the details.

05:39.200 --> 05:44.240
Something of interest on the SA tools beyond scan code is a new tool for doing code matching.

05:44.240 --> 05:49.520
Code matching is you have a big index and you're able to find based on fingerprints,

05:49.520 --> 05:55.800
whole package files and eventually approximate files down to the elusive snippet.

05:55.800 --> 05:59.760
But we're doing it in a very different way that's been done by existing tools so that's worth looking at.

05:59.760 --> 06:00.840
And of course package URL.

06:03.360 --> 06:07.080
On the data, just a quick look at where we stand.

06:07.080 --> 06:11.080
There's a big problem we have right now is how we can share this data efficiently.

06:11.080 --> 06:14.360
So we, we, we have received a bit of funding from the EU for that.

06:15.360 --> 06:21.920
And we're building a system where we can federate the data to massively share it without keeping the control of it.

06:21.920 --> 06:25.520
That again, not our intent to keep the control of this.

06:25.520 --> 06:30.200
Eventually you could think of it as something like a federated open food fax for code.

06:32.880 --> 06:34.280
So there's a code.

06:34.280 --> 06:41.680
The point is you can import, spdx, cyclone dx.

06:41.680 --> 06:44.800
You can generate cyclone dx and spdx.

06:44.800 --> 06:47.080
You can aggregate that in a product.

06:47.080 --> 06:50.680
So you can combine all of these, but you can also enrich it.

06:50.680 --> 06:53.120
So you can say, hey, you know, I received this sbomb.

06:53.120 --> 06:59.600
Maybe it was generated by gripe or sift and it's missing license data, which is a common occurrence.

06:59.600 --> 07:06.080
And I press a button and voila, I get the stuff scanned.

07:06.080 --> 07:07.440
Let me show you an example.

07:08.200 --> 07:11.360
So that's deja code.

07:11.360 --> 07:14.640
We don't have a lot of time, so I'm cutting a bit for the chase.

07:14.640 --> 07:17.840
You know, I have a product here, an example product.

07:17.840 --> 07:23.560
I have a bunch of files there, package actually.

07:23.560 --> 07:27.840
And if I want these to be scanned, I just say, you know, scan all the packages.

07:27.840 --> 07:32.720
And it will eventually fill in the blanks for license.

07:32.720 --> 07:35.720
It's also doing the same for volumeties.

07:36.280 --> 07:40.680
And if we look at the inventory of packages, well,

07:40.680 --> 07:47.400
this one doesn't have too much information in terms of volumeties.

07:47.400 --> 07:52.320
Let me look at another example, which may be a bit more interesting.

07:54.320 --> 07:55.160
Oh, yes, log for G.

07:55.160 --> 07:56.200
No, that's there.

07:56.200 --> 07:57.200
Yeah, that's a good one.

07:57.200 --> 07:57.680
That's true.

08:00.120 --> 08:01.960
Well, it's another one here.

08:01.960 --> 08:03.240
So this is an example here.

08:03.240 --> 08:04.640
It shows up.

08:04.640 --> 08:09.360
It looked up volumeties and a bunch of log for back volumeties.

08:10.680 --> 08:15.640
The integration we're doing is with the open data we have with vulnerable code.

08:15.640 --> 08:19.560
So if you drill down the package, you have details about the volumeties.

08:20.720 --> 08:25.400
And eventually you can zoom in on the details.

08:25.400 --> 08:28.640
The interesting thing we do with the volumeties data, as I said,

08:28.640 --> 08:31.480
we aggregate data from any source.

08:31.480 --> 08:36.720
That includes all the GitHub, GitLab, NVIDIA, Google data, and

08:36.720 --> 08:39.080
many upstream source.

08:39.080 --> 08:42.080
And we're trying to compare and contrast them so

08:42.080 --> 08:44.400
we can find what is actually the correct data.

08:44.400 --> 08:47.520
It's a cluster fuck of mess.

08:47.520 --> 08:50.400
You have database that make up packages.

08:50.400 --> 08:52.440
Not a big deal, nobody uses them.

08:52.440 --> 08:57.480
But in terms of trust in the data, it's you have incorrect version ranges,

08:57.480 --> 08:59.360
more often than not, different database.

09:00.360 --> 09:05.560
Don't agree on which package is vulnerable and which one is fixing the stuff.

09:05.560 --> 09:09.440
So you're like on the receiving end, if you're in a security team,

09:09.440 --> 09:14.120
you have your eyes to cry and you're going to spend your life doing triage

09:14.120 --> 09:16.360
of low quality data.

09:18.080 --> 09:21.280
So we're not fully there yet, but we're trying to.

09:21.280 --> 09:26.600
So for instance, you see here you have a vulnerability identified by

09:26.720 --> 09:33.680
Perl for an instance of the package in Debian, but also at Mevan.

09:35.560 --> 09:37.520
So that gives you a bit of an idea of what we can do there.

09:39.560 --> 09:41.360
So let me go back briefly to the side.

09:44.200 --> 09:49.800
So you can import a speedy x, import cyclone DX.

09:49.800 --> 09:52.120
One thing we don't do yet is vex.

09:53.120 --> 10:01.000
Being able to provide effective statement of if the usage of certain package,

10:01.000 --> 10:06.120
which are vulnerable in my products or applications are vulnerable effectively.

10:07.800 --> 10:08.720
But that's on the roadmap.

10:09.920 --> 10:14.200
In particular, one thing that's great is that there's a format called CSEF.

10:15.600 --> 10:17.960
And it's essentially based on Perl.

10:17.960 --> 10:20.520
I've discussed a lot with the folks that promote this.

10:20.520 --> 10:26.360
So there's a lot of low impedance between what we have there in terms of data

10:26.360 --> 10:29.520
model and what exists in CSEF for instance.

10:30.680 --> 10:37.720
Open vex is also based on Perl and so is the cyclone DX format for vex.

10:41.560 --> 10:42.360
Where are we next?

10:42.360 --> 10:44.360
So yeah, so that's a product.

10:44.360 --> 10:49.160
The data model is composed of products, which is typically what you think as a

10:49.160 --> 10:50.440
product or application.

10:53.080 --> 10:54.000
You can have many of them.

10:54.000 --> 10:55.080
You can have versions.

10:56.520 --> 10:58.920
We like to track the jacquard itself there.

10:58.920 --> 11:00.240
And you can see we change license.

11:00.240 --> 11:01.360
We're not always open source.

11:02.560 --> 11:07.360
And it's much more comfortable to have every piece of code and open source and

11:07.360 --> 11:10.280
data open source, except one which is my passwords and keys.

11:11.520 --> 11:12.720
But everything else that works.

11:12.720 --> 11:15.120
You can do comparison between versions.

11:16.440 --> 11:18.400
You can see what's been added, removed, changed.

11:18.400 --> 11:20.680
So it's a rich data model.

11:20.680 --> 11:24.720
You have components which is a way to combine together things which will be

11:24.720 --> 11:26.680
typically what you think as a component is.

11:26.680 --> 11:31.920
Maybe one or more package that you reuse as a block of construction in your

11:31.920 --> 11:33.360
product construction set.

11:33.360 --> 11:39.320
You have licenses, owners, a bunch of tools for reporting, LDAP integration.

11:39.320 --> 11:45.920
Everything you would expect from a decent enterprise between quote grade app

11:45.920 --> 11:47.600
that you want to use for this kind of purpose.

11:49.040 --> 11:50.560
And that's it.

11:50.560 --> 11:51.120
Questions?

11:53.120 --> 11:53.400
Go ahead.

11:55.080 --> 11:59.800
How do you see yourself in contrast to OVAS dependency tracking?

11:59.800 --> 12:06.160
So to my understanding, you lack racks, but you're stronger on the license side.

12:06.160 --> 12:10.360
So the question is, I repeat for the audience,

12:10.360 --> 12:15.360
how do I see deja code in contrast with dependency track?

12:15.360 --> 12:16.880
So they're good buddies.

12:18.760 --> 12:20.800
We have a slightly different way.

12:20.800 --> 12:26.880
First, the UI is white as opposed to the default UI which is black on dependency

12:26.880 --> 12:28.400
track.

12:28.400 --> 12:30.400
I hate dark mode personally.

12:30.400 --> 12:37.080
And each time there's someone that comes with a contribution to put dark mode,

12:37.080 --> 12:43.360
we eventually find a way to redirect it to more positive energies.

12:43.360 --> 12:48.360
But so that's one thing.

12:48.360 --> 12:51.360
That's a big, big difference.

12:51.360 --> 12:57.960
Technically, so the dependency track is essentially doing similar things.

12:57.960 --> 13:02.800
I guess the big difference is whether you're based on product and

13:02.800 --> 13:05.400
packages versus your focus is more vulnerabilities.

13:05.400 --> 13:10.600
Here you could think of it as a way to manage your package and

13:10.600 --> 13:14.040
component inventories across multiple products.

13:14.040 --> 13:17.960
You can do custom reporting, this kind of thing.

13:17.960 --> 13:20.600
But yes, there's probably a lot of similarities.

13:20.600 --> 13:25.440
Another tool which we may have quite a few similarities would be software 360.

13:27.360 --> 13:32.440
Now, at the lower level, which one does what exactly it's difficult to say?

13:32.440 --> 13:34.320
I know the folks of dependency track are working.

13:34.320 --> 13:37.720
They reached out to me to integrate the data we have on vulnerable code.

13:38.720 --> 13:42.720
So eventually, maybe they all level up and that's great.

13:42.720 --> 13:45.720
We're not in a competition mode.

13:45.720 --> 13:50.720
We collaborate and we share as much as we can and let the best two win.

13:50.720 --> 13:54.720
And there's probably people that prefer dark mode and people prefer light mode.

13:56.720 --> 13:58.720
Other questions?

13:58.720 --> 14:00.720
Thank you.

14:00.720 --> 14:02.720
Thank you.

14:02.720 --> 14:06.720
I'm sorry, but if you have multiple licenses, you have an ant here.

14:06.720 --> 14:07.720
Yes.

14:07.720 --> 14:09.720
It technically means more in some cases.

14:09.720 --> 14:16.720
No, in the case of this, at the top level package, all the licenses apply because you have different shanks.

14:16.720 --> 14:17.720
One part.

14:17.720 --> 14:18.720
So you have also the case that is more?

14:18.720 --> 14:19.720
Of course, of course.

14:19.720 --> 14:20.720
Yeah, yeah.

14:30.720 --> 14:31.720
Thank you.

