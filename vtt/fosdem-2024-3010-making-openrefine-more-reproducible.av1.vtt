WEBVTT

00:00.000 --> 00:13.600
Okay. So we welcome Antoine Delpache, if I'm correct.

00:13.600 --> 00:16.600
And yeah, Florey Searst.

00:16.600 --> 00:20.720
Thank you. So I'm Antoine Delpache.

00:20.720 --> 00:23.960
I'm a developer on the Open Refine project.

00:23.960 --> 00:28.000
And I'm very happy to be back in this bedroom to tell you,

00:28.000 --> 00:30.320
give you a few news about Open Refine.

00:30.320 --> 00:34.960
And in particular, I'm going to be focusing on what I'm working on right now,

00:34.960 --> 00:38.440
together with Zoe Cooper, who's a designer on the project,

00:38.440 --> 00:41.800
to make Open Refine more reproducible.

00:41.800 --> 00:45.040
So I will first explain to you what Open Refine is,

00:45.040 --> 00:49.120
because I'm not assuming everyone was here four years ago.

00:49.120 --> 00:52.360
And if you were, don't worry, there are some differences

00:52.360 --> 00:53.640
that you might be able to spot.

00:53.640 --> 00:58.000
I'm very keen to know if those differences look good to you.

00:58.000 --> 01:04.120
And also, what do I mean with reproducible in this context?

01:04.120 --> 01:06.560
So what is Open Refine?

01:06.560 --> 01:08.920
It's a data cleaning tool.

01:08.920 --> 01:13.160
So you can import tabular data, mostly, in it.

01:13.160 --> 01:17.080
And then it lets you do all sorts of cleaning operations on it.

01:17.080 --> 01:18.040
Guess what?

01:18.040 --> 01:20.320
So let me give you an example.

01:20.360 --> 01:23.760
So this is a database of filming locations in Paris.

01:23.760 --> 01:25.920
So every time you film something in Paris,

01:25.920 --> 01:30.960
you need to register it with the city, and then they make this data set.

01:30.960 --> 01:36.280
And one thing I can do here is to say, let's match all of those films

01:36.280 --> 01:38.080
with an external database.

01:38.080 --> 01:40.120
And we call that reconciliation.

01:40.120 --> 01:44.680
So in this example, I'm going to reconcile it with WIC data

01:44.680 --> 01:48.240
that we've already heard about earlier today.

01:48.240 --> 01:54.000
And because reconciliation is a bit of a tricky process,

01:54.000 --> 01:58.360
we have various options to let you configure how we're going

01:58.360 --> 02:03.920
to match your data to WIC data so that we just don't only rely on the names,

02:03.920 --> 02:09.280
but also on other attributes that we have in this data set.

02:09.280 --> 02:15.480
And we then have various tools to help you make that a little bit efficient

02:15.480 --> 02:21.040
and let you review the results of the reconciliation manually.

02:21.040 --> 02:30.840
So for instance, here I can hover this and get a link to the WIC data item

02:30.840 --> 02:35.280
that it could link to.

02:35.280 --> 02:40.200
So that's a sample of one type of operation that people do a lot with

02:40.200 --> 02:42.200
OpenRefine.

02:42.200 --> 02:46.200
You can then manually match things if you want to go through the entire

02:46.200 --> 02:49.240
data set yourself.

02:49.240 --> 02:51.680
Let me show you something else.

02:51.680 --> 02:54.240
Well, first, once you've done this reconciliation,

02:54.240 --> 02:58.280
you can pull some data from the target database.

02:58.280 --> 03:03.880
In this example, I could, for instance, do something quite simple.

03:03.880 --> 03:05.280
Sorry.

03:05.280 --> 03:11.240
Let's just add a new column with the URLs of those entities

03:11.280 --> 03:12.680
in the database.

03:12.680 --> 03:18.480
So that's something that I can do quite quickly.

03:18.480 --> 03:21.120
And you get your new column.

03:21.120 --> 03:26.000
You could also pull more information from WIC data, identifiers in other

03:26.000 --> 03:30.600
databases, things like that.

03:30.600 --> 03:34.640
Let me show you another sort of operation you can do in OpenRefine.

03:34.640 --> 03:38.520
This is the column with the directors of those films.

03:38.520 --> 03:41.520
And I can try to cluster them.

03:41.520 --> 03:44.040
So what does it mean?

03:44.040 --> 03:47.760
Well, we are going to basically look through all sorts of values in this

03:47.760 --> 03:51.880
data set and try to detect whether they might refer to the same entity.

03:51.880 --> 03:56.000
And when that's the case, then you often want to normalize those to one

03:56.000 --> 03:58.120
consistent spelling.

03:58.120 --> 04:03.320
That's very useful, typically, as a first step for reconciliation.

04:03.320 --> 04:08.480
So those are samples of the canonical values you could use.

04:09.440 --> 04:14.520
So let's say I want to use all of those suggestions and accept them as

04:14.520 --> 04:18.040
valid clusters.

04:18.040 --> 04:18.600
OK.

04:18.600 --> 04:21.440
So those are the sorts of things you can do in OpenRefine.

04:21.440 --> 04:25.440
Now, what do I mean by making this tool more reproducible?

04:25.440 --> 04:30.480
So imagine you're a researcher working on some data that you've collected.

04:30.480 --> 04:34.080
You're cleaning it with OpenRefine as part of your research process.

04:34.080 --> 04:37.960
And at the end, you want to publish a paper about what you did and you want

04:37.960 --> 04:40.240
to make your research process transparent.

04:40.240 --> 04:44.080
So you want your fellow researchers to be able to inspect what you've done

04:44.080 --> 04:50.240
in OpenRefine and ideally even reproduce it on a similar version of the data set.

04:50.240 --> 04:53.760
So what can we do for now?

04:53.760 --> 04:59.680
The best thing we have for this so far is our undo-redu tab.

04:59.680 --> 05:04.560
And as you can imagine, it's primarily designed for undoing things that you've

05:04.600 --> 05:09.040
done, but it also happens to list all of the operations you've done so far with

05:09.040 --> 05:09.760
OpenRefine.

05:09.760 --> 05:14.760
So you could try and copy and paste this in your research article as a way of

05:14.760 --> 05:17.520
saying, this is what I did.

05:17.520 --> 05:20.920
Now, this is not exactly ideal.

05:20.920 --> 05:28.000
So we are working on improving basically this part of the tool.

05:28.000 --> 05:33.840
And before we get into reproducibility per se,

05:33.920 --> 05:37.320
there's already a lot of usability issues with this interface.

05:37.320 --> 05:42.440
And that's where it's been very interesting to work with a designer on this

05:42.440 --> 05:46.840
project who was also not familiar with the tool before she came on board.

05:46.840 --> 05:52.000
And so she was really able to come with a fresh eye and identify things that I

05:52.000 --> 05:55.640
really couldn't see anymore because I've been looking at this for so many years

05:55.640 --> 05:56.280
already.

05:56.280 --> 06:02.040
So for instance, here, it might not be clear to everyone that you can actually

06:02.040 --> 06:05.360
click on those previous steps to go back to them.

06:05.360 --> 06:08.720
We don't have any undo button in OpenRefine.

06:08.720 --> 06:15.000
We only have this weird undo, redo tab where you can't really click on the undo

06:15.000 --> 06:17.280
or the redo, like things like this.

06:17.280 --> 06:21.320
And so it's been really eye-opening.

06:21.320 --> 06:23.120
What else can you not do?

06:23.120 --> 06:29.520
Well, say I realized that this match here was wrong and I want to undo just this

06:29.520 --> 06:33.840
operation, but I want to keep all of the following ones.

06:33.840 --> 06:39.200
There's no good workflow to do that, but it's very often requested.

06:39.200 --> 06:44.480
So let me now show you what we can do with those extract and apply buttons here.

06:44.480 --> 06:47.440
So I'm going to roll back here.

06:47.440 --> 06:53.720
And if I click extract, I get this interface where I can select some operations

06:53.720 --> 06:58.320
I'm interested in and then I get some code for them.

06:58.320 --> 07:04.880
And this big blob of JSON is something I can copy and share as the representation

07:04.880 --> 07:06.560
of those operations.

07:06.560 --> 07:15.080
And I can also reapply them later on on this project or another one.

07:15.080 --> 07:19.520
Now, the problem with this is that it's very hard to work with this representation.

07:19.520 --> 07:21.520
It's very unreadable.

07:21.520 --> 07:23.440
And it's also very brittle.

07:23.440 --> 07:28.040
So for instance, if the column names of your new data set do not exactly match

07:28.040 --> 07:34.240
the column in the original data set, you will have horrible errors and it will be very

07:34.240 --> 07:38.120
hard to do anything with those operations.

07:38.120 --> 07:43.560
So that's the core of what we're trying to solve, providing a better representation

07:43.560 --> 07:52.000
for those operations so that you can understand what they are and also reapply them reliably.

07:52.000 --> 08:00.880
So as a summary of the main goals of this project, make the basic undo-redu functionality

08:00.880 --> 08:05.000
just more usable.

08:05.000 --> 08:13.600
Then make this reproducibility also easier and effective because we want those representations

08:13.600 --> 08:17.720
of operations to be reliably applicable.

08:17.720 --> 08:23.920
And also adding this advanced undo functionality of undoing not just the latest operation,

08:23.920 --> 08:29.080
or maybe just modifying the parameters of an earlier operation.

08:29.080 --> 08:31.520
So that's the main goals.

08:31.520 --> 08:33.640
And what do we have so far?

08:33.640 --> 08:40.360
Well, you might have already noticed some differences in this prototype, but let me show you another

08:40.360 --> 08:41.360
one.

08:41.360 --> 08:47.920
So far I've been working on making open-refined operations aware of which parts of the data

08:47.920 --> 08:49.400
set they modify.

08:49.400 --> 08:54.200
Because the problem is, if you want to let people undo a deep operation, then you need

08:54.200 --> 08:58.520
to be able to detect which following ones can be kept or not, or if they need to be

08:58.520 --> 09:02.280
recomputed because the data they were working on has been touched.

09:02.280 --> 09:10.640
So now that we have this capability of scoping operations a little bit better, you can, for

09:10.640 --> 09:21.680
instance, run reconciliation on multiple columns and that will run concurrently, which is something

09:21.680 --> 09:23.240
that wasn't possible before.

09:23.240 --> 09:27.240
So you see the reconciliation I started earlier, it's only 7% complete.

09:27.240 --> 09:32.440
It's a very slow operation because which data reconciliation is particularly slow.

09:32.440 --> 09:35.680
And now I can already start reconcealing the other column.

09:35.680 --> 09:41.960
And if you see, we already get some results, although the first one hasn't completed yet.

09:41.960 --> 09:43.680
So that's already won win.

09:43.680 --> 09:49.600
It's not directly about reproducibility, but I hope this will be work on by users because

09:49.600 --> 09:53.360
it should save people a lot of time.

09:53.360 --> 10:02.600
And on top of that, we've done some research about how other tools represent pipelines or

10:02.600 --> 10:05.320
their undo-redu functionality.

10:05.320 --> 10:08.720
So this is a screenshot from Talent, another data cleaning tool that we've been looking

10:08.720 --> 10:09.720
at.

10:09.720 --> 10:15.880
And in those sorts of data cleaning tools, you design your pipeline explicitly on a canvas.

10:15.880 --> 10:19.280
So it's a very different sort of user experience.

10:19.280 --> 10:24.920
But we've also been looking at Excel, how they let you track changes, or basic undo-redu

10:24.920 --> 10:29.200
functionality in Google Sheets, things like that.

10:29.200 --> 10:36.640
So that's been also very interesting in trying to get some sort of user experience that our

10:36.640 --> 10:40.160
users are already familiar with.

10:40.160 --> 10:43.520
So as you can see, this is all work in progress.

10:43.520 --> 10:45.960
This is what I have just here, a prototype.

10:45.960 --> 10:50.480
We don't have full answers to all of those questions yet.

10:50.480 --> 10:53.760
But we're working on this, and we are very keen to hear from you.

10:53.760 --> 10:59.040
So if you're interested in those topics and would be happy to test out some ideas with

10:59.040 --> 11:02.760
us, we're running some user testing sessions.

11:02.760 --> 11:06.640
So you're very welcome to sign up for those.

11:06.640 --> 11:12.000
And that's basically the state of the project.

11:12.000 --> 11:17.000
And I also have some open refined stickers if you happen to organize some training events

11:17.000 --> 11:18.400
in various places.

11:18.400 --> 11:21.080
So do also get back to me if you want some.

11:21.080 --> 11:22.080
Thank you.

11:22.080 --> 11:23.080
Thank you.

11:23.080 --> 11:29.080
We can maybe take one question.

11:29.080 --> 11:32.080
Thank you for the presentation.

11:32.080 --> 11:35.080
So it's an interesting piece of software.

11:35.080 --> 11:38.080
But what exactly is the target audience?

11:38.080 --> 11:51.920
Because I mean at some point, if you have the data rendering script, it makes the

11:52.760 --> 11:53.760
job.

11:53.760 --> 11:55.760
I mean, to not get me wrong, it's interesting.

11:55.760 --> 12:00.160
But just to know who exactly you are targeting.

12:00.160 --> 12:03.680
So the question is, what is the target audience of open refined?

12:03.680 --> 12:07.840
So it's a broad range of communities.

12:07.840 --> 12:13.400
I would say it's generally suited for tasks where you can't really just write a script

12:13.400 --> 12:18.200
upfront, which will do your keening.

12:18.200 --> 12:20.440
And it's not really about whether you like programming or not.

12:20.440 --> 12:24.960
It's just some tasks where you need to be looking at the data while you're doing the

12:24.960 --> 12:25.960
cleaning.

12:25.960 --> 12:28.080
As you saw reconciliation, it's a messy thing.

12:28.080 --> 12:32.120
You can't really just come up with the parameters and make the matching.

12:32.120 --> 12:33.440
You need to be looking at the data.

12:33.440 --> 12:35.600
Same for clustering.

12:35.600 --> 12:43.200
So it's a mixture of interactive data cleaning and a little bit more automation that you

12:43.200 --> 12:44.200
would have in Excel.

12:44.200 --> 12:51.200
So basically here the point is the point is the point click aspect for the operations.

12:51.200 --> 12:54.200
So the real point is the point click aspect for the user.

12:54.200 --> 12:57.200
Let's thank Antonina again.

