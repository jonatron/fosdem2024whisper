WEBVTT

00:00.000 --> 00:10.600
Thank you.

00:10.600 --> 00:19.560
Our next speaker is Victorien, who is one of the lead maintainers of the Bayonne open

00:19.560 --> 00:21.060
source project.

00:21.060 --> 00:25.700
Big round of applause for Victorien.

00:25.700 --> 00:30.700
Hi everyone.

00:30.700 --> 00:32.700
Is everyone heard me?

00:32.700 --> 00:40.700
It's okay.

00:40.700 --> 00:42.700
Is everyone heard me?

00:42.700 --> 00:43.700
Yeah.

00:43.700 --> 00:48.700
I'm Victorien and I'm one of the biome lead maintenance.

00:48.700 --> 00:53.700
In this talk, I will present some unique characteristics of biome.

00:53.700 --> 01:02.700
We take a high overview of its internal, how it achieves this kind of unique characteristics.

01:02.700 --> 01:05.700
What is biome first?

01:05.700 --> 01:08.700
Biome is a code linter.

01:08.700 --> 01:14.700
Biome analyzes your code statically to find bugs to enforce convention with a team,

01:14.700 --> 01:17.700
similar to ES lint.

01:17.700 --> 01:22.700
Biome supports natively JavaScript, JavaScript, JS6, TS6.

01:22.700 --> 01:27.700
Unlike ES lint, you don't need to install zillion of plugins.

01:27.700 --> 01:36.700
You don't need extra dependencies or extra configuration to support TypeScript.

01:36.700 --> 01:41.700
Biome also tries to output helpful diagnostics.

01:41.700 --> 01:47.700
It brings you some context, explains the issue, and provides a course of action to solve the

01:47.700 --> 01:48.700
issue.

01:48.700 --> 01:55.700
For example, in the figure, you have a unique biome rule named no accumulating spread,

01:55.700 --> 02:06.700
and they warn you against the use of accumulation of the spread operators in reduce and maps.

02:06.700 --> 02:10.700
Biome currently provides 200 rules.

02:10.700 --> 02:12.700
Some are unique to biome.

02:12.700 --> 02:19.700
Overcome from ES lint, ES lint, TypeScript, and over plugins.

02:19.700 --> 02:27.700
One of our contributors is currently working on Ter-Wine class sorting.

02:27.700 --> 02:30.700
Biome is also a code formator.

02:30.700 --> 02:38.700
You can format JavaScript, TypeScript, JS6, TS6, JSON, JSONC, and we are currently working on CSS formatting.

02:38.700 --> 02:51.700
In contrast to Prettier, Biome is able to format invalid code, as demonstrated in the animation.

02:51.700 --> 02:57.700
Last November, one of the mountaineers of Prettier launched 10,000 Bounty.

02:57.700 --> 03:05.700
The goal was to create an alternative to Prettier, a faster alternative, right in the rest.

03:05.700 --> 03:26.700
That matching the Prettier output, in particular for the JavaScript formator, over guys come in the play and add monies, reaching $25,000.

03:26.700 --> 03:29.700
In one month, we made it.

03:29.700 --> 03:42.700
We reached 97% of compatibility with the JavaScript formator, not only for JavaScript, but also for TypeScript, JS6, TS6, and JSON.

03:42.700 --> 03:46.700
One question remains, is biome fast?

03:46.700 --> 03:49.700
According to our users, it is.

03:49.700 --> 04:10.700
Here we have an employee of OpenAI at TestBiome, and using biome to replace the S-Kint and Prettier, they reduce the linting and formatting time from one minute to about two seconds.

04:10.700 --> 04:13.700
Biome is also a growing community.

04:13.700 --> 04:27.700
We have, we reach 170,000 weekly downloads on NPM, and we have a big player that starts using biome.

04:27.700 --> 04:32.700
We have Astro, we have Arespaq, it's a project from Baddance.

04:32.700 --> 04:41.700
We have a three-person company, and we have a Gold Sponsor, Shiguredo, a Japanese company.

04:41.700 --> 04:44.700
Now you are familiar with biome.

04:44.700 --> 04:51.700
I propose you to take a look to its internal.

04:51.700 --> 04:54.700
Biome uses a leader follower architecture.

04:54.700 --> 04:57.700
We have a main thread, the leader thread.

04:57.700 --> 05:02.700
The leader thread spawns a thread for each file to process.

05:02.700 --> 05:07.700
This allows to scale with a number of threads on your computer.

05:07.700 --> 05:20.700
Each thread parts the file in a structured form, a tree, and under the file, for example, formatting, linting, and so on.

05:21.700 --> 05:31.700
Usually, code formators at Cundlinton in the JavaScript world keep every Watt space, every character.

05:31.700 --> 05:39.700
And the very tolerant parser is able to represent missing pieces in the tree.

05:39.700 --> 05:44.700
For example, here we have a hole because the variable is not initialized.

05:45.700 --> 05:49.700
And we have also a bogus node in some other case.

05:52.700 --> 06:01.700
And yes, we are able to format and fix the linting issue by replacing the bilete and removing the training space and indentation.

06:01.700 --> 06:03.700
If I use less indentation.

06:05.700 --> 06:06.700
That's fine.

06:06.700 --> 06:17.700
Many rules are like no var or no accumulating spread directly query the concrete syntax tree to output diagnostics.

06:17.700 --> 06:19.700
But sometimes you have some rule more complex.

06:19.700 --> 06:24.700
For example, no unused variables in the following code.

06:24.700 --> 06:30.700
The name variable in the conditional is unused.

06:30.700 --> 06:40.700
For this kind of rule, it's very hard to implement the rule just using the concrete syntax tree.

06:40.700 --> 06:43.700
In VatsCas, it's good to have extra information.

06:43.700 --> 06:45.700
For example, it's under scope, lexical scope.

06:45.700 --> 06:56.700
For example, you can see the name parameter is shadowed by the local variable name in the conditional.

06:57.700 --> 07:04.700
And you have also to handle a listing issue with function var places.

07:06.700 --> 07:18.700
To do so, instead of querying directly the tree, we consume the tree and provide the extra data in a semantic model.

07:19.700 --> 07:27.700
The semantic model is able to answer questions like find me all references of such declaration.

07:27.700 --> 07:32.700
And is this reference a right reference or read reference?

07:32.700 --> 07:38.700
For example, in the previous example, the name is unused because it's only right.

07:38.700 --> 07:39.700
It's not read.

07:39.700 --> 07:50.700
In September, we have a first version of name resolver.

07:50.700 --> 07:55.700
But a very simple name resolver.

07:55.700 --> 08:00.700
The goal of a random resolver is to bind the declaration to the references.

08:00.700 --> 08:07.700
Basically, this name resolver assigns a unique identifier for each declaration.

08:08.700 --> 08:16.700
And they follow an invariant that is a reference refer to a single declaration.

08:16.700 --> 08:18.700
You have some example here.

08:20.700 --> 08:31.700
It's correctly under scope because the name parameter is linked to the parameter for the same for the return value.

08:31.700 --> 08:37.700
And in the local variable case, it's also correctly bind.

08:40.700 --> 08:45.700
The issue is this name resolver doesn't play well with TypeScript.

08:47.700 --> 08:52.700
In fact, in TypeScript, you can use the same name for tip and variables.

08:52.700 --> 08:55.700
For example, here you have an interface and function with the same name.

08:56.700 --> 09:02.700
And using this first version of the name resolver, you can see some issues.

09:02.700 --> 09:08.700
For example, the return tip person is bound to the function name.

09:08.700 --> 09:12.700
And we export only reference the function.

09:14.700 --> 09:22.700
Actually, a reference in TypeScript can reference several declaration.

09:22.700 --> 09:26.700
Here, the export reference both the interface and the function.

09:28.700 --> 09:36.700
And we have also two differences between tips and variables because the return tip references the type and not the function.

09:39.700 --> 09:42.700
In fact, yes, maybe.

09:43.700 --> 09:51.700
We can just conclude here that a reference can reference a variable, a tip, or both.

09:53.700 --> 10:02.700
In fact, it's even worse than that because in TypeScript, a reference can reference an infinite number of declaration.

10:02.700 --> 10:14.700
Here, you have an example of the E type, in fact, reference three in fair declaration.

10:22.700 --> 10:29.700
You have also over issue, for example, in TypeScript, it's possible to partially reference a tip variable.

10:29.700 --> 10:33.700
For example, a case, it's both a tip and a variable.

10:33.700 --> 10:43.700
And here, you have the first reference only the variable and the last one, reference only the type.

10:44.700 --> 10:59.700
So to support TypeScript, we don't want, in fact, to handle every edge cases because it's very complex to expose this to the developer,

10:59.700 --> 11:04.700
to the implementer of the inter-rules.

11:05.700 --> 11:13.700
It's similar to you have a reality, TypeScript, and you want to model a simplification that covers most of the cases.

11:15.700 --> 11:20.700
What I propose is to keep the invariant that simplifies the API.

11:20.700 --> 11:24.700
It's a reference referred to a single declaration.

11:25.700 --> 11:30.700
And we handle edge cases with export, in fair, and others with different code.

11:31.700 --> 11:43.700
And we keep also important characteristics at tip and variable with the same name are possible and tip and variable duality with cases, for example.

11:46.700 --> 11:51.700
I implemented a second version of a name resolver.

11:52.700 --> 12:00.700
In fact, the name resolver add a tag to every declaration and references, a tip or variable tag.

12:00.700 --> 12:10.700
For example, here, the interface has a tag tip or for tip and the unique identifier we previously talked about.

12:10.700 --> 12:18.700
And for variable, for example, function, we have a tag variable and so on.

12:19.700 --> 12:24.700
And the reference refer ever a tip or a variable.

12:29.700 --> 12:39.700
With this new name resolver, it's possible to detect some issues.

12:39.700 --> 12:45.700
For example, here, we have a function, it's unused function, and the tip is used.

12:46.700 --> 12:56.700
And one important aspect is you don't expose the tip variable duality in the semantic model.

12:56.700 --> 12:59.700
It's only a resolving pace.

13:02.700 --> 13:09.700
Once you resolve the names, you just remove the tag and you have previously the same API.

13:09.700 --> 13:17.700
You can ask which declines every references of each declaration and so on.

13:20.700 --> 13:23.700
In conclusion, Biome is a formator as a linter.

13:25.700 --> 13:28.700
It also supports import sorting.

13:28.700 --> 13:31.700
Biome is fast because it's white and in a rest.

13:31.700 --> 13:34.700
It uses multicore capabilities.

13:35.700 --> 13:43.700
Biome is editor-ready because they use an error-tolerant parser and concrete syntax tree.

13:43.700 --> 13:46.700
And we support TypeScript, GSX, TSX.

13:46.700 --> 13:48.700
It's better included.

13:48.700 --> 13:57.700
And we have a tip-aware semantic model that allows to implement some interesting rules as use import tip, use export tip.

13:58.700 --> 14:12.700
This year and later, we plan to implement, to support more languages, CSS, HTML, Markdown, and more frameworks,

14:12.700 --> 14:14.700
Vue, Angular, Zvelt, Astro.

14:14.700 --> 14:16.700
We have already some support for React.

14:18.700 --> 14:26.700
We want to improve linter capabilities, multi-file analysis, because for now, we are only able to analyze file by file.

14:26.700 --> 14:29.700
We cannot analyze an entire project.

14:30.700 --> 14:38.700
And we want also to implement a SAP LIFI Type System to implement some rule of USLint TypeScript.

14:39.700 --> 14:41.700
We want also to support plugins.

14:41.700 --> 14:44.700
It's a requested feature by many users.

14:45.700 --> 14:48.700
And expand the tool chain with other tools.

14:48.700 --> 14:53.700
For example, transcut transformation and so on.

14:56.700 --> 15:02.700
If you want to help us, you can try BIOM first and report Azure feedbacks.

15:02.700 --> 15:05.700
You can also contribute to BIOM.

15:05.700 --> 15:08.700
We have a good first Azure on the repository.

15:09.700 --> 15:12.700
We have a great resource to create an inter-rule.

15:13.700 --> 15:20.700
Emma, the other lead partner, created a video for creating an inter-rule.

15:21.700 --> 15:23.700
If you have money, you can sponsor us also.

15:26.700 --> 15:28.700
Thank you.

15:28.700 --> 15:31.700
And I just put some comments.

15:31.700 --> 15:40.700
In fact, you can format your code base, you can link, and you can do both with a single comment, format and link.

15:40.700 --> 15:41.700
Thanks.

15:49.700 --> 15:51.700
I have some questions.

15:51.700 --> 15:52.700
Yes?

15:52.700 --> 15:55.700
What was the question you talked about?

15:55.700 --> 15:57.700
Sorry, I don't...

15:59.700 --> 16:01.700
What vision of ECMAScript do you talk about?

16:01.700 --> 16:03.700
Atmosphere.

16:03.700 --> 16:05.700
You can maybe...

16:13.700 --> 16:16.700
What vision of ECMAScript do you talk about?

16:16.700 --> 16:18.700
Advertisers.

16:18.700 --> 16:20.700
Okay. Advertisers.

16:20.700 --> 16:22.700
ECMAScript direction.

16:22.700 --> 16:24.700
Ah, okay. The last one.

16:27.700 --> 16:29.700
Are there any other questions?

16:29.700 --> 16:31.700
Can you shout?

16:31.700 --> 16:34.700
Can we use custom rules?

16:34.700 --> 16:36.700
Can we write custom rules already?

16:37.700 --> 16:39.700
It's a recurrent question.

16:40.700 --> 16:43.700
Currently, no, because we don't support plugins.

16:43.700 --> 16:50.700
But we have a core contributor, but currently working on that.

16:51.700 --> 16:54.700
We explore two options.

16:54.700 --> 17:00.700
First is WSM or JavaScript possibility for writing plugins.

17:00.700 --> 17:03.700
And another one is with domain-specific language.

17:03.700 --> 17:06.700
Maybe with a grid QL.

17:09.700 --> 17:10.700
Yes?

17:10.700 --> 17:14.700
For large projects that have large stinker operations,

17:14.700 --> 17:20.700
it might be difficult to switch to the bio-jazz stuff.

17:20.700 --> 17:25.700
You can have some library to generate bio-contagrations

17:25.700 --> 17:28.700
based on some existing configuration.

17:28.700 --> 17:30.700
Yes.

17:30.700 --> 17:35.700
In the next version, we plan to add some migration tools for pressure.

17:35.700 --> 17:40.700
But we're also thinking about doing the same for ESLint.

17:41.700 --> 17:46.700
Unfortunately, we have some differences with ESLint.

17:46.700 --> 17:50.700
Most of the ESLint rules have an equivalent biome rule.

17:50.700 --> 17:54.700
But we have some differences in the option.

17:54.700 --> 18:00.700
For example, we support less options because sometimes we think it's not relevant to support some options.

18:00.700 --> 18:06.700
And we have also some rules are split in two rules, for example.

18:07.700 --> 18:09.700
I can give you an example.

18:09.700 --> 18:12.700
It's NoVis alias in ESLint.

18:12.700 --> 18:18.700
In fact, ESLint forbid you to write, for example, const self,

18:18.700 --> 18:20.700
equal this.

18:20.700 --> 18:25.700
In fact, we think it's too restrictive.

18:25.700 --> 18:30.700
We decide to split in two rules.

18:30.700 --> 18:33.700
First is NoVuselessVis alias.

18:34.700 --> 18:37.700
In fact, it checks for use less Vis alias.

18:37.700 --> 18:39.700
For example, you use an arrow function here.

18:39.700 --> 18:42.700
You don't need to alias this with self.

18:42.700 --> 18:44.700
You can just remove the aliasing.

18:44.700 --> 18:46.700
And you have a second rule.

18:46.700 --> 18:52.700
It's use the arrow function that try to replace function with arrow function.

18:52.700 --> 18:57.700
And combining both, you have the same functionality as ESLint,

18:57.700 --> 19:00.700
but less opinionated.

19:01.700 --> 19:06.700
And we have also overruled more strict, but depend of the case.

19:06.700 --> 19:12.700
And this kind of differences make a bit hard to create a migration tool,

19:12.700 --> 19:14.700
but we're working on that.

19:15.700 --> 19:17.700
Yes?

19:17.700 --> 19:24.700
Sorry, the large advantage of criteria compared to formatting tools that came before it was its opinionatedness.

19:24.700 --> 19:28.700
What is your stance on the opinionatedness for the biogest?

19:29.700 --> 19:34.700
Sorry, can you just repeat the question each time, because for the live streaming?

19:34.700 --> 19:41.700
The question is, the pressure is opinionated, is biome the same?

19:44.700 --> 19:50.700
Yes, because in fact we decide to match the pressure output because of the challenge.

19:50.700 --> 19:59.700
And we implemented every option of pressure, and we decide to match its output.

19:59.700 --> 20:05.700
And yes, some users are not so happy because they don't like pressure.

20:05.700 --> 20:08.700
But most of the version of ESLint uses pressure.

20:08.700 --> 20:13.700
I think it's a good thing to match pressure on that.

20:13.700 --> 20:15.700
Yes?

20:15.700 --> 20:23.700
With TypeScript ESLint, it has some quite advanced rules, but it depends on the type.

20:23.700 --> 20:28.700
So for example, it will warn you if you call an async function without using await,

20:28.700 --> 20:31.700
because it knows that the function returns, I promise.

20:31.700 --> 20:37.700
Is this the kind of thing you do at the moment, and if not, do you have plans for that kind of semantic analysis?

20:37.700 --> 20:39.700
Yes.

20:39.700 --> 20:47.700
In fact, currently we implement about all the rules of TypeScript ESLint.

20:47.700 --> 20:51.700
It's basically all rules that don't require tip information.

20:51.700 --> 20:56.700
And for this kind of rule, no floating promises, I think so.

20:56.700 --> 20:58.700
It's this rule, yes.

20:58.700 --> 21:00.700
We need tip information.

21:00.700 --> 21:06.700
We have several ideas, but personally and the team also want to explore

21:06.700 --> 21:08.700
a simplified TAP system.

21:08.700 --> 21:16.700
In fact, we want to base our implementation on the new, the upcoming

21:16.700 --> 21:21.700
isolated declaration mode of TypeScript.

21:21.700 --> 21:26.700
It's for the next version or maybe the next one.

21:26.700 --> 21:33.700
And the idea is you require to have a bit more annotation in the code

21:33.700 --> 21:39.700
and combine this mode with a simplified tip inference system

21:39.700 --> 21:46.700
you can in fact achieve most of the type query in a code base.

21:46.700 --> 21:54.700
And I think this mode will gain a lot of support because it's built by Bloomberg

21:54.700 --> 21:58.700
and it brings a lot of performances in the TypeScript world.

21:58.700 --> 22:02.700
In one or two years, this mode will be the default.

22:02.700 --> 22:07.700
I think it's a great bet for us.

22:07.700 --> 22:13.700
Thanks.

22:13.700 --> 22:15.700
Any other questions?

22:15.700 --> 22:16.700
No.

22:16.700 --> 22:19.700
Big round of applause for Zipfana.

