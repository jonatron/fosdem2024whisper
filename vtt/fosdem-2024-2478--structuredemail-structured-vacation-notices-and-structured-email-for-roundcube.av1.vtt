WEBVTT

00:00.000 --> 00:07.000
All right.

00:07.000 --> 00:12.000
So this time I have the pleasure to introduce myself.

00:12.000 --> 00:13.600
And somebody else needs to take care.

00:13.600 --> 00:14.880
I don't overuse the time.

00:14.880 --> 00:16.560
So yeah, my name is Hans JÃ¶rg.

00:16.560 --> 00:19.160
I'm from Odriga.

00:19.160 --> 00:21.000
I have two hats or two histories.

00:21.000 --> 00:25.000
So one history is in my main email history is in migration,

00:25.000 --> 00:26.040
portability.

00:26.040 --> 00:29.080
So you've seen some of our jamming work earlier that day.

00:29.080 --> 00:33.880
But actually, I have an earlier history in semantic web

00:33.880 --> 00:34.440
technology.

00:34.440 --> 00:36.040
So I was a semantic web researcher.

00:36.040 --> 00:37.840
I did some stuff on Sematic Media Wiki,

00:37.840 --> 00:40.560
if somebody or few is aware of that in the past.

00:40.560 --> 00:42.040
And this is a new project, actually,

00:42.040 --> 00:45.160
where these things tend to converge.

00:45.160 --> 00:47.360
Some people who read their email on the console

00:47.360 --> 00:51.000
typically don't like it at all.

00:51.000 --> 00:52.240
Recently, what it proposes.

00:52.240 --> 00:54.520
But yeah, I like any feedback on it.

00:54.520 --> 00:57.200
Some people might even like it because it maybe fixes

00:57.200 --> 00:59.680
something what HTML email also broke.

00:59.680 --> 01:03.600
And the whole idea is structured email.

01:03.600 --> 01:06.160
And I'll present you a reference implementation

01:06.160 --> 01:08.560
for RUNCube and a particular application, which

01:08.560 --> 01:11.040
is a structured vacation notice, which probably

01:11.040 --> 01:14.080
is compiling to email people in particular.

01:14.080 --> 01:16.680
So first of all, a claim.

01:16.680 --> 01:18.800
So email is sort of your personal API.

01:18.800 --> 01:21.080
But you're a little bit of a mechanical Turk in there.

01:21.080 --> 01:22.000
So you need to read it.

01:22.000 --> 01:22.920
You need to understand it.

01:22.920 --> 01:25.320
And you need to act upon what people ask you to do.

01:25.480 --> 01:27.880
Other services ask you to do.

01:27.880 --> 01:29.840
Second, the email is underappreciated.

01:29.840 --> 01:32.920
I think everybody here in the room would probably agree.

01:32.920 --> 01:34.760
And so one of the ideas here in order

01:34.760 --> 01:38.080
to bring these things together is to make email content,

01:38.080 --> 01:41.120
maybe not in general, but for parts of emails or certainly

01:41.120 --> 01:45.000
emails, more machine readable so that the tools you develop

01:45.000 --> 01:47.560
might help people in certain tasks

01:47.560 --> 01:50.600
to make them more efficiently or even to do novel tasks.

01:50.600 --> 01:53.640
And the very rough idea is basically

01:53.680 --> 01:57.480
like you have a multipart alternative text and text

01:57.480 --> 02:02.560
HTML in an email that you also embed structured data in RDF,

02:02.560 --> 02:06.960
which is a W3C-specified knowledge representation

02:06.960 --> 02:11.720
language according to certain so-called data models.

02:11.720 --> 02:13.880
So schema.org is a very popular data model

02:13.880 --> 02:16.520
which search engine vendors have set up for, basically,

02:16.520 --> 02:18.560
you find it in websites.

02:18.560 --> 02:20.080
Like this is movies.

02:20.080 --> 02:20.960
This is a song.

02:20.960 --> 02:22.920
This is an article.

02:22.920 --> 02:26.120
And the very idea is to also allow users or tools

02:26.120 --> 02:29.320
to include that in emails so that email clients can make sense

02:29.320 --> 02:31.560
out of what is in that email.

02:31.560 --> 02:34.040
So yeah, that sounds quite abstract.

02:34.040 --> 02:36.080
How could that look like in practice?

02:36.080 --> 02:39.160
So actually, this is not something I invented from scratch.

02:39.160 --> 02:43.800
So actually, Gmail, Yahoo, some other vendors, WebDE in Germany,

02:43.800 --> 02:45.280
are already doing it.

02:45.280 --> 02:49.000
So if you fly by Lufthansa or a certain airline

02:49.000 --> 02:52.320
and you have a Gmail account and if you opt it in,

02:52.320 --> 02:55.280
these airlines might already send that schema inside

02:55.280 --> 02:55.960
of that email.

02:55.960 --> 03:00.240
And you might notice there is a special display within Gmail

03:00.240 --> 03:02.800
that shows you a certain information on the flight,

03:02.800 --> 03:04.960
allows you some certain action, might automatically

03:04.960 --> 03:07.280
import it to your calendar or at some point also

03:07.280 --> 03:09.640
to your Google Assistant and so on.

03:09.640 --> 03:10.600
That's nice.

03:10.600 --> 03:12.600
The problem here is currently you need,

03:12.600 --> 03:14.080
this is only for select senders.

03:14.080 --> 03:18.440
You need to register with each vendor, actually, basically,

03:18.440 --> 03:19.960
to have this happen.

03:20.000 --> 03:22.440
It's only there for very few select use cases,

03:22.440 --> 03:25.760
like traveling and maybe ordering in the web.

03:25.760 --> 03:26.960
And it's unidirectional.

03:26.960 --> 03:28.840
So it's only from a service to you.

03:28.840 --> 03:30.560
You cannot by yourself use that.

03:30.560 --> 03:32.560
So it's a little bit against the idea of email, right?

03:32.560 --> 03:33.480
So I can.

03:33.480 --> 03:35.440
I mean, obviously, I would not send a flight probably

03:35.440 --> 03:37.640
to somebody, but maybe something else.

03:37.640 --> 03:40.280
So schema.org alone does have 800 concepts.

03:40.280 --> 03:43.120
And what Gmail supports is like six of them or something

03:43.120 --> 03:44.840
like that.

03:44.840 --> 03:47.320
But actually, there's already nice, very nice use cases

03:47.320 --> 03:49.200
for even this travel information.

03:49.200 --> 03:51.000
And there will be a talk just after this

03:51.000 --> 03:52.720
by Folk are sitting in the background.

03:52.720 --> 03:55.120
So I won't talk too much about that.

03:55.120 --> 03:56.760
Second example would be link sharing.

03:56.760 --> 03:58.800
So there is share by email, right?

03:58.800 --> 04:01.000
And this is how it looks like in K9 email, right?

04:01.000 --> 04:03.600
I mean, not blaming K9 for it, but you basically

04:03.600 --> 04:05.280
get a URL sent.

04:05.280 --> 04:07.760
And this is what you receive.

04:07.760 --> 04:10.520
And in this case, basically, you are stuck with Spotify.

04:10.520 --> 04:11.360
You click on it.

04:11.360 --> 04:12.880
You have said Spotify song.

04:12.880 --> 04:15.600
But K9 doesn't know this is a song.

04:15.600 --> 04:17.400
And you are with Spotify.

04:17.400 --> 04:19.280
And OK, you can listen to the song.

04:19.280 --> 04:24.120
But if you're on Apple Music, it's up to you to deal with that.

04:24.120 --> 04:26.240
And with structured email, the idea

04:26.240 --> 04:29.480
is you could take some metadata, which in the case of Spotify

04:29.480 --> 04:32.840
is actually even embedded on the Spotify link already.

04:32.840 --> 04:36.040
So nobody needs to do manual annotation.

04:36.040 --> 04:39.760
You could put that into the email instead of the link.

04:39.760 --> 04:41.840
And so your email client would not just have the link,

04:41.840 --> 04:44.880
but the email client would know this is a song, Brussels

04:44.880 --> 04:49.760
Jetem, and from 2003 by Al Jaleh.

04:49.760 --> 04:52.000
And it could even match, for instance,

04:52.000 --> 04:54.720
with your local media player if you have that as an MP3

04:54.720 --> 04:55.640
or something like that.

04:55.640 --> 04:59.400
So you could basically give a dereference the kind of content

04:59.400 --> 05:02.800
that got shared in that sense.

05:02.800 --> 05:05.080
And you have a much better user experience, a little bit

05:05.080 --> 05:07.240
like you have an instant messaging when you send a link.

05:07.240 --> 05:08.880
Where also, like what's happened so on,

05:08.880 --> 05:13.560
they do extract the Twitter cards and kind of stuff.

05:13.600 --> 05:16.320
Another use case, maybe even more fancy,

05:16.320 --> 05:19.240
is location sharing or even live location sharing.

05:19.240 --> 05:21.680
Many instant messaging tools allow you to do so,

05:21.680 --> 05:23.240
but it's within their ecosystem.

05:23.240 --> 05:25.000
So you're bound to their implementations,

05:25.000 --> 05:26.680
their privacy rules.

05:26.680 --> 05:29.760
And it only works if you send to another fellow WhatsApp user.

05:29.760 --> 05:32.280
So it's also not really open and decentralized.

05:32.280 --> 05:35.160
So we built a prototype where you send a location based

05:35.160 --> 05:37.520
on the JSON-LD snippet.

05:37.520 --> 05:39.640
And we have a prototypical implementation

05:39.640 --> 05:42.440
where the client on the mobile can push the updates

05:42.440 --> 05:47.720
of the location to a URL with a secret UID,

05:47.720 --> 05:51.720
which the user receiving it can actually use to refresh it.

05:51.720 --> 05:54.320
So if you're receiving email client support,

05:54.320 --> 05:56.040
you could do this user experience.

05:56.040 --> 05:59.400
This is an example which we did.

05:59.400 --> 06:01.280
And of course, you can also do have some fallback.

06:01.280 --> 06:02.920
So you can get an HTML email.

06:02.920 --> 06:04.920
Of course, then it's not the live location,

06:04.920 --> 06:06.680
but you can do something like a fallback

06:06.680 --> 06:08.160
like you have in some newsletters.

06:08.160 --> 06:09.400
Click this link.

06:09.400 --> 06:11.440
Go to the browser.

06:11.480 --> 06:14.360
Even though this is, of course, not the best user experience

06:14.360 --> 06:15.240
here.

06:15.240 --> 06:19.040
And then another very familiar use case for you,

06:19.040 --> 06:21.880
vacation notices out of office messages.

06:21.880 --> 06:25.000
So it's typically something you enable for your email account

06:25.000 --> 06:27.440
while you are traveling on FOSTA.

06:27.440 --> 06:30.040
Maybe it's a weekend, not so many people will write to you.

06:30.040 --> 06:32.080
But maybe you arrive back in office on Tuesday.

06:32.080 --> 06:34.440
So you say, I'm staying in Brussels till Monday.

06:34.440 --> 06:37.560
Please contact my colleague in that meantime or so on.

06:37.560 --> 06:41.160
It's still something you need to act upon manually.

06:41.200 --> 06:43.320
But it would be interesting if your email client could actually

06:43.320 --> 06:45.400
understand this is an out of office message,

06:45.400 --> 06:47.880
a resistance at date.

06:47.880 --> 06:50.440
And probably this is the person I could redirect the mail

06:50.440 --> 06:52.120
to if I wanted to choose.

06:52.120 --> 06:53.640
And this is basically what we did.

06:53.640 --> 06:57.160
So we did an ITF draft for this to specify it a little bit,

06:57.160 --> 06:58.320
the process.

06:58.320 --> 07:01.680
And basically, you can even leverage most user interface

07:01.680 --> 07:05.480
data you have from the CIF vacation extension.

07:05.480 --> 07:07.520
This is how we implemented it in RunCube.

07:07.520 --> 07:10.600
We just take the date fields which you anyway fill in there

07:10.600 --> 07:14.040
and the reason and put this into the structured field.

07:14.040 --> 07:15.760
And if the receiving email client is

07:15.760 --> 07:18.840
capable of understanding it, it may store this information

07:18.840 --> 07:24.280
for the time which the user is away and it can highlight it.

07:24.280 --> 07:28.680
And you can even put it or choose as the user on vacation

07:28.680 --> 07:31.720
to include it in emails prior to your vacation.

07:31.720 --> 07:35.480
So you could say, even if I go to vacation tomorrow,

07:35.480 --> 07:38.680
include that metadata already in just any regular email

07:38.680 --> 07:40.240
if you want that.

07:40.240 --> 07:42.160
And so recipients can already see,

07:42.160 --> 07:45.440
ah, Michel will be in vacation starting tomorrow

07:45.440 --> 07:47.520
once he wrote me this mail now.

07:47.520 --> 07:51.560
And I might hurry up answering him or something like that.

07:51.560 --> 07:54.120
I'm not suggesting this is like it has to be,

07:54.120 --> 07:56.400
but it's just illustrating that you

07:56.400 --> 07:58.600
can even do additional things which you could not just

07:58.600 --> 08:02.160
do with regular out of office right now.

08:02.160 --> 08:04.520
And yeah, what is the current state here?

08:04.520 --> 08:08.840
So these examples I've shown you,

08:08.840 --> 08:10.800
there is currently an ITF working group

08:10.800 --> 08:13.040
that's very recently formed.

08:13.040 --> 08:14.480
Last November was the first meeting.

08:14.480 --> 08:15.960
There is a mailing list here.

08:15.960 --> 08:18.480
So even for those of you not familiar with the ITF,

08:18.480 --> 08:20.600
please join that list if you're interested in that topic.

08:20.600 --> 08:26.960
Any feedback, any questions, everything is very appreciated.

08:26.960 --> 08:28.640
There was already quite some good feedback

08:28.640 --> 08:29.560
from the community.

08:29.560 --> 08:31.760
So like Sunderbad Board Council made a decision

08:31.760 --> 08:33.240
like if there would be an RFC, they

08:33.240 --> 08:34.960
would be willing probably to implement this

08:34.960 --> 08:38.280
or to merge this into their code.

08:38.320 --> 08:40.960
First drafts already got adopted in the working group,

08:40.960 --> 08:43.160
still sometime under the form of RFC,

08:43.160 --> 08:46.200
but things will be going.

08:46.200 --> 08:48.200
We are working on a reference implementation

08:48.200 --> 08:53.360
where we graciously received money from NLNET and the NGIU

08:53.360 --> 08:54.840
program.

08:54.840 --> 08:59.240
This is published right now during FOSTA.

08:59.240 --> 09:01.560
So you can go to Packages.

09:01.560 --> 09:04.920
Not sure if it's already on Packages, latest on Monday.

09:04.920 --> 09:07.480
We will provide some guidance so that you

09:07.480 --> 09:09.840
can use our round cube implementation as a blueprint

09:09.840 --> 09:14.480
for your own vet mail probably, even some reusable code

09:14.480 --> 09:18.160
so you don't have to write everything on your own.

09:18.160 --> 09:20.320
And there is even first adopters.

09:20.320 --> 09:22.880
So for instance, the developer Fairmail,

09:22.880 --> 09:25.720
I got in touch with him and he implemented

09:25.720 --> 09:29.280
the very first beta of it like within a day, which

09:29.280 --> 09:30.960
was quite an awesome experience actually.

09:30.960 --> 09:34.520
If you hear that, I really appreciate.

09:34.520 --> 09:38.160
And that would be really great thing.

09:38.160 --> 09:42.160
So finally, maybe a little bit of an overview

09:42.160 --> 09:43.280
of how this currently works.

09:43.280 --> 09:46.160
So this is the URLs where you'll find more information.

09:46.160 --> 09:47.720
We have one library currently where

09:47.720 --> 09:50.560
we do the extraction of the structured data

09:50.560 --> 09:52.640
from incoming emails.

09:52.640 --> 09:57.400
This could be reused on the server side of your application.

09:57.400 --> 10:00.800
We have two libraries which basically are template libraries.

10:00.800 --> 10:03.040
It's a little bit user experience-ish.

10:03.080 --> 10:05.560
So we are still searching people that really

10:05.560 --> 10:07.960
are keen on CSS, HTML design stuff.

10:07.960 --> 10:11.960
So if you know somebody or so, please help us

10:11.960 --> 10:13.800
because we think it makes sense also

10:13.800 --> 10:18.760
to have at least a simple example for how

10:18.760 --> 10:21.960
to render these cards for very popular kind of information

10:21.960 --> 10:25.360
so that every client doesn't need to decide on its own

10:25.360 --> 10:29.160
how to render a Spotify song or something like that,

10:29.160 --> 10:30.600
or a music song.

10:30.600 --> 10:32.720
Even so, of course, every client could opt to do so.

10:32.720 --> 10:36.160
But we want probably to provide some examples here.

10:36.160 --> 10:38.320
And we do it both for the actual rendering,

10:38.320 --> 10:40.000
but also for this HTML email, which

10:40.000 --> 10:42.160
we want to send as a fallback for those that don't have

10:42.160 --> 10:45.960
the fancy client yet.

10:45.960 --> 10:48.120
And then, yeah, I say there's two RimeCube extension.

10:48.120 --> 10:49.840
One is for the structured email as such,

10:49.840 --> 10:53.920
where you can do the Spotify thing, for instance,

10:53.920 --> 10:55.400
or receive these kind of things.

10:55.400 --> 10:59.480
We also have working on the Next Clouds mail thingy,

10:59.480 --> 11:02.040
where you can actually interact with the Next Cloud Cookbook

11:02.040 --> 11:05.800
app, where you can import recipes that you receive by email.

11:05.800 --> 11:07.920
And there is a separate plug-in for the structured

11:07.920 --> 11:10.400
vacation notice.

11:10.400 --> 11:14.720
That's all, actually, already for the moment.

11:14.720 --> 11:16.560
Thanks for listening, and I look forward

11:16.560 --> 11:17.520
to feedback and questions.

11:25.360 --> 11:27.240
So, yeah, maybe somebody can see.

11:27.240 --> 11:30.240
Yeah.

11:30.240 --> 11:31.240
All right.

11:31.240 --> 11:32.840
Did I say a hand question?

11:37.960 --> 11:38.960
Is there concern?

11:38.960 --> 11:43.160
I mean, to me, it seems like we've had this discussion that

11:43.160 --> 11:45.360
this is just kind of in the background of a mail message.

11:45.360 --> 11:49.360
As long as it's not overwhelming data size,

11:49.360 --> 11:51.560
it doesn't really matter to people.

11:51.560 --> 11:53.440
But the question would be, is this

11:53.440 --> 11:55.680
the kind of thing where maybe you have a client that's not

11:55.680 --> 11:57.600
displaying really great, where all of a sudden you

11:57.600 --> 12:01.320
start having all these random attachments that

12:01.320 --> 12:04.400
would confuse a user?

12:04.400 --> 12:06.280
Because they can't do anything with this themselves.

12:06.280 --> 12:09.040
This is all meant to be machine readable.

12:09.040 --> 12:10.840
So there was an interaction between,

12:10.840 --> 12:12.560
but I repeat, so I understood correctly.

12:12.560 --> 12:14.080
So your question is, is this something

12:14.080 --> 12:16.280
that might confuse users if it's somehow mangled inside of you?

12:16.280 --> 12:19.560
What are the ideas around trying to prevent confusion of users

12:19.560 --> 12:21.480
if a client doesn't know how to handle it?

12:21.480 --> 12:22.120
Two things.

12:22.120 --> 12:25.520
So first of all, you can see it as a multipot alternative.

12:25.520 --> 12:27.680
So just like if the email client doesn't understand it,

12:27.680 --> 12:29.960
it just won't get rendered.

12:29.960 --> 12:30.840
And also, it's metadata.

12:30.840 --> 12:32.720
It will never be shown if the client just

12:32.720 --> 12:34.400
doesn't know about it.

12:34.400 --> 12:37.000
So you can use it with existing clients already.

12:37.000 --> 12:39.160
Actually, you receive those emails probably personally,

12:39.160 --> 12:41.200
because Lufthansa might include it already even

12:41.200 --> 12:42.920
in the mail sent to OX.

12:42.920 --> 12:44.760
You just don't do anything with it.

12:44.760 --> 12:46.320
I'll assume you're writing my emails.

12:46.320 --> 12:47.120
Sorry?

12:47.120 --> 12:47.680
I'm joking.

12:47.680 --> 12:48.440
Yeah, yeah, OK.

12:48.440 --> 12:50.040
And actually, the interesting thing

12:50.040 --> 12:52.360
is even the opposite is interesting.

12:52.360 --> 12:54.000
Because we had people coming to us that

12:54.000 --> 12:57.720
had exactly the problem where you get a PGP key or an email

12:57.720 --> 13:00.120
signature attached to an email, because actually,

13:00.120 --> 13:03.120
an email client doesn't even know what that is.

13:03.120 --> 13:05.560
And you could actually use this structured data also

13:05.560 --> 13:07.680
to provide additional information about what

13:07.680 --> 13:10.160
certain email attachments are about.

13:10.160 --> 13:12.680
So you could even help email clients

13:12.680 --> 13:14.520
to provide a better user experience in that case.

13:19.920 --> 13:21.880
What's the incentive for any provider

13:21.920 --> 13:24.560
to actually send structured emails?

13:24.560 --> 13:27.280
Because it seems that it's an activist opposite.

13:27.280 --> 13:31.200
They don't want to like Spotify, or they

13:31.200 --> 13:34.120
don't want to be able to send what song it is.

13:34.120 --> 13:37.520
They want people to go to Spotify and nowhere else.

13:37.520 --> 13:39.840
And same with the Lufthansa thing.

13:39.840 --> 13:41.960
I mean, they don't want to send.

13:41.960 --> 13:43.720
They want to publicize their brand.

13:43.720 --> 13:46.560
They want to upsell services.

13:46.560 --> 13:47.840
Yes, good question.

13:47.840 --> 13:51.120
Then they don't want to send just a generic message

13:51.160 --> 13:52.720
with no possibilities of those.

13:52.720 --> 13:55.000
So the incentive is to not use those.

13:55.000 --> 13:55.640
OK.

13:55.640 --> 13:58.320
So you say there is probably what is the incentive?

13:58.320 --> 14:00.440
There is no incentive for both Spotify and Lufthansa

14:00.440 --> 14:01.720
to send this.

14:01.720 --> 14:04.960
Point one, so for Lufthansa, Lufthansa does it, actually.

14:04.960 --> 14:05.560
You can try.

14:05.560 --> 14:07.320
I'm not sure about Lufthansa in particular,

14:07.320 --> 14:09.600
but airlines do it with Gmail.

14:09.600 --> 14:12.480
And the very reason is Gmail gives them a preferred

14:12.480 --> 14:13.480
visualization.

14:13.480 --> 14:15.800
And actually, it might even strengthen their brand

14:15.800 --> 14:18.200
appearance, because they might have a special.

14:18.200 --> 14:21.000
There is research being done that the click rate gets even

14:21.000 --> 14:22.960
higher when you have the special presentation.

14:22.960 --> 14:24.600
So that's at least one theory.

14:24.600 --> 14:27.640
I'm not saying I spread the truth here, but just giving you

14:27.640 --> 14:29.200
an idea.

14:29.200 --> 14:32.520
For Spotify, I was not claiming Spotify itself to send it.

14:32.520 --> 14:35.960
Because what I was saying is, you share it.

14:35.960 --> 14:38.920
You are in your web browser, for instance, or within Spotify.

14:38.920 --> 14:40.960
And you say share with.

14:40.960 --> 14:42.200
And you go to the email program.

14:42.200 --> 14:44.720
And Spotify does have that data on their website, in the

14:44.720 --> 14:45.280
metadata.

14:45.280 --> 14:48.600
And the incentive there is for search engine optimization.

14:48.600 --> 14:51.880
So they have it because they want to get into the Google

14:51.880 --> 14:52.960
ranking very high.

14:52.960 --> 14:56.560
And we just piggyback that data by using it in email, in

14:56.560 --> 14:57.200
that sense.

14:57.200 --> 14:59.320
But you said the share with the feature.

14:59.320 --> 15:01.960
The share with feature is controlled by the Spotify

15:01.960 --> 15:03.280
client, which is controlled by Spotify.

15:03.280 --> 15:03.720
Oh, no, no.

15:03.720 --> 15:05.000
It's not, anyway.

15:05.000 --> 15:07.280
Because it's obviously URL, because they want to have set

15:07.280 --> 15:08.080
for WhatsApp.

15:08.080 --> 15:09.360
They won't change that.

15:09.360 --> 15:11.520
But with the URL, we can actually pull the metadata

15:11.520 --> 15:12.760
from the website.

15:12.760 --> 15:14.400
Like the Google crawler does it.

15:14.400 --> 15:17.480
So you want to hijack that thing and then put it in?

15:17.480 --> 15:17.800
In a way.

15:17.800 --> 15:18.400
Which is fair.

15:19.280 --> 15:20.920
OK.

15:20.920 --> 15:21.840
Thank you.

