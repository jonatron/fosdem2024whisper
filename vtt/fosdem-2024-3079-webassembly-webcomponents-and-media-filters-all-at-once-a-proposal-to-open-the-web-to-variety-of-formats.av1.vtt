WEBVTT

00:00.000 --> 00:07.000
I'm going to talk about WebAssembly, WebComponents, and MediaFilters all at once.

00:07.000 --> 00:14.000
I propose to open the Web to a variety of formats.

00:14.000 --> 00:17.000
That's it. So thank you very much.

00:17.000 --> 00:28.000
I'm really excited to present this project today, since it's the first time I'm presenting the open source aspect of the Bevar project.

00:28.000 --> 00:37.000
So I'm Jerome Gorin. I'm a lecturer and researcher at an engineering school, which is called Gunilla Salamiya.

00:37.000 --> 00:45.000
I've been quite active in many open source projects at the Kniele and in Telecom on a JPEG.

00:45.000 --> 00:54.000
But the work I'm presenting today is the fruits of the research I have conducted many years ago, ten years ago.

00:54.000 --> 01:02.000
At this time, the proposal of my PhD was more theoretical and not practical.

01:02.000 --> 01:16.000
But since then, there is many technologies which have been integrated inside the browser, which let us deliver all types of contents on the web.

01:16.000 --> 01:23.000
So with my associate, Maya Bistrom, we created a company which is called Bebara.

01:23.000 --> 01:26.000
That means in Swedish Preserve.

01:26.000 --> 01:36.000
And with this company, we want to promote this technology and we want to speed up the adoption.

01:36.000 --> 01:48.000
So the talk I'm going to present today is to show you the open source aspect of this project and show you how you can contribute to it.

01:48.000 --> 01:55.000
But to dive into this project, let's start by thinking back a decade ago.

01:56.000 --> 02:06.000
So at this time, when browser didn't include the ability to embed multimedia playback.

02:06.000 --> 02:23.000
So at this time, you have to use plugins, web extension like Flash from Adobe and later Civilite from Microsoft to add this ability to play contents.

02:23.000 --> 02:26.000
But this kind of extension are now used.

02:26.000 --> 02:38.000
I mean, they face many issues like post-sale, HTML and CSS integration, security issues, accessibility issues.

02:39.000 --> 02:54.000
So to fix this, HTML integrate new tags, which are the video tags, the audio tags to allow the browser to natively support multimedia contents.

02:54.000 --> 03:07.000
So these new tags allow a wide variety of usages like rich internet application, like social media, video sharing.

03:07.000 --> 03:16.000
But they also restrict the media format and content to an handful of codecs.

03:16.000 --> 03:24.000
So there is no guarantee that a format will be supported across all the browsers.

03:24.000 --> 03:28.000
So the formats which are supported, you can count it on the end.

03:28.000 --> 03:32.000
It's like mp4, mp3, Flac and so on.

03:32.000 --> 03:42.000
So on the next slide, what I show is for instance, org and Fulera are not supported across all the browsers.

03:42.000 --> 03:51.000
And what is also concerning is that the JPEG Excel has recently been dropped by Chrome.

03:51.000 --> 04:03.000
So what this realistically means is that a lot of people put a lot of efforts to develop useful formats, useful codecs,

04:03.000 --> 04:12.000
but they are restricted from a wide adoption due to this gate keeping placed by the browser.

04:12.000 --> 04:22.000
So what we are proposing is kind of the construction of this by-bill tower of an entire container and format

04:22.000 --> 04:29.000
in order to let people freely use and develop their own formats.

04:30.000 --> 04:44.000
So we are only using W3C standards and open source technologies to fix some of the problems of this gate keeping

04:44.000 --> 04:54.000
and to make everyone, it make it easier to integrate like new formats to innovate, to deploy stuff

04:54.000 --> 05:06.000
and also give the ability to support legacy formats like AC3, DNG, MKV, EPS and so on.

05:06.000 --> 05:11.000
So let me now turn into details of our solution.

05:11.000 --> 05:17.000
So there are two parts, there are three parts, but there are mainly two parts which are the web component and the web assembly

05:17.000 --> 05:20.000
and we also use media filters.

05:20.000 --> 05:29.000
So for the first part, for the web component part, we instead of creating like new scripts, creating new tag,

05:29.000 --> 05:35.000
we just extend the usual tag, the audio tag, the video tag and so on.

05:35.000 --> 05:41.000
We are using the attribute IS which is something standardized by the web component

05:41.000 --> 05:49.000
and we add internal logic, we add logic to this video tag.

05:49.000 --> 05:53.000
So this is where web components are used.

05:53.000 --> 06:02.000
Then for the web assembly part, we are creating a new attribute which is the using attribute

06:02.000 --> 06:09.000
on which you point to an external library which is compiled with web assembly.

06:09.000 --> 06:19.000
So for instance, on this one, on this example, we will point to the library, I mean the libraries from the XIV foundation

06:19.000 --> 06:29.000
which include OGV, FLAC and VORBIS to decode the input source which is in OGV and maybe in AFERA.

06:30.000 --> 06:38.000
So if we think about it, about this solution, it can be like a bit overwhelming

06:38.000 --> 06:46.000
because I mean we know the source, the format of the source and we include quite a lot of code on it.

06:46.000 --> 06:52.000
So what we added as syntax is the web attribute.

06:52.000 --> 07:00.000
So we developed what we call a solver which is based on the open source project JPEG

07:00.000 --> 07:05.000
which has been presented many times at FOSDEM.

07:05.000 --> 07:18.000
And this solver will be able to create a media pipeline to adapt from an input source to an expected output source.

07:18.000 --> 07:29.000
So for instance, in this example, we have as a source an MPEG1 program stream that embed MPEG1 videos

07:29.000 --> 07:37.000
which is mostly not supported by browser and we will transcode it to an H264 format file

07:37.000 --> 07:41.000
which is supported by all the browser.

07:41.000 --> 07:51.000
So what the solver will do is by itself the solver is able to check amongst all the libraries

07:51.000 --> 08:00.000
which has been provided with the web attributes to do the transcoding, so to adapt the video to the user browser.

08:00.000 --> 08:12.000
So in this example, we take a portion of code of LIM and MPEG1 and LIM X264 to do the transcoding dynamically.

08:12.000 --> 08:18.000
So with this same principle, we are supporting audio and we are supporting images.

08:18.000 --> 08:22.000
So now let's do a demo.

08:22.000 --> 08:32.000
So I have delivered on a website so you can test it with your desktop or with your mobile phone if you just flash the code.

08:32.000 --> 08:41.000
I have created two web pages, one with raw contents delivered on the website, on the left part.

08:41.000 --> 08:52.000
So you will have a raw G2K image, a JPEG-G-cell image, a Dolby Digital AC-free sound and an MPEG1 video.

08:52.000 --> 09:01.000
And on the left, we will not use the universal extension that I have presented and on the left,

09:01.000 --> 09:09.000
which is the main page of BVRA, we will show the results with this universal extension.

09:09.000 --> 09:15.000
So I will do the demo in live so I hope that it will work.

09:15.000 --> 09:22.000
So if we go on Safari on the left, so this is the page without the universal extension,

09:22.000 --> 09:29.000
what we can notice is that Safari itself is quite supporting a lot of format and container.

09:29.000 --> 09:37.000
So it supports G2K images, it supports GXL images, it supports MPEG1 video,

09:37.000 --> 09:40.000
but it doesn't support AC-free.

09:40.000 --> 09:45.000
So now let's see the situation with Firefox.

09:45.000 --> 09:53.000
So in Firefox, you can see that G2K is not supported, GXL is not supported, AC-free is not supported,

09:53.000 --> 09:56.000
and MPEG1 is not supported.

09:56.000 --> 10:03.000
And with Chrome, that's the same solution.

10:03.000 --> 10:10.000
So now let's see the real main page of BVRA.com that includes this universal extension.

10:10.000 --> 10:20.000
And so G2K is supported and if you just dive into the source code, this is the semantics I have shown to you.

10:20.000 --> 10:25.000
So you have the ease to say that we are using the universal, we add the internal logic,

10:25.000 --> 10:32.000
we have the solver and we are using the open source library which is OpenJPEG.

10:32.000 --> 10:44.000
Same for GXL and on AC-free and MPEG1.

10:44.000 --> 10:54.000
Now if I switch to Firefox, you see that you will have exactly the same result.

10:54.000 --> 11:07.000
And on Safari, everything is as it is, but you have now the AC-free audio which is supported.

11:07.000 --> 11:13.000
So on all the browsers, you have the same results.

11:13.000 --> 11:22.000
So we also release an SDK in open source.

11:22.000 --> 11:28.000
We release an IDE based on Visual Studio Code that you can use.

11:28.000 --> 11:39.000
And the goal of this IDE is to help web developers to find the right combination of filters for a given content.

11:39.000 --> 11:44.000
So I'm going to show you the IDE.

11:44.000 --> 11:46.000
So to install it, it's quite simple.

11:46.000 --> 11:51.000
You go in the store of Visual Studio Code, you type BVRA.

11:51.000 --> 11:54.000
So on my computer, it's already installed.

11:54.000 --> 11:58.000
And then you can open any content in the file explorer.

11:58.000 --> 12:05.000
So for instance, let's use the GXL file.

12:05.000 --> 12:09.000
So you have first the preview.

12:09.000 --> 12:14.000
So it means that a library is existing to decode this content.

12:14.000 --> 12:23.000
On the graph part, you will see the mega filter pipeline that has been used to decode this content.

12:23.000 --> 12:27.000
You can also view the source of each filter.

12:27.000 --> 12:37.000
So on this one, the filter is based on libgxl.

12:37.000 --> 12:43.000
So I think the connection is quite slow.

12:43.000 --> 12:56.000
And on this part, on the Accessor tab, then you have the script to be integrated inside your HTML.

12:56.000 --> 13:02.000
To support this given format.

13:02.000 --> 13:06.000
So now, I mean the connection is quite slow today.

13:06.000 --> 13:14.000
This is the source that has been used for the graph.

13:14.000 --> 13:16.000
So this is this one.

13:16.000 --> 13:18.000
So I use libgxl.

13:18.000 --> 13:20.000
And this is the code from one filter.

13:20.000 --> 13:24.000
So as you can see, it's like using GXL.

13:24.000 --> 13:40.000
And then you have a semantics just to adapt the open source libraries with the input format and the output format to help the server finding the right combination.

13:40.000 --> 13:41.000
Yeah.

13:41.000 --> 13:46.000
So we're to find us.

13:46.000 --> 13:48.000
So this is like the end of my presentation.

13:48.000 --> 13:51.000
At the moment, we are starting.

13:51.000 --> 13:57.000
We are like only supported and full of media credits and container.

13:57.000 --> 14:02.000
However, we are like adapting new libraries.

14:02.000 --> 14:12.000
We are working on support of new formats, new type of documents, 360 videos, 3D object.

14:12.000 --> 14:18.000
I mean, everything which is multimedia can be like constructed with the server, you know.

14:18.000 --> 14:21.000
Everything is open source.

14:21.000 --> 14:24.000
I mean, what I've shown to you is open source.

14:24.000 --> 14:29.000
So you can see check the code from the editor on GitHub.

14:29.000 --> 14:36.000
Also test interface and the SDK is on better slash filters.

14:36.000 --> 14:38.000
Everything is in LGPL.

14:38.000 --> 14:40.000
So you can contribute to it.

14:40.000 --> 14:43.000
You can take this code.

14:43.000 --> 14:57.000
You can, yeah, I mean, I've kept this decision short to have the time to let the time to you to ask a question or you can also find me later on the audience.

14:57.000 --> 15:08.000
So that's how for me.

15:08.000 --> 15:10.000
Any question?

15:10.000 --> 15:11.000
Yeah.

15:11.000 --> 15:18.000
I mean, it depends on which.

15:18.000 --> 15:19.000
Sorry.

15:19.000 --> 15:20.000
Okay.

15:20.000 --> 15:23.000
So our expensive it is to transcode on the browser.

15:23.000 --> 15:27.000
So it will really depend on the type of filter you will use.

15:27.000 --> 15:31.000
I mean, we have some filters which are called WebCodec.

15:31.000 --> 15:37.000
So it will use the acceleration of the browser to do the transcoating.

15:37.000 --> 15:42.000
So by using the WebCodec, if it's supported by the browser, then it's very fast.

15:42.000 --> 15:53.000
The other thing is that you don't always need to transcode if you are using a canvas, then you will just decode and display it on the canvas.

15:53.000 --> 15:59.000
So it means that there is like no delay when you open a file, when you are using the canvas.

15:59.000 --> 16:03.000
So it really depends on the complexity of the encoder.

16:03.000 --> 16:08.000
It depends on the technology which you are using and depends on how you want to integrate your video.

16:08.000 --> 16:15.000
But we are using WebAssembly, so there is no overhead which is imposed by WebAssembly itself.

16:15.000 --> 16:22.000
You have quite a native performance, you know, on your browser.

16:22.000 --> 16:23.000
Yeah.

16:23.000 --> 16:30.000
These are static files, why do you want to transcode ahead of time?

16:30.000 --> 16:38.000
Because you can, if it's like delivered, why don't you use static files? That's it.

16:38.000 --> 16:40.000
So that's a good question.

16:40.000 --> 16:42.000
I mean, why?

16:42.000 --> 16:51.000
Because first you can adapt depending on your browser, because for instance some browser does support the native file like Jigsail, you know.

16:51.000 --> 16:57.000
And the other thing is there is a lot of files which has like functionality in it,

16:57.000 --> 17:00.000
functionality that are embedded in the container.

17:00.000 --> 17:07.000
Lex takes for instance DNG files like raw files that are used by your camera, by professional photographer.

17:07.000 --> 17:16.000
Then if you use the DNG itself, you will be able to like view the raw format.

17:16.000 --> 17:23.000
You can view the preview and you can play with, you know, everything that you can do for instance with Photoshop, you know,

17:23.000 --> 17:29.000
like having this high HDR range of color and so on.

17:29.000 --> 17:35.000
And if you're on 360 videos, then you will have for instance to use the interaction.

17:35.000 --> 17:38.000
If you're on document, you have to add this interaction.

17:38.000 --> 17:47.000
So by playing with native file, then you will not lose any functionalities that the container has initially, you know.

17:47.000 --> 17:49.000
Yeah.

17:49.000 --> 17:56.000
Do you want to make a browser plugin so you can view the websites that don't have the text?

17:56.000 --> 17:59.000
Yeah, there is also a browser.

17:59.000 --> 18:00.000
Yes.

18:00.000 --> 18:01.000
Yes.

18:01.000 --> 18:03.000
Do you want to do a browser plugin for that?

18:03.000 --> 18:15.000
There is a browser plugin already that is able to detect the, if the format is supported or not for a given content.

18:15.000 --> 18:29.000
For, I think that the best functionality yet is to trust the web developer itself because he knows like he wants to use a specific file.

18:29.000 --> 18:40.000
He wants to use a native content so he will integrate, I mean, the functionality that he requires for his website.

18:40.000 --> 18:54.000
If the web developer asks the user to install something on his browser, then I think that he will lose a big part of his audience.

18:54.000 --> 18:59.000
It's better to prepare everything for the end user than ask him to install something.

18:59.000 --> 19:08.000
You know, I don't want to come back to the situation where we were with Flash and Civil Light and have all this kind of issues.

19:08.000 --> 19:15.000
So, I guess the web pages that still have JPEG Excel will make sense if you want to do that.

19:15.000 --> 19:16.000
Yeah.

19:16.000 --> 19:18.000
Can you repeat again?

19:18.000 --> 19:25.000
Yeah, yeah, yeah, yeah, of course.

19:25.000 --> 19:34.000
But this extension is existing, I mean, but it's like less useful than this first presentation that I'm doing, you know.

19:34.000 --> 19:35.000
Yeah.

19:35.000 --> 19:41.000
Is the MKB file format not supported?

19:41.000 --> 19:44.000
It's working on it, actually.

19:44.000 --> 19:45.000
Ah, yes.

19:45.000 --> 19:46.000
Sorry.

19:46.000 --> 19:48.000
Is MKB supported?

19:48.000 --> 19:58.000
I'm currently working on it, you know, because what I'm one of the break we can have is that a lot of format has patent on it.

19:58.000 --> 20:03.000
So what we can distribute freely is license free patents.

20:03.000 --> 20:14.000
So MKB is one of the license free patent is you have the open source on it, the open source code to be used.

20:14.000 --> 20:23.000
So the application is quite easy and I think that that will be my next work, you know.

20:23.000 --> 20:34.000
Something that I forgot to present, which is quite really important, is that the plugin extension already have a store on it.

20:34.000 --> 20:42.000
So if you want to try a combination, then you just have to add a library on it.

20:42.000 --> 20:46.000
So for the moment we have PNG, JPEG, JXL, OpenJPEG.

20:46.000 --> 20:59.000
We have the full FFFPEG, like a Kika.t.pmp, and then we extract some part of the FFFPEG just to reduce the size of the big project of this project.

20:59.000 --> 21:08.000
But MKB is really like the MKB inside the XIV decoder, so I will extract it and I will work on it.

21:08.000 --> 21:18.000
And then if you like click on add, for instance, let's say that on this one it was JXL, then I'm adding OpenJPEG on this one.

21:18.000 --> 21:20.000
So you will see that it will be a candidate.

21:20.000 --> 21:28.000
And on the preview it will check amongst the JXL and JPEG and see that JPEG itself is not just for me, you know.

21:28.000 --> 21:29.000
So it's like unused.

