WEBVTT

00:00.000 --> 00:13.440
So, next we have Boris Mahihaas with trusted Postgres architect, deploying Postgres with

00:13.440 --> 00:15.760
infrastructure as code.

00:15.760 --> 00:20.920
Right, so thank you very much.

00:20.920 --> 00:22.320
Thanks for coming.

00:22.320 --> 00:23.960
My name, as she says, Boris Mahihaas.

00:23.960 --> 00:28.120
I used to be a solutions architect at ADB, but I grew a little bit of white hairs around

00:28.120 --> 00:33.440
senior solution architects, but this pieces off a lot of the building architects.

00:33.440 --> 00:37.840
So actually my real title is holistic system software engineer, because I would like to

00:37.840 --> 00:41.040
see the things from the fundamental interconnectedness of all things.

00:41.040 --> 00:47.040
I used to be a developer, operational people, a DBA consultant, so I'd like to see the whole

00:47.040 --> 00:48.040
stuff.

00:48.040 --> 00:51.120
That's why I see the value of the DevOps philosophy, because it's trying to get the

00:51.120 --> 00:55.000
whole thing kind of a one thing of deploying stuff in a more reliable way.

00:55.000 --> 00:59.920
Apart from that, I'm also an air guitar player, and I really love metal music, and within

00:59.920 --> 01:00.920
other type of music.

01:00.920 --> 01:03.240
I'm going to talk about trusted Postgres architect.

01:03.240 --> 01:06.760
So here, who uses already Postgres here in the room?

01:06.760 --> 01:09.560
Nice, okay, that's very good.

01:09.560 --> 01:14.120
Okay, so who didn't raise the hand wants to use Postgres maybe, but I think everybody

01:14.120 --> 01:15.120
already raised the hand.

01:15.120 --> 01:16.120
That's good.

01:16.120 --> 01:17.120
Okay, there you go.

01:17.120 --> 01:18.120
Thank you.

01:18.120 --> 01:19.120
So this talk is for you.

01:19.120 --> 01:24.600
All the rest is also an interesting problem, this, because it's about reliably developing

01:25.080 --> 01:27.200
Postgres in multiple different infrastructures.

01:27.200 --> 01:29.480
Okay, so this is a use case.

01:29.480 --> 01:31.240
This is a developer.

01:31.240 --> 01:33.960
She is trying to develop a new project.

01:33.960 --> 01:37.640
She wants to use Postgres finally because it's being one of the most popular databases

01:37.640 --> 01:43.840
in the last years, and then she has this brilliant idea, but she doesn't want to start using

01:43.840 --> 01:47.880
single commands all the time because she wants to have an environment where she can test,

01:47.880 --> 01:52.640
test, test, and when everything is working finally well, she's going to be able to deploy

01:52.720 --> 01:57.800
that into different environments, either test environment, pre-production, staging, whatever

01:57.800 --> 02:00.400
you call it, but exactly the same thing.

02:00.400 --> 02:03.960
So the typical stuff that people do is like, I have a container, I'm going to put that

02:03.960 --> 02:07.640
specific container into the server.

02:07.640 --> 02:12.760
This is not exactly that, but it can also be relying on containers in order to emulate

02:12.760 --> 02:13.760
the final architecture.

02:13.760 --> 02:16.120
So let me explain a little bit more.

02:16.120 --> 02:20.320
So you want to do it in a reliable way, and that's why the name of the tool is called

02:20.320 --> 02:24.200
trusted Postgres architect, which is the tool, TPA.

02:24.200 --> 02:28.800
We like to call it TPA because it gets people confused with TAP, which sounds like tap, which

02:28.800 --> 02:33.240
is for you to get your favorite beverage at the bar.

02:33.240 --> 02:38.000
The first goal that she has is to deploy one single instance running Postgres 16.

02:38.000 --> 02:41.960
This could be also if you are running already Postgres 14 or 15, you want to try the new

02:41.960 --> 02:43.520
features of Postgres 16.

02:43.520 --> 02:46.240
Who is already running Postgres 16 here in the room?

02:46.640 --> 02:50.440
Okay, so much less than the people who was already using Postgres.

02:50.440 --> 02:54.680
So this is probably one way for you to test the new version.

02:54.680 --> 02:58.520
So I'm going to just show you code here, which is YAML.

02:58.520 --> 03:04.080
You might not like it, but it is the standard way of doing Ansible stuff or doing deployment.

03:04.080 --> 03:09.920
So in this whole screen, which is pretty large, I'm going to put all the code that you need

03:09.920 --> 03:12.560
in order to have this one single instance.

03:12.560 --> 03:16.480
First of all, in TPA, you have to specify your architecture.

03:16.480 --> 03:17.480
This is a master one.

03:17.480 --> 03:21.960
I know now we call it primary, but master still sounds nice because it reminds me about

03:21.960 --> 03:24.480
master, master.

03:24.480 --> 03:25.720
So that's why it's called master one.

03:25.720 --> 03:30.280
And obviously it's going to be called, FOSTA, is the name of the cluster.

03:30.280 --> 03:33.680
Then you can have cluster variables, plenty of stuff that you can ignore at the moment.

03:33.680 --> 03:35.880
I'm going to come back to one of them afterwards.

03:35.880 --> 03:40.320
But the most relevant here is this one, Postgres version 16.

03:40.320 --> 03:41.320
That's what you need.

03:41.320 --> 03:42.320
Okay.

03:42.320 --> 03:46.240
So this is the version you want then, and it's going to put you that version deployed.

03:46.240 --> 03:47.560
So this is the cluster variables.

03:47.560 --> 03:50.120
I'm going to come back to the cluster variables later.

03:50.120 --> 03:55.520
Then because you want to be able to do deployments in multiple locations for fault tolerance,

03:55.520 --> 03:58.640
high availability, it's always good to specify a location.

03:58.640 --> 04:01.920
We are in Brussels, so we are going to call location Brussels.

04:01.920 --> 04:04.400
And we are going to have an instance, obviously.

04:04.400 --> 04:05.400
Thank you.

04:05.400 --> 04:10.880
At the ULB, but first we're going to say which type of instance and which default we have.

04:10.880 --> 04:13.920
So we are going to do it with a Debian image.

04:13.920 --> 04:18.080
It's going to be a specific detailer by TPA, but you can use whatever image you want here.

04:18.080 --> 04:20.800
And here the platform, it says that it's Docker.

04:20.800 --> 04:22.800
This is not cloud native stuff.

04:22.800 --> 04:27.960
It's really an easy way to have a virtual machine that I can connect to it and try to behave

04:27.960 --> 04:31.200
as if it is a virtual machine, but it's a container with everything that you need there

04:31.200 --> 04:33.040
for a virtual machine.

04:33.040 --> 04:35.320
And as you can see, TPA uses Ansible.

04:35.320 --> 04:39.720
So we are going to have this Ansible user here for connecting to the machines.

04:39.720 --> 04:40.920
And here is the instance.

04:40.920 --> 04:45.200
You specify only these parameters, the name, the location.

04:45.200 --> 04:48.000
This is a number within your cluster and the role.

04:48.000 --> 04:49.320
And the role is to be a primary.

04:49.320 --> 04:53.640
So here we use the most modern way of referring to the primary node.

04:53.640 --> 04:54.640
That's it.

04:54.640 --> 04:57.800
That's all the code that you need for one single instance, of course.

04:57.800 --> 05:01.600
Then because this is Ansible, you do TPX-SEC.

05:01.600 --> 05:05.240
This is the executable of the trusted architecture.

05:05.240 --> 05:07.920
Provision, so you provision your cluster and then deploy.

05:07.920 --> 05:08.920
And then you get it.

05:09.120 --> 05:10.120
Okay?

05:10.120 --> 05:11.120
So how do you connect to it?

05:11.120 --> 05:12.120
Yeah?

05:12.120 --> 05:16.000
Well, I told you that the Docker containers are going to behave as a virtual machine,

05:16.000 --> 05:18.080
so we can SSH to the machine.

05:18.080 --> 05:21.600
So we do SSH using that file that is going to be generated in the process of doing the

05:21.600 --> 05:22.600
provision.

05:22.600 --> 05:26.120
ULB is the alias that we gave to the instance.

05:26.120 --> 05:27.440
And then we do the typical thing.

05:27.440 --> 05:28.720
I become user Postgres.

05:28.720 --> 05:29.720
Oops.

05:29.720 --> 05:35.120
I become user Postgres and I execute PSQL.

05:35.120 --> 05:36.120
Yeah?

05:36.120 --> 05:39.800
So it's really nice because it's using the super user Postgres and you want to have

05:39.800 --> 05:40.840
this for applications.

05:40.840 --> 05:43.200
So let's get a new requirement.

05:43.200 --> 05:45.520
But this is how you connect, okay?

05:45.520 --> 05:49.400
You want to have an administrator, which is not the Postgres user.

05:49.400 --> 05:52.400
So we are going to call it Slonic because that's the name of the blue elephant.

05:52.400 --> 05:53.400
Yeah?

05:53.400 --> 05:54.600
And this is going to be an administrator.

05:54.600 --> 05:58.960
And then you have Ada Lobleys, which is going to be the application user.

05:58.960 --> 06:03.880
And we don't want to use the Postgres database, so we are going to have a FOSMDB, which is

06:03.880 --> 06:05.960
owned by the application user.

06:05.960 --> 06:08.440
So this gives us a little bit of more security already.

06:08.440 --> 06:13.760
So how do you change the previous code in order to allow this new request?

06:13.760 --> 06:17.040
So in the cluster variables, we are going to just keep these two variables there, the

06:17.040 --> 06:20.960
failover manager, which I'm going to use later on, and the Postgres version.

06:20.960 --> 06:23.680
And then I'm going to add the users.

06:23.680 --> 06:24.680
Yeah?

06:24.680 --> 06:25.840
So this is how you add the user.

06:25.840 --> 06:27.960
You say the username.

06:27.960 --> 06:32.480
I'm going to ask TPA to also generate a password for that one.

06:32.480 --> 06:36.000
And the roles of that particular user, in this case, is going to be super user.

06:36.000 --> 06:37.600
That's the administrator.

06:37.600 --> 06:39.720
You can also grant permissions and stuff like that.

06:39.720 --> 06:42.280
But in this case, I want to have a role attribute.

06:42.280 --> 06:46.120
And then we have the developer, which is doing the application part, Ada Lobleys.

06:46.120 --> 06:48.200
We just got the password for that one.

06:48.200 --> 06:50.080
Then we ask for the database.

06:50.080 --> 06:53.000
We give the name and the owner.

06:53.000 --> 06:54.000
And that's it.

06:54.000 --> 06:55.000
So I'm adding new stuff.

06:55.000 --> 06:57.280
So it's not just for the first deployment.

06:57.280 --> 06:59.040
It's also for maintenance.

06:59.040 --> 07:00.040
Okay?

07:00.040 --> 07:03.120
So you can do a git commit of your new version of the stuff.

07:03.120 --> 07:06.520
So you can keep a track of your infrastructure with different versions.

07:06.520 --> 07:09.320
If you want to revert this, you can also do it.

07:09.320 --> 07:10.320
Right?

07:10.320 --> 07:11.800
Then, of course, provision and deploy.

07:11.800 --> 07:14.160
And you can continue.

07:14.160 --> 07:18.880
Now I show you that you can connect to the database through SSH and then PSQL.

07:18.880 --> 07:21.400
Now we wanted to do it with an application.

07:21.400 --> 07:24.760
So what we are going to do is that we are going to ask for TPA.

07:24.760 --> 07:30.440
Give me the password that you generated for this cluster for that particular user.

07:30.440 --> 07:33.560
The password is a random stuff, which is not that random.

07:33.560 --> 07:36.960
It actually contains a reference to a metal band from Belgium.

07:36.960 --> 07:40.040
If you can figure it out, I will pay you a drink from it.

07:40.040 --> 07:44.280
And then using that password, you can connect with the normal PSQL.

07:44.280 --> 07:48.920
You provide the host IP, the port, the user.

07:48.920 --> 07:52.040
And you put the minus capital W user that you can put that password there if you don't

07:52.040 --> 07:54.840
want to put that in the PGE pass file, for instance.

07:54.840 --> 07:56.400
But now I'm not using the SSH stuff.

07:56.400 --> 07:58.800
So now I'm really behaving as if it is an application.

07:58.800 --> 07:59.800
Okay?

07:59.800 --> 08:03.240
You can take a picture and try to figure out the reference.

08:03.240 --> 08:08.640
So we have this now with that little amount of code, but we don't have any fault tolerance

08:08.640 --> 08:09.640
yet.

08:09.640 --> 08:10.640
What happens if this thing crashes?

08:10.640 --> 08:15.800
Well, we want to have a replica, exactly the same version, physical replication, and

08:15.800 --> 08:17.680
that's the new thing that we are going to do.

08:17.680 --> 08:19.080
So let's take the code again.

08:19.080 --> 08:24.160
We have that cluster variables for the failover manager that says absolutely nothing running

08:24.160 --> 08:25.160
Poster 16.

08:25.160 --> 08:32.320
GPA can do it with a tool called Rep Manager, which I like a lot, and also Patroni, which

08:32.320 --> 08:33.640
is also very, very good stuff.

08:33.640 --> 08:34.640
So you can choose.

08:34.640 --> 08:37.000
In this case, I'm choosing for Rep Manager.

08:37.000 --> 08:40.200
And then in the instances, if you remember, I have this primary one.

08:40.200 --> 08:42.560
The only thing that I need to do is to add another instance.

08:42.560 --> 08:44.200
This one is the VUB.

08:44.200 --> 08:48.040
So you see the French-picking one, the Dutch-picking one, but the city is in English so that nobody

08:48.040 --> 08:50.200
complains about the one that it picked.

08:50.200 --> 08:51.200
Now you have this one.

08:51.200 --> 08:52.200
It's a different role.

08:52.200 --> 08:54.200
You see this is a replica.

08:54.200 --> 08:55.200
And this is the primary.

08:55.200 --> 08:59.320
So I have to say who is the upstream of this replica and is the ULB.

08:59.320 --> 09:02.040
And I have a cluster with two nodes.

09:02.040 --> 09:06.880
Again, TPXSek provision, TPXSek deploy.

09:06.880 --> 09:08.200
Let's continue.

09:08.200 --> 09:09.840
I want to have more fault tolerance.

09:09.840 --> 09:14.040
What happens if there is an attack in Brussels and the old universities get destroyed?

09:14.040 --> 09:18.320
We want to have a third replica, but we don't want to do it replicating from the primary.

09:18.320 --> 09:21.960
We want to have cascading replication.

09:21.960 --> 09:26.840
But if somebody deletes a table here by accident, it's also going to be deleted in all the nodes.

09:26.840 --> 09:30.880
So you need to have some backup and restore for point-in-time recovery.

09:30.880 --> 09:36.760
That's why you want to have in another part of the country your barman, because you trust

09:36.760 --> 09:39.640
your barman, which is for backup and recovery management.

09:39.640 --> 09:41.840
It's important that your backups can be recovered.

09:41.840 --> 09:45.720
If you just have backup but you never recover them, you don't have backups, basically.

09:45.720 --> 09:48.080
So this is what we are going to build now.

09:48.080 --> 09:49.080
Let's get back to what we have.

09:49.080 --> 09:52.160
We have the location Brussels and two instances.

09:52.160 --> 09:54.560
Let's add another location, Vlonderen.

09:54.560 --> 09:57.720
This is in the north.

09:57.720 --> 10:00.880
And then we are going to add a replica in a very nice place called Achel.

10:00.880 --> 10:02.360
Used to be a trapeze beer.

10:02.360 --> 10:03.360
Not anymore.

10:03.360 --> 10:06.680
It's still a very good beer, but it's no longer a trapeze.

10:06.680 --> 10:10.960
This is just for your common knowledge about Foslin.

10:10.960 --> 10:13.680
So then you get the location is Vlonderen.

10:13.680 --> 10:16.920
I'm going to say that it's also a replica, and I'm going to have the view be a upstream.

10:16.920 --> 10:19.560
This is how I build cascading replication.

10:19.560 --> 10:23.040
I could do now provision and deploy, and I have my older replica, but I also want to

10:23.040 --> 10:25.120
have backup and recovery.

10:25.120 --> 10:31.560
So what I do is I add here another location, which is Wallouni.

10:31.560 --> 10:36.400
And then I add a very nice place, which is still a trapeze cheese, also beer.

10:36.400 --> 10:38.120
This is my favorite one, actually.

10:38.120 --> 10:39.840
And then look at the role.

10:39.840 --> 10:41.800
It is Barman.

10:41.800 --> 10:45.480
So here's how it gets a backup and recovery management just by adding this.

10:45.480 --> 10:48.040
So it's an instance with a Barman role.

10:48.040 --> 10:50.000
Now where am I taking the backup from?

10:50.000 --> 10:52.440
Well, I need some space there.

10:52.440 --> 10:54.960
I didn't put it on the bottom because otherwise you wouldn't read it.

10:54.960 --> 10:56.160
So it is coming here.

10:56.160 --> 11:00.680
You just put backup, rush for, and that's how you build it.

11:00.680 --> 11:04.760
So this is all the code you need, and you have already a cluster with cascading replication

11:04.760 --> 11:07.920
and backup and recovery tool.

11:07.920 --> 11:09.000
Good.

11:09.000 --> 11:13.920
You do provision and deploy, and then you're done, and you have built an architecture.

11:13.920 --> 11:15.560
So this is all done with Docker containers.

11:15.560 --> 11:19.680
The idea is that you can take exactly the same file and put it into virtual machines

11:19.680 --> 11:21.880
and other stuff.

11:21.880 --> 11:25.640
So if you don't remember how to do the configuration files, it's very easy.

11:25.640 --> 11:30.680
You can also use the tool TPXSecConfigure, the cluster for them, and you can say, I want

11:30.680 --> 11:35.200
to use this architecture, running PostgreSQL version 16.

11:35.200 --> 11:37.040
The platform is going to be Docker.

11:37.040 --> 11:40.600
My operating system is Debian, and the failover manager is RepManager.

11:40.600 --> 11:43.280
And you get something very similar that you just need to change some names.

11:43.280 --> 11:45.320
Now, look at the Docker thing here.

11:45.320 --> 11:50.440
If I change it to Bear, because I like Bear Metal, you just change that and you get a

11:50.440 --> 11:54.560
different configuration file with some IP addresses that you just need to add.

11:54.560 --> 11:56.360
It's basically the same.

11:56.360 --> 11:58.000
But you can also deploy to AWS.

11:58.000 --> 12:04.640
So TPA is going to also create your virtual machines at AWS if you have the credentials,

12:04.640 --> 12:06.280
and it's going to manage all the network things.

12:06.280 --> 12:09.160
So you just have to do provision and deploy, and you get everything.

12:09.160 --> 12:11.160
It's super cool.

12:11.160 --> 12:14.000
Okay, so configure.

12:14.000 --> 12:16.480
You provide architecture, the platform, and the OS.

12:16.480 --> 12:18.880
Then you do provision, and then you do deploy.

12:18.880 --> 12:24.200
And then deploy also provides some hooks, like doing pre-deploy, pre-NDB, post-deploy.

12:24.200 --> 12:29.120
You can have some stuff like enhancing your cluster.

12:29.120 --> 12:34.480
So to summarize, you have an architecture here, and an executor of the executor, which

12:34.480 --> 12:39.880
is of the architecture, which is the orchestrator here, and it's going to deploy to some machines.

12:39.880 --> 12:44.280
This machine can be running on virtual machines in AWS if you have the credentials, or it

12:44.280 --> 12:49.200
can be Bear Metal, or it can be Docker containers.

12:49.200 --> 12:52.480
When I see a ship like this with containers, I always think about the Albatross and the

12:52.480 --> 12:54.440
rhyme of the ancient mariners.

12:54.440 --> 12:59.320
Okay, so for those people who also listen the same kind of music, you know what I'm talking

12:59.320 --> 13:00.320
about.

13:00.320 --> 13:05.160
The cool thing is that it is exactly the same architecture here, and exactly the same way

13:05.160 --> 13:06.440
of doing the provision and deploy.

13:06.440 --> 13:08.200
It's just a different target.

13:08.200 --> 13:12.520
So instead of submitting your container to somewhere else, you say, I'm going to deploy

13:12.520 --> 13:14.600
the same architecture somewhere else.

13:14.600 --> 13:21.080
So what we basically do is when we do a project with a customer who wants to run an architecture,

13:21.080 --> 13:25.560
we deploy that with using TPA, the definition, and then we pass to the support team, which

13:25.560 --> 13:29.680
is going to continue talking with the customer after we have finished the project, exactly

13:29.680 --> 13:32.200
the same architecture, but in Docker containers.

13:32.200 --> 13:37.600
So whenever the people who is having the project in production has an issue, contact support

13:37.600 --> 13:41.840
and say, like, I have an issue with my architecture, they can deploy a model of it with Docker

13:41.840 --> 13:44.920
containers, and then they can test the whole thing there.

13:44.920 --> 13:48.680
So it gives you really a continuation of your project.

13:48.680 --> 13:53.120
It's not just the first deployment that is easy, but it's also the maintenance and the

13:53.120 --> 13:54.480
documentation of it.

13:54.480 --> 13:56.960
You don't want to document everything on PDF.

13:56.960 --> 13:58.600
You want to document in code.

13:58.600 --> 14:03.120
So your configuration file is the documentation of your architecture because you are using

14:03.120 --> 14:05.120
your infrastructure as code.

14:05.120 --> 14:07.440
That's the main advantage of using this kind of tool.

14:07.440 --> 14:09.240
That's why I like it a lot.

14:09.240 --> 14:10.240
All right.

14:10.240 --> 14:11.960
So these are the platforms.

14:11.960 --> 14:15.480
If you want to have a look at it, it is in GitHub now.

14:15.480 --> 14:18.080
It is released with a GPL version three.

14:18.080 --> 14:22.760
It is recently been open source, but this tool, we have been using it for six years already.

14:22.760 --> 14:25.720
So it's quite mature and have our best practices.

14:25.720 --> 14:31.160
Everything is done with security layers, SSL, host-based authentication, everything

14:31.160 --> 14:32.640
is done for you.

14:32.640 --> 14:36.760
And you have the documentation also at enterprisedba.com.

14:36.760 --> 14:39.720
To include, it is infrastructure as code.

14:39.720 --> 14:43.240
We always put them in Git so that we can have different versions.

14:43.240 --> 14:45.800
We know how it is evolving our infrastructure.

14:45.800 --> 14:49.960
It is not good only for testing because you can test your entire infrastructure, but you

14:49.960 --> 14:54.320
can also use it for deployment in production afterwards.

14:54.320 --> 14:59.120
It is a way of documenting your deployment, not just PDF, but documented as code.

14:59.120 --> 15:03.800
And it's not just for the deployment, but it's also for the maintenance of your stuff.

15:03.800 --> 15:05.480
And finally, we get it open source.

15:05.480 --> 15:06.680
It's been there for a while.

15:06.680 --> 15:07.680
We have been using it.

15:07.680 --> 15:10.000
We have been fighting for getting open source and you get it there.

15:10.000 --> 15:12.520
So you are free to use it as much as you want.

15:12.520 --> 15:17.120
Now all the documentation is there, but you can also contact me via my personal email,

15:17.120 --> 15:19.080
company email, also mastodon.

15:19.080 --> 15:22.360
And that part is also for the other social media with full of haters.

15:22.360 --> 15:23.920
And Hale Slonic.

15:23.920 --> 15:25.040
Thank you very much.

