WEBVTT

00:00.000 --> 00:13.400
I hope you can hear me.

00:13.400 --> 00:16.400
First of all, thank you for having me this year in Fosdum.

00:16.400 --> 00:18.400
My name is Saber Katelari.

00:18.400 --> 00:21.760
I'm a core developer at IDCS.com.

00:21.760 --> 00:26.800
And today I'll be showing you how you can build your own enum as your server using CG

00:26.800 --> 00:27.800
Rates.

00:28.200 --> 00:30.600
Firstly, something about our company.

00:30.600 --> 00:35.320
It's located in Bavaria, Germany with backhouses in Romania and Albania.

00:35.320 --> 00:42.840
We have over 17 years of experience in architecture and server-side solutions in voice-over IP environments.

00:42.840 --> 00:49.600
We have platform implementations covering both wholesale and retail businesses categories.

00:49.600 --> 00:54.360
And by now we are responsible to understand real-time processing and constraints and serious

00:54.360 --> 00:57.720
life system outages.

00:57.720 --> 00:59.720
Something about CG Rates.

00:59.720 --> 01:04.160
It's a real-time enterprise building suite, more like a framework since it can do many

01:04.160 --> 01:05.440
things.

01:05.440 --> 01:08.440
It's pluggable into any existing infrastructure.

01:08.440 --> 01:11.280
It's non-intrusive into existing setups.

01:11.280 --> 01:15.600
So it means it does not force you to make decisions.

01:15.600 --> 01:20.960
It's all dependent on your system admin if you want to take into consideration what CG

01:20.960 --> 01:25.560
Rates gives you or if you just want to ignore it.

01:25.560 --> 01:31.760
We are an open-source software since born in 2010.

01:31.760 --> 01:35.480
First sources published in 2012.

01:35.480 --> 01:39.920
Full sources are available in GitHub, 100% in Go.

01:39.920 --> 01:47.000
We always mention Go because when CG Rates first started, Go was also in its first weekly

01:47.000 --> 01:48.920
releases.

01:48.920 --> 01:55.040
And this means that we were one of the first implementers of Go.

01:55.040 --> 02:01.640
And it also means that everyone that we also paved the way for other people coming after

02:01.640 --> 02:03.640
us.

02:03.640 --> 02:09.200
We have no add-ons in private repositories and we take into consideration community contributions

02:09.200 --> 02:11.400
also.

02:11.400 --> 02:12.400
About Engine.

02:12.400 --> 02:14.200
Engine is performance-oriented.

02:14.200 --> 02:20.960
It has this built-in advanced caching system with transactional list record use and time

02:20.960 --> 02:24.440
TTL expiring records.

02:24.560 --> 02:28.080
It's asynchronous, processing with micro threads.

02:28.080 --> 02:32.200
If you know about Go, you probably know more about this.

02:32.200 --> 02:35.520
Also including API load balancer.

02:35.520 --> 02:38.800
We have three branches, V010, master and 1.0.

02:38.800 --> 02:42.400
V010 is our most conservative branch.

02:42.400 --> 02:46.360
Master is where we have our most recent developments.

02:46.360 --> 02:51.640
And also 1.0, we call it like the pinnacle that CG Rates can do, but it's still in early

02:51.640 --> 02:53.840
developments.

02:53.840 --> 02:59.040
We have a test-driven development environment with over 10,000 tests as part of our testing

02:59.040 --> 03:00.040
suite.

03:00.040 --> 03:06.880
Here we can mention unit tests, integration tests, and also call tests for switches.

03:06.880 --> 03:10.320
It has a building modular architecture which is cloud-ready.

03:10.320 --> 03:19.800
It has microservices with a rich set of RPC APIs because everything in CG Rates is API-related.

03:19.800 --> 03:23.120
And it's easy to enhance by rewriting specific components.

03:23.120 --> 03:29.160
So for example, if you want to rewrite the engine in some other code, you can easily do

03:29.160 --> 03:30.960
so.

03:30.960 --> 03:33.880
Some features for about CG Rates.

03:33.880 --> 03:36.040
You can do online offline charging system.

03:36.040 --> 03:39.000
You can have multi-tenancy from day one.

03:39.000 --> 03:43.000
This is more for wide labeling platforms.

03:43.000 --> 03:45.960
You can have multiple databases supported.

03:45.960 --> 03:52.760
We have multiple databases supported to mention some MySQL, Microsoft SQL, SQL Lite, Mongo

03:52.800 --> 04:00.000
Rates, Postgres, and also our internal database, which is compatible with everything we do.

04:00.000 --> 04:06.960
This is also a pretty challenging job to do for a relatively small team that we are.

04:06.960 --> 04:09.160
You can have real-time configuration reloads.

04:09.160 --> 04:13.640
So you can reload your configurations without having to shut down the engine and open it

04:13.640 --> 04:15.320
again.

04:15.320 --> 04:20.360
You can have rating engine with derived charging and in-number rating.

04:20.360 --> 04:26.120
You can have account balances and management with bundles and Dynaprepate.

04:26.120 --> 04:32.760
With Dynaprepate, you can create accounts on the fly and have it give some restricted

04:32.760 --> 04:36.480
permissions or limited permissions to your system.

04:36.480 --> 04:40.560
You can have sessions or event charging with balance reservation and refunds.

04:40.560 --> 04:43.880
This is prepaid logic.

04:43.880 --> 04:46.840
Stereo-shaken authentication, which is more for North America.

04:47.280 --> 04:52.160
CDR logging with support for interim records and rating cues.

04:52.160 --> 04:57.400
This is when you have your CDR sitting in a black box and have it communicate with your

04:57.400 --> 05:03.920
switch and have your CDR straight at the end of a matter of milliseconds without using

05:03.920 --> 05:07.920
any databases from the CDR side.

05:07.920 --> 05:12.640
You can have high-number of interfaces for event readers and exporters to mention some

05:13.360 --> 05:19.760
MQP, SQS, SQL, CSVs, XMLs and a couple more.

05:19.760 --> 05:26.920
You can have fraud detection with automatic mitigation, LCR with quality-based bundles,

05:26.920 --> 05:32.000
quality-based stats and bundles, call statistics with pattern monitoring.

05:32.000 --> 05:37.200
So you can find your ASR and your ACD live from your CDR rates.

05:37.240 --> 05:43.440
And also in combination with your proxy, you can find your average call cost and your total

05:43.440 --> 05:45.840
call cost.

05:45.840 --> 05:49.160
You can have dynamic pricing imports with templates.

05:49.160 --> 05:59.480
This is since all suppliers have different formats and CDR scan is compatible with most

05:59.480 --> 06:02.080
of them.

06:02.080 --> 06:09.080
You can use it with diameter, with radius if you need some authentication, Wi-Fi authorization.

06:09.080 --> 06:17.880
With DNS if you need enamel CR routing, which is also the topic for today.

06:17.880 --> 06:26.880
And you can also have a basic SIP server where it can do redirecting with your CDRs.

06:26.880 --> 06:33.200
You can have it redirect traffic from your switch to your CDRs with some routing and

06:33.200 --> 06:35.760
IP addresses.

06:35.760 --> 06:42.040
Well, else we have resource allocation and controller.

06:42.040 --> 06:45.680
This is some virtual channeling for your customers.

06:45.680 --> 06:51.640
You can have your API server with Gop Json, HDB Json support, built-in high availability

06:51.640 --> 06:56.560
with dynamic partitioning support, API capturing analysis service.

06:57.240 --> 07:00.840
This is something like an internal grant for CDR rates.

07:00.840 --> 07:05.040
Clustering through remote, replication for internal cache and database.

07:05.040 --> 07:08.880
Data versioning with automatic migration.

07:08.880 --> 07:13.280
This is when you need to move between releases in the same branch.

07:13.280 --> 07:15.680
You can do so with data migration.

07:15.680 --> 07:20.440
You can have and we also do, we also are agile in developing new features.

07:20.440 --> 07:25.440
So if you have some feature or some idea that you want to bring us, you are more than welcome

07:25.440 --> 07:27.920
to do so.

07:27.920 --> 07:34.360
This is an internal schema or diagram that we have for CDRs.

07:34.360 --> 07:39.560
It basically shows how CDRs has its components and interfaces and how they communicate with

07:39.560 --> 07:41.000
each other.

07:41.000 --> 07:45.040
On your left side you can see all our interfaces.

07:45.040 --> 07:50.120
You might notice that we don't have open SIPs over there because open SIPs has its own

07:50.120 --> 07:55.000
native module which is faster and better than anything we can do since it's native to open

07:55.040 --> 07:57.240
SIPs.

07:57.240 --> 08:02.360
And if we take one example, for example DNS agent which is on your left, you can see

08:02.360 --> 08:06.400
that it communicates with sessions which is our main subsystem and through there it can

08:06.400 --> 08:11.480
communicate with every component or all components at all or one component.

08:11.480 --> 08:16.840
It's all dependent on what you want to do with CDRs.

08:16.840 --> 08:24.840
For some use cases, again online offline charging, you can have a highly configurable rating

08:25.000 --> 08:31.000
bundle with voice, data, SMS, MS, monetary or anything else.

08:31.000 --> 08:34.680
In 1.0 you can really charge anything else.

08:34.680 --> 08:40.080
You can have there concurrent sessions with concurrent sessions handling and also a centralized

08:40.080 --> 08:41.880
CDR server.

08:41.880 --> 08:48.240
And this all together is what others call online offline charging system.

08:48.240 --> 08:53.440
Another use case which you can do is a dynamic routing system where you can use the dedicated

08:53.480 --> 08:58.880
subsystem for various routing strategies.

08:58.880 --> 09:05.880
There we can mention load balancing, the difference in our load balancers is that we cannot use

09:05.880 --> 09:11.960
setups but only real calls since we get that information out of CDRs.

09:11.960 --> 09:18.960
Also you can have LRN support via attributes, bundle support routing systems, quality based

09:19.960 --> 09:26.560
stats monitoring with thresholds and also load balancer which I mentioned.

09:26.560 --> 09:31.920
Now to get to the INOM LCR server that the topic is for.

09:31.920 --> 09:37.560
Firstly we need to know about DNS, probably most of you know but DNS is something like

09:37.560 --> 09:44.160
an internet address book where you query for something and you get information back specific

09:44.160 --> 09:46.960
to that what you question for.

09:46.960 --> 09:52.120
Depending on your answer the answer is categorized in some record types.

09:52.120 --> 09:58.480
There's a couple but we only work with these three, A-Type, SRV type and NEP type records.

09:58.480 --> 10:04.360
We work only with this because that's what most people need and nobody has really asked

10:04.360 --> 10:06.880
for anything more than this.

10:06.880 --> 10:13.880
To shortly describe them A-Type records convert domain addresses into IPv4 addresses, SRV

10:14.720 --> 10:17.760
records for network servicing.

10:17.760 --> 10:24.760
You can find priority, weight, port, targets from your SIP addresses and most importantly

10:25.000 --> 10:32.000
in NEPTR records which convert INOM addresses, INOMs into IP addresses.

10:37.520 --> 10:38.820
But what is INOM?

10:38.900 --> 10:43.420
INOM is basically a standard to translate telephone numbers into your eyes.

10:43.420 --> 10:45.620
Here's an example how you can do that.

10:45.620 --> 10:48.860
Firstly you need an E164 number.

10:48.860 --> 10:55.860
You can convert your number into an E164 number by firstly removing any leading zero before

10:57.220 --> 11:02.820
it and also adding your country code after it and with a plus at the end.

11:02.820 --> 11:08.620
Then to convert this INOM 164 number into an INOM number you have to remove the leading

11:08.620 --> 11:15.580
plus, reverse all the digits, add a dot between each digit and then add a suffix.

11:15.580 --> 11:22.580
This suffix, the one you have in this example is from RFC standards but in C-Drates we don't

11:23.380 --> 11:27.660
really care what you put in your suffix.

11:27.660 --> 11:33.740
In my example even I even replaced this ARPA later with the account string that I will

11:33.740 --> 11:37.180
use.

11:37.180 --> 11:44.180
For DNS agent I also mentioned earlier it's an interface, it's like a middleware where

11:44.980 --> 11:51.980
your DNS client communicates with DNS agent and then sends that information, that request

11:53.060 --> 12:00.060
to the DNS server and then from there maybe you can see from the schema.

12:00.260 --> 12:06.380
From there you can go into sessions and any component it can take any component and then

12:06.380 --> 12:12.700
give that information back to the DNS client.

12:12.700 --> 12:17.500
In terms of capability you can have as many listeners as you want.

12:17.500 --> 12:24.500
Also to mention in DNS agent we also implemented our DNS server and DNS service and listeners

12:25.780 --> 12:31.900
and for listeners you can have as many listeners as you want and they can all be opened at

12:31.900 --> 12:38.900
the same time. You can have UDP, TCP and TLS protocols and this means it is highly configurable

12:39.780 --> 12:42.460
and concurrent.

12:42.460 --> 12:48.420
Again for query types we support ASRV and NAPTR.

12:48.420 --> 12:55.420
For configuration this is in your configuration files. You need to open a new field, name

12:56.420 --> 13:03.420
it DNS agent, also this is JSON, everything is JSON in configuration.

13:03.420 --> 13:10.420
Name a new field DNS agent, enable it, by enabling it you allow it to receive and to

13:12.460 --> 13:15.660
send API calls.

13:15.660 --> 13:20.660
Then you name listeners where again you can see that it's a list so you can have as many

13:20.700 --> 13:22.740
listeners as you want.

13:22.740 --> 13:26.300
You name your address by giving it an IP and a port.

13:26.300 --> 13:33.300
In my case I use an empty IP since if it's sent by default in CJA we put what's in defaults

13:35.140 --> 13:38.740
and in this case in default is just localhost.

13:38.740 --> 13:41.540
For port I put 2053.

13:41.540 --> 13:46.540
If left empty again this will be filled by the default which is 53.

13:46.540 --> 13:50.420
And for that address I need to attach it a network.

13:50.420 --> 13:57.420
On this case I use the UDP protocol and again if left empty again it will be on UDP by default.

13:58.900 --> 14:03.900
After that I want to also be open to TCP listeners.

14:03.900 --> 14:09.980
That's why I create the same address but this time I changed the protocol.

14:09.980 --> 14:13.460
This doesn't mean that either one or the other will work.

14:13.540 --> 14:17.540
It means that both of them will work at the same time.

14:17.540 --> 14:21.100
There's something messed up over there.

14:21.100 --> 14:23.620
They should be on the same line for the last one.

14:23.620 --> 14:29.180
The address for TLS since I cannot have TLS and TCP on the same address I can put it

14:29.180 --> 14:32.180
in a different port for this example.

14:32.180 --> 14:38.380
And after you finish with listeners you go to connect your DNS agent with sessions and

14:38.380 --> 14:41.140
you do that by using session cons.

14:41.140 --> 14:47.420
You can have either localhost, internal or some configurable other connection which is

14:47.420 --> 14:49.140
done by you.

14:49.140 --> 14:54.740
I use in this case localhost since I want to track the network, the packets going through

14:54.740 --> 14:57.380
sessions and DNS agent.

14:57.380 --> 15:03.620
You can switch it with internal if you want to have a faster connection or if you do not

15:03.620 --> 15:09.540
need this debugging, this packet tracing.

15:09.540 --> 15:14.060
Just on that same DNS agent field you put request processors.

15:14.060 --> 15:21.180
To short explain request processors do the logic of what's going to happen after a query

15:21.180 --> 15:23.620
is done to your server.

15:23.620 --> 15:26.220
In this case you can have many request processors.

15:26.220 --> 15:29.860
In this case I'm only showing one.

15:29.860 --> 15:32.700
And this is what happens with it.

15:32.700 --> 15:39.820
First we define an ID for it which has to be different from other request processors.

15:39.820 --> 15:42.300
It doesn't matter what you put inside, it just has to be different.

15:42.300 --> 15:49.940
So in this case I'm describing what I do in this process which is NAPTR list cost route.

15:49.940 --> 15:53.700
After that you define filters.

15:53.700 --> 16:03.700
Because I want to find the list cost route to find a Cp address for my query.

16:03.700 --> 16:13.540
I first need to be sure that the query type is in NAPTR and that the leading country code

16:13.540 --> 16:14.540
starts with 32.

16:14.540 --> 16:16.220
This is just an example.

16:16.220 --> 16:19.420
You can have any filter that you want.

16:19.420 --> 16:26.100
The first filter asks the query type from the request if it's a full NAPTR string.

16:26.100 --> 16:30.700
And if that's true it goes to the second filter which finds if there's a prefix starting

16:30.700 --> 16:34.860
in that query name that starts with 32.

16:34.860 --> 16:40.260
And before it does that it converts that in number into E164.

16:40.260 --> 16:41.380
And that's done with filters.

16:41.380 --> 16:45.100
If those are true it goes to the next one which are the flags.

16:45.100 --> 16:48.660
In my case I want to create an event each time this query is being made.

16:48.660 --> 16:55.860
So I put there meta event which calls an API for sessions process event.

16:55.860 --> 16:58.340
Each time this query is true.

16:58.340 --> 17:04.540
And I also put routes authorized because I want to get the max usage when the query is

17:04.540 --> 17:05.540
done.

17:05.540 --> 17:14.820
And I also put routes because I want to do list cost routing with it.

17:14.820 --> 17:21.340
Next I put log there because I want to get some logs out of the query when the query

17:21.340 --> 17:22.340
is done.

17:22.340 --> 17:27.020
So I want to get the request and the reply from the query.

17:27.020 --> 17:30.460
And after that I put request fields.

17:30.460 --> 17:35.580
The request fields are what you want to populate when the query is being done.

17:35.580 --> 17:41.500
In this case I want to populate account, destination, set up time, type of record and usage.

17:41.500 --> 17:45.780
I want to populate this because I want to put them in my event later and the event needs

17:45.780 --> 17:48.380
to use them.

17:48.380 --> 17:49.380
How I populate them?

17:49.380 --> 17:56.580
I populate account with the query name by stripping away the first E164 and what's before

17:56.580 --> 17:57.580
it.

17:57.580 --> 18:03.020
So it leaves me behind with only the 1001 account which I will show later.

18:03.020 --> 18:06.060
This way I populate account with 1001.

18:06.060 --> 18:11.500
In destination I put the query name fully converted into E164.

18:11.500 --> 18:17.020
In set up time I put now for the current time of the query, type of record voice and usage

18:17.020 --> 18:19.220
of one minute.

18:19.220 --> 18:23.220
For the reply fields I want to put what I want to reply to the DNS with.

18:23.220 --> 18:30.860
So I want to reply with order of 100, reference 10, flags U and service E2U plus CIP.

18:30.860 --> 18:38.380
In the most important part the regular expression which I find through route parameters.

18:38.380 --> 18:47.180
I didn't show here but I created a routing profile before and I put there two information

18:47.180 --> 18:55.220
in two routes and that information are the CIP addresses which are different.

18:55.220 --> 19:02.340
One of them is of highly cost and the other one is least cost, is lesser cost.

19:02.340 --> 19:10.540
And since I have that meta routes flag over there, those routes will be sorted using least

19:10.540 --> 19:12.420
cost.

19:12.420 --> 19:19.140
And since I have reply I want to find that reply the routing parameters for that first

19:19.140 --> 19:20.340
index of the route.

19:20.340 --> 19:25.020
And the first index is always depending on the sorting route and make it least cost,

19:25.020 --> 19:29.940
the first index is going to be the least cost route.

19:29.940 --> 19:33.860
And under the reply you can see the reply.

19:33.860 --> 19:40.620
I find in the structure routing profile I go to run ID meta row, meta is in this case

19:40.620 --> 19:45.780
asterisk of iteration 0 of that ID.

19:45.780 --> 19:51.260
I go to routes of iteration 0 again and then I find the value of routing parameters which

19:51.260 --> 19:54.860
is the CIP address that it finds.

19:54.860 --> 19:58.100
And then I populate it to that regular expression.

19:58.100 --> 20:04.340
After that I just also put the replacement dot at the end.

20:04.340 --> 20:10.820
For the client, for the client I'm using dig, in this case I'm couring localhost on port

20:10.820 --> 20:14.700
2053, the type of regular this NAPTR.

20:14.700 --> 20:16.740
And you can see the N number that I put there.

20:16.740 --> 20:20.580
You can see the 1001 account at the end.

20:20.580 --> 20:23.780
For the reply I captured this using ngrep.

20:23.780 --> 20:27.700
You can see the API that gets called sessions process event.

20:27.700 --> 20:32.180
In the flags they are the exact same that I put in my request processes.

20:32.180 --> 20:37.980
The tenant gets automatically taken by default configs which is cj.org, the ID is some random

20:37.980 --> 20:39.300
number.

20:39.300 --> 20:42.380
Time is the current time of the query.

20:42.380 --> 20:47.940
And in the event you can see they are exactly what I asked for in my request processes again,

20:47.940 --> 20:50.180
if you can see.

20:50.180 --> 20:54.540
And that's just the request for the reply site.

20:54.540 --> 21:00.860
I can see the reply from that API where I find the max usage of 60 seconds.

21:00.860 --> 21:05.700
If you remember I put one minute of the request.

21:05.700 --> 21:08.580
You can see that it's also 60 billion nanoseconds.

21:08.580 --> 21:12.140
This cj also works in nanoseconds.

21:12.140 --> 21:15.300
Also I have the reply on the routes profile site.

21:15.300 --> 21:20.140
You can see that it found the routes account for 1001.

21:20.140 --> 21:22.700
You can see the sorting that it used.

21:22.700 --> 21:25.060
It's LC for list cost.

21:25.060 --> 21:30.500
And also it shows all the routes that it found sorted by it.

21:30.500 --> 21:33.420
And you can see routes with ID route 2.

21:33.420 --> 21:39.660
You can see the Cp address ending with 12 and the cost that it would take of 60 units.

21:39.660 --> 21:46.220
And the second ID which is more costly with the Cp address of 11.

21:46.220 --> 21:50.820
And here we get the reply back from DNS agent after it's done.

21:50.820 --> 21:57.900
You can see that it found a regular expression with 12 at the end which was 60 cost units

21:57.900 --> 22:00.340
if you saw from earlier.

22:00.340 --> 22:08.500
And also as another use case you can have a fail fallback.

22:08.500 --> 22:12.660
So for example you can have multiple answers over here.

22:12.660 --> 22:18.260
In my case I would just have to make another request process.

22:18.260 --> 22:23.780
And in this case I put just one instead of zero over there and it gets the second list

22:23.780 --> 22:27.740
cost that it finds from routes.

22:27.740 --> 22:32.220
By that you can just get the second answer also.

22:32.220 --> 22:33.540
And that's about it.

22:33.540 --> 22:36.380
Any questions?

22:36.380 --> 22:42.380
I'm guessing not.

22:42.380 --> 22:46.900
If you have any questions you can also ask them at our Google groups.

22:46.900 --> 22:47.900
Oh sorry.

22:47.900 --> 22:48.900
Yeah.

22:48.900 --> 22:52.620
Going back to the request and the response.

22:52.620 --> 22:57.340
I saw you had a, in the request you were getting an account ID.

22:57.340 --> 23:03.940
How are you figuring out the account of the person asking according to DNS?

23:03.940 --> 23:06.580
Well it depends on what you want to do.

23:06.580 --> 23:11.820
In my case I just put that in my request on the DNS client over there.

23:11.820 --> 23:14.540
You can see at the end it's in that 1001.

23:14.540 --> 23:16.260
So I give it myself that account ID.

23:16.260 --> 23:22.540
Okay so you're giving each customer a phone top level domain name.

23:22.540 --> 23:23.540
Whatever you want.

23:23.540 --> 23:27.540
Any other questions?

23:27.540 --> 23:28.980
Okay.

23:28.980 --> 23:33.060
Thank you.

