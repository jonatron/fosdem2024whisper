WEBVTT

00:00.000 --> 00:15.440
Hello, everyone. Thanks for joining. We have Ryan talking about roles, privileges, and

00:15.440 --> 00:20.200
security in post-dress. Over to you.

00:20.200 --> 00:26.280
Thank you. I also get to quit this at the end of my deck, but it's fairly easy. I'm

00:26.280 --> 00:32.960
Ryan Booz everywhere. I try to be my blogger software in Booz, which you'll see some stuff

00:32.960 --> 00:38.920
time to time. And I will try and get this updated version in my repo hopefully before

00:38.920 --> 00:42.880
the end of the day, and I will do my best to link it to the website. They have a place

00:42.880 --> 00:44.920
for us to do that.

00:44.920 --> 00:49.920
So quick agenda. Roles and privileges. It's something we have to deal with everywhere,

00:49.920 --> 00:54.000
whether it's in post-dress, whether it's on your machines, whether it's in your applications.

00:54.000 --> 00:58.200
And it's something that, as I've done more and more in post-dress, helped users in post-dress,

00:58.200 --> 01:03.600
helped people transitioning into using post-dress, understanding roles, and how the privileges

01:03.600 --> 01:07.240
that we can inherit and use really interact with things. So that's what we're going to

01:07.240 --> 01:12.360
try and go top down. It's, every time I run through this, I'm actually writing a chapter

01:12.360 --> 01:16.800
of a book on this, and it's like trying to figure out the exact order because of all

01:16.800 --> 01:20.040
the pieces that have to come together. So we'll start with the building blocks, get

01:20.040 --> 01:23.960
through roles, talk a little bit about inheritance, which is really important. And for me, it's

01:24.880 --> 01:29.320
about getting down to object ownership because I think that's where most people get confused

01:29.320 --> 01:36.200
and have a difficult time using post-dress at scale with a lot of people. So quick disclaimers.

01:36.200 --> 01:40.800
We won't cover everything. There's just too much, right? But everything I cover in here

01:40.800 --> 01:45.920
should be applicable. It is applicable to anything that's currently in support version,

01:45.920 --> 01:50.880
which is 12 plus. Honestly, it should work with anything from nine, six forward, aside

01:50.920 --> 01:55.880
from one or two things that have been added over the last few releases. So let's go ahead

01:55.880 --> 02:01.520
and dive in. So first, the building blocks. So there's four pieces here. One is just,

02:01.520 --> 02:05.160
I want to talk about the building blocks. We're going to talk about roles, security,

02:05.160 --> 02:10.920
and ownership, just to get you through as we go. So if you have been using post-dress

02:10.920 --> 02:14.800
for a while, you may or may not understand this, but it's really critical to understanding

02:14.800 --> 02:20.040
how privileges and roles work. And so if you are in a hosted environment, this may not

02:20.080 --> 02:26.080
matter to you. But again, it's really important to understand. So as you create roles, objects,

02:26.080 --> 02:31.400
and the ownership and the privileges, this is how this works. So we have, if this is a bare

02:31.400 --> 02:37.280
bone server, we have a cluster. And we have a host, whether it's a VM, whether that's bare

02:37.280 --> 02:43.280
metal. And on that host, you can have as many running post-dress clusters as you want. So

02:43.280 --> 02:48.720
we just had to talk about clustering, but the actual process running on the host is called

02:48.760 --> 02:52.880
a cluster. If you go to the documentation, that's what you'll see. So we can have multiple

02:52.880 --> 02:58.600
clusters. They just have to run on different ports. And then once you have a cluster, now

02:58.600 --> 03:02.000
this should make sense. Really, there's a lot that goes on in there, but as far as this

03:02.000 --> 03:06.880
talk goes, the two pieces that are really critical and really symbiotic to one another

03:06.880 --> 03:13.160
is roles and the databases, the objects that are contained therein. So these exist at the

03:13.160 --> 03:18.640
cluster level. So roles are created at the cluster, databases are created at the cluster,

03:18.680 --> 03:23.960
and again, remember, for this talk, cluster is one instance of post-dress, not many, many

03:23.960 --> 03:30.840
instances. And then, like I said, the interplay between these is actually just a little bit

03:30.840 --> 03:35.880
more nuanced than I used to spend a lot of my time in SQL Server a number of years ago.

03:35.880 --> 03:41.000
And it's similar, right? We're talking about roles or users and privileges, but the way

03:41.000 --> 03:45.320
that they rely on one another in post-dress, again, can be a nuance that not everyone picks

03:45.360 --> 03:49.960
up initially. So we'll try and talk that through. Essentially, just to show that everything

03:49.960 --> 03:55.080
in the database, everything we care about from an object perspective has to be owned

03:55.080 --> 04:00.360
by a role. And so it cannot exist until a role exists, and then it includes a database.

04:00.360 --> 04:05.840
And so there's just this back and forth that we're trying to understand as we go. When

04:05.840 --> 04:12.640
you're in the cluster, every cluster has what's called a PG-HBA file, that is, host-base authentication.

04:12.640 --> 04:17.560
And it's the first layer of authentication. So again, if you're running your own server,

04:17.560 --> 04:22.440
this exists, you have to do something with it. If you're in a hosted environment, most

04:22.440 --> 04:26.840
of this is taken care of for you if you're in a cloud vendor. And I like to think of

04:26.840 --> 04:33.480
it almost like a firewall rule, right? So it's a file that literally shows which hosts

04:33.480 --> 04:38.560
and roles can connect to what database is using what authentication method. And it's

04:38.600 --> 04:44.800
a matter of reading top down as a connection tries to happen into Postgres. It matches

04:44.800 --> 04:48.760
each of those properties. What host is this connection coming from? What is the role that's

04:48.760 --> 04:52.560
trying to connect? And what is the method they're trying to use? And the first one it

04:52.560 --> 04:59.560
finds, that is the role, that is the HBA rule that it lists. These things can be very, very

04:59.560 --> 05:05.400
long, right? But it's just left to right on each line. What type is it local? Is it host-based?

05:05.560 --> 05:12.560
A bunch of others. Which database? All databases, the users, addresses, and then methods. So

05:14.600 --> 05:19.120
when it comes to methods, you've probably heard this if you've been around long enough,

05:19.120 --> 05:25.280
but their trust still exists. And so just avoid using trust. Really at all costs. What

05:25.280 --> 05:32.040
that means is on that machine, if the host and the user matches, you're in. You just

05:32.080 --> 05:38.440
trust it and move forward. It's not terribly secure, right? And so in most environments,

05:38.440 --> 05:44.960
if it's not some kind of central authentication, like Kerberos or whatever that might be, most

05:44.960 --> 05:51.960
places do give you Scram 256 now. So Scram was developed, I forget now, five or six years

05:52.160 --> 05:58.840
ago, really kind of took over, replaced MD5 and some other things. So Scram 256 is what

05:58.960 --> 06:04.360
we recommend if you're using password-based authentication. And just need to make your,

06:04.360 --> 06:07.600
it's probably what you're using, but if you don't know, go ahead and look.

06:07.600 --> 06:12.240
All right, so that's just the building blocks. We have a host. We have a cluster running on

06:12.240 --> 06:16.440
it. We know the inside of the cluster. We have roles, databases, and some objects. So

06:16.440 --> 06:20.440
let's go ahead and talk about that first part. Once we've at least gotten through that host-based

06:20.440 --> 06:25.680
authentication, we have a host, a user, and a type. We've matched the rules, and now we're

06:25.720 --> 06:32.800
allowed to try and connect. Who are we connecting as? So roles, obviously, own the database

06:32.800 --> 06:39.240
schema's objects, things like tables, functions, views, things you would expect within a database.

06:39.240 --> 06:45.000
And roles own the database itself. There's a role that owns the database that's created.

06:45.000 --> 06:49.200
Roles have cluster-level privileges. It's this nuance of thing we'll call attributes,

06:49.200 --> 06:53.200
and I'll show you in just a minute. Those are separate from the privileges that you

06:53.240 --> 06:57.640
get within a database. But they're kind of, again, it's like the host-level, what can

06:57.640 --> 07:04.640
you as a user do as a role do in this data in this cluster? And then you might be able

07:04.840 --> 07:09.160
to be granted privileges to a data... They can be granted privileges to database schemas,

07:09.160 --> 07:15.160
objects, and so forth. And then possibly, as we'll see in one second, some roles have

07:15.160 --> 07:22.160
the ability to grant their privileges and their privileges to other roles in the database.

07:23.200 --> 07:28.800
And we'll see why that's really important. So just to talk, I've been trying consistently

07:28.800 --> 07:35.800
to say roles over and over and over rather than users and groups. So in the SQL standard,

07:35.800 --> 07:42.800
role is there, and so is user and group. User... I might have the backwards, but user and group

07:42.800 --> 07:49.800
is also in the standard. But starting with, I think, was 8.2. We moved to just roles.

07:49.960 --> 07:53.960
So there's no real semantic difference between roles and groups. It doesn't do something

07:53.960 --> 08:00.240
magical. What we tend to say, what the convention is, when you create a role and it's allowed

08:00.240 --> 08:06.360
to actually log in to the cluster, we kind of consider that role a user. And if it's

08:06.360 --> 08:11.480
not allowed to log in, we consider that a group. Everything else about the roles can

08:11.480 --> 08:16.480
be consistent. They can all have privileges. They can all do a lot of things. They can own

08:16.480 --> 08:21.160
this. Even a role that can't log in can own something. And you'll see why we do that in

08:21.160 --> 08:27.120
just a little bit when it comes to inheritance. So you can do this, create user and create

08:27.120 --> 08:34.120
group does exist. They are simply aliases to create role. And so if you say create user,

08:34.760 --> 08:41.160
it, behind the scenes, does create role, whatever attributes you pass in, it will apply. And

08:41.160 --> 08:48.160
then by default, it will apply the login automatically. And group will apply no login so you can't

08:53.440 --> 08:58.760
get in. So there's really no reason. It depends on your environment and how you work. But

08:58.760 --> 09:03.760
there's really no reason you can't do a create role consistently across the board. Any of

09:03.760 --> 09:08.520
these will work. They'll get the exact same thing done. Just recognize the first two are

09:08.520 --> 09:14.560
not running create role under the covers. And so I keep talking about these attributes.

09:14.560 --> 09:20.080
So now we understand a little bit what roles are. You can apply attributes to the roles.

09:20.080 --> 09:24.800
So they are predefined settings that, again, are at the cluster level. There's nothing

09:24.800 --> 09:31.160
to do with the databases yet. And they map to this catalog table called PG roles. So

09:31.160 --> 09:35.360
these are the attributes. I say Postgres 15. I think these have been the same attributes

09:35.400 --> 09:41.760
since Postgres 9.6. One might have changed. I don't remember to be honest with you. The

09:41.760 --> 09:45.880
ones that we, I'm going to talk about just briefly through the rest of this. What most

09:45.880 --> 09:50.040
of you are probably concerned with as you are administering databases are the ones that

09:50.040 --> 09:54.840
are underlined. Can you login or not? Is this role a super user or not? Talk about that

09:54.840 --> 10:00.480
in a minute. Can they create other roles? Can they create databases in this cluster?

10:00.600 --> 10:06.800
Is it password based authentication? And then can they inherit privileges from other roles?

10:06.800 --> 10:11.040
The other three that are listed there, again, a little bit complex in connection limit,

10:11.040 --> 10:16.480
if you really want to set it, you can. Just recognize if you don't set those other couple

10:16.480 --> 10:21.840
strings, the connection or the attributes, the strings or inherit. By default, roles

10:21.840 --> 10:26.760
will be able to inherit from other roles. We're going to talk about that a little bit.

10:27.520 --> 10:31.960
They have unlimited connections. If there are available connections, I can connect many

10:31.960 --> 10:37.520
times as that user from that method and so forth. Any questions on roles?

10:42.520 --> 10:47.720
One thing that I often forget to talk about, there is a way, again, depending on what you're

10:47.720 --> 10:54.800
doing and how you are administering Postgres, you can actually, for a role, set many of

10:54.840 --> 10:59.120
the settings that you could do within Postgres. If you go into running Postgres instance and

10:59.120 --> 11:07.280
you can do something like set search path, set jit, you can actually alter a user and

11:07.280 --> 11:13.200
set that property so that every time they connect and has to be connection, that property

11:13.200 --> 11:17.760
will get set for that session. That can be really helpful. Sometimes you get lost in

11:17.760 --> 11:24.200
documentation and it might be useful for what you do. I just chose jit. Here's an example.

11:24.280 --> 11:29.000
Jit can be really good and it can be really troublesome when you have complex queries

11:29.000 --> 11:35.520
that are lots of data. Maybe the jit actually is not as helpful. Maybe you have a report

11:35.520 --> 11:39.720
user in your database that's often running really complex reports and you just don't

11:39.720 --> 11:43.240
realize that maybe jit's one of the reasons that it's not being as efficient as it could

11:43.240 --> 11:48.040
be. Maybe with that user, you would turn off jit. You don't have to think about it anymore.

11:48.040 --> 11:53.120
Every time they connect, jit would just be turned off for that session.

11:53.160 --> 12:02.160
How many of you have heard of the SuperUser? Most people have. If you've worked with Postgres,

12:02.160 --> 12:08.920
you've been warned about this thing called the SuperUser. Most people, if you're learning,

12:08.920 --> 12:12.800
have logged in with the user Postgres and they can do whatever they want and they never

12:12.800 --> 12:18.720
think about why they can do whatever they want and we move forward with life and we forget.

12:18.760 --> 12:24.240
You would think that someone who has access with SuperUser would kind of be like the superhero,

12:24.240 --> 12:28.360
the neighborhood friendly Superman. It's always looking out for the benefit of good of everybody

12:28.360 --> 12:33.680
but the reality is SuperUser is a lot more like this. You can do anything, anywhere,

12:33.680 --> 12:39.720
destroy whatever you want and no one can stop you. It means we have to be really careful

12:39.720 --> 12:47.720
with SuperUser. Again, as Postgres has become more and more popular, the usage has increased,

12:47.720 --> 12:54.000
depending what SuperUser is needed for, which in many ways is often very little. Compared

12:54.000 --> 12:58.120
to quite honestly some of the trouble you can get into with it, it's really valuable

12:58.120 --> 13:04.800
to know what you can do and ways to get around it. You get one SuperUser created when the

13:04.800 --> 13:11.400
cluster is initiated. When you say initDB, you get a user. That user has to be a SuperUser

13:11.400 --> 13:17.040
because things have to be done. Roles are going to have to be created. The process is

13:17.080 --> 13:22.760
running as that user. But it doesn't mean that you actually have to use that user moving

13:22.760 --> 13:27.560
forward. There's a lot of recommendations where you actually can change that user Postgres

13:27.560 --> 13:34.280
to no login. You can't log in now. You can log in as a role that could set log in if

13:34.280 --> 13:38.960
you really need to for some reason. There's a lot of ways that it's necessary for some

13:38.960 --> 13:43.920
actions that we're going to do, but it's just really powerful. Typically named Postgres.

13:44.000 --> 13:52.240
Is that because when we run initDB, the user, the process that is running Postgres to init

13:52.240 --> 13:59.320
that DB will be the name of the SuperUser that's created. In most systems, when you install

13:59.320 --> 14:05.440
from an RPM package or something like that, it will be the, the rim keeps all of our RPM

14:05.440 --> 14:12.800
packages up. Give me a hand. It's Postgres user. In Linux, it's created. Therefore, the

14:12.880 --> 14:18.560
SuperUser is called Postgres. You can actually tell initDB to use a different role if you

14:18.560 --> 14:22.680
want. Create a different role and use it. But generally it's Postgres unless you have

14:22.680 --> 14:29.360
a different environment. And it bypasses every security check everywhere in Postgres except

14:29.360 --> 14:37.120
for login. So as long as that host is allowed to log in and you're a SuperUser from that

14:37.120 --> 14:42.440
point forward, you can do whatever you want. So it's kind of like root on Linux. So most

14:42.480 --> 14:48.360
cloud providers do not provide this to you. Now there are some, if you are in your sandbox

14:48.360 --> 14:53.560
environment, like a private VM or something like that, you may get direct access and you

14:53.560 --> 14:59.400
may get SuperUser. If you use AWS, Microsoft, Google, whatever your hosting provider might

14:59.400 --> 15:07.900
be, you do not get SuperUser. They give you something that is like SuperUser. We all,

15:07.940 --> 15:13.820
we trust him. So it's just enough power, but not so much that you can destroy the world.

15:13.820 --> 15:19.100
And so the recommendations, you'll find this in docs. I actually forgot what page and I

15:19.100 --> 15:22.020
tried to find it quickly, but there is this recommendation in docs and then you'll see

15:22.020 --> 15:27.860
this elsewhere. If you are going to manage, and you're a DBA of a Postgres cluster, it's

15:27.860 --> 15:34.300
usually best practice to create, just as you would in Linux, create a user that can do

15:34.340 --> 15:38.980
what you need us to do, but is not root. And so in this case, we say something SuperUser

15:38.980 --> 15:43.700
like, at a bare minimum, they probably should be able to create other roles that will allow

15:43.700 --> 15:47.980
them to create roles, alter roles and so forth. And they probably need to be able to create

15:47.980 --> 15:54.220
databases. But if they're not SuperUser, they can't just go to any database, delete, remove,

15:54.220 --> 15:59.180
modify anything they want. And that's what you're trying to prevent. So it allows user

15:59.180 --> 16:05.660
management, but a little bit safer. Now there are still some things that you may not be

16:05.660 --> 16:10.860
able to do if you are not a SuperUser. There are some extensions that require being a SuperUser

16:10.860 --> 16:18.300
to install. Now the team consistently has worked, we'll talk about the very end, about

16:18.300 --> 16:23.340
providing new roles that can allow us to do some of these things that used to require

16:23.340 --> 16:28.180
SuperUser. So I know that that's one that's been talked about, for instance. It used to

16:28.180 --> 16:33.020
be checkpoint. You could only run a checkpoint if you had the privilege or you had SuperUser.

16:33.020 --> 16:38.660
And so now there's a privilege with 16 that allows you to run a checkpoint, even if you're

16:38.660 --> 16:46.820
not a SuperUser. So we have roles, both regular roles, super-duper roles, and the kind of roles

16:46.820 --> 16:51.620
we want for managing our database. And then for those roles, we need to apply privileges.

16:51.620 --> 16:55.660
And at the heart of it, we've just, by creating roles, all we've done is been able to log

16:55.660 --> 17:00.740
in. And so if we want to actually do something in the database, we have to understand privileges

17:00.740 --> 17:07.180
in Postgres. So obviously there are a set of access rights, to database schemas, objects.

17:07.180 --> 17:13.580
Now when I say objects, I generally mean things like tables, views, functions, store procedures,

17:13.580 --> 17:18.420
things that have ownership of some sort. Not every single thing in a Postgres database

17:18.420 --> 17:25.180
is actually owned by an owner, a role. Most things are. They can be granted, privileges

17:25.220 --> 17:30.340
can be granted or revoked. You've probably been used to this either in Postgres or elsewhere.

17:30.340 --> 17:35.620
And then the one thing I, it's, as we get to one or two things at the end, it's easy

17:35.620 --> 17:42.420
to forget that any time you run a script, and it says, grant something to somebody,

17:42.420 --> 17:48.140
it only impacts things that exist right then. So a lot of people I've seen will start a

17:48.140 --> 17:54.860
database up, they'll do something like grant all, select all, to all tables on public to

17:54.860 --> 17:58.380
whatever. And they think, great, I've solved my problem for the rest of time. And then

17:58.380 --> 18:03.580
they create a new table, and no one can read from it. When you explicitly run a grant or

18:03.580 --> 18:09.820
revoke statement, it only impacts the things that exist right then. So just keep that in

18:09.820 --> 18:16.820
mind. So here are the privileges, 15 and 16. I actually thought I went through and changed

18:16.820 --> 18:23.340
all of those to 16, so I must have missed that. These are all the things that we can

18:23.340 --> 18:31.020
set. Now the ones I have underlined, starting with Postgres 15, are the ones that are essentially

18:31.020 --> 18:37.060
provided by default unless you modify anything. So every single user, again, super user side,

18:37.060 --> 18:45.100
and unless you've modified something, every role will get these four privileges on any

18:45.100 --> 18:52.660
database on the public schema. And the reason is there's this role called public. It's basically

18:52.660 --> 18:58.500
hard coded in a Postgres. You can't remove it. You can't get rid of it. And every role

18:58.500 --> 19:04.500
gets is granted membership into public. And again, most roles inherit. And so when you

19:04.500 --> 19:09.900
have that kind of role, you automatically get the connect privilege, right? So I've passed

19:09.900 --> 19:15.260
HBA, I provided an actual password that works, but if I don't have the connect privilege,

19:15.260 --> 19:20.980
I can't connect. So I can turn off connect to a database. I might have multiple databases,

19:20.980 --> 19:26.180
but this user does not get to connect to that one. That's really the usage. Again, I can

19:26.180 --> 19:30.740
connect, but if I can't use it, I can't do anything. You can actually connect to a Postgres

19:30.740 --> 19:35.900
database, get a valid connection, you're connected, and then you want to do anything, select whatever

19:35.900 --> 19:40.260
it might be, and you're just denied. And that's where usage comes in. Temporary tables and

19:40.260 --> 19:45.620
then executing things like store procedures and so forth and functions. Now, if you're

19:45.620 --> 19:51.940
using Postgres 14 or below on the public schema, you also have the create privilege through

19:51.940 --> 19:58.940
public on the public schema. And so that we realized gets to be some of a security hole.

19:58.940 --> 20:04.180
All right. And the reason is, in this case, I don't want to get into too much, but if

20:04.180 --> 20:08.860
you create something on any schema, so on the public role, that's where most people were

20:08.860 --> 20:13.260
creating things. A lot of us still don't use schemas in our applications. We just create

20:13.300 --> 20:18.780
tables by default. They go into the public schema. And so if somebody created a store

20:18.780 --> 20:25.780
procedure and they weren't super user, there are ways, actually not that difficult, if

20:26.260 --> 20:32.780
you know what you're doing, to create a function, somehow get someone with elevated privileges

20:32.780 --> 20:39.780
to run it and you can get super user. Another talk that I like to do. So we realized that.

20:39.780 --> 20:44.540
So basically starting the 15 and above create is not provided through public to the public

20:44.540 --> 20:50.540
schema. So you have to be explicitly granted. Every role has to be explicitly granted create.

20:50.540 --> 20:54.300
And then when you create your own schemas, you have to grant create to other roles if

20:54.300 --> 20:58.780
you want them to be able to do it. So recognize that change. Now, the one caveat here is, if

20:58.780 --> 21:05.340
you've been upgrading 12, 13, 14, 15, when you upgrade to 15, it doesn't take away the

21:05.340 --> 21:10.820
privilege from roles that already existed. Again, all of this is point in time, right?

21:10.820 --> 21:15.660
I applied the role at some of the privilege at some point in the past. I have to explicitly

21:15.660 --> 21:21.700
do something to modify that. And so security best practice. I've been talking about public

21:21.700 --> 21:27.540
a little bit. And again, this is more what has come around. It's got a lot of attention

21:27.540 --> 21:32.940
over the last few years, which is there's just this potential for bad things to happen

21:32.940 --> 21:41.020
on the public schema. And so most folks, most advice you'll get is to revoke all privileges

21:41.020 --> 21:46.460
from the public schema from the public role. Again, you can't get rid of the role. So you

21:46.460 --> 21:51.260
want to remove all privileges from public. And then per database, you probably want to

21:51.260 --> 21:56.540
remove privileges specific, you know, to the database itself. And what that would mean

21:56.540 --> 22:01.740
is, again, that comes to the connect, right? So you have to be able to connect to a database.

22:01.740 --> 22:07.420
If I don't revoke all privileges, any user, they're part of public, public has connect,

22:07.420 --> 22:10.820
then they can connect to that database. And so that allows you, this just means that then

22:10.820 --> 22:16.580
you have to be more explicit with every database, every schema and so forth. All right, you'll

22:16.580 --> 22:22.140
find this a number of blog posts, people talking about security, and especially two years ago

22:22.140 --> 22:28.540
with Postgres 15, there was a lot of news around this. Now granting privileges is hopefully

22:28.540 --> 22:33.260
pretty straightforward. The docs pages on grant and revoke are really good. They go

22:33.260 --> 22:39.860
into a lot of detail on all the privileges, what it means when I say I grant someone select.

22:39.860 --> 22:44.940
What does that mean? When I grant someone delete, what does that mean? What is it just

22:44.940 --> 22:49.740
delete rows or does it allow me to do something else? And so there's a lot of good documentation,

22:49.740 --> 22:56.940
but you grant something to an object, to a role, and then you can name a, you shouldn't,

22:56.940 --> 23:01.420
you name a schema, whether it's public, whether it's all, could be all schemas or specific

23:01.420 --> 23:08.060
schema. So in this case, we're simply granting create. So now this admin can create something.

23:08.060 --> 23:12.860
They can use and create in the schema that I've created, but then we're going to create

23:12.860 --> 23:19.220
a junior role, and the junior dev role, and we're granting a select and certain update,

23:19.220 --> 23:24.980
but they can't delete, they can't create in the database. In theory, they've been given

23:25.500 --> 23:29.140
usage on the database. I missed that out here. I should have had that in that line.

23:29.140 --> 23:35.340
Now there are other ways to do this. So again, just remember, explicit grants only affect

23:35.340 --> 23:40.780
current database objects. So I'm going to do a quick demo at the end of this to show

23:40.780 --> 23:47.580
you all of this very quickly and hopefully, you know, tie all the pieces together. Again,

23:47.580 --> 23:53.340
these pages are really good. And so it just answers all the questions, every privilege.

23:53.340 --> 23:58.020
And if you don't know, if you go to the Postgres documentation, there's a search box up top,

23:58.020 --> 24:03.700
and it works pretty well. And so you can just simply say grant, grant, privilege, grant,

24:03.700 --> 24:10.700
revoke, and it will come right up. All right. So we have the cluster. We understand we have

24:10.700 --> 24:15.780
roles and objects and databases on the cluster. There are some attributes and privileges given

24:15.780 --> 24:21.580
to a role at the cluster level. Then we get to the databases themselves. Now we have privileges,

24:21.620 --> 24:27.220
which we can grant two roles for all the various types of things within the database. But if

24:27.220 --> 24:31.740
you notice on this slide, if I had to do this for every user, this gets really frustrating

24:31.740 --> 24:36.940
and complex. Now quite honestly, this is probably why a lot of people, myself included, is just

24:36.940 --> 24:41.540
easier to use SuperUser. Just log in with that one user, do everything you need to do,

24:41.540 --> 24:47.980
because I trust myself. I'm not going to do anything bad. But the better way forward is

24:48.020 --> 24:52.940
to deal with inheritance. So you may have noticed, you may have not, that earlier on, this is one

24:52.940 --> 24:57.780
of those attributes, one of the privileges, I'm sorry, the attributes to a user. Do you inherit

24:57.780 --> 25:06.500
privileges or not? Now it doesn't matter if you aren't granted membership into some other role

25:06.500 --> 25:12.100
that would apply privileges. You could receive privileges from. So roles can be granted membership

25:12.260 --> 25:18.900
into other roles. That's why there really is no group and user difference here. It's just whether

25:18.900 --> 25:23.740
they, you know, again, we say whether they can log in or not log in. But if you create the roles

25:23.740 --> 25:30.620
that cannot log in, treat them as groups, you can apply all of your privileges to those groups in

25:30.620 --> 25:39.540
ways that make sense and then grant ownership into those roles from other, for other roles. So

25:39.580 --> 25:44.260
this is really the preferred method for managing it. What you would expect in a, you know, whether

25:44.260 --> 25:48.940
it's Linux, Windows, whatever it is, you have groups, you have users, users can be part of

25:48.940 --> 25:55.500
multiple groups. It's exactly what we're talking about here. But you have to go to some effort. So

25:55.500 --> 26:02.100
again, just a really quick example we hate, we're creating a senior dev user role, they can inherit,

26:02.100 --> 26:08.740
report user, they can inherit. And then we create two groups because they can't log in. All right.

26:09.580 --> 26:14.980
And so we just, we explicitly say no inherit. Now, you don't have to do that for groups, but it can

26:14.980 --> 26:20.260
get a little bit messy trying to figure out exactly where everything's coming from. So a lot of

26:20.820 --> 26:26.860
wisdom is your groups, let them be separate and apply the groups you need to other, to your actual

26:26.860 --> 26:33.620
user roles. And then I've said, hey, grant, insert, update, delete on all tables to the read only

26:33.620 --> 26:38.060
privilege. Now it's, I should have to the admin privilege. I was like, wait, that's not read only

26:38.860 --> 26:46.100
to the admin privilege, right? So right here. And then we have grant select, all tables to this

26:46.100 --> 26:51.500
read only privilege. Right. But those are my two groups. They can't log in. So how's this going

26:51.500 --> 27:00.540
to help me? Well, you can then grant membership into those other groups. So I say grant admin and

27:00.580 --> 27:07.380
read only priv to the senior dev and then only grant read only priv to the junior dev. And so

27:07.380 --> 27:15.460
essentially what that looks like is this. Those two roles both have read only privilege. But the

27:15.460 --> 27:21.380
senior dev has now also has other privilege. So you kind of keep building on top of that. So it's a

27:21.380 --> 27:27.180
great way to be able to apply the kinds of privileges you need across many roles. And then if you

27:27.220 --> 27:32.980
need to update something, you update one object, the group role, and it will be applied to all of the

27:32.980 --> 27:39.260
users that are inheriting from that user. Any questions on inherit? What that looks like? Yeah.

27:39.260 --> 28:01.460
Okay, the question is, if the super user creates roles, do those roles get the same privileges as

28:01.460 --> 28:17.180
super user? No. Okay, misunderstood. If you create a role and you grant it super user, they're super

28:17.180 --> 28:23.020
user, just like what's exactly same as what you would expect Postgres to do. Yep. It's a flag in the

28:23.020 --> 28:28.340
database. And if it doesn't matter what the name of the role is, if it is a super user, you're a

28:28.380 --> 28:36.460
super user. Have fun. Don't destroy. Okay. But maybe that is the fun, right? No, I'm kidding. Test your

28:36.460 --> 28:42.300
backups. Okay. So great. We have, you know, just trying to build down through this, we have our

28:42.460 --> 28:47.420
cluster, we've created roles, we understand what those privileges look like. We understand that there

28:47.420 --> 28:52.580
is, you know, this, this level of the roles and the privileges they get, but then we get the object

28:52.580 --> 28:58.300
ownership. And honestly, this is when I decided I started to need to dig into roles in Postgres.

28:58.340 --> 29:03.060
Because I was using super user for everything I didn't care, right? And then I actually started to manage an

29:03.060 --> 29:08.660
application with multiple users, a lot of devs in a, you know, one environment, a couple different users for

29:08.660 --> 29:14.140
various applications that were connecting from another environment. And all of a sudden I was like, what is

29:14.140 --> 29:18.820
going on? Because this is not what I thought was going to happen. And that's when I had to really start to dig

29:18.820 --> 29:23.660
in. So that's why all of the other stuff leading up to this is important for me as an application

29:23.660 --> 29:31.300
developer or running or helping to teams of application developers effectively use Postgres. So object

29:31.300 --> 29:41.020
ownership, whoever creates the object, whatever role you are currently logged in as, or that session is

29:41.020 --> 29:49.620
currently acting as, when that object gets created, they are the user. Table, function, view, you know, on and

29:49.740 --> 29:56.260
on. Even a database. When I create a database, if I had privilege to create the database, that database is now

29:56.260 --> 30:01.980
owned by me, not by Postgres, not by some other user. So it's really, that's just the first thing you got to

30:01.980 --> 30:10.380
understand. Now, the owner of the object is essentially like a super user of the object. Right? They're not a

30:10.380 --> 30:18.020
super user, but I own the object. I'm the only one that can actually do a lot of things on that object, unless

30:18.060 --> 30:24.780
I've granted other privilege. And there are some things only I can do. Or a super user. So I like to think of this

30:24.780 --> 30:31.820
as principle of least privilege. When I create something, the way that Postgres works, it says, we don't want anyone

30:31.820 --> 30:39.500
to do anything. You have to tell me Postgres, the cluster, what everyone else should be able to do to this object.

30:39.780 --> 30:45.500
I don't care if they're part of some group that has access to this thing, and you're both part of the same group. I

30:45.500 --> 30:53.740
don't care. They have to be given explicit privilege in some way. So that's kind of the first place that you start to get

30:53.740 --> 30:59.060
confused. If you happen to have multiple devs, and you're on a test database, and you're all part of the same group,

30:59.260 --> 31:05.020
and all of a sudden dev one creates something, and dev two says, oh, let me go just see what you did, like access denied,

31:05.020 --> 31:10.540
like what? What are the test server? What are you talking about? And this is what it gets down to is object ownership and

31:10.540 --> 31:20.740
understanding of that. Now, again, roles, there are some roles that can actually, you know, grant, yeah, default, sorry, default

31:20.740 --> 31:26.620
privileges. So we're going to talk about default privileges in just a minute. And that's where kind of the power for managing

31:26.620 --> 31:35.980
application and creation of objects and management of objects can be really helpful. So this is what I showed earlier. And hopefully

31:35.980 --> 31:41.980
you can see, and I actually forgot to make this point early on, and I apologize for that. The one unique thing for Postgres

31:41.980 --> 31:50.820
with me coming from a different database is that although the roles are created at the cluster level, I cannot connect to the

31:50.820 --> 32:00.020
Postgres cluster, unless I can connect to a database, every connection is to a database. And so I might have the right password

32:00.020 --> 32:06.260
might have the right host might have the right role. But if I don't have access, I don't have literal connect privilege to any

32:06.260 --> 32:15.060
database, I can't get in. So there's this thing that like I almost said, symbiotic earlier, like roles and objects are

32:15.060 --> 32:22.940
separate. But what's a little bit unique about Postgres, again, for me is you they need to exist together. That's why when

32:22.940 --> 32:31.340
you initiate a Postgres cluster, you get one database and one super user because that super user can now connect to the database

32:31.340 --> 32:38.340
that's named after itself, blah, blah, blah. So there's this new one. Now the problem, though, is if all of my users are

32:38.340 --> 32:46.100
creating all these different objects down here, right, they're all owned by different people. And as I said earlier, the owner of

32:46.100 --> 32:54.060
the object is is like the super user of that object. And so then you start to get into conflict of who can use what and what can

32:54.060 --> 32:59.860
you do in that object. So what I've learned over the years, now I work for a company called redgate, you may have heard of the

32:59.860 --> 33:08.660
Flyway application, it's migration schema based migration, redgate owns that product and manages the open source portion of that. And we

33:08.660 --> 33:15.380
see lots of folks that are moving from other databases to Postgres. Yay, we're super excited about that. But again,

33:15.380 --> 33:23.260
understanding this ownership principle is so important. So they will, you know, go and create, they don't even realize what owner they're

33:23.260 --> 33:31.140
connecting and running these migration scripts as. And if the migration scripts don't explicitly modify ownership, all of a sudden they

33:31.140 --> 33:37.340
have objects in the database that are run by multiple people because different people were running these migration scripts. And then you

33:37.340 --> 33:45.140
get into a big issue because now someone wants to modify this table, we've turned off login for super user. And only that user can

33:45.140 --> 33:54.420
modify the table. And you just get into this like roundabout, right? So what we tend, what I tend to like to tell people is particularly as

33:54.420 --> 34:00.660
you get up to your production database. Now with Flyway, what we would say when we help folks do this, we go through, you know, dev, we have a

34:00.660 --> 34:10.300
staging server. And often what we'll say, and I'm going to show you default privileges in a minute, is create run all of your scripts. Now again,

34:10.300 --> 34:20.260
if you do a dump, you'll see that after every object in a dump file, if you do the script, it postgres explicitly changes the owner. Now that's

34:20.260 --> 34:28.620
also where you get those error messages, if you don't have that owner on your machine. But the object was created, whoever creates the object, it

34:28.620 --> 34:36.620
doesn't matter if it's for a backup script. If you ran a backup script from your server, and those objects were owned by Joe, and you go run it on the

34:36.620 --> 34:45.380
other server connected as Mary, all of those objects would be connected, created as Mary, if you didn't explicitly change the ownership now. So that's what it's like this

34:45.380 --> 34:57.060
nuance, right? So we tend to recommend when you are actually going to production or even your staging server, you run those scripts as one group role, and you make sure

34:57.060 --> 35:05.900
that group, you know, doesn't have things like select and delete, whatever, they are just allowed to create the objects. But you have other roles that are

35:05.900 --> 35:16.540
granting permission into those objects then, in a way that is accessible. And the beauty of doing that is you can still switch to that role, you'll see that in the demo I'll do in just a

35:16.540 --> 35:25.860
minute. So if you needed to modify something about that, you can still set into that role, and then you know exactly which role you need to get to do the

35:25.860 --> 35:35.860
modification. So this is a nuance here, and the value to this comes with default privileges. So as you'll see in the demo, again, I create an object like

35:35.860 --> 35:51.220
table. Only I can modify that table. I don't, unless you're a super user, I don't care if we both are part of the same group roles, only I can modify that table unless we set it to a role that

35:51.220 --> 35:59.220
both of us are a part of, and then both of us can be, can switch into. So this is just a really simple example. And I'll show you another one in the demo.

36:00.180 --> 36:09.980
Default privileges are way to say when I, as this user, so I'm connected, you guys are, is everything okay? Okay, they're staring at me like I'm doing something wrong.

36:11.740 --> 36:25.380
The, so I create default privileges, I'm altering them, and I'm saying grant select on all tables to the role public. Now it could be any role, right, but I'm saying the public role. Now, anytime I create a table, if I had gone ahead of time and removed all the

36:25.380 --> 36:48.860
privileges, whatever, anytime I, as whoever, whatever role I'm running that command as, every time I create a table from this point forward, everyone will be able to select because everyone's a member of public. Right, does that make sense? If I didn't do this, every time I create an object, I then have to explicitly grant the roles. That gets really tiresome.

36:49.860 --> 37:07.860
Now the only nuance here, and I have been dealing with this, so again, Redgate has been doing a lot with Flyway and Postgres, and I've been trying to help them understand that only exists for, again, when I create the object. If I later go and modify this default privilege, nothing changes about the objects I created earlier.

37:07.860 --> 37:27.860
You still have to go back and grant whatever you just modified to all of those other objects. Right, but it's super helpful. So from a migration perspective to just ease the management, what we tend to do is say, hey, make a group role that, you know, certain people are part of us, they can set to that role and modify the objects if they need to.

37:28.860 --> 37:36.860
But then you know the owner of all the objects, and it's not necessarily the Postgres user. That's what most people end up doing on the cloud host environment or something like that.

37:38.860 --> 37:39.860
Any questions, yeah?

37:40.860 --> 37:51.860
Just about syntax, so first we have actually, who has privileges from equal sign and what privileges, and who has given these privileges, correct?

37:51.860 --> 38:05.860
Exactly. So this says that the user Postgres, the owner of this specific default privilege, anytime the Postgres creates a table where it just says equal, that's public, that's all.

38:06.860 --> 38:15.860
And so they have read access. The question was, I apologize, you know, basically what's being shown here. So when I create the default privilege, you know, the equal with nothing in front of it just means public.

38:16.860 --> 38:25.860
And then you can name multiple roles. In this case it's just the owner obviously has all the privilege, and they always have all the privilege, right? Yeah.

38:26.860 --> 38:33.860
So do you think it's possible to have wild cards after like, you know, like, any database is structured if the user will have access to these types of privilege?

38:34.860 --> 38:43.860
That's a great, so the question is, is it possible to have wild cards? And I think you're saying, like, if I create a default privilege, and I don't know if I said this earlier, and I apologize, this is per database, right?

38:43.860 --> 39:04.860
So if I create the default in the database, sorry, I don't think there is. I mean, again, you can create things like, in this case I said on tables, you can do things like on tables, on views, so you get a lot of the objects.

39:05.860 --> 39:09.860
But I don't believe there's a way to say like a wild card across multiple things.

39:09.860 --> 39:19.860
So a great question, the question is, could you do this in the template? Yeah, you could. You could create your roles in the template database.

39:20.860 --> 39:29.860
You could, for the roles that you want to use, set your default privileges, and if that all works out and you have all the roles and owners, every database you create is going to get that stuff.

39:30.860 --> 39:39.860
All right, I just really want to quickly run this demo, it's about five minutes, and so just so you can see it, because sometimes for me at least, that's just helped me see what's happening, right?

39:40.860 --> 39:46.860
It's one thing to see slides, but just really quickly, so providing object access, because this is, again, this is where I see so many of the actual problems happen.

39:47.860 --> 39:50.860
When you don't give someone a super user, all of a sudden things just go haywire.

39:51.860 --> 39:59.860
And so you can either explicitly grant access every time to every kind of object and go for it. A lot of work, do what you want to do.

40:00.860 --> 40:11.860
You can alter default privileges, and now any time something is created in that database by that role, including something like migration scripts, they will inherit these privileges for whatever roles you assigned.

40:12.860 --> 40:29.860
You can then set role in the app, I'm going to show you that, so in Postgres you can say set role, so I could connect to the database, I could set, change my role for that session to the owner of the table so I can do something with it and modify the privileges and so forth.

40:30.860 --> 40:34.860
And then in Postgres 14 and above, we're starting to get some of these other attributes to do more.

40:35.860 --> 40:44.860
I talked earlier about this, this is the object ownership thing in security. Again, there's a number of talks on this, I think I have an old one maybe linked on my blog somewhere.

40:45.860 --> 40:47.860
So let's go ahead and quickly do the demo.

40:48.860 --> 40:50.860
So I have an empty database, this is going to be really quick.

40:51.860 --> 40:58.860
So I'm using dbeaver, I just like it because of the color coding stuff, just a little bit easier for you to see and show.

40:59.860 --> 41:05.860
So the current role I'm currently connected as Postgres, so this session I initiated as a Postgres super user.

41:06.860 --> 41:16.860
And I'm going to create a new schema, and I still have to do all the things I want to do, so I'm going to create a developer role, now it says no login, so what kind of role is this?

41:17.860 --> 41:19.860
We consider this a group role.

41:20.860 --> 41:31.860
And so the set role, if you say none, that will change the ownership of the current session back to whoever initiated that session.

41:32.860 --> 41:36.860
So as Postgres, I just had this here because I think earlier I had said to something else.

41:37.860 --> 41:46.860
And so for that role, we're going to do this, we're going to grant select, insert, update, delete on all tables in the demo app schema to this group role called developer.

41:46.860 --> 41:50.860
Now it can't login, so it can't really do anything, right?

41:51.860 --> 41:54.860
And then we're going to say grant create and usage to this role.

41:56.860 --> 42:01.860
And then we're going to create our developer users, it doesn't really matter, you know, anything here doesn't matter.

42:02.860 --> 42:04.860
Oops, I am not hitting, am I hitting the right keys?

42:05.860 --> 42:06.860
Oh, my apologies.

42:07.860 --> 42:10.860
So dbeaver, I can just say control, enter, and it will run the commands.

42:10.860 --> 42:13.860
So I've created two users, and now the magic.

42:15.860 --> 42:21.860
I can grant those users access privilege into that role, that group.

42:22.860 --> 42:26.860
Now at this moment, now that they've been given granted access, what does that mean about their privilege?

42:27.860 --> 42:29.860
I have not granted any privileges to those users yet.

42:30.860 --> 42:31.860
But what do they now have?

42:33.860 --> 42:36.860
Select, insert, update, delete on all tables, and they have create and usage, right?

42:37.860 --> 42:39.860
So now without doing anything else, they can use that schema.

42:41.860 --> 42:46.860
And we can see if I, so now I can set role.

42:47.860 --> 42:51.860
So this, I could have multiple tabs, I could have connected as dev one on one tab and dev two on another tab.

42:52.860 --> 43:00.860
In Postgres, when you say set role to a role, it's basically like switching user, there's one or two things that don't happen at that moment.

43:01.860 --> 43:06.860
One is, remember earlier I said you alter, you can alter some settings, those things don't get run when you do set role.

43:06.860 --> 43:16.860
But otherwise, if I'm allowed, I'm running a super user so I can do this, if I have membership in that role, I can set to it and act as that role for a little bit.

43:17.860 --> 43:18.860
And then I can go back.

43:19.860 --> 43:26.860
So I'm going to set to dev one, so this is as if I had connected as dev one to the database now, and I'm going to create a table in that new schema, because I can.

43:27.860 --> 43:31.860
Again, we haven't granted anything to that user explicitly except membership in this group.

43:32.860 --> 43:36.860
And now we'll see, oh, I need to create the table, don't I?

43:37.860 --> 43:40.860
What's that?

43:41.860 --> 43:44.860
I didn't, what?

43:45.860 --> 43:50.860
So here, I'll just drop this because that's going to miss everything.

44:02.860 --> 44:03.860
Yes.

44:08.860 --> 44:09.860
Ah.

44:10.860 --> 44:11.860
Alright.

44:13.860 --> 44:14.860
Come on.

44:15.860 --> 44:16.860
Yes.

44:17.860 --> 44:18.860
Does not exist.

44:18.860 --> 44:25.860
Okay, maybe I, well, if this doesn't go, then we'll just move on and I'll show you what I can.

44:29.860 --> 44:30.860
Alright, there we go.

44:30.860 --> 44:36.860
So now I can see that, oh my goodness, my hands are not hitting the right keys here.

44:36.860 --> 44:39.860
So I have this table and the owner is Postgres.

44:40.860 --> 44:47.860
So now I set my role to dev two and I try and alter that table.

44:48.860 --> 44:49.860
Of course I can't.

44:49.860 --> 44:51.860
I don't have permission to do that because Postgres created it.

44:51.860 --> 44:53.860
They didn't give me permission.

44:53.860 --> 44:56.860
So I'm going to go ahead and drop that table.

44:56.860 --> 45:00.860
I could also just alter the, I could just alter the owner.

45:00.860 --> 45:03.860
What I'm going to do this time is I'm going to set the role to developer.

45:03.860 --> 45:09.860
This is the, no, again, it can't log in, but I can set the role to, I have access to developer or I'm super user.

45:09.860 --> 45:11.860
So I'm now, now I'm developer.

45:11.860 --> 45:17.860
I create that same table and now we can see that it's owned by developer.

45:17.860 --> 45:19.860
Okay, what does that really do for us?

45:19.860 --> 45:24.860
Well, now I can go back to dev two and I can try and alter that table.

45:26.860 --> 45:28.860
And of course this doesn't work.

45:28.860 --> 45:29.860
Maybe I didn't.

45:29.860 --> 45:33.860
What's that?

45:33.860 --> 45:38.860
Oh, I didn't.

45:38.860 --> 45:39.860
Okay.

45:39.860 --> 45:43.860
Let me just talk you through this rather than, man, I literally ran through this five times today.

45:43.860 --> 45:44.860
My apologies.

45:45.860 --> 45:55.860
The big point here is as we go down through, as long as the user is a member of that group and that group created the objects,

45:55.860 --> 45:59.860
I can do the privileges I'm allowed to do on that object then.

45:59.860 --> 46:01.860
All right, so it's a way to let me do some stuff.

46:01.860 --> 46:08.860
Now, some things I may not be able to do, I might have to switch into that role to do some alter things like that, right?

46:08.860 --> 46:10.860
If I want to alter the object itself.

46:11.860 --> 46:18.860
And so, yeah, I see, man, that's really crazy.

46:18.860 --> 46:24.860
Anyway, the main, hate when a demo fails, right?

46:24.860 --> 46:27.860
The main point is there's like two recordings of this.

46:27.860 --> 46:29.860
You can see this run through if you want.

46:29.860 --> 46:33.860
It's just to say again, you have to grant specific privileges.

46:33.860 --> 46:38.860
I was going to come down here to the default privileges and show again that once you set something like the default privilege,

46:38.860 --> 46:48.860
as long as you create those objects with that role, they will get whatever privileges you said to the roles that you provided.

46:48.860 --> 46:49.860
And so, it's just a way.

46:49.860 --> 46:51.860
So in this case, it was just a read on the report user.

46:51.860 --> 46:54.860
I want them to be able to read from every table.

46:54.860 --> 46:59.860
If I'm not using Postgres 14 and above, I would have to make sure that they have select on all the tables.

46:59.860 --> 47:04.860
Setting a default privilege is one of the easiest ways to do that.

47:04.860 --> 47:05.860
All right.

47:05.860 --> 47:08.860
So last thing, go back.

47:08.860 --> 47:10.860
Demo fail.

47:10.860 --> 47:12.860
We'll have to get that end of the time.

47:12.860 --> 47:17.860
Just to really quickly bring up predefined roles.

47:17.860 --> 47:21.860
So predefined roles have existed for a while and Postgres 14 and above.

47:21.860 --> 47:26.860
There's a lot that's been done to try and do things, provide roles that for management purposes.

47:26.860 --> 47:28.860
So you don't have to be a super user.

47:28.860 --> 47:30.860
I gave the example earlier of checkpoint, right?

47:30.860 --> 47:32.860
So now you can give someone this checkpoint.

47:32.860 --> 47:34.860
We call them predefined roles.

47:34.860 --> 47:40.860
You can grant them membership into that role and then that user could run a checkpoint.

47:40.860 --> 47:41.860
Things like read all data.

47:41.860 --> 47:42.860
This has been a problem for a long time.

47:42.860 --> 47:49.860
So starting with Postgres 14, I think it was, we had the read all tables and the write all tables.

47:49.860 --> 47:54.860
So if you just wanted someone to be able to read all tables, in this case, in all databases,

47:54.860 --> 48:04.860
because it's a role there, you could now create this, you know, grant them access into this.

48:04.860 --> 48:07.860
Here are the current predefined roles.

48:07.860 --> 48:10.860
This is updated to 16.

48:10.860 --> 48:16.860
I believe the one that's different here, I knew earlier and right now I can't find it.

48:16.860 --> 48:18.860
But this is where you can do things like read servers.

48:18.860 --> 48:24.860
So a lot of monitoring programs now require you to be able to read the log or to read files from disk.

48:24.860 --> 48:31.860
Well, if you don't want super user to connect, you could grant your monitoring role something like read server files

48:31.860 --> 48:35.860
so that they can still read the files without being a super user.

48:35.860 --> 48:36.860
All right?

48:36.860 --> 48:37.860
That's the end of it.

48:37.860 --> 48:38.860
I really apologize for the demo.

48:38.860 --> 48:40.860
I love giving that demo and I don't know what I did.

48:40.860 --> 48:43.860
But anyway, if you have questions, I'll take one and then we're going to have to be done.

48:43.860 --> 48:44.860
Yeah.

48:44.860 --> 48:57.860
Thank you.

48:57.860 --> 48:58.860
Great.

48:58.860 --> 48:59.860
Yeah.

48:59.860 --> 49:00.860
Great question.

49:00.860 --> 49:06.860
For those who are still here, the question is there like a log cap of transitions of, I guess the mic is off.

49:06.860 --> 49:10.860
There's, is there a log cap when you grant things off and on, right?

49:10.860 --> 49:12.860
I had this default privilege and then I modified it.

49:12.860 --> 49:13.860
There isn't.

49:13.860 --> 49:15.860
You would have to do that in some way.

49:15.860 --> 49:17.860
Maybe through scripture if you do.

