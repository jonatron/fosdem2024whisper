WEBVTT

00:00.000 --> 00:10.000
I'm going to talk about big adventure of little professor and it's four bit handheld

00:10.000 --> 00:13.480
friends running TMS 1000.

00:13.480 --> 00:14.480
Thank you K-Stuff.

00:14.480 --> 00:15.480
Okay.

00:15.480 --> 00:16.480
Hello everybody.

00:16.480 --> 00:22.000
I need to recover a little bit.

00:22.000 --> 00:23.920
So let me introduce my talk.

00:23.920 --> 00:28.800
I don't know if you know what little professor is from Texas Instruments.

00:28.800 --> 00:32.400
I can see some heads moving.

00:32.400 --> 00:36.800
So who has already seen this kind of device?

00:36.800 --> 00:39.800
That's okay.

00:39.800 --> 00:41.800
Who has already seen that device?

00:41.800 --> 00:42.800
Okay.

00:42.800 --> 00:45.280
Who had one when he was a kid?

00:45.280 --> 00:46.280
Okay.

00:46.280 --> 00:49.920
Who has already played with one?

00:49.920 --> 00:50.920
Okay.

00:50.920 --> 00:51.920
Thank you.

00:51.920 --> 00:58.560
So this is the starting point actually of my talk because, well, I'm from a computer

00:58.560 --> 00:59.560
museum.

00:59.560 --> 01:02.640
I'm also a computer scientist and retro guy.

01:02.640 --> 01:09.520
And in the museum, actually, we do a lot of things but we collect artifacts and we also

01:09.520 --> 01:14.440
try to explain them and to preserve them.

01:14.440 --> 01:23.800
And one year ago, we got one of those and it reminded me of my childhood and what was

01:23.800 --> 01:26.320
in this device.

01:27.320 --> 01:28.320
Okay.

01:28.320 --> 01:32.600
So if you want to play, I can circulate.

01:32.600 --> 01:36.240
I want them back at the end of my talk, of course.

01:36.240 --> 01:40.000
So you can try it.

01:40.000 --> 01:42.520
And you see, I have a bigger version here.

01:42.520 --> 01:46.120
We'll talk about it at the end of my talk.

01:46.120 --> 01:55.800
So the idea was to, well, first to look at that device.

01:55.800 --> 01:58.280
So you can see here, little video.

01:58.280 --> 01:59.280
So it's very simple.

01:59.280 --> 02:02.320
You can choose a level, one, two, three, four, from simple to difficult.

02:02.320 --> 02:04.760
Then you choose an operation.

02:04.760 --> 02:13.560
And then you start the device.

02:13.560 --> 02:15.160
So the device is not a calculator.

02:15.160 --> 02:16.160
It's a reverse calculator.

02:16.160 --> 02:22.880
It will generate problems and train you to do mathematics to learn different operations,

02:22.880 --> 02:26.160
typically for charts between five and 12.

02:26.160 --> 02:31.880
And so you can see here, it was one of the first version, a very simple subtraction.

02:31.880 --> 02:32.880
Oh, sorry.

02:32.880 --> 02:38.560
And if you are wrong, of course, it will display error, EEE.

02:38.560 --> 02:43.200
And you have three, you can have three tentatives.

02:43.200 --> 02:45.960
And then it gives you the answer.

02:45.960 --> 02:52.760
And you have 10 of those questions and then you have a global score.

02:53.640 --> 02:55.800
So this was very successful.

02:55.800 --> 03:02.240
And it appeared in the 70s, about 76, for the first version.

03:02.240 --> 03:05.040
And it was very, very successful.

03:05.040 --> 03:06.880
And there were a lot of variants after.

03:06.880 --> 03:09.960
So you can see on the side there were other devices.

03:09.960 --> 03:14.800
Actually, the little professor, the most iconic, one and most, we were both one.

03:14.800 --> 03:18.040
And also the one that is still actually available.

03:18.040 --> 03:26.680
There is still a solar version that is sold online.

03:26.680 --> 03:30.280
And so, well, it's what's really interesting.

03:30.280 --> 03:33.840
So our first project was to build this, actually.

03:33.840 --> 03:38.160
We wanted the kids to experience that and to play with it in the museum.

03:38.160 --> 03:46.320
So the first thing we decided to do is to build a big version, a large version of it.

03:46.320 --> 03:52.240
So it's still a prototype, so we do print it.

03:52.240 --> 03:58.520
And before, well, of course, that prototype is built with current technology.

03:58.520 --> 04:02.240
So we use Arduino, a LED display.

04:02.240 --> 04:06.400
And we build our own keyboard.

04:06.400 --> 04:12.280
Keyboard, so the keyboard, actually, you have to think about how to scan the key.

04:12.280 --> 04:13.400
So it's interesting.

04:13.400 --> 04:20.360
And actually, after the second step, we decided to look inside the little professor and see,

04:20.360 --> 04:21.360
oh, it was built.

04:21.360 --> 04:27.320
Actually, inside, you will find also one microcontroller that was very interesting,

04:27.320 --> 04:30.080
because for reducing the cost, that was the design.

04:30.080 --> 04:40.720
That does everything, including the ROM, the clock, and of course, the processor.

04:40.720 --> 04:43.360
And the keyboard, actually, is the same principle.

04:43.360 --> 04:52.040
It's also based on the skyline, and it's directly managed by the microcontroller.

04:52.040 --> 04:56.320
So you can see that there are a lot of them, many variants, and also many different ones.

04:56.320 --> 05:04.880
So this guy there from Datamatt, a German guy who moved to the United States,

05:04.880 --> 05:08.320
so he has them all and has analyzed everything.

05:08.320 --> 05:17.280
So it was really a very deep source for this presentation.

05:17.280 --> 05:22.240
And so, well, what did I discover inside that little professor?

05:22.240 --> 05:28.880
Actually, you can see there, there is only one microcontroller, and that's about it.

05:28.880 --> 05:32.720
You have the display, and you have the keyboard.

05:32.720 --> 05:35.720
If you look at another one, this is the Merlin.

05:35.720 --> 05:41.520
Actually, you see the display is a bit different, it's based on the touch, but you also have

05:41.520 --> 05:45.760
the same kind of processor, but it's a variant.

05:45.760 --> 05:53.160
It's not the same, because actually, as you will see, it's a microcontroller, and it has

05:53.160 --> 06:04.760
the RAM, you can see on that side, on the left side here, and the RAM here on the right

06:04.760 --> 06:13.640
side, you see the program counter, the instruction PLA, where actually it's microcode, so you

06:13.640 --> 06:19.640
have the microcode there, the accumulator, and the resource clock, and the driver here

06:19.640 --> 06:22.440
for the display.

06:22.440 --> 06:26.680
So you have everything inside, and of course, the ROM is really burned inside.

06:26.680 --> 06:30.320
If you change the device, of course, you have to build another one.

06:30.320 --> 06:36.240
Another interesting point is that as the ROM is inside, you need to be able to access

06:36.240 --> 06:42.080
that ROM in order to get it for building an emulator.

06:42.080 --> 06:46.680
So I will come that later.

06:46.680 --> 06:55.280
But an interesting point for that, well, interesting point about architecture that will make this

06:55.280 --> 07:02.640
a bit more complex, is that it's not a von Neumann architecture, it's a Harvard architecture.

07:02.640 --> 07:10.840
So the Harvard architecture actually has a separate bus between for the ROM and the

07:10.840 --> 07:11.840
RAM.

07:11.840 --> 07:18.720
It's still used for microcontrollers, of course, not for CPUs, and it means that you don't

07:18.720 --> 07:27.720
have an easy way to read the ROM and extract it to send it to the outside world, because

07:27.720 --> 07:31.560
for von Neumann architecture, of course, the ROM and the RAM are in the same address

07:31.560 --> 07:38.160
space, so you can use an instruction to read a cell of RAM to read the ROM, actually.

07:38.160 --> 07:40.640
It's not possible with the Harvard architecture.

07:40.640 --> 07:45.080
So start to think, oh, can we read the ROM?

07:45.080 --> 07:47.200
The answer will come a bit later in the talk.

07:47.200 --> 07:51.400
And before that, I will zoom on the history.

07:51.400 --> 07:56.200
We are museum, so we try to understand how it evolved, actually.

07:56.200 --> 07:57.760
It's Texas Instruments.

07:57.760 --> 08:07.400
So I don't know if you know, but Texas Instruments, the guy there at the bottom, Mr. Kielby, is

08:07.400 --> 08:11.280
the guy who invented the integrated circuit.

08:11.280 --> 08:17.000
Well, actually, we found another guy from Intel about the same time, but that's the

08:17.000 --> 08:21.000
history as a remember for that.

08:21.000 --> 08:27.160
You got a Nobel prize for physics, yes, for that.

08:27.160 --> 08:33.280
And of course, it was the start of the development of the microchips.

08:33.280 --> 08:39.720
And the first one, of course, we all remember about the 4001 of Intel as the first CPU.

08:39.720 --> 08:46.120
But here, this talk is also to say, well, in microcontroller, there is the TMS-1000

08:46.120 --> 08:58.480
family, which is actually the first commercially used microcontroller that was really a success

08:58.480 --> 09:01.040
at large scale.

09:01.040 --> 09:09.760
So you can see in the early 70s, there were a first trial with another kind of processor

09:09.760 --> 09:16.160
instruction set that was used in the data map, very successful calculator and also the

09:16.160 --> 09:18.720
Sinclair scientific.

09:18.720 --> 09:21.120
And then, well, they learned from that.

09:21.120 --> 09:25.080
In that one, it was a very complex instruction set with 11 bits.

09:25.080 --> 09:28.920
And then they designed the TMS, and this one was really successful.

09:29.120 --> 09:35.800
Here on this side, you see only as application only the games and L games.

09:35.800 --> 09:42.040
But if you go for the calculators, you can see here about a selection of main calculators

09:42.040 --> 09:43.840
that were already based on the same.

09:43.840 --> 09:48.880
So using the same technology, actually, the main usage was calculators.

09:48.880 --> 09:54.920
And you can see the whole evolution across the 70s, but it was still heavily used in

09:54.920 --> 09:55.920
the 80s.

09:55.920 --> 10:02.080
And actually, all of this is based on 4-bit computing.

10:02.080 --> 10:09.440
So it was really amazing to say, oh, in the early 90s, there were still devices built

10:09.440 --> 10:11.400
in the 70s on that design.

10:11.400 --> 10:18.600
So it triggered that need to go into more details.

10:18.600 --> 10:21.680
I would speed.

10:21.680 --> 10:23.040
And yeah, just a quick comparison.

10:23.040 --> 10:33.560
Also, as I told you, the history remembers a lot, the Intel 4001, the TMS 1001 is also

10:33.560 --> 10:34.560
very, very interesting.

10:34.560 --> 10:37.480
You can see in unit sold, it's very different.

10:37.480 --> 10:45.440
And the price was also very, very different because it was designed for the mass market.

10:45.440 --> 10:51.360
And as everything was in there, also, the device itself, the calculator or the game

10:51.360 --> 10:53.160
was also very cheap to build.

10:53.160 --> 10:54.480
For the instructions, it's about the same.

10:54.480 --> 10:58.240
You can see there are a lot less registers.

10:58.240 --> 11:03.240
We will see how we manage that quickly.

11:03.240 --> 11:04.760
So about how to program that.

11:04.760 --> 11:06.080
So there is a huge manual.

11:06.080 --> 11:09.960
That was a very good source for this.

11:09.960 --> 11:14.000
Everything that is in my slide, actually, it's on the website in reference.

11:14.000 --> 11:21.080
You can find all the technical documentation and some examples.

11:21.080 --> 11:25.080
And what's in that CPU?

11:25.080 --> 11:29.600
You have, actually, a very simple register structure.

11:29.600 --> 11:31.840
You have only one accumulator.

11:31.840 --> 11:35.360
You have four bits.

11:35.360 --> 11:45.400
Y, why register that is used to point in the memory in the RAM?

11:45.400 --> 11:48.040
And the X pointer, that is only for two bytes long.

11:48.040 --> 11:51.760
As you can see, actually, the memory is managed like that.

11:51.760 --> 11:53.680
So it's managed like a grid.

11:53.680 --> 11:55.600
So you have four lines.

11:55.600 --> 12:04.440
So for the X pointer, you can address the rows.

12:04.440 --> 12:08.160
And for the Y, you have 16, so four bits.

12:08.160 --> 12:13.560
And then there you can address all the columns.

12:13.560 --> 12:18.120
And typically, that RAM was used as register.

12:18.120 --> 12:22.880
So you can see here, we use it to store it, to store four numbers.

12:22.880 --> 12:25.560
And you can do computation on them.

12:25.560 --> 12:34.760
If you want to compute, to make some differences, multiplication, division, you have, of course,

12:34.760 --> 12:38.560
to implement them using the simple operation you have.

12:38.560 --> 12:40.640
So you only have addition, subtraction.

12:40.640 --> 12:45.920
You have to implement yourself the other operations.

12:45.920 --> 12:48.080
For the rest, you can see program counter.

12:48.080 --> 12:51.560
You can see also there is a page address.

12:51.560 --> 12:52.760
It's a page memory.

12:52.760 --> 12:59.400
So the jumps are only 16, four bits.

12:59.400 --> 13:02.160
So it's 64 instructions.

13:02.160 --> 13:08.320
So if you need more, typically, you have one K ROM.

13:08.320 --> 13:11.400
And you have to manage the paging.

13:11.400 --> 13:12.680
So here are the instructions.

13:12.680 --> 13:16.600
So you can see only 43 instructions.

13:16.600 --> 13:20.200
As I told you, you have the instruction here for the arithmetic.

13:20.200 --> 13:23.160
You have some for the input output.

13:23.160 --> 13:28.920
You have, of course, addressing, reading and writing to the RAM, some increment decrement.

13:28.920 --> 13:32.760
But you don't have, for example, shift operation, logical operation.

13:32.760 --> 13:37.760
You don't have that on that device.

13:37.760 --> 13:40.360
And so it's not very regular.

13:40.360 --> 13:41.560
So you can see the instruction now.

13:41.560 --> 13:47.440
So difficult to memorize.

13:47.440 --> 13:49.160
This is just one for the addition.

13:49.160 --> 13:50.160
So it's well documented.

13:50.160 --> 13:53.840
So this typical documentation you can find in the documentation.

13:53.840 --> 14:00.080
Of course, if you have a carry, you also have a flag that is set and can manage to propagate

14:00.080 --> 14:06.680
and make a computation in the RAM, in the register in the RAM.

14:06.680 --> 14:09.080
Quick example, a BCD addition.

14:09.080 --> 14:12.600
Because of course, that's usually done in BCD on that device.

14:12.600 --> 14:15.760
Actually, you can do it using binary addition.

14:15.760 --> 14:22.240
But in some case, you just have to add six if it's larger than nine.

14:22.240 --> 14:28.400
So this is the algorithm you can see if you perform the addition in memory.

14:28.400 --> 14:33.400
Then if you are bigger than nine, actually, that's 2k.

14:33.400 --> 14:37.760
So if you are bigger than 15, you have already a carry on the binary operation.

14:37.760 --> 14:40.280
Then you know you are bigger than nine.

14:40.280 --> 14:43.720
And then you have an extra test to see if you are bigger than nine.

14:43.720 --> 14:45.220
And then you add six.

14:45.220 --> 14:52.640
And you can see here in this code here, you will test here if you are less than nine.

14:52.640 --> 14:57.440
And then you will have the correction and add it.

14:57.440 --> 14:58.440
And then you have a loop.

14:58.440 --> 15:03.080
Of course, you will perform the same on the whole register.

15:03.080 --> 15:08.240
If you see the example here, it's an addition.

15:08.240 --> 15:13.800
We try to add the two in the middle and sort the result in the F register.

15:13.800 --> 15:16.280
So X equal two.

15:16.280 --> 15:25.360
If you have the row nine, sorry, the column nine, with nine plus seven, you have 16.

15:25.360 --> 15:26.480
And then you have two at six.

15:26.480 --> 15:29.800
And you can see at the bottom, you have six that is stored.

15:29.800 --> 15:35.160
And of course, you have an extra carry that will be used for the next operation.

15:36.840 --> 15:39.520
Okay, now let's go inside.

15:39.520 --> 15:47.840
So for those who have thought about how to read the ROM,

15:47.840 --> 15:49.840
actually there are two solutions.

15:49.840 --> 15:53.120
The first one is that there is a test mode that is documented in the patent.

15:54.120 --> 15:58.000
And that is used for testing in factory.

15:58.000 --> 15:59.840
But it's difficult to use.

15:59.840 --> 16:02.000
There is no reported success.

16:02.000 --> 16:11.520
So the main way to do it actually is to decap the die and to read, visually read,

16:11.520 --> 16:13.520
so to capture the structure.

16:13.520 --> 16:17.000
So you can clearly see where there are transistors, where there are not.

16:17.000 --> 16:23.760
That means that there is one bit of ROM there to read.

16:23.760 --> 16:29.440
And then you can try to rearrange things because it's a bit difficult, but you have to think about,

16:29.440 --> 16:33.280
oh, because it's really mixed to rebuild the ROM.

16:33.280 --> 16:36.320
And this is the Python script that will do the job for you.

16:36.320 --> 16:40.280
And then you get the ROM at the bottom.

16:40.280 --> 16:43.920
And then you can typically emulate it.

16:43.920 --> 16:46.000
Or you can first also disassemble it.

16:46.000 --> 16:50.360
So this is a program to disassemble.

16:50.360 --> 16:53.720
And you can also emulate it.

16:53.720 --> 16:59.120
So for this, the grid tool to use, of course, is Mem.

16:59.120 --> 17:04.520
And if you start it in debug mode, you will have all the tooling.

17:04.520 --> 17:09.760
So you will have a disassembler that will show you the code and where you are.

17:09.760 --> 17:13.280
And you can see also on the left the ROM.

17:13.280 --> 17:27.200
So you have the four lines of 16 nimbals that will help you to understand what happens.

17:27.200 --> 17:30.560
And you can see here, it's the little professor that is running.

17:30.560 --> 17:33.240
You have that addition 39 plus 62.

17:33.240 --> 17:40.760
And you can see on the ROM here, you have the 39 here on that register.

17:40.760 --> 17:42.640
You have 62 on that register.

17:42.640 --> 17:45.000
And you have the sum here, 101.

17:45.000 --> 17:49.120
So it's the other way that has been computed.

17:49.120 --> 17:50.560
And it's used for checking.

17:50.560 --> 17:54.200
So if you type first one, it will accept.

17:54.200 --> 17:57.840
If you type something else, it will immediately display an error.

17:57.840 --> 18:02.200
And you can also see here in the code that we are in the code that is performing an addition,

18:02.200 --> 18:02.960
actually.

18:02.960 --> 18:07.200
So the addition, you can recognize the algorithm I showed you before,

18:07.200 --> 18:11.640
because it's the one with the test about nine.

18:11.640 --> 18:16.640
And then the correction to add six to make the BCD correction.

18:16.640 --> 18:21.440
OK, I will quickly close.

18:21.440 --> 18:24.600
So of course, ma'am, I will not go into detail.

18:24.600 --> 18:27.880
It has the support for the emulation.

18:27.880 --> 18:32.840
For the CPU, you have to import the ROM.

18:32.840 --> 18:34.040
It's not distributed.

18:34.040 --> 18:42.760
But if you have the possibility to do it yourself using a tool from a visual, you can do it.

18:42.760 --> 18:45.760
But usually, it's already available.

18:45.760 --> 18:47.320
And there is also a custom layout.

18:47.320 --> 18:51.760
You can see here, you can have, that's not common, but you can have custom display in

18:51.760 --> 18:58.480
ma'am to have that around the ring.

18:58.480 --> 19:04.800
And last but not least, back to our big professor.

19:04.800 --> 19:07.920
Well, actually, the design is quite the same.

19:07.920 --> 19:15.920
It was not meant, but it's just, as we know, today, it's kind of TMS 1,000 of that type.

19:15.920 --> 19:17.560
Of course, we don't have the ROM.

19:17.560 --> 19:20.560
We can directly program it.

19:20.560 --> 19:21.520
It's better.

19:21.520 --> 19:29.080
And it's also interesting because then you can do a lot of more things, rather than strictly

19:29.080 --> 19:33.720
emulating the original game.

19:33.720 --> 19:44.360
You can also try other games, for example, asking, trying to guess or having a different

19:44.360 --> 19:51.200
way to ask questions, not ask about the answer, but if I find a number, five plus what does

19:52.200 --> 19:55.360
10, and then you have to find the other.

19:55.360 --> 20:00.360
And you can also have, because that device was not actually very user-friendly.

20:00.360 --> 20:03.320
So it tells you how strong it's right, and that's it.

20:03.320 --> 20:12.720
You can have more way to reward the kit that is playing by showing, for example, animation,

20:12.720 --> 20:15.720
a little Pac-Man, things like that on the lead.

20:15.760 --> 20:22.440
So that's what we are currently doing at the museum, to show that from the past and also

20:22.440 --> 20:26.240
to show another experience from today.

20:26.240 --> 20:27.720
Okay, so a quick look inside.

20:27.720 --> 20:37.440
You can see here the Arduino, the lead, and the keyboard with the matrix to read the keys.

20:37.440 --> 20:38.440
And that's it.

20:39.320 --> 20:50.160
I hope you enjoyed that quick journey in the past and about our work on preserving them.

20:50.160 --> 20:57.680
We have, of course, other plans for developing with kits also an app, but that's more like

20:57.680 --> 21:00.920
scratch coding, but it's also interesting to do it.

21:00.920 --> 21:04.920
And of course, we continue to evolve that, and if you want to see it, it will be on display

21:04.920 --> 21:06.920
in our museum soon.

21:06.920 --> 21:09.400
Okay, if you have questions, it's welcome.

