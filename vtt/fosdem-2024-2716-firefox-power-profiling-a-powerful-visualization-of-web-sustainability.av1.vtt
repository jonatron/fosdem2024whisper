WEBVTT

00:00.000 --> 00:07.000
Okay.

00:07.000 --> 00:10.000
Welcome to Janssen.

00:10.000 --> 00:14.000
Final Fox Power Profiling.

00:14.000 --> 00:16.000
We'll listen to Florian Quez.

00:16.000 --> 00:18.000
Welcome.

00:18.000 --> 00:25.000
Applause

00:25.000 --> 00:27.000
Hello. I'm Florian Quez.

00:27.000 --> 00:29.000
I'm a performance engineer at Mozilla.

00:29.000 --> 00:34.000
For the last few years, I worked on understanding how much power is used by Firefox

00:34.000 --> 00:37.000
and how it's used, how we could reduce it.

00:37.000 --> 00:41.000
And today, I will be sharing how the tooling we've put in place to understand Firefox power use

00:41.000 --> 00:44.000
can be used to improve web sustainability.

00:44.000 --> 00:47.000
So first, I will explain what I mean with web sustainability.

00:47.000 --> 00:51.000
I mostly talk about carbon footprint when I'm thinking sustainability here.

00:51.000 --> 00:55.000
And there are three main components of the carbon footprint of browsing the web.

00:55.000 --> 00:58.000
The first and biggest one is the user device.

00:58.000 --> 01:02.000
Then the second component is whatever's not in front of the user.

01:02.000 --> 01:04.000
So that includes networking, server equipment.

01:04.000 --> 01:12.000
And then the power used on the device by the browser when browsing to see the web page the user wants to see.

01:12.000 --> 01:14.000
So let's look at each of the three.

01:14.000 --> 01:16.000
First, the user device.

01:16.000 --> 01:19.000
Usually, we think it's not within our control when we develop a website

01:19.000 --> 01:21.000
because you know it's the user who picks the device.

01:21.000 --> 01:23.000
We have nothing to do there.

01:23.000 --> 01:27.000
The emission we are talking about here is the embodied emission.

01:27.000 --> 01:31.000
Whenever someone is buying a new computer or a new smartphone,

01:31.000 --> 01:37.000
so it's the emissions to produce this device to manufacture it but also to ship it to the user.

01:37.000 --> 01:42.000
And even though we don't get to do anything about the actual emissions when creating the device,

01:42.000 --> 01:47.000
we can reduce the incentive for the user to replace the device.

01:47.000 --> 01:51.000
And the way we can do that is to ensure good performance

01:51.000 --> 01:55.000
because something feeling too slow is a strong incentive for someone to replace the device.

01:55.000 --> 01:58.000
And the other thing is ensuring web compatibility

01:58.000 --> 02:03.000
because if the device becomes incompatible, the user has to replace it or update it in some way.

02:03.000 --> 02:10.000
And on this topic, I would like to mention that Firefox is currently the only browser that is left supporting Windows 7 users.

02:10.000 --> 02:14.000
And we actually still have millions of users running Windows 7.

02:14.000 --> 02:21.000
So if you are thinking about sustainability, Web Compat is one of the first things and think about Firefox ESR.

02:22.000 --> 02:26.000
Second piece of carbon footprint is the emissions for the infrastructure.

02:26.000 --> 02:28.000
Anything server networking.

02:28.000 --> 02:33.000
I'm not going to talk a lot about this because it's already well covered.

02:33.000 --> 02:35.000
And there's a reason for that.

02:35.000 --> 02:39.000
It's that the financial cost of operating the services scales mostly with the emissions.

02:39.000 --> 02:43.000
So there's a strong incentive to optimize and there's already a lot of tooling available.

02:43.000 --> 02:47.000
And last and maybe not least, very often neglected,

02:47.000 --> 02:51.000
the emission caused by using the browser to display the web page.

02:51.000 --> 02:57.000
And the reason why it's neglected is that in people's minds, there's no good tooling available to look at those.

02:57.000 --> 02:59.000
Is that correct?

02:59.000 --> 03:01.000
Well, not really anymore.

03:01.000 --> 03:03.000
And this is what I will be talking about today.

03:03.000 --> 03:05.000
It's what we've done to change this.

03:05.000 --> 03:07.000
We'll be focused for today.

03:07.000 --> 03:13.000
So because the talk is 40 minutes long, I want to give you a structure.

03:13.000 --> 03:16.000
First, I will explain why as Mozilla, we care about this.

03:16.000 --> 03:19.000
Then I will explain our journey to measure power use locally,

03:19.000 --> 03:21.000
what we've done to be able to understand it.

03:21.000 --> 03:24.000
And then I will go deep into the topic of power profiling.

03:24.000 --> 03:29.000
But first, I will introduce the Firefox profiler so that even if you don't know it yet, you can make sense of it.

03:29.000 --> 03:33.000
Then I will explain what power profiling does and show examples.

03:33.000 --> 03:37.000
Examples are important because this is where we see why all of this makes sense.

03:37.000 --> 03:41.000
And then we will take a break from the structured presentation of slides.

03:41.000 --> 03:44.000
I will try to do a live demo if I have enough internet.

03:44.000 --> 03:48.000
And then I will explain what we call external power profiling, whatever that is,

03:48.000 --> 03:51.000
and give some more examples.

03:51.000 --> 03:52.000
So let's start.

03:52.000 --> 03:54.000
Why do we care about this as Mozilla?

03:54.000 --> 03:56.000
There are three main reasons.

03:56.000 --> 03:58.000
The first one is for sustainability.

03:58.000 --> 04:01.000
Mozilla met climate commitments of being carbon neutral,

04:01.000 --> 04:04.000
of reducing our footprint year over year,

04:04.000 --> 04:08.000
of leading openly by sharing materials, tools and methodologies.

04:08.000 --> 04:10.000
That's what I'm doing today.

04:10.000 --> 04:15.000
And of improving products from a sustainability perspective.

04:15.000 --> 04:17.000
There's a reason why this one matters.

04:17.000 --> 04:18.000
It's on the next slide.

04:18.000 --> 04:21.000
It's when we look at Mozilla's carbon footprint,

04:21.000 --> 04:28.000
the actual footprint caused by using our products on our users' devices is more than 90%.

04:28.000 --> 04:31.000
And by the way, when we say we are leading on sustainability,

04:31.000 --> 04:36.000
we are the only browser maker organization that actually publishes this kind of data.

04:36.000 --> 04:38.000
The others, they are shy about it.

04:38.000 --> 04:43.000
And we would like to encourage others to also publish this kind of data.

04:43.000 --> 04:47.000
Second reason for hearing about power use of Firefox,

04:47.000 --> 04:50.000
a very important one, it's for user experience.

04:50.000 --> 04:53.000
Nobody likes to use a computer that uses too much power,

04:53.000 --> 04:54.000
and there are multiple reasons.

04:54.000 --> 04:57.000
One, it's causing noise with the fans.

04:57.000 --> 05:00.000
If it's a laptop and it's super hot, it's painful.

05:00.000 --> 05:03.000
And then even the people who couldn't care less about climate change

05:03.000 --> 05:05.000
because they think it's somebody else's problem,

05:05.000 --> 05:07.000
they hate running out of battery.

05:07.000 --> 05:09.000
Life matters to everybody.

05:09.000 --> 05:13.000
And then last but not least, we do this for a better web.

05:13.000 --> 05:15.000
And there's a reason why we want to do this.

05:15.000 --> 05:16.000
It's Mozilla's mission.

05:16.000 --> 05:18.000
We are building a better internet.

05:18.000 --> 05:19.000
This is what we are here for.

05:19.000 --> 05:22.000
And because Firefox is made on web technologies,

05:22.000 --> 05:25.000
everything we do to make Firefox more energy efficient,

05:25.000 --> 05:30.000
and all the tooling we put in place, it's directly reusable for our web pages.

05:30.000 --> 05:34.000
Now let's dig into our journey to figure out local power use.

05:34.000 --> 05:35.000
I started a couple years ago.

05:35.000 --> 05:37.000
My task was to figure out how Firefox is its power,

05:37.000 --> 05:39.000
what should we do about it?

05:39.000 --> 05:40.000
It was not clearer than that.

05:40.000 --> 05:42.000
It's just, let's look into it.

05:42.000 --> 05:45.000
So when you want to understand the power use of something,

05:45.000 --> 05:48.000
the first thing you do is you take an energy meter, or what matter.

05:48.000 --> 05:49.000
So that's what I did.

05:49.000 --> 05:51.000
It's cheap, it's easy.

05:51.000 --> 05:54.000
It's pretty accurate in terms of the data it shows.

05:54.000 --> 05:56.000
It's also pretty useless for the case of software

05:56.000 --> 06:00.000
because software is not something that you start and it does the same thing all the time.

06:00.000 --> 06:03.000
You need to see evolution all the time, and I was not seeing anything.

06:03.000 --> 06:06.000
So next step is get a better what matter.

06:06.000 --> 06:11.000
I got some that is communicating to the computer through Bluetooth.

06:11.000 --> 06:15.000
It's sending me something like this so I can see a chart.

06:15.000 --> 06:17.000
It's much better.

06:17.000 --> 06:20.000
It's still not so great because I still can't correlate with what we were doing

06:20.000 --> 06:22.000
with the code in the browser.

06:23.000 --> 06:26.000
And at that point I wondered how is the competition doing it?

06:26.000 --> 06:30.000
And I found this blog post from Microsoft that I found very interesting.

06:30.000 --> 06:34.000
Back when they were working super hard on edge battery life,

06:34.000 --> 06:36.000
they were super proud of it.

06:36.000 --> 06:38.000
It was before they switched to Chromium.

06:38.000 --> 06:40.000
And one sometimes really caught my attention.

06:40.000 --> 06:42.000
That's the one highlighted in blue here.

06:42.000 --> 06:47.000
Power was measured on the surface book because it has integrated hardware instrumentation.

06:47.000 --> 06:48.000
So that's how Microsoft did it.

06:48.000 --> 06:50.000
They have their own brands of laptops.

06:50.000 --> 06:52.000
They put built-in power meter chips in those

06:52.000 --> 06:56.000
so that they could compare power use of edge with competing browsers.

06:56.000 --> 06:58.000
So that's not really something we can do as Mozilla.

06:58.000 --> 07:00.000
I don't have my laptops.

07:00.000 --> 07:02.000
But can I get some of those Microsoft laptops?

07:02.000 --> 07:04.000
Well, sure.

07:04.000 --> 07:06.000
So I actually found two that include those power meters.

07:06.000 --> 07:11.000
They are pretty old because they are back from when Microsoft was doing this kind of work.

07:11.000 --> 07:13.000
They still work.

07:13.000 --> 07:18.000
I tried to find newer devices but unfortunately all the devices where I found that

07:18.000 --> 07:21.000
a device like a power meter is exposed in the ACPI table

07:21.000 --> 07:24.000
actually doesn't seem to be actually present on the device.

07:24.000 --> 07:27.000
So the power meters were put in by manufacturers for prototyping

07:27.000 --> 07:29.000
and calibrating battery discharge rates

07:29.000 --> 07:32.000
and then not put into production devices.

07:32.000 --> 07:39.000
When we look at the tool called Perfmon on Windows on those computers,

07:39.000 --> 07:41.000
we get something like this.

07:41.000 --> 07:44.000
We see energy meters and we have 4 channels here,

07:44.000 --> 07:47.000
battery, CPU, GPU and the Wi-Fi chip.

07:47.000 --> 07:50.000
Which means we can measure the power use of each of those components.

07:51.000 --> 07:53.000
We can measure it.

07:53.000 --> 07:55.000
We see something like this.

07:55.000 --> 07:57.000
So we now have charts.

07:57.000 --> 07:59.000
We can try to correlate with stuff that happens.

07:59.000 --> 08:02.000
I'm not sure if you think like me but I really dislike this UI.

08:02.000 --> 08:04.000
I find it absolutely terrible.

08:04.000 --> 08:06.000
I can't make sense of it.

08:06.000 --> 08:08.000
Even the unit, I can't make sense.

08:08.000 --> 08:10.000
Like here I selected the CPU cores energy

08:10.000 --> 08:14.000
and it's using, last time it was measured, 5.0 something E plus 011.

08:14.000 --> 08:16.000
Whatever that means.

08:17.000 --> 08:20.000
While searching for those devices with built-in power meters,

08:20.000 --> 08:22.000
I had a good surprise.

08:22.000 --> 08:27.000
On some laptops, the names of energy meters were pretty familiar

08:27.000 --> 08:29.000
if you use Intel Power Gadget.

08:29.000 --> 08:32.000
Those are the rappel channels that are exposed by the CPU itself.

08:32.000 --> 08:34.000
There are some investigations.

08:34.000 --> 08:37.000
It turns out that all Windows computers with Intel CPUs

08:37.000 --> 08:40.000
expose the actual CPU as a built-in power meter

08:40.000 --> 08:42.000
and we can access it.

08:43.000 --> 08:47.000
Because another nice surprise, there's a documented API for it.

08:47.000 --> 08:49.000
I have not found any example of someone using the API

08:49.000 --> 08:51.000
but the API is documented.

08:51.000 --> 08:54.000
Which means I can now understand what the unit was.

08:54.000 --> 08:58.000
So the E plus 11, it was because it was Pico whatever.

08:59.000 --> 09:01.000
And we can correct many times per second.

09:01.000 --> 09:03.000
So I know that because I experimented with it.

09:03.000 --> 09:07.000
Very little overhead so I can correct many times.

09:07.000 --> 09:10.000
And the most important thing for us is it's accessible in user terms.

09:10.000 --> 09:13.000
I absolutely don't want anybody to run Firefox as root

09:13.000 --> 09:15.000
to be able to power profile it.

09:15.000 --> 09:18.000
So accessing as user land without providing users to install anything

09:18.000 --> 09:20.000
was very important for us.

09:20.000 --> 09:24.000
So all of this makes it pretty tempting to use for profiler counters.

09:24.000 --> 09:28.000
At this point, I started prototyping something, started hacking.

09:28.000 --> 09:32.000
And this is the screenshot of the very first power profiling prototype

09:32.000 --> 09:34.000
I got of Firefox.

09:35.000 --> 09:38.000
So we see the same name here, rappel channels.

09:38.000 --> 09:41.000
So it's not very user friendly as names here.

09:41.000 --> 09:44.000
And the units were not correct but the thing that matters a lot

09:44.000 --> 09:49.000
when seeing this screenshot is the shape here of the track.

09:51.000 --> 09:54.000
So this is the CPU package and you can see that it matches the shape

09:54.000 --> 09:56.000
of when we were using CPU.

09:56.000 --> 09:58.000
So the data seems correct.

09:58.000 --> 10:00.000
We were using CPU here too.

10:00.000 --> 10:02.000
And there's a shape that's moving here.

10:02.000 --> 10:05.000
PP1 is the GPU and there's a spike whenever we do something on screen.

10:05.000 --> 10:08.000
We were doing graphics work here and we had something here,

10:08.000 --> 10:10.000
something here, something here.

10:10.000 --> 10:12.000
So the shape is correct and this is a key validation

10:12.000 --> 10:15.000
because until then we were thinking we could not power profile

10:15.000 --> 10:18.000
because power profiling means running the profiler.

10:18.000 --> 10:20.000
Running the profiler means using power

10:20.000 --> 10:22.000
and we were afraid we would be profiling the profiler,

10:22.000 --> 10:24.000
which is not what we want.

10:24.000 --> 10:26.000
And this validates that it actually worked.

10:26.000 --> 10:29.000
So I decided to polish it and make it something we could ship.

10:29.000 --> 10:32.000
But I see I shared with you a screenshot of a profiler

10:32.000 --> 10:34.000
without introducing the profiler.

10:34.000 --> 10:36.000
It's a good time to introduce it.

10:36.000 --> 10:38.000
It's a profiler.

10:38.000 --> 10:40.000
It's built into Firefox.

10:40.000 --> 10:42.000
No additional tooling required.

10:42.000 --> 10:44.000
It's always there.

10:44.000 --> 10:46.000
The user interface is not there because we don't want to clutter things

10:46.000 --> 10:48.000
for all users.

10:48.000 --> 10:50.000
But it's trivial to make it show up.

10:50.000 --> 10:52.000
And it was created for performance work.

10:52.000 --> 10:54.000
And here by performance I mean making things faster.

10:54.000 --> 10:57.000
It's useful both for users so that they can make a useful bug report

10:57.000 --> 11:00.000
very quickly instead of saying something is slow.

11:00.000 --> 11:02.000
They can say, here's a profile of what happened.

11:02.000 --> 11:04.000
Please have a look.

11:04.000 --> 11:07.000
And useful for developers because those profiles are easily actionable.

11:07.000 --> 11:10.000
And it's one of the best profilers that exist currently

11:10.000 --> 11:12.000
and there's a good reason for that.

11:12.000 --> 11:15.000
We started investing heavily in it in the Firefox quantum days.

11:15.000 --> 11:18.000
And those days were when we decided that the engineering teams

11:18.000 --> 11:22.000
of Firefox being several times smaller than all of the competitor teams

11:22.000 --> 11:25.000
was definitely not a good reason for Firefox to be slower.

11:25.000 --> 11:27.000
So we needed better tooling.

11:28.000 --> 11:31.000
Profiler uses multiple sources of data.

11:31.000 --> 11:34.000
It's a sampling profiler which means that it uses a timer.

11:34.000 --> 11:37.000
And at a fixed interval it stops the execution of the program

11:37.000 --> 11:39.000
and will capture information.

11:39.000 --> 11:42.000
Typically it will capture stacks of all the threads we care about.

11:42.000 --> 11:45.000
And it will also capture counter values.

11:45.000 --> 11:48.000
So counters, for example, if we care about memory use,

11:48.000 --> 11:51.000
whenever memory is allocated or released,

11:51.000 --> 11:53.000
we'll increment or decrement a counter.

11:53.000 --> 11:55.000
And then when sampling we'll record the value of that counter

11:55.000 --> 11:57.000
at the time we sampled.

11:57.000 --> 11:59.000
And the last source of information is markers.

11:59.000 --> 12:03.000
Markers can be seen as annotations left by the developers

12:03.000 --> 12:06.000
so that whenever we see a profile we see what happens at the time.

12:08.000 --> 12:10.000
I had a screenshot of showing how to use the profiler,

12:10.000 --> 12:12.000
but I will try to do a demo instead.

12:12.000 --> 12:14.000
It will be more interactive.

12:14.000 --> 12:18.000
So this is Firefox Nightly Instance that is created fresh,

12:18.000 --> 12:20.000
no user profile.

12:20.000 --> 12:25.000
And I will go to profiler.firefox.com.

12:25.000 --> 12:27.000
It loads this web page

12:27.000 --> 12:31.000
and I will click the big Unable Firefox Profiler menu button.

12:31.000 --> 12:36.000
When I click this, I see a new toolbar icon that appears in my toolbar.

12:36.000 --> 12:38.000
It was already there.

12:38.000 --> 12:40.000
We are showing the icon when clicking that button.

12:40.000 --> 12:42.000
And I have settings here.

12:42.000 --> 12:45.000
In most cases the default settings will be good for what you want to do.

12:45.000 --> 12:47.000
So you can just click start recording

12:47.000 --> 12:50.000
and then you can start doing what you want to profile.

12:50.000 --> 12:53.000
So I will, for example, load the Wikipedia on page.

12:57.000 --> 12:59.000
And once I'm done doing the thing I want to profile,

12:59.000 --> 13:02.000
I can click the button in the toolbar again.

13:02.000 --> 13:05.000
The second oscillator, I have a new tab that opens which is my profile.

13:07.000 --> 13:09.000
The UI might be a bit intimidating at first.

13:09.000 --> 13:11.000
I will go through it with you.

13:11.000 --> 13:13.000
There are two main pieces of the UI.

13:13.000 --> 13:17.000
The first one is the top half here,

13:17.000 --> 13:20.000
which is what we call the timeline because everything is drawn against time.

13:20.000 --> 13:22.000
There's a time error here.

13:22.000 --> 13:24.000
And then there are panels at the bottom.

13:24.000 --> 13:28.000
In the timeline, you can see that we have what we call tracks here.

13:28.000 --> 13:32.000
And there are tracks for processes, like you see the parent process here.

13:32.000 --> 13:36.000
In Firefox, the parent process handles the user interface and the rendering.

13:36.000 --> 13:39.000
And you can see a process for each content process.

13:39.000 --> 13:43.000
So for example, I have the Wikipedia process here that I will select.

13:43.000 --> 13:45.000
And here there's activity.

13:45.000 --> 13:49.000
So I can make a selection and I can zoom into it

13:49.000 --> 13:51.000
by clicking this Manifold icon.

13:51.000 --> 13:54.000
So now we'll see in a lot more detail what happens.

13:54.000 --> 13:56.000
And the UI is very interactive.

13:56.000 --> 13:59.000
Whenever I move the mouse somewhere, I will see a tool tip showing me what happens.

13:59.000 --> 14:02.000
So here I'm seeing the stacks that were sampled.

14:02.000 --> 14:05.000
I see there's some JavaScript in here.

14:05.000 --> 14:07.000
I assume some of you are web developers

14:07.000 --> 14:09.000
and probably care more about what JavaScript runs

14:09.000 --> 14:11.000
so we can filter frames to JavaScript only.

14:11.000 --> 14:16.000
And here I'm seeing which JavaScript code was run by Wikipedia when loading the page.

14:16.000 --> 14:20.000
I also said we have markers, so I will show an example.

14:20.000 --> 14:23.000
In the panel at the bottom, I have a marker chart.

14:23.000 --> 14:27.000
And if I go here, I have DOM events.

14:27.000 --> 14:30.000
They show whatever event we are sent to the web page.

14:30.000 --> 14:32.000
And if I scroll down, I have many more.

14:32.000 --> 14:35.000
I won't go through them, of course, because we clearly don't have time.

14:35.000 --> 14:37.000
I just wanted to show the Yawek markers here

14:37.000 --> 14:39.000
that show whenever the thread was active,

14:39.000 --> 14:41.000
which is important for PogarUse.

14:41.000 --> 14:44.000
And the runable markers we have at the bottom here

14:44.000 --> 14:46.000
that show the name of the C++ task that was running,

14:46.000 --> 14:48.000
which is very important for Gecko developers

14:48.000 --> 14:50.000
when you send them one of the profiles.

14:50.000 --> 14:54.000
So that will be it for an introduction of the profiler itself.

14:54.000 --> 14:58.000
I will go back to the presentation

14:58.000 --> 15:01.000
and skip all the screenshot I had that show the same thing.

15:01.000 --> 15:04.000
And now we'll talk about actual power profiling.

15:04.000 --> 15:06.000
So I said we have a working prototype.

15:06.000 --> 15:08.000
Now we want to make it work for real.

15:08.000 --> 15:10.000
So it's built-in.

15:10.000 --> 15:12.000
Again, no extra tooling required.

15:12.000 --> 15:15.000
It supports the three major desktop platforms.

15:16.000 --> 15:18.000
We shipped it in Firefox 104.

15:18.000 --> 15:20.000
So that's already a little while ago.

15:20.000 --> 15:22.000
We got a lot of great feedback on it,

15:22.000 --> 15:26.000
especially from people who care about sustainability of the web.

15:26.000 --> 15:29.000
At best, my knowledge it's not been copied yet,

15:29.000 --> 15:31.000
but that might happen at some point.

15:31.000 --> 15:33.000
Platform support.

15:33.000 --> 15:37.000
On Windows 10, we support only the devices that include built-in power meters.

15:37.000 --> 15:40.000
On Windows 11, we have Intel CPUs.

15:40.000 --> 15:44.000
We have information about integrated GPU and memory power use.

15:44.000 --> 15:49.000
And on Windows 11, 22H2,

15:49.000 --> 15:51.000
we have about updates.

15:51.000 --> 15:54.000
We started seeing Windows supporting AMD horizon CPUs.

15:54.000 --> 15:58.000
And a good surprise here is there are separate information for each core,

15:58.000 --> 16:02.000
which means that if we can track which process was using which core for which thread,

16:02.000 --> 16:05.000
we can know exactly how much power is used by the code we are running.

16:07.000 --> 16:11.000
On Mac, we support both Apple Silicon CPUs and Intel CPUs.

16:11.000 --> 16:13.000
Different ways.

16:13.000 --> 16:16.000
For Apple Silicon, we actually have an API from the kernel

16:16.000 --> 16:20.000
that gives us information about the amount of energy used by each process.

16:20.000 --> 16:25.000
And I think Apple can do it because they control both the CPU chip and the kernel.

16:25.000 --> 16:29.000
It's very likely that whenever the context switch of thread,

16:29.000 --> 16:32.000
they record the value of the counter, and that's how we get the value.

16:32.000 --> 16:36.000
On for Intel, there's a very obscure system called that can be called only from assembly

16:36.000 --> 16:40.000
of a Raspberry Crash that gives us the value of a Rappel model-specific register.

16:40.000 --> 16:43.000
I'm very happy I didn't have to figure this out on my own.

16:43.000 --> 16:45.000
A former colleague did it several years ago.

16:45.000 --> 16:48.000
I could just copy-paste the code. That was nice.

16:48.000 --> 16:50.000
Last but not least, Linux.

16:50.000 --> 16:53.000
On Linux, we use Rappel Perfevance.

16:53.000 --> 16:57.000
Those used to be unrestricted, but then there was a side-channel attack.

16:57.000 --> 17:00.000
And the reason for that is if you look on Windows,

17:00.000 --> 17:04.000
you can access the power data up to once per millisecond.

17:04.000 --> 17:07.000
If you try to access it faster, you will get the same data returned again.

17:07.000 --> 17:09.000
On Linux, there's no rate limit like this,

17:09.000 --> 17:12.000
which means that you could create so often that you could get some information

17:12.000 --> 17:14.000
about the data being processed.

17:14.000 --> 17:19.000
So when this was discovered, it was then restricted to only be accessed by root.

17:19.000 --> 17:23.000
Thankfully, there's a command we can run as root that lets the kernel know

17:23.000 --> 17:26.000
that it's fine to not be paranoid about it.

17:26.000 --> 17:29.000
And that's the exact same command that needs to be run to use Linux Perfev,

17:29.000 --> 17:32.000
the built-in profiler for Linux.

17:32.000 --> 17:33.000
So I think it's fine.

17:33.000 --> 17:36.000
As long as users don't need to run Firefox as root, I'm still happy.

17:36.000 --> 17:38.000
So I will take this work around.

17:38.000 --> 17:40.000
MDCPUs are supported.

17:40.000 --> 17:44.000
A lot of running, it doesn't work on SNAP packages if you are an Ubuntu.

17:44.000 --> 17:48.000
The binary is provided by Mozilla Work.

17:48.000 --> 17:52.000
And I think that's because the packaging system puts some restriction

17:52.000 --> 17:55.000
on what's allowed or not.

17:55.000 --> 17:58.000
If you were about how to configure a profiler,

17:58.000 --> 18:01.000
I said in my previous demo that the default settings are right in most cases.

18:01.000 --> 18:04.000
If you want to put a profile, they are not right.

18:04.000 --> 18:09.000
Because obviously you want to also include the Power Use feature

18:09.000 --> 18:12.000
that's down here, the checkbox you see there.

18:12.000 --> 18:14.000
And also markers for all threads.

18:14.000 --> 18:17.000
And the reason for that is, we're waking up a thread as a cost in terms of power.

18:17.000 --> 18:21.000
And we want to know about it, even if it happens on threads, we are not profiling.

18:21.000 --> 18:24.000
So we want to know where ever it happens.

18:24.000 --> 18:26.000
And I think the power preset, of course.

18:26.000 --> 18:29.000
And the other thing we want to do is reduce the overhead.

18:29.000 --> 18:32.000
As I said, we were concerned we might be power profiling the profiler itself,

18:32.000 --> 18:34.000
which is useless.

18:34.000 --> 18:37.000
So what we are doing is increasing the sampling interval.

18:37.000 --> 18:40.000
Instead of sampling every millisecond, we sample every 10.

18:40.000 --> 18:43.000
We're using significantly the overhead of waking up.

18:43.000 --> 18:45.000
And when sampling, we don't capture the stacks.

18:45.000 --> 18:47.000
We only capture countervalues.

18:47.000 --> 18:51.000
We still have all the markers that still give plenty of information.

18:51.000 --> 18:54.000
For the presentation, I will give plenty of examples.

18:54.000 --> 18:57.000
And as I said, the profiler UI is very interactive.

18:57.000 --> 18:59.000
So here's a link to buy slides.

18:59.000 --> 19:01.000
And whenever you have a screenshot of a profile,

19:01.000 --> 19:05.000
I also have a link to the profile so that you can see the profile for yourself.

19:05.000 --> 19:10.000
One thing I should mention is that the share.firefox.devdomain doesn't work with IPv6.

19:10.000 --> 19:13.000
So you need to be on the first damn dwell stack Wi-Fi network

19:13.000 --> 19:16.000
if you want to be able to click right now.

19:16.000 --> 19:19.000
First example of wire profiling, I will go through it with you

19:19.000 --> 19:21.000
because I know the profiler was intimidating.

19:21.000 --> 19:23.000
It's the same thing as what I was doing before,

19:23.000 --> 19:25.000
which is loading the Wikipedia homepage.

19:25.000 --> 19:29.000
And we can see on the screenshot, near the top,

19:29.000 --> 19:31.000
it was not visible.

19:31.000 --> 19:33.000
So the screenshot here, we see it was not loaded yet,

19:33.000 --> 19:35.000
but there was CPU activity.

19:35.000 --> 19:37.000
Here something starts occurring, and here it's visually complete.

19:37.000 --> 19:42.000
So I made a selection here of the part of the profile that we care about.

19:42.000 --> 19:44.000
You see we have a parent process.

19:44.000 --> 19:46.000
We no longer have colors, and we no longer have stack samples

19:46.000 --> 19:48.000
because it's the power profiling settings.

19:48.000 --> 19:50.000
We still see the network requests.

19:50.000 --> 19:52.000
They are also shown here.

19:52.000 --> 19:56.000
And we have a new process power track here

19:56.000 --> 19:59.000
that gives us how much power is used by the parent process.

19:59.000 --> 20:01.000
We have a similar track here for the content process

20:01.000 --> 20:04.000
that tells us how much power is used at any given time

20:04.000 --> 20:06.000
and the amount of energy used.

20:06.000 --> 20:10.000
So here 134 mW.

20:10.000 --> 20:12.000
So that's how much power it takes to load Wikipedia,

20:12.000 --> 20:14.000
apparently, on that computer.

20:14.000 --> 20:17.000
Second example, this is profiling on Windows 11,

20:17.000 --> 20:20.000
and this is starting Firefox.

20:20.000 --> 20:22.000
And you can see how much...

20:22.000 --> 20:24.000
So this is the CPU activity when starting Firefox.

20:24.000 --> 20:26.000
You can see that here we had a window,

20:26.000 --> 20:28.000
and here it was visually complete,

20:28.000 --> 20:32.000
and the activity was done.

20:32.000 --> 20:35.000
So we can see how much power is used by the CPU cores.

20:35.000 --> 20:38.000
The built-in GPU, the entire CPU package,

20:38.000 --> 20:41.000
and here it's selected, and we see it used 10 mW

20:41.000 --> 20:46.000
to start Firefox on that specific Windows laptop.

20:46.000 --> 20:49.000
I'm not sure about you, but for me, whenever I have new tools,

20:49.000 --> 20:51.000
I like to play with them, and I like to test their limits.

20:51.000 --> 20:53.000
And I was wondering what's the tiniest thing

20:53.000 --> 20:55.000
I could power profile reliably.

20:55.000 --> 20:57.000
And this is the smallest thing I have found.

20:57.000 --> 20:59.000
I'm not sure if you've read what's written

20:59.000 --> 21:01.000
at the bottom of the slide, but basically,

21:01.000 --> 21:03.000
I was profiling Firefox doing exactly nothing.

21:03.000 --> 21:05.000
And it was not exactly nothing, actually,

21:05.000 --> 21:07.000
because when I looked at the profile,

21:07.000 --> 21:09.000
there were those small spikes.

21:09.000 --> 21:11.000
What are those spikes?

21:11.000 --> 21:13.000
And actually, it turns out there were the cursor blinking

21:13.000 --> 21:15.000
in the address bar.

21:15.000 --> 21:17.000
And if I select one of those spikes, like I did here,

21:17.000 --> 21:19.000
I can say that making the cursor happy

21:19.000 --> 21:23.000
on the address bar uses 1.5 mW.

21:23.000 --> 21:26.000
I was surprised. I didn't expect this to be that precise,

21:26.000 --> 21:29.000
but yes, it is that precise.

21:29.000 --> 21:35.000
Now is a good time for live demo, if it works.

21:35.000 --> 21:40.000
I assume many of you, when you came here,

21:40.000 --> 21:43.000
you wanted to see a map of the campus,

21:43.000 --> 21:45.000
especially if you came for the first time.

21:45.000 --> 21:47.000
And because you're in two open source,

21:47.000 --> 21:49.000
you probably use the open straight map.

21:49.000 --> 21:51.000
So I will try to figure out how much power it uses

21:51.000 --> 21:53.000
to search for the campus on the open straight map.

21:53.000 --> 21:57.000
So I will configure a profiler to use the power preset here.

21:57.000 --> 22:00.000
Start recording.

22:00.000 --> 22:02.000
Open a new tab.

22:02.000 --> 22:06.000
Type openstraightmap.org.

22:06.000 --> 22:08.000
It loads.

22:08.000 --> 22:10.000
I have a text field in the top right corner with a cursor in it.

22:10.000 --> 22:14.000
So I will type ulb and see what happens.

22:14.000 --> 22:16.000
So I'm in a university campus.

22:16.000 --> 22:18.000
This is very nice.

22:18.000 --> 22:20.000
I don't really recognize the shape of the building though.

22:20.000 --> 22:27.000
So I will zoom out to see if it's in the right place.

22:27.000 --> 22:29.000
Zoom out again.

22:29.000 --> 22:31.000
Oh, we're in the third door. Probably not correct.

22:31.000 --> 22:37.000
So I will additionally type process.

22:37.000 --> 22:39.000
Now that looks better.

22:39.000 --> 22:43.000
If I zoom into it, this is actually the building we are in.

22:43.000 --> 22:45.000
Okay, I will stop the demo for now

22:45.000 --> 22:52.000
and now we will look at the profile I'm capturing.

22:52.000 --> 22:58.000
Again, we have multiple tracks here.

22:58.000 --> 23:00.000
Google.com, I don't know why it's here,

23:00.000 --> 23:01.000
but I don't care about it.

23:01.000 --> 23:02.000
It was probably the background.

23:02.000 --> 23:04.000
I don't care about this either.

23:04.000 --> 23:06.000
So I have open straight map here,

23:06.000 --> 23:08.000
and I have the power and process here.

23:08.000 --> 23:12.000
I also don't care about how much memory we used.

23:12.000 --> 23:15.000
Okay, so this filter is down to what's useful.

23:15.000 --> 23:17.000
So I have a screenshot track here that

23:17.000 --> 23:19.000
that orientates me pretty quickly.

23:19.000 --> 23:21.000
So I was typing the address of the map.

23:21.000 --> 23:23.000
Here we have the home page that's loaded.

23:23.000 --> 23:26.000
And here I had my first results.

23:26.000 --> 23:29.000
Here it was animating when I was zooming out

23:29.000 --> 23:31.000
to try to figure out where I was.

23:31.000 --> 23:34.000
Okay, so let's look at power use now.

23:34.000 --> 23:37.000
So the part we might care about is

23:37.000 --> 23:39.000
when we actually loaded the right campus.

23:39.000 --> 23:41.000
So that's here.

23:41.000 --> 23:43.000
You see the network request here,

23:43.000 --> 23:45.000
and you see there's a spike here in power use,

23:45.000 --> 23:47.000
and similar here.

23:47.000 --> 23:51.000
So I will zoom into this time of a profile.

23:51.000 --> 23:54.000
And now this is what happens in the Firefox parent process.

23:54.000 --> 23:58.000
So we can see it used about 100 mW,

23:58.000 --> 24:01.000
and in the content process, about 33.

24:01.000 --> 24:07.000
So this is about 130 mW to load the search results,

24:07.000 --> 24:09.000
showing the campus here.

24:09.000 --> 24:11.000
But because we have a profile that's nice,

24:11.000 --> 24:13.000
whenever you have a profile,

24:13.000 --> 24:15.000
very often you explore other things,

24:15.000 --> 24:17.000
because it might be interesting.

24:17.000 --> 24:19.000
I'm most interested by the shape that I see here

24:19.000 --> 24:21.000
that seems pretty interesting in terms of power.

24:21.000 --> 24:23.000
So I will zoom into it.

24:23.000 --> 24:26.000
And we see there was syncycum power use here.

24:26.000 --> 24:28.000
When looking at the screenshot,

24:28.000 --> 24:30.000
there were animations going on.

24:30.000 --> 24:33.000
So it makes sense that the process during the rendering

24:33.000 --> 24:35.000
uses power.

24:35.000 --> 24:40.000
Here we used more than 300 mW

24:40.000 --> 24:43.000
in the parent process, plus 150 here.

24:43.000 --> 24:45.000
So actually zooming out to see where I was

24:45.000 --> 24:48.000
actually used a lot more power than searching for something.

24:48.000 --> 24:51.000
We can also see the bandwidth used.

24:51.000 --> 24:53.000
So this is the network request,

24:53.000 --> 24:55.000
and we see how much bandwidth was used in network bandwidth.

24:55.000 --> 24:59.000
So we can see here that zooming out took about 4 megabytes

24:59.000 --> 25:01.000
of network bandwidth.

25:02.000 --> 25:05.000
I will zoom out again.

25:05.000 --> 25:07.000
I see there's some activity here,

25:07.000 --> 25:09.000
and I'm curious about it.

25:09.000 --> 25:12.000
I see there are markers, so I will zoom into it

25:12.000 --> 25:15.000
and try to see what's going on.

25:15.000 --> 25:18.000
There are regular spikes here.

25:18.000 --> 25:21.000
I will select the content process here,

25:21.000 --> 25:23.000
because the markers and the content process,

25:23.000 --> 25:25.000
it's likely where the activity started.

25:25.000 --> 25:30.000
I will zoom a bit more on one of the spikes.

25:30.000 --> 25:32.000
And I said renewable markers,

25:32.000 --> 25:34.000
they're very interesting for browser developers

25:34.000 --> 25:37.000
because they let us know what's going on.

25:37.000 --> 25:40.000
I think I will try to zoom into it

25:40.000 --> 25:43.000
to make it more readable.

25:43.000 --> 25:46.000
So the marker here,

25:46.000 --> 25:48.000
and it's correct, correct blink callback timer.

25:48.000 --> 25:51.000
So this is actually the timer that used to blink the cursor

25:51.000 --> 25:53.000
that I had in the search field where I was typing

25:53.000 --> 25:55.000
ULB browsers.

25:55.000 --> 25:57.000
So we can look at how much power it used.

25:57.000 --> 26:03.000
And this is 0.17 mWh in the content process,

26:03.000 --> 26:05.000
plus 0.8 here.

26:05.000 --> 26:07.000
So a little bit less than 1 mWh was used

26:07.000 --> 26:09.000
when making that cursor appear.

26:09.000 --> 26:11.000
So what I was showing in the previous slide,

26:11.000 --> 26:13.000
we can actually do it, and it really works,

26:13.000 --> 26:15.000
really, really.

26:15.000 --> 26:17.000
And I think that will be it for the live demo.

26:17.000 --> 26:19.000
I will switch back to the slides.

26:19.000 --> 26:31.000
So I talked about many things already,

26:31.000 --> 26:33.000
so let's recap a little bit.

26:33.000 --> 26:35.000
We have power profiling that works

26:35.000 --> 26:37.000
on all the free major desktop platforms,

26:37.000 --> 26:39.000
Windows, Linux, and Mac.

26:39.000 --> 26:41.000
It's reliable, it's easy to use,

26:41.000 --> 26:43.000
you don't need to be rude to use it,

26:43.000 --> 26:45.000
you don't need to install anything,

26:45.000 --> 26:47.000
you just have everything in Firefox.

26:47.000 --> 26:49.000
So what about the free platform?

26:49.000 --> 26:51.000
Firefox is not shipping only on those three platforms.

26:51.000 --> 26:53.000
There's something called Android

26:53.000 --> 26:55.000
where we ship Firefox, and lots of users there too.

26:55.000 --> 26:57.000
So what about it?

26:57.000 --> 26:59.000
So far, we've not found good APIs

26:59.000 --> 27:01.000
that we could use for power profiling,

27:01.000 --> 27:03.000
but we had another idea,

27:03.000 --> 27:05.000
and this is what I will explain now

27:05.000 --> 27:07.000
when talking about external power profiling.

27:07.000 --> 27:09.000
If I'm taking a step back from what I was showing before,

27:09.000 --> 27:11.000
my first step was to look at how much power

27:11.000 --> 27:13.000
was used on the power sockets.

27:13.000 --> 27:15.000
And this gives us a little bit of a sense

27:15.000 --> 27:17.000
of how much power is used on the power sockets.

27:17.000 --> 27:19.000
And this gives us the full picture

27:19.000 --> 27:21.000
of how much power is used by the entire computer.

27:21.000 --> 27:23.000
But there's one problem.

27:23.000 --> 27:25.000
The maximum sampling rate is 50 hertz,

27:25.000 --> 27:27.000
which is in Europe the rate at which

27:27.000 --> 27:29.000
the current is oscillating for AC power,

27:29.000 --> 27:31.000
and they can't get any much faster data than that.

27:31.000 --> 27:33.000
We also got data at the extreme of a hand

27:33.000 --> 27:35.000
getting data from the CPU.

27:35.000 --> 27:37.000
Very precise data,

27:37.000 --> 27:39.000
but missing some of the computer.

27:39.000 --> 27:41.000
And it's even worse on the phone

27:41.000 --> 27:43.000
because we miss the entire screen or things like this.

27:43.000 --> 27:45.000
So the question was,

27:45.000 --> 27:47.000
is there anything in the middle we could look into?

27:47.000 --> 27:49.000
And yes, there is.

27:49.000 --> 27:51.000
If we are talking about mobile phones

27:51.000 --> 27:53.000
or also laptops, there's the charger.

27:53.000 --> 27:55.000
Maybe we could instrument the charger instead.

27:55.000 --> 27:57.000
And yes, we can.

27:57.000 --> 27:59.000
It turns out there are devices

27:59.000 --> 28:01.000
that are already on the market that are sold,

28:01.000 --> 28:03.000
and their purpose is to test chargers

28:03.000 --> 28:05.000
to verify how good the charger is.

28:05.000 --> 28:07.000
Check if the current

28:07.000 --> 28:09.000
and voltage of the charger is stable.

28:09.000 --> 28:11.000
And to be able to do that,

28:11.000 --> 28:13.000
they need to sample very quickly.

28:13.000 --> 28:15.000
That's very interesting for us.

28:15.000 --> 28:17.000
And those devices are affordable,

28:17.000 --> 28:19.000
at least if you compare them to the smartphone

28:19.000 --> 28:21.000
you used to test your web application on.

28:21.000 --> 28:23.000
Some can export data

28:23.000 --> 28:25.000
to a computer for USB or for Bluetooth.

28:25.000 --> 28:27.000
And one thing that's really important to note

28:27.000 --> 28:29.000
to understand how this works

28:29.000 --> 28:31.000
is when you charge your battery,

28:31.000 --> 28:33.000
when you unplug your charger,

28:33.000 --> 28:35.000
you want the battery to be completely full.

28:35.000 --> 28:37.000
So anything that was done by the smartphone

28:37.000 --> 28:39.000
while your battery was on the phone

28:39.000 --> 28:41.000
was done by the smartphone

28:41.000 --> 28:43.000
while your battery was already full,

28:43.000 --> 28:45.000
it's still using power from the charger

28:45.000 --> 28:47.000
because if it was taking from the battery,

28:47.000 --> 28:49.000
the battery would not be full when you unplug the charger.

28:49.000 --> 28:51.000
That means that if we wait enough for the battery

28:51.000 --> 28:53.000
to be completely full,

28:53.000 --> 28:55.000
and we still measure how much power goes through the charger,

28:55.000 --> 28:57.000
we actually measure how much power is used by the phone.

28:57.000 --> 28:59.000
And that's exactly what we want

28:59.000 --> 29:01.000
if we want to power profile.

29:01.000 --> 29:03.000
Another interesting detail is some of those power meters,

29:03.000 --> 29:05.000
they support more than 200 watts,

29:05.000 --> 29:07.000
which is more than enough

29:07.000 --> 29:09.000
to power profile any laptop

29:09.000 --> 29:11.000
that charges for USB power delivery.

29:11.000 --> 29:13.000
So here it's a MacBook that I was charging.

29:13.000 --> 29:15.000
So looking at power data

29:15.000 --> 29:17.000
from those kind of power meters

29:17.000 --> 29:19.000
is what we call external power profiling,

29:19.000 --> 29:21.000
and we shipped it in Firefox 121.

29:23.000 --> 29:25.000
So how did we make this work?

29:25.000 --> 29:27.000
Those devices that are

29:27.000 --> 29:29.000
charger testers,

29:29.000 --> 29:31.000
they are few that are available.

29:31.000 --> 29:33.000
There's only Windows software that comes with it.

29:33.000 --> 29:35.000
The software is in English,

29:35.000 --> 29:37.000
which means that

29:37.000 --> 29:39.000
if we hear on those Chinese characters,

29:39.000 --> 29:41.000
not sure what they mean.

29:41.000 --> 29:43.000
And there's poorly documented API

29:43.000 --> 29:45.000
that was nice when I wrote this.

29:45.000 --> 29:47.000
What actually that meant is that

29:47.000 --> 29:49.000
I found one device some day

29:49.000 --> 29:51.000
that has what they called an open API.

29:51.000 --> 29:53.000
Open API means there's one page

29:53.000 --> 29:55.000
of example C++ source code with Chinese commands.

29:57.000 --> 29:59.000
That was enough to get started.

29:59.000 --> 30:01.000
And then thankfully there are great

30:01.000 --> 30:03.000
and powerful reverse engineering tools.

30:03.000 --> 30:05.000
And I tested with this USB light

30:05.000 --> 30:07.000
that you can see on the slide here,

30:07.000 --> 30:09.000
but as various levels of brightness.

30:09.000 --> 30:11.000
And this was a stable load that

30:11.000 --> 30:13.000
could let me know which data to expect.

30:13.000 --> 30:15.000
And all the power meters on this slide

30:15.000 --> 30:17.000
are compatible with the Firefox profiler.

30:17.000 --> 30:19.000
They all produce nice power tracks.

30:19.000 --> 30:21.000
Well, some not so nice.

30:21.000 --> 30:23.000
Some produce very nice power tracks.

30:25.000 --> 30:27.000
And it's plug and play.

30:27.000 --> 30:29.000
If you run the script that's

30:29.000 --> 30:31.000
in this GitHub repository,

30:31.000 --> 30:33.000
you can see the device and start power profiling.

30:33.000 --> 30:35.000
You will see this power track appear out of magic.

30:37.000 --> 30:39.000
And it's nice that it just works

30:39.000 --> 30:41.000
because all the windows that came with those

30:41.000 --> 30:43.000
it's terrible, you don't want to try to use it.

30:45.000 --> 30:47.000
The readme file in this GitHub repository

30:47.000 --> 30:49.000
includes a list of supported devices.

30:49.000 --> 30:51.000
So that's basically the names of the device

30:51.000 --> 30:53.000
you saw in the previous pictures.

30:53.000 --> 30:55.000
Next to the name of each device,

30:55.000 --> 30:57.000
there's a link to an example profile

30:57.000 --> 30:59.000
of what you can get from it.

30:59.000 --> 31:01.000
And you can see that using...

31:01.000 --> 31:03.000
So that was...

31:03.000 --> 31:05.000
with this USB test light that I was using.

31:05.000 --> 31:07.000
Various levels of brightness.

31:07.000 --> 31:09.000
And you can see in the good example profile

31:09.000 --> 31:11.000
that there's what looks like a lot of noise here.

31:13.000 --> 31:15.000
It's actually not noise.

31:15.000 --> 31:17.000
If you zoom into the profile, you will see

31:17.000 --> 31:19.000
that it's a very regular pattern.

31:19.000 --> 31:21.000
And it exposes internal details of how the light

31:21.000 --> 31:23.000
is using power.

31:23.000 --> 31:25.000
It's sampling every milliseconds.

31:25.000 --> 31:27.000
And if you look at the bad example here,

31:27.000 --> 31:29.000
there's no noise, but it's just because it's sampling

31:29.000 --> 31:31.000
every 10 milliseconds, so it's taking an average.

31:31.000 --> 31:33.000
And the worst part about it is what's happening here.

31:35.000 --> 31:37.000
We are turning off the light.

31:37.000 --> 31:39.000
It should use zero power.

31:39.000 --> 31:41.000
But here we see a linear decline for 500 milliseconds.

31:41.000 --> 31:43.000
If I want to profile anything I'm doing with my software,

31:43.000 --> 31:45.000
a latency of 500 milliseconds

31:45.000 --> 31:47.000
is completely useless,

31:47.000 --> 31:49.000
so this device can almost go in the trash.

31:51.000 --> 31:53.000
In all the future examples I will be sharing,

31:53.000 --> 31:55.000
whenever you see something labeled USB power,

31:55.000 --> 31:57.000
it means power data coming

31:57.000 --> 31:59.000
from those kind of external power meters.

32:01.000 --> 32:03.000
Here's the first example of power profiling

32:03.000 --> 32:05.000
using this system.

32:05.000 --> 32:07.000
It's what we call an Android remote profile.

32:07.000 --> 32:09.000
Remote profiling means

32:09.000 --> 32:11.000
that the profiler was not running on the same device

32:11.000 --> 32:13.000
than what was used to start the profiler.

32:13.000 --> 32:15.000
So in this case, the profiler was running

32:15.000 --> 32:17.000
on an Android phone running Firefox.

32:19.000 --> 32:21.000
And I was controlling the profiler from my laptop

32:21.000 --> 32:23.000
that was also controlling the power meter.

32:25.000 --> 32:27.000
And when capturing the profile,

32:27.000 --> 32:29.000
both sources of data were merged,

32:29.000 --> 32:31.000
and we got this profile.

32:31.000 --> 32:33.000
We can again validate that it makes sense.

32:33.000 --> 32:35.000
You see the shape of the CPU user,

32:35.000 --> 32:37.000
the Android device.

32:37.000 --> 32:39.000
You see the shape of the power track.

32:39.000 --> 32:41.000
They match pretty well,

32:41.000 --> 32:43.000
which shows that we're actually measuring the right thing.

32:43.000 --> 32:45.000
And the baseline is relatively high here.

32:45.000 --> 32:47.000
It's probably because the screen was on at the time.

32:47.000 --> 32:49.000
And it's again a profile of loading the Wikipedia on page.

32:49.000 --> 32:51.000
We can see on the screenshots here.

32:51.000 --> 32:53.000
So as I said before,

32:53.000 --> 32:55.000
I have a link to all my profiles at the bottom of the slides.

32:55.000 --> 32:57.000
You can look at them now if you have a laptop in front of you.

32:57.000 --> 32:59.000
You can also look at them later

32:59.000 --> 33:01.000
if you look at the slides and want to see it again.

33:03.000 --> 33:05.000
I have more examples coming next.

33:05.000 --> 33:07.000
So I'm giving the links to the slides again.

33:07.000 --> 33:09.000
I will mostly be telling you two stories

33:09.000 --> 33:11.000
on how we use power profiling

33:11.000 --> 33:13.000
to understand what was happening.

33:13.000 --> 33:15.000
So the first story is I had one of my colleagues tell me,

33:15.000 --> 33:17.000
hey Florian, have you seen this new green leaf icon

33:17.000 --> 33:19.000
you see in the Windows Task Manager next to Edge?

33:19.000 --> 33:21.000
What is it? Can we have it too?

33:21.000 --> 33:23.000
So we're wondering what it is.

33:23.000 --> 33:25.000
It's screen washing.

33:25.000 --> 33:27.000
It's Microsoft doing something fantastic

33:27.000 --> 33:29.000
about the environment that we should know about.

33:29.000 --> 33:31.000
It turns out there's a Windows 11 API

33:31.000 --> 33:33.000
to let Windows know that a process is doing nothing

33:33.000 --> 33:35.000
that's immediately visible to users

33:35.000 --> 33:37.000
and that instead of optimizing

33:37.000 --> 33:39.000
for finishing as quickly as possible,

33:39.000 --> 33:41.000
the kernel should optimize

33:41.000 --> 33:43.000
and scheduling for resource use.

33:43.000 --> 33:45.000
We could use this API for Firefox 2.

33:47.000 --> 33:49.000
The power profile you see on screen here

33:49.000 --> 33:51.000
is the result when using a test case.

33:51.000 --> 33:53.000
And the first half of the profile,

33:53.000 --> 33:55.000
the test case was in a foreground tab

33:55.000 --> 33:57.000
and the test case is a stupid piece of JavaScript

33:57.000 --> 33:59.000
using as much CPU time as it can

33:59.000 --> 34:01.000
with an infinite loop.

34:01.000 --> 34:03.000
The second half of the profile,

34:03.000 --> 34:05.000
the tab was in the background

34:05.000 --> 34:07.000
and we can see the dramatic difference in power use.

34:07.000 --> 34:09.000
So yes, it actually does something.

34:09.000 --> 34:11.000
It's pretty significant.

34:11.000 --> 34:13.000
So putting background content processes

34:13.000 --> 34:15.000
in the eco quality of service

34:15.000 --> 34:17.000
on Windows 11 is something we shipped

34:17.000 --> 34:19.000
to Firefox 108, so that's quite a while ago.

34:19.000 --> 34:21.000
We have a first browser to do it

34:21.000 --> 34:23.000
if we exclude edge that did it

34:23.000 --> 34:25.000
when the API was introduced in Windows,

34:25.000 --> 34:27.000
of course.

34:27.000 --> 34:29.000
Chrome has followed a couple months later,

34:29.000 --> 34:31.000
so now I think everybody on the web benefits

34:31.000 --> 34:33.000
more or less, and this is great

34:33.000 --> 34:35.000
because it actually saves a lot of power.

34:35.000 --> 34:37.000
And I will explore a bit more

34:37.000 --> 34:39.000
how this works in the next few slides.

34:39.000 --> 34:41.000
So we try to do the same thing on Mac.

34:41.000 --> 34:43.000
So this is a profile on a Mac

34:43.000 --> 34:45.000
with an Intel CPU

34:45.000 --> 34:47.000
and we see the same nice

34:47.000 --> 34:49.000
decline in power use.

34:49.000 --> 34:51.000
And you will see here that I have a power

34:51.000 --> 34:53.000
reported by the CPU itself

34:53.000 --> 34:55.000
but also power from the USB power meter.

34:55.000 --> 34:57.000
So I checked also the power use by the entire laptop.

34:59.000 --> 35:01.000
So they all decline at the same point

35:01.000 --> 35:03.000
when we switch to the background.

35:03.000 --> 35:05.000
And you can see the numbers, they are pretty dramatic.

35:05.000 --> 35:07.000
The cores drop from 18 to 1.6 watts.

35:07.000 --> 35:09.000
And the entire Macbook

35:09.000 --> 35:11.000
from 30 to 10 watts.

35:11.000 --> 35:13.000
The numbers are even better

35:13.000 --> 35:15.000
on Apple Silicon, but this example

35:15.000 --> 35:17.000
is an Intel CPU to be able to compare

35:17.000 --> 35:19.000
with what I was showing for Windows.

35:19.000 --> 35:21.000
And next, I wonder

35:21.000 --> 35:23.000
so using less power when doing something stupid

35:23.000 --> 35:25.000
like an infinite loop is great,

35:25.000 --> 35:27.000
but that's usually not what you want to do

35:27.000 --> 35:29.000
with your code in your web pages.

35:29.000 --> 35:31.000
So what if the code was,

35:31.000 --> 35:33.000
the test case was doing an actual computation?

35:33.000 --> 35:35.000
So this is computing Fibonacci something.

35:35.000 --> 35:37.000
And you can see that when it's in the background,

35:37.000 --> 35:39.000
it uses dramatically less power

35:39.000 --> 35:41.000
to do the same thing.

35:41.000 --> 35:43.000
But also it takes a lot longer.

35:43.000 --> 35:45.000
So I have the numbers in the table here.

35:45.000 --> 35:47.000
It took more than three times as long.

35:47.000 --> 35:49.000
It used less CPU,

35:49.000 --> 35:51.000
the CPU used less energy,

35:51.000 --> 35:53.000
but the entire computer used more during that time.

35:53.000 --> 35:55.000
So if you can control the entire

35:55.000 --> 35:57.000
component system,

35:57.000 --> 35:59.000
typically in server environments where

35:59.000 --> 36:01.000
once you are done with the task you are doing,

36:01.000 --> 36:03.000
you can shut down the server,

36:03.000 --> 36:05.000
try to finish as quickly as possible.

36:05.000 --> 36:07.000
If you are like us in the situation

36:07.000 --> 36:09.000
of a web browser where there are things

36:09.000 --> 36:11.000
in the background that have no user impact,

36:11.000 --> 36:13.000
but you don't control what happens to the computer

36:13.000 --> 36:15.000
because it's the user's computer,

36:15.000 --> 36:17.000
then reducing the resources

36:17.000 --> 36:19.000
for everything that's in the background makes a lot of sense.

36:19.000 --> 36:21.000
And the way that this works

36:21.000 --> 36:23.000
on the CPUs that are not the CPUs,

36:23.000 --> 36:25.000
all the cores are the same,

36:25.000 --> 36:27.000
is probably by reducing the CPU frequency.

36:27.000 --> 36:29.000
And there's one slide where I'm trying to check this,

36:29.000 --> 36:31.000
because the profiler can also record CPU frequency.

36:31.000 --> 36:33.000
This profile was on Android.

36:33.000 --> 36:35.000
And you also see that whenever I have

36:35.000 --> 36:37.000
a spike in the CPU frequency,

36:37.000 --> 36:39.000
I have a small spike in power use.

36:39.000 --> 36:41.000
And when the CPU frequency remain high for a while,

36:41.000 --> 36:43.000
the power use was also high.

36:43.000 --> 36:45.000
So that kind of confirms the hypothesis here.

36:45.000 --> 36:47.000
Second story.

36:47.000 --> 36:49.000
This is a real life story.

36:49.000 --> 36:51.000
I was trying to fill in a survey

36:51.000 --> 36:53.000
that had many checkboxes,

36:53.000 --> 36:55.000
and I moved

36:55.000 --> 36:57.000
that web page to my external 4K display

36:57.000 --> 36:59.000
and put it in a maximized window

36:59.000 --> 37:01.000
so that I could see all the things that I was being asked to fill in.

37:01.000 --> 37:03.000
And I got distracted.

37:03.000 --> 37:05.000
Maybe by a baby or something.

37:05.000 --> 37:07.000
Came back a few minutes later,

37:07.000 --> 37:09.000
my laptop was super hot,

37:09.000 --> 37:11.000
the fan was extremely noisy,

37:11.000 --> 37:13.000
and I was wondering what's going on.

37:13.000 --> 37:15.000
Of course, I profiled.

37:15.000 --> 37:17.000
You could have guessed that.

37:17.000 --> 37:19.000
In the profile, I noticed something like this.

37:19.000 --> 37:21.000
So this is an artificial test case.

37:21.000 --> 37:23.000
I'm not seeing what the bad web page was.

37:23.000 --> 37:25.000
I could see that the color of the background

37:25.000 --> 37:27.000
was slowly changing with the gradients.

37:27.000 --> 37:29.000
With my eyes only, I could never see that.

37:29.000 --> 37:31.000
Like it was changing over the time of a few minutes.

37:31.000 --> 37:33.000
So completely useless animation.

37:33.000 --> 37:35.000
I tried to replicate this with animation

37:35.000 --> 37:37.000
that moves slightly faster than what we see it well.

37:37.000 --> 37:39.000
You can see very high CPU core use,

37:39.000 --> 37:41.000
high memory power use,

37:41.000 --> 37:43.000
high GPU power use,

37:43.000 --> 37:45.000
high everything power use.

37:45.000 --> 37:47.000
It's terrible.

37:47.000 --> 37:49.000
So if you think about it,

37:49.000 --> 37:51.000
I said an external 4K display,

37:51.000 --> 37:53.000
that means 8 million pixels.

37:53.000 --> 37:55.000
I'm in a modern MacBook that has a refresh rate of 120 Hz.

37:55.000 --> 37:57.000
That means we forced the laptop

37:57.000 --> 37:59.000
to compute the colors

37:59.000 --> 38:01.000
of a billion pixels per second.

38:01.000 --> 38:03.000
So no surprise that it was hot.

38:05.000 --> 38:07.000
Then I tried to explore my hypothesis

38:07.000 --> 38:09.000
because I'm saying it's because there are many pixels

38:09.000 --> 38:11.000
many times per second.

38:11.000 --> 38:13.000
Maybe we could check that it's correct.

38:13.000 --> 38:15.000
So on the next slide is the same test case,

38:15.000 --> 38:17.000
but I tried to reduce to a minimum the size of the window.

38:17.000 --> 38:19.000
We can see on the shape of the chart

38:19.000 --> 38:21.000
the impact that it has on power use.

38:21.000 --> 38:23.000
So on GPU power use, the impact was very dramatic.

38:23.000 --> 38:25.000
When the window was tiny,

38:25.000 --> 38:27.000
there was almost no power use left.

38:27.000 --> 38:29.000
You can see there are big spikes here.

38:29.000 --> 38:31.000
While I was resizing,

38:31.000 --> 38:33.000
this is because whenever we change the size of the window

38:33.000 --> 38:35.000
even by one pixel,

38:35.000 --> 38:37.000
we need to recompute the layout of the browser UI.

38:37.000 --> 38:39.000
So high CPU use while resizing,

38:39.000 --> 38:41.000
but very low otherwise once the window was small.

38:45.000 --> 38:47.000
I have all the numbers on the side.

38:47.000 --> 38:49.000
I won't read them outside, but you can look at the slides later.

38:51.000 --> 38:53.000
Another thing I did to test is there's a hidden preference

38:53.000 --> 38:55.000
in Firefox to limit the refresh rate.

38:55.000 --> 38:57.000
And I tried various refresh rates.

38:57.000 --> 38:59.000
And we can also see that the power use

38:59.000 --> 39:01.000
declines dramatically when reducing

39:01.000 --> 39:03.000
how many frames with display per second.

39:05.000 --> 39:07.000
So this validates the hypothesis we had,

39:07.000 --> 39:09.000
but it's just too many pixels too many times.

39:09.000 --> 39:11.000
So one thing to take away if you're a web developer

39:11.000 --> 39:13.000
and you're thinking about animating the background of a web page,

39:13.000 --> 39:15.000
think about it more than twice.

39:15.000 --> 39:17.000
It's absolutely terrible. You should not do it.

39:21.000 --> 39:23.000
And then I was thinking, okay, many pixels on screen.

39:23.000 --> 39:25.000
There's one case where we typically do it

39:25.000 --> 39:27.000
is if we are watching a video.

39:27.000 --> 39:29.000
And then it makes sense, right?

39:29.000 --> 39:31.000
So this is a profile of watching a YouTube video.

39:31.000 --> 39:33.000
First in a frame and then full screen.

39:33.000 --> 39:35.000
So you can see in a frame here the amount of GPU power use.

39:37.000 --> 39:39.000
And then full screen here.

39:39.000 --> 39:41.000
And there are spikes while we were entering

39:41.000 --> 39:43.000
and leaving full screen because there's a big animation

39:43.000 --> 39:45.000
and things we need to do with the UI.

39:47.000 --> 39:49.000
We can also see that the CPU power use was relatively low.

39:49.000 --> 39:51.000
I think this validates that graphic accelerations

39:51.000 --> 39:53.000
and hardware decoding were working well.

39:55.000 --> 39:57.000
So this is all good news.

39:59.000 --> 40:01.000
One last example about things to avoid as a web developer.

40:05.000 --> 40:07.000
Timers.

40:07.000 --> 40:09.000
Waking up a CPU is expensive,

40:09.000 --> 40:11.000
especially if you wake it up to do nothing.

40:11.000 --> 40:13.000
And using the web API, set time out,

40:13.000 --> 40:15.000
you can wake up the thread up to every 4 milliseconds.

40:19.000 --> 40:21.000
And this is what we see in this profile.

40:21.000 --> 40:23.000
This is a test case that just wakes up the CPU

40:23.000 --> 40:25.000
for the sake of doing nothing

40:25.000 --> 40:27.000
and sleeping again and waking it up again.

40:27.000 --> 40:29.000
And you can see a spike in power use

40:29.000 --> 40:31.000
whenever the CPU wakes up.

40:31.000 --> 40:33.000
And then the tab is put in the background.

40:33.000 --> 40:35.000
And when the tab is in the background,

40:35.000 --> 40:37.000
Firefox limits timers to 1s per second.

40:37.000 --> 40:39.000
And you can see this one tiny spike

40:39.000 --> 40:41.000
here in power use at the very end.

40:41.000 --> 40:43.000
So...

40:43.000 --> 40:45.000
This shows that throttling timers is a good idea.

40:47.000 --> 40:49.000
This is just about the CPU wakeups.

40:49.000 --> 40:51.000
If you are doing something using actual CPU time

40:51.000 --> 40:53.000
in those wakeups, this would dominate

40:53.000 --> 40:55.000
the power profile, of course.

40:57.000 --> 40:59.000
And if I have a few more minutes,

40:59.000 --> 41:01.000
I have a few more things that are worth sharing.

41:01.000 --> 41:03.000
One is Firefox as a built-in process manager.

41:05.000 --> 41:07.000
And if you see this icon here,

41:09.000 --> 41:11.000
whenever you have a name of a content process,

41:11.000 --> 41:13.000
which is typically what you will care about

41:13.000 --> 41:15.000
if you do a website,

41:15.000 --> 41:17.000
a profile icon will appear.

41:17.000 --> 41:19.000
If you click it, 5 seconds later,

41:19.000 --> 41:21.000
you will see a profile of the entire process.

41:21.000 --> 41:23.000
And if you are on an Apple Silicon machine

41:23.000 --> 41:25.000
where we have per-processed power data,

41:25.000 --> 41:27.000
you will see a power fraction

41:27.000 --> 41:29.000
showing how much power your website used at any given time.

41:31.000 --> 41:33.000
You might have seen in my slides and in my demo

41:33.000 --> 41:35.000
that whenever I was showing energy values next to it,

41:35.000 --> 41:37.000
there was a CO2 equivalent value,

41:37.000 --> 41:39.000
which is the equivalent of carbon emissions

41:39.000 --> 41:41.000
we would do...

41:45.000 --> 41:47.000
Those were created using

41:47.000 --> 41:49.000
the CO2.js library from the GreenWeb Foundation.

41:49.000 --> 41:51.000
This was a very welcome contribution we had.

41:51.000 --> 41:53.000
So thanks for that.

41:55.000 --> 41:57.000
I shared with you a very quick

41:57.000 --> 41:59.000
look at the bandwidth track

41:59.000 --> 42:01.000
while we were looking at the demo

42:01.000 --> 42:03.000
on the open-suit map.

42:03.000 --> 42:05.000
So the bandwidth track that you have

42:05.000 --> 42:07.000
that lets us know how much data has been transferred

42:07.000 --> 42:09.000
in regards to CO2 equivalents.

42:09.000 --> 42:11.000
This is a big question that I got

42:11.000 --> 42:13.000
after doing a preview stork in a different place

42:13.000 --> 42:15.000
a couple months ago.

42:15.000 --> 42:17.000
I was very much a participant that on the A floor

42:17.000 --> 42:19.000
our profiling is fantastic.

42:19.000 --> 42:21.000
We wished we had a tool like this

42:21.000 --> 42:23.000
for a very long time and it's great

42:23.000 --> 42:25.000
for optimizing for performance and sustainability.

42:25.000 --> 42:27.000
But you know what everybody else is looking at

42:27.000 --> 42:29.000
is how much data has been transferred

42:29.000 --> 42:31.000
because that's what everybody else was measuring

42:31.000 --> 42:33.000
until you had power profiling.

42:33.000 --> 42:35.000
And in the Firefox profiler,

42:35.000 --> 42:37.000
you already have all the information about networking

42:37.000 --> 42:39.000
because there's all the network requests that are shown.

42:39.000 --> 42:41.000
Could you just show how much data has been transferred

42:41.000 --> 42:43.000
and put a CO2 equivalent somewhere?

42:43.000 --> 42:45.000
What about it? Something like a great idea, so we did.

42:45.000 --> 42:47.000
We did it.

42:47.000 --> 42:49.000
This is shipping in Firefox 123

42:49.000 --> 42:51.000
which is currently in beta

42:51.000 --> 42:53.000
shipping in a couple weeks.

42:53.000 --> 42:55.000
So we did use that.

42:55.000 --> 42:57.000
Maybe the last thing is

42:57.000 --> 42:59.000
if you're out of luck

42:59.000 --> 43:01.000
and you can't power profile.

43:01.000 --> 43:03.000
And there could be a few reasons.

43:03.000 --> 43:05.000
Maybe you're on a virtual machine

43:05.000 --> 43:07.000
so you don't have direct access to the CPU hardware.

43:07.000 --> 43:09.000
Maybe you are using a snap package

43:09.000 --> 43:11.000
and then there's nothing you can do.

43:11.000 --> 43:13.000
You're not good at Linux and you're not good,

43:13.000 --> 43:15.000
so you can't do the magic command to let the kernel know

43:15.000 --> 43:17.000
that it's fine to let us know about how much power is used.

43:17.000 --> 43:19.000
There's a hidden feature in the profiler

43:19.000 --> 43:21.000
because it's not fully polished yet.

43:21.000 --> 43:23.000
If you open the DevTools console

43:23.000 --> 43:25.000
and type experimental.enableProcessCPUTracks,

43:25.000 --> 43:27.000
you will see new track appearing

43:27.000 --> 43:29.000
that say ProcessCPU.

43:29.000 --> 43:31.000
And you can see in this example that

43:31.000 --> 43:33.000
the shape of the power track

43:33.000 --> 43:35.000
and the shape of the CPU's track

43:35.000 --> 43:37.000
match extremely well.

43:37.000 --> 43:39.000
The one case

43:39.000 --> 43:41.000
where they won't match is if you do

43:41.000 --> 43:43.000
massive animations

43:43.000 --> 43:45.000
like the full screen animation I was showing before.

43:45.000 --> 43:47.000
But I said you should not do that anyway.

43:47.000 --> 43:49.000
So if you are not doing anything completely stupid

43:49.000 --> 43:51.000
that's feasible,

43:51.000 --> 43:53.000
that's

43:53.000 --> 43:55.000
something you could look into

43:55.000 --> 43:57.000
as an alternative.

43:57.000 --> 43:59.000
Another conclusion,

43:59.000 --> 44:01.000
power profiling is possible.

44:01.000 --> 44:03.000
It's easy, it's fun, I encourage you to do it.

44:03.000 --> 44:05.000
Play with it, it's really simple.

44:05.000 --> 44:07.000
This is why I did a live demo

44:07.000 --> 44:09.000
so that you see how simple it is to use it.

44:09.000 --> 44:11.000
But if you are really thinking about

44:11.000 --> 44:13.000
web sustainability,

44:13.000 --> 44:15.000
where you will have the biggest impact,

44:15.000 --> 44:17.000
even though it's less visible,

44:17.000 --> 44:19.000
is on-show web compatibility with all browsers

44:19.000 --> 44:21.000
and especially with all devices

44:21.000 --> 44:23.000
that still have supported browsers,

44:23.000 --> 44:25.000
so things Firefox ESR.

44:25.000 --> 44:27.000
And think about group web performance

44:27.000 --> 44:29.000
because even if something is still compatible,

44:29.000 --> 44:31.000
if it's super slow, people will want to replace their hardware

44:31.000 --> 44:33.000
and that's where we really lose in terms of sustainability.

44:37.000 --> 44:39.000
Thank you very much

44:39.000 --> 44:41.000
for the talk.

44:41.000 --> 44:43.000
We've got still roughly 5 minutes

44:43.000 --> 44:45.000
for Q&A more or less.

44:45.000 --> 44:47.000
If we've got questions, you can answer.

44:47.000 --> 44:49.000
Do we have questions?

44:49.000 --> 44:51.000
Please raise your hands

44:51.000 --> 44:53.000
so we can come to you

44:53.000 --> 44:55.000
with a microphone.

44:55.000 --> 44:57.000
So, have you ever thought

44:57.000 --> 44:59.000
about the question

44:59.000 --> 45:01.000
of whether you would like to

45:01.000 --> 45:03.000
talk about the Q&A?

45:03.000 --> 45:05.000
Yes, I have.

45:05.000 --> 45:07.000
So, have you ever thought

45:07.000 --> 45:09.000
like when someone

45:09.000 --> 45:11.000
loads a website

45:11.000 --> 45:13.000
in localhost

45:13.000 --> 45:15.000
and Firefox can detect

45:15.000 --> 45:17.000
that it might use too much power

45:17.000 --> 45:19.000
to actually show like a pop-up

45:19.000 --> 45:21.000
hey, your local

45:21.000 --> 45:23.000
host app is using too much power,

45:23.000 --> 45:25.000
check out Firefox

45:25.000 --> 45:27.000
Profiler and Power Meter.

45:27.000 --> 45:29.000
Would that be feasible to

45:29.000 --> 45:31.000
basically push devs

45:31.000 --> 45:33.000
to fix their own apps?

45:33.000 --> 45:35.000
Would that be

45:35.000 --> 45:37.000
a good idea?

45:37.000 --> 45:39.000
I have not understood.

45:39.000 --> 45:41.000
There's so much echo that I couldn't understand

45:41.000 --> 45:43.000
what you are saying.

45:43.000 --> 45:45.000
Yeah, there was too much echo in there.

45:45.000 --> 45:47.000
Yeah, so basically the question is

45:47.000 --> 45:49.000
have you ever thought

45:49.000 --> 45:51.000
to push the Firefox Profiler

45:51.000 --> 45:53.000
towards developers

45:53.000 --> 45:55.000
when they're running apps

45:55.000 --> 45:57.000
on localhost and they're using too much

45:57.000 --> 45:59.000
CPU

45:59.000 --> 46:01.000
to have like a message

46:01.000 --> 46:03.000
hey, check out Firefox Profiler

46:03.000 --> 46:05.000
it will show you

46:05.000 --> 46:07.000
your app is slow and why it's slow.

46:07.000 --> 46:09.000
Okay, so you're suggesting that we

46:09.000 --> 46:11.000
could detect the case of web developers

46:11.000 --> 46:13.000
because they are running something on localhost

46:13.000 --> 46:15.000
and they are definitely developers and then we should show warning messages.

46:15.000 --> 46:17.000
Yeah, and push like

46:17.000 --> 46:19.000
promote the profiler to devs

46:19.000 --> 46:21.000
directly this way.

46:21.000 --> 46:23.000
That's an interesting idea, not just for

46:23.000 --> 46:25.000
excessive power use but also when something

46:25.000 --> 46:27.000
is dramatically slow we could let them know

46:27.000 --> 46:29.000
hey, you know we have good performance tools, you should have a look at them.

46:29.000 --> 46:31.000
Thanks for the idea.

46:35.000 --> 46:37.000
More questions?

46:37.000 --> 46:39.000
You have another question?

46:43.000 --> 46:45.000
So

46:45.000 --> 46:47.000
thus, like optimizing

46:47.000 --> 46:49.000
for power usage

46:49.000 --> 46:51.000
differ a lot from

46:51.000 --> 46:53.000
optimizing for like

46:53.000 --> 46:55.000
CPU usage because I guess

46:55.000 --> 46:57.000
I mean the less CPU you use

46:57.000 --> 46:59.000
the less power you use and the less network you use

46:59.000 --> 47:01.000
the less power you use

47:01.000 --> 47:03.000
but are there like other things to

47:03.000 --> 47:05.000
consider when you're trying to optimize

47:05.000 --> 47:07.000
for power usage

47:07.000 --> 47:09.000
than just useless resources?

47:11.000 --> 47:13.000
So if I understood the question

47:13.000 --> 47:15.000
is there other things to optimize for

47:15.000 --> 47:17.000
to use less power over than CPU use?

47:17.000 --> 47:19.000
Is that the question?

47:19.000 --> 47:21.000
Yeah, of course.

47:21.000 --> 47:23.000
So the power use is typically

47:23.000 --> 47:25.000
first CPU that really dominates

47:25.000 --> 47:27.000
it's both CPU time

47:27.000 --> 47:29.000
and waking up the CPU

47:29.000 --> 47:31.000
then there's graphics power use

47:31.000 --> 47:33.000
which is what I was trying to show with the examples

47:33.000 --> 47:35.000
network power use

47:35.000 --> 47:37.000
but you don't consider it as much

47:37.000 --> 47:39.000
if you're setting data from the network over time

47:39.000 --> 47:41.000
that will use power because it will wake up the Wi-Fi chip for example

47:41.000 --> 47:43.000
but in terms of

47:43.000 --> 47:45.000
scale CPU dominates so much

47:45.000 --> 47:47.000
that's really where most people should focus their attention

47:47.000 --> 47:49.000
at least when thinking about web pages.

47:55.000 --> 47:57.000
So

47:57.000 --> 47:59.000
more questions?

47:59.000 --> 48:01.000
Another thing I should have mentioned is I have

48:01.000 --> 48:03.000
Firefox provider stickers on the table here

48:03.000 --> 48:05.000
and Firefox stickers so you might want to take them.

48:13.000 --> 48:15.000
Shiny, shiny, shiny.

48:15.000 --> 48:17.000
Thank you very much.

48:17.000 --> 48:19.000
Okay, thank you very much.

48:25.000 --> 48:27.000
Maybe

48:27.000 --> 48:29.000
another applause. Thank you.

