WEBVTT

00:00.000 --> 00:07.840
So hello everybody, welcome to this talk.

00:07.840 --> 00:13.960
So the title is poke all the microcontrollers, but the story is GNU poke inside GDB.

00:13.960 --> 00:22.680
So we'll talk about poke and GDB more than microcontrollers, so sorry for that part.

00:22.680 --> 00:24.280
But let's go to the...

00:24.280 --> 00:27.600
So first of all what's GNU poke?

00:27.600 --> 00:37.960
So it's the extensible, you can read it here, so the extensible editor for binary, for structured

00:37.960 --> 00:40.280
binary data, which is...

00:40.280 --> 00:41.840
So what's binary data?

00:41.840 --> 00:49.840
It's data encoded in sequence of bits, binary digits, 0, 1, and like this.

00:49.840 --> 00:51.200
And we can...

00:51.200 --> 00:53.440
So there are structures there.

00:53.440 --> 00:58.080
So it means there are relationship between the different bits, okay, like here.

00:58.080 --> 01:02.320
We like grouped in four bits, in labels.

01:02.320 --> 01:08.240
And like we can assign meaning to a part of like this structure, like this eight bits

01:08.240 --> 01:18.840
as a whole to be a number 67, for example, as a signed integer of bits eight.

01:18.840 --> 01:23.200
Or we can assign a meaning like a character C as ASCII does.

01:23.200 --> 01:25.520
So it's like this is the part of the structures.

01:25.520 --> 01:30.000
And then you can have more complicated structures, like this part is the length and this is the

01:30.000 --> 01:33.160
table everything, so it's something like that.

01:33.160 --> 01:37.600
So and then the editor is that you have the CLI, which you can view the content and you

01:37.600 --> 01:40.560
can change it, hence the name poke.

01:40.560 --> 01:44.440
And it's immediate, so it's like interactive, it's not about like...

01:44.440 --> 01:49.040
It's about when you are exploring the data, you're debugging, you're doing something, you're

01:49.040 --> 01:53.160
designing a data structure, like for encoding data, that's the best thing.

01:53.160 --> 01:55.320
You can use.

01:55.320 --> 01:56.960
So and it's extensible.

01:56.960 --> 02:03.280
So it means that there is a DSL to describe this relationship between the bits, okay?

02:03.280 --> 02:11.400
So bits, we are talking about like we can address each bits.

02:11.400 --> 02:16.680
So and then it's inside of the GNU poke, we have this architecture, which is like you

02:16.680 --> 02:24.160
have a leap poke, which is the library which implements, which has these three major components,

02:24.160 --> 02:33.360
which is the first one is the PKL or poke programming language incremental compiler, which is the

02:33.360 --> 02:37.080
incremental parts means that you can add definition, declaration.

02:37.080 --> 02:40.520
It's statically typed, so it's like add the stuff to the namespace.

02:40.520 --> 02:41.560
You can redefine things.

02:41.560 --> 02:48.120
So the PVM, so it's a compiled language which compiles to a PVM, which is a poke virtual

02:48.120 --> 02:55.040
machine supported by GNU Jitter, written by Luca Sayu.

02:55.040 --> 03:03.400
And so this is, and then all the magics and the bits are lying here, the IU space.

03:03.400 --> 03:12.400
And so and then the other thing is the programming like you can, okay.

03:12.400 --> 03:16.280
So I don't know what's going on.

03:16.280 --> 03:18.840
No, please.

03:18.840 --> 03:20.640
Okay.

03:20.640 --> 03:27.240
I can go to here, ext3, I guess.

03:27.240 --> 03:38.080
Okay, so it's very not easy to see what's, my God.

03:38.080 --> 03:46.760
Okay, so you can write poke and this is a program, which is a command line interface.

03:46.760 --> 03:49.320
So this is the poke part of the story.

03:49.320 --> 03:54.840
So this thing here, and there is a poke D, which is a demon so you can send the poke

03:54.840 --> 04:00.760
code through the Unix socket.

04:00.760 --> 04:03.880
So you can make interfaces and stuff like that.

04:03.880 --> 04:09.840
There is a new component, poke fumpt, which is go through the source code and then there

04:09.840 --> 04:10.880
are some tokens.

04:10.880 --> 04:18.600
You can put poke code there, so it's useful for when you're generating test cases and

04:18.600 --> 04:20.080
stuff, you can write poke.

04:20.080 --> 04:27.200
And the result is the text like you assemble an instruction in poke and then at the end

04:27.200 --> 04:29.800
in the test result, it's a number.

04:29.800 --> 04:36.680
It's a UN32 number in hex, which is you or other tools can work with, but you know it's

04:36.680 --> 04:40.280
like easy to debug because when you're writing the test, you know it's like poke code is

04:40.280 --> 04:41.800
freeable.

04:41.800 --> 04:47.240
So and then also this is useful when you want to or working with hardware, you have a bunch

04:47.240 --> 04:48.360
of registers.

04:48.360 --> 04:55.800
You can design like which bits you want to set and then you generate a .config c file

04:55.800 --> 04:57.240
included and you're done.

04:57.240 --> 05:02.080
You don't need to be like a coding c function, GPIO, init, clock, that thing, something.

05:02.080 --> 05:07.600
You can all put write in poke and then generate the numbers, the final numbers and just write

05:07.600 --> 05:09.720
the number to the register.

05:09.720 --> 05:14.080
So GNU poke in GDB.

05:14.080 --> 05:17.080
WTF so I cannot say the word.

05:17.920 --> 05:20.320
Because GDB is good at debugging.

05:20.320 --> 05:22.040
We are not.

05:22.040 --> 05:29.760
And if you want to be, it's not possible because like after like you become a good thing after

05:29.760 --> 05:32.440
some years.

05:32.440 --> 05:38.400
But GDB is good at debugging, but maybe not as good as Gnu Poke is at poking a binary

05:38.400 --> 05:39.400
data.

05:39.400 --> 05:44.480
So this will be a happy marriage, we hope.

05:44.480 --> 05:50.800
So and the question is okay, what we have already Python integration in GDB.

05:50.800 --> 05:55.720
So why we need a new other language and the answer is right, that's correct.

05:55.720 --> 05:57.760
It's a general purpose language.

05:57.760 --> 06:01.400
You can do whatever you want to do in that language because it's a general purpose language,

06:01.400 --> 06:02.400
of course.

06:02.400 --> 06:04.400
But there is a but here.

06:04.400 --> 06:06.600
It's a general purpose language.

06:06.600 --> 06:13.600
So it's not good because what we're talking about here, like you can be what, yeah?

06:13.600 --> 06:20.280
Because the poke is a DSL, like with uppercase p is the name of the language.

06:20.280 --> 06:25.800
So poke is a DSL specifically designed to describe and poke binary data.

06:25.800 --> 06:30.920
That's the reason we think it's a good combination.

06:30.920 --> 06:33.200
And so what's the talk all about?

06:33.200 --> 06:40.200
So my initial plan was more ambitious and had a lot of things with like life hardware

06:40.200 --> 06:41.200
thinking.

06:41.200 --> 06:43.080
You know when hardware and things come.

06:43.080 --> 06:46.280
So plan is a little bit, but I have hardware here.

06:46.280 --> 06:48.920
I can, I'm not disconnected.

06:48.920 --> 06:50.120
It's here, it's real.

06:50.120 --> 06:55.760
So it's partially right, but not quite as like I wrote in the abstract.

06:55.760 --> 06:57.200
I was too much ambitious.

06:57.200 --> 07:04.040
So okay, so it's a demo for, it was my fault, not a limitation of, oh, really?

07:04.040 --> 07:11.040
Okay, so it's a demo for showing integration of leap poke inside the GC, leap inside GDB

07:11.040 --> 07:14.000
using this hardware, which is I showed you.

07:14.000 --> 07:15.480
So let's see that hardware.

07:15.480 --> 07:17.000
It's this hardware.

07:17.000 --> 07:24.040
It's ESP32 C3 module, which is a risk five based microcontroller.

07:24.040 --> 07:26.200
It's a 32 bit risk five thingy.

07:26.200 --> 07:27.560
So other thing.

07:27.560 --> 07:34.560
And so in this demo, you have to, so here if you can see that I connected these two

07:34.560 --> 07:38.800
pins together to prevent the thing to go to the state.

07:38.800 --> 07:41.840
So like it always boot up correctly.

07:41.840 --> 07:45.120
So the LED, I copy pasted this thing from image.

07:45.120 --> 07:48.880
I have the link in the end in there.

07:48.880 --> 07:51.880
So, and then it's a risk five, so you can see it.

07:51.880 --> 07:59.000
And then this is the flags for the compilers if you want to compile for this destination.

07:59.000 --> 08:05.920
So, and so the idea is for the, like the thing is you want to do the board being.

08:05.920 --> 08:07.080
So this is the idea.

08:07.120 --> 08:09.040
This is the whole thingy.

08:09.040 --> 08:13.960
So, so you'd like to the first step in board bring up is like check the hardware to see

08:13.960 --> 08:18.400
things that should be connected, should be connected, and then things that should not

08:18.400 --> 08:19.600
be connected should not be connected.

08:19.600 --> 08:23.120
So this is the first seems obvious, but very important.

08:23.120 --> 08:27.680
And then you connect it to the public supply with the current and see it doesn't like draw

08:27.680 --> 08:28.400
too much.

08:28.400 --> 08:31.240
And then the next part is this.

08:31.240 --> 08:35.840
So it's classically you can go to the C compiler and then you write things and then gradually

08:35.840 --> 08:40.280
add more stuff GPIO LEDs every laser, you know, add from a small thing.

08:40.280 --> 08:42.440
And then you add more complicated things to that.

08:42.440 --> 08:47.200
But here I'm what I'm proposing is like you have the GDB, you have the JTAC.

08:47.200 --> 08:48.760
So it's a command line interface.

08:48.760 --> 08:49.760
It's alive.

08:49.760 --> 08:53.280
It feels like a shell and you have the superpower of poke.

08:53.280 --> 08:57.920
Then you should be good with experimenting with different ICs.

08:57.920 --> 09:00.880
Writing to registers and timers and stuff, right?

09:00.880 --> 09:03.040
So why this hardware?

09:03.040 --> 09:05.800
Because it provides the JTAC debugging over USB.

09:05.800 --> 09:07.280
You don't need any external program.

09:07.280 --> 09:08.280
That's great.

09:08.280 --> 09:11.120
It's also cheap.

09:11.120 --> 09:16.920
But we need, we have to compile the GDB, which this integration is not upstream.

09:16.920 --> 09:22.280
But then the problem is I use this fork of GDB from Espresse, which is the vendor of this

09:22.280 --> 09:26.440
chip, which is on this branch.

09:26.440 --> 09:32.600
And you can find the, so, and then when you need the leap poke, which is both of those

09:32.600 --> 09:35.600
things work, and you can find it here.

09:35.600 --> 09:41.440
So the patch for the integration is old and not updated.

09:41.440 --> 09:44.560
And yeah, here you can find it.

09:44.560 --> 09:50.520
So I put back ported to the, this branch of the binutils and like ported to newer version

09:50.520 --> 09:54.560
of poke too in order to be able to show something.

09:54.560 --> 09:56.840
So let's poke together.

09:56.840 --> 10:04.000
So we need to connect, use this open OCD to just create a GDB server.

10:04.000 --> 10:08.840
So the next step is we run the GDB, which we compile with that thing.

10:08.840 --> 10:09.840
Okay.

10:09.840 --> 10:10.840
Okay.

10:10.840 --> 10:13.040
So nobody have questions.

10:13.040 --> 10:14.040
I know.

10:14.040 --> 10:17.520
So this is the GDB init.

10:17.520 --> 10:21.680
So you have to limit the amount of hardware and things, blah, blah, blah.

10:21.680 --> 10:26.520
And so this is the other part of the story.

10:26.520 --> 10:27.640
I can, okay.

10:27.640 --> 10:33.640
So the people who want to play with this thing, you can, there is this repo here.

10:33.640 --> 10:36.080
It's not, so the official SDK is huge.

10:36.080 --> 10:37.080
I hate it.

10:37.080 --> 10:43.200
So this is a simple thingy, which in the three ESP, in that branch you have three files,

10:43.200 --> 10:44.360
you have all the things you need.

10:44.360 --> 10:45.640
You can play with that.

10:45.640 --> 10:48.480
And then you have this, where is that thing?

10:48.480 --> 10:50.040
You have this data sheet, which is awesome.

10:50.040 --> 10:52.680
So have fun.

10:52.680 --> 10:53.680
Okay.

10:53.680 --> 10:56.240
So let's go to the next part.

10:56.240 --> 11:00.640
So yeah, this is poke.

11:00.640 --> 11:09.160
And you can see that we can describe numbers with weird width.

11:09.160 --> 11:12.120
So this is an unsigned one with six bits.

11:12.120 --> 11:16.680
This is, yeah, should be fast, but yeah.

11:16.680 --> 11:18.080
So it's a programming language.

11:18.080 --> 11:19.080
So, right?

11:19.080 --> 11:20.080
It's a good one.

11:20.080 --> 11:21.080
Yeah.

11:21.080 --> 11:23.080
Yeah, yeah, yeah.

11:23.080 --> 11:29.080
You should be careful when asking for things.

11:29.080 --> 11:34.080
You know, everything is good.

11:34.080 --> 11:36.280
All is good, as German said.

11:36.280 --> 11:39.400
So here we can also have aliasing for types.

11:39.400 --> 11:42.120
So you can have the things.

11:42.120 --> 11:44.560
So you in seven, you in something.

11:44.560 --> 11:49.000
You can have, okay, it's not important anymore.

11:49.000 --> 11:55.680
Okay, so this is the open OCD part, which you can see that I already did that.

11:55.680 --> 12:00.040
I hope it still work.

12:00.040 --> 12:05.760
And then here we have this GDB thingy with all the hex, the foot.

12:05.760 --> 12:07.840
I put things together so it's not clean.

12:07.840 --> 12:09.720
I did not show you.

12:09.720 --> 12:15.680
So and then I had something.

12:15.680 --> 12:18.760
Yeah, so I have to write it here.

12:18.760 --> 12:27.080
So it was risk five, risk 532LGDB.

12:27.080 --> 12:31.160
You have to have that thingy, GDB in it.

12:31.160 --> 12:33.800
So we are here, please work.

12:33.800 --> 12:36.240
So it's reading, reading flash.

12:36.240 --> 12:37.240
It's doing that.

12:37.240 --> 12:38.240
So it's good, great.

12:38.240 --> 12:42.960
And now the GDB, so it's complain, no, I don't know what you're going, I know what I'm doing.

12:42.960 --> 12:43.960
So it's okay.

12:43.960 --> 12:47.320
So because there is no file in anything, so you had no idea what's going on.

12:47.320 --> 12:53.280
So you can see that layout next.

12:53.280 --> 12:56.640
We have a jump and then we have a like weird stuff somewhere.

12:56.640 --> 12:58.680
So we can go next instruction.

12:58.680 --> 13:00.760
It's somewhere, okay?

13:00.760 --> 13:03.080
So now poke.

13:03.080 --> 13:07.920
You have this poke subcommand, something in the GDB.

13:07.920 --> 13:17.680
So you can say, like you can ask that poke, what's the read the 132 bit unsigned integer

13:17.680 --> 13:21.840
at offset, what's the address of that thing?

13:21.840 --> 13:28.680
0x4123, 1e9c for example.

13:28.680 --> 13:31.080
And is it correct?

13:31.080 --> 13:32.400
I hope it's correct.

13:32.400 --> 13:35.400
So you have to see the same number.

13:35.400 --> 13:36.400
Okay.

13:36.400 --> 13:37.400
I cannot verify that.

13:37.400 --> 13:38.400
So you have to see the number.

13:38.400 --> 13:39.400
Okay.

13:39.400 --> 13:41.400
Oh, we can, we can, we can.

13:41.400 --> 13:44.760
We can like this, verify that.

13:44.760 --> 13:48.000
So it's a content of this.

13:48.000 --> 13:50.320
There's my mouse.

13:50.320 --> 13:52.320
Please work, doesn't work.

13:52.320 --> 13:53.320
Why?

13:53.320 --> 13:57.200
It's your fault, you know.

13:57.200 --> 13:59.960
It's 1e9c.

13:59.960 --> 14:03.800
So you should get the same not getting because of the Indianness.

14:03.800 --> 14:15.960
You have to poke, set Indian to Indian big, I guess, or little or I don't know.

14:15.960 --> 14:17.680
Okay.

14:17.680 --> 14:23.760
Also think, okay, now things are not, still not.

14:23.760 --> 14:25.320
So it was little.

14:25.320 --> 14:26.320
Yeah.

14:26.320 --> 14:27.320
Yeah.

14:27.320 --> 14:29.320
So please work.

14:29.320 --> 14:37.240
Finally things, good.

14:37.240 --> 14:38.960
Then I'm happy about that.

14:38.960 --> 14:42.120
So let's, so you can have everything.

14:42.120 --> 14:44.880
You can define variables here.

14:44.880 --> 14:54.200
You can print stuff here from printfv, something, please work, don't crash, works, and doesn't

14:54.200 --> 14:55.200
crash.

14:55.200 --> 14:59.080
So you see you have the old CLI capabilities in the poke here.

14:59.840 --> 15:09.080
And then you can do, okay, we have, you saw this thing, it's a module.

15:09.080 --> 15:10.880
So we call it people.

15:10.880 --> 15:15.760
So we load this, it's part of the standard, so it's riskv.pk.

15:15.760 --> 15:25.080
So we say pk load riskv and then five or, good.

15:25.080 --> 15:28.000
Yeah, okay, okay.

15:28.000 --> 15:33.880
So you load the module and then next, so it gives you a bunch of definitions.

15:33.880 --> 15:40.440
So what I'm interested in is, in some, here.

15:40.440 --> 15:45.440
So this is an instruction of this risk five.

15:45.440 --> 15:46.600
Please work.

15:46.600 --> 15:47.600
Okay.

15:47.600 --> 15:49.840
So you have this many variants.

15:49.840 --> 15:54.200
So either it's formatted in R format, ISP, whatever, whatever.

15:54.200 --> 15:57.920
So we want to decode that integer.

15:57.920 --> 16:10.760
We had here as an RV32, what was that, instant?

16:10.760 --> 16:14.440
Or yeah, yeah, yeah.

16:14.440 --> 16:23.160
Okay, layout, next, more next, TOI disabled, please.

16:23.160 --> 16:25.160
Okay, okay.

16:25.600 --> 16:27.960
Okay, great.

16:27.960 --> 16:31.840
Thank you, Petru.

16:31.840 --> 16:40.080
Okay, so now you have all the, this part, like immediate part and then this is like,

16:40.080 --> 16:47.080
because it was, if you do remember, it was a, we can disassemble that also.

16:47.080 --> 16:52.160
If we do this.

16:52.160 --> 16:54.360
Okay, thank you.

16:54.360 --> 17:02.680
Disassemble from here to, from here to what the hell.

17:02.680 --> 17:08.080
So C80, let's go for, no, it should be.

17:08.080 --> 17:12.240
No, no, nine, yeah.

17:12.240 --> 17:13.760
A0, yeah.

17:13.760 --> 17:15.480
Yeah, this, yeah.

17:15.480 --> 17:20.680
So here, we had this thingy here.

17:20.680 --> 17:23.920
So then, so it's, now it's a poke variable.

17:23.920 --> 17:27.680
We can call methods on that.

17:27.680 --> 17:34.080
And this is, please unmask, it's not the time to re-syntex.

17:34.080 --> 17:38.120
Okay, so you see that, yeah, we are getting the same thing.

17:38.120 --> 17:41.200
So this gives us by the disassembler.

17:41.200 --> 17:42.640
This is the magic of poke.

17:42.640 --> 17:47.400
So we have other, so you have, I don't know, here, yeah.

17:47.400 --> 17:51.920
We have this, the ATAC sheet, so there are registers, you can configure things this way.

17:51.920 --> 17:53.920
So questions, you're happy now?

17:53.920 --> 17:55.920
Thank you.

17:55.920 --> 17:58.920
Thank you.

17:58.920 --> 18:01.920
Thank you.

18:01.920 --> 18:09.920
For example, can you change the T0 on the flight to some other register or 260 so you

18:09.920 --> 18:12.200
could patch it on the.

18:12.200 --> 18:17.560
If the function is inside this, in the RAM, yeah, definitely you can do that.

18:17.560 --> 18:23.560
I don't have the courage to do that now, but you have to trust me.

18:23.560 --> 18:26.560
Yeah, more questions, please, because.

18:26.560 --> 18:27.560
Yeah.

18:27.560 --> 18:31.640
For microcontrollers, it's like a script language for registers.

18:31.640 --> 18:32.640
Yeah.

18:32.640 --> 18:35.160
It's this one, this one, this one.

18:35.160 --> 18:42.160
So this is SVD, they, they, so you don't need to read all the, all the data sheet to understand.

18:42.160 --> 18:48.720
So you can have libraries like this is, sorry, Jose Python library, which you can use this

18:48.720 --> 18:52.760
description of all registers and you can like generate the syntax for poke and then you

18:52.760 --> 18:56.320
can like load whatever types you want and then poke them.

18:56.320 --> 18:57.320
So you can, yeah.

18:57.320 --> 19:02.320
So if I use like not, yes please, 32, but something normal.

19:02.320 --> 19:03.320
Yeah.

19:03.320 --> 19:04.320
Is it already up to them in GDP?

19:04.320 --> 19:05.320
No, no, I told it's not.

19:05.320 --> 19:06.320
It is false, you know, you can blame him.

19:06.320 --> 19:07.320
He don't care, you know.

19:07.320 --> 19:14.320
So like on a serious note, the problem is that they didn't opera-seam is that the GC,

19:14.320 --> 19:19.320
you're using the boom GC and also GDP uses the boom GC for the guile.

19:19.320 --> 19:20.320
So there's a problem there.

19:20.320 --> 19:24.840
So we have to overchange the GC, please, Luca, you know, you can ask him to give us

19:24.840 --> 19:26.320
a new GC, then we can opera-seam.

19:26.320 --> 19:29.320
So that's the real answer, sorry for joking.

19:29.320 --> 19:30.320
Yeah.

19:30.320 --> 19:31.320
So next one.

19:31.320 --> 19:32.320
Yeah.

19:32.320 --> 19:33.320
So, yeah.

19:34.320 --> 19:39.320
So I told you nobody has any questions, you know.

19:39.320 --> 19:40.320
Thank you.

19:40.320 --> 19:41.320
Thank you.

19:41.320 --> 19:42.320
Wow.

