WEBVTT

00:00.000 --> 00:07.000
Hello and good morning again. So I think we should get started. So I have fun. We are

00:11.600 --> 00:18.600
here something about Metrics 2.0 and how to break the communication silos and the UE

00:19.000 --> 00:26.000
Digital Markets Act. Thank you very much. Let's go.

00:26.000 --> 00:33.000
Good morning everybody. This is cruel and unusual to be here at 10 o'clock in the morning

00:33.720 --> 00:38.840
for me. Quite a lot of you guys. So thank you everybody for turning up to hear all about

00:38.840 --> 00:45.120
the latest things of Metrics and indeed the European Union Digital Markets Act. This

00:45.120 --> 00:49.240
talk is going to be in two halves. First of all we are going to talk about Metrics 2.0

00:49.240 --> 00:53.160
and where things are at back there and then we are going to switch through to the DMA

00:53.160 --> 00:57.080
side. So don't think you are being short changed that the first half doesn't really

00:57.080 --> 01:01.280
talk about DMA because we will make up for it later. Unless I run out of time, which

01:01.280 --> 01:08.280
point will all be about Metrics 2.0. So hopefully folks know that Metrics is an open network

01:08.480 --> 01:12.800
for security and network for security centralised real time communication. I am Matthew and

01:12.800 --> 01:17.080
the project leads and co-founder. Metrics gets used for lots of things but today we

01:17.080 --> 01:22.480
will be talking about chat and VoIP. We will not be talking about fancy stuff like VR, AR

01:22.680 --> 01:29.080
or IoT. Our mission continues to be to build the real time communication layer of the open

01:29.080 --> 01:35.240
web where no single party can ever own your conversations where conversations are replicated

01:35.240 --> 01:42.240
in some magical utopia between all participants. Some stats. So this year I thought we would

01:42.920 --> 01:47.960
look at monthly active users reported home by servers. So when you install Synapse or

01:47.960 --> 01:53.840
then drive you have the option to go and report stats back to the mothership. If you do it

01:53.840 --> 01:59.000
ends up in a nice database called Panopticon and we aggregate it together to see where

01:59.000 --> 02:04.400
things are at. If you look at where things were at back in January of last year we were

02:04.400 --> 02:08.960
at about 2 million monthly active users and since then we have more than doubled up to

02:08.960 --> 02:15.440
almost 4.5 million active users, monthly active users. And people always ask when they see

02:15.520 --> 02:20.920
these graphs does this include bridged users. I asked Neil who wrote this and said Neil does

02:20.920 --> 02:26.520
this include bridged users. He said no. So these are real proper matrix users with access

02:26.520 --> 02:31.600
tokens talking on actual home servers. So it is not exponential at the moment but it

02:31.600 --> 02:38.360
is pretty reassuring linear going up and you can see how the wider public network is growing

02:38.360 --> 02:44.640
there. Another random metric which I think we have to talk about is Stack Overflow. Every

02:45.280 --> 02:50.440
year polls everybody on Stack Overflow as to what their favourite technology is and for

02:50.440 --> 02:56.040
the synchronous communications tool this year and this came out last week or the week before

02:56.040 --> 03:01.440
they asked people what their most desired tool was and also what their most admired tool

03:01.440 --> 03:08.440
was. And honestly we were pretty chuffed the matrix came in as the most admired I hyped

03:08.600 --> 03:15.600
synchronous communication tool going and even beating discord by 0.3 of a percent. Also

03:16.120 --> 03:20.280
the most desired open source one unless you consider signal to be open source which is

03:20.280 --> 03:25.720
a little bit controversial. So kind of fun to see that at least in the Geek Stack Overflow

03:25.720 --> 03:31.280
community people appreciate the stuff that we are doing with matrix. Now I wanted to talk

03:31.280 --> 03:37.360
about uptake across the sort of real worlds of matrix because the project does continue

03:37.400 --> 03:43.000
to grow and grow and decided to focus on the public sector. So what I have done is to try

03:43.000 --> 03:50.000
to map out all of the big public sector deployments I know of of matrix across the world and what

03:50.680 --> 03:54.880
I have tried to also do is to call out the minor problem if you have noticed that we

03:54.880 --> 04:00.800
have around funding matrix development at the moment. In that there are many dots on

04:00.800 --> 04:06.000
this map here and if we go from left to right we go from kind of thousands to tens of thousands

04:06.040 --> 04:10.680
to hundreds of thousands to millions of users on the size of these deployments and then the

04:10.680 --> 04:16.960
size of the yellow circles shows you roughly how much these deployments contribute back

04:16.960 --> 04:22.720
to the costs of the core team working on matrix with a matrix foundation or the folks who work

04:22.720 --> 04:28.520
at elements on the core team. And as you can see it's a little bit asymmetrical in that we

04:28.520 --> 04:35.040
have friends at BWI who support a lot the BV messenger an awful lot of element acts and

04:35.080 --> 04:40.560
matrix rest SDKs thanks to their support. We have the open desk project with BMI in Germany.

04:40.560 --> 04:46.600
We have the Phoenix streets which is sovereign workplace capability and done by data port.

04:46.600 --> 04:51.480
We've got some all the schools in NRW with Barring Point and Loginio and then there are

04:51.480 --> 04:57.880
some smaller deployments like in Sweden, US, UK, NATO, etc. But some of the really big ones

04:57.880 --> 05:04.880
like CHAP or Luxembourg or Hessin or Bavaria which are in millions of users are kind of

05:05.080 --> 05:10.600
contributing very very little back to the core project in terms of cash at least in 2023.

05:10.600 --> 05:16.520
We're hoping to fix this and hopefully all of these instances hence calling them out here.

05:16.520 --> 05:23.760
However, across 2023 honestly we had a really crap year. First of all we'd been depending a lot

05:23.760 --> 05:30.800
on COVID funding which evaporated as the pandemic sort of became a endemic rather than pandemic

05:31.360 --> 05:36.400
and general macroeconomic slowdown thanks to post COVID and the situation in Ukraine.

05:37.120 --> 05:42.000
This problem of lots and lots of deployments basically not helping fund the underlying dev.

05:42.000 --> 05:47.680
We also found a really interesting problem that the FSSE's mantra of public money for public code

05:47.680 --> 05:53.760
encourages governments to only fund features we find. It's like this is taxpayer money,

05:53.760 --> 05:59.360
we have to go and put this to something demonstrable therefore can we implement I know polls, can we

05:59.360 --> 06:05.360
implement location sharing, can we do 3D location sharing and we're saying guys what we really need

06:05.360 --> 06:10.480
is to support the core foundations. We need encryption that works, we need a Rust SDK that

06:10.480 --> 06:15.200
is indestructible in audited and all this stuff and it turns out the getting funding for the

06:15.200 --> 06:21.040
maintenance layer is quite hard. So really 2023 was pretty miserable, we had to shrink the

06:21.600 --> 06:27.440
core team as well as element significantly and this is basically manifested as forcing focus.

06:28.400 --> 06:36.000
So right now we are focusing on matrix 2.0, Synapse, Rust SDK, Enablement X on top,

06:36.560 --> 06:42.240
JS SDK for Enablement Web Enablement Core and nothing else. So I'm sorry but if you're hoping

06:42.240 --> 06:47.280
that I'm going to strap on an Apple Vision Pro and launch myself off the stage demonstrating VR

06:47.280 --> 06:52.720
and ain't going to happen this year, everything else is paused. Peer-to-peer matrix is on hold,

06:53.280 --> 06:58.800
pseudo IDs and crypto IDs despite the amazing work that Devon did over the course of 2023

06:58.800 --> 07:03.600
to set up for account portability where you replace matrix IDs with public keys so you can

07:03.600 --> 07:10.080
port between servers completely shelved for now. Low bandwidth matrix so using noise and other

07:10.080 --> 07:15.680
transports for really low bandwidth is gone. Dendrite is continuing but some not funded by

07:15.680 --> 07:22.400
element for now at least. Critical bug fixes only on the old iOS and Android SDKs so the classic

07:22.400 --> 07:29.200
element iOS and Android apps if you haven't noticed have been since June. Libol, the old C++

07:29.200 --> 07:34.320
encryption implementation again is just in critical bug fixes and security fix only mode

07:34.320 --> 07:40.080
replaced by Vitozmat, the Rust encryption implementation and poor old third room is

07:40.080 --> 07:45.920
completely on high since now and the team has gone on to other things involving Apple Vision

07:45.920 --> 07:51.120
Pros ironically. So this is also real shame as in a different world I'll be showing you some really

07:51.120 --> 07:55.680
cool stuff in third room and if you're interested in the 3D on matrix stuff go and check out the

07:55.680 --> 08:00.160
final release they did because it has an entire direct manipulation in World Editor

08:00.160 --> 08:05.280
complete with write your own like apps on top of it in real time and it was really cool.

08:06.080 --> 08:12.000
Meanwhile on the element side we ended up switching developments of Synapse to AGPL away

08:12.000 --> 08:18.640
from the Apache license as a fairly desperate measure to try to get folks who build on top of

08:18.640 --> 08:26.560
Synapse to contribute back to either the code or the costs of building it. So long story short

08:26.560 --> 08:32.880
for Matrix to prevail we really need your support so the foundation that looks after the spec many

08:32.880 --> 08:37.440
other aspects of Matrix now runs entirely independently with Josh Simmons he used to be

08:37.440 --> 08:43.680
president of OSI as managing director. They've gone and set up a governing board from across the

08:43.680 --> 08:48.080
ecosystem which is going to stay the direction of the project we have elections for that in April

08:48.160 --> 08:52.560
if you want to get involved become a member, vote, put yourself forwards for the governing

08:52.560 --> 08:57.520
board and you too can stay the direction of the protocol. Right now there is a funding drive that

08:57.520 --> 09:02.880
we launched earlier in the week to support the core spec work trust and safety bridging running

09:02.880 --> 09:08.160
matrix.org infrastructure and governance work and the target there is 900k please get involved if

09:08.160 --> 09:12.880
you're in this room and you're not just chipping in a couple of I think it's like 60 bucks a year

09:12.880 --> 09:19.120
from memory so whatever that is and coffee please please get involved and meanwhile do you remember

09:19.120 --> 09:23.920
that an awful lot of well almost all of gether.com slash matrix is actually maintained by the core

09:23.920 --> 09:28.880
team who now work at Element who donate and Element donate their time to the project so if you're a

09:28.880 --> 09:34.640
government hypothetically wanting to use Matrix please work with Element to support the underlying

09:34.640 --> 09:41.280
infrastructure. That said lots of people getting involved we have 716 individual donors already

09:41.360 --> 09:48.880
we've got some amazing companies like Beeper and Xwiki, Gamartic the German healthcare interoperability

09:48.880 --> 09:54.320
agency, Furcom obviously Element, Criphead and Thunderbird all signed up now as organizational

09:54.320 --> 10:02.720
members. So enough plea for help let's talk about Matrix 2 quickly so we introduced Matrix 2.0 last

10:02.720 --> 10:09.040
year at Fosn 2023 the mission is to make Matrix as fast and as usable as mainstream alternatives

10:09.040 --> 10:14.560
so practically speaking that means it syncs instantly logs in instantly and launches instantly

10:14.560 --> 10:19.760
you can join rooms instantly or at least fast you get native VoIP with entwined encryption

10:19.760 --> 10:24.960
and you get open ID connects this is not a new spat release yet I have to say that otherwise

10:24.960 --> 10:31.280
Travis will go and kill me this is showcased in Matrix Rust SDK and is then used in Element X

10:31.280 --> 10:36.960
and quite a lot of it in fractal 5 and 6 in Nome so I have to say last year when I stood here and

10:37.040 --> 10:43.360
used about Matrix 2.0 it was very alpha now we got the demo working at 3am the night before or

10:43.360 --> 10:48.640
something like that so all of 2023 has been polishing this and trying to get it into the

10:48.640 --> 10:53.200
proper production and in September we did launch it in the form of Element X ignition

10:53.200 --> 10:57.840
to everybody so they could actually play with rather than talking about it let me show you where

10:57.840 --> 11:03.280
things are at probably the easiest way to do that might be to just show you my Element X

11:04.240 --> 11:09.680
so hopefully that is coming up and is vaguely visible or perhaps not let me zoom in a bit

11:09.680 --> 11:14.400
is that more visible so this is just my personal account I'm not going to log in again apparently

11:14.400 --> 11:20.320
we've got a blinking stream apologies if we've got painful flickering of the slides sorry if you're

11:20.320 --> 11:27.200
online but this is kind of fun hello world you can see since last year many many things going on

11:27.200 --> 11:30.480
here we've got our read receipts going down the right hand side we've gone and got fancy

11:30.480 --> 11:35.840
animations as people go and heckle the animation obviously the login and the launch is as fast as

11:35.840 --> 11:42.000
it ever was but we've really gone and fleshed out a lot of the features here so for instance I could

11:42.000 --> 11:49.120
or not navigate my laptop whilst zoomed in I could for instance go and send a location share

11:49.120 --> 11:55.760
and this is using open street map and for mapbox and map Libre in the background and so I can go

11:55.840 --> 12:02.320
and say that I'm in Brussels and hit share on that and it'll come up I could go and show

12:02.320 --> 12:07.760
things like the rich text editor at least I thought I could although I might have it turned off on

12:07.760 --> 12:15.120
this account let me go and dip into our beautiful settings go into advanced settings turn the rich

12:15.120 --> 12:22.880
text editor on go back out again and now if I go down here I can say text formatting and this is an

12:22.880 --> 12:29.680
entire this isn't using the sort of native iOS macOS stuff this is a rough rich text editor that

12:29.680 --> 12:35.520
we actually bought that would be cross platform and cross android iOS and web I can say hello world

12:35.520 --> 12:42.960
like that again select bold it and I turn a link on it or whatever else I need to do by the way

12:42.960 --> 12:48.400
this is obviously the iOS app but running on macOS also runs on iPad I'm just doing it here on

12:48.480 --> 12:55.040
macOS because it's easier to demo rapidly and yes bundles messenger is from the bv messenger

12:55.040 --> 13:00.400
creators but if you use bundles messenger at moment at least nothing directly comes back to us just

13:00.400 --> 13:05.440
saying what else can I show you whilst I'm in here perhaps you can show a voice message which will

13:05.440 --> 13:12.880
probably get deleted by the by the moderation system but if I give it permission to use my

13:12.880 --> 13:18.400
microphone here you can see me blathering away like this I'm going to hit stop on it so I can

13:18.400 --> 13:24.080
obviously go and replay that here you can see me blather and go and hit send and if any like the

13:24.080 --> 13:28.480
moderation system will go and kick in and probably delete it because it's not helpful for people to

13:28.480 --> 13:36.400
go and send voice messages into rooms or not so as you can see things have gone and moved on an

13:36.400 --> 13:43.280
awful lot from where they were on element x a few years ago but we also have these beautiful gray

13:43.280 --> 13:48.240
dots which are surprisingly hard to put together these are unread status and one of the things we're

13:48.240 --> 13:54.960
trying to get right in elements some acts is calculating unread state correctly everybody I

13:54.960 --> 13:58.960
suspect will be aware that over the last year we've had a lot of problems with stuck notifications

13:58.960 --> 14:04.720
and unread state on element web and we were determined to get it right here on element x

14:05.520 --> 14:11.280
instead so um well else can I tell you that that's probably enough now let's go back to the actual

14:11.280 --> 14:17.680
slides and possibly zoom out a bit so let's quickly talk about the component bits of sliding sink

14:17.680 --> 14:22.640
of element x the big one here is sliding sink the idea is that the server should only tell the

14:22.640 --> 14:27.680
client about the rooms that the client needs to display so it should be constant complexity with

14:27.680 --> 14:32.160
the number of rooms rather than linear complexity with the number of rooms to say that it's been a

14:32.160 --> 14:37.040
bit of a journey as an understatement since last year we have rewritten the entire rest SDK

14:37.040 --> 14:41.600
implementation we've gone and added the unread room state as we mentioned but we've really come up

14:41.600 --> 14:47.040
against a fundamental problem here what is the right balance between server side calculation of the

14:47.040 --> 14:52.960
order of the rooms that you care about and the client side calculation now the original genius

14:52.960 --> 14:58.240
idea from yours truly was that we were completely rip off discord and we would calculate the ordering

14:58.240 --> 15:03.920
entirely server side the clients get the sliding window into that and then you recede you send

15:03.920 --> 15:10.160
updates to the client as the ordering changes on the server now obviously that's not going to work

15:10.160 --> 15:14.640
with end-to-end encryption because for end-to-end encrypted rooms only the client knows for sure

15:14.640 --> 15:18.960
what the correct ordering is but that will be all right we'll fix it up on the client and so you'll

15:18.960 --> 15:24.400
get the optimal solution pre-order on the server and then fix it up in the client it turns out this

15:24.400 --> 15:30.160
is a disastrous idea it is a real pain in the ass to implement it was a pain in the ass to implement

15:30.160 --> 15:35.680
it last year it was then a pain in the ass to reimplement it and throughout the point now where

15:35.680 --> 15:40.720
even I realized it was a terrible idea and people are saying guys please can we simplify this a

15:40.720 --> 15:45.920
little bit because the problem is that really clients are the only ones you know the right order

15:45.920 --> 15:51.360
end-to-end encrypted rooms are pretty common these days and so the fix up process would be

15:51.360 --> 15:55.680
entirely horrible and we've never really even got it right so what we're doing instead is to

15:55.680 --> 16:01.920
switch to sort primarily on the client and we use course heuristics on the server to send a rough

16:01.920 --> 16:07.840
estimation of the correct ordering I mean sort of naming this or dubbing it pragmatic sync however

16:07.840 --> 16:15.920
this is a subset if sliding sync but without the sliding bit so not quite implemented yet I saw

16:16.000 --> 16:22.800
that a PR pops up a few days ago from Ivan and three six eight on the rest SDK repository

16:22.800 --> 16:27.680
that does actually implement client slides and ordering as well as lays the groundwork for

16:27.680 --> 16:33.600
filtering rooms there now as a result we're not yet doing native sliding sync implementations

16:33.600 --> 16:38.880
because we are still iterating on the API as I said this is just deleting stuff now it's not a

16:38.880 --> 16:44.160
massive rework or anything it's just simplifying it to make it easier to work with as an API and

16:44.160 --> 16:49.360
lots of people say I'm not going to use sliding sync until it's native until it's fully in the spec

16:49.920 --> 16:55.680
seriously it's really easy to run one of these it is just a single blob of go you build it you

16:55.680 --> 17:00.400
give it a postgres database and you run it and you point one URL at it on your load balance so

17:00.400 --> 17:04.880
you're done all right I've done it and I never had to touch again enough of it to occasionally

17:04.880 --> 17:11.600
update it so please do dog food this play with it in element acts then on the end-to-end group

17:11.600 --> 17:16.160
void lots and lots of fun stuff let me do a very quick demo that I'm already running later on time

17:16.880 --> 17:23.760
let me go to call the element and you are welcome to try to follow along on this I gotta go and start

17:23.760 --> 17:31.040
a element call call here I'm going to check that into the false dem room so that the people can

17:31.040 --> 17:36.160
click on it as well now you may see if you look carefully up here that the URL has not just got

17:36.160 --> 17:41.200
a matrix room ID but it also has a password because this is now using end-to-end encryption

17:42.160 --> 17:46.240
backed by life kit as the selective forwarding unit and I'm hoping that somebody is going to be able

17:46.240 --> 17:50.560
to join this otherwise the demo might suck it a little bit oh there we go amundine again thank you

17:50.560 --> 17:56.480
for rescuing me thanks haha lengths anybody else welcome to jump in and we can crash the the

17:56.480 --> 18:02.880
wi-fi here I might even mute this um so this is in funny

18:08.560 --> 18:13.200
so this is really the great sort of the descendants of the demo that we did last year except this is

18:13.200 --> 18:19.440
real one oh hi Andy thanks for darling in at home um so what we're what we see here is a life kit

18:19.440 --> 18:25.840
based selective forwarding unit with end-to-end encryption using f-frames negotiated over matrix

18:27.360 --> 18:32.640
so that you basically get best of both worlds this is a normal matrix room it is

18:34.560 --> 18:39.600
can be integrated with open id connect but because it's using life kit on the back end it's only

18:39.600 --> 18:44.480
showing you the streams that you care about so if I were to go in fact this is pretty cool if I go

18:45.040 --> 18:51.680
to a foreground tab like that and then switch back again well slow switch to the other tab every

18:51.680 --> 18:55.360
all the other streams will have dropped off and if you're looking at my bandwidth up there you might

18:55.360 --> 19:01.440
have even seen it you can also see this is only doing like 300k out and 150k in which is not too

19:01.440 --> 19:07.200
shabby um at all so you can use this today I mean that's basically what we've been promising all

19:07.200 --> 19:12.560
along end-to-end encrypted native point now there is one other quick thing that I will endeavour to show

19:12.560 --> 19:19.040
um which is if I go over to my phone here I'm going to hang up on this one um I actually go and

19:19.040 --> 19:28.560
launch element x then we also have this embedded properly into um element x itself so if I go also

19:28.560 --> 19:35.040
to here and go over to my normal element web then this is a little internal room called void

19:35.120 --> 19:42.320
water cooler and this is a um basically element called embedded inside element web hopefully

19:42.960 --> 19:50.080
and you have the chat room here on the right hand side and if I go over here I'm going to click the

19:50.080 --> 19:56.720
join button and the demo gods are smiling on me then we will see that there are people in here too

19:57.920 --> 20:02.160
now you might think wow this is amazing he's just gone and I framed and hopefully the video will come

20:02.160 --> 20:07.360
in um the previous thing but what we're actually seeing here is a bit more exciting if the infotainer

20:07.360 --> 20:13.280
me let's focus oh that's interesting the screen share isn't working um from quite time for some

20:13.280 --> 20:20.800
reason that's annoying let me use the analog gap in a few locations here so there we go that's what

20:20.800 --> 20:26.320
you should be seeing um on uh my phone if the screen share was working correctly again you can

20:26.320 --> 20:31.200
double click on things to go and zoom in and you can see roughly what's going on except the stupid

20:31.200 --> 20:36.000
blurring has gone and blurred it out so let's take off the background blurring there we go much better

20:36.000 --> 20:42.160
so this is not just sent to end encrypted with a static key like the previous one this is actually

20:42.160 --> 20:49.040
using senders as um sender keys so it's using your same matrix identity um so here I am as my

20:49.040 --> 20:56.560
normal matrix account Florian is on um here's I'm indeed is on hers T-Mas on his etc so this is fully

20:57.440 --> 21:02.560
you know this gives you all of the properties that you get of normal matrix in terms of forward

21:02.560 --> 21:07.440
secrecy and keys which are rotating forwards and which are linked to specific people they even give

21:07.440 --> 21:13.120
you multiple devices as you can see because I'm actually using this as myself as Matthew on both

21:13.120 --> 21:18.960
phone and on the embedded thing so this is pretty cool this is the shape of things to go I'm element

21:18.960 --> 21:23.200
acts is only going to use this it's not going to use jitzy and we'll switch over from jitzy on element

21:23.200 --> 21:29.520
where we'll soon now and then we live in a promised utopic land utopic utopian land of

21:29.520 --> 21:44.080
end to end encrypted video right thank you um where are my slides here are my slides so

21:44.960 --> 21:49.440
all if you want to see more about this come to the dev room see interoperability with fluffy chat

21:49.440 --> 21:53.520
which is really cool demo because this isn't just element called this is standards based

21:53.520 --> 21:58.960
matrix land and yeah we just need to basically finish the spark and turn on everywhere then open

21:58.960 --> 22:03.040
id connect the great transition is in full swing if you haven't realized open id connect is going to

22:03.040 --> 22:09.760
make the world an amazing place it gives you pass keys mfa2fa single clip login via qr code complete

22:09.760 --> 22:15.200
with end to end encrypted identity no more emoji verification just scan a qr code and bang you are

22:15.200 --> 22:22.000
in um no more leaking passwords everywhere consistent off account management um actual proper

22:22.000 --> 22:27.680
password manager integration proper sso support access token refresh as well as scope so that you

22:27.680 --> 22:33.200
can lock down what things your app can do um here is a quick screenshot I don't have time to do an

22:33.200 --> 22:39.040
actual demo showing what the sort of ux is like when you log in now to a sso um thing in element

22:39.040 --> 22:44.000
x land or indeed from element web and it gives you obviously details about your ip address your

22:44.000 --> 22:50.160
scopes the privileges that you're granting the app and it really is a transformation from where we

22:50.160 --> 22:55.440
have been before you can run this today um by matrix authentication service it's a long side

22:55.440 --> 23:00.320
synapse written in rust it gives you the c y we do now have migration from synapse using the

23:00.320 --> 23:05.520
center mass tool it provides some backwards compatibility for matrix off but there are some

23:05.520 --> 23:11.600
missing bits it does require a native oidc capable client like element x or indeed labs on element web

23:11.920 --> 23:18.720
finally rust SDK work obviously this all hinges around rust SDK with the matrix 2.0

23:18.720 --> 23:24.720
implementation there for sliding sync in idc we've added in this ui crate that gives you the high

23:24.720 --> 23:30.800
level ui components which basically power what we've been looking at then on the crypto side very

23:30.800 --> 23:36.560
happy to say that we have basically killed off use of libon in the main projects here everything

23:36.560 --> 23:42.960
is now using the dosmat it's merged on element web and react SDK and jessus dk on friday like three

23:42.960 --> 23:48.800
days ago and this finally lets us fix the end to end encryption bugs in one place and make encryption

23:48.800 --> 23:55.440
better in one place crypto reliability is now the name of the game we've made a new weapon called

23:55.440 --> 24:01.280
complement crypto which tests both rust and jessus dk against real home servers written in running in

24:01.280 --> 24:07.280
docker written in golang gives you unhappy puff and torture tests we have our hit list of remaining

24:07.280 --> 24:13.520
encryption issues and we are blitzing on going through them the race is on and then one of the

24:13.520 --> 24:20.240
advantages of having all of our encryption using the dosmats now is that as if by magic a draft

24:20.240 --> 24:26.000
post quantum xth pr appeared friend de mere he went to sabbatical for a few months and came back

24:26.080 --> 24:33.920
clutching pr 120 so post quantum coming potentially to the dosmat sometime soon so what's next get it

24:33.920 --> 24:41.280
all released get it audited native sliding sync get rid of the old SDKs completely potentially

24:41.280 --> 24:45.760
look at replacing jessus dk with rust SDK if you know lots of trust and safety work to be done

24:45.760 --> 24:50.560
funded by the foundation as well as bridging and then finally dma right let's actually talk what the

24:50.560 --> 24:56.880
talk is meant to be about dma so digital markets act mandates that communication services from

24:56.880 --> 25:00.960
big tech companies have to talk together the whole idea is that the user can pick their preferred

25:00.960 --> 25:06.000
service without being locked out from talking to their friends forces the big services to actually

25:06.000 --> 25:11.680
differentiate on being a better app rather than having a huge network of users and relying on

25:11.680 --> 25:17.360
the network effects to track people into that app last year we were about here where the rules

25:17.360 --> 25:23.840
started to apply and this year we are about here just before we have march the 7th is when legally

25:23.840 --> 25:29.760
the gatekeepers have to actually open up the silos right now there is only one gatekeeper

25:29.760 --> 25:35.760
matter specifically what's that and facebook messenger and we'll talk about some where things

25:35.760 --> 25:41.040
are there so we saw this as a once in the lifetime opportunity to see if we can use matrix as a

25:41.040 --> 25:46.160
common language to talk to these guys there are probably three main ways of doing this either

25:46.160 --> 25:52.080
they can do open proprietary apis and you can do a multi-head messenger a bit like beeper mini

25:52.080 --> 25:56.000
where you just have an app that goes and talks through to the random api albeit with permission

25:56.000 --> 26:01.360
this time or you have client side bridging where you install an app on the on your android phone

26:01.360 --> 26:05.760
that just copies messages back and forth between what's up and matrix so we actually built this

26:05.760 --> 26:11.920
and demoed it to the european commission last year in february just after fosdom and i mean it works

26:11.920 --> 26:17.200
but it's a bit hacky honestly alternatively you can have everybody talking the same protocol

26:17.200 --> 26:23.040
like matrix so for the last year we've really been experimenting with option three so the problem is

26:23.040 --> 26:28.320
that the gatekeeper has to speak precisely the same end to end encryption as the person connects

26:28.320 --> 26:34.560
into it and also within the encrypted payloads everybody needs to talk the same content good news

26:34.560 --> 26:40.000
though is that we picked the double raptor for matrix back in 2015 because basically it was best

26:40.000 --> 26:45.520
to breed and everybody was using it so nowadays everybody apart from apple uses lib signal or the

26:45.520 --> 26:50.000
does match or live on under the hood for end to end encryption bad news though is that the normal

26:50.000 --> 26:57.920
matrix dialect of all is not interoperable with lib signal so ohm is the encryption in matrix

26:57.920 --> 27:01.600
it was a clean room implementation of the double ratchet that we did back in 2015

27:02.160 --> 27:09.920
but unlike lib signal we don't use x 25549 or x3dh instead we have separate keys for identity

27:09.920 --> 27:14.720
and signing so we've done two implementations of all ms of protocol live all min c plus puffs and

27:14.720 --> 27:21.200
the does match in rough however to do dma we have now added x3dh supports of the does match

27:21.200 --> 27:26.960
so that it can interoperate with lib signal and we've called this new dialect of all into all

27:26.960 --> 27:32.720
and you can go and look at pr124 as of about 2 a.m. this morning and to actually play with it and

27:32.720 --> 27:37.520
see that if you put the right constants in this will now interoperate all the way through to

27:37.520 --> 27:44.000
normal lib signal so this means that you can do a hypothetical matrix for dma architecture

27:44.000 --> 27:49.200
where you have a typical matrix plant like element x which talks matrix through to a home server

27:49.200 --> 27:58.800
which then goes and uses msc 3983983 and 3984 to bridge end to end encrypted semantics through a

27:58.800 --> 28:02.880
application service which we call a protocol converter this is not really a bridge it's

28:02.960 --> 28:06.800
maintaining end to end encryption so it is converting the matrix signaling through to the

28:06.800 --> 28:12.320
hypothetical gatekeeper signaling and then talks through on the gatekeeper side to their client

28:12.320 --> 28:18.080
but the lib signal there and the dos mats in interon mode on the matrix side can then talk

28:18.080 --> 28:22.400
directly so you're basically turning the signaling on one side through to the signaling on the other

28:22.400 --> 28:27.600
and as long as you can agree on a common content format of some kind like matrix events expressed

28:27.600 --> 28:32.400
in proto buffer something like that then you have the holy grail of being able to interoperate

28:32.400 --> 28:38.480
between matrix and a big big messaging service so the end result could hypothetically look

28:38.480 --> 28:44.080
something like this where you have different gatekeepers who use a protocol converter to talk

28:44.080 --> 28:50.080
through to the normal public matrix network or some subset of it you can have clients there like

28:50.080 --> 28:54.960
element x or fluffy chat or whatever going and then talking through other bridges and you'd have

28:54.960 --> 29:00.720
home servers that exist primarily to gateway into these gatekeepers and so plug them all together

29:02.400 --> 29:10.400
so does it work yes this could work so I got permission from matter to admit that we have

29:10.400 --> 29:16.160
done experimental implementations of this now with them as a not so hypothetical gatekeeper

29:16.160 --> 29:20.720
and it does seem viable complete with end to end encryption what I would love to do is to

29:20.720 --> 29:25.840
demo it to you right now but because they have a great big set of announcements coming up about

29:25.840 --> 29:31.040
their dma intro they don't want me basically breaking their news for them at stage on fostered

29:31.040 --> 29:36.160
unfortunately so you'll have to imagine in your mind's eye what's that for one side and element x

29:36.160 --> 29:40.480
on the other and messages flowing back and forth between the two with end to end encryption

29:40.480 --> 29:46.000
honestly that would basically be all the demo would show the catch is that we honestly don't know

29:46.000 --> 29:50.960
yet what will happen in March I mean there are some fairly big challenges here first of all

29:50.960 --> 29:56.480
what permissions would you need to actually use this protocol converter because the dma

29:56.480 --> 30:01.280
letter of the law says that as an organization you have to request permission to get into the

30:01.280 --> 30:06.880
whatsapp network so we've obviously done that already as element but it's very unclear is just

30:06.880 --> 30:10.400
because we've done it as element that we've suddenly done it on behalf of the entire public

30:10.400 --> 30:17.840
matrix network and everybody else well you'd hope but let's see also there's this whole question

30:17.840 --> 30:23.760
of anti-spam where at the moment folks depend an awful lot on knowing the IP address of the clients

30:23.760 --> 30:29.760
which connect through in order to determine whether this is an abusive user is it coming in through

30:29.760 --> 30:34.800
tour do we need to be more careful about what it's doing blah blah blah blah so there is a big debate

30:34.800 --> 30:40.960
as to whether we would need to expose a stable identifier of some kind like obfuscated IP address

30:40.960 --> 30:45.840
to the gatekeeper to help with anti-spam then finally a big one is that group chat is just

30:45.840 --> 30:53.040
unsolved I mean the current legislation only requires one-to-one dms and you know it's a

30:53.040 --> 31:00.480
basic functionality no void and so group chat is out of scope until 2026 as the first cut you could

31:00.480 --> 31:05.680
just do lots of on sessions or inter-on sessions and find it out like we did before we had magon

31:05.680 --> 31:11.680
but it's a bit clunky and it also gets things more and more baked into the double ratchet so it may

31:11.760 --> 31:16.880
we're hoping that by 2026 some a better approach might emerge but at least this can be used hopefully

31:17.440 --> 31:24.320
from the get-go in March 2024 so one of the things we've discovered along the way is something

31:24.320 --> 31:30.720
we've called linearized matrix so dma doesn't mandate any of the cool stuff that matrix does

31:30.720 --> 31:37.200
it doesn't mandate decentralized conversation history and it doesn't you know require decentralized

31:37.440 --> 31:42.560
control and what we've seen is that gatekeepers might see matrix it's a little bit overkill

31:42.560 --> 31:46.800
when implementing it natively just imagine a conversation where I turn up to somebody at

31:46.800 --> 31:52.000
WhatsApp or whatever and start going on about DAG replication and state resolution and decentralized

31:52.000 --> 31:56.800
ACLs and it's all so cool and they said you know perhaps understandably would say well that's very

31:56.800 --> 32:00.640
nice though but dma doesn't say anything about that and whilst we would love to implement state

32:00.640 --> 32:06.960
res in Erlang perhaps we just need to worry about some straightforward interoperability

32:06.960 --> 32:11.120
so is there a lights and architecture that could work what if we had a protocol that was compatible

32:11.120 --> 32:17.440
with matrix but skips all the complicated state res stuff knowing that we could bridge it into

32:17.440 --> 32:23.840
actual full-fat proper matrix when needed so Travis myself came up with this proposal called

32:23.840 --> 32:29.920
linearized matrix as part of the itf meany working group and it's literally the same matrix events

32:30.000 --> 32:34.960
and power levels even the same author events but rather than putting it in a DAG you put it in a

32:34.960 --> 32:41.680
linked list so it's much easier to play with because you just have a list of events and you can then

32:41.680 --> 32:46.160
bang it around the place in a hub and spoke server topology which is something that the gatekeepers

32:46.160 --> 32:50.160
might be willing to actually implement rather than full-blown matrix but then the second it goes

32:50.160 --> 32:56.400
anywhere near us law we can just actually find it out into proper matrix so we are having an

32:56.400 --> 33:01.440
implementation of this the amazingly named eigen server which is a bunch of types scripts about

33:01.440 --> 33:06.000
what a thousand lines of code for memory that shows just how simple it could be to implement this

33:06.000 --> 33:12.560
subset of matrix in practice it could like this and this one really is hypothetical like please

33:12.560 --> 33:18.160
do not read anything into the logos here but it would basically have normal full-fat matrix here

33:18.160 --> 33:24.320
one of the servers that is got permission to talk through to a gatekeeper like google might be in

33:24.320 --> 33:28.960
future would then talk proper matrix through there and oh no actually no sorry we're talking

33:28.960 --> 33:33.120
linearized matrix there and then say that conversation would end up hubs and only that

33:33.120 --> 33:37.760
conversation this isn't all the traffic but they would just be a given hub for that conversation

33:37.760 --> 33:42.480
to plug everybody together and it makes it a lot easier and more practical to actually implement in

33:42.480 --> 33:47.360
big table and Erlang or whatever on the right hand side well still still talking to the matrix

33:47.440 --> 33:54.160
world on the left hand side however linearized matrix has not gone entirely according to plan

33:54.160 --> 33:59.600
so what we have been doing is working within itf in this new working group called the more

33:59.600 --> 34:04.240
instant messaging interoperability working group now this was started by folks from the

34:04.240 --> 34:09.760
mls messaging layer security group end to end encryption working group and the whole idea is

34:09.760 --> 34:16.640
that they want to build we want to define a long-term protocol specifically for the subset of dma

34:16.720 --> 34:23.120
interoperability with the added twist of the leveraging all the good stuff that mls provides

34:23.120 --> 34:27.040
because weirdly enough if you built mls you want to have an application layer protocol that sits

34:27.040 --> 34:33.440
on top of mls we've been involved in this since the outset my tf-114 in philadelphia back in 2022

34:33.440 --> 34:38.800
now and you will be surprised to hear that we turned up and said guys you don't need to do this we

34:38.800 --> 34:44.160
can just speak matrix no matrix already is this amazing end-to-end encrypted decentralized communication

34:44.160 --> 34:50.400
protocol and it got promptly rejected because decentralization was seen as overkill that's

34:50.400 --> 34:55.760
why we then came up with linearized matrix which also then got rejected because it was like hang

34:55.760 --> 34:59.760
on a second this gives us message history why would you ever want message history we don't need

34:59.760 --> 35:04.560
message history when talking to gatekeepers why does that have key value state events for arbitrary

35:04.560 --> 35:09.680
key value data that sounds very dangerous we don't want that and so it went through the itf process

35:09.680 --> 35:14.240
where it gets whittled down and reduced and reduced and reduced to the absolutely minimum

35:14.800 --> 35:20.640
subset of stuff that you need and then hopefully perhaps maybe expands out again one of the big

35:20.640 --> 35:25.600
debates has been whether Mimi should support interoperability with today's protocols like

35:25.600 --> 35:31.360
whatsapp or facebook messenger and critically the double ratchet or do you hard code the entire

35:31.360 --> 35:36.080
design to require mls for encryption so you can imagine that there are a bunch of people who really

35:36.080 --> 35:40.080
really have backed the farm on mls and a bunch of slightly more pragmatic people perhaps who have

35:40.080 --> 35:45.040
backed the farm on just wanting to interoperate with people and that debate has gone back and forth

35:45.840 --> 35:52.640
so we ended up forming a design team between folks on matrix side Cisco google wire phoenix

35:52.640 --> 35:57.120
and wicker to try and to build something from the ground up that would provide this on ramp from

35:57.120 --> 36:02.400
today's double ratchet world into an mls world the idea is that you literally can use this

36:03.040 --> 36:08.400
today to interrupt with double ratchet platforms like matrix or whatsapp but then also provide a

36:08.400 --> 36:14.640
really low friction way to steer everybody through to talk mls and there was a lot of back and forth

36:14.640 --> 36:21.040
on how this could look because it basically tries to solve this paradox that on one hand if you have

36:21.040 --> 36:26.720
mls you should use it as much as possible you should use it to synchronize state across the

36:26.720 --> 36:35.520
various folks in the cryptographic group and all the sort of benefits of mls however if you

36:35.520 --> 36:39.760
don't have mls you need to kind of fake something that looks a bit like it out of today's double

36:39.760 --> 36:44.640
ratchet and sort of linearized matrix stuff so we've been trying to glue together two pretty

36:44.640 --> 36:51.680
different architectures with a transition path between the two so we published that back in

36:51.760 --> 37:02.000
Prague in November in draft rosten mini protocol and in theory gets best to both worlds the layering

37:02.000 --> 37:06.640
does end up being a bit complex though and so for the last couple of weeks we've discovered that

37:06.640 --> 37:12.480
wire have done an entirely new draft which we are now trying to merge back together yay team work

37:13.280 --> 37:18.400
so to solve today's dma challenges meanwhile whilst we go through this wonderful process with

37:18.400 --> 37:27.040
itf we've also just been using plain old matrix so what comes next i've no idea honestly no idea

37:27.040 --> 37:33.360
what happens come much we'll see what dma api's meta ships on march the 7th as i said i'm not

37:33.360 --> 37:38.560
allowed to steal their fund on that looks as if we may be in the first organization element to

37:38.560 --> 37:43.520
actually implement against them so whatever happens hopefully it will involve matrix one way or another

37:44.400 --> 37:49.040
but that is the shape of dma things to come and i don't know why i was speaking so fast but

37:49.040 --> 37:53.200
apparently i've got two and a half minutes left have i actually finished early for the first time

37:53.200 --> 38:08.960
ever in 10 years of post-in thank you so just to remind you we need help friends do not let

38:08.960 --> 38:13.600
their friends use proprietary chat services if you benefit commercially from matrix and you want

38:13.600 --> 38:19.600
us to continue to exist please support the foundation use the qr code become a member run a server or

38:19.600 --> 38:24.320
buy an enterprise one from element build bridges and bots on your services build your amazing cool

38:24.320 --> 38:29.360
new project on matrix because tragically we're not going to be doing any fancy vr on matrix or

38:29.360 --> 38:34.800
midi on matrix or carry a pigeon over matrix or whatever it might happen to be you have to build

38:34.800 --> 38:39.120
your pigeon teleport to yourselves from now on but hopefully we've inspired you enough to do so

38:39.760 --> 38:43.920
follow us on mastodon or indeed blue sky or many many other things and spread the words thank you

38:43.920 --> 38:55.280
very much questions we have a question thanks for the talk what's the status of specifying the export

38:55.280 --> 39:02.080
import format for a matrix servers we can actually back up matrix and backing up postgres or whatever

39:02.080 --> 39:08.000
data is under it i didn't quite catch that was the question of speccing the server to server api

39:08.000 --> 39:16.400
to make it easy to right now a matrix server be it conduit or synapse or whatever yeah all the data

39:16.400 --> 39:23.600
in some data storage right if you want to back up a server okay sorry i get the question now so the

39:23.600 --> 39:29.120
question is data portability between home servers so you can migrate from synapse to dendrite or

39:29.360 --> 39:34.480
dendrite to conduit or whatever so there is deliberately not an msc for defining that right

39:34.480 --> 39:40.480
now because what we're trying to do was to do account portability because if you have switched

39:40.480 --> 39:50.480
out your matrix id's for public keys and you define either i guess either the client or perhaps the

39:50.480 --> 39:56.960
server gets to define the home of the account then the act of migrating yourself from synapse to

39:56.960 --> 40:04.000
dendrite would be to basically do an account port a bit like on gsm to switch where that public key

40:04.000 --> 40:10.880
resides so rather than having an export format and a great big wadge of jason or a kind of gdpr

40:10.880 --> 40:17.520
desar style thing instead the protocol itself does what it does best replicating data between

40:17.520 --> 40:23.440
different servers and therefore you wouldn't need an interchange format now this has some minor

40:23.440 --> 40:29.200
problems first of all as you just heard we've had to stop working on it and secondly it doesn't solve

40:29.200 --> 40:36.320
the gdpr desar use case where you need to have the data check out functionality at the moment

40:36.320 --> 40:40.800
synapse just does a very blunt way of doing that well there is a separate tool i forget what that

40:40.800 --> 40:47.120
expires exports the data in a huge indigestible blob of jason so i think it would be a useful thing

40:47.120 --> 40:51.120
to have it's not something that we're working on at the moment but if anybody in the room would like

40:51.200 --> 40:57.280
to write an msc for expressing a desar format which could also potentially be used as a quick fix

40:57.280 --> 41:02.160
for data portability between implementations that would be really cool and i'm sorry that

41:03.520 --> 41:07.840
in this instance perfect has been the enemy of good and that we invested the time that should

41:07.840 --> 41:13.280
have been spent doing that in doing account portability rather than desar tool excellent question

41:14.240 --> 41:21.120
anybody getting this per call uh do the nice video call with everybody joining that you did

41:21.120 --> 41:25.920
like few minutes ago uh is there any network optimization where like the clients were talking

41:25.920 --> 41:31.280
to each other or they were all going to the cloud and back just just thinking if you that was something

41:31.280 --> 41:37.280
you fought through now the acoustic in here is terrible i don't think how you've been hearing me

41:37.280 --> 41:44.720
i sorry i didn't catch that um about the video call where everybody joined yeah okay um we were

41:44.720 --> 41:50.720
just like considering if that there was any kind of optimization for limiting the bandwidth to the

41:50.720 --> 41:55.440
internet or there was any sort of right to pier okay it's bandwidth control for element cool

41:56.320 --> 42:04.960
okay so at the moment um the life care sfu has actually got really good um uh bandwidth estimation

42:04.960 --> 42:10.160
built into it so that adapts quite aggressively to your actual network conditions you saw how

42:10.160 --> 42:15.680
little i was using and critically it renegotiates between different thumbnails and if you scroll

42:15.680 --> 42:21.440
the thumbnails outside they disappear if as far as i know it should be pretty easy to also put

42:21.440 --> 42:26.880
additional constraints either on the client or on the server side to say hey never give me more than

42:27.280 --> 42:30.000
320 by 240 will never give me more than 64k

42:36.160 --> 42:40.960
in that all of that was going bar in sfu on the server side so there was nothing happening

42:40.960 --> 42:46.560
peer to peer we still have peer to peer matrix for doing full mesh sorry it's more full mesh video

42:46.560 --> 42:51.600
is still a thing but if you wanted to scale to an entire room like this then yeah you need to have

42:51.600 --> 42:55.600
this like the forwarding unit um to go and bounce it around the place and i can hear you so much

42:55.600 --> 43:02.400
better without the microphone um any other questions i remember that back in the days you

43:02.400 --> 43:09.680
started to work on matrix because you had to work on rcs and it was crap and now rcs is like become

43:09.680 --> 43:16.640
a reality with google messages uh are you are you planning to make something interoperable interoperable

43:16.640 --> 43:26.640
with this or uh you just try to put it away it is so annoying to stand on stage and have to say

43:26.640 --> 43:31.200
that unfortunately we have nda's which mean that we can't talk about anything to do with that right

43:31.200 --> 43:44.400
now that's fine i tried so first of all thank you for keeping up all the good work for the

43:45.200 --> 43:50.080
dma stuff i think a lot of people will profit from that eventually without even knowing like

43:50.080 --> 43:53.920
who actually did that so thank you for that um i could

44:00.640 --> 44:04.320
i should point out that the dma stuff is all amondine's full she has the right

44:04.320 --> 44:08.560
angst and is willing to go to brussels and talk to people with the right angst whereas i just

44:08.560 --> 44:12.480
came in at the last minute and said oh brilliant let's play with double ratchets so

44:12.480 --> 44:16.560
but either way i'm glad that honestly we were able collectively to shift it forward

44:18.800 --> 44:25.120
my actual question would be to matrix 2.0 is there like a concrete roadmap how the roll out of

44:25.120 --> 44:31.680
matrix 2.0 will eventually happen and how backwards compatibility compatibility with for example

44:31.680 --> 44:38.480
legacy sso login and will element x support normal swing eventually for the roll off or something

44:38.480 --> 44:45.760
like that so i got the first half of that um and so a roadmap for matrix 2.0 is really land

44:45.760 --> 44:51.040
the remaining things as rapidly as we can it's very hard to predict the pacing of that because

44:51.040 --> 44:57.360
it depends entirely on how it's funded and uh no the reason it's not going as fast as we would like

44:57.360 --> 45:02.240
is that often we end up doing completely other work like somebody might turn up and say look we

45:02.240 --> 45:09.280
need the best screen reader support in element web 9 to man at which point the jsstk and you know

45:09.280 --> 45:13.920
other folks who might be working on the lower levels of element web end up doing accessibility

45:13.920 --> 45:18.880
which is great but it can completely starve out the lower level things and so work that might have

45:18.880 --> 45:24.000
happened you know next month finds itself shifted about six months because everybody was committed

45:24.000 --> 45:29.440
to go and you know do some other requirement so i'm afraid we don't publish a roadmap on it other

45:29.440 --> 45:35.520
than we'll do it as quick as we can i didn't catch the second half pack what's compatibility

45:35.520 --> 45:40.640
during the roll out for example will element x support legacy home servers that don't have sliding

45:40.640 --> 45:48.080
sync for example no no way it's um hard enough to make element x as um snappy as it is without

45:48.080 --> 45:54.080
also supporting the legacy authentication or the legacy sync and frankly it's also a sort of mechanism

45:54.080 --> 45:59.680
to try to get everybody to speak the brave new apis um so yeah we are not going to see legacy support

45:59.680 --> 46:05.760
and there at all instead we'll just optimize to make the matrix 2.0 spec stuff um as effective as

46:05.760 --> 46:20.160
possible thank you sorry going once anyway questions we haven't seen please wave your hand ah there

46:24.400 --> 46:35.920
hi so thank you for great talking for all your work especially on the dma side second that uh

46:35.920 --> 46:43.520
when it comes to dma the gatekeepers will they scope dma access to eu uses or how will that work

46:44.080 --> 46:48.640
that is precisely the sort of thing that if i gave you the answer to or my guests at the answer to

46:48.640 --> 46:56.000
would get me sued by method for breaking an nda so i don't know i'm afraid but they should be um

46:56.000 --> 47:01.760
announcing it in the coming weeks because obviously they need to go live on march the seventh and they

47:01.760 --> 47:08.240
need to try to explain to the world why they have um upheld the regulation in the way that they have

47:08.240 --> 47:14.400
and honestly i don't know if the answer i mean the the builds which we've been working with are um

47:14.480 --> 47:18.080
sort of coming down to the line they're all full of lips and text and they haven't been

47:18.080 --> 47:23.840
internationalized and the ui is very clearly still in flux so that's what i mean when i say i don't

47:23.840 --> 47:31.840
know we'll see it in the next couple of weeks right any last ones oh over there

47:36.400 --> 47:42.880
so if i understand correctly uh matrix 2.0 will require multiple services alongside synapse

47:43.280 --> 47:49.600
uh for sliding sync for example uh do you have a plan to provide the software distribution

47:49.600 --> 47:55.680
that combines all the needed uh all the needs the services thank you okay i think i caught that

47:55.680 --> 48:01.520
which is is there going to be a distribution that bundles together matrix off service and sliding

48:01.520 --> 48:09.920
sync alongside um synapse um so in the long term we want to have it natively implemented on both

48:09.920 --> 48:16.080
matrix off service is designed to be embedded as a rust module inside the python sort of host

48:16.080 --> 48:21.520
of synapse and likewise sliding sync eventually i hope will end up as a native module of some kind

48:21.520 --> 48:29.040
there too in terms of distributions um there are various options already so element provides its

48:29.040 --> 48:34.480
element server suite um supported distribution which is the sort of thing that we try to persuade

48:34.720 --> 48:41.520
governments and big enterprises to use there is also um slavis matrix docker ansible deploy

48:42.320 --> 48:49.280
ansible playbooks which again gathers it all up and runs it system d services um and i'm sure

48:49.280 --> 48:54.400
that there are other like um helm charts out there from the community there are also helm charts for

48:54.400 --> 49:01.360
bundles messenger um published on open code for the german public sector as well as ones for open

49:01.360 --> 49:06.160
desk which is the digital sovereign workspace there so there are a lot of options out there

49:06.160 --> 49:11.200
obviously with my element CEO hat on i really hope that people might actually buy the one from us so

49:11.200 --> 49:15.680
that we can keep paying the salary of people to build the underlying technology but um you can

49:15.680 --> 49:19.920
also go wild with any of the other distributions the whole thing is starting to feel a bit like

49:19.920 --> 49:25.280
linux honestly with different distros done by different people with different licensing and

49:25.360 --> 49:29.680
mentalities which i guess makes us red hat on the element side

49:32.400 --> 49:35.600
and i have 16 seconds left for any final final questions

49:37.200 --> 49:39.920
in which case i am actually going to finish early thank you very much

49:44.160 --> 49:49.920
yeah thank you very much post in wants to say also thank you to you with some sweet calories

