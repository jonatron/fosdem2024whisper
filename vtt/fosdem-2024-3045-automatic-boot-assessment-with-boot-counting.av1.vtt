WEBVTT

00:00.000 --> 00:12.000
Hi, can you hear me?

00:12.000 --> 00:16.000
Up next we have Julian with automatic boot assessments.

00:16.000 --> 00:18.000
Okay, hello everyone.

00:18.000 --> 00:23.000
So today I'm going to, my name is Julian Malca and I'm a PhD student at Telecom Paris.

00:23.000 --> 00:31.000
And today I'm going to talk about automatic boot counting, automatic boot assessment with boot counting, sorry.

00:31.000 --> 00:37.000
And so what I will talk about is why we need automatic boot assessments.

00:37.000 --> 00:47.000
What is automatic boot assessment and like one of an implementation that is a system-deboot counting, I'll show a demo.

00:47.000 --> 00:51.000
So why do we need automatic boot assessments?

00:51.000 --> 00:56.000
Because we are using NixOS, we have like something I call the NixOS benediction.

00:56.000 --> 00:59.000
It's very difficult to break your system.

00:59.000 --> 01:02.000
You really have to want it to break your system.

01:02.000 --> 01:14.000
And even if you mess up your NixOS configuration, you can just roll back to a past generation and just be solved by the NixOS magic.

01:15.000 --> 01:19.000
But sometimes this benediction has limits.

01:19.000 --> 01:27.000
And let's say if you are administrator for a remote server, you perform some kind of server update, let's say kernel update.

01:27.000 --> 01:30.000
And you mess up.

01:30.000 --> 01:33.000
You choose a kernel that cannot boot your root partition.

01:33.000 --> 01:38.000
And at next boot what is going to happen is that it's going to fail to boot.

01:38.000 --> 01:48.000
And if you don't have any physical like BMC, then you will need physical intervention to revive the server.

01:48.000 --> 01:53.000
So this is this kind of problem we solve with automatic boot assessment.

01:53.000 --> 02:01.000
So boot assessment is any kind of technology really that can, and I can only assess if a boot entry is bootable or not.

02:01.000 --> 02:06.000
And we have one example that is system-deboot boot counting.

02:06.000 --> 02:11.000
So boot counting is a feature of, as I said, system-deboot.

02:11.000 --> 02:13.000
And the idea is the following.

02:13.000 --> 02:18.000
Each boot entry has a counter when created.

02:18.000 --> 02:24.000
Each time system-deboot tries an entry, the counter for this entry is decreased by one.

02:24.000 --> 02:34.000
If the entry is booted successfully, and I will define what booted successfully means, then the counters are removed permanently.

02:34.000 --> 02:45.000
But if the counters for an entry have ever reached zero, then the entry is marked as bad, and it's sorted in the boot menu at the end.

02:45.000 --> 02:50.000
Just if I get just a little bit more in depth of how this works.

02:50.000 --> 02:55.000
The counters are embedded in the entries' name, file names.

02:55.000 --> 03:03.000
So you have the file name, then you have the plus separator, then the number of remaining trials, then the number of failed trials.

03:03.000 --> 03:05.000
So this is generation nine.

03:05.000 --> 03:12.000
It has four remaining trials and one failed, and it adds, at the beginning, five trials set.

03:12.000 --> 03:17.000
Counters are decreased by system-deboot when it booted the entries by simply renaming the file.

03:17.000 --> 03:25.000
And you have to define some definition of a successful boot by scheduling whatever you want.

03:25.000 --> 03:29.000
You need to be started successfully before the boot-complete target.

03:29.000 --> 03:43.000
So when the boot-complete target is reached, then the entry is renamed by the system-deboot, the bless entry unit, that is going to remove the counter.

03:43.000 --> 03:45.000
And we are done with this entry.

03:45.000 --> 03:47.000
We consider it good forever.

03:47.000 --> 03:52.000
Okay, let me show you a demo.

03:52.000 --> 04:08.000
Right, so here I am in a VM, I am booted, and I'll show you that in the configuration.nix, I have enabled the feature and set the number of trials to be two for any entry.

04:08.000 --> 04:11.000
The VM is booted successfully, but I will do a massive mistake.

04:11.000 --> 04:14.000
I am emulating a mistake.

04:14.000 --> 04:18.000
I have a BKHFS file system and I will rename it as X4.

04:18.000 --> 04:34.000
So it means that now this partition will definitely not get mounted, and when I will rebuild, it will even change the kernel to a kernel not supporting BKHFS.

04:34.000 --> 04:40.000
So now it's rebuilding my configuration.

04:40.000 --> 04:44.000
You see when I am done rebuilding, I get no error, no nothing.

04:44.000 --> 04:46.000
I think everything is good.

04:46.000 --> 04:49.000
I show you the boot entries.

04:49.000 --> 04:57.000
The boot entries, you have five boot entries, and the last one as a counter, you see the dash five plus two, two trials for this entry.

04:57.000 --> 04:59.000
And now I will reboot this VM.

04:59.000 --> 05:02.000
So what happens when I reboot?

05:02.000 --> 05:05.000
At the beginning, everything is fine.

05:05.000 --> 05:08.000
My generation five is sorted first.

05:08.000 --> 05:10.000
It will try to boot it.

05:10.000 --> 05:14.000
Kernel crashes.

05:14.000 --> 05:18.000
It reboots.

05:18.000 --> 05:24.000
Now it's still sorted first because we have two trials for this entry.

05:24.000 --> 05:29.000
Again, kernel crashes, reboots.

05:29.000 --> 05:36.000
And now you will see it's now sorted last and we are going to boot generation number four.

05:36.000 --> 05:41.000
And of course we are going to boot it successfully and that's it, that's the feature.

05:41.000 --> 05:44.000
It's available currently as a PR.

05:44.000 --> 05:49.000
It will be merged very soon and be available in the next lesson table.

05:49.000 --> 05:50.000
Thank you.

