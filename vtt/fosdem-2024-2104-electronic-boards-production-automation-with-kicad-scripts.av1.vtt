WEBVTT

00:00.000 --> 00:14.600
So, next up we have a very important talk from Svetan, who runs a company you may have

00:14.600 --> 00:15.600
heard of.

00:15.600 --> 00:21.760
They build the awesome little single board computers and they have been automating much

00:21.760 --> 00:25.720
of their production line that uses KICAD.

00:25.720 --> 00:32.080
This will give an introduction to how to do this on your end as well.

00:32.080 --> 00:35.360
So please give a warm welcome to Svetan.

00:35.360 --> 00:38.360
Thank you.

00:38.360 --> 00:49.000
Okay, today I will share some scripts which we use to make our production more efficient

00:49.000 --> 00:52.360
and which you can also use.

00:52.360 --> 00:56.720
I am Svetan, the owner of OleMX.

00:56.720 --> 01:04.520
OleMX is a company in Bulgaria which is dealing with electronic design, production of electronic

01:04.520 --> 01:13.120
products and we have about 1,000 different originally designed by us products and which

01:13.120 --> 01:20.200
we do this for more than 30 years and we produce everything in both in Bulgaria.

01:20.200 --> 01:23.760
Most of our products are open source hardware.

01:23.760 --> 01:27.720
So the design process is always fun.

01:27.720 --> 01:33.480
You create something, you challenge your brain, it's very satisfactory when you solve something

01:33.480 --> 01:39.600
which you think it's impossible to solve and this gives you a great satisfaction.

01:39.600 --> 01:42.080
At least with me it's always this.

01:42.080 --> 01:50.880
It's always fun, it's always challenging and give you a great satisfaction of the creativity

01:50.880 --> 01:56.680
but later is the production process which is boring stuff.

01:56.680 --> 02:04.880
You do repetitive boring stuff which doesn't bring you any challenge.

02:04.880 --> 02:13.400
But if you don't do it correctly there is a disaster and financial penalty for every

02:13.400 --> 02:16.960
mistake you do in the production.

02:16.960 --> 02:20.200
And why we do water than to manufacture?

02:20.200 --> 02:25.520
I don't want you to just design the electronics because this is the only way we can pay our

02:25.520 --> 02:29.280
bills.

02:29.280 --> 02:37.560
When you have a final product actually you monetize your designs and what you are doing.

02:37.560 --> 02:46.960
So here I will just mention what can go wrong when you produce electronics.

02:46.960 --> 02:54.400
First stage is components apply problems and this is something which doesn't depend on

02:54.400 --> 02:55.400
you.

02:55.400 --> 03:03.120
Actually you cannot do much about it but there might be differences between the components

03:03.120 --> 03:06.000
from the different lots.

03:06.000 --> 03:14.280
And for instance even one single capacitor sometimes you can receive it a little bit lighter,

03:14.280 --> 03:21.800
a little bit darker, a little bit yellowish, a little bit brownish, a little bit reddish.

03:21.800 --> 03:29.600
And I will say what big deal this is just color change but all the inspection equipment

03:29.600 --> 03:37.440
take pictures of the boards and compare pictures and when the component has different color

03:37.440 --> 03:39.960
it recognizes like different components.

03:39.960 --> 03:45.840
So the inspection starts to get the false alarms and you have to update all your libraries

03:45.840 --> 03:51.080
every time you get the component with different color.

03:52.080 --> 03:58.320
Even one and the same components if it comes from different vendors they can put it with

03:58.320 --> 04:00.560
a different orientation inside the tape.

04:00.560 --> 04:06.520
So if you just realize that everything is the same like the previous batch you are in

04:06.520 --> 04:12.920
trouble it will be not assembled correctly on the PCB.

04:12.920 --> 04:13.920
Different component marks.

04:13.920 --> 04:16.920
Recently we got LED.

04:17.760 --> 04:22.760
If you ever assemble LED you will know that on the back of the LED there is a green dot

04:22.760 --> 04:25.840
which shows the cutout or anode.

04:25.840 --> 04:29.160
This is you can the pure decision of the vendor.

04:29.160 --> 04:34.680
Some put it on the cutout, some put it on the...

04:34.680 --> 04:44.720
So when you assemble your LED's vice versa with 180 degree they simply don't work like

04:44.720 --> 04:46.720
expected.

04:46.720 --> 04:53.160
And of course there is a lot of fake components and the major problem with the fake components

04:53.160 --> 04:59.240
is that they never come 100% fake.

04:59.240 --> 05:02.280
The dealers of the fake components they are very innovative.

05:02.280 --> 05:10.400
They mix for instance 5% fake components with 95% original components so when you assemble

05:10.400 --> 05:16.000
the boards you just find that 5% doesn't work like expected.

05:16.000 --> 05:22.000
And you start to think that maybe you did something wrong but basically it's because

05:22.000 --> 05:23.360
of the components.

05:23.360 --> 05:28.680
So all these problems have a solution.

05:28.680 --> 05:34.680
You can make a procedure when components come to your storage you never put them in the

05:34.680 --> 05:37.400
storage without first testing them.

05:37.400 --> 05:43.440
Check the component orientation, check the component color, check the size variation and

05:43.440 --> 05:49.880
this is predictable and this is something you can handle.

05:49.880 --> 05:53.520
The second problem is with the operators.

05:53.520 --> 05:59.720
We are humans we do mistakes and we are not machines.

05:59.720 --> 06:06.600
We don't work the same way in the morning and later afternoon because you get tired or

06:06.600 --> 06:14.280
you have some problems in the house or you play tennis the previous day and your leg

06:14.280 --> 06:21.280
is hurting and this is just distracting you from the work you do with the machine and

06:21.280 --> 06:26.200
if you do mistake it multiplies immediately.

06:26.200 --> 06:33.040
Every hour with hundreds of scrap boards manufactured.

06:33.040 --> 06:41.040
So to be effective in the production there is major two problems to solve.

06:41.040 --> 06:49.520
First one is how fast you can move from the CAD program to the machine program.

06:49.520 --> 06:55.440
And the second is once this is set up how quickly you can change between the different

06:55.840 --> 07:03.800
PCBs which are already stored in the machine memories.

07:03.800 --> 07:10.120
This is one typical production flow for electronic production.

07:10.120 --> 07:16.040
You have to have the components then they go through the solder press printer then they

07:16.040 --> 07:24.600
are inspected then you go through the SMP placer again inspection, oven inspection through

07:24.600 --> 07:27.960
whole component inspection and test.

07:27.960 --> 07:37.960
And the challenge to generate these programs for these machines is that they are usually

07:37.960 --> 07:45.480
five or six different machines which are made by different vendors and they have different

07:45.480 --> 07:54.200
ideas about the software, about the libraries, about the component names and when you add

07:54.200 --> 08:01.760
this to the stocking and to the CAD libraries you actually have to find the quick way to

08:01.760 --> 08:09.920
align and to alias that this component which is in the key CAD is that component is your

08:09.920 --> 08:17.720
stock and it has three or four different libraries which has to be associated with this component

08:17.720 --> 08:22.640
on every machine.

08:22.640 --> 08:28.000
This is very time consuming and usually one operator is getting the files from the CAD

08:28.000 --> 08:34.720
and start manually to associate these components with the different machines.

08:34.720 --> 08:43.320
This is a problem because these machines have to assemble they don't have to stay and be

08:43.320 --> 08:48.000
in programming because machine time is money.

08:48.000 --> 08:54.120
If you keep your machines without producing you are not effective.

08:54.120 --> 08:57.120
The second challenge is the changeover.

08:57.120 --> 09:03.280
As I said people always do mistakes it's not avoidable.

09:03.280 --> 09:11.000
So we just have to find a way how to minimize these mistakes.

09:11.000 --> 09:18.920
For the last 30 years we are trying to improve our process and this doesn't mean we don't

09:18.920 --> 09:19.920
do mistakes.

09:19.920 --> 09:28.480
We do a lot of mistakes but we try every time we do something wrong to analyze what is the

09:28.480 --> 09:36.520
cause for this problem and to take some corrective actions so we don't do the same mistake again.

09:36.520 --> 09:47.520
And the only possible solution for this is to have a computer assistance to all steps

09:47.520 --> 09:50.920
where humans are involved.

09:50.920 --> 09:59.920
If the computer help the people they do again mistakes but at least they know that they do

09:59.920 --> 10:05.400
mistakes and correct them.

10:05.400 --> 10:12.880
Kick-out is proven to be a nice tool to do this job.

10:12.880 --> 10:13.880
Why?

10:13.880 --> 10:22.200
Because it's totally open and always flexibility and we can extract from kick-out all the PCB

10:22.200 --> 10:26.120
parameters all the component properties.

10:26.120 --> 10:33.760
Every information we need to do the proper programming on our assembly machines.

10:33.760 --> 10:40.760
But of course for this purpose we had to reverse engineer the file formats of all machines

10:40.760 --> 10:47.240
we have on the assembly lines.

10:47.240 --> 10:52.160
This is still work on progress because we have machines from Samsung, from Sony, from

10:52.160 --> 10:58.520
Omron, NPM and as I said every machine has different file formats.

10:58.520 --> 11:03.680
You have to experiment and to see what exactly is this file format and what you have to

11:03.680 --> 11:06.560
put inside it.

11:06.560 --> 11:10.560
And this is how our script is looking.

11:10.560 --> 11:13.160
We have an Olimax plugin.

11:13.160 --> 11:19.960
When we start the plugin we have this screen and we can select the PCB orientation.

11:19.960 --> 11:20.960
Why?

11:20.960 --> 11:25.360
We need the PCB orientation because some machines work from left to right.

11:25.360 --> 11:27.800
Some works from right to left.

11:27.800 --> 11:30.760
Some can be operated from the front.

11:30.760 --> 11:33.520
Some can be said to be operated from the back.

11:33.520 --> 11:39.840
And every time you change this you have to change your origin of the PCB.

11:39.840 --> 11:49.000
Then we can pick if we want to have the components which has property to be excluded from the

11:49.000 --> 11:58.000
bone, to be excluded from the position file or to detect not assembly which feature I

11:58.120 --> 12:03.000
understand is available in the new version of Kikat.

12:03.000 --> 12:12.120
And the variant properties because one PCB can be used in many products.

12:12.120 --> 12:19.320
For instance you have one PCB with different variation, different memory footprints, industrial

12:19.320 --> 12:23.880
version components, commercial components.

12:23.880 --> 12:33.880
And this generates the files for all the variants of the board we can manufacture with one PCB.

12:33.880 --> 12:40.440
And of course this is what to export.

12:40.440 --> 12:45.920
When we run the scripts it creates this JSON file which creates all the necessary info

12:45.920 --> 12:52.600
inside and then we import it in our JSON ERP.

12:53.320 --> 12:59.120
This is something we created for our internal use.

12:59.120 --> 13:03.600
This is general information about the board.

13:03.600 --> 13:10.440
Kikat is generating preview for the top and bottom of the board.

13:10.440 --> 13:17.840
And we have automatic match for the components from Kikat to our stocking.

13:17.840 --> 13:23.960
If I was in the marketing I would say we use artificial intelligence but I'm just an engineer

13:23.960 --> 13:30.960
so I'm just saying this is just fact.

13:36.560 --> 13:43.080
Here we have preview and we can go through the bone and see visually every component

13:43.080 --> 13:46.480
where it goes on the PCB.

13:46.480 --> 13:53.040
And then we can select from the drop down menu for which machine we want to generate

13:53.040 --> 14:00.920
the programming and we get a native program for the machine which you can load the machine

14:00.920 --> 14:06.760
and it starts working without wasting time to associate components to teach libraries

14:06.760 --> 14:10.400
and so on.

14:10.400 --> 14:13.320
We did the same for the changeovers.

14:13.320 --> 14:20.320
Here you can select from the bone, for instance this board has two machines in line and we

14:20.320 --> 14:27.320
can select and copy which component on which machine we want to be assembled.

14:31.600 --> 14:41.080
So the recap is that since we start using this scripting we multiply times increased

14:41.120 --> 14:48.120
or productivity with the production because otherwise it takes days to build all the machine

14:48.120 --> 14:50.560
programs manually.

14:50.560 --> 14:57.560
Now you see you just click on the drop down menu I want to have file for the printer or

14:58.160 --> 15:04.680
file for the placer or file for the optical inspection and it single click it generates

15:04.680 --> 15:09.680
the files and you load the machine and it starts assembling.

15:10.680 --> 15:21.680
With the changeovers there is no significant speed up but it helps to do less errors.

15:23.680 --> 15:26.680
That's it pretty much.

15:39.680 --> 15:46.680
Before you made all these custom tools how did the vendors of these machines expect you

15:53.120 --> 15:53.960
to use them?

15:53.960 --> 15:57.880
Like are they expecting you to do everything manually or do they have their own set of

15:57.880 --> 15:59.440
tools?

15:59.440 --> 16:06.440
You can do all this association in the machines but you are losing production time because

16:07.040 --> 16:14.040
when you program these machines they don't work and they have some tools which are for

16:14.200 --> 16:21.200
importing for panelization and etc. but it's done in different way for every machine.

16:24.880 --> 16:31.880
So it's very troublesome for the operators to remember how this machine was programming

16:32.600 --> 16:38.200
what I have to select this or that and now with single click they get the text file,

16:38.200 --> 16:42.200
load to the machine and it works.

16:42.200 --> 16:48.600
So there are a number of other companies that do similar things and they all have different

16:48.600 --> 16:55.600
machines so the question is what kind of data format do you have internally that other people

16:57.000 --> 17:00.920
can then write converters from for their own machines?

17:00.960 --> 17:04.720
We start from the kick-up.

17:04.720 --> 17:11.720
From the kick-up we can extract every component property, rotation, library name, etc.

17:12.240 --> 17:19.240
And from there we see with the reverse engineer for what this machine is expecting to receive

17:19.240 --> 17:26.240
like a file and like an info and we just make the bond between the two.

17:26.240 --> 17:33.240
So it's, we didn't intend to make it universally for any machines just for the machines which

17:34.960 --> 17:39.960
we have in use.

17:39.960 --> 17:46.960
So why do the companies selling these machines just don't care? So why is there no kind of

17:47.160 --> 17:48.160
import?

17:48.160 --> 17:52.280
Because there is no coordination between the different components. For instance Samsung

17:52.280 --> 17:57.680
has one concept how to look the menus, how to look the user interface and this is decided

17:57.680 --> 18:04.680
by their engineers. They have no clue what Sony is doing or what Yamaha is doing or every

18:04.680 --> 18:10.200
engineer in every company has different concepts, how to name the components, how to place the

18:10.200 --> 18:17.200
libraries and it's unavailable that they don't do joint development to match their.

18:17.480 --> 18:23.120
And basically when you buy the machine you start to learn how to program it, how to do

18:23.120 --> 18:28.040
that. There is a huge books where everything is described but it is totally different

18:28.040 --> 18:32.400
on every machine.

18:32.400 --> 18:39.400
Were you contacted by any manufacturer that says well, we're, no, have you been contacted

18:39.960 --> 18:46.960
by any manufacturer of machines that say oh we just have done that already. Here is our

18:47.200 --> 18:49.200
importer from Kaikets.

18:49.200 --> 18:50.200
No.

18:50.200 --> 18:54.200
Is there any manufacturer you know of that does anything like that?

18:54.200 --> 19:01.200
I don't think they use Kikat or they know of it.

19:02.280 --> 19:09.280
This is just solution for our case. We use Kikat, we use also Eagle for legacy boards

19:09.720 --> 19:16.720
which are produced before we start using but we found that in Eagle we don't have so much

19:20.200 --> 19:27.200
access to all the resources on the design like in Kikat. So this is why Kikat is so flexible

19:27.960 --> 19:32.960
and so easy to fit in our goals.

19:32.960 --> 19:38.960
So my question is, is your plug-in open source as well because I think it's kind of interesting

19:39.640 --> 19:42.640
the whole reversing theory of some...

19:42.640 --> 19:49.640
If this plug-in is later embedded in Kikat, we don't have a problem with this.

19:51.720 --> 19:57.720
I think perhaps separate out the kind of reversing during part of it to have people support more

19:57.720 --> 20:00.720
machines could be super interesting.

20:00.720 --> 20:03.720
Yeah.

20:04.480 --> 20:11.480
Hi, you mentioned that you have optical inspection and changing with colors of capacitors. So

20:16.240 --> 20:22.240
when you have these scripts that generate the files for all of your machines, do they

20:22.240 --> 20:29.240
have sample pictures for all of your components? Which additional data do you have along besides

20:29.880 --> 20:32.880
the Kikat libraries?

20:33.040 --> 20:40.040
This is unavoidable because they just, for the optical inspection, for the moment we

20:40.880 --> 20:47.880
just prepare the file and prepare the libraries and then the optical inspection can take different

20:48.720 --> 20:54.800
pictures for one and same components and you say this is the variance of these components

20:54.800 --> 21:00.320
so you just add them to the libraries and next time they can scan between the different

21:00.320 --> 21:06.000
variants. But this is not done in the script. The script just makes the positions, the

21:06.000 --> 21:13.000
few usuals and other info for the optical inspection.

21:13.000 --> 21:16.000
Thank you very much.

21:16.000 --> 21:19.000
Thank you.

21:19.000 --> 21:25.000
So I think there were some additional questions. So Svetan, if you're available in the hallway

21:25.000 --> 21:28.480
the additional questions can be face to face.

