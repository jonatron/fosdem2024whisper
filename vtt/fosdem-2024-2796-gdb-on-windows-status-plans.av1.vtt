WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:32.060
you

01:00.000 --> 01:02.060
you

01:30.000 --> 01:32.060
you

03:30.000 --> 03:40.000
you

03:40.000 --> 03:52.000
should I start over? No.

03:52.000 --> 03:56.000
Hello, checking, sound check.

03:56.000 --> 03:58.000
Sorry everyone at home.

03:58.000 --> 04:00.000
Alright, so not asynchronous.

04:00.000 --> 04:04.000
So you move this to separate thread and then there's a way for one thread to communicate with the event.

04:04.000 --> 04:06.000
Something happened.

04:06.000 --> 04:13.000
We did this change in GDB more recently in GDB 13 before that the debugger really blocked.

04:13.000 --> 04:17.000
Like you continue the execution, you couldn't do anything else until the inferior stopped.

04:17.000 --> 04:21.000
So that was something that was upgraded in GDB 13.

04:21.000 --> 04:26.000
So now, skip the slides.

04:26.000 --> 04:32.000
So now in GDB 13, this is something that's more important to ID.

04:32.000 --> 04:37.000
That the ID you can press the continue button, the inferior is now executing.

04:37.000 --> 04:46.000
But the ID at the same time now can execute GDB commands like disassemble or install new breakpoints, search symbols, things like that.

04:46.000 --> 04:48.000
Now it can do that while inferior is running.

04:48.000 --> 04:50.000
Well, before it couldn't.

04:50.000 --> 04:55.000
The ID would have to stop the whole program and then do something.

04:56.000 --> 05:04.000
Going back, this other function, the counterpart of the waiting for an event is when you continue the event.

05:04.000 --> 05:11.000
You have this argument here, this parameter where as argument you can pass either one of these two macros.

05:11.000 --> 05:19.000
And this is basically, you know, like in GDB, when you get a signal and then you can decide to pass the signal to the inferior or not.

05:19.000 --> 05:21.000
You can suppress it or pass it.

05:21.000 --> 05:24.000
So when you pass it, it calls the signal handler in the inferior.

05:24.000 --> 05:27.000
There's something like that on Windows.

05:27.000 --> 05:29.000
Not that important, but it's similar enough.

05:29.000 --> 05:32.000
But they call it exceptions, not signals.

05:32.000 --> 05:37.000
And this function here, you decide whether to suppress the exception or not.

05:37.000 --> 05:41.000
Will the inferior continue processing the exception or will it be suppressed?

05:41.000 --> 05:46.000
And it's important to know that you do this decision when you call this function.

05:46.000 --> 05:48.000
I mentioned this already.

05:48.000 --> 05:51.000
All right, keep that in mind.

05:51.000 --> 05:55.000
So this is very basically how the debugger internally works.

05:55.000 --> 06:01.000
All stop mode is default mode in GDB, how everyone knows how it works.

06:01.000 --> 06:04.000
So here we have five threads.

06:04.000 --> 06:06.000
This is time, time period one.

06:06.000 --> 06:08.000
Everything is running, runnable.

06:08.000 --> 06:10.000
And then T3 is about to hit an exception.

06:10.000 --> 06:14.000
So it hits an exception and you're calling wait for debug event.

06:14.000 --> 06:19.000
It returns saying an event happens and the kernel freezes everything in the process.

06:19.000 --> 06:22.000
All threads, the elements, they're frozen.

06:22.000 --> 06:24.000
And this one got an exception.

06:24.000 --> 06:28.000
At this point, the user is now inspecting the program, debugging the actual bug,

06:28.000 --> 06:31.000
reading memory, backtracing, blah, blah.

06:31.000 --> 06:34.000
And finally, they decide to resume execution.

06:34.000 --> 06:37.000
And then that's when GDB calls this continued bug event

06:37.000 --> 06:41.000
and then passes that decision of whether to suppress exception or not.

06:41.000 --> 06:43.000
So it's late, it's here.

06:43.000 --> 06:48.000
And then all threads go back to being runnable again.

06:49.000 --> 06:55.000
That is if you want everything to be running or stop and then everything running again.

06:55.000 --> 07:00.000
There are times where you'll want to only resume one thread

07:00.000 --> 07:02.000
and leave everything else suspended, frozen.

07:02.000 --> 07:06.000
Internally, GDB needs to do this, like to step over breakpoints.

07:06.000 --> 07:12.000
But the user may also want to focus on a particular thread leaving every other frozen.

07:12.000 --> 07:16.000
And we do that, the user interface is to enable the setting.

07:16.000 --> 07:20.000
This doesn't work currently upstream, even though internally everything works

07:20.000 --> 07:23.000
because GDB needs to know how to step over a breakpoint.

07:23.000 --> 07:25.000
But it's never been exposed to the user.

07:25.000 --> 07:28.000
Nobody wired up this to the back end.

07:28.000 --> 07:32.000
So I did a little change in my work and it actually works.

07:32.000 --> 07:38.000
So it's the same as before, the exception triggers, user inspects the program

07:38.000 --> 07:41.000
and then decides to resume T1 instead of T3.

07:41.000 --> 07:44.000
And GDB suspends everything else

07:44.000 --> 07:46.000
and then calls continue debug event for T3,

07:46.000 --> 07:48.000
because that's where the event came from.

07:48.000 --> 07:51.000
And now T1 is runnable.

07:51.000 --> 07:55.000
But what if you want to do the converse, which is instead of running one

07:55.000 --> 08:00.000
and stopping everything else, you want to stop one but leave everything else running.

08:00.000 --> 08:02.000
That's what's called the non-stop mode.

08:02.000 --> 08:05.000
And this is what I wanted to make possible in Windows.

08:05.000 --> 08:09.000
Because this is supported on Linux since 2008.

08:09.000 --> 08:13.000
I know because I worked on that.

08:14.000 --> 08:17.000
So a long time by now and also supported on remote targets,

08:17.000 --> 08:21.000
meaning GDB server for Linux, but also some other embedded systems out there.

08:21.000 --> 08:23.000
They support this mode as well.

08:23.000 --> 08:26.000
But native Windows debugging does not support this.

08:26.000 --> 08:32.000
So non-stop mode means only the event, the breakpoint, reports to stop to the user

08:32.000 --> 08:34.000
and everything else continues running.

08:34.000 --> 08:37.000
This is interesting, again, mostly for IDE's.

08:37.000 --> 08:41.000
You can imagine a big list of threads and then only one of them reports an event.

08:41.000 --> 08:45.000
But it's also interesting because maybe one of the threads is important to keep running

08:45.000 --> 08:49.000
because maybe it's a watchdog or something that needs to ping a server

08:49.000 --> 08:53.000
and if it stops pinging, the program doesn't work.

08:53.000 --> 08:56.000
There's something on the other end that needs to see this

08:56.000 --> 09:01.000
while you inspect some kind of debugging triggered by some thread.

09:01.000 --> 09:08.000
And the reason I thought all over these years that Windows wouldn't work for this

09:08.000 --> 09:10.000
is that, well, we have this problem.

09:10.000 --> 09:13.000
Wait for the bug event, that magic function reference in the event,

09:13.000 --> 09:15.000
suspends everything already.

09:15.000 --> 09:17.000
The kernel already does this.

09:17.000 --> 09:21.000
There's no way to tell the kernel to not suspend every thread except the one that got the event.

09:21.000 --> 09:24.000
And we want to leave them running.

09:24.000 --> 09:29.000
So naively, I thought maybe just immediately suspend,

09:29.000 --> 09:34.000
block, freeze the thread that you care about, and call continuity bug event, right?

09:34.000 --> 09:36.000
But you can't because this is too early.

09:36.000 --> 09:38.000
We just got the event.

09:38.000 --> 09:41.000
The user hasn't yet decided whether to pass or not.

09:41.000 --> 09:43.000
The exception.

09:43.000 --> 09:47.000
That only happens after.

09:47.000 --> 09:51.000
And I was looking up this past year,

09:51.000 --> 09:55.000
and I noticed on the Microsoft website describing these APIs

09:55.000 --> 09:59.000
that they introduced a new flag to continue debugging events.

09:59.000 --> 10:01.000
And I read this and I was like, really?

10:01.000 --> 10:03.000
It's like they wrote this just for me.

10:03.000 --> 10:05.000
Hey, they're awesome.

10:05.000 --> 10:08.000
Well, it's not the ideal thing that I would like.

10:08.000 --> 10:11.000
I would like to have a way that the kernel doesn't freeze everything.

10:11.000 --> 10:12.000
Still freezes everything.

10:12.000 --> 10:15.000
But what they do is, if you pass this flag,

10:15.000 --> 10:18.000
what you're saying is, I got the event.

10:18.000 --> 10:19.000
Okay, cool.

10:19.000 --> 10:22.000
But I don't want to handle it right now.

10:22.000 --> 10:24.000
So, but I call continue.

10:24.000 --> 10:32.000
And I'm asking the kernel report the event again as soon as the thread becomes runnable.

10:32.000 --> 10:36.000
So what I do is, I call suspend thread on a thread that got the event.

10:36.000 --> 10:38.000
So it's no longer runnable.

10:38.000 --> 10:43.000
I call this continue the debug event function saying,

10:43.000 --> 10:49.000
get me back the same event again once I become, make the thread runnable.

10:49.000 --> 10:50.000
That's what he's saying here.

10:50.000 --> 10:52.000
Well, in other words.

10:52.000 --> 10:57.000
How does this actually work in practice using the same diagram as I showed before?

10:57.000 --> 11:01.000
I'll prototype this quickly with a hack and it worked.

11:01.000 --> 11:02.000
Amazing.

11:02.000 --> 11:04.000
Now I just need to make it clean.

11:04.000 --> 11:07.000
And of course that's, oh, sorry.

11:07.000 --> 11:10.000
So, some years before everything is runnable.

11:10.000 --> 11:12.000
T3 is about to raise an exception.

11:12.000 --> 11:14.000
It raises an exception.

11:14.000 --> 11:16.000
The kernel freezes everything.

11:16.000 --> 11:18.000
There's nothing I can do to control this.

11:18.000 --> 11:21.000
And then I freeze the thread that got an event.

11:21.000 --> 11:25.000
And then I call this function with this new magic macro.

11:26.000 --> 11:30.000
And then GDB remembers that T3 will get a repeated event later.

11:30.000 --> 11:34.000
Now users is inspecting the thread, but everything else is running now.

11:34.000 --> 11:35.000
Right?

11:35.000 --> 11:39.000
So the kernel paused all the threads, but I immediately told the kernel,

11:39.000 --> 11:40.000
we resume everything else.

11:40.000 --> 11:42.000
So there will be a small freeze.

11:42.000 --> 11:45.000
There will be increased jitter caused by the debugger.

11:45.000 --> 11:49.000
But most of the time whole threads will be running.

11:49.000 --> 11:54.000
And then later the user decides to re-resume T3

11:54.000 --> 11:57.000
and the debugger just calls, you know, resume thread,

11:57.000 --> 11:58.000
unfreeze the thread.

11:58.000 --> 12:02.000
And remember, now the kernel, because the thread is now runnable,

12:02.000 --> 12:04.000
is going to re-report the event.

12:04.000 --> 12:09.000
And because we recorded it earlier that we will get a new repeated event,

12:09.000 --> 12:12.000
the debugger knows, okay, it's a repeated event.

12:12.000 --> 12:15.000
Now I need, I know I need to call continue debug event

12:15.000 --> 12:18.000
with the proper flag saying suppressed event or not,

12:18.000 --> 12:20.000
the exception or not.

12:20.000 --> 12:22.000
Yeah.

12:22.000 --> 12:25.000
And a colleague of mine wondered, does this work

12:25.000 --> 12:29.000
when multiple threads hit the breakpoint before you decide to resume?

12:29.000 --> 12:30.000
Yes, it does work.

12:30.000 --> 12:32.000
You know, same thing as before.

12:32.000 --> 12:37.000
And here you are looking at this thread and this one raises an exception.

12:37.000 --> 12:38.000
Everything works.

12:38.000 --> 12:41.000
You can look at this offline if you want to.

12:41.000 --> 12:43.000
Yeah, there's a lot more to this.

12:44.000 --> 12:47.000
That's when I, okay, the hacky version works now.

12:47.000 --> 12:49.000
I need to make it clean.

12:49.000 --> 12:54.000
And that, you know, I stumble a lot of things that I don't have time to go over right now.

12:54.000 --> 12:56.000
I'm going to touch a little bit on the test suite.

12:56.000 --> 12:58.000
How much time do I have, Dodgy?

12:58.000 --> 13:00.000
Three minutes.

13:00.000 --> 13:02.000
Plus five.

13:02.000 --> 13:04.000
Yeah, okay.

13:04.000 --> 13:07.000
All right, so I put this in the abstract.

13:07.000 --> 13:09.000
The reason is when I talk about the test suite,

13:09.000 --> 13:11.000
I need to make this distinction.

13:11.000 --> 13:15.000
And when I say GDB on Windows, there are actually two ports for Windows.

13:15.000 --> 13:19.000
There's GDB Compiled as a SIGWIN program.

13:19.000 --> 13:22.000
And there's GDB Compiled with the mean GW tool chain,

13:22.000 --> 13:25.000
which means it's a native Windows program.

13:25.000 --> 13:29.000
SIGWIN, for those who don't know, it's like,

13:29.000 --> 13:31.000
gives you a POSIX environment.

13:31.000 --> 13:35.000
It's a collection of tools, but it's also a runtime,

13:35.000 --> 13:37.000
a DLL that every tool is linked with.

13:37.000 --> 13:41.000
And this runtime provides you POSIX things like signals, PDYs,

13:41.000 --> 13:42.000
and a bunch of stuff.

13:42.000 --> 13:45.000
The C runtime that's used is not the one that comes with Windows normally.

13:45.000 --> 13:47.000
It's based on NewLib.

13:47.000 --> 13:51.000
Try to be as close as a Linux environment is

13:51.000 --> 13:54.000
so that you can recompile your application,

13:54.000 --> 13:58.000
a Linux application with minimal changes, quote, unquote.

13:58.000 --> 14:00.000
It works.

14:00.000 --> 14:03.000
So it's not an emulator. You have to recompile your program.

14:04.000 --> 14:09.000
Right. So the core of GDB has two ports,

14:09.000 --> 14:13.000
like the event loop, for example, is based on select slash pull

14:13.000 --> 14:16.000
for most Unix machines, ports.

14:16.000 --> 14:18.000
And SIGWIN is one of those.

14:18.000 --> 14:21.000
But the native version of GDB for Windows,

14:21.000 --> 14:23.000
based on mean GW, has a separate event loop

14:23.000 --> 14:26.000
based on this wait for multiple objects function,

14:26.000 --> 14:29.000
which is the Microsoft version of select.

14:30.000 --> 14:34.000
Right. But the backend, the code that talks with the debug API,

14:34.000 --> 14:37.000
those functions I mentioned for it, it's shared between both ports.

14:37.000 --> 14:39.000
It's the same code except for SIGWIN,

14:39.000 --> 14:43.000
there's extra magic to make some of SIGWIN-specific things work.

14:45.000 --> 14:47.000
And this is where I get to the test suite,

14:47.000 --> 14:50.000
because part of making this work and upstreamable,

14:50.000 --> 14:53.000
and I would get to a point where I was, you know,

14:53.000 --> 14:55.000
sure that I wasn't breaking things,

14:55.000 --> 14:57.000
because this isn't making this work involved,

14:57.000 --> 15:00.000
I'm revamping the backend very substantially.

15:00.000 --> 15:03.000
So I want to make sure that I wasn't breaking things.

15:03.000 --> 15:05.000
So run the test suite, right?

15:05.000 --> 15:10.000
Except running the test suite on Windows is a major pain in the...

15:12.000 --> 15:13.000
The test suite is...

15:13.000 --> 15:15.000
GDB test suite is built on Dezhek Nu.

15:15.000 --> 15:19.000
Dezhek Nu is an infrastructure built on expect,

15:19.000 --> 15:21.000
and expect itself is built on TECL,

15:21.000 --> 15:23.000
which is a programming language.

15:24.000 --> 15:27.000
And Dezhek Nu assumes a Unix-like environment,

15:27.000 --> 15:30.000
which you don't have on Windows normally.

15:30.000 --> 15:32.000
You know, assumes POSIX shells and utilities,

15:32.000 --> 15:37.000
kill, CPE, VOO, and there is no native expect part.

15:38.000 --> 15:42.000
There was a company active state that had something like that,

15:42.000 --> 15:45.000
but they killed that project some years ago.

15:45.000 --> 15:51.000
So you have to use something that's Unix-like to run Dezhek Nu.

15:52.000 --> 15:56.000
If you test GDB on a segment environment,

15:56.000 --> 15:58.000
you just run MakeCheck, it does work.

15:59.000 --> 16:03.000
It's super slow, not stable, but it does work.

16:04.000 --> 16:09.000
But if you want to make native Windows GDB, you test that,

16:09.000 --> 16:12.000
it's not the same thing, it's a proxy, but it's not the same thing.

16:12.000 --> 16:16.000
Remember, I said that the core of GDB is different code paths.

16:16.000 --> 16:18.000
So I would want to be able to test this guy as well,

16:18.000 --> 16:19.000
I mean GWGDB.

16:20.000 --> 16:24.000
So how about we run the test suite, Dezhek Nu under SIGWIN,

16:24.000 --> 16:27.000
but make it spawn the Windows GDB?

16:27.000 --> 16:30.000
Yeah, that's a potential idea.

16:30.000 --> 16:33.000
But the problem is, it's a SIGWIN expect,

16:33.000 --> 16:35.000
it's spawning a Windows process,

16:35.000 --> 16:39.000
and the input and output is going to be connected to a PTY

16:39.000 --> 16:43.000
from the SIGWIN side, but what the Windows GDB sees is just a pipe.

16:43.000 --> 16:46.000
And when GDB is connected to a pipe,

16:46.000 --> 16:50.000
because that's how SIGWIN PTYs work under the hood, it's a pipe,

16:50.000 --> 16:55.000
GDB is connected to a pipe, it's not what's called an is at PTY,

16:55.000 --> 16:58.000
so it disables everything that's interactive,

16:58.000 --> 17:00.000
so in the test suite, it completely falls down.

17:00.000 --> 17:04.000
And something else is that the test, the Dezhek Nu,

17:04.000 --> 17:10.000
because it is expecting that the inferior is being run under PTY,

17:10.000 --> 17:14.000
so there will be terminal mode controls, time's up.

17:14.000 --> 17:17.000
But I have the five?

17:17.000 --> 17:19.000
Because...

17:19.000 --> 17:22.000
I'll tell you, if you want one minute, you can do it.

17:22.000 --> 17:24.000
I'll give you one minute.

17:24.000 --> 17:28.000
I'm almost over, just 30 more slides, no, just one more.

17:30.000 --> 17:33.000
Right, so there are some ideas to get this working,

17:33.000 --> 17:36.000
there's also path mapping issues,

17:36.000 --> 17:39.000
because what they expect sees path-wise,

17:39.000 --> 17:43.000
slash, C drive, slash, X, it's not the same as GDB.

17:43.000 --> 17:47.000
C is because it's a native program, so it sees X, colon.

17:47.000 --> 17:52.000
And another problem is that the GDB test suite,

17:52.000 --> 17:55.000
when it wants to test multi-threaded things,

17:55.000 --> 17:57.000
the tests are all written with P-threads,

17:57.000 --> 17:59.000
which is not something native to Windows,

17:59.000 --> 18:03.000
even though mean GWW-W64 does have the WinP-threads library,

18:03.000 --> 18:05.000
so maybe we could use that.

18:05.000 --> 18:08.000
I have some ideas to try to make this work,

18:08.000 --> 18:12.000
but I haven't had the time to actually experiment much with this.

18:12.000 --> 18:14.000
I tried other things that I thought would be interesting,

18:14.000 --> 18:16.000
but they didn't work.

18:16.000 --> 18:19.000
The test suite, compiling on, yeah.

18:19.000 --> 18:23.000
Right, so about compilation, just if anyone here is motivated

18:23.000 --> 18:26.000
by this talk and wants to help.

18:28.000 --> 18:31.000
Compiling GDB on Sigwin is super slow,

18:31.000 --> 18:35.000
so the way that I got around it is to cross-compile,

18:35.000 --> 18:39.000
and yeah, some things here you can do.

18:39.000 --> 18:42.000
And then I can cross-compile to Sigwin,

18:42.000 --> 18:44.000
but to run the test suite, I need to run it inside Windows,

18:44.000 --> 18:46.000
that's, I can't avoid that.

18:46.000 --> 18:50.000
But I can point GDB, the test suite inside Windows,

18:50.000 --> 18:55.000
pointed to the built GDB that I've built on, sorry, on Linux.

18:55.000 --> 18:57.000
Whoo!

18:57.000 --> 19:00.000
All right, so maybe I should skip, yeah.

19:00.000 --> 19:05.000
So test suite, bad, need to fix a lot of things, that's the thing.

19:05.000 --> 19:09.000
GDB, it's the native, yeah, this is the thing that's for the future.

19:09.000 --> 19:13.000
Make it possible for GDB to debug programs

19:13.000 --> 19:15.000
compiled with Visual Studio.

19:15.000 --> 19:17.000
That is something that is missing,

19:17.000 --> 19:20.000
it's making people not use GDB on Windows,

19:20.000 --> 19:24.000
and I would prefer people not to think about using other tools,

19:24.000 --> 19:27.000
you know, staying on the lane.

19:27.000 --> 19:29.000
So at some point I would like to work on this,

19:29.000 --> 19:31.000
but, you know, no time for that.

19:31.000 --> 19:33.000
Just leave it on the screen if people have questions

19:33.000 --> 19:35.000
like maybe one question?

19:35.000 --> 19:37.000
Nothing.

19:37.000 --> 19:39.000
All right.

19:39.000 --> 19:41.000
Thank you.

19:41.000 --> 19:43.000
So.

19:43.000 --> 19:45.000
Okay, actually there is one minute left.

19:45.000 --> 19:47.000
Is there one quick question?

19:47.000 --> 19:49.000
Yeah.

19:49.000 --> 19:51.000
Okay, so here's my question.

19:51.000 --> 19:53.000
Oh no.

19:53.000 --> 19:55.000
Have you tried using Python to run the test suite?

19:55.000 --> 19:57.000
I have.

19:57.000 --> 19:59.000
GDB executes and stuff.

19:59.000 --> 20:01.000
I, that would be writing a new test suite.

20:01.000 --> 20:03.000
Yeah, that's right.

20:03.000 --> 20:07.000
I know there's actually some people that do that, some companies,

20:07.000 --> 20:13.000
but I wanted to find a way that it can run the existing tests

20:13.000 --> 20:15.000
before giving up completely.

20:15.000 --> 20:17.000
Okay.

