WEBVTT

00:00.000 --> 00:13.720
Awesome. Thank you. So my name is Mark and I'm here to show off the IQ Engine open source

00:13.720 --> 00:19.920
project. I'll talk about where it's headed in the future as well. Also here we have Roman

00:19.920 --> 00:27.120
who's involved in IQ Engine as well as SIGMF. And this talk is aimed primarily at two groups.

00:27.120 --> 00:34.640
One is folks who are newish to SDR and RF signal processing, students, hobbyists, anyone

00:34.640 --> 00:40.040
who wants to learn more about all this software that you're seeing. And then second is folks

00:40.040 --> 00:46.120
who run or maintain an open source project that involves RF signal processing in some

00:46.120 --> 00:52.760
way. And hopefully even if you're not in those groups you'll still find some interest here.

00:52.760 --> 01:00.200
So IQ Engine currently it's a web app that is all about RF recordings. It lets you preview

01:00.200 --> 01:06.200
recordings, manage them, analyze them, some light processing, and then most importantly

01:06.200 --> 01:12.840
is sharing and all in your browser. So entirely web based. And I'll show a quick little demo

01:12.840 --> 01:21.600
of what the current tool looks like. So IQ Engine is, it's available at IQEngine.org.

01:21.600 --> 01:26.360
The project runs a public instance of the tool. But in this case I've got one running

01:26.360 --> 01:32.400
locally because I wasn't sure about Wi-Fi. So the main screen here is essentially a list

01:32.400 --> 01:37.360
of these RF recordings. They're all stored in the SIGMF format if you're familiar with

01:37.360 --> 01:45.960
SIGMF. We have some good ones from Jean-Michel and Aang23. A lot of folks who are here today.

01:45.960 --> 01:51.800
You can also open a recording that's local to your machine and then all the processing

01:51.800 --> 02:01.160
is done client side. So like I can open a local directory full of recordings. Here, recordings

02:01.160 --> 02:09.040
and it'll list out them all, generate the thumbnails. So actually it's the same directory

02:09.040 --> 02:15.880
that I had served from the server. You can also open just one local file pair. So sort

02:16.800 --> 02:21.040
of, anyway, so back to the list here. If you click on one of them, you're brought to a

02:21.040 --> 02:26.800
spectrogram style interface where it loads the samples that you're looking at at any

02:26.800 --> 02:32.000
given time. So that way you can have enormous files. And then the mini map on the right

02:32.000 --> 02:36.360
represents the entire recording. So you can jump to any part of it and the little gray

02:36.360 --> 02:43.440
area is the part you're looking at. We have time, frequency and IQ like you'd expect.

02:43.520 --> 02:53.520
That's FM. And then some other features here are, so there's time and frequency cursors

02:53.520 --> 03:01.680
if you want to measure stuff, adjustable dynamic range for the color, windowing, FFT size,

03:01.680 --> 03:06.200
you can add an FIR filter taps and all of that is run client side. The FFTs are done

03:06.200 --> 03:11.520
client side, the FIR filter is. But the one part that's not client side is our plug-in

03:11.560 --> 03:16.560
system. So if you select a portion of the recording that you want to send to the plug-in

03:16.560 --> 03:25.060
server, you can select it there and then, let me zoom in here, choose a plug-in. So this

03:25.060 --> 03:30.160
was an FM recording. So I'm going to run an FM receiver that's implemented in Guinea

03:30.160 --> 03:39.160
Radio. And it sends the samples to the server that runs Guinea Radio. And then in this case,

03:39.360 --> 03:45.200
it's actually returning a WAV file with the audio of that signal. But there's other types

03:45.200 --> 03:51.600
of outputs like you could run a block or a plug-in that gives you IQ as the output. So

03:51.600 --> 03:58.120
if I do a low pass filter, it's just going to output IQ. Let me give it a proper cutoff

03:58.120 --> 04:03.400
frequency there. And then currently we're just displaying the IQ in a pop-up. But in

04:03.400 --> 04:07.440
the future, we're trying to figure out the best way to replace kind of the signal that's

04:07.440 --> 04:11.920
already on the screen with this new one so that you can chain plug-ins together. So that's

04:11.920 --> 04:18.920
sort of the gist of the tool. Now back to the slides here. So everything's, IQ engine's

04:22.560 --> 04:28.200
built on top of SIGMF in many ways. If you're not familiar, SIGMF is an open standard for

04:28.200 --> 04:33.960
saving your RF recordings to a file. It's as simple as it gets. You have a binary IQ

04:34.040 --> 04:40.040
file which is sort of the native way to store a recording and then a JSON file. And the

04:40.040 --> 04:45.320
SIGMF specifications mainly tell you how to write that JSON file. So there's stuff like

04:45.320 --> 04:50.280
how you specify sample rate, center frequency, data type. And then I'll show you annotations

04:50.280 --> 04:56.920
in a second here. And by using SIGMF, you have software interoperability. And then you

04:56.920 --> 05:02.400
can also avoid data bit rot where like in five years you forget what sample rate stuff was

05:02.480 --> 05:09.480
taken at. If you want to learn more about SIGMF, there's a link at the top of IQengine.org

05:10.560 --> 05:17.560
and it also links out to the SIGMF GitHub page. So SIGMF, the standard is managed by

05:17.680 --> 05:24.680
GNU Radio. It's kind of a sub-project sort of. Now as far as the IQ engine code itself,

05:25.680 --> 05:32.040
it's web-based, front-end uses React, Tailwind, some big dependencies that we get a lot of

05:32.080 --> 05:37.360
use out of our code mirror for all of the code editing. PyOdide lets us run Python in

05:37.360 --> 05:43.880
the browser. I didn't demo that but there's some videos online about how that gets used.

05:43.880 --> 05:50.880
And then Plotly for those time frequency and IQ plots. WebAssembly for FFTs. And then for

05:51.400 --> 05:55.880
our documentation, we use the MDX system which lets us write it in markdown and then have

05:55.960 --> 06:02.960
it rendered as part of this page here. So this was written in markdown and then it lets us

06:03.480 --> 06:10.480
render it as React components. Kind of nice. Now, so that was kind of the introduction

06:11.000 --> 06:16.240
but I wanted to start off where I left at GNU Radio conference last year. So what have

06:16.240 --> 06:23.000
we done since then? Well now it's possible to run a local instance of IQengine like if

06:23.040 --> 06:29.400
you want to run it within an organization or whatever to share things privately. You

06:29.400 --> 06:36.400
can run an instance and you can put the recordings on the same server. So easy enough. Or something

06:37.960 --> 06:42.640
that's mounted to the file system as long as Python open can see it and then it can serve

06:42.640 --> 06:48.760
the recording. And the other option is to use Cloud Storage which is what we do for

06:48.760 --> 06:55.760
IQengine.org. And as far as how to do that, so the general idea is you pick a directory

06:57.760 --> 07:04.760
on your server and then you can run IQengine with the Docker images. So if you go to the

07:04.920 --> 07:10.200
install with Docker page, you really, all you have to do is change the directory that's

07:10.200 --> 07:17.200
mounted into the container. So pretty much this part here of the command. And then the

07:17.320 --> 07:23.440
rest of this command will pull the latest IQengine Docker image and it will run it. And you should

07:23.440 --> 07:27.040
be able to see your recordings. They'll look like this because they'll be local to the

07:27.040 --> 07:34.040
back end. Versus IQengine.org which has a few different data sources that pop up here.

07:37.000 --> 07:44.000
So and that's, yeah, fairly new. If you end up using this and notice some quality of life

07:45.000 --> 07:52.000
issues, definitely reach out on Discord or GitHub. So next up, I'm going to dive into the plug-in

07:52.000 --> 07:59.000
system that you saw me run with the FM receiver. So the idea is any RF signal processing that you

07:59.000 --> 08:05.000
want to run on a back end server but triggered from the browser. So what we have within our

08:05.000 --> 08:12.000
project is this rest-based API and it allows for someone to write the plug-in server in any

08:12.360 --> 08:19.360
language they want. We have an example in Python and then Loic wrote one for Rust. The Python

08:20.880 --> 08:25.960
one can run Gini radio flow graphs. It just pretty much runs the Python flow graph and

08:25.960 --> 08:32.120
then uses ZMQ to get samples in and out of it. But in the future, there'll be more languages

08:32.120 --> 08:39.120
and by using this rest API, it doesn't matter. It could be, really you can deploy it and implement

08:39.240 --> 08:44.440
it however you want to as long as it supports this interface. I'm going to show a little

08:44.440 --> 08:50.200
demo later running SatDump which is kind of an example of a whole separate project, not

08:50.200 --> 08:56.520
a Gini radio flow graph or anything, but a piece of open-source software that you can

08:56.520 --> 09:01.560
trigger from IQ Engine. And then Aang will be presenting more about SatDump in like an

09:01.560 --> 09:08.560
hour or so. So as far as how the plug-ins look, the Python based ones, we tried to make

09:08.640 --> 09:13.720
it as easy as possible to create a new one. This isn't the actual rest API, this is just

09:13.720 --> 09:18.360
how you would make a new Python plug-in and then you would use an existing server code

09:18.360 --> 09:23.800
that we already have. So you can see you have to specify your custom parameters and then

09:23.800 --> 09:29.920
there's a run function where you're given the samples and you have to return several

09:29.920 --> 09:36.920
different data types. As far as Gini radio, you specify the flow graph, but the only catch

09:37.160 --> 09:43.160
is you have to substitute your file source and GUIs with the ZMQ source and ZMQ sync.

09:43.160 --> 09:48.160
That's how we get samples in and out. Not the most performant thing, but it gets the

09:48.160 --> 09:52.640
job done. So you can see these first couple blocks are the ZMQ ones and then the rest

09:52.640 --> 09:58.200
represents the flow graph. So we have a Python flow graph that implements an FM receiver

09:58.200 --> 10:05.200
in this case and that was the plug-in that I ran earlier. So the kind of the motivation

10:05.560 --> 10:12.560
here is if you are an author of an out of tree module for Gini radio, you probably already

10:12.600 --> 10:18.960
shared the code somewhere like GitHub and created some examples, some example flow graphs,

10:18.960 --> 10:25.460
but the next step would be making it more accessible and easy for folks to find and play

10:25.460 --> 10:32.460
with and I think this could be an option there by exposing it as a plug-in. Now, let

10:33.460 --> 10:40.460
me go back to the plug-ins. So I'll go ahead and run the SAT dump one. So I've got a recording

10:42.420 --> 10:49.420
of NOAA APT right here contributed by Aang. So I can click that, I can browse around

10:50.460 --> 10:57.460
the signal. I'll notice so it's actually offset, but I believe this is the APT signal. You

10:57.820 --> 11:02.340
could jump to different parts of the file there and then as far as running it through

11:02.340 --> 11:09.340
SAT dump, I want to run the entire file because it needs a decent amount of samples. So I'm

11:11.020 --> 11:18.020
going to select the whole file and then under plug-ins, we've got the fresh new SAT dump

11:18.020 --> 11:24.100
plug-in already preloaded with the pipeline for APT, but you can put whatever pipeline

11:24.140 --> 11:31.140
you want. So right now it ran SAT dump under the hood. So here's one of the images that

11:33.940 --> 11:39.260
comes out. I think IQ Engine still has some work to do as far as if you have a bunch of

11:39.260 --> 11:43.540
different outputs, how do you present them all to the user? There's a lot of web design

11:43.540 --> 11:50.540
that can go on there. So either it pops open something or it saves a file and it supports

11:51.180 --> 11:58.180
all the different MIME types. If you're familiar with web, it sort of just uses MIME type and

11:58.500 --> 12:04.500
then we added some custom MIME types for IQ, like the different data types for SIGMF.

12:04.500 --> 12:11.500
As far as other plug-ins, I think, yeah, pretty much, we have a detector as well. So let

12:11.820 --> 12:18.820
me go to a recording that I give my students when we study signal detection and classification.

12:21.460 --> 12:26.060
This is kind of like a toy example meant for testing a detector where you have a few different

12:26.060 --> 12:33.060
signals here. IQ Engine's not about implementing RFML, it's about sharing it and making it

12:33.180 --> 12:40.180
more accessible. So we made a very simple detector just to have an example. It's written

12:42.740 --> 12:49.740
in Python, you're welcome to check it out in the source. It's called Simple Detector.

12:51.340 --> 12:58.340
We also have Marco's detector, he was someone else who was working on it. Simple Detector

12:58.340 --> 13:03.140
was pretty quick for that number of samples and it did a decent job. There's one extra

13:03.140 --> 13:10.140
little detected emission there. Now the results are in the form of SIGMF annotations which

13:10.300 --> 13:16.820
are bounding boxes in time and frequency and that's how the results are shared from the

13:16.820 --> 13:21.900
plug-in. So if you wanted to download the raw metadata file, the SIGMF file, you can

13:21.900 --> 13:28.900
go to the bottom here and here are the annotations that the plug-in created. So we sort of copied

13:29.180 --> 13:36.180
the SIGMF format for the return data type. And if you wanted to perform classification

13:36.900 --> 13:43.900
you would simply fill out the label and they would show up. Within IQ Engine you can also

13:43.900 --> 13:49.060
edit the annotations and edit the labels. So if you wanted to manually tweak stuff like

13:49.060 --> 13:55.100
you were making an RFML data set, sort of like a golden meta file, you could do that

13:55.100 --> 14:02.100
here. What I find most useful is simply to have a quick glance at how well something

14:02.220 --> 14:09.220
worked. If you had tons of files to run through you wouldn't want to do all this clicking,

14:09.580 --> 14:14.300
you would just make a script and you could certainly run the plug-ins from a Python script.

14:14.340 --> 14:21.340
It would just need to call the REST API. Back to the slides. Alright, so I want to take

14:21.900 --> 14:28.900
just a really quick tangent to mention, remind people about what Gini Radio provides and then

14:30.020 --> 14:37.020
how it relates to this plan that the project has. So Gini Radio, it's a way to implement

14:37.780 --> 14:44.280
your RF, DSP and C++ or Python. It gives us a standard framework for doing that implementation

14:44.640 --> 14:50.720
and it's easy to get annoyed at the boilerplate and how to install everything. But in the

14:50.720 --> 14:56.160
end if you use that framework it means that other people who are familiar with Gini Radio

14:56.160 --> 15:02.320
can then install your Aditree module. They sort of know the standard usage of your blocks,

15:02.320 --> 15:07.160
where to look for the example flow graphs, how to connect your application with their

15:07.520 --> 15:14.520
SDR sitting on their desk. And that's an enormous value, that's in my opinion one of the main

15:14.520 --> 15:21.620
values of Gini Radio. And then the GUIs are nice as well, it's not always easy to program

15:21.620 --> 15:28.240
GUIs. So if you're curious about learning about different Aditree modules, C-Gran.org

15:28.240 --> 15:34.600
is where we point people. And I mention this because C-Gran represents a centralized location

15:34.640 --> 15:41.640
for Gini Radio applications and libraries, what we call out of tree modules. But kind

15:43.200 --> 15:48.440
of zooming out one more layer going beyond just Gini Radio is what I'm going to talk

15:48.440 --> 15:55.440
about here in a sec. So let's say that you're a developer of open source software that involves

15:56.240 --> 16:03.240
RF processing in some way, like you wrote SAT dump and you're doing satellite signal processing.

16:03.520 --> 16:07.840
You build something, you want to share it, you want to keep it easy to demonstrate and

16:07.840 --> 16:13.600
show off to people, easy to use. Those are sort of the main steps you might take. Now

16:13.600 --> 16:20.600
on the other side of things, you have users out there, whoever they are, individual students,

16:20.880 --> 16:25.520
organizations, who first they need to discover that this software exists. That's like the

16:25.520 --> 16:31.120
very first step. And then how do you install it, how do you run it properly, how can I

16:31.200 --> 16:38.200
evaluate how well it's working and use it with my SDR or my recordings. So kind of a

16:38.560 --> 16:44.240
duality here. On the developer side, you might post your code to GitHub, you might share

16:44.240 --> 16:51.240
it as part of a Faw STEM talk. That's kind of like the current method that we use. On

16:52.200 --> 16:56.640
the user side of things, you might Google the topic you're interested in, like specific

16:56.680 --> 17:02.680
satellite, Wi-Fi, whatever. You'll probably come across what's out there. But it's not

17:02.680 --> 17:09.680
the best way to do it, right? Just by Googling. So installation can be an enormous barrier.

17:10.760 --> 17:17.760
When I teach CS students, it depends who you are, but some students and some folks are

17:18.400 --> 17:22.760
better at getting this software installed than others. Obviously having a lot of Linux

17:22.800 --> 17:28.640
experience helps folks who are new to Linux but want to dive into signal processing, they

17:28.640 --> 17:35.640
can struggle here and there. So it can definitely be a barrier. Now how do you actually run

17:35.640 --> 17:41.560
it? If it's a new radio flow graph, you probably know how, but not everything's easy to use.

17:41.560 --> 17:47.320
There's RF libraries out there that are not clear how exactly do you use it, but you know

17:47.320 --> 17:52.960
it's powerful. And then lastly, evaluating the software. Maybe you're going to use it

17:52.960 --> 17:59.960
as a dependency or use it as part of a project. So this idea to sort of evolve IQ engines,

18:02.160 --> 18:08.040
so instead of just being a way to share and evaluate RF recordings, it can also be used

18:08.040 --> 18:15.040
for just RF open source software in general. Sort of like a central hub, community driven

18:15.560 --> 18:22.120
for devs to share stuff for users to find and discover software. And then by exposing

18:22.120 --> 18:28.080
the software as a plugin, they can try it out on recordings that are already on the

18:28.080 --> 18:33.720
site or their own. And then one side benefit is university isn't anyone else who wants

18:33.720 --> 18:40.320
to show off their expertise and creates open source software. They can use this central

18:40.320 --> 18:47.320
hub as a way to do that. Now this is all in the browser primarily for accessibility

18:47.760 --> 18:51.720
sake. It's not the most performant way to do something like this, but it's extremely

18:51.720 --> 18:58.720
convenient. Really, it removes a lot of barriers. So users would be able to play around with

18:59.840 --> 19:05.440
a certain function using a variety of recordings. And it's more than just using recordings.

19:05.440 --> 19:10.840
They can try in the future, maybe there's a way to lower the SNR, like add noise and

19:10.840 --> 19:17.160
see if it still works or what not. Add a frequency shift, see if the RF function still works.

19:17.160 --> 19:21.200
And then on the author side of things, all you really would need to do is add this REST

19:21.200 --> 19:28.200
based interface or at least make it easy to call with CLI and then retrieve the results.

19:28.360 --> 19:35.360
So like Sat dump, I'm not using a REST interface. I'm just running the CLI in a way that's

19:35.440 --> 19:42.440
easy. Anyway, now one design decision that was made was to allow multiple plugin servers

19:42.720 --> 19:48.560
to connect to a single IQ Engine instance like at IQEngine.org. That way, like a university

19:48.560 --> 19:54.680
could run their own plugin server, have total control over it, but they could share their

19:54.680 --> 20:00.360
expertise, everything they want to show off. And this is really just a concept. So right

20:00.360 --> 20:07.600
now I showed you how IQ Engine lets you preview RF recordings and RF data sets. Well, I think

20:07.600 --> 20:12.000
in the future with these building blocks that I showed through the plugin system and this

20:12.000 --> 20:18.400
REST interface that we're designing, you could have a tool that would be used for previewing

20:18.400 --> 20:25.400
what I'm calling Functions App Software, really anything that involves RF signal processing.

20:25.400 --> 20:31.600
Now there are limitations, so a lot of RF apps can't simply be run on a recording. So

20:31.600 --> 20:38.600
SRS ran excellent LTE and 5G radio stack. Because of LTE and 5G's strict latency requirements,

20:41.640 --> 20:48.640
you can't easily just play it back. It's not straightforward, simply running it on a recording.

20:48.840 --> 20:55.840
You sort of want to simulate that closed loop system. So not all RF functions and apps are

20:57.560 --> 21:04.560
going to be shareable this way, but I think a vast majority of them are definitely GNU

21:04.560 --> 21:11.560
radio apps and those kind of processing applications. The other thing that you wouldn't show off

21:12.040 --> 21:19.040
is like an SDR interface, like a GUI, that wouldn't make any sense. Now if you're interested

21:20.320 --> 21:26.000
in contributing, it's a community led project, so we can always use more web devs. It turns

21:26.000 --> 21:33.000
out that the kind of folks in these RF circles tend to know C++, Python, but less so on the

21:33.600 --> 21:40.600
website. And I know I've had to learn a lot of web development to get this project moving

21:40.600 --> 21:46.680
more. So even if you're not a web developer, there's plenty of other ways to contribute.

21:46.680 --> 21:50.520
We're always looking for more interesting RF recordings to share. If you have an entire

21:50.520 --> 21:57.520
data set, we can add like a whole category here on the left. So we have Daniel Estevez's

21:57.520 --> 22:04.520
awesome satellite recordings as an example, where we can link off to your website. And

22:04.520 --> 22:11.040
so if you want to get involved in any way, there's a Discord link at the top of IQengine.org.

22:11.040 --> 22:18.040
We have a little community that's slowly building. And with that, I will take questions.

22:21.960 --> 22:24.960
Yep?

22:24.960 --> 22:31.960
So yeah, the question was related to geolocation data, like running it as a plugin, I assume.

22:42.400 --> 22:49.400
Yeah, yeah, while I explain that, so there actually is already a maps-based interface

22:50.040 --> 22:57.040
for, anyway, when we designed the API mentioned, we made sure to allow multiple channels of

22:59.040 --> 23:06.040
RF. So those channels could be time synchronized recordings from different sensors. That way

23:06.040 --> 23:11.540
at least you could run it from a, the backend perspective. And then, yeah, I guess we would

23:11.540 --> 23:17.540
need to have a maps interface to the spectrogram page to make that fully happen. So yeah, I

23:17.580 --> 23:24.580
would need to make that fully happen. But good, good, great suggestion. Yep?

23:24.580 --> 23:33.580
Well, so Guinea Radio has some Azure credit that they got, and that's what we've been

23:33.620 --> 23:38.580
using for a lot of these recordings. So, and we can use that for other folks' recordings

23:38.580 --> 23:43.780
if they want to share it publicly. Yeah, you can reach out and we can transfer it over.

23:43.780 --> 23:50.780
Yeah, I think it would fall. No, no, no, like I could like upload it for you. So the Guinea

23:50.780 --> 23:55.460
Radio has a blob storage account, so I could, I could give you a SAS token for you to upload

23:55.460 --> 24:02.460
it yourself or I could upload it for you. Yep, I think there was one more. Yes, there

24:02.460 --> 24:09.460
is something that's a work in progress, but I guess I'll share it. So there's an upload

24:14.700 --> 24:21.700
page. Oh yeah, yeah, so, so IQengine.org slash upload should allow you to upload a recording.

24:25.300 --> 24:31.300
The Wi-Fi's not great, but yeah, that would be the first place to go. I think we're out

24:31.500 --> 24:38.500
of time. Any last question? Yep? So how well does it actually handle everybody's

24:38.940 --> 24:45.180
thoughts? So, I mean, it was designed to deal with terabyte files from the start, which

24:45.180 --> 24:50.220
is why we have that minimap, and when you open the spectrogram page, it's only loading

24:50.220 --> 24:55.500
what you're looking at at any given time. So it's sending the IQ samples to your client,

24:55.500 --> 25:00.740
to the browser. The browser's doing the FFTs. So it's sending maybe a few million samples

25:00.820 --> 25:06.300
to get a spectrogram like this, but if it's a mini terabyte recording, you'll just have

25:06.300 --> 25:10.220
a smaller, like, gray window here, because it'll represent a smaller part of the whole

25:10.220 --> 25:15.820
recording. Yeah, I mean, you have to store the recording, but it's not all, we have

25:15.820 --> 25:20.860
no part of the code that sends the entire recording to either the client or the backend,

25:20.860 --> 25:27.860
because we know it's not going to fly for huge stuff. All right. Yep? Yeah. Yeah.

25:31.740 --> 25:38.740
Actually, SIGMF has a lot of, there's even an extension for more details about the hardware

25:41.980 --> 25:48.340
involved. Definitely check out SIGMF, the specs. So if you want a five minute introduction

25:48.340 --> 25:53.660
to SIGMF, that's what we have here on IQ Engine, but I would, yeah, go ahead and go

25:53.660 --> 25:58.660
to the specs and dive in, and you'll know a lot of the parameters that you mentioned.

25:58.740 --> 26:01.740
All right, thank you very much.

26:01.740 --> 26:02.740
Wow. Thank you very much.

26:02.740 --> 26:03.740
Thank you very much.

26:03.740 --> 26:03.780
Thank you.

