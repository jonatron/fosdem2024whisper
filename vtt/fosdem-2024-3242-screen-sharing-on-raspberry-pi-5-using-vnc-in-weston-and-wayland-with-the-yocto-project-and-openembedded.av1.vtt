WEBVTT

00:00.000 --> 00:07.000
Hello everybody, can you hear me?

00:07.000 --> 00:10.000
Kind of okay?

00:10.000 --> 00:16.000
My name is Nelonavi, I'm an open source enthusiast and senior software engineer at the Succo Group.

00:16.000 --> 00:21.000
I'm here to talk about screen sharing on Raspberry Pi with VNC.

00:21.000 --> 00:27.000
And I don't know how many of you were at Fosnum 2023?

00:27.000 --> 00:32.000
Alright, quite a lot of people. I have no idea if you've visited my talk, but I had a lightning talk

00:32.000 --> 00:38.000
and it was about screen sharing and remote access with LDP.

00:38.000 --> 00:43.000
And of course the most frequently asked question was, why don't you use VNC?

00:43.000 --> 00:45.000
How can we do it with VNC?

00:45.000 --> 00:48.000
So here is another talk, next episode.

00:48.000 --> 00:55.000
And I'm going to share my experience in configuring Wayland and Western with VNC screen sharing.

00:55.000 --> 01:05.000
The agenda focuses on Raspberry Pi 5, just because Raspberry Pi 5 is something new and we are all excited about it.

01:05.000 --> 01:12.000
But actually at the end of the presentation you see that I tested this on several devices.

01:12.000 --> 01:20.000
It's not hardware specific as long as you have Wayland and Western running on this particular hardware you are targeting.

01:20.000 --> 01:26.000
The agenda includes obviously brief introduction to Wayland and Western, brief introduction to VNC,

01:26.000 --> 01:35.000
the integration in the Yocto project and open embedded, and core image Western with VNC demonstration on Raspberry Pi 5.

01:35.000 --> 01:42.000
And if you have no idea what core image Western is, you're going to learn in the slides that are coming.

01:43.000 --> 01:47.000
The slides are already available on the website, fosn.org.

01:47.000 --> 01:51.000
After the presentation I'm going to upload them to SlideShare as well.

01:51.000 --> 01:57.000
And the slides are kind of exact steps or at least this was my goal.

01:57.000 --> 02:03.000
So if you want to repeat this demo, following the information on the slides you should be able to do it.

02:03.000 --> 02:06.000
So let's start with Wayland and Western.

02:06.000 --> 02:09.000
How many of you are using Wayland?

02:09.000 --> 02:19.000
Oh, that's fantastic. This makes my work really easy because this talk obviously is about Wayland.

02:19.000 --> 02:25.000
Wayland is a display protocol that specifies the communication between a display server and the clients.

02:25.000 --> 02:30.000
It's supposed to work with different windowing systems.

02:30.000 --> 02:34.000
The main project was to replace the X windowing system.

02:34.000 --> 02:40.000
The project is starting in 2008, so it's more than 15 years old now.

02:40.000 --> 02:46.000
There's a security by design in terms of isolation, the input and the output of every window.

02:46.000 --> 02:53.000
As you probably have noticed for many years this was kind of a problem when we want to take a screenshot.

02:53.000 --> 02:57.000
But, you know, there's always advantages and disadvantages.

02:57.000 --> 03:01.000
There are many different compositors for Wayland.

03:01.000 --> 03:11.000
Western is the reference compositor and it's widely used in the embedded industry because it's small and simple.

03:11.000 --> 03:17.000
There are other compositors that are much more convenient for desktop usage, of course,

03:17.000 --> 03:24.000
but Western as a reference compositor for Wayland is very convenient for embedded devices.

03:24.000 --> 03:31.000
What is important actually for this talk is that Western 13 was released in November last year.

03:31.000 --> 03:39.000
It's important because the VLC backend was officially added in recent versions in Western.

03:39.000 --> 03:42.000
We're going to talk about this in the next slides.

03:42.000 --> 03:50.000
What are the remote desktop options that you have in Wayland and Western as of the moment?

03:50.000 --> 03:53.000
One of the options is remote desktop protocol.

03:53.000 --> 03:57.000
If you're interested in this, have a look at the recording of my lightning talk from last year.

03:57.000 --> 04:00.000
How many of you are actually using CARE-DP?

04:00.000 --> 04:04.000
And how many of you are using VLC in different setups?

04:04.000 --> 04:06.000
All right, more people.

04:06.000 --> 04:11.000
But it looks like the majority of the audience is not using any of them.

04:11.000 --> 04:14.000
You should start using them. Let's speak.

04:14.000 --> 04:16.000
So what is VLC?

04:16.000 --> 04:25.000
It stands for Virtual Network Computing, and it's a graphical desktop sharing system based on the remote framework before protocol.

04:25.000 --> 04:27.000
It was initially developed by Oliveri.

04:27.000 --> 04:30.000
This was 25 years ago.

04:30.000 --> 04:33.000
VLC has been around for a quarter of a century.

04:33.000 --> 04:37.000
It's a pixel-based screen sharing protocol.

04:37.000 --> 04:39.000
That's the big difference compared to LDP.

04:39.000 --> 04:46.000
And it works with all windowing systems, including Microsoft Windows, macOS, GNOME and other distributions,

04:46.000 --> 04:50.000
no matter if they're using X11 or Wayland.

04:50.000 --> 05:05.000
Here's a matrix comparing LDP with VLC so you can understand the major differences in relation to this talk.

05:05.000 --> 05:08.000
So obviously there are different types of protocols.

05:08.000 --> 05:10.000
There are different types.

05:10.000 --> 05:15.000
They work in a completely different way because LDP is a semantic protocol.

05:15.000 --> 05:23.000
It's a way of control, forms and other graphical primitives, while VLC, as I mentioned, is pixel-based.

05:23.000 --> 05:29.000
LDP has been in Western since 2016 and version 2.

05:29.000 --> 05:33.000
VLC was relatively recently added.

05:33.000 --> 05:35.000
It was added in Western 12.

05:35.000 --> 05:39.000
This happened in 2022.

05:39.000 --> 05:45.000
So the story of adding VLC to Western is a long story.

05:45.000 --> 05:50.000
Keep in mind that I'm a later Wayland more Western developer.

05:50.000 --> 05:53.000
I don't have contributions to Wayland and Western.

05:53.000 --> 05:57.000
I'm an engineer working with the Yachter Project and Open Embedded.

05:57.000 --> 06:05.000
So I'm kind of a user of Wayland and Western, and I'm doing integrations with Wayland and Western on various embedded devices.

06:05.000 --> 06:14.000
But we need to give the credit to all these people who put a lot of efforts providing VLC back-end in Western.

06:14.000 --> 06:25.000
The initiative, As Fires, I know, started by Stephen, and you can see that this happened almost five years ago.

06:25.000 --> 06:32.000
It took actually three years ago, three or four years ago, but it took a while to be merged.

06:32.000 --> 06:38.000
And finally, with some changes made by Philip, we're here.

06:38.000 --> 06:42.000
This was merged and landed in Western 12.

06:42.000 --> 06:47.000
The current version is Western 13, Western 14 is in development.

06:47.000 --> 06:54.000
What I've seen in mailing lists and some emails that have changed are some new exciting things that are supposed to happen in new versions of Western.

06:54.000 --> 06:59.000
But I'm talking about the things that are released and stable and you can use right now.

06:59.000 --> 07:10.000
So just a few sentences to give you an understanding how VLC works with this back-end for Western.

07:10.000 --> 07:16.000
It's available in Western 12 and newer versions, which means 12 and 13 as of the moment.

07:16.000 --> 07:20.000
It's going to be available, of course, for the new versions as well.

07:20.000 --> 07:24.000
It depends on a couple of open source projects.

07:24.000 --> 07:26.000
Meet VLC is one of them.

07:26.000 --> 07:32.000
This is an open source VLC server library with a clean interface started by Andriy.

07:32.000 --> 07:39.000
The source code is available in GitHub in the ISC license.

07:39.000 --> 07:47.000
So Meet VLC is built on top of other dependencies such as libdlm, mason, and package config.

07:47.000 --> 07:51.000
And in the runtime, it depends on Andriy's main loop.

07:51.000 --> 07:53.000
This is another open source project.

07:53.000 --> 07:59.000
And as you can see from here, it's actually by the author of Meet VLC.

07:59.000 --> 08:01.000
So they're tightly related.

08:01.000 --> 08:05.000
And now we're moving on to what I do on a daily basis.

08:05.000 --> 08:07.000
And this is the Yachter project and Open Embedded.

08:07.000 --> 08:11.000
How many of you have experienced with the Yachter project and Open Embedded?

08:11.000 --> 08:13.000
Oh, that's fantastic.

08:13.000 --> 08:20.000
I have been telling everyone that the Yachter project and Open Embedded are becoming a de facto industry standard.

08:20.000 --> 08:26.000
A lot of people were laughing, but now I see that there's so many hands, so it's good to see it.

08:26.000 --> 08:31.000
So if you're new to the Yachter and Open Embedded in a nutshell,

08:31.000 --> 08:35.000
the Yachter project is a collaborative project of the Linux Foundation.

08:36.000 --> 08:45.000
It helps you create a custom embedded Linux distribution for your particular needs for the hardware that you are targeting.

08:45.000 --> 08:51.000
It uses the Open Embedded build system, which includes BitBake and Open Embedded Core.

08:51.000 --> 08:56.000
The most interesting part of the Yachter project, in my opinion, is actually Pocky.

08:56.000 --> 08:58.000
This is the reference distribution of the Yachter project.

08:58.000 --> 09:01.000
It's provided as a metadata.

09:01.000 --> 09:02.000
There are no binaries.

09:02.000 --> 09:07.000
Pocky gives you the opportunity to quickly bootstrap your own distribution,

09:07.000 --> 09:09.000
so you're not starting from scratch.

09:09.000 --> 09:11.000
If you want, you can start from scratch, of course,

09:11.000 --> 09:18.000
but you can also take Pocky and build on top of Pocky, modify it, configure it, and so on.

09:18.000 --> 09:24.000
So it really speeds up the process and simplifies the whole process.

09:24.000 --> 09:27.000
The Yachter project has a steep learning curve,

09:27.000 --> 09:32.000
but once you know how it works, it simplifies the process for building your products

09:32.000 --> 09:36.000
and cuts the time to go to the market.

09:36.000 --> 09:40.000
The Yachter project has twice per year a release,

09:40.000 --> 09:45.000
and there are long-term support releases, which are covering at least two years.

09:45.000 --> 09:52.000
Here is a short list of some of the recent Yachter project releases.

09:52.000 --> 09:57.000
This one here is supposed to be released in April this year,

09:57.000 --> 10:02.000
so in a couple of months, and this is going to be the next long-term release.

10:02.000 --> 10:07.000
It's going to be maintained for actually four years now,

10:07.000 --> 10:13.000
and the current LTS release is Kirkstone.

10:13.000 --> 10:16.000
It was released in May 2022.

10:16.000 --> 10:21.000
It will be maintained until April 2026, or at least until then.

10:21.000 --> 10:25.000
The previous, actually the first long-term release was DINFO.

10:25.000 --> 10:29.000
It was released four years ago, and it's still maintained.

10:29.000 --> 10:31.000
This is quite convenient for the embedded industry,

10:31.000 --> 10:36.000
because this way you can take a stable release with long-term support

10:36.000 --> 10:42.000
and spend some time developing your project without having an outdated source

10:42.000 --> 10:47.000
by the time when your product is ready to be shipped on the market.

10:47.000 --> 10:53.000
West End and West End are provided as recipes by an open-embedded core.

10:53.000 --> 11:00.000
Here you can see a screenshot of the Git repository of open-embedded core

11:00.000 --> 11:03.000
containing Wayland and West End.

11:03.000 --> 11:06.000
There are different versions of Wayland and West End recipes,

11:06.000 --> 11:09.000
depending on the release of the Yachter project.

11:09.000 --> 11:12.000
Here comes the tricky part when we're speaking about VLC,

11:12.000 --> 11:16.000
because as I mentioned, VLC was relatively recently added

11:16.000 --> 11:22.000
to Wayland and West End, so you have to pick a version of the Yachter project

11:22.000 --> 11:28.000
which provides the required versions of Wayland and West End,

11:28.000 --> 11:32.000
or otherwise you have to backport them to an old version,

11:32.000 --> 11:34.000
which is... well, it opens the can of worms,

11:34.000 --> 11:36.000
so I don't advise you to go this way.

11:36.000 --> 11:40.000
You better migrate your product to a version of the Yachter project

11:40.000 --> 11:42.000
that maintains it.

11:42.000 --> 11:47.000
So, version 5 of the Yachter project is not released yet.

11:47.000 --> 11:51.000
As you've seen on the previous slide, it's going to be released in April,

11:51.000 --> 11:55.000
but as of the moment, it's targeting West End 13,

11:55.000 --> 11:58.000
so maybe it will end up with slightly newer version of West End.

11:58.000 --> 12:01.000
I don't know, but basically you have VLC there,

12:01.000 --> 12:05.000
and you have it in the previous release with West End 12,

12:05.000 --> 12:08.000
however, this is a short-term support release,

12:08.000 --> 12:13.000
so if you are starting working to work on a new product,

12:13.000 --> 12:16.000
I highly recommend you to go to version 5.

12:16.000 --> 12:21.000
Other long-term releases such as Kirk's Room and DILFAL are with older Western versions,

12:21.000 --> 12:24.000
which does not support VLC,

12:24.000 --> 12:28.000
so if you want to take advantage of VLC in West End

12:28.000 --> 12:30.000
and you are based on the Yachter project,

12:30.000 --> 12:33.000
make sure you are using a release that's compatible.

12:33.000 --> 12:36.000
How to bid-bake West End with VLC?

12:36.000 --> 12:39.000
First, the VLC backend is not enabled in West End,

12:39.000 --> 12:41.000
so those of you working with the Yachter project

12:41.000 --> 12:45.000
has to create a bid-bake plan file for West End

12:45.000 --> 12:50.000
to extend the package config variable and to add VLC to it.

12:50.000 --> 12:56.000
This will trigger enabling the backend VLC argument to true

12:56.000 --> 12:58.000
when you are building West End,

12:58.000 --> 13:01.000
and also add need VLC as a runtime dependency.

13:01.000 --> 13:05.000
I've explained that actually as a bid-time dependency,

13:05.000 --> 13:10.000
and also you need to place a plan file.

13:10.000 --> 13:14.000
However, I have created an example reference layer

13:14.000 --> 13:19.000
which provides a demo integration of West End with enabled VLC.

13:19.000 --> 13:23.000
This is the same open-source project that I started a year ago

13:23.000 --> 13:26.000
for my previous talk, which was about RDP.

13:26.000 --> 13:29.000
This year, actually the end of last year,

13:29.000 --> 13:32.000
I just extended it by providing splitting it into two layers,

13:32.000 --> 13:35.000
one layer for RDP, another layer for VLC.

13:35.000 --> 13:42.000
I hope this demo layer will help other people quickly

13:42.000 --> 13:47.000
get to speed with VLC or RDP, whatever they want.

13:47.000 --> 13:49.000
Here, of course, this talks about VLC,

13:49.000 --> 13:57.000
so the examples that we're talking about are VLC.

13:58.000 --> 14:02.000
Behind the core test, what happens is that

14:02.000 --> 14:04.000
when you do these configurations,

14:04.000 --> 14:07.000
when you add VLC package configuration to West End,

14:07.000 --> 14:09.000
you need a bunch of dependencies.

14:09.000 --> 14:13.000
These dependencies are AML and need VLC.

14:13.000 --> 14:16.000
As part of my work at Consulka Group,

14:16.000 --> 14:18.000
I took the effort to upstream these,

14:18.000 --> 14:21.000
and they are part of meta-open embedded.

14:21.000 --> 14:25.000
The West End environment recipes are actually in open embedded core

14:25.000 --> 14:27.000
that in order to build them with VLC,

14:27.000 --> 14:31.000
you have to make sure that you are adding meta-open embedded meta-oE

14:31.000 --> 14:36.000
to get all these two recipes and their dependencies.

14:36.000 --> 14:39.000
The good thing is that actually the community liked it,

14:39.000 --> 14:43.000
and I see that our people started contributing to these recipes here.

14:43.000 --> 14:45.000
There have been several updates.

14:45.000 --> 14:50.000
So these projects are obviously needed by a lot of people in the community

14:50.000 --> 14:52.000
and in the industry, of course.

14:53.000 --> 14:58.000
A little bit of information on how the baking of need VLC

14:58.000 --> 15:00.000
for West End and VLC works.

15:00.000 --> 15:06.000
So for need VLC, in order to work with the whole setup for West End and VLC,

15:06.000 --> 15:10.000
we have to enable encryption with TRS.

15:10.000 --> 15:12.000
This is how it works.

15:12.000 --> 15:18.000
Keep in mind that different versions of West End depend on different versions of need VLC.

15:18.000 --> 15:22.000
Here is a particular example for the things that are right now,

15:22.000 --> 15:28.000
but if you are watching these slides or this recording in two years,

15:28.000 --> 15:30.000
probably it's going to be different versions.

15:30.000 --> 15:32.000
So keep in mind how you can adjust these things.

15:32.000 --> 15:35.000
That's the point of this slide.

15:35.000 --> 15:41.000
And this is how we do BB Append for West End Ine.

15:41.000 --> 15:45.000
Basically, we are creating user West End and password West End.

15:45.000 --> 15:50.000
This is the same user and password that we are going to use to log in remotely

15:50.000 --> 15:52.000
to our targeted device.

15:52.000 --> 15:55.000
In this case, it's a Raspberry Pi file,

15:55.000 --> 16:01.000
but as I mentioned, you can do it with any other better device capable of running West End.

16:01.000 --> 16:05.000
So this is standard VLC to staff.

16:05.000 --> 16:09.000
You just deploy a directory that you need and so on.

16:09.000 --> 16:12.000
So here is how you generate the certificate.

16:13.000 --> 16:15.000
So a bunch of commands.

16:15.000 --> 16:23.000
So obviously the important thing is here that you have to set up the name of the host

16:23.000 --> 16:28.000
to make sure that all or most of the VLC clients will work.

16:28.000 --> 16:32.000
Later on, I'll show you an example of what kind of a problem I had

16:32.000 --> 16:35.000
because initially I didn't set it up properly.

16:35.000 --> 16:37.000
Here I'm targeting Raspberry Pi 5.

16:37.000 --> 16:40.000
This is the host of the device that I'm going to target.

16:40.000 --> 16:42.000
So I'm setting it here.

16:42.000 --> 16:46.000
Finally, of course, I have to copy the certificates to the target device.

16:46.000 --> 16:48.000
In my case, to the Raspberry Pi 5.

16:48.000 --> 16:52.000
And West End Ine is the main configuration file for West End.

16:52.000 --> 16:59.000
We have to configure it there to make sure that the screen sharing is enabled.

16:59.000 --> 17:04.000
So after reloading West End with this configuration,

17:04.000 --> 17:07.000
in my demo setup, West End is started by a system-based service.

17:07.000 --> 17:10.000
So I have to reload the system-based service to start West End.

17:10.000 --> 17:18.000
And once it's started, I have to press Ctrl-Alt plus S in order to enable the screen sharing.

17:18.000 --> 17:23.000
Of course, you know that many embedded devices don't have a keyboard.

17:23.000 --> 17:27.000
So pressing Ctrl-Alt plus S is not an easy task sometimes.

17:27.000 --> 17:30.000
It sounds easy if you're working on a desktop computer,

17:30.000 --> 17:32.000
but sometimes you're not on a desktop computer.

17:32.000 --> 17:35.000
And here comes a really convenient feature.

17:35.000 --> 17:42.000
You can use the automatic startup of VNC just to say that the same is available for RDP.

17:42.000 --> 17:46.000
So no matter if you're using VNC or RDP, you can do the same.

17:46.000 --> 17:48.000
Startup. Here is the configuration.

17:48.000 --> 17:53.000
Startup on startup. Start on startup. True.

17:53.000 --> 17:58.000
And finally, when we have the Raspberry Pi working with Wayland,

17:58.000 --> 18:03.000
West End enabled VNC from another computer in the same network using a VNC client,

18:03.000 --> 18:05.000
which we can connect remotely.

18:05.000 --> 18:07.000
In my case, I'm an open source enthusiast.

18:07.000 --> 18:12.000
I'm trying to use pretty much open source everywhere I can.

18:12.000 --> 18:17.000
So here I'm using a VNC client.

18:17.000 --> 18:19.000
And here's how I started it.

18:19.000 --> 18:23.000
Here's how I blocked in with user West End and password West End.

18:23.000 --> 18:26.000
You saw how I configured that.

18:26.000 --> 18:29.000
Here is the VNC demo. It's not super exciting.

18:29.000 --> 18:34.000
Basically what you see here is Ubuntu 20.2.4.

18:34.000 --> 18:38.000
This is the long-term release of Ubuntu that I'm running on my computer in the same network.

18:38.000 --> 18:42.000
You see the VNAGR window.

18:42.000 --> 18:49.000
And inside the VNAGR window, the VNC client, you see what is my Raspberry Pi 5 showing on the screen.

18:49.000 --> 18:53.000
And a frequently asked question is what is the performance?

18:53.000 --> 18:55.000
What is the frame rate?

18:55.000 --> 19:02.000
I haven't made a lot of tests, but by running some simple demonstrations like on the screenshot here,

19:02.000 --> 19:10.000
it runs with up to 20 frames per second, something like 18, 19, up to 20 frames per second.

19:10.000 --> 19:12.000
I haven't performed any optimizations.

19:12.000 --> 19:16.000
Basically you know that when you have screen sharing enabled,

19:16.000 --> 19:20.000
the performance in terms of frames per second is dropping out.

19:20.000 --> 19:22.000
A little bit of testing.

19:22.000 --> 19:25.000
I have mentioned that I've tested it on several devices.

19:25.000 --> 19:31.000
I made this talk about Raspberry Pi 5 because I was involved in the process of adding Raspberry Pi support

19:31.000 --> 19:34.000
in Meta Raspberry Pi 5 BSP layer.

19:34.000 --> 19:36.000
Now Raspberry Pi is there.

19:36.000 --> 19:38.000
It's in the master branch.

19:38.000 --> 19:41.000
It was recently merged by the maintainers.

19:41.000 --> 19:48.000
And now I've opened the GitHub request to Backport, actually the support for Raspberry Pi to Kirkstone in Meta Raspberry Pi.

19:48.000 --> 19:54.000
However, in terms of VNC, I have tested it with appropriate Western versions on other devices,

19:54.000 --> 19:58.000
Raspberry Pi 4, RockPi 4, this is with a RockChip system on a chip,

19:58.000 --> 20:03.000
Toradex version, IMX 8M plus system on a module.

20:03.000 --> 20:09.000
So the tricky part about NXP, no matter if you're using IMX 8, 7 or 6,

20:09.000 --> 20:15.000
is that you have to switch to the EtnaViv open source drivers

20:15.000 --> 20:19.000
because otherwise with the Vivante proprietary drivers,

20:19.000 --> 20:24.000
you have to use a fork of Western called Western IMX.

20:24.000 --> 20:29.000
And Western IMX, it's always a version behind.

20:29.000 --> 20:32.000
The last time I checked, which was a couple of days ago,

20:32.000 --> 20:34.000
the version that was available was 11.

20:34.000 --> 20:39.000
So we don't have in Western IMX the VNC back end.

20:39.000 --> 20:44.000
So if you are running into this situation, consider switching to EtnaViv.

20:44.000 --> 20:48.000
So we're wrapping up the talk with some conclusions.

20:48.000 --> 20:51.000
VNC is a pixel-based graphical protocol.

20:51.000 --> 20:53.000
It was added in Western 12.

20:53.000 --> 20:58.000
It works on any device that supports the appropriate Western version.

20:58.000 --> 21:01.000
It supports a TOS encryption.

21:01.000 --> 21:07.000
And I have created this layer, Meta Western Remote Desktop,

21:07.000 --> 21:15.000
which is available in GitHub, which allows you to build quickly a demo with RDP or VNC.

21:15.000 --> 21:18.000
The slides are available on the Fosn.org website.

21:18.000 --> 21:20.000
Thank you very much for your attention.

21:20.000 --> 21:23.000
I think we have a couple of minutes for some questions.

21:23.000 --> 21:35.000
Hi, thanks for the talk.

21:35.000 --> 21:37.000
I had some issues with RDP as well.

21:37.000 --> 21:39.000
I think it's when you mention performance,

21:39.000 --> 21:43.000
I think it's to do with the screen share plugin and the full screen plugin.

21:43.000 --> 21:47.000
It pins the single rendering thread of Western.

21:47.000 --> 21:50.000
So when you have RDP and stuff enabled, even on a more powerful computer,

21:50.000 --> 21:53.000
it does affect the presentation locally of the graphics.

21:53.000 --> 21:56.000
Do you know if there's any work being done to improve that architecture,

21:56.000 --> 21:58.000
maybe using shared buffers?

21:58.000 --> 22:00.000
That's a very good question.

22:00.000 --> 22:02.000
Unfortunately, I cannot provide a good answer to this

22:02.000 --> 22:06.000
because as I mentioned, I'm not a Wayland or Western engineer.

22:06.000 --> 22:08.000
I don't have upstream contributions there.

22:08.000 --> 22:10.000
In terms of Wayland and Western,

22:10.000 --> 22:13.000
I'm integrating it in the Yocto Project and Open Embedded.

22:13.000 --> 22:16.000
So you probably have to ask in the mailing list

22:16.000 --> 22:19.000
to compare the particular backhands available for Western.

22:19.000 --> 22:24.000
Yeah, thank you very much for the talk.

22:24.000 --> 22:27.000
This is a bit off topic and I'll keep it quick,

22:27.000 --> 22:29.000
but on the screen sharing idea,

22:29.000 --> 22:32.000
my boy keeps getting me to use this Parsec stuff,

22:32.000 --> 22:37.000
which I think is encoding screens as 8.264 movies, basically.

22:37.000 --> 22:42.000
I like the idea of leveraging GPU to the screen sharing.

22:42.000 --> 22:44.000
Have you looked at that at all?

22:44.000 --> 22:46.000
Is there anything you can comment on about that?

22:46.000 --> 22:48.000
No, sorry. I'm not familiar with it,

22:48.000 --> 22:51.000
but I can provide a comment. I'll have a look at it.

22:54.000 --> 22:57.000
Okay, thank you very much. That was great.

22:57.000 --> 22:59.000
All right. Thank you very much.

22:59.000 --> 23:01.000
If you have questions, I'll be around.

