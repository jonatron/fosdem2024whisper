WEBVTT

00:00.000 --> 00:15.080
Hi folks, thank you. So my name is Alexander Soto. I go by Alex, the founder of Modos.

00:15.080 --> 00:21.240
And yeah, so we're building an ecosystem of open hardware e-inck devices. There's a box

00:21.240 --> 00:26.560
of a PCB, red one, green one, and also our prototype or our paper monitor. Please don't

00:26.560 --> 00:33.960
plug it in. If you're interested, I can show a little demo in the back. And let's get it all back.

00:33.960 --> 00:38.360
I love to get my PCBs back at the monitor and such. But yeah, trust you all. But yeah, please

00:38.360 --> 00:41.440
check it out and I'll do a little bit of a live demo a little bit later. We'll do it here,

00:41.440 --> 00:45.360
but think it'll be a little bit complex. But yeah, please all pass it around and check it out.

00:45.360 --> 00:51.760
So a little bit of backstory. In 2021, sort of the height of the pandemic during lockdown,

00:52.360 --> 00:57.240
my bedroom kind of transformed into a workspace. And just from the morning to night, I was

00:58.760 --> 01:04.520
just constantly being distracted, having to refocus and then be distracted again. And yeah,

01:04.520 --> 01:08.600
being in front of a computer for 13 hours, I got to the point where the device that I'm using to

01:08.600 --> 01:13.160
be able to do my work is also the same thing that I use for leisure, is the same thing that I use

01:13.160 --> 01:21.160
for entertainment. So can we have technology that is different, that is more calm, that is more

01:21.200 --> 01:29.560
humane, that's more aligned with what I got while being. So our focus is reimagining personal

01:29.560 --> 01:35.120
computing with a focus on creating calm, inclusive and humane technology. We'll upload the slides,

01:35.120 --> 01:40.160
but here we have two links to some earlier videos where we show off our electrical

01:40.160 --> 01:45.160
ferretic display controller. It runs at about 60 hertz, open hardware, uses an FPGA,

01:46.160 --> 01:51.760
get a bit more into the details of the hardware specs in a little bit. And this is the team that

01:51.760 --> 01:59.560
sort of turned that vision into reality. So Wenting has been the lead designer of creating the

01:59.560 --> 02:05.280
Electro-Ferretic Display Controller. He's been working there for quite some time and going to

02:05.280 --> 02:08.560
wait a little bit so we get the whole image back on the screen.

02:15.560 --> 02:22.560
Oh no. Hey! Thank you, awesome.

02:22.560 --> 02:27.560
His presentation is read by design. You didn't believe me.

02:27.560 --> 02:37.560
Yeah, so recap, Wenting has led the design of our Electro-Ferretic Display Controller. Brody has

02:37.560 --> 02:42.960
worked in particularly on the CAD manufacturing chassis. Michael had many conversations thinking

02:42.960 --> 02:47.760
about what would it look like to create a software architecture or software stack that's

02:47.760 --> 02:53.160
tailored for E-Ink has like a medium. And I'm kind of the guy that does everything in between

02:53.160 --> 02:58.160
and kind of supports everyone, thinks about this nonstop and tries to make things happen.

02:58.160 --> 03:04.560
Alright, so lastly I also want to say thank you to our community and also the NoNet Foundation.

03:04.560 --> 03:09.360
We've had about 300 plus people who want to be able to be in our private program, about 5,000

03:09.360 --> 03:14.560
people in our mailing list and also about 3,000 testimonies and in those testimonies as well a lot

03:14.560 --> 03:21.360
of feedback, learned a lot and there's also, sorry, and also I'm going to say thank you to

03:21.360 --> 03:27.960
our NoNet. NoNet really, we're a NoNet-sponsored project. It looks up on our caster and yeah,

03:27.960 --> 03:33.160
thank you for your support and thank you for helping us really getting to finish our prototype.

03:34.160 --> 03:40.960
Okay, so from the community survey findings, we did a community survey. We're asking folks,

03:40.960 --> 03:46.160
you know, what are the particular use cases that they use their computer and or also what they

03:46.160 --> 03:52.360
would like to use for the E-Ink device and the overlapping categories were reading, writing,

03:52.360 --> 03:59.960
coding and focused sort of focused task and those are the majority of categories that people had

03:59.960 --> 04:06.760
mentioned. But that I had a general idea that most people would be interested in but I think

04:06.760 --> 04:12.760
where I learned a lot with the takeaway were the sort of same problems that I was experiencing

04:12.760 --> 04:19.160
myself with just being distracted, being stuck on the rabbit holes or having to use a computer for

04:19.160 --> 04:23.560
an extended period of time kind of got that a lot from different people in the community who also

04:23.560 --> 04:29.660
kind of expressed similar concerns and then here as well, folks discussing about problems

04:29.660 --> 04:35.660
related to like eye strain, people who have tried to use like other solutions and still, you know,

04:35.660 --> 04:40.060
filtering glasses and such and but still being a problem. So overall, there's these sort of general

04:40.060 --> 04:46.260
categories of one people who are looking for more of a balanced digital life, sort of reducing

04:46.260 --> 04:51.260
screen time on social media, entertainment, unplugging, seeing the sun, being outdoors,

04:51.260 --> 04:56.860
seeing away from a screen. But also people who are looking for like less visually stimulating

04:57.060 --> 05:01.060
digital environments and trying to reduce a digital clutter. So that was like one group or one

05:01.060 --> 05:07.660
demographic. The other one being folks who experience some form of visual impairment or maybe some

05:07.660 --> 05:14.060
form of like light sensitivity. For example, there's, I always mentioned this, I need to look up the

05:14.060 --> 05:20.060
specific person who did who filled this out but there was an engineer who was writing on behalf

05:20.260 --> 05:27.260
of his wife who was experiencing epilepsy and she tried all different types of solutions and just

05:27.260 --> 05:33.260
is trying to find something so she can be able to interact with her digital devices and that

05:33.260 --> 05:39.260
comment has stayed engraved in my mind and a big motivator for myself. But there are other health

05:39.260 --> 05:44.260
issues that people reported, things related to like myopia, epilepsy, light sensitivity,

05:44.660 --> 05:51.660
headaches, migraines, traumatic brain injury and post-concussion syndrome were quite frequent

05:51.660 --> 05:58.660
as well, which to me was also very much a surprise. So here's my pitch, I guess you want to look

06:00.160 --> 06:04.460
at it. I think there's a need, right? I think there's a need for being able to create technology

06:04.460 --> 06:10.560
that like satisfies our essential needs but also protects our well-being. I think we can

06:10.760 --> 06:16.760
maybe redefine the role of our devices to foster more healthier balanced life and hopefully

06:16.760 --> 06:20.760
with the start of this control is with the display controllers to create a new class of

06:20.760 --> 06:26.160
devices that are kind of like built from scratch to sort of embody these principles of human

06:26.160 --> 06:33.160
technology both through hardware and software design. So, Alan Kay, people who are really

06:34.260 --> 06:40.360
serious about software should make their own hardware. So, I think hopefully the monitor

06:40.460 --> 06:43.660
I have no idea where the monitor is but hopefully it's being passed around. People check and

06:43.660 --> 06:47.860
take a look at it, great. So, that's our monitor, that's our newer revision that we have. We

06:47.860 --> 06:53.760
built that using our key cat and also our free cat. We have a bit of a block diagram

06:53.760 --> 06:59.660
here for folks. Also, folks want to know a little bit more in details. We recently updated

06:59.660 --> 07:05.360
our repository which has a much more documentation into specifics of how it all works. So you

07:05.460 --> 07:10.860
can feel free to take a look at that. I have some excerpts from there as well. And yeah,

07:10.860 --> 07:17.860
so we're using a Spartan 6 FPGA Type C for the display port. We also have a HDMI or DVI

07:17.960 --> 07:24.560
video input. Using a Raspberry Pi 2040 for USB communication and upgrading anything related

07:24.560 --> 07:31.560
to the firmware and waveforms. And then this is the caster block diagram for our FPGA.

07:32.060 --> 07:38.560
Good. Take a look at that. Again, I would redirect folks to take a look at the documentation

07:38.560 --> 07:42.560
that we have on our GitHub that goes a bit more in detail than I could possibly do in

07:42.560 --> 07:48.260
this one presentation. But some of the features of the display controller is that it works

07:48.260 --> 07:54.860
with screens from 6 inches to about 13 inches. Works with the sort of black and white electronic

07:54.960 --> 08:01.160
operating displays from E-Ink. Also works with color displays and also DES. Really extremely

08:01.160 --> 08:07.660
low processing in the video. Finish show it, but also do a live demo. Very low processing

08:07.660 --> 08:14.660
delay. Yeah, we got four level grade scale, 16 as well working. Let's see. Yeah, optimized

08:16.460 --> 08:22.460
for the four level grade level scaling. If you ever use a commercial E-Ink monitor, they

08:22.460 --> 08:27.360
have these buttons that are in the front that switches these particular modes. We also

08:27.360 --> 08:31.260
have that. I don't know who has the monitor right now, but yeah, in the back, yeah, in

08:31.260 --> 08:33.980
the back there's like a little button. It's a little blue button. It doesn't work right

08:33.980 --> 08:39.980
now, but no, no, it needs to be connected to like a laptop and such. But I'm just saying

08:39.980 --> 08:43.980
in that button you can cycle through and it switches between different modes and the different

08:43.980 --> 08:49.020
modes are for the particular use cases. So if you want to be able to focus on typing or

08:49.060 --> 08:52.860
reduce input delay, there's a mode for that that you press it or if you wanted to use

08:52.860 --> 08:57.220
it for looking at black and white image and looking at grade scale it switches and that's

08:57.220 --> 09:02.220
all happening locally through the host software that's on the hardware itself.

09:02.220 --> 09:09.220
And a little bit more about how it's driven. I'm not going to go read through all of that.

09:11.300 --> 09:18.300
Let's see, I want to do more slides. So yeah, so pixels, they're ranging at 2D array. Refresh

09:18.460 --> 09:25.460
rate to between 50 to 120 hertz. It's a bi-stable display. So they maintain their stay after

09:25.900 --> 09:31.300
the electrical field is removed. And the sort of frame buffer driving mechanism, it uses

09:31.300 --> 09:37.860
two frame buffers to determine the picks of colors and then the picks of color changes

09:37.860 --> 09:43.780
between the particular value 0, 1. And there's also sort of a global counter of how it's

09:43.820 --> 09:48.460
used for the track, for the frame duration. So this is just a little bit of the basics

09:48.460 --> 09:53.860
when it comes to electrophoretic display controller and sort of e-extrins in general.

09:53.860 --> 09:59.100
Going to create a better version of this. It's a bit more simplified, so I apologize to just

09:59.100 --> 10:06.100
sort of make it, yeah. So let's see, give us grade scale. So when it comes to grade scale

10:06.700 --> 10:11.860
you're often switching between black and white in order to be able to get that. So you're

10:11.900 --> 10:15.740
constantly switching between zeros and one and kind of switching between these particular

10:15.740 --> 10:22.740
different modes. And then lastly, so one of the optimization that we've done is that instead

10:23.660 --> 10:29.660
of having one global counter, we allow for individual updating for the region. So we're

10:29.660 --> 10:35.460
updating each pixel independently. And we also have this sort of like early cancellation

10:35.460 --> 10:41.820
method. Could talk about it more, but just kind of want to leave it there. And I think

10:41.820 --> 10:48.820
just the last thing for next steps. So, how much time is that? Okay. So for next steps,

10:49.540 --> 10:56.540
we have a, so we've been working on this for about two years now and I think we finally

10:56.700 --> 11:01.860
have the prototype more or less finished. So we want to be able to do a crowdfunding

11:01.860 --> 11:08.940
campaign, most likely on CrowdSupply this year. So there's a link here where it, if you

11:08.940 --> 11:13.380
want to be notified when the crowdfunding campaign happens, we can send you email to

11:13.380 --> 11:18.620
be notified. We're also a relatively small team of about three or four people. There's

11:18.620 --> 11:23.140
also a separate link that as for folks who want to contribute with just various different

11:23.140 --> 11:28.980
skills if you want to be able to support in documentation, in CAD or getting more involved

11:28.980 --> 11:35.740
with the display controller. We have a link there for more information. Don't think, yeah,

11:35.860 --> 11:40.140
pretty much wraps things up. I think it could talk a little bit more, but I'd rather leave

11:40.140 --> 11:45.140
room for questions. And that's it.

11:45.140 --> 11:52.140
We have some, okay, let's see. Questions are always right in the middle.

11:52.140 --> 11:59.140
Thanks for the talk. How do you deal with the waveforms being proprietary? We've generated

12:09.260 --> 12:16.260
our own waveforms. Do you put any work into updating those, improving them? Yes. Sorry,

12:16.580 --> 12:22.820
the question was related to waveforms and how we generate them. I'll say that we generate

12:22.820 --> 12:28.860
the waveforms ourselves and there's certain similarities or patterns across different

12:28.860 --> 12:35.180
displays, regardless of different sizes. So we are maintaining and updating the waveforms

12:35.180 --> 12:40.700
that we have right now for the 13-inch panel as well and for the 6-inch panel.

12:40.700 --> 12:47.700
So you focus mainly on the hardware, but especially doing focused tasks, for example,

12:47.900 --> 12:54.900
requires quite some specialized way of displaying things. Are you also providing some kind of

12:55.700 --> 12:58.100
solution for that in software?

12:58.100 --> 13:03.540
Yes. So the question was related towards hardware that we've been focusing on that and what

13:03.540 --> 13:08.580
would things look like on the software side? Yeah, we've spent quite a bit of time looking

13:08.580 --> 13:15.300
into what that would look like. The one approach that we've looked at is to use in Wayland

13:15.300 --> 13:20.340
protocols in order to use things related to damage tracking in order to be able to do

13:20.340 --> 13:24.540
partial refreshes. For example, if you have two overlapping windows and you drag in one

13:24.540 --> 13:30.580
window over, it would recognize that this is the area that has changed damage tracking

13:30.580 --> 13:34.780
and would only update that particular region rather than doing a whole full refresh. So

13:35.380 --> 13:38.580
I think that there are things, for example, that we can use with Wayland and Wayland

13:38.580 --> 13:44.260
protocols at the higher level of the software stack that in one way you can look at it is

13:44.260 --> 13:49.740
that it abstracts away the idea of waveforms and you let the higher level software stack

13:49.740 --> 13:56.260
take care of that with the display manager. So one of the hopes and dreams is that we

13:56.260 --> 14:01.540
can work with SORSA with Drew DeVau and a few other folks raising up funding for that

14:01.620 --> 14:07.140
to be able to work with them to have that be part of something we can do, which would

14:07.140 --> 14:13.260
allow us to one, create applications that are native for E-Ink and also backwards compatibility.

14:13.260 --> 14:25.180
Yeah, just one ring. I have no... Yes, oh, hi. I am so sorry. Yes, hi. Yes, why did you

14:25.180 --> 14:31.260
show us the Spark on 6 as a platform since it's quite old by now? It's what we were

14:31.340 --> 14:35.540
most familiar with and what we had access to and experience. Sorry, the question was

14:35.540 --> 14:40.420
why did we choose Spark on 6? It's what we were most familiar with and had experience using.

14:40.420 --> 14:47.060
There is another gentleman, another person from NowNet, Victor Suarez, who is also interested

14:47.060 --> 14:51.940
in porting our work into other FPGAs. So I think it's not tied to Spark on 6, it's just where we

14:51.940 --> 14:59.980
started. Yeah, so I think it's regarding the FPGA only. So you have plans to upgrade to

15:01.620 --> 15:08.340
let's say FPGAs that are faster or this was just the original decision, but just because

15:08.340 --> 15:13.740
you were more hands on that particular family of FPGA. Yeah, so the question is related

15:13.740 --> 15:18.900
to the FPGAs if we plan to use more modern ones. So yeah, it goes back. That was the

15:18.900 --> 15:22.900
one we're most familiar with and that's the one that we're going to keep using maybe in

15:22.900 --> 15:28.220
some future with Switch, none of the one. Spark on 6 FPGA is doing the job right now.

15:28.220 --> 15:33.900
People are more welcome to contribute and port it to other FPGAs. That's one way, so welcome that as well.

