WEBVTT

00:00.000 --> 00:07.000
So, our next talk is going to be about...

00:07.000 --> 00:23.000
Hello, I'm Kohei Tokunaga from NTT Corporation.

00:23.000 --> 00:35.000
I'm a reviewer of container D and a maintainer of Build Kit.

00:35.000 --> 00:49.000
And today, I'm going to talk about an extension of VS Code on Browser for running containers within the browser.

00:49.000 --> 00:52.000
So, this is the summary of this talk.

00:52.000 --> 00:59.000
So, on Browser VS Code lacks Linux terminal running completely inside browser.

00:59.000 --> 01:02.000
And VS Code container wasn't.

01:02.000 --> 01:11.000
Extention enables to run Linux-based containers and its terminal inside browser.

01:11.000 --> 01:18.000
And there are two options available for distributing containers to browsers.

01:18.000 --> 01:25.000
First one is pre-converting containers to wasn't images and distributing them.

01:25.000 --> 01:39.000
And second option is distributing OCI container images to browsers.

01:39.000 --> 01:46.000
So, there are several on Browser VS Code implementations in community.

01:46.000 --> 01:50.000
There is a limitation for that functionality.

01:50.000 --> 01:58.000
This is lack of Linux terminal running completely inside browser.

01:58.000 --> 02:06.000
So, users can edit code inside browser but cannot run them inside browser.

02:06.000 --> 02:22.000
And Linux-based development tools like CompilerS are also unavailable on browser.

02:22.000 --> 02:33.000
And one of root causes for this issue is that browsers don't provide Linux compatible system.

02:33.000 --> 02:39.000
So, Linux-based applications needs to be ported to browser.

02:39.000 --> 02:48.000
If the application is written in language other than JavaScript, WebAssembly or wasn't will be...

02:48.000 --> 02:54.000
will also be used for running them on browser.

02:54.000 --> 03:00.000
But actually, porting apps to WebAssembly is not easy.

03:00.000 --> 03:05.000
So, wasn't lacks compatibility to Linux system.

03:05.000 --> 03:16.000
For example, the binary format is completely different from the existing common binary format like x86-ELEF.

03:16.000 --> 03:22.000
And the app might need to be redesigned for Harvard architecture of wasn't.

03:22.000 --> 03:31.000
So, this might include like eliminating fork and exact related cause from the application.

03:31.000 --> 03:39.000
And some of the issues can be mitigated by CompilerS wasn't target support.

03:39.000 --> 03:44.000
But they still don't provide full compatibility to Linux.

03:44.000 --> 03:55.000
So, can we run a modified Linux terminal and Dev environment inside browser?

03:55.000 --> 04:00.000
So, here VS Code container wasn't. Extension can be used.

04:00.000 --> 04:08.000
This is an experimental VS Code extension for running containers inside browser.

04:08.000 --> 04:19.000
So, the container and the terminal is available on VS Code on browser without preparing remote SSH servers or something.

04:19.000 --> 04:26.000
And this is implemented, levelizing CPU emulators compiled to wasn't.

04:26.000 --> 04:30.000
We will discuss about it later.

04:30.000 --> 04:39.000
And the workspace of the editor is also mounted at slash workspace path.

04:39.000 --> 04:44.000
So, container can refer to the contents on the workspace.

04:44.000 --> 04:50.000
For example, it can compile the code stored on the workspace.

04:50.000 --> 04:55.000
And HTTP or HTTPS networking is also available.

04:55.000 --> 05:03.000
The container runs inside browser. So, the networking functionality is also restricted by browser.

05:03.000 --> 05:16.000
For example, the set of accessible sites from the container is limited by calls.

05:16.000 --> 05:22.000
So, how container images can be distributed to browsers?

05:22.000 --> 05:29.000
There are two options. Option A is pre-converting containers to wasm images.

05:29.000 --> 05:40.000
And option B is distributing OCI container images to browsers.

05:40.000 --> 05:49.000
So, first option for distributing containers to browsers is pre-converting containers to wasm images.

05:49.000 --> 05:55.000
And container to wasm converter provides this ability.

05:55.000 --> 06:04.000
The container to wasm is an experimental converter of container images to wasm images.

06:04.000 --> 06:09.000
It receives an arbitrarily Linux-based container as the input,

06:09.000 --> 06:15.000
and it outputs a wasm image that runs the container on wasm.

06:15.000 --> 06:23.000
So, we can run the containers on wasm-enabled environment like browsers.

06:23.000 --> 06:34.000
As shown in the right figure, the converted wasm image can be uploaded to any HTTP server accessible from the browser.

06:34.000 --> 06:46.000
To use them on VS Code on browser, you can configure the workspace using .vscode slash settings.json file.

06:46.000 --> 06:53.000
And the image location URL to that configuration file.

06:53.000 --> 06:59.000
And so, you need to add the image configuration URL to that configuration file

06:59.000 --> 07:05.000
so that the extension can launch the specified container on browser.

07:05.000 --> 07:12.000
And the pros of this approach is that once the container image is converted to wasm,

07:12.000 --> 07:19.000
it can run on any wasm-enabled environment, not limited to browsers.

07:19.000 --> 07:26.000
For example, the container can run on like washy run times, like wasm time as well.

07:27.000 --> 07:33.000
And cons of this approach is pre-conversion is needed for each container.

07:33.000 --> 07:41.000
If you want to run many kinds of containers on browser, all of them need to be pre-converted to wasm,

07:41.000 --> 07:47.000
so it may take extra cost for development time.

07:48.000 --> 07:56.000
And second option for distributing containers to browsers is to directly

07:56.000 --> 08:01.000
distributing OCI-compatible container images to browsers.

08:01.000 --> 08:12.000
If you use container registry, that registry needs to allow code access from the browser because it's accessed from the browser.

08:13.000 --> 08:20.000
But unfortunately, as of now, well-known public registries don't allow codes,

08:20.000 --> 08:28.000
but so you need to try it on local house registry with code header configured.

08:30.000 --> 08:37.000
Alternatively, you can also use codes-enabled HTTP or HTTPS server.

08:37.000 --> 08:44.000
In this case, the container image needs to be formatted as OCI image layout.

08:44.000 --> 08:51.000
This is the specification of layout of image content to be stored on the file system.

08:51.000 --> 09:01.000
For example, you can get a tar archive of this format using toka-save command newer than v25.

09:01.000 --> 09:11.000
And vscode container wasm supports fetching the image formatted with this spec over HTTP.

09:11.000 --> 09:22.000
In neither case, the image location needs to be written to the workspaces.vscode.settings.json file

09:22.000 --> 09:28.000
so that the extension can launch the specified container on browser.

09:28.000 --> 09:35.000
The pros of this approach is that this doesn't require a pre-conversion of the image,

09:35.000 --> 09:40.000
and a modified container image can be distributed to browsers.

09:41.000 --> 09:52.000
And cons of this approach is that obviously existing public container registries don't allow codes as of now.

09:52.000 --> 10:01.000
So if you don't use OCI layout approach, you need to prepare codes-enabled container registry

10:01.000 --> 10:08.000
or users need to use like a proxy or something to access to the registries.

10:08.000 --> 10:22.000
And this is an example of running container on github.dev.

10:22.000 --> 10:33.000
This is github.dev is an on-browser vscode that allows us editing codes of github-reports on-browser.

10:33.000 --> 10:41.000
This slide shows an example of running gcc installed devian container inside browser,

10:41.000 --> 10:51.000
and workspace is mounted at slash workspace, and HTTP or HTTPS networking is also available.

11:03.000 --> 11:20.000
And so this is a demo for this extension, and we use github.dev here.

11:20.000 --> 11:31.000
And that.

11:31.000 --> 11:45.000
Okay, so here, this is the extension of container wasm, and this is available on Marketplace.

11:45.000 --> 12:01.000
And this is the settings.json file in this repo, and this config file points to the URL of the devian container

12:01.000 --> 12:10.000
converted to wasm using container to wasm converter, and this is served on github pages,

12:10.000 --> 12:17.000
and we use that image on this workspace.

12:17.000 --> 12:24.000
And this is the terminal of the devian container running inside of the browser.

12:25.000 --> 12:34.000
And this is a secret we are going to use in this demo.

12:34.000 --> 12:55.000
And currently, yeah, by executing a command of this extension, this extension quickly loads the image,

12:55.000 --> 13:06.000
and the container image stored on github pages to this browser, and it just booted the Linux kernel and container inside browser with cpu emulation.

13:06.000 --> 13:19.000
And we currently see the devian shell in the browser.

13:19.000 --> 13:36.000
And by executing your name a command, you can see this is the x8664 and Linux environment inside browser.

13:36.000 --> 14:05.000
And this workspace of this, this workspace of this repo is mounted at slash workspace slash, so you can see the files of this repo inside browser, mounted on workspace directly.

14:05.000 --> 14:29.000
And in this container, we have gcc compiler, and we have a hello world pretty simple clanguage source code, so we can compile that c code inside browser using gcc compiler.

14:29.000 --> 14:55.000
Then we can run the compiled binary on browser. So the entire compiling and running steps are done inside browser in this demo.

14:55.000 --> 15:08.000
So how this extension works, the container depends on Linux to learn, so this project runs both of container and Linux inside wasm VM on browser.

15:08.000 --> 15:30.000
And to enable run existing architectures binaries inside wasm VM, we use cpu emulators compiled to wasm. We use box emulator for x8664 containers and tiny emu for risk 5 containers.

15:30.000 --> 15:48.000
So this extension launches all of the emulator Linux kernel and the container inside wasm VM on browser. And we also use microsoft slash vs code dash wasm for wasm and wasm host on browser.

15:48.000 --> 16:09.000
So this is a wasm host integrated to vs code, so this allows wasm VM to access to the terminal on vs code and the workspace directly over wasm compatible APIs like fd APIs.

16:09.000 --> 16:33.000
And how mounting workspaces to containers works. So as mentioned in the previous slide, we use vs code dash wasm for the wasm host and it provides the access to the workspace directly to the wasm VM over wasm compatible APIs.

16:33.000 --> 16:48.000
And emulator running inside wasm VM recognizes workspace directly via wasm APIs, then it shares that directly into the guest Linux via vortio9p.

16:48.000 --> 17:03.000
And that workspace is mounted to the containers slash workspace slash directly so the container can access to the workspace on that file system path.

17:03.000 --> 17:27.000
And container can perform HTTP or HTTPS networking with restrictions by browser. So this is implemented by running the entire networking stack runs inside of the browser.

17:27.000 --> 17:46.000
So additional proxy outside of the browser is not needed. And this networking stack supports forwarding HTTP and HTTPS connection to the outside of the browser using fetch API of the browser.

17:46.000 --> 18:11.000
And HTTPS connection is terminated at the networking stack on browser with its own certificate and the connection is re-encrypted by fetch API. So the container can access to the outside of the browser via HTTP, HTTPS proxy running inside of the browser.

18:12.000 --> 18:24.000
And there are actually some important restrictions by fetch API including accessible sites are limited by browser so code restriction is applied.

18:24.000 --> 18:35.000
And some headers are actually uncontrollable from the container because they are entirely controlled by browser.

18:35.000 --> 19:01.000
And vscode container wasm allows fetching container image directly from remote location without pre-conversion to wasm. So this is implemented by fetching and unpacking the container image in browser.

19:02.000 --> 19:11.000
The unpacked root file system of the container is mounted to the guest Linux via VARTA ION IP.

19:11.000 --> 19:33.000
And not limited to on-browser IDEs, we believe there are some expected use cases or possible use cases of running containers or wasm or browser.

19:33.000 --> 19:45.000
So first one is interactive on-browser Linux based demo. And second one is on-browser development and testing like this extension.

19:45.000 --> 19:58.000
And also sandbox execution environment of containers and application debugger runable on-browser were recorded and replayed debugging.

20:03.000 --> 20:13.000
There are some existing approaches for running unmodified applications on wasm. And I listed some of them here.

20:13.000 --> 20:27.000
First one is V86. This is a x86 compatible on-browser CPU emulator by Fabia Hammer. And it supports wide variety of guest OSs like including Windows.

20:27.000 --> 20:48.000
But it doesn't support for x86 64 now. And tiny emulator is a risk 5 and x86 emulator by Fabia Spillard. It can run on-browser and container to wasm converter actually uses this for risk 5 emulation.

20:49.000 --> 20:53.000
But it doesn't support for x86 64.

20:53.000 --> 21:09.000
And this project is still in a very early stage. So we expect further improvement.

21:09.000 --> 21:23.000
First one is performance analysis and improvement. We heavily rely on CPU emulation. So I think we need to analyze the overhead and I think we need some improvement for it.

21:23.000 --> 21:35.000
And possible integration will be with ELF Conf or ELF Conf. This is an AOT compiler of Linux.

21:35.000 --> 21:44.000
And this is a 64 ELF to wasm by Masashi Yoshimura, my colleague from NTT Corporation.

21:44.000 --> 21:56.000
So at LLVM, tomorrow my colleague Masashi also have this AOT compiler. So please check it out.

21:56.000 --> 22:10.000
And the integration of container ecosystem with browsers is also needed. As I mentioned, container has call to the solution.

22:10.000 --> 22:30.000
So currently accessing OS package repos from browser is not possible. And also in terms of container registries, as long as I know a public registries, container registries doesn't allow calls access.

22:30.000 --> 22:44.000
So on this field, your help is really needed if you know some technologies or repos or registries that allows calls access, please let us know.

22:44.000 --> 22:48.000
And graphic support is also on our milestone.

22:48.000 --> 23:11.000
So this is the summary of this talk. On-browser VS code lacks Linux terminal running completely inside browser. And VS code container wasm, experimental extension is enables to run Linux-based containers and its terminal inside browser.

23:12.000 --> 23:26.000
And there are two options for distributing containers to browsers. First one is pre-converting containers to wasm images. And second one is distributing OCI container images to browsers.

23:26.000 --> 23:31.000
And that's all of my talk. Thank you very much.

23:42.000 --> 23:45.000
Do you have any questions?

23:45.000 --> 23:46.000
Yes.

23:46.000 --> 23:47.000
Yes, please.

23:47.000 --> 23:49.000
Can you run Firefox inside the container?

23:51.000 --> 24:00.000
Okay, so the question was Firefox inside the container. So Firefox inside the container, inside Firefox. All right.

24:01.000 --> 24:13.000
Yeah, I haven't tested yet. But yeah, I believe it's possible. But I don't find any practical use case for this, but I think it's possible.

24:22.000 --> 24:23.000
Yes, of course.

24:31.000 --> 24:32.000
Yes.

24:42.000 --> 24:43.000
Sorry.

24:46.000 --> 24:56.000
QM. Thank you for the question. The question was about using QMU alternatively for like a box and tiny Mule.

24:56.000 --> 25:15.000
Yeah, I think this is very good question. And actually we have a, we have on container to wasm repo, we have an experimental branch that integrated QMU TCI to this extension.

25:16.000 --> 25:33.000
And yeah, in terms of like a TCG, yeah, we haven't integrated yet. So TCI is completely, yeah, so TCG we need to wait for running the generated code.

25:33.000 --> 25:51.000
So we, it is not obvious on wasm environment. But yeah, we are seeking for the way to integrate QMU into container to wasm. So this is, yeah, definitely on our milestone.

25:51.000 --> 25:52.000
Yeah. Thank you very much.

25:52.000 --> 25:53.000
Thank you very much.

26:02.000 --> 26:03.000
Thank you.

