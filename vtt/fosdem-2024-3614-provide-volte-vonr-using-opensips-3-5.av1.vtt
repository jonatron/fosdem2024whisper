WEBVTT

00:00.000 --> 00:08.920
Thank you for staying up until this point.

00:08.920 --> 00:17.480
My name is Liviu Kirku and together with my colleague, Rizvank Rainer, we are both open

00:17.480 --> 00:24.080
sieve developers for over 10 years at this point.

00:24.080 --> 00:27.000
We're going to be splitting the time into half.

00:27.000 --> 00:33.920
I'm going to be covering a bit about open sieves and then I'm going to be talking about

00:33.920 --> 00:41.800
IMS and why we chose to push more time into this direction and everything about the new

00:41.800 --> 00:45.280
IMS working group in the open sieves community.

00:45.280 --> 00:51.720
And then Rizvank will talk about the good stuff, right, the Volte and the 5G extensions

00:51.720 --> 00:55.200
and how we are tackling them.

00:55.200 --> 01:01.200
For this release, by the way, so there's that.

01:01.200 --> 01:07.360
About open sieves, if you're not familiar with it at this point, it's a high performance

01:07.360 --> 01:09.280
open source sieve server.

01:09.280 --> 01:15.160
It is fully RFC 3261 compliant.

01:15.160 --> 01:18.320
Various usage throughout the industry.

01:18.320 --> 01:34.800
It started around 2008, I think, so it has 16 years of runtime by this point and of experience.

01:34.800 --> 01:38.920
Multifunctional, you can use it for all sorts of sieve scenarios.

01:38.920 --> 01:46.120
It is programmable and it's written in C, so it's again, it's quite fast.

01:46.120 --> 01:53.560
Quick idea of how, I didn't start my timer, of what kind of companies are using it and

01:53.560 --> 02:00.040
this is just the tip of the iceberg that I selected on the, who is using section on

02:00.040 --> 02:03.920
the open sieves wiki.

02:03.920 --> 02:12.880
For example, it supports a lot of protocols from the basics of TCP and UDP then to the

02:12.880 --> 02:20.400
protocols which stack on top of them, such as TLS or WebSocket and other protocols such

02:20.400 --> 02:30.720
as sending head packets to Homer or MSRP for SMS in IMS networks, of course, diameter for

02:30.720 --> 02:36.120
accounting and whatnot.

02:36.120 --> 02:42.600
Also there are a bunch of extensions of sieve extensions that are supported from the very

02:42.600 --> 02:49.280
basic which are, I mean, by basic I mean ever since the project started, they were developed

02:49.280 --> 02:56.720
such as presence, the back to back is also a set of specs for which open sieves is popular.

02:56.720 --> 02:58.360
There is also an SDP parser.

02:58.360 --> 03:04.440
We don't do that much media in open sieves but you can definitely manipulate the SDP quite

03:04.440 --> 03:06.520
a bit.

03:06.520 --> 03:11.960
So there are those basic specs but they are also kept up to date, right?

03:11.960 --> 03:19.240
For example, the sieve digest authentication, as soon as the RFC came out, we got contributions

03:19.240 --> 03:24.640
and we got it up to speed with the latest hashing algorithms.

03:24.640 --> 03:26.480
Thank you to Max for that.

03:26.480 --> 03:29.160
So also the SIP push notifications, right?

03:29.160 --> 03:38.680
You could do them for just like a glue scripting here and there, you could achieve it but also

03:38.680 --> 03:46.300
they came up with an official IETF RFC for it which also is supported.

03:46.300 --> 03:48.480
And then there are other types of interfacing.

03:48.480 --> 03:55.200
From SQL databases, like the most popular ones you can think of, MySQL, Postgres, there's

03:55.200 --> 03:57.820
even a virtual database.

03:57.820 --> 04:01.520
We came up with that kind of lets you fail over between them, right?

04:01.520 --> 04:07.800
You can write to the virtual and it goes either to Postgres or MySQL as a fallback, let's

04:07.800 --> 04:11.680
say, from all the way to NoSQL databases.

04:11.680 --> 04:20.840
You get these document-oriented databases such as Mongo or Couchbase or caching databases,

04:20.840 --> 04:27.720
the memcache d and you can build your application the way you want to.

04:27.720 --> 04:34.880
And finally there's interfacing in the form of just do it via REST queries, right?

04:34.880 --> 04:40.920
Or you could be using a message queues or even diameter messages.

04:40.920 --> 04:44.000
Radius, let's try to move past it, right?

04:44.000 --> 04:46.480
It's so old by this point.

04:46.480 --> 04:49.000
Let's start using diameter.

04:49.000 --> 04:51.360
Or you could even interface with MI.

04:51.360 --> 04:53.320
That stands for management interface.

04:53.320 --> 04:59.760
It's quite a fun protocol that lets you interface, it's JSON RPC based and lets you interface

04:59.760 --> 05:00.760
with OpenSIPs.

05:01.040 --> 05:09.560
You can control its behavior, you can trigger reloads in various caches it can do or simply

05:09.560 --> 05:11.400
control the SIP signaling.

05:11.400 --> 05:15.200
There's also some part of that.

05:15.200 --> 05:17.280
How do you program it?

05:17.280 --> 05:23.280
It has a bespoke scripting language.

05:23.280 --> 05:24.960
It's not that difficult to pick up.

05:24.960 --> 05:31.640
You're also, in case you're worrying about, okay, I do not understand it, it's not readable.

05:31.640 --> 05:33.640
Yeah, exactly.

05:33.640 --> 05:37.000
Okay, it knows about it, interesting.

05:37.000 --> 05:44.400
There is also syntax highlighters so you can have quite a good time writing OpenSIPs config

05:44.400 --> 05:53.880
code which we've, I've tried, I mean, I've mostly tried to push it further down as time

05:53.880 --> 05:56.280
went but it is what it is.

05:56.280 --> 06:00.760
I think it's up to a good point at this by now.

06:00.760 --> 06:04.200
In that you get these nice variables.

06:04.200 --> 06:05.200
They are scoped.

06:05.200 --> 06:10.160
You can start from a single worker scope and then to the SIP transaction scope.

06:10.160 --> 06:11.800
They are kind of concentric, right?

06:11.800 --> 06:16.440
You get the SIP dialogue scope or you could even have like the biggest scope possible,

06:16.440 --> 06:22.000
right, with globally shared variables that are persistent throughout the lifetime of

06:22.000 --> 06:25.280
the server.

06:25.280 --> 06:33.840
There are lots of modules you could be building services with from SIP registrars or SIP residents

06:33.840 --> 06:42.680
all the way to doing more of an operator kind of workloads such as least cost routing.

06:42.680 --> 06:46.720
You could do load balancing to your Alba and Gateways.

06:46.720 --> 06:53.600
You could do maybe topology hiding on as the request exit your network and hide your

06:53.600 --> 06:58.480
IPs or whatever sensible information your SIP packets may contain, for example, the

06:58.480 --> 07:00.000
via headers, right?

07:00.000 --> 07:03.600
That's a typical use case.

07:03.600 --> 07:05.880
And even not traversal capabilities, right?

07:05.880 --> 07:12.960
Because we've also, we are familiar with the problems that can happen there with the contact

07:12.960 --> 07:19.680
headers and the private media, media IPs.

07:19.680 --> 07:25.960
So all of this leads to the creation of various class 4 services, right?

07:25.960 --> 07:34.720
And services such as SIP front ends, maybe you are building a platform that does wholesale

07:34.720 --> 07:41.800
trunking or even a simple redirect service that you could be scaling and building a business

07:41.800 --> 07:42.800
with, right?

07:42.800 --> 07:49.080
Such as portability service or least cost router or a C name dip as simple as that, right?

07:49.080 --> 07:51.600
Or even a stair shaken service, right?

07:51.600 --> 07:55.840
We also have a stair shaken implementation.

07:55.840 --> 07:59.120
Be sure to check out the stair shaken module so you could be doing either side.

07:59.120 --> 08:04.560
You could be doing the siding side or the verification side and that's it.

08:04.560 --> 08:06.560
Make a service out of it.

08:06.560 --> 08:14.800
Or you could go into the enterprise feature domain and look into building PBX experiences,

08:14.800 --> 08:15.800
right?

08:15.800 --> 08:21.040
With conferences, hunt groups, call pickup, call parking, IVRs, voicemail, all that kind

08:21.040 --> 08:22.040
of stuff.

08:22.040 --> 08:25.520
I put a small asterisk there that some of these require media.

08:25.520 --> 08:33.040
So not sure if I mentioned it, but OpenSIP is at the end of the day either a back to

08:33.040 --> 08:34.760
back or a C proxy.

08:34.760 --> 08:35.760
It's mostly a C proxy.

08:35.760 --> 08:37.320
It can be a back to back, sorry.

08:37.320 --> 08:38.760
But it does not do that.

08:38.760 --> 08:39.760
It does not do media.

08:39.760 --> 08:42.120
It does not carry media at all.

08:42.120 --> 08:48.800
So maybe you will have to use an additional service here, a free switch or an asterisk

08:48.800 --> 08:53.440
to achieve these features.

08:53.440 --> 09:01.680
Last but not least, it has built-in high availability and the clustering makes it so you can build

09:01.680 --> 09:06.200
these highly available services.

09:06.200 --> 09:15.400
And next is the IMS and a bit of info around it.

09:15.400 --> 09:23.800
It is a specification from the 3GPP consortium and it's not really an, let's start from

09:23.800 --> 09:24.800
what it is.

09:24.800 --> 09:26.760
It is an architectural framework.

09:26.760 --> 09:34.720
It is a set of recommendations, a set of microservices that you could be structuring

09:34.720 --> 09:42.560
your platform in order to not only achieve the voice services you want, either IP multimedia

09:42.560 --> 09:52.120
services, the group chats, the file transfers, the voicemails and so on and so forth.

09:52.120 --> 09:58.480
But also it is, the designs are modular.

09:58.480 --> 10:03.360
They allow quite a bit of flexibility and it does not force you to go down a specific

10:03.360 --> 10:09.800
path or makes it as loose as possible.

10:09.800 --> 10:19.200
So for example here we can see an IMS network broken down into its three major layers, which

10:19.200 --> 10:26.680
is first of all there is the concept of the user equipment, which is here on the bottom,

10:26.680 --> 10:30.320
your cell phones, your laptops that are connected to the platform.

10:30.320 --> 10:33.320
They are doing this via the transport layer.

10:33.320 --> 10:39.120
Okay, I have here on this slide.

10:39.120 --> 10:43.520
And this is not of much relevance to open-sifs per se, right?

10:43.520 --> 10:53.320
This is your radio access devices and the wireless access or the PSTN interrupt if you

10:53.320 --> 10:55.120
have devices coming from that side, right?

10:55.120 --> 11:01.880
They are hitting this MGW, the media gateway.

11:01.880 --> 11:06.160
But what's important is that they end up in your IMS layer, the control layer.

11:06.160 --> 11:14.240
And here is where it is of great interest to open-sifts specifically because two core

11:14.240 --> 11:22.000
protocols here are SIP and diameter and we happen to support both.

11:22.000 --> 11:28.400
And the components that open-sifts could fulfill the role here are mainly this.

11:28.400 --> 11:34.440
The first one is the proxy call session control function, CSCF.

11:34.440 --> 11:37.840
It is the first entry point into the platform.

11:37.840 --> 11:49.000
It can be discovered by the IMS terminals and typically receives its traffic through

11:49.000 --> 11:50.360
an IPsec tunnel.

11:50.360 --> 11:55.080
So this is one of the first things that Rosbano, one of the things that I think is the last

11:55.080 --> 12:01.640
actually, that he'll be talking about and we are still to implement this part.

12:01.640 --> 12:07.000
Coming next, there is another call session control function in the IMS topology that

12:07.000 --> 12:11.560
is interrogating CSCF.

12:11.560 --> 12:15.800
You could also put an open-sifts to fulfill this role and program it.

12:15.800 --> 12:19.640
So it acts as a relay.

12:19.640 --> 12:30.000
It serves the domain, maybe does some validations for the SIP calls coming in and maybe does

12:30.040 --> 12:36.200
some interactions with the subscriber, locator, with the SLF.

12:36.200 --> 12:42.560
Finally, and here is where the big part of the logic will be in the IMS platform is the

12:42.560 --> 12:45.720
serving CSCF.

12:45.720 --> 12:54.440
And here is where the users, the user registrations are processed and they are accepted.

12:54.440 --> 12:56.640
Of course, they are stored in the HSS.

12:56.640 --> 12:59.640
I'll get there in a second.

12:59.680 --> 13:01.880
It can also store billing information.

13:01.880 --> 13:10.800
It handles the SIP session timers and it talks to the HSS using the ammeter.

13:10.800 --> 13:15.720
If you take a look at the connections, the where is the full line is SIP and the dot

13:15.720 --> 13:18.400
it is the ammeter.

13:18.400 --> 13:23.120
And finally, we have stuff that is not really related to open-sifts and here is the HSS,

13:23.120 --> 13:26.960
the subscriber database.

13:26.960 --> 13:35.600
We talk to it via the ammeter and the store's user profiles provides info and pretty much

13:35.600 --> 13:40.960
you write, you both write into it and pull data from it.

13:40.960 --> 13:49.200
The SLF is only required when you have multiple databases.

13:49.200 --> 13:53.960
Media resource function also interesting to note provides the media functions and playing

13:53.960 --> 13:54.960
announcements.

13:54.960 --> 13:59.800
Again, you'll probably be doing this with some other software than open-sifts.

13:59.800 --> 14:06.360
The breakout gateway and that kind of covers the control layer.

14:06.360 --> 14:11.280
And finally, we have on top the service layer and here there is the SIP application server,

14:11.280 --> 14:15.280
which again we could be using open-sifts here.

14:15.280 --> 14:23.600
And it can host a variety of SIP services from redirect, roll, proxy, even a back-to-back

14:23.600 --> 14:30.160
user agent providing the multimedia services.

14:30.160 --> 14:38.000
And I wanted to kind of quickly go through my experience of working with the 3GPP documentation

14:38.000 --> 14:45.240
and my few tips on how to find your way around them because let's say we let's take the

14:45.240 --> 14:47.440
IMS-SH interface, right?

14:47.440 --> 14:51.760
And let's say we want to work here is where what it pertains to.

14:51.760 --> 15:00.440
It pertains to interactions between the AS and the HSS and also the, it's also an AS,

15:00.440 --> 15:04.760
even the OSA with the HSS.

15:04.760 --> 15:11.800
And if you make the mistake of just Googling for these documents, you might not know whether

15:11.800 --> 15:13.800
you've run into the latest version or not.

15:13.800 --> 15:17.720
Here we see we get the top result is V15, right?

15:17.720 --> 15:26.360
But it turns out that had we gotten to the 3GPP portal, which has a nice selection here

15:26.360 --> 15:32.040
and ways for you to filter the documents, just dial in the SH interface, hit search,

15:32.040 --> 15:36.120
and it gives you the exact two documents that you need.

15:36.120 --> 15:38.080
Let's zoom in through one of them.

15:38.080 --> 15:39.760
There is a nice versions tab.

15:39.760 --> 15:41.120
You can click it and there you go.

15:41.120 --> 15:44.840
The 17 is actually the latest version.

15:44.840 --> 15:46.960
And there is one more gotcha here.

15:46.960 --> 15:53.680
It's where the 3GPP works in tandem with the European Telecommunication Standard Institute.

15:53.680 --> 16:00.960
And that's where the standard actually gets published and accepted and they just put a

16:00.960 --> 16:02.280
one in front of it, right?

16:02.280 --> 16:05.080
So from here, let's say we have, that's the rule.

16:05.080 --> 16:08.520
You have a 29329 spec from 3GPP.

16:08.520 --> 16:12.160
Once it's accepted, it becomes the one 29329.

16:12.160 --> 16:14.600
So here now we know what to Google for.

16:14.600 --> 16:18.760
It's TS version 17 and it gives us, right?

16:18.760 --> 16:20.240
So we get the result.

16:20.240 --> 16:24.720
Alternatively, if you still don't find it this way, you could just go to the directory

16:24.720 --> 16:30.120
here on the ETSI website, on the ETSI website and just manually dig for it.

16:30.120 --> 16:33.680
You can go to the range, you get the latest and there you go.

16:33.680 --> 16:37.200
The PDF is there.

16:37.200 --> 16:43.480
So kind of interesting to note how these documents change over time and what to expect because

16:43.480 --> 16:53.400
let's, this specific SH document, it started in 2002 and it actually received updates even

16:53.400 --> 16:55.200
up to 20 years later.

16:55.200 --> 17:00.160
So this is from a couple years ago, the latest version, 17.

17:00.160 --> 17:07.520
And meanwhile, the app code has changed from two.

17:07.520 --> 17:13.640
These are, this is just a diameter packet and a bunch of AVPs and some command codes have

17:13.640 --> 17:23.360
shifted and the methods have stayed the same, the user data profile and so on.

17:23.360 --> 17:25.600
But a lot of AVPs have been added.

17:25.600 --> 17:31.880
So you can see, so we're going from eight AVPs all the way up until 25 or something.

17:31.880 --> 17:39.680
So the complexity of the networks has grown as more and more requirements have been put

17:39.680 --> 17:40.680
there.

17:40.680 --> 17:43.120
So they have been represented as AVPs, of course.

17:43.120 --> 17:45.320
So it's more data to be pushed.

17:45.320 --> 17:47.760
Also more errors to be replied to, right?

17:47.760 --> 17:49.960
So we have started with six errors.

17:49.960 --> 17:54.800
Now we've got maybe 12 or somewhere there.

17:54.800 --> 18:02.280
And to help to draft all of these and to understand better what requirements we are, we have

18:02.280 --> 18:07.760
to implement because they are, after all, even with the 5G, there are tens of documents

18:07.760 --> 18:10.120
on the 3GPP website.

18:10.120 --> 18:16.040
We started this working group for IMS on the OpenSYF mailing list.

18:16.040 --> 18:22.880
And the basic idea is just to get feedback to start open discussions, right?

18:22.880 --> 18:24.160
All of these are public.

18:24.160 --> 18:28.080
You can Google for them on the web.

18:28.080 --> 18:39.880
And they will help us a lot in shaping the development of the IMS support in OpenSYFs.

18:39.880 --> 18:44.640
And with that, I will leave it to Resvan to go into Volte.

18:44.640 --> 18:46.760
Thank you, Livia.

18:47.760 --> 18:53.880
This, Livia, presented how we got into the IMS world.

18:53.880 --> 19:00.200
Now I'm going to show you how we are approaching it from our perspective.

19:00.200 --> 19:06.680
That includes the feedback that we got from the working groups, as well as feedback that,

19:06.680 --> 19:11.040
as well as the way OpenSYFs works and how we put all of these together.

19:11.040 --> 19:12.040
Okay.

19:12.040 --> 19:13.040
There you go.

19:13.040 --> 19:17.400
And first, let's do some sort of history.

19:17.400 --> 19:19.880
Probably most of you already heard of Volte.

19:19.880 --> 19:26.960
It's voiceover LTE, or voiceover 4G infrastructure.

19:26.960 --> 19:35.440
It started, the specifications started in early 2000, but they got standardized in 2010.

19:35.440 --> 19:40.880
And then there were a couple of implementations.

19:40.880 --> 19:50.520
It was first released in 2012, but nowadays it grows a lot and expanded a lot.

19:50.520 --> 19:57.200
In 2020, they were documented around 226 operators.

19:57.200 --> 20:03.120
And it offers a lot of improvements over earlier networks, such as 2G or 3G.

20:03.120 --> 20:09.360
It has faster call setup, high definition of voice quality, reduced bandwidth, reduced

20:09.360 --> 20:17.600
background noise, support for video calling and video codecs and so on.

20:17.600 --> 20:24.040
This is more or less the Volte architecture, although it might be quite complex.

20:24.040 --> 20:27.040
As you can see, there are multiple components.

20:27.040 --> 20:32.280
What I really want to show you is actually only these three squares.

20:32.280 --> 20:41.680
So is the EPC Evolve packet core, the CS and the IMS.

20:41.680 --> 20:48.600
So what we are only interested from the voice perspective is the IMS, which stands for IP

20:48.600 --> 20:50.120
multimedia subsystem.

20:50.120 --> 20:58.160
So we are only interested in the multimedia features of this whole scheme, especially

20:58.160 --> 21:03.760
as Liviu said in the CSCF components.

21:03.760 --> 21:05.040
The same thing is shown here.

21:05.040 --> 21:12.440
So we are not interested, at least from the voice perspective or from the multimedia perspective,

21:12.440 --> 21:16.240
we are not interested in radio frequencies.

21:16.240 --> 21:23.400
We are just interested in the backbone, which offers us the IP connectivity so that we can

21:23.400 --> 21:31.320
carry our voice and our calls over these networks.

21:31.320 --> 21:40.560
This is the CSCF functions, which basically uses different interfaces, such as CIP for

21:40.560 --> 21:44.640
different communications for GM, where is it?

21:44.640 --> 21:53.000
Here is GM and MW, so communications within the CSCF, as well as diameter interfaces,

21:53.000 --> 22:04.600
which helps us discuss with the HSS or to the PCRF for charging.

22:04.600 --> 22:13.000
It also requires the IMS, aka, which is a way of mutual authenticating between the user

22:13.000 --> 22:16.200
equipment and the proxy.

22:16.200 --> 22:20.000
So we will be discussing about this later on.

22:20.000 --> 22:30.320
So that was in 2012, actually in 2010, the Volte specs were released.

22:30.320 --> 22:38.840
Five years later, actually, no, it's ten years later, the voice over new radio or voice over

22:38.840 --> 22:43.400
5G networks specs were released.

22:43.400 --> 22:49.960
It brings some improvements over the previous Volte or 4G, such as better codec support,

22:49.960 --> 23:00.920
faster call setups, low latency capabilities, but it also requires and has a couple of specifications

23:00.920 --> 23:02.880
of falling back to Volte.

23:02.880 --> 23:09.200
This is quite important because it keeps the high quality of the call, even though you're

23:09.200 --> 23:13.560
not able to operate in a 5G network.

23:14.200 --> 23:21.240
However, it completely drops to GM 3G, so those that fall back is no longer available,

23:21.240 --> 23:28.240
whereas it was in 4G.

23:28.240 --> 23:32.280
This is how a 5G network looks like.

23:32.280 --> 23:38.080
Again what's important here is actually this is how a 4G architecture looks.

23:38.080 --> 23:40.720
This is the 4G architecture.

23:40.720 --> 23:48.640
I'm showing both of them because, as I said earlier, 5G requires or forces you to fall

23:48.640 --> 24:00.040
back to 4G in case, I don't know, for example, you ran out of the radio range, so coverage,

24:00.040 --> 24:01.040
yes.

24:01.040 --> 24:05.240
So both of them, you need to support both of them.

24:05.360 --> 24:09.800
However what's important is that the IMS architecture, more or less, stays the same.

24:09.800 --> 24:17.680
So both of them, wherever the user equipment reaches you through the 5G or through the

24:17.680 --> 24:26.640
4G, the IMS subsystem is more or less the same in terms of architecture.

24:26.640 --> 24:31.520
However, you may see that these are different colored arrows.

24:31.560 --> 24:41.360
So here, if you remember, we were discussing diameter with HSS and the subsystems of the

24:41.360 --> 24:42.800
4G network.

24:42.800 --> 24:45.920
Here there's a blue.

24:45.920 --> 24:52.640
That's because we will be using a different protocol and a different interface.

24:52.640 --> 24:57.800
So as I said earlier, the core architecture is quite different.

24:57.800 --> 25:00.120
However, the IMS architecture is the same.

25:00.880 --> 25:06.760
For us, as a Cproxy, as a CSEF helps us a lot because we don't really need to change a lot of

25:06.760 --> 25:07.760
things.

25:07.760 --> 25:11.000
We can have one simple deployment that serves both of them.

25:11.000 --> 25:20.120
However, we are using different communication interfaces, whereas in 4G we were using diameter,

25:20.120 --> 25:25.320
starting with 4G, we have to use HTTP 2.0.

25:25.320 --> 25:32.320
And again, I need to emphasize that voiceover new radio requires you to fall back to a 4G

25:32.320 --> 25:40.080
call in case 5G cannot be properly handled.

25:40.080 --> 25:49.880
So since we have the same architecture, we will be basically taking care of the same

25:49.880 --> 25:58.160
process, the PC or P or I or S call station control function, the CSEF function.

25:58.160 --> 26:01.720
However we have a different transport layer.

26:01.720 --> 26:08.920
We are still using CIP for the control plane.

26:08.920 --> 26:18.640
However, we are using HTTP 2.0 for interfacing with the IMS components.

26:18.640 --> 26:29.160
This is an example of fallback from 5G to 4G.

26:29.160 --> 26:34.800
Basically I'm not going to get into details of this slide because it may be quite complex.

26:34.800 --> 26:42.240
The idea is that you basically have to use the same infrastructure of 4G in case 5G does

26:42.240 --> 26:43.240
not work.

26:43.240 --> 26:47.560
This is why it's very important to also support 4G.

26:47.560 --> 26:52.680
I'm emphasizing this because you can't choose one or the other.

26:52.680 --> 26:59.760
Actually you can choose only 4G if you want to have a 4G network, but if you want to have

26:59.760 --> 27:05.520
only a 5G network, you can't have it without 4G because you need this fallback in case

27:05.520 --> 27:09.120
5G is not always available.

27:09.120 --> 27:16.560
In terms of implementations, in OpenCS we try to keep things as flexible as possible.

27:16.560 --> 27:22.360
We try to avoid hard coding interactions with components.

27:22.360 --> 27:23.360
You know why?

27:23.360 --> 27:30.280
Well, exactly why I leave you said earlier because these specifications change very, very

27:30.280 --> 27:31.280
quickly.

27:31.280 --> 27:34.640
So you have to adapt as fast as possible.

27:34.640 --> 27:39.000
It's very hard to adapt if you have queries hard coded in your code.

27:39.000 --> 27:44.680
That's why it's from our perspective it's important to have everything in a configurable

27:44.680 --> 27:45.680
way.

27:46.320 --> 27:52.040
When we develop the diameter interface, we try to push as much as possible in the script

27:52.040 --> 27:59.120
so that whenever, for example, you want to issue a query to a diameter server, you can

27:59.120 --> 28:02.000
handcraft it in the script.

28:02.000 --> 28:06.120
So we provide this flexibility in the script.

28:06.120 --> 28:12.160
You just build your JSON which is equivalent to the diameter and just push it, wait for

28:12.160 --> 28:16.840
a response and handle the response accordingly.

28:16.840 --> 28:21.800
Commands can be handled both synchronous and asynchronous with regards to the message processing

28:21.800 --> 28:28.640
so it's quite efficient.

28:28.640 --> 28:32.640
We are also planning to act as a diameter server.

28:32.640 --> 28:42.080
This is useful in order to get notifications or events from AGLS for example.

28:43.000 --> 28:50.960
You need to update your profile.

28:50.960 --> 28:57.040
Another example is the user equipment gets disconnected, either turns off gracefully

28:57.040 --> 29:01.480
or not, who knows, or just runs out of network.

29:01.480 --> 29:06.680
You might need to know these events so that you can cut the communication or terminate

29:06.680 --> 29:10.280
the calls, the ongoing calls.

29:10.480 --> 29:14.000
We built it on top of the free diameter open source project.

29:14.000 --> 29:18.800
That's because we didn't want to get our hands dirty with diameter.

29:18.800 --> 29:28.000
So we just used somebody else's code which is highly used and highly stable and so on.

29:28.000 --> 29:37.720
So that's why we chose the free diameter library that is provided by the free diameter project.

29:37.720 --> 29:46.080
The only problem we had was integrating it from open-source multiprocessor architecture

29:46.080 --> 29:53.000
to diameter single process multi-threaded architecture.

29:53.000 --> 29:58.880
That's why we created a dedicated process which talks with all the other SIP workers

29:58.880 --> 30:09.720
and synchronizes in order to ensure communication with the diameter server or servers.

30:09.720 --> 30:20.880
In order to support 5G, we also had to create an HTTP 2.0 interface which is going to behave

30:20.880 --> 30:24.160
similar to the diameter interface.

30:24.160 --> 30:28.680
So again, commands can be handcrafted, requests will come to script.

30:28.680 --> 30:34.680
Again, this is important to us so that we keep open-source as flexible as possible.

30:34.680 --> 30:39.560
We already have the client side available through the REST client which uses Libcurl

30:39.560 --> 30:43.160
which is already supporting HTTP 2.0.

30:43.160 --> 30:50.320
However on the server side, we will be using a different library.

30:50.320 --> 30:56.480
It's called ng-http2 which provides different hooks that you can use in order to parse HTTP

30:56.480 --> 31:03.600
2.0 messages.

31:03.600 --> 31:11.720
In terms of authentication, all the 4G and 5G specifications require that the user gets

31:11.720 --> 31:17.400
mutual authentication with the core network.

31:17.400 --> 31:22.880
So this means that you don't just need to authenticate the user but the user also needs

31:22.880 --> 31:29.200
to authenticate the core and create a secure communication between these two.

31:29.200 --> 31:37.680
So this is what the AKA authentication and key management agreement tries to offer through

31:37.680 --> 31:43.360
mutual authentication through one-time passwords.

31:43.360 --> 31:50.000
Basically these are some, they are called authentication vectors so it's a set of parameters

31:50.160 --> 32:03.520
that are shared between the user equipment, the CSEF and the authentication server here

32:03.520 --> 32:05.680
in the AHSS.

32:05.680 --> 32:12.040
So these parameters are negotiated either, for example, the shared secret is stored into

32:12.040 --> 32:13.560
your SIM.

32:13.560 --> 32:22.800
So when you get a SIM from your carrier, it already has a K value which is known by AHSS.

32:22.800 --> 32:24.160
So this is not real-time.

32:24.160 --> 32:29.920
It can also be real-time through some interfaces but it's not always like that.

32:29.920 --> 32:36.960
So the idea is that you negotiate some parameters of the AED through one channel and then when

32:36.960 --> 32:44.560
you start registering through open-sIPs, the SCSF goes and asks for these parameters on

32:44.560 --> 32:45.880
a different channel.

32:45.880 --> 32:52.120
This way these two will be able to create a secure channel.

32:52.120 --> 32:58.000
I will talk later about this.

32:58.000 --> 32:58.880
This is how...

34:28.000 --> 34:40.400
Go and get these vectors through different interfaces.

34:40.400 --> 34:42.120
For example, you can go through diameter.

34:42.120 --> 34:43.160
This is 4G.

34:43.160 --> 34:45.360
You can go through HTTP2.

34:45.360 --> 34:46.680
This is 5G.

34:46.680 --> 34:51.080
You can actually get a route and provide your own parameters.

34:51.080 --> 34:57.400
For example, you can even use CP which has support for akav1.

34:57.400 --> 35:02.360
You negotiate those parameters like simply copy-pasting from one project to the other

35:02.360 --> 35:03.480
and that's it.

35:03.480 --> 35:06.280
You will get aka authentication.

35:06.280 --> 35:08.560
So there are different ways of getting this.

35:08.560 --> 35:15.160
We don't want to hark open-sIPs into getting one single, only one of it.

35:15.160 --> 35:21.280
akav1 is susceptible to many of the middle attacks.

35:21.280 --> 35:24.520
That's why we also need to use IPsec.

35:24.520 --> 35:36.680
Once we negotiate the IEC and the keys, the integrity keys and safer keys, somebody else

35:36.680 --> 35:41.160
might spot them and might use them as a man in the middle.

35:41.160 --> 35:44.160
That's why we need to also use IPsec.

35:44.160 --> 35:51.560
However, this has been improved in the second version.

35:51.560 --> 36:03.640
Those integrity keys and safer keys can no longer be used starting with 2015.

36:03.640 --> 36:06.400
Basically this drops the requirement of IPsec.

36:06.400 --> 36:10.680
You can have different other channels of integrity.

36:10.680 --> 36:15.360
For example, you can use TLS.

36:15.360 --> 36:21.120
You first establish the call through TLS, exchange the keys securely.

36:21.120 --> 36:28.000
Then you can use that communication channel to communicate.

36:28.000 --> 36:33.920
In conclusion, in order to provide Volte, it's not enough to use just-sIP.

36:33.920 --> 36:40.240
Whereas it's enough to provide telephony using just-sIP and RTP.

36:40.240 --> 36:45.920
In IMS, you need to have a diameter client and server support.

36:45.920 --> 36:55.760
You have to have HTTP to client and server support for offering voiceover 5G.

36:55.760 --> 37:03.360
You also need to implement IMS, AK1, V1 plus IPsec.

37:03.360 --> 37:08.240
Or if you don't want to do IPsec, you need to implement AKV2 and WebRTC.

37:08.240 --> 37:15.200
There are a lot of requirements that you need to implement.

37:15.280 --> 37:22.880
Everything is very dynamic as you've noticed and very hard to process.

37:22.880 --> 37:25.960
In short, everything is MSM.

37:25.960 --> 37:33.960
Some of you that already have experience with that have the same opinion as me.

37:33.960 --> 37:35.280
What's next?

37:35.280 --> 37:39.880
We put everything together and start working on it.

37:39.880 --> 37:42.840
We already have the diameter stuff.

37:42.840 --> 37:45.800
We need to work on the IMS, AK implementation.

37:45.800 --> 37:47.720
It's actually almost ready.

37:47.720 --> 37:52.520
We need to implement the HTTP 2.0 server.

37:52.520 --> 37:58.840
What's very important for us, because this is something that the community gets afterwards,

37:58.840 --> 38:04.120
is putting all of them together and provide a fully working setup.

38:04.120 --> 38:11.200
We want to provide as many tutorials as possible to help people understand and prevent having

38:11.200 --> 38:21.120
them do what we've done, all this documentation and all this, as well as the IMS working work.

38:21.120 --> 38:23.160
We want to spare you of that.

38:23.160 --> 38:26.240
We can also provide some working examples through Docker containers.

38:26.240 --> 38:35.640
For example, the guys from Voice Center already did that with the first stage of our work.

38:35.640 --> 38:39.280
Yeah.

38:39.280 --> 38:40.280
Putting all of them together.

38:40.280 --> 38:48.400
If you want to get more on this topic and more about OpenCiv's, come join our OpenCiv

38:48.400 --> 38:52.240
Summit in 2024.

38:52.240 --> 38:59.520
It's going to happen in Valencia between 14th and 17th of May.

38:59.520 --> 39:02.360
Looking forward to seeing you there.

39:02.360 --> 39:07.920
If you have any questions, if you have time for questions, please shoot.

39:07.920 --> 39:09.800
All the time we want for questions.

39:10.160 --> 39:11.160
Go ahead.

39:11.160 --> 39:12.160
There's one over here.

39:12.160 --> 39:40.880
That's a very good question.

39:40.880 --> 39:53.280
The question is why do we need a specification for the internal communication?

39:53.280 --> 39:58.040
I think the reason, so they're actually two answers.

39:58.040 --> 39:59.520
One is in the Livio side.

39:59.520 --> 40:04.600
One of them is here.

40:04.600 --> 40:08.800
Where is it?

40:08.800 --> 40:09.800
Here.

40:10.720 --> 40:17.800
Indeed, HSS through CSCF is internal communication.

40:17.800 --> 40:22.600
You could normally use anything right here.

40:22.600 --> 40:25.680
It's very common for these implementations to change.

40:25.680 --> 40:27.960
That's why it's a good idea to have them.

40:27.960 --> 40:37.480
For example, the initial deployment of Open5.js was using the front hover HSS, which is a

40:37.480 --> 40:46.760
very nice project, but I'm not sure how updated it is nowadays.

40:46.760 --> 40:50.280
Nowadays, there's another solution for HSS.

40:50.280 --> 40:53.000
It's by HSS, which is more flexible.

40:53.000 --> 40:55.720
It's written in Python.

40:55.720 --> 41:03.000
If you wouldn't have this interface, you would have to redo the whole.

41:03.000 --> 41:04.000
That's one.

41:04.000 --> 41:10.360
The other one is, as you can see, HSS also discusses with CIP application.

41:10.360 --> 41:16.320
This interface, this may not be the same in the internal network.

41:16.320 --> 41:17.320
It's a different layer.

41:17.320 --> 41:18.320
It's a service layer.

41:18.320 --> 41:20.440
You can have multiple service layers.

41:20.440 --> 41:25.520
At that point, it makes sense to have some sort of specifications.

41:25.520 --> 41:51.000
Yes, but we are not, per se, sending the notifications in the OpenCIP configuration.

41:51.000 --> 41:58.560
What we give you is just a hook.

41:58.560 --> 42:02.280
We've got all sorts of the timer, the specification.

42:02.280 --> 42:10.120
It has a chapter where you're supposed to periodically force a re-register from the device, also

42:10.120 --> 42:12.840
through a push notification.

42:12.840 --> 42:17.720
Both that and the scenario where you receive the call imply that you should generate that

42:17.720 --> 42:18.720
push notification.

42:19.080 --> 42:23.000
How you do it, it's out of the scope of the OpenCIP.

42:23.000 --> 42:30.920
Probably you'll do some kind of a Python script, some bash script that grabs your app ID,

42:30.920 --> 42:34.880
app developer ID with the device ID.

42:34.880 --> 42:40.880
That's the PN, I've forgotten the name, PN, PRID or something like that.

42:40.880 --> 42:42.440
That uniquely identifies the device.

42:42.440 --> 42:45.040
There you go.

42:45.040 --> 42:49.520
You send it to...

42:49.520 --> 42:58.760
Yes, because it calls, for example, with Apple, the APNs for notification service.

42:58.760 --> 42:59.760
It's not CIP.

42:59.760 --> 43:01.760
It's probably HTTP getters.

43:01.760 --> 43:08.760
I'm asking this because I'm from B2Touch Project, which is a mobile operating system with completely

43:08.760 --> 43:10.760
different push architecture.

43:10.760 --> 43:13.760
It's flexible and that's pretty nice.

43:13.760 --> 43:14.760
That's interesting.

43:14.760 --> 43:17.760
It's a scenario you should be using push notification.

43:17.760 --> 43:18.760
There's another question, Max?

43:18.760 --> 43:23.760
I'm just curious, why did you decide to put, like, a build-in application?

43:23.760 --> 43:39.760
Why not rely on something like NGINX?

43:39.760 --> 43:43.760
That's also a very good question and we did think about that.

43:43.760 --> 43:45.760
Yeah, we considered that.

43:45.760 --> 43:50.760
We did consider that.

43:50.760 --> 43:58.760
We wanted to have a full solution by ourselves and fortunately, integrating HTTP2, we decided

43:58.760 --> 44:03.760
it's not that hard.

44:03.760 --> 44:08.760
What we are planning to do...

44:08.760 --> 44:09.760
That's true.

44:09.760 --> 44:17.760
What we were planning to do is also provide both ways or have the hooks.

44:17.760 --> 44:25.760
This provides the HTTP2 server but also all the hooks that an external server might get

44:25.760 --> 44:31.760
to push them, for example, through an MI, to use the same commands through MI.

44:31.760 --> 44:39.760
As you said, have an HTTP2 separate application that receives the notification and just triggers

44:39.760 --> 44:45.760
some MI commands to, let's say, terminate the calls or terminate the...

44:45.760 --> 44:50.760
We do consider this, if you have any.

44:50.760 --> 44:57.760
Yeah, all I could add to this is that this is a quick way of achieving kind of a version 1.0

44:57.760 --> 45:02.760
of all of the HTTP2 problems.

45:02.760 --> 45:07.760
We've got this client-side salt, also some solution for the server side.

45:07.760 --> 45:12.760
If we do see this becoming a problem, then we could absolutely go with a design like you suggested

45:12.760 --> 45:15.760
where it is a bit more complex.

45:15.760 --> 45:18.760
Now you have to deploy both an Nginx.

45:18.760 --> 45:26.760
You have to kind of get your hooks in there and convert them to some kind of UDP datagram via MI.

45:26.760 --> 45:29.760
Definitely, that would scale better.

45:29.760 --> 45:37.760
But also, it's worth mentioning that we haven't yet have gotten a use case for it as server side to begin with.

45:37.760 --> 45:41.760
So why optimize prematurely?

45:41.760 --> 45:43.760
I guess that is the best reason.

45:43.760 --> 45:49.760
We didn't want to optimize too quickly until we get some usage because at least with the diameter server

45:49.760 --> 45:52.760
we have quite a bit of methods, right?

45:52.760 --> 45:58.760
The push profile request, the registration termination, there are quite a few where you really need to be...

45:58.760 --> 46:01.760
to be invoked by the server actually.

46:01.760 --> 46:07.760
No, but I think this is like a very good question because this is sort of the questions that we're trying to solve

46:07.760 --> 46:09.760
using that IMS working group.

46:09.760 --> 46:19.760
People getting us ideas and trying to get pros and cons of different solutions.

46:19.760 --> 46:27.760
Indeed, here we have two different solutions and it would be interesting to, let's say, debate these over that working group.

46:27.760 --> 46:39.760
So it's free, join it and your ideas and feedback is welcome.

46:39.760 --> 46:43.760
All right, no more questions.

46:43.760 --> 46:48.760
Thank you so much, guys.

46:48.760 --> 46:54.760
Thank you, Saul and Lorenzo, for hosting us here.

46:54.760 --> 46:56.760
See you all next year. Go ahead.

47:24.760 --> 47:27.760
I didn't get an opportunity.

47:27.760 --> 47:38.760
The question is that regardless where the radio part, the radio network originated the request from,

47:38.760 --> 47:44.760
whether if it was on a 4G, 5G, ultimately you get to the control layer, right?

47:44.760 --> 47:51.760
So how does that differ or what actually makes you switch from diameter to HTTP2?

47:51.760 --> 47:56.760
Why not always use diameter even in a 5G network?

47:56.760 --> 47:59.760
That's simple because...

47:59.760 --> 48:01.760
We could discuss it though.

48:01.760 --> 48:03.760
Okay, yeah, let's go.

48:03.760 --> 48:11.760
I think the answer is that the components of 5G don't support diameter, so you need to talk with...

48:11.760 --> 48:15.760
Thanks everybody for sticking to Leanne. Hope to see you next year.

48:15.760 --> 48:17.760
Thank you.

48:17.760 --> 48:19.760
Thank you.

