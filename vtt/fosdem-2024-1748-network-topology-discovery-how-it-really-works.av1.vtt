WEBVTT

00:00.000 --> 00:02.060
you

00:30.000 --> 00:32.260
Patrick will start you away.

01:00.000 --> 01:01.000
at that time.

01:03.000 --> 01:07.000
And I co-founded a company that is offering support

01:07.000 --> 01:10.000
and custom development for NetXMS in 2009.

01:10.000 --> 01:16.000
And since 2017, it's my full-time job to lead the development

01:16.000 --> 01:22.000
of NetXMS and also participate in the management of state company.

01:24.000 --> 01:29.000
So, why do we need network discovery in the first place?

01:29.000 --> 01:35.000
So, we usually want to create nice maps of our networks,

01:35.000 --> 01:38.000
preferably automatically, so we don't need to draw it,

01:38.000 --> 01:40.000
and we want them up to date.

01:42.000 --> 01:48.000
We want to correlate events in our network based on topology.

01:48.000 --> 01:54.000
So, a very simple example, when we have an upstream router down,

01:54.000 --> 01:58.000
you don't want to get a lot of alerts for all devices behind the router.

01:58.000 --> 02:01.000
We want to correlate them into single alert.

02:02.000 --> 02:06.000
The main source of information is IP neighbors.

02:06.000 --> 02:12.000
And it will be ARP caches on devices for IP version 4

02:12.000 --> 02:17.000
and neighbor discovery protocol caches for IP version 6.

02:17.000 --> 02:23.000
And basically, we just read all the IP addresses mentioned in the ARP table

02:23.000 --> 02:27.000
and took it as a potential target for monitoring.

02:28.000 --> 02:34.000
The routing tables are another useful source of information.

02:34.000 --> 02:41.000
We can take host routes, we can take gateway addresses from routing tables,

02:41.000 --> 02:45.000
and this is really helpful dealing with point-to-point links

02:45.000 --> 02:49.000
or any other links when we don't have ARP protocol.

02:51.000 --> 02:54.000
And this actually allows our passive discovery

02:54.000 --> 02:58.000
to help through the civil links, for example, in the network.

03:01.000 --> 03:07.000
In NetXMS, we also use other sources of information about IP addresses.

03:07.000 --> 03:12.000
So, any syslog message, for some reason, comes to the management server.

03:12.000 --> 03:17.000
Any SNMP trap received, we can take the source address

03:17.000 --> 03:21.000
and use it as a potential device to monitor.

03:21.000 --> 03:26.000
And we also can support proprietary methods, proprietary MIPS,

03:26.000 --> 03:30.000
like an example of Micropeak, Neighbor Tables,

03:30.000 --> 03:34.000
so anything that is specific to certain equipment.

03:34.000 --> 03:39.000
In NetXMS, we have a special layer, we call it network device drivers.

03:39.000 --> 03:44.000
Those are pluggable modules that hide vendor specifics

03:44.000 --> 03:50.000
and provide information in a unified form to the upper layer.

03:51.000 --> 03:56.000
Active scan, that's really simple, we just send out packets

03:56.000 --> 04:00.000
and network devices like switches and routers,

04:00.000 --> 04:05.000
they should be accessible by SNMP from network management system.

04:09.000 --> 04:13.000
The monitoring system will take some preparation steps.

04:13.000 --> 04:17.000
So, for each device that is added to the monitoring,

04:17.000 --> 04:22.000
we will read full interface information from that device,

04:22.000 --> 04:27.000
name of the interface, description, MAC address, IP addresses,

04:27.000 --> 04:33.000
because we will need this information to match topology data.

04:33.000 --> 04:40.000
If device supports BridgeMap, which is normal for all switches,

04:40.000 --> 04:45.000
then we will read Bridgeport Mapping as well from BridgeMap.

04:46.000 --> 04:54.000
And if device is LDP capable, then we will read LDP local port information as well.

04:56.000 --> 05:01.000
Then we have multiple sources of topology information,

05:01.000 --> 05:06.000
and the first and most important and most reliable usually is LDP.

05:06.000 --> 05:10.000
It's an industry standard now,

05:10.000 --> 05:15.000
and a brief summary how LDP operates.

05:15.000 --> 05:22.000
So, each LDP capable device will send a fixed intervals,

05:22.000 --> 05:28.000
information frames that can be received by other LDP capable device.

05:28.000 --> 05:32.000
And if we talk about switches, the switch will work in a bit unusual way,

05:32.000 --> 05:36.000
it will not forward the frame as it will do with any other frame,

05:36.000 --> 05:40.000
it will receive it and process it,

05:40.000 --> 05:47.000
and on other ports it will send its own LDP information frames.

05:47.000 --> 05:52.000
So, each frame contains a sequence of TLV structures,

05:52.000 --> 05:56.000
and there are a few mandatory TLVs, which principles as LDP,

05:56.000 --> 06:02.000
so basically we will do the same stuff, but we will use different MIPs.

06:03.000 --> 06:07.000
Another interesting source is switch forwarding database,

06:07.000 --> 06:10.000
or sometimes it's called MAC address table.

06:10.000 --> 06:14.000
It's not a protocol as such, it's just a table within the switch

06:14.000 --> 06:20.000
that determines to which port the switch should forward frames

06:20.000 --> 06:23.000
designed for specific MAC address.

06:23.000 --> 06:27.000
And if we read MAC address table from the switch,

06:27.000 --> 06:32.000
we can identify ports that only have one MAC address known on them.

06:32.000 --> 06:38.000
And we can assume that this is only one device connected to that switch port,

06:38.000 --> 06:42.000
so we can add a topology link connecting that device,

06:42.000 --> 06:46.000
which may not be manageable at all, so it may be just,

06:46.000 --> 06:49.000
we can just ping it and know its MAC address,

06:49.000 --> 06:52.000
and we know that it's connected on that switch port.

06:52.000 --> 06:56.000
And this is a MAC address table example, and we see that the first three ports

06:56.000 --> 07:02.000
have only one MAC address, so we can assume that the end nodes connected,

07:02.000 --> 07:05.000
it's not some link between switches.

07:07.000 --> 07:11.000
Another bit unusual source of topology information is spending free.

07:11.000 --> 07:17.000
This is a spending free protocol that's never intended to be a protocol

07:17.000 --> 07:20.000
for topology discovery, but still we can get some information

07:20.000 --> 07:23.000
about connectivity between switches from spending free,

07:24.000 --> 07:30.000
and we can use it as last resort if we don't have LLDP or CDP between switches.

07:30.000 --> 07:33.000
So how spending free operates?

07:33.000 --> 07:37.000
When the switches are connected in the spending free domain,

07:37.000 --> 07:43.000
they elect a root bridge, and then every switch will have a root port.

07:43.000 --> 07:47.000
This is the port that points to the shortest path to the root,

07:48.000 --> 07:55.000
and it will also elect designated ports.

07:55.000 --> 07:59.000
In theory, the problem is there's a lot of vendors,

07:59.000 --> 08:05.000
especially maybe not from the top, they implement LLDP in the wrong way,

08:05.000 --> 08:09.000
so they may send wrong information LLDP packets itself.

08:09.000 --> 08:13.000
They may send everything correctly on LLDP level,

08:13.000 --> 08:20.000
but they may report absolute garbage through the SNMP when you read this LLDP myth.

08:20.000 --> 08:26.000
So we actually have a lot of code inside the monitoring

08:26.000 --> 08:35.000
to deal with inconsistencies and incorrect data in devices from different vendors.

08:35.000 --> 08:43.000
Those are some comments from our code related to specific devices.

08:46.000 --> 08:51.000
So that's it, a quick overview of how we do network discovery.

08:51.000 --> 08:57.000
If you have any questions, you can ask us later, visit our website. Thank you.

09:06.000 --> 09:09.000
We have one question.

09:14.000 --> 09:17.000
Hello, sorry, can I ask one question?

09:17.000 --> 09:19.000
Question.

09:19.000 --> 09:21.000
Sorry.

09:21.000 --> 09:23.000
Yeah.

09:23.000 --> 09:25.000
I have one question.

09:25.000 --> 09:31.000
Real quick, I was wondering if you've looked into using Open Config at all to collect some of this data.

09:31.000 --> 09:33.000
No.

09:36.000 --> 09:43.000
Have you considered or looked at Open Config at all to collect some of this data about neighbors?

09:43.000 --> 09:45.000
I don't.

09:45.000 --> 09:47.000
Open Config.

09:47.000 --> 09:49.000
Open Config now, we don't use it.

09:49.000 --> 09:51.000
But we always open to new ways.

