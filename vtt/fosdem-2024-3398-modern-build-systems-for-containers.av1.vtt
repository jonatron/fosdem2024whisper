WEBVTT

00:00.000 --> 00:20.520
Thank you very much. Yeah, so my name is Adrian. I work for Chingard but I'm a technical community

00:20.520 --> 00:30.600
advocate or DevRel. I do have a minor issue in that there's a rugby match on right now.

00:30.600 --> 00:35.360
I'm Scottish and Scotland is playing Wales right now so somebody scheduled my talk for

00:35.360 --> 00:39.760
the exact time of the rugby match. So I'm quite serious if somebody can go and look

00:39.760 --> 00:44.880
up the scores and let me know what's happening I would appreciate it. And you're all laughing

00:44.880 --> 00:56.080
I'm looking at me like I'm joking but I am actually quite serious. Okay so so this is

00:56.080 --> 01:04.800
one of my favourite quotes about containers. Docker is doing to apt what apt did to tar.

01:04.800 --> 01:09.320
That's by Brian Cantrell or I guess a lot of you know he works at Oxide now but he used

01:09.320 --> 01:14.400
to be at Sun and Giant and has done a whole bunch of stuff with containers and operating

01:14.400 --> 01:24.440
systems and so on. But the point is in the old days I guess we used tar balls like 20

01:24.440 --> 01:28.520
years ago people were shipping software around by handing people sending people tar balls

01:28.520 --> 01:33.800
and it kind of worked especially like if you you know it's building from source but you

01:33.800 --> 01:38.880
typically got into problems with dependencies and he tried to ship a binary well good luck

01:38.880 --> 01:46.000
frankly. So then we got package managers and package managers really kind of solved a whole

01:46.000 --> 01:51.800
bunch of these problems right they took care of getting you the right dependencies. And

01:51.800 --> 01:57.600
I think we kind of take package managers for granted now but they are pretty cool and people

01:57.600 --> 02:02.440
still have to put a lot of work into them so if there's any sort of package manager

02:02.800 --> 02:13.320
containers out there thank you. But having said that all a package manager really is or all

02:13.320 --> 02:22.520
package really is is a tar ball plus some metadata about dependencies right. And then

02:22.520 --> 02:30.520
if you take a docker build or docker or a container image well that's really just an

02:30.600 --> 02:35.160
app or so on plus some metadata about how to run it. But now we're containing all the

02:35.160 --> 02:40.560
dependencies down to the operating system level. So that's kind of what Brian was talking

02:40.560 --> 02:51.560
about here. And container images really are just the same right they're just a file system

02:52.040 --> 02:57.840
plus some metadata. There's OCI standards on exactly what the file system should look

02:57.920 --> 03:03.880
like. It's not too complicated. Some of the metadata does get a bit confused and admittedly

03:03.880 --> 03:10.880
it's just a few levels of indirection. But it's not that complicated. Running and maintaining

03:11.560 --> 03:16.200
containers okay I will grant you that can get a lot more complicated. But that would

03:16.200 --> 03:23.200
be a very different talk to this one. So back in the early days of Docker and so on this

03:24.200 --> 03:31.200
is how we built container images. And this is a pretty typical build. And people still

03:31.200 --> 03:37.200
do this kind of thing today. And it's okay and it works. Yeah we're just using Golang

03:37.200 --> 03:44.200
copying in a source code running go build and set an entry point. There are some problems

03:46.040 --> 03:52.120
with this. Primarily you've got a big image here. I ran a build very similar to this one

03:52.160 --> 03:59.160
yesterday and it was 892 megabytes. It's also got CVE's. A Golang image is based on build

04:04.280 --> 04:11.280
tools which is based on Debian. And that base image the scanners at least. Scanners being

04:11.840 --> 04:18.840
like Trivys, Sneak, Grite, things like that. They complain that it does have CVE's. With

04:19.200 --> 04:26.200
or not those are at Trivys. Well I'll let you figure out. There's also poor reproducibility.

04:27.840 --> 04:34.840
I've not helped things here by writing from Golang. You could put a digest there and that

04:38.920 --> 04:42.760
would specify a specific image. But at the minute each time you run this you're going

04:42.800 --> 04:49.800
to get a very different build out. So one thing we can do that makes things a lot better

04:54.960 --> 05:01.960
is use a multi stage build. So here we've got practically the same build as this one

05:03.400 --> 05:08.480
at the top. But what we're doing is taking the artifact out and copying it on top of

05:08.480 --> 05:13.800
a production image. Now for the production image in this case I've used this to this

05:13.800 --> 05:19.160
image. This one has a chain guard static image. You could also totally use the Google

05:19.160 --> 05:25.160
disk to this image and you'll get pretty much the same thing. So what we're doing here,

05:25.160 --> 05:30.640
the other thing I had to do was set C go enabled to zero which tells go to produce a static

05:30.640 --> 05:37.640
binary in most cases. There are a couple of gotchas. But we copy that binary and copy

05:38.480 --> 05:43.000
onto this static image. So why can't I copy it onto a scratch image which is completely

05:43.000 --> 05:50.000
empty? Well typically you'll find that a lot of Linux applications do require a few things

05:52.240 --> 05:59.240
to be available. For example CA certificates we're talking to TLS to other web services.

05:59.960 --> 06:06.960
What often applications expect things like slash temp, slash home to be available and

06:07.560 --> 06:12.200
that's basically what static and the disk list images give you. They give you sort of bare

06:12.200 --> 06:19.200
minimum to run the typical statically compiled application. And if you do that you get a

06:21.560 --> 06:27.600
much, much smaller image. Like I did that yesterday that resulted in an 8.5 megabyte

06:27.600 --> 06:34.600
image as compared to the 892 megabyte image that's based on top of Golang. So that's an

06:35.520 --> 06:40.840
enormous saving. And that's not good just for security, it's also good just for transferring

06:40.840 --> 06:46.520
it about and reproducibility and so on. This is still not completely reproducible because

06:46.520 --> 06:51.680
Docker build tends not to be completely reproducible. There is ongoing work on that. There was a

06:51.680 --> 06:58.680
great talk at DockerCon last year on exactly that subject. There is an issue with disk

06:58.960 --> 07:04.600
to list. So in this example that we saw we used a static image which is for statically

07:04.600 --> 07:10.400
compiled binaries. So if you have a project that's run in say Rust, Go or something like

07:10.400 --> 07:14.880
that where you can produce a static binary that's perfect. But you can't use that for

07:14.880 --> 07:20.080
something like Java, Ruby or Node. In that case you're going to need a different base

07:20.160 --> 07:27.160
image that has the runtime you need in it at least. Now Google disk to list project does

07:27.840 --> 07:32.600
have a few of these. I believe they've got a Python one and a Java one at least. A Ching

07:32.600 --> 07:39.600
we've got a whole bunch more. But yeah, even if you find a base image you may still find

07:41.120 --> 07:46.080
that you need one or two more dependencies. Which brings you to the point well can I create

07:46.080 --> 07:51.400
my own sort of disk to list base images with absolute minimum in them. And I should like

07:51.400 --> 07:56.720
make the point that these images are so minimal they don't have like shells or package managers

07:56.720 --> 08:02.520
in them. They really are stripped down to just what you need at runtime.

08:02.520 --> 08:09.520
A quick aside there is a project called KO. We're cool, I'm not quite sure of which.

08:10.080 --> 08:17.080
And this is like a really easy way to build a go application into a disk to list image.

08:19.000 --> 08:24.200
So instead of an go build you're literally running a code build and it builds your container

08:24.200 --> 08:27.680
image. And you don't even need Docker. It's just because like all it's really doing is

08:27.680 --> 08:34.680
producing a file system there's no Docker involved. Yeah, so that's really trivial to

08:34.840 --> 08:41.840
use. There's no configuration literally. It's literally just code build. And yeah, you might

08:43.240 --> 08:46.960
be thinking well hang on how do you make these disk to list images if you're not using Docker

08:46.960 --> 08:52.960
build and so on. And can you make your own disk to list images. And the answer is you

08:52.960 --> 08:59.960
totally can. It's not that simple though. If you look at how the Google container tools

09:00.080 --> 09:05.800
disk list images are made they actually use Bazel which as some of you probably wear is

09:05.800 --> 09:12.800
the open source version of Blaze which is the internal Google build system which is

09:12.800 --> 09:18.720
understandably quite complex. But basically you know Google container tools disk list

09:18.720 --> 09:25.720
is debian with almost everything stripped out. A chain guard we did things a different

09:26.400 --> 09:32.400
way. We've got app code which builds our container images and you have to pair that with an operating

09:32.400 --> 09:39.400
system or package repository such as Wolfie which is our one or Alpine also works. You

09:40.640 --> 09:46.080
can't mix it though like Wolfie is based on G-Lib C and Alpine is based against Muzzle.

09:46.080 --> 09:53.080
So you can't mix packages at all. Okay, so we'll see if this works. I did it. Here

09:55.840 --> 10:02.840
is the repository for the go example for building with Bazel. So if you want to create a Docker

10:08.120 --> 10:13.920
image with Bazel this is the simplest example for creating one's go. And there's basically

10:13.920 --> 10:19.800
two you know there's like a go program here. We won't bother looking at that. But we can

10:19.880 --> 10:26.880
look at I think two interesting ones are module and build. So we have module here. I think

10:31.000 --> 10:35.280
somewhere we'll see we specify the base image. So we're building on top of a distrust base

10:35.280 --> 10:40.440
image and we're specifying the platforms. This bit's kind of interesting. If you use

10:40.440 --> 10:47.440
rules OCI in Bazel to build a container image you do have to specify a base image. Just kind

10:48.440 --> 10:52.440
of a bit annoying because when you're using something like Bazel you really want to specify

10:52.440 --> 10:58.440
everything down to the ingredients. Part of the whole point of Bazel is to completely

10:58.440 --> 11:03.440
specify where everything comes from but we have to pull in an image here. And there's

11:03.440 --> 11:10.440
no reason you couldn't create everything completely from scratch. Because again, container image

11:11.440 --> 11:18.440
is just a file system really. Okay, let's see if I can go back. And the other file is

11:25.320 --> 11:32.320
a build file. And okay there's not too much in it but there's a bit. And this is literally

11:33.320 --> 11:40.320
just to build that single very simple go application. So there is when you decide to use Bazel you

11:42.680 --> 11:49.680
suddenly got to bring in a whole bunch of stuff. But it does buy you a lot. There's a reason

11:54.600 --> 11:58.520
people like Google use it. There's excellent reproducibility. You run it twice. You get

11:58.560 --> 12:04.560
exactly the same binary artifact out. It is fast. There's a lot of levels of caching

12:04.560 --> 12:09.200
going on here. I think the main reason people use it though is for like provenance and so

12:09.200 --> 12:14.000
on. So provenance and reproducibility are sort of essential to your organization. That's

12:14.000 --> 12:19.120
when you want to be looking at something like Bazel. Yet you can build totally minimal

12:19.120 --> 12:25.200
images with it but as we saw there it is a bit of a beast. You're bringing in a lot

12:25.240 --> 12:30.080
of stuff just to build a simple go application in this case. So it's something you want to

12:30.080 --> 12:36.080
do for larger, more complicated systems. Probably not for like a small open source project.

12:36.080 --> 12:40.520
Yeah and there's the other issue about having to bring in a base image if you're using something

12:40.520 --> 12:47.520
like rules OCI. I think you can chain images though. And if you compare this to what we

12:48.880 --> 12:54.280
do at ChainGuard this is like how we build the Wolfie base image. This is the entire

12:54.320 --> 12:58.800
app code for the Wolfie base image. If you run this you'll get something very similar

12:58.800 --> 13:05.800
to the Wolfie base image you can download. So what we're saying is first thing is we

13:05.880 --> 13:10.240
got to point it at the package repository. In this case I'm pointing at the Wolfie package

13:10.240 --> 13:15.880
repository. Could also use Alpine. And then I'm saying what packages I want to install

13:15.880 --> 13:21.640
in my image. So I'm saying we need C certificates and Wolfie base. And if you do that you end

13:21.680 --> 13:26.040
up with an image that's basically got busybox and a few other things in it and not a lot

13:26.040 --> 13:33.040
else. And glibs too. Yeah then you set some metadata on your image things like entry point

13:34.760 --> 13:40.560
cmd and so on. And that's all you can do in app code. Right there's none of this like

13:40.560 --> 13:45.320
in Docker where you have run commands and you run arbitrary commands. You also can't

13:45.320 --> 13:52.320
add outside files in. Everything has to be in an APK package from a repository somewhere.

13:54.360 --> 14:01.360
That's all you can do. But because of that it's a lot simpler. Hopefully that example

14:02.360 --> 14:09.360
was simpler to understand than for example the Basel build. It's declarative. You're

14:09.880 --> 14:15.080
saying what you do and you can't do all this run imperative stuff. It's reproducible. I've

14:15.160 --> 14:22.160
done it twice. I will get the same result with the assumption that these packages haven't

14:22.160 --> 14:29.160
changed in the meantime. You can specify the exact version of packages as well and there

14:30.240 --> 14:36.240
is support for getting like a lock file out with exact versions of packages that you use.

14:36.240 --> 14:42.360
You do tend to get very low CV images from using this if you use Wolfie just because

14:42.400 --> 14:46.520
we're really aggressive at keeping the Wolfie packages up to date and they tend to have

14:46.520 --> 14:53.520
no CV use. The other thing is it composes well with Docker files. So like I said all

14:54.520 --> 15:00.120
you can do in app code is add in APKs. So if you want to add your own application in

15:00.120 --> 15:06.560
well you can use something like melange which is what we use internally to build APKs or

15:06.560 --> 15:11.640
you can take an existing you can build a base image of app code and then use it like Docker

15:11.680 --> 15:16.000
or something to copy in your application on top of it which is basically exactly what

15:16.000 --> 15:22.000
you're doing when you're using a multi-stage build with the train guard static image.

15:26.000 --> 15:32.000
Drawbacks I guess you are dependent on Alpine or Wolfie so if you want a package that's

15:32.000 --> 15:36.840
not in there you're going to have to create it yourself. What you totally can do you

15:36.880 --> 15:43.880
can use APK tools or you can use melange which is the train guard version of APK tools.

15:44.880 --> 15:51.160
As an aside there is also roles app code for Bazel which does kind of help with that issue

15:51.160 --> 15:57.760
I mentioned before about being able to build images in Bazel completely from scratch. So

15:57.760 --> 16:02.760
you can also check that out if you're interested. Oh yeah what's the score?

16:03.680 --> 16:10.680
That was unexpected thank you. Who scored? No don't worry.

16:19.080 --> 16:25.080
Yes I want to mention canonical chiseled containers so I spent a little while looking at this.

16:25.080 --> 16:31.080
There are resources you can't totally download it and play with it but there's not that much

16:31.200 --> 16:36.520
out there to be honest. So this is the canonical version of this chiseled containers. They

16:36.520 --> 16:43.120
do seem to have produced minimal low CV images and they do look good but it seems to be a

16:43.120 --> 16:50.120
very limited number of images they've created with this chisel mechanism. I could only find

16:50.160 --> 16:56.680
3.net images and a GRE image. You can create your own images but it does seem a little bit

16:56.720 --> 17:03.720
complex. Basically the app is the idea of slices or the idea that you can, I guess that's

17:06.000 --> 17:11.680
where the name chisel comes from so you take an apt package and your chisel bits out that

17:11.680 --> 17:18.680
you're interested in or you're not interested in. It does feel a bit like the app packages,

17:19.480 --> 17:25.560
the problem is app packages are large as opposed to with APK and other package managers where

17:25.560 --> 17:29.800
you have the idea of sub packages. So we haven't had this problem in Molfi because we just

17:29.800 --> 17:36.160
defined sub packages if you want a package that just has libraries for example. I don't

17:36.160 --> 17:41.800
know enough about app to say if that would have been a reasonable pathway to do it but

17:41.800 --> 17:48.800
this chisel mechanism does look very manual. You end up having to specify paths etc. The

17:49.440 --> 17:54.640
other thing is it's very much part of the canonical ecosystem. You start seeing things

17:54.680 --> 18:01.680
like snapcraft and charms and so on and very much ties into all that. Build packs, I didn't

18:03.080 --> 18:07.560
spend too long looking at this one. A lot of you are probably aware of build packs from

18:07.560 --> 18:11.960
the old Heroku days which is where it all started and then Pivotal did their version

18:11.960 --> 18:16.200
and then they merged them together again and now we have cloud native build packs that

18:16.200 --> 18:23.200
build OCI images. The main selling point seems to be that it's easy to use and sort of automatic.

18:23.440 --> 18:27.920
So your build packs, well look at your project, they'll see you've got a Python requirements

18:27.920 --> 18:33.080
dot text or you've got a node package dot jason and try to automatically configure a build

18:33.080 --> 18:39.080
pack to build on top of that so you automatically get a container image out. From playing with

18:39.080 --> 18:46.080
it, it didn't seem to produce very small images. Maybe that was me holding it wrong.

18:46.080 --> 18:50.720
I don't think there's any reason it shouldn't produce small images. It just seems to be,

18:50.760 --> 18:55.800
that's all based on this idea of stacks and the stacks by default aren't that small. It

18:55.800 --> 19:02.800
does definitely feel to me about one size fits all. But yeah, have a look if you like.

19:04.840 --> 19:09.360
One thing I really do like that came out recently is Buildkit and well Buildkit didn't come out

19:09.360 --> 19:13.800
recently, but Dagger came out recently. So Buildkit is the sort of engine behind Docker

19:13.800 --> 19:19.360
build and Buildkit is a lot more powerful than it appears from looking at Docker file.

19:19.560 --> 19:23.560
There's a whole bunch of stuff you can do here about dependencies and resolution and

19:23.560 --> 19:29.160
caching that's really quite powerful. And I think when they built Buildkit, they were

19:29.160 --> 19:34.400
hoping that there'd be much more front ends created on top of Buildkit rather than just

19:34.400 --> 19:41.400
Docker file. But that's not really happened until now with Dagger. And Dagger really tries

19:41.400 --> 19:47.400
to take advantage of the power of Buildkit. I would say Dagger is much more designed for

19:47.440 --> 19:54.440
CI CD. So the selling point of Dagger is to solve this problem that you have in CI CD when

19:54.440 --> 20:01.120
I'm sure you all had like GitHub actions where your action isn't working. So you like chicken,

20:01.120 --> 20:06.000
try this and then try three, try four and you end up with try 26 of commits. Yeah, you've

20:06.000 --> 20:12.200
all been there? Yeah, it's a pain. And that's kind of what Dagger is trying to solve. The

20:12.200 --> 20:16.280
idea being that you can run Dagger locally and it'll build the same as it does locally

20:16.280 --> 20:23.280
as in a GitHub action or Circle CI, et cetera. I don't think this example is very fair to

20:25.440 --> 20:29.200
Dagger because it's actually really large and powerful, but I want to give you some

20:29.200 --> 20:35.320
flavor at least. So in this example, we're building a container, we're giving it a base

20:35.320 --> 20:41.200
image, we're telling it like a directory from the host to include. In this case, we're just

20:41.240 --> 20:48.240
including the MD files, markdown files, sitting the work directory, then telling it to execute

20:49.120 --> 20:56.120
LS and I put in the, I put from LS. So that's kind of what Dagger workflows look like. We're

20:57.800 --> 21:04.480
just half built a container, it's also done something with it. To me, it kind of feels

21:04.480 --> 21:10.240
similar in some ways to Bazel, but a lot simpler, right? Because now we have a build system that

21:10.280 --> 21:17.280
will build an entire sort of organization, my project if you like. I'm sure it does not

21:20.760 --> 21:27.520
offer the same providence and so on guarantees. What I really mean is just that it's designed

21:27.520 --> 21:33.600
for a team to use as opposed to a single person. There is also a bunch of plugins. So the

21:33.600 --> 21:38.520
Dagger working on something called the Daggerverse and that includes plugins, including one for

21:38.560 --> 21:44.560
AppCo. However, having played with it, you're actually better off with a plugin for APKs.

21:44.560 --> 21:51.560
So Dagger can effectively recreate AppCo because you can create a file system or image from

21:52.360 --> 21:58.720
scratch and then just add an APKs using the plugin. In some ways, it will be better than

21:58.720 --> 22:05.720
AppCo because you'll get caching and rebuilds really much faster. So there's quite a strong

22:05.880 --> 22:08.880
argument for using Dagger there instead of AppCo.

22:08.880 --> 22:15.880
Next, how am I doing for time?

22:15.880 --> 22:22.880
Okay, we should be okay. So you don't need to understand all of Nix or even install it

22:24.520 --> 22:30.760
to play with Nix to build Docker images or container images. There's effectively two

22:30.760 --> 22:35.360
approaches. You can use packages to Docker tools or you can use flakes and copy them

22:35.400 --> 22:42.400
into an image. And I should say I have definitely not understood very much of Nix and I didn't

22:42.600 --> 22:49.600
install it. Here is packages.docker tools. So again, it's somewhat similar to Bazel

22:53.040 --> 23:00.040
or something like that. We're specifying the name of the image. We're saying we want the

23:00.440 --> 23:05.320
reddest package inside it and that it should be available at slash bin and mountain of

23:05.320 --> 23:12.320
volume, et cetera. Now, you should be able to build that. I tried building it on my Mac

23:12.760 --> 23:16.800
and it told me it wouldn't build because it required KVM. I don't want to understand

23:16.800 --> 23:23.800
if that's, if there's something I could work around that. Now, I believe we'll create something

23:24.680 --> 23:31.680
that's fully reproducible. So I run twice and it will give me a bit wise identical result.

23:31.760 --> 23:37.080
You should be able to create minimal images. I'm not 100% sure in that one. It takes a

23:37.080 --> 23:42.840
full programming language and you do sort of need to buy into the whole Nix ecosystem,

23:42.840 --> 23:49.840
but it does seem quite a powerful solution. Nix Flakes. So this is entirely stolen from

23:50.840 --> 23:56.320
Mitchell Hashimoto's blog, but it was really quite interesting. So the idea with Nix is

23:56.320 --> 24:02.520
when you install an application, you also get all of the dependencies or particular

24:02.520 --> 24:08.520
version of all its dependencies along with it so that it always works wherever you put

24:08.520 --> 24:14.000
it. So there's no reason that you can't just take the whole file system tree and put it

24:14.120 --> 24:20.120
in a container and it should just work and it does. So the idea is to create a flake

24:20.120 --> 24:25.560
and copy it into an image using a Docker file and that's a pretty simple method and it does

24:25.560 --> 24:31.560
work on my Mac. The whole sort of method is written up by Mitchell Hashimoto at this blog

24:31.560 --> 24:38.560
post. I could show you, but by the time, it is a little bit frustrating because now we

24:39.400 --> 24:46.400
put Docker into the mix, it's reduced the level of reproducibility. I think you should

24:48.560 --> 24:55.160
be able to take minimal images, but there is an issue in that it creates a slightly weird

24:55.160 --> 25:02.160
file system. The app or the entry point is a shell script which includes all the dependencies.

25:02.880 --> 25:09.880
So I guess you get forced to include bash or something. I'm not quite sure that's always

25:10.880 --> 25:17.200
the case or there's a workaround for that. I really need to play more with it. But you

25:17.200 --> 25:22.800
do end up with a weird file system. So the problem with this solution is if you give

25:22.800 --> 25:28.400
it to somebody else and they try and debug it, they might well hit problems because you

25:28.480 --> 25:34.720
do a file system and you've got app and you've got next door. You don't have your usual Etsy

25:34.720 --> 25:41.720
and BIN directors. Okay, so to wrap up, what would I recommend? If you want a big organization

25:43.040 --> 25:50.040
wide solution, if you need provenance, reproducibility and so on, you can totally do that. But do

25:50.240 --> 25:57.000
be aware it can be a bit of a beast. I really like Dagger. I hope it does well. It is a

25:57.000 --> 26:04.000
new solution. So do be aware that it's still being built out. Yeah, it certainly seems

26:04.040 --> 26:11.040
a good solution if you feel a pain in CI CD and I think everybody does. If you have a

26:11.440 --> 26:18.440
smaller project, the first thing I would genuinely look at is like ecosystem specific build

26:18.440 --> 26:23.840
tooling. So like co for go for example. Because that's really simple and you're pretty sure

26:23.880 --> 26:30.080
it's going to work and be low config. There is jib for Java. I've not tried that one,

26:30.080 --> 26:36.080
but that would probably be the first thing I would try if I was doing Java again. Otherwise,

26:36.080 --> 26:40.600
there's nothing wrong with doing a multi-stage Docker build with this full of images. I totally

26:40.600 --> 26:46.000
would recommend looking at this full of images though to get a fully minimal production image.

26:46.000 --> 26:50.920
App Co, yeah, if you want to, if you need a bit more flexibility and creating your sort

26:50.960 --> 26:57.480
of base image, please go and have a look at App Co. And then finally the next stuff, yeah,

26:57.480 --> 27:01.600
that could well be a solution totally if you understand Nix and you've bought into that

27:01.600 --> 27:06.600
ecosystem. Okay, what's the score?

27:06.600 --> 27:11.600
Pretty good there, thank you.

27:11.600 --> 27:15.600
All right.

27:15.600 --> 27:18.600
Thank you.

