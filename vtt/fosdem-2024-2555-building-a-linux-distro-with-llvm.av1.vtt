WEBVTT

00:00.000 --> 00:08.600
Alright, so welcome to my presentation.

00:08.600 --> 00:09.800
I'm Daniel Kulesa.

00:09.800 --> 00:15.760
I'm the founder and primary developer of the Kim and Arlenox project, which is a Linux

00:15.760 --> 00:16.760
distribution.

00:16.760 --> 00:23.440
It's a general purpose Linux distribution with a particular focus on desktop computers

00:23.440 --> 00:30.320
as well as different similar cases, I mean client computer kind of cases like single board

00:30.320 --> 00:31.840
computers and so on.

00:31.840 --> 00:37.800
But since it's a general purpose we are also implementing server purposes and other things

00:37.800 --> 00:42.360
basically like just about any Linux distribution.

00:42.360 --> 00:50.240
Its focus is to be robust as well as to have stronger security hardening than most standard

00:50.240 --> 00:57.040
Linux distributions as well as having good default for things being deterministic so

00:57.040 --> 01:04.400
that you can actually install things using a single process and then it will come out

01:04.400 --> 01:08.560
pretty much the same every time and it will pretty much work out of the box.

01:08.560 --> 01:14.120
It's also supposed to be lightweight and transparent as well as overall pragmatic so not really

01:14.120 --> 01:22.000
focused on one particular thing like many niche projects tend to do.

01:22.000 --> 01:24.720
It uses LLVM as its system tool chain.

01:24.720 --> 01:28.080
It's currently only has LLVM.

01:28.080 --> 01:34.120
Well we do have some GCC builds which are bare metal builds for building new boot for

01:34.120 --> 01:36.440
different single board computers.

01:36.440 --> 01:40.960
That is a general purpose GCC compiler we do not have any right now.

01:40.960 --> 01:47.480
I've actually started some work to introduce GCC as an option but so far I've run into

01:47.480 --> 01:53.400
this very annoying bootstrap back on PowerPC which prevents me from fully introducing it

01:53.400 --> 01:55.040
so far.

01:55.040 --> 02:02.840
So it uses tools from 3BSD as its core user-land which are hardened with the rest of the core

02:02.840 --> 02:06.520
system and it uses muscle as its ellipse of choice.

02:06.520 --> 02:10.160
I'll explain why at a later point.

02:10.160 --> 02:16.080
For package manager it uses APK tools which is known from Alpine Linux but it uses the

02:16.080 --> 02:22.640
next generation of APK tools which is currently under development and not deployed in any

02:22.640 --> 02:23.640
other system.

02:23.640 --> 02:29.760
It uses binary packaging obviously but it also has an option to compile things from source

02:29.760 --> 02:30.760
if you like to.

02:30.760 --> 02:40.040
It has from scratch made fresh build system which creates APK repositories.

02:40.040 --> 02:47.320
It's also sort of intention to have things be bootstrapable so you can compile the system

02:47.320 --> 02:55.400
from scratch from source and bring it up to the same state as it is in already using some

02:55.400 --> 02:59.800
other Linux system as a base.

02:59.800 --> 03:01.880
It can cross compile.

03:01.880 --> 03:06.000
We do not do cross compiling for any official repositories.

03:06.000 --> 03:13.040
All the packages we actually ship, 45 architectures we ship, they are native but there's the option

03:13.040 --> 03:16.680
to cross compile in the build system sort of transparently so it does a lot of things

03:16.680 --> 03:20.840
for you so you don't have to, generally the packaging template doesn't have to do much

03:20.840 --> 03:24.720
to be able to cross compile as long as the build system for the project itself doesn't

03:24.720 --> 03:27.080
have some weird cross compiling issues.

03:27.080 --> 03:29.000
It will sort of work by default.

03:29.000 --> 03:35.960
We do support many architectures including ARCH64, little and big end in 64-bit power

03:35.960 --> 03:44.080
PC, RISC-5 also in 64-bit version only right now and obviously also X8664.

03:44.080 --> 03:50.360
It includes system-wide link time optimization for pretty much all packages I think.

03:50.360 --> 03:56.520
Right now we have about 1500 packaging templates and only about 50 or so have LTO disabled

03:56.560 --> 04:01.000
and some of these are basically false positives like the kernel has a different way to enable

04:01.000 --> 04:07.760
LTO and standard some are things like scripted things and so on.

04:07.760 --> 04:15.000
We also enable subset of UBSAN in production builds set up in trapping mode so that it

04:15.000 --> 04:18.720
does not actually include any runtime in the resulting binaries.

04:18.720 --> 04:25.040
This is mainly used to mitigate signed integer overflows which should become hard crashes

04:25.080 --> 04:30.200
in pretty much all packages unless there are some exceptions where things are currently

04:30.200 --> 04:35.400
broken in a way which cannot be immediately fixed.

04:35.400 --> 04:39.920
We at least use this to keep track of everything which has these kind of issues and fix them

04:39.920 --> 04:41.120
later.

04:41.120 --> 04:47.680
We also try to deploy CFI or control flow integrity mitigation from Clank system-wide

04:47.680 --> 04:54.040
which is a lot harder task because a huge number of software breaks with that.

04:54.040 --> 05:01.040
This is mainly C software where the issue is that many C programmers tend to like having

05:01.440 --> 05:07.160
like a function pointer which has some signature and then they take some function and cast

05:07.160 --> 05:11.880
this function pointer to the original signature and CFI does not like that.

05:11.880 --> 05:16.280
In C this is undefined behavior and people tend to think that it's actually okay because

05:16.280 --> 05:21.040
for example your custom function which you are taking a pointer to is taking pointer

05:21.040 --> 05:25.440
arguments and the original thing is taking void pointer arguments and they think it's

05:25.440 --> 05:30.680
okay because it will get implicitly casted to void but this is like it's still undefined

05:30.680 --> 05:32.040
behavior you shouldn't do that.

05:32.040 --> 05:36.280
You should declare your function with the original signature the one you want to have

05:36.280 --> 05:41.160
and then cast these things within the implementation properly and then you will have no undefined

05:41.160 --> 05:47.480
behavior but people tend to avoid this because they are lazy or whatever.

05:47.480 --> 05:54.480
In any case to get started how I got started it was in early 2021 and it was I decided

05:55.400 --> 06:02.400
to create a build system for Linux distributions called C build which was originally a re-implementation

06:03.760 --> 06:10.840
of the XBPSSRC system from Void Linux which I was using at the time.

06:11.120 --> 06:18.120
It's written from scratch and it's implemented in Python because I sort of got tired of different

06:19.400 --> 06:25.400
distro build systems being written as massive bash scripts which both results in the system

06:25.400 --> 06:31.560
being slow and also the system being difficult to debug and track issues in and also it's

06:31.560 --> 06:37.680
hard to trust these kind of systems when it comes to actually being integrated so you

06:37.720 --> 06:42.880
usually want to delegate things like signing and so on to different places because it's

06:42.880 --> 06:48.480
sort of impossible to tell which things can interact with which other things and which

06:48.480 --> 06:51.680
things run in trusted context and which don't and so on.

06:51.680 --> 06:57.800
So I sort of wanted to avoid all this kind of nonsense and create a system from scratch

06:57.800 --> 07:00.960
which does not have these kind of issues.

07:00.960 --> 07:07.960
So my initial system was Void Linux as I said at the time on PPC64 early architecture.

07:08.520 --> 07:15.520
C build has a sandbox which means the environment in which everything is built is sort of a

07:16.000 --> 07:20.280
container implemented with Linux namespaces.

07:20.280 --> 07:25.600
We try to harden this container as much as possible to restrict what build systems and

07:25.600 --> 07:30.560
so on can do but at the same time allow common software to be built reasonably.

07:30.560 --> 07:35.280
So like there's no network access in the container after some point.

07:35.280 --> 07:41.880
The root file system of the container is read only and it will only write to directories

07:41.880 --> 07:45.240
where it's supposed to write that kind of stuff.

07:45.240 --> 07:52.240
So the sandbox also means that it can be run on any distribution even if the distribution

07:53.240 --> 08:00.240
is actually completely incompatible with ours so it's isolated.

08:01.240 --> 08:05.240
So what does the bootstrap process for the system look like and what it looked like back

08:05.240 --> 08:07.240
in 2021?

08:07.240 --> 08:14.240
There's four stages basically. Stage zero is to bring up the first version of the bootstrap

08:14.240 --> 08:21.240
or the build container which runs using the tool chain from the outside system and you

08:21.240 --> 08:26.440
basically use the outside tool chain to compile all the basic things you need to assemble

08:26.440 --> 08:29.560
the minimal build environment.

08:29.560 --> 08:35.120
This is done with sort of minimal features and also not many compiler flags and so on

08:35.120 --> 08:39.400
so things like LTO are disabled at this point.

08:39.400 --> 08:43.080
We cannot make too many assumptions about what kind of compiler is used on the outside

08:43.080 --> 08:50.080
so we try not to and just assemble sort of an environment which is good enough that it

08:50.400 --> 08:53.360
can be used to build more things.

08:53.360 --> 08:58.280
For stage one we use these generate packages from stage zero built to actually assemble

08:58.280 --> 09:05.000
the container and build the same thing again but using the new packages.

09:05.000 --> 09:09.960
We repeat this twice more. For stage two we enable LTO and basically all the flags we

09:09.960 --> 09:16.960
need which will match the final environment so the result of that is basically what you

09:17.760 --> 09:23.840
want basically equivalence to the final but just for a good measure we use these good

09:23.840 --> 09:30.840
final or almost final binaries to rebuild once more and get a clean environment which

09:30.840 --> 09:34.920
can be used to build everything afterwards.

09:34.920 --> 09:41.920
So what does the environment look like? It's sort of bare minimum packages to build itself

09:42.920 --> 09:49.920
so the container is small enough so it can build itself but also you can install more

09:50.200 --> 09:54.160
dependencies into it depending on what you are building and so on.

09:54.160 --> 09:57.840
Have some build graph and build it over time and so on.

09:57.840 --> 10:02.840
So there's a Lipsy obviously and there's the compiler which is in our case Clank and the

10:02.840 --> 10:04.800
rest of the LWIM suite.

10:04.800 --> 10:11.080
There's the core user and different utilities basically that makes up basically the system

10:11.280 --> 10:14.680
because build systems need to run these and so on.

10:14.680 --> 10:20.360
And there's the package manager which is used to manipulate packages installed within the

10:20.360 --> 10:25.160
build container for different purposes.

10:25.160 --> 10:29.680
It's a small chimera Linux system just containerized.

10:29.680 --> 10:34.920
The containerization is done using the bubble wrap tool which is also used for example by

10:34.960 --> 10:41.960
Flatpak and it provides a minimal interface to the Linux namespace kernel feature which

10:42.560 --> 10:49.000
lets us make these small sandbox containers without requiring much other infrastructure.

10:49.000 --> 10:56.000
The outside host system needs to provide only Python for running C build itself, bubble wrap

10:56.040 --> 11:01.520
and a potentially static build of APK and that's basically all it needs to provide.

11:01.560 --> 11:04.880
Anything else is sort of set up by us.

11:04.880 --> 11:06.440
It runs completely unprivileged.

11:06.440 --> 11:11.600
There's nothing which needs root and you cannot run it as root.

11:11.600 --> 11:13.600
So why use LWIM?

11:13.600 --> 11:19.080
It's a more modern compiler design in GCC and it has many implications.

11:19.080 --> 11:24.280
It has state of the art sanitizers which are in a better shape than in GCC.

11:24.280 --> 11:29.000
GCC does have some of these sanitizers but it tends to be more out of date and things

11:29.040 --> 11:32.600
like CFI for example not present in GCC at all.

11:32.600 --> 11:39.600
It's also much easier to build and bootstrap with it has a relatively standard build system

11:39.600 --> 11:43.720
compared to GCC which is sort of completely custom.

11:43.720 --> 11:49.000
Half auto tools have some other cursed thing.

11:49.000 --> 11:55.040
Also cross building with LWIM is much easier because you only have one compiler and you

11:55.040 --> 12:01.720
only need the specific run times for the different C-sroutes for different arcs.

12:01.720 --> 12:08.720
It also has FIN LTO which actually enables us to deploy LTO system-wide and not fear

12:09.120 --> 12:12.520
it will actually be much of a problem.

12:12.520 --> 12:14.960
It uses far less resources this way.

12:14.960 --> 12:21.960
It's much faster, it's slower than non-LTO build obviously but the overhead is not so

12:22.080 --> 12:25.240
big that we cannot do it.

12:25.240 --> 12:30.400
It also has actually better performance these days which didn't always used to be a thing

12:30.400 --> 12:36.900
but nowadays it tends to be that client tends to perform about 5% faster on average in resulting

12:36.900 --> 12:39.080
binaries than GCC does.

12:39.080 --> 12:44.320
And often it tends to be less buggy in my experience.

12:44.320 --> 12:49.920
As for why not to use LWIM, very occasionally there's worse compatibility with things.

12:49.920 --> 12:56.320
Some things will not compile well with LWIM especially things with very cursed linker

12:56.320 --> 13:00.680
scripts and so on sometimes run into trouble with LWIM.

13:00.680 --> 13:06.560
Some of the supported architectures are kind of less maintained than in GCC which supports

13:06.560 --> 13:13.560
an impressive amount of architectures and overall there's fewer architectures supported.

13:14.560 --> 13:20.560
The LWIM suite as a whole also takes much longer to build because it's in C++ and it's

13:20.560 --> 13:22.840
sort of idiomatic C++.

13:22.840 --> 13:29.840
So on most architectures this is not an issue but for example now RISC-5 Builder which is

13:29.840 --> 13:31.200
not real hardware actually.

13:31.200 --> 13:37.560
We built in QMU user emulation because it's like seven times faster than the best next

13:37.560 --> 13:40.520
real hardware.

13:40.520 --> 13:46.160
It's still very slow and it takes like maybe 10 to 15 hours to actually build a new version

13:46.160 --> 13:49.240
of the toolchain so it's not great.

13:49.240 --> 13:53.840
And very rarely there's worse performance in like runtime performance in some things

13:53.840 --> 13:59.520
so like I think in maybe in some open MP things the state of that is still a little bit worse

13:59.520 --> 14:00.520
and so on.

14:00.520 --> 14:03.400
But it's not a big deal.

14:03.400 --> 14:08.480
Now let's take a look at the toolchain structure of a typical Linux distribution.

14:08.480 --> 14:13.400
We have CRC library which is usually these days almost always G-Lipsy or Muscle.

14:13.400 --> 14:16.760
Other Lipsies do exist but they are very rarely used.

14:16.760 --> 14:20.880
Pretty much nobody uses things like UCLipsy and so on these days.

14:20.880 --> 14:26.600
You have GNU Benutils which provides things like assembler and delinker and manipulation

14:26.600 --> 14:30.000
tools for else files and so on.

14:30.000 --> 14:35.280
Then you have GCC itself which is a CNC++ compiler, plus a compiler frontend for many

14:35.280 --> 14:40.320
different languages, plus a core runtime or well a portion of core runtime because some

14:40.320 --> 14:45.160
of the core runtimes provided by Lipsy, some is provided by GCC.

14:45.160 --> 14:49.920
You have LibGCC also and LibGCCS for the unwinder and so on.

14:49.920 --> 14:55.480
You have the C++ and the library called FlipSTDC++ and that kind of stuff.

14:55.480 --> 15:03.120
You tend to have one build of Benutils and GCC per target.

15:03.120 --> 15:09.240
The user-run API tends to look like you have the built-ins for fallbacks which are in LibGCC.a

15:09.240 --> 15:15.760
static linked plus the CRT and you have the unwinder plus dynamic built-ins in LibGCCS

15:15.760 --> 15:19.680
and the C++ and the library and so on.

15:19.680 --> 15:21.840
And with LVM it looks a little bit different.

15:21.840 --> 15:26.200
You have the compiler linker, assembler, Benutils and everything all in one, all in one suite.

15:26.200 --> 15:27.840
You just compile it all.

15:27.840 --> 15:32.560
The only separate component is the Lipsy which tends to be again G-Lipsy or Muscle.

15:32.600 --> 15:39.120
For G-Lipsy being problematic still so that's the main reason we went with Muscle.

15:39.120 --> 15:43.400
You have one compiler for all your targets and then you only compile the runtimes for

15:43.400 --> 15:45.960
the others.

15:45.960 --> 15:50.360
The API also looks a little bit different but this is not used in most distros because

15:50.360 --> 15:57.000
in most distros LVM acts as a drop-in compiler for GCC.

15:57.000 --> 16:04.440
But with native LVM style ABI you have the built-ins which provide all the LibGCC.a plus

16:04.440 --> 16:11.200
a portion of LibGCCS which is also static linked in this case and lipanwinder.so.1 only

16:11.200 --> 16:15.640
provides the unwinder ABI part of LibGCCS.

16:15.640 --> 16:21.880
So you also have the C++ library which is different but it can live in one process with

16:21.880 --> 16:28.880
LibSTD C++ because LibC++ uses anonymous namespaces in a clever way and that allows

16:28.880 --> 16:35.400
these symbols to mangle differently so it can actually live in one process.

16:35.400 --> 16:40.000
As for ABI compatibility, as I said, lipanwinder implements most of LibGCCS.

16:40.000 --> 16:48.600
So to make a makeshift LibGCCS you basically have to create a shared library of LibClank

16:48.600 --> 16:54.120
built-ins and then link it to lipanwind and this will implicitly pull in all these symbols

16:54.120 --> 16:58.360
and at least in a muscle environment which has no version symbols this will work.

16:58.360 --> 17:01.600
In a G-Lypsy environment it might not.

17:01.600 --> 17:06.320
As I said, LibC++ might be able to live in one process but this actually is only in theory

17:06.320 --> 17:12.680
because you might have to make LibSTD C++ use LibC++ ABI as a base.

17:12.680 --> 17:14.840
It will still conflict otherwise.

17:15.720 --> 17:21.080
G-Lypsy could not build with Clank until recently, now it does but it's still incompatible

17:21.080 --> 17:26.800
with native LVM style ABI because it dynamically openslipslipgccs and therefore we cannot use

17:26.800 --> 17:27.800
it.

17:27.800 --> 17:33.600
Muscle just works and always works so that's okay.

17:33.600 --> 17:37.560
There's another very neat thing in LVM as the allocator called SCUDO.

17:37.560 --> 17:43.680
It's the default allocator on Android and it's a hardened allocator but still a very

17:43.760 --> 17:45.640
high performance allocator.

17:45.640 --> 17:51.480
It has a modular design which is very different from most allocators so it makes very few

17:51.480 --> 17:54.400
assumptions about the environment you can run it in.

17:54.400 --> 18:00.440
We can mix and match these components and configure them differently.

18:00.440 --> 18:05.680
Most allocators tend to assume that you have LSTLS available at this point and they can

18:05.680 --> 18:07.120
just use third local variables.

18:07.120 --> 18:13.480
You cannot do this with Muscle in LibC.so because the dynamic linker doesn't set things up until

18:13.520 --> 18:19.240
later and the dynamic linker and the LibC are the same file so you have to be a little

18:19.240 --> 18:20.840
bit clever about it.

18:20.840 --> 18:27.560
We replaced the standard allocator with SCUDO in our system because it's much faster.

18:27.560 --> 18:33.640
For example, LTO linking of Useld takes third of the time now so that's quite a big difference.

18:33.640 --> 18:40.360
The main reason for this is because Muscle's stock allocator uses a global lock for consistency

18:40.520 --> 18:46.080
but this sort of pegs it to one thread so it's not great.

18:46.080 --> 18:51.840
We have no LSTLS so we just put a pointer directly in the P-thread structure and implement

18:51.840 --> 18:54.960
a custom thing around it and that works.

18:54.960 --> 19:01.800
The main drawback is very high virtual memory with the standard primary allocator is about

19:01.800 --> 19:08.800
8 GB of process which is kind of insane but with the primary 32 allocator we use it's

19:09.520 --> 19:16.520
only about 120 GB which is still a lot more than most allocators but I have plans to try

19:16.520 --> 19:18.880
to tune it further.

19:18.880 --> 19:25.600
Cross compilation, well C-built can cross compile.

19:25.600 --> 19:31.320
Cross targets need cross runtimes which we do compile but it has a little bit tricky

19:31.320 --> 19:35.880
bootstrap if you need to do it without pre-existing system.

19:35.960 --> 19:43.000
The cross compiling environment needs to include compiler RT, Muscle, Lipanwine and

19:43.000 --> 19:46.000
Libc++ and its ABI library.

19:46.000 --> 19:51.320
This is all installed into one directory which is treated as the system route for the cross

19:51.320 --> 19:53.800
target and that's how you use it.

19:53.800 --> 19:55.680
It's pretty much standard.

19:55.680 --> 20:01.320
To bootstrap this kind of thing you first build compiler RT or well a small part of

20:01.360 --> 20:06.440
compiler RT the built-ins plus CRT begin and end files.

20:06.440 --> 20:13.440
You do this by telling CMake to force static lips only to get rid of compiler executable

20:14.720 --> 20:20.120
checks which will not work at this one because it doesn't have the complete toolchain available

20:20.120 --> 20:24.360
and you disable the sanitizers so you can compile them later but to this early point

20:24.360 --> 20:30.360
you only have to compile these built-ins and the CRT base.

20:30.360 --> 20:34.200
It requires lipcy headers for that still so you just give it some lipcy headers, you

20:34.200 --> 20:40.120
just take Muscle and tell it to install lipcy headers in a temporary directory and then

20:40.120 --> 20:44.200
give it to that and that works.

20:44.200 --> 20:48.360
Then once you have this you can actually build and install a lipcy itself.

20:48.360 --> 20:55.360
It needs only the above parts.

20:55.600 --> 21:00.800
Once you are done with that you can build and install lipanwines plus lipcy plus plus

21:00.800 --> 21:05.480
together which is best to do it together because you can do it together and if you do it together

21:05.480 --> 21:11.680
you actually remove yourself some trouble of having these things interact at build time

21:11.680 --> 21:17.480
so you just let it to build all three components and you're good to go.

21:17.480 --> 21:23.200
Once you still need to explicit no STD lip and CXS flags because you don't have the STD

21:23.240 --> 21:29.560
lip available at this point and the build system will otherwise assume it and break.

21:29.560 --> 21:34.760
Now once you have this you can actually compile the rest of compiler RT.

21:34.760 --> 21:41.040
This is mainly the sanitizers that's what you typically want.

21:41.040 --> 21:44.360
Once you have all this in assist route this is the full cross-run time you need and you

21:44.360 --> 21:49.480
can happily cross-compile anything for this target.

21:49.480 --> 21:55.480
As for practical experiences with LVM as I already mentioned before it makes system

21:55.480 --> 21:58.160
wide LTO actually possible.

21:58.160 --> 22:04.120
It has far lower resort usage this way compared to GCC LTO.

22:04.120 --> 22:09.680
For example at work I'll come currently on a break but I'm coming back to work soon.

22:09.680 --> 22:15.680
At work I work on webkit and when I compile webkit with GCC LTO it climbs the memory usage

22:15.680 --> 22:20.280
climbs to 80 gigabytes of RAM and it runs out of memory and crashes.

22:20.280 --> 22:24.520
So with thin LTO and clang this does not happen.

22:24.520 --> 22:30.840
The resort usage stays firmly within some 30% extra overhead compared to standard build

22:30.840 --> 22:34.600
so that's very nice.

22:34.600 --> 22:39.040
Of course there's the security hardening side which I already mentioned we deploy a subset

22:39.040 --> 22:44.000
of UBSAN and CFI is used to where we can use it.

22:44.160 --> 22:49.960
Other things we market as to do and maybe fix things later but the entire core user

22:49.960 --> 22:56.000
run is harder in this way for example.

22:56.000 --> 23:01.600
As for toolchain patching in the distribution this is mostly in line with GCC but still

23:01.600 --> 23:05.680
more than I would really like it's about 30 patches we maintain downstream.

23:05.680 --> 23:13.920
I would like to upstream some of them but I need to clean them up first.

23:14.840 --> 23:21.360
Distributions tend to be geared towards GCC style runtimes so LLVM is often reduced

23:21.360 --> 23:26.960
to being sort of a drop in compiler for GCC which is a bit of a shame.

23:26.960 --> 23:32.120
I think more people should use the native runtimes and actually test these properly

23:32.120 --> 23:36.880
on Linux not just on systems where they are native.

23:36.880 --> 23:43.320
And also the build system of LLVM can unfortunately sometimes be a big unpenetrable mass.

23:43.720 --> 23:50.320
It's partially due to CMake itself being kind of terrible but it could still be a bit better.

23:52.640 --> 23:58.080
Also major releases of LLVM can be kind of daunting to update to because they pretty

23:58.080 --> 24:03.280
much universally and always break some compilation of something.

24:03.280 --> 24:05.360
This is usually for good reasons.

24:05.360 --> 24:13.880
For instance recently LLVM actually switched some invalid function pointer cache to be

24:13.880 --> 24:21.520
errors by default as well as disable KNR style function declarations without return type

24:21.520 --> 24:23.520
and so on.

24:23.520 --> 24:26.520
This would be fine and this is actually a very good thing which should have happened

24:26.520 --> 24:29.600
20 years ago but it didn't.

24:29.600 --> 24:36.120
Now when this happened we actually still run into tons of projects which break on this

24:36.120 --> 24:43.000
and worse it actually breaks in ways which we do not like.

24:43.000 --> 24:45.880
Particularly for example GNU Auto Tools.

24:45.880 --> 24:50.280
Lots of projects with GNU Auto Tools tend to be generated with ancient versions of Auto

24:50.280 --> 24:53.840
Tools because they ship these pre-generated config files.

24:53.880 --> 25:02.640
Once these use KNR style functions for different checks and when this happens the compilation

25:02.640 --> 25:08.920
of the const test will fail and it will get treated as not having some feature which will

25:08.920 --> 25:13.800
happen implicitly and you will lose that feature and this might sort of you know.

25:13.800 --> 25:21.640
So what we did is basically switched to always regenerating Auto Tools files on any project

25:21.640 --> 25:23.400
where we can do it.

25:23.400 --> 25:29.880
Just to never trust these pre-generated config files because it's really bad to trust them.

25:29.880 --> 25:34.640
This kind of stuff happens and as I said it's usually for a good reason and it's a really

25:34.640 --> 25:40.000
good thing that LLVM is actually pushing these things which should have been done 20 or 30

25:40.000 --> 25:45.600
years ago but yeah it's still a little bit of a pain.

25:45.600 --> 25:50.720
On the other hand the community of LLVM has been very good and helpful in my experience

25:50.800 --> 25:58.520
and especially shout outs to Math Gray who has been writing very nice blog posts about

25:58.520 --> 26:06.280
all sorts of things and also has been extremely helpful on IRC and in different places with

26:06.280 --> 26:12.480
actually figuring out different issues of the tool chain and so on.

26:12.480 --> 26:17.360
Well in conclusion it's generally a really nice tool chain and there are some pain but

26:17.440 --> 26:20.680
in general it's nice and practical.

26:20.680 --> 26:26.880
It can build just about any Linux software which is neat especially given how many extensions

26:26.880 --> 26:33.440
and so on GCC has and it should not be reduced to just the drop in thing for GCC use on Linux

26:33.440 --> 26:37.400
it should be treated as a standalone thing more I think.

26:37.400 --> 26:41.080
Thank you for listening and if you have any questions now is the time to ask.

26:47.360 --> 26:54.360
How do you schedule package fields on your builders because if you remember a thing I

26:55.960 --> 26:59.800
would tell you it may have been client-based oil and fuel or something like that.

26:59.800 --> 27:06.160
Yeah basically what happens is that you push your thingy or change to the C-port GitHub

27:06.160 --> 27:11.600
repo and then we have a build bot which will pick up these changes and then schedule them

27:11.600 --> 27:15.520
all into the different workers which will build them and then upload them to the final

27:15.520 --> 27:16.520
repo server.

27:16.680 --> 27:21.120
So one worker is just building one package at a time?

27:21.120 --> 27:26.560
Yeah basically yeah it's good enough for the time being it's sort of it may receive a

27:26.560 --> 27:33.560
batch and the build system will sort of sort it and then do the thing it needs to do.

27:35.560 --> 27:36.560
Yeah?

27:36.560 --> 27:40.560
Do we have any idea about the size of the thing?

27:40.560 --> 27:44.560
The minimum build how big is the question and what kind of unit are you using?

27:44.600 --> 27:46.600
The size of what?

27:46.600 --> 27:47.600
Of the system?

27:47.600 --> 27:48.600
Yeah.

27:48.600 --> 27:50.600
Do you have the minimal system?

27:50.600 --> 27:53.600
A minimal container kind of system?

27:53.600 --> 27:54.600
Oh yeah sure.

27:54.600 --> 28:01.600
So he was asking about the size of the minimal system and it depends on the case really like

28:02.600 --> 28:09.600
a very minimal container kind of build is about 7 megabytes while a bootable system is

28:09.640 --> 28:15.440
maybe I don't know 50 or 60 if you really make it small but then you pull in Linux firmware

28:15.440 --> 28:17.440
and then it grows to 500.

28:17.440 --> 28:21.440
So yeah there was one more question in there.

28:21.440 --> 28:27.080
If you get significant, do you think the performance drop is enabled like a partial

28:27.080 --> 28:28.080
input?

28:28.080 --> 28:35.080
The question was if there's any significant performance drop to enable in these sanitizers?

28:36.080 --> 28:42.080
No there isn't because most of UBSAN is very cheap and incurs basically practically no

28:42.080 --> 28:45.080
runtime overhead in practice.

28:45.080 --> 28:52.080
As for CFI it depends on the specific software but in most cases also not.

28:52.080 --> 28:57.400
As for other things it really depends on the sanitizers but the stuff we need is pretty

28:57.400 --> 28:59.400
much always very lightweight.

28:59.400 --> 29:00.400
Yeah?

29:00.400 --> 29:06.400
There's a question in the matrix room so coming from somewhere online I'll just read out now.

29:06.400 --> 29:11.400
I wonder how many, which packages happened to avail if you have no network access at

29:11.400 --> 29:14.400
all in the build container after your preparation step?

29:14.400 --> 29:15.400
Well.

29:15.400 --> 29:20.400
All build apps from a known mirror and especially before starting any upstream provided scripts?

29:20.400 --> 29:25.720
Pretty much anything written in CRC++ tends to be okay and require no network access when

29:25.720 --> 29:27.400
you build it.

29:27.400 --> 29:33.900
What does require network access is pretty much anything written in Rust Go or like some

29:33.900 --> 29:41.900
JavaScript stuff or save some big software like LibreOffice density download things from

29:41.900 --> 29:43.400
Internet by default.

29:43.400 --> 29:45.400
We do have workarounds for that.

29:45.400 --> 29:52.400
For Rust we have a step which is run immediately after installing other dependencies which

29:52.400 --> 29:57.900
will pre-download and pre-vendor all these dependencies into the three and then from

29:57.900 --> 30:04.400
that point onwards which will disable network access for the rest.

30:04.400 --> 30:05.400
Anything else?

30:05.400 --> 30:06.400
Oh yeah, here.

30:06.400 --> 30:10.400
I have a question about system-wide LPO.

30:10.400 --> 30:18.400
Is that also included in providing a bitcode for 10 libraries?

30:18.400 --> 30:21.400
So the question was about bitcode for static libraries.

30:21.400 --> 30:24.400
Yes, we do ship static libraries in bitcode format.

30:24.400 --> 30:28.900
The main issue with that is they tend to be fairly big because you cannot strip the back

30:28.900 --> 30:30.400
info from them.

30:30.400 --> 30:36.900
But what we do is split static libraries into individual sub-packages so you don't install

30:36.900 --> 30:40.400
them by default unless it's needed.

30:40.400 --> 30:46.400
But you can still install these static libraries when you want them.

30:46.400 --> 30:49.400
Anything else?

30:49.400 --> 30:50.400
Yeah?

30:50.400 --> 30:54.400
Well, is this version not for a daily driver?

30:54.400 --> 30:58.400
Well, I'm running it on this laptop, for example.

30:58.400 --> 31:06.400
I'm running it on my workstation and my other workstation which are Arch64 and PP64LE systems.

31:06.400 --> 31:11.400
There's other people who run this and have the main issue.

31:11.400 --> 31:15.400
It's really like a lack of some software at this point.

31:15.400 --> 31:21.400
It's still much bigger than any niche distribution or has been at this point.

31:21.400 --> 31:27.400
There's 1500 or 1600 templates which is one template for one software.

31:27.400 --> 31:34.400
And we even include some really major big things like LibreOffice or Chromium and Firefox

31:34.400 --> 31:40.400
and basically all this kind of stuff.

31:40.400 --> 31:42.400
Okay, thank you.

31:45.400 --> 31:46.400
Thank you.

