WEBVTT

00:00.000 --> 00:02.000
Thank you.

00:02.000 --> 00:21.360
This is a QR code for the slides and also all of the talks I reference in this talk.

00:21.360 --> 00:27.360
And yeah, thank you Theo for organizing the poll in Raku Devroom.

00:27.360 --> 00:29.880
I'm going to talk about, you can all hear me okay?

00:29.880 --> 00:31.240
Yeah, perfect.

00:31.240 --> 00:36.360
I'm going to talk about Pearl at PayProp, which is a company I work for, an established company,

00:36.360 --> 00:40.560
been around for almost 25 years now.

00:40.560 --> 00:45.760
And briefly about me, I don't normally do this, but I see a few faces I don't recognize

00:45.760 --> 00:50.520
and I'm sure people don't recognize me as well, so I thought I would do this.

00:50.520 --> 00:55.240
I'm a senior dev and head of processing at PayProp.

00:55.240 --> 00:58.080
I've been there for 10 years.

00:58.080 --> 01:00.760
I've been a developer for just over 20 years.

01:00.760 --> 01:03.920
I've worked with various languages, but mostly Pearl.

01:03.920 --> 01:07.360
But I've only worked for three companies in the time I've been in that 20 years, so I've

01:07.360 --> 01:12.840
kind of seen tech stacks grow and shrink and change.

01:12.840 --> 01:18.840
I'm a C-Pone contributor, so Lijo, I'm a C-Pone, Meta-C-Pone.

01:18.840 --> 01:23.520
And I'm a London and Swiss Pearl and Raku workshop organizer, so come and talk to me

01:23.520 --> 01:25.680
if you're interested in any of those.

01:25.680 --> 01:29.120
We're searching for a venue for this year's London Pearl workshop, so if you have any

01:29.120 --> 01:33.600
ideas, come and talk to me.

01:33.600 --> 01:38.160
And I'm a regular speaker at other Pearl workshops and conferences, and often I'm helping out

01:38.160 --> 01:41.160
with the video.

01:41.160 --> 01:42.640
And I occasionally blog on Pearl.

01:42.640 --> 01:48.480
I prefer to do long form articles rather than technical kind of, this is how you use this

01:48.480 --> 01:50.480
module kind of posts.

01:51.480 --> 01:56.280
And I run the Pearl events Instagram account, but that's about the limit of my social media

01:56.280 --> 01:57.280
interaction.

01:57.280 --> 02:02.560
And I'm a Fosdum Newsbie, so my first time here.

02:02.560 --> 02:06.920
We usually have a work event that runs at this time of year, so it always clashes with

02:06.920 --> 02:10.680
Fosdum, so I've never managed to make it, so this is the first time it hasn't clashed

02:10.680 --> 02:15.640
with Fosdum.

02:15.640 --> 02:16.760
So about paper op.

02:17.760 --> 02:21.640
That's what kind of what we look like, the public facing part of the site at least.

02:21.640 --> 02:27.840
We're a payment and reconciliation platform for the residential letting industry.

02:27.840 --> 02:34.120
And we kind of, our core business value is we turn things like this, and this is one

02:34.120 --> 02:35.520
of the nicer ones to deal with.

02:35.520 --> 02:40.960
This is a Swift format into things like this.

02:40.960 --> 02:47.800
So we put interfaces and automation on tank consuming payment reconciliation flows.

02:47.800 --> 02:54.040
And this literally saves our customers hours, days, weeks of time, so we're really, really

02:54.040 --> 02:55.040
useful to them.

02:55.040 --> 03:00.880
The key night of you might see CGI bin script.cgi in that URL.

03:00.880 --> 03:06.640
So yeah, we've been around for over 20 years, so we have some old code, bit of an understatement

03:06.640 --> 03:08.760
in places.

03:08.760 --> 03:14.920
But the pearl we are using is relatively modern, 532.

03:14.920 --> 03:20.320
And we build our own pearl, and we don't use the vendor supplied pearl or the system pearl.

03:20.320 --> 03:22.040
We don't do anything special with it.

03:22.040 --> 03:27.160
We could in theory compile it with different flags, but we don't do that.

03:27.160 --> 03:31.800
So we get the defaults, which means we don't get things like iThreads, because if you use

03:31.800 --> 03:35.760
vendor supplied pearl, you get things you probably don't need.

03:36.760 --> 03:40.280
Yeah, the key is that it's not the system pearl.

03:40.280 --> 03:45.960
So we're not kind of tied to any particular version of an OS or package or whatever.

03:45.960 --> 03:50.560
And we can apply updates and patches as necessary.

03:50.560 --> 03:52.680
We should be on 538 by now.

03:52.680 --> 03:55.160
We tend to trail a major version.

03:55.160 --> 03:59.600
I've been spread a bit thin, so we haven't managed to get to latest, but that's on the

03:59.600 --> 04:01.360
roadmap for this year.

04:02.360 --> 04:06.160
Yeah, and it gives us dependency control, which is critical.

04:06.160 --> 04:09.880
If you've been paying attention the last couple of weeks, there's been a couple of

04:09.880 --> 04:16.400
critical CVEs against a couple of spreadsheet passing modules, so we could get those updates

04:16.400 --> 04:17.640
out quite quickly.

04:19.640 --> 04:25.400
Loose coupling, so yeah, like I said, not tied to the OS or anything like that.

04:25.400 --> 04:26.720
And the key is it's everywhere.

04:26.720 --> 04:31.680
So we have the same version of pearl, the same version of modules from dev through CI

04:31.680 --> 04:34.480
staging demo all the way to production.

04:34.480 --> 04:38.800
So otherwise you get interesting debugging problems.

04:38.800 --> 04:45.960
And while the issues and challenges around that, well, probably the ones you've all heard,

04:45.960 --> 04:52.600
you know, still use pearl or even what is pearl, and the bus factor, which is, you know,

04:52.640 --> 04:56.440
becoming a problem with some of the pearl dependencies.

04:59.000 --> 05:03.440
So yeah, it's a 20-year-old, 22-year-old app, so we are in the process of migrating

05:03.440 --> 05:05.640
from CGI.pm to Modulicious.

05:05.640 --> 05:12.040
A 20-year-old app has some legacy, a bit of an understatement really.

05:12.040 --> 05:17.520
This is an ongoing task, and we're about two-thirds complete in terms of number of requests to

05:17.520 --> 05:18.640
the site.

05:19.640 --> 05:25.840
We have a lot more pages than we really use after 20 years.

05:25.840 --> 05:31.200
Kind of inevitably happens that people write features and functionality that end up not

05:31.200 --> 05:37.160
being used, and we've got hundreds of pages, and really only 20% of them are actively used.

05:37.160 --> 05:41.840
So a lot of them will never actually end up getting converted.

05:41.840 --> 05:46.760
And one of the ways we did this in one of our other apps is using this plugin from Modulicious.

05:46.760 --> 05:53.200
And we decided not to do this with PayProp because we're using Apache on the front end

05:53.200 --> 06:00.800
anyway, so we can kind of proxy to a Modulicious server or just run exec CGI if it's CGI script.

06:00.800 --> 06:05.920
So we're not doing a kind of serving the CGI scripts from Modulicious using a plugin.

06:05.920 --> 06:08.880
There's no real value there, to be honest.

06:08.880 --> 06:11.280
So that's kind of what the setup is.

06:12.280 --> 06:18.800
I actually gave a talk about this almost a decade ago, so there's a link there to that talk,

06:18.800 --> 06:23.040
which has some suggestions for how you can do this if you're using CGI.

06:23.040 --> 06:26.240
You want to use Modulicious, what the options are.

06:26.240 --> 06:32.560
But it was 10 years ago, so it's a little bit out of date now, because Modulicious moves

06:32.560 --> 06:40.800
fast, and it is one of the challenges in using it because they say that you can always count

06:40.800 --> 06:45.960
on backwards compatibility, but they will deprecate and remove features within a three-month

06:45.960 --> 06:49.400
window, which is not really backwards compatibility.

06:49.400 --> 06:55.520
So you just have to be aware that if you haven't done an update in a while, things might break.

06:59.120 --> 07:01.240
And we're adding an ORM.

07:01.240 --> 07:06.600
And I know this can be a contentious issue, which I kind of find surprising.

07:06.600 --> 07:10.120
I'm just title writing this kind of stuff.

07:10.120 --> 07:15.520
And this is a simplified, about as simple as the query you can do.

07:15.520 --> 07:19.880
So you select some columns from the table, prepare the query, make sure you have the error handling,

07:19.880 --> 07:22.240
execute it, grab a hash ref.

07:22.240 --> 07:30.000
I just want to write that more descriptive.

07:30.000 --> 07:36.120
All the stuff we can get for free is there.

07:36.160 --> 07:38.560
And we can still drop down to vanilla SQL if we want.

07:38.560 --> 07:39.560
And we do do that.

07:39.560 --> 07:45.200
We have some pretty hairy reporting queries, and we're not writing them in ORM speak, because

07:45.200 --> 07:46.960
they're big enough already.

07:46.960 --> 07:55.080
If you start using the DSL of your ORM, they become an obfuscation.

07:55.080 --> 08:00.720
And the reason we're doing that is it allows us to kind of isolate some of the legacy issues

08:00.720 --> 08:01.720
in the schema.

08:01.720 --> 08:05.800
Again, 20-year-old app, organically growing schema, you can have some issues like this.

08:06.800 --> 08:13.120
And we can kind of nicely abstract them away in the ORM that we're using.

08:13.120 --> 08:19.200
Put this down as stuff hack and use says, you know, just fix your schema and things will

08:19.200 --> 08:20.760
break and you might see it.

08:20.760 --> 08:25.760
And it's like, no, we're not going to risk the business by breaking stuff.

08:25.760 --> 08:27.320
We don't move fast and break things.

08:27.320 --> 08:30.960
You know, we want to keep our customers happy.

08:30.960 --> 08:34.160
And then another suggestion is, well, why don't you write your own?

08:34.160 --> 08:36.040
But why would you do that?

08:36.040 --> 08:41.240
You know, we could abstract all our logic into an ORM, but it'd be half done one full of

08:41.240 --> 08:44.760
the bugs that all of the available ones have kind of already ironed out anyway.

08:44.760 --> 08:52.000
And yeah, we're using DRX class.

08:52.000 --> 08:55.880
Very feature-rich, but not dogmatic about its use.

08:55.880 --> 09:03.000
It's like, say, you can use it in ways you want to use it.

09:03.000 --> 09:08.640
Some of the issues and challenges around that, well, there's a learning curve, a big learning

09:08.640 --> 09:12.360
curve, especially if you haven't used an ORM before.

09:12.360 --> 09:14.200
But the manual is very good.

09:14.200 --> 09:18.280
Lots of stuff on the web you can find about how to do, you know, quite bespoke things

09:18.280 --> 09:19.280
with it.

09:19.280 --> 09:26.200
Currently, I say unmaintained, I would say stable rather than maintained.

09:26.200 --> 09:31.600
There are talks happening to kind of address this because it's a backlog of patches that

09:31.600 --> 09:34.520
could be applied and that kind of thing.

09:34.520 --> 09:40.880
And I did talk about this, I want to say, six years ago, using a legacy schema with the

09:40.880 --> 09:49.480
big class and how you can address some of those issues that you might have in your schema.

09:49.480 --> 09:52.720
Business objects, the model.

09:52.720 --> 09:58.160
So the older code is kind of a procedural mashup of business logic, database access,

09:58.160 --> 10:00.400
new logic, and so on.

10:00.400 --> 10:03.880
So it's all kind of smushed into the same layer.

10:03.880 --> 10:06.320
The newer code we're factoring into business objects.

10:06.320 --> 10:09.720
And the key is that the business objects are our model.

10:09.720 --> 10:11.920
Our ORM is not our model.

10:11.920 --> 10:16.240
People often kind of conflate the two.

10:16.240 --> 10:21.920
And the reason we're doing it is to get all of this stuff.

10:21.920 --> 10:25.680
If you're doing object-oriented coding properly, you get all of this really nice stuff.

10:25.680 --> 10:28.880
It's not just calling a method on an instance of a class.

10:28.880 --> 10:35.920
You get really powerful, useful things.

10:35.920 --> 10:38.800
And we're using Moose.

10:38.800 --> 10:44.360
And we were previously using mouse, but we're kind of moving to Moose reasons that I won't

10:44.360 --> 10:46.240
go into here.

10:46.240 --> 10:48.840
Karina is one to eventually look at.

10:48.840 --> 10:53.400
That's been added to the core in 538, the early version.

10:54.400 --> 11:00.280
Ovid's going to talk about that a bit later, so I won't go into that too much.

11:00.280 --> 11:03.320
But just a quick example, this is kind of the thing we're doing.

11:03.320 --> 11:07.840
We're dealing with payments, so we have this incoming payment class, and it has an attribute

11:07.840 --> 11:13.800
that references a bank statement, so we're having type constraints.

11:13.800 --> 11:17.920
So we can properly constrain that it has to be an object of this type with an ID, and

11:17.920 --> 11:21.080
we can throw a useful exception if we try and put something in there that shouldn't be

11:21.080 --> 11:24.520
in there.

11:24.520 --> 11:26.480
And then we can use the tell-on-ask principle.

11:26.480 --> 11:32.120
We can say fail that payment, and then the logic is in one place.

11:32.120 --> 11:36.320
And we're throwing exceptions if things aren't in the right state, and then we're delegating

11:36.320 --> 11:39.800
to the bank statement object to then fail its payment.

11:39.800 --> 11:46.840
So it's all nicely isolated, easy to test.

11:46.840 --> 11:49.040
So yeah, Moose, again, what are the issues and the challenges?

11:49.040 --> 11:53.240
Well again, the learning curve, if you've not used much object-oriented programming,

11:53.240 --> 11:56.640
this is a big paradigm shift.

11:56.640 --> 12:00.360
But I think it's worth it, because I think Moose is one of the best object systems available

12:00.360 --> 12:02.680
across any language.

12:02.680 --> 12:08.640
And then you add the mop, meta-object programming, and you can use introspection and everything.

12:08.640 --> 12:12.720
Pearl's very powerful about introspection.

12:12.720 --> 12:15.480
And there's been multi-day courses at Pearl Conference that's talking about Moose, so

12:15.480 --> 12:20.120
it's impossible for me to even scratch the surface in a small section of a 20-minute

12:20.120 --> 12:23.720
talk.

12:23.720 --> 12:27.520
People often talk about the slow startup if you're using some of these frameworks and

12:27.520 --> 12:32.400
systems, but if it's in a persistent process, a modulator server, that's not an issue.

12:32.400 --> 12:35.100
You load it once, it's loaded.

12:35.100 --> 12:39.320
If it's on the command line, well yeah, it used to be slow, but now it's things have

12:39.320 --> 12:46.400
caught up, and you're probably running those command line scripts once in a blue moon anyway.

12:46.400 --> 12:49.560
CGI scripts, we do use some of this, but we lazy load.

12:49.560 --> 12:55.440
So these are pages that are taking a couple of seconds to run their commands anyway, so

12:55.440 --> 13:01.480
the compile time of loading some of those subjects is a tiny percentage of that anyway.

13:01.480 --> 13:05.800
Yeah, mutable state, that's my technical debt.

13:06.360 --> 13:10.600
It's one of the things you learn, you know, mutable state is bad, so all our new code

13:10.600 --> 13:17.560
and your objects are immutable objects.

13:17.560 --> 13:21.320
Refactoring and regression testing, and I'm talking about beyond unit and integration

13:21.320 --> 13:26.960
testing because that's kind of the easy stuff.

13:26.960 --> 13:30.800
We're adding this for all new code, and mind we do refactoring, we're making sure there's

13:30.800 --> 13:35.760
test coverage there and addressing any gaps.

13:35.760 --> 13:42.160
But what about those critical business scripts that have existed forever and have no test

13:42.160 --> 13:46.000
coverage and basically run the business?

13:46.000 --> 13:53.680
I mean, how do you adjust bootstrapping problem of refactoring so you can work easy with them

13:53.680 --> 13:57.080
but there's no tests, but you don't want to refactor them because there's no tests, it's

13:57.080 --> 14:01.360
kind of a catch-22 situation.

14:02.360 --> 14:10.600
Well, this is Pearl, so we've got some useful features we can use to work around that.

14:10.600 --> 14:16.680
One of the frameworks we've come up with is we are creating override libraries that we

14:16.680 --> 14:25.880
pass into scripts that allows us to override various functions at various times in the

14:25.880 --> 14:28.240
lifecycle of that script that runs.

14:28.240 --> 14:35.040
So here we are overriding the call to file slippers read text method by saying run this

14:35.040 --> 14:40.600
script with this override library path and then we have these various blocks that will

14:40.600 --> 14:44.840
override calls so we can kind of monkey patch things.

14:44.840 --> 14:52.400
So we can add as much test coverage as we need and then start changing the script.

14:52.400 --> 14:57.600
So that's kind of an example of how we do it, a bit down in the weeds, but I would encourage

14:57.600 --> 15:01.400
you to watch this talk by Nick.

15:01.400 --> 15:05.360
He talked about this at the Pearl and Racket conference last year.

15:05.360 --> 15:11.840
It goes into all the details of how you can do this, which blocks you can use to run when,

15:11.840 --> 15:16.960
how it works and some of the issues around doing that because you're actually adding

15:16.960 --> 15:23.160
technical debt when you do this, but we need that test coverage there.

15:23.160 --> 15:28.120
So the aim is get the test coverage in place, the fact of the scripts, the fact of the test

15:28.120 --> 15:31.680
coverage, we're in a better place.

15:31.680 --> 15:35.640
This has been critical for some of the scripts we have because I mean they literally run

15:35.640 --> 15:40.800
the business and they literally have no test coverage while they have test coverage now.

15:40.800 --> 15:47.680
Like I said, we don't move fast and break things.

15:47.680 --> 15:48.680
Contributing to C pan.

15:48.680 --> 15:50.960
So yeah, we actively encourage contributions to C pan.

15:50.960 --> 15:55.480
These are all the distributions that we've either written or taken over maintenance of

15:55.480 --> 16:00.880
in the last decade, which is the time I've been a pay prop.

16:00.880 --> 16:03.920
Stuff like some modulus plugins.

16:03.920 --> 16:09.160
So there's this plugin for NMIT, modulus that allows you to profile your routes using NMIT

16:09.160 --> 16:10.160
prof.

16:10.160 --> 16:11.160
It's really useful.

16:11.160 --> 16:14.680
I wrote some of this OAuth 2 server stuff.

16:14.680 --> 16:20.680
If you've ever used OAuth 2 and tried to implement server side stuff, it's a fun game.

16:21.160 --> 16:25.000
That hopefully makes it a bit easier.

16:25.000 --> 16:27.280
Third party payment libraries.

16:27.280 --> 16:31.560
We interact with third party payment providers so we've written some stuff.

16:31.560 --> 16:34.160
Go Caldlis do direct debit in the UK.

16:34.160 --> 16:35.680
TrueLayer is a new opencomer.

16:35.680 --> 16:41.840
They're using the open banking spec so I think they're going to get quite big in the coming

16:41.840 --> 16:42.840
years.

16:42.840 --> 16:50.080
And other stuff, so we maintain CGI.pm because we still have CGI scripts.

16:50.280 --> 16:57.280
We can maintain un-maintained libraries, Google Maps stuff and all that kind of stuff.

16:57.280 --> 17:04.800
The issues and challenges around that, well, the pool of contributors to C pan is shrinking.

17:04.800 --> 17:08.840
Libraries for newer services and APIs don't exist.

17:08.840 --> 17:15.720
Often you'll find third party libraries for languages except Pearl, which is a shame.

17:15.840 --> 17:20.840
Modern APIs are restful and easy to create a third party library for.

17:20.840 --> 17:24.680
We're happy to throw somebody at it for a week or two, which is what we did with the

17:24.680 --> 17:25.680
TrueLayer one.

17:25.680 --> 17:31.160
They threw me at it for a week and there's one on C pan.

17:31.160 --> 17:35.440
Navigating around IP issues, well, that encourages to decouple our code.

17:35.440 --> 17:40.760
So that's actually quite a good thing.

17:40.760 --> 17:44.360
And finally, hiring devs new to Pearl.

17:44.400 --> 17:50.200
I say Pearl has been on the plateau of productivity for quite a while.

17:50.200 --> 17:54.880
Those that left it a long time ago don't know the current ecosystem.

17:54.880 --> 17:59.320
But more than a generation removed from even Pearl 5.

17:59.320 --> 18:07.320
Pearl 1 was released in 1987 and actually probably Larry was prototyping it a long time before that.

18:07.320 --> 18:12.480
510, which can be considered modern Pearl, there are people starting a university now

18:12.600 --> 18:15.600
that were born after 510 came out.

18:15.600 --> 18:22.600
But it's still in a lot of places and I know that because we've interviewed people.

18:22.600 --> 18:24.880
Some of these users can't talk about it.

18:24.880 --> 18:29.080
Banks, the fangs, I won't emphasize which letter in the fangs, but we know there's people

18:29.080 --> 18:32.200
using Pearl in these places.

18:32.200 --> 18:36.200
So I think the rumors of Pearl's demise are greatly exaggerated, but it's kind of a known

18:36.200 --> 18:38.560
unknown at this point.

18:38.640 --> 18:42.640
And it's still be using Greenfield projects, so the system that Fosdham used to review,

18:42.640 --> 18:47.640
annotate, cut, process, transcode and publish all of their videos runs on modern Pearl.

18:47.640 --> 18:52.640
So over a thousand videos this weekend are going through a modern Pearl system.

18:56.640 --> 19:01.640
And its popularity is kind of normalized over the last two decades, I think.

19:01.640 --> 19:03.640
So it's had to find Pearl developers.

19:03.640 --> 19:06.640
But newcomers don't have preconceptions.

19:08.640 --> 19:12.640
That's my experience of interviewing anyway.

19:12.640 --> 19:16.640
I think those under 30 either haven't heard of the language or haven't used it.

19:16.640 --> 19:20.640
And those who don't want to use it self-select out of the process anyway.

19:20.640 --> 19:24.640
Because we are explicit that we use Pearl in our job specs.

19:24.640 --> 19:28.640
We just don't require it unless we're hiring a senior Pearl developer.

19:32.640 --> 19:36.640
And I find modern Pearl is an interesting and enjoyable language to work with.

19:36.720 --> 19:40.720
Working with legacy code is not specifically a Pearl thing.

19:42.720 --> 19:46.720
And we make sure to do all of this stuff, because you should be doing all of this stuff.

19:47.720 --> 19:51.720
And we're finding in a distributed work environment you need to do all of this stuff.

19:54.720 --> 19:57.720
I've not really talked about this much in the past, but I have written blog posts.

19:57.720 --> 20:00.720
So check out the blog posts if you're interested.

20:00.800 --> 20:04.800
And the key is that you can still be very experienced, but still a newcomer.

20:04.800 --> 20:08.800
And that's absolutely fine. And I think it's actually beneficial to the ecosystem and the community.

20:08.800 --> 20:12.800
So if you are, please speak up. You want to hear from you.

20:15.800 --> 20:19.800
And that's it. I don't think I have time for questions.

20:19.800 --> 20:23.800
So thank you very much.

20:30.720 --> 20:34.800
Thank you.

