WEBVTT

00:00.000 --> 00:13.320
So, welcome everyone. Thank you for joining my presentation. It's my pleasure to open

00:13.320 --> 00:20.800
the containers, the room this year at FOSDEM. I've just realized that the title may be

00:20.800 --> 00:26.920
a little bit misleading. I'm not going to talk about building a container registry.

00:26.920 --> 00:32.120
I'm not clever enough for that. I'm going to talk about making it private though, so

00:32.120 --> 00:39.000
if that's why you are here, feel free to stick around. My name is Marc Chagy-Cozard. I'm

00:39.000 --> 00:44.280
don't bother trying to pronounce my last name, just call me Marc. I'm the head of open source,

00:44.280 --> 00:50.520
the company called OpenMeter. We do usage-based metering. We don't do anything about container

00:50.520 --> 00:58.600
registries. This is just a talk I had in the queue for a while. Let me actually tell you a

00:58.600 --> 01:05.880
story. This is going to be a story over a long period of time and a couple of different companies

01:05.880 --> 01:14.120
I've worked at. It's going to be about distributing images to people, developers, different deployment

01:14.200 --> 01:21.800
environments, design partners, whatever you want to call them. We accumulated a number of

01:21.800 --> 01:28.520
requirements over time. Again, different companies have different requirements, but often when

01:28.520 --> 01:34.520
you want to share container images that are not open with design partners or customers,

01:34.520 --> 01:40.120
you have specific requirements like you want to be able to share those container images so

01:40.120 --> 01:45.800
people can deploy it in their target environments. They can pull it to their development machines

01:45.800 --> 01:56.120
and use it for development, or they want to run services in their CI. You want to be able to

01:56.120 --> 02:03.800
distribute these images often in a way that you don't want everyone to pull those images. You want

02:03.800 --> 02:08.840
specific people and environments to access those images. You need flexible authentication and

02:08.840 --> 02:14.920
authorization solutions to do that. Obviously, you also want to minimize the operational burden.

02:15.800 --> 02:21.800
You don't want to run your own storage necessarily. You want to use some sort of object store,

02:21.800 --> 02:25.400
and you don't really want to think about things like monitoring or backups.

02:26.280 --> 02:32.200
So what do people usually do these days when they need a cloud native solution?

02:34.440 --> 02:35.080
Any ideas?

02:38.840 --> 02:44.440
Well, you go to the CNCF landscape and try to find an existing solution. If you go to the CNCF

02:44.440 --> 02:49.960
landscape, you're going to see that there are a bunch of container registry solutions already

02:49.960 --> 02:58.760
available. These solutions can largely be categorized or put into four categories. One of them

03:00.440 --> 03:05.640
is the cloud hosted registries. Most cloud providers have their own hosted registries these

03:05.640 --> 03:11.560
days, which is easy to use. There is a second category, which is called peer-to-peer. I call

03:11.560 --> 03:17.400
them peer-to-peer registries. They are mostly about distributing images within a deployment

03:17.400 --> 03:24.840
environment. Those are not really for distributing images with other people. There are all-in-one

03:24.840 --> 03:33.160
solutions we're going to talk about, and there are plain old registries that you can run in your

03:33.240 --> 03:40.280
own environments. Now, obviously, and again, this is a story we had our own requirements at a company

03:40.280 --> 03:46.680
called Bonsai Cloud to distribute images, private images with a bunch of customers, and we started

03:46.680 --> 03:52.360
with cloud hosted registries. They are easy to set up. There is no operational cost, basically,

03:53.160 --> 04:01.960
but it does require for customers and people who want to pull your images to register a cloud

04:01.960 --> 04:08.760
provider account. You have to set up IAM and a bunch of other stuff. Surprisingly, this is

04:08.760 --> 04:16.200
something I learned. Companies who don't have an account for a specific cloud provider are not

04:16.200 --> 04:23.320
really eager to register one if they don't use that specific cloud provider. Cloud hosted

04:23.400 --> 04:27.320
registries may not always be the answer if you have customers

04:30.600 --> 04:38.280
who don't have accounts for those cloud registries. Now, again, some time went by and new requirements

04:38.280 --> 04:46.200
came in. Obviously, one of them was the no cloud provider registration, and the other one was

04:47.160 --> 04:55.880
more flexible authorization. Obviously, there are many different artifact stores out there

04:57.240 --> 05:04.440
with a wide range of project. We use it for a long time. I believe it's still in use,

05:04.440 --> 05:12.600
where we introduced it. And it gives you a bunch of different tools for distributing OCI artifacts.

05:13.560 --> 05:20.840
It gives you robust authorization solutions. It gives you things like image replication,

05:20.840 --> 05:24.920
so you don't actually have to push your images to the hardware. If you just want to use it as a

05:24.920 --> 05:30.520
distribution strategy, you can replicate your images from your existing solution or

05:30.520 --> 05:35.720
your existing registry. And that's what we did, actually. We replicated the images we wanted to

05:35.800 --> 05:45.640
distribute across clients from our existing registry. And again, hardware has tons of more

05:45.640 --> 05:55.800
features. And basically, what we did is we built a layer on top of the so-called feature robot

05:55.800 --> 06:02.600
accounts. It's basically a service account feature in hardware that you can use for service to

06:02.600 --> 06:09.400
service authentication. And we built a layer on top of that to distribute credentials to customers

06:10.120 --> 06:18.040
so they can authenticate with hardware. Now, the thing with hardware is it's a great solution.

06:18.040 --> 06:26.920
We loved it. We did find a few issues with it, though. So first of all, the group-based access

06:26.920 --> 06:33.320
control, it has, it's only for users, not for robot accounts. So we had to manually set up the

06:33.320 --> 06:40.040
authorization for each robot account every time, which means if we need to update those

06:40.040 --> 06:46.600
authorization policies, we have to update all of those robot accounts, which was a bit weird.

06:47.800 --> 06:54.440
The other issue we met was creating robot accounts for multiple projects,

06:54.440 --> 06:59.880
hardware structures, everything into projects. Basically, it's a namespacing feature

07:00.520 --> 07:07.480
and creating cross-project robot accounts requires using the admin credential, which is a single

07:07.480 --> 07:11.960
admin user with a password, which was a bit of an issue for us. But overall,

07:13.160 --> 07:19.000
hardware is a great solution, maybe a bit overly complex if you just want to use it for just

07:19.800 --> 07:26.600
distributing images. But it's great. But obviously, new requirements came in,

07:27.880 --> 07:34.120
like building a sub-serve portal for users. Obviously, we could have allowed them into

07:34.120 --> 07:40.840
hardware, but since we used robot accounts, that wasn't really an option. And again,

07:42.280 --> 07:47.480
as actual customers started to use these products, we need the closer integration with

07:47.480 --> 07:53.240
sales and licensing systems. So this is where we started to think about maybe building our own solution.

07:57.720 --> 08:03.320
But before I talk about the solution that we came up with, I need to talk a little bit about

08:03.320 --> 08:11.480
how container registries work. How many of you are familiar with OCI? I guess, fair bit, all right.

08:11.720 --> 08:20.440
So I'm not going to talk a lot about what OCI is. But basically, OCI has three

08:21.080 --> 08:28.920
specifications. That's relevant in this space. The distribution, which is the registry API,

08:28.920 --> 08:34.200
basically the image and the runtime. And the interesting part here is the distribution

08:34.280 --> 08:42.360
specification, because that's how you pull images from a registry, basically. That's what defines

08:42.360 --> 08:51.560
the API for pulling images. And the problem is that there is no built-in support for

08:51.560 --> 08:58.680
authentication and authorization in that interface. The distribution specification is

08:58.680 --> 09:03.000
basically just an HTTP interface. So technically, you could use basic OCI if you wanted to,

09:04.200 --> 09:10.280
if the client that you use to pull images supports it. And actually, I think the

09:11.960 --> 09:19.960
Docker registry OCI actually uses or allows using basic OCI, but again, it depends on the client.

09:19.960 --> 09:24.840
And there is no authorization built into the distribution specification at all.

09:25.560 --> 09:33.560
So that's the operation. That's how the Docker CLI works, basically. When you do

09:33.560 --> 09:40.440
Docker login or pull or push, that's what the Docker CLI does these days. Whenever you try to

09:40.440 --> 09:51.480
pull or push into a registry with authentication. So that's how authentication works in Docker.

09:51.480 --> 09:56.120
Again, this is not a formal specification. It's just something that Docker did. It's great.

09:56.120 --> 10:02.120
It works, but it's not a formal specification. Not yet anyway. So let's try to put this all

10:02.120 --> 10:08.120
together and see how we can build our own private container registry. So first of all,

10:09.000 --> 10:12.920
we need a container registry. And as I said, I'm not going to talk about building

10:12.920 --> 10:20.520
a next-year registry. Fortunately, we do have a couple of options. We have the SoCo distribution

10:20.520 --> 10:27.800
project. I always found this is a bit weird name. Like, what does it mean? Distribution. I mean,

10:27.800 --> 10:34.200
I understand it's about image distribution, but anyway, it's basically the reference

10:34.200 --> 10:39.480
Docker registry implementation. And the other project is Zod. Both of them are CSEO projects.

10:39.480 --> 10:44.200
The distribution project is basically, again, as I said, is the reference Docker registry

10:44.200 --> 10:52.920
implementation. Most providers use it under the Docker Hub, GitHub's container registry

10:54.280 --> 10:58.680
Harbor uses it under the hood. So it's basically the reference implementation for container

10:58.680 --> 11:04.200
registries. And I think they are working on a version three these days. I don't know if it's

11:05.480 --> 11:14.120
out yet or not, but there is a new version coming. The other project is called Zod. It's a new

11:14.360 --> 11:20.840
project. I think it focuses purely on the OCI distribution specification. So it doesn't really

11:20.840 --> 11:30.360
have support or backward, compatible support for the older Docker registry API. The registry

11:30.360 --> 11:37.560
authentication was actually broken for a long time. And fortunately, a couple of days ago,

11:37.560 --> 11:44.360
a week ago, they fixed it. So it should work with the registry of specification now.

11:45.480 --> 11:51.000
And the third project that I built, it's basically a proof of concept project, actually,

11:51.000 --> 11:58.840
but it's a registry authentication library and a service. This is the service that implements

11:58.840 --> 12:05.640
the authorization service component. If you remember the diagram before, this is how you can

12:05.720 --> 12:13.720
build your own authentication and authorization solution for your own registry. Again, it's a

12:13.720 --> 12:18.920
library so you can build your own service with it. And it's also a service comes with a couple

12:18.920 --> 12:27.640
of defaults and helpful configuration. You can check it out on GitHub if you want to.

12:28.440 --> 12:33.880
Now, couple of caveats with the registry specification. As I said, it's not actually

12:33.880 --> 12:38.200
a formal specification. There are several gaps in it, edge cases that are not covered.

12:39.560 --> 12:47.320
Properly, different clients and different services may implement the specification differently.

12:48.680 --> 12:56.040
There are also competing and not fully compatible specifications. I believe this is the biggest

12:56.040 --> 13:04.520
issue with it today. Charmism has its own similar specification which is incompatible.

13:04.520 --> 13:09.400
And this is actually the reason why the Zalt implementation was broken, because they used

13:09.400 --> 13:16.200
the Charmism oath specification, which is a version of the Docker token oath specification.

13:16.760 --> 13:27.320
And that's why it was broken. So hopefully, this is going to be solved by the OCI

13:27.320 --> 13:32.600
specification. So this is going to be the fourth, I believe the fourth OCI specification.

13:32.600 --> 13:39.560
There's a new formal working group. I believe they formed in August last year. So there's

13:39.560 --> 13:46.440
the new working group trying to solve all these issues and try to come up with a consistent

13:46.440 --> 13:54.920
solution for both authentication and authorization. So it becomes easier to build these kind of

13:54.920 --> 14:00.600
services. And it becomes easier for different clients and different registry implementations

14:00.600 --> 14:08.600
to work together. So hopefully, that's going to solve all those issues. And well, that's all I

14:08.680 --> 14:14.920
had for today. I'm happy to answer any questions you have. Or I can do a big demonstration of the

14:14.920 --> 14:25.720
port word service if you are interested. I'm up for both. Sorry, if you want to ask questions,

14:25.720 --> 14:35.480
there is a microphone here. All right, let's see the demo.

14:39.480 --> 14:48.680
Just give me a moment. All right. So

14:58.120 --> 15:01.880
all right. Can you see my console? I don't know if it's visible from the back.

15:02.520 --> 15:12.600
All right, cool. So this is a demo for port word, which I mentioned is an authorization service

15:12.600 --> 15:21.720
implementation. Thank you. As you can see, there are a couple other services here. One is called

15:21.720 --> 15:29.640
Docker. This is the distribution registry. The other one is Zot. The example works with Zot as

15:29.640 --> 15:36.120
well. And there is a fourth service here, which is called Kerbos. This is one of the included

15:36.120 --> 15:44.040
authorization solutions in the default port word service implementation. You can use Kerbos to

15:44.040 --> 15:54.760
define authorization policies for your container registry repositories. This is just the basic

15:54.760 --> 16:03.480
default policy that allows different types of users, like admin users, developers, and customers,

16:03.480 --> 16:10.520
to do different kinds of things. Obviously admins can do everything. I don't know. Users can push

16:10.520 --> 16:16.440
to their own namespaces. But the idea is, I don't really want to talk too much about Kerbos,

16:16.440 --> 16:23.880
but you can use Kerbos to define these policies. And it's integrated into the Docker of

16:24.840 --> 16:32.680
authorization specification through port word. Port word has its own configuration. I'm going to

16:32.680 --> 16:40.920
show that quickly as well. You don't have to parse this hash. I'm going to tell you its password

16:41.560 --> 16:47.160
just to make it easier. This is a very simple configuration here with a few static users.

16:47.880 --> 16:57.160
A couple configuration parameters for issuing tokens. And you can see the authorizer is

16:58.120 --> 17:03.000
configured as Kerbos here. There are a bunch of other authorizers that you can use. You can

17:03.000 --> 17:07.400
build your own, as I mentioned, port word is a library and a service, so you can integrate your

17:07.400 --> 17:13.480
own authorization solutions fairly easily. Now let's see if this thing actually works.

17:14.200 --> 17:23.560
So everything is running. Let's see if I can log in to the service. By the way, this is on GitHub.

17:24.760 --> 17:29.720
If you go to the Kickstarter on GitHub, you can try this out yourself.

17:32.840 --> 17:33.320
Yeah, go ahead.

17:37.400 --> 17:39.880
I'm sorry, I can't hear you and there is a microphone here.

17:43.480 --> 17:52.360
What type of authentication are supported? Is it only password based or do we use the

17:52.360 --> 17:57.880
default authentication? Yeah, it's only password based. That's the only thing that the Docker

17:58.680 --> 18:07.000
specification allows. But as far as I know, the OCI working group is trying to add more types of

18:07.000 --> 18:11.640
authentication allowed.

