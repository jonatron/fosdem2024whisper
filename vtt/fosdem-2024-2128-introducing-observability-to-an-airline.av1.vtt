WEBVTT

00:00.000 --> 00:12.240
Hello everybody. Can you hear me? Is it working? Awesome. This is my first talk, so I'm just

00:12.240 --> 00:20.400
going to do this because hello, FOSTA! Yes! Great to hear some energy in here at this

00:20.400 --> 00:28.400
time. Right, so my name's James and my major client currently is a, so my major client,

00:28.400 --> 00:33.680
my only client currently is a major European airline. Get that right? And I wanted to talk

00:33.680 --> 00:39.320
to you today about some of the challenges that we're facing in introducing observability

00:39.320 --> 00:44.560
to that client, a framework that I've kind of put together to overcome those challenges

00:44.560 --> 00:51.160
and some thoughts that I have overall about observability. This talk should be applicable

00:51.160 --> 00:55.720
to any big organization. So there's not really anything that's specific to an airline, but

00:55.720 --> 01:00.160
if you think about the scale of not only the size, but the amount of different tasks

01:00.160 --> 01:04.760
an airline would be doing and the kind of vintage of most major airlines, you'll kind

01:04.760 --> 01:10.040
of get an idea of what we're talking about here. By the way, just as an idea, who here

01:10.040 --> 01:17.440
works for like a company that's got more than a thousand people in it? Okay, fair enough.

01:17.440 --> 01:24.680
Okay. And how many of those people are actually using observability on any scale? Okay, some

01:24.720 --> 01:29.120
of you, awesome. You should be doing this instead. In this talk, I want to walk you

01:29.120 --> 01:33.440
through three steps I'm taking to introduce observability. One, I'm calling an observability

01:33.440 --> 01:37.840
transformation. We're not going to be talking about anything too technically exciting here,

01:37.840 --> 01:40.520
and we're certainly not going to be talking about anything like introducing observability

01:40.520 --> 01:44.440
to like the cockpit or anything like that. This talk is about helping you get your company

01:44.440 --> 01:49.440
or client or whoever else on board with observability. It's about making that transition successful

01:49.440 --> 01:54.400
and it's about making it sustainable. And of course, the associated love and adoration

01:54.440 --> 02:00.160
of your peers for making their lives a whole hell of a lot easier. So, first thing I want

02:00.160 --> 02:07.160
us to do is align us on what observability is. So, that'll be easy. Does anyone want

02:07.280 --> 02:11.520
to, I tell you what, we're running late, so I'll just tell you what observability is.

02:11.520 --> 02:16.720
Firstly, I think that what we've got to remember when we're talking about observability is

02:16.720 --> 02:20.040
that a lot of people don't really know what to think of, but they're probably thinking

02:20.040 --> 02:27.040
of something like this, like a big ten-foot view of everything that's going on. Obviously

02:27.040 --> 02:32.680
most people in here won't think that that's observability. Why not? Can anyone say, like,

02:32.680 --> 02:39.680
is this observable? Is this an observable system by our definition? This is what I think

02:40.880 --> 02:45.280
of when I think of observability. And when I speak to anybody that, you know, may be

02:45.360 --> 02:49.640
lay technical or non-technical, this is the kind of thing that I'll introduce to them.

02:49.640 --> 02:54.360
I know that I'm putting a definition on something that, you know, and that's a little bit controversial,

02:54.360 --> 02:58.480
but this is what I think of. So, this will help you kind of ground in what this talk

02:58.480 --> 03:03.480
is about. So, you can imagine, like, as we went through that previous thing, like, there's

03:03.480 --> 03:10.080
this cake being made. And so, you know, I can describe quite easily that previously,

03:10.080 --> 03:15.600
with a, like, monitoring process, we would monitor, get the metrics and the logs from

03:15.600 --> 03:20.880
each individual component of that system. But now what we're going to do is we're going

03:20.880 --> 03:27.880
to collect the request for a cake through that system. And this has some clear value

03:28.240 --> 03:31.560
if we start talking about this. There's this other way of talking about it that's like,

03:31.560 --> 03:38.560
you know, observability is how we understand something by the internal something, I can't

03:39.280 --> 03:43.760
say, but it doesn't really kind of get across the value to people that may be a bit skeptical

03:43.760 --> 03:47.320
about this. And I think that this kind of does. So, let's just pocket that idea for

03:47.320 --> 03:54.320
a second. This idea basically describes observability as recording work done to satisfy a request.

03:56.600 --> 04:02.600
So, a request is completely observable when you can see all the work done to that request,

04:02.600 --> 04:06.080
and a system is completely observable when you can see all the work done to all requests

04:06.080 --> 04:10.560
moving through a system. This to me is much more tangible. It does tie it specifically

04:10.560 --> 04:14.520
to requests or events. However, I do note that when we talk about observability and

04:14.520 --> 04:20.000
making long running processes observable, most people try and arbitrarily or otherwise

04:20.000 --> 04:24.560
find ways of cutting them up into individual traces anyway. So, I think that this is fairly

04:24.560 --> 04:30.960
close to, like, how we're doing observability in practice. So, in my view, an observability

04:30.960 --> 04:37.360
transformation fits alongside other transformations which, when done right, leads to much more

04:37.360 --> 04:42.120
productive organizations. So, with Agile, we move from waterfall to more incremental

04:42.120 --> 04:48.120
development. With DevOps, DevSecOps, all of that, we move from silos to more cross-functional

04:48.120 --> 04:55.240
teams with cloud, like it or load it. We move from buying things up front and hoping that

04:55.240 --> 05:00.760
they were the right things to buying things on tap as and when we needed it. So, with

05:00.760 --> 05:05.480
observability, we're really talking about moving everything 90 degrees. So, instead

05:05.480 --> 05:13.560
of observing individual systems, we're going to observe requests as they go through them.

05:13.560 --> 05:20.280
This should also act as a warning. Just, who has gone through an Agile transformation?

05:20.280 --> 05:29.080
Keep your hand up if you think that that went really, really well. Yeah. And I'm using this

05:29.080 --> 05:33.200
word very, very specifically because this is another thing I want us to pocket as we're

05:33.200 --> 05:37.880
going through this. You do need to think of this as a transformation and you need to think

05:37.880 --> 05:43.080
about the kind of pitfalls of other types of transformations and how to overcome them

05:43.080 --> 05:51.960
if you want to introduce observability to your company, client, whoever. Okay. So, we're

05:51.960 --> 05:57.480
all aligned, please, on what observability is. We know we want it, but we don't get to

05:57.480 --> 06:03.160
decide. So, we need to think about who we need to convince. Although you could probably

06:03.160 --> 06:08.280
get away, especially in smaller or more agile companies, we're just convincing a couple

06:08.280 --> 06:11.400
of people and going ahead, often with this sort of thing, you're going to have to convince

06:11.400 --> 06:17.520
a lot of people. And so, this is me capturing three broad groups of stakeholders here that

06:17.520 --> 06:22.240
you're going to want to convince if you want to bring people along with this observability

06:22.240 --> 06:27.960
transformation. And you want to get everyone on board because if you only get, for example,

06:27.960 --> 06:33.280
the C-suite on board, like the higher ups, if you like, on board, then engineers will

06:33.280 --> 06:40.840
just make your product fail, make your transformation fail so that they can get back to their work,

06:40.840 --> 06:44.640
like with any other thing. And then management will just say, right, I've just lost a load

06:44.640 --> 06:49.880
of productivity, we can solve this by getting rid of this observability thing. Similarly,

06:49.880 --> 06:53.280
if you get your engineers on board and they keep pushing towards it, you'll land up with

06:53.280 --> 06:56.400
them being burnt out because they're not being given the time and the resources that

06:56.400 --> 07:03.360
they need to actually make it work. So, it's worth thinking through very quickly here,

07:03.360 --> 07:09.240
wary of time. I can spend ages on this slide, by the way, because thinking about stakeholders

07:09.240 --> 07:14.200
is really, really interesting, but I'm just going to pick up a few highlights. As an example,

07:15.200 --> 07:22.840
anyone here a skeptic would describe themselves as an observability skeptic? I'd imagine,

07:22.840 --> 07:28.200
maybe, do you have any reasoning? No, that's fair enough. But it's worth noting that even

07:28.200 --> 07:33.120
in here, and I think that there's lots of people outside, the thing I compare it to is

07:33.120 --> 07:38.800
kind of transforming towards test-driven development. A lot of places will introduce test-driven

07:38.800 --> 07:43.000
development and the way that they'll do it, for example, is their experience will be that

07:43.800 --> 07:49.440
some manager somewhere will insist on 100% test coverage. So, they've gone through that,

07:49.440 --> 07:52.960
they have to do all these ridiculous things to jump through hoops to get this transformation

07:52.960 --> 07:57.800
to be complete, and then they come out at the end of it saying, well, test-driven development's

07:57.800 --> 08:02.560
crap, we're not doing this. They managed to get rid of it and they managed to dump it.

08:02.560 --> 08:06.840
So, you might think that of these three people, the engineers would be the easiest to convince,

08:06.840 --> 08:10.800
but there are lots of people that are out there that have gone through three or four of these

08:10.840 --> 08:16.560
now and really need to be sold on whether this is going to help them. So, really, don't think

08:16.560 --> 08:21.080
that they're going to be automatically on your side just because you're convinced. Also,

08:21.080 --> 08:25.560
I'll note all the disagreement that we have just in this one conference about what the best

08:25.560 --> 08:32.240
tooling and the best approaches are anyway. Quickly on things like management, management

08:32.320 --> 08:41.000
will want to be convinced that it's not going to break down productivity. One example I'll

08:41.000 --> 08:44.680
give when we're looking at, for example, higher ups like the C-suite, they're going to be

08:44.680 --> 08:48.240
interested, you're going to be asking them to spend money because you can't just say,

08:48.240 --> 08:53.080
oh, we're going to do this, you want to actually resource a team. With my client, what we did

08:53.080 --> 08:59.240
was we actually went through the outages over the last 12 months and we did some estimates,

08:59.480 --> 09:03.560
we said there are estimates and we caveated like what the caveats are. We went through and

09:03.560 --> 09:08.840
we worked out how much time we think would be saved on outages, on each of these outages,

09:08.840 --> 09:14.040
if they had good instrumentation of their code and if we could identify the issues more quickly.

09:14.040 --> 09:21.040
They could go away and they could calculate that in terms of a cost which they could use to justify

09:21.040 --> 09:28.520
it. So, don't forget about your stakeholders. One thing that you didn't hear is in all of that,

09:28.600 --> 09:34.520
is what tool to use. That's because, sorry, everyone that makes a tool, it largely doesn't

09:34.520 --> 09:39.600
matter at this point. People want traces because they want less downtime, they want more clarity,

09:39.600 --> 09:44.400
they want to capture lost revenue or whatever else. But you can do that with pretty much

09:44.400 --> 09:51.560
any observability tool right now. So, the one thing you don't want to do as part of convincing

09:51.600 --> 09:58.600
people is to try and sell them on a specific tool. That can come later. In my engagement,

09:58.600 --> 10:03.960
we're focusing on tempo. And the reason that we're doing that, I'll introduce some of the

10:03.960 --> 10:08.800
other reasons in a bit, but the main reason is because we always use Grafana, we already

10:08.800 --> 10:13.840
use Prometheus, it slots right in. And we don't really have to discuss it much. There's another

10:13.840 --> 10:18.600
thing which is because tempo is open source, we don't have to involve as part of selling this

10:18.640 --> 10:25.160
project, a new vendor, and new commercials and stuff like that. So, open source to the

10:25.160 --> 10:31.660
rescue with that. But really, you want to get your project approved so you can go and

10:31.660 --> 10:38.660
start instrumenting code. Last thing I'll say on this is team topology. This is an example

10:38.800 --> 10:43.720
of the sort of team that I'd expect to go and start an observability transformation.

10:43.840 --> 10:49.840
You'd want, I prefer smaller, more agile teams. So, you might look at this and think, well,

10:49.840 --> 10:56.840
based on my business, I might have two or three of your software engineers, two or three

10:57.160 --> 11:01.280
of your operations engineers. That might be an anti-pattern. You can go and look up all

11:01.280 --> 11:06.440
the reasons why bigger teams tend to do work more slowly. I'm not going to cover that now.

11:06.440 --> 11:10.960
So, I'm looking at a kind of crack team. Software engineers are going to get in and go and instrument

11:11.000 --> 11:14.920
the code. We've got an operations engineer that's going to make sure that we clear the

11:14.920 --> 11:21.560
pathways to actually get those spans out into tracing databases. And finally, we've got

11:21.560 --> 11:25.960
somebody that's kind of in a product owner position that's going to protect that team,

11:25.960 --> 11:29.480
make sure that they're not answering inane questions all the time. And that is also going

11:29.480 --> 11:33.560
to be working with the business and with the other product delivery teams and the platform

11:33.560 --> 11:40.280
team and whoever else to make sure that concerns are raised, that they're heard, that they pivot

11:40.280 --> 11:44.320
when they realize that actually they've made a mistake. So, that's an important role as

11:44.320 --> 11:49.280
well. But remember, this is a transformation and we're trying to do new things. So, we're

11:49.280 --> 11:54.200
changing cultures here. So, you do need to be responsive to feedback and you need to

11:54.200 --> 12:00.400
be responsive to feelings. Otherwise, your engineers here are going to make the best

12:00.400 --> 12:05.400
system that never gets used, which is another pitfall of transformations.

12:06.400 --> 12:12.400
Okay. Those are my thoughts on convincing people to do an observability transformation.

12:12.400 --> 12:18.400
Now, let's imagine you've got the thumbs up. Let's move towards implementation. Most important

12:18.400 --> 12:23.400
thing is to not get bogged down in the details of the infrastructure. You need to move to

12:23.400 --> 12:29.400
instrumentation. But, you are going to have to need some sort of tracing database. You are going to

12:29.400 --> 12:34.400
need some sort of tooling. If you have something already, so for example, if you're already using a

12:34.400 --> 12:40.400
provider of some sort and they have it, then great. Consider that. However, one of the ways that you can

12:40.400 --> 12:47.400
make sure that these things move faster is by moving your tracing database into where the data is that

12:47.400 --> 12:53.400
you're collecting. You think about big, old companies, big and or old companies. They get really

12:53.400 --> 12:58.400
nervous when you say, right, we're going to collect all this data and we're going to go put in this cloud provider over here.

12:58.400 --> 13:05.400
Now, that can take months to agree. And so what you can do is you can short circuit that, start that process,

13:05.400 --> 13:11.400
start discussing how you're going to do this. But you can also at the same time move your tracing databases into

13:11.400 --> 13:18.400
maybe the accounts or the cloud provider that's actually already been agreed to use this. There is a downside

13:18.400 --> 13:23.400
here, which some of you might be thinking is, well, doesn't that mean, James, that you'd have maybe multiple

13:23.400 --> 13:31.400
tracing databases, which means that you wouldn't have all your spans in the same place? And that is true, but it

13:31.400 --> 13:36.400
means that you can move on to instrumentation. It means that you can move to the point where you have like maybe two

13:36.400 --> 13:43.400
traces that somebody has to look to, and then you can get other people in the business to say, hey, wouldn't it be useful if,

13:43.400 --> 13:51.400
and then you can start having the discussions. Don't try and boil the ocean on these things. And we're being

13:51.400 --> 13:58.400
pragmatic here. So as an example here, this is if your client is in AWS, you can quickly get Tempo. There's a good article on

13:58.400 --> 14:07.400
the Grafana website deploying Tempo on Fargate, which means that you can get that up nice and quickly. So again, that's an

14:07.400 --> 14:12.400
advantage of using these things. And more importantly, you can deploy it. You can find out it's the wrong thing to do,

14:12.400 --> 14:18.400
and you can go do something else. And it's a great thing about using these open source tools is you can really work it out as

14:18.400 --> 14:26.400
you're moving. With that in mind, get instrumenting. And know that to start with that team that I put together earlier is going to be

14:26.400 --> 14:36.400
doing a lot of the work themselves. Automatic instrumentation is your friend. Get your software engineer to go and find the code

14:36.400 --> 14:46.400
bases that are across the system, especially on your hotpaths, and start raising PRs to auto instrument. You know how best to do

14:46.400 --> 14:51.400
these in your company. Some companies, they want to start the conversation with a PR. Sometimes they want to start with a meeting

14:51.400 --> 15:00.400
or something like this. But getting auto instrumentation in to these code bases will mean that you will start being able to build up the

15:00.400 --> 15:13.400
shallow layer of these traces. Then if any teams start becoming interested in this, opportunistically pair your software engineer with

15:13.400 --> 15:20.400
those teams. Pairing mobbing is a great way to share knowledge. Remember, a lot of these software engineers will not have done this kind of

15:20.400 --> 15:27.400
thing before, and doing it's kind of hard if you don't know how to do it. You don't want them to get frustrated to throw in the towel

15:27.400 --> 15:35.400
and say, no, this is dumb. This is hard. This is not the way we used to do things. Whereas if you can put your software engineer in with

15:35.400 --> 15:44.400
a pair as a pairing or a mobbing situation, they will have happy times and everything will be lovely. Also, make sure that you point out the

15:44.400 --> 15:52.400
value when you see it. It's very easy for us to see these things and to go, oh, it's great. And so obviously it's great. But this is new to

15:52.400 --> 15:59.400
people. So point out the 10% of their queries that has like this weird choke point. Point out all these advantages you're getting from this

15:59.400 --> 16:07.400
instrumentation and from all these spans as you're collecting them. Find, when there's an issue, when there's downtime, get your team to go and

16:07.400 --> 16:18.400
see if they can race the people that are doing incident response to finding where the issue is based on the tracing. Once these teams realize that they can see

16:18.400 --> 16:28.400
through walls with this stuff, they'll soon start instrumenting their own code. But you need to get them to look. Another trap is to get bogged down on

16:28.400 --> 16:39.400
the problems that are harder to instrument. Airlines and banks and other places have a bad habit and that bad habit is Fortran. Or like Zidark or some

16:39.400 --> 16:47.400
mainframe thing or whatever. If anyone here, has anyone here just put your hand up if you do any development on like COBOL, Fortran,

16:47.400 --> 16:56.400
anything like that? Awesome, awesome. If you go an instrument something like that, please come and talk about it. That sounds awesome. That sounds like a

16:56.400 --> 17:05.400
lot of people are going to talk about this one. I'll be fascinated by it. But if you're doing this kind of project, now is not the time. Something like that is not

17:05.400 --> 17:13.400
really going to correct me if I'm wrong, anybody out there. I don't think there's any instrumentation for Fortran code or anything like that. Treat it as a third

17:13.400 --> 17:22.400
party system. And also don't try and instrument other people's code. I've seen this happen. People will go, right, okay, we've got this third party and it's

17:22.400 --> 17:37.400
this third party code that we deploy. How are we going to instrument that? Do not instrument the stuff that is there and then accept that you're going to get to a point where it's going to roll over to logs and

17:37.400 --> 17:48.400
metrics. If the tool that you're using allows you to be able to connect up logs and metrics to your traces, that's really handy because remember in these big organizations, you might never reach the golden

17:48.400 --> 18:00.400
sunlit uplands of traces for everything. So you're always going to have to go back. You can think of it sort of like fast travelling through the infrastructure as that you are not going to be able to get to the point where

18:00.400 --> 18:13.400
necessarily you're going to be able to get into the point in the Oracle database that you're really trying to kill that has actually had this problem. But you will be able to fast travel to the bit in the code where it makes a query to an

18:13.400 --> 18:31.400
Oracle database and then you'll know which logs and traces to look at. So the goal really is for wide coverage, especially of hot paths. And that brings us to another thing which is culture change. So you've been working on this for maybe

18:31.400 --> 18:44.400
six months or so. It's fairly short projects. You've gotten traces. You've got end to end on many of the request pass through the systems. People kind of get observability now. So those three people will come out with a few others and build an observability

18:44.400 --> 18:58.400
engineering team, right? I would say that for most organizations, that's the wrong way to do things. There are companies for which observability engineering having separate teams stood up for that kind of thing does make

18:58.400 --> 19:18.400
sense. But for most places, you're really going to be looking at creating this kind of. This is one of my favorite slides ever, which is weird. I have weird favorite things. But this talks about like a DevOps transformation where what you do is you create a DevOps team and the best DevOps team disappears after like six or

19:18.400 --> 19:37.400
twelve months because what it's done is it's created this thing where they come together. And you should, you know, this is a valid way of doing things for observability as well. Ultimately, you may have an enablement team. However, instrumentation should be being done by devs as part of their day to day work

19:37.400 --> 20:06.400
The tooling needs to, oh five minutes. Oh, slow down. Enablement should be sharing best practices and doing training and stuff. The tooling really needs to be absorbed into an existing platform team. And this is the really cool part is that now, if you think about it, you've gotten to this point where you've got all this instrumentation into your codes. You can start thinking about what kind of tooling makes sense for your organization. Whereas when you started, it's very hard to do.

20:07.400 --> 20:31.400
That wasn't five minutes. Okay, I'll stop. So, yeah, if you've done your job well, hopefully these people won't need you anymore. And you can go and absorb back into teams and you can call that project complete. You might be able to do some kind of enablement team. But as I said, that wasn't meant to have a question mark at the end of it.

20:32.400 --> 20:45.400
Go and effect change. I'm going to end it there. There wasn't much time. I've got so much more I want to talk about on this subject. So I might do a follow up thing. If you have any questions, I'd be happy to answer them and you can find where to find me at that website.

20:52.400 --> 20:59.400
Thanks, James. We have still five minutes for Q&A. Some questions here.

21:02.400 --> 21:06.400
Okay.

21:06.400 --> 21:09.400
There is one.

21:09.400 --> 21:12.400
I answered almost everything.

21:12.400 --> 21:25.400
Hi. How long has it taken for you to convince a big org and an old company to move from no observability to some sort of observability?

21:25.400 --> 21:28.400
Completely convinced. I'll let you know.

21:29.400 --> 21:40.400
So I maybe joined back in May with this client and was helping them with a previous project that was getting wrapped up.

21:40.400 --> 21:48.400
So I'd say it's been eight or nine months working on other things and identifying this as a need where it's been working through.

21:48.400 --> 21:50.400
Yeah, it can take time.

21:51.400 --> 21:55.400
So because you've got all, as I said, you go back to that stakeholder slide.

21:55.400 --> 21:59.400
I could have spent a whole 20 minutes just on that because you've got to kind of get everybody aligned.

21:59.400 --> 22:04.400
I've done lots of like meetings. I've shown the people off, shown things off to people.

22:04.400 --> 22:07.400
I've shown off all these slides and stuff, gotten everybody on board.

22:07.400 --> 22:17.400
And yeah, so I think by the time, you know, I'd say that everyone's actually in lockstep, probably about now actually.

22:21.400 --> 22:27.400
I should say though, by the way, is we didn't, you know, just not do anything until that point.

22:27.400 --> 22:32.400
So there's been lots of opportunities to like seed things as we've been doing other work as well.

22:32.400 --> 22:34.400
So yeah.

22:36.400 --> 22:43.400
All right. Some questions? No, then thanks, James.

22:43.400 --> 22:45.400
Thank you.

22:50.400 --> 22:52.400
Thank you.

