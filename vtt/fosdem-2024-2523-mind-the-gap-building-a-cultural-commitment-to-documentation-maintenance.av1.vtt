WEBVTT

00:00.000 --> 00:10.000
I'm going to give a warm applause.

00:10.000 --> 00:12.000
It's your time.

00:12.000 --> 00:13.000
Great.

00:13.000 --> 00:16.000
Thanks, everybody, for joining me this morning.

00:16.000 --> 00:18.000
My name is Fiona Pierce Artiaga.

00:18.000 --> 00:23.000
I am the director of technical writing and documentation at Grafana Labs.

00:23.000 --> 00:29.000
We at Grafana have a really strong history of open source projects from Grafana,

00:29.000 --> 00:35.000
which I think is our most well-known, to Loki, Mimir Tempo, Pyroscope, Bela, Faro,

00:35.000 --> 00:40.000
and of course the entire IRM suite built off of our open source alerting project.

00:40.000 --> 00:46.000
As a result, we have a lot of experience with maintaining open source documentation,

00:46.000 --> 00:49.000
and we've learned some lessons along the way.

00:49.000 --> 00:54.000
So I'll share with you how this approach works in our company,

00:54.000 --> 00:58.000
as well as other companies that are in the open source community that I've worked for.

00:58.000 --> 01:02.000
I won't have time for questions today, but I will be outside afterward,

01:02.000 --> 01:05.000
and I'm more than happy to talk about documentation.

01:05.000 --> 01:09.000
I've winnowed this talk down as much as I possibly can,

01:09.000 --> 01:11.000
but I have loads to say on this topic,

01:11.000 --> 01:15.000
and I think there's always loads of questions about it.

01:16.000 --> 01:23.000
So when we look at an open source community and a commitment to maintenance,

01:23.000 --> 01:28.000
the gap that I'm talking about in mind the gap is the difference between

01:28.000 --> 01:32.000
what you hope your documentation will be and where it currently is.

01:32.000 --> 01:39.000
And wherever you are in your journey, I think you'll find these tactics and strategies useful.

01:39.000 --> 01:42.000
So it really breaks down into three major areas.

01:42.000 --> 01:55.000
You need to communicate, you need to minimize friction with your developer community,

01:55.000 --> 01:57.000
and you need to engage.

01:57.000 --> 02:00.000
So when we talk about minimizing communication,

02:00.000 --> 02:04.000
there's really things that I found work extremely well,

02:04.000 --> 02:08.000
and there are things that I would recommend not doing.

02:08.000 --> 02:13.000
The first thing you need to do, and this may sound really self-evident to you,

02:13.000 --> 02:15.000
is an open source project maintainer,

02:15.000 --> 02:19.000
but you need to tell your community what you need,

02:19.000 --> 02:23.000
and be explicit about the types of content that you find valuable,

02:23.000 --> 02:27.000
and why it is that you think it would move the project forward.

02:27.000 --> 02:30.000
In addition, you need to tell them how.

02:30.000 --> 02:36.000
Provide them with guidelines, give them examples, give them models, give them samples,

02:36.000 --> 02:39.000
because otherwise they're flying a little bit blind,

02:39.000 --> 02:45.000
and the PRs that you potentially receive may not be of the quality that would help your project.

02:45.000 --> 02:49.000
But on the topic of guidelines, you need to make sure they evolve.

02:49.000 --> 02:54.000
If they're brittle, you'll find that your contributor community will not feel embraced,

02:54.000 --> 02:56.000
it will not feel kind,

02:56.000 --> 03:00.000
and it's very important that the community feels welcomed and acknowledged

03:00.000 --> 03:05.000
in the process of making your project better.

03:05.000 --> 03:07.000
Things that we find don't work.

03:07.000 --> 03:11.000
Don't walk into this conversation with assumptions.

03:11.000 --> 03:17.000
Just because in your head you know what the project needs doesn't mean your community does.

03:17.000 --> 03:22.000
So say it out loud, put it in your readme, put it in a GitHub issue with Help Wanted.

03:22.000 --> 03:26.000
Add to the Help Wanted projects on GitHub itself.

03:26.000 --> 03:30.000
Go into a blog, if you have a website, publish it on your website.

03:30.000 --> 03:34.000
If you're doing a FOSDEM talk, you know, Thomas just mentioned at the end,

03:34.000 --> 03:39.000
contributions are welcome because making documentation better improves the project,

03:39.000 --> 03:46.000
not just for you, but for everybody consuming that tool or new technology.

03:46.000 --> 03:49.000
If you have a readme, make sure it's fresh.

03:49.000 --> 03:54.000
Otherwise, your contributors are following the guidelines that they thought were the right things to do,

03:54.000 --> 03:59.000
and if they're encountering difficulty moving the documentation contribution forward,

03:59.000 --> 04:04.000
it might be because you haven't told them properly how to do that.

04:04.000 --> 04:05.000
Have guidelines.

04:05.000 --> 04:10.000
If they're not present, people don't know what to do, and evolve them.

04:10.000 --> 04:11.000
Minimizing friction.

04:11.000 --> 04:16.000
I cannot say enough about the value of writing docs as code.

04:16.000 --> 04:19.000
We use a docs as code method, Acrophana.

04:19.000 --> 04:22.000
That means we use a source control product, GitHub.

04:22.000 --> 04:24.000
I think that's becoming the standard.

04:24.000 --> 04:26.000
We use an open source IDE.

04:26.000 --> 04:29.000
For most of us, we use Visual Studio Code.

04:29.000 --> 04:32.000
We also use a Veil Linter.

04:32.000 --> 04:37.000
If you attended one of my colleagues talks yesterday, we're improving the Veil Linter to follow the

04:37.000 --> 04:42.000
Grafana writer's toolkit guidelines that we've created.

04:42.000 --> 04:49.000
And make sure that the tooling and the tools that you engage with for documentation align with the tools

04:50.000 --> 04:54.000
that your team and your project maintainers are working with.

04:54.000 --> 05:00.000
When you begin breaking the documentation away from the project, if you put it into a CMS,

05:00.000 --> 05:07.000
or if you put it into a separate repo, you will find that the documentation regresses.

05:07.000 --> 05:09.000
It's just human nature.

05:09.000 --> 05:14.000
The minute you move the docs away from the code, it's not considered a maintenance project anymore.

05:14.000 --> 05:19.000
It's considered an other thing to do, potentially an afterthought.

05:19.000 --> 05:23.000
And if you're using a carrot and stick method, where your stick is that you're linting

05:23.000 --> 05:28.000
and you're making sure that the markdown file is associated with this new code is being updated,

05:28.000 --> 05:34.000
you have no way of enforcing that in your CI CD.

05:34.000 --> 05:39.000
So while CMSs and XML DEDA may seem really cool,

05:39.000 --> 05:45.000
I would highly recommend from my experience that you use markdown, GitHub,

05:45.000 --> 05:49.000
some kind of IDE like Visual Studio Code.

05:49.000 --> 05:57.000
You'll find that maintenance is much easier because you've minimized the friction to contributions.

05:57.000 --> 05:59.000
Engagement.

05:59.000 --> 06:01.000
So you've told people what you need.

06:01.000 --> 06:03.000
You've given them guidelines.

06:03.000 --> 06:04.000
You've given them samples.

06:04.000 --> 06:06.000
You've given them models.

06:06.000 --> 06:10.000
You have used the tools that they are also using.

06:10.000 --> 06:12.000
Don't leave them alone.

06:12.000 --> 06:13.000
Engage.

06:13.000 --> 06:18.000
If you see a PR that comes in from an outside contributor,

06:18.000 --> 06:21.000
make sure you respond to it in a pretty timely fashion.

06:21.000 --> 06:26.000
That could be two weeks, but maybe it's not six months.

06:26.000 --> 06:34.000
Documentation, additions, and PRs are very, very often the stepping stone into your project.

06:34.000 --> 06:40.000
It's when a contributor is checking to see whether it's a welcoming space,

06:40.000 --> 06:43.000
whether their contributions would actually add value.

06:43.000 --> 06:49.000
The number of typo fixes that we get, because we're not perfect in our technical writing team,

06:49.000 --> 06:52.000
the number of typo fixes we get is actually quite large.

06:52.000 --> 06:57.000
And it's because users know that that's a quick and easy fix.

06:57.000 --> 07:02.000
So as soon as they've given this contribution to you, welcome them.

07:02.000 --> 07:04.000
Take their contribution.

07:04.000 --> 07:06.000
And the next thing you know, they may have built you a full tutorial.

07:06.000 --> 07:09.000
They may have updated all your reference documentation.

07:09.000 --> 07:14.000
They may have done something really amazing to move your documentation forward.

07:14.000 --> 07:18.000
But if you leave them like the Cookie Monster here in this GIF,

07:18.000 --> 07:21.000
they're never going to come back to your project,

07:21.000 --> 07:28.000
because it doesn't feel like it's a safe and welcoming space.

07:28.000 --> 07:32.000
On the other hand, there are times when you receive a PR and you're,

07:32.000 --> 07:37.000
you know, it's just not necessarily the right thing to spend time on.

07:37.000 --> 07:39.000
It's a really hard decision.

07:39.000 --> 07:44.000
In an open source environment, we like to think that every contribution is welcome.

07:44.000 --> 07:50.000
But there's two major areas where we say, you know, this isn't really particularly valuable to the project.

07:50.000 --> 07:58.000
One is when the work to make that PR of a high enough quality to produce and publish

07:58.000 --> 08:03.000
is greater than the value that's being brought in the PR itself.

08:03.000 --> 08:07.000
You can engage with your contributor, point them to your guidelines,

08:07.000 --> 08:10.000
see if they can rectify the PR on their own.

08:10.000 --> 08:13.000
Or you can delve in and do the full edit.

08:13.000 --> 08:16.000
But sometimes you don't have time for that,

08:16.000 --> 08:19.000
and sometimes it's not as valuable as you would like it to be.

08:19.000 --> 08:25.000
So in those situations, be kind, be respectful, but you may close the PR.

08:25.000 --> 08:32.000
The second thing that we have found sometimes occurs is we will have a contributor who comes forward

08:32.000 --> 08:37.000
with a very distinct perspective that may not align with what we're trying to accomplish with our documentation,

08:37.000 --> 08:43.000
or is adding information that may work on their machine, but doesn't work on ours.

08:43.000 --> 08:50.000
And again, be kind, be respectful, and often those things will turn,

08:50.000 --> 08:55.000
but sometimes they won't, and in that case, close the PR.

08:55.000 --> 08:57.000
My main message here is don't let things linger.

08:57.000 --> 09:02.000
If you've decided that this is not something that's going to be valuable to your project,

09:02.000 --> 09:04.000
respond and close the PR.

09:04.000 --> 09:07.000
It's part of the process of engagement.

09:07.000 --> 09:10.000
If you leave those things open, the community will feel like,

09:10.000 --> 09:14.000
well, I don't understand why this isn't being moved forward or what's happening with it.

09:14.000 --> 09:19.000
So make sure that you're pretty responsive within a reasonable timeframe,

09:19.000 --> 09:25.000
and reasonable will vary according to the project.

09:25.000 --> 09:28.000
Data really helps in determining the know.

09:28.000 --> 09:35.000
We have a wide variety of data that we look at where Grafana is an observability monitoring company.

09:35.000 --> 09:39.000
Unsurprisingly, I have a dashboard that I look at on a really regular basis.

09:39.000 --> 09:44.000
But when you're just starting out, these are the key items that I would recommend that you look at.

09:44.000 --> 09:51.000
You want to make sure that you're looking, if you have a website, the number of visitors to a page

09:51.000 --> 09:57.000
that will help determine your top 10 and where you probably want to start if you're looking at maintenance issues.

09:57.000 --> 10:03.000
You also want to look at time on the page, and this is a bit of a subtle data point.

10:03.000 --> 10:10.000
Some pages that you write are going to be specifically created for users to move to something else,

10:10.000 --> 10:13.000
so you don't want them to spend a lot of time on the page.

10:13.000 --> 10:17.000
But if you have a page that's quite detailed and has a lot of information,

10:17.000 --> 10:23.000
and users are bouncing off of it in 35 seconds, there may be something wrong with that page.

10:23.000 --> 10:28.000
And you might want to create an issue and put a help wanted note on it so your community can help improve it,

10:28.000 --> 10:34.000
or give you feedback on why it is that they're moving so quickly away from the content you've provided.

10:34.000 --> 10:40.000
Data of Last Update helps you know how stale your content is.

10:40.000 --> 10:48.000
And some open source projects actually will put in the front matter of their files a date of Last Update

10:48.000 --> 10:53.000
and run a cron job on a monthly basis to see if something's six months or more out of date

10:53.000 --> 10:59.000
and check in with the subject matter experts or the maintainers of that page and ask them,

10:59.000 --> 11:03.000
does this need to be updated? It's been a while since you last looked at it.

11:03.000 --> 11:06.000
And then also look at your accessibility scores.

11:06.000 --> 11:12.000
And by accessibility, I mean how quickly the page loads and other elements such as the use of the color

11:12.000 --> 11:19.000
and whether or not it renders properly on mobile.

11:19.000 --> 11:25.000
So, seven lessons learned. I've been working in technical documentation for a couple of decades,

11:25.000 --> 11:30.000
so this is a very short list and I'm happy to talk about other lessons learned.

11:30.000 --> 11:34.000
Number one lesson is one big swing will not get you far enough.

11:34.000 --> 11:40.000
And one big swing refers to in many projects, people realize the documentation is drifted

11:40.000 --> 11:44.000
and they'll decide, okay, we're going to have a two-week time period or a three-week project

11:44.000 --> 11:47.000
where we're all going to dig in and work on the documentation

11:47.000 --> 11:50.000
and it's going to be fabulous at the end of this.

11:50.000 --> 11:54.000
We've done this a couple of times at Grafana and it has failed.

11:54.000 --> 11:58.000
And it hasn't failed because people don't have good intent.

11:58.000 --> 12:03.000
It hasn't failed because they don't have information of their fingertips about what needs to be updated.

12:03.000 --> 12:08.000
It's failed because one big swing will not take you far enough.

12:08.000 --> 12:12.000
You will get distracted from the project, you will work on something else,

12:12.000 --> 12:16.000
you will get a customer escalation, someone might take PTO.

12:16.000 --> 12:22.000
If documentation maintenance is not already part of the culture of that project,

12:22.000 --> 12:25.000
fixing it in a one-time go is not going to improve it.

12:25.000 --> 12:31.000
But that's actually a really valuable lesson because what that helps the project maintainers understand

12:31.000 --> 12:36.000
is, wow, we kind of thought we could get this done in a two-week period, three-week period,

12:36.000 --> 12:43.000
and now we recognize that we need to incorporate it into our daily business and into our daily updates.

12:43.000 --> 12:48.000
So that in and of itself can be quite a valuable exercise.

12:48.000 --> 12:52.000
If you're overwhelmed, like where do I start?

12:52.000 --> 12:55.000
I have such a wide swath of content that needs to be updated.

12:55.000 --> 12:59.000
Help your users get from zero to one.

12:59.000 --> 13:04.000
It sounds kind of basic, but start with the beginning of getting started.

13:04.000 --> 13:08.000
Make sure that you have a really watertight get started.

13:08.000 --> 13:16.000
Once users have gotten started with your project, they'll be much more forgiving of other areas that need better content.

13:16.000 --> 13:20.000
And they'll probably help you.

13:20.000 --> 13:28.000
Maintenance really only works if you have a commitment to open source documentation that lives in an open source project.

13:28.000 --> 13:36.000
When you move the documentation out, you will see that the documentation begins to regress.

13:36.000 --> 13:41.000
Linting, using something like a veil linter, is your friend.

13:41.000 --> 13:43.000
It helps move the PRs through more quickly.

13:43.000 --> 13:47.000
It helps identify more quickly for contributors where they haven't met a guideline,

13:47.000 --> 13:53.000
and it removes some of the toil of making that PR good.

13:53.000 --> 13:55.000
Guidelines increase your contributions.

13:55.000 --> 13:57.000
People know how to help you.

13:57.000 --> 14:01.000
They know where to go for guidance and samples and models.

14:01.000 --> 14:05.000
But make sure you're being flexible with those guidelines and hearing what the community is telling you.

14:05.000 --> 14:13.000
When we wrote the Writer's Toolkit about a year and four months ago, we've iterated on that toolkit a number of times.

14:13.000 --> 14:14.000
It's an open source project.

14:14.000 --> 14:17.000
We're happy to have issues and PRs opened against it.

14:17.000 --> 14:22.000
We've definitely course corrected in a couple of areas because we thought something was going to work.

14:22.000 --> 14:25.000
It didn't work as expected.

14:25.000 --> 14:27.000
And remember, it's okay to say no.

14:27.000 --> 14:32.000
After you've gotten everybody off and running on your project and they're really excited and you've told them how to do it,

14:32.000 --> 14:37.000
if the PRs still aren't good, it is okay to say no.

14:37.000 --> 14:38.000
That's it.

14:38.000 --> 14:46.000
Thank you so much.

14:46.000 --> 14:57.000
Okay, thank you for the talk and you are available outside for questions.

14:57.000 --> 14:58.000
Here's this.

14:58.000 --> 14:59.000
I don't know.

14:59.000 --> 15:00.000
Thank you for your talk.

15:00.000 --> 15:01.000
Thank you so much for the introduction.

15:01.000 --> 15:03.000
I appreciate you for heralding and volunteering your time.

