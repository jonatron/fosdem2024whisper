WEBVTT

00:00.000 --> 00:12.000
All right. Thanks so much for being here and thanks so much for having me.

00:12.000 --> 00:15.500
So this is not really a hardware topic per se yet,

00:15.500 --> 00:20.000
unless buildings qualify as hardware too.

00:20.000 --> 00:23.000
But let's talk a bit about them.

00:23.000 --> 00:26.000
So we have exchanged buildings for a long time.

00:26.000 --> 00:36.000
So these are just like sets of line drawings without really computer readable semantics associated to them.

00:36.000 --> 00:43.000
I don't know, maybe there's a parallel to how the PCB community exchange models.

00:43.000 --> 00:47.000
But I don't know, I would say for the last 10 years or so,

00:47.000 --> 00:53.000
we're more and more exchanging buildings as rich, semantic data models,

00:53.000 --> 01:01.000
where the models we exchange have also a meaning that computers can relate to.

01:01.000 --> 01:10.000
And so in 2011 I started IFC OpenShell, which is a software library for dealing with these kind of models.

01:10.000 --> 01:12.000
IFC is the open standard.

01:12.000 --> 01:20.000
It's called the industry foundation classes, which is kind of a meaningless name.

01:20.000 --> 01:35.000
But that's where the name comes from. IFC OpenShell is one of the geometrical forms you can use to exchange representations of your building elements.

01:35.000 --> 01:43.000
IFC is also very much inspired by STEP, which is probably a standard familiar to most of you.

01:43.000 --> 01:46.000
So if you're familiar with STEP, you know, OpenShell.

01:46.000 --> 01:51.000
And in IFC we just prefixed everything with IFC.

01:51.000 --> 02:00.000
And then right there is some point, you see that there is, well, I wouldn't call it a spike.

02:00.000 --> 02:09.000
It's really like, I don't know, a mountain ridge of new contributors that came on board and that's with the Blender Boom add-on.

02:10.000 --> 02:17.000
So in my work I'm mostly focused on analysis of these kind of models.

02:17.000 --> 02:32.000
And then, yeah, Dion Mold came on board and he started actually writing an authoring tool on top of IFC OpenShell that allowed people to really graphically create models.

02:32.000 --> 02:37.000
And, well, you can see the effect of that in terms of contributors.

02:37.000 --> 02:46.000
So we have quite a bit of modules, but in essence we have a parsing library, geometry, geometry interpretation,

02:46.000 --> 02:53.000
so that we use predominantly open cascade, hopefully familiar to some of the people in the room,

02:53.000 --> 03:00.000
to read these kind of geometry definitions and translate them to BRAPs and then interact with them in a bunch of ways,

03:00.000 --> 03:07.000
convert them to desolated formats or, yeah, some other things.

03:09.000 --> 03:13.000
So I started my module mostly in C++.

03:13.000 --> 03:19.000
The Python has been hovering around zero for quite some years.

03:21.000 --> 03:26.000
And it basically had to do with the ecosystem, so open cascade is C++.

03:26.000 --> 03:31.000
Because, yeah, it doesn't leave you much of a choice.

03:31.000 --> 03:41.000
But quite soon on we realized that if you really want a wider movement, a richer ecosystem connecting different modules,

03:41.000 --> 03:49.000
but also the BIM world is rather academic, so we have quite a bit of students,

03:49.000 --> 03:54.000
or software developers doing rapid prototyping.

03:54.000 --> 04:05.000
So it really made a lot of sense to have an interpreted language with a more accessible syntax.

04:07.000 --> 04:12.000
Yeah, so also quite early on we started having Python bindings.

04:12.000 --> 04:17.000
And then, yeah, you see the same spike here basically in terms of contributors.

04:17.000 --> 04:22.000
That Blender BIM add-on is built on top of Blender, you might have guessed.

04:22.000 --> 04:27.000
And Blender is also obviously a wonderful piece of software, very extensible.

04:27.000 --> 04:33.000
And also, yeah, the client-side code is mostly in Python.

04:33.000 --> 04:40.000
But it's not only that, it's also really a higher-level API that was being built on top of a low-level,

04:40.000 --> 04:44.000
let's say instance manipulation we had.

04:44.000 --> 04:51.000
So, yeah, I see it's really an extensive schema.

04:51.000 --> 04:58.000
It's roughly a thousand to a two thousand classes or data types.

04:58.000 --> 05:04.000
And if you really want to interact with that in a meaningful way, you need to operate on a bit of a higher level.

05:04.000 --> 05:10.000
And that's also where the steep increase in Python code is coming from.

05:10.000 --> 05:18.000
But what my topic for today is really the geometrical challenges that I encounter.

05:18.000 --> 05:23.000
Because our industry is really multidisciplinary.

05:23.000 --> 05:35.000
So, for example, what we exchange as building models are really detailed decompositions of the building into very specific elements.

05:35.000 --> 05:41.000
So, one wall, one ceiling plate, and all the kind of supporting structure.

05:41.000 --> 05:47.000
But if you look at the building code people, this is from the city of New York, for example,

05:47.000 --> 05:54.000
they want to ask questions on much higher abstract levels such as the facade.

05:54.000 --> 05:57.000
So, this is, well, it's New York.

05:57.000 --> 06:03.000
So, they envision there is something like a base on top of which a tower is built.

06:03.000 --> 06:09.000
And there are requirements about the proportion regarding base and tower.

06:09.000 --> 06:13.000
But none of these things exist in bin models.

06:13.000 --> 06:19.000
We don't even have a facade, we just have this bag of elements.

06:19.000 --> 06:24.000
But we have other, let's say, different perspectives on geometry.

06:24.000 --> 06:27.000
If you want to do thermal simulation.

06:27.000 --> 06:37.000
If we are here in this room generating a lot of heat and that heat dissipates to neighboring spaces.

06:37.000 --> 06:43.000
And then you're also not really interested in all the detailed elements that make up your building.

06:43.000 --> 06:51.000
You just want to have basically a graph of spaces and thermal interfaces between them.

06:52.000 --> 07:01.000
And there are ways to exchange this information as part of IFC building models.

07:01.000 --> 07:06.000
But the generation of them is still rather buggy.

07:06.000 --> 07:08.000
And that's also the challenge, of course.

07:08.000 --> 07:13.000
Does every authoring tool need to implement this kind of generation of data?

07:13.000 --> 07:19.000
Or are we going to opt for a more collaborative ecosystem of tools?

07:19.000 --> 07:26.000
Where you just generate a building model and there is other tools to enrich those models.

07:26.000 --> 07:33.000
And that is what I'm really hoping for, but it's not what we're currently seeing in the industry yet.

07:33.000 --> 07:37.000
Geospatial people, they really want to focus on the things you can see.

07:37.000 --> 07:43.000
They come from GIS, so they can only observe what is actually visible to them.

07:44.000 --> 07:50.000
So they don't really want to deal with this kind of invisible surfaces.

07:50.000 --> 07:57.000
They just want to have manifold representations of interior or exterior shells.

07:57.000 --> 08:01.000
But so this is what we have as a building model.

08:01.000 --> 08:10.000
And as a summary, what we want to generate, for example, is this representation of just a facade that joins across these walls.

08:10.000 --> 08:14.000
And it could be thousands of wall elements.

08:14.000 --> 08:19.000
The further you are in your development process of the building,

08:19.000 --> 08:29.000
the more you're going to decompose these things into the actual physical things that are going to exist in reality.

08:29.000 --> 08:33.000
But yeah, the data comes from heterogeneous sources.

08:33.000 --> 08:39.000
I really want to advocate for an ecosystem because we already have an open standard.

08:39.000 --> 08:47.000
Yeah, let's have a more collaborative ecosystem where we can augment this data.

08:47.000 --> 08:53.000
Here, the interior, where you really want to know, for example, will I bump my head here?

08:53.000 --> 08:58.000
But in normal models, these kind of representations don't exist.

08:58.000 --> 09:04.000
You don't have this higher level representation of the interior.

09:04.000 --> 09:14.000
You might have a description of the space, but it wouldn't be enriched with all the geometries that further eat out of that volume.

09:14.000 --> 09:19.000
And of course, none of this is ultimately very precise.

09:19.000 --> 09:28.000
So there is gaps either accumulated due to floating point rounding errors or manual sloppiness or also on purpose.

09:28.000 --> 09:38.000
If you're building a building, you have to accommodate for the fact that the walls, especially this metal,

09:38.000 --> 09:42.000
they are expanding and contracting depending on the temperature.

09:42.000 --> 09:48.000
So there are also actual gaps between these elements in reality in more detailed models.

09:48.000 --> 09:57.000
So maybe that representation that I just showed of the facade doesn't in reality really exist as a volume.

09:58.000 --> 10:01.000
And then, so how to solve that?

10:01.000 --> 10:08.000
Naively, you would maybe think, yeah, let's just Boolean union these things together and call it a day.

10:08.000 --> 10:16.000
But yeah, that's quite a challenge in terms of performance.

10:16.000 --> 10:18.000
But you also have to make a choice there.

10:18.000 --> 10:32.000
Are you going to rely on these kind of fuzzy Boolean operations that allow for a certain imprecision or still join these disjoint volumes,

10:32.000 --> 10:37.000
even if there is a nanometer or millimeter gap between them?

10:37.000 --> 10:42.000
Or that's the open cascade paradigm, for example.

10:43.000 --> 10:50.000
Or are you going to rely on these kind of exact Boolean operations that, for example, CGAL offers?

10:50.000 --> 10:56.000
CGAL has a very interesting number type, I think, where a number is just not just a number.

10:56.000 --> 11:02.000
It's basically a binary tree of all the operations that were used to construct a number.

11:02.000 --> 11:07.000
And as such, it is really arbitrarily precise.

11:07.000 --> 11:11.000
There is never any rounding occurring.

11:11.000 --> 11:16.000
But it obviously has a monumental performance impact.

11:16.000 --> 11:25.000
And it's also not maybe necessarily what you want, because you want to join across these kind of imprecision issues.

11:25.000 --> 11:36.000
So earlier attempts, yeah, they made the performance problem even more extreme by using a Minkowski sum.

11:36.000 --> 11:43.000
So you have kind of a padding volume that you apply to every element and enlarge it slightly,

11:43.000 --> 11:46.000
and then union them together and then shrink.

11:46.000 --> 11:51.000
But this is not really feasible on detailed models.

11:51.000 --> 12:02.000
So what I try to do for this particular problem, and I hope this is going to end up in...

12:02.000 --> 12:10.000
Yeah, I'm showing mostly experiments, but I hope that this will really at some point also be part of, let's say,

12:10.000 --> 12:13.000
the core parts of my software library.

12:13.000 --> 12:22.000
But what I'm doing here, for example, is decomposing these solid volumes into trees of half-spaces.

12:22.000 --> 12:30.000
And then the neighboring half-spaces average these out.

12:30.000 --> 12:40.000
So the two faces here, here and here, of these two disjoint walls, yeah, they are merged or aligned.

12:40.000 --> 12:43.000
And the same here and the same here.

12:43.000 --> 12:54.000
So this really allows for some sort of local adjustment, so that you're really sure that things snap into place.

12:54.000 --> 13:03.000
And also, it really causes very neat models because there is almost no intermediate vertices

13:03.000 --> 13:10.000
because all the nearly coplanar surfaces were exactly aligned.

13:10.000 --> 13:16.000
But this is still a challenge to make this work on the really detailed models.

13:16.000 --> 13:24.000
Another example where I used half-spaces is if, yeah, for example, the facility management people,

13:24.000 --> 13:28.000
they also operate on a much higher level.

13:28.000 --> 13:30.000
They don't care about every rentable unit.

13:30.000 --> 13:32.000
They want to have aggregates of those.

13:32.000 --> 13:39.000
How many square meters of rentable space do I have across these models?

13:39.000 --> 13:45.000
And these interior partitions, you don't really care about them because tenants can remove them anyway.

13:45.000 --> 13:53.000
So you include them in your square meter counts, which means that you basically need to take this volume

13:53.000 --> 14:02.000
and extend it to this volume for them to touch and then union these together.

14:02.000 --> 14:07.000
So for that, I used Sparkle, RDF Lib in Python.

14:08.000 --> 14:17.000
I built, this is what you see here, is a graph of spaces, the half-spaces bounding the spaces.

14:17.000 --> 14:22.000
These are touching the faces of the wall.

14:22.000 --> 14:24.000
And in the wall, you have an opposite.

14:24.000 --> 14:27.000
And so we really form a graph.

14:27.000 --> 14:31.000
And then I query that graph based also on sabantics.

14:31.000 --> 14:38.000
And of course, only the non-load-bearing walls that I can aggregate over.

14:38.000 --> 14:43.000
And, yeah, as such, this is this kind of patchwork blanket,

14:43.000 --> 14:48.000
is all the individual spaces that are in a model like this.

14:48.000 --> 14:51.000
And then what the facility management people want to know is this.

14:51.000 --> 14:54.000
So this is all inhabitable spaces, I think.

14:54.000 --> 15:00.000
So without utilities are these kind of things.

15:01.000 --> 15:08.000
But, yeah, there are large performance problems still with these kind of approaches.

15:08.000 --> 15:18.000
These arbitrarily precise operations in Seagull, it's really immensely robust.

15:18.000 --> 15:29.000
The first I really come from, let's say, I've 10 years of working experience with Obakas Cade.

15:29.000 --> 15:36.000
So you come to lower your expectations a bit in terms of what works,

15:36.000 --> 15:42.000
how many crashes did you encounter when you load complex models.

15:42.000 --> 15:45.000
And then in Seagull, everything just works.

15:45.000 --> 15:52.000
It's not always what you want, but that is then your own fault, typically.

15:52.000 --> 15:56.000
But, yeah, still really computationally intensive.

15:56.000 --> 16:03.000
So as a side project, I've also written my own foxalization library.

16:03.000 --> 16:15.000
Because, yeah, especially these kind of challenges, superimposing a lot of elements into the same domain,

16:15.000 --> 16:25.000
closing certain minimal gaps, yeah, that's really what foxalization is perfect for.

16:26.000 --> 16:33.000
And, yeah, this, so maybe if you would want to union all these kind of building elements in, yeah,

16:33.000 --> 16:36.000
in Obakas Cade, it just wouldn't work.

16:36.000 --> 16:38.000
It's not robust enough in Seagull.

16:38.000 --> 16:42.000
It will take a considerable amount of time.

16:42.000 --> 16:47.000
And in foxalization, it's really just, yeah, I wouldn't call it instant.

16:47.000 --> 16:50.000
You have to deal with a different set of challenges.

16:50.000 --> 16:56.000
Suddenly, the complexity is no longer based on, let's say, vertex and face counts,

16:56.000 --> 17:03.000
but it's really based on, yeah, actual, the physical dimensions of your building.

17:03.000 --> 17:08.000
So if you're building a larger building, your computation takes longer.

17:08.000 --> 17:18.000
But it's still, yeah, it does perform better than Seagull, I would say.

17:18.000 --> 17:22.000
Yeah, and then you can do topological queries on those again.

17:22.000 --> 17:27.000
So, yeah, this is a very famous testing model that we use in our industry,

17:27.000 --> 17:31.000
but I expect it's a little bit cryptic for you to read.

17:31.000 --> 17:39.000
But let's say this is exterior space, and here is a door, here is a door, here is a door, here is a door.

17:39.000 --> 17:42.000
Here you see a little bit of a stairway.

17:42.000 --> 17:49.000
So it's really three-dimensional, but I've kind of folded every 3D volume.

17:49.000 --> 17:56.000
I flatten it over the Z-axis to kind of get a 3D volumetric,

17:56.000 --> 18:03.000
a foxal grid of just, yeah, let's say, the mast that we can walk on.

18:03.000 --> 18:08.000
Yeah, and then you can just do topological queries again on those

18:08.000 --> 18:14.000
to see how long is the evacuation distance from a particular point in time.

18:14.000 --> 18:20.000
And I'm not saying it's not possible on, let's say, regular polyhedra or B-Rab's,

18:20.000 --> 18:22.000
people have been doing that.

18:22.000 --> 18:32.000
Yeah, but I came to really appreciate how trivial those kind of operations are on foxal grids.

18:32.000 --> 18:34.000
Same for the headroom, basically.

18:34.000 --> 18:44.000
It's the same kind of idea where I start from the 3D volumetric space interior that we can breathe in.

18:44.000 --> 18:51.000
I flatten that over the Z-axis to just the little surface where we can stand on.

18:51.000 --> 18:56.000
But I remember how many foxals I flattened downwards,

18:56.000 --> 19:03.000
and based on some sort of color coding or threshold, that's either sufficient or not.

19:04.000 --> 19:11.000
So, yeah, you can see here under the stair that there is obviously a little bit less space to stand.

19:13.000 --> 19:21.000
So for this, these kind of, yeah, when we started this project,

19:21.000 --> 19:28.000
we envisioned that end users would be writing their own kind of analysis scripts.

19:28.000 --> 19:39.000
So here you see visually all the operations that were involved in one of these,

19:39.000 --> 19:45.000
in one of these, I don't remember which one,

19:45.000 --> 19:50.000
but one of these computation graphs to union those foxals,

19:50.000 --> 19:54.000
subtract a bunch of things through these traversals,

19:55.000 --> 20:00.000
to really figure out the space where we can stand.

20:00.000 --> 20:09.000
We also do some sort of padding so that we don't start walking in like two centimeter areas.

20:09.000 --> 20:16.000
We kind of assume that we have a little bit of a body, so all the obstacles are dilated a bit.

20:16.000 --> 20:23.000
Some of these things are also element-specific, so we do specific things with the railings.

20:23.000 --> 20:34.000
I don't remember the details, but we really created our own little scripting library for these kind of things.

20:34.000 --> 20:37.000
I don't remember why we just didn't create Python bindings.

20:37.000 --> 20:44.000
That seems like it's easier than really creating your own language with your own interpreter,

20:44.000 --> 20:48.000
but at that time that's what I did for some reason.

20:49.000 --> 20:57.000
Obviously nobody has ever tried to create their own little analysis script to do these kind of things,

20:57.000 --> 21:05.000
but as you can imagine it also requires some documentation and stuff that we also didn't provide,

21:05.000 --> 21:08.000
but it was really fun to work on.

21:08.000 --> 21:16.000
What I see as the advantages of this kind of foxalization, you can also associate numbers to yourselves.

21:16.000 --> 21:22.000
What you see in the headroom analysis where you can stand and the evacuation analysis,

21:22.000 --> 21:26.000
you can really associate a number with every cell.

21:26.000 --> 21:32.000
It's also in a uniform way across every dimension.

21:32.000 --> 21:35.000
That's also a bit harder on poly-heat writing.

21:35.000 --> 21:40.000
Bullying operations are really just that, bullying operations.

21:41.000 --> 21:47.000
If you superimpose two cells, a one and a one becomes a one, a one and a zero becomes a one.

21:47.000 --> 21:54.000
That was really, if I can implement bullying operations, then it's trivial.

21:54.000 --> 22:03.000
It's efficient to calculate distances also, and we close these gaps.

22:04.000 --> 22:12.000
I think for our built environment sector it's really quite a good match for some analysis.

22:16.000 --> 22:21.000
I've seen OpenShell going back to where it all started for me.

22:21.000 --> 22:24.000
It's quite an extensive software library.

22:25.000 --> 22:33.000
It has all the different revisions of the IFC schema.

22:33.000 --> 22:36.000
It has these geometry mapping functions.

22:36.000 --> 22:45.000
There's about, let's say, 200 classes in IFC that somehow affect geometry or representation.

22:45.000 --> 22:51.000
They have an implication on our B-Wrap conversion to OpenFascade.

22:51.000 --> 22:55.000
They have these conversion functions.

22:55.000 --> 22:59.000
Then we rely on OpenFascade.

22:59.000 --> 23:05.000
It's gotten quite a large code base.

23:05.000 --> 23:17.000
In the new version, I have been playing, well, if it's been happening for various years now,

23:17.000 --> 23:25.000
so I shouldn't call it playing anymore, but let's say working on the idea to support multiple geometry libraries.

23:25.000 --> 23:33.000
The robustness of OpenFascade has really improved dramatically over the past 12 years.

23:33.000 --> 23:38.000
It's really a usable, very powerful software library now.

23:38.000 --> 23:42.000
But there are still cases, if there are issues being reported on my get up,

23:42.000 --> 23:47.000
where I have to say, yeah, this takes me two months of investigation.

23:47.000 --> 23:50.000
I'm sorry, I just cannot help you with this.

23:50.000 --> 23:53.000
In that sense, I have some hope.

23:53.000 --> 23:58.000
If I have a secondary geometry implementation in Seagal,

23:58.000 --> 24:01.000
that I can really provide the best of both worlds,

24:01.000 --> 24:06.000
also to people that want to do these kind of analysis that I just showed earlier,

24:06.000 --> 24:08.000
like aligning these half spaces.

24:08.000 --> 24:11.000
They have a better starting point with Seagal.

24:11.000 --> 24:17.000
But for that, I created my own taxonomy in the middle of geometrical concepts,

24:17.000 --> 24:25.000
so that this kind of implementation here is a little bit easier.

24:25.000 --> 24:30.000
Yeah, so what I've learned in all of this,

24:30.000 --> 24:34.000
so Seagal is predominantly only polyhedra.

24:34.000 --> 24:39.000
They have some sort of curved things in some packages hidden somewhere,

24:39.000 --> 24:42.000
mostly polyhedra.

24:42.000 --> 24:46.000
The exact rational number type I've talked about,

24:46.000 --> 24:52.000
they have an interval that wraps them for performance.

24:52.000 --> 24:55.000
They have good documentation,

24:55.000 --> 25:01.000
but I find their set of packages somewhat incoherent and chaotic.

25:01.000 --> 25:03.000
You don't always know where you need to look,

25:03.000 --> 25:06.000
and it's not always easy to go from one package to the other.

25:06.000 --> 25:09.000
And I think the focus is rather academic.

25:09.000 --> 25:13.000
A lot of the CAD concepts that maybe we rely on,

25:13.000 --> 25:16.000
they don't necessarily offer out of the box.

25:16.000 --> 25:21.000
And maybe you can read for yourself what I think about OpenCascade.

25:21.000 --> 25:24.000
And that's it for me today.

25:24.000 --> 25:26.000
Thank you so much.

25:26.000 --> 25:29.000
Thank you.

25:32.000 --> 25:37.000
Okay, do we have any questions?

25:37.000 --> 25:38.000
Yes.

25:38.000 --> 25:46.000
Do you see any use for the Seagal library to help with the OpenCascade geometry?

25:46.000 --> 25:53.000
Yeah, great question.

25:53.000 --> 25:59.000
So the question is, to what extent can maybe these libraries also help each other,

25:59.000 --> 26:05.000
enrich each other, and not only exist as two choices at runtime,

26:05.000 --> 26:11.000
but also how do we make sure that the library is not only available

26:11.000 --> 26:17.000
and not only exists as two choices at runtime.

26:17.000 --> 26:22.000
I haven't really explored that yet.

26:22.000 --> 26:29.000
So far I'm only at the point of, yeah, you can try one, if it fails, try the other.

26:29.000 --> 26:35.000
I think what I would at least want to do is kind of automate that process.

26:35.000 --> 26:42.000
So that the software tries the first one, and if they're precious or produce bad results,

26:42.000 --> 26:46.000
automatically try the second one.

26:46.000 --> 26:54.000
As a next step, I would envision that I'm able to rewrite the results from one library to the other.

26:54.000 --> 27:01.000
And yeah, by that time, you would maybe use, indeed,

27:02.000 --> 27:05.000
a more intelligent combination of the two.

27:05.000 --> 27:10.000
Like this Minkowski sum that I showed make an element a little bit larger

27:10.000 --> 27:18.000
and also relies on convex decomposition that you decompose your element into convex parts.

27:18.000 --> 27:23.000
Yeah, that is really quite powerful and something that I think only Seagal offers.

27:23.000 --> 27:28.000
If you can bring that maybe to OpenCascade for some reason,

27:28.000 --> 27:30.000
that's a very good use case in mind.

27:30.000 --> 27:34.000
I think that would be quite powerful.

27:34.000 --> 27:38.000
But so far no plans. It's quite slow process.

27:38.000 --> 27:40.000
Thanks for the question.

27:40.000 --> 27:42.000
Yeah, please.

27:42.000 --> 27:47.000
I had a question regarding the open spaces that you have between walls for dilutation.

27:47.000 --> 27:52.000
Exists there a class for defining the dilutation?

27:52.000 --> 27:56.000
Because then the next thing would be that you interpret it in a different way.

27:56.000 --> 28:01.000
Does it all put a flexible material in it for strength calculations?

28:01.000 --> 28:03.000
Interesting question.

28:03.000 --> 28:09.000
So the question is, I mentioned earlier that walls are not always connected to account for, yeah,

28:09.000 --> 28:12.000
dilutation that elements can grow and shrink a bit.

28:12.000 --> 28:20.000
And is there a specific class to encode that information in the models so that that can also be handled?

28:20.000 --> 28:25.000
I would say yes and no.

28:25.000 --> 28:35.000
If you would want to, I would say the standard is flexible enough to encode that information.

28:35.000 --> 28:37.000
The standard is also very asparic.

28:37.000 --> 28:39.000
There's a geometry description.

28:39.000 --> 28:41.000
There is a taxonomy of types of elements.

28:41.000 --> 28:46.000
And you can also refer to other classifications.

28:46.000 --> 28:50.000
So if you want, you can encode that information.

28:50.000 --> 28:57.000
And the problem with that is also that I've seen is used to exchange information from one person to the other.

28:57.000 --> 29:01.000
And there's a lot of inherent knowledge that we all rely on.

29:01.000 --> 29:12.000
So, yeah, if two walls don't exactly match, there is probably some textual description there that still says,

29:12.000 --> 29:15.000
well, this needs to be sealed with that and that.

29:15.000 --> 29:19.000
And that's obviously also much more efficient.

29:19.000 --> 29:21.000
It's difficult to interpret for a computer.

29:21.000 --> 29:28.000
Yeah, but people in our industry, I have to admit, don't really care about that.

29:28.000 --> 29:41.000
I mean, it is a machine interpretable standard, but people still use it predominantly only for communication and coordination.

29:41.000 --> 29:44.000
So you can, let's say, superimpose the geometries.

29:44.000 --> 29:51.000
If there is a beam going through a wall where there is no hole, yeah, you have to call each other and solve that.

29:51.000 --> 29:56.000
But actual computational analysis on these models is rather rare.

29:56.000 --> 29:57.000
Thank you.

29:57.000 --> 29:59.000
Thanks.

29:59.000 --> 30:00.000
Yeah?

30:00.000 --> 30:01.000
Two.

30:01.000 --> 30:04.000
There is a microphone on this way.

30:04.000 --> 30:05.000
Hello.

30:05.000 --> 30:10.000
When we say about IFC, we should remember about the versions of IFC.

30:10.000 --> 30:16.000
What is about the versioning with your libraries and all this stuff and how you are related to all these things?

30:16.000 --> 30:21.000
I mean, the versions of the standard because it's also going on.

30:21.000 --> 30:31.000
Yeah, and it's actually also one of the reasons why I had to create this mapping layer,

30:31.000 --> 30:43.000
because I didn't discuss it, but we indeed, for example, here, IFC 2, X3, IFC 4, we have more or less the same concepts.

30:43.000 --> 30:47.000
There are minor differences.

30:47.000 --> 30:59.000
But I haven't really found a way, for example, to account for the fact that these two classes, the polyline and 2, X3 and the polyline and IFC 4,

30:59.000 --> 31:04.000
that they are, let's say, 99% compatible.

31:04.000 --> 31:11.000
So it also really dramatically increases the compiled size of my platform,

31:11.000 --> 31:23.000
because everything is compiled multiple times with slight variations to account for the same, for the different schema versions.

31:23.000 --> 31:37.000
And yeah, there are other software libraries that maybe more start from above, have a unified schema and then allow to serialize that as version 2, X3 or version 4.

31:37.000 --> 31:44.000
But I have the more side-by-side as really computer-generated code from the schema.

31:44.000 --> 31:55.000
So yeah, we have migration scripts to go from the one to the other, but they are written by hand and probably not complete.

31:55.000 --> 31:59.000
Okay, one last question and then we're going to change over.

31:59.000 --> 32:00.000
Let's change over.

32:00.000 --> 32:03.000
Yeah, look at the render on what.

32:03.000 --> 32:07.000
So your voxelization code, how did you set the voxel size?

32:07.000 --> 32:10.000
Because I assume if you set them too small, you don't find the holes in the wall,

32:10.000 --> 32:12.000
and if you set them too big, you close up corridors.

32:12.000 --> 32:15.000
So do you have to do an optimization for the size of the voxel?

32:15.000 --> 32:19.000
And what sort of size are we talking about for a building?

32:19.000 --> 32:21.000
Yeah, great question.

32:21.000 --> 32:31.000
And the main consideration was actually performance and also memory usage,

32:31.000 --> 32:36.000
because yeah, it's really a cubic relationship.

32:36.000 --> 32:44.000
If you have the size of your voxels, your memory usage increases eightfold.

32:44.000 --> 32:52.000
So, but the good thing about the construction sector, as opposed to let's say general purpose CAD,

32:52.000 --> 32:56.000
is well, it all relates to us human bodies.

32:56.000 --> 33:02.000
So we're pretty sure about, let's say, the size of the geometries we're going to expect.

33:02.000 --> 33:12.000
And yeah, for that kind of reason, I also didn't create an optimization step to find the optimal voxel size,

33:12.000 --> 33:15.000
mostly just five centimeters.

33:15.000 --> 33:18.000
Okay, so thank you very much.

33:18.000 --> 33:21.000
We're going and that was excellent.

33:26.000 --> 33:28.000
Thank you.

