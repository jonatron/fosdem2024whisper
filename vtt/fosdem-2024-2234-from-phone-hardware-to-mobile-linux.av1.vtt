WEBVTT

00:00.000 --> 00:12.000
So thank you all for coming to the Fossil Mobile Dev Room.

00:12.000 --> 00:14.240
Happy to see that the room is quite full.

00:14.240 --> 00:15.920
Somebody sees the sign that the room is full.

00:15.920 --> 00:17.400
Please turn it on the outside.

00:17.400 --> 00:19.600
I have no idea how to do that.

00:19.600 --> 00:20.600
And Luca is here.

00:20.600 --> 00:24.200
He just made a master done post about standing on the stage.

00:24.200 --> 00:29.600
And yeah, I guess we are all excited to see Luca's talk from phone hardware to mobile

00:29.600 --> 00:30.600
Linux.

00:30.600 --> 00:36.600
So please give a round of applause for Luca.

00:36.600 --> 00:41.600
Hi, thank you all for coming.

00:41.600 --> 00:46.720
Yeah, this is my talk from phone hardware to mobile Linux at Fossil 2024.

00:46.720 --> 00:48.480
So about me, my name is Luca Weiss.

00:48.480 --> 00:50.360
I am an Android platform engineer at Fairphone.

00:50.360 --> 00:54.960
But I'm also an open source maintainer and contributor for projects like PostMarketers,

00:54.960 --> 00:58.240
which is a Linux distribution for mobile phones.

00:58.240 --> 01:04.200
OpenRazer and open source driver for Razer products, so keyboards and mice, and a bunch

01:04.200 --> 01:05.560
of Linux kind of stuff.

01:05.560 --> 01:09.240
And you can follow me on Masuda if you want.

01:09.240 --> 01:11.040
So what is this presentation about?

01:11.040 --> 01:17.480
So in order for me to really understand how to port Linux to a phone, I need some understanding

01:17.480 --> 01:22.680
of how the hardware works, because otherwise it's really obscure what it's doing, et cetera.

01:22.680 --> 01:28.200
Here I'm trying to go from the PCB level using Schematics, which are public for F4 and F5.

01:28.200 --> 01:31.760
Since it worked, that's quite useful for me.

01:31.760 --> 01:38.760
Also trying to say how Linux communicates with the different chips on the SSE, which

01:38.760 --> 01:41.120
protocols they use together.

01:41.120 --> 01:44.760
And even though you might not have Schematics for the device you are working on, generally

01:44.760 --> 01:50.760
these phone Schematics are quite similar, because they are based on some reference design.

01:50.760 --> 01:55.240
So even though it might be a bit different, the same concepts generally apply.

01:55.240 --> 01:58.160
So let's look a bit at the printed circuit board.

01:58.160 --> 02:04.320
Also kind of on the left side, you can see, I cannot really show you, pointer nicely,

02:04.320 --> 02:07.520
you can see a kind of a phone PCB.

02:07.520 --> 02:10.760
This is from the F2, which I found.

02:10.760 --> 02:15.880
The picture with the red arrow, or the chip with the red arrow, the big one, is both the

02:15.880 --> 02:19.400
SSE, but also the memory, like the RAM.

02:19.400 --> 02:23.760
On this device, on newer devices, the RAM is combined with also the, for example, the

02:23.760 --> 02:26.840
UFS storage, the internal storage.

02:26.840 --> 02:31.040
This is put on top, called package and package, so they are actually both chips on top of

02:31.040 --> 02:32.040
each other.

02:32.040 --> 02:41.000
It saves PCB space, so you can make it a smaller PCB, and also saves some signaling, or makes

02:41.000 --> 02:43.000
better connectivity between the two chips.

02:43.000 --> 02:47.920
And the chips itself, they are kind of these big array of pins.

02:47.920 --> 02:52.880
It's called ball grid array, because they are little solder balls.

02:52.880 --> 02:57.600
And these are like a thousand pins or something, and they all connect to the PCB, and that's

02:57.600 --> 03:01.000
kind of where everything's routed to.

03:01.000 --> 03:03.840
Yes.

03:03.840 --> 03:10.400
So then if we go kind of inside the SSE, so this is the one chip that you saw.

03:10.400 --> 03:13.800
Here you can see a so-called decap chip.

03:13.800 --> 03:16.000
Here the Snapdragon 845.

03:16.000 --> 03:20.560
And you can see only kind of the green area here, is actually the software Linux is running

03:20.560 --> 03:21.560
on.

03:21.560 --> 03:27.400
These are the, in this example, 8 ARM cores, and they are running kind of the Linux you

03:27.400 --> 03:28.400
interact with.

03:28.400 --> 03:31.040
But as you can see, there's a lot of other stuff on the SSE.

03:31.040 --> 03:34.120
Stuff like the modem, is a separate chip.

03:34.120 --> 03:37.160
There's a GPU, there's DSPs, et cetera.

03:37.160 --> 03:41.880
There's a lot of other things also running on the SSE.

03:41.880 --> 03:47.160
Most of them are booted up at runtime, so Linux is actually loading the firmware into RAM,

03:47.160 --> 03:51.520
and then you're booting these chips using some proprietary firmware.

03:51.520 --> 03:56.800
So, yeah, the firmware there is not for Linux, but for the separate chips on the device.

03:56.800 --> 04:01.800
Unfortunately for most devices, at least for the hacker community, unfortunately, it is,

04:01.800 --> 04:06.920
you cannot replace this firmware, because it's signed using private keys that are, where

04:06.920 --> 04:10.880
the public key of that key is burned into the SSE, so you cannot change this firmware.

04:10.880 --> 04:15.640
So only the manufacturer can change firmware, but in this way, kind of the manufacturer

04:15.640 --> 04:20.360
can also ensure that only trusted firmware is running on a device this way.

04:20.360 --> 04:24.840
So, yeah, all of these firmers, they're basically just executable files that get loaded.

04:24.840 --> 04:29.320
In this example here, for the ADSP firmware, it's just in the hexagon architecture, so

04:29.320 --> 04:31.840
it's just a different CPU architecture.

04:31.840 --> 04:38.280
But modem chips is also, I think, there's some firmware for different CPU architectures.

04:38.280 --> 04:45.560
I think 10-silic or something, I've heard, we just used for the video firmware.

04:45.560 --> 04:47.600
So yeah, now we go a bit into the software side.

04:48.000 --> 04:52.160
So kind of you saw that there's a lot of stuff on the SSE, but we also need some way to address

04:52.160 --> 04:57.840
this, because otherwise we can just run CPU instructions and they don't do much as in

04:57.840 --> 05:00.400
communicating with anything else.

05:00.400 --> 05:02.200
And so MMIO gets used for this.

05:02.200 --> 05:03.960
It's called memory mapped IO.

05:03.960 --> 05:09.040
This is kind of, I believe, what most or all ARM chips use, probably also on a lot of other

05:09.040 --> 05:11.640
CPU architectures.

05:11.640 --> 05:15.760
And you can kind of imagine this, so I guess you're probably all familiar with RAM, so

05:15.760 --> 05:20.520
you have some address space and you can write to it and you can read from it again.

05:20.520 --> 05:27.160
But kind of with MMIO, on different addresses, you can talk with different functionality.

05:27.160 --> 05:34.400
So for example, on some address, for example here on the address 0x100000, there's the

05:34.400 --> 05:38.520
GCC, the global clock controller.

05:38.520 --> 05:42.000
So you write to some bits there and then you activate some clock on SSE.

05:42.960 --> 05:48.320
Yeah, yeah, so just by writing to some addresses and reading from some addresses, you can kind

05:48.320 --> 05:51.520
of talk with the rest of the SSE.

05:51.520 --> 05:54.560
On the right side, you can see the same representation in the device tree.

05:54.560 --> 06:02.960
So this is the thing that Linux uses to let the kernel know, or not just Linux, but to

06:02.960 --> 06:07.720
let the kernel know kind of where it can talk with the different components and which drivers

06:07.720 --> 06:10.640
it can use for this.

06:10.640 --> 06:13.520
So you have a bunch of different nodes for the different addresses which kind of defines

06:13.520 --> 06:16.080
like what component is present at this address.

06:16.080 --> 06:19.720
And this needs to be statistically defined in the device tree, which is kind of similar

06:19.720 --> 06:22.480
to the ACPI firmware on x86.

06:22.480 --> 06:27.560
So there it's just kind of a bit differently included for the kernel, but it's included

06:27.560 --> 06:30.440
with the kind of the bias that you get on the phone.

06:30.440 --> 06:36.240
Yeah, just to clarify the picture, like the colorful picture on the left side, just for

06:36.240 --> 06:40.400
illustration, the other two values should match kind of.

06:40.400 --> 06:45.360
Yeah, in the PROC IOM, I'm output you can see, so where you can see the different memory

06:45.360 --> 06:46.360
regions.

06:46.360 --> 06:53.200
You can also see at address 8 with a lot of series to 2.7 FFF.

06:53.200 --> 06:56.360
It's kind of the system RAM, so it's actually the address space for the 8 gigabytes of RAM

06:56.360 --> 06:57.680
that are on the device.

06:57.680 --> 07:02.920
So if you're right there, you can read the same value back just as you would expect from

07:02.920 --> 07:03.920
a RAM.

07:03.920 --> 07:07.200
Don't ask me how this MMIO stuff works.

07:07.200 --> 07:11.200
I attended the Free Silicon conference last year.

07:11.200 --> 07:12.800
They know kind of how this stuff works.

07:12.800 --> 07:14.880
I have no clue.

07:14.880 --> 07:18.640
So talk to them if you want to know more.

07:18.640 --> 07:26.720
So you saw two slides before with the BGA, so the many pins on the device or on the SOC.

07:26.720 --> 07:31.440
Even though it's a lot of pins, so it's over a thousand pins or something on kind of modern

07:31.480 --> 07:34.160
or, yeah, modern SOCs.

07:34.160 --> 07:39.800
Of those, most are used for ground or power, so really just not usable for anything like

07:39.800 --> 07:42.280
more than ground and power.

07:42.280 --> 07:49.320
So on the chipset for the FF5, you have 176 kind of GPOs or useful pins, which you can

07:49.320 --> 07:52.000
use for do-do stuff.

07:52.000 --> 07:55.440
Even though it might sound like a lot, it's really not much.

07:55.440 --> 08:00.520
So if you have, for example, eight I2C buses and eight HPI buses and eight UR buses on

08:00.520 --> 08:05.480
the SOC with separate pins each, you already have 80 pins used.

08:05.480 --> 08:09.840
And you still want to do a lot more with an SOC.

08:09.840 --> 08:14.360
So there's normally a lot of different functionality behind each separate pin on the SOC, which

08:14.360 --> 08:16.960
you can switch to in software.

08:16.960 --> 08:20.720
This enables flexibility from both the SOC manufacturer, because they can produce one

08:20.720 --> 08:26.960
SOC that can be used for a lot of different use cases, but also on the other side for

08:26.960 --> 08:30.440
customers buying this chip, they can use the same chip for also a lot of different use

08:30.440 --> 08:31.440
cases.

08:31.440 --> 08:35.120
So they can, for example, if they actually need eight I2C buses, they can actually use

08:35.120 --> 08:41.360
them and kind of sacrifice some other functionality by switching to it in software.

08:41.360 --> 08:49.880
So this is called pin control in Linux, also called TLMM for Qualcomm devices.

08:49.880 --> 08:51.760
So you can kind of switch between different functions.

08:51.760 --> 08:56.360
So for example, between I2C, SPI and UR, you can switch to a different function.

08:56.360 --> 09:02.440
And you get behind the pin, I would say, there's a hardware controller that can actually talk

09:02.440 --> 09:06.080
this protocol natively and can do it very power efficiently.

09:06.080 --> 09:10.920
On Qualcomm devices, there's up to nine different functions per pin, but most pins really have

09:10.920 --> 09:15.240
something like two to four functions, and this is just a part of the hardware that you

09:15.240 --> 09:17.360
get.

09:17.360 --> 09:21.960
In theory, for most pins, you could actually kind of bit bank a protocol on there.

09:21.960 --> 09:29.200
So for example, using a software driver for I2C can just have a loop that sets the pins

09:29.200 --> 09:31.720
low and high all the time.

09:31.720 --> 09:33.520
This generally works for I2C.

09:33.520 --> 09:39.880
It's also used in some devices, but it is prone to bad timing, for example, or it's also

09:39.880 --> 09:45.320
just using CPU cycles to do something that's really something dedicated hardware component

09:45.320 --> 09:49.000
can do way more efficiently.

09:49.000 --> 09:54.120
On the right side, I grabbed this illustration from the Raspberry Pi documentation.

09:54.120 --> 09:58.240
It kind of shows that on the one GPIO that you see, and there's a lot of different functionality

09:58.240 --> 09:59.240
behind it.

09:59.240 --> 10:04.120
So for example, in software, you can enable a pull-up regulator, which is useful for I2C

10:04.120 --> 10:10.240
buses, or pull-down, or a lot of different interrupt detection mechanisms.

10:10.240 --> 10:15.600
So you can just connect a GPIO to an interrupt line from a different chip and then get an

10:15.600 --> 10:17.120
interrupt in there.

10:17.120 --> 10:21.240
And the I2C can tell you very efficiently how this works.

10:21.240 --> 10:26.600
The bottom left is an excerpt from the device tree.

10:26.600 --> 10:33.160
So we can see here, for example, the GPIO155 is just configured to be in the function GPIO,

10:33.160 --> 10:36.720
so just normal high-low.

10:36.720 --> 10:39.880
So drive strength of two milliampers and bias pull-ups.

10:39.880 --> 10:44.280
Bias pull-up here means, for example, the pull-up regulator gets enabled, and you don't

10:44.280 --> 10:45.280
have to do this in hardware.

10:45.280 --> 10:48.400
You can actually use the one built into the SoC.

10:48.400 --> 10:51.080
For the second example, there's the I2C buses.

10:51.080 --> 10:57.480
So for example, for GPIO24 and 25 on this SoC, for the function called QUP06, which is Qualcomm

10:57.480 --> 11:02.880
thing, Qualcomm talk, you can get an I2C bus there.

11:02.880 --> 11:05.440
And you need to configure this in software because otherwise you just kind of get the

11:05.440 --> 11:12.280
default pin controller set, which is either set by the boot load or just kind of the default

11:12.280 --> 11:13.280
GPIO.

11:13.280 --> 11:16.040
So if you want to talk SPI, you need to set this correctly.

11:16.040 --> 11:22.040
Otherwise, the communication from inside the SoC doesn't go anywhere.

11:22.040 --> 11:25.400
So kind of now we know how the pins on SoC works.

11:25.400 --> 11:31.680
So here's an example of, for example, how the speaker amplifier is connected to the

11:31.680 --> 11:33.840
SoC.

11:33.840 --> 11:38.040
So there's a physical connection between the SoC on GPIO8 and 9.

11:38.040 --> 11:42.760
Nothing with microphones falling down.

11:42.760 --> 11:44.240
Sorry.

11:44.240 --> 11:50.080
Try to fix it again.

11:50.080 --> 11:51.600
OK.

11:51.600 --> 11:53.120
Perfect.

11:53.120 --> 11:54.120
Yeah.

11:54.120 --> 11:57.320
So, and this is connected to the SCL and SDA pins.

11:57.320 --> 12:04.000
So for I2C on this AW88261 chip, which is just a speaker amplifier.

12:04.000 --> 12:08.760
This is used for the speaker connection, so how you output audio on this device.

12:08.760 --> 12:13.840
It is used for controlling this amplifier, so kind of telling it some information that

12:13.840 --> 12:18.840
it needs to know to be able to properly amplify the audio that's coming.

12:18.840 --> 12:22.120
For the audio data, we'll be on the next slide.

12:22.120 --> 12:26.480
So here, also for GPIO8 and 9, you can see in the pin control driver, which is the first

12:26.480 --> 12:31.680
top screen on the left, or with the black background.

12:31.680 --> 12:36.120
Here you can see from the pin control driver, that's for GPIO8 and 9, there's a separate

12:36.120 --> 12:37.320
function defined.

12:37.320 --> 12:39.880
So then in the device tree, you can use this function.

12:39.880 --> 12:45.280
So QUP02, which is, again, Qualcomm Dock for I2C here.

12:45.280 --> 12:51.800
And on the other side, you can see on the I2C pin, or on the I2C bus, there's this on

12:51.800 --> 12:53.160
this AWINNIC chip defined.

12:53.160 --> 12:58.320
So the chip on the hardware has its own node in the device tree, which has, for example,

12:58.320 --> 13:04.080
here the I2C address defined, which you can find in the datasheet of the device, or if

13:04.080 --> 13:09.760
you're plotting downstream Linux, then you find this in the downstream device tree, which

13:09.760 --> 13:13.280
is probably most commonly what you use.

13:13.280 --> 13:19.920
And also, kind of knowing that GPIO8 and 9 here is the thing called I2C2 in this example.

13:19.920 --> 13:26.360
This is also, if you work from just the hardware design and datasheets, and you find in the

13:26.360 --> 13:31.000
datasheet, but these are most of the time confidential, so you probably just look at

13:31.000 --> 13:36.560
the downstream sources if you're plotting main Linux for it.

13:36.560 --> 13:46.680
So the speaker gets controlled via I2C, which is a very common protocol for the actual sound

13:46.680 --> 13:49.800
data that you send from the SoC to the amplifier.

13:49.800 --> 13:51.680
So it gets to the speaker.

13:51.680 --> 13:57.480
You actually use a protocol called I2S, Inter-IC Sound, sometimes also known as M-I2S, which

13:57.480 --> 14:03.160
is multiple I2S, so where you have multiple channels.

14:03.160 --> 14:11.800
And you can see here for GPIO150 to 153 are connected to the I2S pins on the amplifier

14:11.800 --> 14:17.680
chip, and this is how the audio data then gets actually transmitted between the two

14:17.680 --> 14:18.680
different chips.

14:19.680 --> 14:25.040
Again, you need to configure the pins correctly, so you need to select the I2S functions on

14:25.040 --> 14:28.320
these GPIO150 to 153.

14:28.320 --> 14:33.280
The example might be a bit confusing because actually in the device tree you set GPIO6,

14:33.280 --> 14:35.000
7, 8 and 9.

14:35.000 --> 14:40.640
This is a bit also because it's not part of the same ping control thing.

14:40.640 --> 14:43.080
It's a bit complicated.

14:43.080 --> 14:44.880
Some probably going to skip this.

14:45.880 --> 14:53.440
But you also need to, because you've set the I2S output correctly, you still need to

14:53.440 --> 15:02.560
send the audio data to the correct I2S bus because the SoC has, I guess, five I2S buses.

15:02.560 --> 15:08.160
In this case the Qwinary one is used, so primary, secondary, quaternary, etc.

15:08.160 --> 15:10.760
And Qwinary, so the fifth one.

15:10.760 --> 15:15.560
You need to configure this, and then you can really set the sound device tree configuration

15:15.560 --> 15:24.240
to send data from the, here in this, for example, it's called Q6AFE die from the Qwinary basically

15:24.240 --> 15:26.080
to the amplifier.

15:26.080 --> 15:32.600
And then Linux knows that it actually should use the Qwinary connection, so GPIO150 to

15:32.600 --> 15:37.120
153, it's sending it to the amplifier, and then Linux also knows that it needs to configure

15:37.120 --> 15:42.280
the amplifier correctly to be able to output the audio correctly to the speaker.

15:42.280 --> 15:46.520
Here also the I2S interface is actually handled by Linux itself, but by the ADSP, which is

15:46.520 --> 15:50.400
the audio digital signal processor.

15:50.400 --> 15:58.200
It's also a thing on Qualcomm, probably also other SoCs, where the main SoC can go into

15:58.200 --> 16:02.800
a lower power state if it's just playing audio because then the separate chip, which is way

16:02.800 --> 16:06.520
more efficient, can do this correctly.

16:06.520 --> 16:10.640
For microphone it looks completely different because why have the same thing for both audio

16:10.640 --> 16:13.640
output and input.

16:13.640 --> 16:20.880
Here it's going via the WCD9385 chip, which is a Qualcomm chip, which is kind of an audio

16:20.880 --> 16:21.880
collector.

16:21.880 --> 16:25.280
It's connected via sound wire, which is a completely different protocol.

16:25.280 --> 16:28.960
It's a new standard from around 2014.

16:28.960 --> 16:33.680
In comparison, I2S from the previous slide is from 1986, so it's quite an old standard.

16:34.040 --> 16:39.320
It's also a slim bus used on some SoCs, or actually still on the same SoC, but for different

16:39.320 --> 16:45.040
use cases again, which is standard from 2007.

16:45.040 --> 16:51.600
In this case, again, as you can imagine, there will be some connection path between the SoC

16:51.600 --> 16:58.000
and the amplifier chip, and then from the audio codec to the microphone to get microphone

16:58.000 --> 16:59.000
input.

17:00.000 --> 17:14.000
You can see here is a bunch of pins, cheaper, 144 to 158, and sorry, 149, and then 158 also.

17:14.000 --> 17:15.000
They're connected there.

17:15.000 --> 17:21.240
It's a protocol's sound wire, and the other will be just a kind of a physical connection

17:21.240 --> 17:27.120
between the audio codec and the microphone where it can get the data there.

17:27.120 --> 17:31.880
This WCD chip is used for three different microphones that are on the phone itself,

17:31.880 --> 17:38.280
and also for USB-C audio, where you can actually get an analog audio signal via the USB-C connector

17:38.280 --> 17:43.120
out, and here both output and input is handled via this chip.

17:43.120 --> 17:46.720
Yeah, so the microphone also needs to be configured.

17:46.720 --> 17:50.840
It works a bit differently here because it's a sound wire device, so it's different.

17:50.840 --> 17:57.000
But you have these two sound wire devices on the left side.

17:57.000 --> 18:01.240
For some reason, they have one for receiving and one for transmitting the data, and then

18:01.240 --> 18:05.520
you put them together on the right side as the kind of, again, you have a node for the

18:05.520 --> 18:10.600
WCD audio codec because it's a chip on the SoC that you have.

18:10.600 --> 18:14.720
From this, you reference it, and then you also, again, need to configure the audio path

18:14.720 --> 18:22.560
from the, or basically the other way around from the audio codec, so from the WCD chip

18:22.560 --> 18:26.760
back to the SoC so it can receive the microphone data.

18:26.760 --> 18:30.000
USB-C is quite a cool thing.

18:30.000 --> 18:34.360
In the past, micro USB only had kind of the functionality for power, so to charge the

18:34.360 --> 18:40.040
phone data, to transmit a bit of data, some pictures behind it, back and forth, and also

18:40.040 --> 18:44.360
OTG functionality, to, for example, plug in a keyboard, but it was not really used for

18:44.360 --> 18:45.360
much.

18:45.360 --> 18:47.280
USB-C can do a lot more.

18:47.280 --> 18:53.320
On the FFVV, you can use the connector for USB 2.0, so USB high speed, USB 3.0, which

18:53.320 --> 18:59.920
is called super speed, analog audio out via this thing called the audio adapter accessory

18:59.920 --> 19:05.600
mode, which is a standard part of USB Type-C, and also display port out via the display

19:05.600 --> 19:06.760
port alternate mode.

19:06.760 --> 19:13.280
So yeah, on the 24 pins, you can do a lot of different things, but for actually doing

19:13.280 --> 19:17.360
this, you don't just need the SoC and the USB-C connector, but also some other components

19:17.360 --> 19:25.120
that actually switch to different components based on kind of what the user plugs in.

19:25.120 --> 19:29.880
So for example, for actually getting analog audio data out of the USB-C connector, so

19:29.880 --> 19:35.000
you can just connect USB-C headphones that don't have a, where the data is not transmitted

19:35.400 --> 19:42.240
digitally, but just like analog, just like with a headphone jack connector.

19:42.240 --> 19:47.960
So actually the analog signals, they go over the USB 2.0 data pins, so kind of the D plus

19:47.960 --> 19:54.320
and the D minus for the right channel and left channel, and also the two sideband use

19:54.320 --> 19:57.000
pairs, which is a part of the USB-C connector.

19:57.000 --> 20:01.440
They are used for microphone and ground, or ground and microphone, depending which headphones

20:01.440 --> 20:06.720
you are in, because there's two different standards.

20:06.720 --> 20:11.320
And in order that audio data here flows again, you actually need to configure the different

20:11.320 --> 20:15.080
chips to handle the data correctly.

20:15.080 --> 20:19.640
So I've tried to kind of put in a reasonably understandable format.

20:19.640 --> 20:24.520
On the top, you can see the WCD codecs, or the sound wire codec that went before.

20:24.520 --> 20:29.480
It has the headphone jack output and microphone input.

20:29.520 --> 20:39.640
This is routed to a chip called the OCP 960096011, and this is some switching between USB and

20:39.640 --> 20:44.680
audio, depending on the use case, and this send this router to the USB-C connector, so

20:44.680 --> 20:48.520
you can actually get the data out there.

20:48.520 --> 20:54.880
In order to do this, kind of Linux needs to tell this OCP chip, this audio switch, to

20:54.880 --> 21:04.360
actually switch between either USB or the analog audio, depending on what you plug in.

21:04.360 --> 21:07.160
And this is here called the mode switch in Linux.

21:07.160 --> 21:12.600
So in Linux, in the device stream, you need to connect them together with some USB-C nodes.

21:12.600 --> 21:18.600
There's documentation for all of this, which might not be the best, but if you understand

21:18.600 --> 21:20.720
it some fun, you may be understanding.

21:20.720 --> 21:27.440
For this report alternate mode, it's way more complicated, because you can put, there's

21:27.440 --> 21:31.280
a lot of different combinations that you can put on the USB-C connector, so some of the

21:31.280 --> 21:36.320
super speed pins you can reuse for this report, either just one line or two lines or four

21:36.320 --> 21:43.480
lines, and for four lines, you actually cannot do USB 3.0 anymore, because all of the USB

21:43.480 --> 21:48.160
super speed lines are used for this report, but you can still use USB 2.0 for this.

21:48.600 --> 21:51.320
So there's a lot of different combinations that you can use.

21:51.320 --> 21:56.440
The DisplayPort aux channel, which is used for some communication also, runs over some

21:56.440 --> 22:00.120
different wires, which also needs to be switched correctly, depending on which orientation you

22:00.120 --> 22:06.240
plug in the DisplayPort connector, or the USB-C connector, basically.

22:06.240 --> 22:10.880
And everything needs to be configured, and if something is not configured correctly,

22:10.880 --> 22:17.960
no data will flow, so then you have a bad time, because you don't have DisplayPort out.

22:17.960 --> 22:22.000
So kind of device tree, because this talk has been about hardware and device tree, device

22:22.000 --> 22:23.800
tree actually represents hardware.

22:23.800 --> 22:30.360
It doesn't represent software concepts, you're not telling Linux to do something, but you're

22:30.360 --> 22:36.520
providing Linux with the information that the hardware is made in that way, and then

22:36.520 --> 22:41.600
Linux can use this information to actually do the correct things.

22:41.600 --> 22:48.400
So keep this in mind when writing device tree or the bindings or the commit messages.

22:48.400 --> 22:51.760
Don't write about, hey, this is telling Linux to do this, but you're actually telling, like,

22:51.760 --> 22:53.240
you're describing the hardware.

22:53.240 --> 22:59.200
Yeah, if you're adding a new chip, all of the power supplies and GPOs and everything should

22:59.200 --> 23:02.600
be included, because, yeah, it represents the hardware.

23:02.600 --> 23:06.440
Even if Linux doesn't use them yet, you should include them in the bindings, because the bindings

23:06.440 --> 23:08.560
represent the hardware.

23:08.560 --> 23:13.400
Device tree is also operating system independent, which is really cool, because many, many years

23:13.400 --> 23:19.320
ago you wrote kind of really Linux specific codes to make the hardware work, but device

23:19.320 --> 23:23.720
tree is operating system independent, so you can use the same device tree, for example,

23:23.720 --> 23:29.400
UBoot, which is Caleb's talk, which is coming up in a few minutes, but also, for example,

23:29.400 --> 23:31.560
for FreeBSD or whatever.

23:31.560 --> 23:34.240
They should be able to use them, because it represents the hardware, it doesn't represent

23:34.240 --> 23:37.240
Linux specific things.

23:37.240 --> 23:43.000
So, yeah, so, what do you want to say?

23:43.000 --> 23:44.000
Right.

23:44.000 --> 23:48.040
It's a great ending.

23:48.040 --> 23:52.320
Yeah, don't put any specific things in there.

23:52.320 --> 23:56.520
They should work if the other operating systems have driver for it, of course.

23:56.520 --> 23:57.520
And that's it.

23:57.520 --> 23:58.520
Thank you.

23:58.520 --> 24:02.160
Thank you very much, Luca.

24:02.160 --> 24:06.520
We have, like, two minutes for questions, so if somebody has a question, please ask

24:06.520 --> 24:07.520
now.

24:07.520 --> 24:12.360
I will give you the mic.

24:12.360 --> 24:14.280
Thank you for the presentation.

24:14.280 --> 24:20.600
Can you tell us if you pick the Fairphone 5 now, or maybe the 4-1, like, and you actually

24:20.600 --> 24:24.360
rent a vanilla Linux channel on it, what can actually work?

24:24.360 --> 24:27.520
So you spoke about headphones, mic, things like this.

24:27.520 --> 24:30.000
What's the actual state of the Fairphone on vanilla Linux?

24:30.000 --> 24:35.960
And also, next question, obviously, is, like, any plans to make it even more, like, open

24:35.960 --> 24:36.960
in the future?

24:36.960 --> 24:40.520
So, right now, like, completely vanilla Linux.

24:40.520 --> 24:44.960
A good chunk of stuff is working, but some stuff like displays are not working yet.

24:44.960 --> 24:50.480
But I have some patches which, like, for displays, still depends on some hack that actually

24:50.480 --> 24:53.160
Marainas is working on, hopefully.

24:53.160 --> 24:59.320
Yeah, you can use display, GPU, DisplayPort out over USB-C.

24:59.320 --> 25:00.880
You can use Modem.

25:00.880 --> 25:05.280
You can make inferior phone calls without audio, because audio is not working yet.

25:05.280 --> 25:08.320
So basically, the big things that are not working yet is audio is not working yet, camera

25:08.320 --> 25:12.960
is not working yet, and probably quite a few more things that you want from a phone.

25:12.960 --> 25:16.520
But kind of, you can use it as a kind of media machine if you connect Bluetooth headphones,

25:16.520 --> 25:22.480
you can stream via Wi-Fi or 4G or 5G and everything else.

25:22.480 --> 25:23.480
One more question?

25:23.480 --> 25:24.480
Yeah.

25:24.480 --> 25:25.480
Or maybe a quick plan for the future.

25:25.480 --> 25:29.400
I definitely plan on working more on this, but that's also not my full-time job to working

25:29.400 --> 25:30.400
this.

25:30.400 --> 25:32.960
I have one day a week currently for this.

25:32.960 --> 25:38.440
So I can definitely get way more done than without more time.

25:38.440 --> 25:41.640
But yeah, we will see.

25:41.640 --> 25:46.080
Could you please describe in a few words how to debug device 3?

25:46.080 --> 25:47.080
The second?

25:47.080 --> 25:49.080
How do you debug device 3?

25:49.080 --> 25:56.560
I mean, to some degree, I'm not supposed to debug device 3, because it's just a data-formatted

25:56.560 --> 25:58.440
space-based hardware.

25:58.440 --> 26:05.320
Of course, when bringing up hardware, you need to figure out what values to put in there.

26:05.320 --> 26:10.520
This is most in combination with the Linux driver then, because your device is just a

26:10.520 --> 26:13.440
data format to describe the hardware.

26:13.440 --> 26:16.840
So you need something to kind of interpret it and use it that way.

26:16.840 --> 26:20.880
So most of the time, you are debugging Linux drivers and probably fixing Linux drivers

26:20.880 --> 26:24.040
and then at the same time, fixing your device 3.

26:24.040 --> 26:29.840
In the perfect words, you would just write it once and it would be done and then fix

26:29.840 --> 26:31.320
the operating system maybe better.

26:31.320 --> 26:33.080
So that's the time we have.

26:33.080 --> 26:37.080
Another round of applause for Luca, please.

26:37.080 --> 26:42.600
And make sure to check out the stands we have for Linux on mobile in building AW.

26:42.600 --> 26:44.520
And now we have five minutes of break.

26:44.520 --> 26:45.520
Don't forget the mic.

26:45.520 --> 26:46.520
Yeah.

26:46.520 --> 26:47.520
And yeah.

26:47.520 --> 26:48.520
Thanks.

26:48.520 --> 26:49.520
Bye.

26:49.520 --> 26:50.520
Bye.

26:50.520 --> 26:51.520
Bye.

26:51.520 --> 26:52.520
Bye.

26:52.520 --> 26:53.520
Bye.

26:53.520 --> 26:54.520
Bye.

26:54.520 --> 26:55.520
Bye.

