WEBVTT

00:00.000 --> 00:11.640
I need to support me for the in-depth technical details because he is more proficient than

00:11.640 --> 00:15.000
I am in these areas.

00:15.000 --> 00:21.040
This is a very high level overview of the project.

00:21.040 --> 00:26.840
We are not going to go deep into the detail, but if you have questions, let go deeper,

00:26.840 --> 00:29.640
just ask them in the end.

00:29.640 --> 00:38.040
If you want to have product side view or customer view, you can always use the official contact

00:38.040 --> 00:42.240
channels and you will be answered there.

00:42.240 --> 00:48.640
So a little bit of background about OpenTalk.

00:48.640 --> 00:51.560
There is a company behind OpenTalk.

00:51.560 --> 01:05.120
It was founded in 2021 in the middle of the pandemic by a group, so a group is doing since

01:05.120 --> 01:12.360
more than 30 years I think already consulting and training for Linux and mail operations

01:12.360 --> 01:20.640
hosting and it is also the provider of the well-known mailbox operator MailboxOrg.

01:20.640 --> 01:28.240
And the OpenTalk company right now has around 20 employees right now, so it is increasing

01:28.240 --> 01:31.480
slowly but steady.

01:31.480 --> 01:33.960
So who are we?

01:33.960 --> 01:35.160
I am Wolfgang.

01:35.160 --> 01:43.240
I joined OpenTalk roughly one and a half years ago and became the backend team tech

01:43.240 --> 01:50.880
expert, so more or less the technical lead in July this year, or last year already.

01:50.880 --> 01:55.680
I have a master's degree in embedded systems design, but I am much more on the software

01:55.680 --> 01:59.080
side than on the hardware side.

01:59.080 --> 02:06.200
I am doing Rust since 2015 and I am still in the honeymoon phase and from all the languages

02:06.200 --> 02:09.560
I have done, this is the longest honeymoon phase I ever had.

02:09.560 --> 02:16.200
And I am the co-founder and organizer of a Linux user group and you can find me on the

02:16.200 --> 02:17.200
FEDIVERS.

02:17.200 --> 02:18.200
So Stefan.

02:18.200 --> 02:19.200
Yeah.

02:19.200 --> 02:28.120
I guess I have been like two and something years with OpenTalk now and I am mainly on

02:28.120 --> 02:35.200
the media team which is our thing for all the real-time stuff, audio, video, recording,

02:35.200 --> 02:37.120
streaming, webRTC.

02:37.120 --> 02:40.760
It is kind of in between front and then back end.

02:40.760 --> 02:46.720
And yeah, I also have been in university before, long time doing parallel programming, operating

02:46.720 --> 02:51.000
system stuff and also some real-time things and software defined radio.

02:51.000 --> 02:57.520
So if you are interested in that, just talk to me later on I guess.

02:57.520 --> 03:00.320
Okay.

03:00.320 --> 03:02.320
Some information about the project in general.

03:02.320 --> 03:09.920
So the project is written, or the front end is written in TypeScript, the back end is

03:09.920 --> 03:12.400
written in Rust.

03:12.400 --> 03:19.160
It is free software under the copy left EUPL 1.2 license.

03:19.160 --> 03:26.920
You can find technical documentation online under this domain docs.opentalk.eu.

03:26.920 --> 03:30.080
There is also a FEDIVERS account called OpenTalk Meeting.

03:30.080 --> 03:31.120
You will find it by that.

03:31.120 --> 03:37.360
And there is a Matrix channel as well, hosted on matrix.org.

03:37.360 --> 03:44.280
This is, yeah, the Matrix channel is where some of the devs are hanging around and answering

03:44.280 --> 03:49.440
technical questions but it is not an official support channel in that regard.

03:49.440 --> 03:50.440
Okay.

03:50.440 --> 03:54.160
So the user interface, this is what the video conferencing software looks like.

03:54.160 --> 04:00.800
So it is roughly similar to what you know from other programs.

04:00.800 --> 04:10.200
It was important to make a nice design that looks good and is, yeah, comfortable to use.

04:10.200 --> 04:13.120
We also have what we call the dashboard.

04:13.120 --> 04:15.960
This is where you can create meetings.

04:15.960 --> 04:18.880
You can add start and end date.

04:18.880 --> 04:26.720
You can add meeting series and you can also get an email or maybe that's on the next slide.

04:26.720 --> 04:31.920
You get an email when you are invited to a meeting or when a meeting is canceled and

04:31.920 --> 04:37.200
also the creator of the meeting gets the invite so they can put it into their own calendar.

04:37.200 --> 04:38.200
Okay.

04:38.200 --> 04:40.400
So short list of the features.

04:40.400 --> 04:47.040
We have a lobby with a mic and camera check so you can check that everything is working.

04:47.040 --> 04:53.120
We have some interesting moderation tools, one of them being the coffee break which we

04:53.120 --> 04:59.440
will show in the next slide, a timer so you can assign tasks to people and say, okay,

04:59.440 --> 05:04.960
you have 10 minutes for this and if you want then report when you are ready and when everybody

05:04.960 --> 05:09.520
is ready the timer ends or when the timeout is approached.

05:09.520 --> 05:16.160
Meeting participants, we have a poll feature and breakout rooms.

05:16.160 --> 05:21.640
Screen share, yeah, that's well known for conferencing software.

05:21.640 --> 05:26.960
One important information here is that multiple people can share the screen at the same time

05:26.960 --> 05:30.440
which comes in handy for peer programming.

05:30.440 --> 05:37.160
Yeah, you have the speaker view where you always see the large picture of the speaker

05:37.160 --> 05:39.920
of the person who is currently speaking.

05:39.920 --> 05:49.440
You can call in from the mobile or landline phones via SIP and we have integrations for

05:49.440 --> 05:58.880
a shared editor which in this case is Etherpad and a whiteboard which is SpaceTech currently.

05:58.880 --> 06:03.680
Yeah, I already said the invitations end.

06:03.680 --> 06:10.000
Right now we are in the course of finishing recording and streaming so you can record

06:10.000 --> 06:16.680
the meetings and you can as well live stream it and the idea is to also allow streaming

06:16.680 --> 06:23.320
it to multiple platforms at the same time so you can have YouTube Twitch and on-cast

06:23.320 --> 06:26.560
stream at the same time if you want.

06:26.560 --> 06:33.160
If you are interested in that, talk to Daniel over there, he did one of the work.

06:33.520 --> 06:34.520
Yeah.

06:34.520 --> 06:40.240
Okay, so here you see a screenshot of the coffee break, that's what it looks like.

06:40.240 --> 06:44.840
Everybody gets this full screen as soon as the coffee break is started but you can go

06:44.840 --> 06:47.280
back into the conference anytime you like.

06:47.280 --> 06:55.040
So for chit chatting up front before everybody is back, just like in real life.

06:55.040 --> 06:59.880
And this is another nice feature we have, we call it the shared folder feature.

06:59.880 --> 07:07.200
So in the dashboard when you create the meeting you can enable this shared folder switch.

07:07.200 --> 07:14.440
It must be configured for this OpenTalk instance but then the system will create a shared folder,

07:14.440 --> 07:18.680
it will create a folder on a next cloud instance.

07:18.680 --> 07:21.640
This is the part that needs to be configured.

07:21.640 --> 07:27.080
It will create two shares to this folder, one of them being read write and the other

07:27.120 --> 07:29.040
one being read only.

07:29.040 --> 07:34.160
And the moderators of the conference receive the read write link so they can put their

07:34.160 --> 07:41.480
material into this folder up front while all the other people have access to this either

07:41.480 --> 07:48.640
by clicking on the link in the invitation mail or by opening it through the icon during

07:48.640 --> 07:50.280
the conference.

07:50.280 --> 07:57.040
Okay, so this is a more technical part, I'll give the word to Stefan here.

07:57.040 --> 08:04.680
So that's what it looks like from a rough perspective of the developer or the administrator

08:04.680 --> 08:05.680
of the system.

08:05.680 --> 08:12.800
So it's not just one big service but we tried as much as we can to use existing components.

08:12.800 --> 08:19.680
So what we built mainly is the dark or the dark colored parts and the other services

08:19.680 --> 08:25.720
are more or less what you get just from the different projects.

08:25.760 --> 08:32.880
So we use Yarnos and RabbitMQ for communication and Yarnos as media gateway but we manage

08:32.880 --> 08:41.000
all the video rooms our own using our controller backend and as said there is a web front and

08:41.000 --> 08:46.760
written in TypeScript and React here but it's kind of symmetric to what happens on the other

08:46.760 --> 08:54.120
side with the, I like to call them back end clients for streaming call and all that stuff.

08:54.120 --> 09:01.600
They just have another way of starting the whole process but actually they do the RTC

09:01.600 --> 09:08.040
and signaling just as the front end would do and by now they also have a way to authenticate

09:08.040 --> 09:15.680
services against key cloak via service authentication so that's also, we can see that later, where

09:15.680 --> 09:23.720
you can extend, that would be a way to extend our system in that part.

09:24.440 --> 09:31.000
It's meant to be scalable so you can have multiple instances and they just share their data

09:31.000 --> 09:38.040
where Redis and so forth is session stuff and for the persistence data like which rooms

09:38.040 --> 09:44.920
do we have, what users are in which rooms invited, that stuff that would be stored in

09:44.920 --> 09:55.080
the normal relational database and we'll do a lot of integration stuff on that OpenID Connect

09:55.080 --> 10:04.040
key cloak side with other like user systems or databases what people tend to have already on

10:04.040 --> 10:14.800
site. Okay so this is a sneak peek of Rust code, it's currently not ready yet but we have

10:15.680 --> 10:24.240
approaching this. We are right now working on extracting the protocol data types into a

10:24.240 --> 10:32.880
separate library which was not the case when I started working with OpenTalk and the idea is to

10:32.880 --> 10:41.880
publish the client library to crates.io which is the default publication platform for Rust code

10:42.800 --> 10:49.280
and yeah it should be as easy as this, I mean the authentication is usually a little more

10:49.280 --> 10:55.360
involved than these two lines but you basically connect to the instance and can do things with

10:55.360 --> 11:04.080
the client so this is now the web API for managing appointments and so on so here we create an

11:04.120 --> 11:11.840
event with a title that we set and then we invite a user with the email address elizetexample.com

11:11.840 --> 11:22.280
and the role of a regular user you could do the same for a moderator as well so the idea is to

11:22.280 --> 11:28.520
allow automation and integration in a very easy and approachable way if you're familiar with

11:28.560 --> 11:37.880
Rust code. This is also what we will be using for the recorder which connects to the meeting

11:37.880 --> 11:48.120
session for the call-in via a landline or telephone and for other maybe future services.

11:48.120 --> 11:56.480
So yeah talking about these kind of services that's actually the flow you have there, you build your

11:56.720 --> 12:03.600
new backend service which will act like a client to the conference, it first needs to

12:03.600 --> 12:13.320
authenticate and get some access token however you set it up and then you usually just go to the

12:13.320 --> 12:19.000
backend and say hi that's me and that's the token I got so I'm authenticated and I would like to

12:19.520 --> 12:26.800
join this room over there which has this ID and then you essentially and by that you open a

12:26.800 --> 12:36.040
web socket where all the signaling happens and you see like the publications of media streams

12:36.040 --> 12:43.920
so the backend will just announce when new users arrive and will also announce what screen share

12:44.200 --> 12:53.040
and camera stream they have so you can then start the webRTC connection with the Janus and on that

12:53.040 --> 13:00.880
signaling channel you just exchange STP and other credentials to get the right stream set up and

13:00.880 --> 13:07.720
here you would like in our case we usually use GStreamer as a media stack here which is then

13:07.880 --> 13:14.520
that up to get all the streams and for instance do video mixing and when you're done with your

13:14.520 --> 13:21.240
recording so somebody tells you on the signaling okay stop now recording you will just upload the

13:21.240 --> 13:30.160
file of the video it produced to the controller again which puts it into a F3 storage which is

13:30.160 --> 13:38.000
also currently we use for development purposes we use Minio but you can use whatever F3 you would

13:38.000 --> 13:45.320
like and there it also becomes available on the dashboard then which also would work with other

13:45.320 --> 13:53.080
artifacts so like whiteboard or yeah meeting minutes would be the same thing just another

13:53.120 --> 14:00.520
document format right and what I missed out is the other way is when you don't initiate

14:00.520 --> 14:08.640
the action yourself there's also the RabbitMQ service where you can just attach and listen for

14:08.640 --> 14:14.920
the controller to call you and say hey your service you should do something like start a

14:14.960 --> 14:23.080
recording for instance and then just start the signaling session right that's that's basically it

14:23.080 --> 14:33.840
yeah okay that's also your part yeah so we talked or we've seen a lot of components which are open

14:33.840 --> 14:40.280
source and which we integrate there's also been as we are a company that also been other

14:41.240 --> 14:50.720
yeah companies and software developers which we integrated with so I guess that's one of the

14:50.720 --> 15:00.480
main things and themes that we and other people have yeah projects and try to integrate with

15:00.480 --> 15:07.400
each other and there is like UCS and integration where they basically have their key cloak and

15:07.440 --> 15:14.680
they use a management part and we just connect there and there is Innova phone which does mainly

15:14.680 --> 15:21.280
zip and has some also some platform and we try to integrate there also wire my D connect and

15:21.280 --> 15:29.520
made some adjustments to our zip stack so that we are compatible with them and yeah so it goes on

15:29.920 --> 15:42.360
like MGM is like we just started I guess they they talked about how we could do like components

15:42.360 --> 15:47.600
where you just would have the video but it's like in the starting phase and not just the whole front

15:47.600 --> 15:56.120
end and yeah as much people many people use it right now and this has been a high demand we did

15:56.160 --> 16:03.160
outlook plugin but there's also been some talk I know for Sunderbird plugin but it's just not

16:03.160 --> 16:13.400
yet yet on the way I guess and so yeah maybe just if you have some some questions or need or want to

16:13.400 --> 16:20.520
do something on your own just talk to us and we'd be happy to try to tell you what's going on and

16:20.760 --> 16:27.800
to support it as far as we can okay yeah yeah that's it more or less

16:34.920 --> 16:41.880
so we try to keep it short so if there's some specific questions and details yeah I'm gonna just go ahead

16:41.880 --> 16:50.200
you haven't mentioned entry and encryption yet at all and I know that did see has already some

16:50.200 --> 16:57.600
support of entry and encryption and also matrix is now getting into the real-time communication

16:57.600 --> 17:04.840
business and I was wondering what is your strategy here yeah I can say a word I guess it's it's not

17:04.840 --> 17:11.200
so easy is the starting point the thing is if you want to do end to end encryption you basically

17:11.480 --> 17:18.480
don't trust the back end that's that's a deal and we're talking about a web application right now

17:18.480 --> 17:27.240
which is like a problem because in the first place you would load your application from the

17:27.240 --> 17:37.160
server you don't want to trust so we are looking into how we can ensure that you can really maintain

17:37.240 --> 17:45.200
the integrity of all your personal keys and all that stuff and that's pretty hard to do in a

17:45.200 --> 17:52.680
browser environment and yeah of course we could encrypt media connections but that's just half of

17:52.680 --> 18:01.920
the deal so yeah basically we're in the process that's also a goal for certain projects we're working

18:02.000 --> 18:10.160
in but it's not yet a thing I can say okay that's that's a route we we're gonna take right now and

18:10.160 --> 18:16.880
here are the details so we didn't put it on the slides yet so if there are question on then

18:16.880 --> 18:23.920
topic yeah maybe we can have a have a discussion in detail later on or maybe if you have specific

18:23.920 --> 18:35.120
needs and that direction also let me know I'm interested in what do you consider that are

18:35.120 --> 18:46.320
still like very important features or properties which is not yet in any open source video

18:46.320 --> 18:51.160
conferencing solutions and which you are working on which you also don't have yet but you're working

18:51.160 --> 19:01.600
on what is what are kind of still important pieces to come so yeah as mentioned this is a whole

19:01.600 --> 19:11.320
streaming and recording a part which will right now in is one of the main things so we can support

19:11.320 --> 19:19.240
like bigger conferences with a with a feeling of being in a room so for now we're just doing the

19:19.960 --> 19:26.280
the low levels or finishing the low level streaming part and the first UI part to enable

19:26.280 --> 19:34.240
streaming but we're thinking a lot about how to integrate like the to have a mode where you have a

19:34.240 --> 19:42.240
stage and an audience and the stage would be like a normal web conf and web RTC conference and the

19:42.240 --> 19:48.720
audience would get to see the live stream and get a chat interface but it would all happen in our

19:48.840 --> 19:56.400
user interface that's something to come I guess but we have no time frame for that right now and

19:56.400 --> 20:04.760
the other part we are from the project side in is all the telephony part like zip and 8 3 2 3 I

20:04.760 --> 20:16.080
guess which is the old video conferencing standard on telephony nets yeah I guess there's much more

20:16.160 --> 20:27.040
but there was another question so I reckon an organization was 100 people but once in a while

20:27.040 --> 20:33.040
we host conferences for a few thousand and now I wonder should we then have a very large

20:33.040 --> 20:40.840
a Janos media gateway just for this one event per month or is there a way to scale easily down and

20:40.880 --> 20:51.160
up the resources because I've heard of Federation of Media servers in the matrix context and I think

20:51.160 --> 21:01.320
this is a very interesting concept when organizations have joint conferences so yeah we we also thought

21:01.320 --> 21:07.840
about that hard and long and there is like a limit on if you don't cascade Janos instance

21:07.880 --> 21:14.960
there's a limit on how many subscribers can be for a single publisher so the speaker in the room

21:14.960 --> 21:22.680
and that's for for our experience in the yeah say three to four hundred depending on how you

21:22.680 --> 21:30.680
configure load balancing and all the stuff and instead of doing cascading and all that we are

21:30.960 --> 21:38.960
right now looking more into the streaming direction then into have it and having it cascading and real

21:38.960 --> 21:45.680
time all because usually the audience will not interact heavily and you would have to invest a

21:45.680 --> 21:54.520
lot into getting all of the people like fast in there it might be a thing and we are looking also

21:54.560 --> 22:01.800
into the matrix how matrix does it with underlying they use live kit as far as I know

22:01.800 --> 22:08.960
but yeah we are exploring the other direction was having it on streaming and getting people in and

22:08.960 --> 22:17.640
out of the room or you know so into the web RTC conference or back into the stream view that would

22:17.680 --> 22:25.560
be my take on that because then you can just have a have it more resource efficient like have a

22:25.560 --> 22:31.120
small meeting which is easily manageable and also have a streaming set up which can easily scale

22:31.120 --> 22:53.320
lots of people thank you so the question is is there a support for island audio as in in a

22:53.320 --> 23:00.160
large meeting where two people can talk to each other alongside with the orator without

23:00.680 --> 23:10.880
interfering with the others this has been on the road map for quite some time already the idea is to

23:10.880 --> 23:21.760
lower the main room audio volume and have a private talk with a subgroup of the conference but it has

23:21.760 --> 23:28.640
not been implemented yet I guess it's already we already have an specification for it but not

23:28.640 --> 23:30.680
the time to build it yet

