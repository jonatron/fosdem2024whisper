WEBVTT

00:00.000 --> 00:13.600
Okay, next up we have Brage, she's going to talk about Flutter apps.

00:13.600 --> 00:17.360
Please give a round of applause.

00:17.360 --> 00:27.000
Hello, yes, I'm going to talk about Flutter, but not like about the fancy ecosystem as

00:27.000 --> 00:33.440
we were just introduced in the previous talk, but I'm going to talk about development and

00:33.440 --> 00:37.240
rather about the nightmare of development targeting Linux mobile.

00:37.240 --> 00:43.120
Because from the perspective of app developers, there's still much work to do until we can

00:43.120 --> 00:48.600
properly target Linux mobile as with cross-platform software.

00:48.600 --> 00:50.840
Who am I?

00:50.840 --> 00:53.000
My name is Brage.

00:53.000 --> 00:59.160
I do Flutter since it was publicly released in 2018 and I work in healthcare actually,

00:59.160 --> 01:03.440
so my work has nothing to do with what I'm presenting here, but I find it interesting

01:03.440 --> 01:05.840
topic anyway.

01:05.840 --> 01:09.880
I use ARM by the way, that's why I talk about Linux mobile.

01:09.880 --> 01:14.960
Even the talk is held on ARM, maybe people recognize the laptop here.

01:14.960 --> 01:19.880
You can reach me via matrix since I do matrix for work, so when you have any questions at

01:19.880 --> 01:25.440
break, colon, and that leaks, I am from France.

01:25.440 --> 01:29.200
Back to topic, why would we like to use Flutter?

01:29.200 --> 01:35.760
We had a fancy overview about the Linux native ecosystem, about GDK progress, about KDE targeting

01:35.760 --> 01:36.760
Linux mobile.

01:36.760 --> 01:38.560
Why Flutter?

01:38.560 --> 01:42.360
Because Flutter is a decent cross-platform ecosystem.

01:42.360 --> 01:49.520
Unlike if I develop a GDK app, I do not uniquely target Linux, but I target giant ecosystem

01:49.520 --> 01:55.880
consisting of iOS, Android, desktops, maybe even web, and I can potentially also target

01:55.880 --> 01:56.920
Linux mobile.

01:56.920 --> 02:01.880
It has a fancy plug-in system for developers to access native resources, so we are not

02:01.880 --> 02:07.360
bound for example to web browser APIs, as we know it from many JavaScript based cross-platform

02:07.360 --> 02:09.320
toolkits.

02:09.320 --> 02:13.680
We have an amazing UI toolkit and that's what they love Flutter for.

02:13.680 --> 02:21.040
You have animations, the 2024 style, and it's fun to use.

02:21.040 --> 02:27.440
It renders perfectly, it renders 128 frames per second on high-end devices unless you

02:27.440 --> 02:30.760
have some vendors doing weird things and then it won't work.

02:30.760 --> 02:37.640
And it's no JS, no XML, so we have design as part of the code, so no external design

02:37.640 --> 02:42.400
resources which makes it quite fancy to refactor to use it for development.

02:43.400 --> 02:50.040
Yeah, Flutter, but let's talk about Linux and especially Linux mobile.

02:50.040 --> 02:54.680
We will talk about both in this talk, but the goal is finally what are the issues about

02:54.680 --> 02:57.400
Linux mobile.

02:57.400 --> 03:02.600
We have a giant ecosystem, I already told, like there are 10,000 apps in the Google Play

03:02.600 --> 03:08.280
store made with Flutter, a bit less in the Apple App Store, but we have a giant ecosystem

03:08.280 --> 03:13.720
and all these ecosystems of Flutter apps could target Linux and Linux mobile too.

03:13.720 --> 03:18.280
They are optimized for mobile views, they're actually handy to use on Linux.

03:18.280 --> 03:20.800
We just need to make it happen.

03:20.800 --> 03:26.240
And we have big players into it, namely Canonical and Google.

03:26.240 --> 03:30.880
I know they are very popular here, but they use Flutter, especially on Linux and push

03:30.880 --> 03:31.880
it.

03:31.880 --> 03:35.800
Unfortunately, that's a problem too, that they are the ones pushing it, not the community

03:35.840 --> 03:37.800
we will see that later.

03:37.800 --> 03:46.880
Yeah, like what are the key points in targeting Linux mobile and Linux in general?

03:46.880 --> 03:51.480
The first is like, okay, if I have the application, it should not have runtime issues, it should

03:51.480 --> 03:57.600
be usable on the mobile screen, it should have functional interaction with the user.

03:57.600 --> 04:03.440
The second from the developer perspective is I should be able to debug the app.

04:03.480 --> 04:10.000
I should be able to compile the app for my Linux phone, there we get to a big problem.

04:10.000 --> 04:12.760
And the third thing is redistribution.

04:12.760 --> 04:18.840
I first of all need to redistribute Flutter in order to have a package system which can

04:18.840 --> 04:26.280
target Linux distributions with dependency trees, with Flutter as a build dependency.

04:26.280 --> 04:31.680
The second thing is I need to package my Flutter app for Linux distributions.

04:32.040 --> 04:34.800
It sounds easy, but it can be hell.

04:34.800 --> 04:39.120
This is the first thing we are going to talk about because that's the most complicated

04:39.120 --> 04:42.320
when talking about Flutter.

04:42.320 --> 04:48.920
Afterwards debugging and runtime, I will give you a brief showcase of Flutter on Linux.

04:48.920 --> 04:55.800
Yeah, Flutter redistribution consists of two parts.

04:55.800 --> 05:02.040
We need to build the Flutter tool chain, so everything we need to develop and we need

05:02.040 --> 05:09.040
to package it in a way we can use it on Linux distributions in order to have it as dependency.

05:09.040 --> 05:18.120
Yeah, let's look at packaging because that's easier to understand at that point.

05:18.120 --> 05:25.520
If we follow the instructions on docs.flutter.dev.slashgettingstarted how to install Flutter, we simply

05:25.600 --> 05:26.600
clone a Git repository.

05:26.600 --> 05:27.600
I mean, that sounds amazing.

05:27.600 --> 05:28.600
It's just a Git repository.

05:28.600 --> 05:31.600
It should be packageable.

05:31.600 --> 05:35.640
You download that Git repository or you clone that Git repository, you execute Flutter

05:35.640 --> 05:37.600
for the first term and you see that.

05:37.600 --> 05:41.800
We're downloading lots of things.

05:41.800 --> 05:44.920
First of all, we are downloading the Dart SDK.

05:44.920 --> 05:48.440
We could use that one as system dependency, but that's difficult.

05:48.440 --> 05:51.040
But then we continue downloading.

05:51.040 --> 05:52.720
Let's look where are we downloading to?

05:52.720 --> 05:59.720
I mean, should be a user directory or something like decent location, which is user configurable.

05:59.720 --> 06:04.920
Yeah, no, no, no.

06:04.920 --> 06:06.200
We download all the stuff.

06:06.200 --> 06:08.160
We download to the installation directory.

06:08.160 --> 06:12.720
Now imagine how it is like with packaging stuff for Linux distributions.

06:12.720 --> 06:18.040
It's a bad idea if your runtime has hard coded to download stuff into the installation folder.

06:18.040 --> 06:20.840
That's a bit annoying.

06:20.960 --> 06:24.960
But that's something you can work around with patches to apply.

06:24.960 --> 06:26.960
Yeah, step by step.

06:26.960 --> 06:29.960
What is it downloading?

06:29.960 --> 06:32.080
Like you download the Flutter source, blah, blah, blah.

06:32.080 --> 06:37.680
You execute Flutter for the first time at loop and it's downloading the Dart SDK.

06:37.680 --> 06:41.760
So Dart is the underlying programming language Flutter is using.

06:41.760 --> 06:47.120
And yeah, afterwards, it's creating the snapshot from the Flutter tool.

06:47.120 --> 06:55.800
So it's compiling the Flutter tool written in Dart in order to have an executable of the Flutter tool itself.

06:55.800 --> 07:02.800
Then this compiled Flutter tool, remember, you clone source and it's first compiling stuff.

07:02.800 --> 07:10.800
Then we download the engine, the Flutter engine, and dozens of platform dependencies.

07:10.800 --> 07:14.800
And they keep changing each and every release.

07:15.480 --> 07:17.480
Good luck capturing that.

07:17.480 --> 07:18.480
So what do we have?

07:18.480 --> 07:21.480
We have fonts, we have Android stuff.

07:21.480 --> 07:28.480
If I use the Flutter tool to target Android development, I have different compilers all per architecture,

07:28.480 --> 07:30.480
compiled with native APIs.

07:30.480 --> 07:32.480
I have the Web SDK for target web.

07:32.480 --> 07:36.480
I need to download Skiya, CanvasKit in order to render in the web.

07:36.480 --> 07:38.480
All this is going to be downloaded.

07:38.480 --> 07:43.480
Generic Flutter SDK tools, platform compilers for Windows, Linux, Mac OS, FrontRenderer,

07:44.160 --> 07:46.160
for example, the GTK and better on Linux.

07:46.160 --> 07:48.160
And then I'm mostly done.

07:48.160 --> 07:55.160
Let's look at where these downloads come from in order to capture them and in order to improve that.

07:55.160 --> 07:58.160
Get a release now, now, it would be too easy.

07:58.160 --> 08:03.160
Some package registry, like, I mean, that could be a hosted Nexus or something.

08:03.160 --> 08:10.160
Better Chromium CI, the build system of Google for their open source proprietary components.

08:10.840 --> 08:18.840
They build all these components you need at runtime in order to save time while executing,

08:18.840 --> 08:19.840
I don't know.

08:19.840 --> 08:24.840
And it's built in Chromium CI and then downloaded at runtime.

08:24.840 --> 08:28.840
So you need to capture that somehow.

08:28.840 --> 08:31.840
You cannot know what's happening in this Chromium CI.

08:31.840 --> 08:32.840
No one knows.

08:32.840 --> 08:38.340
It's just we download blocks from proprietary storage and this is not very open source of

08:38.340 --> 08:39.340
you.

08:39.520 --> 08:40.520
It's held to package.

08:40.520 --> 08:44.020
It's held to work with that.

08:44.020 --> 08:45.780
But back to the topic, how can we package that?

08:45.780 --> 08:51.820
Now that we know where all this stuff is coming from, we could take all this stuff from Chromium

08:51.820 --> 08:52.820
CI.

08:52.820 --> 08:53.820
I mean, it's the easiest approach.

08:53.820 --> 08:55.180
I just want to have Flutter function.

08:55.180 --> 08:56.580
I want to develop my apps.

08:56.580 --> 09:00.480
Let's just package that stuff we get from Chromium CI.

09:00.480 --> 09:05.340
We could pre-cache it at prepared time of the packaging process.

09:05.340 --> 09:10.900
So download all these dependencies, create the snapshot and so on.

09:10.900 --> 09:15.020
And then just have it packaged in the distribution package with ship.

09:15.020 --> 09:18.060
Other option would be, and I won't give a definite answer on it.

09:18.060 --> 09:19.660
It's just prospect.

09:19.660 --> 09:23.020
You could also patch Flutter to make this user configurable.

09:23.020 --> 09:26.100
I made a merge request for that like two years ago.

09:26.100 --> 09:30.220
It was rejected because the Flutter authors did not see any use case.

09:30.220 --> 09:34.820
It's obviously a perfect idea to download stuff to the installation directory.

09:35.820 --> 09:36.820
Yeah.

09:37.820 --> 09:41.740
But even better, we could build them ourselves.

09:41.740 --> 09:48.140
Because actually, when I talk about Floss and mobile devices, I do not want stuff dropping

09:48.140 --> 09:49.340
out of this Chromium CI.

09:49.340 --> 09:52.140
I have no clue about what's happening in.

09:52.140 --> 09:53.140
Yeah.

09:53.140 --> 09:55.140
Building Flutter next topic.

09:55.140 --> 09:56.740
I don't know.

09:56.740 --> 09:59.820
Has anyone of you already built Flutter?

09:59.820 --> 10:01.580
Like the Flutter Engine, the Flutter tool?

10:01.580 --> 10:03.820
I guess a couple of people here.

10:03.820 --> 10:06.260
I guess you had fun.

10:06.260 --> 10:12.180
At this point, very special thanks to Lauren.

10:12.180 --> 10:21.220
Amazing work on patching Flutter to be able to make Flutter buildable with more or less

10:21.220 --> 10:24.140
less-vendored tool chain.

10:24.140 --> 10:25.540
Amazing work.

10:25.540 --> 10:30.380
So the next few slides are going to present actually the work done by Lauren.

10:31.380 --> 10:32.380
Yeah.

10:32.380 --> 10:33.660
Issues on Flutter Floss builds.

10:33.660 --> 10:37.100
Like you have, first of all, vendor packages.

10:37.100 --> 10:42.660
Like everything you could use Assistant to Sensey is being vended from some random upstream

10:42.660 --> 10:44.860
source from Google.

10:44.860 --> 10:46.100
We do not want that.

10:46.100 --> 10:47.100
Yeah.

10:47.100 --> 10:50.100
It's coming from Chromium CI, by the way.

10:50.100 --> 10:57.180
Also, the Flutter sources themselves are written in a way it's not muscle-compatible,

10:57.180 --> 11:04.260
existing patches, adding muscle support to the Flutter Engine were so far always rejected.

11:04.260 --> 11:10.060
Same applies to existing patches making it compile on BSD.

11:10.060 --> 11:13.500
Those are not that functional yet, but there were clear statements.

11:13.500 --> 11:15.540
There's no interest in adding support to that.

11:15.540 --> 11:16.860
There's no use case in it.

11:16.860 --> 11:22.740
So the Flutter team is not willing to accept these patches, this work done there, which

11:22.740 --> 11:24.620
is super sad in my opinion.

11:24.620 --> 11:25.620
Yeah.

11:26.380 --> 11:30.180
So the tool chain to build Flutter itself, it's basically a G-client solution.

11:30.180 --> 11:36.820
So you get the fancy repo, Depot tools from Google and download the solutions, and it's

11:36.820 --> 11:42.100
downloading lots of stuff from Chromium CI.

11:42.100 --> 11:50.140
This is a screenshot, can you see it here, from the Alpine package build files for building

11:50.140 --> 11:51.140
Flutter.

11:51.180 --> 11:56.620
You have, I don't know how many are, it's 15 patches only to make Flutter compile.

11:56.620 --> 12:01.380
There, you have some patches affecting the Engine, so for building the Engine, and some

12:01.380 --> 12:08.220
for runtime for the Flutter tool, and in both cases it's giant overhead just to package

12:08.220 --> 12:10.220
this simple tool.

12:10.220 --> 12:12.220
Yeah, it's sad.

12:12.220 --> 12:13.220
Yeah.

12:13.220 --> 12:16.500
Upstream work, nah, so far not wanted.

12:16.500 --> 12:17.500
It's not appreciated.

12:17.500 --> 12:23.540
There was upstream work until all patches were rejected, like it's already known for a while.

12:23.540 --> 12:28.980
So far all aims to improve that were rejected, and that's why there's unfortunately lots

12:28.980 --> 12:31.660
of downstream work going on.

12:31.660 --> 12:33.540
Yeah, mostly rejected.

12:33.540 --> 12:35.500
There we are.

12:35.500 --> 12:42.820
So in order to build Flutter on using a Floss tool chain only, you first need to patch the

12:42.820 --> 12:51.060
build route in order to have the function environment to build the Flutter Engine itself.

12:51.060 --> 12:53.620
First of all, things like, hey, use my local Python.

12:53.620 --> 12:57.020
I do not need your Vendor Python.

12:57.020 --> 12:59.540
Use local libraries and stuff.

12:59.540 --> 13:01.300
By default everything is Vendor.

13:01.300 --> 13:06.940
Afterwards, you need to patch the Engine to, for example, work or functionally work on

13:06.940 --> 13:08.580
muscle.

13:08.580 --> 13:13.300
This is though not required if you target G-Lib C devices, but the post market OIS people

13:13.300 --> 13:18.020
and Alpine people in this room, maybe the Void Linux people might be happy about that.

13:18.020 --> 13:23.300
And there are the patches are pretty similar to target BSD because Flutter has lots of

13:23.300 --> 13:30.900
stuff hard coded to function on Linux only, though it could at many places work on BSDs

13:30.900 --> 13:31.900
too.

13:31.900 --> 13:35.580
I'm talking about BSD because I love using BSD actually, and I'm sad Flutter doesn't

13:35.580 --> 13:36.580
work there yet.

13:36.580 --> 13:42.900
And afterwards, if you got to patch the Engine, you still need to patch the Flutter tool.

13:42.900 --> 13:44.620
Like we were talking about that.

13:44.620 --> 13:47.820
These artifacts, we do not want to download the Dart SDK.

13:47.820 --> 13:53.540
I want to use the Dart language installed by my distribution package manager rather

13:53.540 --> 13:56.060
than like some pre-compiled stuff.

13:56.060 --> 14:02.860
At the moment, it's usually, for example, Alpine has the Dart muscle port packaged there

14:02.860 --> 14:05.020
in order to work around that.

14:05.020 --> 14:07.180
So there's no canonical way yet.

14:07.180 --> 14:10.780
There's no clean way yet, though there is work ongoing that.

14:10.780 --> 14:13.220
And yeah, so that was the brief overview.

14:13.220 --> 14:14.220
I mean, I need to hurry.

14:14.220 --> 14:17.020
The talk is way too short to dive deeper into it.

14:17.020 --> 14:20.580
Like the second thing is debugging and cross-compiling.

14:20.580 --> 14:28.900
If I have a Linux mobile device, it's usually another CPU architecture compared to my host

14:28.900 --> 14:29.900
machine.

14:30.180 --> 14:37.700
Though host machines with ARM CPUs are involving now, like most people still use AMD64 devices,

14:37.700 --> 14:46.220
and that's why in most cases for debugging Linux mobile app targeting like this device,

14:46.220 --> 14:49.980
they need to be cross-compiled.

14:49.980 --> 14:53.540
And that's the moment where I wished Flutter was go because go is fancy and cross-compiling

14:53.540 --> 14:57.420
and Dart is like, oof, it's crappy.

14:57.420 --> 14:58.420
But wait a second.

14:59.100 --> 15:06.700
There are these fancy arguments existing for the Flutter tool, like target platform and

15:06.700 --> 15:15.700
like target sysroute where you can like specify a sysroute of, for example, R64 installation.

15:15.700 --> 15:17.700
Let's try that.

15:17.700 --> 15:20.300
That's the reply you get.

15:20.300 --> 15:25.300
I mean, nice that you added these parameters, but that's not exactly what I expected if

15:25.300 --> 15:26.940
it's shipped.

15:26.940 --> 15:34.260
So yeah, you see, there we have the aim of the upstream team to make it support, but

15:34.260 --> 15:35.860
it's too slow.

15:35.860 --> 15:40.260
There are other solutions making it better yet, and now I'm going away from the upstream,

15:40.260 --> 15:45.980
presenting some possibilities like to get Flutter to debug and to cross-compile on your

15:45.980 --> 15:49.900
ARM device, on your Raspberry Pi, on your watch and whatsoever.

15:49.900 --> 15:54.620
At that point, I can also recommend the embedded Linux talks on Flutter taking place in this

15:54.620 --> 15:55.620
system.

15:55.620 --> 15:59.500
They are driving deeper into the solutions I will present.

15:59.500 --> 16:03.300
Yeah, the shark is very confused by this output.

16:03.300 --> 16:10.780
Yeah, if I just want to compile, I could also just use KMU and like compile if it's functional

16:10.780 --> 16:13.260
for release builds, compile the stuff on my host tank.

16:13.260 --> 16:16.540
I could use KMU, use a static binary.

16:16.540 --> 16:17.860
I have my ARM binary.

16:17.860 --> 16:18.980
Okay, it's compiled.

16:18.980 --> 16:25.540
I could ship it, but I actually want a debugging session where I can use the fancy Flutter

16:25.540 --> 16:33.700
features like HotRestart, HotReload, where I just do Flutter run, show my beryllium instead

16:33.700 --> 16:37.860
of building it locally, pushing it, debugging it, not debugging it, checking whether it

16:37.860 --> 16:41.860
works, manually checking some outputs.

16:41.860 --> 16:44.260
Compiling is not debugging.

16:44.260 --> 16:46.180
That's a huge difference in it.

16:46.180 --> 16:52.620
Yeah, for cross-compiling and debugging, there's no canonical way yet to do that.

16:52.620 --> 16:56.700
You can compile Flutter cross-platform using KMU static binary.

16:56.700 --> 16:59.140
Thanks, but that's crappy.

16:59.140 --> 17:01.180
We actually don't want to do that.

17:01.180 --> 17:04.980
You could also just have your standalone ARM64 build server.

17:04.980 --> 17:05.980
That's what I do.

17:05.980 --> 17:12.460
I have ARM64 CI devices at home with which I build all the Flutter stuff I build in order

17:12.460 --> 17:18.340
to have test builds targeting, for example, Debian on mobile.

17:18.340 --> 17:21.340
Or you use custom devices.

17:21.340 --> 17:25.660
Flutter supports custom devices, which means you have configuration files.

17:25.660 --> 17:35.260
You tell the engine, the Flutter tool at runtime to use or to run on device configurations

17:35.260 --> 17:36.500
actually not supported.

17:36.500 --> 17:39.180
And there you have projects dropping in there.

17:39.180 --> 17:44.220
You have Flutter in Linux, embedded Linux developed by Sony.

17:44.220 --> 17:47.820
It's the Flutter embedded devices.

17:47.820 --> 17:51.180
Okay, that's duplicated, but yeah.

17:51.180 --> 17:57.660
It's basically a wrap around the Flutter tool, which enables you to run on ARM devices also

17:57.660 --> 18:02.620
remotely and you have Flutter Py also uses the custom devices API in order to target

18:02.620 --> 18:04.820
remote devices on Linux.

18:04.820 --> 18:07.060
But again, there is no build in way.

18:07.060 --> 18:11.500
There are these fancy projects enabling us to do that, but there's no Flutter build

18:11.500 --> 18:14.180
in way and that's sad.

18:14.180 --> 18:15.180
Yeah.

18:15.180 --> 18:18.860
As of now, it's easier.

18:18.860 --> 18:20.980
I have a full Linux installation on here.

18:20.980 --> 18:27.540
It's easier if I have my Flutter development environment installed on the device and SSH

18:27.540 --> 18:34.500
on the device and debug on there because that's way more functional than using the typical

18:34.500 --> 18:37.380
stuff you know from the second phone Android here.

18:37.380 --> 18:39.500
I just plug in the device and debug.

18:39.500 --> 18:41.420
That's not the state of debugging here.

18:41.420 --> 18:46.060
It's rather easy to develop on the target device itself if you have a decently powered

18:46.060 --> 18:51.740
CPU and like a desktop Linux distribution there or like can do it by SSH, that's way

18:51.740 --> 18:53.100
more convenient.

18:53.100 --> 18:55.060
And you should hopefully see an image.

18:55.060 --> 18:56.260
No, that's a joke.

18:56.260 --> 19:01.260
I have prepared a short showcase for you.

19:01.260 --> 19:08.260
It was number seven.

19:08.260 --> 19:13.940
Yeah.

19:13.940 --> 19:15.940
That's like showcase of Flutter.

19:15.940 --> 19:18.380
In a few moments, you will see me opening a Flutter.

19:18.380 --> 19:20.540
I recalled it while traveling here.

19:20.540 --> 19:21.540
That's why it's a bit blurry.

19:21.540 --> 19:23.020
Like that's an example of a Flutter app.

19:23.020 --> 19:26.540
Like you see animation rendering is pretty decent.

19:26.540 --> 19:33.060
Animation is crappy because it requires upstream patches in order to have defaultly handle

19:33.060 --> 19:36.540
Linux touch events as touch events and not as pointer events.

19:36.540 --> 19:41.780
There it's getting crappy but from the UI part, Flutter is fancy.

19:41.780 --> 19:50.140
And for example, like some Flutter apps ship these patches like to get scrolling to work.

19:50.380 --> 19:54.580
Most others do not.

19:54.580 --> 20:00.140
Some vendors ship patches.

20:00.140 --> 20:07.820
For example, Alpine again has patches to include a scroll behavior treating Linux touch mouse

20:07.820 --> 20:12.820
input as scroll drag enabled input.

20:12.820 --> 20:19.820
I think it's broken.

20:20.300 --> 20:25.380
I know it's broken since the last few releases but I think that's because the patch must

20:25.380 --> 20:27.380
be adjusted.

20:27.380 --> 20:28.980
Originally Alpine had a patch.

20:28.980 --> 20:32.300
It's no longer functional but it had a patch for it.

20:32.300 --> 20:35.740
And one could adjust that patch to still function.

20:36.740 --> 20:43.020
And like short summary, the first point is the touch is considered as mouse.

20:43.020 --> 20:48.220
That's why if you swipe it selects instead of scrolling.

20:48.220 --> 20:52.340
Scaling is sometimes an issue but that's an issue everywhere in Linux mobile.

20:52.340 --> 20:57.100
These devices have full HD or even higher resolution so everything is scaled dozens

20:57.100 --> 20:58.100
of times.

20:58.100 --> 21:01.620
You saw a GTK header bar which is pretty annoying.

21:01.620 --> 21:07.940
I do not want to see your header bar but that's again a GTK issue, not an issue of Flutter.

21:07.940 --> 21:14.060
And multi-window is pretty crappy because if I start a new instance you run into issues

21:14.060 --> 21:18.900
with any database connection you have open if you use local databases and you mess up

21:18.900 --> 21:20.900
your applications.

21:20.900 --> 21:27.020
Though you run into those issues in Android 2 but on Android it's handled way better because

21:27.020 --> 21:30.740
by default it does not start at two instances of your app.

21:30.860 --> 21:33.980
And yeah, that's state of the art.

21:33.980 --> 21:35.780
It's crappy but there is momentum.

21:35.780 --> 21:38.220
There is work going on.

21:38.220 --> 21:44.860
If you use all the patches, all the tool chains around Flutter, if you actually use them to

21:44.860 --> 21:49.740
target Linux mobile you can target Linux mobile in a pretty decent way.

21:49.740 --> 21:51.660
And I hope it's going on.

21:51.660 --> 21:53.140
Some work is going on upstream.

21:53.140 --> 21:58.700
Unfortunately most of the work is going on downstream which is pretty sad.

21:58.700 --> 22:01.420
That's not very open source of Google.

22:01.420 --> 22:04.420
But I mean it's Google.

22:04.420 --> 22:10.420
Yeah, so let's get Linux mobile ready as a cross-platform target and that was my talk.

22:21.420 --> 22:22.420
Awesome.

22:22.420 --> 22:23.420
Does anyone have questions?

22:23.420 --> 22:24.420
Yeah?

22:25.420 --> 22:31.180
You talked about the upstream not wanting to support muscle.

22:31.180 --> 22:39.700
But doesn't Android already have a libc other than glibc and do they even support that?

22:39.700 --> 22:45.540
If we look at Flutter we are talking about a completely different target of Android and

22:45.540 --> 22:47.740
Linux.

22:47.740 --> 22:52.500
And the Flutter Linux engine does not support anything apart from glibc and upstream.

22:52.500 --> 22:53.780
Of course it supports Android.

22:53.780 --> 22:59.260
That was what it was initially developed for but there it's another completely different

22:59.260 --> 23:01.500
components of the engine.

23:01.500 --> 23:05.220
And yet they compile with Android libc.

23:05.220 --> 23:07.220
Forgot the name.

23:07.220 --> 23:10.780
Yeah, by Jonik.

23:10.780 --> 23:12.780
Any more questions?

23:12.780 --> 23:13.780
Yeah?

23:13.780 --> 23:14.780
Martin.

23:14.780 --> 23:24.540
Your demo video showed a Flutter application running pretty smoothly.

23:24.540 --> 23:25.540
What defies what?

23:25.540 --> 23:26.540
Sorry?

23:26.540 --> 23:29.700
What defies your demo video running?

23:29.700 --> 23:35.020
That was a few years old smart from Shomai.

23:35.020 --> 23:38.020
It's a Shomai Pocophone F1 running Debian.

23:38.020 --> 23:39.020
No, how is it called?

23:39.020 --> 23:40.020
Mobian.

23:40.020 --> 23:41.020
Ah, okay.

23:41.020 --> 23:42.020
So, Friedrino.

23:42.020 --> 23:43.020
Yeah.

23:43.020 --> 23:44.020
Okay, thank you.

23:44.380 --> 23:48.100
If you tried on the Pine phone for example you won't have that experience because the

23:48.100 --> 23:49.600
GL driver is broken.

23:49.600 --> 23:51.100
That's exactly what I saw the last video.

23:51.100 --> 23:56.340
I often have that in my issue list, believe me.

23:56.340 --> 23:57.940
Any more questions?

23:57.940 --> 24:09.620
Yeah, that's one.

24:09.620 --> 24:18.820
So it seems like quite a pain to get Flutter to build and compile and get it all the way

24:18.820 --> 24:22.140
an app running on a Linux phone.

24:22.140 --> 24:23.300
Is it worth it?

24:23.300 --> 24:29.480
Is there really nothing better to get an app running on a Linux phone?

24:29.480 --> 24:35.660
As of now I consider Flutter as pretty liable for targeting Linux mobile because you have

24:35.660 --> 24:38.860
this giant ecosystem of existing Flutter apps.

24:38.860 --> 24:46.260
You have thousands of them which could theoretically run on Linux mobile but simply do not target

24:46.260 --> 24:47.380
it yet.

24:47.380 --> 24:50.340
You have 10,000 proprietary apps in Play Store.

24:50.340 --> 24:52.500
Okay, we do not want to have them.

24:52.500 --> 24:55.260
We have dozens of apps in Android all by the end.

24:55.260 --> 24:59.300
All of them could run on Linux if we made it easier.

24:59.300 --> 25:02.060
And all those patches are usually not patches.

25:02.060 --> 25:04.860
I as an app developer need to apply to my projects.

25:04.860 --> 25:07.300
Okay, I need to apply some patches too.

25:07.300 --> 25:10.180
Are the vendors shipping my app?

25:10.180 --> 25:16.140
But it's usually the vendors or the distributors shipping the distribution package to ship

25:16.140 --> 25:17.220
Flutter.

25:17.220 --> 25:20.820
I can easily build the Debian package for Flutter app.

25:20.820 --> 25:27.060
But if I want to do it the fancy open source way, if I want to use Flutter as a build

25:27.060 --> 25:30.420
dependency shipped from my package manager, then it's difficult.

25:30.420 --> 25:35.940
But I have the vision of getting there one day where I do not need to install, use my

25:35.940 --> 25:41.260
local Flutter installation with Flutter.dev slash getting started.

25:41.260 --> 25:45.220
But using Vendor Flutter, Vendor in the upstream of my Linux solution.

25:45.220 --> 25:49.780
And then it's harder but it's not the work done by the end developers.

25:49.780 --> 25:54.340
So I think it's worth it because it's only the distributors who need to do most of this

25:54.340 --> 25:55.340
work.

25:55.340 --> 25:56.340
Okay, thank you.

25:56.340 --> 25:57.340
Questions?

25:57.340 --> 25:58.340
Okay, in the back, one second.

25:58.340 --> 26:12.060
Thank you.

26:12.060 --> 26:20.140
So not related to Flutter, but if you said that's so painful to get something upstream

26:20.140 --> 26:26.220
from an open source perspective, how difficult would be or what would be the challenges,

26:26.220 --> 26:27.700
for example, to say, okay.

26:27.700 --> 26:34.100
As a community, we fork Flutter and we start supporting this fork because the maintainers

26:34.100 --> 26:38.060
don't want these patches on the official one.

26:38.060 --> 26:42.060
And we as open source citizens, we adopt this fork.

26:42.060 --> 26:44.700
How difficult would be that culturally?

26:44.700 --> 26:53.100
Well, forking Flutter entirely would be pretty complicated because Flutter is a rapidly moving

26:53.100 --> 26:55.780
ecosystem.

26:55.780 --> 27:00.860
There are many patches in the upstream and that could always break your fork with the

27:00.860 --> 27:04.580
giant company standing behind pushing Flutter development.

27:04.580 --> 27:09.980
So you have on the one side this giant company, namely Google, working on Flutter with a giant

27:09.980 --> 27:14.620
community and you would need to maintain your fork of the entire Flutter system on your

27:14.620 --> 27:15.620
own.

27:15.620 --> 27:24.380
What I consider as more realistic is patching the build route and like single components

27:24.380 --> 27:30.420
of the Flutter ecosystem, you could use as drop in dependency when shipping Flutter as

27:30.420 --> 27:35.700
a Linux distribution, for example, that would be way easier and also that's where currently

27:35.700 --> 27:41.900
see the Flutter floss Linux mobile ecosystem moving towards.

27:41.900 --> 27:47.620
So this work is more or less being done, but it's at the beginning stage.

27:47.620 --> 27:52.340
But I would not consider like forking Flutter entirely as a new framework.

27:52.460 --> 27:56.940
Hey, with this one you can target Linux mobile too because then you would lose all the big

27:56.940 --> 28:01.780
players already having their apps and continuing using Flutter.

28:01.780 --> 28:02.780
Thanks.

28:02.780 --> 28:03.460
Please give another round of applause.

