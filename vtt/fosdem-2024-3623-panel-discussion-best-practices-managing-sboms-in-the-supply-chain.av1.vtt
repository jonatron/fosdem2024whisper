WEBVTT

00:00.000 --> 00:17.120
Okay, so next up we have a panel of Danone and Jeff here.

00:17.120 --> 00:22.940
So we're going to be discussing best practices around S-Bornman supply chain.

00:22.940 --> 00:29.400
So my idea initially, and if anybody has questions or whatever, feel free to jump in.

00:29.400 --> 00:32.420
So just maybe questions at the end.

00:32.420 --> 00:35.200
Would be maybe break this into three sections.

00:35.200 --> 00:41.760
So the first one would be around what you think is best practice or

00:41.760 --> 00:46.320
challenge about S-Born generation, sharing and gaining gestion, and

00:46.320 --> 00:50.560
then basically handling them, storage, all of that.

00:50.560 --> 00:54.760
So yeah, without further, I'll give the pass them back to you.

00:54.760 --> 00:58.240
And then if you want to introduce yourself and Jeff.

00:58.240 --> 01:00.200
Yeah, hi everyone.

01:00.200 --> 01:03.680
I guess most of the faces are familiar from the fringe event from last week.

01:03.680 --> 01:06.040
So yeah, hello again.

01:06.040 --> 01:08.800
And I'm Aaron Arrogation.

01:08.800 --> 01:10.040
I work for Siemens Health Nears.

01:10.040 --> 01:14.280
I had the Secure Development and Compliance at the organizational level and

01:15.600 --> 01:21.320
also a co-lead of software 360 project at Hosea-Rite Eclipse Foundation.

01:22.440 --> 01:27.040
So the topic of S-Born has kind of,

01:27.040 --> 01:31.480
we all know that has came up into the limelight in the last one year or so.

01:32.600 --> 01:37.520
So it has had its effect in our workspace also.

01:37.520 --> 01:42.600
I was only needed to concentrate on license complaints until recently, but

01:42.600 --> 01:49.560
now the whole thing has changed and the requirements has come up in a much more

01:49.560 --> 01:55.480
stricter way because of the regulation and the executive order.

01:55.480 --> 02:00.760
And so predominantly from my side, being a healthcare organization,

02:00.760 --> 02:05.280
we have a lot of challenges in adapting to or

02:05.280 --> 02:08.480
catering to this requirement in a very sudden way.

02:08.480 --> 02:15.400
Because this new regulation calls for a very stringent or

02:15.400 --> 02:19.440
very disruptive way of changing things.

02:19.440 --> 02:23.760
And it is very challenging in the healthcare sector because our processes

02:23.760 --> 02:28.480
are very closely tied to the FDA regulations and our relationship with

02:28.480 --> 02:31.440
our supply chain is quite sensitive.

02:31.440 --> 02:36.120
Because we cannot suddenly demand our suppliers to give this thing,

02:36.120 --> 02:37.840
otherwise you would be out of the process.

02:37.840 --> 02:39.080
That cannot be done.

02:39.080 --> 02:41.840
So we have to operate in, since it is healthcare,

02:41.840 --> 02:44.680
I can take the example of doing a surgery.

02:44.680 --> 02:49.000
We have to keep the patient alive and then do the work.

02:49.000 --> 02:51.880
So that is the situation right now.

02:51.880 --> 02:57.320
And we are taking it that seriously and taking the steps very clearly because

02:57.320 --> 03:01.720
right now what we are doing mostly is identifying the current challenges and

03:01.720 --> 03:02.840
gaps in the process.

03:04.320 --> 03:09.040
And evaluating our existing methods of how we are meeting the regulations.

03:11.200 --> 03:17.600
Declaring all the elements of open source usage was already there, but

03:17.600 --> 03:19.480
it existed in different formats.

03:19.480 --> 03:24.200
But now when the regulation demands a particular or a set of few formats,

03:25.640 --> 03:32.240
there has to be a lot of work done in all areas like right from the R&D processes,

03:33.440 --> 03:36.480
the contracts with the suppliers, all of these things.

03:36.480 --> 03:39.320
And then we have the legal aspect also.

03:39.320 --> 03:43.280
So the current challenges, the inability for

03:43.280 --> 03:49.440
a large organization which is heavily regulated to transition at a fast pace,

03:49.440 --> 03:51.120
is a major challenge.

03:51.120 --> 03:55.160
But we are closely monitoring the developments and

03:55.160 --> 03:58.320
trying to go along with the community in that.

03:59.480 --> 04:05.600
And the one core strategy that we have right now is make sure that we don't

04:05.600 --> 04:07.520
miss a train in this aspect.

04:08.920 --> 04:10.520
But it's a challenging thing.

04:10.520 --> 04:12.360
I'll come back to that more details after.

04:15.080 --> 04:17.400
Hi everyone, I'm Jeff Mendoza.

04:17.400 --> 04:20.240
I'm a maintainer on the GWAC project.

04:20.240 --> 04:25.240
GWAC is an incubating project under the open source security foundation.

04:25.240 --> 04:32.160
And it's a tool that ingests S-bombs and then is used for querying your S-bombs.

04:32.160 --> 04:36.560
I can get more into it later, but as far as the S-bom management,

04:36.560 --> 04:43.360
the idea is that we need to be able to ask questions about our S-bombs.

04:43.360 --> 04:46.280
And so that's the kind of the part I focus on.

04:47.400 --> 04:51.960
Some other background for me personally, I used to work at the open source programs

04:51.960 --> 04:55.960
office at Microsoft where I worked on security and license compliance where we

04:55.960 --> 04:59.200
would have scanners that didn't generate S-bombs.

04:59.200 --> 05:03.320
We had an internal format, but it would scan,

05:03.320 --> 05:07.120
put the results, all the component versions into a database and

05:07.120 --> 05:11.560
then give you security and legal alerts based on that.

05:11.560 --> 05:15.000
So I can kind of pull from that experience as well for

05:15.960 --> 05:20.160
best practices and managing S-bombs even though we didn't call them S-bombs.

05:25.440 --> 05:27.600
So one question for you, Anun.

05:27.600 --> 05:32.800
So when you think about healthcare as a heavily regulated industry,

05:32.800 --> 05:39.800
so when you think you as a participant that is using software from third parties,

05:39.800 --> 05:41.480
the suppliers in this case.

05:41.480 --> 05:49.800
So how developed is healthcare in regarding this kind of information?

05:49.800 --> 05:52.160
How transparent is it supply chain?

05:52.160 --> 05:57.600
Do your providers reliably get you information that you need to

05:57.600 --> 06:00.880
form to understand your dependencies all of that?

06:00.880 --> 06:02.440
Could you share a few words on that?

06:04.920 --> 06:11.280
So until recently, getting the entire dependency list was more of a manual

06:11.280 --> 06:16.080
centric process where all the architects were heavily loaded with this task.

06:16.080 --> 06:19.800
And with the internal process of software,

06:19.800 --> 06:25.840
the software lifecycle management, it was very much engraved in that process.

06:25.840 --> 06:31.280
And hence it was like, yeah, we had to believe the person, okay, I'm the architect,

06:31.280 --> 06:35.480
I decide that, okay, this is going to be our function and this things we need.

06:35.480 --> 06:38.280
So for a longer time until automation kicked in,

06:39.280 --> 06:43.720
we all believed that that was the truth and we had only a certain number of components.

06:43.720 --> 06:48.880
And we did all the required clearings, whether it is from a compliance aspect or

06:48.880 --> 06:50.840
from a security aspect to that.

06:50.840 --> 06:56.160
So the moment when it transitioned to package managed world where we started

06:56.160 --> 07:02.160
ingesting third party packages through the modern package managers,

07:02.160 --> 07:03.360
the situation kind of changed.

07:03.360 --> 07:07.280
So people were so alarmed with the number of dependencies that they see.

07:07.280 --> 07:13.320
And then there was a surprise for these architects or those people.

07:13.320 --> 07:15.680
Like, are we really using these many components?

07:15.680 --> 07:17.560
It could be false positives.

07:17.560 --> 07:18.280
Are you sure?

07:18.280 --> 07:19.600
Is your tool working right?

07:21.000 --> 07:23.800
So this was the discussion at some point.

07:23.800 --> 07:29.640
So as I said earlier, because it is a regulated one,

07:29.640 --> 07:35.400
for all the listed components, there are existing process where they validated,

07:35.520 --> 07:39.120
they evaluated for security and license complaints.

07:39.120 --> 07:45.640
But now that task has scaled up to an unimaginable extent.

07:45.640 --> 07:49.240
So we are trying to figure it out.

07:51.240 --> 07:55.920
And I guess, well, when you think about the problem of handling those dependencies,

07:55.920 --> 07:57.480
that's where Guac comes in.

07:57.480 --> 08:01.640
Like, it's one of those tools that will let you ingest everything and

08:01.640 --> 08:05.360
try to understand their relationships between them.

08:05.360 --> 08:09.720
So we just heard a number of talks about trusting.

08:09.720 --> 08:16.680
And so at some point, well, I would like to understand also how sharing and

08:16.680 --> 08:18.160
trust go together.

08:18.160 --> 08:21.080
I'm not sure that Guac currently feels that, but

08:21.080 --> 08:27.200
I'm not sure if you have overviews on how more visibility into those,

08:27.200 --> 08:29.240
that information can lead to better trust.

08:30.240 --> 08:38.240
I don't know about trust, but I do feel like when you're cataloging your S-bombs and

08:38.240 --> 08:43.080
have all of the dependency information in them.

08:43.080 --> 08:46.840
And if you're scanning through all of them and

08:46.840 --> 08:53.400
looking for vulnerabilities or legal information, it becomes important to see

08:53.400 --> 08:58.880
where you're using the same dependency across all of your projects.

08:59.760 --> 09:02.600
And so if you're looking at individual S-bombs, you won't see that.

09:02.600 --> 09:05.560
You'll just see, okay, I get the same vulnerability coming up in all these

09:05.560 --> 09:07.520
different products that I have.

09:07.520 --> 09:13.280
So one thing that correlating those, just part of what Guac does is,

09:13.280 --> 09:19.080
you can see where, well, what is the path to get to the vulnerability from my products?

09:19.080 --> 09:21.080
Does one product depend on another?

09:21.080 --> 09:23.880
And that's why I have this showing up in multiple ones.

09:24.880 --> 09:28.680
Is that kind of what you're getting at with kind of by looking at

09:30.680 --> 09:34.280
how the different S-bombs all point to the same project,

09:34.280 --> 09:39.040
you can get a lot more insights into both what you should be trusting,

09:39.040 --> 09:41.680
what you want to look at and what you should be concerned about.

09:43.560 --> 09:50.160
Yeah, so what I'm thinking is when you have a large body of

09:50.160 --> 09:56.640
dependency data like some organizations like the health care industry has,

09:56.640 --> 10:04.440
then you can start using tools like Guac and other databases to start understanding

10:04.440 --> 10:08.080
basically who's telling you the truth, who's lying a little bit,

10:08.080 --> 10:10.040
who's giving you missing information.

10:10.040 --> 10:15.720
And you can start making sure that the players are doing the right job.

10:16.720 --> 10:22.800
So that should give you a good overview on the state and ultimately making that information useful.

10:24.000 --> 10:26.760
So I'm, well, just to switch tracks a little bit.

10:26.760 --> 10:35.400
So I'm curious, how does the health care industry share information?

10:35.400 --> 10:36.760
Like how do you share S-bombs?

10:36.760 --> 10:38.840
What's the practice when you have an S-bomb?

10:38.840 --> 10:40.080
How do you give it?

10:40.080 --> 10:41.040
How do you receive it?

10:41.040 --> 10:42.960
How do you supply it to others?

10:43.960 --> 10:45.320
Okay.

10:45.320 --> 10:48.840
So that's a very tricky question to answer at this point of time.

10:48.840 --> 10:51.280
So how to put it?

10:51.280 --> 10:52.280
Email is fine.

10:54.520 --> 11:03.440
Yeah, I mean, I can say like we have not started supplying S-bombs in the current prescribed

11:03.440 --> 11:10.800
formats yet, but the other various ways of submitting this information to FD is already

11:10.880 --> 11:12.800
in process.

11:12.800 --> 11:16.880
So I'm not going to talk about what format or the thing, but this information is being

11:16.880 --> 11:24.960
submitted, but it is not as per the prescribed formats as PDX or Cyclone DX.

11:24.960 --> 11:27.160
We are only reaching there right now.

11:27.160 --> 11:34.400
So just to continue with what he mentioned regarding like, this brings me to the software

11:34.400 --> 11:39.280
360 part of it, like how we catalog this applications.

11:39.280 --> 11:46.840
So the real challenge for us is, you know, we have legacy systems, which are still 15,

11:46.840 --> 11:51.440
20 years old and still part of machines running across different hospitals.

11:51.440 --> 11:54.320
So we still have to maintain it.

11:54.320 --> 12:01.640
And now we have a new set of software coming in new form, which are part of the modern

12:01.640 --> 12:06.480
applications when compared to our old and scanners and other tools.

12:06.480 --> 12:12.440
So right now, all the teams that were working in this area in terms of compliance or security,

12:12.440 --> 12:18.400
we have the challenge of bridging this gap where we have to hold both sides equally well

12:18.400 --> 12:24.960
and then think of a solution where we can cater or where we can adhere to this new regulation.

12:24.960 --> 12:31.080
Because for us, the major challenge is when we deal with the legacy systems because it's

12:31.080 --> 12:35.000
like some part of it is already, you know, submitted to the regulators.

12:35.000 --> 12:38.440
We cannot really make heavy changes to that.

12:38.440 --> 12:39.760
So that's the tricky part.

12:39.760 --> 12:43.960
And software 360 is kind of helping in that way.

12:43.960 --> 12:49.000
But making it adaptable to the modern world is a challenge.

12:49.000 --> 12:55.320
So still there is going to be a certain level of manual work along with the automation to

12:55.320 --> 12:57.840
meet the goals.

12:57.840 --> 13:05.880
Do those applications get run under some SCA system to break them and then handle them,

13:05.880 --> 13:08.640
catalog them properly in software 360?

13:08.640 --> 13:14.680
Yeah, we do use multiple tools.

13:14.680 --> 13:20.680
We do use multiple toolings right now, like a lot of tools from the Cyclone, the X-Center.

13:20.680 --> 13:28.040
And most of it, I would say, majority is all internally developed because of various reasons.

13:28.040 --> 13:32.640
Or, you know, we might not have felt that the available one in the open source world

13:32.640 --> 13:35.400
is fitting our requirements.

13:35.400 --> 13:40.880
So a mix of both, but dominated by internal SCA tools.

13:40.880 --> 13:42.440
Any question for you?

13:42.440 --> 13:49.280
When do you run your scanning tools, your S-Bump generators at source area time,

13:49.280 --> 13:54.240
build time, or deployment time?

13:54.240 --> 13:59.480
So it depends on based on the current thing is like the focus is on license complaints

13:59.480 --> 14:00.920
and security.

14:00.920 --> 14:07.920
So earlier the SCA was specifically for the security and then separate team taking care

14:07.920 --> 14:08.920
of it.

14:08.920 --> 14:14.080
And they maintain the vulnerable database and then we link to the software 360.

14:14.080 --> 14:18.560
So right now it is changing like for the modern software is where they use the modern package

14:18.560 --> 14:19.680
managers.

14:19.680 --> 14:22.960
It is run and build time.

14:22.960 --> 14:26.600
And then it is a process downstream.

14:26.600 --> 14:35.040
Yeah, in my experience as well, scanning at build time is absolutely required.

14:35.040 --> 14:40.440
It's completely different building an S-Bomb from a source repository where you're either

14:40.440 --> 14:47.440
parsing a manifest or maybe doing a simulation of a manifest install or at deployment time

14:47.440 --> 14:53.000
when you don't have all of those artifacts that may go away after the build is done.

14:53.000 --> 14:56.600
So yeah, at Microsoft we only scanned at build time.

14:56.600 --> 15:04.400
Kind of a proposal for the group and a question, should we be cataloging or categorizing S-Bombs

15:04.400 --> 15:07.880
for what time they were built?

15:07.880 --> 15:14.880
Like is that something when we have a database and we want to query them or look up something,

15:14.880 --> 15:21.600
that would be an important metadata to attach, right?

15:21.600 --> 15:37.840
But when you query or as a user, as a consumer, I want to know that, right?

15:37.840 --> 15:43.040
As a consumer, especially for the medical side, what do you need to see for support windows

15:43.040 --> 15:50.040
and what do you want to see recorded for support windows?

15:50.040 --> 16:05.240
Yeah, I'm just repeating a question so that I can, so from a consumer side, like what

16:05.240 --> 16:08.840
do we want to see in the S-Bomb?

16:08.840 --> 16:14.480
Or as a producer of a device, what do you want to be able to share out, especially with

16:14.480 --> 16:18.480
the CRA coming in, okay, in terms of your support windows?

16:18.480 --> 16:22.480
And in either format I think you have support right now.

16:22.480 --> 16:23.480
I think properly, fully.

16:23.480 --> 16:29.480
And so the question is, do you have guidance on things that you're trying to get together

16:29.480 --> 16:30.480
for?

16:30.480 --> 16:31.480
You see that?

16:31.480 --> 16:32.480
Yeah.

16:32.480 --> 16:41.480
Because I wrote some of the tools they are using, why do we have our own tools?

16:41.480 --> 16:46.880
Because most of the tools, for example, from the excitement providers, all the information

16:46.880 --> 16:48.880
that you would need for licensing.

16:48.880 --> 16:49.880
Right.

16:49.880 --> 16:51.880
So we look for, where do we find the source code?

16:51.880 --> 16:54.880
What are potential or existing information of the licenses?

16:54.880 --> 16:57.880
Are there no displays or whatever?

16:57.880 --> 17:01.880
And again, most of the existing tools, you will have to repeat it.

17:01.880 --> 17:02.880
Yeah.

17:02.880 --> 17:09.000
So just, most of the existing tools do not provide all the necessary information that

17:09.000 --> 17:15.040
you would need for license compliance or to have a real complete S-Bomb.

17:15.040 --> 17:21.160
And this is still an issue because this requires that you use different tools, that you then

17:21.160 --> 17:28.200
manually adapt data, and then we come to the point, Jeff, what you mentioned, yeah, we

17:28.200 --> 17:35.000
create the S-Bomb during CI, but later we store it in SW-16.

17:35.000 --> 17:39.640
Most probably we have to add or modify some information because you were lacking at the

17:39.640 --> 17:48.800
beginning.

17:48.800 --> 17:55.240
Yeah, and regarding the submissions to the FDA part, you know, as far as I know, even

17:55.240 --> 18:00.840
the recent submissions, like not in the current format, but FDA says, yeah, things are okay

18:00.840 --> 18:01.840
with it.

18:01.840 --> 18:06.920
But, you know, I think one thing I heard is when a machine readable format was shared,

18:06.920 --> 18:10.040
FDA was not able to process it.

18:10.040 --> 18:14.480
So they asked for a human readable version of it.

18:14.480 --> 18:16.800
That's an insider story that was there.

18:16.800 --> 18:23.040
FDA will do the conversion from SPDX to Excel.

18:23.840 --> 18:25.840
Okay.

18:25.840 --> 18:26.840
Yeah.

18:26.840 --> 18:33.200
So, I mean, adding on to what Thomas mentioned, yes, regarding because the priority in our

18:33.200 --> 18:37.240
organization, you know, first comes for the license compliance and then shared with security.

18:37.240 --> 18:39.240
So, yeah.

18:39.240 --> 18:45.520
And the missing information is not just common across all packages, but maybe very few.

18:45.520 --> 18:50.480
But I think in the last six months, we have seen a great improvement in terms of, say,

18:50.480 --> 18:56.200
for example, NPMR, you get this kind of sorted out, like we get almost 90% information at

18:56.200 --> 18:59.480
the time, but others are a little bit challenging.

18:59.480 --> 19:00.480
Yeah.

19:00.480 --> 19:02.480
What do you get?

19:02.480 --> 19:03.480
Yeah.

19:03.480 --> 19:05.480
You know what Carol, you got this in there?

19:05.480 --> 19:08.440
I mean, like we are comparing it with much more olden times.

19:08.440 --> 19:09.920
So we feel better.

19:09.920 --> 19:11.720
It might not be the best, but yeah.

19:11.720 --> 19:13.720
All right.

19:13.720 --> 19:19.720
I have another topic, but if people have questions, we have like five minutes left.

19:19.720 --> 19:20.720
Yeah.

19:20.720 --> 19:29.720
I'm going to know how to solve the problem of verification and verification of the SBOM.

19:29.720 --> 19:31.720
Like I said, a bit better, right?

19:31.720 --> 19:35.720
So, you will offer a person SBOM, you will see it and trust the developer right.

19:35.720 --> 19:39.720
But how do you know that what the developer provides for us?

19:39.720 --> 19:40.720
Yeah.

19:40.720 --> 19:41.720
I'll repeat the question.

19:41.720 --> 19:45.720
Like, so your question is how do we verify and validate the SBOM that we receive from

19:45.720 --> 19:48.220
the developer?

19:48.220 --> 19:51.220
The short answer is trust.

19:51.220 --> 19:55.220
I mean, at this point of time.

19:55.220 --> 19:56.220
Yeah.

19:56.220 --> 20:06.140
And because it's mostly on the tools that we have implemented.

20:06.140 --> 20:12.540
And then, you know, I think so far that is what's been done, but there is no formal validation

20:12.540 --> 20:18.180
that we do on SBOM because we have not thoroughly started processing automated SBOMs in its

20:18.180 --> 20:21.780
complete sense because things are here and there partially.

20:21.780 --> 20:26.180
So it's like there is still manual intervention in between happening.

20:26.180 --> 20:27.180
Yeah.

20:27.180 --> 20:29.060
I'll add to that.

20:29.060 --> 20:33.460
If you're consuming open source and you're getting an SBOM, you don't need to, you know,

20:33.460 --> 20:34.460
you need to build your own SBOM.

20:34.460 --> 20:39.100
Like if for anything that's open source, you should be able to fully create an SBOM based

20:39.100 --> 20:42.860
on how you're using that library and the dependencies that you're pulling in at that time.

20:42.860 --> 20:48.300
If it's a library and they're saying I depend on these other libraries, that's just kind

20:48.300 --> 20:51.340
of theoretical, right?

20:51.340 --> 20:56.820
So yeah, if you're using open source and you're getting SBOMs, just build your own.

20:56.820 --> 21:02.220
There's some, I found about quite a few projects on Friday that people are talking about maybe

21:02.220 --> 21:08.740
in the software heritage for public databases of these dependency information for open source.

21:08.740 --> 21:14.140
So we should be able to get the right kind of dependency graphs for open source without

21:14.140 --> 21:16.940
trusting somebody, an SBOM that somebody else built.

21:16.940 --> 21:21.060
So we need better verification.

21:21.060 --> 21:26.740
So as coming from automotive industry, how we validate it, I take your SBOM, I do the

21:26.740 --> 21:32.380
language, I re-implement the mini project, take all of your dependencies, run it again.

21:32.380 --> 21:36.420
If I then get dependency conflicts, I know, boom, we have already a problem.

21:36.420 --> 21:41.380
Then I run it to, in our case, OSSRDUKIT, which Marcel spoke about, where the entire

21:41.380 --> 21:46.780
database was to basically download all of the source code of all of the code again to

21:46.780 --> 21:49.020
check all of the licenses.

21:49.020 --> 21:51.980
But my standard first check is to take your dependency list.

21:51.980 --> 21:56.740
I generate for that whatever ecosystem is, Maven, Java, and run it again.

21:56.740 --> 22:01.740
If that already gives me a conflict, then I know, why do we have a problem?

22:01.740 --> 22:04.340
And then I will go back to the supplier and say, like, we cannot compile this.

22:04.340 --> 22:06.380
How the hell did you compile these versions of the code?

22:06.380 --> 22:08.620
How did you compile these branches into a product?

22:08.620 --> 22:13.100
But again, validation is very difficult.

22:13.100 --> 22:16.100
So the other rule what you do is we do a risk-based approach.

22:16.100 --> 22:18.460
You cannot do this manual check for everything.

22:18.460 --> 22:23.940
So I run the SBOMs to some special rules that I wrote in ORT, where it's policy is code,

22:23.940 --> 22:26.660
and then I filter out.

22:26.660 --> 22:31.180
These are the products that in my context are high-risk products.

22:31.740 --> 22:35.580
You know, the motive it means updating a car.

22:35.580 --> 22:38.220
In case you don't know, over the air updates from cars doesn't work.

22:38.220 --> 22:42.100
If you need to fix some of the cars, you need to recall the car to the garage.

22:42.100 --> 22:46.340
That means millions of euros, dollars, and yen that need to be spent.

22:46.340 --> 22:48.580
Those get checked in depth.

22:48.580 --> 22:49.460
Anything else we do?

22:49.460 --> 22:56.380
So we have a risk-based approach to validating SBOMs because consuming SBOMs is still a

22:56.380 --> 22:59.820
sanely pain in the butt in the ass.

22:59.820 --> 23:03.700
And you should add, because train your developers.

23:03.700 --> 23:05.100
Train your developers.

23:05.100 --> 23:06.740
Train your developers in Mesh.

23:06.740 --> 23:08.980
No, because the emphasis is on the beach.

23:08.980 --> 23:12.300
You know, right here in the modern world, I think I'm talking about different tracks,

23:12.300 --> 23:13.460
different formats.

23:13.460 --> 23:18.020
Even if you're good at building the locker, you can actually do a good job and feel accessible

23:18.020 --> 23:19.180
about these three topics.

23:19.180 --> 23:22.100
Sometimes it's just hard to do that right.

23:22.100 --> 23:24.740
So maybe try to be the best, provide the best bonds.

23:24.740 --> 23:27.260
And you have trust in yourself that you don't have any social rights.

23:27.260 --> 23:31.980
And it's just a lack of your knowledge or communication that could be compromised.

23:31.980 --> 23:35.580
Yeah, to summarize, developers don't have the proper tools.

23:35.580 --> 23:38.780
So it should be better to just provide the...

23:38.780 --> 23:43.100
So what I'm hearing is that maybe the SBOM community needs to get together and piece

23:43.100 --> 23:45.220
together a verification story.

23:45.220 --> 23:48.500
Like I should need to go and reveal the software.

23:48.500 --> 23:53.300
I should just take that document through some mechanism and verify that it's actually

23:53.300 --> 23:54.300
true.

23:54.300 --> 23:55.300
Yeah.

23:55.300 --> 23:59.300
Maybe we have time for one more question.

23:59.300 --> 24:00.300
Any closing thoughts?

24:00.300 --> 24:01.300
Yeah.

24:01.300 --> 24:02.300
Yeah.

24:02.300 --> 24:06.780
I mean, just to summarize, after observing all these developments that are going on,

24:06.780 --> 24:11.660
all these discussions, I think from a healthcare perspective, we are going to take a very cautious

24:11.660 --> 24:13.380
step towards it.

24:13.380 --> 24:18.980
Because since we know this is quite a disruptive change, and also it is a mandatory change

24:18.980 --> 24:20.500
that we need to do.

24:20.500 --> 24:22.940
So our approach would be very cautious.

24:22.940 --> 24:28.940
But we want to be equally close to the community and very close to the developments that happen

24:28.940 --> 24:33.980
so that we would be able to adapt the changes in a fast-paced manner than when compared

24:33.980 --> 24:36.500
to three, four years back.

24:36.500 --> 24:37.500
Yeah.

24:37.500 --> 24:42.260
I mean, I think what I already said is like, yeah, set a high standard for generating SBOMs,

24:42.260 --> 24:48.060
do the build time, catalog your SBOMs, and then try to drive insights and relationships

24:48.060 --> 24:53.780
between where you're seeing commonalities between all your products.

24:53.780 --> 24:55.900
Thank you, everyone.

24:55.900 --> 24:56.900
Thank you.

24:56.900 --> 24:57.900
Thanks.

24:57.900 --> 24:58.900
Thanks.

24:58.900 --> 24:59.900
Thanks.

24:59.900 --> 25:00.900
Thanks.

