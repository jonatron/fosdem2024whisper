WEBVTT

00:00.000 --> 00:11.000
Welcome. Thanks for having me. My talk was actually about one o'clock this afternoon,

00:11.000 --> 00:21.080
but I'll jump in now. This is the right â€“ am I too loud? It's fine. Okay. Well, I am Nicholas

00:21.080 --> 00:29.520
from Germany living in Amsterdam. I'm co-founder of CITA, Energy Flexibility, and we co-founded

00:29.520 --> 00:36.400
the FlexMeasures project. I will briefly talk about the FlexMeasures project. Last time

00:36.400 --> 00:41.080
at Boston, we also had to talk about some specifics. I like to introduce a project with

00:41.080 --> 00:48.640
some specific applications. So last year, we talked about our Vehicle to Grid implementation,

00:48.640 --> 00:54.480
where we use flex measures and home assistant. And today also, I'll go more on the developer

00:54.480 --> 01:01.680
perspective as a developer, you would actually work with flex measures. I only have 15 minutes,

01:01.680 --> 01:08.920
so I will fly over it a bit. Don't worry. I mean, let's not read every line of code.

01:08.920 --> 01:15.040
It's just to give you an impression. How would it be like? With flex measures as an introduction,

01:15.040 --> 01:19.120
we have been focusing on behind-the-meter optimization. So that's these other things

01:19.200 --> 01:25.040
you find behind-the-meter. So there's enough complexity to run an optimization and find

01:25.040 --> 01:30.240
the best running times for the things that are flexible here, which are usually EV charging,

01:30.240 --> 01:40.080
batteries. And today, we talk about hot water storage. These things are not exactly behind-the-meter,

01:40.080 --> 01:45.680
but they matter as well. In Netherlands, we have congestion on the grid that influences the

01:45.680 --> 01:52.000
optimization of what you're doing. It's a constraint and dynamic energy prices. So then,

01:52.000 --> 02:02.080
it becomes quite interesting as a problem. Right. So very briefly, flex measures is a platform

02:02.080 --> 02:08.400
that takes in a lot of data, like meter data or prices, all these things. And it gives you the best

02:08.400 --> 02:15.200
timing for your flexible assets as a very simplified picture of what it is. We have used it in a

02:15.200 --> 02:23.520
couple of areas, like I mentioned, bi-directional charging, in industry, in water sanitation,

02:23.520 --> 02:30.240
and now we're working on smart heating as well. Here's a little look on our dynamic visualization

02:30.240 --> 02:35.360
of what flex measures knows at any given time. So this is from the VEP UI of flex measures. You

02:35.360 --> 02:45.680
can replay what happened, what data flex measures knew, and what forecast it knew. But I want to

02:45.680 --> 02:53.680
spend 10 minutes, have this very brief tour. What if you were an energy startup? Let's say you work

02:53.680 --> 03:02.320
with smart heating, and you want to have the smart scheduling for your e-boiler, as an example.

03:03.200 --> 03:10.480
So these are things you would like to do. I will go through each of those. And I'll touch upon a

03:10.480 --> 03:15.040
couple of ways to interact with flex measures. You're writing your own flex measures, plug-in.

03:15.040 --> 03:20.800
There's a Python client, there's a command line interface, of course, there's an API. And I'll

03:20.800 --> 03:27.680
just, while I go through this list, everything will be touched for illustration, what are the

03:28.160 --> 03:35.360
things you can do. The brief picture would be that there's a house where there's the e-boiler,

03:35.360 --> 03:41.280
so your energy asset, with temperature readings. There's a flex measure server over here in the

03:41.280 --> 03:48.800
cloud. And all of these things are going to happen. So there's a little bit of an architecture diagram,

03:48.800 --> 03:54.400
but what we'll try to touch here. So the flex measures client will send temperature,

03:55.360 --> 04:05.360
it will ask the server to compute a schedule for the boiler. There's a data platform where we can

04:05.360 --> 04:12.000
get the prices. We'll have a cron tab because we will have to do some stuff just regularly.

04:14.720 --> 04:20.800
And let's keep that in mind. So this is the very first step. You don't have to read everything,

04:20.800 --> 04:26.640
but I'm just showing that we provide a cookie cutter template so you can quickly get up to

04:26.640 --> 04:32.560
speed, have your own code structure. So you choose a name and a description and you say,

04:32.560 --> 04:39.120
yeah, please give me the API blueprint. Blueprint is a word from the Flask system because flex

04:39.120 --> 04:44.320
measures is a Flask application. And you get some kind of boilerplate like this.

04:45.280 --> 04:51.040
And that's a boiler. This is the one endpoint we're doing here. What if we want to create a new

04:51.040 --> 04:58.400
customer for this project? This is a lot of code. This is basically the endpoint we wrote as an

04:58.400 --> 05:05.120
example. I'm not going to read everything. Basically, this is how you plug it in. It's going to be

05:05.120 --> 05:10.160
plugged in flex measures and available as an endpoint. We're creating a user and an account.

05:10.880 --> 05:14.960
And maybe this is the most interesting. So this is basically your business objects.

05:14.960 --> 05:23.040
I will go a little deeper here. This is the same code roughly. So we're creating the boiler as an

05:23.040 --> 05:29.440
asset. We're creating a couple of sensors. Here's two examples a bit bigger where we really define,

05:29.440 --> 05:34.640
we tell flex measures how to handle this. What kind of units are we handling and the event resolution

05:35.440 --> 05:43.680
and so that flex measures know what to do with them when data arrives. Schedules have to be made.

05:45.120 --> 05:51.840
And then if that happened, if somebody called this endpoint and your account was made and you

05:52.720 --> 05:54.880
would end up in the flex measures UI, you can see them here.

05:57.280 --> 06:01.200
Next step, let's say we measure the temperature locally. You have your own sensor

06:02.160 --> 06:04.960
and you want the temperature data to end up in flex measures as well.

06:05.920 --> 06:11.840
Then here's a small example how to use the flex measures client. Basically, it provides you with

06:11.840 --> 06:19.040
some nice code to work with more easily, but it actually uses the flex measures API in the background.

06:20.400 --> 06:27.920
For fun, we actually had the temperature reading in Fahrenheit, which we say when we send it to

06:28.560 --> 06:34.000
flex measures, the data is actually to be stored in Celsius and will automatically get it right.

06:34.000 --> 06:36.640
So this is where a lot of work goes, as you can imagine.

06:39.280 --> 06:42.800
But otherwise, this is just sending this reading. There's not much more.

06:45.120 --> 06:49.680
You'll do this regularly from your local script that runs on your Raspberry Pi,

06:49.680 --> 06:57.200
whatever you're doing there locally. One more step. So there's some external information we need.

06:57.200 --> 07:03.040
Temperature is a local reading from your local asset. Prices are a good example of information

07:03.040 --> 07:06.720
from some other third parties that just has to also be collected in flex measures.

07:08.160 --> 07:14.480
One other example is weather forecasts. In this example, I'm showing that we actually wrote

07:15.120 --> 07:22.080
a plugin for that. So we're cloning this plugin we wrote.

07:22.480 --> 07:29.920
NSEU is the organization of European transmission system operators, and they provide a data platform

07:29.920 --> 07:36.960
so you can get various things like prices, but also just a head allocations for all the transmission zones.

07:38.640 --> 07:43.680
And so we say we want the Dutch transmission zone. Please give me the prices for that.

07:44.960 --> 07:48.080
I'll talk and we configure everything. And actually then this is the command.

07:48.240 --> 07:56.160
So through flex measures CLI, this plugin has registered a group of commands,

07:57.280 --> 08:03.280
for instance, to import a head prices. Also, all of this is public how we wrote the plugin.

08:05.280 --> 08:12.000
So if you call this regularly, let's say one time per day, you'll have the next day head prices

08:12.000 --> 08:20.880
always in your system. Small visualization of one day of prices in the flex measures CLI.

08:22.480 --> 08:28.160
Excuse me. Okay, now I'm not sure how much time do I have.

08:30.720 --> 08:35.680
Eight minutes. All right, that's not too bad. But the main part now is you want to actually

08:36.560 --> 08:40.320
tell flex measures to give you an optimized schedule for your boiler.

08:42.720 --> 08:48.080
And here I'll show, I could do that via the flex measures client as well, but I'll just show

08:48.080 --> 08:54.640
how to use the API directly. This is not so interesting, of course, you have to have an

08:54.640 --> 09:04.000
authentication token. But I have to spend a bit more time here. A lot of time we spend when we

09:04.000 --> 09:11.520
made flex measures is how you configure the problem. How do you tell flex measures

09:12.640 --> 09:17.200
the constraints of the problem in the back flex measures will actually take your information

09:17.200 --> 09:22.160
about your setup and your problem. Basically, you could call that business rules,

09:23.520 --> 09:29.600
and really translate that dynamically into a linear program. So flex measures contains,

09:30.560 --> 09:38.240
I think three different algorithms, basically, we have one that's focusing on storage based

09:38.240 --> 09:46.160
problems. And that's what we also use for heat, heat batteries, we call them. We have one for,

09:46.160 --> 09:52.000
if you just want to allocate processes. But it's a very important part for developing a new

09:52.000 --> 09:58.080
application that you can tell the flex measures server, this is how I want you to treat this

09:58.080 --> 10:02.480
problem. Here's the constraint you don't know about, or here's a local thing you don't know about.

10:03.280 --> 10:10.160
And that's where we're working on two things, the flex model and flex context. So flex context

10:10.160 --> 10:16.720
would be, well, these are the prices that are relevant. We also have a project where we don't

10:16.720 --> 10:22.160
use prices, but we use the CO2 signal, the CO2 content of the grid that is anticipated.

10:23.120 --> 10:27.520
But the flex model is a bit more detailed. So this is not all the things you can do.

10:28.640 --> 10:34.960
But basically, wishing, well, the state of charge of this heat battery is this many kilowatt

10:34.960 --> 10:41.760
hours. So that's local knowledge you have. Here's some constraints. I can't go under this.

10:42.400 --> 10:48.080
We don't want to go under this. And also, here's a target for you. In the morning,

10:48.880 --> 10:55.280
I need to have this much energy content in my battery. I think this could also be a percentage.

10:56.640 --> 11:02.480
We're pretty flexible there. Some other constraints. You can see how these translate

11:02.480 --> 11:10.960
actually into constraints of a problem. And then you call our API to say, well, for this,

11:11.760 --> 11:17.760
the fill rate that I want a schedule for that, please start. And that will actually trigger

11:18.480 --> 11:26.400
a scheduling job. And then flex motors will usually pass this on to a worker. So we, in our

11:26.400 --> 11:31.840
implementations, we have a web worker and computation workers that will handle those. And then you

11:31.840 --> 11:37.040
can call this, get endpoint to check if your computation is ready. It will usually not be

11:37.040 --> 11:43.920
ready after three seconds, but soon after. And then, yeah, you get your values here.

11:45.520 --> 11:50.640
So then you can implement these settings locally. You can, let's say you ask for a schedule for

11:50.640 --> 11:56.240
12 hours, then your local gateway has the plan for 12 hours. If there's anything that changes

11:58.240 --> 12:04.320
on the ground, you just ask for a new one. You'll update as we go. So that's general behavior.

12:05.040 --> 12:13.760
I'm almost done with, with a, you know, two of the force here. One thing we want to maybe do is

12:13.760 --> 12:21.280
in flex measures have a nice dashboard that has the most crucial data on top of each other for

12:21.280 --> 12:28.720
some inspection. And then, well, you can actually put that on the boiler asset. And then you,

12:29.360 --> 12:33.520
in flex measures, you have these nicely stacked, right? You want to see what you've been using

12:33.520 --> 12:38.640
for optimization on top. Although this comes from a different asset. This is something for everybody.

12:39.680 --> 12:45.440
All the assets can use this. And we use, as you remember, we had like four sensors or so that

12:45.440 --> 12:50.640
are relevant, but we just decided these two other ones we want to see. So we can easily see that

12:53.840 --> 13:00.720
in a period of low prices, flex measures has tried to, you know, fill the, fill the boiler at those

13:00.720 --> 13:12.320
times. Some signal here. I'll skip over this a bit because, yeah, I originally had a 25 minutes idea

13:12.320 --> 13:20.560
about this. Just as very quickly, we also noticed it's very important to also do some reporting.

13:21.600 --> 13:25.120
In flex measures, give some logic about that, that you combine some sensor data so you get

13:26.080 --> 13:30.640
the outputs of what happened, for instance, like costs. You know, that's very important. Sorry.

13:32.000 --> 13:37.440
And that can become a C like a minus well that you regularly say, okay, now the day has happened,

13:37.440 --> 13:44.160
we optimize as we could. Let's calculate how much energy costs we had here. So combine just the

13:44.160 --> 13:50.720
prices and the fill rate, which happened. But we also saw already that's that's many more interesting

13:51.600 --> 13:58.480
computations that people want. So this is a very simple multiplication. But we've made a pretty

13:58.480 --> 14:04.640
complicated architecture so you can actually have a lot of bring a couple sensors together

14:05.440 --> 14:10.480
for a new result that even can be used further in your next optimization or so. It's a very

14:10.480 --> 14:19.200
flexible system we've built here. And this is the project website. From there, you'll find the

14:19.200 --> 14:26.880
the GitHub, you find the read the docs, you'll find more information like I was interviewed for

14:26.880 --> 14:32.000
Python podcast where maybe I go into more detail. The mailing list contact, everything's there.

14:33.920 --> 14:38.800
You can also just write me directly, of course, if you're interested in doing something yourself

14:38.800 --> 14:45.440
and joining our TSC, the technical steering committee, everybody's welcome. And that's it.

14:45.440 --> 14:49.760
Yeah, there's lots of things to do, of course, I've touched upon a couple things,

14:49.760 --> 14:56.320
applications like vehicle to grid or smart heating and industry. But the roadway is still,

14:56.320 --> 15:01.120
of course, filled. There's so so much things in the energy behind the meter and a bit above to

15:01.760 --> 15:09.680
optimize. Thanks. We have time for question, then.

15:10.080 --> 15:14.000
If someone wants to ask one question,

15:18.640 --> 15:24.240
you said that you create a linear program. And what solver do you use to solve this program?

15:27.680 --> 15:31.760
What kind of solver? Yeah, we have we work with two solvers now.

15:33.840 --> 15:37.920
You could, of course, also use Cplex, but we've used two open source ones.

15:40.080 --> 15:45.040
All right, now they don't come to my head. Sorry.

15:47.680 --> 15:52.160
Hi. Yeah, we switched to that one. And we had a different one before that are both possible.

15:52.160 --> 15:56.880
So you can just those are shipped with a Docker image even so you can just configure that which

15:56.880 --> 16:03.040
one you want to use. But you can also we use pyomo as a representation for the problem. So

16:03.120 --> 16:06.880
everything that works with pyomo, which is you can use that as well.

16:09.280 --> 16:13.200
Thank you so much.

