WEBVTT

00:00.000 --> 00:08.220
Okay, so hello everyone.

00:08.220 --> 00:13.140
So I'm, I joined CripLad last year and I'm here to present you

00:13.140 --> 00:16.260
like the product and the future directions.

00:16.260 --> 00:20.560
Yeah, so yeah, so it's called

00:20.560 --> 00:23.940
Securely Collaborate with CripLad and so,

00:23.940 --> 00:26.940
CripLad has already been presented last year,

00:26.940 --> 00:29.780
but I will start again like showing you what it's all

00:29.780 --> 00:31.340
about.

00:31.340 --> 00:32.640
Yes, no?

00:32.640 --> 00:33.540
No?

00:33.540 --> 00:35.700
Okay, thank you.

00:35.700 --> 00:39.500
Okay, so CripLad what it is, it's end to end encrypted like

00:39.500 --> 00:45.620
a collaborative, collaborative office suite.

00:45.620 --> 00:49.020
So you have a lot of different applications inside CripLad.

00:49.020 --> 00:52.740
So it all started as a project, I mean, as a name.

00:52.740 --> 00:56.460
The name is a bit confusing because you may think it's only for pads.

00:56.460 --> 00:58.740
And actually it started like this, so we're only pads.

00:58.740 --> 01:02.780
But then if you think about it, like all files are just like text files.

01:02.780 --> 01:06.420
And that's how we managed to be able to produce a lot of different

01:06.420 --> 01:07.340
applications from that.

01:07.340 --> 01:10.580
So some of them are like homemade, like the Kanban one and

01:10.580 --> 01:15.580
the Form one are really, have been made with our own little hands.

01:15.580 --> 01:19.420
While some other like which text, Whiteboard is for instance raw.io.

01:19.420 --> 01:24.380
Like those three presentations, spreadsheet and document are on the office.

01:24.380 --> 01:29.380
So we either like build a full application or

01:29.380 --> 01:35.460
just try to use other applications and plug it onto the CripLad layer,

01:35.460 --> 01:39.820
which is basically the encrypted encryption part.

01:39.820 --> 01:44.420
And the goal of all of this is to have both collaboration and privacy.

01:44.420 --> 01:47.980
Because when you think about it, when you are collaborating,

01:47.980 --> 01:49.500
you want to share some data.

01:49.500 --> 01:51.420
But then you don't want to share it with everyone.

01:51.420 --> 01:53.380
You want to share it with your collaborators first.

01:53.380 --> 01:57.740
And then maybe once you have a full document, you want to share it to others.

01:57.740 --> 02:02.540
And moreover, you may not want to have like the service provider.

02:02.540 --> 02:03.940
So in our case, it will be CripLad.

02:03.940 --> 02:08.100
But if you are using like some proprietary stuff,

02:08.100 --> 02:11.820
you don't want it to know what you are working on sometimes.

02:11.820 --> 02:14.420
Even if sometimes when you are a company,

02:14.420 --> 02:18.860
you are working with Google for business and then you just give them all your data.

02:18.860 --> 02:22.780
But anyway, here what we are advocating is that, yeah,

02:22.780 --> 02:29.660
we can have both collaboration and also privacy for our end users, which may be you.

02:29.660 --> 02:34.980
Anyway, I should have closed the fender bird.

02:34.980 --> 02:41.580
Take, take, take, take, take, good.

02:41.580 --> 02:45.620
And so one example of that is Disha Ravi,

02:45.620 --> 02:48.580
who is an Indian activist for climate,

02:49.580 --> 02:54.620
which has, I mean, which has been arrested in India near Bangalore

02:54.620 --> 02:58.900
because she was working on the farmer tool kit.

02:58.900 --> 03:03.100
So as you may know, like for instance right now in France, there is like some farmer protests.

03:03.100 --> 03:08.300
But in India, it was more, I mean, there was one as well in 2020, 2021.

03:08.300 --> 03:15.940
And actually, the thing on which Disha Ravi was arrested on

03:16.300 --> 03:19.180
was for helping rating the farmer tool kit,

03:19.180 --> 03:25.660
which is a document helping the farmers to cooperate and get together.

03:25.660 --> 03:31.740
Because India is a very multicultural subcontinent, so it was a big help for them.

03:31.740 --> 03:34.740
And actually, the document was published on Crip Pad in the end.

03:34.740 --> 03:44.100
And, but yeah, but at first it was made on Google Docs and Google helped India police.

03:44.100 --> 03:49.180
I mean, it can be understandable in some sense because it is a big market to become.

03:49.180 --> 03:53.980
But yeah, I'm not sure to judge, but at least we cannot sell your data to anyone.

03:55.500 --> 03:56.940
And how does it work?

03:56.940 --> 03:58.860
So now let's get into it.

03:58.860 --> 04:05.860
So basically, we have a model where we have a central server,

04:05.860 --> 04:08.940
which will deliver the files, but the files are all stored.

04:08.940 --> 04:13.100
So this picture is actually not really accurate because here what you see

04:13.100 --> 04:16.860
is that you have the first Pingu, which is writing hello,

04:16.860 --> 04:21.260
sending it to the server in an encrypted form, which is then broadcasted as well

04:21.260 --> 04:23.860
in this encrypted form.

04:23.860 --> 04:27.500
And then as it's a symmetric encryption and everyone has the key, they can all decrypt.

04:28.620 --> 04:30.860
Actually, it's not exactly like this that it works.

04:30.860 --> 04:36.460
It will be like saying, oh, I wrote an H and then it will send, I wrote an H.

04:36.460 --> 04:38.780
Then you said I had an E and so on.

04:38.780 --> 04:46.100
But it will just be like difference between, it will be decent patches.

04:46.100 --> 04:47.780
But here we just simplify things.

04:47.780 --> 04:53.100
And so we decided to keep this centralized part because in the end,

04:53.100 --> 04:56.500
we could have imagined something like peer to peer, but then it will be hard

04:56.500 --> 05:00.820
to synchronize, we'll have issues like if a message arrives before another.

05:00.820 --> 05:04.580
We'll have another issues, but as we already have a server that delivers the file,

05:04.580 --> 05:09.100
we can also use it to coordinate communications.

05:10.860 --> 05:15.300
And that's how we managed to achieve our goal of having end-to-end encrypted

05:15.300 --> 05:16.060
collaborative edition.

05:18.060 --> 05:19.300
Sorry.

05:19.300 --> 05:22.700
And right now, so that was presentation about CripPad.

05:22.700 --> 05:28.860
And about this, we recently, we are mostly done on it,

05:28.860 --> 05:32.540
but we had an NLNet project, which is called GroupRinse,

05:32.540 --> 05:37.100
where the goal was to analyze the security of CripPad and try to find

05:37.100 --> 05:39.900
new directions prepared for the future here.

05:39.900 --> 05:41.180
I wrote it here.

05:43.860 --> 05:51.540
And so we had many different improvements that have been shown by this analysis.

05:51.540 --> 05:55.340
So there are many things actually in CripPad because it's basically something

05:55.340 --> 06:00.300
that may be called cryptography driven, where basically,

06:01.260 --> 06:05.380
our design really relies on cryptography.

06:05.380 --> 06:10.220
For instance, when you log in, it is used,

06:10.220 --> 06:16.460
I mean your password plus login is used to derive your different keys,

06:16.460 --> 06:21.700
like signing keys, asymmetric encryption and everything.

06:21.700 --> 06:25.100
And so everything is based around this.

06:25.100 --> 06:27.620
And for instance, we don't store, for instance,

06:27.620 --> 06:31.660
a hash of your password and then try to match it.

06:31.660 --> 06:34.980
So for instance, it makes password recovery like a big hassle.

06:34.980 --> 06:37.260
We cannot do it, we just can do it.

06:37.260 --> 06:40.260
When you subscribe on CripPad, there is a big warning saying,

06:40.260 --> 06:43.300
don't forget your password, but of course people forget it.

06:45.860 --> 06:50.700
As well, as we are also mostly working with the document keys

06:50.700 --> 06:55.620
that we are sharing with people, we don't have any ratcheting or any key rotation.

06:55.620 --> 07:00.620
And then for instance, revocation, also no foreign secrecy, but I won't talk about it.

07:00.620 --> 07:03.620
So for revocation, it's also hard to get.

07:03.620 --> 07:09.380
And also another hot topic, like right now in the cryptographic community,

07:09.380 --> 07:10.540
it's post quantum crypto.

07:10.540 --> 07:16.820
So there have been like the NISDs and NIST, which started post quantum

07:16.820 --> 07:23.820
candidates evaluation like in 2015 and last 2022,

07:23.900 --> 07:26.060
almost last year because we are sort of a new year.

07:26.060 --> 07:31.580
Like in 2022, there have been the first selected new standards.

07:31.580 --> 07:34.980
So it was Falcon, Deletion, Kiber and another one.

07:37.380 --> 07:42.220
Anyway, so the thing that right now as well, like as I said earlier,

07:42.220 --> 07:47.100
CripPad started just as a small project in the company and then it's expanded.

07:47.100 --> 07:53.300
But the core is still there and the core is not really easy to work around.

07:53.300 --> 07:57.820
But there are also a lot of like refactor to do about the cryptographic layer

07:57.820 --> 08:00.140
in order to move toward the cryptographic agility.

08:01.700 --> 08:06.460
And actually, I mean, between all these different improvements,

08:06.460 --> 08:10.020
I will talk about the password recovery, recovery,

08:10.020 --> 08:12.060
because it's something that users may want.

08:13.300 --> 08:15.020
And so let's talk about it.

08:15.020 --> 08:18.860
So I said it's like something cryptographic driven.

08:19.860 --> 08:24.580
And I said that user are identified with their signature public key.

08:25.580 --> 08:28.540
And the thing that this relation is only one way.

08:28.540 --> 08:32.740
If you know your password and login, then you can get this public key.

08:32.740 --> 08:37.500
But I mean, maybe you cannot like relate it any other way around.

08:39.860 --> 08:44.780
And the thing that we have something which have become like a hassle to solve

08:44.780 --> 08:47.860
because of cryptography, so one solution is just like, hey,

08:47.860 --> 08:49.300
let's add more cryptography.

08:49.300 --> 08:52.260
So we'll add something which is called linear secret sharing or

08:52.260 --> 08:57.940
sometimes Shamir's linear secret sharing, which is the idea that you want to be

08:57.940 --> 09:00.780
able to share a secret between multiple parties.

09:02.260 --> 09:08.020
And then if a subset of them like above a certain threshold,

09:08.020 --> 09:10.900
but it can be more complex data structure.

09:10.900 --> 09:13.020
But anyway, let's keep it simple.

09:13.020 --> 09:16.300
So if you have more than a certain threshold, like if you have like, for

09:16.300 --> 09:18.700
instance, you split your key into five and you want at least three people to

09:18.700 --> 09:22.500
collaborate, like for instance, the majority to be able to reconstruct it.

09:22.500 --> 09:25.700
Then you can get the key back at the end.

09:25.700 --> 09:29.460
So what we'll use is like social linear secret sharing,

09:29.460 --> 09:33.660
something akin to the ring of trust where you will share your keys between

09:33.660 --> 09:35.180
different participants.

09:35.180 --> 09:38.820
And then you have to trust them, of course, because if two of them colludes,

09:38.820 --> 09:41.540
then they know your password.

09:41.540 --> 09:45.940
And here we can see a weird reference, which is Reed Solomon's code,

09:45.940 --> 09:48.380
because it's basically the same ideas of splitting things.

09:49.900 --> 09:56.100
So yeah, for instance, for me, I came from the cryptographic community.

09:56.100 --> 10:00.060
And we like code people because they are always telling us,

10:00.060 --> 10:02.780
all that code people invented everything before you.

10:02.780 --> 10:08.660
And I mean, at least this time it was true, not always, but sometimes.

10:08.660 --> 10:10.780
And what is social secret sharing?

10:10.780 --> 10:13.140
So as I said, you have a secret, like for instance,

10:13.140 --> 10:15.260
here it will be your password.

10:15.260 --> 10:19.420
And your password, even like directly like some keys to a file which contains

10:19.420 --> 10:23.700
part of the thing in order to be able to have some kind of revocation.

10:24.820 --> 10:27.340
So you have your secret and you share it between your friends.

10:29.100 --> 10:31.900
And then they all keep a shard, a part of it.

10:31.900 --> 10:33.420
Individually they cannot do anything with it.

10:35.260 --> 10:39.100
But then if you ask like for instance here, I will take the majority vote.

10:39.100 --> 10:44.060
So if you ask two of them, then you can get your secret back.

10:44.060 --> 10:47.100
I mean, hopefully they won't keep it to them.

10:47.100 --> 10:50.620
And then once you have your secret back, then maybe you can change your password

10:50.620 --> 10:54.420
with other convoluted way, but ideally.

10:54.420 --> 10:59.660
So then in some sense, you cannot lose your password because it's always

10:59.660 --> 11:00.180
somewhere there.

11:01.340 --> 11:05.620
Obviously it's not very sound because if for instance,

11:05.620 --> 11:09.900
some people are not connected because the thing that you also have to think about

11:09.900 --> 11:12.340
UI and UX, so how will it work?

11:12.340 --> 11:15.380
So if they have to click on a button, they have to be connected for that.

11:15.380 --> 11:19.580
You have to contact them, but I mean, it's still way better than losing your password

11:19.580 --> 11:20.100
in the end.

11:21.540 --> 11:26.860
And this raises like a lot of different questions.

11:26.860 --> 11:33.740
Like for instance, I mean, as I said, how will we make it understandable for

11:33.740 --> 11:37.300
the user because we don't want them to have like really just like a jizz and

11:37.300 --> 11:40.420
take that they have to send you back.

11:40.420 --> 11:43.540
You want it to be stored properly, so maybe directly on crit pad.

11:43.540 --> 11:47.340
But then there is a risk explanation because you have to tell them like what is

11:47.340 --> 11:49.540
sensitive, what is not, what you can do, what you can't.

11:50.820 --> 11:53.300
It's an unusual system for users.

11:53.300 --> 11:55.180
I mean, maybe for good reason.

11:55.180 --> 11:59.940
But anyway, I don't know a lot of systems where you have these kind of things

11:59.940 --> 12:01.140
implemented.

12:01.140 --> 12:06.140
And I think it's something like, okay, so something I didn't say about

12:06.140 --> 12:12.060
crit pad, that one of the aim is also like user friendliness.

12:12.060 --> 12:15.780
We don't want for instance something like PGP, which PGP is a very nice tool, but

12:17.020 --> 12:20.620
it's hard to get around it when you are starting and you just want to do something

12:20.620 --> 12:21.060
simple.

12:21.060 --> 12:24.300
You have to read the documentation, see exactly what you want to do.

12:24.300 --> 12:29.500
Even the OpenSSH client is like really powerful tool, but not very user friendly.

12:29.500 --> 12:33.820
But for us, we want something that, well, a lot of our users just want to use

12:33.820 --> 12:38.580
crit pad because it's open source and it's an office shoot, not because it's end

12:38.580 --> 12:39.420
to end encrypted.

12:39.420 --> 12:46.540
So we also want to keep this user base and we think it's important to make

12:46.540 --> 12:50.220
cryptography available for everyone.

12:50.220 --> 12:55.300
And then also like it just, in the end, just some displacement of the issue because

12:55.300 --> 13:01.380
like before, we were like, oh, but we can just lose everything.

13:01.380 --> 13:05.780
So now we may not lose everything, but then some other people, like if the trust is,

13:05.780 --> 13:12.260
if your friends are not very trustworthy, then they can call you and

13:12.260 --> 13:14.020
compute back your secret.

13:15.940 --> 13:20.980
I said, if they are not available, then you can do much and that.

13:22.780 --> 13:23.980
No?

13:24.460 --> 13:30.540
So to conclude, so I'll come back on everything I said beforehand.

13:30.540 --> 13:35.460
So crit pad is an end to end encrypted collaborative office shoot.

13:35.460 --> 13:37.460
And everything in this sentence is important.

13:37.460 --> 13:38.300
It's collaborative.

13:38.300 --> 13:42.860
You have all the, most of the tools you want.

13:42.860 --> 13:45.620
And it's also secure as in it's end to end encrypted.

13:46.780 --> 13:52.980
As I said in the previous talk, we also have like other issues like we cannot,

13:52.980 --> 13:56.580
I mean, as of now, we don't guarantee that the code you are executing,

13:56.580 --> 14:00.940
the JavaScript running on your browser, that it's indeed the real one.

14:00.940 --> 14:06.020
So there are also some other parts where we still can do better.

14:06.020 --> 14:07.540
We still can improve.

14:07.540 --> 14:10.460
But this is also one very sensitive thing.

14:10.460 --> 14:14.100
It's end to end encrypted, but I mean, there are also like some cryptographic

14:14.100 --> 14:14.820
solution for that.

14:16.500 --> 14:19.020
But yeah, it can be quite expensive.

14:19.020 --> 14:24.220
But we are also thinking about how to go toward this direction.

14:26.140 --> 14:31.060
I forgot to tell you about this, but I mean, as a full office shoot,

14:31.060 --> 14:33.660
you also have other collaborative office shoot,

14:33.660 --> 14:37.660
you have other collaboration tools that are available like calendars.

14:38.740 --> 14:43.980
Unfortunately, we can't synchronize them directly using CalDAV because it's

14:43.980 --> 14:47.140
encrypted on the server side, so it cannot serve it directly.

14:47.140 --> 14:49.580
And we don't want to send the servers the key.

14:50.860 --> 14:56.620
We also have like some teams, I mean, a way to share your document and

14:56.620 --> 14:59.340
calendars in between a team.

14:59.340 --> 15:03.220
Like for instance, right now in CripPad, we are working,

15:03.220 --> 15:06.580
like in XWiki in general, we are working using CripPad.

15:06.580 --> 15:09.100
And we have different teams like one for the support teams,

15:09.100 --> 15:12.980
one for the CripPad teams, like to organize things and stuff where we can

15:12.980 --> 15:17.780
find every document that we need, like the other size for instance.

15:19.780 --> 15:26.660
And also one of the very important points that it aims at being user friendly.

15:27.740 --> 15:31.700
And so for the future, we want to go toward quantum,

15:31.700 --> 15:35.580
crypto agility, like making the code more modular and

15:35.580 --> 15:38.700
that we can switch algorithms more easily to move toward

15:38.700 --> 15:43.620
post-quantum secure collaboration, which will be a way stronger security

15:43.620 --> 15:46.220
guarantee than what we have nowadays.

15:46.220 --> 15:52.100
Even if like right now if you, I mean, basically like as all the symmetric

15:52.100 --> 15:56.940
part is still like more sturdy than the asymmetric part, what is stored in the

15:56.940 --> 16:01.660
server, I mean the data are kind of okay even if, let us imagine that there is

16:01.660 --> 16:03.380
like quantum adversary right now.

16:04.500 --> 16:07.540
It will be more like someone can impersonate you,

16:07.540 --> 16:13.060
which is still a big issue, but it's, I mean, if you just get the data on the

16:13.060 --> 16:15.140
server, you cannot do much more from that.

16:15.140 --> 16:18.420
You need extra information, even if you have a quantum computer.

16:19.820 --> 16:23.860
There is also this revocation which I didn't talk about at all, but

16:25.220 --> 16:28.500
it's also an interesting issue to handle because it will,

16:28.500 --> 16:34.460
may help us to move toward forward secrecy, which is nice to get because it will

16:34.460 --> 16:36.460
mean that if you get a document at some point of time,

16:36.460 --> 16:39.820
you don't know what happened before and you can be revoked and then you won't

16:39.820 --> 16:41.780
know what will happen in the future on this document.

16:44.260 --> 16:50.380
We also can imagine other ways to resolve, I mean, so right now I was mostly

16:50.380 --> 16:54.660
talking about like we have a central server and stuff, but we can also use

16:55.820 --> 17:01.500
conflict-free applicative data type, like CRDTs, to like try to solve conflicts

17:01.500 --> 17:05.100
and stuff because right now it's really something very, very naive, which works

17:05.220 --> 17:09.500
in the end because in text, you don't have that many weird conflicts that

17:09.500 --> 17:12.740
happens and yeah, as I said, perfect execution.

17:13.740 --> 17:18.140
So now, as a last word, I will just present that, I mean, it's just the

17:18.140 --> 17:22.820
Crippett team and so thank you for your attention and if you have any questions,

17:22.820 --> 17:23.500
I'll be glad to answer.

17:36.100 --> 17:43.100
I have two questions. The first one, I visit Crippett only for document writing,

17:45.820 --> 17:51.820
something like Google Docs that have only a little problem for me. It's not

17:51.820 --> 17:58.820
have a full screen document, it was information about Crippett, where

17:58.940 --> 18:05.940
there's information about Crippett around the document, not like Google Docs,

18:05.940 --> 18:12.940
by instance. So I was at the beginning of this kind of thing, but maybe it can

18:12.940 --> 18:19.940
be resolved with a full screen text, something like that. So when I go to

18:19.940 --> 18:24.940
Crippett, the first, the first time. So the second one is interfacing with

18:25.060 --> 18:32.060
different type of document, worksheets, database, also text with table and so on

18:33.060 --> 18:38.060
because Google Docs and Google Sheets, there's not good, a good interfacing

18:38.060 --> 18:43.060
between both and I will be happy if it's good in Crippett.

18:45.060 --> 18:50.060
So let me be referred to be sure. So you said that the interfacing between

18:50.060 --> 18:53.060
spreadsheet and documents are not that good, right?

18:53.180 --> 18:54.180
Yes.

18:54.180 --> 19:00.180
Yeah, I mean like so far with both, I mean we are right now depending on

19:00.180 --> 19:05.180
the office, which we are also like, which we interfaced with the Crippett

19:05.180 --> 19:12.180
service, but it will be kind of hard to get, we can try to, I mean we are always

19:12.680 --> 19:19.680
trying to improve things, but I mean I know that we have work done here which is

19:19.800 --> 19:26.800
working mostly on this part, but yeah, I don't, yeah, maybe it will improve, but

19:28.800 --> 19:31.800
I mean we'll keep it in mind and...

19:31.800 --> 19:35.800
It's a good use of the tool to use, the interface.

19:35.800 --> 19:42.800
Yeah, I mean we are working a lot with user interface. Actually the project lead is a designer,

19:43.800 --> 19:50.800
so it's really giving us feedbacks about how to make things fitting nice.

19:51.800 --> 19:54.800
And yeah, any other questions?

19:54.800 --> 19:59.800
Hi, we'll discuss about it.

19:59.800 --> 20:06.800
Thank you for your talk. I've been helping package Crippett for NixOS, Nix packages,

20:07.800 --> 20:14.800
and one thing that came to my attention was that the whole thing is like 800 megabytes,

20:15.800 --> 20:19.800
and I was like, whoa, what's going on? And then I noticed that it's the integration

20:19.800 --> 20:25.800
with only office, that it's a lot of space. I just wanted to know if, I mean are you keeping

20:25.800 --> 20:31.800
that in mind in the future? Will you keep it? Because it's quite big for, like if you

20:31.800 --> 20:35.800
compare it to a WordPress release for example, the size is huge.

20:35.800 --> 20:40.800
The thing that we have, I mean we don't have the original version of only office because

20:40.800 --> 20:45.800
the thing that we only keep is the only office client and the server part, we are emulating

20:45.800 --> 20:52.800
it with Crippett basically. So we need to have this hacked only office in our repositories,

20:52.800 --> 20:57.800
and every time we have, we need to make an update, it's a mess.

20:57.800 --> 21:04.800
We are aware of this issue, we are trying to find a solution, but we are also other issues too.

21:05.800 --> 21:08.800
And then, that's it. Thanks for your feedback.

21:12.800 --> 21:17.800
Hi, a question. So what are exactly the technical limitations at this point? Because you showed

21:17.800 --> 21:22.800
the secret sharing. I imagine I'm not a cryptographer, so based on the theory, the more people who are

21:22.800 --> 21:26.800
collaborating at that point, the more harder it would be to manage. So what are the other technical

21:26.800 --> 21:29.800
limitations perhaps that you see at this point from that?

21:29.800 --> 21:31.800
So technical limitations for what?

21:32.800 --> 21:37.800
You showed the example of the secret sharing, where you have a secret shared between different users.

21:37.800 --> 21:42.800
The more you scale with the users for any document, the more it might be complicated.

21:42.800 --> 21:46.800
Actually, here's the main...

21:52.800 --> 21:58.800
So basically the question was that what are the technical limitations of Crippett, like in this

21:58.800 --> 22:02.800
context about secret sharing, for instance, they may be scalability issues.

22:02.800 --> 22:08.800
And actually the thing is that for that it will only be small islands where you will share...

22:08.800 --> 22:13.800
I mean, you will only have small sharing islands. For instance, for scalability issues, we don't have any

22:13.800 --> 22:18.800
issues with the number of users growing in terms of collaboration, because in the end, on a single document,

22:18.800 --> 22:26.800
at a single point of time, that many people will be working on it, and the server is only acting,

22:26.800 --> 22:31.800
is only there for communication, because it doesn't... I mean, there is really not much processing

22:31.800 --> 22:36.800
in the server, because it cannot do anything. It cannot be done.

22:36.800 --> 22:44.800
So it's all spread within the clients, within their browsers, which makes it a bit of an issue

22:44.800 --> 22:54.800
on mobile devices, for instance. But for secret sharing, this won't be a technical limitation.

22:54.800 --> 23:03.800
As I said, the main bottleneck with the use of cryptography is the fact that it will block us for...

23:03.800 --> 23:08.800
I mean, it will make some functionalities harder to implement, because everything is hidden, and you

23:08.800 --> 23:16.800
don't have access to it. But at least, as far as I understand, for secret sharing, it may not be an issue.

23:16.800 --> 23:23.800
The main issue will be that you have to coordinate with the other parties, but that's all.

23:23.800 --> 23:24.800
Yes.

23:24.800 --> 23:31.800
Sorry, Ludovic, also from the team, to answer to the next person. One of the big reasons there is a lot of space

23:31.800 --> 23:39.800
is that we have multiple versions of OnlyOffice, and the reason is because we store in the native format

23:39.800 --> 23:46.800
of OnlyOffice because of real-time, we're not storing the Excel version, so for compatibility reason,

23:46.800 --> 23:52.800
when we upgrade CripPad, we need to be able to upgrade the pad, so we need the older version

23:52.800 --> 23:59.800
so that we can upgrade the pad to the newer version of OnlyOffice, and there is a plan to make the installation

23:59.800 --> 24:04.800
of the OnlyOffice modules optional, and basically say, which ones do you want in your CripPad so that you're

24:04.800 --> 24:10.800
not carrying very old versions of OnlyOffice code in CripPad, and this is why it's so big.

24:10.800 --> 24:14.800
We're sorry about that, but there is a technical reason.

24:14.800 --> 24:18.800
Yeah, unfortunately.

24:18.800 --> 24:20.800
Thank you.

24:20.800 --> 24:24.800
So, yeah, I think we are done with this talk. Thank you Fabrice.

24:24.800 --> 24:26.800
Thank you, everyone.

