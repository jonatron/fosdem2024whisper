WEBVTT

00:00.000 --> 00:09.480
Thank you for joining us for the next talk.

00:09.480 --> 00:15.280
The next talk will be about Collaboration Online Web Assembly and it's going to be with

00:15.280 --> 00:18.280
Kaelan and Thorsten.

00:18.280 --> 00:23.240
Okay, I hope you can hear me.

00:23.240 --> 00:25.000
I can hear myself.

00:25.000 --> 00:29.760
So Collaboration Online, I wasn't myself, Kaelan, Mechmeyer and Thorsten Burns and we'll

00:29.760 --> 00:32.200
just get on with it.

00:32.200 --> 00:35.040
Collaboration Online Typical Overview.

00:35.040 --> 00:39.960
What we have is a...

00:39.960 --> 00:43.080
I can shout louder but again it's meant to be amplified.

00:43.080 --> 00:48.400
Collaboration Online Typical Overview, the idea here is that you have a browser, you

00:48.400 --> 00:53.400
have a JavaScript front-end, the JavaScript front-end communicates back to a server, the

00:53.400 --> 01:00.600
back-end server is a classic C++, compiled to native code, there's a web server daemon

01:00.600 --> 01:05.280
that basically manages a whole set of kit instances.

01:05.280 --> 01:09.200
And obviously, crucially with all these things, if there's no server, then it doesn't work

01:09.200 --> 01:13.400
because the browser talks to the server, if you lose connectivity or connection to the

01:13.400 --> 01:18.680
server then your browser has nothing to communicate with and nothing works at all.

01:18.680 --> 01:24.720
Each kit instance that I mentioned there is basically LibreOffice, it links to LibreOffice

01:24.720 --> 01:32.320
Core, it's big, the combined shared libraries on my local copy of those is 320 megs.

01:32.320 --> 01:37.840
So you've got a very, very large core body of code from LibreOffice that is included

01:37.840 --> 01:40.120
and linked to by each kit instance.

01:40.120 --> 01:46.840
Each instance is one document so when you connect to Collaboration Online, each document

01:46.840 --> 01:51.560
is running separately and each individual document is its own instance.

01:51.560 --> 01:56.160
When you've got multiple users, it's still one document, if you connect to one document,

01:56.160 --> 01:59.760
if you've got one user, three documents, you've got three instances.

01:59.760 --> 02:05.560
And then the server mediates between your browser and powers things to each client.

02:05.560 --> 02:11.280
Client renders images and you send back these pictures back to your JavaScript client.

02:11.280 --> 02:14.240
LibreOffice itself, core part of it is pretty portable.

02:15.240 --> 02:20.680
We've ported it to all these operating systems here, Linux, Windows, Mac, IOS, etc.

02:20.680 --> 02:26.200
On the core side we have the famous bridge which is particularly specific to the ABI

02:26.200 --> 02:27.200
of your architecture.

02:27.200 --> 02:31.520
But we have ported it to all these architectures and all these different ABI's in the past.

02:31.520 --> 02:35.440
So there's plenty of experience and plenty of examples of being ported to very, very,

02:35.440 --> 02:39.440
very diverse sets of things at a particularly low level.

02:39.440 --> 02:44.360
More online itself then, pretty much doesn't have the issue of requiring this low level

02:44.360 --> 02:49.640
bridge so its portability is fundamentally easier on that side even though then it is

02:49.640 --> 02:54.640
going to use Linux-based APIs.

02:54.640 --> 02:58.960
So again, two things that are relatively portable in their own sense.

02:58.960 --> 03:00.280
Which brings web assembly in.

03:00.280 --> 03:02.880
Yeah, that's my cue I guess.

03:02.880 --> 03:07.520
So who in this room has not heard about web assembly?

03:08.520 --> 03:10.880
Okay, so great.

03:10.880 --> 03:15.240
So this slide is for you.

03:15.240 --> 03:16.520
In all brevity.

03:16.520 --> 03:23.640
So web assembly, well the idea behind web assembly is to have something that runs in the same

03:23.640 --> 03:30.000
sandbox as Java but is much closer to the actual machine level abstraction that languages

03:30.000 --> 03:33.160
like C and C++ are having.

03:33.280 --> 03:38.760
The vast, like this massive amount of software out there already in those languages to be

03:38.760 --> 03:41.080
able, which is smart move to run this in the world.

03:41.080 --> 03:49.400
The history of that is the SMJS like started 2011, 2012 or something with SMJS also just

03:49.400 --> 03:52.720
a Google PNACL project.

03:52.800 --> 04:04.480
So that started with a subset of the Java script so that is able then to be run relatively

04:04.480 --> 04:09.320
performant like almost like native performance in the browser.

04:09.320 --> 04:17.480
That passed forward a few years, 2015, web assembly became a standard, started implementation

04:17.480 --> 04:21.480
in the browser like with the W3C.

04:22.240 --> 04:25.800
The M script project, big queue those by the way to M script for enabling that based on

04:25.800 --> 04:34.960
LLVM framework to compile C and increasing the C++ and the more complex features down

04:34.960 --> 04:37.480
to web assembly.

04:37.480 --> 04:44.720
Yeah, so small as to some footnote there, some website security policy is still required

04:44.720 --> 04:50.000
to run that because of the way of actually running in the same sandbox.

04:50.040 --> 04:57.240
It's using the shared array for actually having the memory and also the code down.

04:57.240 --> 05:03.120
If you look at the roadmap and the browser support then you realize this thing has arrived.

05:03.120 --> 05:04.840
It's pretty ubiquitous.

05:04.840 --> 05:11.960
Not all the features are there, some features are beta or just in the process of being standardized.

05:11.960 --> 05:17.200
But regardless of where you are mobile or desktop or anywhere like even this Node.js

05:17.320 --> 05:23.080
and Vazi like on a server has excellent web assembly support right now.

05:23.080 --> 05:24.560
That's the roadmap there.

05:24.560 --> 05:31.440
With any decent browser you have at least a subset of that which is good enough.

05:31.440 --> 05:35.480
Which gets me to what does it have to do with the LibreOffice here.

05:35.480 --> 05:42.800
So in 2015 we had a first look at that because it's kind of obvious to say well LibreOffice

05:42.800 --> 05:47.400
is so portable why not port it natively to the browser.

05:47.400 --> 05:49.360
And we utterly failed back in the day.

05:49.360 --> 05:55.320
It was just the way that the C++ support that was available in MScript was just not enough.

05:55.320 --> 06:00.880
I mean there was essentially no decent support for exceptions.

06:00.880 --> 06:04.600
There was a lot of problems with the threading.

06:04.600 --> 06:11.200
So we tried again in 2021 and we're very grateful to in particular NLNet but also to Collauer

06:11.280 --> 06:13.760
and my company for funding that.

06:13.760 --> 06:19.000
And we started again and long story short we succeeded to port that.

06:19.000 --> 06:22.280
It was quite a ride.

06:22.280 --> 06:24.680
It took more than a year.

06:24.680 --> 06:30.280
But given the fact that LibreOffice was already very portable, the build system was already there.

06:30.280 --> 06:31.480
MScript was already there.

06:31.480 --> 06:33.840
A lot of the building blocks were there.

06:33.840 --> 06:41.120
Qt which we use for the GUI thing that you see there in the screenshot had already been

06:41.120 --> 06:42.120
ported.

06:42.120 --> 06:45.560
So lots of those bits and pieces were falling into place.

06:45.560 --> 06:47.680
Some of them actually while we did the port.

06:47.680 --> 06:52.360
We were actually still quite lucky that in the end we were successful.

06:52.360 --> 06:56.480
So yeah and why did we evaluate that after this initial failure?

06:56.480 --> 07:02.840
Because things like AutoCAD and Unreal Engine and all those projects had already ported

07:02.840 --> 07:08.320
so we were reasonably confident that we were still hitting those nasty roadblocks.

07:08.560 --> 07:13.200
LibreOffice has this habit of breaking everything because it's so large and so did we.

07:13.200 --> 07:19.280
So for example at some stage we wanted to link and it took like almost 100 gigabytes

07:19.280 --> 07:25.760
and took two hours just to link the thing which kind of sucked and then a few months later

07:25.760 --> 07:28.880
MScript and Upstream fixed that and we were happy again.

07:28.880 --> 07:34.280
So that's the story of that port and with that I guess back to Quailin.

07:34.280 --> 07:35.280
Indeed.

07:35.440 --> 07:40.920
So yes so now you have LibreOffice's Wasm port.

07:40.920 --> 07:43.200
So what do we do then for clabber online offline?

07:43.200 --> 07:48.200
Ah so clabber online Wasm so Co-Wasm.

07:48.200 --> 07:53.000
So we took all that we do now in that case in the previous diagram you have your server

07:53.000 --> 07:59.400
running on the distant far away server, physical server and now in this case we bring the clabber

07:59.400 --> 08:03.240
online server side and we run it inside the browser.

08:03.240 --> 08:06.520
So you've got exactly the same javascript front end, the javascript front end communicates

08:06.520 --> 08:12.000
in the server but the server is actually the original stuff converted by inscription

08:12.000 --> 08:14.840
to WebAssembly and running inside the browser.

08:14.840 --> 08:19.320
So your server is inside the browser, you have the same architecture but you're only

08:19.320 --> 08:24.840
running one document in this particular case all inside the browser.

08:24.840 --> 08:30.320
So again the core stuff that Thorsten mentioned and then also port and start out online to

08:30.400 --> 08:32.080
Wasm as well.

08:32.080 --> 08:36.400
When you're sitting in front of your browser and you click this particular offline button

08:36.400 --> 08:41.840
as it is currently at the moment you manually ask to be put into the mode you redirect it

08:41.840 --> 08:48.280
to a page that gives you the Wasm that downloads the Wasm for you and if you get that just

08:48.280 --> 08:54.160
right you can get the Wasm into size to a particular size and location that it's a one

08:54.160 --> 08:55.960
time download.

08:56.080 --> 09:00.680
So the next time you go into it it's a particularly quick process.

09:00.680 --> 09:07.080
You give it a copy of the document and then it executes inside your browser and your javascript

09:07.080 --> 09:12.160
server, javascript client communicates in the server like it normally does.

09:12.160 --> 09:16.960
Thorsten mentioned it and kind of mentioned there is a security policy.

09:16.960 --> 09:22.320
Whether that becomes really, really problematic because you don't tend to just run clabber

09:23.240 --> 09:27.880
online and then of course it's launched from Lex cloud and it integrates back to get its

09:27.880 --> 09:30.680
documents from that or any of the other examples.

09:30.680 --> 09:35.800
So there's an intricate dense of multiple web applications and multiple web servers

09:35.800 --> 09:41.680
and then because of this particular specter flaw the browsers are incredibly paranoid

09:41.680 --> 09:47.480
about letting you run Wasm and it's really difficult to allow you to run Wasm and get

09:47.480 --> 09:49.200
multiple places working together.

09:49.200 --> 09:55.040
So all the links will give some of the documentation on that but it seems to be down to is that

09:55.040 --> 10:00.160
the thing that you're embedding into and the thing being embedded both have to agree that

10:00.160 --> 10:04.880
they're happy with being mixed together so that one isn't being tricked into being embedded

10:04.880 --> 10:09.120
and the other and the other isn't being tricked into embedding something that had no intention

10:09.120 --> 10:12.560
of running in the same browser as it.

10:12.560 --> 10:18.280
So thanks next loud, thanks to Julius Hartel there particularly for helping us get a bootstrapped

10:18.320 --> 10:23.360
up so we can get next clouds which document to provide the appropriate security headers

10:23.360 --> 10:27.880
to at least get the first step started and there's a particular pull request there that

10:27.880 --> 10:31.720
took us ages to get sorted out.

10:31.720 --> 10:36.200
You have to get your initial instigating website to give you the headers then on your side

10:36.200 --> 10:39.000
and the clabber online side you have to get matching headers and say that you're happy

10:39.000 --> 10:42.840
but you've been put inside of that then you have to get it only really will work if you

10:42.840 --> 10:48.240
have clabber online in reverse proxy mode so that all appears from the same server from

10:48.240 --> 10:50.840
the browser perspective.

10:50.840 --> 10:55.880
That works for Firefox just like that but for Chrome it has to be SSL it won't let you

10:55.880 --> 10:59.320
do it if you don't have HPPS.

10:59.320 --> 11:03.600
We found out we experimentally applied it that a lot of our own websites pull our logos

11:03.600 --> 11:08.120
from a third website and again that third website isn't happy to be included within

11:08.120 --> 11:13.560
this process then the logos are broken so in the end then you come up with basically

11:13.560 --> 11:18.080
that if you have Wasm enabled we set up some capabilities saying Wasm is in line and then

11:18.080 --> 11:23.680
we put all this cascade of headers or it becomes conditional on wanting to support.

11:23.680 --> 11:28.720
There's a lot of practicalities as well I mean when it actually runs in your browser

11:28.720 --> 11:35.200
things are pretty good or pretty slick I believe but actually building it in person talks about

11:35.200 --> 11:41.160
the 100 gigs now if it's improved now you only need 25 gigs of memory to link it so

11:41.160 --> 11:46.480
that's pretty challenging when you're unaware of what's going wrong there.

11:46.840 --> 11:51.960
Cross-compiling is always a little bit fraught in my particular case I've used the tool

11:51.960 --> 11:58.920
chain that I've had pushing together your own tool chain is painful so you have to invest

11:58.920 --> 12:00.560
time in that.

12:00.560 --> 12:05.480
Threading is a little bit unclear to me what's going on there we're using in scripting and

12:05.480 --> 12:10.280
then we have the standard C++ API talking about threading and if my particular machine

12:10.280 --> 12:14.480
I inquire how many threads I have it will tell me 20 which is the actual number of hardware

12:14.480 --> 12:19.600
threads I have but then when you actually go and run things with threads inside the

12:19.600 --> 12:23.880
Wasm you find that it seems to have a practical limit of four so you've got a mismatch there

12:23.880 --> 12:29.160
between what two APIs are telling you one of which is telling you 20 threads and another

12:29.160 --> 12:31.880
one is limiting it to four.

12:31.880 --> 12:34.280
It's lying it's four so that's hard to compile.

12:34.280 --> 12:38.480
So you run into problems there you have to watch out for it you have to just limit things

12:38.480 --> 12:43.360
down to your four threads and dismiss or ignore what some of the other APIs are saying.

12:43.360 --> 12:48.720
This particular one is incomplete you manually decide that you want to go into offline mode

12:48.720 --> 12:53.200
and it works beautifully but that's not particularly useful perhaps in the real world because you

12:53.200 --> 12:58.120
can't go back online so once your document is inside the browser it's inside the browser

12:58.120 --> 13:04.400
and it's not going to be migrated back to online when you're connecting with stores

13:04.400 --> 13:05.880
but it does work.

13:05.880 --> 13:12.360
I'll just show a little video and though I actually do have it working locally but trust

13:12.360 --> 13:13.360
me on that one.

13:13.360 --> 13:21.120
So this is your online as usual just about just to just do the two of them and just knock

13:21.120 --> 13:26.840
the network down and then I just hit Firefox's offline as well just to get quickly to the

13:26.840 --> 13:29.320
servers being disconnected you know type type type.

13:29.320 --> 13:34.520
No effort obviously it's going to work because we're not connected to anything.

13:34.520 --> 13:43.320
Back online we go back to reload this I believe and we should flip over to the view file and

13:43.320 --> 13:48.120
go offline as the magic button click click click.

13:48.120 --> 13:54.760
Wappy downloads start instantiating comes back up with a copy of the document.

13:54.760 --> 14:00.240
Drop our connectivity again go back speed up the process here and we should be able to

14:00.240 --> 14:06.880
interact with the document as it runs inside the browser to its jailed for whatever its

14:06.880 --> 14:10.760
slave copy of Clabber Online executing Wappy.

14:10.760 --> 14:15.960
It looks exactly the same even because you know it's non-trivial that it looks exactly

14:15.960 --> 14:20.920
the same but it does it's interactive you can move around with it and it works fine.

14:20.920 --> 14:26.800
Can't save back the abouts as well as it doesn't prove anything but that is the case.

14:26.800 --> 14:41.080
I think I have just got one last slide just to say that is the end of.

14:41.080 --> 14:53.280
Thank you.

14:53.280 --> 14:54.280
Not sure.

14:54.280 --> 15:00.120
I think we're doing good on time so any questions or anything.

15:00.120 --> 15:05.080
Otherwise I think I could.

15:05.080 --> 15:10.680
So I didn't fully understand does it save the document somehow inside the browser but

15:10.760 --> 15:16.080
you cannot get it out from there or can you save it somehow there inside it.

15:16.080 --> 15:22.600
Once it's in the browser you could manually use save as a download as it's not you can

15:22.600 --> 15:26.680
do that but what you can't do is just click another button that says go right right now

15:26.680 --> 15:32.680
you can't do it it's not like there's some fundamental problem it's just not done yet.

15:32.680 --> 15:37.400
Save as and process continue editing with your local copy of the office on the laptop

15:37.400 --> 15:40.680
and then upload it again online or something like this.

15:40.680 --> 15:41.680
Yeah.

15:41.680 --> 15:50.600
Thanks for talk.

15:50.600 --> 15:55.760
I can imagine that the idea on switching from online to offline is that you will be able

15:55.760 --> 15:58.840
to switch freely between online and offline.

15:58.840 --> 16:06.880
What is there the idea or the plan or the challenges you might find to switch easily

16:06.880 --> 16:12.160
back to online for instance when your internet drops out and it comes back.

16:12.160 --> 16:18.800
Well it's just a matter I suppose of some of the practicalities of I don't think there's

16:18.800 --> 16:24.400
anything fundamental I think it's just probably a matter of time to be let investigate the

16:24.400 --> 16:29.960
problem a bit further but if you've taken it offline you're just going to have a little

16:29.960 --> 16:33.160
practicality when you come back online if somebody else has opened up the document in

16:33.160 --> 16:37.080
the meantime you just come back to the classic problems of just file locking it you know do

16:37.080 --> 16:41.000
you go offline you just I mean that's what I would do I just say you know it's locked

16:41.000 --> 16:45.360
you know can't can't write back to it till it comes back online whatever it was just

16:45.360 --> 16:49.160
file locking but there's nothing nothing new or unusual about that.

16:49.160 --> 16:56.480
This is the this is the live version of the Weisman case and we once too I don't know

16:56.480 --> 16:59.520
look under the hood and make sure I'm not doing on that online.

16:59.520 --> 17:01.440
So let's have another question.

17:01.440 --> 17:06.960
I would say there are three people working on the document online and then one is dropping

17:06.960 --> 17:14.760
off continues to add comments and what is your strategy of catching up with the changes

17:14.760 --> 17:18.160
that have been carried out online in the meanwhile.

17:18.160 --> 17:22.040
It's probably the same the same issue again like yeah what are we going to do about that

17:22.040 --> 17:28.680
I mean to be decided I guess is the answer there but I don't think there's anything fundamental

17:28.680 --> 17:34.520
with that I mean it's the same as if you were back in the case where you have your shared

17:34.520 --> 17:37.440
network and you've shared a document and you had your classic clients and they open it

17:37.440 --> 17:40.880
up and it's locked by another user or whatever you just have to decide what strategy you

17:40.880 --> 17:48.440
want to imply there so yeah an open question really.

17:48.440 --> 17:53.560
So first amazing work it's really incredible to see this working I have a question about

17:53.560 --> 17:59.160
memory consumption have you have you measured more in detail the memory consumptions and

17:59.160 --> 18:05.320
are there strategies potentially to to minimize that memory consumption to like reduce it

18:05.320 --> 18:06.320
as much as possible.

18:06.320 --> 18:07.320
Yeah.

18:07.320 --> 18:12.080
The second question is is there a possibility for having multiple documents open in the same

18:12.080 --> 18:14.720
was module.

18:14.720 --> 18:19.320
And the first one was memory consumption.

18:19.320 --> 18:24.440
We're focused initially on this is the size of it getting the size down the physical size

18:24.440 --> 18:29.640
down of the binary which which I guess we've done I'm happy with that memory consumption

18:29.640 --> 18:33.360
of it itself haven't really looked massively at it I mean it's the same as memory consumption

18:33.360 --> 18:34.360
for any of them.

18:34.360 --> 18:41.280
I think this particular computer has just has the four six gigs of memory and there's no

18:41.280 --> 18:45.680
particular problems with that if you have one document if you start to know if you want

18:45.680 --> 18:51.320
to run at the same time you do an eight threaded build of Libre Office then yes you run out

18:51.320 --> 18:55.280
of memory on this machine so it's like one or the other.

18:55.280 --> 18:59.160
So no haven't done any particular about that we did have issues with the threading and

18:59.160 --> 19:05.080
some of the threading of course was causing memory excessive memory usage.

19:05.080 --> 19:06.200
So happy with that.

19:06.200 --> 19:10.280
The other one was second question.

19:10.280 --> 19:20.640
So in terms of memory consumption so the size that's a footprint of the binary like

19:20.640 --> 19:28.360
compared to what you get into some very heavily JavaScript lots of advertising websites it's

19:28.360 --> 19:33.400
not fundamentally different let's not orders of magnitude larger or anything like that so

19:33.520 --> 19:40.080
so while it's relatively large it's not like in the same age for at least desktop browsers

19:40.080 --> 19:47.560
as Quelin said it didn't like it didn't trigger anything but I did not measure like specifically

19:47.560 --> 19:55.520
the so for the let's say document itself is not very very heavy but of course you need

19:55.520 --> 20:01.720
to load the you need to load the binary into the into the sandbox there was clearly a problem

20:01.720 --> 20:07.960
or there will be a problem if you run if you run five or six or seven or eight documents

20:07.960 --> 20:13.400
you've got you that's very little sharing it but there's a cache possibly that chest

20:13.400 --> 20:21.440
but the actual footprint and the browser tab that's not chat from what I can tell so so

20:21.440 --> 20:24.680
valid point.

20:24.680 --> 20:26.080
I think the other question was.

20:27.040 --> 20:28.040
Yes.

20:28.040 --> 20:32.080
To multiple documents and I think the Tarsen cover that today.

20:32.080 --> 20:35.680
Did you answer the second question when I had multiple documents?

20:35.680 --> 20:45.160
My question was in relation to the first to the last response could we have a cache strategy

20:45.160 --> 20:51.720
or something to cache the code that's what I'm thinking to speed up the loading first

20:51.720 --> 20:57.880
loading especially or multiple tabs my idea was a browser extension or something where

20:57.880 --> 21:03.720
we could put the wasm in there and then load it as as you need it.

21:03.720 --> 21:10.640
But I'm not sure if a browser extension allows such use cases.

21:10.640 --> 21:13.720
I think we're happy with the caching as it is.

21:13.720 --> 21:14.720
Yeah.

21:14.720 --> 21:20.520
No I think the download and the caching is seems to be sorted now right the load time

21:20.520 --> 21:24.520
isn't fabulous yet but that's just the nature of the beast.

21:24.520 --> 21:28.720
I think we might be short on time now.

21:28.720 --> 21:32.040
We have one question also.

21:32.040 --> 21:40.040
Just to be clear a document is a file on the server and then it's pulled to the client

21:40.040 --> 21:45.440
so you might as well access it over another file sharing mechanism as well like SMB or

21:45.440 --> 21:46.440
NFS.

21:46.440 --> 21:51.800
When you're in your classic online clabber online case the document tends to be in some

21:51.800 --> 21:57.800
other kind of a wappy server and you get it from there and online can get it and then

21:57.800 --> 22:05.640
it presents it as a file just as a simple file for the browser case so in this wasm

22:05.640 --> 22:10.560
case the wasm doesn't do any direct connection back to the original wappy server so it's

22:10.560 --> 22:12.840
the online is allowed to get the document.

22:12.840 --> 22:16.760
Is the server file is also stored as a file or does it end up somewhere?

22:16.760 --> 22:22.840
Well as far as far as even clabber online is concerned it just is asked to fetch the

22:22.840 --> 22:28.040
document and is given the bytes for that document it doesn't really know where those

22:28.040 --> 22:35.360
bytes come from in that kind of a sense so you know neither of the two really have access

22:35.360 --> 22:39.800
to the underlying location where the files are.

22:39.800 --> 22:43.520
That's why I look at it at least.

22:43.520 --> 22:45.400
Thank you.

22:45.400 --> 22:51.680
This one was a bit hard and the next cloud is pulled and so on with the link.

22:51.680 --> 22:52.680
Yeah.

22:52.680 --> 22:56.040
Where did I put it?

22:56.040 --> 22:58.360
Can you repeat the questions?

22:58.360 --> 23:13.520
He just wants to see the...

23:13.520 --> 23:17.040
There is a long number.

23:17.040 --> 23:27.800
Yeah I'm not entirely sure where that's gone now but the slides will be uploaded to the

23:27.960 --> 23:36.160
place for that must be somewhere here.

23:36.160 --> 23:41.560
Back is up this one or the next one?

23:41.560 --> 23:50.640
This one three, three, two, three, two, six, zero.

23:50.640 --> 23:57.200
That's just where the propagating the headers that need to be passed around the place to

23:57.280 --> 24:01.560
get it up and running.

24:01.560 --> 24:01.920
Thank you.

