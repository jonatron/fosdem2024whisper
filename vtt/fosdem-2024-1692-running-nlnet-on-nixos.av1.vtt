WEBVTT

00:00.000 --> 00:08.000
Alright, thank you everyone who moved and gets some space.

00:08.000 --> 00:10.000
We can now start the next talk.

00:10.000 --> 00:13.000
Josse is going to talk about using NixOS at NLNet.

00:13.000 --> 00:16.000
Hello everyone.

00:16.000 --> 00:19.000
So, yes, my name is Josse van den Noeven.

00:19.000 --> 00:21.000
I'm an employee at NLNet.

00:21.000 --> 00:23.000
NLNet is a Dutch foundation.

00:23.000 --> 00:27.000
And who here has heard of NLNet, by the way?

00:27.000 --> 00:29.000
Are there any hands down?

00:29.000 --> 00:31.000
Wow, this is amazing.

00:31.000 --> 00:33.000
That's very cool.

00:33.000 --> 00:37.000
Yeah, so it's an honor to work at NLNet.

00:37.000 --> 00:43.000
And this talk is going to be about how we use NixOS there.

00:43.000 --> 00:45.000
There were so many hands.

00:45.000 --> 00:49.000
NLNet is the organization which here at FOSAT might be known

00:49.000 --> 00:52.000
for, you know, spamming stickers everywhere.

00:52.000 --> 00:56.000
We have the stand in the K building with so many stickers.

00:56.000 --> 00:59.000
And each of these stickers here is a project we have supported.

00:59.000 --> 01:02.000
But not all of the projects that we have supported have a sticker

01:02.000 --> 01:07.000
because, you know, command line tools might not have a logo all the time.

01:07.000 --> 01:13.000
As you can see, NixOS is up there as well, as well as many other projects.

01:13.000 --> 01:18.000
I'm wondering who here has ever had funding for NLNet?

01:18.000 --> 01:21.000
See, that's less hands.

01:21.000 --> 01:26.000
But we have funding for open source projects.

01:26.000 --> 01:30.000
So if you have good ideas, if you're part of a community that has

01:30.000 --> 01:35.000
these tenacious bugs that nobody is coming around to help fund to fix,

01:35.000 --> 01:40.000
or if you have a protocol which has not been implemented in your particular library,

01:40.000 --> 01:45.000
or whatever good idea you have, just look on our website what other projects

01:45.000 --> 01:49.000
we've been funding and, you know, write your own proposal.

01:49.000 --> 01:52.000
Proposals for writing to NLNet are not difficult to do.

01:52.000 --> 01:55.000
It's one form.

01:55.000 --> 01:58.000
You say who you are, you say what your plan is, what the outcome is,

01:58.000 --> 02:01.000
what it's going to cost, or what you think it's going to cost,

02:01.000 --> 02:03.000
and then you press send.

02:03.000 --> 02:07.000
And every two months, there's a new call.

02:07.000 --> 02:12.000
So this is the tagline that we use since this week, actually.

02:12.000 --> 02:17.000
We have a PR person now, and she, you know,

02:17.000 --> 02:20.000
she says the message should be simple, it should be clear,

02:20.000 --> 02:24.000
and it should be to the point, and so we try to, she tried to fit it into one line.

02:24.000 --> 02:28.000
We fund those who contribute to the open internet, you know,

02:28.000 --> 02:31.000
because that's what it's all about, why are you here at FOSDEM?

02:31.000 --> 02:36.000
And, yeah, we're just very happy that we can help there.

02:36.000 --> 02:39.000
So what do we mean when we talk about the open internet?

02:39.000 --> 02:43.000
Well, we should be able to communicate directly, right?

02:43.000 --> 02:46.000
Get rid of big tech, which is in between our communications.

02:46.000 --> 02:50.000
No dependencies, no lock-in, just get the source, compile it yourself,

02:50.000 --> 02:55.000
and that way we can have a good democracy, we can be independent

02:55.000 --> 03:00.000
and not have to be living in fear that some service is going to be taken away from us,

03:00.000 --> 03:03.000
because, you know, we can run it ourselves.

03:03.000 --> 03:10.000
So self-hosting is a thing that we very much promote, yeah, free software, free society,

03:10.000 --> 03:18.000
and this logo here, Next Generation Internet, is, that's the thing that makes me standing here,

03:18.000 --> 03:24.000
because that's the fund by the European Union that is providing over 90% of the funding

03:24.000 --> 03:26.000
that Anonite is able to give out.

03:26.000 --> 03:31.000
We have been given out money for decades now,

03:31.000 --> 03:37.000
but we were always very minor operation until the EC decided that, you know,

03:37.000 --> 03:41.000
there's so much software in this world, we're running on it, we're depending on it,

03:41.000 --> 03:44.000
we should, you know, also be the owner of it and invest in it.

03:44.000 --> 03:49.000
So that's what the EC is doing now, and we are one of the facilitators that, you know,

03:49.000 --> 03:54.000
seek out the right projects that are to be supported.

03:54.000 --> 04:00.000
So we fund open software, hardware, standards, documentation.

04:00.000 --> 04:04.000
When you submit a proposal to us, it has to be something that you can deliver,

04:04.000 --> 04:07.000
you can, you know, get pushed or you can publish somewhere,

04:07.000 --> 04:14.000
not, for example, server maintenance for that or having a meeting for that you have to go elsewhere.

04:14.000 --> 04:19.000
We like to, you know, we like to check what the money is being spent on,

04:19.000 --> 04:24.000
and that's also what we have to report to the people that give us the money,

04:24.000 --> 04:30.000
which we will mostly be doing, so we try to keep the bureaucracy very low.

04:30.000 --> 04:37.000
Yeah, self-hosting. So self-hosting, of course, means system administration.

04:37.000 --> 04:40.000
Who here likes system administration?

04:40.000 --> 04:47.000
50-50. Yeah.

04:47.000 --> 04:50.000
So, yeah, it doesn't always go well with system administration.

04:50.000 --> 04:52.000
You're in the basement in some organizations.

04:52.000 --> 04:57.000
In the Netherlands, we're only small, so I get to sit with the other people.

04:57.000 --> 04:59.000
It's not all that bad.

04:59.000 --> 05:03.000
Once a year, you know, you have system administration appreciation day,

05:03.000 --> 05:06.000
which is awesome, right, if people remember it,

05:06.000 --> 05:11.000
and, you know, if they're not on holiday, because it happens to be in the middle of summer.

05:11.000 --> 05:16.000
So, yeah. Not everything's perfect.

05:16.000 --> 05:19.000
Okay. How do you use Nixle's in a small organization?

05:19.000 --> 05:21.000
That's what this talks about.

05:21.000 --> 05:24.000
And in the Netherlands, we're currently tendon police when I started, we were four,

05:24.000 --> 05:29.000
so we're growing. Also, when we started, we were running a bunch of different systems

05:29.000 --> 05:37.000
with backups sometimes, no commits of the configuration,

05:37.000 --> 05:39.000
so no history of what was running.

05:39.000 --> 05:44.000
It was a mail, for example, was running in a BSD system with set-afers,

05:44.000 --> 05:47.000
so it had snapshots, so that was pretty good.

05:47.000 --> 05:51.000
And our requirements are really not that crazy.

05:51.000 --> 05:55.000
We need mail, website, telephone, you would think.

05:55.000 --> 06:01.000
But then if you drill down, there's quite a lot of stuff that you need to keep running, actually.

06:01.000 --> 06:07.000
So here's what we have that is open source and which is not free and open source software.

06:07.000 --> 06:11.000
So a website, obviously, it's run by EngineX.

06:11.000 --> 06:14.000
Our email server is self-hosted, mailing lists.

06:14.000 --> 06:16.000
We have our own code forge.

06:16.000 --> 06:20.000
Well, what makes us tick? Our grant management system.

06:20.000 --> 06:28.000
That is running using open source components and chat, video,

06:28.000 --> 06:30.000
micro-blogging since a short while.

06:30.000 --> 06:33.000
We are also hosting it ourselves.

06:33.000 --> 06:34.000
But not everything.

06:34.000 --> 06:36.000
For example, our router, which we could do, of course.

06:36.000 --> 06:38.000
We haven't gotten around to that.

06:38.000 --> 06:40.000
Printer, open hardware for printers.

06:40.000 --> 06:43.000
That's not worth it right now.

06:43.000 --> 06:48.000
We have some people using Apple devices, so it's not completely open there either.

06:48.000 --> 06:50.000
Biases and chips.

06:50.000 --> 06:52.000
I mean, we support people designing chips.

06:52.000 --> 06:56.000
We're not yet at the stage that we can also dog food those.

06:56.000 --> 07:00.000
But we have quite some components that we do ourselves.

07:00.000 --> 07:04.000
So when we choose a system to get rid of the whole collection that we had before,

07:04.000 --> 07:06.000
what options are there?

07:06.000 --> 07:08.000
Well, there's Nixos, there's Geeks.

07:08.000 --> 07:13.000
We could go to a closed cloud, but obviously that would be very bad for our image.

07:14.000 --> 07:21.000
Or we could go to an open cloud hoster, which there are more and more of those now.

07:21.000 --> 07:25.000
But we said, well, we are funding projects.

07:25.000 --> 07:28.000
Projects are sending us that code.

07:28.000 --> 07:34.000
It would be great if we could also try to keep our knowledge about all these systems up.

07:34.000 --> 07:37.000
So let's try to do it all ourselves.

07:37.000 --> 07:43.000
And then Nixos has quite a lot of advantages, also some disadvantages.

07:43.000 --> 07:48.000
But the declarative part is, yeah, it takes some getting used to.

07:48.000 --> 07:54.000
But it's really useful, right?

07:54.000 --> 07:56.000
It's just nice static files.

07:56.000 --> 08:02.000
It's mostly reproducible, and mostly it's mean 99.99% for the stuff that we use at least.

08:03.000 --> 08:08.000
Extremely many packages, as you've seen in the talks just before now.

08:08.000 --> 08:10.000
You can mix versions of stuff.

08:10.000 --> 08:14.000
I'll show you a bit later how we actually need to do that.

08:14.000 --> 08:17.000
The Nix language, well, there's a lot of discussion always about it.

08:17.000 --> 08:19.000
But personally, I really like it.

08:19.000 --> 08:22.000
So you have to get it.

08:22.000 --> 08:24.000
But then it's great.

08:24.000 --> 08:28.000
So it's familiar to us because before we decided to switch all the systems to it,

08:28.000 --> 08:30.000
we were already using it on our laptops.

08:30.000 --> 08:32.000
So that's a bias over there.

08:32.000 --> 08:37.000
The Flake lock is very important to us because we can lock down the dependencies

08:37.000 --> 08:43.000
and we can be sure that whenever we update, it's a conscious choice to do so.

08:43.000 --> 08:48.000
Propriety packages are packaged, but they're disabled by default.

08:48.000 --> 08:53.000
So we don't have to worry that by accident we are starting to depend on closed software.

08:53.000 --> 08:56.000
Yeah, there are some downsides as well from our perspective.

08:56.000 --> 09:01.000
So the community is organized on a proprietary system.

09:01.000 --> 09:04.000
A lot of open source projects these days are.

09:04.000 --> 09:07.000
And we really promote self-hosting.

09:07.000 --> 09:12.000
So if a project is self-hosting, that's a plus in our book.

09:12.000 --> 09:17.000
Another thing, not everything is as polished as it could be.

09:17.000 --> 09:22.000
I'll show you that we are using an officially unstable feature.

09:23.000 --> 09:27.000
So yeah, and there's no storage handling.

09:27.000 --> 09:30.000
And what that means, I'll get back to that as well.

09:30.000 --> 09:35.000
So there are a lot of green flags there.

09:35.000 --> 09:38.000
Full disclosure, Nixos is a partner with us.

09:38.000 --> 09:42.000
When people get funded at an Lnet, they also get services.

09:42.000 --> 09:45.000
So they get free packaging and Nixos is providing that.

09:45.000 --> 09:49.000
So we are a bit prejudiced when choosing Nixos.

09:49.000 --> 09:52.000
For me, Nixos, I've been using it a long time,

09:52.000 --> 09:55.000
but I always find it very difficult to write the packages

09:55.000 --> 09:59.000
until one day I had to explain to a colleague of mine how these files work.

09:59.000 --> 10:04.000
And I was sitting there and suddenly it clicked that yeah, everything is a function.

10:04.000 --> 10:10.000
I mean, it's called a purely functional package, but still somehow it didn't click.

10:10.000 --> 10:14.000
But then I had to explain it to him what are these brackets at the top with the columns.

10:15.000 --> 10:17.000
And yeah, that's the arguments to the function.

10:17.000 --> 10:22.000
And the rest of the file is what comes out of the function.

10:22.000 --> 10:27.000
There are many Nixos developers who are thinking, wow, this is a newbie here.

10:27.000 --> 10:33.000
But I feel a bit embarrassed to say it, but once that clicks,

10:33.000 --> 10:38.000
it's really a very nice system because it's like JSONnet or Haskell,

10:38.000 --> 10:40.000
other functional languages.

10:40.000 --> 10:45.000
It's very predictable in what it does once you get it to do what you want.

10:45.000 --> 10:48.000
So is it just Nix? Is that enough?

10:51.000 --> 10:53.000
How do you deploy it on many systems?

10:53.000 --> 10:57.000
So there was a talk by Sir Leanne Rappen a few years ago

10:57.000 --> 11:02.000
on all the possible options that there are to deploy Nixos to a number of systems.

11:02.000 --> 11:08.000
So it's a whole list here, and in her talk she explained what the pros and cons

11:08.000 --> 11:12.000
of each of these systems were, and that was very helpful to us.

11:12.000 --> 11:14.000
So that's why I wanted to highlight it here.

11:14.000 --> 11:16.000
That was really amazing work that she did.

11:16.000 --> 11:21.000
And in the end, what we chose is to keep it simple and do everything with Nixos rebuild.

11:21.000 --> 11:26.000
And that's the basic command that everybody's using when you're using Nixos.

11:26.000 --> 11:32.000
And it turns out you can just manage your service with that.

11:32.000 --> 11:36.000
So all of our systems are defined in one Git repository.

11:36.000 --> 11:40.000
They're all defined in one nix.flake.nix file.

11:40.000 --> 11:44.000
Each machine has a configuration nix, hard configuration.nix,

11:44.000 --> 11:49.000
but there are a lot of placeholders there for stuff that we import from another directory

11:49.000 --> 11:52.000
where most of the services are configured.

11:52.000 --> 11:57.000
And we try to keep the simple readable for everyone.

11:57.000 --> 12:03.000
We use a JSON file that has sort of the structure of our setup in there,

12:03.000 --> 12:07.000
and then that's imported and readable as variables further on in the system.

12:07.000 --> 12:14.000
So if you do a nixflake show and the flakes are the not yet completely stable part of Nix that we are using,

12:14.000 --> 12:20.000
then you will see Nix configurations has five servers in our case.

12:20.000 --> 12:26.000
And what we do to deploy that is we type nixos rebuild, switch,

12:26.000 --> 12:32.000
and then we say here's the flake for the server, and it should go to that server.

12:32.000 --> 12:37.000
So that's how our deployment system works. It's just built into nix.

12:37.000 --> 12:43.000
And this is our machine's JSON, so it tells us what should be the IP number for the different machines,

12:43.000 --> 12:46.000
what name servers should it talk to, where are the secrets.

12:46.000 --> 12:51.000
Secrets management is really done by rzink by us, so we just, when the machine reboots,

12:51.000 --> 12:53.000
we don't store the secrets in the nix store,

12:53.000 --> 12:58.000
we just copy them into the slash run directory with rzink.

12:59.000 --> 13:04.000
And yeah, here's the flake. So we are mixing an old version of nix packages

13:04.000 --> 13:08.000
because we haven't completely switched that, I'll explain later why,

13:08.000 --> 13:13.000
with nixos, the current nixos, I mean you can just do that, you can put it together,

13:13.000 --> 13:18.000
and so these are the inputs, and then here is the function that defines the outputs

13:18.000 --> 13:22.000
where these things are coming in.

13:23.000 --> 13:29.000
And this is then a very simplified version of how we define each of our machines.

13:29.000 --> 13:34.000
So we have a function called makeSystem which takes the hostname and the definition,

13:34.000 --> 13:39.000
and we define our systems by looping that function over all the machine definitions.

13:39.000 --> 13:43.000
It's a bit more complicated because it has to know which inputs to use on which machines,

13:43.000 --> 13:51.000
but this is sort of the magic that makes us able to just use nixos rebuild.

13:52.000 --> 13:56.000
Now when you're setting up your system, this is the thing I think is most important,

13:56.000 --> 14:00.000
is the alerts. The computer has to do stuff automatically for you,

14:00.000 --> 14:04.000
and you would like to make sure that it continues to do so even while you're sleeping

14:04.000 --> 14:06.000
or while you're giving a talk at FOSDAN.

14:06.000 --> 14:12.000
So I'm very happy that this box in my mail folder has not had any unread messages

14:12.000 --> 14:15.000
for a very long time now, so that's great.

14:15.000 --> 14:20.000
Our alert board is green very much of the time.

14:21.000 --> 14:26.000
We have a very particular alert here which is called the nixos flake committed.

14:26.000 --> 14:30.000
So if somebody doesn't deploy without committing first, it gets read

14:30.000 --> 14:34.000
because then it's undocumented what our system is doing.

14:34.000 --> 14:38.000
This was a zoom in, but I think it was good enough to read.

14:38.000 --> 14:43.000
Yeah, so backups, that's the second most important thing for your system.

14:43.000 --> 14:47.000
We use Borg for backups and Butterbackup,

14:47.000 --> 14:52.000
to do snapshots every hour, and here's a small point of critique

14:52.000 --> 14:59.000
for nixos or actually a feature which is not really there at the moment.

14:59.000 --> 15:05.000
When you do anything with software and it also needs data,

15:05.000 --> 15:08.000
you have to say where the data is and everything is declared in nix,

15:08.000 --> 15:11.000
except the folders have to be written by hand

15:11.000 --> 15:13.000
or they're set by defaults in the services.

15:14.000 --> 15:18.000
Doing backups, there's no enforcement that there is a backup

15:18.000 --> 15:20.000
or an easy way to do the backup.

15:20.000 --> 15:24.000
In the setup of your backup system, you have to repeat all the directories again

15:24.000 --> 15:28.000
or you define them at the top level and then you use the variables

15:28.000 --> 15:30.000
for those directories at the top level.

15:30.000 --> 15:34.000
This is a thing that might be a bit more polished,

15:34.000 --> 15:38.000
it's an opportunity for a new system, a new extension.

15:38.000 --> 15:42.000
So mail, who here is hosting their own mail?

15:42.000 --> 15:44.000
Wow, that's not enough.

15:44.000 --> 15:46.000
We need more people hosting their own mail.

15:46.000 --> 15:51.000
It's so important, it's still the backbone of all your communication,

15:51.000 --> 15:52.000
it's email.

15:52.000 --> 15:55.000
We really want to self-host, we were self-hosting,

15:55.000 --> 15:58.000
so when we're setting up a new system, it would feel like a defeat

15:58.000 --> 16:01.000
to stop doing that, so we continue doing that.

16:01.000 --> 16:05.000
And nixos has a project which is called Simple Nixos Mail Server,

16:05.000 --> 16:11.000
which ties together Dovcott Postfix, LDAP and Rspundi together,

16:11.000 --> 16:15.000
it didn't use to tie up LDAP, but we needed that,

16:15.000 --> 16:19.000
so we paid a contractor to add this support and upstream it.

16:19.000 --> 16:21.000
So that's what we're using right now.

16:21.000 --> 16:24.000
However, we're announced, so we're funding a lot of projects.

16:24.000 --> 16:27.000
We're also funding Stahl words, that's simpler,

16:27.000 --> 16:32.000
all included Rust implementation of a mail server,

16:32.000 --> 16:37.000
and we're also supporting Mox, that's a go implementation of a mail server.

16:37.000 --> 16:41.000
And we're soon going to try out Stahl words

16:41.000 --> 16:46.000
on a less important mail domain of ours.

16:46.000 --> 16:50.000
Yeah, and then you get these wonderful 100% scores.

16:50.000 --> 16:54.000
If you fill around long enough, well, actually we didn't have to fill that long

16:54.000 --> 16:59.000
because the Simple Nixos Mail Server really configures your mail properly,

16:59.000 --> 17:02.000
and this wonderful website, internet.nl,

17:02.000 --> 17:08.000
is what you can use to check if actually your mail server is configured correctly.

17:08.000 --> 17:13.000
One highlight of Nixos that we really value is the testing.

17:13.000 --> 17:19.000
So to test two computers working together is made very easy in Nixos

17:19.000 --> 17:22.000
because there are Python scripts that you can call

17:22.000 --> 17:25.000
and you set up both computers and you tell them how to talk to each other

17:25.000 --> 17:27.000
and what the expected outcome is,

17:27.000 --> 17:31.000
and all of these scripts, many of these scripts are just part of Nix packages.

17:31.000 --> 17:34.000
So you can read how these systems, how this testing is done

17:34.000 --> 17:38.000
and for your own setup you can also write those scripts, and that's great.

17:38.000 --> 17:42.000
And we run that in CI via Flake checks.

17:42.000 --> 17:46.000
Well, sometimes something can go wrong.

17:46.000 --> 17:50.000
You don't have to be a genius to see what's going wrong here.

17:50.000 --> 17:55.000
We are sending the configuration of server one to server two,

17:55.000 --> 18:00.000
and this is where the system that we saw earlier comes in handy,

18:00.000 --> 18:05.000
how to fix your booting because this really killed deployment one time.

18:05.000 --> 18:12.000
So when I say we keep our system simple and we try not to build on top of stuff,

18:12.000 --> 18:16.000
here we decided that it would be a good idea to make a small alias script

18:16.000 --> 18:22.000
that only takes one argument so you don't confuse the two servers with each other anymore.

18:22.000 --> 18:26.000
We recovered from this in five minutes so it wasn't that bad,

18:26.000 --> 18:29.000
but I did get a big fright.

18:29.000 --> 18:32.000
How do we do updates? I'm just putting this command here.

18:32.000 --> 18:37.000
It's not that interesting, but I just want to have it documented somewhere

18:37.000 --> 18:43.000
because it's a bit long, but we have a number of inputs to our Flakes,

18:43.000 --> 18:46.000
and if you want to update just one input, which is often something that we need to do,

18:46.000 --> 18:50.000
for example, when one of our software packages updates that we write ourselves,

18:50.000 --> 18:54.000
then you can do only that Flake input with this command.

18:54.000 --> 18:56.000
So conclusions.

18:56.000 --> 18:58.000
We like to keep it simple.

18:58.000 --> 19:03.000
We just use the basic tools of NixOS, and we put most of the configuration,

19:03.000 --> 19:09.000
or we try to move as much as we can into JSON files so that it's easier to read.

19:09.000 --> 19:14.000
So technically, NixOS is really great for an alat.

19:14.000 --> 19:22.000
However, for the average office, it's probably quite complicated to do this.

19:22.000 --> 19:28.000
So I think there's an opportunity here for open cloud providers to use a system like this

19:28.000 --> 19:30.000
and make it more user-friendly.

19:30.000 --> 19:36.000
And in fact, there is a project currently called NGI Fidiversity

19:36.000 --> 19:46.000
where the EU is funding us to help create a new hosting stack that will be using Nix.

19:46.000 --> 19:49.000
And that has just started. We have the planning phase for this.

19:49.000 --> 19:52.000
So if you're interested, look it up.

19:52.000 --> 19:58.000
There will be this, or talk to that guy over there.

19:58.000 --> 20:05.000
That's a raving, but this will be probably a talk next year for them.

20:05.000 --> 20:11.000
And with that, I'm done, and I'm open for questions or tips

20:11.000 --> 20:14.000
because there are many people who are more expert than I am.

20:14.000 --> 20:16.000
Thank you.

20:20.000 --> 20:23.000
Do we have any questions?

20:26.000 --> 20:28.000
Hello. Thank you very much.

20:28.000 --> 20:35.000
I'm just wondering, you said that you are thinking your secrets to run directory,

20:35.000 --> 20:41.000
like why you are not using like, Agenix or SOPS for that,

20:41.000 --> 20:46.000
which will do it for you and you don't need to do it manually.

20:47.000 --> 20:52.000
So the reason we're not doing that is there were so many options which made me confused.

20:52.000 --> 20:59.000
And then also some of them were putting the keys encrypted, but nevertheless in the Nix store.

20:59.000 --> 21:03.000
And I just felt more comfortable doing it with Arsene.

21:03.000 --> 21:06.000
That's the whole explanation for it.

21:17.000 --> 21:24.000
Hi. You said something about Nix not being aware of storage locations.

21:24.000 --> 21:29.000
I didn't really understand that. Could you kind of explain that a bit more of what's...

21:29.000 --> 21:34.000
Yes, so Nix defines where all of your software is coming from and how to compile it,

21:34.000 --> 21:36.000
and it puts it all in the Nix store.

21:36.000 --> 21:39.000
But of course the software is interacting with data.

21:39.000 --> 21:47.000
And there's no sort of, you know, a type or a class which defines where the storage is.

21:47.000 --> 21:52.000
So you could say, I'm doing backup now. Just backup all of my systems.

21:52.000 --> 21:59.000
Or if you pass a directory into a service, that directory is an object which has been defined elsewhere

21:59.000 --> 22:01.000
as it needs to be in the file system.

22:01.000 --> 22:06.000
It needs to be... the file system needs to have, you know, a type of file system.

22:06.000 --> 22:10.000
It needs to be mounted. All of those things are something that you have to take care of.

22:10.000 --> 22:15.000
And because Nix is declarative, you know, once you hammer it down, it's fine.

22:15.000 --> 22:19.000
But it would be great if at compile time you get an error for that.

22:22.000 --> 22:24.000
Any other question?

22:25.000 --> 22:27.000
There's a question in the back.

22:37.000 --> 22:42.000
I just wanted to react to the storage location thing because it's interesting.

22:42.000 --> 22:47.000
So in NixOS there is a problem which is you want to declare things, you want to be declarative.

22:47.000 --> 22:51.000
But when you deploy a software, software often comes with automatic migrations.

22:51.000 --> 22:56.000
So they proceed to the operation on your state, on your files, at every new deployment.

22:56.000 --> 22:58.000
And this breaks the rollback system.

22:58.000 --> 23:02.000
Because if you rollback to previous version, you don't rollback the data.

23:02.000 --> 23:04.000
You just rollback the configuration.

23:04.000 --> 23:10.000
And what could be done here is that the NixOS modules themselves could learn about where the state is.

23:10.000 --> 23:12.000
What does it mean to back up an application?

23:12.000 --> 23:16.000
What is dependency in the PostgreSQL database or whatever.

23:16.000 --> 23:21.000
And it would start to provide a solution for the problem you're mentioning.

23:21.000 --> 23:30.000
Yes, exactly. Databases are a whole extra level of complexity and possible, you know, data corruption.

23:31.000 --> 23:34.000
I think we can take one last question.

23:37.000 --> 23:39.000
Hi, thanks for the talk.

23:39.000 --> 23:44.000
I might have missed it because I joined a little bit later.

23:44.000 --> 23:51.000
But in the configuration, do you have a way that you are happy to pass secrets?

23:51.000 --> 23:59.000
Yes, so the way we pass secrets is we have a top level JSON file.

23:59.000 --> 24:02.000
And there we declare all our secrets.

24:02.000 --> 24:05.000
So for root, it needs these secrets.

24:05.000 --> 24:09.000
So wire guard needs a private key, the mail needs a password.

24:09.000 --> 24:13.000
So these are files that have to be under slash run slash root.

24:13.000 --> 24:20.000
And when the Nix evaluates it, they are stored. Where do they get?

24:20.000 --> 24:23.000
So Nix doesn't do anything with that.

24:24.000 --> 24:30.000
It just writes in the configuration where that file is supposed to be.

24:30.000 --> 24:34.000
And then when the machine starts, some services will say, hey, I'm missing my password.

24:34.000 --> 24:40.000
So I copy in the password in there and then I restart that service.

24:40.000 --> 24:44.000
But that doesn't happen very often. We are fairly small office.

24:44.000 --> 24:46.000
So we don't have 100 machines.

24:46.000 --> 24:52.000
So automating it more seemed like complexity and overkill for our situation.

24:52.000 --> 24:56.000
Okay. Thanks.

24:56.000 --> 24:58.000
Thank you very much.

