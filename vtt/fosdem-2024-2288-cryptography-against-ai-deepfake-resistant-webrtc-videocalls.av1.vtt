WEBVTT

00:00.000 --> 00:07.000
All right.

00:07.000 --> 00:09.000
Hi, everyone.

00:09.000 --> 00:22.000
Today I wanted to talk about this subject that you can see on the screen.

00:22.000 --> 00:24.000
And yes, as you guessed, it's a click-back title.

00:24.000 --> 00:26.000
So sorry about that.

00:26.000 --> 00:30.000
But let me first talk to you about the origin story.

00:30.000 --> 00:37.000
So a few weeks, a few months ago, I had a chat with former coworkers,

00:37.000 --> 00:41.000
and we had to use JITC to talk.

00:41.000 --> 00:44.000
I don't know if any of you know JITC.

00:44.000 --> 00:45.000
Yeah, all right.

00:45.000 --> 00:50.000
So it's our WebRTC chat, and there's been an update a few weeks ago.

00:50.000 --> 00:53.000
I don't know the exact time frame because I'm not a JITC contributor,

00:53.000 --> 00:56.000
but basically you had to log on to create a room.

00:56.000 --> 01:01.000
And then I thought, yeah, but how do I know that the people that create the room

01:01.000 --> 01:04.000
are actually the people that pretend to be?

01:04.000 --> 01:07.000
Since, you know, right now there's a lot of AI going on,

01:07.000 --> 01:10.000
and you know, you cannot trust people on the Internet.

01:10.000 --> 01:14.000
And as you know, just our neighbor in the next room,

01:14.000 --> 01:19.000
so the RTC room are talking about Skynet and AI and all of this shit.

01:19.000 --> 01:22.000
So, I mean, we have the right to be afraid, right?

01:22.000 --> 01:31.000
So, I thought, okay, how easy would it be to create my own chat platform?

01:31.000 --> 01:37.000
So, I would want to have something that has OJO as well as video,

01:37.000 --> 01:40.000
and I don't want to have huge server requirements

01:40.000 --> 01:43.000
because I don't want to spend money on it.

01:43.000 --> 01:46.000
I also don't want to store, let's say, username and password

01:46.000 --> 01:48.000
because, I mean, it's 2024.

01:48.000 --> 01:50.000
Who uses password?

01:51.000 --> 01:52.000
I'm all right.

01:52.000 --> 01:58.000
But we still want to have a way to, you know, identify the people.

01:58.000 --> 02:00.000
So, what can we do?

02:01.000 --> 02:04.000
Just, yeah, just a few, yeah.

02:04.000 --> 02:05.000
Just a quick recap.

02:05.000 --> 02:07.000
I know the RTC room is next,

02:07.000 --> 02:11.000
so if you're not familiar with it, just go make a tour.

02:11.000 --> 02:15.000
So, I want to explain the whole principle of real-time communication,

02:15.000 --> 02:19.000
but just so you know, I take Dwayne Johnson as a reference.

02:19.000 --> 02:21.000
So, this would be our signaling server.

02:21.000 --> 02:24.000
So, what he does, he brings people together.

02:24.000 --> 02:28.000
So, you have all these people that are joined to Dwayne Johnson.

02:28.000 --> 02:31.000
So, you can, well, it's a central server.

02:31.000 --> 02:35.000
And what he does is then he stands back,

02:35.000 --> 02:38.000
and then the people just are connected together.

02:38.000 --> 02:40.000
So, you know, the first one is connected to these three others,

02:40.000 --> 02:43.000
the other one to the others, and like so.

02:43.000 --> 02:45.000
And you know you can trust Dwayne Johnson.

02:45.000 --> 02:48.000
Well, I mean the signal server because he has a TLS certificate.

02:48.000 --> 02:52.000
So, it's nice, but can you trust the peers?

02:52.000 --> 02:54.000
I mean, you don't know who they are.

02:54.000 --> 02:56.000
How does peer work?

02:56.000 --> 03:01.000
It's actually a bunch of information about the people.

03:01.000 --> 03:06.000
So, actually you would generate an object called an RTC peer connection object,

03:06.000 --> 03:09.000
which will contain information about your connection

03:09.000 --> 03:12.000
that you will stream to the other peers.

03:12.000 --> 03:16.000
So, yeah, can we trust the peers?

03:16.000 --> 03:23.000
And I thought, yeah, let's use a technique that is as old as computer science.

03:23.000 --> 03:27.000
Let's just use cryptographic keys because that's, I mean, it's easy.

03:27.000 --> 03:37.000
And for that, I decided to use the subtle crypto API,

03:37.000 --> 03:40.000
which is available both on Node.js and in the web.

03:40.000 --> 03:42.000
So, it's really great.

03:43.000 --> 03:46.000
And why did I choose keys?

03:46.000 --> 03:51.000
Because digital signatures are everywhere and pretty much foolproof.

03:51.000 --> 03:55.000
And right now we have a lot of ways to interact with keys.

03:55.000 --> 03:59.000
So, I don't know if you guys know about Fido WebOtten.

03:59.000 --> 04:02.000
So, basically like you have like those UB keys,

04:02.000 --> 04:05.000
which are external devices that you can store keys on.

04:05.000 --> 04:08.000
You also have like on your smartphone,

04:08.000 --> 04:11.000
you can just choose to use your fingerprint

04:11.000 --> 04:15.000
maybe on iPhones you can use your face recognition, I don't know.

04:15.000 --> 04:17.000
But yeah, basically you can use different stuff.

04:17.000 --> 04:22.000
You have like the cryptocurrency wallets that are basically a set of key.

04:22.000 --> 04:24.000
So, that's nice.

04:24.000 --> 04:28.000
Or if you don't have an ECDSA key per right now,

04:28.000 --> 04:31.000
you can just use a Kudo SSH key gen.

04:31.000 --> 04:34.000
I mean, it's...

04:34.000 --> 04:37.000
And yeah, for those of you who are unfamiliar with cryptography,

04:37.000 --> 04:40.000
where have you been, but let's just say that.

04:41.000 --> 04:43.000
You have basically two keys.

04:43.000 --> 04:45.000
So, you have your private key, you have your public key,

04:45.000 --> 04:47.000
you should never share your private key with anyone,

04:47.000 --> 04:50.000
even with your mother on her deathbed.

04:50.000 --> 04:52.000
It's for you, it's yours, you don't share it.

04:52.000 --> 04:56.000
And there is your public key that you will share with everybody.

04:56.000 --> 05:02.000
And so, basically what we're going to do is that we're going to send a message

05:02.000 --> 05:08.000
in ClearTech, so the end goal here is not to change the message,

05:08.000 --> 05:10.000
but to keep it as clear as possible.

05:10.000 --> 05:12.000
And to add what we call a signature.

05:12.000 --> 05:15.000
A signature is simply something that your private key will generate,

05:15.000 --> 05:17.000
so your private key is private.

05:17.000 --> 05:19.000
And it remains private.

05:19.000 --> 05:23.000
But you include a signature that is generated from the message

05:23.000 --> 05:26.000
and added to the message.

05:26.000 --> 05:28.000
And then you add your public key,

05:28.000 --> 05:35.000
which would basically will allow anyone to decrypt the signature

05:35.000 --> 05:39.000
and to say that indeed you are the one owning the private key

05:39.000 --> 05:41.000
and that message is genuine.

05:41.000 --> 05:44.000
There's a lot of math stuff behind that.

05:44.000 --> 05:47.000
Well, we are not going into the details,

05:47.000 --> 05:52.000
but it's basically prime numbers and all this kind of stuff.

05:52.000 --> 06:00.000
Okay, so as I told you, we're going to use the Sodel Crypto API,

06:00.000 --> 06:06.000
which is available both on the browser and on Node.js.

06:06.000 --> 06:08.000
And beyond signing and verifying message,

06:08.000 --> 06:11.000
you can even generate and derive new keys.

06:11.000 --> 06:16.000
So even if you don't have all the keys we talked about earlier,

06:16.000 --> 06:20.000
you can still generate keys in your browser or in Node.js,

06:20.000 --> 06:25.000
and that could be useful for things that we'll talk afterwards.

06:25.000 --> 06:27.000
And that's what this talk is all about.

06:28.000 --> 06:30.000
Okay, so here comes the plan.

06:30.000 --> 06:35.000
So basically what we're going to do is that the system we're going to create,

06:35.000 --> 06:39.000
we will create a server, so the signal-signal server I told you about,

06:39.000 --> 06:44.000
and what it will do, so the first client we connect to the server,

06:44.000 --> 06:48.000
we will call him the host, so he hosts the room.

06:48.000 --> 06:53.000
He creates a room with a unique ID, and that's done using WebSockets.

06:53.000 --> 06:55.000
I'm sure you're all familiar with WebSockets.

06:55.000 --> 06:56.000
You can talk afterwards.

06:56.000 --> 06:57.000
No problem.

06:57.000 --> 06:59.000
It's pretty basic stuff as well.

06:59.000 --> 07:05.000
The host can send a special type of message to the room

07:05.000 --> 07:10.000
to send the public keys that he wants to accept in the room.

07:10.000 --> 07:13.000
So basically I would create a room, say I would create a room for my party,

07:13.000 --> 07:16.000
and I will add all the public keys of the people that I know,

07:16.000 --> 07:19.000
and then I will send you the link to the room,

07:19.000 --> 07:21.000
and if you want to join the room,

07:21.000 --> 07:26.000
I will ask you to sign a message to prove your identity.

07:26.000 --> 07:31.000
And basically since now you can use your phone to confirm your identity,

07:31.000 --> 07:33.000
for instance with your footprint,

07:33.000 --> 07:41.000
that's pretty much how I can assume your nut and AI trying to ruin my birthday party or whatever,

07:41.000 --> 07:42.000
so it's nice.

07:42.000 --> 07:46.000
So we do that for each peer, and it's okay.

07:46.000 --> 07:49.000
Just a quick security disclaimer though.

07:50.000 --> 07:55.000
When you land on the Sodor Crypto documentation,

07:55.000 --> 07:57.000
you get that big warning.

07:57.000 --> 08:02.000
So yeah, it's a long text, but basically it can be summed up as

08:02.000 --> 08:05.000
this project we're building is for fun.

08:05.000 --> 08:09.000
There's a lot of security considerations to take into account,

08:09.000 --> 08:16.000
and basically that is how you store key and how you should manage them.

08:16.000 --> 08:23.000
And as Adi Sharmeer says, Adi Sharmeer is one of the guys that created the RSA algorithm.

08:23.000 --> 08:32.000
Sure, it's really hard to brute force cryptography and to try to guess a ciphertext

08:32.000 --> 08:36.000
by just brute forcing, but usually the mistakes come from the system

08:36.000 --> 08:38.000
and not from the algorithm.

08:38.000 --> 08:42.000
So let's dive into the code.

08:42.000 --> 08:45.000
So basically what we're going to do.

08:45.000 --> 08:50.000
Here we're going to import a key from our browser.

08:50.000 --> 08:58.000
So we're going to use the P key, the word that's written there.

08:58.000 --> 09:07.000
To as an input key, we could use, as I said, a crypto wallet, a FIDO device or whatever,

09:07.000 --> 09:11.000
but here let's use something that should be generated from the terminal.

09:12.000 --> 09:16.000
We're using, so it's an elliptic curve signature, so it's using,

09:16.000 --> 09:19.000
once again, it's an algorithm that won't go into the details,

09:19.000 --> 09:22.000
but it's just a way to generate signature.

09:22.000 --> 09:27.000
And we specify that we want to use this key for signing because you can also encrypt,

09:27.000 --> 09:31.000
you can also derive keys that's other use you can have.

09:31.000 --> 09:34.000
Once again, we can talk about that after the presentation.

09:34.000 --> 09:40.000
There's a lot of stuff to do, but yeah, that's basically the stuff.

09:40.000 --> 09:46.000
And I'm also going to give you an overview of the idea in check I was telling you about.

09:46.000 --> 09:52.000
So basically when you connect, the server will ask you to sign this stuff,

09:52.000 --> 09:57.000
which is a JSON message, so well, this is TypeScript, whatever.

09:57.000 --> 10:00.000
So this is the payload we're getting from the server.

10:00.000 --> 10:03.000
I'm also adding a property which is called issued at,

10:03.000 --> 10:08.000
so that ensures that you have to sign the message within a certain time frame,

10:08.000 --> 10:16.000
otherwise you could have what we call replay attacks where people just trying to send a signature until it works.

10:16.000 --> 10:22.000
So this allows us to mitigate some effects.

10:22.000 --> 10:25.000
And so that is what the server hands you over,

10:25.000 --> 10:29.000
and this is what you would send back, so once it's signed,

10:29.000 --> 10:34.000
so you send the payload that you just saw alongside signature

10:34.000 --> 10:37.000
and your public key to verify the signature.

10:38.000 --> 10:42.000
Okay, so this is how we sign the payload.

10:42.000 --> 10:47.000
So once again, it's a big bunch of code, but it's actually quite easy to understand.

10:47.000 --> 10:48.000
So we have the key.

10:48.000 --> 10:49.000
We have the payload.

10:49.000 --> 10:56.000
The key is strictly, so we have the type definition for the script interface.

10:56.000 --> 11:00.000
So I heard the TypeScript question in the audience,

11:00.000 --> 11:03.000
so don't worry, it's fine.

11:03.000 --> 11:05.000
All the interfaces are defined.

11:05.000 --> 11:08.000
So we have the key and we have the payload.

11:08.000 --> 11:11.000
The interface I just showed you,

11:11.000 --> 11:15.000
and this function will return signed payload.

11:15.000 --> 11:21.000
So basically what we do is that we take the payload,

11:21.000 --> 11:24.000
which is a JSON object, you will stringify it,

11:24.000 --> 11:30.000
and then convert it to bytes, because everything happens in buffer and bytes.

11:30.000 --> 11:33.000
And then we will just sign it, and you know it's a simple function,

11:33.000 --> 11:35.000
just crypto.sign.

11:35.000 --> 11:38.000
We just choose the algorithm once again,

11:38.000 --> 11:40.000
ECDSA, so elliptic curve.

11:40.000 --> 11:48.000
We want to produce a 265.56 hash.

11:48.000 --> 11:51.000
We specify the key that we want to use,

11:51.000 --> 11:54.000
and we specify the buffer we want to sign.

11:54.000 --> 11:55.000
So pretty standard stuff.

11:55.000 --> 11:58.000
And we return that signed payload.

11:58.000 --> 12:02.000
So as you can see, it's really, really, really simple.

12:02.000 --> 12:06.000
I was buffered at how easy it was.

12:06.000 --> 12:09.000
And on the server side, it's pretty much the same thing.

12:09.000 --> 12:11.000
So you want to verify the payload.

12:11.000 --> 12:15.000
So pretty much the same thing as I told you earlier.

12:15.000 --> 12:19.000
The function looks pretty much the same.

12:19.000 --> 12:27.000
So we first need to transform the payload into a JSON object,

12:27.000 --> 12:29.000
but then once again we import the key.

12:30.000 --> 12:33.000
Once again, we use the JSON Web Key Format.

12:33.000 --> 12:36.000
You may be aware of the JSON Web Tokens.

12:36.000 --> 12:40.000
It's pretty much the same spec, but there is just a key.

12:40.000 --> 12:47.000
So it's a key that's been serialized as JSON.

12:47.000 --> 12:49.000
False mean we don't want to export it,

12:49.000 --> 12:51.000
and verify means it's a public key,

12:51.000 --> 12:53.000
and it's used to verify signature.

12:53.000 --> 12:56.000
Once again, we generate a signable variable,

12:56.000 --> 13:02.000
and it basically bytes to pass to the verify function.

13:02.000 --> 13:05.000
And then once again, the algorithm, the key, the signature.

13:05.000 --> 13:10.000
See, it's very, very easy, and it works.

13:10.000 --> 13:14.000
So all right, so I'm not going to give you the whole code

13:14.000 --> 13:18.000
of the single server because, well, it's not hard,

13:18.000 --> 13:21.000
not hard at all, but it's just switch statements.

13:21.000 --> 13:24.000
And I don't think it's really interesting to talk about here.

13:24.000 --> 13:27.000
Basically what we're going to do is that we have two types of,

13:27.000 --> 13:32.000
we have several types of message we send to the socket.

13:32.000 --> 13:35.000
I told you about the one that the host sent at the beginning,

13:35.000 --> 13:39.000
so just to white list a bunch of public keys.

13:39.000 --> 13:42.000
And then here I'm going to show you two.

13:42.000 --> 13:45.000
The first one is the one I call request.

13:45.000 --> 13:50.000
So when a new guest want to come into my room,

13:51.000 --> 13:54.000
that's one of the functions,

13:54.000 --> 13:58.000
and the other one is the out, so that's the one we just saw.

13:58.000 --> 14:01.000
So it's basically verifying the signature.

14:01.000 --> 14:05.000
So yeah, when I receive an off message,

14:05.000 --> 14:07.000
I will call the connect peer function.

14:07.000 --> 14:10.000
So basically what it does, simple as that,

14:10.000 --> 14:13.000
first it looks if the public key is valid for the room ID.

14:13.000 --> 14:16.000
So if I indeed white listed that public key.

14:17.000 --> 14:20.000
The second one is the issue that timestamp,

14:20.000 --> 14:25.000
which looks if that timestamp is valid.

14:25.000 --> 14:30.000
So for instance, if my server sent that message two minutes ago,

14:30.000 --> 14:35.000
I deemed that it's still an acceptable time to have,

14:35.000 --> 14:37.000
to receive the payload back.

14:37.000 --> 14:39.000
If it dates back to one hour,

14:39.000 --> 14:42.000
I just teach the message because that's probably a curve

14:42.000 --> 14:44.000
trying to ruin my birthday party.

14:44.000 --> 14:50.000
And the last one is just the signature verification

14:50.000 --> 14:52.000
that we just talked about.

14:52.000 --> 14:56.000
And if it's all good, and that's how WebRTC works,

14:56.000 --> 15:00.000
we will give the peer information to all the other peers

15:00.000 --> 15:03.000
so that they can chat together.

15:03.000 --> 15:06.000
One thing that I didn't mention, but it's important to know,

15:06.000 --> 15:09.000
is once you're using WebRTC,

15:09.000 --> 15:14.000
everything is, every information is from peer to peer.

15:14.000 --> 15:17.000
So the server gets back and there's no information

15:17.000 --> 15:20.000
that are sent to the server, so it's really important to know.

15:20.000 --> 15:23.000
And that's actually quite a cool design.

15:23.000 --> 15:28.000
Last thing I want to say is that I didn't get into the details

15:28.000 --> 15:32.000
and specific of WebRTC, but for the sake of simplicity,

15:32.000 --> 15:35.000
I recommend to use the simple peer library.

15:35.000 --> 15:38.000
I'm not paid by this guy, but this guy does awesome stuff.

15:38.000 --> 15:42.000
So use the library.

15:42.000 --> 15:45.000
And I just want to go a bit deeper.

15:45.000 --> 15:48.000
So I talked about video and audio chat,

15:48.000 --> 15:52.000
but what more can we do?

15:52.000 --> 15:55.000
So since we have, I guess this is your call

15:55.000 --> 15:58.000
to go further down the peer to peer rabbit hole.

15:58.000 --> 16:02.000
So let's use that sort of crypto stuff.

16:02.000 --> 16:03.000
You can do a lot of stuff.

16:03.000 --> 16:05.000
WebRTC is really great.

16:05.000 --> 16:07.000
You can do a lot of really great stuff.

16:07.000 --> 16:12.000
And I want to finish by doing a quick shout out section.

16:12.000 --> 16:15.000
So all these people already trust the process.

16:15.000 --> 16:18.000
So I'm going to give you a quick overview of some project

16:18.000 --> 16:22.000
that I worked with far or less far.

16:22.000 --> 16:24.000
And yeah.

16:24.000 --> 16:28.000
So first of all, I want to shout out about WebTorrent.

16:28.000 --> 16:30.000
Anybody know about WebTorrent?

16:30.000 --> 16:31.000
Nice.

16:31.000 --> 16:34.000
So it's a Torrent client that's built in the browser.

16:34.000 --> 16:39.000
It uses WebRTC data channels to stream data.

16:39.000 --> 16:40.000
It's really nice.

16:40.000 --> 16:42.000
It means that you don't have to depend on a central server

16:42.000 --> 16:45.000
to actually stream data.

16:45.000 --> 16:49.000
IPFS, anybody knows about IPFS?

16:49.000 --> 16:50.000
Yeah.

16:50.000 --> 16:52.000
So great guys also.

16:52.000 --> 16:55.000
They were there last year at Fosdame.

16:55.000 --> 16:57.000
I don't think they're here this year,

16:57.000 --> 17:01.000
but it's basically a protocol that it tends to not replace HTTP,

17:02.000 --> 17:05.000
but be side by side with HTTP.

17:05.000 --> 17:09.000
Basically it works by creating a unique hash for files.

17:09.000 --> 17:15.000
So they're fingerprint files with just a shaft fingerprint.

17:15.000 --> 17:18.000
And basically if you know the hash of the file,

17:18.000 --> 17:21.000
you can just request the file and it will flow a DHT.

17:21.000 --> 17:23.000
It's a really complex system.

17:23.000 --> 17:24.000
It's really interesting.

17:24.000 --> 17:30.000
You can retrieve that file that is hosted somewhere on an IPFS node.

17:30.000 --> 17:35.000
And IPFS nodes are connected to each other using also WebSocket

17:35.000 --> 17:36.000
and WebRTC.

17:36.000 --> 17:38.000
So it's a really, really interesting project.

17:38.000 --> 17:39.000
You should have.

17:39.000 --> 17:40.000
It's very nice.

17:40.000 --> 17:42.000
Some of us are here, but only a few of us.

17:42.000 --> 17:43.000
IPFS?

17:43.000 --> 17:44.000
Yeah.

17:44.000 --> 17:45.000
Oh, nice.

17:45.000 --> 17:46.000
You're so great.

17:46.000 --> 17:47.000
I love you.

17:47.000 --> 17:49.000
And if you want to know more about IPFS,

17:49.000 --> 17:52.000
I'm not the one to ask, basically, as those guys.

17:52.000 --> 17:56.000
And lastly, that's the project I've also worked on last year.

17:56.000 --> 18:02.000
It's basically a project that allows computation on top of IPFS.

18:02.000 --> 18:04.000
Also a great project.

18:04.000 --> 18:08.000
I think they are trying to hire a front-end developer.

18:08.000 --> 18:14.000
So if you like stuff with crypto and just talk to these guys.

18:14.000 --> 18:15.000
All right.

18:15.000 --> 18:18.000
I don't know how much time we still have left,

18:18.000 --> 18:20.000
but I made this great slide for questions.

18:20.000 --> 18:23.000
So does anybody have a question?

18:23.000 --> 18:25.000
Any questions?

18:25.000 --> 18:32.000
A few minutes for questions.

18:32.000 --> 18:33.000
All right.

18:33.000 --> 18:35.000
Or else I have that slide with my credentials.

18:35.000 --> 18:36.000
So this is my GitHub.

18:36.000 --> 18:37.000
This is my telegram.

18:37.000 --> 18:38.000
She wanted to reach me.

18:38.000 --> 18:41.000
And this is my public key if you want to.

18:41.000 --> 18:42.000
Thank you.

