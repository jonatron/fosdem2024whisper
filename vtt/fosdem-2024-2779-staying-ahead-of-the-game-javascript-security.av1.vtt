WEBVTT

00:00.000 --> 00:07.000
I think we can start.

00:07.000 --> 00:21.000
So our next speaker is Dheeraj, who is going to talk about JavaScript security.

00:21.000 --> 00:27.000
You should care about that subject, because it's an important one.

00:27.000 --> 00:37.000
And Dheeraj, when he's not coding, he's thinking about food or drinking coffee.

00:37.000 --> 00:47.000
So I guess, as all of us developers, big round of applause for Dheeraj.

00:47.000 --> 00:51.000
Hello everyone. My name is Dheeraj, and I'm very excited to be here.

00:51.000 --> 00:55.000
And thank you all the great organizers for having me.

00:55.000 --> 00:59.000
This is my first time at Fosdame, so I'm very excited.

00:59.000 --> 01:03.000
And today I'll be talking about JavaScript security.

01:03.000 --> 01:09.000
Before we get started, just with a show of hands, how many of you are passionate about security,

01:09.000 --> 01:13.000
or think of security before building applications?

01:13.000 --> 01:16.000
There we go. Yeah. Oh, all right.

01:16.000 --> 01:19.000
A lot of fun. That's great.

01:19.000 --> 01:24.000
I'm sure this is a very important topic for all of us,

01:24.000 --> 01:30.000
and I hope to share some of my learnings.

01:30.000 --> 01:32.000
Just a little introduction about me.

01:32.000 --> 01:35.000
I work with the amazing front-end team at GitLab.

01:35.000 --> 01:38.000
It's been almost more than four years.

01:38.000 --> 01:45.000
And I also like playing table tennis, and I can switch my hand in between.

01:45.000 --> 01:49.000
Just to have fun and winning the game.

01:49.000 --> 01:55.000
And I like to find security bugs with all the applications I use,

01:55.000 --> 02:00.000
just to poke around sometime for fun, sometime for swag, for swags.

02:00.000 --> 02:03.000
Who doesn't like free swags or goodies?

02:03.000 --> 02:09.000
So I've reported some of the companies where I've reported bugs.

02:09.000 --> 02:11.000
I've been doing it for a long time.

02:11.000 --> 02:16.000
This mere alert is something which I'm very much excited about,

02:16.000 --> 02:23.000
and we'll be talking about it in the next slides.

02:23.000 --> 02:27.000
To give you an idea today, Agenda is very simple.

02:27.000 --> 02:32.000
We're going to be talking about XSX, CSP, TEMO,

02:32.000 --> 02:36.000
and some of the initiatives we have been taking at GitLab

02:36.000 --> 02:38.000
to improve our security posture,

02:38.000 --> 02:44.000
and some of the best practices we can follow while building any application.

02:44.000 --> 02:49.000
And as time permits, we will have some questions and answers.

02:49.000 --> 02:52.000
First and foremost, security is important.

02:52.000 --> 02:57.000
Everyone knows security is like an elephant in the room when everyone agrees to it,

02:57.000 --> 03:01.000
but only a few take it very seriously.

03:01.000 --> 03:07.000
But like most of the companies do not know that if their app is compromised,

03:07.000 --> 03:12.000
they'll lose the trust from the users,

03:12.000 --> 03:18.000
and they'll not be able to get too much customers.

03:18.000 --> 03:24.000
So there's a famous saying that there are some companies who have been hacked,

03:24.000 --> 03:28.000
but some of them do not even know that they have been hacked yet.

03:28.000 --> 03:34.000
It's like speeding on a highway where first you get used,

03:34.000 --> 03:38.000
drive incredibly fast, and then you get fined,

03:38.000 --> 03:43.000
and then you start driving a bit slower.

03:43.000 --> 03:51.000
And our primary perspective about security is always about...

03:51.000 --> 03:53.000
The security is always at the back end,

03:53.000 --> 04:01.000
but in this talk, I'll be giving a lot of insights on the front-end security.

04:01.000 --> 04:04.000
There's a little story time.

04:04.000 --> 04:10.000
There have been many instances reported here and there about security bugs,

04:10.000 --> 04:17.000
where one of the popular ones was where somebody was stealing your McDonald's website passwords,

04:17.000 --> 04:19.000
how they were able to...

04:19.000 --> 04:26.000
was just using a reflected XSX, using a sandbox bypass for AngularJS,

04:26.000 --> 04:34.000
and as soon as a user visits McDonald's sites and they type their password,

04:34.000 --> 04:38.000
they were storing the password in the client side in local storage,

04:38.000 --> 04:42.000
and when you visit a link sent by an attacker,

04:42.000 --> 04:49.000
they would be able to use the passwords being stored on the local storage

04:49.000 --> 04:52.000
and send it over to the attacker website.

04:52.000 --> 05:01.000
And another instance where popular WordPress has been hacked a number of times,

05:01.000 --> 05:07.000
where there have been instances where a plugin has a malicious code which it uses a database,

05:07.000 --> 05:11.000
and once it is rendered on the UI with a vulnerable code,

05:11.000 --> 05:15.000
and if somebody was able to log in using admin,

05:15.000 --> 05:22.000
would be able to send a request and create fake accounts.

05:22.000 --> 05:29.000
So it's just like installing a keylogger using just a code.

05:29.000 --> 05:35.000
You might be familiar with this particular application, chatGPT.

05:35.000 --> 05:42.000
Even in that, a known researcher was able to just pass this code as a markdown link

05:42.000 --> 05:49.000
with a JavaScript protocol and it was being rendered and it was quickly fixed.

05:49.000 --> 05:55.000
So we have been talking about XSX, so it's called cross-site scripting.

05:55.000 --> 06:03.000
It's so complex that I have been knowing somebody who has been doing PSD in this particular topic,

06:03.000 --> 06:10.000
and to know more about it, it's very simple when data being supplied to the application

06:10.000 --> 06:16.000
becomes part of your code. In this example, like an image tag with a source which is invalid,

06:16.000 --> 06:22.000
and an honor attribute will help you to add some JavaScript to it.

06:22.000 --> 06:27.000
And the screenshot has an example where I reported about to Uber,

06:27.000 --> 06:31.000
where I just add this particular code to my name,

06:31.000 --> 06:36.000
and when admin sees that this name is malicious, they try to delete it,

06:36.000 --> 06:46.000
and when they delete it, that pop-up will appear, and that was reported using their HackerOne program long back.

06:46.000 --> 06:52.000
So it's more than just an alert pop-up.

06:52.000 --> 06:56.000
It's just a try, maybe.

06:56.000 --> 06:58.000
You can write it through the document.

06:58.000 --> 07:00.000
Yeah, exactly, right.

07:00.000 --> 07:07.000
So the problem here is with the document to write, it's just taking the URL from the query parameters,

07:07.000 --> 07:11.000
and without sanitizing or escaping, it's just putting it in the DOM,

07:11.000 --> 07:15.000
and which can actually lead to NexusX.

07:15.000 --> 07:22.000
So how do we fix or how do we protect this?

07:22.000 --> 07:29.000
So we have to analyze, inspect all the places where DOM elements are created,

07:29.000 --> 07:34.000
and there's a famous attribute called innerSTML function,

07:34.000 --> 07:38.000
which should be actually avoided at all,

07:38.000 --> 07:45.000
and to prevent these bugs, we can also have a linter rule to be placed

07:45.000 --> 07:50.000
so that these sort of vulnerable functions are not being used in the code base,

07:50.000 --> 07:56.000
and like famously, we should just do input sanitization or output encoding.

07:56.000 --> 07:59.000
We'll be talking more about it.

07:59.000 --> 08:04.000
Then we have on the client side, we can have multiple flags.

08:04.000 --> 08:09.000
We can help you secure the cookies.

08:09.000 --> 08:13.000
So there's two flags, which I would like to mention.

08:13.000 --> 08:19.000
One is secure, which will help you make the cookies, which are sensitive in nature,

08:19.000 --> 08:23.000
are always transmitted over STTPs protocol,

08:23.000 --> 08:26.000
and there's something called STTP only.

08:26.000 --> 08:32.000
It doesn't even know what its STTP only flag does.

08:32.000 --> 08:34.000
It cannot be accessed by JavaScript.

08:34.000 --> 08:35.000
That's correct, yeah.

08:35.000 --> 08:42.000
So this is something you might see for all the session cookies we have on all the applications.

08:42.000 --> 08:47.000
This will make sure that even if an NexusX bug happens,

08:47.000 --> 08:51.000
it will not be able to read the session cookies data.

08:51.000 --> 08:55.000
Or the cookie which has the STTP only flag data.

08:55.000 --> 09:00.000
At this point, I would like to show a demo.

09:00.000 --> 09:03.000
Maybe I can just show a demo rather than a screenshot.

09:03.000 --> 09:08.000
I thought that would be fun.

09:08.000 --> 09:18.000
So this is a vulnerable application,

09:18.000 --> 09:20.000
which is a secure site.

09:20.000 --> 09:26.000
And if you try to do like a hello world,

09:26.000 --> 09:33.000
you can see that it's a hello false name being displayed here at the bottom.

09:33.000 --> 09:43.000
And if you try to enter any HTML to it,

09:43.000 --> 09:46.000
let's see if it does render or not.

09:46.000 --> 09:51.000
And with just an underlying tag, there's underlying being rendered.

09:51.000 --> 09:56.000
So that gives a hint that it might be rendering HTML.

09:56.000 --> 10:01.000
So how about we just add the code which we have been seeing like as

10:01.000 --> 10:12.000
a maze tag with invalid attribute, invalid location, and the honor attribute.

10:12.000 --> 10:21.000
So it just adds a prompt or an alert, but this is again not really harmful.

10:21.000 --> 10:31.000
So we can try to read something like, like this is the website's name.

10:31.000 --> 10:44.000
And we can also try to have local storage data.

10:44.000 --> 10:45.000
Oh, here we go.

10:45.000 --> 10:49.000
So it's like you can read the local storage data which have been

10:49.000 --> 10:51.000
stored on this particular website.

10:51.000 --> 11:02.000
So to talk more about the code base, which is making this vulnerable.

11:02.000 --> 11:06.000
So in this, this is react application where you can just see that there's

11:06.000 --> 11:09.000
a piece of code called dangerously set in an HTML.

11:09.000 --> 11:14.000
It's a variant of, it's a variant of inner HTML for react.

11:14.000 --> 11:17.000
And it can be harmful.

11:17.000 --> 11:20.000
So actually it's not even needed here.

11:20.000 --> 11:23.000
So, yeah, please go ahead.

11:23.000 --> 11:29.000
Oh, sir.

11:29.000 --> 11:31.000
Yeah, sorry about that.

11:31.000 --> 11:36.000
So, so that, that was the code which was being vulnerable, which is being used

11:36.000 --> 11:38.000
to render the data.

11:38.000 --> 11:40.000
We put it in the search bar.

11:40.000 --> 11:44.000
But if you want to fix it, we could just, you know, remove this and just

11:44.000 --> 11:49.000
render it directly because react view such frameworks does escaping by default.

11:49.000 --> 11:52.000
And there is no need to render HTML.

11:52.000 --> 11:55.000
And if you just try to save it and refresh it.

11:55.000 --> 12:06.000
So it just tried to render exactly what you write in and not render the HTML we have.

12:06.000 --> 12:07.000
Right.

12:07.000 --> 12:11.000
So going back to the slides.

12:11.000 --> 12:13.000
That was backup.

12:13.000 --> 12:18.000
Like if the demo doesn't work, I can show some slides.

12:19.000 --> 12:27.000
And yeah, so like I mentioned, it's the dangerously set in an HTML should,

12:27.000 --> 12:29.000
can be avoided here.

12:29.000 --> 12:30.000
Very possible.

12:30.000 --> 12:35.000
And if it's not possible to avoid it, what we can do is like add some sanitization to it.

12:35.000 --> 12:42.000
So tool of rule of thumb for, for, for preventing such issues like first of all,

12:42.000 --> 12:47.000
never trust any user input you have in your application, wherever the user input is

12:47.000 --> 12:53.000
coming through it and avoid such inner HTML variants like dangerously set in an HTML,

12:53.000 --> 13:01.000
V HTML for Vue.js and always sanitize your input and escape it wherever possible.

13:01.000 --> 13:06.000
Though the framework like react view will do it for your automatically.

13:06.000 --> 13:11.000
And there's also things like links, links must be secure by default.

13:11.000 --> 13:16.000
There's not something browser does it and not even the frameworks does it for you.

13:16.000 --> 13:29.000
And then the ESLint or similar linters can be used to prevent that these functions cannot be used in the code base.

13:29.000 --> 13:33.000
Then the next we'll be talking about content security policy.

13:33.000 --> 13:39.000
So it's like an advance or defense in layer, defense in depth layer mechanism where,

13:39.000 --> 13:44.000
which allows you to restrict your website to load certain resources.

13:44.000 --> 13:54.000
And you might have seen this error in the console when, whenever a malicious content is being loaded,

13:54.000 --> 13:57.000
it will prevent and throw this error.

13:57.000 --> 14:07.000
I can, I can just show how content security policy can fix this particular issue.

14:07.000 --> 14:12.000
Let's, let's go back to the code base and just,

14:12.000 --> 14:15.000
so this is the vulnerable code.

14:15.000 --> 14:30.000
And, and if I go to his index dot HTML and try to add this meta tag and just write that we only want to allow certain script from the self self means the same origin.

14:30.000 --> 14:36.000
And if we, if you try to refresh it.

14:36.000 --> 14:38.000
Maybe I did not save it.

14:38.000 --> 14:45.000
Yeah, so, so if we go to the console and I zoom it, and if you can see that the,

14:45.000 --> 14:49.000
it was being refused to execute that in line event.

14:49.000 --> 14:58.000
And that's because we have added to, to allow only the scripts from this, from the same origin.

14:58.000 --> 15:03.000
That was an example to showcase that.

15:03.000 --> 15:11.000
So content security policies is really very defensive in depth measure by browser and can be applied for all the web applications.

15:11.000 --> 15:16.000
It can help with cross-scripting attack like what we show, what I showed in the example.

15:16.000 --> 15:31.000
And also being helpful with secure form submissions that it should not let your form being submitted to any STTP websites or to prevent MITM attacks or STTP as migrations or mitigating vulnerabilities like click jacking.

15:31.000 --> 15:35.000
This is how the CSP added can be added like what I shown.

15:35.000 --> 15:39.000
This is a particular code for Node.js helmet framework.

15:39.000 --> 15:42.000
And what I shown was the meta tag.

15:42.000 --> 15:46.000
So it could be done with any of it.

15:46.000 --> 15:54.000
Like another example where content security policy where it can be prevented.

15:54.000 --> 16:07.000
If there's example that it only allows resources from example.com and if somebody tried to request malicious.com website to load some JS, it will be prevented.

16:07.000 --> 16:13.000
And other security headers which can be helpful and can make a note of its X frame options.

16:13.000 --> 16:17.000
It is also helpful to prevent click jacking vulnerabilities.

16:17.000 --> 16:26.000
And HSTS is strict transport security for making sure your website is always accessible over STTPS.

16:26.000 --> 16:30.000
Then we have access, X protection, X content type options as well.

16:30.000 --> 16:40.000
These are generally being part of all the frameworks you might be using the modern browser frameworks are always having secure by default having these headers.

16:40.000 --> 16:49.000
But if you're not using any framework and going for a vanilla thing, then make sure to have it them.

16:49.000 --> 16:59.000
And now the interesting part like I would like to share some insight what we have been doing at GitLab and how we have been improving our security posture.

16:59.000 --> 17:06.000
So first and foremost, it's everything we try to do make as much as public.

17:06.000 --> 17:18.000
So that was something we decided a couple of few years back that we should work out upon improving our front end security posture and taken note of multiple steps.

17:18.000 --> 17:30.000
We can take it forward and firstly and foremost what we did was we have VSTML very similar to dangerously set in an STML in React.

17:30.000 --> 17:41.000
We built a safer version of it, which is V safe STML and V safe STML is basically remove the malicious part from the scripts.

17:41.000 --> 17:48.000
And how we are able to do is using an open source known sanitizer called Dom purify.

17:48.000 --> 17:57.000
We try to apply that sanitization to all the input we get VSTML and then we say FSTML and we just render it.

17:57.000 --> 18:08.000
So and also we have added a ESLint rule to our front end code base that nobody would be able to write VSTML unintentionally so that we don't really forget about it.

18:08.000 --> 18:12.000
And so far is doing good.

18:12.000 --> 18:26.000
And then we also made an effort to make sure that our link component which we use it GL link renders links safe by default so that we don't have to developers don't have to think about writing secured code.

18:26.000 --> 18:29.000
The component does it for them.

18:29.000 --> 18:44.000
In the GL link, if a malicious link like JavaScript protocol will be just set us about blank or null.

18:44.000 --> 18:48.000
And then it was interesting story about iframe sandboxing.

18:48.000 --> 18:54.000
This is a mechanism where you can contain a third party module.

18:54.000 --> 19:08.000
We have been using a third party library to render charts and it we like it lab can allow you to add charts in the comments notes description everywhere.

19:08.000 --> 19:14.000
And and if there is a vulnerability with with the charting library, it would also impact it lab.

19:14.000 --> 19:25.000
So what we did was to contain the entire execution of the charting library inside an iframe with this with sandbox and do not allow any cross origin request.

19:25.000 --> 19:35.000
And we implemented this and all the issues with the third party module were just fixed with the one simple fix.

19:35.000 --> 19:51.000
And applying all these defenses actually helped us reduce front end security policy. This is one of the instance where we were getting a lot of reports on our hacker one program and applying these defenses has helped us to make the security issues come down to.

19:51.000 --> 20:06.000
Manageable numbers and they like you can see in this example in the graph that the issue got increased around some of the time in November 21 and then we applied these defenses and the issue dropped very significantly.

20:06.000 --> 20:19.000
And I'm sure what we have been doing nowadays also it's keeping the numbers low and we try to keep it to us. We are trying hard to keep it more lower than this.

20:20.000 --> 20:28.000
So to get an idea like how how do you improve your security posture is like just try to shift left integrate your.

20:28.000 --> 20:45.000
Such thing into HDLC your software development lifecycle adopt secure by design principles so that developers don't have to think about it and just use the make sure they come component you're building or framework you're using has though all those secure by a default design.

20:45.000 --> 21:00.000
And you security middle middlewares don't read when the wheel and build your own framework or things like that. So helmet jay's is popular one for node jay's and use standard sanitizers again like Dom purifier is doing pretty good job.

21:01.000 --> 21:11.000
And then if you want to audit your vulnerable packages sync is a nice tool and NPM also has a audit functions which can use.

21:12.000 --> 21:36.000
And there's some learning resources I found it really helpful which is Stanford CS 253 scores and my favorite one is over at developer guidelines where it keeps updated with the latest attacks and the vulnerability information and Hector one Hector one oh one is also a nice way to learn about security.

21:37.000 --> 21:54.000
And anybody plays CTF or nice yeah I love CTF so it's the way to learn about security and and we have also have secure coding guidelines which can be followed to learn about these stuff.

21:56.000 --> 21:58.000
Thank you so much for listening me out.

22:06.000 --> 22:09.000
If you have any questions I'll be around or if you have time.

22:09.000 --> 22:11.000
We have time for questions.

22:40.000 --> 22:45.000
Yeah so it's not always.

22:45.000 --> 22:48.000
Yeah so I'll just try to repeat some of the.

22:48.000 --> 22:53.000
So what are the options when we are not possible to set X frame options as a deny.

22:53.000 --> 22:55.000
Sorry.

22:55.000 --> 23:01.000
Yeah the question is all about if if your application is not able to use X frame option as a deny.

23:02.000 --> 23:07.000
Some of this applications might share that I frame being used into the website.

23:07.000 --> 23:21.000
So I think one of the option is making sure them to use content security policy because it can actually allow the vendors who are using the the I frames on their website would only allow that.

23:22.000 --> 23:25.000
Content security policy is one way otherwise.

23:25.000 --> 23:29.000
I think that's that's way otherwise if you want to.

23:29.000 --> 23:42.000
Build a more advanced mechanism there would be like I frame post message communications which can allow you to you know only do secure communication with the I frame.

23:42.000 --> 23:46.000
Yeah I would love to know what you think about that.

23:46.000 --> 23:51.000
I would love to know more about this so that I can give more better answer to it.

23:51.000 --> 23:56.000
Any other questions.

23:56.000 --> 23:59.000
I will.

23:59.000 --> 24:04.000
Can you.

24:04.000 --> 24:14.000
Can you.

24:14.000 --> 24:20.000
Ah this question is about have you looked at new firewall mitigation to fix these issues.

24:20.000 --> 24:27.000
To be honest no I have not known a good firewall which because that's something.

24:27.000 --> 24:39.000
Needs to be trustworthy and stuff like that and all only worked upon like operating environments where they have installed a firewall for all the systems.

24:39.000 --> 24:44.000
But this this was more about like how general developer guidelines.

24:48.000 --> 24:50.000
Anyone else.

24:50.000 --> 24:55.000
I have a question.

24:55.000 --> 24:56.000
Big I love you guys.

24:56.000 --> 24:57.000
Thank you.

