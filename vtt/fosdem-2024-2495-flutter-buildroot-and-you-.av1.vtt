WEBVTT

00:00.000 --> 00:05.000
All right.

00:05.000 --> 00:10.000
I'm not sure why you guys keep letting Americans in here,

00:10.000 --> 00:15.000
but thanks for stopping on by and letting me rant about Flutter.

00:15.000 --> 00:20.000
So it's an insane project, an insane package,

00:20.000 --> 00:23.000
and I have an insane boss who wanted it in Bilbroot,

00:23.000 --> 00:25.000
so I did that for him.

00:25.000 --> 00:28.000
A little bit about me.

00:28.000 --> 00:31.000
My name is Adam Duskett.

00:31.000 --> 00:37.000
I started my career completely through dumb luck and nepotism.

00:37.000 --> 00:42.000
I had a friend who only knew micro-embedded and I knew Linux,

00:42.000 --> 00:44.000
so it worked out.

00:44.000 --> 00:50.000
They were developing a sonar with a camera on a TIDM368 processor

00:50.000 --> 00:52.000
way back in the day.

00:52.000 --> 00:55.000
After that, I moved on to Micron Technology.

00:55.000 --> 01:00.000
I developed a kernel driver that substituted their DOS driver

01:00.000 --> 01:04.000
for memory testing and reporting purposes.

01:04.000 --> 01:07.000
Moved down to Michigan, started on VoIP emergency phones

01:07.000 --> 01:10.000
that did not work out well.

01:10.000 --> 01:14.000
I started contributing to Bilbroot in 2016.

01:14.000 --> 01:16.000
I had to look this up.

01:16.000 --> 01:18.000
My first commit was actually just an audit bump.

01:18.000 --> 01:20.000
It was like three lines long.

01:20.000 --> 01:23.000
But after that, I moved to Los Angeles.

01:23.000 --> 01:27.000
I started working on electric vehicle supply equipment.

01:27.000 --> 01:31.000
I joined Rivian Automotive as the first embedded Linux engineer

01:31.000 --> 01:33.000
for their fast charging network.

01:33.000 --> 01:35.000
We ended up using Bilbroot.

01:35.000 --> 01:37.000
It's still using Bilbroot to this day.

01:37.000 --> 01:39.000
It works great.

01:39.000 --> 01:43.000
Then I joined Amorella Solutions as a senior embedded systems developer.

01:43.000 --> 01:45.000
They're based out of Italy.

01:45.000 --> 01:49.000
Then hopefully in 2024, I'm never coming back to America.

01:50.000 --> 01:53.000
That would be quite nice.

01:53.000 --> 01:57.000
Some of my contributions, a ton of SC Linux packages.

01:57.000 --> 02:00.000
I tend to focus on those.

02:00.000 --> 02:04.000
Flutter, of course, and the Flutter packages that we'll talk about shortly.

02:04.000 --> 02:09.000
GeoObject introspection that took 17 patch revisions in three years,

02:09.000 --> 02:12.000
two trips to Europe to actually get in.

02:12.000 --> 02:15.000
OpenGDK, this is a total joke request by a friend.

02:15.000 --> 02:17.000
Apparently people still use this package.

02:17.000 --> 02:21.000
I don't know why, but it is there if you want to use OpenGDK

02:21.000 --> 02:26.000
with Bilbroot in 1,123 commits as of this writing.

02:26.000 --> 02:30.000
We assume that you know what Bilbroot is, what Flutter is.

02:30.000 --> 02:33.000
You're interested in using Flutter with a Bilbroot project,

02:33.000 --> 02:35.000
or you're interested in the next speaker.

02:35.000 --> 02:37.000
I'm not sure which.

02:37.000 --> 02:40.000
You're here. I appreciate it.

02:40.000 --> 02:44.000
How I actually ported this thing was I used Metaflutter,

02:44.000 --> 02:49.000
which is actually quite well constructed.

02:49.000 --> 02:55.000
But then things quickly took a turn for the worst.

02:55.000 --> 02:59.000
Normal industry standard practices just straight up don't apply to this package.

02:59.000 --> 03:03.000
Like downloading a reproducible tarball is just straight up not possible.

03:03.000 --> 03:05.000
We'll get into that.

03:05.000 --> 03:11.000
Requires tools to configure the source code that aren't standard from Google.

03:11.000 --> 03:15.000
You can't use your cross-compiled SDK toolchain.

03:15.000 --> 03:22.000
Enjoy. It actually includes a pre-compiled and patched LLVM.

03:22.000 --> 03:25.000
Release versions.

03:25.000 --> 03:28.000
You can find them at Flutter Engine tags.

03:28.000 --> 03:29.000
But those aren't for you.

03:29.000 --> 03:30.000
No, no, those are for Google.

03:30.000 --> 03:32.000
That's way, way too easy.

03:32.000 --> 03:34.000
You can't just download that tarball and compile it.

03:34.000 --> 03:35.000
That's impossible.

03:35.000 --> 03:40.000
No, you need a G-Client Python script from the Depot Tools repository,

03:40.000 --> 03:44.000
which is from Chromium.

03:44.000 --> 03:46.000
I don't know why they decided this.

03:46.000 --> 03:48.000
You need a .gclient file.

03:48.000 --> 03:50.000
You run this.

03:50.000 --> 03:55.000
And also, of course, the source code depends on .git directories being present to compile.

03:55.000 --> 04:01.000
So enjoy, because now you cannot create a reproducible tarball from this.

04:01.000 --> 04:04.000
So we needed a host depot tools.

04:04.000 --> 04:07.000
It gives us the tools necessary to download the source code,

04:07.000 --> 04:11.000
generate a tarball, configure the source.

04:11.000 --> 04:18.000
I made a genTarball with the help of the buildroot maintainers.

04:18.000 --> 04:22.000
So that will actually create a .gclient file for you,

04:22.000 --> 04:24.000
runs G-Client to download the source,

04:24.000 --> 04:29.000
generates a tarball in a format buildroot accepts, expects,

04:29.000 --> 04:32.000
but it's still not reproducible.

04:32.000 --> 04:34.000
So please save it somewhere.

04:34.000 --> 04:36.000
Create a hash file for yourself.

04:36.000 --> 04:38.000
Yeah, include the patch-claim compiler.

04:38.000 --> 04:39.000
I don't know why.

04:39.000 --> 04:40.000
I do not know why they did this.

04:40.000 --> 04:43.000
I've asked the developers, and I have yet to receive a response.

04:43.000 --> 04:48.000
So I'm going to chuck it up to Google.

04:48.000 --> 04:53.000
It requires that configure bundles and compiles all the third-party dependencies

04:53.000 --> 04:55.000
into a single generated flutter engine.

04:55.000 --> 04:58.000
It requires things like open SSL.

04:58.000 --> 05:00.000
But no, not your open SSL.

05:00.000 --> 05:01.000
Not the one provided by buildroot.

05:01.000 --> 05:02.000
That'd be too easy.

05:02.000 --> 05:04.000
No, no, it requires the third party,

05:04.000 --> 05:06.000
the one in the third-party directory,

05:06.000 --> 05:07.000
and then it smashes them all together

05:07.000 --> 05:12.000
and creates a giant flutter engine.so file.

05:12.000 --> 05:14.000
I'm going to move right along.

05:14.000 --> 05:16.000
Do you want to use flutter instead of QT?

05:16.000 --> 05:18.000
Well, there's some advantages.

05:18.000 --> 05:19.000
It's free.

05:19.000 --> 05:22.000
QT requires a professional license

05:22.000 --> 05:27.000
if you're going to sell your product.

05:27.000 --> 05:30.000
I fought Rivian for quite a while, actually,

05:30.000 --> 05:31.000
on this as they use QT,

05:31.000 --> 05:33.000
and a billion-dollar company didn't want

05:33.000 --> 05:36.000
to fork over 50 grand for a professional license.

05:36.000 --> 05:40.000
So I'm sure smaller companies also have a problem with this.

05:40.000 --> 05:43.000
It's just straight up licensed under BSD3.

05:43.000 --> 05:44.000
You can just use it.

05:44.000 --> 05:45.000
You can sell it.

05:45.000 --> 05:47.000
You can do whatever you want.

05:47.000 --> 05:55.000
There's a plethora of community plugins at plug.flutter.dev.

05:55.000 --> 05:59.000
Hotload restart makes debugging applications less time-consuming,

05:59.000 --> 06:06.000
in theory, uses Dart instead of QML and C++.

06:06.000 --> 06:07.000
Disadvantages.

06:07.000 --> 06:09.000
It's huge.

06:09.000 --> 06:13.000
It's 14 megs straight for the minimum,

06:13.000 --> 06:15.000
and that is just the .so.

06:15.000 --> 06:16.000
That's not an embedder.

06:16.000 --> 06:22.000
You still can't actually run your flutter application quite yet.

06:22.000 --> 06:25.000
OpenGL or Vulkan is necessary.

06:25.000 --> 06:27.000
It technically supports software rendering,

06:27.000 --> 06:30.000
as it's just a .so, and you need an embedder.

06:30.000 --> 06:32.000
But I have yet to find an embedder

06:32.000 --> 06:35.000
that officially supports running flutter

06:35.000 --> 06:38.000
with software rendering.

06:38.000 --> 06:42.000
Only X64, ARMv7, and probably V8,

06:42.000 --> 06:45.000
and Arc64 are supported.

06:45.000 --> 06:47.000
It says it supports I386,

06:47.000 --> 06:51.000
but I have yet to actually get it to build for I386.

06:51.000 --> 06:54.000
So at least in build routes, only X64.

06:55.000 --> 06:58.000
And it uses Dart instead of QML, C++.

06:58.000 --> 07:02.000
Really up to you there.

07:02.000 --> 07:05.000
LvGL is the other popular one among embedded platforms,

07:05.000 --> 07:08.000
and that supports anything with C in an output.

07:08.000 --> 07:13.000
It uses Dart instead of C.

07:13.000 --> 07:14.000
Yeah, mini...

07:14.000 --> 07:16.000
Oh, sorry, I actually reversed that.

07:16.000 --> 07:18.000
Yeah, less...

07:18.000 --> 07:20.000
So mini-more plugins, of course,

07:20.000 --> 07:23.000
it's much easier to build and publish applications

07:23.000 --> 07:26.000
in flutter than LvGL.

07:26.000 --> 07:27.000
It is far larger.

07:27.000 --> 07:29.000
Again, LvGL starts at 23k.

07:29.000 --> 07:31.000
Particularly the exact same thing as Flutter Gallery,

07:31.000 --> 07:33.000
except that the fuel line is removed.

07:33.000 --> 07:35.000
And it is a generic package right now.

07:35.000 --> 07:39.000
We do not have a infrastructure around that.

07:39.000 --> 07:44.000
So, and that may change in the future.

07:46.000 --> 07:47.000
The best way, I would say,

07:47.000 --> 07:50.000
to add your flutter application to a build route project

07:50.000 --> 07:53.000
is to create an external tree.

07:53.000 --> 07:56.000
So that way you can update build route easier.

07:56.000 --> 07:59.000
I have an external tree called Faustem.

07:59.000 --> 08:02.000
I also have a project on GitHub that uses Docker,

08:02.000 --> 08:07.000
an external tree, so we can actually use reproducible builds

08:07.000 --> 08:11.000
for exactly...

08:11.000 --> 08:12.000
I don't know.

08:13.000 --> 08:18.000
There it is.

08:18.000 --> 08:19.000
There we go.

08:19.000 --> 08:21.000
Okay, so this is the...

08:21.000 --> 08:28.000
I patched 2023, but here's the Faustem external tree.

08:28.000 --> 08:30.000
So you have packages, you have patches to build route.

08:30.000 --> 08:32.000
These patches are for the 2023 Ranch,

08:32.000 --> 08:35.000
but basically they add a bunch of stuff.

08:35.000 --> 08:37.000
But the Flutter package updates are the big one,

08:37.000 --> 08:40.000
because as I'll get to in a second,

08:40.000 --> 08:42.000
Flutter is awful in 2023.

08:42.000 --> 08:46.000
Please don't use it.

08:46.000 --> 08:48.000
This is a big one.

08:48.000 --> 08:49.000
Profiling.

08:49.000 --> 08:52.000
This slide took me about three hours on a plane to figure out,

08:52.000 --> 08:55.000
because I had never profiled a Flutter application,

08:55.000 --> 09:00.000
let alone something that was on a...

09:00.000 --> 09:02.000
remotely.

09:02.000 --> 09:08.000
So build Flutter Engine in profiling mode.

09:08.000 --> 09:10.000
Menu config libraries, graphics Flutter Engine,

09:10.000 --> 09:12.000
this is an enable profiling option.

09:12.000 --> 09:14.000
It's very straightforward.

09:14.000 --> 09:16.000
Make a bootable image.

09:16.000 --> 09:19.000
Run the application in profile mode.

09:19.000 --> 09:20.000
Here you go.

09:20.000 --> 09:22.000
Write that down and take a screenshot,

09:22.000 --> 09:26.000
because VM service and VM service port are cryptic

09:26.000 --> 09:29.000
and ill documented.

09:29.000 --> 09:31.000
There was also an observatory,

09:31.000 --> 09:34.000
but apparently that's being deprecated for this.

09:34.000 --> 09:37.000
They do the same thing as VM service.

09:37.000 --> 09:47.000
If you do not use VM service host equals 0000,

09:47.000 --> 09:53.000
or the URL of your host machine,

09:53.000 --> 09:54.000
you will not be able to connect,

09:54.000 --> 09:58.000
because the default is just local host only.

09:58.000 --> 10:01.000
I can show you this here as well.

10:01.000 --> 10:05.000
Actually, it would be a good practical demo.

10:05.000 --> 10:08.000
I have a VM here.

10:08.000 --> 10:11.000
I don't know if it will actually show up splash screen.

10:11.000 --> 10:17.000
Maybe it will. Maybe it won't.

10:17.000 --> 10:19.000
We might get lucky with a FOS stem logo.

10:19.000 --> 10:20.000
We might not.

10:20.000 --> 10:22.000
No, but it's booted. It's fine.

10:22.000 --> 10:28.000
If we SSH in,

10:28.000 --> 10:34.000
I have a FlutterPie profiling demo.

10:34.000 --> 10:37.000
That's going to...

10:37.000 --> 10:40.000
No, it's running.

10:40.000 --> 10:42.000
I should just SH.exit for everybody,

10:42.000 --> 10:44.000
so they can see.

10:44.000 --> 10:47.000
Yes.

10:47.000 --> 10:50.000
This is the exact same thing we have.

10:50.000 --> 10:54.000
Then I have a Flutter profile connect.

10:54.000 --> 10:56.000
Actually, it's probably in my...

10:56.000 --> 10:59.000
Yeah, there we go.

10:59.000 --> 11:04.000
This will connect to it.

11:04.000 --> 11:06.000
Over here, this is the x86,

11:06.000 --> 11:09.000
so it is running Flutter Gallery.

11:09.000 --> 11:12.000
We can go in, we can click reply,

11:12.000 --> 11:13.000
we can check the inbox,

11:13.000 --> 11:15.000
or something we can hit compose.

11:15.000 --> 11:16.000
This is fine. We can type.

11:16.000 --> 11:19.000
Everything works properly.

11:19.000 --> 11:21.000
By now, this should be working.

11:21.000 --> 11:24.000
Yes, so you will see a URL right here.

11:24.000 --> 11:27.000
I have no idea what I just clicked.

11:27.000 --> 11:30.000
Oh, right. Of course.

11:30.000 --> 11:38.000
So we'll copy this URL into Chrome.

11:38.000 --> 11:40.000
And there we go.

11:40.000 --> 11:43.000
So now we can check performance metrics

11:43.000 --> 11:46.000
against our VM here.

11:46.000 --> 11:52.000
And I've tested this also on a Raspberry Pi 5 and 4.

11:52.000 --> 11:54.000
It works great.

11:54.000 --> 11:56.000
Nothing's really running right now

11:56.000 --> 12:00.000
other than Flutter Gallery.

12:00.000 --> 12:02.000
If we keep clicking,

12:02.000 --> 12:05.000
eventually more pretty graphs will show up.

12:05.000 --> 12:07.000
So there's a CPU profiler,

12:07.000 --> 12:11.000
although good luck.

12:11.000 --> 12:13.000
This is a lot of ASM.

12:13.000 --> 12:17.000
I am not really sure what it does.

12:17.000 --> 12:19.000
And of course, memory profiling as well.

12:19.000 --> 12:21.000
And networking and logging and whatnot.

12:21.000 --> 12:25.000
So it's quite easy to set up a remote debugging

12:25.000 --> 12:29.000
on all of this.

12:29.000 --> 12:32.000
There we go.

12:32.000 --> 12:37.000
Yes, 0 to 0, or the IP address, the remote machine.

12:37.000 --> 12:39.000
Yeah, so the current state of Flutter,

12:39.000 --> 12:42.000
the 2023.11.x branch is, please, it's bad.

12:42.000 --> 12:44.000
Do not use it.

12:44.000 --> 12:47.000
Use the patches that I have if you need,

12:47.000 --> 12:50.000
or just wait until 2020, 4.02,

12:50.000 --> 12:52.000
which is later this month.

12:52.000 --> 12:55.000
But the packages, if you really want them,

12:55.000 --> 12:57.000
Flutter SDK bin, it's a set of tools

12:57.000 --> 13:00.000
used to compile the Flutter applications themselves.

13:00.000 --> 13:03.000
Flutter Engine, it's the main Flutter library.

13:03.000 --> 13:05.000
And Flutter Pi, that's it.

13:05.000 --> 13:06.000
That's what you get.

13:06.000 --> 13:10.000
It's the Flutter Embedder used to run the Flutter applications.

13:10.000 --> 13:12.000
It does not support Waylon.

13:12.000 --> 13:15.000
It's KMS and BRI only.

13:15.000 --> 13:20.000
But it does support GL, GLES, and Vulkan, which is quite nice.

13:20.000 --> 13:22.000
Oh, and of course, there's Flutter Gallery,

13:22.000 --> 13:25.000
which is the demo application.

13:25.000 --> 13:28.000
And yes, I have fixed this, but there's a lot of

13:28.000 --> 13:33.000
necessary options that have been patched in.

13:33.000 --> 13:35.000
In Master, it's a lot better.

13:35.000 --> 13:36.000
A lot better.

13:36.000 --> 13:37.000
Please use that.

13:37.000 --> 13:39.000
All the previous packages with the following additions.

13:39.000 --> 13:41.000
We have IVI Home Screen.

13:41.000 --> 13:44.000
It's actually developed by Toyota.

13:44.000 --> 13:45.000
It works with Waylon.

13:45.000 --> 13:48.000
17 more plugins than Flutter Pi.

13:48.000 --> 13:50.000
22 plugins are currently supported.

13:50.000 --> 13:53.000
There's a bunch of bug fixes and improvements.

13:53.000 --> 13:56.000
PubCache has moved to the download directory.

13:56.000 --> 14:00.000
There's more up-to-date packages, comprehensive build options

14:00.000 --> 14:04.000
for Flutter Gallery packages.

14:04.000 --> 14:07.000
One of the big things is the Flutter Gallery package

14:07.000 --> 14:10.000
is a good starting point as a generic patch,

14:10.000 --> 14:12.000
but we can do better.

14:12.000 --> 14:18.000
A Flutter infrastructure package would be so much nicer.

14:18.000 --> 14:23.000
Yes, so I actually have that patched in as well

14:23.000 --> 14:25.000
in one of these.

14:25.000 --> 14:28.000
So with this patch right here,

14:28.000 --> 14:32.000
this would create a package flutter.mk.

14:32.000 --> 14:33.000
Can you increase?

14:33.000 --> 14:36.000
Of course.

14:36.000 --> 14:37.000
I would love to.

14:37.000 --> 14:40.000
There we go.

14:40.000 --> 14:46.000
So that way you don't have to copy and paste all of that junk

14:46.000 --> 14:48.000
all over the place.

14:48.000 --> 14:53.000
I think I stole this from pkgcmake and then started editing it.

14:53.000 --> 14:56.000
Much like the Dart registrant files,

14:56.000 --> 14:59.000
all of this stuff would just automatically be figured out,

14:59.000 --> 15:00.000
including the package name,

15:00.000 --> 15:04.000
as the package name has to go on top of the PubStack.yaml file.

15:04.000 --> 15:08.000
It's quite easy to yank it out of there automatically.

15:08.000 --> 15:13.000
So your Flutter package is going to end up looking like this,

15:13.000 --> 15:16.000
which is much, much easier to read

15:16.000 --> 15:19.000
than what is currently supported.

15:19.000 --> 15:23.000
So that's pretty much it.

15:23.000 --> 15:27.000
The stretch goal would probably be the Firebase SDK,

15:27.000 --> 15:33.000
although that also seems quite the undertaking for a package.

15:33.000 --> 15:39.000
So yeah, any questions?

15:39.000 --> 15:41.000
Thank you.

15:41.000 --> 15:51.000
Thank you.

15:51.000 --> 15:53.000
I answered everybody's questions.

15:53.000 --> 15:55.000
So I'm going to have a question.

15:55.000 --> 15:57.000
Oh, no, don't let him in.

15:57.000 --> 16:00.000
No, no.

16:00.000 --> 16:03.000
What did you expect?

16:03.000 --> 16:08.000
So you said that Flutter would not run on software rendering.

16:08.000 --> 16:09.000
It's wrong.

16:09.000 --> 16:13.000
We have a runtime test that uses Mesa 3D with software processing.

16:13.000 --> 16:16.000
So it should be doable.

16:16.000 --> 16:18.000
It does use the Mason.

16:18.000 --> 16:21.000
Okay, it uses the Mason.

16:21.000 --> 16:26.000
Was it the OGL 2 software?

16:30.000 --> 16:33.000
Yeah, it's the OGL 2 software.

16:33.000 --> 16:36.000
So it's a bit of a shame that it's not running on software.

16:36.000 --> 16:39.000
So it's a bit of a shame that it's not running on software.

16:39.000 --> 16:42.000
So it's a bit of a shame that it's not running on software.

16:42.000 --> 16:45.000
So it's a bit of a shame that it's not running on software.

16:45.000 --> 16:48.000
So it's a bit of a shame that it's not running on software.

16:48.000 --> 16:51.000
So it's a bit of a shame that it's not running on software.

16:51.000 --> 16:54.000
So it's a bit of a shame that it's not running on software.

16:54.000 --> 16:57.000
So it's a bit of a shame that it's not running on software.

