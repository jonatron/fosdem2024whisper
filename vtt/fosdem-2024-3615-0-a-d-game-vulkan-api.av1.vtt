WEBVTT

00:00.000 --> 00:14.240
Okay, our next speaker in live talk session will be Vladislav Bilo.

00:14.240 --> 00:20.880
We talk about 080 game, the Vulcan API.

00:20.880 --> 00:23.880
Welcome here.

00:23.880 --> 00:34.880
Hi, before I get started, how many of you does know 080 as you hand?

00:34.880 --> 00:37.880
Wow, I haven't expected that.

00:37.880 --> 00:43.880
And by any chance, has someone seen my previous talk in 2021?

00:43.880 --> 00:46.880
One? Really? Wow.

00:46.880 --> 00:49.880
That's great actually.

00:50.880 --> 00:53.880
Welcome to my lightning talk.

00:53.880 --> 00:56.880
Thank you for attending it.

00:56.880 --> 01:07.880
I'm Vladislav. I'm a senior graphics engineer and in my free time I'm working as a volunteer on 080.

01:07.880 --> 01:15.880
I'm going to talk about Vulcan API, a little story how I added it to the game.

01:15.880 --> 01:22.880
080 is a free and open source real time strategy game.

01:22.880 --> 01:31.880
If you like games like Age of Empires, Warcraft or Starcraft, then you might find this game interesting as well.

01:31.880 --> 01:37.880
The game supports single and multiplayer modes, so you can play with your friends.

01:37.880 --> 01:40.880
We are internet or a local network.

01:40.880 --> 01:44.880
Also we have plans for campaigns.

01:44.880 --> 01:49.880
080 is a history based game about ancient times.

01:49.880 --> 01:57.880
So many in-game buildings, units, maps, names, based on real historical documents.

01:57.880 --> 02:04.880
We even have recorded voices for such times.

02:04.880 --> 02:13.880
0DS a year doesn't exist in Julian or Gigaurian calendars, so 1AD goes straight after 1BC.

02:13.880 --> 02:21.880
Interesting fact, the only 0 is used as a successful exit status on most platforms.

02:21.880 --> 02:29.880
And also a big plus that 0 as a character is on top of the alphabetical order.

02:29.880 --> 02:35.880
So like in most repositories, it's also a plus for us.

02:35.880 --> 02:39.880
It's not intended, but it's a plus.

02:39.880 --> 02:45.880
0 is a cross-platform game. It works on Linux, Mac OS and Windows.

02:45.880 --> 02:52.880
Some users even run the game on Raspberry Pi.

02:52.880 --> 02:57.880
The one of the strongest features of 0AD is mod support.

02:57.880 --> 03:01.880
The main game itself is also a mod.

03:01.880 --> 03:13.880
It's possible to customize and recreate different things from UI to gameplay, from sound to textures.

03:13.880 --> 03:24.880
There are mods that add new civilizations, different timeframes like medieval or even fictional worlds like Legend of Zelda.

03:24.880 --> 03:32.880
A mod structure itself is an example of a folder with the main game mod.

03:32.880 --> 03:41.880
It has the same structure. It's transparent and doesn't require any special knowledge to make a mod.

03:41.880 --> 03:48.880
Also, the big plus that each mod works on every platform the game works on.

03:48.880 --> 03:53.880
So you need to compile something or pre-build some binaries.

03:53.880 --> 04:00.880
Because besides art or maps, we use JavaScript for scripting.

04:00.880 --> 04:10.880
By the way, all those pictures that I've shown you are screenshots from the game, so they are not post-processing.

04:10.880 --> 04:14.880
Let's focus on that picture.

04:14.880 --> 04:18.880
How we can achieve that? We need two key points.

04:18.880 --> 04:22.880
First, for a beautiful art made by our artists.

04:22.880 --> 04:29.880
The second one is the engine which draws a scene like that to the screen.

04:29.880 --> 04:40.880
So, what did we have back in 2021 before I started refocusing our engine?

04:40.880 --> 04:47.880
We have mods. We have a engine, a pyogenesis engine.

04:47.880 --> 04:55.880
It's our custom game engine. It's written in C++ and it runs mods.

04:55.880 --> 04:59.880
We are a library called Spider Monkey. It's a JavaScript library.

04:59.880 --> 05:05.880
It was calling on the JL driver directly. It was really tightly coupled.

05:05.880 --> 05:12.880
So you might meet different calls to OpenGL from different systems.

05:12.880 --> 05:18.880
There were a lot of implicit relations.

05:18.880 --> 05:23.880
That's an example of our old code.

05:23.880 --> 05:29.880
You might see on top that just direct OpenGL call.

05:29.880 --> 05:37.880
The next two calls are high-level calls, then three middle-level to reset bound textures,

05:37.880 --> 05:45.880
and then again OpenGL calls. That's not great for modern GPUs and modern architecture.

05:45.880 --> 05:49.880
So, which problems OpenGL have?

05:49.880 --> 05:53.880
CPU performance and unpredictable cost of some function calls.

05:53.880 --> 05:58.880
OpenGL was designed really, really long time ago.

05:58.880 --> 06:07.880
It's still evolving. So we have OpenGL 4.6 that was released back in maybe 2018.

06:07.880 --> 06:14.880
But it still has a lot of legacy.

06:14.880 --> 06:22.880
There is no way to query for supported features, at least standard way to query for supported features

06:22.880 --> 06:29.880
or GPUs. We can disable something if we see that GPU isn't capable of.

06:29.880 --> 06:35.880
We don't have validation or debug things. We have some extensions that might provide some feedback,

06:35.880 --> 06:38.880
but it's not enough.

06:38.880 --> 06:41.880
Another big problem that OpenGL is single threaded.

06:41.880 --> 06:47.880
It's pretty noticeable problem these days.

06:47.880 --> 06:52.880
Just an example how OpenGL reports a version.

06:52.880 --> 06:56.880
It's the same build, the same platform.

06:56.880 --> 07:04.880
So it can be reported. It depends only on driver version.

07:04.880 --> 07:10.880
So that's not so bad because you have major and minor versions in front of that.

07:10.880 --> 07:17.880
So at least we can parse that. But if we're going to talk about GPU name,

07:17.880 --> 07:24.880
that would be more complicated thing.

07:24.880 --> 07:29.880
That's the same GPU, the same platform and the same build, but different drivers,

07:29.880 --> 07:35.880
I mean different drivers of open source or not open source like different versions.

07:35.880 --> 07:39.880
And they all can report the same card with different names.

07:39.880 --> 07:43.880
So we have this structure. What we can do?

07:43.880 --> 07:50.880
We have three options. Switch the engine. It's really monstrous way to do things.

07:50.880 --> 07:53.880
It would be impossible for us.

07:53.880 --> 07:58.880
The second one use third party library like Libangl or BGFX.

07:58.880 --> 08:05.880
And the third one that I've chosen is adding an abstraction layer between our engine

08:05.880 --> 08:13.880
and OpenGL to cover OpenGL driver and be able to switch different backends.

08:13.880 --> 08:18.880
So how it would look like. The dashed line is the abstraction,

08:18.880 --> 08:22.880
which is used by the renderer code of the engine.

08:22.880 --> 08:29.880
OpenGL backend is our code that converts this abstraction to driver

08:29.880 --> 08:33.880
and driver interacts with GPU directly.

08:33.880 --> 08:39.880
And with that thing, we have interface like that.

08:39.880 --> 08:44.880
If you know C++, you might know what's going on here.

08:44.880 --> 08:48.880
It's actually pretty simple. No big brain here.

08:48.880 --> 08:52.880
But it allows us to do various things.

08:52.880 --> 08:56.880
Like it simplifies our renderer code.

08:56.880 --> 09:01.880
Do you remember how many low level or middle level calls we had before?

09:01.880 --> 09:04.880
And now we have only high level code.

09:04.880 --> 09:08.880
That simplifies renderer code a lot.

09:08.880 --> 09:16.880
So we're adding Vulkan backend and we added Dami backend for tests.

09:16.880 --> 09:22.880
So now because we have an abstraction layer, we can easily switch backends

09:22.880 --> 09:27.880
and we can now run tests with renderer code but on the server

09:27.880 --> 09:35.880
because now we don't require to have like a window manager or GPU at all.

09:35.880 --> 09:44.880
So by the way, about the size of rectangles, it's not by mistake that they are different.

09:44.880 --> 09:52.880
It's really they are because OpenGL is pretty simple in terms of interacting with driver.

09:52.880 --> 09:59.880
And Vulkan is much more explicit and you have to do many things manually.

09:59.880 --> 10:06.880
But I've designed the abstraction layer dashed line in such a way that it's going toward Vulkan.

10:06.880 --> 10:11.880
So actually Vulkan backend is smaller than it could be.

10:11.880 --> 10:16.880
And OpenGL backend against is bigger than it could be

10:16.880 --> 10:25.880
because it needs to work around some ideas that present in Vulkan and not present in OpenGL.

10:25.880 --> 10:34.880
So in OpenGL backend we have about 4K lines and Vulkan about 8K plus VMA.

10:34.880 --> 10:42.880
VMA is a third party library. It's a header only. It's used for resource management.

10:42.880 --> 10:53.880
So 8K is all our code and we use some part of those 17K lines of code.

10:53.880 --> 11:05.880
So about the results from 2021 to 2023 in total, if we sum up all the work we have done,

11:05.880 --> 11:09.880
it's about one, like one and a half or two months of all time work.

11:09.880 --> 11:17.880
It's just only factoring and adding an abstraction because adding Vulkan is pretty fast.

11:17.880 --> 11:26.880
Another way to work fast because Vulkan has a really great feature called validation layers.

11:26.880 --> 11:30.880
It simplifies developing for Vulkan a lot.

11:30.880 --> 11:38.880
I would say that it could take like one month without validation layers or maybe more.

11:38.880 --> 11:44.880
Now we have proper information about GPU because Vulkan itself provides all this information.

11:44.880 --> 11:53.880
Also it provides driver version and a lot of different information we can use to detect features, disable them.

11:53.880 --> 11:58.880
Also we don't have yet but we plan to add a multi-threading support.

11:58.880 --> 12:02.880
So about performance, it's the demo time.

12:08.880 --> 12:14.880
That's the game.

12:38.880 --> 12:41.880
It works.

12:44.880 --> 12:48.880
Let me check on the...

12:53.880 --> 12:59.880
This checkbox is not visible from this angle.

13:00.880 --> 13:03.880
So...

13:05.880 --> 13:09.880
It's a sample map we have.

13:09.880 --> 13:12.880
And what I'm going to show you.

13:12.880 --> 13:18.880
You might see the FPS counter and in OpenGL it states 30 FPS.

13:18.880 --> 13:25.880
And if we were to take a look at performance, the font is pretty small,

13:25.880 --> 13:30.880
but I can tell you that it says 32 milliseconds per frame.

13:30.880 --> 13:34.880
It's not a GPU time, it's per CPU time.

13:34.880 --> 13:39.880
And if we switch to Vulkan...

13:43.880 --> 13:51.880
By the way, we need to reload the game because we don't support real-time switching.

13:51.880 --> 13:55.880
It would be too complicated.

13:59.880 --> 14:03.880
And we're starting the game.

14:22.880 --> 14:29.880
And as you may see, the FPS counter is 60 and it's bound by a reset.

14:37.880 --> 14:45.880
If we were to take a look at the render now, it's only about 12 milliseconds per frame.

14:46.880 --> 14:49.880
So that's pretty.

14:49.880 --> 14:52.880
It's about three times faster.

14:52.880 --> 14:56.880
And again, that's only about CPU.

14:56.880 --> 14:59.880
So was it worth it?

14:59.880 --> 15:03.880
Yes, performance up to time and more stable frame times.

15:03.880 --> 15:10.880
We have a more predictable and stable behavior because not every platform game up to three times,

15:10.880 --> 15:16.880
but other just get a more smooth and stable performance.

15:16.880 --> 15:19.880
So do we need to Vulkan at all?

15:19.880 --> 15:21.880
Of course.

15:21.880 --> 15:23.880
If you can enable, just enable it.

15:23.880 --> 15:27.880
If you can easily switch to another library, do it.

15:27.880 --> 15:31.880
There should be a picture with ShiaLaBuff.

15:31.880 --> 15:39.880
And if you use an own custom engine, it's questionable currently because if it's enough for you to use OpenGL, that's great.

15:39.880 --> 15:49.880
But if you have a passionate graphics programmer like I am, maybe, then I would choose to switch to Vulkan.

15:49.880 --> 15:51.880
So thank you.

15:51.880 --> 15:59.880
And feel free to reach me after if you need some technical details or feel free to write me this email.

15:59.880 --> 16:01.880
Thank you very much.

16:09.880 --> 16:11.880
Thank you.

