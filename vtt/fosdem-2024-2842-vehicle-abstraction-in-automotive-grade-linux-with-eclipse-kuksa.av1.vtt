WEBVTT

00:00.000 --> 00:12.260
All right. Why can't everyone, while the last people join the room, let me ask a few questions

00:12.260 --> 00:16.320
to get an idea of the audience that we have here. So, quick show of hands. Who of you

00:16.320 --> 00:24.400
knows AGL Automotive Grid Linux? That's quite a lot. Awesome. Another question. Who of you

00:24.400 --> 00:31.040
knows Cooxer? Okay, let us change that because that way, fewer hands than for the AGL. But I

00:31.040 --> 00:35.200
think that's a good thing. Last and final question. Who's here still from the beer talk?

00:35.200 --> 00:43.720
Like room beer? Okay, I'm glad. We actually came out of these talks. So, as you can already see

00:43.720 --> 00:49.360
in the introduction slide, we will talk about vehicular abstraction. So, we talk about Automotive

00:49.360 --> 00:57.520
Grid Linux and we talk about Cooxer. So, before that, maybe a bit of context. Who am I? So, I'm not

00:57.520 --> 01:01.640
the super automotive developer doing a Canon AutoZer for the last 20 years of my career,

01:01.640 --> 01:06.760
also due to age. But I started with really coming from the cloud. I used to keep an

01:06.760 --> 01:11.000
E2 working on different projects in Github. And I thought, how can we actually make

01:11.000 --> 01:17.920
application development for vehicles more fun and efficient? And one really large essential piece

01:18.040 --> 01:22.880
here is one challenge because there are no restandardized signals. You can develop an app for

01:22.880 --> 01:29.080
one car and it won't run on another vehicle, even maybe from the same vendor. So, what we often

01:29.080 --> 01:34.800
see in the industry is this kind of high end-to-end complexity. So, every application is developed

01:34.800 --> 01:39.760
for every specific model, every specific car, and we have a huge pay point for that because you

01:39.760 --> 01:44.960
cannot port your applications there. You cannot scale, so if a developer is developing an app

01:45.000 --> 01:50.440
for one brand, it won't work on the other brand and also maintenance is just a nightmare because

01:50.440 --> 01:56.240
just build it for one car and then you completely forget it. So, as always in computer science,

01:56.240 --> 02:02.960
one solution to that is abstraction. That's why we also took a lot of effort in the topic of

02:02.960 --> 02:09.880
vehicle abstraction here. So, how can we make a world like this happen? So, where we have tons of

02:09.920 --> 02:14.920
applications that develop against the same API, against the same data model and that work just

02:14.920 --> 02:19.520
on different cars. While it's the same car, it's the same time. I'm talking a bit too much about

02:19.520 --> 02:24.920
cars. We run it on different models, different brands and so on. So, basically how do we get to

02:24.920 --> 02:29.240
the world where we ride at once and run it everywhere and to also attract third-party developers

02:29.240 --> 02:33.920
because this is how you grow the ecosystem and also make it more attractive to develop the

02:33.960 --> 02:41.120
unrealized synergies. So, for this abstraction, I would say we basically need two things. One is a

02:41.120 --> 02:47.040
data model to operate on and the other thing is the APIs to interact with the data model. Coming

02:47.040 --> 02:52.960
to the first thing, I hope, here we go. When it comes to the data model or you might also call

02:52.960 --> 02:59.680
a taxonomy, we decided for the CoVisa Vehicle Signal Specification. So, it's done at an organization

02:59.720 --> 03:05.120
called CoVisa, formerly known as GenoVee. Maybe that rings the bell for some. And it was basically

03:05.120 --> 03:10.440
does. It creates a tree structure for all kinds of data that might be available in the vehicle. So,

03:10.440 --> 03:15.400
for instance, you get the tire pressure. You follow the branch of vehicle, chassis, axle, road, one,

03:15.400 --> 03:21.280
wheel, tire and then you get to the pressure signal. The same way you have sensor values in

03:21.280 --> 03:26.480
here, you can also have actuator values. So, for instance, when we have a seat position, we could

03:26.520 --> 03:32.000
just change this value of the seat position and eventually that seat in the car would move to

03:32.000 --> 03:36.960
that position. That's the idea of this whole data model. If you want to play a bit with that,

03:36.960 --> 03:42.320
there's also a really cool website called Digital Auto that makes nice visualization of that and

03:42.320 --> 03:48.360
also shows some example applications how you interact with VSS. Okay, now we go to the first

03:48.360 --> 03:55.520
piece. How about the second? And this is where Cooxa or more specific Cooxa Viara comes into

03:55.560 --> 04:00.800
play. So, while in this case, vehicle abstraction layer, so we talk about abstraction, so the idea

04:00.800 --> 04:06.360
is to have Cooxa running in the vehicle computer. So, some kind of computer which might run Unix or

04:06.360 --> 04:11.040
something similar to that. And we also assume this is a place where we decub the hard from the

04:11.040 --> 04:16.160
software in the vehicle. So, the underlying assumption is something you can see on the left. So,

04:16.160 --> 04:20.320
we have a lot of deeply embedded layers, can, autos, are, lin, sum, IP, whatever you like or

04:20.360 --> 04:25.880
maybe don't like, which is maybe really proprietary in some cases and also the signals and the bits

04:25.880 --> 04:31.680
are really specific to the car. So, then people would write something that we call provider or

04:31.680 --> 04:37.600
also feeder to translate between these really specific systems and embedded systems towards

04:37.600 --> 04:45.400
VSS using the Cooxa API. This is where the API is coming from because we use here Cooxa. If you

04:45.400 --> 04:49.280
like more on the abstraction side, we also can say like in the deeply embedded layers, we mostly

04:49.320 --> 04:55.960
have data like really 1001 or the bits and we kind of need to interpret those. So, we translate

04:55.960 --> 05:01.080
it to VSS, get some information out of that and then by combining this information in different

05:01.080 --> 05:09.600
applications, we actually create knowledge. And here Cooxa is a nice building piece for that. So,

05:09.600 --> 05:14.200
what is Cooxa in general? So, since we are in the open source conference, obviously it is open

05:14.240 --> 05:19.360
source, fully licensed on the APHG 2.0 license and as I just mentioned in the previous slide,

05:19.360 --> 05:25.240
it is some kind of digital twin based on VSS. So, it shows the current and the target value of your

05:25.240 --> 05:30.720
vehicle. I don't want to go into the definition of digital twins but I guess you kind of get what

05:30.720 --> 05:36.480
I am getting at here. And so, you only have the current value which is quite nice but you also

05:36.480 --> 05:41.400
have the target value. So, coming back to our seed example, when you would change the value, the

05:41.400 --> 05:45.280
current value as an application from a seed, this doesn't meet the seed is actually where I

05:45.280 --> 05:49.560
wanted to have. So, I actually will set the target value and then it is up to the deeply

05:49.560 --> 05:54.280
embedded layers, so the actual vehicle to move the position of the seed over time. So, that is

05:54.280 --> 05:59.040
why you can change both value and hopefully at some point the current value will be the target

05:59.040 --> 06:06.480
value because that is the whole idea. So, much about the concepts. Let's get to the code. Or

06:06.520 --> 06:12.160
maybe I won't show code here but what it is actually written in. So, we wrote this in Rust. If

06:12.160 --> 06:16.920
you steadily compile it, it is less than 4 megabytes, large or small depending on which word

06:16.920 --> 06:20.440
you are coming from I guess. Like, these are the cloud words and it is small from the automotive

06:20.440 --> 06:26.120
words, maybe large to you. And it is quite language agnostic because the interaction with

06:26.120 --> 06:30.840
this is with it because we have a GIPC interface with some basic functions like get, set and

06:30.880 --> 06:39.880
subscribe and also a number of client libraries using this. And with that, that is actually the

06:39.880 --> 06:44.160
basic of Cooxing and I have to be honest with you, if you have been in this death room last

06:44.160 --> 06:49.120
year, you would say where is the news because this has been shown there as well. So, let's get to

06:49.120 --> 06:54.720
the news. So, what has happened in the previous year? First and foremost, it was using AGL so

06:54.720 --> 07:00.440
Scott will talk a lot about that in the next minutes. But we also have some other news. For

07:00.480 --> 07:05.400
instance, we now have a Cooxer Android SDK, we have a mock service and we also did some work

07:05.400 --> 07:10.560
with later from our side. So, the Cooxer Android SDK, I mean it is kind of straightforward

07:10.560 --> 07:14.360
because in the end of the SDK, that is now available in Maven Central and you can interact

07:14.360 --> 07:20.560
with the data broker from an Android application. So, be it Android automotive or maybe your own

07:20.560 --> 07:24.720
app on your smartphone. So, assuming you have some kind of Cooxer abstraction in your vehicle,

07:24.720 --> 07:30.040
you can use a companion app for instance, which we are about to release to the F2O store. Now,

07:30.120 --> 07:35.840
there will be a moment for the releases there. We did support request beginning of the week, but

07:35.840 --> 07:40.840
we still wait for F2O to actually show this app in their repository. So, stay with me till Monday,

07:40.840 --> 07:48.760
then it might be there hopefully. Another thing is a mock service because the guys in the previous

07:48.760 --> 07:54.120
presentation had their robot here. We cannot always have a car on our lab to test the application,

07:54.200 --> 07:59.320
but we kind of depend on the behavior of the vehicle. So, we need a way to mox this. So,

07:59.320 --> 08:06.840
the community came up with a behavior definition. For instance, whenever the signal of a seed is

08:06.840 --> 08:13.560
changed to a certain value, like 1000, then the current value should also change to that value.

08:14.280 --> 08:18.760
And this is what you can basically mock or emulate with the mock service to show you just an example.

08:19.720 --> 08:24.200
Here we have just an example I mentioned. So, whenever the driver's side position changes,

08:24.200 --> 08:29.560
then we create an animation to move to that position or to move the current value to that

08:29.560 --> 08:35.080
position, which makes it quite easy and flexible to test whatever you desire with your car.

08:37.080 --> 08:42.440
And last but not least, this is just a sneak preview into the lab. So, Cooxer is part of the

08:42.440 --> 08:46.920
larger community in the Eclipse Foundation. There's an Eclipse software defined working group,

08:46.920 --> 08:52.280
or short Eclipse STV. And there's another distribution called Eclipse Leder, which tries to

08:52.280 --> 08:58.280
combine some of the major pieces of the ecosystem there. And this is called Leder. And what we

08:58.280 --> 09:03.400
managed to do is actually run the Leder-Yogtu layer on top of an HGL, so that you actually get these

09:03.400 --> 09:10.840
pieces, like especially Cooxer, but also some other projects like Cantal, to run on the HGL stack.

09:11.560 --> 09:15.400
And I think this is a really good opportunity to learn a bit more about HGL here.

09:15.400 --> 09:25.240
Oh, okay. I'll take over then. All right. Thank you, Sven Eric. So, I have done a lot of stuff

09:25.240 --> 09:31.960
around HGL, so people might recognize me. I'm Scott Murray. I've done Linux for a long time,

09:31.960 --> 09:37.400
and I've been at Linux for a reasonably long time as well. I've been working on HGL on contract for

09:38.200 --> 09:43.000
pretty much eight years at this point, and doing all kinds of different things for the project around

09:43.880 --> 09:50.120
keeping the Yogtu stuff up to date, and also doing a lot of the demo and integration type of things.

09:51.720 --> 09:57.080
So, there was maybe almost half of the people indicating that it would be what HGL was, but

09:57.080 --> 10:01.640
I'll do a very quick run-through. So it's a collaborative open source project,

10:02.680 --> 10:08.520
basically trying to build a base platform that you can build an automotive product on.

10:09.400 --> 10:15.240
So it's about 10 years old. We have a vast array of members now, a lot of the major OEMs,

10:15.240 --> 10:21.720
and tier one and two new suppliers. It's pretty much a code first sort of thing, where we are

10:21.720 --> 10:26.120
more focused on let's build the distro and get it there for people to try and involve. A lot of

10:26.120 --> 10:30.760
work went into that. You might have seen HGL demos for several years doing that type of stuff,

10:31.240 --> 10:38.040
but our members were basically saying in 2020 that they weren't interested in maintaining that

10:38.040 --> 10:42.760
because they weren't going to use it in product. They all have their own application frameworks,

10:42.760 --> 10:48.440
or they buy an application framework, and they like to see HGL focus on lower level,

10:48.440 --> 10:55.880
show us how to use open source more than writing new stuff. So we started out, our tech demos,

10:55.880 --> 11:01.560
or integration demos are more like taking best of breed open source projects and showing people

11:01.560 --> 11:06.840
an automotive. Here's how you use these things. And so this really worked out well, because we

11:06.840 --> 11:12.280
weren't connecting. We needed something to show here's how you will do vehicle signaling, and

11:12.280 --> 11:17.720
VSS and Cooks of Al basically were starting to come out around the same time that we needed a new

11:18.520 --> 11:29.720
thing. So I had started playing with Cooks of Al in 2021. Our first release basically was our

11:29.720 --> 11:37.960
spring release in 2022. And it replaced our old signal composer and our can service with basically

11:37.960 --> 11:46.760
the original Cooks of Al server. And so since then, basically since spring 2022, we have recipes in

11:46.760 --> 11:54.360
our layers for HGL to build the Cooks of Al server, now the data broker. And as well, we actually

11:54.360 --> 11:59.560
have some signal customization stuff to sort of access an example of here's how you add some custom

11:59.560 --> 12:04.920
signals. And we use their can feeder to basically sort of wire up and show here's how you put all

12:04.920 --> 12:12.280
these pieces together. We have our own sort of like mocked up HGL virtual car can definitions.

12:12.280 --> 12:20.040
And so that sort of acts as an example for people to use. So that was spring 2022, like I said,

12:20.040 --> 12:25.960
and that won't go into all the nitty-gritty there. But originally, we were using the original Web

12:25.960 --> 12:35.160
socket API, which is a standard thing with sort of companion to VSS. We actually had can working

12:35.160 --> 12:41.560
in our demos. And so through 2022 and into 2023, we were sort of keeping up with the Cooks of Al

12:41.560 --> 12:46.680
releases. I started, you know, some nominal updates around switching how we were doing our

12:46.680 --> 12:55.480
signal additions and stuff. And then this past summer, our pike release, basically, I started

12:55.480 --> 13:00.840
the process of switching over to the data broker, which is the rust based implementation. And so

13:00.840 --> 13:06.280
I actually got interesting because we're based on Yachto Kirkstone, which is the LTS release,

13:06.280 --> 13:11.000
which at this point is two years old. And it has older rust. So we couldn't actually build the

13:11.000 --> 13:16.360
data broker. And so that was the thing where basically, a jail, we contributed upstream, I have

13:16.360 --> 13:22.760
a layer that you can get for the Yachto Kirkstone like mix in basically gives you a newer rust to

13:22.760 --> 13:27.800
be able to build the data broker, which other people I now are no are using for building other

13:27.800 --> 13:34.040
rust projects. So that, you know, we're now starting to look at the data broker, this cop coming

13:34.120 --> 13:40.840
release. Basically, we were now using the absolutely latest version of Cooks. And that now I fully

13:40.840 --> 13:46.600
have us all switched over everything's data broker using gRPC, all our demos are converted.

13:46.600 --> 13:51.320
And that basically acts as a thing. We're trying to see this with the automotive community, because,

13:51.960 --> 13:56.680
you know, we see a lot of vendor, you know, or we encode that people open source is all like

13:56.680 --> 14:01.720
custom IPC and stuff like that. And it's like, Well, no, there are open source projects that are

14:01.720 --> 14:07.720
heavily used that do, you know, gRPC and, you know, interact with cloud providers and stuff,

14:07.720 --> 14:12.680
you don't have to reinvent the wheel. So Cooks of Al has been a very good thing for us to sort of

14:12.680 --> 14:20.040
try and get that to people. So how exactly are we using an AGL? So there's, you know, the assess

14:20.040 --> 14:25.480
applications. As Eric mentioned, the concept of, you know, there's actuators. So there's, you know,

14:25.480 --> 14:30.840
apps that basically just listen to sensors. So like dashboards type of, you know, things like that.

14:31.720 --> 14:37.960
And then for acting on signals, so basically implement an actuator behavior, we have some example

14:37.960 --> 14:44.840
services that do that kind of thing. It's like HVAC sort of stuff. There's also setting an actuator

14:44.840 --> 14:50.200
value. So that would be like on a user facing infotainment app would be like HVAC controls or,

14:50.200 --> 14:58.120
you know, audio or volume that type of stuff. So in our tree right now, we have two demo services

14:58.120 --> 15:03.320
that basically do that actuator side of things. So we have HVAC service that basically listens to

15:03.320 --> 15:10.360
all the like signals in the VSS hierarchy around HVAC controls. And then in our demo setup, which

15:10.360 --> 15:14.840
unfortunately we won't have the full setup here, actually pushes out to drive some fans and things

15:14.840 --> 15:21.160
like that. In the audio side, basically I'm listening into the audio like volume signal that's in

15:21.160 --> 15:27.240
VSS and we, you know, have some custom things that I'm working to push upstream. But basically

15:27.240 --> 15:32.840
actually drive that down into wire plumber and actually like adjust the, you know, the audio setup.

15:35.480 --> 15:40.200
The user facing side are demo applications, the QT demo, which I think we might be showing

15:40.200 --> 15:46.440
tomorrow. Basically we're using the SS signals for like everything pretty much. So all the

15:46.440 --> 15:51.880
applications in that demo, which are in our source tree, you can grab them, basically are all wired

15:51.880 --> 15:57.720
up to do VSS signaling. And the code is sort of in a nice little library now and basically allow you

15:57.720 --> 16:03.320
to reuse it. On our newer Flutter demo, which I'm not truthful, actually maybe I think we'll have

16:03.320 --> 16:09.640
one setup that'll have that tomorrow. Basically it's, you know, it has a unified sort of home screen.

16:09.640 --> 16:16.120
It's doing GRPC from Dart. And right now I don't have that sort of library sort of packaged up yet,

16:16.120 --> 16:22.040
but that might happen this year. Or we might move it to native code. Tidder, who are big into Flutter,

16:22.040 --> 16:27.080
they tell us that's what they do that for some of their stuff. So, you know, we're pretty much,

16:27.080 --> 16:32.760
this is what our newer Flutter demo looks like. And so in this demo, like the tire pressure,

16:33.720 --> 16:39.400
all the likes, you know, vehicle speeds and stuff like that, and all the, like the AC controls and

16:39.400 --> 16:45.240
the temperature, all of that is going through VSS signaling to driving, you know, demons or whatever

16:45.240 --> 16:50.280
you want to do. Or KNData coming in actually gets converted back into a signal update. So,

16:52.680 --> 16:58.280
so there's some extra, you know, presentations from Sven and Eric myself. And we're going to be in the

16:58.280 --> 17:04.520
AW building tomorrow. We're open bed at work today. We're to have that table tomorrow. We'll have our

17:04.520 --> 17:13.320
demos. And this is, you want to do your pitch? Sure. So if this sounds interesting, or even

17:13.400 --> 17:17.400
if it doesn't sound interesting, there's a huge chance to engage with the community around

17:17.400 --> 17:22.440
coaxa and the larger communities in the automotive sector. So we have something called Bosch Connected

17:22.440 --> 17:27.160
Experience. It's hosted by Bosch, but it's basically very large hackathon in Berlin in the end of

17:27.160 --> 17:32.120
February. So a bit short notice, but I would be really glad to see some of you there. We have the

17:32.120 --> 17:37.960
chance to work with a lot of things like maybe actual seats, maybe actual cars, hopefully. Or

17:37.960 --> 17:42.920
and also we plan to have some meetable assimilation of a car which is then connected to a data

17:42.920 --> 17:47.960
broker. So I think it will also be cool what you can do with combining these physical and also this

17:47.960 --> 17:52.840
cyber physical world, if you will. So I really encourage you to do that. If you want to come there,

17:52.840 --> 17:58.040
you normally have to apply. But if you just approach me, I think we'll find a quick way to get you in

17:58.040 --> 18:03.960
because being you in this room, I think qualifies as a good hacker for that. So was that maybe

18:04.040 --> 18:09.400
you there on another community meeting? So thanks a lot for stating this out and we open for questions.

18:09.400 --> 18:10.760
Yeah, I think we have a couple of minutes.

18:23.640 --> 18:24.680
Yeah, we'll have to share.

18:29.640 --> 18:32.760
Thank you. Great talk. Just wanted to understand a little bit about your

18:33.960 --> 18:39.560
testing cycle. So if you you're developing something with this and then you test it in a

18:39.560 --> 18:45.000
virtual environment and then you want to test it on a real car, like what do you do in practice

18:45.000 --> 18:49.800
when you're developing stuff? Do you have an answer to that?

18:55.000 --> 19:00.680
So I wouldn't have a straight answer because here we talk more about implementing that abstraction

19:00.680 --> 19:05.640
layer and mostly testing it against things like this mock service or with something like a feeder

19:05.640 --> 19:11.560
where we have recorded data. But things that you're touching on a small like a really general

19:12.280 --> 19:17.000
topic on how do I actually get my automotive software up and running and into the vehicle. So

19:18.840 --> 19:23.000
that's a bit beyond the scope of what just the Cookshead project is doing. So not too much I

19:23.000 --> 19:27.320
can comment on here, but I think it's a good topic for the communities, either AGL or Eclipse

19:27.400 --> 19:30.920
STB because we have some rounds of meetings where we exactly talk about that.

19:33.640 --> 19:37.560
Yeah, I would just say that it's still actually pretty early days for

19:37.560 --> 19:43.560
DSS. I mean, I know there's a bunch of OEMs and interior ones that are actively working to product

19:43.560 --> 19:49.320
eyes. So I don't think we have visibility yet into how they're actually going about and testing.

19:49.320 --> 19:54.120
So I think hopefully in the next year or two we'll see more and we'll maybe get some ideas there.

19:57.880 --> 19:59.880
Any more questions?

20:10.760 --> 20:15.960
Maybe in two or three words, can you share a little bit about the data broker? Is it something that

20:15.960 --> 20:22.440
looked like Debus? Is it something like look like MQTT broker? Something else? What it looks like

20:22.440 --> 20:27.720
exactly? Is it something that we can reuse elsewhere or is it specific to Cookshead?

20:30.200 --> 20:35.480
I would say the data broker is really specific to VSS data. So it's not like you can

20:36.760 --> 20:42.040
put any data in there. So the way it works is you start the data broker and you also give it this

20:42.040 --> 20:47.400
VSS data model that you have. So the VSS data model is expressed in a JSON or in a YAML file.

20:48.280 --> 20:53.320
Then you put this JSON or YAML file into the data broker and then you can basically do get set

20:53.320 --> 20:58.600
and subscribe. That's why I put up this slide again on this kind of data which is expressed in the

20:58.600 --> 21:04.920
data model and then the data broker implicitly knows about that. When you talk about MQTT,

21:04.920 --> 21:11.160
there's also I have to admit other APIs to interact with VSS. For instance, VIST done in W3C

21:11.800 --> 21:17.000
and they also looked a bit into how to do that over MQTT. But again here,

21:18.920 --> 21:23.640
the data broker is especially tailored to interact with VSS signals. That's why I cannot

21:23.640 --> 21:31.000
generalize it too much. Basically, when I go home, I have a project that our vehicle to cloud,

21:31.000 --> 21:38.120
Expert Group in Agile, wants to see basically pushing from VSS up into the cloud. So I'm going

21:38.200 --> 21:45.240
to be building a proxy that will basically take a list of signals to listen to from the VSS

21:45.240 --> 21:52.200
data broker or cooks a data broker and then basically MQTT them up somewhere. So then talk to

21:52.200 --> 21:58.600
us in a better world. I'll have a story for you then. Maybe one final thing to add to that.

21:58.600 --> 22:02.040
As there's one slide, I actually removed it from the slide deck but there has been a huge

22:02.040 --> 22:06.840
discussion in the VSS community whether VSS is actually fit in the vehicle or whether you should

22:06.840 --> 22:11.320
use VSS more on the cloud back end so that you put all the data from the car and whatever form it

22:11.320 --> 22:15.800
up to the cloud and then consume it in VSS there. And the data broker is kind of like an answer to

22:15.800 --> 22:20.520
yeah, it's also possible to do it in the car in addition to the cloud. So that's kind of the

22:20.520 --> 22:28.920
background story as well. Okay, so I think that's all we have time for for the moment. So thank you

22:28.920 --> 22:39.000
very much Sven Eric and Scott and round of applause.

