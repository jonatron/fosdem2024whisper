WEBVTT

00:00.000 --> 00:06.760
All right, so welcome everyone.

00:06.760 --> 00:09.000
Good morning.

00:09.000 --> 00:10.440
I'm happy to be here.

00:10.440 --> 00:11.760
It's 3 AM back home.

00:11.760 --> 00:16.360
So I'm really looking forward to talking to you about MIT app

00:16.360 --> 00:16.860
inventor.

00:16.860 --> 00:17.720
And I'm being joined.

00:17.720 --> 00:18.600
My name is Evan Patton.

00:18.600 --> 00:22.600
I'm the lead software engineer for this project at MIT.

00:22.600 --> 00:25.560
And I'm being joined by Diego Bishwas, who

00:25.560 --> 00:27.480
are contributors to our open source project.

00:27.480 --> 00:29.080
And they're going to share a little bit

00:29.080 --> 00:32.800
of their experiences working with MIT app inventor.

00:32.800 --> 00:38.440
And just to get started, for those of you

00:38.440 --> 00:40.360
who don't know what MIT app inventor is,

00:40.360 --> 00:43.040
it's a web-based platform for building your own mobile phone

00:43.040 --> 00:44.200
applications.

00:44.200 --> 00:46.000
So you have a kind of drag and drop.

00:46.000 --> 00:50.360
What you see is what you get interface for designing your app.

00:50.360 --> 00:54.000
Then we have a block environment for coding your application.

00:54.000 --> 00:55.620
So in this particular example, we're

00:55.620 --> 00:57.960
coding up a Bluetooth connection to collect some data

00:57.960 --> 00:59.440
from a microbit.

00:59.440 --> 01:03.720
And then you can see that app running on your Android or iOS

01:03.720 --> 01:05.280
device.

01:05.280 --> 01:08.120
As we see here, we get some data that we can then

01:08.120 --> 01:12.000
graph on our phone.

01:12.000 --> 01:15.760
So app inventor has been around for a number of years.

01:15.760 --> 01:17.760
It was started at Google in 2008.

01:17.760 --> 01:20.280
And then it was moved to MIT in open source

01:20.280 --> 01:23.720
under the Apache license in 2011.

01:23.720 --> 01:25.800
We have almost 21 million users.

01:25.800 --> 01:27.480
And probably by the end of this month,

01:27.480 --> 01:30.080
we will hit over 100 million projects

01:30.080 --> 01:32.440
that people have created with app inventor.

01:32.440 --> 01:34.720
And at our peak usage, which is typically in May,

01:34.720 --> 01:37.600
we have about 1.4 million users a month.

01:37.600 --> 01:42.280
So contributions to our project go a long way.

01:42.280 --> 01:44.000
And the mission of app inventor is what

01:44.000 --> 01:46.960
we call computational action.

01:46.960 --> 01:49.560
So the idea is that you can really

01:49.560 --> 01:53.200
use a tool to build a meaningful application for solving

01:53.200 --> 01:56.440
a problem in your community or in your family life

01:56.480 --> 01:59.720
or in your country even.

01:59.720 --> 02:01.760
And we've got a number of examples

02:01.760 --> 02:04.320
of what that looks like.

02:04.320 --> 02:08.400
So back in 2014, there was this program

02:08.400 --> 02:10.320
called the Innovative App Challenge.

02:10.320 --> 02:15.240
And some students built an app to help their blind friend

02:15.240 --> 02:18.160
here navigate his school in Texas.

02:18.160 --> 02:19.720
And they won this competition.

02:19.720 --> 02:22.840
And they even got to meet President Obama at the time.

02:22.840 --> 02:25.760
And this was an app that they built with app inventor

02:25.760 --> 02:27.800
to try to improve somebody else's life.

02:30.680 --> 02:33.320
This is a similar example from Kentucky,

02:33.320 --> 02:37.080
where this young lady here, her grandfather,

02:37.080 --> 02:39.320
was suffering from Alzheimer's and was

02:39.320 --> 02:40.680
forgetting to take his medication.

02:40.680 --> 02:42.560
So she built this app called Farm Alarm

02:42.560 --> 02:45.880
to help him remember to take his medications.

02:45.880 --> 02:48.640
And you can see an example of what that looks like on the right

02:48.640 --> 02:51.120
there.

02:51.120 --> 02:53.280
And it's not just obviously restricted to the United States.

02:53.280 --> 02:54.880
We're used worldwide.

02:54.880 --> 02:58.480
These are the Darvi girls in India.

02:58.480 --> 03:00.480
And so they made an app that helped

03:00.480 --> 03:05.440
them to schedule time to go and fetch water at the community

03:05.440 --> 03:08.120
well to try to make it easier to schedule their lives

03:08.120 --> 03:09.720
around this very important thing that they

03:09.720 --> 03:12.400
need to do for their families.

03:12.400 --> 03:15.440
And then similarly, a little bit closer

03:15.440 --> 03:19.080
to where we are in Moldova, a group of girls

03:19.080 --> 03:22.000
made an app to help track water quality.

03:22.000 --> 03:24.080
And so they were able to collect a bunch of data points

03:24.080 --> 03:26.400
and visualize them on a map.

03:26.400 --> 03:30.080
And you could say, the quality of this water is high,

03:30.080 --> 03:31.400
medium, or low grade.

03:31.400 --> 03:34.040
So that way, you would avoid going to places

03:34.040 --> 03:36.040
where you wouldn't be able to get clean water.

03:39.120 --> 03:42.080
And so one of the reasons why we can do this

03:42.080 --> 03:45.920
is because one, people in the community, volunteers,

03:45.920 --> 03:48.320
have gone ahead and helped translate App In Mentor

03:48.320 --> 03:50.080
into a number of different languages.

03:50.080 --> 03:52.560
We're up to 20 languages now.

03:52.560 --> 03:57.400
And maybe you would be willing to help us make that even higher.

03:57.400 --> 03:58.800
And so you can go into App In Mentor

03:58.800 --> 04:01.960
and you can code an app in your own language

04:01.960 --> 04:04.680
because the entire interface is internationalized.

04:07.440 --> 04:10.680
We have a website up in the top right there,

04:10.680 --> 04:14.160
AppInMentor.mit.edu, where you can go and access

04:14.160 --> 04:15.800
a number of tutorials.

04:15.800 --> 04:18.040
And we've got them in a number of different themes.

04:18.040 --> 04:20.360
So obviously, there's a lot of beginner stuff.

04:20.360 --> 04:22.080
But we're doing a lot of advanced things, too,

04:22.080 --> 04:25.400
where you can learn more about data science and visualization,

04:25.400 --> 04:26.960
do some work with internet of things

04:26.960 --> 04:31.200
and connecting to nearby devices like Arduino and Microbit.

04:31.200 --> 04:34.200
And we have a whole suite of different examples

04:34.200 --> 04:38.000
of using artificial intelligence, including things

04:38.000 --> 04:38.500
like chat.

04:38.500 --> 04:39.000
GPT.

04:43.240 --> 04:47.040
And in the case of using the Android version,

04:47.040 --> 04:48.960
we also have a number of different extensions

04:48.960 --> 04:52.480
that you can use, or you can develop your own, again,

04:52.480 --> 04:54.160
because App In Mentor is open source.

04:54.160 --> 04:56.040
It makes it very easy to extend it.

04:56.040 --> 05:01.000
And we have, at the end, a link to the slideshow.

05:01.000 --> 05:03.920
So you should be able to access all this content as well.

05:07.240 --> 05:11.360
As I mentioned, we are open source under the Apache license.

05:11.360 --> 05:15.840
You can get to us on GitHub at mit-cml.

05:15.840 --> 05:20.680
And we've had over 180 contributors to the project

05:20.680 --> 05:24.160
over the last decade.

05:24.160 --> 05:25.960
Now, I'm going to hand it over to Vishwas.

05:25.960 --> 05:29.640
He's going to give you a little example of how App In Mentor works.

05:29.640 --> 05:30.280
So you can see it.

05:30.280 --> 05:34.320
And if you like or you're available,

05:34.320 --> 05:36.800
I don't know where's Peter.

05:36.800 --> 05:39.280
Do we have any more slots available for the workshop?

05:39.280 --> 05:39.960
Do you know?

05:39.960 --> 05:40.560
Five.

05:40.560 --> 05:41.120
Five?

05:41.120 --> 05:44.440
OK, so if you would like to learn more and actually try

05:44.440 --> 05:47.240
building your own app, we have a workshop that's

05:47.240 --> 05:49.640
happening at 12.30 in J Building.

05:49.640 --> 05:52.520
Do you need an instance for children between 7 and 7?

05:52.520 --> 05:53.520
Yes.

05:53.520 --> 05:54.880
7 to 17.

05:54.880 --> 05:56.240
Right, OK.

05:56.240 --> 05:57.480
Great.

05:57.480 --> 06:02.040
So now, thank you, Evan, for an introduction to App In Mentor.

06:02.040 --> 06:04.200
And let's actually go and dive into it.

06:05.200 --> 06:06.200
No.

06:06.200 --> 06:07.200
Is that good?

06:07.200 --> 06:08.680
Yeah, OK.

06:08.680 --> 06:13.680
So you can follow along by going to code.appinventor.mit.edu.

06:13.680 --> 06:15.840
You don't have to have a Google account for anything.

06:15.840 --> 06:21.400
You can just log in and start doubling with Android apps.

06:21.400 --> 06:25.240
The example I'll get started with is Hello, Per, because it's

06:25.240 --> 06:28.520
trivial to follow along with.

06:28.520 --> 06:31.640
And it's also a fun app.

06:31.640 --> 06:33.120
The premise is simple.

06:33.120 --> 06:34.520
It's a picture of a cat.

06:34.520 --> 06:36.800
And when you click on it, it says meow.

06:40.400 --> 06:43.960
And we use this example a lot of the time because it's easy to

06:43.960 --> 06:44.800
get started with.

06:44.800 --> 06:48.840
And as I said earlier, it's a fun little app to play with.

06:48.840 --> 06:53.360
So as an intro to the interface, on the left, you

06:53.360 --> 06:55.360
see there's several components.

06:55.360 --> 06:58.160
And components are things you can drag and drop into the app.

06:58.160 --> 07:01.120
So let's say if you want to do that, you can do that.

07:01.120 --> 07:03.440
Let's say if I want to add a button, you can drag and drop

07:03.440 --> 07:04.400
it here.

07:04.400 --> 07:05.800
I can get rid of it from here.

07:08.680 --> 07:09.520
And so on.

07:09.520 --> 07:12.960
And there's loads of components, stuff you can see on

07:12.960 --> 07:16.600
the screen, stuff you use to put together things, multiple

07:16.600 --> 07:21.920
things that you can see on the screen, stuff to access like

07:21.920 --> 07:27.720
the camera or play sounds, translate text.

07:27.720 --> 07:30.000
If you're making a game, there's components to do that as

07:30.000 --> 07:30.360
well.

07:30.360 --> 07:33.600
And then you can see how there's a variety of components

07:33.600 --> 07:34.440
to play around with.

07:34.440 --> 07:37.000
If you have a Lego Mindstorm, there's components for

07:37.000 --> 07:41.920
Mindstorms and a few other ones that Evan will talk about

07:41.920 --> 07:44.760
in a bit.

07:44.760 --> 07:47.560
And on the right, well, let's get to the main part.

07:47.560 --> 07:49.280
That's the phone itself.

07:49.280 --> 07:52.360
The great thing about app inventories, you can see what

07:52.360 --> 07:54.000
your app's going to look like.

07:54.000 --> 07:55.120
And you can move things around.

07:55.120 --> 07:55.920
You can add stuff.

07:55.920 --> 07:56.920
You can edit stuff.

07:56.920 --> 08:01.840
So this is a button with a picture of a cat as its image.

08:01.840 --> 08:03.680
As you can see here, I can set it to none.

08:03.680 --> 08:12.640
And it goes back to nothing.

08:12.640 --> 08:14.600
And I can set it to the cat again.

08:14.600 --> 08:15.800
So it's instant.

08:15.800 --> 08:19.000
And it's really easy to follow along with.

08:19.000 --> 08:21.640
Another great thing about app inventor is to the left, you

08:21.640 --> 08:24.640
can see something called the emulator open.

08:24.640 --> 08:31.120
If I connect to that, it might take a moment.

08:31.120 --> 08:32.920
But let's be patient.

08:38.720 --> 08:42.240
Right, so while it's booting up, the emulator is great

08:42.240 --> 08:44.560
because it lets you view your app on your phone.

08:44.560 --> 08:47.000
Well, it's on the laptop now.

08:47.000 --> 08:50.480
But you can also install the app inventor companion from the

08:50.480 --> 08:52.080
Play Store or the App Store.

08:52.080 --> 08:56.800
And you will see your app live.

08:56.800 --> 09:00.800
And any changes you make will be reflected in real time,

09:00.800 --> 09:04.360
which is great for prototyping.

09:04.360 --> 09:05.680
There you go.

09:05.680 --> 09:14.240
Now, if I add something else, it will drop here.

09:14.240 --> 09:20.120
And I can interact with it like I do any other app.

09:20.640 --> 09:24.080
Now that's how you design the app.

09:24.080 --> 09:26.560
Let's try and get some functionality in.

09:26.560 --> 09:31.480
So we want the cat to meow when the button is pressed.

09:31.480 --> 09:35.000
And the way we do that is by using blocks.

09:35.000 --> 09:38.320
Now, at the top right, you see there's two parts to App

09:38.320 --> 09:38.880
Inventor.

09:38.880 --> 09:41.880
One is the designer, where you design stuff.

09:41.880 --> 09:46.640
And the blocks area is where you actually build the

09:46.640 --> 09:49.400
functionality of the app.

09:49.400 --> 09:52.160
So HelloPur is very simple.

09:52.160 --> 09:55.360
Earlier, we saw that the cat was basically a button.

09:55.360 --> 10:00.440
So when the button was clicked, you call Play on the sound.

10:00.440 --> 10:03.840
And what is sound, though?

10:03.840 --> 10:06.440
You'll see there's nothing called sound visible on the

10:06.440 --> 10:07.240
phone screen.

10:07.240 --> 10:10.760
But below, there is a non-visible component called

10:10.760 --> 10:11.600
sound.

10:11.600 --> 10:14.240
And that's a non-visible component is exactly what it

10:14.240 --> 10:14.680
sounds like.

10:14.680 --> 10:17.120
It doesn't show up on the screen, but it lets you do

10:17.120 --> 10:22.120
things that are important, like playing a sound.

10:22.120 --> 10:26.640
Now, what sound do I want to play?

10:26.640 --> 10:29.200
I can set it from the source, which is meow.

10:29.200 --> 10:33.880
And if I want to know what meow is, there's the media

10:33.880 --> 10:34.880
panel.

10:34.880 --> 10:37.080
And I can click on meow.

10:37.080 --> 10:39.200
I don't know if this is going to show up, but I can preview

10:39.200 --> 10:41.480
it.

10:41.480 --> 10:42.800
OK, plays on here.

10:42.800 --> 10:45.280
Great.

10:45.320 --> 10:48.280
So meow is the sound that we want to play.

10:48.280 --> 10:52.400
And OK, there you go.

10:55.600 --> 10:57.760
And when the button was clicked, just say, OK, I want to

10:57.760 --> 10:58.880
play the sound.

10:58.880 --> 11:02.840
And also, vibrate the phone for half a second, so 500

11:02.840 --> 11:04.160
milliseconds.

11:04.160 --> 11:08.720
And if I do that, OK, it says meow on here.

11:08.720 --> 11:10.840
I'll turn it up.

11:10.840 --> 11:11.320
Sure.

11:11.320 --> 11:14.240
Let me also hold my mic here.

11:14.240 --> 11:15.240
There you go.

11:16.240 --> 11:18.200
All right.

11:18.200 --> 11:23.760
Let's also maybe try and make a change to the app while

11:23.760 --> 11:24.880
we're still here.

11:24.880 --> 11:29.600
I will use the Notifier component just to show

11:29.600 --> 11:31.720
notifications.

11:31.720 --> 11:34.440
And what I want to say is when the button was clicked, I

11:34.440 --> 11:36.080
want to show the text meow as well.

11:36.080 --> 11:38.320
And that's also fairly straightforward.

11:38.320 --> 11:41.720
All I do is so you can see all the blocks available by

11:41.720 --> 11:44.160
clicking here.

11:44.200 --> 11:45.520
There's lots to work with.

11:49.440 --> 11:52.760
Yeah, you can pretty much do anything you want in your app

11:52.760 --> 11:54.360
by using a combination of these blocks.

11:54.360 --> 11:56.320
It's just like building with Lego.

11:56.320 --> 12:01.640
You start real small, and then add stuff on to it and make

12:01.640 --> 12:02.920
your whole app.

12:02.920 --> 12:07.360
For now, all I want to say is I want to show an alert.

12:07.360 --> 12:09.080
And we'll add this to the bottom.

12:09.080 --> 12:13.240
So after the sound has played and the phone has vibrated, I

12:13.240 --> 12:14.760
want to show an alert.

12:14.760 --> 12:18.280
And I can go to the text category, and I will grab an

12:18.280 --> 12:21.760
empty text box and connect it here.

12:21.760 --> 12:24.120
So you can see how it all joins together nicely.

12:24.120 --> 12:28.440
And I want to say meow.

12:28.440 --> 12:35.720
If I try it out, there you go.

12:35.720 --> 12:38.560
So as you can see, it's really easy to get started.

12:38.560 --> 12:40.440
It's really easy to start making changes.

12:40.440 --> 12:43.480
And overall, at least in my opinion, it's great to

12:43.480 --> 12:46.800
actually get into how Android apps are made and make one for

12:46.800 --> 12:47.960
yourself.

12:47.960 --> 12:49.240
All right.

12:49.240 --> 12:50.520
OK, thank you very much, Voswas.

12:53.240 --> 12:56.200
So I briefly wanted to talk about the source organization

12:56.200 --> 12:58.280
of app inventors, considering that many of you might be

12:58.280 --> 13:00.480
willing to contribute to the project.

13:00.480 --> 13:03.280
And therefore, it's helpful to kind of understand how the

13:03.280 --> 13:04.920
project is put together.

13:04.920 --> 13:08.800
So as Voswas mentioned, there are a lot of components in

13:08.800 --> 13:09.280
the system.

13:09.280 --> 13:12.640
We have 96 different things you can use for app inventor

13:12.640 --> 13:14.920
spread across 13 different categories.

13:14.920 --> 13:18.240
All of these are written in Java, and they link to the

13:18.240 --> 13:19.520
native Android libraries.

13:19.520 --> 13:22.840
This is not some sort of emulated environment.

13:22.840 --> 13:26.160
You're actually running real code on a real phone when

13:26.160 --> 13:28.720
you're using it on your own device.

13:28.720 --> 13:31.440
And as we mentioned before, you have extensions where if we

13:31.440 --> 13:33.120
haven't implemented something, you can implement it

13:33.120 --> 13:36.520
yourself and add it into app inventor without even having to

13:36.520 --> 13:39.520
build the whole source tree.

13:39.520 --> 13:42.200
We have iOS, which is a more recent addition to the

13:42.200 --> 13:43.120
project.

13:43.120 --> 13:45.680
We open sourced it last year.

13:45.680 --> 13:49.440
And currently, of the 96 components, 63 have been

13:49.440 --> 13:51.800
implemented for iOS.

13:51.800 --> 13:54.640
We have, in the past, had Google Summer of Code projects

13:54.640 --> 13:55.800
to work on this.

13:55.800 --> 13:57.760
We're hoping to have more of them again this year.

13:57.760 --> 13:59.760
So if you're interested in programs like Google Summer

13:59.760 --> 14:03.480
of Code, feel free to come after and talk to me about that.

14:03.480 --> 14:05.600
And all of these, again, because it's native code, are

14:05.640 --> 14:07.080
primarily written in Swift.

14:10.880 --> 14:11.760
I'm going to skip this.

14:11.760 --> 14:15.080
Obviously, we saw how components work in the demo.

14:15.080 --> 14:16.440
We use Blockly.

14:16.440 --> 14:18.680
And I believe we have Christopher Allen here.

14:18.680 --> 14:20.720
He's going to speak about Blockly a little bit later in

14:20.720 --> 14:21.560
the day.

14:21.560 --> 14:24.200
But Blockly is this wonderful project that allows you to

14:24.200 --> 14:28.560
build your own environments for coding using a block

14:28.560 --> 14:30.080
language.

14:30.080 --> 14:33.320
And so you provide the back end.

14:33.360 --> 14:35.840
I think they have five languages they currently

14:35.840 --> 14:36.480
support.

14:36.480 --> 14:38.360
We have our own language that we've developed for App

14:38.360 --> 14:40.400
Inventor that we generate.

14:40.400 --> 14:43.440
And this basically is responsible for creating,

14:43.440 --> 14:46.480
taking your blocks, turning it into code that then executes

14:46.480 --> 14:47.680
on the device.

14:50.440 --> 14:55.960
And then we use App Engine to host the front end.

14:55.960 --> 14:58.560
So like the editor you saw when it's running in the

14:58.560 --> 15:02.040
browser, the client is written primarily in Java using

15:02.040 --> 15:03.120
GWT.

15:03.120 --> 15:05.680
And then the back end is talking to a bunch of

15:05.680 --> 15:08.880
different services, including what we call the Build

15:08.880 --> 15:09.760
Server.

15:09.760 --> 15:12.800
And the Build Server is responsible for taking your

15:12.800 --> 15:16.640
application and actually converting it into a real

15:16.640 --> 15:17.800
running app.

15:17.800 --> 15:20.640
And we saw the companion version where Visuals is able

15:20.640 --> 15:24.240
to make changes in real time and see how that works.

15:24.240 --> 15:28.240
But when he closes the emulator, he loses that work.

15:28.240 --> 15:30.200
Well, he loses the running version of the work.

15:30.240 --> 15:32.560
Obviously, the project's still stored on the server.

15:32.560 --> 15:37.280
But you can compile your application as an APK.

15:37.280 --> 15:41.400
Or it's not quite released yet, but we have a beta version

15:41.400 --> 15:44.120
that allows you to build for iOS as well.

15:44.120 --> 15:46.800
And then you can actually bundle your app and then run it

15:46.800 --> 15:48.520
on your phone, have it there.

15:48.520 --> 15:52.680
I've actually got a copy of HelloPer that we just did on

15:52.680 --> 15:54.760
my iPhone, for example.

15:54.760 --> 15:57.480
And so that allows you to kind of take your project with

15:57.480 --> 15:58.520
you.

15:58.520 --> 16:01.120
And we run 21 Build Servers.

16:01.120 --> 16:04.240
And we can support 168 simultaneous builds in the

16:04.240 --> 16:07.080
cloud for supporting app and metric users.

16:09.800 --> 16:12.640
Now, the project structure is fairly complicated.

16:12.640 --> 16:17.920
You saw a lot of these things in the examples already.

16:17.920 --> 16:21.440
Assets, where you have your different media files.

16:21.440 --> 16:24.880
And additionally, if you have extensions, you've got

16:24.880 --> 16:27.360
extensions or considered assets of the project.

16:27.360 --> 16:30.600
You've got your source files, which are your blocks and your

16:30.600 --> 16:33.480
design, and then project properties.

16:33.480 --> 16:36.360
And so internally, App Inventor represents us all using a zip

16:36.360 --> 16:37.280
file.

16:37.280 --> 16:40.080
You can poke around and try it out if you want to learn more

16:40.080 --> 16:42.880
about the internal structure.

16:42.880 --> 16:46.160
But it's very helpful if you are working on the App Inventor

16:46.160 --> 16:49.800
code to know how the files are laid out so you can edit them

16:49.800 --> 16:54.560
and try things out at the source level.

16:54.560 --> 16:56.680
Now, I put into slides here.

16:56.680 --> 16:58.000
Is anyone interested?

16:58.000 --> 17:00.200
How many people here are contributing to open source

17:00.200 --> 17:02.560
projects already, or are interested in contributing to

17:02.560 --> 17:03.920
open source projects?

17:03.920 --> 17:05.720
All right, we've got quite a few.

17:05.720 --> 17:09.360
So if you're interested in contributing to App Inventor,

17:09.360 --> 17:12.880
we do have some example instructions for how to do that.

17:12.880 --> 17:14.960
Obviously, because this is a project that's building for

17:14.960 --> 17:16.320
multiple platforms.

17:16.320 --> 17:16.960
We've got web.

17:16.960 --> 17:17.640
We've got Android.

17:17.640 --> 17:19.280
We've got iOS.

17:19.280 --> 17:22.280
It's a little bit more complicated than a regular

17:22.280 --> 17:25.920
process where maybe you're just building for web.

17:25.920 --> 17:28.680
And so I do have this here.

17:28.680 --> 17:32.680
I'm not going to go into much detail on it, just because it's

17:32.680 --> 17:34.080
got quite a few steps.

17:34.080 --> 17:37.360
But as I said before, we'll have a link to the slides at the

17:37.360 --> 17:41.800
end so you can go back and reference these.

17:41.800 --> 17:44.640
So let's talk about contributing to the project,

17:44.640 --> 17:47.240
which is really why we do open source.

17:47.240 --> 17:49.720
We want to be able to contribute to these projects and

17:49.720 --> 17:51.400
make them better.

17:51.400 --> 17:54.960
So one way you can contribute is you can help us with

17:54.960 --> 17:55.880
translations.

17:55.880 --> 18:01.000
So as I mentioned earlier, we support 20 languages already.

18:01.000 --> 18:05.240
But these are all contributed by volunteers.

18:05.240 --> 18:06.120
And you can sign up.

18:06.120 --> 18:08.200
We use WebLate.

18:08.200 --> 18:11.240
So weblate.appinventor.mit.edu.

18:11.240 --> 18:15.360
And then you can email my colleague Susan, who will

18:15.360 --> 18:17.440
set you up with a specific language.

18:17.440 --> 18:20.640
You just need to let her know your username and which

18:20.640 --> 18:22.720
language you plan to contribute to.

18:25.840 --> 18:29.000
The second way you can contribute to App Inventor

18:29.000 --> 18:31.480
is through GitHub.

18:31.480 --> 18:34.400
So we actually have, again, because we have this

18:34.400 --> 18:37.440
complicated build process, we have two different branches

18:37.440 --> 18:38.760
we do development on.

18:38.760 --> 18:40.800
So the first one is called UCR.

18:40.800 --> 18:44.080
UCR represents all of the changes to components that are

18:44.080 --> 18:46.120
going to run on the phone.

18:46.120 --> 18:47.780
So that's if you're making changes to the Android

18:47.780 --> 18:51.600
piece of the software, or changes to the iOS portion of

18:51.600 --> 18:52.800
the software.

18:52.800 --> 18:56.120
And the reason we do this is because when we do a release

18:56.120 --> 18:59.520
of a new component, we have to put it through the app store

18:59.520 --> 19:00.520
process.

19:00.520 --> 19:03.080
We have to put it into the Play Store process, which can

19:03.080 --> 19:05.480
sometimes take a couple of days.

19:05.480 --> 19:11.280
And so we tend to group the component releases into larger

19:11.280 --> 19:17.800
chunks to deal with the approval process there.

19:17.800 --> 19:20.520
All of the changes go to master.

19:20.520 --> 19:23.720
And then we build from master pretty regularly and deploy

19:23.720 --> 19:25.560
usually once a month.

19:25.560 --> 19:28.880
Or if there's immediate bug fixes that need to go out,

19:28.880 --> 19:33.000
we'll do it as frequently as needed.

19:33.000 --> 19:36.480
And then when we do a component release, UCR gets merged

19:36.480 --> 19:38.440
into master, and then we release the whole bundle

19:38.440 --> 19:41.040
altogether.

19:41.040 --> 19:44.240
We have issues that are marked help wanted on GitHub.

19:44.240 --> 19:48.320
So if you are new to contributing to open source, we

19:48.360 --> 19:52.000
have some smaller issues that are easier to sink your teeth

19:52.000 --> 19:54.200
into and get started.

19:54.200 --> 19:58.480
And we tag everything, which branch to start from and all

19:58.480 --> 19:59.200
of that.

19:59.200 --> 20:03.760
And we will help you if you have any problems making

20:03.760 --> 20:05.080
pull requests.

20:07.880 --> 20:11.280
And I mentioned before, and I want to invite Vishwas and

20:11.280 --> 20:13.200
Diego to really talk about their experiences with Google

20:13.200 --> 20:14.160
Summer of Code.

20:14.160 --> 20:16.600
We have participated in Google Summer of Code for a number

20:16.600 --> 20:18.280
of years now.

20:18.280 --> 20:22.760
I don't know the exact number, but I think it's six or seven.

20:22.760 --> 20:26.000
We are currently waiting on the 2024 decision, but we're

20:26.000 --> 20:27.000
hopeful.

20:27.000 --> 20:29.800
And if you'd like to learn more about contributing through

20:29.800 --> 20:33.280
Google Summer of Code, we have a community site where

20:33.280 --> 20:35.640
people can ask questions about App Inventor and there's a

20:35.640 --> 20:39.080
whole section dedicated to folks interested in Google

20:39.080 --> 20:39.760
Summer of Code.

20:39.760 --> 20:42.520
So we definitely would encourage you if you are

20:42.520 --> 20:45.520
eligible for Google Summer of Code to consider applying for

20:45.520 --> 20:47.000
App Inventor.

20:47.000 --> 20:49.880
And then Vishwas, your first one.

20:49.880 --> 20:52.480
Thank you.

20:52.480 --> 20:58.000
So a bit of background about me before I go into why I did

20:58.000 --> 21:00.200
Google Summer of Code for App Inventor.

21:00.200 --> 21:03.440
I started dabbling with App Inventor when I was 12, 13, I

21:03.440 --> 21:07.400
think, just starting small with probably the

21:07.400 --> 21:09.120
Hello Pro App as well.

21:09.120 --> 21:12.920
And yes, slowly got into making extensions for it in Java

21:12.920 --> 21:16.720
and eventually got around to actually making changes to the

21:16.720 --> 21:18.040
code base itself.

21:18.040 --> 21:20.280
So it's been a long journey.

21:20.280 --> 21:26.720
But I think over the years, I've come to be able to mess

21:26.720 --> 21:28.960
around with the code base enough to actually make a few

21:28.960 --> 21:30.480
meaningful changes, at least.

21:30.480 --> 21:35.400
And one of those was my Google Summer of Code project, which

21:35.400 --> 21:41.000
was in 2021, which was to change some of the internals of

21:41.000 --> 21:42.720
App Inventor to make it more modular.

21:42.720 --> 21:47.160
So at the moment, if I go back to the demo, you'll see that,

21:47.160 --> 21:48.760
well, it's not really that visible.

21:48.760 --> 21:51.440
But the whole thing is a monolith.

21:51.440 --> 21:56.880
It's one massive bundle that's generated.

21:56.880 --> 22:01.640
And as it might be evident, it's quite hard to maintain.

22:01.640 --> 22:03.400
It's hard to make changes to.

22:03.400 --> 22:06.960
And it's also not really that responsive.

22:06.960 --> 22:08.680
So it doesn't work great on mobile.

22:08.720 --> 22:15.600
So my project was to modernize it a little, make it look a bit

22:15.600 --> 22:19.200
prettier as well, I think, bring it to this decade.

22:19.200 --> 22:23.000
And also make it such that it's going to be easy moving forward

22:23.000 --> 22:25.760
to make further changes to the UI.

22:25.760 --> 22:27.680
And that was back in 2021.

22:27.680 --> 22:34.320
And in 2023, well, last year, I also mentored a project that

22:34.320 --> 22:42.160
was to add a new UI to collate all project-related properties

22:42.160 --> 22:43.240
into a dialog.

22:43.240 --> 22:46.520
So if I go back to App Inventor here, this should be merged,

22:46.520 --> 22:47.000
I think.

22:49.560 --> 22:52.600
So there's some properties.

22:52.600 --> 22:57.600
So let's say buttons have properties like font size and

22:57.600 --> 22:58.360
background color.

22:58.360 --> 23:00.560
But what about properties of the app itself?

23:00.560 --> 23:06.000
And initially, they were in screen one, which in hindsight

23:06.000 --> 23:08.280
probably doesn't make a lot of sense.

23:08.280 --> 23:13.040
But now they have been isolated into a separate dialog.

23:13.040 --> 23:16.880
So this was work that Aaron Modi did as part of his Google

23:16.880 --> 23:20.040
Summer Code project, which I mentored last year.

23:20.040 --> 23:22.800
I think what I want to get across is really easy to start

23:22.800 --> 23:27.160
contributing and really easy to sink your teeth into whatever

23:27.160 --> 23:28.280
you fancy.

23:28.280 --> 23:34.280
And go from there and become one of the main contributors

23:34.280 --> 23:35.040
to the project.

23:35.040 --> 23:38.560
So the barrier to entry is incredibly low.

23:38.560 --> 23:41.560
And I encourage all of you to start maybe just look at the

23:41.560 --> 23:45.000
source code if you can, and then go from there.

23:45.000 --> 23:47.000
I would also like to invite Diego.

23:47.000 --> 23:49.640
He's also done a Google Summer Code project and also

23:49.640 --> 23:51.320
mentored projects himself.

23:51.320 --> 23:53.520
So yeah.

23:53.520 --> 23:53.880
Thank you.

23:53.880 --> 23:55.840
This was a good morning, everyone.

23:55.840 --> 23:58.240
So my journey is kind of similar to this was I started

23:58.320 --> 24:02.880
programming with App Inventor back in 2014 when I had an idea

24:02.880 --> 24:04.120
but I didn't know how to code it.

24:04.120 --> 24:09.760
So one of my university, high school professors told me, oh,

24:09.760 --> 24:11.960
you can use App Inventor and build the app without coding.

24:11.960 --> 24:14.520
And that's how I got into App Inventor.

24:14.520 --> 24:18.000
Then 2015, 2016, I started contributing to the project.

24:18.000 --> 24:22.160
And in 2020, I was also a Google Summer Code student when I

24:22.160 --> 24:26.120
was developing a new format to export the app, which is now

24:26.120 --> 24:27.600
available for App Inventor.

24:27.640 --> 24:33.320
So when we are building the app, we have, sorry, yeah.

24:33.320 --> 24:33.920
Oh, it's not?

24:33.920 --> 24:34.880
OK.

24:34.880 --> 24:35.280
Yeah.

24:35.280 --> 24:38.400
So when we are exporting the apps, we usually have the

24:38.400 --> 24:41.120
typical Android APK file, which is the standard one.

24:41.120 --> 24:44.560
But then Google added the Android App Bundle distribution

24:44.560 --> 24:46.600
format for Google Play Store.

24:46.600 --> 24:49.360
And I have basically implemented these new formats so

24:49.360 --> 24:51.800
people can distribute the apps through this new format into

24:51.800 --> 24:55.200
the Play Store, which is usually more optimized for the

24:55.200 --> 24:56.880
Google Play Store.

24:56.880 --> 24:59.120
Thanks, Evan.

24:59.120 --> 25:01.040
Basically, just to give another view of the difference in

25:01.040 --> 25:04.240
a standard APK file, basically all the assets, all the

25:04.240 --> 25:07.400
kind of languages that architectures are bundled into

25:07.400 --> 25:09.520
the same file with an AAB file.

25:09.520 --> 25:12.560
Instead, the Google Play Store will automatically pick the

25:12.560 --> 25:14.880
ones that are needed for the mobile phone.

25:14.880 --> 25:18.000
And this overall size is going to be way, way smaller.

25:18.000 --> 25:21.080
It's basically Google chooses which assets to pack and

25:21.080 --> 25:24.880
distribute to your specific mobile phone.

25:24.880 --> 25:29.800
And as part of this project, I was also refactoring the

25:29.800 --> 25:32.960
computer, because it was also a monolith of 3,000 lines of

25:32.960 --> 25:33.560
code.

25:33.560 --> 25:36.800
So just to give another view of the changes, this is how we

25:36.800 --> 25:40.560
basically invoked the compiler before the best passing

25:40.560 --> 25:43.640
tens of parameters into the same constructor, which is

25:43.640 --> 25:46.600
kind of risky sometimes if we mess up the order.

25:46.600 --> 25:49.400
So this is the final solution.

25:49.400 --> 25:53.200
It may seem a bit more complex, a bit more step through.

25:53.200 --> 25:55.880
But in the end, it's easier to understand, because all the

25:55.880 --> 25:57.640
parameters are properly named.

25:57.640 --> 26:01.720
And thinking about iOS, the compiler now has a step-based

26:01.720 --> 26:02.600
process.

26:02.600 --> 26:06.040
So for the iOS later on, when it's going to be available,

26:06.040 --> 26:09.480
the build server, this same format of adding new steps

26:09.480 --> 26:16.280
will be conditionally added for the iOS build procedure.

26:16.280 --> 26:18.840
And last year, Zimas Beach was also a mentor.

26:18.840 --> 26:22.520
In MIT, I was mentoring Drubstree Vastava, where he

26:22.520 --> 26:25.920
was implementing some versions for the Android components

26:25.920 --> 26:28.480
that were not available for the iOS.

26:28.480 --> 26:31.320
So that's why last year, because it was open source, we

26:31.320 --> 26:34.760
were able to include this iOS support for our Google

26:34.760 --> 26:37.240
Summer of Code project.

26:37.240 --> 26:40.520
And as Alishia mentioned in Google Summer of Code and

26:40.520 --> 26:45.480
Google Blockly, so we had a student in 2020, Becca Westberg,

26:45.480 --> 26:48.680
that was starting to contribute to a pin mentor, adding some

26:48.680 --> 26:50.520
enumeration blocks for a pin mentor.

26:50.520 --> 26:53.920
And now Becca is basically working and contributing very

26:53.920 --> 26:58.200
actively to the Google Blockly project.

26:58.200 --> 27:01.360
And now, Evan can give more overview on the teaching and

27:01.360 --> 27:04.000
mentoring from App Inventor.

27:04.000 --> 27:07.600
Yes, so we've talked a lot about App Inventor in terms of

27:07.600 --> 27:10.440
the technical side of things, but I did want to offer as

27:10.440 --> 27:14.680
well that there is a lot that's available for you if

27:14.680 --> 27:17.920
you're an educator or maybe a parent who's interested in

27:17.920 --> 27:21.160
starting an after school club or even students.

27:21.160 --> 27:23.320
I mean, we've had a number of students who have come to

27:23.320 --> 27:27.960
MIT as undergraduates and will come work on App

27:27.960 --> 27:28.320
Inventor.

27:28.320 --> 27:30.680
And they say, oh yeah, I started a high school club

27:30.680 --> 27:34.680
because we didn't have programming classes and I

27:34.680 --> 27:36.720
wanted a way of learning to program.

27:36.720 --> 27:38.920
And my friends, we wanted to learn together.

27:38.920 --> 27:41.840
And we found App Inventor and it was great.

27:41.840 --> 27:46.800
So we have on our website a number of curricula, both at

27:46.800 --> 27:48.240
the middle school and high school level.

27:48.240 --> 27:52.920
So kind of looking at ages maybe kind of 12 and up or 11

27:52.920 --> 27:56.560
and up that are available.

27:56.560 --> 27:58.640
It's mostly in English, but we do have some in Spanish.

27:58.640 --> 28:02.000
And of course, again, we welcome very greatly

28:02.000 --> 28:04.720
contributors who would be interested in helping us make

28:04.720 --> 28:07.680
that material available in more languages.

28:07.680 --> 28:09.160
There are a number of programs out there.

28:09.160 --> 28:13.400
So many of the examples that I talked about earlier came

28:13.400 --> 28:16.600
from a program called Technivation, which is a

28:16.600 --> 28:20.520
program that helps mentor young women to have them work in

28:20.520 --> 28:20.880
groups.

28:20.880 --> 28:23.160
They learn how to do things like develop a business plan and

28:23.160 --> 28:27.560
build an application to try and address a need in the

28:27.560 --> 28:28.600
community.

28:28.600 --> 28:30.680
And they have a big competition, a bunch of regional

28:30.680 --> 28:32.960
competitions and there's a worldwide competition where

28:32.960 --> 28:36.600
the winners go, I think usually to London, and they

28:36.600 --> 28:38.960
present their app ideas.

28:38.960 --> 28:41.720
And so that's a wonderful way if you would like to mentor

28:41.720 --> 28:44.440
those types of programs, I can get you in touch with people.

28:44.440 --> 28:48.360
I know folks like Peter have worked with groups like

28:48.360 --> 28:52.640
Coder Dojo to try to make these programs available for

28:52.640 --> 28:54.920
students in Europe.

28:54.920 --> 28:58.920
And there are many others in all parts of the world.

28:58.920 --> 29:02.600
And we have an app and mentor foundation now which runs a

29:02.600 --> 29:06.400
seasonal apathon, we call it, where you build your own app

29:06.400 --> 29:07.360
and compete.

29:07.360 --> 29:11.480
And these are happening all around the world now.

29:11.480 --> 29:15.160
OK, let's continue.

29:15.160 --> 29:18.000
So the last thing I want to kind of leave you with is a

29:18.000 --> 29:21.880
vision of the future and some of the work that we're doing.

29:21.880 --> 29:24.240
Obviously, we're producing this project that is used by

29:24.240 --> 29:27.240
millions of people, but we're also a research group and we're

29:27.240 --> 29:29.960
trying to think about what does the future look like in terms

29:29.960 --> 29:33.000
of computing and in terms of programming.

29:33.000 --> 29:35.520
And so we have this new project we're working on, built on

29:35.520 --> 29:37.680
app and mentor called Aptly.

29:37.680 --> 29:41.360
And the idea behind Aptly is we're trying to take the ease

29:41.360 --> 29:44.800
of developing an app with app and mentor and combine it with

29:44.800 --> 29:47.360
the kind of explosion of large language models that we've

29:47.360 --> 29:49.840
seen over the last two years.

29:49.840 --> 29:55.640
And so the idea is that you can provide a description of an

29:55.640 --> 30:02.400
application in natural language and then it uses GPT-4 to

30:02.400 --> 30:06.160
generate a textual version of the program.

30:06.160 --> 30:09.320
And we are then able to parse that into an

30:09.320 --> 30:11.240
app and mentor project.

30:11.240 --> 30:16.920
And so in our mission of trying to encourage computational

30:16.920 --> 30:20.680
action, our hope here is that maybe you don't know how to

30:20.680 --> 30:23.920
program yet, but you still have a really good idea of how you

30:23.920 --> 30:26.440
can solve a problem in your community.

30:26.440 --> 30:30.240
So could you just describe the solution to the computer and

30:30.240 --> 30:33.240
see if it could make something that would work for you?

30:33.240 --> 30:36.320
And then you can actually, this is just the first step in the

30:36.320 --> 30:36.840
process.

30:36.840 --> 30:41.920
You can collaboratively edit the application with the AI, make

30:41.920 --> 30:45.720
changes, and then instruct it based on your changes, other

30:45.720 --> 30:48.280
things you want it to do, and so on and so forth.

30:48.280 --> 30:50.880
And if you're interested in learning about this, there's

30:50.880 --> 30:54.640
a link there, appinventor.mit.edu slash aptly.

30:54.640 --> 30:57.760
We've got videos and other things of how this works.

30:57.760 --> 31:00.440
And we're continuing to do research on this.

31:00.880 --> 31:05.840
So when we first announced this about two years ago now, I

31:05.840 --> 31:10.200
think, Peter asked if it only worked in English.

31:10.200 --> 31:15.800
And I said to him, I don't know, to be honest with you.

31:15.800 --> 31:19.400
And so he gave me this example in Dutch.

31:19.400 --> 31:22.840
And this is the app that it made on the right-hand side.

31:22.840 --> 31:27.520
And of course, we thought this was really interesting because

31:28.520 --> 31:31.280
obviously, many people are used to writing programs in

31:31.280 --> 31:31.800
English.

31:31.800 --> 31:35.840
And in fact, one of the times I tried making an app with

31:35.840 --> 31:39.640
aptly, GPT came back and said, well, you can't make an app

31:39.640 --> 31:43.120
in Italian because Italian is not for programming languages.

31:43.120 --> 31:46.560
English is for programming languages, which I found to

31:46.560 --> 31:47.600
be a bit funny.

31:47.600 --> 31:51.040
And then I kept instructing it to do it, and eventually I did

31:51.040 --> 31:52.200
it.

31:52.200 --> 31:55.400
But I did think that, but it's not true.

31:55.720 --> 31:57.120
Obviously, I don't understand Dutch.

31:57.120 --> 32:01.280
But the LLM certainly seems to have some understanding of it.

32:01.280 --> 32:04.560
I was doing my particular test in Italian when I did it.

32:04.560 --> 32:06.680
And it kept telling me in Italian it couldn't do it

32:06.680 --> 32:09.880
until I complained enough.

32:09.880 --> 32:12.600
But it can take these things.

32:12.600 --> 32:14.720
So you don't even have to know English anymore, potentially,

32:14.720 --> 32:16.200
to develop an app.

32:16.200 --> 32:18.520
The system can do it for you because it has these latent

32:18.520 --> 32:22.200
understandings about what it means to build a program.

32:22.520 --> 32:25.640
And it's seen examples of other languages, so it can

32:25.640 --> 32:27.760
figure out the mapping of that.

32:27.760 --> 32:29.840
I have noticed that it doesn't get it quite right.

32:29.840 --> 32:32.760
There is a bug in this program, because this is saying it

32:32.760 --> 32:35.760
wants an index, and selection index would be the

32:35.760 --> 32:36.760
appropriate property here.

32:36.760 --> 32:40.480
But we'll gloss over the fact that it made a semantic error.

32:40.480 --> 32:40.960
That's OK.

32:43.840 --> 32:45.720
And then the other thing we've been trying to do is trying to

32:45.720 --> 32:48.080
teach it about concepts like games.

32:48.120 --> 32:52.520
So I gave it these two prompts to try to start making a little

32:52.520 --> 32:53.640
game world.

32:53.640 --> 32:56.000
So I wanted a 2D platformer.

32:56.000 --> 33:00.040
So you see I got some platforms at different levels.

33:00.040 --> 33:03.680
And then I said, OK, well, maybe I want my main character

33:03.680 --> 33:07.040
to be this little lizard with a space helmet on.

33:07.040 --> 33:11.320
And so you can see him up here on the top left.

33:11.320 --> 33:14.360
And so it's really quite fun to play around with.

33:14.360 --> 33:16.680
And we're continuing to do research on this.

33:16.680 --> 33:18.760
So it hasn't been open source, but we're looking to open

33:18.760 --> 33:21.920
source it soon and try to get more people playing around

33:21.920 --> 33:25.120
with these types of tools and trying to understand really

33:25.120 --> 33:28.480
how we can take these large language models and combine

33:28.480 --> 33:32.560
them with something that's as easy to use as App Mentor to

33:32.560 --> 33:34.240
make some really interesting programs.

33:37.240 --> 33:41.280
And so with that, I just would like to say thank you all for

33:41.320 --> 33:44.760
coming here bright and early on a Sunday morning to listen to

33:44.760 --> 33:46.160
us talk about App Mentor.

33:46.160 --> 33:49.480
We have a number of different links, as I mentioned.

33:49.480 --> 33:55.840
You can access these slides at fosdm24.appmentormit.edu.

33:55.840 --> 33:58.600
And then, of course, you have access to the sources and all

33:58.600 --> 34:02.240
of the resources that we've made available worldwide

34:02.240 --> 34:03.760
for this project.

34:03.760 --> 34:05.800
And if you have any other questions, you can also feel

34:05.800 --> 34:08.960
free to contact me by email or by email.

34:08.960 --> 34:12.200
Or we can talk for a little bit now if you have any

34:12.200 --> 34:13.520
questions from the audience.

34:25.520 --> 34:26.520
Yes.

34:27.520 --> 34:28.520
Yes.

34:28.520 --> 34:31.520
They can make the app any language.

34:31.520 --> 34:33.520
How technical does it have to be?

34:33.520 --> 34:37.520
Or how do you express the app to use like a few terms somehow?

34:37.520 --> 34:40.520
Or do you need to know a little bit about what it has been

34:40.520 --> 34:42.520
or what it's known as?

34:42.520 --> 34:44.520
It varies.

34:44.520 --> 34:48.520
Obviously, the more technical you get, the better it tends to

34:48.520 --> 34:50.520
be in terms of what it does.

34:50.520 --> 34:53.520
But one of the fun things that we've been really playing around

34:53.520 --> 34:56.520
with is kind of giving it things that are purposefully

34:56.520 --> 35:00.520
ambiguous to see how it responds.

35:00.520 --> 35:03.520
So one of the early examples I would do is I would start with

35:03.520 --> 35:06.520
Hello, Per, which we saw earlier.

35:06.520 --> 35:10.520
And then I would instruct it, when I click on the cat,

35:10.520 --> 35:12.520
make it bigger.

35:12.520 --> 35:13.520
Right?

35:13.520 --> 35:15.520
There are lots of different ways you could interpret that

35:15.520 --> 35:16.520
statement.

35:16.520 --> 35:19.520
And in fact, if we run this multiple times, we get different

35:19.520 --> 35:21.520
code outputs.

35:21.520 --> 35:25.520
So in one example, it would add 50 pixels to the width and the

35:25.520 --> 35:26.520
height.

35:26.520 --> 35:29.520
In a different one, it would multiply it by two and things

35:29.520 --> 35:31.520
like that.

35:31.520 --> 35:34.520
But it does seem to associate, OK, it knows cat and it can see

35:34.520 --> 35:38.520
that there's a button that is associated with the thing called

35:38.520 --> 35:39.520
kitty.png.

35:39.520 --> 35:42.520
And I imagine that's how it figures it out.

35:42.520 --> 35:45.520
Because we also have a version where we have both cats and dogs

35:45.520 --> 35:48.520
and then try to get it to understand the difference between cats

35:48.520 --> 35:50.520
and dogs.

35:51.520 --> 35:53.520
And then, of course, bigger, it seems to have many different

35:53.520 --> 35:56.520
interpretations of what bigger could be.

35:56.520 --> 35:59.520
Another fun one that I've been doing, which is actually really

35:59.520 --> 36:05.520
cool, and I don't know how it does this, I make an app where I

36:05.520 --> 36:09.520
have it with the add and remove button to add some content to a

36:09.520 --> 36:10.520
list.

36:10.520 --> 36:13.520
And then I say, make the colors of the buttons match their

36:13.520 --> 36:15.520
purpose.

36:15.520 --> 36:16.520
Right?

36:16.520 --> 36:18.520
And because one button is called add and one button is called

36:18.520 --> 36:21.520
remove, it makes the add one green and the remove one red.

36:21.520 --> 36:24.520
And then I say, well, this is not colorblind friendly.

36:24.520 --> 36:28.520
Make the colors be more colorblind friendly and then adjust

36:28.520 --> 36:31.520
the colors, which is particularly interesting because the entire

36:31.520 --> 36:33.520
interface is text based.

36:33.520 --> 36:34.520
Right?

36:34.520 --> 36:38.520
So there's no color here, but it seems to have some notion about

36:38.520 --> 36:43.520
colorblindness and how to change things to make things more

36:43.520 --> 36:45.520
colorblind friendly.

36:45.520 --> 36:48.520
And so then it comes up with more muted colors or changes, you

36:48.520 --> 36:50.520
know, some properties of the colors.

36:50.520 --> 36:52.520
And it's really quite fascinating to see.

36:52.520 --> 36:56.520
Actually, I wasn't planning to do a live demo of this, but let's

36:56.520 --> 36:57.520
try it.

37:01.520 --> 37:03.520
Oh, there's another question.

37:03.520 --> 37:04.520
Sorry.

37:04.520 --> 37:05.520
No, in the chat.

37:05.520 --> 37:06.520
Oh, in the chat.

37:06.520 --> 37:08.520
Someone can ask a question.

37:08.520 --> 37:11.520
Why do we have to create a Google Cloud to use MIT App

37:11.520 --> 37:12.520
Inventor?

37:12.520 --> 37:16.520
So that's why I was suggesting, so if you use the version of

37:16.520 --> 37:19.520
code, sorry, we'll go back to the app thing in a second, but I

37:19.520 --> 37:21.520
do want to answer this person's question.

37:21.520 --> 37:27.520
So in code.appInventor, when you come to the server, I got a

37:27.520 --> 37:28.520
log out.

37:28.520 --> 37:30.520
Yes, yes, yes.

37:30.520 --> 37:35.520
When you come to the server for code, there will be this

37:35.520 --> 37:37.520
continue without an account button.

37:37.520 --> 37:40.520
And if you click on that, you can bypass the need for the

37:40.520 --> 37:41.520
Google login.

37:41.520 --> 37:46.520
And what it does instead is it generates a random forward

37:46.520 --> 37:47.520
code.

37:47.520 --> 37:49.520
And you just save that.

37:49.520 --> 37:53.520
That's basically your password to access your account.

37:53.520 --> 37:57.520
And so you write that forward code down.

37:57.520 --> 37:59.520
And then when you come back, we just saw it.

37:59.520 --> 38:02.520
There's a set of four boxes where you put those words back in.

38:02.520 --> 38:06.520
So you don't need to have a Google account anymore to use this

38:06.520 --> 38:07.520
particular service.

38:07.520 --> 38:10.520
There are other services we offer where you do need a Google

38:10.520 --> 38:11.520
account.

38:11.520 --> 38:13.520
And right now, that's just for identity purposes.

38:13.520 --> 38:16.520
So we have a way of linking your projects to you.

38:16.520 --> 38:20.520
In this particular case, if you use this anonymous thing and you

38:20.520 --> 38:23.520
forget those four words, we cannot help you because we have

38:23.520 --> 38:25.520
no way of identifying you or your account.

38:25.520 --> 38:28.520
And so that's really important to save those four words if you

38:28.520 --> 38:30.520
use this anonymous version.

38:30.520 --> 38:32.520
But yes, there is a way of using app Inventor without the

38:32.520 --> 38:34.520
Google account.

38:34.520 --> 38:36.520
So that's how you do that.

38:36.520 --> 38:37.520
Yes.

38:37.520 --> 38:41.520
One other question about phone generation again.

38:41.520 --> 38:44.520
Assuming that say you know what you're doing and you're just

38:44.520 --> 38:48.520
using it as a help, is it possible to focus on parts of

38:48.520 --> 38:52.520
the generated app and actually enhance it in one fashion or

38:52.520 --> 38:55.520
another without regaining the company?

38:55.520 --> 38:56.520
Yes.

38:56.520 --> 39:00.520
So this is our hello per example.

39:00.520 --> 39:03.520
So let me just open that up so we have a good starting point.

39:03.520 --> 39:04.520
Oh, yeah.

39:04.520 --> 39:07.520
You can make it edit the pictures and stuff.

39:07.520 --> 39:09.520
I forgot to mention that.

39:09.520 --> 39:10.520
So here's our example.

39:10.520 --> 39:12.520
Yeah, just the hello per.

39:12.520 --> 39:15.520
And then there's this little pencil icon down here in the

39:15.520 --> 39:16.520
bottom right.

39:16.520 --> 39:18.520
And that brings up the editing thing.

39:18.520 --> 39:21.520
So I'm just going to come in here and say, let's do the

39:21.520 --> 39:22.520
example I said earlier.

39:27.520 --> 39:29.520
This is now a picture of a dog.

39:29.520 --> 39:35.520
Let's say when I click the dog, make it bigger.

39:35.520 --> 39:38.520
And the next version also has a microphone input, so I

39:38.520 --> 39:40.520
wouldn't have to be typing that.

39:40.520 --> 39:46.520
And so, again, we can watch.

39:49.520 --> 39:52.520
App Inventor also because we do a lot of logging in the

39:52.520 --> 39:53.520
console.

39:53.520 --> 39:55.520
So if you want to see a fun way of how it all works.

39:55.520 --> 39:57.520
So now, so see, here's something that's done that's

39:57.520 --> 39:58.520
interesting.

39:58.520 --> 40:01.520
So I thought that it could create two button handlers.

40:01.520 --> 40:03.520
Now, people who have used App Inventor know that this is a

40:03.520 --> 40:04.520
no-no.

40:04.520 --> 40:06.520
So I'm just going to combine those two.

40:06.520 --> 40:09.520
But this is part of the interesting part of working with

40:09.520 --> 40:11.520
the AI is it doesn't always get things right.

40:11.520 --> 40:14.520
So I've gone ahead and I've taken it.

40:14.520 --> 40:16.520
In this case, it's decided that making something bigger

40:16.520 --> 40:19.520
implies adding 10 pixels to each of the dimensions.

40:19.520 --> 40:23.520
But it's come up with that code.

40:23.520 --> 40:26.520
And then we're able to take the textual representation of

40:26.520 --> 40:29.520
that code and turn it into the block representation so that

40:29.520 --> 40:31.520
you can see how it works.

40:31.520 --> 40:35.520
I think it also made the button smaller in the designer

40:35.520 --> 40:37.520
compared to previously.

40:37.520 --> 40:41.520
Let me move this over to the side.

40:41.520 --> 40:46.520
And then, of course, so we could say, what do we want the

40:46.520 --> 40:48.520
button to be a picture of?

40:48.520 --> 40:51.520
It could be, I wonder if it knows about FOSDEM.

40:51.520 --> 40:55.520
Could we do something about FOSDEM?

40:56.520 --> 41:04.520
Okay.

41:04.520 --> 41:07.520
Let's see if it knows about FOSDEM.

41:07.520 --> 41:09.520
That could be fun.

41:09.520 --> 41:12.520
This is also one of the interesting things about this

41:12.520 --> 41:14.520
technology, right?

41:14.520 --> 41:18.520
And I'm sure people here have played with GPT-4, any of those

41:18.520 --> 41:20.520
kind of generative AI systems.

41:20.520 --> 41:24.520
So you know that occasionally it doesn't kind of either come up

41:24.520 --> 41:27.520
with what you want or it does something completely random.

41:27.520 --> 41:29.520
In other cases, it's sometimes very good.

41:29.520 --> 41:32.520
In this case, it might not have done anything.

41:32.520 --> 41:34.520
That happens sometimes too.

41:34.520 --> 41:40.520
Yeah, it was upset about something, so it rejected my request.

41:40.520 --> 41:43.520
Again, this is research-level stuff, right?

41:43.520 --> 41:45.520
This is not a product yet.

41:45.520 --> 41:49.520
That's one of the reasons why we haven't released it open source.

41:49.520 --> 41:51.520
We're still working out some of the kinks.

41:51.520 --> 41:53.520
And one of those kinks is that it doesn't have much in the way of

41:53.520 --> 41:55.520
error handling.

41:55.520 --> 41:57.520
Christopher.

41:57.520 --> 42:00.520
You mentioned that LLM is generating some language which you then

42:00.520 --> 42:02.520
personally just speak slightly more about that if we...

42:02.520 --> 42:04.520
Sure.

42:04.520 --> 42:08.520
So when we first started this project, it was the LLM at the time

42:08.520 --> 42:13.520
that we were using was the open AI codex model, which no longer exists.

42:13.520 --> 42:18.520
And when we were designing the language, we had a couple constraints

42:18.520 --> 42:20.520
on it that we wanted.

42:20.520 --> 42:23.520
We wanted it to be a one-to-one correspondent with App Inventor.

42:23.520 --> 42:28.520
And basically, for those of you who maybe don't have a computer

42:28.520 --> 42:33.520
sensor, the idea here is that for every single block or function

42:33.520 --> 42:37.520
or whatever in App Inventor, we wanted it to be an operation in the

42:37.520 --> 42:39.520
language and vice versa.

42:39.520 --> 42:44.520
So we didn't want, for example, to take JavaScript and then have to

42:44.520 --> 42:47.520
worry about Lambda functions because App Inventor has no concept

42:47.520 --> 42:49.520
of a Lambda function.

42:50.520 --> 42:52.520
So we...

42:52.520 --> 42:55.520
But we needed something where we wouldn't have to do a ton of training.

42:55.520 --> 42:58.520
So we started from Python.

42:58.520 --> 43:00.520
We said, we'll make it look like Python.

43:00.520 --> 43:03.520
Obviously, it will have had training on a lot of different...

43:03.520 --> 43:05.520
Oh.

43:05.520 --> 43:07.520
Yeah.

43:07.520 --> 43:09.520
Oh, yeah.

43:09.520 --> 43:11.520
So...

43:11.520 --> 43:13.520
Oops.

43:13.520 --> 43:15.520
Yeah, so if we...

43:15.520 --> 43:17.520
Oh, come on.

43:17.520 --> 43:19.520
Sorry, it's being a little bit finicky.

43:19.520 --> 43:21.520
The computer's being a little finicky.

43:21.520 --> 43:24.520
So it's got to construct something.

43:24.520 --> 43:25.520
There's no new keyword.

43:25.520 --> 43:27.520
You just use the class name.

43:27.520 --> 43:30.520
It's got named arguments.

43:30.520 --> 43:32.520
It has...

43:32.520 --> 43:34.520
This is some of the differences, though.

43:34.520 --> 43:36.520
There's no def keyword like there is in Python.

43:36.520 --> 43:39.520
We say, for event handlers, they begin when?

43:39.520 --> 43:42.520
Like they do, at least in the English version.

43:42.520 --> 43:46.520
And then you have the event name and the...

43:46.520 --> 43:48.520
Sorry, the component name and the event name.

43:48.520 --> 43:50.520
This one doesn't have procedures,

43:50.520 --> 43:53.520
but procedures are defined with the two keyword,

43:53.520 --> 43:56.520
and globals are created with initialize.

43:56.520 --> 43:59.520
And then there are relationships like in App Inventor,

43:59.520 --> 44:02.520
every component other than the screen has a parent.

44:02.520 --> 44:04.520
So translator belongs to screen one.

44:04.520 --> 44:06.520
If you had an arrangement,

44:06.520 --> 44:10.520
you would have the thing belongs inside of its arrangement.

44:10.520 --> 44:12.520
And so...

44:12.520 --> 44:14.520
And there's, as I said, there were two reasons...

44:14.520 --> 44:15.520
There were a couple reasons for this.

44:15.520 --> 44:18.520
One was we figured it seemed a lot of Python.

44:18.520 --> 44:21.520
Therefore, it should recognize a lot of these types of things.

44:21.520 --> 44:25.520
And two, we wanted something that didn't have a lot of extra syntax,

44:25.520 --> 44:30.520
because one, we thought it would be difficult to get it right.

44:30.520 --> 44:32.520
Our original proposal was,

44:32.520 --> 44:35.520
could we generate the JSON that underpins the design,

44:35.520 --> 44:38.520
and the XML that underpins the blocks.

44:38.520 --> 44:40.520
But XML is very verbose,

44:40.520 --> 44:42.520
and you have to keep it balanced,

44:42.520 --> 44:44.520
otherwise it doesn't work.

44:44.520 --> 44:47.520
JSON, in terms of verbosity,

44:47.520 --> 44:52.520
obviously, if you got parentheses wrong, we'd be in trouble.

44:52.520 --> 44:54.520
But that was that.

44:54.520 --> 44:58.520
And then the last thing was, because we're paying for it,

44:58.520 --> 45:00.520
we wanted to have as few tokens as possible,

45:00.520 --> 45:02.520
because you pay per token.

45:02.520 --> 45:04.520
So something like Java or C,

45:04.520 --> 45:08.520
if you've got a bunch of curly braces and semicolons all over the place,

45:08.520 --> 45:10.520
you're going to be paying for that,

45:10.520 --> 45:13.520
and you're going to have something that wasn't going to be.

45:13.520 --> 45:17.520
We could talk about things like color,

45:17.520 --> 45:21.520
and how we have to pay for all the extra use that are involved.

45:21.520 --> 45:25.520
But yeah, so that would be,

45:25.520 --> 45:29.520
we had a bunch of reasons for why we wanted to design the language this way.

45:29.520 --> 45:32.520
Obviously, these tools continue to get better.

45:32.520 --> 45:35.520
You can do things like fine-tuning, which we're still exploring,

45:35.520 --> 45:38.520
and maybe there might be even better representations of the language

45:38.520 --> 45:40.520
when you start fine-tuning.

45:40.520 --> 45:45.520
But yeah, obviously, this is a very rich area for continued work,

45:45.520 --> 45:49.520
and we're really hoping to try to get people really excited about LLMs

45:49.520 --> 45:51.520
and kind of open source.

45:51.520 --> 45:54.520
We're really hoping that more of these,

45:54.520 --> 45:59.520
people are releasing weights and things like that for various language models,

45:59.520 --> 46:01.520
so we're hoping that eventually we'll get to the point

46:01.520 --> 46:04.520
where more people can do these types of things.

46:04.520 --> 46:07.520
Do you have to train it with a language,

46:07.520 --> 46:10.520
or could you just kind of prompt it with a manual?

46:10.520 --> 46:13.520
Yeah, so what we do is we just do some prompt engineering.

46:13.520 --> 46:17.520
So we have about 20 to 30 examples on the server,

46:17.520 --> 46:22.520
and then what we do is we compute the embeddings of those,

46:22.520 --> 46:28.520
and I think the embedding space is like 1,024 dimensions.

46:28.520 --> 46:30.520
And then we take your prompt,

46:30.520 --> 46:36.520
and we compare its embedding to the embeddings of all the example programs,

46:36.520 --> 46:38.520
rank them based on distance,

46:38.520 --> 46:41.520
and then we take the top 10 and give those as examples.

46:41.520 --> 46:44.520
So it'll see something like,

46:44.520 --> 46:48.520
oh, put five things in a list, and then here's a list,

46:48.520 --> 46:51.520
and it'll see, here's create a button and do the button.

46:51.520 --> 46:59.520
And then what will happen is it kind of stitches together some of these things.

46:59.520 --> 47:05.520
I don't have a slide in this talk, but actually this picture will do.

47:05.520 --> 47:10.520
So this was the translation app, and in our initial test of this,

47:10.520 --> 47:12.520
we only gave it three example programs.

47:12.520 --> 47:15.520
We gave it a program where if you clicked a button,

47:15.520 --> 47:20.520
it would translate Hello World into French, I think.

47:20.520 --> 47:23.520
So there's no user input other than clicking the button.

47:23.520 --> 47:28.520
We gave it an example of a little app where you could add ingredients to a pizza,

47:28.520 --> 47:32.520
and so that gave it an example of how list views work,

47:32.520 --> 47:35.520
and then we gave it, actually it's not in this one,

47:35.520 --> 47:41.520
we also had one where if you click a button, it speaks.

47:41.520 --> 47:49.520
And so what we wanted to do then is we gave it those three examples and a prompt like this,

47:49.520 --> 47:53.520
and it stitched together the whole program from start to finish

47:53.520 --> 47:58.520
because it saw examples of each of these different functions,

47:58.520 --> 48:01.520
and again for reasons I do not understand,

48:01.520 --> 48:03.520
and I don't think any of us really understand,

48:03.520 --> 48:05.520
it was able to eventually figure out,

48:05.520 --> 48:09.520
okay, well the first thing I have to do is do the speech recognition,

48:09.520 --> 48:13.520
and then the second thing I have to do is call the translator,

48:13.520 --> 48:16.520
and then the last thing, which again is not in this example,

48:16.520 --> 48:18.520
there was a text-to-speech component,

48:18.520 --> 48:23.520
and it said, okay, well now speak the result of the translation,

48:23.520 --> 48:27.520
and it never saw a program, at least in this language,

48:27.520 --> 48:30.520
that did all of those things together,

48:30.520 --> 48:33.520
it saw bits and pieces of those and what they looked like,

48:33.520 --> 48:40.520
but it was able to predict the tokens in such a way that it could make the final app,

48:40.520 --> 48:42.520
and so that's really one of the interesting things,

48:42.520 --> 48:44.520
it's somehow in some cases, not in all cases,

48:44.520 --> 48:49.520
but in some cases it's able to make these combinations that do useful things,

48:49.520 --> 48:56.520
and then sometimes it fails, but that's life.

49:02.520 --> 49:05.520
Can the source run without Google App Engine?

49:05.520 --> 49:07.520
I believe it can now,

49:07.520 --> 49:11.520
Google did the latest versions of App Engine,

49:11.520 --> 49:16.520
the runtime is open source as of App Engine 2.0,

49:16.520 --> 49:19.520
that's the library we currently use,

49:19.520 --> 49:22.520
I don't know exactly how to run it outside of App Engine,

49:22.520 --> 49:28.520
but supposedly yes, in the new App Engine 2.0,

49:28.520 --> 49:31.520
that's all open source, and I believe it's available on GitHub,

49:31.520 --> 49:36.520
or if not, it's on Google's system,

49:36.520 --> 49:41.520
but there is also a pull request you could look at

49:41.520 --> 49:44.520
where the backend has been replaced with Postgres,

49:44.520 --> 49:48.520
and so you can, all the data objects and things are stored in Postgres,

49:48.520 --> 49:54.520
so if you do want to run it without the App Engine piece,

49:54.520 --> 49:56.520
you should be able to do that,

49:56.520 --> 50:00.520
so I would definitely encourage you to take a look at that.

50:01.520 --> 50:06.520
Any other questions?

50:06.520 --> 50:08.520
Oh, yes.

50:08.520 --> 50:10.520
Maybe a bit of attention,

50:10.520 --> 50:15.520
but this is a great tool for learning official design programming,

50:15.520 --> 50:20.520
you don't do the affecting, but how about the rest of the lifecycle?

50:20.520 --> 50:26.520
Are there any instructions or ways of teaching those,

50:26.520 --> 50:32.520
like version control, Q&A, distribution?

50:32.520 --> 50:35.520
We do have some of that,

50:35.520 --> 50:39.520
so we don't have a formal...

50:39.520 --> 50:41.520
Yeah, there we are.

50:41.520 --> 50:44.520
We don't have a formal version control system right now,

50:44.520 --> 50:48.520
but one thing you can do is we have a checkpoint feature,

50:48.520 --> 50:51.520
which essentially you can think of as making a commit,

50:51.520 --> 50:53.520
so when I click on this, it'll say,

50:53.520 --> 50:57.520
okay, I'm going to create a checkpoint called hello per checkpoint one,

50:57.520 --> 51:01.520
and if I keep doing it, it'll do checkpoint two, checkpoint three, checkpoint four,

51:01.520 --> 51:06.520
and so you can use that as sort of a way of effectively creating a commit,

51:06.520 --> 51:08.520
you can continue making changes,

51:08.520 --> 51:12.520
and then when we go back into the project list,

51:12.520 --> 51:17.520
you'll have all of your checkpoints for your application.

51:17.520 --> 51:21.520
Now, granted, that's probably not the ideal way of doing version control

51:21.520 --> 51:23.520
for something like this,

51:23.520 --> 51:26.520
but in the end, each of these projects is essentially a zip file

51:26.520 --> 51:30.520
with that structure we showed in the slides previously,

51:30.520 --> 51:34.520
and so you could, of course, pull it out and work with it that way.

51:34.520 --> 51:36.520
Now, the other thing we've been doing,

51:36.520 --> 51:38.520
and I didn't really talk much about the details of Apply,

51:38.520 --> 51:41.520
because that's a separate hour-long talk,

51:41.520 --> 51:44.520
but it uses a version of App Inventor that we've developed

51:44.520 --> 51:46.520
that supports real-time collaboration,

51:46.520 --> 51:48.520
so you get a multiple people editing,

51:48.520 --> 51:50.520
and there we have the entire event stream,

51:50.520 --> 51:52.520
so you can look at each individual change

51:52.520 --> 51:53.520
and kind of be able to say,

51:53.520 --> 51:58.520
well, we're going to take these edits out or do something like that,

51:58.520 --> 52:01.520
and I don't think this particular release has it.

52:01.520 --> 52:04.520
It's coming in the next one where we have Undo Reader Support,

52:04.520 --> 52:08.520
so if the AI does something you don't want it to do, you can undo it,

52:08.520 --> 52:14.520
so that way you don't lose valuable work because the AI went a little bonkers.

52:14.520 --> 52:18.520
In terms of distribution, we do have some documentation

52:18.520 --> 52:23.520
on things like managing your key store and other signing-related things,

52:23.520 --> 52:26.520
and for the iOS build server,

52:26.520 --> 52:28.520
we do have a bunch of documentation with screenshots

52:28.520 --> 52:33.520
of how you go through the process in App Store Connect

52:33.520 --> 52:35.520
and in the Apple Developer Portal

52:35.520 --> 52:40.520
to set up all of the signing and everything you need to do the iOS release.

52:40.520 --> 52:44.520
Now, obviously, this is, again, an area where more help

52:44.520 --> 52:47.520
in terms of if you think there's documentation missing on this front,

52:47.520 --> 52:50.520
the documentation is all in GitHub in the repository,

52:50.520 --> 52:52.520
so you're welcome to contribute,

52:52.520 --> 52:55.520
and it's written in markdowns, so it should be fairly straightforward.

52:58.520 --> 53:00.520
Quality Assurance.

53:01.520 --> 53:03.520
Yeah, we don't have a lot of that.

53:03.520 --> 53:05.520
I'll be perfectly honest.

53:06.520 --> 53:09.520
One thing that people have asked us before,

53:09.520 --> 53:12.520
and actually it might be even better for teachers in some ways,

53:12.520 --> 53:15.520
but having sort of a unit testing type framework for App Inventor,

53:15.520 --> 53:17.520
so that you could say,

53:17.520 --> 53:21.520
I expect that if I click this button, some output will happen,

53:21.520 --> 53:24.520
because right now for a teacher, when you get a class of 20 students,

53:24.520 --> 53:27.520
you get a grade at their homework, you get a load of each project,

53:27.520 --> 53:30.520
try it out, make sure it works correctly, grade it, and so on.

53:30.520 --> 53:34.520
And so automated ways of kind of doing something that would be helpful,

53:34.520 --> 53:37.520
but that's not something that's currently on our roadmap.

53:42.520 --> 53:44.520
Ah, okay.

53:44.520 --> 53:46.520
Well, I think the answer is still the same there,

53:46.520 --> 53:49.520
which is essentially we don't have stuff for that for students,

53:49.520 --> 53:53.520
but of course there's no reason people couldn't build something around that,

53:53.520 --> 53:57.520
like maybe, I don't know if the code or dojo folks would like to have material

53:57.520 --> 53:59.520
around doing quality assurance of applications,

53:59.520 --> 54:01.520
but that's certainly something they could develop.

54:01.520 --> 54:05.520
I mean, we obviously give the platform, and lots of people have built material around it.

54:05.520 --> 54:08.520
There's no restrictions on other people doing that,

54:08.520 --> 54:12.520
so, and all of the stuff on our website too is CC4 by SA,

54:12.520 --> 54:15.520
so anyone can take our material and reuse it.

54:18.520 --> 54:19.520
Yes.

54:19.520 --> 54:24.520
I have three questions, which I realize are probably all the same question.

54:24.520 --> 54:25.520
Okay.

54:25.520 --> 54:30.520
So one of the reasons why you chose when you wanted to support iOS

54:30.520 --> 54:32.520
to use Swift a lot of them,

54:32.520 --> 54:36.520
is to think of something like Kotlin that might be cross-platform.

54:36.520 --> 54:37.520
Okay.

54:37.520 --> 54:44.520
The second question was, you said that iOS support was coming soon to build servers,

54:44.520 --> 54:47.520
but how does it work without that at the moment,

54:47.520 --> 54:49.520
because it seems like you have some support for iOS.

54:49.520 --> 54:50.520
Yeah.

54:50.520 --> 54:55.520
And then the third question was, like, do you need the companion app

54:55.520 --> 54:57.520
and you not just build, like, APK files?

54:57.520 --> 54:58.520
Yes.

54:58.520 --> 54:59.520
Okay.

54:59.520 --> 55:05.520
So maybe I'll address the last one first, and then I'll go to the other two.

55:05.520 --> 55:10.520
So yes, you could build the APKs and not use the companion app at all.

55:10.520 --> 55:15.520
The nice thing about the companion app is that you see the changes in real time.

55:15.520 --> 55:18.520
So building an APK because it has to package it up,

55:18.520 --> 55:22.520
actually go to a build server, run through the Android build process,

55:22.520 --> 55:27.520
and then return the binary back to you, often can take a minute or two.

55:27.520 --> 55:28.520
Right?

55:28.520 --> 55:33.520
It's the difference between, like, people, like the old sort of compiled test release cycle

55:33.520 --> 55:36.520
versus reloading JavaScript in your browser type of thing.

55:36.520 --> 55:41.520
So the nice thing about using the companion is it saves you a lot of time.

55:41.520 --> 55:42.520
Yes.

55:42.520 --> 55:43.520
Yes.

55:43.520 --> 55:48.520
So internally, App Inventor uses Scheme as its programming language.

55:48.520 --> 55:52.520
So all the blocks and everything eventually output Scheme code,

55:52.520 --> 55:56.520
and then there's a Scheme interpreter running either on the Android or the iOS device

55:56.520 --> 56:02.520
that then runs the code and, you know, does whatever the behavior is.

56:02.520 --> 56:09.520
Which kind of, I guess, goes to the second question you had about why not rewrite

56:09.520 --> 56:12.520
everything in a completely brand new language.

56:12.520 --> 56:16.520
So what we did is we essentially made a Scheme interpreter for iOS,

56:16.520 --> 56:20.520
and then the question was, well, how do we get the components there?

56:20.520 --> 56:23.520
And for that, we just decided, well, we'll use the native language

56:23.520 --> 56:26.520
because obviously Apple is going to continue to support Swift,

56:26.520 --> 56:29.520
it seems, for the definite future.

56:29.520 --> 56:34.520
So let's just invest in the native platform, just like we use, well,

56:34.520 --> 56:37.520
we'd have to rewrite all of our stuff from Java into Kotlin.

56:37.520 --> 56:39.520
I believe there are tools that maybe help with that,

56:39.520 --> 56:42.520
but I haven't done a lot of investigation there.

56:42.520 --> 56:46.520
And so, yeah, we just said, well, let's just implement the Swift version of everything

56:46.520 --> 56:50.520
and keep it as close to the Apple examples as possible.

56:50.520 --> 56:56.520
So I guess the, oh, and then the build server.

56:56.520 --> 57:02.520
Yeah, so you can today go to the App Store and install the iOS companion app,

57:02.520 --> 57:05.520
and you can try your apps right now, right?

57:05.520 --> 57:08.520
So I could open that HelloPer app and load it on my phone,

57:08.520 --> 57:14.520
actually, let's go ahead and do that.

57:14.520 --> 57:16.520
Are we at time?

57:16.520 --> 57:18.520
Okay, yeah.

57:18.520 --> 57:23.520
Oh, we can do it offline, but essentially the idea is,

57:23.520 --> 57:27.520
can I take 30 seconds, Peter?

57:27.520 --> 57:31.520
So I scan the QR code and I go to my app here.

57:31.520 --> 57:34.520
Yes, I know my app is out of date.

57:34.520 --> 57:36.520
It's actually out of date because it's a newer version,

57:36.520 --> 57:39.520
and so it doesn't recognize the version number.

57:39.520 --> 57:42.520
And so it uses WebRTC to establish a connection and send the assets over,

57:42.520 --> 57:46.520
and then I just get the app running on my phone,

57:46.520 --> 57:52.520
and if I turn my volume up, of course, it doesn't know how to create audio assets.

57:52.520 --> 57:54.520
It only knows how to create visual assets.

57:54.520 --> 57:56.520
So it's still meows, but yeah, that's the idea.

57:56.520 --> 57:58.520
And so as we make changes, as Vishwas was showing,

57:58.520 --> 58:00.520
I would see it on my iOS app.

58:00.520 --> 58:05.520
Of course, if I close the app, then I lose the connection and I lose my progress,

58:05.520 --> 58:10.520
but with the build server, now I've got my regular hello per app,

58:10.520 --> 58:13.520
and then I can do it, and this one is looping infinitely,

58:13.520 --> 58:15.520
so I'm just going to stop it.

58:15.520 --> 58:18.520
That was for a test somebody asked about running audio in the background,

58:18.520 --> 58:22.520
and so I needed to make sure it would run for a very long time.

58:22.520 --> 58:24.520
But yeah, that's the idea.

58:24.520 --> 58:27.520
So packaging the app allows it to be persistent on your device,

58:27.520 --> 58:30.520
and of course you can put it into the app store and all that stuff.

58:30.520 --> 58:33.520
So with that, thank you very much.

58:33.520 --> 58:37.520
I'm happy to stay longer and answer other questions, but I will...

