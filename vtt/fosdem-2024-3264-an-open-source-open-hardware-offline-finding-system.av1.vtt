WEBVTT

00:00.000 --> 00:13.560
Hello. So this is our talk about the spot nuts. It's a

00:13.560 --> 00:23.280
Techist Tinkering project. So first who we are. I am Pingu. I am 14 years old. I'm a

00:23.280 --> 00:30.360
member of the Techist community. I began hacking like four years ago or something like that.

00:30.360 --> 00:40.040
I'm interested in Python, home automation and stuff and obviously Penguins. And I also work

00:40.040 --> 00:47.120
at the Alexis project. And my name is Snick or Dominic if you like longer names, three to two.

00:47.120 --> 00:57.640
I am more or less the founder of the Techist community about which Penguins will say a few words

00:57.640 --> 01:05.360
right after my introduction. And here I'm working in the intersection between education and free

01:05.360 --> 01:15.320
software. It means I'm showing young people what free software is, what the values around free

01:15.760 --> 01:21.680
software are and also helping develop and promote free software for education institutions.

01:21.680 --> 01:30.960
And in my day job I mostly spend my time as a trainer for Linux administration,

01:30.960 --> 01:45.120
PostgreSQL, Rust and Python related topics. Yes, we mentioned Techist. It's a community

01:45.920 --> 01:55.960
based in Germany. Our goal is to create a comprehensive technical word for and with children

01:55.960 --> 02:06.440
and like to empower young people to question things and hack and build stuff like this project

02:06.440 --> 02:23.480
or the Alexis project. So here you can see where we were. This is an Alexis meeting.

02:24.440 --> 02:30.600
This was in I think at the Frostconn, the second largest

02:30.600 --> 02:55.480
conference in Germany. This here at the left side is our summer camp, name taking sun, where

02:56.440 --> 03:03.920
the trials come and then learn something like I think they are soldering things together and

03:03.920 --> 03:14.960
then programming it. So now what is an offline finding system? It's basically you attach something

03:14.960 --> 03:24.520
to something like a small tech, you attach it to your backpack, then you lose it and then you open

03:24.560 --> 03:31.840
some app on your smartphone or on your laptop and then you can find it or search it or don't find it.

03:31.840 --> 03:46.080
And the more technical offline finding thing. So the tech sent a signal via Bluetooth because

03:46.120 --> 03:56.560
it's offline. So there isn't a connection between the tech and the internet. Then an app like a helper

03:56.560 --> 04:09.800
app on your phone gets this Bluetooth signal and then says, hey, I found this tech there. And then I

04:09.840 --> 04:17.760
as the owner can go on my smartphone, search for the tech and then my phone search in the

04:17.760 --> 04:34.280
database for the tech. So how we got into offline finding. I'm very steady. So my scooter, like my

04:34.800 --> 04:44.200
scooter to drive in the city got stolen and then I had a Samsung smart tech like an offline

04:44.200 --> 04:52.440
finding tech attached to it. And then we drove to the approximate location and then with the feature

04:52.440 --> 05:02.360
that we can send a signal to the tech and the tech response I'm here, we could see where the tech

05:02.400 --> 05:12.880
was basically so what where signal was. And then we did three literation. So we went from multiple

05:12.880 --> 05:23.880
sites to it. And then there was a signal at one point and then we got a scooter back. And also

05:23.920 --> 05:43.760
there's our sketchy chef there. And he always loses stuff and wants to get it back or find it. So

05:43.760 --> 05:52.680
offline finding basically has three components. But the tracking tokens, the small devices that

05:52.720 --> 06:00.200
you attach to the things that you want to find, they aren't connected to the internet because

06:00.200 --> 06:11.280
then it wouldn't be offline and sort of use like some like and then there are the smartphones or

06:11.280 --> 06:21.400
some small helper devices. They get the signal from the tech and then send it to the internet. And

06:22.280 --> 06:30.360
then there's obviously a server where the messages like I'm here and there is a pack are sent to

06:30.360 --> 06:40.720
and then I can get them back from there. So there are obviously some challenges. Some are

06:40.720 --> 06:48.720
privacy related like a stranger must not abuse the beacon for tracking over the long term. And

06:49.000 --> 06:57.960
they should not identify the owners because then I could know where the stuff of some people is. And

06:57.960 --> 07:05.480
the back end, the server couldn't identify the owners either because then I as the owner of the

07:05.480 --> 07:18.440
server could identify the owners. And yeah. But some are also technical like the encryption

07:18.440 --> 07:26.840
without knowing the receiver because then I can identify the owner then Bluetooth because of

07:26.920 --> 07:35.000
the range and yeah because of Bluetooth. And then because of Bluetooth also the energy efficiency.

07:35.000 --> 07:45.560
Yeah, because at one point we tried out in ESP. How long would it last? And I think we did it with

07:46.360 --> 07:58.760
Shah 256 hashing and like lasted for a couple of hours. Because it's small and I think a couple of

07:58.760 --> 08:07.000
hours aren't enough for checking device. Yeah, design overview.

08:07.600 --> 08:20.360
All right. Thank you. Yeah. So after we somehow got snubbed by this by this topic around offline

08:20.360 --> 08:27.120
finding how this works, of course we wanted to try how far we can get building such a system.

08:28.120 --> 08:37.360
Of course, somewhat motivated by our grumpy, sorry, I mean, a sketchy, sketchy chef who asked,

08:37.360 --> 08:45.720
hey, is there some system like this based on open hardware, open source? I'm not so very excited

08:45.720 --> 08:55.520
about Apple controlling where I lose and find rediscover my stuff. So first, what we first

08:55.600 --> 09:03.480
it was we looked at how the Samsung smart tech system worked, which is the sort of tech that

09:03.480 --> 09:14.000
Pingu had attached to the scooter. And we found out that it sends these strange beacons of some

09:14.000 --> 09:23.040
sort using Bluetooth low energy. I will come back to that in a minute. And in the course of time,

09:23.080 --> 09:32.360
while we looked at how this works, we've it's more or less became obvious that actually this sort

09:32.360 --> 09:39.640
of system is an enter and encrypted mailbox system, because there is an owner device and this has a

09:39.640 --> 09:46.040
public key and yeah, what you can do with a public key, you can receive some sort of messages.

09:47.040 --> 09:57.680
And there are helper devices that can see these beacons and more or less just send any sort of

09:57.680 --> 10:09.200
message to the helper device. So if I lose something as the owner and let's say Pingu wants to help

10:09.200 --> 10:15.760
me find it, then they walk around in the city and their smartphone receives the beacon signal and

10:15.760 --> 10:22.840
now they somehow need to get the information back to me, telling me where they saw my beacon. And

10:22.840 --> 10:31.360
that's where these texts come in and they are as probably as dumb as you can imagine, they just

10:31.360 --> 10:40.640
send out a public key and yeah, so all the information you need to somehow get the location

10:40.800 --> 10:49.320
sent back to me. It's a macro incident that these messages carry location information. We could

10:49.320 --> 10:57.760
just as well put anything in there if any of you are into this sort of systems. Apple had a few

10:57.760 --> 11:05.480
vulnerabilities discovered in their implementation. One of the most interesting ones in the recent

11:05.480 --> 11:14.760
weeks was that people actually used the beacons themselves to transport key logger information

11:14.760 --> 11:26.440
out of otherwise air-gapped environments. I think using your favorite search engine or the search

11:26.440 --> 11:35.080
engine you distrust, least will bring some really interesting information up about this. So what we

11:35.120 --> 11:40.280
really want to build is a mailbox system and some sort of key management system because that's the

11:40.280 --> 11:46.480
really interesting part as far as I'm concerned, how we solve these privacy issues and some of the

11:46.480 --> 11:57.960
technical issues with cryptography. So this is the big picture. If this works I can zoom around in

11:57.960 --> 12:12.440
this a bit and now it shows that I should have used the headset. Can I do it with one hand? Yes,

12:12.440 --> 12:22.760
I can. So here's the big picture and what you can see here is all the red circles are showing

12:22.800 --> 12:29.040
secret keys that I use in the system, the green circles are showing public keys that I use in the

12:29.040 --> 12:39.960
system. Let's get a short overview of how this works. So we have the owner device and we give the

12:39.960 --> 12:50.280
owner device a sort of main key. This identifies the owner device and the easiest thing we could do

12:50.320 --> 12:57.400
now is we could make this Bluetooth beacon and simply copy the public key of the owner onto that

12:57.400 --> 13:04.680
beacon and attach it to some bag or scooter or some flash squirrel or whatever you don't want to

13:04.680 --> 13:14.600
lose. So at this point we more or less are done with the mailbox part and with the encryption part

13:15.280 --> 13:21.920
but we got into all the privacy troubles because what you now can do is you can follow the tech

13:21.920 --> 13:28.440
around. It always broadcasts the same public key information. You can just walk around the city

13:28.440 --> 13:35.200
and always rediscover where one person is moving and make a nice motion profile of this person.

13:36.160 --> 13:48.040
Also you could discover several tokens that are linked to the same owner device and get the

13:48.040 --> 13:56.360
information that all these tokens belong to the same owner. These are two of the most inherent

13:56.360 --> 14:03.920
privacy issues that you obviously don't want to make when designing such a system. So the next

14:03.960 --> 14:13.200
thing we do is we derive using hash based key derivation some keys or one key pair for each

14:13.200 --> 14:22.160
token so that we can unlink the tokens from each other. And the rest of the system in case I think

14:22.160 --> 14:29.280
many of you will have heard about this term a ratchet algorithm and the rest of the system more

14:29.360 --> 14:38.120
or less is very close to what for example the signal messenger does with the scriptography. We

14:38.120 --> 14:47.920
transfer this this key pair this device key pair to the tech and now we do one key derivation every

14:47.920 --> 14:54.640
let's say 15 minutes at least that's what Apple does. And the interesting part here because I never

14:54.960 --> 15:04.280
worked with cryptography on this level before is that now we can derive new key pairs on the

15:04.280 --> 15:14.200
tech and it will send out another elliptic curve public key every 15 minutes. So we fix the privacy

15:14.200 --> 15:19.320
issue of following someone around. Now you can follow someone for 15 minutes and after 15 minutes

15:20.120 --> 15:26.080
you see another beacon and you cannot distinguish whether this is the same tech which rotated its

15:26.080 --> 15:40.360
key pair or some other tech of another person. Yeah that's more or less the main secret of the

15:40.360 --> 15:47.440
system and then if I find the tech I can send a message to the public key it is currently

15:47.480 --> 15:53.000
broadcasting and there are some other things mixed in here but I don't want to go into too much

15:53.000 --> 16:02.840
detail about this part right now. And the second secret is that when I try to retrieve my location

16:02.840 --> 16:11.360
information that all the messages that other send to me I just ask the server for all the

16:11.960 --> 16:17.840
information sent to all the public keys I know my tech will have generated within the time frame.

16:17.840 --> 16:27.240
And this request can also be encrypted because we also use another set of keys so that the server

16:27.240 --> 16:34.520
can also not find out that all these keys are linked to my device. They should have zero

16:34.520 --> 16:39.520
knowledge about the ownership relation between the techs and the owners.

16:48.000 --> 16:57.440
Okay our experiments are implemented in Rust. We have split it into the spot nuts crates.

16:57.720 --> 17:06.880
Hazel OS is what is supposed to be running on the techs and the helper device in Rust based

17:06.880 --> 17:15.600
mobile app and in case you happen to need or happen to find the time to review an implementation

17:15.600 --> 17:24.000
of signals, X-Ed SDS implementation in Rust. We also factored out this crate so you can tell us

17:24.560 --> 17:33.280
what obvious mistakes we made in the cryptography there if you like. And the JG crates are a

17:33.280 --> 17:39.200
general implementation of this message of this mailbox system which can be used for the offline

17:39.200 --> 17:49.720
finding system but actually for anything that is supposed to carry public key information to

17:49.720 --> 18:01.120
someone and allow them to anonymously send back some sort of information. So what we have? We

18:01.120 --> 18:09.000
have this implementation of this general JG key exchange and Maywork system with a library

18:09.000 --> 18:15.480
usable as an alpha version and a small server implementation that actually does not care

18:15.560 --> 18:22.000
whether it is used for offline finding or whatever other purpose. And we have an experimental

18:22.000 --> 18:30.520
version of Hazel OS for ESP32 with the limitation that Pingu already mentioned that we get the ESP32

18:30.520 --> 18:37.840
development board to run for something like five hours. So how long did you take to get your

18:37.840 --> 18:43.360
scooter back? Did you manage to do it in five hours? I don't think so. Okay you have to be

18:43.440 --> 18:49.880
quicker next time when you switch from some. Best thing so we can either fix the technical issue

18:49.880 --> 19:01.600
or you can start a running career so whichever is easier. Okay so next things we want to do is

19:01.600 --> 19:08.520
we want to find a decent microcontroller. I happened to give a Rust training last week and

19:08.720 --> 19:19.480
one attendee told me this ESP32 this is nothing to do with microcontrollers. This is a toy. Get a

19:19.480 --> 19:27.440
more hardcore microcontroller and I think this is what we will try. And for Hazel OS to this we

19:27.440 --> 19:34.040
need to build an experimental companion app. Maybe design a nice PCB so it don't have to attach a

19:34.400 --> 19:43.920
breadboard with a development board to your scooter or stuffed squirrel or whatever. And maybe we

19:43.920 --> 19:49.000
can find others interested in open offline findings standard because Google and Apple and

19:49.000 --> 19:55.440
Microsoft and you name it are working on something like this but of course it's not so very openly

19:56.400 --> 20:08.960
developed. Spotnuts is a tinkering. Thank you for the talk. The question is how do you allow the

20:08.960 --> 20:15.400
helper device to send the message to the owner device and at the exactly same time don't allow

20:15.400 --> 20:24.920
some stranger to track the owner. Somehow at the feeling that at least one of my slides went

20:25.000 --> 20:34.960
missing when refactoring the slide deck. There's back an infrastructure. One thing I mentioned is

20:34.960 --> 20:41.520
JGD which is just a small mailbox server. It just has two API endpoints. One receives messages. It

20:41.520 --> 20:46.840
does not care what these messages contain. They are just JSON encoded encrypted messages to the

20:46.840 --> 20:54.040
public key we saw and the owner devices they just ask hey do you happen to have received any message

20:54.160 --> 21:01.760
for this public key I think I might have had. So the thing here is you can actually even in the

21:01.760 --> 21:06.920
Apple ecosystem you can ask the server for all messages you like. You can just send public keys

21:06.920 --> 21:13.600
there and they will give you the information about all messages that were sent encrypted to this

21:13.600 --> 21:19.720
public key. The nice thing is so you can download the whole database from Apple servers as well. The

21:19.760 --> 21:25.680
nice thing is you can do anything with it because obviously you also need the second half of the

21:25.680 --> 21:41.160
key pair. If you don't have it you get a nice bunch of random data. Over here. Hello. It's here. Over

21:41.800 --> 21:58.880
here. Would it make sense to make this key rotation time period not fixed at 15 minutes because if I

21:58.880 --> 22:05.160
was following a tag I could time the key rotation based on the period and then know that it was

22:05.160 --> 22:25.160
rotated at the exact 15 minutes. Yes. Bit of silly question but have you considered Linux mobile

22:25.160 --> 22:36.520
support for the helper device? Can you repeat the question please? Have you considered supporting Linux

22:36.520 --> 22:50.440
mobile phones? Supporting mobile phones to carry the... Is it a part? That's running Linux instead of

22:50.440 --> 23:00.720
Android or iOS. It's supposed to be a web application which will need web Bluetooth support in more

23:00.720 --> 23:09.000
browsers than Google Chrome but actually there's this Rust library and it should be easy to use it in any

23:09.000 --> 23:17.760
sort of app that you like on any platform. That's great. Thank you. Thank you again. Thank you.

