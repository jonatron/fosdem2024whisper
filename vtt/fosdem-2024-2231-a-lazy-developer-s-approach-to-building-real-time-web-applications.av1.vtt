WEBVTT

00:00.000 --> 00:11.340
Mark was a wrench and his talk is about a lazy developers approach to building real-time

00:11.340 --> 00:12.840
web applications.

00:12.840 --> 00:17.320
Give him a warm welcome and applause.

00:17.320 --> 00:21.520
Thank you and it's your state.

00:21.520 --> 00:23.320
So good morning.

00:23.320 --> 00:27.680
Today I want to tell you about my two hobbies.

00:27.680 --> 00:28.680
First I'm a musician.

00:28.680 --> 00:36.240
I play the bass guitar and my other hobby is a cloud solution architect.

00:36.240 --> 00:38.280
That's my money making hobby.

00:38.280 --> 00:43.440
And the project I want to talk about today gave me the opportunity to combine these two

00:43.440 --> 00:52.160
hobbies into one little project and I want to share the learnings from it with you.

00:52.160 --> 00:55.360
Okay, so the challenge.

00:55.360 --> 00:56.800
The picture above you see Ralph.

00:56.800 --> 01:00.600
He is a friend of mine and he plays along.

01:00.600 --> 01:03.360
He plays songs, people sing along.

01:03.360 --> 01:11.040
But we had one problem when we play somewhere with WENUs from 100 to 1000 people.

01:11.040 --> 01:13.520
Songbooks don't scale.

01:13.520 --> 01:17.600
We had songbooks but they got damaged.

01:17.600 --> 01:18.880
The WENUs were dark.

01:18.880 --> 01:21.120
People couldn't read.

01:21.120 --> 01:23.400
Songbooks even were stolen.

01:23.400 --> 01:29.800
One fact that was beneficial for the project, we have music stand software on our tablets.

01:29.800 --> 01:35.320
They are networked to each other and this music stand software has an API.

01:35.320 --> 01:37.080
Terrible software, proprietary stuff.

01:37.080 --> 01:40.200
I don't want to talk about this software today.

01:40.200 --> 01:48.120
But what we made from it so that you are able to use it in your own projects.

01:48.120 --> 01:51.400
How to get lyrics to the people with minimum effort.

01:51.400 --> 01:52.680
That was our task.

01:52.680 --> 01:54.480
We had to solve.

01:54.480 --> 02:00.040
And so that it doesn't get boring, I want to start with a demo so that you see the result

02:00.040 --> 02:04.160
and later on I will show you how we accomplished that.

02:04.160 --> 02:11.760
So please use your mobile phones and with it decide or your computers will work both.

02:11.760 --> 02:16.920
If you call this web page, you will see.

02:16.920 --> 02:22.600
Let me show it here.

02:22.600 --> 02:24.520
This side, the other side.

02:24.520 --> 02:30.040
There it is.

02:30.040 --> 02:37.320
You will see exactly that page which I have loaded here.

02:37.320 --> 02:40.160
It's waiting for lyrics.

02:40.160 --> 02:48.560
So the communication is established and when I now start sending the lyrics, imagine somebody

02:48.560 --> 02:53.480
on the stage would change to the next song in the music stand software.

02:53.480 --> 02:55.600
Okay, let's do it.

02:55.600 --> 03:02.240
I had an AI friend of mine write a few songs about open source and the like.

03:02.240 --> 03:09.320
So if my talk is boring, just look at the songs and I'm also open for collaborations

03:09.320 --> 03:11.680
in getting music to them.

03:11.680 --> 03:14.120
Okay, let's go on.

03:14.120 --> 03:18.360
What do we see here?

03:18.360 --> 03:23.880
The songs get updated like I just said before.

03:23.880 --> 03:27.760
And we even have confetti when there's a new song.

03:27.760 --> 03:31.640
So the title of the talk was the lazy developer.

03:31.640 --> 03:34.600
Why does being lazy matter?

03:34.600 --> 03:43.960
If you are too eager, it can happen that you think of a structure, how to implement something

03:43.960 --> 03:48.760
and that you stick to this structure, that you don't have this gut feeling that's too

03:48.760 --> 03:51.760
complicated, has to be easier.

03:51.760 --> 03:55.520
You create code duplicates and the like.

03:55.520 --> 03:59.680
If you're too lazy on the other hand, you get nothing done.

03:59.680 --> 04:02.560
So you have to find the sweet spot.

04:02.560 --> 04:06.720
Being lazy enough and being eager enough to get things done.

04:06.720 --> 04:11.200
And because I did this in my spare time, that was the only approach which could work.

04:11.200 --> 04:19.440
So I had to have something easy which allows me to get this job done but also allows to

04:19.440 --> 04:25.640
scale to a venue of a thousand people, to a thousand people requesting this resource

04:25.640 --> 04:27.840
at the same time.

04:27.840 --> 04:32.200
And here's my technical approach to that.

04:32.200 --> 04:35.920
We have the people who want to sing along.

04:35.920 --> 04:42.000
We have the musician with the music stand with the let me call it rest-ish API, what

04:42.000 --> 04:45.560
I saw wasn't so good.

04:45.560 --> 04:48.200
A small VM at the cloud provider.

04:48.200 --> 04:51.280
Everything should start with something like this.

04:51.280 --> 04:53.600
A host name which I said on it.

04:53.600 --> 05:05.080
After installed, then I used catty as a static web server for static pages.

05:05.080 --> 05:11.200
Great project makes it easy to host things with the same default TLS configuration without

05:11.200 --> 05:12.200
any effort.

05:12.200 --> 05:18.520
So it was just spinning up the container and it's immediately served the web pages like

05:18.520 --> 05:20.880
I wanted to have them.

05:20.880 --> 05:29.000
So now we need a component which does the heavy load which transports the data to the

05:29.000 --> 05:31.360
devices of the people.

05:31.360 --> 05:35.560
There are many solutions around and since I'm working as a cloud solution architect

05:35.560 --> 05:41.160
with Kubernetes, you always look at the CNCF landscape.

05:41.160 --> 05:49.560
And as well in my company, as for this project, I saw NETS as the solution.

05:49.560 --> 05:55.680
We use it for micro service interaction in our projects but NETS also has a web sockets

05:55.680 --> 06:04.040
interface which make it possible that the people which are getting the web page through

06:04.040 --> 06:13.320
the static web page on the browser, the JavaScript part connects through web sockets to the NETS

06:13.320 --> 06:14.600
server.

06:14.600 --> 06:20.640
And then the musician needs to have a computer which pulse the API and as soon as there is

06:20.640 --> 06:28.960
a new song, the lyrics get sent to the message broker and when we talk about message brokers,

06:28.960 --> 06:34.160
there are a few patterns around how messages are being distributed.

06:34.160 --> 06:38.320
We have a classical fan out pattern here.

06:38.320 --> 06:46.480
The message comes in, the message broker distributes it among all of the subscribed devices and

06:46.480 --> 06:54.160
what's really nice about the approach, it's just a few lines of code in the end.

06:54.160 --> 06:56.520
So let me show you.

06:56.520 --> 06:57.680
We have the project here.

06:57.680 --> 07:05.160
You will get access to the GitLab repository at the end of the talk and also linked online.

07:05.160 --> 07:08.160
Okay, so we have the NETS server.

07:08.160 --> 07:13.000
The ports, the 8443 is the web sockets port over TLS.

07:13.000 --> 07:20.600
3 times 2 is the NETS native port mapped to the outside.

07:20.600 --> 07:29.880
Then we tell NETS the host name so that for the TLS mapping and since Katie takes care

07:29.880 --> 07:40.320
of the certificates, we map the certificates from the Katie directory as we only file mount

07:40.320 --> 07:46.960
which we can access in this Docker compose repository I have set up here.

07:46.960 --> 07:53.880
And Katie, the easiest thing, just the regular web server ports mapped to the outside.

07:53.880 --> 07:57.520
Katie took care of getting the Lats and crypt certificates automatically.

07:57.520 --> 08:02.600
I only had to set the HSTS headers and had an A plus on Wallace SSL check.

08:02.600 --> 08:06.200
It's something I always want to try.

08:06.200 --> 08:08.880
Okay, and look at the application itself.

08:08.880 --> 08:16.320
This div does everything so it's more meta text than real payload on the page.

08:16.320 --> 08:21.800
There's the div with the id lyrics and as soon as something new comes in, its content is

08:21.800 --> 08:27.080
replaced and the JavaScript part is also something very simple.

08:27.080 --> 08:32.240
You see that's everything I did, basically developer.

08:32.240 --> 08:34.280
The communications magic is here.

08:34.280 --> 08:40.960
We include the NETS web sockets library and then we connect to the NETS server.

08:40.960 --> 08:47.600
We subscribe to the subject lyrics and as soon as something drops in as we receive new

08:47.600 --> 08:56.360
lyrics, we handle them over to handle lyrics which form its first line in bold and shows

08:56.440 --> 09:00.840
the rest just like we received it from the NETS server.

09:00.840 --> 09:07.560
If you want to have a look at the NETS configuration, it's also not much.

09:07.560 --> 09:10.960
I have defined two permission sets.

09:10.960 --> 09:16.160
One default permission so any user of the system has the set of permissions and it's

09:16.160 --> 09:25.840
just subscribed to lyrics and we have the lyrics publish security profile for the authenticated

09:25.840 --> 09:26.840
publisher.

09:26.840 --> 09:33.280
I defined the user with the hash password, assigned the permission and down below here

09:33.280 --> 09:44.000
you can see the web socket definition where I also use the TLS certificate, caddy gets

09:44.000 --> 09:46.800
me from let's encrypt.

09:46.800 --> 09:57.960
Next line I assign anonymous access to the user that it works with the login.

09:57.960 --> 09:59.960
No, not login.

09:59.960 --> 10:03.800
Okay, that's it in a nutshell.

10:03.800 --> 10:12.360
If you are interested about the topic of message brokers, I can highly recommend the book enterprise

10:12.360 --> 10:15.320
integration patterns.

10:15.320 --> 10:17.320
It's a book from 2003.

10:17.320 --> 10:25.320
I'm showing an IT book from 2003 but the principles are still the same.

10:25.320 --> 10:27.240
Of course, there are a few new.

10:27.240 --> 10:33.880
If you go to the website, they also have listed new principles but I wish I had new in the

10:33.880 --> 10:37.120
book 20 years earlier.

10:37.120 --> 10:39.760
Now I have it on my desk.

10:39.760 --> 10:47.440
My GitHub repo, check out Nats, check out caddy server and it's absolutely possible.

10:47.440 --> 10:49.960
You don't have to use Nats for this.

10:49.960 --> 10:51.880
You can use an MQTT server.

10:51.880 --> 10:56.040
I did the same example with EMQX.

10:56.040 --> 10:59.720
Rapid MQ should work.

10:59.720 --> 11:09.400
Also with Redis, it also has web sockets integration so you could also use that.

11:09.400 --> 11:10.760
My example was in Nats.

11:10.760 --> 11:15.640
If you are interested in Nats, I asked the guys of the project if they could send me some.

11:15.640 --> 11:19.520
On this corner of the desk, if you leave the room here, you can grab a sticker.

11:19.520 --> 11:23.520
After all, we are on conferences for the stickers, isn't it?

11:23.520 --> 11:26.760
That way.

11:26.760 --> 11:30.320
Okay.

11:30.320 --> 11:31.520
That's about it.

11:31.520 --> 11:32.520
What did we learn?

11:32.520 --> 11:38.240
Let others do the heavy lifting though.

11:38.240 --> 11:46.760
Just be lazy enough to find the right ways and get things done and concentrate on the

11:46.760 --> 11:48.680
things that really matters.

11:48.680 --> 11:49.960
Reach out to me if you have questions.

11:49.960 --> 11:51.600
I will be around.

11:51.600 --> 11:53.000
Don't forget the stickers.

11:53.000 --> 11:55.680
Have a great Svastim Sunday and a safe trip home.

11:55.680 --> 11:56.880
I'm Markus Röntschler.

11:56.880 --> 12:03.400
Thank you.

12:03.400 --> 12:04.400
Okay.

12:04.400 --> 12:04.440
Thank you for your talk.

